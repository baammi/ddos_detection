source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%tms = type { i32, i32, i32, i32 }
%timespec = type { i32, i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%stat = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%linux_dirent64 = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_80a0.1 = constant i32 -352321502
@global_var_1e898.5 = global i32 0
@global_var_1e8a8.6 = global i32* @global_var_1e898.5
@global_var_1ea08.12 = global i32 0
@global_var_f410.18 = constant i32 -382906384
@global_var_15d5c.21 = constant [4 x i8] c"GET\00"
@1 = constant i32 47
@global_var_13490.25 = constant i32 -382910448
@global_var_15d54.27 = constant i32 32
@global_var_15d2c.29 = constant [24 x i8] c" HTTP/1.1\0D\0AUser-Agent: \00"
@global_var_15d44.31 = constant [9 x i8] c"\0D\0AHost: \00"
@global_var_15d50.33 = constant [3 x i8] c"\0D\0A\00"
@global_var_15d64.35 = constant [9 x i8] c"Cookie: \00"
@global_var_15d70.37 = constant [3 x i8] c"; \00"
@global_var_15d74.39 = constant [5 x i8] c"\0D\0A\0D\0A\00"
@global_var_15d7c.41 = constant i32 59
@global_var_15d80.43 = constant [5 x i8] c"http\00"
@global_var_15d88.45 = constant [5 x i8] c"url=\00"
@global_var_15d90.47 = constant [5 x i8] c"POST\00"
@global_var_12af8.48 = constant i32 -439275520
@global_var_15d98.50 = constant i32 39
@global_var_15d9c.52 = constant i32 61
@global_var_1ea24.56 = global i32 0
@global_var_a0cc.57 = constant i32 -352321546
@global_var_140ec.58 = constant i32 -481296384
@global_var_1ea28.60 = global i32 0
@global_var_1ea2c.61 = local_unnamed_addr global i32 0
@global_var_d7b0.67 = constant i32 -382906384
@global_var_dc74.69 = constant i32 -382906384
@global_var_ce40.71 = constant i32 -382906384
@global_var_c6fc.73 = constant i32 -382906384
@global_var_bf88.75 = constant i32 -382906384
@global_var_b728.77 = constant i32 -382906384
@global_var_b00c.79 = constant i32 -382906384
@global_var_a890.81 = constant i32 -382906384
@global_var_81cc.83 = constant i32 -382906384
@global_var_1eadc.85 = global i32 0
@global_var_1eae4.96 = global i32 0
@global_var_15da0.98 = constant [14 x i8] c"/proc/net/tcp\00"
@global_var_1ea48.102 = global i32 0
@global_var_1eae0.104 = global i32 0
@global_var_f380.106 = constant i32 -382910352
@global_var_1e8b4.108 = global i32 77192
@global_var_1e8ac.110 = global i32 -1
@global_var_1eaec.116 = local_unnamed_addr global i32 0
@global_var_1eaeb.117 = local_unnamed_addr global i32 0
@global_var_1eaea.118 = local_unnamed_addr global i32 0
@global_var_f1f8.120 = constant i32 -442556408
@global_var_15db0.122 = constant [14 x i8] c"/dev/watchdog\00"
@global_var_1eae9.127 = local_unnamed_addr global i32 0
@global_var_15dd4.129 = constant i32 10
@global_var_15dc0.131 = constant [19 x i8] c"/dev/misc/watchdog\00"
@global_var_1e8b0.133 = global i32 -1
@global_var_12d88.138 = constant i32 -382910224
@global_var_15dd8.140 = constant i32 16777216
@global_var_1ea50.142 = global i32 0
@global_var_1ea5c.144 = global i32 0
@global_var_1ea54.146 = global i32 0
@global_var_1ea58.148 = global i32 0
@global_var_15de0.154 = constant [33 x i8] c"abcdefghijklmnopqrstuvw012345678\00"
@global_var_10338.163 = constant i32 -442695668
@global_var_1eb00.165 = global i32 0
@global_var_1ea94.167 = global i32 0
@global_var_1ea60.169 = global i32 0
@global_var_1ea8c.171 = global i32 0
@global_var_1eaf8.179 = global i32 0
@global_var_1eafc.181 = global i32 0
@global_var_1ea67.184 = local_unnamed_addr global i32 0
@global_var_1ea66.185 = local_unnamed_addr global i32 0
@global_var_1ea78.187 = global i32 0
@global_var_1ea6c.189 = local_unnamed_addr global i32 0
@global_var_1ea69.190 = local_unnamed_addr global i32 0
@global_var_1ea79.191 = local_unnamed_addr global i32 0
@global_var_1ea7b.192 = local_unnamed_addr global i32 0
@global_var_1ea6d.193 = local_unnamed_addr global i32 0
@global_var_1ea68.194 = local_unnamed_addr global i32 0
@global_var_1ea7a.195 = local_unnamed_addr global i32 0
@global_var_1ea87.197 = local_unnamed_addr global i32 0
@global_var_1ea86.198 = local_unnamed_addr global i32 0
@global_var_15eb8.200 = constant [5 x i8] c"PMMV\00"
@global_var_15ec0.202 = constant i32 5396247
@global_var_15ec4.204 = constant i32 1296912387
@global_var_15f3c.206 = constant i32 19
@global_var_15ecc.208 = constant i32 320017171
@global_var_15ed4.210 = constant i32 4115
@global_var_15ed8.212 = constant i32 370216979
@global_var_15ee0.214 = constant i32 370216979
@global_var_15ee8.216 = constant i32 370216979
@global_var_15ef0.218 = constant [7 x i8] c"CLVQNS\00"
@global_var_15ef8.220 = constant i32 370216979
@global_var_15f04.222 = constant i32 370216979
@global_var_15f10.224 = constant i32 303174162
@global_var_15f18.226 = constant i32 303174162
@global_var_15f24.228 = constant i32 370216979
@global_var_15f30.230 = constant [8 x i8] c"FGDCWNV\00"
@global_var_15f38.232 = constant i32 269555223
@global_var_15f40.234 = constant [7 x i8] c"XNZZ\0C\22\00"
@global_var_15f48.236 = constant [6 x i8] c"HT@XF\00"
@global_var_15f50.238 = constant [5 x i8] c"CLIM\00"
@global_var_15f58.240 = constant [8 x i8] c"ZOJFKRA\00"
@global_var_15f60.242 = constant i32 387006810
@global_var_15f68.244 = constant [6 x i8] c"TKXZT\00"
@global_var_15f70.246 = constant [6 x i8] c"CFOKL\00"
@global_var_15f78.248 = constant [5 x i8] c"RCQQ\00"
@global_var_15f80.250 = constant [8 x i8] c"CLVQNS\22\00"
@global_var_15f88.252 = constant i32 320499557
@global_var_15f90.254 = constant i32 437918234
@global_var_15f98.256 = constant [9 x i8] c"RCQQUMPF\00"
@global_var_15fa4.258 = constant i32 319951379
@global_var_15fb0.260 = constant i32 1447843658
@global_var_15fbc.262 = constant i32 1867011861
@global_var_15fcc.264 = constant [11 x i8] c"QWRGPTKQMP\00"
@global_var_15fd8.266 = constant i32 1178819416
@global_var_15fe4.268 = constant i32 320017171
@global_var_15fec.270 = constant i32 269488144
@global_var_15ff4.272 = constant [14 x i8] c"cFOKLKQVPCVMP\00"
@global_var_15d78.274 = constant i32 0
@global_var_15e04.276 = constant [14 x i8] c"CFOKLKQVPCVMP\00"
@global_var_15e14.278 = constant [6 x i8] c"cFOKL\00"
@global_var_15e1c.280 = constant [4 x i8] c"CFO\00"
@global_var_15e20.282 = constant [9 x i8] c"QOACFOKL\00"
@global_var_15e2c.284 = constant i32 1263486531
@global_var_15e38.286 = constant i32 1263486531
@global_var_15e44.288 = constant i32 323043395
@global_var_15e4c.290 = constant i32 324420417
@global_var_15e58.292 = constant i32 387007823
@global_var_15e60.294 = constant [7 x i8] c"OGPNKL\00"
@global_var_15e68.296 = constant [8 x i8] c"QWRRMPV\00"
@global_var_15e70.298 = constant [5 x i8] c"WQGP\00"
@global_var_15e78.300 = constant [6 x i8] c"EWGQV\00"
@global_var_15e80.302 = constant [7 x i8] c"FCGOML\00"
@global_var_15e88.304 = constant [4 x i8] c"@KL\00"
@global_var_15e8c.306 = constant [7 x i8] c"VGNLGV\00"
@global_var_15e94.308 = constant [9 x i8] c"MRGPCVMP\00"
@global_var_1ea70.309 = local_unnamed_addr global i32 0
@global_var_1ea6e.311 = local_unnamed_addr global i32 0
@global_var_1ea6f.312 = local_unnamed_addr global i32 0
@global_var_1ea88.314 = local_unnamed_addr global i32 0
@global_var_1ea89.315 = local_unnamed_addr global i32 0
@global_var_15ea0.320 = constant [5 x i8] c"ogin\00"
@global_var_15ea8.322 = constant [6 x i8] c"enter\00"
@global_var_1600b.326 = constant i32 2096127
@global_var_16002.328 = constant i32 2095871
@global_var_15eb0.330 = constant [8 x i8] c"assword\00"
@global_var_1eb08.332 = global i32 0
@global_var_1e8bc.335 = global i32 -559038737
@global_var_16010.340 = constant [21 x i8] c"ALA\0CJCAIWP@MVLGV\0CAD\22\00"
@global_var_1eb24.341 = local_unnamed_addr global i32 0
@global_var_1eb20.342 = local_unnamed_addr global i32 0
@global_var_1eb25.343 = local_unnamed_addr global i32 0
@global_var_16028.345 = constant [3 x i8] c"\22]\00"
@global_var_1eb28.346 = local_unnamed_addr global i32 0
@global_var_1eb2c.347 = local_unnamed_addr global i32 0
@global_var_1eb2d.348 = local_unnamed_addr global i32 0
@global_var_1602c.350 = constant [24 x i8] c"PGRMPV\0CJCAIWP@MVLGV\0CAD\22\00"
@global_var_1eb9c.351 = local_unnamed_addr global i32 0
@global_var_1eb98.352 = local_unnamed_addr global i32 0
@global_var_1eb9d.353 = local_unnamed_addr global i32 0
@global_var_16044.355 = constant i32 51097
@global_var_1eba0.356 = local_unnamed_addr global i32 0
@global_var_1eba4.357 = local_unnamed_addr global i32 0
@global_var_1eba5.358 = local_unnamed_addr global i32 0
@global_var_16048.360 = constant i32 1448168270
@global_var_1eb1c.361 = local_unnamed_addr global i32 0
@global_var_1eb18.362 = local_unnamed_addr global i32 0
@global_var_1eb1d.363 = local_unnamed_addr global i32 0
@global_var_16058.365 = constant i32 1381389898
@global_var_1eb34.366 = local_unnamed_addr global i32 0
@global_var_1eb30.367 = local_unnamed_addr global i32 0
@global_var_1eb35.368 = local_unnamed_addr global i32 0
@global_var_16078.370 = constant [8 x i8] c"\0DRPMA\0D\22\00"
@global_var_1eb38.371 = local_unnamed_addr global i32 0
@global_var_1eb3c.372 = local_unnamed_addr global i32 0
@global_var_1eb3d.373 = local_unnamed_addr global i32 0
@global_var_16080.375 = constant [6 x i8] c"\0DGZG\22\00"
@global_var_1eb44.376 = local_unnamed_addr global i32 0
@global_var_1eb40.377 = local_unnamed_addr global i32 0
@global_var_1eb45.378 = local_unnamed_addr global i32 0
@global_var_16088.380 = constant i32 1195772418
@global_var_1eb4c.381 = local_unnamed_addr global i32 0
@global_var_1eb48.382 = local_unnamed_addr global i32 0
@global_var_1eb4d.383 = local_unnamed_addr global i32 0
@global_var_16094.385 = constant [5 x i8] c"\0DDF\22\00"
@global_var_1eb54.386 = local_unnamed_addr global i32 0
@global_var_1eb50.387 = local_unnamed_addr global i32 0
@global_var_1eb55.388 = local_unnamed_addr global i32 0
@global_var_1609c.390 = constant [8 x i8] c"\0CCLKOG\22\00"
@global_var_1eb58.391 = local_unnamed_addr global i32 0
@global_var_1eb5c.392 = local_unnamed_addr global i32 0
@global_var_1eb5d.393 = local_unnamed_addr global i32 0
@global_var_160a4.395 = constant [9 x i8] c"\0DQVCVWQ\22\00"
@global_var_1eb64.396 = local_unnamed_addr global i32 0
@global_var_1eb60.397 = local_unnamed_addr global i32 0
@global_var_1eb65.398 = local_unnamed_addr global i32 0
@global_var_160b0.400 = constant i32 1836214128
@global_var_1eb6c.401 = local_unnamed_addr global i32 0
@global_var_1eb68.402 = local_unnamed_addr global i32 0
@global_var_1eb6d.403 = local_unnamed_addr global i32 0
@global_var_160c0.405 = constant [11 x i8] c"jvvrdnmmf\22\00"
@global_var_1eb70.406 = local_unnamed_addr global i32 0
@global_var_1eb74.407 = local_unnamed_addr global i32 0
@global_var_1eb75.408 = local_unnamed_addr global i32 0
@global_var_160cc.410 = constant [11 x i8] c"nmnlmevdm\22\00"
@global_var_1eb78.411 = local_unnamed_addr global i32 0
@global_var_1eb7c.412 = local_unnamed_addr global i32 0
@global_var_1eb7d.413 = local_unnamed_addr global i32 0
@global_var_160d8.415 = constant i32 437738110
@global_var_1eb84.416 = local_unnamed_addr global i32 0
@global_var_1eb80.417 = local_unnamed_addr global i32 0
@global_var_1eb85.418 = local_unnamed_addr global i32 0
@global_var_160fc.420 = constant [9 x i8] c"XMNNCPF\22\00"
@global_var_1eb8c.421 = local_unnamed_addr global i32 0
@global_var_1eb88.422 = local_unnamed_addr global i32 0
@global_var_1eb8d.423 = local_unnamed_addr global i32 0
@global_var_16108.425 = constant [12 x i8] c"egvnmacnkr\22\00"
@global_var_1eb94.426 = local_unnamed_addr global i32 0
@global_var_1eb90.427 = local_unnamed_addr global i32 0
@global_var_1eb95.428 = local_unnamed_addr global i32 0
@global_var_16114.430 = constant [7 x i8] c"QJGNN\22\00"
@global_var_1ebac.431 = local_unnamed_addr global i32 0
@global_var_1eba8.432 = local_unnamed_addr global i32 0
@global_var_1ebad.433 = local_unnamed_addr global i32 0
@global_var_1611c.435 = constant [8 x i8] c"GLC@NG\22\00"
@global_var_1ebb0.436 = local_unnamed_addr global i32 0
@global_var_1ebb4.437 = local_unnamed_addr global i32 0
@global_var_1ebb5.438 = local_unnamed_addr global i32 0
@global_var_16124.440 = constant [8 x i8] c"Q[QVGO\22\00"
@global_var_1ebb8.441 = local_unnamed_addr global i32 0
@global_var_1ebbc.442 = local_unnamed_addr global i32 0
@global_var_1ebbd.443 = local_unnamed_addr global i32 0
@global_var_1612c.445 = constant [4 x i8] c"QJ\22\00"
@global_var_1ebc4.446 = local_unnamed_addr global i32 0
@global_var_1ebc0.447 = local_unnamed_addr global i32 0
@global_var_1ebc5.448 = local_unnamed_addr global i32 0
@global_var_16130.450 = constant i32 1280000013
@global_var_1ebc8.451 = local_unnamed_addr global i32 0
@global_var_1ebcc.452 = local_unnamed_addr global i32 0
@global_var_1ebcd.453 = local_unnamed_addr global i32 0
@global_var_16144.455 = constant i32 1668311919
@global_var_1ebd4.456 = local_unnamed_addr global i32 0
@global_var_1ebd0.457 = local_unnamed_addr global i32 0
@global_var_1ebd5.458 = local_unnamed_addr global i32 0
@global_var_16160.460 = constant [10 x i8] c"LAMPPGAV\22\00"
@global_var_1ebd8.461 = local_unnamed_addr global i32 0
@global_var_1ebdc.462 = local_unnamed_addr global i32 0
@global_var_1ebdd.463 = local_unnamed_addr global i32 0
@global_var_1616c.465 = constant i32 1280000013
@global_var_1ebe0.466 = local_unnamed_addr global i32 0
@global_var_1ebe4.467 = local_unnamed_addr global i32 0
@global_var_1ebe5.468 = local_unnamed_addr global i32 0
@global_var_16180.470 = constant i32 1280000013
@global_var_1ebec.471 = local_unnamed_addr global i32 0
@global_var_1ebe8.472 = local_unnamed_addr global i32 0
@global_var_1ebed.473 = local_unnamed_addr global i32 0
@global_var_16198.475 = constant i32 1464693110
@global_var_1ebf4.476 = local_unnamed_addr global i32 0
@global_var_1ebf0.477 = local_unnamed_addr global i32 0
@global_var_1ebf5.478 = local_unnamed_addr global i32 0
@global_var_161b0.480 = constant [18 x i8] c"\0DGVA\0DPGQMNT\0CAMLD\22\00"
@global_var_1ebfc.481 = local_unnamed_addr global i32 0
@global_var_1ebf8.482 = local_unnamed_addr global i32 0
@global_var_1ebfd.483 = local_unnamed_addr global i32 0
@global_var_161c4.485 = constant i32 1196376908
@global_var_1ec00.486 = local_unnamed_addr global i32 0
@global_var_1ec04.487 = local_unnamed_addr global i32 0
@global_var_1ec05.488 = local_unnamed_addr global i32 0
@global_var_161d4.490 = constant i32 1280068961
@global_var_1ec0c.491 = local_unnamed_addr global i32 0
@global_var_1ec08.492 = local_unnamed_addr global i32 0
@global_var_1ec0d.493 = local_unnamed_addr global i32 0
@global_var_161ec.495 = constant i32 1195458915
@global_var_1ec14.496 = local_unnamed_addr global i32 0
@global_var_1ec10.497 = local_unnamed_addr global i32 0
@global_var_1ec15.498 = local_unnamed_addr global i32 0
@global_var_16240.500 = constant i32 1195458915
@global_var_1ec1c.501 = local_unnamed_addr global i32 0
@global_var_1ec18.502 = local_unnamed_addr global i32 0
@global_var_1ec1d.503 = local_unnamed_addr global i32 0
@global_var_16264.505 = constant i32 1447841121
@global_var_1ec24.506 = local_unnamed_addr global i32 0
@global_var_1ec20.507 = local_unnamed_addr global i32 0
@global_var_1ec25.508 = local_unnamed_addr global i32 0
@global_var_16298.510 = constant i32 1633044305
@global_var_1ec28.511 = local_unnamed_addr global i32 0
@global_var_1ec2c.512 = local_unnamed_addr global i32 0
@global_var_1ec2d.513 = local_unnamed_addr global i32 0
@global_var_162a8.515 = constant i32 1346651984
@global_var_1ec30.516 = local_unnamed_addr global i32 0
@global_var_1ec34.517 = local_unnamed_addr global i32 0
@global_var_1ec35.518 = local_unnamed_addr global i32 0
@global_var_162b4.520 = constant i32 1128353102
@global_var_1ec38.521 = local_unnamed_addr global i32 0
@global_var_1ec3c.522 = local_unnamed_addr global i32 0
@global_var_1ec3d.523 = local_unnamed_addr global i32 0
@global_var_162c0.525 = constant i32 257312593
@global_var_1ec40.526 = local_unnamed_addr global i32 0
@global_var_1ec44.527 = local_unnamed_addr global i32 0
@global_var_1ec45.528 = local_unnamed_addr global i32 0
@global_var_162d0.530 = constant i32 1447841089
@global_var_1ec48.531 = local_unnamed_addr global i32 0
@global_var_1ec4c.532 = local_unnamed_addr global i32 0
@global_var_1ec4d.533 = local_unnamed_addr global i32 0
@global_var_162e4.535 = constant i32 1279479894
@global_var_1ec50.536 = local_unnamed_addr global i32 0
@global_var_1ec54.537 = local_unnamed_addr global i32 0
@global_var_1ec55.538 = local_unnamed_addr global i32 0
@global_var_162f8.540 = constant [9 x i8] c"AJWLIGF\22\00"
@global_var_1ec5c.541 = local_unnamed_addr global i32 0
@global_var_1ec58.542 = local_unnamed_addr global i32 0
@global_var_1ec5d.543 = local_unnamed_addr global i32 0
@global_var_161e0.545 = constant i32 1380403017
@global_var_1ec64.546 = local_unnamed_addr global i32 0
@global_var_1ec60.547 = local_unnamed_addr global i32 0
@global_var_1ec65.548 = local_unnamed_addr global i32 0
@global_var_16304.550 = constant i32 1280068929
@global_var_1ec68.551 = local_unnamed_addr global i32 0
@global_var_1ec6c.552 = local_unnamed_addr global i32 0
@global_var_1ec6d.553 = local_unnamed_addr global i32 0
@global_var_16314.555 = constant i32 1414547281
@global_var_1ec74.556 = local_unnamed_addr global i32 0
@global_var_1ec70.557 = local_unnamed_addr global i32 0
@global_var_1ec75.558 = local_unnamed_addr global i32 0
@global_var_16328.560 = constant i32 1414547281
@global_var_1ec7c.561 = local_unnamed_addr global i32 0
@global_var_1ec78.562 = local_unnamed_addr global i32 0
@global_var_1ec7d.563 = local_unnamed_addr global i32 0
@global_var_16344.565 = constant i32 1264078191
@global_var_1ec80.566 = local_unnamed_addr global i32 0
@global_var_1ec84.567 = local_unnamed_addr global i32 0
@global_var_1ec85.568 = local_unnamed_addr global i32 0
@global_var_163b4.570 = constant i32 1264078191
@global_var_1ec88.571 = local_unnamed_addr global i32 0
@global_var_1ec8c.572 = local_unnamed_addr global i32 0
@global_var_1ec8d.573 = local_unnamed_addr global i32 0
@global_var_16424.575 = constant i32 1264078191
@global_var_1ec90.576 = local_unnamed_addr global i32 0
@global_var_1ec94.577 = local_unnamed_addr global i32 0
@global_var_1ec95.578 = local_unnamed_addr global i32 0
@global_var_16494.580 = constant i32 1264078191
@global_var_1ec9c.581 = local_unnamed_addr global i32 0
@global_var_1ec98.582 = local_unnamed_addr global i32 0
@global_var_1ec9d.583 = local_unnamed_addr global i32 0
@global_var_16504.585 = constant i32 1264078191
@global_var_1eca5.586 = local_unnamed_addr global i32 0
@global_var_1eca0.587 = local_unnamed_addr global i32 0
@global_var_1eca4.588 = local_unnamed_addr global i32 0
@global_var_14ad4.591 = constant i32 -476053504
@global_var_13860.595 = constant i32 -443219956
@global_var_139cc.600 = constant i32 -376111092
@global_var_1ead0.603 = global i32 0
@global_var_13b4c.605 = constant i32 -456978431
@global_var_1eca8.607 = global i32 0
@global_var_1ea98.609 = global i32 0
@global_var_1e9bc.612 = global i32 256
@global_var_1e8c0.613 = global i32* @global_var_1e9bc.612
@global_var_1eac0.616 = global i32 0
@global_var_1ed28.618 = global i32 0
@global_var_15288.619 = constant i32 -382910416
@global_var_13ad0.620 = constant i32 -509595648
@global_var_1416c.627 = constant i32 -442564520
@global_var_1e9c8.633 = global i32 0
@global_var_1370c.635 = constant i32 -481230848
@global_var_1eab0.637 = global i32 0
@global_var_14ed8.639 = constant i32 -509587456
@global_var_16688.641 = constant i32 33554944
@global_var_1ea00.642 = global i32* @global_var_16688.641
@global_var_1e9e0.645 = global i32 0
@global_var_1eab4.649 = local_unnamed_addr global i32 0
@global_var_1488c.651 = constant i32 -352321419
@global_var_1e88c.655 = global i32 -1
@global_var_1eac4.658 = global i32 0
@global_var_1eac8.660 = local_unnamed_addr global i32 0
@global_var_14ac0.661 = constant i32 -390234096
@global_var_1657c.663 = constant [10 x i8] c"/dev/null\00"
@global_var_1eacc.665 = global i32 0
@global_var_1eab8.670 = local_unnamed_addr global i32 0
@global_var_1eabc.672 = global i32 0
@global_var_13ab0.674 = constant i32 -369096946
@global_var_1e9f8 = external local_unnamed_addr global i32
@global_var_13a64.684 = constant i32 -442564608
@global_var_14d88.686 = constant i32 -335544664
@global_var_14ea4.689 = constant i32 -275775369
@global_var_1561c.690 = constant i32 -382910352
@global_var_1ead8.692 = global i32 0
@global_var_1ed40.695 = global i32 0
@global_var_1ed44.697 = global i32 0
@global_var_1e890.700 = global i32 0
@global_var_1ea04.3 = external global i8*
@global_var_1ea20.54 = external global i8*
@global_var_1ea21.65 = global i8 0
@2 = internal constant [2 x i8] c"\01\00"
@global_var_1e8b8.112 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0)
@global_var_1eae8.115 = external global i8*
@global_var_1ea4c.136 = external global i8*
@global_var_1ea90.173 = external global i8*
@global_var_1ea91.174 = local_unnamed_addr global i8 0
@global_var_1ea64.183 = external global i8*
@global_var_1ea84.188 = local_unnamed_addr global i8 0
@global_var_1ea85.196 = local_unnamed_addr global i8 0
@global_var_1ea7c.313 = local_unnamed_addr global i8 0
@global_var_1ea74.310 = local_unnamed_addr global i8 0
@global_var_15d60.23 = constant [2 x i8] c"/\00"

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  %v0_80a0 = call i32 @function_8130()
  %v1_80a4 = call i32 @function_15ccc(i32 %v0_80a0)
  call void @__pseudo_branch(i32 %v3_8098)
  ret i32 %v1_80a4
}

define i32 @function_80b0() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1ea04.3 to i32), i32* %r5.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1ea04.3 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_80c0 = load i32, i32* @r0, align 4
  ret i32 %v12_80c0

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1e8a8.6 to i32), i32* %r4.global-to-local, align 4
  %v2_80c8 = load i32, i32* bitcast (i32** @global_var_1e8a8.6 to i32*), align 4
  store i32 %v2_80c8, i32* %r2.global-to-local, align 4
  %v2_80d0 = icmp eq i32 %v2_80c8, 0
  br i1 %v2_80d0, label %bb8, label %dec_label_pc_80d8

dec_label_pc_80d8:                                ; preds = %bb7, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge
  %v1_80dc = phi i32 [ %v1_80dc.pre, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ ptrtoint (i32** @global_var_1e8a8.6 to i32), %bb7 ]
  %v0_80d8 = phi i32 [ %v2_80e8, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ %v2_80c8, %bb7 ]
  %v1_80d8 = add i32 %v0_80d8, 4
  %v2_80dc = inttoptr i32 %v1_80dc to i32*
  store i32 %v1_80d8, i32* %v2_80dc, align 4
  %v0_80e4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v2_80e8 = load i32, i32* bitcast (i32** @global_var_1e8a8.6 to i32*), align 4
  store i32 %v2_80e8, i32* %r2.global-to-local, align 4
  %v2_80f0 = icmp eq i32 %v2_80e8, 0
  br i1 %v2_80f0, label %.loopexit, label %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge

dec_label_pc_80d8.dec_label_pc_80d8_crit_edge:    ; preds = %dec_label_pc_80d8
  %v1_80dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_80d8

.loopexit:                                        ; preds = %dec_label_pc_80d8
  %v2_8110.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8110 = phi i32 [ %v2_8110.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1ea04.3 to i32), %bb7 ]
  %v3_8110 = inttoptr i32 %v2_8110 to i8*
  store i8 1, i8* %v3_8110, align 1
  %v2_8114 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8114, i32* %r4.global-to-local, align 4
  %v11_8114 = load i32, i32* @r0, align 4
  ret i32 %v11_8114

; uselistorder directives
  uselistorder i32 %v2_80e8, { 1, 2, 0 }
  uselistorder i32** @global_var_1e8a8.6, { 1, 0 }
  uselistorder i8** @global_var_1ea04.3, { 1, 0 }
  uselistorder label %dec_label_pc_80d8, { 1, 0 }
}

define i32 @function_8124(i32 %arg1) local_unnamed_addr {
dec_label_pc_8124:
  %v0_8124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8124, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_8124
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_8124, %bb
  %v5_812c = load i32, i32* @r0, align 4
  ret i32 %v5_812c

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_8130() local_unnamed_addr {
.thread:
  %v2_8150 = load i32, i32* inttoptr (i32 125084 to i32*), align 4
  %v2_8154 = icmp eq i32 %v2_8150, 0
  br i1 %v2_8154, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 125084

bb2:                                              ; preds = %.thread
  ret i32 125084

; uselistorder directives
  uselistorder i32 125084, { 1, 0, 2 }
}

define i32 @function_8188() local_unnamed_addr {
dec_label_pc_8188:
  %v5_818c = load i32, i32* @r0, align 4
  ret i32 %v5_818c
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8198 = ptrtoint i32* %stack_var_4 to i32
  %v8_81b8 = call i32 @function_14b74(i32 ptrtoint (i32* @global_var_f410.18 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 89352, i32 %arg1, i32 %v4_8198)
  %v0_81bc = call i32 @function_1453c()
  ret i32 %v0_81bc
}

define i32 @function_81cc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_81cc:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-328 = alloca i32, align 4
  %stack_var_-200 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-10568 = alloca i32, align 4
  %stack_var_-404 = alloca i32, align 4
  %stack_var_-20809 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_81cc = load i32, i32* @r4, align 4
  store i32 %v3_81cc, i32* %stack_var_-36, align 4
  %v6_81cc = load i32, i32* @r5, align 4
  %v9_81cc = load i32, i32* @r6, align 4
  %v15_81cc = load i32, i32* @r8, align 4
  %v1_81d8 = urem i32 %arg3, 256
  store i32 %v1_81d8, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_81e4 = urem i32 %arg1, 256
  store i32 %v1_81e4, i32* %ip.global-to-local, align 4
  store i32 21, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v1_81d8, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* %r1.global-to-local, align 4
  %v5_8200 = inttoptr i32 %arg4 to i32*
  %v6_8200 = call i32 @function_9f84(i32 %v1_81d8, i32* %v5_8200, i32 21, i32 0, i32 %arg2)
  %v0_8204 = load i32, i32* @r5, align 4
  store i32 %v0_8204, i32* %r1.global-to-local, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  %v0_8210 = load i32, i32* @r4, align 4
  store i32 %v0_8210, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15d5c.21 to i32), i32* %r3.global-to-local, align 4
  %v6_8218 = inttoptr i32 %v0_8204 to i32*
  %v7_8218 = call i32 @function_9f84(i32 %v0_8210, i32* %v6_8218, i32 20, i32 ptrtoint ([4 x i8]* @global_var_15d5c.21 to i32), i32 %v6_8200)
  %v0_821c = load i32, i32* @r5, align 4
  store i32 %v0_821c, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v7_8218, i32* %fp.global-to-local, align 4
  %v0_822c = load i32, i32* @r4, align 4
  store i32 %v0_822c, i32* %r0.global-to-local, align 4
  %v5_8230 = inttoptr i32 %v0_821c to i32*
  %v6_8230 = call i32 @function_9f84(i32 %v0_822c, i32* %v5_8230, i32 8, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v0_8234 = load i32, i32* @r5, align 4
  store i32 %v0_8234, i32* %r1.global-to-local, align 4
  store i32 %v6_8230, i32* %sb.global-to-local, align 4
  store i32 22, i32* %r2.global-to-local, align 4
  %v0_8240 = load i32, i32* @r4, align 4
  store i32 %v0_8240, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([2 x i8]* @global_var_15d60.23 to i32), i32* %r3.global-to-local, align 4
  %v5_8248 = inttoptr i32 %v0_8234 to i32*
  %v6_8248 = call i32 @function_9f84(i32 %v0_8240, i32* %v5_8248, i32 22, i32 ptrtoint ([2 x i8]* @global_var_15d60.23 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_824c = load i32, i32* @r5, align 4
  store i32 %v0_824c, i32* %r1.global-to-local, align 4
  store i32 %v6_8248, i32* @sl, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_8258 = load i32, i32* @r4, align 4
  store i32 %v0_8258, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_8260 = inttoptr i32 %v0_824c to i32*
  %v5_8260 = call i32 @function_a4e8(i32 %v0_8258, i32* %v4_8260, i32 24, i32 1)
  %v0_8264 = load i32, i32* @r5, align 4
  store i32 %v0_8264, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 80, i32* %r3.global-to-local, align 4
  store i32 %v5_8260, i32* @r6, align 4
  %v0_8274 = load i32, i32* @r4, align 4
  store i32 %v0_8274, i32* %r0.global-to-local, align 4
  %v4_8278 = inttoptr i32 %v0_8264 to i32*
  %v5_8278 = call i32 @function_a4e8(i32 %v0_8274, i32* %v4_8278, i32 7, i32 80)
  %v2_8280 = ptrtoint i32* %stack_var_-20809 to i32
  %v3_8288 = mul i32 %v5_8278, 65536
  store i32 %v3_8288, i32* %r3.global-to-local, align 4
  %tmp199 = bitcast i32* %stack_var_-20809 to i8*
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 10241, i32* @r2, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_829c = urem i32 %v5_8278, 65536
  store i32 %v3_829c, i32* %r8.global-to-local, align 4
  %v3_82a0 = call i32 @function_13ad0(i8* %tmp199, i32 0)
  store i32 %v3_82a0, i32* %r0.global-to-local, align 4
  %v0_82a4 = load i32, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_82a4 = icmp slt i32 %v0_82a4, 0
  store i1 %v1_82a4, i1* %cpsr_n.global-to-local, align 1
  %v2_82a4 = icmp eq i32 %v0_82a4, 0
  store i1 %v2_82a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_82a4, label %.thread13, label %bb

bb:                                               ; preds = %dec_label_pc_81cc
  %v1_82a8 = load i32, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v2_82a8 = icmp slt i32 %v1_82a8, 0
  store i1 %v2_82a8, i1* %cpsr_n.global-to-local, align 1
  %v3_82a8 = icmp eq i32 %v1_82a8, 0
  store i1 %v3_82a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_82a8, label %bb200, label %dec_label_pc_82c4

.thread13:                                        ; preds = %dec_label_pc_81cc
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_82b8

bb200:                                            ; preds = %bb
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_82b8

dec_label_pc_82b8:                                ; preds = %bb200, %dec_label_pc_82e4, %.thread13, %dec_label_pc_82d4, %dec_label_pc_82c4
  %v29_82c0 = phi i32 [ %v2_82e8, %dec_label_pc_82e4 ], [ %v3_82a0, %.thread13 ], [ %v3_82a0, %bb200 ], [ %v2_82d8, %dec_label_pc_82d4 ], [ %v2_82c8, %dec_label_pc_82c4 ]
  %v2_82c0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_82c0, i32* %r4.global-to-local, align 4
  store i32 %v6_81cc, i32* %r5.global-to-local, align 4
  store i32 %v9_81cc, i32* %r6.global-to-local, align 4
  store i32 %v15_81cc, i32* %r8.global-to-local, align 4
  ret i32 %v29_82c0

dec_label_pc_82c4:                                ; preds = %bb
  store i32 0, i32* @r4, align 4
  store i32 %v0_82a4, i32* %r0.global-to-local, align 4
  %v1_82c8 = inttoptr i32 %v0_82a4 to i8*
  %v2_82c8 = call i32 @function_12ad0(i8* %v1_82c8)
  store i32 %v2_82c8, i32* %r0.global-to-local, align 4
  %v1_82cc = add i32 %v2_82c8, -255
  %v2_82cc = icmp ugt i32 %v2_82c8, 254
  store i1 %v2_82cc, i1* %cpsr_c.global-to-local, align 1
  %v3_82cc = sub i32 254, %v2_82c8
  %v4_82cc = and i32 %v3_82cc, %v2_82c8
  %v5_82cc = icmp slt i32 %v4_82cc, 0
  store i1 %v5_82cc, i1* %cpsr_v.global-to-local, align 1
  %v6_82cc = icmp slt i32 %v1_82cc, 0
  store i1 %v6_82cc, i1* %cpsr_n.global-to-local, align 1
  %v7_82cc = icmp eq i32 %v2_82c8, 255
  store i1 %v7_82cc, i1* %cpsr_z.global-to-local, align 1
  %v8_82d0 = icmp sgt i32 %v2_82c8, 255
  br i1 %v8_82d0, label %dec_label_pc_82b8, label %dec_label_pc_82d4

dec_label_pc_82d4:                                ; preds = %dec_label_pc_82c4
  %v0_82d4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_82d4, i32* %r0.global-to-local, align 4
  %v1_82d8 = inttoptr i32 %v0_82d4 to i8*
  %v2_82d8 = call i32 @function_12ad0(i8* %v1_82d8)
  store i32 %v2_82d8, i32* %r0.global-to-local, align 4
  %v1_82dc = add i32 %v2_82d8, -127
  %v2_82dc = icmp ugt i32 %v2_82d8, 126
  store i1 %v2_82dc, i1* %cpsr_c.global-to-local, align 1
  %v3_82dc = sub i32 126, %v2_82d8
  %v4_82dc = and i32 %v3_82dc, %v2_82d8
  %v5_82dc = icmp slt i32 %v4_82dc, 0
  store i1 %v5_82dc, i1* %cpsr_v.global-to-local, align 1
  %v6_82dc = icmp slt i32 %v1_82dc, 0
  store i1 %v6_82dc, i1* %cpsr_n.global-to-local, align 1
  %v7_82dc = icmp eq i32 %v2_82d8, 127
  store i1 %v7_82dc, i1* %cpsr_z.global-to-local, align 1
  %v8_82e0 = icmp sgt i32 %v2_82d8, 127
  br i1 %v8_82e0, label %dec_label_pc_82b8, label %dec_label_pc_82e4

dec_label_pc_82e4:                                ; preds = %dec_label_pc_82d4
  %v0_82e4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_82e4, i32* %r0.global-to-local, align 4
  %v1_82e8 = inttoptr i32 %v0_82e4 to i8*
  %v2_82e8 = call i32 @function_12ad0(i8* %v1_82e8)
  store i32 %v2_82e8, i32* %r0.global-to-local, align 4
  %v1_82ec = add i32 %v2_82e8, -9
  %v2_82ec = icmp ugt i32 %v2_82e8, 8
  store i1 %v2_82ec, i1* %cpsr_c.global-to-local, align 1
  %v3_82ec = sub i32 8, %v2_82e8
  %v4_82ec = and i32 %v3_82ec, %v2_82e8
  %v5_82ec = icmp slt i32 %v4_82ec, 0
  store i1 %v5_82ec, i1* %cpsr_v.global-to-local, align 1
  %v6_82ec = icmp slt i32 %v1_82ec, 0
  store i1 %v6_82ec, i1* %cpsr_n.global-to-local, align 1
  %v7_82ec = icmp eq i32 %v2_82e8, 9
  store i1 %v7_82ec, i1* %cpsr_z.global-to-local, align 1
  %v7_82f0 = icmp sgt i32 %v2_82e8, 9
  br i1 %v7_82f0, label %dec_label_pc_82b8, label %bb201

bb201:                                            ; preds = %dec_label_pc_82e4
  %v10_82f0 = ptrtoint i32* %stack_var_-404 to i32
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v8_82f4 = load i32, i32* @r4, align 4
  %v10_82f4 = add i32 %v10_82f0, 364
  %v11_82f4 = inttoptr i32 %v10_82f4 to i32*
  store i32 %v8_82f4, i32* %v11_82f4, align 4
  br label %dec_label_pc_82fc

dec_label_pc_82fc:                                ; preds = %bb201, %bb205
  %v0_82fc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_82fc, i32* %r0.global-to-local, align 4
  %v1_8300 = inttoptr i32 %v0_82fc to i8*
  %v2_8300 = call i32 @function_12ad0(i8* %v1_8300)
  store i32 %v2_8300, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_8308 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8308, i32* %ip.global-to-local, align 4
  %v2_830c = sub i32 %v2_8300, %v3_8308
  %v3_830c = icmp uge i32 %v2_8300, %v3_8308
  store i1 %v3_830c, i1* %cpsr_c.global-to-local, align 1
  %v4_830c = xor i32 %v3_8308, %v2_8300
  %v5_830c = xor i32 %v2_830c, %v2_8300
  %v6_830c = and i32 %v5_830c, %v4_830c
  %v7_830c = icmp slt i32 %v6_830c, 0
  store i1 %v7_830c, i1* %cpsr_v.global-to-local, align 1
  %v8_830c = icmp slt i32 %v2_830c, 0
  store i1 %v8_830c, i1* %cpsr_n.global-to-local, align 1
  %v9_830c = icmp eq i32 %v2_8300, %v3_8308
  store i1 %v9_830c, i1* %cpsr_z.global-to-local, align 1
  %v7_8310 = icmp sgt i32 %v2_8300, %v3_8308
  br i1 %v7_8310, label %dec_label_pc_8314, label %dec_label_pc_8340

dec_label_pc_8314:                                ; preds = %dec_label_pc_82fc
  %v0_8314 = load i32, i32* %fp.global-to-local, align 4
  %v2_8314 = add i32 %v0_8314, %v3_8308
  %v3_8314 = inttoptr i32 %v2_8314 to i8*
  %v4_8314 = load i8, i8* %v3_8314, align 1
  %v6_8314 = zext i8 %v4_8314 to i32
  %v1_8318 = add nsw i32 %v6_8314, -32
  store i32 %v1_8318, i32* %r2.global-to-local, align 4
  %v1_831c = add nsw i32 %v6_8314, -97
  store i32 %v1_831c, i32* %r3.global-to-local, align 4
  %v2_8320 = icmp ugt i32 %v1_831c, 24
  store i1 %v2_8320, i1* %cpsr_c.global-to-local, align 1
  %v3_8320 = sub nsw i32 121, %v6_8314
  %v4_8320 = and i32 %v3_8320, %v1_831c
  %v5_8320 = icmp slt i32 %v4_8320, 0
  store i1 %v5_8320, i1* %cpsr_v.global-to-local, align 1
  %v6_8320 = icmp ult i8 %v4_8314, 122
  store i1 %v6_8320, i1* %cpsr_n.global-to-local, align 1
  %v7_8320 = icmp eq i32 %v1_831c, 25
  store i1 %v7_8320, i1* %cpsr_z.global-to-local, align 1
  %v2_8324 = xor i1 %v2_8320, true
  %v3_8324 = or i1 %v7_8320, %v2_8324
  br i1 %v3_8324, label %bb202, label %bb203

bb202:                                            ; preds = %dec_label_pc_8314
  %v5_8324 = trunc i32 %v1_8318 to i8
  store i8 %v5_8324, i8* %v3_8314, align 1
  %v0_8328.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_8328.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb203

bb203:                                            ; preds = %dec_label_pc_8314, %bb202
  %v1_832c = phi i1 [ %v2_8320, %dec_label_pc_8314 ], [ %v1_8328.pre, %bb202 ]
  %v0_832c = phi i1 [ false, %dec_label_pc_8314 ], [ %v0_8328.pre, %bb202 ]
  %v2_8328 = xor i1 %v1_832c, true
  %v3_8328 = or i1 %v0_832c, %v2_8328
  br i1 %v3_8328, label %bb204, label %._crit_edge

._crit_edge:                                      ; preds = %bb203
  %v0_8334.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb205

bb204:                                            ; preds = %bb203
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v7_832c = load i32, i32* %v11_82f4, align 4
  store i32 %v7_832c, i32* %ip.global-to-local, align 4
  br label %bb205

bb205:                                            ; preds = %._crit_edge, %bb204
  %v0_8334 = phi i32 [ %v0_8334.pre, %._crit_edge ], [ %v7_832c, %bb204 ]
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v1_8334 = add i32 %v0_8334, 1
  store i32 %v1_8334, i32* %ip.global-to-local, align 4
  store i32 %v1_8334, i32* %stack_var_-40, align 4
  br label %dec_label_pc_82fc

dec_label_pc_8340:                                ; preds = %dec_label_pc_82fc
  store i32 36, i32* %r0.global-to-local, align 4
  %v1_8344 = call i32 @function_121a4(i32 36)
  store i32 37, i32* %r0.global-to-local, align 4
  %v1_834c = call i32 @function_121a4(i32 37)
  store i32 38, i32* %r0.global-to-local, align 4
  %v1_8354 = call i32 @function_121a4(i32 38)
  store i32 39, i32* %r0.global-to-local, align 4
  %v1_835c = call i32 @function_121a4(i32 39)
  store i32 40, i32* %r0.global-to-local, align 4
  %v1_8364 = call i32 @function_121a4(i32 40)
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_836c = call i32 @function_121a4(i32 41)
  store i32 42, i32* %r0.global-to-local, align 4
  %v1_8374 = call i32 @function_121a4(i32 42)
  store i32 43, i32* %r0.global-to-local, align 4
  %v1_837c = call i32 @function_121a4(i32 43)
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_8384 = call i32 @function_121a4(i32 44)
  store i32 45, i32* %r0.global-to-local, align 4
  %v1_838c = call i32 @function_121a4(i32 45)
  store i32 %v1_838c, i32* %r0.global-to-local, align 4
  %v0_8390 = load i32, i32* @r6, align 4
  %v2_8390 = add i32 %v0_8390, -256
  %v3_8390 = icmp ugt i32 %v0_8390, 255
  store i1 %v3_8390, i1* %cpsr_c.global-to-local, align 1
  %v4_8390 = sub i32 255, %v0_8390
  %v5_8390 = and i32 %v4_8390, %v0_8390
  %v6_8390 = icmp slt i32 %v5_8390, 0
  store i1 %v6_8390, i1* %cpsr_v.global-to-local, align 1
  %v7_8390 = icmp slt i32 %v2_8390, 0
  store i1 %v7_8390, i1* %cpsr_n.global-to-local, align 1
  %v8_8390 = icmp eq i32 %v0_8390, 256
  store i1 %v8_8390, i1* %cpsr_z.global-to-local, align 1
  %v5_8394 = icmp slt i32 %v0_8390, 256
  br i1 %v5_8394, label %thread-pre-split, label %bb206

bb206:                                            ; preds = %dec_label_pc_8340
  store i32 256, i32* @r6, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_8340, %bb206
  %v0_839c = phi i32 [ 256, %bb206 ], [ %v0_8390, %dec_label_pc_8340 ]
  store i32 46, i32* %r0.global-to-local, align 4
  %v1_83a0 = call i32 @function_121a4(i32 46)
  store i32 %v0_839c, i32* %r0.global-to-local, align 4
  store i32 3140, i32* %r1.global-to-local, align 4
  %v2_83b0 = call i32 @function_14094(i32 %v0_839c, i32 3140)
  store i32 %v2_83b0, i32* %r0.global-to-local, align 4
  store i32 %v0_839c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_83b8 = icmp slt i32 %v0_839c, 0
  store i1 %v1_83b8, i1* %cpsr_n.global-to-local, align 1
  %v2_83b8 = icmp eq i32 %v0_839c, 0
  store i1 %v2_83b8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_83b0, i32* @r5, align 4
  %tmp207 = icmp slt i32 %v0_839c, 1
  br i1 %tmp207, label %dec_label_pc_84f4, label %dec_label_pc_83c8

dec_label_pc_83c8:                                ; preds = %thread-pre-split
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_83cc

dec_label_pc_83cc:                                ; preds = %dec_label_pc_9e70, %dec_label_pc_83c8
  %v1_83d8 = phi i32 [ %v1_9e8c, %dec_label_pc_9e70 ], [ %v2_83b0, %dec_label_pc_83c8 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 %v1_81e4, i32* %r1.global-to-local, align 4
  %v2_83d8 = inttoptr i32 %v1_83d8 to i32*
  store i32 -1, i32* %v2_83d8, align 4
  %v3_83dc = load i32, i32* @r5, align 4
  %v4_83dc = add i32 %v3_83dc, 4
  %v5_83dc = inttoptr i32 %v4_83dc to i8*
  store i8 0, i8* %v5_83dc, align 1
  %v0_83e0 = load i32, i32* @r7, align 4
  store i32 %v0_83e0, i32* %r0.global-to-local, align 4
  %v5_83e4 = call i32 @function_132b8(i32 %v0_83e0, i32 %v1_81e4, i32 -1, i32 0)
  store i32 %v5_83e4, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v2_83f0 = and i32 %v5_83e4, 536870912
  %v3_83f0 = icmp ne i32 %v2_83f0, 0
  store i1 %v3_83f0, i1* %cpsr_c.global-to-local, align 1
  %v5_83f0 = mul i32 %v5_83e4, 24
  store i32 %v5_83f0, i32* %r3.global-to-local, align 4
  %v2_83f4 = add i32 %v5_83f0, %arg2
  store i32 %v2_83f4, i32* @r6, align 4
  %v1_83f8 = add i32 %v2_83f4, 16
  %v2_83f8 = inttoptr i32 %v1_83f8 to i32*
  %v3_83f8 = load i32, i32* %v2_83f8, align 4
  store i32 %v3_83f8, i32* %r2.global-to-local, align 4
  %v0_83fc = load i32, i32* @r5, align 4
  %v1_83fc = add i32 %v0_83fc, 532
  store i32 %v1_83fc, i32* @lr, align 4
  store i32 %v1_83fc, i32* @r0, align 4
  %v0_8404 = load i32, i32* @sl, align 4
  store i32 %v0_8404, i32* %r1.global-to-local, align 4
  %v2_8408 = add i32 %v0_83fc, 16
  %v3_8408 = inttoptr i32 %v2_8408 to i32*
  store i32 %v3_83f8, i32* %v3_8408, align 4
  %v0_840c = load i32, i32* @lr, align 4
  %v2_8410 = inttoptr i32 %v1_83fc to i8*
  %v3_8410 = call i32 @function_12af8(i8* %v2_8410, i32 %v0_8404)
  store i32 %v3_8410, i32* %r0.global-to-local, align 4
  %v0_8414 = load i32, i32* @r5, align 4
  %v1_8414 = add i32 %v0_8414, 532
  %v2_8414 = inttoptr i32 %v1_8414 to i8*
  %v3_8414 = load i8, i8* %v2_8414, align 1
  %v4_8414 = zext i8 %v3_8414 to i32
  store i32 %v4_8414, i32* %r3.global-to-local, align 4
  %v2_8418 = icmp ugt i8 %v3_8414, 46
  store i1 %v2_8418, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8418 = icmp ult i8 %v3_8414, 47
  store i1 %v6_8418, i1* %cpsr_n.global-to-local, align 1
  %v7_8418 = icmp eq i8 %v3_8414, 47
  store i1 %v7_8418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8418, label %dec_label_pc_8444, label %dec_label_pc_8420

dec_label_pc_8420:                                ; preds = %dec_label_pc_83cc
  store i32 %v0_840c, i32* %r0.global-to-local, align 4
  %v1_8424 = inttoptr i32 %v0_840c to i8*
  %v2_8424 = call i32 @function_12ad0(i8* %v1_8424)
  store i32 %v2_8424, i32* @r2, align 4
  %v0_842c = load i32, i32* @r5, align 4
  %v1_8430 = add i32 %v0_842c, 533
  store i32 %v1_8430, i32* @r0, align 4
  store i32 %v0_840c, i32* @r1, align 4
  %v3_8438 = call i32 @function_13ac0(i32 %v1_8430, i32 %v0_840c, i32 %v2_8424)
  store i32 %v3_8438, i32* %r0.global-to-local, align 4
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_8440 = load i32, i32* @r5, align 4
  %v3_8440 = add i32 %v2_8440, 532
  %v4_8440 = inttoptr i32 %v3_8440 to i8*
  store i8 47, i8* %v4_8440, align 1
  %v0_8448.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_8444

dec_label_pc_8444:                                ; preds = %dec_label_pc_83cc, %dec_label_pc_8420
  %v0_8448 = phi i32 [ %v0_8414, %dec_label_pc_83cc ], [ %v0_8448.pre, %dec_label_pc_8420 ]
  %v0_8444 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8444, i32* %r1.global-to-local, align 4
  %v1_8448 = add i32 %v0_8448, 1440
  store i32 %v1_8448, i32* @r0, align 4
  %v2_844c = inttoptr i32 %v1_8448 to i8*
  %v3_844c = call i32 @function_12af8(i8* %v2_844c, i32 %v0_8444)
  %v0_8450 = load i32, i32* @r5, align 4
  %v0_8454 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8454, i32* %r1.global-to-local, align 4
  %v1_8458 = add i32 %v0_8450, 1431
  store i32 %v1_8458, i32* @r0, align 4
  %v2_845c = inttoptr i32 %v1_8458 to i8*
  %v3_845c = call i32 @function_12af8(i8* %v2_845c, i32 %v0_8454)
  %v0_8460 = load i32, i32* @r5, align 4
  %v1_8464 = add i32 %v0_8460, 789
  store i32 %v1_8464, i32* @r0, align 4
  %v0_8468 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_8468, i32* %r1.global-to-local, align 4
  %v2_846c = inttoptr i32 %v1_8464 to i8*
  %v3_846c = call i32 @function_12af8(i8* %v2_846c, i32 %v0_8468)
  store i32 %v3_846c, i32* %r0.global-to-local, align 4
  %v0_8470 = load i32, i32* @r6, align 4
  %v1_8470 = add i32 %v0_8470, 20
  %v2_8470 = inttoptr i32 %v1_8470 to i8*
  %v3_8470 = load i8, i8* %v2_8470, align 1
  %v4_8470 = zext i8 %v3_8470 to i32
  store i32 %v4_8470, i32* %r3.global-to-local, align 4
  %v2_8474 = icmp ugt i8 %v3_8470, 30
  store i1 %v2_8474, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8474 = icmp ult i8 %v3_8470, 31
  store i1 %v6_8474, i1* %cpsr_n.global-to-local, align 1
  %v7_8474 = icmp eq i8 %v3_8470, 31
  store i1 %v7_8474, i1* %cpsr_z.global-to-local, align 1
  %v2_8478 = xor i1 %v7_8474, true
  %v3_8478 = and i1 %v2_8474, %v2_8478
  br i1 %v3_8478, label %dec_label_pc_84c8, label %dec_label_pc_847c

dec_label_pc_847c:                                ; preds = %dec_label_pc_8444
  %v1_847c = add i32 %v0_8470, 16
  %v2_847c = inttoptr i32 %v1_847c to i32*
  %v3_847c = load i32, i32* %v2_847c, align 4
  store i32 %v3_847c, i32* @r4, align 4
  %v0_8480 = call i32 @function_fbfc()
  store i32 %v0_8480, i32* %r0.global-to-local, align 4
  %v0_8484 = load i32, i32* @r4, align 4
  %v1_8488 = and i32 %v0_8484, 65280
  store i32 %v1_8488, i32* %r3.global-to-local, align 4
  %v1_8484 = udiv i32 %v0_8484, 256
  %v3_848c = and i32 %v1_8484, 65280
  store i32 %v3_848c, i32* %r2.global-to-local, align 4
  %v3_8490 = mul i32 %v0_8484, 16777216
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_8494 = mul nuw nsw i32 %v1_8488, 256
  %v5_8494 = or i32 %v4_8494, %v3_8490
  store i32 %v5_8494, i32* %r1.global-to-local, align 4
  %v0_8498 = load i32, i32* @r6, align 4
  %v1_8498 = add i32 %v0_8498, 20
  %v2_8498 = inttoptr i32 %v1_8498 to i8*
  %v3_8498 = load i8, i8* %v2_8498, align 1
  %v4_8498 = zext i8 %v3_8498 to i32
  store i32 %v4_8498, i32* %ip.global-to-local, align 4
  %v2_84a0 = call i32 @llvm.bswap.i32(i32 %v0_8484)
  %v7_84a4 = lshr i32 %v0_8480, %v4_8498
  %v8_84a4 = add i32 %v7_84a4, %v2_84a0
  store i32 %v8_84a4, i32* %r2.global-to-local, align 4
  %v3_84b0 = mul i32 %v8_84a4, 16777216
  %v1_84b4 = and i32 %v8_84a4, 65280
  store i32 %v1_84b4, i32* %r0.global-to-local, align 4
  %v4_84b8 = mul nuw nsw i32 %v1_84b4, 256
  %v5_84b8 = or i32 %v4_84b8, %v3_84b0
  store i32 %v5_84b8, i32* %r1.global-to-local, align 4
  %v2_84bc = and i32 %v8_84a4, 8388608
  %v3_84bc = icmp ne i32 %v2_84bc, 0
  store i1 %v3_84bc, i1* %cpsr_c.global-to-local, align 1
  %v2_84c0 = call i32 @llvm.bswap.i32(i32 %v8_84a4)
  store i32 %v2_84c0, i32* %r3.global-to-local, align 4
  %v1_84c4 = load i32, i32* @r5, align 4
  %v2_84c4 = add i32 %v1_84c4, 16
  %v3_84c4 = inttoptr i32 %v2_84c4 to i32*
  store i32 %v2_84c0, i32* %v3_84c4, align 4
  br label %dec_label_pc_84c8

dec_label_pc_84c8:                                ; preds = %dec_label_pc_8444, %dec_label_pc_847c
  %v0_84c8 = call i32 @function_fbfc()
  store i32 %v0_84c8, i32* %r0.global-to-local, align 4
  store i32 5, i32* %r1.global-to-local, align 4
  %v2_84d0 = call i32 @function_131ec(i32 %v0_84c8, i32 5)
  store i32 %v2_84d0, i32* %r0.global-to-local, align 4
  %v1_84d4 = add i32 %v2_84d0, -4
  %v3_84d4 = sub i32 3, %v2_84d0
  %v4_84d4 = and i32 %v3_84d4, %v2_84d0
  %v5_84d4 = icmp slt i32 %v4_84d4, 0
  store i1 %v5_84d4, i1* %cpsr_v.global-to-local, align 1
  %v6_84d4 = icmp slt i32 %v1_84d4, 0
  store i1 %v6_84d4, i1* %cpsr_n.global-to-local, align 1
  %v7_84d4 = icmp eq i32 %v2_84d0, 4
  store i1 %v7_84d4, i1* %cpsr_z.global-to-local, align 1
  %v5_84d8 = and i32 %v2_84d0, 1073741824
  %v6_84d8 = icmp ne i32 %v5_84d8, 0
  store i1 %v6_84d8, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v2_84d0, label %dec_label_pc_9e70 [
    i32 0, label %dec_label_pc_9ed4
    i32 1, label %dec_label_pc_9f00
    i32 2, label %dec_label_pc_9f2c
    i32 3, label %dec_label_pc_9f58
    i32 4, label %dec_label_pc_9e48
  ]

dec_label_pc_84f4:                                ; preds = %thread-pre-split
  %v1_84f8 = add i32 %v2_83b0, 1456
  %v0_8500 = load i32, i32* %r8.global-to-local, align 4
  %v1_8500 = urem i32 %v0_8500, 256
  store i32 %v1_8500, i32* %r3.global-to-local, align 4
  %v1_8504 = add i32 %v2_83b0, 1464
  store i32 %v1_8504, i32* %r1.global-to-local, align 4
  %v2_8508 = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_8508, i32* %r2.global-to-local, align 4
  store i32 %v1_84f8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_8528.preheader

dec_label_pc_8528.preheader:                      ; preds = %dec_label_pc_84f4, %dec_label_pc_9e94
  %storemerge148.in.in = phi i32 [ %v0_9ea8, %dec_label_pc_9e94 ], [ %v0_8500, %dec_label_pc_84f4 ]
  %stack_var_-20868.0.ph = phi i32 [ %v1_9ea0, %dec_label_pc_9e94 ], [ %v1_84f8, %dec_label_pc_84f4 ]
  %stack_var_-20860.0.ph = phi i32 [ %v1_9ea8, %dec_label_pc_9e94 ], [ %v1_8500, %dec_label_pc_84f4 ]
  %stack_var_-20872.0.ph = phi i32 [ %v1_9eac, %dec_label_pc_9e94 ], [ %v1_8504, %dec_label_pc_84f4 ]
  %stack_var_-20856.0.ph = phi i32 [ %v2_9eb0, %dec_label_pc_9e94 ], [ %v2_8508, %dec_label_pc_84f4 ]
  %storemerge148.in = and i32 %storemerge148.in.in, 128
  %storemerge148 = icmp ne i32 %storemerge148.in, 0
  store i1 %storemerge148, i1* %cpsr_c.global-to-local, align 1
  %v3_9eb8 = udiv i32 %storemerge148.in.in, 256
  store i32 %v3_9eb8, i32* %r8.global-to-local, align 4
  %v4_8590 = mul nuw nsw i32 %stack_var_-20860.0.ph, 256
  %v2_86d0 = ptrtoint i32* %stack_var_-148 to i32
  %v2_86e8 = ptrtoint i32* %stack_var_-40 to i32
  %v2_8728 = ptrtoint i32* %stack_var_-72 to i32
  %v3_8734 = bitcast i32* %stack_var_-72 to %sockaddr*
  %v2_8748 = ptrtoint i32* %stack_var_-36 to i32
  %v1_8940 = inttoptr i32 %stack_var_-20856.0.ph to i8*
  %v1_8c94 = icmp slt i32 %v6_8200, 0
  %v2_8c94 = icmp eq i32 %v6_8200, 0
  %v4_8ce8 = inttoptr i32 %stack_var_-20856.0.ph to i32*
  %v1_8b90 = inttoptr i32 %v6_8200 to i8*
  %v2_87b4 = ptrtoint i32* %stack_var_-56 to i32
  %v2_87b8 = ptrtoint i32* %stack_var_-200 to i32
  %v2_87bc = ptrtoint i32* %stack_var_-328 to i32
  %v2_921c = add i32 %v2_8748, -20773
  %v2_88a8 = ptrtoint i32* %stack_var_-44 to i32
  %v2_88b4 = ptrtoint i32* %stack_var_-48 to i32
  %v5_8590 = or i32 %v4_8590, %v3_9eb8
  %v1_8594 = and i32 %v3_9eb8, 128
  %v2_8594 = icmp ne i32 %v1_8594, 0
  %v3_8594248 = udiv i32 %v5_8590, 256
  %v1_859c = add i32 %stack_var_-20872.0.ph, -1464
  %v1_85a4 = add i32 %stack_var_-20872.0.ph, -33
  %sext = mul i32 %v3_8594248, 16777216
  %v4_8710 = sdiv i32 %sext, 16777216
  %sext10 = mul i32 %v3_9eb8, 16777216
  %v4_8718 = sdiv i32 %sext10, 16777216
  %v2_85dc = add i32 %v2_86d0, 112
  br label %dec_label_pc_8528

dec_label_pc_8528:                                ; preds = %dec_label_pc_8794, %dec_label_pc_878c, %dec_label_pc_8574, %dec_label_pc_8838, %dec_label_pc_8528.preheader
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_852c = call i32 @function_13760(i32* null)
  store i32 %v2_852c, i32* %r0.global-to-local, align 4
  store i32 %v2_852c, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 20684, i32* %ip.global-to-local, align 4
  %v2_854c256 = load i32, i32* @sp, align 4
  %v3_854c257 = add i32 %v2_854c256, 20684
  %v4_854c258 = inttoptr i32 %v3_854c257 to i32*
  store i32 0, i32* %v4_854c258, align 4
  br label %dec_label_pc_853c.dec_label_pc_853c_crit_edge

dec_label_pc_853c.dec_label_pc_853c_crit_edge:    ; preds = %dec_label_pc_8528, %dec_label_pc_853c.dec_label_pc_853c_crit_edge
  %v0_853c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_854c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_8540 = add i32 %v0_853c.pre, 4
  store i32 %v1_8540, i32* %r3.global-to-local, align 4
  %v1_8544 = add i32 %v0_853c.pre, 20684
  store i32 %v1_8544, i32* %ip.global-to-local, align 4
  %v7_8548 = icmp eq i32 %v1_8540, 128
  %v2_854c = load i32, i32* @sp, align 4
  %v3_854c = add i32 %v2_854c, %v1_8544
  %v4_854c = inttoptr i32 %v3_854c to i32*
  store i32 %v0_854c.pre, i32* %v4_854c, align 4
  br i1 %v7_8548, label %dec_label_pc_8554, label %dec_label_pc_853c.dec_label_pc_853c_crit_edge

dec_label_pc_8554:                                ; preds = %dec_label_pc_853c.dec_label_pc_853c_crit_edge
  %v1_8548 = add i32 %v0_853c.pre, -124
  %v6_8548 = icmp slt i32 %v1_8548, 0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_8548, i1* %cpsr_n.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_8554 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_8554, i32* %r0.global-to-local, align 4
  %v1_8560259 = add i32 %v0_8554, 4
  store i32 %v1_8560259, i32* %r3.global-to-local, align 4
  %v1_8564260 = add i32 %v0_8554, 20556
  store i32 %v1_8564260, i32* %lr.global-to-local, align 4
  %v7_8568261 = icmp eq i32 %v1_8560259, 128
  %v2_856c262 = load i32, i32* @sp, align 4
  %v3_856c263 = add i32 %v2_856c262, %v1_8564260
  %v4_856c264 = inttoptr i32 %v3_856c263 to i32*
  store i32 %v0_8554, i32* %v4_856c264, align 4
  br i1 %v7_8568261, label %dec_label_pc_8574, label %dec_label_pc_855c.dec_label_pc_855c_crit_edge

dec_label_pc_855c.dec_label_pc_855c_crit_edge:    ; preds = %dec_label_pc_8554, %dec_label_pc_855c.dec_label_pc_855c_crit_edge
  %v0_855c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_856c.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_8560 = add i32 %v0_855c.pre, 4
  store i32 %v1_8560, i32* %r3.global-to-local, align 4
  %v1_8564 = add i32 %v0_855c.pre, 20556
  store i32 %v1_8564, i32* %lr.global-to-local, align 4
  %v7_8568 = icmp eq i32 %v1_8560, 128
  %v2_856c = load i32, i32* @sp, align 4
  %v3_856c = add i32 %v2_856c, %v1_8564
  %v4_856c = inttoptr i32 %v3_856c to i32*
  store i32 %v0_856c.pre, i32* %v4_856c, align 4
  br i1 %v7_8568, label %dec_label_pc_8574, label %dec_label_pc_855c.dec_label_pc_855c_crit_edge

dec_label_pc_8574:                                ; preds = %dec_label_pc_855c.dec_label_pc_855c_crit_edge, %dec_label_pc_8554
  store i32 %v0_839c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_83b8, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_83b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %tmp207, label %dec_label_pc_8528, label %dec_label_pc_8580

dec_label_pc_8580:                                ; preds = %dec_label_pc_8574
  store i32 %stack_var_-20872.0.ph, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  store i32 %v5_8590, i32* %r2.global-to-local, align 4
  store i1 %v2_8594, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_8594248, i32* %lr.global-to-local, align 4
  %v0_8598 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8598, i32* @sl, align 4
  store i32 %v1_859c, i32* @r7, align 4
  store i32 %v0_8598, i32* @r8, align 4
  store i32 %v1_85a4, i32* @r6, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_8650

dec_label_pc_85b8:                                ; preds = %dec_label_pc_865c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v7_85b8 = icmp eq i8 %v3_8650, 2
  store i1 %v7_85b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85b8, label %dec_label_pc_8d68, label %dec_label_pc_85c0

dec_label_pc_85c0:                                ; preds = %dec_label_pc_85b8
  %v2_85c0 = icmp ugt i8 %v3_8650, 3
  store i1 %v2_85c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85c0 = icmp ult i8 %v3_8650, 4
  store i1 %v6_85c0, i1* %cpsr_n.global-to-local, align 1
  %v7_85c0 = icmp eq i8 %v3_8650, 4
  store i1 %v7_85c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85c0, label %dec_label_pc_890c, label %dec_label_pc_85c8

dec_label_pc_85c8:                                ; preds = %dec_label_pc_85c0
  %v2_85c8 = icmp ugt i8 %v3_8650, 5
  store i1 %v2_85c8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85c8 = icmp ult i8 %v3_8650, 6
  store i1 %v6_85c8, i1* %cpsr_n.global-to-local, align 1
  %v7_85c8 = icmp eq i8 %v3_8650, 6
  store i1 %v7_85c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85c8, label %.thread24, label %dec_label_pc_85e8

.thread24:                                        ; preds = %dec_label_pc_85c8
  %v2_85cc = add i32 %v3_8900, -1431
  %v3_85cc = inttoptr i32 %v2_85cc to i32*
  %v4_85cc = load i32, i32* %v3_85cc, align 4
  store i32 %v4_85cc, i32* %r0.global-to-local, align 4
  %v4_85d4 = udiv i32 %v4_85cc, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_85d8 = mul nuw nsw i32 %v4_85d4, 4
  store i32 %v2_85dc, i32* %r1.global-to-local, align 4
  %v3_85e0 = add i32 %v4_85d8, %v2_85dc
  store i32 %v3_85e0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_85e8:                                ; preds = %dec_label_pc_85c8
  %v2_85e8 = icmp ugt i8 %v3_8650, 6
  store i1 %v2_85e8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85e8 = icmp ult i8 %v3_8650, 7
  store i1 %v6_85e8, i1* %cpsr_n.global-to-local, align 1
  %v7_85e8 = icmp eq i8 %v3_8650, 7
  store i1 %v7_85e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85e8, label %.thread35, label %dec_label_pc_8608

.thread35:                                        ; preds = %dec_label_pc_85e8
  %v2_85ec = add i32 %v3_8900, -1431
  %v3_85ec = inttoptr i32 %v2_85ec to i32*
  %v4_85ec = load i32, i32* %v3_85ec, align 4
  store i32 %v4_85ec, i32* %r0.global-to-local, align 4
  %v4_85f4 = udiv i32 %v4_85ec, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_85f8 = mul nuw nsw i32 %v4_85f4, 4
  store i32 %v2_85dc, i32* %r2.global-to-local, align 4
  %v3_8600 = add i32 %v4_85f8, %v2_85dc
  store i32 %v3_8600, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_8608:                                ; preds = %dec_label_pc_85e8
  %v2_8608 = icmp ugt i8 %v3_8650, 9
  store i1 %v2_8608, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8608 = icmp ult i8 %v3_8650, 10
  store i1 %v6_8608, i1* %cpsr_n.global-to-local, align 1
  %v7_8608 = icmp eq i8 %v3_8650, 10
  store i1 %v7_8608, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8608, label %dec_label_pc_8d30, label %dec_label_pc_8610

dec_label_pc_8610:                                ; preds = %dec_label_pc_8608
  %v1_8610 = add nsw i32 %v4_8650, -11
  %v2_8610 = icmp ugt i8 %v3_8650, 10
  store i1 %v2_8610, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8610 = icmp ult i8 %v3_8650, 11
  store i1 %v6_8610, i1* %cpsr_n.global-to-local, align 1
  %v7_8610 = icmp eq i8 %v3_8650, 11
  store i1 %v7_8610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8610, label %dec_label_pc_98a4, label %dec_label_pc_8618

dec_label_pc_8618:                                ; preds = %dec_label_pc_8d68, %dec_label_pc_8610
  store i32 0, i32* %r3.global-to-local, align 4
  store i8 0, i8* %v2_8650, align 1
  %v0_8620 = load i32, i32* @r6, align 4
  %v1_8620 = add i32 %v0_8620, -1431
  %v2_8620 = inttoptr i32 %v1_8620 to i32*
  %v3_8620 = load i32, i32* %v2_8620, align 4
  store i32 %v3_8620, i32* %r0.global-to-local, align 4
  %v1_8624 = call i32 @function_13490(i32 %v3_8620)
  store i32 %v1_8624, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_862c = load i32, i32* @r6, align 4
  %v2_862c = add i32 %v1_862c, -1431
  %v3_862c = inttoptr i32 %v2_862c to i32*
  store i32 -1, i32* %v3_862c, align 4
  br label %dec_label_pc_8630

dec_label_pc_8630:                                ; preds = %dec_label_pc_8ccc, %dec_label_pc_8d48, %dec_label_pc_8750, %dec_label_pc_8664, %dec_label_pc_98a4, %dec_label_pc_8618
  store i32 %v0_839c, i32* %lr.global-to-local, align 4
  %v0_8634 = load i32, i32* @r8, align 4
  %v1_8634 = add i32 %v0_8634, 1
  store i32 %v1_8634, i32* @r8, align 4
  %v0_8638 = load i32, i32* @r7, align 4
  %v0_863c = load i32, i32* @r6, align 4
  %v2_8640 = sub i32 %v0_839c, %v1_8634
  %v3_8640 = icmp uge i32 %v0_839c, %v1_8634
  store i1 %v3_8640, i1* %cpsr_c.global-to-local, align 1
  %v4_8640 = xor i32 %v1_8634, %v0_839c
  %v5_8640 = xor i32 %v2_8640, %v0_839c
  %v6_8640 = and i32 %v5_8640, %v4_8640
  %v7_8640 = icmp slt i32 %v6_8640, 0
  store i1 %v7_8640, i1* %cpsr_v.global-to-local, align 1
  %v8_8640 = icmp slt i32 %v2_8640, 0
  store i1 %v8_8640, i1* %cpsr_n.global-to-local, align 1
  %v9_8640 = icmp eq i32 %v0_839c, %v1_8634
  store i1 %v9_8640, i1* %cpsr_z.global-to-local, align 1
  %v1_8644 = add i32 %v0_8638, 3140
  store i32 %v1_8644, i32* @r7, align 4
  %v1_8648 = add i32 %v0_863c, 3140
  store i32 %v1_8648, i32* @r6, align 4
  br i1 %v9_8640, label %dec_label_pc_8630.dec_label_pc_878c_crit_edge, label %dec_label_pc_8650

dec_label_pc_8630.dec_label_pc_878c_crit_edge:    ; preds = %dec_label_pc_8630
  %v0_878c.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_878c

dec_label_pc_8650:                                ; preds = %dec_label_pc_876c, %dec_label_pc_8630, %dec_label_pc_8580
  %v3_8900 = phi i32 [ %v1_85a4, %dec_label_pc_8580 ], [ %v1_8648, %dec_label_pc_8630 ], [ %v1_8784, %dec_label_pc_876c ]
  %v1_8650 = add i32 %v3_8900, -1427
  %v2_8650 = inttoptr i32 %v1_8650 to i8*
  %v3_8650 = load i8, i8* %v2_8650, align 1
  %v4_8650 = zext i8 %v3_8650 to i32
  store i32 %v4_8650, i32* %r3.global-to-local, align 4
  %v2_8654 = icmp ne i8 %v3_8650, 0
  store i1 %v2_8654, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8654 = icmp eq i8 %v3_8650, 0
  store i1 %v6_8654, i1* %cpsr_n.global-to-local, align 1
  %v7_8654 = icmp eq i8 %v3_8650, 1
  store i1 %v7_8654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8654, label %dec_label_pc_88f4, label %dec_label_pc_865c

dec_label_pc_865c:                                ; preds = %dec_label_pc_8650
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 %v6_8654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v6_8654, label %dec_label_pc_8664, label %dec_label_pc_85b8

dec_label_pc_8664:                                ; preds = %.thread43.dec_label_pc_8664_crit_edge, %dec_label_pc_865c
  %v0_8664 = phi i32 [ %v0_8664.pre, %.thread43.dec_label_pc_8664_crit_edge ], [ %v3_8900, %dec_label_pc_865c ]
  %v1_8664 = add i32 %v0_8664, -1431
  %v2_8664 = inttoptr i32 %v1_8664 to i32*
  %v3_8664 = load i32, i32* %v2_8664, align 4
  store i32 %v3_8664, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v1_8670 = add i32 %v3_8664, 1
  %v2_8670 = icmp eq i32 %v3_8664, -1
  store i1 %v2_8670, i1* %cpsr_c.global-to-local, align 1
  %v3_8670 = sub i32 0, %v3_8664
  %v4_8670 = and i32 %v1_8670, %v3_8670
  %v5_8670 = icmp slt i32 %v4_8670, 0
  store i1 %v5_8670, i1* %cpsr_v.global-to-local, align 1
  %v6_8670 = icmp slt i32 %v1_8670, 0
  store i1 %v6_8670, i1* %cpsr_n.global-to-local, align 1
  %v7_8670 = icmp eq i32 %v1_8670, 0
  store i1 %v7_8670, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-72, align 4
  %v1_8684 = xor i1 %v7_8670, true
  call void @__pseudo_cond_branch(i1 %v1_8684, i32 ptrtoint (i32* @global_var_13490.25 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_8690 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_8690, i32* %r2.global-to-local, align 4
  %v3_8694 = call i32 @function_13d90(i32 2, i32 1, i32 %v0_8690)
  store i32 %v3_8694, i32* %r0.global-to-local, align 4
  %v1_8698 = add i32 %v3_8694, 1
  %v2_8698 = icmp eq i32 %v3_8694, -1
  store i1 %v2_8698, i1* %cpsr_c.global-to-local, align 1
  %v3_8698 = sub i32 0, %v3_8694
  %v4_8698 = and i32 %v1_8698, %v3_8698
  %v5_8698 = icmp slt i32 %v4_8698, 0
  store i1 %v5_8698, i1* %cpsr_v.global-to-local, align 1
  %v6_8698 = icmp slt i32 %v1_8698, 0
  store i1 %v6_8698, i1* %cpsr_n.global-to-local, align 1
  %v7_8698 = icmp eq i32 %v1_8698, 0
  store i1 %v7_8698, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8694, i32* @r4, align 4
  %v1_86a0 = load i32, i32* @r6, align 4
  %v2_86a0 = add i32 %v1_86a0, -1431
  %v3_86a0 = inttoptr i32 %v2_86a0 to i32*
  store i32 %v3_8694, i32* %v3_86a0, align 4
  br i1 %v7_8698, label %dec_label_pc_8630, label %dec_label_pc_86a8

dec_label_pc_86a8:                                ; preds = %dec_label_pc_8664
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_86ac = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_86ac, i32* @r2, align 4
  %v0_86b0 = load i32, i32* %r0.global-to-local, align 4
  %v2_86b0 = call i32 @function_133a0(i32 %v0_86b0, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_86b8 = or i32 %v2_86b0, 2048
  store i32 %v1_86b8, i32* @r2, align 4
  %v0_86bc = load i32, i32* @r4, align 4
  store i32 %v0_86bc, i32* %r0.global-to-local, align 4
  %v2_86c0 = call i32 @function_133a0(i32 %v0_86bc, i32 4)
  store i32 %v2_86c0, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 65535, i32* %ip.global-to-local, align 4
  store i32 %v2_86d0, i32* %r3.global-to-local, align 4
  %v0_86d4 = load i32, i32* @r6, align 4
  %v1_86d4 = add i32 %v0_86d4, -1431
  %v2_86d4 = inttoptr i32 %v1_86d4 to i32*
  %v3_86d4 = load i32, i32* %v2_86d4, align 4
  store i32 %v3_86d4, i32* %r0.global-to-local, align 4
  %v0_86d8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_86d8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %stack_var_-40, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 %v2_86e8, i32* %r3.global-to-local, align 4
  %v6_86f0 = call i32 @function_13d60(i32 %v3_86d4, i32 %v0_86d8, i32 8, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_86f0, i32* %r0.global-to-local, align 4
  %v0_86f4 = load i32, i32* @r6, align 4
  %v1_86f4 = add i32 %v0_86f4, -1415
  %v2_86f4 = inttoptr i32 %v1_86f4 to i32*
  %v3_86f4 = load i32, i32* %v2_86f4, align 4
  store i32 %v3_86f4, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_8704 = add i32 %v0_86f4, -1431
  %v2_8704 = inttoptr i32 %v1_8704 to i32*
  %v3_8704 = load i32, i32* %v2_8704, align 4
  store i32 %v3_8704, i32* %r0.global-to-local, align 4
  %v3_870c = add i32 %v0_86f4, -1427
  %v4_870c = inttoptr i32 %v3_870c to i8*
  store i8 2, i8* %v4_870c, align 1
  store i32 %v4_8710, i32* %ip.global-to-local, align 4
  %v0_8714 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_8714, i32* %stack_var_-72, align 4
  store i32 %v4_8718, i32* %r3.global-to-local, align 4
  store i32 %v2_8728, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_8730 = load i32, i32* %sb.global-to-local, align 4
  %v1_8730 = load i32, i32* @r6, align 4
  %v2_8730 = add i32 %v1_8730, -1423
  %v3_8730 = inttoptr i32 %v2_8730 to i32*
  store i32 %v0_8730, i32* %v3_8730, align 4
  %v4_8734 = call i32 @function_13bec(i32 %v3_8704, %sockaddr* nonnull %v3_8734, i32 16)
  store i32 %v4_8734, i32* %r0.global-to-local, align 4
  %v0_8738 = load i32, i32* @r6, align 4
  %v1_8738 = add i32 %v0_8738, -1431
  %v2_8738 = inttoptr i32 %v1_8738 to i32*
  %v3_8738 = load i32, i32* %v2_8738, align 4
  store i32 %v3_8738, i32* %r0.global-to-local, align 4
  %v3_8740 = udiv i32 %v3_8738, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8744 = mul nuw nsw i32 %v3_8740, 4
  store i32 %v3_8744, i32* %r3.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_8750

dec_label_pc_8750:                                ; preds = %dec_label_pc_8d78, %dec_label_pc_86a8
  %v1_875c = phi i32 [ %v3_8738, %dec_label_pc_86a8 ], [ %v3_8d78, %dec_label_pc_8d78 ]
  %v3_8744.pn = phi i32 [ %v3_8744, %dec_label_pc_86a8 ], [ %v3_8d84, %dec_label_pc_8d78 ]
  %storemerge = add i32 %v3_8744.pn, %v2_8748
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v1_8750 = add i32 %storemerge, -292
  %v2_8750 = inttoptr i32 %v1_8750 to i32*
  %v3_8750 = load i32, i32* %v2_8750, align 4
  %v1_8754 = urem i32 %v1_875c, 32
  store i32 %v1_8754, i32* %r1.global-to-local, align 4
  %v1_8758 = load i32, i32* %fp.global-to-local, align 4
  %v7_8758 = shl i32 %v1_8758, %v1_8754
  %v8_8758 = or i32 %v7_8758, %v3_8750
  store i32 %v8_8758, i32* %r2.global-to-local, align 4
  %v0_875c = load i32, i32* @sl, align 4
  %v2_875c = sub i32 %v0_875c, %v1_875c
  %v3_875c = icmp uge i32 %v0_875c, %v1_875c
  store i1 %v3_875c, i1* %cpsr_c.global-to-local, align 1
  %v4_875c = xor i32 %v0_875c, %v1_875c
  %v5_875c = xor i32 %v2_875c, %v0_875c
  %v6_875c = and i32 %v5_875c, %v4_875c
  %v7_875c = icmp slt i32 %v6_875c, 0
  store i1 %v7_875c, i1* %cpsr_v.global-to-local, align 1
  %v8_875c = icmp slt i32 %v2_875c, 0
  store i1 %v8_875c, i1* %cpsr_n.global-to-local, align 1
  %v9_875c = icmp eq i32 %v0_875c, %v1_875c
  store i1 %v9_875c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8758, i32* %v2_8750, align 4
  %v2_8764 = xor i1 %v8_875c, %v7_875c
  br i1 %v2_8764, label %dec_label_pc_8768, label %dec_label_pc_8630

dec_label_pc_8768:                                ; preds = %dec_label_pc_8750
  %v0_8768 = load i32, i32* %r0.global-to-local, align 4
  %v1_8768 = add i32 %v0_8768, 1
  store i32 %v1_8768, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_876c:                                ; preds = %dec_label_pc_8d60, %dec_label_pc_8d28, %dec_label_pc_8768
  %v0_878c98 = phi i32 [ %v1_8d60, %dec_label_pc_8d60 ], [ %v1_8d28, %dec_label_pc_8d28 ], [ %v1_8768, %dec_label_pc_8768 ]
  store i32 %v0_839c, i32* %lr.global-to-local, align 4
  %v0_8770 = load i32, i32* @r8, align 4
  %v1_8770 = add i32 %v0_8770, 1
  store i32 %v1_8770, i32* @r8, align 4
  %v0_8774 = load i32, i32* @r7, align 4
  %v0_8778 = load i32, i32* @r6, align 4
  %v2_877c = sub i32 %v0_839c, %v1_8770
  %v3_877c = icmp uge i32 %v0_839c, %v1_8770
  store i1 %v3_877c, i1* %cpsr_c.global-to-local, align 1
  %v4_877c = xor i32 %v1_8770, %v0_839c
  %v5_877c = xor i32 %v2_877c, %v0_839c
  %v6_877c = and i32 %v5_877c, %v4_877c
  %v7_877c = icmp slt i32 %v6_877c, 0
  store i1 %v7_877c, i1* %cpsr_v.global-to-local, align 1
  %v8_877c = icmp slt i32 %v2_877c, 0
  store i1 %v8_877c, i1* %cpsr_n.global-to-local, align 1
  %v9_877c = icmp eq i32 %v0_839c, %v1_8770
  store i1 %v9_877c, i1* %cpsr_z.global-to-local, align 1
  %v1_8780 = add i32 %v0_8774, 3140
  store i32 %v1_8780, i32* @r7, align 4
  %v1_8784 = add i32 %v0_8778, 3140
  store i32 %v1_8784, i32* @r6, align 4
  br i1 %v9_877c, label %dec_label_pc_878c, label %dec_label_pc_8650

dec_label_pc_878c:                                ; preds = %dec_label_pc_876c, %dec_label_pc_8630.dec_label_pc_878c_crit_edge
  %v0_87c4 = phi i32 [ %v0_878c.pre, %dec_label_pc_8630.dec_label_pc_878c_crit_edge ], [ %v0_878c98, %dec_label_pc_876c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_878c = icmp slt i32 %v0_87c4, 0
  store i1 %v1_878c, i1* %cpsr_n.global-to-local, align 1
  %v2_878c = icmp eq i32 %v0_87c4, 0
  store i1 %v2_878c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_878c, label %dec_label_pc_8528, label %dec_label_pc_8794

dec_label_pc_8794:                                ; preds = %dec_label_pc_878c
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %stack_var_-56, align 4
  store i32 %v2_87b4, i32* %ip.global-to-local, align 4
  store i32 %v2_87b8, i32* %r1.global-to-local, align 4
  store i32 %v2_87bc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v0_87c4, i32* %r0.global-to-local, align 4
  %v5_87cc = call i32 @function_136b0(i32 %v0_87c4, i32 %v2_87b8, i32 %v2_87bc, i32 0, i32 %v2_87b4)
  store i32 %v5_87cc, i32* @r4, align 4
  %v0_87d4 = load i32, i32* @r5, align 4
  store i32 %v0_87d4, i32* %r0.global-to-local, align 4
  %v1_87d8 = inttoptr i32 %v0_87d4 to i32*
  %v2_87d8 = call i32 @function_13760(i32* %v1_87d8)
  store i32 %v2_87d8, i32* %r0.global-to-local, align 4
  %v0_87dc = load i32, i32* @r4, align 4
  %v1_87dc = load i32, i32* @r5, align 4
  %v2_87dc = sub i32 %v0_87dc, %v1_87dc
  %v3_87dc = icmp uge i32 %v0_87dc, %v1_87dc
  store i1 %v3_87dc, i1* %cpsr_c.global-to-local, align 1
  %v4_87dc = xor i32 %v1_87dc, %v0_87dc
  %v5_87dc = xor i32 %v2_87dc, %v0_87dc
  %v6_87dc = and i32 %v5_87dc, %v4_87dc
  %v7_87dc = icmp slt i32 %v6_87dc, 0
  store i1 %v7_87dc, i1* %cpsr_v.global-to-local, align 1
  %v8_87dc = icmp slt i32 %v2_87dc, 0
  store i1 %v8_87dc, i1* %cpsr_n.global-to-local, align 1
  %v9_87dc = icmp eq i32 %v0_87dc, %v1_87dc
  store i1 %v9_87dc, i1* %cpsr_z.global-to-local, align 1
  %v7_87e4 = icmp sgt i32 %v0_87dc, %v1_87dc
  br i1 %v7_87e4, label %dec_label_pc_87e8, label %dec_label_pc_8528

dec_label_pc_87e8:                                ; preds = %dec_label_pc_8794
  store i32 %stack_var_-20868.0.ph, i32* @r8, align 4
  br label %dec_label_pc_8858

dec_label_pc_87f4:                                ; preds = %.thread38.dec_label_pc_87f4_crit_edge, %dec_label_pc_8868
  %v0_880c = phi i32 [ %v0_87f4.pre, %.thread38.dec_label_pc_87f4_crit_edge ], [ %v3_8858, %dec_label_pc_8868 ]
  %v3_87f4 = udiv i32 %v0_880c, 32
  store i32 %v2_8748, i32* %r2.global-to-local, align 4
  %v3_8800 = mul nuw nsw i32 %v3_87f4, 4
  %v2_8804 = add i32 %v3_8800, %v2_8748
  store i32 %v2_8804, i32* %r3.global-to-local, align 4
  %v1_8808 = add i32 %v2_8804, -164
  %v2_8808 = inttoptr i32 %v1_8808 to i32*
  %v3_8808 = load i32, i32* %v2_8808, align 4
  %v1_880c = urem i32 %v0_880c, 32
  store i32 %v1_880c, i32* %r1.global-to-local, align 4
  %v2_8810 = add nsw i32 %v1_880c, -1
  %v3_8810 = shl i32 1, %v2_8810
  %v4_8810 = and i32 %v3_8810, %v3_8808
  %v5_8810 = icmp ne i32 %v4_8810, 0
  store i1 %v5_8810, i1* %cpsr_c.global-to-local, align 1
  %v6_8810 = lshr i32 %v3_8808, %v1_880c
  store i32 %v6_8810, i32* %r2.global-to-local, align 4
  %v1_8814 = urem i32 %v6_8810, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_8814 = icmp eq i32 %v1_8814, 0
  store i1 %v2_8814, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8814, label %dec_label_pc_8838, label %dec_label_pc_881c

dec_label_pc_881c:                                ; preds = %dec_label_pc_87f4
  %v0_881c = load i32, i32* @r8, align 4
  %v1_881c = add i32 %v0_881c, -1452
  %v2_881c = inttoptr i32 %v1_881c to i8*
  %v3_881c = load i8, i8* %v2_881c, align 1
  %v4_881c = zext i8 %v3_881c to i32
  store i32 %v4_881c, i32* %r3.global-to-local, align 4
  %v2_8820 = icmp ugt i8 %v3_881c, 5
  store i1 %v2_8820, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8820 = icmp ult i8 %v3_881c, 6
  store i1 %v6_8820, i1* %cpsr_n.global-to-local, align 1
  %v7_8820 = icmp eq i8 %v3_881c, 6
  store i1 %v7_8820, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8820, label %dec_label_pc_8dd0, label %dec_label_pc_8828

dec_label_pc_8828:                                ; preds = %dec_label_pc_881c
  %v2_8828 = icmp ugt i8 %v3_881c, 6
  store i1 %v2_8828, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8828 = icmp ult i8 %v3_881c, 7
  store i1 %v6_8828, i1* %cpsr_n.global-to-local, align 1
  %v7_8828 = icmp eq i8 %v3_881c, 7
  store i1 %v7_8828, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8828, label %dec_label_pc_940c, label %dec_label_pc_8830

dec_label_pc_8830:                                ; preds = %dec_label_pc_8828
  %v2_8830 = icmp ugt i8 %v3_881c, 9
  store i1 %v2_8830, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8830 = icmp ult i8 %v3_881c, 10
  store i1 %v6_8830, i1* %cpsr_n.global-to-local, align 1
  %v7_8830 = icmp eq i8 %v3_881c, 10
  store i1 %v7_8830, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8830, label %dec_label_pc_961c, label %dec_label_pc_8838

dec_label_pc_8838:                                ; preds = %dec_label_pc_9510, %dec_label_pc_9950, %dec_label_pc_9a98, %dec_label_pc_9914, %dec_label_pc_8830, %dec_label_pc_87f4, %dec_label_pc_8858, %dec_label_pc_9d84, %dec_label_pc_9b34, %dec_label_pc_9a7c, %dec_label_pc_9934, %dec_label_pc_98fc, %dec_label_pc_9884, %dec_label_pc_9400, %dec_label_pc_88dc, %dec_label_pc_965c
  store i32 %v0_839c, i32* %r3.global-to-local, align 4
  %v1_8840 = add i32 %stack_var_-20832.0, 1
  store i32 %v1_8840, i32* %r2.global-to-local, align 4
  %v0_8844 = load i32, i32* @r8, align 4
  %v2_8848 = sub i32 %v1_8840, %v0_839c
  %v3_8848 = icmp uge i32 %v1_8840, %v0_839c
  store i1 %v3_8848, i1* %cpsr_c.global-to-local, align 1
  %v4_8848 = xor i32 %v1_8840, %v0_839c
  %v5_8848 = xor i32 %v2_8848, %v1_8840
  %v6_8848 = and i32 %v5_8848, %v4_8848
  %v7_8848 = icmp slt i32 %v6_8848, 0
  store i1 %v7_8848, i1* %cpsr_v.global-to-local, align 1
  %v8_8848 = icmp slt i32 %v2_8848, 0
  store i1 %v8_8848, i1* %cpsr_n.global-to-local, align 1
  %v9_8848 = icmp eq i32 %v1_8840, %v0_839c
  store i1 %v9_8848, i1* %cpsr_z.global-to-local, align 1
  %v1_8850 = add i32 %v0_8844, 3140
  store i32 %v1_8850, i32* @r8, align 4
  br i1 %v9_8848, label %dec_label_pc_8528, label %dec_label_pc_8858

dec_label_pc_8858:                                ; preds = %dec_label_pc_8838, %dec_label_pc_87e8
  %v0_8860 = phi i32 [ %stack_var_-20868.0.ph, %dec_label_pc_87e8 ], [ %v1_8850, %dec_label_pc_8838 ]
  %stack_var_-20832.0 = phi i32 [ %v1_87dc, %dec_label_pc_87e8 ], [ %v1_8840, %dec_label_pc_8838 ]
  %v1_8858 = add i32 %v0_8860, -1456
  %v2_8858 = inttoptr i32 %v1_8858 to i32*
  %v3_8858 = load i32, i32* %v2_8858, align 4
  store i32 %v3_8858, i32* %r0.global-to-local, align 4
  %v1_885c = add i32 %v3_8858, 1
  %v2_885c = icmp eq i32 %v3_8858, -1
  store i1 %v2_885c, i1* %cpsr_c.global-to-local, align 1
  %v3_885c = sub i32 0, %v3_8858
  %v4_885c = and i32 %v1_885c, %v3_885c
  %v5_885c = icmp slt i32 %v4_885c, 0
  store i1 %v5_885c, i1* %cpsr_v.global-to-local, align 1
  %v6_885c = icmp slt i32 %v1_885c, 0
  store i1 %v6_885c, i1* %cpsr_n.global-to-local, align 1
  %v7_885c = icmp eq i32 %v1_885c, 0
  store i1 %v7_885c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8858, i32* %sb.global-to-local, align 4
  br i1 %v7_885c, label %dec_label_pc_8838, label %dec_label_pc_8868

dec_label_pc_8868:                                ; preds = %dec_label_pc_8858
  %v3_8868 = udiv i32 %v3_8858, 32
  %v3_8870 = mul nuw nsw i32 %v3_8868, 4
  store i32 %v2_8748, i32* @lr, align 4
  %v2_8878 = add i32 %v3_8870, %v2_8748
  store i32 %v2_8878, i32* %r3.global-to-local, align 4
  %v1_887c = add i32 %v2_8878, -292
  %v2_887c = inttoptr i32 %v1_887c to i32*
  %v3_887c = load i32, i32* %v2_887c, align 4
  %v1_8880 = urem i32 %v3_8858, 32
  store i32 %v1_8880, i32* %r1.global-to-local, align 4
  %v2_8884 = add nsw i32 %v1_8880, -1
  %v3_8884 = shl i32 1, %v2_8884
  %v4_8884 = and i32 %v3_887c, %v3_8884
  %v5_8884 = icmp ne i32 %v4_8884, 0
  store i1 %v5_8884, i1* %cpsr_c.global-to-local, align 1
  %v6_8884 = lshr i32 %v3_887c, %v1_8880
  store i32 %v6_8884, i32* %r2.global-to-local, align 4
  %v1_8888 = urem i32 %v6_8884, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_8888 = icmp eq i32 %v1_8888, 0
  store i1 %v2_8888, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8888, label %dec_label_pc_87f4, label %dec_label_pc_8890

dec_label_pc_8890:                                ; preds = %dec_label_pc_8868
  store i32 4, i32* @r4, align 4
  store i32 %v10_82f0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v2_88a8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 4, i32* %stack_var_-48, align 4
  store i32 %v2_88b4, i32* @lr, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v6_88c0 = call i32 @function_13c44(i32 %v3_8858, i32 1, i32 4, i32* nonnull %stack_var_-44, i32 %v2_88b4)
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_88c8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_88c8, i32* %r3.global-to-local, align 4
  %v2_88cc = or i32 %v3_88c8, %v6_88c0
  store i32 %v2_88cc, i32* %r0.global-to-local, align 4
  %v3_88cc = icmp slt i32 %v2_88cc, 0
  store i1 %v3_88cc, i1* %cpsr_n.global-to-local, align 1
  %v4_88cc = icmp eq i32 %v2_88cc, 0
  store i1 %v4_88cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_88cc, label %.thread38, label %dec_label_pc_88dc

.thread38:                                        ; preds = %dec_label_pc_8890
  %v1_88d0 = load i32, i32* @r8, align 4
  %v2_88d0 = add i32 %v1_88d0, -1456
  %v3_88d0 = inttoptr i32 %v2_88d0 to i32*
  %v4_88d0 = load i32, i32* %v3_88d0, align 4
  store i32 %v4_88d0, i32* %r0.global-to-local, align 4
  %v1_88d4 = load i32, i32* @r4, align 4
  %v2_88d4 = trunc i32 %v1_88d4 to i8
  %v4_88d4 = add i32 %v1_88d0, -1452
  %v5_88d4 = inttoptr i32 %v4_88d4 to i8*
  store i8 %v2_88d4, i8* %v5_88d4, align 1
  %v0_88d8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_88d8.pr.pr, label %.thread38.dec_label_pc_87f4_crit_edge, label %dec_label_pc_88dc

.thread38.dec_label_pc_87f4_crit_edge:            ; preds = %.thread38
  %v0_87f4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_87f4

dec_label_pc_88dc:                                ; preds = %dec_label_pc_8890, %.thread38
  %v0_88dc = load i32, i32* @r8, align 4
  %v1_88dc = add i32 %v0_88dc, -1456
  %v2_88dc = inttoptr i32 %v1_88dc to i32*
  %v3_88dc = load i32, i32* %v2_88dc, align 4
  store i32 %v3_88dc, i32* %r0.global-to-local, align 4
  %v1_88e0 = call i32 @function_13490(i32 %v3_88dc)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_88e8 = load i32, i32* @r8, align 4
  %v2_88e8 = add i32 %v1_88e8, -1456
  %v3_88e8 = inttoptr i32 %v2_88e8 to i32*
  store i32 -1, i32* %v3_88e8, align 4
  %v0_88ec = load i32, i32* @r5, align 4
  %v1_88ec = trunc i32 %v0_88ec to i8
  %v2_88ec = load i32, i32* @r8, align 4
  %v3_88ec = add i32 %v2_88ec, -1452
  %v4_88ec = inttoptr i32 %v3_88ec to i8*
  store i8 %v1_88ec, i8* %v4_88ec, align 1
  br label %dec_label_pc_8838

dec_label_pc_88f4:                                ; preds = %dec_label_pc_8650
  %v1_88f4 = add i32 %v3_8900, 25
  %v2_88f4 = inttoptr i32 %v1_88f4 to i32*
  %v3_88f4 = load i32, i32* %v2_88f4, align 4
  store i32 %v3_88f4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_88f8 = icmp slt i32 %v3_88f4, 0
  store i1 %v1_88f8, i1* %cpsr_n.global-to-local, align 1
  %v2_88f8 = icmp eq i32 %v3_88f4, 0
  store i1 %v2_88f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_88f8, label %.thread43, label %.thread41

.thread41:                                        ; preds = %dec_label_pc_88f4
  store i32 4, i32* %r3.global-to-local, align 4
  store i8 4, i8* %v2_8650, align 1
  %v0_8904.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8904.pr.pr, label %.thread41..thread43_crit_edge, label %dec_label_pc_890c

.thread41..thread43_crit_edge:                    ; preds = %.thread41
  %v1_8904.pre = load i32, i32* %r3.global-to-local, align 4
  %v3_8904.pre = load i32, i32* @r6, align 4
  %extract.t = trunc i32 %v1_8904.pre to i8
  br label %.thread43

.thread43:                                        ; preds = %.thread41..thread43_crit_edge, %dec_label_pc_88f4
  %v3_8904 = phi i32 [ %v3_8904.pre, %.thread41..thread43_crit_edge ], [ %v3_8900, %dec_label_pc_88f4 ]
  %v1_8904.off0 = phi i8 [ %extract.t, %.thread41..thread43_crit_edge ], [ 0, %dec_label_pc_88f4 ]
  %v4_8904 = add i32 %v3_8904, -1427
  %v5_8904 = inttoptr i32 %v4_8904 to i8*
  store i8 %v1_8904.off0, i8* %v5_8904, align 1
  %v0_8908.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8908.pr, label %.thread43.dec_label_pc_8664_crit_edge, label %dec_label_pc_890c

.thread43.dec_label_pc_8664_crit_edge:            ; preds = %.thread43
  %v0_8664.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_8664

dec_label_pc_890c:                                ; preds = %.thread41, %.thread43, %dec_label_pc_85c0
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v0_8914 = load i32, i32* @r7, align 4
  %v1_8914 = add i32 %v0_8914, 2112
  store i32 %v1_8914, i32* %r0.global-to-local, align 4
  %v1_8918 = load i32, i32* @r6, align 4
  %v2_8918 = add i32 %v1_8918, 33
  %v3_8918 = inttoptr i32 %v2_8918 to i32*
  store i32 -1, i32* %v3_8918, align 4
  %v0_891c = load i32, i32* %r0.global-to-local, align 4
  %v1_891c = add i32 %v0_891c, 4
  store i32 %v1_891c, i32* %r0.global-to-local, align 4
  store i32 1024, i32* %r1.global-to-local, align 4
  %v0_8924 = load i32, i32* @r5, align 4
  %v1_8924 = load i32, i32* @r6, align 4
  %v2_8924 = add i32 %v1_8924, 21
  %v3_8924 = inttoptr i32 %v2_8924 to i32*
  store i32 %v0_8924, i32* %v3_8924, align 4
  %v2_8928 = call i32 @function_12b70(i32 %v1_891c, i32 1024)
  store i32 10240, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_8934 = load i32, i32* @r5, align 4
  %v1_8934 = load i32, i32* @r6, align 4
  %v2_8934 = add i32 %v1_8934, 681
  %v3_8934 = inttoptr i32 %v2_8934 to i32*
  store i32 %v0_8934, i32* %v3_8934, align 4
  %v2_8938 = call i32 @function_12b70(i32 %stack_var_-20856.0.ph, i32 10240)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8940 = call i32 @function_12ad0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  %v0_8948 = load i32, i32* @r6, align 4
  store i32 %v0_8948, i32* %r1.global-to-local, align 4
  %v2_894c = add i32 %v2_8940, %stack_var_-20856.0.ph
  store i32 %v2_894c, i32* @r0, align 4
  %v2_8950 = inttoptr i32 %v2_894c to i8*
  %v3_8950 = call i32 @function_12af8(i8* %v2_8950, i32 %v0_8948)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8958 = call i32 @function_12ad0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d54.27 to i32), i32* %r1.global-to-local, align 4
  %v2_8964 = add i32 %v2_8958, %stack_var_-20856.0.ph
  store i32 %v2_8964, i32* @r0, align 4
  %v2_8968 = inttoptr i32 %v2_8964 to i8*
  %v3_8968 = call i32 @function_12af8(i8* %v2_8968, i32 ptrtoint (i32* @global_var_15d54.27 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8970 = call i32 @function_12ad0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  %v0_8978 = load i32, i32* @r7, align 4
  %v1_8978 = add i32 %v0_8978, 532
  store i32 %v1_8978, i32* %r1.global-to-local, align 4
  %v2_897c = add i32 %v2_8970, %stack_var_-20856.0.ph
  store i32 %v2_897c, i32* @r0, align 4
  %v2_8980 = inttoptr i32 %v2_897c to i8*
  %v3_8980 = call i32 @function_12af8(i8* %v2_8980, i32 %v1_8978)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8988 = call i32 @function_12ad0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([24 x i8]* @global_var_15d2c.29 to i32), i32* %r1.global-to-local, align 4
  %v2_8994 = add i32 %v2_8988, %stack_var_-20856.0.ph
  store i32 %v2_8994, i32* @r0, align 4
  %v3_8998 = inttoptr i32 %v2_8994 to i8*
  %v4_8998 = call i32 @function_12af8(i8* %v3_8998, i32 ptrtoint ([24 x i8]* @global_var_15d2c.29 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89a0 = call i32 @function_12ad0(i8* %v1_8940)
  %v2_89a8 = add i32 %v2_89a0, %stack_var_-20856.0.ph
  store i32 %v2_89a8, i32* @r0, align 4
  %v0_89ac = load i32, i32* @r7, align 4
  %v1_89ac = add i32 %v0_89ac, 20
  store i32 %v1_89ac, i32* %r1.global-to-local, align 4
  %v2_89b0 = inttoptr i32 %v2_89a8 to i8*
  %v3_89b0 = call i32 @function_12af8(i8* %v2_89b0, i32 %v1_89ac)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89b8 = call i32 @function_12ad0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15d44.31 to i32), i32* %r1.global-to-local, align 4
  %v2_89c4 = add i32 %v2_89b8, %stack_var_-20856.0.ph
  store i32 %v2_89c4, i32* @r0, align 4
  %v3_89c8 = inttoptr i32 %v2_89c4 to i8*
  %v4_89c8 = call i32 @function_12af8(i8* %v3_89c8, i32 ptrtoint ([9 x i8]* @global_var_15d44.31 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89d0 = call i32 @function_12ad0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v0_89d8 = load i32, i32* @r7, align 4
  %v2_89dc = add i32 %v2_89d0, %stack_var_-20856.0.ph
  store i32 %v2_89dc, i32* @r0, align 4
  %v1_89e0 = add i32 %v0_89d8, 789
  store i32 %v1_89e0, i32* %r1.global-to-local, align 4
  %v2_89e4 = inttoptr i32 %v2_89dc to i8*
  %v3_89e4 = call i32 @function_12af8(i8* %v2_89e4, i32 %v1_89e0)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89ec = call i32 @function_12ad0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32* %r1.global-to-local, align 4
  %v2_89f8 = add i32 %v2_89ec, %stack_var_-20856.0.ph
  store i32 %v2_89f8, i32* @r0, align 4
  %v3_89fc = inttoptr i32 %v2_89f8 to i8*
  %v4_89fc = call i32 @function_12af8(i8* %v3_89fc, i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32))
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_8a04 = call i32 @function_121a4(i32 32)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a0c = call i32 @function_12ad0(i8* %v1_8940)
  %v0_8a10 = load i32, i32* @r5, align 4
  store i32 %v0_8a10, i32* %r1.global-to-local, align 4
  store i32 %v2_8a0c, i32* @r4, align 4
  store i32 32, i32* %r0.global-to-local, align 4
  %v2_8a1c = inttoptr i32 %v0_8a10 to i32*
  %v3_8a1c = call i32 @function_120c0(i32 32, i32* %v2_8a1c)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 %v3_8a1c, i32* %r1.global-to-local, align 4
  %v1_8a28 = load i32, i32* @r4, align 4
  %v2_8a28 = add i32 %v1_8a28, %stack_var_-20856.0.ph
  store i32 %v2_8a28, i32* @r0, align 4
  %v2_8a2c = inttoptr i32 %v2_8a28 to i8*
  %v3_8a2c = call i32 @function_12af8(i8* %v2_8a2c, i32 %v3_8a1c)
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_8a34 = call i32 @function_120ec(i32 32)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a3c = call i32 @function_12ad0(i8* %v1_8940)
  %v2_8a44 = add i32 %v2_8a3c, %stack_var_-20856.0.ph
  store i32 %v2_8a44, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32* %r1.global-to-local, align 4
  %v3_8a4c = inttoptr i32 %v2_8a44 to i8*
  %v4_8a4c = call i32 @function_12af8(i8* %v3_8a4c, i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32))
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_8a54 = call i32 @function_121a4(i32 33)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a5c = call i32 @function_12ad0(i8* %v1_8940)
  %v0_8a60 = load i32, i32* @r5, align 4
  store i32 %v0_8a60, i32* %r1.global-to-local, align 4
  store i32 %v2_8a5c, i32* @r4, align 4
  store i32 33, i32* %r0.global-to-local, align 4
  %v2_8a6c = inttoptr i32 %v0_8a60 to i32*
  %v3_8a6c = call i32 @function_120c0(i32 33, i32* %v2_8a6c)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_8a6c, i32* %r1.global-to-local, align 4
  %v1_8a78 = load i32, i32* @r4, align 4
  %v2_8a78 = add i32 %v1_8a78, %stack_var_-20856.0.ph
  store i32 %v2_8a78, i32* @r0, align 4
  %v2_8a7c = inttoptr i32 %v2_8a78 to i8*
  %v3_8a7c = call i32 @function_12af8(i8* %v2_8a7c, i32 %v3_8a6c)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_8a84 = call i32 @function_120ec(i32 33)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a8c = call i32 @function_12ad0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32* %r1.global-to-local, align 4
  %v2_8a98 = add i32 %v2_8a8c, %stack_var_-20856.0.ph
  store i32 %v2_8a98, i32* @r0, align 4
  %v3_8a9c = inttoptr i32 %v2_8a98 to i8*
  %v4_8a9c = call i32 @function_12af8(i8* %v3_8a9c, i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32))
  store i32 34, i32* %r0.global-to-local, align 4
  %v1_8aa4 = call i32 @function_121a4(i32 34)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8aac = call i32 @function_12ad0(i8* %v1_8940)
  %v0_8ab0 = load i32, i32* @r5, align 4
  store i32 %v0_8ab0, i32* %r1.global-to-local, align 4
  store i32 %v2_8aac, i32* @r4, align 4
  store i32 34, i32* %r0.global-to-local, align 4
  %v2_8abc = inttoptr i32 %v0_8ab0 to i32*
  %v3_8abc = call i32 @function_120c0(i32 34, i32* %v2_8abc)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_8abc, i32* %r1.global-to-local, align 4
  %v1_8ac8 = load i32, i32* @r4, align 4
  %v2_8ac8 = add i32 %v1_8ac8, %stack_var_-20856.0.ph
  store i32 %v2_8ac8, i32* @r0, align 4
  %v2_8acc = inttoptr i32 %v2_8ac8 to i8*
  %v3_8acc = call i32 @function_12af8(i8* %v2_8acc, i32 %v3_8abc)
  store i32 34, i32* %r0.global-to-local, align 4
  %v1_8ad4 = call i32 @function_120ec(i32 34)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8adc = call i32 @function_12ad0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32* %r1.global-to-local, align 4
  %v2_8ae8 = add i32 %v2_8adc, %stack_var_-20856.0.ph
  store i32 %v2_8ae8, i32* @r0, align 4
  %v3_8aec = inttoptr i32 %v2_8ae8 to i8*
  %v4_8aec = call i32 @function_12af8(i8* %v3_8aec, i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32))
  store i32 %v4_8aec, i32* %r0.global-to-local, align 4
  store i32 %v6_8200, i32* %r1.global-to-local, align 4
  %v1_8af4 = load i32, i32* @r5, align 4
  %v2_8af4 = sub i32 %v6_8200, %v1_8af4
  %v3_8af4 = icmp uge i32 %v6_8200, %v1_8af4
  store i1 %v3_8af4, i1* %cpsr_c.global-to-local, align 1
  %v4_8af4 = xor i32 %v1_8af4, %v6_8200
  %v5_8af4 = xor i32 %v2_8af4, %v6_8200
  %v6_8af4 = and i32 %v5_8af4, %v4_8af4
  %v7_8af4 = icmp slt i32 %v6_8af4, 0
  store i1 %v7_8af4, i1* %cpsr_v.global-to-local, align 1
  %v8_8af4 = icmp slt i32 %v2_8af4, 0
  store i1 %v8_8af4, i1* %cpsr_n.global-to-local, align 1
  %v9_8af4 = icmp eq i32 %v6_8200, %v1_8af4
  store i1 %v9_8af4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8af4, label %dec_label_pc_8bcc, label %dec_label_pc_8afc

dec_label_pc_8afc:                                ; preds = %dec_label_pc_890c
  store i32 35, i32* %r0.global-to-local, align 4
  %v1_8b00 = call i32 @function_121a4(i32 35)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b08 = call i32 @function_12ad0(i8* %v1_8940)
  %v0_8b0c = load i32, i32* @r5, align 4
  store i32 %v0_8b0c, i32* %r1.global-to-local, align 4
  store i32 %v2_8b08, i32* @r4, align 4
  store i32 35, i32* %r0.global-to-local, align 4
  %v2_8b18 = inttoptr i32 %v0_8b0c to i32*
  %v3_8b18 = call i32 @function_120c0(i32 35, i32* %v2_8b18)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_8b18, i32* %r1.global-to-local, align 4
  %v1_8b24 = load i32, i32* @r4, align 4
  %v2_8b24 = add i32 %v1_8b24, %stack_var_-20856.0.ph
  store i32 %v2_8b24, i32* @r0, align 4
  %v2_8b28 = inttoptr i32 %v2_8b24 to i8*
  %v3_8b28 = call i32 @function_12af8(i8* %v2_8b28, i32 %v3_8b18)
  store i32 35, i32* %r0.global-to-local, align 4
  %v1_8b30 = call i32 @function_120ec(i32 35)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b38 = call i32 @function_12ad0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32* %r1.global-to-local, align 4
  %v2_8b44 = add i32 %v2_8b38, %stack_var_-20856.0.ph
  store i32 %v2_8b44, i32* @r0, align 4
  %v3_8b48 = inttoptr i32 %v2_8b44 to i8*
  %v4_8b48 = call i32 @function_12af8(i8* %v3_8b48, i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b50 = call i32 @function_12ad0(i8* %v1_8940)
  %v0_8b54 = load i32, i32* @r5, align 4
  store i32 %v0_8b54, i32* %r1.global-to-local, align 4
  store i32 %v2_8b50, i32* %r4.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v2_8b60 = inttoptr i32 %v0_8b54 to i32*
  %v3_8b60 = call i32 @function_120c0(i32 40, i32* %v2_8b60)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_8b60, i32* %r1.global-to-local, align 4
  %v2_8b6c = add i32 %v2_8b50, %stack_var_-20856.0.ph
  store i32 %v2_8b6c, i32* @r0, align 4
  %v2_8b70 = inttoptr i32 %v2_8b6c to i8*
  %v3_8b70 = call i32 @function_12af8(i8* %v2_8b70, i32 %v3_8b60)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b78 = call i32 @function_12ad0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_15d54.27 to i32), i32* %r1.global-to-local, align 4
  %v2_8b84 = add i32 %v2_8b78, %stack_var_-20856.0.ph
  store i32 %v2_8b84, i32* @r0, align 4
  %v2_8b88 = inttoptr i32 %v2_8b84 to i8*
  %v3_8b88 = call i32 @function_12af8(i8* %v2_8b88, i32 ptrtoint (i32* @global_var_15d54.27 to i32))
  store i32 %v6_8200, i32* %r0.global-to-local, align 4
  %v2_8b90 = call i32 @function_12ad0(i8* %v1_8b90)
  store i32 %v2_8b90, i32* @r4, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b9c = call i32 @function_12ad0(i8* %v1_8940)
  %v2_8ba4 = add i32 %v2_8b9c, %stack_var_-20856.0.ph
  store i32 %v2_8ba4, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v0_8bac = load i32, i32* @r4, align 4
  store i32 %v0_8bac, i32* %r0.global-to-local, align 4
  %v3_8bb0 = trunc i32 %v0_8bac to i8
  %v4_8bb0 = call i32 @function_12fc4(i8 %v3_8bb0, i32 10, i32 %v2_8ba4)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8bb8 = call i32 @function_12ad0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32* %r1.global-to-local, align 4
  %v2_8bc4 = add i32 %v2_8bb8, %stack_var_-20856.0.ph
  store i32 %v2_8bc4, i32* @r0, align 4
  %v3_8bc8 = inttoptr i32 %v2_8bc4 to i8*
  %v4_8bc8 = call i32 @function_12af8(i8* %v3_8bc8, i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32))
  store i32 %v4_8bc8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8bcc

dec_label_pc_8bcc:                                ; preds = %dec_label_pc_890c, %dec_label_pc_8afc
  %v0_8bcc = load i32, i32* @r6, align 4
  %v1_8bcc = add i32 %v0_8bcc, 37
  %v2_8bcc = inttoptr i32 %v1_8bcc to i32*
  %v3_8bcc = load i32, i32* %v2_8bcc, align 4
  store i32 %v3_8bcc, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8bd0 = icmp slt i32 %v3_8bcc, 0
  store i1 %v1_8bd0, i1* %cpsr_n.global-to-local, align 1
  %v2_8bd0 = icmp eq i32 %v3_8bcc, 0
  store i1 %v2_8bd0, i1* %cpsr_z.global-to-local, align 1
  %tmp208 = icmp slt i32 %v3_8bcc, 1
  br i1 %tmp208, label %dec_label_pc_8c78, label %dec_label_pc_8bd8

dec_label_pc_8bd8:                                ; preds = %dec_label_pc_8bcc
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8bdc = call i32 @function_12ad0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15d64.35 to i32), i32* %r1.global-to-local, align 4
  %v2_8be8 = add i32 %v2_8bdc, %stack_var_-20856.0.ph
  store i32 %v2_8be8, i32* @r0, align 4
  %v3_8bec = inttoptr i32 %v2_8be8 to i8*
  %v4_8bec = call i32 @function_12af8(i8* %v3_8bec, i32 ptrtoint ([9 x i8]* @global_var_15d64.35 to i32))
  store i32 %v4_8bec, i32* %r0.global-to-local, align 4
  %v0_8bf0 = load i32, i32* @r6, align 4
  %v1_8bf0 = add i32 %v0_8bf0, 37
  %v2_8bf0 = inttoptr i32 %v1_8bf0 to i32*
  %v3_8bf0 = load i32, i32* %v2_8bf0, align 4
  store i32 %v3_8bf0, i32* %r3.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8bf8 = icmp slt i32 %v3_8bf0, 0
  store i1 %v1_8bf8, i1* %cpsr_n.global-to-local, align 1
  %v2_8bf8 = icmp eq i32 %v3_8bf0, 0
  store i1 %v2_8bf8, i1* %cpsr_z.global-to-local, align 1
  %v0_8bfc = load i32, i32* @r5, align 4
  store i32 %v0_8bfc, i32* %stack_var_-40, align 4
  %tmp209 = icmp slt i32 %v3_8bf0, 1
  br i1 %tmp209, label %dec_label_pc_8c60, label %dec_label_pc_8c04

dec_label_pc_8c04:                                ; preds = %dec_label_pc_8bd8, %dec_label_pc_8c04
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c08 = call i32 @function_12ad0(i8* %v1_8940)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_8c10 = load i32, i32* %stack_var_-40, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v1_8c18 = and i32 %v3_8c10, 33554432
  %v2_8c18 = icmp ne i32 %v1_8c18, 0
  store i1 %v2_8c18, i1* %cpsr_c.global-to-local, align 1
  %v3_8c18 = mul i32 %v3_8c10, 128
  %v1_8c1c = add i32 %v3_8c18, 1472
  %v2_8c20 = add i32 %v2_8c08, %stack_var_-20856.0.ph
  store i32 %v2_8c20, i32* @r0, align 4
  %v0_8c24 = load i32, i32* @r7, align 4
  %v2_8c24 = add i32 %v1_8c1c, %v0_8c24
  store i32 %v2_8c24, i32* %r1.global-to-local, align 4
  %v2_8c28 = inttoptr i32 %v2_8c20 to i8*
  %v3_8c28 = call i32 @function_12af8(i8* %v2_8c28, i32 %v2_8c24)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c30 = call i32 @function_12ad0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d70.37 to i32), i32* %r1.global-to-local, align 4
  %v2_8c3c = add i32 %v2_8c30, %stack_var_-20856.0.ph
  store i32 %v2_8c3c, i32* @r0, align 4
  %v3_8c40 = inttoptr i32 %v2_8c3c to i8*
  %v4_8c40 = call i32 @function_12af8(i8* %v3_8c40, i32 ptrtoint ([3 x i8]* @global_var_15d70.37 to i32))
  store i32 %v4_8c40, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v3_8c48 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8c48, i32* %r3.global-to-local, align 4
  %v0_8c4c = load i32, i32* @r6, align 4
  %v1_8c4c = add i32 %v0_8c4c, 37
  %v2_8c4c = inttoptr i32 %v1_8c4c to i32*
  %v3_8c4c = load i32, i32* %v2_8c4c, align 4
  store i32 %v3_8c4c, i32* %r2.global-to-local, align 4
  %v1_8c50 = add i32 %v3_8c48, 1
  store i32 %v1_8c50, i32* %ip.global-to-local, align 4
  %v2_8c54 = sub i32 %v3_8c4c, %v1_8c50
  %v3_8c54 = icmp uge i32 %v3_8c4c, %v1_8c50
  store i1 %v3_8c54, i1* %cpsr_c.global-to-local, align 1
  %v4_8c54 = xor i32 %v3_8c4c, %v1_8c50
  %v5_8c54 = xor i32 %v2_8c54, %v3_8c4c
  %v6_8c54 = and i32 %v5_8c54, %v4_8c54
  %v7_8c54 = icmp slt i32 %v6_8c54, 0
  store i1 %v7_8c54, i1* %cpsr_v.global-to-local, align 1
  %v8_8c54 = icmp slt i32 %v2_8c54, 0
  store i1 %v8_8c54, i1* %cpsr_n.global-to-local, align 1
  %v9_8c54 = icmp eq i32 %v3_8c4c, %v1_8c50
  store i1 %v9_8c54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8c50, i32* %stack_var_-40, align 4
  %v8_8c5c = icmp sgt i32 %v3_8c4c, %v1_8c50
  br i1 %v8_8c5c, label %dec_label_pc_8c04, label %dec_label_pc_8c60

dec_label_pc_8c60:                                ; preds = %dec_label_pc_8c04, %dec_label_pc_8bd8
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c64 = call i32 @function_12ad0(i8* %v1_8940)
  %v2_8c6c = add i32 %v2_8c64, %stack_var_-20856.0.ph
  store i32 %v2_8c6c, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32* %r1.global-to-local, align 4
  %v3_8c74 = inttoptr i32 %v2_8c6c to i8*
  %v4_8c74 = call i32 @function_12af8(i8* %v3_8c74, i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32))
  store i32 %v4_8c74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8c78

dec_label_pc_8c78:                                ; preds = %dec_label_pc_8bcc, %dec_label_pc_8c60
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c7c = call i32 @function_12ad0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32* %r1.global-to-local, align 4
  %v2_8c88 = add i32 %v2_8c7c, %stack_var_-20856.0.ph
  store i32 %v2_8c88, i32* @r0, align 4
  %v3_8c8c = inttoptr i32 %v2_8c88 to i8*
  %v4_8c8c = call i32 @function_12af8(i8* %v3_8c8c, i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32))
  store i32 %v4_8c8c, i32* %r0.global-to-local, align 4
  store i32 %v6_8200, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_8c94, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_8c94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8c94, label %dec_label_pc_8cb4, label %dec_label_pc_8c9c

dec_label_pc_8c9c:                                ; preds = %dec_label_pc_8c78
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8ca0 = call i32 @function_12ad0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v6_8200, i32* %r1.global-to-local, align 4
  %v2_8cac = add i32 %v2_8ca0, %stack_var_-20856.0.ph
  store i32 %v2_8cac, i32* @r0, align 4
  %v2_8cb0 = inttoptr i32 %v2_8cac to i8*
  %v3_8cb0 = call i32 @function_12af8(i8* %v2_8cb0, i32 %v6_8200)
  store i32 %v3_8cb0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8cb4

dec_label_pc_8cb4:                                ; preds = %dec_label_pc_8c78, %dec_label_pc_8c9c
  %v0_8cb4 = load i32, i32* @r7, align 4
  %v1_8cb4 = add i32 %v0_8cb4, 1440
  store i32 %v1_8cb4, i32* %r4.global-to-local, align 4
  %v0_8cb8 = load i32, i32* @r6, align 4
  store i32 %v0_8cb8, i32* %r0.global-to-local, align 4
  store i32 %v1_8cb4, i32* %r1.global-to-local, align 4
  %v2_8cc0 = inttoptr i32 %v0_8cb8 to i8*
  %v3_8cc0 = call i32 @function_12eb0(i8* %v2_8cc0, i32 %v1_8cb4)
  store i32 %v3_8cc0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8cc4 = icmp slt i32 %v3_8cc0, 0
  store i1 %v1_8cc4, i1* %cpsr_n.global-to-local, align 1
  %v2_8cc4 = icmp eq i32 %v3_8cc0, 0
  store i1 %v2_8cc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8cc4, label %dec_label_pc_960c, label %dec_label_pc_8ccc

dec_label_pc_8ccc:                                ; preds = %dec_label_pc_8cb4, %dec_label_pc_960c
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_8cd0 = load i32, i32* @r6, align 4
  %v1_8cd0 = add i32 %v0_8cd0, -1431
  %v2_8cd0 = inttoptr i32 %v1_8cd0 to i32*
  %v3_8cd0 = load i32, i32* %v2_8cd0, align 4
  store i32 %v3_8cd0, i32* @r4, align 4
  %v2_8cd4 = call i32 @function_12ad0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r1.global-to-local, align 4
  store i32 %v2_8cd4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8ce4 = load i32, i32* @r4, align 4
  store i32 %v0_8ce4, i32* %r0.global-to-local, align 4
  %v5_8ce8 = call i32 @function_13d00(i32 %v0_8ce4, i32* %v4_8ce8, i32 %v2_8cd4, i32 16384)
  store i32 %v5_8ce8, i32* %r0.global-to-local, align 4
  %v0_8cec = load i32, i32* @r6, align 4
  %v1_8cec = add i32 %v0_8cec, -1431
  %v2_8cec = inttoptr i32 %v1_8cec to i32*
  %v3_8cec = load i32, i32* %v2_8cec, align 4
  store i32 %v3_8cec, i32* %r0.global-to-local, align 4
  %v3_8cf4 = udiv i32 %v3_8cec, 32
  %v3_8cf8 = mul nuw nsw i32 %v3_8cf4, 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8d00 = add i32 %v3_8cf8, %v2_8748
  store i32 %v2_8d00, i32* %r3.global-to-local, align 4
  %v1_8d04 = add i32 %v2_8d00, -164
  %v2_8d04 = inttoptr i32 %v1_8d04 to i32*
  %v3_8d04 = load i32, i32* %v2_8d04, align 4
  %v1_8d08 = urem i32 %v3_8cec, 32
  %v1_8d0c = load i32, i32* %fp.global-to-local, align 4
  %v7_8d0c = shl i32 %v1_8d0c, %v1_8d08
  %v8_8d0c = or i32 %v7_8d0c, %v3_8d04
  store i32 %v8_8d0c, i32* %r2.global-to-local, align 4
  %v0_8d10 = load i32, i32* @sl, align 4
  %v2_8d10 = sub i32 %v0_8d10, %v3_8cec
  %v3_8d10 = icmp uge i32 %v0_8d10, %v3_8cec
  store i1 %v3_8d10, i1* %cpsr_c.global-to-local, align 1
  %v4_8d10 = xor i32 %v0_8d10, %v3_8cec
  %v5_8d10 = xor i32 %v2_8d10, %v0_8d10
  %v6_8d10 = and i32 %v5_8d10, %v4_8d10
  %v7_8d10 = icmp slt i32 %v6_8d10, 0
  store i1 %v7_8d10, i1* %cpsr_v.global-to-local, align 1
  %v8_8d10 = icmp slt i32 %v2_8d10, 0
  store i1 %v8_8d10, i1* %cpsr_n.global-to-local, align 1
  %v9_8d10 = icmp eq i32 %v0_8d10, %v3_8cec
  store i1 %v9_8d10, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r1.global-to-local, align 4
  store i32 %v8_8d0c, i32* %v2_8d04, align 4
  %v0_8d1c = load i32, i32* %sb.global-to-local, align 4
  %v1_8d1c = load i32, i32* @r6, align 4
  %v2_8d1c = add i32 %v1_8d1c, -1419
  %v3_8d1c = inttoptr i32 %v2_8d1c to i32*
  store i32 %v0_8d1c, i32* %v3_8d1c, align 4
  %v0_8d20 = load i32, i32* %r1.global-to-local, align 4
  %v1_8d20 = trunc i32 %v0_8d20 to i8
  %v2_8d20 = load i32, i32* @r6, align 4
  %v3_8d20 = add i32 %v2_8d20, -1427
  %v4_8d20 = inttoptr i32 %v3_8d20 to i8*
  store i8 %v1_8d20, i8* %v4_8d20, align 1
  %v0_8d24 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_8d24 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_8d24 = xor i1 %v0_8d24, %v1_8d24
  br i1 %v2_8d24, label %dec_label_pc_8d28, label %dec_label_pc_8630

dec_label_pc_8d28:                                ; preds = %dec_label_pc_8ccc
  %v0_8d28 = load i32, i32* %r0.global-to-local, align 4
  %v1_8d28 = add i32 %v0_8d28, 1
  store i32 %v1_8d28, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_8d30:                                ; preds = %dec_label_pc_8608
  %v1_8d30 = add i32 %v3_8900, -1431
  %v2_8d30 = inttoptr i32 %v1_8d30 to i32*
  %v3_8d30 = load i32, i32* %v2_8d30, align 4
  store i32 %v3_8d30, i32* %r0.global-to-local, align 4
  %v3_8d38 = udiv i32 %v3_8d30, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8d3c = mul nuw nsw i32 %v3_8d38, 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_8d44 = add i32 %v3_8d3c, %v2_8748
  store i32 %v2_8d44, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_8d48:                                ; preds = %.thread24, %.thread35, %dec_label_pc_8d30
  %v1_8d54 = phi i32 [ %v4_85ec, %.thread35 ], [ %v4_85cc, %.thread24 ], [ %v3_8d30, %dec_label_pc_8d30 ]
  %v1_8d58 = phi i32 [ %v3_8600, %.thread35 ], [ %v3_85e0, %.thread24 ], [ %v2_8d44, %dec_label_pc_8d30 ]
  %v1_8d48 = add i32 %v1_8d58, -164
  %v2_8d48 = inttoptr i32 %v1_8d48 to i32*
  %v3_8d48 = load i32, i32* %v2_8d48, align 4
  %v1_8d4c = urem i32 %v1_8d54, 32
  store i32 %v1_8d4c, i32* %r1.global-to-local, align 4
  %v1_8d50 = load i32, i32* %fp.global-to-local, align 4
  %v7_8d50 = shl i32 %v1_8d50, %v1_8d4c
  %v8_8d50 = or i32 %v7_8d50, %v3_8d48
  store i32 %v8_8d50, i32* %r2.global-to-local, align 4
  %v0_8d54 = load i32, i32* @sl, align 4
  %v2_8d54 = sub i32 %v0_8d54, %v1_8d54
  %v3_8d54 = icmp uge i32 %v0_8d54, %v1_8d54
  store i1 %v3_8d54, i1* %cpsr_c.global-to-local, align 1
  %v4_8d54 = xor i32 %v0_8d54, %v1_8d54
  %v5_8d54 = xor i32 %v2_8d54, %v0_8d54
  %v6_8d54 = and i32 %v5_8d54, %v4_8d54
  %v7_8d54 = icmp slt i32 %v6_8d54, 0
  store i1 %v7_8d54, i1* %cpsr_v.global-to-local, align 1
  %v8_8d54 = icmp slt i32 %v2_8d54, 0
  store i1 %v8_8d54, i1* %cpsr_n.global-to-local, align 1
  %v9_8d54 = icmp eq i32 %v0_8d54, %v1_8d54
  store i1 %v9_8d54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8d50, i32* %v2_8d48, align 4
  %v2_8d5c = xor i1 %v8_8d54, %v7_8d54
  br i1 %v2_8d5c, label %dec_label_pc_8d60, label %dec_label_pc_8630

dec_label_pc_8d60:                                ; preds = %dec_label_pc_8d48
  %v0_8d60 = load i32, i32* %r0.global-to-local, align 4
  %v1_8d60 = add i32 %v0_8d60, 1
  store i32 %v1_8d60, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_8d68:                                ; preds = %dec_label_pc_85b8
  %v1_8d68 = add i32 %v3_8900, -1423
  %v2_8d68 = inttoptr i32 %v1_8d68 to i32*
  %v3_8d68 = load i32, i32* %v2_8d68, align 4
  %v1_8d6c = load i32, i32* %sb.global-to-local, align 4
  %v2_8d6c = sub i32 %v1_8d6c, %v3_8d68
  store i32 %v2_8d6c, i32* %r3.global-to-local, align 4
  %v1_8d70 = add i32 %v2_8d6c, -30
  %v2_8d70 = icmp ugt i32 %v2_8d6c, 29
  store i1 %v2_8d70, i1* %cpsr_c.global-to-local, align 1
  %v3_8d70 = sub i32 29, %v2_8d6c
  %v4_8d70 = and i32 %v3_8d70, %v2_8d6c
  %v5_8d70 = icmp slt i32 %v4_8d70, 0
  store i1 %v5_8d70, i1* %cpsr_v.global-to-local, align 1
  %v6_8d70 = icmp slt i32 %v1_8d70, 0
  store i1 %v6_8d70, i1* %cpsr_n.global-to-local, align 1
  %v7_8d70 = icmp eq i32 %v2_8d6c, 30
  store i1 %v7_8d70, i1* %cpsr_z.global-to-local, align 1
  %v2_8d74 = xor i1 %v7_8d70, true
  %v3_8d74 = and i1 %v2_8d70, %v2_8d74
  br i1 %v3_8d74, label %dec_label_pc_8618, label %dec_label_pc_8d78

dec_label_pc_8d78:                                ; preds = %dec_label_pc_8d68
  %v1_8d78 = add i32 %v3_8900, -1431
  %v2_8d78 = inttoptr i32 %v1_8d78 to i32*
  %v3_8d78 = load i32, i32* %v2_8d78, align 4
  store i32 %v3_8d78, i32* %r0.global-to-local, align 4
  %v3_8d80 = udiv i32 %v3_8d78, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8d84 = mul nuw nsw i32 %v3_8d80, 4
  store i32 %v3_8d84, i32* %r3.global-to-local, align 4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_8750

dec_label_pc_8dd0:                                ; preds = %dec_label_pc_881c
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  %v2_8dd8 = call i32 @function_12b70(i32 %v2_8280, i32 10240)
  store i32 %v2_8dd8, i32* %r0.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_8de4 = load i32, i32* @r8, align 4
  %v1_8de4 = add i32 %v0_8de4, -1456
  %v2_8de4 = inttoptr i32 %v1_8de4 to i32*
  %v3_8de4 = load i32, i32* %v2_8de4, align 4
  store i32 %v3_8de4, i32* %r0.global-to-local, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v5_8df0 = call i32 @function_13ca0(i32 %v3_8de4, i32* nonnull %stack_var_-20809, i32 10240, i32 16386)
  store i32 %v5_8df0, i32* %r0.global-to-local, align 4
  store i32 %v5_8df0, i32* %fp.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8df8 = icmp slt i32 %v5_8df0, 0
  store i1 %v1_8df8, i1* %cpsr_n.global-to-local, align 1
  %v2_8df8 = icmp eq i32 %v5_8df0, 0
  store i1 %v2_8df8, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  %tmp210 = icmp slt i32 %v5_8df0, 1
  br i1 %tmp210, label %dec_label_pc_9a7c, label %dec_label_pc_8e04

dec_label_pc_8e04:                                ; preds = %dec_label_pc_8dd0
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 %v5_8df0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15d74.39 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_8e14 = call i32 @function_12b94(i32 %v2_8280, i32 %v5_8df0, i32 ptrtoint ([5 x i8]* @global_var_15d74.39 to i32), i32 4)
  store i32 %v5_8e14, i32* %r0.global-to-local, align 4
  %v1_8e18 = add i32 %v5_8e14, 1
  %v2_8e18 = icmp eq i32 %v5_8e14, -1
  store i1 %v2_8e18, i1* %cpsr_c.global-to-local, align 1
  %v3_8e18 = sub i32 0, %v5_8e14
  %v4_8e18 = and i32 %v1_8e18, %v3_8e18
  %v5_8e18 = icmp slt i32 %v4_8e18, 0
  store i1 %v5_8e18, i1* %cpsr_v.global-to-local, align 1
  %v6_8e18 = icmp slt i32 %v1_8e18, 0
  store i1 %v6_8e18, i1* %cpsr_n.global-to-local, align 1
  %v7_8e18 = icmp eq i32 %v1_8e18, 0
  store i1 %v7_8e18, i1* %cpsr_z.global-to-local, align 1
  %v0_9914 = load i32, i32* %fp.global-to-local, align 4
  br i1 %v7_8e18, label %dec_label_pc_9914, label %dec_label_pc_8e20

dec_label_pc_8e20:                                ; preds = %dec_label_pc_8e04, %dec_label_pc_9914
  store i32 ptrtoint ([5 x i8]* @global_var_15d74.39 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v0_9914, i32* %r1.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v5_8e30 = call i32 @function_12b94(i32 %v2_8280, i32 %v0_9914, i32 ptrtoint ([5 x i8]* @global_var_15d74.39 to i32), i32 4)
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_8e3c = add i32 %v5_8e30, %v2_8748
  store i32 %v2_8e3c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v3_8e44 = load i32, i32* @r6, align 4
  %v4_8e44 = add i32 %v3_8e44, %v2_8e3c
  %v5_8e44 = inttoptr i32 %v4_8e44 to i8*
  store i8 0, i8* %v5_8e44, align 1
  %v0_8e48 = load i32, i32* @r5, align 4
  store i32 %v0_8e48, i32* %r1.global-to-local, align 4
  store i32 46, i32* %r0.global-to-local, align 4
  %v2_8e50 = inttoptr i32 %v0_8e48 to i32*
  %v3_8e50 = call i32 @function_120c0(i32 46, i32* %v2_8e50)
  %v0_8e54 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8e54, i32* @r1, align 4
  store i32 %v3_8e50, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8e60 = call i32 @function_12e24(i8* %tmp199, i32 %v0_8e54, i32 %v3_8e50)
  store i32 %v4_8e60, i32* %r0.global-to-local, align 4
  %v1_8e64 = add i32 %v4_8e60, 1
  %v2_8e64 = icmp eq i32 %v4_8e60, -1
  store i1 %v2_8e64, i1* %cpsr_c.global-to-local, align 1
  %v3_8e64 = sub i32 0, %v4_8e60
  %v4_8e64 = and i32 %v1_8e64, %v3_8e64
  %v5_8e64 = icmp slt i32 %v4_8e64, 0
  store i1 %v5_8e64, i1* %cpsr_v.global-to-local, align 1
  %v6_8e64 = icmp slt i32 %v1_8e64, 0
  store i1 %v6_8e64, i1* %cpsr_n.global-to-local, align 1
  %v7_8e64 = icmp eq i32 %v1_8e64, 0
  store i1 %v7_8e64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e64, label %.thread45, label %bb211

bb211:                                            ; preds = %dec_label_pc_8e20
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_8e6c = load i32, i32* @r8, align 4
  %v3_8e6c = add i32 %v2_8e6c, -4
  %v4_8e6c = inttoptr i32 %v3_8e6c to i32*
  store i32 2, i32* %v4_8e6c, align 4
  br label %.thread45

.thread45:                                        ; preds = %dec_label_pc_8e20, %bb211
  %v0_8e70 = load i32, i32* @r5, align 4
  store i32 %v0_8e70, i32* %r1.global-to-local, align 4
  store i32 45, i32* %r0.global-to-local, align 4
  %v2_8e78 = inttoptr i32 %v0_8e70 to i32*
  %v3_8e78 = call i32 @function_120c0(i32 45, i32* %v2_8e78)
  %v0_8e7c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8e7c, i32* @r1, align 4
  store i32 %v3_8e78, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8e88 = call i32 @function_12e24(i8* %tmp199, i32 %v0_8e7c, i32 %v3_8e78)
  store i32 %v4_8e88, i32* %r0.global-to-local, align 4
  %v1_8e8c = add i32 %v4_8e88, 1
  %v2_8e8c = icmp eq i32 %v4_8e88, -1
  store i1 %v2_8e8c, i1* %cpsr_c.global-to-local, align 1
  %v3_8e8c = sub i32 0, %v4_8e88
  %v4_8e8c = and i32 %v1_8e8c, %v3_8e8c
  %v5_8e8c = icmp slt i32 %v4_8e8c, 0
  store i1 %v5_8e8c, i1* %cpsr_v.global-to-local, align 1
  %v6_8e8c = icmp slt i32 %v1_8e8c, 0
  store i1 %v6_8e8c, i1* %cpsr_n.global-to-local, align 1
  %v7_8e8c = icmp eq i32 %v1_8e8c, 0
  store i1 %v7_8e8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e8c, label %.thread46, label %bb212

bb212:                                            ; preds = %.thread45
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_8e94 = load i32, i32* @r8, align 4
  %v3_8e94 = add i32 %v2_8e94, -4
  %v4_8e94 = inttoptr i32 %v3_8e94 to i32*
  store i32 1, i32* %v4_8e94, align 4
  br label %.thread46

.thread46:                                        ; preds = %.thread45, %bb212
  %v0_8e98 = load i32, i32* @r5, align 4
  store i32 %v0_8e98, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_8ea0 = load i32, i32* @r8, align 4
  %v2_8ea0 = inttoptr i32 %v1_8ea0 to i32*
  store i32 %v0_8e98, i32* %v2_8ea0, align 4
  %v2_8ea4 = inttoptr i32 %v0_8e98 to i32*
  %v3_8ea4 = call i32 @function_120c0(i32 44, i32* %v2_8ea4)
  %v0_8ea8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8ea8, i32* @r1, align 4
  store i32 %v3_8ea4, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8eb4 = call i32 @function_12e24(i8* %tmp199, i32 %v0_8ea8, i32 %v3_8ea4)
  store i32 %v4_8eb4, i32* %r0.global-to-local, align 4
  %v1_8eb8 = add i32 %v4_8eb4, 1
  %v2_8eb8 = icmp eq i32 %v4_8eb4, -1
  store i1 %v2_8eb8, i1* %cpsr_c.global-to-local, align 1
  %v3_8eb8 = sub i32 0, %v4_8eb4
  %v4_8eb8 = and i32 %v1_8eb8, %v3_8eb8
  %v5_8eb8 = icmp slt i32 %v4_8eb8, 0
  store i1 %v5_8eb8, i1* %cpsr_v.global-to-local, align 1
  %v6_8eb8 = icmp slt i32 %v1_8eb8, 0
  store i1 %v6_8eb8, i1* %cpsr_n.global-to-local, align 1
  %v7_8eb8 = icmp eq i32 %v1_8eb8, 0
  store i1 %v7_8eb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8eb8, label %.thread47, label %dec_label_pc_8ec0

dec_label_pc_8ec0:                                ; preds = %.thread46
  %v0_8ec0 = load i32, i32* @r5, align 4
  store i32 %v0_8ec0, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v2_8ec8 = inttoptr i32 %v0_8ec0 to i32*
  %v3_8ec8 = call i32 @function_120c0(i32 44, i32* %v2_8ec8)
  %v0_8ecc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8ecc, i32* @r1, align 4
  store i32 %v3_8ec8, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8ed8 = call i32 @function_12e24(i8* %tmp199, i32 %v0_8ecc, i32 %v3_8ec8)
  store i32 %v4_8ed8, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8ee4 = add i32 %v4_8ed8, %v2_8748
  store i32 %v2_8ee4, i32* %r3.global-to-local, align 4
  %v1_8ee8 = load i32, i32* @r6, align 4
  %v2_8ee8 = add i32 %v1_8ee8, %v2_8ee4
  %v3_8ee8 = inttoptr i32 %v2_8ee8 to i8*
  %v4_8ee8 = load i8, i8* %v3_8ee8, align 1
  %v2_8ef0 = icmp ugt i8 %v4_8ee8, 31
  store i1 %v2_8ef0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8ef0 = icmp ult i8 %v4_8ee8, 32
  store i1 %v6_8ef0, i1* %cpsr_n.global-to-local, align 1
  %v7_8ef0 = icmp eq i8 %v4_8ee8, 32
  store i1 %v7_8ef0, i1* %cpsr_z.global-to-local, align 1
  %v2_8ef8 = zext i1 %v7_8ef0 to i32
  %v2_8ef8.v4_8ed8 = add i32 %v2_8ef8, %v4_8ed8
  store i32 %v2_8ef8.v4_8ed8, i32* @r4, align 4
  %v2_8efc = add i32 %v2_8ef8.v4_8ed8, %v2_8280
  store i32 %v2_8efc, i32* @r6, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8efc, i32* %r0.global-to-local, align 4
  %v1_8f08 = load i32, i32* %fp.global-to-local, align 4
  %v2_8f08 = sub i32 %v1_8f08, %v2_8ef8.v4_8ed8
  store i32 %v2_8f08, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_8f10 = call i32 @function_12b94(i32 %v2_8efc, i32 %v2_8f08, i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32 2)
  store i32 %v5_8f10, i32* %r0.global-to-local, align 4
  %v1_8f14 = add i32 %v5_8f10, 1
  %v2_8f14 = icmp eq i32 %v5_8f10, -1
  store i1 %v2_8f14, i1* %cpsr_c.global-to-local, align 1
  %v3_8f14 = sub i32 0, %v5_8f10
  %v4_8f14 = and i32 %v1_8f14, %v3_8f14
  %v5_8f14 = icmp slt i32 %v4_8f14, 0
  store i1 %v5_8f14, i1* %cpsr_v.global-to-local, align 1
  %v6_8f14 = icmp slt i32 %v1_8f14, 0
  store i1 %v6_8f14, i1* %cpsr_n.global-to-local, align 1
  %v7_8f14 = icmp eq i32 %v1_8f14, 0
  store i1 %v7_8f14, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_8f10, i32* %r2.global-to-local, align 4
  br i1 %v7_8f14, label %.thread47, label %dec_label_pc_8f20

dec_label_pc_8f20:                                ; preds = %dec_label_pc_8ec0
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_8f28 = load i32, i32* @r4, align 4
  %v2_8f28 = add i32 %v1_8f28, %v2_8748
  %v1_8f2c = add i32 %v5_8f10, -1
  %v2_8f2c = icmp ne i32 %v5_8f10, 0
  store i1 %v2_8f2c, i1* %cpsr_c.global-to-local, align 1
  %v3_8f2c = sub i32 0, %v5_8f10
  %v4_8f2c = and i32 %v5_8f10, %v3_8f2c
  %v5_8f2c = icmp slt i32 %v4_8f2c, 0
  store i1 %v5_8f2c, i1* %cpsr_v.global-to-local, align 1
  %v6_8f2c = icmp slt i32 %v1_8f2c, 0
  store i1 %v6_8f2c, i1* %cpsr_n.global-to-local, align 1
  %v7_8f2c = icmp eq i32 %v5_8f10, 1
  store i1 %v7_8f2c, i1* %cpsr_z.global-to-local, align 1
  %v1_8f30 = add i32 %v2_8f28, -20736
  store i32 %v1_8f30, i32* %r3.global-to-local, align 4
  %v7_8f34 = icmp sgt i32 %v5_8f10, 1
  br i1 %v7_8f34, label %bb213, label %bb214

bb213:                                            ; preds = %dec_label_pc_8f20
  %v9_8f34 = add i32 %v5_8f10, -2
  store i32 %v9_8f34, i32* %r2.global-to-local, align 4
  br label %bb214

bb214:                                            ; preds = %dec_label_pc_8f20, %bb213
  %v3_8f3c = phi i32 [ %v5_8f10, %dec_label_pc_8f20 ], [ %v9_8f34, %bb213 ]
  %v1_8f38 = add i32 %v2_8f28, -20773
  store i32 %v1_8f38, i32* %r3.global-to-local, align 4
  %v0_8f3c = load i32, i32* @r5, align 4
  %v1_8f3c = trunc i32 %v0_8f3c to i8
  %v4_8f3c = add i32 %v3_8f3c, %v1_8f38
  %v5_8f3c = inttoptr i32 %v4_8f3c to i8*
  store i8 %v1_8f3c, i8* %v5_8f3c, align 1
  %v0_8f40 = load i32, i32* @r6, align 4
  store i32 %v0_8f40, i32* %r0.global-to-local, align 4
  %v1_8f44 = inttoptr i32 %v0_8f40 to i8*
  %v2_8f44 = call i32 @function_12ad0(i8* %v1_8f44)
  %v0_8f48 = load i32, i32* @r5, align 4
  store i32 %v0_8f48, i32* %r1.global-to-local, align 4
  store i32 %v2_8f44, i32* @r4, align 4
  store i32 43, i32* %r0.global-to-local, align 4
  %v2_8f54 = inttoptr i32 %v0_8f48 to i32*
  %v3_8f54 = call i32 @function_120c0(i32 43, i32* %v2_8f54)
  %v0_8f58 = load i32, i32* @r4, align 4
  store i32 %v0_8f58, i32* @r1, align 4
  store i32 %v3_8f54, i32* %r2.global-to-local, align 4
  %v0_8f60 = load i32, i32* @r6, align 4
  store i32 %v0_8f60, i32* %r0.global-to-local, align 4
  %v3_8f64 = inttoptr i32 %v0_8f60 to i8*
  %v4_8f64 = call i32 @function_12e24(i8* %v3_8f64, i32 %v0_8f58, i32 %v3_8f54)
  store i32 %v4_8f64, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8f68 = icmp slt i32 %v4_8f64, 0
  store i1 %v1_8f68, i1* %cpsr_n.global-to-local, align 1
  %v2_8f68 = icmp eq i32 %v4_8f64, 0
  store i1 %v2_8f68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f68, label %.thread47, label %bb215

bb215:                                            ; preds = %bb214
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_8f70 = load i32, i32* @r8, align 4
  %v3_8f70 = inttoptr i32 %v2_8f70 to i32*
  store i32 1, i32* %v3_8f70, align 4
  br label %.thread47

.thread47:                                        ; preds = %bb214, %dec_label_pc_8ec0, %.thread46, %bb215
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_8f80 = load i32, i32* @r8, align 4
  %v2_8f80 = add i32 %v1_8f80, 4
  %v3_8f80 = inttoptr i32 %v2_8f80 to i32*
  store i32 0, i32* %v3_8f80, align 4
  %v3_8f84 = call i32 @function_120c0(i32 41, i32* null)
  %v0_8f88 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8f88, i32* @r1, align 4
  store i32 %v3_8f84, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8f94 = call i32 @function_12e24(i8* %tmp199, i32 %v0_8f88, i32 %v3_8f84)
  store i32 %v4_8f94, i32* %r0.global-to-local, align 4
  %v1_8f9c = add i32 %v4_8f94, 1
  %v2_8f9c = icmp eq i32 %v4_8f94, -1
  store i1 %v2_8f9c, i1* %cpsr_c.global-to-local, align 1
  %v3_8f9c = sub i32 0, %v4_8f94
  %v4_8f9c = and i32 %v1_8f9c, %v3_8f9c
  %v5_8f9c = icmp slt i32 %v4_8f9c, 0
  store i1 %v5_8f9c, i1* %cpsr_v.global-to-local, align 1
  %v6_8f9c = icmp slt i32 %v1_8f9c, 0
  store i1 %v6_8f9c, i1* %cpsr_n.global-to-local, align 1
  %v7_8f9c = icmp eq i32 %v1_8f9c, 0
  store i1 %v7_8f9c, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_8f9c, label %.thread48, label %dec_label_pc_8fa8

dec_label_pc_8fa8:                                ; preds = %.thread47
  %v0_8fa8 = load i32, i32* @r6, align 4
  store i32 %v0_8fa8, i32* %r1.global-to-local, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v2_8fb0 = inttoptr i32 %v0_8fa8 to i32*
  %v3_8fb0 = call i32 @function_120c0(i32 41, i32* %v2_8fb0)
  %v0_8fb4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8fb4, i32* @r1, align 4
  store i32 %v3_8fb0, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8fc0 = call i32 @function_12e24(i8* %tmp199, i32 %v0_8fb4, i32 %v3_8fb0)
  store i32 %v4_8fc0, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8fcc = add i32 %v4_8fc0, %v2_8748
  store i32 %v2_8fcc, i32* %r3.global-to-local, align 4
  %v1_8fd0 = load i32, i32* @r5, align 4
  %v2_8fd0 = add i32 %v1_8fd0, %v2_8fcc
  %v3_8fd0 = inttoptr i32 %v2_8fd0 to i8*
  %v4_8fd0 = load i8, i8* %v3_8fd0, align 1
  %v2_8fd8 = icmp ugt i8 %v4_8fd0, 31
  store i1 %v2_8fd8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8fd8 = icmp ult i8 %v4_8fd0, 32
  store i1 %v6_8fd8, i1* %cpsr_n.global-to-local, align 1
  %v7_8fd8 = icmp eq i8 %v4_8fd0, 32
  store i1 %v7_8fd8, i1* %cpsr_z.global-to-local, align 1
  %v2_8fe0 = zext i1 %v7_8fd8 to i32
  %v2_8fe0.v4_8fc0 = add i32 %v2_8fe0, %v4_8fc0
  store i32 %v2_8fe0.v4_8fc0, i32* @r4, align 4
  %v2_8fe4 = add i32 %v2_8fe0.v4_8fc0, %v2_8280
  store i32 %v2_8fe4, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8fe4, i32* %r0.global-to-local, align 4
  %v1_8ff0 = load i32, i32* %fp.global-to-local, align 4
  %v2_8ff0 = sub i32 %v1_8ff0, %v2_8fe0.v4_8fc0
  store i32 %v2_8ff0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_8ff8 = call i32 @function_12b94(i32 %v2_8fe4, i32 %v2_8ff0, i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32 2)
  store i32 %v5_8ff8, i32* %r0.global-to-local, align 4
  %v1_8ffc = add i32 %v5_8ff8, 1
  %v2_8ffc = icmp eq i32 %v5_8ff8, -1
  store i1 %v2_8ffc, i1* %cpsr_c.global-to-local, align 1
  %v3_8ffc = sub i32 0, %v5_8ff8
  %v4_8ffc = and i32 %v1_8ffc, %v3_8ffc
  %v5_8ffc = icmp slt i32 %v4_8ffc, 0
  store i1 %v5_8ffc, i1* %cpsr_v.global-to-local, align 1
  %v6_8ffc = icmp slt i32 %v1_8ffc, 0
  store i1 %v6_8ffc, i1* %cpsr_n.global-to-local, align 1
  %v7_8ffc = icmp eq i32 %v1_8ffc, 0
  store i1 %v7_8ffc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_8ff8, i32* %r2.global-to-local, align 4
  br i1 %v7_8ffc, label %.thread48, label %dec_label_pc_9008

dec_label_pc_9008:                                ; preds = %dec_label_pc_8fa8
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_9010 = load i32, i32* @r4, align 4
  %v2_9010 = add i32 %v1_9010, %v2_8748
  %v1_9014 = add i32 %v5_8ff8, -1
  %v2_9014 = icmp ne i32 %v5_8ff8, 0
  store i1 %v2_9014, i1* %cpsr_c.global-to-local, align 1
  %v3_9014 = sub i32 0, %v5_8ff8
  %v4_9014 = and i32 %v5_8ff8, %v3_9014
  %v5_9014 = icmp slt i32 %v4_9014, 0
  store i1 %v5_9014, i1* %cpsr_v.global-to-local, align 1
  %v6_9014 = icmp slt i32 %v1_9014, 0
  store i1 %v6_9014, i1* %cpsr_n.global-to-local, align 1
  %v7_9014 = icmp eq i32 %v5_8ff8, 1
  store i1 %v7_9014, i1* %cpsr_z.global-to-local, align 1
  %v1_9018 = add i32 %v2_9010, -20736
  store i32 %v1_9018, i32* %r3.global-to-local, align 4
  %v7_901c = icmp sgt i32 %v5_8ff8, 1
  br i1 %v7_901c, label %bb216, label %bb217

bb216:                                            ; preds = %dec_label_pc_9008
  %v9_901c = add i32 %v5_8ff8, -2
  store i32 %v9_901c, i32* %r2.global-to-local, align 4
  br label %bb217

bb217:                                            ; preds = %dec_label_pc_9008, %bb216
  %v3_9024 = phi i32 [ %v5_8ff8, %dec_label_pc_9008 ], [ %v9_901c, %bb216 ]
  %v1_9020 = add i32 %v2_9010, -20773
  store i32 %v1_9020, i32* %r3.global-to-local, align 4
  %v0_9024 = load i32, i32* @r6, align 4
  %v1_9024 = trunc i32 %v0_9024 to i8
  %v4_9024 = add i32 %v3_9024, %v1_9020
  %v5_9024 = inttoptr i32 %v4_9024 to i8*
  store i8 %v1_9024, i8* %v5_9024, align 1
  %v0_9028 = load i32, i32* @r5, align 4
  store i32 %v0_9028, i32* %r0.global-to-local, align 4
  %v1_902c = inttoptr i32 %v0_9028 to i8*
  %v2_902c = call i32 @function_12ad0(i8* %v1_902c)
  %v0_9030 = load i32, i32* @r6, align 4
  store i32 %v0_9030, i32* %r1.global-to-local, align 4
  store i32 %v2_902c, i32* @r4, align 4
  store i32 42, i32* %r0.global-to-local, align 4
  %v2_903c = inttoptr i32 %v0_9030 to i32*
  %v3_903c = call i32 @function_120c0(i32 42, i32* %v2_903c)
  %v0_9040 = load i32, i32* @r4, align 4
  store i32 %v0_9040, i32* @r1, align 4
  store i32 %v3_903c, i32* %r2.global-to-local, align 4
  %v0_9048 = load i32, i32* @r5, align 4
  store i32 %v0_9048, i32* %r0.global-to-local, align 4
  %v3_904c = inttoptr i32 %v0_9048 to i8*
  %v4_904c = call i32 @function_12e24(i8* %v3_904c, i32 %v0_9040, i32 %v3_903c)
  store i32 %v4_904c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9050 = icmp slt i32 %v4_904c, 0
  store i1 %v1_9050, i1* %cpsr_n.global-to-local, align 1
  %v2_9050 = icmp eq i32 %v4_904c, 0
  store i1 %v2_9050, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9050, label %.thread48, label %bb218

bb218:                                            ; preds = %bb217
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9058 = load i32, i32* @r8, align 4
  %v3_9058 = add i32 %v2_9058, 4
  %v4_9058 = inttoptr i32 %v3_9058 to i32*
  store i32 1, i32* %v4_9058, align 4
  br label %.thread48

.thread48:                                        ; preds = %bb217, %dec_label_pc_8fa8, %.thread47, %bb218
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v3_9064 = call i32 @function_120c0(i32 40, i32* null)
  %v0_9068 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9068, i32* @r1, align 4
  store i32 %v3_9064, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9074 = call i32 @function_12e24(i8* %tmp199, i32 %v0_9068, i32 %v3_9064)
  store i32 %v4_9074, i32* %r0.global-to-local, align 4
  %v1_9078 = add i32 %v4_9074, 1
  %v2_9078 = icmp eq i32 %v4_9074, -1
  store i1 %v2_9078, i1* %cpsr_c.global-to-local, align 1
  %v3_9078 = sub i32 0, %v4_9074
  %v4_9078 = and i32 %v1_9078, %v3_9078
  %v5_9078 = icmp slt i32 %v4_9078, 0
  store i1 %v5_9078, i1* %cpsr_v.global-to-local, align 1
  %v6_9078 = icmp slt i32 %v1_9078, 0
  store i1 %v6_9078, i1* %cpsr_n.global-to-local, align 1
  %v7_9078 = icmp eq i32 %v1_9078, 0
  store i1 %v7_9078, i1* %cpsr_z.global-to-local, align 1
  store i32 -20737, i32* %r5.global-to-local, align 4
  br i1 %v7_9078, label %.thread, label %dec_label_pc_9090

.thread:                                          ; preds = %.thread48
  store i32 -20773, i32* %r5.global-to-local, align 4
  %v2_9088 = load i32, i32* @r8, align 4
  %v3_9088 = add i32 %v2_9088, 8
  %v4_9088 = inttoptr i32 %v3_9088 to i32*
  store i32 0, i32* %v4_9088, align 4
  br label %dec_label_pc_9124

dec_label_pc_9090:                                ; preds = %.thread48
  store i32 -20773, i32* @r5, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v3_9098 = call i32 @function_120c0(i32 40, i32* null)
  %v0_909c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_909c, i32* @r1, align 4
  store i32 %v3_9098, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_90a8 = call i32 @function_12e24(i8* %tmp199, i32 %v0_909c, i32 %v3_9098)
  store i32 %v4_90a8, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_90b4 = add i32 %v4_90a8, %v2_8748
  store i32 %v2_90b4, i32* %r3.global-to-local, align 4
  %v1_90b8 = load i32, i32* @r5, align 4
  %v2_90b8 = add i32 %v1_90b8, %v2_90b4
  %v3_90b8 = inttoptr i32 %v2_90b8 to i8*
  %v4_90b8 = load i8, i8* %v3_90b8, align 1
  %v2_90c0 = icmp ugt i8 %v4_90b8, 31
  store i1 %v2_90c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_90c0 = icmp ult i8 %v4_90b8, 32
  store i1 %v6_90c0, i1* %cpsr_n.global-to-local, align 1
  %v7_90c0 = icmp eq i8 %v4_90b8, 32
  store i1 %v7_90c0, i1* %cpsr_z.global-to-local, align 1
  %v2_90c8 = zext i1 %v7_90c0 to i32
  %v2_90c8.v4_90a8 = add i32 %v2_90c8, %v4_90a8
  store i32 %v2_90c8.v4_90a8, i32* @r4, align 4
  %v2_90cc = add i32 %v2_90c8.v4_90a8, %v2_8280
  store i32 %v2_90cc, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_90cc, i32* %r0.global-to-local, align 4
  %v1_90d8 = load i32, i32* %fp.global-to-local, align 4
  %v2_90d8 = sub i32 %v1_90d8, %v2_90c8.v4_90a8
  store i32 %v2_90d8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_90e0 = call i32 @function_12b94(i32 %v2_90cc, i32 %v2_90d8, i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32 2)
  store i32 %v5_90e0, i32* %r0.global-to-local, align 4
  %v1_90e4 = add i32 %v5_90e0, 1
  %v2_90e4 = icmp eq i32 %v5_90e0, -1
  store i1 %v2_90e4, i1* %cpsr_c.global-to-local, align 1
  %v3_90e4 = sub i32 0, %v5_90e0
  %v4_90e4 = and i32 %v1_90e4, %v3_90e4
  %v5_90e4 = icmp slt i32 %v4_90e4, 0
  store i1 %v5_90e4, i1* %cpsr_v.global-to-local, align 1
  %v6_90e4 = icmp slt i32 %v1_90e4, 0
  store i1 %v6_90e4, i1* %cpsr_n.global-to-local, align 1
  %v7_90e4 = icmp eq i32 %v1_90e4, 0
  store i1 %v7_90e4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_90e0, i32* %r2.global-to-local, align 4
  br i1 %v7_90e4, label %dec_label_pc_9124, label %dec_label_pc_90f0

dec_label_pc_90f0:                                ; preds = %dec_label_pc_9090
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_90f8 = load i32, i32* @r4, align 4
  %v2_90f8 = add i32 %v1_90f8, %v2_8748
  %v1_90fc = add i32 %v5_90e0, -1
  %v2_90fc = icmp ne i32 %v5_90e0, 0
  store i1 %v2_90fc, i1* %cpsr_c.global-to-local, align 1
  %v3_90fc = sub i32 0, %v5_90e0
  %v4_90fc = and i32 %v5_90e0, %v3_90fc
  %v5_90fc = icmp slt i32 %v4_90fc, 0
  store i1 %v5_90fc, i1* %cpsr_v.global-to-local, align 1
  %v6_90fc = icmp slt i32 %v1_90fc, 0
  store i1 %v6_90fc, i1* %cpsr_n.global-to-local, align 1
  %v7_90fc = icmp eq i32 %v5_90e0, 1
  store i1 %v7_90fc, i1* %cpsr_z.global-to-local, align 1
  %v1_9100 = add i32 %v2_90f8, -20736
  store i32 %v1_9100, i32* %r3.global-to-local, align 4
  %v7_9104 = icmp sgt i32 %v5_90e0, 1
  br i1 %v7_9104, label %bb219, label %bb220

bb219:                                            ; preds = %dec_label_pc_90f0
  %v9_9104 = add i32 %v5_90e0, -2
  store i32 %v9_9104, i32* %r2.global-to-local, align 4
  br label %bb220

bb220:                                            ; preds = %dec_label_pc_90f0, %bb219
  %v3_9118 = phi i32 [ %v5_90e0, %dec_label_pc_90f0 ], [ %v9_9104, %bb219 ]
  %v1_9108 = add i32 %v2_90f8, -20773
  store i32 %v1_9108, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v0_9110 = load i32, i32* @r5, align 4
  store i32 %v0_9110, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_9118 = add i32 %v3_9118, %v1_9108
  %v5_9118 = inttoptr i32 %v4_9118 to i8*
  store i8 0, i8* %v5_9118, align 1
  %v2_911c = inttoptr i32 %v0_9110 to i8*
  %v3_911c = call i32 @function_12bfc(i8* %v2_911c, i32 10)
  store i32 %v3_911c, i32* %r0.global-to-local, align 4
  %v1_9120 = load i32, i32* @r8, align 4
  %v2_9120 = add i32 %v1_9120, 8
  %v3_9120 = inttoptr i32 %v2_9120 to i32*
  store i32 %v3_911c, i32* %v3_9120, align 4
  br label %dec_label_pc_9124

dec_label_pc_9124:                                ; preds = %.thread, %dec_label_pc_9090, %bb220
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9128:                                ; preds = %dec_label_pc_92fc, %dec_label_pc_927c, %dec_label_pc_9124
  %v1_9134 = phi i32 [ 0, %dec_label_pc_9124 ], [ %v0_927c, %dec_label_pc_927c ], [ %v1_9134.pre.pre, %dec_label_pc_92fc ]
  store i32 %v2_8280, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v2_9134 = add i32 %v1_9134, %v2_8280
  store i32 %v2_9134, i32* @r4, align 4
  %v3_9138 = call i32 @function_120c0(i32 39, i32* null)
  %v0_913c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_913c, i32* @r1, align 4
  store i32 %v3_9138, i32* %r2.global-to-local, align 4
  %v0_9144 = load i32, i32* @r4, align 4
  store i32 %v0_9144, i32* %r0.global-to-local, align 4
  %v3_9148 = inttoptr i32 %v0_9144 to i8*
  %v4_9148 = call i32 @function_12e24(i8* %v3_9148, i32 %v0_913c, i32 %v3_9138)
  store i32 %v4_9148, i32* %r0.global-to-local, align 4
  %v1_9150 = add i32 %v4_9148, 1
  %v2_9150 = icmp eq i32 %v4_9148, -1
  store i1 %v2_9150, i1* %cpsr_c.global-to-local, align 1
  %v3_9150 = sub i32 0, %v4_9148
  %v4_9150 = and i32 %v1_9150, %v3_9150
  %v5_9150 = icmp slt i32 %v4_9150, 0
  store i1 %v5_9150, i1* %cpsr_v.global-to-local, align 1
  %v6_9150 = icmp slt i32 %v1_9150, 0
  store i1 %v6_9150, i1* %cpsr_n.global-to-local, align 1
  %v7_9150 = icmp eq i32 %v1_9150, 0
  store i1 %v7_9150, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  br i1 %v7_9150, label %dec_label_pc_9328, label %dec_label_pc_915c

dec_label_pc_915c:                                ; preds = %dec_label_pc_9128
  %v0_915c = load i32, i32* @r8, align 4
  %v1_915c = add i32 %v0_915c, 12
  %v2_915c = inttoptr i32 %v1_915c to i32*
  %v3_915c = load i32, i32* %v2_915c, align 4
  store i32 %v3_915c, i32* %r3.global-to-local, align 4
  %v1_9160 = add i32 %v3_915c, -4
  %v2_9160 = icmp ugt i32 %v3_915c, 3
  store i1 %v2_9160, i1* %cpsr_c.global-to-local, align 1
  %v3_9160 = sub i32 3, %v3_915c
  %v4_9160 = and i32 %v3_9160, %v3_915c
  %v5_9160 = icmp slt i32 %v4_9160, 0
  store i1 %v5_9160, i1* %cpsr_v.global-to-local, align 1
  %v6_9160 = icmp slt i32 %v1_9160, 0
  store i1 %v6_9160, i1* %cpsr_n.global-to-local, align 1
  %v7_9160 = icmp eq i32 %v3_915c, 4
  store i1 %v7_9160, i1* %cpsr_z.global-to-local, align 1
  %v8_9164 = icmp sgt i32 %v3_915c, 4
  br i1 %v8_9164, label %dec_label_pc_9328, label %dec_label_pc_9168

dec_label_pc_9168:                                ; preds = %dec_label_pc_915c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v3_9170 = call i32 @function_120c0(i32 39, i32* null)
  %v0_9174 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9174, i32* @r1, align 4
  store i32 %v3_9170, i32* %r2.global-to-local, align 4
  %v0_917c = load i32, i32* @r4, align 4
  store i32 %v0_917c, i32* %r0.global-to-local, align 4
  %v3_9180 = inttoptr i32 %v0_917c to i8*
  %v4_9180 = call i32 @function_12e24(i8* %v3_9180, i32 %v0_9174, i32 %v3_9170)
  store i32 %v4_9180, i32* %r0.global-to-local, align 4
  %v0_9188 = load i32, i32* @r5, align 4
  %v2_9188 = add i32 %v0_9188, %v4_9180
  store i32 %v2_9188, i32* @sl, align 4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v2_9190 = add i32 %v2_9188, %v2_8748
  store i32 %v2_9190, i32* %r3.global-to-local, align 4
  %v1_9194 = load i32, i32* @r6, align 4
  %v2_9194 = add i32 %v1_9194, %v2_9190
  %v3_9194 = inttoptr i32 %v2_9194 to i8*
  %v4_9194 = load i8, i8* %v3_9194, align 1
  %v6_9194 = zext i8 %v4_9194 to i32
  store i32 %v6_9194, i32* %r2.global-to-local, align 4
  %v2_9198 = icmp ugt i8 %v4_9194, 31
  store i1 %v2_9198, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9198 = icmp ult i8 %v4_9194, 32
  store i1 %v6_9198, i1* %cpsr_n.global-to-local, align 1
  %v7_9198 = icmp eq i8 %v4_9194, 32
  store i1 %v7_9198, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9198, label %bb221, label %bb222

bb221:                                            ; preds = %dec_label_pc_9168
  %v2_919c = add i32 %v4_9180, 1
  store i32 %v2_919c, i32* %r0.global-to-local, align 4
  br label %bb222

bb222:                                            ; preds = %dec_label_pc_9168, %bb221
  %v2_91ac = phi i32 [ %v4_9180, %dec_label_pc_9168 ], [ %v2_919c, %bb221 ]
  %v1_91a0 = load i32, i32* %fp.global-to-local, align 4
  %v2_91a0 = sub i32 %v1_91a0, %v0_9188
  store i32 %v2_91a0, i32* %r3.global-to-local, align 4
  %v2_91a4 = sub i32 %v2_91a0, %v2_91ac
  store i32 %v2_91a4, i32* @r7, align 4
  %v0_91a8 = load i32, i32* @r4, align 4
  %v2_91a8 = add i32 %v0_91a8, %v2_91ac
  store i32 %v2_91a8, i32* @r6, align 4
  br i1 %v7_9198, label %bb223, label %bb224

bb223:                                            ; preds = %bb222
  %v3_91ac = add i32 %v2_91ac, %v0_9188
  store i32 %v3_91ac, i32* @sl, align 4
  br label %bb224

bb224:                                            ; preds = %bb222, %bb223
  store i32 %v2_91a4, i32* %r1.global-to-local, align 4
  store i32 %v2_91a8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_91c0 = call i32 @function_12b94(i32 %v2_91a8, i32 %v2_91a4, i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32 2)
  store i32 %v5_91c0, i32* %r0.global-to-local, align 4
  %v1_91c4 = add i32 %v5_91c0, 1
  %v2_91c4 = icmp eq i32 %v5_91c0, -1
  store i1 %v2_91c4, i1* %cpsr_c.global-to-local, align 1
  %v3_91c4 = sub i32 0, %v5_91c0
  %v4_91c4 = and i32 %v1_91c4, %v3_91c4
  %v5_91c4 = icmp slt i32 %v4_91c4, 0
  store i1 %v5_91c4, i1* %cpsr_v.global-to-local, align 1
  %v6_91c4 = icmp slt i32 %v1_91c4, 0
  store i1 %v6_91c4, i1* %cpsr_n.global-to-local, align 1
  %v7_91c4 = icmp eq i32 %v1_91c4, 0
  store i1 %v7_91c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_91c0, i32* @r4, align 4
  br i1 %v7_91c4, label %dec_label_pc_927c, label %dec_label_pc_91d0

dec_label_pc_91d0:                                ; preds = %bb224
  store i32 %v2_8280, i32* %r2.global-to-local, align 4
  %v1_91d4 = add i32 %v5_91c0, -1
  %v2_91d4 = icmp ne i32 %v5_91c0, 0
  store i1 %v2_91d4, i1* %cpsr_c.global-to-local, align 1
  %v3_91d4 = sub i32 0, %v5_91c0
  %v4_91d4 = and i32 %v5_91c0, %v3_91d4
  %v5_91d4 = icmp slt i32 %v4_91d4, 0
  store i1 %v5_91d4, i1* %cpsr_v.global-to-local, align 1
  %v6_91d4 = icmp slt i32 %v1_91d4, 0
  store i1 %v6_91d4, i1* %cpsr_n.global-to-local, align 1
  %v7_91d4 = icmp eq i32 %v5_91c0, 1
  store i1 %v7_91d4, i1* %cpsr_z.global-to-local, align 1
  %v7_91d8 = icmp slt i32 %v5_91c0, 2
  br i1 %v7_91d8, label %bb226, label %bb225

bb225:                                            ; preds = %dec_label_pc_91d0
  %v9_91d8 = add i32 %v5_91c0, -2
  store i32 %v9_91d8, i32* @r4, align 4
  br label %bb226

bb226:                                            ; preds = %dec_label_pc_91d0, %bb225
  %v1_91dc = load i32, i32* @sl, align 4
  %v2_91dc = add i32 %v1_91dc, %v2_8280
  store i32 %v2_91dc, i32* @r5, align 4
  %v0_91e0 = load i32, i32* @r6, align 4
  store i32 %v0_91e0, i32* %r0.global-to-local, align 4
  %v0_91e4 = load i32, i32* @r7, align 4
  store i32 %v0_91e4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d7c.41 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_91f0 = call i32 @function_12b94(i32 %v0_91e0, i32 %v0_91e4, i32 ptrtoint (i32* @global_var_15d7c.41 to i32), i32 1)
  store i32 %v4_91f0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_91f4 = icmp slt i32 %v4_91f0, 0
  store i1 %v1_91f4, i1* %cpsr_n.global-to-local, align 1
  %v2_91f4 = icmp eq i32 %v4_91f0, 0
  store i1 %v2_91f4, i1* %cpsr_z.global-to-local, align 1
  %tmp227 = icmp slt i32 %v4_91f0, 1
  br i1 %tmp227, label %.dec_label_pc_9214_crit_edge, label %dec_label_pc_91fc

.dec_label_pc_9214_crit_edge:                     ; preds = %bb226
  %v1_921c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9214

dec_label_pc_91fc:                                ; preds = %bb226
  %v0_91fc = load i32, i32* @r6, align 4
  store i32 %v0_91fc, i32* %r0.global-to-local, align 4
  %v0_9200 = load i32, i32* @r7, align 4
  store i32 %v0_9200, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d7c.41 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_920c = call i32 @function_12b94(i32 %v0_91fc, i32 %v0_9200, i32 ptrtoint (i32* @global_var_15d7c.41 to i32), i32 1)
  store i32 %v4_920c, i32* %r0.global-to-local, align 4
  %v1_9210 = add i32 %v4_920c, -1
  store i32 %v1_9210, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9214

dec_label_pc_9214:                                ; preds = %.dec_label_pc_9214_crit_edge, %dec_label_pc_91fc
  %v1_921c = phi i32 [ %v1_921c.pre, %.dec_label_pc_9214_crit_edge ], [ %v1_9210, %dec_label_pc_91fc ]
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_9224 = add i32 %v2_921c, %v1_921c
  store i32 %v1_9224, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9234 = load i32, i32* @sl, align 4
  %v4_9234 = add i32 %v3_9234, %v1_9224
  %v5_9234 = inttoptr i32 %v4_9234 to i8*
  store i8 0, i8* %v5_9234, align 1
  %storemerge4.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_9254.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9254

dec_label_pc_9240:                                ; preds = %dec_label_pc_9254
  br i1 %v7_9244, label %dec_label_pc_9284, label %dec_label_pc_924c

dec_label_pc_924c:                                ; preds = %dec_label_pc_9240
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9254

dec_label_pc_9254:                                ; preds = %dec_label_pc_9214, %dec_label_pc_924c
  %v0_9254 = phi i32 [ %v0_9240, %dec_label_pc_924c ], [ %v0_9254.pre, %dec_label_pc_9214 ]
  %storemerge4 = phi i32 [ %v1_9268, %dec_label_pc_924c ], [ %storemerge4.pre, %dec_label_pc_9214 ]
  store i32 %storemerge4, i32* %stack_var_-40, align 4
  store i32 %v0_9254, i32* %r0.global-to-local, align 4
  %v1_9258 = inttoptr i32 %v0_9254 to i8*
  %v2_9258 = call i32 @function_12ad0(i8* %v1_9258)
  store i32 %v2_9258, i32* %r0.global-to-local, align 4
  %v3_9260 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9260, i32* %r4.global-to-local, align 4
  %v2_9264 = sub i32 %v2_9258, %v3_9260
  %v3_9264 = icmp uge i32 %v2_9258, %v3_9260
  store i1 %v3_9264, i1* %cpsr_c.global-to-local, align 1
  %v4_9264 = xor i32 %v3_9260, %v2_9258
  %v5_9264 = xor i32 %v2_9264, %v2_9258
  %v6_9264 = and i32 %v5_9264, %v4_9264
  %v7_9264 = icmp slt i32 %v6_9264, 0
  store i1 %v7_9264, i1* %cpsr_v.global-to-local, align 1
  %v8_9264 = icmp slt i32 %v2_9264, 0
  store i1 %v8_9264, i1* %cpsr_n.global-to-local, align 1
  %v9_9264 = icmp eq i32 %v2_9258, %v3_9260
  store i1 %v9_9264, i1* %cpsr_z.global-to-local, align 1
  %v1_9268 = add i32 %v3_9260, 1
  store i32 %v1_9268, i32* %ip.global-to-local, align 4
  %v8_926c = icmp sgt i32 %v2_9258, %v3_9260
  %v0_9240 = load i32, i32* @r5, align 4
  %v2_9240 = add i32 %v0_9240, %v3_9260
  %v3_9240 = inttoptr i32 %v2_9240 to i8*
  %v4_9240 = load i8, i8* %v3_9240, align 1
  %v6_9240 = zext i8 %v4_9240 to i32
  store i32 %v6_9240, i32* %r3.global-to-local, align 4
  %v2_9244 = icmp ugt i8 %v4_9240, 60
  store i1 %v2_9244, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9244 = icmp ult i8 %v4_9240, 61
  store i1 %v6_9244, i1* %cpsr_n.global-to-local, align 1
  %v7_9244 = icmp eq i8 %v4_9240, 61
  store i1 %v7_9244, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_926c, label %dec_label_pc_9240, label %dec_label_pc_9270

dec_label_pc_9270:                                ; preds = %dec_label_pc_9254
  br i1 %v7_9244, label %dec_label_pc_9284, label %dec_label_pc_927c

dec_label_pc_927c:                                ; preds = %dec_label_pc_92c8, %dec_label_pc_92ec, %dec_label_pc_9270, %bb224
  %v0_927c = load i32, i32* @sl, align 4
  store i32 %v0_927c, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9284:                                ; preds = %dec_label_pc_9240, %dec_label_pc_9270
  %v0_9284 = load i32, i32* @r8, align 4
  %v1_9284 = add i32 %v0_9284, 12
  %v2_9284 = inttoptr i32 %v1_9284 to i32*
  %v3_9284 = load i32, i32* %v2_9284, align 4
  store i32 %v3_9284, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9290 = icmp slt i32 %v3_9284, 0
  store i1 %v1_9290, i1* %cpsr_n.global-to-local, align 1
  %v2_9290 = icmp eq i32 %v3_9284, 0
  store i1 %v2_9290, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp228 = icmp slt i32 %v3_9284, 1
  br i1 %tmp228, label %dec_label_pc_92ec, label %dec_label_pc_929c

dec_label_pc_929c:                                ; preds = %dec_label_pc_9284
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_92c8

dec_label_pc_92a4:                                ; preds = %dec_label_pc_92c8
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_92a8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_92a8, i32* %r3.global-to-local, align 4
  %v0_92ac = load i32, i32* @r8, align 4
  %v1_92ac = add i32 %v0_92ac, 12
  %v2_92ac = inttoptr i32 %v1_92ac to i32*
  %v3_92ac = load i32, i32* %v2_92ac, align 4
  %v1_92b0 = add i32 %v3_92a8, 1
  store i32 %v1_92b0, i32* %ip.global-to-local, align 4
  %v2_92b4 = sub i32 %v3_92ac, %v1_92b0
  %v3_92b4 = icmp uge i32 %v3_92ac, %v1_92b0
  store i1 %v3_92b4, i1* %cpsr_c.global-to-local, align 1
  %v4_92b4 = xor i32 %v3_92ac, %v1_92b0
  %v5_92b4 = xor i32 %v2_92b4, %v3_92ac
  %v6_92b4 = and i32 %v5_92b4, %v4_92b4
  %v7_92b4 = icmp slt i32 %v6_92b4, 0
  store i1 %v7_92b4, i1* %cpsr_v.global-to-local, align 1
  %v8_92b4 = icmp slt i32 %v2_92b4, 0
  store i1 %v8_92b4, i1* %cpsr_n.global-to-local, align 1
  %v9_92b4 = icmp eq i32 %v3_92ac, %v1_92b0
  store i1 %v9_92b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 %v1_92b0, i32* %r1.global-to-local, align 4
  store i32 %v1_92b0, i32* %stack_var_-40, align 4
  %v7_92c4 = icmp sgt i32 %v3_92ac, %v1_92b0
  %v0_92d4.pre = load i32, i32* @r5, align 4
  br i1 %v7_92c4, label %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge, label %dec_label_pc_92ec

dec_label_pc_92a4.dec_label_pc_92c8_crit_edge:    ; preds = %dec_label_pc_92a4
  %v0_92d8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_92c8

dec_label_pc_92c8:                                ; preds = %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge, %dec_label_pc_929c
  %v0_92d8 = phi i32 [ %v0_92d8.pre, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ %v3_9260, %dec_label_pc_929c ]
  %v0_92d4 = phi i32 [ %v0_92d4.pre, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ %v0_9240, %dec_label_pc_929c ]
  %v0_92c8 = phi i32 [ %v1_92b0, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ 0, %dec_label_pc_929c ]
  %v1_92c8 = and i32 %v0_92c8, 33554432
  %v2_92c8 = icmp ne i32 %v1_92c8, 0
  store i1 %v2_92c8, i1* %cpsr_c.global-to-local, align 1
  %v3_92c8 = mul i32 %v0_92c8, 128
  %v1_92cc = add i32 %v3_92c8, 1472
  %v0_92d0 = load i32, i32* %sb.global-to-local, align 4
  %v2_92d0 = add i32 %v1_92cc, %v0_92d0
  store i32 %v2_92d0, i32* %r1.global-to-local, align 4
  store i32 %v0_92d4, i32* %r0.global-to-local, align 4
  store i32 %v0_92d8, i32* %r2.global-to-local, align 4
  %v3_92dc = inttoptr i32 %v0_92d4 to i8*
  %v4_92dc = call i32 @function_12f34(i8* %v3_92dc, i32 %v2_92d0, i32 %v0_92d8)
  store i32 %v4_92dc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_92e0 = icmp slt i32 %v4_92dc, 0
  store i1 %v1_92e0, i1* %cpsr_n.global-to-local, align 1
  %v2_92e0 = icmp eq i32 %v4_92dc, 0
  store i1 %v2_92e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_92e0, label %dec_label_pc_92a4, label %dec_label_pc_927c

dec_label_pc_92ec:                                ; preds = %dec_label_pc_92a4, %dec_label_pc_9284
  %v0_92ec = phi i32 [ %v0_9240, %dec_label_pc_9284 ], [ %v0_92d4.pre, %dec_label_pc_92a4 ]
  store i32 %v0_92ec, i32* %r0.global-to-local, align 4
  %v1_92f0 = inttoptr i32 %v0_92ec to i8*
  %v2_92f0 = call i32 @function_12ad0(i8* %v1_92f0)
  store i32 %v2_92f0, i32* %r0.global-to-local, align 4
  %v1_92f4 = add i32 %v2_92f0, -127
  %v2_92f4 = icmp ugt i32 %v2_92f0, 126
  store i1 %v2_92f4, i1* %cpsr_c.global-to-local, align 1
  %v3_92f4 = sub i32 126, %v2_92f0
  %v4_92f4 = and i32 %v3_92f4, %v2_92f0
  %v5_92f4 = icmp slt i32 %v4_92f4, 0
  store i1 %v5_92f4, i1* %cpsr_v.global-to-local, align 1
  %v6_92f4 = icmp slt i32 %v1_92f4, 0
  store i1 %v6_92f4, i1* %cpsr_n.global-to-local, align 1
  %v7_92f4 = icmp eq i32 %v2_92f0, 127
  store i1 %v7_92f4, i1* %cpsr_z.global-to-local, align 1
  %v8_92f8 = icmp sgt i32 %v2_92f0, 127
  br i1 %v8_92f8, label %dec_label_pc_927c, label %dec_label_pc_92fc

dec_label_pc_92fc:                                ; preds = %dec_label_pc_92ec
  %v0_92fc = load i32, i32* @r8, align 4
  %v1_92fc = add i32 %v0_92fc, 12
  %v2_92fc = inttoptr i32 %v1_92fc to i32*
  %v3_92fc = load i32, i32* %v2_92fc, align 4
  %v1_9300 = and i32 %v3_92fc, 33554432
  %v2_9300 = icmp ne i32 %v1_9300, 0
  store i1 %v2_9300, i1* %cpsr_c.global-to-local, align 1
  %v3_9300 = mul i32 %v3_92fc, 128
  %v1_9304 = add i32 %v3_9300, 1472
  %v0_9308 = load i32, i32* @r5, align 4
  store i32 %v0_9308, i32* %r1.global-to-local, align 4
  %v0_930c = load i32, i32* %sb.global-to-local, align 4
  %v2_930c = add i32 %v1_9304, %v0_930c
  store i32 %v2_930c, i32* @r0, align 4
  %v2_9310 = inttoptr i32 %v2_930c to i8*
  %v3_9310 = call i32 @function_12af8(i8* %v2_9310, i32 %v0_9308)
  store i32 %v3_9310, i32* %r0.global-to-local, align 4
  %v0_9314 = load i32, i32* @r8, align 4
  %v1_9314 = add i32 %v0_9314, 12
  %v2_9314 = inttoptr i32 %v1_9314 to i32*
  %v3_9314 = load i32, i32* %v2_9314, align 4
  %v0_9318 = load i32, i32* @sl, align 4
  store i32 %v0_9318, i32* @r5, align 4
  %v1_931c = add i32 %v3_9314, 1
  store i32 %v1_931c, i32* %r3.global-to-local, align 4
  store i32 %v1_931c, i32* %v2_9314, align 4
  %v1_9134.pre.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9328:                                ; preds = %dec_label_pc_915c, %dec_label_pc_9128
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v3_9330 = call i32 @function_120c0(i32 38, i32* null)
  %v0_9334 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9334, i32* @r1, align 4
  store i32 %v3_9330, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9340 = call i32 @function_12e24(i8* %tmp199, i32 %v0_9334, i32 %v3_9330)
  store i32 %v4_9340, i32* %r0.global-to-local, align 4
  %v1_9344 = add i32 %v4_9340, 1
  %v2_9344 = icmp eq i32 %v4_9340, -1
  store i1 %v2_9344, i1* %cpsr_c.global-to-local, align 1
  %v3_9344 = sub i32 0, %v4_9340
  %v4_9344 = and i32 %v1_9344, %v3_9344
  %v5_9344 = icmp slt i32 %v4_9344, 0
  store i1 %v5_9344, i1* %cpsr_v.global-to-local, align 1
  %v6_9344 = icmp slt i32 %v1_9344, 0
  store i1 %v6_9344, i1* %cpsr_n.global-to-local, align 1
  %v7_9344 = icmp eq i32 %v1_9344, 0
  store i1 %v7_9344, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9344, label %dec_label_pc_9678, label %dec_label_pc_934c

dec_label_pc_934c:                                ; preds = %dec_label_pc_9328
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v3_9354 = call i32 @function_120c0(i32 38, i32* null)
  %v0_9358 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9358, i32* @r1, align 4
  store i32 %v3_9354, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9364 = call i32 @function_12e24(i8* %tmp199, i32 %v0_9358, i32 %v3_9354)
  store i32 %v4_9364, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_9370 = add i32 %v4_9364, %v2_8748
  store i32 %v2_9370, i32* %r3.global-to-local, align 4
  %v1_9374 = load i32, i32* @r6, align 4
  %v2_9374 = add i32 %v1_9374, %v2_9370
  %v3_9374 = inttoptr i32 %v2_9374 to i8*
  %v4_9374 = load i8, i8* %v3_9374, align 1
  store i32 %v2_8280, i32* %lr.global-to-local, align 4
  %v2_937c = icmp ugt i8 %v4_9374, 31
  store i1 %v2_937c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_937c = icmp ult i8 %v4_9374, 32
  store i1 %v6_937c, i1* %cpsr_n.global-to-local, align 1
  %v7_937c = icmp eq i8 %v4_9374, 32
  store i1 %v7_937c, i1* %cpsr_z.global-to-local, align 1
  %v2_9384 = zext i1 %v7_937c to i32
  %v2_9384.v4_9364 = add i32 %v2_9384, %v4_9364
  store i32 %v2_9384.v4_9364, i32* @r4, align 4
  %v2_9388 = add i32 %v2_9384.v4_9364, %v2_8280
  store i32 %v2_9388, i32* @r5, align 4
  store i32 %v2_9388, i32* %r0.global-to-local, align 4
  %v1_9390 = load i32, i32* %fp.global-to-local, align 4
  %v2_9390 = sub i32 %v1_9390, %v2_9384.v4_9364
  store i32 %v2_9390, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_939c = call i32 @function_12b94(i32 %v2_9388, i32 %v2_9390, i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32 2)
  store i32 %v5_939c, i32* %r0.global-to-local, align 4
  %v1_93a0 = add i32 %v5_939c, 1
  %v2_93a0 = icmp eq i32 %v5_939c, -1
  store i1 %v2_93a0, i1* %cpsr_c.global-to-local, align 1
  %v3_93a0 = sub i32 0, %v5_939c
  %v4_93a0 = and i32 %v1_93a0, %v3_93a0
  %v5_93a0 = icmp slt i32 %v4_93a0, 0
  store i1 %v5_93a0, i1* %cpsr_v.global-to-local, align 1
  %v6_93a0 = icmp slt i32 %v1_93a0, 0
  store i1 %v6_93a0, i1* %cpsr_n.global-to-local, align 1
  %v7_93a0 = icmp eq i32 %v1_93a0, 0
  store i1 %v7_93a0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_939c, i32* %lr.global-to-local, align 4
  br i1 %v7_93a0, label %dec_label_pc_9678, label %dec_label_pc_93ac

dec_label_pc_93ac:                                ; preds = %dec_label_pc_934c
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v1_93b4 = add i32 %v5_939c, -1
  %v2_93b4 = icmp ne i32 %v5_939c, 0
  store i1 %v2_93b4, i1* %cpsr_c.global-to-local, align 1
  %v3_93b4 = sub i32 0, %v5_939c
  %v4_93b4 = and i32 %v5_939c, %v3_93b4
  %v5_93b4 = icmp slt i32 %v4_93b4, 0
  store i1 %v5_93b4, i1* %cpsr_v.global-to-local, align 1
  %v6_93b4 = icmp slt i32 %v1_93b4, 0
  store i1 %v6_93b4, i1* %cpsr_n.global-to-local, align 1
  %v7_93b4 = icmp eq i32 %v5_939c, 1
  store i1 %v7_93b4, i1* %cpsr_z.global-to-local, align 1
  %v1_93b8 = load i32, i32* @r4, align 4
  %v2_93b8 = add i32 %v1_93b8, %v2_8748
  store i32 %v2_93b8, i32* %ip.global-to-local, align 4
  %v7_93bc = icmp sgt i32 %v5_939c, 1
  br i1 %v7_93bc, label %bb229, label %bb230

bb229:                                            ; preds = %dec_label_pc_93ac
  %v9_93bc = add i32 %v5_939c, -2
  store i32 %v9_93bc, i32* %lr.global-to-local, align 4
  br label %bb230

bb230:                                            ; preds = %dec_label_pc_93ac, %bb229
  %v3_93e0 = phi i32 [ %v5_939c, %dec_label_pc_93ac ], [ %v9_93bc, %bb229 ]
  %v1_93c4 = add i32 %v3_93e0, 1
  store i32 %v1_93c4, i32* %r6.global-to-local, align 4
  %v1_93c8 = add i32 %v2_93b8, -20773
  store i32 %v1_93c8, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v0_93d0 = load i32, i32* @r5, align 4
  store i32 %v0_93d0, i32* %r0.global-to-local, align 4
  store i32 %v1_93c4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15d80.43 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v4_93e0 = add i32 %v3_93e0, %v1_93c8
  %v5_93e0 = inttoptr i32 %v4_93e0 to i8*
  store i8 0, i8* %v5_93e0, align 1
  %v5_93e4 = call i32 @function_12b94(i32 %v0_93d0, i32 %v1_93c4, i32 ptrtoint ([5 x i8]* @global_var_15d80.43 to i32), i32 4)
  store i32 %v5_93e4, i32* %r0.global-to-local, align 4
  %v1_93e8 = add i32 %v5_93e4, -4
  %v2_93e8 = icmp ugt i32 %v5_93e4, 3
  store i1 %v2_93e8, i1* %cpsr_c.global-to-local, align 1
  %v3_93e8 = sub i32 3, %v5_93e4
  %v4_93e8 = and i32 %v3_93e8, %v5_93e4
  %v5_93e8 = icmp slt i32 %v4_93e8, 0
  store i1 %v5_93e8, i1* %cpsr_v.global-to-local, align 1
  %v6_93e8 = icmp slt i32 %v1_93e8, 0
  store i1 %v6_93e8, i1* %cpsr_n.global-to-local, align 1
  %v7_93e8 = icmp eq i32 %v5_93e4, 4
  store i1 %v7_93e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_93e8, label %dec_label_pc_9960, label %dec_label_pc_93f0

dec_label_pc_93f0:                                ; preds = %bb230
  store i32 %v2_8280, i32* %ip.global-to-local, align 4
  %v1_93f4 = load i32, i32* @r4, align 4
  %v2_93f4 = add i32 %v1_93f4, %v2_8280
  %v3_93f4 = inttoptr i32 %v2_93f4 to i8*
  %v4_93f4 = load i8, i8* %v3_93f4, align 1
  %v6_93f4 = zext i8 %v4_93f4 to i32
  store i32 %v6_93f4, i32* %r3.global-to-local, align 4
  %v2_93f8 = icmp ugt i8 %v4_93f4, 46
  store i1 %v2_93f8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_93f8 = icmp ult i8 %v4_93f4, 47
  store i1 %v6_93f8, i1* %cpsr_n.global-to-local, align 1
  %v7_93f8 = icmp eq i8 %v4_93f4, 47
  store i1 %v7_93f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_93f8, label %dec_label_pc_9b54, label %dec_label_pc_9400

dec_label_pc_9400:                                ; preds = %dec_label_pc_94ac, %dec_label_pc_9a98, %dec_label_pc_9b84, %dec_label_pc_9b54, %dec_label_pc_9a30, %dec_label_pc_9a14, %dec_label_pc_93f0, %dec_label_pc_9ba0, %dec_label_pc_9a60
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9404 = load i32, i32* @r8, align 4
  %v3_9404 = add i32 %v2_9404, -1452
  %v4_9404 = inttoptr i32 %v3_9404 to i8*
  store i8 1, i8* %v4_9404, align 1
  br label %dec_label_pc_8838

dec_label_pc_940c:                                ; preds = %dec_label_pc_8828
  %v0_940c = call i32 @function_13a64()
  store i32 %v0_940c, i32* %r0.global-to-local, align 4
  %v0_9410 = load i32, i32* %sb.global-to-local, align 4
  %v1_9410 = add i32 %v0_9410, 1472
  store i32 %v1_9410, i32* %r3.global-to-local, align 4
  %v0_9418 = load i32, i32* @r8, align 4
  %v1_9418 = add i32 %v0_9418, 656
  %v2_9418 = inttoptr i32 %v1_9418 to i32*
  %v3_9418 = load i32, i32* %v2_9418, align 4
  store i32 %v3_9418, i32* %r3.global-to-local, align 4
  %v1_9420 = add i32 %v3_9418, -1024
  %v2_9420 = icmp ugt i32 %v3_9418, 1023
  store i1 %v2_9420, i1* %cpsr_c.global-to-local, align 1
  %v3_9420 = sub i32 1023, %v3_9418
  %v4_9420 = and i32 %v3_9420, %v3_9418
  %v5_9420 = icmp slt i32 %v4_9420, 0
  store i1 %v5_9420, i1* %cpsr_v.global-to-local, align 1
  %v6_9420 = icmp slt i32 %v1_9420, 0
  store i1 %v6_9420, i1* %cpsr_n.global-to-local, align 1
  %v7_9420 = icmp eq i32 %v3_9418, 1024
  store i1 %v7_9420, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_940c, i32* %fp.global-to-local, align 4
  %v1_9428 = add i32 %v0_9410, 2116
  store i32 %v1_9428, i32* @r7, align 4
  br i1 %v7_9420, label %dec_label_pc_9528, label %dec_label_pc_9430

dec_label_pc_9430:                                ; preds = %dec_label_pc_940c, %dec_label_pc_9528, %dec_label_pc_951c
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_9434 = load i32, i32* %fp.global-to-local, align 4
  %v2_9434 = inttoptr i32 %v1_9434 to i32*
  store i32 0, i32* %v2_9434, align 4
  %v0_9438 = load i32, i32* @r8, align 4
  %v1_9438 = add i32 %v0_9438, 656
  %v2_9438 = inttoptr i32 %v1_9438 to i32*
  %v3_9438 = load i32, i32* %v2_9438, align 4
  store i32 %v3_9438, i32* %r1.global-to-local, align 4
  %v1_943c = add i32 %v0_9438, -1456
  %v2_943c = inttoptr i32 %v1_943c to i32*
  %v3_943c = load i32, i32* %v2_943c, align 4
  store i32 %v3_943c, i32* %r0.global-to-local, align 4
  %v1_9440 = sub i32 1024, %v3_9438
  store i32 %v1_9440, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9448 = load i32, i32* @r7, align 4
  %v2_9448 = add i32 %v0_9448, %v3_9438
  store i32 %v2_9448, i32* %r1.global-to-local, align 4
  %v4_944c = inttoptr i32 %v2_9448 to i32*
  %v5_944c = call i32 @function_13ca0(i32 %v3_943c, i32* %v4_944c, i32 %v1_9440, i32 16384)
  store i32 %v5_944c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9450 = icmp slt i32 %v5_944c, 0
  store i1 %v1_9450, i1* %cpsr_n.global-to-local, align 1
  %v2_9450 = icmp eq i32 %v5_944c, 0
  store i1 %v2_9450, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9450, label %dec_label_pc_992c, label %dec_label_pc_9458

dec_label_pc_9458:                                ; preds = %dec_label_pc_9430
  %v1_9458 = add i32 %v5_944c, 1
  %v2_9458 = icmp eq i32 %v5_944c, -1
  store i1 %v2_9458, i1* %cpsr_c.global-to-local, align 1
  %v3_9458 = sub i32 0, %v5_944c
  %v4_9458 = and i32 %v1_9458, %v3_9458
  %v5_9458 = icmp slt i32 %v4_9458, 0
  store i1 %v5_9458, i1* %cpsr_v.global-to-local, align 1
  %v6_9458 = icmp slt i32 %v1_9458, 0
  store i1 %v6_9458, i1* %cpsr_n.global-to-local, align 1
  %v7_9458 = icmp eq i32 %v1_9458, 0
  store i1 %v7_9458, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9458, label %dec_label_pc_9950, label %dec_label_pc_9460

dec_label_pc_9460:                                ; preds = %dec_label_pc_9458
  %v0_9460 = load i32, i32* @r8, align 4
  %v1_9460 = add i32 %v0_9460, 656
  %v2_9460 = inttoptr i32 %v1_9460 to i32*
  %v3_9460 = load i32, i32* %v2_9460, align 4
  store i32 %v2_87d8, i32* %r1.global-to-local, align 4
  %v2_9468 = add i32 %v3_9460, %v5_944c
  store i32 %v2_9468, i32* @r4, align 4
  store i32 %v2_9468, i32* %v2_9460, align 4
  %v0_9470 = load i32, i32* %r1.global-to-local, align 4
  %v1_9470 = load i32, i32* @r8, align 4
  %v2_9470 = add i32 %v1_9470, -1448
  %v3_9470 = inttoptr i32 %v2_9470 to i32*
  store i32 %v0_9470, i32* %v3_9470, align 4
  br label %dec_label_pc_94fc

dec_label_pc_9478:                                ; preds = %dec_label_pc_94fc
  %v1_9478 = add i32 %v0_94fc, -4
  %v2_9478 = inttoptr i32 %v1_9478 to i32*
  %v3_9478 = load i32, i32* %v2_9478, align 4
  store i32 %v3_9478, i32* @sl, align 4
  %v1_947c = load i32, i32* @r4, align 4
  %v5_9480 = icmp slt i32 %v3_94fc, %v1_947c
  %storemerge73 = select i1 %v5_9480, i32 %v3_94fc, i32 %v1_947c
  store i32 %storemerge73, i32* @r5, align 4
  %v2_9488 = sub i32 %v3_94fc, %storemerge73
  store i32 %v2_9488, i32* @r6, align 4
  %v1_948c = add i32 %v3_9478, -1
  %v2_948c = icmp ne i32 %v3_9478, 0
  store i1 %v2_948c, i1* %cpsr_c.global-to-local, align 1
  %v3_948c = sub i32 0, %v3_9478
  %v4_948c = and i32 %v3_9478, %v3_948c
  %v5_948c = icmp slt i32 %v4_948c, 0
  store i1 %v5_948c, i1* %cpsr_v.global-to-local, align 1
  %v6_948c = icmp slt i32 %v1_948c, 0
  store i1 %v6_948c, i1* %cpsr_n.global-to-local, align 1
  %v7_948c = icmp eq i32 %v3_9478, 1
  store i1 %v7_948c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_9488, i32* %v2_94fc, align 4
  br i1 %v7_948c, label %dec_label_pc_9548, label %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge

dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge: ; preds = %dec_label_pc_9478
  %v0_9498.pr.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9498

dec_label_pc_9498:                                ; preds = %dec_label_pc_9508, %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge, %dec_label_pc_9570
  %v0_9498 = phi i32 [ %v3_9570, %dec_label_pc_9570 ], [ %v0_9498.pr.pre, %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge ], [ %v3_94fc, %dec_label_pc_9508 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9498 = icmp slt i32 %v0_9498, 0
  store i1 %v1_9498, i1* %cpsr_n.global-to-local, align 1
  %v2_9498 = icmp eq i32 %v0_9498, 0
  store i1 %v2_9498, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9498, label %dec_label_pc_94a0, label %dec_label_pc_94c0

dec_label_pc_94a0:                                ; preds = %dec_label_pc_9498
  %v0_94a0 = load i32, i32* @r8, align 4
  %v1_94a0 = add i32 %v0_94a0, 4
  %v2_94a0 = inttoptr i32 %v1_94a0 to i32*
  %v3_94a0 = load i32, i32* %v2_94a0, align 4
  store i32 %v3_94a0, i32* @r4, align 4
  %v1_94a4 = add i32 %v3_94a0, -1
  %v2_94a4 = icmp ne i32 %v3_94a0, 0
  store i1 %v2_94a4, i1* %cpsr_c.global-to-local, align 1
  %v3_94a4 = sub i32 0, %v3_94a0
  %v4_94a4 = and i32 %v3_94a0, %v3_94a4
  %v5_94a4 = icmp slt i32 %v4_94a4, 0
  store i1 %v5_94a4, i1* %cpsr_v.global-to-local, align 1
  %v6_94a4 = icmp slt i32 %v1_94a4, 0
  store i1 %v6_94a4, i1* %cpsr_n.global-to-local, align 1
  %v7_94a4 = icmp eq i32 %v3_94a0, 1
  store i1 %v7_94a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_94a4, label %dec_label_pc_9578, label %dec_label_pc_94ac

dec_label_pc_94ac:                                ; preds = %dec_label_pc_94a0
  %v1_94ac = add i32 %v0_94a0, 656
  %v2_94ac = inttoptr i32 %v1_94ac to i32*
  %v3_94ac = load i32, i32* %v2_94ac, align 4
  %v0_94b0 = load i32, i32* @r5, align 4
  %v2_94b0 = sub i32 %v3_94ac, %v0_94b0
  store i32 %v2_94b0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94b4 = icmp slt i32 %v2_94b0, 0
  store i1 %v1_94b4, i1* %cpsr_n.global-to-local, align 1
  %v2_94b4 = icmp eq i32 %v2_94b0, 0
  store i1 %v2_94b4, i1* %cpsr_z.global-to-local, align 1
  %v2_94b8 = add i32 %v0_94a0, 8
  %v3_94b8 = inttoptr i32 %v2_94b8 to i32*
  store i32 %v2_94b0, i32* %v3_94b8, align 4
  br i1 %v2_94b4, label %dec_label_pc_9400, label %dec_label_pc_94c0

dec_label_pc_94c0:                                ; preds = %dec_label_pc_9498, %dec_label_pc_9578, %dec_label_pc_94ac, %dec_label_pc_9600
  %v0_94c0 = load i32, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94c0 = icmp slt i32 %v0_94c0, 0
  store i1 %v1_94c0, i1* %cpsr_n.global-to-local, align 1
  %v2_94c0 = icmp eq i32 %v0_94c0, 0
  store i1 %v2_94c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_94c0, label %dec_label_pc_9510, label %dec_label_pc_94c8

dec_label_pc_94c8:                                ; preds = %dec_label_pc_94c0
  %v0_94c8 = load i32, i32* @r8, align 4
  %v1_94c8 = add i32 %v0_94c8, 656
  %v2_94c8 = inttoptr i32 %v1_94c8 to i32*
  %v3_94c8 = load i32, i32* %v2_94c8, align 4
  store i32 %v3_94c8, i32* %r3.global-to-local, align 4
  %v2_94cc = sub i32 %v3_94c8, %v0_94c0
  store i32 %v2_94cc, i32* @r4, align 4
  store i32 %v2_94cc, i32* @r2, align 4
  store i32 %v2_94cc, i32* %v2_94c8, align 4
  %v0_94d8 = load i32, i32* @r7, align 4
  %v1_94d8 = load i32, i32* @r5, align 4
  %v2_94d8 = add i32 %v1_94d8, %v0_94d8
  store i32 %v2_94d8, i32* @r1, align 4
  store i32 %v0_94d8, i32* @r0, align 4
  %v3_94e0 = call i32 @function_13ac0(i32 %v0_94d8, i32 %v2_94d8, i32 %v2_94cc)
  store i32 %v3_94e0, i32* %r0.global-to-local, align 4
  %v0_94e4 = load i32, i32* @r8, align 4
  %v1_94e4 = add i32 %v0_94e4, 656
  %v2_94e4 = inttoptr i32 %v1_94e4 to i32*
  %v3_94e4 = load i32, i32* %v2_94e4, align 4
  store i32 %v3_94e4, i32* @r4, align 4
  store i32 0, i32* @lr, align 4
  %v1_94ec = load i32, i32* %sb.global-to-local, align 4
  %v2_94ec = add i32 %v1_94ec, %v3_94e4
  store i32 %v2_94ec, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94f0 = icmp slt i32 %v3_94e4, 0
  store i1 %v1_94f0, i1* %cpsr_n.global-to-local, align 1
  %v2_94f0 = icmp eq i32 %v3_94e4, 0
  store i1 %v2_94f0, i1* %cpsr_z.global-to-local, align 1
  %v3_94f4 = add i32 %v2_94ec, 2116
  %v4_94f4 = inttoptr i32 %v3_94f4 to i8*
  store i8 0, i8* %v4_94f4, align 1
  %v0_94f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_94f8, label %dec_label_pc_9510, label %dec_label_pc_94fc

dec_label_pc_94fc:                                ; preds = %dec_label_pc_94c8, %dec_label_pc_9460
  %v0_94fc = load i32, i32* @r8, align 4
  %v1_94fc = add i32 %v0_94fc, 8
  %v2_94fc = inttoptr i32 %v1_94fc to i32*
  %v3_94fc = load i32, i32* %v2_94fc, align 4
  store i32 %v3_94fc, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9500 = icmp slt i32 %v3_94fc, 0
  store i1 %v1_9500, i1* %cpsr_n.global-to-local, align 1
  %v2_9500 = icmp eq i32 %v3_94fc, 0
  store i1 %v2_9500, i1* %cpsr_z.global-to-local, align 1
  %v5_9504 = icmp sgt i32 %v3_94fc, 0
  br i1 %v5_9504, label %dec_label_pc_9478, label %dec_label_pc_9508

dec_label_pc_9508:                                ; preds = %dec_label_pc_94fc
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_9498

dec_label_pc_9510:                                ; preds = %dec_label_pc_94c8, %dec_label_pc_94c0
  %v0_9510 = load i32, i32* @r8, align 4
  %v1_9510 = add i32 %v0_9510, -1452
  %v2_9510 = inttoptr i32 %v1_9510 to i8*
  %v3_9510 = load i8, i8* %v2_9510, align 1
  %v4_9510 = zext i8 %v3_9510 to i32
  store i32 %v4_9510, i32* %r3.global-to-local, align 4
  %v2_9514 = icmp ugt i8 %v3_9510, 6
  store i1 %v2_9514, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9514 = icmp ult i8 %v3_9510, 7
  store i1 %v6_9514, i1* %cpsr_n.global-to-local, align 1
  %v7_9514 = icmp eq i8 %v3_9510, 7
  store i1 %v7_9514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9514, label %dec_label_pc_951c, label %dec_label_pc_8838

dec_label_pc_951c:                                ; preds = %dec_label_pc_9510
  %v1_951c = add i32 %v0_9510, 656
  %v2_951c = inttoptr i32 %v1_951c to i32*
  %v3_951c = load i32, i32* %v2_951c, align 4
  store i32 %v3_951c, i32* %r3.global-to-local, align 4
  %v1_9520 = add i32 %v3_951c, -1024
  %v2_9520 = icmp ugt i32 %v3_951c, 1023
  store i1 %v2_9520, i1* %cpsr_c.global-to-local, align 1
  %v3_9520 = sub i32 1023, %v3_951c
  %v4_9520 = and i32 %v3_9520, %v3_951c
  %v5_9520 = icmp slt i32 %v4_9520, 0
  store i1 %v5_9520, i1* %cpsr_v.global-to-local, align 1
  %v6_9520 = icmp slt i32 %v1_9520, 0
  store i1 %v6_9520, i1* %cpsr_n.global-to-local, align 1
  %v7_9520 = icmp eq i32 %v3_951c, 1024
  store i1 %v7_9520, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9520, label %dec_label_pc_9528.loopexit, label %dec_label_pc_9430

dec_label_pc_9528.loopexit:                       ; preds = %dec_label_pc_951c
  %v0_9528.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_9528

dec_label_pc_9528:                                ; preds = %dec_label_pc_9528.loopexit, %dec_label_pc_940c
  %v0_9528 = phi i32 [ %v0_9528.pre, %dec_label_pc_9528.loopexit ], [ %v1_9428, %dec_label_pc_940c ]
  store i32 %v0_9528, i32* @r0, align 4
  %v1_952c = add i32 %v0_9528, 64
  store i32 %v1_952c, i32* @r1, align 4
  store i32 960, i32* @r2, align 4
  %v3_9534 = call i32 @function_13ac0(i32 %v0_9528, i32 %v1_952c, i32 960)
  store i32 %v3_9534, i32* %r0.global-to-local, align 4
  %v0_9538 = load i32, i32* @r8, align 4
  %v1_9538 = add i32 %v0_9538, 656
  %v2_9538 = inttoptr i32 %v1_9538 to i32*
  %v3_9538 = load i32, i32* %v2_9538, align 4
  store i32 %v3_9538, i32* %r3.global-to-local, align 4
  %v1_953c = add i32 %v3_9538, -64
  store i32 %v1_953c, i32* @r4, align 4
  store i32 %v1_953c, i32* %v2_9538, align 4
  br label %dec_label_pc_9430

dec_label_pc_9548:                                ; preds = %dec_label_pc_9478
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 36, i32* %r0.global-to-local, align 4
  %v3_9550 = call i32 @function_120c0(i32 36, i32* null)
  %v0_9554 = load i32, i32* @r4, align 4
  store i32 %v0_9554, i32* %r1.global-to-local, align 4
  store i32 %v3_9550, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_9560 = load i32, i32* @r7, align 4
  store i32 %v0_9560, i32* %r0.global-to-local, align 4
  %v4_9564 = call i32 @function_12b94(i32 %v0_9560, i32 %v0_9554, i32 %v3_9550, i32 11)
  store i32 %v4_9564, i32* %r0.global-to-local, align 4
  %v2_9568 = add i32 %v4_9564, 1
  %v3_9568 = icmp eq i32 %v4_9564, -1
  store i1 %v3_9568, i1* %cpsr_c.global-to-local, align 1
  %v4_9568 = sub i32 0, %v4_9564
  %v5_9568 = and i32 %v2_9568, %v4_9568
  %v6_9568 = icmp slt i32 %v5_9568, 0
  store i1 %v6_9568, i1* %cpsr_v.global-to-local, align 1
  %v7_9568 = icmp slt i32 %v2_9568, 0
  store i1 %v7_9568, i1* %cpsr_n.global-to-local, align 1
  %v8_9568 = icmp eq i32 %v2_9568, 0
  store i1 %v8_9568, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9568, label %dec_label_pc_9570, label %dec_label_pc_9ad4

dec_label_pc_9570:                                ; preds = %dec_label_pc_9548
  %v0_9570 = load i32, i32* @r8, align 4
  %v1_9570 = add i32 %v0_9570, 8
  %v2_9570 = inttoptr i32 %v1_9570 to i32*
  %v3_9570 = load i32, i32* %v2_9570, align 4
  store i32 %v3_9570, i32* @r6, align 4
  br label %dec_label_pc_9498

dec_label_pc_9578:                                ; preds = %dec_label_pc_94a0
  %v0_9578 = load i32, i32* @r7, align 4
  store i32 %v0_9578, i32* %r0.global-to-local, align 4
  %v1_957c = add i32 %v0_94a0, 656
  %v2_957c = inttoptr i32 %v1_957c to i32*
  %v3_957c = load i32, i32* %v2_957c, align 4
  store i32 %v3_957c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9588 = call i32 @function_12b94(i32 %v0_9578, i32 %v3_957c, i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32 2)
  store i32 %v5_9588, i32* %r0.global-to-local, align 4
  %v1_958c = add i32 %v5_9588, 1
  %v2_958c = icmp eq i32 %v5_9588, -1
  store i1 %v2_958c, i1* %cpsr_c.global-to-local, align 1
  %v3_958c = sub i32 0, %v5_9588
  %v4_958c = and i32 %v1_958c, %v3_958c
  %v5_958c = icmp slt i32 %v4_958c, 0
  store i1 %v5_958c, i1* %cpsr_v.global-to-local, align 1
  %v6_958c = icmp slt i32 %v1_958c, 0
  store i1 %v6_958c, i1* %cpsr_n.global-to-local, align 1
  %v7_958c = icmp eq i32 %v1_958c, 0
  store i1 %v7_958c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_958c, label %dec_label_pc_94c0, label %dec_label_pc_9594

dec_label_pc_9594:                                ; preds = %dec_label_pc_9578
  %v0_9594 = load i32, i32* @r8, align 4
  %v1_9594 = add i32 %v0_9594, 656
  %v2_9594 = inttoptr i32 %v1_9594 to i32*
  %v3_9594 = load i32, i32* %v2_9594, align 4
  store i32 %v3_9594, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v0_95a0 = load i32, i32* @r7, align 4
  store i32 %v0_95a0, i32* %r0.global-to-local, align 4
  %v5_95a4 = call i32 @function_12b94(i32 %v0_95a0, i32 %v3_9594, i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32 2)
  %v1_95a8 = load i32, i32* %sb.global-to-local, align 4
  %v2_95a8 = add i32 %v1_95a8, %v5_95a4
  store i32 %v2_95a8, i32* %ip.global-to-local, align 4
  store i32 %v5_95a4, i32* @r5, align 4
  store i32 %v5_95a4, i32* %r1.global-to-local, align 4
  %v0_95b4 = load i32, i32* @r7, align 4
  store i32 %v0_95b4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d7c.41 to i32), i32* %r2.global-to-local, align 4
  %v0_95bc = load i32, i32* @r4, align 4
  store i32 %v0_95bc, i32* %r3.global-to-local, align 4
  %v0_95c0 = load i32, i32* @r6, align 4
  %v1_95c0 = trunc i32 %v0_95c0 to i8
  %v3_95c0 = add i32 %v2_95a8, 2114
  %v4_95c0 = inttoptr i32 %v3_95c0 to i8*
  store i8 %v1_95c0, i8* %v4_95c0, align 1
  %v4_95c4 = call i32 @function_12b94(i32 %v0_95b4, i32 %v5_95a4, i32 ptrtoint (i32* @global_var_15d7c.41 to i32), i32 %v0_95bc)
  store i32 %v4_95c4, i32* %r0.global-to-local, align 4
  %v1_95c8 = add i32 %v4_95c4, 1
  %v2_95c8 = icmp eq i32 %v4_95c4, -1
  store i1 %v2_95c8, i1* %cpsr_c.global-to-local, align 1
  %v3_95c8 = sub i32 0, %v4_95c4
  %v4_95c8 = and i32 %v1_95c8, %v3_95c8
  %v5_95c8 = icmp slt i32 %v4_95c8, 0
  store i1 %v5_95c8, i1* %cpsr_v.global-to-local, align 1
  %v6_95c8 = icmp slt i32 %v1_95c8, 0
  store i1 %v6_95c8, i1* %cpsr_n.global-to-local, align 1
  %v7_95c8 = icmp eq i32 %v1_95c8, 0
  store i1 %v7_95c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_95c8, label %dec_label_pc_95ec, label %dec_label_pc_95d0

dec_label_pc_95d0:                                ; preds = %dec_label_pc_9594
  %v0_95d0 = load i32, i32* @r7, align 4
  store i32 %v0_95d0, i32* %r0.global-to-local, align 4
  %v0_95d4 = load i32, i32* @r5, align 4
  store i32 %v0_95d4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d7c.41 to i32), i32* %r2.global-to-local, align 4
  %v0_95dc = load i32, i32* @r4, align 4
  store i32 %v0_95dc, i32* %r3.global-to-local, align 4
  %v4_95e0 = call i32 @function_12b94(i32 %v0_95d0, i32 %v0_95d4, i32 ptrtoint (i32* @global_var_15d7c.41 to i32), i32 %v0_95dc)
  %v1_95e4 = load i32, i32* %sb.global-to-local, align 4
  %v2_95e4 = add i32 %v1_95e4, %v4_95e0
  store i32 %v2_95e4, i32* %r0.global-to-local, align 4
  %v0_95e8 = load i32, i32* @r6, align 4
  %v1_95e8 = trunc i32 %v0_95e8 to i8
  %v3_95e8 = add i32 %v2_95e4, 2116
  %v4_95e8 = inttoptr i32 %v3_95e8 to i8*
  store i8 %v1_95e8, i8* %v4_95e8, align 1
  br label %dec_label_pc_95ec

dec_label_pc_95ec:                                ; preds = %dec_label_pc_9594, %dec_label_pc_95d0
  %v0_95ec = load i32, i32* @r7, align 4
  store i32 %v0_95ec, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  %v2_95f4 = inttoptr i32 %v0_95ec to i8*
  %v3_95f4 = call i32 @function_12bfc(i8* %v2_95f4, i32 16)
  store i32 %v3_95f4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_95f8 = icmp slt i32 %v3_95f4, 0
  store i1 %v1_95f8, i1* %cpsr_n.global-to-local, align 1
  %v2_95f8 = icmp eq i32 %v3_95f4, 0
  store i1 %v2_95f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95f8, label %dec_label_pc_9d84, label %dec_label_pc_9600

dec_label_pc_9600:                                ; preds = %dec_label_pc_95ec
  %v1_9600 = add i32 %v3_95f4, 2
  store i32 %v1_9600, i32* %r6.global-to-local, align 4
  %v1_9604 = load i32, i32* @r8, align 4
  %v2_9604 = add i32 %v1_9604, 8
  %v3_9604 = inttoptr i32 %v2_9604 to i32*
  store i32 %v1_9600, i32* %v3_9604, align 4
  br label %dec_label_pc_94c0

dec_label_pc_960c:                                ; preds = %dec_label_pc_8cb4
  %v0_960c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_960c, i32* %r1.global-to-local, align 4
  %v0_9610 = load i32, i32* @r6, align 4
  store i32 %v0_9610, i32* @r0, align 4
  %v2_9614 = inttoptr i32 %v0_9610 to i8*
  %v3_9614 = call i32 @function_12af8(i8* %v2_9614, i32 %v0_960c)
  store i32 %v3_9614, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8ccc

dec_label_pc_961c:                                ; preds = %dec_label_pc_8830
  %v0_961c = call i32 @function_13a64()
  store i32 %v0_961c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v0_961c, i32* @r4, align 4
  br label %dec_label_pc_9628

dec_label_pc_9628:                                ; preds = %dec_label_pc_9648.dec_label_pc_9628_crit_edge, %dec_label_pc_961c
  %v1_9628 = phi i32 [ %v1_9628.pre, %dec_label_pc_9648.dec_label_pc_9628_crit_edge ], [ %v0_961c, %dec_label_pc_961c ]
  %v0_9628 = phi i32 [ %v0_9628.pre, %dec_label_pc_9648.dec_label_pc_9628_crit_edge ], [ 0, %dec_label_pc_961c ]
  %v2_9628 = inttoptr i32 %v1_9628 to i32*
  store i32 %v0_9628, i32* %v2_9628, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  %v0_9630 = load i32, i32* @r8, align 4
  %v1_9630 = add i32 %v0_9630, -1456
  %v2_9630 = inttoptr i32 %v1_9630 to i32*
  %v3_9630 = load i32, i32* %v2_9630, align 4
  store i32 %v3_9630, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_963c = call i32 @function_13ca0(i32 %v3_9630, i32* nonnull %stack_var_-20809, i32 10240, i32 16384)
  store i32 %v5_963c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9640 = icmp slt i32 %v5_963c, 0
  store i1 %v1_9640, i1* %cpsr_n.global-to-local, align 1
  %v2_9640 = icmp eq i32 %v5_963c, 0
  store i1 %v2_9640, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9640, label %dec_label_pc_9920, label %dec_label_pc_9648

dec_label_pc_9648:                                ; preds = %dec_label_pc_9628
  %v2_9648 = add i32 %v5_963c, 1
  %v3_9648 = icmp eq i32 %v5_963c, -1
  store i1 %v3_9648, i1* %cpsr_c.global-to-local, align 1
  %v4_9648 = sub i32 0, %v5_963c
  %v5_9648 = and i32 %v2_9648, %v4_9648
  %v6_9648 = icmp slt i32 %v5_9648, 0
  store i1 %v6_9648, i1* %cpsr_v.global-to-local, align 1
  %v7_9648 = icmp slt i32 %v2_9648, 0
  store i1 %v7_9648, i1* %cpsr_n.global-to-local, align 1
  %v8_9648 = icmp eq i32 %v2_9648, 0
  store i1 %v8_9648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9648, label %dec_label_pc_9650, label %dec_label_pc_9648.dec_label_pc_9628_crit_edge

dec_label_pc_9648.dec_label_pc_9628_crit_edge:    ; preds = %dec_label_pc_9648
  %v0_9628.pre = load i32, i32* @r5, align 4
  %v1_9628.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9628

dec_label_pc_9650:                                ; preds = %dec_label_pc_9648
  %v0_9650 = load i32, i32* @r4, align 4
  %v1_9650 = inttoptr i32 %v0_9650 to i32*
  %v2_9650 = load i32, i32* %v1_9650, align 4
  store i32 %v2_9650, i32* %r3.global-to-local, align 4
  %v1_9654 = add i32 %v2_9650, -11
  %v2_9654 = icmp ugt i32 %v2_9650, 10
  store i1 %v2_9654, i1* %cpsr_c.global-to-local, align 1
  %v3_9654 = sub i32 10, %v2_9650
  %v4_9654 = and i32 %v3_9654, %v2_9650
  %v5_9654 = icmp slt i32 %v4_9654, 0
  store i1 %v5_9654, i1* %cpsr_v.global-to-local, align 1
  %v6_9654 = icmp slt i32 %v1_9654, 0
  store i1 %v6_9654, i1* %cpsr_n.global-to-local, align 1
  %v7_9654 = icmp eq i32 %v2_9650, 11
  store i1 %v7_9654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9654, label %dec_label_pc_9a98, label %dec_label_pc_965c

dec_label_pc_965c:                                ; preds = %dec_label_pc_9650, %dec_label_pc_9920
  %v0_965c = load i32, i32* @r8, align 4
  %v1_965c = add i32 %v0_965c, -1456
  %v2_965c = inttoptr i32 %v1_965c to i32*
  %v3_965c = load i32, i32* %v2_965c, align 4
  store i32 %v3_965c, i32* %r0.global-to-local, align 4
  %v1_9660 = call i32 @function_13490(i32 %v3_965c)
  store i32 %v1_9660, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_966c = load i32, i32* @r8, align 4
  %v2_966c = add i32 %v1_966c, -1456
  %v3_966c = inttoptr i32 %v2_966c to i32*
  store i32 -1, i32* %v3_966c, align 4
  %v0_9670 = load i32, i32* %r1.global-to-local, align 4
  %v1_9670 = trunc i32 %v0_9670 to i8
  %v2_9670 = load i32, i32* @r8, align 4
  %v3_9670 = add i32 %v2_9670, -1452
  %v4_9670 = inttoptr i32 %v3_9670 to i8*
  store i8 %v1_9670, i8* %v4_9670, align 1
  br label %dec_label_pc_8838

dec_label_pc_9678:                                ; preds = %dec_label_pc_934c, %dec_label_pc_9328
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v3_9680 = call i32 @function_120c0(i32 37, i32* null)
  %v0_9684 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9684, i32* @r1, align 4
  store i32 %v3_9680, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9690 = call i32 @function_12e24(i8* %tmp199, i32 %v0_9684, i32 %v3_9680)
  store i32 %v4_9690, i32* %r0.global-to-local, align 4
  %v1_9698 = add i32 %v4_9690, 1
  %v2_9698 = icmp eq i32 %v4_9690, -1
  store i1 %v2_9698, i1* %cpsr_c.global-to-local, align 1
  %v3_9698 = sub i32 0, %v4_9690
  %v4_9698 = and i32 %v1_9698, %v3_9698
  %v5_9698 = icmp slt i32 %v4_9698, 0
  store i1 %v5_9698, i1* %cpsr_v.global-to-local, align 1
  %v6_9698 = icmp slt i32 %v1_9698, 0
  store i1 %v6_9698, i1* %cpsr_n.global-to-local, align 1
  %v7_9698 = icmp eq i32 %v1_9698, 0
  store i1 %v7_9698, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_9698, label %dec_label_pc_98c0, label %dec_label_pc_96a4

dec_label_pc_96a4:                                ; preds = %dec_label_pc_9678
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v3_96ac = call i32 @function_120c0(i32 37, i32* null)
  %v0_96b0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_96b0, i32* @r1, align 4
  store i32 %v3_96ac, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_96bc = call i32 @function_12e24(i8* %tmp199, i32 %v0_96b0, i32 %v3_96ac)
  store i32 %v4_96bc, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_96c8 = add i32 %v4_96bc, %v2_8748
  store i32 %v2_96c8, i32* %r3.global-to-local, align 4
  %v1_96cc = load i32, i32* @r5, align 4
  %v2_96cc = add i32 %v1_96cc, %v2_96c8
  %v3_96cc = inttoptr i32 %v2_96cc to i8*
  %v4_96cc = load i8, i8* %v3_96cc, align 1
  store i32 %v2_8280, i32* %lr.global-to-local, align 4
  %v2_96d4 = icmp ugt i8 %v4_96cc, 31
  store i1 %v2_96d4, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_96d4 = icmp ult i8 %v4_96cc, 32
  store i1 %v6_96d4, i1* %cpsr_n.global-to-local, align 1
  %v7_96d4 = icmp eq i8 %v4_96cc, 32
  store i1 %v7_96d4, i1* %cpsr_z.global-to-local, align 1
  %v2_96dc = zext i1 %v7_96d4 to i32
  %v2_96dc.v4_96bc = add i32 %v2_96dc, %v4_96bc
  store i32 %v2_96dc.v4_96bc, i32* @r4, align 4
  %v2_96e0 = add i32 %v2_96dc.v4_96bc, %v2_8280
  store i32 %v2_96e0, i32* @r6, align 4
  store i32 %v2_96e0, i32* %r0.global-to-local, align 4
  %v1_96e8 = load i32, i32* %fp.global-to-local, align 4
  %v2_96e8 = sub i32 %v1_96e8, %v2_96dc.v4_96bc
  store i32 %v2_96e8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_96f4 = call i32 @function_12b94(i32 %v2_96e0, i32 %v2_96e8, i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32 2)
  store i32 %v5_96f4, i32* %r0.global-to-local, align 4
  %v1_96f8 = add i32 %v5_96f4, 1
  %v2_96f8 = icmp eq i32 %v5_96f4, -1
  store i1 %v2_96f8, i1* %cpsr_c.global-to-local, align 1
  %v3_96f8 = sub i32 0, %v5_96f4
  %v4_96f8 = and i32 %v1_96f8, %v3_96f8
  %v5_96f8 = icmp slt i32 %v4_96f8, 0
  store i1 %v5_96f8, i1* %cpsr_v.global-to-local, align 1
  %v6_96f8 = icmp slt i32 %v1_96f8, 0
  store i1 %v6_96f8, i1* %cpsr_n.global-to-local, align 1
  %v7_96f8 = icmp eq i32 %v1_96f8, 0
  store i1 %v7_96f8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_96f4, i32* @r7, align 4
  br i1 %v7_96f8, label %dec_label_pc_98c0, label %dec_label_pc_9704

dec_label_pc_9704:                                ; preds = %dec_label_pc_96a4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v1_970c = load i32, i32* @r4, align 4
  %v2_970c = add i32 %v1_970c, %v2_8748
  %v1_9710 = add i32 %v5_96f4, -1
  %v2_9710 = icmp ne i32 %v5_96f4, 0
  store i1 %v2_9710, i1* %cpsr_c.global-to-local, align 1
  %v3_9710 = sub i32 0, %v5_96f4
  %v4_9710 = and i32 %v5_96f4, %v3_9710
  %v5_9710 = icmp slt i32 %v4_9710, 0
  store i1 %v5_9710, i1* %cpsr_v.global-to-local, align 1
  %v6_9710 = icmp slt i32 %v1_9710, 0
  store i1 %v6_9710, i1* %cpsr_n.global-to-local, align 1
  %v7_9710 = icmp eq i32 %v5_96f4, 1
  store i1 %v7_9710, i1* %cpsr_z.global-to-local, align 1
  %v1_9714 = add i32 %v2_970c, -20736
  store i32 %v1_9714, i32* %r3.global-to-local, align 4
  %v7_9718 = icmp sgt i32 %v5_96f4, 1
  br i1 %v7_9718, label %bb231, label %bb232

bb231:                                            ; preds = %dec_label_pc_9704
  %v9_9718 = add i32 %v5_96f4, -2
  store i32 %v9_9718, i32* @r7, align 4
  br label %bb232

bb232:                                            ; preds = %dec_label_pc_9704, %bb231
  %v3_9724 = phi i32 [ %v5_96f4, %dec_label_pc_9704 ], [ %v9_9718, %bb231 ]
  %v1_971c = add i32 %v2_970c, -20773
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_9724 = add i32 %v1_971c, %v3_9724
  %v5_9724 = inttoptr i32 %v4_9724 to i8*
  store i8 0, i8* %v5_9724, align 1
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 %v2_8280, i32* @lr, align 4
  %v1_9738 = load i32, i32* @r4, align 4
  %v2_9738 = add i32 %v1_9738, %v2_8280
  %v3_9738 = inttoptr i32 %v2_9738 to i8*
  %v4_9738 = load i8, i8* %v3_9738, align 1
  %v6_9738 = zext i8 %v4_9738 to i32
  store i32 %v6_9738, i32* %r0.global-to-local, align 4
  %v1_973c = add nsw i32 %v6_9738, -48
  store i32 %v1_973c, i32* %r3.global-to-local, align 4
  %v2_9740 = icmp ugt i32 %v1_973c, 8
  store i1 %v2_9740, i1* %cpsr_c.global-to-local, align 1
  %v3_9740 = sub nsw i32 56, %v6_9738
  %v4_9740 = and i32 %v3_9740, %v1_973c
  %v5_9740 = icmp slt i32 %v4_9740, 0
  store i1 %v5_9740, i1* %cpsr_v.global-to-local, align 1
  %v6_9740 = icmp ult i8 %v4_9738, 57
  store i1 %v6_9740, i1* %cpsr_n.global-to-local, align 1
  %v7_9740 = icmp eq i32 %v1_973c, 9
  store i1 %v7_9740, i1* %cpsr_z.global-to-local, align 1
  %v2_9744 = xor i1 %v7_9740, true
  %v3_9744 = and i1 %v2_9740, %v2_9744
  br i1 %v3_9744, label %.thread142, label %dec_label_pc_974c

.thread142:                                       ; preds = %bb232
  %v4_9744 = load i32, i32* @r6, align 4
  br label %dec_label_pc_9774

dec_label_pc_974c:                                ; preds = %bb232
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_975c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9750

dec_label_pc_9750:                                ; preds = %dec_label_pc_9750, %dec_label_pc_974c
  %v0_9750 = phi i32 [ %v1_9750, %dec_label_pc_9750 ], [ 0, %dec_label_pc_974c ]
  %v1_9750 = add i32 %v0_9750, 1
  store i32 %v1_9750, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  store i32 %v1_9750, i32* %stack_var_-40, align 4
  %v2_975c = add i32 %v1_9750, %v1_975c.pre
  %v3_975c = inttoptr i32 %v2_975c to i8*
  %v4_975c = load i8, i8* %v3_975c, align 1
  %v6_975c = zext i8 %v4_975c to i32
  store i32 %v6_975c, i32* %r0.global-to-local, align 4
  %v1_9760 = add nsw i32 %v6_975c, -48
  %v2_9764 = icmp ugt i32 %v1_9760, 8
  store i1 %v2_9764, i1* %cpsr_c.global-to-local, align 1
  %v3_9764 = sub nsw i32 56, %v6_975c
  %v4_9764 = and i32 %v3_9764, %v1_9760
  %v5_9764 = icmp slt i32 %v4_9764, 0
  store i1 %v5_9764, i1* %cpsr_v.global-to-local, align 1
  %v6_9764 = icmp ult i8 %v4_975c, 57
  store i1 %v6_9764, i1* %cpsr_n.global-to-local, align 1
  %v7_9764 = icmp eq i32 %v1_9760, 9
  store i1 %v7_9764, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9750, i32* %r3.global-to-local, align 4
  %v2_976c = xor i1 %v2_9764, true
  %v3_976c = or i1 %v7_9764, %v2_976c
  br i1 %v3_976c, label %dec_label_pc_9750, label %dec_label_pc_9774

dec_label_pc_9774:                                ; preds = %dec_label_pc_9750, %.thread142
  %v2_9780 = phi i32 [ %v4_9744, %.thread142 ], [ %v2_975c, %dec_label_pc_9750 ]
  %v0_9774 = phi i32 [ %v6_9738, %.thread142 ], [ %v6_975c, %dec_label_pc_9750 ]
  store i32 %v2_9780, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9774 = icmp eq i32 %v0_9774, 0
  store i1 %v2_9774, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9774, label %dec_label_pc_98c0, label %dec_label_pc_977c

dec_label_pc_977c:                                ; preds = %dec_label_pc_9774
  store i32 0, i32* @r5, align 4
  %v3_9780 = inttoptr i32 %v2_9780 to i8*
  store i8 0, i8* %v3_9780, align 1
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9788 = load i32, i32* %stack_var_-40, align 4
  %v1_978c = add i32 %v3_9788, 1
  store i32 %v1_978c, i32* %ip.global-to-local, align 4
  store i32 %v1_978c, i32* %stack_var_-40, align 4
  %v0_9794 = load i32, i32* @r6, align 4
  %v2_9794 = add i32 %v0_9794, %v1_978c
  %v3_9794 = inttoptr i32 %v2_9794 to i8*
  %v4_9794 = load i8, i8* %v3_9794, align 1
  %v6_9794 = zext i8 %v4_9794 to i32
  store i32 %v6_9794, i32* %r3.global-to-local, align 4
  %v2_9798 = icmp ugt i8 %v4_9794, 31
  store i1 %v2_9798, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9798 = icmp ult i8 %v4_9794, 32
  store i1 %v6_9798, i1* %cpsr_n.global-to-local, align 1
  %v7_9798 = icmp eq i8 %v4_9794, 32
  store i1 %v7_9798, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9798, label %bb233, label %.thread56

.thread56:                                        ; preds = %dec_label_pc_977c
  store i32 %v2_9794, i32* @r4, align 4
  br label %bb234

bb233:                                            ; preds = %dec_label_pc_977c
  %v2_979c = add i32 %v3_9788, 2
  store i32 %v2_979c, i32* %ip.global-to-local, align 4
  %v2_97a0 = add i32 %v0_9794, %v2_979c
  store i32 %v2_97a0, i32* @r4, align 4
  store i32 %v2_979c, i32* %stack_var_-40, align 4
  br label %bb234

bb234:                                            ; preds = %.thread56, %bb233
  %v0_97a8 = phi i32 [ %v2_9794, %.thread56 ], [ %v2_97a0, %bb233 ]
  store i32 %v0_97a8, i32* %r0.global-to-local, align 4
  %v1_97ac = inttoptr i32 %v0_97a8 to i8*
  %v2_97ac = call i32 @function_12ad0(i8* %v1_97ac)
  store i32 ptrtoint ([5 x i8]* @global_var_15d88.45 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_97ac, i32* @r1, align 4
  %v0_97b8 = load i32, i32* @r4, align 4
  store i32 %v0_97b8, i32* %r0.global-to-local, align 4
  %v4_97bc = inttoptr i32 %v0_97b8 to i8*
  %v5_97bc = call i32 @function_12e24(i8* %v4_97bc, i32 %v2_97ac, i32 ptrtoint ([5 x i8]* @global_var_15d88.45 to i32))
  store i32 %v5_97bc, i32* %r0.global-to-local, align 4
  %v1_97c0 = add i32 %v5_97bc, 1
  %v2_97c0 = icmp eq i32 %v5_97bc, -1
  store i1 %v2_97c0, i1* %cpsr_c.global-to-local, align 1
  %v3_97c0 = sub i32 0, %v5_97bc
  %v4_97c0 = and i32 %v1_97c0, %v3_97c0
  %v5_97c0 = icmp slt i32 %v4_97c0, 0
  store i1 %v5_97c0, i1* %cpsr_v.global-to-local, align 1
  %v6_97c0 = icmp slt i32 %v1_97c0, 0
  store i1 %v6_97c0, i1* %cpsr_n.global-to-local, align 1
  %v7_97c0 = icmp eq i32 %v1_97c0, 0
  store i1 %v7_97c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_97c0, label %.thread60, label %dec_label_pc_97d0

.thread60:                                        ; preds = %bb234
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v4_97c8 = load i32, i32* %v11_82f4, align 4
  store i32 %v4_97c8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_9804

dec_label_pc_97d0:                                ; preds = %bb234
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_97d4 = load i32, i32* %stack_var_-40, align 4
  %v0_97d8 = load i32, i32* @r6, align 4
  %v2_97d8 = add i32 %v0_97d8, %v3_97d4
  store i32 %v2_97d8, i32* @r4, align 4
  store i32 %v2_97d8, i32* %r0.global-to-local, align 4
  %v1_97e0 = inttoptr i32 %v2_97d8 to i8*
  %v2_97e0 = call i32 @function_12ad0(i8* %v1_97e0)
  store i32 ptrtoint ([5 x i8]* @global_var_15d88.45 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_97e0, i32* @r1, align 4
  %v0_97ec = load i32, i32* @r4, align 4
  store i32 %v0_97ec, i32* %r0.global-to-local, align 4
  %v4_97f0 = inttoptr i32 %v0_97ec to i8*
  %v5_97f0 = call i32 @function_12e24(i8* %v4_97f0, i32 %v2_97e0, i32 ptrtoint ([5 x i8]* @global_var_15d88.45 to i32))
  store i32 %v5_97f0, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_97f8 = load i32, i32* %stack_var_-40, align 4
  %v2_97fc = add i32 %v3_97f8, %v5_97f0
  store i32 %v2_97fc, i32* %ip.global-to-local, align 4
  store i32 %v2_97fc, i32* %stack_var_-40, align 4
  br label %dec_label_pc_9804

dec_label_pc_9804:                                ; preds = %.thread60, %dec_label_pc_97d0
  %v0_9d8c = phi i32 [ %v4_97c8, %.thread60 ], [ %v2_97fc, %dec_label_pc_97d0 ]
  %v0_9804 = load i32, i32* @r6, align 4
  %v2_9804 = add i32 %v0_9804, %v0_9d8c
  %v3_9804 = inttoptr i32 %v2_9804 to i8*
  %v4_9804 = load i8, i8* %v3_9804, align 1
  %v6_9804 = zext i8 %v4_9804 to i32
  store i32 %v6_9804, i32* %r3.global-to-local, align 4
  %v2_9808 = icmp ugt i8 %v4_9804, 33
  store i1 %v2_9808, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9808 = icmp ult i8 %v4_9804, 34
  store i1 %v6_9808, i1* %cpsr_n.global-to-local, align 1
  %v7_9808 = icmp eq i8 %v4_9804, 34
  store i1 %v7_9808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9808, label %dec_label_pc_9d8c, label %dec_label_pc_9810

dec_label_pc_9810:                                ; preds = %dec_label_pc_9d8c, %dec_label_pc_9804, %dec_label_pc_9db4
  %v0_9810 = load i32, i32* @r6, align 4
  store i32 %v0_9810, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_9818 = inttoptr i32 %v0_9810 to i8*
  %v3_9818 = call i32 @function_12bfc(i8* %v2_9818, i32 10)
  store i32 %v3_9818, i32* %r0.global-to-local, align 4
  %v1_981c = add i32 %v3_9818, -1
  store i32 %v1_981c, i32* %r3.global-to-local, align 4
  %v1_9820 = add i32 %v3_9818, -9
  %v2_9820 = icmp ugt i32 %v1_981c, 7
  store i1 %v2_9820, i1* %cpsr_c.global-to-local, align 1
  %v3_9820 = sub i32 8, %v3_9818
  %v4_9820 = and i32 %v3_9820, %v1_981c
  %v5_9820 = icmp slt i32 %v4_9820, 0
  store i1 %v5_9820, i1* %cpsr_v.global-to-local, align 1
  %v6_9820 = icmp slt i32 %v1_9820, 0
  store i1 %v6_9820, i1* %cpsr_n.global-to-local, align 1
  %v7_9820 = icmp eq i32 %v1_981c, 8
  store i1 %v7_9820, i1* %cpsr_z.global-to-local, align 1
  %v2_9824 = xor i1 %v2_9820, true
  %v3_9824 = or i1 %v7_9820, %v2_9824
  br i1 %v3_9824, label %dec_label_pc_9838.preheader, label %dec_label_pc_984c

dec_label_pc_9838.preheader:                      ; preds = %dec_label_pc_9810
  store i32 %v2_87d8, i32* %ip.global-to-local, align 4
  %v6_9828 = add i32 %v3_9818, %v2_87d8
  store i32 %v6_9828, i32* @r4, align 4
  br label %dec_label_pc_9838

dec_label_pc_9834:                                ; preds = %dec_label_pc_9838
  %v1_9834 = call i32 @function_148c4(i32 1)
  store i32 %v1_9834, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9838

dec_label_pc_9838:                                ; preds = %dec_label_pc_9838.preheader, %dec_label_pc_9834
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_983c = call i32 @function_13760(i32* null)
  %v1_9840 = load i32, i32* @r4, align 4
  %v2_9840 = sub i32 %v2_983c, %v1_9840
  %v3_9840 = icmp uge i32 %v2_983c, %v1_9840
  store i1 %v3_9840, i1* %cpsr_c.global-to-local, align 1
  %v4_9840 = xor i32 %v1_9840, %v2_983c
  %v5_9840 = xor i32 %v2_9840, %v2_983c
  %v6_9840 = and i32 %v5_9840, %v4_9840
  %v7_9840 = icmp slt i32 %v6_9840, 0
  store i1 %v7_9840, i1* %cpsr_v.global-to-local, align 1
  %v8_9840 = icmp slt i32 %v2_9840, 0
  store i1 %v8_9840, i1* %cpsr_n.global-to-local, align 1
  %v9_9840 = icmp eq i32 %v2_983c, %v1_9840
  store i1 %v9_9840, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %r0.global-to-local, align 4
  br i1 %v3_9840, label %dec_label_pc_984c, label %dec_label_pc_9834

dec_label_pc_984c:                                ; preds = %dec_label_pc_9838, %dec_label_pc_9810
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_9850 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9850, i32* @r4, align 4
  %v0_9854 = load i32, i32* @r6, align 4
  %v2_9854 = add i32 %v0_9854, %v3_9850
  store i32 %v2_9854, i32* @r5, align 4
  store i32 %v2_9854, i32* %r0.global-to-local, align 4
  %v1_985c = inttoptr i32 %v2_9854 to i8*
  %v2_985c = call i32 @function_12ad0(i8* %v1_985c)
  store i32 ptrtoint ([5 x i8]* @global_var_15d80.43 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_985c, i32* @r1, align 4
  %v0_9868 = load i32, i32* @r5, align 4
  store i32 %v0_9868, i32* %r0.global-to-local, align 4
  %v4_986c = inttoptr i32 %v0_9868 to i8*
  %v5_986c = call i32 @function_12e24(i8* %v4_986c, i32 %v2_985c, i32 ptrtoint ([5 x i8]* @global_var_15d80.43 to i32))
  store i32 %v5_986c, i32* %r0.global-to-local, align 4
  %v1_9870 = add i32 %v5_986c, -4
  %v2_9870 = icmp ugt i32 %v5_986c, 3
  store i1 %v2_9870, i1* %cpsr_c.global-to-local, align 1
  %v3_9870 = sub i32 3, %v5_986c
  %v4_9870 = and i32 %v3_9870, %v5_986c
  %v5_9870 = icmp slt i32 %v4_9870, 0
  store i1 %v5_9870, i1* %cpsr_v.global-to-local, align 1
  %v6_9870 = icmp slt i32 %v1_9870, 0
  store i1 %v6_9870, i1* %cpsr_n.global-to-local, align 1
  %v7_9870 = icmp eq i32 %v5_986c, 4
  store i1 %v7_9870, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9870, label %dec_label_pc_9c68, label %dec_label_pc_9878

dec_label_pc_9878:                                ; preds = %dec_label_pc_984c
  %v0_9878 = load i32, i32* @r6, align 4
  %v1_9878 = load i32, i32* @r4, align 4
  %v2_9878 = add i32 %v1_9878, %v0_9878
  %v3_9878 = inttoptr i32 %v2_9878 to i8*
  %v4_9878 = load i8, i8* %v3_9878, align 1
  %v6_9878 = zext i8 %v4_9878 to i32
  store i32 %v6_9878, i32* %r3.global-to-local, align 4
  %v2_987c = icmp ugt i8 %v4_9878, 46
  store i1 %v2_987c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_987c = icmp ult i8 %v4_9878, 47
  store i1 %v6_987c, i1* %cpsr_n.global-to-local, align 1
  %v7_987c = icmp eq i8 %v4_9878, 47
  store i1 %v7_987c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_987c, label %dec_label_pc_9de0, label %dec_label_pc_9884

dec_label_pc_9884:                                ; preds = %dec_label_pc_9dfc, %dec_label_pc_9de0, %dec_label_pc_9d38, %dec_label_pc_9d1c, %dec_label_pc_9878, %dec_label_pc_9e2c, %dec_label_pc_9d68
  %v0_9884 = load i32, i32* %sb.global-to-local, align 4
  %v1_9888 = add i32 %v0_9884, 1431
  store i32 %v1_9888, i32* @r0, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15d5c.21 to i32), i32* @r1, align 4
  store i32 4, i32* @r2, align 4
  %v4_9894 = call i32 @function_13ab0(i32 %v1_9888, i32 ptrtoint ([4 x i8]* @global_var_15d5c.21 to i32), i32 4)
  store i32 %v4_9894, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v2_989c = load i32, i32* @r8, align 4
  %v3_989c = add i32 %v2_989c, -1452
  %v4_989c = inttoptr i32 %v3_989c to i8*
  store i8 10, i8* %v4_989c, align 1
  br label %dec_label_pc_8838

dec_label_pc_98a4:                                ; preds = %dec_label_pc_8610
  store i32 %v1_8610, i32* %r3.global-to-local, align 4
  %v1_98a8 = trunc i32 %v1_8610 to i8
  store i8 %v1_98a8, i8* %v2_8650, align 1
  %v0_98ac = load i32, i32* @r6, align 4
  %v1_98ac = add i32 %v0_98ac, -1431
  %v2_98ac = inttoptr i32 %v1_98ac to i32*
  %v3_98ac = load i32, i32* %v2_98ac, align 4
  store i32 %v3_98ac, i32* %r0.global-to-local, align 4
  %v1_98b0 = call i32 @function_13490(i32 %v3_98ac)
  store i32 %v1_98b0, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_98b8 = load i32, i32* @r6, align 4
  %v2_98b8 = add i32 %v1_98b8, -1431
  %v3_98b8 = inttoptr i32 %v2_98b8 to i32*
  store i32 -1, i32* %v3_98b8, align 4
  br label %dec_label_pc_8630

dec_label_pc_98c0:                                ; preds = %dec_label_pc_9774, %dec_label_pc_96a4, %dec_label_pc_9678
  %v0_98c0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_98c0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15d74.39 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v5_98d0 = call i32 @function_12b94(i32 %v2_8280, i32 %v0_98c0, i32 ptrtoint ([5 x i8]* @global_var_15d74.39 to i32), i32 4)
  %v0_98d4 = load i32, i32* %sb.global-to-local, align 4
  %v1_98d8 = add i32 %v0_98d4, 1431
  store i32 %v1_98d8, i32* @r4, align 4
  store i32 %v5_98d0, i32* @r5, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15d90.47 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_98d8, i32* %r0.global-to-local, align 4
  %v3_98e8 = inttoptr i32 %v1_98d8 to i8*
  %v4_98e8 = call i32 @function_12eb0(i8* %v3_98e8, i32 ptrtoint ([5 x i8]* @global_var_15d90.47 to i32))
  store i32 %v4_98e8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_98ec = icmp slt i32 %v4_98e8, 0
  store i1 %v1_98ec, i1* %cpsr_n.global-to-local, align 1
  %v2_98ec = icmp eq i32 %v4_98e8, 0
  store i1 %v2_98ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_98ec, label %dec_label_pc_9aa8, label %dec_label_pc_98f4

dec_label_pc_98f4:                                ; preds = %dec_label_pc_9aa8, %dec_label_pc_98c0
  store i32 7, i32* %r3.global-to-local, align 4
  %v2_98f8 = load i32, i32* @r8, align 4
  %v3_98f8 = add i32 %v2_98f8, -1452
  %v4_98f8 = inttoptr i32 %v3_98f8 to i8*
  store i8 7, i8* %v4_98f8, align 1
  br label %dec_label_pc_98fc

dec_label_pc_98fc:                                ; preds = %bb240, %dec_label_pc_98f4
  %v0_98fc = load i32, i32* @r5, align 4
  store i32 %v0_98fc, i32* %r2.global-to-local, align 4
  %v0_9900 = load i32, i32* @r8, align 4
  %v1_9900 = add i32 %v0_9900, -1456
  %v2_9900 = inttoptr i32 %v1_9900 to i32*
  %v3_9900 = load i32, i32* %v2_9900, align 4
  store i32 %v3_9900, i32* %r0.global-to-local, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_990c = call i32 @function_13ca0(i32 %v3_9900, i32* nonnull %stack_var_-20809, i32 %v0_98fc, i32 16384)
  store i32 %v5_990c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8838

dec_label_pc_9914:                                ; preds = %dec_label_pc_8e04
  %v2_9914 = add i32 %v0_9914, -10240
  %v3_9914 = icmp ugt i32 %v0_9914, 10239
  store i1 %v3_9914, i1* %cpsr_c.global-to-local, align 1
  %v4_9914 = sub i32 10239, %v0_9914
  %v5_9914 = and i32 %v4_9914, %v0_9914
  %v6_9914 = icmp slt i32 %v5_9914, 0
  store i1 %v6_9914, i1* %cpsr_v.global-to-local, align 1
  %v7_9914 = icmp slt i32 %v2_9914, 0
  store i1 %v7_9914, i1* %cpsr_n.global-to-local, align 1
  %v8_9914 = icmp eq i32 %v0_9914, 10240
  store i1 %v8_9914, i1* %cpsr_z.global-to-local, align 1
  %v5_9918 = icmp slt i32 %v0_9914, 10240
  br i1 %v5_9918, label %dec_label_pc_8838, label %dec_label_pc_8e20

dec_label_pc_9920:                                ; preds = %dec_label_pc_9628
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_9924 = load i32, i32* @r4, align 4
  %v2_9924 = inttoptr i32 %v1_9924 to i32*
  store i32 104, i32* %v2_9924, align 4
  br label %dec_label_pc_965c

dec_label_pc_992c:                                ; preds = %dec_label_pc_9430
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_9930 = load i32, i32* %fp.global-to-local, align 4
  %v2_9930 = inttoptr i32 %v1_9930 to i32*
  store i32 104, i32* %v2_9930, align 4
  br label %dec_label_pc_9934

dec_label_pc_9934:                                ; preds = %dec_label_pc_9950, %dec_label_pc_992c
  %v0_9934 = load i32, i32* @r8, align 4
  %v1_9934 = add i32 %v0_9934, -1456
  %v2_9934 = inttoptr i32 %v1_9934 to i32*
  %v3_9934 = load i32, i32* %v2_9934, align 4
  store i32 %v3_9934, i32* %r0.global-to-local, align 4
  %v1_9938 = call i32 @function_13490(i32 %v3_9934)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v1_9944 = load i32, i32* @r8, align 4
  %v2_9944 = add i32 %v1_9944, -1456
  %v3_9944 = inttoptr i32 %v2_9944 to i32*
  store i32 -1, i32* %v3_9944, align 4
  %v0_9948 = load i32, i32* %lr.global-to-local, align 4
  %v1_9948 = trunc i32 %v0_9948 to i8
  %v2_9948 = load i32, i32* @r8, align 4
  %v3_9948 = add i32 %v2_9948, -1452
  %v4_9948 = inttoptr i32 %v3_9948 to i8*
  store i8 %v1_9948, i8* %v4_9948, align 1
  br label %dec_label_pc_8838

dec_label_pc_9950:                                ; preds = %dec_label_pc_9458
  %v0_9950 = load i32, i32* %fp.global-to-local, align 4
  %v1_9950 = inttoptr i32 %v0_9950 to i32*
  %v2_9950 = load i32, i32* %v1_9950, align 4
  store i32 %v2_9950, i32* %r3.global-to-local, align 4
  %v1_9954 = add i32 %v2_9950, -11
  %v2_9954 = icmp ugt i32 %v2_9950, 10
  store i1 %v2_9954, i1* %cpsr_c.global-to-local, align 1
  %v3_9954 = sub i32 10, %v2_9950
  %v4_9954 = and i32 %v3_9954, %v2_9950
  %v5_9954 = icmp slt i32 %v4_9954, 0
  store i1 %v5_9954, i1* %cpsr_v.global-to-local, align 1
  %v6_9954 = icmp slt i32 %v1_9954, 0
  store i1 %v6_9954, i1* %cpsr_n.global-to-local, align 1
  %v7_9954 = icmp eq i32 %v2_9950, 11
  store i1 %v7_9954, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9954, label %dec_label_pc_8838, label %dec_label_pc_9934

dec_label_pc_9960:                                ; preds = %bb230
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_996c = load i32, i32* @r5, align 4
  %v1_996c = add i32 %v0_996c, 4
  %v2_996c = inttoptr i32 %v1_996c to i8*
  %v3_996c = load i8, i8* %v2_996c, align 1
  %v4_996c = zext i8 %v3_996c to i32
  store i32 %v4_996c, i32* %r3.global-to-local, align 4
  %v2_9970 = icmp ugt i8 %v3_996c, 114
  store i1 %v2_9970, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9970 = icmp ult i8 %v3_996c, 115
  store i1 %v6_9970, i1* %cpsr_n.global-to-local, align 1
  %v7_9970 = icmp eq i8 %v3_996c, 115
  store i1 %v7_9970, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9970, label %bb235, label %.thread63

bb235:                                            ; preds = %dec_label_pc_9960
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread63

.thread63:                                        ; preds = %dec_label_pc_9960, %bb235
  %v3_9980 = phi i32 [ 7, %dec_label_pc_9960 ], [ 8, %bb235 ]
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 %v0_996c, i32* @r0, align 4
  %v1_9988 = load i32, i32* %r6.global-to-local, align 4
  %v2_9988 = sub i32 %v1_9988, %v3_9980
  store i32 %v2_9988, i32* @r2, align 4
  %v2_998c = add i32 %v3_9980, %v0_996c
  store i32 %v2_998c, i32* @r1, align 4
  %v3_9990 = call i32 @function_13ac0(i32 %v0_996c, i32 %v2_998c, i32 %v2_9988)
  store i32 %v3_9990, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v0_9998 = load i32, i32* @r7, align 4
  store i32 %v0_9998, i32* %stack_var_-40, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  %v1_99a0 = load i32, i32* @r4, align 4
  %v2_99a0 = add i32 %v1_99a0, %v2_8280
  %v3_99a0 = inttoptr i32 %v2_99a0 to i8*
  %v4_99a0 = load i8, i8* %v3_99a0, align 1
  %v6_99a0 = zext i8 %v4_99a0 to i32
  store i32 %v6_99a0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_99a4 = icmp eq i8 %v4_99a0, 0
  store i1 %v2_99a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_99a4, label %dec_label_pc_99e8, label %dec_label_pc_99ac

dec_label_pc_99ac:                                ; preds = %.thread63
  %v2_99ac = icmp ugt i8 %v4_99a0, 46
  store i1 %v2_99ac, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_99ac = icmp ult i8 %v4_99a0, 47
  store i1 %v6_99ac, i1* %cpsr_n.global-to-local, align 1
  %v7_99ac = icmp eq i8 %v4_99a0, 47
  store i1 %v7_99ac, i1* %cpsr_z.global-to-local, align 1
  %v1_99b0 = load i32, i32* @r5, align 4
  br i1 %v7_99ac, label %bb236, label %dec_label_pc_99b8

bb236:                                            ; preds = %dec_label_pc_99ac
  store i32 %v1_99b0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9b48

dec_label_pc_99b8:                                ; preds = %dec_label_pc_99ac
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_99c8

dec_label_pc_99c0:                                ; preds = %dec_label_pc_99c8
  %v2_99c0 = icmp ugt i8 %v4_99d4, 46
  store i1 %v2_99c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_99c0 = icmp ult i8 %v4_99d4, 47
  store i1 %v6_99c0, i1* %cpsr_n.global-to-local, align 1
  %v7_99c0 = icmp eq i8 %v4_99d4, 47
  store i1 %v7_99c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_99c0, label %dec_label_pc_9b48, label %dec_label_pc_99c8

dec_label_pc_99c8:                                ; preds = %dec_label_pc_99c0, %dec_label_pc_99b8
  %v0_99dc = phi i32 [ %v1_99dc, %dec_label_pc_99c0 ], [ 1, %dec_label_pc_99b8 ]
  store i32 %v0_99dc, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 %v0_99dc, i32* %stack_var_-40, align 4
  %v2_99d4 = add i32 %v0_99dc, %v1_99b0
  %v3_99d4 = inttoptr i32 %v2_99d4 to i8*
  %v4_99d4 = load i8, i8* %v3_99d4, align 1
  %v6_99d4 = zext i8 %v4_99d4 to i32
  store i32 %v6_99d4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_99d8 = icmp eq i8 %v4_99d4, 0
  store i1 %v2_99d8, i1* %cpsr_z.global-to-local, align 1
  %v1_99dc = add i32 %v0_99dc, 1
  store i32 %v1_99dc, i32* %r3.global-to-local, align 4
  store i32 %v2_99d4, i32* %r1.global-to-local, align 4
  br i1 %v2_99d8, label %dec_label_pc_99e8, label %dec_label_pc_99c0

dec_label_pc_99e8:                                ; preds = %dec_label_pc_99c8, %.thread63, %dec_label_pc_9b48
  %v0_99e8 = load i32, i32* @r5, align 4
  store i32 %v0_99e8, i32* %r0.global-to-local, align 4
  %v1_99ec = inttoptr i32 %v0_99e8 to i8*
  %v2_99ec = call i32 @function_12ad0(i8* %v1_99ec)
  store i32 %v2_99ec, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_99f0 = icmp slt i32 %v2_99ec, 0
  store i1 %v1_99f0, i1* %cpsr_n.global-to-local, align 1
  %v2_99f0 = icmp eq i32 %v2_99ec, 0
  store i1 %v2_99f0, i1* %cpsr_z.global-to-local, align 1
  %tmp237 = icmp slt i32 %v2_99ec, 1
  br i1 %tmp237, label %dec_label_pc_9a14, label %dec_label_pc_99f8

dec_label_pc_99f8:                                ; preds = %dec_label_pc_99e8
  %v0_99f8 = load i32, i32* @r5, align 4
  store i32 %v0_99f8, i32* %r0.global-to-local, align 4
  %v1_99fc = inttoptr i32 %v0_99f8 to i8*
  %v2_99fc = call i32 @function_12ad0(i8* %v1_99fc)
  store i32 %v2_99fc, i32* %r0.global-to-local, align 4
  %v1_9a00 = add i32 %v2_99fc, -127
  %v2_9a00 = icmp ugt i32 %v2_99fc, 126
  store i1 %v2_9a00, i1* %cpsr_c.global-to-local, align 1
  %v3_9a00 = sub i32 126, %v2_99fc
  %v4_9a00 = and i32 %v3_9a00, %v2_99fc
  %v5_9a00 = icmp slt i32 %v4_9a00, 0
  store i1 %v5_9a00, i1* %cpsr_v.global-to-local, align 1
  %v6_9a00 = icmp slt i32 %v1_9a00, 0
  store i1 %v6_9a00, i1* %cpsr_n.global-to-local, align 1
  %v7_9a00 = icmp eq i32 %v2_99fc, 127
  store i1 %v7_9a00, i1* %cpsr_z.global-to-local, align 1
  %v7_9a04 = icmp sgt i32 %v2_99fc, 127
  br i1 %v7_9a04, label %.thread66, label %bb238

bb238:                                            ; preds = %dec_label_pc_99f8
  %v8_9a04 = load i32, i32* %sb.global-to-local, align 4
  %v9_9a08 = add i32 %v8_9a04, 789
  store i32 %v9_9a08, i32* %r0.global-to-local, align 4
  %v8_9a0c = load i32, i32* @r5, align 4
  store i32 %v8_9a0c, i32* %r1.global-to-local, align 4
  br label %.thread66

.thread66:                                        ; preds = %dec_label_pc_99f8, %bb238
  store i32 39444, i32* %lr.global-to-local, align 4
  %v3_9a10 = xor i1 %v6_9a00, %v5_9a00
  %v4_9a10 = or i1 %v7_9a00, %v3_9a10
  call void @__pseudo_cond_branch(i1 %v4_9a10, i32 ptrtoint (i32* @global_var_12af8.48 to i32))
  br label %dec_label_pc_9a14

dec_label_pc_9a14:                                ; preds = %dec_label_pc_99e8, %.thread66
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9a18 = load i32, i32* %stack_var_-40, align 4
  %v0_9a1c = load i32, i32* @r5, align 4
  %v2_9a1c = add i32 %v3_9a18, 1
  %v1_9a20 = add i32 %v2_9a1c, %v0_9a1c
  store i32 %v1_9a20, i32* %r0.global-to-local, align 4
  %v1_9a24 = inttoptr i32 %v1_9a20 to i8*
  %v2_9a24 = call i32 @function_12ad0(i8* %v1_9a24)
  store i32 %v2_9a24, i32* %r0.global-to-local, align 4
  %v1_9a28 = add i32 %v2_9a24, -255
  %v2_9a28 = icmp ugt i32 %v2_9a24, 254
  store i1 %v2_9a28, i1* %cpsr_c.global-to-local, align 1
  %v3_9a28 = sub i32 254, %v2_9a24
  %v4_9a28 = and i32 %v3_9a28, %v2_9a24
  %v5_9a28 = icmp slt i32 %v4_9a28, 0
  store i1 %v5_9a28, i1* %cpsr_v.global-to-local, align 1
  %v6_9a28 = icmp slt i32 %v1_9a28, 0
  store i1 %v6_9a28, i1* %cpsr_n.global-to-local, align 1
  %v7_9a28 = icmp eq i32 %v2_9a24, 255
  store i1 %v7_9a28, i1* %cpsr_z.global-to-local, align 1
  %v8_9a2c = icmp sgt i32 %v2_9a24, 255
  br i1 %v8_9a2c, label %dec_label_pc_9400, label %dec_label_pc_9a30

dec_label_pc_9a30:                                ; preds = %dec_label_pc_9a14
  %v0_9a30 = load i32, i32* %sb.global-to-local, align 4
  %v1_9a34 = add i32 %v0_9a30, 533
  store i32 %v1_9a34, i32* @r4, align 4
  store i32 %v1_9a34, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9a40 = call i32 @function_12b70(i32 %v1_9a34, i32 255)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9a48 = load i32, i32* %stack_var_-40, align 4
  %v0_9a4c = load i32, i32* @r5, align 4
  %v2_9a4c = add i32 %v3_9a48, 1
  %v1_9a50 = add i32 %v2_9a4c, %v0_9a4c
  store i32 %v1_9a50, i32* %r0.global-to-local, align 4
  %v1_9a54 = inttoptr i32 %v1_9a50 to i8*
  %v2_9a54 = call i32 @function_12ad0(i8* %v1_9a54)
  store i32 %v2_9a54, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9a58 = icmp slt i32 %v2_9a54, 0
  store i1 %v1_9a58, i1* %cpsr_n.global-to-local, align 1
  %v2_9a58 = icmp eq i32 %v2_9a54, 0
  store i1 %v2_9a58, i1* %cpsr_z.global-to-local, align 1
  %tmp239 = icmp slt i32 %v2_9a54, 1
  br i1 %tmp239, label %dec_label_pc_9400, label %dec_label_pc_9a60

dec_label_pc_9a60:                                ; preds = %dec_label_pc_9a30
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9a64 = load i32, i32* %stack_var_-40, align 4
  %v0_9a68 = load i32, i32* @r5, align 4
  %v0_9a6c = load i32, i32* @r4, align 4
  store i32 %v0_9a6c, i32* @r0, align 4
  %v2_9a68 = add i32 %v3_9a64, 1
  %v1_9a70 = add i32 %v2_9a68, %v0_9a68
  store i32 %v1_9a70, i32* %r1.global-to-local, align 4
  %v2_9a74 = inttoptr i32 %v0_9a6c to i8*
  %v3_9a74 = call i32 @function_12af8(i8* %v2_9a74, i32 %v1_9a70)
  store i32 %v3_9a74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9400

dec_label_pc_9a7c:                                ; preds = %dec_label_pc_8dd0
  %v0_9a7c = load i32, i32* @r8, align 4
  %v1_9a7c = add i32 %v0_9a7c, -1456
  %v2_9a7c = inttoptr i32 %v1_9a7c to i32*
  %v3_9a7c = load i32, i32* %v2_9a7c, align 4
  store i32 %v3_9a7c, i32* %r0.global-to-local, align 4
  %v1_9a80 = call i32 @function_13490(i32 %v3_9a7c)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_9a8c = load i32, i32* @r8, align 4
  %v2_9a8c = add i32 %v1_9a8c, -1456
  %v3_9a8c = inttoptr i32 %v2_9a8c to i32*
  store i32 -1, i32* %v3_9a8c, align 4
  %v0_9a90 = load i32, i32* %r3.global-to-local, align 4
  %v1_9a90 = trunc i32 %v0_9a90 to i8
  %v2_9a90 = load i32, i32* @r8, align 4
  %v3_9a90 = add i32 %v2_9a90, -1452
  %v4_9a90 = inttoptr i32 %v3_9a90 to i8*
  store i8 %v1_9a90, i8* %v4_9a90, align 1
  br label %dec_label_pc_8838

dec_label_pc_9a98:                                ; preds = %dec_label_pc_9650
  %v0_9a98 = load i32, i32* @r8, align 4
  %v1_9a98 = add i32 %v0_9a98, -1452
  %v2_9a98 = inttoptr i32 %v1_9a98 to i8*
  %v3_9a98 = load i8, i8* %v2_9a98, align 1
  %v4_9a98 = zext i8 %v3_9a98 to i32
  store i32 %v4_9a98, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9a9c = icmp eq i8 %v3_9a98, 0
  store i1 %v2_9a9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9a9c, label %dec_label_pc_8838, label %dec_label_pc_9400

dec_label_pc_9aa8:                                ; preds = %dec_label_pc_98c0
  %v0_9aa8 = load i32, i32* @r4, align 4
  store i32 %v0_9aa8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15d5c.21 to i32), i32* %r1.global-to-local, align 4
  %v3_9ab0 = inttoptr i32 %v0_9aa8 to i8*
  %v4_9ab0 = call i32 @function_12eb0(i8* %v3_9ab0, i32 ptrtoint ([4 x i8]* @global_var_15d5c.21 to i32))
  store i32 %v4_9ab0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9ab4 = icmp slt i32 %v4_9ab0, 0
  store i1 %v1_9ab4, i1* %cpsr_n.global-to-local, align 1
  %v2_9ab4 = icmp eq i32 %v4_9ab0, 0
  store i1 %v2_9ab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9ab4, label %bb240, label %dec_label_pc_98f4

bb240:                                            ; preds = %dec_label_pc_9aa8
  %v0_9abc = load i32, i32* %fp.global-to-local, align 4
  %v1_9abc = load i32, i32* @r5, align 4
  %v2_9abc = sub i32 %v0_9abc, %v1_9abc
  %v3_9abc = icmp uge i32 %v0_9abc, %v1_9abc
  store i1 %v3_9abc, i1* %cpsr_c.global-to-local, align 1
  %v4_9abc = xor i32 %v1_9abc, %v0_9abc
  %v5_9abc = xor i32 %v2_9abc, %v0_9abc
  %v6_9abc = and i32 %v5_9abc, %v4_9abc
  %v7_9abc = icmp slt i32 %v6_9abc, 0
  store i1 %v7_9abc, i1* %cpsr_v.global-to-local, align 1
  %v8_9abc = icmp slt i32 %v2_9abc, 0
  store i1 %v8_9abc, i1* %cpsr_n.global-to-local, align 1
  %v9_9abc = icmp eq i32 %v0_9abc, %v1_9abc
  store i1 %v9_9abc, i1* %cpsr_z.global-to-local, align 1
  %v7_9ac0 = icmp sgt i32 %v0_9abc, %v1_9abc
  %. = select i1 %v7_9ac0, i32 10, i32 1
  store i32 %., i32* %r3.global-to-local, align 4
  %v9_9ac8 = trunc i32 %. to i8
  %v10_9ac8 = load i32, i32* @r8, align 4
  %v11_9ac8 = add i32 %v10_9ac8, -1452
  %v12_9ac8 = inttoptr i32 %v11_9ac8 to i8*
  store i8 %v9_9ac8, i8* %v12_9ac8, align 1
  br label %dec_label_pc_98fc

dec_label_pc_9ad4:                                ; preds = %dec_label_pc_9548
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 36, i32* %r0.global-to-local, align 4
  %v0_9adc = load i32, i32* @r8, align 4
  %v1_9adc = add i32 %v0_9adc, 656
  %v2_9adc = inttoptr i32 %v1_9adc to i32*
  %v3_9adc = load i32, i32* %v2_9adc, align 4
  store i32 %v3_9adc, i32* @r4, align 4
  %v3_9ae0 = call i32 @function_120c0(i32 36, i32* null)
  %v0_9ae4 = load i32, i32* @r4, align 4
  store i32 %v0_9ae4, i32* %r1.global-to-local, align 4
  store i32 %v3_9ae0, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_9af0 = load i32, i32* @r7, align 4
  store i32 %v0_9af0, i32* %r0.global-to-local, align 4
  %v4_9af4 = call i32 @function_12b94(i32 %v0_9af0, i32 %v0_9ae4, i32 %v3_9ae0, i32 11)
  store i32 %v4_9af4, i32* %r0.global-to-local, align 4
  %v0_9af8 = load i32, i32* @r8, align 4
  %v1_9af8 = add i32 %v0_9af8, 656
  %v2_9af8 = inttoptr i32 %v1_9af8 to i32*
  %v3_9af8 = load i32, i32* %v2_9af8, align 4
  %v0_9afc = load i32, i32* @r7, align 4
  %v2_9afc = add i32 %v0_9afc, %v4_9af4
  store i32 %v2_9afc, i32* @r5, align 4
  store i32 %v4_9af4, i32* @r4, align 4
  %v2_9b04 = sub i32 %v3_9af8, %v4_9af4
  store i32 %v2_9b04, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d98.50 to i32), i32* %r2.global-to-local, align 4
  %v0_9b0c = load i32, i32* @sl, align 4
  store i32 %v0_9b0c, i32* %r3.global-to-local, align 4
  store i32 %v2_9afc, i32* %r0.global-to-local, align 4
  %v4_9b14 = call i32 @function_12b94(i32 %v2_9afc, i32 %v2_9b04, i32 ptrtoint (i32* @global_var_15d98.50 to i32), i32 %v0_9b0c)
  store i32 %v4_9b14, i32* %r0.global-to-local, align 4
  %v0_9b18 = load i32, i32* @r8, align 4
  %v1_9b18 = add i32 %v0_9b18, 12
  %v2_9b18 = inttoptr i32 %v1_9b18 to i32*
  %v3_9b18 = load i32, i32* %v2_9b18, align 4
  store i32 %v3_9b18, i32* %r3.global-to-local, align 4
  %v0_9b1c = load i32, i32* @r4, align 4
  %v2_9b1c = add i32 %v0_9b1c, %v4_9b14
  store i32 %v2_9b1c, i32* %r6.global-to-local, align 4
  %v1_9b20 = load i32, i32* %sb.global-to-local, align 4
  %v2_9b20 = add i32 %v1_9b20, %v2_9b1c
  store i32 %v2_9b20, i32* %r2.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  %v1_9b28 = add i32 %v3_9b18, -4
  %v2_9b28 = icmp ugt i32 %v3_9b18, 3
  store i1 %v2_9b28, i1* %cpsr_c.global-to-local, align 1
  %v3_9b28 = sub i32 3, %v3_9b18
  %v4_9b28 = and i32 %v3_9b28, %v3_9b18
  %v5_9b28 = icmp slt i32 %v4_9b28, 0
  store i1 %v5_9b28, i1* %cpsr_v.global-to-local, align 1
  %v6_9b28 = icmp slt i32 %v1_9b28, 0
  store i1 %v6_9b28, i1* %cpsr_n.global-to-local, align 1
  %v7_9b28 = icmp eq i32 %v3_9b18, 4
  store i1 %v7_9b28, i1* %cpsr_z.global-to-local, align 1
  %v3_9b2c = add i32 %v2_9b20, 2115
  %v4_9b2c = inttoptr i32 %v3_9b2c to i8*
  store i8 0, i8* %v4_9b2c, align 1
  %v7_9b30 = icmp sgt i32 %v3_9b18, 4
  br i1 %v7_9b30, label %dec_label_pc_9b34, label %dec_label_pc_9bbc

dec_label_pc_9b34:                                ; preds = %dec_label_pc_9ad4, %dec_label_pc_9bbc, %dec_label_pc_9bcc
  store i32 -1, i32* %r6.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_9b3c = load i32, i32* @r8, align 4
  %v2_9b3c = add i32 %v1_9b3c, 8
  %v3_9b3c = inttoptr i32 %v2_9b3c to i32*
  store i32 -1, i32* %v3_9b3c, align 4
  %v0_9b40 = load i32, i32* %r3.global-to-local, align 4
  %v1_9b40 = trunc i32 %v0_9b40 to i8
  %v2_9b40 = load i32, i32* @r8, align 4
  %v3_9b40 = add i32 %v2_9b40, -1452
  %v4_9b40 = inttoptr i32 %v3_9b40 to i8*
  store i8 %v1_9b40, i8* %v4_9b40, align 1
  br label %dec_label_pc_8838

dec_label_pc_9b48:                                ; preds = %dec_label_pc_99c0, %bb236
  %v2_9b4c = phi i32 [ %v1_99b0, %bb236 ], [ %v2_99d4, %dec_label_pc_99c0 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9b4c = inttoptr i32 %v2_9b4c to i8*
  store i8 0, i8* %v3_9b4c, align 1
  br label %dec_label_pc_99e8

dec_label_pc_9b54:                                ; preds = %dec_label_pc_93f0
  %v0_9b54 = load i32, i32* %sb.global-to-local, align 4
  %v1_9b58 = add i32 %v0_9b54, 533
  store i32 %v1_9b58, i32* @r4, align 4
  store i32 %v1_9b58, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9b64 = call i32 @function_12b70(i32 %v1_9b58, i32 255)
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v3_9b6c = load i32, i32* %stack_var_-40, align 4
  %v0_9b70 = load i32, i32* @r5, align 4
  %v2_9b70 = add i32 %v3_9b6c, 1
  %v1_9b74 = add i32 %v2_9b70, %v0_9b70
  store i32 %v1_9b74, i32* %r0.global-to-local, align 4
  %v1_9b78 = inttoptr i32 %v1_9b74 to i8*
  %v2_9b78 = call i32 @function_12ad0(i8* %v1_9b78)
  store i32 %v2_9b78, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9b7c = icmp slt i32 %v2_9b78, 0
  store i1 %v1_9b7c, i1* %cpsr_n.global-to-local, align 1
  %v2_9b7c = icmp eq i32 %v2_9b78, 0
  store i1 %v2_9b7c, i1* %cpsr_z.global-to-local, align 1
  %tmp241 = icmp slt i32 %v2_9b78, 1
  br i1 %tmp241, label %dec_label_pc_9400, label %dec_label_pc_9b84

dec_label_pc_9b84:                                ; preds = %dec_label_pc_9b54
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9b88 = load i32, i32* %stack_var_-40, align 4
  %v0_9b8c = load i32, i32* @r5, align 4
  %v2_9b8c = add i32 %v3_9b88, 1
  %v1_9b90 = add i32 %v2_9b8c, %v0_9b8c
  store i32 %v1_9b90, i32* %r0.global-to-local, align 4
  %v1_9b94 = inttoptr i32 %v1_9b90 to i8*
  %v2_9b94 = call i32 @function_12ad0(i8* %v1_9b94)
  store i32 %v2_9b94, i32* %r0.global-to-local, align 4
  %v1_9b98 = add i32 %v2_9b94, -255
  %v2_9b98 = icmp ugt i32 %v2_9b94, 254
  store i1 %v2_9b98, i1* %cpsr_c.global-to-local, align 1
  %v3_9b98 = sub i32 254, %v2_9b94
  %v4_9b98 = and i32 %v3_9b98, %v2_9b94
  %v5_9b98 = icmp slt i32 %v4_9b98, 0
  store i1 %v5_9b98, i1* %cpsr_v.global-to-local, align 1
  %v6_9b98 = icmp slt i32 %v1_9b98, 0
  store i1 %v6_9b98, i1* %cpsr_n.global-to-local, align 1
  %v7_9b98 = icmp eq i32 %v2_9b94, 255
  store i1 %v7_9b98, i1* %cpsr_z.global-to-local, align 1
  %v8_9b9c = icmp sgt i32 %v2_9b94, 255
  br i1 %v8_9b9c, label %dec_label_pc_9400, label %dec_label_pc_9ba0

dec_label_pc_9ba0:                                ; preds = %dec_label_pc_9b84
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9ba4 = load i32, i32* %stack_var_-40, align 4
  %v0_9ba8 = load i32, i32* @r5, align 4
  %v0_9bac = load i32, i32* @r4, align 4
  store i32 %v0_9bac, i32* @r0, align 4
  %v2_9ba8 = add i32 %v3_9ba4, 1
  %v1_9bb0 = add i32 %v2_9ba8, %v0_9ba8
  store i32 %v1_9bb0, i32* %r1.global-to-local, align 4
  %v2_9bb4 = inttoptr i32 %v0_9bac to i8*
  %v3_9bb4 = call i32 @function_12af8(i8* %v2_9bb4, i32 %v1_9bb0)
  store i32 %v3_9bb4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9400

dec_label_pc_9bbc:                                ; preds = %dec_label_pc_9ad4
  %v0_9bbc = load i32, i32* @r5, align 4
  store i32 %v0_9bbc, i32* %r0.global-to-local, align 4
  %v1_9bc0 = inttoptr i32 %v0_9bbc to i8*
  %v2_9bc0 = call i32 @function_12ad0(i8* %v1_9bc0)
  store i32 %v2_9bc0, i32* %r0.global-to-local, align 4
  %v1_9bc4 = add i32 %v2_9bc0, -127
  %v2_9bc4 = icmp ugt i32 %v2_9bc0, 126
  store i1 %v2_9bc4, i1* %cpsr_c.global-to-local, align 1
  %v3_9bc4 = sub i32 126, %v2_9bc0
  %v4_9bc4 = and i32 %v3_9bc4, %v2_9bc0
  %v5_9bc4 = icmp slt i32 %v4_9bc4, 0
  store i1 %v5_9bc4, i1* %cpsr_v.global-to-local, align 1
  %v6_9bc4 = icmp slt i32 %v1_9bc4, 0
  store i1 %v6_9bc4, i1* %cpsr_n.global-to-local, align 1
  %v7_9bc4 = icmp eq i32 %v2_9bc0, 127
  store i1 %v7_9bc4, i1* %cpsr_z.global-to-local, align 1
  %v8_9bc8 = icmp sgt i32 %v2_9bc0, 127
  br i1 %v8_9bc8, label %dec_label_pc_9b34, label %dec_label_pc_9bcc

dec_label_pc_9bcc:                                ; preds = %dec_label_pc_9bbc
  %v0_9bcc = load i32, i32* @r8, align 4
  %v1_9bcc = add i32 %v0_9bcc, 12
  %v2_9bcc = inttoptr i32 %v1_9bcc to i32*
  %v3_9bcc = load i32, i32* %v2_9bcc, align 4
  store i32 %v1_9410, i32* %r2.global-to-local, align 4
  %v1_9bd4 = and i32 %v3_9bcc, 33554432
  %v2_9bd4 = icmp ne i32 %v1_9bd4, 0
  store i1 %v2_9bd4, i1* %cpsr_c.global-to-local, align 1
  %v3_9bd4 = mul i32 %v3_9bcc, 128
  %v0_9bd8 = load i32, i32* @r5, align 4
  store i32 %v0_9bd8, i32* %r1.global-to-local, align 4
  %v2_9bdc = add i32 %v3_9bd4, %v1_9410
  store i32 %v2_9bdc, i32* @r0, align 4
  %v2_9be0 = inttoptr i32 %v2_9bdc to i8*
  %v3_9be0 = call i32 @function_12af8(i8* %v2_9be0, i32 %v0_9bd8)
  store i32 %v3_9be0, i32* %r0.global-to-local, align 4
  %v0_9be4 = load i32, i32* @r8, align 4
  %v1_9be4 = add i32 %v0_9be4, 12
  %v2_9be4 = inttoptr i32 %v1_9be4 to i32*
  %v3_9be4 = load i32, i32* %v2_9be4, align 4
  store i32 %v1_9410, i32* %r3.global-to-local, align 4
  %v1_9bec = and i32 %v3_9be4, 33554432
  %v2_9bec = icmp ne i32 %v1_9bec, 0
  store i1 %v2_9bec, i1* %cpsr_c.global-to-local, align 1
  %v3_9bec = mul i32 %v3_9be4, 128
  %v2_9bf0 = add i32 %v3_9bec, %v1_9410
  store i32 %v2_9bf0, i32* %r4.global-to-local, align 4
  store i32 %v2_9bf0, i32* %r0.global-to-local, align 4
  %v1_9bf8 = inttoptr i32 %v2_9bf0 to i8*
  %v2_9bf8 = call i32 @function_12ad0(i8* %v1_9bf8)
  store i32 ptrtoint (i32* @global_var_15d9c.52 to i32), i32* %r1.global-to-local, align 4
  %v2_9c00 = add i32 %v2_9bf0, %v2_9bf8
  store i32 %v2_9c00, i32* @r0, align 4
  %v2_9c04 = inttoptr i32 %v2_9c00 to i8*
  %v3_9c04 = call i32 @function_12af8(i8* %v2_9c04, i32 ptrtoint (i32* @global_var_15d9c.52 to i32))
  store i32 %v3_9c04, i32* %r0.global-to-local, align 4
  %v0_9c08 = load i32, i32* %r6.global-to-local, align 4
  %v1_9c08 = add i32 %v0_9c08, 3
  store i32 %v1_9c08, i32* @r4, align 4
  %v0_9c0c = load i32, i32* @r8, align 4
  %v1_9c0c = add i32 %v0_9c0c, 656
  %v2_9c0c = inttoptr i32 %v1_9c0c to i32*
  %v3_9c0c = load i32, i32* %v2_9c0c, align 4
  %v0_9c10 = load i32, i32* @r7, align 4
  %v2_9c10 = add i32 %v0_9c10, %v1_9c08
  store i32 %v2_9c10, i32* %r6.global-to-local, align 4
  %v2_9c14 = sub i32 %v3_9c0c, %v1_9c08
  store i32 %v2_9c14, i32* %r1.global-to-local, align 4
  %v0_9c18 = load i32, i32* @sl, align 4
  store i32 %v0_9c18, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d98.50 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9c10, i32* %r0.global-to-local, align 4
  %v4_9c24 = call i32 @function_12b94(i32 %v2_9c10, i32 %v2_9c14, i32 ptrtoint (i32* @global_var_15d98.50 to i32), i32 %v0_9c18)
  store i32 %v4_9c24, i32* %r0.global-to-local, align 4
  %v0_9c28 = load i32, i32* @r8, align 4
  %v1_9c28 = add i32 %v0_9c28, 12
  %v2_9c28 = inttoptr i32 %v1_9c28 to i32*
  %v3_9c28 = load i32, i32* %v2_9c28, align 4
  store i32 %v1_9410, i32* %ip.global-to-local, align 4
  %v1_9c30 = and i32 %v3_9c28, 33554432
  %v2_9c30 = icmp ne i32 %v1_9c30, 0
  store i1 %v2_9c30, i1* %cpsr_c.global-to-local, align 1
  %v3_9c30 = mul i32 %v3_9c28, 128
  %v0_9c34 = load i32, i32* @r4, align 4
  %v1_9c34 = load i32, i32* %sb.global-to-local, align 4
  %v2_9c38 = add i32 %v3_9c30, %v1_9410
  store i32 %v2_9c38, i32* @r5, align 4
  %v2_9c34 = add i32 %v0_9c34, %v4_9c24
  %v2_9c3c = add i32 %v2_9c34, %v1_9c34
  store i32 %v2_9c3c, i32* @r4, align 4
  %v0_9c40 = load i32, i32* %fp.global-to-local, align 4
  %v1_9c40 = trunc i32 %v0_9c40 to i8
  %v3_9c40 = add i32 %v2_9c3c, 2115
  %v4_9c40 = inttoptr i32 %v3_9c40 to i8*
  store i8 %v1_9c40, i8* %v4_9c40, align 1
  %v0_9c44 = load i32, i32* @r5, align 4
  store i32 %v0_9c44, i32* %r0.global-to-local, align 4
  %v1_9c48 = inttoptr i32 %v0_9c44 to i8*
  %v2_9c48 = call i32 @function_12ad0(i8* %v1_9c48)
  %v0_9c4c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_9c4c, i32* %r1.global-to-local, align 4
  %v0_9c50 = load i32, i32* @r5, align 4
  %v2_9c50 = add i32 %v0_9c50, %v2_9c48
  store i32 %v2_9c50, i32* @r0, align 4
  %v2_9c54 = inttoptr i32 %v2_9c50 to i8*
  %v3_9c54 = call i32 @function_12af8(i8* %v2_9c54, i32 %v0_9c4c)
  store i32 %v3_9c54, i32* %r0.global-to-local, align 4
  %v0_9c58 = load i32, i32* @r8, align 4
  %v1_9c58 = add i32 %v0_9c58, 12
  %v2_9c58 = inttoptr i32 %v1_9c58 to i32*
  %v3_9c58 = load i32, i32* %v2_9c58, align 4
  %v1_9c5c = add i32 %v3_9c58, 1
  store i32 %v1_9c5c, i32* %r3.global-to-local, align 4
  store i32 %v1_9c5c, i32* %v2_9c58, align 4
  br label %dec_label_pc_9b34

dec_label_pc_9c68:                                ; preds = %dec_label_pc_984c
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_9c74 = load i32, i32* @r5, align 4
  %v1_9c74 = add i32 %v0_9c74, 4
  %v2_9c74 = inttoptr i32 %v1_9c74 to i8*
  %v3_9c74 = load i8, i8* %v2_9c74, align 1
  %v4_9c74 = zext i8 %v3_9c74 to i32
  store i32 %v4_9c74, i32* %r3.global-to-local, align 4
  %v2_9c78 = icmp ugt i8 %v3_9c74, 114
  store i1 %v2_9c78, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9c78 = icmp ult i8 %v3_9c74, 115
  store i1 %v6_9c78, i1* %cpsr_n.global-to-local, align 1
  %v7_9c78 = icmp eq i8 %v3_9c74, 115
  store i1 %v7_9c78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9c78, label %bb242, label %.thread69

bb242:                                            ; preds = %dec_label_pc_9c68
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread69

.thread69:                                        ; preds = %dec_label_pc_9c68, %bb242
  %v3_9c88 = phi i32 [ 7, %dec_label_pc_9c68 ], [ 8, %bb242 ]
  %v0_9c8c = load i32, i32* @r7, align 4
  %v1_9c8c = sub nsw i32 1, %v3_9c88
  %v2_9c90 = add i32 %v1_9c8c, %v0_9c8c
  store i32 %v2_9c90, i32* @r2, align 4
  store i32 %v0_9c74, i32* @r0, align 4
  %v2_9c98 = add i32 %v3_9c88, %v0_9c74
  store i32 %v2_9c98, i32* @r1, align 4
  %v3_9c9c = call i32 @function_13ac0(i32 %v0_9c74, i32 %v2_9c98, i32 %v2_9c90)
  store i32 %v3_9c9c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v0_9cac = load i32, i32* @r6, align 4
  %v1_9cac = load i32, i32* @r4, align 4
  %v2_9cac = add i32 %v1_9cac, %v0_9cac
  %v3_9cac = inttoptr i32 %v2_9cac to i8*
  %v4_9cac = load i8, i8* %v3_9cac, align 1
  %v6_9cac = zext i8 %v4_9cac to i32
  store i32 %v6_9cac, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v9_9cb0 = icmp eq i8 %v4_9cac, 0
  store i1 %v9_9cb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9cb0, label %dec_label_pc_9cf0, label %dec_label_pc_9cb8

dec_label_pc_9cb8:                                ; preds = %.thread69
  %v2_9cb8 = icmp ugt i8 %v4_9cac, 46
  store i1 %v2_9cb8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9cb8 = icmp ult i8 %v4_9cac, 47
  store i1 %v6_9cb8, i1* %cpsr_n.global-to-local, align 1
  %v7_9cb8 = icmp eq i8 %v4_9cac, 47
  store i1 %v7_9cb8, i1* %cpsr_z.global-to-local, align 1
  %v1_9cbc = load i32, i32* @r5, align 4
  br i1 %v7_9cb8, label %bb243, label %dec_label_pc_9cc4

bb243:                                            ; preds = %dec_label_pc_9cb8
  store i32 %v1_9cbc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9dd4

dec_label_pc_9cc4:                                ; preds = %dec_label_pc_9cb8
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9cd4

dec_label_pc_9ccc:                                ; preds = %dec_label_pc_9cd4
  %v2_9ccc = icmp ugt i8 %v4_9cdc, 46
  store i1 %v2_9ccc, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9ccc = icmp ult i8 %v4_9cdc, 47
  store i1 %v6_9ccc, i1* %cpsr_n.global-to-local, align 1
  %v7_9ccc = icmp eq i8 %v4_9cdc, 47
  store i1 %v7_9ccc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9ccc, label %dec_label_pc_9dd4, label %dec_label_pc_9cd4

dec_label_pc_9cd4:                                ; preds = %dec_label_pc_9ccc, %dec_label_pc_9cc4
  %v1_9ce4 = phi i32 [ %v1_9ce8, %dec_label_pc_9ccc ], [ 1, %dec_label_pc_9cc4 ]
  store i32 %v10_82f0, i32* @lr, align 4
  store i32 %v1_9ce4, i32* %stack_var_-40, align 4
  %v2_9cdc = add i32 %v1_9ce4, %v1_9cbc
  %v3_9cdc = inttoptr i32 %v2_9cdc to i8*
  %v4_9cdc = load i8, i8* %v3_9cdc, align 1
  %v6_9cdc = zext i8 %v4_9cdc to i32
  store i32 %v6_9cdc, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9ce0 = icmp eq i8 %v4_9cdc, 0
  store i1 %v2_9ce0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_9cdc, i32* %r1.global-to-local, align 4
  %v1_9ce8 = add i32 %v1_9ce4, 1
  store i32 %v1_9ce8, i32* %r3.global-to-local, align 4
  br i1 %v2_9ce0, label %dec_label_pc_9cf0, label %dec_label_pc_9ccc

dec_label_pc_9cf0:                                ; preds = %dec_label_pc_9cd4, %.thread69, %dec_label_pc_9dd4
  %v0_9cf0 = load i32, i32* @r5, align 4
  store i32 %v0_9cf0, i32* %r0.global-to-local, align 4
  %v1_9cf4 = inttoptr i32 %v0_9cf0 to i8*
  %v2_9cf4 = call i32 @function_12ad0(i8* %v1_9cf4)
  store i32 %v2_9cf4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9cf8 = icmp slt i32 %v2_9cf4, 0
  store i1 %v1_9cf8, i1* %cpsr_n.global-to-local, align 1
  %v2_9cf8 = icmp eq i32 %v2_9cf4, 0
  store i1 %v2_9cf8, i1* %cpsr_z.global-to-local, align 1
  %tmp244 = icmp slt i32 %v2_9cf4, 1
  br i1 %tmp244, label %dec_label_pc_9d1c, label %dec_label_pc_9d00

dec_label_pc_9d00:                                ; preds = %dec_label_pc_9cf0
  %v0_9d00 = load i32, i32* @r5, align 4
  store i32 %v0_9d00, i32* %r0.global-to-local, align 4
  %v1_9d04 = inttoptr i32 %v0_9d00 to i8*
  %v2_9d04 = call i32 @function_12ad0(i8* %v1_9d04)
  store i32 %v2_9d04, i32* %r0.global-to-local, align 4
  %v1_9d08 = add i32 %v2_9d04, -127
  %v2_9d08 = icmp ugt i32 %v2_9d04, 126
  store i1 %v2_9d08, i1* %cpsr_c.global-to-local, align 1
  %v3_9d08 = sub i32 126, %v2_9d04
  %v4_9d08 = and i32 %v3_9d08, %v2_9d04
  %v5_9d08 = icmp slt i32 %v4_9d08, 0
  store i1 %v5_9d08, i1* %cpsr_v.global-to-local, align 1
  %v6_9d08 = icmp slt i32 %v1_9d08, 0
  store i1 %v6_9d08, i1* %cpsr_n.global-to-local, align 1
  %v7_9d08 = icmp eq i32 %v2_9d04, 127
  store i1 %v7_9d08, i1* %cpsr_z.global-to-local, align 1
  %v7_9d0c = icmp sgt i32 %v2_9d04, 127
  br i1 %v7_9d0c, label %.thread72, label %bb245

bb245:                                            ; preds = %dec_label_pc_9d00
  %v8_9d0c = load i32, i32* %sb.global-to-local, align 4
  %v9_9d10 = add i32 %v8_9d0c, 789
  store i32 %v9_9d10, i32* %r0.global-to-local, align 4
  %v8_9d14 = load i32, i32* @r5, align 4
  store i32 %v8_9d14, i32* %r1.global-to-local, align 4
  br label %.thread72

.thread72:                                        ; preds = %dec_label_pc_9d00, %bb245
  store i32 40220, i32* @lr, align 4
  %v3_9d18 = xor i1 %v6_9d08, %v5_9d08
  %v4_9d18 = or i1 %v7_9d08, %v3_9d18
  call void @__pseudo_cond_branch(i1 %v4_9d18, i32 ptrtoint (i32* @global_var_12af8.48 to i32))
  br label %dec_label_pc_9d1c

dec_label_pc_9d1c:                                ; preds = %dec_label_pc_9cf0, %.thread72
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9d20 = load i32, i32* %stack_var_-40, align 4
  %v0_9d24 = load i32, i32* @r5, align 4
  %v2_9d24 = add i32 %v3_9d20, 1
  %v1_9d28 = add i32 %v2_9d24, %v0_9d24
  store i32 %v1_9d28, i32* %r0.global-to-local, align 4
  %v1_9d2c = inttoptr i32 %v1_9d28 to i8*
  %v2_9d2c = call i32 @function_12ad0(i8* %v1_9d2c)
  store i32 %v2_9d2c, i32* %r0.global-to-local, align 4
  %v1_9d30 = add i32 %v2_9d2c, -255
  %v2_9d30 = icmp ugt i32 %v2_9d2c, 254
  store i1 %v2_9d30, i1* %cpsr_c.global-to-local, align 1
  %v3_9d30 = sub i32 254, %v2_9d2c
  %v4_9d30 = and i32 %v3_9d30, %v2_9d2c
  %v5_9d30 = icmp slt i32 %v4_9d30, 0
  store i1 %v5_9d30, i1* %cpsr_v.global-to-local, align 1
  %v6_9d30 = icmp slt i32 %v1_9d30, 0
  store i1 %v6_9d30, i1* %cpsr_n.global-to-local, align 1
  %v7_9d30 = icmp eq i32 %v2_9d2c, 255
  store i1 %v7_9d30, i1* %cpsr_z.global-to-local, align 1
  %v8_9d34 = icmp sgt i32 %v2_9d2c, 255
  br i1 %v8_9d34, label %dec_label_pc_9884, label %dec_label_pc_9d38

dec_label_pc_9d38:                                ; preds = %dec_label_pc_9d1c
  %v0_9d38 = load i32, i32* %sb.global-to-local, align 4
  %v1_9d3c = add i32 %v0_9d38, 533
  store i32 %v1_9d3c, i32* @r4, align 4
  store i32 %v1_9d3c, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9d48 = call i32 @function_12b70(i32 %v1_9d3c, i32 255)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9d50 = load i32, i32* %stack_var_-40, align 4
  %v0_9d54 = load i32, i32* @r5, align 4
  %v2_9d54 = add i32 %v3_9d50, 1
  %v1_9d58 = add i32 %v2_9d54, %v0_9d54
  store i32 %v1_9d58, i32* %r0.global-to-local, align 4
  %v1_9d5c = inttoptr i32 %v1_9d58 to i8*
  %v2_9d5c = call i32 @function_12ad0(i8* %v1_9d5c)
  store i32 %v2_9d5c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9d60 = icmp slt i32 %v2_9d5c, 0
  store i1 %v1_9d60, i1* %cpsr_n.global-to-local, align 1
  %v2_9d60 = icmp eq i32 %v2_9d5c, 0
  store i1 %v2_9d60, i1* %cpsr_z.global-to-local, align 1
  %tmp246 = icmp slt i32 %v2_9d5c, 1
  br i1 %tmp246, label %dec_label_pc_9884, label %dec_label_pc_9d68

dec_label_pc_9d68:                                ; preds = %dec_label_pc_9d38
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9d6c = load i32, i32* %stack_var_-40, align 4
  %v0_9d70 = load i32, i32* @r5, align 4
  %v0_9d74 = load i32, i32* @r4, align 4
  store i32 %v0_9d74, i32* @r0, align 4
  %v2_9d70 = add i32 %v3_9d6c, 1
  %v1_9d78 = add i32 %v2_9d70, %v0_9d70
  store i32 %v1_9d78, i32* %r1.global-to-local, align 4
  %v2_9d7c = inttoptr i32 %v0_9d74 to i8*
  %v3_9d7c = call i32 @function_12af8(i8* %v2_9d7c, i32 %v1_9d78)
  store i32 %v3_9d7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9884

dec_label_pc_9d84:                                ; preds = %dec_label_pc_95ec
  %v0_9d84 = load i32, i32* @r4, align 4
  %v1_9d84 = trunc i32 %v0_9d84 to i8
  %v2_9d84 = load i32, i32* @r8, align 4
  %v3_9d84 = add i32 %v2_9d84, -1452
  %v4_9d84 = inttoptr i32 %v3_9d84 to i8*
  store i8 %v1_9d84, i8* %v4_9d84, align 1
  br label %dec_label_pc_8838

dec_label_pc_9d8c:                                ; preds = %dec_label_pc_9804
  %v1_9d8c = add i32 %v0_9d8c, 1
  store i32 %v1_9d8c, i32* %ip.global-to-local, align 4
  %v2_9d90 = add i32 %v0_9804, %v1_9d8c
  store i32 %v2_9d90, i32* %r4.global-to-local, align 4
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 %v2_9d90, i32* %r0.global-to-local, align 4
  store i32 %v1_9d8c, i32* %stack_var_-40, align 4
  %v1_9da0 = inttoptr i32 %v2_9d90 to i8*
  %v2_9da0 = call i32 @function_12ad0(i8* %v1_9da0)
  store i32 %v2_9da0, i32* %r0.global-to-local, align 4
  %v0_9da4 = load i32, i32* %r4.global-to-local, align 4
  %v2_9da4 = add i32 %v0_9da4, %v2_9da0
  store i32 %v2_9da4, i32* @r4, align 4
  %v1_9da8 = add i32 %v2_9da4, -1
  %v2_9da8 = inttoptr i32 %v1_9da8 to i8*
  %v3_9da8 = load i8, i8* %v2_9da8, align 1
  %v4_9da8 = zext i8 %v3_9da8 to i32
  store i32 %v4_9da8, i32* %r3.global-to-local, align 4
  %v2_9dac = icmp ugt i8 %v3_9da8, 33
  store i1 %v2_9dac, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9dac = icmp ult i8 %v3_9da8, 34
  store i1 %v6_9dac, i1* %cpsr_n.global-to-local, align 1
  %v7_9dac = icmp eq i8 %v3_9da8, 34
  store i1 %v7_9dac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9dac, label %dec_label_pc_9db4, label %dec_label_pc_9810

dec_label_pc_9db4:                                ; preds = %dec_label_pc_9d8c
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9db8 = load i32, i32* %stack_var_-40, align 4
  %v0_9dbc = load i32, i32* @r6, align 4
  %v2_9dbc = add i32 %v0_9dbc, %v3_9db8
  store i32 %v2_9dbc, i32* %r4.global-to-local, align 4
  store i32 %v2_9dbc, i32* %r0.global-to-local, align 4
  %v1_9dc4 = inttoptr i32 %v2_9dbc to i8*
  %v2_9dc4 = call i32 @function_12ad0(i8* %v1_9dc4)
  store i32 %v2_9dc4, i32* %r0.global-to-local, align 4
  %v2_9dc8 = add i32 %v2_9dbc, %v2_9dc4
  store i32 %v2_9dc8, i32* @r4, align 4
  %v0_9dcc = load i32, i32* @r5, align 4
  %v1_9dcc = trunc i32 %v0_9dcc to i8
  %v3_9dcc = add i32 %v2_9dc8, -1
  %v4_9dcc = inttoptr i32 %v3_9dcc to i8*
  store i8 %v1_9dcc, i8* %v4_9dcc, align 1
  br label %dec_label_pc_9810

dec_label_pc_9dd4:                                ; preds = %dec_label_pc_9ccc, %bb243
  %v2_9dd8 = phi i32 [ %v1_9cbc, %bb243 ], [ %v2_9cdc, %dec_label_pc_9ccc ]
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_9dd8 = inttoptr i32 %v2_9dd8 to i8*
  store i8 0, i8* %v3_9dd8, align 1
  br label %dec_label_pc_9cf0

dec_label_pc_9de0:                                ; preds = %dec_label_pc_9878
  store i32 %v10_82f0, i32* %ip.global-to-local, align 4
  %v3_9de4 = load i32, i32* %stack_var_-40, align 4
  %v0_9de8 = load i32, i32* @r5, align 4
  %v2_9de8 = add i32 %v3_9de4, 1
  %v1_9dec = add i32 %v2_9de8, %v0_9de8
  store i32 %v1_9dec, i32* %r0.global-to-local, align 4
  %v1_9df0 = inttoptr i32 %v1_9dec to i8*
  %v2_9df0 = call i32 @function_12ad0(i8* %v1_9df0)
  store i32 %v2_9df0, i32* %r0.global-to-local, align 4
  %v1_9df4 = add i32 %v2_9df0, -255
  %v2_9df4 = icmp ugt i32 %v2_9df0, 254
  store i1 %v2_9df4, i1* %cpsr_c.global-to-local, align 1
  %v3_9df4 = sub i32 254, %v2_9df0
  %v4_9df4 = and i32 %v3_9df4, %v2_9df0
  %v5_9df4 = icmp slt i32 %v4_9df4, 0
  store i1 %v5_9df4, i1* %cpsr_v.global-to-local, align 1
  %v6_9df4 = icmp slt i32 %v1_9df4, 0
  store i1 %v6_9df4, i1* %cpsr_n.global-to-local, align 1
  %v7_9df4 = icmp eq i32 %v2_9df0, 255
  store i1 %v7_9df4, i1* %cpsr_z.global-to-local, align 1
  %v8_9df8 = icmp sgt i32 %v2_9df0, 255
  br i1 %v8_9df8, label %dec_label_pc_9884, label %dec_label_pc_9dfc

dec_label_pc_9dfc:                                ; preds = %dec_label_pc_9de0
  %v0_9dfc = load i32, i32* %sb.global-to-local, align 4
  %v1_9e00 = add i32 %v0_9dfc, 533
  store i32 %v1_9e00, i32* @r4, align 4
  store i32 %v1_9e00, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9e0c = call i32 @function_12b70(i32 %v1_9e00, i32 255)
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_9e14 = load i32, i32* %stack_var_-40, align 4
  %v0_9e18 = load i32, i32* @r5, align 4
  %v2_9e18 = add i32 %v3_9e14, 1
  %v1_9e1c = add i32 %v2_9e18, %v0_9e18
  store i32 %v1_9e1c, i32* %r0.global-to-local, align 4
  %v1_9e20 = inttoptr i32 %v1_9e1c to i8*
  %v2_9e20 = call i32 @function_12ad0(i8* %v1_9e20)
  store i32 %v2_9e20, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9e24 = icmp slt i32 %v2_9e20, 0
  store i1 %v1_9e24, i1* %cpsr_n.global-to-local, align 1
  %v2_9e24 = icmp eq i32 %v2_9e20, 0
  store i1 %v2_9e24, i1* %cpsr_z.global-to-local, align 1
  %tmp247 = icmp slt i32 %v2_9e20, 1
  br i1 %tmp247, label %dec_label_pc_9884, label %dec_label_pc_9e2c

dec_label_pc_9e2c:                                ; preds = %dec_label_pc_9dfc
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9e30 = load i32, i32* %stack_var_-40, align 4
  %v0_9e34 = load i32, i32* @r5, align 4
  %v0_9e38 = load i32, i32* @r4, align 4
  store i32 %v0_9e38, i32* @r0, align 4
  %v2_9e34 = add i32 %v3_9e30, 1
  %v1_9e3c = add i32 %v2_9e34, %v0_9e34
  store i32 %v1_9e3c, i32* %r1.global-to-local, align 4
  %v2_9e40 = inttoptr i32 %v0_9e38 to i8*
  %v3_9e40 = call i32 @function_12af8(i8* %v2_9e40, i32 %v1_9e3c)
  store i32 %v3_9e40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9884

dec_label_pc_9e48:                                ; preds = %dec_label_pc_84c8
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_9e4c = call i32 @function_121a4(i32 51)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 51, i32* %r0.global-to-local, align 4
  %v3_9e58 = call i32 @function_120c0(i32 51, i32* null)
  store i32 %v3_9e58, i32* %r1.global-to-local, align 4
  %v0_9e60 = load i32, i32* @r5, align 4
  %v1_9e60 = add i32 %v0_9e60, 20
  store i32 %v1_9e60, i32* @r0, align 4
  %v2_9e64 = inttoptr i32 %v1_9e60 to i8*
  %v3_9e64 = call i32 @function_12af8(i8* %v2_9e64, i32 %v3_9e58)
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_9e6c = call i32 @function_120ec(i32 51)
  store i32 %v1_9e6c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9e70:                                ; preds = %dec_label_pc_84c8, %dec_label_pc_9f58, %dec_label_pc_9f2c, %dec_label_pc_9f00, %dec_label_pc_9ed4, %dec_label_pc_9e48
  %v0_9e70 = load i32, i32* @sl, align 4
  store i32 %v0_9e70, i32* %r1.global-to-local, align 4
  store i32 %v0_840c, i32* @r0, align 4
  %v2_9e78 = inttoptr i32 %v0_840c to i8*
  %v3_9e78 = call i32 @function_12af8(i8* %v2_9e78, i32 %v0_9e70)
  store i32 %v3_9e78, i32* %r0.global-to-local, align 4
  store i32 %v0_839c, i32* %r1.global-to-local, align 4
  %v0_9e80 = load i32, i32* @r7, align 4
  %v1_9e80 = add i32 %v0_9e80, 1
  store i32 %v1_9e80, i32* @r7, align 4
  %v0_9e84 = load i32, i32* @r5, align 4
  %v2_9e88 = sub i32 %v0_839c, %v1_9e80
  %v3_9e88 = icmp uge i32 %v0_839c, %v1_9e80
  store i1 %v3_9e88, i1* %cpsr_c.global-to-local, align 1
  %v4_9e88 = xor i32 %v1_9e80, %v0_839c
  %v5_9e88 = xor i32 %v2_9e88, %v0_839c
  %v6_9e88 = and i32 %v5_9e88, %v4_9e88
  %v7_9e88 = icmp slt i32 %v6_9e88, 0
  store i1 %v7_9e88, i1* %cpsr_v.global-to-local, align 1
  %v8_9e88 = icmp slt i32 %v2_9e88, 0
  store i1 %v8_9e88, i1* %cpsr_n.global-to-local, align 1
  %v9_9e88 = icmp eq i32 %v0_839c, %v1_9e80
  store i1 %v9_9e88, i1* %cpsr_z.global-to-local, align 1
  %v1_9e8c = add i32 %v0_9e84, 3140
  store i32 %v1_9e8c, i32* @r5, align 4
  br i1 %v9_9e88, label %dec_label_pc_9e94, label %dec_label_pc_83cc

dec_label_pc_9e94:                                ; preds = %dec_label_pc_9e70
  %v1_9ea0 = add i32 %v2_83b0, 1456
  %v0_9ea8 = load i32, i32* %r8.global-to-local, align 4
  %v1_9ea8 = urem i32 %v0_9ea8, 256
  store i32 %v1_9ea8, i32* %ip.global-to-local, align 4
  %v1_9eac = add i32 %v2_83b0, 1464
  store i32 %v1_9eac, i32* %r2.global-to-local, align 4
  %v2_9eb0 = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_9eb0, i32* %r3.global-to-local, align 4
  store i32 %v1_9ea0, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_8528.preheader

dec_label_pc_9ed4:                                ; preds = %dec_label_pc_84c8
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_9ed8 = call i32 @function_121a4(i32 47)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v3_9ee4 = call i32 @function_120c0(i32 47, i32* null)
  store i32 %v3_9ee4, i32* %r1.global-to-local, align 4
  %v0_9eec = load i32, i32* @r5, align 4
  %v1_9eec = add i32 %v0_9eec, 20
  store i32 %v1_9eec, i32* @r0, align 4
  %v2_9ef0 = inttoptr i32 %v1_9eec to i8*
  %v3_9ef0 = call i32 @function_12af8(i8* %v2_9ef0, i32 %v3_9ee4)
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_9ef8 = call i32 @function_120ec(i32 47)
  store i32 %v1_9ef8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f00:                                ; preds = %dec_label_pc_84c8
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_9f04 = call i32 @function_121a4(i32 48)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 48, i32* %r0.global-to-local, align 4
  %v3_9f10 = call i32 @function_120c0(i32 48, i32* null)
  store i32 %v3_9f10, i32* %r1.global-to-local, align 4
  %v0_9f18 = load i32, i32* @r5, align 4
  %v1_9f18 = add i32 %v0_9f18, 20
  store i32 %v1_9f18, i32* @r0, align 4
  %v2_9f1c = inttoptr i32 %v1_9f18 to i8*
  %v3_9f1c = call i32 @function_12af8(i8* %v2_9f1c, i32 %v3_9f10)
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_9f24 = call i32 @function_120ec(i32 48)
  store i32 %v1_9f24, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f2c:                                ; preds = %dec_label_pc_84c8
  store i32 49, i32* %r0.global-to-local, align 4
  %v1_9f30 = call i32 @function_121a4(i32 49)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 49, i32* %r0.global-to-local, align 4
  %v3_9f3c = call i32 @function_120c0(i32 49, i32* null)
  store i32 %v3_9f3c, i32* %r1.global-to-local, align 4
  %v0_9f44 = load i32, i32* @r5, align 4
  %v1_9f44 = add i32 %v0_9f44, 20
  store i32 %v1_9f44, i32* @r0, align 4
  %v2_9f48 = inttoptr i32 %v1_9f44 to i8*
  %v3_9f48 = call i32 @function_12af8(i8* %v2_9f48, i32 %v3_9f3c)
  store i32 49, i32* %r0.global-to-local, align 4
  %v1_9f50 = call i32 @function_120ec(i32 49)
  store i32 %v1_9f50, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f58:                                ; preds = %dec_label_pc_84c8
  store i32 50, i32* %r0.global-to-local, align 4
  %v1_9f5c = call i32 @function_121a4(i32 50)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 50, i32* %r0.global-to-local, align 4
  %v3_9f68 = call i32 @function_120c0(i32 50, i32* null)
  store i32 %v3_9f68, i32* %r1.global-to-local, align 4
  %v0_9f70 = load i32, i32* @r5, align 4
  %v1_9f70 = add i32 %v0_9f70, 20
  store i32 %v1_9f70, i32* @r0, align 4
  %v2_9f74 = inttoptr i32 %v1_9f70 to i8*
  %v3_9f74 = call i32 @function_12af8(i8* %v2_9f74, i32 %v3_9f68)
  store i32 50, i32* %r0.global-to-local, align 4
  %v1_9f7c = call i32 @function_120ec(i32 50)
  store i32 %v1_9f7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

; uselistorder directives
  uselistorder i32 %v2_9eb0, { 1, 0 }
  uselistorder i32 %v1_9eac, { 1, 0 }
  uselistorder i32 %v1_9ea0, { 1, 0 }
  uselistorder i32 %v1_9e8c, { 1, 0 }
  uselistorder i32 %v2_9e88, { 1, 0 }
  uselistorder i32 %v1_9e80, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_9df0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9d8c, { 1, 0, 2 }
  uselistorder i32 %v2_9d2c, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_9d04, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9ce8, { 1, 0 }
  uselistorder i8 %v4_9cdc, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v1_9ce4, { 1, 0, 2 }
  uselistorder i1 %v7_9ccc, { 1, 0 }
  uselistorder i32 %v1_9cbc, { 1, 0, 2 }
  uselistorder i1 %v7_9cb8, { 1, 0 }
  uselistorder i1 %v9_9cb0, { 1, 0 }
  uselistorder i32 %v2_9c90, { 1, 0 }
  uselistorder i32 %v0_9c74, { 2, 0, 1, 3 }
  uselistorder i32 %v2_9c10, { 1, 0, 2 }
  uselistorder i32 %v1_9c08, { 1, 0, 2 }
  uselistorder i32 %v2_9bc0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_9b94, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v3_9b18, { 5, 1, 0, 4, 3, 2, 6 }
  uselistorder i32 %v2_9afc, { 1, 0, 2 }
  uselistorder i32 %v4_9af4, { 2, 1, 0, 3 }
  uselistorder i32 %v2_9abc, { 1, 0 }
  uselistorder i32 %v1_9abc, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_9abc, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_9a24, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_99fc, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_99dc, { 1, 0 }
  uselistorder i8 %v4_99d4, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v0_99dc, { 1, 0, 3, 2 }
  uselistorder i1 %v7_99c0, { 1, 0 }
  uselistorder i32 %v1_99b0, { 1, 0, 2 }
  uselistorder i1 %v7_99ac, { 1, 0 }
  uselistorder i32 %v0_996c, { 2, 0, 1, 3 }
  uselistorder i32 %v2_9950, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v5_986c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_9840, { 1, 0 }
  uselistorder i32 %v1_9840, { 2, 0, 1, 3 }
  uselistorder i32 %v2_983c, { 3, 0, 1, 4, 2 }
  uselistorder i32 %v1_981c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9804, { 1, 0 }
  uselistorder i32 %v0_9d8c, { 1, 0 }
  uselistorder i32 %v1_97c0, { 1, 2, 0 }
  uselistorder i32 %v5_97bc, { 0, 2, 1, 3 }
  uselistorder i32 %v0_97a8, { 1, 0 }
  uselistorder i32 %v2_979c, { 1, 0, 2 }
  uselistorder i32 %v1_9760, { 0, 2, 1 }
  uselistorder i32 %v1_9750, { 1, 0, 3, 4, 2 }
  uselistorder i32 %v1_973c, { 0, 2, 1, 3 }
  uselistorder i32 %v1_96f8, { 1, 2, 0 }
  uselistorder i32 %v5_96f4, { 1, 8, 2, 3, 6, 7, 5, 4, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_96dc.v4_96bc, { 1, 0, 2 }
  uselistorder i32 %v1_9698, { 1, 2, 0 }
  uselistorder i32 %v4_9690, { 0, 2, 1, 3 }
  uselistorder i32 %v2_9650, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_9648, { 1, 2, 0 }
  uselistorder i32 %v5_963c, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v1_95c8, { 1, 2, 0 }
  uselistorder i32 %v4_95c4, { 0, 2, 1, 3 }
  uselistorder i32 %v5_95a4, { 1, 2, 3, 0 }
  uselistorder i32 %v1_958c, { 1, 2, 0 }
  uselistorder i32 %v5_9588, { 0, 2, 1, 3 }
  uselistorder i32 %v3_9570, { 1, 0 }
  uselistorder i32 %v2_9568, { 1, 2, 0 }
  uselistorder i32 %v4_9564, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9528, { 2, 1, 0 }
  uselistorder i32 %v3_951c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v3_94fc, { 4, 5, 6, 7, 3, 1, 2, 0 }
  uselistorder i32* %v2_94fc, { 1, 0 }
  uselistorder i32 %v0_94fc, { 1, 0 }
  uselistorder i32 %v3_94e4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_94d8, { 1, 2, 0 }
  uselistorder i32 %v0_94c0, { 0, 2, 1 }
  uselistorder i32 %v3_94a0, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %storemerge73, { 1, 0 }
  uselistorder i32 %v3_9478, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %v1_9458, { 1, 2, 0 }
  uselistorder i32 %v5_944c, { 1, 0, 3, 2, 4, 5, 6 }
  uselistorder i32 %v3_9418, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_9410, { 0, 3, 1, 4, 2, 5, 6 }
  uselistorder i32 %v5_93e4, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_93c4, { 1, 0, 2 }
  uselistorder i32 %v1_93a0, { 1, 2, 0 }
  uselistorder i32 %v5_939c, { 1, 8, 7, 2, 5, 6, 4, 3, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_9384.v4_9364, { 1, 0, 2 }
  uselistorder i32 %v1_9344, { 1, 2, 0 }
  uselistorder i32 %v4_9340, { 0, 2, 1, 3 }
  uselistorder i32 %v2_92f0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v0_92ec, { 1, 0 }
  uselistorder i32 %v0_92d4, { 1, 0 }
  uselistorder i32 %v0_92d8, { 1, 0 }
  uselistorder i32 %v2_92b4, { 1, 0 }
  uselistorder i32 %v1_92b0, { 3, 4, 2, 1, 6, 0, 7, 5, 8 }
  uselistorder i32 %v3_92ac, { 2, 4, 0, 1, 5, 3 }
  uselistorder i32 %v0_927c, { 1, 0 }
  uselistorder i1 %v7_9244, { 0, 2, 1 }
  uselistorder i32 %v1_9268, { 1, 0 }
  uselistorder i32 %v2_9264, { 1, 0 }
  uselistorder i32 %v3_9260, { 0, 1, 4, 3, 6, 2, 7, 5, 8 }
  uselistorder i32 %v2_9258, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v0_9254, { 1, 0 }
  uselistorder i32 %v1_91c4, { 1, 2, 0 }
  uselistorder i32 %v5_91c0, { 1, 8, 3, 6, 7, 5, 4, 2, 0, 10, 9, 11 }
  uselistorder i32 %v2_91a8, { 1, 0, 2 }
  uselistorder i32 %v2_91a4, { 1, 0, 2 }
  uselistorder i32 %v0_9188, { 0, 2, 1 }
  uselistorder i32 %v4_9180, { 1, 2, 0, 3 }
  uselistorder i32 %v3_915c, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9150, { 1, 2, 0 }
  uselistorder i32 %v4_9148, { 0, 2, 1, 3 }
  uselistorder i32 %v1_90e4, { 1, 2, 0 }
  uselistorder i32 %v5_90e0, { 1, 2, 9, 4, 7, 8, 6, 5, 3, 0, 11, 10, 12 }
  uselistorder i32 %v2_90c8.v4_90a8, { 1, 0, 2 }
  uselistorder i32 %v1_9078, { 1, 2, 0 }
  uselistorder i32 %v4_9074, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8ffc, { 1, 2, 0 }
  uselistorder i32 %v5_8ff8, { 1, 8, 7, 2, 5, 6, 4, 3, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_8fe0.v4_8fc0, { 1, 0, 2 }
  uselistorder i32 %v1_8f9c, { 1, 2, 0 }
  uselistorder i32 %v4_8f94, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8f14, { 1, 2, 0 }
  uselistorder i32 %v5_8f10, { 1, 3, 9, 4, 7, 8, 6, 5, 2, 0, 11, 10, 12 }
  uselistorder i32 %v2_8ef8.v4_8ed8, { 1, 0, 2 }
  uselistorder i32 %v1_8eb8, { 1, 2, 0 }
  uselistorder i32 %v4_8eb4, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8e8c, { 1, 2, 0 }
  uselistorder i32 %v4_8e88, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8e64, { 1, 2, 0 }
  uselistorder i32 %v4_8e60, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9914, { 3, 7, 0, 4, 5, 6, 1, 2 }
  uselistorder i32 %v1_8e18, { 1, 2, 0 }
  uselistorder i32 %v5_8e14, { 0, 2, 1, 3 }
  uselistorder i32 %v5_8df0, { 2, 1, 0, 3, 4, 5, 6 }
  uselistorder i32 %v3_8d78, { 0, 2, 1 }
  uselistorder i32 %v2_8d6c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_8d60, { 1, 0 }
  uselistorder i32 %v2_8d54, { 1, 0 }
  uselistorder i32 %v0_8d54, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_8d4c, { 1, 0 }
  uselistorder i32 %v1_8d54, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_8d30, { 1, 0, 2 }
  uselistorder i32 %v1_8d28, { 1, 0 }
  uselistorder i32 %v2_8d10, { 1, 0 }
  uselistorder i32 %v0_8d10, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v3_8cec, { 4, 2, 5, 3, 1, 0, 6 }
  uselistorder i32 %v2_8c54, { 1, 0 }
  uselistorder i32 %v1_8c50, { 2, 1, 4, 0, 5, 3, 6 }
  uselistorder i32 %v3_8c4c, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v2_8af4, { 1, 0 }
  uselistorder i32 %v1_8af4, { 2, 0, 1, 3 }
  uselistorder i32 %v1_8880, { 2, 1, 0 }
  uselistorder i32 %v3_887c, { 1, 0 }
  uselistorder i32 %v1_885c, { 1, 2, 0 }
  uselistorder i32 %v3_8858, { 4, 1, 0, 2, 6, 5, 7, 3 }
  uselistorder i32 %v2_8848, { 1, 0 }
  uselistorder i32 %v1_8840, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i1 %v7_8830, { 1, 0 }
  uselistorder i1 %v7_8828, { 1, 0 }
  uselistorder i32 %v1_880c, { 2, 1, 0 }
  uselistorder i32 %v3_8808, { 1, 0 }
  uselistorder i32 %v0_880c, { 1, 0 }
  uselistorder i32 %v2_87dc, { 1, 0 }
  uselistorder i32 %v1_87dc, { 1, 2, 4, 0, 3, 5 }
  uselistorder i32 %v0_87dc, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_87d8, { 0, 2, 1, 3 }
  uselistorder i32 %v0_87c4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8784, { 1, 0 }
  uselistorder i32 %v2_877c, { 1, 0 }
  uselistorder i32 %v1_8770, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_875c, { 1, 0 }
  uselistorder i32 %v0_875c, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_8754, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v1_875c, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_8744, { 1, 0 }
  uselistorder i32 %v3_8738, { 1, 0, 2 }
  uselistorder i32 %v0_86f4, { 1, 0, 2 }
  uselistorder i32 %v1_8698, { 1, 2, 0 }
  uselistorder i32 %v3_8694, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v1_8670, { 1, 2, 0 }
  uselistorder i32 %v3_8664, { 0, 2, 1, 3 }
  uselistorder i32 %v4_8650, { 1, 0 }
  uselistorder i8 %v3_8650, { 16, 17, 18, 19, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* %v2_8650, { 2, 0, 3, 1 }
  uselistorder i32 %v3_8900, { 3, 4, 5, 1, 2, 0, 8, 7, 6 }
  uselistorder i32 %v2_8640, { 1, 0 }
  uselistorder i32 %v1_8634, { 2, 0, 3, 1, 4 }
  uselistorder i1 %v7_8610, { 1, 0 }
  uselistorder i32 %v1_8610, { 1, 0 }
  uselistorder i1 %v7_8608, { 1, 0 }
  uselistorder i32 %v4_85ec, { 1, 0, 2 }
  uselistorder i1 %v7_85e8, { 1, 0 }
  uselistorder i32 %v4_85cc, { 1, 0, 2 }
  uselistorder i1 %v7_85c8, { 1, 0 }
  uselistorder i1 %v7_85c0, { 1, 0 }
  uselistorder i1 %v7_85b8, { 1, 0 }
  uselistorder i32 %v2_85dc, { 1, 0, 2, 3 }
  uselistorder i32 %v3_8594248, { 1, 0 }
  uselistorder i32 %v5_8590, { 1, 0 }
  uselistorder i8* %v1_8940, { 11, 10, 12, 8, 6, 7, 9, 0, 1, 2, 3, 4, 5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 %v2_8748, { 0, 21, 1, 20, 2, 23, 3, 22, 25, 4, 24, 5, 27, 6, 26, 7, 29, 8, 28, 9, 31, 10, 30, 11, 19, 34, 12, 33, 13, 35, 14, 17, 15, 18, 16, 36, 32 }
  uselistorder i32 %v2_86d0, { 1, 0 }
  uselistorder i32 %v3_9eb8, { 0, 2, 3, 1 }
  uselistorder i32 %stack_var_-20856.0.ph, { 59, 57, 0, 61, 60, 1, 56, 55, 2, 64, 3, 68, 67, 4, 66, 65, 5, 63, 62, 6, 79, 78, 7, 77, 8, 76, 75, 9, 74, 73, 10, 72, 71, 11, 70, 69, 12, 54, 53, 13, 52, 51, 14, 50, 49, 15, 48, 47, 16, 46, 17, 45, 44, 18, 43, 42, 19, 41, 40, 20, 39, 38, 21, 37, 22, 36, 35, 23, 34, 33, 24, 32, 31, 25, 30, 29, 26, 27, 58, 28 }
  uselistorder i32 %stack_var_-20872.0.ph, { 2, 1, 0 }
  uselistorder i32 %stack_var_-20860.0.ph, { 1, 0 }
  uselistorder i32 %v1_8500, { 1, 0 }
  uselistorder i32 %v0_8500, { 1, 0 }
  uselistorder i32 %v2_84d0, { 2, 1, 3, 0, 5, 4, 6 }
  uselistorder i32 %v2_84c0, { 1, 0 }
  uselistorder i32 %v8_84a4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_8484, { 2, 0, 1, 3 }
  uselistorder i32 %v0_840c, { 5, 4, 1, 0, 3, 2 }
  uselistorder i32 %v2_83b0, { 2, 1, 4, 3, 0, 5, 6 }
  uselistorder i32 %v0_839c, { 14, 0, 1, 15, 13, 28, 24, 2, 25, 23, 26, 11, 3, 4, 12, 10, 27, 8, 5, 6, 9, 7, 22, 21, 29, 18, 19, 20, 17, 16 }
  uselistorder i32 %v0_8390, { 1, 2, 6, 0, 3, 4, 5 }
  uselistorder i1 %v2_8320, { 1, 0, 2 }
  uselistorder i32 %v1_831c, { 0, 2, 1, 3 }
  uselistorder i32 %v2_830c, { 1, 0 }
  uselistorder i32 %v3_8308, { 0, 2, 4, 1, 5, 3, 6 }
  uselistorder i32 %v2_8300, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32* %v11_82f4, { 1, 0, 2 }
  uselistorder i32 %v10_82f0, { 21, 20, 19, 11, 10, 17, 16, 15, 18, 14, 13, 34, 33, 32, 30, 29, 28, 31, 27, 26, 25, 12, 23, 22, 9, 8, 24, 7, 39, 38, 37, 36, 35, 44, 43, 42, 41, 40, 6, 5, 4, 3, 2, 1, 0, 45, 46 }
  uselistorder i32 %v2_82e8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_82d8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_82c8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v1_82a8, { 1, 0 }
  uselistorder i32 %v0_82a4, { 1, 0, 3, 2 }
  uselistorder i8* %tmp199, { 5, 6, 4, 7, 3, 8, 2, 9, 1, 10, 11, 12, 0 }
  uselistorder i32 %v2_8280, { 0, 16, 22, 23, 24, 1, 19, 2, 20, 21, 25, 10, 3, 15, 4, 17, 18, 26, 5, 14, 6, 27, 7, 13, 28, 8, 12, 29, 9, 11, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i32 %v5_8278, { 1, 0 }
  uselistorder i32 %v6_8200, { 5, 4, 6, 2, 11, 0, 1, 10, 12, 9, 3, 8, 7, 13 }
  uselistorder i32 %v1_81e4, { 2, 1, 0 }
  uselistorder i32 %v1_81d8, { 1, 2, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-20809, { 0, 2, 1, 3, 4 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0, 37, 38, 39, 40, 1, 41, 44, 42, 43 }
  uselistorder i32* %stack_var_-72, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2, 3 }
  uselistorder i32* %sb.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 10, 11, 14, 12, 13, 17, 18, 16, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 4, 3, 5, 8, 6, 7 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 8, 5, 6, 7, 9, 12, 10, 11, 0 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 150, 151, 155, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 53, 55, 56, 57, 58, 59, 60, 62, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 146, 147, 148, 149, 98, 99, 100, 101, 105, 102, 103, 104, 106, 107, 110, 111, 108, 109, 112, 114, 113, 115, 116, 117, 118, 119, 124, 120, 121, 122, 123, 125, 127, 126, 3, 129, 128, 2, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 163, 145, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 103, 104, 105, 106, 107, 108, 109, 110, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 100, 101, 102, 67, 68, 69, 70, 71, 74, 75, 72, 73, 76, 77, 78, 79, 80, 81, 82, 84, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 43, 25, 12, 13, 14, 15, 17, 16, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39, 40, 41, 42, 44, 45, 9, 161, 162, 163, 164, 167, 165, 166, 168, 169, 170, 171, 172, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 154, 155, 156, 157, 158, 159, 160, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 120, 122, 123, 125, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 152, 0 }
  uselistorder i32* %r0.global-to-local, { 21, 20, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 212, 37, 148, 35, 77, 43, 38, 40, 39, 41, 44, 42, 46, 45, 48, 47, 49, 51, 50, 52, 55, 53, 54, 57, 56, 60, 58, 59, 61, 62, 63, 65, 64, 66, 67, 68, 70, 69, 71, 73, 72, 75, 74, 76, 79, 78, 81, 80, 82, 84, 83, 86, 85, 87, 89, 88, 90, 93, 91, 92, 95, 94, 98, 96, 97, 99, 101, 100, 103, 102, 105, 104, 106, 108, 107, 109, 111, 110, 112, 113, 114, 36, 116, 115, 118, 117, 119, 121, 120, 122, 332, 333, 335, 334, 337, 336, 338, 11, 339, 340, 10, 341, 13, 342, 12, 18, 17, 343, 344, 345, 347, 346, 123, 125, 124, 127, 126, 128, 129, 130, 132, 131, 133, 135, 134, 137, 136, 139, 138, 140, 142, 141, 143, 144, 146, 145, 19, 147, 150, 149, 152, 151, 154, 153, 157, 155, 156, 159, 158, 160, 162, 161, 163, 165, 164, 167, 166, 169, 168, 170, 172, 171, 173, 175, 174, 176, 177, 179, 178, 181, 180, 182, 184, 183, 185, 187, 186, 188, 189, 191, 190, 193, 192, 194, 196, 195, 197, 199, 198, 200, 202, 201, 203, 204, 206, 205, 208, 207, 215, 209, 210, 279, 211, 213, 214, 16, 216, 217, 15, 218, 219, 220, 221, 222, 223, 224, 226, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 260, 262, 263, 264, 265, 267, 266, 268, 269, 270, 7, 271, 6, 272, 274, 273, 4, 5, 276, 275, 284, 277, 278, 280, 282, 281, 283, 3, 285, 2, 287, 286, 1, 288, 14, 289, 290, 8, 291, 9, 292, 293, 295, 294, 297, 296, 298, 299, 300, 302, 301, 303, 304, 306, 305, 308, 307, 310, 309, 312, 311, 314, 313, 315, 316, 317, 318, 319, 320, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 31, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 30, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 0, 29 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 52, 53, 54, 55, 56, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 50, 51, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 0, 43, 44, 45, 46, 47, 48, 49 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 6, 3, 2, 8, 26, 27, 28, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 7, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 39, 40, 41, 42, 50, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 138, 139, 96, 98, 97, 99, 100, 101, 106, 108, 107, 102, 103, 104, 105, 109, 110, 111, 112, 113, 114, 122, 123, 115, 116, 117, 118, 119, 120, 121, 124, 0, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137 }
  uselistorder i1* %cpsr_v.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 39, 40, 41, 42, 49, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 131, 132, 96, 97, 102, 101, 98, 99, 100, 103, 104, 105, 106, 107, 108, 116, 117, 109, 110, 111, 112, 113, 114, 115, 118, 0, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130 }
  uselistorder i1* %cpsr_n.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 39, 40, 41, 42, 49, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 134, 135, 96, 97, 98, 103, 105, 104, 99, 100, 101, 102, 106, 107, 108, 109, 110, 111, 119, 120, 112, 113, 114, 115, 116, 117, 118, 121, 0, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 42, 43, 44, 45, 52, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 149, 150, 151, 102, 103, 108, 110, 109, 104, 105, 106, 107, 111, 112, 113, 114, 115, 116, 117, 127, 128, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 0, 134, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148 }
  uselistorder i32 ptrtoint (i32* @global_var_15d98.50 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15d88.45 to i32), { 0, 2, 1, 3 }
  uselistorder i32 2116, { 1, 2, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15d80.43 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_15d7c.41 to i32), { 1, 4, 0, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15d74.39 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_15d54.27 to i32), { 0, 2, 1, 3 }
  uselistorder i32 20556, { 1, 0 }
  uselistorder i32 20684, { 2, 0, 1 }
  uselistorder i32 -20773, { 0, 4, 11, 5, 1, 7, 6, 2, 8, 3, 9, 10 }
  uselistorder i32 1464, { 1, 0 }
  uselistorder i32 533, { 1, 0, 3, 2, 4 }
  uselistorder i32 3140, { 5, 2, 0, 1, 3, 4, 6, 7 }
  uselistorder i32 43, { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([4 x i8]* @global_var_15d5c.21 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %arg4, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_9e70, { 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_9d1c, { 1, 0 }
  uselistorder label %.thread72, { 1, 0 }
  uselistorder label %dec_label_pc_9cf0, { 2, 0, 1 }
  uselistorder label %.thread69, { 1, 0 }
  uselistorder label %dec_label_pc_9b34, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9a14, { 1, 0 }
  uselistorder label %.thread66, { 1, 0 }
  uselistorder label %dec_label_pc_99e8, { 2, 0, 1 }
  uselistorder label %.thread63, { 1, 0 }
  uselistorder label %dec_label_pc_9884, { 5, 0, 1, 6, 2, 3, 4 }
  uselistorder label %dec_label_pc_9838, { 1, 0 }
  uselistorder label %dec_label_pc_9810, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9804, { 1, 0 }
  uselistorder label %bb234, { 1, 0 }
  uselistorder label %bb232, { 1, 0 }
  uselistorder label %dec_label_pc_965c, { 1, 0 }
  uselistorder label %dec_label_pc_95ec, { 1, 0 }
  uselistorder label %dec_label_pc_94c0, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_9498, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9430, { 1, 2, 0 }
  uselistorder label %dec_label_pc_9400, { 7, 2, 3, 1, 8, 4, 5, 0, 6 }
  uselistorder label %bb230, { 1, 0 }
  uselistorder label %dec_label_pc_9284, { 1, 0 }
  uselistorder label %dec_label_pc_927c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_9254, { 1, 0 }
  uselistorder label %dec_label_pc_9214, { 1, 0 }
  uselistorder label %bb226, { 1, 0 }
  uselistorder label %bb224, { 1, 0 }
  uselistorder label %bb222, { 1, 0 }
  uselistorder label %dec_label_pc_9124, { 2, 1, 0 }
  uselistorder label %bb220, { 1, 0 }
  uselistorder label %.thread48, { 3, 0, 1, 2 }
  uselistorder label %bb217, { 1, 0 }
  uselistorder label %.thread47, { 3, 0, 1, 2 }
  uselistorder label %bb214, { 1, 0 }
  uselistorder label %.thread46, { 1, 0 }
  uselistorder label %.thread45, { 1, 0 }
  uselistorder label %dec_label_pc_8e20, { 1, 0 }
  uselistorder label %dec_label_pc_8d48, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8ccc, { 1, 0 }
  uselistorder label %dec_label_pc_8cb4, { 1, 0 }
  uselistorder label %dec_label_pc_8c78, { 1, 0 }
  uselistorder label %dec_label_pc_8c04, { 1, 0 }
  uselistorder label %dec_label_pc_8bcc, { 1, 0 }
  uselistorder label %dec_label_pc_890c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_88dc, { 1, 0 }
  uselistorder label %dec_label_pc_8838, { 7, 8, 2, 9, 1, 10, 3, 11, 12, 15, 0, 13, 14, 6, 4, 5 }
  uselistorder label %dec_label_pc_8630, { 4, 1, 0, 2, 3, 5 }
  uselistorder label %dec_label_pc_855c.dec_label_pc_855c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_853c.dec_label_pc_853c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_8528, { 3, 0, 1, 2, 4 }
  uselistorder label %dec_label_pc_8528.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_84c8, { 1, 0 }
  uselistorder label %dec_label_pc_8444, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb205, { 1, 0 }
  uselistorder label %bb203, { 1, 0 }
  uselistorder label %dec_label_pc_82fc, { 1, 0 }
  uselistorder label %dec_label_pc_82b8, { 1, 3, 4, 0, 2 }
}

define i32 @function_9f84(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9f84:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_9f84 = urem i32 %arg1, 256
  %v2_9f88 = icmp eq i32 %v1_9f84, 0
  %v1_9f90 = urem i32 %arg3, 256
  br i1 %v2_9f88, label %dec_label_pc_9fd4, label %dec_label_pc_9f9c

dec_label_pc_9f9c:                                ; preds = %dec_label_pc_9f84
  %v0_9f9c = load i32, i32* %r1.global-to-local, align 4
  %v1_9f9c = add i32 %v0_9f9c, 4
  %v2_9f9c = inttoptr i32 %v1_9f9c to i8*
  %v3_9f9c = load i8, i8* %v2_9f9c, align 1
  %v4_9f9c = zext i8 %v3_9f9c to i32
  %v9_9fa0 = icmp eq i32 %v4_9f9c, %v1_9f90
  br i1 %v9_9fa0, label %dec_label_pc_9fdc, label %dec_label_pc_9fc4.preheader

dec_label_pc_9fc4.preheader:                      ; preds = %dec_label_pc_9f9c
  br label %dec_label_pc_9fc4

dec_label_pc_9fb4:                                ; preds = %dec_label_pc_9fc4
  %v1_9fb4 = add i32 %v0_9fbc.in, 12
  %v2_9fb4 = inttoptr i32 %v1_9fb4 to i8*
  %v3_9fb4 = load i8, i8* %v2_9fb4, align 1
  %v4_9fb4 = zext i8 %v3_9fb4 to i32
  %v9_9fb8 = icmp eq i32 %v4_9fb4, %v1_9f90
  br i1 %v9_9fb8, label %dec_label_pc_9fdc, label %dec_label_pc_9fc4

dec_label_pc_9fc4:                                ; preds = %dec_label_pc_9fc4.preheader, %dec_label_pc_9fb4
  %v0_9fbc.in = phi i32 [ %v0_9f9c, %dec_label_pc_9fc4.preheader ], [ %v0_9fbc, %dec_label_pc_9fb4 ]
  %v0_9fc4 = phi i32 [ 0, %dec_label_pc_9fc4.preheader ], [ %v1_9fc4, %dec_label_pc_9fb4 ]
  %v0_9fbc = add i32 %v0_9fbc.in, 8
  %v1_9fc4 = add i32 %v0_9fc4, 1
  store i32 %v1_9fc4, i32* @lr, align 4
  %v9_9fc8 = icmp eq i32 %v1_9fc4, %v1_9f84
  store i32 %v0_9fbc, i32* %r1.global-to-local, align 4
  br i1 %v9_9fc8, label %dec_label_pc_9fd4, label %dec_label_pc_9fb4

dec_label_pc_9fd4:                                ; preds = %dec_label_pc_9fc4, %dec_label_pc_9f84
  ret i32 %arg4

dec_label_pc_9fdc:                                ; preds = %dec_label_pc_9fb4, %dec_label_pc_9f9c
  %v0_9fdc = phi i32 [ %v0_9f9c, %dec_label_pc_9f9c ], [ %v0_9fbc, %dec_label_pc_9fb4 ]
  %v1_9fdc = inttoptr i32 %v0_9fdc to i32*
  %v2_9fdc = load i32, i32* %v1_9fdc, align 4
  ret i32 %v2_9fdc

; uselistorder directives
  uselistorder i32 %v1_9fc4, { 1, 2, 0 }
  uselistorder i32 %v0_9fbc, { 1, 0, 2 }
  uselistorder i32 %v0_9fbc.in, { 1, 0 }
  uselistorder i32 %v0_9f9c, { 1, 0, 2 }
  uselistorder i32 %v1_9f90, { 1, 0 }
  uselistorder i32 %v1_9f84, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9fc4, { 1, 0 }
}

define i32 @function_9fe8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_9fe8:
  store i32 %arg1, i32* @r6, align 4
  %v1_9ff4 = urem i32 %arg2, 256
  store i32 %v1_9ff4, i32* @r7, align 4
  %v0_a000 = call i32 @function_134bc()
  %v7_a004 = icmp eq i32 %v0_a000, -1
  %tmp23 = icmp slt i32 %v0_a000, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_9fe8
  br label %bb25

bb24:                                             ; preds = %dec_label_pc_9fe8
  %. = zext i1 %v7_a004 to i32
  store i32 %., i32* @r5, align 4
  %v2_a01c = icmp eq i1 %v7_a004, false
  br i1 %v2_a01c, label %bb26, label %bb25

bb25:                                             ; preds = %.thread2, %bb24
  ret i32 %v0_a000

bb26:                                             ; preds = %bb24
  %v0_a024 = call i32 @function_134bc()
  %v7_a028 = icmp eq i32 %v0_a024, -1
  store i32 %v0_a024, i32* @r4, align 4
  br i1 %v7_a028, label %dec_label_pc_a058, label %dec_label_pc_a034

dec_label_pc_a034:                                ; preds = %bb26
  %v2_a034 = icmp eq i32 %v0_a024, 0
  br i1 %v2_a034, label %dec_label_pc_a03c, label %dec_label_pc_a060

dec_label_pc_a03c:                                ; preds = %dec_label_pc_a034
  %v0_a03c = load i32, i32* @r6, align 4
  %v1_a040 = call i32 @function_148c4(i32 %v0_a03c)
  %v0_a044 = call i32 @function_13514()
  %v2_a04c = call i32 @function_13590(i32 %v0_a044, i32 9)
  %v0_a050 = load i32, i32* @r4, align 4
  %v1_a054 = call i32 @function_14830(i32 %v0_a050)
  br label %dec_label_pc_a058

dec_label_pc_a058:                                ; preds = %bb26, %dec_label_pc_a03c
  %v0_a058 = load i32, i32* @r5, align 4
  %v1_a05c = call i32 @function_14830(i32 %v0_a058)
  br label %dec_label_pc_a060

dec_label_pc_a060:                                ; preds = %dec_label_pc_a034, %dec_label_pc_a058
  %v2_a064 = load i8, i8* bitcast (i8** @global_var_1ea20.54 to i8*), align 4
  %v3_a064 = zext i8 %v2_a064 to i32
  %v2_a068 = icmp eq i8 %v2_a064, 0
  br i1 %v2_a068, label %dec_label_pc_a0ac, label %dec_label_pc_a070

dec_label_pc_a070:                                ; preds = %dec_label_pc_a060
  %v2_a074 = load i32, i32* @global_var_1ea24.56, align 4
  %v1_a078 = inttoptr i32 %v2_a074 to i32*
  %v2_a078 = load i32, i32* %v1_a078, align 4
  store i32 %v2_a078, i32* @ip, align 4
  %v1_a07c = add i32 %v2_a078, 4
  %v2_a07c = inttoptr i32 %v1_a07c to i8*
  %v3_a07c = load i8, i8* %v2_a07c, align 1
  %v4_a07c = zext i8 %v3_a07c to i32
  %v1_a080 = load i32, i32* @r7, align 4
  %v9_a080 = icmp eq i32 %v4_a07c, %v1_a080
  br i1 %v9_a080, label %dec_label_pc_a0b4, label %dec_label_pc_a0a0.preheader

dec_label_pc_a0a0.preheader:                      ; preds = %dec_label_pc_a070
  %v1_a084 = load i32, i32* @r5, align 4
  br label %dec_label_pc_a0a0

dec_label_pc_a090:                                ; preds = %dec_label_pc_a0a0
  %v4_a090 = mul i32 %v1_a0a0, 4
  %v5_a090 = add i32 %v4_a090, %v2_a074
  %v6_a090 = inttoptr i32 %v5_a090 to i32*
  %v7_a090 = load i32, i32* %v6_a090, align 4
  store i32 %v7_a090, i32* @ip, align 4
  %v1_a094 = add i32 %v7_a090, 4
  %v2_a094 = inttoptr i32 %v1_a094 to i8*
  %v3_a094 = load i8, i8* %v2_a094, align 1
  %v4_a094 = zext i8 %v3_a094 to i32
  %v9_a098 = icmp eq i32 %v4_a094, %v1_a080
  br i1 %v9_a098, label %dec_label_pc_a0b4, label %dec_label_pc_a0a0

dec_label_pc_a0a0:                                ; preds = %dec_label_pc_a0a0.preheader, %dec_label_pc_a090
  %v0_a0a0 = phi i32 [ %v1_a084, %dec_label_pc_a0a0.preheader ], [ %v1_a0a0, %dec_label_pc_a090 ]
  %v1_a0a0 = add i32 %v0_a0a0, 1
  %v9_a0a4 = icmp eq i32 %v1_a0a0, %v3_a064
  br i1 %v9_a0a4, label %dec_label_pc_a0ac, label %dec_label_pc_a090

dec_label_pc_a0ac:                                ; preds = %dec_label_pc_a0a0, %dec_label_pc_a060, %dec_label_pc_a0b4
  %v1_a0b0 = call i32 @function_14830(i32 0)
  %v0_a0c8.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_a0b4

dec_label_pc_a0b4:                                ; preds = %dec_label_pc_a090, %dec_label_pc_a070, %dec_label_pc_a0ac
  %v0_a0c8 = phi i32 [ %v2_a078, %dec_label_pc_a070 ], [ %v0_a0c8.pre, %dec_label_pc_a0ac ], [ %v7_a090, %dec_label_pc_a090 ]
  %v1_a0c8 = inttoptr i32 %v0_a0c8 to i32*
  %v2_a0c8 = load i32, i32* %v1_a0c8, align 4
  call void @__pseudo_branch(i32 %v2_a0c8)
  br label %dec_label_pc_a0ac

; uselistorder directives
  uselistorder i32 %v1_a0a0, { 2, 0, 1 }
  uselistorder i32 %v0_a024, { 1, 2, 0 }
  uselistorder i1 %v7_a004, { 1, 0 }
  uselistorder i32 %v0_a000, { 1, 2, 0 }
  uselistorder label %dec_label_pc_a0b4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a0ac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a0a0, { 1, 0 }
  uselistorder label %dec_label_pc_a060, { 1, 0 }
  uselistorder label %dec_label_pc_a058, { 1, 0 }
  uselistorder label %bb25, { 1, 0 }
}

define i32 @function_a0d8(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a0d8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_a0d8 = load i32, i32* @r4, align 4
  %v6_a0d8 = load i32, i32* @r5, align 4
  %v9_a0d8 = load i32, i32* @r6, align 4
  %v12_a0d8 = load i32, i32* @r7, align 4
  %v15_a0d8 = load i32, i32* @r8, align 4
  %v18_a0d8 = load i32, i32* @sb, align 4
  %v27_a0d8 = load i32, i32* @lr, align 4
  %v7_a0dc = icmp eq i32 %arg2, 3
  store i1 %v7_a0dc, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_a0e8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_a0e8, i32* @r4, align 4
  %tmp33 = icmp ult i32 %arg2, 4
  br i1 %tmp33, label %dec_label_pc_a0fc, label %dec_label_pc_a0f0

dec_label_pc_a0f0:                                ; preds = %dec_label_pc_a0d8
  %v7_a0f0 = icmp eq i32 %arg2, 4
  store i1 %v7_a0f0, i1* %cpsr_z.global-to-local, align 1
  %v1_a0f4 = inttoptr i32 %v0_a0e8 to i32*
  %v2_a0f4 = load i32, i32* %v1_a0f4, align 4
  store i32 %v2_a0f4, i32* @sl, align 4
  br i1 %v7_a0f0, label %dec_label_pc_a0fc, label %dec_label_pc_a104

dec_label_pc_a0fc:                                ; preds = %dec_label_pc_a120, %.dec_label_pc_a0fc_crit_edge, %dec_label_pc_a0f0, %dec_label_pc_a114, %dec_label_pc_a104, %dec_label_pc_a0d8
  %v29_a100 = phi i32 [ %v29_a100.pre, %.dec_label_pc_a0fc_crit_edge ], [ %v0_a0e8, %dec_label_pc_a120 ], [ %v0_a0e8, %dec_label_pc_a0f0 ], [ %v0_a0e8, %dec_label_pc_a114 ], [ %v0_a0e8, %dec_label_pc_a104 ], [ %v0_a0e8, %dec_label_pc_a0d8 ]
  store i32 %v9_a0d8, i32* @r6, align 4
  store i32 %v12_a0d8, i32* @r7, align 4
  store i32 %v15_a0d8, i32* @r8, align 4
  store i32 %v18_a0d8, i32* @sb, align 4
  ret i32 %v29_a100

dec_label_pc_a104:                                ; preds = %dec_label_pc_a0f0
  %v7_a104 = icmp eq i32 %arg2, 5
  store i1 %v7_a104, i1* %cpsr_z.global-to-local, align 1
  %v1_a108 = add i32 %v0_a0e8, 4
  %v2_a108 = inttoptr i32 %v1_a108 to i8*
  %v3_a108 = load i8, i8* %v2_a108, align 1
  %v4_a108 = zext i8 %v3_a108 to i32
  store i32 %v4_a108, i32* %r1.global-to-local, align 4
  br i1 %v7_a104, label %dec_label_pc_a0fc, label %dec_label_pc_a114

dec_label_pc_a114:                                ; preds = %dec_label_pc_a104
  %v1_a114 = add i32 %v0_a0e8, 5
  %v2_a114 = inttoptr i32 %v1_a114 to i8*
  %v3_a114 = load i8, i8* %v2_a114, align 1
  %v4_a114 = zext i8 %v3_a114 to i32
  store i32 %v4_a114, i32* @r7, align 4
  %v2_a118 = icmp eq i8 %v3_a114, 0
  store i1 %v2_a118, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a118, label %dec_label_pc_a0fc, label %dec_label_pc_a120

dec_label_pc_a120:                                ; preds = %dec_label_pc_a114
  %v3_a120 = mul nuw nsw i32 %v4_a114, 4
  store i32 %v3_a120, i32* @sb, align 4
  %v1_a124 = add i32 %arg2, -6
  store i32 %v1_a124, i32* @r6, align 4
  %v2_a128 = mul nuw nsw i32 %v4_a114, 5
  store i32 %v2_a128, i32* @r8, align 4
  %v3_a12c = icmp ult i32 %v1_a124, %v2_a128
  %v9_a12c = icmp eq i32 %v1_a124, %v2_a128
  store i1 %v9_a12c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a12c, label %dec_label_pc_a0fc, label %dec_label_pc_a134

dec_label_pc_a134:                                ; preds = %dec_label_pc_a120
  store i32 %v4_a114, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_a13c = call i32 @function_14094(i32 %v4_a114, i32 24)
  store i32 %v2_a13c, i32* %r0.global-to-local, align 4
  %v0_a140 = load i32, i32* @r7, align 4
  %v2_a140 = icmp eq i32 %v0_a140, 0
  store i1 %v2_a140, i1* %cpsr_z.global-to-local, align 1
  %v0_a148 = load i32, i32* @r4, align 4
  %v1_a148 = add i32 %v0_a148, 6
  store i32 %v1_a148, i32* %fp.global-to-local, align 4
  %tmp27 = icmp slt i32 %v0_a140, 1
  br i1 %tmp27, label %dec_label_pc_a1a0thread-pre-split, label %dec_label_pc_a150

dec_label_pc_a150:                                ; preds = %dec_label_pc_a134
  store i32 %v2_a13c, i32* %r1.global-to-local, align 4
  %v1_a154 = load i32, i32* @r8, align 4
  %v2_a154 = add i32 %v1_a154, %v0_a148
  store i32 %v2_a154, i32* %ip.global-to-local, align 4
  store i32 %v0_a148, i32* %r0.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_a164

dec_label_pc_a164:                                ; preds = %dec_label_pc_a164.dec_label_pc_a164_crit_edge, %dec_label_pc_a150
  %v2_a174 = phi i32 [ %v1_a188, %dec_label_pc_a164.dec_label_pc_a164_crit_edge ], [ %v2_a13c, %dec_label_pc_a150 ]
  %v0_a170 = phi i32 [ %v0_a170.pre, %dec_label_pc_a164.dec_label_pc_a164_crit_edge ], [ %v2_a154, %dec_label_pc_a150 ]
  %v0_a16c = phi i32 [ %v0_a164.pre, %dec_label_pc_a164.dec_label_pc_a164_crit_edge ], [ %v0_a148, %dec_label_pc_a150 ]
  %v1_a164 = add i32 %v0_a16c, 10
  %v2_a164 = inttoptr i32 %v1_a164 to i8*
  %v3_a164 = load i8, i8* %v2_a164, align 1
  %v1_a168 = add i32 %v0_a16c, 6
  %v2_a168 = inttoptr i32 %v1_a168 to i32*
  %v3_a168 = load i32, i32* %v2_a168, align 4
  store i32 %v3_a168, i32* %r2.global-to-local, align 4
  %v1_a16c = add i32 %v0_a16c, 5
  store i32 %v1_a16c, i32* %r0.global-to-local, align 4
  %v9_a170 = icmp eq i32 %v0_a170, %v1_a16c
  store i1 %v9_a170, i1* %cpsr_z.global-to-local, align 1
  %v3_a174 = add i32 %v2_a174, 20
  %v4_a174 = inttoptr i32 %v3_a174 to i8*
  store i8 %v3_a164, i8* %v4_a174, align 1
  %v0_a178 = load i32, i32* %r2.global-to-local, align 4
  %v1_a178 = load i32, i32* %r1.global-to-local, align 4
  %v2_a178 = add i32 %v1_a178, 4
  %v3_a178 = inttoptr i32 %v2_a178 to i32*
  store i32 %v0_a178, i32* %v3_a178, align 4
  %v0_a17c = load i32, i32* %r2.global-to-local, align 4
  %v1_a17c = load i32, i32* %r1.global-to-local, align 4
  %v2_a17c = add i32 %v1_a17c, 16
  %v3_a17c = inttoptr i32 %v2_a17c to i32*
  store i32 %v0_a17c, i32* %v3_a17c, align 4
  %v0_a180 = load i32, i32* @r4, align 4
  %v1_a180 = trunc i32 %v0_a180 to i8
  %v2_a180 = load i32, i32* %r1.global-to-local, align 4
  %v3_a180 = inttoptr i32 %v2_a180 to i8*
  store i8 %v1_a180, i8* %v3_a180, align 1
  %v0_a184 = load i32, i32* @lr, align 4
  %v1_a184 = trunc i32 %v0_a184 to i8
  %v2_a184 = load i32, i32* %r1.global-to-local, align 4
  %v3_a184 = add i32 %v2_a184, 1
  %v4_a184 = inttoptr i32 %v3_a184 to i8*
  store i8 %v1_a184, i8* %v4_a184, align 1
  %v0_a188 = load i32, i32* %r1.global-to-local, align 4
  %v1_a188 = add i32 %v0_a188, 24
  store i32 %v1_a188, i32* %r1.global-to-local, align 4
  %v0_a18c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a18c, label %dec_label_pc_a190, label %dec_label_pc_a164.dec_label_pc_a164_crit_edge

dec_label_pc_a164.dec_label_pc_a164_crit_edge:    ; preds = %dec_label_pc_a164
  %v0_a164.pre = load i32, i32* %r0.global-to-local, align 4
  %v0_a170.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a164

dec_label_pc_a190:                                ; preds = %dec_label_pc_a164
  %v0_a190 = load i32, i32* @sb, align 4
  %v1_a190 = load i32, i32* @r7, align 4
  %v1_a194 = load i32, i32* @r5, align 4
  %sum = add i32 %v1_a190, %v0_a190
  %v2_a194 = sub i32 %v1_a194, %sum
  %v0_a198 = load i32, i32* %r0.global-to-local, align 4
  %v1_a198 = add i32 %v0_a198, 6
  store i32 %v1_a198, i32* %fp.global-to-local, align 4
  %v1_a19c = add i32 %v2_a194, -6
  store i32 %v1_a19c, i32* @r6, align 4
  br label %dec_label_pc_a1a0

dec_label_pc_a1a0thread-pre-split:                ; preds = %dec_label_pc_a134
  %v0_a1a0.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_a1a0

dec_label_pc_a1a0:                                ; preds = %dec_label_pc_a1a0thread-pre-split, %dec_label_pc_a190
  %v0_a1ac = phi i32 [ %v1_a148, %dec_label_pc_a1a0thread-pre-split ], [ %v1_a198, %dec_label_pc_a190 ]
  %v1_a1a4 = phi i32 [ %v0_a1a0.pr, %dec_label_pc_a1a0thread-pre-split ], [ %v1_a19c, %dec_label_pc_a190 ]
  %v2_a1a0 = icmp eq i32 %v1_a1a4, 0
  store i1 %v2_a1a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a1a0, label %dec_label_pc_a2d8, label %dec_label_pc_a1ac

dec_label_pc_a1ac:                                ; preds = %dec_label_pc_a1a0
  %v1_a1ac = inttoptr i32 %v0_a1ac to i8*
  %v2_a1ac = load i8, i8* %v1_a1ac, align 1
  %v3_a1ac = zext i8 %v2_a1ac to i32
  store i32 %v3_a1ac, i32* @sb, align 4
  %v2_a1b0 = icmp eq i8 %v2_a1ac, 0
  store i1 %v2_a1b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a1b0, label %dec_label_pc_a290, label %dec_label_pc_a1c0

dec_label_pc_a1c0:                                ; preds = %dec_label_pc_a1ac
  store i32 %v3_a1ac, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_a1c8 = call i32 @function_14094(i32 %v3_a1ac, i32 8)
  store i32 %v2_a1c8, i32* %r0.global-to-local, align 4
  %v0_a1cc = load i32, i32* @sb, align 4
  %v2_a1cc = icmp eq i32 %v0_a1cc, 0
  store i1 %v2_a1cc, i1* %cpsr_z.global-to-local, align 1
  %tmp28 = icmp slt i32 %v0_a1cc, 1
  br i1 %tmp28, label %dec_label_pc_a290, label %dec_label_pc_a1dc

dec_label_pc_a1dc:                                ; preds = %dec_label_pc_a1c0
  %v0_a1dc = load i32, i32* @r6, align 4
  %v1_a1dc = add i32 %v0_a1dc, -1
  store i32 %v1_a1dc, i32* %r2.global-to-local, align 4
  %v7_a1dc = icmp eq i32 %v0_a1dc, 1
  store i1 %v7_a1dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a1dc, label %dec_label_pc_a2d8, label %dec_label_pc_a1e4

dec_label_pc_a1e4:                                ; preds = %dec_label_pc_a1dc
  %v0_a1e4 = load i32, i32* %fp.global-to-local, align 4
  %v1_a1e4 = add i32 %v0_a1e4, 1
  %v2_a1e4 = inttoptr i32 %v1_a1e4 to i8*
  %v3_a1e4 = load i8, i8* %v2_a1e4, align 1
  %v1_a1e8 = add i32 %v0_a1dc, -2
  store i32 %v1_a1e8, i32* %r2.global-to-local, align 4
  %v7_a1e8 = icmp eq i32 %v1_a1dc, 1
  store i1 %v7_a1e8, i1* %cpsr_z.global-to-local, align 1
  %v3_a1ec = add i32 %v2_a1c8, 4
  %v4_a1ec = inttoptr i32 %v3_a1ec to i8*
  store i8 %v3_a1e4, i8* %v4_a1ec, align 1
  %v0_a1f0 = load i32, i32* %fp.global-to-local, align 4
  %v1_a1f0 = add i32 %v0_a1f0, 1
  store i32 %v1_a1f0, i32* %r0.global-to-local, align 4
  %v0_a1f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a1f4, label %dec_label_pc_a2d8, label %dec_label_pc_a1f8

dec_label_pc_a1f8:                                ; preds = %dec_label_pc_a1e4
  %v1_a1f8 = add i32 %v0_a1f0, 2
  %v2_a1f8 = inttoptr i32 %v1_a1f8 to i8*
  %v3_a1f8 = load i8, i8* %v2_a1f8, align 1
  %v4_a1f8 = zext i8 %v3_a1f8 to i32
  store i32 %v4_a1f8, i32* @r4, align 4
  %v0_a1fc = load i32, i32* %r2.global-to-local, align 4
  %v1_a1fc = add i32 %v0_a1fc, -1
  store i32 %v1_a1fc, i32* @r8, align 4
  %v9_a200 = icmp eq i32 %v1_a1fc, %v4_a1f8
  store i1 %v9_a200, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a1f8, i32* %r0.global-to-local, align 4
  %v5_a208 = icmp slt i32 %v1_a1fc, %v4_a1f8
  br i1 %v5_a208, label %dec_label_pc_a2d8, label %dec_label_pc_a20c

dec_label_pc_a20c:                                ; preds = %dec_label_pc_a1f8
  store i32 %v2_a1c8, i32* @r5, align 4
  %v1_a214 = add i32 %v2_a1c8, 8
  %v1_a218 = add i32 %v0_a1f0, 3
  store i32 %v1_a218, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_a25c

dec_label_pc_a228:                                ; preds = %dec_label_pc_a25c
  %v0_a228 = load i32, i32* @r8, align 4
  %v1_a228 = load i32, i32* @r4, align 4
  %v2_a228 = sub i32 %v0_a228, %v1_a228
  store i32 %v2_a228, i32* %r2.global-to-local, align 4
  %v9_a228 = icmp eq i32 %v0_a228, %v1_a228
  store i1 %v9_a228, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a228, label %dec_label_pc_a2d8, label %dec_label_pc_a230

dec_label_pc_a230:                                ; preds = %dec_label_pc_a228
  %v1_a230 = load i32, i32* @r6, align 4
  %v2_a230 = add i32 %v1_a230, %v1_a228
  %v3_a230 = inttoptr i32 %v2_a230 to i8*
  %v4_a230 = load i8, i8* %v3_a230, align 1
  store i32 %v2_a230, i32* %r0.global-to-local, align 4
  %v1_a238 = add i32 %v2_a228, -1
  store i32 %v1_a238, i32* %r2.global-to-local, align 4
  %v7_a238 = icmp eq i32 %v2_a228, 1
  store i1 %v7_a238, i1* %cpsr_z.global-to-local, align 1
  %v3_a23c = add i32 %v2_a23c, 4
  %v4_a23c = inttoptr i32 %v3_a23c to i8*
  store i8 %v4_a230, i8* %v4_a23c, align 1
  %v0_a240 = load i32, i32* %r0.global-to-local, align 4
  %v0_a244 = load i32, i32* %r2.global-to-local, align 4
  %v1_a244 = add i32 %v0_a244, -1
  store i32 %v1_a244, i32* @r8, align 4
  %v1_a248 = add i32 %v0_a240, 2
  store i32 %v1_a248, i32* @r6, align 4
  %v0_a24c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a24c, label %dec_label_pc_a2d8, label %dec_label_pc_a250

dec_label_pc_a250:                                ; preds = %dec_label_pc_a230
  %v1_a240 = add i32 %v0_a240, 1
  %v2_a250 = inttoptr i32 %v1_a240 to i8*
  %v3_a250 = load i8, i8* %v2_a250, align 1
  %v4_a250 = zext i8 %v3_a250 to i32
  store i32 %v4_a250, i32* @r4, align 4
  %v2_a254 = sub i32 %v1_a244, %v4_a250
  %tmp30 = sub i32 0, %v2_a254
  %v6_a254 = and i32 %v1_a244, %tmp30
  %v7_a254 = icmp slt i32 %v6_a254, 0
  %v8_a254 = icmp slt i32 %v2_a254, 0
  %v9_a254 = icmp eq i32 %v1_a244, %v4_a250
  store i1 %v9_a254, i1* %cpsr_z.global-to-local, align 1
  %v2_a258 = xor i1 %v8_a254, %v7_a254
  br i1 %v2_a258, label %dec_label_pc_a2d8, label %dec_label_pc_a25c

dec_label_pc_a25c:                                ; preds = %dec_label_pc_a250, %dec_label_pc_a20c
  %v0_a260 = phi i32 [ %v4_a1f8, %dec_label_pc_a20c ], [ %v4_a250, %dec_label_pc_a250 ]
  %v2_a23c = phi i32 [ %v1_a214, %dec_label_pc_a20c ], [ %v1_a280, %dec_label_pc_a250 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_a260 = add nuw nsw i32 %v0_a260, 1
  store i32 %v1_a260, i32* %r0.global-to-local, align 4
  %v2_a264 = call i32 @function_14094(i32 %v1_a260, i32 1)
  store i32 %v2_a264, i32* %r0.global-to-local, align 4
  %v0_a268 = load i32, i32* @r6, align 4
  store i32 %v0_a268, i32* %r1.global-to-local, align 4
  %v1_a26c = load i32, i32* @r5, align 4
  %v2_a26c = inttoptr i32 %v1_a26c to i32*
  store i32 %v2_a264, i32* %v2_a26c, align 4
  %v0_a270 = load i32, i32* @r4, align 4
  store i32 %v0_a270, i32* %r2.global-to-local, align 4
  %v3_a274 = call i32 @function_12b4c(i32 %v2_a264, i32 %v0_a268, i32 %v0_a270)
  store i32 %v3_a274, i32* %r0.global-to-local, align 4
  store i32 %v2_a23c, i32* @r5, align 4
  %v0_a27c = load i32, i32* %fp.global-to-local, align 4
  %v1_a27c = add i32 %v0_a27c, 1
  store i32 %v1_a27c, i32* %fp.global-to-local, align 4
  %v1_a280 = add i32 %v2_a23c, 8
  store i32 %v1_a280, i32* %ip.global-to-local, align 4
  %v1_a284 = load i32, i32* @sb, align 4
  %v9_a284 = icmp eq i32 %v1_a27c, %v1_a284
  store i1 %v9_a284, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a284, label %dec_label_pc_a290, label %dec_label_pc_a228

dec_label_pc_a290:                                ; preds = %dec_label_pc_a25c, %dec_label_pc_a1c0, %dec_label_pc_a1ac
  %stack_var_-48.1 = phi i32 [ %v3_a1ac, %dec_label_pc_a1ac ], [ %v0_a1cc, %dec_label_pc_a1c0 ], [ %v0_a1cc, %dec_label_pc_a25c ]
  %stack_var_-52.2 = phi i32 [ %v3_a1ac, %dec_label_pc_a1ac ], [ %v2_a1c8, %dec_label_pc_a1c0 ], [ %v2_a1c8, %dec_label_pc_a25c ]
  %v0_a290 = call i32 @function_13a64()
  %v0_a294 = load i32, i32* @sl, align 4
  store i32 %stack_var_-48.1, i32* %ip.global-to-local, align 4
  %v3_a2a0 = mul i32 %v0_a294, 16777216
  %v1_a294 = mul i32 %v0_a294, 256
  %v4_a2a4 = and i32 %v1_a294, 16711680
  %v5_a2a4 = or i32 %v4_a2a4, %v3_a2a0
  store i32 %v5_a2a4, i32* %r1.global-to-local, align 4
  %v1_a29c = udiv i32 %v0_a294, 256
  %v3_a2a8 = and i32 %v1_a29c, 65280
  store i32 %v3_a2a8, i32* %r2.global-to-local, align 4
  %v2_a2b0 = inttoptr i32 %v0_a290 to i32*
  store i32 0, i32* %v2_a2b0, align 4
  %v0_a2b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a2b4 = load i32, i32* @sl, align 4
  %v4_a2b4 = udiv i32 %v1_a2b4, 16777216
  %v5_a2b4 = or i32 %v4_a2b4, %v0_a2b4
  %v0_a2b8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-52.2, i32* @ip, align 4
  %v1_a2c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_a2c0 = or i32 %v5_a2b4, %v1_a2c0
  store i32 %v2_a2c0, i32* %r0.global-to-local, align 4
  store i32 %v4_a108, i32* %r1.global-to-local, align 4
  %v0_a2cc = load i32, i32* @r7, align 4
  store i32 %v0_a2cc, i32* %r2.global-to-local, align 4
  %v6_a2d4 = trunc i32 %v0_a2b8 to i8
  %v7_a2d4 = call i32 @function_9fe8(i32 %v2_a2c0, i32 %v4_a108, i32 %v0_a2cc, i32 %v2_a13c, i8 %v6_a2d4, i32 %stack_var_-52.2)
  store i32 %v7_a2d4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a2d8

dec_label_pc_a2d8:                                ; preds = %dec_label_pc_a250, %dec_label_pc_a230, %dec_label_pc_a228, %dec_label_pc_a1f8, %dec_label_pc_a1e4, %dec_label_pc_a1dc, %dec_label_pc_a1a0, %dec_label_pc_a290
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_a1a0 ], [ %stack_var_-52.2, %dec_label_pc_a290 ], [ %v2_a1c8, %dec_label_pc_a1dc ], [ %v2_a1c8, %dec_label_pc_a1e4 ], [ %v2_a1c8, %dec_label_pc_a1f8 ], [ %v2_a1c8, %dec_label_pc_a228 ], [ %v2_a1c8, %dec_label_pc_a230 ], [ %v2_a1c8, %dec_label_pc_a250 ]
  store i32 %v2_a13c, i32* %r1.global-to-local, align 4
  %v2_a2dc = icmp eq i32 %v2_a13c, 0
  store i1 %v2_a2dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a2dc, label %bb31, label %bb

bb:                                               ; preds = %dec_label_pc_a2d8
  store i32 %v2_a13c, i32* %r0.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_a2d8, %bb
  %v1_a2e4 = xor i1 %v2_a2dc, true
  call void @__pseudo_cond_branch(i1 %v1_a2e4, i32 ptrtoint (i32* @global_var_140ec.58 to i32))
  %v2_a2ec = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_a2ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a2ec, label %.dec_label_pc_a0fc_crit_edge, label %dec_label_pc_a2f4

.dec_label_pc_a0fc_crit_edge:                     ; preds = %bb31
  %v29_a100.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a0fc

dec_label_pc_a2f4:                                ; preds = %bb31
  %v0_a2f4 = load i32, i32* @sb, align 4
  %v2_a2f4 = icmp eq i32 %v0_a2f4, 0
  store i1 %v2_a2f4, i1* %cpsr_z.global-to-local, align 1
  %tmp32 = icmp slt i32 %v0_a2f4, 1
  br i1 %tmp32, label %dec_label_pc_a31c, label %dec_label_pc_a2fc

dec_label_pc_a2fc:                                ; preds = %dec_label_pc_a2f4
  br label %dec_label_pc_a300

dec_label_pc_a300:                                ; preds = %dec_label_pc_a300, %dec_label_pc_a2fc
  %v0_a30c = phi i32 [ %v1_a30c, %dec_label_pc_a300 ], [ 0, %dec_label_pc_a2fc ]
  store i32 %stack_var_-52.3, i32* %ip.global-to-local, align 4
  %v4_a304 = mul i32 %v0_a30c, 8
  %v5_a304 = add i32 %v4_a304, %stack_var_-52.3
  %v6_a304 = inttoptr i32 %v5_a304 to i32*
  %v7_a304 = load i32, i32* %v6_a304, align 4
  store i32 %v7_a304, i32* %r0.global-to-local, align 4
  %v2_a308 = icmp eq i32 %v7_a304, 0
  store i1 %v2_a308, i1* %cpsr_z.global-to-local, align 1
  %v1_a30c = add i32 %v0_a30c, 1
  %v1_a310 = xor i1 %v2_a308, true
  call void @__pseudo_cond_branch(i1 %v1_a310, i32 ptrtoint (i32* @global_var_140ec.58 to i32))
  %v0_a314 = load i32, i32* @sb, align 4
  %v9_a314 = icmp eq i32 %v0_a314, %v1_a30c
  store i1 %v9_a314, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a314, label %dec_label_pc_a31c, label %dec_label_pc_a300

dec_label_pc_a31c:                                ; preds = %dec_label_pc_a300, %dec_label_pc_a2f4
  store i32 %stack_var_-52.3, i32* @r0, align 4
  store i32 %v3_a0d8, i32* @r4, align 4
  store i32 %v6_a0d8, i32* @r5, align 4
  store i32 %v9_a0d8, i32* @r6, align 4
  store i32 %v12_a0d8, i32* @r7, align 4
  store i32 %v15_a0d8, i32* @r8, align 4
  store i32 %v18_a0d8, i32* @sb, align 4
  store i32 %v27_a0d8, i32* @lr, align 4
  %v0_a328 = call i32 @function_140ec()
  store i32 %v0_a328, i32* %r0.global-to-local, align 4
  ret i32 %v0_a328

; uselistorder directives
  uselistorder i32 %stack_var_-52.3, { 2, 0, 1, 3 }
  uselistorder i32 %v0_a294, { 2, 0, 1 }
  uselistorder i32 %stack_var_-52.2, { 1, 0, 2 }
  uselistorder i32 %v1_a280, { 1, 0 }
  uselistorder i32 %v2_a23c, { 2, 1, 0 }
  uselistorder i32 %v2_a254, { 1, 0 }
  uselistorder i32 %v4_a250, { 0, 2, 1, 3 }
  uselistorder i32 %v1_a244, { 2, 0, 1, 3 }
  uselistorder i32 %v0_a240, { 1, 0 }
  uselistorder i32 %v0_a1dc, { 0, 2, 1 }
  uselistorder i32 %v0_a1cc, { 0, 2, 1, 3 }
  uselistorder i32 %v2_a1c8, { 0, 1, 2, 8, 7, 6, 3, 5, 9, 10, 4, 11 }
  uselistorder i32 %v3_a1ac, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v1_a188, { 1, 0 }
  uselistorder i32 %v0_a16c, { 0, 2, 1 }
  uselistorder i32 %v0_a148, { 1, 2, 0, 3 }
  uselistorder i32 %v2_a13c, { 0, 3, 4, 5, 1, 2, 6 }
  uselistorder i32 %v2_a128, { 2, 1, 0 }
  uselistorder i32 %v4_a114, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v4_a108, { 1, 0, 2 }
  uselistorder i32 %v0_a0e8, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 6, 3, 4, 5, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 21, 4, 22, 5, 8, 12, 9, 6, 7, 10, 11, 18, 13, 15, 14, 16, 17, 20, 19, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 4, 5, 3, 6 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg2, { 1, 4, 5, 0, 2, 3, 6 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_a2d8, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_a0fc, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_a32c(i32 %arg1) local_unnamed_addr {
dec_label_pc_a32c:
  %r0.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_a32c = load i32, i32* @r4, align 4
  store i32 %v3_a32c, i32* %stack_var_-12, align 4
  %v6_a32c = load i32, i32* @r5, align 4
  %v9_a32c = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_1ea28.60 to i32), i32* @r4, align 4
  %v2_a334 = load i32, i32* @global_var_1ea28.60, align 4
  store i32 %v2_a334, i32* %r0.global-to-local, align 4
  %v2_a338 = icmp eq i32 %v2_a334, 0
  br i1 %v2_a338, label %dec_label_pc_a340, label %dec_label_pc_a3c0

dec_label_pc_a340:                                ; preds = %dec_label_pc_a32c
  %v3_a340 = load i32, i32* @global_var_1ea2c.61, align 4
  store i32 %v3_a340, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  %v2_a348 = icmp eq i32 %v3_a340, 0
  store i32 0, i32* @global_var_1ea28.60, align 4
  br i1 %v2_a348, label %dec_label_pc_a354, label %dec_label_pc_a3dc

dec_label_pc_a354:                                ; preds = %dec_label_pc_a3c0.dec_label_pc_a354_crit_edge, %dec_label_pc_a340
  %v0_a35c = phi i32 [ %v0_a35c.pre, %dec_label_pc_a3c0.dec_label_pc_a354_crit_edge ], [ 0, %dec_label_pc_a340 ]
  %v1_a35c = phi i32 [ %v0_a354.pre, %dec_label_pc_a3c0.dec_label_pc_a354_crit_edge ], [ ptrtoint (i32* @global_var_1ea28.60 to i32), %dec_label_pc_a340 ]
  %v1_a354 = add i32 %v1_a35c, 8
  %v2_a354 = inttoptr i32 %v1_a354 to i32*
  %v3_a354 = load i32, i32* %v2_a354, align 4
  store i32 %v3_a354, i32* %r0.global-to-local, align 4
  %v2_a358 = icmp eq i32 %v3_a354, 0
  %v2_a35c = add i32 %v1_a35c, 4
  %v3_a35c = inttoptr i32 %v2_a35c to i32*
  store i32 %v0_a35c, i32* %v3_a35c, align 4
  br i1 %v2_a358, label %dec_label_pc_a364, label %dec_label_pc_a3f4

dec_label_pc_a364:                                ; preds = %dec_label_pc_a354, %dec_label_pc_a3dc
  %v0_a364 = load i32, i32* @r4, align 4
  %v1_a364 = add i32 %v0_a364, 12
  %v2_a364 = inttoptr i32 %v1_a364 to i32*
  %v3_a364 = load i32, i32* %v2_a364, align 4
  store i32 %v3_a364, i32* %r0.global-to-local, align 4
  %v2_a368 = icmp eq i32 %v3_a364, 0
  %v0_a36c = load i32, i32* %r5.global-to-local, align 4
  %v2_a36c = add i32 %v0_a364, 8
  %v3_a36c = inttoptr i32 %v2_a36c to i32*
  store i32 %v0_a36c, i32* %v3_a36c, align 4
  br i1 %v2_a368, label %dec_label_pc_a374, label %dec_label_pc_a40c

dec_label_pc_a374:                                ; preds = %dec_label_pc_a364, %dec_label_pc_a3f4
  %v0_a374 = load i32, i32* @r4, align 4
  %v1_a374 = add i32 %v0_a374, 16
  %v2_a374 = inttoptr i32 %v1_a374 to i32*
  %v3_a374 = load i32, i32* %v2_a374, align 4
  store i32 %v3_a374, i32* %r0.global-to-local, align 4
  %v2_a378 = icmp eq i32 %v3_a374, 0
  %v0_a37c = load i32, i32* %r5.global-to-local, align 4
  %v2_a37c = add i32 %v0_a374, 12
  %v3_a37c = inttoptr i32 %v2_a37c to i32*
  store i32 %v0_a37c, i32* %v3_a37c, align 4
  br i1 %v2_a378, label %dec_label_pc_a384, label %dec_label_pc_a424

dec_label_pc_a384:                                ; preds = %dec_label_pc_a374, %dec_label_pc_a40c
  %v0_a384 = load i32, i32* @r4, align 4
  %v1_a384 = add i32 %v0_a384, 20
  %v2_a384 = inttoptr i32 %v1_a384 to i32*
  %v3_a384 = load i32, i32* %v2_a384, align 4
  store i32 %v3_a384, i32* %r0.global-to-local, align 4
  %v2_a388 = icmp eq i32 %v3_a384, 0
  %v0_a38c = load i32, i32* %r5.global-to-local, align 4
  %v2_a38c = add i32 %v0_a384, 16
  %v3_a38c = inttoptr i32 %v2_a38c to i32*
  store i32 %v0_a38c, i32* %v3_a38c, align 4
  br i1 %v2_a388, label %dec_label_pc_a394, label %dec_label_pc_a43c

dec_label_pc_a394:                                ; preds = %dec_label_pc_a384, %dec_label_pc_a424
  %v0_a394 = load i32, i32* @r4, align 4
  %v1_a394 = add i32 %v0_a394, 24
  %v2_a394 = inttoptr i32 %v1_a394 to i32*
  %v3_a394 = load i32, i32* %v2_a394, align 4
  store i32 %v3_a394, i32* %r0.global-to-local, align 4
  %v2_a398 = icmp eq i32 %v3_a394, 0
  %v0_a39c = load i32, i32* %r5.global-to-local, align 4
  %v2_a39c = add i32 %v0_a394, 20
  %v3_a39c = inttoptr i32 %v2_a39c to i32*
  store i32 %v0_a39c, i32* %v3_a39c, align 4
  br i1 %v2_a398, label %dec_label_pc_a3a4, label %dec_label_pc_a454

dec_label_pc_a3a4:                                ; preds = %dec_label_pc_a394, %dec_label_pc_a43c
  %v0_a3a4 = load i32, i32* @r4, align 4
  %v1_a3a4 = add i32 %v0_a3a4, 28
  %v2_a3a4 = inttoptr i32 %v1_a3a4 to i32*
  %v3_a3a4 = load i32, i32* %v2_a3a4, align 4
  store i32 %v3_a3a4, i32* %r0.global-to-local, align 4
  %v2_a3a8 = icmp eq i32 %v3_a3a4, 0
  %v0_a3ac = load i32, i32* %r5.global-to-local, align 4
  %v2_a3ac = add i32 %v0_a3a4, 24
  %v3_a3ac = inttoptr i32 %v2_a3ac to i32*
  store i32 %v0_a3ac, i32* %v3_a3ac, align 4
  br i1 %v2_a3a8, label %dec_label_pc_a3b4, label %dec_label_pc_a46c

dec_label_pc_a3b4:                                ; preds = %dec_label_pc_a3a4, %dec_label_pc_a454, %dec_label_pc_a46c
  %v0_a3b4 = load i32, i32* %r5.global-to-local, align 4
  %v1_a3b4 = load i32, i32* @r4, align 4
  %v2_a3b4 = add i32 %v1_a3b4, 28
  %v3_a3b4 = inttoptr i32 %v2_a3b4 to i32*
  store i32 %v0_a3b4, i32* %v3_a3b4, align 4
  %v2_a3b8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_a3b8, i32* @r4, align 4
  store i32 %v6_a32c, i32* @r5, align 4
  store i32 %v9_a32c, i32* @lr, align 4
  %v0_a3bc = call i32 @function_106b8()
  store i32 %v0_a3bc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a3c0

dec_label_pc_a3c0:                                ; preds = %dec_label_pc_a32c, %dec_label_pc_a3b4
  %v0_a3c4 = phi i32 [ %v2_a334, %dec_label_pc_a32c ], [ %v0_a3bc, %dec_label_pc_a3b4 ]
  %v2_a3c4 = call i32 @function_13590(i32 %v0_a3c4, i32 9)
  store i32 %v2_a3c4, i32* %r0.global-to-local, align 4
  %v0_a3c8 = load i32, i32* @r4, align 4
  %v1_a3c8 = add i32 %v0_a3c8, 4
  %v2_a3c8 = inttoptr i32 %v1_a3c8 to i32*
  %v3_a3c8 = load i32, i32* %v2_a3c8, align 4
  store i32 %v3_a3c8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  %v2_a3d0 = icmp eq i32 %v3_a3c8, 0
  %v2_a3d4 = inttoptr i32 %v0_a3c8 to i32*
  store i32 0, i32* %v2_a3d4, align 4
  br i1 %v2_a3d0, label %dec_label_pc_a3c0.dec_label_pc_a354_crit_edge, label %dec_label_pc_a3c0.dec_label_pc_a3dc_crit_edge

dec_label_pc_a3c0.dec_label_pc_a3dc_crit_edge:    ; preds = %dec_label_pc_a3c0
  %v0_a3e0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a3dc

dec_label_pc_a3c0.dec_label_pc_a354_crit_edge:    ; preds = %dec_label_pc_a3c0
  %v0_a354.pre = load i32, i32* @r4, align 4
  %v0_a35c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_a354

dec_label_pc_a3dc:                                ; preds = %dec_label_pc_a3c0.dec_label_pc_a3dc_crit_edge, %dec_label_pc_a340
  %v0_a3e0 = phi i32 [ %v0_a3e0.pre, %dec_label_pc_a3c0.dec_label_pc_a3dc_crit_edge ], [ %v3_a340, %dec_label_pc_a340 ]
  %v2_a3e0 = call i32 @function_13590(i32 %v0_a3e0, i32 9)
  store i32 %v2_a3e0, i32* %r0.global-to-local, align 4
  %v0_a3e4 = load i32, i32* @r4, align 4
  %v1_a3e4 = add i32 %v0_a3e4, 8
  %v2_a3e4 = inttoptr i32 %v1_a3e4 to i32*
  %v3_a3e4 = load i32, i32* %v2_a3e4, align 4
  store i32 %v3_a3e4, i32* %r0.global-to-local, align 4
  %v2_a3e8 = icmp eq i32 %v3_a3e4, 0
  %v0_a3ec = load i32, i32* %r5.global-to-local, align 4
  %v2_a3ec = add i32 %v0_a3e4, 4
  %v3_a3ec = inttoptr i32 %v2_a3ec to i32*
  store i32 %v0_a3ec, i32* %v3_a3ec, align 4
  br i1 %v2_a3e8, label %dec_label_pc_a364, label %dec_label_pc_a3f4

dec_label_pc_a3f4:                                ; preds = %dec_label_pc_a354, %dec_label_pc_a3dc
  %v0_a3f8 = load i32, i32* %r0.global-to-local, align 4
  %v2_a3f8 = call i32 @function_13590(i32 %v0_a3f8, i32 9)
  store i32 %v2_a3f8, i32* %r0.global-to-local, align 4
  %v0_a3fc = load i32, i32* @r4, align 4
  %v1_a3fc = add i32 %v0_a3fc, 12
  %v2_a3fc = inttoptr i32 %v1_a3fc to i32*
  %v3_a3fc = load i32, i32* %v2_a3fc, align 4
  store i32 %v3_a3fc, i32* %r0.global-to-local, align 4
  %v2_a400 = icmp eq i32 %v3_a3fc, 0
  %v0_a404 = load i32, i32* %r5.global-to-local, align 4
  %v2_a404 = add i32 %v0_a3fc, 8
  %v3_a404 = inttoptr i32 %v2_a404 to i32*
  store i32 %v0_a404, i32* %v3_a404, align 4
  br i1 %v2_a400, label %dec_label_pc_a374, label %dec_label_pc_a40c

dec_label_pc_a40c:                                ; preds = %dec_label_pc_a364, %dec_label_pc_a3f4
  %v0_a410 = load i32, i32* %r0.global-to-local, align 4
  %v2_a410 = call i32 @function_13590(i32 %v0_a410, i32 9)
  store i32 %v2_a410, i32* %r0.global-to-local, align 4
  %v0_a414 = load i32, i32* @r4, align 4
  %v1_a414 = add i32 %v0_a414, 16
  %v2_a414 = inttoptr i32 %v1_a414 to i32*
  %v3_a414 = load i32, i32* %v2_a414, align 4
  store i32 %v3_a414, i32* %r0.global-to-local, align 4
  %v2_a418 = icmp eq i32 %v3_a414, 0
  %v0_a41c = load i32, i32* %r5.global-to-local, align 4
  %v2_a41c = add i32 %v0_a414, 12
  %v3_a41c = inttoptr i32 %v2_a41c to i32*
  store i32 %v0_a41c, i32* %v3_a41c, align 4
  br i1 %v2_a418, label %dec_label_pc_a384, label %dec_label_pc_a424

dec_label_pc_a424:                                ; preds = %dec_label_pc_a374, %dec_label_pc_a40c
  %v0_a428 = load i32, i32* %r0.global-to-local, align 4
  %v2_a428 = call i32 @function_13590(i32 %v0_a428, i32 9)
  store i32 %v2_a428, i32* %r0.global-to-local, align 4
  %v0_a42c = load i32, i32* @r4, align 4
  %v1_a42c = add i32 %v0_a42c, 20
  %v2_a42c = inttoptr i32 %v1_a42c to i32*
  %v3_a42c = load i32, i32* %v2_a42c, align 4
  store i32 %v3_a42c, i32* %r0.global-to-local, align 4
  %v2_a430 = icmp eq i32 %v3_a42c, 0
  %v0_a434 = load i32, i32* %r5.global-to-local, align 4
  %v2_a434 = add i32 %v0_a42c, 16
  %v3_a434 = inttoptr i32 %v2_a434 to i32*
  store i32 %v0_a434, i32* %v3_a434, align 4
  br i1 %v2_a430, label %dec_label_pc_a394, label %dec_label_pc_a43c

dec_label_pc_a43c:                                ; preds = %dec_label_pc_a384, %dec_label_pc_a424
  %v0_a440 = load i32, i32* %r0.global-to-local, align 4
  %v2_a440 = call i32 @function_13590(i32 %v0_a440, i32 9)
  store i32 %v2_a440, i32* %r0.global-to-local, align 4
  %v0_a444 = load i32, i32* @r4, align 4
  %v1_a444 = add i32 %v0_a444, 24
  %v2_a444 = inttoptr i32 %v1_a444 to i32*
  %v3_a444 = load i32, i32* %v2_a444, align 4
  store i32 %v3_a444, i32* %r0.global-to-local, align 4
  %v2_a448 = icmp eq i32 %v3_a444, 0
  %v0_a44c = load i32, i32* %r5.global-to-local, align 4
  %v2_a44c = add i32 %v0_a444, 20
  %v3_a44c = inttoptr i32 %v2_a44c to i32*
  store i32 %v0_a44c, i32* %v3_a44c, align 4
  br i1 %v2_a448, label %dec_label_pc_a3a4, label %dec_label_pc_a454

dec_label_pc_a454:                                ; preds = %dec_label_pc_a394, %dec_label_pc_a43c
  %v0_a458 = load i32, i32* %r0.global-to-local, align 4
  %v2_a458 = call i32 @function_13590(i32 %v0_a458, i32 9)
  store i32 %v2_a458, i32* %r0.global-to-local, align 4
  %v0_a45c = load i32, i32* @r4, align 4
  %v1_a45c = add i32 %v0_a45c, 28
  %v2_a45c = inttoptr i32 %v1_a45c to i32*
  %v3_a45c = load i32, i32* %v2_a45c, align 4
  store i32 %v3_a45c, i32* %r0.global-to-local, align 4
  %v2_a460 = icmp eq i32 %v3_a45c, 0
  %v0_a464 = load i32, i32* %r5.global-to-local, align 4
  %v2_a464 = add i32 %v0_a45c, 24
  %v3_a464 = inttoptr i32 %v2_a464 to i32*
  store i32 %v0_a464, i32* %v3_a464, align 4
  br i1 %v2_a460, label %dec_label_pc_a3b4, label %dec_label_pc_a46c

dec_label_pc_a46c:                                ; preds = %dec_label_pc_a3a4, %dec_label_pc_a454
  %v0_a470 = load i32, i32* %r0.global-to-local, align 4
  %v2_a470 = call i32 @function_13590(i32 %v0_a470, i32 9)
  store i32 %v2_a470, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a3b4

; uselistorder directives
  uselistorder i32* %r5.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1, 10, 8, 9, 11, 12, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 2, 16, 1, 4, 18, 3, 6, 20, 5, 8, 22, 7, 10, 24, 9, 12, 26, 11, 15, 13, 14, 30, 0, 17, 19, 21, 23, 25, 27, 28, 29 }
  uselistorder label %dec_label_pc_a46c, { 1, 0 }
  uselistorder label %dec_label_pc_a454, { 1, 0 }
  uselistorder label %dec_label_pc_a43c, { 1, 0 }
  uselistorder label %dec_label_pc_a424, { 1, 0 }
  uselistorder label %dec_label_pc_a40c, { 1, 0 }
  uselistorder label %dec_label_pc_a3f4, { 1, 0 }
  uselistorder label %dec_label_pc_a3c0, { 1, 0 }
  uselistorder label %dec_label_pc_a3b4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a3a4, { 1, 0 }
  uselistorder label %dec_label_pc_a394, { 1, 0 }
  uselistorder label %dec_label_pc_a384, { 1, 0 }
  uselistorder label %dec_label_pc_a374, { 1, 0 }
  uselistorder label %dec_label_pc_a364, { 1, 0 }
}

define i32 @function_a47c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_a47c:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_a47c = urem i32 %arg1, 256
  %v2_a480 = icmp eq i32 %v1_a47c, 0
  %v3_a484 = load i32, i32* @r4, align 4
  br i1 %v2_a480, label %dec_label_pc_a4cc, label %dec_label_pc_a490

dec_label_pc_a490:                                ; preds = %dec_label_pc_a47c
  %v0_a490 = load i32, i32* %r1.global-to-local, align 4
  %v1_a490 = add i32 %v0_a490, 4
  %v2_a490 = inttoptr i32 %v1_a490 to i8*
  %v3_a490 = load i8, i8* %v2_a490, align 1
  %v4_a490 = zext i8 %v3_a490 to i32
  %v1_a494 = urem i32 %arg3, 256
  %v9_a498 = icmp eq i32 %v4_a490, %v1_a494
  br i1 %v9_a498, label %dec_label_pc_a4d4, label %dec_label_pc_a4bc.preheader

dec_label_pc_a4bc.preheader:                      ; preds = %dec_label_pc_a490
  br label %dec_label_pc_a4bc

dec_label_pc_a4ac:                                ; preds = %dec_label_pc_a4bc
  %v1_a4ac = add i32 %v0_a4b4.in, 12
  %v2_a4ac = inttoptr i32 %v1_a4ac to i8*
  %v3_a4ac = load i8, i8* %v2_a4ac, align 1
  %v4_a4ac = zext i8 %v3_a4ac to i32
  %v9_a4b0 = icmp eq i32 %v1_a494, %v4_a4ac
  br i1 %v9_a4b0, label %dec_label_pc_a4d4, label %dec_label_pc_a4bc

dec_label_pc_a4bc:                                ; preds = %dec_label_pc_a4bc.preheader, %dec_label_pc_a4ac
  %v0_a4b4.in = phi i32 [ %v0_a490, %dec_label_pc_a4bc.preheader ], [ %v0_a4b4, %dec_label_pc_a4ac ]
  %v0_a4bc = phi i32 [ 0, %dec_label_pc_a4bc.preheader ], [ %v1_a4bc, %dec_label_pc_a4ac ]
  %v0_a4b4 = add i32 %v0_a4b4.in, 8
  %v1_a4bc = add i32 %v0_a4bc, 1
  %v9_a4c0 = icmp eq i32 %v1_a47c, %v1_a4bc
  store i32 %v0_a4b4, i32* %r1.global-to-local, align 4
  br i1 %v9_a4c0, label %dec_label_pc_a4cc, label %dec_label_pc_a4ac

dec_label_pc_a4cc:                                ; preds = %dec_label_pc_a4bc, %dec_label_pc_a4d4, %dec_label_pc_a47c
  store i32 %v3_a484, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_a4d4:                                ; preds = %dec_label_pc_a4ac, %dec_label_pc_a490
  %v0_a4d4 = phi i32 [ %v0_a490, %dec_label_pc_a490 ], [ %v0_a4b4, %dec_label_pc_a4ac ]
  %v1_a4d4 = inttoptr i32 %v0_a4d4 to i32*
  %v2_a4d4 = load i32, i32* %v1_a4d4, align 4
  store i32 %v2_a4d4, i32* @r0, align 4
  %v2_a4d8 = icmp eq i32 %v2_a4d4, 0
  br i1 %v2_a4d8, label %dec_label_pc_a4cc, label %dec_label_pc_a4e0

dec_label_pc_a4e0:                                ; preds = %dec_label_pc_a4d4
  store i32 %v3_a484, i32* @r4, align 4
  %v1_a4e4 = call i32 @function_13b70(i32 %v2_a4d4)
  ret i32 %v1_a4e4

; uselistorder directives
  uselistorder i32 %v1_a4bc, { 1, 0 }
  uselistorder i32 %v0_a4b4, { 1, 0, 2 }
  uselistorder i32 %v0_a4b4.in, { 1, 0 }
  uselistorder i32 %v1_a494, { 1, 0 }
  uselistorder i32 %v0_a490, { 1, 0, 2 }
  uselistorder i32 %v3_a484, { 1, 0 }
  uselistorder i32 %v1_a47c, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a4cc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a4bc, { 1, 0 }
}

define i32 @function_a4e8(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a4e8:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_a4e8 = urem i32 %arg1, 256
  %v2_a4ec = icmp eq i32 %v1_a4e8, 0
  %v3_a4f0 = load i32, i32* @r4, align 4
  %v6_a4f0 = load i32, i32* @lr, align 4
  br i1 %v2_a4ec, label %dec_label_pc_a538, label %dec_label_pc_a4fc

dec_label_pc_a4fc:                                ; preds = %dec_label_pc_a4e8
  %v0_a4fc = load i32, i32* %r1.global-to-local, align 4
  %v1_a4fc = add i32 %v0_a4fc, 4
  %v2_a4fc = inttoptr i32 %v1_a4fc to i8*
  %v3_a4fc = load i8, i8* %v2_a4fc, align 1
  %v4_a4fc = zext i8 %v3_a4fc to i32
  %v1_a500 = urem i32 %arg3, 256
  %v9_a504 = icmp eq i32 %v4_a4fc, %v1_a500
  br i1 %v9_a504, label %dec_label_pc_a540, label %dec_label_pc_a528.preheader

dec_label_pc_a528.preheader:                      ; preds = %dec_label_pc_a4fc
  br label %dec_label_pc_a528

dec_label_pc_a518:                                ; preds = %dec_label_pc_a528
  %v1_a518 = add i32 %v0_a520.in, 12
  %v2_a518 = inttoptr i32 %v1_a518 to i8*
  %v3_a518 = load i8, i8* %v2_a518, align 1
  %v4_a518 = zext i8 %v3_a518 to i32
  %v9_a51c = icmp eq i32 %v1_a500, %v4_a518
  br i1 %v9_a51c, label %dec_label_pc_a540, label %dec_label_pc_a528

dec_label_pc_a528:                                ; preds = %dec_label_pc_a528.preheader, %dec_label_pc_a518
  %v0_a520.in = phi i32 [ %v0_a4fc, %dec_label_pc_a528.preheader ], [ %v0_a520, %dec_label_pc_a518 ]
  %v0_a528 = phi i32 [ 0, %dec_label_pc_a528.preheader ], [ %v1_a528, %dec_label_pc_a518 ]
  %v0_a520 = add i32 %v0_a520.in, 8
  %v1_a528 = add i32 %v0_a528, 1
  store i32 %v1_a528, i32* @lr, align 4
  %v9_a52c = icmp eq i32 %v1_a4e8, %v1_a528
  store i32 %v0_a520, i32* %r1.global-to-local, align 4
  br i1 %v9_a52c, label %dec_label_pc_a538, label %dec_label_pc_a518

dec_label_pc_a538:                                ; preds = %dec_label_pc_a528, %dec_label_pc_a540, %dec_label_pc_a4e8
  store i32 %v3_a4f0, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_a540:                                ; preds = %dec_label_pc_a518, %dec_label_pc_a4fc
  %v0_a540 = phi i32 [ %v0_a4fc, %dec_label_pc_a4fc ], [ %v0_a520, %dec_label_pc_a518 ]
  %v1_a540 = inttoptr i32 %v0_a540 to i32*
  %v2_a540 = load i32, i32* %v1_a540, align 4
  %v2_a544 = icmp eq i32 %v2_a540, 0
  br i1 %v2_a544, label %dec_label_pc_a538, label %dec_label_pc_a54c

dec_label_pc_a54c:                                ; preds = %dec_label_pc_a540
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_a4f0, i32* @r4, align 4
  store i32 %v6_a4f0, i32* @lr, align 4
  %v2_a554 = inttoptr i32 %v2_a540 to i8*
  %v3_a554 = call i32 @function_12bfc(i8* %v2_a554, i32 10)
  ret i32 %v3_a554

; uselistorder directives
  uselistorder i32 %v1_a528, { 1, 2, 0 }
  uselistorder i32 %v0_a520, { 1, 0, 2 }
  uselistorder i32 %v0_a520.in, { 1, 0 }
  uselistorder i32 %v1_a500, { 1, 0 }
  uselistorder i32 %v0_a4fc, { 1, 0, 2 }
  uselistorder i32 %v3_a4f0, { 1, 0 }
  uselistorder i32 %v1_a4e8, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_a538, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a528, { 1, 0 }
}

define i32 @function_a558(i32 %arg1) local_unnamed_addr {
dec_label_pc_a558:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_a558 = load i32, i32* @r4, align 4
  store i32 %v3_a558, i32* %stack_var_-20, align 4
  %v6_a558 = load i32, i32* @r5, align 4
  %v9_a558 = load i32, i32* @r6, align 4
  %v12_a558 = load i32, i32* @r7, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_a564 = call i32 @function_14094(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1ea20.54 to i32), i32* @r4, align 4
  %v2_a56c = load i8, i8* bitcast (i8** @global_var_1ea20.54 to i8*), align 4
  %v3_a56c = zext i8 %v2_a56c to i32
  store i32 ptrtoint (i32* @global_var_1ea24.56 to i32), i32* @r6, align 4
  store i32 53540, i32* %r2.global-to-local, align 4
  store i32 %v2_a564, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a580 = mul nuw nsw i32 %v3_a56c, 4
  store i32 %v3_a580, i32* %r1.global-to-local, align 4
  %v2_a584 = load i32, i32* @global_var_1ea24.56, align 4
  %v2_a588 = inttoptr i32 %v2_a564 to i32*
  store i32 53540, i32* %v2_a588, align 4
  %v3_a58c = load i32, i32* @r5, align 4
  %v4_a58c = add i32 %v3_a58c, 4
  %v5_a58c = inttoptr i32 %v4_a58c to i8*
  store i8 0, i8* %v5_a58c, align 1
  %v0_a590 = load i32, i32* %r1.global-to-local, align 4
  %v1_a590 = add i32 %v0_a590, 4
  store i32 %v1_a590, i32* %r1.global-to-local, align 4
  %v5_a594 = call i32 @function_141dc(i32 %v2_a584, i32 %v1_a590, i32 53540, i32 0)
  %v2_a598 = load i8, i8* bitcast (i8** @global_var_1ea20.54 to i8*), align 4
  %v3_a598 = zext i8 %v2_a598 to i32
  store i32 %v3_a598, i32* %r3.global-to-local, align 4
  store i32 %v5_a594, i32* %ip.global-to-local, align 4
  %v0_a5a0 = load i32, i32* @r5, align 4
  %v5_a5a0 = mul nuw nsw i32 %v3_a598, 4
  %v6_a5a0 = add i32 %v5_a5a0, %v5_a594
  %v7_a5a0 = inttoptr i32 %v6_a5a0 to i32*
  store i32 %v0_a5a0, i32* %v7_a5a0, align 4
  store i32 ptrtoint (i8* @global_var_1ea21.65 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v3_a5b0 = load i32, i32* @r4, align 4
  %v4_a5b0 = inttoptr i32 %v3_a5b0 to i8*
  store i8 ptrtoint (i8* @global_var_1ea21.65 to i8), i8* %v4_a5b0, align 1
  %v0_a5b4 = load i32, i32* %ip.global-to-local, align 4
  %v1_a5b4 = load i32, i32* @r6, align 4
  %v2_a5b4 = inttoptr i32 %v1_a5b4 to i32*
  store i32 %v0_a5b4, i32* %v2_a5b4, align 4
  %v2_a5b8 = call i32 @function_14094(i32 1, i32 8)
  %v2_a5bc = load i8, i8* bitcast (i8** @global_var_1ea20.54 to i8*), align 4
  %v3_a5bc = zext i8 %v2_a5bc to i32
  store i32 ptrtoint (i32* @global_var_d7b0.67 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r7, align 4
  store i32 %v2_a5b8, i32* @r5, align 4
  %v3_a5cc = mul nuw nsw i32 %v3_a5bc, 4
  store i32 %v3_a5cc, i32* %r1.global-to-local, align 4
  %v2_a5d0 = load i32, i32* @global_var_1ea24.56, align 4
  %v2_a5d4 = inttoptr i32 %v2_a5b8 to i32*
  store i32 ptrtoint (i32* @global_var_d7b0.67 to i32), i32* %v2_a5d4, align 4
  %v0_a5d8 = load i32, i32* @r7, align 4
  %v1_a5d8 = trunc i32 %v0_a5d8 to i8
  %v2_a5d8 = load i32, i32* @r5, align 4
  %v3_a5d8 = add i32 %v2_a5d8, 4
  %v4_a5d8 = inttoptr i32 %v3_a5d8 to i8*
  store i8 %v1_a5d8, i8* %v4_a5d8, align 1
  %v0_a5dc = load i32, i32* %r1.global-to-local, align 4
  %v1_a5dc = add i32 %v0_a5dc, 4
  store i32 %v1_a5dc, i32* %r1.global-to-local, align 4
  %v5_a5e0 = call i32 @function_141dc(i32 %v2_a5d0, i32 %v1_a5dc, i32 sext (i8 ptrtoint (i8* @global_var_1ea21.65 to i8) to i32), i32 ptrtoint (i32* @global_var_d7b0.67 to i32))
  %v2_a5e4 = load i8, i8* bitcast (i8** @global_var_1ea20.54 to i8*), align 4
  %v3_a5e4 = zext i8 %v2_a5e4 to i32
  store i32 %v3_a5e4, i32* %r3.global-to-local, align 4
  store i32 %v5_a5e0, i32* %ip.global-to-local, align 4
  %v0_a5ec = load i32, i32* @r5, align 4
  %v5_a5ec = mul nuw nsw i32 %v3_a5e4, 4
  %v6_a5ec = add i32 %v5_a5ec, %v5_a5e0
  %v7_a5ec = inttoptr i32 %v6_a5ec to i32*
  store i32 %v0_a5ec, i32* %v7_a5ec, align 4
  %v0_a5f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a5f0 = load i32, i32* @r7, align 4
  %v2_a5f0 = add i32 %v1_a5f0, %v0_a5f0
  store i32 %v2_a5f0, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a5fc = load i32, i32* %ip.global-to-local, align 4
  %v1_a5fc = load i32, i32* @r6, align 4
  %v2_a5fc = inttoptr i32 %v1_a5fc to i32*
  store i32 %v0_a5fc, i32* %v2_a5fc, align 4
  %v0_a600 = load i32, i32* %r2.global-to-local, align 4
  %v1_a600 = trunc i32 %v0_a600 to i8
  %v2_a600 = load i32, i32* @r4, align 4
  %v3_a600 = inttoptr i32 %v2_a600 to i8*
  store i8 %v1_a600, i8* %v3_a600, align 1
  %v2_a604 = call i32 @function_14094(i32 %v1_a5f0, i32 8)
  %v2_a608 = load i8, i8* bitcast (i8** @global_var_1ea20.54 to i8*), align 4
  %v3_a608 = zext i8 %v2_a608 to i32
  store i32 ptrtoint (i32* @global_var_dc74.69 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a604, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_a618 = mul nuw nsw i32 %v3_a608, 4
  store i32 %v3_a618, i32* %r1.global-to-local, align 4
  %v2_a61c = load i32, i32* @global_var_1ea24.56, align 4
  %v2_a620 = inttoptr i32 %v2_a604 to i32*
  store i32 ptrtoint (i32* @global_var_dc74.69 to i32), i32* %v2_a620, align 4
  %v3_a624 = load i32, i32* @r5, align 4
  %v4_a624 = add i32 %v3_a624, 4
  %v5_a624 = inttoptr i32 %v4_a624 to i8*
  store i8 2, i8* %v5_a624, align 1
  %v0_a628 = load i32, i32* %r1.global-to-local, align 4
  %v1_a628 = add i32 %v0_a628, 4
  store i32 %v1_a628, i32* %r1.global-to-local, align 4
  %v5_a62c = call i32 @function_141dc(i32 %v2_a61c, i32 %v1_a628, i32 ptrtoint (i32* @global_var_dc74.69 to i32), i32 2)
  %v2_a630 = load i8, i8* bitcast (i8** @global_var_1ea20.54 to i8*), align 4
  %v3_a630 = zext i8 %v2_a630 to i32
  store i32 %v3_a630, i32* %r3.global-to-local, align 4
  store i32 %v5_a62c, i32* %ip.global-to-local, align 4
  %v0_a638 = load i32, i32* @r5, align 4
  %v5_a638 = mul nuw nsw i32 %v3_a630, 4
  %v6_a638 = add i32 %v5_a638, %v5_a62c
  %v7_a638 = inttoptr i32 %v6_a638 to i32*
  store i32 %v0_a638, i32* %v7_a638, align 4
  %v0_a63c = load i32, i32* %r3.global-to-local, align 4
  %v1_a63c = load i32, i32* @r7, align 4
  %v2_a63c = add i32 %v1_a63c, %v0_a63c
  store i32 %v2_a63c, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a648 = load i32, i32* %ip.global-to-local, align 4
  %v1_a648 = load i32, i32* @r6, align 4
  %v2_a648 = inttoptr i32 %v1_a648 to i32*
  store i32 %v0_a648, i32* %v2_a648, align 4
  %v0_a64c = load i32, i32* %r2.global-to-local, align 4
  %v1_a64c = trunc i32 %v0_a64c to i8
  %v2_a64c = load i32, i32* @r4, align 4
  %v3_a64c = inttoptr i32 %v2_a64c to i8*
  store i8 %v1_a64c, i8* %v3_a64c, align 1
  %v2_a650 = call i32 @function_14094(i32 %v1_a63c, i32 8)
  %v2_a654 = load i8, i8* bitcast (i8** @global_var_1ea20.54 to i8*), align 4
  %v3_a654 = zext i8 %v2_a654 to i32
  store i32 ptrtoint (i32* @global_var_ce40.71 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a650, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v3_a664 = mul nuw nsw i32 %v3_a654, 4
  store i32 %v3_a664, i32* %r1.global-to-local, align 4
  %v2_a668 = load i32, i32* @global_var_1ea24.56, align 4
  %v2_a66c = inttoptr i32 %v2_a650 to i32*
  store i32 ptrtoint (i32* @global_var_ce40.71 to i32), i32* %v2_a66c, align 4
  %v3_a670 = load i32, i32* @r5, align 4
  %v4_a670 = add i32 %v3_a670, 4
  %v5_a670 = inttoptr i32 %v4_a670 to i8*
  store i8 9, i8* %v5_a670, align 1
  %v0_a674 = load i32, i32* %r1.global-to-local, align 4
  %v1_a674 = add i32 %v0_a674, 4
  store i32 %v1_a674, i32* %r1.global-to-local, align 4
  %v5_a678 = call i32 @function_141dc(i32 %v2_a668, i32 %v1_a674, i32 ptrtoint (i32* @global_var_ce40.71 to i32), i32 9)
  %v2_a67c = load i8, i8* bitcast (i8** @global_var_1ea20.54 to i8*), align 4
  %v3_a67c = zext i8 %v2_a67c to i32
  store i32 %v3_a67c, i32* %r3.global-to-local, align 4
  store i32 %v5_a678, i32* %ip.global-to-local, align 4
  %v0_a684 = load i32, i32* @r5, align 4
  %v5_a684 = mul nuw nsw i32 %v3_a67c, 4
  %v6_a684 = add i32 %v5_a684, %v5_a678
  %v7_a684 = inttoptr i32 %v6_a684 to i32*
  store i32 %v0_a684, i32* %v7_a684, align 4
  %v0_a688 = load i32, i32* %r3.global-to-local, align 4
  %v1_a688 = load i32, i32* @r7, align 4
  %v2_a688 = add i32 %v1_a688, %v0_a688
  store i32 %v2_a688, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a694 = load i32, i32* %ip.global-to-local, align 4
  %v1_a694 = load i32, i32* @r6, align 4
  %v2_a694 = inttoptr i32 %v1_a694 to i32*
  store i32 %v0_a694, i32* %v2_a694, align 4
  %v0_a698 = load i32, i32* %r2.global-to-local, align 4
  %v1_a698 = trunc i32 %v0_a698 to i8
  %v2_a698 = load i32, i32* @r4, align 4
  %v3_a698 = inttoptr i32 %v2_a698 to i8*
  store i8 %v1_a698, i8* %v3_a698, align 1
  %v2_a69c = call i32 @function_14094(i32 %v1_a688, i32 8)
  %v2_a6a0 = load i8, i8* bitcast (i8** @global_var_1ea20.54 to i8*), align 4
  %v3_a6a0 = zext i8 %v2_a6a0 to i32
  store i32 ptrtoint (i32* @global_var_c6fc.73 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a69c, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_a6b0 = mul nuw nsw i32 %v3_a6a0, 4
  store i32 %v3_a6b0, i32* %r1.global-to-local, align 4
  %v2_a6b4 = load i32, i32* @global_var_1ea24.56, align 4
  %v2_a6b8 = inttoptr i32 %v2_a69c to i32*
  store i32 ptrtoint (i32* @global_var_c6fc.73 to i32), i32* %v2_a6b8, align 4
  %v3_a6bc = load i32, i32* @r5, align 4
  %v4_a6bc = add i32 %v3_a6bc, 4
  %v5_a6bc = inttoptr i32 %v4_a6bc to i8*
  store i8 3, i8* %v5_a6bc, align 1
  %v0_a6c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_a6c0 = add i32 %v0_a6c0, 4
  store i32 %v1_a6c0, i32* %r1.global-to-local, align 4
  %v5_a6c4 = call i32 @function_141dc(i32 %v2_a6b4, i32 %v1_a6c0, i32 ptrtoint (i32* @global_var_c6fc.73 to i32), i32 3)
  %v2_a6c8 = load i8, i8* bitcast (i8** @global_var_1ea20.54 to i8*), align 4
  %v3_a6c8 = zext i8 %v2_a6c8 to i32
  store i32 %v3_a6c8, i32* %r3.global-to-local, align 4
  store i32 %v5_a6c4, i32* %ip.global-to-local, align 4
  %v0_a6d0 = load i32, i32* @r5, align 4
  %v5_a6d0 = mul nuw nsw i32 %v3_a6c8, 4
  %v6_a6d0 = add i32 %v5_a6d0, %v5_a6c4
  %v7_a6d0 = inttoptr i32 %v6_a6d0 to i32*
  store i32 %v0_a6d0, i32* %v7_a6d0, align 4
  %v0_a6d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a6d4 = load i32, i32* @r7, align 4
  %v2_a6d4 = add i32 %v1_a6d4, %v0_a6d4
  store i32 %v2_a6d4, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a6e0 = load i32, i32* %ip.global-to-local, align 4
  %v1_a6e0 = load i32, i32* @r6, align 4
  %v2_a6e0 = inttoptr i32 %v1_a6e0 to i32*
  store i32 %v0_a6e0, i32* %v2_a6e0, align 4
  %v0_a6e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a6e4 = trunc i32 %v0_a6e4 to i8
  %v2_a6e4 = load i32, i32* @r4, align 4
  %v3_a6e4 = inttoptr i32 %v2_a6e4 to i8*
  store i8 %v1_a6e4, i8* %v3_a6e4, align 1
  %v2_a6e8 = call i32 @function_14094(i32 %v1_a6d4, i32 8)
  %v2_a6ec = load i8, i8* bitcast (i8** @global_var_1ea20.54 to i8*), align 4
  %v3_a6ec = zext i8 %v2_a6ec to i32
  store i32 ptrtoint (i32* @global_var_bf88.75 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a6e8, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_a6fc = mul nuw nsw i32 %v3_a6ec, 4
  store i32 %v3_a6fc, i32* %r1.global-to-local, align 4
  %v2_a700 = load i32, i32* @global_var_1ea24.56, align 4
  %v2_a704 = inttoptr i32 %v2_a6e8 to i32*
  store i32 ptrtoint (i32* @global_var_bf88.75 to i32), i32* %v2_a704, align 4
  %v3_a708 = load i32, i32* @r5, align 4
  %v4_a708 = add i32 %v3_a708, 4
  %v5_a708 = inttoptr i32 %v4_a708 to i8*
  store i8 4, i8* %v5_a708, align 1
  %v0_a70c = load i32, i32* %r1.global-to-local, align 4
  %v1_a70c = add i32 %v0_a70c, 4
  store i32 %v1_a70c, i32* %r1.global-to-local, align 4
  %v5_a710 = call i32 @function_141dc(i32 %v2_a700, i32 %v1_a70c, i32 ptrtoint (i32* @global_var_bf88.75 to i32), i32 4)
  %v2_a714 = load i8, i8* bitcast (i8** @global_var_1ea20.54 to i8*), align 4
  %v3_a714 = zext i8 %v2_a714 to i32
  store i32 %v3_a714, i32* %r3.global-to-local, align 4
  store i32 %v5_a710, i32* %ip.global-to-local, align 4
  %v0_a71c = load i32, i32* @r5, align 4
  %v5_a71c = mul nuw nsw i32 %v3_a714, 4
  %v6_a71c = add i32 %v5_a71c, %v5_a710
  %v7_a71c = inttoptr i32 %v6_a71c to i32*
  store i32 %v0_a71c, i32* %v7_a71c, align 4
  %v0_a720 = load i32, i32* %r3.global-to-local, align 4
  %v1_a720 = load i32, i32* @r7, align 4
  %v2_a720 = add i32 %v1_a720, %v0_a720
  store i32 %v2_a720, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a72c = load i32, i32* %ip.global-to-local, align 4
  %v1_a72c = load i32, i32* @r6, align 4
  %v2_a72c = inttoptr i32 %v1_a72c to i32*
  store i32 %v0_a72c, i32* %v2_a72c, align 4
  %v0_a730 = load i32, i32* %r2.global-to-local, align 4
  %v1_a730 = trunc i32 %v0_a730 to i8
  %v2_a730 = load i32, i32* @r4, align 4
  %v3_a730 = inttoptr i32 %v2_a730 to i8*
  store i8 %v1_a730, i8* %v3_a730, align 1
  %v2_a734 = call i32 @function_14094(i32 %v1_a720, i32 8)
  %v2_a738 = load i8, i8* bitcast (i8** @global_var_1ea20.54 to i8*), align 4
  %v3_a738 = zext i8 %v2_a738 to i32
  store i32 ptrtoint (i32* @global_var_b728.77 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a734, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_a748 = mul nuw nsw i32 %v3_a738, 4
  store i32 %v3_a748, i32* %r1.global-to-local, align 4
  %v2_a74c = load i32, i32* @global_var_1ea24.56, align 4
  %v2_a750 = inttoptr i32 %v2_a734 to i32*
  store i32 ptrtoint (i32* @global_var_b728.77 to i32), i32* %v2_a750, align 4
  %v3_a754 = load i32, i32* @r5, align 4
  %v4_a754 = add i32 %v3_a754, 4
  %v5_a754 = inttoptr i32 %v4_a754 to i8*
  store i8 5, i8* %v5_a754, align 1
  %v0_a758 = load i32, i32* %r1.global-to-local, align 4
  %v1_a758 = add i32 %v0_a758, 4
  store i32 %v1_a758, i32* %r1.global-to-local, align 4
  %v5_a75c = call i32 @function_141dc(i32 %v2_a74c, i32 %v1_a758, i32 ptrtoint (i32* @global_var_b728.77 to i32), i32 5)
  %v2_a760 = load i8, i8* bitcast (i8** @global_var_1ea20.54 to i8*), align 4
  %v3_a760 = zext i8 %v2_a760 to i32
  store i32 %v3_a760, i32* %r3.global-to-local, align 4
  store i32 %v5_a75c, i32* %ip.global-to-local, align 4
  %v0_a768 = load i32, i32* @r5, align 4
  %v5_a768 = mul nuw nsw i32 %v3_a760, 4
  %v6_a768 = add i32 %v5_a768, %v5_a75c
  %v7_a768 = inttoptr i32 %v6_a768 to i32*
  store i32 %v0_a768, i32* %v7_a768, align 4
  %v0_a76c = load i32, i32* %r3.global-to-local, align 4
  %v1_a76c = load i32, i32* @r7, align 4
  %v2_a76c = add i32 %v1_a76c, %v0_a76c
  store i32 %v2_a76c, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a778 = load i32, i32* %ip.global-to-local, align 4
  %v1_a778 = load i32, i32* @r6, align 4
  %v2_a778 = inttoptr i32 %v1_a778 to i32*
  store i32 %v0_a778, i32* %v2_a778, align 4
  %v0_a77c = load i32, i32* %r2.global-to-local, align 4
  %v1_a77c = trunc i32 %v0_a77c to i8
  %v2_a77c = load i32, i32* @r4, align 4
  %v3_a77c = inttoptr i32 %v2_a77c to i8*
  store i8 %v1_a77c, i8* %v3_a77c, align 1
  %v2_a780 = call i32 @function_14094(i32 %v1_a76c, i32 8)
  %v2_a784 = load i8, i8* bitcast (i8** @global_var_1ea20.54 to i8*), align 4
  %v3_a784 = zext i8 %v2_a784 to i32
  store i32 ptrtoint (i32* @global_var_b00c.79 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a780, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_a794 = mul nuw nsw i32 %v3_a784, 4
  store i32 %v3_a794, i32* %r1.global-to-local, align 4
  %v2_a798 = load i32, i32* @global_var_1ea24.56, align 4
  %v2_a79c = inttoptr i32 %v2_a780 to i32*
  store i32 ptrtoint (i32* @global_var_b00c.79 to i32), i32* %v2_a79c, align 4
  %v3_a7a0 = load i32, i32* @r5, align 4
  %v4_a7a0 = add i32 %v3_a7a0, 4
  %v5_a7a0 = inttoptr i32 %v4_a7a0 to i8*
  store i8 6, i8* %v5_a7a0, align 1
  %v0_a7a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a7a4 = add i32 %v0_a7a4, 4
  store i32 %v1_a7a4, i32* %r1.global-to-local, align 4
  %v5_a7a8 = call i32 @function_141dc(i32 %v2_a798, i32 %v1_a7a4, i32 ptrtoint (i32* @global_var_b00c.79 to i32), i32 6)
  %v2_a7ac = load i8, i8* bitcast (i8** @global_var_1ea20.54 to i8*), align 4
  %v3_a7ac = zext i8 %v2_a7ac to i32
  store i32 %v3_a7ac, i32* %r3.global-to-local, align 4
  store i32 %v5_a7a8, i32* %ip.global-to-local, align 4
  %v0_a7b4 = load i32, i32* @r5, align 4
  %v5_a7b4 = mul nuw nsw i32 %v3_a7ac, 4
  %v6_a7b4 = add i32 %v5_a7b4, %v5_a7a8
  %v7_a7b4 = inttoptr i32 %v6_a7b4 to i32*
  store i32 %v0_a7b4, i32* %v7_a7b4, align 4
  %v0_a7b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_a7b8 = load i32, i32* @r7, align 4
  %v2_a7b8 = add i32 %v1_a7b8, %v0_a7b8
  store i32 %v2_a7b8, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a7c4 = load i32, i32* %ip.global-to-local, align 4
  %v1_a7c4 = load i32, i32* @r6, align 4
  %v2_a7c4 = inttoptr i32 %v1_a7c4 to i32*
  store i32 %v0_a7c4, i32* %v2_a7c4, align 4
  %v0_a7c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a7c8 = trunc i32 %v0_a7c8 to i8
  %v2_a7c8 = load i32, i32* @r4, align 4
  %v3_a7c8 = inttoptr i32 %v2_a7c8 to i8*
  store i8 %v1_a7c8, i8* %v3_a7c8, align 1
  %v2_a7cc = call i32 @function_14094(i32 %v1_a7b8, i32 8)
  %v2_a7d0 = load i8, i8* bitcast (i8** @global_var_1ea20.54 to i8*), align 4
  %v3_a7d0 = zext i8 %v2_a7d0 to i32
  store i32 ptrtoint (i32* @global_var_a890.81 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a7cc, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_a7e0 = mul nuw nsw i32 %v3_a7d0, 4
  store i32 %v3_a7e0, i32* %r1.global-to-local, align 4
  %v2_a7e4 = load i32, i32* @global_var_1ea24.56, align 4
  %v2_a7e8 = inttoptr i32 %v2_a7cc to i32*
  store i32 ptrtoint (i32* @global_var_a890.81 to i32), i32* %v2_a7e8, align 4
  %v3_a7ec = load i32, i32* @r5, align 4
  %v4_a7ec = add i32 %v3_a7ec, 4
  %v5_a7ec = inttoptr i32 %v4_a7ec to i8*
  store i8 7, i8* %v5_a7ec, align 1
  %v0_a7f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_a7f0 = add i32 %v0_a7f0, 4
  store i32 %v1_a7f0, i32* %r1.global-to-local, align 4
  %v5_a7f4 = call i32 @function_141dc(i32 %v2_a7e4, i32 %v1_a7f0, i32 ptrtoint (i32* @global_var_a890.81 to i32), i32 7)
  %v2_a7f8 = load i8, i8* bitcast (i8** @global_var_1ea20.54 to i8*), align 4
  %v3_a7f8 = zext i8 %v2_a7f8 to i32
  store i32 %v3_a7f8, i32* %r3.global-to-local, align 4
  store i32 %v5_a7f4, i32* %ip.global-to-local, align 4
  %v0_a800 = load i32, i32* @r5, align 4
  %v5_a800 = mul nuw nsw i32 %v3_a7f8, 4
  %v6_a800 = add i32 %v5_a800, %v5_a7f4
  %v7_a800 = inttoptr i32 %v6_a800 to i32*
  store i32 %v0_a800, i32* %v7_a800, align 4
  %v0_a804 = load i32, i32* %r3.global-to-local, align 4
  %v1_a804 = load i32, i32* @r7, align 4
  %v2_a804 = add i32 %v1_a804, %v0_a804
  store i32 %v2_a804, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v1_a810 = trunc i32 %v2_a804 to i8
  %v2_a810 = load i32, i32* @r4, align 4
  %v3_a810 = inttoptr i32 %v2_a810 to i8*
  store i8 %v1_a810, i8* %v3_a810, align 1
  %v0_a814 = load i32, i32* %ip.global-to-local, align 4
  %v1_a814 = load i32, i32* @r6, align 4
  %v2_a814 = inttoptr i32 %v1_a814 to i32*
  store i32 %v0_a814, i32* %v2_a814, align 4
  %v2_a818 = call i32 @function_14094(i32 %v1_a804, i32 8)
  %v2_a81c = load i8, i8* bitcast (i8** @global_var_1ea20.54 to i8*), align 4
  %v3_a81c = zext i8 %v2_a81c to i32
  store i32 ptrtoint (i32* @global_var_81cc.83 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a818, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v3_a82c = mul nuw nsw i32 %v3_a81c, 4
  store i32 %v3_a82c, i32* %r1.global-to-local, align 4
  %v2_a830 = load i32, i32* @global_var_1ea24.56, align 4
  %v2_a834 = inttoptr i32 %v2_a818 to i32*
  store i32 ptrtoint (i32* @global_var_81cc.83 to i32), i32* %v2_a834, align 4
  %v3_a838 = load i32, i32* @r5, align 4
  %v4_a838 = add i32 %v3_a838, 4
  %v5_a838 = inttoptr i32 %v4_a838 to i8*
  store i8 10, i8* %v5_a838, align 1
  %v0_a83c = load i32, i32* %r1.global-to-local, align 4
  %v1_a83c = add i32 %v0_a83c, 4
  store i32 %v1_a83c, i32* %r1.global-to-local, align 4
  %v5_a840 = call i32 @function_141dc(i32 %v2_a830, i32 %v1_a83c, i32 ptrtoint (i32* @global_var_81cc.83 to i32), i32 10)
  %v2_a844 = load i8, i8* bitcast (i8** @global_var_1ea20.54 to i8*), align 4
  %v3_a844 = zext i8 %v2_a844 to i32
  store i32 %v3_a844, i32* %r3.global-to-local, align 4
  %v1_a848 = load i32, i32* @r6, align 4
  %v2_a848 = inttoptr i32 %v1_a848 to i32*
  store i32 %v5_a840, i32* %v2_a848, align 4
  %v0_a84c = load i32, i32* @r5, align 4
  %v2_a84c = load i32, i32* %r3.global-to-local, align 4
  %v5_a84c = mul i32 %v2_a84c, 4
  %v6_a84c = add i32 %v5_a84c, %v5_a840
  %v7_a84c = inttoptr i32 %v6_a84c to i32*
  store i32 %v0_a84c, i32* %v7_a84c, align 4
  %v0_a850 = load i32, i32* %r3.global-to-local, align 4
  %v1_a850 = load i32, i32* @r7, align 4
  %v2_a850 = add i32 %v1_a850, %v0_a850
  store i32 %v2_a850, i32* %r2.global-to-local, align 4
  %v1_a858 = trunc i32 %v2_a850 to i8
  %v2_a858 = load i32, i32* @r4, align 4
  %v3_a858 = inttoptr i32 %v2_a858 to i8*
  store i8 %v1_a858, i8* %v3_a858, align 1
  %v2_a85c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_a85c, i32* @r4, align 4
  store i32 %v6_a558, i32* @r5, align 4
  store i32 %v9_a558, i32* @r6, align 4
  store i32 %v12_a558, i32* @r7, align 4
  ret i32 %v1_a850

; uselistorder directives
  uselistorder i32 %v1_a850, { 1, 0 }
  uselistorder i32 %v1_a804, { 1, 0 }
  uselistorder i32 %v1_a7b8, { 1, 0 }
  uselistorder i32 %v1_a76c, { 1, 0 }
  uselistorder i32 %v1_a720, { 1, 0 }
  uselistorder i32 %v1_a6d4, { 1, 0 }
  uselistorder i32 %v1_a688, { 1, 0 }
  uselistorder i32 %v1_a63c, { 1, 0 }
  uselistorder i32 %v1_a5f0, { 1, 0 }
  uselistorder i8 7, { 4, 5, 6, 7, 0, 1, 2, 3 }
  uselistorder i32* @global_var_1ea24.56, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i8* bitcast (i8** @global_var_1ea20.54 to i8*), { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_a890(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a890:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_a890 = load i32, i32* @r4, align 4
  %v15_a890 = load i32, i32* @r8, align 4
  %v21_a890 = load i32, i32* @sl, align 4
  %v1_a894 = urem i32 %arg1, 256
  store i32 %v1_a894, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_a894, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_a8ac = urem i32 %arg3, 256
  store i32 %v1_a8ac, i32* @r4, align 4
  %v2_a8b0 = call i32 @function_14094(i32 %v1_a894, i32 4)
  %v0_a8b4 = load i32, i32* @r5, align 4
  store i32 %v0_a8b4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a8c4 = load i32, i32* @r4, align 4
  store i32 %v0_a8c4, i32* %r0.global-to-local, align 4
  %v5_a8c8 = inttoptr i32 %v0_a8b4 to i32*
  %v6_a8c8 = call i32 @function_a4e8(i32 %v0_a8c4, i32* %v5_a8c8, i32 2, i32 0)
  %v1_a8d4 = urem i32 %v6_a8c8, 256
  store i32 %v1_a8d4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a8e0 = load i32, i32* @r5, align 4
  store i32 %v0_a8e0, i32* %r1.global-to-local, align 4
  %v0_a8e4 = load i32, i32* @r4, align 4
  store i32 %v0_a8e4, i32* %r0.global-to-local, align 4
  %v5_a8e8 = trunc i32 %v6_a8c8 to i8
  %v6_a8ec = inttoptr i32 %v0_a8e0 to i32*
  %v7_a8ec = call i32 @function_a4e8(i32 %v0_a8e4, i32* %v6_a8ec, i32 3, i32 65535)
  %v0_a8f0 = load i32, i32* @r5, align 4
  store i32 %v0_a8f0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a8ec, i32* @r7, align 4
  %v0_a900 = load i32, i32* @r4, align 4
  store i32 %v0_a900, i32* %r0.global-to-local, align 4
  %v4_a904 = inttoptr i32 %v0_a8f0 to i32*
  %v5_a904 = call i32 @function_a4e8(i32 %v0_a900, i32* %v4_a904, i32 4, i32 64)
  %v1_a90c = urem i32 %v5_a904, 256
  store i32 %v1_a90c, i32* %ip.global-to-local, align 4
  %v0_a910 = load i32, i32* @r5, align 4
  store i32 %v0_a910, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a91c = load i32, i32* @r4, align 4
  store i32 %v0_a91c, i32* %r0.global-to-local, align 4
  %v5_a920 = trunc i32 %v5_a904 to i8
  %v6_a924 = inttoptr i32 %v0_a910 to i32*
  %v7_a924 = call i32 @function_a4e8(i32 %v0_a91c, i32* %v6_a924, i32 5, i32 1)
  %v1_a930 = urem i32 %v7_a924, 256
  store i32 %v1_a930, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a93c = load i32, i32* @r5, align 4
  store i32 %v0_a93c, i32* %r1.global-to-local, align 4
  %v0_a940 = load i32, i32* @r4, align 4
  store i32 %v0_a940, i32* %r0.global-to-local, align 4
  %v5_a948 = inttoptr i32 %v0_a93c to i32*
  %v6_a948 = call i32 @function_a4e8(i32 %v0_a940, i32* %v5_a948, i32 6, i32 65535)
  %v0_a950 = load i32, i32* @r5, align 4
  store i32 %v0_a950, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_a948, i32* @sl, align 4
  %v0_a960 = load i32, i32* @r4, align 4
  store i32 %v0_a960, i32* %r0.global-to-local, align 4
  %v4_a964 = inttoptr i32 %v0_a950 to i32*
  %v5_a964 = call i32 @function_a4e8(i32 %v0_a960, i32* %v4_a964, i32 7, i32 65535)
  %v0_a968 = load i32, i32* @r5, align 4
  store i32 %v0_a968, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_a964, i32* @r8, align 4
  %v0_a978 = load i32, i32* @r4, align 4
  store i32 %v0_a978, i32* %r0.global-to-local, align 4
  %v4_a97c = inttoptr i32 %v0_a968 to i32*
  %v5_a97c = call i32 @function_a4e8(i32 %v0_a978, i32* %v4_a97c, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a98c = load i32, i32* @r5, align 4
  store i32 %v0_a98c, i32* %r1.global-to-local, align 4
  %v0_a990 = load i32, i32* @r4, align 4
  store i32 %v0_a990, i32* %r0.global-to-local, align 4
  %v4_a994 = inttoptr i32 %v0_a98c to i32*
  %v5_a994 = call i32 @function_a4e8(i32 %v0_a990, i32* %v4_a994, i32 1, i32 1)
  %v1_a99c = urem i32 %v5_a994, 256
  store i32 %v1_a99c, i32* %ip.global-to-local, align 4
  %v0_a9a0 = load i32, i32* @r5, align 4
  store i32 %v0_a9a0, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a9ac = load i32, i32* @r4, align 4
  store i32 %v0_a9ac, i32* %r0.global-to-local, align 4
  %v5_a9b4 = inttoptr i32 %v0_a9a0 to i32*
  %v6_a9b4 = call i32 @function_a4e8(i32 %v0_a9ac, i32* %v5_a9b4, i32 19, i32 0)
  %v0_a9bc = load i32, i32* @r5, align 4
  store i32 %v0_a9bc, i32* %r1.global-to-local, align 4
  %v2_a9c0 = load i32, i32* @global_var_1eadc.85, align 4
  store i32 %v2_a9c0, i32* %r3.global-to-local, align 4
  store i32 %v6_a9b4, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_a9cc = load i32, i32* @r4, align 4
  store i32 %v0_a9cc, i32* %r0.global-to-local, align 4
  %v4_a9d0 = inttoptr i32 %v0_a9bc to i32*
  %v5_a9d0 = call i32 @function_a4e8(i32 %v0_a9cc, i32* %v4_a9d0, i32 25, i32 %v2_a9c0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_a9e4 = call i32 @function_13d90(i32 2, i32 3, i32 6)
  store i32 %v3_a9e4, i32* %r0.global-to-local, align 4
  %v7_a9e8 = icmp eq i32 %v3_a9e4, -1
  store i1 %v7_a9e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a9e8, label %dec_label_pc_aecc, label %dec_label_pc_a9f4

dec_label_pc_a9f4:                                ; preds = %dec_label_pc_a890
  store i32 1, i32* %stack_var_-40, align 4
  %v6_a9fc = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_a9fc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_aa10 = call i32 @function_13d60(i32 %v3_a9e4, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_aa10, i32* %r0.global-to-local, align 4
  %v7_aa14 = icmp eq i32 %v6_aa10, -1
  store i1 %v7_aa14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa14, label %dec_label_pc_aec4, label %dec_label_pc_aa1c

dec_label_pc_aa1c:                                ; preds = %dec_label_pc_a9f4
  %v0_aa1c = load i32, i32* @sl, align 4
  %v3_aa1c = mul i32 %v0_aa1c, 65536
  store i32 %v3_aa1c, i32* %sl.global-to-local, align 4
  %v0_aa20 = load i32, i32* @r8, align 4
  %v3_aa20 = mul i32 %v0_aa20, 65536
  store i32 %v3_aa20, i32* %r8.global-to-local, align 4
  %v0_aa28 = load i32, i32* @r7, align 4
  %v3_aa28 = mul i32 %v0_aa28, 65536
  %v0_aa2c = load i32, i32* @r6, align 4
  %v1_aa2c = urem i32 %v0_aa2c, 256
  store i32 0, i32* %stack_var_-40, align 4
  %v3_aa34 = urem i32 %v0_aa28, 65536
  store i32 %v3_aa34, i32* %r2.global-to-local, align 4
  %v3_aa38 = urem i32 %v0_aa1c, 65536
  store i32 %v3_aa38, i32* %r3.global-to-local, align 4
  %v3_aa3c = urem i32 %v0_aa20, 65536
  store i32 %v3_aa3c, i32* %r1.global-to-local, align 4
  %v0_aa40 = load i32, i32* @fp, align 4
  %v2_aa40 = icmp eq i32 %v0_aa40, 0
  store i1 %v2_aa40, i1* %cpsr_z.global-to-local, align 1
  %tmp88 = icmp slt i32 %v0_aa40, 1
  br i1 %tmp88, label %dec_label_pc_afec, label %dec_label_pc_aa60

dec_label_pc_aa60:                                ; preds = %dec_label_pc_aa1c
  %v3_aa64 = mul i32 %v5_a97c, 65536
  %v0_aa28.not = or i32 %v0_aa28, -65536
  %v1_aa6c = xor i32 %v0_aa28.not, 65535
  %v1_aa74 = add i32 %v3_aa64, 4325376
  %v1_aa78 = urem i32 %v0_aa1c, 256
  %v3_aa80 = udiv i32 %v1_aa74, 256
  %v1_aa84 = add i32 %v3_aa64, 524288
  %v1_aa8c = add i32 %v3_aa64, 1835008
  %v1_aa90 = urem i32 %v0_aa20, 256
  %v1_aa94 = and i32 %v3_aa80, 65280
  store i32 %v1_aa94, i32* %r0.global-to-local, align 4
  %v3_aa9c = udiv i32 %v1_aa8c, 256
  %tmp89 = mul nsw i32 %v1_aa6c, 256
  %v1_aab4 = and i32 %v3_aa9c, 65280
  store i32 %v1_aab4, i32* %ip.global-to-local, align 4
  %v1_aab8 = and i32 %tmp89, 65280
  store i32 %v1_aab8, i32* @lr, align 4
  %tmp91 = udiv i32 %v1_aa6c, 256
  %v4_aaa4 = sdiv i32 %v1_aa74, 16777216
  %v5_aad4 = trunc i32 %tmp91 to i8
  %v3_aae0 = mul nuw nsw i32 %v1_aa78, 256
  %v3_aae8 = ashr i32 %v1_aa74, 31
  %v3_aaec = mul nuw nsw i32 %v1_aa90, 256
  store i32 %v3_aaec, i32* @r5, align 4
  %tmp92 = udiv i32 %v0_aa1c, 256
  %v4_aaf0 = urem i32 %tmp92, 256
  %v5_aaf0 = or i32 %v4_aaf0, %v3_aae0
  store i32 %v5_aaf0, i32* @r7, align 4
  %v3_aaf4 = udiv i32 %v1_aa84, 256
  %tmp93 = udiv i32 %v0_aa20, 256
  %v4_aaf8 = urem i32 %tmp93, 256
  %v5_aaf8 = or i32 %v4_aaf8, %v3_aaec
  store i32 %v5_aaf8, i32* %sl.global-to-local, align 4
  %v5_aafc = trunc i32 %v3_aae8 to i8
  %v3_ab04 = sdiv i32 %v3_aa28, 16777216
  %v7_ab04 = sdiv i32 %v1_aa8c, 16777216
  %v1_ab08 = and i32 %v3_aaf4, 65280
  store i32 %v1_ab08, i32* @r6, align 4
  %v3_ab0c = ashr i32 %v3_aa28, 31
  %v3_ab10 = ashr i32 %v1_aa8c, 31
  %v3_ab14 = udiv i32 %v1_aa6c, 65536
  %v4_ab18 = udiv i32 %v1_aa84, 16777216
  %v5_ab18 = or i32 %v4_ab18, %v1_ab08
  store i32 %v5_ab18, i32* %r8.global-to-local, align 4
  store i32 %v1_aa78, i32* %r1.global-to-local, align 4
  store i32 %v1_aa90, i32* %r2.global-to-local, align 4
  %v3_ab3037 = udiv i32 %v1_ab08, 256
  store i32 %v3_ab3037, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_ab90 = sext i8 %v5_a920 to i32
  %v2_ac90 = icmp eq i32 %v1_aa2c, 0
  %sext16 = mul i32 %v0_aa1c, 16777216
  %v4_aca4 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_aa84, 256
  %v4_acb8 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_aa20, 16777216
  %v4_acc0 = sdiv i32 %sext18, 16777216
  %v1_acc8 = trunc i32 %v4_acb8 to i8
  br label %dec_label_pc_ab44

dec_label_pc_ab44:                                ; preds = %bb105, %dec_label_pc_aa60
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_ab50 = call i32 @function_14094(i32 1510, i32 4)
  store i32 %v2_ab50, i32* %r0.global-to-local, align 4
  store i32 %v2_a8b0, i32* %r1.global-to-local, align 4
  %v3_ab58 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ab58, i32* %r3.global-to-local, align 4
  %v2_ab5c = load i32, i32* @r4, align 4
  %v5_ab5c = mul i32 %v2_ab5c, 4
  %v6_ab5c = add i32 %v5_ab5c, %v2_a8b0
  %v7_ab5c = inttoptr i32 %v6_ab5c to i32*
  store i32 %v2_ab50, i32* %v7_ab5c, align 4
  %v0_ab60 = load i32, i32* %r1.global-to-local, align 4
  %v1_ab60 = load i32, i32* %r3.global-to-local, align 4
  %v4_ab60 = mul i32 %v1_ab60, 4
  %v5_ab60 = add i32 %v4_ab60, %v0_ab60
  %v6_ab60 = inttoptr i32 %v5_ab60 to i32*
  %v7_ab60 = load i32, i32* %v6_ab60, align 4
  store i32 %v7_ab60, i32* %r4.global-to-local, align 4
  %v1_ab64 = inttoptr i32 %v7_ab60 to i8*
  %v2_ab64 = load i8, i8* %v1_ab64, align 1
  %tmp = urem i8 %v2_ab64, 16
  %v1_ab68 = zext i8 %tmp to i32
  %v1_ab6c = or i32 %v1_ab68, 64
  store i32 %v1_ab6c, i32* %r2.global-to-local, align 4
  %v1_ab70 = trunc i32 %v1_ab6c to i8
  store i8 %v1_ab70, i8* %v1_ab64, align 1
  %v0_ab74 = load i32, i32* %r4.global-to-local, align 4
  %v1_ab74 = inttoptr i32 %v0_ab74 to i8*
  %v2_ab74 = load i8, i8* %v1_ab74, align 1
  %v1_ab78 = and i8 %v2_ab74, -16
  %v1_ab7c = or i8 %v1_ab78, 5
  store i32 %v1_a930, i32* %r2.global-to-local, align 4
  store i8 %v1_ab7c, i8* %v1_ab74, align 1
  %v2_ab8c = load i32, i32* %r4.global-to-local, align 4
  %v3_ab8c = add i32 %v2_ab8c, 1
  %v4_ab8c = inttoptr i32 %v3_ab8c to i8*
  store i8 %v5_a8e8, i8* %v4_ab8c, align 1
  store i32 %v4_ab90, i32* %r1.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_ab98 = load i32, i32* %r4.global-to-local, align 4
  %v3_ab98 = add i32 %v2_ab98, 8
  %v4_ab98 = inttoptr i32 %v3_ab98 to i8*
  store i8 %v5_a920, i8* %v4_ab98, align 1
  %v0_ab9c = load i32, i32* %r2.global-to-local, align 4
  %v1_ab9c = load i32, i32* %ip.global-to-local, align 4
  %v9_ab9c = icmp eq i32 %v0_ab9c, %v1_ab9c
  store i1 %v9_ab9c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_aae8, i32* %r3.global-to-local, align 4
  store i32 %v4_aaa4, i32* %r2.global-to-local, align 4
  %v2_aba8 = load i32, i32* %r4.global-to-local, align 4
  %v3_aba8 = add i32 %v2_aba8, 3
  %v4_aba8 = inttoptr i32 %v3_aba8 to i8*
  store i8 %v5_aafc, i8* %v4_aba8, align 1
  %v0_abac = load i32, i32* %r2.global-to-local, align 4
  %v1_abac = trunc i32 %v0_abac to i8
  %v2_abac = load i32, i32* %r4.global-to-local, align 4
  %v3_abac = add i32 %v2_abac, 2
  %v4_abac = inttoptr i32 %v3_abac to i8*
  store i8 %v1_abac, i8* %v4_abac, align 1
  %v0_abb0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_abb0, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_ab44
  store i32 %v3_ab0c, i32* %r2.global-to-local, align 4
  %extract.t114 = trunc i32 %v3_ab0c to i8
  br label %bb94

bb:                                               ; preds = %dec_label_pc_ab44
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v3_ab0c, i32* %r2.global-to-local, align 4
  %v3_abb8 = load i32, i32* %r4.global-to-local, align 4
  %v4_abb8 = add i32 %v3_abb8, 6
  %v5_abb8 = inttoptr i32 %v4_abb8 to i8*
  store i8 64, i8* %v5_abb8, align 1
  %v0_abc0.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t115 = trunc i32 %v0_abc0.pre to i8
  br label %bb94

bb94:                                             ; preds = %.thread, %bb
  %v3_ab0c.sink.off0 = phi i8 [ %extract.t114, %.thread ], [ %extract.t115, %bb ]
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_abc0 = load i32, i32* %r4.global-to-local, align 4
  %v3_abc0 = add i32 %v2_abc0, 5
  %v4_abc0 = inttoptr i32 %v3_abc0 to i8*
  store i8 %v3_ab0c.sink.off0, i8* %v4_abc0, align 1
  store i32 %v3_ab04, i32* %r1.global-to-local, align 4
  %v0_abc8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_abc8, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_abc8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_abc8, i32* %r2.global-to-local, align 4
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_abcc = load i32, i32* %r3.global-to-local, align 4
  %v1_abcc = trunc i32 %v0_abcc to i8
  %v2_abcc = load i32, i32* %r4.global-to-local, align 4
  %v3_abcc = add i32 %v2_abcc, 9
  %v4_abcc = inttoptr i32 %v3_abcc to i8*
  store i8 %v1_abcc, i8* %v4_abcc, align 1
  %v0_abd0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_abd0, label %bb98, label %bb97

bb97:                                             ; preds = %bb96
  %v1_abd0 = load i32, i32* %r2.global-to-local, align 4
  %v2_abd0 = trunc i32 %v1_abd0 to i8
  %v3_abd0 = load i32, i32* %r4.global-to-local, align 4
  %v4_abd0 = add i32 %v3_abd0, 7
  %v5_abd0 = inttoptr i32 %v4_abd0 to i8*
  store i8 %v2_abd0, i8* %v5_abd0, align 1
  br label %bb98

bb98:                                             ; preds = %bb96, %bb97
  %v3_abd4 = load i32, i32* %stack_var_-40, align 4
  %v5_abdc = mul i32 %v3_abd4, 24
  store i32 %v5_abdc, i32* %r3.global-to-local, align 4
  store i32 %v5_a9d0, i32* %r2.global-to-local, align 4
  %v1_abe4 = load i32, i32* %r4.global-to-local, align 4
  %v2_abe4 = add i32 %v1_abe4, 12
  %v3_abe4 = inttoptr i32 %v2_abe4 to i32*
  store i32 %v5_a9d0, i32* %v3_abe4, align 4
  %v0_abe8 = load i32, i32* %r3.global-to-local, align 4
  %v1_abe8 = load i32, i32* @sb, align 4
  %v2_abe8 = add i32 %v1_abe8, %v0_abe8
  store i32 %v2_abe8, i32* %r3.global-to-local, align 4
  %v1_abec = add i32 %v2_abe8, 16
  %v2_abec = inttoptr i32 %v1_abec to i32*
  %v3_abec = load i32, i32* %v2_abec, align 4
  store i32 %v3_abec, i32* %r2.global-to-local, align 4
  %v0_abf0 = load i32, i32* %r1.global-to-local, align 4
  %v1_abf0 = trunc i32 %v0_abf0 to i8
  %v2_abf0 = load i32, i32* %r4.global-to-local, align 4
  %v3_abf0 = add i32 %v2_abf0, 4
  %v4_abf0 = inttoptr i32 %v3_abf0 to i8*
  store i8 %v1_abf0, i8* %v4_abf0, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_abf8 = load i32, i32* %r4.global-to-local, align 4
  %v1_abf8 = add i32 %v0_abf8, 20
  store i32 %v1_abf8, i32* %r1.global-to-local, align 4
  %v3_abfc = add i32 %v0_abf8, 22
  %v4_abfc = inttoptr i32 %v3_abfc to i8*
  store i8 101, i8* %v4_abfc, align 1
  %v0_ac00 = load i32, i32* %r2.global-to-local, align 4
  %v1_ac00 = load i32, i32* %r4.global-to-local, align 4
  %v2_ac00 = add i32 %v1_ac00, 16
  %v3_ac00 = inttoptr i32 %v2_ac00 to i32*
  store i32 %v0_ac00, i32* %v3_ac00, align 4
  %v0_ac04 = load i32, i32* %r4.global-to-local, align 4
  %v1_ac04 = add i32 %v0_ac04, 24
  store i32 %v1_ac04, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_ac0c = load i32, i32* %r3.global-to-local, align 4
  %v1_ac0c = add i32 %v0_ac0c, -93
  store i32 %v1_ac0c, i32* %r3.global-to-local, align 4
  %v2_ac10 = load i32, i32* %r1.global-to-local, align 4
  %v3_ac10 = add i32 %v2_ac10, 3
  %v4_ac10 = inttoptr i32 %v3_ac10 to i8*
  store i8 88, i8* %v4_ac10, align 1
  %v0_ac14 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac14 = trunc i32 %v0_ac14 to i8
  %v2_ac14 = load i32, i32* %r0.global-to-local, align 4
  %v3_ac14 = add i32 %v2_ac14, 12
  %v4_ac14 = inttoptr i32 %v3_ac14 to i8*
  store i8 %v1_ac14, i8* %v4_ac14, align 1
  %v0_ac18 = load i32, i32* %ip.global-to-local, align 4
  %v1_ac18 = trunc i32 %v0_ac18 to i8
  %v2_ac18 = load i32, i32* %r0.global-to-local, align 4
  %v3_ac18 = add i32 %v2_ac18, 13
  %v4_ac18 = inttoptr i32 %v3_ac18 to i8*
  store i8 %v1_ac18, i8* %v4_ac18, align 1
  %v0_ac1c = load i32, i32* %r4.global-to-local, align 4
  %v1_ac1c = add i32 %v0_ac1c, 38
  %v2_ac1c = inttoptr i32 %v1_ac1c to i8*
  %v3_ac1c = load i8, i8* %v2_ac1c, align 1
  %tmp116 = urem i8 %v3_ac1c, 16
  %v1_ac20 = zext i8 %tmp116 to i32
  %v1_ac24 = or i32 %v1_ac20, 64
  store i32 %v1_ac24, i32* %r3.global-to-local, align 4
  %v1_ac28 = trunc i32 %v1_ac24 to i8
  store i8 %v1_ac28, i8* %v2_ac1c, align 1
  %v0_ac2c = load i32, i32* %r4.global-to-local, align 4
  %v1_ac2c = add i32 %v0_ac2c, 38
  %v2_ac2c = inttoptr i32 %v1_ac2c to i8*
  %v3_ac2c = load i8, i8* %v2_ac2c, align 1
  %v1_ac30 = and i8 %v3_ac2c, -16
  %v1_ac34 = or i8 %v1_ac30, 5
  store i8 %v1_ac34, i8* %v2_ac2c, align 1
  %v0_ac40 = load i32, i32* %r4.global-to-local, align 4
  %v1_ac40 = add i32 %v0_ac40, 38
  store i32 %v1_ac40, i32* @r5, align 4
  %v3_ac44 = add i32 %v0_ac40, 39
  %v4_ac44 = inttoptr i32 %v3_ac44 to i8*
  store i8 %v5_a8e8, i8* %v4_ac44, align 1
  store i32 %v7_ab04, i32* %r1.global-to-local, align 4
  store i32 %tmp91, i32* %r3.global-to-local, align 4
  store i32 %v3_ab10, i32* %r2.global-to-local, align 4
  %v2_ac54 = load i32, i32* @r5, align 4
  %v3_ac54 = add i32 %v2_ac54, 4
  %v4_ac54 = inttoptr i32 %v3_ac54 to i8*
  store i8 %v5_aad4, i8* %v4_ac54, align 1
  %v0_ac58 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac58 = trunc i32 %v0_ac58 to i8
  %v2_ac58 = load i32, i32* @r5, align 4
  %v3_ac58 = add i32 %v2_ac58, 2
  %v4_ac58 = inttoptr i32 %v3_ac58 to i8*
  store i8 %v1_ac58, i8* %v4_ac58, align 1
  %v0_ac5c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac5c, label %bb100, label %bb99

bb99:                                             ; preds = %bb98
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb100

bb100:                                            ; preds = %bb98, %bb99
  store i32 %v3_ab14, i32* %r1.global-to-local, align 4
  %v0_ac64 = load i32, i32* %r2.global-to-local, align 4
  %v1_ac64 = trunc i32 %v0_ac64 to i8
  %v2_ac64 = load i32, i32* @r5, align 4
  %v3_ac64 = add i32 %v2_ac64, 3
  %v4_ac64 = inttoptr i32 %v3_ac64 to i8*
  store i8 %v1_ac64, i8* %v4_ac64, align 1
  store i32 %v4_ab90, i32* %r2.global-to-local, align 4
  %v0_ac6c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac6c, label %bb102, label %bb101

bb101:                                            ; preds = %bb100
  %v1_ac6c = load i32, i32* %r3.global-to-local, align 4
  %v2_ac6c = trunc i32 %v1_ac6c to i8
  %v3_ac6c = load i32, i32* @r5, align 4
  %v4_ac6c = add i32 %v3_ac6c, 6
  %v5_ac6c = inttoptr i32 %v4_ac6c to i8*
  store i8 %v2_ac6c, i8* %v5_ac6c, align 1
  br label %bb102

bb102:                                            ; preds = %bb100, %bb101
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_ac74 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac74 = trunc i32 %v0_ac74 to i8
  %v2_ac74 = load i32, i32* @r5, align 4
  %v3_ac74 = add i32 %v2_ac74, 5
  %v4_ac74 = inttoptr i32 %v3_ac74 to i8*
  store i8 %v1_ac74, i8* %v4_ac74, align 1
  %v0_ac78 = load i32, i32* %r2.global-to-local, align 4
  %v1_ac78 = trunc i32 %v0_ac78 to i8
  %v2_ac78 = load i32, i32* @r5, align 4
  %v3_ac78 = add i32 %v2_ac78, 8
  %v4_ac78 = inttoptr i32 %v3_ac78 to i8*
  store i8 %v1_ac78, i8* %v4_ac78, align 1
  %v0_ac7c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac7c, label %bb104, label %bb103

bb103:                                            ; preds = %bb102
  %v1_ac7c = load i32, i32* %ip.global-to-local, align 4
  %v2_ac7c = trunc i32 %v1_ac7c to i8
  %v3_ac7c = load i32, i32* @r5, align 4
  %v4_ac7c = add i32 %v3_ac7c, 7
  %v5_ac7c = inttoptr i32 %v4_ac7c to i8*
  store i8 %v2_ac7c, i8* %v5_ac7c, align 1
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v0_ac80 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac80 = trunc i32 %v0_ac80 to i8
  %v2_ac80 = load i32, i32* @r5, align 4
  %v3_ac80 = add i32 %v2_ac80, 9
  %v4_ac80 = inttoptr i32 %v3_ac80 to i8*
  store i8 %v1_ac80, i8* %v4_ac80, align 1
  %v0_ac84 = call i32 @function_fbfc()
  store i32 %v0_ac84, i32* %r0.global-to-local, align 4
  store i32 %v1_aa2c, i32* %r1.global-to-local, align 4
  store i1 %v2_ac90, i1* %cpsr_z.global-to-local, align 1
  %v1_ac94 = sub i32 1023, %v0_ac84
  store i32 %v1_ac94, i32* %r3.global-to-local, align 4
  br i1 %v2_ac90, label %.thread21, label %.thread22

.thread21:                                        ; preds = %bb104
  %v2_ac9c = load i32, i32* @r5, align 4
  %v3_ac9c = add i32 %v2_ac9c, 16
  %v4_ac9c = inttoptr i32 %v3_ac9c to i32*
  store i32 %v1_ac94, i32* %v4_ac9c, align 4
  br label %bb105

.thread22:                                        ; preds = %bb104
  %v1_ac98 = load i32, i32* %r4.global-to-local, align 4
  %v2_ac98 = add i32 %v1_ac98, 16
  %v3_ac98 = inttoptr i32 %v2_ac98 to i32*
  %v4_ac98 = load i32, i32* %v3_ac98, align 4
  store i32 %v4_ac98, i32* %r3.global-to-local, align 4
  %v2_aca0 = load i32, i32* @r5, align 4
  %v3_aca0 = add i32 %v2_aca0, 16
  %v4_aca0 = inttoptr i32 %v3_aca0 to i32*
  store i32 %v4_ac98, i32* %v4_aca0, align 4
  br label %bb105

bb105:                                            ; preds = %.thread21, %.thread22
  store i32 %v4_aca4, i32* %r3.global-to-local, align 4
  %v0_aca8 = load i32, i32* %r4.global-to-local, align 4
  %v1_aca8 = add i32 %v0_aca8, 58
  store i32 %v1_aca8, i32* @r6, align 4
  %v1_acac = load i32, i32* @r5, align 4
  %v2_acac = add i32 %v1_acac, 12
  %v3_acac = inttoptr i32 %v2_acac to i32*
  store i32 %v0_ac84, i32* %v3_acac, align 4
  %v0_acb0 = load i32, i32* %r3.global-to-local, align 4
  %v1_acb0 = trunc i32 %v0_acb0 to i8
  %v2_acb0 = load i32, i32* @r6, align 4
  %v3_acb0 = add i32 %v2_acb0, 1
  %v4_acb0 = inttoptr i32 %v3_acb0 to i8*
  store i8 %v1_acb0, i8* %v4_acb0, align 1
  %v3_acb4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_acb4, i32* %r3.global-to-local, align 4
  store i32 %v4_acb8, i32* %r2.global-to-local, align 4
  %v1_acbc = add i32 %v3_acb4, 1
  store i32 %v1_acbc, i32* @r4, align 4
  store i32 %v4_acc0, i32* %r1.global-to-local, align 4
  %v1_acc4 = load i32, i32* @fp, align 4
  %v9_acc4 = icmp eq i32 %v1_acbc, %v1_acc4
  store i1 %v9_acc4, i1* %cpsr_z.global-to-local, align 1
  %v2_acc8 = load i32, i32* @r6, align 4
  %v3_acc8 = add i32 %v2_acc8, 5
  %v4_acc8 = inttoptr i32 %v3_acc8 to i8*
  store i8 %v1_acc8, i8* %v4_acc8, align 1
  %v0_accc = load i32, i32* @r7, align 4
  %v1_accc = trunc i32 %v0_accc to i8
  %v2_accc = load i32, i32* @r6, align 4
  %v3_accc = inttoptr i32 %v2_accc to i8*
  store i8 %v1_accc, i8* %v3_accc, align 1
  %v0_acd0 = load i32, i32* %sl.global-to-local, align 4
  %v1_acd0 = trunc i32 %v0_acd0 to i8
  %v2_acd0 = load i32, i32* @r6, align 4
  %v3_acd0 = add i32 %v2_acd0, 2
  %v4_acd0 = inttoptr i32 %v3_acd0 to i8*
  store i8 %v1_acd0, i8* %v4_acd0, align 1
  %v0_acd4 = load i32, i32* %r1.global-to-local, align 4
  %v1_acd4 = trunc i32 %v0_acd4 to i8
  %v2_acd4 = load i32, i32* @r6, align 4
  %v3_acd4 = add i32 %v2_acd4, 3
  %v4_acd4 = inttoptr i32 %v3_acd4 to i8*
  store i8 %v1_acd4, i8* %v4_acd4, align 1
  %v0_acd8 = load i32, i32* %r8.global-to-local, align 4
  %v1_acd8 = trunc i32 %v0_acd8 to i8
  %v2_acd8 = load i32, i32* @r6, align 4
  %v3_acd8 = add i32 %v2_acd8, 4
  %v4_acd8 = inttoptr i32 %v3_acd8 to i8*
  store i8 %v1_acd8, i8* %v4_acd8, align 1
  %v0_acdc = load i32, i32* @r4, align 4
  store i32 %v0_acdc, i32* %stack_var_-40, align 4
  %v5_ace0 = icmp slt i32 %v1_acbc, %v1_acc4
  br i1 %v5_ace0, label %dec_label_pc_ab44, label %dec_label_pc_ace4

dec_label_pc_ace4:                                ; preds = %bb105
  %v1_acec = add i32 %v5_a97c, 8
  store i32 %v1_acec, i32* %r2.global-to-local, align 4
  %v1_acf0 = add i32 %v5_a97c, 66
  store i32 %v1_acf0, i32* %r3.global-to-local, align 4
  %v0_acfc.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_acfc.preheader

dec_label_pc_acfc.preheader:                      ; preds = %dec_label_pc_ace4, %dec_label_pc_afec
  %v0_acfc.pre = phi i32 [ %v0_acfc.pre.pre, %dec_label_pc_ace4 ], [ %v0_aa40, %dec_label_pc_afec ]
  %stack_var_-160.0.ph = phi i32 [ %v1_acf0, %dec_label_pc_ace4 ], [ %v1_aff8, %dec_label_pc_afec ]
  %stack_var_-156.0.ph = phi i32 [ %v1_acec, %dec_label_pc_ace4 ], [ %v1_aff4, %dec_label_pc_afec ]
  %v3_af4c = icmp eq i32 %v3_aa34, 65535
  %v2_afbc = icmp eq i32 %v1_aa2c, 0
  %v2_ada0 = ptrtoint i32* %stack_var_-44 to i32
  %v2_adb8 = ptrtoint i32* %stack_var_-48 to i32
  %v2_adc8 = ptrtoint i32* %stack_var_-52 to i32
  %v2_add4 = ptrtoint i32* %stack_var_-50 to i32
  %v2_ade8 = icmp eq i32 %v1_a99c, 0
  %v2_ad44 = icmp eq i32 %v5_a9d0, -1
  %v7_ad44 = icmp eq i32 %v5_a9d0, -1
  br label %dec_label_pc_acfc

dec_label_pc_acfc:                                ; preds = %dec_label_pc_adf0, %dec_label_pc_acfc.preheader
  %v0_acfc = phi i32 [ %v0_acfc.pre, %dec_label_pc_acfc.preheader ], [ %v1_aeb4, %dec_label_pc_adf0 ]
  %v2_acfc = icmp eq i32 %v0_acfc, 0
  store i1 %v2_acfc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp106 = icmp slt i32 %v0_acfc, 1
  br label %dec_label_pc_ad04

dec_label_pc_ad04:                                ; preds = %dec_label_pc_ad04, %dec_label_pc_acfc
  br i1 %tmp106, label %dec_label_pc_ad04, label %dec_label_pc_ad08

dec_label_pc_ad08:                                ; preds = %dec_label_pc_ad04
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_ad14

dec_label_pc_ad14:                                ; preds = %dec_label_pc_adf0, %dec_label_pc_ad08
  %v1_ad28 = phi i32 [ %v1_aeb0, %dec_label_pc_adf0 ], [ 0, %dec_label_pc_ad08 ]
  %v5_ad18 = mul i32 %v1_ad28, 24
  %v1_ad1c = load i32, i32* @sb, align 4
  %v2_ad1c = add i32 %v1_ad1c, %v5_ad18
  store i32 %v2_ad1c, i32* %r3.global-to-local, align 4
  store i32 %v2_a8b0, i32* %r1.global-to-local, align 4
  %v1_ad24 = add i32 %v2_ad1c, 20
  %v2_ad24 = inttoptr i32 %v1_ad24 to i8*
  %v3_ad24 = load i8, i8* %v2_ad24, align 1
  %v4_ad24 = zext i8 %v3_ad24 to i32
  store i32 %v4_ad24, i32* %r2.global-to-local, align 4
  %v4_ad28 = mul i32 %v1_ad28, 4
  %v5_ad28 = add i32 %v4_ad28, %v2_a8b0
  %v6_ad28 = inttoptr i32 %v5_ad28 to i32*
  %v7_ad28 = load i32, i32* %v6_ad28, align 4
  store i32 %v7_ad28, i32* @r5, align 4
  %v7_ad2c = icmp eq i8 %v3_ad24, 31
  store i1 %v7_ad2c, i1* %cpsr_z.global-to-local, align 1
  %v1_ad30 = add i32 %v7_ad28, 24
  store i32 %v1_ad30, i32* @r8, align 4
  %v1_ad34 = add i32 %v7_ad28, 38
  store i32 %v1_ad34, i32* @r6, align 4
  %v1_ad38 = add i32 %v7_ad28, 58
  store i32 %v1_ad38, i32* @r7, align 4
  %tmp117 = icmp ult i8 %v3_ad24, 32
  br i1 %tmp117, label %dec_label_pc_aed4, label %dec_label_pc_ad40

dec_label_pc_ad40:                                ; preds = %dec_label_pc_ad14
  store i32 %v5_a9d0, i32* %r2.global-to-local, align 4
  store i1 %v7_ad44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ad44, label %dec_label_pc_af3c, label %dec_label_pc_ad4c

dec_label_pc_ad4c:                                ; preds = %dec_label_pc_aed4, %dec_label_pc_ad40
  store i32 %v3_aa34, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_af4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_af4c, label %dec_label_pc_af58, label %dec_label_pc_ad60

dec_label_pc_ad60:                                ; preds = %dec_label_pc_af3c.dec_label_pc_ad60_crit_edge, %dec_label_pc_ad4c
  %v1_ad64 = phi i32 [ %v1_ad64.pre, %dec_label_pc_af3c.dec_label_pc_ad60_crit_edge ], [ 65535, %dec_label_pc_ad4c ]
  store i32 %v3_aa38, i32* %r1.global-to-local, align 4
  %v9_ad64 = icmp eq i32 %v3_aa38, %v1_ad64
  store i1 %v9_ad64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad64, label %dec_label_pc_af90, label %dec_label_pc_ad6c

dec_label_pc_ad6c:                                ; preds = %dec_label_pc_af58.dec_label_pc_ad6c_crit_edge, %dec_label_pc_ad60
  %v1_ad70 = phi i32 [ %v1_ad70.pre, %dec_label_pc_af58.dec_label_pc_ad6c_crit_edge ], [ %v1_ad64, %dec_label_pc_ad60 ]
  store i32 %v3_aa3c, i32* %r2.global-to-local, align 4
  %v9_ad70 = icmp eq i32 %v3_aa3c, %v1_ad70
  store i1 %v9_ad70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad70, label %dec_label_pc_afac, label %dec_label_pc_ad78

dec_label_pc_ad78:                                ; preds = %dec_label_pc_af90, %dec_label_pc_ad6c
  store i32 %v1_aa2c, i32* %r3.global-to-local, align 4
  store i1 %v2_afbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_afbc, label %dec_label_pc_afd0, label %.thread23

.thread23:                                        ; preds = %dec_label_pc_ad78
  %v1_ad80 = load i32, i32* @r5, align 4
  %v2_ad80 = add i32 %v1_ad80, 16
  %v3_ad80 = inttoptr i32 %v2_ad80 to i32*
  %v4_ad80 = load i32, i32* %v3_ad80, align 4
  store i32 %v4_ad80, i32* %r3.global-to-local, align 4
  %v2_ad84 = load i32, i32* @r6, align 4
  %v3_ad84 = add i32 %v2_ad84, 16
  %v4_ad84 = inttoptr i32 %v3_ad84 to i32*
  store i32 %v4_ad80, i32* %v4_ad84, align 4
  br label %dec_label_pc_ad8c

dec_label_pc_ad8c:                                ; preds = %bb109, %.thread23, %dec_label_pc_afd0
  %v0_ad8c = call i32 @function_fbfc()
  store i32 %v0_ad8c, i32* %r0.global-to-local, align 4
  store i32 %v0_ad8c, i32* %stack_var_-44, align 4
  %v0_ad94 = call i32 @function_fbfc()
  store i32 %v0_ad94, i32* %r0.global-to-local, align 4
  store i32 %v0_ad94, i32* %stack_var_-48, align 4
  %v0_ad9c = call i32 @function_fbfc()
  store i32 %v2_ada0, i32* %r1.global-to-local, align 4
  store i32 %v0_ad9c, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_adac = load i32, i32* @r8, align 4
  store i32 %v0_adac, i32* %r0.global-to-local, align 4
  %v3_adb0 = call i32 @function_12b4c(i32 %v0_adac, i32 %v2_ada0, i32 4)
  %v0_adb4 = load i32, i32* @r8, align 4
  %v1_adb4 = add i32 %v0_adb4, 6
  store i32 %v1_adb4, i32* %r0.global-to-local, align 4
  store i32 %v2_adb8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_adc0 = call i32 @function_12b4c(i32 %v1_adb4, i32 %v2_adb8, i32 4)
  %v0_adc4 = load i32, i32* @r8, align 4
  %v1_adc4 = add i32 %v0_adc4, 4
  store i32 %v1_adc4, i32* %r0.global-to-local, align 4
  store i32 %v2_adc8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_add0 = call i32 @function_12b4c(i32 %v1_adc4, i32 %v2_adc8, i32 2)
  store i32 %v2_add4, i32* %r1.global-to-local, align 4
  %v0_add8 = load i32, i32* @r8, align 4
  %v1_add8 = add i32 %v0_add8, 10
  store i32 %v1_add8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_ade0 = call i32 @function_12b4c(i32 %v1_add8, i32 %v2_add4, i32 2)
  store i32 %v3_ade0, i32* %r0.global-to-local, align 4
  store i32 %v1_a99c, i32* %r1.global-to-local, align 4
  store i1 %v2_ade8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ade8, label %dec_label_pc_adf0, label %dec_label_pc_afdc

dec_label_pc_adf0:                                ; preds = %dec_label_pc_ad8c, %dec_label_pc_afdc
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_adf4 = load i32, i32* @sl, align 4
  %v1_adf4 = trunc i32 %v0_adf4 to i8
  %v2_adf4 = load i32, i32* @r5, align 4
  %v3_adf4 = add i32 %v2_adf4, 10
  %v4_adf4 = inttoptr i32 %v3_adf4 to i8*
  store i8 %v1_adf4, i8* %v4_adf4, align 1
  %v0_adf8 = load i32, i32* @sl, align 4
  %v1_adf8 = trunc i32 %v0_adf8 to i8
  %v2_adf8 = load i32, i32* @r5, align 4
  %v3_adf8 = add i32 %v2_adf8, 11
  %v4_adf8 = inttoptr i32 %v3_adf8 to i8*
  store i8 %v1_adf8, i8* %v4_adf8, align 1
  %v0_adfc = load i32, i32* @r5, align 4
  store i32 %v0_adfc, i32* @r0, align 4
  %v2_ae00 = call i32 @function_e424(i32 %v0_adfc, i32 20)
  %v3_ae00 = trunc i32 %v2_ae00 to i8
  %v4_ae04 = sdiv i32 %v2_ae00, 256
  store i32 %v4_ae04, i32* %r3.global-to-local, align 4
  %v1_ae08 = trunc i32 %v4_ae04 to i8
  %v2_ae08 = load i32, i32* @r5, align 4
  %v3_ae08 = add i32 %v2_ae08, 11
  %v4_ae08 = inttoptr i32 %v3_ae08 to i8*
  store i8 %v1_ae08, i8* %v4_ae08, align 1
  %v3_ae0c = load i32, i32* @r5, align 4
  %v4_ae0c = add i32 %v3_ae0c, 10
  %v5_ae0c = inttoptr i32 %v4_ae0c to i8*
  store i8 %v3_ae00, i8* %v5_ae0c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ae14 = load i32, i32* @sl, align 4
  %v1_ae14 = trunc i32 %v0_ae14 to i8
  %v2_ae14 = load i32, i32* @r6, align 4
  %v3_ae14 = add i32 %v2_ae14, 10
  %v4_ae14 = inttoptr i32 %v3_ae14 to i8*
  store i8 %v1_ae14, i8* %v4_ae14, align 1
  %v0_ae18 = load i32, i32* @sl, align 4
  %v1_ae18 = trunc i32 %v0_ae18 to i8
  %v2_ae18 = load i32, i32* @r6, align 4
  %v3_ae18 = add i32 %v2_ae18, 11
  %v4_ae18 = inttoptr i32 %v3_ae18 to i8*
  store i8 %v1_ae18, i8* %v4_ae18, align 1
  %v0_ae1c = load i32, i32* @r6, align 4
  store i32 %v0_ae1c, i32* @r0, align 4
  %v2_ae20 = call i32 @function_e424(i32 %v0_ae1c, i32 20)
  %v3_ae20 = trunc i32 %v2_ae20 to i8
  store i32 %v2_ae20, i32* %r0.global-to-local, align 4
  %v4_ae24 = sdiv i32 %v2_ae20, 256
  store i32 %v4_ae24, i32* %r3.global-to-local, align 4
  %v3_ae28 = load i32, i32* @r6, align 4
  %v4_ae28 = add i32 %v3_ae28, 10
  %v5_ae28 = inttoptr i32 %v4_ae28 to i8*
  store i8 %v3_ae20, i8* %v5_ae28, align 1
  %v0_ae2c = load i32, i32* %r3.global-to-local, align 4
  %v1_ae2c = trunc i32 %v0_ae2c to i8
  %v2_ae2c = load i32, i32* @r6, align 4
  %v3_ae2c = add i32 %v2_ae2c, 11
  %v4_ae2c = inttoptr i32 %v3_ae2c to i8*
  store i8 %v1_ae2c, i8* %v4_ae2c, align 1
  %v0_ae30 = load i32, i32* @r7, align 4
  %v1_ae30 = add i32 %v0_ae30, 4
  %v2_ae30 = inttoptr i32 %v1_ae30 to i8*
  %v3_ae30 = load i8, i8* %v2_ae30, align 1
  %v4_ae30 = zext i8 %v3_ae30 to i32
  store i32 %v4_ae30, i32* %r3.global-to-local, align 4
  %v1_ae34 = add i32 %v0_ae30, 5
  %v2_ae34 = inttoptr i32 %v1_ae34 to i8*
  %v3_ae34 = load i8, i8* %v2_ae34, align 1
  %v4_ae34 = zext i8 %v3_ae34 to i32
  store i32 %v0_ae30, i32* @r1, align 4
  %v4_ae3c = mul nuw nsw i32 %v4_ae34, 256
  %v5_ae3c = or i32 %v4_ae3c, %v4_ae30
  store i32 %v5_ae3c, i32* %r2.global-to-local, align 4
  %v0_ae40 = load i32, i32* @sl, align 4
  %v1_ae40 = trunc i32 %v0_ae40 to i8
  %v3_ae40 = add i32 %v0_ae30, 6
  %v4_ae40 = inttoptr i32 %v3_ae40 to i8*
  store i8 %v1_ae40, i8* %v4_ae40, align 1
  store i32 %stack_var_-156.0.ph, i32* %r3.global-to-local, align 4
  %v0_ae48 = load i32, i32* @sl, align 4
  %v1_ae48 = trunc i32 %v0_ae48 to i8
  %v2_ae48 = load i32, i32* @r7, align 4
  %v3_ae48 = add i32 %v2_ae48, 7
  %v4_ae48 = inttoptr i32 %v3_ae48 to i8*
  store i8 %v1_ae48, i8* %v4_ae48, align 1
  %v0_ae4c = load i32, i32* @r6, align 4
  store i32 %v0_ae4c, i32* %r0.global-to-local, align 4
  %v4_ae50 = call i32 @function_e480(i32 %v0_ae4c, i32 %v0_ae30, i32 %v5_ae3c, i32 %stack_var_-156.0.ph)
  %v5_ae50 = trunc i32 %v4_ae50 to i8
  store i32 %v4_ae50, i32* %r0.global-to-local, align 4
  %v3_ae54 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ae54, i32* %r3.global-to-local, align 4
  %v3_ae58 = mul i32 %v3_ae54, 32
  store i32 %v3_ae58, i32* %r2.global-to-local, align 4
  %v0_ae5c = load i32, i32* @r5, align 4
  %v1_ae5c = add i32 %v0_ae5c, 16
  %v2_ae5c = inttoptr i32 %v1_ae5c to i32*
  %v3_ae5c = load i32, i32* %v2_ae5c, align 4
  store i32 %v3_ae5c, i32* %r1.global-to-local, align 4
  %v5_ae60 = mul i32 %v3_ae54, 24
  store i32 %v5_ae60, i32* %r2.global-to-local, align 4
  %v4_ae6442 = udiv i32 %v4_ae50, 256
  %v1_ae68 = trunc i32 %v4_ae6442 to i8
  %v2_ae68 = load i32, i32* @r7, align 4
  %v3_ae68 = add i32 %v2_ae68, 7
  %v4_ae68 = inttoptr i32 %v3_ae68 to i8*
  store i8 %v1_ae68, i8* %v4_ae68, align 1
  %v0_ae6c = load i32, i32* %r2.global-to-local, align 4
  %v1_ae6c = load i32, i32* @sb, align 4
  %v2_ae6c = add i32 %v1_ae6c, %v0_ae6c
  store i32 %v2_ae6c, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_ae74 = load i32, i32* @r7, align 4
  %v4_ae74 = add i32 %v3_ae74, 6
  %v5_ae74 = inttoptr i32 %v4_ae74 to i8*
  store i8 %v5_ae50, i8* %v5_ae74, align 1
  %v0_ae78 = load i32, i32* %r1.global-to-local, align 4
  %v1_ae78 = load i32, i32* %lr.global-to-local, align 4
  %v2_ae78 = add i32 %v1_ae78, 4
  %v3_ae78 = inttoptr i32 %v2_ae78 to i32*
  store i32 %v0_ae78, i32* %v3_ae78, align 4
  %v0_ae7c = load i32, i32* %r3.global-to-local, align 4
  %v1_ae7c = trunc i32 %v0_ae7c to i8
  %v2_ae7c = load i32, i32* %r2.global-to-local, align 4
  %v3_ae7c = load i32, i32* @sb, align 4
  %v4_ae7c = add i32 %v3_ae7c, %v2_ae7c
  %v5_ae7c = inttoptr i32 %v4_ae7c to i8*
  store i8 %v1_ae7c, i8* %v5_ae7c, align 1
  %v0_ae80 = load i32, i32* @sl, align 4
  %v1_ae80 = trunc i32 %v0_ae80 to i8
  %v2_ae80 = load i32, i32* %lr.global-to-local, align 4
  %v3_ae80 = add i32 %v2_ae80, 2
  %v4_ae80 = inttoptr i32 %v3_ae80 to i8*
  store i8 %v1_ae80, i8* %v4_ae80, align 1
  %v0_ae84 = load i32, i32* @sl, align 4
  %v1_ae84 = trunc i32 %v0_ae84 to i8
  %v2_ae84 = load i32, i32* %lr.global-to-local, align 4
  %v3_ae84 = add i32 %v2_ae84, 1
  %v4_ae84 = inttoptr i32 %v3_ae84 to i8*
  store i8 %v1_ae84, i8* %v4_ae84, align 1
  %v0_ae88 = load i32, i32* @sl, align 4
  %v1_ae88 = trunc i32 %v0_ae88 to i8
  %v2_ae88 = load i32, i32* %lr.global-to-local, align 4
  %v3_ae88 = add i32 %v2_ae88, 3
  %v4_ae88 = inttoptr i32 %v3_ae88 to i8*
  store i8 %v1_ae88, i8* %v4_ae88, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_ae94 = load i32, i32* @r5, align 4
  store i32 %v0_ae94, i32* %r1.global-to-local, align 4
  store i32 %v3_a9e4, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-160.0.ph, i32* %r2.global-to-local, align 4
  %v0_aea0 = load i32, i32* %lr.global-to-local, align 4
  %v6_aea8 = inttoptr i32 %v0_ae94 to i32*
  %v7_aea8 = call i32 @function_13d2c(i32 %v3_a9e4, i32* %v6_aea8, i32 %stack_var_-160.0.ph, i32 16384, i32 %v0_aea0, i32 16)
  %v3_aeac = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_aeac, i32* %r3.global-to-local, align 4
  %v1_aeb0 = add i32 %v3_aeac, 1
  store i32 %v1_aeb0, i32* %r0.global-to-local, align 4
  %v1_aeb4 = load i32, i32* @fp, align 4
  %v9_aeb4 = icmp eq i32 %v1_aeb0, %v1_aeb4
  store i1 %v9_aeb4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_aeb0, i32* %stack_var_-40, align 4
  %v6_aebc = icmp slt i32 %v1_aeb0, %v1_aeb4
  br i1 %v6_aebc, label %dec_label_pc_ad14, label %dec_label_pc_acfc

dec_label_pc_aec4:                                ; preds = %dec_label_pc_a9f4
  store i32 %v3_a9e4, i32* %r0.global-to-local, align 4
  %v1_aec8 = call i32 @function_13490(i32 %v3_a9e4)
  store i32 %v1_aec8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aecc

dec_label_pc_aecc:                                ; preds = %dec_label_pc_a890, %dec_label_pc_aec4
  %v29_aed0 = phi i32 [ %v3_a9e4, %dec_label_pc_a890 ], [ %v1_aec8, %dec_label_pc_aec4 ]
  store i32 %v3_a890, i32* %r4.global-to-local, align 4
  store i32 %v15_a890, i32* %r8.global-to-local, align 4
  store i32 %v21_a890, i32* %sl.global-to-local, align 4
  ret i32 %v29_aed0

dec_label_pc_aed4:                                ; preds = %dec_label_pc_ad14
  %v1_aed4 = add i32 %v2_ad1c, 16
  %v2_aed4 = inttoptr i32 %v1_aed4 to i32*
  %v3_aed4 = load i32, i32* %v2_aed4, align 4
  store i32 %v3_aed4, i32* %r4.global-to-local, align 4
  %v0_aed8 = call i32 @function_fbfc()
  store i32 %v0_aed8, i32* %r0.global-to-local, align 4
  %v3_aedc = load i32, i32* %stack_var_-40, align 4
  %v5_aee4 = mul i32 %v3_aedc, 24
  %v0_aee8 = load i32, i32* %r4.global-to-local, align 4
  %v1_aeec = load i32, i32* @sb, align 4
  %v2_aeec = add i32 %v1_aeec, %v5_aee4
  store i32 %v2_aeec, i32* %r1.global-to-local, align 4
  %v1_aef0 = and i32 %v0_aee8, 65280
  store i32 %v1_aef0, i32* %r3.global-to-local, align 4
  %v1_aee8 = udiv i32 %v0_aee8, 256
  %v3_aef4 = and i32 %v1_aee8, 65280
  store i32 %v3_aef4, i32* %r2.global-to-local, align 4
  %v3_aef8 = mul i32 %v0_aee8, 16777216
  store i32 %v3_aef8, i32* %ip.global-to-local, align 4
  %v1_aefc = add i32 %v2_aeec, 20
  %v2_aefc = inttoptr i32 %v1_aefc to i8*
  %v3_aefc = load i8, i8* %v2_aefc, align 1
  %v4_aefc = zext i8 %v3_aefc to i32
  store i32 %v4_aefc, i32* %lr.global-to-local, align 4
  %v4_af00 = mul nuw nsw i32 %v1_aef0, 256
  %v5_af00 = or i32 %v4_af00, %v3_aef8
  store i32 %v5_af00, i32* %ip.global-to-local, align 4
  %v2_af08 = call i32 @llvm.bswap.i32(i32 %v0_aee8)
  %v7_af0c = lshr i32 %v0_aed8, %v4_aefc
  %v8_af0c = add i32 %v7_af0c, %v2_af08
  %v3_af18 = mul i32 %v8_af0c, 16777216
  %v1_af1c = and i32 %v8_af0c, 65280
  store i32 %v1_af1c, i32* %r0.global-to-local, align 4
  store i32 %v5_a9d0, i32* %r2.global-to-local, align 4
  %v4_af28 = mul nuw nsw i32 %v1_af1c, 256
  %v5_af28 = or i32 %v4_af28, %v3_af18
  store i32 %v5_af28, i32* %r1.global-to-local, align 4
  %v2_af2c = call i32 @llvm.bswap.i32(i32 %v8_af0c)
  store i32 %v2_af2c, i32* %r3.global-to-local, align 4
  store i1 %v7_ad44, i1* %cpsr_z.global-to-local, align 1
  %v1_af34 = load i32, i32* @r5, align 4
  %v2_af34 = add i32 %v1_af34, 16
  %v3_af34 = inttoptr i32 %v2_af34 to i32*
  store i32 %v2_af2c, i32* %v3_af34, align 4
  br i1 %v2_ad44, label %dec_label_pc_af3c, label %dec_label_pc_ad4c

dec_label_pc_af3c:                                ; preds = %dec_label_pc_aed4, %dec_label_pc_ad40
  %v0_af3c = call i32 @function_fbfc()
  store i32 %v0_af3c, i32* %r0.global-to-local, align 4
  store i32 %v3_aa34, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_af4c, i1* %cpsr_z.global-to-local, align 1
  %v1_af50 = load i32, i32* @r5, align 4
  %v2_af50 = add i32 %v1_af50, 12
  %v3_af50 = inttoptr i32 %v2_af50 to i32*
  store i32 %v0_af3c, i32* %v3_af50, align 4
  br i1 %v3_af4c, label %dec_label_pc_af58, label %dec_label_pc_af3c.dec_label_pc_ad60_crit_edge

dec_label_pc_af3c.dec_label_pc_ad60_crit_edge:    ; preds = %dec_label_pc_af3c
  %v1_ad64.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad60

dec_label_pc_af58:                                ; preds = %dec_label_pc_af3c, %dec_label_pc_ad4c
  %v0_af58 = call i32 @function_fbfc()
  %v3_af60 = urem i32 %v0_af58, 65536
  store i32 %v3_af60, i32* %r0.global-to-local, align 4
  %v1_af68 = sub nsw i32 999, %v3_af60
  store i32 %v1_af68, i32* %r2.global-to-local, align 4
  %v3_af6c = sdiv i32 %v1_af68, 256
  store i32 %v3_af6c, i32* %r1.global-to-local, align 4
  %v3_af7039 = udiv i32 %v3_af60, 256
  store i32 %v3_af7039, i32* %r3.global-to-local, align 4
  %v1_af74 = trunc i32 %v3_af7039 to i8
  %v2_af74 = load i32, i32* @r5, align 4
  %v3_af74 = add i32 %v2_af74, 5
  %v4_af74 = inttoptr i32 %v3_af74 to i8*
  store i8 %v1_af74, i8* %v4_af74, align 1
  %v0_af78 = load i32, i32* %r0.global-to-local, align 4
  %v1_af78 = trunc i32 %v0_af78 to i8
  %v2_af78 = load i32, i32* @r5, align 4
  %v3_af78 = add i32 %v2_af78, 4
  %v4_af78 = inttoptr i32 %v3_af78 to i8*
  store i8 %v1_af78, i8* %v4_af78, align 1
  %v0_af7c = load i32, i32* %r1.global-to-local, align 4
  %v1_af7c = trunc i32 %v0_af7c to i8
  %v2_af7c = load i32, i32* @r6, align 4
  %v3_af7c = add i32 %v2_af7c, 5
  %v4_af7c = inttoptr i32 %v3_af7c to i8*
  store i8 %v1_af7c, i8* %v4_af7c, align 1
  store i32 %v3_aa38, i32* %r1.global-to-local, align 4
  %v1_af84 = load i32, i32* @r4, align 4
  %v9_af84 = icmp eq i32 %v3_aa38, %v1_af84
  store i1 %v9_af84, i1* %cpsr_z.global-to-local, align 1
  %v0_af88 = load i32, i32* %r2.global-to-local, align 4
  %v1_af88 = trunc i32 %v0_af88 to i8
  %v2_af88 = load i32, i32* @r6, align 4
  %v3_af88 = add i32 %v2_af88, 4
  %v4_af88 = inttoptr i32 %v3_af88 to i8*
  store i8 %v1_af88, i8* %v4_af88, align 1
  %v0_af8c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_af8c, label %dec_label_pc_af90, label %dec_label_pc_af58.dec_label_pc_ad6c_crit_edge

dec_label_pc_af58.dec_label_pc_ad6c_crit_edge:    ; preds = %dec_label_pc_af58
  %v1_ad70.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad6c

dec_label_pc_af90:                                ; preds = %dec_label_pc_af58, %dec_label_pc_ad60
  %v0_af90 = call i32 @function_fbfc()
  %v1_af90 = trunc i32 %v0_af90 to i8
  store i32 %v0_af90, i32* %r0.global-to-local, align 4
  store i32 %v3_aa3c, i32* %r2.global-to-local, align 4
  %v4_af98 = sdiv i32 %v0_af90, 256
  store i32 %v4_af98, i32* %r3.global-to-local, align 4
  %v1_af9c = load i32, i32* @r4, align 4
  %v9_af9c = icmp eq i32 %v3_aa3c, %v1_af9c
  store i1 %v9_af9c, i1* %cpsr_z.global-to-local, align 1
  %v3_afa0 = load i32, i32* @r5, align 4
  %v4_afa0 = add i32 %v3_afa0, 58
  %v5_afa0 = inttoptr i32 %v4_afa0 to i8*
  store i8 %v1_af90, i8* %v5_afa0, align 1
  %v0_afa4 = load i32, i32* %r3.global-to-local, align 4
  %v1_afa4 = trunc i32 %v0_afa4 to i8
  %v2_afa4 = load i32, i32* @r7, align 4
  %v3_afa4 = add i32 %v2_afa4, 1
  %v4_afa4 = inttoptr i32 %v3_afa4 to i8*
  store i8 %v1_afa4, i8* %v4_afa4, align 1
  %v0_afa8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_afa8, label %dec_label_pc_afac, label %dec_label_pc_ad78

dec_label_pc_afac:                                ; preds = %dec_label_pc_af90, %dec_label_pc_ad6c
  %v0_afac = call i32 @function_fbfc()
  %v1_afac = trunc i32 %v0_afac to i8
  store i32 %v0_afac, i32* %r0.global-to-local, align 4
  %v4_afb043 = udiv i32 %v0_afac, 256
  %v1_afb4 = trunc i32 %v4_afb043 to i8
  %v2_afb4 = load i32, i32* @r7, align 4
  %v3_afb4 = add i32 %v2_afb4, 3
  %v4_afb4 = inttoptr i32 %v3_afb4 to i8*
  store i8 %v1_afb4, i8* %v4_afb4, align 1
  store i32 %v1_aa2c, i32* %r3.global-to-local, align 4
  store i1 %v2_afbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_afbc, label %bb108, label %bb107

bb107:                                            ; preds = %dec_label_pc_afac
  %v1_afc0 = load i32, i32* @r5, align 4
  %v2_afc0 = add i32 %v1_afc0, 16
  %v3_afc0 = inttoptr i32 %v2_afc0 to i32*
  %v4_afc0 = load i32, i32* %v3_afc0, align 4
  store i32 %v4_afc0, i32* %r3.global-to-local, align 4
  br label %bb108

bb108:                                            ; preds = %dec_label_pc_afac, %bb107
  %v3_afc4 = load i32, i32* @r7, align 4
  %v4_afc4 = add i32 %v3_afc4, 2
  %v5_afc4 = inttoptr i32 %v4_afc4 to i8*
  store i8 %v1_afac, i8* %v5_afc4, align 1
  %v0_afc8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_afc8, label %dec_label_pc_afd0, label %bb109

bb109:                                            ; preds = %bb108
  %v1_afc8 = load i32, i32* %r3.global-to-local, align 4
  %v2_afc8 = load i32, i32* @r6, align 4
  %v3_afc8 = add i32 %v2_afc8, 16
  %v4_afc8 = inttoptr i32 %v3_afc8 to i32*
  store i32 %v1_afc8, i32* %v4_afc8, align 4
  br label %dec_label_pc_ad8c

dec_label_pc_afd0:                                ; preds = %dec_label_pc_ad78, %bb108
  %v0_afd0 = call i32 @function_fbfc()
  store i32 %v0_afd0, i32* %r0.global-to-local, align 4
  %v1_afd4 = load i32, i32* @r6, align 4
  %v2_afd4 = add i32 %v1_afd4, 16
  %v3_afd4 = inttoptr i32 %v2_afd4 to i32*
  store i32 %v0_afd0, i32* %v3_afd4, align 4
  br label %dec_label_pc_ad8c

dec_label_pc_afdc:                                ; preds = %dec_label_pc_ad8c
  %v0_afdc = load i32, i32* @r7, align 4
  %v1_afdc = add i32 %v0_afdc, 8
  store i32 %v1_afdc, i32* %r0.global-to-local, align 4
  store i32 %v5_a97c, i32* @r1, align 4
  %v1_afe4 = inttoptr i32 %v1_afdc to i8*
  %v2_afe4 = call i32 @function_fdd8(i8* %v1_afe4)
  store i32 %v2_afe4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_adf0

dec_label_pc_afec:                                ; preds = %dec_label_pc_aa1c
  %v1_aff4 = add i32 %v5_a97c, 8
  store i32 %v1_aff4, i32* %r1.global-to-local, align 4
  %v1_aff8 = add i32 %v5_a97c, 66
  store i32 %v1_aff8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_acfc.preheader

; uselistorder directives
  uselistorder i32 %v1_aff8, { 1, 0 }
  uselistorder i32 %v1_aff4, { 1, 0 }
  uselistorder i32 %v0_afac, { 0, 2, 1 }
  uselistorder i32 %v0_af90, { 0, 2, 1 }
  uselistorder i32 %v3_af60, { 0, 2, 1 }
  uselistorder i32 %v2_af2c, { 1, 0 }
  uselistorder i32 %v8_af0c, { 1, 2, 0 }
  uselistorder i32 %v3_aef8, { 1, 0 }
  uselistorder i32 %v0_aee8, { 2, 0, 1, 3 }
  uselistorder i32 %v1_aeb4, { 1, 2, 0 }
  uselistorder i32 %v1_aeb0, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_ae54, { 1, 0, 2 }
  uselistorder i32 %v4_ae50, { 0, 2, 1 }
  uselistorder i32 %v0_ae30, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_ae20, { 0, 2, 1 }
  uselistorder i32 %v4_ae04, { 1, 0 }
  uselistorder i32 %v7_ad28, { 2, 1, 0, 3 }
  uselistorder i32 %v0_acfc, { 1, 0 }
  uselistorder i1 %v7_ad44, { 2, 1, 0 }
  uselistorder i1 %v2_afbc, { 2, 3, 1, 0 }
  uselistorder i1 %v3_af4c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_ac84, { 1, 0, 2 }
  uselistorder i32 %v3_ab0c, { 1, 0, 2 }
  uselistorder i32 %v3_aaec, { 1, 0 }
  uselistorder i32 %tmp91, { 1, 0 }
  uselistorder i32 %v1_aa90, { 1, 0 }
  uselistorder i32 %v1_aa8c, { 2, 1, 0 }
  uselistorder i32 %v1_aa78, { 1, 0 }
  uselistorder i32 %v1_aa74, { 2, 1, 0 }
  uselistorder i32 %v1_aa6c, { 0, 2, 1 }
  uselistorder i32 %v3_aa64, { 2, 1, 0 }
  uselistorder i32 %v0_aa40, { 1, 0, 2 }
  uselistorder i32 %v3_aa34, { 2, 1, 3, 0 }
  uselistorder i32 %v1_aa2c, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v3_aa28, { 1, 0 }
  uselistorder i32 %v0_aa28, { 2, 1, 0 }
  uselistorder i32 %v0_aa20, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_aa1c, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_aa14, { 1, 0 }
  uselistorder i1 %v7_a9e8, { 1, 0 }
  uselistorder i32 %v3_a9e4, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_a9d0, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_a99c, { 1, 2, 0 }
  uselistorder i32 %v5_a97c, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_a930, { 1, 0 }
  uselistorder i8 %v5_a920, { 1, 0 }
  uselistorder i32 %v5_a904, { 1, 0 }
  uselistorder i32 %v6_a8c8, { 1, 0 }
  uselistorder i32 %v2_a8b0, { 0, 3, 1, 2 }
  uselistorder i32 %v1_a894, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %sl.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %r8.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 28, 48, 49, 50, 51, 52, 53, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 14, 15, 17, 16, 18, 19, 21, 20, 22, 23, 25, 24, 27, 26, 0 }
  uselistorder i32* %r0.global-to-local, { 46, 1, 2, 5, 6, 3, 4, 8, 7, 9, 12, 10, 11, 13, 15, 14, 16, 18, 17, 33, 34, 35, 36, 38, 37, 42, 39, 40, 41, 45, 43, 44, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 8, 9, 10, 11, 12, 13, 3, 4, 5, 6, 7 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 10, 11, 12 }
  uselistorder label %dec_label_pc_afd0, { 1, 0 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %dec_label_pc_aecc, { 1, 0 }
  uselistorder label %dec_label_pc_adf0, { 1, 0 }
  uselistorder label %dec_label_pc_ad8c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_acfc.preheader, { 1, 0 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
}

define i32 @function_b00c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b00c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_b00c = load i32, i32* @r4, align 4
  %v15_b00c = load i32, i32* @r8, align 4
  %v1_b010 = urem i32 %arg1, 256
  store i32 %v1_b010, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_b010, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_b028 = urem i32 %arg3, 256
  store i32 %v1_b028, i32* @r4, align 4
  %v2_b02c = call i32 @function_14094(i32 %v1_b010, i32 4)
  %v0_b030 = load i32, i32* @r5, align 4
  store i32 %v0_b030, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b040 = load i32, i32* @r4, align 4
  store i32 %v0_b040, i32* %r0.global-to-local, align 4
  %v5_b044 = inttoptr i32 %v0_b030 to i32*
  %v6_b044 = call i32 @function_a4e8(i32 %v0_b040, i32* %v5_b044, i32 2, i32 0)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b05c = load i32, i32* @r5, align 4
  store i32 %v0_b05c, i32* %r1.global-to-local, align 4
  %v0_b060 = load i32, i32* @r4, align 4
  store i32 %v0_b060, i32* %r0.global-to-local, align 4
  %v5_b064 = trunc i32 %v6_b044 to i8
  %v6_b068 = inttoptr i32 %v0_b05c to i32*
  %v7_b068 = call i32 @function_a4e8(i32 %v0_b060, i32* %v6_b068, i32 3, i32 65535)
  %v0_b06c = load i32, i32* @r5, align 4
  store i32 %v0_b06c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b068, i32* @r7, align 4
  %v0_b07c = load i32, i32* @r4, align 4
  store i32 %v0_b07c, i32* %r0.global-to-local, align 4
  %v4_b080 = inttoptr i32 %v0_b06c to i32*
  %v5_b080 = call i32 @function_a4e8(i32 %v0_b07c, i32* %v4_b080, i32 4, i32 64)
  %v0_b08c = load i32, i32* @r5, align 4
  store i32 %v0_b08c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b098 = load i32, i32* @r4, align 4
  store i32 %v0_b098, i32* %r0.global-to-local, align 4
  %v5_b09c = trunc i32 %v5_b080 to i8
  %v6_b0a0 = inttoptr i32 %v0_b08c to i32*
  %v7_b0a0 = call i32 @function_a4e8(i32 %v0_b098, i32* %v6_b0a0, i32 5, i32 1)
  %v1_b0ac = urem i32 %v7_b0a0, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b0b8 = load i32, i32* @r5, align 4
  store i32 %v0_b0b8, i32* %r1.global-to-local, align 4
  %v0_b0bc = load i32, i32* @r4, align 4
  store i32 %v0_b0bc, i32* %r0.global-to-local, align 4
  %v5_b0c4 = inttoptr i32 %v0_b0b8 to i32*
  %v6_b0c4 = call i32 @function_a4e8(i32 %v0_b0bc, i32* %v5_b0c4, i32 6, i32 65535)
  %v0_b0cc = load i32, i32* @r5, align 4
  store i32 %v0_b0cc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_b0c4, i32* @sl, align 4
  %v0_b0dc = load i32, i32* @r4, align 4
  store i32 %v0_b0dc, i32* %r0.global-to-local, align 4
  %v4_b0e0 = inttoptr i32 %v0_b0cc to i32*
  %v5_b0e0 = call i32 @function_a4e8(i32 %v0_b0dc, i32* %v4_b0e0, i32 7, i32 65535)
  %v0_b0e4 = load i32, i32* @r5, align 4
  store i32 %v0_b0e4, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_b0e0, i32* @r8, align 4
  %v0_b0f4 = load i32, i32* @r4, align 4
  store i32 %v0_b0f4, i32* %r0.global-to-local, align 4
  %v4_b0f8 = inttoptr i32 %v0_b0e4 to i32*
  %v5_b0f8 = call i32 @function_a4e8(i32 %v0_b0f4, i32* %v4_b0f8, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b108 = load i32, i32* @r5, align 4
  store i32 %v0_b108, i32* %r1.global-to-local, align 4
  %v0_b10c = load i32, i32* @r4, align 4
  store i32 %v0_b10c, i32* %r0.global-to-local, align 4
  %v4_b110 = inttoptr i32 %v0_b108 to i32*
  %v5_b110 = call i32 @function_a4e8(i32 %v0_b10c, i32* %v4_b110, i32 1, i32 1)
  %v1_b118 = urem i32 %v5_b110, 256
  %v0_b11c = load i32, i32* @r5, align 4
  store i32 %v0_b11c, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b128 = load i32, i32* @r4, align 4
  store i32 %v0_b128, i32* %r0.global-to-local, align 4
  %v5_b130 = inttoptr i32 %v0_b11c to i32*
  %v6_b130 = call i32 @function_a4e8(i32 %v0_b128, i32* %v5_b130, i32 19, i32 0)
  %v0_b138 = load i32, i32* @r5, align 4
  store i32 %v0_b138, i32* %r1.global-to-local, align 4
  %v2_b13c = load i32, i32* @global_var_1eadc.85, align 4
  store i32 %v2_b13c, i32* %r3.global-to-local, align 4
  store i32 %v6_b130, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_b148 = load i32, i32* @r4, align 4
  store i32 %v0_b148, i32* %r0.global-to-local, align 4
  %v4_b14c = inttoptr i32 %v0_b138 to i32*
  %v5_b14c = call i32 @function_a4e8(i32 %v0_b148, i32* %v4_b14c, i32 25, i32 %v2_b13c)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b160 = call i32 @function_13d90(i32 2, i32 3, i32 6)
  store i32 %v3_b160, i32* %r0.global-to-local, align 4
  %v7_b164 = icmp eq i32 %v3_b160, -1
  store i1 %v7_b164, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b164, label %dec_label_pc_b5e4, label %dec_label_pc_b170

dec_label_pc_b170:                                ; preds = %dec_label_pc_b00c
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b178 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b178, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b18c = call i32 @function_13d60(i32 %v3_b160, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_b18c, i32* %r0.global-to-local, align 4
  %v7_b190 = icmp eq i32 %v6_b18c, -1
  store i1 %v7_b190, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b190, label %dec_label_pc_b5dc, label %dec_label_pc_b198

dec_label_pc_b198:                                ; preds = %dec_label_pc_b170
  %v0_b198 = load i32, i32* @sl, align 4
  %v0_b1a4 = load i32, i32* @r8, align 4
  %v3_b1a4 = mul i32 %v0_b1a4, 65536
  store i32 %v3_b1a4, i32* %r8.global-to-local, align 4
  %v0_b1a8 = load i32, i32* @r7, align 4
  %v0_b1ac = load i32, i32* @r6, align 4
  %v1_b1ac = urem i32 %v0_b1ac, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_b1b4 = urem i32 %v0_b198, 65536
  store i32 %v3_b1b4, i32* %r2.global-to-local, align 4
  %v3_b1b8 = urem i32 %v0_b1a4, 65536
  store i32 %v3_b1b8, i32* %r3.global-to-local, align 4
  %v0_b1bc = load i32, i32* @fp, align 4
  %v2_b1bc = icmp eq i32 %v0_b1bc, 0
  store i1 %v2_b1bc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %v3_b1cc = urem i32 %v0_b1a8, 65536
  store i32 %v3_b1cc, i32* @sl, align 4
  %tmp84 = icmp slt i32 %v0_b1bc, 1
  br i1 %tmp84, label %dec_label_pc_b708, label %dec_label_pc_b1dc

dec_label_pc_b1dc:                                ; preds = %dec_label_pc_b198
  %v3_b1e0 = mul i32 %v5_b0f8, 65536
  %v1_b1e4 = add i32 %v3_b1e0, 3407872
  %v3_b1ec = udiv i32 %v1_b1e4, 256
  %v0_b1a8.not = or i32 %v0_b1a8, -65536
  %v1_b1fc = xor i32 %v0_b1a8.not, 65535
  %v1_b200 = urem i32 %v0_b1a4, 256
  %tmp85 = mul nsw i32 %v1_b1fc, 256
  %v1_b218 = and i32 %v3_b1ec, 65280
  %v1_b21c = add i32 %v3_b1e0, 524288
  %v4_b220 = udiv i32 %v1_b1e4, 16777216
  %v5_b220 = or i32 %v1_b218, %v4_b220
  store i32 %v5_b220, i32* %r0.global-to-local, align 4
  %v1_b224 = add i32 %v3_b1e0, 1835008
  %v1_b22c = and i32 %tmp85, 65280
  store i32 %v1_b22c, i32* @lr, align 4
  %tmp86 = udiv i32 %v1_b1fc, 256
  %tmp87 = udiv i32 %v0_b1a8, 256
  %v5_b240 = trunc i32 %tmp86 to i8
  %tmp88 = udiv i32 %v0_b198, 256
  %sext29 = mul i32 %tmp87, 16777216
  %v4_b260 = sdiv i32 %sext29, 16777216
  %v3_b26c = mul nuw nsw i32 %v1_b200, 256
  store i32 %v3_b26c, i32* @r5, align 4
  %v3_b270 = udiv i32 %v1_b21c, 256
  %tmp89 = udiv i32 %v0_b1a4, 256
  %v4_b278 = urem i32 %tmp89, 256
  %v5_b278 = or i32 %v4_b278, %v3_b26c
  store i32 %v5_b278, i32* @r7, align 4
  %v3_b27c = ashr i32 %sext29, 31
  %v3_b288 = sdiv i32 %v1_b224, 16777216
  %v1_b28c = and i32 %v3_b270, 65280
  store i32 %v1_b28c, i32* @r6, align 4
  %sext30 = mul i32 %tmp88, 16777216
  %v4_b294 = sdiv i32 %sext30, 16777216
  %v3_b298 = ashr i32 %v1_b224, 31
  %v3_b29c = udiv i32 %v1_b1fc, 65536
  %v4_b2a0 = udiv i32 %v1_b21c, 16777216
  %v5_b2a0 = or i32 %v1_b28c, %v4_b2a0
  store i32 %v5_b2a0, i32* %r8.global-to-local, align 4
  %v3_b2ac = ashr i32 %sext30, 31
  store i32 %v3_b2ac, i32* %r1.global-to-local, align 4
  store i32 %v1_b200, i32* %r2.global-to-local, align 4
  %v3_b2b441 = udiv i32 %v1_b28c, 256
  store i32 %v3_b2b441, i32* %r3.global-to-local, align 4
  %v5_b2bc = trunc i32 %v3_b2ac to i8
  store i32 0, i32* @r4, align 4
  %v4_b318 = sext i8 %v5_b09c to i32
  %sext = mul i32 %v1_b1e4, 256
  %v4_b320 = sdiv i32 %sext, 16777216
  %sext16 = mul nuw i32 %v4_b220, 16777216
  %v4_b330 = sdiv i32 %sext16, 16777216
  %v2_b404 = icmp eq i32 %v1_b1ac, 0
  %sext20 = mul i32 %v1_b21c, 256
  %v4_b424 = sdiv i32 %sext20, 16777216
  %sext21 = mul i32 %v0_b1a4, 16777216
  %v7_b43c = sdiv i32 %sext21, 16777216
  %v1_b32c = trunc i32 %v4_b320 to i8
  br label %dec_label_pc_b2cc

dec_label_pc_b2cc:                                ; preds = %bb96, %dec_label_pc_b1dc
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b2d8 = call i32 @function_14094(i32 1510, i32 4)
  store i32 %v2_b2d8, i32* %r0.global-to-local, align 4
  store i32 %v2_b02c, i32* %r1.global-to-local, align 4
  %v3_b2e0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b2e0, i32* %r3.global-to-local, align 4
  %v2_b2e4 = load i32, i32* @r4, align 4
  %v5_b2e4 = mul i32 %v2_b2e4, 4
  %v6_b2e4 = add i32 %v5_b2e4, %v2_b02c
  %v7_b2e4 = inttoptr i32 %v6_b2e4 to i32*
  store i32 %v2_b2d8, i32* %v7_b2e4, align 4
  %v0_b2e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b2e8 = load i32, i32* %r3.global-to-local, align 4
  %v4_b2e8 = mul i32 %v1_b2e8, 4
  %v5_b2e8 = add i32 %v4_b2e8, %v0_b2e8
  %v6_b2e8 = inttoptr i32 %v5_b2e8 to i32*
  %v7_b2e8 = load i32, i32* %v6_b2e8, align 4
  store i32 %v7_b2e8, i32* %r4.global-to-local, align 4
  %v1_b2ec = inttoptr i32 %v7_b2e8 to i8*
  %v2_b2ec = load i8, i8* %v1_b2ec, align 1
  %tmp = urem i8 %v2_b2ec, 16
  %v1_b2f0 = zext i8 %tmp to i32
  %v1_b2f4 = or i32 %v1_b2f0, 64
  store i32 %v1_b2f4, i32* %r2.global-to-local, align 4
  %v1_b2f8 = trunc i32 %v1_b2f4 to i8
  store i8 %v1_b2f8, i8* %v1_b2ec, align 1
  %v0_b2fc = load i32, i32* %r4.global-to-local, align 4
  %v1_b2fc = inttoptr i32 %v0_b2fc to i8*
  %v2_b2fc = load i8, i8* %v1_b2fc, align 1
  %v1_b300 = and i8 %v2_b2fc, -16
  %v1_b304 = or i8 %v1_b300, 5
  store i32 %v1_b0ac, i32* %r2.global-to-local, align 4
  store i8 %v1_b304, i8* %v1_b2fc, align 1
  %v2_b314 = load i32, i32* %r4.global-to-local, align 4
  %v3_b314 = add i32 %v2_b314, 1
  %v4_b314 = inttoptr i32 %v3_b314 to i8*
  store i8 %v5_b064, i8* %v4_b314, align 1
  store i32 %v4_b318, i32* %r1.global-to-local, align 4
  %v2_b31c = load i32, i32* %r4.global-to-local, align 4
  %v3_b31c = add i32 %v2_b31c, 8
  %v4_b31c = inttoptr i32 %v3_b31c to i8*
  store i8 %v5_b09c, i8* %v4_b31c, align 1
  store i32 %v4_b320, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_b328 = load i32, i32* %r2.global-to-local, align 4
  %v9_b328 = icmp eq i32 %v0_b328, 0
  store i1 %v9_b328, i1* %cpsr_z.global-to-local, align 1
  %v2_b32c = load i32, i32* %r4.global-to-local, align 4
  %v3_b32c = add i32 %v2_b32c, 3
  %v4_b32c = inttoptr i32 %v3_b32c to i8*
  store i8 %v1_b32c, i8* %v4_b32c, align 1
  store i32 %v4_b330, i32* %r2.global-to-local, align 4
  %v0_b334 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b334, label %.thread23, label %.thread

.thread:                                          ; preds = %dec_label_pc_b2cc
  %v1_b334 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_b334, i32* %r3.global-to-local, align 4
  %v2_b338 = trunc i32 %v1_b334 to i8
  %v3_b338 = load i32, i32* %r4.global-to-local, align 4
  %v4_b338 = add i32 %v3_b338, 7
  %v5_b338 = inttoptr i32 %v4_b338 to i8*
  store i8 %v2_b338, i8* %v5_b338, align 1
  %v0_b33c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b33c.pr.pr, label %.thread23, label %bb

bb:                                               ; preds = %.thread
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_b340 = load i32, i32* %r4.global-to-local, align 4
  %v4_b340 = add i32 %v3_b340, 6
  %v5_b340 = inttoptr i32 %v4_b340 to i8*
  store i8 64, i8* %v5_b340, align 1
  br label %.thread23

.thread23:                                        ; preds = %dec_label_pc_b2cc, %.thread, %bb
  %v0_b344 = load i32, i32* %r2.global-to-local, align 4
  %v1_b344 = trunc i32 %v0_b344 to i8
  %v2_b344 = load i32, i32* %r4.global-to-local, align 4
  %v3_b344 = add i32 %v2_b344, 2
  %v4_b344 = inttoptr i32 %v3_b344 to i8*
  store i8 %v1_b344, i8* %v4_b344, align 1
  store i32 %v3_b27c, i32* %r2.global-to-local, align 4
  store i32 %v4_b260, i32* %r1.global-to-local, align 4
  %v2_b354 = load i32, i32* %r4.global-to-local, align 4
  %v3_b354 = add i32 %v2_b354, 9
  %v4_b354 = inttoptr i32 %v3_b354 to i8*
  store i8 47, i8* %v4_b354, align 1
  %v0_b358 = load i32, i32* %r2.global-to-local, align 4
  %v1_b358 = trunc i32 %v0_b358 to i8
  %v2_b358 = load i32, i32* %r4.global-to-local, align 4
  %v3_b358 = add i32 %v2_b358, 5
  %v4_b358 = inttoptr i32 %v3_b358 to i8*
  store i8 %v1_b358, i8* %v4_b358, align 1
  %v3_b35c = load i32, i32* %stack_var_-40, align 4
  %v5_b364 = mul i32 %v3_b35c, 24
  store i32 %v5_b364, i32* %r3.global-to-local, align 4
  store i32 %v5_b14c, i32* %r2.global-to-local, align 4
  %v1_b36c = load i32, i32* %r4.global-to-local, align 4
  %v2_b36c = add i32 %v1_b36c, 12
  %v3_b36c = inttoptr i32 %v2_b36c to i32*
  store i32 %v5_b14c, i32* %v3_b36c, align 4
  %v0_b370 = load i32, i32* %r3.global-to-local, align 4
  %v1_b370 = load i32, i32* @sb, align 4
  %v2_b370 = add i32 %v1_b370, %v0_b370
  store i32 %v2_b370, i32* %r3.global-to-local, align 4
  %v0_b374 = load i32, i32* %r1.global-to-local, align 4
  %v1_b374 = trunc i32 %v0_b374 to i8
  %v2_b374 = load i32, i32* %r4.global-to-local, align 4
  %v3_b374 = add i32 %v2_b374, 4
  %v4_b374 = inttoptr i32 %v3_b374 to i8*
  store i8 %v1_b374, i8* %v4_b374, align 1
  %v0_b378 = load i32, i32* %r3.global-to-local, align 4
  %v1_b378 = add i32 %v0_b378, 16
  %v2_b378 = inttoptr i32 %v1_b378 to i32*
  %v3_b378 = load i32, i32* %v2_b378, align 4
  store i32 %v3_b378, i32* %r2.global-to-local, align 4
  %v0_b37c = load i32, i32* %r4.global-to-local, align 4
  %v1_b37c = add i32 %v0_b37c, 20
  store i32 %v1_b37c, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_b384 = load i32, i32* %r0.global-to-local, align 4
  %v1_b384 = trunc i32 %v0_b384 to i8
  %v3_b384 = add i32 %v0_b37c, 23
  %v4_b384 = inttoptr i32 %v3_b384 to i8*
  store i8 %v1_b384, i8* %v4_b384, align 1
  %v0_b388 = load i32, i32* %r3.global-to-local, align 4
  %v1_b388 = trunc i32 %v0_b388 to i8
  %v2_b388 = load i32, i32* %r1.global-to-local, align 4
  %v3_b388 = add i32 %v2_b388, 2
  %v4_b388 = inttoptr i32 %v3_b388 to i8*
  store i8 %v1_b388, i8* %v4_b388, align 1
  %v0_b38c = load i32, i32* %r4.global-to-local, align 4
  %v1_b38c = add i32 %v0_b38c, 24
  %v2_b38c = inttoptr i32 %v1_b38c to i8*
  %v3_b38c = load i8, i8* %v2_b38c, align 1
  %tmp104 = urem i8 %v3_b38c, 16
  %v1_b390 = zext i8 %tmp104 to i32
  %v1_b394 = or i32 %v1_b390, 64
  store i32 %v1_b394, i32* %r3.global-to-local, align 4
  %v1_b398 = trunc i32 %v1_b394 to i8
  store i8 %v1_b398, i8* %v2_b38c, align 1
  %v0_b39c = load i32, i32* %r2.global-to-local, align 4
  %v1_b39c = load i32, i32* %r4.global-to-local, align 4
  %v2_b39c = add i32 %v1_b39c, 16
  %v3_b39c = inttoptr i32 %v2_b39c to i32*
  store i32 %v0_b39c, i32* %v3_b39c, align 4
  %v0_b3a0 = load i32, i32* %r4.global-to-local, align 4
  %v1_b3a0 = add i32 %v0_b3a0, 24
  %v2_b3a0 = inttoptr i32 %v1_b3a0 to i8*
  %v3_b3a0 = load i8, i8* %v2_b3a0, align 1
  %v1_b3a4 = and i8 %v3_b3a0, -16
  %v1_b3a8 = or i8 %v1_b3a4, 5
  store i8 %v1_b3a8, i8* %v2_b3a0, align 1
  %v0_b3b4 = load i32, i32* %r4.global-to-local, align 4
  %v1_b3b4 = add i32 %v0_b3b4, 24
  store i32 %v1_b3b4, i32* @r5, align 4
  %v3_b3b8 = add i32 %v0_b3b4, 25
  %v4_b3b8 = inttoptr i32 %v3_b3b8 to i8*
  store i8 %v5_b064, i8* %v4_b3b8, align 1
  store i32 %v3_b288, i32* %r1.global-to-local, align 4
  store i32 %tmp86, i32* %r3.global-to-local, align 4
  store i32 %v3_b298, i32* %r2.global-to-local, align 4
  %v2_b3c8 = load i32, i32* @r5, align 4
  %v3_b3c8 = add i32 %v2_b3c8, 4
  %v4_b3c8 = inttoptr i32 %v3_b3c8 to i8*
  store i8 %v5_b240, i8* %v4_b3c8, align 1
  %v0_b3cc = load i32, i32* %r1.global-to-local, align 4
  %v1_b3cc = trunc i32 %v0_b3cc to i8
  %v2_b3cc = load i32, i32* @r5, align 4
  %v3_b3cc = add i32 %v2_b3cc, 2
  %v4_b3cc = inttoptr i32 %v3_b3cc to i8*
  store i8 %v1_b3cc, i8* %v4_b3cc, align 1
  %v0_b3d0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b3d0, label %bb91, label %bb90

bb90:                                             ; preds = %.thread23
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb91

bb91:                                             ; preds = %.thread23, %bb90
  store i32 %v3_b29c, i32* %r1.global-to-local, align 4
  %v0_b3d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_b3d8 = trunc i32 %v0_b3d8 to i8
  %v2_b3d8 = load i32, i32* @r5, align 4
  %v3_b3d8 = add i32 %v2_b3d8, 3
  %v4_b3d8 = inttoptr i32 %v3_b3d8 to i8*
  store i8 %v1_b3d8, i8* %v4_b3d8, align 1
  store i32 %v4_b318, i32* %r2.global-to-local, align 4
  %v0_b3e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b3e0, label %bb93, label %bb92

bb92:                                             ; preds = %bb91
  %v1_b3e0 = load i32, i32* %r3.global-to-local, align 4
  %v2_b3e0 = trunc i32 %v1_b3e0 to i8
  %v3_b3e0 = load i32, i32* @r5, align 4
  %v4_b3e0 = add i32 %v3_b3e0, 6
  %v5_b3e0 = inttoptr i32 %v4_b3e0 to i8*
  store i8 %v2_b3e0, i8* %v5_b3e0, align 1
  br label %bb93

bb93:                                             ; preds = %bb91, %bb92
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_b3e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b3e8 = trunc i32 %v0_b3e8 to i8
  %v2_b3e8 = load i32, i32* @r5, align 4
  %v3_b3e8 = add i32 %v2_b3e8, 5
  %v4_b3e8 = inttoptr i32 %v3_b3e8 to i8*
  store i8 %v1_b3e8, i8* %v4_b3e8, align 1
  %v0_b3ec = load i32, i32* %r2.global-to-local, align 4
  %v1_b3ec = trunc i32 %v0_b3ec to i8
  %v2_b3ec = load i32, i32* @r5, align 4
  %v3_b3ec = add i32 %v2_b3ec, 8
  %v4_b3ec = inttoptr i32 %v3_b3ec to i8*
  store i8 %v1_b3ec, i8* %v4_b3ec, align 1
  %v0_b3f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b3f0, label %bb95, label %bb94

bb94:                                             ; preds = %bb93
  %v1_b3f0 = load i32, i32* %r0.global-to-local, align 4
  %v2_b3f0 = trunc i32 %v1_b3f0 to i8
  %v3_b3f0 = load i32, i32* @r5, align 4
  %v4_b3f0 = add i32 %v3_b3f0, 7
  %v5_b3f0 = inttoptr i32 %v4_b3f0 to i8*
  store i8 %v2_b3f0, i8* %v5_b3f0, align 1
  br label %bb95

bb95:                                             ; preds = %bb93, %bb94
  %v0_b3f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b3f4 = trunc i32 %v0_b3f4 to i8
  %v2_b3f4 = load i32, i32* @r5, align 4
  %v3_b3f4 = add i32 %v2_b3f4, 9
  %v4_b3f4 = inttoptr i32 %v3_b3f4 to i8*
  store i8 %v1_b3f4, i8* %v4_b3f4, align 1
  %v0_b3f8 = call i32 @function_fbfc()
  store i32 %v0_b3f8, i32* %r0.global-to-local, align 4
  store i32 %v1_b1ac, i32* %r1.global-to-local, align 4
  store i1 %v2_b404, i1* %cpsr_z.global-to-local, align 1
  %v1_b408 = sub i32 1023, %v0_b3f8
  store i32 %v1_b408, i32* %r3.global-to-local, align 4
  br i1 %v2_b404, label %.thread24, label %.thread25

.thread24:                                        ; preds = %bb95
  %v2_b410 = load i32, i32* @r5, align 4
  %v3_b410 = add i32 %v2_b410, 16
  %v4_b410 = inttoptr i32 %v3_b410 to i32*
  store i32 %v1_b408, i32* %v4_b410, align 4
  br label %bb96

.thread25:                                        ; preds = %bb95
  %v1_b40c = load i32, i32* %r4.global-to-local, align 4
  %v2_b40c = add i32 %v1_b40c, 16
  %v3_b40c = inttoptr i32 %v2_b40c to i32*
  %v4_b40c = load i32, i32* %v3_b40c, align 4
  store i32 %v4_b40c, i32* %r3.global-to-local, align 4
  %v2_b414 = load i32, i32* @r5, align 4
  %v3_b414 = add i32 %v2_b414, 16
  %v4_b414 = inttoptr i32 %v3_b414 to i32*
  store i32 %v4_b40c, i32* %v4_b414, align 4
  br label %bb96

bb96:                                             ; preds = %.thread24, %.thread25
  store i32 %v4_b294, i32* %r3.global-to-local, align 4
  %v0_b41c = load i32, i32* %r4.global-to-local, align 4
  %v1_b41c = add i32 %v0_b41c, 44
  store i32 %v1_b41c, i32* @r6, align 4
  %v1_b420 = load i32, i32* @r5, align 4
  %v2_b420 = add i32 %v1_b420, 12
  %v3_b420 = inttoptr i32 %v2_b420 to i32*
  store i32 %v0_b3f8, i32* %v3_b420, align 4
  store i32 %v4_b424, i32* %r2.global-to-local, align 4
  %v0_b428 = load i32, i32* %r3.global-to-local, align 4
  %v1_b428 = trunc i32 %v0_b428 to i8
  %v2_b428 = load i32, i32* @r6, align 4
  %v3_b428 = inttoptr i32 %v2_b428 to i8*
  store i8 %v1_b428, i8* %v3_b428, align 1
  %v3_b42c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b42c, i32* %r3.global-to-local, align 4
  %v0_b430 = load i32, i32* %r2.global-to-local, align 4
  %v1_b430 = trunc i32 %v0_b430 to i8
  %v2_b430 = load i32, i32* @r6, align 4
  %v3_b430 = add i32 %v2_b430, 5
  %v4_b430 = inttoptr i32 %v3_b430 to i8*
  store i8 %v1_b430, i8* %v4_b430, align 1
  %v0_b434 = load i32, i32* %r3.global-to-local, align 4
  %v1_b434 = add i32 %v0_b434, 1
  store i32 %v1_b434, i32* @r4, align 4
  store i32 %v3_b2ac, i32* %r1.global-to-local, align 4
  store i32 %v7_b43c, i32* %r2.global-to-local, align 4
  %v1_b440 = load i32, i32* @fp, align 4
  %v9_b440 = icmp eq i32 %v1_b434, %v1_b440
  store i1 %v9_b440, i1* %cpsr_z.global-to-local, align 1
  %v2_b444 = load i32, i32* @r6, align 4
  %v3_b444 = add i32 %v2_b444, 1
  %v4_b444 = inttoptr i32 %v3_b444 to i8*
  store i8 %v5_b2bc, i8* %v4_b444, align 1
  %v0_b448 = load i32, i32* @r7, align 4
  %v1_b448 = trunc i32 %v0_b448 to i8
  %v2_b448 = load i32, i32* @r6, align 4
  %v3_b448 = add i32 %v2_b448, 2
  %v4_b448 = inttoptr i32 %v3_b448 to i8*
  store i8 %v1_b448, i8* %v4_b448, align 1
  %v0_b44c = load i32, i32* %r2.global-to-local, align 4
  %v1_b44c = trunc i32 %v0_b44c to i8
  %v2_b44c = load i32, i32* @r6, align 4
  %v3_b44c = add i32 %v2_b44c, 3
  %v4_b44c = inttoptr i32 %v3_b44c to i8*
  store i8 %v1_b44c, i8* %v4_b44c, align 1
  %v0_b450 = load i32, i32* %r8.global-to-local, align 4
  %v1_b450 = trunc i32 %v0_b450 to i8
  %v2_b450 = load i32, i32* @r6, align 4
  %v3_b450 = add i32 %v2_b450, 4
  %v4_b450 = inttoptr i32 %v3_b450 to i8*
  store i8 %v1_b450, i8* %v4_b450, align 1
  %v0_b454 = load i32, i32* @r4, align 4
  store i32 %v0_b454, i32* %stack_var_-40, align 4
  %v5_b458 = icmp slt i32 %v1_b434, %v1_b440
  br i1 %v5_b458, label %dec_label_pc_b2cc, label %dec_label_pc_b45c

dec_label_pc_b45c:                                ; preds = %bb96
  %v1_b464 = add i32 %v5_b0f8, 8
  store i32 %v1_b464, i32* %r3.global-to-local, align 4
  %v1_b468 = add i32 %v5_b0f8, 52
  store i32 %v1_b468, i32* %r1.global-to-local, align 4
  %v0_b474.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_b474.preheader

dec_label_pc_b474.preheader:                      ; preds = %dec_label_pc_b45c, %dec_label_pc_b708
  %v0_b474.pre = phi i32 [ %v0_b474.pre.pre, %dec_label_pc_b45c ], [ %v0_b1bc, %dec_label_pc_b708 ]
  %stack_var_-120.0.ph = phi i32 [ %v1_b468, %dec_label_pc_b45c ], [ %v1_b714, %dec_label_pc_b708 ]
  %stack_var_-152.0.ph = phi i32 [ %v1_b464, %dec_label_pc_b45c ], [ %v1_b710, %dec_label_pc_b708 ]
  %v2_b6ec = icmp eq i32 %v1_b118, 0
  %v2_b4ec = icmp eq i32 %v1_b1ac, 0
  %v2_b4b8 = icmp eq i32 %v5_b14c, -1
  %v7_b4b8 = icmp eq i32 %v5_b14c, -1
  br label %dec_label_pc_b474

dec_label_pc_b474:                                ; preds = %dec_label_pc_b508, %dec_label_pc_b474.preheader
  %v0_b474 = phi i32 [ %v0_b474.pre, %dec_label_pc_b474.preheader ], [ %v1_b5cc, %dec_label_pc_b508 ]
  %v2_b474 = icmp eq i32 %v0_b474, 0
  store i1 %v2_b474, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp97 = icmp slt i32 %v0_b474, 1
  br label %dec_label_pc_b47c

dec_label_pc_b47c:                                ; preds = %dec_label_pc_b47c, %dec_label_pc_b474
  br i1 %tmp97, label %dec_label_pc_b47c, label %dec_label_pc_b480

dec_label_pc_b480:                                ; preds = %dec_label_pc_b47c
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  br label %dec_label_pc_b48c

dec_label_pc_b48c:                                ; preds = %dec_label_pc_b508, %dec_label_pc_b480
  %v1_b4a0 = phi i32 [ %v1_b5c8, %dec_label_pc_b508 ], [ 0, %dec_label_pc_b480 ]
  %v5_b490 = mul i32 %v1_b4a0, 24
  %v1_b494 = load i32, i32* @sb, align 4
  %v2_b494 = add i32 %v1_b494, %v5_b490
  store i32 %v2_b494, i32* %r3.global-to-local, align 4
  store i32 %v2_b02c, i32* %r1.global-to-local, align 4
  %v1_b49c = add i32 %v2_b494, 20
  %v2_b49c = inttoptr i32 %v1_b49c to i8*
  %v3_b49c = load i8, i8* %v2_b49c, align 1
  %v4_b49c = zext i8 %v3_b49c to i32
  store i32 %v4_b49c, i32* %r2.global-to-local, align 4
  %v4_b4a0 = mul i32 %v1_b4a0, 4
  %v5_b4a0 = add i32 %v4_b4a0, %v2_b02c
  %v6_b4a0 = inttoptr i32 %v5_b4a0 to i32*
  %v7_b4a0 = load i32, i32* %v6_b4a0, align 4
  store i32 %v7_b4a0, i32* @r5, align 4
  %v7_b4a4 = icmp eq i8 %v3_b49c, 31
  store i1 %v7_b4a4, i1* %cpsr_z.global-to-local, align 1
  %v1_b4a8 = add i32 %v7_b4a0, 24
  store i32 %v1_b4a8, i32* @r6, align 4
  %v1_b4ac = add i32 %v7_b4a0, 44
  store i32 %v1_b4ac, i32* @r7, align 4
  %tmp105 = icmp ult i8 %v3_b49c, 32
  br i1 %tmp105, label %dec_label_pc_b5ec, label %dec_label_pc_b4b4

dec_label_pc_b4b4:                                ; preds = %dec_label_pc_b48c
  store i32 %v5_b14c, i32* %r2.global-to-local, align 4
  store i1 %v7_b4b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b4b8, label %dec_label_pc_b654, label %dec_label_pc_b4c0

dec_label_pc_b4c0:                                ; preds = %dec_label_pc_b5ec, %dec_label_pc_b4b4
  store i32 65535, i32* @r4, align 4
  %v0_b4c8 = load i32, i32* @sl, align 4
  %v9_b4c8 = icmp eq i32 %v0_b4c8, 65535
  store i1 %v9_b4c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b4c8, label %dec_label_pc_b66c, label %dec_label_pc_b4d0

dec_label_pc_b4d0:                                ; preds = %dec_label_pc_b654.dec_label_pc_b4d0_crit_edge, %dec_label_pc_b4c0
  %v1_b4d4 = phi i32 [ %v1_b4d4.pre, %dec_label_pc_b654.dec_label_pc_b4d0_crit_edge ], [ 65535, %dec_label_pc_b4c0 ]
  store i32 %v3_b1b4, i32* %r3.global-to-local, align 4
  %v9_b4d4 = icmp eq i32 %v3_b1b4, %v1_b4d4
  store i1 %v9_b4d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b4d4, label %dec_label_pc_b6a4, label %dec_label_pc_b4dc

dec_label_pc_b4dc:                                ; preds = %dec_label_pc_b66c.dec_label_pc_b4dc_crit_edge, %dec_label_pc_b4d0
  %v1_b4e0 = phi i32 [ %v1_b4e0.pre, %dec_label_pc_b66c.dec_label_pc_b4dc_crit_edge ], [ %v1_b4d4, %dec_label_pc_b4d0 ]
  store i32 %v3_b1b8, i32* %r1.global-to-local, align 4
  %v9_b4e0 = icmp eq i32 %v3_b1b8, %v1_b4e0
  store i1 %v9_b4e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b4e0, label %dec_label_pc_b6c0, label %dec_label_pc_b4e8

dec_label_pc_b4e8:                                ; preds = %dec_label_pc_b6a4, %dec_label_pc_b4dc
  store i32 %v1_b1ac, i32* %r2.global-to-local, align 4
  store i1 %v2_b4ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b4ec, label %dec_label_pc_b6e4, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_b4e8
  %v1_b4f0 = load i32, i32* @r5, align 4
  %v2_b4f0 = add i32 %v1_b4f0, 16
  %v3_b4f0 = inttoptr i32 %v2_b4f0 to i32*
  %v4_b4f0 = load i32, i32* %v3_b4f0, align 4
  store i32 %v4_b4f0, i32* %r3.global-to-local, align 4
  %v2_b4f4 = load i32, i32* @r6, align 4
  %v3_b4f4 = add i32 %v2_b4f4, 16
  %v4_b4f4 = inttoptr i32 %v3_b4f4 to i32*
  store i32 %v4_b4f0, i32* %v4_b4f4, align 4
  br label %dec_label_pc_b4fc

dec_label_pc_b4fc:                                ; preds = %bb102, %.thread26
  store i32 %v1_b118, i32* %r3.global-to-local, align 4
  store i1 %v2_b6ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b6ec, label %dec_label_pc_b508, label %dec_label_pc_b6f8

dec_label_pc_b508:                                ; preds = %dec_label_pc_b4fc, %dec_label_pc_b6e4, %dec_label_pc_b6f8
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b50c = load i32, i32* @r8, align 4
  %v1_b50c = trunc i32 %v0_b50c to i8
  %v2_b50c = load i32, i32* @r5, align 4
  %v3_b50c = add i32 %v2_b50c, 10
  %v4_b50c = inttoptr i32 %v3_b50c to i8*
  store i8 %v1_b50c, i8* %v4_b50c, align 1
  %v0_b510 = load i32, i32* @r8, align 4
  %v1_b510 = trunc i32 %v0_b510 to i8
  %v2_b510 = load i32, i32* @r5, align 4
  %v3_b510 = add i32 %v2_b510, 11
  %v4_b510 = inttoptr i32 %v3_b510 to i8*
  store i8 %v1_b510, i8* %v4_b510, align 1
  %v0_b514 = load i32, i32* @r5, align 4
  store i32 %v0_b514, i32* @r0, align 4
  %v2_b518 = call i32 @function_e424(i32 %v0_b514, i32 20)
  %v3_b518 = trunc i32 %v2_b518 to i8
  %v4_b51c = sdiv i32 %v2_b518, 256
  store i32 %v4_b51c, i32* %r3.global-to-local, align 4
  %v1_b520 = trunc i32 %v4_b51c to i8
  %v2_b520 = load i32, i32* @r5, align 4
  %v3_b520 = add i32 %v2_b520, 11
  %v4_b520 = inttoptr i32 %v3_b520 to i8*
  store i8 %v1_b520, i8* %v4_b520, align 1
  %v3_b524 = load i32, i32* @r5, align 4
  %v4_b524 = add i32 %v3_b524, 10
  %v5_b524 = inttoptr i32 %v4_b524 to i8*
  store i8 %v3_b518, i8* %v5_b524, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b52c = load i32, i32* @r8, align 4
  %v1_b52c = trunc i32 %v0_b52c to i8
  %v2_b52c = load i32, i32* @r6, align 4
  %v3_b52c = add i32 %v2_b52c, 10
  %v4_b52c = inttoptr i32 %v3_b52c to i8*
  store i8 %v1_b52c, i8* %v4_b52c, align 1
  %v0_b530 = load i32, i32* @r8, align 4
  %v1_b530 = trunc i32 %v0_b530 to i8
  %v2_b530 = load i32, i32* @r6, align 4
  %v3_b530 = add i32 %v2_b530, 11
  %v4_b530 = inttoptr i32 %v3_b530 to i8*
  store i8 %v1_b530, i8* %v4_b530, align 1
  %v0_b534 = load i32, i32* @r6, align 4
  store i32 %v0_b534, i32* @r0, align 4
  %v2_b538 = call i32 @function_e424(i32 %v0_b534, i32 20)
  %v3_b538 = trunc i32 %v2_b538 to i8
  store i32 %v2_b538, i32* %r0.global-to-local, align 4
  %v4_b53c = sdiv i32 %v2_b538, 256
  store i32 %v4_b53c, i32* %r3.global-to-local, align 4
  %v3_b540 = load i32, i32* @r6, align 4
  %v4_b540 = add i32 %v3_b540, 10
  %v5_b540 = inttoptr i32 %v4_b540 to i8*
  store i8 %v3_b538, i8* %v5_b540, align 1
  %v0_b544 = load i32, i32* %r3.global-to-local, align 4
  %v1_b544 = trunc i32 %v0_b544 to i8
  %v2_b544 = load i32, i32* @r6, align 4
  %v3_b544 = add i32 %v2_b544, 11
  %v4_b544 = inttoptr i32 %v3_b544 to i8*
  store i8 %v1_b544, i8* %v4_b544, align 1
  %v0_b548 = load i32, i32* @r7, align 4
  %v1_b548 = add i32 %v0_b548, 4
  %v2_b548 = inttoptr i32 %v1_b548 to i8*
  %v3_b548 = load i8, i8* %v2_b548, align 1
  %v4_b548 = zext i8 %v3_b548 to i32
  store i32 %v4_b548, i32* %r3.global-to-local, align 4
  %v1_b54c = add i32 %v0_b548, 5
  %v2_b54c = inttoptr i32 %v1_b54c to i8*
  %v3_b54c = load i8, i8* %v2_b54c, align 1
  %v4_b54c = zext i8 %v3_b54c to i32
  store i32 %v0_b548, i32* @r1, align 4
  %v4_b554 = mul nuw nsw i32 %v4_b54c, 256
  %v5_b554 = or i32 %v4_b554, %v4_b548
  store i32 %v5_b554, i32* %r2.global-to-local, align 4
  %v0_b558 = load i32, i32* @r8, align 4
  %v1_b558 = trunc i32 %v0_b558 to i8
  %v3_b558 = add i32 %v0_b548, 6
  %v4_b558 = inttoptr i32 %v3_b558 to i8*
  store i8 %v1_b558, i8* %v4_b558, align 1
  store i32 %stack_var_-152.0.ph, i32* %r3.global-to-local, align 4
  %v0_b560 = load i32, i32* @r8, align 4
  %v1_b560 = trunc i32 %v0_b560 to i8
  %v2_b560 = load i32, i32* @r7, align 4
  %v3_b560 = add i32 %v2_b560, 7
  %v4_b560 = inttoptr i32 %v3_b560 to i8*
  store i8 %v1_b560, i8* %v4_b560, align 1
  %v0_b564 = load i32, i32* @r6, align 4
  store i32 %v0_b564, i32* %r0.global-to-local, align 4
  %v4_b568 = call i32 @function_e480(i32 %v0_b564, i32 %v0_b548, i32 %v5_b554, i32 %stack_var_-152.0.ph)
  %v5_b568 = trunc i32 %v4_b568 to i8
  store i32 %v4_b568, i32* %r0.global-to-local, align 4
  %v3_b56c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b56c, i32* %r3.global-to-local, align 4
  %v3_b570 = mul i32 %v3_b56c, 32
  store i32 %v3_b570, i32* %r2.global-to-local, align 4
  %v0_b574 = load i32, i32* @r5, align 4
  %v1_b574 = add i32 %v0_b574, 16
  %v2_b574 = inttoptr i32 %v1_b574 to i32*
  %v3_b574 = load i32, i32* %v2_b574, align 4
  store i32 %v3_b574, i32* %r1.global-to-local, align 4
  %v5_b578 = mul i32 %v3_b56c, 24
  store i32 %v5_b578, i32* %r2.global-to-local, align 4
  %v4_b57c42 = udiv i32 %v4_b568, 256
  %v1_b580 = trunc i32 %v4_b57c42 to i8
  %v2_b580 = load i32, i32* @r7, align 4
  %v3_b580 = add i32 %v2_b580, 7
  %v4_b580 = inttoptr i32 %v3_b580 to i8*
  store i8 %v1_b580, i8* %v4_b580, align 1
  %v0_b584 = load i32, i32* %r2.global-to-local, align 4
  %v1_b584 = load i32, i32* @sb, align 4
  %v2_b584 = add i32 %v1_b584, %v0_b584
  store i32 %v2_b584, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_b58c = load i32, i32* @r7, align 4
  %v4_b58c = add i32 %v3_b58c, 6
  %v5_b58c = inttoptr i32 %v4_b58c to i8*
  store i8 %v5_b568, i8* %v5_b58c, align 1
  %v0_b590 = load i32, i32* %r1.global-to-local, align 4
  %v1_b590 = load i32, i32* %lr.global-to-local, align 4
  %v2_b590 = add i32 %v1_b590, 4
  %v3_b590 = inttoptr i32 %v2_b590 to i32*
  store i32 %v0_b590, i32* %v3_b590, align 4
  %v0_b594 = load i32, i32* %r3.global-to-local, align 4
  %v1_b594 = trunc i32 %v0_b594 to i8
  %v2_b594 = load i32, i32* %r2.global-to-local, align 4
  %v3_b594 = load i32, i32* @sb, align 4
  %v4_b594 = add i32 %v3_b594, %v2_b594
  %v5_b594 = inttoptr i32 %v4_b594 to i8*
  store i8 %v1_b594, i8* %v5_b594, align 1
  %v0_b598 = load i32, i32* @r8, align 4
  %v1_b598 = trunc i32 %v0_b598 to i8
  %v2_b598 = load i32, i32* %lr.global-to-local, align 4
  %v3_b598 = add i32 %v2_b598, 2
  %v4_b598 = inttoptr i32 %v3_b598 to i8*
  store i8 %v1_b598, i8* %v4_b598, align 1
  %v0_b59c = load i32, i32* @r8, align 4
  %v1_b59c = trunc i32 %v0_b59c to i8
  %v2_b59c = load i32, i32* %lr.global-to-local, align 4
  %v3_b59c = add i32 %v2_b59c, 1
  %v4_b59c = inttoptr i32 %v3_b59c to i8*
  store i8 %v1_b59c, i8* %v4_b59c, align 1
  %v0_b5a0 = load i32, i32* @r8, align 4
  %v1_b5a0 = trunc i32 %v0_b5a0 to i8
  %v2_b5a0 = load i32, i32* %lr.global-to-local, align 4
  %v3_b5a0 = add i32 %v2_b5a0, 3
  %v4_b5a0 = inttoptr i32 %v3_b5a0 to i8*
  store i8 %v1_b5a0, i8* %v4_b5a0, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b5ac = load i32, i32* @r5, align 4
  store i32 %v0_b5ac, i32* %r1.global-to-local, align 4
  store i32 %v3_b160, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-120.0.ph, i32* %r2.global-to-local, align 4
  %v0_b5b8 = load i32, i32* %lr.global-to-local, align 4
  %v6_b5c0 = inttoptr i32 %v0_b5ac to i32*
  %v7_b5c0 = call i32 @function_13d2c(i32 %v3_b160, i32* %v6_b5c0, i32 %stack_var_-120.0.ph, i32 16384, i32 %v0_b5b8, i32 16)
  %v3_b5c4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b5c4, i32* %r3.global-to-local, align 4
  %v1_b5c8 = add i32 %v3_b5c4, 1
  store i32 %v1_b5c8, i32* %r0.global-to-local, align 4
  %v1_b5cc = load i32, i32* @fp, align 4
  %v9_b5cc = icmp eq i32 %v1_b5c8, %v1_b5cc
  store i1 %v9_b5cc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b5c8, i32* %stack_var_-40, align 4
  %v6_b5d4 = icmp slt i32 %v1_b5c8, %v1_b5cc
  br i1 %v6_b5d4, label %dec_label_pc_b48c, label %dec_label_pc_b474

dec_label_pc_b5dc:                                ; preds = %dec_label_pc_b170
  store i32 %v3_b160, i32* %r0.global-to-local, align 4
  %v1_b5e0 = call i32 @function_13490(i32 %v3_b160)
  store i32 %v1_b5e0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b5e4

dec_label_pc_b5e4:                                ; preds = %dec_label_pc_b00c, %dec_label_pc_b5dc
  %v29_b5e8 = phi i32 [ %v3_b160, %dec_label_pc_b00c ], [ %v1_b5e0, %dec_label_pc_b5dc ]
  store i32 %v3_b00c, i32* %r4.global-to-local, align 4
  store i32 %v15_b00c, i32* %r8.global-to-local, align 4
  ret i32 %v29_b5e8

dec_label_pc_b5ec:                                ; preds = %dec_label_pc_b48c
  %v1_b5ec = add i32 %v2_b494, 16
  %v2_b5ec = inttoptr i32 %v1_b5ec to i32*
  %v3_b5ec = load i32, i32* %v2_b5ec, align 4
  store i32 %v3_b5ec, i32* %r4.global-to-local, align 4
  %v0_b5f0 = call i32 @function_fbfc()
  store i32 %v0_b5f0, i32* %r0.global-to-local, align 4
  %v3_b5f4 = load i32, i32* %stack_var_-40, align 4
  %v5_b5fc = mul i32 %v3_b5f4, 24
  %v0_b600 = load i32, i32* %r4.global-to-local, align 4
  %v1_b604 = load i32, i32* @sb, align 4
  %v2_b604 = add i32 %v1_b604, %v5_b5fc
  store i32 %v2_b604, i32* %r1.global-to-local, align 4
  %v1_b608 = and i32 %v0_b600, 65280
  store i32 %v1_b608, i32* %r3.global-to-local, align 4
  %v1_b600 = udiv i32 %v0_b600, 256
  %v3_b60c = and i32 %v1_b600, 65280
  store i32 %v3_b60c, i32* %r2.global-to-local, align 4
  %v1_b614 = add i32 %v2_b604, 20
  %v2_b614 = inttoptr i32 %v1_b614 to i8*
  %v3_b614 = load i8, i8* %v2_b614, align 1
  %v4_b614 = zext i8 %v3_b614 to i32
  store i32 %v4_b614, i32* %lr.global-to-local, align 4
  %v2_b620 = call i32 @llvm.bswap.i32(i32 %v0_b600)
  %v7_b624 = lshr i32 %v0_b5f0, %v4_b614
  %v8_b624 = add i32 %v7_b624, %v2_b620
  %v3_b630 = mul i32 %v8_b624, 16777216
  %v1_b634 = and i32 %v8_b624, 65280
  store i32 %v1_b634, i32* %r0.global-to-local, align 4
  store i32 %v5_b14c, i32* %r2.global-to-local, align 4
  %v4_b640 = mul nuw nsw i32 %v1_b634, 256
  %v5_b640 = or i32 %v4_b640, %v3_b630
  store i32 %v5_b640, i32* %r1.global-to-local, align 4
  %v2_b644 = call i32 @llvm.bswap.i32(i32 %v8_b624)
  store i32 %v2_b644, i32* %r3.global-to-local, align 4
  store i1 %v7_b4b8, i1* %cpsr_z.global-to-local, align 1
  %v1_b64c = load i32, i32* @r5, align 4
  %v2_b64c = add i32 %v1_b64c, 16
  %v3_b64c = inttoptr i32 %v2_b64c to i32*
  store i32 %v2_b644, i32* %v3_b64c, align 4
  br i1 %v2_b4b8, label %dec_label_pc_b654, label %dec_label_pc_b4c0

dec_label_pc_b654:                                ; preds = %dec_label_pc_b5ec, %dec_label_pc_b4b4
  %v0_b654 = call i32 @function_fbfc()
  store i32 %v0_b654, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  %v0_b660 = load i32, i32* @sl, align 4
  %v9_b660 = icmp eq i32 %v0_b660, 65535
  store i1 %v9_b660, i1* %cpsr_z.global-to-local, align 1
  %v1_b664 = load i32, i32* @r5, align 4
  %v2_b664 = add i32 %v1_b664, 12
  %v3_b664 = inttoptr i32 %v2_b664 to i32*
  store i32 %v0_b654, i32* %v3_b664, align 4
  br i1 %v9_b660, label %dec_label_pc_b66c, label %dec_label_pc_b654.dec_label_pc_b4d0_crit_edge

dec_label_pc_b654.dec_label_pc_b4d0_crit_edge:    ; preds = %dec_label_pc_b654
  %v1_b4d4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b4d0

dec_label_pc_b66c:                                ; preds = %dec_label_pc_b654, %dec_label_pc_b4c0
  %v0_b66c = call i32 @function_fbfc()
  %v3_b674 = urem i32 %v0_b66c, 65536
  store i32 %v3_b674, i32* %r0.global-to-local, align 4
  %v3_b67815 = udiv i32 %v0_b66c, 256
  %v1_b67c = trunc i32 %v3_b67815 to i8
  %v2_b67c = load i32, i32* @r5, align 4
  %v3_b67c = add i32 %v2_b67c, 5
  %v4_b67c = inttoptr i32 %v3_b67c to i8*
  store i8 %v1_b67c, i8* %v4_b67c, align 1
  %v0_b680 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v3_b1b4, i32* %r3.global-to-local, align 4
  %v1_b688 = sub i32 999, %v0_b680
  store i32 %v1_b688, i32* %r2.global-to-local, align 4
  %v3_b68c = sdiv i32 %v1_b688, 256
  store i32 %v3_b68c, i32* %r1.global-to-local, align 4
  %v1_b690 = load i32, i32* @r4, align 4
  %v9_b690 = icmp eq i32 %v3_b1b4, %v1_b690
  store i1 %v9_b690, i1* %cpsr_z.global-to-local, align 1
  %v1_b694 = trunc i32 %v0_b680 to i8
  %v2_b694 = load i32, i32* @r5, align 4
  %v3_b694 = add i32 %v2_b694, 4
  %v4_b694 = inttoptr i32 %v3_b694 to i8*
  store i8 %v1_b694, i8* %v4_b694, align 1
  %v0_b698 = load i32, i32* %r1.global-to-local, align 4
  %v1_b698 = trunc i32 %v0_b698 to i8
  %v2_b698 = load i32, i32* @r6, align 4
  %v3_b698 = add i32 %v2_b698, 5
  %v4_b698 = inttoptr i32 %v3_b698 to i8*
  store i8 %v1_b698, i8* %v4_b698, align 1
  %v0_b69c = load i32, i32* %r2.global-to-local, align 4
  %v1_b69c = trunc i32 %v0_b69c to i8
  %v2_b69c = load i32, i32* @r6, align 4
  %v3_b69c = add i32 %v2_b69c, 4
  %v4_b69c = inttoptr i32 %v3_b69c to i8*
  store i8 %v1_b69c, i8* %v4_b69c, align 1
  %v0_b6a0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b6a0, label %dec_label_pc_b6a4, label %dec_label_pc_b66c.dec_label_pc_b4dc_crit_edge

dec_label_pc_b66c.dec_label_pc_b4dc_crit_edge:    ; preds = %dec_label_pc_b66c
  %v1_b4e0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b4dc

dec_label_pc_b6a4:                                ; preds = %dec_label_pc_b66c, %dec_label_pc_b4d0
  %v0_b6a4 = call i32 @function_fbfc()
  %v1_b6a4 = trunc i32 %v0_b6a4 to i8
  store i32 %v0_b6a4, i32* %r0.global-to-local, align 4
  store i32 %v3_b1b8, i32* %r1.global-to-local, align 4
  %v4_b6ac = sdiv i32 %v0_b6a4, 256
  store i32 %v4_b6ac, i32* %r3.global-to-local, align 4
  %v1_b6b0 = load i32, i32* @r4, align 4
  %v9_b6b0 = icmp eq i32 %v3_b1b8, %v1_b6b0
  store i1 %v9_b6b0, i1* %cpsr_z.global-to-local, align 1
  %v3_b6b4 = load i32, i32* @r5, align 4
  %v4_b6b4 = add i32 %v3_b6b4, 44
  %v5_b6b4 = inttoptr i32 %v4_b6b4 to i8*
  store i8 %v1_b6a4, i8* %v5_b6b4, align 1
  %v0_b6b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b6b8 = trunc i32 %v0_b6b8 to i8
  %v2_b6b8 = load i32, i32* @r7, align 4
  %v3_b6b8 = add i32 %v2_b6b8, 1
  %v4_b6b8 = inttoptr i32 %v3_b6b8 to i8*
  store i8 %v1_b6b8, i8* %v4_b6b8, align 1
  %v0_b6bc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b6bc, label %dec_label_pc_b6c0, label %dec_label_pc_b4e8

dec_label_pc_b6c0:                                ; preds = %dec_label_pc_b6a4, %dec_label_pc_b4dc
  %v0_b6c0 = call i32 @function_fbfc()
  %v1_b6c0 = trunc i32 %v0_b6c0 to i8
  store i32 %v0_b6c0, i32* %r0.global-to-local, align 4
  store i32 %v1_b1ac, i32* %r2.global-to-local, align 4
  %v4_b6c8 = sdiv i32 %v0_b6c0, 256
  store i32 %v4_b6c8, i32* %r3.global-to-local, align 4
  store i1 %v2_b4ec, i1* %cpsr_z.global-to-local, align 1
  %v1_b6d0 = trunc i32 %v4_b6c8 to i8
  %v2_b6d0 = load i32, i32* @r7, align 4
  %v3_b6d0 = add i32 %v2_b6d0, 3
  %v4_b6d0 = inttoptr i32 %v3_b6d0 to i8*
  store i8 %v1_b6d0, i8* %v4_b6d0, align 1
  %v0_b6d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b6d4, label %bb101, label %bb100

bb100:                                            ; preds = %dec_label_pc_b6c0
  %v1_b6d4 = load i32, i32* @r5, align 4
  %v2_b6d4 = add i32 %v1_b6d4, 16
  %v3_b6d4 = inttoptr i32 %v2_b6d4 to i32*
  %v4_b6d4 = load i32, i32* %v3_b6d4, align 4
  store i32 %v4_b6d4, i32* %r3.global-to-local, align 4
  br label %bb101

bb101:                                            ; preds = %dec_label_pc_b6c0, %bb100
  %v3_b6d8 = load i32, i32* @r7, align 4
  %v4_b6d8 = add i32 %v3_b6d8, 2
  %v5_b6d8 = inttoptr i32 %v4_b6d8 to i8*
  store i8 %v1_b6c0, i8* %v5_b6d8, align 1
  %v0_b6dc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b6dc, label %dec_label_pc_b6e4, label %bb102

bb102:                                            ; preds = %bb101
  %v1_b6dc = load i32, i32* %r3.global-to-local, align 4
  %v2_b6dc = load i32, i32* @r6, align 4
  %v3_b6dc = add i32 %v2_b6dc, 16
  %v4_b6dc = inttoptr i32 %v3_b6dc to i32*
  store i32 %v1_b6dc, i32* %v4_b6dc, align 4
  br label %dec_label_pc_b4fc

dec_label_pc_b6e4:                                ; preds = %dec_label_pc_b4e8, %bb101
  %v0_b6e4 = call i32 @function_fbfc()
  store i32 %v0_b6e4, i32* %r0.global-to-local, align 4
  store i32 %v1_b118, i32* %r3.global-to-local, align 4
  store i1 %v2_b6ec, i1* %cpsr_z.global-to-local, align 1
  %v1_b6f0 = load i32, i32* @r6, align 4
  %v2_b6f0 = add i32 %v1_b6f0, 16
  %v3_b6f0 = inttoptr i32 %v2_b6f0 to i32*
  store i32 %v0_b6e4, i32* %v3_b6f0, align 4
  br i1 %v2_b6ec, label %dec_label_pc_b508, label %dec_label_pc_b6f8

dec_label_pc_b6f8:                                ; preds = %dec_label_pc_b4fc, %dec_label_pc_b6e4
  %v0_b6f8 = load i32, i32* @r7, align 4
  %v1_b6f8 = add i32 %v0_b6f8, 8
  store i32 %v1_b6f8, i32* %r0.global-to-local, align 4
  store i32 %v5_b0f8, i32* @r1, align 4
  %v1_b700 = inttoptr i32 %v1_b6f8 to i8*
  %v2_b700 = call i32 @function_fdd8(i8* %v1_b700)
  store i32 %v2_b700, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b508

dec_label_pc_b708:                                ; preds = %dec_label_pc_b198
  %v1_b710 = add i32 %v5_b0f8, 8
  store i32 %v1_b710, i32* %r2.global-to-local, align 4
  %v1_b714 = add i32 %v5_b0f8, 52
  store i32 %v1_b714, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b474.preheader

; uselistorder directives
  uselistorder i32 %v1_b714, { 1, 0 }
  uselistorder i32 %v1_b710, { 1, 0 }
  uselistorder i32 %v4_b6c8, { 1, 0 }
  uselistorder i32 %v0_b6c0, { 0, 2, 1 }
  uselistorder i32 %v0_b6a4, { 0, 2, 1 }
  uselistorder i32 %v2_b644, { 1, 0 }
  uselistorder i32 %v8_b624, { 1, 2, 0 }
  uselistorder i32 %v0_b600, { 1, 0, 2 }
  uselistorder i32 %v1_b5cc, { 1, 2, 0 }
  uselistorder i32 %v1_b5c8, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_b56c, { 1, 0, 2 }
  uselistorder i32 %v4_b568, { 0, 2, 1 }
  uselistorder i32 %v0_b548, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_b538, { 0, 2, 1 }
  uselistorder i32 %v4_b51c, { 1, 0 }
  uselistorder i32 %v7_b4a0, { 1, 0, 2 }
  uselistorder i32 %v0_b474, { 1, 0 }
  uselistorder i1 %v7_b4b8, { 2, 1, 0 }
  uselistorder i1 %v2_b6ec, { 2, 3, 1, 0 }
  uselistorder i32 %v1_b434, { 1, 0, 2 }
  uselistorder i32 %v0_b3f8, { 1, 0, 2 }
  uselistorder i32 %v3_b2ac, { 0, 2, 1 }
  uselistorder i32 %v3_b26c, { 1, 0 }
  uselistorder i32 %tmp86, { 1, 0 }
  uselistorder i32 %v1_b224, { 1, 0 }
  uselistorder i32 %v1_b200, { 1, 0 }
  uselistorder i32 %v1_b1fc, { 0, 2, 1 }
  uselistorder i32 %v3_b1e0, { 2, 1, 0 }
  uselistorder i32 %v0_b1bc, { 1, 0, 2 }
  uselistorder i32 %v1_b1ac, { 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_b1a8, { 0, 2, 1 }
  uselistorder i32 %v0_b1a4, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_b190, { 1, 0 }
  uselistorder i1 %v7_b164, { 1, 0 }
  uselistorder i32 %v3_b160, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_b14c, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_b118, { 1, 0, 2 }
  uselistorder i32 %v5_b0f8, { 5, 4, 3, 2, 1, 0 }
  uselistorder i8 %v5_b09c, { 1, 0 }
  uselistorder i32 %v2_b02c, { 0, 3, 1, 2 }
  uselistorder i32 %v1_b010, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 36, 35, 37, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 6, 7, 4, 5, 9, 8, 10, 13, 11, 12, 14, 16, 15, 17, 18, 23, 19, 20, 21, 22, 26, 24, 25, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29 }
  uselistorder i8 47, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder label %dec_label_pc_b6f8, { 1, 0 }
  uselistorder label %dec_label_pc_b6e4, { 1, 0 }
  uselistorder label %bb101, { 1, 0 }
  uselistorder label %dec_label_pc_b5e4, { 1, 0 }
  uselistorder label %dec_label_pc_b508, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b474.preheader, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb95, { 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %.thread23, { 2, 1, 0 }
}

define i32 @function_b728(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b728:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_b72c = urem i32 %arg1, 256
  store i32 %v1_b72c, i32* @fp, align 4
  store i32 %v1_b72c, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_b744 = urem i32 %arg3, 256
  store i32 %v1_b744, i32* @r4, align 4
  %v2_b748 = call i32 @function_14094(i32 %v1_b72c, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_b754 = load i32, i32* @fp, align 4
  store i32 %v0_b754, i32* %r0.global-to-local, align 4
  %v2_b758 = call i32 @function_14094(i32 %v0_b754, i32 4)
  %v0_b75c = load i32, i32* @r5, align 4
  store i32 %v0_b75c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b76c = load i32, i32* @r4, align 4
  store i32 %v0_b76c, i32* %r0.global-to-local, align 4
  %v5_b770 = inttoptr i32 %v0_b75c to i32*
  %v6_b770 = call i32 @function_a4e8(i32 %v0_b76c, i32* %v5_b770, i32 2, i32 0)
  %v1_b77c = urem i32 %v6_b770, 256
  store i32 %v1_b77c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b788 = load i32, i32* @r5, align 4
  store i32 %v0_b788, i32* %r1.global-to-local, align 4
  %v0_b78c = load i32, i32* @r4, align 4
  store i32 %v0_b78c, i32* %r0.global-to-local, align 4
  %v6_b794 = inttoptr i32 %v0_b788 to i32*
  %v7_b794 = call i32 @function_a4e8(i32 %v0_b78c, i32* %v6_b794, i32 3, i32 65535)
  %v0_b798 = load i32, i32* @r5, align 4
  store i32 %v0_b798, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b794, i32* @r6, align 4
  %v0_b7a8 = load i32, i32* @r4, align 4
  store i32 %v0_b7a8, i32* %r0.global-to-local, align 4
  %v4_b7ac = inttoptr i32 %v0_b798 to i32*
  %v5_b7ac = call i32 @function_a4e8(i32 %v0_b7a8, i32* %v4_b7ac, i32 4, i32 64)
  %v1_b7b4 = urem i32 %v5_b7ac, 256
  store i32 %v1_b7b4, i32* %ip.global-to-local, align 4
  %v0_b7b8 = load i32, i32* @r5, align 4
  store i32 %v0_b7b8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b7c4 = load i32, i32* @r4, align 4
  store i32 %v0_b7c4, i32* %r0.global-to-local, align 4
  %v6_b7cc = inttoptr i32 %v0_b7b8 to i32*
  %v7_b7cc = call i32 @function_a4e8(i32 %v0_b7c4, i32* %v6_b7cc, i32 5, i32 1)
  %v1_b7d8 = urem i32 %v7_b7cc, 256
  store i32 %v1_b7d8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b7e0 = load i32, i32* @r5, align 4
  store i32 %v0_b7e0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b7e8 = load i32, i32* @r4, align 4
  store i32 %v0_b7e8, i32* %r0.global-to-local, align 4
  %v5_b7f0 = inttoptr i32 %v0_b7e0 to i32*
  %v6_b7f0 = call i32 @function_a4e8(i32 %v0_b7e8, i32* %v5_b7f0, i32 7, i32 65535)
  %v0_b7f4 = load i32, i32* @r5, align 4
  store i32 %v0_b7f4, i32* %r1.global-to-local, align 4
  %v3_b7f8 = mul i32 %v6_b7f0, 65536
  store i32 %v3_b7f8, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b804 = load i32, i32* @r4, align 4
  store i32 %v0_b804, i32* %r0.global-to-local, align 4
  %v4_b808 = inttoptr i32 %v0_b7f4 to i32*
  %v5_b808 = call i32 @function_a4e8(i32 %v0_b804, i32* %v4_b808, i32 11, i32 0)
  %v1_b810 = urem i32 %v5_b808, 256
  store i32 %v1_b810, i32* %ip.global-to-local, align 4
  %v0_b814 = load i32, i32* @r5, align 4
  store i32 %v0_b814, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b820 = load i32, i32* @r4, align 4
  store i32 %v0_b820, i32* %r0.global-to-local, align 4
  %v5_b828 = inttoptr i32 %v0_b814 to i32*
  %v6_b828 = call i32 @function_a4e8(i32 %v0_b820, i32* %v5_b828, i32 12, i32 1)
  %v1_b830 = urem i32 %v6_b828, 256
  store i32 %v1_b830, i32* %ip.global-to-local, align 4
  %v0_b834 = load i32, i32* @r5, align 4
  store i32 %v0_b834, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b840 = load i32, i32* @r4, align 4
  store i32 %v0_b840, i32* %r0.global-to-local, align 4
  %v5_b848 = inttoptr i32 %v0_b834 to i32*
  %v6_b848 = call i32 @function_a4e8(i32 %v0_b840, i32* %v5_b848, i32 13, i32 1)
  %v1_b850 = urem i32 %v6_b848, 256
  store i32 %v1_b850, i32* %ip.global-to-local, align 4
  %v0_b854 = load i32, i32* @r5, align 4
  store i32 %v0_b854, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b860 = load i32, i32* @r4, align 4
  store i32 %v0_b860, i32* %r0.global-to-local, align 4
  %v5_b868 = inttoptr i32 %v0_b854 to i32*
  %v6_b868 = call i32 @function_a4e8(i32 %v0_b860, i32* %v5_b868, i32 14, i32 0)
  %v1_b870 = urem i32 %v6_b868, 256
  store i32 %v1_b870, i32* %ip.global-to-local, align 4
  %v0_b874 = load i32, i32* @r5, align 4
  store i32 %v0_b874, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b880 = load i32, i32* @r4, align 4
  store i32 %v0_b880, i32* %r0.global-to-local, align 4
  %v5_b888 = inttoptr i32 %v0_b874 to i32*
  %v6_b888 = call i32 @function_a4e8(i32 %v0_b880, i32* %v5_b888, i32 15, i32 0)
  %v1_b890 = urem i32 %v6_b888, 256
  store i32 %v1_b890, i32* %ip.global-to-local, align 4
  %v0_b894 = load i32, i32* @r5, align 4
  store i32 %v0_b894, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b8a0 = load i32, i32* @r4, align 4
  store i32 %v0_b8a0, i32* %r0.global-to-local, align 4
  %v5_b8a8 = inttoptr i32 %v0_b894 to i32*
  %v6_b8a8 = call i32 @function_a4e8(i32 %v0_b8a0, i32* %v5_b8a8, i32 16, i32 0)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_b8a8, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_b8b8 = load i32, i32* @r5, align 4
  store i32 %v0_b8b8, i32* %r1.global-to-local, align 4
  %v0_b8bc = load i32, i32* @r4, align 4
  store i32 %v0_b8bc, i32* %r0.global-to-local, align 4
  %v1_b8c0 = urem i32 %v6_b8a8, 256
  store i32 %v1_b8c0, i32* @r8, align 4
  %v4_b8c4 = inttoptr i32 %v0_b8b8 to i32*
  %v5_b8c4 = call i32 @function_a4e8(i32 %v0_b8bc, i32* %v4_b8c4, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b8d0 = load i32, i32* @r5, align 4
  store i32 %v0_b8d0, i32* %r1.global-to-local, align 4
  store i32 %v5_b8c4, i32* @sb, align 4
  %v0_b8d8 = load i32, i32* @r4, align 4
  store i32 %v0_b8d8, i32* %r0.global-to-local, align 4
  %v4_b8dc = inttoptr i32 %v0_b8d0 to i32*
  %v5_b8dc = call i32 @function_a4e8(i32 %v0_b8d8, i32* %v4_b8dc, i32 1, i32 1)
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_b8e8 = urem i32 %v5_b8dc, 256
  store i32 %v1_b8e8, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_b8f8 = call i32 @function_13d90(i32 2, i32 3, i32 6)
  store i32 %v3_b8f8, i32* %r0.global-to-local, align 4
  %v0_b8fc = load i32, i32* @r7, align 4
  %v3_b8fc = udiv i32 %v0_b8fc, 65536
  store i32 %v3_b8fc, i32* %r1.global-to-local, align 4
  %v7_b900 = icmp eq i32 %v3_b8f8, -1
  store i1 %v7_b900, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b900, label %dec_label_pc_bb5c, label %dec_label_pc_b910

dec_label_pc_b910:                                ; preds = %dec_label_pc_b728
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b918 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b918, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b92c = call i32 @function_13d60(i32 %v3_b8f8, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_b92c, i32* %r0.global-to-local, align 4
  %v7_b930 = icmp eq i32 %v6_b92c, -1
  store i1 %v7_b930, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b930, label %dec_label_pc_bb54, label %dec_label_pc_b938

dec_label_pc_b938:                                ; preds = %dec_label_pc_b910
  %v0_b938 = load i32, i32* @fp, align 4
  %v2_b938 = icmp eq i32 %v0_b938, 0
  store i1 %v2_b938, i1* %cpsr_z.global-to-local, align 1
  %v0_b93c = load i32, i32* @r6, align 4
  %v3_b93c = mul i32 %v0_b93c, 65536
  store i32 %v3_b93c, i32* %r0.global-to-local, align 4
  %v3_b940 = urem i32 %v0_b93c, 65536
  store i32 %v3_b940, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_b938, 1
  br i1 %tmp72, label %.thread18, label %dec_label_pc_b964.preheader

.thread18:                                        ; preds = %dec_label_pc_b938
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_bde8

dec_label_pc_b964.preheader:                      ; preds = %dec_label_pc_b938
  %v5_b948 = load i32, i32* @r7, align 4
  %v8_b948 = udiv i32 %v5_b948, 16777216
  %tmp73 = udiv i32 %v0_b93c, 256
  %v8_b94c = urem i32 %tmp73, 256
  store i32 %v8_b94c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_ba50 = icmp ugt i32 %v0_b8fc, -65537
  %v2_ba74 = ptrtoint i32* %stack_var_-60 to i32
  %v3_ba80 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v2_bab0 = ptrtoint i32* %stack_var_-76 to i32
  %v2_bab4 = ptrtoint i32* %stack_var_-44 to i32
  %v2_bab8 = ptrtoint i32* %stack_var_-332 to i32
  %v4_bb04 = zext i8 %tmp31 to i32
  %v4_bb08 = zext i8 %tmp30 to i32
  %v4_bb14 = mul nuw nsw i32 %v4_bb08, 256
  %v4_bb24 = zext i8 %tmp to i32
  %v1_bb28 = and i32 %v4_bb24, 18
  %v2_bb2c = icmp eq i32 %v1_bb28, 18
  %v1_ba60 = mul nuw nsw i32 %v3_b8fc, 256
  %v4_ba64 = and i32 %v1_ba60, 65280
  %v5_ba64 = or i32 %v8_b948, %v4_ba64
  %v3_ba6893 = udiv i32 %v4_ba64, 256
  %v1_ba6c = trunc i32 %v3_ba6893 to i8
  %v1_bc30 = mul i32 %v0_b93c, 256
  %v4_bc38 = and i32 %v1_bc30, 65280
  %sext = mul i32 %v6_b770, 16777216
  %v4_bc48 = sdiv i32 %sext, 16777216
  %sext5 = mul i32 %v5_b7ac, 16777216
  %v4_bc6c = sdiv i32 %sext5, 16777216
  %v5_bb14 = or i32 %v4_bb04, %v4_bb14
  %v1_bb34 = and i32 %v4_bb24, 5
  %v2_bb34 = icmp eq i32 %v1_bb34, 0
  %v1_ba70 = trunc i32 %v8_b948 to i8
  %v5_bc38 = or i32 %v8_b94c, %v4_bc38
  %v1_bc58 = trunc i32 %v4_bc48 to i8
  %v1_bd38 = urem i32 %v5_b808, 2
  %tmp94 = sub nsw i32 0, %v1_bd38
  %v4_bd40 = and i32 %tmp94, 32
  %v1_bd50 = urem i32 %v6_b828, 2
  %tmp95 = sub nsw i32 0, %v1_bd50
  %v4_bd58 = and i32 %tmp95, 16
  %v1_bd68 = urem i32 %v6_b848, 2
  %tmp96 = sub nsw i32 0, %v1_bd68
  %v4_bd70 = and i32 %tmp96, 8
  %v1_bd80 = urem i32 %v6_b868, 2
  %tmp97 = sub nsw i32 0, %v1_bd80
  %v4_bd88 = and i32 %tmp97, 4
  %v1_bd98 = urem i32 %v6_b888, 2
  %tmp98 = sub nsw i32 0, %v1_bd98
  %v3_bda0 = and i32 %tmp98, 2
  br label %dec_label_pc_b964

dec_label_pc_b964:                                ; preds = %dec_label_pc_bdd4, %dec_label_pc_bb3c, %dec_label_pc_b964.preheader
  store i32 %v8_b94c, i32* %r3.global-to-local, align 4
  %v0_b970 = load i32, i32* @sb, align 4
  %v1_b970 = add i32 %v0_b970, 40
  store i32 %v1_b970, i32* @sl, align 4
  br label %dec_label_pc_b974

dec_label_pc_b974:                                ; preds = %dec_label_pc_bb48, %dec_label_pc_b964
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b980 = call i32 @function_13d90(i32 2, i32 1, i32 0)
  store i32 %v3_b980, i32* %r0.global-to-local, align 4
  %v7_b984 = icmp eq i32 %v3_b980, -1
  store i1 %v7_b984, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b980, i32* @r7, align 4
  br i1 %v7_b984, label %dec_label_pc_bdd4, label %dec_label_pc_b990

dec_label_pc_b990:                                ; preds = %dec_label_pc_b974
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_b998 = call i32 @function_133a0(i32 %v3_b980, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b9a0 = or i32 %v2_b998, 2048
  store i32 %v1_b9a0, i32* @r2, align 4
  %v0_b9a4 = load i32, i32* @r7, align 4
  store i32 %v0_b9a4, i32* %r0.global-to-local, align 4
  %v2_b9a8 = call i32 @function_133a0(i32 %v0_b9a4, i32 4)
  store i32 %v2_b9a8, i32* %r0.global-to-local, align 4
  %v3_b9ac = load i32, i32* %stack_var_-40, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_b9bc = mul i32 %v3_b9ac, 24
  store i32 %v5_b9bc, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v2_b9cc = add i32 %v5_b9bc, %arg2
  store i32 %v2_b9cc, i32* %r2.global-to-local, align 4
  %v1_b9d0 = add i32 %v2_b9cc, 20
  %v2_b9d0 = inttoptr i32 %v1_b9d0 to i8*
  %v3_b9d0 = load i8, i8* %v2_b9d0, align 1
  %v4_b9d0 = zext i8 %v3_b9d0 to i32
  store i32 %v4_b9d0, i32* %r3.global-to-local, align 4
  %v2_b9d4 = icmp ugt i8 %v3_b9d0, 30
  %v7_b9d4 = icmp eq i8 %v3_b9d0, 31
  store i1 %v7_b9d4, i1* %cpsr_z.global-to-local, align 1
  %v2_b9d8 = xor i1 %v7_b9d4, true
  %v3_b9d8 = and i1 %v2_b9d4, %v2_b9d8
  %v5_b9d8 = add i32 %v2_b9cc, 16
  %v6_b9d8 = inttoptr i32 %v5_b9d8 to i32*
  %v7_b9d8 = load i32, i32* %v6_b9d8, align 4
  br i1 %v3_b9d8, label %dec_label_pc_ba44, label %dec_label_pc_b9e4

dec_label_pc_b9e4:                                ; preds = %dec_label_pc_b990
  store i32 %v7_b9d8, i32* @r4, align 4
  %v0_b9e8 = call i32 @function_fbfc()
  store i32 %v0_b9e8, i32* %r0.global-to-local, align 4
  %v3_b9ec = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v5_b9f8 = mul i32 %v3_b9ec, 24
  %v0_b9fc = load i32, i32* @r4, align 4
  %v2_ba00 = add i32 %v5_b9f8, %arg2
  store i32 %v2_ba00, i32* %r1.global-to-local, align 4
  %v1_ba04 = and i32 %v0_b9fc, 65280
  store i32 %v1_ba04, i32* %r3.global-to-local, align 4
  %v1_b9fc = udiv i32 %v0_b9fc, 256
  %v3_ba08 = and i32 %v1_b9fc, 65280
  store i32 %v3_ba08, i32* %r2.global-to-local, align 4
  %v3_ba0c = mul i32 %v0_b9fc, 16777216
  store i32 %v3_ba0c, i32* %ip.global-to-local, align 4
  %v1_ba10 = add i32 %v2_ba00, 20
  %v2_ba10 = inttoptr i32 %v1_ba10 to i8*
  %v3_ba10 = load i8, i8* %v2_ba10, align 1
  %v4_ba10 = zext i8 %v3_ba10 to i32
  store i32 %v4_ba10, i32* %lr.global-to-local, align 4
  %v4_ba14 = mul nuw nsw i32 %v1_ba04, 256
  %v5_ba14 = or i32 %v4_ba14, %v3_ba0c
  store i32 %v5_ba14, i32* %ip.global-to-local, align 4
  %v2_ba1c = call i32 @llvm.bswap.i32(i32 %v0_b9fc)
  %v7_ba20 = lshr i32 %v0_b9e8, %v4_ba10
  %v8_ba20 = add i32 %v7_ba20, %v2_ba1c
  store i32 %v8_ba20, i32* %r2.global-to-local, align 4
  %v3_ba2c = mul i32 %v8_ba20, 16777216
  %v1_ba30 = and i32 %v8_ba20, 65280
  store i32 %v1_ba30, i32* %r0.global-to-local, align 4
  %v4_ba34 = mul nuw nsw i32 %v1_ba30, 256
  %v5_ba34 = or i32 %v4_ba34, %v3_ba2c
  store i32 %v5_ba34, i32* %r1.global-to-local, align 4
  %v2_ba3c = call i32 @llvm.bswap.i32(i32 %v8_ba20)
  br label %dec_label_pc_ba44

dec_label_pc_ba44:                                ; preds = %dec_label_pc_b990, %dec_label_pc_b9e4
  %storemerge25 = phi i32 [ %v2_ba3c, %dec_label_pc_b9e4 ], [ %v7_b9d8, %dec_label_pc_b990 ]
  store i32 %v3_b8fc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_ba50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ba50, label %dec_label_pc_bb64, label %dec_label_pc_ba58

dec_label_pc_ba58:                                ; preds = %dec_label_pc_ba44
  store i32 %v8_b948, i32* %ip.global-to-local, align 4
  store i32 %v5_ba64, i32* %r3.global-to-local, align 4
  store i32 %v3_ba6893, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ba74

dec_label_pc_ba74:                                ; preds = %dec_label_pc_bb64, %dec_label_pc_ba58
  %stack_var_-57.0 = phi i8 [ %v1_bb6c, %dec_label_pc_bb64 ], [ %v1_ba6c, %dec_label_pc_ba58 ]
  %storemerge = phi i8 [ %v1_bb64, %dec_label_pc_bb64 ], [ %v1_ba70, %dec_label_pc_ba58 ]
  store i32 %v2_ba74, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_ba7c = load i32, i32* @r7, align 4
  store i32 %v0_ba7c, i32* %r0.global-to-local, align 4
  %v4_ba80 = call i32 @function_13bec(i32 %v0_ba7c, %sockaddr* nonnull %v3_ba80, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_ba88 = call i32 @function_13760(i32* null)
  store i32 %v2_ba88, i32* %r0.global-to-local, align 4
  store i32 %v2_ba88, i32* @r4, align 4
  %v9_bae8 = icmp eq i32 %tmp32, %storemerge25
  %v4_bb0c = zext i8 %storemerge to i32
  %v4_bb10 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_bae8 to i32
  %v9_bafc = icmp eq i1 %v9_bae8, false
  %v4_bb18 = mul nuw nsw i32 %v4_bb10, 256
  %v5_bb18 = or i32 %v4_bb18, %v4_bb0c
  %v9_bb1c = icmp eq i32 %v5_bb18, %v5_bb14
  br label %dec_label_pc_baa4

dec_label_pc_ba94:                                ; preds = %.thread23, %dec_label_pc_bb04, %dec_label_pc_bb34, %bb75
  %v2_ba94 = call i32 @function_13760(i32* null)
  %v0_ba98 = load i32, i32* @r4, align 4
  %v2_ba98 = sub i32 %v2_ba94, %v0_ba98
  store i32 %v2_ba98, i32* %r0.global-to-local, align 4
  %v7_ba9c = icmp eq i32 %v2_ba98, 10
  store i1 %v7_ba9c, i1* %cpsr_z.global-to-local, align 1
  %v8_baa0 = icmp sgt i32 %v2_ba98, 10
  br i1 %v8_baa0, label %dec_label_pc_bb48, label %dec_label_pc_baa4

dec_label_pc_baa4:                                ; preds = %dec_label_pc_ba94, %dec_label_pc_ba74
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  store i32 %v2_bab0, i32* %lr.global-to-local, align 4
  store i32 %v2_bab4, i32* %ip.global-to-local, align 4
  store i32 %v2_bab8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_b8f8, i32* %r0.global-to-local, align 4
  %v7_bacc = call i32 @function_13ccc(i32 %v3_b8f8, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_bab0, i32 %v2_bab4)
  store i32 %v7_bacc, i32* %r2.global-to-local, align 4
  %v7_bad4 = icmp eq i32 %v7_bacc, -1
  store i1 %v7_bad4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_bad4, label %dec_label_pc_bb5c, label %dec_label_pc_bae0

dec_label_pc_bae0:                                ; preds = %dec_label_pc_baa4
  store i32 %tmp32, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_baf4 = icmp eq i32 %v7_bacc, 40
  store i1 %v7_baf4, i1* %cpsr_z.global-to-local, align 1
  %tmp99 = icmp ult i32 %v7_bacc, 41
  br i1 %tmp99, label %.thread23, label %bb75

.thread23:                                        ; preds = %dec_label_pc_bae0
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ba94

bb75:                                             ; preds = %dec_label_pc_bae0
  store i1 %v9_bafc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bafc, label %dec_label_pc_ba94, label %dec_label_pc_bb04

dec_label_pc_bb04:                                ; preds = %bb75
  store i32 %v4_bb08, i32* %r1.global-to-local, align 4
  store i32 %v4_bb0c, i32* %ip.global-to-local, align 4
  store i32 %v4_bb10, i32* %r2.global-to-local, align 4
  store i32 %v5_bb14, i32* %r3.global-to-local, align 4
  store i32 %v5_bb18, i32* @r5, align 4
  store i1 %v9_bb1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bb1c, label %dec_label_pc_bb24, label %dec_label_pc_ba94

dec_label_pc_bb24:                                ; preds = %dec_label_pc_bb04
  store i32 %v4_bb24, i32* %r2.global-to-local, align 4
  store i32 %v1_bb28, i32* %r3.global-to-local, align 4
  store i1 %v2_bb2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bb2c, label %dec_label_pc_bb78, label %dec_label_pc_bb34

dec_label_pc_bb34:                                ; preds = %dec_label_pc_bb24
  store i1 %v2_bb34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bb34, label %dec_label_pc_ba94, label %dec_label_pc_bb3c

dec_label_pc_bb3c:                                ; preds = %dec_label_pc_bb34
  %v0_bb3c = load i32, i32* @r7, align 4
  store i32 %v0_bb3c, i32* %r0.global-to-local, align 4
  %v1_bb40 = call i32 @function_13490(i32 %v0_bb3c)
  store i32 %v1_bb40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b964

dec_label_pc_bb48:                                ; preds = %dec_label_pc_ba94
  %v0_bb48 = load i32, i32* @r7, align 4
  store i32 %v0_bb48, i32* %r0.global-to-local, align 4
  %v1_bb4c = call i32 @function_13490(i32 %v0_bb48)
  store i32 %v1_bb4c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b974

dec_label_pc_bb54:                                ; preds = %dec_label_pc_b910
  store i32 %v3_b8f8, i32* %r0.global-to-local, align 4
  %v1_bb58 = call i32 @function_13490(i32 %v3_b8f8)
  store i32 %v1_bb58, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bb5c

dec_label_pc_bb5c:                                ; preds = %dec_label_pc_baa4, %dec_label_pc_b728, %dec_label_pc_bb54
  %v29_bb60 = phi i32 [ %v3_b8f8, %dec_label_pc_b728 ], [ %v1_bb58, %dec_label_pc_bb54 ], [ 0, %dec_label_pc_baa4 ]
  ret i32 %v29_bb60

dec_label_pc_bb64:                                ; preds = %dec_label_pc_ba44
  %v0_bb64 = call i32 @function_fbfc()
  %v1_bb64 = trunc i32 %v0_bb64 to i8
  store i32 %v0_bb64, i32* %r0.global-to-local, align 4
  %v4_bb68 = sdiv i32 %v0_bb64, 256
  store i32 %v4_bb68, i32* %r3.global-to-local, align 4
  %v1_bb6c = trunc i32 %v4_bb68 to i8
  br label %dec_label_pc_ba74

dec_label_pc_bb78:                                ; preds = %dec_label_pc_bb24
  %v3_bb78 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bb78, i32* @r4, align 4
  store i32 %v2_b748, i32* %r2.global-to-local, align 4
  %v3_bb80 = mul i32 %v3_bb78, 16
  store i32 %v3_bb80, i32* %ip.global-to-local, align 4
  %v3_bb84 = add i32 %v3_bb80, %v2_b748
  %v4_bb84 = inttoptr i32 %v3_bb84 to i32*
  store i32 %storemerge25, i32* %v4_bb84, align 4
  %v0_bb88 = load i32, i32* @r6, align 4
  %v1_bb88 = add i32 %v0_bb88, 4
  %v2_bb88 = inttoptr i32 %v1_bb88 to i32*
  %v3_bb88 = load i32, i32* %v2_bb88, align 4
  store i32 %v3_bb88, i32* %r0.global-to-local, align 4
  %v1_bb90 = and i32 %v3_bb88, 65280
  store i32 %v1_bb90, i32* %r1.global-to-local, align 4
  store i32 %v2_b748, i32* %lr.global-to-local, align 4
  %v3_bb98 = mul i32 %v3_bb88, 16777216
  %v4_bba0 = mul nuw nsw i32 %v1_bb90, 256
  %v5_bba0 = or i32 %v4_bba0, %v3_bb98
  store i32 %v5_bba0, i32* %r2.global-to-local, align 4
  %v1_bba8 = load i32, i32* %ip.global-to-local, align 4
  %v2_bba8 = add i32 %v1_bba8, %v2_b748
  store i32 %v2_bba8, i32* %ip.global-to-local, align 4
  %v2_bbac = call i32 @llvm.bswap.i32(i32 %v3_bb88)
  store i32 %v2_bbac, i32* %r3.global-to-local, align 4
  %v2_bbb0 = add i32 %v2_bba8, 4
  %v3_bbb0 = inttoptr i32 %v2_bbb0 to i32*
  store i32 %v2_bbac, i32* %v3_bbb0, align 4
  %v0_bbb4 = load i32, i32* @r6, align 4
  %v1_bbb4 = add i32 %v0_bbb4, 8
  %v2_bbb4 = inttoptr i32 %v1_bbb4 to i32*
  %v3_bbb4 = load i32, i32* %v2_bbb4, align 4
  store i32 %v3_bbb4, i32* %r0.global-to-local, align 4
  %v1_bbbc = and i32 %v3_bbb4, 65280
  store i32 %v1_bbbc, i32* %r1.global-to-local, align 4
  %v3_bbc0 = mul i32 %v3_bbb4, 16777216
  %v4_bbc8 = mul nuw nsw i32 %v1_bbbc, 256
  %v5_bbc8 = or i32 %v4_bbc8, %v3_bbc0
  store i32 %v5_bbc8, i32* %r2.global-to-local, align 4
  %v2_bbd0 = call i32 @llvm.bswap.i32(i32 %v3_bbb4)
  store i32 %v2_bbd0, i32* %r3.global-to-local, align 4
  %v1_bbd4 = load i32, i32* %ip.global-to-local, align 4
  %v2_bbd4 = add i32 %v1_bbd4, 8
  %v3_bbd4 = inttoptr i32 %v2_bbd4 to i32*
  store i32 %v2_bbd0, i32* %v3_bbd4, align 4
  %v0_bbd8 = load i32, i32* @r6, align 4
  %v1_bbd8 = inttoptr i32 %v0_bbd8 to i32*
  %v2_bbd8 = load i32, i32* %v1_bbd8, align 4
  %v3_bbdc = udiv i32 %v2_bbd8, 65536
  store i32 %v3_bbdc, i32* %r2.global-to-local, align 4
  %v3_bbe03 = udiv i32 %v2_bbd8, 16777216
  store i32 %v3_bbe03, i32* %r1.global-to-local, align 4
  %v0_bbe4 = load i32, i32* @r5, align 4
  %v3_bbe4 = sdiv i32 %v0_bbe4, 256
  store i32 %v3_bbe4, i32* %r3.global-to-local, align 4
  %v1_bbe8 = trunc i32 %v3_bbe4 to i8
  %v2_bbe8 = load i32, i32* %ip.global-to-local, align 4
  %v3_bbe8 = add i32 %v2_bbe8, 15
  %v4_bbe8 = inttoptr i32 %v3_bbe8 to i8*
  store i8 %v1_bbe8, i8* %v4_bbe8, align 1
  %v0_bbec = load i32, i32* %r1.global-to-local, align 4
  %v1_bbec = trunc i32 %v0_bbec to i8
  %v2_bbec = load i32, i32* %ip.global-to-local, align 4
  %v3_bbec = add i32 %v2_bbec, 13
  %v4_bbec = inttoptr i32 %v3_bbec to i8*
  store i8 %v1_bbec, i8* %v4_bbec, align 1
  %v0_bbf0 = load i32, i32* %r2.global-to-local, align 4
  %v1_bbf0 = trunc i32 %v0_bbf0 to i8
  %v2_bbf0 = load i32, i32* %ip.global-to-local, align 4
  %v3_bbf0 = add i32 %v2_bbf0, 12
  %v4_bbf0 = inttoptr i32 %v3_bbf0 to i8*
  store i8 %v1_bbf0, i8* %v4_bbf0, align 1
  %v0_bbf4 = load i32, i32* @r5, align 4
  %v1_bbf4 = trunc i32 %v0_bbf4 to i8
  %v2_bbf4 = load i32, i32* %ip.global-to-local, align 4
  %v3_bbf4 = add i32 %v2_bbf4, 14
  %v4_bbf4 = inttoptr i32 %v3_bbf4 to i8*
  store i8 %v1_bbf4, i8* %v4_bbf4, align 1
  %v0_bbf8 = load i32, i32* @sl, align 4
  store i32 %v0_bbf8, i32* %r0.global-to-local, align 4
  %v1_bbfc = call i32 @function_13f40(i32 %v0_bbf8)
  store i32 %v1_bbfc, i32* %r0.global-to-local, align 4
  store i32 %v2_b758, i32* %r1.global-to-local, align 4
  %v3_bc04 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bc04, i32* %r2.global-to-local, align 4
  %v2_bc08 = load i32, i32* @r4, align 4
  %v5_bc08 = mul i32 %v2_bc08, 4
  %v6_bc08 = add i32 %v5_bc08, %v2_b758
  %v7_bc08 = inttoptr i32 %v6_bc08 to i32*
  store i32 %v1_bbfc, i32* %v7_bc08, align 4
  %v0_bc0c = load i32, i32* %r1.global-to-local, align 4
  %v1_bc0c = load i32, i32* %r2.global-to-local, align 4
  %v4_bc0c = mul i32 %v1_bc0c, 4
  %v5_bc0c = add i32 %v4_bc0c, %v0_bc0c
  %v6_bc0c = inttoptr i32 %v5_bc0c to i32*
  %v7_bc0c = load i32, i32* %v6_bc0c, align 4
  store i32 %v7_bc0c, i32* @r4, align 4
  %v1_bc10 = inttoptr i32 %v7_bc0c to i8*
  %v2_bc10 = load i8, i8* %v1_bc10, align 1
  %tmp100 = urem i8 %v2_bc10, 16
  %v1_bc14 = zext i8 %tmp100 to i32
  %v1_bc18 = or i32 %v1_bc14, 64
  store i32 %v1_bc18, i32* %r3.global-to-local, align 4
  %v1_bc1c = trunc i32 %v1_bc18 to i8
  store i8 %v1_bc1c, i8* %v1_bc10, align 1
  %v0_bc20 = load i32, i32* @r4, align 4
  %v1_bc20 = inttoptr i32 %v0_bc20 to i8*
  %v2_bc20 = load i8, i8* %v1_bc20, align 1
  store i32 %v3_b940, i32* %ip.global-to-local, align 4
  %v1_bc2c = and i8 %v2_bc20, -16
  %v1_bc34 = or i8 %v1_bc2c, 5
  store i32 %v5_bc38, i32* %r0.global-to-local, align 4
  %v0_bc3c = load i32, i32* @sl, align 4
  %v3_bc3c = mul i32 %v0_bc3c, 65536
  store i32 %v3_bc3c, i32* %r2.global-to-local, align 4
  store i32 %v1_b7d8, i32* %lr.global-to-local, align 4
  store i8 %v1_bc34, i8* %v1_bc20, align 1
  store i32 %v4_bc48, i32* %r1.global-to-local, align 4
  %v0_bc4c = load i32, i32* %r2.global-to-local, align 4
  %v3_bc4c = udiv i32 %v0_bc4c, 65536
  %v1_bc50 = urem i32 %v3_bc4c, 256
  store i32 %v1_bc50, i32* %r3.global-to-local, align 4
  %v3_bc54 = udiv i32 %v0_bc4c, 16777216
  store i32 %v3_bc54, i32* %r2.global-to-local, align 4
  %v2_bc58 = load i32, i32* @r4, align 4
  %v3_bc58 = add i32 %v2_bc58, 1
  %v4_bc58 = inttoptr i32 %v3_bc58 to i8*
  store i8 %v1_bc58, i8* %v4_bc58, align 1
  %v0_bc5c = load i32, i32* %r2.global-to-local, align 4
  %v1_bc5c = load i32, i32* %r3.global-to-local, align 4
  %v4_bc5c = mul i32 %v1_bc5c, 256
  %v5_bc5c = or i32 %v4_bc5c, %v0_bc5c
  store i32 %v5_bc5c, i32* %r2.global-to-local, align 4
  %v1_bc60 = trunc i32 %v0_bc5c to i8
  %v2_bc60 = load i32, i32* @r4, align 4
  %v3_bc60 = add i32 %v2_bc60, 2
  %v4_bc60 = inttoptr i32 %v3_bc60 to i8*
  store i8 %v1_bc60, i8* %v4_bc60, align 1
  %v0_bc64 = load i32, i32* %lr.global-to-local, align 4
  %v2_bc64 = icmp eq i32 %v0_bc64, 0
  store i1 %v2_bc64, i1* %cpsr_z.global-to-local, align 1
  %v0_bc68 = load i32, i32* %r2.global-to-local, align 4
  %v3_bc68 = sdiv i32 %v0_bc68, 256
  store i32 %v3_bc68, i32* %r3.global-to-local, align 4
  store i32 %v4_bc6c, i32* %r2.global-to-local, align 4
  %v1_bc70 = trunc i32 %v3_bc68 to i8
  %v2_bc70 = load i32, i32* @r4, align 4
  %v3_bc70 = add i32 %v2_bc70, 3
  %v4_bc70 = inttoptr i32 %v3_bc70 to i8*
  store i8 %v1_bc70, i8* %v4_bc70, align 1
  %v0_bc74 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc74, label %bb77, label %bb76

bb76:                                             ; preds = %dec_label_pc_bb78
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %dec_label_pc_bb78, %bb76
  %v0_bc78 = load i32, i32* %r2.global-to-local, align 4
  %v1_bc78 = trunc i32 %v0_bc78 to i8
  %v2_bc78 = load i32, i32* @r4, align 4
  %v3_bc78 = add i32 %v2_bc78, 8
  %v4_bc78 = inttoptr i32 %v3_bc78 to i8*
  store i8 %v1_bc78, i8* %v4_bc78, align 1
  %v0_bc7c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc7c, label %.thread6, label %bb78

bb78:                                             ; preds = %bb77
  %v1_bc7c = load i32, i32* %r3.global-to-local, align 4
  %v2_bc7c = trunc i32 %v1_bc7c to i8
  %v3_bc7c = load i32, i32* @r4, align 4
  %v4_bc7c = add i32 %v3_bc7c, 6
  %v5_bc7c = inttoptr i32 %v4_bc7c to i8*
  store i8 %v2_bc7c, i8* %v5_bc7c, align 1
  %v0_bc80.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc80.pr, label %.thread6, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread6

.thread6:                                         ; preds = %bb77, %bb78, %bb79
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_bc88 = load i32, i32* @r4, align 4
  %v3_bc88 = add i32 %v2_bc88, 9
  %v4_bc88 = inttoptr i32 %v3_bc88 to i8*
  store i8 6, i8* %v4_bc88, align 1
  %v0_bc8c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc8c, label %bb81, label %bb80

bb80:                                             ; preds = %.thread6
  %v1_bc8c = load i32, i32* %r2.global-to-local, align 4
  %v2_bc8c = trunc i32 %v1_bc8c to i8
  %v3_bc8c = load i32, i32* @r4, align 4
  %v4_bc8c = add i32 %v3_bc8c, 7
  %v5_bc8c = inttoptr i32 %v4_bc8c to i8*
  store i8 %v2_bc8c, i8* %v5_bc8c, align 1
  br label %bb81

bb81:                                             ; preds = %.thread6, %bb80
  %v2_bc94 = load i32, i32* @global_var_1eadc.85, align 4
  store i32 %v2_bc94, i32* %r3.global-to-local, align 4
  %v0_bc98 = load i32, i32* %r0.global-to-local, align 4
  %v3_bc98 = sdiv i32 %v0_bc98, 256
  store i32 %v3_bc98, i32* %ip.global-to-local, align 4
  %v1_bc9c = load i32, i32* @r4, align 4
  %v2_bc9c = add i32 %v1_bc9c, 12
  %v3_bc9c = inttoptr i32 %v2_bc9c to i32*
  store i32 %v2_bc94, i32* %v3_bc9c, align 4
  %v0_bca0 = load i32, i32* %ip.global-to-local, align 4
  %v1_bca0 = trunc i32 %v0_bca0 to i8
  %v2_bca0 = load i32, i32* @r4, align 4
  %v3_bca0 = add i32 %v2_bca0, 5
  %v4_bca0 = inttoptr i32 %v3_bca0 to i8*
  store i8 %v1_bca0, i8* %v4_bca0, align 1
  %v3_bca4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bca4, i32* %r2.global-to-local, align 4
  store i32 %v2_b748, i32* %ip.global-to-local, align 4
  %v4_bcac = mul i32 %v3_bca4, 16
  %v5_bcac = add i32 %v4_bcac, %v2_b748
  %v6_bcac = inttoptr i32 %v5_bcac to i32*
  %v7_bcac = load i32, i32* %v6_bcac, align 4
  store i32 %v7_bcac, i32* %r3.global-to-local, align 4
  %v0_bcb0 = load i32, i32* %r0.global-to-local, align 4
  %v1_bcb0 = trunc i32 %v0_bcb0 to i8
  %v2_bcb0 = load i32, i32* @r4, align 4
  %v3_bcb0 = add i32 %v2_bcb0, 4
  %v4_bcb0 = inttoptr i32 %v3_bcb0 to i8*
  store i8 %v1_bcb0, i8* %v4_bcb0, align 1
  %v0_bcb4 = load i32, i32* %r3.global-to-local, align 4
  %v1_bcb4 = load i32, i32* @r4, align 4
  %v2_bcb4 = add i32 %v1_bcb4, 16
  %v3_bcb4 = inttoptr i32 %v2_bcb4 to i32*
  store i32 %v0_bcb4, i32* %v3_bcb4, align 4
  %v0_bcb8 = load i32, i32* %r2.global-to-local, align 4
  %v3_bcb8 = mul i32 %v0_bcb8, 16
  %v1_bcbc = load i32, i32* %ip.global-to-local, align 4
  %v2_bcbc = add i32 %v1_bcbc, %v3_bcb8
  store i32 %v2_bcbc, i32* %r2.global-to-local, align 4
  %v1_bcc0 = add i32 %v2_bcbc, 13
  %v2_bcc0 = inttoptr i32 %v1_bcc0 to i8*
  %v3_bcc0 = load i8, i8* %v2_bcc0, align 1
  %v4_bcc0 = zext i8 %v3_bcc0 to i32
  store i32 %v4_bcc0, i32* %r1.global-to-local, align 4
  %v1_bcc4 = add i32 %v2_bcbc, 12
  %v2_bcc4 = inttoptr i32 %v1_bcc4 to i8*
  %v3_bcc4 = load i8, i8* %v2_bcc4, align 1
  %v4_bcc4 = zext i8 %v3_bcc4 to i32
  %v4_bcc8 = mul nuw nsw i32 %v4_bcc0, 256
  %v5_bcc8 = or i32 %v4_bcc4, %v4_bcc8
  store i32 %v5_bcc8, i32* %r3.global-to-local, align 4
  %v2_bccc = load i32, i32* @r4, align 4
  %v3_bccc = add i32 %v2_bccc, 20
  %v4_bccc = inttoptr i32 %v3_bccc to i8*
  store i8 %v3_bcc4, i8* %v4_bccc, align 1
  %v0_bcd0 = load i32, i32* @r4, align 4
  %v1_bcd0 = add i32 %v0_bcd0, 20
  store i32 %v1_bcd0, i32* @r6, align 4
  %v0_bcd4 = load i32, i32* %r3.global-to-local, align 4
  %v3_bcd4 = sdiv i32 %v0_bcd4, 256
  store i32 %v3_bcd4, i32* %r3.global-to-local, align 4
  %v1_bcd8 = trunc i32 %v3_bcd4 to i8
  %v3_bcd8 = add i32 %v0_bcd0, 21
  %v4_bcd8 = inttoptr i32 %v3_bcd8 to i8*
  store i8 %v1_bcd8, i8* %v4_bcd8, align 1
  %v0_bcdc = load i32, i32* @r6, align 4
  %v1_bcdc = add i32 %v0_bcdc, 13
  %v2_bcdc = inttoptr i32 %v1_bcdc to i8*
  %v3_bcdc = load i8, i8* %v2_bcdc, align 1
  %v4_bcdc = zext i8 %v3_bcdc to i32
  store i32 %v4_bcdc, i32* %r3.global-to-local, align 4
  %v0_bce0 = load i32, i32* %r2.global-to-local, align 4
  %v1_bce0 = add i32 %v0_bce0, 8
  %v2_bce0 = inttoptr i32 %v1_bce0 to i32*
  %v3_bce0 = load i32, i32* %v2_bce0, align 4
  store i32 %v3_bce0, i32* %r1.global-to-local, align 4
  %v1_bce4 = or i32 %v4_bcdc, 1
  store i32 %v1_bce4, i32* %r3.global-to-local, align 4
  %v1_bce8 = add i32 %v0_bce0, 15
  %v2_bce8 = inttoptr i32 %v1_bce8 to i8*
  %v3_bce8 = load i8, i8* %v2_bce8, align 1
  %v4_bce8 = zext i8 %v3_bce8 to i32
  store i32 %v4_bce8, i32* %ip.global-to-local, align 4
  %v1_bcec = add i32 %v0_bce0, 14
  %v2_bcec = inttoptr i32 %v1_bcec to i8*
  %v3_bcec = load i8, i8* %v2_bcec, align 1
  %v4_bcec = zext i8 %v3_bcec to i32
  store i32 %v4_bcec, i32* %r0.global-to-local, align 4
  %v2_bcf0 = add i32 %v0_bcdc, 4
  %v3_bcf0 = inttoptr i32 %v2_bcf0 to i32*
  store i32 %v3_bce0, i32* %v3_bcf0, align 4
  %v0_bcf4 = load i32, i32* %r2.global-to-local, align 4
  %v1_bcf4 = add i32 %v0_bcf4, 4
  %v2_bcf4 = inttoptr i32 %v1_bcf4 to i32*
  %v3_bcf4 = load i32, i32* %v2_bcf4, align 4
  store i32 %v3_bcf4, i32* %lr.global-to-local, align 4
  %v0_bcf8 = load i32, i32* %r3.global-to-local, align 4
  %v1_bcf8 = trunc i32 %v0_bcf8 to i8
  %v2_bcf8 = load i32, i32* @r6, align 4
  %v3_bcf8 = add i32 %v2_bcf8, 13
  %v4_bcf8 = inttoptr i32 %v3_bcf8 to i8*
  store i8 %v1_bcf8, i8* %v4_bcf8, align 1
  %v0_bcfc = load i32, i32* @r6, align 4
  %v1_bcfc = add i32 %v0_bcfc, 12
  %v2_bcfc = inttoptr i32 %v1_bcfc to i8*
  %v3_bcfc = load i8, i8* %v2_bcfc, align 1
  %v4_bcfc = zext i8 %v3_bcfc to i32
  store i32 %v4_bcfc, i32* %r2.global-to-local, align 4
  %v1_bd00 = add i32 %v0_bcfc, 13
  %v2_bd00 = inttoptr i32 %v1_bd00 to i8*
  %v3_bd00 = load i8, i8* %v2_bd00, align 1
  %v4_bd00 = zext i8 %v3_bd00 to i32
  %v0_bd04 = load i32, i32* %r0.global-to-local, align 4
  %v1_bd04 = load i32, i32* %ip.global-to-local, align 4
  %v4_bd04 = mul i32 %v1_bd04, 256
  %v5_bd04 = or i32 %v4_bd04, %v0_bd04
  store i32 %v5_bd04, i32* %r0.global-to-local, align 4
  %tmp101 = urem i8 %v3_bcfc, 16
  %v1_bd08 = zext i8 %tmp101 to i32
  %v3_bd0c = sdiv i32 %v5_bd04, 256
  store i32 %v3_bd0c, i32* %r1.global-to-local, align 4
  %v1_bd10 = or i32 %v1_bd08, 128
  store i32 %v1_bd10, i32* %r2.global-to-local, align 4
  %v1_bd14 = or i32 %v4_bd00, 16
  store i32 %v1_bd14, i32* %r3.global-to-local, align 4
  %v1_bd18 = trunc i32 %v3_bd0c to i8
  %v3_bd18 = add i32 %v0_bcfc, 3
  %v4_bd18 = inttoptr i32 %v3_bd18 to i8*
  store i8 %v1_bd18, i8* %v4_bd18, align 1
  %v0_bd1c = load i32, i32* %lr.global-to-local, align 4
  %v1_bd1c = load i32, i32* @r6, align 4
  %v2_bd1c = add i32 %v1_bd1c, 8
  %v3_bd1c = inttoptr i32 %v2_bd1c to i32*
  store i32 %v0_bd1c, i32* %v3_bd1c, align 4
  %v0_bd20 = load i32, i32* %r2.global-to-local, align 4
  %v1_bd20 = trunc i32 %v0_bd20 to i8
  %v2_bd20 = load i32, i32* @r6, align 4
  %v3_bd20 = add i32 %v2_bd20, 12
  %v4_bd20 = inttoptr i32 %v3_bd20 to i8*
  store i8 %v1_bd20, i8* %v4_bd20, align 1
  %v0_bd24 = load i32, i32* %r3.global-to-local, align 4
  %v1_bd24 = trunc i32 %v0_bd24 to i8
  %v2_bd24 = load i32, i32* @r6, align 4
  %v3_bd24 = add i32 %v2_bd24, 13
  %v4_bd24 = inttoptr i32 %v3_bd24 to i8*
  store i8 %v1_bd24, i8* %v4_bd24, align 1
  %v0_bd28 = load i32, i32* %r0.global-to-local, align 4
  %v1_bd28 = trunc i32 %v0_bd28 to i8
  %v2_bd28 = load i32, i32* @r6, align 4
  %v3_bd28 = add i32 %v2_bd28, 2
  %v4_bd28 = inttoptr i32 %v3_bd28 to i8*
  store i8 %v1_bd28, i8* %v4_bd28, align 1
  %v0_bd2c = call i32 @function_fbfc()
  %v1_bd2c = trunc i32 %v0_bd2c to i8
  store i32 %v0_bd2c, i32* %r0.global-to-local, align 4
  store i32 %v1_b810, i32* %lr.global-to-local, align 4
  %v0_bd34 = load i32, i32* @r6, align 4
  %v1_bd34 = add i32 %v0_bd34, 13
  %v2_bd34 = inttoptr i32 %v1_bd34 to i8*
  %v3_bd34 = load i8, i8* %v2_bd34, align 1
  %v4_bd34 = zext i8 %v3_bd34 to i32
  store i32 %v1_bd38, i32* %r2.global-to-local, align 4
  %v1_bd3c = and i32 %v4_bd34, 223
  %v5_bd40 = or i32 %v1_bd3c, %v4_bd40
  store i32 %v5_bd40, i32* %r3.global-to-local, align 4
  %v1_bd44 = trunc i32 %v5_bd40 to i8
  store i8 %v1_bd44, i8* %v2_bd34, align 1
  store i32 %v1_b830, i32* %r1.global-to-local, align 4
  %v0_bd4c = load i32, i32* @r6, align 4
  %v1_bd4c = add i32 %v0_bd4c, 13
  %v2_bd4c = inttoptr i32 %v1_bd4c to i8*
  %v3_bd4c = load i8, i8* %v2_bd4c, align 1
  %v4_bd4c = zext i8 %v3_bd4c to i32
  store i32 %v1_bd50, i32* %r3.global-to-local, align 4
  %v1_bd54 = and i32 %v4_bd4c, 239
  %v5_bd58 = or i32 %v1_bd54, %v4_bd58
  store i32 %v5_bd58, i32* %r2.global-to-local, align 4
  %v1_bd5c = trunc i32 %v5_bd58 to i8
  store i8 %v1_bd5c, i8* %v2_bd4c, align 1
  store i32 %v1_b850, i32* %ip.global-to-local, align 4
  %v0_bd64 = load i32, i32* @r6, align 4
  %v1_bd64 = add i32 %v0_bd64, 13
  %v2_bd64 = inttoptr i32 %v1_bd64 to i8*
  %v3_bd64 = load i8, i8* %v2_bd64, align 1
  %v4_bd64 = zext i8 %v3_bd64 to i32
  store i32 %v1_bd68, i32* %r2.global-to-local, align 4
  %v1_bd6c = and i32 %v4_bd64, 247
  %v5_bd70 = or i32 %v1_bd6c, %v4_bd70
  store i32 %v5_bd70, i32* %r3.global-to-local, align 4
  %v1_bd74 = trunc i32 %v5_bd70 to i8
  store i8 %v1_bd74, i8* %v2_bd64, align 1
  %v0_bd7c = load i32, i32* @r6, align 4
  %v1_bd7c = add i32 %v0_bd7c, 13
  %v2_bd7c = inttoptr i32 %v1_bd7c to i8*
  %v3_bd7c = load i8, i8* %v2_bd7c, align 1
  %v4_bd7c = zext i8 %v3_bd7c to i32
  store i32 %v1_bd80, i32* %r3.global-to-local, align 4
  %v1_bd84 = and i32 %v4_bd7c, 251
  %v5_bd88 = or i32 %v1_bd84, %v4_bd88
  store i32 %v5_bd88, i32* %r2.global-to-local, align 4
  %v1_bd8c = trunc i32 %v5_bd88 to i8
  store i8 %v1_bd8c, i8* %v2_bd7c, align 1
  store i32 %v1_b890, i32* %r1.global-to-local, align 4
  %v0_bd94 = load i32, i32* @r6, align 4
  %v1_bd94 = add i32 %v0_bd94, 13
  %v2_bd94 = inttoptr i32 %v1_bd94 to i8*
  %v3_bd94 = load i8, i8* %v2_bd94, align 1
  %v4_bd94 = zext i8 %v3_bd94 to i32
  store i32 %v1_bd98, i32* %r2.global-to-local, align 4
  %v1_bd9c = and i32 %v4_bd94, 253
  %v4_bda0 = or i32 %v1_bd9c, %v3_bda0
  store i32 %v4_bda0, i32* %r3.global-to-local, align 4
  %v1_bda4 = trunc i32 %v4_bda0 to i8
  store i8 %v1_bda4, i8* %v2_bd94, align 1
  %v0_bda8 = load i32, i32* @r6, align 4
  %v1_bda8 = add i32 %v0_bda8, 13
  %v2_bda8 = inttoptr i32 %v1_bda8 to i8*
  %v3_bda8 = load i8, i8* %v2_bda8, align 1
  %v4_bda8 = zext i8 %v3_bda8 to i32
  %v0_bdac = load i32, i32* @r8, align 4
  %v1_bdac = urem i32 %v0_bdac, 2
  %v1_bdb0 = and i32 %v4_bda8, 254
  store i32 %v1_bdb0, i32* %r2.global-to-local, align 4
  %v4_bdb427 = udiv i32 %v0_bd2c, 256
  %v2_bdb8 = or i32 %v1_bdb0, %v1_bdac
  store i32 %v2_bdb8, i32* %r3.global-to-local, align 4
  %v1_bdbc = trunc i32 %v4_bdb427 to i8
  %v3_bdbc = add i32 %v0_bda8, 15
  %v4_bdbc = inttoptr i32 %v3_bdbc to i8*
  store i8 %v1_bdbc, i8* %v4_bdbc, align 1
  %v3_bdc0 = load i32, i32* @r6, align 4
  %v4_bdc0 = add i32 %v3_bdc0, 14
  %v5_bdc0 = inttoptr i32 %v4_bdc0 to i8*
  store i8 %v1_bd2c, i8* %v5_bdc0, align 1
  %v0_bdc4 = load i32, i32* %r3.global-to-local, align 4
  %v1_bdc4 = trunc i32 %v0_bdc4 to i8
  %v2_bdc4 = load i32, i32* @r6, align 4
  %v3_bdc4 = add i32 %v2_bdc4, 13
  %v4_bdc4 = inttoptr i32 %v3_bdc4 to i8*
  store i8 %v1_bdc4, i8* %v4_bdc4, align 1
  %v0_bdc8 = load i32, i32* @r4, align 4
  %v1_bdc8 = add i32 %v0_bdc8, 40
  store i32 %v1_bdc8, i32* %r0.global-to-local, align 4
  %v0_bdcc = load i32, i32* @sb, align 4
  store i32 %v0_bdcc, i32* @r1, align 4
  %v1_bdd0 = inttoptr i32 %v1_bdc8 to i8*
  %v2_bdd0 = call i32 @function_fdd8(i8* %v1_bdd0)
  store i32 %v2_bdd0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bdd4

dec_label_pc_bdd4:                                ; preds = %dec_label_pc_b974, %bb81
  %v3_bdd4 = load i32, i32* %stack_var_-40, align 4
  %v1_bdd8 = add i32 %v3_bdd4, 1
  store i32 %v1_bdd8, i32* %r3.global-to-local, align 4
  %v1_bddc = load i32, i32* @fp, align 4
  %v9_bddc = icmp eq i32 %v1_bdd8, %v1_bddc
  store i1 %v9_bddc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bdd8, i32* %stack_var_-40, align 4
  %v5_bde4 = icmp slt i32 %v1_bdd8, %v1_bddc
  br i1 %v5_bde4, label %dec_label_pc_b964, label %dec_label_pc_bde8

dec_label_pc_bde8:                                ; preds = %dec_label_pc_bdd4, %.thread18
  %v0_bdf012 = phi i32 [ %v0_b938, %.thread18 ], [ %v1_bddc, %dec_label_pc_bdd4 ]
  %v0_bde8 = load i32, i32* @sb, align 4
  %v1_bde8 = add i32 %v0_bde8, 40
  store i32 %v1_bde8, i32* @sl, align 4
  %v1_bdec = add i32 %v0_bde8, 20
  store i32 %v1_bdec, i32* @r7, align 4
  %v2_be3c = icmp eq i32 %v1_b8e8, 0
  %v6_be1c = inttoptr i32 %v2_b758 to i32*
  %v3_be24 = icmp eq i32 %v3_b940, 65535
  br label %dec_label_pc_bdf0

dec_label_pc_bdf0:                                ; preds = %dec_label_pc_be4c, %dec_label_pc_bde8
  %v0_bdf0 = phi i32 [ %v1_bf2c, %dec_label_pc_be4c ], [ %v0_bdf012, %dec_label_pc_bde8 ]
  %v2_bdf0 = icmp eq i32 %v0_bdf0, 0
  store i1 %v2_bdf0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp82 = icmp slt i32 %v0_bdf0, 1
  br label %dec_label_pc_bdf8

dec_label_pc_bdf8:                                ; preds = %dec_label_pc_bdf8, %dec_label_pc_bdf0
  br i1 %tmp82, label %dec_label_pc_bdf8, label %dec_label_pc_bdfc

dec_label_pc_bdfc:                                ; preds = %dec_label_pc_bdf8
  %v0_bdfc = load i32, i32* @r7, align 4
  %tmp83 = mul i32 %v0_bdfc, 256
  %v1_be04 = and i32 %tmp83, 65280
  %tmp84 = udiv i32 %v0_bdfc, 256
  %v4_be08 = urem i32 %tmp84, 256
  %v5_be08 = or i32 %v4_be08, %v1_be04
  store i32 %v5_be08, i32* @r8, align 4
  store i32 %v2_b758, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_b940, i32* %ip.global-to-local, align 4
  %v7_be1c = load i32, i32* %v6_be1c, align 4
  store i32 %v7_be1c, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_be24, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_be30 = add i32 %v7_be1c, 20
  store i32 %v1_be30, i32* @r5, align 4
  br i1 %v3_be24, label %dec_label_pc_bf58, label %dec_label_pc_be38

dec_label_pc_be38:                                ; preds = %dec_label_pc_bf38, %dec_label_pc_bdfc
  %v0_be40 = phi i32 [ %v7_bf44, %dec_label_pc_bf38 ], [ %v7_be1c, %dec_label_pc_bdfc ]
  store i32 %v1_b8e8, i32* %lr.global-to-local, align 4
  store i1 %v2_be3c, i1* %cpsr_z.global-to-local, align 1
  %v1_be40 = add i32 %v0_be40, 40
  store i32 %v1_be40, i32* %r0.global-to-local, align 4
  %v0_be44 = load i32, i32* @sb, align 4
  store i32 %v0_be44, i32* @r1, align 4
  br i1 %v2_be3c, label %dec_label_pc_be4c, label %dec_label_pc_bf7c

dec_label_pc_be4c:                                ; preds = %dec_label_pc_be38, %dec_label_pc_bf58, %dec_label_pc_bf7c
  %v2_be4c = phi i32 [ %v0_be40, %dec_label_pc_be38 ], [ %v0_bf70, %dec_label_pc_bf58 ], [ %v2_be4c.pre, %dec_label_pc_bf7c ]
  %v0_be4c = load i32, i32* @r6, align 4
  %v1_be4c = trunc i32 %v0_be4c to i8
  %v3_be4c = add i32 %v2_be4c, 10
  %v4_be4c = inttoptr i32 %v3_be4c to i8*
  store i8 %v1_be4c, i8* %v4_be4c, align 1
  %v0_be50 = load i32, i32* @r6, align 4
  %v1_be50 = trunc i32 %v0_be50 to i8
  %v2_be50 = load i32, i32* @r4, align 4
  %v3_be50 = add i32 %v2_be50, 11
  %v4_be50 = inttoptr i32 %v3_be50 to i8*
  store i8 %v1_be50, i8* %v4_be50, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_be58 = load i32, i32* @r4, align 4
  store i32 %v0_be58, i32* @r0, align 4
  %v2_be5c = call i32 @function_e424(i32 %v0_be58, i32 20)
  %v3_be5c = trunc i32 %v2_be5c to i8
  store i32 %v2_be5c, i32* %r0.global-to-local, align 4
  %v3_be60 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_b748, i32* %r2.global-to-local, align 4
  %v3_be68 = mul i32 %v3_be60, 16
  %v2_be6c = add i32 %v3_be68, %v2_b748
  store i32 %v2_be6c, i32* %r1.global-to-local, align 4
  %v1_be70 = add i32 %v2_be6c, 4
  %v2_be70 = inttoptr i32 %v1_be70 to i32*
  %v3_be70 = load i32, i32* %v2_be70, align 4
  %v3_be74 = mul i32 %v3_be70, 65536
  store i32 %v3_be74, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_be70, 256
  %v1_be7c = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_be70, 256
  %v4_be80 = urem i32 %tmp86, 256
  %v5_be80 = or i32 %v4_be80, %v1_be7c
  store i32 %v5_be80, i32* %r2.global-to-local, align 4
  %v1_be84 = add i32 %v3_be70, 1
  store i32 %v1_be84, i32* %r3.global-to-local, align 4
  store i32 %v1_be84, i32* %v2_be70, align 4
  %v0_be8c = load i32, i32* %r2.global-to-local, align 4
  %v1_be8c = load i32, i32* @r5, align 4
  %v2_be8c = add i32 %v1_be8c, 4
  %v3_be8c = inttoptr i32 %v2_be8c to i32*
  store i32 %v0_be8c, i32* %v3_be8c, align 4
  %v0_be90 = load i32, i32* %r1.global-to-local, align 4
  %v1_be90 = add i32 %v0_be90, 8
  %v2_be90 = inttoptr i32 %v1_be90 to i32*
  %v3_be90 = load i32, i32* %v2_be90, align 4
  %tmp87 = mul i32 %v3_be90, 256
  %v1_be9c = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_be90, 256
  %v4_bea0 = urem i32 %tmp88, 256
  %v5_bea0 = or i32 %v4_bea0, %v1_be9c
  store i32 %v5_bea0, i32* %r2.global-to-local, align 4
  %v4_bea428 = udiv i32 %v2_be5c, 256
  %v1_bea8 = trunc i32 %v4_bea428 to i8
  %v2_bea8 = load i32, i32* @r4, align 4
  %v3_bea8 = add i32 %v2_bea8, 11
  %v4_bea8 = inttoptr i32 %v3_bea8 to i8*
  store i8 %v1_bea8, i8* %v4_bea8, align 1
  %v3_beac = load i32, i32* @r4, align 4
  %v4_beac = add i32 %v3_beac, 10
  %v5_beac = inttoptr i32 %v4_beac to i8*
  store i8 %v3_be5c, i8* %v5_beac, align 1
  %v0_beb0 = load i32, i32* %r2.global-to-local, align 4
  %v1_beb0 = load i32, i32* @r5, align 4
  %v2_beb0 = add i32 %v1_beb0, 8
  %v3_beb0 = inttoptr i32 %v2_beb0 to i32*
  store i32 %v0_beb0, i32* %v3_beb0, align 4
  %v0_beb4 = load i32, i32* @r5, align 4
  store i32 %v0_beb4, i32* @r1, align 4
  %v0_beb8 = load i32, i32* @r8, align 4
  store i32 %v0_beb8, i32* %r2.global-to-local, align 4
  %v0_bebc = load i32, i32* @r7, align 4
  store i32 %v0_bebc, i32* %r3.global-to-local, align 4
  %v0_bec0 = load i32, i32* @r4, align 4
  store i32 %v0_bec0, i32* %r0.global-to-local, align 4
  %v0_bec4 = load i32, i32* @r6, align 4
  %v1_bec4 = trunc i32 %v0_bec4 to i8
  %v3_bec4 = add i32 %v0_beb4, 16
  %v4_bec4 = inttoptr i32 %v3_bec4 to i8*
  store i8 %v1_bec4, i8* %v4_bec4, align 1
  %v0_bec8 = load i32, i32* @r6, align 4
  %v1_bec8 = trunc i32 %v0_bec8 to i8
  %v2_bec8 = load i32, i32* @r5, align 4
  %v3_bec8 = add i32 %v2_bec8, 17
  %v4_bec8 = inttoptr i32 %v3_bec8 to i8*
  store i8 %v1_bec8, i8* %v4_bec8, align 1
  %v4_becc = call i32 @function_e480(i32 %v0_bec0, i32 %v0_beb4, i32 %v0_beb8, i32 %v0_bebc)
  %v5_becc = trunc i32 %v4_becc to i8
  store i32 %v4_becc, i32* %r0.global-to-local, align 4
  %v4_bed029 = udiv i32 %v4_becc, 256
  %v1_bed4 = trunc i32 %v4_bed029 to i8
  %v2_bed4 = load i32, i32* @r5, align 4
  %v3_bed4 = add i32 %v2_bed4, 17
  %v4_bed4 = inttoptr i32 %v3_bed4 to i8*
  store i8 %v1_bed4, i8* %v4_bed4, align 1
  %v3_bed8 = load i32, i32* @r5, align 4
  %v4_bed8 = add i32 %v3_bed8, 16
  %v5_bed8 = inttoptr i32 %v4_bed8 to i8*
  store i8 %v5_becc, i8* %v5_bed8, align 1
  %v3_bedc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bedc, i32* %r3.global-to-local, align 4
  %v0_bee0 = load i32, i32* @r4, align 4
  %v1_bee0 = add i32 %v0_bee0, 20
  %v2_bee0 = inttoptr i32 %v1_bee0 to i32*
  %v3_bee0 = load i32, i32* %v2_bee0, align 4
  %v5_bee8 = mul i32 %v3_bedc, 24
  %v3_bef0 = udiv i32 %v3_bee0, 65536
  store i32 %v3_bef0, i32* %r2.global-to-local, align 4
  %v2_bef4 = add i32 %v5_bee8, %arg2
  store i32 %v2_bef4, i32* %ip.global-to-local, align 4
  %v3_bef84 = udiv i32 %v3_bee0, 16777216
  %v1_befc = trunc i32 %v3_bef84 to i8
  %v3_befc = add i32 %v2_bef4, 3
  %v4_befc = inttoptr i32 %v3_befc to i8*
  store i8 %v1_befc, i8* %v4_befc, align 1
  %v0_bf00 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf00 = trunc i32 %v0_bf00 to i8
  %v2_bf00 = load i32, i32* %ip.global-to-local, align 4
  %v3_bf00 = add i32 %v2_bf00, 2
  %v4_bf00 = inttoptr i32 %v3_bf00 to i8*
  store i8 %v1_bf00, i8* %v4_bf00, align 1
  %v0_bf04 = load i32, i32* @r4, align 4
  store i32 %v0_bf04, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_b8f8, i32* %r0.global-to-local, align 4
  %v0_bf10 = load i32, i32* @sl, align 4
  store i32 %v0_bf10, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_bf18 = load i32, i32* %ip.global-to-local, align 4
  %v6_bf20 = inttoptr i32 %v0_bf04 to i32*
  %v7_bf20 = call i32 @function_13d2c(i32 %v3_b8f8, i32* %v6_bf20, i32 %v0_bf10, i32 16384, i32 %v0_bf18, i32 16)
  %v3_bf24 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bf24, i32* %r3.global-to-local, align 4
  %v1_bf28 = add i32 %v3_bf24, 1
  store i32 %v1_bf28, i32* %r0.global-to-local, align 4
  %v1_bf2c = load i32, i32* @fp, align 4
  %v9_bf2c = icmp eq i32 %v1_bf28, %v1_bf2c
  store i1 %v9_bf2c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bf28, i32* %stack_var_-40, align 4
  %v6_bf34 = icmp slt i32 %v1_bf28, %v1_bf2c
  br i1 %v6_bf34, label %dec_label_pc_bf38, label %dec_label_pc_bdf0

dec_label_pc_bf38:                                ; preds = %dec_label_pc_be4c
  store i32 %v2_b758, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_b940, i32* %ip.global-to-local, align 4
  %v4_bf44 = mul i32 %v1_bf28, 4
  %v5_bf44 = add i32 %v4_bf44, %v2_b758
  %v6_bf44 = inttoptr i32 %v5_bf44 to i32*
  %v7_bf44 = load i32, i32* %v6_bf44, align 4
  store i32 %v7_bf44, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_be24, i1* %cpsr_z.global-to-local, align 1
  %v1_bf50 = add i32 %v7_bf44, 20
  store i32 %v1_bf50, i32* @r5, align 4
  br i1 %v3_be24, label %dec_label_pc_bf58, label %dec_label_pc_be38

dec_label_pc_bf58:                                ; preds = %dec_label_pc_bf38, %dec_label_pc_bdfc
  %v0_bf58 = call i32 @function_fbfc()
  %v1_bf58 = trunc i32 %v0_bf58 to i8
  store i32 %v1_b8e8, i32* %lr.global-to-local, align 4
  %v4_bf60 = sdiv i32 %v0_bf58, 256
  store i32 %v4_bf60, i32* %r3.global-to-local, align 4
  store i1 %v2_be3c, i1* %cpsr_z.global-to-local, align 1
  %v3_bf68 = load i32, i32* @r4, align 4
  %v4_bf68 = add i32 %v3_bf68, 4
  %v5_bf68 = inttoptr i32 %v4_bf68 to i8*
  store i8 %v1_bf58, i8* %v5_bf68, align 1
  %v0_bf6c = load i32, i32* %r3.global-to-local, align 4
  %v1_bf6c = trunc i32 %v0_bf6c to i8
  %v2_bf6c = load i32, i32* @r4, align 4
  %v3_bf6c = add i32 %v2_bf6c, 5
  %v4_bf6c = inttoptr i32 %v3_bf6c to i8*
  store i8 %v1_bf6c, i8* %v4_bf6c, align 1
  %v0_bf70 = load i32, i32* @r4, align 4
  %v1_bf70 = add i32 %v0_bf70, 40
  store i32 %v1_bf70, i32* %r0.global-to-local, align 4
  %v0_bf74 = load i32, i32* @sb, align 4
  store i32 %v0_bf74, i32* @r1, align 4
  %v0_bf78 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bf78, label %dec_label_pc_be4c, label %dec_label_pc_bf7c

dec_label_pc_bf7c:                                ; preds = %dec_label_pc_be38, %dec_label_pc_bf58
  %v0_bf7c = phi i32 [ %v1_be40, %dec_label_pc_be38 ], [ %v1_bf70, %dec_label_pc_bf58 ]
  %v1_bf7c = inttoptr i32 %v0_bf7c to i8*
  %v2_bf7c = call i32 @function_fdd8(i8* %v1_bf7c)
  store i32 %v2_bf7c, i32* %r0.global-to-local, align 4
  %v2_be4c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_be4c

; uselistorder directives
  uselistorder i32 %v0_bf70, { 1, 0 }
  uselistorder i32 %v7_bf44, { 1, 2, 0 }
  uselistorder i32 %v1_bf2c, { 1, 2, 0 }
  uselistorder i32 %v1_bf28, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_becc, { 0, 2, 1 }
  uselistorder i32 %v0_beb4, { 1, 0, 2 }
  uselistorder i32 %v3_be90, { 1, 0 }
  uselistorder i32 %v3_be70, { 3, 2, 0, 1 }
  uselistorder i32 %v2_be5c, { 0, 2, 1 }
  uselistorder i32 %v0_be40, { 1, 0 }
  uselistorder i32 %v0_bdfc, { 1, 0 }
  uselistorder i32 %v0_bdf0, { 1, 0 }
  uselistorder i1 %v3_be24, { 2, 3, 1, 0 }
  uselistorder i32 %v1_bdd8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bd2c, { 0, 2, 1 }
  uselistorder i32 %v3_bd0c, { 1, 0 }
  uselistorder i32 %v0_bce0, { 1, 0, 2 }
  uselistorder i32 %v3_bcd4, { 1, 0 }
  uselistorder i32 %v3_bc68, { 1, 0 }
  uselistorder i32 %v0_bc5c, { 1, 0 }
  uselistorder i32 %v3_bbe4, { 1, 0 }
  uselistorder i32 %v2_bbd0, { 1, 0 }
  uselistorder i32 %v3_bbb4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_bbac, { 1, 0 }
  uselistorder i32 %v3_bb88, { 1, 0, 2, 3 }
  uselistorder i32 %v3_bb80, { 1, 0 }
  uselistorder i32 %v4_bb68, { 1, 0 }
  uselistorder i32 %v0_bb64, { 0, 2, 1 }
  uselistorder i1 %v7_bad4, { 1, 0 }
  uselistorder i32 %v7_bacc, { 0, 2, 1, 3 }
  uselistorder i32 %v5_bb18, { 1, 0 }
  uselistorder i1 %v9_bafc, { 1, 0 }
  uselistorder i32 %v4_bb10, { 1, 0 }
  uselistorder i32 %v4_bb0c, { 1, 0 }
  uselistorder i32 %v8_ba20, { 1, 2, 0, 3 }
  uselistorder i32 %v3_ba0c, { 1, 0 }
  uselistorder i32 %v0_b9fc, { 2, 0, 1, 3 }
  uselistorder i1 %v7_b984, { 1, 0 }
  uselistorder i32 %v3_b980, { 2, 1, 0, 3 }
  uselistorder i32 %v1_bd98, { 1, 0 }
  uselistorder i32 %v1_bd80, { 1, 0 }
  uselistorder i32 %v1_bd68, { 1, 0 }
  uselistorder i32 %v1_bd50, { 1, 0 }
  uselistorder i32 %v1_bd38, { 1, 0 }
  uselistorder i32 %v5_bb14, { 1, 0 }
  uselistorder i32 %v3_ba6893, { 1, 0 }
  uselistorder i1 %v2_bb2c, { 1, 0 }
  uselistorder i32 %v1_bb28, { 1, 0 }
  uselistorder i32 %v4_bb24, { 2, 0, 1 }
  uselistorder i32 %v4_bb08, { 1, 0 }
  uselistorder i1 %v3_ba50, { 1, 0 }
  uselistorder i32 %v8_b94c, { 2, 1, 0 }
  uselistorder i32 %v8_b948, { 1, 2, 0 }
  uselistorder i32 %v3_b940, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v0_b93c, { 0, 1, 3, 2 }
  uselistorder i1 %v7_b930, { 1, 0 }
  uselistorder i1 %v7_b900, { 1, 0 }
  uselistorder i32 %v3_b8fc, { 2, 0, 1 }
  uselistorder i32 %v3_b8f8, { 5, 6, 1, 3, 4, 7, 8, 2, 0, 9 }
  uselistorder i32 %v1_b8e8, { 1, 3, 2, 0 }
  uselistorder i32 %v1_b890, { 1, 0 }
  uselistorder i32 %v1_b850, { 1, 0 }
  uselistorder i32 %v1_b830, { 1, 0 }
  uselistorder i32 %v1_b810, { 1, 0 }
  uselistorder i32 %v1_b7d8, { 1, 0 }
  uselistorder i32 %v2_b758, { 0, 4, 5, 2, 1, 3 }
  uselistorder i32 %v2_b748, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_b72c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 44, 43, 45, 47, 46, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 6, 5, 10, 7, 8, 11, 9, 19, 12, 13, 14, 15, 16, 17, 18, 23, 20, 21, 22, 24, 26, 25, 28, 27, 31, 29, 32, 33, 30, 34, 36, 35, 37, 38, 40, 39, 44, 41, 42, 43, 45, 47, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 18, 0, 19, 20, 17, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 %arg2, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_bf7c, { 1, 0 }
  uselistorder label %dec_label_pc_be4c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_bdd4, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %.thread6, { 2, 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %dec_label_pc_bb5c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ba94, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_ba44, { 1, 0 }
}

define i32 @function_bf88(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_bf88:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_bf8c = urem i32 %arg1, 256
  store i32 %v1_bf8c, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_bfa4 = urem i32 %arg3, 256
  store i32 %v1_bfa4, i32* @r4, align 4
  %v2_bfa8 = call i32 @function_14094(i32 %v1_bf8c, i32 4)
  %v0_bfac = load i32, i32* @r5, align 4
  store i32 %v0_bfac, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bfbc = load i32, i32* @r4, align 4
  %v5_bfc0 = inttoptr i32 %v0_bfac to i32*
  %v6_bfc0 = call i32 @function_a4e8(i32 %v0_bfbc, i32* %v5_bfc0, i32 2, i32 0)
  %v1_bfcc = urem i32 %v6_bfc0, 256
  store i32 %v1_bfcc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bfd8 = load i32, i32* @r5, align 4
  store i32 %v0_bfd8, i32* %r1.global-to-local, align 4
  %v0_bfdc = load i32, i32* @r4, align 4
  %v5_bfe0 = trunc i32 %v6_bfc0 to i8
  %v6_bfe4 = inttoptr i32 %v0_bfd8 to i32*
  %v7_bfe4 = call i32 @function_a4e8(i32 %v0_bfdc, i32* %v6_bfe4, i32 3, i32 65535)
  %v0_bfe8 = load i32, i32* @r5, align 4
  store i32 %v0_bfe8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_bfe4, i32* @r8, align 4
  %v0_bff8 = load i32, i32* @r4, align 4
  %v4_bffc = inttoptr i32 %v0_bfe8 to i32*
  %v5_bffc = call i32 @function_a4e8(i32 %v0_bff8, i32* %v4_bffc, i32 4, i32 64)
  %v1_c004 = urem i32 %v5_bffc, 256
  store i32 %v1_c004, i32* %ip.global-to-local, align 4
  %v0_c008 = load i32, i32* @r5, align 4
  store i32 %v0_c008, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c014 = load i32, i32* @r4, align 4
  %v6_c01c = inttoptr i32 %v0_c008 to i32*
  %v7_c01c = call i32 @function_a4e8(i32 %v0_c014, i32* %v6_c01c, i32 5, i32 0)
  %v1_c028 = urem i32 %v7_c01c, 256
  store i32 %v1_c028, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c034 = load i32, i32* @r5, align 4
  store i32 %v0_c034, i32* %r1.global-to-local, align 4
  %v0_c038 = load i32, i32* @r4, align 4
  %v5_c040 = inttoptr i32 %v0_c034 to i32*
  %v6_c040 = call i32 @function_a4e8(i32 %v0_c038, i32* %v5_c040, i32 6, i32 65535)
  %v0_c048 = load i32, i32* @r5, align 4
  store i32 %v0_c048, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_c040, i32* @r7, align 4
  %v0_c058 = load i32, i32* @r4, align 4
  %v4_c05c = inttoptr i32 %v0_c048 to i32*
  %v5_c05c = call i32 @function_a4e8(i32 %v0_c058, i32* %v4_c05c, i32 7, i32 65535)
  %v0_c064 = load i32, i32* @r5, align 4
  store i32 %v0_c064, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_c05c, i32* @r6, align 4
  %v0_c074 = load i32, i32* @r4, align 4
  %v4_c078 = inttoptr i32 %v0_c064 to i32*
  %v5_c078 = call i32 @function_a4e8(i32 %v0_c074, i32* %v4_c078, i32 17, i32 65535)
  %v0_c084 = load i32, i32* @r5, align 4
  store i32 %v0_c084, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_c090 = load i32, i32* @r4, align 4
  %v5_c094 = inttoptr i32 %v0_c084 to i32*
  %v6_c094 = call i32 @function_a4e8(i32 %v0_c090, i32* %v5_c094, i32 18, i32 65535)
  %v0_c098 = load i32, i32* @r5, align 4
  store i32 %v0_c098, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c0a8 = load i32, i32* @r4, align 4
  %v5_c0ac = inttoptr i32 %v0_c098 to i32*
  %v6_c0ac = call i32 @function_a4e8(i32 %v0_c0a8, i32* %v5_c0ac, i32 11, i32 0)
  %v0_c0b0 = load i32, i32* @r5, align 4
  store i32 %v0_c0b0, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c0c0 = load i32, i32* @r4, align 4
  %v5_c0c4 = inttoptr i32 %v0_c0b0 to i32*
  %v6_c0c4 = call i32 @function_a4e8(i32 %v0_c0c0, i32* %v5_c0c4, i32 12, i32 1)
  %v0_c0c8 = load i32, i32* @r5, align 4
  store i32 %v0_c0c8, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c0d8 = load i32, i32* @r4, align 4
  %v5_c0dc = inttoptr i32 %v0_c0c8 to i32*
  %v6_c0dc = call i32 @function_a4e8(i32 %v0_c0d8, i32* %v5_c0dc, i32 13, i32 0)
  %v0_c0e0 = load i32, i32* @r5, align 4
  store i32 %v0_c0e0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c0f0 = load i32, i32* @r4, align 4
  %v5_c0f4 = inttoptr i32 %v0_c0e0 to i32*
  %v6_c0f4 = call i32 @function_a4e8(i32 %v0_c0f0, i32* %v5_c0f4, i32 14, i32 0)
  %v0_c0f8 = load i32, i32* @r5, align 4
  store i32 %v0_c0f8, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c108 = load i32, i32* @r4, align 4
  %v5_c10c = inttoptr i32 %v0_c0f8 to i32*
  %v6_c10c = call i32 @function_a4e8(i32 %v0_c108, i32* %v5_c10c, i32 15, i32 0)
  %v0_c110 = load i32, i32* @r5, align 4
  store i32 %v0_c110, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c120 = load i32, i32* @r4, align 4
  %v5_c124 = inttoptr i32 %v0_c110 to i32*
  %v6_c124 = call i32 @function_a4e8(i32 %v0_c120, i32* %v5_c124, i32 16, i32 0)
  %v0_c128 = load i32, i32* @r5, align 4
  store i32 %v0_c128, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_c138 = load i32, i32* @r4, align 4
  %v5_c13c = inttoptr i32 %v0_c128 to i32*
  %v6_c13c = call i32 @function_a4e8(i32 %v0_c138, i32* %v5_c13c, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c14c = load i32, i32* @r5, align 4
  store i32 %v0_c14c, i32* %r1.global-to-local, align 4
  %v0_c150 = load i32, i32* @r4, align 4
  %v4_c154 = inttoptr i32 %v0_c14c to i32*
  %v5_c154 = call i32 @function_a4e8(i32 %v0_c150, i32* %v4_c154, i32 1, i32 1)
  %v2_c160 = load i32, i32* @global_var_1eadc.85, align 4
  store i32 %v2_c160, i32* %r3.global-to-local, align 4
  %v1_c164 = urem i32 %v5_c154, 256
  store i32 %v1_c164, i32* %ip.global-to-local, align 4
  %v0_c168 = load i32, i32* @r5, align 4
  store i32 %v0_c168, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_c170 = load i32, i32* @r4, align 4
  %v5_c178 = inttoptr i32 %v0_c168 to i32*
  %v6_c178 = call i32 @function_a47c(i32 %v0_c170, i32* %v5_c178, i32 25, i32 %v2_c160, i32 %v1_c164)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_c18c = call i32 @function_13d90(i32 2, i32 3, i32 6)
  %v7_c190 = icmp eq i32 %v3_c18c, -1
  store i1 %v7_c190, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c190, label %dec_label_pc_c5c8, label %dec_label_pc_c19c

dec_label_pc_c19c:                                ; preds = %dec_label_pc_bf88
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c1a4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c1a4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c1b8 = call i32 @function_13d60(i32 %v3_c18c, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v7_c1bc = icmp eq i32 %v6_c1b8, -1
  store i1 %v7_c1bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c1bc, label %dec_label_pc_c5c0, label %dec_label_pc_c1c4

dec_label_pc_c1c4:                                ; preds = %dec_label_pc_c19c
  %v0_c1c4 = load i32, i32* @r8, align 4
  %v0_c1c8 = load i32, i32* @r7, align 4
  %v0_c1cc = load i32, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_c1d4 = urem i32 %v0_c1c4, 65536
  store i32 %v3_c1d4, i32* %r2.global-to-local, align 4
  %v3_c1d8 = urem i32 %v0_c1c8, 65536
  store i32 %v3_c1d8, i32* %r3.global-to-local, align 4
  %v3_c1dc = urem i32 %v0_c1cc, 65536
  store i32 %v3_c1dc, i32* %ip.global-to-local, align 4
  %v0_c1e0 = load i32, i32* @fp, align 4
  %v2_c1e0 = icmp eq i32 %v0_c1e0, 0
  store i1 %v2_c1e0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp75 = icmp slt i32 %v0_c1e0, 1
  br i1 %tmp75, label %dec_label_pc_c6e0, label %dec_label_pc_c1f8

dec_label_pc_c1f8:                                ; preds = %dec_label_pc_c1c4
  %v1_c200 = add i32 %v6_c13c, 40
  %tmp76 = mul i32 %v1_c200, 256
  %v1_c214 = urem i32 %v0_c1c8, 256
  %v1_c218 = and i32 %tmp76, 65280
  %v3_c21c = mul nuw nsw i32 %v1_c214, 256
  %v1_c224 = urem i32 %v0_c1cc, 256
  %tmp77 = udiv i32 %v0_c1cc, 256
  %v3_c228 = urem i32 %tmp77, 256
  %tmp78 = udiv i32 %v1_c200, 256
  %v4_c22c = urem i32 %tmp78, 256
  %v5_c22c = or i32 %v4_c22c, %v1_c218
  store i32 %v5_c22c, i32* @lr, align 4
  %tmp79 = udiv i32 %v0_c1c8, 256
  %v4_c230 = urem i32 %tmp79, 256
  %v5_c230 = or i32 %v4_c230, %v3_c21c
  store i32 %v5_c230, i32* @sl, align 4
  %v4_c234 = mul nuw nsw i32 %v1_c224, 256
  %v5_c234 = or i32 %v4_c234, %v3_c228
  store i32 %v5_c234, i32* @r6, align 4
  %tmp80 = udiv i32 %v0_c1c4, 256
  %v3_c244 = urem i32 %tmp80, 256
  %v1_c248 = urem i32 %v0_c1c4, 256
  %tmp81 = mul i32 %v5_c078, 256
  %v1_c250 = and i32 %tmp81, 65280
  %v1_c254 = urem i32 %v6_c0ac, 2
  %v1_c258 = urem i32 %v6_c0c4, 2
  %v1_c25c = urem i32 %v6_c0dc, 2
  %tmp82 = udiv i32 %v5_c078, 256
  %v4_c260 = urem i32 %tmp82, 256
  %v5_c260 = or i32 %v4_c260, %v1_c250
  store i32 %v5_c260, i32* @r8, align 4
  %v1_c280 = urem i32 %v6_c0f4, 2
  %v1_c284 = urem i32 %v6_c10c, 2
  %v1_c288 = urem i32 %v6_c124, 2
  %v1_c28c = urem i32 %v6_c0dc, 256
  %v4_c290 = mul nuw nsw i32 %v1_c248, 256
  %v5_c290 = or i32 %v4_c290, %v3_c244
  store i32 %v5_c290, i32* @r5, align 4
  %v3_c2a425 = udiv i32 %v1_c218, 256
  store i32 %v3_c2a425, i32* %r3.global-to-local, align 4
  store i32 %v1_c248, i32* %ip.global-to-local, align 4
  store i32 %v1_c214, i32* %r1.global-to-local, align 4
  store i32 %v1_c224, i32* %r2.global-to-local, align 4
  %v5_c2c0 = trunc i32 %v0_c1c8 to i8
  store i32 0, i32* @r4, align 4
  %sext8 = mul i32 %v5_bffc, 16777216
  %v4_c31c = sdiv i32 %sext8, 16777216
  %sext9 = mul i32 %v0_c1c4, 16777216
  %v4_c328 = sdiv i32 %sext9, 16777216
  %sext10 = mul i32 %tmp78, 16777216
  %v4_c33c = sdiv i32 %sext10, 16777216
  %sext11 = mul i32 %v1_c200, 16777216
  %v4_c340 = sdiv i32 %sext11, 16777216
  %tmp = sub nsw i32 0, %v1_c254
  %v4_c390 = and i32 %tmp, 32
  %tmp93 = sub nsw i32 0, %v1_c258
  %v4_c3a4 = and i32 %tmp93, 16
  %tmp94 = sub nsw i32 0, %v1_c25c
  %v4_c3b8 = and i32 %tmp94, 8
  %tmp95 = sub nsw i32 0, %v1_c280
  %v4_c3cc = and i32 %tmp95, 4
  %tmp96 = sub nsw i32 0, %v1_c284
  %v3_c3e0 = and i32 %tmp96, 2
  %sext12 = mul i32 %v0_c1cc, 16777216
  %v7_c410 = sdiv i32 %sext12, 16777216
  %v1_c324 = trunc i32 %v4_c31c to i8
  %extract.t = trunc i32 %v4_c328 to i8
  %v3_c410 = sext i8 %v5_c2c0 to i32
  %v2_c434 = icmp eq i32 %v1_c28c, 0
  br label %dec_label_pc_c2cc

dec_label_pc_c2cc:                                ; preds = %bb89, %dec_label_pc_c1f8
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_c2d8 = call i32 @function_14094(i32 1510, i32 1)
  store i32 %v2_bfa8, i32* %ip.global-to-local, align 4
  %v2_c2e4 = load i32, i32* @r4, align 4
  %v5_c2e4 = mul i32 %v2_c2e4, 4
  %v6_c2e4 = add i32 %v5_c2e4, %v2_bfa8
  %v7_c2e4 = inttoptr i32 %v6_c2e4 to i32*
  store i32 %v2_c2d8, i32* %v7_c2e4, align 4
  %v3_c2e8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c2e8, i32* %r3.global-to-local, align 4
  %v0_c2ec = load i32, i32* %ip.global-to-local, align 4
  %v4_c2ec = mul i32 %v3_c2e8, 4
  %v5_c2ec = add i32 %v0_c2ec, %v4_c2ec
  %v6_c2ec = inttoptr i32 %v5_c2ec to i32*
  %v7_c2ec = load i32, i32* %v6_c2ec, align 4
  store i32 %v7_c2ec, i32* @r7, align 4
  %v1_c2f0 = inttoptr i32 %v7_c2ec to i8*
  %v2_c2f0 = load i8, i8* %v1_c2f0, align 1
  %tmp97 = urem i8 %v2_c2f0, 16
  %v1_c2f4 = zext i8 %tmp97 to i32
  %v1_c2f8 = or i32 %v1_c2f4, 64
  store i32 %v1_c2f8, i32* %r2.global-to-local, align 4
  %v1_c2fc = trunc i32 %v1_c2f8 to i8
  store i8 %v1_c2fc, i8* %v1_c2f0, align 1
  %v0_c300 = load i32, i32* @r7, align 4
  %v1_c300 = inttoptr i32 %v0_c300 to i8*
  %v2_c300 = load i8, i8* %v1_c300, align 1
  %v1_c304 = and i8 %v2_c300, -16
  %v1_c308 = or i8 %v1_c304, 5
  store i32 %v1_c028, i32* %r1.global-to-local, align 4
  store i8 %v1_c308, i8* %v1_c300, align 1
  %v2_c318 = load i32, i32* @r7, align 4
  %v3_c318 = add i32 %v2_c318, 1
  %v4_c318 = inttoptr i32 %v3_c318 to i8*
  store i8 %v5_bfe0, i8* %v4_c318, align 1
  store i32 %v4_c31c, i32* %r3.global-to-local, align 4
  %v0_c320 = load i32, i32* %r1.global-to-local, align 4
  %v2_c320 = icmp eq i32 %v0_c320, 0
  store i1 %v2_c320, i1* %cpsr_z.global-to-local, align 1
  %v2_c324 = load i32, i32* @r7, align 4
  %v3_c324 = add i32 %v2_c324, 8
  %v4_c324 = inttoptr i32 %v3_c324 to i8*
  store i8 %v1_c324, i8* %v4_c324, align 1
  store i32 %v4_c328, i32* %r2.global-to-local, align 4
  %v0_c32c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c32c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_c2cc
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c330 = load i32, i32* @r7, align 4
  %v4_c330 = add i32 %v3_c330, 6
  %v5_c330 = inttoptr i32 %v4_c330 to i8*
  store i8 64, i8* %v5_c330, align 1
  %v0_c338.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t26 = trunc i32 %v0_c338.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c2cc, %bb
  %v0_c338.off0 = phi i8 [ %extract.t, %dec_label_pc_c2cc ], [ %extract.t26, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_c338 = load i32, i32* @r7, align 4
  %v3_c338 = add i32 %v2_c338, 5
  %v4_c338 = inttoptr i32 %v3_c338 to i8*
  store i8 %v0_c338.off0, i8* %v4_c338, align 1
  store i32 %v4_c33c, i32* %ip.global-to-local, align 4
  store i32 %v4_c340, i32* %r1.global-to-local, align 4
  %v0_c344 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c344, label %bb84, label %bb83

bb83:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb84

bb84:                                             ; preds = %.thread, %bb83
  %v0_c348 = load i32, i32* %r3.global-to-local, align 4
  %v1_c348 = trunc i32 %v0_c348 to i8
  %v2_c348 = load i32, i32* @r7, align 4
  %v3_c348 = add i32 %v2_c348, 9
  %v4_c348 = inttoptr i32 %v3_c348 to i8*
  store i8 %v1_c348, i8* %v4_c348, align 1
  %v0_c34c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c34c, label %bb86, label %bb85

bb85:                                             ; preds = %bb84
  %v1_c34c = load i32, i32* %r2.global-to-local, align 4
  %v2_c34c = trunc i32 %v1_c34c to i8
  %v3_c34c = load i32, i32* @r7, align 4
  %v4_c34c = add i32 %v3_c34c, 7
  %v5_c34c = inttoptr i32 %v4_c34c to i8*
  store i8 %v2_c34c, i8* %v5_c34c, align 1
  br label %bb86

bb86:                                             ; preds = %bb84, %bb85
  %v3_c350 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c350, i32* %r2.global-to-local, align 4
  %v0_c354 = load i32, i32* %ip.global-to-local, align 4
  %v1_c354 = trunc i32 %v0_c354 to i8
  %v2_c354 = load i32, i32* @r7, align 4
  %v3_c354 = add i32 %v2_c354, 2
  %v4_c354 = inttoptr i32 %v3_c354 to i8*
  store i8 %v1_c354, i8* %v4_c354, align 1
  store i32 %v6_c178, i32* %ip.global-to-local, align 4
  %v0_c35c = load i32, i32* %r2.global-to-local, align 4
  %v3_c35c = mul i32 %v0_c35c, 32
  store i32 %v3_c35c, i32* %r3.global-to-local, align 4
  %v1_c360 = load i32, i32* @r7, align 4
  %v2_c360 = add i32 %v1_c360, 12
  %v3_c360 = inttoptr i32 %v2_c360 to i32*
  store i32 %v6_c178, i32* %v3_c360, align 4
  %v0_c364 = load i32, i32* %r3.global-to-local, align 4
  %v1_c364 = load i32, i32* %r2.global-to-local, align 4
  %tmp98 = mul i32 %v1_c364, -8
  %v5_c364 = add i32 %v0_c364, %tmp98
  %v1_c368 = load i32, i32* @sb, align 4
  %v2_c368 = add i32 %v1_c368, %v5_c364
  store i32 %v2_c368, i32* %r3.global-to-local, align 4
  %v1_c36c = add i32 %v2_c368, 16
  %v2_c36c = inttoptr i32 %v1_c36c to i32*
  %v3_c36c = load i32, i32* %v2_c36c, align 4
  store i32 %v3_c36c, i32* %r2.global-to-local, align 4
  %v0_c370 = load i32, i32* %r1.global-to-local, align 4
  %v1_c370 = trunc i32 %v0_c370 to i8
  %v2_c370 = load i32, i32* @r7, align 4
  %v3_c370 = add i32 %v2_c370, 3
  %v4_c370 = inttoptr i32 %v3_c370 to i8*
  store i8 %v1_c370, i8* %v4_c370, align 1
  %v0_c374 = load i32, i32* @r5, align 4
  %v1_c374 = trunc i32 %v0_c374 to i8
  %v2_c374 = load i32, i32* @r7, align 4
  %v3_c374 = add i32 %v2_c374, 4
  %v4_c374 = inttoptr i32 %v3_c374 to i8*
  store i8 %v1_c374, i8* %v4_c374, align 1
  %v0_c378 = load i32, i32* %r2.global-to-local, align 4
  %v1_c378 = load i32, i32* @r7, align 4
  %v2_c378 = add i32 %v1_c378, 16
  %v3_c378 = inttoptr i32 %v2_c378 to i32*
  store i32 %v0_c378, i32* %v3_c378, align 4
  %v0_c37c = load i32, i32* @sl, align 4
  %v1_c37c = trunc i32 %v0_c37c to i8
  %v2_c37c = load i32, i32* @r7, align 4
  %v3_c37c = add i32 %v2_c37c, 20
  %v4_c37c = inttoptr i32 %v3_c37c to i8*
  store i8 %v1_c37c, i8* %v4_c37c, align 1
  %v0_c380 = load i32, i32* @r7, align 4
  %v1_c380 = add i32 %v0_c380, 20
  store i32 %v1_c380, i32* @r4, align 4
  %v1_c384 = add i32 %v0_c380, 33
  %v2_c384 = inttoptr i32 %v1_c384 to i8*
  %v3_c384 = load i8, i8* %v2_c384, align 1
  %v4_c384 = zext i8 %v3_c384 to i32
  store i32 %v1_c254, i32* %r1.global-to-local, align 4
  %v1_c38c = and i32 %v4_c384, 223
  %v5_c390 = or i32 %v1_c38c, %v4_c390
  store i32 %v5_c390, i32* %r3.global-to-local, align 4
  %v1_c394 = trunc i32 %v5_c390 to i8
  store i8 %v1_c394, i8* %v2_c384, align 1
  %v0_c398 = load i32, i32* @r4, align 4
  %v1_c398 = add i32 %v0_c398, 13
  %v2_c398 = inttoptr i32 %v1_c398 to i8*
  %v3_c398 = load i8, i8* %v2_c398, align 1
  %v4_c398 = zext i8 %v3_c398 to i32
  store i32 %v1_c258, i32* %r3.global-to-local, align 4
  %v1_c3a0 = and i32 %v4_c398, 239
  %v5_c3a4 = or i32 %v1_c3a0, %v4_c3a4
  store i32 %v5_c3a4, i32* %r2.global-to-local, align 4
  %v1_c3a8 = trunc i32 %v5_c3a4 to i8
  store i8 %v1_c3a8, i8* %v2_c398, align 1
  %v0_c3ac = load i32, i32* @r4, align 4
  %v1_c3ac = add i32 %v0_c3ac, 13
  %v2_c3ac = inttoptr i32 %v1_c3ac to i8*
  %v3_c3ac = load i8, i8* %v2_c3ac, align 1
  %v4_c3ac = zext i8 %v3_c3ac to i32
  store i32 %v1_c25c, i32* %ip.global-to-local, align 4
  %v1_c3b4 = and i32 %v4_c3ac, 247
  %v5_c3b8 = or i32 %v1_c3b4, %v4_c3b8
  store i32 %v5_c3b8, i32* %r3.global-to-local, align 4
  %v1_c3bc = trunc i32 %v5_c3b8 to i8
  store i8 %v1_c3bc, i8* %v2_c3ac, align 1
  %v0_c3c0 = load i32, i32* @r4, align 4
  %v1_c3c0 = add i32 %v0_c3c0, 13
  %v2_c3c0 = inttoptr i32 %v1_c3c0 to i8*
  %v3_c3c0 = load i8, i8* %v2_c3c0, align 1
  %v4_c3c0 = zext i8 %v3_c3c0 to i32
  store i32 %v1_c280, i32* %r1.global-to-local, align 4
  %v1_c3c8 = and i32 %v4_c3c0, 251
  %v5_c3cc = or i32 %v1_c3c8, %v4_c3cc
  store i32 %v5_c3cc, i32* %r2.global-to-local, align 4
  %v1_c3d0 = trunc i32 %v5_c3cc to i8
  store i8 %v1_c3d0, i8* %v2_c3c0, align 1
  %v0_c3d4 = load i32, i32* @r4, align 4
  %v1_c3d4 = add i32 %v0_c3d4, 13
  %v2_c3d4 = inttoptr i32 %v1_c3d4 to i8*
  %v3_c3d4 = load i8, i8* %v2_c3d4, align 1
  %v4_c3d4 = zext i8 %v3_c3d4 to i32
  store i32 %v1_c284, i32* %r2.global-to-local, align 4
  %v1_c3dc = and i32 %v4_c3d4, 253
  %v4_c3e0 = or i32 %v1_c3dc, %v3_c3e0
  store i32 %v4_c3e0, i32* %r3.global-to-local, align 4
  %v1_c3e4 = trunc i32 %v4_c3e0 to i8
  store i8 %v1_c3e4, i8* %v2_c3d4, align 1
  %v0_c3e8 = load i32, i32* @r4, align 4
  %v1_c3e8 = add i32 %v0_c3e8, 12
  %v2_c3e8 = inttoptr i32 %v1_c3e8 to i8*
  %v3_c3e8 = load i8, i8* %v2_c3e8, align 1
  %v4_c3e8 = zext i8 %v3_c3e8 to i32
  store i32 %v4_c3e8, i32* %r2.global-to-local, align 4
  %v1_c3ec = add i32 %v0_c3e8, 13
  %v2_c3ec = inttoptr i32 %v1_c3ec to i8*
  %v3_c3ec = load i8, i8* %v2_c3ec, align 1
  %v4_c3ec = zext i8 %v3_c3ec to i32
  store i32 %v1_c288, i32* %ip.global-to-local, align 4
  %tmp99 = urem i8 %v3_c3e8, 16
  %v1_c3f4 = zext i8 %tmp99 to i32
  %v1_c3f8 = and i32 %v4_c3ec, 254
  %v2_c3fc = or i32 %v1_c3f8, %v1_c288
  store i32 %v2_c3fc, i32* %r3.global-to-local, align 4
  %v1_c400 = or i32 %v1_c3f4, 80
  store i32 %v1_c400, i32* %r2.global-to-local, align 4
  %v1_c404 = trunc i32 %v2_c3fc to i8
  store i8 %v1_c404, i8* %v2_c3ec, align 1
  %v0_c408 = load i32, i32* %r2.global-to-local, align 4
  %v1_c408 = trunc i32 %v0_c408 to i8
  %v2_c408 = load i32, i32* @r4, align 4
  %v3_c408 = add i32 %v2_c408, 12
  %v4_c408 = inttoptr i32 %v3_c408 to i8*
  store i8 %v1_c408, i8* %v4_c408, align 1
  store i32 %v3_c410, i32* %r1.global-to-local, align 4
  store i32 %v7_c410, i32* %r2.global-to-local, align 4
  %v2_c414 = load i32, i32* @r4, align 4
  %v3_c414 = add i32 %v2_c414, 1
  %v4_c414 = inttoptr i32 %v3_c414 to i8*
  store i8 %v5_c2c0, i8* %v4_c414, align 1
  %v0_c418 = load i32, i32* %r2.global-to-local, align 4
  %v1_c418 = trunc i32 %v0_c418 to i8
  %v2_c418 = load i32, i32* @r4, align 4
  %v3_c418 = add i32 %v2_c418, 3
  %v4_c418 = inttoptr i32 %v3_c418 to i8*
  store i8 %v1_c418, i8* %v4_c418, align 1
  %v0_c41c = load i32, i32* @r6, align 4
  %v1_c41c = trunc i32 %v0_c41c to i8
  %v2_c41c = load i32, i32* @r4, align 4
  %v3_c41c = add i32 %v2_c41c, 2
  %v4_c41c = inttoptr i32 %v3_c41c to i8*
  store i8 %v1_c41c, i8* %v4_c41c, align 1
  %v0_c420 = load i32, i32* @r8, align 4
  %v1_c420 = load i32, i32* @r4, align 4
  %v2_c420 = add i32 %v1_c420, 4
  %v3_c420 = inttoptr i32 %v2_c420 to i32*
  store i32 %v0_c420, i32* %v3_c420, align 4
  %v0_c424 = call i32 @function_fbfc()
  store i32 %v1_c28c, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_c424, 16777216
  %v1_c42c = sdiv i32 %sext, 16777216
  store i32 %v1_c42c, i32* %r2.global-to-local, align 4
  %v3_c430 = ashr i32 %sext, 31
  store i32 %v3_c430, i32* %r3.global-to-local, align 4
  store i1 %v2_c434, i1* %cpsr_z.global-to-local, align 1
  %v1_c438 = trunc i32 %v3_c430 to i8
  %v2_c438 = load i32, i32* @r4, align 4
  %v3_c438 = add i32 %v2_c438, 15
  %v4_c438 = inttoptr i32 %v3_c438 to i8*
  store i8 %v1_c438, i8* %v4_c438, align 1
  %v0_c43c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_c448.pre = load i32, i32* @r4, align 4
  br i1 %v0_c43c, label %.thread13, label %bb87

bb87:                                             ; preds = %bb86
  %v2_c43c = add i32 %v2_c448.pre, 13
  %v3_c43c = inttoptr i32 %v2_c43c to i8*
  %v4_c43c = load i8, i8* %v3_c43c, align 1
  %v5_c43c = zext i8 %v4_c43c to i32
  %v2_c440 = or i32 %v5_c43c, 8
  store i32 %v2_c440, i32* %r3.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %bb86, %bb87
  store i32 %v6_c13c, i32* @r1, align 4
  %v0_c448 = load i32, i32* %r2.global-to-local, align 4
  %v1_c448 = trunc i32 %v0_c448 to i8
  %v3_c448 = add i32 %v2_c448.pre, 14
  %v4_c448 = inttoptr i32 %v3_c448 to i8*
  store i8 %v1_c448, i8* %v4_c448, align 1
  %v0_c44c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c44c, label %bb89, label %bb88

bb88:                                             ; preds = %.thread13
  %v1_c44c = load i32, i32* %r3.global-to-local, align 4
  %v2_c44c = trunc i32 %v1_c44c to i8
  %v3_c44c = load i32, i32* @r4, align 4
  %v4_c44c = add i32 %v3_c44c, 13
  %v5_c44c = inttoptr i32 %v4_c44c to i8*
  store i8 %v2_c44c, i8* %v5_c44c, align 1
  br label %bb89

bb89:                                             ; preds = %.thread13, %bb88
  %v0_c450 = load i32, i32* @r7, align 4
  %v1_c450 = add i32 %v0_c450, 40
  %v1_c454 = inttoptr i32 %v1_c450 to i8*
  %v2_c454 = call i32 @function_fdd8(i8* %v1_c454)
  %v3_c458 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c458, i32* %r3.global-to-local, align 4
  %v1_c45c = add i32 %v3_c458, 1
  store i32 %v1_c45c, i32* @r4, align 4
  %v0_c460 = load i32, i32* @fp, align 4
  %v9_c460 = icmp eq i32 %v0_c460, %v1_c45c
  store i1 %v9_c460, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c45c, i32* %stack_var_-40, align 4
  %v8_c468 = icmp sgt i32 %v0_c460, %v1_c45c
  br i1 %v8_c468, label %dec_label_pc_c2cc, label %dec_label_pc_c46c

dec_label_pc_c46c:                                ; preds = %bb89
  store i32 %v6_c13c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_c474.preheader

dec_label_pc_c474.preheader:                      ; preds = %dec_label_pc_c46c, %dec_label_pc_c6e0
  %v0_c47417 = phi i32 [ %v0_c460, %dec_label_pc_c46c ], [ %v0_c1e0, %dec_label_pc_c6e0 ]
  %stack_var_-168.0.ph = phi i32 [ %v1_c200, %dec_label_pc_c46c ], [ %v1_c6e8, %dec_label_pc_c6e0 ]
  %storemerge = add i32 %v6_c13c, 20
  store i32 %storemerge, i32* @r8, align 4
  %v3_c62c = icmp eq i32 %v6_c178, -1
  %v8_c62c = icmp eq i32 %v6_c178, -1
  %v3_c648 = icmp eq i32 %v3_c1d4, 65535
  %v2_c6c4 = icmp eq i32 %v1_c164, 0
  br label %dec_label_pc_c474

dec_label_pc_c474:                                ; preds = %dec_label_pc_c51c, %dec_label_pc_c474.preheader
  %v0_c474 = phi i32 [ %v0_c47417, %dec_label_pc_c474.preheader ], [ %v0_c5b0, %dec_label_pc_c51c ]
  %v2_c474 = icmp eq i32 %v0_c474, 0
  store i1 %v2_c474, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp90 = icmp slt i32 %v0_c474, 1
  br label %dec_label_pc_c47c

dec_label_pc_c47c:                                ; preds = %dec_label_pc_c47c, %dec_label_pc_c474
  br i1 %tmp90, label %dec_label_pc_c47c, label %dec_label_pc_c480

dec_label_pc_c480:                                ; preds = %dec_label_pc_c47c
  %v0_c480 = load i32, i32* @r8, align 4
  %v3_c480 = mul i32 %v0_c480, 65536
  store i32 %v3_c480, i32* %r2.global-to-local, align 4
  %tmp91 = mul i32 %v0_c480, 256
  %v1_c488 = and i32 %tmp91, 65280
  store i32 %v1_c488, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %tmp92 = udiv i32 %v0_c480, 256
  %v4_c494 = urem i32 %tmp92, 256
  %v5_c494 = or i32 %v4_c494, %v1_c488
  store i32 %v5_c494, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_c49c

dec_label_pc_c49c:                                ; preds = %dec_label_pc_c51c, %dec_label_pc_c480
  %v1_c4b0 = phi i32 [ %v1_c5ac, %dec_label_pc_c51c ], [ 0, %dec_label_pc_c480 ]
  %v5_c4a0 = mul i32 %v1_c4b0, 24
  %v1_c4a4 = load i32, i32* @sb, align 4
  %v2_c4a4 = add i32 %v1_c4a4, %v5_c4a0
  store i32 %v2_c4a4, i32* %r3.global-to-local, align 4
  store i32 %v2_bfa8, i32* %ip.global-to-local, align 4
  %v1_c4ac = add i32 %v2_c4a4, 20
  %v2_c4ac = inttoptr i32 %v1_c4ac to i8*
  %v3_c4ac = load i8, i8* %v2_c4ac, align 1
  %v4_c4ac = zext i8 %v3_c4ac to i32
  store i32 %v4_c4ac, i32* %r2.global-to-local, align 4
  %v4_c4b0 = mul i32 %v1_c4b0, 4
  %v5_c4b0 = add i32 %v4_c4b0, %v2_bfa8
  %v6_c4b0 = inttoptr i32 %v5_c4b0 to i32*
  %v7_c4b0 = load i32, i32* %v6_c4b0, align 4
  store i32 %v7_c4b0, i32* @r5, align 4
  %v7_c4b4 = icmp eq i8 %v3_c4ac, 31
  store i1 %v7_c4b4, i1* %cpsr_z.global-to-local, align 1
  %v1_c4b8 = add i32 %v7_c4b0, 20
  store i32 %v1_c4b8, i32* @r6, align 4
  %tmp100 = icmp ult i8 %v3_c4ac, 32
  br i1 %tmp100, label %dec_label_pc_c5d0, label %dec_label_pc_c4c0

dec_label_pc_c4c0:                                ; preds = %dec_label_pc_c49c
  store i32 %v6_c178, i32* %r1.global-to-local, align 4
  store i1 %v8_c62c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c62c, label %dec_label_pc_c638, label %dec_label_pc_c4cc

dec_label_pc_c4cc:                                ; preds = %dec_label_pc_c5d0, %dec_label_pc_c4c0
  store i32 %v3_c1d4, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c648, label %dec_label_pc_c654, label %dec_label_pc_c4e0

dec_label_pc_c4e0:                                ; preds = %dec_label_pc_c638.dec_label_pc_c4e0_crit_edge, %dec_label_pc_c4cc
  %v1_c4e4 = phi i32 [ %v1_c4e4.pre, %dec_label_pc_c638.dec_label_pc_c4e0_crit_edge ], [ 65535, %dec_label_pc_c4cc ]
  store i32 %v3_c1d8, i32* %r3.global-to-local, align 4
  %v9_c4e4 = icmp eq i32 %v3_c1d8, %v1_c4e4
  store i1 %v9_c4e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c4e4, label %dec_label_pc_c670, label %dec_label_pc_c4ec

dec_label_pc_c4ec:                                ; preds = %dec_label_pc_c654.dec_label_pc_c4ec_crit_edge, %dec_label_pc_c4e0
  %v1_c4f0 = phi i32 [ %v1_c4f0.pre, %dec_label_pc_c654.dec_label_pc_c4ec_crit_edge ], [ %v1_c4e4, %dec_label_pc_c4e0 ]
  store i32 %v3_c1dc, i32* %ip.global-to-local, align 4
  %v9_c4f0 = icmp eq i32 %v3_c1dc, %v1_c4f0
  store i1 %v9_c4f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c4f0, label %dec_label_pc_c68c, label %dec_label_pc_c4f8

dec_label_pc_c4f8:                                ; preds = %dec_label_pc_c670.dec_label_pc_c4f8_crit_edge, %dec_label_pc_c4ec
  %v1_c4fc = phi i32 [ %v1_c4fc.pre, %dec_label_pc_c670.dec_label_pc_c4f8_crit_edge ], [ %v1_c4f0, %dec_label_pc_c4ec ]
  store i32 %v5_c078, i32* %r1.global-to-local, align 4
  %v9_c4fc = icmp eq i32 %v5_c078, %v1_c4fc
  store i1 %v9_c4fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c4fc, label %dec_label_pc_c6a8, label %dec_label_pc_c504

dec_label_pc_c504:                                ; preds = %dec_label_pc_c68c.dec_label_pc_c504_crit_edge, %dec_label_pc_c4f8
  %v1_c508 = phi i32 [ %v1_c508.pre, %dec_label_pc_c68c.dec_label_pc_c504_crit_edge ], [ %v1_c4fc, %dec_label_pc_c4f8 ]
  store i32 %v6_c094, i32* %r2.global-to-local, align 4
  %v9_c508 = icmp eq i32 %v6_c094, %v1_c508
  store i1 %v9_c508, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c508, label %dec_label_pc_c6bc, label %dec_label_pc_c510

dec_label_pc_c510:                                ; preds = %dec_label_pc_c6a8, %dec_label_pc_c504
  store i32 %v1_c164, i32* %r3.global-to-local, align 4
  store i1 %v2_c6c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c6c4, label %dec_label_pc_c51c, label %dec_label_pc_c6d0

dec_label_pc_c51c:                                ; preds = %dec_label_pc_c510, %dec_label_pc_c6bc, %dec_label_pc_c6d0
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c520 = load i32, i32* @r7, align 4
  %v1_c520 = trunc i32 %v0_c520 to i8
  %v2_c520 = load i32, i32* @r5, align 4
  %v3_c520 = add i32 %v2_c520, 10
  %v4_c520 = inttoptr i32 %v3_c520 to i8*
  store i8 %v1_c520, i8* %v4_c520, align 1
  %v0_c524 = load i32, i32* @r7, align 4
  %v1_c524 = trunc i32 %v0_c524 to i8
  %v2_c524 = load i32, i32* @r5, align 4
  %v3_c524 = add i32 %v2_c524, 11
  %v4_c524 = inttoptr i32 %v3_c524 to i8*
  store i8 %v1_c524, i8* %v4_c524, align 1
  %v0_c528 = load i32, i32* @r5, align 4
  store i32 %v0_c528, i32* @r0, align 4
  %v2_c52c = call i32 @function_e424(i32 %v0_c528, i32 20)
  %v3_c52c = trunc i32 %v2_c52c to i8
  %v4_c53028 = udiv i32 %v2_c52c, 256
  %v1_c534 = trunc i32 %v4_c53028 to i8
  %v2_c534 = load i32, i32* @r5, align 4
  %v3_c534 = add i32 %v2_c534, 11
  %v4_c534 = inttoptr i32 %v3_c534 to i8*
  store i8 %v1_c534, i8* %v4_c534, align 1
  %v3_c538 = load i32, i32* @r5, align 4
  %v4_c538 = add i32 %v3_c538, 10
  %v5_c538 = inttoptr i32 %v4_c538 to i8*
  store i8 %v3_c52c, i8* %v5_c538, align 1
  %v0_c53c = load i32, i32* @r6, align 4
  store i32 %v0_c53c, i32* @r1, align 4
  %v0_c540 = load i32, i32* @sl, align 4
  store i32 %v0_c540, i32* %r2.global-to-local, align 4
  %v0_c544 = load i32, i32* @r8, align 4
  store i32 %v0_c544, i32* %r3.global-to-local, align 4
  %v0_c548 = load i32, i32* @r7, align 4
  %v1_c548 = trunc i32 %v0_c548 to i8
  %v3_c548 = add i32 %v0_c53c, 16
  %v4_c548 = inttoptr i32 %v3_c548 to i8*
  store i8 %v1_c548, i8* %v4_c548, align 1
  %v0_c54c = load i32, i32* @r7, align 4
  %v1_c54c = trunc i32 %v0_c54c to i8
  %v2_c54c = load i32, i32* @r6, align 4
  %v3_c54c = add i32 %v2_c54c, 17
  %v4_c54c = inttoptr i32 %v3_c54c to i8*
  store i8 %v1_c54c, i8* %v4_c54c, align 1
  %v0_c550 = load i32, i32* @r5, align 4
  %v4_c554 = call i32 @function_e480(i32 %v0_c550, i32 %v0_c53c, i32 %v0_c540, i32 %v0_c544)
  %v5_c554 = trunc i32 %v4_c554 to i8
  %v4_c55829 = udiv i32 %v4_c554, 256
  %v1_c55c = trunc i32 %v4_c55829 to i8
  %v2_c55c = load i32, i32* @r6, align 4
  %v3_c55c = add i32 %v2_c55c, 17
  %v4_c55c = inttoptr i32 %v3_c55c to i8*
  store i8 %v1_c55c, i8* %v4_c55c, align 1
  %v3_c560 = load i32, i32* @r6, align 4
  %v4_c560 = add i32 %v3_c560, 16
  %v5_c560 = inttoptr i32 %v4_c560 to i8*
  store i8 %v5_c554, i8* %v5_c560, align 1
  %v3_c564 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c564, i32* %r3.global-to-local, align 4
  %v0_c568 = load i32, i32* @r5, align 4
  %v1_c568 = add i32 %v0_c568, 20
  %v2_c568 = inttoptr i32 %v1_c568 to i32*
  %v3_c568 = load i32, i32* %v2_c568, align 4
  %v3_c570 = udiv i32 %v3_c568, 65536
  store i32 %v3_c570, i32* %r2.global-to-local, align 4
  %v5_c574 = mul i32 %v3_c564, 24
  %v1_c578 = load i32, i32* @sb, align 4
  %v2_c578 = add i32 %v1_c578, %v5_c574
  store i32 %v2_c578, i32* %ip.global-to-local, align 4
  %v3_c57c27 = udiv i32 %v3_c568, 16777216
  %v1_c580 = trunc i32 %v3_c57c27 to i8
  %v3_c580 = add i32 %v2_c578, 3
  %v4_c580 = inttoptr i32 %v3_c580 to i8*
  store i8 %v1_c580, i8* %v4_c580, align 1
  %v0_c584 = load i32, i32* %r2.global-to-local, align 4
  %v1_c584 = trunc i32 %v0_c584 to i8
  %v2_c584 = load i32, i32* %ip.global-to-local, align 4
  %v3_c584 = add i32 %v2_c584, 2
  %v4_c584 = inttoptr i32 %v3_c584 to i8*
  store i8 %v1_c584, i8* %v4_c584, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c58c = load i32, i32* @r5, align 4
  store i32 %v0_c58c, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-168.0.ph, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c59c = load i32, i32* %ip.global-to-local, align 4
  %v6_c5a4 = inttoptr i32 %v0_c58c to i32*
  %v7_c5a4 = call i32 @function_13d2c(i32 %v3_c18c, i32* %v6_c5a4, i32 %stack_var_-168.0.ph, i32 16384, i32 %v0_c59c, i32 16)
  %v3_c5a8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c5a8, i32* %r3.global-to-local, align 4
  %v1_c5ac = add i32 %v3_c5a8, 1
  %v0_c5b0 = load i32, i32* @fp, align 4
  %v9_c5b0 = icmp eq i32 %v0_c5b0, %v1_c5ac
  store i1 %v9_c5b0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c5ac, i32* %stack_var_-40, align 4
  %v7_c5b8 = icmp sgt i32 %v0_c5b0, %v1_c5ac
  br i1 %v7_c5b8, label %dec_label_pc_c49c, label %dec_label_pc_c474

dec_label_pc_c5c0:                                ; preds = %dec_label_pc_c19c
  %v1_c5c4 = call i32 @function_13490(i32 %v3_c18c)
  br label %dec_label_pc_c5c8

dec_label_pc_c5c8:                                ; preds = %dec_label_pc_bf88, %dec_label_pc_c5c0
  %v29_c5cc = phi i32 [ %v3_c18c, %dec_label_pc_bf88 ], [ %v1_c5c4, %dec_label_pc_c5c0 ]
  ret i32 %v29_c5cc

dec_label_pc_c5d0:                                ; preds = %dec_label_pc_c49c
  %v1_c5d0 = add i32 %v2_c4a4, 16
  %v2_c5d0 = inttoptr i32 %v1_c5d0 to i32*
  %v3_c5d0 = load i32, i32* %v2_c5d0, align 4
  %v0_c5d4 = call i32 @function_fbfc()
  %v3_c5d8 = load i32, i32* %stack_var_-40, align 4
  %v5_c5e0 = mul i32 %v3_c5d8, 24
  %v1_c5e8 = load i32, i32* @sb, align 4
  %v2_c5e8 = add i32 %v1_c5e8, %v5_c5e0
  store i32 %v2_c5e8, i32* %r1.global-to-local, align 4
  %v1_c5ec = and i32 %v3_c5d0, 65280
  store i32 %v1_c5ec, i32* %r3.global-to-local, align 4
  %v1_c5e4 = udiv i32 %v3_c5d0, 256
  %v3_c5f0 = and i32 %v1_c5e4, 65280
  store i32 %v3_c5f0, i32* %r2.global-to-local, align 4
  %v3_c5f4 = mul i32 %v3_c5d0, 16777216
  store i32 %v3_c5f4, i32* %ip.global-to-local, align 4
  %v1_c5f8 = add i32 %v2_c5e8, 20
  %v2_c5f8 = inttoptr i32 %v1_c5f8 to i8*
  %v3_c5f8 = load i8, i8* %v2_c5f8, align 1
  %v4_c5f8 = zext i8 %v3_c5f8 to i32
  %v4_c5fc = mul nuw nsw i32 %v1_c5ec, 256
  %v5_c5fc = or i32 %v4_c5fc, %v3_c5f4
  store i32 %v5_c5fc, i32* %ip.global-to-local, align 4
  %v2_c604 = call i32 @llvm.bswap.i32(i32 %v3_c5d0)
  %v7_c608 = lshr i32 %v0_c5d4, %v4_c5f8
  %v8_c608 = add i32 %v7_c608, %v2_c604
  store i32 %v8_c608, i32* %r2.global-to-local, align 4
  %v2_c624 = call i32 @llvm.bswap.i32(i32 %v8_c608)
  store i32 %v2_c624, i32* %r3.global-to-local, align 4
  store i32 %v6_c178, i32* %r1.global-to-local, align 4
  store i1 %v8_c62c, i1* %cpsr_z.global-to-local, align 1
  %v1_c630 = load i32, i32* @r5, align 4
  %v2_c630 = add i32 %v1_c630, 16
  %v3_c630 = inttoptr i32 %v2_c630 to i32*
  store i32 %v2_c624, i32* %v3_c630, align 4
  br i1 %v3_c62c, label %dec_label_pc_c638, label %dec_label_pc_c4cc

dec_label_pc_c638:                                ; preds = %dec_label_pc_c5d0, %dec_label_pc_c4c0
  %v0_c638 = call i32 @function_fbfc()
  store i32 %v3_c1d4, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c648, i1* %cpsr_z.global-to-local, align 1
  %v1_c64c = load i32, i32* @r5, align 4
  %v2_c64c = add i32 %v1_c64c, 12
  %v3_c64c = inttoptr i32 %v2_c64c to i32*
  store i32 %v0_c638, i32* %v3_c64c, align 4
  br i1 %v3_c648, label %dec_label_pc_c654, label %dec_label_pc_c638.dec_label_pc_c4e0_crit_edge

dec_label_pc_c638.dec_label_pc_c4e0_crit_edge:    ; preds = %dec_label_pc_c638
  %v1_c4e4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c4e0

dec_label_pc_c654:                                ; preds = %dec_label_pc_c638, %dec_label_pc_c4cc
  %v0_c654 = call i32 @function_fbfc()
  %v1_c654 = trunc i32 %v0_c654 to i8
  %v4_c65830 = udiv i32 %v0_c654, 256
  %v1_c65c = trunc i32 %v4_c65830 to i8
  %v2_c65c = load i32, i32* @r5, align 4
  %v3_c65c = add i32 %v2_c65c, 5
  %v4_c65c = inttoptr i32 %v3_c65c to i8*
  store i8 %v1_c65c, i8* %v4_c65c, align 1
  store i32 %v3_c1d8, i32* %r3.global-to-local, align 4
  %v1_c664 = load i32, i32* @r4, align 4
  %v9_c664 = icmp eq i32 %v3_c1d8, %v1_c664
  store i1 %v9_c664, i1* %cpsr_z.global-to-local, align 1
  %v3_c668 = load i32, i32* @r5, align 4
  %v4_c668 = add i32 %v3_c668, 4
  %v5_c668 = inttoptr i32 %v4_c668 to i8*
  store i8 %v1_c654, i8* %v5_c668, align 1
  %v0_c66c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c66c, label %dec_label_pc_c670, label %dec_label_pc_c654.dec_label_pc_c4ec_crit_edge

dec_label_pc_c654.dec_label_pc_c4ec_crit_edge:    ; preds = %dec_label_pc_c654
  %v1_c4f0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c4ec

dec_label_pc_c670:                                ; preds = %dec_label_pc_c654, %dec_label_pc_c4e0
  %v0_c670 = call i32 @function_fbfc()
  %v1_c670 = trunc i32 %v0_c670 to i8
  store i32 %v3_c1dc, i32* %ip.global-to-local, align 4
  %v4_c678 = sdiv i32 %v0_c670, 256
  store i32 %v4_c678, i32* %r3.global-to-local, align 4
  %v1_c67c = load i32, i32* @r4, align 4
  %v9_c67c = icmp eq i32 %v3_c1dc, %v1_c67c
  store i1 %v9_c67c, i1* %cpsr_z.global-to-local, align 1
  %v3_c680 = load i32, i32* @r5, align 4
  %v4_c680 = add i32 %v3_c680, 20
  %v5_c680 = inttoptr i32 %v4_c680 to i8*
  store i8 %v1_c670, i8* %v5_c680, align 1
  %v0_c684 = load i32, i32* %r3.global-to-local, align 4
  %v1_c684 = trunc i32 %v0_c684 to i8
  %v2_c684 = load i32, i32* @r6, align 4
  %v3_c684 = add i32 %v2_c684, 1
  %v4_c684 = inttoptr i32 %v3_c684 to i8*
  store i8 %v1_c684, i8* %v4_c684, align 1
  %v0_c688 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c688, label %dec_label_pc_c68c, label %dec_label_pc_c670.dec_label_pc_c4f8_crit_edge

dec_label_pc_c670.dec_label_pc_c4f8_crit_edge:    ; preds = %dec_label_pc_c670
  %v1_c4fc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c4f8

dec_label_pc_c68c:                                ; preds = %dec_label_pc_c670, %dec_label_pc_c4ec
  %v0_c68c = call i32 @function_fbfc()
  %v1_c68c = trunc i32 %v0_c68c to i8
  store i32 %v5_c078, i32* %r1.global-to-local, align 4
  %v4_c694 = sdiv i32 %v0_c68c, 256
  store i32 %v4_c694, i32* %r3.global-to-local, align 4
  %v1_c698 = load i32, i32* @r4, align 4
  %v9_c698 = icmp eq i32 %v5_c078, %v1_c698
  store i1 %v9_c698, i1* %cpsr_z.global-to-local, align 1
  %v1_c69c = trunc i32 %v4_c694 to i8
  %v2_c69c = load i32, i32* @r6, align 4
  %v3_c69c = add i32 %v2_c69c, 3
  %v4_c69c = inttoptr i32 %v3_c69c to i8*
  store i8 %v1_c69c, i8* %v4_c69c, align 1
  %v3_c6a0 = load i32, i32* @r6, align 4
  %v4_c6a0 = add i32 %v3_c6a0, 2
  %v5_c6a0 = inttoptr i32 %v4_c6a0 to i8*
  store i8 %v1_c68c, i8* %v5_c6a0, align 1
  %v0_c6a4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c6a4, label %dec_label_pc_c6a8, label %dec_label_pc_c68c.dec_label_pc_c504_crit_edge

dec_label_pc_c68c.dec_label_pc_c504_crit_edge:    ; preds = %dec_label_pc_c68c
  %v1_c508.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c504

dec_label_pc_c6a8:                                ; preds = %dec_label_pc_c68c, %dec_label_pc_c4f8
  %v0_c6a8 = call i32 @function_fbfc()
  store i32 %v6_c094, i32* %r2.global-to-local, align 4
  %v1_c6b0 = load i32, i32* @r4, align 4
  %v9_c6b0 = icmp eq i32 %v6_c094, %v1_c6b0
  store i1 %v9_c6b0, i1* %cpsr_z.global-to-local, align 1
  %v1_c6b4 = load i32, i32* @r6, align 4
  %v2_c6b4 = add i32 %v1_c6b4, 4
  %v3_c6b4 = inttoptr i32 %v2_c6b4 to i32*
  store i32 %v0_c6a8, i32* %v3_c6b4, align 4
  br i1 %v9_c6b0, label %dec_label_pc_c6bc, label %dec_label_pc_c510

dec_label_pc_c6bc:                                ; preds = %dec_label_pc_c6a8, %dec_label_pc_c504
  %v0_c6bc = call i32 @function_fbfc()
  store i32 %v1_c164, i32* %r3.global-to-local, align 4
  store i1 %v2_c6c4, i1* %cpsr_z.global-to-local, align 1
  %v1_c6c8 = load i32, i32* @r6, align 4
  %v2_c6c8 = add i32 %v1_c6c8, 8
  %v3_c6c8 = inttoptr i32 %v2_c6c8 to i32*
  store i32 %v0_c6bc, i32* %v3_c6c8, align 4
  br i1 %v2_c6c4, label %dec_label_pc_c51c, label %dec_label_pc_c6d0

dec_label_pc_c6d0:                                ; preds = %dec_label_pc_c510, %dec_label_pc_c6bc
  %v0_c6d0 = load i32, i32* @r5, align 4
  %v1_c6d0 = add i32 %v0_c6d0, 40
  store i32 %v6_c13c, i32* @r1, align 4
  %v1_c6d8 = inttoptr i32 %v1_c6d0 to i8*
  %v2_c6d8 = call i32 @function_fdd8(i8* %v1_c6d8)
  br label %dec_label_pc_c51c

dec_label_pc_c6e0:                                ; preds = %dec_label_pc_c1c4
  store i32 %v6_c13c, i32* %r3.global-to-local, align 4
  %v1_c6e8 = add i32 %v6_c13c, 40
  store i32 %v1_c6e8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c474.preheader

; uselistorder directives
  uselistorder i32 %v1_c6e8, { 1, 0 }
  uselistorder i32 %v4_c694, { 1, 0 }
  uselistorder i32 %v2_c624, { 1, 0 }
  uselistorder i32 %v3_c5f4, { 1, 0 }
  uselistorder i32 %v3_c5d0, { 1, 3, 2, 0 }
  uselistorder i32 %v0_c5b0, { 1, 2, 0 }
  uselistorder i32 %v1_c5ac, { 2, 0, 3, 1 }
  uselistorder i32 %v0_c53c, { 1, 0, 2 }
  uselistorder i32 %v0_c480, { 2, 0, 1 }
  uselistorder i32 %v0_c474, { 1, 0 }
  uselistorder i1 %v2_c6c4, { 2, 3, 1, 0 }
  uselistorder i1 %v3_c648, { 1, 0, 2, 3 }
  uselistorder i32 %v1_c45c, { 1, 0, 2, 3 }
  uselistorder i8 %v5_c2c0, { 1, 0 }
  uselistorder i32 %v1_c288, { 1, 0 }
  uselistorder i32 %v1_c284, { 1, 0 }
  uselistorder i32 %v1_c280, { 1, 0 }
  uselistorder i32 %v1_c25c, { 1, 0 }
  uselistorder i32 %v1_c258, { 1, 0 }
  uselistorder i32 %v1_c254, { 1, 0 }
  uselistorder i32 %v1_c248, { 1, 0 }
  uselistorder i32 %v1_c224, { 1, 0 }
  uselistorder i32 %v1_c214, { 1, 0 }
  uselistorder i32 %v1_c200, { 3, 0, 2, 1 }
  uselistorder i32 %v0_c1e0, { 1, 0, 2 }
  uselistorder i32 %v3_c1d4, { 0, 1, 3, 2 }
  uselistorder i32 %v0_c1c8, { 3, 0, 1, 2 }
  uselistorder i32 %v0_c1c4, { 0, 2, 1, 3 }
  uselistorder i1 %v7_c1bc, { 1, 0 }
  uselistorder i1 %v7_c190, { 1, 0 }
  uselistorder i32 %v3_c18c, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v6_c178, { 4, 3, 0, 5, 1, 2 }
  uselistorder i32 %v1_c164, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_c13c, { 5, 4, 3, 0, 1, 2, 6 }
  uselistorder i32 %v6_c094, { 3, 2, 1, 0 }
  uselistorder i32 %v5_c078, { 2, 5, 4, 3, 1, 0 }
  uselistorder i32 %v1_c028, { 1, 0 }
  uselistorder i32 %v6_bfc0, { 1, 0 }
  uselistorder i32 %v2_bfa8, { 0, 3, 1, 2 }
  uselistorder i32 %v1_bf8c, { 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 18, 19, 20, 21, 22, 23, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 14, 15, 16, 17, 18, 19, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 38, 37, 39, 10, 11, 12, 14, 13, 16, 15, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 8, 9, 10 }
  uselistorder label %dec_label_pc_c6d0, { 1, 0 }
  uselistorder label %dec_label_pc_c5c8, { 1, 0 }
  uselistorder label %dec_label_pc_c51c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c474.preheader, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c6fc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c6fc:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_c6fc = load i32, i32* @r4, align 4
  %v12_c6fc = load i32, i32* @r7, align 4
  %v1_c700 = urem i32 %arg1, 256
  store i32 %v1_c700, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_c700, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_c718 = urem i32 %arg3, 256
  store i32 %v1_c718, i32* @r4, align 4
  %v2_c71c = call i32 @function_14094(i32 %v1_c700, i32 4)
  %v0_c720 = load i32, i32* @r5, align 4
  store i32 %v0_c720, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c71c, i32* %fp.global-to-local, align 4
  %v0_c730 = load i32, i32* @r4, align 4
  store i32 %v0_c730, i32* %r0.global-to-local, align 4
  %v4_c734 = inttoptr i32 %v0_c720 to i32*
  %v5_c734 = call i32 @function_a4e8(i32 %v0_c730, i32* %v4_c734, i32 2, i32 0)
  %v1_c740 = urem i32 %v5_c734, 256
  store i32 %v1_c740, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c74c = load i32, i32* @r5, align 4
  store i32 %v0_c74c, i32* %r1.global-to-local, align 4
  %v0_c750 = load i32, i32* @r4, align 4
  store i32 %v0_c750, i32* %r0.global-to-local, align 4
  %v5_c754 = trunc i32 %v5_c734 to i8
  %v6_c758 = inttoptr i32 %v0_c74c to i32*
  %v7_c758 = call i32 @function_a4e8(i32 %v0_c750, i32* %v6_c758, i32 3, i32 65535)
  %v0_c75c = load i32, i32* @r5, align 4
  store i32 %v0_c75c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_c76c = load i32, i32* @r4, align 4
  store i32 %v0_c76c, i32* %r0.global-to-local, align 4
  %v5_c770 = inttoptr i32 %v0_c75c to i32*
  %v6_c770 = call i32 @function_a4e8(i32 %v0_c76c, i32* %v5_c770, i32 4, i32 64)
  %v1_c778 = urem i32 %v6_c770, 256
  store i32 %v1_c778, i32* %ip.global-to-local, align 4
  %v0_c77c = load i32, i32* @r5, align 4
  store i32 %v0_c77c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c788 = load i32, i32* @r4, align 4
  store i32 %v0_c788, i32* %r0.global-to-local, align 4
  %v6_c790 = inttoptr i32 %v0_c77c to i32*
  %v7_c790 = call i32 @function_a4e8(i32 %v0_c788, i32* %v6_c790, i32 5, i32 1)
  %v1_c79c = urem i32 %v7_c790, 256
  store i32 %v1_c79c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c7a8 = load i32, i32* @r5, align 4
  store i32 %v0_c7a8, i32* %r1.global-to-local, align 4
  %v0_c7ac = load i32, i32* @r4, align 4
  store i32 %v0_c7ac, i32* %r0.global-to-local, align 4
  %v5_c7b4 = inttoptr i32 %v0_c7a8 to i32*
  %v6_c7b4 = call i32 @function_a4e8(i32 %v0_c7ac, i32* %v5_c7b4, i32 6, i32 65535)
  %v0_c7bc = load i32, i32* @r5, align 4
  store i32 %v0_c7bc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_c7b4, i32* @r7, align 4
  %v0_c7cc = load i32, i32* @r4, align 4
  store i32 %v0_c7cc, i32* %r0.global-to-local, align 4
  %v4_c7d0 = inttoptr i32 %v0_c7bc to i32*
  %v5_c7d0 = call i32 @function_a4e8(i32 %v0_c7cc, i32* %v4_c7d0, i32 7, i32 65535)
  %v0_c7d8 = load i32, i32* @r5, align 4
  store i32 %v0_c7d8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_c7d0, i32* @r6, align 4
  %v0_c7e8 = load i32, i32* @r4, align 4
  store i32 %v0_c7e8, i32* %r0.global-to-local, align 4
  %v4_c7ec = inttoptr i32 %v0_c7d8 to i32*
  %v5_c7ec = call i32 @function_a4e8(i32 %v0_c7e8, i32* %v4_c7ec, i32 17, i32 65535)
  %v0_c7f0 = load i32, i32* @r5, align 4
  store i32 %v0_c7f0, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c800 = load i32, i32* @r4, align 4
  store i32 %v0_c800, i32* %r0.global-to-local, align 4
  %v5_c804 = inttoptr i32 %v0_c7f0 to i32*
  %v6_c804 = call i32 @function_a4e8(i32 %v0_c800, i32* %v5_c804, i32 18, i32 0)
  %v0_c808 = load i32, i32* @r5, align 4
  store i32 %v0_c808, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c818 = load i32, i32* @r4, align 4
  store i32 %v0_c818, i32* %r0.global-to-local, align 4
  %v5_c81c = inttoptr i32 %v0_c808 to i32*
  %v6_c81c = call i32 @function_a4e8(i32 %v0_c818, i32* %v5_c81c, i32 11, i32 0)
  %v0_c820 = load i32, i32* @r5, align 4
  store i32 %v0_c820, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c830 = load i32, i32* @r4, align 4
  store i32 %v0_c830, i32* %r0.global-to-local, align 4
  %v5_c834 = inttoptr i32 %v0_c820 to i32*
  %v6_c834 = call i32 @function_a4e8(i32 %v0_c830, i32* %v5_c834, i32 12, i32 0)
  %v0_c838 = load i32, i32* @r5, align 4
  store i32 %v0_c838, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c848 = load i32, i32* @r4, align 4
  store i32 %v0_c848, i32* %r0.global-to-local, align 4
  %v5_c84c = inttoptr i32 %v0_c838 to i32*
  %v6_c84c = call i32 @function_a4e8(i32 %v0_c848, i32* %v5_c84c, i32 13, i32 0)
  %v0_c850 = load i32, i32* @r5, align 4
  store i32 %v0_c850, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c860 = load i32, i32* @r4, align 4
  store i32 %v0_c860, i32* %r0.global-to-local, align 4
  %v5_c864 = inttoptr i32 %v0_c850 to i32*
  %v6_c864 = call i32 @function_a4e8(i32 %v0_c860, i32* %v5_c864, i32 14, i32 0)
  %v0_c868 = load i32, i32* @r5, align 4
  store i32 %v0_c868, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c878 = load i32, i32* @r4, align 4
  store i32 %v0_c878, i32* %r0.global-to-local, align 4
  %v5_c87c = inttoptr i32 %v0_c868 to i32*
  %v6_c87c = call i32 @function_a4e8(i32 %v0_c878, i32* %v5_c87c, i32 15, i32 1)
  %v0_c880 = load i32, i32* @r5, align 4
  store i32 %v0_c880, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c890 = load i32, i32* @r4, align 4
  store i32 %v0_c890, i32* %r0.global-to-local, align 4
  %v5_c894 = inttoptr i32 %v0_c880 to i32*
  %v6_c894 = call i32 @function_a4e8(i32 %v0_c890, i32* %v5_c894, i32 16, i32 0)
  %v2_c8a0 = load i32, i32* @global_var_1eadc.85, align 4
  store i32 %v2_c8a0, i32* %r3.global-to-local, align 4
  %v0_c8a4 = load i32, i32* @r5, align 4
  store i32 %v0_c8a4, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_c8ac = load i32, i32* @r4, align 4
  store i32 %v0_c8ac, i32* %r0.global-to-local, align 4
  %v5_c8b0 = inttoptr i32 %v0_c8a4 to i32*
  %v6_c8b0 = call i32 @function_a47c(i32 %v0_c8ac, i32* %v5_c8b0, i32 25, i32 %v2_c8a0, i32 %v6_c894)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_c8c4 = call i32 @function_13d90(i32 2, i32 3, i32 6)
  store i32 %v3_c8c4, i32* %r0.global-to-local, align 4
  %v7_c8c8 = icmp eq i32 %v3_c8c4, -1
  store i1 %v7_c8c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c8c4, i32* %sb.global-to-local, align 4
  br i1 %v7_c8c8, label %dec_label_pc_ce34, label %dec_label_pc_c8d4

dec_label_pc_c8d4:                                ; preds = %dec_label_pc_c6fc
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c8dc = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c8dc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c8f0 = call i32 @function_13d60(i32 %v3_c8c4, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_c8f0, i32* %r0.global-to-local, align 4
  %v7_c8f4 = icmp eq i32 %v6_c8f0, -1
  store i1 %v7_c8f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c8f4, label %dec_label_pc_ce2c, label %dec_label_pc_c8fc

dec_label_pc_c8fc:                                ; preds = %dec_label_pc_c8d4
  store i32 0, i32* %stack_var_-40, align 4
  %v0_c910 = load i32, i32* @r7, align 4
  %v3_c910 = mul i32 %v0_c910, 65536
  store i32 %v3_c910, i32* %r4.global-to-local, align 4
  %v0_c914 = load i32, i32* @r6, align 4
  %v3_c918 = urem i32 %v7_c758, 65536
  store i32 %v3_c918, i32* %r3.global-to-local, align 4
  %v3_c91c = urem i32 %v0_c910, 65536
  store i32 %v3_c91c, i32* %ip.global-to-local, align 4
  %v3_c920 = urem i32 %v0_c914, 65536
  store i32 %v3_c920, i32* %r0.global-to-local, align 4
  %v1_c924 = urem i32 %v6_c81c, 256
  store i32 %v1_c924, i32* %r2.global-to-local, align 4
  %v0_c928 = load i32, i32* @sl, align 4
  %v2_c928 = icmp eq i32 %v0_c928, 0
  store i1 %v2_c928, i1* %cpsr_z.global-to-local, align 1
  %tmp69 = icmp slt i32 %v0_c928, 1
  br i1 %tmp69, label %dec_label_pc_cbd8, label %dec_label_pc_c940

dec_label_pc_c940:                                ; preds = %dec_label_pc_c8fc
  %v1_c950 = urem i32 %v0_c910, 256
  %v1_c958 = urem i32 %v7_c758, 256
  %v1_c95c = urem i32 %v0_c914, 256
  %tmp70 = mul i32 %v5_c7ec, 256
  %v3_c964 = mul nuw nsw i32 %v1_c95c, 256
  %v1_c968 = and i32 %tmp70, 65280
  %tmp71 = udiv i32 %v0_c914, 256
  %v4_c96c = urem i32 %tmp71, 256
  %v5_c96c = or i32 %v4_c96c, %v3_c964
  store i32 %v5_c96c, i32* @r6, align 4
  %tmp72 = udiv i32 %v5_c7ec, 256
  %v4_c970 = urem i32 %tmp72, 256
  %v5_c970 = or i32 %v4_c970, %v1_c968
  store i32 %v5_c970, i32* @r5, align 4
  %v3_c97c = mul nuw nsw i32 %v1_c958, 256
  %v1_c980 = urem i32 %v6_c81c, 2
  %tmp73 = udiv i32 %v7_c758, 256
  %v4_c984 = urem i32 %tmp73, 256
  %v5_c984 = or i32 %v4_c984, %v3_c97c
  store i32 %v5_c984, i32* @lr, align 4
  %v1_c988 = urem i32 %v6_c834, 2
  %v3_c998 = mul nuw nsw i32 %v1_c950, 256
  store i32 %v3_c998, i32* %r1.global-to-local, align 4
  %tmp74 = udiv i32 %v0_c910, 256
  %v4_c9a4 = urem i32 %tmp74, 256
  %v5_c9a4 = or i32 %v4_c9a4, %v3_c998
  store i32 %v5_c9a4, i32* @r7, align 4
  %v1_c9a8 = urem i32 %v6_c84c, 2
  %v1_c9ac = urem i32 %v6_c864, 2
  %v1_c9b0 = urem i32 %v6_c87c, 2
  %v1_c9c0 = urem i32 %v6_c894, 2
  store i32 %v1_c9c0, i32* %r0.global-to-local, align 4
  store i32 %v1_c958, i32* %r2.global-to-local, align 4
  store i32 %v1_c950, i32* %r3.global-to-local, align 4
  store i32 %v1_c95c, i32* %ip.global-to-local, align 4
  %v5_c9d0 = trunc i32 %tmp73 to i8
  %v5_c9e0 = trunc i32 %v0_c914 to i8
  store i32 0, i32* @r4, align 4
  %sext = mul i32 %v6_c770, 16777216
  %v4_ca30 = sdiv i32 %sext, 16777216
  %sext8 = mul i32 %v7_c758, 16777216
  %v4_ca48 = sdiv i32 %sext8, 16777216
  %tmp = sub nsw i32 0, %v1_c980
  %v4_caa4 = and i32 %tmp, 32
  %tmp78 = sub nsw i32 0, %v1_c988
  %v4_cab8 = and i32 %tmp78, 16
  %tmp79 = sub nsw i32 0, %v1_c9a8
  %v4_cacc = and i32 %tmp79, 8
  %tmp80 = sub nsw i32 0, %v1_c9ac
  %v4_cae0 = and i32 %tmp80, 4
  %tmp81 = sub nsw i32 0, %v1_c9b0
  %v3_caf4 = and i32 %tmp81, 2
  %v7_cb24 = sext i8 %v5_c9e0 to i32
  %sext77 = mul i32 %v0_c910, 16777216
  %v3_cb24 = sdiv i32 %sext77, 16777216
  br label %dec_label_pc_c9e8

dec_label_pc_c9e8:                                ; preds = %bb76, %dec_label_pc_c940
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_c9f0 = call i32 @function_14094(i32 128, i32 1)
  store i32 %v2_c9f0, i32* %r0.global-to-local, align 4
  %v3_c9f4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c9f4, i32* %r2.global-to-local, align 4
  %v1_c9f8 = load i32, i32* %fp.global-to-local, align 4
  %v2_c9f8 = load i32, i32* @r4, align 4
  %v5_c9f8 = mul i32 %v2_c9f8, 4
  %v6_c9f8 = add i32 %v5_c9f8, %v1_c9f8
  %v7_c9f8 = inttoptr i32 %v6_c9f8 to i32*
  store i32 %v2_c9f0, i32* %v7_c9f8, align 4
  %v0_c9fc = load i32, i32* %fp.global-to-local, align 4
  %v1_c9fc = load i32, i32* %r2.global-to-local, align 4
  %v4_c9fc = mul i32 %v1_c9fc, 4
  %v5_c9fc = add i32 %v4_c9fc, %v0_c9fc
  %v6_c9fc = inttoptr i32 %v5_c9fc to i32*
  %v7_c9fc = load i32, i32* %v6_c9fc, align 4
  store i32 %v7_c9fc, i32* %r4.global-to-local, align 4
  %v1_ca00 = inttoptr i32 %v7_c9fc to i8*
  %v2_ca00 = load i8, i8* %v1_ca00, align 1
  %tmp82 = urem i8 %v2_ca00, 16
  %v1_ca04 = zext i8 %tmp82 to i32
  %v1_ca08 = or i32 %v1_ca04, 64
  store i32 %v1_ca08, i32* %r3.global-to-local, align 4
  %v1_ca0c = trunc i32 %v1_ca08 to i8
  store i8 %v1_ca0c, i8* %v1_ca00, align 1
  %v0_ca10 = load i32, i32* %r4.global-to-local, align 4
  %v1_ca10 = inttoptr i32 %v0_ca10 to i8*
  %v2_ca10 = load i8, i8* %v1_ca10, align 1
  %v1_ca14 = and i8 %v2_ca10, -16
  %v1_ca18 = or i8 %v1_ca14, 5
  store i32 %v1_c79c, i32* %r0.global-to-local, align 4
  store i8 %v1_ca18, i8* %v1_ca10, align 1
  %v2_ca28 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca28 = add i32 %v2_ca28, 1
  %v4_ca28 = inttoptr i32 %v3_ca28 to i8*
  store i8 %v5_c754, i8* %v4_ca28, align 1
  store i32 %v4_ca30, i32* %r2.global-to-local, align 4
  %v2_ca34 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca34 = add i32 %v2_ca34, 4
  %v4_ca34 = inttoptr i32 %v3_ca34 to i8*
  store i8 %v5_c9d0, i8* %v4_ca34, align 1
  store i32 6, i32* %ip.global-to-local, align 4
  %v0_ca40 = load i32, i32* %r0.global-to-local, align 4
  %v2_ca40 = icmp eq i32 %v0_ca40, 0
  store i1 %v2_ca40, i1* %cpsr_z.global-to-local, align 1
  %v2_ca44 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca44 = add i32 %v2_ca44, 3
  %v4_ca44 = inttoptr i32 %v3_ca44 to i8*
  store i8 60, i8* %v4_ca44, align 1
  store i32 %v4_ca48, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ca50 = load i32, i32* %r2.global-to-local, align 4
  %v1_ca50 = trunc i32 %v0_ca50 to i8
  %v2_ca50 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca50 = add i32 %v2_ca50, 8
  %v4_ca50 = inttoptr i32 %v3_ca50 to i8*
  store i8 %v1_ca50, i8* %v4_ca50, align 1
  %v0_ca54 = load i32, i32* %ip.global-to-local, align 4
  %v1_ca54 = trunc i32 %v0_ca54 to i8
  %v2_ca54 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca54 = add i32 %v2_ca54, 9
  %v4_ca54 = inttoptr i32 %v3_ca54 to i8*
  store i8 %v1_ca54, i8* %v4_ca54, align 1
  %v0_ca58 = load i32, i32* %r3.global-to-local, align 4
  %v1_ca58 = trunc i32 %v0_ca58 to i8
  %v2_ca58 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca58 = add i32 %v2_ca58, 2
  %v4_ca58 = inttoptr i32 %v3_ca58 to i8*
  store i8 %v1_ca58, i8* %v4_ca58, align 1
  %v3_ca5c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ca5c, i32* %r2.global-to-local, align 4
  %v0_ca60 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ca60, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_c9e8
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_ca64 = load i32, i32* %r4.global-to-local, align 4
  %v4_ca64 = add i32 %v3_ca64, 6
  %v5_ca64 = inttoptr i32 %v4_ca64 to i8*
  store i8 64, i8* %v5_ca64, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c9e8, %bb
  %v0_ca68 = load i32, i32* %r0.global-to-local, align 4
  %v1_ca68 = trunc i32 %v0_ca68 to i8
  %v2_ca68 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca68 = add i32 %v2_ca68, 5
  %v4_ca68 = inttoptr i32 %v3_ca68 to i8*
  store i8 %v1_ca68, i8* %v4_ca68, align 1
  %v0_ca6c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ca6c, label %.thread9, label %bb75

.thread9:                                         ; preds = %.thread
  store i32 %v6_c8b0, i32* %r0.global-to-local, align 4
  br label %bb76

bb75:                                             ; preds = %.thread
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v6_c8b0, i32* %r0.global-to-local, align 4
  %v3_ca74 = load i32, i32* %r4.global-to-local, align 4
  %v4_ca74 = add i32 %v3_ca74, 7
  %v5_ca74 = inttoptr i32 %v4_ca74 to i8*
  store i8 0, i8* %v5_ca74, align 1
  %v0_ca7c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb76

bb76:                                             ; preds = %.thread9, %bb75
  %v0_ca7c = phi i32 [ %v6_c8b0, %.thread9 ], [ %v0_ca7c.pre, %bb75 ]
  %v0_ca78 = load i32, i32* %r2.global-to-local, align 4
  %v3_ca78 = mul i32 %v0_ca78, 32
  store i32 %v3_ca78, i32* %r3.global-to-local, align 4
  %v1_ca7c = load i32, i32* %r4.global-to-local, align 4
  %v2_ca7c = add i32 %v1_ca7c, 12
  %v3_ca7c = inttoptr i32 %v2_ca7c to i32*
  store i32 %v0_ca7c, i32* %v3_ca7c, align 4
  %v0_ca80 = load i32, i32* %r3.global-to-local, align 4
  %v1_ca80 = load i32, i32* %r2.global-to-local, align 4
  %tmp83 = mul i32 %v1_ca80, -8
  %v5_ca80 = add i32 %v0_ca80, %tmp83
  %v1_ca84 = load i32, i32* @r8, align 4
  %v2_ca84 = add i32 %v1_ca84, %v5_ca80
  store i32 %v2_ca84, i32* %r3.global-to-local, align 4
  %v1_ca88 = add i32 %v2_ca84, 16
  %v2_ca88 = inttoptr i32 %v1_ca88 to i32*
  %v3_ca88 = load i32, i32* %v2_ca88, align 4
  store i32 %v3_ca88, i32* %r2.global-to-local, align 4
  %v0_ca8c = load i32, i32* @r7, align 4
  %v1_ca8c = trunc i32 %v0_ca8c to i8
  %v2_ca8c = load i32, i32* %r4.global-to-local, align 4
  %v3_ca8c = add i32 %v2_ca8c, 20
  %v4_ca8c = inttoptr i32 %v3_ca8c to i8*
  store i8 %v1_ca8c, i8* %v4_ca8c, align 1
  %v0_ca90 = load i32, i32* %r2.global-to-local, align 4
  %v1_ca90 = load i32, i32* %r4.global-to-local, align 4
  %v2_ca90 = add i32 %v1_ca90, 16
  %v3_ca90 = inttoptr i32 %v2_ca90 to i32*
  store i32 %v0_ca90, i32* %v3_ca90, align 4
  %v0_ca94 = load i32, i32* %r4.global-to-local, align 4
  %v1_ca94 = add i32 %v0_ca94, 20
  store i32 %v1_ca94, i32* %r1.global-to-local, align 4
  %v1_ca98 = add i32 %v0_ca94, 33
  %v2_ca98 = inttoptr i32 %v1_ca98 to i8*
  %v3_ca98 = load i8, i8* %v2_ca98, align 1
  %v4_ca98 = zext i8 %v3_ca98 to i32
  store i32 %v1_c980, i32* %r2.global-to-local, align 4
  %v1_caa0 = and i32 %v4_ca98, 223
  %v5_caa4 = or i32 %v1_caa0, %v4_caa4
  store i32 %v5_caa4, i32* %r3.global-to-local, align 4
  %v1_caa8 = trunc i32 %v5_caa4 to i8
  store i8 %v1_caa8, i8* %v2_ca98, align 1
  %v0_caac = load i32, i32* %r1.global-to-local, align 4
  %v1_caac = add i32 %v0_caac, 13
  %v2_caac = inttoptr i32 %v1_caac to i8*
  %v3_caac = load i8, i8* %v2_caac, align 1
  %v4_caac = zext i8 %v3_caac to i32
  store i32 %v1_c988, i32* %r3.global-to-local, align 4
  %v1_cab4 = and i32 %v4_caac, 239
  %v5_cab8 = or i32 %v1_cab4, %v4_cab8
  store i32 %v5_cab8, i32* %r2.global-to-local, align 4
  %v1_cabc = trunc i32 %v5_cab8 to i8
  store i8 %v1_cabc, i8* %v2_caac, align 1
  %v0_cac0 = load i32, i32* %r1.global-to-local, align 4
  %v1_cac0 = add i32 %v0_cac0, 13
  %v2_cac0 = inttoptr i32 %v1_cac0 to i8*
  %v3_cac0 = load i8, i8* %v2_cac0, align 1
  %v4_cac0 = zext i8 %v3_cac0 to i32
  store i32 %v1_c9a8, i32* %ip.global-to-local, align 4
  %v1_cac8 = and i32 %v4_cac0, 247
  %v5_cacc = or i32 %v1_cac8, %v4_cacc
  store i32 %v5_cacc, i32* %r3.global-to-local, align 4
  %v1_cad0 = trunc i32 %v5_cacc to i8
  store i8 %v1_cad0, i8* %v2_cac0, align 1
  %v0_cad4 = load i32, i32* %r1.global-to-local, align 4
  %v1_cad4 = add i32 %v0_cad4, 13
  %v2_cad4 = inttoptr i32 %v1_cad4 to i8*
  %v3_cad4 = load i8, i8* %v2_cad4, align 1
  %v4_cad4 = zext i8 %v3_cad4 to i32
  store i32 %v1_c9ac, i32* %r0.global-to-local, align 4
  %v1_cadc = and i32 %v4_cad4, 251
  %v5_cae0 = or i32 %v1_cadc, %v4_cae0
  store i32 %v5_cae0, i32* %r2.global-to-local, align 4
  %v1_cae4 = trunc i32 %v5_cae0 to i8
  store i8 %v1_cae4, i8* %v2_cad4, align 1
  %v0_cae8 = load i32, i32* %r1.global-to-local, align 4
  %v1_cae8 = add i32 %v0_cae8, 13
  %v2_cae8 = inttoptr i32 %v1_cae8 to i8*
  %v3_cae8 = load i8, i8* %v2_cae8, align 1
  %v4_cae8 = zext i8 %v3_cae8 to i32
  store i32 %v1_c9b0, i32* %r2.global-to-local, align 4
  %v1_caf0 = and i32 %v4_cae8, 253
  %v4_caf4 = or i32 %v1_caf0, %v3_caf4
  store i32 %v4_caf4, i32* %r3.global-to-local, align 4
  %v1_caf8 = trunc i32 %v4_caf4 to i8
  store i8 %v1_caf8, i8* %v2_cae8, align 1
  %v0_cafc = load i32, i32* %r1.global-to-local, align 4
  %v1_cafc = add i32 %v0_cafc, 12
  %v2_cafc = inttoptr i32 %v1_cafc to i8*
  %v3_cafc = load i8, i8* %v2_cafc, align 1
  %v4_cafc = zext i8 %v3_cafc to i32
  store i32 %v4_cafc, i32* %r2.global-to-local, align 4
  %v1_cb00 = add i32 %v0_cafc, 13
  %v2_cb00 = inttoptr i32 %v1_cb00 to i8*
  %v3_cb00 = load i8, i8* %v2_cb00, align 1
  %v4_cb00 = zext i8 %v3_cb00 to i32
  %tmp84 = urem i8 %v3_cafc, 16
  %v1_cb08 = zext i8 %tmp84 to i32
  %v1_cb0c = and i32 %v4_cb00, 254
  %v2_cb10 = or i32 %v1_cb0c, %v1_c9c0
  %v1_cb14 = or i32 %v1_cb08, 160
  store i32 %v1_cb14, i32* %r2.global-to-local, align 4
  %v1_cb18 = trunc i32 %v2_cb10 to i8
  store i8 %v1_cb18, i8* %v2_cb00, align 1
  %v0_cb1c = load i32, i32* %r2.global-to-local, align 4
  %v1_cb1c = trunc i32 %v0_cb1c to i8
  %v2_cb1c = load i32, i32* %r1.global-to-local, align 4
  %v3_cb1c = add i32 %v2_cb1c, 12
  %v4_cb1c = inttoptr i32 %v3_cb1c to i8*
  store i8 %v1_cb1c, i8* %v4_cb1c, align 1
  store i32 %v3_cb24, i32* %r0.global-to-local, align 4
  store i32 %v7_cb24, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_cb30 = load i32, i32* %r1.global-to-local, align 4
  %v3_cb30 = add i32 %v2_cb30, 3
  %v4_cb30 = inttoptr i32 %v3_cb30 to i8*
  store i8 %v5_c9e0, i8* %v4_cb30, align 1
  %v0_cb34 = load i32, i32* %r0.global-to-local, align 4
  %v1_cb34 = trunc i32 %v0_cb34 to i8
  %v2_cb34 = load i32, i32* %r1.global-to-local, align 4
  %v3_cb34 = add i32 %v2_cb34, 1
  %v4_cb34 = inttoptr i32 %v3_cb34 to i8*
  store i8 %v1_cb34, i8* %v4_cb34, align 1
  %v0_cb38 = load i32, i32* @r6, align 4
  %v1_cb38 = trunc i32 %v0_cb38 to i8
  %v2_cb38 = load i32, i32* %r1.global-to-local, align 4
  %v3_cb38 = add i32 %v2_cb38, 2
  %v4_cb38 = inttoptr i32 %v3_cb38 to i8*
  store i8 %v1_cb38, i8* %v4_cb38, align 1
  %v0_cb3c = load i32, i32* @r5, align 4
  %v1_cb3c = load i32, i32* %r1.global-to-local, align 4
  %v2_cb3c = add i32 %v1_cb3c, 4
  %v3_cb3c = inttoptr i32 %v2_cb3c to i32*
  store i32 %v0_cb3c, i32* %v3_cb3c, align 4
  %v0_cb40 = load i32, i32* %ip.global-to-local, align 4
  %v1_cb40 = trunc i32 %v0_cb40 to i8
  %v2_cb40 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb40 = add i32 %v2_cb40, 41
  %v4_cb40 = inttoptr i32 %v3_cb40 to i8*
  store i8 %v1_cb40, i8* %v4_cb40, align 1
  %v0_cb44 = load i32, i32* %r3.global-to-local, align 4
  %v1_cb44 = trunc i32 %v0_cb44 to i8
  %v2_cb44 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb44 = add i32 %v2_cb44, 40
  %v4_cb44 = inttoptr i32 %v3_cb44 to i8*
  store i8 %v1_cb44, i8* %v4_cb44, align 1
  %v0_cb48 = call i32 @function_fbfc()
  %v1_cb4c = mul i32 %v0_cb48, 256
  %v1_cb50 = and i32 %v1_cb4c, 3840
  %v1_cb54 = or i32 %v1_cb50, 28672
  %v3_cb5c = add nuw nsw i32 %v1_cb54, 2048
  %v3_cb687 = udiv i32 %v3_cb5c, 256
  store i32 %v3_cb687, i32* %r1.global-to-local, align 4
  %v0_cb6c = load i32, i32* %r4.global-to-local, align 4
  %v1_cb6c = add i32 %v0_cb6c, 42
  store i32 %v1_cb6c, i32* %r2.global-to-local, align 4
  %v4_cb70 = inttoptr i32 %v1_cb6c to i8*
  store i8 5, i8* %v4_cb70, align 1
  %v0_cb74 = load i32, i32* %r1.global-to-local, align 4
  %v1_cb74 = trunc i32 %v0_cb74 to i8
  %v2_cb74 = load i32, i32* %r2.global-to-local, align 4
  %v3_cb74 = add i32 %v2_cb74, 1
  %v4_cb74 = inttoptr i32 %v3_cb74 to i8*
  store i8 %v1_cb74, i8* %v4_cb74, align 1
  store i32 8, i32* %r3.global-to-local, align 4
  %v2_cb80 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb80 = add i32 %v2_cb80, 47
  %v4_cb80 = inttoptr i32 %v3_cb80 to i8*
  store i8 10, i8* %v4_cb80, align 1
  store i32 4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_cb8c = load i32, i32* %r3.global-to-local, align 4
  %v1_cb8c = trunc i32 %v0_cb8c to i8
  %v2_cb8c = load i32, i32* %r4.global-to-local, align 4
  %v3_cb8c = add i32 %v2_cb8c, 46
  %v4_cb8c = inttoptr i32 %v3_cb8c to i8*
  store i8 %v1_cb8c, i8* %v4_cb8c, align 1
  %v0_cb90 = load i32, i32* %r2.global-to-local, align 4
  %v1_cb90 = trunc i32 %v0_cb90 to i8
  %v2_cb90 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb90 = add i32 %v2_cb90, 45
  %v4_cb90 = inttoptr i32 %v3_cb90 to i8*
  store i8 %v1_cb90, i8* %v4_cb90, align 1
  %v0_cb94 = load i32, i32* %r0.global-to-local, align 4
  %v1_cb94 = trunc i32 %v0_cb94 to i8
  %v2_cb94 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb94 = add i32 %v2_cb94, 44
  %v4_cb94 = inttoptr i32 %v3_cb94 to i8*
  store i8 %v1_cb94, i8* %v4_cb94, align 1
  %v0_cb98 = call i32 @function_fbfc()
  store i32 %v0_cb98, i32* %r0.global-to-local, align 4
  %v2_cba0 = load i32, i32* %r4.global-to-local, align 4
  %v3_cba0 = add i32 %v2_cba0, 56
  %v4_cba0 = inttoptr i32 %v3_cba0 to i8*
  store i8 1, i8* %v4_cba0, align 1
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_cbb0 = load i32, i32* %r4.global-to-local, align 4
  %v2_cbb0 = add i32 %v1_cbb0, 48
  %v3_cbb0 = inttoptr i32 %v2_cbb0 to i32*
  store i32 %v0_cb98, i32* %v3_cbb0, align 4
  %v0_cbb4 = load i32, i32* %r2.global-to-local, align 4
  %v1_cbb4 = trunc i32 %v0_cbb4 to i8
  %v2_cbb4 = load i32, i32* %r4.global-to-local, align 4
  %v3_cbb4 = add i32 %v2_cbb4, 58
  %v4_cbb4 = inttoptr i32 %v3_cbb4 to i8*
  store i8 %v1_cbb4, i8* %v4_cbb4, align 1
  %v0_cbb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_cbb8 = trunc i32 %v0_cbb8 to i8
  %v2_cbb8 = load i32, i32* %r4.global-to-local, align 4
  %v3_cbb8 = add i32 %v2_cbb8, 59
  %v4_cbb8 = inttoptr i32 %v3_cbb8 to i8*
  store i8 %v1_cbb8, i8* %v4_cbb8, align 1
  %v0_cbbc = load i32, i32* %ip.global-to-local, align 4
  %v1_cbbc = load i32, i32* %r4.global-to-local, align 4
  %v2_cbbc = add i32 %v1_cbbc, 52
  %v3_cbbc = inttoptr i32 %v2_cbbc to i32*
  store i32 %v0_cbbc, i32* %v3_cbbc, align 4
  %v0_cbc0 = load i32, i32* %r2.global-to-local, align 4
  %v1_cbc0 = trunc i32 %v0_cbc0 to i8
  %v2_cbc0 = load i32, i32* %r4.global-to-local, align 4
  %v3_cbc0 = add i32 %v2_cbc0, 57
  %v4_cbc0 = inttoptr i32 %v3_cbc0 to i8*
  store i8 %v1_cbc0, i8* %v4_cbc0, align 1
  %v3_cbc4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cbc4, i32* %r3.global-to-local, align 4
  %v1_cbc8 = add i32 %v3_cbc4, 1
  store i32 %v1_cbc8, i32* @r4, align 4
  %v0_cbcc = load i32, i32* @sl, align 4
  %v9_cbcc = icmp eq i32 %v0_cbcc, %v1_cbc8
  store i1 %v9_cbcc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cbc8, i32* %stack_var_-40, align 4
  %v8_cbd4 = icmp sgt i32 %v0_cbcc, %v1_cbc8
  br i1 %v8_cbd4, label %dec_label_pc_c9e8, label %dec_label_pc_cbd8

dec_label_pc_cbd8:                                ; preds = %bb76, %dec_label_pc_c8fc
  %v0_cbd8 = phi i32 [ %v0_c928, %dec_label_pc_c8fc ], [ %v0_cbcc, %bb76 ]
  %v2_cbd8 = icmp eq i32 %v0_cbd8, 0
  store i1 %v2_cbd8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_cd90 = icmp eq i32 %v3_c918, 65535
  %v2_ce0c = icmp eq i32 %v1_c924, 0
  %v2_cc14 = icmp eq i32 %v6_c8b0, -1
  %v7_cc14 = icmp eq i32 %v6_c8b0, -1
  br label %dec_label_pc_cbe0.outer

dec_label_pc_cbe0.outer:                          ; preds = %dec_label_pc_cd0c, %dec_label_pc_cbd8
  %v1_cbe0.ph.in = phi i32 [ %v0_cd00, %dec_label_pc_cd0c ], [ %v0_cbd8, %dec_label_pc_cbd8 ]
  %v0_cbe0.ph = phi i1 [ %v2_cd0c, %dec_label_pc_cd0c ], [ %v2_cbd8, %dec_label_pc_cbd8 ]
  %v1_cbe0.ph = icmp slt i32 %v1_cbe0.ph.in, 0
  %v4_cbe0 = or i1 %v1_cbe0.ph, %v0_cbe0.ph
  br label %dec_label_pc_cbe0

dec_label_pc_cbe0:                                ; preds = %dec_label_pc_cbe0.outer, %dec_label_pc_cbe0
  br i1 %v4_cbe0, label %dec_label_pc_cbe0, label %dec_label_pc_cbe4

dec_label_pc_cbe4:                                ; preds = %dec_label_pc_cbe0
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_cbf0

dec_label_pc_cbf0:                                ; preds = %dec_label_pc_cc6c, %dec_label_pc_cbe4
  %v1_cc00 = phi i32 [ %v1_ccfc, %dec_label_pc_cc6c ], [ 0, %dec_label_pc_cbe4 ]
  %v5_cbf4 = mul i32 %v1_cc00, 24
  %v1_cbf8 = load i32, i32* @r8, align 4
  %v2_cbf8 = add i32 %v1_cbf8, %v5_cbf4
  store i32 %v2_cbf8, i32* %r3.global-to-local, align 4
  %v1_cbfc = add i32 %v2_cbf8, 20
  %v2_cbfc = inttoptr i32 %v1_cbfc to i8*
  %v3_cbfc = load i8, i8* %v2_cbfc, align 1
  %v4_cbfc = zext i8 %v3_cbfc to i32
  store i32 %v4_cbfc, i32* %r2.global-to-local, align 4
  %v0_cc00 = load i32, i32* %fp.global-to-local, align 4
  %v4_cc00 = mul i32 %v1_cc00, 4
  %v5_cc00 = add i32 %v0_cc00, %v4_cc00
  %v6_cc00 = inttoptr i32 %v5_cc00 to i32*
  %v7_cc00 = load i32, i32* %v6_cc00, align 4
  store i32 %v7_cc00, i32* @r5, align 4
  %v7_cc04 = icmp eq i8 %v3_cbfc, 31
  store i1 %v7_cc04, i1* %cpsr_z.global-to-local, align 1
  %v1_cc08 = add i32 %v7_cc00, 20
  store i32 %v1_cc08, i32* @r6, align 4
  %tmp85 = icmp ult i8 %v3_cbfc, 32
  br i1 %tmp85, label %dec_label_pc_cd18, label %dec_label_pc_cc10

dec_label_pc_cc10:                                ; preds = %dec_label_pc_cbf0
  store i32 %v6_c8b0, i32* %r0.global-to-local, align 4
  store i1 %v7_cc14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cc14, label %dec_label_pc_cd80, label %dec_label_pc_cc1c

dec_label_pc_cc1c:                                ; preds = %dec_label_pc_cd18, %dec_label_pc_cc10
  store i32 %v3_c918, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_cd90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_cd90, label %dec_label_pc_cd9c, label %dec_label_pc_cc30

dec_label_pc_cc30:                                ; preds = %dec_label_pc_cd80.dec_label_pc_cc30_crit_edge, %dec_label_pc_cc1c
  %v1_cc34 = phi i32 [ %v1_cc34.pre, %dec_label_pc_cd80.dec_label_pc_cc30_crit_edge ], [ 65535, %dec_label_pc_cc1c ]
  store i32 %v3_c91c, i32* %r3.global-to-local, align 4
  %v9_cc34 = icmp eq i32 %v3_c91c, %v1_cc34
  store i1 %v9_cc34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cc34, label %dec_label_pc_cdb8, label %dec_label_pc_cc3c

dec_label_pc_cc3c:                                ; preds = %dec_label_pc_cd9c.dec_label_pc_cc3c_crit_edge, %dec_label_pc_cc30
  %v1_cc40 = phi i32 [ %v1_cc40.pre, %dec_label_pc_cd9c.dec_label_pc_cc3c_crit_edge ], [ %v1_cc34, %dec_label_pc_cc30 ]
  store i32 %v3_c920, i32* %ip.global-to-local, align 4
  %v9_cc40 = icmp eq i32 %v3_c920, %v1_cc40
  store i1 %v9_cc40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cc40, label %dec_label_pc_cdd4, label %dec_label_pc_cc48

dec_label_pc_cc48:                                ; preds = %dec_label_pc_cdb8.dec_label_pc_cc48_crit_edge, %dec_label_pc_cc3c
  %v1_cc4c = phi i32 [ %v1_cc4c.pre, %dec_label_pc_cdb8.dec_label_pc_cc48_crit_edge ], [ %v1_cc40, %dec_label_pc_cc3c ]
  store i32 %v5_c7ec, i32* %r0.global-to-local, align 4
  %v9_cc4c = icmp eq i32 %v5_c7ec, %v1_cc4c
  store i1 %v9_cc4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cc4c, label %dec_label_pc_cdf0, label %dec_label_pc_cc54

dec_label_pc_cc54:                                ; preds = %dec_label_pc_cdd4.dec_label_pc_cc54_crit_edge, %dec_label_pc_cc48
  %v1_cc58 = phi i32 [ %v1_cc58.pre, %dec_label_pc_cdd4.dec_label_pc_cc54_crit_edge ], [ %v1_cc4c, %dec_label_pc_cc48 ]
  store i32 %v6_c804, i32* %r2.global-to-local, align 4
  %v9_cc58 = icmp eq i32 %v6_c804, %v1_cc58
  store i1 %v9_cc58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cc58, label %dec_label_pc_ce04, label %dec_label_pc_cc60

dec_label_pc_cc60:                                ; preds = %dec_label_pc_cdf0, %dec_label_pc_cc54
  store i32 %v1_c924, i32* %r3.global-to-local, align 4
  store i1 %v2_ce0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ce0c, label %dec_label_pc_cc6c, label %dec_label_pc_ce18

dec_label_pc_cc6c:                                ; preds = %dec_label_pc_cc60, %dec_label_pc_ce04, %dec_label_pc_ce18
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_cc70 = load i32, i32* %r7.global-to-local, align 4
  %v1_cc70 = trunc i32 %v0_cc70 to i8
  %v2_cc70 = load i32, i32* @r5, align 4
  %v3_cc70 = add i32 %v2_cc70, 10
  %v4_cc70 = inttoptr i32 %v3_cc70 to i8*
  store i8 %v1_cc70, i8* %v4_cc70, align 1
  %v0_cc74 = load i32, i32* %r7.global-to-local, align 4
  %v1_cc74 = trunc i32 %v0_cc74 to i8
  %v2_cc74 = load i32, i32* @r5, align 4
  %v3_cc74 = add i32 %v2_cc74, 11
  %v4_cc74 = inttoptr i32 %v3_cc74 to i8*
  store i8 %v1_cc74, i8* %v4_cc74, align 1
  %v0_cc78 = load i32, i32* @r5, align 4
  store i32 %v0_cc78, i32* @r0, align 4
  %v2_cc7c = call i32 @function_e424(i32 %v0_cc78, i32 20)
  %v3_cc7c = trunc i32 %v2_cc7c to i8
  %v4_cc8027 = udiv i32 %v2_cc7c, 256
  %v1_cc84 = trunc i32 %v4_cc8027 to i8
  %v2_cc84 = load i32, i32* @r5, align 4
  %v3_cc84 = add i32 %v2_cc84, 11
  %v4_cc84 = inttoptr i32 %v3_cc84 to i8*
  store i8 %v1_cc84, i8* %v4_cc84, align 1
  %v3_cc88 = load i32, i32* @r5, align 4
  %v4_cc88 = add i32 %v3_cc88, 10
  %v5_cc88 = inttoptr i32 %v4_cc88 to i8*
  store i8 %v3_cc7c, i8* %v5_cc88, align 1
  %v0_cc8c = load i32, i32* @r6, align 4
  store i32 %v0_cc8c, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_cc98 = load i32, i32* %r7.global-to-local, align 4
  %v1_cc98 = trunc i32 %v0_cc98 to i8
  %v3_cc98 = add i32 %v0_cc8c, 16
  %v4_cc98 = inttoptr i32 %v3_cc98 to i8*
  store i8 %v1_cc98, i8* %v4_cc98, align 1
  %v0_cc9c = load i32, i32* %r7.global-to-local, align 4
  %v1_cc9c = trunc i32 %v0_cc9c to i8
  %v2_cc9c = load i32, i32* @r6, align 4
  %v3_cc9c = add i32 %v2_cc9c, 17
  %v4_cc9c = inttoptr i32 %v3_cc9c to i8*
  store i8 %v1_cc9c, i8* %v4_cc9c, align 1
  %v0_cca0 = load i32, i32* @r5, align 4
  store i32 %v0_cca0, i32* %r0.global-to-local, align 4
  %v4_cca4 = call i32 @function_e480(i32 %v0_cca0, i32 %v0_cc8c, i32 10240, i32 40)
  %v5_cca4 = trunc i32 %v4_cca4 to i8
  store i32 %v4_cca4, i32* %r0.global-to-local, align 4
  %v4_cca828 = udiv i32 %v4_cca4, 256
  %v1_ccac = trunc i32 %v4_cca828 to i8
  %v2_ccac = load i32, i32* @r6, align 4
  %v3_ccac = add i32 %v2_ccac, 17
  %v4_ccac = inttoptr i32 %v3_ccac to i8*
  store i8 %v1_ccac, i8* %v4_ccac, align 1
  %v3_ccb0 = load i32, i32* @r6, align 4
  %v4_ccb0 = add i32 %v3_ccb0, 16
  %v5_ccb0 = inttoptr i32 %v4_ccb0 to i8*
  store i8 %v5_cca4, i8* %v5_ccb0, align 1
  %v3_ccb4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ccb4, i32* %r3.global-to-local, align 4
  %v0_ccb8 = load i32, i32* @r5, align 4
  %v1_ccb8 = add i32 %v0_ccb8, 20
  %v2_ccb8 = inttoptr i32 %v1_ccb8 to i32*
  %v3_ccb8 = load i32, i32* %v2_ccb8, align 4
  %v3_ccc0 = udiv i32 %v3_ccb8, 65536
  store i32 %v3_ccc0, i32* %r2.global-to-local, align 4
  %v5_ccc4 = mul i32 %v3_ccb4, 24
  %v1_ccc8 = load i32, i32* @r8, align 4
  %v2_ccc8 = add i32 %v1_ccc8, %v5_ccc4
  store i32 %v2_ccc8, i32* %ip.global-to-local, align 4
  %v3_cccc26 = udiv i32 %v3_ccb8, 16777216
  %v1_ccd0 = trunc i32 %v3_cccc26 to i8
  %v3_ccd0 = add i32 %v2_ccc8, 3
  %v4_ccd0 = inttoptr i32 %v3_ccd0 to i8*
  store i8 %v1_ccd0, i8* %v4_ccd0, align 1
  %v0_ccd4 = load i32, i32* %r2.global-to-local, align 4
  %v1_ccd4 = trunc i32 %v0_ccd4 to i8
  %v2_ccd4 = load i32, i32* %ip.global-to-local, align 4
  %v3_ccd4 = add i32 %v2_ccd4, 2
  %v4_ccd4 = inttoptr i32 %v3_ccd4 to i8*
  store i8 %v1_ccd4, i8* %v4_ccd4, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ccdc = load i32, i32* @r5, align 4
  store i32 %v0_ccdc, i32* %r1.global-to-local, align 4
  %v0_cce0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_cce0, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_ccec = load i32, i32* %ip.global-to-local, align 4
  %v6_ccf4 = inttoptr i32 %v0_ccdc to i32*
  %v7_ccf4 = call i32 @function_13d2c(i32 %v0_cce0, i32* %v6_ccf4, i32 60, i32 16384, i32 %v0_ccec, i32 16)
  %v3_ccf8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ccf8, i32* %r3.global-to-local, align 4
  %v1_ccfc = add i32 %v3_ccf8, 1
  store i32 %v1_ccfc, i32* %r0.global-to-local, align 4
  %v0_cd00 = load i32, i32* @sl, align 4
  %v9_cd00 = icmp eq i32 %v0_cd00, %v1_ccfc
  store i1 %v9_cd00, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ccfc, i32* %stack_var_-40, align 4
  %v8_cd08 = icmp sgt i32 %v0_cd00, %v1_ccfc
  br i1 %v8_cd08, label %dec_label_pc_cbf0, label %dec_label_pc_cd0c

dec_label_pc_cd0c:                                ; preds = %dec_label_pc_cc6c
  %v2_cd0c = icmp eq i32 %v0_cd00, 0
  store i1 %v2_cd0c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_cbe0.outer

dec_label_pc_cd18:                                ; preds = %dec_label_pc_cbf0
  %v1_cd18 = add i32 %v2_cbf8, 16
  %v2_cd18 = inttoptr i32 %v1_cd18 to i32*
  %v3_cd18 = load i32, i32* %v2_cd18, align 4
  store i32 %v3_cd18, i32* %r4.global-to-local, align 4
  %v0_cd1c = call i32 @function_fbfc()
  store i32 %v0_cd1c, i32* %r0.global-to-local, align 4
  %v3_cd20 = load i32, i32* %stack_var_-40, align 4
  %v5_cd28 = mul i32 %v3_cd20, 24
  %v0_cd2c = load i32, i32* %r4.global-to-local, align 4
  %v1_cd30 = load i32, i32* @r8, align 4
  %v2_cd30 = add i32 %v1_cd30, %v5_cd28
  store i32 %v2_cd30, i32* %r1.global-to-local, align 4
  %v1_cd34 = and i32 %v0_cd2c, 65280
  store i32 %v1_cd34, i32* %r3.global-to-local, align 4
  %v1_cd2c = udiv i32 %v0_cd2c, 256
  %v3_cd38 = and i32 %v1_cd2c, 65280
  store i32 %v3_cd38, i32* %r2.global-to-local, align 4
  %v3_cd3c = mul i32 %v0_cd2c, 16777216
  store i32 %v3_cd3c, i32* %ip.global-to-local, align 4
  %v1_cd40 = add i32 %v2_cd30, 20
  %v2_cd40 = inttoptr i32 %v1_cd40 to i8*
  %v3_cd40 = load i8, i8* %v2_cd40, align 1
  %v4_cd40 = zext i8 %v3_cd40 to i32
  %v4_cd44 = mul nuw nsw i32 %v1_cd34, 256
  %v5_cd44 = or i32 %v4_cd44, %v3_cd3c
  store i32 %v5_cd44, i32* %ip.global-to-local, align 4
  %v2_cd4c = call i32 @llvm.bswap.i32(i32 %v0_cd2c)
  %v7_cd50 = lshr i32 %v0_cd1c, %v4_cd40
  %v8_cd50 = add i32 %v7_cd50, %v2_cd4c
  store i32 %v8_cd50, i32* %r2.global-to-local, align 4
  %v3_cd5c = mul i32 %v8_cd50, 16777216
  %v1_cd54 = mul i32 %v8_cd50, 256
  %v4_cd60 = and i32 %v1_cd54, 16711680
  %v5_cd60 = or i32 %v4_cd60, %v3_cd5c
  store i32 %v5_cd60, i32* %r1.global-to-local, align 4
  store i32 %v6_c8b0, i32* %r0.global-to-local, align 4
  %v2_cd70 = call i32 @llvm.bswap.i32(i32 %v8_cd50)
  store i32 %v2_cd70, i32* %r3.global-to-local, align 4
  store i1 %v7_cc14, i1* %cpsr_z.global-to-local, align 1
  %v1_cd78 = load i32, i32* @r5, align 4
  %v2_cd78 = add i32 %v1_cd78, 16
  %v3_cd78 = inttoptr i32 %v2_cd78 to i32*
  store i32 %v2_cd70, i32* %v3_cd78, align 4
  br i1 %v2_cc14, label %dec_label_pc_cd80, label %dec_label_pc_cc1c

dec_label_pc_cd80:                                ; preds = %dec_label_pc_cd18, %dec_label_pc_cc10
  %v0_cd80 = call i32 @function_fbfc()
  store i32 %v0_cd80, i32* %r0.global-to-local, align 4
  store i32 %v3_c918, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_cd90, i1* %cpsr_z.global-to-local, align 1
  %v1_cd94 = load i32, i32* @r5, align 4
  %v2_cd94 = add i32 %v1_cd94, 12
  %v3_cd94 = inttoptr i32 %v2_cd94 to i32*
  store i32 %v0_cd80, i32* %v3_cd94, align 4
  br i1 %v3_cd90, label %dec_label_pc_cd9c, label %dec_label_pc_cd80.dec_label_pc_cc30_crit_edge

dec_label_pc_cd80.dec_label_pc_cc30_crit_edge:    ; preds = %dec_label_pc_cd80
  %v1_cc34.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cc30

dec_label_pc_cd9c:                                ; preds = %dec_label_pc_cd80, %dec_label_pc_cc1c
  %v0_cd9c = call i32 @function_fbfc()
  %v1_cd9c = trunc i32 %v0_cd9c to i8
  store i32 %v0_cd9c, i32* %r0.global-to-local, align 4
  %v4_cda029 = udiv i32 %v0_cd9c, 256
  %v1_cda4 = trunc i32 %v4_cda029 to i8
  %v2_cda4 = load i32, i32* @r5, align 4
  %v3_cda4 = add i32 %v2_cda4, 5
  %v4_cda4 = inttoptr i32 %v3_cda4 to i8*
  store i8 %v1_cda4, i8* %v4_cda4, align 1
  store i32 %v3_c91c, i32* %r3.global-to-local, align 4
  %v1_cdac = load i32, i32* @r4, align 4
  %v9_cdac = icmp eq i32 %v3_c91c, %v1_cdac
  store i1 %v9_cdac, i1* %cpsr_z.global-to-local, align 1
  %v3_cdb0 = load i32, i32* @r5, align 4
  %v4_cdb0 = add i32 %v3_cdb0, 4
  %v5_cdb0 = inttoptr i32 %v4_cdb0 to i8*
  store i8 %v1_cd9c, i8* %v5_cdb0, align 1
  %v0_cdb4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cdb4, label %dec_label_pc_cdb8, label %dec_label_pc_cd9c.dec_label_pc_cc3c_crit_edge

dec_label_pc_cd9c.dec_label_pc_cc3c_crit_edge:    ; preds = %dec_label_pc_cd9c
  %v1_cc40.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cc3c

dec_label_pc_cdb8:                                ; preds = %dec_label_pc_cd9c, %dec_label_pc_cc30
  %v0_cdb8 = call i32 @function_fbfc()
  %v1_cdb8 = trunc i32 %v0_cdb8 to i8
  store i32 %v0_cdb8, i32* %r0.global-to-local, align 4
  store i32 %v3_c920, i32* %ip.global-to-local, align 4
  %v4_cdc0 = sdiv i32 %v0_cdb8, 256
  store i32 %v4_cdc0, i32* %r3.global-to-local, align 4
  %v1_cdc4 = load i32, i32* @r4, align 4
  %v9_cdc4 = icmp eq i32 %v3_c920, %v1_cdc4
  store i1 %v9_cdc4, i1* %cpsr_z.global-to-local, align 1
  %v3_cdc8 = load i32, i32* @r5, align 4
  %v4_cdc8 = add i32 %v3_cdc8, 20
  %v5_cdc8 = inttoptr i32 %v4_cdc8 to i8*
  store i8 %v1_cdb8, i8* %v5_cdc8, align 1
  %v0_cdcc = load i32, i32* %r3.global-to-local, align 4
  %v1_cdcc = trunc i32 %v0_cdcc to i8
  %v2_cdcc = load i32, i32* @r6, align 4
  %v3_cdcc = add i32 %v2_cdcc, 1
  %v4_cdcc = inttoptr i32 %v3_cdcc to i8*
  store i8 %v1_cdcc, i8* %v4_cdcc, align 1
  %v0_cdd0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cdd0, label %dec_label_pc_cdd4, label %dec_label_pc_cdb8.dec_label_pc_cc48_crit_edge

dec_label_pc_cdb8.dec_label_pc_cc48_crit_edge:    ; preds = %dec_label_pc_cdb8
  %v1_cc4c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cc48

dec_label_pc_cdd4:                                ; preds = %dec_label_pc_cdb8, %dec_label_pc_cc3c
  %v0_cdd4 = call i32 @function_fbfc()
  %v1_cdd4 = trunc i32 %v0_cdd4 to i8
  %v4_cdd8 = sdiv i32 %v0_cdd4, 256
  store i32 %v4_cdd8, i32* %r3.global-to-local, align 4
  %v3_cddc = load i32, i32* @r6, align 4
  %v4_cddc = add i32 %v3_cddc, 2
  %v5_cddc = inttoptr i32 %v4_cddc to i8*
  store i8 %v1_cdd4, i8* %v5_cddc, align 1
  store i32 %v5_c7ec, i32* %r0.global-to-local, align 4
  %v1_cde4 = load i32, i32* @r4, align 4
  %v9_cde4 = icmp eq i32 %v5_c7ec, %v1_cde4
  store i1 %v9_cde4, i1* %cpsr_z.global-to-local, align 1
  %v0_cde8 = load i32, i32* %r3.global-to-local, align 4
  %v1_cde8 = trunc i32 %v0_cde8 to i8
  %v2_cde8 = load i32, i32* @r6, align 4
  %v3_cde8 = add i32 %v2_cde8, 3
  %v4_cde8 = inttoptr i32 %v3_cde8 to i8*
  store i8 %v1_cde8, i8* %v4_cde8, align 1
  %v0_cdec = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cdec, label %dec_label_pc_cdf0, label %dec_label_pc_cdd4.dec_label_pc_cc54_crit_edge

dec_label_pc_cdd4.dec_label_pc_cc54_crit_edge:    ; preds = %dec_label_pc_cdd4
  %v1_cc58.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cc54

dec_label_pc_cdf0:                                ; preds = %dec_label_pc_cdd4, %dec_label_pc_cc48
  %v0_cdf0 = call i32 @function_fbfc()
  store i32 %v0_cdf0, i32* %r0.global-to-local, align 4
  store i32 %v6_c804, i32* %r2.global-to-local, align 4
  %v1_cdf8 = load i32, i32* @r4, align 4
  %v9_cdf8 = icmp eq i32 %v6_c804, %v1_cdf8
  store i1 %v9_cdf8, i1* %cpsr_z.global-to-local, align 1
  %v1_cdfc = load i32, i32* @r6, align 4
  %v2_cdfc = add i32 %v1_cdfc, 4
  %v3_cdfc = inttoptr i32 %v2_cdfc to i32*
  store i32 %v0_cdf0, i32* %v3_cdfc, align 4
  br i1 %v9_cdf8, label %dec_label_pc_ce04, label %dec_label_pc_cc60

dec_label_pc_ce04:                                ; preds = %dec_label_pc_cdf0, %dec_label_pc_cc54
  %v0_ce04 = call i32 @function_fbfc()
  store i32 %v0_ce04, i32* %r0.global-to-local, align 4
  store i32 %v1_c924, i32* %r3.global-to-local, align 4
  store i1 %v2_ce0c, i1* %cpsr_z.global-to-local, align 1
  %v1_ce10 = load i32, i32* @r6, align 4
  %v2_ce10 = add i32 %v1_ce10, 8
  %v3_ce10 = inttoptr i32 %v2_ce10 to i32*
  store i32 %v0_ce04, i32* %v3_ce10, align 4
  br i1 %v2_ce0c, label %dec_label_pc_cc6c, label %dec_label_pc_ce18

dec_label_pc_ce18:                                ; preds = %dec_label_pc_cc60, %dec_label_pc_ce04
  %v0_ce18 = call i32 @function_fbfc()
  %v1_ce18 = trunc i32 %v0_ce18 to i8
  store i32 %v0_ce18, i32* %r0.global-to-local, align 4
  %v4_ce1c = sdiv i32 %v0_ce18, 256
  store i32 %v4_ce1c, i32* %r3.global-to-local, align 4
  %v1_ce20 = trunc i32 %v4_ce1c to i8
  %v2_ce20 = load i32, i32* @r6, align 4
  %v3_ce20 = add i32 %v2_ce20, 19
  %v4_ce20 = inttoptr i32 %v3_ce20 to i8*
  store i8 %v1_ce20, i8* %v4_ce20, align 1
  %v3_ce24 = load i32, i32* @r6, align 4
  %v4_ce24 = add i32 %v3_ce24, 18
  %v5_ce24 = inttoptr i32 %v4_ce24 to i8*
  store i8 %v1_ce18, i8* %v5_ce24, align 1
  br label %dec_label_pc_cc6c

dec_label_pc_ce2c:                                ; preds = %dec_label_pc_c8d4
  %v0_ce2c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_ce2c, i32* %r0.global-to-local, align 4
  %v1_ce30 = call i32 @function_13490(i32 %v0_ce2c)
  store i32 %v1_ce30, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ce34

dec_label_pc_ce34:                                ; preds = %dec_label_pc_c6fc, %dec_label_pc_ce2c
  %v29_ce38 = phi i32 [ %v3_c8c4, %dec_label_pc_c6fc ], [ %v1_ce30, %dec_label_pc_ce2c ]
  store i32 %v3_c6fc, i32* %r4.global-to-local, align 4
  store i32 %v12_c6fc, i32* %r7.global-to-local, align 4
  ret i32 %v29_ce38

; uselistorder directives
  uselistorder i32 %v4_ce1c, { 1, 0 }
  uselistorder i32 %v0_ce18, { 0, 2, 1 }
  uselistorder i32 %v0_cdb8, { 0, 2, 1 }
  uselistorder i32 %v0_cd9c, { 0, 2, 1 }
  uselistorder i32 %v2_cd70, { 1, 0 }
  uselistorder i32 %v8_cd50, { 2, 0, 1, 3 }
  uselistorder i32 %v3_cd3c, { 1, 0 }
  uselistorder i32 %v0_cd2c, { 2, 0, 1, 3 }
  uselistorder i1 %v2_cd0c, { 1, 0 }
  uselistorder i32 %v0_cd00, { 1, 2, 3, 0 }
  uselistorder i32 %v1_ccfc, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_cca4, { 0, 2, 1 }
  uselistorder i32 %v0_cc8c, { 1, 0, 2 }
  uselistorder i1 %v7_cc14, { 2, 1, 0 }
  uselistorder i1 %v2_ce0c, { 2, 3, 1, 0 }
  uselistorder i1 %v3_cd90, { 1, 0, 2, 3 }
  uselistorder i32 %v1_cbc8, { 1, 0, 2, 3 }
  uselistorder i8 %v5_c9e0, { 1, 0 }
  uselistorder i32 %v1_c9c0, { 1, 0 }
  uselistorder i32 %v1_c9b0, { 1, 0 }
  uselistorder i32 %v1_c9ac, { 1, 0 }
  uselistorder i32 %v1_c9a8, { 1, 0 }
  uselistorder i32 %v3_c998, { 1, 0 }
  uselistorder i32 %v1_c988, { 1, 0 }
  uselistorder i32 %v1_c980, { 1, 0 }
  uselistorder i32 %v1_c95c, { 1, 0 }
  uselistorder i32 %v1_c958, { 1, 0 }
  uselistorder i32 %v1_c950, { 1, 0 }
  uselistorder i32 %v1_c924, { 2, 1, 3, 0 }
  uselistorder i32 %v3_c918, { 0, 1, 3, 2 }
  uselistorder i32 %v0_c914, { 3, 0, 1, 2 }
  uselistorder i32 %v0_c910, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_c8f4, { 1, 0 }
  uselistorder i1 %v7_c8c8, { 1, 0 }
  uselistorder i32 %v3_c8c4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_c8b0, { 6, 4, 0, 5, 1, 3, 2 }
  uselistorder i32 %v6_c804, { 3, 2, 1, 0 }
  uselistorder i32 %v5_c7ec, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_c79c, { 1, 0 }
  uselistorder i32 %v5_c734, { 1, 0 }
  uselistorder i32 %v1_c700, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 29, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 5, 6, 4, 7, 8, 10, 9, 12, 11, 13, 15, 14, 16, 17, 18, 21, 19, 20, 22, 23, 24, 25, 26, 54, 27, 28, 29, 30, 34, 31, 32, 33, 35, 37, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32 10240, { 0, 6, 2, 7, 5, 8, 3, 9, 4, 10, 1, 11 }
  uselistorder i32 42, { 2, 0, 3, 1, 4 }
  uselistorder label %dec_label_pc_ce34, { 1, 0 }
  uselistorder label %dec_label_pc_ce18, { 1, 0 }
  uselistorder label %dec_label_pc_cc6c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cbe0, { 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_ce40(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_ce40:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v24_ce40 = load i32, i32* @fp, align 4
  %v1_ce44 = urem i32 %arg1, 256
  store i32 %v1_ce44, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_ce5c = urem i32 %arg3, 256
  store i32 %v1_ce5c, i32* @r4, align 4
  %v2_ce60 = call i32 @function_14094(i32 %v1_ce44, i32 4)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v2_ce60, i32* @sl, align 4
  %v0_ce6c = load i32, i32* @r7, align 4
  %v2_ce70 = call i32 @function_14094(i32 %v0_ce6c, i32 4)
  store i32 65535, i32* @r5, align 4
  %v0_ce7c = load i32, i32* @r6, align 4
  store i32 %v0_ce7c, i32* %r1.global-to-local, align 4
  store i32 %v2_ce70, i32* @sb, align 4
  %v0_ce8c = load i32, i32* @r4, align 4
  %v4_ce90 = inttoptr i32 %v0_ce7c to i32*
  %v5_ce90 = call i32 @function_a4e8(i32 %v0_ce8c, i32* %v4_ce90, i32 7, i32 65535)
  %v3_ce98 = urem i32 %v5_ce90, 65536
  %v0_ce9c = load i32, i32* @r6, align 4
  store i32 %v0_ce9c, i32* %r1.global-to-local, align 4
  %v0_cea4 = load i32, i32* @r5, align 4
  %v0_cea8 = load i32, i32* @r4, align 4
  %v5_ceb0 = inttoptr i32 %v0_ce9c to i32*
  %v6_ceb0 = call i32 @function_a4e8(i32 %v0_cea8, i32* %v5_ceb0, i32 6, i32 %v0_cea4)
  %v0_ceb4 = load i32, i32* @r6, align 4
  store i32 %v0_ceb4, i32* %r1.global-to-local, align 4
  %v3_ceb8 = mul i32 %v6_ceb0, 65536
  store i32 %v3_ceb8, i32* %fp.global-to-local, align 4
  %v0_cec4 = load i32, i32* @r4, align 4
  %v4_cec8 = inttoptr i32 %v0_ceb4 to i32*
  %v5_cec8 = call i32 @function_a4e8(i32 %v0_cec4, i32* %v4_cec8, i32 0, i32 512)
  %v0_ced4 = load i32, i32* @r6, align 4
  store i32 %v0_ced4, i32* %r1.global-to-local, align 4
  %v0_ced8 = load i32, i32* @r4, align 4
  %v3_cee0 = urem i32 %v5_cec8, 65536
  store i32 %v3_cee0, i32* @r6, align 4
  %v4_cee4 = inttoptr i32 %v0_ced4 to i32*
  %v5_cee4 = call i32 @function_a4e8(i32 %v0_ced8, i32* %v4_cee4, i32 1, i32 1)
  %v0_cee8 = load i32, i32* %fp.global-to-local, align 4
  %v3_cee8 = udiv i32 %v0_cee8, 65536
  %v1_cef0 = load i32, i32* @r5, align 4
  %v9_cef0 = icmp eq i32 %v3_cee8, %v1_cef0
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_cef0, label %dec_label_pc_cf18, label %bb

bb:                                               ; preds = %dec_label_pc_ce40
  %v2_cf04 = mul nuw nsw i32 %v3_cee8, 256
  %v4_cf08 = and i32 %v2_cf04, 65280
  %v1_cf0c = urem i32 %v5_cee4, 256
  store i32 %v1_cf0c, i32* @r8, align 4
  %v5_cf10 = udiv i32 %v0_cee8, 16777216
  %v6_cf10 = or i32 %v4_cf08, %v5_cf10
  br label %dec_label_pc_cf24

dec_label_pc_cf18:                                ; preds = %dec_label_pc_ce40
  %v1_cf0c7 = urem i32 %v5_cee4, 256
  store i32 %v1_cf0c7, i32* @r8, align 4
  %v0_cf18 = call i32 @function_fbfc()
  %v3_cf20 = urem i32 %v0_cf18, 65536
  br label %dec_label_pc_cf24

dec_label_pc_cf24:                                ; preds = %bb, %dec_label_pc_cf18
  %storemerge17 = phi i32 [ %v6_cf10, %bb ], [ %v3_cf20, %dec_label_pc_cf18 ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_cf24 = load i32, i32* @r7, align 4
  %tmp41 = icmp slt i32 %v0_cf24, 1
  br i1 %tmp41, label %dec_label_pc_d0cc.preheader, label %dec_label_pc_cf2c

dec_label_pc_d0cc.preheader:                      ; preds = %dec_label_pc_d028, %dec_label_pc_cf24
  %storemerge3.in12.ph = phi i32 [ %v0_cf24, %dec_label_pc_cf24 ], [ %v1_cf80, %dec_label_pc_d028 ]
  %tmp424750 = icmp slt i32 %storemerge3.in12.ph, 1
  br i1 %tmp424750, label %dec_label_pc_d094, label %dec_label_pc_d098.lr.ph

dec_label_pc_cf2c:                                ; preds = %dec_label_pc_cf24
  store i32 %v3_ce98, i32* %r1.global-to-local, align 4
  %v3_cf30 = udiv i32 %v5_ce90, 256
  %v5_cf3c = trunc i32 %v3_cf30 to i8
  store i32 %arg2, i32* @r5, align 4
  %v3_cf54 = udiv i32 %v5_ce90, 65536
  store i32 %v3_cf54, i32* @r4, align 4
  %v4_cf64 = trunc i32 %v3_cf54 to i8
  store i8 %v4_cf64, i8* %stack_var_-80, align 1
  %v3_d074 = icmp eq i32 %v3_ce98, 65535
  %v2_cf9c = ptrtoint i32* %stack_var_-52 to i32
  %v3_cfcc = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_d058

dec_label_pc_cf6c:                                ; preds = %dec_label_pc_d058
  %v2_cf6c = load i8, i8* %stack_var_-80, align 1
  %v3_cf6c = sext i8 %v2_cf6c to i32
  store i32 %v3_cf6c, i32* %r1.global-to-local, align 4
  store i32 %v3_cf30, i32* @r4, align 4
  %v2_cf70 = load i32, i32* @r5, align 4
  %v3_cf70 = add i32 %v2_cf70, 2
  %v4_cf70 = inttoptr i32 %v3_cf70 to i8*
  store i8 %v5_cf3c, i8* %v4_cf70, align 1
  %v0_cf74 = load i32, i32* %r1.global-to-local, align 4
  %v1_cf74 = trunc i32 %v0_cf74 to i8
  %v2_cf74 = load i32, i32* @r5, align 4
  %v3_cf74 = add i32 %v2_cf74, 3
  %v4_cf74 = inttoptr i32 %v3_cf74 to i8*
  store i8 %v1_cf74, i8* %v4_cf74, align 1
  br label %dec_label_pc_cf78

dec_label_pc_cf78:                                ; preds = %dec_label_pc_d080, %dec_label_pc_cf6c
  %v1_cf80 = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_cf90 = call i32 @function_13d90(i32 2, i32 2, i32 17)
  store i32 %stack_var_-60.0, i32* @r4, align 4
  %v7_cf98 = icmp eq i32 %v3_cf90, -1
  store i32 %v2_cf9c, i32* %r1.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v2_cfac = load i32, i32* @sb, align 4
  %v3_cfac = add i32 %v2_cfac, %stack_var_-60.0
  %v4_cfac = inttoptr i32 %v3_cfac to i32*
  store i32 %v3_cf90, i32* %v4_cfac, align 4
  br i1 %v7_cf98, label %dec_label_pc_d0d8, label %dec_label_pc_cfb4

dec_label_pc_cfb4:                                ; preds = %dec_label_pc_cf78
  store i32 2, i32* %stack_var_-52, align 4
  %v4_cfcc = call i32 @function_13bc0(i32 %v3_cf90, %sockaddr* %v3_cfcc, i32 16)
  %v0_cfd0 = load i32, i32* @r5, align 4
  %v1_cfd0 = add i32 %v0_cfd0, 20
  %v2_cfd0 = inttoptr i32 %v1_cfd0 to i8*
  %v3_cfd0 = load i8, i8* %v2_cfd0, align 1
  %tmp = icmp ugt i8 %v3_cfd0, 31
  br i1 %tmp, label %dec_label_pc_d028, label %dec_label_pc_cfdc

dec_label_pc_cfdc:                                ; preds = %dec_label_pc_cfb4
  %v1_cfdc = add i32 %v0_cfd0, 16
  %v2_cfdc = inttoptr i32 %v1_cfdc to i32*
  %v3_cfdc = load i32, i32* %v2_cfdc, align 4
  store i32 %v3_cfdc, i32* @r4, align 4
  %v0_cfe0 = call i32 @function_fbfc()
  %v0_cfe4 = load i32, i32* @r4, align 4
  %v1_cfe8 = and i32 %v0_cfe4, 65280
  %v3_cff0 = mul i32 %v0_cfe4, 16777216
  %v4_cff4 = mul nuw nsw i32 %v1_cfe8, 256
  %v5_cff4 = or i32 %v4_cff4, %v3_cff0
  store i32 %v5_cff4, i32* %r1.global-to-local, align 4
  %v0_cffc = load i32, i32* @r5, align 4
  %v1_cffc = add i32 %v0_cffc, 20
  %v2_cffc = inttoptr i32 %v1_cffc to i8*
  %v3_cffc = load i8, i8* %v2_cffc, align 1
  %v4_cffc = zext i8 %v3_cffc to i32
  %v2_d000 = call i32 @llvm.bswap.i32(i32 %v0_cfe4)
  %v7_d004 = lshr i32 %v0_cfe0, %v4_cffc
  %v8_d004 = add i32 %v7_d004, %v2_d000
  %v3_d010 = mul i32 %v8_d004, 16777216
  %v1_d014 = and i32 %v8_d004, 65280
  %v4_d018 = mul nuw nsw i32 %v1_d014, 256
  %v5_d018 = or i32 %v4_d018, %v3_d010
  store i32 %v5_d018, i32* %r1.global-to-local, align 4
  %v2_d020 = call i32 @llvm.bswap.i32(i32 %v8_d004)
  %v2_d024 = add i32 %v0_cffc, 4
  %v3_d024 = inttoptr i32 %v2_d024 to i32*
  store i32 %v2_d020, i32* %v3_d024, align 4
  %v0_d034.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_d028

dec_label_pc_d028:                                ; preds = %dec_label_pc_cfb4, %dec_label_pc_cfdc
  %v0_d034 = phi i32 [ %v0_cfd0, %dec_label_pc_cfb4 ], [ %v0_d034.pre, %dec_label_pc_cfdc ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_d030 = load i32, i32* @sb, align 4
  %v2_d030 = add i32 %v1_d030, %stack_var_-60.0
  %v3_d030 = inttoptr i32 %v2_d030 to i32*
  %v4_d030 = load i32, i32* %v3_d030, align 4
  store i32 %v0_d034, i32* %r1.global-to-local, align 4
  %v3_d038 = inttoptr i32 %v0_d034 to %sockaddr*
  %v4_d038 = call i32 @function_13bec(i32 %v4_d030, %sockaddr* %v3_d038, i32 16)
  %v1_d044 = add i32 %stack_var_-60.0, 4
  %v1_d048 = load i32, i32* @r7, align 4
  %v9_d048 = icmp eq i32 %v1_cf80, %v1_d048
  %v0_d050 = load i32, i32* @r5, align 4
  %v1_d050 = add i32 %v0_d050, 24
  store i32 %v1_d050, i32* @r5, align 4
  br i1 %v9_d048, label %dec_label_pc_d0cc.preheader, label %dec_label_pc_d058

dec_label_pc_d058:                                ; preds = %dec_label_pc_d028, %dec_label_pc_cf2c
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_cf2c ], [ %v1_d044, %dec_label_pc_d028 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_cf2c ], [ %v1_cf80, %dec_label_pc_d028 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d064 = call i32 @function_14094(i32 65535, i32 1)
  store i32 %v3_ce98, i32* %r1.global-to-local, align 4
  %v2_d078 = load i32, i32* @sl, align 4
  %v3_d078 = add i32 %v2_d078, %stack_var_-60.0
  %v4_d078 = inttoptr i32 %v3_d078 to i32*
  store i32 %v2_d064, i32* %v4_d078, align 4
  br i1 %v3_d074, label %dec_label_pc_d080, label %dec_label_pc_cf6c

dec_label_pc_d080:                                ; preds = %dec_label_pc_d058
  %v0_d080 = call i32 @function_fbfc()
  %v1_d080 = trunc i32 %v0_d080 to i8
  %v4_d084 = sdiv i32 %v0_d080, 256
  %v1_d088 = trunc i32 %v4_d084 to i8
  %v2_d088 = load i32, i32* @r5, align 4
  %v3_d088 = add i32 %v2_d088, 3
  %v4_d088 = inttoptr i32 %v3_d088 to i8*
  store i8 %v1_d088, i8* %v4_d088, align 1
  %v3_d08c = load i32, i32* @r5, align 4
  %v4_d08c = add i32 %v3_d08c, 2
  %v5_d08c = inttoptr i32 %v4_d08c to i8*
  store i8 %v1_d080, i8* %v5_d08c, align 1
  br label %dec_label_pc_cf78

dec_label_pc_d094:                                ; preds = %dec_label_pc_d0cc.loopexit, %dec_label_pc_d0cc.preheader, %dec_label_pc_d0d0.loopexit, %dec_label_pc_d094
  br label %dec_label_pc_d094

dec_label_pc_d098:                                ; preds = %dec_label_pc_d098.lr.ph, %dec_label_pc_d0d0.loopexit
  %v0_d098 = load i32, i32* @r8, align 4
  %v2_d098 = icmp eq i32 %v0_d098, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_d098, label %dec_label_pc_d0a0, label %dec_label_pc_d0e0

dec_label_pc_d0a0:                                ; preds = %dec_label_pc_d098
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_d0a8

dec_label_pc_d0a8:                                ; preds = %dec_label_pc_d0a8, %dec_label_pc_d0a0
  %v0_d0b0 = phi i32 [ %v1_d0b0, %dec_label_pc_d0a8 ], [ 0, %dec_label_pc_d0a0 ]
  %v0_d0a8 = phi i32 [ %v1_d0c4, %dec_label_pc_d0a8 ], [ 0, %dec_label_pc_d0a0 ]
  %v1_d0a8 = load i32, i32* @sb, align 4
  %v2_d0a8 = add i32 %v1_d0a8, %v0_d0a8
  %v3_d0a8 = inttoptr i32 %v2_d0a8 to i32*
  %v4_d0a8 = load i32, i32* %v3_d0a8, align 4
  %v1_d0ac = load i32, i32* @sl, align 4
  %v2_d0ac = add i32 %v1_d0ac, %v0_d0a8
  %v3_d0ac = inttoptr i32 %v2_d0ac to i32*
  %v4_d0ac = load i32, i32* %v3_d0ac, align 4
  store i32 %v4_d0ac, i32* %r1.global-to-local, align 4
  %v1_d0b0 = add i32 %v0_d0b0, 1
  %v0_d0b4 = load i32, i32* @r6, align 4
  %v4_d0bc = inttoptr i32 %v4_d0ac to i32*
  %v5_d0bc = call i32 @function_13d00(i32 %v4_d0a8, i32* %v4_d0bc, i32 %v0_d0b4, i32 16384)
  %v1_d0c0 = load i32, i32* @r7, align 4
  %v9_d0c0 = icmp eq i32 %v1_d0b0, %v1_d0c0
  %v0_d0c4 = load i32, i32* @r4, align 4
  %v1_d0c4 = add i32 %v0_d0c4, 4
  store i32 %v1_d0c4, i32* @r4, align 4
  br i1 %v9_d0c0, label %dec_label_pc_d0cc.loopexit, label %dec_label_pc_d0a8

dec_label_pc_d0cc.loopexit:                       ; preds = %dec_label_pc_d0a8
  %tmp4247 = icmp slt i32 %v1_d0b0, 1
  br i1 %tmp4247, label %dec_label_pc_d094, label %dec_label_pc_d098.lr.ph

dec_label_pc_d098.lr.ph:                          ; preds = %dec_label_pc_d0cc.preheader, %dec_label_pc_d0cc.loopexit
  br label %dec_label_pc_d098

dec_label_pc_d0d0.loopexit:                       ; preds = %dec_label_pc_d0e8
  %tmp42 = icmp slt i32 %v0_d110, 1
  br i1 %tmp42, label %dec_label_pc_d094, label %dec_label_pc_d098

dec_label_pc_d0d8:                                ; preds = %dec_label_pc_cf78
  store i32 %v24_ce40, i32* %fp.global-to-local, align 4
  ret i32 %v3_cf90

dec_label_pc_d0e0:                                ; preds = %dec_label_pc_d098
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_d0e8

dec_label_pc_d0e8:                                ; preds = %dec_label_pc_d0e8, %dec_label_pc_d0e0
  %v0_d0e8 = phi i32 [ %v1_d114, %dec_label_pc_d0e8 ], [ 0, %dec_label_pc_d0e0 ]
  %v1_d0e8 = load i32, i32* @sl, align 4
  %v2_d0e8 = add i32 %v1_d0e8, %v0_d0e8
  %v3_d0e8 = inttoptr i32 %v2_d0e8 to i32*
  %v4_d0e8 = load i32, i32* %v3_d0e8, align 4
  store i32 %v4_d0e8, i32* @r4, align 4
  %v0_d0ec = load i32, i32* @r6, align 4
  store i32 %v0_d0ec, i32* @r1, align 4
  %v1_d0f4 = inttoptr i32 %v4_d0e8 to i8*
  %v2_d0f4 = call i32 @function_fdd8(i8* %v1_d0f4)
  %v0_d0f8 = load i32, i32* @r5, align 4
  %v1_d0f8 = add i32 %v0_d0f8, 1
  store i32 %v1_d0f8, i32* @r5, align 4
  %v0_d0fc = load i32, i32* @fp, align 4
  %v1_d0fc = load i32, i32* @sb, align 4
  %v2_d0fc = add i32 %v1_d0fc, %v0_d0fc
  %v3_d0fc = inttoptr i32 %v2_d0fc to i32*
  %v4_d0fc = load i32, i32* %v3_d0fc, align 4
  %v0_d100 = load i32, i32* @r4, align 4
  store i32 %v0_d100, i32* %r1.global-to-local, align 4
  %v0_d104 = load i32, i32* @r6, align 4
  %v4_d10c = inttoptr i32 %v0_d100 to i32*
  %v5_d10c = call i32 @function_13d00(i32 %v4_d0fc, i32* %v4_d10c, i32 %v0_d104, i32 16384)
  %v0_d110 = load i32, i32* @r5, align 4
  %v1_d110 = load i32, i32* @r7, align 4
  %v9_d110 = icmp eq i32 %v0_d110, %v1_d110
  %v0_d114 = load i32, i32* @fp, align 4
  %v1_d114 = add i32 %v0_d114, 4
  store i32 %v1_d114, i32* @fp, align 4
  br i1 %v9_d110, label %dec_label_pc_d0d0.loopexit, label %dec_label_pc_d0e8

; uselistorder directives
  uselistorder i32 %v1_d114, { 1, 0 }
  uselistorder i32 %v0_d110, { 1, 0 }
  uselistorder i32 %v1_d0c4, { 1, 0 }
  uselistorder i32 %v1_d0b0, { 2, 0, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 5, 2, 4, 1, 3 }
  uselistorder i32 %v0_d034, { 1, 0 }
  uselistorder i32 %v8_d004, { 1, 2, 0 }
  uselistorder i32 %v0_cfe4, { 1, 0, 2 }
  uselistorder i32 %v3_cf90, { 1, 3, 2, 0 }
  uselistorder i32 %v1_cf80, { 1, 2, 0 }
  uselistorder i32 %v3_cf54, { 1, 0 }
  uselistorder i32 %v3_cf30, { 1, 0 }
  uselistorder i32 %v3_ce98, { 0, 2, 1 }
  uselistorder i32 %v1_ce44, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 15, 17, 19, 18, 0 }
  uselistorder label %dec_label_pc_d098.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_d098, { 1, 0 }
  uselistorder label %dec_label_pc_d094, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_d028, { 1, 0 }
  uselistorder label %dec_label_pc_cf24, { 1, 0 }
}

define i32 @function_d124(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_d124:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_d124 = load i32, i32* @sb, align 4
  %v24_d124 = load i32, i32* @fp, align 4
  %v1_d128 = urem i32 %arg1, 256
  store i32 %v1_d128, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_d128, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_d140 = urem i32 %arg3, 256
  store i32 %v1_d140, i32* @r4, align 4
  %v2_d144 = call i32 @function_14094(i32 %v1_d128, i32 4)
  %v0_d148 = load i32, i32* @r5, align 4
  store i32 %v0_d148, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d158 = load i32, i32* @r4, align 4
  store i32 %v0_d158, i32* %r0.global-to-local, align 4
  %v5_d15c = inttoptr i32 %v0_d148 to i32*
  %v6_d15c = call i32 @function_a4e8(i32 %v0_d158, i32* %v5_d15c, i32 2, i32 0)
  %v1_d168 = urem i32 %v6_d15c, 256
  store i32 %v1_d168, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d174 = load i32, i32* @r5, align 4
  store i32 %v0_d174, i32* %r1.global-to-local, align 4
  %v0_d178 = load i32, i32* @r4, align 4
  store i32 %v0_d178, i32* %r0.global-to-local, align 4
  %v5_d17c = trunc i32 %v6_d15c to i8
  %v6_d180 = inttoptr i32 %v0_d174 to i32*
  %v7_d180 = call i32 @function_a4e8(i32 %v0_d178, i32* %v6_d180, i32 3, i32 65535)
  %v0_d184 = load i32, i32* @r5, align 4
  store i32 %v0_d184, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_d180, i32* %fp.global-to-local, align 4
  %v0_d194 = load i32, i32* @r4, align 4
  store i32 %v0_d194, i32* %r0.global-to-local, align 4
  %v4_d198 = inttoptr i32 %v0_d184 to i32*
  %v5_d198 = call i32 @function_a4e8(i32 %v0_d194, i32* %v4_d198, i32 4, i32 64)
  %v1_d1a0 = urem i32 %v5_d198, 256
  store i32 %v1_d1a0, i32* %ip.global-to-local, align 4
  %v0_d1a4 = load i32, i32* @r5, align 4
  store i32 %v0_d1a4, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d1b0 = load i32, i32* @r4, align 4
  store i32 %v0_d1b0, i32* %r0.global-to-local, align 4
  %v5_d1b4 = trunc i32 %v5_d198 to i8
  %v6_d1b8 = inttoptr i32 %v0_d1a4 to i32*
  %v7_d1b8 = call i32 @function_a4e8(i32 %v0_d1b0, i32* %v6_d1b8, i32 5, i32 0)
  %v1_d1c4 = urem i32 %v7_d1b8, 256
  store i32 %v1_d1c4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d1d0 = load i32, i32* @r5, align 4
  store i32 %v0_d1d0, i32* %r1.global-to-local, align 4
  %v0_d1d4 = load i32, i32* @r4, align 4
  store i32 %v0_d1d4, i32* %r0.global-to-local, align 4
  %v5_d1dc = inttoptr i32 %v0_d1d0 to i32*
  %v6_d1dc = call i32 @function_a4e8(i32 %v0_d1d4, i32* %v5_d1dc, i32 6, i32 65535)
  %v0_d1e4 = load i32, i32* @r5, align 4
  store i32 %v0_d1e4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_d1dc, i32* @r7, align 4
  %v0_d1f4 = load i32, i32* @r4, align 4
  store i32 %v0_d1f4, i32* %r0.global-to-local, align 4
  %v4_d1f8 = inttoptr i32 %v0_d1e4 to i32*
  %v5_d1f8 = call i32 @function_a4e8(i32 %v0_d1f4, i32* %v4_d1f8, i32 7, i32 65535)
  %v0_d1fc = load i32, i32* @r5, align 4
  store i32 %v0_d1fc, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_d1f8, i32* %sb.global-to-local, align 4
  %v0_d20c = load i32, i32* @r4, align 4
  store i32 %v0_d20c, i32* %r0.global-to-local, align 4
  %v4_d210 = inttoptr i32 %v0_d1fc to i32*
  %v5_d210 = call i32 @function_a4e8(i32 %v0_d20c, i32* %v4_d210, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d21c = load i32, i32* @r5, align 4
  store i32 %v0_d21c, i32* %r1.global-to-local, align 4
  store i32 %v5_d210, i32* @r6, align 4
  %v0_d224 = load i32, i32* @r4, align 4
  store i32 %v0_d224, i32* %r0.global-to-local, align 4
  %v4_d228 = inttoptr i32 %v0_d21c to i32*
  %v5_d228 = call i32 @function_a4e8(i32 %v0_d224, i32* %v4_d228, i32 1, i32 1)
  %v2_d234 = load i32, i32* @global_var_1eadc.85, align 4
  store i32 %v2_d234, i32* %r3.global-to-local, align 4
  %v1_d238 = urem i32 %v5_d228, 256
  store i32 %v1_d238, i32* %ip.global-to-local, align 4
  %v0_d23c = load i32, i32* @r5, align 4
  store i32 %v0_d23c, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_d244 = load i32, i32* @r4, align 4
  store i32 %v0_d244, i32* %r0.global-to-local, align 4
  %v5_d24c = inttoptr i32 %v0_d23c to i32*
  %v6_d24c = call i32 @function_a4e8(i32 %v0_d244, i32* %v5_d24c, i32 25, i32 %v2_d234)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_d260 = call i32 @function_13d90(i32 2, i32 3, i32 17)
  store i32 %v3_d260, i32* %r0.global-to-local, align 4
  %v7_d264 = icmp eq i32 %v3_d260, -1
  store i1 %v7_d264, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d264, label %dec_label_pc_d68c, label %dec_label_pc_d270

dec_label_pc_d270:                                ; preds = %dec_label_pc_d124
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d278 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d278, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_d28c = call i32 @function_13d60(i32 %v3_d260, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_d28c, i32* %r0.global-to-local, align 4
  %v7_d290 = icmp eq i32 %v6_d28c, -1
  store i1 %v7_d290, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d290, label %dec_label_pc_d684, label %dec_label_pc_d298

dec_label_pc_d298:                                ; preds = %dec_label_pc_d270
  %v0_d298 = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_d2a4 = urem i32 %v0_d298, 65536
  store i32 %v3_d2a4, i32* %r2.global-to-local, align 4
  %v3_d2a8 = icmp ugt i32 %v3_d2a4, 1459
  %v9_d2a8 = icmp eq i32 %v3_d2a4, 1460
  store i1 %v9_d2a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d2a8, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_d298
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_d298, %bb
  %v0_d2b0 = phi i32 [ %v3_d2a4, %dec_label_pc_d298 ], [ 1460, %bb ]
  %v0_d2b4 = load i32, i32* %fp.global-to-local, align 4
  %v3_d2b4 = mul i32 %v0_d2b4, 65536
  store i32 %v3_d2b4, i32* %r0.global-to-local, align 4
  %v3_d2b8 = urem i32 %v0_d2b4, 65536
  store i32 %v3_d2b8, i32* %r2.global-to-local, align 4
  %v0_d2bc = load i32, i32* @sl, align 4
  %v2_d2bc = icmp eq i32 %v0_d2bc, 0
  store i1 %v2_d2bc, i1* %cpsr_z.global-to-local, align 1
  %v0_d2c0 = load i32, i32* %sb.global-to-local, align 4
  %v0_d2c4 = load i32, i32* @r7, align 4
  %tmp72 = icmp slt i32 %v0_d2bc, 1
  br i1 %tmp72, label %bb73, label %bb74

bb73:                                             ; preds = %bb71
  store i32 %v0_d2b0, i32* %r2.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %bb71, %bb73
  %v5_d2ec = phi i32 [ %v3_d2b8, %bb71 ], [ %v0_d2b0, %bb73 ]
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d2d4 = urem i32 %v0_d2c4, 65536
  store i32 %v3_d2d4, i32* %r3.global-to-local, align 4
  %v3_d2d8 = urem i32 %v0_d2c0, 65536
  store i32 %v3_d2d8, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %tmp72, label %.thread, label %dec_label_pc_d2f4

.thread:                                          ; preds = %bb74
  %v6_d2e8 = add nsw i32 %v5_d2ec, 28
  store i32 %v6_d2e8, i32* @fp, align 4
  %v6_d2ec = add nsw i32 %v5_d2ec, 8
  store i32 %v6_d2ec, i32* @sb, align 4
  br label %dec_label_pc_d468

dec_label_pc_d2f4:                                ; preds = %bb74
  %v1_d2f8 = add nuw nsw i32 %v0_d2b0, 28
  store i32 %v1_d2f8, i32* @fp, align 4
  %tmp75 = mul nuw nsw i32 %v1_d2f8, 256
  %v1_d304 = and i32 %tmp75, 65280
  %tmp76 = udiv i32 %v0_d2b4, 256
  %v3_d308 = urem i32 %tmp76, 256
  %v2_d31c = icmp eq i32 %v1_d1c4, 0
  store i1 %v2_d31c, i1* %cpsr_z.global-to-local, align 1
  %v1_d320 = urem i32 %v0_d2b4, 256
  %v1_d328 = add nuw nsw i32 %v0_d2b0, 8
  store i32 %v1_d328, i32* @sb, align 4
  %v1_d330 = urem i32 %v0_d2c4, 256
  %v1_d334 = urem i32 %v0_d2c0, 256
  store i32 %v1_d334, i32* %ip.global-to-local, align 4
  store i32 %v1_d304, i32* %r3.global-to-local, align 4
  %tmp77 = mul nuw nsw i32 %v1_d328, 256
  %v4_d340 = mul nuw nsw i32 %v1_d320, 256
  %v5_d340 = or i32 %v4_d340, %v3_d308
  store i32 %v5_d340, i32* %r0.global-to-local, align 4
  %v3_d344 = mul nuw nsw i32 %v1_d330, 256
  store i32 %v3_d344, i32* %r2.global-to-local, align 4
  %tmp78 = udiv i32 %v0_d2c0, 256
  %v3_d348 = urem i32 %tmp78, 256
  %v1_d34c = and i32 %tmp77, 65280
  store i32 %v1_d34c, i32* %r1.global-to-local, align 4
  %tmp79 = udiv i32 %v1_d2f8, 256
  %v4_d350 = urem i32 %tmp79, 256
  %v5_d350 = or i32 %v4_d350, %v1_d304
  store i32 %v5_d350, i32* @lr, align 4
  %tmp80 = udiv i32 %v0_d2c4, 256
  %v4_d354 = urem i32 %tmp80, 256
  %v5_d354 = or i32 %v4_d354, %v3_d344
  store i32 %v5_d354, i32* @r4, align 4
  %v5_d358 = trunc i32 %tmp79 to i8
  %v5_d35c = trunc i32 %tmp76 to i8
  %v4_d360 = mul nuw nsw i32 %v1_d334, 256
  %v5_d360 = or i32 %v4_d360, %v3_d348
  store i32 %v5_d360, i32* @r5, align 4
  %tmp81 = udiv i32 %v1_d328, 256
  %v4_d364 = urem i32 %tmp81, 256
  %v5_d364 = or i32 %v4_d364, %v1_d34c
  store i32 %v5_d364, i32* @r7, align 4
  br i1 %v2_d31c, label %dec_label_pc_d36c, label %dec_label_pc_d694

dec_label_pc_d36c:                                ; preds = %dec_label_pc_d2f4
  %v3_d36c36 = udiv i32 %v1_d304, 256
  store i32 %v3_d36c36, i32* %ip.global-to-local, align 4
  store i32 %v1_d320, i32* %r0.global-to-local, align 4
  store i32 %v1_d330, i32* %r1.global-to-local, align 4
  store i32 %v1_d334, i32* %r2.global-to-local, align 4
  %v3_d37c37 = udiv i32 %v1_d34c, 256
  store i32 %v3_d37c37, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_d3e0 = sext i8 %v5_d17c to i32
  %v4_d420 = sext i8 %v5_d35c to i32
  %sext15 = mul i32 %v0_d2b4, 16777216
  %v4_d424 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v0_d2c4, 16777216
  %v4_d43c = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_d328, 16777216
  %v4_d440 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_d2c0, 16777216
  %v4_d444 = sdiv i32 %sext18, 16777216
  %v1_d42c = trunc i32 %v1_d2f8 to i8
  %v1_d44c = trunc i32 %v4_d440 to i8
  br label %dec_label_pc_d398

dec_label_pc_d398:                                ; preds = %dec_label_pc_d398, %dec_label_pc_d36c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_d3a4 = call i32 @function_14094(i32 1510, i32 1)
  store i32 %v2_d3a4, i32* %r0.global-to-local, align 4
  store i32 %v2_d144, i32* %ip.global-to-local, align 4
  %v3_d3ac = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d3ac, i32* %r2.global-to-local, align 4
  %v2_d3b0 = load i32, i32* @r6, align 4
  %v5_d3b0 = mul i32 %v2_d3b0, 4
  %v6_d3b0 = add i32 %v5_d3b0, %v2_d144
  %v7_d3b0 = inttoptr i32 %v6_d3b0 to i32*
  store i32 %v2_d3a4, i32* %v7_d3b0, align 4
  %v0_d3b4 = load i32, i32* %ip.global-to-local, align 4
  %v1_d3b4 = load i32, i32* %r2.global-to-local, align 4
  %v4_d3b4 = mul i32 %v1_d3b4, 4
  %v5_d3b4 = add i32 %v4_d3b4, %v0_d3b4
  %v6_d3b4 = inttoptr i32 %v5_d3b4 to i32*
  %v7_d3b4 = load i32, i32* %v6_d3b4, align 4
  store i32 %v7_d3b4, i32* %r1.global-to-local, align 4
  %v1_d3b8 = inttoptr i32 %v7_d3b4 to i8*
  %v2_d3b8 = load i8, i8* %v1_d3b8, align 1
  %tmp = urem i8 %v2_d3b8, 16
  %v1_d3bc = zext i8 %tmp to i32
  %v1_d3c0 = or i32 %v1_d3bc, 64
  store i32 %v1_d3c0, i32* %r3.global-to-local, align 4
  %v1_d3c4 = trunc i32 %v1_d3c0 to i8
  store i8 %v1_d3c4, i8* %v1_d3b8, align 1
  %v0_d3c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_d3c8 = inttoptr i32 %v0_d3c8 to i8*
  %v2_d3c8 = load i8, i8* %v1_d3c8, align 1
  %v3_d3c8 = zext i8 %v2_d3c8 to i32
  %v1_d3cc = and i32 %v3_d3c8, 240
  %v1_d3d0 = or i32 %v1_d3cc, 5
  store i32 %v1_d3d0, i32* %r2.global-to-local, align 4
  %v3_d3d8 = add i32 %v0_d3c8, 9
  %v4_d3d8 = inttoptr i32 %v3_d3d8 to i8*
  store i8 17, i8* %v4_d3d8, align 1
  %v0_d3dc = load i32, i32* %r2.global-to-local, align 4
  %v1_d3dc = trunc i32 %v0_d3dc to i8
  %v2_d3dc = load i32, i32* %r1.global-to-local, align 4
  %v3_d3dc = inttoptr i32 %v2_d3dc to i8*
  store i8 %v1_d3dc, i8* %v3_d3dc, align 1
  store i32 %v4_d3e0, i32* %r0.global-to-local, align 4
  %v2_d3e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_d3e4 = add i32 %v2_d3e4, 1
  %v4_d3e4 = inttoptr i32 %v3_d3e4 to i8*
  store i8 %v5_d17c, i8* %v4_d3e4, align 1
  %v2_d3ec = load i32, i32* %r1.global-to-local, align 4
  %v3_d3ec = add i32 %v2_d3ec, 8
  %v4_d3ec = inttoptr i32 %v3_d3ec to i8*
  store i8 %v5_d1b4, i8* %v4_d3ec, align 1
  %v3_d3f0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d3f0, i32* %r2.global-to-local, align 4
  store i32 %v6_d24c, i32* %ip.global-to-local, align 4
  %v3_d3f8 = mul i32 %v3_d3f0, 32
  store i32 %v3_d3f8, i32* %r3.global-to-local, align 4
  %v1_d3fc = load i32, i32* %r1.global-to-local, align 4
  %v2_d3fc = add i32 %v1_d3fc, 12
  %v3_d3fc = inttoptr i32 %v2_d3fc to i32*
  store i32 %v6_d24c, i32* %v3_d3fc, align 4
  %v0_d400 = load i32, i32* %r3.global-to-local, align 4
  %v1_d400 = load i32, i32* %r2.global-to-local, align 4
  %tmp83 = mul i32 %v1_d400, -8
  %v5_d400 = add i32 %v0_d400, %tmp83
  %v1_d404 = load i32, i32* @r8, align 4
  %v2_d404 = add i32 %v5_d400, %v1_d404
  store i32 %v2_d404, i32* %r3.global-to-local, align 4
  %v1_d408 = add i32 %v2_d404, 16
  %v2_d408 = inttoptr i32 %v1_d408 to i32*
  %v3_d408 = load i32, i32* %v2_d408, align 4
  %v1_d40c = load i32, i32* %r1.global-to-local, align 4
  %v2_d40c = add i32 %v1_d40c, 16
  %v3_d40c = inttoptr i32 %v2_d40c to i32*
  store i32 %v3_d408, i32* %v3_d40c, align 4
  %v0_d414 = load i32, i32* %r2.global-to-local, align 4
  %v1_d414 = add i32 %v0_d414, 1
  store i32 %v1_d414, i32* @r6, align 4
  %v2_d418 = load i32, i32* %r1.global-to-local, align 4
  %v3_d418 = add i32 %v2_d418, 2
  %v4_d418 = inttoptr i32 %v3_d418 to i8*
  store i8 %v5_d358, i8* %v4_d418, align 1
  store i32 %v4_d420, i32* %ip.global-to-local, align 4
  store i32 %v4_d424, i32* %r0.global-to-local, align 4
  %v0_d428 = load i32, i32* %r1.global-to-local, align 4
  %v1_d428 = add i32 %v0_d428, 20
  store i32 %v1_d428, i32* %r3.global-to-local, align 4
  %v3_d42c = add i32 %v0_d428, 3
  %v4_d42c = inttoptr i32 %v3_d42c to i8*
  store i8 %v1_d42c, i8* %v4_d42c, align 1
  %v0_d430 = load i32, i32* %ip.global-to-local, align 4
  %v1_d430 = trunc i32 %v0_d430 to i8
  %v2_d430 = load i32, i32* %r1.global-to-local, align 4
  %v3_d430 = add i32 %v2_d430, 4
  %v4_d430 = inttoptr i32 %v3_d430 to i8*
  store i8 %v1_d430, i8* %v4_d430, align 1
  %v0_d434 = load i32, i32* %r0.global-to-local, align 4
  %v1_d434 = trunc i32 %v0_d434 to i8
  %v2_d434 = load i32, i32* %r1.global-to-local, align 4
  %v3_d434 = add i32 %v2_d434, 5
  %v4_d434 = inttoptr i32 %v3_d434 to i8*
  store i8 %v1_d434, i8* %v4_d434, align 1
  %v0_d438 = load i32, i32* @r4, align 4
  %v1_d438 = trunc i32 %v0_d438 to i8
  %v2_d438 = load i32, i32* %r1.global-to-local, align 4
  %v3_d438 = add i32 %v2_d438, 20
  %v4_d438 = inttoptr i32 %v3_d438 to i8*
  store i8 %v1_d438, i8* %v4_d438, align 1
  store i32 %v4_d43c, i32* %r2.global-to-local, align 4
  store i32 %v4_d440, i32* %r1.global-to-local, align 4
  store i32 %v4_d444, i32* %ip.global-to-local, align 4
  %v0_d448 = load i32, i32* @r6, align 4
  %v1_d448 = load i32, i32* @sl, align 4
  %v9_d448 = icmp eq i32 %v0_d448, %v1_d448
  store i1 %v9_d448, i1* %cpsr_z.global-to-local, align 1
  %v2_d44c = load i32, i32* %r3.global-to-local, align 4
  %v3_d44c = add i32 %v2_d44c, 5
  %v4_d44c = inttoptr i32 %v3_d44c to i8*
  store i8 %v1_d44c, i8* %v4_d44c, align 1
  %v0_d450 = load i32, i32* %r2.global-to-local, align 4
  %v1_d450 = trunc i32 %v0_d450 to i8
  %v2_d450 = load i32, i32* %r3.global-to-local, align 4
  %v3_d450 = add i32 %v2_d450, 1
  %v4_d450 = inttoptr i32 %v3_d450 to i8*
  store i8 %v1_d450, i8* %v4_d450, align 1
  %v0_d454 = load i32, i32* @r5, align 4
  %v1_d454 = trunc i32 %v0_d454 to i8
  %v2_d454 = load i32, i32* %r3.global-to-local, align 4
  %v3_d454 = add i32 %v2_d454, 2
  %v4_d454 = inttoptr i32 %v3_d454 to i8*
  store i8 %v1_d454, i8* %v4_d454, align 1
  %v0_d458 = load i32, i32* %ip.global-to-local, align 4
  %v1_d458 = trunc i32 %v0_d458 to i8
  %v2_d458 = load i32, i32* %r3.global-to-local, align 4
  %v3_d458 = add i32 %v2_d458, 3
  %v4_d458 = inttoptr i32 %v3_d458 to i8*
  store i8 %v1_d458, i8* %v4_d458, align 1
  %v0_d45c = load i32, i32* @r7, align 4
  %v1_d45c = trunc i32 %v0_d45c to i8
  %v2_d45c = load i32, i32* %r3.global-to-local, align 4
  %v3_d45c = add i32 %v2_d45c, 4
  %v4_d45c = inttoptr i32 %v3_d45c to i8*
  store i8 %v1_d45c, i8* %v4_d45c, align 1
  %v0_d460 = load i32, i32* @r6, align 4
  store i32 %v0_d460, i32* %stack_var_-40, align 4
  %v5_d464 = icmp slt i32 %v0_d448, %v1_d448
  br i1 %v5_d464, label %dec_label_pc_d398, label %dec_label_pc_d468

dec_label_pc_d468:                                ; preds = %dec_label_pc_d6c8, %dec_label_pc_d398, %.thread
  %v0_d468 = load i32, i32* @sl, align 4
  %v2_d468 = icmp eq i32 %v0_d468, 0
  store i1 %v2_d468, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_d614 = icmp eq i32 %v3_d2b8, 65535
  %v2_d4e0 = icmp eq i32 %v1_d238, 0
  %v2_d4a8 = icmp eq i32 %v6_d24c, -1
  %v7_d4a8 = icmp eq i32 %v6_d24c, -1
  br label %dec_label_pc_d470.outer

dec_label_pc_d470.outer:                          ; preds = %dec_label_pc_d590, %dec_label_pc_d468
  %v1_d470.ph.in = phi i32 [ %v1_d584, %dec_label_pc_d590 ], [ %v0_d468, %dec_label_pc_d468 ]
  %v0_d470.ph = phi i1 [ %v2_d590, %dec_label_pc_d590 ], [ %v2_d468, %dec_label_pc_d468 ]
  %v1_d470.ph = icmp slt i32 %v1_d470.ph.in, 0
  %v4_d470 = or i1 %v1_d470.ph, %v0_d470.ph
  br label %dec_label_pc_d470

dec_label_pc_d470:                                ; preds = %dec_label_pc_d470.outer, %dec_label_pc_d470
  br i1 %v4_d470, label %dec_label_pc_d470, label %dec_label_pc_d474

dec_label_pc_d474:                                ; preds = %dec_label_pc_d470
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_d480

dec_label_pc_d480:                                ; preds = %dec_label_pc_d4e8, %dec_label_pc_d474
  %v1_d494 = phi i32 [ %v1_d580, %dec_label_pc_d4e8 ], [ 0, %dec_label_pc_d474 ]
  %v5_d484 = mul i32 %v1_d494, 24
  %v1_d488 = load i32, i32* @r8, align 4
  %v2_d488 = add i32 %v1_d488, %v5_d484
  store i32 %v2_d488, i32* %r3.global-to-local, align 4
  store i32 %v2_d144, i32* %ip.global-to-local, align 4
  %v1_d490 = add i32 %v2_d488, 20
  %v2_d490 = inttoptr i32 %v1_d490 to i8*
  %v3_d490 = load i8, i8* %v2_d490, align 1
  %v4_d490 = zext i8 %v3_d490 to i32
  store i32 %v4_d490, i32* %r2.global-to-local, align 4
  %v4_d494 = mul i32 %v1_d494, 4
  %v5_d494 = add i32 %v4_d494, %v2_d144
  %v6_d494 = inttoptr i32 %v5_d494 to i32*
  %v7_d494 = load i32, i32* %v6_d494, align 4
  store i32 %v7_d494, i32* @r5, align 4
  %v7_d498 = icmp eq i8 %v3_d490, 31
  store i1 %v7_d498, i1* %cpsr_z.global-to-local, align 1
  %v1_d49c = add i32 %v7_d494, 20
  store i32 %v1_d49c, i32* @r6, align 4
  %tmp84 = icmp ult i8 %v3_d490, 32
  br i1 %tmp84, label %dec_label_pc_d59c, label %dec_label_pc_d4a4

dec_label_pc_d4a4:                                ; preds = %dec_label_pc_d480
  store i32 %v6_d24c, i32* %r0.global-to-local, align 4
  store i1 %v7_d4a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d4a8, label %dec_label_pc_d604, label %dec_label_pc_d4b0

dec_label_pc_d4b0:                                ; preds = %dec_label_pc_d59c, %dec_label_pc_d4a4
  store i32 %v3_d2b8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d614, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d614, label %dec_label_pc_d620, label %dec_label_pc_d4c4

dec_label_pc_d4c4:                                ; preds = %dec_label_pc_d604.dec_label_pc_d4c4_crit_edge, %dec_label_pc_d4b0
  %v1_d4c8 = phi i32 [ %v1_d4c8.pre, %dec_label_pc_d604.dec_label_pc_d4c4_crit_edge ], [ 65535, %dec_label_pc_d4b0 ]
  store i32 %v3_d2d4, i32* %r2.global-to-local, align 4
  %v9_d4c8 = icmp eq i32 %v3_d2d4, %v1_d4c8
  store i1 %v9_d4c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d4c8, label %dec_label_pc_d63c, label %dec_label_pc_d4d0

dec_label_pc_d4d0:                                ; preds = %dec_label_pc_d620.dec_label_pc_d4d0_crit_edge, %dec_label_pc_d4c4
  %v1_d4d4 = phi i32 [ %v1_d4d4.pre, %dec_label_pc_d620.dec_label_pc_d4d0_crit_edge ], [ %v1_d4c8, %dec_label_pc_d4c4 ]
  store i32 %v3_d2d8, i32* %r3.global-to-local, align 4
  %v9_d4d4 = icmp eq i32 %v3_d2d8, %v1_d4d4
  store i1 %v9_d4d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d4d4, label %dec_label_pc_d658, label %dec_label_pc_d4dc

dec_label_pc_d4dc:                                ; preds = %dec_label_pc_d63c, %dec_label_pc_d4d0
  store i32 %v1_d238, i32* %ip.global-to-local, align 4
  store i1 %v2_d4e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d4e0, label %dec_label_pc_d4e8, label %dec_label_pc_d674

dec_label_pc_d4e8:                                ; preds = %dec_label_pc_d4dc, %dec_label_pc_d658, %dec_label_pc_d674
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_d4ec = load i32, i32* @r7, align 4
  %v1_d4ec = trunc i32 %v0_d4ec to i8
  %v2_d4ec = load i32, i32* @r5, align 4
  %v3_d4ec = add i32 %v2_d4ec, 10
  %v4_d4ec = inttoptr i32 %v3_d4ec to i8*
  store i8 %v1_d4ec, i8* %v4_d4ec, align 1
  %v0_d4f0 = load i32, i32* @r7, align 4
  %v1_d4f0 = trunc i32 %v0_d4f0 to i8
  %v2_d4f0 = load i32, i32* @r5, align 4
  %v3_d4f0 = add i32 %v2_d4f0, 11
  %v4_d4f0 = inttoptr i32 %v3_d4f0 to i8*
  store i8 %v1_d4f0, i8* %v4_d4f0, align 1
  %v0_d4f4 = load i32, i32* @r5, align 4
  store i32 %v0_d4f4, i32* @r0, align 4
  %v2_d4f8 = call i32 @function_e424(i32 %v0_d4f4, i32 20)
  %v3_d4f8 = trunc i32 %v2_d4f8 to i8
  store i32 %v2_d4f8, i32* %r0.global-to-local, align 4
  %v4_d4fc = sdiv i32 %v2_d4f8, 256
  store i32 %v4_d4fc, i32* %r3.global-to-local, align 4
  %v1_d500 = trunc i32 %v4_d4fc to i8
  %v2_d500 = load i32, i32* @r5, align 4
  %v3_d500 = add i32 %v2_d500, 11
  %v4_d500 = inttoptr i32 %v3_d500 to i8*
  store i8 %v1_d500, i8* %v4_d500, align 1
  %v3_d504 = load i32, i32* @r5, align 4
  %v4_d504 = add i32 %v3_d504, 10
  %v5_d504 = inttoptr i32 %v4_d504 to i8*
  store i8 %v3_d4f8, i8* %v5_d504, align 1
  %v0_d508 = load i32, i32* @r7, align 4
  %v1_d508 = trunc i32 %v0_d508 to i8
  %v2_d508 = load i32, i32* @r6, align 4
  %v3_d508 = add i32 %v2_d508, 6
  %v4_d508 = inttoptr i32 %v3_d508 to i8*
  store i8 %v1_d508, i8* %v4_d508, align 1
  %v0_d50c = load i32, i32* @r7, align 4
  %v1_d50c = trunc i32 %v0_d50c to i8
  %v2_d50c = load i32, i32* @r6, align 4
  %v3_d50c = add i32 %v2_d50c, 7
  %v4_d50c = inttoptr i32 %v3_d50c to i8*
  store i8 %v1_d50c, i8* %v4_d50c, align 1
  %v0_d510 = load i32, i32* @r5, align 4
  %v1_d510 = add i32 %v0_d510, 24
  %v2_d510 = inttoptr i32 %v1_d510 to i8*
  %v3_d510 = load i8, i8* %v2_d510, align 1
  %v4_d510 = zext i8 %v3_d510 to i32
  store i32 %v4_d510, i32* %r3.global-to-local, align 4
  %v1_d514 = add i32 %v0_d510, 25
  %v2_d514 = inttoptr i32 %v1_d514 to i8*
  %v3_d514 = load i8, i8* %v2_d514, align 1
  %v4_d514 = zext i8 %v3_d514 to i32
  %v0_d518 = load i32, i32* @r6, align 4
  store i32 %v0_d518, i32* @r1, align 4
  %v4_d51c = mul nuw nsw i32 %v4_d514, 256
  %v5_d51c = or i32 %v4_d51c, %v4_d510
  store i32 %v5_d51c, i32* %r2.global-to-local, align 4
  store i32 %v0_d510, i32* %r0.global-to-local, align 4
  %v0_d524 = load i32, i32* @sb, align 4
  store i32 %v0_d524, i32* %r3.global-to-local, align 4
  %v4_d528 = call i32 @function_e480(i32 %v0_d510, i32 %v0_d518, i32 %v5_d51c, i32 %v0_d524)
  %v5_d528 = trunc i32 %v4_d528 to i8
  store i32 %v4_d528, i32* %r0.global-to-local, align 4
  %v4_d52c38 = udiv i32 %v4_d528, 256
  %v1_d530 = trunc i32 %v4_d52c38 to i8
  %v2_d530 = load i32, i32* @r6, align 4
  %v3_d530 = add i32 %v2_d530, 7
  %v4_d530 = inttoptr i32 %v3_d530 to i8*
  store i8 %v1_d530, i8* %v4_d530, align 1
  %v3_d534 = load i32, i32* @r6, align 4
  %v4_d534 = add i32 %v3_d534, 6
  %v5_d534 = inttoptr i32 %v4_d534 to i8*
  store i8 %v5_d528, i8* %v5_d534, align 1
  %v3_d538 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d538, i32* %r3.global-to-local, align 4
  %v0_d53c = load i32, i32* @r5, align 4
  %v1_d53c = add i32 %v0_d53c, 20
  %v2_d53c = inttoptr i32 %v1_d53c to i32*
  %v3_d53c = load i32, i32* %v2_d53c, align 4
  %v3_d544 = udiv i32 %v3_d53c, 65536
  store i32 %v3_d544, i32* %r2.global-to-local, align 4
  %v5_d548 = mul i32 %v3_d538, 24
  %v1_d54c = load i32, i32* @r8, align 4
  %v2_d54c = add i32 %v1_d54c, %v5_d548
  store i32 %v2_d54c, i32* %ip.global-to-local, align 4
  %v3_d55035 = udiv i32 %v3_d53c, 16777216
  %v1_d554 = trunc i32 %v3_d55035 to i8
  %v3_d554 = add i32 %v2_d54c, 3
  %v4_d554 = inttoptr i32 %v3_d554 to i8*
  store i8 %v1_d554, i8* %v4_d554, align 1
  %v0_d558 = load i32, i32* %r2.global-to-local, align 4
  %v1_d558 = trunc i32 %v0_d558 to i8
  %v2_d558 = load i32, i32* %ip.global-to-local, align 4
  %v3_d558 = add i32 %v2_d558, 2
  %v4_d558 = inttoptr i32 %v3_d558 to i8*
  store i8 %v1_d558, i8* %v4_d558, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_d560 = load i32, i32* @r5, align 4
  store i32 %v0_d560, i32* %r1.global-to-local, align 4
  store i32 %v3_d260, i32* %r0.global-to-local, align 4
  %v0_d568 = load i32, i32* @fp, align 4
  store i32 %v0_d568, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_d570 = load i32, i32* %ip.global-to-local, align 4
  %v6_d578 = inttoptr i32 %v0_d560 to i32*
  %v7_d578 = call i32 @function_13d2c(i32 %v3_d260, i32* %v6_d578, i32 %v0_d568, i32 16384, i32 %v0_d570, i32 16)
  %v3_d57c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d57c, i32* %r3.global-to-local, align 4
  %v1_d580 = add i32 %v3_d57c, 1
  store i32 %v1_d580, i32* %r0.global-to-local, align 4
  %v1_d584 = load i32, i32* @sl, align 4
  %v9_d584 = icmp eq i32 %v1_d580, %v1_d584
  store i1 %v9_d584, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d580, i32* %stack_var_-40, align 4
  %v5_d58c = icmp slt i32 %v1_d580, %v1_d584
  br i1 %v5_d58c, label %dec_label_pc_d480, label %dec_label_pc_d590

dec_label_pc_d590:                                ; preds = %dec_label_pc_d4e8
  %v2_d590 = icmp eq i32 %v1_d584, 0
  store i1 %v2_d590, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_d470.outer

dec_label_pc_d59c:                                ; preds = %dec_label_pc_d480
  %v1_d59c = add i32 %v2_d488, 16
  %v2_d59c = inttoptr i32 %v1_d59c to i32*
  %v3_d59c = load i32, i32* %v2_d59c, align 4
  %v0_d5a0 = call i32 @function_fbfc()
  store i32 %v0_d5a0, i32* %r0.global-to-local, align 4
  %v3_d5a4 = load i32, i32* %stack_var_-40, align 4
  %v5_d5ac = mul i32 %v3_d5a4, 24
  %v1_d5b4 = load i32, i32* @r8, align 4
  %v2_d5b4 = add i32 %v1_d5b4, %v5_d5ac
  store i32 %v2_d5b4, i32* %r1.global-to-local, align 4
  %v1_d5b8 = and i32 %v3_d59c, 65280
  store i32 %v1_d5b8, i32* %r3.global-to-local, align 4
  %v1_d5b0 = udiv i32 %v3_d59c, 256
  %v3_d5bc = and i32 %v1_d5b0, 65280
  store i32 %v3_d5bc, i32* %r2.global-to-local, align 4
  %v3_d5c0 = mul i32 %v3_d59c, 16777216
  store i32 %v3_d5c0, i32* %ip.global-to-local, align 4
  %v1_d5c4 = add i32 %v2_d5b4, 20
  %v2_d5c4 = inttoptr i32 %v1_d5c4 to i8*
  %v3_d5c4 = load i8, i8* %v2_d5c4, align 1
  %v4_d5c4 = zext i8 %v3_d5c4 to i32
  %v4_d5c8 = mul nuw nsw i32 %v1_d5b8, 256
  %v5_d5c8 = or i32 %v4_d5c8, %v3_d5c0
  store i32 %v5_d5c8, i32* %ip.global-to-local, align 4
  %v2_d5d0 = call i32 @llvm.bswap.i32(i32 %v3_d59c)
  %v7_d5d4 = lshr i32 %v0_d5a0, %v4_d5c4
  %v8_d5d4 = add i32 %v7_d5d4, %v2_d5d0
  store i32 %v8_d5d4, i32* %r2.global-to-local, align 4
  %v3_d5e0 = mul i32 %v8_d5d4, 16777216
  %v1_d5d8 = mul i32 %v8_d5d4, 256
  %v4_d5e4 = and i32 %v1_d5d8, 16711680
  %v5_d5e4 = or i32 %v4_d5e4, %v3_d5e0
  store i32 %v5_d5e4, i32* %r1.global-to-local, align 4
  store i32 %v6_d24c, i32* %r0.global-to-local, align 4
  %v2_d5f4 = call i32 @llvm.bswap.i32(i32 %v8_d5d4)
  store i32 %v2_d5f4, i32* %r3.global-to-local, align 4
  store i1 %v7_d4a8, i1* %cpsr_z.global-to-local, align 1
  %v1_d5fc = load i32, i32* @r5, align 4
  %v2_d5fc = add i32 %v1_d5fc, 16
  %v3_d5fc = inttoptr i32 %v2_d5fc to i32*
  store i32 %v2_d5f4, i32* %v3_d5fc, align 4
  br i1 %v2_d4a8, label %dec_label_pc_d604, label %dec_label_pc_d4b0

dec_label_pc_d604:                                ; preds = %dec_label_pc_d59c, %dec_label_pc_d4a4
  %v0_d604 = call i32 @function_fbfc()
  store i32 %v0_d604, i32* %r0.global-to-local, align 4
  store i32 %v3_d2b8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d614, i1* %cpsr_z.global-to-local, align 1
  %v1_d618 = load i32, i32* @r5, align 4
  %v2_d618 = add i32 %v1_d618, 12
  %v3_d618 = inttoptr i32 %v2_d618 to i32*
  store i32 %v0_d604, i32* %v3_d618, align 4
  br i1 %v3_d614, label %dec_label_pc_d620, label %dec_label_pc_d604.dec_label_pc_d4c4_crit_edge

dec_label_pc_d604.dec_label_pc_d4c4_crit_edge:    ; preds = %dec_label_pc_d604
  %v1_d4c8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d4c4

dec_label_pc_d620:                                ; preds = %dec_label_pc_d604, %dec_label_pc_d4b0
  %v0_d620 = call i32 @function_fbfc()
  %v1_d620 = trunc i32 %v0_d620 to i8
  store i32 %v0_d620, i32* %r0.global-to-local, align 4
  store i32 %v3_d2d4, i32* %r2.global-to-local, align 4
  %v4_d628 = sdiv i32 %v0_d620, 256
  store i32 %v4_d628, i32* %r3.global-to-local, align 4
  %v1_d62c = load i32, i32* @r4, align 4
  %v9_d62c = icmp eq i32 %v3_d2d4, %v1_d62c
  store i1 %v9_d62c, i1* %cpsr_z.global-to-local, align 1
  %v1_d630 = trunc i32 %v4_d628 to i8
  %v2_d630 = load i32, i32* @r5, align 4
  %v3_d630 = add i32 %v2_d630, 5
  %v4_d630 = inttoptr i32 %v3_d630 to i8*
  store i8 %v1_d630, i8* %v4_d630, align 1
  %v3_d634 = load i32, i32* @r5, align 4
  %v4_d634 = add i32 %v3_d634, 4
  %v5_d634 = inttoptr i32 %v4_d634 to i8*
  store i8 %v1_d620, i8* %v5_d634, align 1
  %v0_d638 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d638, label %dec_label_pc_d63c, label %dec_label_pc_d620.dec_label_pc_d4d0_crit_edge

dec_label_pc_d620.dec_label_pc_d4d0_crit_edge:    ; preds = %dec_label_pc_d620
  %v1_d4d4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d4d0

dec_label_pc_d63c:                                ; preds = %dec_label_pc_d620, %dec_label_pc_d4c4
  %v0_d63c = call i32 @function_fbfc()
  %v1_d63c = trunc i32 %v0_d63c to i8
  store i32 %v0_d63c, i32* %r0.global-to-local, align 4
  %v4_d640 = sdiv i32 %v0_d63c, 256
  store i32 %v4_d640, i32* %r3.global-to-local, align 4
  %v3_d644 = load i32, i32* @r5, align 4
  %v4_d644 = add i32 %v3_d644, 20
  %v5_d644 = inttoptr i32 %v4_d644 to i8*
  store i8 %v1_d63c, i8* %v5_d644, align 1
  %v0_d648 = load i32, i32* %r3.global-to-local, align 4
  %v1_d648 = trunc i32 %v0_d648 to i8
  %v2_d648 = load i32, i32* @r6, align 4
  %v3_d648 = add i32 %v2_d648, 1
  %v4_d648 = inttoptr i32 %v3_d648 to i8*
  store i8 %v1_d648, i8* %v4_d648, align 1
  store i32 %v3_d2d8, i32* %r3.global-to-local, align 4
  %v1_d650 = load i32, i32* @r4, align 4
  %v9_d650 = icmp eq i32 %v3_d2d8, %v1_d650
  store i1 %v9_d650, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d650, label %dec_label_pc_d658, label %dec_label_pc_d4dc

dec_label_pc_d658:                                ; preds = %dec_label_pc_d63c, %dec_label_pc_d4d0
  %v0_d658 = call i32 @function_fbfc()
  %v1_d658 = trunc i32 %v0_d658 to i8
  store i32 %v0_d658, i32* %r0.global-to-local, align 4
  store i32 %v1_d238, i32* %ip.global-to-local, align 4
  %v4_d660 = sdiv i32 %v0_d658, 256
  store i32 %v4_d660, i32* %r3.global-to-local, align 4
  store i1 %v2_d4e0, i1* %cpsr_z.global-to-local, align 1
  %v1_d668 = trunc i32 %v4_d660 to i8
  %v2_d668 = load i32, i32* @r6, align 4
  %v3_d668 = add i32 %v2_d668, 3
  %v4_d668 = inttoptr i32 %v3_d668 to i8*
  store i8 %v1_d668, i8* %v4_d668, align 1
  %v3_d66c = load i32, i32* @r6, align 4
  %v4_d66c = add i32 %v3_d66c, 2
  %v5_d66c = inttoptr i32 %v4_d66c to i8*
  store i8 %v1_d658, i8* %v5_d66c, align 1
  %v0_d670 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d670, label %dec_label_pc_d4e8, label %dec_label_pc_d674

dec_label_pc_d674:                                ; preds = %dec_label_pc_d4dc, %dec_label_pc_d658
  %v0_d674 = load i32, i32* @r5, align 4
  %v1_d674 = add i32 %v0_d674, 28
  store i32 %v1_d674, i32* %r0.global-to-local, align 4
  store i32 %v0_d2b0, i32* @r1, align 4
  %v1_d67c = inttoptr i32 %v1_d674 to i8*
  %v2_d67c = call i32 @function_fdd8(i8* %v1_d67c)
  store i32 %v2_d67c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d4e8

dec_label_pc_d684:                                ; preds = %dec_label_pc_d270
  store i32 %v3_d260, i32* %r0.global-to-local, align 4
  %v1_d688 = call i32 @function_13490(i32 %v3_d260)
  store i32 %v1_d688, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d68c

dec_label_pc_d68c:                                ; preds = %dec_label_pc_d124, %dec_label_pc_d684
  %v29_d690 = phi i32 [ %v3_d260, %dec_label_pc_d124 ], [ %v1_d688, %dec_label_pc_d684 ]
  store i32 %v18_d124, i32* %sb.global-to-local, align 4
  store i32 %v24_d124, i32* %fp.global-to-local, align 4
  ret i32 %v29_d690

dec_label_pc_d694:                                ; preds = %dec_label_pc_d2f4
  %v3_d698 = sext i8 %v5_d358 to i32
  %v7_d698 = sext i8 %v5_d35c to i32
  %v3_d69c = sdiv i32 %v3_d698, 256
  store i32 %v3_d69c, i32* %r0.global-to-local, align 4
  %v3_d6a0 = sdiv i32 %v7_d698, 256
  store i32 %v3_d6a0, i32* %r1.global-to-local, align 4
  store i32 %v1_d330, i32* %r2.global-to-local, align 4
  store i32 %v1_d334, i32* %r3.global-to-local, align 4
  %v3_d6ac34 = udiv i32 %v1_d34c, 256
  store i32 %v3_d6ac34, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_d718 = sext i8 %v5_d1b4 to i32
  %sext11 = mul i32 %v1_d328, 16777216
  %v4_d770 = sdiv i32 %sext11, 16777216
  %sext12 = mul i32 %v0_d2c4, 16777216
  %v4_d774 = sdiv i32 %sext12, 16777216
  %sext13 = mul i32 %v0_d2c0, 16777216
  %v4_d790 = sdiv i32 %sext13, 16777216
  %v1_d77c = trunc i32 %v3_d6a0 to i8
  %v1_d798 = trunc i32 %v4_d790 to i8
  br label %dec_label_pc_d6c8

dec_label_pc_d6c8:                                ; preds = %dec_label_pc_d6c8, %dec_label_pc_d694
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_d6d4 = call i32 @function_14094(i32 1510, i32 1)
  store i32 %v2_d6d4, i32* %r0.global-to-local, align 4
  store i32 %v2_d144, i32* %r1.global-to-local, align 4
  %v3_d6dc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d6dc, i32* %r2.global-to-local, align 4
  %v2_d6e0 = load i32, i32* @r6, align 4
  %v5_d6e0 = mul i32 %v2_d6e0, 4
  %v6_d6e0 = add i32 %v5_d6e0, %v2_d144
  %v7_d6e0 = inttoptr i32 %v6_d6e0 to i32*
  store i32 %v2_d6d4, i32* %v7_d6e0, align 4
  %v0_d6e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_d6e4 = load i32, i32* %r2.global-to-local, align 4
  %v4_d6e4 = mul i32 %v1_d6e4, 4
  %v5_d6e4 = add i32 %v4_d6e4, %v0_d6e4
  %v6_d6e4 = inttoptr i32 %v5_d6e4 to i32*
  %v7_d6e4 = load i32, i32* %v6_d6e4, align 4
  store i32 %v7_d6e4, i32* %r1.global-to-local, align 4
  %v1_d6e8 = inttoptr i32 %v7_d6e4 to i8*
  %v2_d6e8 = load i8, i8* %v1_d6e8, align 1
  %tmp85 = urem i8 %v2_d6e8, 16
  %v1_d6ec = zext i8 %tmp85 to i32
  %v1_d6f0 = or i32 %v1_d6ec, 64
  store i32 %v1_d6f0, i32* %r3.global-to-local, align 4
  %v1_d6f4 = trunc i32 %v1_d6f0 to i8
  store i8 %v1_d6f4, i8* %v1_d6e8, align 1
  %v0_d6f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_d6f8 = inttoptr i32 %v0_d6f8 to i8*
  %v2_d6f8 = load i8, i8* %v1_d6f8, align 1
  %v3_d6f8 = zext i8 %v2_d6f8 to i32
  %v1_d6fc = and i32 %v3_d6f8, 240
  %v1_d700 = or i32 %v1_d6fc, 5
  store i32 %v1_d700, i32* %r2.global-to-local, align 4
  %v3_d708 = add i32 %v0_d6f8, 9
  %v4_d708 = inttoptr i32 %v3_d708 to i8*
  store i8 17, i8* %v4_d708, align 1
  %v0_d70c = load i32, i32* %r2.global-to-local, align 4
  %v1_d70c = trunc i32 %v0_d70c to i8
  %v2_d70c = load i32, i32* %r1.global-to-local, align 4
  %v3_d70c = inttoptr i32 %v2_d70c to i8*
  store i8 %v1_d70c, i8* %v3_d70c, align 1
  %v2_d714 = load i32, i32* %r1.global-to-local, align 4
  %v3_d714 = add i32 %v2_d714, 1
  %v4_d714 = inttoptr i32 %v3_d714 to i8*
  store i8 %v5_d17c, i8* %v4_d714, align 1
  store i32 %v4_d718, i32* %r0.global-to-local, align 4
  %v2_d71c = load i32, i32* %r1.global-to-local, align 4
  %v3_d71c = add i32 %v2_d71c, 8
  %v4_d71c = inttoptr i32 %v3_d71c to i8*
  store i8 %v5_d1b4, i8* %v4_d71c, align 1
  %v3_d720 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d720, i32* %r2.global-to-local, align 4
  store i32 %v6_d24c, i32* %ip.global-to-local, align 4
  %v3_d728 = mul i32 %v3_d720, 32
  store i32 %v3_d728, i32* %r3.global-to-local, align 4
  %v1_d72c = load i32, i32* %r1.global-to-local, align 4
  %v2_d72c = add i32 %v1_d72c, 12
  %v3_d72c = inttoptr i32 %v2_d72c to i32*
  store i32 %v6_d24c, i32* %v3_d72c, align 4
  %v0_d730 = load i32, i32* %r3.global-to-local, align 4
  %v1_d730 = load i32, i32* %r2.global-to-local, align 4
  %tmp86 = mul i32 %v1_d730, -8
  %v5_d730 = add i32 %v0_d730, %tmp86
  %v1_d734 = load i32, i32* @r8, align 4
  %v2_d734 = add i32 %v5_d730, %v1_d734
  store i32 %v2_d734, i32* %r3.global-to-local, align 4
  %v1_d738 = add i32 %v2_d734, 16
  %v2_d738 = inttoptr i32 %v1_d738 to i32*
  %v3_d738 = load i32, i32* %v2_d738, align 4
  store i32 %v3_d738, i32* %ip.global-to-local, align 4
  %v1_d73c = add i32 %v1_d730, 1
  store i32 %v1_d73c, i32* @r6, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_d748 = load i32, i32* %r1.global-to-local, align 4
  %v3_d748 = add i32 %v2_d748, 6
  %v4_d748 = inttoptr i32 %v3_d748 to i8*
  store i8 64, i8* %v4_d748, align 1
  %v0_d74c = load i32, i32* %r2.global-to-local, align 4
  %v1_d74c = trunc i32 %v0_d74c to i8
  %v2_d74c = load i32, i32* %r1.global-to-local, align 4
  %v3_d74c = add i32 %v2_d74c, 7
  %v4_d74c = inttoptr i32 %v3_d74c to i8*
  store i8 %v1_d74c, i8* %v4_d74c, align 1
  %v0_d750 = load i32, i32* %ip.global-to-local, align 4
  %v1_d750 = load i32, i32* %r1.global-to-local, align 4
  %v2_d750 = add i32 %v1_d750, 16
  %v3_d750 = inttoptr i32 %v2_d750 to i32*
  store i32 %v0_d750, i32* %v3_d750, align 4
  store i32 %v3_d69c, i32* %r3.global-to-local, align 4
  store i32 %v7_d698, i32* %ip.global-to-local, align 4
  %v2_d760 = load i32, i32* %r1.global-to-local, align 4
  %v3_d760 = add i32 %v2_d760, 2
  %v4_d760 = inttoptr i32 %v3_d760 to i8*
  store i8 %v5_d358, i8* %v4_d760, align 1
  %v0_d764 = load i32, i32* %r3.global-to-local, align 4
  %v1_d764 = trunc i32 %v0_d764 to i8
  %v2_d764 = load i32, i32* %r1.global-to-local, align 4
  %v3_d764 = add i32 %v2_d764, 3
  %v4_d764 = inttoptr i32 %v3_d764 to i8*
  store i8 %v1_d764, i8* %v4_d764, align 1
  %v0_d768 = load i32, i32* %ip.global-to-local, align 4
  %v1_d768 = trunc i32 %v0_d768 to i8
  %v2_d768 = load i32, i32* %r1.global-to-local, align 4
  %v3_d768 = add i32 %v2_d768, 4
  %v4_d768 = inttoptr i32 %v3_d768 to i8*
  store i8 %v1_d768, i8* %v4_d768, align 1
  store i32 %v3_d6a0, i32* %r2.global-to-local, align 4
  store i32 %v4_d770, i32* %r3.global-to-local, align 4
  store i32 %v4_d774, i32* %ip.global-to-local, align 4
  %v0_d778 = load i32, i32* %r1.global-to-local, align 4
  %v1_d778 = add i32 %v0_d778, 20
  store i32 %v1_d778, i32* %r0.global-to-local, align 4
  %v3_d77c = add i32 %v0_d778, 5
  %v4_d77c = inttoptr i32 %v3_d77c to i8*
  store i8 %v1_d77c, i8* %v4_d77c, align 1
  %v0_d780 = load i32, i32* @r4, align 4
  %v1_d780 = trunc i32 %v0_d780 to i8
  %v2_d780 = load i32, i32* %r1.global-to-local, align 4
  %v3_d780 = add i32 %v2_d780, 20
  %v4_d780 = inttoptr i32 %v3_d780 to i8*
  store i8 %v1_d780, i8* %v4_d780, align 1
  %v0_d784 = load i32, i32* %r3.global-to-local, align 4
  %v1_d784 = trunc i32 %v0_d784 to i8
  %v2_d784 = load i32, i32* %r0.global-to-local, align 4
  %v3_d784 = add i32 %v2_d784, 5
  %v4_d784 = inttoptr i32 %v3_d784 to i8*
  store i8 %v1_d784, i8* %v4_d784, align 1
  %v0_d788 = load i32, i32* %ip.global-to-local, align 4
  %v1_d788 = trunc i32 %v0_d788 to i8
  %v2_d788 = load i32, i32* %r0.global-to-local, align 4
  %v3_d788 = add i32 %v2_d788, 1
  %v4_d788 = inttoptr i32 %v3_d788 to i8*
  store i8 %v1_d788, i8* %v4_d788, align 1
  %v0_d78c = load i32, i32* @r5, align 4
  %v1_d78c = trunc i32 %v0_d78c to i8
  %v2_d78c = load i32, i32* %r0.global-to-local, align 4
  %v3_d78c = add i32 %v2_d78c, 2
  %v4_d78c = inttoptr i32 %v3_d78c to i8*
  store i8 %v1_d78c, i8* %v4_d78c, align 1
  store i32 %v4_d790, i32* %r1.global-to-local, align 4
  %v0_d794 = load i32, i32* @r6, align 4
  %v1_d794 = load i32, i32* @sl, align 4
  %v9_d794 = icmp eq i32 %v0_d794, %v1_d794
  store i1 %v9_d794, i1* %cpsr_z.global-to-local, align 1
  %v2_d798 = load i32, i32* %r0.global-to-local, align 4
  %v3_d798 = add i32 %v2_d798, 3
  %v4_d798 = inttoptr i32 %v3_d798 to i8*
  store i8 %v1_d798, i8* %v4_d798, align 1
  %v0_d79c = load i32, i32* @r7, align 4
  %v1_d79c = trunc i32 %v0_d79c to i8
  %v2_d79c = load i32, i32* %r0.global-to-local, align 4
  %v3_d79c = add i32 %v2_d79c, 4
  %v4_d79c = inttoptr i32 %v3_d79c to i8*
  store i8 %v1_d79c, i8* %v4_d79c, align 1
  %v0_d7a0 = load i32, i32* @r6, align 4
  store i32 %v0_d7a0, i32* %stack_var_-40, align 4
  %v5_d7a4 = icmp slt i32 %v0_d794, %v1_d794
  br i1 %v5_d7a4, label %dec_label_pc_d6c8, label %dec_label_pc_d468

; uselistorder directives
  uselistorder i32 %v1_d730, { 1, 0 }
  uselistorder i32 %v3_d6a0, { 2, 1, 0 }
  uselistorder i32 %v3_d69c, { 1, 0 }
  uselistorder i32 %v7_d698, { 1, 0 }
  uselistorder i32 %v4_d660, { 1, 0 }
  uselistorder i32 %v0_d658, { 0, 2, 1 }
  uselistorder i32 %v0_d63c, { 0, 2, 1 }
  uselistorder i32 %v4_d628, { 1, 0 }
  uselistorder i32 %v0_d620, { 0, 2, 1 }
  uselistorder i32 %v2_d5f4, { 1, 0 }
  uselistorder i32 %v8_d5d4, { 2, 0, 1, 3 }
  uselistorder i32 %v3_d5c0, { 1, 0 }
  uselistorder i32 %v3_d59c, { 1, 3, 2, 0 }
  uselistorder i1 %v2_d590, { 1, 0 }
  uselistorder i32 %v1_d584, { 1, 2, 3, 0 }
  uselistorder i32 %v1_d580, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_d528, { 0, 2, 1 }
  uselistorder i32 %v0_d510, { 1, 0, 2, 3 }
  uselistorder i32 %v4_d4fc, { 1, 0 }
  uselistorder i32 %v2_d4f8, { 0, 2, 1 }
  uselistorder i1 %v7_d4a8, { 2, 1, 0 }
  uselistorder i1 %v3_d614, { 1, 0, 2, 3 }
  uselistorder i8 %v5_d358, { 0, 2, 1 }
  uselistorder i32 %v3_d344, { 1, 0 }
  uselistorder i32 %v1_d334, { 2, 3, 0, 1 }
  uselistorder i32 %v1_d330, { 1, 2, 0 }
  uselistorder i32 %v1_d328, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v1_d320, { 1, 0 }
  uselistorder i32 %v1_d2f8, { 2, 1, 0, 3 }
  uselistorder i32 %v3_d2d8, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v3_d2b8, { 2, 1, 4, 3, 0 }
  uselistorder i32 %v0_d2b4, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v0_d2b0, { 3, 0, 4, 1, 2 }
  uselistorder i32 %v3_d2a4, { 3, 1, 2, 0 }
  uselistorder i1 %v7_d290, { 1, 0 }
  uselistorder i1 %v7_d264, { 1, 0 }
  uselistorder i32 %v3_d260, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_d24c, { 2, 1, 7, 5, 0, 6, 4, 3 }
  uselistorder i32 %v1_d238, { 3, 1, 2, 0 }
  uselistorder i32 %v1_d1c4, { 1, 0 }
  uselistorder i8 %v5_d1b4, { 1, 0, 2 }
  uselistorder i32 %v5_d198, { 1, 0 }
  uselistorder i8 %v5_d17c, { 0, 2, 1 }
  uselistorder i32 %v6_d15c, { 1, 0 }
  uselistorder i32 %v2_d144, { 0, 3, 1, 5, 2, 4 }
  uselistorder i32 %v1_d128, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 14, 13 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 38, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 48, 47, 49, 50, 52, 51, 54, 53, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 10, 8, 9, 12, 11, 14, 13, 15, 16, 17, 19, 18, 21, 20, 22, 24, 23, 30, 25, 26, 27, 28, 29, 35, 31, 32, 33, 34, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32 240, { 1, 0 }
  uselistorder label %dec_label_pc_d68c, { 1, 0 }
  uselistorder label %dec_label_pc_d674, { 1, 0 }
  uselistorder label %dec_label_pc_d4e8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d470, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
}

define i32 @function_d7b0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_d7b0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_d7b0 = load i32, i32* @r4, align 4
  %v12_d7b0 = load i32, i32* @r7, align 4
  %v1_d7b4 = urem i32 %arg1, 256
  store i32 %v1_d7b4, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @sl, align 4
  %v1_d7c8 = urem i32 %arg3, 256
  store i32 %v1_d7c8, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_d7d0 = call i32 @function_14094(i32 %v1_d7b4, i32 4)
  %v0_d7d4 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_d7e0 = load i32, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_d7e8 = inttoptr i32 %v0_d7d4 to i32*
  %v6_d7e8 = call i32 @function_a4e8(i32 %v0_d7e0, i32* %v5_d7e8, i32 2, i32 0)
  %v1_d7f4 = urem i32 %v6_d7e8, 256
  store i32 %v1_d7f4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d800 = load i32, i32* @r4, align 4
  %v0_d804 = load i32, i32* @r5, align 4
  %v5_d808 = trunc i32 %v6_d7e8 to i8
  %v6_d80c = inttoptr i32 %v0_d804 to i32*
  %v7_d80c = call i32 @function_a4e8(i32 %v0_d800, i32* %v6_d80c, i32 3, i32 65535)
  %v0_d810 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_d80c, i32* @r7, align 4
  %v0_d820 = load i32, i32* @r4, align 4
  %v4_d824 = inttoptr i32 %v0_d810 to i32*
  %v5_d824 = call i32 @function_a4e8(i32 %v0_d820, i32* %v4_d824, i32 4, i32 64)
  %v1_d82c = urem i32 %v5_d824, 256
  store i32 %v1_d82c, i32* %ip.global-to-local, align 4
  %v0_d830 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d83c = load i32, i32* @r4, align 4
  %v5_d840 = trunc i32 %v5_d824 to i8
  %v6_d844 = inttoptr i32 %v0_d830 to i32*
  %v7_d844 = call i32 @function_a4e8(i32 %v0_d83c, i32* %v6_d844, i32 5, i32 0)
  %v1_d850 = urem i32 %v7_d844, 256
  store i32 %v1_d850, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d85c = load i32, i32* @r4, align 4
  %v0_d860 = load i32, i32* @r5, align 4
  %v5_d868 = inttoptr i32 %v0_d860 to i32*
  %v6_d868 = call i32 @function_a4e8(i32 %v0_d85c, i32* %v5_d868, i32 6, i32 65535)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_d878 = load i32, i32* @r5, align 4
  store i32 %v6_d868, i32* @r6, align 4
  %v0_d880 = load i32, i32* @r4, align 4
  %v4_d884 = inttoptr i32 %v0_d878 to i32*
  %v5_d884 = call i32 @function_a4e8(i32 %v0_d880, i32* %v4_d884, i32 7, i32 27015)
  store i32 %v5_d884, i32* @r4, align 4
  %v1_d890 = call i32 @function_121a4(i32 29)
  %v3_d89c = call i32 @function_120c0(i32 29, i32* nonnull %stack_var_-44)
  store i32 %v3_d89c, i32* %r8.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_d8b0 = call i32 @function_13d90(i32 2, i32 3, i32 17)
  %v7_d8b4 = icmp eq i32 %v3_d8b0, -1
  store i1 %v7_d8b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_d8b0, i32* %fp.global-to-local, align 4
  br i1 %v7_d8b4, label %dec_label_pc_dc68, label %dec_label_pc_d8c0

dec_label_pc_d8c0:                                ; preds = %dec_label_pc_d7b0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d8c8 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d8c8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_d8dc = call i32 @function_13d60(i32 %v3_d8b0, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v7_d8e0 = icmp eq i32 %v6_d8dc, -1
  store i1 %v7_d8e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d8e0, label %dec_label_pc_dc60, label %dec_label_pc_d8e8

dec_label_pc_d8e8:                                ; preds = %dec_label_pc_d8c0
  %v0_d8e8 = load i32, i32* @r4, align 4
  %v3_d8e8 = mul i32 %v0_d8e8, 65536
  store i32 %v3_d8e8, i32* @lr, align 4
  %v0_d8ec = load i32, i32* @r7, align 4
  %v0_d8f0 = load i32, i32* @r6, align 4
  %v3_d8f0 = mul i32 %v0_d8f0, 65536
  store i32 %v3_d8f0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_d8f8 = urem i32 %v0_d8ec, 65536
  %v3_d8fc = urem i32 %v0_d8f0, 65536
  store i32 %v3_d8fc, i32* %r2.global-to-local, align 4
  %v3_d900 = urem i32 %v0_d8e8, 65536
  store i32 %v3_d900, i32* %r3.global-to-local, align 4
  %v0_d904 = load i32, i32* %sb.global-to-local, align 4
  %v2_d904 = icmp eq i32 %v0_d904, 0
  store i1 %v2_d904, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp50 = icmp slt i32 %v0_d904, 1
  br i1 %tmp50, label %dec_label_pc_da88, label %dec_label_pc_d91c

dec_label_pc_d91c:                                ; preds = %dec_label_pc_d8e8
  %v1_d920 = urem i32 %v0_d8e8, 256
  %v1_d924 = urem i32 %v0_d8ec, 256
  %v3_d928 = mul nuw nsw i32 %v1_d920, 256
  %v1_d92c = urem i32 %v0_d8f0, 256
  %tmp51 = udiv i32 %v0_d8ec, 256
  %v3_d930 = urem i32 %tmp51, 256
  %tmp52 = udiv i32 %v0_d8f0, 256
  %v3_d934 = urem i32 %tmp52, 256
  store i32 %v3_d934, i32* %ip.global-to-local, align 4
  %v4_d938 = mul nuw nsw i32 %v1_d924, 256
  %v5_d938 = or i32 %v4_d938, %v3_d930
  store i32 %v5_d938, i32* @r7, align 4
  %v4_d93c = mul nuw nsw i32 %v1_d92c, 256
  %v5_d93c = or i32 %v4_d93c, %v3_d934
  store i32 %v5_d93c, i32* @r6, align 4
  %tmp53 = udiv i32 %v0_d8e8, 256
  %v4_d940 = urem i32 %tmp53, 256
  %v5_d940 = or i32 %v4_d940, %v3_d928
  store i32 %v5_d940, i32* @r5, align 4
  store i32 %v1_d92c, i32* %r2.global-to-local, align 4
  store i32 %v1_d920, i32* %r3.global-to-local, align 4
  %v2_d9bc = icmp eq i32 %v1_d850, 0
  %v4_d9c0 = sext i8 %v5_d840 to i32
  %sext = mul i32 %v0_d8ec, 16777216
  %v4_d9dc = sdiv i32 %sext, 16777216
  %sext6 = mul i32 %v0_d8f0, 16777216
  %v4_da38 = sdiv i32 %sext6, 16777216
  %sext7 = mul i32 %v0_d8e8, 16777216
  %v4_da58 = sdiv i32 %sext7, 16777216
  br label %dec_label_pc_d95c

dec_label_pc_d95c:                                ; preds = %bb57, %dec_label_pc_d91c
  %v2_d964 = call i32 @function_14094(i32 128, i32 1)
  store i32 %v2_d7d0, i32* %r2.global-to-local, align 4
  %v3_d96c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d96c, i32* %r3.global-to-local, align 4
  %v2_d970 = load i32, i32* @r4, align 4
  %v5_d970 = mul i32 %v2_d970, 4
  %v6_d970 = add i32 %v5_d970, %v2_d7d0
  %v7_d970 = inttoptr i32 %v6_d970 to i32*
  store i32 %v2_d964, i32* %v7_d970, align 4
  %v0_d974 = load i32, i32* %r2.global-to-local, align 4
  %v1_d974 = load i32, i32* %r3.global-to-local, align 4
  %v4_d974 = mul i32 %v1_d974, 4
  %v5_d974 = add i32 %v4_d974, %v0_d974
  %v6_d974 = inttoptr i32 %v5_d974 to i32*
  %v7_d974 = load i32, i32* %v6_d974, align 4
  store i32 %v7_d974, i32* @lr, align 4
  %v1_d978 = inttoptr i32 %v7_d974 to i8*
  %v2_d978 = load i8, i8* %v1_d978, align 1
  %tmp = urem i8 %v2_d978, 16
  %v1_d97c = zext i8 %tmp to i32
  %v1_d980 = or i32 %v1_d97c, 64
  store i32 %v1_d980, i32* %r3.global-to-local, align 4
  %v1_d984 = trunc i32 %v1_d980 to i8
  store i8 %v1_d984, i8* %v1_d978, align 1
  %v0_d988 = load i32, i32* @lr, align 4
  %v1_d988 = inttoptr i32 %v0_d988 to i8*
  %v2_d988 = load i8, i8* %v1_d988, align 1
  %v1_d98c = and i8 %v2_d988, -16
  %v1_d990 = or i8 %v1_d98c, 5
  store i8 %v1_d990, i8* %v1_d988, align 1
  %v2_d99c = load i32, i32* @lr, align 4
  %v3_d99c = add i32 %v2_d99c, 1
  %v4_d99c = inttoptr i32 %v3_d99c to i8*
  store i8 %v5_d808, i8* %v4_d99c, align 1
  %v3_d9a0 = load i32, i32* %stack_var_-44, align 4
  %v1_d9a4 = add i32 %v3_d9a0, 32
  %tmp54 = mul i32 %v1_d9a4, 256
  %v1_d9b0 = and i32 %tmp54, 65280
  %tmp55 = udiv i32 %v1_d9a4, 256
  %v4_d9b4 = urem i32 %tmp55, 256
  %v5_d9b4 = or i32 %v4_d9b4, %v1_d9b0
  store i32 %v5_d9b4, i32* %r2.global-to-local, align 4
  store i1 %v2_d9bc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_d9c0, i32* %r3.global-to-local, align 4
  %v2_d9c4 = load i32, i32* @lr, align 4
  %v3_d9c4 = add i32 %v2_d9c4, 8
  %v4_d9c4 = inttoptr i32 %v3_d9c4 to i8*
  store i8 %v5_d840, i8* %v4_d9c4, align 1
  %v0_d9c8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d9c8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_d95c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_d9cc = load i32, i32* @lr, align 4
  %v4_d9cc = add i32 %v3_d9cc, 6
  %v5_d9cc = inttoptr i32 %v4_d9cc to i8*
  store i8 64, i8* %v5_d9cc, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d95c, %bb
  %v0_d9d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_d9d0 = trunc i32 %v0_d9d0 to i8
  %v2_d9d0 = load i32, i32* @lr, align 4
  %v3_d9d0 = add i32 %v2_d9d0, 2
  %v4_d9d0 = inttoptr i32 %v3_d9d0 to i8*
  store i8 %v1_d9d0, i8* %v4_d9d0, align 1
  %v0_d9d4 = load i32, i32* %r2.global-to-local, align 4
  %v3_d9d4 = sdiv i32 %v0_d9d4, 256
  store i32 %v3_d9d4, i32* %ip.global-to-local, align 4
  store i32 %v4_d9dc, i32* %r2.global-to-local, align 4
  %v2_d9e0 = load i32, i32* @lr, align 4
  %v3_d9e0 = add i32 %v2_d9e0, 9
  %v4_d9e0 = inttoptr i32 %v3_d9e0 to i8*
  store i8 17, i8* %v4_d9e0, align 1
  store i32 ptrtoint (i32* @global_var_1eadc.85 to i32), i32* %r3.global-to-local, align 4
  %v0_d9e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_d9e8 = trunc i32 %v0_d9e8 to i8
  %v2_d9e8 = load i32, i32* @lr, align 4
  %v3_d9e8 = add i32 %v2_d9e8, 5
  %v4_d9e8 = inttoptr i32 %v3_d9e8 to i8*
  store i8 %v1_d9e8, i8* %v4_d9e8, align 1
  %v0_d9ec = load i32, i32* %ip.global-to-local, align 4
  %v1_d9ec = trunc i32 %v0_d9ec to i8
  %v2_d9ec = load i32, i32* @lr, align 4
  %v3_d9ec = add i32 %v2_d9ec, 3
  %v4_d9ec = inttoptr i32 %v3_d9ec to i8*
  store i8 %v1_d9ec, i8* %v4_d9ec, align 1
  %v0_d9f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d9f0, label %.thread8, label %bb56

.thread8:                                         ; preds = %.thread
  %v3_d9f49 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d9f49, i32* %ip.global-to-local, align 4
  br label %bb57

bb56:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d9f4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d9f4, i32* %ip.global-to-local, align 4
  %v3_d9f8 = load i32, i32* @lr, align 4
  %v4_d9f8 = add i32 %v3_d9f8, 7
  %v5_d9f8 = inttoptr i32 %v4_d9f8 to i8*
  store i8 0, i8* %v5_d9f8, align 1
  %v0_da00.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb57

bb57:                                             ; preds = %.thread8, %bb56
  %v0_da00 = phi i32 [ %v3_d9f49, %.thread8 ], [ %v0_da00.pre, %bb56 ]
  %v2_d9fc = load i32, i32* @global_var_1eadc.85, align 4
  store i32 %v2_d9fc, i32* %r2.global-to-local, align 4
  %v3_da00 = mul i32 %v0_da00, 32
  store i32 %v3_da00, i32* %r3.global-to-local, align 4
  %v1_da04 = load i32, i32* @lr, align 4
  %v2_da04 = add i32 %v1_da04, 12
  %v3_da04 = inttoptr i32 %v2_da04 to i32*
  store i32 %v2_d9fc, i32* %v3_da04, align 4
  %v0_da08 = load i32, i32* %r3.global-to-local, align 4
  %v1_da08 = load i32, i32* %ip.global-to-local, align 4
  %tmp60 = mul i32 %v1_da08, -8
  %v5_da08 = add i32 %v0_da08, %tmp60
  %v1_da0c = load i32, i32* @sl, align 4
  %v2_da0c = add i32 %v5_da08, %v1_da0c
  store i32 %v2_da0c, i32* %r3.global-to-local, align 4
  %v1_da10 = add i32 %v2_da0c, 16
  %v2_da10 = inttoptr i32 %v1_da10 to i32*
  %v3_da10 = load i32, i32* %v2_da10, align 4
  %v1_da14 = load i32, i32* @lr, align 4
  %v2_da14 = add i32 %v1_da14, 16
  %v3_da14 = inttoptr i32 %v2_da14 to i32*
  store i32 %v3_da10, i32* %v3_da14, align 4
  %v3_da18 = load i32, i32* %stack_var_-44, align 4
  %v1_da1c = add i32 %v3_da18, 12
  %tmp58 = mul i32 %v1_da1c, 256
  %v1_da2c = and i32 %tmp58, 65280
  %tmp59 = udiv i32 %v1_da1c, 256
  %v4_da30 = urem i32 %tmp59, 256
  %v5_da30 = or i32 %v4_da30, %v1_da2c
  store i32 %v5_da30, i32* %ip.global-to-local, align 4
  %v1_da34 = load i32, i32* @lr, align 4
  %v2_da34 = add i32 %v1_da34, 28
  %v3_da34 = inttoptr i32 %v2_da34 to i32*
  store i32 -1, i32* %v3_da34, align 4
  store i32 %v4_da38, i32* %r2.global-to-local, align 4
  %v0_da3c = load i32, i32* @lr, align 4
  %v1_da3c = add i32 %v0_da3c, 20
  store i32 %v1_da3c, i32* %r4.global-to-local, align 4
  %v0_da40 = load i32, i32* %ip.global-to-local, align 4
  %v3_da40 = sdiv i32 %v0_da40, 256
  store i32 %v3_da40, i32* %r3.global-to-local, align 4
  %v0_da44 = load i32, i32* @r7, align 4
  %v1_da44 = trunc i32 %v0_da44 to i8
  %v3_da44 = add i32 %v0_da3c, 4
  %v4_da44 = inttoptr i32 %v3_da44 to i8*
  store i8 %v1_da44, i8* %v4_da44, align 1
  %v0_da48 = load i32, i32* @r6, align 4
  %v1_da48 = trunc i32 %v0_da48 to i8
  %v2_da48 = load i32, i32* @lr, align 4
  %v3_da48 = add i32 %v2_da48, 20
  %v4_da48 = inttoptr i32 %v3_da48 to i8*
  store i8 %v1_da48, i8* %v4_da48, align 1
  %v0_da4c = load i32, i32* %r3.global-to-local, align 4
  %v1_da4c = trunc i32 %v0_da4c to i8
  %v2_da4c = load i32, i32* %r4.global-to-local, align 4
  %v3_da4c = add i32 %v2_da4c, 5
  %v4_da4c = inttoptr i32 %v3_da4c to i8*
  store i8 %v1_da4c, i8* %v4_da4c, align 1
  %v0_da50 = load i32, i32* @r5, align 4
  %v1_da50 = trunc i32 %v0_da50 to i8
  %v2_da50 = load i32, i32* %r4.global-to-local, align 4
  %v3_da50 = add i32 %v2_da50, 2
  %v4_da50 = inttoptr i32 %v3_da50 to i8*
  store i8 %v1_da50, i8* %v4_da50, align 1
  %v0_da54 = load i32, i32* %r2.global-to-local, align 4
  %v1_da54 = trunc i32 %v0_da54 to i8
  %v2_da54 = load i32, i32* %r4.global-to-local, align 4
  %v3_da54 = add i32 %v2_da54, 1
  %v4_da54 = inttoptr i32 %v3_da54 to i8*
  store i8 %v1_da54, i8* %v4_da54, align 1
  store i32 %v4_da58, i32* %r3.global-to-local, align 4
  %v0_da5c = load i32, i32* %ip.global-to-local, align 4
  %v1_da5c = trunc i32 %v0_da5c to i8
  %v2_da5c = load i32, i32* %r4.global-to-local, align 4
  %v3_da5c = add i32 %v2_da5c, 4
  %v4_da5c = inttoptr i32 %v3_da5c to i8*
  store i8 %v1_da5c, i8* %v4_da5c, align 1
  %v0_da60 = load i32, i32* %r3.global-to-local, align 4
  %v1_da60 = trunc i32 %v0_da60 to i8
  %v2_da60 = load i32, i32* %r4.global-to-local, align 4
  %v3_da60 = add i32 %v2_da60, 3
  %v4_da60 = inttoptr i32 %v3_da60 to i8*
  store i8 %v1_da60, i8* %v4_da60, align 1
  %v0_da64 = load i32, i32* %r8.global-to-local, align 4
  %v0_da68 = load i32, i32* @lr, align 4
  %v1_da68 = add i32 %v0_da68, 32
  %v3_da6c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_da6c, i32* %r2.global-to-local, align 4
  %v3_da70 = call i32 @function_12b4c(i32 %v1_da68, i32 %v0_da64, i32 %v3_da6c)
  %v3_da74 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_da74, i32* %r3.global-to-local, align 4
  %v1_da78 = add i32 %v3_da74, 1
  store i32 %v1_da78, i32* @r4, align 4
  %v1_da7c = load i32, i32* %sb.global-to-local, align 4
  %v9_da7c = icmp eq i32 %v1_da78, %v1_da7c
  store i1 %v9_da7c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_da78, i32* %stack_var_-40, align 4
  %v5_da84 = icmp slt i32 %v1_da78, %v1_da7c
  br i1 %v5_da84, label %dec_label_pc_d95c, label %dec_label_pc_da88

dec_label_pc_da88:                                ; preds = %bb57, %dec_label_pc_d8e8
  %v0_da88 = phi i32 [ %v0_d904, %dec_label_pc_d8e8 ], [ %v1_da7c, %bb57 ]
  %v2_da88 = icmp eq i32 %v0_da88, 0
  store i1 %v2_da88, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_dad0 = icmp eq i32 %v3_d8f8, 65535
  br label %dec_label_pc_da90.outer

dec_label_pc_da90.outer:                          ; preds = %dec_label_pc_dba0, %dec_label_pc_da88
  %v1_da90.ph.in = phi i32 [ %v1_db94, %dec_label_pc_dba0 ], [ %v0_da88, %dec_label_pc_da88 ]
  %v0_da90.ph = phi i1 [ %v2_dba0, %dec_label_pc_dba0 ], [ %v2_da88, %dec_label_pc_da88 ]
  %v1_da90.ph = icmp slt i32 %v1_da90.ph.in, 0
  %v4_da90 = or i1 %v1_da90.ph, %v0_da90.ph
  br label %dec_label_pc_da90

dec_label_pc_da90:                                ; preds = %dec_label_pc_da90.outer, %dec_label_pc_da90
  br i1 %v4_da90, label %dec_label_pc_da90, label %dec_label_pc_da94

dec_label_pc_da94:                                ; preds = %dec_label_pc_da90
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_daa0

dec_label_pc_daa0:                                ; preds = %dec_label_pc_daf0, %dec_label_pc_da94
  %v1_dab4 = phi i32 [ %v1_db90, %dec_label_pc_daf0 ], [ 0, %dec_label_pc_da94 ]
  %v5_daa4 = mul i32 %v1_dab4, 24
  %v1_daa8 = load i32, i32* @sl, align 4
  %v2_daa8 = add i32 %v1_daa8, %v5_daa4
  store i32 %v2_daa8, i32* %r3.global-to-local, align 4
  %v1_dab0 = add i32 %v2_daa8, 20
  %v2_dab0 = inttoptr i32 %v1_dab0 to i8*
  %v3_dab0 = load i8, i8* %v2_dab0, align 1
  %v4_dab0 = zext i8 %v3_dab0 to i32
  store i32 %v4_dab0, i32* %r2.global-to-local, align 4
  %v4_dab4 = mul i32 %v1_dab4, 4
  %v5_dab4 = add i32 %v4_dab4, %v2_d7d0
  %v6_dab4 = inttoptr i32 %v5_dab4 to i32*
  %v7_dab4 = load i32, i32* %v6_dab4, align 4
  store i32 %v7_dab4, i32* @r5, align 4
  %v7_dabc = icmp eq i8 %v3_dab0, 31
  store i1 %v7_dabc, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* %r7.global-to-local, align 4
  %v1_dac4 = add i32 %v7_dab4, 20
  store i32 %v1_dac4, i32* @r6, align 4
  %tmp61 = icmp ult i8 %v3_dab0, 32
  br i1 %tmp61, label %dec_label_pc_dbac, label %dec_label_pc_dacc

dec_label_pc_dacc:                                ; preds = %dec_label_pc_daa0
  store i32 %v3_d8f8, i32* %r2.global-to-local, align 4
  store i1 %v3_dad0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_dad0, label %dec_label_pc_dc14, label %dec_label_pc_dad8

dec_label_pc_dad8:                                ; preds = %dec_label_pc_dbac.dec_label_pc_dad8_crit_edge, %dec_label_pc_dacc
  %v1_dadc = phi i32 [ %v1_dadc.pre, %dec_label_pc_dbac.dec_label_pc_dad8_crit_edge ], [ 65535, %dec_label_pc_dacc ]
  store i32 %v3_d8fc, i32* %r3.global-to-local, align 4
  %v9_dadc = icmp eq i32 %v3_d8fc, %v1_dadc
  store i1 %v9_dadc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dadc, label %dec_label_pc_dc30, label %dec_label_pc_dae4

dec_label_pc_dae4:                                ; preds = %dec_label_pc_dc14.dec_label_pc_dae4_crit_edge, %dec_label_pc_dad8
  %v1_dae8 = phi i32 [ %v1_dae8.pre, %dec_label_pc_dc14.dec_label_pc_dae4_crit_edge ], [ %v1_dadc, %dec_label_pc_dad8 ]
  %v9_dae8 = icmp eq i32 %v3_d900, %v1_dae8
  store i1 %v9_dae8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dae8, label %dec_label_pc_dc4c, label %dec_label_pc_daf0

dec_label_pc_daf0:                                ; preds = %dec_label_pc_dc30, %dec_label_pc_dae4, %dec_label_pc_dc4c
  %v0_daf4 = load i32, i32* %r8.global-to-local, align 4
  %v1_daf4 = trunc i32 %v0_daf4 to i8
  %v2_daf4 = load i32, i32* @r5, align 4
  %v3_daf4 = add i32 %v2_daf4, 10
  %v4_daf4 = inttoptr i32 %v3_daf4 to i8*
  store i8 %v1_daf4, i8* %v4_daf4, align 1
  %v0_daf8 = load i32, i32* %r8.global-to-local, align 4
  %v1_daf8 = trunc i32 %v0_daf8 to i8
  %v2_daf8 = load i32, i32* @r5, align 4
  %v3_daf8 = add i32 %v2_daf8, 11
  %v4_daf8 = inttoptr i32 %v3_daf8 to i8*
  store i8 %v1_daf8, i8* %v4_daf8, align 1
  %v0_dafc = load i32, i32* @r5, align 4
  store i32 %v0_dafc, i32* @r0, align 4
  %v2_db00 = call i32 @function_e424(i32 %v0_dafc, i32 20)
  %v3_db00 = trunc i32 %v2_db00 to i8
  %v4_db04 = sdiv i32 %v2_db00, 256
  store i32 %v4_db04, i32* %r3.global-to-local, align 4
  %v1_db08 = trunc i32 %v4_db04 to i8
  %v2_db08 = load i32, i32* @r5, align 4
  %v3_db08 = add i32 %v2_db08, 11
  %v4_db08 = inttoptr i32 %v3_db08 to i8*
  store i8 %v1_db08, i8* %v4_db08, align 1
  %v3_db0c = load i32, i32* @r5, align 4
  %v4_db0c = add i32 %v3_db0c, 10
  %v5_db0c = inttoptr i32 %v4_db0c to i8*
  store i8 %v3_db00, i8* %v5_db0c, align 1
  %v0_db10 = load i32, i32* %r8.global-to-local, align 4
  %v1_db10 = trunc i32 %v0_db10 to i8
  %v2_db10 = load i32, i32* @r6, align 4
  %v3_db10 = add i32 %v2_db10, 6
  %v4_db10 = inttoptr i32 %v3_db10 to i8*
  store i8 %v1_db10, i8* %v4_db10, align 1
  %v0_db14 = load i32, i32* %r8.global-to-local, align 4
  %v1_db14 = trunc i32 %v0_db14 to i8
  %v2_db14 = load i32, i32* @r6, align 4
  %v3_db14 = add i32 %v2_db14, 7
  %v4_db14 = inttoptr i32 %v3_db14 to i8*
  store i8 %v1_db14, i8* %v4_db14, align 1
  %v0_db18 = load i32, i32* @r5, align 4
  %v1_db18 = add i32 %v0_db18, 24
  %v2_db18 = inttoptr i32 %v1_db18 to i8*
  %v3_db18 = load i8, i8* %v2_db18, align 1
  %v4_db18 = zext i8 %v3_db18 to i32
  store i32 %v4_db18, i32* %r3.global-to-local, align 4
  %v1_db1c = add i32 %v0_db18, 25
  %v2_db1c = inttoptr i32 %v1_db1c to i8*
  %v3_db1c = load i8, i8* %v2_db1c, align 1
  %v4_db1c = zext i8 %v3_db1c to i32
  %v4_db20 = mul nuw nsw i32 %v4_db1c, 256
  %v5_db20 = or i32 %v4_db20, %v4_db18
  store i32 %v5_db20, i32* %r2.global-to-local, align 4
  %v3_db24 = load i32, i32* %stack_var_-44, align 4
  %v0_db28 = load i32, i32* @r6, align 4
  store i32 %v0_db28, i32* @r1, align 4
  %v1_db2c = add i32 %v3_db24, 12
  store i32 %v1_db2c, i32* %r3.global-to-local, align 4
  %v4_db34 = call i32 @function_e480(i32 %v0_db18, i32 %v0_db28, i32 %v5_db20, i32 %v1_db2c)
  %v5_db34 = trunc i32 %v4_db34 to i8
  %v4_db3824 = udiv i32 %v4_db34, 256
  %v1_db3c = trunc i32 %v4_db3824 to i8
  %v2_db3c = load i32, i32* @r6, align 4
  %v3_db3c = add i32 %v2_db3c, 7
  %v4_db3c = inttoptr i32 %v3_db3c to i8*
  store i8 %v1_db3c, i8* %v4_db3c, align 1
  %v3_db40 = load i32, i32* @r6, align 4
  %v4_db40 = add i32 %v3_db40, 6
  %v5_db40 = inttoptr i32 %v4_db40 to i8*
  store i8 %v5_db34, i8* %v5_db40, align 1
  %v3_db44 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_db44, i32* %r3.global-to-local, align 4
  %v0_db48 = load i32, i32* @r5, align 4
  %v1_db48 = add i32 %v0_db48, 20
  %v2_db48 = inttoptr i32 %v1_db48 to i32*
  %v3_db48 = load i32, i32* %v2_db48, align 4
  %v5_db50 = mul i32 %v3_db44, 24
  %v1_db54 = load i32, i32* @sl, align 4
  %v2_db54 = add i32 %v1_db54, %v5_db50
  store i32 %v2_db54, i32* %ip.global-to-local, align 4
  %v3_db58 = udiv i32 %v3_db48, 65536
  store i32 %v3_db58, i32* %r2.global-to-local, align 4
  %v1_db5c = trunc i32 %v3_db58 to i8
  %v3_db5c = add i32 %v2_db54, 2
  %v4_db5c = inttoptr i32 %v3_db5c to i8*
  store i8 %v1_db5c, i8* %v4_db5c, align 1
  %v0_db60 = load i32, i32* %r2.global-to-local, align 4
  %v3_db6025 = udiv i32 %v0_db60, 256
  %v3_db64 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_db64, i32* %r2.global-to-local, align 4
  %v1_db68 = trunc i32 %v3_db6025 to i8
  %v2_db68 = load i32, i32* %ip.global-to-local, align 4
  %v3_db68 = add i32 %v2_db68, 3
  %v4_db68 = inttoptr i32 %v3_db68 to i8*
  store i8 %v1_db68, i8* %v4_db68, align 1
  %v0_db6c = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_db74 = load i32, i32* %r2.global-to-local, align 4
  %v1_db74 = add i32 %v0_db74, 32
  store i32 %v1_db74, i32* %r2.global-to-local, align 4
  %v0_db78 = load i32, i32* %fp.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_db80 = load i32, i32* %ip.global-to-local, align 4
  %v6_db88 = inttoptr i32 %v0_db6c to i32*
  %v7_db88 = call i32 @function_13d2c(i32 %v0_db78, i32* %v6_db88, i32 %v1_db74, i32 16384, i32 %v0_db80, i32 16)
  %v3_db8c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_db8c, i32* %r3.global-to-local, align 4
  %v1_db90 = add i32 %v3_db8c, 1
  %v1_db94 = load i32, i32* %sb.global-to-local, align 4
  %v9_db94 = icmp eq i32 %v1_db90, %v1_db94
  store i1 %v9_db94, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_db90, i32* %stack_var_-40, align 4
  %v5_db9c = icmp slt i32 %v1_db90, %v1_db94
  br i1 %v5_db9c, label %dec_label_pc_daa0, label %dec_label_pc_dba0

dec_label_pc_dba0:                                ; preds = %dec_label_pc_daf0
  %v2_dba0 = icmp eq i32 %v1_db94, 0
  store i1 %v2_dba0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_da90.outer

dec_label_pc_dbac:                                ; preds = %dec_label_pc_daa0
  %v1_dbac = add i32 %v2_daa8, 16
  %v2_dbac = inttoptr i32 %v1_dbac to i32*
  %v3_dbac = load i32, i32* %v2_dbac, align 4
  store i32 %v3_dbac, i32* @r4, align 4
  %v0_dbb0 = call i32 @function_fbfc()
  %v3_dbb4 = load i32, i32* %stack_var_-40, align 4
  %v5_dbbc = mul i32 %v3_dbb4, 24
  %v0_dbc0 = load i32, i32* @r4, align 4
  %v1_dbc4 = and i32 %v0_dbc0, 65280
  store i32 %v1_dbc4, i32* %r3.global-to-local, align 4
  %v1_dbc0 = udiv i32 %v0_dbc0, 256
  %v3_dbc8 = and i32 %v1_dbc0, 65280
  store i32 %v3_dbc8, i32* %r2.global-to-local, align 4
  %v1_dbcc = load i32, i32* @sl, align 4
  %v2_dbcc = add i32 %v1_dbcc, %v5_dbbc
  store i32 %v2_dbcc, i32* %ip.global-to-local, align 4
  %v1_dbd8 = add i32 %v2_dbcc, 20
  %v2_dbd8 = inttoptr i32 %v1_dbd8 to i8*
  %v3_dbd8 = load i8, i8* %v2_dbd8, align 1
  %v4_dbd8 = zext i8 %v3_dbd8 to i32
  %v2_dbe0 = call i32 @llvm.bswap.i32(i32 %v0_dbc0)
  %v7_dbe4 = lshr i32 %v0_dbb0, %v4_dbd8
  %v8_dbe4 = add i32 %v7_dbe4, %v2_dbe0
  store i32 %v3_d8f8, i32* %r2.global-to-local, align 4
  %v2_dc04 = call i32 @llvm.bswap.i32(i32 %v8_dbe4)
  store i32 %v2_dc04, i32* %r3.global-to-local, align 4
  %v1_dc08 = load i32, i32* %r7.global-to-local, align 4
  %v9_dc08 = icmp eq i32 %v3_d8f8, %v1_dc08
  store i1 %v9_dc08, i1* %cpsr_z.global-to-local, align 1
  %v1_dc0c = load i32, i32* @r5, align 4
  %v2_dc0c = add i32 %v1_dc0c, 16
  %v3_dc0c = inttoptr i32 %v2_dc0c to i32*
  store i32 %v2_dc04, i32* %v3_dc0c, align 4
  br i1 %v9_dc08, label %dec_label_pc_dc14, label %dec_label_pc_dbac.dec_label_pc_dad8_crit_edge

dec_label_pc_dbac.dec_label_pc_dad8_crit_edge:    ; preds = %dec_label_pc_dbac
  %v1_dadc.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_dad8

dec_label_pc_dc14:                                ; preds = %dec_label_pc_dbac, %dec_label_pc_dacc
  %v0_dc14 = call i32 @function_fbfc()
  %v1_dc14 = trunc i32 %v0_dc14 to i8
  %v4_dc1826 = udiv i32 %v0_dc14, 256
  %v1_dc1c = trunc i32 %v4_dc1826 to i8
  %v2_dc1c = load i32, i32* @r5, align 4
  %v3_dc1c = add i32 %v2_dc1c, 5
  %v4_dc1c = inttoptr i32 %v3_dc1c to i8*
  store i8 %v1_dc1c, i8* %v4_dc1c, align 1
  store i32 %v3_d8fc, i32* %r3.global-to-local, align 4
  %v1_dc24 = load i32, i32* %r7.global-to-local, align 4
  %v9_dc24 = icmp eq i32 %v3_d8fc, %v1_dc24
  store i1 %v9_dc24, i1* %cpsr_z.global-to-local, align 1
  %v3_dc28 = load i32, i32* @r5, align 4
  %v4_dc28 = add i32 %v3_dc28, 4
  %v5_dc28 = inttoptr i32 %v4_dc28 to i8*
  store i8 %v1_dc14, i8* %v5_dc28, align 1
  %v0_dc2c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dc2c, label %dec_label_pc_dc30, label %dec_label_pc_dc14.dec_label_pc_dae4_crit_edge

dec_label_pc_dc14.dec_label_pc_dae4_crit_edge:    ; preds = %dec_label_pc_dc14
  %v1_dae8.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_dae4

dec_label_pc_dc30:                                ; preds = %dec_label_pc_dc14, %dec_label_pc_dad8
  %v0_dc30 = call i32 @function_fbfc()
  %v1_dc30 = trunc i32 %v0_dc30 to i8
  %v4_dc38 = sdiv i32 %v0_dc30, 256
  store i32 %v4_dc38, i32* %r3.global-to-local, align 4
  %v1_dc3c = load i32, i32* %r7.global-to-local, align 4
  %v9_dc3c = icmp eq i32 %v3_d900, %v1_dc3c
  store i1 %v9_dc3c, i1* %cpsr_z.global-to-local, align 1
  %v3_dc40 = load i32, i32* @r5, align 4
  %v4_dc40 = add i32 %v3_dc40, 20
  %v5_dc40 = inttoptr i32 %v4_dc40 to i8*
  store i8 %v1_dc30, i8* %v5_dc40, align 1
  %v0_dc44 = load i32, i32* %r3.global-to-local, align 4
  %v1_dc44 = trunc i32 %v0_dc44 to i8
  %v2_dc44 = load i32, i32* @r6, align 4
  %v3_dc44 = add i32 %v2_dc44, 1
  %v4_dc44 = inttoptr i32 %v3_dc44 to i8*
  store i8 %v1_dc44, i8* %v4_dc44, align 1
  %v0_dc48 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dc48, label %dec_label_pc_dc4c, label %dec_label_pc_daf0

dec_label_pc_dc4c:                                ; preds = %dec_label_pc_dc30, %dec_label_pc_dae4
  %v0_dc4c = call i32 @function_fbfc()
  %v1_dc4c = trunc i32 %v0_dc4c to i8
  %v4_dc50 = sdiv i32 %v0_dc4c, 256
  store i32 %v4_dc50, i32* %r3.global-to-local, align 4
  %v1_dc54 = trunc i32 %v4_dc50 to i8
  %v2_dc54 = load i32, i32* @r6, align 4
  %v3_dc54 = add i32 %v2_dc54, 3
  %v4_dc54 = inttoptr i32 %v3_dc54 to i8*
  store i8 %v1_dc54, i8* %v4_dc54, align 1
  %v3_dc58 = load i32, i32* @r6, align 4
  %v4_dc58 = add i32 %v3_dc58, 2
  %v5_dc58 = inttoptr i32 %v4_dc58 to i8*
  store i8 %v1_dc4c, i8* %v5_dc58, align 1
  br label %dec_label_pc_daf0

dec_label_pc_dc60:                                ; preds = %dec_label_pc_d8c0
  %v0_dc60 = load i32, i32* %fp.global-to-local, align 4
  %v1_dc64 = call i32 @function_13490(i32 %v0_dc60)
  br label %dec_label_pc_dc68

dec_label_pc_dc68:                                ; preds = %dec_label_pc_d7b0, %dec_label_pc_dc60
  %v29_dc6c = phi i32 [ %v3_d8b0, %dec_label_pc_d7b0 ], [ %v1_dc64, %dec_label_pc_dc60 ]
  store i32 %v3_d7b0, i32* %r4.global-to-local, align 4
  store i32 %v12_d7b0, i32* %r7.global-to-local, align 4
  ret i32 %v29_dc6c

; uselistorder directives
  uselistorder i32 %v4_dc50, { 1, 0 }
  uselistorder i32 %v2_dc04, { 1, 0 }
  uselistorder i32 %v0_dbc0, { 1, 0, 2 }
  uselistorder i1 %v2_dba0, { 1, 0 }
  uselistorder i32 %v1_db94, { 1, 2, 3, 0 }
  uselistorder i32 %v1_db90, { 2, 0, 3, 1 }
  uselistorder i32 %v3_db58, { 1, 0 }
  uselistorder i32 %v4_db04, { 1, 0 }
  uselistorder i1 %v3_dad0, { 1, 0 }
  uselistorder i32 %v1_da78, { 1, 0, 2, 3 }
  uselistorder i32 %v1_da1c, { 1, 0 }
  uselistorder i32 %v1_d9a4, { 1, 0 }
  uselistorder i32 %v1_d92c, { 1, 0 }
  uselistorder i32 %v1_d920, { 1, 0 }
  uselistorder i32 %v0_d8f0, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_d8e8, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_d8e0, { 1, 0 }
  uselistorder i1 %v7_d8b4, { 1, 0 }
  uselistorder i32 %v3_d8b0, { 1, 2, 3, 0 }
  uselistorder i32 %v1_d850, { 1, 0 }
  uselistorder i8 %v5_d840, { 1, 0 }
  uselistorder i32 %v5_d824, { 1, 0 }
  uselistorder i32 %v6_d7e8, { 1, 0 }
  uselistorder i32 %v1_d7b4, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 1, 13, 12 }
  uselistorder i32* %r7.global-to-local, { 0, 3, 1, 4, 2, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 17, 7, 8, 18, 9, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder label %dec_label_pc_dc68, { 1, 0 }
  uselistorder label %dec_label_pc_daf0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_da90, { 1, 0 }
  uselistorder label %bb57, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_dc74(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_dc74:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_dc74 = load i32, i32* @r4, align 4
  %v15_dc74 = load i32, i32* @r8, align 4
  %v18_dc74 = load i32, i32* @sb, align 4
  %v21_dc74 = load i32, i32* @sl, align 4
  %v24_dc74 = load i32, i32* @fp, align 4
  %v1_dc80 = urem i32 %arg1, 256
  store i32 %v1_dc80, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_dc8c = urem i32 %arg3, 256
  store i32 %v1_dc8c, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_dc98 = call i32 @function_14094(i32 %v1_dc80, i32 4)
  %v0_dc9c = load i32, i32* @r5, align 4
  store i32 %v0_dc9c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_dca8 = load i32, i32* @r4, align 4
  store i32 %v0_dca8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_dcb0 = inttoptr i32 %v0_dc9c to i32*
  %v6_dcb0 = call i32 @function_a4e8(i32 %v0_dca8, i32* %v5_dcb0, i32 2, i32 0)
  %v1_dcbc = urem i32 %v6_dcb0, 256
  store i32 %v1_dcbc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_dcc8 = load i32, i32* @r4, align 4
  store i32 %v0_dcc8, i32* %r0.global-to-local, align 4
  %v0_dccc = load i32, i32* @r5, align 4
  store i32 %v0_dccc, i32* %r1.global-to-local, align 4
  %v5_dcd0 = trunc i32 %v6_dcb0 to i8
  %v6_dcd4 = inttoptr i32 %v0_dccc to i32*
  %v7_dcd4 = call i32 @function_a4e8(i32 %v0_dcc8, i32* %v6_dcd4, i32 3, i32 65535)
  %v0_dcd8 = load i32, i32* @r5, align 4
  store i32 %v0_dcd8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_dce4 = load i32, i32* @r4, align 4
  store i32 %v0_dce4, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_dcec = inttoptr i32 %v0_dcd8 to i32*
  %v6_dcec = call i32 @function_a4e8(i32 %v0_dce4, i32* %v5_dcec, i32 4, i32 64)
  %v1_dcf4 = urem i32 %v6_dcec, 256
  store i32 %v1_dcf4, i32* %ip.global-to-local, align 4
  %v0_dcf8 = load i32, i32* @r5, align 4
  store i32 %v0_dcf8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_dd04 = load i32, i32* @r4, align 4
  store i32 %v0_dd04, i32* %r0.global-to-local, align 4
  %v6_dd0c = inttoptr i32 %v0_dcf8 to i32*
  %v7_dd0c = call i32 @function_a4e8(i32 %v0_dd04, i32* %v6_dd0c, i32 5, i32 0)
  %v1_dd18 = urem i32 %v7_dd0c, 256
  store i32 %v1_dd18, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_dd24 = load i32, i32* @r4, align 4
  store i32 %v0_dd24, i32* %r0.global-to-local, align 4
  %v0_dd28 = load i32, i32* @r5, align 4
  store i32 %v0_dd28, i32* %r1.global-to-local, align 4
  %v5_dd30 = inttoptr i32 %v0_dd28 to i32*
  %v6_dd30 = call i32 @function_a4e8(i32 %v0_dd24, i32* %v5_dd30, i32 6, i32 65535)
  %v0_dd34 = load i32, i32* @r5, align 4
  store i32 %v0_dd34, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  store i32 %v6_dd30, i32* %fp.global-to-local, align 4
  %v0_dd44 = load i32, i32* @r4, align 4
  store i32 %v0_dd44, i32* %r0.global-to-local, align 4
  %v4_dd48 = inttoptr i32 %v0_dd34 to i32*
  %v5_dd48 = call i32 @function_a4e8(i32 %v0_dd44, i32* %v4_dd48, i32 7, i32 53)
  %v0_dd50 = load i32, i32* @r5, align 4
  store i32 %v0_dd50, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 %v5_dd48, i32* %sb.global-to-local, align 4
  %v0_dd60 = load i32, i32* @r4, align 4
  store i32 %v0_dd60, i32* %r0.global-to-local, align 4
  %v4_dd64 = inttoptr i32 %v0_dd50 to i32*
  %v5_dd64 = call i32 @function_a4e8(i32 %v0_dd60, i32* %v4_dd64, i32 9, i32 65535)
  %v0_dd68 = load i32, i32* @r5, align 4
  store i32 %v0_dd68, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 %v5_dd64, i32* @sl, align 4
  %v0_dd78 = load i32, i32* @r4, align 4
  store i32 %v0_dd78, i32* %r0.global-to-local, align 4
  %v4_dd7c = inttoptr i32 %v0_dd68 to i32*
  %v5_dd7c = call i32 @function_a4e8(i32 %v0_dd78, i32* %v4_dd7c, i32 0, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_dd88 = load i32, i32* @r5, align 4
  store i32 %v0_dd88, i32* %r1.global-to-local, align 4
  store i32 %v5_dd7c, i32* %r8.global-to-local, align 4
  %v0_dd90 = load i32, i32* @r4, align 4
  store i32 %v0_dd90, i32* %r0.global-to-local, align 4
  %v5_dd94 = inttoptr i32 %v0_dd88 to i32*
  %v6_dd94 = call i32 @function_9f84(i32 %v0_dd90, i32* %v5_dd94, i32 8, i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_dda0 = call i32 @function_121a4(i32 30)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v3_ddac = call i32 @function_120c0(i32 30, i32* null)
  store i32 %v3_ddac, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_ddb4 = inttoptr i32 %v3_ddac to i8*
  %v3_ddb4 = call i32 @function_135bc(i8* %v2_ddb4, i32 0)
  store i32 %v3_ddb4, i32* @r4, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_ddc0 = call i32 @function_120ec(i32 30)
  store i32 %v1_ddc0, i32* %r0.global-to-local, align 4
  %v0_ddc4 = load i32, i32* @r4, align 4
  %v1_ddc4 = icmp slt i32 %v0_ddc4, 0
  %v2_ddc4 = icmp eq i32 %v0_ddc4, 0
  store i1 %v2_ddc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_ddc4, label %dec_label_pc_e390, label %dec_label_pc_ddcc

dec_label_pc_ddcc:                                ; preds = %dec_label_pc_dc74
  %v2_ddd0 = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_ddd0, i32* @r6, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_ddd0, i32* %r1.global-to-local, align 4
  store i32 %v0_ddc4, i32* %r0.global-to-local, align 4
  %v4_dde0 = call i32 @function_13658(i32 %v0_ddc4, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_dde0, i32* @r5, align 4
  %v0_dde8 = load i32, i32* @r4, align 4
  store i32 %v0_dde8, i32* %r0.global-to-local, align 4
  %v1_ddec = call i32 @function_13490(i32 %v0_dde8)
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_ddf4 = call i32 @function_121a4(i32 31)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v3_de00 = call i32 @function_120c0(i32 31, i32* null)
  %v0_de04 = load i32, i32* @r5, align 4
  store i32 %v0_de04, i32* @r1, align 4
  store i32 %v3_de00, i32* %r2.global-to-local, align 4
  store i32 %v2_ddd0, i32* %r0.global-to-local, align 4
  %v3_de10 = bitcast i32* %stack_var_-2120 to i8*
  %v4_de10 = call i32 @function_12e24(i8* %v3_de10, i32 %v0_de04, i32 %v3_de00)
  store i32 %v4_de10, i32* @r4, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_de1c = call i32 @function_120ec(i32 31)
  store i32 %v1_de1c, i32* %r0.global-to-local, align 4
  %v0_de20 = load i32, i32* @r4, align 4
  %v7_de20 = icmp eq i32 %v0_de20, -1
  store i1 %v7_de20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_de20, label %dec_label_pc_e390, label %dec_label_pc_de28

dec_label_pc_de28:                                ; preds = %dec_label_pc_ddcc
  %v0_de28 = load i32, i32* @r5, align 4
  %v9_de28 = icmp eq i32 %v0_de28, %v0_de20
  store i1 %v9_de28, i1* %cpsr_z.global-to-local, align 1
  %v7_de2c = icmp sgt i32 %v0_de28, %v0_de20
  br i1 %v7_de2c, label %dec_label_pc_de30, label %dec_label_pc_e390

dec_label_pc_de30:                                ; preds = %dec_label_pc_de28
  store i32 %v0_de28, i32* %r3.global-to-local, align 4
  store i32 %v0_de20, i32* %r2.global-to-local, align 4
  %v0_de40 = load i32, i32* @r6, align 4
  %v2_de40 = add i32 %v0_de40, %v0_de20
  store i32 %v2_de40, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_de48 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_de48, i32* @r7, align 4
  %v1_de78 = add i32 %v0_de28, -1
  br label %dec_label_pc_de70

dec_label_pc_de54:                                ; preds = %dec_label_pc_de98, %bb138
  %v9_de54 = icmp eq i32 %v0_de60, %v1_de78
  store i1 %v9_de54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_de54, label %dec_label_pc_dea4, label %dec_label_pc_de5c

dec_label_pc_de5c:                                ; preds = %dec_label_pc_de88, %dec_label_pc_de54, %bb
  %v0_de9442 = phi i32 [ %v0_de94, %dec_label_pc_de88 ], [ %v0_de9443, %dec_label_pc_de54 ], [ %v0_de94, %bb ]
  %v0_de7438 = phi i32 [ 0, %dec_label_pc_de88 ], [ %v0_de7439, %dec_label_pc_de54 ], [ 0, %bb ]
  store i32 %v0_de28, i32* %r0.global-to-local, align 4
  %v1_de60 = add i32 %v0_de60, 1
  store i32 %v1_de60, i32* %r2.global-to-local, align 4
  %v9_de64 = icmp eq i32 %v0_de28, %v1_de60
  store i1 %v9_de64, i1* %cpsr_z.global-to-local, align 1
  %v1_de68 = add i32 %v0_de68, 1
  store i32 %v1_de68, i32* @r7, align 4
  br i1 %v9_de64, label %dec_label_pc_e390, label %dec_label_pc_de70

dec_label_pc_de70:                                ; preds = %dec_label_pc_de5c, %dec_label_pc_de30
  %v0_de68 = phi i32 [ %v1_de68, %dec_label_pc_de5c ], [ %v2_de48, %dec_label_pc_de30 ]
  %v0_de60 = phi i32 [ %v1_de60, %dec_label_pc_de5c ], [ %v0_de20, %dec_label_pc_de30 ]
  %v0_de94 = phi i32 [ %v0_de9442, %dec_label_pc_de5c ], [ 0, %dec_label_pc_de30 ]
  %v0_de74 = phi i32 [ %v0_de7438, %dec_label_pc_de5c ], [ 0, %dec_label_pc_de30 ]
  %v0_de7c = phi i32 [ %v1_de7c, %dec_label_pc_de5c ], [ %v2_de40, %dec_label_pc_de30 ]
  %v1_de70 = inttoptr i32 %v0_de7c to i8*
  %v2_de70 = load i8, i8* %v1_de70, align 1
  %v3_de70 = zext i8 %v2_de70 to i32
  store i32 %v3_de70, i32* %r3.global-to-local, align 4
  %v2_de74 = icmp eq i32 %v0_de74, 0
  store i1 %v2_de74, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_de78, i32* %ip.global-to-local, align 4
  %v1_de7c = add i32 %v0_de7c, 1
  store i32 %v1_de7c, i32* %r1.global-to-local, align 4
  %v1_de80 = add nsw i32 %v3_de70, -48
  store i32 %v1_de80, i32* %r0.global-to-local, align 4
  br i1 %v2_de74, label %dec_label_pc_de88, label %dec_label_pc_de98

dec_label_pc_de88:                                ; preds = %dec_label_pc_de70
  %v7_de88 = icmp eq i8 %v2_de70, 9
  store i1 %v7_de88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_de88, label %dec_label_pc_de5c, label %bb

bb:                                               ; preds = %dec_label_pc_de88
  %v8_de8c = icmp eq i8 %v2_de70, 32
  store i1 %v8_de8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_de8c, label %dec_label_pc_de5c, label %dec_label_pc_de94

dec_label_pc_de94:                                ; preds = %bb
  %v1_de94 = add i32 %v0_de94, 1
  store i32 %v1_de94, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_de98

dec_label_pc_de98:                                ; preds = %dec_label_pc_de70, %dec_label_pc_de94
  %v0_de9443 = phi i32 [ %v0_de94, %dec_label_pc_de70 ], [ %v1_de94, %dec_label_pc_de94 ]
  %v0_de7439 = phi i32 [ %v0_de74, %dec_label_pc_de70 ], [ %v1_de94, %dec_label_pc_de94 ]
  %v7_de98 = icmp eq i8 %v2_de70, 46
  store i1 %v7_de98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_de98, label %dec_label_pc_de54, label %bb138

bb138:                                            ; preds = %dec_label_pc_de98
  %v8_de9c = icmp eq i32 %v1_de80, 9
  store i1 %v8_de9c, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_de80, 10
  br i1 %tmp, label %dec_label_pc_de54, label %dec_label_pc_dea4

dec_label_pc_dea4:                                ; preds = %dec_label_pc_de54, %bb138
  %v0_de60.lcssa = phi i32 [ %v1_de78, %dec_label_pc_de54 ], [ %v0_de60, %bb138 ]
  %v2_dea8 = sub i32 %v0_de60.lcssa, %v0_de20
  store i32 %v2_dea8, i32* %r2.global-to-local, align 4
  store i32 %v2_de40, i32* %r1.global-to-local, align 4
  store i32 %v2_de48, i32* %r0.global-to-local, align 4
  %v3_deb4 = call i32 @function_12b4c(i32 %v2_de48, i32 %v2_de40, i32 %v2_dea8)
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_de48, i32* @r0, align 4
  %v2_dec4 = load i32, i32* @r7, align 4
  %v3_dec4 = inttoptr i32 %v2_dec4 to i8*
  store i8 0, i8* %v3_dec4, align 1
  %v1_dec8 = call i32 @function_13b70(i32 %v2_de48)
  store i32 %v1_dec8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ded0

dec_label_pc_ded020:                              ; preds = %dec_label_pc_e390
  unreachable

dec_label_pc_ded0:                                ; preds = %dec_label_pc_e408, %dec_label_pc_e3f8, %dec_label_pc_e3ec, %dec_label_pc_e3d8, %dec_label_pc_dea4
  %v29_e3d474 = phi i32 [ %v1_e394, %dec_label_pc_e408 ], [ %v1_e394, %dec_label_pc_e3f8 ], [ %v1_e394, %dec_label_pc_e3ec ], [ %v1_e394, %dec_label_pc_e3d8 ], [ %v1_dec8, %dec_label_pc_dea4 ]
  %stack_var_-2176.0 = phi i32 [ 33686020, %dec_label_pc_e408 ], [ 104859200, %dec_label_pc_e3f8 ], [ 707416650, %dec_label_pc_e3ec ], [ 134744072, %dec_label_pc_e3d8 ], [ %v1_dec8, %dec_label_pc_dea4 ]
  store i32 %v6_dd94, i32* %ip.global-to-local, align 4
  %v2_ded4 = icmp eq i32 %v6_dd94, 0
  store i1 %v2_ded4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ded4, label %dec_label_pc_e3cc, label %dec_label_pc_dedc

dec_label_pc_dedc:                                ; preds = %dec_label_pc_ded0
  store i32 %v6_dd94, i32* %r0.global-to-local, align 4
  %v1_dee0 = inttoptr i32 %v6_dd94 to i8*
  %v2_dee0 = call i32 @function_12ad0(i8* %v1_dee0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_def4 = call i32 @function_13d90(i32 2, i32 3, i32 17)
  store i32 %v3_def4, i32* %r0.global-to-local, align 4
  %v7_def8 = icmp eq i32 %v3_def4, -1
  store i1 %v7_def8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_def8, label %dec_label_pc_e3cc, label %dec_label_pc_df04

dec_label_pc_df04:                                ; preds = %dec_label_pc_dedc
  store i32 1, i32* %stack_var_-40, align 4
  %v6_df10 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_df10, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_df24 = call i32 @function_13d60(i32 %v3_def4, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_df24, i32* %r0.global-to-local, align 4
  %v7_df28 = icmp eq i32 %v6_df24, -1
  store i1 %v7_df28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_df28, label %dec_label_pc_e3c4, label %dec_label_pc_df30

dec_label_pc_df30:                                ; preds = %dec_label_pc_df04
  store i32 %v1_dc80, i32* %r0.global-to-local, align 4
  %v3_df38 = mul i32 %v7_dcd4, 65536
  store i32 %v3_df38, i32* %lr.global-to-local, align 4
  %v0_df3c = load i32, i32* @sl, align 4
  %v3_df3c = mul i32 %v0_df3c, 65536
  store i32 %v3_df3c, i32* %sl.global-to-local, align 4
  %v0_df40 = load i32, i32* %r8.global-to-local, align 4
  %v0_df44 = load i32, i32* %fp.global-to-local, align 4
  %v0_df48 = load i32, i32* %sb.global-to-local, align 4
  %v3_df48 = mul i32 %v0_df48, 65536
  store i32 %v3_df48, i32* %sb.global-to-local, align 4
  %v5_df4c = trunc i32 %v0_df40 to i8
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_df54 = urem i32 %v7_dcd4, 65536
  store i32 %v3_df54, i32* %r2.global-to-local, align 4
  %v3_df58 = urem i32 %v0_df44, 65536
  store i32 %v3_df58, i32* %r3.global-to-local, align 4
  %v3_df5c = urem i32 %v0_df48, 65536
  store i32 %v3_df5c, i32* %r4.global-to-local, align 4
  %v3_df60 = urem i32 %v0_df3c, 65536
  store i32 %v3_df60, i32* %r8.global-to-local, align 4
  %v2_df64 = icmp eq i32 %v1_dc80, 0
  store i1 %v2_df64, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_df64, label %dec_label_pc_e3b4, label %dec_label_pc_df88

dec_label_pc_df88:                                ; preds = %dec_label_pc_df30
  %v4_df8c = sext i8 %v5_df4c to i32
  %v2_df90 = add i32 %v4_df8c, %v2_dee0
  store i32 %v2_df90, i32* @fp, align 4
  %v3_df94 = mul i32 %v2_df90, 65536
  %v1_df98 = add i32 %v3_df94, 1769472
  store i32 %v1_df98, i32* @r6, align 4
  %v1_df9c = add i32 %v3_df94, 3080192
  %v1_dfb0 = urem i32 %v0_df3c, 256
  %v3_dfc0 = udiv i32 %v1_df98, 256
  %v1_dfc4 = urem i32 %v7_dcd4, 256
  %v1_dfc8 = and i32 %v3_dfc0, 65280
  %v1_dfcc = urem i32 %v0_df48, 256
  %v3_dfd0 = mul nuw nsw i32 %v1_dfb0, 256
  %v1_dfd8 = urem i32 %v0_df44, 256
  %v3_dfdc = mul nuw nsw i32 %v1_dfcc, 256
  %tmp139 = udiv i32 %v0_df3c, 256
  %v4_dfe0 = urem i32 %tmp139, 256
  %v5_dfe0 = or i32 %v4_dfe0, %v3_dfd0
  store i32 %v5_dfe0, i32* %r8.global-to-local, align 4
  %v4_dfe4 = udiv i32 %v1_df98, 16777216
  %v5_dfe4 = or i32 %v1_dfc8, %v4_dfe4
  store i32 %v5_dfe4, i32* %sl.global-to-local, align 4
  %tmp140 = udiv i32 %v0_df44, 256
  %v3_dff0 = urem i32 %tmp140, 256
  %v4_dff4 = sdiv i32 %v1_df9c, 16777216
  %tmp141 = udiv i32 %v7_dcd4, 256
  %v4_dffc = mul nuw nsw i32 %v1_dfd8, 256
  %v5_dffc = or i32 %v4_dffc, %v3_dff0
  store i32 %v5_dffc, i32* @r5, align 4
  %tmp142 = udiv i32 %v0_df48, 256
  %v4_e000 = urem i32 %tmp142, 256
  %v5_e000 = or i32 %v4_e000, %v3_dfdc
  store i32 %v5_e000, i32* %sb.global-to-local, align 4
  store i32 %v1_dfc4, i32* %r0.global-to-local, align 4
  %v1_e00c = add i32 %v2_dee0, 1
  store i32 %v1_e00c, i32* @r7, align 4
  %v3_e010 = ashr i32 %v1_df9c, 31
  store i32 %v3_e010, i32* @lr, align 4
  store i32 %v1_dfd8, i32* %r1.global-to-local, align 4
  store i32 %v1_dfcc, i32* %r2.global-to-local, align 4
  %v3_e01c75 = udiv i32 %v1_dfc8, 256
  store i32 %v3_e01c75, i32* %r3.global-to-local, align 4
  store i32 %v1_dfb0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_e080 = sext i8 %v5_dcd0 to i32
  %sext13 = mul i32 %v6_dcec, 16777216
  %v4_e098 = sdiv i32 %sext13, 16777216
  %sext14 = mul i32 %tmp141, 16777216
  %v4_e0ac = sdiv i32 %sext14, 16777216
  %sext15 = mul i32 %v7_dcd4, 16777216
  %v4_e0b0 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v1_df98, 256
  %v4_e0e0 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v0_df48, 16777216
  %v4_e0e4 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_df44, 16777216
  %v4_e108 = sdiv i32 %sext18, 16777216
  %sext19 = mul i32 %v0_df3c, 16777216
  %v4_e114 = sdiv i32 %sext19, 16777216
  %v1_e090 = trunc i32 %v4_dff4 to i8
  %extract.t = trunc i32 %v3_e010 to i8
  br label %dec_label_pc_e040

dec_label_pc_e040:                                ; preds = %dec_label_pc_e1a8, %dec_label_pc_df88
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_e048 = call i32 @function_14094(i32 600, i32 1)
  store i32 %v2_e048, i32* %r0.global-to-local, align 4
  store i32 %v2_dc98, i32* %lr.global-to-local, align 4
  %v3_e050 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e050, i32* %r3.global-to-local, align 4
  %v2_e054 = load i32, i32* @r4, align 4
  %v5_e054 = mul i32 %v2_e054, 4
  %v6_e054 = add i32 %v5_e054, %v2_dc98
  %v7_e054 = inttoptr i32 %v6_e054 to i32*
  store i32 %v2_e048, i32* %v7_e054, align 4
  %v0_e058 = load i32, i32* %lr.global-to-local, align 4
  %v1_e058 = load i32, i32* %r3.global-to-local, align 4
  %v4_e058 = mul i32 %v1_e058, 4
  %v5_e058 = add i32 %v4_e058, %v0_e058
  %v6_e058 = inttoptr i32 %v5_e058 to i32*
  %v7_e058 = load i32, i32* %v6_e058, align 4
  store i32 %v7_e058, i32* %r1.global-to-local, align 4
  %v1_e05c = inttoptr i32 %v7_e058 to i8*
  %v2_e05c = load i8, i8* %v1_e05c, align 1
  %tmp154 = urem i8 %v2_e05c, 16
  %v1_e060 = zext i8 %tmp154 to i32
  %v1_e064 = or i32 %v1_e060, 64
  store i32 %v1_e064, i32* %r2.global-to-local, align 4
  %v1_e068 = trunc i32 %v1_e064 to i8
  store i8 %v1_e068, i8* %v1_e05c, align 1
  %v0_e06c = load i32, i32* %r1.global-to-local, align 4
  %v1_e06c = inttoptr i32 %v0_e06c to i8*
  %v2_e06c = load i8, i8* %v1_e06c, align 1
  %v1_e070 = and i8 %v2_e06c, -16
  %v1_e074 = or i8 %v1_e070, 5
  store i32 %v1_dd18, i32* %r0.global-to-local, align 4
  store i8 %v1_e074, i8* %v1_e06c, align 1
  store i32 %v4_e080, i32* %r2.global-to-local, align 4
  %v2_e084 = load i32, i32* %r1.global-to-local, align 4
  %v3_e084 = add i32 %v2_e084, 1
  %v4_e084 = inttoptr i32 %v3_e084 to i8*
  store i8 %v5_dcd0, i8* %v4_e084, align 1
  store i32 %v4_dff4, i32* %r3.global-to-local, align 4
  %v0_e08c = load i32, i32* %r0.global-to-local, align 4
  %v2_e08c = icmp eq i32 %v0_e08c, 0
  store i1 %v2_e08c, i1* %cpsr_z.global-to-local, align 1
  %v2_e090 = load i32, i32* %r1.global-to-local, align 4
  %v3_e090 = add i32 %v2_e090, 2
  %v4_e090 = inttoptr i32 %v3_e090 to i8*
  store i8 %v1_e090, i8* %v4_e090, align 1
  store i32 %v3_e010, i32* %r4.global-to-local, align 4
  store i32 %v4_e098, i32* %r0.global-to-local, align 4
  %v0_e09c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e09c, label %.thread21, label %bb143

bb143:                                            ; preds = %dec_label_pc_e040
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_e0a0 = load i32, i32* %r1.global-to-local, align 4
  %v4_e0a0 = add i32 %v3_e0a0, 6
  %v5_e0a0 = inttoptr i32 %v4_e0a0 to i8*
  store i8 64, i8* %v5_e0a0, align 1
  %v0_e0a8.pre = load i32, i32* %r4.global-to-local, align 4
  %extract.t76 = trunc i32 %v0_e0a8.pre to i8
  br label %.thread21

.thread21:                                        ; preds = %dec_label_pc_e040, %bb143
  %v0_e0a8.off0 = phi i8 [ %extract.t, %dec_label_pc_e040 ], [ %extract.t76, %bb143 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_e0a8 = load i32, i32* %r1.global-to-local, align 4
  %v3_e0a8 = add i32 %v2_e0a8, 3
  %v4_e0a8 = inttoptr i32 %v3_e0a8 to i8*
  store i8 %v0_e0a8.off0, i8* %v4_e0a8, align 1
  store i32 %v4_e0ac, i32* %ip.global-to-local, align 4
  store i32 %v4_e0b0, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1eadc.85 to i32), i32* %r4.global-to-local, align 4
  %v0_e0b8 = load i32, i32* %r0.global-to-local, align 4
  %v1_e0b8 = trunc i32 %v0_e0b8 to i8
  %v2_e0b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_e0b8 = add i32 %v2_e0b8, 8
  %v4_e0b8 = inttoptr i32 %v3_e0b8 to i8*
  store i8 %v1_e0b8, i8* %v4_e0b8, align 1
  %v0_e0bc = load i32, i32* %r3.global-to-local, align 4
  %v1_e0bc = trunc i32 %v0_e0bc to i8
  %v2_e0bc = load i32, i32* %r1.global-to-local, align 4
  %v3_e0bc = add i32 %v2_e0bc, 9
  %v4_e0bc = inttoptr i32 %v3_e0bc to i8*
  store i8 %v1_e0bc, i8* %v4_e0bc, align 1
  %v0_e0c0 = load i32, i32* %lr.global-to-local, align 4
  %v1_e0c0 = trunc i32 %v0_e0c0 to i8
  %v2_e0c0 = load i32, i32* %r1.global-to-local, align 4
  %v3_e0c0 = add i32 %v2_e0c0, 5
  %v4_e0c0 = inttoptr i32 %v3_e0c0 to i8*
  store i8 %v1_e0c0, i8* %v4_e0c0, align 1
  %v0_e0c4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e0c4, label %.thread22, label %bb144

.thread22:                                        ; preds = %.thread21
  %v2_e0c823 = load i32, i32* @global_var_1eadc.85, align 4
  store i32 %v2_e0c823, i32* %r3.global-to-local, align 4
  store i32 %v4_df8c, i32* %lr.global-to-local, align 4
  br label %bb145

bb144:                                            ; preds = %.thread21
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_e0c8 = load i32, i32* @global_var_1eadc.85, align 4
  store i32 %v2_e0c8, i32* %r3.global-to-local, align 4
  store i32 %v4_df8c, i32* %lr.global-to-local, align 4
  %v3_e0d0 = load i32, i32* %r1.global-to-local, align 4
  %v4_e0d0 = add i32 %v3_e0d0, 7
  %v5_e0d0 = inttoptr i32 %v4_e0d0 to i8*
  store i8 0, i8* %v5_e0d0, align 1
  %v0_e0d8.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_e0dc.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb145

bb145:                                            ; preds = %.thread22, %bb144
  %v0_e0dc = phi i32 [ %v2_e0c823, %.thread22 ], [ %v0_e0dc.pre, %bb144 ]
  %v0_e0d8 = phi i32 [ %v4_df8c, %.thread22 ], [ %v0_e0d8.pre, %bb144 ]
  %v0_e0d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_e0d4 = add i32 %v0_e0d8, 41
  %v2_e0d8 = add i32 %v1_e0d4, %v0_e0d4
  store i32 %v2_e0d8, i32* %r4.global-to-local, align 4
  %v2_e0dc = add i32 %v0_e0d4, 12
  %v3_e0dc = inttoptr i32 %v2_e0dc to i32*
  store i32 %v0_e0dc, i32* %v3_e0dc, align 4
  store i32 %v4_e0e0, i32* %r2.global-to-local, align 4
  store i32 %v4_e0e4, i32* %r3.global-to-local, align 4
  %v0_e0e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_e0e8 = add i32 %v0_e0e8, 20
  store i32 %v1_e0e8, i32* %r0.global-to-local, align 4
  %v0_e0ec = load i32, i32* %ip.global-to-local, align 4
  %v1_e0ec = trunc i32 %v0_e0ec to i8
  %v3_e0ec = add i32 %v0_e0e8, 4
  %v4_e0ec = inttoptr i32 %v3_e0ec to i8*
  store i8 %v1_e0ec, i8* %v4_e0ec, align 1
  %v0_e0f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_e0f0 = trunc i32 %v0_e0f0 to i8
  %v2_e0f0 = load i32, i32* %r0.global-to-local, align 4
  %v3_e0f0 = add i32 %v2_e0f0, 5
  %v4_e0f0 = inttoptr i32 %v3_e0f0 to i8*
  store i8 %v1_e0f0, i8* %v4_e0f0, align 1
  %v0_e0f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_e0f4 = trunc i32 %v0_e0f4 to i8
  %v2_e0f4 = load i32, i32* %r0.global-to-local, align 4
  %v3_e0f4 = add i32 %v2_e0f4, 3
  %v4_e0f4 = inttoptr i32 %v3_e0f4 to i8*
  store i8 %v1_e0f4, i8* %v4_e0f4, align 1
  %v0_e0f8 = load i32, i32* %sb.global-to-local, align 4
  %v1_e0f8 = trunc i32 %v0_e0f8 to i8
  %v2_e0f8 = load i32, i32* %r0.global-to-local, align 4
  %v3_e0f8 = add i32 %v2_e0f8, 2
  %v4_e0f8 = inttoptr i32 %v3_e0f8 to i8*
  store i8 %v1_e0f8, i8* %v4_e0f8, align 1
  %v0_e0fc = load i32, i32* %sl.global-to-local, align 4
  %v1_e0fc = trunc i32 %v0_e0fc to i8
  %v2_e0fc = load i32, i32* %r0.global-to-local, align 4
  %v3_e0fc = add i32 %v2_e0fc, 4
  %v4_e0fc = inttoptr i32 %v3_e0fc to i8*
  store i8 %v1_e0fc, i8* %v4_e0fc, align 1
  %v0_e100 = load i32, i32* @r5, align 4
  %v1_e100 = trunc i32 %v0_e100 to i8
  %v2_e100 = load i32, i32* %r1.global-to-local, align 4
  %v3_e100 = add i32 %v2_e100, 20
  %v4_e100 = inttoptr i32 %v3_e100 to i8*
  store i8 %v1_e100, i8* %v4_e100, align 1
  store i32 %v4_e108, i32* %r2.global-to-local, align 4
  %v1_e10c = load i32, i32* %r1.global-to-local, align 4
  %v2_e10c = add i32 %v1_e10c, 16
  %v3_e10c = inttoptr i32 %v2_e10c to i32*
  store i32 %stack_var_-2176.0, i32* %v3_e10c, align 4
  %v0_e110 = load i32, i32* %r2.global-to-local, align 4
  %v1_e110 = trunc i32 %v0_e110 to i8
  %v2_e110 = load i32, i32* %r0.global-to-local, align 4
  %v3_e110 = add i32 %v2_e110, 1
  %v4_e110 = inttoptr i32 %v3_e110 to i8*
  store i8 %v1_e110, i8* %v4_e110, align 1
  store i32 %v4_e114, i32* %lr.global-to-local, align 4
  store i32 %v4_df8c, i32* %r0.global-to-local, align 4
  %v0_e11c = load i32, i32* %r1.global-to-local, align 4
  %v1_e11c = add i32 %v0_e11c, 28
  store i32 %v1_e11c, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_e128 = load i32, i32* %r8.global-to-local, align 4
  %v1_e128 = trunc i32 %v0_e128 to i8
  %v4_e128 = inttoptr i32 %v1_e11c to i8*
  store i8 %v1_e128, i8* %v4_e128, align 1
  %v0_e12c = load i32, i32* %r3.global-to-local, align 4
  %v1_e12c = trunc i32 %v0_e12c to i8
  %v2_e12c = load i32, i32* %ip.global-to-local, align 4
  %v3_e12c = add i32 %v2_e12c, 5
  %v4_e12c = inttoptr i32 %v3_e12c to i8*
  store i8 %v1_e12c, i8* %v4_e12c, align 1
  %v0_e130 = load i32, i32* %lr.global-to-local, align 4
  %v1_e130 = trunc i32 %v0_e130 to i8
  %v2_e130 = load i32, i32* %ip.global-to-local, align 4
  %v3_e130 = add i32 %v2_e130, 1
  %v4_e130 = inttoptr i32 %v3_e130 to i8*
  store i8 %v1_e130, i8* %v4_e130, align 1
  %v0_e134 = load i32, i32* %r3.global-to-local, align 4
  %v1_e134 = trunc i32 %v0_e134 to i8
  %v2_e134 = load i32, i32* %ip.global-to-local, align 4
  %v3_e134 = add i32 %v2_e134, 2
  %v4_e134 = inttoptr i32 %v3_e134 to i8*
  store i8 %v1_e134, i8* %v4_e134, align 1
  %v0_e138 = load i32, i32* @r6, align 4
  %v1_e138 = trunc i32 %v0_e138 to i8
  %v2_e138 = load i32, i32* %ip.global-to-local, align 4
  %v3_e138 = add i32 %v2_e138, 3
  %v4_e138 = inttoptr i32 %v3_e138 to i8*
  store i8 %v1_e138, i8* %v4_e138, align 1
  %v0_e13c = load i32, i32* @r6, align 4
  %v1_e13c = trunc i32 %v0_e13c to i8
  %v2_e13c = load i32, i32* %ip.global-to-local, align 4
  %v3_e13c = add i32 %v2_e13c, 4
  %v4_e13c = inttoptr i32 %v3_e13c to i8*
  store i8 %v1_e13c, i8* %v4_e13c, align 1
  %v0_e140 = load i32, i32* %r0.global-to-local, align 4
  %v1_e140 = trunc i32 %v0_e140 to i8
  %v2_e140 = load i32, i32* %r1.global-to-local, align 4
  %v3_e140 = add i32 %v2_e140, 40
  %v4_e140 = inttoptr i32 %v3_e140 to i8*
  store i8 %v1_e140, i8* %v4_e140, align 1
  store i32 %v6_dd94, i32* %r1.global-to-local, align 4
  %v0_e148 = load i32, i32* @r7, align 4
  store i32 %v0_e148, i32* %r2.global-to-local, align 4
  %v0_e14c = load i32, i32* %r4.global-to-local, align 4
  %v1_e14c = add i32 %v0_e14c, 1
  store i32 %v1_e14c, i32* %r0.global-to-local, align 4
  %v3_e150 = call i32 @function_12b4c(i32 %v1_e14c, i32 %v6_dd94, i32 %v0_e148)
  store i32 %v3_e150, i32* %r0.global-to-local, align 4
  store i32 %v2_dee0, i32* %r1.global-to-local, align 4
  %v1_e158 = load i32, i32* @r6, align 4
  %v9_e158 = icmp eq i32 %v2_dee0, %v1_e158
  store i1 %v9_e158, i1* %cpsr_z.global-to-local, align 1
  %v7_e15c = icmp sgt i32 %v2_dee0, %v1_e158
  store i32 %v1_e158, i32* %lr.global-to-local, align 4
  %v0_e16c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e16c, i32* %r2.global-to-local, align 4
  %extract.t78 = trunc i32 %v1_e158 to i8
  br i1 %v7_e15c, label %dec_label_pc_e168, label %dec_label_pc_e1a8

dec_label_pc_e168:                                ; preds = %bb145
  store i32 %v1_e158, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e174

dec_label_pc_e174:                                ; preds = %bb148, %dec_label_pc_e168
  %v0_e19085151 = phi i32 [ %v0_e19085152, %bb148 ], [ %v1_e158, %dec_label_pc_e168 ]
  %v1_e18433 = phi i32 [ %v1_e19491, %bb148 ], [ %v1_e158, %dec_label_pc_e168 ]
  %v1_e180.off0 = phi i8 [ %v1_e18056.off0, %bb148 ], [ %extract.t78, %dec_label_pc_e168 ]
  %v0_e18432 = phi i32 [ %v0_e184325488, %bb148 ], [ %v0_e16c, %dec_label_pc_e168 ]
  store i32 %v6_dd94, i32* %ip.global-to-local, align 4
  %v2_e178 = add i32 %v1_e18433, %v6_dd94
  %v3_e178 = inttoptr i32 %v2_e178 to i8*
  %v4_e178 = load i8, i8* %v3_e178, align 1
  %v6_e178 = zext i8 %v4_e178 to i32
  store i32 %v6_e178, i32* %r3.global-to-local, align 4
  %v7_e17c = icmp eq i8 %v4_e178, 46
  store i1 %v7_e17c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e17c, label %bb146, label %.thread31

.thread31:                                        ; preds = %dec_label_pc_e174
  %v2_e18434 = add i32 %v1_e18433, %v0_e18432
  store i32 %v2_e18434, i32* %r0.global-to-local, align 4
  br label %.thread35

bb146:                                            ; preds = %dec_label_pc_e174
  %v3_e180 = load i32, i32* %r2.global-to-local, align 4
  %v4_e180 = inttoptr i32 %v3_e180 to i8*
  store i8 %v1_e180.off0, i8* %v4_e180, align 1
  %v0_e188.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_e184 = load i32, i32* %r4.global-to-local, align 4
  %v1_e184 = load i32, i32* %r1.global-to-local, align 4
  %v2_e184 = add i32 %v1_e184, %v0_e184
  store i32 %v2_e184, i32* %r0.global-to-local, align 4
  br i1 %v0_e188.pr, label %bb147, label %bb146..thread35_crit_edge

bb146..thread35_crit_edge:                        ; preds = %bb146
  %v0_e19085.pre = load i32, i32* %lr.global-to-local, align 4
  br label %.thread35

bb147:                                            ; preds = %bb146
  %v2_e188 = add i32 %v2_e184, 1
  store i32 %v2_e188, i32* %r2.global-to-local, align 4
  store i32 %v2_dee0, i32* %r0.global-to-local, align 4
  %v0_e190 = load i32, i32* %lr.global-to-local, align 4
  %v1_e190 = add i32 %v0_e190, 1
  store i32 %v1_e190, i32* %ip.global-to-local, align 4
  %v1_e194 = add i32 %v1_e184, 1
  store i32 %v1_e194, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %bb148

.thread35:                                        ; preds = %bb146..thread35_crit_edge, %.thread31
  %v0_e19085 = phi i32 [ %v0_e19085.pre, %bb146..thread35_crit_edge ], [ %v0_e19085151, %.thread31 ]
  %v0_e194.ph = phi i32 [ %v1_e184, %bb146..thread35_crit_edge ], [ %v1_e18433, %.thread31 ]
  %v0_e1843254.ph = phi i32 [ %v0_e184, %bb146..thread35_crit_edge ], [ %v0_e18432, %.thread31 ]
  store i32 %v2_dee0, i32* %r0.global-to-local, align 4
  %v1_e19086 = add i32 %v0_e19085, 1
  store i32 %v1_e19086, i32* %ip.global-to-local, align 4
  %v1_e19487 = add i32 %v0_e194.ph, 1
  store i32 %v1_e19487, i32* %r1.global-to-local, align 4
  %v2_e19c = urem i32 %v1_e19086, 256
  store i32 %v2_e19c, i32* %lr.global-to-local, align 4
  %extract.t81 = trunc i32 %v1_e19086 to i8
  br label %bb148

bb148:                                            ; preds = %bb147, %.thread35
  %v0_e19085152 = phi i32 [ 0, %bb147 ], [ %v2_e19c, %.thread35 ]
  %v1_e19491 = phi i32 [ %v1_e194, %bb147 ], [ %v1_e19487, %.thread35 ]
  %v0_e184325488 = phi i32 [ %v0_e184, %bb147 ], [ %v0_e1843254.ph, %.thread35 ]
  %v1_e18056.off0 = phi i8 [ 0, %bb147 ], [ %extract.t81, %.thread35 ]
  %v9_e1a0 = icmp eq i32 %v2_dee0, %v1_e19491
  store i1 %v9_e1a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e1a0, label %dec_label_pc_e1a8.loopexit, label %dec_label_pc_e174

dec_label_pc_e1a8.loopexit:                       ; preds = %bb148
  %v2_e1a8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e1a8

dec_label_pc_e1a8:                                ; preds = %dec_label_pc_e1a8.loopexit, %bb145
  %v2_e1a8 = phi i32 [ %v2_e1a8.pre, %dec_label_pc_e1a8.loopexit ], [ %v0_e16c, %bb145 ]
  %v0_e1a8.off0 = phi i8 [ %v1_e18056.off0, %dec_label_pc_e1a8.loopexit ], [ %extract.t78, %bb145 ]
  %v3_e1a8 = inttoptr i32 %v2_e1a8 to i8*
  store i8 %v0_e1a8.off0, i8* %v3_e1a8, align 1
  %v3_e1ac = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_dee0, i32* %r1.global-to-local, align 4
  %v0_e1b4 = load i32, i32* %r4.global-to-local, align 4
  %v2_e1b4 = add i32 %v0_e1b4, %v2_dee0
  store i32 %v2_e1b4, i32* %r3.global-to-local, align 4
  %v1_e1b8 = add i32 %v3_e1ac, 1
  store i32 %v1_e1b8, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* @lr, align 4
  %v9_e1c8 = icmp eq i32 %v1_dc80, %v1_e1b8
  store i1 %v9_e1c8, i1* %cpsr_z.global-to-local, align 1
  %v1_e1cc = add i32 %v2_e1b4, 2
  store i32 %v1_e1cc, i32* %r2.global-to-local, align 4
  %v4_e1d0 = inttoptr i32 %v1_e1cc to i8*
  store i8 0, i8* %v4_e1d0, align 1
  %v0_e1d4 = load i32, i32* @lr, align 4
  %v1_e1d4 = trunc i32 %v0_e1d4 to i8
  %v2_e1d4 = load i32, i32* %r2.global-to-local, align 4
  %v3_e1d4 = add i32 %v2_e1d4, 3
  %v4_e1d4 = inttoptr i32 %v3_e1d4 to i8*
  store i8 %v1_e1d4, i8* %v4_e1d4, align 1
  %v0_e1d8 = load i32, i32* @lr, align 4
  %v1_e1d8 = trunc i32 %v0_e1d8 to i8
  %v2_e1d8 = load i32, i32* %r2.global-to-local, align 4
  %v3_e1d8 = add i32 %v2_e1d8, 1
  %v4_e1d8 = inttoptr i32 %v3_e1d8 to i8*
  store i8 %v1_e1d8, i8* %v4_e1d8, align 1
  %v0_e1dc = load i32, i32* %ip.global-to-local, align 4
  %v1_e1dc = trunc i32 %v0_e1dc to i8
  %v2_e1dc = load i32, i32* %r2.global-to-local, align 4
  %v3_e1dc = add i32 %v2_e1dc, 2
  %v4_e1dc = inttoptr i32 %v3_e1dc to i8*
  store i8 %v1_e1dc, i8* %v4_e1dc, align 1
  %v0_e1e0 = load i32, i32* @r4, align 4
  store i32 %v0_e1e0, i32* %stack_var_-40, align 4
  %v8_e1e4 = icmp sgt i32 %v1_dc80, %v1_e1b8
  br i1 %v8_e1e4, label %dec_label_pc_e040, label %dec_label_pc_e1e8

dec_label_pc_e1e8:                                ; preds = %dec_label_pc_e1a8, %dec_label_pc_e3b4
  %v4_e258.pre-phi = phi i32 [ %v4_e3b8, %dec_label_pc_e3b4 ], [ %v4_df8c, %dec_label_pc_e1a8 ]
  store i32 %v1_dc80, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_df64, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e1f4

dec_label_pc_e1f4:                                ; preds = %dec_label_pc_e1f4, %dec_label_pc_e318, %dec_label_pc_e1e8
  br i1 %v2_df64, label %dec_label_pc_e1f4, label %dec_label_pc_e1f8

dec_label_pc_e1f8:                                ; preds = %dec_label_pc_e1f4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r6, align 4
  %v0_e208 = load i32, i32* @fp, align 4
  %v1_e208 = add i32 %v0_e208, 27
  store i32 %v1_e208, i32* @sb, align 4
  %v1_e20c = add i32 %v0_e208, 47
  store i32 %v1_e20c, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_e214

dec_label_pc_e214:                                ; preds = %dec_label_pc_e254.dec_label_pc_e214_crit_edge, %dec_label_pc_e1f8
  %v1_e234 = phi i32 [ %v1_e220.pre, %dec_label_pc_e254.dec_label_pc_e214_crit_edge ], [ 65535, %dec_label_pc_e1f8 ]
  %v1_e21c = phi i32 [ %v1_e304, %dec_label_pc_e254.dec_label_pc_e214_crit_edge ], [ 0, %dec_label_pc_e1f8 ]
  store i32 %v2_dc98, i32* %r3.global-to-local, align 4
  store i32 %v3_df54, i32* %r8.global-to-local, align 4
  %v4_e21c = mul i32 %v1_e21c, 4
  %v5_e21c = add i32 %v4_e21c, %v2_dc98
  %v6_e21c = inttoptr i32 %v5_e21c to i32*
  %v7_e21c = load i32, i32* %v6_e21c, align 4
  store i32 %v7_e21c, i32* @r4, align 4
  %v9_e220 = icmp eq i32 %v3_df54, %v1_e234
  store i1 %v9_e220, i1* %cpsr_z.global-to-local, align 1
  %v1_e224 = add i32 %v7_e21c, 20
  store i32 %v1_e224, i32* @r5, align 4
  %v1_e228 = add i32 %v7_e21c, 28
  store i32 %v1_e228, i32* @r8, align 4
  br i1 %v9_e220, label %dec_label_pc_e328, label %dec_label_pc_e230

dec_label_pc_e230:                                ; preds = %dec_label_pc_e214
  store i32 %v3_df58, i32* %ip.global-to-local, align 4
  %v9_e234 = icmp eq i32 %v3_df58, %v1_e234
  store i1 %v9_e234, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e234, label %dec_label_pc_e344, label %dec_label_pc_e23c

dec_label_pc_e23c:                                ; preds = %dec_label_pc_e328.dec_label_pc_e23c_crit_edge, %dec_label_pc_e230
  %v1_e240 = phi i32 [ %v1_e240.pre, %dec_label_pc_e328.dec_label_pc_e23c_crit_edge ], [ %v1_e234, %dec_label_pc_e230 ]
  store i32 %v3_df5c, i32* @lr, align 4
  %v9_e240 = icmp eq i32 %v3_df5c, %v1_e240
  store i1 %v9_e240, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e240, label %dec_label_pc_e360, label %dec_label_pc_e248

dec_label_pc_e248:                                ; preds = %dec_label_pc_e344.dec_label_pc_e248_crit_edge, %dec_label_pc_e23c
  %v1_e24c = phi i32 [ %v1_e24c.pre, %dec_label_pc_e344.dec_label_pc_e248_crit_edge ], [ %v1_e240, %dec_label_pc_e23c ]
  store i32 %v3_df60, i32* %r0.global-to-local, align 4
  %v9_e24c = icmp eq i32 %v3_df60, %v1_e24c
  store i1 %v9_e24c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e24c, label %dec_label_pc_e37c, label %dec_label_pc_e254

dec_label_pc_e254:                                ; preds = %dec_label_pc_e360, %dec_label_pc_e248, %dec_label_pc_e37c
  %v0_e254 = load i32, i32* @r4, align 4
  %v1_e254 = add i32 %v0_e254, 41
  store i32 %v1_e254, i32* %r0.global-to-local, align 4
  store i32 %v4_e258.pre-phi, i32* %r1.global-to-local, align 4
  %v2_e25c = call i32 @function_fcb0(i32 %v1_e254, i32 %v4_e258.pre-phi)
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_e264 = load i32, i32* @r7, align 4
  %v1_e264 = trunc i32 %v0_e264 to i8
  %v2_e264 = load i32, i32* @r4, align 4
  %v3_e264 = add i32 %v2_e264, 10
  %v4_e264 = inttoptr i32 %v3_e264 to i8*
  store i8 %v1_e264, i8* %v4_e264, align 1
  %v0_e268 = load i32, i32* @r7, align 4
  %v1_e268 = trunc i32 %v0_e268 to i8
  %v2_e268 = load i32, i32* @r4, align 4
  %v3_e268 = add i32 %v2_e268, 11
  %v4_e268 = inttoptr i32 %v3_e268 to i8*
  store i8 %v1_e268, i8* %v4_e268, align 1
  %v0_e26c = load i32, i32* @r4, align 4
  store i32 %v0_e26c, i32* @r0, align 4
  %v2_e270 = call i32 @function_e424(i32 %v0_e26c, i32 20)
  %v3_e270 = trunc i32 %v2_e270 to i8
  store i32 %v2_e270, i32* %r0.global-to-local, align 4
  %v4_e274 = sdiv i32 %v2_e270, 256
  store i32 %v4_e274, i32* %r3.global-to-local, align 4
  %v1_e278 = trunc i32 %v4_e274 to i8
  %v2_e278 = load i32, i32* @r4, align 4
  %v3_e278 = add i32 %v2_e278, 11
  %v4_e278 = inttoptr i32 %v3_e278 to i8*
  store i8 %v1_e278, i8* %v4_e278, align 1
  %v3_e27c = load i32, i32* @r4, align 4
  %v4_e27c = add i32 %v3_e27c, 10
  %v5_e27c = inttoptr i32 %v4_e27c to i8*
  store i8 %v3_e270, i8* %v5_e27c, align 1
  %v0_e280 = load i32, i32* @r7, align 4
  %v1_e280 = trunc i32 %v0_e280 to i8
  %v2_e280 = load i32, i32* @r5, align 4
  %v3_e280 = add i32 %v2_e280, 6
  %v4_e280 = inttoptr i32 %v3_e280 to i8*
  store i8 %v1_e280, i8* %v4_e280, align 1
  %v0_e284 = load i32, i32* @r7, align 4
  %v1_e284 = trunc i32 %v0_e284 to i8
  %v2_e284 = load i32, i32* @r5, align 4
  %v3_e284 = add i32 %v2_e284, 7
  %v4_e284 = inttoptr i32 %v3_e284 to i8*
  store i8 %v1_e284, i8* %v4_e284, align 1
  %v0_e288 = load i32, i32* @r4, align 4
  %v1_e288 = add i32 %v0_e288, 24
  %v2_e288 = inttoptr i32 %v1_e288 to i8*
  %v3_e288 = load i8, i8* %v2_e288, align 1
  %v4_e288 = zext i8 %v3_e288 to i32
  store i32 %v4_e288, i32* %r3.global-to-local, align 4
  %v1_e28c = add i32 %v0_e288, 25
  %v2_e28c = inttoptr i32 %v1_e28c to i8*
  %v3_e28c = load i8, i8* %v2_e28c, align 1
  %v4_e28c = zext i8 %v3_e28c to i32
  %v0_e290 = load i32, i32* @r5, align 4
  store i32 %v0_e290, i32* @r1, align 4
  %v4_e294 = mul nuw nsw i32 %v4_e28c, 256
  %v5_e294 = or i32 %v4_e294, %v4_e288
  store i32 %v5_e294, i32* %r2.global-to-local, align 4
  store i32 %v0_e288, i32* %r0.global-to-local, align 4
  %v0_e29c = load i32, i32* @sb, align 4
  store i32 %v0_e29c, i32* %r3.global-to-local, align 4
  %v4_e2a0 = call i32 @function_e480(i32 %v0_e288, i32 %v0_e290, i32 %v5_e294, i32 %v0_e29c)
  %v5_e2a0 = trunc i32 %v4_e2a0 to i8
  store i32 %v4_e2a0, i32* %r0.global-to-local, align 4
  %v3_e2a4 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-2176.0, i32* %r2.global-to-local, align 4
  %v5_e2b4 = mul i32 %v3_e2a4, 24
  %v2_e2b8 = add i32 %v5_e2b4, %arg2
  store i32 %v2_e2b8, i32* %lr.global-to-local, align 4
  %v4_e2bc = sdiv i32 %v4_e2a0, 256
  store i32 %v4_e2bc, i32* %r3.global-to-local, align 4
  %v3_e2c0 = load i32, i32* @r5, align 4
  %v4_e2c0 = add i32 %v3_e2c0, 6
  %v5_e2c0 = inttoptr i32 %v4_e2c0 to i8*
  store i8 %v5_e2a0, i8* %v5_e2c0, align 1
  %v0_e2c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_e2c4 = trunc i32 %v0_e2c4 to i8
  %v2_e2c4 = load i32, i32* @r5, align 4
  %v3_e2c4 = add i32 %v2_e2c4, 7
  %v4_e2c4 = inttoptr i32 %v3_e2c4 to i8*
  store i8 %v1_e2c4, i8* %v4_e2c4, align 1
  %v0_e2c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_e2c8 = load i32, i32* %lr.global-to-local, align 4
  %v2_e2c8 = add i32 %v1_e2c8, 4
  %v3_e2c8 = inttoptr i32 %v2_e2c8 to i32*
  store i32 %v0_e2c8, i32* %v3_e2c8, align 4
  %v0_e2cc = load i32, i32* @r4, align 4
  %v1_e2cc = add i32 %v0_e2cc, 20
  %v2_e2cc = inttoptr i32 %v1_e2cc to i32*
  %v3_e2cc = load i32, i32* %v2_e2cc, align 4
  %v3_e2d0 = udiv i32 %v3_e2cc, 65536
  store i32 %v3_e2d0, i32* %r3.global-to-local, align 4
  %v3_e2d412 = udiv i32 %v3_e2cc, 16777216
  %v1_e2d8 = trunc i32 %v3_e2d412 to i8
  %v2_e2d8 = load i32, i32* %lr.global-to-local, align 4
  %v3_e2d8 = add i32 %v2_e2d8, 3
  %v4_e2d8 = inttoptr i32 %v3_e2d8 to i8*
  store i8 %v1_e2d8, i8* %v4_e2d8, align 1
  %v0_e2dc = load i32, i32* %r3.global-to-local, align 4
  %v1_e2dc = trunc i32 %v0_e2dc to i8
  %v2_e2dc = load i32, i32* %lr.global-to-local, align 4
  %v3_e2dc = add i32 %v2_e2dc, 2
  %v4_e2dc = inttoptr i32 %v3_e2dc to i8*
  store i8 %v1_e2dc, i8* %v4_e2dc, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e2e8 = load i32, i32* @r4, align 4
  store i32 %v0_e2e8, i32* %r1.global-to-local, align 4
  store i32 %v3_def4, i32* %r0.global-to-local, align 4
  %v0_e2f0 = load i32, i32* @sl, align 4
  store i32 %v0_e2f0, i32* %r2.global-to-local, align 4
  %v0_e2f4 = load i32, i32* %lr.global-to-local, align 4
  %v6_e2fc = inttoptr i32 %v0_e2e8 to i32*
  %v7_e2fc = call i32 @function_13d2c(i32 %v3_def4, i32* %v6_e2fc, i32 %v0_e2f0, i32 16384, i32 %v0_e2f4, i32 16)
  %v3_e300 = load i32, i32* %stack_var_-40, align 4
  %v1_e304 = add i32 %v3_e300, 1
  store i32 %v1_e304, i32* %r0.global-to-local, align 4
  store i32 %v1_dc80, i32* %r3.global-to-local, align 4
  %v9_e30c = icmp eq i32 %v1_dc80, %v1_e304
  store i1 %v9_e30c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e304, i32* %stack_var_-40, align 4
  %v8_e314 = icmp sgt i32 %v1_dc80, %v1_e304
  br i1 %v8_e314, label %dec_label_pc_e254.dec_label_pc_e214_crit_edge, label %dec_label_pc_e318

dec_label_pc_e254.dec_label_pc_e214_crit_edge:    ; preds = %dec_label_pc_e254
  %v1_e220.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e214

dec_label_pc_e318:                                ; preds = %dec_label_pc_e254
  store i32 %v1_dc80, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e1f4

dec_label_pc_e328:                                ; preds = %dec_label_pc_e214
  %v0_e328 = call i32 @function_fbfc()
  %v1_e328 = trunc i32 %v0_e328 to i8
  store i32 %v0_e328, i32* %r0.global-to-local, align 4
  store i32 %v3_df58, i32* %ip.global-to-local, align 4
  %v4_e330 = sdiv i32 %v0_e328, 256
  store i32 %v4_e330, i32* %r3.global-to-local, align 4
  %v1_e334 = load i32, i32* @r6, align 4
  %v9_e334 = icmp eq i32 %v3_df58, %v1_e334
  store i1 %v9_e334, i1* %cpsr_z.global-to-local, align 1
  %v1_e338 = trunc i32 %v4_e330 to i8
  %v2_e338 = load i32, i32* @r4, align 4
  %v3_e338 = add i32 %v2_e338, 5
  %v4_e338 = inttoptr i32 %v3_e338 to i8*
  store i8 %v1_e338, i8* %v4_e338, align 1
  %v3_e33c = load i32, i32* @r4, align 4
  %v4_e33c = add i32 %v3_e33c, 4
  %v5_e33c = inttoptr i32 %v4_e33c to i8*
  store i8 %v1_e328, i8* %v5_e33c, align 1
  %v0_e340 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e340, label %dec_label_pc_e344, label %dec_label_pc_e328.dec_label_pc_e23c_crit_edge

dec_label_pc_e328.dec_label_pc_e23c_crit_edge:    ; preds = %dec_label_pc_e328
  %v1_e240.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e23c

dec_label_pc_e344:                                ; preds = %dec_label_pc_e328, %dec_label_pc_e230
  %v0_e344 = call i32 @function_fbfc()
  %v1_e344 = trunc i32 %v0_e344 to i8
  store i32 %v0_e344, i32* %r0.global-to-local, align 4
  store i32 %v3_df5c, i32* @lr, align 4
  %v4_e34c = sdiv i32 %v0_e344, 256
  store i32 %v4_e34c, i32* %r3.global-to-local, align 4
  %v1_e350 = load i32, i32* @r6, align 4
  %v9_e350 = icmp eq i32 %v3_df5c, %v1_e350
  store i1 %v9_e350, i1* %cpsr_z.global-to-local, align 1
  %v3_e354 = load i32, i32* @r4, align 4
  %v4_e354 = add i32 %v3_e354, 20
  %v5_e354 = inttoptr i32 %v4_e354 to i8*
  store i8 %v1_e344, i8* %v5_e354, align 1
  %v0_e358 = load i32, i32* %r3.global-to-local, align 4
  %v1_e358 = trunc i32 %v0_e358 to i8
  %v2_e358 = load i32, i32* @r5, align 4
  %v3_e358 = add i32 %v2_e358, 1
  %v4_e358 = inttoptr i32 %v3_e358 to i8*
  store i8 %v1_e358, i8* %v4_e358, align 1
  %v0_e35c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e35c, label %dec_label_pc_e360, label %dec_label_pc_e344.dec_label_pc_e248_crit_edge

dec_label_pc_e344.dec_label_pc_e248_crit_edge:    ; preds = %dec_label_pc_e344
  %v1_e24c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e248

dec_label_pc_e360:                                ; preds = %dec_label_pc_e344, %dec_label_pc_e23c
  %v0_e360 = call i32 @function_fbfc()
  %v1_e360 = trunc i32 %v0_e360 to i8
  %v4_e364 = sdiv i32 %v0_e360, 256
  store i32 %v4_e364, i32* %r3.global-to-local, align 4
  %v3_e368 = load i32, i32* @r5, align 4
  %v4_e368 = add i32 %v3_e368, 2
  %v5_e368 = inttoptr i32 %v4_e368 to i8*
  store i8 %v1_e360, i8* %v5_e368, align 1
  store i32 %v3_df60, i32* %r0.global-to-local, align 4
  %v1_e370 = load i32, i32* @r6, align 4
  %v9_e370 = icmp eq i32 %v3_df60, %v1_e370
  store i1 %v9_e370, i1* %cpsr_z.global-to-local, align 1
  %v0_e374 = load i32, i32* %r3.global-to-local, align 4
  %v1_e374 = trunc i32 %v0_e374 to i8
  %v2_e374 = load i32, i32* @r5, align 4
  %v3_e374 = add i32 %v2_e374, 3
  %v4_e374 = inttoptr i32 %v3_e374 to i8*
  store i8 %v1_e374, i8* %v4_e374, align 1
  %v0_e378 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e378, label %dec_label_pc_e37c, label %dec_label_pc_e254

dec_label_pc_e37c:                                ; preds = %dec_label_pc_e360, %dec_label_pc_e248
  %v0_e37c = call i32 @function_fbfc()
  %v1_e37c = trunc i32 %v0_e37c to i8
  store i32 %v0_e37c, i32* %r0.global-to-local, align 4
  %v4_e380 = sdiv i32 %v0_e37c, 256
  store i32 %v4_e380, i32* %r3.global-to-local, align 4
  %v3_e384 = load i32, i32* @r4, align 4
  %v4_e384 = add i32 %v3_e384, 28
  %v5_e384 = inttoptr i32 %v4_e384 to i8*
  store i8 %v1_e37c, i8* %v5_e384, align 1
  %v0_e388 = load i32, i32* %r3.global-to-local, align 4
  %v1_e388 = trunc i32 %v0_e388 to i8
  %v2_e388 = load i32, i32* @r8, align 4
  %v3_e388 = add i32 %v2_e388, 1
  %v4_e388 = inttoptr i32 %v3_e388 to i8*
  store i8 %v1_e388, i8* %v4_e388, align 1
  br label %dec_label_pc_e254

dec_label_pc_e390:                                ; preds = %dec_label_pc_de5c, %dec_label_pc_de28, %dec_label_pc_ddcc, %dec_label_pc_dc74
  %v0_e390 = call i32 @function_fbfc()
  %v1_e394 = urem i32 %v0_e390, 4
  store i32 %v1_e394, i32* %r0.global-to-local, align 4
  %v2_e398 = icmp eq i32 %v1_e394, 3
  store i1 %v2_e398, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_e390 to i2
  switch i2 %trunc, label %dec_label_pc_ded020 [
    i2 0, label %dec_label_pc_e3d8
    i2 1, label %dec_label_pc_e3ec
    i2 -2, label %dec_label_pc_e3f8
    i2 -1, label %dec_label_pc_e408
  ]

dec_label_pc_e3b4:                                ; preds = %dec_label_pc_df30
  store i32 %v2_dee0, i32* %r0.global-to-local, align 4
  %v4_e3b8 = sext i8 %v5_df4c to i32
  store i32 %v4_e3b8, i32* %r1.global-to-local, align 4
  %v2_e3bc = add i32 %v4_e3b8, %v2_dee0
  store i32 %v2_e3bc, i32* @fp, align 4
  br label %dec_label_pc_e1e8

dec_label_pc_e3c4:                                ; preds = %dec_label_pc_df04
  store i32 %v3_def4, i32* %r0.global-to-local, align 4
  %v1_e3c8 = call i32 @function_13490(i32 %v3_def4)
  store i32 %v1_e3c8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e3cc

dec_label_pc_e3cc:                                ; preds = %dec_label_pc_dedc, %dec_label_pc_ded0, %dec_label_pc_e3c4
  %v29_e3d4 = phi i32 [ %v3_def4, %dec_label_pc_dedc ], [ %v29_e3d474, %dec_label_pc_ded0 ], [ %v1_e3c8, %dec_label_pc_e3c4 ]
  store i32 %v3_dc74, i32* %r4.global-to-local, align 4
  store i32 %v15_dc74, i32* %r8.global-to-local, align 4
  store i32 %v18_dc74, i32* %sb.global-to-local, align 4
  store i32 %v21_dc74, i32* %sl.global-to-local, align 4
  store i32 %v24_dc74, i32* %fp.global-to-local, align 4
  ret i32 %v29_e3d4

dec_label_pc_e3d8:                                ; preds = %dec_label_pc_e390
  store i32 134744072, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ded0

dec_label_pc_e3ec:                                ; preds = %dec_label_pc_e390
  store i32 707416650, i32* @r4, align 4
  br label %dec_label_pc_ded0

dec_label_pc_e3f8:                                ; preds = %dec_label_pc_e390
  store i32 104859200, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ded0

dec_label_pc_e408:                                ; preds = %dec_label_pc_e390
  store i32 33686020, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ded0

; uselistorder directives
  uselistorder i32 %v4_e3b8, { 0, 2, 1 }
  uselistorder i32 %v1_e394, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_e390, { 1, 0 }
  uselistorder i32 %v0_e37c, { 0, 2, 1 }
  uselistorder i32 %v0_e344, { 0, 2, 1 }
  uselistorder i32 %v4_e330, { 1, 0 }
  uselistorder i32 %v0_e328, { 0, 2, 1 }
  uselistorder i32 %v1_e304, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_e2a0, { 0, 2, 1 }
  uselistorder i32 %v0_e288, { 1, 0, 2, 3 }
  uselistorder i32 %v4_e274, { 1, 0 }
  uselistorder i32 %v2_e270, { 0, 2, 1 }
  uselistorder i32 %v7_e21c, { 1, 0, 2 }
  uselistorder i32 %v4_e258.pre-phi, { 1, 0 }
  uselistorder i32 %v2_e19c, { 1, 0 }
  uselistorder i32 %v1_e19086, { 1, 0, 2 }
  uselistorder i32 %v1_e184, { 2, 1, 0 }
  uselistorder i32 %v0_e184, { 1, 2, 0 }
  uselistorder i32 %v0_e18432, { 1, 0 }
  uselistorder i32 %v1_e18433, { 2, 0, 1 }
  uselistorder i8 %extract.t78, { 1, 0 }
  uselistorder i32 %v1_e158, { 2, 0, 4, 1, 3, 5, 6 }
  uselistorder i32 %v0_e0d4, { 1, 0 }
  uselistorder i32 %v3_e010, { 1, 0, 2 }
  uselistorder i32 %v1_dfd8, { 1, 0 }
  uselistorder i32 %v1_dfcc, { 1, 0 }
  uselistorder i32 %v1_dfb0, { 1, 0 }
  uselistorder i32 %v1_df9c, { 1, 0 }
  uselistorder i32 %v3_df94, { 1, 0 }
  uselistorder i32 %v4_df8c, { 0, 4, 2, 5, 3, 1 }
  uselistorder i8 %v5_df4c, { 1, 0 }
  uselistorder i32 %v0_df48, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_df3c, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_df28, { 1, 0 }
  uselistorder i1 %v7_def8, { 1, 0 }
  uselistorder i32 %v3_def4, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_dee0, { 0, 11, 1, 6, 4, 3, 7, 10, 9, 8, 5, 2 }
  uselistorder i32 %stack_var_-2176.0, { 1, 0 }
  uselistorder i32 %v1_dec8, { 1, 0, 2 }
  uselistorder i1 %v7_de98, { 1, 0 }
  uselistorder i32 %v1_de94, { 1, 0, 2 }
  uselistorder i1 %v8_de8c, { 1, 0 }
  uselistorder i1 %v7_de88, { 1, 0 }
  uselistorder i32 %v1_de7c, { 1, 0 }
  uselistorder i8 %v2_de70, { 2, 0, 1, 3 }
  uselistorder i32 %v0_de74, { 1, 0 }
  uselistorder i32 %v0_de94, { 3, 0, 2, 1 }
  uselistorder i32 %v0_de60, { 0, 2, 1 }
  uselistorder i32 %v1_de78, { 0, 2, 1 }
  uselistorder i32 %v2_de48, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v2_de40, { 1, 0, 2, 3 }
  uselistorder i32 %v0_de28, { 1, 2, 0, 3, 4, 5 }
  uselistorder i1 %v7_de20, { 1, 0 }
  uselistorder i32 %v0_de20, { 2, 3, 1, 4, 6, 5, 0 }
  uselistorder i32 %v0_ddc4, { 1, 0, 3, 2 }
  uselistorder i32 %v6_dd94, { 0, 3, 5, 4, 2, 1, 7, 6 }
  uselistorder i32 %v1_dd18, { 1, 0 }
  uselistorder i32 %v7_dcd4, { 0, 1, 2, 4, 3 }
  uselistorder i8 %v5_dcd0, { 1, 0 }
  uselistorder i32 %v6_dcb0, { 1, 0 }
  uselistorder i32 %v2_dc98, { 0, 3, 1, 2 }
  uselistorder i32 %v1_dc80, { 7, 4, 5, 6, 3, 8, 9, 10, 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 9, 6, 7, 8 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 51, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 7, 6, 8, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 46, 45, 47, 49, 48, 51, 50, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 2, 3, 4, 7, 6, 8, 10, 9, 11, 13, 12, 14, 15, 16, 17, 1, 18, 19, 68, 33, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 34, 35, 36, 38, 40, 39, 41, 42, 43, 45, 44, 47, 46, 48, 49, 51, 50, 52, 54, 53, 56, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 1, 2, 4, 5, 6, 8, 7, 9, 10, 11, 12, 13, 21, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 29, 26, 33, 34, 35 }
  uselistorder i32 41, { 4, 5, 6, 0, 2, 7, 1, 8, 3, 9 }
  uselistorder i32 134744072, { 1, 0 }
  uselistorder i32 707416650, { 1, 0 }
  uselistorder i32 104859200, { 1, 0 }
  uselistorder i32 33686020, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_a4e8, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 90, 91 }
  uselistorder label %dec_label_pc_e3cc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e254, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e1f4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_e1e8, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %bb145, { 1, 0 }
  uselistorder label %.thread21, { 1, 0 }
  uselistorder label %dec_label_pc_dea4, { 1, 0 }
  uselistorder label %dec_label_pc_de98, { 1, 0 }
  uselistorder label %dec_label_pc_de5c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_de54, { 1, 0 }
}

define i32 @function_e424(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e424:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_e454, label %dec_label_pc_e430

dec_label_pc_e430:                                ; preds = %dec_label_pc_e424
  %v0_e434.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_e434

dec_label_pc_e434:                                ; preds = %dec_label_pc_e434, %dec_label_pc_e430
  %v0_e448 = phi i32 [ %v2_e448, %dec_label_pc_e434 ], [ 0, %dec_label_pc_e430 ]
  %v0_e43c = phi i32 [ %v1_e43c, %dec_label_pc_e434 ], [ %arg1, %dec_label_pc_e430 ]
  %v0_e44c = phi i32 [ %v1_e44c, %dec_label_pc_e434 ], [ %v0_e434.pre, %dec_label_pc_e430 ]
  %v1_e434 = inttoptr i32 %v0_e44c to i8*
  %v2_e434 = load i8, i8* %v1_e434, align 1
  %v3_e434 = zext i8 %v2_e434 to i32
  %v1_e438 = add i32 %v0_e44c, 1
  %v2_e438 = inttoptr i32 %v1_e438 to i8*
  %v3_e438 = load i8, i8* %v2_e438, align 1
  %v4_e438 = zext i8 %v3_e438 to i32
  %v1_e43c = add i32 %v0_e43c, -2
  %v4_e440 = mul nuw nsw i32 %v4_e438, 256
  %v5_e440 = or i32 %v4_e440, %v3_e434
  %v2_e448 = add i32 %v5_e440, %v0_e448
  %v1_e44c = add i32 %v0_e44c, 2
  store i32 %v1_e44c, i32* @r0, align 4
  %v1_e43c.cmp = icmp ugt i32 %v1_e43c, 1
  br i1 %v1_e43c.cmp, label %dec_label_pc_e434, label %dec_label_pc_e454

dec_label_pc_e454:                                ; preds = %dec_label_pc_e434, %dec_label_pc_e424
  %v1_e45c = phi i32 [ 0, %dec_label_pc_e424 ], [ %v2_e448, %dec_label_pc_e434 ]
  %v0_e454 = phi i32 [ %arg1, %dec_label_pc_e424 ], [ %v1_e43c, %dec_label_pc_e434 ]
  %v7_e454 = icmp eq i32 %v0_e454, 1
  br i1 %v7_e454, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_e454
  %v1_e458 = load i32, i32* @r0, align 4
  %v2_e458 = inttoptr i32 %v1_e458 to i8*
  %v3_e458 = load i8, i8* %v2_e458, align 1
  %v4_e458 = zext i8 %v3_e458 to i32
  %v3_e45c = add i32 %v1_e45c, %v4_e458
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e454, %bb
  %v0_e460 = phi i32 [ %v1_e45c, %dec_label_pc_e454 ], [ %v3_e45c, %bb ]
  %v3_e464 = urem i32 %v0_e460, 65536
  %v4_e468 = udiv i32 %v0_e460, 65536
  %v5_e468 = add nuw nsw i32 %v4_e468, %v3_e464
  %v4_e46c = udiv i32 %v5_e468, 65536
  %v5_e46c = add nuw nsw i32 %v4_e46c, %v5_e468
  %v1_e470 = urem i32 %v5_e46c, 65536
  %v3_e478 = xor i32 %v1_e470, 65535
  ret i32 %v3_e478

; uselistorder directives
  uselistorder i32 %v5_e468, { 1, 0 }
  uselistorder i32 %v1_e44c, { 1, 0 }
  uselistorder i32 %v1_e43c, { 1, 0, 2 }
  uselistorder i32 %v0_e44c, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_e480(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_e480:
  %v3_e490 = urem i32 %arg2, 65536
  %v1_e494 = add i32 %arg1, 12
  %v1_e498 = inttoptr i32 %v1_e494 to i32*
  %v2_e498 = load i32, i32* %v1_e498, align 4
  %v3_e498 = add i32 %arg1, 16
  %v4_e498 = inttoptr i32 %v3_e498 to i32*
  %v5_e498 = load i32, i32* %v4_e498, align 4
  %v7_e49c = icmp sgt i32 %arg3, 1
  br i1 %v7_e49c, label %dec_label_pc_e4a8.preheader, label %dec_label_pc_e4c8

dec_label_pc_e4a8.preheader:                      ; preds = %dec_label_pc_e480
  %v0_e4a8.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_e4a8

dec_label_pc_e4a8:                                ; preds = %dec_label_pc_e4a8.preheader, %dec_label_pc_e4a8
  %v0_e4bc = phi i32 [ 0, %dec_label_pc_e4a8.preheader ], [ %v2_e4bc, %dec_label_pc_e4a8 ]
  %v0_e4b0 = phi i32 [ %arg3, %dec_label_pc_e4a8.preheader ], [ %v1_e4b0, %dec_label_pc_e4a8 ]
  %v0_e4c0 = phi i32 [ %v0_e4a8.pre, %dec_label_pc_e4a8.preheader ], [ %v1_e4c0, %dec_label_pc_e4a8 ]
  %v1_e4a8 = inttoptr i32 %v0_e4c0 to i8*
  %v2_e4a8 = load i8, i8* %v1_e4a8, align 1
  %v3_e4a8 = zext i8 %v2_e4a8 to i32
  %v1_e4ac = add i32 %v0_e4c0, 1
  %v2_e4ac = inttoptr i32 %v1_e4ac to i8*
  %v3_e4ac = load i8, i8* %v2_e4ac, align 1
  %v4_e4ac = zext i8 %v3_e4ac to i32
  %v1_e4b0 = add nsw i32 %v0_e4b0, -2
  %v4_e4b4 = mul nuw nsw i32 %v4_e4ac, 256
  %v5_e4b4 = or i32 %v4_e4b4, %v3_e4a8
  %v2_e4bc = add i32 %v5_e4b4, %v0_e4bc
  %v1_e4c0 = add i32 %v0_e4c0, 2
  store i32 %v1_e4c0, i32* @r1, align 4
  %v8_e4c4 = icmp sgt i32 %v1_e4b0, 1
  br i1 %v8_e4c4, label %dec_label_pc_e4a8, label %dec_label_pc_e4c8

dec_label_pc_e4c8:                                ; preds = %dec_label_pc_e4a8, %dec_label_pc_e480
  %v1_e4d0 = phi i32 [ 0, %dec_label_pc_e480 ], [ %v2_e4bc, %dec_label_pc_e4a8 ]
  %v0_e4c8 = phi i32 [ %arg3, %dec_label_pc_e480 ], [ %v1_e4b0, %dec_label_pc_e4a8 ]
  %v7_e4c8 = icmp eq i32 %v0_e4c8, 1
  br i1 %v7_e4c8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_e4c8
  %v1_e4cc = load i32, i32* @r1, align 4
  %v2_e4cc = inttoptr i32 %v1_e4cc to i8*
  %v3_e4cc = load i8, i8* %v2_e4cc, align 1
  %v4_e4cc = zext i8 %v3_e4cc to i32
  %v3_e4d0 = add i32 %v4_e4cc, %v1_e4d0
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e4c8, %bb
  %v0_e4f4 = phi i32 [ %v1_e4d0, %dec_label_pc_e4c8 ], [ %v3_e4d0, %bb ]
  %v3_e4d8 = urem i32 %v2_e498, 65536
  %v1_e4e0 = add i32 %arg1, 9
  %v2_e4e0 = inttoptr i32 %v1_e4e0 to i8*
  %v3_e4e0 = load i8, i8* %v2_e4e0, align 1
  %v4_e4e0 = zext i8 %v3_e4e0 to i32
  %v3_e4e4 = urem i32 %v5_e498, 65536
  %v4_e4e8 = udiv i32 %v2_e498, 65536
  %v3_e4f0 = mul nuw nsw i32 %v4_e4e0, 256
  %v4_e4f4 = udiv i32 %v5_e498, 65536
  %v5_e4f4 = add i32 %v0_e4f4, %v4_e4f4
  %v2_e4f8 = add i32 %v5_e4f4, %v3_e4f0
  %v5_e4e8 = add nuw nsw i32 %v3_e4d8, %v3_e490
  %v2_e4ec = add nuw nsw i32 %v5_e4e8, %v4_e4e8
  %v2_e4fc = add nuw nsw i32 %v2_e4ec, %v3_e4e4
  %v2_e500 = add i32 %v2_e4f8, %v2_e4fc
  %tmp = icmp ult i32 %v2_e500, 65536
  br i1 %tmp, label %dec_label_pc_e520, label %dec_label_pc_e50c

dec_label_pc_e50c:                                ; preds = %.thread, %dec_label_pc_e50c
  %v2_e5141 = phi i32 [ %v2_e514, %dec_label_pc_e50c ], [ %v2_e500, %.thread ]
  %v3_e5182.in = phi i32 [ %v2_e514, %dec_label_pc_e50c ], [ %v2_e500, %.thread ]
  %v3_e5182 = udiv i32 %v3_e5182.in, 65536
  %v3_e510 = urem i32 %v2_e5141, 65536
  %v2_e514 = add nuw nsw i32 %v3_e510, %v3_e5182
  %tmp14 = icmp ult i32 %v2_e514, 65536
  br i1 %tmp14, label %dec_label_pc_e520.loopexit, label %dec_label_pc_e50c

dec_label_pc_e520.loopexit:                       ; preds = %dec_label_pc_e50c
  br label %dec_label_pc_e520

dec_label_pc_e520:                                ; preds = %dec_label_pc_e520.loopexit, %.thread
  %v0_e520 = phi i32 [ %v2_e514, %dec_label_pc_e520.loopexit ], [ %v2_e500, %.thread ]
  %v1_e520 = urem i32 %v0_e520, 65536
  %v3_e528 = xor i32 %v1_e520, 65535
  ret i32 %v3_e528

; uselistorder directives
  uselistorder i32 %v2_e514, { 2, 1, 3, 0 }
  uselistorder i32 %v2_e500, { 3, 0, 2, 1 }
  uselistorder i32 %v1_e4d0, { 1, 0 }
  uselistorder i32 %v1_e4c0, { 1, 0 }
  uselistorder i32 %v1_e4b0, { 0, 2, 1 }
  uselistorder i32 %v0_e4c0, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_e50c, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_e4a8, { 1, 0 }
}

define i32 @function_e530(i32 %arg1) local_unnamed_addr {
dec_label_pc_e530:
  %v2_e534 = load i32, i32* @global_var_1eae4.96, align 4
  %v2_e53c = call i32 @function_13590(i32 %v2_e534, i32 9)
  %v0_e540 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e540, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_e530
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_e530, %bb
  ret i32 %v2_e53c

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_e544(i32 %arg1) local_unnamed_addr {
dec_label_pc_e544:
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e544 = load i32, i32* @r4, align 4
  store i32 %v3_e544, i32* %stack_var_-36, align 4
  %v6_e544 = load i32, i32* @r5, align 4
  %v9_e544 = load i32, i32* @r6, align 4
  %v12_e544 = load i32, i32* @r7, align 4
  %v15_e544 = load i32, i32* @r8, align 4
  %v18_e544 = load i32, i32* @sb, align 4
  %v21_e544 = load i32, i32* @sl, align 4
  %v24_e544 = load i32, i32* @fp, align 4
  %v2_e558 = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_e558, i32* @sl, align 4
  %v3_e560 = mul i32 %arg1, 65536
  store i32 %v3_e560, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_e56c = ptrtoint i32* %stack_var_-8773 to i32
  %v2_e578 = bitcast i32* %stack_var_-4677 to i8*
  %v3_e578 = call i32 @function_13ad0(i8* %v2_e578, i32 0)
  store i32 4096, i32* @r2, align 4
  %v2_e590 = bitcast i32* %stack_var_-8773 to i8*
  %v3_e590 = call i32 @function_13ad0(i8* %v2_e590, i32 0)
  %v2_e594 = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_e594, i32* @r6, align 4
  store i32 513, i32* @r2, align 4
  %v3_e5b4 = call i32 @function_13ad0(i8* nonnull %stack_var_-581, i32 0)
  %v2_e5b8 = ptrtoint i8* %stack_var_-68 to i32
  %v1_e5c0 = load i32, i32* @r5, align 4
  %v4_e5c0 = udiv i32 %v1_e5c0, 16777216
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_e5e0 = trunc i32 %v4_e5c0 to i8
  %v4_e5e0 = call i32 @function_12fc4(i8 %v3_e5e0, i32 16, i32 %v2_e5b8)
  %v2_e5e8 = call i32 @function_12ad0(i8* nonnull %stack_var_-68)
  %v7_e5ec = icmp eq i32 %v2_e5e8, 2
  br i1 %v7_e5ec, label %dec_label_pc_ea80, label %dec_label_pc_e5f4

dec_label_pc_e5f4:                                ; preds = %dec_label_pc_e544, %dec_label_pc_ea80
  %v1_e5f8 = call i32 @function_121a4(i32 6)
  %v1_e600 = call i32 @function_121a4(i32 7)
  %v1_e608 = call i32 @function_121a4(i32 9)
  %v0_e610 = load i32, i32* @r4, align 4
  %v4_e614 = call i32 @function_135bc(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_15da0.98, i32 0, i32 0), i32 %v0_e610)
  %v7_e618 = icmp eq i32 %v4_e614, -1
  store i32 %v4_e614, i32* @r8, align 4
  br i1 %v7_e618, label %dec_label_pc_ea40, label %dec_label_pc_e624.preheader

dec_label_pc_e624.preheader:                      ; preds = %dec_label_pc_e5f4
  %v4_e63058 = call i32 @function_12d28(i8* nonnull %stack_var_-581, i32 512, i32 %v4_e614)
  %v2_e63460 = icmp eq i32 %v4_e63058, 0
  br i1 %v2_e63460, label %dec_label_pc_e7c4.loopexit, label %dec_label_pc_e63c.lr.ph

dec_label_pc_e63c.lr.ph:                          ; preds = %dec_label_pc_e624.preheader
  %v2_e684 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_e63c

dec_label_pc_e63c:                                ; preds = %dec_label_pc_e63c.lr.ph, %dec_label_pc_e624.backedge
  %v3_e640 = load i8, i8* %stack_var_-581, align 1
  %v4_e640 = sext i8 %v3_e640 to i32
  %v2_e644 = icmp eq i8 %v3_e640, 0
  br i1 %v2_e644, label %bb130, label %bb

bb:                                               ; preds = %dec_label_pc_e63c
  %v8_e648 = icmp eq i8 %v3_e640, 58
  br i1 %v8_e648, label %.thread6, label %dec_label_pc_e65c

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_e674

bb130:                                            ; preds = %dec_label_pc_e63c
  br label %dec_label_pc_e674

dec_label_pc_e65c:                                ; preds = %bb
  %v1_e664.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e660

dec_label_pc_e660:                                ; preds = %bb131, %dec_label_pc_e65c
  %v0_e660 = phi i32 [ %v1_e660, %bb131 ], [ 0, %dec_label_pc_e65c ]
  %v1_e660 = add i32 %v0_e660, 1
  %v2_e664 = add i32 %v1_e660, %v1_e664.pre
  %v3_e664 = inttoptr i32 %v2_e664 to i8*
  %v4_e664 = load i8, i8* %v3_e664, align 1
  %v6_e664 = zext i8 %v4_e664 to i32
  %v2_e668 = icmp eq i8 %v4_e664, 0
  br i1 %v2_e668, label %dec_label_pc_e674, label %bb131

bb131:                                            ; preds = %dec_label_pc_e660
  %v8_e66c = icmp eq i8 %v4_e664, 58
  br i1 %v8_e66c, label %dec_label_pc_e674, label %dec_label_pc_e660

dec_label_pc_e674:                                ; preds = %dec_label_pc_e660, %bb131, %bb130, %.thread6
  %v1_e6a0 = phi i32 [ 0, %.thread6 ], [ 0, %bb130 ], [ %v1_e660, %bb131 ], [ %v1_e660, %dec_label_pc_e660 ]
  %v0_e674 = phi i32 [ %v4_e640, %.thread6 ], [ %v4_e640, %bb130 ], [ %v6_e664, %bb131 ], [ %v6_e664, %dec_label_pc_e660 ]
  %v2_e674 = icmp eq i32 %v0_e674, 0
  br i1 %v2_e674, label %dec_label_pc_e624.backedge, label %dec_label_pc_e67c

dec_label_pc_e624.backedge:                       ; preds = %dec_label_pc_e674, %dec_label_pc_e74c, %dec_label_pc_e798, %dec_label_pc_e6c0
  %v0_e62c = load i32, i32* @r8, align 4
  %v4_e630 = call i32 @function_12d28(i8* nonnull %stack_var_-581, i32 512, i32 %v0_e62c)
  %v2_e634 = icmp eq i32 %v4_e630, 0
  br i1 %v2_e634, label %dec_label_pc_e7c4.loopexit, label %dec_label_pc_e63c

dec_label_pc_e67c:                                ; preds = %dec_label_pc_e674
  %v1_e680 = add i32 %v1_e6a0, 2
  %v2_e688 = add i32 %v1_e680, %v2_e684
  %v1_e68c = add i32 %v2_e688, -545
  %v2_e68c = inttoptr i32 %v1_e68c to i8*
  %v3_e68c = load i8, i8* %v2_e68c, align 1
  %v2_e690 = icmp eq i8 %v3_e68c, 0
  br i1 %v2_e690, label %bb133, label %bb132

bb132:                                            ; preds = %dec_label_pc_e67c
  %v8_e694 = icmp eq i8 %v3_e68c, 32
  br i1 %v8_e694, label %.thread10, label %dec_label_pc_e6a0

.thread10:                                        ; preds = %bb132
  store i32 %v1_e680, i32* @r5, align 4
  br label %dec_label_pc_e6c0

bb133:                                            ; preds = %dec_label_pc_e67c
  store i32 %v1_e680, i32* @r5, align 4
  br label %dec_label_pc_e6c0

dec_label_pc_e6a0:                                ; preds = %bb132
  %v0_e6a0 = load i32, i32* @r6, align 4
  %v2_e6a0 = add i32 %v0_e6a0, %v1_e6a0
  br label %dec_label_pc_e6a4

dec_label_pc_e6a4:                                ; preds = %bb134, %dec_label_pc_e6a0
  %v0_e6b013 = phi i32 [ %v1_e6b0, %bb134 ], [ %v2_e6a0, %dec_label_pc_e6a0 ]
  %v1_e6a4 = add i32 %v0_e6b013, 3
  %v2_e6a4 = inttoptr i32 %v1_e6a4 to i8*
  %v3_e6a4 = load i8, i8* %v2_e6a4, align 1
  %v2_e6a8 = icmp eq i8 %v3_e6a4, 0
  br i1 %v2_e6a8, label %.thread12, label %bb134

.thread12:                                        ; preds = %dec_label_pc_e6a4
  %v1_e6b014 = add i32 %v0_e6b013, 1
  br label %dec_label_pc_e6b8

bb134:                                            ; preds = %dec_label_pc_e6a4
  %v8_e6ac = icmp eq i8 %v3_e6a4, 32
  %v1_e6b0 = add i32 %v0_e6b013, 1
  br i1 %v8_e6ac, label %dec_label_pc_e6b8, label %dec_label_pc_e6a4

dec_label_pc_e6b8:                                ; preds = %bb134, %.thread12
  %v1_e6b015 = phi i32 [ %v1_e6b014, %.thread12 ], [ %v1_e6b0, %bb134 ]
  %v2_e6b8 = sub i32 %v1_e6b015, %v0_e6a0
  %v1_e6bc = add i32 %v2_e6b8, 2
  store i32 %v1_e6bc, i32* @r5, align 4
  br label %dec_label_pc_e6c0

dec_label_pc_e6c0:                                ; preds = %bb133, %.thread10, %dec_label_pc_e6b8
  %v1_e6cc = phi i32 [ %v1_e680, %.thread10 ], [ %v1_e680, %bb133 ], [ %v1_e6bc, %dec_label_pc_e6b8 ]
  %v0_e6c0 = load i32, i32* @r6, align 4
  %v2_e6c0 = add i32 %v0_e6c0, %v1_e680
  store i32 %v2_e6c0, i32* @r4, align 4
  %v2_e6cc = add i32 %v1_e6cc, %v2_e684
  store i32 0, i32* @r7, align 4
  %v3_e6d8 = add i32 %v2_e6cc, -545
  %v4_e6d8 = inttoptr i32 %v3_e6d8 to i8*
  store i8 0, i8* %v4_e6d8, align 1
  %v1_e6dc = inttoptr i32 %v2_e6c0 to i8*
  %v2_e6dc = call i32 @function_12ad0(i8* %v1_e6dc)
  store i32 %v2_e6dc, i32* @r1, align 4
  %v0_e6e8 = load i32, i32* @r4, align 4
  %v3_e6ec = inttoptr i32 %v0_e6e8 to i8*
  %v4_e6ec = call i32 @function_12e24(i8* %v3_e6ec, i32 %v2_e6dc, i32 %v2_e5b8)
  %v7_e6f0 = icmp eq i32 %v4_e6ec, -1
  br i1 %v7_e6f0, label %dec_label_pc_e624.backedge, label %dec_label_pc_e70c.preheader

dec_label_pc_e70c.preheader:                      ; preds = %dec_label_pc_e6c0
  %v1_e6f4 = load i32, i32* @r7, align 4
  %v1_e6f8 = load i32, i32* @r6, align 4
  %v2_e6f8 = load i32, i32* @r5, align 4
  %v3_e6f8 = add i32 %v2_e6f8, %v1_e6f8
  store i32 %v1_e6f4, i32* @lr, align 4
  store i32 %v1_e6f4, i32* @r4, align 4
  %v1_e70c50 = add i32 %v3_e6f8, 2
  %v2_e70c51 = inttoptr i32 %v1_e70c50 to i8*
  %v3_e70c52 = load i8, i8* %v2_e70c51, align 1
  %v2_e71054 = icmp eq i8 %v3_e70c52, 0
  %v1_e71456 = add i32 %v2_e6f8, 2
  br i1 %v2_e71054, label %dec_label_pc_e74c, label %dec_label_pc_e71c

dec_label_pc_e71c:                                ; preds = %dec_label_pc_e70c.preheader, %dec_label_pc_e70c.backedge
  %v0_e74c86 = phi i32 [ %v0_e74c85, %dec_label_pc_e70c.backedge ], [ %v1_e6f4, %dec_label_pc_e70c.preheader ]
  %v0_e734.pr = phi i32 [ %v0_e734.pr71, %dec_label_pc_e70c.backedge ], [ %v1_e6f4, %dec_label_pc_e70c.preheader ]
  %v0_ea50 = phi i32 [ %v0_ea5074, %dec_label_pc_e70c.backedge ], [ %v1_e6f4, %dec_label_pc_e70c.preheader ]
  %v0_e71482 = phi i32 [ %v1_e714, %dec_label_pc_e70c.backedge ], [ %v1_e71456, %dec_label_pc_e70c.preheader ]
  %v0_e744 = phi i32 [ %v0_e70c, %dec_label_pc_e70c.backedge ], [ %v3_e6f8, %dec_label_pc_e70c.preheader ]
  %v1_e720.in = phi i8 [ %v3_e70c, %dec_label_pc_e70c.backedge ], [ %v3_e70c52, %dec_label_pc_e70c.preheader ]
  %v7_e71c = icmp eq i8 %v1_e720.in, 9
  br i1 %v7_e71c, label %.thread23, label %bb135

bb135:                                            ; preds = %dec_label_pc_e71c
  %v8_e720 = icmp eq i8 %v1_e720.in, 32
  br i1 %v8_e720, label %.thread23.thread35, label %dec_label_pc_e734

.thread23.thread35:                               ; preds = %bb135
  br label %dec_label_pc_e740

.thread23:                                        ; preds = %dec_label_pc_e71c
  br label %dec_label_pc_e740

dec_label_pc_e734:                                ; preds = %bb135
  %v7_e734 = icmp eq i32 %v0_e734.pr, 1
  br i1 %v7_e734, label %dec_label_pc_ea50, label %dec_label_pc_e73c

dec_label_pc_e73c:                                ; preds = %dec_label_pc_ea50, %dec_label_pc_e734
  %v0_e74079 = phi i32 [ %v1_ea50, %dec_label_pc_ea50 ], [ %v0_ea50, %dec_label_pc_e734 ]
  br label %dec_label_pc_e740

dec_label_pc_e740:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_e73c
  %v0_e740 = phi i32 [ %v0_ea50, %.thread23.thread35 ], [ %v0_ea50, %.thread23 ], [ %v0_e74079, %dec_label_pc_e73c ]
  %v0_e734.pr72 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_e73c ]
  %v7_e748 = icmp sgt i32 %v0_e740, 6
  br i1 %v7_e748, label %dec_label_pc_e74c, label %dec_label_pc_e70c.backedge

dec_label_pc_e74c:                                ; preds = %dec_label_pc_e70c.backedge, %dec_label_pc_e740, %dec_label_pc_e70c.preheader
  %v1_e79c = phi i32 [ %v1_e71456, %dec_label_pc_e70c.preheader ], [ %v1_e714, %dec_label_pc_e70c.backedge ], [ %v0_e71482, %dec_label_pc_e740 ]
  %v0_e74c = phi i32 [ %v1_e6f4, %dec_label_pc_e70c.preheader ], [ %v0_e74c85, %dec_label_pc_e70c.backedge ], [ %v0_e74c86, %dec_label_pc_e740 ]
  %v2_e74c = icmp eq i32 %v0_e74c, 0
  br i1 %v2_e74c, label %dec_label_pc_e624.backedge, label %dec_label_pc_e758

dec_label_pc_e758:                                ; preds = %dec_label_pc_e74c
  %v2_e760 = add i32 %v1_e79c, %v2_e684
  %v1_e764 = add i32 %v2_e760, -545
  %v2_e764 = inttoptr i32 %v1_e764 to i8*
  %v3_e764 = load i8, i8* %v2_e764, align 1
  %v2_e768 = icmp eq i8 %v3_e764, 0
  br i1 %v2_e768, label %dec_label_pc_e798, label %bb136

bb136:                                            ; preds = %dec_label_pc_e758
  %v8_e76c = icmp eq i8 %v3_e764, 32
  br i1 %v8_e76c, label %dec_label_pc_e798, label %dec_label_pc_e774

dec_label_pc_e774:                                ; preds = %bb136
  %v2_e774 = add i32 %v1_e79c, %v1_e6f8
  br label %dec_label_pc_e778

dec_label_pc_e778:                                ; preds = %bb137, %dec_label_pc_e774
  %v0_e78428 = phi i32 [ %v1_e784, %bb137 ], [ %v1_e79c, %dec_label_pc_e774 ]
  %v0_e778 = phi i32 [ %v1_e778, %bb137 ], [ %v2_e774, %dec_label_pc_e774 ]
  %v1_e778 = add i32 %v0_e778, 1
  %v2_e778 = inttoptr i32 %v1_e778 to i8*
  %v3_e778 = load i8, i8* %v2_e778, align 1
  %v2_e77c = icmp eq i8 %v3_e778, 0
  br i1 %v2_e77c, label %.thread27, label %bb137

.thread27:                                        ; preds = %dec_label_pc_e778
  %v1_e78429 = add i32 %v0_e78428, 1
  br label %dec_label_pc_e78c

bb137:                                            ; preds = %dec_label_pc_e778
  %v8_e780 = icmp eq i8 %v3_e778, 32
  %v1_e784 = add i32 %v0_e78428, 1
  br i1 %v8_e780, label %dec_label_pc_e78c, label %dec_label_pc_e778

dec_label_pc_e78c:                                ; preds = %bb137, %.thread27
  %v1_e794 = phi i32 [ %v1_e78429, %.thread27 ], [ %v1_e784, %bb137 ]
  %v2_e794 = add i32 %v1_e794, %v2_e684
  br label %dec_label_pc_e798

dec_label_pc_e798:                                ; preds = %dec_label_pc_e758, %bb136, %dec_label_pc_e78c
  %v2_e7a4 = phi i32 [ %v2_e760, %dec_label_pc_e758 ], [ %v2_e760, %bb136 ], [ %v2_e794, %dec_label_pc_e78c ]
  %v2_e79c = add i32 %v1_e79c, %v1_e6f8
  store i32 %v2_e79c, i32* @r4, align 4
  %v3_e7a4 = add i32 %v2_e7a4, -545
  %v4_e7a4 = inttoptr i32 %v3_e7a4 to i8*
  store i8 0, i8* %v4_e7a4, align 1
  %v1_e7a8 = inttoptr i32 %v2_e79c to i8*
  %v2_e7a8 = call i32 @function_12ad0(i8* %v1_e7a8)
  %v8_e7b0 = icmp sgt i32 %v2_e7a8, 15
  br i1 %v8_e7b0, label %dec_label_pc_e624.backedge, label %dec_label_pc_e7b4

dec_label_pc_e7b4:                                ; preds = %dec_label_pc_e798
  %v0_e7b8 = load i32, i32* @r4, align 4
  %v2_e7bc = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_e7bc, i32* @r0, align 4
  %v2_e7c0 = bitcast i32* %stack_var_-52 to i8*
  %v3_e7c0 = call i32 @function_12af8(i8* %v2_e7c0, i32 %v0_e7b8)
  br label %dec_label_pc_e7c4

dec_label_pc_e7c4.loopexit:                       ; preds = %dec_label_pc_e624.backedge, %dec_label_pc_e624.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre99 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_e7c4

dec_label_pc_e7c4:                                ; preds = %dec_label_pc_e7c4.loopexit, %dec_label_pc_e7b4
  %v1_e7d4.pre-phi = phi i8* [ %.pre99, %dec_label_pc_e7c4.loopexit ], [ %v2_e7c0, %dec_label_pc_e7b4 ]
  %v2_e7d0.pre-phi = phi i32 [ %.pre, %dec_label_pc_e7c4.loopexit ], [ %v2_e7bc, %dec_label_pc_e7b4 ]
  %v0_e7c4 = load i32, i32* @r8, align 4
  %v1_e7c8 = call i32 @function_13490(i32 %v0_e7c4)
  %v2_e7d4 = call i32 @function_12ad0(i8* %v1_e7d4.pre-phi)
  store i32 %v2_e7d4, i32* @r4, align 4
  %v2_e7d8 = icmp eq i32 %v2_e7d4, 0
  br i1 %v2_e7d8, label %dec_label_pc_ea28, label %dec_label_pc_e7e0

dec_label_pc_e7e0:                                ; preds = %dec_label_pc_e7c4
  %v3_e7e8 = call i32 @function_120c0(i32 6, i32* null)
  store i32 %v3_e7e8, i32* @r0, align 4
  %v1_e7ec = call i32 @function_13898(i32 %v3_e7e8)
  store i32 %v1_e7ec, i32* @r8, align 4
  %v2_e7f0 = icmp eq i32 %v1_e7ec, 0
  br i1 %v2_e7f0, label %dec_label_pc_ea20, label %dec_label_pc_e800.preheader

dec_label_pc_e800.preheader:                      ; preds = %dec_label_pc_e7e0
  store i32 0, i32* @r5, align 4
  %v1_e80445 = inttoptr i32 %v1_e7ec to i32*
  %v2_e80446 = call i32 @function_13994(i32* %v1_e80445)
  %v2_e80848 = icmp eq i32 %v2_e80446, 0
  br i1 %v2_e80848, label %dec_label_pc_ea14, label %dec_label_pc_e810.preheader

dec_label_pc_e800.loopexit:                       ; preds = %dec_label_pc_e818, %dec_label_pc_e82c, %dec_label_pc_e894
  %v0_e800 = load i32, i32* @r8, align 4
  %v1_e804 = inttoptr i32 %v0_e800 to i32*
  %v2_e804 = call i32 @function_13994(i32* %v1_e804)
  %v2_e808 = icmp eq i32 %v2_e804, 0
  br i1 %v2_e808, label %dec_label_pc_ea14, label %dec_label_pc_e810.preheader

dec_label_pc_e810.preheader:                      ; preds = %dec_label_pc_e800.preheader, %dec_label_pc_e800.loopexit
  %v0_e81894 = phi i32 [ %v2_e804, %dec_label_pc_e800.loopexit ], [ %v2_e80446, %dec_label_pc_e800.preheader ]
  br label %dec_label_pc_e810

dec_label_pc_e810:                                ; preds = %dec_label_pc_e810.preheader, %dec_label_pc_e9fc
  %v0_e824 = phi i32 [ %v0_e81894, %dec_label_pc_e810.preheader ], [ %v2_ea08, %dec_label_pc_e9fc ]
  %v0_e810 = load i32, i32* @r5, align 4
  %v2_e810 = icmp eq i32 %v0_e810, 0
  br i1 %v2_e810, label %dec_label_pc_e818, label %dec_label_pc_ea14

dec_label_pc_e818:                                ; preds = %dec_label_pc_e810
  %v1_e818 = add i32 %v0_e824, 11
  %v2_e818 = inttoptr i32 %v1_e818 to i8*
  %v3_e818 = load i8, i8* %v2_e818, align 1
  %v4_e818 = zext i8 %v3_e818 to i32
  %v1_e81c = add nsw i32 %v4_e818, -48
  store i32 %v1_e818, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_e81c, 9
  br i1 %tmp, label %dec_label_pc_e800.loopexit, label %dec_label_pc_e82c

dec_label_pc_e82c:                                ; preds = %dec_label_pc_e818
  %v3_e834 = call i32 @function_120c0(i32 6, i32* null)
  store i32 %v2_e558, i32* @r0, align 4
  %v3_e840 = call i32 @function_12af8(i8* %v2_e578, i32 %v3_e834)
  %v2_e848 = call i32 @function_12ad0(i8* %v2_e578)
  %v0_e84c = load i32, i32* @r7, align 4
  %v0_e850 = load i32, i32* @sl, align 4
  %v2_e850 = add i32 %v0_e850, %v2_e848
  store i32 %v2_e850, i32* @r0, align 4
  %v2_e854 = inttoptr i32 %v2_e850 to i8*
  %v3_e854 = call i32 @function_12af8(i8* %v2_e854, i32 %v0_e84c)
  %v2_e85c = call i32 @function_12ad0(i8* %v2_e578)
  %v0_e860 = load i32, i32* @r5, align 4
  store i32 %v2_e85c, i32* @r4, align 4
  %v2_e86c = inttoptr i32 %v0_e860 to i32*
  %v3_e86c = call i32 @function_120c0(i32 7, i32* %v2_e86c)
  %v0_e874 = load i32, i32* @sl, align 4
  %v1_e874 = load i32, i32* @r4, align 4
  %v2_e874 = add i32 %v1_e874, %v0_e874
  store i32 %v2_e874, i32* @r0, align 4
  %v2_e878 = inttoptr i32 %v2_e874 to i8*
  %v3_e878 = call i32 @function_12af8(i8* %v2_e878, i32 %v3_e86c)
  %v4_e888 = call i32 @function_13684(i8* %v2_e578, i32 %v2_e56c, i32 4096)
  %v7_e88c = icmp eq i32 %v4_e888, -1
  br i1 %v7_e88c, label %dec_label_pc_e800.loopexit, label %dec_label_pc_e894

dec_label_pc_e894:                                ; preds = %dec_label_pc_e82c
  %v0_e894 = load i32, i32* @r5, align 4
  %v2_e89c = inttoptr i32 %v0_e894 to i32*
  %v3_e89c = call i32 @function_120c0(i32 6, i32* %v2_e89c)
  store i32 %v2_e558, i32* @r0, align 4
  %v3_e8a8 = call i32 @function_12af8(i8* %v2_e578, i32 %v3_e89c)
  %v2_e8b0 = call i32 @function_12ad0(i8* %v2_e578)
  %v0_e8b4 = load i32, i32* @r7, align 4
  %v0_e8b8 = load i32, i32* @sl, align 4
  %v2_e8b8 = add i32 %v0_e8b8, %v2_e8b0
  store i32 %v2_e8b8, i32* @r0, align 4
  %v2_e8bc = inttoptr i32 %v2_e8b8 to i8*
  %v3_e8bc = call i32 @function_12af8(i8* %v2_e8bc, i32 %v0_e8b4)
  %v2_e8c4 = call i32 @function_12ad0(i8* %v2_e578)
  %v0_e8c8 = load i32, i32* @r5, align 4
  store i32 %v2_e8c4, i32* @r4, align 4
  %v2_e8d4 = inttoptr i32 %v0_e8c8 to i32*
  %v3_e8d4 = call i32 @function_120c0(i32 9, i32* %v2_e8d4)
  %v0_e8dc = load i32, i32* @sl, align 4
  %v1_e8dc = load i32, i32* @r4, align 4
  %v2_e8dc = add i32 %v1_e8dc, %v0_e8dc
  store i32 %v2_e8dc, i32* @r0, align 4
  %v2_e8e0 = inttoptr i32 %v2_e8dc to i8*
  %v3_e8e0 = call i32 @function_12af8(i8* %v2_e8e0, i32 %v3_e8d4)
  store i32 %v2_e558, i32* @r0, align 4
  %v1_e8e8 = call i32 @function_13898(i32 %v2_e558)
  store i32 %v1_e8e8, i32* @sb, align 4
  %v2_e8ec = icmp eq i32 %v1_e8e8, 0
  br i1 %v2_e8ec, label %dec_label_pc_e800.loopexit, label %dec_label_pc_e8f4.preheader

dec_label_pc_e8f4.preheader:                      ; preds = %dec_label_pc_e894
  %v1_e8f840 = inttoptr i32 %v1_e8e8 to i32*
  %v2_e8f841 = call i32 @function_13994(i32* %v1_e8f840)
  store i32 %v2_e8f841, i32* @r6, align 4
  %v2_e8fc43 = icmp eq i32 %v2_e8f841, 0
  br i1 %v2_e8fc43, label %dec_label_pc_e9fc, label %dec_label_pc_e90cthread-pre-split

dec_label_pc_e8f4.loopexit:                       ; preds = %dec_label_pc_e914, %dec_label_pc_e9ac
  %v0_e8f4 = load i32, i32* @sb, align 4
  %v1_e8f8 = inttoptr i32 %v0_e8f4 to i32*
  %v2_e8f8 = call i32 @function_13994(i32* %v1_e8f8)
  store i32 %v2_e8f8, i32* @r6, align 4
  %v2_e8fc = icmp eq i32 %v2_e8f8, 0
  br i1 %v2_e8fc, label %dec_label_pc_e9fc, label %dec_label_pc_e90cthread-pre-split

dec_label_pc_e90cthread-pre-split:                ; preds = %dec_label_pc_e8f4.preheader, %dec_label_pc_e8f4.loopexit
  %v0_e90c.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_e90c

dec_label_pc_e90c:                                ; preds = %dec_label_pc_e90cthread-pre-split, %dec_label_pc_e9d4
  %v0_e90c = phi i32 [ %v0_e90c.pr, %dec_label_pc_e90cthread-pre-split ], [ 1, %dec_label_pc_e9d4 ]
  %v2_e90c = icmp eq i32 %v0_e90c, 0
  br i1 %v2_e90c, label %dec_label_pc_e914, label %dec_label_pc_e9fc

dec_label_pc_e914:                                ; preds = %dec_label_pc_e90c
  %v2_e914 = call i32 @function_12b70(i32 %v2_e56c, i32 4096)
  %v0_e918 = load i32, i32* @r5, align 4
  %v2_e920 = inttoptr i32 %v0_e918 to i32*
  %v3_e920 = call i32 @function_120c0(i32 6, i32* %v2_e920)
  store i32 %v2_e558, i32* @r0, align 4
  %v3_e92c = call i32 @function_12af8(i8* %v2_e578, i32 %v3_e920)
  %v2_e934 = call i32 @function_12ad0(i8* %v2_e578)
  %v0_e938 = load i32, i32* @r7, align 4
  %v0_e93c = load i32, i32* @sl, align 4
  %v2_e93c = add i32 %v0_e93c, %v2_e934
  store i32 %v2_e93c, i32* @r0, align 4
  %v2_e940 = inttoptr i32 %v2_e93c to i8*
  %v3_e940 = call i32 @function_12af8(i8* %v2_e940, i32 %v0_e938)
  %v2_e948 = call i32 @function_12ad0(i8* %v2_e578)
  %v0_e94c = load i32, i32* @r5, align 4
  store i32 %v2_e948, i32* @r4, align 4
  %v2_e958 = inttoptr i32 %v0_e94c to i32*
  %v3_e958 = call i32 @function_120c0(i32 9, i32* %v2_e958)
  %v0_e960 = load i32, i32* @sl, align 4
  %v1_e960 = load i32, i32* @r4, align 4
  %v2_e960 = add i32 %v1_e960, %v0_e960
  store i32 %v2_e960, i32* @r0, align 4
  %v2_e964 = inttoptr i32 %v2_e960 to i8*
  %v3_e964 = call i32 @function_12af8(i8* %v2_e964, i32 %v3_e958)
  %v2_e96c = call i32 @function_12ad0(i8* %v2_e578)
  %v0_e974 = load i32, i32* @sl, align 4
  %v2_e974 = add i32 %v0_e974, %v2_e96c
  store i32 %v2_e974, i32* @r0, align 4
  %v2_e978 = inttoptr i32 %v2_e974 to i8*
  %v3_e978 = call i32 @function_12af8(i8* %v2_e978, i32 ptrtoint ([2 x i8]* @global_var_15d60.23 to i32))
  %v2_e980 = call i32 @function_12ad0(i8* %v2_e578)
  %v0_e984 = load i32, i32* @r6, align 4
  %v1_e984 = add i32 %v0_e984, 11
  %v0_e988 = load i32, i32* @sl, align 4
  %v2_e988 = add i32 %v0_e988, %v2_e980
  store i32 %v2_e988, i32* @r0, align 4
  %v2_e98c = inttoptr i32 %v2_e988 to i8*
  %v3_e98c = call i32 @function_12af8(i8* %v2_e98c, i32 %v1_e984)
  %v4_e99c = call i32 @function_13684(i8* %v2_e578, i32 %v2_e56c, i32 4096)
  %v7_e9a0 = icmp eq i32 %v4_e99c, -1
  br i1 %v7_e9a0, label %dec_label_pc_e8f4.loopexit, label %dec_label_pc_e9ac

dec_label_pc_e9ac:                                ; preds = %dec_label_pc_e914
  %v2_e9ac = call i32 @function_12ad0(i8* %v2_e590)
  store i32 %v2_e9ac, i32* @r1, align 4
  %v4_e9c0 = call i32 @function_12e24(i8* %v2_e590, i32 %v2_e9ac, i32 %v2_e7d0.pre-phi)
  %v7_e9c4 = icmp eq i32 %v4_e9c0, -1
  br i1 %v7_e9c4, label %dec_label_pc_e8f4.loopexit, label %dec_label_pc_e9d4

dec_label_pc_e9d4:                                ; preds = %dec_label_pc_e9ac
  %v0_e9cc = load i32, i32* @r7, align 4
  %v2_e9d4 = inttoptr i32 %v0_e9cc to i8*
  %v3_e9d4 = call i32 @function_12bfc(i8* %v2_e9d4, i32 10)
  %v2_e9dc = call i32 @function_13590(i32 %v3_e9d4, i32 9)
  %v0_e9e0 = load i32, i32* @sb, align 4
  %v1_e9e4 = inttoptr i32 %v0_e9e0 to i32*
  %v2_e9e4 = call i32 @function_13994(i32* %v1_e9e4)
  store i32 %v2_e9e4, i32* @r6, align 4
  %v2_e9e8 = icmp eq i32 %v2_e9e4, 0
  store i32 1, i32* @r5, align 4
  br i1 %v2_e9e8, label %dec_label_pc_e9fc, label %dec_label_pc_e90c

dec_label_pc_e9fc:                                ; preds = %dec_label_pc_e8f4.loopexit, %dec_label_pc_e9d4, %dec_label_pc_e90c, %dec_label_pc_e8f4.preheader
  %v0_e9fc = load i32, i32* @sb, align 4
  %v1_ea00 = inttoptr i32 %v0_e9fc to i32*
  %v2_ea00 = call i32 @function_137e4(i32* %v1_ea00)
  %v0_ea04 = load i32, i32* @r8, align 4
  %v1_ea08 = inttoptr i32 %v0_ea04 to i32*
  %v2_ea08 = call i32 @function_13994(i32* %v1_ea08)
  %v2_ea0c = icmp eq i32 %v2_ea08, 0
  br i1 %v2_ea0c, label %dec_label_pc_ea14, label %dec_label_pc_e810

dec_label_pc_ea14:                                ; preds = %dec_label_pc_e800.loopexit, %dec_label_pc_e9fc, %dec_label_pc_e810, %dec_label_pc_e800.preheader
  %v0_ea14 = load i32, i32* @r8, align 4
  %v1_ea18 = inttoptr i32 %v0_ea14 to i32*
  %v2_ea18 = call i32 @function_137e4(i32* %v1_ea18)
  %v0_ea1c = load i32, i32* @r5, align 4
  %v1_ea1c = urem i32 %v0_ea1c, 256
  br label %dec_label_pc_ea20

dec_label_pc_ea20:                                ; preds = %dec_label_pc_e7e0, %dec_label_pc_ea14
  %storemerge = phi i32 [ %v1_ea1c, %dec_label_pc_ea14 ], [ 0, %dec_label_pc_e7e0 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_ea24 = call i32 @function_148c4(i32 1)
  br label %dec_label_pc_ea28

dec_label_pc_ea28:                                ; preds = %dec_label_pc_e7c4, %dec_label_pc_ea20
  %v1_ea2c = call i32 @function_120ec(i32 6)
  %v1_ea34 = call i32 @function_120ec(i32 7)
  %v1_ea3c = call i32 @function_120ec(i32 9)
  br label %dec_label_pc_ea40

dec_label_pc_ea40:                                ; preds = %dec_label_pc_e5f4, %dec_label_pc_ea28
  %v0_ea40 = load i32, i32* @r4, align 4
  %v2_ea4c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_ea4c, i32* @r4, align 4
  store i32 %v6_e544, i32* @r5, align 4
  store i32 %v9_e544, i32* @r6, align 4
  store i32 %v12_e544, i32* @r7, align 4
  store i32 %v15_e544, i32* @r8, align 4
  store i32 %v18_e544, i32* @sb, align 4
  store i32 %v21_e544, i32* @sl, align 4
  store i32 %v24_e544, i32* @fp, align 4
  ret i32 %v0_ea40

dec_label_pc_ea50:                                ; preds = %dec_label_pc_e734
  %v1_ea50 = add i32 %v0_ea50, 1
  store i32 %v1_ea50, i32* @lr, align 4
  %v7_ea54 = icmp eq i32 %v0_ea50, 0
  br i1 %v7_ea54, label %dec_label_pc_ea5c, label %dec_label_pc_e73c

dec_label_pc_ea5c:                                ; preds = %dec_label_pc_ea50
  %v1_ea5c = add i32 %v0_e744, 3
  %v2_ea5c = inttoptr i32 %v1_ea5c to i8*
  %v3_ea5c = load i8, i8* %v2_ea5c, align 1
  %v7_ea60 = icmp eq i8 %v3_ea5c, 65
  br i1 %v7_ea60, label %dec_label_pc_ea70, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_ea5c
  br label %dec_label_pc_e70c.backedge

dec_label_pc_ea70:                                ; preds = %dec_label_pc_ea5c
  store i32 %v1_ea50, i32* @r4, align 4
  br label %dec_label_pc_e70c.backedge

dec_label_pc_e70c.backedge:                       ; preds = %.thread33, %dec_label_pc_ea70, %dec_label_pc_e740
  %v0_e74c85 = phi i32 [ %v1_ea50, %dec_label_pc_ea70 ], [ %v0_e74c86, %dec_label_pc_e740 ], [ %v0_e74c86, %.thread33 ]
  %v0_ea5074 = phi i32 [ %v1_ea50, %dec_label_pc_ea70 ], [ %v0_e740, %dec_label_pc_e740 ], [ %v1_ea50, %.thread33 ]
  %v0_e734.pr71 = phi i32 [ 0, %dec_label_pc_ea70 ], [ %v0_e734.pr72, %dec_label_pc_e740 ], [ 0, %.thread33 ]
  %v0_e70c = add i32 %v0_e744, 1
  %v1_e70c = add i32 %v0_e744, 3
  %v2_e70c = inttoptr i32 %v1_e70c to i8*
  %v3_e70c = load i8, i8* %v2_e70c, align 1
  %v2_e710 = icmp eq i8 %v3_e70c, 0
  %v1_e714 = add i32 %v0_e71482, 1
  br i1 %v2_e710, label %dec_label_pc_e74c, label %dec_label_pc_e71c

dec_label_pc_ea80:                                ; preds = %dec_label_pc_e544
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_e5f4

; uselistorder directives
  uselistorder i32 %v1_e714, { 1, 0 }
  uselistorder i8 %v3_e70c, { 1, 0 }
  uselistorder i32 %v0_e74c85, { 1, 0 }
  uselistorder i32 %v1_ea50, { 4, 3, 0, 2, 5, 1 }
  uselistorder i32 %v2_ea08, { 1, 0 }
  uselistorder i32 %v1_e778, { 1, 0 }
  uselistorder i32 %v0_e78428, { 1, 0 }
  uselistorder i32 %v1_e79c, { 0, 3, 1, 2 }
  uselistorder i32 %v0_e740, { 1, 0 }
  uselistorder i32 %v0_e71482, { 1, 0 }
  uselistorder i32 %v0_ea50, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_e74c86, { 1, 2, 0 }
  uselistorder i32 %v1_e71456, { 1, 0 }
  uselistorder i32 %v2_e6f8, { 1, 0 }
  uselistorder i32 %v1_e6f4, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v0_e6b013, { 1, 0, 2 }
  uselistorder i32 %v0_e6a0, { 1, 0 }
  uselistorder i32 %v1_e680, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v4_e614, { 1, 2, 0 }
  uselistorder i32 %v2_e56c, { 1, 0, 2 }
  uselistorder i32 %v2_e558, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-581, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32)* @function_12bfc, { 1, 0, 2, 4, 3 }
  uselistorder i32 ptrtoint ([2 x i8]* @global_var_15d60.23 to i32), { 2, 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @function_12d28, { 1, 0 }
  uselistorder label %dec_label_pc_e70c.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ea40, { 1, 0 }
  uselistorder label %dec_label_pc_ea28, { 1, 0 }
  uselistorder label %dec_label_pc_ea20, { 1, 0 }
  uselistorder label %dec_label_pc_ea14, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_e9fc, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_e90c, { 1, 0 }
  uselistorder label %dec_label_pc_e90cthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_e8f4.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_e810, { 1, 0 }
  uselistorder label %dec_label_pc_e810.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_e800.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e798, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e740, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e71c, { 1, 0 }
  uselistorder label %dec_label_pc_e6c0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e624.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_e674, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_e63c, { 1, 0 }
  uselistorder label %dec_label_pc_e5f4, { 1, 0 }
}

define i32 @function_eab0(i32 %arg1) local_unnamed_addr {
dec_label_pc_eab0:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-4312 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-8408 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-236 = alloca i32, align 4
  %stack_var_-8428 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_eab0 = load i32, i32* @r4, align 4
  store i32 %v3_eab0, i32* %stack_var_-36, align 4
  %v6_eab0 = load i32, i32* @r5, align 4
  %v9_eab0 = load i32, i32* @r6, align 4
  %v12_eab0 = load i32, i32* @r7, align 4
  %v15_eab0 = load i32, i32* @r8, align 4
  %v18_eab0 = load i32, i32* @sb, align 4
  %v21_eab0 = load i32, i32* @sl, align 4
  %v24_eab0 = load i32, i32* @fp, align 4
  %v2_eac0 = call i32 @function_13760(i32* null)
  store i32 %v2_eac0, i32* @r7, align 4
  %v0_eac8 = call i32 @function_134bc()
  %v7_eacc = icmp eq i32 %v0_eac8, -1
  %. = zext i1 %v7_eacc to i32
  %tmp212 = icmp slt i32 %v0_eac8, 1
  %storemerge174 = select i1 %tmp212, i32 %., i32 1
  store i32 %storemerge174, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1eae4.96 to i32), i32* %r3.global-to-local, align 4
  %v2_eae8 = icmp eq i32 %storemerge174, 0
  store i32 %v0_eac8, i32* @global_var_1eae4.96, align 4
  br i1 %v2_eae8, label %dec_label_pc_eb00, label %dec_label_pc_eaf4

dec_label_pc_eaf4:                                ; preds = %dec_label_pc_ec7c, %dec_label_pc_eb64, %dec_label_pc_eab0
  %v29_eafc = phi i32 [ %v3_ec08, %dec_label_pc_eb64 ], [ %v0_eac8, %dec_label_pc_eab0 ], [ 0, %dec_label_pc_ec7c ]
  %v2_eafc = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_eafc, i32* @r4, align 4
  store i32 %v6_eab0, i32* @r5, align 4
  store i32 %v9_eab0, i32* @r6, align 4
  store i32 %v12_eab0, i32* @r7, align 4
  store i32 %v15_eab0, i32* @r8, align 4
  store i32 %v18_eab0, i32* @sb, align 4
  store i32 %v21_eab0, i32* @sl, align 4
  store i32 %v24_eab0, i32* @fp, align 4
  ret i32 %v29_eafc

dec_label_pc_eb00:                                ; preds = %dec_label_pc_eab0
  %v2_eb00 = ptrtoint i32* %stack_var_-236 to i32
  store i32 %v2_eb00, i32* %r1.global-to-local, align 4
  store i32 2, i32* @r4, align 4
  store i32 2, i32* %stack_var_-72, align 4
  %v1_eb18 = call i32 @function_e544(i32 5888)
  store i32 23, i32* %r3.global-to-local, align 4
  %v0_eb24 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_eb2c = load i32, i32* @r5, align 4
  store i32 %v0_eb2c, i32* %r2.global-to-local, align 4
  %v3_eb38 = call i32 @function_13d90(i32 %v0_eb24, i32 1, i32 %v0_eb2c)
  %v7_eb3c = icmp eq i32 %v3_eb38, -1
  store i32 %v3_eb38, i32* @r4, align 4
  br i1 %v7_eb3c, label %dec_label_pc_eb64, label %dec_label_pc_eb48

dec_label_pc_eb48:                                ; preds = %dec_label_pc_eb00
  %v2_eb4c = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_eb4c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_eb54 = bitcast i32* %stack_var_-72 to %sockaddr*
  %v4_eb54 = call i32 @function_13bc0(i32 %v3_eb38, %sockaddr* %v3_eb54, i32 16)
  %v0_eb58 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_eb60 = call i32 @function_13c74(i32 %v0_eb58, i32 1)
  br label %dec_label_pc_eb64

dec_label_pc_eb64:                                ; preds = %dec_label_pc_eb00, %dec_label_pc_eb48
  %v1_eb68 = call i32 @function_148c4(i32 5)
  %v1_eb70 = call i32 @function_13f40(i32 4096)
  store i32 ptrtoint (i32* @global_var_1ea48.102 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1eae0.104 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_eb70, i32* %r2.global-to-local, align 4
  %v0_eb80 = load i32, i32* @r5, align 4
  %v1_eb80 = trunc i32 %v0_eb80 to i8
  %v3_eb80 = inttoptr i32 %v1_eb70 to i8*
  store i8 %v1_eb80, i8* %v3_eb80, align 1
  %v0_eb88 = load i32, i32* @r5, align 4
  %v1_eb88 = load i32, i32* %r3.global-to-local, align 4
  %v2_eb88 = inttoptr i32 %v1_eb88 to i32*
  store i32 %v0_eb88, i32* %v2_eb88, align 4
  %v0_eb8c = load i32, i32* %r2.global-to-local, align 4
  %v1_eb8c = load i32, i32* %r1.global-to-local, align 4
  %v2_eb8c = inttoptr i32 %v1_eb8c to i32*
  store i32 %v0_eb8c, i32* %v2_eb8c, align 4
  %v1_eb90 = call i32 @function_121a4(i32 6)
  %v1_eb98 = call i32 @function_121a4(i32 7)
  %v0_eb9c = load i32, i32* @r5, align 4
  store i32 %v0_eb9c, i32* %r1.global-to-local, align 4
  %v2_eba4 = inttoptr i32 %v0_eb9c to i32*
  %v3_eba4 = call i32 @function_120c0(i32 6, i32* %v2_eba4)
  %v2_ebac = ptrtoint i32* %stack_var_-8408 to i32
  store i32 %v2_ebac, i32* @r8, align 4
  store i32 %v3_eba4, i32* %r1.global-to-local, align 4
  store i32 %v2_ebac, i32* @r0, align 4
  %v2_ebb8 = bitcast i32* %stack_var_-8408 to i8*
  %v3_ebb8 = call i32 @function_12af8(i8* %v2_ebb8, i32 %v3_eba4)
  %v0_ebbc = load i32, i32* @r8, align 4
  %v2_ebbc = add i32 %v0_ebbc, %v3_ebb8
  store i32 %v2_ebbc, i32* @r4, align 4
  %v0_ebc0 = call i32 @function_134e8()
  %v2_ebc8 = ptrtoint i32* %stack_var_-88 to i32
  store i32 %v2_ebc8, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_ebd0 = trunc i32 %v0_ebc0 to i8
  %v4_ebd0 = call i32 @function_12fc4(i8 %v3_ebd0, i32 10, i32 %v2_ebc8)
  store i32 %v4_ebd0, i32* %r1.global-to-local, align 4
  %v0_ebd8 = load i32, i32* @r4, align 4
  store i32 %v0_ebd8, i32* @r0, align 4
  %v2_ebdc = inttoptr i32 %v0_ebd8 to i8*
  %v3_ebdc = call i32 @function_12af8(i8* %v2_ebdc, i32 %v4_ebd0)
  %v0_ebe0 = load i32, i32* @r5, align 4
  store i32 %v0_ebe0, i32* %r1.global-to-local, align 4
  %v0_ebe4 = load i32, i32* @r4, align 4
  %v2_ebe4 = add i32 %v0_ebe4, %v3_ebdc
  store i32 %v2_ebe4, i32* @r4, align 4
  %v2_ebec = inttoptr i32 %v0_ebe0 to i32*
  %v3_ebec = call i32 @function_120c0(i32 7, i32* %v2_ebec)
  store i32 %v3_ebec, i32* %r1.global-to-local, align 4
  %v0_ebf4 = load i32, i32* @r4, align 4
  store i32 %v0_ebf4, i32* @r0, align 4
  %v2_ebf8 = inttoptr i32 %v0_ebf4 to i8*
  %v3_ebf8 = call i32 @function_12af8(i8* %v2_ebf8, i32 %v3_ebec)
  %v0_ebfc = load i32, i32* @r5, align 4
  store i32 %v0_ebfc, i32* %r1.global-to-local, align 4
  store i32 %v3_ebf8, i32* @r6, align 4
  %v3_ec08 = call i32 @function_135bc(i8* %v2_ebb8, i32 %v0_ebfc)
  %v7_ec0c = icmp eq i32 %v3_ec08, -1
  br i1 %v7_ec0c, label %dec_label_pc_eaf4, label %dec_label_pc_ec14

dec_label_pc_ec14:                                ; preds = %dec_label_pc_eb64
  %v1_ec14 = call i32 @function_13490(i32 %v3_ec08)
  %v1_ec1c = call i32 @function_120ec(i32 6)
  %v1_ec24 = call i32 @function_120ec(i32 7)
  store i32 ptrtoint (i32* @global_var_1eae0.104 to i32), i32* %r3.global-to-local, align 4
  %v2_ec30 = load i32, i32* @global_var_1eae0.104, align 4
  store i32 %v2_ec30, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v4_ec3c = call i32 @function_13684(i8* %v2_ebb8, i32 %v2_ec30, i32 4095)
  %v7_ec40 = icmp eq i32 %v4_ec3c, -1
  br i1 %v7_ec40, label %.thread5.thread, label %bb215

.thread5.thread:                                  ; preds = %dec_label_pc_ec14
  %v0_ec4c54 = load i32, i32* @r4, align 4
  %v1_ec4c55 = load i32, i32* @r6, align 4
  %v2_ec4c56 = add i32 %v1_ec4c55, %v0_ec4c54
  store i32 %v2_ec4c56, i32* %r1.global-to-local, align 4
  br label %bb216

bb215:                                            ; preds = %dec_label_pc_ec14
  %v3_ec48 = load i32, i32* @global_var_1eae0.104, align 4
  store i32 %v3_ec48, i32* %r3.global-to-local, align 4
  %v0_ec4c = load i32, i32* @r4, align 4
  %v1_ec4c = load i32, i32* @r6, align 4
  %v2_ec4c = add i32 %v1_ec4c, %v0_ec4c
  store i32 %v2_ec4c, i32* %r1.global-to-local, align 4
  %v1_ec50 = load i32, i32* @r5, align 4
  %v2_ec50 = trunc i32 %v1_ec50 to i8
  %v5_ec50 = add i32 %v3_ec48, %v4_ec3c
  %v6_ec50 = inttoptr i32 %v5_ec50 to i8*
  store i8 %v2_ec50, i8* %v6_ec50, align 1
  %v1_ec54.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb216

bb216:                                            ; preds = %.thread5.thread, %bb215
  %v1_ec54 = phi i32 [ %v2_ec4c56, %.thread5.thread ], [ %v1_ec54.pre, %bb215 ]
  %v0_ec54 = load i32, i32* @r8, align 4
  %v2_ec54 = sub i32 %v1_ec54, %v0_ec54
  store i32 %v2_ec54, i32* %r1.global-to-local, align 4
  %v2_ec5c = call i32 @function_12b70(i32 %v2_ebac, i32 %v2_ec54)
  %v2_ec68 = ptrtoint i32* %stack_var_-4312 to i32
  store i32 %v2_ec68, i32* %r1.global-to-local, align 4
  store i32 %v2_ec68, i32* %stack_var_-8428, align 4
  %v0_ec70 = load i32, i32* @r5, align 4
  %v0_ec74 = load i32, i32* @r7, align 4
  store i32 %v0_ec74, i32* @r4, align 4
  store i32 400, i32* @r5, align 4
  %v2_ed70 = ptrtoint i32* %stack_var_-152 to i32
  %v2_ed74 = bitcast i32* %stack_var_-152 to i8*
  %v2_edc0 = ptrtoint i32* %stack_var_-216 to i32
  %v2_edc4 = bitcast i32* %stack_var_-216 to i8*
  %v2_ef34 = ptrtoint i32* %stack_var_-44 to i32
  %v2_ef44 = ptrtoint i32* %stack_var_-48 to i32
  %v2_ef58 = ptrtoint i32* %stack_var_-52 to i32
  %v2_ef6c = ptrtoint i32* %stack_var_-40 to i32
  %v2_ef84 = ptrtoint i32* %stack_var_-56 to i32
  %v2_ee3c = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_ec7c

dec_label_pc_ec7c:                                ; preds = %dec_label_pc_ed34, %bb216
  %stack_var_-8420.0 = phi i32 [ %v0_ec70, %bb216 ], [ %stack_var_-8420.3, %dec_label_pc_ed34 ]
  %v1_ec80 = call i32 @function_121a4(i32 6)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ec8c = call i32 @function_120c0(i32 6, i32* null)
  store i32 %v3_ec8c, i32* @r0, align 4
  %v1_ec90 = call i32 @function_13898(i32 %v3_ec8c)
  store i32 %v1_ec90, i32* @sl, align 4
  %v2_ec94 = icmp eq i32 %v1_ec90, 0
  br i1 %v2_ec94, label %dec_label_pc_eaf4, label %dec_label_pc_ec9c

dec_label_pc_ec9c:                                ; preds = %dec_label_pc_ec7c
  %v1_eca0 = call i32 @function_120ec(i32 6)
  %v0_eca4117 = load i32, i32* @sl, align 4
  %v1_eca8118 = inttoptr i32 %v0_eca4117 to i32*
  %v2_eca8119 = call i32 @function_13994(i32* %v1_eca8118)
  %v2_ecac121 = icmp eq i32 %v2_eca8119, 0
  br i1 %v2_ecac121, label %dec_label_pc_ed34, label %dec_label_pc_ecb4.preheader

dec_label_pc_ecb4.preheader:                      ; preds = %dec_label_pc_ec9c, %dec_label_pc_eca4.backedge
  %v0_ecb4133 = phi i32 [ %v2_eca8, %dec_label_pc_eca4.backedge ], [ %v2_eca8119, %dec_label_pc_ec9c ]
  %stack_var_-8420.1122 = phi i32 [ %stack_var_-8420.1.be, %dec_label_pc_eca4.backedge ], [ %stack_var_-8420.0, %dec_label_pc_ec9c ]
  br label %dec_label_pc_ecb4

dec_label_pc_ecb4:                                ; preds = %dec_label_pc_ecb4.preheader, %dec_label_pc_ed1c
  %v0_ecc4 = phi i32 [ %v2_ed28, %dec_label_pc_ed1c ], [ %v0_ecb4133, %dec_label_pc_ecb4.preheader ]
  %stack_var_-8420.2 = phi i32 [ %v1_ecd8, %dec_label_pc_ed1c ], [ %stack_var_-8420.1122, %dec_label_pc_ecb4.preheader ]
  %v1_ecb4 = add i32 %v0_ecc4, 11
  %v2_ecb4 = inttoptr i32 %v1_ecb4 to i8*
  %v3_ecb4 = load i8, i8* %v2_ecb4, align 1
  %v4_ecb4 = zext i8 %v3_ecb4 to i32
  %v1_ecb8 = add nsw i32 %v4_ecb4, -48
  store i32 %v1_ecb8, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_ecb8, 9
  br i1 %tmp, label %dec_label_pc_eca4.backedge, label %dec_label_pc_ecc4

dec_label_pc_ecc4:                                ; preds = %dec_label_pc_ecb4
  store i32 %v1_ecb4, i32* @r6, align 4
  %v2_eccc = call i32 @function_14684(i8* %v2_ecb4)
  %v0_ecd4 = load i32, i32* @r5, align 4
  %v1_ecd8 = add i32 %stack_var_-8420.2, 1
  store i32 %v1_ecd8, i32* %r2.global-to-local, align 4
  store i32 %v2_eccc, i32* @r7, align 4
  %v5_ece4 = icmp slt i32 %v0_ecd4, %v2_eccc
  %v2_ed44 = call i32 @function_13760(i32* null)
  br i1 %v5_ece4, label %dec_label_pc_ed40, label %dec_label_pc_ece8

dec_label_pc_ece8:                                ; preds = %dec_label_pc_ecc4
  %v0_ecf0 = load i32, i32* @r4, align 4
  %v2_ecf0 = sub i32 %v2_ed44, %v0_ecf0
  %v7_ecf8 = icmp slt i32 %v2_ecf0, 601
  br i1 %v7_ecf8, label %dec_label_pc_ed00, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_ece8
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_eca4.backedge

dec_label_pc_ed00:                                ; preds = %dec_label_pc_ece8
  %v0_ed00 = load i32, i32* @r7, align 4
  %v7_ed04 = icmp slt i32 %v0_ed00, 401
  br i1 %v7_ed04, label %dec_label_pc_eca4.backedge, label %dec_label_pc_ed08

dec_label_pc_ed08:                                ; preds = %dec_label_pc_ed00
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_ed10 = call i32 @function_131ec(i32 %v1_ecd8, i32 10)
  %v2_ed14 = icmp eq i32 %v2_ed10, 0
  br i1 %v2_ed14, label %dec_label_pc_ed1c, label %dec_label_pc_eca4.backedge

dec_label_pc_ed1c:                                ; preds = %dec_label_pc_ed08
  %v1_ed20 = call i32 @function_148c4(i32 1)
  %v0_ed24 = load i32, i32* @sl, align 4
  %v1_ed28 = inttoptr i32 %v0_ed24 to i32*
  %v2_ed28 = call i32 @function_13994(i32* %v1_ed28)
  %v2_ed2c = icmp eq i32 %v2_ed28, 0
  br i1 %v2_ed2c, label %dec_label_pc_ed34, label %dec_label_pc_ecb4

dec_label_pc_ed34:                                ; preds = %dec_label_pc_eca4.backedge, %dec_label_pc_ed1c, %dec_label_pc_ec9c
  %stack_var_-8420.3 = phi i32 [ %stack_var_-8420.0, %dec_label_pc_ec9c ], [ %v1_ecd8, %dec_label_pc_ed1c ], [ %stack_var_-8420.1.be, %dec_label_pc_eca4.backedge ]
  %v0_ed34 = load i32, i32* @sl, align 4
  %v1_ed38 = inttoptr i32 %v0_ed34 to i32*
  %v2_ed38 = call i32 @function_137e4(i32* %v1_ed38)
  br label %dec_label_pc_ec7c

dec_label_pc_ed40:                                ; preds = %dec_label_pc_ecc4
  %v1_ed50 = call i32 @function_121a4(i32 6)
  %v1_ed58 = call i32 @function_121a4(i32 7)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ed64 = call i32 @function_120c0(i32 6, i32* null)
  store i32 %v3_ed64, i32* %r1.global-to-local, align 4
  store i32 %v2_ed70, i32* @r0, align 4
  %v3_ed74 = call i32 @function_12af8(i8* %v2_ed74, i32 %v3_ed64)
  store i32 %v2_ed70, i32* %r3.global-to-local, align 4
  %v2_ed80 = add i32 %v3_ed74, %v2_ed70
  store i32 %v2_ed80, i32* %r5.global-to-local, align 4
  %v0_ed84 = load i32, i32* @r6, align 4
  store i32 %v0_ed84, i32* %r1.global-to-local, align 4
  store i32 %v2_ed80, i32* @r0, align 4
  %v2_ed8c = inttoptr i32 %v2_ed80 to i8*
  %v3_ed8c = call i32 @function_12af8(i8* %v2_ed8c, i32 %v0_ed84)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ed9c = call i32 @function_120c0(i32 7, i32* null)
  store i32 %v3_ed9c, i32* %r1.global-to-local, align 4
  %v0_eda4 = load i32, i32* %r5.global-to-local, align 4
  %v2_eda4 = add i32 %v3_ed8c, %v0_eda4
  store i32 %v2_eda4, i32* @r0, align 4
  %v2_eda8 = inttoptr i32 %v2_eda4 to i8*
  %v3_eda8 = call i32 @function_12af8(i8* %v2_eda8, i32 %v3_ed9c)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_edb4 = call i32 @function_120c0(i32 6, i32* null)
  store i32 %v3_edb4, i32* %r1.global-to-local, align 4
  store i32 %v2_edc0, i32* @r0, align 4
  %v3_edc4 = call i32 @function_12af8(i8* %v2_edc4, i32 %v3_edb4)
  %v2_edd0 = add i32 %v3_edc4, %v2_edc0
  store i32 %v2_edd0, i32* @r5, align 4
  %v0_edd4 = load i32, i32* @r6, align 4
  store i32 %v0_edd4, i32* %r1.global-to-local, align 4
  store i32 %v2_edd0, i32* @r0, align 4
  %v2_eddc = inttoptr i32 %v2_edd0 to i8*
  %v3_eddc = call i32 @function_12af8(i8* %v2_eddc, i32 %v0_edd4)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_eddc, i32* @r4, align 4
  %v3_edec = call i32 @function_120c0(i32 11, i32* null)
  store i32 %v3_edec, i32* %r1.global-to-local, align 4
  %v0_edf4 = load i32, i32* @r5, align 4
  %v1_edf4 = load i32, i32* @r4, align 4
  %v2_edf4 = add i32 %v1_edf4, %v0_edf4
  store i32 %v2_edf4, i32* @r0, align 4
  %v2_edf8 = inttoptr i32 %v2_edf4 to i8*
  %v3_edf8 = call i32 @function_12af8(i8* %v2_edf8, i32 %v3_edec)
  %v1_ee00 = call i32 @function_120ec(i32 6)
  %v1_ee08 = call i32 @function_120ec(i32 7)
  store i32 4095, i32* %r2.global-to-local, align 4
  %v2_ee1c = load i32, i32* %stack_var_-8428, align 4
  store i32 %v2_ee1c, i32* %r1.global-to-local, align 4
  %v4_ee20 = call i32 @function_13684(i8* %v2_ed74, i32 %v2_ee1c, i32 4095)
  %v7_ee28 = icmp eq i32 %v4_ee20, -1
  store i32 %v4_ee20, i32* @r5, align 4
  store i32 -4276, i32* @r2, align 4
  br i1 %v7_ee28, label %dec_label_pc_eef0, label %dec_label_pc_ee38

dec_label_pc_ee38:                                ; preds = %dec_label_pc_ed40
  store i32 %v2_ee3c, i32* %r1.global-to-local, align 4
  %v2_ee40 = add i32 %v4_ee20, %v2_ee3c
  store i32 %v2_ee40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_ee48 = add i32 %v2_ee40, -4276
  %v5_ee48 = inttoptr i32 %v4_ee48 to i8*
  store i8 0, i8* %v5_ee48, align 1
  %v1_ee50 = call i32 @function_121a4(i32 10)
  %v0_ee54 = load i32, i32* @r4, align 4
  store i32 %v0_ee54, i32* %r1.global-to-local, align 4
  %v2_ee5c = inttoptr i32 %v0_ee54 to i32*
  %v3_ee5c = call i32 @function_120c0(i32 10, i32* %v2_ee5c)
  %v0_ee60 = load i32, i32* @r5, align 4
  %v1_ee60 = add i32 %v0_ee60, -1
  store i32 %v1_ee60, i32* @r1, align 4
  store i32 %v3_ee5c, i32* %r2.global-to-local, align 4
  %v2_ee68 = load i32, i32* %stack_var_-8428, align 4
  %v3_ee6c = inttoptr i32 %v2_ee68 to i8*
  %v4_ee6c = call i32 @function_12e24(i8* %v3_ee6c, i32 %v1_ee60, i32 %v3_ee5c)
  %v7_ee70 = icmp eq i32 %v4_ee6c, -1
  br i1 %v7_ee70, label %dec_label_pc_ee8c, label %dec_label_pc_ee78

dec_label_pc_ee78:                                ; preds = %dec_label_pc_ee38
  %v2_ee78 = load i32, i32* %stack_var_-8428, align 4
  %v1_ee7c = inttoptr i32 %v2_ee78 to i8*
  %v2_ee7c = call i32 @function_1378c(i8* %v1_ee7c)
  %v0_ee80 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_ee88 = call i32 @function_13590(i32 %v0_ee80, i32 9)
  br label %dec_label_pc_ee8c

dec_label_pc_ee8c:                                ; preds = %dec_label_pc_ee38, %dec_label_pc_ee78
  %v1_ee90 = call i32 @function_120ec(i32 10)
  %v0_ee94 = call i32 @function_134e8()
  %v0_ee98 = load i32, i32* @r7, align 4
  %v9_ee98 = icmp eq i32 %v0_ee98, %v0_ee94
  br i1 %v9_ee98, label %dec_label_pc_eec4, label %dec_label_pc_eea0

dec_label_pc_eea0:                                ; preds = %dec_label_pc_ee8c
  %v0_eea0 = call i32 @function_13514()
  %v0_eea4 = load i32, i32* @r7, align 4
  %v9_eea4 = icmp eq i32 %v0_eea4, %v0_eea0
  br i1 %v9_eea4, label %dec_label_pc_eec4, label %dec_label_pc_eeac

dec_label_pc_eeac:                                ; preds = %dec_label_pc_eea0
  store i32 ptrtoint (i32* @global_var_1eae0.104 to i32), i32* %r2.global-to-local, align 4
  %v2_eeb0 = load i32, i32* %stack_var_-8428, align 4
  %v2_eeb4 = load i32, i32* @global_var_1eae0.104, align 4
  store i32 %v2_eeb4, i32* %r1.global-to-local, align 4
  %v2_eeb8 = inttoptr i32 %v2_eeb0 to i8*
  %v3_eeb8 = call i32 @function_12eb0(i8* %v2_eeb8, i32 %v2_eeb4)
  %v2_eebc = icmp eq i32 %v3_eeb8, 0
  br i1 %v2_eebc, label %dec_label_pc_eed0, label %dec_label_pc_eeac.dec_label_pc_eec4_crit_edge

dec_label_pc_eeac.dec_label_pc_eec4_crit_edge:    ; preds = %dec_label_pc_eeac
  %v0_eec8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_eec4

dec_label_pc_eec4:                                ; preds = %dec_label_pc_eeac.dec_label_pc_eec4_crit_edge, %dec_label_pc_eea0, %dec_label_pc_ee8c
  %v0_eec8 = phi i32 [ %v0_eec8.pre, %dec_label_pc_eeac.dec_label_pc_eec4_crit_edge ], [ %v0_eea0, %dec_label_pc_eea0 ], [ %v0_ee94, %dec_label_pc_ee8c ]
  store i32 %v2_ed44, i32* @r4, align 4
  store i32 %v0_eec8, i32* @r5, align 4
  br label %dec_label_pc_eca4.backedge

dec_label_pc_eca4.backedge:                       ; preds = %dec_label_pc_ed08, %dec_label_pc_ed00, %dec_label_pc_ecb4, %dec_label_pc_eec4, %dec_label_pc_f174, %.thread11
  %stack_var_-8420.1.be = phi i32 [ %v1_ecd8, %dec_label_pc_f174 ], [ %v1_ecd8, %dec_label_pc_eec4 ], [ %v1_ecd8, %.thread11 ], [ %stack_var_-8420.2, %dec_label_pc_ecb4 ], [ %v1_ecd8, %dec_label_pc_ed00 ], [ %v1_ecd8, %dec_label_pc_ed08 ]
  %v0_eca4 = load i32, i32* @sl, align 4
  %v1_eca8 = inttoptr i32 %v0_eca4 to i32*
  %v2_eca8 = call i32 @function_13994(i32* %v1_eca8)
  %v2_ecac = icmp eq i32 %v2_eca8, 0
  br i1 %v2_ecac, label %dec_label_pc_ed34, label %dec_label_pc_ecb4.preheader

dec_label_pc_eed0:                                ; preds = %dec_label_pc_eeac
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_eed4 = load i32, i32* %stack_var_-8428, align 4
  %v2_eed8 = inttoptr i32 %v2_eed4 to i8*
  %v3_eed8 = call i32 @function_135bc(i8* %v2_eed8, i32 0)
  %v7_eedc = icmp eq i32 %v3_eed8, -1
  store i32 %v3_eed8, i32* @r4, align 4
  br i1 %v7_eedc, label %dec_label_pc_f1a8, label %dec_label_pc_eee8

dec_label_pc_eee8:                                ; preds = %dec_label_pc_eed0, %dec_label_pc_f1a8
  %v0_eee8 = phi i32 [ %v3_eed8, %dec_label_pc_eed0 ], [ %v0_eee8.pre, %dec_label_pc_f1a8 ]
  %v1_eeec = call i32 @function_13490(i32 %v0_eee8)
  br label %dec_label_pc_eef0

dec_label_pc_eef0:                                ; preds = %dec_label_pc_ed40, %dec_label_pc_eee8
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_eefc = call i32 @function_135bc(i8* %v2_ed74, i32 0)
  %v7_ef00 = icmp eq i32 %v3_eefc, -1
  br i1 %v7_ef00, label %dec_label_pc_f174, label %dec_label_pc_ef0c

dec_label_pc_ef0c:                                ; preds = %dec_label_pc_eef0
  %v1_ef10 = call i32 @function_121a4(i32 12)
  %v1_ef18 = call i32 @function_121a4(i32 13)
  %v1_ef20 = call i32 @function_121a4(i32 14)
  %v1_ef28 = call i32 @function_121a4(i32 15)
  %v1_ef30 = call i32 @function_121a4(i32 16)
  store i32 %v2_ef34, i32* %r1.global-to-local, align 4
  %v3_ef3c = call i32 @function_120c0(i32 12, i32* nonnull %stack_var_-44)
  store i32 %v2_ef44, i32* %r1.global-to-local, align 4
  store i32 %v3_ef3c, i32* @r5, align 4
  %v3_ef50 = call i32 @function_120c0(i32 13, i32* nonnull %stack_var_-48)
  store i32 %v2_ef58, i32* %r1.global-to-local, align 4
  store i32 %v3_ef50, i32* @r6, align 4
  %v3_ef64 = call i32 @function_120c0(i32 14, i32* nonnull %stack_var_-52)
  store i32 %v2_ef6c, i32* %r1.global-to-local, align 4
  store i32 %v3_ef64, i32* @sb, align 4
  %v3_ef78 = call i32 @function_120c0(i32 15, i32* nonnull %stack_var_-40)
  store i32 %v3_ef78, i32* @fp, align 4
  store i32 %v2_ef84, i32* %r1.global-to-local, align 4
  %v3_ef8c = call i32 @function_120c0(i32 16, i32* nonnull %stack_var_-56)
  store i32 %v2_ebac, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_efa0114 = call i32 @function_13658(i32 %v3_eefc, i32* nonnull %stack_var_-8408, i32 4096)
  %tmp217 = icmp slt i32 %v4_efa0114, 1
  br i1 %tmp217, label %dec_label_pc_f1b8, label %dec_label_pc_efac

dec_label_pc_efac:                                ; preds = %dec_label_pc_ef0c, %dec_label_pc_ef94.backedge
  %v0_f034105 = phi i32 [ %v4_efa0, %dec_label_pc_ef94.backedge ], [ %v4_efa0114, %dec_label_pc_ef0c ]
  store i32 %v2_eb00, i32* %r3.global-to-local, align 4
  %v3_efb0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_efb0, i32* @r4, align 4
  %v5_efb8 = icmp slt i32 %v0_f034105, %v3_efb0
  br i1 %v5_efb8, label %dec_label_pc_efc8, label %dec_label_pc_f074.lr.ph

dec_label_pc_f074.lr.ph:                          ; preds = %dec_label_pc_efac
  %v1_f06c70 = add i32 %v0_f034105, -1
  store i32 %v1_f06c70, i32* %r1.global-to-local, align 4
  %v0_f074.pre = load i32, i32* @r5, align 4
  %v1_f078.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f074

dec_label_pc_efc8:                                ; preds = %dec_label_pc_f06c.backedge, %dec_label_pc_efac
  %v3_efcc = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_efcc, i32* @r4, align 4
  %v5_efd4 = icmp slt i32 %v0_f034105, %v3_efcc
  br i1 %v5_efd4, label %dec_label_pc_efe4, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_efc8
  %v1_f0a079 = add i32 %v0_f034105, -1
  store i32 %v1_f0a079, i32* %r1.global-to-local, align 4
  %v2_f0a080 = icmp eq i32 %v0_f034105, 0
  br i1 %v2_f0a080, label %dec_label_pc_efe4, label %dec_label_pc_f0a8.lr.ph

dec_label_pc_f0a8.lr.ph:                          ; preds = %.thread28
  %v0_f0a8.pre = load i32, i32* @r6, align 4
  %v1_f0ac.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f0a8

dec_label_pc_efe4:                                ; preds = %dec_label_pc_f0a0.backedge, %.thread28, %dec_label_pc_efc8
  store i32 %v2_eb00, i32* %r1.global-to-local, align 4
  %v3_efe8 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_efe8, i32* @r4, align 4
  %v5_eff0 = icmp slt i32 %v0_f034105, %v3_efe8
  br i1 %v5_eff0, label %dec_label_pc_f000, label %.thread37

.thread37:                                        ; preds = %dec_label_pc_efe4
  %v1_f0d488 = add i32 %v0_f034105, -1
  store i32 %v1_f0d488, i32* %r1.global-to-local, align 4
  %v2_f0d489 = icmp eq i32 %v0_f034105, 0
  br i1 %v2_f0d489, label %dec_label_pc_f000, label %dec_label_pc_f0dc.lr.ph

dec_label_pc_f0dc.lr.ph:                          ; preds = %.thread37
  %v0_f0dc.pre = load i32, i32* @sb, align 4
  %v1_f0e0.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f0dc

dec_label_pc_f000:                                ; preds = %dec_label_pc_f0d4.backedge, %.thread37, %dec_label_pc_efe4
  store i32 %v2_eb00, i32* %r2.global-to-local, align 4
  %v3_f004 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_f004, i32* @r4, align 4
  %v5_f00c = icmp slt i32 %v0_f034105, %v3_f004
  br i1 %v5_f00c, label %dec_label_pc_f01c, label %.thread46

.thread46:                                        ; preds = %dec_label_pc_f000
  %v1_f10897 = add i32 %v0_f034105, -1
  store i32 %v1_f10897, i32* %r1.global-to-local, align 4
  %v2_f10898 = icmp eq i32 %v0_f034105, 0
  br i1 %v2_f10898, label %dec_label_pc_f01c, label %dec_label_pc_f110.lr.ph

dec_label_pc_f110.lr.ph:                          ; preds = %.thread46
  %v0_f110.pre = load i32, i32* @fp, align 4
  %v1_f114.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f110

dec_label_pc_f01c:                                ; preds = %dec_label_pc_f108.backedge, %.thread46, %dec_label_pc_f000
  store i32 %v2_eb00, i32* %r3.global-to-local, align 4
  %v3_f020 = load i32, i32* %stack_var_-56, align 4
  %v5_f028 = icmp slt i32 %v0_f034105, %v3_f020
  br i1 %v5_f028, label %dec_label_pc_ef94.backedge, label %.thread52

dec_label_pc_ef94.backedge:                       ; preds = %dec_label_pc_f058, %.thread52, %dec_label_pc_f01c
  store i32 %v2_ebac, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_efa0 = call i32 @function_13658(i32 %v3_eefc, i32* nonnull %stack_var_-8408, i32 4096)
  %tmp218 = icmp slt i32 %v4_efa0, 1
  br i1 %tmp218, label %dec_label_pc_f1b8, label %dec_label_pc_efac

.thread52:                                        ; preds = %dec_label_pc_f01c
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_f034107 = icmp eq i32 %v0_f034105, 0
  br i1 %v2_f034107, label %dec_label_pc_ef94.backedge, label %dec_label_pc_f03c.lr.ph

dec_label_pc_f03c.lr.ph:                          ; preds = %.thread52
  %v1_f044.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f03c

dec_label_pc_f03c:                                ; preds = %dec_label_pc_f058, %dec_label_pc_f03c.lr.ph
  %v0_f034.in = phi i32 [ %v0_f034105, %dec_label_pc_f03c.lr.ph ], [ %v0_f034, %dec_label_pc_f058 ]
  %v0_f058 = phi i32 [ 0, %dec_label_pc_f03c.lr.ph ], [ %v1_f058, %dec_label_pc_f058 ]
  %v0_f04c = phi i32 [ 0, %dec_label_pc_f03c.lr.ph ], [ %v1_f04c., %dec_label_pc_f058 ]
  %v0_f034 = add i32 %v0_f034.in, -1
  store i32 %v3_ef8c, i32* %r3.global-to-local, align 4
  %v2_f040 = add i32 %v0_f04c, %v3_ef8c
  %v3_f040 = inttoptr i32 %v2_f040 to i8*
  %v4_f040 = load i8, i8* %v3_f040, align 1
  %v6_f040 = zext i8 %v4_f040 to i32
  store i32 %v6_f040, i32* %r2.global-to-local, align 4
  %v2_f044 = add i32 %v0_f058, %v1_f044.pre
  %v3_f044 = inttoptr i32 %v2_f044 to i8*
  %v4_f044 = load i8, i8* %v3_f044, align 1
  %v6_f044 = zext i8 %v4_f044 to i32
  store i32 %v6_f044, i32* %r3.global-to-local, align 4
  %v9_f048 = icmp eq i8 %v4_f044, %v4_f040
  %v1_f04c = add i32 %v0_f04c, 1
  %v1_f04c. = select i1 %v9_f048, i32 %v1_f04c, i32 0
  store i32 %v1_f04c., i32* %r1.global-to-local, align 4
  br i1 %v9_f048, label %dec_label_pc_f130, label %dec_label_pc_f058

dec_label_pc_f058:                                ; preds = %dec_label_pc_f130, %dec_label_pc_f03c
  %v1_f058 = add i32 %v0_f058, 1
  %v2_f034 = icmp eq i32 %v0_f034, 0
  br i1 %v2_f034, label %dec_label_pc_ef94.backedge, label %dec_label_pc_f03c

dec_label_pc_f060:                                ; preds = %dec_label_pc_f074
  %v9_f060 = icmp eq i32 %v3_efb0, %v1_f080.
  br i1 %v9_f060, label %dec_label_pc_f138, label %dec_label_pc_f06c.backedge

dec_label_pc_f06c.backedge:                       ; preds = %dec_label_pc_f074, %dec_label_pc_f060
  %storemerge125 = add i32 %storemerge125.in, 1
  %v1_f06c = add i32 %v0_f06c, -1
  store i32 %v1_f06c, i32* %r1.global-to-local, align 4
  %v2_f06c = icmp eq i32 %v0_f06c, 0
  br i1 %v2_f06c, label %dec_label_pc_efc8, label %dec_label_pc_f074

dec_label_pc_f074:                                ; preds = %dec_label_pc_f06c.backedge, %dec_label_pc_f074.lr.ph
  %v0_f06c = phi i32 [ %v1_f06c70, %dec_label_pc_f074.lr.ph ], [ %v1_f06c, %dec_label_pc_f06c.backedge ]
  %storemerge125.in = phi i32 [ 0, %dec_label_pc_f074.lr.ph ], [ %storemerge125, %dec_label_pc_f06c.backedge ]
  %v0_f080 = phi i32 [ 0, %dec_label_pc_f074.lr.ph ], [ %v1_f080., %dec_label_pc_f06c.backedge ]
  %v2_f074 = add i32 %v0_f080, %v0_f074.pre
  %v3_f074 = inttoptr i32 %v2_f074 to i8*
  %v4_f074 = load i8, i8* %v3_f074, align 1
  %v6_f074 = zext i8 %v4_f074 to i32
  store i32 %v6_f074, i32* %r2.global-to-local, align 4
  %v2_f078 = add i32 %storemerge125.in, %v1_f078.pre
  %v3_f078 = inttoptr i32 %v2_f078 to i8*
  %v4_f078 = load i8, i8* %v3_f078, align 1
  %v6_f078 = zext i8 %v4_f078 to i32
  store i32 %v6_f078, i32* %r3.global-to-local, align 4
  %v9_f07c = icmp eq i8 %v4_f078, %v4_f074
  %v1_f080 = add i32 %v0_f080, 1
  %v1_f080. = select i1 %v9_f07c, i32 %v1_f080, i32 0
  br i1 %v9_f07c, label %dec_label_pc_f060, label %dec_label_pc_f06c.backedge

dec_label_pc_f094:                                ; preds = %dec_label_pc_f0a8
  %v9_f094 = icmp eq i32 %v3_efcc, %v1_f0b4.
  br i1 %v9_f094, label %dec_label_pc_f138, label %dec_label_pc_f0a0.backedge

dec_label_pc_f0a0.backedge:                       ; preds = %dec_label_pc_f0a8, %dec_label_pc_f094
  %storemerge124 = add i32 %storemerge124.in, 1
  %v1_f0a0 = add i32 %v0_f0a0, -1
  store i32 %v1_f0a0, i32* %r1.global-to-local, align 4
  %v2_f0a0 = icmp eq i32 %v0_f0a0, 0
  br i1 %v2_f0a0, label %dec_label_pc_efe4, label %dec_label_pc_f0a8

dec_label_pc_f0a8:                                ; preds = %dec_label_pc_f0a0.backedge, %dec_label_pc_f0a8.lr.ph
  %v0_f0a0 = phi i32 [ %v1_f0a079, %dec_label_pc_f0a8.lr.ph ], [ %v1_f0a0, %dec_label_pc_f0a0.backedge ]
  %storemerge124.in = phi i32 [ 0, %dec_label_pc_f0a8.lr.ph ], [ %storemerge124, %dec_label_pc_f0a0.backedge ]
  %v0_f0b4 = phi i32 [ 0, %dec_label_pc_f0a8.lr.ph ], [ %v1_f0b4., %dec_label_pc_f0a0.backedge ]
  %v2_f0a8 = add i32 %v0_f0b4, %v0_f0a8.pre
  %v3_f0a8 = inttoptr i32 %v2_f0a8 to i8*
  %v4_f0a8 = load i8, i8* %v3_f0a8, align 1
  %v6_f0a8 = zext i8 %v4_f0a8 to i32
  store i32 %v6_f0a8, i32* %r2.global-to-local, align 4
  %v2_f0ac = add i32 %storemerge124.in, %v1_f0ac.pre
  %v3_f0ac = inttoptr i32 %v2_f0ac to i8*
  %v4_f0ac = load i8, i8* %v3_f0ac, align 1
  %v6_f0ac = zext i8 %v4_f0ac to i32
  store i32 %v6_f0ac, i32* %r3.global-to-local, align 4
  %v9_f0b0 = icmp eq i8 %v4_f0ac, %v4_f0a8
  %v1_f0b4 = add i32 %v0_f0b4, 1
  %v1_f0b4. = select i1 %v9_f0b0, i32 %v1_f0b4, i32 0
  br i1 %v9_f0b0, label %dec_label_pc_f094, label %dec_label_pc_f0a0.backedge

dec_label_pc_f0c8:                                ; preds = %dec_label_pc_f0dc
  %v9_f0c8 = icmp eq i32 %v3_efe8, %v1_f0e8.
  br i1 %v9_f0c8, label %dec_label_pc_f138, label %dec_label_pc_f0d4.backedge

dec_label_pc_f0d4.backedge:                       ; preds = %dec_label_pc_f0dc, %dec_label_pc_f0c8
  %storemerge123 = add i32 %storemerge123.in, 1
  %v1_f0d4 = add i32 %v0_f0d4, -1
  store i32 %v1_f0d4, i32* %r1.global-to-local, align 4
  %v2_f0d4 = icmp eq i32 %v0_f0d4, 0
  br i1 %v2_f0d4, label %dec_label_pc_f000, label %dec_label_pc_f0dc

dec_label_pc_f0dc:                                ; preds = %dec_label_pc_f0d4.backedge, %dec_label_pc_f0dc.lr.ph
  %v0_f0d4 = phi i32 [ %v1_f0d488, %dec_label_pc_f0dc.lr.ph ], [ %v1_f0d4, %dec_label_pc_f0d4.backedge ]
  %storemerge123.in = phi i32 [ 0, %dec_label_pc_f0dc.lr.ph ], [ %storemerge123, %dec_label_pc_f0d4.backedge ]
  %v0_f0e8 = phi i32 [ 0, %dec_label_pc_f0dc.lr.ph ], [ %v1_f0e8., %dec_label_pc_f0d4.backedge ]
  %v2_f0dc = add i32 %v0_f0e8, %v0_f0dc.pre
  %v3_f0dc = inttoptr i32 %v2_f0dc to i8*
  %v4_f0dc = load i8, i8* %v3_f0dc, align 1
  %v6_f0dc = zext i8 %v4_f0dc to i32
  store i32 %v6_f0dc, i32* %r2.global-to-local, align 4
  %v2_f0e0 = add i32 %storemerge123.in, %v1_f0e0.pre
  %v3_f0e0 = inttoptr i32 %v2_f0e0 to i8*
  %v4_f0e0 = load i8, i8* %v3_f0e0, align 1
  %v6_f0e0 = zext i8 %v4_f0e0 to i32
  store i32 %v6_f0e0, i32* %r3.global-to-local, align 4
  %v9_f0e4 = icmp eq i8 %v4_f0e0, %v4_f0dc
  %v1_f0e8 = add i32 %v0_f0e8, 1
  %v1_f0e8. = select i1 %v9_f0e4, i32 %v1_f0e8, i32 0
  br i1 %v9_f0e4, label %dec_label_pc_f0c8, label %dec_label_pc_f0d4.backedge

dec_label_pc_f0fc:                                ; preds = %dec_label_pc_f110
  %v9_f0fc = icmp eq i32 %v3_f004, %v1_f11c.
  br i1 %v9_f0fc, label %dec_label_pc_f138, label %dec_label_pc_f108.backedge

dec_label_pc_f108.backedge:                       ; preds = %dec_label_pc_f110, %dec_label_pc_f0fc
  %storemerge = add i32 %storemerge.in, 1
  %v1_f108 = add i32 %v0_f108, -1
  store i32 %v1_f108, i32* %r1.global-to-local, align 4
  %v2_f108 = icmp eq i32 %v0_f108, 0
  br i1 %v2_f108, label %dec_label_pc_f01c, label %dec_label_pc_f110

dec_label_pc_f110:                                ; preds = %dec_label_pc_f108.backedge, %dec_label_pc_f110.lr.ph
  %v0_f108 = phi i32 [ %v1_f10897, %dec_label_pc_f110.lr.ph ], [ %v1_f108, %dec_label_pc_f108.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_f110.lr.ph ], [ %storemerge, %dec_label_pc_f108.backedge ]
  %v0_f11c = phi i32 [ 0, %dec_label_pc_f110.lr.ph ], [ %v1_f11c., %dec_label_pc_f108.backedge ]
  %v2_f110 = add i32 %v0_f11c, %v0_f110.pre
  %v3_f110 = inttoptr i32 %v2_f110 to i8*
  %v4_f110 = load i8, i8* %v3_f110, align 1
  %v6_f110 = zext i8 %v4_f110 to i32
  store i32 %v6_f110, i32* %r2.global-to-local, align 4
  %v2_f114 = add i32 %storemerge.in, %v1_f114.pre
  %v3_f114 = inttoptr i32 %v2_f114 to i8*
  %v4_f114 = load i8, i8* %v3_f114, align 1
  %v6_f114 = zext i8 %v4_f114 to i32
  store i32 %v6_f114, i32* %r3.global-to-local, align 4
  %v9_f118 = icmp eq i8 %v4_f114, %v4_f110
  %v1_f11c = add i32 %v0_f11c, 1
  %v1_f11c. = select i1 %v9_f118, i32 %v1_f11c, i32 0
  br i1 %v9_f118, label %dec_label_pc_f0fc, label %dec_label_pc_f108.backedge

dec_label_pc_f130:                                ; preds = %dec_label_pc_f03c
  %v9_f130 = icmp eq i32 %v3_f020, %v1_f04c.
  br i1 %v9_f130, label %dec_label_pc_f138, label %dec_label_pc_f058

dec_label_pc_f138:                                ; preds = %dec_label_pc_f060, %dec_label_pc_f094, %dec_label_pc_f0c8, %dec_label_pc_f0fc, %dec_label_pc_f130
  %v1_f13c = call i32 @function_120ec(i32 12)
  %v1_f144 = call i32 @function_120ec(i32 13)
  %v1_f14c = call i32 @function_120ec(i32 14)
  %v1_f154 = call i32 @function_120ec(i32 15)
  %v1_f15c = call i32 @function_120ec(i32 16)
  %v1_f164 = call i32 @function_13490(i32 %v3_eefc)
  %v0_f168 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_f170 = call i32 @function_13590(i32 %v0_f168, i32 9)
  br label %dec_label_pc_f174

dec_label_pc_f174:                                ; preds = %dec_label_pc_eef0, %dec_label_pc_f1b8, %dec_label_pc_f138
  store i32 64, i32* %r1.global-to-local, align 4
  %v2_f180 = call i32 @function_12b70(i32 %v2_ed70, i32 64)
  store i32 64, i32* %r1.global-to-local, align 4
  %v2_f190 = call i32 @function_12b70(i32 %v2_edc0, i32 64)
  %v1_f198 = call i32 @function_148c4(i32 1)
  store i32 %v2_ed44, i32* @r4, align 4
  %v0_f1a0 = load i32, i32* @r7, align 4
  store i32 %v0_f1a0, i32* @r5, align 4
  br label %dec_label_pc_eca4.backedge

dec_label_pc_f1a8:                                ; preds = %dec_label_pc_eed0
  %v0_f1a8 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_f1b0 = call i32 @function_13590(i32 %v0_f1a8, i32 9)
  %v0_eee8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_eee8

dec_label_pc_f1b8:                                ; preds = %dec_label_pc_ef94.backedge, %dec_label_pc_ef0c
  %v1_f1bc = call i32 @function_120ec(i32 12)
  %v1_f1c4 = call i32 @function_120ec(i32 13)
  %v1_f1cc = call i32 @function_120ec(i32 14)
  %v1_f1d4 = call i32 @function_120ec(i32 15)
  %v1_f1dc = call i32 @function_120ec(i32 16)
  %v1_f1e4 = call i32 @function_13490(i32 %v3_eefc)
  br label %dec_label_pc_f174

; uselistorder directives
  uselistorder i32 %v1_f11c., { 1, 0 }
  uselistorder i1 %v9_f118, { 1, 0 }
  uselistorder i32 %v0_f11c, { 1, 0 }
  uselistorder i32 %v1_f0e8., { 1, 0 }
  uselistorder i1 %v9_f0e4, { 1, 0 }
  uselistorder i32 %v0_f0e8, { 1, 0 }
  uselistorder i32 %v1_f0b4., { 1, 0 }
  uselistorder i1 %v9_f0b0, { 1, 0 }
  uselistorder i32 %v0_f0b4, { 1, 0 }
  uselistorder i32 %v1_f080., { 1, 0 }
  uselistorder i1 %v9_f07c, { 1, 0 }
  uselistorder i32 %v0_f080, { 1, 0 }
  uselistorder i32 %v1_f04c., { 1, 2, 0 }
  uselistorder i1 %v9_f048, { 1, 0 }
  uselistorder i32 %v0_f04c, { 1, 0 }
  uselistorder i32 %v0_f058, { 1, 0 }
  uselistorder i32 %v4_efa0, { 1, 0 }
  uselistorder i32 %v3_eefc, { 3, 2, 4, 1, 0 }
  uselistorder i32 %v3_eed8, { 1, 2, 0 }
  uselistorder i32 %v2_eca8, { 1, 0 }
  uselistorder i32 %stack_var_-8420.1.be, { 1, 0 }
  uselistorder i32 %v4_ee20, { 1, 2, 0 }
  uselistorder i32 %v2_ed28, { 1, 0 }
  uselistorder i32 %v1_ecd8, { 0, 1, 5, 4, 3, 2, 7, 8, 6 }
  uselistorder i32 %stack_var_-8420.0, { 1, 0 }
  uselistorder i32 %v2_edc0, { 1, 0, 2 }
  uselistorder i32 %v2_ed70, { 1, 0, 2, 3 }
  uselistorder i32 %v4_ec3c, { 1, 0 }
  uselistorder i32 %v3_ec08, { 2, 0, 1 }
  uselistorder i32 %v2_ebac, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v3_eb38, { 1, 2, 0 }
  uselistorder i32 %storemerge174, { 1, 0 }
  uselistorder i32 %v0_eac8, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-72, { 0, 2, 1 }
  uselistorder i32* %stack_var_-8408, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %stack_var_-40, { 1, 0, 2 }
  uselistorder i32* %stack_var_-56, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 6, 5, 17, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder i32* %r1.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 58, 14, 3, 2, 13, 1, 0, 57, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 29, 28, 30, 31, 32, 34, 33, 35, 36, 37, 39, 38, 40, 41, 42, 59, 43, 44, 45, 46, 48, 47, 49, 50, 51, 52, 53, 54, 55, 56 }
  uselistorder i32 (i8*, i32, i32)* @function_12e24, { 0, 1, 2, 3, 4, 5, 6, 21, 22, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i32 (i32*)* @function_13994, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_13898, { 2, 1, 0 }
  uselistorder i32* @global_var_1eae0.104, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_1eae4.96, { 0, 2, 1 }
  uselistorder label %dec_label_pc_f174, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f138, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_efac, { 1, 0 }
  uselistorder label %dec_label_pc_eef0, { 1, 0 }
  uselistorder label %dec_label_pc_eee8, { 1, 0 }
  uselistorder label %dec_label_pc_eca4.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_ee8c, { 1, 0 }
  uselistorder label %dec_label_pc_ecb4, { 1, 0 }
  uselistorder label %dec_label_pc_ecb4.preheader, { 1, 0 }
  uselistorder label %bb216, { 1, 0 }
  uselistorder label %dec_label_pc_eb64, { 1, 0 }
}

define i32 @function_f1f8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f1f8:
  store i32 ptrtoint (i32* @global_var_f380.106 to i32), i32* @global_var_1e8b4.108, align 4
  ret i32 %arg1
}

define i32 @function_f210(i32 %arg1) local_unnamed_addr {
dec_label_pc_f210:
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_f210 = load i32, i32* @r4, align 4
  %v6_f210 = load i32, i32* @r5, align 4
  %v9_f210 = load i32, i32* @r6, align 4
  %v15_f210 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_f22c = call i32 @function_13d90(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1e8ac.110 to i32), i32* @r6, align 4
  %v7_f234 = icmp eq i32 %v3_f22c, -1
  store i32 %v3_f22c, i32* @global_var_1e8ac.110, align 4
  br i1 %v7_f234, label %dec_label_pc_f2f4, label %dec_label_pc_f240

dec_label_pc_f240:                                ; preds = %dec_label_pc_f210
  %v0_f244 = load i32, i32* @r4, align 4
  %v6_f254 = call i32 @function_13d60(i32 %v3_f22c, i32 %v0_f244, i32 2, i32* nonnull %stack_var_-28, i32 4)
  %v2_f258 = load i32, i32* @global_var_1e8ac.110, align 4
  store i32 %v2_f258, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_f268 = call i32 @function_133a0(i32 %v2_f258, i32 3)
  %v1_f270 = or i32 %v2_f268, 2048
  store i32 %v1_f270, i32* @r2, align 4
  %v0_f274 = load i32, i32* @r4, align 4
  %v2_f278 = call i32 @function_133a0(i32 %v0_f274, i32 4)
  store i32 ptrtoint (i8** @global_var_1e8b8.112 to i32), i32* @r8, align 4
  %v2_f280 = load i8, i8* bitcast (i8** @global_var_1e8b8.112 to i8*), align 4
  %v2_f284 = icmp eq i8 %v2_f280, 0
  br i1 %v2_f284, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_f240
  br label %bb

.thread:                                          ; preds = %dec_label_pc_f240
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_f2bc = call i32 @function_13a64()
  %v0_f2c0 = load i32, i32* @r5, align 4
  %v2_f2c0 = inttoptr i32 %v0_f2bc to i32*
  store i32 %v0_f2c0, i32* %v2_f2c0, align 4
  %v2_f2c4 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_f2c4, i32* @r7, align 4
  store i32 %v0_f2bc, i32* @r4, align 4
  %v2_f2d0 = load i32, i32* @global_var_1e8ac.110, align 4
  %v3_f2d8 = bitcast i32* %stack_var_-44 to %sockaddr*
  %v4_f2d8 = call i32 @function_13bc0(i32 %v2_f2d0, %sockaddr* %v3_f2d8, i32 16)
  %v7_f2dc = icmp eq i32 %v4_f2d8, -1
  br i1 %v7_f2dc, label %dec_label_pc_f2fc, label %dec_label_pc_f2e4

dec_label_pc_f2e4:                                ; preds = %bb
  %v2_f2ec = load i32, i32* @global_var_1e8ac.110, align 4
  %v2_f2f0 = call i32 @function_13c74(i32 %v2_f2ec, i32 1)
  br label %dec_label_pc_f2f4

dec_label_pc_f2f4:                                ; preds = %dec_label_pc_f210, %dec_label_pc_f308, %dec_label_pc_f2e4
  %v20_f2f8 = phi i32 [ %v3_f22c, %dec_label_pc_f210 ], [ %v1_f358, %dec_label_pc_f308 ], [ %v2_f2f0, %dec_label_pc_f2e4 ]
  store i32 %v3_f210, i32* @r4, align 4
  store i32 %v6_f210, i32* @r5, align 4
  store i32 %v9_f210, i32* @r6, align 4
  store i32 %v15_f210, i32* @r8, align 4
  ret i32 %v20_f2f8

dec_label_pc_f2fc:                                ; preds = %bb
  %v0_f2fc = load i32, i32* @r4, align 4
  %v1_f2fc = inttoptr i32 %v0_f2fc to i32*
  %v2_f2fc = load i32, i32* %v1_f2fc, align 4
  %v7_f300 = icmp eq i32 %v2_f2fc, 99
  br i1 %v7_f300, label %dec_label_pc_f360, label %dec_label_pc_f308

dec_label_pc_f308:                                ; preds = %dec_label_pc_f360, %bb21, %dec_label_pc_f2fc
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_f320 = load i32, i32* @global_var_1e8ac.110, align 4
  %v4_f338 = call i32 @function_13bec(i32 %v2_f320, %sockaddr* %v3_f2d8, i32 16)
  %v1_f340 = call i32 @function_148c4(i32 5)
  %v2_f344 = load i32, i32* @global_var_1e8ac.110, align 4
  %v1_f348 = call i32 @function_13490(i32 %v2_f344)
  %v1_f354 = call i32 @function_e544(i32 58811)
  %v1_f358 = call i32 @function_f210(i32 %v1_f354)
  br label %dec_label_pc_f2f4

dec_label_pc_f360:                                ; preds = %dec_label_pc_f2fc
  %v2_f360 = load i8, i8* bitcast (i8** @global_var_1e8b8.112 to i8*), align 4
  %v3_f360 = zext i8 %v2_f360 to i32
  %v1_f364 = load i32, i32* @r5, align 4
  %v9_f364 = icmp eq i32 %v3_f360, %v1_f364
  br i1 %v9_f364, label %dec_label_pc_f308, label %bb21

bb21:                                             ; preds = %dec_label_pc_f360
  %v2_f36c = trunc i32 %v1_f364 to i8
  store i8 %v2_f36c, i8* bitcast (i8** @global_var_1e8b8.112 to i8*), align 4
  br label %dec_label_pc_f308

; uselistorder directives
  uselistorder i32 %v3_f22c, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 3, 2 }
  uselistorder i32 (i32)* @function_e544, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_13c74, { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1e8b8.112 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1e8b8.112, { 1, 0 }
  uselistorder label %dec_label_pc_f308, { 1, 0, 2 }
  uselistorder label %dec_label_pc_f2f4, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_f380() local_unnamed_addr {
dec_label_pc_f380:
  %stack_var_-16 = alloca i32, align 4
  %v3_f380 = load i32, i32* @r4, align 4
  store i32 %v3_f380, i32* %stack_var_-16, align 4
  %v1_f388 = call i32 @function_121a4(i32 3)
  %v3_f394 = call i32 @function_120c0(i32 3, i32* null)
  %v1_f398 = inttoptr i32 %v3_f394 to i8*
  %v2_f398 = call i32 @function_fee0(i8* %v1_f398)
  store i32 %v2_f398, i32* @r5, align 4
  %v1_f3a4 = call i32 @function_120ec(i32 3)
  %v0_f3a8 = load i32, i32* @r5, align 4
  %v2_f3a8 = icmp eq i32 %v0_f3a8, 0
  store i32 ptrtoint (i8** @global_var_1eae8.115 to i32), i32* @r6, align 4
  br i1 %v2_f3a8, label %bb, label %bb5

bb:                                               ; preds = %dec_label_pc_f380
  ret i32 %v1_f3a4

bb5:                                              ; preds = %dec_label_pc_f380
  %v1_f3b4 = add i32 %v0_f3a8, 4
  %v2_f3b4 = inttoptr i32 %v1_f3b4 to i32*
  %v3_f3b4 = load i32, i32* %v2_f3b4, align 4
  store i32 %v3_f3b4, i32* @r4, align 4
  %v0_f3b8 = call i32 @function_fbfc()
  %v0_f3bc = load i32, i32* @r5, align 4
  %v1_f3bc = inttoptr i32 %v0_f3bc to i8*
  %v2_f3bc = load i8, i8* %v1_f3bc, align 1
  %v3_f3bc = zext i8 %v2_f3bc to i32
  %v2_f3c0 = call i32 @function_131ec(i32 %v0_f3b8, i32 %v3_f3bc)
  %v0_f3c4 = load i32, i32* @r4, align 4
  %v4_f3c4 = mul i32 %v2_f3c0, 4
  %v5_f3c4 = add i32 %v0_f3c4, %v4_f3c4
  %v6_f3c4 = inttoptr i32 %v5_f3c4 to i32*
  %v7_f3c4 = load i32, i32* %v6_f3c4, align 4
  %v0_f3c8 = load i32, i32* @r5, align 4
  store i32 %v7_f3c4, i32* @global_var_1eaec.116, align 4
  %v1_f3d0 = call i32 @function_febc(i32 %v0_f3c8)
  %v1_f3d8 = call i32 @function_121a4(i32 4)
  %v3_f3e4 = call i32 @function_120c0(i32 4, i32* null)
  %v4_f3e4 = inttoptr i32 %v3_f3e4 to i8*
  %v2_f3e8 = add i32 %v3_f3e4, 1
  %v3_f3e8 = inttoptr i32 %v2_f3e8 to i8*
  %v4_f3e8 = load i8, i8* %v3_f3e8, align 1
  %v3_f3ec = load i8, i8* %v4_f3e4, align 1
  store i8 %v4_f3e8, i8* bitcast (i32* @global_var_1eaeb.117 to i8*), align 4
  store i8 %v3_f3ec, i8* bitcast (i32* @global_var_1eaea.118 to i8*), align 4
  %v2_f404 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_f404, i32* @r4, align 4
  %v1_f408 = call i32 @function_120ec(i32 4)
  %v0_f40c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_f40c, label %bb6, label %bb7

bb6:                                              ; preds = %bb5
  br label %bb7

bb7:                                              ; preds = %bb5, %bb6
  ret i32 %v1_f408

; uselistorder directives
  uselistorder label %bb7, { 1, 0 }
}

define i32 @function_f410(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_f410:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %tmp11 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-1548 = alloca i32, align 4
  %stack_var_-38 = alloca i8, align 1
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-524 = alloca i32, align 4
  %stack_var_-396 = alloca i32, align 4
  %stack_var_-536 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f410 = load i32, i32* @r4, align 4
  store i32 %v3_f410, i32* %stack_var_-36, align 4
  %v6_f410 = load i32, i32* @r5, align 4
  %v21_f410 = load i32, i32* @sl, align 4
  %v2_f420 = ptrtoint i32* %stack_var_-268 to i32
  store i32 %v2_f420, i32* @r4, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_f428 = load i32, i32* %arg2, align 4
  store i32 %tmp, i32* @r6, align 4
  %v1_f430 = inttoptr i32 %v2_f428 to i8*
  %v2_f430 = call i32 @function_1378c(i8* %v1_f430)
  store i32 %v2_f420, i32* @r0, align 4
  %v1_f438 = call i32 @function_13e04(i32 %v2_f420)
  store i32 %v2_f420, i32* @r0, align 4
  %v2_f444 = call i32 @function_13dd4(i32 %v2_f420, i32 2)
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_f454 = bitcast i32* %stack_var_-268 to %_TYPEDEF_sigset_t*
  %v4_f454 = call i32 @function_1370c(i32 0, %_TYPEDEF_sigset_t* %v3_f454, i32 0)
  %v2_f460 = call i32 @function_13e1c(i32 17, i32 1)
  %v2_f46c = call i32 @function_13e1c(i32 5, i32 ptrtoint (i32* @global_var_f1f8.120 to i32))
  %v4_f478 = call i32 @function_135bc(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_15db0.122, i32 0, i32 0), i32 2)
  %v7_f47c = icmp eq i32 %v4_f478, -1
  store i32 %v4_f478, i32* @r4, align 4
  br i1 %v7_f47c, label %dec_label_pc_f5fc, label %dec_label_pc_f488

dec_label_pc_f488:                                ; preds = %dec_label_pc_f5fc, %dec_label_pc_f410
  %v0_f49c = phi i32 [ %v4_f604, %dec_label_pc_f5fc ], [ %v4_f478, %dec_label_pc_f410 ]
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_f4a0 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_f4a0, i32* %r2.global-to-local, align 4
  store i32 1, i32* %stack_var_-48, align 4
  %v5_f4a8 = call i32 @function_13540(i32 %v0_f49c, i32 -2147199228, i32 %v2_f4a0, i32 1, i32 1)
  %v0_f4ac = load i32, i32* @r4, align 4
  %v1_f4b0 = call i32 @function_13490(i32 %v0_f4ac)
  br label %dec_label_pc_f4b4

dec_label_pc_f4b4:                                ; preds = %dec_label_pc_f5fc, %dec_label_pc_f488
  %v2_f4b8 = call i32 @function_13464(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @global_var_15d60.23, i32 0, i32 0))
  %v0_f4bc = call i32 @function_12d88()
  store i32 902487617, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1eadc.85 to i32), i32* @fp, align 4
  store i8 80, i8* bitcast (i32* @global_var_1eaeb.117 to i8*), align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i8 2, i8* bitcast (i8** @global_var_1eae8.115 to i8*), align 4
  store i32 902487617, i32* @global_var_1eaec.116, align 4
  store i8 0, i8* bitcast (i32* @global_var_1eaea.118 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1eae9.127 to i8*), align 4
  store i32 %v0_f4bc, i32* @global_var_1eadc.85, align 4
  %v6_f4f4 = call i32 @function_1225c(i32 %v0_f4bc, i32 ptrtoint (i8** @global_var_1eae8.115 to i32), i32 902487617, i32 2)
  %v2_f4f8 = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_f4f8, i32* @r8, align 4
  %v1_f500 = call i32 @function_13dbc(i32 5)
  %v1_f504 = call i32 @function_f210(i32 %v1_f500)
  %v1_f508 = call i32 @function_fc54(i32 %v1_f504)
  %v2_f514 = call i32 @function_12b70(i32 %v2_f4f8, i32 32)
  %v0_f518 = load i32, i32* @r5, align 4
  %v7_f518 = icmp eq i32 %v0_f518, 2
  br i1 %v7_f518, label %dec_label_pc_f618, label %dec_label_pc_f520

dec_label_pc_f520:                                ; preds = %dec_label_pc_f618, %dec_label_pc_f4b4, %dec_label_pc_f628
  %v0_f520 = call i32 @function_fbfc()
  %v1_f524 = mul i32 %v0_f520, 4
  %v3_f528 = and i32 %v1_f524, 12
  %v2_f530 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_f530, i32* @r5, align 4
  %v1_f534 = add nuw nsw i32 %v3_f528, 12
  store i32 %v1_f534, i32* @r4, align 4
  %v2_f540 = call i32 @function_fcb0(i32 %v2_f530, i32 %v1_f534)
  %v2_f548 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_f548, i32* %r2.global-to-local, align 4
  %v1_f54c = load i32, i32* @r4, align 4
  %v2_f54c = add i32 %v1_f54c, %v2_f548
  store i32 %v2_f54c, i32* %r3.global-to-local, align 4
  %v0_f550 = load i32, i32* @r6, align 4
  %v1_f550 = inttoptr i32 %v0_f550 to i32*
  %v2_f550 = load i32, i32* %v1_f550, align 4
  store i32 %v2_f550, i32* @r0, align 4
  store i32 0, i32* @r6, align 4
  %v3_f558 = add i32 %v2_f54c, -72
  %v4_f558 = inttoptr i32 %v3_f558 to i8*
  store i8 0, i8* %v4_f558, align 1
  %v2_f560 = inttoptr i32 %v2_f550 to i8*
  %v3_f560 = call i32 @function_12af8(i8* %v2_f560, i32 %v2_f530)
  %v0_f564 = call i32 @function_fbfc()
  %v2_f56c = call i32 @function_131ec(i32 %v0_f564, i32 6)
  %v3_f570 = mul i32 %v2_f56c, 4
  %v1_f574 = add i32 %v3_f570, 12
  store i32 %v1_f574, i32* @r4, align 4
  %v2_f580 = call i32 @function_fcb0(i32 %v2_f530, i32 %v1_f574)
  %v1_f58c = load i32, i32* @r4, align 4
  %v2_f58c = add i32 %v1_f58c, %v2_f548
  store i32 %v2_f58c, i32* @r3, align 4
  %v0_f590 = load i32, i32* @r6, align 4
  %v1_f590 = trunc i32 %v0_f590 to i8
  %v3_f590 = add i32 %v2_f58c, -72
  %v4_f590 = inttoptr i32 %v3_f590 to i8*
  store i8 %v1_f590, i8* %v4_f590, align 1
  %v2_f59c = call i32 @function_13628(i32 15, i32 %v2_f530)
  %v1_f5a4 = call i32 @function_121a4(i32 2)
  %v3_f5b4 = call i32 @function_120c0(i32 2, i32* nonnull %stack_var_-44)
  %v3_f5b8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_f5b8, i32* %r2.global-to-local, align 4
  %v3_f5c4 = inttoptr i32 %v3_f5b4 to i32*
  %v4_f5c4 = call i32 @function_137b8(i32 1, i32* %v3_f5c4, i32 %v3_f5b8)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_f5d4 = call i32 @function_137b8(i32 1, i32* nonnull @global_var_15dd4.129, i32 1)
  %v1_f5dc = call i32 @function_120ec(i32 2)
  %v0_f5e0 = call i32 @function_134bc()
  %v1_f5e4 = load i32, i32* @r6, align 4
  %v7_f5e8 = icmp sgt i32 %v0_f5e0, %v1_f5e4
  br i1 %v7_f5e8, label %dec_label_pc_f5ec, label %dec_label_pc_f650

dec_label_pc_f5ec:                                ; preds = %dec_label_pc_f520
  store i32 %v6_f410, i32* %r5.global-to-local, align 4
  store i32 %v21_f410, i32* %sl.global-to-local, align 4
  ret i32 0

dec_label_pc_f5fc:                                ; preds = %dec_label_pc_f410
  %v4_f604 = call i32 @function_135bc(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @global_var_15dc0.131, i32 0, i32 0), i32 2)
  %v3_f608 = icmp eq i32 %v4_f604, -1
  store i32 %v4_f604, i32* @r4, align 4
  br i1 %v3_f608, label %dec_label_pc_f4b4, label %dec_label_pc_f488

dec_label_pc_f618:                                ; preds = %dec_label_pc_f4b4
  %v0_f618 = load i32, i32* @r6, align 4
  %v1_f618 = add i32 %v0_f618, 4
  %v2_f618 = inttoptr i32 %v1_f618 to i32*
  %v3_f618 = load i32, i32* %v2_f618, align 4
  %v1_f61c = inttoptr i32 %v3_f618 to i8*
  %v2_f61c = call i32 @function_12ad0(i8* %v1_f61c)
  %v8_f624 = icmp sgt i32 %v2_f61c, 31
  br i1 %v8_f624, label %dec_label_pc_f520, label %dec_label_pc_f628

dec_label_pc_f628:                                ; preds = %dec_label_pc_f618
  %v0_f628 = load i32, i32* @r6, align 4
  %v1_f628 = add i32 %v0_f628, 4
  %v2_f628 = inttoptr i32 %v1_f628 to i32*
  %v3_f628 = load i32, i32* %v2_f628, align 4
  store i32 %v2_f4f8, i32* @r0, align 4
  %v2_f630 = bitcast i32* %stack_var_-140 to i8*
  %v3_f630 = call i32 @function_12af8(i8* %v2_f630, i32 %v3_f628)
  %v0_f634 = load i32, i32* @r6, align 4
  %v1_f634 = add i32 %v0_f634, 4
  %v2_f634 = inttoptr i32 %v1_f634 to i32*
  %v3_f634 = load i32, i32* %v2_f634, align 4
  %v1_f63c = inttoptr i32 %v3_f634 to i8*
  %v2_f63c = call i32 @function_12ad0(i8* %v1_f63c)
  %v2_f648 = call i32 @function_12b70(i32 %v3_f634, i32 %v2_f63c)
  br label %dec_label_pc_f520

dec_label_pc_f650:                                ; preds = %dec_label_pc_f520
  %v1_f650 = call i32 @function_136e0(i32 %v0_f5e0)
  %v0_f658 = load i32, i32* @r6, align 4
  %v1_f65c = call i32 @function_13490(i32 %v0_f658)
  %v1_f664 = call i32 @function_13490(i32 1)
  %v1_f66c = call i32 @function_13490(i32 2)
  %v2_f670 = ptrtoint i32* %stack_var_-536 to i32
  store i32 %v2_f670, i32* @r7, align 4
  %v1_f674 = call i32 @function_a558(i32 %v1_f66c)
  store i32 ptrtoint (i32* @global_var_1e8b0.133 to i32), i32* @sb, align 4
  %v1_f67c = call i32 @function_eab0(i32 %v1_f674)
  %v0_f680 = call i32 @function_106b8()
  %v0_f684 = load i32, i32* @r6, align 4
  %v2_f68c = ptrtoint i32* %stack_var_-396 to i32
  store i32 %v2_f68c, i32* @r6, align 4
  %v2_f690 = ptrtoint i32* %stack_var_-524 to i32
  store i32 %v2_f690, i32* @r7, align 4
  %v2_f770 = ptrtoint i32* %stack_var_-60 to i32
  %v5_fa30 = bitcast i8* %stack_var_-38 to i32*
  %v2_f958 = ptrtoint i32* %stack_var_-1548 to i32
  %v2_fa48 = ptrtoint i32* %stack_var_-48 to i32
  %v2_fa4c = ptrtoint i32* %stack_var_-52 to i32
  %v1_fadc = bitcast i32* %stack_var_-140 to i8*
  %v5_fab0 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v1_fac8 = sub i32 0, %v1_f650
  br label %dec_label_pc_f694

dec_label_pc_f694:                                ; preds = %dec_label_pc_f694.backedge, %dec_label_pc_f650
  %v2_f69c51 = phi i32 [ %v2_f68c, %dec_label_pc_f650 ], [ %v2_f69c51.pre, %dec_label_pc_f694.backedge ]
  %stack_var_-37.0 = phi i8 [ %tmp11, %dec_label_pc_f650 ], [ %stack_var_-37.0.be, %dec_label_pc_f694.backedge ]
  %stack_var_-1552.0 = phi i32 [ %v0_f684, %dec_label_pc_f650 ], [ %stack_var_-1552.0.be, %dec_label_pc_f694.backedge ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_f69c53 = inttoptr i32 %v2_f69c51 to i32*
  store i32 0, i32* %v4_f69c53, align 4
  %v0_f6a054 = load i32, i32* %r3.global-to-local, align 4
  %v1_f6a055 = add i32 %v0_f6a054, 4
  store i32 %v1_f6a055, i32* %r3.global-to-local, align 4
  %v7_f6a456 = icmp eq i32 %v1_f6a055, 128
  br i1 %v7_f6a456, label %dec_label_pc_f6ac, label %dec_label_pc_f69c.dec_label_pc_f69c_crit_edge

dec_label_pc_f69c.dec_label_pc_f69c_crit_edge:    ; preds = %dec_label_pc_f694, %dec_label_pc_f69c.dec_label_pc_f69c_crit_edge
  %v1_f6a057 = phi i32 [ %v1_f6a0, %dec_label_pc_f69c.dec_label_pc_f69c_crit_edge ], [ %v1_f6a055, %dec_label_pc_f694 ]
  %v0_f69c.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_f69c = load i32, i32* @r6, align 4
  %v3_f69c = add i32 %v2_f69c, %v1_f6a057
  %v4_f69c = inttoptr i32 %v3_f69c to i32*
  store i32 %v0_f69c.pre, i32* %v4_f69c, align 4
  %v0_f6a0 = load i32, i32* %r3.global-to-local, align 4
  %v1_f6a0 = add i32 %v0_f6a0, 4
  store i32 %v1_f6a0, i32* %r3.global-to-local, align 4
  %v7_f6a4 = icmp eq i32 %v1_f6a0, 128
  br i1 %v7_f6a4, label %dec_label_pc_f6ac, label %dec_label_pc_f69c.dec_label_pc_f69c_crit_edge

dec_label_pc_f6ac:                                ; preds = %dec_label_pc_f69c.dec_label_pc_f69c_crit_edge, %dec_label_pc_f694
  %v0_f6ac = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_f6ac, i32* %r3.global-to-local, align 4
  store i32 %v0_f6ac, i32* @r4, align 4
  %v2_f6b458 = load i32, i32* @r7, align 4
  %v3_f6b459 = add i32 %v2_f6b458, %v0_f6ac
  %v4_f6b460 = inttoptr i32 %v3_f6b459 to i32*
  store i32 %v0_f6ac, i32* %v4_f6b460, align 4
  %v0_f6b861 = load i32, i32* %r3.global-to-local, align 4
  %v1_f6b862 = add i32 %v0_f6b861, 4
  store i32 %v1_f6b862, i32* %r3.global-to-local, align 4
  %v7_f6bc63 = icmp eq i32 %v1_f6b862, 128
  br i1 %v7_f6bc63, label %dec_label_pc_f6c4, label %dec_label_pc_f6b4.dec_label_pc_f6b4_crit_edge

dec_label_pc_f6b4.dec_label_pc_f6b4_crit_edge:    ; preds = %dec_label_pc_f6ac, %dec_label_pc_f6b4.dec_label_pc_f6b4_crit_edge
  %v1_f6b864 = phi i32 [ %v1_f6b8, %dec_label_pc_f6b4.dec_label_pc_f6b4_crit_edge ], [ %v1_f6b862, %dec_label_pc_f6ac ]
  %v0_f6b4.pre = load i32, i32* @r4, align 4
  %v2_f6b4 = load i32, i32* @r7, align 4
  %v3_f6b4 = add i32 %v2_f6b4, %v1_f6b864
  %v4_f6b4 = inttoptr i32 %v3_f6b4 to i32*
  store i32 %v0_f6b4.pre, i32* %v4_f6b4, align 4
  %v0_f6b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_f6b8 = add i32 %v0_f6b8, 4
  store i32 %v1_f6b8, i32* %r3.global-to-local, align 4
  %v7_f6bc = icmp eq i32 %v1_f6b8, 128
  br i1 %v7_f6bc, label %dec_label_pc_f6c4, label %dec_label_pc_f6b4.dec_label_pc_f6b4_crit_edge

dec_label_pc_f6c4:                                ; preds = %dec_label_pc_f6b4.dec_label_pc_f6b4_crit_edge, %dec_label_pc_f6ac
  store i32 ptrtoint (i32* @global_var_1e8ac.110 to i32), i32* %r2.global-to-local, align 4
  %v2_f6c8 = load i32, i32* @global_var_1e8ac.110, align 4
  %v7_f6cc = icmp eq i32 %v2_f6c8, -1
  br i1 %v7_f6cc, label %dec_label_pc_f6fc, label %dec_label_pc_f6d4

dec_label_pc_f6d4:                                ; preds = %dec_label_pc_f6c4
  %v3_f6d4 = udiv i32 %v2_f6c8, 32
  %v3_f6dc = mul nuw nsw i32 %v3_f6d4, 4
  %v2_f6e4 = add i32 %v3_f6dc, %v2_f548
  store i32 %v2_f6e4, i32* %r3.global-to-local, align 4
  %v1_f6e8 = add i32 %v2_f6e4, -360
  %v2_f6e8 = inttoptr i32 %v1_f6e8 to i32*
  %v3_f6e8 = load i32, i32* %v2_f6e8, align 4
  %v1_f6ec = urem i32 %v2_f6c8, 32
  %v7_f6f4 = shl i32 1, %v1_f6ec
  %v8_f6f4 = or i32 %v3_f6e8, %v7_f6f4
  store i32 %v8_f6f4, i32* %r2.global-to-local, align 4
  store i32 %v8_f6f4, i32* %v2_f6e8, align 4
  br label %dec_label_pc_f6fc

dec_label_pc_f6fc:                                ; preds = %dec_label_pc_f6c4, %dec_label_pc_f6d4
  %v2_f6fc = load i32, i32* @global_var_1e8b0.133, align 4
  store i32 %v2_f6fc, i32* %r3.global-to-local, align 4
  %v7_f700 = icmp eq i32 %v2_f6fc, -1
  store i32 ptrtoint (i32* @global_var_1e8b0.133 to i32), i32* %sl.global-to-local, align 4
  br i1 %v7_f700, label %dec_label_pc_f9a8, label %dec_label_pc_f70c

dec_label_pc_f70c:                                ; preds = %dec_label_pc_f9a8, %dec_label_pc_f6fc, %.thread
  store i32 ptrtoint (i8** @global_var_1ea4c.136 to i32), i32* %r2.global-to-local, align 4
  %v2_f710 = load i8, i8* bitcast (i8** @global_var_1ea4c.136 to i8*), align 4
  %v3_f710 = zext i8 %v2_f710 to i32
  store i32 %v3_f710, i32* %r3.global-to-local, align 4
  %v2_f714 = icmp eq i8 %v2_f710, 0
  %v2_f868 = load i32, i32* @global_var_1e8b0.133, align 4
  %v3_f870 = udiv i32 %v2_f868, 32
  br i1 %v2_f714, label %dec_label_pc_f868, label %dec_label_pc_f71c

dec_label_pc_f71c:                                ; preds = %dec_label_pc_f70c
  %v3_f728 = mul nuw nsw i32 %v3_f870, 4
  %v2_f730 = add i32 %v3_f728, %v2_f548
  store i32 %v2_f730, i32* %r3.global-to-local, align 4
  %v1_f734 = add i32 %v2_f730, -488
  %v2_f734 = inttoptr i32 %v1_f734 to i32*
  %v3_f734 = load i32, i32* %v2_f734, align 4
  %v1_f738 = urem i32 %v2_f868, 32
  %v7_f740 = shl i32 1, %v1_f738
  %v8_f740 = or i32 %v3_f734, %v7_f740
  store i32 %v8_f740, i32* %r2.global-to-local, align 4
  store i32 %v8_f740, i32* %v2_f734, align 4
  br label %dec_label_pc_f748

dec_label_pc_f748:                                ; preds = %dec_label_pc_f868, %dec_label_pc_f71c
  %v2_f74c = load i32, i32* @global_var_1e8ac.110, align 4
  %v2_f750 = load i32, i32* @global_var_1e8b0.133, align 4
  store i32 %v2_f750, i32* %r3.global-to-local, align 4
  %v5_f75c = icmp slt i32 %v2_f74c, %v2_f750
  br i1 %v5_f75c, label %bb, label %bb48

bb:                                               ; preds = %dec_label_pc_f748
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_f748, %bb
  %v0_f774 = phi i32 [ %v2_f74c, %dec_label_pc_f748 ], [ %v2_f750, %bb ]
  store i32 0, i32* @lr, align 4
  store i32 10, i32* %stack_var_-60, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f774 = add i32 %v0_f774, 1
  store i32 %v2_f690, i32* %r2.global-to-local, align 4
  %v5_f788 = call i32 @function_136b0(i32 %v1_f774, i32 %v2_f68c, i32 %v2_f690, i32 0, i32 %v2_f770)
  %v7_f78c = icmp eq i32 %v5_f788, -1
  %v1_f790 = trunc i32 %v5_f788 to i8
  store i32 %v5_f788, i32* %r3.global-to-local, align 4
  br i1 %v7_f78c, label %dec_label_pc_f694.backedge, label %dec_label_pc_f798

dec_label_pc_f798:                                ; preds = %bb48
  %v2_f798 = icmp eq i32 %v5_f788, 0
  br i1 %v2_f798, label %dec_label_pc_f7a0, label %dec_label_pc_f7c8

dec_label_pc_f7a0:                                ; preds = %dec_label_pc_f798
  store i8 %v1_f790, i8* %stack_var_-38, align 1
  %v4_f7b0 = sext i8 %v1_f790 to i32
  %v5_f7b0 = call i32 @function_132b8(i32 %stack_var_-1552.0, i32 6, i32 %v2_f690, i32 %v4_f7b0)
  %v2_f7b8 = icmp eq i32 %v5_f7b0, 0
  %v1_f7bc = add i32 %stack_var_-1552.0, 1
  store i32 %v1_f7bc, i32* %r2.global-to-local, align 4
  br i1 %v2_f7b8, label %dec_label_pc_fa18, label %dec_label_pc_f7c8

dec_label_pc_f7c8:                                ; preds = %dec_label_pc_f798, %dec_label_pc_f7a0, %dec_label_pc_fa18
  %stack_var_-37.1 = phi i8 [ %v1_f790, %dec_label_pc_fa18 ], [ %v1_f790, %dec_label_pc_f7a0 ], [ %stack_var_-37.0, %dec_label_pc_f798 ]
  %stack_var_-1552.1 = phi i32 [ %v1_f7bc, %dec_label_pc_fa18 ], [ %v1_f7bc, %dec_label_pc_f7a0 ], [ %stack_var_-1552.0, %dec_label_pc_f798 ]
  store i32 ptrtoint (i32* @global_var_1e8ac.110 to i32), i32* %r3.global-to-local, align 4
  %v2_f7cc = load i32, i32* @global_var_1e8ac.110, align 4
  %v7_f7d0 = icmp eq i32 %v2_f7cc, -1
  br i1 %v7_f7d0, label %dec_label_pc_f800, label %dec_label_pc_f7d8

dec_label_pc_f7d8:                                ; preds = %dec_label_pc_f7c8
  %v3_f7d8 = udiv i32 %v2_f7cc, 32
  %v3_f7e0 = mul nuw nsw i32 %v3_f7d8, 4
  %v2_f7e8 = add i32 %v3_f7e0, %v2_f548
  store i32 %v2_f7e8, i32* %r3.global-to-local, align 4
  %v1_f7ec = add i32 %v2_f7e8, -360
  %v2_f7ec = inttoptr i32 %v1_f7ec to i32*
  %v3_f7ec = load i32, i32* %v2_f7ec, align 4
  %v1_f7f0 = urem i32 %v2_f7cc, 32
  %v6_f7f4 = lshr i32 %v3_f7ec, %v1_f7f0
  store i32 %v6_f7f4, i32* %r2.global-to-local, align 4
  %v1_f7f8 = urem i32 %v6_f7f4, 2
  %v2_f7f8 = icmp eq i32 %v1_f7f8, 0
  br i1 %v2_f7f8, label %dec_label_pc_f800, label %dec_label_pc_fa98

dec_label_pc_f800:                                ; preds = %dec_label_pc_f7d8, %dec_label_pc_f7c8
  store i32 ptrtoint (i8** @global_var_1ea4c.136 to i32), i32* %r3.global-to-local, align 4
  %v2_f804 = load i8, i8* bitcast (i8** @global_var_1ea4c.136 to i8*), align 4
  %v3_f804 = zext i8 %v2_f804 to i32
  store i32 %v3_f804, i32* @r4, align 4
  %v2_f808 = icmp eq i8 %v2_f804, 0
  %v2_f898 = load i32, i32* @global_var_1e8b0.133, align 4
  br i1 %v2_f808, label %dec_label_pc_f898, label %dec_label_pc_f810

dec_label_pc_f810:                                ; preds = %dec_label_pc_f800
  %v3_f818 = udiv i32 %v2_f898, 32
  %v3_f820 = mul nuw nsw i32 %v3_f818, 4
  %v2_f824 = add i32 %v3_f820, %v2_f548
  store i32 %v2_f824, i32* %r3.global-to-local, align 4
  %v1_f828 = add i32 %v2_f824, -488
  %v2_f828 = inttoptr i32 %v1_f828 to i32*
  %v3_f828 = load i32, i32* %v2_f828, align 4
  %v1_f82c = urem i32 %v2_f898, 32
  %v6_f830 = lshr i32 %v3_f828, %v1_f82c
  store i32 %v6_f830, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1ea4c.136 to i32), i32* %r3.global-to-local, align 4
  %v1_f83c = urem i32 %v6_f830, 2
  %v2_f83c = icmp eq i32 %v1_f83c, 0
  store i8 0, i8* bitcast (i8** @global_var_1ea4c.136 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1e8b0.133 to i32), i32* @r5, align 4
  br i1 %v2_f83c, label %dec_label_pc_f84c, label %dec_label_pc_fa38

dec_label_pc_f84c:                                ; preds = %dec_label_pc_f810
  store i32 63572, i32* @lr, align 4
  %v1_f850 = icmp ne i32 %v2_f898, -1
  call void @__pseudo_cond_branch(i1 %v1_f850, i32 ptrtoint (i32* @global_var_13490.25 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_f858 = load i32, i32* @r5, align 4
  %v2_f858 = inttoptr i32 %v1_f858 to i32*
  store i32 -1, i32* %v2_f858, align 4
  %v1_f860 = call i32 @function_148c4(i32 1)
  br label %dec_label_pc_f694.backedge

dec_label_pc_f868:                                ; preds = %dec_label_pc_f70c
  store i32 %v2_f548, i32* %r2.global-to-local, align 4
  %v3_f878 = mul nuw nsw i32 %v3_f870, 4
  %v2_f87c = add i32 %v3_f878, %v2_f548
  store i32 %v2_f87c, i32* %r3.global-to-local, align 4
  %v1_f880 = add i32 %v2_f87c, -360
  %v2_f880 = inttoptr i32 %v1_f880 to i32*
  %v3_f880 = load i32, i32* %v2_f880, align 4
  %v1_f884 = urem i32 %v2_f868, 32
  %v7_f88c = shl i32 1, %v1_f884
  %v8_f88c = or i32 %v3_f880, %v7_f88c
  store i32 %v8_f88c, i32* %r2.global-to-local, align 4
  store i32 %v8_f88c, i32* %v2_f880, align 4
  br label %dec_label_pc_f748

dec_label_pc_f898:                                ; preds = %dec_label_pc_f800
  %v7_f89c = icmp eq i32 %v2_f898, -1
  store i32 ptrtoint (i32* @global_var_1e8b0.133 to i32), i32* @r5, align 4
  br i1 %v7_f89c, label %dec_label_pc_f694.backedge, label %dec_label_pc_f8a8

dec_label_pc_f8a8:                                ; preds = %dec_label_pc_f898
  %v3_f8a8 = udiv i32 %v2_f898, 32
  store i32 %v2_f548, i32* %r2.global-to-local, align 4
  %v3_f8b4 = mul nuw nsw i32 %v3_f8a8, 4
  %v2_f8b8 = add i32 %v3_f8b4, %v2_f548
  store i32 %v2_f8b8, i32* %r3.global-to-local, align 4
  %v1_f8bc = add i32 %v2_f8b8, -360
  %v2_f8bc = inttoptr i32 %v1_f8bc to i32*
  %v3_f8bc = load i32, i32* %v2_f8bc, align 4
  %v1_f8c0 = urem i32 %v2_f898, 32
  %v6_f8c4 = lshr i32 %v3_f8bc, %v1_f8c0
  store i32 %v6_f8c4, i32* %r2.global-to-local, align 4
  %v1_f8c8 = urem i32 %v6_f8c4, 2
  %v2_f8c8 = icmp eq i32 %v1_f8c8, 0
  br i1 %v2_f8c8, label %dec_label_pc_f694.backedge, label %dec_label_pc_f8d0

dec_label_pc_f8d0:                                ; preds = %dec_label_pc_f8a8
  %v0_f8d0 = call i32 @function_13a64()
  %v0_f8d4 = load i32, i32* @r4, align 4
  %v2_f8d4 = inttoptr i32 %v0_f8d0 to i32*
  store i32 %v0_f8d4, i32* %v2_f8d4, align 4
  store i32 %v0_f8d0, i32* @sl, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_f8e8 = load i32, i32* @global_var_1e8b0.133, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_f8f4 = call i32 @function_13ca0(i32 %v2_f8e8, i32* %v5_fa30, i32 2, i32 16386)
  %v7_f8f8 = icmp eq i32 %v5_f8f4, -1
  br i1 %v7_f8f8, label %dec_label_pc_fb38, label %dec_label_pc_f900

dec_label_pc_f900:                                ; preds = %dec_label_pc_f8d0
  %v2_f900 = icmp eq i32 %v5_f8f4, 0
  br i1 %v2_f900, label %dec_label_pc_f984, label %dec_label_pc_f908

dec_label_pc_f908:                                ; preds = %dec_label_pc_f900
  %v3_f908 = load i8, i8* %stack_var_-38, align 1
  %v4_f908 = sext i8 %v3_f908 to i32
  %v4_f90c = zext i8 %stack_var_-37.1 to i32
  store i32 %v4_f90c, i32* %r3.global-to-local, align 4
  %v4_f910 = mul nuw nsw i32 %v4_f90c, 256
  %v5_f910 = or i32 %v4_f908, %v4_f910
  store i32 %v5_f910, i32* %r2.global-to-local, align 4
  %v7_f910 = icmp eq i32 %v5_f910, 0
  br i1 %v7_f910, label %dec_label_pc_fb4c, label %dec_label_pc_f918

dec_label_pc_f918:                                ; preds = %dec_label_pc_f908
  %v1_f918 = mul nsw i32 %v4_f908, 256
  %v3_f91c = and i32 %v1_f918, 65280
  %v4_f920 = udiv i32 %v5_f910, 256
  %v5_f920 = or i32 %v3_f91c, %v4_f920
  store i32 %v5_f920, i32* %r3.global-to-local, align 4
  %v3_f9242 = udiv i32 %v5_f920, 256
  store i32 %v3_f9242, i32* %r2.global-to-local, align 4
  %v1_f92c = trunc i32 %v3_f9242 to i8
  %v6_f930 = trunc i32 %v4_f920 to i8
  store i8 %v6_f930, i8* %stack_var_-38, align 1
  %tmp67 = icmp ult i32 %v5_f920, 1025
  br i1 %tmp67, label %dec_label_pc_f948, label %dec_label_pc_f938

dec_label_pc_f938:                                ; preds = %dec_label_pc_f918
  %v2_f938 = load i32, i32* @global_var_1e8b0.133, align 4
  %v1_f93c = call i32 @function_13490(i32 %v2_f938)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_f944 = load i32, i32* @r5, align 4
  %v2_f944 = inttoptr i32 %v1_f944 to i32*
  store i32 -1, i32* %v2_f944, align 4
  %v3_f950.pre = load i8, i8* %stack_var_-38, align 1
  br label %dec_label_pc_f948

dec_label_pc_f948:                                ; preds = %dec_label_pc_f918, %dec_label_pc_f938
  %v3_f950 = phi i8 [ %v6_f930, %dec_label_pc_f918 ], [ %v3_f950.pre, %dec_label_pc_f938 ]
  %v0_f948 = load i32, i32* @r4, align 4
  %v1_f948 = load i32, i32* @sl, align 4
  %v2_f948 = inttoptr i32 %v1_f948 to i32*
  store i32 %v0_f948, i32* %v2_f948, align 4
  %v4_f94c = urem i32 %v3_f9242, 256
  %v4_f950 = sext i8 %v3_f950 to i32
  store i32 %v2_f958, i32* @r4, align 4
  %v4_f960 = mul nuw nsw i32 %v4_f94c, 256
  %v5_f960 = or i32 %v4_f950, %v4_f960
  store i32 %v5_f960, i32* %r2.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_f968 = load i32, i32* @global_var_1e8b0.133, align 4
  %v5_f970 = call i32 @function_13ca0(i32 %v2_f968, i32* nonnull %stack_var_-1548, i32 %v5_f960, i32 16386)
  %v7_f974 = icmp eq i32 %v5_f970, -1
  br i1 %v7_f974, label %dec_label_pc_fb38, label %dec_label_pc_f97c

dec_label_pc_f97c:                                ; preds = %dec_label_pc_f948
  %v2_f97c = icmp eq i32 %v5_f970, 0
  br i1 %v2_f97c, label %dec_label_pc_f984, label %dec_label_pc_fb68

dec_label_pc_f984:                                ; preds = %bb50, %dec_label_pc_f97c, %dec_label_pc_f900
  %stack_var_-37.2 = phi i8 [ %stack_var_-37.3, %bb50 ], [ %stack_var_-37.1, %dec_label_pc_f900 ], [ %v1_f92c, %dec_label_pc_f97c ]
  %v2_f984 = load i32, i32* @global_var_1e8b0.133, align 4
  store i32 63888, i32* @lr, align 4
  %v1_f98c = icmp ne i32 %v2_f984, -1
  call void @__pseudo_cond_branch(i1 %v1_f98c, i32 ptrtoint (i32* @global_var_13490.25 to i32))
  store i32 ptrtoint (i32* @global_var_1e8b0.133 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1e8b0.133, align 4
  %v1_f9a0 = call i32 @function_148c4(i32 1)
  br label %dec_label_pc_f694.backedge

dec_label_pc_f9a8:                                ; preds = %dec_label_pc_f6fc
  %v0_f9b0 = load i32, i32* @r4, align 4
  store i32 %v0_f9b0, i32* %r2.global-to-local, align 4
  %v3_f9b4 = call i32 @function_13d90(i32 2, i32 1, i32 %v0_f9b0)
  %v7_f9b8 = icmp eq i32 %v3_f9b4, -1
  store i32 %v3_f9b4, i32* %r5.global-to-local, align 4
  %v1_f9c0 = load i32, i32* %sl.global-to-local, align 4
  %v2_f9c0 = inttoptr i32 %v1_f9c0 to i32*
  store i32 %v3_f9b4, i32* %v2_f9c0, align 4
  br i1 %v7_f9b8, label %dec_label_pc_f70c, label %dec_label_pc_f9c8

dec_label_pc_f9c8:                                ; preds = %dec_label_pc_f9a8
  %v0_f9c8 = load i32, i32* @r4, align 4
  store i32 %v0_f9c8, i32* @r2, align 4
  %v2_f9d0 = call i32 @function_133a0(i32 %v3_f9b4, i32 3)
  %v1_f9d8 = or i32 %v2_f9d0, 2048
  store i32 %v1_f9d8, i32* @r2, align 4
  %v0_f9dc = load i32, i32* %r5.global-to-local, align 4
  %v2_f9e0 = call i32 @function_133a0(i32 %v0_f9dc, i32 4)
  %v2_f9e8 = load i32, i32* @global_var_1e8b4.108, align 4
  store i32 %v2_f9e8, i32* %r3.global-to-local, align 4
  %v2_f9ec = icmp eq i32 %v2_f9e8, 0
  br i1 %v2_f9ec, label %.thread, label %bb49

bb49:                                             ; preds = %dec_label_pc_f9c8
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_12d88.138 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_f9c8, %bb49
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_fa00 = load i32, i32* @global_var_1e8b0.133, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1ea4c.136 to i8*), align 4
  %v5_fa10 = call i32 @function_13bec(i32 %v2_fa00, %sockaddr* bitcast (i8** @global_var_1eae8.115 to %sockaddr*), i32 16)
  br label %dec_label_pc_f70c

dec_label_pc_fa18:                                ; preds = %dec_label_pc_f7a0
  %v2_fa20 = load i32, i32* @global_var_1e8b0.133, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_fa30 = call i32 @function_13d00(i32 %v2_fa20, i32* nonnull %v5_fa30, i32 2, i32 16384)
  br label %dec_label_pc_f7c8

dec_label_pc_fa38:                                ; preds = %dec_label_pc_f810
  store i32 4, i32* @r4, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 %v2_fa48, i32* %r3.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-52, align 4
  %v6_fa60 = call i32 @function_13c44(i32 %v2_f898, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_fa4c)
  %v3_fa64 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_fa64, i32* %r3.global-to-local, align 4
  %v2_fa68 = icmp eq i32 %v3_fa64, 0
  br i1 %v2_fa68, label %dec_label_pc_fad8, label %dec_label_pc_fa70

dec_label_pc_fa70:                                ; preds = %dec_label_pc_fa38
  %v2_fa70 = load i32, i32* @global_var_1e8b0.133, align 4
  %v1_fa74 = call i32 @function_13490(i32 %v2_fa70)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_fa7c = load i32, i32* @r5, align 4
  %v2_fa7c = inttoptr i32 %v1_fa7c to i32*
  store i32 -1, i32* %v2_fa7c, align 4
  %v0_fa80 = call i32 @function_fbfc()
  %v2_fa88 = call i32 @function_131ec(i32 %v0_fa80, i32 10)
  %v1_fa8c = add i32 %v2_fa88, 1
  %v1_fa90 = call i32 @function_148c4(i32 %v1_fa8c)
  br label %dec_label_pc_f694.backedge

dec_label_pc_fa98:                                ; preds = %dec_label_pc_f7d8
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_fa48, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v6_fab0 = call i32 @function_13b94(i32 %v2_f7cc, %sockaddr* %v5_fab0, i32 %v2_fa48, i32 16, i32 16)
  %v1_fab4 = call i32 @function_1042c(i32 %v6_fab0)
  %v1_fab8 = call i32 @function_e530(i32 %v1_fab4)
  %v1_fabc = call i32 @function_a32c(i32 %v1_fab8)
  store i32 %v1_f650, i32* %r2.global-to-local, align 4
  %v2_facc = call i32 @function_13590(i32 %v1_fac8, i32 9)
  %v1_fad4 = call i32 @function_14830(i32 0)
  br label %dec_label_pc_fad8

dec_label_pc_fad8:                                ; preds = %dec_label_pc_fa38, %dec_label_pc_fa98
  %v2_fadc = call i32 @function_12ad0(i8* %v1_fadc)
  %v3_fadc = trunc i32 %v2_fadc to i8
  store i8 %v3_fadc, i8* %stack_var_-38, align 1
  %v0_fae4 = call i32 @function_12d88()
  %v0_fae8 = load i32, i32* @r4, align 4
  store i32 %v0_fae8, i32* %r2.global-to-local, align 4
  %v1_faec = load i32, i32* @fp, align 4
  %v2_faec = inttoptr i32 %v1_faec to i32*
  store i32 %v0_fae4, i32* %v2_faec, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_faf8 = load i32, i32* @r5, align 4
  %v1_faf8 = inttoptr i32 %v0_faf8 to i32*
  %v2_faf8 = load i32, i32* %v1_faf8, align 4
  %v5_fafc = call i32 @function_13d00(i32 %v2_faf8, i32* nonnull @global_var_15dd8.140, i32 %v0_fae8, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_fb08 = load i32, i32* @r5, align 4
  %v1_fb08 = inttoptr i32 %v0_fb08 to i32*
  %v2_fb08 = load i32, i32* %v1_fb08, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_fb14 = call i32 @function_13d00(i32 %v2_fb08, i32* %v5_fa30, i32 1, i32 16384)
  %v3_fb18 = load i8, i8* %stack_var_-38, align 1
  %v4_fb18 = sext i8 %v3_fb18 to i32
  store i32 %v4_fb18, i32* %r2.global-to-local, align 4
  %v2_fb1c = icmp eq i8 %v3_fb18, 0
  br i1 %v2_fb1c, label %dec_label_pc_f694.backedge, label %dec_label_pc_fb24

dec_label_pc_fb24:                                ; preds = %dec_label_pc_fad8
  %v0_fb24 = load i32, i32* @r5, align 4
  %v1_fb24 = inttoptr i32 %v0_fb24 to i32*
  %v2_fb24 = load i32, i32* %v1_fb24, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_fb30 = call i32 @function_13d00(i32 %v2_fb24, i32* nonnull %stack_var_-140, i32 %v4_fb18, i32 16384)
  br label %dec_label_pc_f694.backedge

dec_label_pc_fb38:                                ; preds = %dec_label_pc_f948, %dec_label_pc_f8d0
  %stack_var_-37.3 = phi i8 [ %stack_var_-37.1, %dec_label_pc_f8d0 ], [ %v1_f92c, %dec_label_pc_f948 ]
  %v0_fb38 = load i32, i32* @sl, align 4
  %v1_fb38 = inttoptr i32 %v0_fb38 to i32*
  %v2_fb38 = load i32, i32* %v1_fb38, align 4
  store i32 %v2_fb38, i32* %r3.global-to-local, align 4
  %v7_fb3c = icmp eq i32 %v2_fb38, 4
  br i1 %v7_fb3c, label %dec_label_pc_f694.backedge, label %bb50

bb50:                                             ; preds = %dec_label_pc_fb38
  %v8_fb40 = icmp eq i32 %v2_fb38, 11
  br i1 %v8_fb40, label %dec_label_pc_f694.backedge, label %dec_label_pc_f984

dec_label_pc_fb4c:                                ; preds = %dec_label_pc_f908
  %v2_fb50 = load i32, i32* @global_var_1e8b0.133, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_fb60 = call i32 @function_13ca0(i32 %v2_fb50, i32* nonnull %v5_fa30, i32 2, i32 16384)
  br label %dec_label_pc_f694.backedge

dec_label_pc_fb68:                                ; preds = %dec_label_pc_f97c
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_fb78 = load i32, i32* @global_var_1e8b0.133, align 4
  %v5_fb7c = call i32 @function_13ca0(i32 %v2_fb78, i32* nonnull %v5_fa30, i32 2, i32 16384)
  %v3_fb80 = load i8, i8* %stack_var_-38, align 1
  %v4_fb80 = sext i8 %v3_fb80 to i32
  %v4_fb88 = mul nsw i32 %v4_fb80, 256
  %v5_fb88 = or i32 %v4_fb88, %v4_f94c
  store i32 %v5_fb88, i32* %r2.global-to-local, align 4
  store i32 %v4_fb80, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_fb9c = load i32, i32* @global_var_1e8b0.133, align 4
  store i8 %v1_f92c, i8* %stack_var_-38, align 1
  %v8_fba8 = call i32 @function_13ca0(i32 %v2_fb9c, i32* nonnull %stack_var_-1548, i32 %v5_fb88, i32 16384)
  %v3_fbac = load i8, i8* %stack_var_-38, align 1
  %v4_fbac = sext i8 %v3_fbac to i32
  store i32 %v4_fbac, i32* %r2.global-to-local, align 4
  %v4_fbb0 = zext i8 %v3_fb80 to i32
  store i32 %v4_fbb0, i32* %r3.global-to-local, align 4
  %v4_fbb4 = mul nuw nsw i32 %v4_fbb0, 256
  %v5_fbb4 = or i32 %v4_fbac, %v4_fbb4
  %v7_fbb4 = icmp eq i32 %v5_fbb4, 0
  br i1 %v7_fbb4, label %dec_label_pc_f694.backedge, label %dec_label_pc_fbbc

dec_label_pc_fbbc:                                ; preds = %dec_label_pc_fb68
  %v5_fbc0 = call i32 @function_a0d8(i32* nonnull %stack_var_-1548, i32 %v5_fbb4, i32 %v4_fbac, i32 %v4_fbb0)
  br label %dec_label_pc_f694.backedge

dec_label_pc_f694.backedge:                       ; preds = %dec_label_pc_fbbc, %dec_label_pc_f84c, %dec_label_pc_f984, %dec_label_pc_fa70, %dec_label_pc_fb24, %dec_label_pc_fb4c, %dec_label_pc_fb68, %bb48, %dec_label_pc_f898, %dec_label_pc_f8a8, %dec_label_pc_fad8, %bb50, %dec_label_pc_fb38
  %stack_var_-37.0.be = phi i8 [ %stack_var_-37.0, %bb48 ], [ %stack_var_-37.1, %dec_label_pc_f898 ], [ %stack_var_-37.1, %dec_label_pc_f8a8 ], [ %stack_var_-37.3, %bb50 ], [ %stack_var_-37.2, %dec_label_pc_f984 ], [ %stack_var_-37.1, %dec_label_pc_fb4c ], [ %v3_fb80, %dec_label_pc_fb68 ], [ %v3_fb80, %dec_label_pc_fbbc ], [ %stack_var_-37.1, %dec_label_pc_f84c ], [ %stack_var_-37.1, %dec_label_pc_fad8 ], [ %stack_var_-37.1, %dec_label_pc_fb24 ], [ %stack_var_-37.1, %dec_label_pc_fa70 ], [ %stack_var_-37.3, %dec_label_pc_fb38 ]
  %stack_var_-1552.0.be = phi i32 [ %stack_var_-1552.0, %bb48 ], [ %stack_var_-1552.1, %dec_label_pc_f898 ], [ %stack_var_-1552.1, %dec_label_pc_f8a8 ], [ %stack_var_-1552.1, %bb50 ], [ %stack_var_-1552.1, %dec_label_pc_f984 ], [ %stack_var_-1552.1, %dec_label_pc_fb4c ], [ %stack_var_-1552.1, %dec_label_pc_fb68 ], [ %stack_var_-1552.1, %dec_label_pc_fbbc ], [ %stack_var_-1552.1, %dec_label_pc_f84c ], [ %stack_var_-1552.1, %dec_label_pc_fad8 ], [ %stack_var_-1552.1, %dec_label_pc_fb24 ], [ %stack_var_-1552.1, %dec_label_pc_fa70 ], [ %stack_var_-1552.1, %dec_label_pc_fb38 ]
  %v2_f69c51.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_f694

; uselistorder directives
  uselistorder i32 %v4_fbb0, { 1, 0, 2 }
  uselistorder i32 %v4_fbac, { 1, 0, 2 }
  uselistorder i32 %v4_fb80, { 1, 0 }
  uselistorder i32 %v3_f9b4, { 3, 2, 1, 0 }
  uselistorder i32 %v5_f970, { 1, 0 }
  uselistorder i32 %v4_f94c, { 1, 0 }
  uselistorder i8 %v1_f92c, { 0, 2, 1 }
  uselistorder i32 %v3_f9242, { 0, 2, 1 }
  uselistorder i32 %v4_f920, { 1, 0 }
  uselistorder i32 %v5_f8f4, { 1, 0 }
  uselistorder i32 %v2_f898, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_f7cc, { 3, 2, 1, 0 }
  uselistorder i8 %stack_var_-37.1, { 0, 1, 2, 3, 4, 5, 6, 9, 8, 7 }
  uselistorder i8 %v1_f790, { 0, 1, 3, 2 }
  uselistorder i32 %v5_f788, { 3, 1, 2, 0 }
  uselistorder i32 %v2_f6c8, { 2, 1, 0 }
  uselistorder i32 %v1_f6b8, { 1, 2, 0 }
  uselistorder i32 %v1_f6a0, { 1, 2, 0 }
  uselistorder i32 %stack_var_-1552.0, { 0, 2, 1, 3 }
  uselistorder i32 %v2_fa48, { 1, 0, 2 }
  uselistorder i32* %v5_fa30, { 3, 2, 0, 4, 1 }
  uselistorder i32 %v2_f690, { 1, 0, 2, 3 }
  uselistorder i32 %v2_f68c, { 1, 0, 2 }
  uselistorder i32 %v4_f604, { 1, 2, 0 }
  uselistorder i32 %v2_f548, { 0, 8, 1, 9, 2, 3, 4, 5, 6, 7, 10 }
  uselistorder i32 %v4_f478, { 1, 2, 0 }
  uselistorder i32 %v2_f420, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 0, 3, 5, 4, 6 }
  uselistorder i32* %stack_var_-140, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0 }
  uselistorder i8* %stack_var_-38, { 9, 8, 7, 6, 5, 0, 4, 3, 2, 1 }
  uselistorder i32* %stack_var_-1548, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 46, 47, 48, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 29, 27, 28, 30, 31, 32, 33, 44, 45, 37, 38, 34, 42, 43, 35, 36, 39, 40, 41 }
  uselistorder i32* %r2.global-to-local, { 36, 37, 38, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i32* @global_var_1e8b4.108, { 1, 0 }
  uselistorder i32 16386, { 1, 0, 2, 4, 3, 5 }
  uselistorder i8* bitcast (i8** @global_var_1ea4c.136 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1ea4c.136, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1ea4c.136 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1e8ac.110, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32* @global_var_1e8b0.133, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9, 10, 11, 13, 12, 14, 15 }
  uselistorder i32 (i8*, i32)* @function_12af8, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 66, 36, 37, 38, 39, 40, 61, 62, 63, 64, 65, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 }
  uselistorder i32 (i32, i32)* @function_fcb0, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_f210, { 1, 0 }
  uselistorder [2 x i8]* @global_var_15d60.23, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_13e1c, { 1, 0 }
  uselistorder label %dec_label_pc_f694.backedge, { 0, 6, 5, 11, 12, 4, 10, 3, 2, 9, 8, 1, 7 }
  uselistorder label %dec_label_pc_fad8, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_f948, { 1, 0 }
  uselistorder label %dec_label_pc_f7c8, { 2, 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %dec_label_pc_f70c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f6fc, { 1, 0 }
  uselistorder label %dec_label_pc_f6b4.dec_label_pc_f6b4_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f69c.dec_label_pc_f69c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f520, { 2, 0, 1 }
}

define i32 @function_fbfc() local_unnamed_addr {
dec_label_pc_fbfc:
  %v2_fc08 = load i32, i32* @global_var_1ea50.142, align 4
  %v2_fc0c = load i32, i32* @global_var_1ea5c.144, align 4
  store i32 ptrtoint (i32* @global_var_1ea54.146 to i32), i32* @lr, align 4
  %v4_fc18 = mul i32 %v2_fc08, 2048
  %v5_fc18 = xor i32 %v4_fc18, %v2_fc08
  %v4_fc1c = udiv i32 %v2_fc0c, 524288
  %v5_fc1c = xor i32 %v4_fc1c, %v2_fc0c
  %v2_fc20 = load i32, i32* @global_var_1ea54.146, align 4
  %v2_fc24 = load i32, i32* @global_var_1ea58.148, align 4
  %v2_fc28 = xor i32 %v5_fc1c, %v5_fc18
  %v4_fc2c = udiv i32 %v5_fc18, 256
  %v5_fc2c = xor i32 %v2_fc28, %v4_fc2c
  store i32 %v2_fc20, i32* @global_var_1ea50.142, align 4
  store i32 %v2_fc24, i32* @global_var_1ea54.146, align 4
  store i32 %v2_fc0c, i32* @global_var_1ea58.148, align 4
  store i32 %v5_fc2c, i32* @global_var_1ea5c.144, align 4
  ret i32 %v5_fc2c

; uselistorder directives
  uselistorder i32 %v2_fc0c, { 2, 1, 0 }
  uselistorder i32 %v2_fc08, { 1, 0 }
}

define i32 @function_fc54(i32 %arg1) local_unnamed_addr {
dec_label_pc_fc54:
  %stack_var_-12 = alloca i32, align 4
  %v3_fc54 = load i32, i32* @r4, align 4
  store i32 %v3_fc54, i32* %stack_var_-12, align 4
  %v2_fc5c = call i32 @function_13760(i32* null)
  store i32 %v2_fc5c, i32* @global_var_1ea50.142, align 4
  %v0_fc68 = call i32 @function_134e8()
  store i32 %v0_fc68, i32* @r4, align 4
  %v0_fc70 = call i32 @function_13514()
  %v0_fc78 = load i32, i32* @r4, align 4
  %v2_fc78 = xor i32 %v0_fc78, %v0_fc70
  store i32 %v2_fc78, i32* @r4, align 4
  store i32 %v2_fc78, i32* @global_var_1ea54.146, align 4
  %v1_fc80 = call i32 @function_13a70(i32 %v0_fc70)
  %v2_fc84 = load i32, i32* @global_var_1ea54.146, align 4
  %v2_fc90 = xor i32 %v2_fc84, %v1_fc80
  store i32 %v2_fc90, i32* @global_var_1ea5c.144, align 4
  store i32 %v1_fc80, i32* @global_var_1ea58.148, align 4
  %v2_fc9c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_fc9c, i32* @r4, align 4
  ret i32 %v1_fc80

; uselistorder directives
  uselistorder i32 %v1_fc80, { 1, 2, 0 }
  uselistorder i32 %v0_fc70, { 1, 0 }
  uselistorder i32 ()* @function_13514, { 1, 2, 0 }
}

define i32 @function_fcb0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_fcb0:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-69 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_fcb0 = load i32, i32* @r4, align 4
  store i32 %v3_fcb0, i32* %stack_var_-36, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 ptrtoint ([33 x i8]* @global_var_15de0.154 to i32), i32* @r1, align 4
  %v2_fcc4 = ptrtoint i32* %stack_var_-69 to i32
  store i32 %v2_fcc4, i32* @r0, align 4
  store i32 33, i32* @r2, align 4
  %v4_fccc = call i32 @function_13ab0(i32 %v2_fcc4, i32 ptrtoint ([33 x i8]* @global_var_15de0.154 to i32), i32 33)
  store i32 %v4_fccc, i32* %r0.global-to-local, align 4
  %v0_fcd0 = load i32, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_fcd0 = icmp slt i32 %v0_fcd0, 0
  store i1 %v1_fcd0, i1* %cpsr_n.global-to-local, align 1
  %v2_fcd0 = icmp eq i32 %v0_fcd0, 0
  store i1 %v2_fcd0, i1* %cpsr_z.global-to-local, align 1
  %tmp20 = icmp slt i32 %v0_fcd0, 1
  br i1 %tmp20, label %dec_label_pc_fdbc, label %dec_label_pc_fcd8

dec_label_pc_fcd8:                                ; preds = %dec_label_pc_fcb0
  store i32 ptrtoint (i32* @global_var_1ea5c.144 to i32), i32* %fp.global-to-local, align 4
  %v2_fce4 = load i32, i32* @global_var_1ea58.148, align 4
  store i32 %v2_fce4, i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ea50.142 to i32), i32* %r3.global-to-local, align 4
  %v2_fcec = load i32, i32* @global_var_1ea54.146, align 4
  store i32 %v2_fcec, i32* %sl.global-to-local, align 4
  %v2_fcf0 = load i32, i32* @global_var_1ea5c.144, align 4
  store i32 %v2_fcf0, i32* %r6.global-to-local, align 4
  %v2_fcf4 = load i32, i32* @global_var_1ea50.142, align 4
  store i32 %v2_fcf4, i32* %ip.global-to-local, align 4
  %v0_fcf8 = load i32, i32* @r4, align 4
  %v1_fcf8 = add i32 %v0_fcf8, 1
  store i32 %v1_fcf8, i32* %r7.global-to-local, align 4
  %v2_fd04 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_fd64

dec_label_pc_fd00:                                ; preds = %dec_label_pc_fd64
  %v1_fd00 = udiv i32 %v5_fd70, 8
  %v4_fd08 = urem i32 %v1_fd00, 32
  %v5_fd08 = add i32 %v4_fd08, %v2_fd04
  store i32 %v5_fd08, i32* %r0.global-to-local, align 4
  store i32 %v2_fd04, i32* %r3.global-to-local, align 4
  %v3_fd14 = mul i32 %v5_fd70, 256
  store i32 %v3_fd14, i32* %r1.global-to-local, align 4
  %tmp21 = udiv i32 %v5_fd70, 2048
  %v4_fd18 = urem i32 %tmp21, 32
  %v5_fd18 = add i32 %v4_fd18, %v2_fd04
  store i32 %v5_fd18, i32* %ip.global-to-local, align 4
  %tmp22 = udiv i32 %v5_fd70, 524288
  %v4_fd1c = urem i32 %tmp22, 32
  %v5_fd1c = add i32 %v4_fd1c, %v2_fd04
  store i32 %v5_fd1c, i32* @lr, align 4
  %v4_fd20 = udiv i32 %v2_fd6c, 134217728
  %v5_fd20 = add i32 %v4_fd20, %v2_fd04
  %v1_fd24 = add i32 %v5_fd18, -33
  %v2_fd24 = inttoptr i32 %v1_fd24 to i8*
  %v3_fd24 = load i8, i8* %v2_fd24, align 1
  %v4_fd24 = zext i8 %v3_fd24 to i32
  store i32 %v4_fd24, i32* @r2, align 4
  %v1_fd28 = add i32 %v5_fd08, -33
  %v2_fd28 = inttoptr i32 %v1_fd28 to i8*
  %v3_fd28 = load i8, i8* %v2_fd28, align 1
  %v4_fd28 = zext i8 %v3_fd28 to i32
  store i32 %v4_fd28, i32* %r3.global-to-local, align 4
  %v1_fd2c = add i32 %v5_fd1c, -33
  %v2_fd2c = inttoptr i32 %v1_fd2c to i8*
  %v3_fd2c = load i8, i8* %v2_fd2c, align 1
  %v4_fd2c = zext i8 %v3_fd2c to i32
  store i32 %v4_fd2c, i32* %r1.global-to-local, align 4
  %v1_fd30 = add i32 %v5_fd20, -33
  %v2_fd30 = inttoptr i32 %v1_fd30 to i8*
  %v3_fd30 = load i8, i8* %v2_fd30, align 1
  %v4_fd30 = zext i8 %v3_fd30 to i32
  store i32 %v4_fd30, i32* %r0.global-to-local, align 4
  %v1_fd34 = add i32 %v0_fd34, -4
  store i32 %v1_fd34, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_fd38 = icmp slt i32 %v1_fd34, 0
  store i1 %v1_fd38, i1* %cpsr_n.global-to-local, align 1
  %v2_fd38 = icmp eq i32 %v1_fd34, 0
  store i1 %v2_fd38, i1* %cpsr_z.global-to-local, align 1
  %v3_fd3c = add i32 %v2_fd3c, -1
  %v4_fd3c = inttoptr i32 %v3_fd3c to i8*
  store i8 %v3_fd28, i8* %v4_fd3c, align 1
  %v0_fd40 = load i32, i32* @r2, align 4
  %v1_fd40 = trunc i32 %v0_fd40 to i8
  %v2_fd40 = load i32, i32* %r7.global-to-local, align 4
  %v3_fd40 = inttoptr i32 %v2_fd40 to i8*
  store i8 %v1_fd40, i8* %v3_fd40, align 1
  %v0_fd44 = load i32, i32* %r1.global-to-local, align 4
  %v1_fd44 = trunc i32 %v0_fd44 to i8
  %v2_fd44 = load i32, i32* %r7.global-to-local, align 4
  %v3_fd44 = add i32 %v2_fd44, 1
  %v4_fd44 = inttoptr i32 %v3_fd44 to i8*
  store i8 %v1_fd44, i8* %v4_fd44, align 1
  %v0_fd48 = load i32, i32* %r0.global-to-local, align 4
  %v1_fd48 = trunc i32 %v0_fd48 to i8
  %v2_fd48 = load i32, i32* %r7.global-to-local, align 4
  %v3_fd48 = add i32 %v2_fd48, 2
  %v4_fd48 = inttoptr i32 %v3_fd48 to i8*
  store i8 %v1_fd48, i8* %v4_fd48, align 1
  %v0_fd4c = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_fd4c, i32* %ip.global-to-local, align 4
  %v0_fd50 = load i32, i32* %r7.global-to-local, align 4
  %v1_fd50 = add i32 %v0_fd50, 4
  store i32 %v1_fd50, i32* %r7.global-to-local, align 4
  %v0_fd54 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_fd54 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_fd54 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v3_fd54 = xor i1 %v1_fd54, %v2_fd54
  %v4_fd54 = or i1 %v0_fd54, %v3_fd54
  br i1 %v4_fd54, label %dec_label_pc_fda0, label %dec_label_pc_fd58

dec_label_pc_fd58:                                ; preds = %dec_label_pc_fd84, %dec_label_pc_fd00
  %v2_fd3c6 = phi i32 [ %v1_fd98, %dec_label_pc_fd84 ], [ %v1_fd50, %dec_label_pc_fd00 ]
  %v0_fd642 = phi i32 [ %v0_fd94, %dec_label_pc_fd84 ], [ %v0_fd4c, %dec_label_pc_fd00 ]
  %v0_fd58 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_fd58, i32* %sl.global-to-local, align 4
  %v0_fd5c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_fd5c, i32* %sb.global-to-local, align 4
  %v0_fd60 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_fd60, i32* %r6.global-to-local, align 4
  %v0_fd74.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_fd64

dec_label_pc_fd64:                                ; preds = %dec_label_pc_fcd8, %dec_label_pc_fd58
  %v2_fd3c = phi i32 [ %v1_fcf8, %dec_label_pc_fcd8 ], [ %v2_fd3c6, %dec_label_pc_fd58 ]
  %v0_fd34 = phi i32 [ %v0_fcd0, %dec_label_pc_fcd8 ], [ %v0_fd74.pre, %dec_label_pc_fd58 ]
  %v0_fd68 = phi i32 [ %v2_fcf0, %dec_label_pc_fcd8 ], [ %v0_fd60, %dec_label_pc_fd58 ]
  %v0_fd64 = phi i32 [ %v2_fcf4, %dec_label_pc_fcd8 ], [ %v0_fd642, %dec_label_pc_fd58 ]
  %v4_fd64 = mul i32 %v0_fd64, 2048
  %v5_fd64 = xor i32 %v4_fd64, %v0_fd64
  store i32 %v5_fd64, i32* %r3.global-to-local, align 4
  %v4_fd68 = udiv i32 %v0_fd68, 524288
  %v5_fd68 = xor i32 %v4_fd68, %v0_fd68
  %v2_fd6c = xor i32 %v5_fd68, %v5_fd64
  %v4_fd70 = udiv i32 %v5_fd64, 256
  %v5_fd70 = xor i32 %v4_fd70, %v2_fd6c
  store i32 %v5_fd70, i32* %r5.global-to-local, align 4
  %v1_fd74 = add i32 %v0_fd34, -3
  %v2_fd74 = icmp ugt i32 %v0_fd34, 2
  %v3_fd74 = sub i32 2, %v0_fd34
  %v4_fd74 = and i32 %v3_fd74, %v0_fd34
  %v5_fd74 = icmp slt i32 %v4_fd74, 0
  store i1 %v5_fd74, i1* %cpsr_v.global-to-local, align 1
  %v6_fd74 = icmp slt i32 %v1_fd74, 0
  store i1 %v6_fd74, i1* %cpsr_n.global-to-local, align 1
  %v7_fd74 = icmp eq i32 %v0_fd34, 3
  store i1 %v7_fd74, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_fd70, i32* %r0.global-to-local, align 4
  store i32 33, i32* %r1.global-to-local, align 4
  %v2_fd80 = xor i1 %v7_fd74, true
  %v3_fd80 = and i1 %v2_fd74, %v2_fd80
  br i1 %v3_fd80, label %dec_label_pc_fd00, label %dec_label_pc_fd84

dec_label_pc_fd84:                                ; preds = %dec_label_pc_fd64
  %v2_fd84 = call i32 @function_131ec(i32 %v5_fd70, i32 33)
  store i32 %v2_fd84, i32* %r0.global-to-local, align 4
  %v0_fd88 = load i32, i32* %r8.global-to-local, align 4
  %v1_fd88 = add i32 %v0_fd88, -1
  store i32 %v1_fd88, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_fd8c = icmp slt i32 %v1_fd88, 0
  store i1 %v1_fd8c, i1* %cpsr_n.global-to-local, align 1
  %v2_fd8c = icmp eq i32 %v1_fd88, 0
  store i1 %v2_fd8c, i1* %cpsr_z.global-to-local, align 1
  %v1_fd90 = trunc i32 %v2_fd84 to i8
  %v2_fd90 = load i32, i32* %r7.global-to-local, align 4
  %v3_fd90 = add i32 %v2_fd90, -1
  %v4_fd90 = inttoptr i32 %v3_fd90 to i8*
  store i8 %v1_fd90, i8* %v4_fd90, align 1
  %v0_fd94 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_fd94, i32* %ip.global-to-local, align 4
  %v0_fd98 = load i32, i32* %r7.global-to-local, align 4
  %v1_fd98 = add i32 %v0_fd98, 1
  store i32 %v1_fd98, i32* %r7.global-to-local, align 4
  %v0_fd9c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_fd9c = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_fd9c = load i1, i1* %cpsr_v.global-to-local, align 1
  %v3_fd9c = xor i1 %v1_fd9c, %v2_fd9c
  %v4_fd9c = or i1 %v0_fd9c, %v3_fd9c
  br i1 %v4_fd9c, label %dec_label_pc_fda0, label %dec_label_pc_fd58

dec_label_pc_fda0:                                ; preds = %dec_label_pc_fd84, %dec_label_pc_fd00
  store i32 ptrtoint (i32* @global_var_1ea54.146 to i32), i32* %r3.global-to-local, align 4
  %v0_fda8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_fda8, i32* @global_var_1ea58.148, align 4
  store i32 ptrtoint (i32* @global_var_1ea50.142 to i32), i32* %ip.global-to-local, align 4
  %v0_fdb0 = load i32, i32* %r5.global-to-local, align 4
  %v1_fdb0 = load i32, i32* %fp.global-to-local, align 4
  %v2_fdb0 = inttoptr i32 %v1_fdb0 to i32*
  store i32 %v0_fdb0, i32* %v2_fdb0, align 4
  %v0_fdb4 = load i32, i32* %sb.global-to-local, align 4
  %v1_fdb4 = load i32, i32* %r3.global-to-local, align 4
  %v2_fdb4 = inttoptr i32 %v1_fdb4 to i32*
  store i32 %v0_fdb4, i32* %v2_fdb4, align 4
  %v0_fdb8 = load i32, i32* %sl.global-to-local, align 4
  %v1_fdb8 = load i32, i32* %ip.global-to-local, align 4
  %v2_fdb8 = inttoptr i32 %v1_fdb8 to i32*
  store i32 %v0_fdb8, i32* %v2_fdb8, align 4
  %v2_fdc0.pre = load i32, i32* %stack_var_-36, align 4
  %v29_fdc0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fdbc

dec_label_pc_fdbc:                                ; preds = %dec_label_pc_fcb0, %dec_label_pc_fda0
  %v29_fdc0 = phi i32 [ %v29_fdc0.pre, %dec_label_pc_fda0 ], [ %v4_fccc, %dec_label_pc_fcb0 ]
  %v2_fdc0 = phi i32 [ %v2_fdc0.pre, %dec_label_pc_fda0 ], [ %v3_fcb0, %dec_label_pc_fcb0 ]
  store i32 %v2_fdc0, i32* @r4, align 4
  ret i32 %v29_fdc0

; uselistorder directives
  uselistorder i32 %v1_fd98, { 1, 0 }
  uselistorder i32 %v0_fd94, { 1, 0 }
  uselistorder i32 %v5_fd70, { 5, 4, 6, 3, 0, 2, 1 }
  uselistorder i32 %v2_fd6c, { 1, 0 }
  uselistorder i32 %v0_fd64, { 1, 0 }
  uselistorder i32 %v0_fd68, { 1, 0 }
  uselistorder i32 %v0_fd34, { 2, 0, 5, 4, 3, 1 }
  uselistorder i32 %v2_fd04, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_fcd0, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* %sl.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r8.global-to-local, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 3, 1, 4, 5, 6, 7, 8 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 4, 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 6, 4, 1, 2, 3, 7, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1* %cpsr_v.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1* %cpsr_n.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 -33, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_fdbc, { 1, 0 }
  uselistorder label %dec_label_pc_fd64, { 1, 0 }
}

define i32 @function_fdd8(i8* %arg1) local_unnamed_addr {
dec_label_pc_fdd8:
  %fp.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_fdd8 = load i32, i32* @r4, align 4
  store i32 %v3_fdd8, i32* %stack_var_-36, align 4
  %v9_fdd8 = load i32, i32* @r6, align 4
  %v12_fdd8 = load i32, i32* @r7, align 4
  %v15_fdd8 = load i32, i32* @r8, align 4
  %v18_fdd8 = load i32, i32* @sb, align 4
  %v21_fdd8 = load i32, i32* @sl, align 4
  %v24_fdd8 = load i32, i32* @fp, align 4
  %v0_fddc = load i32, i32* @r1, align 4
  store i32 %v0_fddc, i32* %r4.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %tmp20 = icmp slt i32 %v0_fddc, 1
  br i1 %tmp20, label %bb, label %bb21

bb:                                               ; preds = %dec_label_pc_fdd8
  store i32 %v3_fdd8, i32* @r4, align 4
  ret i32 %tmp

bb21:                                             ; preds = %dec_label_pc_fdd8
  store i32 ptrtoint (i32* @global_var_1ea5c.144 to i32), i32* %fp.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ea58.148 to i32), i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ea54.146 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ea50.142 to i32), i32* %r8.global-to-local, align 4
  %v2_fdf8 = load i32, i32* @global_var_1ea5c.144, align 4
  store i32 %v2_fdf8, i32* @lr, align 4
  %v2_fdfc = load i32, i32* @global_var_1ea58.148, align 4
  store i32 %v2_fdfc, i32* %r7.global-to-local, align 4
  %v2_fe00 = load i32, i32* @global_var_1ea54.146, align 4
  store i32 %v2_fe00, i32* %r6.global-to-local, align 4
  %v2_fe04 = load i32, i32* @global_var_1ea50.142, align 4
  br label %dec_label_pc_fe30

dec_label_pc_fe0c:                                ; preds = %dec_label_pc_fe5c
  %v3_fe64 = sdiv i32 %v5_fe48, 256
  %v1_fe0c = trunc i32 %v3_fe64 to i8
  %v3_fe0c = add i32 %v9_fe50, 1
  %v4_fe0c = inttoptr i32 %v3_fe0c to i8*
  store i8 %v1_fe0c, i8* %v4_fe0c, align 1
  %v0_fe10 = load i32, i32* %r3.global-to-local, align 4
  %v1_fe10 = trunc i32 %v0_fe10 to i8
  %v2_fe10 = load i32, i32* %r5.global-to-local, align 4
  %v3_fe10 = inttoptr i32 %v2_fe10 to i8*
  store i8 %v1_fe10, i8* %v3_fe10, align 1
  %v0_fe14 = load i32, i32* %r5.global-to-local, align 4
  %v1_fe14 = add i32 %v0_fe14, 2
  store i32 %v1_fe14, i32* %r5.global-to-local, align 4
  %v0_fe18.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_fe18

dec_label_pc_fe18:                                ; preds = %.thread, %dec_label_pc_fe0c
  %v0_fe18 = phi i32 [ %v9_fe54, %.thread ], [ %v0_fe18.pre, %dec_label_pc_fe0c ]
  %v2_fe0c7 = phi i32 [ %v12_fe50, %.thread ], [ %v1_fe14, %dec_label_pc_fe0c ]
  %tmp22 = icmp slt i32 %v0_fe18, 1
  br i1 %tmp22, label %dec_label_pc_fe98, label %dec_label_pc_fe24

dec_label_pc_fe24:                                ; preds = %dec_label_pc_fe18
  %v0_fe1c = load i32, i32* %r6.global-to-local, align 4
  %v0_fe24 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_fe24, i32* %r6.global-to-local, align 4
  %v0_fe28 = load i32, i32* @lr, align 4
  store i32 %v0_fe28, i32* %r7.global-to-local, align 4
  %v0_fe2c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_fe2c, i32* @lr, align 4
  br label %dec_label_pc_fe30

dec_label_pc_fe30:                                ; preds = %bb21, %dec_label_pc_fe24
  %v0_fe80 = phi i32 [ %v2_fe00, %bb21 ], [ %v0_fe24, %dec_label_pc_fe24 ]
  %v9_fe50 = phi i32 [ %tmp, %bb21 ], [ %v2_fe0c7, %dec_label_pc_fe24 ]
  %v0_fe68 = phi i32 [ %v0_fddc, %bb21 ], [ %v0_fe18, %dec_label_pc_fe24 ]
  %v0_fe74 = phi i32 [ %v2_fdf8, %bb21 ], [ %v0_fe2c, %dec_label_pc_fe24 ]
  %v0_fe70 = phi i32 [ %v2_fe04, %bb21 ], [ %v0_fe1c, %dec_label_pc_fe24 ]
  %v4_fe30 = mul i32 %v0_fe70, 2048
  %v5_fe30 = xor i32 %v4_fe30, %v0_fe70
  %v4_fe34 = udiv i32 %v0_fe74, 524288
  %v5_fe34 = xor i32 %v4_fe34, %v0_fe74
  %v2_fe38 = xor i32 %v5_fe34, %v5_fe30
  %v4_fe48 = udiv i32 %v5_fe30, 256
  %v5_fe48 = xor i32 %v4_fe48, %v2_fe38
  store i32 %v5_fe48, i32* %r3.global-to-local, align 4
  %v7_fe50 = icmp sgt i32 %v0_fe68, 3
  br i1 %v7_fe50, label %.thread, label %dec_label_pc_fe5c

.thread:                                          ; preds = %dec_label_pc_fe30
  %v10_fe50 = inttoptr i32 %v9_fe50 to i32*
  store i32 %v5_fe48, i32* %v10_fe50, align 4
  %v11_fe50 = load i32, i32* %r5.global-to-local, align 4
  %v12_fe50 = add i32 %v11_fe50, 4
  store i32 %v12_fe50, i32* %r5.global-to-local, align 4
  %v8_fe54 = load i32, i32* %r4.global-to-local, align 4
  %v9_fe54 = add i32 %v8_fe54, -4
  store i32 %v9_fe54, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_fe18

dec_label_pc_fe5c:                                ; preds = %dec_label_pc_fe30
  store i32 %v5_fe48, i32* %r3.global-to-local, align 4
  %v7_fe60 = icmp eq i32 %v0_fe68, 1
  %v1_fe68 = add i32 %v0_fe68, -2
  store i32 %v1_fe68, i32* %r4.global-to-local, align 4
  br i1 %v7_fe60, label %dec_label_pc_fe70, label %dec_label_pc_fe0c

dec_label_pc_fe70:                                ; preds = %dec_label_pc_fe5c
  store i32 %v5_fe48, i32* %r3.global-to-local, align 4
  %v1_fe80 = load i32, i32* %r8.global-to-local, align 4
  %v2_fe80 = inttoptr i32 %v1_fe80 to i32*
  store i32 %v0_fe80, i32* %v2_fe80, align 4
  %v0_fe84 = load i32, i32* %r7.global-to-local, align 4
  %v1_fe84 = load i32, i32* %sl.global-to-local, align 4
  %v2_fe84 = inttoptr i32 %v1_fe84 to i32*
  store i32 %v0_fe84, i32* %v2_fe84, align 4
  %v0_fe88 = load i32, i32* @lr, align 4
  %v1_fe88 = load i32, i32* %sb.global-to-local, align 4
  %v2_fe88 = inttoptr i32 %v1_fe88 to i32*
  store i32 %v0_fe88, i32* %v2_fe88, align 4
  %v0_fe8c = load i32, i32* %r3.global-to-local, align 4
  %v1_fe8c = load i32, i32* %fp.global-to-local, align 4
  %v2_fe8c = inttoptr i32 %v1_fe8c to i32*
  store i32 %v0_fe8c, i32* %v2_fe8c, align 4
  %v0_fe90 = load i32, i32* %r3.global-to-local, align 4
  %v1_fe90 = trunc i32 %v0_fe90 to i8
  %v2_fe90 = load i32, i32* %r5.global-to-local, align 4
  %v3_fe90 = inttoptr i32 %v2_fe90 to i8*
  store i8 %v1_fe90, i8* %v3_fe90, align 1
  %v2_fe94 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_fe94, i32* @r4, align 4
  store i32 %v9_fdd8, i32* @r6, align 4
  store i32 %v12_fdd8, i32* @r7, align 4
  store i32 %v15_fdd8, i32* @r8, align 4
  store i32 %v18_fdd8, i32* @sb, align 4
  store i32 %v21_fdd8, i32* @sl, align 4
  store i32 %v24_fdd8, i32* @fp, align 4
  ret i32 %v5_fe30

dec_label_pc_fe98:                                ; preds = %dec_label_pc_fe18
  %v0_fe98 = load i32, i32* %r3.global-to-local, align 4
  %v1_fe98 = load i32, i32* %fp.global-to-local, align 4
  %v2_fe98 = inttoptr i32 %v1_fe98 to i32*
  store i32 %v0_fe98, i32* %v2_fe98, align 4
  %v0_fe9c = load i32, i32* @lr, align 4
  %v1_fe9c = load i32, i32* %sb.global-to-local, align 4
  %v2_fe9c = inttoptr i32 %v1_fe9c to i32*
  store i32 %v0_fe9c, i32* %v2_fe9c, align 4
  %v0_fea0 = load i32, i32* %r7.global-to-local, align 4
  %v1_fea0 = load i32, i32* %sl.global-to-local, align 4
  %v2_fea0 = inttoptr i32 %v1_fea0 to i32*
  store i32 %v0_fea0, i32* %v2_fea0, align 4
  %v0_fea4 = load i32, i32* %r6.global-to-local, align 4
  %v1_fea4 = load i32, i32* %r8.global-to-local, align 4
  %v2_fea4 = inttoptr i32 %v1_fea4 to i32*
  store i32 %v0_fea4, i32* %v2_fea4, align 4
  %v2_fea8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_fea8, i32* @r4, align 4
  store i32 %v9_fdd8, i32* @r6, align 4
  store i32 %v12_fdd8, i32* @r7, align 4
  store i32 %v15_fdd8, i32* @r8, align 4
  store i32 %v18_fdd8, i32* @sb, align 4
  store i32 %v21_fdd8, i32* @sl, align 4
  store i32 %v24_fdd8, i32* @fp, align 4
  ret i32 %v5_fe30

; uselistorder directives
  uselistorder i32 %v9_fe54, { 1, 0 }
  uselistorder i32 %v12_fe50, { 1, 0 }
  uselistorder i32 %v5_fe48, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v5_fe30, { 1, 2, 0, 3 }
  uselistorder i32 %v0_fe70, { 1, 0 }
  uselistorder i32 %v0_fe74, { 1, 0 }
  uselistorder i32 %v0_fe18, { 1, 0 }
  uselistorder i32 %v24_fdd8, { 1, 0 }
  uselistorder i32 %v21_fdd8, { 1, 0 }
  uselistorder i32 %v18_fdd8, { 1, 0 }
  uselistorder i32 %v15_fdd8, { 1, 0 }
  uselistorder i32 %v12_fdd8, { 1, 0 }
  uselistorder i32 %v9_fdd8, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 5, 0, 3, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 5, 0, 1, 2, 4, 7, 6, 3 }
  uselistorder i32* @global_var_1ea50.142, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1ea54.146, { 2, 3, 4, 1, 0, 5, 6 }
  uselistorder i32* @global_var_1ea58.148, { 3, 6, 1, 4, 2, 0, 5 }
  uselistorder i32* @global_var_1ea5c.144, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_fe30, { 1, 0 }
}

define i32 @function_febc(i32 %arg1) local_unnamed_addr {
dec_label_pc_febc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_febc = load i32, i32* @r4, align 4
  store i32 %v3_febc, i32* %stack_var_-8, align 4
  %v6_febc = load i32, i32* @lr, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_fec0 = icmp eq i32 %arg1, 0
  br i1 %v2_fec0, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_febc
  store i32 %v3_febc, i32* @r4, align 4
  ret i32 0

bb3:                                              ; preds = %dec_label_pc_febc
  %v1_fec8 = add i32 %arg1, 4
  %v2_fec8 = inttoptr i32 %v1_fec8 to i32*
  %v3_fec8 = load i32, i32* %v2_fec8, align 4
  %v1_fed0 = icmp ne i32 %v3_fec8, 0
  call void @__pseudo_cond_branch(i1 %v1_fed0, i32 ptrtoint (i32* @global_var_140ec.58 to i32))
  %v0_fed4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_fed4, i32* @r0, align 4
  %v2_fed8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_fed8, i32* @r4, align 4
  store i32 %v6_febc, i32* @lr, align 4
  %v0_fedc = call i32 @function_140ec()
  ret i32 %v0_fedc
}

define i32 @function_fee0(i8* %arg1) local_unnamed_addr {
dec_label_pc_fee0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-4288 = alloca i8, align 1
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-2227 = alloca i32, align 4
  %stack_var_-2240 = alloca i8, align 1
  %stack_var_-2228 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_fee0 = load i32, i32* @r4, align 4
  store i32 %v3_fee0, i32* %stack_var_-36, align 4
  %v6_fee0 = load i32, i32* @r5, align 4
  %v9_fee0 = load i32, i32* @r6, align 4
  %v12_fee0 = load i32, i32* @r7, align 4
  %v15_fee0 = load i32, i32* @r8, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_fef8 = call i32 @function_14094(i32 1, i32 8)
  %v0_ff00 = load i32, i32* @r4, align 4
  %v1_ff00 = inttoptr i32 %v0_ff00 to i8*
  store i32 %v0_ff00, i32* %r0.global-to-local, align 4
  %v3_ff04 = call i32 @function_12ad0(i8* %v1_ff00)
  %v2_ff0c = ptrtoint i32* %stack_var_-2228 to i32
  store i32 %v2_ff0c, i32* %fp.global-to-local, align 4
  %v2_ff10 = ptrtoint i8* %stack_var_-2240 to i32
  %v1_ff14 = add i32 %v3_ff04, 1
  store i32 %v1_ff14, i32* %r0.global-to-local, align 4
  %v2_ff18 = ptrtoint i32* %stack_var_-2227 to i32
  store i32 %v2_ff18, i32* %r2.global-to-local, align 4
  store i32 %v2_ff0c, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_ff58162 = icmp eq i32 %v1_ff14, 0
  store i1 %v2_ff58162, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_ff60163 = or i32 %v2_ff18, 1
  store i32 %v1_ff60163, i32* %r1.global-to-local, align 4
  %tmp124164 = icmp slt i32 %v1_ff14, 1
  br i1 %tmp124164, label %dec_label_pc_ff68, label %dec_label_pc_ff28.lr.ph

dec_label_pc_ff28.lr.ph:                          ; preds = %dec_label_pc_fee0
  %v0_ff28.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ff28

dec_label_pc_ff28:                                ; preds = %dec_label_pc_ff28.lr.ph, %.thread12
  %v1_ff3c176.off0 = phi i8 [ 0, %dec_label_pc_ff28.lr.ph ], [ %extract.t179, %.thread12 ]
  %v0_ff28 = phi i32 [ %v0_ff28.pre, %dec_label_pc_ff28.lr.ph ], [ %v1_ff4c, %.thread12 ]
  %v2_ff6c165 = phi i32 [ %v2_ff18, %dec_label_pc_ff28.lr.ph ], [ %v0_ff54, %.thread12 ]
  %v1_ff28 = inttoptr i32 %v0_ff28 to i8*
  %v2_ff28 = load i8, i8* %v1_ff28, align 1
  %v3_ff28 = zext i8 %v2_ff28 to i32
  store i32 %v3_ff28, i32* %r3.global-to-local, align 4
  %v2_ff2c = icmp eq i8 %v2_ff28, 0
  store i1 %v2_ff2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ff2c, label %.thread6, label %bb

bb:                                               ; preds = %dec_label_pc_ff28
  %v8_ff30 = icmp eq i8 %v2_ff28, 46
  store i1 %v8_ff30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ff30, label %.thread6, label %.thread

.thread:                                          ; preds = %bb
  %v4_ff34 = inttoptr i32 %v2_ff6c165 to i8*
  store i8 %v2_ff28, i8* %v4_ff34, align 1
  %v5_ff34 = load i32, i32* %r2.global-to-local, align 4
  %v6_ff34 = add i32 %v5_ff34, 1
  store i32 %v6_ff34, i32* %r2.global-to-local, align 4
  %v0_ff38.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ff38.pr.pr, label %.thread..thread6_crit_edge, label %bb122

.thread..thread6_crit_edge:                       ; preds = %.thread
  %v1_ff3c.pre = load i32, i32* %lr.global-to-local, align 4
  %extract.t = trunc i32 %v1_ff3c.pre to i8
  br label %.thread6

.thread6:                                         ; preds = %.thread..thread6_crit_edge, %bb, %dec_label_pc_ff28
  %v1_ff3c.off0 = phi i8 [ %extract.t, %.thread..thread6_crit_edge ], [ %v1_ff3c176.off0, %bb ], [ %v1_ff3c176.off0, %dec_label_pc_ff28 ]
  %v3_ff3c = load i32, i32* %r5.global-to-local, align 4
  %v4_ff3c = inttoptr i32 %v3_ff3c to i8*
  store i8 %v1_ff3c.off0, i8* %v4_ff3c, align 1
  %v0_ff40.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ff40.pr, label %bb123, label %..thread12_crit_edge

bb122:                                            ; preds = %.thread
  store i32 %v6_ff34, i32* %r1.global-to-local, align 4
  %v1_ff40 = load i32, i32* %ip.global-to-local, align 4
  %v2_ff40 = urem i32 %v1_ff40, 256
  store i32 %v2_ff40, i32* %lr.global-to-local, align 4
  br label %.thread12

..thread12_crit_edge:                             ; preds = %.thread6
  %v1_ff4010 = load i32, i32* %ip.global-to-local, align 4
  %v2_ff4011 = urem i32 %v1_ff4010, 256
  store i32 %v2_ff4011, i32* %lr.global-to-local, align 4
  br label %.thread12

bb123:                                            ; preds = %.thread6
  %v1_ff44.pre = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_ff44.pre, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %bb122, %..thread12_crit_edge, %bb123
  %v0_ff5c.pre = phi i32 [ %v2_ff4011, %..thread12_crit_edge ], [ %v2_ff40, %bb122 ], [ 0, %bb123 ]
  %v0_ff4c = load i32, i32* @r4, align 4
  %v1_ff4c = add i32 %v0_ff4c, 1
  store i32 %v1_ff4c, i32* @r4, align 4
  %v0_ff50 = load i32, i32* %r0.global-to-local, align 4
  %v1_ff50 = add i32 %v0_ff50, -1
  store i32 %v1_ff50, i32* %r0.global-to-local, align 4
  %v0_ff54 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_ff54, i32* %r2.global-to-local, align 4
  %v2_ff58 = icmp eq i32 %v1_ff50, 0
  store i1 %v2_ff58, i1* %cpsr_z.global-to-local, align 1
  %v1_ff5c = add nuw nsw i32 %v0_ff5c.pre, 1
  store i32 %v1_ff5c, i32* %ip.global-to-local, align 4
  %v1_ff60 = add i32 %v0_ff54, 1
  store i32 %v1_ff60, i32* %r1.global-to-local, align 4
  %tmp124 = icmp slt i32 %v1_ff50, 1
  %extract.t179 = trunc i32 %v0_ff5c.pre to i8
  br i1 %tmp124, label %dec_label_pc_ff68, label %dec_label_pc_ff28

dec_label_pc_ff68:                                ; preds = %.thread12, %dec_label_pc_fee0
  %v2_ff6c.lcssa = phi i32 [ %v2_ff18, %dec_label_pc_fee0 ], [ %v0_ff54, %.thread12 ]
  %v3_fef8 = inttoptr i32 %v2_fef8 to i8*
  store i32 0, i32* @r4, align 4
  %v3_ff6c = inttoptr i32 %v2_ff6c.lcssa to i8*
  store i8 0, i8* %v3_ff6c, align 1
  store i32 %v2_ff0c, i32* %r0.global-to-local, align 4
  %v1_ff74 = bitcast i32* %stack_var_-2228 to i8*
  %v2_ff74 = call i32 @function_12ad0(i8* %v1_ff74)
  %v2_ff78 = ptrtoint i32* %stack_var_-216 to i32
  store i32 %v2_ff78, i32* %r1.global-to-local, align 4
  %v0_ff7c = load i32, i32* %fp.global-to-local, align 4
  %v2_ff7c = add i32 %v0_ff7c, %v2_ff74
  store i32 %v2_ff7c, i32* @r5, align 4
  %v0_ff80 = load i32, i32* @r4, align 4
  store i32 %v0_ff80, i32* %stack_var_-64, align 4
  store i32 %v2_ff0c, i32* %r0.global-to-local, align 4
  %v2_ff94 = call i32 @function_12ad0(i8* %v1_ff74)
  %v1_ff98 = add i32 %v2_ff94, 17
  store i32 %v1_ff98, i32* %r0.global-to-local, align 4
  %v0_ffa0 = call i32 @function_fbfc()
  store i32 %v0_ffa0, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r1.global-to-local, align 4
  %v2_ffac = call i32 @function_131ec(i32 %v0_ffa0, i32 65535)
  store i32 16, i32* %r1.global-to-local, align 4
  %v6_ffb8 = urem i32 %v2_ffac, 65536
  store i32 %v6_ffb8, i32* %r3.global-to-local, align 4
  %v2_ffc0 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_ffc0, i32* %r0.global-to-local, align 4
  %v2_ffc8 = call i32 @function_12b70(i32 %v2_ffc0, i32 16)
  %sext = mul i32 %v2_ffac, 16777216
  %v4_ffcc = sdiv i32 %sext, 16777216
  store i32 2, i32* %stack_var_-64, align 4
  store i32 %v2_ff78, i32* %r3.global-to-local, align 4
  store i32 53, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v4_ffcc, i32* %lr.global-to-local, align 4
  %v0_10014 = load i32, i32* @r5, align 4
  %v2_10014 = add i32 %v0_10014, 1
  store i32 %v2_10014, i32* %ip.global-to-local, align 4
  %v2_10018 = ptrtoint i8* %stack_var_-4288 to i32
  store i32 %v2_10018, i32* %r1.global-to-local, align 4
  %v5_1001c = trunc i32 %v4_ffcc to i8
  store i8 %v5_1001c, i8* %stack_var_-2240, align 1
  %v0_10034 = load i32, i32* @r4, align 4
  %v1_10034 = trunc i32 %v0_10034 to i8
  %v4_10034 = inttoptr i32 %v2_10014 to i8*
  store i8 %v1_10034, i8* %v4_10034, align 1
  %v0_10038 = load i32, i32* @r4, align 4
  %v1_10038 = trunc i32 %v0_10038 to i8
  %v2_10038 = load i32, i32* %ip.global-to-local, align 4
  %v3_10038 = add i32 %v2_10038, 2
  %v4_10038 = inttoptr i32 %v3_10038 to i8*
  store i8 %v1_10038, i8* %v4_10038, align 1
  %v0_1003c = load i32, i32* %r0.global-to-local, align 4
  %v1_1003c = trunc i32 %v0_1003c to i8
  %v2_1003c = load i32, i32* %ip.global-to-local, align 4
  %v3_1003c = add i32 %v2_1003c, 3
  %v4_1003c = inttoptr i32 %v3_1003c to i8*
  store i8 %v1_1003c, i8* %v4_1003c, align 1
  %v0_10040 = load i32, i32* %r0.global-to-local, align 4
  %v1_10040 = trunc i32 %v0_10040 to i8
  %v2_10040 = load i32, i32* %ip.global-to-local, align 4
  %v3_10040 = add i32 %v2_10040, 1
  %v4_10040 = inttoptr i32 %v3_10040 to i8*
  store i8 %v1_10040, i8* %v4_10040, align 1
  %v0_10048 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10048, i32* %sl.global-to-local, align 4
  %v2_10050 = ptrtoint i32* %stack_var_-192 to i32
  store i32 %v2_10050, i32* @r6, align 4
  %v3_10088 = bitcast i32* %stack_var_-64 to %sockaddr*
  %v4_100a4 = bitcast i8* %stack_var_-2240 to i32*
  %v2_100f4 = ptrtoint i32* %stack_var_-36 to i32
  %v2_10120 = ptrtoint i32* %stack_var_-48 to i32
  %v6_1017c = bitcast i8* %stack_var_-4288 to i32*
  %v1_101f8 = add i32 %v2_10018, 12
  %v1_10200 = inttoptr i32 %v1_101f8 to i8*
  %v1_10214 = add i32 %v2_10018, 1
  %v2_10214 = inttoptr i32 %v1_10214 to i8*
  %v1_10230 = add i32 %v2_10018, 6
  %v2_10230 = inttoptr i32 %v1_10230 to i8*
  %v1_10234 = add i32 %v2_10018, 7
  %v2_10234 = inttoptr i32 %v1_10234 to i8*
  br label %dec_label_pc_10054

dec_label_pc_10054:                               ; preds = %dec_label_pc_101a8, %dec_label_pc_ff68
  %v1_10058 = phi i32 [ %v0_10054.pre, %dec_label_pc_101a8 ], [ -1, %dec_label_pc_ff68 ]
  %v7_10054 = icmp eq i32 %v1_10058, -1
  store i1 %v7_10054, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10054, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_10054
  store i32 %v1_10058, i32* %r0.global-to-local, align 4
  br label %bb126

bb126:                                            ; preds = %dec_label_pc_10054, %bb125
  store i32 65632, i32* @lr, align 4
  %v1_1005c = xor i1 %v7_10054, true
  call void @__pseudo_cond_branch(i1 %v1_1005c, i32 ptrtoint (i32* @global_var_13490.25 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_1006c = call i32 @function_13d90(i32 2, i32 2, i32 0)
  store i32 %v3_1006c, i32* %r0.global-to-local, align 4
  %v7_10070 = icmp eq i32 %v3_1006c, -1
  store i1 %v7_10070, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_1006c, i32* @r7, align 4
  br i1 %v7_10070, label %dec_label_pc_101e8, label %dec_label_pc_1007c

dec_label_pc_1007c:                               ; preds = %bb126
  store i32 %v2_ffc0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_10088 = call i32 @function_13bec(i32 %v3_1006c, %sockaddr* %v3_10088, i32 16)
  store i32 %v4_10088, i32* %r0.global-to-local, align 4
  %v7_1008c = icmp eq i32 %v4_10088, -1
  store i1 %v7_1008c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1008c, label %dec_label_pc_101b0, label %dec_label_pc_10094

dec_label_pc_10094:                               ; preds = %dec_label_pc_1007c
  %v0_10094 = load i32, i32* @r7, align 4
  store i32 %v0_10094, i32* %r0.global-to-local, align 4
  store i32 %v2_ff10, i32* %r1.global-to-local, align 4
  store i32 %v1_ff98, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_100a4 = call i32 @function_13d00(i32 %v0_10094, i32* %v4_100a4, i32 %v1_ff98, i32 16384)
  store i32 %v5_100a4, i32* %r0.global-to-local, align 4
  %v7_100a8 = icmp eq i32 %v5_100a4, -1
  store i1 %v7_100a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_100a8, label %dec_label_pc_101b0, label %dec_label_pc_100b0

dec_label_pc_100b0:                               ; preds = %dec_label_pc_10094
  %v0_100b0 = load i32, i32* @r7, align 4
  store i32 %v0_100b0, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_100bc = call i32 @function_133a0(i32 3, i32 %v0_100b0)
  store i32 0, i32* @r4, align 4
  %v1_100c4 = or i32 %v2_100bc, 2048
  store i32 %v1_100c4, i32* @r2, align 4
  %v0_100c8 = load i32, i32* @r7, align 4
  store i32 %v0_100c8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_100d0 = call i32 @function_133a0(i32 4, i32 %v0_100c8)
  store i32 %v2_100d0, i32* %r0.global-to-local, align 4
  %v0_100d4 = load i32, i32* @r4, align 4
  store i32 %v0_100d4, i32* %r3.global-to-local, align 4
  %v2_100d8154 = load i32, i32* @r6, align 4
  %v3_100d8155 = add i32 %v2_100d8154, %v0_100d4
  %v4_100d8156 = inttoptr i32 %v3_100d8155 to i32*
  store i32 %v0_100d4, i32* %v4_100d8156, align 4
  %v0_100dc157 = load i32, i32* %r3.global-to-local, align 4
  %v1_100dc158 = add i32 %v0_100dc157, 4
  store i32 %v1_100dc158, i32* %r3.global-to-local, align 4
  %v7_100e0159 = icmp eq i32 %v1_100dc158, 128
  br i1 %v7_100e0159, label %dec_label_pc_100e8, label %dec_label_pc_100d8.dec_label_pc_100d8_crit_edge

dec_label_pc_100d8.dec_label_pc_100d8_crit_edge:  ; preds = %dec_label_pc_100b0, %dec_label_pc_100d8.dec_label_pc_100d8_crit_edge
  %v1_100dc160 = phi i32 [ %v1_100dc, %dec_label_pc_100d8.dec_label_pc_100d8_crit_edge ], [ %v1_100dc158, %dec_label_pc_100b0 ]
  %v0_100d8.pre = load i32, i32* @r4, align 4
  %v2_100d8 = load i32, i32* @r6, align 4
  %v3_100d8 = add i32 %v2_100d8, %v1_100dc160
  %v4_100d8 = inttoptr i32 %v3_100d8 to i32*
  store i32 %v0_100d8.pre, i32* %v4_100d8, align 4
  %v0_100dc = load i32, i32* %r3.global-to-local, align 4
  %v1_100dc = add i32 %v0_100dc, 4
  store i32 %v1_100dc, i32* %r3.global-to-local, align 4
  %v7_100e0 = icmp eq i32 %v1_100dc, 128
  br i1 %v7_100e0, label %dec_label_pc_100e8, label %dec_label_pc_100d8.dec_label_pc_100d8_crit_edge

dec_label_pc_100e8:                               ; preds = %dec_label_pc_100d8.dec_label_pc_100d8_crit_edge, %dec_label_pc_100b0
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_100e8 = load i32, i32* @r7, align 4
  %v3_100e8 = udiv i32 %v0_100e8, 32
  %v3_100f0 = mul nuw nsw i32 %v3_100e8, 4
  store i32 %v3_100f0, i32* %r3.global-to-local, align 4
  store i32 %v2_100f4, i32* %r2.global-to-local, align 4
  %v2_100f8 = add i32 %v3_100f0, %v2_100f4
  store i32 %v2_100f8, i32* @r5, align 4
  %v1_100fc = add i32 %v2_100f8, -156
  %v2_100fc = inttoptr i32 %v1_100fc to i32*
  %v3_100fc = load i32, i32* %v2_100fc, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_10104 = urem i32 %v0_100e8, 32
  store i32 %v1_10104, i32* @r8, align 4
  %v7_10108 = shl i32 1, %v1_10104
  %v8_10108 = or i32 %v3_100fc, %v7_10108
  store i32 5, i32* %ip.global-to-local, align 4
  store i32 %v8_10108, i32* %v2_100fc, align 4
  %v0_10118 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_10118, i32* %stack_var_-48, align 4
  store i32 %v2_10120, i32* @lr, align 4
  store i32 %v2_ff78, i32* %ip.global-to-local, align 4
  %v0_10128 = load i32, i32* @r7, align 4
  %v1_10128 = load i32, i32* %r3.global-to-local, align 4
  %v2_10128 = add i32 %v1_10128, %v0_10128
  store i32 %v2_10128, i32* %r0.global-to-local, align 4
  store i32 %v2_10050, i32* %r1.global-to-local, align 4
  %v0_10134 = load i32, i32* @r4, align 4
  store i32 %v0_10134, i32* %r2.global-to-local, align 4
  store i32 %v0_10134, i32* %r3.global-to-local, align 4
  %v5_10140 = call i32 @function_136b0(i32 %v2_10128, i32 %v2_10050, i32 %v0_10134, i32 %v0_10134, i32 %v2_10120)
  store i32 %v5_10140, i32* %r0.global-to-local, align 4
  %v7_10144 = icmp eq i32 %v5_10140, -1
  store i1 %v7_10144, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10144, label %dec_label_pc_101c0, label %dec_label_pc_1014c

dec_label_pc_1014c:                               ; preds = %dec_label_pc_100e8
  %v2_1014c = icmp eq i32 %v5_10140, 0
  store i1 %v2_1014c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1014c, label %dec_label_pc_101a0, label %dec_label_pc_10154

dec_label_pc_10154:                               ; preds = %dec_label_pc_1014c
  %v0_10154 = load i32, i32* @r5, align 4
  %v1_10154 = add i32 %v0_10154, -156
  %v2_10154 = inttoptr i32 %v1_10154 to i32*
  %v3_10154 = load i32, i32* %v2_10154, align 4
  %v1_10158 = load i32, i32* @r8, align 4
  %v6_10158 = ashr i32 %v3_10154, %v1_10158
  store i32 %v6_10158, i32* %r3.global-to-local, align 4
  %v1_1015c = urem i32 %v6_10158, 2
  %v2_1015c = icmp eq i32 %v1_1015c, 0
  store i1 %v2_1015c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1015c, label %dec_label_pc_101c0, label %dec_label_pc_10164

dec_label_pc_10164:                               ; preds = %dec_label_pc_10154
  store i32 %v2_10018, i32* %r1.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10170 = load i32, i32* @r7, align 4
  store i32 %v0_10170, i32* %r0.global-to-local, align 4
  %v0_10174 = load i32, i32* @r4, align 4
  %v7_1017c = call i32 @function_13ccc(i32 %v0_10170, i32* %v6_1017c, i32 2048, i32 16384, i32 %v0_10174, i32 %v0_10174)
  store i32 %v7_1017c, i32* %r4.global-to-local, align 4
  %v0_10184 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_10184, i32* %r0.global-to-local, align 4
  %v1_10188 = inttoptr i32 %v0_10184 to i8*
  %v2_10188 = call i32 @function_12ad0(i8* %v1_10188)
  %v1_1018c = add i32 %v2_10188, 17
  store i32 %v1_1018c, i32* %r0.global-to-local, align 4
  %v0_10190 = load i32, i32* %r4.global-to-local, align 4
  %v3_10190 = icmp ult i32 %v0_10190, %v1_1018c
  %v9_10190 = icmp eq i32 %v0_10190, %v1_1018c
  store i1 %v9_10190, i1* %cpsr_z.global-to-local, align 1
  store i32 -4252, i32* @r4, align 4
  br i1 %v3_10190, label %dec_label_pc_101a0, label %dec_label_pc_101f4

dec_label_pc_101a0:                               ; preds = %dec_label_pc_10164, %dec_label_pc_101f4, %dec_label_pc_10230, %dec_label_pc_1014c, %dec_label_pc_101e8
  %v0_101a0 = load i32, i32* %sl.global-to-local, align 4
  %v7_101a0 = icmp eq i32 %v0_101a0, 5
  store i1 %v7_101a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101a0, label %dec_label_pc_101c0, label %dec_label_pc_101a8

dec_label_pc_101a8:                               ; preds = %dec_label_pc_101b0, %dec_label_pc_101a0
  %v0_101a8 = phi i32 [ %v0_101b8, %dec_label_pc_101b0 ], [ %v0_101a0, %dec_label_pc_101a0 ]
  %v1_101a8 = add i32 %v0_101a8, 1
  store i32 %v1_101a8, i32* %sl.global-to-local, align 4
  %v0_10054.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10054

dec_label_pc_101b0:                               ; preds = %dec_label_pc_10094, %dec_label_pc_1007c
  %v0_101b0 = phi i32 [ %v5_100a4, %dec_label_pc_10094 ], [ %v4_10088, %dec_label_pc_1007c ]
  %v1_101b0 = add i32 %v0_101b0, 2
  store i32 %v1_101b0, i32* %r0.global-to-local, align 4
  %v1_101b4 = call i32 @function_148c4(i32 %v1_101b0)
  store i32 %v1_101b4, i32* %r0.global-to-local, align 4
  %v0_101b8 = load i32, i32* %sl.global-to-local, align 4
  %v7_101b8 = icmp eq i32 %v0_101b8, 5
  store i1 %v7_101b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101b8, label %dec_label_pc_101c0, label %dec_label_pc_101a8

dec_label_pc_101c0:                               ; preds = %dec_label_pc_101b0, %dec_label_pc_101a0, %dec_label_pc_10154, %dec_label_pc_100e8, %dec_label_pc_10240, %dec_label_pc_1024c.backedge
  %v0_101c0 = load i32, i32* @r7, align 4
  store i32 %v0_101c0, i32* %r0.global-to-local, align 4
  %v1_101c4 = call i32 @function_13490(i32 %v0_101c0)
  store i32 %v1_101c4, i32* %r0.global-to-local, align 4
  store i32 %v2_fef8, i32* %r2.global-to-local, align 4
  %v2_101cc = load i8, i8* %v3_fef8, align 1
  %v3_101cc = zext i8 %v2_101cc to i32
  store i32 %v3_101cc, i32* @r4, align 4
  %v2_101d0 = icmp eq i8 %v2_101cc, 0
  store i1 %v2_101d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_101d0, label %dec_label_pc_1032c, label %dec_label_pc_101d8

dec_label_pc_101d8:                               ; preds = %dec_label_pc_101c0, %dec_label_pc_1032c
  %stack_var_-4300.0 = phi i8* [ %v5_10340, %dec_label_pc_1032c ], [ %v3_fef8, %dec_label_pc_101c0 ]
  %v4_101d8 = ptrtoint i8* %stack_var_-4300.0 to i32
  store i32 %v4_101d8, i32* %r0.global-to-local, align 4
  %v2_101e4 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_101e4, i32* @r4, align 4
  store i32 %v6_fee0, i32* @r5, align 4
  store i32 %v9_fee0, i32* @r6, align 4
  store i32 %v12_fee0, i32* @r7, align 4
  store i32 %v15_fee0, i32* @r8, align 4
  ret i32 %v4_101d8

dec_label_pc_101e8:                               ; preds = %bb126
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_101ec = call i32 @function_148c4(i32 1)
  store i32 %v1_101ec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_101a0

dec_label_pc_101f4:                               ; preds = %dec_label_pc_10164
  store i32 %v2_10018, i32* %lr.global-to-local, align 4
  store i32 %v1_101f8, i32* %fp.global-to-local, align 4
  store i32 %v1_101f8, i32* %r0.global-to-local, align 4
  %v2_10200 = call i32 @function_12ad0(i8* %v1_10200)
  store i32 %v2_10200, i32* %r0.global-to-local, align 4
  store i32 %v2_10018, i32* %ip.global-to-local, align 4
  store i32 %v2_100f4, i32* %r1.global-to-local, align 4
  %v4_10210 = load i8, i8* %stack_var_-4288, align 1
  %v5_10210 = sext i8 %v4_10210 to i32
  store i32 %v5_10210, i32* %r3.global-to-local, align 4
  %v3_10214 = load i8, i8* %v2_10214, align 1
  %v4_10214 = zext i8 %v3_10214 to i32
  store i32 %v4_10214, i32* %r2.global-to-local, align 4
  store i32 %v4_ffcc, i32* @lr, align 4
  %v4_1021c = mul nuw nsw i32 %v4_10214, 256
  %v5_1021c = or i32 %v4_1021c, %v5_10210
  store i32 %v5_1021c, i32* %r3.global-to-local, align 4
  %v0_10220 = load i32, i32* %fp.global-to-local, align 4
  %v9_10224 = icmp eq i32 %v5_1021c, %v4_ffcc
  store i1 %v9_10224, i1* %cpsr_z.global-to-local, align 1
  %v2_10220 = add i32 %v2_10200, 5
  %v1_10228 = add i32 %v2_10220, %v0_10220
  store i32 %v1_10228, i32* %r0.global-to-local, align 4
  br i1 %v9_10224, label %dec_label_pc_10230, label %dec_label_pc_101a0

dec_label_pc_10230:                               ; preds = %dec_label_pc_101f4
  %v3_10230 = load i8, i8* %v2_10230, align 1
  %v4_10230 = zext i8 %v3_10230 to i32
  store i32 %v4_10230, i32* %r2.global-to-local, align 4
  %v3_10234 = load i8, i8* %v2_10234, align 1
  %v4_10234 = zext i8 %v3_10234 to i32
  store i32 %v4_10234, i32* %r3.global-to-local, align 4
  %v4_10238 = mul nuw nsw i32 %v4_10234, 256
  %v5_10238 = or i32 %v4_10238, %v4_10230
  store i32 %v5_10238, i32* %r2.global-to-local, align 4
  %v7_10238 = icmp eq i32 %v5_10238, 0
  store i1 %v7_10238, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10238, label %dec_label_pc_101a0, label %dec_label_pc_10240

dec_label_pc_10240:                               ; preds = %dec_label_pc_10230
  %v3_10244 = mul nuw nsw i32 %v4_10230, 256
  %v5_10248 = or i32 %v4_10234, %v3_10244
  %v1_10300 = add i32 %v2_10018, -49152
  %v1_1024c143 = add nsw i32 %v5_10248, -1
  %v3_10250144 = mul i32 %v1_1024c143, 65536
  store i32 %v3_10250144, i32* %r3.global-to-local, align 4
  %v7_10254150 = icmp eq i32 %v3_10250144, -65536
  store i1 %v7_10254150, i1* %cpsr_z.global-to-local, align 1
  %v3_10258151 = urem i32 %v1_1024c143, 65536
  store i32 %v3_10258151, i32* @r6, align 4
  br i1 %v7_10254150, label %dec_label_pc_101c0, label %dec_label_pc_10260.lr.ph

dec_label_pc_10260.lr.ph:                         ; preds = %dec_label_pc_10240
  %v1_103dc = add i32 %v2_fef8, 4
  %v2_103dc = inttoptr i32 %v1_103dc to i32*
  br label %dec_label_pc_10260

dec_label_pc_10260:                               ; preds = %dec_label_pc_10260.lr.ph, %dec_label_pc_1024c.backedge
  %v3_10258153 = phi i32 [ %v3_10258151, %dec_label_pc_10260.lr.ph ], [ %v3_10258, %dec_label_pc_1024c.backedge ]
  %v0_102b4152 = phi i32 [ %v1_10228, %dec_label_pc_10260.lr.ph ], [ %storemerge, %dec_label_pc_1024c.backedge ]
  store i32 %v0_102b4152, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_1026c17 = inttoptr i32 %v0_102b4152 to i8*
  %v2_1026c18 = load i8, i8* %v1_1026c17, align 1
  %v3_1026c19 = zext i8 %v2_1026c18 to i32
  store i32 %v3_1026c19, i32* %r2.global-to-local, align 4
  %v2_1027020 = icmp eq i8 %v2_1026c18, 0
  store i1 %v2_1027020, i1* %cpsr_z.global-to-local, align 1
  %v3_1027421 = mul nuw nsw i32 %v3_1026c19, 256
  store i32 %v3_1027421, i32* %r1.global-to-local, align 4
  br i1 %v2_1027020, label %dec_label_pc_102ac, label %dec_label_pc_1027c.preheader

dec_label_pc_1027c.preheader:                     ; preds = %dec_label_pc_10260, %dec_label_pc_1026c.backedge
  %v1_10350 = phi i32 [ %v1_1035049, %dec_label_pc_1026c.backedge ], [ 1, %dec_label_pc_10260 ]
  %v0_1034847 = phi i32 [ %v0_10348, %dec_label_pc_1026c.backedge ], [ 0, %dec_label_pc_10260 ]
  %v0_1028845 = phi i32 [ %v3_10274, %dec_label_pc_1026c.backedge ], [ %v3_1027421, %dec_label_pc_10260 ]
  %v0_1028443 = phi i32 [ %v1_1034c, %dec_label_pc_1026c.backedge ], [ %v0_102b4152, %dec_label_pc_10260 ]
  %v0_1027c41 = phi i32 [ %v3_1026c, %dec_label_pc_1026c.backedge ], [ %v3_1026c19, %dec_label_pc_10260 ]
  br label %dec_label_pc_1027c

dec_label_pc_1027c:                               ; preds = %dec_label_pc_1027c.preheader, %dec_label_pc_10284
  %v0_10348 = phi i32 [ %v0_1034847, %dec_label_pc_1027c.preheader ], [ 1, %dec_label_pc_10284 ]
  %v0_10288 = phi i32 [ %v0_1028845, %dec_label_pc_1027c.preheader ], [ %v3_102a4, %dec_label_pc_10284 ]
  %v0_1034c = phi i32 [ %v0_1028443, %dec_label_pc_1027c.preheader ], [ %v2_10294, %dec_label_pc_10284 ]
  %v0_1027c = phi i32 [ %v0_1027c41, %dec_label_pc_1027c.preheader ], [ %v3_10298, %dec_label_pc_10284 ]
  %v7_1027c = icmp eq i32 %v0_1027c, 191
  store i1 %v7_1027c, i1* %cpsr_z.global-to-local, align 1
  %tmp180 = icmp ult i32 %v0_1027c, 192
  br i1 %tmp180, label %dec_label_pc_10348, label %dec_label_pc_10284

dec_label_pc_10284:                               ; preds = %dec_label_pc_1027c
  %v1_10284 = add i32 %v0_1034c, 1
  %v2_10284 = inttoptr i32 %v1_10284 to i8*
  %v3_10284 = load i8, i8* %v2_10284, align 1
  %v4_10284 = zext i8 %v3_10284 to i32
  store i32 %v2_10018, i32* %r1.global-to-local, align 4
  %v2_10288 = add i32 %v0_10288, %v1_10300
  %v2_10294 = add i32 %v2_10288, %v4_10284
  store i32 %v2_10294, i32* %r3.global-to-local, align 4
  %v1_10298 = inttoptr i32 %v2_10294 to i8*
  %v2_10298 = load i8, i8* %v1_10298, align 1
  %v3_10298 = zext i8 %v2_10298 to i32
  store i32 %v3_10298, i32* %r2.global-to-local, align 4
  %v2_1029c = icmp eq i8 %v2_10298, 0
  store i1 %v2_1029c, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @lr, align 4
  %v3_102a4 = mul nuw nsw i32 %v3_10298, 256
  store i32 %v3_102a4, i32* %r1.global-to-local, align 4
  br i1 %v2_1029c, label %dec_label_pc_102ac, label %dec_label_pc_1027c

dec_label_pc_102ac:                               ; preds = %dec_label_pc_1026c.backedge, %dec_label_pc_10284, %dec_label_pc_10260
  %v1_102b0 = phi i32 [ 1, %dec_label_pc_10260 ], [ %v1_10350, %dec_label_pc_10284 ], [ %v1_1035049, %dec_label_pc_1026c.backedge ]
  %v0_102ac = phi i32 [ 0, %dec_label_pc_10260 ], [ 1, %dec_label_pc_10284 ], [ %v0_10348, %dec_label_pc_1026c.backedge ]
  %v7_102ac = icmp eq i32 %v0_102ac, 1
  store i1 %v7_102ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_102ac, label %bb127, label %bb128

bb127:                                            ; preds = %dec_label_pc_102ac
  %v2_102b0 = add i32 %v1_102b0, 1
  store i32 %v2_102b0, i32* %ip.global-to-local, align 4
  br label %bb128

bb128:                                            ; preds = %dec_label_pc_102ac, %bb127
  %v1_102b4 = phi i32 [ %v1_102b0, %dec_label_pc_102ac ], [ %v2_102b0, %bb127 ]
  %v2_102b4 = add i32 %v1_102b4, %v0_102b4152
  store i32 %v2_102b4, i32* @r4, align 4
  %v3_102b8 = inttoptr i32 %v2_102b4 to i8*
  %v4_102b8 = load i8, i8* %v3_102b8, align 1
  %v6_102b8 = zext i8 %v4_102b8 to i32
  store i32 %v6_102b8, i32* %r3.global-to-local, align 4
  %v1_102bc = add i32 %v2_102b4, 1
  %v2_102bc = inttoptr i32 %v1_102bc to i8*
  %v3_102bc = load i8, i8* %v2_102bc, align 1
  %v4_102bc = zext i8 %v3_102bc to i32
  store i32 %v4_102bc, i32* %r2.global-to-local, align 4
  %v4_102c0 = mul nuw nsw i32 %v4_102bc, 256
  %v5_102c0 = or i32 %v4_102c0, %v6_102b8
  store i32 %v5_102c0, i32* %r3.global-to-local, align 4
  %v7_102c4 = icmp eq i32 %v5_102c0, 256
  store i1 %v7_102c4, i1* %cpsr_z.global-to-local, align 1
  %v1_102c8 = add i32 %v2_102b4, 10
  store i32 %v1_102c8, i32* @r5, align 4
  br i1 %v7_102c4, label %dec_label_pc_10368, label %dec_label_pc_102d0

dec_label_pc_102d0:                               ; preds = %dec_label_pc_10368, %bb128
  store i32 %v1_102c8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_102dc23 = inttoptr i32 %v1_102c8 to i8*
  %v2_102dc24 = load i8, i8* %v1_102dc23, align 1
  %v3_102dc25 = zext i8 %v2_102dc24 to i32
  store i32 %v3_102dc25, i32* %r2.global-to-local, align 4
  %v2_102e026 = icmp eq i8 %v2_102dc24, 0
  store i1 %v2_102e026, i1* %cpsr_z.global-to-local, align 1
  %v3_102e427 = mul nuw nsw i32 %v3_102dc25, 256
  store i32 %v3_102e427, i32* %r1.global-to-local, align 4
  br i1 %v2_102e026, label %dec_label_pc_1031c, label %dec_label_pc_102ec.preheader

dec_label_pc_102ec.preheader:                     ; preds = %dec_label_pc_102d0, %dec_label_pc_102dc.backedge
  %v1_10360 = phi i32 [ %v1_1036064, %dec_label_pc_102dc.backedge ], [ 1, %dec_label_pc_102d0 ]
  %v0_1035862 = phi i32 [ %v0_10358, %dec_label_pc_102dc.backedge ], [ 0, %dec_label_pc_102d0 ]
  %v0_102f860 = phi i32 [ %v3_102e4, %dec_label_pc_102dc.backedge ], [ %v3_102e427, %dec_label_pc_102d0 ]
  %v0_102f458 = phi i32 [ %v1_1035c, %dec_label_pc_102dc.backedge ], [ %v1_102c8, %dec_label_pc_102d0 ]
  %v0_102ec56 = phi i32 [ %v3_102dc, %dec_label_pc_102dc.backedge ], [ %v3_102dc25, %dec_label_pc_102d0 ]
  br label %dec_label_pc_102ec

dec_label_pc_102ec:                               ; preds = %dec_label_pc_102ec.preheader, %dec_label_pc_102f4
  %v0_10358 = phi i32 [ %v0_1035862, %dec_label_pc_102ec.preheader ], [ 1, %dec_label_pc_102f4 ]
  %v0_102f8 = phi i32 [ %v0_102f860, %dec_label_pc_102ec.preheader ], [ %v3_10314, %dec_label_pc_102f4 ]
  %v0_1035c = phi i32 [ %v0_102f458, %dec_label_pc_102ec.preheader ], [ %v2_10304, %dec_label_pc_102f4 ]
  %v0_102ec = phi i32 [ %v0_102ec56, %dec_label_pc_102ec.preheader ], [ %v3_10308, %dec_label_pc_102f4 ]
  %v7_102ec = icmp eq i32 %v0_102ec, 191
  store i1 %v7_102ec, i1* %cpsr_z.global-to-local, align 1
  %tmp181 = icmp ult i32 %v0_102ec, 192
  br i1 %tmp181, label %dec_label_pc_10358, label %dec_label_pc_102f4

dec_label_pc_102f4:                               ; preds = %dec_label_pc_102ec
  %v1_102f4 = add i32 %v0_1035c, 1
  %v2_102f4 = inttoptr i32 %v1_102f4 to i8*
  %v3_102f4 = load i8, i8* %v2_102f4, align 1
  %v4_102f4 = zext i8 %v3_102f4 to i32
  store i32 %v2_10018, i32* %r1.global-to-local, align 4
  %v2_102f8 = add i32 %v0_102f8, %v1_10300
  %v2_10304 = add i32 %v2_102f8, %v4_102f4
  store i32 %v2_10304, i32* %r3.global-to-local, align 4
  %v1_10308 = inttoptr i32 %v2_10304 to i8*
  %v2_10308 = load i8, i8* %v1_10308, align 1
  %v3_10308 = zext i8 %v2_10308 to i32
  store i32 %v3_10308, i32* %r2.global-to-local, align 4
  %v2_1030c = icmp eq i8 %v2_10308, 0
  store i1 %v2_1030c, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v3_10314 = mul nuw nsw i32 %v3_10308, 256
  store i32 %v3_10314, i32* %r1.global-to-local, align 4
  br i1 %v2_1030c, label %dec_label_pc_1031c, label %dec_label_pc_102ec

dec_label_pc_1031c:                               ; preds = %dec_label_pc_102dc.backedge, %dec_label_pc_102f4, %dec_label_pc_102d0
  %v1_10320 = phi i32 [ 1, %dec_label_pc_102d0 ], [ %v1_10360, %dec_label_pc_102f4 ], [ %v1_1036064, %dec_label_pc_102dc.backedge ]
  %v0_1031c = phi i32 [ 0, %dec_label_pc_102d0 ], [ 1, %dec_label_pc_102f4 ], [ %v0_10358, %dec_label_pc_102dc.backedge ]
  %v7_1031c = icmp eq i32 %v0_1031c, 1
  store i1 %v7_1031c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1031c, label %bb129, label %bb130

bb129:                                            ; preds = %dec_label_pc_1031c
  %v2_10320 = add i32 %v1_10320, 1
  store i32 %v2_10320, i32* %r0.global-to-local, align 4
  br label %bb130

bb130:                                            ; preds = %dec_label_pc_1031c, %bb129
  %v1_10324 = phi i32 [ %v1_10320, %dec_label_pc_1031c ], [ %v2_10320, %bb129 ]
  %v2_10324 = add i32 %v1_10324, %v1_102c8
  br label %dec_label_pc_1024c.backedge

dec_label_pc_1024c.backedge:                      ; preds = %bb130, %dec_label_pc_10410
  %v0_1024c.pre = phi i32 [ %v3_10258153, %bb130 ], [ %v0_1024c.pre.pre, %dec_label_pc_10410 ]
  %storemerge = phi i32 [ %v2_10324, %bb130 ], [ %v2_10424, %dec_label_pc_10410 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v1_1024c = add i32 %v0_1024c.pre, -1
  %v3_10250 = mul i32 %v1_1024c, 65536
  store i32 %v3_10250, i32* %r3.global-to-local, align 4
  %v7_10254 = icmp eq i32 %v3_10250, -65536
  store i1 %v7_10254, i1* %cpsr_z.global-to-local, align 1
  %v3_10258 = urem i32 %v1_1024c, 65536
  store i32 %v3_10258, i32* @r6, align 4
  br i1 %v7_10254, label %dec_label_pc_101c0, label %dec_label_pc_10260

dec_label_pc_1032c:                               ; preds = %dec_label_pc_101c0
  %v1_1032c = add i32 %v2_fef8, 4
  %v2_1032c = inttoptr i32 %v1_1032c to i32*
  %v3_1032c = load i32, i32* %v2_1032c, align 4
  store i32 %v3_1032c, i32* %r0.global-to-local, align 4
  %v2_10330 = icmp eq i32 %v3_1032c, 0
  store i1 %v2_10330, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_10338.163 to i32), i32* @lr, align 4
  %v1_10334 = xor i1 %v2_10330, true
  call void @__pseudo_cond_branch(i1 %v1_10334, i32 ptrtoint (i32* @global_var_140ec.58 to i32))
  store i32 %v2_fef8, i32* @r0, align 4
  %v0_1033c = call i32 @function_140ec()
  store i32 %v0_1033c, i32* %r0.global-to-local, align 4
  %v0_10340 = load i32, i32* @r4, align 4
  %v5_10340 = inttoptr i32 %v0_10340 to i8*
  br label %dec_label_pc_101d8

dec_label_pc_10348:                               ; preds = %dec_label_pc_1027c
  %v2_10348 = icmp eq i32 %v0_10348, 0
  store i1 %v2_10348, i1* %cpsr_z.global-to-local, align 1
  %v1_1034c = add i32 %v0_1034c, 1
  store i32 %v1_1034c, i32* %r3.global-to-local, align 4
  br i1 %v2_10348, label %bb131, label %dec_label_pc_1026c.backedge

dec_label_pc_1026c.backedge:                      ; preds = %dec_label_pc_10348, %bb131
  %v1_1035049 = phi i32 [ %v1_10350, %dec_label_pc_10348 ], [ %v2_10350, %bb131 ]
  %v1_1026c = inttoptr i32 %v1_1034c to i8*
  %v2_1026c = load i8, i8* %v1_1026c, align 1
  %v3_1026c = zext i8 %v2_1026c to i32
  store i32 %v3_1026c, i32* %r2.global-to-local, align 4
  %v2_10270 = icmp eq i8 %v2_1026c, 0
  store i1 %v2_10270, i1* %cpsr_z.global-to-local, align 1
  %v3_10274 = mul nuw nsw i32 %v3_1026c, 256
  store i32 %v3_10274, i32* %r1.global-to-local, align 4
  br i1 %v2_10270, label %dec_label_pc_102ac, label %dec_label_pc_1027c.preheader

bb131:                                            ; preds = %dec_label_pc_10348
  %v2_10350 = add i32 %v1_10350, 1
  store i32 %v2_10350, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1026c.backedge

dec_label_pc_10358:                               ; preds = %dec_label_pc_102ec
  %v2_10358 = icmp eq i32 %v0_10358, 0
  store i1 %v2_10358, i1* %cpsr_z.global-to-local, align 1
  %v1_1035c = add i32 %v0_1035c, 1
  store i32 %v1_1035c, i32* %r3.global-to-local, align 4
  br i1 %v2_10358, label %bb132, label %dec_label_pc_102dc.backedge

dec_label_pc_102dc.backedge:                      ; preds = %dec_label_pc_10358, %bb132
  %v1_1036064 = phi i32 [ %v1_10360, %dec_label_pc_10358 ], [ %v2_10360, %bb132 ]
  %v1_102dc = inttoptr i32 %v1_1035c to i8*
  %v2_102dc = load i8, i8* %v1_102dc, align 1
  %v3_102dc = zext i8 %v2_102dc to i32
  store i32 %v3_102dc, i32* %r2.global-to-local, align 4
  %v2_102e0 = icmp eq i8 %v2_102dc, 0
  store i1 %v2_102e0, i1* %cpsr_z.global-to-local, align 1
  %v3_102e4 = mul nuw nsw i32 %v3_102dc, 256
  store i32 %v3_102e4, i32* %r1.global-to-local, align 4
  br i1 %v2_102e0, label %dec_label_pc_1031c, label %dec_label_pc_102ec.preheader

bb132:                                            ; preds = %dec_label_pc_10358
  %v2_10360 = add i32 %v1_10360, 1
  store i32 %v2_10360, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_102dc.backedge

dec_label_pc_10368:                               ; preds = %bb128
  %v1_10368 = add i32 %v2_102b4, 2
  %v2_10368 = inttoptr i32 %v1_10368 to i8*
  %v3_10368 = load i8, i8* %v2_10368, align 1
  %v4_10368 = zext i8 %v3_10368 to i32
  store i32 %v4_10368, i32* %r3.global-to-local, align 4
  %v1_1036c = add i32 %v2_102b4, 3
  %v2_1036c = inttoptr i32 %v1_1036c to i8*
  %v3_1036c = load i8, i8* %v2_1036c, align 1
  %v4_1036c = zext i8 %v3_1036c to i32
  store i32 %v4_1036c, i32* %r2.global-to-local, align 4
  %v4_10370 = mul nuw nsw i32 %v4_1036c, 256
  %v5_10370 = or i32 %v4_10370, %v4_10368
  store i32 %v5_10370, i32* %r3.global-to-local, align 4
  %v7_10374 = icmp eq i32 %v5_10370, 256
  store i1 %v7_10374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10374, label %dec_label_pc_1037c, label %dec_label_pc_102d0

dec_label_pc_1037c:                               ; preds = %dec_label_pc_10368
  %v1_1037c = add i32 %v2_102b4, 8
  %v2_1037c = inttoptr i32 %v1_1037c to i8*
  %v3_1037c = load i8, i8* %v2_1037c, align 1
  %v4_1037c = zext i8 %v3_1037c to i32
  store i32 %v4_1037c, i32* %r1.global-to-local, align 4
  %v1_10380 = add i32 %v2_102b4, 9
  %v2_10380 = inttoptr i32 %v1_10380 to i8*
  %v3_10380 = load i8, i8* %v2_10380, align 1
  %v4_10380 = zext i8 %v3_10380 to i32
  store i32 %v4_10380, i32* %r0.global-to-local, align 4
  %v4_10384 = mul nuw nsw i32 %v4_10380, 256
  %v5_10384 = or i32 %v4_10384, %v4_1037c
  %v3_10388 = mul i32 %v5_10384, 65536
  store i32 %v3_10388, i32* %r2.global-to-local, align 4
  %v3_1038c = mul nuw nsw i32 %v4_1037c, 256
  %v5_10394 = or i32 %v4_10380, %v3_1038c
  store i32 %v5_10394, i32* %r3.global-to-local, align 4
  %v7_10398 = icmp eq i32 %v5_10394, 4
  store i1 %v7_10398, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10398, label %dec_label_pc_103a0, label %dec_label_pc_10410

dec_label_pc_103a0:                               ; preds = %dec_label_pc_1037c
  %v2_103a0 = inttoptr i32 %v1_102c8 to i8*
  %v3_103a0 = load i8, i8* %v2_103a0, align 1
  %v4_103a0 = zext i8 %v3_103a0 to i32
  store i32 %v4_103a0, i32* %r3.global-to-local, align 4
  store i32 %v2_ff78, i32* %r2.global-to-local, align 4
  %v1_103ac = add i32 %v2_102b4, 11
  %v2_103ac = inttoptr i32 %v1_103ac to i8*
  %v3_103ac = load i8, i8* %v2_103ac, align 1
  %v4_103ac = zext i8 %v3_103ac to i32
  store i32 %v4_103ac, i32* %r2.global-to-local, align 4
  store i32 %v2_ff78, i32* %r3.global-to-local, align 4
  %v1_103b8 = add i32 %v2_102b4, 12
  %v2_103b8 = inttoptr i32 %v1_103b8 to i8*
  %v3_103b8 = load i8, i8* %v2_103b8, align 1
  %v4_103b8 = zext i8 %v3_103b8 to i32
  store i32 %v4_103b8, i32* %r3.global-to-local, align 4
  store i32 %v2_ff78, i32* %ip.global-to-local, align 4
  %v1_103c4 = add i32 %v2_102b4, 13
  %v2_103c4 = inttoptr i32 %v1_103c4 to i8*
  %v3_103c4 = load i8, i8* %v2_103c4, align 1
  %v4_103c4 = zext i8 %v3_103c4 to i32
  store i32 %v4_103c4, i32* %r2.global-to-local, align 4
  store i32 %v2_fef8, i32* @lr, align 4
  %v2_103d0 = load i8, i8* %v3_fef8, align 1
  %v3_103d0 = zext i8 %v2_103d0 to i32
  %v3_103d4 = mul nuw nsw i32 %v3_103d0, 4
  %v1_103d8 = add nuw nsw i32 %v3_103d4, 4
  store i32 %v1_103d8, i32* %r1.global-to-local, align 4
  %v3_103dc = load i32, i32* %v2_103dc, align 4
  store i32 %v3_103dc, i32* %r0.global-to-local, align 4
  %v3_103e0 = sext i8 %v3_103c4 to i32
  %v5_103e0 = sext i8 %v3_103b8 to i32
  %v10_103e0 = call i32 @function_141dc(i32 %v3_103dc, i32 %v1_103d8, i32 %v3_103e0, i32 %v5_103e0)
  store i32 %v10_103e0, i32* %r0.global-to-local, align 4
  store i32 %v2_fef8, i32* %r1.global-to-local, align 4
  store i32 %v2_ff78, i32* %ip.global-to-local, align 4
  %v2_103ec = load i8, i8* %v3_fef8, align 1
  %v3_103ec = zext i8 %v2_103ec to i32
  store i32 %v3_103ec, i32* %r2.global-to-local, align 4
  %v4_103f0 = sext i8 %v3_103a0 to i32
  store i32 %v4_103f0, i32* %r3.global-to-local, align 4
  store i32 %v2_fef8, i32* @lr, align 4
  %v1_103f8 = add nuw nsw i32 %v3_103ec, 1
  store i32 %v1_103f8, i32* %r1.global-to-local, align 4
  %v5_103fc = mul nuw nsw i32 %v3_103ec, 4
  %v6_103fc = add i32 %v5_103fc, %v10_103e0
  %v7_103fc = inttoptr i32 %v6_103fc to i32*
  store i32 %v4_103f0, i32* %v7_103fc, align 4
  %v1_10400 = load i32, i32* @lr, align 4
  %v2_10400 = add i32 %v1_10400, 4
  %v3_10400 = inttoptr i32 %v2_10400 to i32*
  store i32 %v10_103e0, i32* %v3_10400, align 4
  %v0_10404 = load i32, i32* %r1.global-to-local, align 4
  %v1_10404 = trunc i32 %v0_10404 to i8
  %v2_10404 = load i32, i32* @lr, align 4
  %v3_10404 = inttoptr i32 %v2_10404 to i8*
  store i8 %v1_10404, i8* %v3_10404, align 1
  %v0_10408 = load i32, i32* @r4, align 4
  %v1_10408 = add i32 %v0_10408, 9
  %v2_10408 = inttoptr i32 %v1_10408 to i8*
  %v3_10408 = load i8, i8* %v2_10408, align 1
  %v4_10408 = zext i8 %v3_10408 to i32
  store i32 %v4_10408, i32* %r0.global-to-local, align 4
  %v1_1040c = add i32 %v0_10408, 8
  %v2_1040c = inttoptr i32 %v1_1040c to i8*
  %v3_1040c = load i8, i8* %v2_1040c, align 1
  %v4_1040c = zext i8 %v3_1040c to i32
  store i32 %v4_1040c, i32* %r1.global-to-local, align 4
  %v0_10424.pre = load i32, i32* @r5, align 4
  %v0_1024c.pre.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_10410

dec_label_pc_10410:                               ; preds = %dec_label_pc_1037c, %dec_label_pc_103a0
  %v0_1024c.pre.pre = phi i32 [ %v3_10258153, %dec_label_pc_1037c ], [ %v0_1024c.pre.pre.pre, %dec_label_pc_103a0 ]
  %v0_10424 = phi i32 [ %v1_102c8, %dec_label_pc_1037c ], [ %v0_10424.pre, %dec_label_pc_103a0 ]
  %v1_10410 = phi i32 [ %v4_10380, %dec_label_pc_1037c ], [ %v4_10408, %dec_label_pc_103a0 ]
  %v0_10410 = phi i32 [ %v4_1037c, %dec_label_pc_1037c ], [ %v4_1040c, %dec_label_pc_103a0 ]
  %v4_10410 = mul nuw nsw i32 %v1_10410, 256
  %v5_10410 = or i32 %v4_10410, %v0_10410
  %v3_10414 = mul i32 %v5_10410, 65536
  store i32 %v3_10414, i32* %r2.global-to-local, align 4
  %tmp133 = mul nuw nsw i32 %v0_10410, 256
  %v5_10420 = or i32 %tmp133, %v1_10410
  store i32 %v5_10420, i32* %r3.global-to-local, align 4
  %v2_10424 = add i32 %v5_10420, %v0_10424
  br label %dec_label_pc_1024c.backedge

; uselistorder directives
  uselistorder i32 %v1_10410, { 1, 0 }
  uselistorder i32 %v3_103ec, { 1, 0, 2 }
  uselistorder i32 %v10_103e0, { 1, 0, 2 }
  uselistorder i32 %v4_10380, { 2, 1, 0, 3 }
  uselistorder i32 %v4_1037c, { 2, 0, 1, 3 }
  uselistorder i32 %v2_10360, { 1, 0 }
  uselistorder i32 %v3_102dc, { 0, 2, 1 }
  uselistorder i32 %v1_1036064, { 1, 0 }
  uselistorder i32 %v1_1035c, { 1, 2, 0 }
  uselistorder i32 %v2_10350, { 1, 0 }
  uselistorder i32 %v3_1026c, { 0, 2, 1 }
  uselistorder i32 %v1_1035049, { 1, 0 }
  uselistorder i32 %v1_1034c, { 1, 2, 0 }
  uselistorder i1 %v7_10254, { 1, 0 }
  uselistorder i32 %v1_1024c, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v3_10308, { 0, 2, 1 }
  uselistorder i32 %v2_10304, { 1, 2, 0 }
  uselistorder i32 %v0_10358, { 2, 0, 1 }
  uselistorder i32 %v1_10360, { 1, 2, 0 }
  uselistorder i32 %v3_102e427, { 1, 0 }
  uselistorder i32 %v3_102dc25, { 1, 0, 2 }
  uselistorder i32 %v1_102c8, { 2, 3, 1, 0, 5, 4, 6 }
  uselistorder i32 %v2_102b4, { 0, 1, 2, 4, 3, 6, 5, 7, 9, 8, 10 }
  uselistorder i32 %v3_10298, { 0, 2, 1 }
  uselistorder i32 %v2_10294, { 1, 2, 0 }
  uselistorder i32 %v0_10348, { 2, 0, 1 }
  uselistorder i32 %v1_10350, { 1, 2, 0 }
  uselistorder i32 %v3_1027421, { 1, 0 }
  uselistorder i32 %v3_1026c19, { 1, 0, 2 }
  uselistorder i32 %v0_102b4152, { 3, 0, 1, 2 }
  uselistorder i32 %v3_10258151, { 1, 0 }
  uselistorder i1 %v7_10254150, { 1, 0 }
  uselistorder i32 %v1_1024c143, { 1, 0 }
  uselistorder i32 %v4_10234, { 1, 0, 2 }
  uselistorder i32 %v0_101b8, { 1, 0 }
  uselistorder i32 %v0_10190, { 1, 0 }
  uselistorder i1 %v7_10144, { 1, 0 }
  uselistorder i32 %v5_10140, { 1, 0, 2 }
  uselistorder i32 %v1_10104, { 1, 0 }
  uselistorder i32 %v3_100f0, { 1, 0 }
  uselistorder i32 %v0_100e8, { 1, 0 }
  uselistorder i32 %v1_100dc, { 1, 2, 0 }
  uselistorder i1 %v7_100a8, { 1, 0 }
  uselistorder i32 %v5_100a4, { 1, 0, 2 }
  uselistorder i1 %v7_1008c, { 1, 0 }
  uselistorder i32 %v4_10088, { 1, 0, 2 }
  uselistorder i1 %v7_10070, { 1, 0 }
  uselistorder i32 %v3_1006c, { 2, 1, 0, 3 }
  uselistorder i1 %v7_10054, { 2, 1, 0 }
  uselistorder i32 %v1_10058, { 1, 0 }
  uselistorder i32 %v1_101f8, { 1, 2, 0 }
  uselistorder i32 %v2_100f4, { 1, 0, 2 }
  uselistorder i32 %v2_10050, { 1, 0, 2 }
  uselistorder i32 %v2_10018, { 4, 3, 2, 5, 7, 9, 1, 0, 6, 8, 10 }
  uselistorder i32 %v4_ffcc, { 3, 0, 2, 1 }
  uselistorder i32 %v1_ff98, { 1, 0, 2 }
  uselistorder i32 %v0_ff54, { 0, 1, 3, 2 }
  uselistorder i32 %v1_ff50, { 1, 0, 2 }
  uselistorder i32 %v1_ff4c, { 1, 0 }
  uselistorder i32 %v2_ff4011, { 1, 0 }
  uselistorder i32 %v2_ff40, { 1, 0 }
  uselistorder i1 %v8_ff30, { 1, 0 }
  uselistorder i32 %v2_ff18, { 0, 2, 1, 3 }
  uselistorder i32 %v0_ff00, { 1, 0 }
  uselistorder i32 %v2_fef8, { 2, 3, 4, 5, 0, 1, 6, 7 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-2240, { 0, 2, 1 }
  uselistorder i32* %stack_var_-64, { 0, 1, 3, 2 }
  uselistorder i8* %stack_var_-4288, { 2, 0, 1 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 10, 13, 11, 12, 14, 16, 33, 17, 18, 19, 20, 21, 25, 22, 23, 24, 26, 34, 35, 27, 28, 29, 30, 31, 32 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 11, 7, 28, 9, 10, 29, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 11, 6, 7, 30, 9, 10, 29, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 25, 27, 24, 28, 26 }
  uselistorder i32* %r0.global-to-local, { 1, 5, 2, 3, 4, 10, 6, 48, 7, 8, 9, 12, 11, 15, 14, 13, 17, 16, 20, 18, 19, 21, 22, 24, 23, 26, 25, 27, 29, 28, 30, 37, 32, 31, 33, 34, 35, 36, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 6, 3, 5, 4 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 16, 18 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 9, 3, 14, 4, 5, 15, 6, 7, 8, 37, 10, 11, 12, 13, 36, 34, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0, 25, 26, 27, 28, 33, 31, 29, 30, 32, 35 }
  uselistorder i32 (i32)* @function_148c4, { 8, 7, 11, 10, 9, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10410, { 1, 0 }
  uselistorder label %dec_label_pc_102dc.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_1026c.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_1024c.backedge, { 1, 0 }
  uselistorder label %bb130, { 1, 0 }
  uselistorder label %dec_label_pc_102ec, { 1, 0 }
  uselistorder label %dec_label_pc_102ec.preheader, { 1, 0 }
  uselistorder label %bb128, { 1, 0 }
  uselistorder label %dec_label_pc_1027c, { 1, 0 }
  uselistorder label %dec_label_pc_1027c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_10260, { 1, 0 }
  uselistorder label %dec_label_pc_101d8, { 1, 0 }
  uselistorder label %dec_label_pc_101c0, { 5, 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_101a0, { 2, 1, 4, 0, 3 }
  uselistorder label %dec_label_pc_100d8.dec_label_pc_100d8_crit_edge, { 1, 0 }
  uselistorder label %bb126, { 1, 0 }
  uselistorder label %.thread12, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ff28, { 1, 0 }
}

define i32 @function_1042c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1042c:
  %v2_10430 = load i32, i32* @global_var_1eb00.165, align 4
  %v2_10438 = call i32 @function_13590(i32 %v2_10430, i32 9)
  %v0_1043c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1043c, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_1042c
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_1042c, %bb
  ret i32 %v2_10438

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_10440() local_unnamed_addr {
dec_label_pc_10440:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_10440 = load i32, i32* @r4, align 4
  store i32 %v3_10440, i32* %stack_var_-16, align 4
  %v0_10444 = load i32, i32* @r0, align 4
  store i32 %v0_10444, i32* %r5.global-to-local, align 4
  %v1_10448 = add i32 %v0_10444, 4
  %v2_10448 = inttoptr i32 %v1_10448 to i32*
  %v3_10448 = load i32, i32* %v2_10448, align 4
  store i32 %v3_10448, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 66668, i32* @lr, align 4
  %v1_10468 = icmp ne i32 %v3_10448, -1
  call void @__pseudo_cond_branch(i1 %v1_10468, i32 ptrtoint (i32* @global_var_13490.25 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_10478 = call i32 @function_13d90(i32 2, i32 1, i32 0)
  store i32 %v3_10478, i32* %r3.global-to-local, align 4
  %v7_10480 = icmp eq i32 %v3_10478, -1
  %v0_10488 = load i32, i32* %r5.global-to-local, align 4
  %v1_10488 = add i32 %v0_10488, 28
  store i32 %v1_10488, i32* %r0.global-to-local, align 4
  %v2_1048c = add i32 %v0_10488, 4
  %v3_1048c = inttoptr i32 %v2_1048c to i32*
  store i32 %v3_10478, i32* %v3_1048c, align 4
  br i1 %v7_10480, label %dec_label_pc_10440.dec_label_pc_10508_crit_edge, label %dec_label_pc_10494

dec_label_pc_10440.dec_label_pc_10508_crit_edge:  ; preds = %dec_label_pc_10440
  %v14_1050c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10508

dec_label_pc_10494:                               ; preds = %dec_label_pc_10440
  %v0_10494 = load i32, i32* %r6.global-to-local, align 4
  %v1_10494 = load i32, i32* %r5.global-to-local, align 4
  %v2_10494 = add i32 %v1_10494, 24
  %v3_10494 = inttoptr i32 %v2_10494 to i32*
  store i32 %v0_10494, i32* %v3_10494, align 4
  %v0_10498 = load i32, i32* %r0.global-to-local, align 4
  %v2_10498 = call i32 @function_12b70(i32 %v0_10498, i32 512)
  store i32 %v2_10498, i32* %r0.global-to-local, align 4
  %v0_1049c = load i32, i32* %r5.global-to-local, align 4
  %v1_1049c = add i32 %v0_1049c, 4
  %v2_1049c = inttoptr i32 %v1_1049c to i32*
  %v3_1049c = load i32, i32* %v2_1049c, align 4
  store i32 %v3_1049c, i32* @r4, align 4
  %v0_104a4 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_104a4, i32* @r2, align 4
  store i32 %v3_1049c, i32* %r0.global-to-local, align 4
  %v2_104ac = call i32 @function_133a0(i32 %v3_1049c, i32 3)
  %v1_104b4 = or i32 %v2_104ac, 2048
  store i32 %v1_104b4, i32* @r2, align 4
  %v0_104b8 = load i32, i32* @r4, align 4
  store i32 %v0_104b8, i32* %r0.global-to-local, align 4
  %v2_104bc = call i32 @function_133a0(i32 %v0_104b8, i32 4)
  store i32 %v2_104bc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ea94.167 to i32), i32* %r3.global-to-local, align 4
  %v0_104c4 = load i32, i32* %r5.global-to-local, align 4
  %v1_104c4 = add i32 %v0_104c4, 20
  %v2_104c4 = inttoptr i32 %v1_104c4 to i32*
  %v3_104c4 = load i32, i32* %v2_104c4, align 4
  store i32 %v3_104c4, i32* @r4, align 4
  %v2_104c8 = load i32, i32* @global_var_1ea94.167, align 4
  %v1_104cc = add i32 %v0_104c4, 16
  %v2_104cc = inttoptr i32 %v1_104cc to i32*
  %v3_104cc = load i32, i32* %v2_104cc, align 4
  store i32 %v3_104cc, i32* @lr, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_104d4 = add i32 %v0_104c4, 8
  %v3_104d4 = inttoptr i32 %v2_104d4 to i32*
  store i32 %v2_104c8, i32* %v3_104d4, align 4
  %v0_104d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_104d8 = load i32, i32* %r5.global-to-local, align 4
  %v2_104d8 = add i32 %v1_104d8, 12
  %v3_104d8 = inttoptr i32 %v2_104d8 to i32*
  store i32 %v0_104d8, i32* %v3_104d8, align 4
  %v0_104e0 = load i32, i32* %r5.global-to-local, align 4
  %v1_104e0 = add i32 %v0_104e0, 4
  %v2_104e0 = inttoptr i32 %v1_104e0 to i32*
  %v3_104e0 = load i32, i32* %v2_104e0, align 4
  store i32 %v3_104e0, i32* %r0.global-to-local, align 4
  %v0_104e4 = load i32, i32* %r3.global-to-local, align 4
  %v2_104e4 = mul i32 %v0_104e4, 2
  store i32 %v2_104e4, i32* %r3.global-to-local, align 4
  store i32 %v2_104e4, i32* %stack_var_-32, align 4
  %v3_10504 = bitcast i32* %stack_var_-32 to %sockaddr*
  %v4_10504 = call i32 @function_13bec(i32 %v3_104e0, %sockaddr* %v3_10504, i32 16)
  store i32 %v4_10504, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10508

dec_label_pc_10508:                               ; preds = %dec_label_pc_10440.dec_label_pc_10508_crit_edge, %dec_label_pc_10494
  %v14_1050c = phi i32 [ %v14_1050c.pre, %dec_label_pc_10440.dec_label_pc_10508_crit_edge ], [ %v4_10504, %dec_label_pc_10494 ]
  %v2_1050c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1050c, i32* @r4, align 4
  ret i32 %v14_1050c

; uselistorder directives
  uselistorder i32 %v2_104e4, { 1, 0 }
  uselistorder i32 %v3_10478, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 8, 5, 6, 7, 9, 10 }
  uselistorder i32 (i32, i32)* @function_12b70, { 7, 12, 14, 13, 11, 10, 9, 8, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10508, { 1, 0 }
}

define i32 @function_10514(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10514:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_10514 = load i32, i32* @r4, align 4
  %v6_10514 = load i32, i32* @r5, align 4
  %v9_10514 = load i32, i32* @r6, align 4
  %v12_10514 = load i32, i32* @r7, align 4
  %v15_10514 = load i32, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1ea60.169 to i32), i32* @r8, align 4
  %v2_1051c = load i32, i32* @global_var_1ea60.169, align 4
  store i32 ptrtoint (i32* @global_var_1ea8c.171 to i32), i32* %sb.global-to-local, align 4
  %v3_10528 = mul i32 %v2_1051c, 16
  store i32 %v3_10528, i32* %r3.global-to-local, align 4
  %v3_10530 = urem i32 %arg3, 65536
  store i32 %v3_10530, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_1053c = load i32, i32* @global_var_1ea8c.171, align 4
  %v1_10540 = add i32 %v3_10528, 16
  store i32 %v1_10540, i32* %r1.global-to-local, align 4
  store i32 %v3_10530, i32* %stack_var_-44, align 4
  %v8_10548 = call i32 @function_141dc(i32 %v2_1053c, i32 %v1_10540, i32 %v3_10530, i32 %v3_10528)
  store i32 %v8_10548, i32* %sl.global-to-local, align 4
  %v0_10550 = load i32, i32* @r5, align 4
  %v1_10554 = load i32, i32* %sb.global-to-local, align 4
  %v2_10554 = inttoptr i32 %v1_10554 to i32*
  store i32 %v8_10548, i32* %v2_10554, align 4
  %v2_10558 = load i32, i32* @global_var_1ea60.169, align 4
  store i32 %v2_10558, i32* %fp.global-to-local, align 4
  %v1_1055c = inttoptr i32 %v0_10550 to i8*
  %v2_1055c = call i32 @function_12ad0(i8* %v1_1055c)
  %sext = mul i32 %v2_1055c, 16777216
  %v1_10560 = sdiv i32 %sext, 16777216
  %v2_10560 = add nsw i32 %v1_10560, 1
  store i32 %v2_10560, i32* @r4, align 4
  store i32 %v1_10560, i32* @r7, align 4
  %v1_1056c = call i32 @function_13f40(i32 %v2_10560)
  %v0_10570 = load i32, i32* @r5, align 4
  store i32 %v0_10570, i32* %r1.global-to-local, align 4
  %v0_10574 = load i32, i32* @r4, align 4
  store i32 %v0_10574, i32* %r2.global-to-local, align 4
  store i32 %v1_1056c, i32* @r6, align 4
  %v3_1057c = call i32 @function_12b4c(i32 %v1_1056c, i32 %v0_10570, i32 %v0_10574)
  %v0_10580 = load i32, i32* @r7, align 4
  %tmp21 = icmp slt i32 %v0_10580, 1
  %extract.t6 = trunc i32 %v0_10580 to i8
  br i1 %tmp21, label %dec_label_pc_105a4, label %dec_label_pc_10588

dec_label_pc_10588:                               ; preds = %dec_label_pc_10514
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1058c

dec_label_pc_1058c:                               ; preds = %dec_label_pc_1058c, %dec_label_pc_10588
  %v2_10594 = phi i32 [ %v1_10598, %dec_label_pc_1058c ], [ 0, %dec_label_pc_10588 ]
  %v1_1058c = load i32, i32* @r6, align 4
  %v2_1058c = add i32 %v1_1058c, %v2_10594
  %v3_1058c = inttoptr i32 %v2_1058c to i8*
  %v4_1058c = load i8, i8* %v3_1058c, align 1
  %v6_1058c = zext i8 %v4_1058c to i32
  %v1_10590 = xor i32 %v6_1058c, 34
  store i32 %v1_10590, i32* %r3.global-to-local, align 4
  %v1_10594 = trunc i32 %v1_10590 to i8
  store i8 %v1_10594, i8* %v3_1058c, align 1
  %v0_10598 = load i32, i32* %r2.global-to-local, align 4
  %v1_10598 = add i32 %v0_10598, 1
  store i32 %v1_10598, i32* %r2.global-to-local, align 4
  %v0_1059c = load i32, i32* @r7, align 4
  %v9_1059c = icmp eq i32 %v0_1059c, %v1_10598
  br i1 %v9_1059c, label %dec_label_pc_105a4.loopexit, label %dec_label_pc_1058c

dec_label_pc_105a4.loopexit:                      ; preds = %dec_label_pc_1058c
  %extract.t = trunc i32 %v1_10598 to i8
  br label %dec_label_pc_105a4

dec_label_pc_105a4:                               ; preds = %dec_label_pc_105a4.loopexit, %dec_label_pc_10514
  %v0_105b4.off0 = phi i8 [ %extract.t, %dec_label_pc_105a4.loopexit ], [ %extract.t6, %dec_label_pc_10514 ]
  %v2_105a4 = load i32, i32* @global_var_1ea60.169, align 4
  %v2_105a8 = load i32, i32* @global_var_1ea8c.171, align 4
  store i32 %v2_105a8, i32* %r2.global-to-local, align 4
  %v3_105ac = mul i32 %v2_105a4, 16
  %v2_105b0 = add i32 %v2_105a8, %v3_105ac
  store i32 %v2_105b0, i32* %r3.global-to-local, align 4
  %v3_105b4 = add i32 %v2_105b0, 12
  %v4_105b4 = inttoptr i32 %v3_105b4 to i8*
  store i8 %v0_105b4.off0, i8* %v4_105b4, align 1
  %v0_105b8 = load i32, i32* @r6, align 4
  %v1_105b8 = load i32, i32* %sl.global-to-local, align 4
  %v2_105b8 = load i32, i32* %fp.global-to-local, align 4
  %v5_105b8 = mul i32 %v2_105b8, 16
  %v6_105b8 = add i32 %v5_105b8, %v1_105b8
  %v7_105b8 = inttoptr i32 %v6_105b8 to i32*
  store i32 %v0_105b8, i32* %v7_105b8, align 4
  %v2_105c0 = load i32, i32* @global_var_1ea60.169, align 4
  store i32 %v2_105c0, i32* @r7, align 4
  %v2_105c4 = load i32, i32* @global_var_1ea8c.171, align 4
  store i32 %v2_105c4, i32* %sl.global-to-local, align 4
  %v1_105c8 = inttoptr i32 %arg2 to i8*
  %v2_105c8 = call i32 @function_12ad0(i8* %v1_105c8)
  %sext1 = mul i32 %v2_105c8, 16777216
  %v1_105cc = sdiv i32 %sext1, 16777216
  %v2_105cc = add nsw i32 %v1_105cc, 1
  store i32 %v2_105cc, i32* @r4, align 4
  store i32 %v1_105cc, i32* @r5, align 4
  %v1_105d8 = call i32 @function_13f40(i32 %v2_105cc)
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_105e0 = load i32, i32* @r4, align 4
  store i32 %v0_105e0, i32* %r2.global-to-local, align 4
  store i32 %v1_105d8, i32* %r6.global-to-local, align 4
  %v3_105e8 = call i32 @function_12b4c(i32 %v1_105d8, i32 %arg2, i32 %v0_105e0)
  %v0_105ec = load i32, i32* @r5, align 4
  %tmp22 = icmp slt i32 %v0_105ec, 1
  %extract.t8 = trunc i32 %v0_105ec to i8
  br i1 %tmp22, label %dec_label_pc_10610, label %dec_label_pc_105f4

dec_label_pc_105f4:                               ; preds = %dec_label_pc_105a4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_105f8

dec_label_pc_105f8:                               ; preds = %dec_label_pc_105f8, %dec_label_pc_105f4
  %v2_10600 = phi i32 [ %v1_10604, %dec_label_pc_105f8 ], [ 0, %dec_label_pc_105f4 ]
  %v1_105f8 = load i32, i32* %r6.global-to-local, align 4
  %v2_105f8 = add i32 %v1_105f8, %v2_10600
  %v3_105f8 = inttoptr i32 %v2_105f8 to i8*
  %v4_105f8 = load i8, i8* %v3_105f8, align 1
  %v6_105f8 = zext i8 %v4_105f8 to i32
  %v1_105fc = xor i32 %v6_105f8, 34
  store i32 %v1_105fc, i32* %r3.global-to-local, align 4
  %v1_10600 = trunc i32 %v1_105fc to i8
  store i8 %v1_10600, i8* %v3_105f8, align 1
  %v0_10604 = load i32, i32* %r2.global-to-local, align 4
  %v1_10604 = add i32 %v0_10604, 1
  store i32 %v1_10604, i32* %r2.global-to-local, align 4
  %v0_10608 = load i32, i32* @r5, align 4
  %v9_10608 = icmp eq i32 %v0_10608, %v1_10604
  br i1 %v9_10608, label %dec_label_pc_10610.loopexit, label %dec_label_pc_105f8

dec_label_pc_10610.loopexit:                      ; preds = %dec_label_pc_105f8
  %extract.t7 = trunc i32 %v1_10604 to i8
  br label %dec_label_pc_10610

dec_label_pc_10610:                               ; preds = %dec_label_pc_10610.loopexit, %dec_label_pc_105a4
  %v0_10620.off0 = phi i8 [ %extract.t7, %dec_label_pc_10610.loopexit ], [ %extract.t8, %dec_label_pc_105a4 ]
  %v2_10610 = load i32, i32* @global_var_1ea60.169, align 4
  %v2_10614 = load i32, i32* @global_var_1ea8c.171, align 4
  %v3_10618 = mul i32 %v2_10610, 16
  %v2_1061c = or i32 %v3_10618, 13
  %v3_10620 = add i32 %v2_1061c, %v2_10614
  %v4_10620 = inttoptr i32 %v3_10620 to i8*
  store i8 %v0_10620.off0, i8* %v4_10620, align 1
  %v2_10628 = load i32, i32* @global_var_1ea60.169, align 4
  store i32 %v2_10628, i32* %lr.global-to-local, align 4
  %v4_1062c = load i8, i8* @global_var_1ea91.174, align 1
  %v5_1062c = zext i8 %v4_1062c to i32
  %v3_10630 = load i8, i8* bitcast (i8** @global_var_1ea90.173 to i8*), align 4
  %v4_10630 = zext i8 %v3_10630 to i32
  %v2_10634 = load i32, i32* @global_var_1ea8c.171, align 4
  %v4_10638 = mul nuw nsw i32 %v5_1062c, 256
  %v5_10638 = or i32 %v4_10630, %v4_10638
  store i32 %v5_10638, i32* %r2.global-to-local, align 4
  %v3_1063c = mul i32 %v2_10628, 16
  %v2_10640 = add i32 %v2_10634, %v3_1063c
  store i32 %v2_10640, i32* %r1.global-to-local, align 4
  %v3_10648 = add i32 %v2_10640, 9
  %v4_10648 = inttoptr i32 %v3_10648 to i8*
  store i8 %v4_1062c, i8* %v4_10648, align 1
  %v0_1064c = load i32, i32* %r2.global-to-local, align 4
  %v1_1064c = trunc i32 %v0_1064c to i8
  %v2_1064c = load i32, i32* %r1.global-to-local, align 4
  %v3_1064c = add i32 %v2_1064c, 8
  %v4_1064c = inttoptr i32 %v3_1064c to i8*
  store i8 %v1_1064c, i8* %v4_1064c, align 1
  %v4_10650 = load i8, i8* @global_var_1ea91.174, align 1
  %v5_10650 = zext i8 %v4_10650 to i32
  %v3_10654 = load i8, i8* bitcast (i8** @global_var_1ea90.173 to i8*), align 4
  %v4_10654 = zext i8 %v3_10654 to i32
  %v4_10658 = mul nuw nsw i32 %v5_10650, 256
  %v5_10658 = or i32 %v4_10654, %v4_10658
  %v2_1065c = load i32, i32* %stack_var_-44, align 4
  %v2_10660 = add i32 %v5_10658, %v2_1065c
  store i32 %v2_10660, i32* %r3.global-to-local, align 4
  %v3_106649 = udiv i32 %v2_10660, 256
  %v1_10668 = trunc i32 %v3_106649 to i8
  %v2_10668 = load i32, i32* %r1.global-to-local, align 4
  %v3_10668 = add i32 %v2_10668, 11
  %v4_10668 = inttoptr i32 %v3_10668 to i8*
  store i8 %v1_10668, i8* %v4_10668, align 1
  %v0_1066c = load i32, i32* %r3.global-to-local, align 4
  %v1_1066c = trunc i32 %v0_1066c to i8
  %v2_1066c = load i32, i32* %r1.global-to-local, align 4
  %v3_1066c = add i32 %v2_1066c, 10
  %v4_1066c = inttoptr i32 %v3_1066c to i8*
  store i8 %v1_1066c, i8* %v4_1066c, align 1
  %v4_10670 = load i8, i8* @global_var_1ea91.174, align 1
  %v5_10670 = zext i8 %v4_10670 to i32
  %v3_10674 = load i8, i8* bitcast (i8** @global_var_1ea90.173 to i8*), align 4
  %v4_10674 = zext i8 %v3_10674 to i32
  %v4_10678 = mul nuw nsw i32 %v5_10670, 256
  %v5_10678 = or i32 %v4_10674, %v4_10678
  %v2_1067c = load i32, i32* %stack_var_-44, align 4
  %v2_10680 = add i32 %v5_10678, %v2_1067c
  store i32 %v2_10680, i32* %r2.global-to-local, align 4
  %v0_10684 = load i32, i32* @r7, align 4
  %v3_10684 = mul i32 %v0_10684, 16
  %v1_10688 = load i32, i32* %sl.global-to-local, align 4
  %v2_10688 = add i32 %v1_10688, %v3_10684
  store i32 %v2_10688, i32* %r3.global-to-local, align 4
  %v0_1068c = load i32, i32* %lr.global-to-local, align 4
  %v1_1068c = add i32 %v0_1068c, 1
  store i32 %v1_1068c, i32* @lr, align 4
  %v3_10690 = sdiv i32 %v2_10680, 256
  store i32 %v3_10690, i32* %r1.global-to-local, align 4
  %v0_10694 = load i32, i32* %r6.global-to-local, align 4
  %v2_10694 = add i32 %v2_10688, 4
  %v3_10694 = inttoptr i32 %v2_10694 to i32*
  store i32 %v0_10694, i32* %v3_10694, align 4
  %v0_10698 = load i32, i32* @lr, align 4
  %v1_10698 = load i32, i32* @r8, align 4
  %v2_10698 = inttoptr i32 %v1_10698 to i32*
  store i32 %v0_10698, i32* %v2_10698, align 4
  %v0_1069c = load i32, i32* %r1.global-to-local, align 4
  %v1_1069c = trunc i32 %v0_1069c to i8
  store i8 %v1_1069c, i8* @global_var_1ea91.174, align 1
  %v0_106a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_106a0 = trunc i32 %v0_106a0 to i8
  store i8 %v1_106a0, i8* bitcast (i8** @global_var_1ea90.173 to i8*), align 4
  store i32 %v3_10514, i32* @r4, align 4
  store i32 %v6_10514, i32* @r5, align 4
  store i32 %v9_10514, i32* @r6, align 4
  store i32 %v12_10514, i32* @r7, align 4
  store i32 %v15_10514, i32* @r8, align 4
  ret i32 ptrtoint (i8** @global_var_1ea90.173 to i32)

; uselistorder directives
  uselistorder i32 %v1_10604, { 0, 2, 3, 1 }
  uselistorder i32 %v1_105d8, { 1, 0 }
  uselistorder i32 %v1_10598, { 0, 2, 3, 1 }
  uselistorder i32 %v1_1056c, { 1, 0 }
  uselistorder i32 %v3_10530, { 1, 2, 0 }
  uselistorder i32 %v3_10528, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 (i8*)* @function_12ad0, { 22, 23, 3, 4, 5, 6, 7, 0, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 73, 74, 75, 76, 77, 78, 79, 80, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72 }
  uselistorder i32 (i32, i32, i32, i32)* @function_141dc, { 0, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_106b8() local_unnamed_addr {
dec_label_pc_106b8:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp232 = call i32 @__decompiler_undefined_function_0()
  %tmp239 = call i32 @__decompiler_undefined_function_0()
  %tmp240 = call i8* @__decompiler_undefined_function_2()
  %tmp241 = call i32 @__decompiler_undefined_function_0()
  %tmp242 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_106b8 = load i32, i32* @r4, align 4
  store i32 %v3_106b8, i32* %stack_var_-36, align 4
  %v6_106b8 = load i32, i32* @r5, align 4
  %v9_106b8 = load i32, i32* @r6, align 4
  %v12_106b8 = load i32, i32* @r7, align 4
  %v15_106b8 = load i32, i32* @r8, align 4
  %v18_106b8 = load i32, i32* @sb, align 4
  %v21_106b8 = load i32, i32* @sl, align 4
  %v24_106b8 = load i32, i32* @fp, align 4
  %v0_106c0 = call i32 @function_134bc()
  store i32 %v0_106c0, i32* %r0.global-to-local, align 4
  %v7_106c4 = icmp eq i32 %v0_106c0, -1
  %. = zext i1 %v7_106c4 to i32
  %tmp273 = icmp slt i32 %v0_106c0, 1
  %storemerge229 = select i1 %tmp273, i32 %., i32 1
  store i32 %storemerge229, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1eb00.165 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_106e0 = icmp eq i32 %storemerge229, 0
  store i1 %v2_106e0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_106c0, i32* @global_var_1eb00.165, align 4
  br i1 %v2_106e0, label %dec_label_pc_106f4, label %dec_label_pc_106ec

dec_label_pc_106ec:                               ; preds = %dec_label_pc_106b8
  store i32 %v3_106b8, i32* @r4, align 4
  store i32 %v6_106b8, i32* %r5.global-to-local, align 4
  store i32 %v9_106b8, i32* @r6, align 4
  store i32 %v12_106b8, i32* @r7, align 4
  store i32 %v15_106b8, i32* @r8, align 4
  store i32 %v18_106b8, i32* @sb, align 4
  store i32 %v21_106b8, i32* @sl, align 4
  store i32 %v24_106b8, i32* @fp, align 4
  ret i32 %v0_106c0

dec_label_pc_106f4:                               ; preds = %dec_label_pc_106b8
  %v0_106f4 = call i32 @function_12d88()
  store i32 %v0_106f4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1eadc.85 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_106f4, i32* @global_var_1eadc.85, align 4
  %v1_10700 = call i32 @function_fc54(i32 %v0_106f4)
  %v0_10704 = load i32, i32* @r4, align 4
  store i32 %v0_10704, i32* %r0.global-to-local, align 4
  %v1_10708 = inttoptr i32 %v0_10704 to i32*
  %v2_10708 = call i32 @function_13760(i32* %v1_10708)
  store i32 ptrtoint (i32* @global_var_1ea94.167 to i32), i32* %r2.global-to-local, align 4
  store i32 544, i32* %r1.global-to-local, align 4
  store i32 %v2_10708, i32* @global_var_1ea94.167, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_1071c = call i32 @function_14094(i32 256, i32 544)
  store i32 %v2_1071c, i32* %lr.global-to-local, align 4
  %v0_10728 = load i32, i32* @r4, align 4
  store i32 %v0_10728, i32* %stack_var_-52, align 4
  store i32 %v2_1071c, i32* @global_var_1eaf8.179, align 4
  store i32 %v0_10728, i32* %r3.global-to-local, align 4
  store i32 %v0_10728, i32* %r5.global-to-local, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 %v0_10728, i32* %ip.global-to-local, align 4
  %v1_10740 = add i32 %v2_1071c, 4
  store i32 %v1_10740, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10744

dec_label_pc_10744:                               ; preds = %dec_label_pc_10744.dec_label_pc_10744_crit_edge, %dec_label_pc_106f4
  %v0_1075c = phi i32 [ %v0_1075c.pre, %dec_label_pc_10744.dec_label_pc_10744_crit_edge ], [ %v0_10728, %dec_label_pc_106f4 ]
  %v0_1074c = phi i32 [ %v0_10764, %dec_label_pc_10744.dec_label_pc_10744_crit_edge ], [ %v0_10728, %dec_label_pc_106f4 ]
  %v1_10754 = phi i32 [ %v1_10754.pre, %dec_label_pc_10744.dec_label_pc_10744_crit_edge ], [ %v2_1071c, %dec_label_pc_106f4 ]
  %v3_10744 = mul i32 %v0_1074c, 512
  store i32 %v3_10744, i32* %r2.global-to-local, align 4
  %v1_1074c = add i32 %v0_1074c, 1
  store i32 %v1_1074c, i32* %ip.global-to-local, align 4
  %v2_10750 = mul i32 %v0_1074c, 544
  %v2_10754 = add i32 %v1_10754, 12
  %v2_1075c = add i32 %v2_10754, %v2_10750
  %v3_1075c = inttoptr i32 %v2_1075c to i32*
  store i32 %v0_1075c, i32* %v3_1075c, align 4
  %v0_10760 = load i32, i32* %r0.global-to-local, align 4
  %v1_10760 = load i32, i32* %r1.global-to-local, align 4
  %v2_10760 = inttoptr i32 %v1_10760 to i32*
  store i32 %v0_10760, i32* %v2_10760, align 4
  %v3_10760 = load i32, i32* %r1.global-to-local, align 4
  %v4_10760 = add i32 %v3_10760, 544
  store i32 %v4_10760, i32* %r1.global-to-local, align 4
  %v0_10764 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_10764, i32* %r3.global-to-local, align 4
  %v7_10768 = icmp sgt i32 %v1_1074c, 255
  br i1 %v7_10768, label %dec_label_pc_1076c, label %dec_label_pc_10744.dec_label_pc_10744_crit_edge

dec_label_pc_10744.dec_label_pc_10744_crit_edge:  ; preds = %dec_label_pc_10744
  %v1_10754.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_1075c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10744

dec_label_pc_1076c:                               ; preds = %dec_label_pc_10744
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_10764, i32* %stack_var_-52, align 4
  %v3_1077c = call i32 @function_13d90(i32 2, i32 3, i32 6)
  store i32 %v3_1077c, i32* %r0.global-to-local, align 4
  %v2_10784 = icmp eq i32 %v3_1077c, -1
  store i1 %v2_10784, i1* %cpsr_c.global-to-local, align 1
  %v7_10784 = icmp eq i32 %v3_1077c, -1
  store i1 %v7_10784, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_1077c, i32* @r4, align 4
  store i32 %v3_1077c, i32* @global_var_1eafc.181, align 4
  br i1 %v7_10784, label %dec_label_pc_1119c, label %dec_label_pc_10794

dec_label_pc_10794:                               ; preds = %dec_label_pc_1076c
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_10798 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10798, i32* @r2, align 4
  %v2_1079c = call i32 @function_133a0(i32 %v3_1077c, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_107a4 = or i32 %v2_1079c, 2048
  store i32 %v1_107a4, i32* @r2, align 4
  %v0_107a8 = load i32, i32* @r4, align 4
  store i32 %v0_107a8, i32* %r0.global-to-local, align 4
  %v2_107ac = call i32 @function_133a0(i32 %v0_107a8, i32 4)
  store i32 1, i32* %ip.global-to-local, align 4
  %v2_107b8 = load i32, i32* @global_var_1eafc.181, align 4
  store i32 %v2_107b8, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_107c0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_107c0, i32* %r1.global-to-local, align 4
  %v2_107c4 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_107c4, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v6_107d4 = call i32 @function_13d60(i32 %v2_107b8, i32 %v0_107c0, i32 3, i32* nonnull %stack_var_-52, i32 4)
  store i32 %v6_107d4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_107d8 = icmp eq i32 %v6_107d4, 0
  store i1 %v2_107d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_107d8, label %dec_label_pc_107e0, label %dec_label_pc_11190

dec_label_pc_107e0:                               ; preds = %dec_label_pc_10794, %dec_label_pc_107e0
  %v0_107e0 = call i32 @function_fbfc()
  %v3_107e4 = mul i32 %v0_107e0, 65536
  store i32 %v3_107e4, i32* %r0.global-to-local, align 4
  %v1_107f0 = mul i32 %v0_107e0, 256
  %v3_107f4 = and i32 %v1_107f0, 65280
  %tmp276 = udiv i32 %v0_107e0, 256
  %v4_107f8 = urem i32 %tmp276, 256
  %v5_107f8 = or i32 %v4_107f8, %v3_107f4
  store i32 %v5_107f8, i32* %r3.global-to-local, align 4
  %v2_107fc = icmp ugt i32 %v5_107f8, 1023
  store i1 %v2_107fc, i1* %cpsr_c.global-to-local, align 1
  %v7_107fc = icmp eq i32 %v5_107f8, 1024
  store i1 %v7_107fc, i1* %cpsr_z.global-to-local, align 1
  %v3_10800 = icmp ult i32 %v5_107f8, 1022
  br i1 %v3_10800, label %dec_label_pc_107e0, label %dec_label_pc_10804

dec_label_pc_10804:                               ; preds = %dec_label_pc_107e0
  %v5_107ec.le = trunc i32 %v0_107e0 to i8
  store i32 ptrtoint (i8** @global_var_1ea64.183 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i8 69, i8* bitcast (i8** @global_var_1ea64.183 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1ea67.184 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1ea66.185 to i8*), align 4
  %v0_10838 = call i32 @function_fbfc()
  %v1_10838 = trunc i32 %v0_10838 to i8
  store i32 %v0_10838, i32* %r0.global-to-local, align 4
  %v4_10840 = sext i8 %v5_107ec.le to i32
  %v3_10844 = load i8, i8* @global_var_1ea84.188, align 1
  store i32 ptrtoint (i8** @global_var_1ea64.183 to i32), i32* %lr.global-to-local, align 4
  %v3_1084c228 = udiv i32 %v4_10840, 256
  store i8 64, i8* bitcast (i32* @global_var_1ea6c.189 to i8*), align 4
  %v2_10858 = and i32 %v0_10838, 128
  %v3_10858 = icmp ne i32 %v2_10858, 0
  store i1 %v3_10858, i1* %cpsr_c.global-to-local, align 1
  %v4_10858227 = udiv i32 %v0_10838, 256
  store i32 ptrtoint (i32* @global_var_1ea78.187 to i32), i32* %r3.global-to-local, align 4
  %tmp = urem i8 %v3_10844, 16
  %v1_10860 = zext i8 %tmp to i32
  %v1_10864 = trunc i32 %v4_10858227 to i8
  store i8 %v1_10864, i8* bitcast (i32* @global_var_1ea69.190 to i8*), align 4
  %v1_10868 = or i32 %v1_10860, 80
  store i32 %v1_10868, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r2.global-to-local, align 4
  store i32 6, i32* @r6, align 4
  %v1_10874 = trunc i32 %v1_10868 to i8
  store i8 %v1_10874, i8* @global_var_1ea84.188, align 1
  %v1_10878 = trunc i32 %v3_1084c228 to i8
  store i8 %v1_10878, i8* bitcast (i32* @global_var_1ea79.191 to i8*), align 4
  store i8 23, i8* bitcast (i32* @global_var_1ea7b.192 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_1ea6d.193 to i8*), align 4
  store i32 %v4_10840, i32* %ip.global-to-local, align 4
  store i8 %v1_10838, i8* bitcast (i32* @global_var_1ea68.194 to i8*), align 4
  store i8 %v5_107ec.le, i8* bitcast (i32* @global_var_1ea78.187 to i8*), align 4
  %v0_10890 = load i32, i32* @r5, align 4
  %v1_10890 = trunc i32 %v0_10890 to i8
  store i8 %v1_10890, i8* bitcast (i32* @global_var_1ea7a.195 to i8*), align 4
  %v0_10894 = call i32 @function_fbfc()
  %v1_10894 = trunc i32 %v0_10894 to i8
  store i32 ptrtoint (i32* @global_var_1ea78.187 to i32), i32* @lr, align 4
  %v3_1089c = load i8, i8* @global_var_1ea85.196, align 1
  %v4_1089c = zext i8 %v3_1089c to i32
  %v2_108a0 = and i32 %v0_10894, 128
  %v3_108a0 = icmp ne i32 %v2_108a0, 0
  store i1 %v3_108a0, i1* %cpsr_c.global-to-local, align 1
  %v4_108a0 = sdiv i32 %v0_10894, 256
  store i32 %v4_108a0, i32* %ip.global-to-local, align 4
  %v1_108a4 = or i32 %v4_1089c, 2
  store i32 %v1_108a4, i32* %r3.global-to-local, align 4
  store i32 %v0_10894, i32* @r4, align 4
  %v1_108ac = trunc i32 %v4_108a0 to i8
  store i8 %v1_108ac, i8* bitcast (i32* @global_var_1ea87.197 to i8*), align 4
  %v1_108b0 = trunc i32 %v1_108a4 to i8
  store i8 %v1_108b0, i8* @global_var_1ea85.196, align 1
  store i8 %v1_10894, i8* bitcast (i32* @global_var_1ea86.198 to i8*), align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ec0.202 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_108c4 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint (i32* @global_var_15ec0.202 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r1.global-to-local, align 4
  %v5_108d4 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ec4.204 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_108e4 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint (i32* @global_var_15ec4.204 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f3c.206 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_108f4 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint (i32* @global_var_15f3c.206 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ecc.208 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10904 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint (i32* @global_var_15ecc.208 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ed4.210 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_10914 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint (i32* @global_var_15ed4.210 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ec0.202 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_10924 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint (i32* @global_var_15ec0.202 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ed8.212 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_10934 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint (i32* @global_var_15ed8.212 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ee0.214 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_10944 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint (i32* @global_var_15ee0.214 to i32), i32 15)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ee8.216 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v4_10954 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint (i32* @global_var_15ee8.216 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15ef0.218 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_10964 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint ([7 x i8]* @global_var_15ef0.218 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ef8.220 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_10974 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint (i32* @global_var_15ef8.220 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f04.222 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_10984 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint (i32* @global_var_15f04.222 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f10.224 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10994 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint (i32* @global_var_15f10.224 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f18.226 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_109a4 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint (i32* @global_var_15f18.226 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f24.228 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_109b4 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint (i32* @global_var_15f24.228 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15f30.230 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_109c4 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint ([8 x i8]* @global_var_15f30.230 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f38.232 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_109d4 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint (i32* @global_var_15f38.232 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15f40.234 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_109e4 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint ([7 x i8]* @global_var_15f40.234 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15f48.236 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_109f4 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint ([6 x i8]* @global_var_15f48.236 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15f50.238 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_10a04 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint ([5 x i8]* @global_var_15f50.238 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15f58.240 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_10a14 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint ([8 x i8]* @global_var_15f58.240 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f60.242 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_10a24 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint (i32* @global_var_15f60.242 to i32), i32 15)
  %v0_10a28 = load i32, i32* @r6, align 4
  store i32 %v0_10a28, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15f68.244 to i32), i32* %r1.global-to-local, align 4
  %v5_10a34 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint ([6 x i8]* @global_var_15f68.244 to i32), i32 %v0_10a28)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_10a44 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15f78.248 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_10a54 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint ([5 x i8]* @global_var_15f78.248 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15f80.250 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_10a64 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint ([8 x i8]* @global_var_15f80.250 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f88.252 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_10a74 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint (i32* @global_var_15f88.252 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f90.254 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_10a84 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint (i32* @global_var_15f90.254 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15f98.256 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_10a94 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint ([9 x i8]* @global_var_15f98.256 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15fa4.258 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_10aa4 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint (i32* @global_var_15fa4.258 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15fb0.260 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_10ab4 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint (i32* @global_var_15fb0.260 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15fbc.262 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_10ac4 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), i32 ptrtoint (i32* @global_var_15fbc.262 to i32), i32 7)
  store i32 ptrtoint ([11 x i8]* @global_var_15fcc.264 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15fd8.266 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_10ad4 = call i32 @function_10514(i32 ptrtoint ([11 x i8]* @global_var_15fcc.264 to i32), i32 ptrtoint (i32* @global_var_15fd8.266 to i32), i32 2)
  store i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15f78.248 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_10ae4 = call i32 @function_10514(i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32 ptrtoint ([5 x i8]* @global_var_15f78.248 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ecc.208 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_10af4 = call i32 @function_10514(i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32 ptrtoint (i32* @global_var_15ecc.208 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ed8.212 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_10b04 = call i32 @function_10514(i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32 ptrtoint (i32* @global_var_15ed8.212 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ee0.214 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_10b14 = call i32 @function_10514(i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32 ptrtoint (i32* @global_var_15ee0.214 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ee8.216 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_10b24 = call i32 @function_10514(i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32 ptrtoint (i32* @global_var_15ee8.216 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f04.222 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_10b34 = call i32 @function_10514(i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32 ptrtoint (i32* @global_var_15f04.222 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15fe4.268 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_10b44 = call i32 @function_10514(i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32 ptrtoint (i32* @global_var_15fe4.268 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15f98.256 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_10b54 = call i32 @function_10514(i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32 ptrtoint ([9 x i8]* @global_var_15f98.256 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15fec.270 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_10b64 = call i32 @function_10514(i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32 ptrtoint (i32* @global_var_15fec.270 to i32), i32 5)
  store i32 ptrtoint ([14 x i8]* @global_var_15ff4.272 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d78.274 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_10b74 = call i32 @function_10514(i32 ptrtoint ([14 x i8]* @global_var_15ff4.272 to i32), i32 ptrtoint (i32* @global_var_15d78.274 to i32), i32 5)
  store i32 ptrtoint ([14 x i8]* @global_var_15e04.276 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ed8.212 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10b84 = call i32 @function_10514(i32 ptrtoint ([14 x i8]* @global_var_15e04.276 to i32), i32 ptrtoint (i32* @global_var_15ed8.212 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_15e14.278 to i32), i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15e14.278 to i32), i32* %r1.global-to-local, align 4
  %v5_10b94 = call i32 @function_10514(i32 ptrtoint ([6 x i8]* @global_var_15e14.278 to i32), i32 ptrtoint ([6 x i8]* @global_var_15e14.278 to i32), i32 3)
  store i32 ptrtoint ([4 x i8]* @global_var_15e1c.280 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d78.274 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_10ba4 = call i32 @function_10514(i32 ptrtoint ([4 x i8]* @global_var_15e1c.280 to i32), i32 ptrtoint (i32* @global_var_15d78.274 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32* %r0.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32* %r1.global-to-local, align 4
  %v5_10bb4 = call i32 @function_10514(i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32 15)
  store i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15fbc.262 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_10bc4 = call i32 @function_10514(i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32 ptrtoint (i32* @global_var_15fbc.262 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15e20.282 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_10bd4 = call i32 @function_10514(i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32 ptrtoint ([9 x i8]* @global_var_15e20.282 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15e2c.284 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10be4 = call i32 @function_10514(i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32 ptrtoint (i32* @global_var_15e2c.284 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15e38.286 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10bf4 = call i32 @function_10514(i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32 ptrtoint (i32* @global_var_15e38.286 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15e44.288 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_10c04 = call i32 @function_10514(i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32 ptrtoint (i32* @global_var_15e44.288 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15e4c.290 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10c14 = call i32 @function_10514(i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), i32 ptrtoint (i32* @global_var_15e4c.290 to i32), i32 1)
  store i32 ptrtoint (i32* @global_var_15e58.292 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15e60.294 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_10c24 = call i32 @function_10514(i32 ptrtoint (i32* @global_var_15e58.292 to i32), i32 ptrtoint ([7 x i8]* @global_var_15e60.294 to i32), i32 15)
  store i32 ptrtoint ([8 x i8]* @global_var_15f30.230 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d78.274 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_10c34 = call i32 @function_10514(i32 ptrtoint ([8 x i8]* @global_var_15f30.230 to i32), i32 ptrtoint (i32* @global_var_15d78.274 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_15e68.296 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15e68.296 to i32), i32* %r1.global-to-local, align 4
  %v5_10c44 = call i32 @function_10514(i32 ptrtoint ([8 x i8]* @global_var_15e68.296 to i32), i32 ptrtoint ([8 x i8]* @global_var_15e68.296 to i32), i32 10)
  store i32 ptrtoint ([8 x i8]* @global_var_15e68.296 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ed8.212 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_10c54 = call i32 @function_10514(i32 ptrtoint ([8 x i8]* @global_var_15e68.296 to i32), i32 ptrtoint (i32* @global_var_15ed8.212 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_15e68.296 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ee8.216 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_10c64 = call i32 @function_10514(i32 ptrtoint ([8 x i8]* @global_var_15e68.296 to i32), i32 ptrtoint (i32* @global_var_15ee8.216 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_15e70.298 to i32), i32* %r0.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15e70.298 to i32), i32* %r1.global-to-local, align 4
  %v5_10c74 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15e70.298 to i32), i32 ptrtoint ([5 x i8]* @global_var_15e70.298 to i32), i32 15)
  store i32 ptrtoint ([5 x i8]* @global_var_15e70.298 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ee8.216 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_10c84 = call i32 @function_10514(i32 ptrtoint ([5 x i8]* @global_var_15e70.298 to i32), i32 ptrtoint (i32* @global_var_15ee8.216 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_15e78.300 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ecc.208 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_10c94 = call i32 @function_10514(i32 ptrtoint ([6 x i8]* @global_var_15e78.300 to i32), i32 ptrtoint (i32* @global_var_15ecc.208 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_15e78.300 to i32), i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15e78.300 to i32), i32* %r1.global-to-local, align 4
  %v5_10ca4 = call i32 @function_10514(i32 ptrtoint ([6 x i8]* @global_var_15e78.300 to i32), i32 ptrtoint ([6 x i8]* @global_var_15e78.300 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_15e78.300 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ee0.214 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_10cb4 = call i32 @function_10514(i32 ptrtoint ([6 x i8]* @global_var_15e78.300 to i32), i32 ptrtoint (i32* @global_var_15ee0.214 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_15e78.300 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ee8.216 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10cc4 = call i32 @function_10514(i32 ptrtoint ([6 x i8]* @global_var_15e78.300 to i32), i32 ptrtoint (i32* @global_var_15ee8.216 to i32), i32 1)
  store i32 ptrtoint ([7 x i8]* @global_var_15e80.302 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d78.274 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_10cd4 = call i32 @function_10514(i32 ptrtoint ([7 x i8]* @global_var_15e80.302 to i32), i32 ptrtoint (i32* @global_var_15d78.274 to i32), i32 7)
  store i32 ptrtoint (i32* @global_var_15ed8.212 to i32), i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ed8.212 to i32), i32* %r1.global-to-local, align 4
  %v3_10ce4 = call i32 @function_10514(i32 ptrtoint (i32* @global_var_15ed8.212 to i32), i32 ptrtoint (i32* @global_var_15ed8.212 to i32), i32 2)
  store i32 ptrtoint ([4 x i8]* @global_var_15e88.304 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d78.274 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_10cf4 = call i32 @function_10514(i32 ptrtoint ([4 x i8]* @global_var_15e88.304 to i32), i32 ptrtoint (i32* @global_var_15d78.274 to i32), i32 10)
  store i32 ptrtoint ([7 x i8]* @global_var_15e8c.306 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15e8c.306 to i32), i32* %r1.global-to-local, align 4
  %v5_10d04 = call i32 @function_10514(i32 ptrtoint ([7 x i8]* @global_var_15e8c.306 to i32), i32 ptrtoint ([7 x i8]* @global_var_15e8c.306 to i32), i32 5)
  store i32 ptrtoint ([9 x i8]* @global_var_15e94.308 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15e94.308 to i32), i32* %r1.global-to-local, align 4
  %v5_10d14 = call i32 @function_10514(i32 ptrtoint ([9 x i8]* @global_var_15e94.308 to i32), i32 ptrtoint ([9 x i8]* @global_var_15e94.308 to i32), i32 1)
  %v2_10d1c = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_10d1c, i32* %r0.global-to-local, align 4
  %v2_10d20 = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_10d20, i32* %r1.global-to-local, align 4
  %tmp277 = bitcast i32* %stack_var_-1842 to i8*
  br label %dec_label_pc_10d2c

dec_label_pc_10d2c:                               ; preds = %dec_label_pc_11384, %dec_label_pc_10804
  %stack_var_-1872.0 = phi i32 [ %tmp239, %dec_label_pc_10804 ], [ %stack_var_-1872.2, %dec_label_pc_11384 ]
  %stack_var_-1884.0 = phi i8* [ %tmp277, %dec_label_pc_10804 ], [ %stack_var_-1884.1, %dec_label_pc_11384 ]
  %v0_1105c = phi i32 [ %v2_10d1c, %dec_label_pc_10804 ], [ %stack_var_-1880.1, %dec_label_pc_11384 ]
  %stack_var_-1876.0 = phi i8 [ %v5_107ec.le, %dec_label_pc_10804 ], [ %stack_var_-1876.1, %dec_label_pc_11384 ]
  store i32 ptrtoint (i32* @global_var_1ea94.167 to i32), i32* %r2.global-to-local, align 4
  store i32 %stack_var_-1872.0, i32* %r3.global-to-local, align 4
  %v2_10d34 = load i32, i32* @global_var_1ea94.167, align 4
  store i32 %v2_10d34, i32* @r8, align 4
  %v3_10d38 = icmp uge i32 %stack_var_-1872.0, %v2_10d34
  store i1 %v3_10d38, i1* %cpsr_c.global-to-local, align 1
  %v9_10d38 = icmp eq i32 %stack_var_-1872.0, %v2_10d34
  store i1 %v9_10d38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10d38, label %dec_label_pc_10fe4, label %dec_label_pc_10d40

dec_label_pc_10d40:                               ; preds = %dec_label_pc_10d2c
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  %v2_10fb4 = ptrtoint i32* %stack_var_-92 to i32
  br label %dec_label_pc_10d4c

dec_label_pc_10d4c:                               ; preds = %.thread47.dec_label_pc_10d4c_crit_edge, %dec_label_pc_10d40
  %v0_10d4c = phi i32 [ %v0_10d4c.pre, %.thread47.dec_label_pc_10d4c_crit_edge ], [ 0, %dec_label_pc_10d40 ]
  store i32 %v0_10d4c, i32* %stack_var_-92, align 4
  store i32 %v0_10d4c, i32* %stack_var_-84, align 4
  %v0_10d5c = call i32 @function_fbfc()
  %v1_10d5c = trunc i32 %v0_10d5c to i8
  store i32 %v0_10d5c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1eadc.85 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1ea64.183 to i32), i32* %r1.global-to-local, align 4
  %v2_10d68 = load i32, i32* @global_var_1eadc.85, align 4
  store i32 %v2_10d68, i32* %r2.global-to-local, align 4
  %v2_10d6c = and i32 %v0_10d5c, 128
  %v3_10d6c = icmp ne i32 %v2_10d6c, 0
  store i1 %v3_10d6c, i1* %cpsr_c.global-to-local, align 1
  %v4_10d6c = sdiv i32 %v0_10d5c, 256
  store i32 %v4_10d6c, i32* %r3.global-to-local, align 4
  %v1_10d70 = trunc i32 %v4_10d6c to i8
  store i8 %v1_10d70, i8* bitcast (i32* @global_var_1ea69.190 to i8*), align 4
  store i32 %v2_10d68, i32* @global_var_1ea70.309, align 4
  store i8 %v1_10d5c, i8* bitcast (i32* @global_var_1ea68.194 to i8*), align 4
  br label %dec_label_pc_10d7c

dec_label_pc_10d7c:                               ; preds = %dec_label_pc_10e50, %dec_label_pc_10dac, %dec_label_pc_10e84, %dec_label_pc_10e78, %dec_label_pc_10e6c, %dec_label_pc_10e60, %.thread32, %bb296, %bb295, %bb294, %bb293, %bb292, %dec_label_pc_10e48, %dec_label_pc_10e40, %bb288, %dec_label_pc_10e10, %dec_label_pc_10dec, %bb281, %dec_label_pc_10dbc, %bb280, %dec_label_pc_10da4, %bb279, %bb298, %dec_label_pc_10d4c
  %v0_10d7c = call i32 @function_fbfc()
  store i32 %v0_10d7c, i32* %r0.global-to-local, align 4
  %v1_10d80 = urem i32 %v0_10d7c, 256
  store i32 %v1_10d80, i32* %r1.global-to-local, align 4
  %v3_10d84 = udiv i32 %v0_10d7c, 256
  store i32 %v3_10d84, i32* %r3.global-to-local, align 4
  %v3_10d88 = udiv i32 %v0_10d7c, 65536
  store i32 %v3_10d88, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10d8c = icmp eq i32 %v1_10d80, 0
  store i1 %v2_10d8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10d8c, label %bb279, label %bb278

bb278:                                            ; preds = %dec_label_pc_10d7c
  %v3_10d90 = icmp ugt i32 %v1_10d80, 126
  store i1 %v3_10d90, i1* %cpsr_c.global-to-local, align 1
  %v8_10d90 = icmp eq i32 %v1_10d80, 127
  store i1 %v8_10d90, i1* %cpsr_z.global-to-local, align 1
  br label %bb279

bb279:                                            ; preds = %dec_label_pc_10d7c, %bb278
  %v0_10da0 = phi i1 [ true, %dec_label_pc_10d7c ], [ %v8_10d90, %bb278 ]
  %v1_10d94 = urem i32 %v3_10d84, 256
  store i32 %v1_10d94, i32* %ip.global-to-local, align 4
  %v1_10d98 = urem i32 %v3_10d88, 256
  store i32 %v1_10d98, i32* %r2.global-to-local, align 4
  %v1_10d9c = and i32 %v0_10d7c, 8388608
  %v2_10d9c = icmp ne i32 %v1_10d9c, 0
  store i1 %v2_10d9c, i1* %cpsr_c.global-to-local, align 1
  %v3_10d9c = udiv i32 %v0_10d7c, 16777216
  store i32 %v3_10d9c, i32* %r0.global-to-local, align 4
  br i1 %v0_10da0, label %dec_label_pc_10d7c, label %dec_label_pc_10da4

dec_label_pc_10da4:                               ; preds = %bb279
  %v2_10da4 = icmp ugt i32 %v1_10d80, 2
  store i1 %v2_10da4, i1* %cpsr_c.global-to-local, align 1
  %v7_10da4 = icmp eq i32 %v1_10d80, 3
  store i1 %v7_10da4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10da4, label %dec_label_pc_10d7c, label %dec_label_pc_10dac

dec_label_pc_10dac:                               ; preds = %dec_label_pc_10da4
  %v1_10dac = add nsw i32 %v1_10d80, -15
  store i32 %v1_10dac, i32* %r3.global-to-local, align 4
  %v2_10db0 = icmp ugt i32 %v1_10d80, 55
  store i1 %v2_10db0, i1* %cpsr_c.global-to-local, align 1
  %v7_10db0 = icmp eq i32 %v1_10d80, 56
  store i1 %v7_10db0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10db0, label %dec_label_pc_10d7c, label %bb280

bb280:                                            ; preds = %dec_label_pc_10dac
  %v3_10db4 = icmp ne i32 %v1_10dac, 0
  store i1 %v3_10db4, i1* %cpsr_c.global-to-local, align 1
  %v8_10db4 = icmp eq i32 %v1_10dac, 1
  store i1 %v8_10db4, i1* %cpsr_z.global-to-local, align 1
  %v2_10db8 = xor i1 %v3_10db4, true
  %v3_10db8 = or i1 %v8_10db4, %v2_10db8
  br i1 %v3_10db8, label %dec_label_pc_10d7c, label %dec_label_pc_10dbc

dec_label_pc_10dbc:                               ; preds = %bb280
  %v2_10dbc = icmp ugt i32 %v1_10d80, 9
  store i1 %v2_10dbc, i1* %cpsr_c.global-to-local, align 1
  %v7_10dbc = icmp eq i32 %v1_10d80, 10
  store i1 %v7_10dbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10dbc, label %dec_label_pc_10d7c, label %dec_label_pc_10dc4

dec_label_pc_10dc4:                               ; preds = %dec_label_pc_10dbc
  %v2_10dc4 = icmp ugt i32 %v1_10d80, 191
  store i1 %v2_10dc4, i1* %cpsr_c.global-to-local, align 1
  %v7_10dc4 = icmp eq i32 %v1_10d80, 192
  store i1 %v7_10dc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10dc4, label %bb281, label %dec_label_pc_10dd0

bb281:                                            ; preds = %dec_label_pc_10dc4
  %v3_10dc8 = icmp ugt i32 %v1_10d94, 167
  store i1 %v3_10dc8, i1* %cpsr_c.global-to-local, align 1
  %v8_10dc8 = icmp eq i32 %v1_10d94, 168
  store i1 %v8_10dc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10dc8, label %dec_label_pc_10d7c, label %dec_label_pc_10dd0

dec_label_pc_10dd0:                               ; preds = %dec_label_pc_10dc4, %bb281
  %v7_10dd0 = icmp eq i32 %v1_10d80, 172
  %.347 = zext i1 %v7_10dd0 to i32
  store i32 %.347, i32* %r3.global-to-local, align 4
  %v2_10ddc = icmp ugt i32 %v1_10d94, 14
  store i1 %v2_10ddc, i1* %cpsr_c.global-to-local, align 1
  %v7_10ddc = icmp eq i32 %v1_10d94, 15
  store i1 %v7_10ddc, i1* %cpsr_z.global-to-local, align 1
  %v2_10de0 = xor i1 %v2_10ddc, true
  %v3_10de0 = or i1 %v7_10ddc, %v2_10de0
  br i1 %v3_10de0, label %.thread10, label %bb284

.thread10:                                        ; preds = %dec_label_pc_10dd0
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10df4

bb284:                                            ; preds = %dec_label_pc_10dd0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10de4 = icmp eq i1 %v7_10dd0, false
  store i1 %v2_10de4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10de4, label %dec_label_pc_10df4, label %dec_label_pc_10dec

dec_label_pc_10dec:                               ; preds = %bb284
  %v2_10dec = icmp ugt i32 %v1_10d94, 30
  store i1 %v2_10dec, i1* %cpsr_c.global-to-local, align 1
  %v7_10dec = icmp eq i32 %v1_10d94, 31
  store i1 %v7_10dec, i1* %cpsr_z.global-to-local, align 1
  %v2_10df0 = xor i1 %v2_10dec, true
  %v3_10df0 = or i1 %v7_10dec, %v2_10df0
  br i1 %v3_10df0, label %dec_label_pc_10d7c, label %dec_label_pc_10df4

dec_label_pc_10df4:                               ; preds = %.thread10, %dec_label_pc_10dec, %bb284
  %v7_10df4 = icmp eq i32 %v1_10d80, 100
  %.348 = zext i1 %v7_10df4 to i32
  store i32 %.348, i32* %r3.global-to-local, align 4
  %v2_10e00 = icmp ugt i32 %v1_10d94, 62
  store i1 %v2_10e00, i1* %cpsr_c.global-to-local, align 1
  %v7_10e00 = icmp eq i32 %v1_10d94, 63
  store i1 %v7_10e00, i1* %cpsr_z.global-to-local, align 1
  %v2_10e04 = xor i1 %v2_10e00, true
  %v3_10e04 = or i1 %v7_10e00, %v2_10e04
  br i1 %v3_10e04, label %.thread15, label %bb287

.thread15:                                        ; preds = %dec_label_pc_10df4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10e18

bb287:                                            ; preds = %dec_label_pc_10df4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10e08 = icmp eq i1 %v7_10df4, false
  store i1 %v2_10e08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10e08, label %dec_label_pc_10e18, label %dec_label_pc_10e10

dec_label_pc_10e10:                               ; preds = %bb287
  %v2_10e10 = icmp ugt i32 %v1_10d94, 125
  store i1 %v2_10e10, i1* %cpsr_c.global-to-local, align 1
  %v7_10e10 = icmp eq i32 %v1_10d94, 126
  store i1 %v7_10e10, i1* %cpsr_z.global-to-local, align 1
  %v2_10e14 = xor i1 %v2_10e10, true
  %v3_10e14 = or i1 %v7_10e10, %v2_10e14
  br i1 %v3_10e14, label %dec_label_pc_10d7c, label %dec_label_pc_10e18

dec_label_pc_10e18:                               ; preds = %.thread15, %dec_label_pc_10e10, %bb287
  %v2_10e18 = icmp ugt i32 %v1_10d80, 168
  store i1 %v2_10e18, i1* %cpsr_c.global-to-local, align 1
  %v7_10e18 = icmp eq i32 %v1_10d80, 169
  store i1 %v7_10e18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e18, label %bb288, label %dec_label_pc_10e24

bb288:                                            ; preds = %dec_label_pc_10e18
  %v3_10e1c = icmp eq i32 %v1_10d94, 255
  store i1 %v3_10e1c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_10e1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10e1c, label %dec_label_pc_10d7c, label %dec_label_pc_10e24

dec_label_pc_10e24:                               ; preds = %dec_label_pc_10e18, %bb288
  %v7_10e24 = icmp eq i32 %v1_10d80, 198
  %.349 = zext i1 %v7_10e24 to i32
  store i32 %.349, i32* %r3.global-to-local, align 4
  %v2_10e30 = icmp ugt i32 %v1_10d94, 16
  store i1 %v2_10e30, i1* %cpsr_c.global-to-local, align 1
  %v7_10e30 = icmp eq i32 %v1_10d94, 17
  store i1 %v7_10e30, i1* %cpsr_z.global-to-local, align 1
  %v2_10e34 = xor i1 %v2_10e30, true
  %v3_10e34 = or i1 %v7_10e30, %v2_10e34
  br i1 %v3_10e34, label %.thread21, label %bb291

.thread21:                                        ; preds = %dec_label_pc_10e24
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10e48

bb291:                                            ; preds = %dec_label_pc_10e24
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10e38 = icmp eq i1 %v7_10e24, false
  store i1 %v2_10e38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10e38, label %dec_label_pc_10e48, label %dec_label_pc_10e40

dec_label_pc_10e40:                               ; preds = %bb291
  %v2_10e40 = icmp ugt i32 %v1_10d94, 18
  store i1 %v2_10e40, i1* %cpsr_c.global-to-local, align 1
  %v7_10e40 = icmp eq i32 %v1_10d94, 19
  store i1 %v7_10e40, i1* %cpsr_z.global-to-local, align 1
  %v2_10e44 = xor i1 %v2_10e40, true
  %v3_10e44 = or i1 %v7_10e40, %v2_10e44
  br i1 %v3_10e44, label %dec_label_pc_10d7c, label %dec_label_pc_10e48

dec_label_pc_10e48:                               ; preds = %.thread21, %dec_label_pc_10e40, %bb291
  %v2_10e48 = icmp ugt i32 %v1_10d80, 222
  store i1 %v2_10e48, i1* %cpsr_c.global-to-local, align 1
  %v7_10e48 = icmp eq i32 %v1_10d80, 223
  store i1 %v7_10e48, i1* %cpsr_z.global-to-local, align 1
  %v2_10e4c = xor i1 %v7_10e48, true
  %v3_10e4c = and i1 %v2_10e48, %v2_10e4c
  br i1 %v3_10e4c, label %dec_label_pc_10d7c, label %dec_label_pc_10e50

dec_label_pc_10e50:                               ; preds = %dec_label_pc_10e48
  %v1_10e50 = add nsw i32 %v1_10d80, -6
  store i32 %v1_10e50, i32* %r3.global-to-local, align 4
  %v2_10e54 = icmp ugt i32 %v1_10d80, 10
  store i1 %v2_10e54, i1* %cpsr_c.global-to-local, align 1
  %v7_10e54 = icmp eq i32 %v1_10d80, 11
  store i1 %v7_10e54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e54, label %dec_label_pc_10d7c, label %bb292

bb292:                                            ; preds = %dec_label_pc_10e50
  %v3_10e58 = icmp ne i32 %v1_10e50, 0
  store i1 %v3_10e58, i1* %cpsr_c.global-to-local, align 1
  %v8_10e58 = icmp eq i32 %v1_10e50, 1
  store i1 %v8_10e58, i1* %cpsr_z.global-to-local, align 1
  %v2_10e5c = xor i1 %v3_10e58, true
  %v3_10e5c = or i1 %v8_10e58, %v2_10e5c
  br i1 %v3_10e5c, label %dec_label_pc_10d7c, label %dec_label_pc_10e60

dec_label_pc_10e60:                               ; preds = %bb292
  %v2_10e60 = icmp ugt i32 %v1_10d80, 21
  store i1 %v2_10e60, i1* %cpsr_c.global-to-local, align 1
  %v7_10e60 = icmp eq i32 %v1_10d80, 22
  store i1 %v7_10e60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e60, label %dec_label_pc_10d7c, label %bb293

bb293:                                            ; preds = %dec_label_pc_10e60
  %v3_10e64 = icmp ugt i32 %v1_10d80, 20
  store i1 %v3_10e64, i1* %cpsr_c.global-to-local, align 1
  %v8_10e64 = icmp eq i32 %v1_10d80, 21
  store i1 %v8_10e64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10e64, label %dec_label_pc_10d7c, label %dec_label_pc_10e6c

dec_label_pc_10e6c:                               ; preds = %bb293
  %v2_10e6c = icmp ugt i32 %v1_10d80, 27
  store i1 %v2_10e6c, i1* %cpsr_c.global-to-local, align 1
  %v7_10e6c = icmp eq i32 %v1_10d80, 28
  store i1 %v7_10e6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e6c, label %dec_label_pc_10d7c, label %bb294

bb294:                                            ; preds = %dec_label_pc_10e6c
  %v3_10e70 = icmp ugt i32 %v1_10d80, 25
  store i1 %v3_10e70, i1* %cpsr_c.global-to-local, align 1
  %v8_10e70 = icmp eq i32 %v1_10d80, 26
  store i1 %v8_10e70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10e70, label %dec_label_pc_10d7c, label %dec_label_pc_10e78

dec_label_pc_10e78:                               ; preds = %bb294
  %v2_10e78 = icmp ugt i32 %v1_10d80, 29
  store i1 %v2_10e78, i1* %cpsr_c.global-to-local, align 1
  %v7_10e78 = icmp eq i32 %v1_10d80, 30
  store i1 %v7_10e78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e78, label %dec_label_pc_10d7c, label %bb295

bb295:                                            ; preds = %dec_label_pc_10e78
  %v3_10e7c = icmp ugt i32 %v1_10d80, 28
  store i1 %v3_10e7c, i1* %cpsr_c.global-to-local, align 1
  %v8_10e7c = icmp eq i32 %v1_10d80, 29
  store i1 %v8_10e7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10e7c, label %dec_label_pc_10d7c, label %dec_label_pc_10e84

dec_label_pc_10e84:                               ; preds = %bb295
  %v2_10e84 = icmp ugt i32 %v1_10d80, 54
  store i1 %v2_10e84, i1* %cpsr_c.global-to-local, align 1
  %v7_10e84 = icmp eq i32 %v1_10d80, 55
  store i1 %v7_10e84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e84, label %dec_label_pc_10d7c, label %bb296

bb296:                                            ; preds = %dec_label_pc_10e84
  %v3_10e88 = icmp ugt i32 %v1_10d80, 32
  store i1 %v3_10e88, i1* %cpsr_c.global-to-local, align 1
  %v8_10e88 = icmp eq i32 %v1_10d80, 33
  store i1 %v8_10e88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10e88, label %dec_label_pc_10d7c, label %dec_label_pc_10e90

dec_label_pc_10e90:                               ; preds = %bb296
  %v2_10e90 = icmp ugt i32 %v1_10d80, 214
  store i1 %v2_10e90, i1* %cpsr_c.global-to-local, align 1
  %v7_10e90 = icmp eq i32 %v1_10d80, 215
  store i1 %v7_10e90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e90, label %.thread32, label %bb297

bb297:                                            ; preds = %dec_label_pc_10e90
  %v3_10e94 = icmp ugt i32 %v1_10d80, 213
  store i1 %v3_10e94, i1* %cpsr_c.global-to-local, align 1
  %v8_10e94 = icmp eq i32 %v1_10d80, 214
  store i1 %v8_10e94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10e94, label %bb298, label %dec_label_pc_10ea4

.thread32:                                        ; preds = %dec_label_pc_10e90
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10d7c

bb298:                                            ; preds = %bb297
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10d7c

dec_label_pc_10ea4:                               ; preds = %bb297
  store i32 0, i32* @r4, align 4
  %v5_10eb0 = call i32 @llvm.bswap.i32(i32 %v0_10d7c)
  store i32 %v5_10eb0, i32* %r3.global-to-local, align 4
  %tmp299 = and i32 %v0_10d7c, 65280
  %tmp300 = call i32 @llvm.bswap.i32(i32 %tmp299)
  %tmp301 = and i32 %v0_10d7c, 16711680
  %tmp302 = call i32 @llvm.bswap.i32(i32 %tmp301)
  %v3_10ebc = mul nuw i32 %v3_10d9c, 16777216
  %v3_10ec0 = udiv i32 %tmp300, 256
  %v4_10ec4 = mul nuw nsw i32 %tmp302, 256
  %tmp303 = and i32 %v0_10d7c, 32768
  %v3_10ec8 = icmp ne i32 %tmp303, 0
  store i1 %v3_10ec8, i1* %cpsr_c.global-to-local, align 1
  %v4_10ec8 = udiv i32 %v5_10eb0, 16777216
  store i32 ptrtoint (i8** @global_var_1ea64.183 to i32), i32* @r0, align 4
  %v5_10ec8 = or i32 %v4_10ec8, %v3_10ebc
  %v5_10ec4 = or i32 %v5_10ec8, %v4_10ec4
  %v2_10ed0 = or i32 %v5_10ec4, %v3_10ec0
  store i32 %v2_10ed0, i32* %r2.global-to-local, align 4
  %v5_10ed4 = trunc i32 %v4_10ec8 to i8
  store i8 %v5_10ed4, i8* @global_var_1ea74.310, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1ea6e.311 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1ea6f.312 to i8*), align 4
  %v3_10ee4 = call i32 @function_e424(i32 ptrtoint (i8** @global_var_1ea64.183 to i32), i32 20)
  store i32 ptrtoint (i8** @global_var_1ea64.183 to i32), i32* %ip.global-to-local, align 4
  %sext6 = mul i32 %v3_10ee4, 16777216
  %v1_10eec = sdiv i32 %sext6, 16777216
  store i32 %v1_10eec, i32* %r3.global-to-local, align 4
  %v2_10ef0 = and i32 %v1_10eec, 128
  %v3_10ef0 = icmp ne i32 %v2_10ef0, 0
  store i1 %v3_10ef0, i1* %cpsr_c.global-to-local, align 1
  %v4_10ef0 = ashr i32 %sext6, 31
  store i32 %v4_10ef0, i32* %r2.global-to-local, align 4
  %v1_10ef4 = trunc i32 %v1_10eec to i8
  store i8 %v1_10ef4, i8* bitcast (i32* @global_var_1ea6e.311 to i8*), align 4
  %v1_10ef8 = trunc i32 %v4_10ef0 to i8
  store i8 %v1_10ef8, i8* bitcast (i32* @global_var_1ea6f.312 to i8*), align 4
  %v3_10efc = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_10efc, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_10f04 = call i32 @function_132b8(i32 %v3_10efc, i32 10, i32 %v4_10ef0, i32 %v1_10eec)
  store i32 %v4_10f04, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10f08 = icmp eq i32 %v4_10f04, 0
  store i1 %v2_10f08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10f08, label %.thread198, label %bb304

.thread198:                                       ; preds = %dec_label_pc_10ea4
  store i32 ptrtoint (i32* @global_var_1ea78.187 to i32), i32* @lr, align 4
  br label %.thread42.thread73

bb304:                                            ; preds = %dec_label_pc_10ea4
  store i32 ptrtoint (i32* @global_var_1ea78.187 to i32), i32* %r0.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v1_10f18 = load i32, i32* @r4, align 4
  %v2_10f18 = trunc i32 %v1_10f18 to i8
  store i8 %v2_10f18, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1ea78.187 to i32), i32 2) to i8*), align 2
  %v0_10f1c.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10f1c.pr.pre, label %.thread42.thread73, label %.thread39

.thread39:                                        ; preds = %bb304
  %v1_10f1c = load i32, i32* %r3.global-to-local, align 4
  %v2_10f1c = trunc i32 %v1_10f1c to i8
  %v3_10f1c = load i32, i32* %r0.global-to-local, align 4
  %v4_10f1c = add i32 %v3_10f1c, 3
  %v5_10f1c = inttoptr i32 %v4_10f1c to i8*
  store i8 %v2_10f1c, i8* %v5_10f1c, align 1
  %v0_10f24.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1ea64.183 to i32), i32* %r0.global-to-local, align 4
  br i1 %v0_10f24.pr.pr, label %.thread45, label %.thread47

.thread42.thread73:                               ; preds = %bb304, %.thread198
  store i32 ptrtoint (i8** @global_var_1ea64.183 to i32), i32* %r0.global-to-local, align 4
  br label %.thread45

.thread45:                                        ; preds = %.thread39, %.thread42.thread73
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v3_10f2c = load i32, i32* @lr, align 4
  %v4_10f2c = add i32 %v3_10f2c, 2
  %v5_10f2c = inttoptr i32 %v4_10f2c to i8*
  store i8 9, i8* %v5_10f2c, align 1
  %v0_10f30.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10f30.pr.pr, label %bb305, label %.thread47

bb305:                                            ; preds = %.thread45
  %v1_10f30 = load i32, i32* %r2.global-to-local, align 4
  %v2_10f30 = trunc i32 %v1_10f30 to i8
  %v3_10f30 = load i32, i32* @lr, align 4
  %v4_10f30 = add i32 %v3_10f30, 3
  %v5_10f30 = inttoptr i32 %v4_10f30 to i8*
  store i8 %v2_10f30, i8* %v5_10f30, align 1
  br label %.thread47

.thread47:                                        ; preds = %.thread39, %.thread45, %bb305
  %v4_10f34 = load i8, i8* @global_var_1ea74.310, align 1
  %v5_10f34 = sext i8 %v4_10f34 to i32
  store i32 %v5_10f34, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ea78.187 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ea78.187 to i32), i32* @r1, align 4
  store i8 %v4_10f34, i8* @global_var_1ea7c.313, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_10f4c = load i32, i32* %sl.global-to-local, align 4
  %v1_10f4c = trunc i32 %v0_10f4c to i8
  store i8 %v1_10f4c, i8* bitcast (i32* @global_var_1ea88.314 to i8*), align 4
  store i8 %v1_10f4c, i8* bitcast (i32* @global_var_1ea89.315 to i8*), align 4
  %v5_10f54 = call i32 @function_e480(i32 ptrtoint (i8** @global_var_1ea64.183 to i32), i32 ptrtoint (i32* @global_var_1ea78.187 to i32), i32 5120, i32 20)
  %sext = mul i32 %v5_10f54, 16777216
  %v1_10f5c = sdiv i32 %sext, 16777216
  %v3_10f64 = ashr i32 %sext, 31
  %v2_10f68 = load i32, i32* @global_var_1ea78.187, align 4
  %v1_10f70 = trunc i32 %v3_10f64 to i8
  store i8 %v1_10f70, i8* bitcast (i32* @global_var_1ea89.315 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_10f84 = load i8, i8* @global_var_1ea74.310, align 1
  %v4_10f84 = sext i8 %v3_10f84 to i32
  store i32 %v4_10f84, i32* @r4, align 4
  %v2_10f88 = load i32, i32* @global_var_1eafc.181, align 4
  store i32 %v2_10f88, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ea78.187 to i32), i32* %ip.global-to-local, align 4
  %v1_10f98 = and i32 %v2_10f68, 8388608
  %v2_10f98 = icmp ne i32 %v1_10f98, 0
  store i1 %v2_10f98, i1* %cpsr_c.global-to-local, align 1
  %v1_10fa0 = trunc i32 %v1_10f5c to i8
  store i8 %v1_10fa0, i8* bitcast (i32* @global_var_1ea88.314 to i8*), align 4
  store i32 ptrtoint (i8** @global_var_1ea64.183 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v2_10fb4, i32* %lr.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v8_10fc8 = call i32 @function_13d2c(i32 %v2_10f88, i32* bitcast (i8** @global_var_1ea64.183 to i32*), i32 40, i32 16384, i32 %v2_10fb4, i32 16)
  store i32 %v8_10fc8, i32* %r0.global-to-local, align 4
  %v3_10fcc = load i32, i32* %stack_var_-52, align 4
  %v1_10fd0 = add i32 %v3_10fcc, 1
  store i32 %v1_10fd0, i32* %r3.global-to-local, align 4
  %v3_10fd4 = icmp ugt i32 %v1_10fd0, 319
  store i1 %v3_10fd4, i1* %cpsr_c.global-to-local, align 1
  %v8_10fd4 = icmp eq i32 %v1_10fd0, 320
  store i1 %v8_10fd4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_10fd0, i32* %stack_var_-52, align 4
  %v5_10fdc = icmp slt i32 %v1_10fd0, 320
  br i1 %v5_10fdc, label %.thread47.dec_label_pc_10d4c_crit_edge, label %dec_label_pc_10fe0

.thread47.dec_label_pc_10d4c_crit_edge:           ; preds = %.thread47
  %v0_10d4c.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_10d4c

dec_label_pc_10fe0:                               ; preds = %.thread47
  %v0_10fe0 = load i32, i32* @r8, align 4
  br label %dec_label_pc_10fe4

dec_label_pc_10fe4:                               ; preds = %dec_label_pc_10d2c, %dec_label_pc_10fe0
  %stack_var_-1872.1 = phi i32 [ %stack_var_-1872.0, %dec_label_pc_10d2c ], [ %v0_10fe0, %dec_label_pc_10fe0 ]
  %v0_10fe4 = call i32 @function_13a64()
  store i32 %v0_10fe4, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v2_10ff8 = inttoptr i32 %v0_10fe4 to i32*
  %v6_11020 = inttoptr i32 %v0_1105c to i32*
  %v1_1104c = add i32 %v0_1105c, 16
  %v2_1104c = inttoptr i32 %v1_1104c to i32*
  %v4_11068 = ptrtoint i8* %stack_var_-1884.0 to i32
  %v1_11070 = add i32 %v4_11068, 1
  %v2_11070 = inttoptr i32 %v1_11070 to i8*
  %v1_11094 = add i32 %v4_11068, 2
  %v2_11094 = inttoptr i32 %v1_11094 to i8*
  %v1_11098 = add i32 %v4_11068, 3
  %v2_11098 = inttoptr i32 %v1_11098 to i8*
  %v4_1109c = sext i8 %stack_var_-1876.0 to i32
  %v1_11178 = bitcast i8* %stack_var_-1884.0 to i32*
  %v1_1105c = add i32 %v0_1105c, 9
  %v2_1105c = inttoptr i32 %v1_1105c to i8*
  %v1_110ac = add i32 %v4_11068, 13
  %v2_110ac = inttoptr i32 %v1_110ac to i8*
  %v1_110d0 = add i32 %v4_11068, 8
  %v2_110d0 = inttoptr i32 %v1_110d0 to i32*
  %v1_11110 = add i32 %v0_1105c, 12
  %v2_11110 = inttoptr i32 %v1_11110 to i32*
  br label %dec_label_pc_10ff0

dec_label_pc_10ff0:                               ; preds = %dec_label_pc_110d0, %dec_label_pc_110c8, %dec_label_pc_110c0, %dec_label_pc_11090, %dec_label_pc_11080, %dec_label_pc_1105c, %dec_label_pc_11044, %dec_label_pc_110b8, %dec_label_pc_110ac, %dec_label_pc_1103c, %dec_label_pc_11170, %dec_label_pc_10fe4
  store i32 0, i32* %v2_10ff8, align 4
  %v2_11000 = load i32, i32* @global_var_1eafc.181, align 4
  store i32 %v2_11000, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v0_1105c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v7_11020 = call i32 @function_13ccc(i32 %v2_11000, i32* %v6_11020, i32 1514, i32 16384, i32 0, i32 0)
  store i32 %v7_11020, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11024 = icmp eq i32 %v7_11020, 0
  store i1 %v2_11024, i1* %cpsr_z.global-to-local, align 1
  %tmp306 = icmp slt i32 %v7_11020, 1
  br i1 %tmp306, label %dec_label_pc_111a4, label %dec_label_pc_1102c

dec_label_pc_1102c:                               ; preds = %dec_label_pc_10ff0
  store i32 %v0_10fe4, i32* %lr.global-to-local, align 4
  %v2_11030 = load i32, i32* %v2_10ff8, align 4
  store i32 %v2_11030, i32* %r3.global-to-local, align 4
  %v2_11034 = icmp ugt i32 %v2_11030, 10
  store i1 %v2_11034, i1* %cpsr_c.global-to-local, align 1
  %v7_11034 = icmp eq i32 %v2_11030, 11
  store i1 %v7_11034, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11034, label %dec_label_pc_111a4, label %dec_label_pc_1103c

dec_label_pc_1103c:                               ; preds = %dec_label_pc_1102c
  %v2_1103c = icmp ugt i32 %v7_11020, 38
  store i1 %v2_1103c, i1* %cpsr_c.global-to-local, align 1
  %v7_1103c = icmp eq i32 %v7_11020, 39
  store i1 %v7_1103c, i1* %cpsr_z.global-to-local, align 1
  %v2_11040 = xor i1 %v2_1103c, true
  %v3_11040 = or i1 %v7_1103c, %v2_11040
  br i1 %v3_11040, label %dec_label_pc_10ff0, label %dec_label_pc_11044

dec_label_pc_11044:                               ; preds = %dec_label_pc_1103c
  store i32 %v0_1105c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1eadc.85 to i32), i32* %r1.global-to-local, align 4
  %v3_1104c = load i32, i32* %v2_1104c, align 4
  store i32 %v3_1104c, i32* %r2.global-to-local, align 4
  %v2_11050 = load i32, i32* @global_var_1eadc.85, align 4
  store i32 %v2_11050, i32* %r3.global-to-local, align 4
  %v3_11054 = icmp uge i32 %v3_1104c, %v2_11050
  store i1 %v3_11054, i1* %cpsr_c.global-to-local, align 1
  %v9_11054 = icmp eq i32 %v3_1104c, %v2_11050
  store i1 %v9_11054, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11054, label %dec_label_pc_1105c, label %dec_label_pc_10ff0

dec_label_pc_1105c:                               ; preds = %dec_label_pc_11044
  %v3_1105c = load i8, i8* %v2_1105c, align 1
  %v4_1105c = zext i8 %v3_1105c to i32
  store i32 %v4_1105c, i32* %r3.global-to-local, align 4
  %v2_11060 = icmp ugt i8 %v3_1105c, 5
  store i1 %v2_11060, i1* %cpsr_c.global-to-local, align 1
  %v7_11060 = icmp eq i8 %v3_1105c, 6
  store i1 %v7_11060, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11060, label %dec_label_pc_11068, label %dec_label_pc_10ff0

dec_label_pc_11068:                               ; preds = %dec_label_pc_1105c
  store i32 %v4_11068, i32* %r3.global-to-local, align 4
  %v2_1106c = load i8, i8* %stack_var_-1884.0, align 1
  %v3_1106c = zext i8 %v2_1106c to i32
  store i32 %v3_1106c, i32* %r2.global-to-local, align 4
  %v3_11070 = load i8, i8* %v2_11070, align 1
  %v4_11070 = zext i8 %v3_11070 to i32
  store i32 %v4_11070, i32* %r3.global-to-local, align 4
  %v4_11074 = mul nuw nsw i32 %v4_11070, 256
  %v5_11074 = or i32 %v4_11074, %v3_1106c
  store i32 %v5_11074, i32* %r2.global-to-local, align 4
  %v2_11078 = icmp ugt i32 %v5_11074, 5887
  store i1 %v2_11078, i1* %cpsr_c.global-to-local, align 1
  %v7_11078 = icmp eq i32 %v5_11074, 5888
  store i1 %v7_11078, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11078, label %dec_label_pc_11090, label %dec_label_pc_11080

dec_label_pc_11080:                               ; preds = %dec_label_pc_11068
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_11088 = icmp ugt i32 %v5_11074, 4872
  store i1 %v3_11088, i1* %cpsr_c.global-to-local, align 1
  %v9_11088 = icmp eq i32 %v5_11074, 4873
  store i1 %v9_11088, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11088, label %dec_label_pc_11090, label %dec_label_pc_10ff0

dec_label_pc_11090:                               ; preds = %dec_label_pc_11080, %dec_label_pc_11068
  store i32 %v4_11068, i32* %ip.global-to-local, align 4
  %v3_11094 = load i8, i8* %v2_11094, align 1
  %v4_11094 = zext i8 %v3_11094 to i32
  store i32 %v4_11094, i32* %r3.global-to-local, align 4
  %v3_11098 = load i8, i8* %v2_11098, align 1
  %v4_11098 = zext i8 %v3_11098 to i32
  store i32 %v4_11098, i32* %r2.global-to-local, align 4
  store i32 %v4_1109c, i32* %lr.global-to-local, align 4
  %v4_110a0 = mul nuw nsw i32 %v4_11098, 256
  %v5_110a0 = or i32 %v4_110a0, %v4_11094
  store i32 %v5_110a0, i32* %r3.global-to-local, align 4
  %v3_110a4 = icmp uge i32 %v5_110a0, %v4_1109c
  store i1 %v3_110a4, i1* %cpsr_c.global-to-local, align 1
  %v9_110a4 = icmp eq i32 %v5_110a0, %v4_1109c
  store i1 %v9_110a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_110a4, label %dec_label_pc_110ac, label %dec_label_pc_10ff0

dec_label_pc_110ac:                               ; preds = %dec_label_pc_11090
  %v3_110ac = load i8, i8* %v2_110ac, align 1
  %v4_110ac = zext i8 %v3_110ac to i32
  store i32 %v4_110ac, i32* %r3.global-to-local, align 4
  %v1_110b0 = and i32 %v4_110ac, 2
  %v2_110b0 = icmp eq i32 %v1_110b0, 0
  store i1 %v2_110b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_110b0, label %dec_label_pc_10ff0, label %dec_label_pc_110b8

dec_label_pc_110b8:                               ; preds = %dec_label_pc_110ac
  %v1_110b8 = and i32 %v4_110ac, 16
  %v2_110b8 = icmp eq i32 %v1_110b8, 0
  store i1 %v2_110b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_110b8, label %dec_label_pc_10ff0, label %dec_label_pc_110c0

dec_label_pc_110c0:                               ; preds = %dec_label_pc_110b8
  %v1_110c0 = and i32 %v4_110ac, 4
  %v2_110c0 = icmp eq i32 %v1_110c0, 0
  store i1 %v2_110c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_110c0, label %dec_label_pc_110c8, label %dec_label_pc_10ff0

dec_label_pc_110c8:                               ; preds = %dec_label_pc_110c0
  %tmp450 = urem i8 %v3_110ac, 2
  %v2_110c8 = icmp eq i8 %tmp450, 0
  store i1 %v2_110c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_110c8, label %dec_label_pc_110d0, label %dec_label_pc_10ff0

dec_label_pc_110d0:                               ; preds = %dec_label_pc_110c8
  %v3_110d0 = load i32, i32* %v2_110d0, align 4
  %v2_110ec = call i32 @llvm.bswap.i32(i32 %v3_110d0)
  %v1_110f0 = add i32 %v2_110ec, -1
  %v1_110f4 = udiv i32 %v1_110f0, 256
  %v3_110f8 = and i32 %v1_110f4, 65280
  %v1_110fc = and i32 %v1_110f0, 65280
  store i32 %v1_110fc, i32* %r2.global-to-local, align 4
  %v3_11100 = mul i32 %v1_110f0, 16777216
  %v4_11104 = udiv i32 %v1_110f0, 16777216
  %v5_11104 = or i32 %v3_110f8, %v4_11104
  store i32 %v5_11104, i32* %r1.global-to-local, align 4
  store i32 %v0_1105c, i32* %r3.global-to-local, align 4
  %v4_1110c = mul nuw nsw i32 %v1_110fc, 256
  %v5_1110c = or i32 %v4_1110c, %v3_11100
  store i32 %v5_1110c, i32* %r0.global-to-local, align 4
  %v3_11110 = load i32, i32* %v2_11110, align 4
  store i32 %v3_11110, i32* %r2.global-to-local, align 4
  %v2_11114 = call i32 @llvm.bswap.i32(i32 %v1_110f0)
  store i32 %v2_11114, i32* %ip.global-to-local, align 4
  %v3_11118 = icmp uge i32 %v2_11114, %v3_11110
  store i1 %v3_11118, i1* %cpsr_c.global-to-local, align 1
  %v9_11118 = icmp eq i32 %v2_11114, %v3_11110
  store i1 %v9_11118, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11118, label %dec_label_pc_11120, label %dec_label_pc_10ff0

dec_label_pc_11120:                               ; preds = %dec_label_pc_110d0
  %v0_11120 = load i32, i32* @r4, align 4
  %v2_11120 = icmp ugt i32 %v0_11120, 254
  store i1 %v2_11120, i1* %cpsr_c.global-to-local, align 1
  %v7_11120 = icmp eq i32 %v0_11120, 255
  store i1 %v7_11120, i1* %cpsr_z.global-to-local, align 1
  %v8_11124 = icmp sgt i32 %v0_11120, 255
  br i1 %v8_11124, label %dec_label_pc_111a4, label %dec_label_pc_11128

dec_label_pc_11128:                               ; preds = %dec_label_pc_11120
  store i32 ptrtoint (i32* @global_var_1eaf8.179 to i32), i32* %lr.global-to-local, align 4
  %v3_1112c = mul i32 %v0_11120, 512
  store i32 %v3_1112c, i32* %r2.global-to-local, align 4
  %v2_11130 = load i32, i32* @global_var_1eaf8.179, align 4
  store i32 %v2_11130, i32* %r1.global-to-local, align 4
  %v2_11138 = mul i32 %v0_11120, 544
  store i32 %v2_11138, i32* %r3.global-to-local, align 4
  %v2_1113c = add i32 %v2_11130, %v2_11138
  store i32 %v2_1113c, i32* @r0, align 4
  %v1_11140 = add i32 %v2_1113c, 12
  %v2_11140 = inttoptr i32 %v1_11140 to i32*
  %v3_11140 = load i32, i32* %v2_11140, align 4
  store i32 %v3_11140, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11144 = icmp eq i32 %v3_11140, 0
  store i1 %v2_11144, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11144, label %dec_label_pc_11170, label %dec_label_pc_11150.preheader

dec_label_pc_11150.preheader:                     ; preds = %dec_label_pc_11128
  %v2_11148 = add i32 %v2_1113c, 544
  store i32 %v2_11148, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11150

dec_label_pc_11150:                               ; preds = %dec_label_pc_11150.preheader, %dec_label_pc_1115c
  %v0_1115c = phi i32 [ %v2_11148, %dec_label_pc_11150.preheader ], [ %v1_11168, %dec_label_pc_1115c ]
  %v0_11150 = phi i32 [ %v0_11120, %dec_label_pc_11150.preheader ], [ %v1_11150, %dec_label_pc_1115c ]
  %v1_11150 = add i32 %v0_11150, 1
  store i32 %v1_11150, i32* @r4, align 4
  %v7_11154 = icmp eq i32 %v1_11150, 256
  br i1 %v7_11154, label %dec_label_pc_111a4.loopexit, label %dec_label_pc_1115c

dec_label_pc_1115c:                               ; preds = %dec_label_pc_11150
  store i32 %v0_1115c, i32* @r0, align 4
  %v1_11160 = add i32 %v0_1115c, 12
  %v2_11160 = inttoptr i32 %v1_11160 to i32*
  %v3_11160 = load i32, i32* %v2_11160, align 4
  %v2_11164 = icmp eq i32 %v3_11160, 0
  %v1_11168 = add i32 %v0_1115c, 544
  store i32 %v1_11168, i32* %r3.global-to-local, align 4
  br i1 %v2_11164, label %dec_label_pc_11170.loopexit, label %dec_label_pc_11150

dec_label_pc_11170.loopexit:                      ; preds = %dec_label_pc_1115c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11170

dec_label_pc_11170:                               ; preds = %dec_label_pc_11170.loopexit, %dec_label_pc_11128
  %v1_11170 = phi i32 [ %v0_1115c, %dec_label_pc_11170.loopexit ], [ %v2_1113c, %dec_label_pc_11128 ]
  %v2_11170 = add i32 %v1_11170, 16
  %v3_11170 = inttoptr i32 %v2_11170 to i32*
  store i32 %v3_11110, i32* %v3_11170, align 4
  store i32 %v4_11068, i32* %r1.global-to-local, align 4
  %v2_11178 = load i32, i32* %v1_11178, align 4
  store i32 %v2_11178, i32* %r2.global-to-local, align 4
  %v1_1117c = and i32 %v2_11178, 128
  %v2_1117c = icmp ne i32 %v1_1117c, 0
  store i1 %v2_1117c, i1* %cpsr_c.global-to-local, align 1
  %v3_1117c = sdiv i32 %v2_11178, 256
  store i32 %v3_1117c, i32* %r3.global-to-local, align 4
  %v1_11180 = trunc i32 %v3_1117c to i8
  %v2_11180 = load i32, i32* @r0, align 4
  %v3_11180 = add i32 %v2_11180, 21
  %v4_11180 = inttoptr i32 %v3_11180 to i8*
  store i8 %v1_11180, i8* %v4_11180, align 1
  %v0_11184 = load i32, i32* %r2.global-to-local, align 4
  %v1_11184 = trunc i32 %v0_11184 to i8
  %v2_11184 = load i32, i32* @r0, align 4
  %v3_11184 = add i32 %v2_11184, 20
  %v4_11184 = inttoptr i32 %v3_11184 to i8*
  store i8 %v1_11184, i8* %v4_11184, align 1
  %v0_11188 = call i32 @function_10440()
  store i32 %v0_11188, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10ff0

dec_label_pc_11190:                               ; preds = %dec_label_pc_10794
  store i32 ptrtoint (i32* @global_var_1eafc.181 to i32), i32* %r2.global-to-local, align 4
  %v2_11194 = load i32, i32* @global_var_1eafc.181, align 4
  store i32 %v2_11194, i32* %r0.global-to-local, align 4
  %v1_11198 = call i32 @function_13490(i32 %v2_11194)
  store i32 %v1_11198, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1119c

dec_label_pc_1119c:                               ; preds = %dec_label_pc_1076c, %dec_label_pc_11190
  %v0_1119c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1119c, i32* %r0.global-to-local, align 4
  %v1_111a0 = call i32 @function_14830(i32 %v0_1119c)
  store i32 %v1_111a0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_111a4

dec_label_pc_111a4.loopexit:                      ; preds = %dec_label_pc_11150
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_111a4

dec_label_pc_111a4:                               ; preds = %dec_label_pc_11120, %dec_label_pc_1102c, %dec_label_pc_10ff0, %dec_label_pc_111a4.loopexit, %dec_label_pc_1119c
  %stack_var_-1868.0 = phi i32 [ %tmp232, %dec_label_pc_1119c ], [ %v0_10fe4, %dec_label_pc_111a4.loopexit ], [ %v0_10fe4, %dec_label_pc_10ff0 ], [ %v0_10fe4, %dec_label_pc_1102c ], [ %v0_10fe4, %dec_label_pc_11120 ]
  %stack_var_-1872.2 = phi i32 [ %tmp239, %dec_label_pc_1119c ], [ %stack_var_-1872.1, %dec_label_pc_111a4.loopexit ], [ %stack_var_-1872.1, %dec_label_pc_10ff0 ], [ %stack_var_-1872.1, %dec_label_pc_1102c ], [ %stack_var_-1872.1, %dec_label_pc_11120 ]
  %stack_var_-1884.1 = phi i8* [ %tmp240, %dec_label_pc_1119c ], [ %stack_var_-1884.0, %dec_label_pc_111a4.loopexit ], [ %stack_var_-1884.0, %dec_label_pc_10ff0 ], [ %stack_var_-1884.0, %dec_label_pc_1102c ], [ %stack_var_-1884.0, %dec_label_pc_11120 ]
  %stack_var_-1880.1 = phi i32 [ %tmp241, %dec_label_pc_1119c ], [ %v0_1105c, %dec_label_pc_111a4.loopexit ], [ %v0_1105c, %dec_label_pc_10ff0 ], [ %v0_1105c, %dec_label_pc_1102c ], [ %v0_1105c, %dec_label_pc_11120 ]
  %stack_var_-1876.1 = phi i8 [ %tmp242, %dec_label_pc_1119c ], [ %stack_var_-1876.0, %dec_label_pc_111a4.loopexit ], [ %stack_var_-1876.0, %dec_label_pc_10ff0 ], [ %stack_var_-1876.0, %dec_label_pc_1102c ], [ %stack_var_-1876.0, %dec_label_pc_11120 ]
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1672, i32* %ip.global-to-local, align 4
  %v2_111bc406 = load i32, i32* @sp, align 4
  %v3_111bc407 = add i32 %v2_111bc406, 1672
  %v4_111bc408 = inttoptr i32 %v3_111bc407 to i32*
  store i32 0, i32* %v4_111bc408, align 4
  br label %dec_label_pc_111ac.dec_label_pc_111ac_crit_edge

dec_label_pc_111ac.dec_label_pc_111ac_crit_edge:  ; preds = %dec_label_pc_111a4, %dec_label_pc_111ac.dec_label_pc_111ac_crit_edge
  %v0_111ac.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_111bc.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_111b0 = add i32 %v0_111ac.pre, 4
  store i32 %v1_111b0, i32* %r3.global-to-local, align 4
  %v1_111b4 = add i32 %v0_111ac.pre, 1672
  store i32 %v1_111b4, i32* %ip.global-to-local, align 4
  %v7_111b8 = icmp eq i32 %v1_111b0, 128
  %v2_111bc = load i32, i32* @sp, align 4
  %v3_111bc = add i32 %v2_111bc, %v1_111b4
  %v4_111bc = inttoptr i32 %v3_111bc to i32*
  store i32 %v0_111bc.pre, i32* %v4_111bc, align 4
  br i1 %v7_111b8, label %dec_label_pc_111c4, label %dec_label_pc_111ac.dec_label_pc_111ac_crit_edge

dec_label_pc_111c4:                               ; preds = %dec_label_pc_111ac.dec_label_pc_111ac_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_111c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_111cc400 = add i32 %v0_111c4, 4
  store i32 %v1_111cc400, i32* %r3.global-to-local, align 4
  %v1_111d0401 = add i32 %v0_111c4, 1544
  store i32 %v1_111d0401, i32* %lr.global-to-local, align 4
  %v7_111d4402 = icmp eq i32 %v1_111cc400, 128
  %v2_111d8403 = load i32, i32* @sp, align 4
  %v3_111d8404 = add i32 %v2_111d8403, %v1_111d0401
  %v4_111d8405 = inttoptr i32 %v3_111d8404 to i32*
  store i32 %v0_111c4, i32* %v4_111d8405, align 4
  br i1 %v7_111d4402, label %dec_label_pc_111e0, label %dec_label_pc_111c8.dec_label_pc_111c8_crit_edge

dec_label_pc_111c8.dec_label_pc_111c8_crit_edge:  ; preds = %dec_label_pc_111c4, %dec_label_pc_111c8.dec_label_pc_111c8_crit_edge
  %v0_111c8.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_111d8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_111cc = add i32 %v0_111c8.pre, 4
  store i32 %v1_111cc, i32* %r3.global-to-local, align 4
  %v1_111d0 = add i32 %v0_111c8.pre, 1544
  store i32 %v1_111d0, i32* %lr.global-to-local, align 4
  %v7_111d4 = icmp eq i32 %v1_111cc, 128
  %v2_111d8 = load i32, i32* @sp, align 4
  %v3_111d8 = add i32 %v2_111d8, %v1_111d0
  %v4_111d8 = inttoptr i32 %v3_111d8 to i32*
  store i32 %v0_111d8.pre, i32* %v4_111d8, align 4
  br i1 %v7_111d4, label %dec_label_pc_111e0, label %dec_label_pc_111c8.dec_label_pc_111c8_crit_edge

dec_label_pc_111e0:                               ; preds = %dec_label_pc_111c8.dec_label_pc_111c8_crit_edge, %dec_label_pc_111c4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_111e0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_111e0, i32* @r6, align 4
  store i32 %v0_111e0, i32* @r5, align 4
  store i32 %v0_111e0, i32* @r7, align 4
  store i32 %v0_111e0, i32* %stack_var_-52, align 4
  %v2_1129c = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_11258

dec_label_pc_111f4:                               ; preds = %dec_label_pc_11280, %dec_label_pc_11258
  %storemerge222 = phi i32 [ 30, %dec_label_pc_11258 ], [ 5, %dec_label_pc_11280 ]
  store i32 %storemerge222, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ea94.167 to i32), i32* %r2.global-to-local, align 4
  %v2_111f8 = load i32, i32* @global_var_1ea94.167, align 4
  store i32 %v2_111f8, i32* %r3.global-to-local, align 4
  %v1_111fc = add i32 %v2_1126c, 8
  %v2_111fc = inttoptr i32 %v1_111fc to i32*
  %v3_111fc = load i32, i32* %v2_111fc, align 4
  store i32 %v3_111fc, i32* %r2.global-to-local, align 4
  %v2_11200 = sub i32 %v2_111f8, %v3_111fc
  store i32 %v2_11200, i32* %r3.global-to-local, align 4
  %v3_11204 = icmp uge i32 %v2_11200, %storemerge222
  store i1 %v3_11204, i1* %cpsr_c.global-to-local, align 1
  %v9_11204 = icmp eq i32 %v2_11200, %storemerge222
  store i1 %v9_11204, i1* %cpsr_z.global-to-local, align 1
  %v2_11208 = xor i1 %v9_11204, true
  %v3_11208 = and i1 %v3_11204, %v2_11208
  br i1 %v3_11208, label %dec_label_pc_112c0, label %dec_label_pc_1120c

dec_label_pc_1120c:                               ; preds = %dec_label_pc_111f4
  store i1 %v2_11274, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_11274, i1* %cpsr_z.global-to-local, align 1
  %v1_11290 = add i32 %v2_1126c, 4
  %v2_11290 = inttoptr i32 %v1_11290 to i32*
  %v3_11290 = load i32, i32* %v2_11290, align 4
  br i1 %v7_11274, label %dec_label_pc_11290, label %dec_label_pc_11214

dec_label_pc_11214:                               ; preds = %dec_label_pc_1120c
  store i32 %v3_11290, i32* %ip.global-to-local, align 4
  %v3_11218 = udiv i32 %v3_11290, 32
  store i32 %v2_1129c, i32* %r0.global-to-local, align 4
  %v3_11220 = mul nuw nsw i32 %v3_11218, 4
  %v2_11224 = add i32 %v3_11220, %v2_1129c
  store i32 %v2_11224, i32* %r3.global-to-local, align 4
  %v1_11228 = add i32 %v2_11224, -184
  %v2_11228 = inttoptr i32 %v1_11228 to i32*
  %v3_11228 = load i32, i32* %v2_11228, align 4
  %v1_1122c = urem i32 %v3_11290, 32
  store i32 %v1_1122c, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_11234 = shl i32 1, %v1_1122c
  %v8_11234 = or i32 %v3_11228, %v7_11234
  store i32 %v8_11234, i32* %r2.global-to-local, align 4
  store i32 %v8_11234, i32* %v2_11228, align 4
  %v0_1123c = load i32, i32* @r6, align 4
  %v1_1123c = load i32, i32* %ip.global-to-local, align 4
  %v3_1123c = icmp uge i32 %v0_1123c, %v1_1123c
  store i1 %v3_1123c, i1* %cpsr_c.global-to-local, align 1
  %v9_1123c = icmp eq i32 %v0_1123c, %v1_1123c
  store i1 %v9_1123c, i1* %cpsr_z.global-to-local, align 1
  %v5_11240 = icmp slt i32 %v0_1123c, %v1_1123c
  br i1 %v5_11240, label %bb308, label %bb309

bb308:                                            ; preds = %dec_label_pc_11214
  store i32 %v1_1123c, i32* @r6, align 4
  br label %bb309

bb309:                                            ; preds = %dec_label_pc_11280, %dec_label_pc_11f38, %dec_label_pc_112f4, %bb311, %dec_label_pc_11214, %bb308
  %v3_11244 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_11244, i32* %r3.global-to-local, align 4
  %v1_11248 = add i32 %v3_11244, 1
  store i32 %v1_11248, i32* %r2.global-to-local, align 4
  %v2_1124c = icmp ugt i32 %v1_11248, 254
  store i1 %v2_1124c, i1* %cpsr_c.global-to-local, align 1
  %v7_1124c = icmp eq i32 %v1_11248, 255
  store i1 %v7_1124c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_11248, i32* %stack_var_-52, align 4
  %v8_11254 = icmp sgt i32 %v1_11248, 255
  br i1 %v8_11254, label %dec_label_pc_11300, label %dec_label_pc_11258

dec_label_pc_11258:                               ; preds = %bb309, %dec_label_pc_111e0
  %v0_11264 = phi i32 [ %v1_11248, %bb309 ], [ %v0_111e0, %dec_label_pc_111e0 ]
  store i32 ptrtoint (i32* @global_var_1eaf8.179 to i32), i32* %r0.global-to-local, align 4
  %v3_1125c = mul i32 %v0_11264, 512
  store i32 %v3_1125c, i32* %r3.global-to-local, align 4
  %v2_11260 = load i32, i32* @global_var_1eaf8.179, align 4
  store i32 %v2_11260, i32* %r1.global-to-local, align 4
  %v2_11268 = mul i32 %v0_11264, 544
  store i32 %v2_11268, i32* %r2.global-to-local, align 4
  %v2_1126c = add i32 %v2_11260, %v2_11268
  store i32 %v2_1126c, i32* @r4, align 4
  %v1_11270 = add i32 %v2_1126c, 12
  %v2_11270 = inttoptr i32 %v1_11270 to i32*
  %v3_11270 = load i32, i32* %v2_11270, align 4
  store i32 %v3_11270, i32* %ip.global-to-local, align 4
  %v2_11274 = icmp ne i32 %v3_11270, 0
  store i1 %v2_11274, i1* %cpsr_c.global-to-local, align 1
  %v7_11274 = icmp eq i32 %v3_11270, 1
  store i1 %v7_11274, i1* %cpsr_z.global-to-local, align 1
  %v2_11278 = xor i1 %v7_11274, true
  %v3_11278 = and i1 %v2_11274, %v2_11278
  br i1 %v3_11278, label %dec_label_pc_111f4, label %dec_label_pc_11280

dec_label_pc_11280:                               ; preds = %dec_label_pc_11258
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11280 = icmp eq i32 %v3_11270, 0
  store i1 %v2_11280, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11280, label %bb309, label %dec_label_pc_111f4

dec_label_pc_11290:                               ; preds = %dec_label_pc_1120c
  store i32 %v3_11290, i32* %r0.global-to-local, align 4
  %v3_11294 = udiv i32 %v3_11290, 32
  %v3_11298 = mul nuw nsw i32 %v3_11294, 4
  store i32 %v2_1129c, i32* %lr.global-to-local, align 4
  %v2_112a0 = add i32 %v3_11298, %v2_1129c
  store i32 %v2_112a0, i32* %r3.global-to-local, align 4
  %v1_112a4 = add i32 %v2_112a0, -312
  %v2_112a4 = inttoptr i32 %v1_112a4 to i32*
  %v3_112a4 = load i32, i32* %v2_112a4, align 4
  %v1_112a8 = urem i32 %v3_11290, 32
  store i32 %v1_112a8, i32* %r1.global-to-local, align 4
  %v7_112ac = shl i32 1, %v1_112a8
  %v8_112ac = or i32 %v3_112a4, %v7_112ac
  store i32 %v8_112ac, i32* %r2.global-to-local, align 4
  %v0_112b0 = load i32, i32* @r5, align 4
  %v3_112b0 = icmp uge i32 %v0_112b0, %v3_11290
  store i1 %v3_112b0, i1* %cpsr_c.global-to-local, align 1
  %v9_112b0 = icmp eq i32 %v0_112b0, %v3_11290
  store i1 %v9_112b0, i1* %cpsr_z.global-to-local, align 1
  %v5_112b4 = icmp slt i32 %v0_112b0, %v3_11290
  br i1 %v5_112b4, label %bb310, label %bb311

bb310:                                            ; preds = %dec_label_pc_11290
  store i32 %v3_11290, i32* @r5, align 4
  br label %bb311

bb311:                                            ; preds = %dec_label_pc_11290, %bb310
  store i32 %v8_112ac, i32* %v2_112a4, align 4
  br label %bb309

dec_label_pc_112c0:                               ; preds = %dec_label_pc_111f4
  %v1_112c0 = add i32 %v2_1126c, 4
  %v2_112c0 = inttoptr i32 %v1_112c0 to i32*
  %v3_112c0 = load i32, i32* %v2_112c0, align 4
  store i32 %v3_112c0, i32* %r0.global-to-local, align 4
  %v1_112c4 = call i32 @function_13490(i32 %v3_112c0)
  store i32 %v1_112c4, i32* %r0.global-to-local, align 4
  %v0_112c8 = load i32, i32* @r4, align 4
  %v1_112c8 = add i32 %v0_112c8, 12
  %v2_112c8 = inttoptr i32 %v1_112c8 to i32*
  %v3_112c8 = load i32, i32* %v2_112c8, align 4
  store i32 %v3_112c8, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_112d0 = icmp ugt i32 %v3_112c8, 1
  store i1 %v2_112d0, i1* %cpsr_c.global-to-local, align 1
  %v7_112d0 = icmp eq i32 %v3_112c8, 2
  store i1 %v7_112d0, i1* %cpsr_z.global-to-local, align 1
  %v2_112d4 = add i32 %v0_112c8, 4
  %v3_112d4 = inttoptr i32 %v2_112d4 to i32*
  store i32 -1, i32* %v3_112d4, align 4
  %v2_112d8 = xor i1 %v2_112d0, true
  %v3_112d8 = or i1 %v7_112d0, %v2_112d8
  br i1 %v3_112d8, label %dec_label_pc_11f38, label %dec_label_pc_112dc

dec_label_pc_112dc:                               ; preds = %dec_label_pc_112c0
  %v0_112dc = load i32, i32* @r4, align 4
  %v1_112dc = add i32 %v0_112dc, 540
  %v2_112dc = inttoptr i32 %v1_112dc to i8*
  %v3_112dc = load i8, i8* %v2_112dc, align 1
  %v4_112dc = zext i8 %v3_112dc to i32
  %v1_112e0 = add nuw nsw i32 %v4_112dc, 1
  %v1_112e4 = urem i32 %v1_112e0, 256
  store i32 %v1_112e4, i32* %r3.global-to-local, align 4
  %v2_112e8 = icmp ugt i32 %v1_112e4, 9
  store i1 %v2_112e8, i1* %cpsr_c.global-to-local, align 1
  %v7_112e8 = icmp eq i32 %v1_112e4, 10
  store i1 %v7_112e8, i1* %cpsr_z.global-to-local, align 1
  %v1_112ec = trunc i32 %v1_112e0 to i8
  store i8 %v1_112ec, i8* %v2_112dc, align 1
  %v0_112f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_112f0, label %dec_label_pc_11f38, label %dec_label_pc_112f4

dec_label_pc_112f4:                               ; preds = %dec_label_pc_112dc
  %v0_112f4 = load i32, i32* @r4, align 4
  store i32 %v0_112f4, i32* @r0, align 4
  %v0_112f8 = call i32 @function_10440()
  store i32 %v0_112f8, i32* %r0.global-to-local, align 4
  br label %bb309

dec_label_pc_11300:                               ; preds = %bb309
  store i32 1, i32* %stack_var_-64, align 4
  %v0_11308 = load i32, i32* @r6, align 4
  %v1_11308 = load i32, i32* @r5, align 4
  %v3_11308 = icmp uge i32 %v0_11308, %v1_11308
  store i1 %v3_11308, i1* %cpsr_c.global-to-local, align 1
  %v9_11308 = icmp eq i32 %v0_11308, %v1_11308
  store i1 %v9_11308, i1* %cpsr_z.global-to-local, align 1
  %v5_1130c = icmp slt i32 %v0_11308, %v1_11308
  %storemerge75 = select i1 %v5_1130c, i32 %v1_11308, i32 %v0_11308
  %v2_11320 = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_11320, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_11328 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_11328, i32* %ip.global-to-local, align 4
  %v2_1132c = ptrtoint i32* %stack_var_-220 to i32
  store i32 %v2_1132c, i32* %r1.global-to-local, align 4
  %v1_11330 = add i32 %storemerge75, 1
  store i32 %v1_11330, i32* %r0.global-to-local, align 4
  %v5_1133c = call i32 @function_136b0(i32 %v1_11330, i32 %v2_1132c, i32 %v2_11320, i32 0, i32 %v2_11328)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_11344 = call i32 @function_13760(i32* null)
  store i32 ptrtoint (i32* @global_var_1ea94.167 to i32), i32* %lr.global-to-local, align 4
  store i32 %v2_11344, i32* @global_var_1ea94.167, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_1150c = inttoptr i32 %stack_var_-1868.0 to i32*
  %v2_115b4 = ptrtoint i32* %stack_var_-41 to i32
  %v2_11dbc = ptrtoint i32* %stack_var_-84 to i32
  %v2_11dc4 = ptrtoint i32* %stack_var_-73 to i32
  %v2_11938 = ptrtoint i32* %stack_var_-56 to i32
  %v2_119ec = ptrtoint i32* %stack_var_-48 to i32
  br label %dec_label_pc_11398

dec_label_pc_11360:                               ; preds = %dec_label_pc_113bc, %dec_label_pc_11f48
  %v0_11374 = phi i32 [ %v3_113b0, %dec_label_pc_113bc ], [ %v0_11360.pre, %dec_label_pc_11f48 ]
  %v3_11360 = udiv i32 %v0_11374, 32
  %v3_11364 = mul nuw nsw i32 %v3_11360, 4
  store i32 %v2_1129c, i32* @lr, align 4
  %v2_1136c = add i32 %v3_11364, %v2_1129c
  store i32 %v2_1136c, i32* %r3.global-to-local, align 4
  %v1_11370 = add i32 %v2_1136c, -184
  %v2_11370 = inttoptr i32 %v1_11370 to i32*
  %v3_11370 = load i32, i32* %v2_11370, align 4
  %v1_11374 = urem i32 %v0_11374, 32
  store i32 %v1_11374, i32* %r1.global-to-local, align 4
  %v2_11378 = add nsw i32 %v1_11374, -1
  %v3_11378 = shl i32 1, %v2_11378
  %v4_11378 = and i32 %v3_11378, %v3_11370
  %v5_11378 = icmp ne i32 %v4_11378, 0
  store i1 %v5_11378, i1* %cpsr_c.global-to-local, align 1
  %v6_11378 = lshr i32 %v3_11370, %v1_11374
  store i32 %v6_11378, i32* %r2.global-to-local, align 4
  %v1_1137c = urem i32 %v6_11378, 2
  %v2_1137c = icmp eq i32 %v1_1137c, 0
  store i1 %v2_1137c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1137c, label %dec_label_pc_11384, label %dec_label_pc_114e8.preheader

dec_label_pc_114e8.preheader:                     ; preds = %dec_label_pc_11360
  %v0_114e8101 = load i32, i32* @r5, align 4
  %v1_114e8102 = add i32 %v0_114e8101, 12
  %v2_114e8103 = inttoptr i32 %v1_114e8102 to i32*
  %v3_114e8104 = load i32, i32* %v2_114e8103, align 4
  store i32 %v3_114e8104, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_114ec100106 = icmp eq i32 %v3_114e8104, 0
  store i1 %v2_114ec100106, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_114ec100106, label %dec_label_pc_11384, label %dec_label_pc_114f4.lr.ph

dec_label_pc_11384:                               ; preds = %dec_label_pc_114e8.loopexit, %dec_label_pc_114e8.preheader, %dec_label_pc_11360, %bb346, %dec_label_pc_11e64, %dec_label_pc_11398, %dec_label_pc_11f5c, %dec_label_pc_11ea8
  %v3_11384 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_11384, i32* %r3.global-to-local, align 4
  %v1_11388 = add i32 %v3_11384, 1
  store i32 %v1_11388, i32* %r2.global-to-local, align 4
  %v2_1138c = icmp ugt i32 %v1_11388, 254
  store i1 %v2_1138c, i1* %cpsr_c.global-to-local, align 1
  %v7_1138c = icmp eq i32 %v1_11388, 255
  store i1 %v7_1138c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_11388, i32* %stack_var_-52, align 4
  %v8_11394 = icmp sgt i32 %v1_11388, 255
  br i1 %v8_11394, label %dec_label_pc_10d2c, label %dec_label_pc_11398

dec_label_pc_11398:                               ; preds = %dec_label_pc_11384, %dec_label_pc_11300
  %v0_113a4 = phi i32 [ %v1_11388, %dec_label_pc_11384 ], [ 0, %dec_label_pc_11300 ]
  store i32 ptrtoint (i32* @global_var_1eaf8.179 to i32), i32* %ip.global-to-local, align 4
  %v3_1139c = mul i32 %v0_113a4, 512
  store i32 %v3_1139c, i32* %r3.global-to-local, align 4
  %v2_113a0 = load i32, i32* @global_var_1eaf8.179, align 4
  store i32 %v2_113a0, i32* %r1.global-to-local, align 4
  %v2_113a8 = mul i32 %v0_113a4, 544
  store i32 %v2_113a8, i32* %r2.global-to-local, align 4
  %v2_113ac = add i32 %v2_113a0, %v2_113a8
  store i32 %v2_113ac, i32* @r5, align 4
  %v1_113b0 = add i32 %v2_113ac, 4
  %v2_113b0 = inttoptr i32 %v1_113b0 to i32*
  %v3_113b0 = load i32, i32* %v2_113b0, align 4
  store i32 %v3_113b0, i32* @r4, align 4
  %v2_113b4 = icmp eq i32 %v3_113b0, -1
  store i1 %v2_113b4, i1* %cpsr_c.global-to-local, align 1
  %v7_113b4 = icmp eq i32 %v3_113b0, -1
  store i1 %v7_113b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_113b4, label %dec_label_pc_11384, label %dec_label_pc_113bc

dec_label_pc_113bc:                               ; preds = %dec_label_pc_11398
  %v3_113bc = udiv i32 %v3_113b0, 32
  %v3_113c0 = mul nuw nsw i32 %v3_113bc, 4
  store i32 %v2_1129c, i32* %lr.global-to-local, align 4
  %v2_113c8 = add i32 %v3_113c0, %v2_1129c
  store i32 %v2_113c8, i32* %r3.global-to-local, align 4
  %v1_113cc = add i32 %v2_113c8, -312
  %v2_113cc = inttoptr i32 %v1_113cc to i32*
  %v3_113cc = load i32, i32* %v2_113cc, align 4
  %v1_113d0 = urem i32 %v3_113b0, 32
  store i32 %v1_113d0, i32* %r1.global-to-local, align 4
  %v2_113d4 = add nsw i32 %v1_113d0, -1
  %v3_113d4 = shl i32 1, %v2_113d4
  %v4_113d4 = and i32 %v3_113cc, %v3_113d4
  %v5_113d4 = icmp ne i32 %v4_113d4, 0
  store i1 %v5_113d4, i1* %cpsr_c.global-to-local, align 1
  %v6_113d4 = lshr i32 %v3_113cc, %v1_113d0
  store i32 %v6_113d4, i32* %r2.global-to-local, align 4
  %v1_113d8 = urem i32 %v6_113d4, 2
  %v2_113d8 = icmp eq i32 %v1_113d8, 0
  store i1 %v2_113d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_113d8, label %dec_label_pc_11360, label %dec_label_pc_113e0

dec_label_pc_113e0:                               ; preds = %dec_label_pc_113bc
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  store i32 %v2_119ec, i32* %r3.global-to-local, align 4
  store i32 %v2_11938, i32* %ip.global-to-local, align 4
  store i32 %v3_113b0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v6_11410 = call i32 @function_13c44(i32 %v3_113b0, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_11938)
  %v3_11414 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_11414, i32* %r3.global-to-local, align 4
  %v2_11418 = or i32 %v3_11414, %v6_11410
  store i32 %v2_11418, i32* %r0.global-to-local, align 4
  %v4_11418 = icmp eq i32 %v2_11418, 0
  store i1 %v4_11418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_11418, label %dec_label_pc_11420, label %dec_label_pc_11f5c

dec_label_pc_11420:                               ; preds = %dec_label_pc_113e0
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_11424 = load i32, i32* @r5, align 4
  %v2_11424 = add i32 %v1_11424, 12
  %v3_11424 = inttoptr i32 %v2_11424 to i32*
  store i32 2, i32* %v3_11424, align 4
  %v0_11428 = call i32 @function_fbfc()
  store i32 %v0_11428, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1ea90.173 to i32), i32* %r3.global-to-local, align 4
  %v3_11430 = load i8, i8* @global_var_1ea91.174, align 1
  %v4_11430 = zext i8 %v3_11430 to i32
  store i32 %v4_11430, i32* %r2.global-to-local, align 4
  %v2_11434 = load i8, i8* bitcast (i8** @global_var_1ea90.173 to i8*), align 4
  %v3_11434 = zext i8 %v2_11434 to i32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_11438 = mul nuw nsw i32 %v4_11430, 256
  %v5_11438 = or i32 %v3_11434, %v4_11438
  store i32 %v5_11438, i32* %r1.global-to-local, align 4
  %v2_1143c = call i32 @function_131ec(i32 %v0_11428, i32 %v5_11438)
  store i32 ptrtoint (i32* @global_var_1ea60.169 to i32), i32* %r3.global-to-local, align 4
  %v2_11444 = load i32, i32* @global_var_1ea60.169, align 4
  store i32 %v2_11444, i32* %lr.global-to-local, align 4
  %v1_1144c = load i32, i32* @r6, align 4
  %v9_1144c = icmp eq i32 %v2_11444, %v1_1144c
  store i1 %v9_1144c, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_11450 = urem i32 %v2_1143c, 65536
  store i32 %v3_11450, i32* %r0.global-to-local, align 4
  %v7_11454 = icmp sgt i32 %v2_11444, %v1_1144c
  br i1 %v7_11454, label %dec_label_pc_11458, label %dec_label_pc_11f44

dec_label_pc_11458:                               ; preds = %dec_label_pc_11420
  %v2_1145c = load i32, i32* @global_var_1ea8c.171, align 4
  store i32 %v2_1145c, i32* %r3.global-to-local, align 4
  store i32 %v1_1144c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11478

dec_label_pc_11468:                               ; preds = %dec_label_pc_11490, %dec_label_pc_11478
  %v1_11468 = add i32 %v0_11468, 1
  store i32 %v1_11468, i32* %ip.global-to-local, align 4
  %v3_1146c = icmp uge i32 %v1_11468, %v2_11444
  store i1 %v3_1146c, i1* %cpsr_c.global-to-local, align 1
  %v9_1146c = icmp eq i32 %v1_11468, %v2_11444
  store i1 %v9_1146c, i1* %cpsr_z.global-to-local, align 1
  %v1_11470 = add i32 %v0_11470, 16
  store i32 %v1_11470, i32* %r3.global-to-local, align 4
  br i1 %v9_1146c, label %dec_label_pc_11f44, label %dec_label_pc_11478

dec_label_pc_11478:                               ; preds = %dec_label_pc_11468, %dec_label_pc_11458
  %v0_11468 = phi i32 [ %v1_11468, %dec_label_pc_11468 ], [ %v1_1144c, %dec_label_pc_11458 ]
  %v0_11470 = phi i32 [ %v1_11470, %dec_label_pc_11468 ], [ %v2_1145c, %dec_label_pc_11458 ]
  store i32 %v0_11470, i32* %r1.global-to-local, align 4
  %v1_1147c = add i32 %v0_11470, 9
  %v2_1147c = inttoptr i32 %v1_1147c to i8*
  %v3_1147c = load i8, i8* %v2_1147c, align 1
  %v4_1147c = zext i8 %v3_1147c to i32
  store i32 %v4_1147c, i32* %r2.global-to-local, align 4
  %v1_11480 = add i32 %v0_11470, 8
  %v2_11480 = inttoptr i32 %v1_11480 to i8*
  %v3_11480 = load i8, i8* %v2_11480, align 1
  %v4_11480 = zext i8 %v3_11480 to i32
  %v4_11484 = mul nuw nsw i32 %v4_1147c, 256
  %v5_11484 = or i32 %v4_11480, %v4_11484
  store i32 %v5_11484, i32* %r3.global-to-local, align 4
  %v3_11488 = icmp uge i32 %v5_11484, %v3_11450
  store i1 %v3_11488, i1* %cpsr_c.global-to-local, align 1
  %v9_11488 = icmp eq i32 %v5_11484, %v3_11450
  store i1 %v9_11488, i1* %cpsr_z.global-to-local, align 1
  %v2_1148c = xor i1 %v9_11488, true
  %v3_1148c = and i1 %v3_11488, %v2_1148c
  br i1 %v3_1148c, label %dec_label_pc_11468, label %dec_label_pc_11490

dec_label_pc_11490:                               ; preds = %dec_label_pc_11478
  %v1_11490 = add i32 %v0_11470, 10
  %v2_11490 = inttoptr i32 %v1_11490 to i8*
  %v3_11490 = load i8, i8* %v2_11490, align 1
  %v4_11490 = zext i8 %v3_11490 to i32
  store i32 %v4_11490, i32* %r3.global-to-local, align 4
  %v1_11494 = add i32 %v0_11470, 11
  %v2_11494 = inttoptr i32 %v1_11494 to i8*
  %v3_11494 = load i8, i8* %v2_11494, align 1
  %v4_11494 = zext i8 %v3_11494 to i32
  store i32 %v4_11494, i32* %r2.global-to-local, align 4
  %v4_11498 = mul nuw nsw i32 %v4_11494, 256
  %v5_11498 = or i32 %v4_11498, %v4_11490
  store i32 %v5_11498, i32* %r3.global-to-local, align 4
  %v3_1149c = icmp uge i32 %v5_11498, %v3_11450
  store i1 %v3_1149c, i1* %cpsr_c.global-to-local, align 1
  %v9_1149c = icmp eq i32 %v5_11498, %v3_11450
  store i1 %v9_1149c, i1* %cpsr_z.global-to-local, align 1
  %v2_114a0 = xor i1 %v3_1149c, true
  %v3_114a0 = or i1 %v9_1149c, %v2_114a0
  br i1 %v3_114a0, label %dec_label_pc_11468, label %dec_label_pc_11f48

dec_label_pc_114a8:                               ; preds = %dec_label_pc_117d4, %dec_label_pc_1168c, %dec_label_pc_117f0
  store i32 %v3_1168c, i32* %r1.global-to-local, align 4
  %v0_114ac = load i32, i32* @sb, align 4
  store i32 %v0_114ac, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15ea0.320 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_114b8 = call i32 @function_12b94(i32 %v0_114ac, i32 %v3_1168c, i32 ptrtoint ([5 x i8]* @global_var_15ea0.320 to i32), i32 4)
  store i32 %v5_114b8, i32* %r0.global-to-local, align 4
  %v3_114bc = icmp eq i32 %v5_114b8, -1
  store i1 %v3_114bc, i1* %cpsr_c.global-to-local, align 1
  %v8_114bc = icmp eq i32 %v5_114b8, -1
  store i1 %v8_114bc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_114b8, i32* @r7, align 4
  br i1 %v3_114bc, label %dec_label_pc_114c8, label %dec_label_pc_117fc

dec_label_pc_114c8:                               ; preds = %dec_label_pc_114a8
  %v0_114c8 = load i32, i32* @sb, align 4
  store i32 %v0_114c8, i32* %r0.global-to-local, align 4
  %v0_114cc = load i32, i32* @r5, align 4
  %v1_114cc = add i32 %v0_114cc, 24
  %v2_114cc = inttoptr i32 %v1_114cc to i32*
  %v3_114cc = load i32, i32* %v2_114cc, align 4
  store i32 %v3_114cc, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15ea8.322 to i32), i32* %r2.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v5_114d8 = call i32 @function_12b94(i32 %v0_114c8, i32 %v3_114cc, i32 ptrtoint ([6 x i8]* @global_var_15ea8.322 to i32), i32 5)
  store i32 %v5_114d8, i32* %r0.global-to-local, align 4
  %v3_114dc = icmp eq i32 %v5_114d8, -1
  store i1 %v3_114dc, i1* %cpsr_c.global-to-local, align 1
  %v8_114dc = icmp eq i32 %v5_114d8, -1
  store i1 %v8_114dc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_114d8, i32* @r7, align 4
  br i1 %v3_114dc, label %dec_label_pc_114e8.loopexit, label %dec_label_pc_117fc

dec_label_pc_114e8.loopexit:                      ; preds = %dec_label_pc_1167c, %dec_label_pc_11bd8, %dec_label_pc_1156c, %dec_label_pc_114c8, %dec_label_pc_11eb4
  %v0_114e8 = load i32, i32* @r5, align 4
  %v1_114e8 = add i32 %v0_114e8, 12
  %v2_114e8 = inttoptr i32 %v1_114e8 to i32*
  %v3_114e8 = load i32, i32* %v2_114e8, align 4
  store i32 %v3_114e8, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_114ec100 = icmp eq i32 %v3_114e8, 0
  store i1 %v2_114ec100, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_114ec100, label %dec_label_pc_11384, label %dec_label_pc_114f4.lr.ph

dec_label_pc_114f4.lr.ph:                         ; preds = %dec_label_pc_114e8.preheader, %dec_label_pc_114e8.loopexit
  %v0_114f4132 = phi i32 [ %v0_114e8, %dec_label_pc_114e8.loopexit ], [ %v0_114e8101, %dec_label_pc_114e8.preheader ]
  br label %dec_label_pc_114f4

dec_label_pc_114ecthread-pre-split.thread:        ; preds = %dec_label_pc_118d0, %dec_label_pc_11984, %dec_label_pc_11a38, %dec_label_pc_11aec, %dec_label_pc_11cf8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_114f4

dec_label_pc_114ecthread-pre-split:               ; preds = %dec_label_pc_11918, %dec_label_pc_119cc, %dec_label_pc_11a80, %dec_label_pc_11b34, %dec_label_pc_11d40, %dec_label_pc_11d24, %dec_label_pc_11a64, %dec_label_pc_11b18, %dec_label_pc_119b0, %dec_label_pc_118fc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_114f4

dec_label_pc_114f4:                               ; preds = %dec_label_pc_114ecthread-pre-split.thread, %dec_label_pc_114ecthread-pre-split, %dec_label_pc_114f4.lr.ph
  %v0_11f00 = phi i32 [ %v0_114f4132, %dec_label_pc_114f4.lr.ph ], [ %v0_1156c, %dec_label_pc_114ecthread-pre-split ], [ %v0_1156c, %dec_label_pc_114ecthread-pre-split.thread ]
  %v1_114f4 = add i32 %v0_11f00, 24
  %v2_114f4 = inttoptr i32 %v1_114f4 to i32*
  %v3_114f4 = load i32, i32* %v2_114f4, align 4
  store i32 %v3_114f4, i32* %r3.global-to-local, align 4
  %v2_114f8 = icmp ugt i32 %v3_114f4, 511
  store i1 %v2_114f8, i1* %cpsr_c.global-to-local, align 1
  %v7_114f8 = icmp eq i32 %v3_114f4, 512
  store i1 %v7_114f8, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_11f00, 28
  store i32 %.pre, i32* @sb, align 4
  br i1 %v7_114f8, label %dec_label_pc_11f00, label %dec_label_pc_11504

dec_label_pc_11504:                               ; preds = %dec_label_pc_114f4, %dec_label_pc_11f00
  store i32 %stack_var_-1868.0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %v2_1150c, align 4
  %v0_11510 = load i32, i32* @r5, align 4
  %v1_11510 = add i32 %v0_11510, 24
  %v2_11510 = inttoptr i32 %v1_11510 to i32*
  %v3_11510 = load i32, i32* %v2_11510, align 4
  store i32 %v3_11510, i32* %r2.global-to-local, align 4
  %v0_11514 = load i32, i32* @sb, align 4
  %v2_11514 = add i32 %v0_11514, %v3_11510
  store i32 %v2_11514, i32* @r4, align 4
  %v1_11518 = add i32 %v0_11510, 4
  %v2_11518 = inttoptr i32 %v1_11518 to i32*
  %v3_11518 = load i32, i32* %v2_11518, align 4
  store i32 %v3_11518, i32* %r0.global-to-local, align 4
  %v1_1151c = sub i32 512, %v3_11510
  store i32 %v1_1151c, i32* %r2.global-to-local, align 4
  store i32 %v2_11514, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_11528 = inttoptr i32 %v2_11514 to i32*
  %v5_11528 = call i32 @function_13ca0(i32 %v3_11518, i32* %v4_11528, i32 %v1_1151c, i32 16384)
  store i32 %v5_11528, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1152c = icmp eq i32 %v5_11528, 0
  store i1 %v2_1152c, i1* %cpsr_z.global-to-local, align 1
  %tmp312 = icmp slt i32 %v5_11528, 1
  br i1 %tmp312, label %dec_label_pc_11e58, label %dec_label_pc_11534

dec_label_pc_11534:                               ; preds = %dec_label_pc_11504
  %v0_11534 = load i32, i32* @r6, align 4
  store i32 %v0_11534, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1153c

dec_label_pc_1153c:                               ; preds = %bb314, %dec_label_pc_11534
  %v3_11544 = phi i32 [ %v1_11548, %bb314 ], [ %v0_11534, %dec_label_pc_11534 ]
  %v1_1153c = load i32, i32* @r4, align 4
  %v2_1153c = add i32 %v1_1153c, %v3_11544
  %v3_1153c = inttoptr i32 %v2_1153c to i8*
  %v4_1153c = load i8, i8* %v3_1153c, align 1
  %v6_1153c = zext i8 %v4_1153c to i32
  store i32 %v6_1153c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11540 = icmp eq i8 %v4_1153c, 0
  store i1 %v2_11540, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11540, label %bb313, label %bb314

bb313:                                            ; preds = %dec_label_pc_1153c
  %v1_11544 = load i32, i32* %r1.global-to-local, align 4
  %v2_11544 = trunc i32 %v1_11544 to i8
  store i8 %v2_11544, i8* %v3_1153c, align 1
  %v0_11548.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb314

bb314:                                            ; preds = %dec_label_pc_1153c, %bb313
  %v0_11548 = phi i32 [ %v3_11544, %dec_label_pc_1153c ], [ %v0_11548.pre, %bb313 ]
  %v1_11548 = add i32 %v0_11548, 1
  store i32 %v1_11548, i32* %r2.global-to-local, align 4
  %v3_1154c = icmp uge i32 %v5_11528, %v1_11548
  store i1 %v3_1154c, i1* %cpsr_c.global-to-local, align 1
  %v9_1154c = icmp eq i32 %v5_11528, %v1_11548
  store i1 %v9_1154c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1154c, label %dec_label_pc_11554, label %dec_label_pc_1153c

dec_label_pc_11554:                               ; preds = %bb314, %dec_label_pc_11e5c
  store i32 ptrtoint (i32* @global_var_1ea94.167 to i32), i32* @lr, align 4
  %v0_11558 = load i32, i32* @r5, align 4
  %v1_11558 = add i32 %v0_11558, 24
  %v2_11558 = inttoptr i32 %v1_11558 to i32*
  %v3_11558 = load i32, i32* %v2_11558, align 4
  %v2_1155c = load i32, i32* @global_var_1ea94.167, align 4
  store i32 %v2_1155c, i32* %r3.global-to-local, align 4
  %v2_11560 = add i32 %v3_11558, %v5_11528
  store i32 %v2_11560, i32* %ip.global-to-local, align 4
  store i32 %v2_11560, i32* %v2_11558, align 4
  %v0_11568 = load i32, i32* %r3.global-to-local, align 4
  %v1_11568 = load i32, i32* @r5, align 4
  %v2_11568 = add i32 %v1_11568, 8
  %v3_11568 = inttoptr i32 %v2_11568 to i32*
  store i32 %v0_11568, i32* %v3_11568, align 4
  br label %dec_label_pc_1156c

dec_label_pc_1156c:                               ; preds = %dec_label_pc_11cd4, %dec_label_pc_11554
  %v0_1156c = load i32, i32* @r5, align 4
  %v1_1156c = add i32 %v0_1156c, 12
  %v2_1156c = inttoptr i32 %v1_1156c to i32*
  %v3_1156c = load i32, i32* %v2_1156c, align 4
  store i32 %v3_1156c, i32* %r2.global-to-local, align 4
  %v1_11570 = add i32 %v3_1156c, -2
  store i32 %v1_11570, i32* %r3.global-to-local, align 4
  %v7_11574 = icmp eq i32 %v1_11570, 8
  store i1 %v7_11574, i1* %cpsr_z.global-to-local, align 1
  %v5_11578 = and i32 %v1_11570, 1073741824
  %v6_11578 = icmp ne i32 %v5_11578, 0
  store i1 %v6_11578, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_1156c, label %dec_label_pc_114e8.loopexit [
    i32 2, label %dec_label_pc_115a4
    i32 3, label %dec_label_pc_1168c
    i32 4, label %dec_label_pc_11840
    i32 5, label %dec_label_pc_118d0
    i32 6, label %dec_label_pc_11984
    i32 7, label %dec_label_pc_11aec
    i32 8, label %dec_label_pc_11a38
    i32 9, label %dec_label_pc_11cf8
    i32 10, label %dec_label_pc_11ba0
  ]

dec_label_pc_115a4:                               ; preds = %dec_label_pc_1156c
  %v1_115a8 = add i32 %v0_1156c, 24
  %v2_115a8 = inttoptr i32 %v1_115a8 to i32*
  %v3_115a8 = load i32, i32* %v2_115a8, align 4
  store i32 %v3_115a8, i32* %ip.global-to-local, align 4
  %v0_115ac = load i32, i32* @sb, align 4
  store i32 %v0_115ac, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  %v1_115b8 = add i32 %v0_1156c, 29
  store i32 %v1_115b8, i32* @r4, align 4
  store i32 -3, i32* %sl.global-to-local, align 4
  store i32 -4, i32* @r8, align 4
  %v3_115c491 = icmp eq i32 %v3_115a8, 0
  store i1 %v3_115c491, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_115c491, i1* %cpsr_z.global-to-local, align 1
  %v6_115c898 = icmp sgt i32 %v3_115a8, 0
  br i1 %v6_115c898, label %dec_label_pc_115cc.preheader, label %dec_label_pc_1166c

dec_label_pc_115c4.loopexit:                      ; preds = %dec_label_pc_115e4
  %v2_115ec = add i32 %v1_115ec, 2
  store i32 %v2_115ec, i32* @r6, align 4
  %v2_115f0 = add i32 %v1_115f0, 2
  store i32 %v2_115f0, i32* @r4, align 4
  %v2_115f4 = add i32 %v1_115f4, 2
  store i32 %v2_115f4, i32* @r7, align 4
  %v3_115c4 = icmp uge i32 %v2_115f4, %v1_115c4
  store i1 %v3_115c4, i1* %cpsr_c.global-to-local, align 1
  %v9_115c4 = icmp eq i32 %v2_115f4, %v1_115c4
  store i1 %v9_115c4, i1* %cpsr_z.global-to-local, align 1
  %v6_115c8 = icmp slt i32 %v2_115f4, %v1_115c4
  br i1 %v6_115c8, label %dec_label_pc_115cc.preheader, label %dec_label_pc_1166c

dec_label_pc_115cc.preheader:                     ; preds = %dec_label_pc_115a4, %dec_label_pc_115c4.loopexit
  %v6_11674168 = phi i32 [ %v6_11674169, %dec_label_pc_115c4.loopexit ], [ %v0_1156c, %dec_label_pc_115a4 ]
  %v1_115f4157 = phi i32 [ %v2_115f4, %dec_label_pc_115c4.loopexit ], [ 0, %dec_label_pc_115a4 ]
  %v1_115ec155 = phi i32 [ %v2_115ec, %dec_label_pc_115c4.loopexit ], [ %v0_115ac, %dec_label_pc_115a4 ]
  %v1_115d8153 = phi i32 [ %v1_115c4, %dec_label_pc_115c4.loopexit ], [ %v3_115a8, %dec_label_pc_115a4 ]
  %v0_115cc151 = phi i32 [ %v2_115f0, %dec_label_pc_115c4.loopexit ], [ %v1_115b8, %dec_label_pc_115a4 ]
  br label %dec_label_pc_115cc

dec_label_pc_115cc:                               ; preds = %dec_label_pc_115cc.preheader, %dec_label_pc_1164c
  %v6_11674169 = phi i32 [ %v6_11674168, %dec_label_pc_115cc.preheader ], [ %v0_11654, %dec_label_pc_1164c ]
  %v1_115f4 = phi i32 [ %v1_115f4157, %dec_label_pc_115cc.preheader ], [ %v1_11658, %dec_label_pc_1164c ]
  %v1_115ec = phi i32 [ %v1_115ec155, %dec_label_pc_115cc.preheader ], [ %v1_11660, %dec_label_pc_1164c ]
  %v1_115c4 = phi i32 [ %v1_115d8153, %dec_label_pc_115cc.preheader ], [ %v3_11654, %dec_label_pc_1164c ]
  %v1_115f0 = phi i32 [ %v0_115cc151, %dec_label_pc_115cc.preheader ], [ %v1_11664, %dec_label_pc_1164c ]
  %v1_115cc = add i32 %v1_115f0, -1
  %v2_115cc = inttoptr i32 %v1_115cc to i8*
  %v3_115cc = load i8, i8* %v2_115cc, align 1
  %v4_115cc = zext i8 %v3_115cc to i32
  store i32 %v4_115cc, i32* %r3.global-to-local, align 4
  %v2_115d0 = icmp eq i8 %v3_115cc, -1
  store i1 %v2_115d0, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_115d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_115d0, label %dec_label_pc_115d8, label %dec_label_pc_1166c

dec_label_pc_115d8:                               ; preds = %dec_label_pc_115cc
  %v0_115d8 = load i32, i32* @sb, align 4
  %v2_115d8 = add i32 %v0_115d8, %v1_115c4
  store i32 %v2_115d8, i32* %r2.global-to-local, align 4
  %v3_115dc = icmp uge i32 %v2_115d8, %v1_115f0
  store i1 %v3_115dc, i1* %cpsr_c.global-to-local, align 1
  %v9_115dc = icmp eq i32 %v2_115d8, %v1_115f0
  store i1 %v9_115dc, i1* %cpsr_z.global-to-local, align 1
  %v2_115e0 = xor i1 %v3_115dc, true
  %v3_115e0 = or i1 %v9_115dc, %v2_115e0
  br i1 %v3_115e0, label %dec_label_pc_1166c, label %dec_label_pc_115e4

dec_label_pc_115e4:                               ; preds = %dec_label_pc_115d8
  %v1_115e4 = inttoptr i32 %v1_115f0 to i8*
  %v2_115e4 = load i8, i8* %v1_115e4, align 1
  %v3_115e4 = zext i8 %v2_115e4 to i32
  store i32 %v3_115e4, i32* %r3.global-to-local, align 4
  %v2_115e8 = icmp eq i8 %v2_115e4, -1
  store i1 %v2_115e8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_115e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_115e8, label %dec_label_pc_115c4.loopexit, label %dec_label_pc_115fc

dec_label_pc_115fc:                               ; preds = %dec_label_pc_115e4
  %v2_115fc = icmp ugt i8 %v2_115e4, -4
  store i1 %v2_115fc, i1* %cpsr_c.global-to-local, align 1
  %v7_115fc = icmp eq i8 %v2_115e4, -3
  store i1 %v7_115fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_115fc, label %dec_label_pc_11dac, label %dec_label_pc_11604

dec_label_pc_11604:                               ; preds = %dec_label_pc_115fc
  %v1_11604 = add i32 %v1_115ec, 2
  store i32 %v1_11604, i32* %r3.global-to-local, align 4
  %v3_11608 = icmp uge i32 %v2_115d8, %v1_11604
  store i1 %v3_11608, i1* %cpsr_c.global-to-local, align 1
  %v9_11608 = icmp eq i32 %v2_115d8, %v1_11604
  store i1 %v9_11608, i1* %cpsr_z.global-to-local, align 1
  %v2_1160c = xor i1 %v3_11608, true
  %v3_1160c = or i1 %v9_11608, %v2_1160c
  br i1 %v3_1160c, label %dec_label_pc_1166c, label %dec_label_pc_11610

dec_label_pc_11610:                               ; preds = %bb344, %dec_label_pc_11e00, %bb343, %dec_label_pc_11604
  %v0_11610 = load i32, i32* @r4, align 4
  %v1_11610 = inttoptr i32 %v0_11610 to i8*
  %v2_11610 = load i8, i8* %v1_11610, align 1
  %v3_11610 = zext i8 %v2_11610 to i32
  store i32 %v3_11610, i32* %r3.global-to-local, align 4
  %v2_11614 = icmp ugt i8 %v2_11610, -4
  store i1 %v2_11614, i1* %cpsr_c.global-to-local, align 1
  %v7_11614 = icmp eq i8 %v2_11610, -3
  store i1 %v7_11614, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11614, label %bb315, label %dec_label_pc_11620

bb315:                                            ; preds = %dec_label_pc_11610
  %v1_11618 = load i32, i32* @r8, align 4
  %v2_11618 = trunc i32 %v1_11618 to i8
  store i8 %v2_11618, i8* %v1_11610, align 1
  %v0_1161c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1161c.pr, label %bb317, label %.dec_label_pc_11620_crit_edge

.dec_label_pc_11620_crit_edge:                    ; preds = %bb315
  %v0_11620.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11620

dec_label_pc_11620:                               ; preds = %.dec_label_pc_11620_crit_edge, %dec_label_pc_11610
  %v0_11620 = phi i32 [ %v0_11620.pre, %.dec_label_pc_11620_crit_edge ], [ %v3_11610, %dec_label_pc_11610 ]
  %v2_11620 = icmp ugt i32 %v0_11620, 250
  store i1 %v2_11620, i1* %cpsr_c.global-to-local, align 1
  %v7_11620 = icmp eq i32 %v0_11620, 251
  store i1 %v7_11620, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11620, label %bb316, label %bb317

bb316:                                            ; preds = %dec_label_pc_11620
  %v1_11624 = load i32, i32* %sl.global-to-local, align 4
  %v2_11624 = trunc i32 %v1_11624 to i8
  %v3_11624 = load i32, i32* @r4, align 4
  %v4_11624 = inttoptr i32 %v3_11624 to i8*
  store i8 %v2_11624, i8* %v4_11624, align 1
  br label %bb317

bb317:                                            ; preds = %bb315, %dec_label_pc_11620, %bb316
  %v0_11628 = load i32, i32* @r4, align 4
  %v1_11628 = add i32 %v0_11628, 1
  %v2_11628 = inttoptr i32 %v1_11628 to i8*
  %v3_11628 = load i8, i8* %v2_11628, align 1
  %v4_11628 = zext i8 %v3_11628 to i32
  store i32 %v4_11628, i32* %r3.global-to-local, align 4
  %v2_1162c = icmp ugt i8 %v3_11628, -4
  store i1 %v2_1162c, i1* %cpsr_c.global-to-local, align 1
  %v7_1162c = icmp eq i8 %v3_11628, -3
  store i1 %v7_1162c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1162c, label %bb318, label %dec_label_pc_11638

bb318:                                            ; preds = %bb317
  %v1_11630 = load i32, i32* @r8, align 4
  %v2_11630 = trunc i32 %v1_11630 to i8
  store i8 %v2_11630, i8* %v2_11628, align 1
  %v0_11634.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11634.pr, label %bb320, label %.dec_label_pc_11638_crit_edge

.dec_label_pc_11638_crit_edge:                    ; preds = %bb318
  %v0_11638.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11638

dec_label_pc_11638:                               ; preds = %.dec_label_pc_11638_crit_edge, %bb317
  %v0_11638 = phi i32 [ %v0_11638.pre, %.dec_label_pc_11638_crit_edge ], [ %v4_11628, %bb317 ]
  %v2_11638 = icmp ugt i32 %v0_11638, 250
  store i1 %v2_11638, i1* %cpsr_c.global-to-local, align 1
  %v7_11638 = icmp eq i32 %v0_11638, 251
  store i1 %v7_11638, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11638, label %bb319, label %bb320

bb319:                                            ; preds = %dec_label_pc_11638
  %v1_1163c = load i32, i32* %sl.global-to-local, align 4
  %v2_1163c = trunc i32 %v1_1163c to i8
  %v3_1163c = load i32, i32* @r4, align 4
  %v4_1163c = add i32 %v3_1163c, 1
  %v5_1163c = inttoptr i32 %v4_1163c to i8*
  store i8 %v2_1163c, i8* %v5_1163c, align 1
  br label %bb320

bb320:                                            ; preds = %bb318, %dec_label_pc_11638, %bb319
  %v0_11640 = load i32, i32* @r5, align 4
  %v1_11640 = add i32 %v0_11640, 4
  %v2_11640 = inttoptr i32 %v1_11640 to i32*
  %v3_11640 = load i32, i32* %v2_11640, align 4
  store i32 %v3_11640, i32* %r0.global-to-local, align 4
  %v0_11644 = load i32, i32* @r6, align 4
  br label %dec_label_pc_1164c

dec_label_pc_1164c:                               ; preds = %dec_label_pc_11ed8, %bb320
  %v0_11650 = phi i32 [ %v3_11ef0, %dec_label_pc_11ed8 ], [ %v3_11640, %bb320 ]
  %storemerge5 = phi i32 [ %v2_11dc4, %dec_label_pc_11ed8 ], [ %v0_11644, %bb320 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_11ed8 ], [ 3, %bb320 ]
  store i32 %storemerge5, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_11650 = inttoptr i32 %storemerge5 to i32*
  %v5_11650 = call i32 @function_13d00(i32 %v0_11650, i32* %v4_11650, i32 %storemerge, i32 16384)
  store i32 %v5_11650, i32* %r0.global-to-local, align 4
  %v0_11654 = load i32, i32* @r5, align 4
  %v1_11654 = add i32 %v0_11654, 24
  %v2_11654 = inttoptr i32 %v1_11654 to i32*
  %v3_11654 = load i32, i32* %v2_11654, align 4
  store i32 %v3_11654, i32* %ip.global-to-local, align 4
  %v0_11658 = load i32, i32* @r7, align 4
  %v1_11658 = add i32 %v0_11658, 3
  store i32 %v1_11658, i32* @r7, align 4
  %v3_1165c = icmp uge i32 %v1_11658, %v3_11654
  store i1 %v3_1165c, i1* %cpsr_c.global-to-local, align 1
  %v9_1165c = icmp eq i32 %v1_11658, %v3_11654
  store i1 %v9_1165c, i1* %cpsr_z.global-to-local, align 1
  %v0_11660 = load i32, i32* @r6, align 4
  %v1_11660 = add i32 %v0_11660, 3
  store i32 %v1_11660, i32* @r6, align 4
  %v0_11664 = load i32, i32* @r4, align 4
  %v1_11664 = add i32 %v0_11664, 3
  store i32 %v1_11664, i32* @r4, align 4
  %v5_11668 = icmp slt i32 %v1_11658, %v3_11654
  br i1 %v5_11668, label %dec_label_pc_115cc, label %dec_label_pc_1166c

dec_label_pc_1166c:                               ; preds = %dec_label_pc_115c4.loopexit, %dec_label_pc_115cc, %dec_label_pc_1164c, %dec_label_pc_11604, %dec_label_pc_115d8, %dec_label_pc_115a4, %dec_label_pc_11dac.dec_label_pc_1166c.loopexit_crit_edge
  %v6_11674 = phi i32 [ %v0_11dd0, %dec_label_pc_11dac.dec_label_pc_1166c.loopexit_crit_edge ], [ %v0_1156c, %dec_label_pc_115a4 ], [ %v6_11674169, %dec_label_pc_115cc ], [ %v0_11654, %dec_label_pc_1164c ], [ %v6_11674169, %dec_label_pc_11604 ], [ %v6_11674169, %dec_label_pc_115d8 ], [ %v6_11674169, %dec_label_pc_115c4.loopexit ]
  %v0_1167c.pre = phi i32 [ %v0_1166c.pre.pre, %dec_label_pc_11dac.dec_label_pc_1166c.loopexit_crit_edge ], [ 0, %dec_label_pc_115a4 ], [ %v1_115f4, %dec_label_pc_115cc ], [ %v1_11658, %dec_label_pc_1164c ], [ %v1_115f4, %dec_label_pc_11604 ], [ %v1_115f4, %dec_label_pc_115d8 ], [ %v2_115f4, %dec_label_pc_115c4.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1166c = icmp eq i32 %v0_1167c.pre, 0
  store i1 %v2_1166c, i1* %cpsr_z.global-to-local, align 1
  %tmp321 = icmp slt i32 %v0_1167c.pre, 1
  br i1 %tmp321, label %dec_label_pc_1167c, label %.thread204

.thread204:                                       ; preds = %dec_label_pc_1166c
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_11674 = add i32 %v6_11674, 12
  %v8_11674 = inttoptr i32 %v7_11674 to i32*
  store i32 3, i32* %v8_11674, align 4
  br label %dec_label_pc_11cd4

dec_label_pc_1167c:                               ; preds = %dec_label_pc_1166c, %dec_label_pc_11d4c, %dec_label_pc_11c24, %dec_label_pc_11b40, %dec_label_pc_11a8c, %dec_label_pc_119d8, %dec_label_pc_11924, %dec_label_pc_1188c, %dec_label_pc_117fc
  %v0_1167c = phi i32 [ %v1_11d40, %dec_label_pc_11d4c ], [ %v0_11c1c, %dec_label_pc_11c24 ], [ %v1_11b34, %dec_label_pc_11b40 ], [ %v1_11a80, %dec_label_pc_11a8c ], [ %v1_119cc, %dec_label_pc_119d8 ], [ %v1_11918, %dec_label_pc_11924 ], [ %v0_1188c, %dec_label_pc_1188c ], [ %v0_117fc, %dec_label_pc_117fc ], [ %v0_1167c.pre, %dec_label_pc_1166c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1167c = icmp eq i32 %v0_1167c, 0
  store i1 %v2_1167c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1167c, label %dec_label_pc_114e8.loopexit, label %dec_label_pc_11684

dec_label_pc_11684:                               ; preds = %dec_label_pc_1167c
  %v0_11684 = load i32, i32* @r5, align 4
  %v1_11684 = add i32 %v0_11684, 24
  %v2_11684 = inttoptr i32 %v1_11684 to i32*
  %v3_11684 = load i32, i32* %v2_11684, align 4
  store i32 %v3_11684, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11cd4

dec_label_pc_1168c:                               ; preds = %dec_label_pc_1156c
  %v1_1168c = add i32 %v0_1156c, 24
  %v2_1168c = inttoptr i32 %v1_1168c to i32*
  %v3_1168c = load i32, i32* %v2_1168c, align 4
  store i32 %v3_1168c, i32* %ip.global-to-local, align 4
  %v1_11690 = add i32 %v3_1168c, -1
  store i32 %v1_11690, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11694 = icmp eq i32 %v1_11690, 0
  store i1 %v2_11694, i1* %cpsr_z.global-to-local, align 1
  %v5_11698 = icmp sgt i32 %v1_11690, 0
  br i1 %v5_11698, label %dec_label_pc_117dc, label %dec_label_pc_114a8

dec_label_pc_117bc:                               ; preds = %bb322
  %v2_117bc = icmp ugt i8 %v3_117e0, 35
  store i1 %v2_117bc, i1* %cpsr_c.global-to-local, align 1
  %v7_117bc = icmp eq i8 %v3_117e0, 36
  store i1 %v7_117bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117bc, label %dec_label_pc_117f0, label %dec_label_pc_117c4

dec_label_pc_117c4:                               ; preds = %dec_label_pc_117bc
  %v2_117c4 = icmp ugt i8 %v3_117e0, 34
  store i1 %v2_117c4, i1* %cpsr_c.global-to-local, align 1
  %v7_117c4 = icmp eq i8 %v3_117e0, 35
  store i1 %v7_117c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117c4, label %dec_label_pc_117f0, label %dec_label_pc_117cc

dec_label_pc_117cc:                               ; preds = %dec_label_pc_117c4
  %v2_117cc = icmp ugt i8 %v3_117e0, 36
  store i1 %v2_117cc, i1* %cpsr_c.global-to-local, align 1
  %v7_117cc = icmp eq i8 %v3_117e0, 37
  store i1 %v7_117cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117cc, label %dec_label_pc_117f0, label %dec_label_pc_117d4

dec_label_pc_117d4:                               ; preds = %dec_label_pc_117cc
  %v1_117d4 = add i32 %v0_117f0, -1
  store i32 %v1_117d4, i32* %r0.global-to-local, align 4
  %v2_117d4 = icmp ne i32 %v0_117f0, 0
  store i1 %v2_117d4, i1* %cpsr_c.global-to-local, align 1
  %v7_117d4 = icmp eq i32 %v0_117f0, 1
  store i1 %v7_117d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117d4, label %dec_label_pc_114a8, label %dec_label_pc_117dc

dec_label_pc_117dc:                               ; preds = %dec_label_pc_1168c, %dec_label_pc_117d4
  %v0_117f0 = phi i32 [ %v1_117d4, %dec_label_pc_117d4 ], [ %v1_11690, %dec_label_pc_1168c ]
  %v2_117dc = add i32 %v0_117f0, %v0_1156c
  store i32 %v2_117dc, i32* %r3.global-to-local, align 4
  %v1_117e0 = add i32 %v2_117dc, 28
  %v2_117e0 = inttoptr i32 %v1_117e0 to i8*
  %v3_117e0 = load i8, i8* %v2_117e0, align 1
  %v4_117e0 = zext i8 %v3_117e0 to i32
  store i32 %v4_117e0, i32* %r3.global-to-local, align 4
  %v2_117e4 = icmp ugt i8 %v3_117e0, 61
  store i1 %v2_117e4, i1* %cpsr_c.global-to-local, align 1
  %v7_117e4 = icmp eq i8 %v3_117e0, 62
  store i1 %v7_117e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117e4, label %dec_label_pc_117f0, label %bb322

bb322:                                            ; preds = %dec_label_pc_117dc
  %v3_117e8 = icmp ugt i8 %v3_117e0, 57
  store i1 %v3_117e8, i1* %cpsr_c.global-to-local, align 1
  %v8_117e8 = icmp eq i8 %v3_117e0, 58
  store i1 %v8_117e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_117e8, label %dec_label_pc_117f0, label %dec_label_pc_117bc

dec_label_pc_117f0:                               ; preds = %dec_label_pc_117dc, %bb322, %dec_label_pc_117cc, %dec_label_pc_117c4, %dec_label_pc_117bc
  %v1_117f0 = add i32 %v0_117f0, 1
  store i32 %v1_117f0, i32* @r7, align 4
  %v2_117f4 = icmp eq i32 %v1_117f0, -1
  store i1 %v2_117f4, i1* %cpsr_c.global-to-local, align 1
  %v7_117f4 = icmp eq i32 %v0_117f0, -2
  store i1 %v7_117f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117f4, label %dec_label_pc_114a8, label %dec_label_pc_117fc

dec_label_pc_117fc:                               ; preds = %dec_label_pc_117f0, %dec_label_pc_114c8, %dec_label_pc_114a8
  %v0_117fc = phi i32 [ %v5_114d8, %dec_label_pc_114c8 ], [ %v5_114b8, %dec_label_pc_114a8 ], [ %v1_117f0, %dec_label_pc_117f0 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_117fc = icmp eq i32 %v0_117fc, 0
  store i1 %v2_117fc, i1* %cpsr_z.global-to-local, align 1
  %tmp323 = icmp slt i32 %v0_117fc, 1
  br i1 %tmp323, label %dec_label_pc_1167c, label %dec_label_pc_11804

dec_label_pc_11804:                               ; preds = %dec_label_pc_117fc
  %v0_11804 = load i32, i32* @r5, align 4
  %v1_11804 = inttoptr i32 %v0_11804 to i32*
  %v2_11804 = load i32, i32* %v1_11804, align 4
  store i32 %v2_11804, i32* %r3.global-to-local, align 4
  %v1_11808 = add i32 %v0_11804, 4
  %v2_11808 = inttoptr i32 %v1_11808 to i32*
  %v3_11808 = load i32, i32* %v2_11808, align 4
  store i32 %v3_11808, i32* %r0.global-to-local, align 4
  %v1_1180c = add i32 %v2_11804, 12
  %v2_1180c = inttoptr i32 %v1_1180c to i8*
  %v3_1180c = load i8, i8* %v2_1180c, align 1
  %v4_1180c = zext i8 %v3_1180c to i32
  store i32 %v4_1180c, i32* %r2.global-to-local, align 4
  %v1_11810 = inttoptr i32 %v2_11804 to i32*
  %v2_11810 = load i32, i32* %v1_11810, align 4
  store i32 %v2_11810, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_11818 = inttoptr i32 %v2_11810 to i32*
  %v5_11818 = call i32 @function_13d00(i32 %v3_11808, i32* %v4_11818, i32 %v4_1180c, i32 16384)
  store i32 %v5_11818, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_11820 = load i32, i32* @r5, align 4
  %v1_11820 = add i32 %v0_11820, 4
  %v2_11820 = inttoptr i32 %v1_11820 to i32*
  %v3_11820 = load i32, i32* %v2_11820, align 4
  store i32 %v3_11820, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_1182c = call i32 @function_13d00(i32 %v3_11820, i32* bitcast ([3 x i8]* @global_var_15d50.33 to i32*), i32 2, i32 16384)
  store i32 %v5_1182c, i32* %r0.global-to-local, align 4
  %v0_11830 = load i32, i32* @r5, align 4
  %v1_11830 = add i32 %v0_11830, 24
  %v2_11830 = inttoptr i32 %v1_11830 to i32*
  %v3_11830 = load i32, i32* %v2_11830, align 4
  store i32 %v3_11830, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_11838 = add i32 %v0_11830, 12
  %v3_11838 = inttoptr i32 %v2_11838 to i32*
  store i32 4, i32* %v3_11838, align 4
  br label %dec_label_pc_11cd4

dec_label_pc_11840:                               ; preds = %dec_label_pc_1156c
  %v1_11840 = add i32 %v0_1156c, 24
  %v2_11840 = inttoptr i32 %v1_11840 to i32*
  %v3_11840 = load i32, i32* %v2_11840, align 4
  store i32 %v3_11840, i32* %ip.global-to-local, align 4
  %v1_11844 = add i32 %v3_11840, -1
  store i32 %v1_11844, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11848 = icmp eq i32 %v1_11844, 0
  store i1 %v2_11848, i1* %cpsr_z.global-to-local, align 1
  %v5_1184c = icmp sgt i32 %v1_11844, 0
  br i1 %v5_1184c, label %dec_label_pc_1186c, label %dec_label_pc_11eb4

dec_label_pc_11854:                               ; preds = %bb324
  %v2_11854 = icmp ugt i8 %v3_11870, 35
  store i1 %v2_11854, i1* %cpsr_c.global-to-local, align 1
  %v7_11854 = icmp eq i8 %v3_11870, 36
  store i1 %v7_11854, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11854, label %dec_label_pc_11880, label %dec_label_pc_1185c

dec_label_pc_1185c:                               ; preds = %dec_label_pc_11854
  %v2_1185c = icmp ugt i8 %v3_11870, 34
  store i1 %v2_1185c, i1* %cpsr_c.global-to-local, align 1
  %v7_1185c = icmp eq i8 %v3_11870, 35
  store i1 %v7_1185c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1185c, label %dec_label_pc_11880, label %dec_label_pc_11864

dec_label_pc_11864:                               ; preds = %dec_label_pc_1185c
  %v1_11864 = add i32 %v0_11880, -1
  store i32 %v1_11864, i32* %r0.global-to-local, align 4
  %v2_11864 = icmp ne i32 %v0_11880, 0
  store i1 %v2_11864, i1* %cpsr_c.global-to-local, align 1
  %v7_11864 = icmp eq i32 %v0_11880, 1
  store i1 %v7_11864, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11864, label %dec_label_pc_11eb4, label %dec_label_pc_1186c

dec_label_pc_1186c:                               ; preds = %dec_label_pc_11840, %dec_label_pc_11864
  %v0_11880 = phi i32 [ %v1_11864, %dec_label_pc_11864 ], [ %v1_11844, %dec_label_pc_11840 ]
  %v2_1186c = add i32 %v0_11880, %v0_1156c
  store i32 %v2_1186c, i32* %r3.global-to-local, align 4
  %v1_11870 = add i32 %v2_1186c, 28
  %v2_11870 = inttoptr i32 %v1_11870 to i8*
  %v3_11870 = load i8, i8* %v2_11870, align 1
  %v4_11870 = zext i8 %v3_11870 to i32
  store i32 %v4_11870, i32* %r3.global-to-local, align 4
  %v2_11874 = icmp ugt i8 %v3_11870, 61
  store i1 %v2_11874, i1* %cpsr_c.global-to-local, align 1
  %v7_11874 = icmp eq i8 %v3_11870, 62
  store i1 %v7_11874, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11874, label %dec_label_pc_11880, label %bb324

bb324:                                            ; preds = %dec_label_pc_1186c
  %v3_11878 = icmp ugt i8 %v3_11870, 57
  store i1 %v3_11878, i1* %cpsr_c.global-to-local, align 1
  %v8_11878 = icmp eq i8 %v3_11870, 58
  store i1 %v8_11878, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11878, label %dec_label_pc_11880, label %dec_label_pc_11854

dec_label_pc_11880:                               ; preds = %dec_label_pc_1186c, %bb324, %dec_label_pc_1185c, %dec_label_pc_11854
  %v1_11880 = add i32 %v0_11880, 1
  store i32 %v1_11880, i32* @r7, align 4
  %v2_11884 = icmp eq i32 %v1_11880, -1
  store i1 %v2_11884, i1* %cpsr_c.global-to-local, align 1
  %v7_11884 = icmp eq i32 %v0_11880, -2
  store i1 %v7_11884, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11884, label %dec_label_pc_11eb4, label %dec_label_pc_1188c

dec_label_pc_1188c:                               ; preds = %dec_label_pc_11880, %dec_label_pc_11eb4
  %v0_1188c = phi i32 [ %v5_11ec4, %dec_label_pc_11eb4 ], [ %v1_11880, %dec_label_pc_11880 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1188c = icmp eq i32 %v0_1188c, 0
  store i1 %v2_1188c, i1* %cpsr_z.global-to-local, align 1
  %tmp325 = icmp slt i32 %v0_1188c, 1
  br i1 %tmp325, label %dec_label_pc_1167c, label %dec_label_pc_11894

dec_label_pc_11894:                               ; preds = %dec_label_pc_1188c
  %v0_11894 = load i32, i32* @r5, align 4
  %v1_11894 = inttoptr i32 %v0_11894 to i32*
  %v2_11894 = load i32, i32* %v1_11894, align 4
  store i32 %v2_11894, i32* %r3.global-to-local, align 4
  %v1_11898 = add i32 %v0_11894, 4
  %v2_11898 = inttoptr i32 %v1_11898 to i32*
  %v3_11898 = load i32, i32* %v2_11898, align 4
  store i32 %v3_11898, i32* %r0.global-to-local, align 4
  %v1_1189c = add i32 %v2_11894, 13
  %v2_1189c = inttoptr i32 %v1_1189c to i8*
  %v3_1189c = load i8, i8* %v2_1189c, align 1
  %v4_1189c = zext i8 %v3_1189c to i32
  store i32 %v4_1189c, i32* %r2.global-to-local, align 4
  %v1_118a0 = add i32 %v2_11894, 4
  %v2_118a0 = inttoptr i32 %v1_118a0 to i32*
  %v3_118a0 = load i32, i32* %v2_118a0, align 4
  store i32 %v3_118a0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_118a8 = inttoptr i32 %v3_118a0 to i32*
  %v5_118a8 = call i32 @function_13d00(i32 %v3_11898, i32* %v4_118a8, i32 %v4_1189c, i32 16384)
  store i32 %v5_118a8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_118b0 = load i32, i32* @r5, align 4
  %v1_118b0 = add i32 %v0_118b0, 4
  %v2_118b0 = inttoptr i32 %v1_118b0 to i32*
  %v3_118b0 = load i32, i32* %v2_118b0, align 4
  store i32 %v3_118b0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_118bc = call i32 @function_13d00(i32 %v3_118b0, i32* bitcast ([3 x i8]* @global_var_15d50.33 to i32*), i32 2, i32 16384)
  store i32 %v5_118bc, i32* %r0.global-to-local, align 4
  %v0_118c0 = load i32, i32* @r5, align 4
  %v1_118c0 = add i32 %v0_118c0, 24
  %v2_118c0 = inttoptr i32 %v1_118c0 to i32*
  %v3_118c0 = load i32, i32* %v2_118c0, align 4
  store i32 %v3_118c0, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_118c8 = add i32 %v0_118c0, 12
  %v3_118c8 = inttoptr i32 %v2_118c8 to i32*
  store i32 5, i32* %v3_118c8, align 4
  br label %dec_label_pc_11cd4

dec_label_pc_118d0:                               ; preds = %dec_label_pc_1156c
  %v1_118d0 = add i32 %v0_1156c, 24
  %v2_118d0 = inttoptr i32 %v1_118d0 to i32*
  %v3_118d0 = load i32, i32* %v2_118d0, align 4
  store i32 %v3_118d0, i32* %ip.global-to-local, align 4
  %v1_118d4 = add i32 %v3_118d0, -1
  store i32 %v1_118d4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_118d8 = icmp eq i32 %v1_118d4, 0
  store i1 %v2_118d8, i1* %cpsr_z.global-to-local, align 1
  %v5_118dc = icmp sgt i32 %v1_118d4, 0
  br i1 %v5_118dc, label %dec_label_pc_11904, label %dec_label_pc_114ecthread-pre-split.thread

dec_label_pc_118e4:                               ; preds = %bb326
  %v2_118e4 = icmp ugt i8 %v3_11908, 35
  store i1 %v2_118e4, i1* %cpsr_c.global-to-local, align 1
  %v7_118e4 = icmp eq i8 %v3_11908, 36
  store i1 %v7_118e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_118e4, label %dec_label_pc_11918, label %dec_label_pc_118ec

dec_label_pc_118ec:                               ; preds = %dec_label_pc_118e4
  %v2_118ec = icmp ugt i8 %v3_11908, 34
  store i1 %v2_118ec, i1* %cpsr_c.global-to-local, align 1
  %v7_118ec = icmp eq i8 %v3_11908, 35
  store i1 %v7_118ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_118ec, label %dec_label_pc_11918, label %dec_label_pc_118f4

dec_label_pc_118f4:                               ; preds = %dec_label_pc_118ec
  %v2_118f4 = icmp ugt i8 %v3_11908, 36
  store i1 %v2_118f4, i1* %cpsr_c.global-to-local, align 1
  %v7_118f4 = icmp eq i8 %v3_11908, 37
  store i1 %v7_118f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_118f4, label %dec_label_pc_11918, label %dec_label_pc_118fc

dec_label_pc_118fc:                               ; preds = %dec_label_pc_118f4
  %v1_118fc = add i32 %v0_11918, -1
  store i32 %v1_118fc, i32* %r0.global-to-local, align 4
  %v2_118fc = icmp ne i32 %v0_11918, 0
  store i1 %v2_118fc, i1* %cpsr_c.global-to-local, align 1
  %v7_118fc = icmp eq i32 %v0_11918, 1
  store i1 %v7_118fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_118fc, label %dec_label_pc_114ecthread-pre-split, label %dec_label_pc_11904

dec_label_pc_11904:                               ; preds = %dec_label_pc_118d0, %dec_label_pc_118fc
  %v0_11918 = phi i32 [ %v1_118fc, %dec_label_pc_118fc ], [ %v1_118d4, %dec_label_pc_118d0 ]
  %v2_11904 = add i32 %v0_11918, %v0_1156c
  store i32 %v2_11904, i32* %r3.global-to-local, align 4
  %v1_11908 = add i32 %v2_11904, 28
  %v2_11908 = inttoptr i32 %v1_11908 to i8*
  %v3_11908 = load i8, i8* %v2_11908, align 1
  %v4_11908 = zext i8 %v3_11908 to i32
  store i32 %v4_11908, i32* %r3.global-to-local, align 4
  %v2_1190c = icmp ugt i8 %v3_11908, 61
  store i1 %v2_1190c, i1* %cpsr_c.global-to-local, align 1
  %v7_1190c = icmp eq i8 %v3_11908, 62
  store i1 %v7_1190c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1190c, label %dec_label_pc_11918, label %bb326

bb326:                                            ; preds = %dec_label_pc_11904
  %v3_11910 = icmp ugt i8 %v3_11908, 57
  store i1 %v3_11910, i1* %cpsr_c.global-to-local, align 1
  %v8_11910 = icmp eq i8 %v3_11908, 58
  store i1 %v8_11910, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11910, label %dec_label_pc_11918, label %dec_label_pc_118e4

dec_label_pc_11918:                               ; preds = %dec_label_pc_11904, %bb326, %dec_label_pc_118f4, %dec_label_pc_118ec, %dec_label_pc_118e4
  %v1_11918 = add i32 %v0_11918, 1
  store i32 %v1_11918, i32* @r7, align 4
  %v2_1191c = icmp eq i32 %v1_11918, -1
  store i1 %v2_1191c, i1* %cpsr_c.global-to-local, align 1
  %v7_1191c = icmp eq i32 %v0_11918, -2
  store i1 %v7_1191c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1191c, label %dec_label_pc_114ecthread-pre-split, label %dec_label_pc_11924

dec_label_pc_11924:                               ; preds = %dec_label_pc_11918
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11924 = icmp eq i32 %v1_11918, 0
  store i1 %v2_11924, i1* %cpsr_z.global-to-local, align 1
  %tmp327 = icmp slt i32 %v1_11918, 1
  br i1 %tmp327, label %dec_label_pc_1167c, label %dec_label_pc_1192c

dec_label_pc_1192c:                               ; preds = %dec_label_pc_11924
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_11930 = call i32 @function_121a4(i32 21)
  store i32 %v2_11938, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v3_11940 = call i32 @function_120c0(i32 21, i32* nonnull %stack_var_-56)
  store i32 %v3_11940, i32* %r0.global-to-local, align 4
  %v3_11944 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11944, i32* %r2.global-to-local, align 4
  store i32 %v3_11940, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11950 = load i32, i32* @r5, align 4
  %v1_11950 = add i32 %v0_11950, 4
  %v2_11950 = inttoptr i32 %v1_11950 to i32*
  %v3_11950 = load i32, i32* %v2_11950, align 4
  store i32 %v3_11950, i32* %r0.global-to-local, align 4
  %v4_11954 = inttoptr i32 %v3_11940 to i32*
  %v5_11954 = call i32 @function_13d00(i32 %v3_11950, i32* %v4_11954, i32 %v3_11944, i32 16384)
  store i32 %v5_11954, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11964 = load i32, i32* @r5, align 4
  %v1_11964 = add i32 %v0_11964, 4
  %v2_11964 = inttoptr i32 %v1_11964 to i32*
  %v3_11964 = load i32, i32* %v2_11964, align 4
  store i32 %v3_11964, i32* %r0.global-to-local, align 4
  %v5_11968 = call i32 @function_13d00(i32 %v3_11964, i32* bitcast ([3 x i8]* @global_var_15d50.33 to i32*), i32 2, i32 16384)
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_11970 = call i32 @function_120ec(i32 21)
  store i32 %v1_11970, i32* %r0.global-to-local, align 4
  %v0_11974 = load i32, i32* @r5, align 4
  %v1_11974 = add i32 %v0_11974, 24
  %v2_11974 = inttoptr i32 %v1_11974 to i32*
  %v3_11974 = load i32, i32* %v2_11974, align 4
  store i32 %v3_11974, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_1197c = add i32 %v0_11974, 12
  %v3_1197c = inttoptr i32 %v2_1197c to i32*
  store i32 6, i32* %v3_1197c, align 4
  br label %dec_label_pc_11cd4

dec_label_pc_11984:                               ; preds = %dec_label_pc_1156c
  %v1_11984 = add i32 %v0_1156c, 24
  %v2_11984 = inttoptr i32 %v1_11984 to i32*
  %v3_11984 = load i32, i32* %v2_11984, align 4
  store i32 %v3_11984, i32* %ip.global-to-local, align 4
  %v1_11988 = add i32 %v3_11984, -1
  store i32 %v1_11988, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1198c = icmp eq i32 %v1_11988, 0
  store i1 %v2_1198c, i1* %cpsr_z.global-to-local, align 1
  %v5_11990 = icmp sgt i32 %v1_11988, 0
  br i1 %v5_11990, label %dec_label_pc_119b8, label %dec_label_pc_114ecthread-pre-split.thread

dec_label_pc_11998:                               ; preds = %bb328
  %v2_11998 = icmp ugt i8 %v3_119bc, 35
  store i1 %v2_11998, i1* %cpsr_c.global-to-local, align 1
  %v7_11998 = icmp eq i8 %v3_119bc, 36
  store i1 %v7_11998, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11998, label %dec_label_pc_119cc, label %dec_label_pc_119a0

dec_label_pc_119a0:                               ; preds = %dec_label_pc_11998
  %v2_119a0 = icmp ugt i8 %v3_119bc, 34
  store i1 %v2_119a0, i1* %cpsr_c.global-to-local, align 1
  %v7_119a0 = icmp eq i8 %v3_119bc, 35
  store i1 %v7_119a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_119a0, label %dec_label_pc_119cc, label %dec_label_pc_119a8

dec_label_pc_119a8:                               ; preds = %dec_label_pc_119a0
  %v2_119a8 = icmp ugt i8 %v3_119bc, 36
  store i1 %v2_119a8, i1* %cpsr_c.global-to-local, align 1
  %v7_119a8 = icmp eq i8 %v3_119bc, 37
  store i1 %v7_119a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_119a8, label %dec_label_pc_119cc, label %dec_label_pc_119b0

dec_label_pc_119b0:                               ; preds = %dec_label_pc_119a8
  %v1_119b0 = add i32 %v0_119cc, -1
  store i32 %v1_119b0, i32* %r0.global-to-local, align 4
  %v2_119b0 = icmp ne i32 %v0_119cc, 0
  store i1 %v2_119b0, i1* %cpsr_c.global-to-local, align 1
  %v7_119b0 = icmp eq i32 %v0_119cc, 1
  store i1 %v7_119b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_119b0, label %dec_label_pc_114ecthread-pre-split, label %dec_label_pc_119b8

dec_label_pc_119b8:                               ; preds = %dec_label_pc_11984, %dec_label_pc_119b0
  %v0_119cc = phi i32 [ %v1_119b0, %dec_label_pc_119b0 ], [ %v1_11988, %dec_label_pc_11984 ]
  %v2_119b8 = add i32 %v0_119cc, %v0_1156c
  store i32 %v2_119b8, i32* %r3.global-to-local, align 4
  %v1_119bc = add i32 %v2_119b8, 28
  %v2_119bc = inttoptr i32 %v1_119bc to i8*
  %v3_119bc = load i8, i8* %v2_119bc, align 1
  %v4_119bc = zext i8 %v3_119bc to i32
  store i32 %v4_119bc, i32* %r3.global-to-local, align 4
  %v2_119c0 = icmp ugt i8 %v3_119bc, 61
  store i1 %v2_119c0, i1* %cpsr_c.global-to-local, align 1
  %v7_119c0 = icmp eq i8 %v3_119bc, 62
  store i1 %v7_119c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_119c0, label %dec_label_pc_119cc, label %bb328

bb328:                                            ; preds = %dec_label_pc_119b8
  %v3_119c4 = icmp ugt i8 %v3_119bc, 57
  store i1 %v3_119c4, i1* %cpsr_c.global-to-local, align 1
  %v8_119c4 = icmp eq i8 %v3_119bc, 58
  store i1 %v8_119c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_119c4, label %dec_label_pc_119cc, label %dec_label_pc_11998

dec_label_pc_119cc:                               ; preds = %dec_label_pc_119b8, %bb328, %dec_label_pc_119a8, %dec_label_pc_119a0, %dec_label_pc_11998
  %v1_119cc = add i32 %v0_119cc, 1
  store i32 %v1_119cc, i32* @r7, align 4
  %v2_119d0 = icmp eq i32 %v1_119cc, -1
  store i1 %v2_119d0, i1* %cpsr_c.global-to-local, align 1
  %v7_119d0 = icmp eq i32 %v0_119cc, -2
  store i1 %v7_119d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_119d0, label %dec_label_pc_114ecthread-pre-split, label %dec_label_pc_119d8

dec_label_pc_119d8:                               ; preds = %dec_label_pc_119cc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_119d8 = icmp eq i32 %v1_119cc, 0
  store i1 %v2_119d8, i1* %cpsr_z.global-to-local, align 1
  %tmp329 = icmp slt i32 %v1_119cc, 1
  br i1 %tmp329, label %dec_label_pc_1167c, label %dec_label_pc_119e0

dec_label_pc_119e0:                               ; preds = %dec_label_pc_119d8
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_119e4 = call i32 @function_121a4(i32 22)
  store i32 %v2_119ec, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_119f4 = call i32 @function_120c0(i32 22, i32* nonnull %stack_var_-48)
  store i32 %v3_119f4, i32* %r0.global-to-local, align 4
  %v3_119f8 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_119f8, i32* %r2.global-to-local, align 4
  store i32 %v3_119f4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11a04 = load i32, i32* @r5, align 4
  %v1_11a04 = add i32 %v0_11a04, 4
  %v2_11a04 = inttoptr i32 %v1_11a04 to i32*
  %v3_11a04 = load i32, i32* %v2_11a04, align 4
  store i32 %v3_11a04, i32* %r0.global-to-local, align 4
  %v4_11a08 = inttoptr i32 %v3_119f4 to i32*
  %v5_11a08 = call i32 @function_13d00(i32 %v3_11a04, i32* %v4_11a08, i32 %v3_119f8, i32 16384)
  store i32 %v5_11a08, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11a18 = load i32, i32* @r5, align 4
  %v1_11a18 = add i32 %v0_11a18, 4
  %v2_11a18 = inttoptr i32 %v1_11a18 to i32*
  %v3_11a18 = load i32, i32* %v2_11a18, align 4
  store i32 %v3_11a18, i32* %r0.global-to-local, align 4
  %v5_11a1c = call i32 @function_13d00(i32 %v3_11a18, i32* bitcast ([3 x i8]* @global_var_15d50.33 to i32*), i32 2, i32 16384)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_11a24 = call i32 @function_120ec(i32 22)
  store i32 %v1_11a24, i32* %r0.global-to-local, align 4
  %v0_11a28 = load i32, i32* @r5, align 4
  %v1_11a28 = add i32 %v0_11a28, 24
  %v2_11a28 = inttoptr i32 %v1_11a28 to i32*
  %v3_11a28 = load i32, i32* %v2_11a28, align 4
  store i32 %v3_11a28, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_11a30 = add i32 %v0_11a28, 12
  %v3_11a30 = inttoptr i32 %v2_11a30 to i32*
  store i32 7, i32* %v3_11a30, align 4
  br label %dec_label_pc_11cd4

dec_label_pc_11a38:                               ; preds = %dec_label_pc_1156c
  %v1_11a38 = add i32 %v0_1156c, 24
  %v2_11a38 = inttoptr i32 %v1_11a38 to i32*
  %v3_11a38 = load i32, i32* %v2_11a38, align 4
  store i32 %v3_11a38, i32* %ip.global-to-local, align 4
  %v1_11a3c = add i32 %v3_11a38, -1
  store i32 %v1_11a3c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11a40 = icmp eq i32 %v1_11a3c, 0
  store i1 %v2_11a40, i1* %cpsr_z.global-to-local, align 1
  %v5_11a44 = icmp sgt i32 %v1_11a3c, 0
  br i1 %v5_11a44, label %dec_label_pc_11a6c, label %dec_label_pc_114ecthread-pre-split.thread

dec_label_pc_11a4c:                               ; preds = %bb330
  %v2_11a4c = icmp ugt i8 %v3_11a70, 35
  store i1 %v2_11a4c, i1* %cpsr_c.global-to-local, align 1
  %v7_11a4c = icmp eq i8 %v3_11a70, 36
  store i1 %v7_11a4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a4c, label %dec_label_pc_11a80, label %dec_label_pc_11a54

dec_label_pc_11a54:                               ; preds = %dec_label_pc_11a4c
  %v2_11a54 = icmp ugt i8 %v3_11a70, 34
  store i1 %v2_11a54, i1* %cpsr_c.global-to-local, align 1
  %v7_11a54 = icmp eq i8 %v3_11a70, 35
  store i1 %v7_11a54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a54, label %dec_label_pc_11a80, label %dec_label_pc_11a5c

dec_label_pc_11a5c:                               ; preds = %dec_label_pc_11a54
  %v2_11a5c = icmp ugt i8 %v3_11a70, 36
  store i1 %v2_11a5c, i1* %cpsr_c.global-to-local, align 1
  %v7_11a5c = icmp eq i8 %v3_11a70, 37
  store i1 %v7_11a5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a5c, label %dec_label_pc_11a80, label %dec_label_pc_11a64

dec_label_pc_11a64:                               ; preds = %dec_label_pc_11a5c
  %v1_11a64 = add i32 %v0_11a80, -1
  store i32 %v1_11a64, i32* %r0.global-to-local, align 4
  %v2_11a64 = icmp ne i32 %v0_11a80, 0
  store i1 %v2_11a64, i1* %cpsr_c.global-to-local, align 1
  %v7_11a64 = icmp eq i32 %v0_11a80, 1
  store i1 %v7_11a64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a64, label %dec_label_pc_114ecthread-pre-split, label %dec_label_pc_11a6c

dec_label_pc_11a6c:                               ; preds = %dec_label_pc_11a38, %dec_label_pc_11a64
  %v0_11a80 = phi i32 [ %v1_11a64, %dec_label_pc_11a64 ], [ %v1_11a3c, %dec_label_pc_11a38 ]
  %v2_11a6c = add i32 %v0_11a80, %v0_1156c
  store i32 %v2_11a6c, i32* %r3.global-to-local, align 4
  %v1_11a70 = add i32 %v2_11a6c, 28
  %v2_11a70 = inttoptr i32 %v1_11a70 to i8*
  %v3_11a70 = load i8, i8* %v2_11a70, align 1
  %v4_11a70 = zext i8 %v3_11a70 to i32
  store i32 %v4_11a70, i32* %r3.global-to-local, align 4
  %v2_11a74 = icmp ugt i8 %v3_11a70, 61
  store i1 %v2_11a74, i1* %cpsr_c.global-to-local, align 1
  %v7_11a74 = icmp eq i8 %v3_11a70, 62
  store i1 %v7_11a74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a74, label %dec_label_pc_11a80, label %bb330

bb330:                                            ; preds = %dec_label_pc_11a6c
  %v3_11a78 = icmp ugt i8 %v3_11a70, 57
  store i1 %v3_11a78, i1* %cpsr_c.global-to-local, align 1
  %v8_11a78 = icmp eq i8 %v3_11a70, 58
  store i1 %v8_11a78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11a78, label %dec_label_pc_11a80, label %dec_label_pc_11a4c

dec_label_pc_11a80:                               ; preds = %dec_label_pc_11a6c, %bb330, %dec_label_pc_11a5c, %dec_label_pc_11a54, %dec_label_pc_11a4c
  %v1_11a80 = add i32 %v0_11a80, 1
  store i32 %v1_11a80, i32* @r7, align 4
  %v2_11a84 = icmp eq i32 %v1_11a80, -1
  store i1 %v2_11a84, i1* %cpsr_c.global-to-local, align 1
  %v7_11a84 = icmp eq i32 %v0_11a80, -2
  store i1 %v7_11a84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a84, label %dec_label_pc_114ecthread-pre-split, label %dec_label_pc_11a8c

dec_label_pc_11a8c:                               ; preds = %dec_label_pc_11a80
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11a8c = icmp eq i32 %v1_11a80, 0
  store i1 %v2_11a8c, i1* %cpsr_z.global-to-local, align 1
  %tmp331 = icmp slt i32 %v1_11a80, 1
  br i1 %tmp331, label %dec_label_pc_1167c, label %dec_label_pc_11a94

dec_label_pc_11a94:                               ; preds = %dec_label_pc_11a8c
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_11a98 = call i32 @function_121a4(i32 23)
  store i32 %v2_11938, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r0.global-to-local, align 4
  %v3_11aa8 = call i32 @function_120c0(i32 23, i32* nonnull %stack_var_-56)
  store i32 %v3_11aa8, i32* %r0.global-to-local, align 4
  %v3_11aac = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11aac, i32* %r2.global-to-local, align 4
  store i32 %v3_11aa8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11ab8 = load i32, i32* @r5, align 4
  %v1_11ab8 = add i32 %v0_11ab8, 4
  %v2_11ab8 = inttoptr i32 %v1_11ab8 to i32*
  %v3_11ab8 = load i32, i32* %v2_11ab8, align 4
  store i32 %v3_11ab8, i32* %r0.global-to-local, align 4
  %v4_11abc = inttoptr i32 %v3_11aa8 to i32*
  %v5_11abc = call i32 @function_13d00(i32 %v3_11ab8, i32* %v4_11abc, i32 %v3_11aac, i32 16384)
  store i32 %v5_11abc, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11acc = load i32, i32* @r5, align 4
  %v1_11acc = add i32 %v0_11acc, 4
  %v2_11acc = inttoptr i32 %v1_11acc to i32*
  %v3_11acc = load i32, i32* %v2_11acc, align 4
  store i32 %v3_11acc, i32* %r0.global-to-local, align 4
  %v5_11ad0 = call i32 @function_13d00(i32 %v3_11acc, i32* bitcast ([3 x i8]* @global_var_15d50.33 to i32*), i32 2, i32 16384)
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_11ad8 = call i32 @function_120ec(i32 23)
  store i32 %v1_11ad8, i32* %r0.global-to-local, align 4
  %v0_11adc = load i32, i32* @r5, align 4
  %v1_11adc = add i32 %v0_11adc, 24
  %v2_11adc = inttoptr i32 %v1_11adc to i32*
  %v3_11adc = load i32, i32* %v2_11adc, align 4
  store i32 %v3_11adc, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_11ae4 = add i32 %v0_11adc, 12
  %v3_11ae4 = inttoptr i32 %v2_11ae4 to i32*
  store i32 9, i32* %v3_11ae4, align 4
  br label %dec_label_pc_11cd4

dec_label_pc_11aec:                               ; preds = %dec_label_pc_1156c
  %v1_11aec = add i32 %v0_1156c, 24
  %v2_11aec = inttoptr i32 %v1_11aec to i32*
  %v3_11aec = load i32, i32* %v2_11aec, align 4
  store i32 %v3_11aec, i32* %ip.global-to-local, align 4
  %v1_11af0 = add i32 %v3_11aec, -1
  store i32 %v1_11af0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11af4 = icmp eq i32 %v1_11af0, 0
  store i1 %v2_11af4, i1* %cpsr_z.global-to-local, align 1
  %v5_11af8 = icmp sgt i32 %v1_11af0, 0
  br i1 %v5_11af8, label %dec_label_pc_11b20, label %dec_label_pc_114ecthread-pre-split.thread

dec_label_pc_11b00:                               ; preds = %bb332
  %v2_11b00 = icmp ugt i8 %v3_11b24, 35
  store i1 %v2_11b00, i1* %cpsr_c.global-to-local, align 1
  %v7_11b00 = icmp eq i8 %v3_11b24, 36
  store i1 %v7_11b00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b00, label %dec_label_pc_11b34, label %dec_label_pc_11b08

dec_label_pc_11b08:                               ; preds = %dec_label_pc_11b00
  %v2_11b08 = icmp ugt i8 %v3_11b24, 34
  store i1 %v2_11b08, i1* %cpsr_c.global-to-local, align 1
  %v7_11b08 = icmp eq i8 %v3_11b24, 35
  store i1 %v7_11b08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b08, label %dec_label_pc_11b34, label %dec_label_pc_11b10

dec_label_pc_11b10:                               ; preds = %dec_label_pc_11b08
  %v2_11b10 = icmp ugt i8 %v3_11b24, 36
  store i1 %v2_11b10, i1* %cpsr_c.global-to-local, align 1
  %v7_11b10 = icmp eq i8 %v3_11b24, 37
  store i1 %v7_11b10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b10, label %dec_label_pc_11b34, label %dec_label_pc_11b18

dec_label_pc_11b18:                               ; preds = %dec_label_pc_11b10
  %v1_11b18 = add i32 %v0_11b34, -1
  store i32 %v1_11b18, i32* %r0.global-to-local, align 4
  %v2_11b18 = icmp ne i32 %v0_11b34, 0
  store i1 %v2_11b18, i1* %cpsr_c.global-to-local, align 1
  %v7_11b18 = icmp eq i32 %v0_11b34, 1
  store i1 %v7_11b18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b18, label %dec_label_pc_114ecthread-pre-split, label %dec_label_pc_11b20

dec_label_pc_11b20:                               ; preds = %dec_label_pc_11aec, %dec_label_pc_11b18
  %v0_11b34 = phi i32 [ %v1_11b18, %dec_label_pc_11b18 ], [ %v1_11af0, %dec_label_pc_11aec ]
  %v2_11b20 = add i32 %v0_11b34, %v0_1156c
  store i32 %v2_11b20, i32* %r3.global-to-local, align 4
  %v1_11b24 = add i32 %v2_11b20, 28
  %v2_11b24 = inttoptr i32 %v1_11b24 to i8*
  %v3_11b24 = load i8, i8* %v2_11b24, align 1
  %v4_11b24 = zext i8 %v3_11b24 to i32
  store i32 %v4_11b24, i32* %r3.global-to-local, align 4
  %v2_11b28 = icmp ugt i8 %v3_11b24, 61
  store i1 %v2_11b28, i1* %cpsr_c.global-to-local, align 1
  %v7_11b28 = icmp eq i8 %v3_11b24, 62
  store i1 %v7_11b28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b28, label %dec_label_pc_11b34, label %bb332

bb332:                                            ; preds = %dec_label_pc_11b20
  %v3_11b2c = icmp ugt i8 %v3_11b24, 57
  store i1 %v3_11b2c, i1* %cpsr_c.global-to-local, align 1
  %v8_11b2c = icmp eq i8 %v3_11b24, 58
  store i1 %v8_11b2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11b2c, label %dec_label_pc_11b34, label %dec_label_pc_11b00

dec_label_pc_11b34:                               ; preds = %dec_label_pc_11b20, %bb332, %dec_label_pc_11b10, %dec_label_pc_11b08, %dec_label_pc_11b00
  %v1_11b34 = add i32 %v0_11b34, 1
  store i32 %v1_11b34, i32* @r7, align 4
  %v2_11b38 = icmp eq i32 %v1_11b34, -1
  store i1 %v2_11b38, i1* %cpsr_c.global-to-local, align 1
  %v7_11b38 = icmp eq i32 %v0_11b34, -2
  store i1 %v7_11b38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b38, label %dec_label_pc_114ecthread-pre-split, label %dec_label_pc_11b40

dec_label_pc_11b40:                               ; preds = %dec_label_pc_11b34
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11b40 = icmp eq i32 %v1_11b34, 0
  store i1 %v2_11b40, i1* %cpsr_z.global-to-local, align 1
  %tmp333 = icmp slt i32 %v1_11b34, 1
  br i1 %tmp333, label %dec_label_pc_1167c, label %dec_label_pc_11b48

dec_label_pc_11b48:                               ; preds = %dec_label_pc_11b40
  store i32 20, i32* %r0.global-to-local, align 4
  %v1_11b4c = call i32 @function_121a4(i32 20)
  store i32 %v2_119ec, i32* %r1.global-to-local, align 4
  store i32 20, i32* %r0.global-to-local, align 4
  %v3_11b5c = call i32 @function_120c0(i32 20, i32* nonnull %stack_var_-48)
  store i32 %v3_11b5c, i32* %r0.global-to-local, align 4
  %v3_11b60 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_11b60, i32* %r2.global-to-local, align 4
  store i32 %v3_11b5c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11b6c = load i32, i32* @r5, align 4
  %v1_11b6c = add i32 %v0_11b6c, 4
  %v2_11b6c = inttoptr i32 %v1_11b6c to i32*
  %v3_11b6c = load i32, i32* %v2_11b6c, align 4
  store i32 %v3_11b6c, i32* %r0.global-to-local, align 4
  %v4_11b70 = inttoptr i32 %v3_11b5c to i32*
  %v5_11b70 = call i32 @function_13d00(i32 %v3_11b6c, i32* %v4_11b70, i32 %v3_11b60, i32 16384)
  store i32 %v5_11b70, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11b80 = load i32, i32* @r5, align 4
  %v1_11b80 = add i32 %v0_11b80, 4
  %v2_11b80 = inttoptr i32 %v1_11b80 to i32*
  %v3_11b80 = load i32, i32* %v2_11b80, align 4
  store i32 %v3_11b80, i32* %r0.global-to-local, align 4
  %v5_11b84 = call i32 @function_13d00(i32 %v3_11b80, i32* bitcast ([3 x i8]* @global_var_15d50.33 to i32*), i32 2, i32 16384)
  store i32 20, i32* %r0.global-to-local, align 4
  %v1_11b8c = call i32 @function_120ec(i32 20)
  store i32 %v1_11b8c, i32* %r0.global-to-local, align 4
  %v0_11b90 = load i32, i32* @r5, align 4
  %v1_11b90 = add i32 %v0_11b90, 24
  %v2_11b90 = inttoptr i32 %v1_11b90 to i32*
  %v3_11b90 = load i32, i32* %v2_11b90, align 4
  store i32 %v3_11b90, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_11b98 = add i32 %v0_11b90, 12
  %v3_11b98 = inttoptr i32 %v2_11b98 to i32*
  store i32 8, i32* %v3_11b98, align 4
  br label %dec_label_pc_11cd4

dec_label_pc_11ba0:                               ; preds = %dec_label_pc_1156c
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_11ba4 = call i32 @function_121a4(i32 26)
  store i32 %v2_11938, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_11bb4 = call i32 @function_120c0(i32 26, i32* nonnull %stack_var_-56)
  %v3_11bb8 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11bb4, i32* %r2.global-to-local, align 4
  %v1_11bc0 = add i32 %v3_11bb8, -1
  store i32 %v1_11bc0, i32* %r3.global-to-local, align 4
  %v0_11bc4 = load i32, i32* @sb, align 4
  store i32 %v0_11bc4, i32* %r0.global-to-local, align 4
  %v0_11bc8 = load i32, i32* @r5, align 4
  %v1_11bc8 = add i32 %v0_11bc8, 24
  %v2_11bc8 = inttoptr i32 %v1_11bc8 to i32*
  %v3_11bc8 = load i32, i32* %v2_11bc8, align 4
  store i32 %v3_11bc8, i32* %r1.global-to-local, align 4
  %v4_11bcc = call i32 @function_12b94(i32 %v0_11bc4, i32 %v3_11bc8, i32 %v3_11bb4, i32 %v1_11bc0)
  %v3_11bd0 = icmp eq i32 %v4_11bcc, -1
  store i1 %v3_11bd0, i1* %cpsr_c.global-to-local, align 1
  %v8_11bd0 = icmp eq i32 %v4_11bcc, -1
  store i1 %v8_11bd0, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_11bdc = call i32 @function_120ec(i32 26)
  br i1 %v3_11bd0, label %dec_label_pc_11bd8, label %dec_label_pc_11e0c

dec_label_pc_11bd8:                               ; preds = %dec_label_pc_11ba0
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_11be4 = call i32 @function_121a4(i32 25)
  store i32 %v2_11938, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_11bf4 = call i32 @function_120c0(i32 25, i32* nonnull %stack_var_-56)
  store i32 %v3_11bf4, i32* %r0.global-to-local, align 4
  %v3_11bf8 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11bf4, i32* %r2.global-to-local, align 4
  %v1_11c00 = add i32 %v3_11bf8, -1
  store i32 %v1_11c00, i32* %r3.global-to-local, align 4
  %v0_11c04 = load i32, i32* @r5, align 4
  %v1_11c04 = add i32 %v0_11c04, 24
  %v2_11c04 = inttoptr i32 %v1_11c04 to i32*
  %v3_11c04 = load i32, i32* %v2_11c04, align 4
  store i32 %v3_11c04, i32* %r1.global-to-local, align 4
  %v0_11c08 = load i32, i32* @sb, align 4
  store i32 %v0_11c08, i32* %r0.global-to-local, align 4
  %v4_11c0c = call i32 @function_12b94(i32 %v0_11c08, i32 %v3_11c04, i32 %v3_11bf4, i32 %v1_11c00)
  store i32 %v4_11c0c, i32* @r7, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_11c18 = call i32 @function_120ec(i32 25)
  store i32 %v1_11c18, i32* %r0.global-to-local, align 4
  %v0_11c1c = load i32, i32* @r7, align 4
  %v2_11c1c = icmp eq i32 %v0_11c1c, -1
  store i1 %v2_11c1c, i1* %cpsr_c.global-to-local, align 1
  %v7_11c1c = icmp eq i32 %v0_11c1c, -1
  store i1 %v7_11c1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c1c, label %dec_label_pc_114e8.loopexit, label %dec_label_pc_11c24

dec_label_pc_11c24:                               ; preds = %dec_label_pc_11bd8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11c24 = icmp eq i32 %v0_11c1c, 0
  store i1 %v2_11c24, i1* %cpsr_z.global-to-local, align 1
  %tmp334 = icmp slt i32 %v0_11c1c, 1
  br i1 %tmp334, label %dec_label_pc_1167c, label %dec_label_pc_11c2c

dec_label_pc_11c2c:                               ; preds = %dec_label_pc_11c24
  %v0_11c2c = load i32, i32* @r5, align 4
  %v1_11c2c = add i32 %v0_11c2c, 21
  %v2_11c2c = inttoptr i32 %v1_11c2c to i8*
  %v3_11c2c = load i8, i8* %v2_11c2c, align 1
  %v4_11c2c = zext i8 %v3_11c2c to i32
  store i32 %v4_11c2c, i32* %r3.global-to-local, align 4
  %v1_11c30 = add i32 %v0_11c2c, 20
  %v2_11c30 = inttoptr i32 %v1_11c30 to i8*
  %v3_11c30 = load i8, i8* %v2_11c30, align 1
  %v4_11c30 = zext i8 %v3_11c30 to i32
  store i32 %v4_11c30, i32* %r2.global-to-local, align 4
  %v1_11c34 = add i32 %v0_11c2c, 16
  %v2_11c34 = inttoptr i32 %v1_11c34 to i32*
  %v3_11c34 = load i32, i32* %v2_11c34, align 4
  store i32 %v3_11c34, i32* %r1.global-to-local, align 4
  %v4_11c38 = mul nuw nsw i32 %v4_11c2c, 256
  %v5_11c38 = or i32 %v4_11c30, %v4_11c38
  store i32 %v5_11c38, i32* %r2.global-to-local, align 4
  %v1_11c3c = and i32 %v4_11c30, 128
  %v2_11c3c = icmp ne i32 %v1_11c3c, 0
  store i1 %v2_11c3c, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_11c2c, i32* %r3.global-to-local, align 4
  store i32 %v3_11c34, i32* %stack_var_-48, align 4
  store i32 %v5_11c38, i32* %stack_var_-38, align 4
  %v1_11c4c = inttoptr i32 %v0_11c2c to i32*
  %v2_11c4c = load i32, i32* %v1_11c4c, align 4
  store i32 %v2_11c4c, i32* @fp, align 4
  %v0_11c50 = call i32 @function_134bc()
  store i32 %v0_11c50, i32* %r0.global-to-local, align 4
  %v7_11c54 = icmp eq i32 %v0_11c50, -1
  %.350 = zext i1 %v7_11c54 to i32
  store i32 %.350, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11c60 = icmp eq i32 %v0_11c50, 0
  store i1 %v2_11c60, i1* %cpsr_z.global-to-local, align 1
  %tmp337 = icmp slt i32 %v0_11c50, 1
  br i1 %tmp337, label %bb338, label %.thread68

.thread68:                                        ; preds = %dec_label_pc_11c2c
  store i32 1, i32* %sl.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11cb8

bb338:                                            ; preds = %dec_label_pc_11c2c
  store i32 %.350, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11c6c = icmp eq i1 %v7_11c54, false
  store i1 %v2_11c6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11c6c, label %dec_label_pc_11c74, label %dec_label_pc_11cb8

dec_label_pc_11c74:                               ; preds = %bb338
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_11c80 = call i32 @function_13d90(i32 2, i32 1, i32 0)
  store i32 %v3_11c80, i32* %r0.global-to-local, align 4
  %v2_11c84 = icmp eq i32 %v3_11c80, -1
  store i1 %v2_11c84, i1* %cpsr_c.global-to-local, align 1
  %v7_11c84 = icmp eq i32 %v3_11c80, -1
  store i1 %v7_11c84, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_11c80, i32* @r6, align 4
  br i1 %v7_11c84, label %dec_label_pc_120b8, label %dec_label_pc_11c90

dec_label_pc_11c90:                               ; preds = %dec_label_pc_11c74
  store i32 18, i32* %r0.global-to-local, align 4
  %v1_11c94 = call i32 @function_121a4(i32 18)
  store i32 19, i32* %r0.global-to-local, align 4
  %v1_11c9c = call i32 @function_121a4(i32 19)
  %v0_11ca0 = load i32, i32* @sl, align 4
  store i32 %v0_11ca0, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r0.global-to-local, align 4
  %v2_11ca8 = inttoptr i32 %v0_11ca0 to i32*
  %v3_11ca8 = call i32 @function_120c0(i32 18, i32* %v2_11ca8)
  store i32 %v3_11ca8, i32* %r0.global-to-local, align 4
  %v1_11cac = inttoptr i32 %v3_11ca8 to i8*
  %v2_11cac = call i32 @function_fee0(i8* %v1_11cac)
  store i32 %v2_11cac, i32* %r0.global-to-local, align 4
  store i32 %v2_11cac, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_11cb0 = icmp eq i32 %v2_11cac, 0
  store i1 %v3_11cb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11cb0, label %dec_label_pc_11cb8, label %dec_label_pc_11f88

dec_label_pc_11cb8:                               ; preds = %.thread68, %dec_label_pc_11c90, %bb338
  %v0_11cb8 = load i32, i32* @r5, align 4
  %v1_11cb8 = add i32 %v0_11cb8, 4
  %v2_11cb8 = inttoptr i32 %v1_11cb8 to i32*
  %v3_11cb8 = load i32, i32* %v2_11cb8, align 4
  store i32 %v3_11cb8, i32* %r0.global-to-local, align 4
  %v1_11cbc = call i32 @function_13490(i32 %v3_11cb8)
  store i32 %v1_11cbc, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_11cc8 = load i32, i32* @r5, align 4
  %v1_11cc8 = add i32 %v0_11cc8, 24
  %v2_11cc8 = inttoptr i32 %v1_11cc8 to i32*
  %v3_11cc8 = load i32, i32* %v2_11cc8, align 4
  store i32 %v3_11cc8, i32* %ip.global-to-local, align 4
  %v2_11ccc = add i32 %v0_11cc8, 4
  %v3_11ccc = inttoptr i32 %v2_11ccc to i32*
  store i32 -1, i32* %v3_11ccc, align 4
  %v0_11cd0 = load i32, i32* %r2.global-to-local, align 4
  %v1_11cd0 = load i32, i32* @r5, align 4
  %v2_11cd0 = add i32 %v1_11cd0, 12
  %v3_11cd0 = inttoptr i32 %v2_11cd0 to i32*
  store i32 %v0_11cd0, i32* %v3_11cd0, align 4
  br label %dec_label_pc_11cd4

dec_label_pc_11cd4:                               ; preds = %.thread204, %dec_label_pc_11d54, %dec_label_pc_11f24, %dec_label_pc_11e3c, %dec_label_pc_11b48, %dec_label_pc_11a94, %dec_label_pc_119e0, %dec_label_pc_1192c, %dec_label_pc_11894, %dec_label_pc_11804, %dec_label_pc_11684, %dec_label_pc_11cb8
  %v0_11cd4 = load i32, i32* %ip.global-to-local, align 4
  %v1_11cd4 = load i32, i32* @r7, align 4
  %v2_11cd4 = sub i32 %v0_11cd4, %v1_11cd4
  %v3_11cd4 = icmp uge i32 %v0_11cd4, %v1_11cd4
  store i1 %v3_11cd4, i1* %cpsr_c.global-to-local, align 1
  %v4_11cd4 = xor i32 %v1_11cd4, %v0_11cd4
  %v5_11cd4 = xor i32 %v2_11cd4, %v0_11cd4
  %v6_11cd4 = and i32 %v5_11cd4, %v4_11cd4
  %v7_11cd4 = icmp slt i32 %v6_11cd4, 0
  %v8_11cd4 = icmp slt i32 %v2_11cd4, 0
  %v9_11cd4 = icmp eq i32 %v0_11cd4, %v1_11cd4
  store i1 %v9_11cd4, i1* %cpsr_z.global-to-local, align 1
  %v2_11cd8 = xor i1 %v8_11cd4, %v7_11cd4
  %v0_11cd4.v1_11cd4 = select i1 %v2_11cd8, i32 %v0_11cd4, i32 %v1_11cd4
  store i32 %v0_11cd4.v1_11cd4, i32* %r1.global-to-local, align 4
  %v2_11ce0 = sub i32 %v0_11cd4, %v0_11cd4.v1_11cd4
  store i32 %v2_11ce0, i32* @r2, align 4
  %v1_11ce4 = load i32, i32* @r5, align 4
  %v2_11ce4 = add i32 %v1_11ce4, 24
  %v3_11ce4 = inttoptr i32 %v2_11ce4 to i32*
  store i32 %v2_11ce0, i32* %v3_11ce4, align 4
  %v0_11ce8 = load i32, i32* @sb, align 4
  %v1_11ce8 = load i32, i32* %r1.global-to-local, align 4
  %v2_11ce8 = add i32 %v1_11ce8, %v0_11ce8
  store i32 %v2_11ce8, i32* @r1, align 4
  store i32 %v0_11ce8, i32* @r0, align 4
  %v3_11cf0 = call i32 @function_13ac0(i32 %v0_11ce8, i32 %v2_11ce8, i32 %v2_11ce0)
  store i32 %v3_11cf0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1156c

dec_label_pc_11cf8:                               ; preds = %dec_label_pc_1156c
  %v1_11cf8 = add i32 %v0_1156c, 24
  %v2_11cf8 = inttoptr i32 %v1_11cf8 to i32*
  %v3_11cf8 = load i32, i32* %v2_11cf8, align 4
  store i32 %v3_11cf8, i32* %ip.global-to-local, align 4
  %v1_11cfc = add i32 %v3_11cf8, -1
  store i32 %v1_11cfc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11d00 = icmp eq i32 %v1_11cfc, 0
  store i1 %v2_11d00, i1* %cpsr_z.global-to-local, align 1
  %v5_11d04 = icmp sgt i32 %v1_11cfc, 0
  br i1 %v5_11d04, label %dec_label_pc_11d2c, label %dec_label_pc_114ecthread-pre-split.thread

dec_label_pc_11d0c:                               ; preds = %bb341
  %v2_11d0c = icmp ugt i8 %v3_11d30, 35
  store i1 %v2_11d0c, i1* %cpsr_c.global-to-local, align 1
  %v7_11d0c = icmp eq i8 %v3_11d30, 36
  store i1 %v7_11d0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d0c, label %dec_label_pc_11d40, label %dec_label_pc_11d14

dec_label_pc_11d14:                               ; preds = %dec_label_pc_11d0c
  %v2_11d14 = icmp ugt i8 %v3_11d30, 34
  store i1 %v2_11d14, i1* %cpsr_c.global-to-local, align 1
  %v7_11d14 = icmp eq i8 %v3_11d30, 35
  store i1 %v7_11d14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d14, label %dec_label_pc_11d40, label %dec_label_pc_11d1c

dec_label_pc_11d1c:                               ; preds = %dec_label_pc_11d14
  %v2_11d1c = icmp ugt i8 %v3_11d30, 36
  store i1 %v2_11d1c, i1* %cpsr_c.global-to-local, align 1
  %v7_11d1c = icmp eq i8 %v3_11d30, 37
  store i1 %v7_11d1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d1c, label %dec_label_pc_11d40, label %dec_label_pc_11d24

dec_label_pc_11d24:                               ; preds = %dec_label_pc_11d1c
  %v1_11d24 = add i32 %v0_11d40, -1
  store i32 %v1_11d24, i32* %r0.global-to-local, align 4
  %v2_11d24 = icmp ne i32 %v0_11d40, 0
  store i1 %v2_11d24, i1* %cpsr_c.global-to-local, align 1
  %v7_11d24 = icmp eq i32 %v0_11d40, 1
  store i1 %v7_11d24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d24, label %dec_label_pc_114ecthread-pre-split, label %dec_label_pc_11d2c

dec_label_pc_11d2c:                               ; preds = %dec_label_pc_11cf8, %dec_label_pc_11d24
  %v0_11d40 = phi i32 [ %v1_11d24, %dec_label_pc_11d24 ], [ %v1_11cfc, %dec_label_pc_11cf8 ]
  %v2_11d2c = add i32 %v0_11d40, %v0_1156c
  store i32 %v2_11d2c, i32* %r3.global-to-local, align 4
  %v1_11d30 = add i32 %v2_11d2c, 28
  %v2_11d30 = inttoptr i32 %v1_11d30 to i8*
  %v3_11d30 = load i8, i8* %v2_11d30, align 1
  %v4_11d30 = zext i8 %v3_11d30 to i32
  store i32 %v4_11d30, i32* %r3.global-to-local, align 4
  %v2_11d34 = icmp ugt i8 %v3_11d30, 61
  store i1 %v2_11d34, i1* %cpsr_c.global-to-local, align 1
  %v7_11d34 = icmp eq i8 %v3_11d30, 62
  store i1 %v7_11d34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d34, label %dec_label_pc_11d40, label %bb341

bb341:                                            ; preds = %dec_label_pc_11d2c
  %v3_11d38 = icmp ugt i8 %v3_11d30, 57
  store i1 %v3_11d38, i1* %cpsr_c.global-to-local, align 1
  %v8_11d38 = icmp eq i8 %v3_11d30, 58
  store i1 %v8_11d38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11d38, label %dec_label_pc_11d40, label %dec_label_pc_11d0c

dec_label_pc_11d40:                               ; preds = %dec_label_pc_11d2c, %bb341, %dec_label_pc_11d1c, %dec_label_pc_11d14, %dec_label_pc_11d0c
  %v1_11d40 = add i32 %v0_11d40, 1
  store i32 %v1_11d40, i32* @r7, align 4
  %v2_11d44 = icmp eq i32 %v1_11d40, -1
  store i1 %v2_11d44, i1* %cpsr_c.global-to-local, align 1
  %v7_11d44 = icmp eq i32 %v0_11d40, -2
  store i1 %v7_11d44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d44, label %dec_label_pc_114ecthread-pre-split, label %dec_label_pc_11d4c

dec_label_pc_11d4c:                               ; preds = %dec_label_pc_11d40
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11d4c = icmp eq i32 %v1_11d40, 0
  store i1 %v2_11d4c, i1* %cpsr_z.global-to-local, align 1
  %tmp342 = icmp slt i32 %v1_11d40, 1
  br i1 %tmp342, label %dec_label_pc_1167c, label %dec_label_pc_11d54

dec_label_pc_11d54:                               ; preds = %dec_label_pc_11d4c
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_11d58 = call i32 @function_121a4(i32 24)
  store i32 %v2_11938, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v3_11d68 = call i32 @function_120c0(i32 24, i32* nonnull %stack_var_-56)
  store i32 %v3_11d68, i32* %r0.global-to-local, align 4
  %v3_11d6c = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11d6c, i32* %r2.global-to-local, align 4
  store i32 %v3_11d68, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11d78 = load i32, i32* @r5, align 4
  %v1_11d78 = add i32 %v0_11d78, 4
  %v2_11d78 = inttoptr i32 %v1_11d78 to i32*
  %v3_11d78 = load i32, i32* %v2_11d78, align 4
  store i32 %v3_11d78, i32* %r0.global-to-local, align 4
  %v4_11d7c = inttoptr i32 %v3_11d68 to i32*
  %v5_11d7c = call i32 @function_13d00(i32 %v3_11d78, i32* %v4_11d7c, i32 %v3_11d6c, i32 16384)
  store i32 %v5_11d7c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11d8c = load i32, i32* @r5, align 4
  %v1_11d8c = add i32 %v0_11d8c, 4
  %v2_11d8c = inttoptr i32 %v1_11d8c to i32*
  %v3_11d8c = load i32, i32* %v2_11d8c, align 4
  store i32 %v3_11d8c, i32* %r0.global-to-local, align 4
  %v5_11d90 = call i32 @function_13d00(i32 %v3_11d8c, i32* bitcast ([3 x i8]* @global_var_15d50.33 to i32*), i32 2, i32 16384)
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_11d98 = call i32 @function_120ec(i32 24)
  store i32 %v1_11d98, i32* %r0.global-to-local, align 4
  %v0_11d9c = load i32, i32* @r5, align 4
  %v1_11d9c = add i32 %v0_11d9c, 24
  %v2_11d9c = inttoptr i32 %v1_11d9c to i32*
  %v3_11d9c = load i32, i32* %v2_11d9c, align 4
  store i32 %v3_11d9c, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_11da4 = add i32 %v0_11d9c, 12
  %v3_11da4 = inttoptr i32 %v2_11da4 to i32*
  store i32 10, i32* %v3_11da4, align 4
  br label %dec_label_pc_11cd4

dec_label_pc_11dac:                               ; preds = %dec_label_pc_115fc
  store i32 ptrtoint (i32* @global_var_1600b.326 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_115b4, i32* @r0, align 4
  %v3_11db8 = call i32 @function_13ab0(i32 %v2_115b4, i32 ptrtoint (i32* @global_var_1600b.326 to i32), i32 3)
  store i32 9, i32* @r2, align 4
  store i32 %v2_11dc4, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_16002.328 to i32), i32* @r1, align 4
  %v3_11dcc = call i32 @function_13ab0(i32 %v2_11dc4, i32 ptrtoint (i32* @global_var_16002.328 to i32), i32 9)
  store i32 %v3_11dcc, i32* %r0.global-to-local, align 4
  %v0_11dd0 = load i32, i32* @r5, align 4
  %v1_11dd0 = add i32 %v0_11dd0, 24
  %v2_11dd0 = inttoptr i32 %v1_11dd0 to i32*
  %v3_11dd0 = load i32, i32* %v2_11dd0, align 4
  store i32 %v3_11dd0, i32* %ip.global-to-local, align 4
  %v0_11dd4 = load i32, i32* @r6, align 4
  %v1_11dd4 = add i32 %v0_11dd4, 2
  store i32 %v1_11dd4, i32* %r2.global-to-local, align 4
  %v0_11dd8 = load i32, i32* @sb, align 4
  %v2_11dd8 = add i32 %v0_11dd8, %v3_11dd0
  store i32 %v2_11dd8, i32* %r3.global-to-local, align 4
  %v3_11ddc = icmp uge i32 %v2_11dd8, %v1_11dd4
  store i1 %v3_11ddc, i1* %cpsr_c.global-to-local, align 1
  %v9_11ddc = icmp eq i32 %v2_11dd8, %v1_11dd4
  store i1 %v9_11ddc, i1* %cpsr_z.global-to-local, align 1
  %v2_11de0 = xor i1 %v3_11ddc, true
  %v3_11de0 = or i1 %v9_11ddc, %v2_11de0
  br i1 %v3_11de0, label %dec_label_pc_11dac.dec_label_pc_1166c.loopexit_crit_edge, label %dec_label_pc_11de4

dec_label_pc_11dac.dec_label_pc_1166c.loopexit_crit_edge: ; preds = %dec_label_pc_11dac
  %v0_1166c.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_1166c

dec_label_pc_11de4:                               ; preds = %dec_label_pc_11dac
  %v0_11de4 = load i32, i32* @r4, align 4
  %v1_11de4 = add i32 %v0_11de4, 1
  %v2_11de4 = inttoptr i32 %v1_11de4 to i8*
  %v3_11de4 = load i8, i8* %v2_11de4, align 1
  %v4_11de4 = zext i8 %v3_11de4 to i32
  store i32 %v4_11de4, i32* %r3.global-to-local, align 4
  %v2_11de8 = icmp ugt i8 %v3_11de4, 30
  store i1 %v2_11de8, i1* %cpsr_c.global-to-local, align 1
  %v7_11de8 = icmp eq i8 %v3_11de4, 31
  store i1 %v7_11de8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11de8, label %dec_label_pc_11ed8, label %dec_label_pc_11df0

dec_label_pc_11df0:                               ; preds = %dec_label_pc_11de4
  %v1_11df0 = add i32 %v0_11de4, -1
  %v2_11df0 = inttoptr i32 %v1_11df0 to i8*
  %v3_11df0 = load i8, i8* %v2_11df0, align 1
  %v4_11df0 = zext i8 %v3_11df0 to i32
  store i32 %v4_11df0, i32* %r3.global-to-local, align 4
  %v2_11df4 = icmp ugt i8 %v3_11df0, -4
  store i1 %v2_11df4, i1* %cpsr_c.global-to-local, align 1
  %v7_11df4 = icmp eq i8 %v3_11df0, -3
  store i1 %v7_11df4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11df4, label %bb343, label %dec_label_pc_11e00

bb343:                                            ; preds = %dec_label_pc_11df0
  %v1_11df8 = load i32, i32* @r8, align 4
  %v2_11df8 = trunc i32 %v1_11df8 to i8
  store i8 %v2_11df8, i8* %v2_11df0, align 1
  %v0_11dfc.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11dfc.pr, label %dec_label_pc_11610, label %.dec_label_pc_11e00_crit_edge

.dec_label_pc_11e00_crit_edge:                    ; preds = %bb343
  %v0_11e00.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11e00

dec_label_pc_11e00:                               ; preds = %.dec_label_pc_11e00_crit_edge, %dec_label_pc_11df0
  %v0_11e00 = phi i32 [ %v0_11e00.pre, %.dec_label_pc_11e00_crit_edge ], [ %v4_11df0, %dec_label_pc_11df0 ]
  %v2_11e00 = icmp ugt i32 %v0_11e00, 250
  store i1 %v2_11e00, i1* %cpsr_c.global-to-local, align 1
  %v7_11e00 = icmp eq i32 %v0_11e00, 251
  store i1 %v7_11e00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11e00, label %bb344, label %dec_label_pc_11610

bb344:                                            ; preds = %dec_label_pc_11e00
  %v1_11e04 = load i32, i32* %sl.global-to-local, align 4
  %v2_11e04 = trunc i32 %v1_11e04 to i8
  %v3_11e04 = load i32, i32* @r4, align 4
  %v4_11e04 = add i32 %v3_11e04, -1
  %v5_11e04 = inttoptr i32 %v4_11e04 to i8*
  store i8 %v2_11e04, i8* %v5_11e04, align 1
  br label %dec_label_pc_11610

dec_label_pc_11e0c:                               ; preds = %dec_label_pc_11ba0
  store i32 %v1_11bdc, i32* %r0.global-to-local, align 4
  %v0_11e14 = load i32, i32* @r5, align 4
  %v1_11e14 = add i32 %v0_11e14, 4
  %v2_11e14 = inttoptr i32 %v1_11e14 to i32*
  %v3_11e14 = load i32, i32* %v2_11e14, align 4
  store i32 %v3_11e14, i32* %r0.global-to-local, align 4
  %v1_11e18 = call i32 @function_13490(i32 %v3_11e14)
  store i32 %v1_11e18, i32* %r0.global-to-local, align 4
  %v0_11e1c = load i32, i32* @r5, align 4
  %v1_11e1c = add i32 %v0_11e1c, 540
  %v2_11e1c = inttoptr i32 %v1_11e1c to i8*
  %v3_11e1c = load i8, i8* %v2_11e1c, align 1
  %v4_11e1c = zext i8 %v3_11e1c to i32
  %v1_11e20 = add nuw nsw i32 %v4_11e1c, 1
  %v1_11e24 = urem i32 %v1_11e20, 256
  store i32 %v1_11e24, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_11e2c = icmp ugt i32 %v1_11e24, 9
  store i1 %v2_11e2c, i1* %cpsr_c.global-to-local, align 1
  %v7_11e2c = icmp eq i32 %v1_11e24, 10
  store i1 %v7_11e2c, i1* %cpsr_z.global-to-local, align 1
  %v2_11e30 = add i32 %v0_11e1c, 4
  %v3_11e30 = inttoptr i32 %v2_11e30 to i32*
  store i32 -1, i32* %v3_11e30, align 4
  %v0_11e34 = load i32, i32* %r3.global-to-local, align 4
  %v1_11e34 = trunc i32 %v0_11e34 to i8
  %v2_11e34 = load i32, i32* @r5, align 4
  %v3_11e34 = add i32 %v2_11e34, 540
  %v4_11e34 = inttoptr i32 %v3_11e34 to i8*
  store i8 %v1_11e34, i8* %v4_11e34, align 1
  %v0_11e38 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_11e3c = load i32, i32* @r5, align 4
  br i1 %v0_11e38, label %dec_label_pc_11e3c, label %dec_label_pc_11f24

dec_label_pc_11e3c:                               ; preds = %dec_label_pc_11e0c
  %v1_11e3c = add i32 %v0_11e3c, 24
  %v2_11e3c = inttoptr i32 %v1_11e3c to i32*
  %v3_11e3c = load i32, i32* %v2_11e3c, align 4
  store i32 %v3_11e3c, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 -1, i32* @r7, align 4
  %v3_11e4c = add i32 %v0_11e3c, 540
  %v4_11e4c = inttoptr i32 %v3_11e4c to i8*
  store i8 0, i8* %v4_11e4c, align 1
  %v0_11e50 = load i32, i32* %r1.global-to-local, align 4
  %v1_11e50 = load i32, i32* @r5, align 4
  %v2_11e50 = add i32 %v1_11e50, 12
  %v3_11e50 = inttoptr i32 %v2_11e50 to i32*
  store i32 %v0_11e50, i32* %v3_11e50, align 4
  br label %dec_label_pc_11cd4

dec_label_pc_11e58:                               ; preds = %dec_label_pc_11504
  br i1 %v2_1152c, label %dec_label_pc_11f78, label %dec_label_pc_11e5c

dec_label_pc_11e5c:                               ; preds = %dec_label_pc_11e58
  %v3_11e5c = icmp eq i32 %v5_11528, -1
  store i1 %v3_11e5c, i1* %cpsr_c.global-to-local, align 1
  %v8_11e5c = icmp eq i32 %v5_11528, -1
  store i1 %v8_11e5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11e5c, label %dec_label_pc_11e64, label %dec_label_pc_11554

dec_label_pc_11e64:                               ; preds = %dec_label_pc_11e5c
  store i32 %stack_var_-1868.0, i32* %r2.global-to-local, align 4
  %v2_11e68 = load i32, i32* %v2_1150c, align 4
  store i32 %v2_11e68, i32* %r3.global-to-local, align 4
  %v2_11e6c = icmp ugt i32 %v2_11e68, 10
  store i1 %v2_11e6c, i1* %cpsr_c.global-to-local, align 1
  %v7_11e6c = icmp eq i32 %v2_11e68, 11
  store i1 %v7_11e6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11e6c, label %dec_label_pc_11384, label %dec_label_pc_11e74

dec_label_pc_11e74:                               ; preds = %dec_label_pc_11e64, %dec_label_pc_11f78
  %v0_11e74 = load i32, i32* @r5, align 4
  %v1_11e74 = add i32 %v0_11e74, 4
  %v2_11e74 = inttoptr i32 %v1_11e74 to i32*
  %v3_11e74 = load i32, i32* %v2_11e74, align 4
  store i32 %v3_11e74, i32* %r0.global-to-local, align 4
  %v1_11e78 = call i32 @function_13490(i32 %v3_11e74)
  store i32 %v1_11e78, i32* %r0.global-to-local, align 4
  %v0_11e7c = load i32, i32* @r5, align 4
  %v1_11e7c = add i32 %v0_11e7c, 540
  %v2_11e7c = inttoptr i32 %v1_11e7c to i8*
  %v3_11e7c = load i8, i8* %v2_11e7c, align 1
  %v4_11e7c = zext i8 %v3_11e7c to i32
  %v1_11e80 = add nuw nsw i32 %v4_11e7c, 1
  %v1_11e84 = urem i32 %v1_11e80, 256
  store i32 %v1_11e84, i32* %r3.global-to-local, align 4
  %v2_11e88 = icmp ugt i32 %v1_11e84, 8
  store i1 %v2_11e88, i1* %cpsr_c.global-to-local, align 1
  %v7_11e88 = icmp eq i32 %v1_11e84, 9
  store i1 %v7_11e88, i1* %cpsr_z.global-to-local, align 1
  %v1_11e8c = trunc i32 %v1_11e80 to i8
  store i8 %v1_11e8c, i8* %v2_11e7c, align 1
  store i32 -1, i32* @r4, align 4
  %v0_11e94 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_11e94 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_11e94 = xor i1 %v1_11e94, true
  %v3_11e94 = and i1 %v0_11e94, %v2_11e94
  br i1 %v3_11e94, label %bb345, label %.thread217

.thread217:                                       ; preds = %dec_label_pc_11e74
  %v1_11e98213218 = load i32, i32* @r5, align 4
  %v2_11e98214219 = add i32 %v1_11e98213218, 4
  %v3_11e98215220 = inttoptr i32 %v2_11e98214219 to i32*
  store i32 -1, i32* %v3_11e98215220, align 4
  br label %bb346

bb345:                                            ; preds = %dec_label_pc_11e74
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_11e98209 = load i32, i32* @r5, align 4
  %v2_11e98210 = add i32 %v1_11e98209, 4
  %v3_11e98211 = inttoptr i32 %v2_11e98210 to i32*
  store i32 -1, i32* %v3_11e98211, align 4
  %v4_11e9c = load i32, i32* %r3.global-to-local, align 4
  %v5_11e9c = load i32, i32* @r5, align 4
  %v6_11e9c = add i32 %v5_11e9c, 12
  %v7_11e9c = inttoptr i32 %v6_11e9c to i32*
  store i32 %v4_11e9c, i32* %v7_11e9c, align 4
  %v4_11ea0 = load i32, i32* %r3.global-to-local, align 4
  %v5_11ea0 = trunc i32 %v4_11ea0 to i8
  %v6_11ea0 = load i32, i32* @r5, align 4
  %v7_11ea0 = add i32 %v6_11ea0, 540
  %v8_11ea0 = inttoptr i32 %v7_11ea0 to i8*
  store i8 %v5_11ea0, i8* %v8_11ea0, align 1
  %v0_11ea4.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_11ea4.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %bb346

bb346:                                            ; preds = %.thread217, %bb345
  %v1_11ea4 = phi i1 [ %v1_11ea4.pre, %bb345 ], [ %v1_11e94, %.thread217 ]
  %v0_11ea4 = phi i1 [ %v0_11ea4.pre, %bb345 ], [ %v0_11e94, %.thread217 ]
  %v2_11ea4 = xor i1 %v1_11ea4, true
  %v3_11ea4 = and i1 %v0_11ea4, %v2_11ea4
  br i1 %v3_11ea4, label %dec_label_pc_11384, label %dec_label_pc_11ea8

dec_label_pc_11ea8:                               ; preds = %bb346
  %v0_11ea8 = load i32, i32* @r5, align 4
  store i32 %v0_11ea8, i32* @r0, align 4
  %v0_11eac = call i32 @function_10440()
  store i32 %v0_11eac, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11384

dec_label_pc_11eb4:                               ; preds = %dec_label_pc_11864, %dec_label_pc_11840, %dec_label_pc_11880
  store i32 %v3_11840, i32* %r1.global-to-local, align 4
  %v0_11eb8 = load i32, i32* @sb, align 4
  store i32 %v0_11eb8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15eb0.330 to i32), i32* %r2.global-to-local, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v5_11ec4 = call i32 @function_12b94(i32 %v0_11eb8, i32 %v3_11840, i32 ptrtoint ([8 x i8]* @global_var_15eb0.330 to i32), i32 7)
  store i32 %v5_11ec4, i32* %r0.global-to-local, align 4
  %v3_11ec8 = icmp eq i32 %v5_11ec4, -1
  store i1 %v3_11ec8, i1* %cpsr_c.global-to-local, align 1
  %v8_11ec8 = icmp eq i32 %v5_11ec4, -1
  store i1 %v8_11ec8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_11ec4, i32* @r7, align 4
  br i1 %v3_11ec8, label %dec_label_pc_114e8.loopexit, label %dec_label_pc_1188c

dec_label_pc_11ed8:                               ; preds = %dec_label_pc_11de4
  store i32 %v2_115b4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_11ee4 = add i32 %v0_11dd0, 4
  %v2_11ee4 = inttoptr i32 %v1_11ee4 to i32*
  %v3_11ee4 = load i32, i32* %v2_11ee4, align 4
  store i32 %v3_11ee4, i32* %r0.global-to-local, align 4
  %v5_11ee8 = call i32 @function_13d00(i32 %v3_11ee4, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_11ee8, i32* %r0.global-to-local, align 4
  store i32 %v2_11dbc, i32* %r1.global-to-local, align 4
  %v0_11ef0 = load i32, i32* @r5, align 4
  %v1_11ef0 = add i32 %v0_11ef0, 4
  %v2_11ef0 = inttoptr i32 %v1_11ef0 to i32*
  %v3_11ef0 = load i32, i32* %v2_11ef0, align 4
  store i32 %v3_11ef0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1164c

dec_label_pc_11f00:                               ; preds = %dec_label_pc_114f4
  store i32 %.pre, i32* @r0, align 4
  %v1_11f08 = add i32 %v0_11f00, 156
  store i32 %v1_11f08, i32* @r1, align 4
  store i32 384, i32* @r2, align 4
  %v3_11f10 = call i32 @function_13ac0(i32 %.pre, i32 %v1_11f08, i32 384)
  store i32 %v3_11f10, i32* %r0.global-to-local, align 4
  %v0_11f14 = load i32, i32* @r5, align 4
  %v1_11f14 = add i32 %v0_11f14, 24
  %v2_11f14 = inttoptr i32 %v1_11f14 to i32*
  %v3_11f14 = load i32, i32* %v2_11f14, align 4
  store i32 %v3_11f14, i32* %r3.global-to-local, align 4
  %v1_11f18 = add i32 %v3_11f14, -128
  store i32 %v1_11f18, i32* %ip.global-to-local, align 4
  store i32 %v1_11f18, i32* %v2_11f14, align 4
  br label %dec_label_pc_11504

dec_label_pc_11f24:                               ; preds = %dec_label_pc_11e0c
  store i32 %v0_11e3c, i32* @r0, align 4
  %v0_11f28 = call i32 @function_10440()
  store i32 %v0_11f28, i32* %r0.global-to-local, align 4
  %v0_11f2c = load i32, i32* @r5, align 4
  %v1_11f2c = add i32 %v0_11f2c, 24
  %v2_11f2c = inttoptr i32 %v1_11f2c to i32*
  %v3_11f2c = load i32, i32* %v2_11f2c, align 4
  store i32 %v3_11f2c, i32* %ip.global-to-local, align 4
  %v0_11f30 = load i32, i32* @r4, align 4
  store i32 %v0_11f30, i32* @r7, align 4
  br label %dec_label_pc_11cd4

dec_label_pc_11f38:                               ; preds = %dec_label_pc_112dc, %dec_label_pc_112c0
  %v0_11f38 = load i32, i32* @r7, align 4
  %v1_11f38 = load i32, i32* @r4, align 4
  %v2_11f38 = add i32 %v1_11f38, 12
  %v3_11f38 = inttoptr i32 %v2_11f38 to i32*
  store i32 %v0_11f38, i32* %v3_11f38, align 4
  %v0_11f3c = load i32, i32* @r7, align 4
  %v1_11f3c = trunc i32 %v0_11f3c to i8
  %v2_11f3c = load i32, i32* @r4, align 4
  %v3_11f3c = add i32 %v2_11f3c, 540
  %v4_11f3c = inttoptr i32 %v3_11f3c to i8*
  store i8 %v1_11f3c, i8* %v4_11f3c, align 1
  br label %bb309

dec_label_pc_11f44:                               ; preds = %dec_label_pc_11468, %dec_label_pc_11420
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11f48

dec_label_pc_11f48:                               ; preds = %dec_label_pc_11490, %dec_label_pc_11f44
  %v0_11f50 = phi i32 [ 0, %dec_label_pc_11f44 ], [ %v0_11470, %dec_label_pc_11490 ]
  %v0_11f48 = load i32, i32* @r5, align 4
  %v1_11f48 = add i32 %v0_11f48, 4
  %v2_11f48 = inttoptr i32 %v1_11f48 to i32*
  %v3_11f48 = load i32, i32* %v2_11f48, align 4
  store i32 %v3_11f48, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_11f50 = inttoptr i32 %v0_11f48 to i32*
  store i32 %v0_11f50, i32* %v2_11f50, align 4
  %v0_11f54 = load i32, i32* %ip.global-to-local, align 4
  %v1_11f54 = load i32, i32* @r5, align 4
  %v2_11f54 = add i32 %v1_11f54, 24
  %v3_11f54 = inttoptr i32 %v2_11f54 to i32*
  store i32 %v0_11f54, i32* %v3_11f54, align 4
  %v0_11360.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_11360

dec_label_pc_11f5c:                               ; preds = %dec_label_pc_113e0
  %v0_11f5c = load i32, i32* @r5, align 4
  %v1_11f5c = add i32 %v0_11f5c, 4
  %v2_11f5c = inttoptr i32 %v1_11f5c to i32*
  %v3_11f5c = load i32, i32* %v2_11f5c, align 4
  store i32 %v3_11f5c, i32* %r0.global-to-local, align 4
  %v1_11f60 = call i32 @function_13490(i32 %v3_11f5c)
  store i32 %v1_11f60, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_11f68 = load i32, i32* @r6, align 4
  %v1_11f68 = load i32, i32* @r5, align 4
  %v2_11f68 = add i32 %v1_11f68, 12
  %v3_11f68 = inttoptr i32 %v2_11f68 to i32*
  store i32 %v0_11f68, i32* %v3_11f68, align 4
  %v0_11f6c = load i32, i32* %r4.global-to-local, align 4
  %v1_11f6c = load i32, i32* @r5, align 4
  %v2_11f6c = add i32 %v1_11f6c, 4
  %v3_11f6c = inttoptr i32 %v2_11f6c to i32*
  store i32 %v0_11f6c, i32* %v3_11f6c, align 4
  %v0_11f70 = load i32, i32* @r6, align 4
  %v1_11f70 = trunc i32 %v0_11f70 to i8
  %v2_11f70 = load i32, i32* @r5, align 4
  %v3_11f70 = add i32 %v2_11f70, 540
  %v4_11f70 = inttoptr i32 %v3_11f70 to i8*
  store i8 %v1_11f70, i8* %v4_11f70, align 1
  br label %dec_label_pc_11384

dec_label_pc_11f78:                               ; preds = %dec_label_pc_11e58
  store i32 %stack_var_-1868.0, i32* %r1.global-to-local, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 104, i32* %v2_1150c, align 4
  br label %dec_label_pc_11e74

dec_label_pc_11f88:                               ; preds = %dec_label_pc_11c90
  store i32 2, i32* @r5, align 4
  %v1_11f8c = add i32 %v2_11cac, 4
  %v2_11f8c = inttoptr i32 %v1_11f8c to i32*
  %v3_11f8c = load i32, i32* %v2_11f8c, align 4
  store i32 %v3_11f8c, i32* @r4, align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v0_11f98 = call i32 @function_fbfc()
  store i32 %v0_11f98, i32* %r0.global-to-local, align 4
  %v0_11f9c = load i32, i32* @r8, align 4
  %v1_11f9c = inttoptr i32 %v0_11f9c to i8*
  %v2_11f9c = load i8, i8* %v1_11f9c, align 1
  %v3_11f9c = zext i8 %v2_11f9c to i32
  store i32 %v3_11f9c, i32* %r1.global-to-local, align 4
  %v2_11fa0 = call i32 @function_131ec(i32 %v0_11f98, i32 %v3_11f9c)
  store i32 %v2_11fa0, i32* %r0.global-to-local, align 4
  %v0_11fa4 = load i32, i32* @r4, align 4
  %v2_11fa4 = and i32 %v2_11fa0, 1073741824
  %v3_11fa4 = icmp ne i32 %v2_11fa4, 0
  store i1 %v3_11fa4, i1* %cpsr_c.global-to-local, align 1
  %v4_11fa4 = mul i32 %v2_11fa0, 4
  %v5_11fa4 = add i32 %v0_11fa4, %v4_11fa4
  %v6_11fa4 = inttoptr i32 %v5_11fa4 to i32*
  %v7_11fa4 = load i32, i32* %v6_11fa4, align 4
  store i32 %v7_11fa4, i32* %r3.global-to-local, align 4
  %v0_11fa8 = load i32, i32* @sl, align 4
  store i32 %v0_11fa8, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r0.global-to-local, align 4
  %v2_11fb4 = inttoptr i32 %v0_11fa8 to i32*
  %v3_11fb4 = call i32 @function_120c0(i32 19, i32* %v2_11fb4)
  %v4_11fb4 = inttoptr i32 %v3_11fb4 to i8*
  store i32 %v3_11fb4, i32* %r0.global-to-local, align 4
  %v2_11fb8 = add i32 %v3_11fb4, 1
  %v3_11fb8 = inttoptr i32 %v2_11fb8 to i8*
  %v4_11fb8 = load i8, i8* %v3_11fb8, align 1
  %v5_11fb8 = zext i8 %v4_11fb8 to i32
  store i32 %v5_11fb8, i32* %r2.global-to-local, align 4
  %v3_11fbc = load i8, i8* %v4_11fb4, align 1
  %v4_11fbc = zext i8 %v3_11fbc to i32
  %v4_11fc0 = mul nuw nsw i32 %v5_11fb8, 256
  %v5_11fc0 = or i32 %v4_11fbc, %v4_11fc0
  store i32 %v5_11fc0, i32* %r3.global-to-local, align 4
  %v1_11fc4 = and i32 %v4_11fbc, 128
  %v2_11fc4 = icmp ne i32 %v1_11fc4, 0
  store i1 %v2_11fc4, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_11fb8, i32* %r1.global-to-local, align 4
  %v0_11fc8 = load i32, i32* @r8, align 4
  store i32 %v0_11fc8, i32* %r0.global-to-local, align 4
  %v6_11fd4 = call i32 @function_febc(i32 %v0_11fc8)
  store i32 18, i32* %r0.global-to-local, align 4
  %v1_11fdc = call i32 @function_120ec(i32 18)
  store i32 19, i32* %r0.global-to-local, align 4
  %v1_11fe4 = call i32 @function_120ec(i32 19)
  %v0_11fec = load i32, i32* @r6, align 4
  store i32 %v0_11fec, i32* %r0.global-to-local, align 4
  %v2_11ff0 = ptrtoint i32* %stack_var_-92 to i32
  store i32 %v2_11ff0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_11ff8 = bitcast i32* %stack_var_-92 to %sockaddr*
  %v4_11ff8 = call i32 @function_13bec(i32 %v0_11fec, %sockaddr* %v3_11ff8, i32 16)
  store i32 %v4_11ff8, i32* %r0.global-to-local, align 4
  %v3_11ffc = icmp eq i32 %v4_11ff8, -1
  store i1 %v3_11ffc, i1* %cpsr_c.global-to-local, align 1
  %v8_11ffc = icmp eq i32 %v4_11ff8, -1
  store i1 %v8_11ffc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11ffc, label %dec_label_pc_12004, label %dec_label_pc_12014

dec_label_pc_12004:                               ; preds = %dec_label_pc_11f88
  %v0_12004 = load i32, i32* @r6, align 4
  store i32 %v0_12004, i32* %r0.global-to-local, align 4
  %v1_12008 = call i32 @function_13490(i32 %v0_12004)
  %v0_1200c = load i32, i32* @sl, align 4
  store i32 %v0_1200c, i32* %r0.global-to-local, align 4
  %v1_12010 = call i32 @function_14830(i32 %v0_1200c)
  store i32 %v1_12010, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12014

dec_label_pc_12014:                               ; preds = %dec_label_pc_11f88, %dec_label_pc_12004
  store i32 %v2_11938, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12024 = load i32, i32* @r6, align 4
  store i32 %v0_12024, i32* %r0.global-to-local, align 4
  %v0_12028 = load i32, i32* @sl, align 4
  store i32 %v0_12028, i32* %stack_var_-56, align 4
  %v6_1202c = call i32 @function_13d00(i32 %v0_12024, i32* nonnull %stack_var_-56, i32 1, i32 16384)
  store i32 %v2_119ec, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12040 = load i32, i32* @r6, align 4
  store i32 %v0_12040, i32* %r0.global-to-local, align 4
  %v5_12044 = call i32 @function_13d00(i32 %v0_12040, i32* nonnull %stack_var_-48, i32 4, i32 16384)
  %v0_1204c = load i32, i32* @r5, align 4
  store i32 %v0_1204c, i32* %r2.global-to-local, align 4
  %v2_12050 = ptrtoint i32* %stack_var_-38 to i32
  store i32 %v2_12050, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12058 = load i32, i32* @r6, align 4
  store i32 %v0_12058, i32* %r0.global-to-local, align 4
  %v5_1205c = call i32 @function_13d00(i32 %v0_12058, i32* nonnull %stack_var_-38, i32 %v0_1204c, i32 16384)
  %v0_12060 = load i32, i32* @fp, align 4
  %v1_12060 = add i32 %v0_12060, 12
  store i32 %v1_12060, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1206c = load i32, i32* @r6, align 4
  store i32 %v0_1206c, i32* %r0.global-to-local, align 4
  %v4_12070 = inttoptr i32 %v1_12060 to i32*
  %v5_12070 = call i32 @function_13d00(i32 %v0_1206c, i32* %v4_12070, i32 1, i32 16384)
  store i32 %v5_12070, i32* %r0.global-to-local, align 4
  %v0_12074 = load i32, i32* @fp, align 4
  %v1_12074 = inttoptr i32 %v0_12074 to i32*
  %v2_12074 = load i32, i32* %v1_12074, align 4
  store i32 %v2_12074, i32* %r1.global-to-local, align 4
  %v1_12078 = add i32 %v0_12074, 12
  %v2_12078 = inttoptr i32 %v1_12078 to i8*
  %v3_12078 = load i8, i8* %v2_12078, align 1
  %v4_12078 = zext i8 %v3_12078 to i32
  store i32 %v4_12078, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12080 = load i32, i32* @r6, align 4
  store i32 %v0_12080, i32* %r0.global-to-local, align 4
  %v4_12084 = inttoptr i32 %v2_12074 to i32*
  %v5_12084 = call i32 @function_13d00(i32 %v0_12080, i32* %v4_12084, i32 %v4_12078, i32 16384)
  %v0_12088 = load i32, i32* @fp, align 4
  %v1_12088 = add i32 %v0_12088, 13
  store i32 %v1_12088, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12094 = load i32, i32* @r6, align 4
  store i32 %v0_12094, i32* %r0.global-to-local, align 4
  %v4_12098 = inttoptr i32 %v1_12088 to i32*
  %v5_12098 = call i32 @function_13d00(i32 %v0_12094, i32* %v4_12098, i32 1, i32 16384)
  %v0_1209c = load i32, i32* @r6, align 4
  store i32 %v0_1209c, i32* %r0.global-to-local, align 4
  %v0_120a0 = load i32, i32* @fp, align 4
  %v1_120a0 = add i32 %v0_120a0, 13
  %v2_120a0 = inttoptr i32 %v1_120a0 to i8*
  %v3_120a0 = load i8, i8* %v2_120a0, align 1
  %v4_120a0 = zext i8 %v3_120a0 to i32
  store i32 %v4_120a0, i32* %r2.global-to-local, align 4
  %v1_120a4 = add i32 %v0_120a0, 4
  %v2_120a4 = inttoptr i32 %v1_120a4 to i32*
  %v3_120a4 = load i32, i32* %v2_120a4, align 4
  store i32 %v3_120a4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_120ac = inttoptr i32 %v3_120a4 to i32*
  %v5_120ac = call i32 @function_13d00(i32 %v0_1209c, i32* %v4_120ac, i32 %v4_120a0, i32 16384)
  %v0_120b0 = load i32, i32* @r6, align 4
  store i32 %v0_120b0, i32* %r0.global-to-local, align 4
  %v1_120b4 = call i32 @function_13490(i32 %v0_120b0)
  store i32 %v1_120b4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_120b8

dec_label_pc_120b8:                               ; preds = %dec_label_pc_11c74, %dec_label_pc_12014
  %v0_120b8 = load i32, i32* @sl, align 4
  store i32 %v0_120b8, i32* %r0.global-to-local, align 4
  %v1_120bc = call i32 @function_14830(i32 %v0_120b8)
  store i32 %v1_120bc, i32* %r0.global-to-local, align 4
  ret i32 %v1_120bc

; uselistorder directives
  uselistorder i32 %v4_11fbc, { 1, 0 }
  uselistorder i32 %v5_11fb8, { 1, 0, 2 }
  uselistorder i32 %v2_11fa0, { 1, 0, 2 }
  uselistorder i32 %v3_11ef0, { 1, 0 }
  uselistorder i32 %v5_11ec4, { 2, 0, 3, 4, 1 }
  uselistorder i1 %v1_11e94, { 1, 0 }
  uselistorder i32 %v1_11e84, { 2, 1, 0 }
  uselistorder i32 %v1_11e80, { 1, 0 }
  uselistorder i32 %v0_11e3c, { 1, 0, 2 }
  uselistorder i32 %v1_11e24, { 2, 1, 0 }
  uselistorder i32 %v0_11dd0, { 1, 2, 0 }
  uselistorder i1 %v7_11d44, { 1, 0 }
  uselistorder i32 %v1_11d40, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11d38, { 1, 0 }
  uselistorder i8 %v3_11d30, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11d40, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11d1c, { 1, 0 }
  uselistorder i1 %v7_11d14, { 1, 0 }
  uselistorder i1 %v7_11d0c, { 1, 0 }
  uselistorder i32 %v0_11ce8, { 1, 2, 0 }
  uselistorder i32 %v2_11cd4, { 1, 0 }
  uselistorder i32 %v1_11cd4, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_11cd4, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i1 %v7_11c84, { 1, 0 }
  uselistorder i32 %v3_11c80, { 1, 0, 2, 3 }
  uselistorder i1 %v2_11c6c, { 1, 0 }
  uselistorder i32 %.350, { 1, 0 }
  uselistorder i1 %v7_11c54, { 1, 0 }
  uselistorder i32 %v0_11c50, { 2, 1, 0, 3 }
  uselistorder i32 %v4_11c30, { 1, 0, 2 }
  uselistorder i32 %v4_11c2c, { 1, 0, 2 }
  uselistorder i1 %v7_11c1c, { 1, 0 }
  uselistorder i32 %v0_11c1c, { 3, 2, 0, 4, 1 }
  uselistorder i1 %v7_11b38, { 1, 0 }
  uselistorder i32 %v1_11b34, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11b2c, { 1, 0 }
  uselistorder i8 %v3_11b24, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11b34, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11b10, { 1, 0 }
  uselistorder i1 %v7_11b08, { 1, 0 }
  uselistorder i1 %v7_11b00, { 1, 0 }
  uselistorder i1 %v7_11a84, { 1, 0 }
  uselistorder i32 %v1_11a80, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11a78, { 1, 0 }
  uselistorder i8 %v3_11a70, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11a80, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11a5c, { 1, 0 }
  uselistorder i1 %v7_11a54, { 1, 0 }
  uselistorder i1 %v7_11a4c, { 1, 0 }
  uselistorder i1 %v7_119d0, { 1, 0 }
  uselistorder i32 %v1_119cc, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_119c4, { 1, 0 }
  uselistorder i8 %v3_119bc, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_119cc, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_119a8, { 1, 0 }
  uselistorder i1 %v7_119a0, { 1, 0 }
  uselistorder i1 %v7_11998, { 1, 0 }
  uselistorder i1 %v7_1191c, { 1, 0 }
  uselistorder i32 %v1_11918, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11910, { 1, 0 }
  uselistorder i8 %v3_11908, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11918, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_118f4, { 1, 0 }
  uselistorder i1 %v7_118ec, { 1, 0 }
  uselistorder i1 %v7_118e4, { 1, 0 }
  uselistorder i32 %v0_1188c, { 2, 1, 0 }
  uselistorder i1 %v7_11884, { 1, 0 }
  uselistorder i1 %v8_11878, { 1, 0 }
  uselistorder i8 %v3_11870, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_11880, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_1185c, { 1, 0 }
  uselistorder i1 %v7_11854, { 1, 0 }
  uselistorder i32 %v3_11840, { 1, 0, 2, 3 }
  uselistorder i32 %v0_117fc, { 2, 1, 0 }
  uselistorder i1 %v7_117f4, { 1, 0 }
  uselistorder i1 %v8_117e8, { 1, 0 }
  uselistorder i8 %v3_117e0, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_117f0, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_117cc, { 1, 0 }
  uselistorder i1 %v7_117c4, { 1, 0 }
  uselistorder i1 %v7_117bc, { 1, 0 }
  uselistorder i32 %v3_1168c, { 2, 3, 0, 1 }
  uselistorder i32 %v0_1167c.pre, { 0, 2, 1 }
  uselistorder i32 %v1_11664, { 1, 0 }
  uselistorder i32 %v1_11660, { 1, 0 }
  uselistorder i32 %v1_11658, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_11654, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_11654, { 0, 2, 1 }
  uselistorder i1 %v7_115fc, { 1, 0 }
  uselistorder i1 %v2_115e8, { 1, 0, 2 }
  uselistorder i1 %v2_115d0, { 1, 0, 2 }
  uselistorder i32 %v1_115f0, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_115c4, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_115ec, { 1, 0 }
  uselistorder i32 %v2_115f4, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v0_1156c, { 4, 19, 5, 17, 6, 18, 7, 16, 8, 15, 9, 14, 10, 13, 3, 0, 11, 12, 20, 2, 1 }
  uselistorder i32 %v1_11548, { 1, 2, 3, 0 }
  uselistorder i32 %v3_11544, { 1, 0 }
  uselistorder i32 %v5_11528, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v2_11514, { 1, 0, 2 }
  uselistorder i32 %v3_11510, { 1, 0, 2 }
  uselistorder i32 %v0_11f00, { 1, 0, 2 }
  uselistorder i32 %v5_114d8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v5_114b8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11470, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v3_11450, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_11444, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_113d0, { 2, 1, 0 }
  uselistorder i32 %v3_113cc, { 1, 0 }
  uselistorder i1 %v7_113b4, { 1, 0 }
  uselistorder i32 %v3_113b0, { 5, 4, 2, 1, 0, 6, 7, 3 }
  uselistorder i32 %v0_113a4, { 1, 0 }
  uselistorder i32 %v1_11388, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_11374, { 2, 1, 0 }
  uselistorder i32 %v3_11370, { 1, 0 }
  uselistorder i32 %v0_11374, { 1, 0 }
  uselistorder i32 %v2_119ec, { 0, 2, 3, 1 }
  uselistorder i32 %v2_11938, { 4, 5, 3, 2, 6, 7, 1, 0 }
  uselistorder i32 %v2_11dc4, { 1, 2, 0 }
  uselistorder i32 %v2_115b4, { 0, 2, 1 }
  uselistorder i32 %v1_11308, { 0, 1, 3, 2 }
  uselistorder i32 %v0_11308, { 0, 1, 3, 2 }
  uselistorder i32 %v1_112e4, { 2, 1, 0 }
  uselistorder i32 %v1_112e0, { 1, 0 }
  uselistorder i32 %v0_112b0, { 0, 2, 1 }
  uselistorder i32 %v1_112a8, { 1, 0 }
  uselistorder i1 %v7_11274, { 0, 3, 1, 2 }
  uselistorder i1 %v2_11274, { 1, 2, 0 }
  uselistorder i32 %v2_1126c, { 0, 3, 4, 2, 1 }
  uselistorder i32 %v0_11264, { 1, 0 }
  uselistorder i32 %v1_11248, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_1123c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_1123c, { 0, 2, 1 }
  uselistorder i32 %v1_1122c, { 1, 0 }
  uselistorder i32 %v3_11290, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %storemerge222, { 1, 0, 2 }
  uselistorder i32 %v2_1129c, { 0, 4, 1, 5, 2, 7, 3, 6 }
  uselistorder i32 %stack_var_-1868.0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_1117c, { 1, 0 }
  uselistorder i32 %v1_11168, { 1, 0 }
  uselistorder i32 %v1_11150, { 1, 2, 0 }
  uselistorder i32 %v0_1115c, { 0, 3, 2, 1 }
  uselistorder i32 %v0_11120, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 %v2_11114, { 2, 1, 0 }
  uselistorder i32 %v1_110f0, { 3, 1, 0, 4, 2 }
  uselistorder i1 %v2_110c8, { 1, 0 }
  uselistorder i32 %v4_11068, { 2, 3, 7, 0, 1, 5, 4, 6 }
  uselistorder i32 %v1_10fd0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_10ef0, { 0, 2, 1 }
  uselistorder i32 %v1_10eec, { 3, 2, 0, 1 }
  uselistorder i32 %v4_10ec8, { 1, 0 }
  uselistorder i1 %v2_10e38, { 1, 0 }
  uselistorder i1 %v3_10e1c, { 1, 0, 2 }
  uselistorder i1 %v2_10e08, { 1, 0 }
  uselistorder i1 %v2_10de4, { 1, 0 }
  uselistorder i32 %v1_10d94, { 14, 13, 12, 11, 15, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_10d80, { 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 20, 21, 22, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10d7c, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v4_10d6c, { 1, 0 }
  uselistorder i32 %v0_10d5c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_10d4c, { 1, 0 }
  uselistorder i32 %v0_1105c, { 0, 1, 2, 5, 6, 7, 9, 3, 4, 8, 10 }
  uselistorder i8* %stack_var_-1884.0, { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i32 %stack_var_-1872.0, { 0, 3, 2, 1 }
  uselistorder i32 %v4_108a0, { 1, 0 }
  uselistorder i32 %v0_10894, { 2, 0, 1, 3 }
  uselistorder i32 %v4_10840, { 1, 0 }
  uselistorder i32 %v0_10838, { 0, 1, 3, 2 }
  uselistorder i32 %v0_107e0, { 3, 2, 0, 1 }
  uselistorder i1 %v7_10784, { 1, 0 }
  uselistorder i32 %v3_1077c, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_10764, { 0, 2, 1 }
  uselistorder i32 %v0_1074c, { 2, 1, 0 }
  uselistorder i32 %v0_10728, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge229, { 1, 0 }
  uselistorder i32 %v0_106c0, { 3, 1, 2, 0, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-92, { 0, 4, 1, 2, 3, 5 }
  uselistorder i32* %stack_var_-64, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 4, 5, 3, 6, 2, 7, 0, 8, 9 }
  uselistorder i32* %stack_var_-56, { 0, 6, 7, 3, 8, 4, 9, 5, 10, 2, 11, 1, 12, 13 }
  uselistorder i32* %stack_var_-84, { 1, 0 }
  uselistorder i32* %stack_var_-38, { 0, 2, 1 }
  uselistorder i32 %tmp239, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32* %r5.global-to-local, { 3, 1, 2, 0, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 63, 64, 44, 36, 65, 66, 67, 68, 69, 13, 14, 45, 46, 47, 48, 0, 1, 2, 3, 15, 137, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 57, 58, 59, 42, 43, 49, 50, 51, 52, 53, 54, 55, 56, 70, 71, 72, 73, 74, 75, 60, 93, 76, 77, 79, 78, 80, 81, 82, 83, 84, 86, 88, 87, 85, 89, 90, 91, 92, 99, 94, 95, 96, 97, 101, 100, 61, 103, 102, 62, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 136, 122, 123, 124, 125, 126, 127, 129, 128, 131, 130, 98, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145 }
  uselistorder i32* %r2.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 35, 31, 48, 36, 0, 1, 2, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 24, 23, 25, 27, 26, 28, 30, 29, 32, 34, 33, 40, 42, 41, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 43, 44, 56, 57, 58, 59, 60, 62, 64, 63, 45, 61, 65, 66, 67, 68, 72, 69, 70, 71, 73, 76, 75, 77, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 46, 47, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174 }
  uselistorder i32* %r1.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 45, 46, 39, 40, 36, 15, 16, 1, 2, 3, 151, 152, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 41, 42, 0, 47, 48, 49, 43, 44, 50, 51, 52, 54, 55, 53, 56, 57, 59, 58, 154, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153 }
  uselistorder i32* %r0.global-to-local, { 11, 10, 13, 12, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 26, 25, 27, 29, 28, 31, 30, 32, 33, 125, 124, 35, 126, 108, 111, 110, 100, 99, 127, 129, 128, 34, 37, 36, 38, 112, 1, 0, 2, 4, 3, 6, 5, 7, 8, 9, 115, 40, 39, 41, 43, 42, 44, 45, 47, 46, 48, 50, 49, 51, 53, 52, 54, 55, 56, 57, 58, 59, 61, 60, 63, 62, 65, 64, 66, 67, 68, 69, 71, 70, 73, 72, 75, 74, 76, 77, 78, 79, 81, 80, 83, 82, 85, 84, 86, 87, 88, 89, 91, 90, 93, 92, 95, 94, 96, 97, 98, 102, 101, 109, 103, 104, 105, 117, 116, 119, 118, 106, 107, 114, 113, 133, 130, 131, 121, 120, 122, 123, 132, 135, 134, 136, 137, 139, 138, 140, 146, 141, 142, 145, 143, 144, 147, 149, 150, 148, 251, 151, 152, 248, 153, 154, 250, 155, 234, 156, 157, 158, 160, 159, 161, 162, 164, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 237, 236, 239, 238, 240, 244, 243, 241, 242, 245, 246, 249, 247 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %ip.global-to-local, { 23, 24, 2, 25, 3, 16, 0, 1, 20, 4, 5, 7, 6, 9, 8, 11, 10, 12, 13, 14, 19, 15, 21, 17, 18, 26, 27, 28, 29, 30, 31, 34, 32, 33, 35, 22, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i1* %cpsr_z.global-to-local, { 9, 55, 104, 105, 106, 107, 108, 10, 11, 72, 73, 74, 75, 76, 0, 1, 6, 7, 2, 3, 4, 5, 8, 91, 12, 13, 14, 192, 15, 16, 17, 18, 19, 20, 25, 26, 21, 22, 23, 24, 27, 28, 29, 34, 35, 30, 31, 32, 33, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 56, 57, 61, 62, 58, 59, 60, 63, 93, 64, 69, 70, 65, 66, 67, 68, 71, 92, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 101, 109, 110, 111, 112, 113, 114, 151, 103, 94, 95, 115, 117, 116, 118, 119, 121, 123, 122, 102, 120, 124, 125, 126, 127, 128, 129, 134, 130, 131, 132, 133, 98, 99, 96, 97, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 191, 171, 172, 173, 174, 175, 190, 176, 177, 178, 189, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 193, 194, 195, 100, 196 }
  uselistorder i1* %cpsr_c.global-to-local, { 9, 10, 11, 57, 105, 104, 106, 107, 108, 12, 74, 75, 76, 77, 0, 1, 6, 7, 2, 3, 4, 5, 8, 90, 13, 14, 15, 189, 16, 17, 18, 19, 20, 21, 22, 27, 28, 23, 24, 25, 26, 29, 30, 31, 36, 37, 32, 33, 34, 35, 38, 39, 40, 45, 46, 41, 42, 43, 44, 47, 48, 49, 54, 55, 50, 51, 52, 53, 56, 58, 59, 63, 64, 60, 61, 62, 65, 92, 66, 71, 72, 67, 68, 69, 70, 73, 91, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 101, 109, 110, 111, 112, 113, 114, 100, 102, 93, 94, 115, 117, 116, 118, 119, 121, 123, 122, 103, 120, 124, 125, 126, 127, 128, 133, 129, 130, 131, 132, 97, 98, 95, 134, 96, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 188, 166, 167, 168, 169, 170, 187, 171, 172, 173, 186, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 190, 191, 192, 193, 194, 99, 195 }
  uselistorder i32 (i32)* @function_febc, { 1, 0 }
  uselistorder i32 104, { 0, 3, 1, 4, 2, 5 }
  uselistorder i8 31, { 7, 1, 2, 0, 3, 4, 8, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32 (i32)* @function_120ec, { 39, 38, 40, 37, 36, 35, 34, 33, 32, 31, 41, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32*)* @function_120c0, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 61, 62, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 56, 57, 58, 59 }
  uselistorder i32 (i32)* @function_121a4, { 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_15d50.33 to i32*), { 4, 2, 3, 1, 0, 6, 5 }
  uselistorder [3 x i8]* @global_var_15d50.33, { 1, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_15d50.33 to i32), { 16, 17, 18, 19, 20, 21, 22, 12, 23, 3, 24, 15, 25, 13, 26, 14, 27, 0, 28, 1, 29, 2, 30, 4, 31, 5, 32, 6, 33, 7, 34, 8, 35, 9, 36, 10, 37, 11, 38 }
  uselistorder i8 58, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 57, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 62, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 37, { 5, 3, 4, 2, 1, 0 }
  uselistorder i8 34, { 6, 4, 5, 3, 2, 1, 0, 7, 8, 9, 10 }
  uselistorder i8 36, { 11, 12, 7, 8, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i8 35, { 12, 13, 8, 9, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_13d00, { 2, 3, 4, 5, 6, 7, 8, 19, 0, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 20, 27, 23, 24, 25, 26, 28, 29, 30 }
  uselistorder i32 251, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 -3, { 1, 2, 3, 0 }
  uselistorder i8 -4, { 1, 2, 3, 0 }
  uselistorder i32 1073741824, { 2, 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_13ca0, { 5, 3, 4, 0, 1, 2, 6, 9, 7, 8 }
  uselistorder i32 (i32, i32, i32, i32)* @function_12b94, { 22, 24, 23, 21, 20, 19, 18, 17, 16, 2, 1, 0, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3 }
  uselistorder i8* bitcast (i8** @global_var_1ea90.173 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1ea91.174, { 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1ea90.173 to i32), { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32*, i32)* @function_13c44, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_136b0, { 1, 2, 3, 0 }
  uselistorder i32 540, { 3, 4, 5, 6, 0, 1, 2, 7 }
  uselistorder i32 1544, { 1, 0 }
  uselistorder i32 1672, { 2, 0, 1 }
  uselistorder i32 ()* @function_10440, { 3, 2, 1, 0 }
  uselistorder i32 254, { 8, 9, 10, 0, 1, 2, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i8 2, { 0, 4, 3, 2, 1 }
  uselistorder i32 5888, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_13ccc, { 2, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_13d2c, { 8, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 16384, { 32, 52, 33, 53, 34, 54, 35, 55, 36, 56, 37, 57, 13, 58, 12, 69, 11, 50, 0, 51, 1, 59, 2, 60, 3, 61, 4, 62, 5, 63, 6, 64, 7, 65, 8, 66, 30, 67, 31, 68, 28, 71, 29, 72, 27, 70, 38, 91, 9, 92, 10, 93, 14, 80, 39, 81, 16, 73, 42, 74, 41, 75, 43, 76, 44, 77, 15, 78, 40, 79, 17, 82, 18, 83, 19, 84, 45, 46, 20, 85, 21, 86, 23, 87, 22, 88, 24, 89, 25, 90, 48, 94, 49, 95, 26, 96, 47, 97 }
  uselistorder i32 (i32, i32, i32, i32)* @function_e480, { 0, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @function_132b8, { 1, 2, 0 }
  uselistorder i32 (i32, i32)* @function_e424, { 0, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i8* @global_var_1ea74.310, { 2, 1, 0 }
  uselistorder i32 16711680, { 3, 0, 1, 2 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 223, { 3, 0, 1, 2 }
  uselistorder i32 192, { 2, 0, 1 }
  uselistorder i32 127, { 5, 0, 6, 3, 7, 1, 8, 2, 9, 4, 10 }
  uselistorder i32 126, { 11, 5, 0, 6, 1, 7, 2, 8, 3, 9, 4, 10 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_15e78.300 to i32), { 0, 6, 1, 7, 2, 3, 4, 8, 5, 9 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15e70.298 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_15e68.296 to i32), { 0, 5, 1, 6, 2, 3, 4, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_15d78.274 to i32), { 0, 5, 1, 6, 2, 7, 3, 8, 4, 9 }
  uselistorder i32 ptrtoint (i32* @global_var_15fbc.262 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([9 x i8]* @global_var_15f98.256 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15f78.248 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_15f70.246 to i32), { 0, 19, 1, 20, 2, 21, 3, 22, 4, 23, 5, 24, 6, 7, 8, 25, 9, 26, 10, 27, 11, 28, 12, 29, 13, 30, 14, 31, 15, 32, 16, 33, 17, 34, 18, 35 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_15f30.230 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_15f04.222 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_15ee8.216 to i32), { 0, 5, 1, 6, 2, 7, 3, 8, 4, 9 }
  uselistorder i32 ptrtoint (i32* @global_var_15ee0.214 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_15ed8.212 to i32), { 0, 1, 2, 7, 3, 8, 4, 9, 5, 10, 6, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_15ecc.208 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 (i32, i32, i32)* @function_10514, { 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_15ec0.202 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15eb8.200 to i32), { 0, 35, 1, 36, 2, 37, 3, 38, 4, 39, 5, 40, 6, 41, 7, 42, 8, 43, 9, 44, 10, 45, 11, 46, 12, 47, 13, 48, 14, 49, 15, 50, 16, 51, 17, 52, 18, 53, 19, 54, 20, 55, 21, 56, 22, 57, 23, 58, 24, 59, 25, 60, 26, 61, 27, 62, 28, 63, 29, 64, 30, 65, 31, 32, 33, 66, 34, 67 }
  uselistorder i8* @global_var_1ea85.196, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1ea78.187 to i32), { 3, 2, 4, 5, 0, 6, 1, 7, 8 }
  uselistorder i8 64, { 6, 0, 1, 7, 2, 3, 4, 5 }
  uselistorder i8* @global_var_1ea84.188, { 1, 0 }
  uselistorder i8** @global_var_1ea64.183, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1ea64.183 to i32), { 0, 2, 1, 9, 8, 3, 7, 6, 5, 4 }
  uselistorder i32 1024, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 1023, { 4, 0, 1, 2, 5, 3, 6 }
  uselistorder i32 65280, { 49, 1, 15, 0, 2, 29, 3, 30, 22, 23, 4, 31, 16, 24, 32, 33, 5, 6, 34, 17, 7, 35, 25, 18, 19, 26, 27, 28, 36, 37, 38, 8, 39, 9, 10, 40, 11, 41, 42, 20, 43, 44, 12, 45, 46, 21, 47, 48, 13, 50, 14, 51 }
  uselistorder i32 ()* @function_fbfc, { 69, 12, 11, 10, 9, 8, 7, 65, 68, 67, 66, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 2, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32*, i32)* @function_13d60, { 8, 0, 1, 2, 3, 4, 9, 5, 6, 7, 10 }
  uselistorder i32 2048, { 14, 13, 5, 8, 9, 0, 1, 2, 3, 7, 10, 6, 11, 4, 12, 15 }
  uselistorder i32* @global_var_1eafc.181, { 1, 5, 2, 3, 4, 0 }
  uselistorder i32* @global_var_1eaf8.179, { 1, 2, 3, 4, 0 }
  uselistorder i32 544, { 1, 2, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1ea94.167, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32*)* @function_13760, { 4, 5, 6, 0, 1, 2, 3, 7, 8, 9 }
  uselistorder i32* @global_var_1eadc.85, { 3, 4, 2, 0, 5, 1, 6, 13, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 ()* @function_12d88, { 0, 2, 1 }
  uselistorder i32* @global_var_1eb00.165, { 0, 2, 1 }
  uselistorder i32 ()* @function_134bc, { 5, 2, 4, 3, 1, 0 }
  uselistorder i32* @fp, { 3, 4, 5, 6, 7, 48, 49, 41, 42, 43, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 38, 39, 40, 44, 2, 45, 46, 47 }
  uselistorder i32* @sl, { 2, 3, 4, 5, 6, 7, 83, 84, 67, 68, 69, 8, 9, 10, 11, 14, 12, 13, 1, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 0, 104, 105, 106, 107 }
  uselistorder i32* @sb, { 3, 4, 7, 1, 2, 5, 6, 59, 58, 8, 9, 60, 61, 49, 50, 51, 10, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 56, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71 }
  uselistorder label %dec_label_pc_120b8, { 1, 0 }
  uselistorder label %dec_label_pc_12014, { 1, 0 }
  uselistorder label %dec_label_pc_11f48, { 1, 0 }
  uselistorder label %dec_label_pc_11eb4, { 2, 0, 1 }
  uselistorder label %bb346, { 1, 0 }
  uselistorder label %dec_label_pc_11e74, { 1, 0 }
  uselistorder label %dec_label_pc_11d40, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11d2c, { 1, 0 }
  uselistorder label %dec_label_pc_11cd4, { 2, 3, 1, 11, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder label %dec_label_pc_11cb8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11b34, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11b20, { 1, 0 }
  uselistorder label %dec_label_pc_11a80, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11a6c, { 1, 0 }
  uselistorder label %dec_label_pc_119cc, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_119b8, { 1, 0 }
  uselistorder label %dec_label_pc_11918, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11904, { 1, 0 }
  uselistorder label %dec_label_pc_1188c, { 1, 0 }
  uselistorder label %dec_label_pc_11880, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_1186c, { 1, 0 }
  uselistorder label %dec_label_pc_117f0, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_117dc, { 1, 0 }
  uselistorder label %dec_label_pc_1167c, { 1, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_1166c, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %bb320, { 2, 1, 0 }
  uselistorder label %bb317, { 2, 1, 0 }
  uselistorder label %dec_label_pc_115cc, { 1, 0 }
  uselistorder label %dec_label_pc_115cc.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_11554, { 1, 0 }
  uselistorder label %bb314, { 1, 0 }
  uselistorder label %dec_label_pc_11504, { 1, 0 }
  uselistorder label %dec_label_pc_114f4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_114ecthread-pre-split, { 4, 5, 3, 7, 2, 6, 1, 8, 0, 9 }
  uselistorder label %dec_label_pc_114ecthread-pre-split.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_114f4.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_114e8.loopexit, { 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_114a8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11384, { 6, 7, 3, 4, 0, 5, 1, 2 }
  uselistorder label %dec_label_pc_11360, { 1, 0 }
  uselistorder label %bb311, { 1, 0 }
  uselistorder label %bb309, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_111c8.dec_label_pc_111c8_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_111ac.dec_label_pc_111ac_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_111a4, { 3, 4, 0, 1, 2 }
  uselistorder label %dec_label_pc_1119c, { 1, 0 }
  uselistorder label %dec_label_pc_11150, { 1, 0 }
  uselistorder label %dec_label_pc_10ff0, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_10fe4, { 1, 0 }
  uselistorder label %.thread47, { 2, 1, 0 }
  uselistorder label %.thread45, { 1, 0 }
  uselistorder label %dec_label_pc_10e48, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10e24, { 1, 0 }
  uselistorder label %dec_label_pc_10e18, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10df4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10dd0, { 1, 0 }
  uselistorder label %bb279, { 1, 0 }
  uselistorder label %dec_label_pc_10d7c, { 22, 6, 7, 2, 8, 3, 9, 4, 10, 5, 11, 0, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 23 }
  uselistorder label %dec_label_pc_107e0, { 1, 0 }
}

define i32 @function_120c0(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_120c0:
  %v3_120c4 = mul i32 %arg1, 8
  %v2_120c8 = add i32 %v3_120c4, ptrtoint (i32* @global_var_1eb08.332 to i32)
  %v2_120cc = icmp eq i32* %arg2, null
  br i1 %v2_120cc, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_120c0
  %v3_120d811 = inttoptr i32 %v2_120c8 to i32*
  %v4_120d812 = load i32, i32* %v3_120d811, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_120c0
  %v2_120d0 = add i32 %v3_120c4, add (i32 ptrtoint (i32* @global_var_1eb08.332 to i32), i32 5)
  %v3_120d0 = inttoptr i32 %v2_120d0 to i8*
  %v4_120d0 = load i8, i8* %v3_120d0, align 1
  %v5_120d0 = zext i8 %v4_120d0 to i32
  store i32 %v5_120d0, i32* @r2, align 4
  %v2_120d4 = add i32 %v3_120c4, add (i32 ptrtoint (i32* @global_var_1eb08.332 to i32), i32 4)
  %v3_120d4 = inttoptr i32 %v2_120d4 to i8*
  %v4_120d4 = load i8, i8* %v3_120d4, align 4
  %v5_120d4 = zext i8 %v4_120d4 to i32
  %v3_120d8 = inttoptr i32 %v2_120c8 to i32*
  %v4_120d8 = load i32, i32* %v3_120d8, align 4
  %v5_120dc = mul nuw nsw i32 %v5_120d0, 256
  %v6_120dc = or i32 %v5_120d4, %v5_120dc
  store i32 %v6_120dc, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_120d8714 = phi i32 [ %v4_120d812, %.thread ], [ %v4_120d8, %bb ]
  ret i32 %v4_120d8714

; uselistorder directives
  uselistorder i32 %v2_120c8, { 1, 0 }
  uselistorder i32 %v3_120c4, { 2, 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_120ec(i32 %arg1) local_unnamed_addr {
dec_label_pc_120ec:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_120ec = mul i32 %arg1, 8
  %v3_120f0 = load i32, i32* @r4, align 4
  store i32 %v3_120f0, i32* %stack_var_-20, align 4
  %v3_12100 = and i32 %v3_120ec, 2040
  %v2_12104 = add i32 %v3_12100, ptrtoint (i32* @global_var_1eb08.332 to i32)
  store i32 %v2_12104, i32* @lr, align 4
  %v1_1210c = add i32 %v3_12100, add (i32 ptrtoint (i32* @global_var_1eb08.332 to i32), i32 4)
  store i32 %v1_1210c, i32* %r7.global-to-local, align 4
  %v2_12110 = load i32, i32* @global_var_1e8bc.335, align 4
  %v2_12114 = inttoptr i32 %v1_1210c to i8*
  %v3_12114 = load i8, i8* %v2_12114, align 4
  %v4_12114 = zext i8 %v3_12114 to i32
  store i32 %v4_12114, i32* @r1, align 4
  %v1_12118 = add i32 %v3_12100, add (i32 ptrtoint (i32* @global_var_1eb08.332 to i32), i32 5)
  %v2_12118 = inttoptr i32 %v1_12118 to i8*
  %v3_12118 = load i8, i8* %v2_12118, align 1
  %v4_12118 = zext i8 %v3_12118 to i32
  %v3_1211c = udiv i32 %v2_12110, 256
  %v4_12120 = mul nuw nsw i32 %v4_12118, 256
  %v5_12120 = or i32 %v4_12120, %v4_12114
  %v7_12120 = icmp eq i32 %v5_12120, 0
  store i1 %v7_12120, i1* @cpsr_z, align 1
  %v3_12124 = udiv i32 %v2_12110, 65536
  %v1_12128 = urem i32 %v3_1211c, 256
  store i32 %v1_12128, i32* %r6.global-to-local, align 4
  %v1_1212c = urem i32 %v3_12124, 256
  store i32 %v1_1212c, i32* %r5.global-to-local, align 4
  %v3_12130 = udiv i32 %v2_12110, 16777216
  store i32 %v3_12130, i32* %r4.global-to-local, align 4
  %v1_12134 = urem i32 %v2_12110, 256
  br i1 %v7_12120, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_120ec
  store i32 %v3_120f0, i32* @r4, align 4
  ret i32 %v1_12134

bb8:                                              ; preds = %dec_label_pc_120ec
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12140

dec_label_pc_12140:                               ; preds = %dec_label_pc_12140, %bb8
  %v2_1214c = phi i32 [ %v1_12188, %dec_label_pc_12140 ], [ 0, %bb8 ]
  %v0_12140 = phi i32 [ %v0_12180, %dec_label_pc_12140 ], [ %v2_12104, %bb8 ]
  %v1_12140 = inttoptr i32 %v0_12140 to i32*
  %v2_12140 = load i32, i32* %v1_12140, align 4
  %v2_12144 = add i32 %v2_12140, %v2_1214c
  %v3_12144 = inttoptr i32 %v2_12144 to i8*
  %v4_12144 = load i8, i8* %v3_12144, align 1
  %v6_12144 = zext i8 %v4_12144 to i32
  %v2_12148 = xor i32 %v6_12144, %v1_12134
  %v1_1214c = trunc i32 %v2_12148 to i8
  store i8 %v1_1214c, i8* %v3_12144, align 1
  %v0_12150 = load i32, i32* @lr, align 4
  %v1_12150 = inttoptr i32 %v0_12150 to i32*
  %v2_12150 = load i32, i32* %v1_12150, align 4
  %v0_12154 = load i32, i32* %ip.global-to-local, align 4
  %v2_12154 = add i32 %v0_12154, %v2_12150
  %v3_12154 = inttoptr i32 %v2_12154 to i8*
  %v4_12154 = load i8, i8* %v3_12154, align 1
  %v6_12154 = zext i8 %v4_12154 to i32
  %v0_12158 = load i32, i32* %r6.global-to-local, align 4
  %v2_12158 = xor i32 %v0_12158, %v6_12154
  %v1_1215c = trunc i32 %v2_12158 to i8
  store i8 %v1_1215c, i8* %v3_12154, align 1
  %v0_12160 = load i32, i32* @lr, align 4
  %v1_12160 = inttoptr i32 %v0_12160 to i32*
  %v2_12160 = load i32, i32* %v1_12160, align 4
  %v0_12164 = load i32, i32* %ip.global-to-local, align 4
  %v2_12164 = add i32 %v0_12164, %v2_12160
  %v3_12164 = inttoptr i32 %v2_12164 to i8*
  %v4_12164 = load i8, i8* %v3_12164, align 1
  %v6_12164 = zext i8 %v4_12164 to i32
  %v0_12168 = load i32, i32* %r5.global-to-local, align 4
  %v2_12168 = xor i32 %v0_12168, %v6_12164
  %v1_1216c = trunc i32 %v2_12168 to i8
  store i8 %v1_1216c, i8* %v3_12164, align 1
  %v0_12170 = load i32, i32* @lr, align 4
  %v1_12170 = inttoptr i32 %v0_12170 to i32*
  %v2_12170 = load i32, i32* %v1_12170, align 4
  store i32 %v2_12170, i32* @r1, align 4
  %v0_12174 = load i32, i32* %ip.global-to-local, align 4
  %v2_12174 = add i32 %v0_12174, %v2_12170
  %v3_12174 = inttoptr i32 %v2_12174 to i8*
  %v4_12174 = load i8, i8* %v3_12174, align 1
  %v6_12174 = zext i8 %v4_12174 to i32
  %v0_12178 = load i32, i32* %r4.global-to-local, align 4
  %v2_12178 = xor i32 %v0_12178, %v6_12174
  %v1_1217c = trunc i32 %v2_12178 to i8
  store i8 %v1_1217c, i8* %v3_12174, align 1
  %v0_12180 = load i32, i32* @lr, align 4
  %v1_12180 = add i32 %v0_12180, 4
  %v2_12180 = inttoptr i32 %v1_12180 to i8*
  %v3_12180 = load i8, i8* %v2_12180, align 1
  %v4_12180 = zext i8 %v3_12180 to i32
  %v0_12184 = load i32, i32* %r7.global-to-local, align 4
  %v1_12184 = add i32 %v0_12184, 1
  %v2_12184 = inttoptr i32 %v1_12184 to i8*
  %v3_12184 = load i8, i8* %v2_12184, align 1
  %v4_12184 = zext i8 %v3_12184 to i32
  %v0_12188 = load i32, i32* %ip.global-to-local, align 4
  %v1_12188 = add i32 %v0_12188, 1
  store i32 %v1_12188, i32* %ip.global-to-local, align 4
  %v4_1218c = mul nuw nsw i32 %v4_12184, 256
  %v5_1218c = or i32 %v4_1218c, %v4_12180
  %v9_12190 = icmp eq i32 %v5_1218c, %v1_12188
  store i1 %v9_12190, i1* @cpsr_z, align 1
  %v8_12194 = icmp sgt i32 %v5_1218c, %v1_12188
  br i1 %v8_12194, label %dec_label_pc_12140, label %dec_label_pc_12198

dec_label_pc_12198:                               ; preds = %dec_label_pc_12140
  %v2_12198 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_12198, i32* @r4, align 4
  ret i32 %v1_12134

; uselistorder directives
  uselistorder i32 %v1_12188, { 1, 2, 3, 0 }
  uselistorder i32 %v0_12180, { 1, 0 }
  uselistorder i32 %v1_12134, { 0, 2, 1 }
  uselistorder i32 %v2_12110, { 3, 0, 1, 2 }
}

define i32 @function_121a4(i32 %arg1) local_unnamed_addr {
dec_label_pc_121a4:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_121a4 = mul i32 %arg1, 8
  %v3_121a8 = load i32, i32* @r4, align 4
  store i32 %v3_121a8, i32* %stack_var_-20, align 4
  %v3_121b8 = and i32 %v3_121a4, 2040
  %v2_121bc = add i32 %v3_121b8, ptrtoint (i32* @global_var_1eb08.332 to i32)
  store i32 %v2_121bc, i32* @lr, align 4
  %v1_121c4 = add i32 %v3_121b8, add (i32 ptrtoint (i32* @global_var_1eb08.332 to i32), i32 4)
  store i32 %v1_121c4, i32* %r7.global-to-local, align 4
  %v2_121c8 = load i32, i32* @global_var_1e8bc.335, align 4
  store i32 %v2_121c8, i32* @r2, align 4
  %v2_121cc = inttoptr i32 %v1_121c4 to i8*
  %v3_121cc = load i8, i8* %v2_121cc, align 4
  %v4_121cc = zext i8 %v3_121cc to i32
  %v1_121d0 = add i32 %v3_121b8, add (i32 ptrtoint (i32* @global_var_1eb08.332 to i32), i32 5)
  %v2_121d0 = inttoptr i32 %v1_121d0 to i8*
  %v3_121d0 = load i8, i8* %v2_121d0, align 1
  %v4_121d0 = zext i8 %v3_121d0 to i32
  %v3_121d4 = udiv i32 %v2_121c8, 256
  %v4_121d8 = mul nuw nsw i32 %v4_121d0, 256
  %v5_121d8 = or i32 %v4_121d8, %v4_121cc
  %v7_121d8 = icmp eq i32 %v5_121d8, 0
  %v3_121dc = udiv i32 %v2_121c8, 65536
  %v1_121e0 = urem i32 %v3_121d4, 256
  store i32 %v1_121e0, i32* %r6.global-to-local, align 4
  %v1_121e4 = urem i32 %v3_121dc, 256
  store i32 %v1_121e4, i32* %r5.global-to-local, align 4
  %v3_121e8 = udiv i32 %v2_121c8, 16777216
  store i32 %v3_121e8, i32* %r4.global-to-local, align 4
  %v1_121ec = urem i32 %v2_121c8, 256
  br i1 %v7_121d8, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_121a4
  store i32 %v3_121a8, i32* @r4, align 4
  ret i32 %v1_121ec

bb8:                                              ; preds = %dec_label_pc_121a4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_121f8

dec_label_pc_121f8:                               ; preds = %dec_label_pc_121f8, %bb8
  %v2_12204 = phi i32 [ %v1_12240, %dec_label_pc_121f8 ], [ 0, %bb8 ]
  %v0_121f8 = phi i32 [ %v0_12238, %dec_label_pc_121f8 ], [ %v2_121bc, %bb8 ]
  %v1_121f8 = inttoptr i32 %v0_121f8 to i32*
  %v2_121f8 = load i32, i32* %v1_121f8, align 4
  %v2_121fc = add i32 %v2_121f8, %v2_12204
  %v3_121fc = inttoptr i32 %v2_121fc to i8*
  %v4_121fc = load i8, i8* %v3_121fc, align 1
  %v6_121fc = zext i8 %v4_121fc to i32
  %v2_12200 = xor i32 %v6_121fc, %v1_121ec
  %v1_12204 = trunc i32 %v2_12200 to i8
  store i8 %v1_12204, i8* %v3_121fc, align 1
  %v0_12208 = load i32, i32* @lr, align 4
  %v1_12208 = inttoptr i32 %v0_12208 to i32*
  %v2_12208 = load i32, i32* %v1_12208, align 4
  %v0_1220c = load i32, i32* %ip.global-to-local, align 4
  %v2_1220c = add i32 %v0_1220c, %v2_12208
  %v3_1220c = inttoptr i32 %v2_1220c to i8*
  %v4_1220c = load i8, i8* %v3_1220c, align 1
  %v6_1220c = zext i8 %v4_1220c to i32
  %v0_12210 = load i32, i32* %r6.global-to-local, align 4
  %v2_12210 = xor i32 %v0_12210, %v6_1220c
  %v1_12214 = trunc i32 %v2_12210 to i8
  store i8 %v1_12214, i8* %v3_1220c, align 1
  %v0_12218 = load i32, i32* @lr, align 4
  %v1_12218 = inttoptr i32 %v0_12218 to i32*
  %v2_12218 = load i32, i32* %v1_12218, align 4
  %v0_1221c = load i32, i32* %ip.global-to-local, align 4
  %v2_1221c = add i32 %v0_1221c, %v2_12218
  %v3_1221c = inttoptr i32 %v2_1221c to i8*
  %v4_1221c = load i8, i8* %v3_1221c, align 1
  %v6_1221c = zext i8 %v4_1221c to i32
  %v0_12220 = load i32, i32* %r5.global-to-local, align 4
  %v2_12220 = xor i32 %v0_12220, %v6_1221c
  %v1_12224 = trunc i32 %v2_12220 to i8
  store i8 %v1_12224, i8* %v3_1221c, align 1
  %v0_12228 = load i32, i32* @lr, align 4
  %v1_12228 = inttoptr i32 %v0_12228 to i32*
  %v2_12228 = load i32, i32* %v1_12228, align 4
  %v0_1222c = load i32, i32* %ip.global-to-local, align 4
  %v2_1222c = add i32 %v0_1222c, %v2_12228
  %v3_1222c = inttoptr i32 %v2_1222c to i8*
  %v4_1222c = load i8, i8* %v3_1222c, align 1
  %v6_1222c = zext i8 %v4_1222c to i32
  %v0_12230 = load i32, i32* %r4.global-to-local, align 4
  %v2_12230 = xor i32 %v0_12230, %v6_1222c
  %v1_12234 = trunc i32 %v2_12230 to i8
  store i8 %v1_12234, i8* %v3_1222c, align 1
  %v0_12238 = load i32, i32* @lr, align 4
  %v1_12238 = add i32 %v0_12238, 4
  %v2_12238 = inttoptr i32 %v1_12238 to i8*
  %v3_12238 = load i8, i8* %v2_12238, align 1
  %v4_12238 = zext i8 %v3_12238 to i32
  %v0_1223c = load i32, i32* %r7.global-to-local, align 4
  %v1_1223c = add i32 %v0_1223c, 1
  %v2_1223c = inttoptr i32 %v1_1223c to i8*
  %v3_1223c = load i8, i8* %v2_1223c, align 1
  %v4_1223c = zext i8 %v3_1223c to i32
  %v0_12240 = load i32, i32* %ip.global-to-local, align 4
  %v1_12240 = add i32 %v0_12240, 1
  store i32 %v1_12240, i32* %ip.global-to-local, align 4
  %v4_12244 = mul nuw nsw i32 %v4_1223c, 256
  %v5_12244 = or i32 %v4_12244, %v4_12238
  store i32 %v5_12244, i32* @r2, align 4
  %v8_1224c = icmp sgt i32 %v5_12244, %v1_12240
  br i1 %v8_1224c, label %dec_label_pc_121f8, label %dec_label_pc_12250

dec_label_pc_12250:                               ; preds = %dec_label_pc_121f8
  %v2_12250 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_12250, i32* @r4, align 4
  ret i32 %v1_121ec

; uselistorder directives
  uselistorder i32 %v1_12240, { 1, 2, 0 }
  uselistorder i32 %v0_12238, { 1, 0 }
  uselistorder i32 %v1_121ec, { 0, 2, 1 }
  uselistorder i32 %v2_121c8, { 3, 0, 1, 2, 4 }
}

define i32 @function_1225c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1225c:
  %fp.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_1225c = load i32, i32* @r4, align 4
  store i32 %v3_1225c, i32* %stack_var_-36, align 4
  %v6_1225c = load i32, i32* @r5, align 4
  %v9_1225c = load i32, i32* @r6, align 4
  %v12_1225c = load i32, i32* @r7, align 4
  %v1_12264 = call i32 @function_13f40(i32 20)
  store i32 ptrtoint (i32* @global_var_1eb08.332 to i32), i32* @r4, align 4
  store i32 0, i32* @r6, align 4
  store i32 %v1_12264, i32* @r5, align 4
  %v4_1227c = call i32 @function_12b4c(i32 %v1_12264, i32 ptrtoint ([21 x i8]* @global_var_16010.340 to i32), i32 20)
  store i8 20, i8* bitcast (i32* @global_var_1eb24.341 to i8*), align 4
  %v0_1228c = load i32, i32* @r5, align 4
  store i32 %v0_1228c, i32* @global_var_1eb20.342, align 4
  %v0_12290 = load i32, i32* @r6, align 4
  %v1_12290 = trunc i32 %v0_12290 to i8
  store i8 %v1_12290, i8* bitcast (i32* @global_var_1eb25.343 to i8*), align 4
  %v1_12294 = call i32 @function_13f40(i32 2)
  store i32 2, i32* @r5, align 4
  store i32 %v1_12294, i32* @r7, align 4
  %v4_122a8 = call i32 @function_12b4c(i32 %v1_12294, i32 ptrtoint ([3 x i8]* @global_var_16028.345 to i32), i32 2)
  %v0_122b0 = load i32, i32* @r7, align 4
  store i32 %v0_122b0, i32* @global_var_1eb28.346, align 4
  %v0_122b4 = load i32, i32* @r5, align 4
  %v1_122b4 = trunc i32 %v0_122b4 to i8
  store i8 %v1_122b4, i8* bitcast (i32* @global_var_1eb2c.347 to i8*), align 4
  %v0_122b8 = load i32, i32* @r6, align 4
  %v1_122b8 = trunc i32 %v0_122b8 to i8
  store i8 %v1_122b8, i8* bitcast (i32* @global_var_1eb2d.348 to i8*), align 4
  %v1_122bc = call i32 @function_13f40(i32 23)
  store i32 %v1_122bc, i32* @r7, align 4
  %v4_122cc = call i32 @function_12b4c(i32 %v1_122bc, i32 ptrtoint ([24 x i8]* @global_var_1602c.350 to i32), i32 23)
  %v0_122d4 = load i32, i32* @r5, align 4
  store i8 23, i8* bitcast (i32* @global_var_1eb9c.351 to i8*), align 4
  %v0_122dc = load i32, i32* @r7, align 4
  store i32 %v0_122dc, i32* @global_var_1eb98.352, align 4
  %v0_122e0 = load i32, i32* @r6, align 4
  %v1_122e0 = trunc i32 %v0_122e0 to i8
  store i8 %v1_122e0, i8* bitcast (i32* @global_var_1eb9d.353 to i8*), align 4
  %v1_122e4 = call i32 @function_13f40(i32 %v0_122d4)
  %v0_122e8 = load i32, i32* @r5, align 4
  store i32 %v1_122e4, i32* @r7, align 4
  %v3_122f4 = call i32 @function_12b4c(i32 %v1_122e4, i32 ptrtoint (i32* @global_var_16044.355 to i32), i32 %v0_122e8)
  %v0_122fc = load i32, i32* @r7, align 4
  store i32 %v0_122fc, i32* @global_var_1eba0.356, align 4
  %v0_12300 = load i32, i32* @r5, align 4
  %v1_12300 = trunc i32 %v0_12300 to i8
  store i8 %v1_12300, i8* bitcast (i32* @global_var_1eba4.357 to i8*), align 4
  %v0_12304 = load i32, i32* @r6, align 4
  %v1_12304 = trunc i32 %v0_12304 to i8
  store i8 %v1_12304, i8* bitcast (i32* @global_var_1eba5.358 to i8*), align 4
  %v1_12308 = call i32 @function_13f40(i32 15)
  store i32 %v1_12308, i32* @r5, align 4
  %v3_12318 = call i32 @function_12b4c(i32 %v1_12308, i32 ptrtoint (i32* @global_var_16048.360 to i32), i32 15)
  store i8 15, i8* bitcast (i32* @global_var_1eb1c.361 to i8*), align 4
  %v0_12328 = load i32, i32* @r5, align 4
  store i32 %v0_12328, i32* @global_var_1eb18.362, align 4
  %v0_1232c = load i32, i32* @r6, align 4
  %v1_1232c = trunc i32 %v0_1232c to i8
  store i8 %v1_1232c, i8* bitcast (i32* @global_var_1eb1d.363 to i8*), align 4
  %v1_12330 = call i32 @function_13f40(i32 29)
  store i32 %v1_12330, i32* @r5, align 4
  %v3_12340 = call i32 @function_12b4c(i32 %v1_12330, i32 ptrtoint (i32* @global_var_16058.365 to i32), i32 29)
  store i8 29, i8* bitcast (i32* @global_var_1eb34.366 to i8*), align 4
  %v0_12350 = load i32, i32* @r5, align 4
  store i32 %v0_12350, i32* @global_var_1eb30.367, align 4
  %v0_12354 = load i32, i32* @r6, align 4
  %v1_12354 = trunc i32 %v0_12354 to i8
  store i8 %v1_12354, i8* bitcast (i32* @global_var_1eb35.368 to i8*), align 4
  %v1_12358 = call i32 @function_13f40(i32 7)
  store i32 7, i32* @r7, align 4
  store i32 %v1_12358, i32* @r5, align 4
  %v4_1236c = call i32 @function_12b4c(i32 %v1_12358, i32 ptrtoint ([8 x i8]* @global_var_16078.370 to i32), i32 7)
  %v0_12374 = load i32, i32* @r5, align 4
  store i32 %v0_12374, i32* @global_var_1eb38.371, align 4
  %v0_12378 = load i32, i32* @r7, align 4
  %v1_12378 = trunc i32 %v0_12378 to i8
  store i8 %v1_12378, i8* bitcast (i32* @global_var_1eb3c.372 to i8*), align 4
  %v0_1237c = load i32, i32* @r6, align 4
  %v1_1237c = trunc i32 %v0_1237c to i8
  store i8 %v1_1237c, i8* bitcast (i32* @global_var_1eb3d.373 to i8*), align 4
  %v1_12380 = call i32 @function_13f40(i32 5)
  store i32 %v1_12380, i32* @r5, align 4
  %v4_12390 = call i32 @function_12b4c(i32 %v1_12380, i32 ptrtoint ([6 x i8]* @global_var_16080.375 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1eb44.376 to i8*), align 4
  %v0_123a0 = load i32, i32* @r5, align 4
  store i32 %v0_123a0, i32* @global_var_1eb40.377, align 4
  %v0_123a4 = load i32, i32* @r6, align 4
  %v1_123a4 = trunc i32 %v0_123a4 to i8
  store i8 %v1_123a4, i8* bitcast (i32* @global_var_1eb45.378 to i8*), align 4
  %v1_123a8 = call i32 @function_13f40(i32 11)
  store i32 %v1_123a8, i32* @r5, align 4
  %v3_123b8 = call i32 @function_12b4c(i32 %v1_123a8, i32 ptrtoint (i32* @global_var_16088.380 to i32), i32 11)
  store i8 11, i8* bitcast (i32* @global_var_1eb4c.381 to i8*), align 4
  %v0_123c8 = load i32, i32* @r5, align 4
  store i32 %v0_123c8, i32* @global_var_1eb48.382, align 4
  %v0_123cc = load i32, i32* @r6, align 4
  %v1_123cc = trunc i32 %v0_123cc to i8
  store i8 %v1_123cc, i8* bitcast (i32* @global_var_1eb4d.383 to i8*), align 4
  %v1_123d0 = call i32 @function_13f40(i32 4)
  store i32 %v1_123d0, i32* @r5, align 4
  %v4_123e0 = call i32 @function_12b4c(i32 %v1_123d0, i32 ptrtoint ([5 x i8]* @global_var_16094.385 to i32), i32 4)
  %v0_123e8 = load i32, i32* @r7, align 4
  store i8 4, i8* bitcast (i32* @global_var_1eb54.386 to i8*), align 4
  %v0_123f0 = load i32, i32* @r5, align 4
  store i32 %v0_123f0, i32* @global_var_1eb50.387, align 4
  %v0_123f4 = load i32, i32* @r6, align 4
  %v1_123f4 = trunc i32 %v0_123f4 to i8
  store i8 %v1_123f4, i8* bitcast (i32* @global_var_1eb55.388 to i8*), align 4
  %v1_123f8 = call i32 @function_13f40(i32 %v0_123e8)
  %v0_123fc = load i32, i32* @r7, align 4
  store i32 %v1_123f8, i32* @r5, align 4
  %v4_12408 = call i32 @function_12b4c(i32 %v1_123f8, i32 ptrtoint ([8 x i8]* @global_var_1609c.390 to i32), i32 %v0_123fc)
  %v0_12410 = load i32, i32* @r5, align 4
  store i32 %v0_12410, i32* @global_var_1eb58.391, align 4
  %v0_12414 = load i32, i32* @r7, align 4
  %v1_12414 = trunc i32 %v0_12414 to i8
  store i8 %v1_12414, i8* bitcast (i32* @global_var_1eb5c.392 to i8*), align 4
  %v0_12418 = load i32, i32* @r6, align 4
  %v1_12418 = trunc i32 %v0_12418 to i8
  store i8 %v1_12418, i8* bitcast (i32* @global_var_1eb5d.393 to i8*), align 4
  %v1_1241c = call i32 @function_13f40(i32 8)
  store i32 %v1_1241c, i32* @r5, align 4
  %v4_1242c = call i32 @function_12b4c(i32 %v1_1241c, i32 ptrtoint ([9 x i8]* @global_var_160a4.395 to i32), i32 8)
  store i8 8, i8* bitcast (i32* @global_var_1eb64.396 to i8*), align 4
  %v0_1243c = load i32, i32* @r5, align 4
  store i32 %v0_1243c, i32* @global_var_1eb60.397, align 4
  %v0_12440 = load i32, i32* @r6, align 4
  %v1_12440 = trunc i32 %v0_12440 to i8
  store i8 %v1_12440, i8* bitcast (i32* @global_var_1eb65.398 to i8*), align 4
  %v1_12444 = call i32 @function_13f40(i32 13)
  store i32 %v1_12444, i32* @r5, align 4
  %v3_12454 = call i32 @function_12b4c(i32 %v1_12444, i32 ptrtoint (i32* @global_var_160b0.400 to i32), i32 13)
  store i8 13, i8* bitcast (i32* @global_var_1eb6c.401 to i8*), align 4
  %v0_12464 = load i32, i32* @r5, align 4
  store i32 %v0_12464, i32* @global_var_1eb68.402, align 4
  %v0_12468 = load i32, i32* @r6, align 4
  %v1_12468 = trunc i32 %v0_12468 to i8
  store i8 %v1_12468, i8* bitcast (i32* @global_var_1eb6d.403 to i8*), align 4
  %v1_1246c = call i32 @function_13f40(i32 10)
  store i32 10, i32* %r8.global-to-local, align 4
  store i32 %v1_1246c, i32* @r5, align 4
  %v4_12480 = call i32 @function_12b4c(i32 %v1_1246c, i32 ptrtoint ([11 x i8]* @global_var_160c0.405 to i32), i32 10)
  %v0_12488 = load i32, i32* @r5, align 4
  store i32 %v0_12488, i32* @global_var_1eb70.406, align 4
  store i8 10, i8* bitcast (i32* @global_var_1eb74.407 to i8*), align 4
  %v0_12490 = load i32, i32* @r6, align 4
  %v1_12490 = trunc i32 %v0_12490 to i8
  store i8 %v1_12490, i8* bitcast (i32* @global_var_1eb75.408 to i8*), align 4
  %v1_12494 = call i32 @function_13f40(i32 10)
  %v0_1249c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_12494, i32* @r5, align 4
  %v4_124a4 = call i32 @function_12b4c(i32 %v1_12494, i32 ptrtoint ([11 x i8]* @global_var_160cc.410 to i32), i32 %v0_1249c)
  %v0_124ac = load i32, i32* @r5, align 4
  store i32 %v0_124ac, i32* @global_var_1eb78.411, align 4
  %v1_124b0 = trunc i32 %v0_1249c to i8
  store i8 %v1_124b0, i8* bitcast (i32* @global_var_1eb7c.412 to i8*), align 4
  %v0_124b4 = load i32, i32* @r6, align 4
  %v1_124b4 = trunc i32 %v0_124b4 to i8
  store i8 %v1_124b4, i8* bitcast (i32* @global_var_1eb7d.413 to i8*), align 4
  %v1_124b8 = call i32 @function_13f40(i32 33)
  store i32 %v1_124b8, i32* @r5, align 4
  %v3_124c8 = call i32 @function_12b4c(i32 %v1_124b8, i32 ptrtoint (i32* @global_var_160d8.415 to i32), i32 33)
  store i8 33, i8* bitcast (i32* @global_var_1eb84.416 to i8*), align 4
  %v0_124d8 = load i32, i32* @r5, align 4
  store i32 %v0_124d8, i32* @global_var_1eb80.417, align 4
  %v0_124dc = load i32, i32* @r6, align 4
  %v1_124dc = trunc i32 %v0_124dc to i8
  store i8 %v1_124dc, i8* bitcast (i32* @global_var_1eb85.418 to i8*), align 4
  %v1_124e0 = call i32 @function_13f40(i32 8)
  store i32 %v1_124e0, i32* @r5, align 4
  %v4_124f0 = call i32 @function_12b4c(i32 %v1_124e0, i32 ptrtoint ([9 x i8]* @global_var_160fc.420 to i32), i32 8)
  store i8 8, i8* bitcast (i32* @global_var_1eb8c.421 to i8*), align 4
  %v0_12500 = load i32, i32* @r5, align 4
  store i32 %v0_12500, i32* @global_var_1eb88.422, align 4
  %v0_12504 = load i32, i32* @r6, align 4
  %v1_12504 = trunc i32 %v0_12504 to i8
  store i8 %v1_12504, i8* bitcast (i32* @global_var_1eb8d.423 to i8*), align 4
  %v1_12508 = call i32 @function_13f40(i32 11)
  store i32 %v1_12508, i32* @r5, align 4
  %v4_12518 = call i32 @function_12b4c(i32 %v1_12508, i32 ptrtoint ([12 x i8]* @global_var_16108.425 to i32), i32 11)
  store i8 11, i8* bitcast (i32* @global_var_1eb94.426 to i8*), align 4
  %v0_12528 = load i32, i32* @r5, align 4
  store i32 %v0_12528, i32* @global_var_1eb90.427, align 4
  %v0_1252c = load i32, i32* @r6, align 4
  %v1_1252c = trunc i32 %v0_1252c to i8
  store i8 %v1_1252c, i8* bitcast (i32* @global_var_1eb95.428 to i8*), align 4
  %v1_12530 = call i32 @function_13f40(i32 6)
  store i32 %v1_12530, i32* @r5, align 4
  %v4_12540 = call i32 @function_12b4c(i32 %v1_12530, i32 ptrtoint ([7 x i8]* @global_var_16114.430 to i32), i32 6)
  %v0_12548 = load i32, i32* @r7, align 4
  store i8 6, i8* bitcast (i32* @global_var_1ebac.431 to i8*), align 4
  %v0_12550 = load i32, i32* @r5, align 4
  store i32 %v0_12550, i32* @global_var_1eba8.432, align 4
  %v0_12554 = load i32, i32* @r6, align 4
  %v1_12554 = trunc i32 %v0_12554 to i8
  store i8 %v1_12554, i8* bitcast (i32* @global_var_1ebad.433 to i8*), align 4
  %v1_12558 = call i32 @function_13f40(i32 %v0_12548)
  %v0_1255c = load i32, i32* @r7, align 4
  store i32 %v1_12558, i32* @r5, align 4
  %v4_12568 = call i32 @function_12b4c(i32 %v1_12558, i32 ptrtoint ([8 x i8]* @global_var_1611c.435 to i32), i32 %v0_1255c)
  %v0_1256c = load i32, i32* @r7, align 4
  %v0_12570 = load i32, i32* @r5, align 4
  store i32 %v0_12570, i32* @global_var_1ebb0.436, align 4
  %v1_12574 = trunc i32 %v0_1256c to i8
  store i8 %v1_12574, i8* bitcast (i32* @global_var_1ebb4.437 to i8*), align 4
  %v0_12578 = load i32, i32* @r6, align 4
  %v1_12578 = trunc i32 %v0_12578 to i8
  store i8 %v1_12578, i8* bitcast (i32* @global_var_1ebb5.438 to i8*), align 4
  %v1_1257c = call i32 @function_13f40(i32 %v0_1256c)
  %v0_12580 = load i32, i32* @r7, align 4
  store i32 %v1_1257c, i32* @r5, align 4
  %v4_1258c = call i32 @function_12b4c(i32 %v1_1257c, i32 ptrtoint ([8 x i8]* @global_var_16124.440 to i32), i32 %v0_12580)
  %v0_12594 = load i32, i32* @r5, align 4
  store i32 %v0_12594, i32* @global_var_1ebb8.441, align 4
  %v0_12598 = load i32, i32* @r7, align 4
  %v1_12598 = trunc i32 %v0_12598 to i8
  store i8 %v1_12598, i8* bitcast (i32* @global_var_1ebbc.442 to i8*), align 4
  %v0_1259c = load i32, i32* @r6, align 4
  %v1_1259c = trunc i32 %v0_1259c to i8
  store i8 %v1_1259c, i8* bitcast (i32* @global_var_1ebbd.443 to i8*), align 4
  %v1_125a0 = call i32 @function_13f40(i32 3)
  store i32 %v1_125a0, i32* @r5, align 4
  %v4_125b0 = call i32 @function_12b4c(i32 %v1_125a0, i32 ptrtoint ([4 x i8]* @global_var_1612c.445 to i32), i32 3)
  store i8 3, i8* bitcast (i32* @global_var_1ebc4.446 to i8*), align 4
  %v0_125c0 = load i32, i32* @r5, align 4
  store i32 %v0_125c0, i32* @global_var_1ebc0.447, align 4
  %v0_125c4 = load i32, i32* @r6, align 4
  %v1_125c4 = trunc i32 %v0_125c4 to i8
  store i8 %v1_125c4, i8* bitcast (i32* @global_var_1ebc5.448 to i8*), align 4
  %v1_125c8 = call i32 @function_13f40(i32 19)
  store i32 %v1_125c8, i32* @r5, align 4
  store i32 19, i32* %sb.global-to-local, align 4
  %v3_125dc = call i32 @function_12b4c(i32 %v1_125c8, i32 ptrtoint (i32* @global_var_16130.450 to i32), i32 19)
  %v0_125e4 = load i32, i32* @r5, align 4
  store i32 %v0_125e4, i32* @global_var_1ebc8.451, align 4
  store i8 19, i8* bitcast (i32* @global_var_1ebcc.452 to i8*), align 4
  %v0_125ec = load i32, i32* @r6, align 4
  %v1_125ec = trunc i32 %v0_125ec to i8
  store i8 %v1_125ec, i8* bitcast (i32* @global_var_1ebcd.453 to i8*), align 4
  %v1_125f0 = call i32 @function_13f40(i32 24)
  store i32 %v1_125f0, i32* @r5, align 4
  %v3_12600 = call i32 @function_12b4c(i32 %v1_125f0, i32 ptrtoint (i32* @global_var_16144.455 to i32), i32 24)
  store i8 24, i8* bitcast (i32* @global_var_1ebd4.456 to i8*), align 4
  %v0_12610 = load i32, i32* @r5, align 4
  store i32 %v0_12610, i32* @global_var_1ebd0.457, align 4
  %v0_12614 = load i32, i32* @r6, align 4
  %v1_12614 = trunc i32 %v0_12614 to i8
  store i8 %v1_12614, i8* bitcast (i32* @global_var_1ebd5.458 to i8*), align 4
  %v1_12618 = call i32 @function_13f40(i32 9)
  store i32 %v1_12618, i32* @r5, align 4
  store i32 9, i32* %sl.global-to-local, align 4
  %v4_1262c = call i32 @function_12b4c(i32 %v1_12618, i32 ptrtoint ([10 x i8]* @global_var_16160.460 to i32), i32 9)
  %v0_12634 = load i32, i32* @r5, align 4
  store i32 %v0_12634, i32* @global_var_1ebd8.461, align 4
  store i8 9, i8* bitcast (i32* @global_var_1ebdc.462 to i8*), align 4
  %v0_1263c = load i32, i32* @r6, align 4
  %v1_1263c = trunc i32 %v0_1263c to i8
  store i8 %v1_1263c, i8* bitcast (i32* @global_var_1ebdd.463 to i8*), align 4
  %v1_12640 = call i32 @function_13f40(i32 16)
  store i32 %v1_12640, i32* @r5, align 4
  store i32 16, i32* %fp.global-to-local, align 4
  %v3_12654 = call i32 @function_12b4c(i32 %v1_12640, i32 ptrtoint (i32* @global_var_1616c.465 to i32), i32 16)
  %v0_1265c = load i32, i32* @r5, align 4
  store i32 %v0_1265c, i32* @global_var_1ebe0.466, align 4
  store i8 16, i8* bitcast (i32* @global_var_1ebe4.467 to i8*), align 4
  %v0_12664 = load i32, i32* @r6, align 4
  %v1_12664 = trunc i32 %v0_12664 to i8
  store i8 %v1_12664, i8* bitcast (i32* @global_var_1ebe5.468 to i8*), align 4
  %v1_12668 = call i32 @function_13f40(i32 22)
  store i32 %v1_12668, i32* @r5, align 4
  %v3_12678 = call i32 @function_12b4c(i32 %v1_12668, i32 ptrtoint (i32* @global_var_16180.470 to i32), i32 22)
  store i8 22, i8* bitcast (i32* @global_var_1ebec.471 to i8*), align 4
  %v0_12688 = load i32, i32* @r5, align 4
  store i32 %v0_12688, i32* @global_var_1ebe8.472, align 4
  %v0_1268c = load i32, i32* @r6, align 4
  %v1_1268c = trunc i32 %v0_1268c to i8
  store i8 %v1_1268c, i8* bitcast (i32* @global_var_1ebed.473 to i8*), align 4
  %v1_12690 = call i32 @function_13f40(i32 21)
  store i32 %v1_12690, i32* @r5, align 4
  %v3_126a0 = call i32 @function_12b4c(i32 %v1_12690, i32 ptrtoint (i32* @global_var_16198.475 to i32), i32 21)
  store i8 21, i8* bitcast (i32* @global_var_1ebf4.476 to i8*), align 4
  %v0_126b0 = load i32, i32* @r5, align 4
  store i32 %v0_126b0, i32* @global_var_1ebf0.477, align 4
  %v0_126b4 = load i32, i32* @r6, align 4
  %v1_126b4 = trunc i32 %v0_126b4 to i8
  store i8 %v1_126b4, i8* bitcast (i32* @global_var_1ebf5.478 to i8*), align 4
  %v1_126b8 = call i32 @function_13f40(i32 17)
  store i32 %v1_126b8, i32* @r5, align 4
  %v4_126c8 = call i32 @function_12b4c(i32 %v1_126b8, i32 ptrtoint ([18 x i8]* @global_var_161b0.480 to i32), i32 17)
  store i8 17, i8* bitcast (i32* @global_var_1ebfc.481 to i8*), align 4
  %v0_126d8 = load i32, i32* @r5, align 4
  store i32 %v0_126d8, i32* @global_var_1ebf8.482, align 4
  %v0_126dc = load i32, i32* @r6, align 4
  %v1_126dc = trunc i32 %v0_126dc to i8
  store i8 %v1_126dc, i8* bitcast (i32* @global_var_1ebfd.483 to i8*), align 4
  %v1_126e0 = call i32 @function_13f40(i32 12)
  %v0_126ec = load i32, i32* @r7, align 4
  %v1_126ec = add i32 %v0_126ec, 5
  store i32 %v1_126ec, i32* @r7, align 4
  store i32 %v1_126e0, i32* @r5, align 4
  %v3_126f4 = call i32 @function_12b4c(i32 %v1_126e0, i32 ptrtoint (i32* @global_var_161c4.485 to i32), i32 12)
  %v0_126fc = load i32, i32* @r5, align 4
  store i32 %v0_126fc, i32* @global_var_1ec00.486, align 4
  %v0_12700 = load i32, i32* @r7, align 4
  %v1_12700 = trunc i32 %v0_12700 to i8
  store i8 %v1_12700, i8* bitcast (i32* @global_var_1ec04.487 to i8*), align 4
  %v0_12704 = load i32, i32* @r6, align 4
  %v1_12704 = trunc i32 %v0_12704 to i8
  store i8 %v1_12704, i8* bitcast (i32* @global_var_1ec05.488 to i8*), align 4
  %v1_12708 = call i32 @function_13f40(i32 23)
  store i32 %v1_12708, i32* @r5, align 4
  %v3_12718 = call i32 @function_12b4c(i32 %v1_12708, i32 ptrtoint (i32* @global_var_161d4.490 to i32), i32 23)
  store i8 23, i8* bitcast (i32* @global_var_1ec0c.491 to i8*), align 4
  %v0_12728 = load i32, i32* @r5, align 4
  store i32 %v0_12728, i32* @global_var_1ec08.492, align 4
  %v0_1272c = load i32, i32* @r6, align 4
  %v1_1272c = trunc i32 %v0_1272c to i8
  store i8 %v1_1272c, i8* bitcast (i32* @global_var_1ec0d.493 to i8*), align 4
  %v1_12730 = call i32 @function_13f40(i32 83)
  store i32 %v1_12730, i32* @r5, align 4
  %v3_12740 = call i32 @function_12b4c(i32 %v1_12730, i32 ptrtoint (i32* @global_var_161ec.495 to i32), i32 83)
  store i8 83, i8* bitcast (i32* @global_var_1ec14.496 to i8*), align 4
  %v0_12750 = load i32, i32* @r5, align 4
  store i32 %v0_12750, i32* @global_var_1ec10.497, align 4
  %v0_12754 = load i32, i32* @r6, align 4
  %v1_12754 = trunc i32 %v0_12754 to i8
  store i8 %v1_12754, i8* bitcast (i32* @global_var_1ec15.498 to i8*), align 4
  %v1_12758 = call i32 @function_13f40(i32 32)
  store i32 %v1_12758, i32* @r5, align 4
  %v3_12768 = call i32 @function_12b4c(i32 %v1_12758, i32 ptrtoint (i32* @global_var_16240.500 to i32), i32 32)
  store i8 32, i8* bitcast (i32* @global_var_1ec1c.501 to i8*), align 4
  %v0_12778 = load i32, i32* @r5, align 4
  store i32 %v0_12778, i32* @global_var_1ec18.502, align 4
  %v0_1277c = load i32, i32* @r6, align 4
  %v1_1277c = trunc i32 %v0_1277c to i8
  store i8 %v1_1277c, i8* bitcast (i32* @global_var_1ec1d.503 to i8*), align 4
  %v1_12780 = call i32 @function_13f40(i32 48)
  store i32 %v1_12780, i32* @r5, align 4
  %v3_12790 = call i32 @function_12b4c(i32 %v1_12780, i32 ptrtoint (i32* @global_var_16264.505 to i32), i32 48)
  %v0_12798 = load i32, i32* @r7, align 4
  store i8 48, i8* bitcast (i32* @global_var_1ec24.506 to i8*), align 4
  %v0_127a0 = load i32, i32* @r5, align 4
  store i32 %v0_127a0, i32* @global_var_1ec20.507, align 4
  %v0_127a4 = load i32, i32* @r6, align 4
  %v1_127a4 = trunc i32 %v0_127a4 to i8
  store i8 %v1_127a4, i8* bitcast (i32* @global_var_1ec25.508 to i8*), align 4
  %v1_127a8 = call i32 @function_13f40(i32 %v0_12798)
  %v0_127ac = load i32, i32* @r7, align 4
  store i32 %v1_127a8, i32* @r5, align 4
  %v3_127b8 = call i32 @function_12b4c(i32 %v1_127a8, i32 ptrtoint (i32* @global_var_16298.510 to i32), i32 %v0_127ac)
  %v0_127bc = load i32, i32* %sl.global-to-local, align 4
  %v0_127c0 = load i32, i32* @r5, align 4
  store i32 %v0_127c0, i32* @global_var_1ec28.511, align 4
  %v0_127c4 = load i32, i32* @r7, align 4
  %v1_127c4 = trunc i32 %v0_127c4 to i8
  store i8 %v1_127c4, i8* bitcast (i32* @global_var_1ec2c.512 to i8*), align 4
  %v0_127c8 = load i32, i32* @r6, align 4
  %v1_127c8 = trunc i32 %v0_127c8 to i8
  store i8 %v1_127c8, i8* bitcast (i32* @global_var_1ec2d.513 to i8*), align 4
  %v1_127cc = call i32 @function_13f40(i32 %v0_127bc)
  %v0_127d4 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_127cc, i32* @r5, align 4
  %v3_127dc = call i32 @function_12b4c(i32 %v1_127cc, i32 ptrtoint (i32* @global_var_162a8.515 to i32), i32 %v0_127d4)
  %v0_127e0 = load i32, i32* %r8.global-to-local, align 4
  %v0_127e4 = load i32, i32* @r5, align 4
  store i32 %v0_127e4, i32* @global_var_1ec30.516, align 4
  %v1_127e8 = trunc i32 %v0_127d4 to i8
  store i8 %v1_127e8, i8* bitcast (i32* @global_var_1ec34.517 to i8*), align 4
  %v0_127ec = load i32, i32* @r6, align 4
  %v1_127ec = trunc i32 %v0_127ec to i8
  store i8 %v1_127ec, i8* bitcast (i32* @global_var_1ec35.518 to i8*), align 4
  %v1_127f0 = call i32 @function_13f40(i32 %v0_127e0)
  %v0_127f8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_127f0, i32* @r5, align 4
  %v3_12800 = call i32 @function_12b4c(i32 %v1_127f0, i32 ptrtoint (i32* @global_var_162b4.520 to i32), i32 %v0_127f8)
  %v0_12804 = load i32, i32* @r7, align 4
  %v0_12808 = load i32, i32* @r5, align 4
  store i32 %v0_12808, i32* @global_var_1ec38.521, align 4
  %v1_1280c = trunc i32 %v0_127f8 to i8
  store i8 %v1_1280c, i8* bitcast (i32* @global_var_1ec3c.522 to i8*), align 4
  %v0_12810 = load i32, i32* @r6, align 4
  %v1_12810 = trunc i32 %v0_12810 to i8
  store i8 %v1_12810, i8* bitcast (i32* @global_var_1ec3d.523 to i8*), align 4
  %v1_12814 = call i32 @function_13f40(i32 %v0_12804)
  %v0_12818 = load i32, i32* @r7, align 4
  store i32 %v1_12814, i32* @r5, align 4
  %v3_12824 = call i32 @function_12b4c(i32 %v1_12814, i32 ptrtoint (i32* @global_var_162c0.525 to i32), i32 %v0_12818)
  %v0_12828 = load i32, i32* %fp.global-to-local, align 4
  %v0_1282c = load i32, i32* @r5, align 4
  store i32 %v0_1282c, i32* @global_var_1ec40.526, align 4
  %v0_12830 = load i32, i32* @r7, align 4
  %v1_12830 = trunc i32 %v0_12830 to i8
  store i8 %v1_12830, i8* bitcast (i32* @global_var_1ec44.527 to i8*), align 4
  %v0_12834 = load i32, i32* @r6, align 4
  %v1_12834 = trunc i32 %v0_12834 to i8
  store i8 %v1_12834, i8* bitcast (i32* @global_var_1ec45.528 to i8*), align 4
  %v1_12838 = call i32 @function_13f40(i32 %v0_12828)
  %v0_12840 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_12838, i32* @r5, align 4
  %v3_12848 = call i32 @function_12b4c(i32 %v1_12838, i32 ptrtoint (i32* @global_var_162d0.530 to i32), i32 %v0_12840)
  %v0_1284c = load i32, i32* %sb.global-to-local, align 4
  %v0_12850 = load i32, i32* @r5, align 4
  store i32 %v0_12850, i32* @global_var_1ec48.531, align 4
  %v1_12854 = trunc i32 %v0_12840 to i8
  store i8 %v1_12854, i8* bitcast (i32* @global_var_1ec4c.532 to i8*), align 4
  %v0_12858 = load i32, i32* @r6, align 4
  %v1_12858 = trunc i32 %v0_12858 to i8
  store i8 %v1_12858, i8* bitcast (i32* @global_var_1ec4d.533 to i8*), align 4
  %v1_1285c = call i32 @function_13f40(i32 %v0_1284c)
  %v0_12864 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_1285c, i32* @r5, align 4
  %v3_1286c = call i32 @function_12b4c(i32 %v1_1285c, i32 ptrtoint (i32* @global_var_162e4.535 to i32), i32 %v0_12864)
  %v0_12874 = load i32, i32* @r5, align 4
  store i32 %v0_12874, i32* @global_var_1ec50.536, align 4
  %v1_12878 = trunc i32 %v0_12864 to i8
  store i8 %v1_12878, i8* bitcast (i32* @global_var_1ec54.537 to i8*), align 4
  %v0_1287c = load i32, i32* @r6, align 4
  %v1_1287c = trunc i32 %v0_1287c to i8
  store i8 %v1_1287c, i8* bitcast (i32* @global_var_1ec55.538 to i8*), align 4
  %v1_12880 = call i32 @function_13f40(i32 8)
  store i32 %v1_12880, i32* @r5, align 4
  %v4_12890 = call i32 @function_12b4c(i32 %v1_12880, i32 ptrtoint ([9 x i8]* @global_var_162f8.540 to i32), i32 8)
  store i8 8, i8* bitcast (i32* @global_var_1ec5c.541 to i8*), align 4
  %v0_128a0 = load i32, i32* @r5, align 4
  store i32 %v0_128a0, i32* @global_var_1ec58.542, align 4
  %v0_128a4 = load i32, i32* @r6, align 4
  %v1_128a4 = trunc i32 %v0_128a4 to i8
  store i8 %v1_128a4, i8* bitcast (i32* @global_var_1ec5d.543 to i8*), align 4
  %v1_128a8 = call i32 @function_13f40(i32 11)
  store i32 %v1_128a8, i32* @r5, align 4
  %v3_128b8 = call i32 @function_12b4c(i32 %v1_128a8, i32 ptrtoint (i32* @global_var_161e0.545 to i32), i32 11)
  %v0_128c0 = load i32, i32* @r7, align 4
  store i8 11, i8* bitcast (i32* @global_var_1ec64.546 to i8*), align 4
  %v0_128c8 = load i32, i32* @r5, align 4
  store i32 %v0_128c8, i32* @global_var_1ec60.547, align 4
  %v0_128cc = load i32, i32* @r6, align 4
  %v1_128cc = trunc i32 %v0_128cc to i8
  store i8 %v1_128cc, i8* bitcast (i32* @global_var_1ec65.548 to i8*), align 4
  %v1_128d0 = call i32 @function_13f40(i32 %v0_128c0)
  %v0_128d4 = load i32, i32* @r7, align 4
  store i32 %v1_128d0, i32* @r5, align 4
  %v3_128e0 = call i32 @function_12b4c(i32 %v1_128d0, i32 ptrtoint (i32* @global_var_16304.550 to i32), i32 %v0_128d4)
  %v0_128e8 = load i32, i32* @r5, align 4
  store i32 %v0_128e8, i32* @global_var_1ec68.551, align 4
  %v0_128ec = load i32, i32* @r7, align 4
  %v1_128ec = trunc i32 %v0_128ec to i8
  store i8 %v1_128ec, i8* bitcast (i32* @global_var_1ec6c.552 to i8*), align 4
  %v0_128f0 = load i32, i32* @r6, align 4
  %v1_128f0 = trunc i32 %v0_128f0 to i8
  store i8 %v1_128f0, i8* bitcast (i32* @global_var_1ec6d.553 to i8*), align 4
  %v1_128f4 = call i32 @function_13f40(i32 18)
  store i32 %v1_128f4, i32* @r5, align 4
  %v3_12904 = call i32 @function_12b4c(i32 %v1_128f4, i32 ptrtoint (i32* @global_var_16314.555 to i32), i32 18)
  store i8 18, i8* bitcast (i32* @global_var_1ec74.556 to i8*), align 4
  %v0_12914 = load i32, i32* @r5, align 4
  store i32 %v0_12914, i32* @global_var_1ec70.557, align 4
  %v0_12918 = load i32, i32* @r6, align 4
  %v1_12918 = trunc i32 %v0_12918 to i8
  store i8 %v1_12918, i8* bitcast (i32* @global_var_1ec75.558 to i8*), align 4
  %v1_1291c = call i32 @function_13f40(i32 25)
  store i32 %v1_1291c, i32* @r5, align 4
  %v3_1292c = call i32 @function_12b4c(i32 %v1_1291c, i32 ptrtoint (i32* @global_var_16328.560 to i32), i32 25)
  store i8 25, i8* bitcast (i32* @global_var_1ec7c.561 to i8*), align 4
  %v0_1293c = load i32, i32* @r5, align 4
  store i32 %v0_1293c, i32* @global_var_1ec78.562, align 4
  %v0_12940 = load i32, i32* @r6, align 4
  %v1_12940 = trunc i32 %v0_12940 to i8
  store i8 %v1_12940, i8* bitcast (i32* @global_var_1ec7d.563 to i8*), align 4
  %v1_12944 = call i32 @function_13f40(i32 111)
  store i32 111, i32* @r5, align 4
  store i32 %v1_12944, i32* @r7, align 4
  %v3_12958 = call i32 @function_12b4c(i32 %v1_12944, i32 ptrtoint (i32* @global_var_16344.565 to i32), i32 111)
  %v0_1295c = load i32, i32* @r5, align 4
  %v0_12960 = load i32, i32* @r7, align 4
  store i32 %v0_12960, i32* @global_var_1ec80.566, align 4
  %v1_12964 = trunc i32 %v0_1295c to i8
  store i8 %v1_12964, i8* bitcast (i32* @global_var_1ec84.567 to i8*), align 4
  %v0_12968 = load i32, i32* @r6, align 4
  %v1_12968 = trunc i32 %v0_12968 to i8
  store i8 %v1_12968, i8* bitcast (i32* @global_var_1ec85.568 to i8*), align 4
  %v1_1296c = call i32 @function_13f40(i32 %v0_1295c)
  %v0_12970 = load i32, i32* @r5, align 4
  store i32 %v1_1296c, i32* @r7, align 4
  %v3_1297c = call i32 @function_12b4c(i32 %v1_1296c, i32 ptrtoint (i32* @global_var_163b4.570 to i32), i32 %v0_12970)
  %v0_12984 = load i32, i32* @r7, align 4
  store i32 %v0_12984, i32* @global_var_1ec88.571, align 4
  %v0_12988 = load i32, i32* @r5, align 4
  %v1_12988 = trunc i32 %v0_12988 to i8
  store i8 %v1_12988, i8* bitcast (i32* @global_var_1ec8c.572 to i8*), align 4
  %v0_1298c = load i32, i32* @r6, align 4
  %v1_1298c = trunc i32 %v0_1298c to i8
  store i8 %v1_1298c, i8* bitcast (i32* @global_var_1ec8d.573 to i8*), align 4
  %v1_12990 = call i32 @function_13f40(i32 110)
  %v0_12994 = load i32, i32* @r5, align 4
  %v1_12994 = add i32 %v0_12994, -1
  store i32 %v1_12994, i32* @r5, align 4
  store i32 %v1_12990, i32* @r7, align 4
  %v3_129a4 = call i32 @function_12b4c(i32 %v1_12990, i32 ptrtoint (i32* @global_var_16424.575 to i32), i32 %v1_12994)
  %v0_129a8 = load i32, i32* @r5, align 4
  %v0_129ac = load i32, i32* @r7, align 4
  store i32 %v0_129ac, i32* @global_var_1ec90.576, align 4
  %v1_129b0 = trunc i32 %v0_129a8 to i8
  store i8 %v1_129b0, i8* bitcast (i32* @global_var_1ec94.577 to i8*), align 4
  %v0_129b4 = load i32, i32* @r6, align 4
  %v1_129b4 = trunc i32 %v0_129b4 to i8
  store i8 %v1_129b4, i8* bitcast (i32* @global_var_1ec95.578 to i8*), align 4
  %v1_129b8 = call i32 @function_13f40(i32 %v0_129a8)
  %v0_129bc = load i32, i32* @r5, align 4
  store i32 %v1_129b8, i32* @r7, align 4
  %v3_129c8 = call i32 @function_12b4c(i32 %v1_129b8, i32 ptrtoint (i32* @global_var_16494.580 to i32), i32 %v0_129bc)
  %v0_129d0 = load i32, i32* @r5, align 4
  %v1_129d0 = trunc i32 %v0_129d0 to i8
  store i8 %v1_129d0, i8* bitcast (i32* @global_var_1ec9c.581 to i8*), align 4
  %v0_129d4 = load i32, i32* @r7, align 4
  store i32 %v0_129d4, i32* @global_var_1ec98.582, align 4
  %v0_129d8 = load i32, i32* @r6, align 4
  %v1_129d8 = trunc i32 %v0_129d8 to i8
  store i8 %v1_129d8, i8* bitcast (i32* @global_var_1ec9d.583 to i8*), align 4
  %v1_129dc = call i32 @function_13f40(i32 117)
  %v3_129ec = call i32 @function_12b4c(i32 %v1_129dc, i32 ptrtoint (i32* @global_var_16504.585 to i32), i32 117)
  %v0_129f4 = load i32, i32* @r6, align 4
  %v1_129f4 = trunc i32 %v0_129f4 to i8
  store i8 %v1_129f4, i8* bitcast (i32* @global_var_1eca5.586 to i8*), align 4
  store i32 %v1_129dc, i32* @global_var_1eca0.587, align 4
  store i8 117, i8* bitcast (i32* @global_var_1eca4.588 to i8*), align 4
  %v2_12a00 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_12a00, i32* @r4, align 4
  store i32 %v6_1225c, i32* @r5, align 4
  store i32 %v9_1225c, i32* @r6, align 4
  store i32 %v12_1225c, i32* @r7, align 4
  ret i32 %v3_129ec

; uselistorder directives
  uselistorder i32 %v1_129b8, { 1, 0 }
  uselistorder i32 %v1_12990, { 1, 0 }
  uselistorder i32 %v1_1296c, { 1, 0 }
  uselistorder i32 %v1_12944, { 1, 0 }
  uselistorder i32 %v1_128d0, { 1, 0 }
  uselistorder i32 %v1_1285c, { 1, 0 }
  uselistorder i32 %v1_12838, { 1, 0 }
  uselistorder i32 %v1_12814, { 1, 0 }
  uselistorder i32 %v1_127f0, { 1, 0 }
  uselistorder i32 %v1_127cc, { 1, 0 }
  uselistorder i32 %v1_127a8, { 1, 0 }
  uselistorder i32 %v1_126e0, { 1, 0 }
  uselistorder i32 %v1_1257c, { 1, 0 }
  uselistorder i32 %v1_12558, { 1, 0 }
  uselistorder i32 %v1_12494, { 1, 0 }
  uselistorder i32 %v1_1246c, { 1, 0 }
  uselistorder i32 %v1_123f8, { 1, 0 }
  uselistorder i32 %v1_12358, { 1, 0 }
  uselistorder i32 %v1_122e4, { 1, 0 }
  uselistorder i32 %v1_12294, { 1, 0 }
  uselistorder i32 %v1_12264, { 1, 0 }
  uselistorder i32 117, { 1, 0 }
  uselistorder i32 111, { 1, 2, 0 }
  uselistorder i8 16, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i8 3, { 2, 1, 0 }
  uselistorder i8 6, { 6, 7, 4, 8, 5, 9, 0, 10, 11, 1, 2, 3 }
  uselistorder i8 4, { 4, 3, 2, 0, 1 }
  uselistorder i8 11, { 2, 3, 4, 0, 1 }
  uselistorder i8 5, { 12, 13, 0, 1, 10, 2, 3, 4, 5, 6, 7, 8, 11, 14, 9 }
  uselistorder i8 23, { 1, 2, 0 }
  uselistorder i32 (i32, i32, i32)* @function_12b4c, { 59, 58, 57, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 56, 55, 54, 53, 52, 1, 0, 2 }
  uselistorder i32 ptrtoint (i32* @global_var_1eb08.332 to i32), { 5, 0, 1, 2, 3, 4 }
}

define i32 @function_12ad0(i8* %arg1) local_unnamed_addr {
dec_label_pc_12ad0:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r2, align 4
  %v3_12ad4 = load i8, i8* %arg1, align 1
  %v4_12ad4 = zext i8 %v3_12ad4 to i32
  %v2_12ad8 = icmp eq i8 %v3_12ad4, 0
  br i1 %v2_12ad8, label %dec_label_pc_12af4, label %bb

dec_label_pc_12af4:                               ; preds = %dec_label_pc_12ae4, %dec_label_pc_12ad0
  %merge = phi i32 [ %v4_12ad4, %dec_label_pc_12ad0 ], [ %v1_12ae4, %dec_label_pc_12ae4 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_12ad0
  br label %dec_label_pc_12ae4

dec_label_pc_12ae4:                               ; preds = %dec_label_pc_12ae4, %bb
  %v0_12ae4 = phi i32 [ %v1_12ae4, %dec_label_pc_12ae4 ], [ 0, %bb ]
  %v1_12ae4 = add i32 %v0_12ae4, 1
  %v2_12ae8 = add i32 %v1_12ae4, %tmp
  %v3_12ae8 = inttoptr i32 %v2_12ae8 to i8*
  %v4_12ae8 = load i8, i8* %v3_12ae8, align 1
  %v2_12aec = icmp eq i8 %v4_12ae8, 0
  br i1 %v2_12aec, label %dec_label_pc_12af4, label %dec_label_pc_12ae4

; uselistorder directives
  uselistorder i32 %v1_12ae4, { 1, 0, 2 }
}

define i32 @function_12af8(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12af8:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_12af8 = load i8, i8* %arg1, align 1
  %v3_12af8 = zext i8 %v2_12af8 to i32
  %v2_12afc = icmp eq i8 %v2_12af8, 0
  br i1 %v2_12afc, label %dec_label_pc_12b40, label %dec_label_pc_12b04

dec_label_pc_12b04:                               ; preds = %dec_label_pc_12af8
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12b08

dec_label_pc_12b08:                               ; preds = %dec_label_pc_12b08, %dec_label_pc_12b04
  %v0_12b08 = phi i32 [ %v1_12b08, %dec_label_pc_12b08 ], [ 0, %dec_label_pc_12b04 ]
  %v1_12b08 = add i32 %v0_12b08, 1
  store i32 %v1_12b08, i32* %ip.global-to-local, align 4
  %v2_12b0c = add i32 %v1_12b08, %tmp
  %v3_12b0c = inttoptr i32 %v2_12b0c to i8*
  %v4_12b0c = load i8, i8* %v3_12b0c, align 1
  %v2_12b10 = icmp eq i8 %v4_12b0c, 0
  br i1 %v2_12b10, label %dec_label_pc_12b18, label %dec_label_pc_12b08

dec_label_pc_12b18:                               ; preds = %dec_label_pc_12b08
  %v7_12b18 = icmp eq i32 %v0_12b08, -2
  br i1 %v7_12b18, label %dec_label_pc_12b38, label %dec_label_pc_12b24.preheader

dec_label_pc_12b24.preheader:                     ; preds = %dec_label_pc_12b18, %dec_label_pc_12b40
  %storemerge = phi i32 [ %v3_12af8, %dec_label_pc_12b40 ], [ %v1_12b08, %dec_label_pc_12b18 ]
  %v2_12b30.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_12b24

dec_label_pc_12b24:                               ; preds = %dec_label_pc_12b24.dec_label_pc_12b24_crit_edge, %dec_label_pc_12b24.preheader
  %v2_12b30 = phi i32 [ %v5_12b30, %dec_label_pc_12b24.dec_label_pc_12b24_crit_edge ], [ %v2_12b30.pre, %dec_label_pc_12b24.preheader ]
  %v0_12b28 = phi i32 [ %v0_12b28.pre, %dec_label_pc_12b24.dec_label_pc_12b24_crit_edge ], [ %tmp, %dec_label_pc_12b24.preheader ]
  %v0_12b24 = phi i32 [ %v0_12b24.pre, %dec_label_pc_12b24.dec_label_pc_12b24_crit_edge ], [ %storemerge, %dec_label_pc_12b24.preheader ]
  %v1_12b24 = add i32 %v0_12b24, -1
  store i32 %v1_12b24, i32* @r2, align 4
  %v1_12b28 = inttoptr i32 %v0_12b28 to i8*
  %v2_12b28 = load i8, i8* %v1_12b28, align 1
  %v5_12b28 = add i32 %v0_12b28, 1
  store i32 %v5_12b28, i32* %r1.global-to-local, align 4
  %v3_12b2c = icmp eq i32 %v0_12b24, 0
  %v3_12b30 = inttoptr i32 %v2_12b30 to i8*
  store i8 %v2_12b28, i8* %v3_12b30, align 1
  %v4_12b30 = load i32, i32* @r0, align 4
  %v5_12b30 = add i32 %v4_12b30, 1
  store i32 %v5_12b30, i32* @r0, align 4
  br i1 %v3_12b2c, label %dec_label_pc_12b38.loopexit, label %dec_label_pc_12b24.dec_label_pc_12b24_crit_edge

dec_label_pc_12b24.dec_label_pc_12b24_crit_edge:  ; preds = %dec_label_pc_12b24
  %v0_12b24.pre = load i32, i32* @r2, align 4
  %v0_12b28.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12b24

dec_label_pc_12b38.loopexit:                      ; preds = %dec_label_pc_12b24
  %v0_12b38.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12b38

dec_label_pc_12b38:                               ; preds = %dec_label_pc_12b38.loopexit, %dec_label_pc_12b18
  %v0_12b38 = phi i32 [ %v0_12b38.pre, %dec_label_pc_12b38.loopexit ], [ %v1_12b08, %dec_label_pc_12b18 ]
  ret i32 %v0_12b38

dec_label_pc_12b40:                               ; preds = %dec_label_pc_12af8
  store i32 %v3_12af8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12b24.preheader

; uselistorder directives
  uselistorder i32 %v5_12b30, { 1, 0 }
  uselistorder i32 %v0_12b28, { 1, 0 }
  uselistorder i32 %v1_12b08, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_12af8, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12b24.preheader, { 1, 0 }
}

define i32 @function_12b4c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12b4c:
  %ip.global-to-local = alloca i32, align 4
  %v2_12b4c = icmp eq i32 %arg3, 0
  br i1 %v2_12b4c, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_12b58, %dec_label_pc_12b4c
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_12b4c
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12b58

dec_label_pc_12b58:                               ; preds = %dec_label_pc_12b58, %bb
  %v0_12b58 = phi i32 [ %v1_12b60, %dec_label_pc_12b58 ], [ 0, %bb ]
  %v2_12b58 = add i32 %v0_12b58, %arg2
  %v3_12b58 = inttoptr i32 %v2_12b58 to i8*
  %v4_12b58 = load i8, i8* %v3_12b58, align 1
  %v4_12b5c = add i32 %v0_12b58, %arg1
  %v5_12b5c = inttoptr i32 %v4_12b5c to i8*
  store i8 %v4_12b58, i8* %v5_12b5c, align 1
  %v0_12b60 = load i32, i32* %ip.global-to-local, align 4
  %v1_12b60 = add i32 %v0_12b60, 1
  store i32 %v1_12b60, i32* %ip.global-to-local, align 4
  %v9_12b64 = icmp eq i32 %v1_12b60, %arg3
  br i1 %v9_12b64, label %.loopexit, label %dec_label_pc_12b58

; uselistorder directives
  uselistorder i32 %v1_12b60, { 1, 2, 0 }
}

define i32 @function_12b70(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12b70:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v2_12b70 = icmp eq i32 %arg2, 0
  br i1 %v2_12b70, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_12b80, %dec_label_pc_12b70
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_12b70
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12b80

dec_label_pc_12b80:                               ; preds = %dec_label_pc_12b80.dec_label_pc_12b80_crit_edge, %bb
  %v2_12b80 = phi i32 [ %v1_12b84, %dec_label_pc_12b80.dec_label_pc_12b80_crit_edge ], [ 0, %bb ]
  %v0_12b80.off0 = phi i8 [ %extract.t, %dec_label_pc_12b80.dec_label_pc_12b80_crit_edge ], [ 0, %bb ]
  %v4_12b80 = add i32 %v2_12b80, %arg1
  %v5_12b80 = inttoptr i32 %v4_12b80 to i8*
  store i8 %v0_12b80.off0, i8* %v5_12b80, align 1
  %v0_12b84 = load i32, i32* %r3.global-to-local, align 4
  %v1_12b84 = add i32 %v0_12b84, 1
  store i32 %v1_12b84, i32* %r3.global-to-local, align 4
  %v9_12b88 = icmp eq i32 %v1_12b84, %arg2
  br i1 %v9_12b88, label %.loopexit, label %dec_label_pc_12b80.dec_label_pc_12b80_crit_edge

dec_label_pc_12b80.dec_label_pc_12b80_crit_edge:  ; preds = %dec_label_pc_12b80
  %v0_12b80.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_12b80.pre to i8
  br label %dec_label_pc_12b80

; uselistorder directives
  uselistorder i32 %v1_12b84, { 1, 2, 0 }
}

define i32 @function_12b94(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12b94:
  store i32 %arg4, i32* @lr, align 4
  %v7_12ba8 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_12ba8, label %dec_label_pc_12bac, label %dec_label_pc_12bb4

dec_label_pc_12bac:                               ; preds = %dec_label_pc_12bc8, %dec_label_pc_12b94, %dec_label_pc_12bb4
  ret i32 -1

dec_label_pc_12bb4:                               ; preds = %dec_label_pc_12b94
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_12bac, label %dec_label_pc_12bbc

dec_label_pc_12bbc:                               ; preds = %dec_label_pc_12bb4
  br label %dec_label_pc_12bd4

dec_label_pc_12bc8:                               ; preds = %dec_label_pc_12bec, %dec_label_pc_12bd4
  %v1_12bc8 = add i32 %v0_12bf4, 1
  %v9_12bcc = icmp eq i32 %v1_12bc8, %arg2
  br i1 %v9_12bcc, label %dec_label_pc_12bac, label %dec_label_pc_12bd4

dec_label_pc_12bd4:                               ; preds = %dec_label_pc_12bc8, %dec_label_pc_12bbc
  %v0_12bf4 = phi i32 [ %v1_12bc8, %dec_label_pc_12bc8 ], [ 0, %dec_label_pc_12bbc ]
  %v0_12be0 = phi i32 [ %v1_12be0., %dec_label_pc_12bc8 ], [ 0, %dec_label_pc_12bbc ]
  %v2_12bd4 = add i32 %v0_12be0, %arg3
  %v3_12bd4 = inttoptr i32 %v2_12bd4 to i8*
  %v4_12bd4 = load i8, i8* %v3_12bd4, align 1
  %v2_12bd8 = add i32 %v0_12bf4, %arg1
  %v3_12bd8 = inttoptr i32 %v2_12bd8 to i8*
  %v4_12bd8 = load i8, i8* %v3_12bd8, align 1
  %v9_12bdc = icmp eq i8 %v4_12bd8, %v4_12bd4
  %v1_12be0 = add i32 %v0_12be0, 1
  %v1_12be0. = select i1 %v9_12bdc, i32 %v1_12be0, i32 0
  br i1 %v9_12bdc, label %dec_label_pc_12bec, label %dec_label_pc_12bc8

dec_label_pc_12bec:                               ; preds = %dec_label_pc_12bd4
  %v9_12bec = icmp eq i32 %v1_12be0., %arg4
  br i1 %v9_12bec, label %dec_label_pc_12bf4, label %dec_label_pc_12bc8

dec_label_pc_12bf4:                               ; preds = %dec_label_pc_12bec
  %v1_12bf4 = add i32 %v0_12bf4, 1
  ret i32 %v1_12bf4

; uselistorder directives
  uselistorder i1 %v9_12bdc, { 1, 0 }
  uselistorder i32 %v0_12be0, { 1, 0 }
  uselistorder i32 %arg4, { 0, 2, 1 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_12bac, { 0, 2, 1 }
}

define i32 @function_12bfc(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12bfc:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  %v3_12bfc = load i32, i32* @r4, align 4
  store i32 %v3_12bfc, i32* %stack_var_-28, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12c08

dec_label_pc_12c08:                               ; preds = %.thread, %dec_label_pc_12c20, %bb, %dec_label_pc_12bfc
  %v0_12c08 = phi i32 [ %tmp, %dec_label_pc_12bfc ], [ %v5_12c08, %bb ], [ %v5_12c08, %dec_label_pc_12c20 ], [ %v5_12c08, %.thread ]
  %v1_12c08 = inttoptr i32 %v0_12c08 to i8*
  %v2_12c08 = load i8, i8* %v1_12c08, align 1
  %v3_12c08 = zext i8 %v2_12c08 to i32
  %v5_12c08 = add i32 %v0_12c08, 1
  store i32 %v5_12c08, i32* %r5.global-to-local, align 4
  %v7_12c10 = icmp eq i8 %v2_12c08, 9
  br i1 %v7_12c10, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_12c08
  store i32 %v3_12c08, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12c08

bb:                                               ; preds = %dec_label_pc_12c08
  %v8_12c14 = icmp eq i8 %v2_12c08, 32
  store i32 %v3_12c08, i32* %r4.global-to-local, align 4
  br i1 %v8_12c14, label %dec_label_pc_12c08, label %dec_label_pc_12c20

dec_label_pc_12c20:                               ; preds = %bb
  %v7_12c20 = icmp eq i8 %v2_12c08, 10
  br i1 %v7_12c20, label %dec_label_pc_12c08, label %dec_label_pc_12c28

dec_label_pc_12c28:                               ; preds = %dec_label_pc_12c20
  %v7_12c28 = icmp eq i8 %v2_12c08, 45
  br i1 %v7_12c28, label %dec_label_pc_12d08, label %dec_label_pc_12c30

dec_label_pc_12c30:                               ; preds = %dec_label_pc_12c28
  %v7_12c30 = icmp eq i8 %v2_12c08, 43
  br i1 %v7_12c30, label %bb48, label %dec_label_pc_12c40

bb48:                                             ; preds = %dec_label_pc_12c30
  %v2_12c34 = inttoptr i32 %v5_12c08 to i8*
  %v3_12c34 = load i8, i8* %v2_12c34, align 1
  %v4_12c34 = zext i8 %v3_12c34 to i32
  store i32 %v4_12c34, i32* %r4.global-to-local, align 4
  %v6_12c34 = add i32 %v0_12c08, 2
  store i32 %v6_12c34, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12c40

dec_label_pc_12c40:                               ; preds = %bb48, %dec_label_pc_12c30, %dec_label_pc_12d08
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_12d08 ], [ 2147483647, %dec_label_pc_12c30 ], [ 2147483647, %bb48 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_12d08 ], [ 0, %dec_label_pc_12c30 ], [ 0, %bb48 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_12c48 = call i32 @function_131ec(i32 %storemerge1, i32 %arg2)
  %v0_12c4c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_12c4c, i32* @r1, align 4
  store i32 %v2_12c48, i32* %r8.global-to-local, align 4
  store i32 %storemerge1, i32* @r0, align 4
  %v0_12c58 = call i32 @function_130dc()
  store i32 %v0_12c58, i32* @lr, align 4
  %v0_12c68.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12c68

dec_label_pc_12c68:                               ; preds = %.thread8, %dec_label_pc_12c40
  %v2_12ce411 = phi i32 [ %v1_12d0026, %.thread8 ], [ 0, %dec_label_pc_12c40 ]
  %v1_12cc0 = phi i32 [ %v0_12cf424, %.thread8 ], [ 0, %dec_label_pc_12c40 ]
  %v1_12ca8 = phi i32 [ %v3_12cec, %.thread8 ], [ %v0_12c68.pre, %dec_label_pc_12c40 ]
  %v1_12c68 = urem i32 %v1_12ca8, 256
  %v1_12c6c = add nsw i32 %v1_12c68, -48
  %v1_12c74 = add nsw i32 %v1_12c68, -97
  %v1_12c78 = add i32 %v1_12ca8, -48
  %v1_12c7c = add nsw i32 %v1_12c68, -65
  %tmp71 = icmp ult i32 %v1_12c6c, 10
  br i1 %tmp71, label %dec_label_pc_12cac, label %dec_label_pc_12c84

dec_label_pc_12c84:                               ; preds = %dec_label_pc_12c68
  %v2_12c84 = icmp ugt i32 %v1_12c7c, 24
  %v7_12c84 = icmp eq i32 %v1_12c7c, 25
  %v2_12c88 = xor i1 %v7_12c84, true
  %v3_12c88 = and i1 %v2_12c84, %v2_12c88
  br i1 %v3_12c88, label %bb49, label %bb50

bb49:                                             ; preds = %dec_label_pc_12c84
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_12c84, %bb49
  %v0_12c9c20 = phi i32 [ %v1_12c78, %dec_label_pc_12c84 ], [ 0, %bb49 ]
  %v2_12c8c = xor i1 %v2_12c84, true
  %v3_12c8c = or i1 %v7_12c84, %v2_12c8c
  br i1 %v3_12c8c, label %bb51, label %bb52

bb51:                                             ; preds = %bb50
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v0_12c9c = phi i32 [ %v0_12c9c20, %bb50 ], [ 1, %bb51 ]
  br i1 %v3_12c88, label %bb53, label %bb54

bb53:                                             ; preds = %bb52
  %v6_12c94 = icmp ugt i32 %v1_12c74, 24
  %v11_12c94 = icmp eq i32 %v1_12c74, 25
  br label %bb54

bb54:                                             ; preds = %bb52, %bb53
  %v1_12c98 = phi i1 [ %v7_12c84, %bb52 ], [ %v11_12c94, %bb53 ]
  %v0_12c98 = phi i1 [ %v2_12c84, %bb52 ], [ %v6_12c94, %bb53 ]
  %v2_12c98 = xor i1 %v1_12c98, true
  %v3_12c98 = and i1 %v0_12c98, %v2_12c98
  br i1 %v3_12c98, label %dec_label_pc_12cf4, label %dec_label_pc_12c9c

dec_label_pc_12c9c:                               ; preds = %bb54
  %v2_12c9c = icmp eq i32 %v0_12c9c, 0
  %. = select i1 %v2_12c9c, i32 87, i32 55
  %v2_12ca8 = sub i32 %v1_12ca8, %.
  br label %dec_label_pc_12cac

dec_label_pc_12cac:                               ; preds = %dec_label_pc_12c68, %dec_label_pc_12c9c
  %v0_12cc034 = phi i32 [ %v1_12c7c, %dec_label_pc_12c68 ], [ %., %dec_label_pc_12c9c ]
  %v3_12ce412 = phi i32 [ %v1_12c78, %dec_label_pc_12c68 ], [ %v2_12ca8, %dec_label_pc_12c9c ]
  %v1_12cac = load i32, i32* %r6.global-to-local, align 4
  %v6_12cb0 = icmp slt i32 %v3_12ce412, %v1_12cac
  br i1 %v6_12cb0, label %dec_label_pc_12cb4, label %dec_label_pc_12cf4

dec_label_pc_12cb4:                               ; preds = %dec_label_pc_12cac
  %v3_12cb4 = icmp uge i32 %v2_12ce411, %v0_12c58
  %v9_12cb4 = icmp eq i32 %v2_12ce411, %v0_12c58
  %v2_12cb8 = xor i1 %v3_12cb4, true
  %v3_12cb8 = or i1 %v9_12cb4, %v2_12cb8
  br i1 %v3_12cb8, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_12cb4
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_12cb4, %bb57
  %v0_12cc033 = phi i32 [ %v0_12cc034, %dec_label_pc_12cb4 ], [ 0, %bb57 ]
  %v2_12cbc = xor i1 %v9_12cb4, true
  %v3_12cbc = and i1 %v3_12cb4, %v2_12cbc
  br i1 %v3_12cbc, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v0_12cc0 = phi i32 [ %v0_12cc033, %bb58 ], [ 1, %bb59 ]
  %tmp72 = icmp slt i32 %v1_12cc0, 0
  %v4_12cc0 = zext i1 %tmp72 to i32
  %v5_12cc0 = or i32 %v0_12cc0, %v4_12cc0
  %v7_12cc0 = icmp eq i32 %v5_12cc0, 0
  br i1 %v7_12cc0, label %dec_label_pc_12ccc, label %.thread8

dec_label_pc_12ccc:                               ; preds = %bb60
  %v1_12cd8 = load i32, i32* %r8.global-to-local, align 4
  %v7_12cdc = icmp sgt i32 %v3_12ce412, %v1_12cd8
  br i1 %v7_12cdc, label %bb63, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_12ccc
  br label %bb64

bb63:                                             ; preds = %dec_label_pc_12ccc
  %v2_12ce0 = icmp eq i1 %v9_12cb4, false
  br i1 %v2_12ce0, label %bb64, label %.thread8

bb64:                                             ; preds = %bb63, %.thread5
  %v4_12ce413 = mul i32 %v1_12cac, %v2_12ce411
  %v5_12ce414 = add i32 %v4_12ce413, %v3_12ce412
  br label %.thread8

.thread8:                                         ; preds = %bb63, %bb60, %bb64
  %v1_12d0026 = phi i32 [ %v2_12ce411, %bb63 ], [ %v2_12ce411, %bb60 ], [ %v5_12ce414, %bb64 ]
  %v0_12cf424 = phi i32 [ -1, %bb63 ], [ -1, %bb60 ], [ 1, %bb64 ]
  %v0_12cec = load i32, i32* %r5.global-to-local, align 4
  %v1_12cec = inttoptr i32 %v0_12cec to i8*
  %v2_12cec = load i8, i8* %v1_12cec, align 1
  %v3_12cec = zext i8 %v2_12cec to i32
  store i32 %v3_12cec, i32* %r4.global-to-local, align 4
  %v5_12cec = add i32 %v0_12cec, 1
  store i32 %v5_12cec, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12c68

dec_label_pc_12cf4:                               ; preds = %dec_label_pc_12cac, %bb54
  %v1_12cf4 = icmp slt i32 %v1_12cc0, 0
  %v0_12d18 = load i32, i32* %sl.global-to-local, align 4
  %v2_12d18 = icmp eq i32 %v0_12d18, 0
  br i1 %v1_12cf4, label %dec_label_pc_12d18, label %dec_label_pc_12cfc

dec_label_pc_12cfc:                               ; preds = %dec_label_pc_12cf4
  br i1 %v2_12d18, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_12cfc
  %v2_12d00 = sub i32 0, %v2_12ce411
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_12cfc, %bb65
  %v23_12d04 = phi i32 [ %v2_12ce411, %dec_label_pc_12cfc ], [ %v2_12d00, %bb65 ]
  %v2_12d04 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_12d04, i32* @r4, align 4
  ret i32 %v23_12d04

dec_label_pc_12d08:                               ; preds = %dec_label_pc_12c28
  %v1_12d08 = inttoptr i32 %v5_12c08 to i8*
  %v2_12d08 = load i8, i8* %v1_12d08, align 1
  %v3_12d08 = zext i8 %v2_12d08 to i32
  store i32 %v3_12d08, i32* %r4.global-to-local, align 4
  %v5_12d08 = add i32 %v0_12c08, 2
  store i32 %v5_12d08, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12c40

dec_label_pc_12d18:                               ; preds = %dec_label_pc_12cf4
  %.70 = select i1 %v2_12d18, i32 2147483647, i32 -2147483648
  %v2_12d24 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_12d24, i32* @r4, align 4
  ret i32 %.70

; uselistorder directives
  uselistorder i32 %v3_12cec, { 1, 0 }
  uselistorder i1 %v9_12cb4, { 1, 0, 2 }
  uselistorder i1 %v3_12cb4, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_12c84, { 1, 2, 0 }
  uselistorder i1 %v2_12c84, { 1, 0, 2 }
  uselistorder i32 %v1_12c68, { 1, 2, 0 }
  uselistorder i32 %v1_12ca8, { 1, 2, 0 }
  uselistorder i32 %v1_12cc0, { 1, 0 }
  uselistorder i32 %v2_12ce411, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_12c58, { 1, 0, 2 }
  uselistorder i32 %v5_12c08, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v3_12c08, { 1, 0 }
  uselistorder i32 %v0_12c08, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i8 9, { 7, 0, 5, 1, 2, 6, 3, 4 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %dec_label_pc_12cac, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_12c40, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12c08, { 1, 2, 0, 3 }
}

define i32 @function_12d28(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12d28:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_12d28 = load i32, i32* @r4, align 4
  store i32 %v3_12d28, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12d40

dec_label_pc_12d40:                               ; preds = %dec_label_pc_12d6c.dec_label_pc_12d40_crit_edge, %dec_label_pc_12d28
  %v0_12d44 = phi i32 [ %v0_12d44.pre, %dec_label_pc_12d6c.dec_label_pc_12d40_crit_edge ], [ %arg3, %dec_label_pc_12d28 ]
  %v0_12d40 = phi i32 [ %v1_12d58, %dec_label_pc_12d6c.dec_label_pc_12d40_crit_edge ], [ %tmp, %dec_label_pc_12d28 ]
  %tmp12 = inttoptr i32 %v0_12d40 to i32*
  %v5_12d4c = call i32 @function_13658(i32 %v0_12d44, i32* %tmp12, i32 1)
  %v7_12d50 = icmp eq i32 %v5_12d4c, 1
  %v0_12d54 = load i32, i32* @r4, align 4
  %v1_12d58 = add i32 %v0_12d54, 1
  store i32 %v1_12d58, i32* @r4, align 4
  %v0_12d60 = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_12d50, label %dec_label_pc_12d60, label %dec_label_pc_12d78

dec_label_pc_12d60:                               ; preds = %dec_label_pc_12d40
  %v1_12d60 = add i32 %v0_12d60, 1
  store i32 %v1_12d60, i32* %r5.global-to-local, align 4
  %v0_12d64 = load i32, i32* %r7.global-to-local, align 4
  %v7_12d68 = icmp sgt i32 %v0_12d64, %v1_12d60
  br i1 %v7_12d68, label %dec_label_pc_12d6c, label %dec_label_pc_12d78

dec_label_pc_12d6c:                               ; preds = %dec_label_pc_12d60
  %v1_12d6c = inttoptr i32 %v0_12d54 to i8*
  %v2_12d6c = load i8, i8* %v1_12d6c, align 1
  %v7_12d70 = icmp eq i8 %v2_12d6c, 10
  br i1 %v7_12d70, label %dec_label_pc_12d78, label %dec_label_pc_12d6c.dec_label_pc_12d40_crit_edge

dec_label_pc_12d6c.dec_label_pc_12d40_crit_edge:  ; preds = %dec_label_pc_12d6c
  %v0_12d44.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12d40

dec_label_pc_12d78:                               ; preds = %dec_label_pc_12d40, %dec_label_pc_12d6c, %dec_label_pc_12d60
  %v0_12d78 = phi i32 [ %v1_12d60, %dec_label_pc_12d6c ], [ %v1_12d60, %dec_label_pc_12d60 ], [ %v0_12d60, %dec_label_pc_12d40 ]
  %v2_12d78 = icmp eq i32 %v0_12d78, 0
  %v1_12d7c = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_12d78, i32 0, i32 %v1_12d7c
  %v2_12d84 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_12d84, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_12d58, { 1, 0 }
  uselistorder i8 10, { 8, 1, 0, 9, 7, 10, 2, 3, 4, 5, 6 }
  uselistorder i32 (i32, i32*, i32)* @function_13658, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_12d78, { 1, 2, 0 }
}

define i32 @function_12d88() local_unnamed_addr {
dec_label_pc_12d88:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_12d88 = load i32, i32* @r4, align 4
  store i32 16, i32* @r4, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_12d98 = call i32 @function_13a64()
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_12da0 = inttoptr i32 %v0_12d98 to i32*
  store i32 0, i32* %v2_12da0, align 4
  %v0_12dac = load i32, i32* %r6.global-to-local, align 4
  %v3_12db0 = call i32 @function_13d90(i32 2, i32 2, i32 %v0_12dac)
  %v7_12dbc = icmp eq i32 %v3_12db0, -1
  store i32 %v3_12db0, i32* %r5.global-to-local, align 4
  %v2_12dc8 = load i32, i32* @r4, align 4
  br i1 %v7_12dbc, label %dec_label_pc_12e18, label %dec_label_pc_12ddc

dec_label_pc_12ddc:                               ; preds = %dec_label_pc_12d88
  %v7_12dc8 = shl i32 2056, %v2_12dc8
  %v8_12dc8 = or i32 %v7_12dc8, 2056
  store i32 2, i32* %stack_var_-40, align 4
  %v3_12df8 = bitcast i32* %stack_var_-40 to %sockaddr*
  %v4_12df8 = call i32 @function_13bec(i32 %v3_12db0, %sockaddr* %v3_12df8, i32 %v2_12dc8)
  %v2_12e00 = ptrtoint i32* %stack_var_-24 to i32
  %v0_12e04 = load i32, i32* %r5.global-to-local, align 4
  %v4_12e08 = call i32 @function_13c18(i32 %v0_12e04, %sockaddr* %v3_12df8, i32 %v2_12e00)
  %v1_12e10 = call i32 @function_13490(i32 %v0_12e04)
  br label %dec_label_pc_12e18

dec_label_pc_12e18:                               ; preds = %dec_label_pc_12d88, %dec_label_pc_12ddc
  %v0_12e18 = phi i32 [ %v0_12dac, %dec_label_pc_12d88 ], [ %v8_12dc8, %dec_label_pc_12ddc ]
  store i32 %v3_12d88, i32* @r4, align 4
  ret i32 %v0_12e18

; uselistorder directives
  uselistorder i32 %v3_12db0, { 2, 1, 0 }
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_13bec, { 6, 0, 7, 2, 1, 3, 4, 5, 8 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_13d90, { 4, 18, 2, 3, 16, 17, 15, 14, 13, 12, 11, 10, 9, 1, 8, 7, 6, 5, 0 }
  uselistorder label %dec_label_pc_12e18, { 1, 0 }
}

define i32 @function_12e24(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12e24:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_12e28 = load i8, i8* %tmp, align 1
  %v2_12e2c = icmp eq i8 %v3_12e28, 0
  br i1 %v2_12e2c, label %bb, label %dec_label_pc_12e40

bb:                                               ; preds = %dec_label_pc_12e24
  %v4_12e28 = zext i8 %v3_12e28 to i32
  br label %dec_label_pc_12e54

dec_label_pc_12e40:                               ; preds = %dec_label_pc_12e24
  br label %dec_label_pc_12e44

dec_label_pc_12e44:                               ; preds = %dec_label_pc_12e44, %dec_label_pc_12e40
  %v0_12e44 = phi i32 [ %v1_12e44, %dec_label_pc_12e44 ], [ 0, %dec_label_pc_12e40 ]
  %v1_12e44 = add i32 %v0_12e44, 1
  %v2_12e48 = add i32 %v1_12e44, %arg2
  %v3_12e48 = inttoptr i32 %v2_12e48 to i8*
  %v4_12e48 = load i8, i8* %v3_12e48, align 1
  %v2_12e4c = icmp eq i8 %v4_12e48, 0
  br i1 %v2_12e4c, label %dec_label_pc_12e54, label %dec_label_pc_12e44

dec_label_pc_12e54:                               ; preds = %dec_label_pc_12e44, %bb
  %v0_12e9818 = phi i32 [ %v4_12e28, %bb ], [ %v1_12e44, %dec_label_pc_12e44 ]
  %v0_12e5c1 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_12e5c1, 1
  br i1 %tmp27, label %dec_label_pc_12ea8, label %dec_label_pc_12e68

dec_label_pc_12e68:                               ; preds = %dec_label_pc_12e54, %dec_label_pc_12e5c.backedge
  %v0_12e60.in = phi i32 [ %v0_12e60, %dec_label_pc_12e5c.backedge ], [ %v0_12e5c1, %dec_label_pc_12e54 ]
  %v0_12e8c = phi i32 [ %v1_12e8c., %dec_label_pc_12e5c.backedge ], [ 0, %dec_label_pc_12e54 ]
  %v0_12e68 = phi i32 [ %v5_12e68, %dec_label_pc_12e5c.backedge ], [ %tmp20, %dec_label_pc_12e54 ]
  %v0_12e60 = add i32 %v0_12e60.in, -1
  %v1_12e68 = inttoptr i32 %v0_12e68 to i8*
  %v2_12e68 = load i8, i8* %v1_12e68, align 1
  %v3_12e68 = zext i8 %v2_12e68 to i32
  store i32 %v3_12e68, i32* @lr, align 4
  %v5_12e68 = add i32 %v0_12e68, 1
  %v2_12e6c = add i32 %v0_12e8c, %arg2
  %v3_12e6c = inttoptr i32 %v2_12e6c to i8*
  %v4_12e6c = load i8, i8* %v3_12e6c, align 1
  %v6_12e6c = zext i8 %v4_12e6c to i32
  %v1_12e70 = add nsw i32 %v3_12e68, -65
  %v1_12e74 = add nsw i32 %v6_12e6c, -65
  %tmp35 = icmp ult i32 %v1_12e70, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_12e68
  %v5_12e7c = or i32 %v3_12e68, 96
  store i32 %v5_12e7c, i32* @lr, align 4
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_12e68, %bb28
  %v0_12e88 = phi i32 [ %v3_12e68, %dec_label_pc_12e68 ], [ %v5_12e7c, %bb28 ]
  %tmp36 = icmp ult i32 %v1_12e74, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_12e84 = or i32 %v6_12e6c, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_12e88 = phi i32 [ %v6_12e6c, %bb29 ], [ %v5_12e84, %bb30 ]
  %v9_12e88 = icmp eq i32 %v0_12e88, %v1_12e88
  %v1_12e8c = add i32 %v0_12e8c, 1
  %v1_12e8c. = select i1 %v9_12e88, i32 %v1_12e8c, i32 0
  br i1 %v9_12e88, label %dec_label_pc_12e98, label %dec_label_pc_12e5c.backedge

dec_label_pc_12e5c.backedge:                      ; preds = %bb31, %dec_label_pc_12e98
  %tmp32 = icmp slt i32 %v0_12e60, 1
  br i1 %tmp32, label %dec_label_pc_12ea8, label %dec_label_pc_12e68

dec_label_pc_12e98:                               ; preds = %bb31
  %v9_12e98 = icmp eq i32 %v0_12e9818, %v1_12e8c.
  br i1 %v9_12e98, label %dec_label_pc_12ea0, label %dec_label_pc_12e5c.backedge

dec_label_pc_12ea0:                               ; preds = %dec_label_pc_12e98
  %v2_12ea0 = sub i32 %v5_12e68, %tmp20
  ret i32 %v2_12ea0

dec_label_pc_12ea8:                               ; preds = %dec_label_pc_12e5c.backedge, %dec_label_pc_12e54
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_12e8c., { 1, 0 }
  uselistorder i32 %v0_12e68, { 1, 0 }
  uselistorder i32 %v0_12e8c, { 1, 0 }
  uselistorder i8 %v3_12e28, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder label %dec_label_pc_12e5c.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_12e68, { 1, 0 }
}

define i32 @function_12eb0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12eb0:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_12eb0 = load i8, i8* %arg1, align 1
  %v2_12eb4 = icmp eq i8 %v2_12eb0, 0
  br i1 %v2_12eb4, label %bb, label %dec_label_pc_12ec0

bb:                                               ; preds = %dec_label_pc_12eb0
  %v3_12eb0 = zext i8 %v2_12eb0 to i32
  br label %dec_label_pc_12ed4

dec_label_pc_12ec0:                               ; preds = %dec_label_pc_12eb0
  br label %dec_label_pc_12ec4

dec_label_pc_12ec4:                               ; preds = %dec_label_pc_12ec4, %dec_label_pc_12ec0
  %v0_12ec4 = phi i32 [ %v1_12ec4, %dec_label_pc_12ec4 ], [ 0, %dec_label_pc_12ec0 ]
  %v1_12ec4 = add i32 %v0_12ec4, 1
  %v2_12ec8 = add i32 %v1_12ec4, %tmp
  %v3_12ec8 = inttoptr i32 %v2_12ec8 to i8*
  %v4_12ec8 = load i8, i8* %v3_12ec8, align 1
  %v2_12ecc = icmp eq i8 %v4_12ec8, 0
  br i1 %v2_12ecc, label %dec_label_pc_12ed4, label %dec_label_pc_12ec4

dec_label_pc_12ed4:                               ; preds = %dec_label_pc_12ec4, %bb
  %v1_12ef8 = phi i32 [ %v3_12eb0, %bb ], [ %v1_12ec4, %dec_label_pc_12ec4 ]
  %v1_12ed4 = inttoptr i32 %arg2 to i8*
  %v2_12ed4 = load i8, i8* %v1_12ed4, align 1
  %v3_12ed4 = zext i8 %v2_12ed4 to i32
  %v2_12ed8 = icmp eq i8 %v2_12ed4, 0
  br i1 %v2_12ed8, label %bb22, label %dec_label_pc_12ee4

bb22:                                             ; preds = %dec_label_pc_12ed4
  store i32 %v3_12ed4, i32* @r2, align 4
  br label %dec_label_pc_12ef8

dec_label_pc_12ee4:                               ; preds = %dec_label_pc_12ed4
  br label %dec_label_pc_12ee8

dec_label_pc_12ee8:                               ; preds = %dec_label_pc_12ee8, %dec_label_pc_12ee4
  %v0_12ee8 = phi i32 [ %v1_12ee8, %dec_label_pc_12ee8 ], [ 0, %dec_label_pc_12ee4 ]
  %v1_12ee8 = add i32 %v0_12ee8, 1
  store i32 %v1_12ee8, i32* @r2, align 4
  %v2_12eec = add i32 %v1_12ee8, %arg2
  %v3_12eec = inttoptr i32 %v2_12eec to i8*
  %v4_12eec = load i8, i8* %v3_12eec, align 1
  %v2_12ef0 = icmp eq i8 %v4_12eec, 0
  br i1 %v2_12ef0, label %dec_label_pc_12ef8, label %dec_label_pc_12ee8

dec_label_pc_12ef8:                               ; preds = %dec_label_pc_12ee8, %bb22
  %v0_12f244 = phi i32 [ %v3_12ed4, %bb22 ], [ %v1_12ee8, %dec_label_pc_12ee8 ]
  %v9_12ef8 = icmp eq i32 %v0_12f244, %v1_12ef8
  br i1 %v9_12ef8, label %dec_label_pc_12f24.preheader, label %dec_label_pc_12f04

dec_label_pc_12f24.preheader:                     ; preds = %dec_label_pc_12ef8
  %v2_12f246 = icmp eq i32 %v1_12ef8, 0
  br i1 %v2_12f246, label %dec_label_pc_12f2c, label %dec_label_pc_12f0c

dec_label_pc_12f04:                               ; preds = %dec_label_pc_12f0c, %dec_label_pc_12ef8
  ret i32 0

dec_label_pc_12f0c:                               ; preds = %dec_label_pc_12f1c, %dec_label_pc_12f24.preheader
  %v0_12f24.in = phi i32 [ %v0_12f24, %dec_label_pc_12f1c ], [ %v1_12ef8, %dec_label_pc_12f24.preheader ]
  %v0_12f20 = phi i32 [ %v1_12f20, %dec_label_pc_12f1c ], [ %arg2, %dec_label_pc_12f24.preheader ]
  %v0_12f1c = phi i32 [ %v1_12f1c, %dec_label_pc_12f1c ], [ %tmp, %dec_label_pc_12f24.preheader ]
  %v0_12f24 = add i32 %v0_12f24.in, -1
  %v1_12f0c = inttoptr i32 %v0_12f1c to i8*
  %v2_12f0c = load i8, i8* %v1_12f0c, align 1
  %v3_12f0c = zext i8 %v2_12f0c to i32
  store i32 %v3_12f0c, i32* @r2, align 4
  %v1_12f10 = inttoptr i32 %v0_12f20 to i8*
  %v2_12f10 = load i8, i8* %v1_12f10, align 1
  %v9_12f14 = icmp eq i8 %v2_12f0c, %v2_12f10
  br i1 %v9_12f14, label %dec_label_pc_12f1c, label %dec_label_pc_12f04

dec_label_pc_12f1c:                               ; preds = %dec_label_pc_12f0c
  %v1_12f1c = add i32 %v0_12f1c, 1
  %v1_12f20 = add i32 %v0_12f20, 1
  %v2_12f24 = icmp eq i32 %v0_12f24, 0
  br i1 %v2_12f24, label %dec_label_pc_12f2c, label %dec_label_pc_12f0c

dec_label_pc_12f2c:                               ; preds = %dec_label_pc_12f1c, %dec_label_pc_12f24.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_12ee8, { 0, 1, 3, 2 }
  uselistorder i8 %v2_12eb0, { 1, 0 }
}

define i32 @function_12f34(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12f34:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_12f38 = load i8, i8* %arg1, align 1
  %v2_12f3c = icmp eq i8 %v2_12f38, 0
  %v0_12f40 = load i32, i32* %r2.global-to-local, align 4
  br i1 %v2_12f3c, label %bb, label %dec_label_pc_12f4c

bb:                                               ; preds = %dec_label_pc_12f34
  %v3_12f38 = zext i8 %v2_12f38 to i32
  br label %dec_label_pc_12f60

dec_label_pc_12f4c:                               ; preds = %dec_label_pc_12f34
  br label %dec_label_pc_12f50

dec_label_pc_12f50:                               ; preds = %dec_label_pc_12f50, %dec_label_pc_12f4c
  %v0_12f50 = phi i32 [ %v1_12f50, %dec_label_pc_12f50 ], [ 0, %dec_label_pc_12f4c ]
  %v1_12f50 = add i32 %v0_12f50, 1
  %v2_12f54 = add i32 %v1_12f50, %tmp
  %v3_12f54 = inttoptr i32 %v2_12f54 to i8*
  %v4_12f54 = load i8, i8* %v3_12f54, align 1
  %v2_12f58 = icmp eq i8 %v4_12f54, 0
  br i1 %v2_12f58, label %dec_label_pc_12f60, label %dec_label_pc_12f50

dec_label_pc_12f60:                               ; preds = %dec_label_pc_12f50, %bb
  %v9_12f88 = phi i32 [ %v3_12f38, %bb ], [ %v1_12f50, %dec_label_pc_12f50 ]
  %v0_12f60 = load i32, i32* %r1.global-to-local, align 4
  %v1_12f60 = inttoptr i32 %v0_12f60 to i8*
  %v2_12f60 = load i8, i8* %v1_12f60, align 1
  %v3_12f60 = zext i8 %v2_12f60 to i32
  %v2_12f64 = icmp eq i8 %v2_12f60, 0
  br i1 %v2_12f64, label %bb26, label %dec_label_pc_12f70

bb26:                                             ; preds = %dec_label_pc_12f60
  store i32 %v3_12f60, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12f84

dec_label_pc_12f70:                               ; preds = %dec_label_pc_12f60
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12f74

dec_label_pc_12f74:                               ; preds = %dec_label_pc_12f74, %dec_label_pc_12f70
  %v0_12f74 = phi i32 [ %v1_12f74, %dec_label_pc_12f74 ], [ 0, %dec_label_pc_12f70 ]
  %v1_12f74 = add i32 %v0_12f74, 1
  store i32 %v1_12f74, i32* %r2.global-to-local, align 4
  %v2_12f78 = add i32 %v1_12f74, %v0_12f60
  %v3_12f78 = inttoptr i32 %v2_12f78 to i8*
  %v4_12f78 = load i8, i8* %v3_12f78, align 1
  %v2_12f7c = icmp eq i8 %v4_12f78, 0
  br i1 %v2_12f7c, label %dec_label_pc_12f84, label %dec_label_pc_12f74

dec_label_pc_12f84:                               ; preds = %dec_label_pc_12f74, %bb26
  %v1_12f84 = phi i32 [ %v3_12f60, %bb26 ], [ %v1_12f74, %dec_label_pc_12f74 ]
  %v2_12f84 = sub i32 %v0_12f40, %v1_12f84
  %v4_12f84 = xor i32 %v1_12f84, %v0_12f40
  %v5_12f84 = xor i32 %v2_12f84, %v0_12f40
  %v6_12f84 = and i32 %v5_12f84, %v4_12f84
  %v7_12f88 = icmp sgt i32 %v0_12f40, %v1_12f84
  br i1 %v7_12f88, label %bb28, label %bb27

bb27:                                             ; preds = %dec_label_pc_12f84
  %v10_12f88 = sub i32 %v0_12f40, %v9_12f88
  %v12_12f88 = xor i32 %v9_12f88, %v0_12f40
  %v13_12f88 = xor i32 %v10_12f88, %v0_12f40
  %v14_12f88 = and i32 %v13_12f88, %v12_12f88
  br label %bb28

bb28:                                             ; preds = %dec_label_pc_12f84, %bb27
  %v2_12f8c.in = phi i32 [ %v6_12f84, %dec_label_pc_12f84 ], [ %v14_12f88, %bb27 ]
  %v1_12f8c.in = phi i32 [ %v2_12f84, %dec_label_pc_12f84 ], [ %v10_12f88, %bb27 ]
  %v1_12f84.pn = phi i32 [ %v1_12f84, %dec_label_pc_12f84 ], [ %v9_12f88, %bb27 ]
  %v0_12f8c = icmp eq i32 %v0_12f40, %v1_12f84.pn
  %v1_12f8c = icmp slt i32 %v1_12f8c.in, 0
  %v2_12f8c = icmp slt i32 %v2_12f8c.in, 0
  %v3_12f8c = xor i1 %v2_12f8c, %v1_12f8c
  %v4_12f8c = or i1 %v0_12f8c, %v3_12f8c
  br i1 %v4_12f8c, label %dec_label_pc_12f9c.preheader, label %dec_label_pc_12fb4

dec_label_pc_12f9c.preheader:                     ; preds = %bb28
  %v2_12f9c5 = icmp eq i32 %v0_12f40, 0
  br i1 %v2_12f9c5, label %dec_label_pc_12fbc, label %dec_label_pc_12fa4

dec_label_pc_12f94:                               ; preds = %dec_label_pc_12fa4
  %v1_12f94 = add i32 %v0_12f94, 1
  %v1_12f98 = add i32 %v0_12f98, 1
  store i32 %v1_12f98, i32* %r1.global-to-local, align 4
  %v2_12f9c = icmp eq i32 %v0_12f9c, 0
  br i1 %v2_12f9c, label %dec_label_pc_12fbc, label %dec_label_pc_12fa4

dec_label_pc_12fa4:                               ; preds = %dec_label_pc_12f94, %dec_label_pc_12f9c.preheader
  %v0_12f9c.in = phi i32 [ %v0_12f9c, %dec_label_pc_12f94 ], [ %v0_12f40, %dec_label_pc_12f9c.preheader ]
  %v0_12f98 = phi i32 [ %v1_12f98, %dec_label_pc_12f94 ], [ %v0_12f60, %dec_label_pc_12f9c.preheader ]
  %v0_12f94 = phi i32 [ %v1_12f94, %dec_label_pc_12f94 ], [ %tmp, %dec_label_pc_12f9c.preheader ]
  %v0_12f9c = add i32 %v0_12f9c.in, -1
  %v1_12fa4 = inttoptr i32 %v0_12f94 to i8*
  %v2_12fa4 = load i8, i8* %v1_12fa4, align 1
  %v3_12fa4 = zext i8 %v2_12fa4 to i32
  store i32 %v3_12fa4, i32* %r2.global-to-local, align 4
  %v1_12fa8 = inttoptr i32 %v0_12f98 to i8*
  %v2_12fa8 = load i8, i8* %v1_12fa8, align 1
  %v9_12fac = icmp eq i8 %v2_12fa4, %v2_12fa8
  br i1 %v9_12fac, label %dec_label_pc_12f94, label %dec_label_pc_12fb4

dec_label_pc_12fb4:                               ; preds = %dec_label_pc_12fa4, %bb28
  ret i32 0

dec_label_pc_12fbc:                               ; preds = %dec_label_pc_12f94, %dec_label_pc_12f9c.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v0_12f94, { 1, 0 }
  uselistorder i32 %v0_12f98, { 1, 0 }
  uselistorder i32 %v1_12f84, { 0, 3, 1, 2 }
  uselistorder i32 %v1_12f74, { 0, 1, 3, 2 }
  uselistorder i32 %v0_12f40, { 0, 6, 1, 2, 3, 7, 9, 4, 5, 8 }
  uselistorder i8 %v2_12f38, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 5, 4, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %bb28, { 1, 0 }
}

define i32 @function_12fc4(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12fc4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* @r2, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_12fc4 = load i32, i32* @r4, align 4
  store i32 %v3_12fc4, i32* %stack_var_-28, align 4
  %v22_12fc4 = ptrtoint i32* %stack_var_-28 to i32
  %v0_12fc8 = load i32, i32* @r2, align 4
  store i32 %v0_12fc8, i32* %r8.global-to-local, align 4
  %v2_12fc8 = icmp eq i32 %v0_12fc8, 0
  store i1 %v2_12fc8, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_12fc8, label %dec_label_pc_130b8, label %dec_label_pc_12fd8

dec_label_pc_12fd8:                               ; preds = %dec_label_pc_12fc4
  %v3_12fd8 = icmp eq i8 %arg1, 0
  store i1 %v3_12fd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_12fd8, label %.thread, label %dec_label_pc_12fec

.thread:                                          ; preds = %dec_label_pc_12fd8
  %v4_12fe0 = inttoptr i32 %v0_12fc8 to i8*
  store i8 48, i8* %v4_12fe0, align 1
  %v0_12fe4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_12fe4.pr.pr, label %.thread1, label %dec_label_pc_12fec

.thread1:                                         ; preds = %.thread
  %v4_12fe4 = load i32, i32* %r8.global-to-local, align 4
  %v5_12fe4 = add i32 %v4_12fe4, 1
  %v6_12fe4 = inttoptr i32 %v5_12fe4 to i8*
  store i8 0, i8* %v6_12fe4, align 1
  %v0_12fe8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_12fe8.pr.pr, label %dec_label_pc_130b8, label %dec_label_pc_12fec

dec_label_pc_12fec:                               ; preds = %dec_label_pc_12fd8, %.thread, %.thread1
  %v7_12ff0 = icmp eq i32 %arg2, 10
  store i1 %v7_12ff0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12ff0, label %bb, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_12fec
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_12fec
  %tmp39 = icmp slt i8 %arg1, 0
  %phitmp = icmp eq i1 %tmp39, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_13014

.thread4:                                         ; preds = %bb, %.thread21
  store i32 %tmp, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13024

dec_label_pc_13014:                               ; preds = %bb
  %v2_13014 = sub nsw i32 0, %tmp
  store i32 %v2_13014, i32* %r4.global-to-local, align 4
  store i1 %v3_12fd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_12fd8, label %dec_label_pc_130c4, label %dec_label_pc_13024

dec_label_pc_13024:                               ; preds = %dec_label_pc_13014, %.thread4
  %v0_1302c10 = phi i32 [ %tmp, %.thread4 ], [ %v2_13014, %dec_label_pc_13014 ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_13014 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_13028 = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_13028, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1302c

dec_label_pc_1302c:                               ; preds = %bb37, %dec_label_pc_13024
  %v0_1302c = phi i32 [ %v0_13050, %bb37 ], [ %v0_1302c10, %dec_label_pc_13024 ]
  store i32 %v0_1302c, i32* %r0.global-to-local, align 4
  %v0_13030 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13030, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_1302c, 16777216
  %v1_13034 = sdiv i32 %sext, 16777216
  %v3_13034 = call i32 @function_131ec(i32 %v1_13034, i32 %v0_13030)
  store i32 %v3_13034, i32* %r0.global-to-local, align 4
  %v7_13038 = icmp eq i32 %v3_13034, 9
  store i1 %v7_13038, i1* %cpsr_z.global-to-local, align 1
  %v1_1303c = add i32 %v3_13034, 48
  %v0_13040 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13040, i32* @r1, align 4
  %v7_13044 = icmp sgt i32 %v3_13034, 9
  %extract.t = trunc i32 %v1_1303c to i8
  br i1 %v7_13044, label %bb36, label %bb37

bb36:                                             ; preds = %dec_label_pc_1302c
  %v9_13044 = add i32 %v3_13034, 55
  %extract.t20 = trunc i32 %v9_13044 to i8
  br label %bb37

bb37:                                             ; preds = %dec_label_pc_1302c, %bb36
  %v0_1304c.off0 = phi i8 [ %extract.t, %dec_label_pc_1302c ], [ %extract.t20, %bb36 ]
  %v0_13048 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13048, i32* @r0, align 4
  %v2_1304c = load i32, i32* %r7.global-to-local, align 4
  %v3_1304c = inttoptr i32 %v2_1304c to i8*
  store i8 %v0_1304c.off0, i8* %v3_1304c, align 1
  %v4_1304c = load i32, i32* %r7.global-to-local, align 4
  %v5_1304c = add i32 %v4_1304c, -1
  store i32 %v5_1304c, i32* %r7.global-to-local, align 4
  %v0_13050 = call i32 @function_130dc()
  store i32 %v0_13050, i32* %r0.global-to-local, align 4
  store i32 %v0_13050, i32* %r4.global-to-local, align 4
  %v2_13054 = icmp eq i32 %v0_13050, 0
  store i1 %v2_13054, i1* %cpsr_z.global-to-local, align 1
  %v0_13058 = load i32, i32* %r6.global-to-local, align 4
  %v1_13058 = add i32 %v0_13058, -1
  store i32 %v1_13058, i32* %r6.global-to-local, align 4
  br i1 %v2_13054, label %dec_label_pc_13060, label %dec_label_pc_1302c

dec_label_pc_13060:                               ; preds = %bb37
  %v0_13060 = load i32, i32* %sl.global-to-local, align 4
  %v2_13060 = icmp eq i32 %v0_13060, 0
  store i1 %v2_13060, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13060, label %bb38, label %dec_label_pc_130c8

bb38:                                             ; preds = %dec_label_pc_13060
  store i32 %v0_13058, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1306c

dec_label_pc_1306c:                               ; preds = %bb38, %dec_label_pc_130c8
  %v1_13078 = phi i32 [ %v0_13058, %bb38 ], [ %v1_13070.pre, %dec_label_pc_130c8 ]
  %v2_1306c = ptrtoint i32* %stack_var_-62 to i32
  %v2_13070 = add i32 %v1_13078, %v2_1306c
  %v3_13070 = inttoptr i32 %v2_13070 to i8*
  %v4_13070 = load i8, i8* %v3_13070, align 1
  %v6_13070 = zext i8 %v4_13070 to i32
  %v2_13074 = icmp eq i8 %v4_13070, 0
  store i1 %v2_13074, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_13070, i32* %r1.global-to-local, align 4
  br i1 %v2_13074, label %dec_label_pc_1309c, label %dec_label_pc_13080

dec_label_pc_13080:                               ; preds = %dec_label_pc_1306c
  br label %dec_label_pc_13084

dec_label_pc_13084:                               ; preds = %dec_label_pc_13084, %dec_label_pc_13080
  %v0_13084 = phi i32 [ %v1_13084, %dec_label_pc_13084 ], [ 0, %dec_label_pc_13080 ]
  %v1_13084 = add i32 %v0_13084, 1
  store i32 %v1_13084, i32* @r2, align 4
  %v2_13088 = add i32 %v1_13084, %v2_13070
  %v3_13088 = inttoptr i32 %v2_13088 to i8*
  %v4_13088 = load i8, i8* %v3_13088, align 1
  %v2_1308c = icmp eq i8 %v4_13088, 0
  store i1 %v2_1308c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1308c, label %dec_label_pc_13094, label %dec_label_pc_13084

dec_label_pc_13094:                               ; preds = %dec_label_pc_13084
  %v7_13094 = icmp eq i32 %v0_13084, -2
  store i1 %v7_13094, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13094, label %dec_label_pc_130b8, label %dec_label_pc_1309c

dec_label_pc_1309c:                               ; preds = %dec_label_pc_13094, %dec_label_pc_1306c
  %v0_130a417 = phi i32 [ %v1_13084, %dec_label_pc_13094 ], [ %v6_13070, %dec_label_pc_1306c ]
  store i32 %v2_13070, i32* %r0.global-to-local, align 4
  %v0_130a0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_130a0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_130a4

dec_label_pc_130a4:                               ; preds = %dec_label_pc_130a4.dec_label_pc_130a4_crit_edge, %dec_label_pc_1309c
  %v2_130b0 = phi i32 [ %v5_130b0, %dec_label_pc_130a4.dec_label_pc_130a4_crit_edge ], [ %v0_130a0, %dec_label_pc_1309c ]
  %v0_130a8 = phi i32 [ %v0_130a8.pre, %dec_label_pc_130a4.dec_label_pc_130a4_crit_edge ], [ %v2_13070, %dec_label_pc_1309c ]
  %v0_130a4 = phi i32 [ %v0_130a4.pre, %dec_label_pc_130a4.dec_label_pc_130a4_crit_edge ], [ %v0_130a417, %dec_label_pc_1309c ]
  %v1_130a4 = add i32 %v0_130a4, -1
  store i32 %v1_130a4, i32* @r2, align 4
  %v1_130a8 = inttoptr i32 %v0_130a8 to i8*
  %v2_130a8 = load i8, i8* %v1_130a8, align 1
  %v5_130a8 = add i32 %v0_130a8, 1
  store i32 %v5_130a8, i32* %r0.global-to-local, align 4
  %v3_130ac = icmp eq i32 %v0_130a4, 0
  store i1 %v3_130ac, i1* %cpsr_z.global-to-local, align 1
  %v3_130b0 = inttoptr i32 %v2_130b0 to i8*
  store i8 %v2_130a8, i8* %v3_130b0, align 1
  %v4_130b0 = load i32, i32* %r1.global-to-local, align 4
  %v5_130b0 = add i32 %v4_130b0, 1
  store i32 %v5_130b0, i32* %r1.global-to-local, align 4
  br i1 %v3_130ac, label %dec_label_pc_130b8, label %dec_label_pc_130a4.dec_label_pc_130a4_crit_edge

dec_label_pc_130a4.dec_label_pc_130a4_crit_edge:  ; preds = %dec_label_pc_130a4
  %v0_130a4.pre = load i32, i32* @r2, align 4
  %v0_130a8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_130a4

dec_label_pc_130b8:                               ; preds = %dec_label_pc_130a4, %dec_label_pc_13094, %.thread1, %dec_label_pc_12fc4
  %v0_130b8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_130b8, i32* %r0.global-to-local, align 4
  %v2_130c0 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_130c0, i32* @r4, align 4
  ret i32 %v0_130b8

dec_label_pc_130c4:                               ; preds = %dec_label_pc_13014
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_130c8

dec_label_pc_130c8:                               ; preds = %dec_label_pc_13060, %dec_label_pc_130c4
  %v1_130cc = phi i32 [ %v1_13058, %dec_label_pc_13060 ], [ 32, %dec_label_pc_130c4 ]
  %v2_130cc = add i32 %v1_130cc, %v22_12fc4
  %v3_130d4 = add i32 %v2_130cc, -34
  %v4_130d4 = inttoptr i32 %v3_130d4 to i8*
  store i8 45, i8* %v4_130d4, align 1
  %v1_13070.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1306c

; uselistorder directives
  uselistorder i32 %v5_130b0, { 1, 0 }
  uselistorder i1 %v3_130ac, { 1, 0 }
  uselistorder i32 %v0_130a8, { 1, 0 }
  uselistorder i1 %v7_13094, { 1, 0 }
  uselistorder i32 %v1_13084, { 0, 1, 3, 2 }
  uselistorder i32 %v2_13070, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_13050, { 1, 2, 3, 0 }
  uselistorder i32 %v3_13034, { 1, 0, 2, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_12fd8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12fc8, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 2, 4, 5, 7, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_130c8, { 1, 0 }
  uselistorder label %dec_label_pc_1306c, { 1, 0 }
  uselistorder label %bb37, { 1, 0 }
  uselistorder label %dec_label_pc_12fec, { 2, 1, 0 }
}

define i32 @function_130dc() local_unnamed_addr {
dec_label_pc_130dc:
  %v0_130dc = load i32, i32* @r1, align 4
  %v1_130dc = add i32 %v0_130dc, -1
  %v7_130dc = icmp eq i32 %v0_130dc, 1
  br i1 %v7_130dc, label %bb, label %bb82

bb:                                               ; preds = %dec_label_pc_130dc
  %v2_130e0 = load i32, i32* @r0, align 4
  ret i32 %v2_130e0

bb82:                                             ; preds = %dec_label_pc_130dc
  %v2_130dc = icmp eq i32 %v0_130dc, 0
  br i1 %v2_130dc, label %dec_label_pc_131c4, label %dec_label_pc_130e8

dec_label_pc_130e8:                               ; preds = %bb82
  %v0_130e8 = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_130e8, %v0_130dc
  br i1 %tmp, label %dec_label_pc_130f0, label %dec_label_pc_1317c

dec_label_pc_130f0:                               ; preds = %dec_label_pc_130e8
  %v2_130f0 = and i32 %v1_130dc, %v0_130dc
  %v4_130f0 = icmp eq i32 %v2_130f0, 0
  br i1 %v4_130f0, label %dec_label_pc_13188, label %dec_label_pc_130f8

dec_label_pc_130f8:                               ; preds = %dec_label_pc_130f0
  %v3_130f8 = icmp ult i32 %v0_130dc, 536870912
  br i1 %v3_130f8, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_130f8
  %v4_130fc = mul i32 %v0_130dc, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_130f8, %.thread
  %v0_1311c.pr36.ph = phi i32 [ %v4_130fc, %.thread ], [ %v0_130dc, %dec_label_pc_130f8 ]
  %storemerge137 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_130f8 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb85
  %v0_1311c.pr36 = phi i32 [ %v4_13110, %bb85 ], [ %v0_1311c.pr36.ph, %.preheader.preheader ]
  %v1_13114 = phi i32 [ %v4_13114, %bb85 ], [ %storemerge137, %.preheader.preheader ]
  %v2_13108 = icmp ugt i32 %v0_1311c.pr36, 268435455
  br i1 %v2_13108, label %.thread2, label %bb83

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_1311cthread-pre-split.loopexit

bb83:                                             ; preds = %.preheader
  %v4_1310c = icmp ult i32 %v0_1311c.pr36, %v0_130e8
  br i1 %v4_1310c, label %bb84, label %dec_label_pc_1311cthread-pre-split.loopexit.loopexit

bb84:                                             ; preds = %bb83
  %v2_13110 = and i32 %v0_1311c.pr36, 268435456
  %v3_13110 = icmp eq i32 %v2_13110, 0
  %v4_13110 = mul i32 %v0_1311c.pr36, 16
  br i1 %v3_13110, label %bb85, label %dec_label_pc_1311c.loopexit

bb85:                                             ; preds = %bb84
  %v2_13114 = and i32 %v1_13114, 268435456
  %v3_13114 = icmp eq i32 %v2_13114, 0
  %v4_13114 = mul i32 %v1_13114, 16
  br i1 %v3_13114, label %.preheader, label %dec_label_pc_1311cthread-pre-split.loopexit.loopexit

dec_label_pc_1311cthread-pre-split.loopexit.loopexit: ; preds = %bb85, %bb83
  %v1_1312848.ph = phi i32 [ %v1_13114, %bb83 ], [ %v4_13114, %bb85 ]
  %v0_1311c.pr38.ph = phi i32 [ %v0_1311c.pr36, %bb83 ], [ %v4_13110, %bb85 ]
  br label %dec_label_pc_1311cthread-pre-split.loopexit

dec_label_pc_1311cthread-pre-split.loopexit:      ; preds = %dec_label_pc_1311cthread-pre-split.loopexit.loopexit, %.thread2
  %v1_1312848 = phi i32 [ %v1_13114, %.thread2 ], [ %v1_1312848.ph, %dec_label_pc_1311cthread-pre-split.loopexit.loopexit ]
  %v0_1311c.pr38 = phi i32 [ %v0_1311c.pr36, %.thread2 ], [ %v0_1311c.pr38.ph, %dec_label_pc_1311cthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_1311cthread-pre-split

dec_label_pc_1311cthread-pre-split:               ; preds = %dec_label_pc_1311cthread-pre-split.loopexit, %bb87
  %v1_1312846 = phi i32 [ %v1_1312848, %dec_label_pc_1311cthread-pre-split.loopexit ], [ %v3_13128, %bb87 ]
  %v0_1311c.pr = phi i32 [ %v0_1311c.pr38, %dec_label_pc_1311cthread-pre-split.loopexit ], [ %v3_13124, %bb87 ]
  br label %dec_label_pc_1311c

dec_label_pc_1311c.loopexit:                      ; preds = %bb84
  br label %dec_label_pc_1311c

dec_label_pc_1311c:                               ; preds = %dec_label_pc_1311c.loopexit, %dec_label_pc_1311cthread-pre-split
  %v1_13128 = phi i32 [ %v1_1312846, %dec_label_pc_1311cthread-pre-split ], [ %v1_13114, %dec_label_pc_1311c.loopexit ]
  %v1_13124 = phi i32 [ %v0_1311c.pr, %dec_label_pc_1311cthread-pre-split ], [ %v4_13110, %dec_label_pc_1311c.loopexit ]
  %v2_1311c = icmp slt i32 %v1_13124, 0
  br i1 %v2_1311c, label %dec_label_pc_13130, label %bb86

bb86:                                             ; preds = %dec_label_pc_1311c
  %v4_13120 = icmp ult i32 %v1_13124, %v0_130e8
  br i1 %v4_13120, label %bb87, label %dec_label_pc_13130

bb87:                                             ; preds = %bb86
  %v3_13124 = mul i32 %v1_13124, 2
  %v2_13128 = icmp slt i32 %v1_13128, 0
  %v3_13128 = mul i32 %v1_13128, 2
  br i1 %v2_13128, label %dec_label_pc_13130, label %dec_label_pc_1311cthread-pre-split

dec_label_pc_13130:                               ; preds = %bb86, %dec_label_pc_1311c, %bb87
  %v2_1313c59 = phi i32 [ %v3_13128, %bb87 ], [ %v1_13128, %bb86 ], [ %v1_13128, %dec_label_pc_1311c ]
  %v1_1313451 = phi i32 [ %v3_13124, %bb87 ], [ %v1_13124, %bb86 ], [ %v1_13124, %dec_label_pc_1311c ]
  br label %dec_label_pc_13134

dec_label_pc_13134:                               ; preds = %.thread11, %dec_label_pc_13130
  %v1_13168 = phi i32 [ %v4_13168, %.thread11 ], [ %v2_1313c59, %dec_label_pc_13130 ]
  %v1_1313c = phi i32 [ %v0_13174, %.thread11 ], [ 0, %dec_label_pc_13130 ]
  %v1_1316c = phi i32 [ %v4_1316c, %.thread11 ], [ %v1_1313451, %dec_label_pc_13130 ]
  %v1_13138 = phi i32 [ %v0_13164, %.thread11 ], [ %v0_130e8, %dec_label_pc_13130 ]
  %v3_13134 = icmp ult i32 %v1_13138, %v1_1316c
  br i1 %v3_13134, label %.thread7, label %bb88

bb88:                                             ; preds = %dec_label_pc_13134
  %v3_13138 = sub i32 %v1_13138, %v1_1316c
  %v3_1313c = or i32 %v1_1313c, %v1_13168
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_13134, %bb88
  %v1_13144 = phi i32 [ %v1_13138, %dec_label_pc_13134 ], [ %v3_13138, %bb88 ]
  %v1_13148 = phi i32 [ %v1_1313c, %dec_label_pc_13134 ], [ %v3_1313c, %bb88 ]
  %v4_13140 = udiv i32 %v1_1316c, 2
  %v6_13140 = icmp ult i32 %v1_13144, %v4_13140
  br i1 %v6_13140, label %.thread8, label %bb89

bb89:                                             ; preds = %.thread7
  %v3_13144 = urem i32 %v1_1316c, 2
  %v4_13144 = icmp eq i32 %v3_13144, 0
  %v6_13144 = sub i32 %v1_13144, %v4_13140
  br i1 %v4_13144, label %.thread8, label %bb90

bb90:                                             ; preds = %bb89
  %v5_13148 = udiv i32 %v1_13168, 2
  %v6_13148 = or i32 %v1_13148, %v5_13148
  br label %.thread8

.thread8:                                         ; preds = %bb89, %.thread7, %bb90
  %v1_13150 = phi i32 [ %v6_13144, %bb89 ], [ %v1_13144, %.thread7 ], [ %v6_13144, %bb90 ]
  %v1_13154 = phi i32 [ %v1_13148, %bb89 ], [ %v1_13148, %.thread7 ], [ %v6_13148, %bb90 ]
  %v4_1314c = udiv i32 %v1_1316c, 4
  %v6_1314c = icmp ult i32 %v1_13150, %v4_1314c
  br i1 %v6_1314c, label %.thread9, label %bb91

bb91:                                             ; preds = %.thread8
  %v3_13150 = and i32 %v1_1316c, 2
  %v4_13150 = icmp eq i32 %v3_13150, 0
  %v6_13150 = sub i32 %v1_13150, %v4_1314c
  br i1 %v4_13150, label %.thread9, label %bb92

bb92:                                             ; preds = %bb91
  %v5_13154 = udiv i32 %v1_13168, 4
  %v6_13154 = or i32 %v1_13154, %v5_13154
  br label %.thread9

.thread9:                                         ; preds = %bb91, %.thread8, %bb92
  %v1_1315c = phi i32 [ %v6_13150, %bb91 ], [ %v1_13150, %.thread8 ], [ %v6_13150, %bb92 ]
  %v1_13160 = phi i32 [ %v1_13154, %bb91 ], [ %v1_13154, %.thread8 ], [ %v6_13154, %bb92 ]
  %v4_13158 = udiv i32 %v1_1316c, 8
  %v6_13158 = icmp ult i32 %v1_1315c, %v4_13158
  br i1 %v6_13158, label %thread-pre-split, label %bb93

bb93:                                             ; preds = %.thread9
  %v3_1315c = and i32 %v1_1316c, 4
  %v4_1315c = icmp eq i32 %v3_1315c, 0
  %v6_1315c = sub i32 %v1_1315c, %v4_13158
  br i1 %v4_1315c, label %thread-pre-split, label %bb94

bb94:                                             ; preds = %bb93
  %v5_13160 = udiv i32 %v1_13168, 8
  %v6_13160 = or i32 %v1_13160, %v5_13160
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb94, %.thread9, %bb93
  %v0_13174 = phi i32 [ %v1_13160, %bb93 ], [ %v1_13160, %.thread9 ], [ %v6_13160, %bb94 ]
  %v0_13164 = phi i32 [ %v6_1315c, %bb93 ], [ %v1_1315c, %.thread9 ], [ %v6_1315c, %bb94 ]
  %v2_13164 = icmp eq i32 %v0_13164, 0
  br i1 %v2_13164, label %dec_label_pc_13174, label %bb95

bb95:                                             ; preds = %thread-pre-split
  %tmp142 = icmp ult i32 %v1_13168, 16
  br i1 %tmp142, label %dec_label_pc_13174, label %.thread11

.thread11:                                        ; preds = %bb95
  %v4_13168 = udiv i32 %v1_13168, 16
  %v4_1316c = udiv i32 %v1_1316c, 16
  br label %dec_label_pc_13134

dec_label_pc_13174:                               ; preds = %thread-pre-split, %bb95
  ret i32 %v0_13174

dec_label_pc_1317c:                               ; preds = %dec_label_pc_130e8
  %v9_130e8 = icmp eq i32 %v0_130e8, %v0_130dc
  %. = zext i1 %v9_130e8 to i32
  ret i32 %.

dec_label_pc_13188:                               ; preds = %dec_label_pc_130f0
  %v2_13188 = icmp ugt i32 %v0_130dc, 65535
  br i1 %v2_13188, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_13188
  %v2_1318c = and i32 %v0_130dc, 32768
  %v3_1318c = icmp eq i32 %v2_1318c, 0
  %v4_1318c = udiv i32 %v0_130dc, 65536
  br i1 %v3_1318c, label %.thread16, label %bb100

.thread16:                                        ; preds = %bb99, %dec_label_pc_13188
  %v0_1319865 = phi i32 [ %v0_130dc, %dec_label_pc_13188 ], [ %v4_1318c, %bb99 ]
  br label %bb100

bb100:                                            ; preds = %bb99, %.thread16
  %v1_1319c = phi i32 [ %v0_1319865, %.thread16 ], [ %v4_1318c, %bb99 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb99 ]
  %v2_13198 = icmp ugt i32 %v1_1319c, 255
  br i1 %v2_13198, label %bb101, label %.thread17

bb101:                                            ; preds = %bb100
  %v2_1319c = and i32 %v1_1319c, 128
  %v3_1319c = icmp eq i32 %v2_1319c, 0
  %v4_1319c = udiv i32 %v1_1319c, 256
  br i1 %v3_1319c, label %.thread17, label %bb102

bb102:                                            ; preds = %bb101
  %v2_131a0 = or i32 %storemerge, 8
  br label %.thread17

.thread17:                                        ; preds = %bb101, %bb100, %bb102
  %v1_131ac = phi i32 [ %storemerge, %bb100 ], [ %storemerge, %bb101 ], [ %v2_131a0, %bb102 ]
  %v1_131a8 = phi i32 [ %v1_1319c, %bb100 ], [ %v4_1319c, %bb101 ], [ %v4_1319c, %bb102 ]
  %v2_131a4 = icmp ugt i32 %v1_131a8, 15
  br i1 %v2_131a4, label %bb103, label %.thread18

bb103:                                            ; preds = %.thread17
  %v2_131a8 = and i32 %v1_131a8, 8
  %v3_131a8 = icmp eq i32 %v2_131a8, 0
  %v4_131a8 = udiv i32 %v1_131a8, 16
  br i1 %v3_131a8, label %.thread18, label %bb104

bb104:                                            ; preds = %bb103
  %v2_131ac = add nsw i32 %v1_131ac, 4
  br label %.thread18

.thread18:                                        ; preds = %bb103, %.thread17, %bb104
  %v4_131b4 = phi i32 [ %v1_131ac, %.thread17 ], [ %v1_131ac, %bb103 ], [ %v2_131ac, %bb104 ]
  %v5_131b8 = phi i32 [ %v1_131a8, %.thread17 ], [ %v4_131a8, %bb103 ], [ %v4_131a8, %bb104 ]
  %v2_131b0 = icmp ugt i32 %v5_131b8, 3
  %v7_131b0 = icmp eq i32 %v5_131b8, 4
  %v2_131b4 = xor i1 %v7_131b0, true
  %v3_131b4 = and i1 %v2_131b0, %v2_131b4
  br i1 %v3_131b4, label %bb105, label %bb106

bb105:                                            ; preds = %.thread18
  %v5_131b4 = add nsw i32 %v4_131b4, 3
  br label %bb106

bb106:                                            ; preds = %.thread18, %bb105
  %v4_131b8 = phi i32 [ %v4_131b4, %.thread18 ], [ %v5_131b4, %bb105 ]
  %v2_131b8 = xor i1 %v2_131b0, true
  %v3_131b8 = or i1 %v7_131b0, %v2_131b8
  br i1 %v3_131b8, label %bb107, label %bb108

bb107:                                            ; preds = %bb106
  %v8_131b8 = udiv i32 %v5_131b8, 2
  %v9_131b8 = add i32 %v4_131b8, %v8_131b8
  br label %bb108

bb108:                                            ; preds = %bb106, %bb107
  %v1_131bc = phi i32 [ %v4_131b8, %bb106 ], [ %v9_131b8, %bb107 ]
  %v6_131bc = lshr i32 %v0_130e8, %v1_131bc
  ret i32 %v6_131bc

dec_label_pc_131c4:                               ; preds = %bb82
  %v0_131c4 = load i32, i32* @lr, align 4
  %v0_131c8 = call i32 @function_1339c()
  store i32 0, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v0_131c4)
  %v9_131d4 = load i32, i32* @lr, align 4
  %v0_131d8 = call i32 @function_130dc()
  store i32 %v9_131d4, i32* @lr, align 4
  ret i32 %v0_131d8

; uselistorder directives
  uselistorder i32 %v4_131b8, { 1, 0 }
  uselistorder i1 %v7_131b0, { 1, 0 }
  uselistorder i32 %v4_131a8, { 1, 0 }
  uselistorder i32 %v1_131a8, { 1, 0, 2, 3 }
  uselistorder i32 %v4_1319c, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_1319c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_1318c, { 1, 0 }
  uselistorder i32 %v0_13164, { 1, 0 }
  uselistorder i32 %v4_13158, { 1, 0 }
  uselistorder i32 %v1_13160, { 1, 2, 0 }
  uselistorder i32 %v4_1314c, { 1, 0 }
  uselistorder i32 %v1_13154, { 1, 2, 0 }
  uselistorder i32 %v4_13140, { 1, 0 }
  uselistorder i32 %v1_13148, { 1, 2, 0 }
  uselistorder i32 %v1_1316c, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_1313c, { 1, 0 }
  uselistorder i32 %v1_13168, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_13128, { 1, 0 }
  uselistorder i32 %v3_13124, { 1, 0 }
  uselistorder i32 %v1_13124, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_13128, { 1, 2, 0, 3 }
  uselistorder i32 %v4_13114, { 1, 0 }
  uselistorder i32 %v4_13110, { 2, 1, 0 }
  uselistorder i32 %v1_13114, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_1311c.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_130e8, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_130dc, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1, 10, 12, 11 }
  uselistorder i32 65535, { 92, 47, 48, 0, 1, 11, 49, 24, 50, 23, 51, 22, 52, 12, 13, 2, 26, 53, 25, 54, 55, 14, 56, 3, 27, 57, 28, 58, 29, 59, 60, 4, 30, 61, 62, 15, 63, 5, 34, 64, 31, 65, 32, 66, 33, 67, 68, 16, 69, 6, 70, 71, 38, 72, 37, 73, 35, 74, 36, 75, 17, 18, 7, 76, 39, 77, 40, 78, 79, 80, 19, 81, 82, 8, 43, 83, 41, 84, 42, 85, 86, 20, 87, 9, 10, 46, 88, 44, 89, 45, 90, 21, 91 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %dec_label_pc_13174, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_13130, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1311cthread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_131ec(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_131ec:
  store i32 %arg1, i32* @r0, align 4
  %v1_131ec = add i32 %arg2, -1
  store i32 %v1_131ec, i32* @r2, align 4
  %v2_131ec = icmp eq i32 %arg2, 0
  br i1 %v2_131ec, label %dec_label_pc_132a8, label %dec_label_pc_131f4

dec_label_pc_131f4:                               ; preds = %dec_label_pc_131ec
  %v7_131ec = icmp eq i32 %arg2, 1
  br i1 %v7_131ec, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_131f4
  %v1_131f4 = load i32, i32* @r0, align 4
  %v10_131f4 = icmp eq i32 %v1_131f4, %arg2
  br i1 %v10_131f4, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_131f4, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_131f4 = icmp ult i32 %v1_131f4, %arg2
  br i1 %v4_131f4, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_131fc = and i32 %v1_131ec, %arg2
  %v8_131fc = icmp eq i32 %v6_131fc, 0
  br i1 %v8_131fc, label %.thread67, label %dec_label_pc_1320c.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_13200 = phi i32 [ %v1_131f4, %bb75 ], [ 0, %.thread65 ]
  %v3_13200 = and i32 %v1_13200, %v1_131ec
  br label %bb76

dec_label_pc_1320c.preheader:                     ; preds = %bb75
  %v2_1320c99 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_1320c99, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_1329c, %bb74, %bb89, %bb84, %dec_label_pc_1326c, %.thread67
  %v5_13204 = phi i32 [ %v1_131f4, %bb74 ], [ %v3_13200, %.thread67 ], [ %v1_13248.v6_13248.v6_13250.v6_13258, %dec_label_pc_1326c ], [ 0, %bb84 ], [ %v1_132a0, %dec_label_pc_1329c ], [ %v2_1329c, %bb89 ]
  ret i32 %v5_13204

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_1320c.preheader
  %v0_13220.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_1320c.preheader ], [ %v4_13214, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_1320c.preheader ], [ %v2_1321811, %.thread1.thread9 ]
  br label %dec_label_pc_13220thread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_1320c.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_1321811, %.thread1.thread9 ], [ 0, %dec_label_pc_1320c.preheader ]
  %v0_13220.pr33100 = phi i32 [ %v4_13214, %.thread1.thread9 ], [ %arg2, %dec_label_pc_1320c.preheader ]
  %v4_13210 = icmp ult i32 %v0_13220.pr33100, %v1_131f4
  br i1 %v4_13210, label %bb78, label %dec_label_pc_13220thread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_13214 = and i32 %v0_13220.pr33100, 268435456
  %v3_13214 = icmp eq i32 %v2_13214, 0
  %v4_13214 = mul i32 %v0_13220.pr33100, 16
  br i1 %v3_13214, label %.thread1.thread9, label %dec_label_pc_13220.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_1321811 = add i32 %storemerge101, 4
  %v2_1320c = icmp ugt i32 %v4_13214, 268435455
  br i1 %v2_1320c, label %.thread, label %bb77

dec_label_pc_13220thread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_13220thread-pre-split.loopexit

dec_label_pc_13220thread-pre-split.loopexit:      ; preds = %dec_label_pc_13220thread-pre-split.loopexit.loopexit, %.thread
  %v0_13220.pr3398 = phi i32 [ %v0_13220.pr33.lcssa, %.thread ], [ %v0_13220.pr33100, %dec_label_pc_13220thread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_13220thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_13220thread-pre-split

dec_label_pc_13220thread-pre-split:               ; preds = %.thread4, %dec_label_pc_13220thread-pre-split.loopexit
  %v1_1322c39 = phi i32 [ %storemerge95, %dec_label_pc_13220thread-pre-split.loopexit ], [ %v2_1322c, %.thread4 ]
  %v0_13220.pr = phi i32 [ %v0_13220.pr3398, %dec_label_pc_13220thread-pre-split.loopexit ], [ %v3_13228, %.thread4 ]
  br label %dec_label_pc_13220

dec_label_pc_13220.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_13220

dec_label_pc_13220:                               ; preds = %dec_label_pc_13220.loopexit, %dec_label_pc_13220thread-pre-split
  %v0_13234.pr = phi i32 [ %v1_1322c39, %dec_label_pc_13220thread-pre-split ], [ %storemerge101, %dec_label_pc_13220.loopexit ]
  %v1_13228 = phi i32 [ %v0_13220.pr, %dec_label_pc_13220thread-pre-split ], [ %v4_13214, %dec_label_pc_13220.loopexit ]
  %v2_13220 = icmp slt i32 %v1_13228, 0
  br i1 %v2_13220, label %dec_label_pc_13234, label %bb79

bb79:                                             ; preds = %dec_label_pc_13220
  %v4_13224 = icmp ult i32 %v1_13228, %v1_131f4
  br i1 %v4_13224, label %.thread4, label %dec_label_pc_13234

.thread4:                                         ; preds = %bb79
  %v3_13228 = mul i32 %v1_13228, 2
  %v2_1322c = add i32 %v0_13234.pr, 1
  br label %dec_label_pc_13220thread-pre-split

dec_label_pc_13234:                               ; preds = %bb79, %dec_label_pc_13220
  %v2_13234 = add i32 %v0_13234.pr, -3
  store i32 %v2_13234, i32* @r2, align 4
  %v5_13238 = icmp slt i32 %v0_13234.pr, 3
  br i1 %v5_13238, label %dec_label_pc_13278, label %dec_label_pc_1323c

dec_label_pc_1323c:                               ; preds = %dec_label_pc_13234, %bb83
  %v6_13264 = phi i32 [ %v0_1326c, %bb83 ], [ %v2_13234, %dec_label_pc_13234 ]
  %v1_13240 = phi i32 [ %v1_13248.v6_13248.v6_13250.v6_13258, %bb83 ], [ %v1_131f4, %dec_label_pc_13234 ]
  %v3_1326012 = phi i32 [ %v3_13260, %bb83 ], [ %v1_13228, %dec_label_pc_13234 ]
  %v3_1323c = icmp ult i32 %v1_13240, %v3_1326012
  %v3_13240 = select i1 %v3_1323c, i32 0, i32 %v3_1326012
  %v1_13248 = sub i32 %v1_13240, %v3_13240
  %v4_13244 = udiv i32 %v3_1326012, 2
  %v6_13244 = icmp ult i32 %v1_13248, %v4_13244
  %v6_13248 = select i1 %v6_13244, i32 0, i32 %v4_13244
  %v1_13248.v6_13248 = sub i32 %v1_13248, %v6_13248
  %.demorgan = and i1 %v3_1323c, %v6_13244
  %v4_1324c = udiv i32 %v3_1326012, 4
  %v6_1324c = icmp ult i32 %v1_13248.v6_13248, %v4_1324c
  %v6_13250 = select i1 %v6_1324c, i32 0, i32 %v4_1324c
  %v1_13248.v6_13248.v6_13250 = sub i32 %v1_13248.v6_13248, %v6_13250
  %.demorgan71 = and i1 %.demorgan, %v6_1324c
  %v4_13254 = udiv i32 %v3_1326012, 8
  %v6_13254 = icmp ult i32 %v1_13248.v6_13248.v6_13250, %v4_13254
  %v6_13258 = select i1 %v6_13254, i32 0, i32 %v4_13254
  %v1_13248.v6_13248.v6_13250.v6_13258 = sub i32 %v1_13248.v6_13248.v6_13250, %v6_13258
  %.demorgan72 = and i1 %.demorgan71, %v6_13254
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_1323c
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_1323c, %bb80
  %v2_1325c = add i32 %v1_13248.v6_13248.v6_13250.v6_13258, -1
  %v4_1325c = sub i32 0, %v1_13248.v6_13248.v6_13250.v6_13258
  %v5_1325c = and i32 %v1_13248.v6_13248.v6_13250.v6_13258, %v4_1325c
  %v3_13260 = udiv i32 %v3_1326012, 16
  %v5_13264 = icmp slt i32 %v1_13248.v6_13248.v6_13250.v6_13258, 1
  br i1 %v5_13264, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_13264 = add i32 %v6_13264, -4
  store i32 %v7_13264, i32* @r2, align 4
  %v9_13264 = sub i32 3, %v6_13264
  %v10_13264 = and i32 %v9_13264, %v6_13264
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_1326c = phi i32 [ %v6_13264, %bb81 ], [ %v7_13264, %bb82 ]
  %v0_1326815.in = phi i32 [ %v2_1325c, %bb81 ], [ %v7_13264, %bb82 ]
  %v1_1326814.in = phi i32 [ %v5_1325c, %bb81 ], [ %v10_13264, %bb82 ]
  %v1_1326814 = icmp slt i32 %v1_1326814.in, 0
  %v0_1326815 = icmp slt i32 %v0_1326815.in, 0
  %v2_13268 = xor i1 %v0_1326815, %v1_1326814
  br i1 %v2_13268, label %dec_label_pc_1326c, label %dec_label_pc_1323c

dec_label_pc_1326c:                               ; preds = %bb83
  %v1_1326c = urem i32 %v0_1326c, 4
  %v2_1326c = icmp eq i32 %v1_1326c, 0
  br i1 %v2_1326c, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_1326c
  %v3_13270 = icmp eq i32 %v1_13248.v6_13248.v6_13250.v6_13258, 0
  br i1 %v3_13270, label %bb76, label %dec_label_pc_13278

dec_label_pc_13278:                               ; preds = %bb84, %dec_label_pc_13234
  %v0_1328c = phi i32 [ %v3_13260, %bb84 ], [ %v1_13228, %dec_label_pc_13234 ]
  %v1_13288 = phi i32 [ %v1_13248.v6_13248.v6_13250.v6_13258, %bb84 ], [ %v1_131f4, %dec_label_pc_13234 ]
  %v0_13278 = phi i32 [ %v0_1326c, %bb84 ], [ %v2_13234, %dec_label_pc_13234 ]
  %v5_1327c = icmp slt i32 %v0_13278, -2
  br i1 %v5_1327c, label %dec_label_pc_1329c, label %dec_label_pc_13280

dec_label_pc_13280:                               ; preds = %dec_label_pc_13278
  %v8_13278 = icmp eq i32 %v0_13278, -2
  br i1 %v8_13278, label %dec_label_pc_13290, label %dec_label_pc_13284

dec_label_pc_13284:                               ; preds = %dec_label_pc_13280
  %v3_13284 = icmp ult i32 %v1_13288, %v0_1328c
  br i1 %v3_13284, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_13284
  %v2_13284 = sub i32 %v1_13288, %v0_1328c
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_13284, %bb85
  %v0_1329052 = phi i32 [ %v1_13288, %dec_label_pc_13284 ], [ %v2_13284, %bb85 ]
  %v3_1328c = udiv i32 %v0_1328c, 2
  br label %dec_label_pc_13290

dec_label_pc_13290:                               ; preds = %dec_label_pc_13280, %bb86
  %v0_13298 = phi i32 [ %v0_1328c, %dec_label_pc_13280 ], [ %v3_1328c, %bb86 ]
  %v1_13294 = phi i32 [ %v1_13288, %dec_label_pc_13280 ], [ %v0_1329052, %bb86 ]
  %v3_13290 = icmp ult i32 %v1_13294, %v0_13298
  br i1 %v3_13290, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_13290
  %v2_13290 = sub i32 %v1_13294, %v0_13298
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_13290, %bb87
  %v0_1329c55 = phi i32 [ %v1_13294, %dec_label_pc_13290 ], [ %v2_13290, %bb87 ]
  %v3_13298 = udiv i32 %v0_13298, 2
  br label %dec_label_pc_1329c

dec_label_pc_1329c:                               ; preds = %dec_label_pc_13278, %bb88
  %v2_132a0 = phi i32 [ %v0_1328c, %dec_label_pc_13278 ], [ %v3_13298, %bb88 ]
  %v1_132a0 = phi i32 [ %v1_13288, %dec_label_pc_13278 ], [ %v0_1329c55, %bb88 ]
  %v3_1329c = icmp ult i32 %v1_132a0, %v2_132a0
  br i1 %v3_1329c, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_1329c
  %v2_1329c = sub i32 %v1_132a0, %v2_132a0
  br label %bb76

dec_label_pc_132a8:                               ; preds = %dec_label_pc_131ec
  %v0_132a8 = load i32, i32* @lr, align 4
  %v0_132ac = call i32 @function_1339c()
  call void @__pseudo_branch(i32 %v0_132a8)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_132a0, { 1, 2, 0 }
  uselistorder i32 %v0_1328c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_1326c, { 1, 0, 2 }
  uselistorder i32 %v7_13264, { 1, 0, 2 }
  uselistorder i32 %v3_13260, { 1, 0 }
  uselistorder i32 %v1_13248.v6_13248.v6_13250.v6_13258, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_13254, { 1, 0 }
  uselistorder i32 %v4_1324c, { 1, 0 }
  uselistorder i32 %v4_13244, { 1, 0 }
  uselistorder i32 %v6_13264, { 3, 0, 2, 1 }
  uselistorder i32 %v2_13234, { 1, 0, 2 }
  uselistorder i32 %v1_13228, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_13214, { 1, 0, 3, 2 }
  uselistorder i32 %v0_13220.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_131f4, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_1329c, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_13290, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_1323c, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @function_132b8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_132b8:
  store i32 %arg1, i32* @r0, align 4
  %v2_132b8 = icmp eq i32 %arg2, 0
  br i1 %v2_132b8, label %dec_label_pc_1338c, label %dec_label_pc_132c0

dec_label_pc_132c0:                               ; preds = %dec_label_pc_132b8
  %v1_132b8 = icmp slt i32 %arg2, 0
  br i1 %v1_132b8, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_132c0
  %v2_132c0 = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_132c0, %bb
  %v4_132d8 = phi i32 [ %arg2, %dec_label_pc_132c0 ], [ %v2_132c0, %bb ]
  %v0_132c4 = load i32, i32* @r0, align 4
  %v1_132c4 = icmp slt i32 %v0_132c4, 0
  br i1 %v1_132c4, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_132c8 = sub i32 0, %v0_132c4
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_132d0 = phi i32 [ %v0_132c4, %bb79 ], [ %v2_132c8, %bb80 ]
  %v1_132cc = add i32 %v4_132d8, -1
  %v7_132cc = icmp eq i32 %v4_132d8, 1
  br i1 %v7_132cc, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_132d0 = icmp eq i32 %v1_132d0, %v4_132d8
  br i1 %v10_132d0, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_132d0 = icmp ult i32 %v1_132d0, %v4_132d8
  br i1 %v4_132d0, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_132d8 = and i32 %v1_132cc, %v4_132d8
  %v8_132d8 = icmp eq i32 %v6_132d8, 0
  br i1 %v8_132d8, label %.thread72, label %dec_label_pc_132e8.preheader

dec_label_pc_132e8.preheader:                     ; preds = %bb84
  %v2_132e8109 = icmp ugt i32 %v4_132d8, 268435455
  br i1 %v2_132e8109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_132dc64 = phi i32 [ %v1_132d0, %bb84 ], [ 0, %.thread70 ]
  %v3_132dc = and i32 %v1_132dc64, %v1_132cc
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_132e8.preheader
  %v0_132fc.pr35.lcssa = phi i32 [ %v4_132d8, %dec_label_pc_132e8.preheader ], [ %v4_132f0, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_132e8.preheader ], [ %v2_132f49, %.thread2.thread7 ]
  br label %dec_label_pc_132fcthread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_132e8.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_132f49, %.thread2.thread7 ], [ 0, %dec_label_pc_132e8.preheader ]
  %v0_132fc.pr35110 = phi i32 [ %v4_132f0, %.thread2.thread7 ], [ %v4_132d8, %dec_label_pc_132e8.preheader ]
  %v4_132ec = icmp ult i32 %v0_132fc.pr35110, %v1_132d0
  br i1 %v4_132ec, label %bb86, label %dec_label_pc_132fcthread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_132f0 = and i32 %v0_132fc.pr35110, 268435456
  %v3_132f0 = icmp eq i32 %v2_132f0, 0
  %v4_132f0 = mul i32 %v0_132fc.pr35110, 16
  br i1 %v3_132f0, label %.thread2.thread7, label %dec_label_pc_132fc.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_132f49 = add i32 %storemerge111, 4
  %v2_132e8 = icmp ugt i32 %v4_132f0, 268435455
  br i1 %v2_132e8, label %.thread1, label %bb85

dec_label_pc_132fcthread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_132fcthread-pre-split.loopexit

dec_label_pc_132fcthread-pre-split.loopexit:      ; preds = %dec_label_pc_132fcthread-pre-split.loopexit.loopexit, %.thread1
  %v0_132fc.pr35108 = phi i32 [ %v0_132fc.pr35.lcssa, %.thread1 ], [ %v0_132fc.pr35110, %dec_label_pc_132fcthread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_132fcthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_132fcthread-pre-split

dec_label_pc_132fcthread-pre-split:               ; preds = %.thread4, %dec_label_pc_132fcthread-pre-split.loopexit
  %v1_1330841 = phi i32 [ %storemerge105, %dec_label_pc_132fcthread-pre-split.loopexit ], [ %v2_13308, %.thread4 ]
  %v2_1330036 = phi i32 [ %v1_132d0, %dec_label_pc_132fcthread-pre-split.loopexit ], [ %v2_13300, %.thread4 ]
  %v0_132fc.pr = phi i32 [ %v0_132fc.pr35108, %dec_label_pc_132fcthread-pre-split.loopexit ], [ %v3_13304, %.thread4 ]
  br label %dec_label_pc_132fc

dec_label_pc_132fc.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_132fc

dec_label_pc_132fc:                               ; preds = %dec_label_pc_132fc.loopexit, %dec_label_pc_132fcthread-pre-split
  %v0_13310.pr = phi i32 [ %v1_1330841, %dec_label_pc_132fcthread-pre-split ], [ %storemerge111, %dec_label_pc_132fc.loopexit ]
  %v2_13300 = phi i32 [ %v2_1330036, %dec_label_pc_132fcthread-pre-split ], [ %v1_132d0, %dec_label_pc_132fc.loopexit ]
  %v1_13304 = phi i32 [ %v0_132fc.pr, %dec_label_pc_132fcthread-pre-split ], [ %v4_132f0, %dec_label_pc_132fc.loopexit ]
  %v2_132fc = icmp slt i32 %v1_13304, 0
  br i1 %v2_132fc, label %dec_label_pc_13310, label %bb87

bb87:                                             ; preds = %dec_label_pc_132fc
  %v4_13300 = icmp ult i32 %v1_13304, %v2_13300
  br i1 %v4_13300, label %.thread4, label %dec_label_pc_13310

.thread4:                                         ; preds = %bb87
  %v3_13304 = mul i32 %v1_13304, 2
  %v2_13308 = add i32 %v0_13310.pr, 1
  br label %dec_label_pc_132fcthread-pre-split

dec_label_pc_13310:                               ; preds = %bb87, %dec_label_pc_132fc
  %v2_13310 = add i32 %v0_13310.pr, -3
  %v5_13314 = icmp slt i32 %v0_13310.pr, 3
  br i1 %v5_13314, label %dec_label_pc_13354, label %dec_label_pc_13318

dec_label_pc_13318:                               ; preds = %dec_label_pc_13310, %bb91
  %v6_13340 = phi i32 [ %v0_13348, %bb91 ], [ %v2_13310, %dec_label_pc_13310 ]
  %v1_1331c = phi i32 [ %v1_13324.v6_13324.v6_1332c.v6_13334, %bb91 ], [ %v2_13300, %dec_label_pc_13310 ]
  %v3_1333c10 = phi i32 [ %v3_1333c, %bb91 ], [ %v1_13304, %dec_label_pc_13310 ]
  %v3_13318 = icmp ult i32 %v1_1331c, %v3_1333c10
  %v3_1331c = select i1 %v3_13318, i32 0, i32 %v3_1333c10
  %v1_13324 = sub i32 %v1_1331c, %v3_1331c
  %v4_13320 = udiv i32 %v3_1333c10, 2
  %v6_13320 = icmp ult i32 %v1_13324, %v4_13320
  %v6_13324 = select i1 %v6_13320, i32 0, i32 %v4_13320
  %v1_13324.v6_13324 = sub i32 %v1_13324, %v6_13324
  %.demorgan = and i1 %v3_13318, %v6_13320
  %v4_13328 = udiv i32 %v3_1333c10, 4
  %v6_13328 = icmp ult i32 %v1_13324.v6_13324, %v4_13328
  %v6_1332c = select i1 %v6_13328, i32 0, i32 %v4_13328
  %v1_13324.v6_13324.v6_1332c = sub i32 %v1_13324.v6_13324, %v6_1332c
  %.demorgan76 = and i1 %.demorgan, %v6_13328
  %v4_13330 = udiv i32 %v3_1333c10, 8
  %v6_13330 = icmp ult i32 %v1_13324.v6_13324.v6_1332c, %v4_13330
  %v6_13334 = select i1 %v6_13330, i32 0, i32 %v4_13330
  %v1_13324.v6_13324.v6_1332c.v6_13334 = sub i32 %v1_13324.v6_13324.v6_1332c, %v6_13334
  %.demorgan77 = and i1 %.demorgan76, %v6_13330
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_13318
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_13318, %bb88
  %v2_13338 = add i32 %v1_13324.v6_13324.v6_1332c.v6_13334, -1
  %v4_13338 = sub i32 0, %v1_13324.v6_13324.v6_1332c.v6_13334
  %v5_13338 = and i32 %v1_13324.v6_13324.v6_1332c.v6_13334, %v4_13338
  %v3_1333c = udiv i32 %v3_1333c10, 16
  %v5_13340 = icmp slt i32 %v1_13324.v6_13324.v6_1332c.v6_13334, 1
  br i1 %v5_13340, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_13340 = add i32 %v6_13340, -4
  %v9_13340 = sub i32 3, %v6_13340
  %v10_13340 = and i32 %v9_13340, %v6_13340
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_13348 = phi i32 [ %v6_13340, %bb89 ], [ %v7_13340, %bb90 ]
  %v0_1334413.in = phi i32 [ %v2_13338, %bb89 ], [ %v7_13340, %bb90 ]
  %v1_1334412.in = phi i32 [ %v5_13338, %bb89 ], [ %v10_13340, %bb90 ]
  %v1_1334412 = icmp slt i32 %v1_1334412.in, 0
  %v0_1334413 = icmp slt i32 %v0_1334413.in, 0
  %v2_13344 = xor i1 %v0_1334413, %v1_1334412
  br i1 %v2_13344, label %dec_label_pc_13348, label %dec_label_pc_13318

dec_label_pc_13348:                               ; preds = %bb91
  %v1_13348 = urem i32 %v0_13348, 4
  %v2_13348 = icmp eq i32 %v1_13348, 0
  br i1 %v2_13348, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_13348
  %v3_1334c = icmp eq i32 %v1_13324.v6_13324.v6_1332c.v6_13334, 0
  br i1 %v3_1334c, label %.thread6, label %dec_label_pc_13354

dec_label_pc_13354:                               ; preds = %bb92, %dec_label_pc_13310
  %v0_13368 = phi i32 [ %v3_1333c, %bb92 ], [ %v1_13304, %dec_label_pc_13310 ]
  %v1_13364 = phi i32 [ %v1_13324.v6_13324.v6_1332c.v6_13334, %bb92 ], [ %v2_13300, %dec_label_pc_13310 ]
  %v0_13354 = phi i32 [ %v0_13348, %bb92 ], [ %v2_13310, %dec_label_pc_13310 ]
  %v5_13358 = icmp slt i32 %v0_13354, -2
  br i1 %v5_13358, label %dec_label_pc_13378, label %dec_label_pc_1335c

dec_label_pc_1335c:                               ; preds = %dec_label_pc_13354
  %v8_13354 = icmp eq i32 %v0_13354, -2
  br i1 %v8_13354, label %dec_label_pc_1336c, label %dec_label_pc_13360

dec_label_pc_13360:                               ; preds = %dec_label_pc_1335c
  %v3_13360 = icmp ult i32 %v1_13364, %v0_13368
  br i1 %v3_13360, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_13360
  %v2_13360 = sub i32 %v1_13364, %v0_13368
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_13360, %bb93
  %v0_1336c54 = phi i32 [ %v1_13364, %dec_label_pc_13360 ], [ %v2_13360, %bb93 ]
  %v3_13368 = udiv i32 %v0_13368, 2
  br label %dec_label_pc_1336c

dec_label_pc_1336c:                               ; preds = %dec_label_pc_1335c, %bb94
  %v0_13374 = phi i32 [ %v0_13368, %dec_label_pc_1335c ], [ %v3_13368, %bb94 ]
  %v1_13370 = phi i32 [ %v1_13364, %dec_label_pc_1335c ], [ %v0_1336c54, %bb94 ]
  %v3_1336c = icmp ult i32 %v1_13370, %v0_13374
  br i1 %v3_1336c, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_1336c
  %v2_1336c = sub i32 %v1_13370, %v0_13374
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_1336c, %bb95
  %v0_1337857 = phi i32 [ %v1_13370, %dec_label_pc_1336c ], [ %v2_1336c, %bb95 ]
  %v3_13374 = udiv i32 %v0_13374, 2
  br label %dec_label_pc_13378

dec_label_pc_13378:                               ; preds = %dec_label_pc_13354, %bb96
  %v2_1337c = phi i32 [ %v0_13368, %dec_label_pc_13354 ], [ %v3_13374, %bb96 ]
  %v1_1337c = phi i32 [ %v1_13364, %dec_label_pc_13354 ], [ %v0_1337857, %bb96 ]
  %v3_13378 = icmp ult i32 %v1_1337c, %v2_1337c
  br i1 %v3_13378, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_13378
  %v2_13378 = sub i32 %v1_1337c, %v2_1337c
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_13378, %bb83, %.thread72, %dec_label_pc_13348, %bb92, %bb97
  %v1_13384 = phi i32 [ %v1_13324.v6_13324.v6_1332c.v6_13334, %dec_label_pc_13348 ], [ 0, %bb92 ], [ %v1_1337c, %dec_label_pc_13378 ], [ %v2_13378, %bb97 ], [ %v3_132dc, %.thread72 ], [ %v1_132d0, %bb83 ]
  br i1 %v1_132c4, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_13384 = sub i32 0, %v1_13384
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_13388 = phi i32 [ %v1_13384, %.thread6 ], [ %v2_13384, %bb98 ]
  ret i32 %v1_13388

dec_label_pc_1338c:                               ; preds = %dec_label_pc_132b8
  %v0_1338c = load i32, i32* @lr, align 4
  %v0_13390 = call i32 @function_1339c()
  call void @__pseudo_branch(i32 %v0_1338c)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_13368, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_13348, { 1, 0, 2 }
  uselistorder i32 %v7_13340, { 1, 0 }
  uselistorder i32 %v3_1333c, { 1, 0 }
  uselistorder i32 %v1_13324.v6_13324.v6_1332c.v6_13334, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_13330, { 1, 0 }
  uselistorder i32 %v4_13328, { 1, 0 }
  uselistorder i32 %v4_13320, { 1, 0 }
  uselistorder i32 %v6_13340, { 3, 0, 2, 1 }
  uselistorder i32 %v2_13310, { 1, 0 }
  uselistorder i32 %v1_13304, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_13300, { 1, 0, 3, 2 }
  uselistorder i32 %v4_132f0, { 1, 0, 3, 2 }
  uselistorder i32 %v0_132fc.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_132d0, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_132d8, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @function_1339c, { 2, 1, 0 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_13378, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_1336c, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_13318, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @function_1339c() local_unnamed_addr {
dec_label_pc_1339c:
  %v1_1339c = load i32, i32* @r0, align 4
  ret i32 %v1_1339c
}

define i32 @function_133a0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_133a0:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_133a0 = load i32, i32* @r2, align 4
  %v1_133b0 = add i32 %arg2, -12
  store i32 %v6_133a0, i32* @r3, align 4
  %tmp = icmp ugt i32 %v1_133b0, 2
  br i1 %tmp, label %dec_label_pc_133d8, label %dec_label_pc_133d0

dec_label_pc_133d0:                               ; preds = %dec_label_pc_133a0
  %v0_133d0 = call i32 @function_13414()
  br label %dec_label_pc_13404

dec_label_pc_133d8:                               ; preds = %dec_label_pc_133a0
  %v2_133e0 = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_133e0, i32* %r4.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_133e0, -4095
  br i1 %tmp8, label %dec_label_pc_13404, label %dec_label_pc_133f0

dec_label_pc_133f0:                               ; preds = %dec_label_pc_133d8
  %v0_133f0 = call i32 @function_13a64()
  %v0_133f4 = load i32, i32* %r4.global-to-local, align 4
  %v1_133f4 = sub i32 0, %v0_133f4
  %v2_133f8 = inttoptr i32 %v0_133f0 to i32*
  store i32 %v1_133f4, i32* %v2_133f8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13404

dec_label_pc_13404:                               ; preds = %dec_label_pc_133f0, %dec_label_pc_133d8, %dec_label_pc_133d0
  %storemerge = phi i32 [ %v0_133d0, %dec_label_pc_133d0 ], [ %v2_133e0, %dec_label_pc_133d8 ], [ -1, %dec_label_pc_133f0 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_133e0, { 1, 0, 2 }
}

define i32 @function_13414() local_unnamed_addr {
dec_label_pc_13414:
  %r4.global-to-local = alloca i32, align 4
  %v0_13434 = load i32, i32* @r0, align 4
  store i32 %v0_13434, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13434, -4095
  br i1 %tmp, label %dec_label_pc_13450, label %dec_label_pc_13440

dec_label_pc_13440:                               ; preds = %dec_label_pc_13414
  %v0_13440 = call i32 @function_13a64()
  %v0_13444 = load i32, i32* %r4.global-to-local, align 4
  %v1_13444 = sub i32 0, %v0_13444
  %v2_13448 = inttoptr i32 %v0_13440 to i32*
  store i32 %v1_13444, i32* %v2_13448, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13450

dec_label_pc_13450:                               ; preds = %dec_label_pc_13414, %dec_label_pc_13440
  %v0_13450 = phi i32 [ %v0_13434, %dec_label_pc_13414 ], [ -1, %dec_label_pc_13440 ]
  ret i32 %v0_13450

; uselistorder directives
  uselistorder i32 %v0_13434, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13450, { 1, 0 }
}

define i32 @function_13464(i8* %arg1) local_unnamed_addr {
dec_label_pc_13464:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13464 = load i32, i32* @r4, align 4
  store i32 %v3_13464, i32* %stack_var_-8, align 4
  %v3_13468 = call i32 @chdir(i8* %arg1)
  store i32 %v3_13468, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_13468, -4095
  br i1 %tmp, label %dec_label_pc_13488, label %dec_label_pc_13478

dec_label_pc_13478:                               ; preds = %dec_label_pc_13464
  %v0_13478 = call i32 @function_13a64()
  %v0_1347c = load i32, i32* %r4.global-to-local, align 4
  %v1_1347c = sub i32 0, %v0_1347c
  %v2_13480 = inttoptr i32 %v0_13478 to i32*
  store i32 %v1_1347c, i32* %v2_13480, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13488

dec_label_pc_13488:                               ; preds = %dec_label_pc_13464, %dec_label_pc_13478
  %v0_13488 = phi i32 [ %v3_13468, %dec_label_pc_13464 ], [ -1, %dec_label_pc_13478 ]
  %v2_1348c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1348c, i32* @r4, align 4
  ret i32 %v0_13488

; uselistorder directives
  uselistorder i32 %v3_13468, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13488, { 1, 0 }
}

define i32 @function_13490(i32 %arg1) local_unnamed_addr {
dec_label_pc_13490:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13490 = load i32, i32* @r4, align 4
  store i32 %v3_13490, i32* %stack_var_-8, align 4
  %v1_13494 = call i32 @close(i32 %arg1)
  store i32 %v1_13494, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v1_13494, -4095
  br i1 %tmp, label %dec_label_pc_134b4, label %dec_label_pc_134a4

dec_label_pc_134a4:                               ; preds = %dec_label_pc_13490
  %v0_134a4 = call i32 @function_13a64()
  %v0_134a8 = load i32, i32* %r4.global-to-local, align 4
  %v1_134a8 = sub i32 0, %v0_134a8
  %v2_134ac = inttoptr i32 %v0_134a4 to i32*
  store i32 %v1_134a8, i32* %v2_134ac, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_134b4

dec_label_pc_134b4:                               ; preds = %dec_label_pc_13490, %dec_label_pc_134a4
  %v0_134b4 = phi i32 [ %v1_13494, %dec_label_pc_13490 ], [ -1, %dec_label_pc_134a4 ]
  %v2_134b8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_134b8, i32* @r4, align 4
  ret i32 %v0_134b4

; uselistorder directives
  uselistorder i32 %v1_13494, { 1, 0, 2 }
  uselistorder label %dec_label_pc_134b4, { 1, 0 }
}

define i32 @function_134bc() local_unnamed_addr {
dec_label_pc_134bc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_134bc = load i32, i32* @r4, align 4
  store i32 %v3_134bc, i32* %stack_var_-8, align 4
  %v0_134c0 = call i32 @fork()
  store i32 %v0_134c0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_134c0, -4095
  br i1 %tmp, label %dec_label_pc_134e0, label %dec_label_pc_134d0

dec_label_pc_134d0:                               ; preds = %dec_label_pc_134bc
  %v0_134d0 = call i32 @function_13a64()
  %v0_134d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_134d4 = sub i32 0, %v0_134d4
  %v2_134d8 = inttoptr i32 %v0_134d0 to i32*
  store i32 %v1_134d4, i32* %v2_134d8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_134e0

dec_label_pc_134e0:                               ; preds = %dec_label_pc_134bc, %dec_label_pc_134d0
  %v0_134e0 = phi i32 [ %v0_134c0, %dec_label_pc_134bc ], [ -1, %dec_label_pc_134d0 ]
  %v2_134e4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_134e4, i32* @r4, align 4
  ret i32 %v0_134e0

; uselistorder directives
  uselistorder i32 %v0_134c0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_134e0, { 1, 0 }
}

define i32 @function_134e8() local_unnamed_addr {
dec_label_pc_134e8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_134e8 = load i32, i32* @r4, align 4
  store i32 %v3_134e8, i32* %stack_var_-8, align 4
  %v0_134ec = call i32 @getpid()
  store i32 %v0_134ec, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_134ec, -4095
  br i1 %tmp, label %dec_label_pc_1350c, label %dec_label_pc_134fc

dec_label_pc_134fc:                               ; preds = %dec_label_pc_134e8
  %v0_134fc = call i32 @function_13a64()
  %v0_13500 = load i32, i32* %r4.global-to-local, align 4
  %v1_13500 = sub i32 0, %v0_13500
  %v2_13504 = inttoptr i32 %v0_134fc to i32*
  store i32 %v1_13500, i32* %v2_13504, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1350c

dec_label_pc_1350c:                               ; preds = %dec_label_pc_134e8, %dec_label_pc_134fc
  %v0_1350c = phi i32 [ %v0_134ec, %dec_label_pc_134e8 ], [ -1, %dec_label_pc_134fc ]
  %v2_13510 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13510, i32* @r4, align 4
  ret i32 %v0_1350c

; uselistorder directives
  uselistorder i32 %v0_134ec, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1350c, { 1, 0 }
}

define i32 @function_13514() local_unnamed_addr {
dec_label_pc_13514:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13514 = load i32, i32* @r4, align 4
  store i32 %v3_13514, i32* %stack_var_-8, align 4
  %v0_13518 = call i32 @getppid()
  store i32 %v0_13518, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13518, -4095
  br i1 %tmp, label %dec_label_pc_13538, label %dec_label_pc_13528

dec_label_pc_13528:                               ; preds = %dec_label_pc_13514
  %v0_13528 = call i32 @function_13a64()
  %v0_1352c = load i32, i32* %r4.global-to-local, align 4
  %v1_1352c = sub i32 0, %v0_1352c
  %v2_13530 = inttoptr i32 %v0_13528 to i32*
  store i32 %v1_1352c, i32* %v2_13530, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13538

dec_label_pc_13538:                               ; preds = %dec_label_pc_13514, %dec_label_pc_13528
  %v0_13538 = phi i32 [ %v0_13518, %dec_label_pc_13514 ], [ -1, %dec_label_pc_13528 ]
  %v2_1353c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1353c, i32* @r4, align 4
  ret i32 %v0_13538

; uselistorder directives
  uselistorder i32 %v0_13518, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13538, { 1, 0 }
}

define i32 @function_13540(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_13540:
  %r4.global-to-local = alloca i32, align 4
  %v2_1355c = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v2_1355c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_1355c, -4095
  br i1 %tmp, label %dec_label_pc_1357c, label %dec_label_pc_1356c

dec_label_pc_1356c:                               ; preds = %dec_label_pc_13540
  %v0_1356c = call i32 @function_13a64()
  %v0_13570 = load i32, i32* %r4.global-to-local, align 4
  %v1_13570 = sub i32 0, %v0_13570
  %v2_13574 = inttoptr i32 %v0_1356c to i32*
  store i32 %v1_13570, i32* %v2_13574, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1357c

dec_label_pc_1357c:                               ; preds = %dec_label_pc_13540, %dec_label_pc_1356c
  %v0_1357c = phi i32 [ %v2_1355c, %dec_label_pc_13540 ], [ -1, %dec_label_pc_1356c ]
  ret i32 %v0_1357c

; uselistorder directives
  uselistorder i32 %v2_1355c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1357c, { 1, 0 }
}

define i32 @function_13590(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13590:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13590 = load i32, i32* @r4, align 4
  store i32 %v3_13590, i32* %stack_var_-8, align 4
  %v2_13594 = call i32 @kill(i32 %arg1, i32 %arg2)
  %v7_13598 = icmp eq i32 %v2_13594, -4096
  store i1 %v7_13598, i1* @cpsr_z, align 1
  store i32 %v2_13594, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_13594, -4095
  br i1 %tmp, label %dec_label_pc_135b4, label %dec_label_pc_135a4

dec_label_pc_135a4:                               ; preds = %dec_label_pc_13590
  %v0_135a4 = call i32 @function_13a64()
  %v0_135a8 = load i32, i32* %r4.global-to-local, align 4
  %v1_135a8 = sub i32 0, %v0_135a8
  %v2_135ac = inttoptr i32 %v0_135a4 to i32*
  store i32 %v1_135a8, i32* %v2_135ac, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_135b4

dec_label_pc_135b4:                               ; preds = %dec_label_pc_13590, %dec_label_pc_135a4
  %v0_135b4 = phi i32 [ %v2_13594, %dec_label_pc_13590 ], [ -1, %dec_label_pc_135a4 ]
  %v2_135b8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_135b8, i32* @r4, align 4
  ret i32 %v0_135b4

; uselistorder directives
  uselistorder i32 %v2_13594, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_135b4, { 1, 0 }
}

define i32 @function_135bc(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_135bc:
  %r4.global-to-local = alloca i32, align 4
  %v1_135cc = and i32 %arg2, 64
  %v2_135cc = icmp eq i32 %v1_135cc, 0
  br i1 %v2_135cc, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_135bc
  %v6_135bc = load i32, i32* @r2, align 4
  %phitmp = urem i32 %v6_135bc, 65536
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_135bc, %bb
  %v0_135dc = phi i32 [ 0, %dec_label_pc_135bc ], [ %phitmp, %bb ]
  store i32 %v0_135dc, i32* @r2, align 4
  %v4_135e4 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  %v7_135e8 = icmp eq i32 %v4_135e4, -4096
  store i1 %v7_135e8, i1* @cpsr_z, align 1
  store i32 %v4_135e4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_135e4, -4095
  br i1 %tmp, label %dec_label_pc_13604, label %dec_label_pc_135f4

dec_label_pc_135f4:                               ; preds = %.thread1
  %v0_135f4 = call i32 @function_13a64()
  %v0_135f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_135f8 = sub i32 0, %v0_135f8
  %v2_135fc = inttoptr i32 %v0_135f4 to i32*
  store i32 %v1_135f8, i32* %v2_135fc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13604

dec_label_pc_13604:                               ; preds = %.thread1, %dec_label_pc_135f4
  %v0_13604 = phi i32 [ %v4_135e4, %.thread1 ], [ -1, %dec_label_pc_135f4 ]
  ret i32 %v0_13604

; uselistorder directives
  uselistorder i32 %v4_135e4, { 2, 0, 3, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_13604, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_13618(i32 %arg1) local_unnamed_addr {
dec_label_pc_13618:
  store i32 %arg1, i32* @r2, align 4
  %v0_13620 = load i32, i32* @r0, align 4
  %v2_13620 = inttoptr i32 %v0_13620 to i8*
  %v3_13620 = call i32 @function_135bc(i8* %v2_13620, i32 577)
  %v0_13624 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13624, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_13618
  %v6_13624 = and i32 %v3_13620, 36
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_13618, %bb
  %v7_13624 = phi i32 [ %v3_13620, %dec_label_pc_13618 ], [ %v6_13624, %bb ]
  ret i32 %v7_13624

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_13628(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13628:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13628 = load i32, i32* @r4, align 4
  store i32 %v3_13628, i32* %stack_var_-8, align 4
  %v2_13630 = load i32, i32* @r2, align 4
  %v3_13630 = load i32, i32* @r3, align 4
  %v4_13630 = call i32 @prctl(i32 %arg1, i32 %arg2, i32 %v2_13630, i32 %v3_13630, i32 0)
  store i32 %v4_13630, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_13630, -4095
  br i1 %tmp, label %dec_label_pc_13650, label %dec_label_pc_13640

dec_label_pc_13640:                               ; preds = %dec_label_pc_13628
  %v0_13640 = call i32 @function_13a64()
  %v0_13644 = load i32, i32* %r4.global-to-local, align 4
  %v1_13644 = sub i32 0, %v0_13644
  %v2_13648 = inttoptr i32 %v0_13640 to i32*
  store i32 %v1_13644, i32* %v2_13648, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13650

dec_label_pc_13650:                               ; preds = %dec_label_pc_13628, %dec_label_pc_13640
  %v0_13650 = phi i32 [ %v4_13630, %dec_label_pc_13628 ], [ -1, %dec_label_pc_13640 ]
  %v2_13654 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13654, i32* @r4, align 4
  ret i32 %v0_13650

; uselistorder directives
  uselistorder i32 %v4_13630, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13650, { 1, 0 }
}

define i32 @function_13658(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13658:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13658 = load i32, i32* @r4, align 4
  store i32 %v3_13658, i32* %stack_var_-8, align 4
  %v4_1365c = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_1365c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_1365c, -4095
  br i1 %tmp, label %dec_label_pc_1367c, label %dec_label_pc_1366c

dec_label_pc_1366c:                               ; preds = %dec_label_pc_13658
  %v0_1366c = call i32 @function_13a64()
  %v0_13670 = load i32, i32* %r4.global-to-local, align 4
  %v1_13670 = sub i32 0, %v0_13670
  %v2_13674 = inttoptr i32 %v0_1366c to i32*
  store i32 %v1_13670, i32* %v2_13674, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1367c

dec_label_pc_1367c:                               ; preds = %dec_label_pc_13658, %dec_label_pc_1366c
  %v0_1367c = phi i32 [ %v4_1365c, %dec_label_pc_13658 ], [ -1, %dec_label_pc_1366c ]
  %v2_13680 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13680, i32* @r4, align 4
  ret i32 %v0_1367c

; uselistorder directives
  uselistorder i32 %v4_1365c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1367c, { 1, 0 }
}

define i32 @function_13684(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13684:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v3_13684 = load i32, i32* @r4, align 4
  store i32 %v3_13684, i32* %stack_var_-8, align 4
  %v7_13688 = call i32 @readlink(i8* %arg1, i8* %tmp, i32 %arg3)
  store i32 %v7_13688, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v7_13688, -4095
  br i1 %tmp6, label %dec_label_pc_136a8, label %dec_label_pc_13698

dec_label_pc_13698:                               ; preds = %dec_label_pc_13684
  %v0_13698 = call i32 @function_13a64()
  %v0_1369c = load i32, i32* %r4.global-to-local, align 4
  %v1_1369c = sub i32 0, %v0_1369c
  %v2_136a0 = inttoptr i32 %v0_13698 to i32*
  store i32 %v1_1369c, i32* %v2_136a0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_136a8

dec_label_pc_136a8:                               ; preds = %dec_label_pc_13684, %dec_label_pc_13698
  %v0_136a8 = phi i32 [ %v7_13688, %dec_label_pc_13684 ], [ -1, %dec_label_pc_13698 ]
  %v2_136ac = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_136ac, i32* @r4, align 4
  ret i32 %v0_136a8

; uselistorder directives
  uselistorder i32 %v7_13688, { 1, 0, 2 }
  uselistorder label %dec_label_pc_136a8, { 1, 0 }
}

define i32 @function_136b0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_136b0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_136b0 = load i32, i32* @r4, align 4
  store i32 %v3_136b0, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_136d8, label %dec_label_pc_136c8

dec_label_pc_136c8:                               ; preds = %dec_label_pc_136b0
  %v0_136c8 = call i32 @function_13a64()
  %v0_136cc = load i32, i32* %r4.global-to-local, align 4
  %v1_136cc = sub i32 0, %v0_136cc
  %v2_136d0 = inttoptr i32 %v0_136c8 to i32*
  store i32 %v1_136cc, i32* %v2_136d0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_136dc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_136d8

dec_label_pc_136d8:                               ; preds = %dec_label_pc_136b0, %dec_label_pc_136c8
  %v2_136dc = phi i32 [ %v3_136b0, %dec_label_pc_136b0 ], [ %v2_136dc.pre, %dec_label_pc_136c8 ]
  %v0_136d8 = phi i32 [ %arg1, %dec_label_pc_136b0 ], [ -1, %dec_label_pc_136c8 ]
  store i32 %v2_136dc, i32* @r4, align 4
  ret i32 %v0_136d8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_136d8, { 1, 0 }
}

define i32 @function_136e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_136e0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_136e0 = load i32, i32* @r4, align 4
  store i32 %v3_136e0, i32* %stack_var_-8, align 4
  %v0_136e4 = call i32 @setsid()
  store i32 %v0_136e4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_136e4, -4095
  br i1 %tmp, label %dec_label_pc_13704, label %dec_label_pc_136f4

dec_label_pc_136f4:                               ; preds = %dec_label_pc_136e0
  %v0_136f4 = call i32 @function_13a64()
  %v0_136f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_136f8 = sub i32 0, %v0_136f8
  %v2_136fc = inttoptr i32 %v0_136f4 to i32*
  store i32 %v1_136f8, i32* %v2_136fc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13704

dec_label_pc_13704:                               ; preds = %dec_label_pc_136e0, %dec_label_pc_136f4
  %v0_13704 = phi i32 [ %v0_136e4, %dec_label_pc_136e0 ], [ -1, %dec_label_pc_136f4 ]
  %v2_13708 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13708, i32* @r4, align 4
  ret i32 %v0_13704

; uselistorder directives
  uselistorder i32 %v0_136e4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13704, { 1, 0 }
}

define i32 @function_1370c(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1370c:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1370c = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v3_1370c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_1370c
  %v3_137145 = load i32, i32* @r4, align 4
  store i32 %v3_137145, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13734

bb:                                               ; preds = %dec_label_pc_1370c
  %v3_13714 = load i32, i32* @r4, align 4
  store i32 %v3_13714, i32* %stack_var_-8, align 4
  %tmp12 = icmp ult i32 %arg1, 3
  br i1 %tmp12, label %dec_label_pc_13734, label %dec_label_pc_13720

dec_label_pc_13720:                               ; preds = %bb
  %v0_13720 = call i32 @function_13a64()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_1372c = inttoptr i32 %v0_13720 to i32*
  store i32 22, i32* %v2_1372c, align 4
  %v0_13758.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13758

dec_label_pc_13734:                               ; preds = %.thread, %bb
  %v7_13734 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp)
  store i32 %v7_13734, i32* %r4.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_13734, -4095
  br i1 %tmp13, label %dec_label_pc_13754, label %dec_label_pc_13744

dec_label_pc_13744:                               ; preds = %dec_label_pc_13734
  %v0_13744 = call i32 @function_13a64()
  %v0_13748 = load i32, i32* %r4.global-to-local, align 4
  %v1_13748 = sub i32 0, %v0_13748
  %v2_1374c = inttoptr i32 %v0_13744 to i32*
  store i32 %v1_13748, i32* %v2_1374c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13754

dec_label_pc_13754:                               ; preds = %dec_label_pc_13734, %dec_label_pc_13744
  %v0_13754 = phi i32 [ %v7_13734, %dec_label_pc_13734 ], [ -1, %dec_label_pc_13744 ]
  store i32 %v0_13754, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13758

dec_label_pc_13758:                               ; preds = %dec_label_pc_13720, %dec_label_pc_13754
  %v0_13758 = phi i32 [ %v0_13758.pre, %dec_label_pc_13720 ], [ %v0_13754, %dec_label_pc_13754 ]
  %v2_1375c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1375c, i32* @r4, align 4
  ret i32 %v0_13758

; uselistorder directives
  uselistorder i32 %v7_13734, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_13758, { 1, 0 }
  uselistorder label %dec_label_pc_13754, { 1, 0 }
  uselistorder label %dec_label_pc_13734, { 1, 0 }
}

define i32 @function_13760(i32* %arg1) local_unnamed_addr {
dec_label_pc_13760:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13760 = load i32, i32* @r4, align 4
  store i32 %v3_13760, i32* %stack_var_-8, align 4
  %v2_13764 = call i32 @time(i32* %arg1)
  store i32 %v2_13764, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_13764, -4095
  br i1 %tmp, label %dec_label_pc_13784, label %dec_label_pc_13774

dec_label_pc_13774:                               ; preds = %dec_label_pc_13760
  %v0_13774 = call i32 @function_13a64()
  %v0_13778 = load i32, i32* %r4.global-to-local, align 4
  %v1_13778 = sub i32 0, %v0_13778
  %v2_1377c = inttoptr i32 %v0_13774 to i32*
  store i32 %v1_13778, i32* %v2_1377c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13784

dec_label_pc_13784:                               ; preds = %dec_label_pc_13760, %dec_label_pc_13774
  %v0_13784 = phi i32 [ %v2_13764, %dec_label_pc_13760 ], [ -1, %dec_label_pc_13774 ]
  %v2_13788 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13788, i32* @r4, align 4
  ret i32 %v0_13784

; uselistorder directives
  uselistorder i32 %v2_13764, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13784, { 1, 0 }
}

define i32 @function_1378c(i8* %arg1) local_unnamed_addr {
dec_label_pc_1378c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1378c = load i32, i32* @r4, align 4
  store i32 %v3_1378c, i32* %stack_var_-8, align 4
  %v3_13790 = call i32 @unlink(i8* %arg1)
  store i32 %v3_13790, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_13790, -4095
  br i1 %tmp, label %dec_label_pc_137b0, label %dec_label_pc_137a0

dec_label_pc_137a0:                               ; preds = %dec_label_pc_1378c
  %v0_137a0 = call i32 @function_13a64()
  %v0_137a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_137a4 = sub i32 0, %v0_137a4
  %v2_137a8 = inttoptr i32 %v0_137a0 to i32*
  store i32 %v1_137a4, i32* %v2_137a8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_137b0

dec_label_pc_137b0:                               ; preds = %dec_label_pc_1378c, %dec_label_pc_137a0
  %v0_137b0 = phi i32 [ %v3_13790, %dec_label_pc_1378c ], [ -1, %dec_label_pc_137a0 ]
  %v2_137b4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_137b4, i32* @r4, align 4
  ret i32 %v0_137b0

; uselistorder directives
  uselistorder i32 %v3_13790, { 1, 0, 2 }
  uselistorder label %dec_label_pc_137b0, { 1, 0 }
}

define i32 @function_137b8(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_137b8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_137b8 = load i32, i32* @r4, align 4
  store i32 %v3_137b8, i32* %stack_var_-8, align 4
  %v4_137bc = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_137bc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_137bc, -4095
  br i1 %tmp, label %dec_label_pc_137dc, label %dec_label_pc_137cc

dec_label_pc_137cc:                               ; preds = %dec_label_pc_137b8
  %v0_137cc = call i32 @function_13a64()
  %v0_137d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_137d0 = sub i32 0, %v0_137d0
  %v2_137d4 = inttoptr i32 %v0_137cc to i32*
  store i32 %v1_137d0, i32* %v2_137d4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_137dc

dec_label_pc_137dc:                               ; preds = %dec_label_pc_137b8, %dec_label_pc_137cc
  %v0_137dc = phi i32 [ %v4_137bc, %dec_label_pc_137b8 ], [ -1, %dec_label_pc_137cc ]
  %v2_137e0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_137e0, i32* @r4, align 4
  ret i32 %v0_137dc

; uselistorder directives
  uselistorder i32 %v4_137bc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_137dc, { 1, 0 }
}

define i32 @function_137e4(i32* %arg1) local_unnamed_addr {
dec_label_pc_137e4:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_137e4 = load i32, i32* @r4, align 4
  store i32 %v3_137e4, i32* %stack_var_-20, align 4
  %v6_137e4 = load i32, i32* @r5, align 4
  %v9_137e4 = load i32, i32* @r6, align 4
  %v12_137e4 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_137ec = load i32, i32* %arg1, align 4
  store i32 %v2_137ec, i32* %r4.global-to-local, align 4
  %v2_137f0 = ptrtoint i32* %stack_var_-36 to i32
  %v1_137f4 = add i32 %tmp, 24
  store i32 %v1_137f4, i32* @r6, align 4
  %v3_137f8 = icmp eq i32 %v2_137ec, -1
  store i32 %v2_137f0, i32* @r7, align 4
  store i32 %v1_137f4, i32* %r2.global-to-local, align 4
  store i32 %v2_137f0, i32* @r0, align 4
  br i1 %v3_137f8, label %dec_label_pc_13810, label %dec_label_pc_13824

dec_label_pc_13810:                               ; preds = %dec_label_pc_137e4
  %v0_13810 = call i32 @function_13a64()
  %v0_13818 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13818, i32* %r2.global-to-local, align 4
  %v2_1381c = inttoptr i32 %v0_13810 to i32*
  store i32 9, i32* %v2_1381c, align 4
  %v0_1387c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1387c

dec_label_pc_13824:                               ; preds = %dec_label_pc_137e4
  %v8_1382c = call i32 @function_14adc(i32 %v2_137f0, i32 ptrtoint (i32* @global_var_14ad4.591 to i32), i32 %v1_137f4, i32 84700, i32 %v3_137e4, i32 %v6_137e4, i32 %v9_137e4)
  %v1_1383c = call i32 @function_14ad4()
  %v0_13848 = load i32, i32* @r5, align 4
  %v1_13848 = inttoptr i32 %v0_13848 to i32*
  %v2_13848 = load i32, i32* %v1_13848, align 4
  store i32 %v2_13848, i32* @r4, align 4
  store i32 %v2_137f0, i32* @r0, align 4
  store i32 -1, i32* %v1_13848, align 4
  store i32 ptrtoint (i32* @global_var_13860.595 to i32), i32* @lr, align 4
  %v8_1385c = call i32 @function_14adc(i32 %v2_137f0, i32 1, i32 %v1_137f4, i32 84700, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_13860 = load i32, i32* @r5, align 4
  %v1_13860 = add i32 %v0_13860, 12
  %v2_13860 = inttoptr i32 %v1_13860 to i32*
  %v3_13860 = load i32, i32* %v2_13860, align 4
  store i32 %v3_13860, i32* @r0, align 4
  %v0_13864 = call i32 @function_140ec()
  %v0_13868 = load i32, i32* @r5, align 4
  store i32 %v0_13868, i32* @r0, align 4
  %v0_1386c = call i32 @function_140ec()
  %v0_13870 = load i32, i32* @r4, align 4
  %v1_13874 = call i32 @function_13490(i32 %v0_13870)
  store i32 %v1_13874, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1387c

dec_label_pc_1387c:                               ; preds = %dec_label_pc_13810, %dec_label_pc_13824
  %v0_1387c = phi i32 [ %v0_1387c.pre, %dec_label_pc_13810 ], [ %v1_13874, %dec_label_pc_13824 ]
  %v2_13884 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_13884, i32* @r4, align 4
  store i32 %v6_137e4, i32* @r5, align 4
  store i32 %v9_137e4, i32* @r6, align 4
  store i32 %v12_137e4, i32* @r7, align 4
  ret i32 %v0_1387c

; uselistorder directives
  uselistorder i32 %v1_137f4, { 2, 1, 0, 3 }
  uselistorder i32 %v2_137f0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v9_137e4, { 1, 0 }
  uselistorder i32 %v6_137e4, { 1, 0 }
  uselistorder label %dec_label_pc_1387c, { 1, 0 }
}

define i32 @function_13898(i32 %arg1) local_unnamed_addr {
dec_label_pc_13898:
  %r5.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-108 = alloca i32, align 4
  %v3_13898 = load i32, i32* @r4, align 4
  %v9_13898 = load i32, i32* @r6, align 4
  %v12_13898 = load i32, i32* @r7, align 4
  %v0_138a4 = load i32, i32* @r0, align 4
  %v2_138a4 = inttoptr i32 %v0_138a4 to i8*
  %v3_138a4 = call i32 @function_135bc(i8* %v2_138a4, i32 18432)
  store i32 %v3_138a4, i32* @r0, align 4
  store i32 %v3_138a4, i32* @r7, align 4
  %v1_138a8 = icmp slt i32 %v3_138a4, 0
  br i1 %v1_138a8, label %.thread1, label %dec_label_pc_138b4

.thread1:                                         ; preds = %dec_label_pc_13898
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_13984

dec_label_pc_138b4:                               ; preds = %dec_label_pc_13898
  %v2_138a0 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_138a0, i32* @r1, align 4
  %v0_138b8 = call i32 @function_14f00()
  %v1_138bc = icmp slt i32 %v0_138b8, 0
  br i1 %v1_138bc, label %dec_label_pc_138dc, label %dec_label_pc_138c4

dec_label_pc_138c4:                               ; preds = %dec_label_pc_138b4
  %v0_138c4 = load i32, i32* @r7, align 4
  store i32 1, i32* @r2, align 4
  %v2_138d0 = call i32 @function_133a0(i32 %v0_138c4, i32 2)
  %v1_138d4 = icmp slt i32 %v2_138d0, 0
  br i1 %v1_138d4, label %dec_label_pc_138dc, label %dec_label_pc_138fc

dec_label_pc_138dc:                               ; preds = %dec_label_pc_138c4, %dec_label_pc_138b4
  %v0_138dc = call i32 @function_13a64()
  store i32 %v0_138dc, i32* %r5.global-to-local, align 4
  %v0_138e4 = load i32, i32* @r7, align 4
  %v1_138e8 = inttoptr i32 %v0_138dc to i32*
  %v2_138e8 = load i32, i32* %v1_138e8, align 4
  store i32 %v2_138e8, i32* @r4, align 4
  %v1_138ec = call i32 @function_13490(i32 %v0_138e4)
  store i32 0, i32* @r6, align 4
  %v0_138f4 = load i32, i32* @r4, align 4
  %v1_138f4 = load i32, i32* %r5.global-to-local, align 4
  %v2_138f4 = inttoptr i32 %v1_138f4 to i32*
  store i32 %v0_138f4, i32* %v2_138f4, align 4
  br label %dec_label_pc_13984

dec_label_pc_138fc:                               ; preds = %dec_label_pc_138c4
  %v1_13900 = call i32 @function_13f40(i32 48)
  store i32 %v1_13900, i32* @r6, align 4
  %v2_13904 = icmp eq i32 %v1_13900, 0
  br i1 %v2_13904, label %dec_label_pc_13954, label %dec_label_pc_1390c

dec_label_pc_1390c:                               ; preds = %dec_label_pc_138fc
  store i32 0, i32* @r4, align 4
  %v2_13910 = add i32 %v1_13900, 16
  %v3_13910 = inttoptr i32 %v2_13910 to i32*
  store i32 0, i32* %v3_13910, align 4
  %v2_13918 = icmp ugt i32 %tmp, 511
  %v1_1391c = load i32, i32* @r6, align 4
  %v2_1391c = add i32 %v1_1391c, 20
  %v3_1391c = inttoptr i32 %v2_1391c to i32*
  store i32 %tmp, i32* %v3_1391c, align 4
  br i1 %v2_13918, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_1390c
  %v2_13924 = load i32, i32* @r6, align 4
  %v3_13924 = add i32 %v2_13924, 20
  %v4_13924 = inttoptr i32 %v3_13924 to i32*
  store i32 512, i32* %v4_13924, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1390c, %bb
  %v0_13928 = load i32, i32* @r7, align 4
  %v1_13928 = load i32, i32* @r6, align 4
  %v2_13928 = inttoptr i32 %v1_13928 to i32*
  store i32 %v0_13928, i32* %v2_13928, align 4
  %v0_1392c = load i32, i32* @r4, align 4
  %v1_1392c = load i32, i32* @r6, align 4
  %v2_1392c = add i32 %v1_1392c, 8
  %v3_1392c = inttoptr i32 %v2_1392c to i32*
  store i32 %v0_1392c, i32* %v3_1392c, align 4
  %v0_13930 = load i32, i32* @r4, align 4
  %v1_13930 = load i32, i32* @r6, align 4
  %v2_13930 = add i32 %v1_13930, 4
  %v3_13930 = inttoptr i32 %v2_13930 to i32*
  store i32 %v0_13930, i32* %v3_13930, align 4
  %v0_13938 = load i32, i32* @r6, align 4
  %v1_13938 = add i32 %v0_13938, 20
  %v2_13938 = inttoptr i32 %v1_13938 to i32*
  %v3_13938 = load i32, i32* %v2_13938, align 4
  %v2_1393c = call i32 @function_14094(i32 1, i32 %v3_13938)
  %v2_13940 = icmp eq i32 %v2_1393c, 0
  %v1_13944 = load i32, i32* @r6, align 4
  %v2_13944 = add i32 %v1_13944, 12
  %v3_13944 = inttoptr i32 %v2_13944 to i32*
  store i32 %v2_1393c, i32* %v3_13944, align 4
  br i1 %v2_13940, label %dec_label_pc_1394c, label %dec_label_pc_13970

dec_label_pc_1394c:                               ; preds = %.thread
  %v0_1394c = load i32, i32* @r6, align 4
  store i32 %v0_1394c, i32* @r0, align 4
  %v0_13950 = call i32 @function_140ec()
  br label %dec_label_pc_13954

dec_label_pc_13954:                               ; preds = %dec_label_pc_138fc, %dec_label_pc_1394c
  %v0_13954 = load i32, i32* @r7, align 4
  %v1_13958 = call i32 @function_13490(i32 %v0_13954)
  %v0_1395c = call i32 @function_13a64()
  store i32 0, i32* @r6, align 4
  %v2_13968 = inttoptr i32 %v0_1395c to i32*
  store i32 12, i32* %v2_13968, align 4
  br label %dec_label_pc_13984

dec_label_pc_13970:                               ; preds = %.thread
  store i32 80260, i32* @lr, align 4
  %v1_13980 = call i32 @function_14ad4()
  br label %dec_label_pc_13984

dec_label_pc_13984:                               ; preds = %.thread1, %dec_label_pc_13954, %dec_label_pc_138dc, %dec_label_pc_13970
  %v0_13984 = load i32, i32* @r6, align 4
  store i32 %v3_13898, i32* @r4, align 4
  store i32 %v9_13898, i32* @r6, align 4
  store i32 %v12_13898, i32* @r7, align 4
  ret i32 %v0_13984

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_14094, { 35, 6, 36, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 1, 22, 21, 20, 19, 18, 2, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 5, 4, 3, 0 }
  uselistorder i32 512, { 4, 17, 18, 0, 1, 2, 3, 6, 10, 5, 7, 13, 11, 12, 14, 8, 15, 9, 16 }
  uselistorder i32 (i32)* @function_13490, { 25, 24, 23, 10, 41, 40, 9, 8, 39, 38, 7, 6, 31, 37, 36, 35, 34, 33, 32, 30, 29, 28, 27, 26, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 5, 4, 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_13984, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_13954, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_13994(i32* %arg1) local_unnamed_addr {
dec_label_pc_13994:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_13994 = load i32, i32* @r4, align 4
  %v6_13994 = load i32, i32* @r5, align 4
  %v9_13994 = load i32, i32* @lr, align 4
  %v1_13998 = add i32 %tmp, 24
  store i32 %v1_13998, i32* @r4, align 4
  %v2_1399c = ptrtoint i32* %stack_var_-28 to i32
  store i32 84700, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v2_1399c, i32* @r0, align 4
  store i32 %v1_13998, i32* %r2.global-to-local, align 4
  %v8_139b8 = call i32 @function_14adc(i32 %v2_1399c, i32 ptrtoint (i32* @global_var_14ad4.591 to i32), i32 %v1_13998, i32 84700, i32 %v3_13994, i32 %v6_13994, i32 %v9_13994)
  %v0_139bc = load i32, i32* @r4, align 4
  store i32 %v0_139bc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14ad4.591 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_139cc.600 to i32), i32* @lr, align 4
  %v1_139c8 = call i32 @function_14ad4()
  store i32 %v1_139c8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_139cc

dec_label_pc_139cc:                               ; preds = %dec_label_pc_13a00, %dec_label_pc_13994
  %v0_139cc = load i32, i32* @r5, align 4
  %v1_139cc = add i32 %v0_139cc, 4
  %v2_139cc = inttoptr i32 %v1_139cc to i32*
  %v3_139cc = load i32, i32* %v2_139cc, align 4
  store i32 %v3_139cc, i32* %r2.global-to-local, align 4
  %v4_139cc = add i32 %v0_139cc, 8
  %v5_139cc = inttoptr i32 %v4_139cc to i32*
  %v6_139cc = load i32, i32* %v5_139cc, align 4
  store i32 %v6_139cc, i32* %r3.global-to-local, align 4
  %tmp8 = icmp ugt i32 %v6_139cc, %v3_139cc
  br i1 %tmp8, label %dec_label_pc_13a00, label %dec_label_pc_139d8

dec_label_pc_139d8:                               ; preds = %dec_label_pc_139cc
  %v1_139d8 = inttoptr i32 %v0_139cc to i32*
  %v2_139d8 = load i32, i32* %v1_139d8, align 4
  store i32 %v2_139d8, i32* @r0, align 4
  %v1_139dc = add i32 %v0_139cc, 12
  %v2_139dc = inttoptr i32 %v1_139dc to i32*
  %v3_139dc = load i32, i32* %v2_139dc, align 4
  %v1_139e0 = add i32 %v0_139cc, 20
  %v2_139e0 = inttoptr i32 %v1_139e0 to i32*
  %v3_139e0 = load i32, i32* %v2_139e0, align 4
  store i32 %v3_139e0, i32* @r2, align 4
  %v4_139e4 = call i32 @function_14f50(i32 %v2_139d8, i32 %v3_139dc, i32 %v3_139e0, i32 %v6_139cc)
  store i32 %v4_139e4, i32* %r0.global-to-local, align 4
  %tmp7 = icmp slt i32 %v4_139e4, 1
  br i1 %tmp7, label %.thread, label %dec_label_pc_139f4

.thread:                                          ; preds = %dec_label_pc_139d8
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_13a34

dec_label_pc_139f4:                               ; preds = %dec_label_pc_139d8
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_139f8 = load i32, i32* @r5, align 4
  %v2_139f8 = add i32 %v1_139f8, 4
  %v3_139f8 = inttoptr i32 %v2_139f8 to i32*
  store i32 0, i32* %v3_139f8, align 4
  %v1_139fc = load i32, i32* @r5, align 4
  %v2_139fc = add i32 %v1_139fc, 8
  %v3_139fc = inttoptr i32 %v2_139fc to i32*
  store i32 %v4_139e4, i32* %v3_139fc, align 4
  %v0_13a00.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13a00

dec_label_pc_13a00:                               ; preds = %dec_label_pc_139cc, %dec_label_pc_139f4
  %v1_13a18 = phi i32 [ %v0_139cc, %dec_label_pc_139cc ], [ %v0_13a00.pre, %dec_label_pc_139f4 ]
  %v1_13a00 = add i32 %v1_13a18, 4
  %v2_13a00 = inttoptr i32 %v1_13a00 to i32*
  %v3_13a00 = load i32, i32* %v2_13a00, align 4
  store i32 %v3_13a00, i32* %r2.global-to-local, align 4
  %v1_13a04 = add i32 %v1_13a18, 12
  %v2_13a04 = inttoptr i32 %v1_13a04 to i32*
  %v3_13a04 = load i32, i32* %v2_13a04, align 4
  store i32 %v3_13a04, i32* %ip.global-to-local, align 4
  %v2_13a08 = add i32 %v3_13a04, %v3_13a00
  store i32 %v2_13a08, i32* @r4, align 4
  %v1_13a0c = add i32 %v2_13a08, 4
  %v2_13a0c = inttoptr i32 %v1_13a0c to i32*
  %v3_13a0c = load i32, i32* %v2_13a0c, align 4
  %v1_13a10 = add i32 %v2_13a08, 8
  %v2_13a10 = inttoptr i32 %v1_13a10 to i8*
  %v3_13a10 = load i8, i8* %v2_13a10, align 1
  %v4_13a10 = zext i8 %v3_13a10 to i32
  store i32 %v4_13a10, i32* %r3.global-to-local, align 4
  %v1_13a14 = add i32 %v2_13a08, 9
  %v2_13a14 = inttoptr i32 %v1_13a14 to i8*
  %v3_13a14 = load i8, i8* %v2_13a14, align 1
  %v4_13a14 = zext i8 %v3_13a14 to i32
  store i32 %v4_13a14, i32* %r0.global-to-local, align 4
  %v2_13a18 = add i32 %v1_13a18, 16
  %v3_13a18 = inttoptr i32 %v2_13a18 to i32*
  store i32 %v3_13a0c, i32* %v3_13a18, align 4
  %v0_13a1c = load i32, i32* %r2.global-to-local, align 4
  %v1_13a1c = load i32, i32* %ip.global-to-local, align 4
  %v2_13a1c = add i32 %v1_13a1c, %v0_13a1c
  %v3_13a1c = inttoptr i32 %v2_13a1c to i32*
  %v4_13a1c = load i32, i32* %v3_13a1c, align 4
  %v0_13a20 = load i32, i32* %r3.global-to-local, align 4
  %v1_13a20 = load i32, i32* %r0.global-to-local, align 4
  %v4_13a20 = mul i32 %v1_13a20, 256
  %v5_13a20 = or i32 %v4_13a20, %v0_13a20
  store i32 %v5_13a20, i32* %r3.global-to-local, align 4
  %v2_13a24 = add i32 %v5_13a20, %v0_13a1c
  store i32 %v2_13a24, i32* @r2, align 4
  %v2_13a28 = icmp eq i32 %v4_13a1c, 0
  %v1_13a2c = load i32, i32* @r5, align 4
  %v2_13a2c = add i32 %v1_13a2c, 4
  %v3_13a2c = inttoptr i32 %v2_13a2c to i32*
  store i32 %v2_13a24, i32* %v3_13a2c, align 4
  br i1 %v2_13a28, label %dec_label_pc_139cc, label %dec_label_pc_13a34

dec_label_pc_13a34:                               ; preds = %dec_label_pc_13a00, %.thread
  store i32 %v2_1399c, i32* @r0, align 4
  store i32 84700, i32* %r3.global-to-local, align 4
  store i32 80456, i32* @lr, align 4
  %v3_13a44 = load i32, i32* @r2, align 4
  %v8_13a44 = call i32 @function_14adc(i32 %v2_1399c, i32 1, i32 %v3_13a44, i32 84700, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_13a48 = load i32, i32* @r4, align 4
  store i32 %v0_13a48, i32* %r0.global-to-local, align 4
  store i32 %v3_13994, i32* @r4, align 4
  store i32 %v6_13994, i32* @r5, align 4
  ret i32 %v0_13a48

; uselistorder directives
  uselistorder i32 %v1_13a18, { 0, 2, 1 }
  uselistorder i32 %v6_139cc, { 1, 0, 2 }
  uselistorder i32 %v0_139cc, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %v2_1399c, { 1, 0, 3, 2 }
  uselistorder i32 %v1_13998, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 6, 4, 5, 0 }
  uselistorder label %dec_label_pc_13a00, { 1, 0 }
}

define i32 @function_13a64() local_unnamed_addr {
dec_label_pc_13a64:
  ret i32 ptrtoint (i32* @global_var_1ead0.603 to i32)
}

define i32 @function_13a70(i32 %arg1) local_unnamed_addr {
dec_label_pc_13a70:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %v1_13a7c = bitcast i32* %stack_var_-20 to %tms*
  %v2_13a7c = call i32 @function_152e0(%tms* %v1_13a7c)
  %v2_13a84 = load i32, i32* %stack_var_-20, align 4
  %v2_13a88 = add i32 %v2_13a84, %tmp
  %v2_13a90 = mul i32 %v2_13a88, 10000
  %v1_13a94 = and i32 %v2_13a90, 2147483632
  ret i32 %v1_13a94

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @function_13ab0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13ab0:
  %v0_13ab0 = call i32 @function_156f0()
  ret i32 %v0_13ab0
}

define i32 @function_13ac0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13ac0:
  %v0_13ac0 = call i32 @function_156f0()
  ret i32 %v0_13ac0

; uselistorder directives
  uselistorder i32 ()* @function_156f0, { 1, 0 }
}

define i32 @function_13ad0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13ad0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v0_13ad4 = load i32, i32* @r2, align 4
  %v8_13ad4 = icmp eq i32 %v0_13ad4, 8
  store i1 %v8_13ad4, i1* %cpsr_z.global-to-local, align 1
  %v5_13ad8 = icmp slt i32 %v0_13ad4, 8
  br i1 %v5_13ad8, label %dec_label_pc_13b38, label %dec_label_pc_13adc

dec_label_pc_13adc:                               ; preds = %dec_label_pc_13ad0
  %v4_13adc = mul i32 %arg2, 256
  %v5_13adc = or i32 %v4_13adc, %arg2
  %v4_13ae0 = mul i32 %v5_13adc, 65536
  %v5_13ae0 = or i32 %v4_13ae0, %v5_13adc
  store i32 %v5_13ae0, i32* %r1.global-to-local, align 4
  %v1_13ae457 = urem i32 %tmp, 4
  %v2_13ae458 = icmp eq i32 %v1_13ae457, 0
  store i1 %v2_13ae458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_13ae458, label %dec_label_pc_13af4, label %bb

bb:                                               ; preds = %dec_label_pc_13adc, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_13adc ]
  %v3_13ae859 = phi i32 [ %v6_13ae8, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_13adc ]
  %v4_13ae8 = inttoptr i32 %v3_13ae859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_13ae8, align 1
  %v5_13ae8 = load i32, i32* %r3.global-to-local, align 4
  %v6_13ae8 = add i32 %v5_13ae8, 1
  store i32 %v6_13ae8, i32* %r3.global-to-local, align 4
  %v0_13aec.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_13af8.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_13aec.pr, label %dec_label_pc_13af4, label %.thread

.thread:                                          ; preds = %bb
  %v2_13aec = add i32 %v0_13af8.pr.pre, -1
  store i32 %v2_13aec, i32* @r2, align 4
  %v1_13ae4 = urem i32 %v6_13ae8, 4
  %v2_13ae4 = icmp eq i32 %v1_13ae4, 0
  store i1 %v2_13ae4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13ae4, label %dec_label_pc_13af4, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_13ae8.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_13ae8.pre to i8
  br label %bb

dec_label_pc_13af4:                               ; preds = %.thread, %bb, %dec_label_pc_13adc
  %v0_13b0028 = phi i32 [ %tmp, %dec_label_pc_13adc ], [ %v6_13ae8, %bb ], [ %v6_13ae8, %.thread ]
  %v0_13af8.pr = phi i32 [ %v0_13ad4, %dec_label_pc_13adc ], [ %v0_13af8.pr.pre, %bb ], [ %v2_13aec, %.thread ]
  %v0_13af4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_13af4, i32* %ip.global-to-local, align 4
  %v8_13af810 = icmp eq i32 %v0_13af8.pr, 8
  store i1 %v8_13af810, i1* %cpsr_z.global-to-local, align 1
  %v5_13afc11 = icmp slt i32 %v0_13af8.pr, 8
  br i1 %v5_13afc11, label %dec_label_pc_13b38, label %dec_label_pc_13b00.preheader

dec_label_pc_13b00.preheader:                     ; preds = %dec_label_pc_13af4
  %v1_13b0046 = inttoptr i32 %v0_13b0028 to i32*
  store i32 %v0_13af4, i32* %v1_13b0046, align 4
  %v3_13b0047 = add i32 %v0_13b0028, 4
  %v4_13b0048 = inttoptr i32 %v3_13b0047 to i32*
  %v5_13b0049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13b0049, i32* %v4_13b0048, align 4
  %v6_13b0050 = add i32 %v0_13b0028, 8
  store i32 %v6_13b0050, i32* %r3.global-to-local, align 4
  %v0_13b0451 = load i32, i32* @r2, align 4
  %v1_13b0452 = add i32 %v0_13b0451, -8
  store i32 %v1_13b0452, i32* %r2.global-to-local, align 4
  %v5_13b0c53 = icmp slt i32 %v1_13b0452, 8
  br i1 %v5_13b0c53, label %dec_label_pc_13b00.dec_label_pc_13b38.loopexit_crit_edge, label %dec_label_pc_13b10

dec_label_pc_13b10:                               ; preds = %dec_label_pc_13b00.preheader, %dec_label_pc_13af8.dec_label_pc_13b00_crit_edge
  %v6_13b0055 = phi i32 [ %v6_13b00, %dec_label_pc_13af8.dec_label_pc_13b00_crit_edge ], [ %v6_13b0050, %dec_label_pc_13b00.preheader ]
  %v0_13b0054 = phi i32 [ %v12_13b2c, %dec_label_pc_13af8.dec_label_pc_13b00_crit_edge ], [ %v0_13b0028, %dec_label_pc_13b00.preheader ]
  %v1_13b10 = inttoptr i32 %v6_13b0055 to i32*
  %v2_13b10 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_13b10, i32* %v1_13b10, align 4
  %v3_13b10 = add i32 %v0_13b0054, 12
  %v4_13b10 = inttoptr i32 %v3_13b10 to i32*
  %v5_13b10 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13b10, i32* %v4_13b10, align 4
  %v6_13b10 = add i32 %v0_13b0054, 16
  store i32 %v6_13b10, i32* %r3.global-to-local, align 4
  %v0_13b14 = load i32, i32* %r2.global-to-local, align 4
  %v1_13b14 = add i32 %v0_13b14, -8
  store i32 %v1_13b14, i32* %r2.global-to-local, align 4
  %v5_13b1c = icmp slt i32 %v1_13b14, 8
  br i1 %v5_13b1c, label %dec_label_pc_13b10.dec_label_pc_13b38.loopexit_crit_edge, label %dec_label_pc_13b20

dec_label_pc_13b20:                               ; preds = %dec_label_pc_13b10
  %v1_13b20 = inttoptr i32 %v6_13b10 to i32*
  %v2_13b20 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_13b20, i32* %v1_13b20, align 4
  %v3_13b20 = add i32 %v0_13b0054, 20
  %v4_13b20 = inttoptr i32 %v3_13b20 to i32*
  %v5_13b20 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13b20, i32* %v4_13b20, align 4
  %v6_13b20 = add i32 %v0_13b0054, 24
  store i32 %v6_13b20, i32* %r3.global-to-local, align 4
  %v0_13b24 = load i32, i32* %r2.global-to-local, align 4
  %v1_13b24 = add i32 %v0_13b24, -8
  store i32 %v1_13b24, i32* %r2.global-to-local, align 4
  %v5_13b2c = icmp slt i32 %v1_13b24, 8
  br i1 %v5_13b2c, label %dec_label_pc_13b20.dec_label_pc_13b38.loopexit_crit_edge, label %dec_label_pc_13af8

dec_label_pc_13af8:                               ; preds = %dec_label_pc_13b20
  %v7_13b2c = inttoptr i32 %v6_13b20 to i32*
  %v8_13b2c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_13b2c, i32* %v7_13b2c, align 4
  %v9_13b2c = add i32 %v0_13b0054, 28
  %v10_13b2c = inttoptr i32 %v9_13b2c to i32*
  %v11_13b2c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_13b2c, i32* %v10_13b2c, align 4
  %v12_13b2c = add i32 %v0_13b0054, 32
  store i32 %v12_13b2c, i32* %r3.global-to-local, align 4
  %v6_13b30 = load i32, i32* %r2.global-to-local, align 4
  %v7_13b30 = add i32 %v6_13b30, -8
  store i32 %v7_13b30, i32* %r2.global-to-local, align 4
  %v5_13afc = icmp slt i32 %v7_13b30, 8
  br i1 %v5_13afc, label %dec_label_pc_13af8.dec_label_pc_13b38.loopexit_crit_edge, label %dec_label_pc_13af8.dec_label_pc_13b00_crit_edge

dec_label_pc_13af8.dec_label_pc_13b00_crit_edge:  ; preds = %dec_label_pc_13af8
  %v2_13b00.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_13b00 = inttoptr i32 %v12_13b2c to i32*
  store i32 %v2_13b00.pre, i32* %v1_13b00, align 4
  %v3_13b00 = add i32 %v0_13b0054, 36
  %v4_13b00 = inttoptr i32 %v3_13b00 to i32*
  %v5_13b00 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13b00, i32* %v4_13b00, align 4
  %v6_13b00 = add i32 %v0_13b0054, 40
  store i32 %v6_13b00, i32* %r3.global-to-local, align 4
  %v0_13b04 = load i32, i32* %r2.global-to-local, align 4
  %v1_13b04 = add i32 %v0_13b04, -8
  store i32 %v1_13b04, i32* %r2.global-to-local, align 4
  %v5_13b0c = icmp slt i32 %v1_13b04, 8
  br i1 %v5_13b0c, label %dec_label_pc_13b00.dec_label_pc_13b38.loopexit_crit_edge, label %dec_label_pc_13b10

dec_label_pc_13b00.dec_label_pc_13b38.loopexit_crit_edge: ; preds = %dec_label_pc_13af8.dec_label_pc_13b00_crit_edge, %dec_label_pc_13b00.preheader
  %v1_13b04.lcssa = phi i32 [ %v1_13b0452, %dec_label_pc_13b00.preheader ], [ %v1_13b04, %dec_label_pc_13af8.dec_label_pc_13b00_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13b38

dec_label_pc_13af8.dec_label_pc_13b38.loopexit_crit_edge: ; preds = %dec_label_pc_13af8
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13b38

dec_label_pc_13b10.dec_label_pc_13b38.loopexit_crit_edge: ; preds = %dec_label_pc_13b10
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13b38

dec_label_pc_13b20.dec_label_pc_13b38.loopexit_crit_edge: ; preds = %dec_label_pc_13b20
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13b38

dec_label_pc_13b38:                               ; preds = %dec_label_pc_13af4, %dec_label_pc_13b00.dec_label_pc_13b38.loopexit_crit_edge, %dec_label_pc_13af8.dec_label_pc_13b38.loopexit_crit_edge, %dec_label_pc_13b10.dec_label_pc_13b38.loopexit_crit_edge, %dec_label_pc_13b20.dec_label_pc_13b38.loopexit_crit_edge, %dec_label_pc_13ad0
  %v0_13b40 = phi i32 [ %v0_13ad4, %dec_label_pc_13ad0 ], [ %v1_13b24, %dec_label_pc_13b20.dec_label_pc_13b38.loopexit_crit_edge ], [ %v1_13b14, %dec_label_pc_13b10.dec_label_pc_13b38.loopexit_crit_edge ], [ %v7_13b30, %dec_label_pc_13af8.dec_label_pc_13b38.loopexit_crit_edge ], [ %v1_13b04.lcssa, %dec_label_pc_13b00.dec_label_pc_13b38.loopexit_crit_edge ], [ %v0_13af8.pr, %dec_label_pc_13af4 ]
  %v2_13b38 = icmp eq i32 %v0_13b40, 0
  store i1 %v2_13b38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13b38, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_13b38
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_13b38
  %v1_13b40 = sub i32 7, %v0_13b40
  store i32 %v1_13b40, i32* %r2.global-to-local, align 4
  %v3_13b44 = mul i32 %v1_13b40, 4
  %v4_13b44 = add i32 %v3_13b44, ptrtoint (i32* @global_var_13b4c.605 to i32)
  call void @__pseudo_branch(i32 %v4_13b44)
  %v0_13b4c = load i32, i32* %r1.global-to-local, align 4
  %v1_13b4c = trunc i32 %v0_13b4c to i8
  %v2_13b4c = load i32, i32* %r3.global-to-local, align 4
  %v3_13b4c = inttoptr i32 %v2_13b4c to i8*
  store i8 %v1_13b4c, i8* %v3_13b4c, align 1
  %v4_13b4c = load i32, i32* %r3.global-to-local, align 4
  %v5_13b4c = add i32 %v4_13b4c, 1
  store i32 %v5_13b4c, i32* %r3.global-to-local, align 4
  %v0_13b50 = load i32, i32* %r1.global-to-local, align 4
  %v1_13b50 = trunc i32 %v0_13b50 to i8
  %v3_13b50 = inttoptr i32 %v5_13b4c to i8*
  store i8 %v1_13b50, i8* %v3_13b50, align 1
  %v4_13b50 = load i32, i32* %r3.global-to-local, align 4
  %v5_13b50 = add i32 %v4_13b50, 1
  store i32 %v5_13b50, i32* %r3.global-to-local, align 4
  %v0_13b54 = load i32, i32* %r1.global-to-local, align 4
  %v1_13b54 = trunc i32 %v0_13b54 to i8
  %v3_13b54 = inttoptr i32 %v5_13b50 to i8*
  store i8 %v1_13b54, i8* %v3_13b54, align 1
  %v4_13b54 = load i32, i32* %r3.global-to-local, align 4
  %v5_13b54 = add i32 %v4_13b54, 1
  store i32 %v5_13b54, i32* %r3.global-to-local, align 4
  %v0_13b58 = load i32, i32* %r1.global-to-local, align 4
  %v1_13b58 = trunc i32 %v0_13b58 to i8
  %v3_13b58 = inttoptr i32 %v5_13b54 to i8*
  store i8 %v1_13b58, i8* %v3_13b58, align 1
  %v4_13b58 = load i32, i32* %r3.global-to-local, align 4
  %v5_13b58 = add i32 %v4_13b58, 1
  store i32 %v5_13b58, i32* %r3.global-to-local, align 4
  %v0_13b5c = load i32, i32* %r1.global-to-local, align 4
  %v1_13b5c = trunc i32 %v0_13b5c to i8
  %v3_13b5c = inttoptr i32 %v5_13b58 to i8*
  store i8 %v1_13b5c, i8* %v3_13b5c, align 1
  %v4_13b5c = load i32, i32* %r3.global-to-local, align 4
  %v5_13b5c = add i32 %v4_13b5c, 1
  store i32 %v5_13b5c, i32* %r3.global-to-local, align 4
  %v0_13b60 = load i32, i32* %r1.global-to-local, align 4
  %v1_13b60 = trunc i32 %v0_13b60 to i8
  %v3_13b60 = inttoptr i32 %v5_13b5c to i8*
  store i8 %v1_13b60, i8* %v3_13b60, align 1
  %v4_13b60 = load i32, i32* %r3.global-to-local, align 4
  %v5_13b60 = add i32 %v4_13b60, 1
  store i32 %v5_13b60, i32* %r3.global-to-local, align 4
  %v0_13b64 = load i32, i32* %r1.global-to-local, align 4
  %v1_13b64 = trunc i32 %v0_13b64 to i8
  %v3_13b64 = inttoptr i32 %v5_13b60 to i8*
  store i8 %v1_13b64, i8* %v3_13b64, align 1
  %v4_13b64 = load i32, i32* %r3.global-to-local, align 4
  %v5_13b64 = add i32 %v4_13b64, 1
  store i32 %v5_13b64, i32* %r3.global-to-local, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_13b00, { 1, 0 }
  uselistorder i32 %v12_13b2c, { 1, 2, 0 }
  uselistorder i32 %v0_13b0054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_13af8.pr, { 0, 2, 1 }
  uselistorder i32 %v6_13ae8, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_13adc, { 1, 0 }
  uselistorder i32 %v0_13ad4, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 17, 14, 15, 16, 13, 18, 21, 22 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 9, 14, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 2, 1, 3, 0, 5, 8, 7, 4, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_13b38, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_13b10, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_13b70(i32 %arg1) local_unnamed_addr {
dec_label_pc_13b70:
  %stack_var_-8 = alloca i32, align 4
  %v2_13b74 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_13b74, i32* @r1, align 4
  %v0_13b7c = call i32 @function_15b80()
  %v2_13b80 = icmp eq i32 %v0_13b7c, 0
  br i1 %v2_13b80, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_13b70
  %v3_13b88 = load i32, i32* %stack_var_-8, align 4
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_13b70, %bb
  %v5_13b90 = phi i32 [ -1, %dec_label_pc_13b70 ], [ %v3_13b88, %bb ]
  ret i32 %v5_13b90

; uselistorder directives
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_13b94(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_13b94:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13b94 = load i32, i32* @r4, align 4
  store i32 %v3_13b94, i32* %stack_var_-8, align 4
  %v5_13b98 = inttoptr i32 %arg3 to i32*
  %v6_13b98 = call i32 @accept(i32 %arg1, %sockaddr* %arg2, i32* %v5_13b98)
  store i32 %v6_13b98, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_13b98, -4095
  br i1 %tmp, label %dec_label_pc_13bb8, label %dec_label_pc_13ba8

dec_label_pc_13ba8:                               ; preds = %dec_label_pc_13b94
  %v0_13ba8 = call i32 @function_13a64()
  %v0_13bac = load i32, i32* %r4.global-to-local, align 4
  %v1_13bac = sub i32 0, %v0_13bac
  %v2_13bb0 = inttoptr i32 %v0_13ba8 to i32*
  store i32 %v1_13bac, i32* %v2_13bb0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13bb8

dec_label_pc_13bb8:                               ; preds = %dec_label_pc_13b94, %dec_label_pc_13ba8
  %v0_13bb8 = phi i32 [ %v6_13b98, %dec_label_pc_13b94 ], [ -1, %dec_label_pc_13ba8 ]
  %v2_13bbc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13bbc, i32* @r4, align 4
  ret i32 %v0_13bb8

; uselistorder directives
  uselistorder i32 %v6_13b98, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13bb8, { 1, 0 }
}

define i32 @function_13bc0(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13bc0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13bc0 = load i32, i32* @r4, align 4
  store i32 %v3_13bc0, i32* %stack_var_-8, align 4
  %v5_13bc4 = call i32 @bind(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_13bc4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13bc4, -4095
  br i1 %tmp, label %dec_label_pc_13be4, label %dec_label_pc_13bd4

dec_label_pc_13bd4:                               ; preds = %dec_label_pc_13bc0
  %v0_13bd4 = call i32 @function_13a64()
  %v0_13bd8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13bd8 = sub i32 0, %v0_13bd8
  %v2_13bdc = inttoptr i32 %v0_13bd4 to i32*
  store i32 %v1_13bd8, i32* %v2_13bdc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13be4

dec_label_pc_13be4:                               ; preds = %dec_label_pc_13bc0, %dec_label_pc_13bd4
  %v0_13be4 = phi i32 [ %v5_13bc4, %dec_label_pc_13bc0 ], [ -1, %dec_label_pc_13bd4 ]
  %v2_13be8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13be8, i32* @r4, align 4
  ret i32 %v0_13be4

; uselistorder directives
  uselistorder i32 %v5_13bc4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13be4, { 1, 0 }
}

define i32 @function_13bec(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13bec:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13bec = load i32, i32* @r4, align 4
  store i32 %v3_13bec, i32* %stack_var_-8, align 4
  %v5_13bf0 = call i32 @connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_13bf0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13bf0, -4095
  br i1 %tmp, label %dec_label_pc_13c10, label %dec_label_pc_13c00

dec_label_pc_13c00:                               ; preds = %dec_label_pc_13bec
  %v0_13c00 = call i32 @function_13a64()
  %v0_13c04 = load i32, i32* %r4.global-to-local, align 4
  %v1_13c04 = sub i32 0, %v0_13c04
  %v2_13c08 = inttoptr i32 %v0_13c00 to i32*
  store i32 %v1_13c04, i32* %v2_13c08, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13c10

dec_label_pc_13c10:                               ; preds = %dec_label_pc_13bec, %dec_label_pc_13c00
  %v0_13c10 = phi i32 [ %v5_13bf0, %dec_label_pc_13bec ], [ -1, %dec_label_pc_13c00 ]
  %v2_13c14 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13c14, i32* @r4, align 4
  ret i32 %v0_13c10

; uselistorder directives
  uselistorder i32 %v5_13bf0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13c10, { 1, 0 }
}

define i32 @function_13c18(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13c18:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13c18 = load i32, i32* @r4, align 4
  store i32 %v3_13c18, i32* %stack_var_-8, align 4
  %v5_13c1c = inttoptr i32 %arg3 to i32*
  %v6_13c1c = call i32 @getsockname(i32 %arg1, %sockaddr* %arg2, i32* %v5_13c1c)
  store i32 %v6_13c1c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_13c1c, -4095
  br i1 %tmp, label %dec_label_pc_13c3c, label %dec_label_pc_13c2c

dec_label_pc_13c2c:                               ; preds = %dec_label_pc_13c18
  %v0_13c2c = call i32 @function_13a64()
  %v0_13c30 = load i32, i32* %r4.global-to-local, align 4
  %v1_13c30 = sub i32 0, %v0_13c30
  %v2_13c34 = inttoptr i32 %v0_13c2c to i32*
  store i32 %v1_13c30, i32* %v2_13c34, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13c3c

dec_label_pc_13c3c:                               ; preds = %dec_label_pc_13c18, %dec_label_pc_13c2c
  %v0_13c3c = phi i32 [ %v6_13c1c, %dec_label_pc_13c18 ], [ -1, %dec_label_pc_13c2c ]
  %v2_13c40 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13c40, i32* @r4, align 4
  ret i32 %v0_13c3c

; uselistorder directives
  uselistorder i32 %v6_13c1c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13c3c, { 1, 0 }
}

define i32 @function_13c44(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_13c44:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13c44 = load i32, i32* @r4, align 4
  store i32 %v3_13c44, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13c4c = call i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* null)
  store i32 %v5_13c4c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13c4c, -4095
  br i1 %tmp, label %dec_label_pc_13c6c, label %dec_label_pc_13c5c

dec_label_pc_13c5c:                               ; preds = %dec_label_pc_13c44
  %v0_13c5c = call i32 @function_13a64()
  %v0_13c60 = load i32, i32* %r4.global-to-local, align 4
  %v1_13c60 = sub i32 0, %v0_13c60
  %v2_13c64 = inttoptr i32 %v0_13c5c to i32*
  store i32 %v1_13c60, i32* %v2_13c64, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13c6c

dec_label_pc_13c6c:                               ; preds = %dec_label_pc_13c44, %dec_label_pc_13c5c
  %v0_13c6c = phi i32 [ %v5_13c4c, %dec_label_pc_13c44 ], [ -1, %dec_label_pc_13c5c ]
  %v2_13c70 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13c70, i32* @r4, align 4
  ret i32 %v0_13c6c

; uselistorder directives
  uselistorder i32 %v5_13c4c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13c6c, { 1, 0 }
}

define i32 @function_13c74(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13c74:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13c74 = load i32, i32* @r4, align 4
  store i32 %v3_13c74, i32* %stack_var_-8, align 4
  %v2_13c78 = call i32 @listen(i32 %arg1, i32 %arg2)
  store i32 %v2_13c78, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_13c78, -4095
  br i1 %tmp, label %dec_label_pc_13c98, label %dec_label_pc_13c88

dec_label_pc_13c88:                               ; preds = %dec_label_pc_13c74
  %v0_13c88 = call i32 @function_13a64()
  %v0_13c8c = load i32, i32* %r4.global-to-local, align 4
  %v1_13c8c = sub i32 0, %v0_13c8c
  %v2_13c90 = inttoptr i32 %v0_13c88 to i32*
  store i32 %v1_13c8c, i32* %v2_13c90, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13c98

dec_label_pc_13c98:                               ; preds = %dec_label_pc_13c74, %dec_label_pc_13c88
  %v0_13c98 = phi i32 [ %v2_13c78, %dec_label_pc_13c74 ], [ -1, %dec_label_pc_13c88 ]
  %v2_13c9c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13c9c, i32* @r4, align 4
  ret i32 %v0_13c98

; uselistorder directives
  uselistorder i32 %v2_13c78, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13c98, { 1, 0 }
}

define i32 @function_13ca0(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13ca0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13ca0 = load i32, i32* @r4, align 4
  store i32 %v3_13ca0, i32* %stack_var_-8, align 4
  %v5_13ca4 = call i32 @recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_13ca4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13ca4, -4095
  br i1 %tmp, label %dec_label_pc_13cc4, label %dec_label_pc_13cb4

dec_label_pc_13cb4:                               ; preds = %dec_label_pc_13ca0
  %v0_13cb4 = call i32 @function_13a64()
  %v0_13cb8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13cb8 = sub i32 0, %v0_13cb8
  %v2_13cbc = inttoptr i32 %v0_13cb4 to i32*
  store i32 %v1_13cb8, i32* %v2_13cbc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13cc4

dec_label_pc_13cc4:                               ; preds = %dec_label_pc_13ca0, %dec_label_pc_13cb4
  %v0_13cc4 = phi i32 [ %v5_13ca4, %dec_label_pc_13ca0 ], [ -1, %dec_label_pc_13cb4 ]
  %v2_13cc8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13cc8, i32* @r4, align 4
  ret i32 %v0_13cc4

; uselistorder directives
  uselistorder i32 %v5_13ca4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13cc4, { 1, 0 }
}

define i32 @function_13ccc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_13ccc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_13ccc = load i32, i32* @r4, align 4
  store i32 %v3_13ccc, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13cd8 = call i32 @recvfrom(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32* null)
  store i32 %v5_13cd8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13cd8, -4095
  br i1 %tmp, label %dec_label_pc_13cf8, label %dec_label_pc_13ce8

dec_label_pc_13ce8:                               ; preds = %dec_label_pc_13ccc
  %v0_13ce8 = call i32 @function_13a64()
  %v0_13cec = load i32, i32* %r4.global-to-local, align 4
  %v1_13cec = sub i32 0, %v0_13cec
  %v2_13cf0 = inttoptr i32 %v0_13ce8 to i32*
  store i32 %v1_13cec, i32* %v2_13cf0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13cf8

dec_label_pc_13cf8:                               ; preds = %dec_label_pc_13ccc, %dec_label_pc_13ce8
  %v0_13cf8 = phi i32 [ %v5_13cd8, %dec_label_pc_13ccc ], [ -1, %dec_label_pc_13ce8 ]
  %v2_13cfc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13cfc, i32* @r4, align 4
  ret i32 %v0_13cf8

; uselistorder directives
  uselistorder i32 %v5_13cd8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13cf8, { 1, 0 }
}

define i32 @function_13d00(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13d00:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13d00 = load i32, i32* @r4, align 4
  store i32 %v3_13d00, i32* %stack_var_-8, align 4
  %v5_13d04 = call i32 @send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_13d04, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13d04, -4095
  br i1 %tmp, label %dec_label_pc_13d24, label %dec_label_pc_13d14

dec_label_pc_13d14:                               ; preds = %dec_label_pc_13d00
  %v0_13d14 = call i32 @function_13a64()
  %v0_13d18 = load i32, i32* %r4.global-to-local, align 4
  %v1_13d18 = sub i32 0, %v0_13d18
  %v2_13d1c = inttoptr i32 %v0_13d14 to i32*
  store i32 %v1_13d18, i32* %v2_13d1c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13d24

dec_label_pc_13d24:                               ; preds = %dec_label_pc_13d00, %dec_label_pc_13d14
  %v0_13d24 = phi i32 [ %v5_13d04, %dec_label_pc_13d00 ], [ -1, %dec_label_pc_13d14 ]
  %v2_13d28 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13d28, i32* @r4, align 4
  ret i32 %v0_13d24

; uselistorder directives
  uselistorder i32 %v5_13d04, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13d24, { 1, 0 }
}

define i32 @function_13d2c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_13d2c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13d38 = call i32 @sendto(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32 0)
  store i32 %v5_13d38, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13d38, -4095
  br i1 %tmp, label %dec_label_pc_13d58, label %dec_label_pc_13d48

dec_label_pc_13d48:                               ; preds = %dec_label_pc_13d2c
  %v0_13d48 = call i32 @function_13a64()
  %v0_13d4c = load i32, i32* %r4.global-to-local, align 4
  %v1_13d4c = sub i32 0, %v0_13d4c
  %v2_13d50 = inttoptr i32 %v0_13d48 to i32*
  store i32 %v1_13d4c, i32* %v2_13d50, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13d58

dec_label_pc_13d58:                               ; preds = %dec_label_pc_13d2c, %dec_label_pc_13d48
  %v0_13d58 = phi i32 [ %v5_13d38, %dec_label_pc_13d2c ], [ -1, %dec_label_pc_13d48 ]
  ret i32 %v0_13d58

; uselistorder directives
  uselistorder i32 %v5_13d38, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13d58, { 1, 0 }
}

define i32 @function_13d60(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_13d60:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13d60 = load i32, i32* @r4, align 4
  store i32 %v3_13d60, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13d68 = call i32 @setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 0)
  store i32 %v5_13d68, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13d68, -4095
  br i1 %tmp, label %dec_label_pc_13d88, label %dec_label_pc_13d78

dec_label_pc_13d78:                               ; preds = %dec_label_pc_13d60
  %v0_13d78 = call i32 @function_13a64()
  %v0_13d7c = load i32, i32* %r4.global-to-local, align 4
  %v1_13d7c = sub i32 0, %v0_13d7c
  %v2_13d80 = inttoptr i32 %v0_13d78 to i32*
  store i32 %v1_13d7c, i32* %v2_13d80, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13d88

dec_label_pc_13d88:                               ; preds = %dec_label_pc_13d60, %dec_label_pc_13d78
  %v0_13d88 = phi i32 [ %v5_13d68, %dec_label_pc_13d60 ], [ -1, %dec_label_pc_13d78 ]
  %v2_13d8c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13d8c, i32* @r4, align 4
  ret i32 %v0_13d88

; uselistorder directives
  uselistorder i32 %v5_13d68, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13d88, { 1, 0 }
}

define i32 @function_13d90(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13d90:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13d90 = load i32, i32* @r4, align 4
  store i32 %v3_13d90, i32* %stack_var_-8, align 4
  %v3_13d94 = call i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3)
  store i32 %v3_13d94, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_13d94, -4095
  br i1 %tmp, label %dec_label_pc_13db4, label %dec_label_pc_13da4

dec_label_pc_13da4:                               ; preds = %dec_label_pc_13d90
  %v0_13da4 = call i32 @function_13a64()
  %v0_13da8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13da8 = sub i32 0, %v0_13da8
  %v2_13dac = inttoptr i32 %v0_13da4 to i32*
  store i32 %v1_13da8, i32* %v2_13dac, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13db4

dec_label_pc_13db4:                               ; preds = %dec_label_pc_13d90, %dec_label_pc_13da4
  %v0_13db4 = phi i32 [ %v3_13d94, %dec_label_pc_13d90 ], [ -1, %dec_label_pc_13da4 ]
  %v2_13db8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13db8, i32* @r4, align 4
  ret i32 %v0_13db4

; uselistorder directives
  uselistorder i32 %v3_13d94, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13db4, { 1, 0 }
}

define i32 @function_13dbc(i32 %arg1) local_unnamed_addr {
dec_label_pc_13dbc:
  %v3_13dbc = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_13dc4 = call i32 @function_134e8()
  %v0_13dc8 = load i32, i32* @r4, align 4
  store i32 %v3_13dbc, i32* @r4, align 4
  %v2_13dd0 = call i32 @function_13590(i32 %v0_13dc4, i32 %v0_13dc8)
  ret i32 %v2_13dd0

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_13590, { 14, 15, 13, 12, 11, 10, 9, 16, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @function_134e8, { 0, 1, 3, 2 }
}

define i32 @function_13dd4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13dd4:
  store i32 %arg1, i32* @r1, align 4
  %tmp2 = icmp slt i32 %arg1, 1
  br i1 %tmp2, label %dec_label_pc_13df0, label %dec_label_pc_13de0

dec_label_pc_13de0:                               ; preds = %dec_label_pc_13dd4
  %v8_13de4 = icmp sgt i32 %arg1, 64
  br i1 %v8_13de4, label %dec_label_pc_13df0, label %dec_label_pc_13de8

dec_label_pc_13de8:                               ; preds = %dec_label_pc_13de0
  %v0_13dec = call i32 @function_13ef8()
  br label %dec_label_pc_13df0

dec_label_pc_13df0:                               ; preds = %dec_label_pc_13de0, %dec_label_pc_13dd4, %dec_label_pc_13de8
  %v0_13df0 = call i32 @function_13a64()
  %v2_13df8 = inttoptr i32 %v0_13df0 to i32*
  store i32 22, i32* %v2_13df8, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13df0, { 2, 0, 1 }
}

define i32 @function_13e04(i32 %arg1) local_unnamed_addr {
dec_label_pc_13e04:
  store i32 128, i32* @r2, align 4
  %v0_13e10 = load i32, i32* @r0, align 4
  %v2_13e10 = inttoptr i32 %v0_13e10 to i8*
  %v3_13e10 = call i32 @function_13ad0(i8* %v2_13e10, i32 0)
  ret i32 0
}

define i32 @function_13e1c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13e1c:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_13e1c = load i32, i32* @r4, align 4
  store i32 %v3_13e1c, i32* %stack_var_-12, align 4
  %v6_13e1c = load i32, i32* @r5, align 4
  %v10_13e1c = ptrtoint i32* %stack_var_-12 to i32
  %v7_13e20 = icmp eq i32 %arg2, -1
  %v0_13e2c.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v7_13e20, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_13e1c
  br label %dec_label_pc_13e44

bb:                                               ; preds = %dec_label_pc_13e1c
  %v2_13e28 = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v0_13e2c.pre, i32* @r4, align 4
  %tmp19 = icmp slt i32 %v0_13e2c.pre, 1
  br i1 %tmp19, label %dec_label_pc_13e44, label %dec_label_pc_13e34

dec_label_pc_13e34:                               ; preds = %bb
  %v7_13e38 = icmp sgt i32 %v0_13e2c.pre, 64
  br i1 %v7_13e38, label %dec_label_pc_13e44, label %bb20

bb20:                                             ; preds = %dec_label_pc_13e34
  store i32 %arg2, i32* %stack_var_-152, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v5_13e6824 = add i32 %v10_13e1c, 124
  br label %dec_label_pc_13e58

dec_label_pc_13e44:                               ; preds = %.thread, %dec_label_pc_13e34, %bb
  %v0_13e44 = call i32 @function_13a64()
  store i32 %v0_13e44, i32* %r0.global-to-local, align 4
  store i32 -1, i32* @r2, align 4
  %v2_13e50 = inttoptr i32 %v0_13e44 to i32*
  store i32 22, i32* %v2_13e50, align 4
  %v0_13ec4.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_13ec4

dec_label_pc_13e58:                               ; preds = %bb20, %dec_label_pc_13e58
  %v5_13e6825 = phi i32 [ %v5_13e6824, %bb20 ], [ %v5_13e68, %dec_label_pc_13e58 ]
  %v2_13e5c = add i32 %v5_13e6825, -136
  %v3_13e5c = inttoptr i32 %v2_13e5c to i32*
  store i32 0, i32* %v3_13e5c, align 4
  %v0_13e60.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_13e60 = add i32 %v0_13e60.pre, -1
  store i32 %v1_13e60, i32* %r0.global-to-local, align 4
  %v6_13e60 = icmp slt i32 %v1_13e60, 0
  %v4_13e68 = mul i32 %v1_13e60, 4
  %v5_13e68 = add i32 %v4_13e68, %v10_13e1c
  br i1 %v6_13e60, label %dec_label_pc_13e70, label %dec_label_pc_13e58

dec_label_pc_13e70:                               ; preds = %dec_label_pc_13e58
  %v2_13e70 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_13e70, i32* @r5, align 4
  %v2_13e74 = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_13e74, i32* @r0, align 4
  %v0_13e78 = load i32, i32* @r4, align 4
  store i32 %v0_13e78, i32* @r1, align 4
  %v0_13e7c = call i32 @function_13ef8()
  store i32 %v0_13e7c, i32* %r0.global-to-local, align 4
  %v1_13e80 = icmp slt i32 %v0_13e7c, 0
  br i1 %v1_13e80, label %dec_label_pc_13ec0, label %dec_label_pc_13e88

dec_label_pc_13e88:                               ; preds = %dec_label_pc_13e70
  %v0_13e88 = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1eca8.607 to i32), i32* %r0.global-to-local, align 4
  %v2_13e90 = call i32 @function_13ed4(i32 ptrtoint (i32* @global_var_1eca8.607 to i32), i32 %v0_13e88)
  %v0_13ea8 = load i32, i32* @r4, align 4
  store i32 %v0_13ea8, i32* %r0.global-to-local, align 4
  %v4_13eb0 = call i32 @function_14dc0(i32 %v0_13ea8, i32* nonnull %stack_var_-152, i32 %v2_13e28)
  store i32 %v4_13eb0, i32* %r0.global-to-local, align 4
  %v1_13eb4 = icmp slt i32 %v4_13eb0, 0
  br i1 %v1_13eb4, label %dec_label_pc_13ec0, label %bb23

bb23:                                             ; preds = %dec_label_pc_13e88
  %v5_13eb8 = load i32, i32* %stack_var_-292, align 4
  store i32 %v5_13eb8, i32* @r2, align 4
  br label %dec_label_pc_13ec4

dec_label_pc_13ec0:                               ; preds = %dec_label_pc_13e88, %dec_label_pc_13e70
  store i32 -1, i32* @r2, align 4
  br label %dec_label_pc_13ec4

dec_label_pc_13ec4:                               ; preds = %bb23, %dec_label_pc_13e44, %dec_label_pc_13ec0
  %v0_13ec4 = phi i32 [ %v5_13eb8, %bb23 ], [ %v0_13ec4.pre, %dec_label_pc_13e44 ], [ -1, %dec_label_pc_13ec0 ]
  store i32 %v0_13ec4, i32* %r0.global-to-local, align 4
  %v2_13ecc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13ecc, i32* @r4, align 4
  store i32 %v6_13e1c, i32* @r5, align 4
  ret i32 %v0_13ec4

; uselistorder directives
  uselistorder i32 %v0_13ec4, { 1, 0 }
  uselistorder i32 %v1_13e60, { 0, 2, 1 }
  uselistorder i32 %v0_13e2c.pre, { 1, 0, 2 }
  uselistorder i32 %v10_13e1c, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %stack_var_-152, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 7, 6, 9, 8, 10, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_13ec4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13e58, { 1, 0 }
  uselistorder label %dec_label_pc_13e44, { 1, 2, 0 }
}

define i32 @function_13ed4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13ed4:
  %v1_13ed4 = add i32 %arg2, -1
  %v3_13ed8 = udiv i32 %v1_13ed4, 32
  %v4_13edc = mul nuw nsw i32 %v3_13ed8, 4
  %v5_13edc = add i32 %v4_13edc, %arg1
  %v6_13edc = inttoptr i32 %v5_13edc to i32*
  %v7_13edc = load i32, i32* %v6_13edc, align 4
  %v1_13ee0 = urem i32 %v1_13ed4, 32
  %v7_13ee8 = shl i32 1, %v1_13ee0
  %v8_13ee8 = and i32 %v7_13edc, %v7_13ee8
  %v10_13ee8 = icmp ne i32 %v8_13ee8, 0
  %. = zext i1 %v10_13ee8 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_13ed4, { 1, 0 }
}

define i32 @function_13ef8() local_unnamed_addr {
dec_label_pc_13ef8:
  %v0_13ef8 = load i32, i32* @r1, align 4
  %v1_13ef8 = add i32 %v0_13ef8, -1
  %v3_13efc = udiv i32 %v1_13ef8, 32
  store i32 %v3_13efc, i32* @ip, align 4
  %v0_13f00 = load i32, i32* @r0, align 4
  %v4_13f00 = mul nuw nsw i32 %v3_13efc, 4
  %v5_13f00 = add i32 %v0_13f00, %v4_13f00
  %v6_13f00 = inttoptr i32 %v5_13f00 to i32*
  %v7_13f00 = load i32, i32* %v6_13f00, align 4
  %v1_13f04 = urem i32 %v1_13ef8, 32
  %v7_13f0c = shl i32 1, %v1_13f04
  %v8_13f0c = or i32 %v7_13f00, %v7_13f0c
  store i32 %v8_13f0c, i32* %v6_13f00, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_13efc, { 1, 0 }
  uselistorder i32 %v1_13ef8, { 1, 0 }
}

define i32 @function_13f1c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13f1c:
  %v1_13f1c = add i32 %arg2, -1
  %v3_13f20 = udiv i32 %v1_13f1c, 32
  %v4_13f24 = mul nuw nsw i32 %v3_13f20, 4
  %v5_13f24 = add i32 %v4_13f24, %arg1
  %v6_13f24 = inttoptr i32 %v5_13f24 to i32*
  %v7_13f24 = load i32, i32* %v6_13f24, align 4
  %v1_13f28 = urem i32 %v1_13f1c, 32
  %tmp = shl i32 -1, %v1_13f28
  %v8_13f30 = add i32 %tmp, -1
  %v9_13f30 = and i32 %v7_13f24, %v8_13f30
  store i32 %v9_13f30, i32* %v6_13f24, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_13f1c, { 1, 0 }
}

define i32 @function_13f40(i32 %arg1) local_unnamed_addr {
dec_label_pc_13f40:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_13f40 = load i32, i32* @r4, align 4
  %v6_13f40 = load i32, i32* @r5, align 4
  %v9_13f40 = load i32, i32* @r6, align 4
  %v0_13f44 = load i32, i32* %r0.global-to-local, align 4
  %v2_13f44 = icmp eq i32 %v0_13f44, 0
  %v2_13f48 = ptrtoint i32* %stack_var_-20 to i32
  br i1 %v2_13f44, label %bb, label %dec_label_pc_13f54

bb:                                               ; preds = %dec_label_pc_13f40
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13f5c

dec_label_pc_13f54:                               ; preds = %dec_label_pc_13f40
  %tmp = icmp ugt i32 %v0_13f44, -8
  br i1 %tmp, label %dec_label_pc_14060, label %dec_label_pc_13f5c

dec_label_pc_13f5c:                               ; preds = %bb, %dec_label_pc_13f54
  %v0_13f5c = phi i32 [ %v0_13f44, %dec_label_pc_13f54 ], [ 1, %bb ]
  %v1_13f5c = add i32 %v0_13f5c, 4
  store i32 %v1_13f5c, i32* %stack_var_-20, align 4
  store i32 %v2_13f48, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1ea98.609 to i32), i32* %r0.global-to-local, align 4
  %v1_13f74 = call i32 @function_14ad4()
  store i32 ptrtoint (i32** @global_var_1e8c0.613 to i32), i32* %r0.global-to-local, align 4
  %v3_13f80 = call i32 @function_142f4(i32* bitcast (i32** @global_var_1e8c0.613 to i32*), i32 %v2_13f48)
  store i32 %v3_13f80, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ea98.609 to i32), i32* %r0.global-to-local, align 4
  store i32 81816, i32* @lr, align 4
  %v1_13f94 = call i32 @function_14ad4()
  store i32 %v1_13f94, i32* %r0.global-to-local, align 4
  %v2_13f98 = icmp eq i32 %v3_13f80, 0
  br i1 %v2_13f98, label %dec_label_pc_13fa0, label %dec_label_pc_14050

dec_label_pc_13fa0:                               ; preds = %dec_label_pc_13f5c
  %v2_13fa4 = load i32, i32* @global_var_1eac0.616, align 4
  store i32 %v2_13fa4, i32* @r4, align 4
  %v2_13fa8 = load i32, i32* %stack_var_-20, align 4
  %v3_13fac = icmp ult i32 %v2_13fa8, %v2_13fa4
  br i1 %v3_13fac, label %.thread3, label %bb14

bb14:                                             ; preds = %dec_label_pc_13fa0
  %v3_13fb0 = add i32 %v2_13fa4, -1
  %v2_13fb4 = add i32 %v3_13fb0, %v2_13fa8
  %v2_13fb8 = sub i32 0, %v2_13fa4
  %v3_13fbc = and i32 %v2_13fb4, %v2_13fb8
  store i32 %v3_13fbc, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_13fa0, %bb14
  store i32 ptrtoint (i32* @global_var_1ed28.618 to i32), i32* %r0.global-to-local, align 4
  %v1_13fc8 = call i32 @function_14ad4()
  %v0_13fcc = load i32, i32* @r4, align 4
  store i32 %v0_13fcc, i32* %r0.global-to-local, align 4
  %v1_13fd0 = call i32 @function_15288(i32 %v0_13fcc)
  store i32 %v1_13fd0, i32* %r0.global-to-local, align 4
  %v7_13fd4 = icmp eq i32 %v1_13fd0, -1
  br i1 %v7_13fd4, label %bb15, label %dec_label_pc_13fe0

bb15:                                             ; preds = %.thread3
  store i32 %v1_13fd0, i32* @r5, align 4
  br label %dec_label_pc_13ff4

dec_label_pc_13fe0:                               ; preds = %.thread3
  %v1_13fe0 = add i32 %v1_13fd0, 3
  %v1_13fe4 = and i32 %v1_13fe0, -4
  store i32 %v1_13fe4, i32* @r5, align 4
  %v9_13fe8 = icmp eq i32 %v1_13fe4, %v1_13fd0
  br i1 %v9_13fe8, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_13fe0
  %v3_13fec = sub i32 %v1_13fe4, %v1_13fd0
  store i32 %v3_13fec, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_13fe0, %bb16
  %v1_13ff0 = xor i1 %v9_13fe8, true
  call void @__pseudo_cond_branch(i1 %v1_13ff0, i32 ptrtoint (i32* @global_var_15288.619 to i32))
  br label %dec_label_pc_13ff4

dec_label_pc_13ff4:                               ; preds = %bb15, %bb17
  store i32 ptrtoint (i32* @global_var_1ed28.618 to i32), i32* %r0.global-to-local, align 4
  store i32 81924, i32* @lr, align 4
  %v1_14000 = call i32 @function_14ad4()
  store i32 %v1_14000, i32* %r0.global-to-local, align 4
  %v0_14004 = load i32, i32* @r5, align 4
  %v7_14004 = icmp eq i32 %v0_14004, -1
  br i1 %v7_14004, label %dec_label_pc_14060, label %dec_label_pc_1400c

dec_label_pc_1400c:                               ; preds = %dec_label_pc_13ff4
  store i32 ptrtoint (i32* @global_var_1ea98.609 to i32), i32* %r0.global-to-local, align 4
  %v1_14018 = call i32 @function_14ad4()
  %v0_1401c = load i32, i32* @r4, align 4
  %v0_14020 = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1e8c0.613 to i32), i32* %r0.global-to-local, align 4
  %v4_14028 = call i32 @function_14448(i32* bitcast (i32** @global_var_1e8c0.613 to i32*), i32 %v0_14020, i32 %v0_1401c)
  store i32 ptrtoint (i32** @global_var_1e8c0.613 to i32), i32* %r0.global-to-local, align 4
  %v3_14034 = call i32 @function_142f4(i32* bitcast (i32** @global_var_1e8c0.613 to i32*), i32 %v2_13f48)
  store i32 %v3_14034, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ea98.609 to i32), i32* %r0.global-to-local, align 4
  store i32 81992, i32* @lr, align 4
  %v1_14044 = call i32 @function_14ad4()
  store i32 %v1_14044, i32* %r0.global-to-local, align 4
  %v2_14048 = icmp eq i32 %v3_14034, 0
  br i1 %v2_14048, label %dec_label_pc_14060, label %dec_label_pc_14050

dec_label_pc_14050:                               ; preds = %dec_label_pc_13f5c, %dec_label_pc_1400c
  %v1_14054 = phi i32 [ %v3_13f80, %dec_label_pc_13f5c ], [ %v3_14034, %dec_label_pc_1400c ]
  %v2_14050 = load i32, i32* %stack_var_-20, align 4
  %v2_14054 = inttoptr i32 %v1_14054 to i32*
  store i32 %v2_14050, i32* %v2_14054, align 4
  %v3_14054 = load i32, i32* %r4.global-to-local, align 4
  %v4_14054 = add i32 %v3_14054, 4
  store i32 %v4_14054, i32* %r4.global-to-local, align 4
  %v2_14058 = icmp eq i32 %v4_14054, 0
  br i1 %v2_14058, label %dec_label_pc_14060, label %dec_label_pc_14070

dec_label_pc_14060:                               ; preds = %dec_label_pc_14050, %dec_label_pc_1400c, %dec_label_pc_13ff4, %dec_label_pc_13f54
  %v0_14060 = call i32 @function_13a64()
  store i32 %v0_14060, i32* %r0.global-to-local, align 4
  %v2_14068 = inttoptr i32 %v0_14060 to i32*
  store i32 12, i32* %v2_14068, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14070

dec_label_pc_14070:                               ; preds = %dec_label_pc_14050, %dec_label_pc_14060
  %v0_14070 = phi i32 [ %v4_14054, %dec_label_pc_14050 ], [ 0, %dec_label_pc_14060 ]
  store i32 %v0_14070, i32* %r0.global-to-local, align 4
  store i32 %v3_13f40, i32* @r4, align 4
  store i32 %v6_13f40, i32* @r5, align 4
  store i32 %v9_13f40, i32* @r6, align 4
  ret i32 %v0_14070

; uselistorder directives
  uselistorder i32 %v0_14070, { 1, 0 }
  uselistorder i32 %v3_14034, { 1, 0, 2 }
  uselistorder i32 %v1_13fe4, { 1, 0, 2 }
  uselistorder i32 %v1_13fd0, { 2, 0, 4, 3, 1, 5 }
  uselistorder i32 %v3_13f80, { 1, 0, 2 }
  uselistorder i32 %v0_13f44, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 7, 3, 5, 6, 8, 11, 10, 9, 19, 13, 12, 16, 14, 15, 17, 18, 0, 1 }
  uselistorder label %dec_label_pc_14070, { 1, 0 }
  uselistorder label %dec_label_pc_14050, { 1, 0 }
  uselistorder label %dec_label_pc_13ff4, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_13f5c, { 1, 0 }
}

define i32 @function_14094(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14094:
  %stack_var_-12 = alloca i32, align 4
  %v3_14094 = load i32, i32* @r4, align 4
  store i32 %v3_14094, i32* %stack_var_-12, align 4
  %v6_14094 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  %v2_1409c = mul i32 %arg2, %arg1
  store i32 %v2_1409c, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_140a0 = icmp eq i32 %arg1, 0
  store i32 %v2_1409c, i32* @r0, align 4
  br i1 %v2_140a0, label %dec_label_pc_140cc, label %dec_label_pc_140ac

dec_label_pc_140ac:                               ; preds = %dec_label_pc_14094
  %v0_140ac = call i32 @function_130dc()
  %v0_140b0 = load i32, i32* @r5, align 4
  %v9_140b0 = icmp eq i32 %v0_140b0, %v0_140ac
  store i32 0, i32* @r5, align 4
  br i1 %v9_140b0, label %dec_label_pc_140ac.dec_label_pc_140cc_crit_edge, label %dec_label_pc_140bc

dec_label_pc_140ac.dec_label_pc_140cc_crit_edge:  ; preds = %dec_label_pc_140ac
  %v0_140cc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_140cc

dec_label_pc_140bc:                               ; preds = %dec_label_pc_140ac
  %v0_140bc = call i32 @function_13a64()
  %v2_140c4 = inttoptr i32 %v0_140bc to i32*
  store i32 12, i32* %v2_140c4, align 4
  br label %dec_label_pc_140e4

dec_label_pc_140cc:                               ; preds = %dec_label_pc_140ac.dec_label_pc_140cc_crit_edge, %dec_label_pc_14094
  %v0_140cc = phi i32 [ %v0_140cc.pre, %dec_label_pc_140ac.dec_label_pc_140cc_crit_edge ], [ %v2_1409c, %dec_label_pc_14094 ]
  %v1_140d0 = call i32 @function_13f40(i32 %v0_140cc)
  store i32 %v1_140d0, i32* @r5, align 4
  store i32 82148, i32* @lr, align 4
  %v1_140e0 = icmp ne i32 %v1_140d0, 0
  call void @__pseudo_cond_branch(i1 %v1_140e0, i32 ptrtoint (i32* @global_var_13ad0.620 to i32))
  br label %dec_label_pc_140e4

dec_label_pc_140e4:                               ; preds = %dec_label_pc_140bc, %dec_label_pc_140cc
  %v0_140e4 = load i32, i32* @r5, align 4
  %v2_140e8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_140e8, i32* @r4, align 4
  store i32 %v6_14094, i32* @r5, align 4
  ret i32 %v0_140e4

; uselistorder directives
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_140e4, { 1, 0 }
}

define i32 @function_140ec() local_unnamed_addr {
dec_label_pc_140ec:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_140ec = load i32, i32* @r0, align 4
  %v2_140ec = icmp eq i32 %v0_140ec, 0
  %v3_140f0 = load i32, i32* @r4, align 4
  store i32 %v3_140f0, i32* %stack_var_-24, align 4
  %v6_140f0 = load i32, i32* @r5, align 4
  %v9_140f0 = load i32, i32* @r6, align 4
  %v15_140f0 = load i32, i32* @r8, align 4
  br i1 %v2_140ec, label %bb, label %bb11

bb:                                               ; preds = %dec_label_pc_140ec
  ret i32 0

bb11:                                             ; preds = %dec_label_pc_140ec
  %v1_140f8 = add i32 %v0_140ec, -4
  %v2_140f8 = inttoptr i32 %v1_140f8 to i32*
  %v3_140f8 = load i32, i32* %v2_140f8, align 4
  store i32 %v3_140f8, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1e8c0.613 to i32), i32* %r8.global-to-local, align 4
  store i32 %v1_140f8, i32* @r4, align 4
  %v1_14110 = call i32 @function_14ad4()
  %v0_14114 = load i32, i32* @r4, align 4
  %v0_14118 = load i32, i32* @r5, align 4
  %v4_14120 = call i32 @function_14448(i32* bitcast (i32** @global_var_1e8c0.613 to i32*), i32 %v0_14114, i32 %v0_14118)
  %v1_14128 = inttoptr i32 %v4_14120 to i32*
  %v2_14128 = load i32, i32* %v1_14128, align 4
  store i32 %v2_14128, i32* %r6.global-to-local, align 4
  %v2_1412c = load i32, i32* @global_var_1eac0.616, align 4
  %v4_14130 = mul i32 %v2_1412c, 8
  %v6_14130 = icmp ult i32 %v2_14128, %v4_14130
  store i32 %v4_14120, i32* @r4, align 4
  br i1 %v6_14130, label %dec_label_pc_14170, label %dec_label_pc_1413c

dec_label_pc_1413c:                               ; preds = %bb11
  %v1_14144 = call i32 @function_14ad4()
  %v1_1414c = call i32 @function_15288(i32 0)
  %v0_14150 = load i32, i32* @r4, align 4
  %v1_14150 = add i32 %v0_14150, 12
  store i32 %v1_14150, i32* @r5, align 4
  %v9_14154 = icmp eq i32 %v1_14150, %v1_1414c
  br i1 %v9_14154, label %dec_label_pc_14178, label %dec_label_pc_1415c

dec_label_pc_1415c:                               ; preds = %dec_label_pc_1413c
  %v1_14168 = call i32 @function_14ad4()
  br label %dec_label_pc_14170

dec_label_pc_14170:                               ; preds = %bb11, %dec_label_pc_1415c, %bb14
  %v2_14170 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_14170, i32* @r4, align 4
  store i32 %v6_140f0, i32* @r5, align 4
  store i32 %v9_140f0, i32* %r6.global-to-local, align 4
  store i32 %v15_140f0, i32* %r8.global-to-local, align 4
  %v0_14174 = call i32 @function_14ad4()
  %v0_14178.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14178

dec_label_pc_14178:                               ; preds = %dec_label_pc_1413c, %dec_label_pc_14170
  %v1_14180 = phi i32 [ %v0_14150, %dec_label_pc_1413c ], [ %v0_14178.pre, %dec_label_pc_14170 ]
  %v1_14178 = add i32 %v1_14180, 4
  %v2_14178 = inttoptr i32 %v1_14178 to i32*
  %v3_14178 = load i32, i32* %v2_14178, align 4
  %v2_1417c = icmp eq i32 %v3_14178, 0
  br i1 %v2_1417c, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_14178
  %v2_14180 = add i32 %v1_14180, 8
  %v3_14180 = inttoptr i32 %v2_14180 to i32*
  %v4_14180 = load i32, i32* %v3_14180, align 4
  %v3_14184 = add i32 %v3_14178, 8
  %v4_14184 = inttoptr i32 %v3_14184 to i32*
  store i32 %v4_14180, i32* %v4_14184, align 4
  %v0_14188.pre = load i32, i32* @r4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14178, %bb12
  %v0_14188 = phi i32 [ %v1_14180, %dec_label_pc_14178 ], [ %v0_14188.pre, %bb12 ]
  %v1_14188 = add i32 %v0_14188, 8
  %v2_14188 = inttoptr i32 %v1_14188 to i32*
  %v3_14188 = load i32, i32* %v2_14188, align 4
  %v1_1418c = add i32 %v0_14188, 4
  %v2_1418c = inttoptr i32 %v1_1418c to i32*
  %v3_1418c = load i32, i32* %v2_1418c, align 4
  %v2_14190 = icmp eq i32 %v3_14188, 0
  br i1 %v2_14190, label %.thread1, label %bb13

bb13:                                             ; preds = %.thread
  %v3_14194 = add i32 %v3_14188, 4
  %v4_14194 = inttoptr i32 %v3_14194 to i32*
  store i32 %v3_1418c, i32* %v4_14194, align 4
  br label %bb14

.thread1:                                         ; preds = %.thread
  %v2_14198 = load i32, i32* %r8.global-to-local, align 4
  %v3_14198 = inttoptr i32 %v2_14198 to i32*
  store i32 %v3_1418c, i32* %v3_14198, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %.thread1
  %v1_141a8 = call i32 @function_14ad4()
  %v0_141ac = load i32, i32* %r6.global-to-local, align 4
  %v1_141ac = load i32, i32* @r4, align 4
  %v0_141b4 = load i32, i32* @r5, align 4
  %v2_141ac = sub i32 12, %v0_141ac
  %v1_141b0 = add i32 %v2_141ac, %v1_141ac
  %v2_141b4 = sub i32 %v1_141b0, %v0_141b4
  %v1_141b8 = call i32 @function_15288(i32 %v2_141b4)
  br label %dec_label_pc_14170

; uselistorder directives
  uselistorder i32 %v0_14188, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_15288, { 2, 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_14178, { 1, 0 }
  uselistorder label %dec_label_pc_14170, { 2, 1, 0 }
}

define i32 @function_141dc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_141dc:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_141dc = load i32, i32* @r4, align 4
  store i32 %v3_141dc, i32* %stack_var_-24, align 4
  %v6_141dc = load i32, i32* @r5, align 4
  %v9_141dc = load i32, i32* @r6, align 4
  %v12_141dc = load i32, i32* @r7, align 4
  %v15_141dc = load i32, i32* @r8, align 4
  %v18_141dc = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_141e0 = icmp eq i32 %arg2, 0
  %v0_141e4 = load i32, i32* @r0, align 4
  store i32 %v0_141e4, i32* @r7, align 4
  br i1 %v2_141e0, label %dec_label_pc_141ec, label %dec_label_pc_141f4

dec_label_pc_141ec:                               ; preds = %dec_label_pc_141dc
  %v0_141ec = call i32 @function_140ec()
  %v0_141fc.pre = load i32, i32* @r4, align 4
  %v2_14200.pre = load i32, i32* %stack_var_-24, align 4
  br label %dec_label_pc_141fc

dec_label_pc_141f4:                               ; preds = %dec_label_pc_141dc
  %v2_141f4 = icmp eq i32 %v0_141e4, 0
  br i1 %v2_141f4, label %dec_label_pc_141fc, label %dec_label_pc_14208

dec_label_pc_141fc:                               ; preds = %dec_label_pc_141f4, %dec_label_pc_141ec
  %v2_14200 = phi i32 [ %v3_141dc, %dec_label_pc_141f4 ], [ %v2_14200.pre, %dec_label_pc_141ec ]
  %v0_141fc = phi i32 [ %arg2, %dec_label_pc_141f4 ], [ %v0_141fc.pre, %dec_label_pc_141ec ]
  store i32 %v2_14200, i32* @r4, align 4
  store i32 %v6_141dc, i32* @r5, align 4
  store i32 %v9_141dc, i32* @r6, align 4
  store i32 %v12_141dc, i32* @r7, align 4
  store i32 %v18_141dc, i32* @lr, align 4
  %v1_14204 = call i32 @function_13f40(i32 %v0_141fc)
  %v0_14208.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14208

dec_label_pc_14208:                               ; preds = %dec_label_pc_141f4, %dec_label_pc_141fc
  %v0_14220 = phi i32 [ %v0_141e4, %dec_label_pc_141f4 ], [ %v1_14204, %dec_label_pc_141fc ]
  %v0_14208 = phi i32 [ %arg2, %dec_label_pc_141f4 ], [ %v0_14208.pre, %dec_label_pc_141fc ]
  %v1_14208 = add i32 %v0_14208, 7
  %v1_1420c = and i32 %v1_14208, -4
  store i32 %v1_1420c, i32* @r5, align 4
  %v2_14210 = icmp ugt i32 %v1_1420c, 10
  %v1_14214 = add i32 %v0_14220, -4
  %v2_14214 = inttoptr i32 %v1_14214 to i32*
  %v3_14214 = load i32, i32* %v2_14214, align 4
  store i32 %v3_14214, i32* @r6, align 4
  br i1 %v2_14210, label %bb14, label %bb

bb:                                               ; preds = %dec_label_pc_14208
  store i32 12, i32* @r5, align 4
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_14208, %bb
  %v0_1429c = phi i32 [ %v1_1420c, %dec_label_pc_14208 ], [ 12, %bb ]
  store i32 %v1_14214, i32* @r8, align 4
  %tmp = icmp ugt i32 %v0_1429c, %v3_14214
  br i1 %tmp, label %dec_label_pc_14228, label %dec_label_pc_1429c

dec_label_pc_14228:                               ; preds = %bb14
  %v2_1421c = sub i32 %v0_1429c, %v3_14214
  %v1_14238 = call i32 @function_14ad4()
  %v0_14240 = load i32, i32* @r8, align 4
  %v1_14240 = load i32, i32* @r6, align 4
  %v2_14240 = add i32 %v1_14240, %v0_14240
  %v4_14248 = call i32 @function_14388(i32* bitcast (i32** @global_var_1e8c0.613 to i32*), i32 %v2_14240, i32 %v2_1421c)
  store i32 %v4_14248, i32* @r4, align 4
  store i32 82528, i32* @lr, align 4
  %v1_1425c = call i32 @function_14ad4()
  %v0_14260 = load i32, i32* @r4, align 4
  %v2_14260 = icmp eq i32 %v0_14260, 0
  br i1 %v2_14260, label %dec_label_pc_14270, label %.thread

.thread:                                          ; preds = %dec_label_pc_14228
  %v1_14264 = load i32, i32* @r6, align 4
  %v3_14264 = add i32 %v1_14264, %v0_14260
  %v2_14268 = load i32, i32* @r7, align 4
  %v3_14268 = add i32 %v2_14268, -4
  %v4_14268 = inttoptr i32 %v3_14268 to i32*
  store i32 %v3_14264, i32* %v4_14268, align 4
  br label %dec_label_pc_142dc

dec_label_pc_14270:                               ; preds = %dec_label_pc_14228
  %v0_14270 = load i32, i32* @r5, align 4
  %v1_14270 = add i32 %v0_14270, -4
  %v1_14274 = call i32 @function_13f40(i32 %v1_14270)
  store i32 %v1_14274, i32* @r0, align 4
  store i32 %v1_14274, i32* @r4, align 4
  %v2_14278 = icmp eq i32 %v1_14274, 0
  br i1 %v2_14278, label %dec_label_pc_14294, label %dec_label_pc_14280

dec_label_pc_14280:                               ; preds = %dec_label_pc_14270
  %v0_14280 = load i32, i32* @r6, align 4
  %v1_14280 = add i32 %v0_14280, -4
  store i32 %v1_14280, i32* @r2, align 4
  %v0_14284 = load i32, i32* @r7, align 4
  store i32 %v0_14284, i32* @r1, align 4
  %v3_14288 = call i32 @function_13ab0(i32 %v1_14274, i32 %v0_14284, i32 %v1_14280)
  %v0_1428c = load i32, i32* @r7, align 4
  store i32 %v0_1428c, i32* @r0, align 4
  %v0_14290 = call i32 @function_140ec()
  %v0_14294.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14294

dec_label_pc_14294:                               ; preds = %dec_label_pc_14270, %dec_label_pc_14280
  %v0_14294 = phi i32 [ 0, %dec_label_pc_14270 ], [ %v0_14294.pre, %dec_label_pc_14280 ]
  store i32 %v0_14294, i32* @r7, align 4
  br label %dec_label_pc_142dc

dec_label_pc_1429c:                               ; preds = %bb14
  %v1_1429c = add i32 %v0_1429c, 28
  %tmp15 = icmp ugt i32 %v1_1429c, %v3_14214
  br i1 %tmp15, label %dec_label_pc_142dc, label %dec_label_pc_142a8

dec_label_pc_142a8:                               ; preds = %dec_label_pc_1429c
  %v1_142b4 = call i32 @function_14ad4()
  %v0_142b8 = load i32, i32* @r8, align 4
  %v1_142b8 = load i32, i32* @r5, align 4
  %v2_142b8 = add i32 %v1_142b8, %v0_142b8
  %v1_142bc = load i32, i32* @r6, align 4
  %v2_142bc = sub i32 %v1_142bc, %v1_142b8
  %v4_142c4 = call i32 @function_14448(i32* bitcast (i32** @global_var_1e8c0.613 to i32*), i32 %v2_142b8, i32 %v2_142bc)
  store i32 82648, i32* @lr, align 4
  %v1_142d4 = call i32 @function_14ad4()
  %v0_142d8 = load i32, i32* @r5, align 4
  %v1_142d8 = load i32, i32* @r7, align 4
  %v2_142d8 = add i32 %v1_142d8, -4
  %v3_142d8 = inttoptr i32 %v2_142d8 to i32*
  store i32 %v0_142d8, i32* %v3_142d8, align 4
  br label %dec_label_pc_142dc

dec_label_pc_142dc:                               ; preds = %.thread, %dec_label_pc_1429c, %dec_label_pc_14294, %dec_label_pc_142a8
  %v0_142dc = load i32, i32* @r7, align 4
  %v2_142e0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_142e0, i32* @r4, align 4
  store i32 %v6_141dc, i32* @r5, align 4
  store i32 %v9_141dc, i32* @r6, align 4
  store i32 %v12_141dc, i32* @r7, align 4
  store i32 %v15_141dc, i32* @r8, align 4
  ret i32 %v0_142dc

; uselistorder directives
  uselistorder i32 %v1_142b8, { 1, 0 }
  uselistorder i32 %v0_1429c, { 1, 2, 0 }
  uselistorder i32 %v3_14214, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-24, { 1, 0, 2 }
  uselistorder i32** @global_var_1e8c0.613, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_1e8c0.613 to i32*), { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i32)* @function_13f40, { 3, 57, 0, 52, 56, 55, 54, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 2, 1, 53, 51 }
  uselistorder i32 ()* @function_140ec, { 1, 0, 4, 3, 2, 5, 7, 6 }
  uselistorder i32* @r8, { 86, 87, 88, 89, 90, 99, 7, 8, 10, 9, 11, 12, 13, 91, 92, 97, 98, 93, 94, 95, 96, 15, 16, 17, 18, 75, 76, 77, 14, 19, 20, 21, 0, 1, 2, 3, 4, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 6, 46, 47, 48, 49, 50, 51, 52, 53, 5, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 78, 79, 80, 81, 82, 83, 84, 85, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 166, 169, 170, 171, 172, 173, 174, 175 }
  uselistorder i32* @r7, { 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 229, 230, 6, 14, 7, 1, 5, 21, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 231, 239, 240, 232, 233, 234, 235, 236, 237, 238, 65, 66, 2, 67, 68, 69, 70, 71, 72, 73, 74, 190, 191, 192, 62, 0, 63, 64, 75, 76, 77, 78, 3, 79, 80, 81, 82, 83, 84, 85, 86, 87, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 4, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284 }
  uselistorder label %dec_label_pc_142dc, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_14294, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %dec_label_pc_14208, { 1, 0 }
}

define i32 @function_142f4(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_142f4:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v1_142f4 = inttoptr i32 %arg2 to i32*
  %v2_142f4 = load i32, i32* %v1_142f4, align 4
  %v3_142f8 = load i32, i32* @r4, align 4
  store i32 %v3_142f8, i32* %stack_var_-8, align 4
  %v1_142fc = add i32 %v2_142f4, 3
  %v1_14300 = and i32 %v1_142fc, -4
  store i32 %v1_14300, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_14308 = icmp ugt i32 %v1_14300, 10
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_14310 = load i32, i32* %arg1, align 4
  store i32 %v2_14310, i32* %r0.global-to-local, align 4
  br i1 %v2_14308, label %dec_label_pc_1437c.preheader, label %bb

bb:                                               ; preds = %dec_label_pc_142f4
  store i32 12, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1437c.preheader

dec_label_pc_1437c.preheader:                     ; preds = %dec_label_pc_142f4, %bb
  %v1_14330 = phi i32 [ %v1_14300, %dec_label_pc_142f4 ], [ 12, %bb ]
  %v2_1437c9 = icmp eq i32 %v2_14310, 0
  br i1 %v2_1437c9, label %dec_label_pc_14384, label %dec_label_pc_1431c

dec_label_pc_1431c:                               ; preds = %dec_label_pc_1437c.preheader, %dec_label_pc_14378
  %v2_14334 = phi i32 [ %v3_14378, %dec_label_pc_14378 ], [ %v2_14310, %dec_label_pc_1437c.preheader ]
  %v1_1431c = inttoptr i32 %v2_14334 to i32*
  %v2_1431c = load i32, i32* %v1_1431c, align 4
  store i32 %v2_1431c, i32* %ip.global-to-local, align 4
  %v3_14320 = icmp ult i32 %v2_1431c, %v1_14330
  br i1 %v3_14320, label %dec_label_pc_14378, label %dec_label_pc_14328

dec_label_pc_14328:                               ; preds = %dec_label_pc_1431c
  %v1_14328 = add i32 %v1_14330, 44
  %v3_1432c = icmp ult i32 %v2_1431c, %v1_14328
  br i1 %v3_1432c, label %dec_label_pc_1433c, label %.thread._crit_edge

.thread._crit_edge:                               ; preds = %dec_label_pc_14328
  %v2_14320.le = sub i32 %v2_1431c, %v1_14330
  store i32 %v2_14320.le, i32* %v1_1431c, align 4
  %v0_14368.pre = load i32, i32* %ip.global-to-local, align 4
  %v0_14370.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb29

dec_label_pc_1433c:                               ; preds = %dec_label_pc_14328
  %v1_1433c = add i32 %v2_14334, 4
  %v2_1433c = inttoptr i32 %v1_1433c to i32*
  %v3_1433c = load i32, i32* %v2_1433c, align 4
  store i32 %v3_1433c, i32* %r2.global-to-local, align 4
  %v2_14340 = icmp eq i32 %v3_1433c, 0
  br i1 %v2_14340, label %.thread2, label %bb27

bb27:                                             ; preds = %dec_label_pc_1433c
  %v2_14344 = add i32 %v2_14334, 8
  %v3_14344 = inttoptr i32 %v2_14344 to i32*
  %v4_14344 = load i32, i32* %v3_14344, align 4
  %v3_14348 = add i32 %v3_1433c, 8
  %v4_14348 = inttoptr i32 %v3_14348 to i32*
  store i32 %v4_14344, i32* %v4_14348, align 4
  %v0_1434c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_1433c, %bb27
  %v0_1434c = phi i32 [ %v2_14334, %dec_label_pc_1433c ], [ %v0_1434c.pre, %bb27 ]
  %v1_1434c = add i32 %v0_1434c, 8
  %v2_1434c = inttoptr i32 %v1_1434c to i32*
  %v3_1434c = load i32, i32* %v2_1434c, align 4
  %v1_14350 = add i32 %v0_1434c, 4
  %v2_14350 = inttoptr i32 %v1_14350 to i32*
  %v3_14350 = load i32, i32* %v2_14350, align 4
  %v2_14354 = icmp eq i32 %v3_1434c, 0
  br i1 %v2_14354, label %.thread5, label %bb28

bb28:                                             ; preds = %.thread2
  %v3_14358 = add i32 %v3_1434c, 4
  %v4_14358 = inttoptr i32 %v3_14358 to i32*
  store i32 %v3_14350, i32* %v4_14358, align 4
  %v1_14360 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_14360, i32* %r2.global-to-local, align 4
  br label %bb29

.thread5:                                         ; preds = %.thread2
  %v2_1435c = load i32, i32* %r1.global-to-local, align 4
  %v3_1435c = inttoptr i32 %v2_1435c to i32*
  store i32 %v3_14350, i32* %v3_1435c, align 4
  %v1_14364.pre = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_14364.pre, i32* %r2.global-to-local, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %.thread._crit_edge, %.thread5
  %v0_14370 = phi i32 [ %v0_14370.pre, %.thread._crit_edge ], [ %v1_14360, %bb28 ], [ %v1_14364.pre, %.thread5 ]
  %v0_14368 = phi i32 [ %v0_14368.pre, %.thread._crit_edge ], [ %v1_14360, %bb28 ], [ %v1_14364.pre, %.thread5 ]
  %v1_14368 = load i32, i32* %r0.global-to-local, align 4
  %v2_14368 = sub i32 %v1_14368, %v0_14368
  %v1_1436c = add i32 %v2_14368, 12
  store i32 %v1_1436c, i32* %r0.global-to-local, align 4
  %v1_14370 = load i32, i32* %r4.global-to-local, align 4
  %v2_14370 = inttoptr i32 %v1_14370 to i32*
  store i32 %v0_14370, i32* %v2_14370, align 4
  %v2_14374 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14374, i32* %r4.global-to-local, align 4
  ret i32 %v1_1436c

dec_label_pc_14378:                               ; preds = %dec_label_pc_1431c
  %v1_14378 = add i32 %v2_14334, 4
  %v2_14378 = inttoptr i32 %v1_14378 to i32*
  %v3_14378 = load i32, i32* %v2_14378, align 4
  store i32 %v3_14378, i32* %r0.global-to-local, align 4
  %v2_1437c = icmp eq i32 %v3_14378, 0
  br i1 %v2_1437c, label %dec_label_pc_1437c.dec_label_pc_14384_crit_edge, label %dec_label_pc_1431c

dec_label_pc_1437c.dec_label_pc_14384_crit_edge:  ; preds = %dec_label_pc_14378
  br label %dec_label_pc_14384

dec_label_pc_14384:                               ; preds = %dec_label_pc_1437c.dec_label_pc_14384_crit_edge, %dec_label_pc_1437c.preheader
  store i32 %v3_142f8, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_14378, { 1, 2, 0 }
  uselistorder i32 %v0_1434c, { 1, 0 }
  uselistorder i32 %v2_1431c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_14334, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_14330, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 2, 1, 3 }
  uselistorder label %bb29, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_1431c, { 1, 0 }
  uselistorder label %dec_label_pc_1437c.preheader, { 1, 0 }
}

define i32 @function_14388(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14388:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_1438c = load i32, i32* %arg1, align 4
  store i32 %v2_1438c, i32* %ip.global-to-local, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  %v2_144046 = icmp eq i32 %v2_1438c, 0
  br i1 %v2_144046, label %dec_label_pc_1440c, label %dec_label_pc_14398

dec_label_pc_14398:                               ; preds = %dec_label_pc_14388, %dec_label_pc_14400
  %v0_143d8 = phi i32 [ %v3_14400, %dec_label_pc_14400 ], [ %v2_1438c, %dec_label_pc_14388 ]
  %v1_14398 = inttoptr i32 %v0_143d8 to i32*
  %v2_14398 = load i32, i32* %v1_14398, align 4
  store i32 %v2_14398, i32* %r0.global-to-local, align 4
  %v2_1439c = sub i32 %v0_143d8, %v2_14398
  %v1_143a0 = add i32 %v2_1439c, 12
  %v3_143a4 = icmp uge i32 %v1_143a0, %arg2
  %v9_143a4 = icmp eq i32 %v1_143a0, %arg2
  %v2_143a8 = xor i1 %v9_143a4, true
  %v3_143a8 = and i1 %v3_143a4, %v2_143a8
  br i1 %v3_143a8, label %dec_label_pc_14400, label %dec_label_pc_143ac

dec_label_pc_143ac:                               ; preds = %dec_label_pc_14398
  br i1 %v9_143a4, label %dec_label_pc_143b0, label %dec_label_pc_1440c

dec_label_pc_143b0:                               ; preds = %dec_label_pc_143ac
  %v1_143b0 = add i32 %arg3, 3
  %v1_143b4 = and i32 %v1_143b0, -4
  store i32 %v1_143b4, i32* %r2.global-to-local, align 4
  %v2_143b8 = sub i32 %v2_14398, %v1_143b4
  %v3_143b8 = icmp ult i32 %v2_14398, %v1_143b4
  br i1 %v3_143b8, label %dec_label_pc_1440c, label %dec_label_pc_143c0

dec_label_pc_143c0:                               ; preds = %dec_label_pc_143b0
  %v1_143c0 = add i32 %v1_143b4, 44
  %v3_143c4 = icmp ult i32 %v2_14398, %v1_143c0
  br i1 %v3_143c4, label %.thread2, label %bb

bb:                                               ; preds = %dec_label_pc_143c0
  store i32 %v2_143b8, i32* %v1_14398, align 4
  %v1_143d0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_143d0, i32* %r0.global-to-local, align 4
  ret i32 %v1_143d0

.thread2:                                         ; preds = %dec_label_pc_143c0
  %v1_143d8 = add i32 %v0_143d8, 4
  %v2_143d8 = inttoptr i32 %v1_143d8 to i32*
  %v3_143d8 = load i32, i32* %v2_143d8, align 4
  store i32 %v3_143d8, i32* %r2.global-to-local, align 4
  %v2_143dc = icmp eq i32 %v3_143d8, 0
  br i1 %v2_143dc, label %.thread3, label %bb17

bb17:                                             ; preds = %.thread2
  %v2_143e0 = add i32 %v0_143d8, 8
  %v3_143e0 = inttoptr i32 %v2_143e0 to i32*
  %v4_143e0 = load i32, i32* %v3_143e0, align 4
  %v3_143e4 = add i32 %v3_143d8, 8
  %v4_143e4 = inttoptr i32 %v3_143e4 to i32*
  store i32 %v4_143e0, i32* %v4_143e4, align 4
  %v0_143e8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread2, %bb17
  %v0_143e8 = phi i32 [ %v0_143d8, %.thread2 ], [ %v0_143e8.pre, %bb17 ]
  %v1_143e8 = add i32 %v0_143e8, 8
  %v2_143e8 = inttoptr i32 %v1_143e8 to i32*
  %v3_143e8 = load i32, i32* %v2_143e8, align 4
  store i32 %v3_143e8, i32* %r2.global-to-local, align 4
  %v1_143ec = add i32 %v0_143e8, 4
  %v2_143ec = inttoptr i32 %v1_143ec to i32*
  %v3_143ec = load i32, i32* %v2_143ec, align 4
  %v2_143f0 = icmp eq i32 %v3_143e8, 0
  br i1 %v2_143f0, label %.thread4, label %bb18

bb18:                                             ; preds = %.thread3
  %v3_143f4 = add i32 %v3_143e8, 4
  %v4_143f4 = inttoptr i32 %v3_143f4 to i32*
  store i32 %v3_143ec, i32* %v4_143f4, align 4
  br label %bb19

.thread4:                                         ; preds = %.thread3
  %v2_143f8 = load i32, i32* %lr.global-to-local, align 4
  %v3_143f8 = inttoptr i32 %v2_143f8 to i32*
  store i32 %v3_143ec, i32* %v3_143f8, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %.thread4
  %v5_143fc = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v5_143fc

dec_label_pc_14400:                               ; preds = %dec_label_pc_14398
  %v1_14400 = add i32 %v0_143d8, 4
  %v2_14400 = inttoptr i32 %v1_14400 to i32*
  %v3_14400 = load i32, i32* %v2_14400, align 4
  store i32 %v3_14400, i32* %ip.global-to-local, align 4
  %v2_14404 = icmp eq i32 %v3_14400, 0
  br i1 %v2_14404, label %dec_label_pc_14404.dec_label_pc_1440c.loopexit_crit_edge, label %dec_label_pc_14398

dec_label_pc_14404.dec_label_pc_1440c.loopexit_crit_edge: ; preds = %dec_label_pc_14400
  br label %dec_label_pc_1440c

dec_label_pc_1440c:                               ; preds = %dec_label_pc_143b0, %dec_label_pc_14388, %dec_label_pc_14404.dec_label_pc_1440c.loopexit_crit_edge, %dec_label_pc_143ac
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_14400, { 1, 2, 0 }
  uselistorder i32 %v0_143e8, { 1, 0 }
  uselistorder i32 %v1_143b4, { 0, 2, 1, 3 }
  uselistorder i1 %v9_143a4, { 1, 0 }
  uselistorder i32 %v2_14398, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_143d8, { 3, 2, 1, 0, 5, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 0 }
  uselistorder label %dec_label_pc_1440c, { 2, 0, 3, 1 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_14398, { 1, 0 }
}

define i32 @function_14414() local_unnamed_addr {
dec_label_pc_14414:
  %v0_14414 = load i32, i32* @r2, align 4
  %v2_14414 = icmp eq i32 %v0_14414, 0
  %v0_14418 = load i32, i32* @r3, align 4
  %v1_14418 = load i32, i32* @r1, align 4
  %v2_14418 = add i32 %v1_14418, 4
  %v3_14418 = inttoptr i32 %v2_14418 to i32*
  store i32 %v0_14418, i32* %v3_14418, align 4
  %v0_1441c = load i32, i32* @r2, align 4
  %v1_1441c = load i32, i32* @r1, align 4
  %v2_1441c = add i32 %v1_1441c, 8
  %v3_1441c = inttoptr i32 %v2_1441c to i32*
  store i32 %v0_1441c, i32* %v3_1441c, align 4
  %v1_14424 = load i32, i32* @r1, align 4
  br i1 %v2_14414, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_14414
  %v2_14420 = load i32, i32* @r2, align 4
  %v3_14420 = add i32 %v2_14420, 4
  %v4_14420 = inttoptr i32 %v3_14420 to i32*
  store i32 %v1_14424, i32* %v4_14420, align 4
  br label %bb1

.thread:                                          ; preds = %dec_label_pc_14414
  %v2_14424 = load i32, i32* @r0, align 4
  %v3_14424 = inttoptr i32 %v2_14424 to i32*
  store i32 %v1_14424, i32* %v3_14424, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %.thread
  %v0_14428 = load i32, i32* @r3, align 4
  %v2_14428 = icmp eq i32 %v0_14428, 0
  br i1 %v2_14428, label %bb3, label %bb2

bb2:                                              ; preds = %bb1
  %v1_1442c = load i32, i32* @r1, align 4
  %v3_1442c = add i32 %v0_14428, 8
  %v4_1442c = inttoptr i32 %v3_1442c to i32*
  store i32 %v1_1442c, i32* %v4_1442c, align 4
  br label %bb3

bb3:                                              ; preds = %bb1, %bb2
  %v1_14430 = load i32, i32* @r0, align 4
  ret i32 %v1_14430

; uselistorder directives
  uselistorder i32 %v1_14424, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_14434() local_unnamed_addr {
dec_label_pc_14434:
  %v0_14434 = load i32, i32* @r2, align 4
  %v2_14434 = icmp eq i32 %v0_14434, 0
  %v1_14438 = load i32, i32* @r1, align 4
  br i1 %v2_14434, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_14434
  %v2_14438 = load i32, i32* @r0, align 4
  %v3_14438 = inttoptr i32 %v2_14438 to i32*
  store i32 %v1_14438, i32* %v3_14438, align 4
  br label %bb2

.thread:                                          ; preds = %dec_label_pc_14434
  %v3_1443c = add i32 %v0_14434, 4
  %v4_1443c = inttoptr i32 %v3_1443c to i32*
  store i32 %v1_14438, i32* %v4_1443c, align 4
  br label %bb2

bb2:                                              ; preds = %bb, %.thread
  %v0_14440 = load i32, i32* @r2, align 4
  %v1_14440 = load i32, i32* @r1, align 4
  %v2_14440 = add i32 %v1_14440, 8
  %v3_14440 = inttoptr i32 %v2_14440 to i32*
  store i32 %v0_14440, i32* %v3_14440, align 4
  %v1_14444 = load i32, i32* @r0, align 4
  ret i32 %v1_14444

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_14448(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14448:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_14448 = load i32, i32* @r4, align 4
  store i32 %v3_14448, i32* %stack_var_-20, align 4
  %v2_1444c = load i32, i32* %arg1, align 4
  store i32 %v2_1444c, i32* %r4.global-to-local, align 4
  %v2_14450 = add i32 %arg3, %arg2
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_1446c2 = icmp eq i32 %v2_1444c, 0
  br i1 %v2_1446c2, label %dec_label_pc_1451c, label %dec_label_pc_1445c

dec_label_pc_1445c:                               ; preds = %dec_label_pc_14448, %dec_label_pc_14464
  %v0_144ac = phi i32 [ %v0_144b4, %dec_label_pc_14464 ], [ 0, %dec_label_pc_14448 ]
  %v0_144b4 = phi i32 [ %v3_14468, %dec_label_pc_14464 ], [ %v2_1444c, %dec_label_pc_14448 ]
  %v1_144705.in = phi i32 [ %v3_14468, %dec_label_pc_14464 ], [ %v2_1444c, %dec_label_pc_14448 ]
  %v1_144705 = add i32 %v1_144705.in, 12
  %v3_1445c = icmp ult i32 %v1_144705, %arg2
  br i1 %v3_1445c, label %dec_label_pc_14464, label %dec_label_pc_1447c

dec_label_pc_14464:                               ; preds = %dec_label_pc_1445c
  store i32 %v0_144b4, i32* %r6.global-to-local, align 4
  %v1_14468 = add i32 %v0_144b4, 4
  %v2_14468 = inttoptr i32 %v1_14468 to i32*
  %v3_14468 = load i32, i32* %v2_14468, align 4
  store i32 %v3_14468, i32* %r4.global-to-local, align 4
  %v2_1446c = icmp eq i32 %v3_14468, 0
  br i1 %v2_1446c, label %dec_label_pc_1446c.dec_label_pc_1451c.loopexit_crit_edge, label %dec_label_pc_1445c

dec_label_pc_1447c:                               ; preds = %dec_label_pc_1445c
  %v1_1447c = inttoptr i32 %v0_144b4 to i32*
  %v2_1447c = load i32, i32* %v1_1447c, align 4
  %v2_14480 = sub i32 %v0_144b4, %v2_1447c
  %v1_14484 = add i32 %v2_14480, 12
  %v3_14488 = icmp uge i32 %v1_14484, %v2_14450
  %v9_14488 = icmp eq i32 %v1_14484, %v2_14450
  %v2_1448c = xor i1 %v9_14488, true
  %v3_1448c = and i1 %v3_14488, %v2_1448c
  br i1 %v3_1448c, label %dec_label_pc_1451c, label %dec_label_pc_14490

dec_label_pc_14490:                               ; preds = %dec_label_pc_1447c
  %v2_14490 = add i32 %v2_1447c, %arg3
  store i32 %v2_14490, i32* %r7.global-to-local, align 4
  br i1 %v9_14488, label %dec_label_pc_14498, label %dec_label_pc_144c4

dec_label_pc_14498:                               ; preds = %dec_label_pc_14490
  %v2_14498 = icmp eq i32 %v0_144ac, 0
  br i1 %v2_14498, label %dec_label_pc_14510, label %dec_label_pc_144a0

dec_label_pc_144a0:                               ; preds = %dec_label_pc_14498
  %v1_144a0 = add i32 %v0_144ac, 12
  %v9_144a4 = icmp eq i32 %v1_144a0, %arg2
  br i1 %v9_144a4, label %dec_label_pc_144ac, label %dec_label_pc_14510

dec_label_pc_144ac:                               ; preds = %dec_label_pc_144a0
  %v1_144ac = inttoptr i32 %v0_144ac to i32*
  %v2_144ac = load i32, i32* %v1_144ac, align 4
  %v1_144b0 = add i32 %v0_144ac, 8
  %v2_144b0 = inttoptr i32 %v1_144b0 to i32*
  %v3_144b0 = load i32, i32* %v2_144b0, align 4
  store i32 %v3_144b0, i32* @r2, align 4
  store i32 %v0_144b4, i32* @r1, align 4
  %v2_144b8 = add i32 %v2_144ac, %v2_14490
  store i32 %v2_144b8, i32* %r7.global-to-local, align 4
  %v0_144bc = call i32 @function_14434()
  br label %dec_label_pc_14510

dec_label_pc_144c4:                               ; preds = %dec_label_pc_14490
  %v1_144c4 = add i32 %v0_144b4, 4
  %v2_144c4 = inttoptr i32 %v1_144c4 to i32*
  %v3_144c4 = load i32, i32* %v2_144c4, align 4
  store i32 %v3_144c4, i32* %r5.global-to-local, align 4
  %v2_144c8 = icmp eq i32 %v3_144c4, 0
  br i1 %v2_144c8, label %dec_label_pc_144fc, label %dec_label_pc_144d0

dec_label_pc_144d0:                               ; preds = %dec_label_pc_144c4
  %v1_144d0 = inttoptr i32 %v3_144c4 to i32*
  %v2_144d0 = load i32, i32* %v1_144d0, align 4
  %v2_144d4 = sub i32 %v3_144c4, %v2_144d0
  %v1_144d8 = add i32 %v2_144d4, 12
  %v9_144dc = icmp eq i32 %v2_14450, %v1_144d8
  br i1 %v9_144dc, label %dec_label_pc_144e4, label %dec_label_pc_144fc

dec_label_pc_144e4:                               ; preds = %dec_label_pc_144d0
  store i32 %v0_144ac, i32* @r2, align 4
  store i32 %v3_144c4, i32* @r1, align 4
  %v2_144ec = add i32 %v2_144d0, %v2_14490
  store i32 %v2_144ec, i32* %r7.global-to-local, align 4
  %v0_144f0 = call i32 @function_14434()
  %v0_144f4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_144f4, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14510

dec_label_pc_144fc:                               ; preds = %dec_label_pc_144d0, %dec_label_pc_144c4
  %v2_144fc = add i32 %v0_144b4, %arg3
  store i32 %v2_144fc, i32* %r4.global-to-local, align 4
  store i32 %v3_144c4, i32* @r3, align 4
  store i32 %v0_144ac, i32* @r2, align 4
  store i32 %v2_144fc, i32* @r1, align 4
  %v0_1450c = call i32 @function_14414()
  br label %dec_label_pc_14510

dec_label_pc_14510:                               ; preds = %dec_label_pc_144a0, %dec_label_pc_14498, %dec_label_pc_144e4, %dec_label_pc_144ac, %dec_label_pc_144fc
  %v0_14510 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14510, i32* %r5.global-to-local, align 4
  %v0_14514 = load i32, i32* %r7.global-to-local, align 4
  %v2_14514 = inttoptr i32 %v0_14510 to i32*
  store i32 %v0_14514, i32* %v2_14514, align 4
  br label %dec_label_pc_14534

dec_label_pc_1446c.dec_label_pc_1451c.loopexit_crit_edge: ; preds = %dec_label_pc_14464
  br label %dec_label_pc_1451c

dec_label_pc_1451c:                               ; preds = %dec_label_pc_14448, %dec_label_pc_1446c.dec_label_pc_1451c.loopexit_crit_edge, %dec_label_pc_1447c
  %v1_1451c = add i32 %v2_14450, -12
  store i32 %v1_1451c, i32* %r5.global-to-local, align 4
  %v3_14520 = inttoptr i32 %v1_1451c to i32*
  store i32 %arg3, i32* %v3_14520, align 4
  %v0_14524 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14524, i32* @r3, align 4
  %v0_14528 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_14528, i32* @r2, align 4
  %v0_1452c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1452c, i32* @r1, align 4
  %v0_14530 = call i32 @function_14414()
  br label %dec_label_pc_14534

dec_label_pc_14534:                               ; preds = %dec_label_pc_14510, %dec_label_pc_1451c
  %v0_14534 = load i32, i32* %r5.global-to-local, align 4
  %v2_14538 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_14538, i32* @r4, align 4
  ret i32 %v0_14534

; uselistorder directives
  uselistorder i32 %v3_144c4, { 0, 1, 3, 2, 4, 5 }
  uselistorder i1 %v9_14488, { 1, 0 }
  uselistorder i32 %v3_14468, { 2, 3, 1, 0 }
  uselistorder i32 %v0_144b4, { 0, 2, 1, 3, 4, 6, 7, 5 }
  uselistorder i32 %v0_144ac, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 ()* @function_14414, { 1, 0 }
  uselistorder i32* @r3, { 2, 5, 3, 4, 0, 6, 1 }
  uselistorder i32 ()* @function_14434, { 1, 0 }
  uselistorder i32 %arg3, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14534, { 1, 0 }
  uselistorder label %dec_label_pc_1451c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14510, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_1445c, { 1, 0 }
}

define i32 @function_1453c() local_unnamed_addr {
dec_label_pc_14558.lr.ph:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %v2_1453c = ptrtoint i32* %stack_var_-268 to i32
  %v1_1454c = call i32 @function_14ad4()
  store i32 31, i32* %r1.global-to-local, align 4
  %v2_14558 = ptrtoint i32* %stack_var_0 to i32
  br label %dec_label_pc_14558

dec_label_pc_14558:                               ; preds = %dec_label_pc_14558.lr.ph, %dec_label_pc_14558
  %v1_1455c = phi i32 [ 31, %dec_label_pc_14558.lr.ph ], [ %v1_14568, %dec_label_pc_14558 ]
  %v4_1455c = mul i32 %v1_1455c, 4
  %v5_1455c = add i32 %v4_1455c, %v2_14558
  %v2_14564 = add i32 %v5_1455c, -128
  %v3_14564 = inttoptr i32 %v2_14564 to i32*
  store i32 0, i32* %v3_14564, align 4
  %v0_14568 = load i32, i32* %r1.global-to-local, align 4
  %v1_14568 = add i32 %v0_14568, -1
  store i32 %v1_14568, i32* %r1.global-to-local, align 4
  %v6_14568 = icmp slt i32 %v1_14568, 0
  br i1 %v6_14568, label %dec_label_pc_14570, label %dec_label_pc_14558

dec_label_pc_14570:                               ; preds = %dec_label_pc_14558
  %v2_14570 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_14570, i32* @r4, align 4
  store i32 %v2_14570, i32* @r0, align 4
  store i32 6, i32* @r1, align 4
  %v0_1457c = call i32 @function_13ef8()
  %v2_14580 = icmp eq i32 %v0_1457c, 0
  br i1 %v2_14580, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_14570
  store i32 %v2_14570, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_14570, %bb
  store i32 83348, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_14580, i32 ptrtoint (i32* @global_var_1370c.635 to i32))
  %v2_14598 = load i32, i32* @global_var_1eab0.637, align 4
  %v2_1459c = icmp eq i32 %v2_14598, 0
  br i1 %v2_1459c, label %dec_label_pc_145a4, label %dec_label_pc_145d4

dec_label_pc_145a4:                               ; preds = %.thread1
  store i32 1, i32* @global_var_1eab0.637, align 4
  br label %dec_label_pc_145ac

dec_label_pc_145ac:                               ; preds = %dec_label_pc_14624, %dec_label_pc_145a4
  %v1_145b8 = call i32 @function_14ad4()
  %v1_145c0 = call i32 @function_13dbc(i32 6)
  store i32 83412, i32* @lr, align 4
  %v1_145d0 = call i32 @function_14ad4()
  %v2_145d8.pre = load i32, i32* @global_var_1eab0.637, align 4
  br label %dec_label_pc_145d4

dec_label_pc_145d4:                               ; preds = %.thread1, %dec_label_pc_145ac
  %v0_14648 = phi i32 [ %v2_14598, %.thread1 ], [ %v2_145d8.pre, %dec_label_pc_145ac ]
  store i32 ptrtoint (i32* @global_var_1eab0.637 to i32), i32* %ip.global-to-local, align 4
  %v7_145dc = icmp eq i32 %v0_14648, 1
  br i1 %v7_145dc, label %dec_label_pc_1460c.lr.ph, label %dec_label_pc_14640

dec_label_pc_1460c.lr.ph:                         ; preds = %dec_label_pc_145d4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 140, i32* @r2, align 4
  store i32 2, i32* @global_var_1eab0.637, align 4
  %v2_145f8 = bitcast i32* %stack_var_-268 to i8*
  %v3_145f8 = call i32 @function_13ad0(i8* %v2_145f8, i32 0)
  store i32 0, i32* %stack_var_-268, align 4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1460c

dec_label_pc_1460c:                               ; preds = %dec_label_pc_1460c.lr.ph, %dec_label_pc_1460c
  %v1_14610 = phi i32 [ 31, %dec_label_pc_1460c.lr.ph ], [ %v1_1461c, %dec_label_pc_1460c ]
  %v4_14610 = mul i32 %v1_14610, 4
  %v5_14610 = add i32 %v4_14610, %v2_14558
  %v2_14618 = add i32 %v5_14610, -264
  %v3_14618 = inttoptr i32 %v2_14618 to i32*
  store i32 -1, i32* %v3_14618, align 4
  %v0_1461c = load i32, i32* %r1.global-to-local, align 4
  %v1_1461c = add i32 %v0_1461c, -1
  store i32 %v1_1461c, i32* %r1.global-to-local, align 4
  %v6_1461c = icmp slt i32 %v1_1461c, 0
  br i1 %v6_1461c, label %dec_label_pc_14624, label %dec_label_pc_1460c

dec_label_pc_14624:                               ; preds = %dec_label_pc_1460c
  store i32 %v2_1453c, i32* %r1.global-to-local, align 4
  %v4_14638 = call i32 @function_14dc0(i32 6, i32* nonnull %stack_var_-268, i32 0)
  br label %dec_label_pc_145ac

dec_label_pc_14640:                               ; preds = %dec_label_pc_145d4
  %v7_14640 = icmp eq i32 %v0_14648, 2
  br i1 %v7_14640, label %dec_label_pc_14648, label %dec_label_pc_14654

dec_label_pc_14648:                               ; preds = %dec_label_pc_14640
  store i32 3, i32* @global_var_1eab0.637, align 4
  %v0_14650 = call i32 @function_1453c()
  %v2_14654.pre = load i32, i32* @global_var_1eab0.637, align 4
  br label %dec_label_pc_14654

dec_label_pc_14654:                               ; preds = %dec_label_pc_14640, %dec_label_pc_14648
  %v1_1465c = phi i32 [ %v0_14648, %dec_label_pc_14640 ], [ %v2_14654.pre, %dec_label_pc_14648 ]
  %v7_14658 = icmp eq i32 %v1_1465c, 3
  br i1 %v7_14658, label %bb27, label %.thread3

bb27:                                             ; preds = %dec_label_pc_14654
  %v2_14664 = load i32, i32* %ip.global-to-local, align 4
  %v3_14664 = inttoptr i32 %v2_14664 to i32*
  store i32 4, i32* %v3_14664, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_14654, %bb27
  call void @__pseudo_cond_branch(i1 %v7_14658, i32 ptrtoint (i32* @global_var_14ed8.639 to i32))
  br label %dec_label_pc_1466c

dec_label_pc_1466c:                               ; preds = %dec_label_pc_1466c, %.thread3
  %v0_1466c = call i32 @function_1453c()
  br label %dec_label_pc_1466c

; uselistorder directives
  uselistorder i32 %v1_1461c, { 2, 1, 0 }
  uselistorder i32 %v1_14568, { 2, 1, 0 }
  uselistorder i32* %stack_var_-268, { 1, 2, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 1, 2, 5, 6, 8, 7, 0 }
  uselistorder i32* @global_var_1eab0.637, { 1, 2, 0, 6, 3, 4, 5 }
  uselistorder i32 -128, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_14654, { 1, 0 }
  uselistorder label %dec_label_pc_1460c, { 1, 0 }
  uselistorder label %dec_label_pc_145d4, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_14558, { 1, 0 }
}

define i32 @function_14684(i8* %arg1) local_unnamed_addr {
dec_label_pc_14684:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_14698 = load i32, i32* @r4, align 4
  store i32 %v3_14698, i32* %stack_var_-36, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 10, i32* %r5.global-to-local, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  %v2_146bc.pre = load i32, i32* bitcast (i32** @global_var_1ea00.642 to i32*), align 4
  br label %dec_label_pc_146b4

dec_label_pc_146b4:                               ; preds = %dec_label_pc_146b4, %dec_label_pc_14684
  %v0_146ec = phi i32 [ %tmp, %dec_label_pc_14684 ], [ %v1_146b0, %dec_label_pc_146b4 ]
  store i32 %v0_146ec, i32* %r4.global-to-local, align 4
  %v1_146b8 = inttoptr i32 %v0_146ec to i8*
  %v2_146b8 = load i8, i8* %v1_146b8, align 1
  %v3_146b8 = zext i8 %v2_146b8 to i32
  %v3_146c0 = mul nuw nsw i32 %v3_146b8, 2
  %v4_146c0 = add i32 %v3_146c0, %v2_146bc.pre
  %v5_146c0 = inttoptr i32 %v4_146c0 to i8*
  %v6_146c0 = load i8, i8* %v5_146c0, align 1
  %v1_146c4 = and i8 %v6_146c0, 32
  %v2_146c4 = icmp eq i8 %v1_146c4, 0
  %v1_146b0 = add i32 %v0_146ec, 1
  br i1 %v2_146c4, label %dec_label_pc_146cc, label %dec_label_pc_146b4

dec_label_pc_146cc:                               ; preds = %dec_label_pc_146b4
  %v7_146cc = icmp eq i8 %v2_146b8, 43
  br i1 %v7_146cc, label %dec_label_pc_146ec, label %dec_label_pc_146d4

dec_label_pc_146d4:                               ; preds = %dec_label_pc_146cc
  %v7_146d4 = icmp eq i8 %v2_146b8, 45
  br i1 %v7_146d4, label %dec_label_pc_146ec, label %bb

bb:                                               ; preds = %dec_label_pc_146d4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14748

dec_label_pc_146ec:                               ; preds = %dec_label_pc_146cc, %dec_label_pc_146d4
  %storemerge30 = phi i32 [ 1, %dec_label_pc_146d4 ], [ 0, %dec_label_pc_146cc ]
  store i32 %storemerge30, i32* %r7.global-to-local, align 4
  store i32 %v1_146b0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14748

dec_label_pc_14748:                               ; preds = %bb, %dec_label_pc_146ec
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v2_14750 = call i32 @function_131ec(i32 -1, i32 10)
  %v0_14754 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_14754, i32* @r1, align 4
  store i32 -1, i32* @r0, align 4
  %v1_14760 = urem i32 %v2_14750, 256
  store i32 %v1_14760, i32* %sl.global-to-local, align 4
  %v0_14764 = call i32 @function_130dc()
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v0_14764, i32* %r8.global-to-local, align 4
  %v0_14778.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14778

dec_label_pc_14774:                               ; preds = %bb48, %dec_label_pc_147d4
  %v0_14774 = phi i32 [ %v1_147a4, %bb48 ], [ %v0_14774.pre, %dec_label_pc_147d4 ]
  store i32 %v0_14774, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14778

dec_label_pc_14778:                               ; preds = %dec_label_pc_14748, %dec_label_pc_14774
  %v0_147a4 = phi i32 [ %v0_14778.pre, %dec_label_pc_14748 ], [ %v0_14774, %dec_label_pc_14774 ]
  %v1_14778 = inttoptr i32 %v0_147a4 to i8*
  %v2_14778 = load i8, i8* %v1_14778, align 1
  %v3_14778 = zext i8 %v2_14778 to i32
  %v1_1477c = add nsw i32 %v3_14778, -48
  %v1_14780 = urem i32 %v1_1477c, 256
  %v1_14788 = or i32 %v3_14778, 32
  %tmp56 = icmp ult i32 %v1_14780, 10
  br i1 %tmp56, label %bb43, label %dec_label_pc_14790

dec_label_pc_14790:                               ; preds = %dec_label_pc_14778
  %tmp57 = icmp ugt i32 %v1_14788, 96
  br i1 %tmp57, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_14790
  %v1_14794 = add nsw i32 %v1_14788, -87
  %v5_1479c = urem i32 %v1_14794, 256
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_14778, %dec_label_pc_14790, %bb42
  %v3_147cc = phi i32 [ %v1_14780, %dec_label_pc_14778 ], [ 40, %dec_label_pc_14790 ], [ %v5_1479c, %bb42 ]
  %v1_147a0 = load i32, i32* %r5.global-to-local, align 4
  %v1_147a4 = add i32 %v0_147a4, 1
  store i32 %v1_147a4, i32* %r4.global-to-local, align 4
  %v6_147a8 = icmp slt i32 %v3_147cc, %v1_147a0
  br i1 %v6_147a8, label %dec_label_pc_147ac, label %dec_label_pc_147ec

dec_label_pc_147ac:                               ; preds = %bb43
  %v0_147ac = load i32, i32* %ip.global-to-local, align 4
  %v1_147ac = load i32, i32* %r8.global-to-local, align 4
  %v9_147ac = icmp eq i32 %v0_147ac, %v1_147ac
  br i1 %v9_147ac, label %.thread, label %bb44

.thread:                                          ; preds = %dec_label_pc_147ac
  br label %dec_label_pc_147bc

bb44:                                             ; preds = %dec_label_pc_147ac
  %v3_147ac = icmp ult i32 %v0_147ac, %v1_147ac
  br i1 %v3_147ac, label %dec_label_pc_147bc, label %dec_label_pc_147d4

dec_label_pc_147bc:                               ; preds = %bb44, %.thread
  %v4_147c41727 = phi i32 [ 1, %.thread ], [ 0, %bb44 ]
  %v1_147bc = load i32, i32* %sl.global-to-local, align 4
  %v3_147bc = icmp uge i32 %v3_147cc, %v1_147bc
  %v9_147bc = icmp eq i32 %v3_147cc, %v1_147bc
  %v2_147c0 = xor i1 %v3_147bc, true
  %v3_147c0 = or i1 %v9_147bc, %v2_147c0
  br i1 %v3_147c0, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_147bc
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_147bc, %bb45
  %v4_147c4 = phi i32 [ %v4_147c41727, %dec_label_pc_147bc ], [ 0, %bb45 ]
  %v2_147c4 = xor i1 %v9_147bc, true
  %v3_147c4 = and i1 %v3_147bc, %v2_147c4
  br i1 %v3_147c4, label %bb47, label %thread-pre-split

bb47:                                             ; preds = %bb46
  %v5_147c4 = urem i32 %v4_147c4, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb46, %bb47
  %v0_147c8 = phi i32 [ %v5_147c4, %bb47 ], [ %v4_147c4, %bb46 ]
  %v2_147c8 = icmp eq i32 %v0_147c8, 0
  br i1 %v2_147c8, label %bb48, label %dec_label_pc_147d4

bb48:                                             ; preds = %thread-pre-split
  %v4_147cc = mul i32 %v0_147ac, %v1_147a0
  %v5_147cc = add i32 %v4_147cc, %v3_147cc
  store i32 %v5_147cc, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_14774

dec_label_pc_147d4:                               ; preds = %bb44, %thread-pre-split
  %v0_147d4 = call i32 @function_13a64()
  %v0_147d8 = load i32, i32* %r7.global-to-local, align 4
  %v1_147d8 = load i32, i32* %fp.global-to-local, align 4
  %v2_147d8 = and i32 %v1_147d8, %v0_147d8
  store i32 %v2_147d8, i32* %r7.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  %v2_147e4 = inttoptr i32 %v0_147d4 to i32*
  store i32 34, i32* %v2_147e4, align 4
  %v0_14774.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14774

dec_label_pc_147ec:                               ; preds = %bb43
  %v0_147ec.pre = load i32, i32* %sb.global-to-local, align 4
  %v2_147ec = icmp eq i32 %v0_147ec.pre, 0
  br i1 %v2_147ec, label %bb50, label %bb49

bb49:                                             ; preds = %dec_label_pc_147ec
  %v1_147f0 = load i32, i32* %r6.global-to-local, align 4
  %v3_147f0 = inttoptr i32 %v0_147ec.pre to i32*
  store i32 %v1_147f0, i32* %v3_147f0, align 4
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_147ec, %bb49
  %v0_147f4 = load i32, i32* %r7.global-to-local, align 4
  %v2_147f4 = icmp eq i32 %v0_147f4, 0
  %. = select i1 %v2_147f4, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v0_14800 = load i32, i32* %fp.global-to-local, align 4
  %v2_14800 = icmp eq i32 %v0_14800, 0
  %v0_14824.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_14800, label %dec_label_pc_1481c, label %bb53

bb53:                                             ; preds = %bb50
  %tmp58 = icmp ugt i32 %v0_14824.pre.pre, %.
  br i1 %tmp58, label %dec_label_pc_1480c, label %dec_label_pc_1481c

dec_label_pc_1480c:                               ; preds = %bb53
  %v0_1480c = call i32 @function_13a64()
  %v2_14814 = inttoptr i32 %v0_1480c to i32*
  store i32 34, i32* %v2_14814, align 4
  %v0_14818 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14818, i32* %ip.global-to-local, align 4
  %v0_1481c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1481c

dec_label_pc_1481c:                               ; preds = %bb53, %bb50, %dec_label_pc_1480c
  %v0_14824.pre = phi i32 [ %v0_14824.pre.pre, %bb53 ], [ %v0_14818, %dec_label_pc_1480c ], [ %v0_14824.pre.pre, %bb50 ]
  %v0_1481c = phi i32 [ %v0_147f4, %bb53 ], [ %v0_1481c.pre, %dec_label_pc_1480c ], [ %v0_147f4, %bb50 ]
  %v2_1481c = icmp eq i32 %v0_1481c, 0
  br i1 %v2_1481c, label %dec_label_pc_1481c._crit_edge, label %bb54

bb54:                                             ; preds = %dec_label_pc_1481c
  %v2_14820 = sub i32 0, %v0_14824.pre
  store i32 %v2_14820, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1481c._crit_edge

dec_label_pc_1481c._crit_edge:                    ; preds = %dec_label_pc_1481c, %bb54
  %v0_14824 = phi i32 [ %v2_14820, %bb54 ], [ %v0_14824.pre, %dec_label_pc_1481c ]
  %v2_14828 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_14828, i32* @r4, align 4
  ret i32 %v0_14824

; uselistorder directives
  uselistorder i32 %v0_14824.pre, { 1, 0 }
  uselistorder i32 %v0_14824.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v0_147ec.pre, { 1, 0 }
  uselistorder i32 %v4_147c4, { 1, 0 }
  uselistorder i1 %v3_147bc, { 1, 0 }
  uselistorder i32 %v1_147bc, { 1, 0 }
  uselistorder i32 %v1_147a4, { 1, 0 }
  uselistorder i32 %v1_14788, { 1, 0 }
  uselistorder i32 %v1_14780, { 1, 0 }
  uselistorder i32 %v0_14774, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 4, 2, 1, 3, 0, 5 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 5, 6, 0, 1, 3, 2, 4 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 5, 2, 3, 4, 6 }
  uselistorder i32 ()* @function_130dc, { 3, 2, 4, 1, 0 }
  uselistorder i32 (i32, i32)* @function_131ec, { 6, 2, 1, 11, 3, 8, 4, 10, 9, 7, 5, 0 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder i8 32, { 0, 8, 14, 9, 10, 1, 11, 12, 13, 2, 3, 4, 5, 6, 7, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28 }
  uselistorder label %dec_label_pc_1481c._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_1481c, { 2, 0, 1 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_147d4, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %bb43, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14778, { 1, 0 }
  uselistorder label %dec_label_pc_14774, { 1, 0 }
  uselistorder label %dec_label_pc_14748, { 1, 0 }
  uselistorder label %dec_label_pc_146ec, { 1, 0 }
}

define i32 @function_14830(i32 %arg1) local_unnamed_addr {
dec_label_pc_14830:
  %stack_var_-16 = alloca i32, align 4
  %v2_14830 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r4, align 4
  store i32 %v2_14830, i32* @r0, align 4
  %v8_1484c = call i32 @function_14adc(i32 %v2_14830, i32 ptrtoint (i32* @global_var_14ad4.591 to i32), i32 ptrtoint (i32* @global_var_1e9e0.645 to i32), i32 84700, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v1_1485c = call i32 @function_14ad4()
  %v2_14864 = load i32, i32* @global_var_1eab4.649, align 4
  %v2_14868 = icmp eq i32 %v2_14864, 0
  br i1 %v2_14868, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_14830
  call void @__pseudo_branch(i32 %v2_14864)
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_14830, %bb
  store i32 %v2_14830, i32* @r0, align 4
  %v8_14888 = call i32 @function_14adc(i32 %v2_14830, i32 1, i32 ptrtoint (i32* @global_var_1e9e0.645 to i32), i32 84700, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v8_14888, i32* @r0, align 4
  %v1_1488c = call i32 @function_14a68(i32 %v8_14888)
  %v0_148a0 = load i32, i32* @r4, align 4
  %v1_148a4 = call i32 @function_14ed8(i32 %v0_148a0)
  unreachable

; uselistorder directives
  uselistorder i32 %v2_14830, { 1, 0, 3, 2 }
  uselistorder i32 ()* @function_14ad4, { 4, 3, 2, 1, 18, 17, 16, 15, 14, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 21, 20, 19 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @function_14adc, { 1, 0, 5, 4, 3, 2 }
  uselistorder i32 84700, { 1, 0, 3, 4, 2, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1e9e0.645 to i32), { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_14ad4.591 to i32), { 0, 3, 1, 2 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_148c4(i32 %arg1) local_unnamed_addr {
dec_label_pc_148c4:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-424 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_148c4 = load i32, i32* @r4, align 4
  store i32 %v3_148c4, i32* %stack_var_-20, align 4
  %v6_148c4 = load i32, i32* @r5, align 4
  %v9_148c4 = load i32, i32* @r6, align 4
  %v16_148c4 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* @ip, align 4
  %v2_148c8 = icmp eq i32 %arg1, 0
  %v2_148cc = ptrtoint i32* %stack_var_-424 to i32
  br i1 %v2_148c8, label %dec_label_pc_14a50, label %dec_label_pc_148e4.preheader

dec_label_pc_148e4.preheader:                     ; preds = %dec_label_pc_148c4
  store i32 31, i32* %r1.global-to-local, align 4
  %v5_148ec17 = add i32 %v16_148c4, 124
  br label %dec_label_pc_148dc

dec_label_pc_148dc:                               ; preds = %dec_label_pc_148e4.preheader, %dec_label_pc_148dc
  %v5_148ec18 = phi i32 [ %v5_148ec17, %dec_label_pc_148e4.preheader ], [ %v5_148ec, %dec_label_pc_148dc ]
  %v2_148e0 = add i32 %v5_148ec18, -136
  %v3_148e0 = inttoptr i32 %v2_148e0 to i32*
  store i32 0, i32* %v3_148e0, align 4
  %v0_148e4.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_148e4 = add i32 %v0_148e4.pre, -1
  store i32 %v1_148e4, i32* %r1.global-to-local, align 4
  %v6_148e4 = icmp slt i32 %v1_148e4, 0
  %v4_148ec = mul i32 %v1_148e4, 4
  %v5_148ec = add i32 %v4_148ec, %v16_148c4
  br i1 %v6_148e4, label %dec_label_pc_148f4, label %dec_label_pc_148dc

dec_label_pc_148f4:                               ; preds = %dec_label_pc_148dc
  %v2_148f4 = ptrtoint i32* %stack_var_-156 to i32
  store i32 0, i32* @r5, align 4
  store i32 %v2_148f4, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_14904 = load i32, i32* @ip, align 4
  store i32 %v0_14904, i32* %stack_var_-28, align 4
  %v0_1490c = call i32 @function_13ef8()
  store i32 %v0_1490c, i32* %r0.global-to-local, align 4
  %v1_14910 = load i32, i32* @r5, align 4
  %v5_14914 = icmp slt i32 %v0_1490c, %v1_14910
  br i1 %v5_14914, label %dec_label_pc_14a58, label %dec_label_pc_14918

dec_label_pc_14918:                               ; preds = %dec_label_pc_148f4
  %v2_14918 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_14918, i32* @r4, align 4
  store i32 %v1_14910, i32* %r0.global-to-local, align 4
  store i32 %v2_148f4, i32* %r1.global-to-local, align 4
  %v3_14928 = bitcast i32* %stack_var_-156 to %_TYPEDEF_sigset_t*
  %v4_14928 = call i32 @function_1370c(i32 %v1_14910, %_TYPEDEF_sigset_t* %v3_14928, i32 %v2_14918)
  store i32 %v4_14928, i32* %r0.global-to-local, align 4
  %v1_1492c = load i32, i32* @r5, align 4
  %v9_1492c = icmp eq i32 %v4_14928, %v1_1492c
  br i1 %v9_1492c, label %dec_label_pc_14934, label %dec_label_pc_14a58

dec_label_pc_14934:                               ; preds = %dec_label_pc_14918
  store i32 17, i32* %r1.global-to-local, align 4
  store i32 %v2_14918, i32* %r0.global-to-local, align 4
  %v2_1493c = call i32 @function_13ed4(i32 %v2_14918, i32 17)
  store i32 %v2_1493c, i32* %r0.global-to-local, align 4
  %v1_14940 = load i32, i32* @r5, align 4
  %v9_14940 = icmp eq i32 %v2_1493c, %v1_14940
  br i1 %v9_14940, label %dec_label_pc_14958.preheader, label %dec_label_pc_14934.dec_label_pc_14a20_crit_edge

dec_label_pc_14934.dec_label_pc_14a20_crit_edge:  ; preds = %dec_label_pc_14934
  %.pre = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_14a20

dec_label_pc_14958.preheader:                     ; preds = %dec_label_pc_14934
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14950

dec_label_pc_14950:                               ; preds = %dec_label_pc_14958.preheader, %dec_label_pc_14950
  %v5_1496016 = phi i32 [ %v5_148ec17, %dec_label_pc_14958.preheader ], [ %v5_14960, %dec_label_pc_14950 ]
  %v2_14954 = add i32 %v5_1496016, -136
  %v3_14954 = inttoptr i32 %v2_14954 to i32*
  store i32 0, i32* %v3_14954, align 4
  %v0_14958.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_14958 = add i32 %v0_14958.pre, -1
  store i32 %v1_14958, i32* %r1.global-to-local, align 4
  %v6_14958 = icmp slt i32 %v1_14958, 0
  %v4_14960 = mul i32 %v1_14958, 4
  %v5_14960 = add i32 %v4_14960, %v16_148c4
  br i1 %v6_14958, label %dec_label_pc_14968, label %dec_label_pc_14950

dec_label_pc_14968:                               ; preds = %dec_label_pc_14950
  store i32 %v2_148f4, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_14970 = call i32 @function_13ef8()
  store i32 %v0_14970, i32* %r0.global-to-local, align 4
  %v1_14974 = icmp slt i32 %v0_14970, 0
  br i1 %v1_14974, label %dec_label_pc_14a58, label %dec_label_pc_1497c

dec_label_pc_1497c:                               ; preds = %dec_label_pc_14968
  store i32 17, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_14988 = call i32 @function_14dc0(i32 17, i32* null, i32 %v2_148cc)
  store i32 %v4_14988, i32* %r0.global-to-local, align 4
  %v1_1498c = icmp slt i32 %v4_14988, 0
  br i1 %v1_1498c, label %dec_label_pc_14994, label %dec_label_pc_149bc

dec_label_pc_14994:                               ; preds = %dec_label_pc_1497c
  %v0_14994 = call i32 @function_13a64()
  store i32 %v2_14918, i32* %r1.global-to-local, align 4
  store i32 %v0_14994, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_149a8 = inttoptr i32 %v0_14994 to i32*
  %v2_149a8 = load i32, i32* %v1_149a8, align 4
  store i32 %v2_149a8, i32* @r4, align 4
  %v3_149ac = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_149ac = call i32 @function_1370c(i32 2, %_TYPEDEF_sigset_t* %v3_149ac, i32 0)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v0_149b4 = load i32, i32* @r4, align 4
  %v1_149b4 = load i32, i32* %r5.global-to-local, align 4
  %v2_149b4 = inttoptr i32 %v1_149b4 to i32*
  store i32 %v0_149b4, i32* %v2_149b4, align 4
  %v17_14a60.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14a5c

dec_label_pc_149bc:                               ; preds = %dec_label_pc_1497c
  %v2_149bc = load i32, i32* %stack_var_-424, align 4
  %v7_149c0 = icmp eq i32 %v2_149bc, 1
  %v2_149c8 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_149c8, i32* @r4, align 4
  br i1 %v7_149c0, label %dec_label_pc_149d0, label %dec_label_pc_14a04

dec_label_pc_149d0:                               ; preds = %dec_label_pc_149bc
  store i32 %v2_149c8, i32* %r1.global-to-local, align 4
  store i32 %v2_149c8, i32* %r0.global-to-local, align 4
  %v2_149d8 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_149d8 = call i32 @function_1525c(%timespec* %v2_149d8, i32 %v2_149c8)
  store i32 %v3_149d8, i32* %r0.global-to-local, align 4
  store i32 %v3_149d8, i32* %r6.global-to-local, align 4
  %v0_149e0 = call i32 @function_13a64()
  store i32 %v2_14918, i32* %r1.global-to-local, align 4
  store i32 %v0_149e0, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_149f4 = inttoptr i32 %v0_149e0 to i32*
  %v2_149f4 = load i32, i32* %v1_149f4, align 4
  store i32 %v2_149f4, i32* @r4, align 4
  %v3_149f8 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_149f8 = call i32 @function_1370c(i32 2, %_TYPEDEF_sigset_t* %v3_149f8, i32 0)
  store i32 %v4_149f8, i32* %r0.global-to-local, align 4
  %v0_149fc = load i32, i32* @r4, align 4
  %v1_149fc = load i32, i32* %r5.global-to-local, align 4
  %v2_149fc = inttoptr i32 %v1_149fc to i32*
  store i32 %v0_149fc, i32* %v2_149fc, align 4
  %v0_14a2c.pr = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14a2c

dec_label_pc_14a04:                               ; preds = %dec_label_pc_149bc
  store i32 %v2_14918, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_14a10 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_14a10 = call i32 @function_1370c(i32 2, %_TYPEDEF_sigset_t* %v3_14a10, i32 0)
  store i32 %v4_14a10, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14a20

dec_label_pc_14a20:                               ; preds = %dec_label_pc_14934.dec_label_pc_14a20_crit_edge, %dec_label_pc_14a04
  %storemerge.pre-phi = phi i32 [ %.pre, %dec_label_pc_14934.dec_label_pc_14a20_crit_edge ], [ %v2_149c8, %dec_label_pc_14a04 ]
  store i32 %storemerge.pre-phi, i32* %r0.global-to-local, align 4
  store i32 %storemerge.pre-phi, i32* %r1.global-to-local, align 4
  %v2_14a24 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_14a24 = call i32 @function_1525c(%timespec* %v2_14a24, i32 %storemerge.pre-phi)
  store i32 %v3_14a24, i32* %r0.global-to-local, align 4
  store i32 %v3_14a24, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14a2c

dec_label_pc_14a2c:                               ; preds = %dec_label_pc_149d0, %dec_label_pc_14a20
  %v0_14a2c = phi i32 [ %v0_14a2c.pr, %dec_label_pc_149d0 ], [ %v3_14a24, %dec_label_pc_14a20 ]
  %v2_14a2c = icmp eq i32 %v0_14a2c, 0
  br i1 %v2_14a2c, label %dec_label_pc_14a50, label %dec_label_pc_14a34

dec_label_pc_14a34:                               ; preds = %dec_label_pc_14a2c
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_14a3c = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_14a3c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14a5c

dec_label_pc_14a50:                               ; preds = %dec_label_pc_148c4, %dec_label_pc_14a2c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14a5c

dec_label_pc_14a58:                               ; preds = %dec_label_pc_14918, %dec_label_pc_14968, %dec_label_pc_148f4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14a5c

dec_label_pc_14a5c:                               ; preds = %dec_label_pc_14a34, %dec_label_pc_14a50, %dec_label_pc_14994, %dec_label_pc_14a58
  %v17_14a60 = phi i32 [ %v3_14a3c, %dec_label_pc_14a34 ], [ 0, %dec_label_pc_14a50 ], [ %v17_14a60.pre, %dec_label_pc_14994 ], [ -1, %dec_label_pc_14a58 ]
  %v2_14a60 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_14a60, i32* @r4, align 4
  store i32 %v6_148c4, i32* @r5, align 4
  store i32 %v9_148c4, i32* @r6, align 4
  ret i32 %v17_14a60

; uselistorder directives
  uselistorder i32 %storemerge.pre-phi, { 1, 2, 0 }
  uselistorder i32 %v2_149c8, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_14958, { 0, 2, 1 }
  uselistorder i32 %v2_14918, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32 %v1_14910, { 1, 0, 2 }
  uselistorder i32 %v1_148e4, { 0, 2, 1 }
  uselistorder i32 %v16_148c4, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 0, 2, 1 }
  uselistorder i32* %stack_var_-284, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-28, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 10, 9, 0, 11, 12, 14, 13, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 1, 7, 6, 9, 8, 22, 10, 12, 13, 11, 15, 14, 16, 21, 17, 20, 18, 19, 0 }
  uselistorder i32 (i32, i32*, i32)* @function_14dc0, { 1, 2, 0 }
  uselistorder i32 (i32, %_TYPEDEF_sigset_t*, i32)* @function_1370c, { 1, 2, 3, 4, 0 }
  uselistorder i32 ()* @function_13ef8, { 2, 1, 0, 3, 4 }
  uselistorder i32 -136, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14a5c, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_14a58, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14a50, { 1, 0 }
  uselistorder label %dec_label_pc_14a2c, { 1, 0 }
  uselistorder label %dec_label_pc_14a20, { 1, 0 }
  uselistorder label %dec_label_pc_14950, { 1, 0 }
  uselistorder label %dec_label_pc_148dc, { 1, 0 }
}

define i32 @function_14a68(i32 %arg1) local_unnamed_addr {
dec_label_pc_14a94:
  %stack_var_-8 = alloca i32, align 4
  %v3_14a68 = load i32, i32* @r4, align 4
  store i32 %v3_14a68, i32* %stack_var_-8, align 4
  %v2_14a98 = load i32, i32* @global_var_1eac4.658, align 4
  %v2_14a9c = icmp eq i32 %v2_14a98, 0
  br i1 %v2_14a9c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_14a94
  call void @__pseudo_branch(i32 %v2_14a98)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14a94, %bb
  %v2_14aac = load i32, i32* @global_var_1eac8.660, align 4
  %v2_14ab0 = icmp eq i32 %v2_14aac, 0
  br i1 %v2_14ab0, label %bb12, label %bb13

bb12:                                             ; preds = %.thread
  %v3_14ab4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_14ab4, i32* @r4, align 4
  %v9_14ab4 = load i32, i32* @r0, align 4
  ret i32 %v9_14ab4

bb13:                                             ; preds = %.thread
  call void @__pseudo_branch(i32 %v2_14aac)
  %v2_14ac0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14ac0, i32* @r4, align 4
  %v8_14ac0 = load i32, i32* @r0, align 4
  ret i32 %v8_14ac0

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_14ad4() local_unnamed_addr {
dec_label_pc_14ad4:
  ret i32 0
}

define i32 @function_14adc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_14adc:
  %v1_14adc = load i32, i32* @r0, align 4
  ret i32 %v1_14adc
}

define i32 @function_14ae0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14ae0:
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_14ae0 = load i32, i32* @r4, align 4
  store i32 %v3_14ae0, i32* %stack_var_-12, align 4
  store i32 %arg2, i32* @r4, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_14af0 = call i32 @function_133a0(i32 %arg1, i32 1)
  %v7_14af4 = icmp eq i32 %v2_14af0, -1
  br i1 %v7_14af4, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_14ae0
  %v3_14af8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_14af8, i32* @r4, align 4
  ret i32 %v2_14af0

bb4:                                              ; preds = %dec_label_pc_14ae0
  %v0_14afc = load i32, i32* @r4, align 4
  %v4_14b04 = call i32 @function_135bc(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_1657c.663, i32 0, i32 0), i32 %v0_14afc)
  %v1_14b08 = load i32, i32* %r5.global-to-local, align 4
  %v9_14b08 = icmp eq i32 %v4_14b04, %v1_14b08
  br i1 %v9_14b08, label %bb5, label %bb6

bb5:                                              ; preds = %bb4
  %v3_14b0c = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_14b0c, i32* @r4, align 4
  ret i32 %v4_14b04

bb6:                                              ; preds = %bb4
  %v0_14b10 = call i32 @function_1453c()
  %v0_14b14 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14b14, label %bb7, label %bb8

bb7:                                              ; preds = %bb6
  %v2_14b14 = load i32, i32* @ip, align 4
  %v3_14b14 = load i32, i32* @r5, align 4
  %v4_14b14 = lshr i32 %v2_14b14, %v3_14b14
  %v5_14b14 = sub i32 32, %v3_14b14
  %v6_14b14 = shl i32 %v2_14b14, %v5_14b14
  %v7_14b14 = or i32 %v6_14b14, %v4_14b14
  %v9_14b14 = and i32 %v7_14b14, %v0_14afc
  store i32 %v9_14b14, i32* @r6, align 4
  br label %bb8

bb8:                                              ; preds = %bb6, %bb7
  ret i32 %v0_14b10

; uselistorder directives
  uselistorder i32 %v2_14af0, { 1, 0 }
  uselistorder i1* @cpsr_z, { 7, 0, 9, 8, 4, 5, 1, 2, 3, 6 }
  uselistorder i32 ()* @function_1453c, { 0, 2, 1, 3 }
  uselistorder i32 (i8*, i32)* @function_135bc, { 9, 6, 0, 1, 2, 3, 4, 5, 7, 8 }
  uselistorder i32 (i32, i32)* @function_133a0, { 0, 9, 4, 3, 6, 5, 13, 12, 15, 14, 11, 10, 8, 7, 2, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %bb8, { 1, 0 }
}

define i32 @function_14b18(i32 %arg1) local_unnamed_addr {
dec_label_pc_14b18:
  %v2_14b1c = load i32, i32* @global_var_1eacc.665, align 4
  %v2_14b20 = icmp eq i32 %v2_14b1c, 0
  br i1 %v2_14b20, label %bb2, label %bb

bb:                                               ; preds = %dec_label_pc_14b18
  %v6_14b2c = load i32, i32* @r0, align 4
  ret i32 %v6_14b2c

bb2:                                              ; preds = %dec_label_pc_14b18
  store i32 1, i32* @global_var_1eacc.665, align 4
  store i32 4096, i32* @global_var_1eac0.616, align 4
  ret i32 undef
}

define i32 @function_14b74(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_14b74:
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* @r6, align 4
  %v4_14b78 = mul i32 %arg2, 4
  %v5_14b78 = add i32 %tmp, %v4_14b78
  %v2_14b7c = load i32, i32* %arg3, align 4
  %v2_14b80 = ptrtoint i32* %stack_var_-120 to i32
  %v1_14b84 = add i32 %v5_14b78, 4
  %v9_14b88 = icmp eq i32 %v1_14b84, %v2_14b7c
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg7, i32* @global_var_1eab8.670, align 4
  store i32 %v1_14b84, i32* @global_var_1eabc.672, align 4
  store i32 %arg6, i32* @global_var_1eac8.660, align 4
  store i32 120, i32* @r2, align 4
  br i1 %v9_14b88, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_14b74
  store i32 %v5_14b78, i32* @global_var_1eabc.672, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_14b74, %bb
  %v2_14bc8 = bitcast i32* %stack_var_-120 to i8*
  %v3_14bc8 = call i32 @function_13ad0(i8* %v2_14bc8, i32 0)
  %storemerge.pre = load i32, i32* @global_var_1eabc.672, align 4
  br label %dec_label_pc_14bd8

dec_label_pc_14bd8:                               ; preds = %dec_label_pc_14bd8, %bb41
  %storemerge = phi i32 [ %storemerge.pre, %bb41 ], [ %v4_14bd8, %dec_label_pc_14bd8 ]
  %v1_14bd8 = inttoptr i32 %storemerge to i32*
  %v2_14bd8 = load i32, i32* %v1_14bd8, align 4
  %v4_14bd8 = add i32 %storemerge, 4
  %v2_14bdc = icmp eq i32 %v2_14bd8, 0
  br i1 %v2_14bdc, label %dec_label_pc_14be8, label %dec_label_pc_14bd8

dec_label_pc_14be8:                               ; preds = %dec_label_pc_14bd8
  store i32 %v4_14bd8, i32* @r4, align 4
  %v1_14c0822 = inttoptr i32 %v4_14bd8 to i32*
  %v2_14c0823 = load i32, i32* %v1_14c0822, align 4
  %v2_14c0c25 = icmp eq i32 %v2_14c0823, 0
  br i1 %v2_14c0c25, label %dec_label_pc_14c14, label %dec_label_pc_14bf0

dec_label_pc_14bf0:                               ; preds = %dec_label_pc_14be8, %dec_label_pc_14c08
  %v5_14bf4 = phi i32 [ %v2_14c08, %dec_label_pc_14c08 ], [ %v2_14c0823, %dec_label_pc_14be8 ]
  %v2_14bf0 = icmp ugt i32 %v5_14bf4, 13
  %v7_14bf0 = icmp eq i32 %v5_14bf4, 14
  %v2_14bf4 = xor i1 %v2_14bf0, true
  %v3_14bf4 = or i1 %v7_14bf0, %v2_14bf4
  br i1 %v3_14bf4, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_14bf0
  %v6_14bf4 = and i32 %v5_14bf4, 536870912
  %v7_14bf4 = icmp ne i32 %v6_14bf4, 0
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_14bf0, %bb42
  %v1_14c00 = phi i1 [ %v2_14bf0, %dec_label_pc_14bf0 ], [ %v7_14bf4, %bb42 ]
  %v2_14bf8 = xor i1 %v1_14c00, true
  %v3_14bf8 = or i1 %v7_14bf0, %v2_14bf8
  br i1 %v3_14bf8, label %bb44, label %dec_label_pc_14c08

bb44:                                             ; preds = %bb43
  br label %dec_label_pc_14c08

dec_label_pc_14c08:                               ; preds = %bb43, %bb44
  call void @__pseudo_cond_branch(i1 %v3_14bf8, i32 ptrtoint (i32* @global_var_13ab0.674 to i32))
  %v0_14c04 = load i32, i32* @r4, align 4
  %v1_14c04 = add i32 %v0_14c04, 8
  store i32 %v1_14c04, i32* @r4, align 4
  %v1_14c08 = inttoptr i32 %v1_14c04 to i32*
  %v2_14c08 = load i32, i32* %v1_14c08, align 4
  %v2_14c0c = icmp eq i32 %v2_14c08, 0
  br i1 %v2_14c0c, label %dec_label_pc_14c14, label %dec_label_pc_14bf0

dec_label_pc_14c14:                               ; preds = %dec_label_pc_14c08, %dec_label_pc_14be8
  %v1_14c18 = call i32 @function_15c6c(i32 %v2_14b80)
  store i32 %v1_14c18, i32* @r0, align 4
  %v1_14c1c = call i32 @function_14b18(i32 %v1_14c18)
  store i32 %v1_14c1c, i32* @r0, align 4
  %v2_14c28 = icmp eq i32 %tmp37, 0
  br i1 %v2_14c28, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_14c14
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_14c14, %bb45
  %v0_14c38 = phi i32 [ %tmp37, %dec_label_pc_14c14 ], [ 4096, %bb45 ]
  %v3_14c30 = icmp eq i32 %tmp36, -1
  %v8_14c30 = icmp eq i32 %tmp36, -1
  store i32 ptrtoint (i32* @global_var_1eac0.616 to i32), i32* @r2, align 4
  store i32 %v0_14c38, i32* @global_var_1eac0.616, align 4
  br i1 %v3_14c30, label %dec_label_pc_14c40, label %dec_label_pc_14c68

dec_label_pc_14c40:                               ; preds = %bb46
  %v0_14c40 = call i32 @function_151cc()
  store i32 %v0_14c40, i32* @r0, align 4
  store i32 %v0_14c40, i32* @r4, align 4
  %v0_14c48 = call i32 @function_15174()
  %v0_14c4c = load i32, i32* @r4, align 4
  %v9_14c4c = icmp eq i32 %v0_14c4c, %v0_14c48
  br i1 %v9_14c4c, label %dec_label_pc_14c54, label %dec_label_pc_14c90

dec_label_pc_14c54:                               ; preds = %dec_label_pc_14c40
  %v1_14c54 = call i32 @function_151a0(i32 %v0_14c48)
  store i32 %v1_14c54, i32* @r0, align 4
  store i32 %v1_14c54, i32* @r4, align 4
  %v0_14c5c = call i32 @function_15148()
  %v0_14c60 = load i32, i32* @r4, align 4
  %v9_14c60 = icmp eq i32 %v0_14c60, %v0_14c5c
  br i1 %v9_14c60, label %dec_label_pc_14c68, label %dec_label_pc_14c90

dec_label_pc_14c68:                               ; preds = %dec_label_pc_14c54, %bb46
  store i32 %tmp36, i32* @r2, align 4
  br i1 %v8_14c30, label %dec_label_pc_14cfc, label %dec_label_pc_14c74

dec_label_pc_14c74:                               ; preds = %dec_label_pc_14c68
  %v9_14c78 = icmp eq i32 %tmp36, %tmp35
  br i1 %v9_14c78, label %dec_label_pc_14c80, label %dec_label_pc_14c90

dec_label_pc_14c80:                               ; preds = %dec_label_pc_14c74
  br label %dec_label_pc_14c90

dec_label_pc_14c90:                               ; preds = %dec_label_pc_14c80, %dec_label_pc_14c74, %dec_label_pc_14c54, %dec_label_pc_14c40
  %v2_14c98 = call i32 @function_14ae0(i32 0, i32 32768)
  %v2_14ca4 = call i32 @function_14ae0(i32 1, i32 32770)
  %v2_14cb0 = call i32 @function_14ae0(i32 2, i32 32770)
  br label %dec_label_pc_14cfc

dec_label_pc_14cfc:                               ; preds = %dec_label_pc_14c90, %dec_label_pc_14c68
  %v0_14cc0 = load i32, i32* @r6, align 4
  %v1_14cc0 = inttoptr i32 %v0_14cc0 to i32*
  %v2_14cc0 = load i32, i32* %v1_14cc0, align 4
  store i32 %v2_14cc0, i32* @global_var_1e9f8, align 4
  store i32 %arg5, i32* @global_var_1eac4.658, align 4
  %v2_14cfc = icmp eq i32 %arg4, 0
  br i1 %v2_14cfc, label %dec_label_pc_14d38, label %bb47

bb47:                                             ; preds = %dec_label_pc_14cfc
  br label %dec_label_pc_14d38

dec_label_pc_14d38:                               ; preds = %dec_label_pc_14cfc, %bb47
  call void @__pseudo_branch(i32 %arg4)
  %v1_14d48 = call i32 @function_13a64()
  %v2_14d50 = inttoptr i32 %v1_14d48 to i32*
  store i32 0, i32* %v2_14d50, align 4
  %v0_14d7c = load i32, i32* %r8.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_14d88 = call i32 @function_14830(i32 %v0_14d7c)
  ret i32 %v1_14d88

; uselistorder directives
  uselistorder i32 %v2_14c08, { 1, 0 }
  uselistorder i32 %v1_14c04, { 1, 0 }
  uselistorder i1 %v2_14bf0, { 1, 0 }
  uselistorder i32 %v4_14bd8, { 1, 0, 2 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %tmp36, { 1, 3, 0, 2 }
  uselistorder i32 (i32)* @function_14830, { 0, 7, 6, 4, 5, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_14ae0, { 2, 1, 0 }
  uselistorder i32 32768, { 1, 2, 0 }
  uselistorder i32* @global_var_1eac0.616, { 1, 4, 0, 2, 3 }
  uselistorder i32 4096, { 0, 1, 5, 9, 3, 4, 6, 7, 2, 8, 10, 11 }
  uselistorder i32 536870912, { 1, 0, 2 }
  uselistorder i1 true, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 49, 9, 10, 11, 12, 13, 17, 18, 19, 76, 77, 78, 79, 68, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 20, 21, 96, 97, 98, 50, 67, 15, 16, 66, 14, 99, 33, 32, 55, 61, 56, 62, 53, 60, 54, 65, 100, 22, 101, 102, 23, 24, 25, 103, 69, 70, 26, 27, 104, 71, 72, 28, 29, 105, 73, 74, 30, 31, 52, 106, 107, 63, 108, 34, 57, 35, 36, 51, 37, 38, 39, 109, 110, 111, 112, 58, 113, 114, 115, 116, 117, 118, 119, 120, 44, 121, 45, 46, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 43, 136, 137, 138, 139, 140, 141, 42, 142, 48, 143, 59, 64, 47, 144, 40, 41, 75, 145 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder label %dec_label_pc_14d38, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_14c08, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_14bf0, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @function_14dc0(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14dc0:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %v3_14dc0 = load i32, i32* @r4, align 4
  %v6_14dc0 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_14dc4 = icmp eq i32* %arg2, null
  %v2_14dc8 = ptrtoint i32* %stack_var_-296 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  br i1 %v2_14dc4, label %dec_label_pc_14e34, label %dec_label_pc_14dd8

dec_label_pc_14dd8:                               ; preds = %dec_label_pc_14dc0
  %v2_14ddc = load i32, i32* %arg2, align 4
  %v4_14ddc = add i32 %tmp, 4
  store i32 %v4_14ddc, i32* @r1, align 4
  %v2_14de0 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_14de0, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  store i32 %v2_14ddc, i32* %stack_var_-156, align 4
  %v3_14dec = call i32 @function_13ab0(i32 %v2_14de0, i32 %v4_14ddc, i32 128)
  store i32 %v3_14dec, i32* %r0.global-to-local, align 4
  %v0_14df0 = load i32, i32* @r4, align 4
  %v1_14df0 = add i32 %v0_14df0, 132
  %v2_14df0 = inttoptr i32 %v1_14df0 to i32*
  %v3_14df0 = load i32, i32* %v2_14df0, align 4
  %v1_14df4 = and i32 %v3_14df0, 67108864
  %v2_14df4 = icmp eq i32 %v1_14df4, 0
  br i1 %v2_14df4, label %dec_label_pc_14e08, label %bb

bb:                                               ; preds = %dec_label_pc_14dd8
  br label %dec_label_pc_14e24

dec_label_pc_14e08:                               ; preds = %dec_label_pc_14dd8
  %v1_14e10 = and i32 %v3_14df0, 4
  %v2_14e10 = icmp eq i32 %v1_14e10, 0
  br i1 %v2_14e10, label %bb21, label %bb20

bb20:                                             ; preds = %dec_label_pc_14e08
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_14e08, %bb20
  br label %dec_label_pc_14e24

dec_label_pc_14e24:                               ; preds = %bb, %bb21
  %v2_14e24 = icmp eq i32 %v0_14df0, 0
  %v3_14e28 = ptrtoint i32* %stack_var_-156 to i32
  %.v3_14e28 = select i1 %v2_14e24, i32 0, i32 %v3_14e28
  %v0_14e34.pre = load i32, i32* @r5, align 4
  %v0_14e44.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14e34

dec_label_pc_14e34:                               ; preds = %dec_label_pc_14e24, %dec_label_pc_14dc0
  %v0_14e44 = phi i32 [ %arg1, %dec_label_pc_14dc0 ], [ %v0_14e44.pre, %dec_label_pc_14e24 ]
  %v0_14e34 = phi i32 [ %arg3, %dec_label_pc_14dc0 ], [ %v0_14e34.pre, %dec_label_pc_14e24 ]
  %storemerge = phi i32 [ 0, %dec_label_pc_14dc0 ], [ %.v3_14e28, %dec_label_pc_14e24 ]
  store i32 %storemerge, i32* @r1, align 4
  %v2_14e34 = icmp eq i32 %v0_14e34, 0
  %.v2_14dc8 = select i1 %v2_14e34, i32 0, i32 %v2_14dc8
  store i32 %.v2_14dc8, i32* @r2, align 4
  store i32 %v0_14e44, i32* %r0.global-to-local, align 4
  %v1_14e48 = call i32 @function_14eac(i32 %v0_14e44)
  store i32 %v1_14e48, i32* %r0.global-to-local, align 4
  %v0_14e4c = load i32, i32* @r5, align 4
  %v2_14e4c = icmp eq i32 %v0_14e4c, 0
  br i1 %v2_14e4c, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_14e34
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_14e34, %bb25
  %v0_14e5c.pr = phi i32 [ 0, %dec_label_pc_14e34 ], [ 1, %bb25 ]
  %v1_14e54 = icmp slt i32 %v1_14e48, 0
  br i1 %v1_14e54, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %bb26
  br label %dec_label_pc_14e90

thread-pre-split:                                 ; preds = %bb26
  %v2_14e5c = icmp eq i32 %v0_14e5c.pr, 0
  store i32 %v1_14e48, i32* @r4, align 4
  br i1 %v2_14e5c, label %dec_label_pc_14e90, label %dec_label_pc_14e68

dec_label_pc_14e68:                               ; preds = %thread-pre-split
  %v2_14e68 = load i32, i32* %stack_var_-296, align 4
  store i32 %v0_14e4c, i32* %r0.global-to-local, align 4
  %v2_14e70 = inttoptr i32 %v0_14e4c to i32*
  store i32 %v2_14e68, i32* %v2_14e70, align 4
  %v3_14e70 = load i32, i32* %r0.global-to-local, align 4
  %v4_14e70 = add i32 %v3_14e70, 4
  store i32 %v4_14e70, i32* @r0, align 4
  %v2_14e74 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_14e74, i32* @r1, align 4
  store i32 128, i32* @r2, align 4
  %v3_14e7c = call i32 @function_13ab0(i32 %v4_14e70, i32 %v2_14e74, i32 128)
  store i32 %v3_14e7c, i32* %r0.global-to-local, align 4
  %v1_14e84 = load i32, i32* @r5, align 4
  %v2_14e84 = add i32 %v1_14e84, 136
  %v3_14e84 = inttoptr i32 %v2_14e84 to i32*
  %v1_14e8c = load i32, i32* @r5, align 4
  %v2_14e8c = add i32 %v1_14e8c, 132
  %v3_14e8c = inttoptr i32 %v2_14e8c to i32*
  %v0_14e90.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14e90

dec_label_pc_14e90:                               ; preds = %thread-pre-split.thread, %thread-pre-split, %dec_label_pc_14e68
  %v0_14e90 = phi i32 [ %v1_14e48, %thread-pre-split ], [ %v0_14e90.pre, %dec_label_pc_14e68 ], [ %v1_14e48, %thread-pre-split.thread ]
  store i32 %v0_14e90, i32* %r0.global-to-local, align 4
  store i32 %v3_14dc0, i32* @r4, align 4
  store i32 %v6_14dc0, i32* @r5, align 4
  ret i32 %v0_14e90

; uselistorder directives
  uselistorder i32 %v0_14e90, { 1, 0 }
  uselistorder i32 %v0_14e4c, { 1, 0, 2 }
  uselistorder i32 %v0_14e44, { 1, 0 }
  uselistorder i32* %stack_var_-156, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 6, 4, 5, 2, 7, 1, 0 }
  uselistorder label %dec_label_pc_14e90, { 2, 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_14e24, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @function_14eac(i32 %arg1) local_unnamed_addr {
dec_label_pc_14eac:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14eac = load i32, i32* @r4, align 4
  store i32 %v3_14eac, i32* %stack_var_-8, align 4
  %v1_14eb0 = load i32, i32* @r1, align 4
  %v2_14eb0 = inttoptr i32 %v1_14eb0 to %sigaction*
  %v3_14eb0 = load i32, i32* @r2, align 4
  %v4_14eb0 = inttoptr i32 %v3_14eb0 to %sigaction*
  %v5_14eb0 = call i32 @sigaction(i32 %arg1, %sigaction* %v2_14eb0, %sigaction* %v4_14eb0)
  store i32 %v5_14eb0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_14eb0, -4095
  br i1 %tmp, label %dec_label_pc_14ed0, label %dec_label_pc_14ec0

dec_label_pc_14ec0:                               ; preds = %dec_label_pc_14eac
  %v0_14ec0 = call i32 @function_13a64()
  %v0_14ec4 = load i32, i32* %r4.global-to-local, align 4
  %v1_14ec4 = sub i32 0, %v0_14ec4
  %v2_14ec8 = inttoptr i32 %v0_14ec0 to i32*
  store i32 %v1_14ec4, i32* %v2_14ec8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14ed0

dec_label_pc_14ed0:                               ; preds = %dec_label_pc_14eac, %dec_label_pc_14ec0
  %v0_14ed0 = phi i32 [ %v5_14eb0, %dec_label_pc_14eac ], [ -1, %dec_label_pc_14ec0 ]
  %v2_14ed4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14ed4, i32* %r4.global-to-local, align 4
  ret i32 %v0_14ed0

; uselistorder directives
  uselistorder i32 %v5_14eb0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14ed0, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_14ed8(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_14ed8:
  store i32 %arg1, i32* @r5, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_14f00() local_unnamed_addr {
dec_label_pc_14f00:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %tmp4 = bitcast i32* %stack_var_-72 to %stat*
  %v0_14f10 = load i32, i32* @r0, align 4
  %v4_14f10 = call i32 @fstat(i32 %v0_14f10, %stat* %tmp4)
  store i32 %v4_14f10, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_14f10, -4095
  br i1 %tmp, label %dec_label_pc_14f34, label %dec_label_pc_14f20

dec_label_pc_14f20:                               ; preds = %dec_label_pc_14f00
  %v0_14f20 = call i32 @function_13a64()
  %v0_14f24 = load i32, i32* %r4.global-to-local, align 4
  %v1_14f24 = sub i32 0, %v0_14f24
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_14f2c = inttoptr i32 %v0_14f20 to i32*
  store i32 %v1_14f24, i32* %v2_14f2c, align 4
  br label %dec_label_pc_14f44

dec_label_pc_14f34:                               ; preds = %dec_label_pc_14f00
  %v2_14f34 = icmp eq i32 %v4_14f10, 0
  store i32 85828, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_14f34, i32 ptrtoint (i32* @global_var_1561c.690 to i32))
  br label %dec_label_pc_14f44

dec_label_pc_14f44:                               ; preds = %dec_label_pc_14f20, %dec_label_pc_14f34
  %v0_14f44 = load i32, i32* %r4.global-to-local, align 4
  ret i32 %v0_14f44

; uselistorder directives
  uselistorder i32 %v4_14f10, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 5, 16, 14, 15, 9, 10, 6, 2, 3, 4, 0, 1, 7, 8, 11, 12, 13 }
  uselistorder label %dec_label_pc_14f44, { 1, 0 }
}

define i32 @function_14f50(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14f50:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %v6_14f50 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_14f58 = call i32 @function_14fe4()
  store i32 %v0_14f58, i32* %r6.global-to-local, align 4
  %tmp8 = icmp slt i32 %v0_14f58, 1
  br i1 %tmp8, label %dec_label_pc_14fdc, label %dec_label_pc_14fc8.preheader

dec_label_pc_14fc8.preheader:                     ; preds = %dec_label_pc_14f50
  %v5_14f60 = load i32, i32* @r4, align 4
  %v7_14f60 = add i32 %v5_14f60, %v0_14f58
  store i32 %v7_14f60, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14fc8

dec_label_pc_14f6c:                               ; preds = %dec_label_pc_14fc8
  %v1_14f6c = add i32 %v2_14f7c, 16
  %v2_14f6c = inttoptr i32 %v1_14f6c to i32*
  %v3_14f6c = load i32, i32* %v2_14f6c, align 4
  store i32 %v3_14f6c, i32* @lr, align 4
  %v2_14f70 = inttoptr i32 %v1_14fcc to i32*
  %v3_14f70 = load i32, i32* %v2_14f70, align 4
  store i32 %v3_14f70, i32* %r2.global-to-local, align 4
  %v1_14f74 = add i32 %v2_14f7c, 18
  %v2_14f74 = inttoptr i32 %v1_14f74 to i8*
  %v3_14f74 = load i8, i8* %v2_14f74, align 1
  %v4_14f74 = zext i8 %v3_14f74 to i32
  store i32 %v4_14f74, i32* %ip.global-to-local, align 4
  %v3_14f78 = sdiv i32 %v3_14f6c, 256
  store i32 %v3_14f78, i32* %r3.global-to-local, align 4
  %v1_14f7c = trunc i32 %v3_14f6c to i8
  %v4_14f7c = inttoptr i32 %v1_14fcc to i8*
  store i8 %v1_14f7c, i8* %v4_14f7c, align 1
  %v0_14f80 = load i32, i32* %r2.global-to-local, align 4
  %v1_14f80 = load i32, i32* @r4, align 4
  %v2_14f80 = add i32 %v1_14f80, 4
  %v3_14f80 = inttoptr i32 %v2_14f80 to i32*
  store i32 %v0_14f80, i32* %v3_14f80, align 4
  %v0_14f84 = load i32, i32* %ip.global-to-local, align 4
  %v1_14f84 = trunc i32 %v0_14f84 to i8
  %v2_14f84 = load i32, i32* @r4, align 4
  %v3_14f84 = add i32 %v2_14f84, 10
  %v4_14f84 = inttoptr i32 %v3_14f84 to i8*
  store i8 %v1_14f84, i8* %v4_14f84, align 1
  %v0_14f88 = load i32, i32* %r3.global-to-local, align 4
  %v1_14f88 = trunc i32 %v0_14f88 to i8
  %v2_14f88 = load i32, i32* @r4, align 4
  %v3_14f88 = add i32 %v2_14f88, 9
  %v4_14f88 = inttoptr i32 %v3_14f88 to i8*
  store i8 %v1_14f88, i8* %v4_14f88, align 1
  %v0_14f8c = load i32, i32* @r4, align 4
  %v1_14f8c = add i32 %v0_14f8c, 8
  %v2_14f8c = inttoptr i32 %v1_14f8c to i8*
  %v3_14f8c = load i8, i8* %v2_14f8c, align 1
  %v4_14f8c = zext i8 %v3_14f8c to i32
  store i32 %v4_14f8c, i32* %r2.global-to-local, align 4
  %v0_14f90 = load i32, i32* @r5, align 4
  %v1_14f90 = add i32 %v0_14f90, 1
  %v2_14f90 = inttoptr i32 %v1_14f90 to i8*
  %v3_14f90 = load i8, i8* %v2_14f90, align 1
  %v4_14f90 = zext i8 %v3_14f90 to i32
  store i32 %v4_14f90, i32* %r3.global-to-local, align 4
  %v4_14f94 = mul nuw nsw i32 %v4_14f90, 256
  %v5_14f94 = or i32 %v4_14f94, %v4_14f8c
  %v1_14f98 = add nsw i32 %v5_14f94, -19
  store i32 %v1_14f98, i32* @r2, align 4
  %v3_14f9c = call i32 @function_13ac0(i32 %v1_14fd4, i32 %v1_14fd0, i32 %v1_14f98)
  %v0_14fa0 = load i32, i32* @r4, align 4
  %v1_14fa0 = add i32 %v0_14fa0, 8
  %v2_14fa0 = inttoptr i32 %v1_14fa0 to i8*
  %v3_14fa0 = load i8, i8* %v2_14fa0, align 1
  %v4_14fa0 = zext i8 %v3_14fa0 to i32
  store i32 %v4_14fa0, i32* %r3.global-to-local, align 4
  %v0_14fa4 = load i32, i32* @r5, align 4
  %v1_14fa4 = add i32 %v0_14fa4, 1
  %v2_14fa4 = inttoptr i32 %v1_14fa4 to i8*
  %v3_14fa4 = load i8, i8* %v2_14fa4, align 1
  %v4_14fa4 = zext i8 %v3_14fa4 to i32
  store i32 %v0_14fa0, i32* @r0, align 4
  %v4_14fac = mul nuw nsw i32 %v4_14fa4, 256
  %v5_14fac = or i32 %v4_14fac, %v4_14fa0
  store i32 %v5_14fac, i32* @r2, align 4
  store i32 %v0_14fa0, i32* @r1, align 4
  %v3_14fb4 = call i32 @function_13ac0(i32 %v0_14fa0, i32 %v0_14fa0, i32 %v5_14fac)
  %v0_14fb8 = load i32, i32* @r4, align 4
  %v1_14fb8 = add i32 %v0_14fb8, 8
  %v2_14fb8 = inttoptr i32 %v1_14fb8 to i8*
  %v3_14fb8 = load i8, i8* %v2_14fb8, align 1
  %v4_14fb8 = zext i8 %v3_14fb8 to i32
  store i32 %v4_14fb8, i32* %r3.global-to-local, align 4
  %v0_14fbc = load i32, i32* @r5, align 4
  %v1_14fbc = add i32 %v0_14fbc, 1
  %v2_14fbc = inttoptr i32 %v1_14fbc to i8*
  %v3_14fbc = load i8, i8* %v2_14fbc, align 1
  %v4_14fbc = zext i8 %v3_14fbc to i32
  store i32 %v4_14fbc, i32* @r2, align 4
  %v4_14fc0 = mul nuw nsw i32 %v4_14fbc, 256
  %v5_14fc0 = or i32 %v4_14fc0, %v4_14fb8
  store i32 %v5_14fc0, i32* %r3.global-to-local, align 4
  %v2_14fc4 = add i32 %v5_14fc0, %v0_14fb8
  store i32 %v2_14fc4, i32* @r4, align 4
  %v1_14fc8.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14fc8

dec_label_pc_14fc8:                               ; preds = %dec_label_pc_14fc8.preheader, %dec_label_pc_14f6c
  %v1_14fc8 = phi i32 [ %v7_14f60, %dec_label_pc_14fc8.preheader ], [ %v1_14fc8.pre, %dec_label_pc_14f6c ]
  %v2_14f7c = phi i32 [ %v5_14f60, %dec_label_pc_14fc8.preheader ], [ %v2_14fc4, %dec_label_pc_14f6c ]
  %v3_14fc8 = icmp ult i32 %v2_14f7c, %v1_14fc8
  %v1_14fcc = add i32 %v2_14f7c, 8
  store i32 %v1_14fcc, i32* @r5, align 4
  %v1_14fd0 = add i32 %v2_14f7c, 19
  store i32 %v1_14fd0, i32* @r1, align 4
  %v1_14fd4 = add i32 %v2_14f7c, 11
  store i32 %v1_14fd4, i32* @r0, align 4
  br i1 %v3_14fc8, label %dec_label_pc_14f6c, label %dec_label_pc_14fdc.loopexit

dec_label_pc_14fdc.loopexit:                      ; preds = %dec_label_pc_14fc8
  %v0_14fdc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14fdc

dec_label_pc_14fdc:                               ; preds = %dec_label_pc_14f50, %dec_label_pc_14fdc.loopexit
  %v0_14fdc = phi i32 [ %v0_14fdc.pre, %dec_label_pc_14fdc.loopexit ], [ %v0_14f58, %dec_label_pc_14f50 ]
  store i32 %v6_14f50, i32* @r5, align 4
  ret i32 %v0_14fdc

; uselistorder directives
  uselistorder i32 %v1_14fd4, { 1, 0 }
  uselistorder i32 %v1_14fd0, { 1, 0 }
  uselistorder i32 %v1_14fcc, { 2, 1, 0 }
  uselistorder i32 %v2_14f7c, { 4, 3, 2, 5, 1, 0 }
  uselistorder i32 %v0_14fa0, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v3_14f6c, { 1, 0, 2 }
  uselistorder i32 %v5_14f60, { 1, 0 }
  uselistorder i32 %v0_14f58, { 1, 0, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @function_13ac0, { 7, 6, 5, 8, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_14fdc, { 1, 0 }
  uselistorder label %dec_label_pc_14fc8, { 1, 0 }
}

define i32 @function_14fe4() local_unnamed_addr {
dec_label_pc_14fe4:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_14fe8 = load i32, i32* @r4, align 4
  %v9_14fe8 = load i32, i32* @r6, align 4
  %v0_14fec = load i32, i32* @r2, align 4
  %v1_14fec = add i32 %v0_14fec, 6
  %v2_14ff4 = ptrtoint i32* %stack_var_-60 to i32
  %v1_14ff8 = and i32 %v1_14fec, -4
  store i32 %v1_14ff8, i32* %r3.global-to-local, align 4
  %v2_14ffc = sub i32 %v2_14ff4, %v1_14ff8
  %v0_15000 = load i32, i32* @r1, align 4
  store i32 %v0_15000, i32* %r8.global-to-local, align 4
  store i32 %v0_14fec, i32* %stack_var_-60, align 4
  store i32 %v2_14ffc, i32* %sl.global-to-local, align 4
  %v0_1500c = load i32, i32* @r0, align 4
  %v1_15010 = inttoptr i32 %v2_14ffc to %linux_dirent64*
  store i32 %v2_14ffc, i32* %r1.global-to-local, align 4
  %v5_15014 = call i32 @getdents64(i32 %v0_1500c, %linux_dirent64* %v1_15010, i32 %v0_14fec)
  store i32 %v5_15014, i32* @r6, align 4
  %tmp = icmp ult i32 %v5_15014, -4095
  br i1 %tmp, label %dec_label_pc_15038, label %dec_label_pc_15024

dec_label_pc_15024:                               ; preds = %dec_label_pc_14fe4
  %v0_15024 = call i32 @function_13a64()
  %v0_15028 = load i32, i32* @r6, align 4
  %v1_15028 = sub i32 0, %v0_15028
  store i32 %v1_15028, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r6.global-to-local, align 4
  %v2_15030 = inttoptr i32 %v0_15024 to i32*
  store i32 %v1_15028, i32* %v2_15030, align 4
  %v0_15040.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15040

dec_label_pc_15038:                               ; preds = %dec_label_pc_14fe4
  br i1 false, label %dec_label_pc_15040, label %dec_label_pc_15048

dec_label_pc_15040:                               ; preds = %dec_label_pc_15038, %dec_label_pc_15024
  %v0_15040 = phi i32 [ -1, %dec_label_pc_15038 ], [ %v0_15040.pre, %dec_label_pc_15024 ]
  store i32 %v0_15040, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1513c

dec_label_pc_15048:                               ; preds = %dec_label_pc_15038
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_15050 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_15050, i32* @r5, align 4
  %v0_15054 = load i32, i32* @sp, align 4
  store i32 %v0_15054, i32* @r4, align 4
  br label %dec_label_pc_15118

dec_label_pc_15064:                               ; preds = %dec_label_pc_15118
  %v2_15130 = add i32 %v3_1511c, %v0_15130
  %v1_15064 = add i32 %v0_15068, 17
  %v2_15064 = inttoptr i32 %v1_15064 to i8*
  %v3_15064 = load i8, i8* %v2_15064, align 1
  %v4_15064 = zext i8 %v3_15064 to i32
  %v2_15068 = inttoptr i32 %v1_15124 to i8*
  %v3_15068 = load i8, i8* %v2_15068, align 1
  %v4_15068 = zext i8 %v3_15068 to i32
  %v4_1506c = mul nuw nsw i32 %v4_15064, 256
  %v5_1506c = or i32 %v4_15068, %v4_1506c
  %v1_15070 = add nuw nsw i32 %v5_1506c, 3
  %v1_15074 = and i32 %v1_15070, 131068
  store i32 %v1_15074, i32* %r3.global-to-local, align 4
  %v2_15078 = add i32 %v1_15074, %v2_150b8
  store i32 %v2_15078, i32* %sb.global-to-local, align 4
  %v9_1507c = icmp eq i32 %v2_15078, %v2_15130
  %v1_15080 = and i32 %v1_15070, 128
  %v2_15084 = icmp eq i32 %v1_15080, 0
  %v3_15084 = or i1 %v9_1507c, %v2_15084
  br i1 %v3_15084, label %dec_label_pc_150b8, label %dec_label_pc_15088

dec_label_pc_15088:                               ; preds = %dec_label_pc_15064
  store i32 %stack_var_-52.0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_15098 = call i32 @function_151f8(i32 %v0_1500c, i32 %stack_var_-52.0, i32 %stack_var_-48.0, i32 0)
  %v0_1509c = load i32, i32* @r5, align 4
  %v1_1509c = load i32, i32* %r8.global-to-local, align 4
  %v9_1509c = icmp eq i32 %v0_1509c, %v1_1509c
  br i1 %v9_1509c, label %dec_label_pc_150a4, label %dec_label_pc_15138

dec_label_pc_150a4:                               ; preds = %dec_label_pc_15088
  %v0_150a4 = call i32 @function_13a64()
  store i32 22, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_150b0 = inttoptr i32 %v0_150a4 to i32*
  store i32 22, i32* %v2_150b0, align 4
  %v0_1513c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1513c

dec_label_pc_150b8:                               ; preds = %dec_label_pc_15064
  %v3_1508011 = udiv i32 %v1_15070, 256
  %v1_150b8 = trunc i32 %v3_1508011 to i8
  %v3_150b8 = add i32 %v2_150b8, 17
  %v4_150b8 = inttoptr i32 %v3_150b8 to i8*
  store i8 %v1_150b8, i8* %v4_150b8, align 1
  %v0_150bc = load i32, i32* %r3.global-to-local, align 4
  %v1_150bc = trunc i32 %v0_150bc to i8
  %v2_150bc = load i32, i32* @r5, align 4
  %v3_150bc = add i32 %v2_150bc, 16
  %v4_150bc = inttoptr i32 %v3_150bc to i8*
  store i8 %v1_150bc, i8* %v4_150bc, align 1
  %v0_150c0 = load i32, i32* @r4, align 4
  %v1_150c0 = add i32 %v0_150c0, 8
  %v1_150c4 = inttoptr i32 %v1_150c0 to i32*
  %v2_150c4 = load i32, i32* %v1_150c4, align 4
  %v3_150c4 = add i32 %v0_150c0, 12
  %v4_150c4 = inttoptr i32 %v3_150c4 to i32*
  %v5_150c4 = load i32, i32* %v4_150c4, align 4
  store i32 %v5_150c4, i32* %r3.global-to-local, align 4
  %v1_150d0 = inttoptr i32 %v0_150c0 to i32*
  %v2_150d0 = load i32, i32* %v1_150d0, align 4
  %v3_150d0 = add i32 %v0_150c0, 4
  %v4_150d0 = inttoptr i32 %v3_150d0 to i32*
  %v5_150d0 = load i32, i32* %v4_150d0, align 4
  store i32 %v5_150d0, i32* %r3.global-to-local, align 4
  %v0_150d4 = load i32, i32* @r5, align 4
  %v1_150d4 = inttoptr i32 %v0_150d4 to i32*
  store i32 %v2_150d0, i32* %v1_150d4, align 4
  %v3_150d4 = add i32 %v0_150d4, 4
  %v4_150d4 = inttoptr i32 %v3_150d4 to i32*
  %v5_150d4 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_150d4, i32* %v4_150d4, align 4
  %v0_150d8 = load i32, i32* @r4, align 4
  %v1_150d8 = add i32 %v0_150d8, 8
  %v1_150dc = inttoptr i32 %v1_150d8 to i32*
  %v2_150dc = load i32, i32* %v1_150dc, align 4
  %v3_150dc = add i32 %v0_150d8, 12
  %v4_150dc = inttoptr i32 %v3_150dc to i32*
  %v5_150dc = load i32, i32* %v4_150dc, align 4
  store i32 %v5_150dc, i32* %r3.global-to-local, align 4
  %v1_150e0 = load i32, i32* @r5, align 4
  %v2_150e0 = add i32 %v1_150e0, 8
  %v3_150e0 = inttoptr i32 %v2_150e0 to i32*
  store i32 %v2_150dc, i32* %v3_150e0, align 4
  %v0_150e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_150e4 = load i32, i32* @r5, align 4
  %v2_150e4 = add i32 %v1_150e4, 12
  %v3_150e4 = inttoptr i32 %v2_150e4 to i32*
  store i32 %v0_150e4, i32* %v3_150e4, align 4
  %v0_150e8 = load i32, i32* @r4, align 4
  %v1_150e8 = add i32 %v0_150e8, 18
  %v2_150e8 = inttoptr i32 %v1_150e8 to i8*
  %v3_150e8 = load i8, i8* %v2_150e8, align 1
  %v4_150e8 = zext i8 %v3_150e8 to i32
  store i32 %v4_150e8, i32* %r3.global-to-local, align 4
  %v2_150ec = load i32, i32* @r5, align 4
  %v3_150ec = add i32 %v2_150ec, 18
  %v4_150ec = inttoptr i32 %v3_150ec to i8*
  store i8 %v3_150e8, i8* %v4_150ec, align 1
  %v0_150f0 = load i32, i32* @r4, align 4
  %v1_150f0 = add i32 %v0_150f0, 16
  %v2_150f0 = inttoptr i32 %v1_150f0 to i8*
  %v3_150f0 = load i8, i8* %v2_150f0, align 1
  %v4_150f0 = zext i8 %v3_150f0 to i32
  %v0_150f4 = load i32, i32* %r7.global-to-local, align 4
  %v1_150f4 = add i32 %v0_150f4, 1
  %v2_150f4 = inttoptr i32 %v1_150f4 to i8*
  %v3_150f4 = load i8, i8* %v2_150f4, align 1
  %v4_150f4 = zext i8 %v3_150f4 to i32
  store i32 %v4_150f4, i32* %r3.global-to-local, align 4
  %v4_150f8 = mul nuw nsw i32 %v4_150f4, 256
  %v5_150f8 = or i32 %v4_150f8, %v4_150f0
  %v1_150fc = add nsw i32 %v5_150f8, -19
  store i32 %v1_150fc, i32* @r2, align 4
  %v3_15100 = call i32 @function_13ab0(i32 %v1_15128, i32 %v1_1512c, i32 %v1_150fc)
  %v0_15104 = load i32, i32* @r4, align 4
  %v1_15104 = add i32 %v0_15104, 16
  %v2_15104 = inttoptr i32 %v1_15104 to i8*
  %v3_15104 = load i8, i8* %v2_15104, align 1
  %v4_15104 = zext i8 %v3_15104 to i32
  store i32 %v4_15104, i32* %r3.global-to-local, align 4
  %v0_15108 = load i32, i32* %r7.global-to-local, align 4
  %v1_15108 = add i32 %v0_15108, 1
  %v2_15108 = inttoptr i32 %v1_15108 to i8*
  %v3_15108 = load i8, i8* %v2_15108, align 1
  %v4_15108 = zext i8 %v3_15108 to i32
  %v4_1510c = mul nuw nsw i32 %v4_15108, 256
  %v5_1510c = or i32 %v4_1510c, %v4_15104
  store i32 %v5_1510c, i32* %r3.global-to-local, align 4
  %v2_15110 = add i32 %v5_1510c, %v0_15104
  store i32 %v2_15110, i32* @r4, align 4
  %v0_15114 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_15114, i32* @r5, align 4
  %v1_15118.pre = load i32, i32* @r6, align 4
  %v0_15130.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_15118

dec_label_pc_15118:                               ; preds = %dec_label_pc_15048, %dec_label_pc_150b8
  %stack_var_-52.0 = phi i32 [ -1, %dec_label_pc_15048 ], [ %v2_150c4, %dec_label_pc_150b8 ]
  %v0_15130 = phi i32 [ %v0_15050, %dec_label_pc_15048 ], [ %v0_15130.pre, %dec_label_pc_150b8 ]
  %v2_150b8 = phi i32 [ %v0_15050, %dec_label_pc_15048 ], [ %v0_15114, %dec_label_pc_150b8 ]
  %v0_15068 = phi i32 [ %v0_15054, %dec_label_pc_15048 ], [ %v2_15110, %dec_label_pc_150b8 ]
  %v1_15118 = phi i32 [ %v5_15014, %dec_label_pc_15048 ], [ %v1_15118.pre, %dec_label_pc_150b8 ]
  %stack_var_-48.0 = phi i32 [ -1, %dec_label_pc_15048 ], [ %v5_150c4, %dec_label_pc_150b8 ]
  %v0_15118 = load i32, i32* %sl.global-to-local, align 4
  %v2_15118 = add i32 %v0_15118, %v1_15118
  store i32 %v2_15118, i32* %r3.global-to-local, align 4
  %v3_1511c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_1511c, i32* @r2, align 4
  %v3_15120 = icmp ult i32 %v0_15068, %v2_15118
  %v1_15124 = add i32 %v0_15068, 16
  store i32 %v1_15124, i32* %r7.global-to-local, align 4
  %v1_15128 = add i32 %v2_150b8, 19
  store i32 %v1_15128, i32* @r0, align 4
  %v1_1512c = add i32 %v0_15068, 19
  store i32 %v1_1512c, i32* @r1, align 4
  br i1 %v3_15120, label %dec_label_pc_15064, label %dec_label_pc_15138

dec_label_pc_15138:                               ; preds = %dec_label_pc_15118, %dec_label_pc_15088
  %v1_15138 = phi i32 [ %v0_1509c, %dec_label_pc_15088 ], [ %v2_150b8, %dec_label_pc_15118 ]
  %v0_15138 = phi i32 [ %v1_1509c, %dec_label_pc_15088 ], [ %v0_15130, %dec_label_pc_15118 ]
  %v2_15138 = sub i32 %v1_15138, %v0_15138
  store i32 %v2_15138, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1513c

dec_label_pc_1513c:                               ; preds = %dec_label_pc_150a4, %dec_label_pc_15040, %dec_label_pc_15138
  %v0_1513c = phi i32 [ %v0_1513c.pre, %dec_label_pc_150a4 ], [ %v0_15040, %dec_label_pc_15040 ], [ %v2_15138, %dec_label_pc_15138 ]
  store i32 %v3_14fe8, i32* @r4, align 4
  store i32 %v9_14fe8, i32* %r6.global-to-local, align 4
  ret i32 %v0_1513c

; uselistorder directives
  uselistorder i32 %v1_1512c, { 1, 0 }
  uselistorder i32 %v1_15128, { 1, 0 }
  uselistorder i32 %v1_15124, { 1, 0 }
  uselistorder i32 %v3_1511c, { 1, 0 }
  uselistorder i32 %v0_15068, { 2, 1, 3, 0 }
  uselistorder i32 %v2_150b8, { 0, 3, 1, 2 }
  uselistorder i32 %v0_150c0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_15050, { 1, 0, 2 }
  uselistorder i32 %v5_15014, { 1, 0, 2 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 14, 15, 16 }
  uselistorder i32 (i32, i32, i32)* @function_13ab0, { 5, 1, 0, 3, 7, 6, 4, 2 }
  uselistorder i32 128, { 12, 13, 36, 14, 37, 26, 17, 18, 19, 32, 2, 33, 20, 21, 22, 23, 24, 29, 3, 27, 4, 28, 5, 15, 16, 30, 31, 7, 0, 1, 8, 9, 10, 34, 6, 35, 25, 11 }
  uselistorder i32* @sp, { 4, 5, 1, 6, 0, 7, 2, 8, 3 }
  uselistorder i32* @r6, { 3, 116, 117, 118, 425, 427, 426, 356, 357, 316, 317, 318, 319, 320, 321, 322, 323, 343, 358, 359, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 324, 325, 28, 27, 29, 30, 31, 32, 33, 326, 327, 328, 329, 330, 331, 332, 333, 334, 340, 341, 342, 335, 336, 337, 338, 339, 4, 99, 2, 100, 101, 1, 102, 103, 278, 279, 280, 0, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 104, 105, 106, 107, 5, 108, 109, 110, 111, 112, 15, 113, 114, 115, 137, 138, 139, 140, 14, 141, 142, 143, 6, 144, 145, 146, 7, 147, 8, 148, 9, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 344, 347, 345, 346, 348, 349, 16, 350, 351, 352, 353, 354, 355, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 10, 370, 371, 372, 373, 374, 375, 377, 11, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 12, 13, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424 }
  uselistorder label %dec_label_pc_1513c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15118, { 1, 0 }
}

define i32 @function_15148() local_unnamed_addr {
dec_label_pc_15148:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15148 = load i32, i32* @r4, align 4
  store i32 %v3_15148, i32* %stack_var_-8, align 4
  %v0_15150 = load i32, i32* @r0, align 4
  store i32 %v0_15150, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_15150, -4095
  br i1 %tmp, label %dec_label_pc_1516c, label %dec_label_pc_1515c

dec_label_pc_1515c:                               ; preds = %dec_label_pc_15148
  %v0_1515c = call i32 @function_13a64()
  %v0_15160 = load i32, i32* %r4.global-to-local, align 4
  %v1_15160 = sub i32 0, %v0_15160
  %v2_15164 = inttoptr i32 %v0_1515c to i32*
  store i32 %v1_15160, i32* %v2_15164, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_15170.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1516c

dec_label_pc_1516c:                               ; preds = %dec_label_pc_15148, %dec_label_pc_1515c
  %v2_15170 = phi i32 [ %v3_15148, %dec_label_pc_15148 ], [ %v2_15170.pre, %dec_label_pc_1515c ]
  %v0_1516c = phi i32 [ %v0_15150, %dec_label_pc_15148 ], [ -1, %dec_label_pc_1515c ]
  store i32 %v2_15170, i32* @r4, align 4
  ret i32 %v0_1516c

; uselistorder directives
  uselistorder i32 %v0_15150, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1516c, { 1, 0 }
}

define i32 @function_15174() local_unnamed_addr {
dec_label_pc_15174:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15174 = load i32, i32* @r4, align 4
  store i32 %v3_15174, i32* %stack_var_-8, align 4
  %v0_1517c = load i32, i32* @r0, align 4
  store i32 %v0_1517c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1517c, -4095
  br i1 %tmp, label %dec_label_pc_15198, label %dec_label_pc_15188

dec_label_pc_15188:                               ; preds = %dec_label_pc_15174
  %v0_15188 = call i32 @function_13a64()
  %v0_1518c = load i32, i32* %r4.global-to-local, align 4
  %v1_1518c = sub i32 0, %v0_1518c
  %v2_15190 = inttoptr i32 %v0_15188 to i32*
  store i32 %v1_1518c, i32* %v2_15190, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1519c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15198

dec_label_pc_15198:                               ; preds = %dec_label_pc_15174, %dec_label_pc_15188
  %v2_1519c = phi i32 [ %v3_15174, %dec_label_pc_15174 ], [ %v2_1519c.pre, %dec_label_pc_15188 ]
  %v0_15198 = phi i32 [ %v0_1517c, %dec_label_pc_15174 ], [ -1, %dec_label_pc_15188 ]
  store i32 %v2_1519c, i32* @r4, align 4
  ret i32 %v0_15198

; uselistorder directives
  uselistorder i32 %v0_1517c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15198, { 1, 0 }
}

define i32 @function_151a0(i32 %arg1) local_unnamed_addr {
dec_label_pc_151a0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_151a0 = load i32, i32* @r4, align 4
  store i32 %v3_151a0, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_151c4, label %dec_label_pc_151b4

dec_label_pc_151b4:                               ; preds = %dec_label_pc_151a0
  %v0_151b4 = call i32 @function_13a64()
  %v0_151b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_151b8 = sub i32 0, %v0_151b8
  %v2_151bc = inttoptr i32 %v0_151b4 to i32*
  store i32 %v1_151b8, i32* %v2_151bc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_151c8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_151c4

dec_label_pc_151c4:                               ; preds = %dec_label_pc_151a0, %dec_label_pc_151b4
  %v2_151c8 = phi i32 [ %v3_151a0, %dec_label_pc_151a0 ], [ %v2_151c8.pre, %dec_label_pc_151b4 ]
  %v0_151c4 = phi i32 [ %arg1, %dec_label_pc_151a0 ], [ -1, %dec_label_pc_151b4 ]
  store i32 %v2_151c8, i32* %r4.global-to-local, align 4
  ret i32 %v0_151c4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_151c4, { 1, 0 }
}

define i32 @function_151cc() local_unnamed_addr {
dec_label_pc_151cc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_151cc = load i32, i32* @r4, align 4
  store i32 %v3_151cc, i32* %stack_var_-8, align 4
  %v0_151d4 = load i32, i32* @r0, align 4
  store i32 %v0_151d4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_151d4, -4095
  br i1 %tmp, label %dec_label_pc_151f0, label %dec_label_pc_151e0

dec_label_pc_151e0:                               ; preds = %dec_label_pc_151cc
  %v0_151e0 = call i32 @function_13a64()
  %v0_151e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_151e4 = sub i32 0, %v0_151e4
  %v2_151e8 = inttoptr i32 %v0_151e0 to i32*
  store i32 %v1_151e4, i32* %v2_151e8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_151f4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_151f0

dec_label_pc_151f0:                               ; preds = %dec_label_pc_151cc, %dec_label_pc_151e0
  %v2_151f4 = phi i32 [ %v3_151cc, %dec_label_pc_151cc ], [ %v2_151f4.pre, %dec_label_pc_151e0 ]
  %v0_151f0 = phi i32 [ %v0_151d4, %dec_label_pc_151cc ], [ -1, %dec_label_pc_151e0 ]
  store i32 %v2_151f4, i32* %r4.global-to-local, align 4
  ret i32 %v0_151f0

; uselistorder directives
  uselistorder i32 %v0_151d4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_151f0, { 1, 0 }
}

define i32 @function_151f8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_151f8:
  %r4.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1523c, label %dec_label_pc_15228

dec_label_pc_15228:                               ; preds = %dec_label_pc_151f8
  %v0_15228 = call i32 @function_13a64()
  %v0_1522c = load i32, i32* %r4.global-to-local, align 4
  %v1_1522c = sub i32 0, %v0_1522c
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_15234 = inttoptr i32 %v0_15228 to i32*
  store i32 %v1_1522c, i32* %v2_15234, align 4
  %v0_15244.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15244

dec_label_pc_1523c:                               ; preds = %dec_label_pc_151f8
  %v2_1523c = icmp eq i32 %arg1, 0
  br i1 %v2_1523c, label %dec_label_pc_15250, label %dec_label_pc_15244

dec_label_pc_15244:                               ; preds = %dec_label_pc_1523c, %dec_label_pc_15228
  %v0_15244 = phi i32 [ %arg1, %dec_label_pc_1523c ], [ %v0_15244.pre, %dec_label_pc_15228 ]
  br label %dec_label_pc_15254

dec_label_pc_15250:                               ; preds = %dec_label_pc_1523c
  br label %dec_label_pc_15254

dec_label_pc_15254:                               ; preds = %dec_label_pc_15244, %dec_label_pc_15250
  %v14_15258 = phi i32 [ %v0_15244, %dec_label_pc_15244 ], [ %tmp9, %dec_label_pc_15250 ]
  ret i32 %v14_15258

; uselistorder directives
  uselistorder i32 %arg1, { 1, 3, 0, 2 }
  uselistorder label %dec_label_pc_15254, { 1, 0 }
}

define i32 @function_1525c(%timespec* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1525c:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to %timespec*
  %stack_var_-8 = alloca i32, align 4
  %v3_1525c = load i32, i32* @r4, align 4
  store i32 %v3_1525c, i32* %stack_var_-8, align 4
  %v6_15260 = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp)
  store i32 %v6_15260, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v6_15260, -4095
  br i1 %tmp6, label %dec_label_pc_15280, label %dec_label_pc_15270

dec_label_pc_15270:                               ; preds = %dec_label_pc_1525c
  %v0_15270 = call i32 @function_13a64()
  %v0_15274 = load i32, i32* %r4.global-to-local, align 4
  %v1_15274 = sub i32 0, %v0_15274
  %v2_15278 = inttoptr i32 %v0_15270 to i32*
  store i32 %v1_15274, i32* %v2_15278, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15280

dec_label_pc_15280:                               ; preds = %dec_label_pc_1525c, %dec_label_pc_15270
  %v0_15280 = phi i32 [ %v6_15260, %dec_label_pc_1525c ], [ -1, %dec_label_pc_15270 ]
  %v2_15284 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15284, i32* %r4.global-to-local, align 4
  ret i32 %v0_15280

; uselistorder directives
  uselistorder i32 %v6_15260, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15280, { 1, 0 }
}

define i32 @function_15288(i32 %arg1) local_unnamed_addr {
dec_label_pc_15288:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_15288 = load i32, i32* @r4, align 4
  store i32 %v3_15288, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1ead8.692 to i32), i32* %r4.global-to-local, align 4
  %v2_15290 = load i32, i32* @global_var_1ead8.692, align 4
  %v2_15294 = icmp eq i32 %v2_15290, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_15294, label %dec_label_pc_152a4, label %dec_label_pc_152b0

dec_label_pc_152a4:                               ; preds = %dec_label_pc_15288
  %v2_152a4 = call i32 @function_15c90(i32* null)
  %v1_152a8 = icmp slt i32 %v2_152a4, 0
  br i1 %v1_152a8, label %dec_label_pc_152d0, label %dec_label_pc_152b0thread-pre-split

dec_label_pc_152b0thread-pre-split:               ; preds = %dec_label_pc_152a4
  %v0_152b4.pr = load i32, i32* %r5.global-to-local, align 4
  %v2_152b0.pre = load i32, i32* @global_var_1ead8.692, align 4
  br label %dec_label_pc_152b0

dec_label_pc_152b0:                               ; preds = %dec_label_pc_152b0thread-pre-split, %dec_label_pc_15288
  %v2_152b0 = phi i32 [ %v2_152b0.pre, %dec_label_pc_152b0thread-pre-split ], [ %v2_15290, %dec_label_pc_15288 ]
  %v1_152bc = phi i32 [ %v0_152b4.pr, %dec_label_pc_152b0thread-pre-split ], [ %arg1, %dec_label_pc_15288 ]
  %v2_152b4 = icmp eq i32 %v1_152bc, 0
  store i32 %v2_152b0, i32* %r4.global-to-local, align 4
  br i1 %v2_152b4, label %dec_label_pc_152d4, label %dec_label_pc_152c4

dec_label_pc_152c4:                               ; preds = %dec_label_pc_152b0
  %v2_152bc = add i32 %v1_152bc, %v2_152b0
  %v1_152c4 = inttoptr i32 %v2_152bc to i32*
  %v2_152c4 = call i32 @function_15c90(i32* %v1_152c4)
  %v1_152c8 = icmp slt i32 %v2_152c4, 0
  br i1 %v1_152c8, label %dec_label_pc_152d0, label %dec_label_pc_152c4.dec_label_pc_152d4_crit_edge

dec_label_pc_152c4.dec_label_pc_152d4_crit_edge:  ; preds = %dec_label_pc_152c4
  %v0_152d4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_152d4

dec_label_pc_152d0:                               ; preds = %dec_label_pc_152c4, %dec_label_pc_152a4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_152d4

dec_label_pc_152d4:                               ; preds = %dec_label_pc_152c4.dec_label_pc_152d4_crit_edge, %dec_label_pc_152b0, %dec_label_pc_152d0
  %v0_152d4 = phi i32 [ %v0_152d4.pre, %dec_label_pc_152c4.dec_label_pc_152d4_crit_edge ], [ %v2_152b0, %dec_label_pc_152b0 ], [ -1, %dec_label_pc_152d0 ]
  %v2_152d8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_152d8, i32* @r4, align 4
  ret i32 %v0_152d4

; uselistorder directives
  uselistorder i32 %v2_152b0, { 1, 0, 2 }
  uselistorder i32* null, { 0, 3, 7, 39, 40, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 19, 20, 21, 2, 22, 26, 25, 24, 23, 38, 6, 27, 28, 29, 36, 30, 31, 32, 33, 34, 35, 5, 37 }
  uselistorder label %dec_label_pc_152d4, { 2, 0, 1 }
}

define i32 @function_152e0(%tms* %arg1) local_unnamed_addr {
dec_label_pc_152e0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_152e0 = load i32, i32* @r4, align 4
  store i32 %v3_152e0, i32* %stack_var_-8, align 4
  %v3_152e4 = call i32 @times(%tms* %arg1)
  store i32 %v3_152e4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_152e4, -4095
  br i1 %tmp, label %dec_label_pc_15304, label %dec_label_pc_152f4

dec_label_pc_152f4:                               ; preds = %dec_label_pc_152e0
  %v0_152f4 = call i32 @function_13a64()
  %v0_152f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_152f8 = sub i32 0, %v0_152f8
  %v2_152fc = inttoptr i32 %v0_152f4 to i32*
  store i32 %v1_152f8, i32* %v2_152fc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15304

dec_label_pc_15304:                               ; preds = %dec_label_pc_152e0, %dec_label_pc_152f4
  %v0_15304 = phi i32 [ %v3_152e4, %dec_label_pc_152e0 ], [ -1, %dec_label_pc_152f4 ]
  %v2_15308 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15308, i32* %r4.global-to-local, align 4
  ret i32 %v0_15304

; uselistorder directives
  uselistorder i32 %v3_152e4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15304, { 1, 0 }
}

define i32 @function_1530c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1530c:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 96, i32* @r2, align 4
  %v2_15328 = inttoptr i32 %arg2 to i8*
  %v3_15328 = call i32 @function_13ad0(i8* %v2_15328, i32 0)
  %v1_1532c = add i32 %tmp, 1
  %v2_1532c = inttoptr i32 %v1_1532c to i8*
  %v3_1532c = load i8, i8* %v2_1532c, align 1
  %v4_1532c = zext i8 %v3_1532c to i32
  %v1_15330 = add i32 %tmp, 5
  %v2_15330 = inttoptr i32 %v1_15330 to i8*
  %v3_15330 = load i8, i8* %v2_15330, align 1
  %v4_15330 = zext i8 %v3_15330 to i32
  %v2_15334 = load i8, i8* %arg1, align 1
  %v3_15334 = zext i8 %v2_15334 to i32
  %v1_15338 = add i32 %tmp, 4
  %v2_15338 = inttoptr i32 %v1_15338 to i8*
  %v3_15338 = load i8, i8* %v2_15338, align 1
  %v4_15338 = zext i8 %v3_15338 to i32
  %v1_1533c = add i32 %tmp, 2
  %v2_1533c = inttoptr i32 %v1_1533c to i8*
  %v3_1533c = load i8, i8* %v2_1533c, align 1
  %v4_1533c = zext i8 %v3_1533c to i32
  %v1_15340 = add i32 %tmp, 6
  %v2_15340 = inttoptr i32 %v1_15340 to i8*
  %v3_15340 = load i8, i8* %v2_15340, align 1
  %v4_15340 = zext i8 %v3_15340 to i32
  %v1_15344 = add i32 %tmp, 3
  %v2_15344 = inttoptr i32 %v1_15344 to i8*
  %v3_15344 = load i8, i8* %v2_15344, align 1
  %v4_15344 = zext i8 %v3_15344 to i32
  %v4_15348 = mul nuw nsw i32 %v4_1532c, 256
  %v5_15348 = or i32 %v3_15334, %v4_15348
  %v4_1534c = mul nuw nsw i32 %v4_15330, 256
  %v5_1534c = or i32 %v4_15338, %v4_1534c
  %v1_15350 = add i32 %tmp, 7
  %v2_15350 = inttoptr i32 %v1_15350 to i8*
  %v3_15350 = load i8, i8* %v2_15350, align 1
  %v4_15350 = zext i8 %v3_15350 to i32
  %v4_15354 = mul nuw nsw i32 %v4_1533c, 65536
  %v5_15354 = or i32 %v4_15354, %v5_15348
  %v4_15358 = mul nuw nsw i32 %v4_15340, 65536
  %v5_15358 = or i32 %v4_15358, %v5_1534c
  %v4_1535c = mul nuw i32 %v4_15344, 16777216
  %v5_1535c = or i32 %v4_1535c, %v5_15354
  %v4_15360 = mul nuw i32 %v4_15350, 16777216
  %v5_15360 = or i32 %v4_15360, %v5_15358
  store i32 %v5_15360, i32* %r3.global-to-local, align 4
  %v0_15364 = load i32, i32* %r7.global-to-local, align 4
  %v1_15364 = inttoptr i32 %v0_15364 to i32*
  store i32 %v5_1535c, i32* %v1_15364, align 4
  %v3_15364 = add i32 %v0_15364, 4
  %v4_15364 = inttoptr i32 %v3_15364 to i32*
  %v5_15364 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_15364, i32* %v4_15364, align 4
  %v0_15368 = load i32, i32* %r4.global-to-local, align 4
  %v1_15368 = add i32 %v0_15368, 89
  %v2_15368 = inttoptr i32 %v1_15368 to i8*
  %v3_15368 = load i8, i8* %v2_15368, align 1
  %v4_15368 = zext i8 %v3_15368 to i32
  %v1_1536c = add i32 %v0_15368, 93
  %v2_1536c = inttoptr i32 %v1_1536c to i8*
  %v3_1536c = load i8, i8* %v2_1536c, align 1
  %v4_1536c = zext i8 %v3_1536c to i32
  %v1_15370 = add i32 %v0_15368, 88
  %v2_15370 = inttoptr i32 %v1_15370 to i8*
  %v3_15370 = load i8, i8* %v2_15370, align 1
  %v4_15370 = zext i8 %v3_15370 to i32
  %v1_15374 = add i32 %v0_15368, 92
  %v2_15374 = inttoptr i32 %v1_15374 to i8*
  %v3_15374 = load i8, i8* %v2_15374, align 1
  %v4_15374 = zext i8 %v3_15374 to i32
  store i32 %v4_15374, i32* %r3.global-to-local, align 4
  %v1_15378 = add i32 %v0_15368, 94
  %v2_15378 = inttoptr i32 %v1_15378 to i8*
  %v3_15378 = load i8, i8* %v2_15378, align 1
  %v4_15378 = zext i8 %v3_15378 to i32
  %v1_1537c = add i32 %v0_15368, 90
  %v2_1537c = inttoptr i32 %v1_1537c to i8*
  %v3_1537c = load i8, i8* %v2_1537c, align 1
  %v4_1537c = zext i8 %v3_1537c to i32
  %v1_15380 = add i32 %v0_15368, 91
  %v2_15380 = inttoptr i32 %v1_15380 to i8*
  %v3_15380 = load i8, i8* %v2_15380, align 1
  %v4_15380 = zext i8 %v3_15380 to i32
  %v4_15384 = mul nuw nsw i32 %v4_15368, 256
  %v5_15384 = or i32 %v4_15370, %v4_15384
  %v4_15388 = mul nuw nsw i32 %v4_1536c, 256
  %v5_15388 = or i32 %v4_15374, %v4_15388
  store i32 %v5_15388, i32* %r3.global-to-local, align 4
  %v1_1538c = add i32 %v0_15368, 95
  %v2_1538c = inttoptr i32 %v1_1538c to i8*
  %v3_1538c = load i8, i8* %v2_1538c, align 1
  %v4_1538c = zext i8 %v3_1538c to i32
  %v4_15390 = mul nuw nsw i32 %v4_15378, 65536
  %v5_15390 = or i32 %v4_15390, %v5_15388
  store i32 %v5_15390, i32* %r3.global-to-local, align 4
  %v4_15394 = mul nuw nsw i32 %v4_1537c, 65536
  %v5_15394 = or i32 %v4_15394, %v5_15384
  %v4_15398 = mul nuw i32 %v4_15380, 16777216
  %v5_15398 = or i32 %v4_15398, %v5_15394
  %v4_1539c = mul nuw i32 %v4_1538c, 16777216
  %v5_1539c = or i32 %v4_1539c, %v5_15390
  store i32 %v5_1539c, i32* %r6.global-to-local, align 4
  %v1_153a0 = load i32, i32* %r7.global-to-local, align 4
  %v2_153a0 = add i32 %v1_153a0, 88
  %v3_153a0 = inttoptr i32 %v2_153a0 to i32*
  store i32 %v5_15398, i32* %v3_153a0, align 4
  %v0_153a4 = load i32, i32* %r6.global-to-local, align 4
  %v1_153a4 = load i32, i32* %r7.global-to-local, align 4
  %v2_153a4 = add i32 %v1_153a4, 92
  %v3_153a4 = inttoptr i32 %v2_153a4 to i32*
  store i32 %v0_153a4, i32* %v3_153a4, align 4
  %v0_153a8 = load i32, i32* %r4.global-to-local, align 4
  %v1_153a8 = add i32 %v0_153a8, 13
  %v2_153a8 = inttoptr i32 %v1_153a8 to i8*
  %v3_153a8 = load i8, i8* %v2_153a8, align 1
  %v4_153a8 = zext i8 %v3_153a8 to i32
  %v1_153ac = add i32 %v0_153a8, 12
  %v2_153ac = inttoptr i32 %v1_153ac to i8*
  %v3_153ac = load i8, i8* %v2_153ac, align 1
  %v4_153ac = zext i8 %v3_153ac to i32
  store i32 %v4_153ac, i32* %r3.global-to-local, align 4
  %v1_153b0 = add i32 %v0_153a8, 14
  %v2_153b0 = inttoptr i32 %v1_153b0 to i8*
  %v3_153b0 = load i8, i8* %v2_153b0, align 1
  %v4_153b0 = zext i8 %v3_153b0 to i32
  %v4_153b4 = mul nuw nsw i32 %v4_153a8, 256
  %v5_153b4 = or i32 %v4_153ac, %v4_153b4
  store i32 %v5_153b4, i32* %r3.global-to-local, align 4
  %v1_153b8 = add i32 %v0_153a8, 15
  %v2_153b8 = inttoptr i32 %v1_153b8 to i8*
  %v3_153b8 = load i8, i8* %v2_153b8, align 1
  %v4_153b8 = zext i8 %v3_153b8 to i32
  %v4_153bc = mul nuw nsw i32 %v4_153b0, 65536
  %v5_153bc = or i32 %v4_153bc, %v5_153b4
  %v4_153c0 = mul nuw i32 %v4_153b8, 16777216
  %v5_153c0 = or i32 %v5_153bc, %v4_153c0
  store i32 %v5_153c0, i32* %r3.global-to-local, align 4
  %v1_153c4 = load i32, i32* %r7.global-to-local, align 4
  %v2_153c4 = add i32 %v1_153c4, 12
  %v3_153c4 = inttoptr i32 %v2_153c4 to i32*
  store i32 %v5_153c0, i32* %v3_153c4, align 4
  %v0_153c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_153c8 = add i32 %v0_153c8, 17
  %v2_153c8 = inttoptr i32 %v1_153c8 to i8*
  %v3_153c8 = load i8, i8* %v2_153c8, align 1
  %v4_153c8 = zext i8 %v3_153c8 to i32
  %v1_153cc = add i32 %v0_153c8, 16
  %v2_153cc = inttoptr i32 %v1_153cc to i8*
  %v3_153cc = load i8, i8* %v2_153cc, align 1
  %v4_153cc = zext i8 %v3_153cc to i32
  store i32 %v4_153cc, i32* %r3.global-to-local, align 4
  %v1_153d0 = add i32 %v0_153c8, 18
  %v2_153d0 = inttoptr i32 %v1_153d0 to i8*
  %v3_153d0 = load i8, i8* %v2_153d0, align 1
  %v4_153d0 = zext i8 %v3_153d0 to i32
  %v4_153d4 = mul nuw nsw i32 %v4_153c8, 256
  %v5_153d4 = or i32 %v4_153cc, %v4_153d4
  store i32 %v5_153d4, i32* %r3.global-to-local, align 4
  %v1_153d8 = add i32 %v0_153c8, 19
  %v2_153d8 = inttoptr i32 %v1_153d8 to i8*
  %v3_153d8 = load i8, i8* %v2_153d8, align 1
  %v4_153d8 = zext i8 %v3_153d8 to i32
  %v4_153dc = mul nuw nsw i32 %v4_153d0, 65536
  %v5_153dc = or i32 %v4_153dc, %v5_153d4
  %v4_153e0 = mul nuw i32 %v4_153d8, 16777216
  %v5_153e0 = or i32 %v5_153dc, %v4_153e0
  store i32 %v5_153e0, i32* %r3.global-to-local, align 4
  %v1_153e4 = load i32, i32* %r7.global-to-local, align 4
  %v2_153e4 = add i32 %v1_153e4, 16
  %v3_153e4 = inttoptr i32 %v2_153e4 to i32*
  store i32 %v5_153e0, i32* %v3_153e4, align 4
  %v0_153e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_153e8 = add i32 %v0_153e8, 21
  %v2_153e8 = inttoptr i32 %v1_153e8 to i8*
  %v3_153e8 = load i8, i8* %v2_153e8, align 1
  %v4_153e8 = zext i8 %v3_153e8 to i32
  %v1_153ec = add i32 %v0_153e8, 20
  %v2_153ec = inttoptr i32 %v1_153ec to i8*
  %v3_153ec = load i8, i8* %v2_153ec, align 1
  %v4_153ec = zext i8 %v3_153ec to i32
  store i32 %v4_153ec, i32* %r3.global-to-local, align 4
  %v1_153f0 = add i32 %v0_153e8, 22
  %v2_153f0 = inttoptr i32 %v1_153f0 to i8*
  %v3_153f0 = load i8, i8* %v2_153f0, align 1
  %v4_153f0 = zext i8 %v3_153f0 to i32
  %v4_153f4 = mul nuw nsw i32 %v4_153e8, 256
  %v5_153f4 = or i32 %v4_153ec, %v4_153f4
  store i32 %v5_153f4, i32* %r3.global-to-local, align 4
  %v1_153f8 = add i32 %v0_153e8, 23
  %v2_153f8 = inttoptr i32 %v1_153f8 to i8*
  %v3_153f8 = load i8, i8* %v2_153f8, align 1
  %v4_153f8 = zext i8 %v3_153f8 to i32
  %v4_153fc = mul nuw nsw i32 %v4_153f0, 65536
  %v5_153fc = or i32 %v4_153fc, %v5_153f4
  %v4_15400 = mul nuw i32 %v4_153f8, 16777216
  %v5_15400 = or i32 %v5_153fc, %v4_15400
  store i32 %v5_15400, i32* %r3.global-to-local, align 4
  %v1_15404 = load i32, i32* %r7.global-to-local, align 4
  %v2_15404 = add i32 %v1_15404, 20
  %v3_15404 = inttoptr i32 %v2_15404 to i32*
  store i32 %v5_15400, i32* %v3_15404, align 4
  %v0_15408 = load i32, i32* %r4.global-to-local, align 4
  %v1_15408 = add i32 %v0_15408, 25
  %v2_15408 = inttoptr i32 %v1_15408 to i8*
  %v3_15408 = load i8, i8* %v2_15408, align 1
  %v4_15408 = zext i8 %v3_15408 to i32
  %v1_1540c = add i32 %v0_15408, 24
  %v2_1540c = inttoptr i32 %v1_1540c to i8*
  %v3_1540c = load i8, i8* %v2_1540c, align 1
  %v4_1540c = zext i8 %v3_1540c to i32
  store i32 %v4_1540c, i32* %r3.global-to-local, align 4
  %v1_15410 = add i32 %v0_15408, 26
  %v2_15410 = inttoptr i32 %v1_15410 to i8*
  %v3_15410 = load i8, i8* %v2_15410, align 1
  %v4_15410 = zext i8 %v3_15410 to i32
  %v4_15414 = mul nuw nsw i32 %v4_15408, 256
  %v5_15414 = or i32 %v4_1540c, %v4_15414
  store i32 %v5_15414, i32* %r3.global-to-local, align 4
  %v1_15418 = add i32 %v0_15408, 27
  %v2_15418 = inttoptr i32 %v1_15418 to i8*
  %v3_15418 = load i8, i8* %v2_15418, align 1
  %v4_15418 = zext i8 %v3_15418 to i32
  %v4_1541c = mul nuw nsw i32 %v4_15410, 65536
  %v5_1541c = or i32 %v4_1541c, %v5_15414
  %v4_15420 = mul nuw i32 %v4_15418, 16777216
  %v5_15420 = or i32 %v5_1541c, %v4_15420
  store i32 %v5_15420, i32* %r3.global-to-local, align 4
  %v1_15424 = load i32, i32* %r7.global-to-local, align 4
  %v2_15424 = add i32 %v1_15424, 24
  %v3_15424 = inttoptr i32 %v2_15424 to i32*
  store i32 %v5_15420, i32* %v3_15424, align 4
  %v0_15428 = load i32, i32* %r4.global-to-local, align 4
  %v1_15428 = add i32 %v0_15428, 29
  %v2_15428 = inttoptr i32 %v1_15428 to i8*
  %v3_15428 = load i8, i8* %v2_15428, align 1
  %v4_15428 = zext i8 %v3_15428 to i32
  %v1_1542c = add i32 %v0_15428, 28
  %v2_1542c = inttoptr i32 %v1_1542c to i8*
  %v3_1542c = load i8, i8* %v2_1542c, align 1
  %v4_1542c = zext i8 %v3_1542c to i32
  store i32 %v4_1542c, i32* %r3.global-to-local, align 4
  %v1_15430 = add i32 %v0_15428, 30
  %v2_15430 = inttoptr i32 %v1_15430 to i8*
  %v3_15430 = load i8, i8* %v2_15430, align 1
  %v4_15430 = zext i8 %v3_15430 to i32
  %v4_15434 = mul nuw nsw i32 %v4_15428, 256
  %v5_15434 = or i32 %v4_1542c, %v4_15434
  store i32 %v5_15434, i32* %r3.global-to-local, align 4
  %v1_15438 = add i32 %v0_15428, 31
  %v2_15438 = inttoptr i32 %v1_15438 to i8*
  %v3_15438 = load i8, i8* %v2_15438, align 1
  %v4_15438 = zext i8 %v3_15438 to i32
  %v4_1543c = mul nuw nsw i32 %v4_15430, 65536
  %v5_1543c = or i32 %v4_1543c, %v5_15434
  %v4_15440 = mul nuw i32 %v4_15438, 16777216
  %v5_15440 = or i32 %v5_1543c, %v4_15440
  store i32 %v5_15440, i32* %r3.global-to-local, align 4
  %v1_15444 = load i32, i32* %r7.global-to-local, align 4
  %v2_15444 = add i32 %v1_15444, 28
  %v3_15444 = inttoptr i32 %v2_15444 to i32*
  store i32 %v5_15440, i32* %v3_15444, align 4
  %v0_15448 = load i32, i32* %r4.global-to-local, align 4
  %v1_15448 = add i32 %v0_15448, 33
  %v2_15448 = inttoptr i32 %v1_15448 to i8*
  %v3_15448 = load i8, i8* %v2_15448, align 1
  %v4_15448 = zext i8 %v3_15448 to i32
  %v1_1544c = add i32 %v0_15448, 37
  %v2_1544c = inttoptr i32 %v1_1544c to i8*
  %v3_1544c = load i8, i8* %v2_1544c, align 1
  %v4_1544c = zext i8 %v3_1544c to i32
  %v1_15450 = add i32 %v0_15448, 32
  %v2_15450 = inttoptr i32 %v1_15450 to i8*
  %v3_15450 = load i8, i8* %v2_15450, align 1
  %v4_15450 = zext i8 %v3_15450 to i32
  %v1_15454 = add i32 %v0_15448, 36
  %v2_15454 = inttoptr i32 %v1_15454 to i8*
  %v3_15454 = load i8, i8* %v2_15454, align 1
  %v4_15454 = zext i8 %v3_15454 to i32
  store i32 %v4_15454, i32* %r3.global-to-local, align 4
  %v1_15458 = add i32 %v0_15448, 34
  %v2_15458 = inttoptr i32 %v1_15458 to i8*
  %v3_15458 = load i8, i8* %v2_15458, align 1
  %v4_15458 = zext i8 %v3_15458 to i32
  %v1_1545c = add i32 %v0_15448, 38
  %v2_1545c = inttoptr i32 %v1_1545c to i8*
  %v3_1545c = load i8, i8* %v2_1545c, align 1
  %v4_1545c = zext i8 %v3_1545c to i32
  %v1_15460 = add i32 %v0_15448, 35
  %v2_15460 = inttoptr i32 %v1_15460 to i8*
  %v3_15460 = load i8, i8* %v2_15460, align 1
  %v4_15460 = zext i8 %v3_15460 to i32
  %v4_15464 = mul nuw nsw i32 %v4_15448, 256
  %v5_15464 = or i32 %v4_15450, %v4_15464
  %v4_15468 = mul nuw nsw i32 %v4_1544c, 256
  %v5_15468 = or i32 %v4_15454, %v4_15468
  store i32 %v5_15468, i32* %r3.global-to-local, align 4
  %v1_1546c = add i32 %v0_15448, 39
  %v2_1546c = inttoptr i32 %v1_1546c to i8*
  %v3_1546c = load i8, i8* %v2_1546c, align 1
  %v4_1546c = zext i8 %v3_1546c to i32
  %v4_15470 = mul nuw nsw i32 %v4_15458, 65536
  %v5_15470 = or i32 %v4_15470, %v5_15464
  %v4_15474 = mul nuw nsw i32 %v4_1545c, 65536
  %v5_15474 = or i32 %v4_15474, %v5_15468
  %v4_15478 = mul nuw i32 %v4_15460, 16777216
  %v5_15478 = or i32 %v5_15470, %v4_15478
  %v4_1547c = mul nuw i32 %v4_1546c, 16777216
  %v5_1547c = or i32 %v5_15474, %v4_1547c
  store i32 %v5_1547c, i32* %r3.global-to-local, align 4
  %v1_15490 = load i32, i32* %r7.global-to-local, align 4
  %v2_15490 = add i32 %v1_15490, 32
  %v3_15490 = inttoptr i32 %v2_15490 to i32*
  store i32 %v5_15478, i32* %v3_15490, align 4
  %v0_15494 = load i32, i32* %r3.global-to-local, align 4
  %v1_15494 = load i32, i32* %r7.global-to-local, align 4
  %v2_15494 = add i32 %v1_15494, 36
  %v3_15494 = inttoptr i32 %v2_15494 to i32*
  store i32 %v0_15494, i32* %v3_15494, align 4
  %v0_15498 = load i32, i32* %r4.global-to-local, align 4
  %v1_15498 = add i32 %v0_15498, 45
  %v2_15498 = inttoptr i32 %v1_15498 to i8*
  %v3_15498 = load i8, i8* %v2_15498, align 1
  %v4_15498 = zext i8 %v3_15498 to i32
  %v1_1549c = add i32 %v0_15498, 49
  %v2_1549c = inttoptr i32 %v1_1549c to i8*
  %v3_1549c = load i8, i8* %v2_1549c, align 1
  %v4_1549c = zext i8 %v3_1549c to i32
  %v1_154a0 = add i32 %v0_15498, 44
  %v2_154a0 = inttoptr i32 %v1_154a0 to i8*
  %v3_154a0 = load i8, i8* %v2_154a0, align 1
  %v4_154a0 = zext i8 %v3_154a0 to i32
  %v1_154a4 = add i32 %v0_15498, 48
  %v2_154a4 = inttoptr i32 %v1_154a4 to i8*
  %v3_154a4 = load i8, i8* %v2_154a4, align 1
  %v4_154a4 = zext i8 %v3_154a4 to i32
  store i32 %v4_154a4, i32* %r3.global-to-local, align 4
  %v1_154a8 = add i32 %v0_15498, 46
  %v2_154a8 = inttoptr i32 %v1_154a8 to i8*
  %v3_154a8 = load i8, i8* %v2_154a8, align 1
  %v4_154a8 = zext i8 %v3_154a8 to i32
  %v1_154ac = add i32 %v0_15498, 50
  %v2_154ac = inttoptr i32 %v1_154ac to i8*
  %v3_154ac = load i8, i8* %v2_154ac, align 1
  %v4_154ac = zext i8 %v3_154ac to i32
  %v1_154b0 = add i32 %v0_15498, 47
  %v2_154b0 = inttoptr i32 %v1_154b0 to i8*
  %v3_154b0 = load i8, i8* %v2_154b0, align 1
  %v4_154b0 = zext i8 %v3_154b0 to i32
  %v4_154b4 = mul nuw nsw i32 %v4_15498, 256
  %v5_154b4 = or i32 %v4_154a0, %v4_154b4
  %v4_154b8 = mul nuw nsw i32 %v4_1549c, 256
  %v5_154b8 = or i32 %v4_154a4, %v4_154b8
  store i32 %v5_154b8, i32* %r3.global-to-local, align 4
  %v1_154bc = add i32 %v0_15498, 51
  %v2_154bc = inttoptr i32 %v1_154bc to i8*
  %v3_154bc = load i8, i8* %v2_154bc, align 1
  %v4_154bc = zext i8 %v3_154bc to i32
  %v4_154c0 = mul nuw nsw i32 %v4_154a8, 65536
  %v5_154c0 = or i32 %v4_154c0, %v5_154b4
  %v4_154c4 = mul nuw nsw i32 %v4_154ac, 65536
  %v5_154c4 = or i32 %v4_154c4, %v5_154b8
  %v4_154c8 = mul nuw i32 %v4_154b0, 16777216
  %v5_154c8 = or i32 %v5_154c0, %v4_154c8
  %v4_154cc = mul nuw i32 %v4_154bc, 16777216
  %v5_154cc = or i32 %v5_154c4, %v4_154cc
  store i32 %v5_154cc, i32* %r3.global-to-local, align 4
  %v1_154e0 = load i32, i32* %r7.global-to-local, align 4
  %v2_154e0 = add i32 %v1_154e0, 44
  %v3_154e0 = inttoptr i32 %v2_154e0 to i32*
  store i32 %v5_154c8, i32* %v3_154e0, align 4
  %v0_154e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_154e4 = load i32, i32* %r7.global-to-local, align 4
  %v2_154e4 = add i32 %v1_154e4, 48
  %v3_154e4 = inttoptr i32 %v2_154e4 to i32*
  store i32 %v0_154e4, i32* %v3_154e4, align 4
  %v0_154e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_154e8 = add i32 %v0_154e8, 53
  %v2_154e8 = inttoptr i32 %v1_154e8 to i8*
  %v3_154e8 = load i8, i8* %v2_154e8, align 1
  %v4_154e8 = zext i8 %v3_154e8 to i32
  %v1_154ec = add i32 %v0_154e8, 52
  %v2_154ec = inttoptr i32 %v1_154ec to i8*
  %v3_154ec = load i8, i8* %v2_154ec, align 1
  %v4_154ec = zext i8 %v3_154ec to i32
  store i32 %v4_154ec, i32* %r3.global-to-local, align 4
  %v1_154f0 = add i32 %v0_154e8, 54
  %v2_154f0 = inttoptr i32 %v1_154f0 to i8*
  %v3_154f0 = load i8, i8* %v2_154f0, align 1
  %v4_154f0 = zext i8 %v3_154f0 to i32
  %v4_154f4 = mul nuw nsw i32 %v4_154e8, 256
  %v5_154f4 = or i32 %v4_154ec, %v4_154f4
  store i32 %v5_154f4, i32* %r3.global-to-local, align 4
  %v1_154f8 = add i32 %v0_154e8, 55
  %v2_154f8 = inttoptr i32 %v1_154f8 to i8*
  %v3_154f8 = load i8, i8* %v2_154f8, align 1
  %v4_154f8 = zext i8 %v3_154f8 to i32
  %v4_154fc = mul nuw nsw i32 %v4_154f0, 65536
  %v5_154fc = or i32 %v4_154fc, %v5_154f4
  %v4_15500 = mul nuw i32 %v4_154f8, 16777216
  %v5_15500 = or i32 %v5_154fc, %v4_15500
  store i32 %v5_15500, i32* %r3.global-to-local, align 4
  %v1_15504 = load i32, i32* %r7.global-to-local, align 4
  %v2_15504 = add i32 %v1_15504, 52
  %v3_15504 = inttoptr i32 %v2_15504 to i32*
  store i32 %v5_15500, i32* %v3_15504, align 4
  %v0_15508 = load i32, i32* %r4.global-to-local, align 4
  %v1_15508 = add i32 %v0_15508, 57
  %v2_15508 = inttoptr i32 %v1_15508 to i8*
  %v3_15508 = load i8, i8* %v2_15508, align 1
  %v4_15508 = zext i8 %v3_15508 to i32
  %v1_1550c = add i32 %v0_15508, 56
  %v2_1550c = inttoptr i32 %v1_1550c to i8*
  %v3_1550c = load i8, i8* %v2_1550c, align 1
  %v4_1550c = zext i8 %v3_1550c to i32
  %v1_15510 = add i32 %v0_15508, 60
  %v2_15510 = inttoptr i32 %v1_15510 to i8*
  %v3_15510 = load i8, i8* %v2_15510, align 1
  %v4_15510 = zext i8 %v3_15510 to i32
  store i32 %v4_15510, i32* %r3.global-to-local, align 4
  %v1_15514 = add i32 %v0_15508, 61
  %v2_15514 = inttoptr i32 %v1_15514 to i8*
  %v3_15514 = load i8, i8* %v2_15514, align 1
  %v4_15514 = zext i8 %v3_15514 to i32
  %v1_15518 = add i32 %v0_15508, 58
  %v2_15518 = inttoptr i32 %v1_15518 to i8*
  %v3_15518 = load i8, i8* %v2_15518, align 1
  %v4_15518 = zext i8 %v3_15518 to i32
  %v1_1551c = add i32 %v0_15508, 62
  %v2_1551c = inttoptr i32 %v1_1551c to i8*
  %v3_1551c = load i8, i8* %v2_1551c, align 1
  %v4_1551c = zext i8 %v3_1551c to i32
  %v1_15520 = add i32 %v0_15508, 59
  %v2_15520 = inttoptr i32 %v1_15520 to i8*
  %v3_15520 = load i8, i8* %v2_15520, align 1
  %v4_15520 = zext i8 %v3_15520 to i32
  %v4_15524 = mul nuw nsw i32 %v4_15508, 256
  %v5_15524 = or i32 %v4_1550c, %v4_15524
  %v4_15528 = mul nuw nsw i32 %v4_15514, 256
  %v5_15528 = or i32 %v4_15528, %v4_15510
  store i32 %v5_15528, i32* %r3.global-to-local, align 4
  %v1_1552c = add i32 %v0_15508, 63
  %v2_1552c = inttoptr i32 %v1_1552c to i8*
  %v3_1552c = load i8, i8* %v2_1552c, align 1
  %v4_1552c = zext i8 %v3_1552c to i32
  %v4_15530 = mul nuw nsw i32 %v4_15518, 65536
  %v5_15530 = or i32 %v4_15530, %v5_15524
  %v4_15534 = mul nuw nsw i32 %v4_1551c, 65536
  %v5_15534 = or i32 %v4_15534, %v5_15528
  %v4_15538 = mul nuw i32 %v4_1552c, 16777216
  %v5_15538 = or i32 %v5_15534, %v4_15538
  %v4_1553c = mul nuw i32 %v4_15520, 16777216
  %v5_1553c = or i32 %v5_15530, %v4_1553c
  store i32 %v5_15538, i32* %r3.global-to-local, align 4
  %v1_1554c = load i32, i32* %r7.global-to-local, align 4
  %v2_1554c = add i32 %v1_1554c, 56
  %v3_1554c = inttoptr i32 %v2_1554c to i32*
  store i32 %v5_1553c, i32* %v3_1554c, align 4
  %v0_15550 = load i32, i32* %r3.global-to-local, align 4
  %v1_15550 = load i32, i32* %r7.global-to-local, align 4
  %v2_15550 = add i32 %v1_15550, 60
  %v3_15550 = inttoptr i32 %v2_15550 to i32*
  store i32 %v0_15550, i32* %v3_15550, align 4
  %v0_15554 = load i32, i32* %r4.global-to-local, align 4
  %v1_15554 = add i32 %v0_15554, 65
  %v2_15554 = inttoptr i32 %v1_15554 to i8*
  %v3_15554 = load i8, i8* %v2_15554, align 1
  %v4_15554 = zext i8 %v3_15554 to i32
  %v1_15558 = add i32 %v0_15554, 64
  %v2_15558 = inttoptr i32 %v1_15558 to i8*
  %v3_15558 = load i8, i8* %v2_15558, align 1
  %v4_15558 = zext i8 %v3_15558 to i32
  store i32 %v4_15558, i32* %r3.global-to-local, align 4
  %v1_1555c = add i32 %v0_15554, 66
  %v2_1555c = inttoptr i32 %v1_1555c to i8*
  %v3_1555c = load i8, i8* %v2_1555c, align 1
  %v4_1555c = zext i8 %v3_1555c to i32
  %v4_15560 = mul nuw nsw i32 %v4_15554, 256
  %v5_15560 = or i32 %v4_15558, %v4_15560
  store i32 %v5_15560, i32* %r3.global-to-local, align 4
  %v1_15564 = add i32 %v0_15554, 67
  %v2_15564 = inttoptr i32 %v1_15564 to i8*
  %v3_15564 = load i8, i8* %v2_15564, align 1
  %v4_15564 = zext i8 %v3_15564 to i32
  %v4_15568 = mul nuw nsw i32 %v4_1555c, 65536
  %v5_15568 = or i32 %v4_15568, %v5_15560
  %v4_1556c = mul nuw i32 %v4_15564, 16777216
  %v5_1556c = or i32 %v5_15568, %v4_1556c
  store i32 %v5_1556c, i32* %r3.global-to-local, align 4
  %v1_15570 = load i32, i32* %r7.global-to-local, align 4
  %v2_15570 = add i32 %v1_15570, 64
  %v3_15570 = inttoptr i32 %v2_15570 to i32*
  store i32 %v5_1556c, i32* %v3_15570, align 4
  %v0_15574 = load i32, i32* %r4.global-to-local, align 4
  %v1_15574 = add i32 %v0_15574, 73
  %v2_15574 = inttoptr i32 %v1_15574 to i8*
  %v3_15574 = load i8, i8* %v2_15574, align 1
  %v4_15574 = zext i8 %v3_15574 to i32
  %v1_15578 = add i32 %v0_15574, 72
  %v2_15578 = inttoptr i32 %v1_15578 to i8*
  %v3_15578 = load i8, i8* %v2_15578, align 1
  %v4_15578 = zext i8 %v3_15578 to i32
  store i32 %v4_15578, i32* %r3.global-to-local, align 4
  %v1_1557c = add i32 %v0_15574, 74
  %v2_1557c = inttoptr i32 %v1_1557c to i8*
  %v3_1557c = load i8, i8* %v2_1557c, align 1
  %v4_1557c = zext i8 %v3_1557c to i32
  %v4_15580 = mul nuw nsw i32 %v4_15574, 256
  %v5_15580 = or i32 %v4_15578, %v4_15580
  store i32 %v5_15580, i32* %r3.global-to-local, align 4
  %v1_15584 = add i32 %v0_15574, 75
  %v2_15584 = inttoptr i32 %v1_15584 to i8*
  %v3_15584 = load i8, i8* %v2_15584, align 1
  %v4_15584 = zext i8 %v3_15584 to i32
  %v4_15588 = mul nuw nsw i32 %v4_1557c, 65536
  %v5_15588 = or i32 %v4_15588, %v5_15580
  %v4_1558c = mul nuw i32 %v4_15584, 16777216
  %v5_1558c = or i32 %v5_15588, %v4_1558c
  store i32 %v5_1558c, i32* %r3.global-to-local, align 4
  %v1_15590 = load i32, i32* %r7.global-to-local, align 4
  %v2_15590 = add i32 %v1_15590, 72
  %v3_15590 = inttoptr i32 %v2_15590 to i32*
  store i32 %v5_1558c, i32* %v3_15590, align 4
  %v0_15594 = load i32, i32* %r4.global-to-local, align 4
  %v1_15594 = add i32 %v0_15594, 81
  %v2_15594 = inttoptr i32 %v1_15594 to i8*
  %v3_15594 = load i8, i8* %v2_15594, align 1
  %v4_15594 = zext i8 %v3_15594 to i32
  %v1_15598 = add i32 %v0_15594, 80
  %v2_15598 = inttoptr i32 %v1_15598 to i8*
  %v3_15598 = load i8, i8* %v2_15598, align 1
  %v4_15598 = zext i8 %v3_15598 to i32
  store i32 %v4_15598, i32* %r3.global-to-local, align 4
  %v1_1559c = add i32 %v0_15594, 82
  %v2_1559c = inttoptr i32 %v1_1559c to i8*
  %v3_1559c = load i8, i8* %v2_1559c, align 1
  %v4_1559c = zext i8 %v3_1559c to i32
  %v4_155a0 = mul nuw nsw i32 %v4_15594, 256
  %v5_155a0 = or i32 %v4_15598, %v4_155a0
  store i32 %v5_155a0, i32* %r3.global-to-local, align 4
  %v1_155a4 = add i32 %v0_15594, 83
  %v2_155a4 = inttoptr i32 %v1_155a4 to i8*
  %v3_155a4 = load i8, i8* %v2_155a4, align 1
  %v4_155a4 = zext i8 %v3_155a4 to i32
  %v4_155a8 = mul nuw nsw i32 %v4_1559c, 65536
  %v5_155a8 = or i32 %v4_155a8, %v5_155a0
  %v4_155ac = mul nuw i32 %v4_155a4, 16777216
  %v5_155ac = or i32 %v5_155a8, %v4_155ac
  store i32 %v5_155ac, i32* %r3.global-to-local, align 4
  %v1_155b0 = load i32, i32* %r7.global-to-local, align 4
  %v2_155b0 = add i32 %v1_155b0, 80
  %v3_155b0 = inttoptr i32 %v2_155b0 to i32*
  store i32 %v5_155ac, i32* %v3_155b0, align 4
  %v0_155b4 = load i32, i32* %r4.global-to-local, align 4
  %v1_155b4 = add i32 %v0_155b4, 69
  %v2_155b4 = inttoptr i32 %v1_155b4 to i8*
  %v3_155b4 = load i8, i8* %v2_155b4, align 1
  %v4_155b4 = zext i8 %v3_155b4 to i32
  %v1_155b8 = add i32 %v0_155b4, 68
  %v2_155b8 = inttoptr i32 %v1_155b8 to i8*
  %v3_155b8 = load i8, i8* %v2_155b8, align 1
  %v4_155b8 = zext i8 %v3_155b8 to i32
  store i32 %v4_155b8, i32* %r3.global-to-local, align 4
  %v1_155bc = add i32 %v0_155b4, 70
  %v2_155bc = inttoptr i32 %v1_155bc to i8*
  %v3_155bc = load i8, i8* %v2_155bc, align 1
  %v4_155bc = zext i8 %v3_155bc to i32
  %v4_155c0 = mul nuw nsw i32 %v4_155b4, 256
  %v5_155c0 = or i32 %v4_155b8, %v4_155c0
  store i32 %v5_155c0, i32* %r3.global-to-local, align 4
  %v1_155c4 = add i32 %v0_155b4, 71
  %v2_155c4 = inttoptr i32 %v1_155c4 to i8*
  %v3_155c4 = load i8, i8* %v2_155c4, align 1
  %v4_155c4 = zext i8 %v3_155c4 to i32
  %v4_155c8 = mul nuw nsw i32 %v4_155bc, 65536
  %v5_155c8 = or i32 %v4_155c8, %v5_155c0
  %v4_155cc = mul nuw i32 %v4_155c4, 16777216
  %v5_155cc = or i32 %v5_155c8, %v4_155cc
  store i32 %v5_155cc, i32* %r3.global-to-local, align 4
  %v1_155d0 = load i32, i32* %r7.global-to-local, align 4
  %v2_155d0 = add i32 %v1_155d0, 68
  %v3_155d0 = inttoptr i32 %v2_155d0 to i32*
  store i32 %v5_155cc, i32* %v3_155d0, align 4
  %v0_155d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_155d4 = add i32 %v0_155d4, 77
  %v2_155d4 = inttoptr i32 %v1_155d4 to i8*
  %v3_155d4 = load i8, i8* %v2_155d4, align 1
  %v4_155d4 = zext i8 %v3_155d4 to i32
  %v1_155d8 = add i32 %v0_155d4, 76
  %v2_155d8 = inttoptr i32 %v1_155d8 to i8*
  %v3_155d8 = load i8, i8* %v2_155d8, align 1
  %v4_155d8 = zext i8 %v3_155d8 to i32
  store i32 %v4_155d8, i32* %r3.global-to-local, align 4
  %v1_155dc = add i32 %v0_155d4, 78
  %v2_155dc = inttoptr i32 %v1_155dc to i8*
  %v3_155dc = load i8, i8* %v2_155dc, align 1
  %v4_155dc = zext i8 %v3_155dc to i32
  %v4_155e0 = mul nuw nsw i32 %v4_155d4, 256
  %v5_155e0 = or i32 %v4_155d8, %v4_155e0
  store i32 %v5_155e0, i32* %r3.global-to-local, align 4
  %v1_155e4 = add i32 %v0_155d4, 79
  %v2_155e4 = inttoptr i32 %v1_155e4 to i8*
  %v3_155e4 = load i8, i8* %v2_155e4, align 1
  %v4_155e4 = zext i8 %v3_155e4 to i32
  %v4_155e8 = mul nuw nsw i32 %v4_155dc, 65536
  %v5_155e8 = or i32 %v4_155e8, %v5_155e0
  %v4_155ec = mul nuw i32 %v4_155e4, 16777216
  %v5_155ec = or i32 %v5_155e8, %v4_155ec
  store i32 %v5_155ec, i32* %r3.global-to-local, align 4
  %v1_155f0 = load i32, i32* %r7.global-to-local, align 4
  %v2_155f0 = add i32 %v1_155f0, 76
  %v3_155f0 = inttoptr i32 %v2_155f0 to i32*
  store i32 %v5_155ec, i32* %v3_155f0, align 4
  %v0_155f4 = load i32, i32* %r4.global-to-local, align 4
  %v1_155f4 = add i32 %v0_155f4, 85
  %v2_155f4 = inttoptr i32 %v1_155f4 to i8*
  %v3_155f4 = load i8, i8* %v2_155f4, align 1
  %v4_155f4 = zext i8 %v3_155f4 to i32
  %v1_155f8 = add i32 %v0_155f4, 84
  %v2_155f8 = inttoptr i32 %v1_155f8 to i8*
  %v3_155f8 = load i8, i8* %v2_155f8, align 1
  %v4_155f8 = zext i8 %v3_155f8 to i32
  store i32 %v4_155f8, i32* %r3.global-to-local, align 4
  %v1_155fc = add i32 %v0_155f4, 86
  %v2_155fc = inttoptr i32 %v1_155fc to i8*
  %v3_155fc = load i8, i8* %v2_155fc, align 1
  %v4_155fc = zext i8 %v3_155fc to i32
  %v4_15600 = mul nuw nsw i32 %v4_155f4, 256
  %v5_15600 = or i32 %v4_155f8, %v4_15600
  store i32 %v5_15600, i32* %r3.global-to-local, align 4
  %v1_15604 = add i32 %v0_155f4, 87
  %v2_15604 = inttoptr i32 %v1_15604 to i8*
  %v3_15604 = load i8, i8* %v2_15604, align 1
  %v4_15604 = zext i8 %v3_15604 to i32
  %v4_15608 = mul nuw nsw i32 %v4_155fc, 65536
  %v5_15608 = or i32 %v4_15608, %v5_15600
  %v4_1560c = mul nuw i32 %v4_15604, 16777216
  %v5_1560c = or i32 %v5_15608, %v4_1560c
  store i32 %v5_1560c, i32* %r3.global-to-local, align 4
  %v1_15610 = load i32, i32* %r7.global-to-local, align 4
  %v2_15610 = add i32 %v1_15610, 84
  %v3_15610 = inttoptr i32 %v2_15610 to i32*
  store i32 %v5_1560c, i32* %v3_15610, align 4
  ret i32 %v4_15514

; uselistorder directives
  uselistorder i32 %v4_15514, { 1, 0 }
  uselistorder i32 %v0_15508, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_15498, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_15448, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_15368, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %tmp, { 6, 5, 3, 4, 2, 1, 0, 7 }
  uselistorder i32 87, { 1, 0 }
  uselistorder i32 69, { 1, 0 }
  uselistorder i32 83, { 2, 1, 0 }
  uselistorder i32 80, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 59, { 1, 2, 0 }
  uselistorder i32 62, { 1, 0 }
  uselistorder i32 61, { 1, 0 }
  uselistorder i32 55, { 2, 4, 0, 3, 1 }
  uselistorder i32 54, { 1, 0 }
  uselistorder i32 53, { 1, 2, 0, 3 }
  uselistorder i32 51, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 47, { 4, 5, 6, 7, 0, 8, 1, 9, 2, 10, 11, 3 }
  uselistorder i32 50, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 46, { 2, 3, 0, 4, 1, 5 }
  uselistorder i32 49, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 45, { 2, 3, 0, 4, 1, 5 }
  uselistorder i32 39, { 5, 6, 0, 1, 7, 2, 8, 3, 9, 4 }
  uselistorder i32 35, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 38, { 4, 3, 5, 6, 7, 8, 0, 9, 1, 10, 2, 11 }
  uselistorder i32 34, { 5, 0, 1, 6, 7, 2, 8, 3, 9, 4, 10 }
  uselistorder i32 37, { 3, 0, 4, 1, 5, 6, 7, 8, 2, 9 }
  uselistorder i32 33, { 9, 2, 0, 12, 1, 10, 3, 11, 4, 5, 6, 13, 7, 14, 8, 15, 16 }
  uselistorder i32 30, { 5, 0, 9, 4, 1, 6, 2, 7, 3, 8, 10 }
  uselistorder i32 29, { 7, 1, 0, 8, 9, 5, 2, 3, 4, 6 }
  uselistorder i32 26, { 5, 0, 1, 2, 6, 3, 7, 4, 8, 9 }
  uselistorder i32 25, { 12, 24, 25, 3, 0, 4, 13, 5, 14, 6, 15, 11, 16, 17, 18, 1, 19, 7, 20, 2, 21, 8, 9, 22, 10, 23, 26, 27 }
  uselistorder i32 23, { 8, 2, 0, 3, 1, 4, 9, 5, 10, 6, 11, 13, 14, 12, 7 }
  uselistorder i32 22, { 11, 1, 15, 2, 3, 4, 5, 0, 6, 12, 7, 13, 8, 14, 16, 9, 10, 17 }
  uselistorder i32 21, { 8, 3, 1, 9, 4, 10, 5, 11, 6, 12, 13, 14, 7, 0, 15, 2, 16 }
  uselistorder i32 19, { 9, 14, 15, 16, 4, 13, 1, 5, 10, 6, 11, 7, 12, 0, 20, 17, 2, 18, 3, 19, 8 }
  uselistorder i32 18, { 9, 13, 14, 15, 1, 0, 2, 10, 3, 11, 4, 12, 8, 16, 5, 17, 6, 18, 7, 19 }
  uselistorder i32 17, { 12, 15, 0, 4, 31, 32, 5, 33, 34, 6, 1, 30, 13, 14, 7, 16, 8, 17, 9, 18, 10, 19, 11, 20, 21, 2, 22, 23, 24, 3, 25, 26, 27, 28, 29 }
  uselistorder i32 6, { 40, 43, 13, 14, 88, 15, 2, 16, 41, 0, 82, 17, 83, 42, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 3, 29, 30, 31, 32, 33, 4, 34, 44, 45, 46, 5, 47, 48, 49, 50, 6, 51, 52, 53, 54, 7, 55, 8, 56, 57, 58, 35, 59, 9, 60, 61, 62, 36, 63, 10, 64, 65, 66, 37, 67, 68, 69, 70, 71, 38, 72, 11, 73, 74, 75, 76, 77, 78, 39, 79, 12, 80, 1, 81, 84, 85, 86, 87 }
  uselistorder i32 96, { 1, 0, 2, 3 }
}

define i32 @function_1561c(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1561c:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_1561c = load i32, i32* @r4, align 4
  store i32 %v3_1561c, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v2_15634 = inttoptr i32 %arg2 to i8*
  %v3_15634 = call i32 @function_13ad0(i8* %v2_15634, i32 0)
  store i32 %v3_15634, i32* %r0.global-to-local, align 4
  %v0_15638 = load i32, i32* %r5.global-to-local, align 4
  %v1_15638 = inttoptr i32 %v0_15638 to i32*
  %v2_15638 = load i32, i32* %v1_15638, align 4
  store i32 %v2_15638, i32* %r3.global-to-local, align 4
  %v1_1563c = add i32 %v0_15638, 4
  %v2_1563c = inttoptr i32 %v1_1563c to i32*
  %v3_1563c = load i32, i32* %v2_1563c, align 4
  store i32 %v3_1563c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_15644 = load i32, i32* %r6.global-to-local, align 4
  %v1_15644 = inttoptr i32 %v0_15644 to i32*
  store i32 %v2_15638, i32* %v1_15644, align 4
  %v3_15644 = add i32 %v0_15644, 4
  %v4_15644 = inttoptr i32 %v3_15644 to i32*
  %v5_15644 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15644, i32* %v4_15644, align 4
  %v0_15648 = load i32, i32* %r2.global-to-local, align 4
  %v1_15648 = load i32, i32* %r6.global-to-local, align 4
  %v2_15648 = add i32 %v1_15648, 12
  %v3_15648 = inttoptr i32 %v2_15648 to i32*
  store i32 %v0_15648, i32* %v3_15648, align 4
  %v0_1564c = load i32, i32* %r5.global-to-local, align 4
  %v1_1564c = add i32 %v0_1564c, 9
  %v2_1564c = inttoptr i32 %v1_1564c to i8*
  %v3_1564c = load i8, i8* %v2_1564c, align 1
  %v4_1564c = zext i8 %v3_1564c to i32
  store i32 %v4_1564c, i32* %r2.global-to-local, align 4
  %v1_15650 = add i32 %v0_1564c, 8
  %v2_15650 = inttoptr i32 %v1_15650 to i8*
  %v3_15650 = load i8, i8* %v2_15650, align 1
  %v4_15650 = zext i8 %v3_15650 to i32
  %v4_15654 = mul nuw nsw i32 %v4_1564c, 256
  %v5_15654 = or i32 %v4_15650, %v4_15654
  store i32 %v5_15654, i32* %r3.global-to-local, align 4
  %v1_15658 = load i32, i32* %r6.global-to-local, align 4
  %v2_15658 = add i32 %v1_15658, 16
  %v3_15658 = inttoptr i32 %v2_15658 to i32*
  store i32 %v5_15654, i32* %v3_15658, align 4
  %v0_1565c = load i32, i32* %r5.global-to-local, align 4
  %v1_1565c = add i32 %v0_1565c, 11
  %v2_1565c = inttoptr i32 %v1_1565c to i8*
  %v3_1565c = load i8, i8* %v2_1565c, align 1
  %v4_1565c = zext i8 %v3_1565c to i32
  store i32 %v4_1565c, i32* %r2.global-to-local, align 4
  %v1_15660 = add i32 %v0_1565c, 10
  %v2_15660 = inttoptr i32 %v1_15660 to i8*
  %v3_15660 = load i8, i8* %v2_15660, align 1
  %v4_15660 = zext i8 %v3_15660 to i32
  %v4_15664 = mul nuw nsw i32 %v4_1565c, 256
  %v5_15664 = or i32 %v4_15660, %v4_15664
  store i32 %v5_15664, i32* %r3.global-to-local, align 4
  %v1_15668 = load i32, i32* %r6.global-to-local, align 4
  %v2_15668 = add i32 %v1_15668, 20
  %v3_15668 = inttoptr i32 %v2_15668 to i32*
  store i32 %v5_15664, i32* %v3_15668, align 4
  %v0_1566c = load i32, i32* %r5.global-to-local, align 4
  %v1_1566c = add i32 %v0_1566c, 13
  %v2_1566c = inttoptr i32 %v1_1566c to i8*
  %v3_1566c = load i8, i8* %v2_1566c, align 1
  %v4_1566c = zext i8 %v3_1566c to i32
  store i32 %v4_1566c, i32* %r2.global-to-local, align 4
  %v1_15670 = add i32 %v0_1566c, 12
  %v2_15670 = inttoptr i32 %v1_15670 to i8*
  %v3_15670 = load i8, i8* %v2_15670, align 1
  %v4_15670 = zext i8 %v3_15670 to i32
  %v4_15674 = mul nuw nsw i32 %v4_1566c, 256
  %v5_15674 = or i32 %v4_15670, %v4_15674
  store i32 %v5_15674, i32* %r3.global-to-local, align 4
  %v1_15678 = load i32, i32* %r6.global-to-local, align 4
  %v2_15678 = add i32 %v1_15678, 24
  %v3_15678 = inttoptr i32 %v2_15678 to i32*
  store i32 %v5_15674, i32* %v3_15678, align 4
  %v0_1567c = load i32, i32* %r5.global-to-local, align 4
  %v1_1567c = add i32 %v0_1567c, 20
  %v2_1567c = inttoptr i32 %v1_1567c to i32*
  %v3_1567c = load i32, i32* %v2_1567c, align 4
  store i32 %v3_1567c, i32* %r3.global-to-local, align 4
  %v1_15680 = add i32 %v0_1567c, 14
  %v2_15680 = inttoptr i32 %v1_15680 to i8*
  %v3_15680 = load i8, i8* %v2_15680, align 1
  %v4_15680 = zext i8 %v3_15680 to i32
  store i32 %v4_15680, i32* %r0.global-to-local, align 4
  %v1_15684 = add i32 %v0_1567c, 15
  %v2_15684 = inttoptr i32 %v1_15684 to i8*
  %v3_15684 = load i8, i8* %v2_15684, align 1
  %v4_15684 = zext i8 %v3_15684 to i32
  store i32 %v4_15684, i32* %ip.global-to-local, align 4
  %v1_15688 = add i32 %v0_1567c, 16
  %v2_15688 = inttoptr i32 %v1_15688 to i32*
  %v3_15688 = load i32, i32* %v2_15688, align 4
  store i32 %v3_15688, i32* %r1.global-to-local, align 4
  %v1_1568c = load i32, i32* %r6.global-to-local, align 4
  %v2_1568c = add i32 %v1_1568c, 44
  %v3_1568c = inttoptr i32 %v2_1568c to i32*
  store i32 %v3_1567c, i32* %v3_1568c, align 4
  %v0_15690 = load i32, i32* %r5.global-to-local, align 4
  %v1_15690 = add i32 %v0_15690, 24
  %v2_15690 = inttoptr i32 %v1_15690 to i32*
  %v3_15690 = load i32, i32* %v2_15690, align 4
  store i32 %v3_15690, i32* %r3.global-to-local, align 4
  %v1_15694 = load i32, i32* %r6.global-to-local, align 4
  %v2_15694 = add i32 %v1_15694, 48
  %v3_15694 = inttoptr i32 %v2_15694 to i32*
  store i32 %v3_15690, i32* %v3_15694, align 4
  %v0_15698 = load i32, i32* %r5.global-to-local, align 4
  %v1_15698 = add i32 %v0_15698, 28
  %v2_15698 = inttoptr i32 %v1_15698 to i32*
  %v3_15698 = load i32, i32* %v2_15698, align 4
  store i32 %v3_15698, i32* %r3.global-to-local, align 4
  %v1_1569c = load i32, i32* %r6.global-to-local, align 4
  %v2_1569c = add i32 %v1_1569c, 52
  %v3_1569c = inttoptr i32 %v2_1569c to i32*
  store i32 %v3_15698, i32* %v3_1569c, align 4
  %v0_156a0 = load i32, i32* %r5.global-to-local, align 4
  %v1_156a0 = add i32 %v0_156a0, 32
  %v2_156a0 = inttoptr i32 %v1_156a0 to i32*
  %v3_156a0 = load i32, i32* %v2_156a0, align 4
  store i32 %v3_156a0, i32* %r3.global-to-local, align 4
  %v1_156a4 = load i32, i32* %r6.global-to-local, align 4
  %v2_156a4 = add i32 %v1_156a4, 56
  %v3_156a4 = inttoptr i32 %v2_156a4 to i32*
  store i32 %v3_156a0, i32* %v3_156a4, align 4
  %v0_156a8 = load i32, i32* %r5.global-to-local, align 4
  %v1_156a8 = add i32 %v0_156a8, 40
  %v2_156a8 = inttoptr i32 %v1_156a8 to i32*
  %v3_156a8 = load i32, i32* %v2_156a8, align 4
  store i32 %v3_156a8, i32* %r3.global-to-local, align 4
  %v1_156ac = load i32, i32* %r6.global-to-local, align 4
  %v2_156ac = add i32 %v1_156ac, 64
  %v3_156ac = inttoptr i32 %v2_156ac to i32*
  store i32 %v3_156a8, i32* %v3_156ac, align 4
  %v0_156b0 = load i32, i32* %r5.global-to-local, align 4
  %v1_156b0 = add i32 %v0_156b0, 48
  %v2_156b0 = inttoptr i32 %v1_156b0 to i32*
  %v3_156b0 = load i32, i32* %v2_156b0, align 4
  store i32 %v3_156b0, i32* %r3.global-to-local, align 4
  %v1_156b4 = load i32, i32* %r6.global-to-local, align 4
  %v2_156b4 = add i32 %v1_156b4, 72
  %v3_156b4 = inttoptr i32 %v2_156b4 to i32*
  store i32 %v3_156b0, i32* %v3_156b4, align 4
  %v0_156b8 = load i32, i32* %r5.global-to-local, align 4
  %v1_156b8 = add i32 %v0_156b8, 36
  %v2_156b8 = inttoptr i32 %v1_156b8 to i32*
  %v3_156b8 = load i32, i32* %v2_156b8, align 4
  store i32 %v3_156b8, i32* %r3.global-to-local, align 4
  %v1_156bc = load i32, i32* %r6.global-to-local, align 4
  %v2_156bc = add i32 %v1_156bc, 60
  %v3_156bc = inttoptr i32 %v2_156bc to i32*
  store i32 %v3_156b8, i32* %v3_156bc, align 4
  %v0_156c0 = load i32, i32* %r5.global-to-local, align 4
  %v1_156c0 = add i32 %v0_156c0, 44
  %v2_156c0 = inttoptr i32 %v1_156c0 to i32*
  %v3_156c0 = load i32, i32* %v2_156c0, align 4
  store i32 %v3_156c0, i32* %r3.global-to-local, align 4
  %v0_156c4 = load i32, i32* %r0.global-to-local, align 4
  %v1_156c4 = load i32, i32* %ip.global-to-local, align 4
  %v4_156c4 = mul i32 %v1_156c4, 256
  %v5_156c4 = or i32 %v4_156c4, %v0_156c4
  store i32 %v5_156c4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_156cc = load i32, i32* %r6.global-to-local, align 4
  %v2_156cc = add i32 %v1_156cc, 28
  %v3_156cc = inttoptr i32 %v2_156cc to i32*
  store i32 %v5_156c4, i32* %v3_156cc, align 4
  %v0_156d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_156d0 = load i32, i32* %r6.global-to-local, align 4
  %v2_156d0 = add i32 %v1_156d0, 32
  %v3_156d0 = inttoptr i32 %v2_156d0 to i32*
  store i32 %v0_156d0, i32* %v3_156d0, align 4
  %v0_156d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_156d4 = load i32, i32* %r6.global-to-local, align 4
  %v2_156d4 = add i32 %v1_156d4, 36
  %v3_156d4 = inttoptr i32 %v2_156d4 to i32*
  store i32 %v0_156d4, i32* %v3_156d4, align 4
  %v0_156d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_156d8 = load i32, i32* %r6.global-to-local, align 4
  %v2_156d8 = add i32 %v1_156d8, 68
  %v3_156d8 = inttoptr i32 %v2_156d8 to i32*
  store i32 %v0_156d8, i32* %v3_156d8, align 4
  %v0_156dc = load i32, i32* %r5.global-to-local, align 4
  %v1_156dc = add i32 %v0_156dc, 52
  %v2_156dc = inttoptr i32 %v1_156dc to i32*
  %v3_156dc = load i32, i32* %v2_156dc, align 4
  store i32 %v3_156dc, i32* %r3.global-to-local, align 4
  %v1_156e0 = load i32, i32* %r6.global-to-local, align 4
  %v2_156e0 = add i32 %v1_156e0, 76
  %v3_156e0 = inttoptr i32 %v2_156e0 to i32*
  store i32 %v3_156dc, i32* %v3_156e0, align 4
  %v2_156e4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_156e4, i32* %r4.global-to-local, align 4
  ret i32 %v5_156c4

; uselistorder directives
  uselistorder i32 %v0_1567c, { 1, 0, 2, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 5, 4, 0 }
  uselistorder i32 76, { 2, 0, 1 }
  uselistorder i32 68, { 2, 0, 1 }
  uselistorder i32 60, { 3, 1, 2, 0, 4 }
  uselistorder i32 72, { 2, 0, 1 }
  uselistorder i32 64, { 16, 12, 13, 0, 7, 46, 8, 14, 9, 15, 17, 18, 10, 19, 20, 21, 1, 22, 23, 24, 2, 25, 26, 27, 11, 28, 29, 30, 3, 31, 32, 33, 4, 34, 35, 36, 37, 38, 5, 39, 40, 41, 42, 43, 6, 44, 45 }
  uselistorder i32 56, { 4, 2, 3, 6, 5, 0, 1 }
  uselistorder i32 52, { 2, 3, 0, 1, 4, 5, 6 }
  uselistorder i32 15, { 18, 17, 16, 2, 0, 26, 3, 27, 4, 28, 5, 29, 6, 30, 7, 31, 8, 9, 10, 11, 12, 13, 14, 19, 20, 15, 21, 22, 23, 24, 1, 25 }
  uselistorder i32 14, { 9, 8, 17, 7, 1, 2, 3, 4, 5, 10, 11, 6, 12, 13, 14, 15, 0, 16 }
  uselistorder i32 13, { 16, 12, 11, 4, 2, 13, 14, 15, 46, 0, 1, 5, 6, 7, 8, 17, 18, 19, 20, 21, 9, 22, 23, 24, 25, 26, 27, 28, 29, 10, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 3, 44, 45 }
  uselistorder i32 9, { 45, 46, 47, 10, 5, 67, 6, 39, 7, 62, 34, 12, 38, 13, 37, 11, 3, 63, 35, 64, 2, 36, 66, 14, 40, 41, 15, 16, 42, 17, 43, 18, 44, 0, 19, 20, 21, 22, 1, 23, 24, 65, 48, 49, 8, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 4, 61, 25, 26, 27, 28, 29, 30, 31, 32, 33, 68, 69, 9, 70 }
  uselistorder i32 (i8*, i32)* @function_13ad0, { 2, 0, 8, 7, 1, 3, 4, 5, 6 }
  uselistorder i32 88, { 2, 0, 1, 3 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
}

define i32 @function_156e8(i32 %arg1) local_unnamed_addr {
dec_label_pc_156e8:
  ret i32 %arg1
}

define i32 @function_156f0() local_unnamed_addr {
dec_label_pc_156f0:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_156f0 = load i32, i32* @r1, align 4
  %v1_156f0 = load i32, i32* @r0, align 4
  %v2_156f0 = sub i32 %v0_156f0, %v1_156f0
  %v3_156f0 = icmp ult i32 %v0_156f0, %v1_156f0
  %v4_156f0 = xor i32 %v1_156f0, %v0_156f0
  %v5_156f0 = xor i32 %v2_156f0, %v0_156f0
  %v6_156f0 = and i32 %v5_156f0, %v4_156f0
  %v7_156f0 = icmp slt i32 %v6_156f0, 0
  store i1 %v7_156f0, i1* %cpsr_v.global-to-local, align 1
  %v8_156f0 = icmp slt i32 %v2_156f0, 0
  store i1 %v8_156f0, i1* %cpsr_n.global-to-local, align 1
  %v9_156f0 = icmp eq i32 %v0_156f0, %v1_156f0
  store i1 %v9_156f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_156f0, label %dec_label_pc_1593c, label %dec_label_pc_156f8

dec_label_pc_156f8:                               ; preds = %dec_label_pc_156f0
  br i1 %v9_156f0, label %.thread122, label %bb

.thread122:                                       ; preds = %bb144, %.thread121, %bb141, %dec_label_pc_156f8
  %merge = phi i32 [ %v0_156f0, %dec_label_pc_156f8 ], [ %v2_159d0, %bb141 ], [ %v11_159ec, %bb144 ], [ %v7_159ec, %.thread121 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_156f8
  store i32 %v1_156f0, i32* %stack_var_-8, align 4
  %v0_15700 = load i32, i32* @r2, align 4
  %v2_15700 = add i32 %v0_15700, -4
  store i32 %v2_15700, i32* %r2.global-to-local, align 4
  %v4_15700 = sub i32 3, %v0_15700
  %v5_15700 = and i32 %v4_15700, %v0_15700
  %v6_15700 = icmp slt i32 %v5_15700, 0
  store i1 %v6_15700, i1* %cpsr_v.global-to-local, align 1
  %v7_15700 = icmp slt i32 %v2_15700, 0
  store i1 %v7_15700, i1* %cpsr_n.global-to-local, align 1
  %v8_15700 = icmp eq i32 %v0_15700, 4
  store i1 %v8_15700, i1* %cpsr_z.global-to-local, align 1
  %v5_15704 = icmp slt i32 %v0_15700, 4
  br i1 %v5_15704, label %bb131, label %dec_label_pc_15708

dec_label_pc_15708:                               ; preds = %bb
  %v1_15708 = urem i32 %v1_156f0, 4
  store i32 %v1_15708, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15708 = icmp eq i32 %v1_15708, 0
  store i1 %v2_15708, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15708, label %dec_label_pc_15710, label %dec_label_pc_157b4

dec_label_pc_15710:                               ; preds = %dec_label_pc_15708
  %v1_15710 = urem i32 %v0_156f0, 4
  store i32 %v1_15710, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15710 = icmp eq i32 %v1_15710, 0
  store i1 %v2_15710, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_156f0 to i2
  br i1 %v2_15710, label %dec_label_pc_15718, label %dec_label_pc_157e4

dec_label_pc_15718:                               ; preds = %dec_label_pc_15710, %dec_label_pc_157dc
  %v0_1573092 = phi i32 [ %v1_156f0, %dec_label_pc_15710 ], [ %v0_1582c75, %dec_label_pc_157dc ]
  %v0_1572c91 = phi i32 [ %v0_156f0, %dec_label_pc_15710 ], [ %v0_157dc, %dec_label_pc_157dc ]
  %v0_15718 = phi i32 [ %v2_15700, %dec_label_pc_15710 ], [ %v2_157d4, %dec_label_pc_157dc ]
  %v2_15718 = add i32 %v0_15718, -8
  store i32 %v2_15718, i32* %r2.global-to-local, align 4
  %v4_15718 = sub i32 7, %v0_15718
  %v5_15718 = and i32 %v4_15718, %v0_15718
  %v6_15718 = icmp slt i32 %v5_15718, 0
  store i1 %v6_15718, i1* %cpsr_v.global-to-local, align 1
  %v7_15718 = icmp slt i32 %v2_15718, 0
  store i1 %v7_15718, i1* %cpsr_n.global-to-local, align 1
  %v8_15718 = icmp eq i32 %v0_15718, 8
  store i1 %v8_15718, i1* %cpsr_z.global-to-local, align 1
  %v5_1571c = icmp slt i32 %v0_15718, 8
  br i1 %v5_1571c, label %dec_label_pc_1576c, label %dec_label_pc_15720

dec_label_pc_15720:                               ; preds = %dec_label_pc_15718
  %v2_15720 = add i32 %v0_15718, -28
  store i32 %v2_15720, i32* %r2.global-to-local, align 4
  %v4_15720 = sub i32 27, %v0_15718
  %v5_15720 = and i32 %v4_15720, %v2_15718
  %v6_15720 = icmp slt i32 %v5_15720, 0
  store i1 %v6_15720, i1* %cpsr_v.global-to-local, align 1
  %v7_15720 = icmp slt i32 %v2_15720, 0
  store i1 %v7_15720, i1* %cpsr_n.global-to-local, align 1
  %v8_15720 = icmp eq i32 %v2_15718, 20
  store i1 %v8_15720, i1* %cpsr_z.global-to-local, align 1
  %v5_15724 = icmp slt i32 %v2_15718, 20
  br i1 %v5_15724, label %dec_label_pc_15758, label %dec_label_pc_15728

dec_label_pc_15728:                               ; preds = %dec_label_pc_15720
  %v0_15728 = load i32, i32* @r4, align 4
  store i32 %v0_15728, i32* %stack_var_-12, align 4
  br label %dec_label_pc_1572c

dec_label_pc_1572c:                               ; preds = %dec_label_pc_1572c.dec_label_pc_1572c_crit_edge, %dec_label_pc_15728
  %v0_15730 = phi i32 [ %v12_15738, %dec_label_pc_1572c.dec_label_pc_1572c_crit_edge ], [ %v0_1573092, %dec_label_pc_15728 ]
  %v0_1572c = phi i32 [ %v0_1572c.pre, %dec_label_pc_1572c.dec_label_pc_1572c_crit_edge ], [ %v0_1572c91, %dec_label_pc_15728 ]
  %v1_1572c = inttoptr i32 %v0_1572c to i32*
  %v2_1572c = load i32, i32* %v1_1572c, align 4
  store i32 %v2_1572c, i32* %r3.global-to-local, align 4
  %v3_1572c = add i32 %v0_1572c, 4
  %v4_1572c = inttoptr i32 %v3_1572c to i32*
  %v5_1572c = load i32, i32* %v4_1572c, align 4
  store i32 %v5_1572c, i32* %r4.global-to-local, align 4
  %v6_1572c = add i32 %v0_1572c, 8
  %v7_1572c = inttoptr i32 %v6_1572c to i32*
  %v8_1572c = load i32, i32* %v7_1572c, align 4
  store i32 %v8_1572c, i32* %ip.global-to-local, align 4
  %v9_1572c = add i32 %v0_1572c, 12
  %v10_1572c = inttoptr i32 %v9_1572c to i32*
  %v11_1572c = load i32, i32* %v10_1572c, align 4
  store i32 %v11_1572c, i32* %lr.global-to-local, align 4
  %v12_1572c = add i32 %v0_1572c, 16
  store i32 %v12_1572c, i32* %r1.global-to-local, align 4
  %v1_15730 = inttoptr i32 %v0_15730 to i32*
  store i32 %v2_1572c, i32* %v1_15730, align 4
  %v3_15730 = add i32 %v0_15730, 4
  %v4_15730 = inttoptr i32 %v3_15730 to i32*
  %v5_15730 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15730, i32* %v4_15730, align 4
  %v6_15730 = add i32 %v0_15730, 8
  %v7_15730 = inttoptr i32 %v6_15730 to i32*
  %v8_15730 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_15730, i32* %v7_15730, align 4
  %v9_15730 = add i32 %v0_15730, 12
  %v10_15730 = inttoptr i32 %v9_15730 to i32*
  %v11_15730 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_15730, i32* %v10_15730, align 4
  %v12_15730 = add i32 %v0_15730, 16
  store i32 %v12_15730, i32* %r0.global-to-local, align 4
  %v0_15734 = load i32, i32* %r1.global-to-local, align 4
  %v1_15734 = inttoptr i32 %v0_15734 to i32*
  %v2_15734 = load i32, i32* %v1_15734, align 4
  store i32 %v2_15734, i32* %r3.global-to-local, align 4
  %v3_15734 = add i32 %v0_15734, 4
  %v4_15734 = inttoptr i32 %v3_15734 to i32*
  %v5_15734 = load i32, i32* %v4_15734, align 4
  store i32 %v5_15734, i32* %r4.global-to-local, align 4
  %v6_15734 = add i32 %v0_15734, 8
  %v7_15734 = inttoptr i32 %v6_15734 to i32*
  %v8_15734 = load i32, i32* %v7_15734, align 4
  store i32 %v8_15734, i32* @ip, align 4
  %v9_15734 = add i32 %v0_15734, 12
  %v10_15734 = inttoptr i32 %v9_15734 to i32*
  %v11_15734 = load i32, i32* %v10_15734, align 4
  store i32 %v11_15734, i32* @lr, align 4
  %v12_15734 = add i32 %v0_15734, 16
  store i32 %v12_15734, i32* @r1, align 4
  %v1_15738 = inttoptr i32 %v12_15730 to i32*
  store i32 %v2_15734, i32* %v1_15738, align 4
  %v3_15738 = add i32 %v0_15730, 20
  %v4_15738 = inttoptr i32 %v3_15738 to i32*
  %v5_15738 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15738, i32* %v4_15738, align 4
  %v6_15738 = add i32 %v0_15730, 24
  %v7_15738 = inttoptr i32 %v6_15738 to i32*
  %v8_15738 = load i32, i32* @ip, align 4
  store i32 %v8_15738, i32* %v7_15738, align 4
  %v9_15738 = add i32 %v0_15730, 28
  %v10_15738 = inttoptr i32 %v9_15738 to i32*
  %v11_15738 = load i32, i32* @lr, align 4
  store i32 %v11_15738, i32* %v10_15738, align 4
  %v12_15738 = add i32 %v0_15730, 32
  store i32 %v12_15738, i32* @r0, align 4
  %v0_1573c = load i32, i32* %r2.global-to-local, align 4
  %v2_1573c = add i32 %v0_1573c, -32
  store i32 %v2_1573c, i32* %r2.global-to-local, align 4
  %v6_15740 = icmp slt i32 %v0_1573c, 32
  br i1 %v6_15740, label %dec_label_pc_15744, label %dec_label_pc_1572c.dec_label_pc_1572c_crit_edge

dec_label_pc_1572c.dec_label_pc_1572c_crit_edge:  ; preds = %dec_label_pc_1572c
  %v0_1572c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_1572c

dec_label_pc_15744:                               ; preds = %dec_label_pc_1572c
  %v4_15744 = add i32 %v0_1573c, -16
  %v6_15744 = add i32 %v0_1573c, 2147483616
  %v7_15744 = and i32 %v4_15744, %v6_15744
  %v8_15744 = icmp slt i32 %v7_15744, 0
  store i1 %v8_15744, i1* %cpsr_v.global-to-local, align 1
  %v9_15744 = icmp slt i32 %v4_15744, 0
  store i1 %v9_15744, i1* %cpsr_n.global-to-local, align 1
  %v10_15744 = icmp eq i32 %v4_15744, 0
  store i1 %v10_15744, i1* %cpsr_z.global-to-local, align 1
  %v5_15748 = icmp slt i32 %v2_1573c, -16
  br i1 %v5_15748, label %.thread1, label %bb128

bb128:                                            ; preds = %dec_label_pc_15744
  %v6_15748 = load i32, i32* @r1, align 4
  %v7_15748 = inttoptr i32 %v6_15748 to i32*
  %v8_15748 = load i32, i32* %v7_15748, align 4
  store i32 %v8_15748, i32* %r3.global-to-local, align 4
  %v9_15748 = add i32 %v6_15748, 4
  %v10_15748 = inttoptr i32 %v9_15748 to i32*
  %v11_15748 = load i32, i32* %v10_15748, align 4
  store i32 %v11_15748, i32* %r4.global-to-local, align 4
  %v12_15748 = add i32 %v6_15748, 8
  %v13_15748 = inttoptr i32 %v12_15748 to i32*
  %v14_15748 = load i32, i32* %v13_15748, align 4
  store i32 %v14_15748, i32* @ip, align 4
  %v15_15748 = add i32 %v6_15748, 12
  %v16_15748 = inttoptr i32 %v15_15748 to i32*
  %v17_15748 = load i32, i32* %v16_15748, align 4
  store i32 %v17_15748, i32* @lr, align 4
  %v18_15748 = add i32 %v6_15748, 16
  store i32 %v18_15748, i32* @r1, align 4
  %v7_1574c = inttoptr i32 %v12_15738 to i32*
  store i32 %v8_15748, i32* %v7_1574c, align 4
  %v9_1574c = add i32 %v0_15730, 36
  %v10_1574c = inttoptr i32 %v9_1574c to i32*
  %v11_1574c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v11_1574c, i32* %v10_1574c, align 4
  %v12_1574c = add i32 %v0_15730, 40
  %v13_1574c = inttoptr i32 %v12_1574c to i32*
  %v14_1574c = load i32, i32* @ip, align 4
  store i32 %v14_1574c, i32* %v13_1574c, align 4
  %v15_1574c = add i32 %v0_15730, 44
  %v16_1574c = inttoptr i32 %v15_1574c to i32*
  %v17_1574c = load i32, i32* @lr, align 4
  store i32 %v17_1574c, i32* %v16_1574c, align 4
  %v18_1574c = add i32 %v0_15730, 48
  store i32 %v18_1574c, i32* @r0, align 4
  %v6_15750 = load i32, i32* %r2.global-to-local, align 4
  %v7_15750 = add i32 %v6_15750, -16
  store i32 %v7_15750, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_15744, %bb128
  %v3_15760101 = phi i32 [ %v12_15738, %dec_label_pc_15744 ], [ %v18_1574c, %bb128 ]
  %v0_1575895 = phi i32 [ %v2_1573c, %dec_label_pc_15744 ], [ %v7_15750, %bb128 ]
  %v2_15754 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15754, i32* @r4, align 4
  br label %dec_label_pc_15758

dec_label_pc_15758:                               ; preds = %dec_label_pc_15720, %.thread1
  %v3_15760100 = phi i32 [ %v0_1573092, %dec_label_pc_15720 ], [ %v3_15760101, %.thread1 ]
  %v0_15758 = phi i32 [ %v2_15720, %dec_label_pc_15720 ], [ %v0_1575895, %.thread1 ]
  %v1_15758 = add i32 %v0_15758, 20
  store i32 %v1_15758, i32* %r2.global-to-local, align 4
  %v3_15758 = sub i32 0, %v0_15758
  %v4_15758 = and i32 %v1_15758, %v3_15758
  %v5_15758 = icmp slt i32 %v4_15758, 0
  store i1 %v5_15758, i1* %cpsr_v.global-to-local, align 1
  %v6_15758 = icmp slt i32 %v1_15758, 0
  store i1 %v6_15758, i1* %cpsr_n.global-to-local, align 1
  %v7_15758 = icmp eq i32 %v1_15758, 0
  store i1 %v7_15758, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1575c

dec_label_pc_1575c:                               ; preds = %.thread117, %dec_label_pc_15758
  %v0_1576c.pre147 = phi i32 [ %v0_1576c.pre, %.thread117 ], [ %v1_15758, %dec_label_pc_15758 ]
  %v3_15760 = phi i32 [ %v3_1576098118, %.thread117 ], [ %v3_15760100, %dec_label_pc_15758 ]
  %v1_15764 = phi i1 [ %v1_15768, %.thread117 ], [ %v5_15758, %dec_label_pc_15758 ]
  %v0_15764 = phi i1 [ %v0_15768, %.thread117 ], [ %v6_15758, %dec_label_pc_15758 ]
  %v2_1575c = xor i1 %v1_15764, %v0_15764
  br i1 %v2_1575c, label %.thread117, label %bb129

bb129:                                            ; preds = %dec_label_pc_1575c
  %v3_1575c = load i32, i32* @r1, align 4
  %v4_1575c = inttoptr i32 %v3_1575c to i32*
  %v5_1575c = load i32, i32* %v4_1575c, align 4
  store i32 %v5_1575c, i32* %r3.global-to-local, align 4
  %v6_1575c = add i32 %v3_1575c, 4
  %v7_1575c = inttoptr i32 %v6_1575c to i32*
  %v8_1575c = load i32, i32* %v7_1575c, align 4
  store i32 %v8_1575c, i32* @ip, align 4
  %v9_1575c = add i32 %v3_1575c, 8
  %v10_1575c = inttoptr i32 %v9_1575c to i32*
  %v11_1575c = load i32, i32* %v10_1575c, align 4
  store i32 %v11_1575c, i32* @lr, align 4
  %v12_1575c = add i32 %v3_1575c, 12
  store i32 %v12_1575c, i32* @r1, align 4
  %v4_15760 = inttoptr i32 %v3_15760 to i32*
  store i32 %v5_1575c, i32* %v4_15760, align 4
  %v6_15760 = add i32 %v3_15760, 4
  %v7_15760 = inttoptr i32 %v6_15760 to i32*
  %v8_15760 = load i32, i32* @ip, align 4
  store i32 %v8_15760, i32* %v7_15760, align 4
  %v9_15760 = add i32 %v3_15760, 8
  %v10_15760 = inttoptr i32 %v9_15760 to i32*
  %v11_15760 = load i32, i32* @lr, align 4
  store i32 %v11_15760, i32* %v10_15760, align 4
  %v12_15760 = add i32 %v3_15760, 12
  store i32 %v12_15760, i32* @r0, align 4
  %v3_15764 = load i32, i32* %r2.global-to-local, align 4
  %v4_15764 = add i32 %v3_15764, -12
  store i32 %v4_15764, i32* %r2.global-to-local, align 4
  %v6_15764 = sub i32 11, %v3_15764
  %v7_15764 = and i32 %v6_15764, %v3_15764
  %v8_15764 = icmp slt i32 %v7_15764, 0
  store i1 %v8_15764, i1* %cpsr_v.global-to-local, align 1
  %v9_15764 = icmp slt i32 %v4_15764, 0
  store i1 %v9_15764, i1* %cpsr_n.global-to-local, align 1
  %v10_15764 = icmp eq i32 %v3_15764, 12
  store i1 %v10_15764, i1* %cpsr_z.global-to-local, align 1
  br label %.thread117

.thread117:                                       ; preds = %dec_label_pc_1575c, %bb129
  %v0_1576c.pre = phi i32 [ %v4_15764, %bb129 ], [ %v0_1576c.pre147, %dec_label_pc_1575c ]
  %v3_1576098118 = phi i32 [ %v12_15760, %bb129 ], [ %v3_15760, %dec_label_pc_1575c ]
  %v1_15768 = phi i1 [ %v8_15764, %bb129 ], [ %v1_15764, %dec_label_pc_1575c ]
  %v0_15768 = phi i1 [ %v9_15764, %bb129 ], [ %v0_15764, %dec_label_pc_1575c ]
  %v2_15768 = xor i1 %v1_15768, %v0_15768
  br i1 %v2_15768, label %dec_label_pc_1576c, label %dec_label_pc_1575c

dec_label_pc_1576c:                               ; preds = %.thread117, %dec_label_pc_15718
  %v7_1577c = phi i32 [ %v0_1573092, %dec_label_pc_15718 ], [ %v3_1576098118, %.thread117 ]
  %v0_1576c = phi i32 [ %v2_15718, %dec_label_pc_15718 ], [ %v0_1576c.pre, %.thread117 ]
  %v2_1576c = add i32 %v0_1576c, 8
  store i32 %v2_1576c, i32* %r2.global-to-local, align 4
  %v4_1576c = sub i32 0, %v0_1576c
  %v5_1576c = and i32 %v2_1576c, %v4_1576c
  %v6_1576c = icmp slt i32 %v5_1576c, 0
  store i1 %v6_1576c, i1* %cpsr_v.global-to-local, align 1
  %v7_1576c = icmp slt i32 %v2_1576c, 0
  store i1 %v7_1576c, i1* %cpsr_n.global-to-local, align 1
  %v8_1576c = icmp eq i32 %v2_1576c, 0
  store i1 %v8_1576c, i1* %cpsr_z.global-to-local, align 1
  %v5_15770 = icmp slt i32 %v0_1576c, -8
  br i1 %v5_15770, label %bb131, label %dec_label_pc_15774

dec_label_pc_15774:                               ; preds = %dec_label_pc_1576c
  %v6_15774 = add i32 %v0_1576c, 4
  store i32 %v6_15774, i32* %r2.global-to-local, align 4
  %v8_15774 = sub i32 -5, %v0_1576c
  %v9_15774 = and i32 %v8_15774, %v2_1576c
  %v10_15774 = icmp slt i32 %v9_15774, 0
  store i1 %v10_15774, i1* %cpsr_v.global-to-local, align 1
  %v11_15774 = icmp slt i32 %v6_15774, 0
  store i1 %v11_15774, i1* %cpsr_n.global-to-local, align 1
  %v12_15774 = icmp eq i32 %v2_1576c, 4
  store i1 %v12_15774, i1* %cpsr_z.global-to-local, align 1
  %v5_15778 = icmp slt i32 %v2_1576c, 4
  %v6_15778 = load i32, i32* @r1, align 4
  %v7_15778 = inttoptr i32 %v6_15778 to i32*
  %v8_15778 = load i32, i32* %v7_15778, align 4
  store i32 %v8_15778, i32* %r3.global-to-local, align 4
  %v10_15778 = add i32 %v6_15778, 4
  br i1 %v5_15778, label %.thread5, label %bb130

.thread5:                                         ; preds = %dec_label_pc_15774
  store i32 %v10_15778, i32* @r1, align 4
  %v8_1577c = inttoptr i32 %v7_1577c to i32*
  store i32 %v8_15778, i32* %v8_1577c, align 4
  %v9_1577c = load i32, i32* @r0, align 4
  %v10_1577c = add i32 %v9_1577c, 4
  store i32 %v10_1577c, i32* @r0, align 4
  %v0_1578c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb131

bb130:                                            ; preds = %dec_label_pc_15774
  %v10_15780 = inttoptr i32 %v10_15778 to i32*
  %v11_15780 = load i32, i32* %v10_15780, align 4
  store i32 %v11_15780, i32* @ip, align 4
  %v12_15780 = add i32 %v6_15778, 8
  store i32 %v12_15780, i32* @r1, align 4
  %v7_15784 = inttoptr i32 %v7_1577c to i32*
  store i32 %v8_15778, i32* %v7_15784, align 4
  %v9_15784 = add i32 %v7_1577c, 4
  %v10_15784 = inttoptr i32 %v9_15784 to i32*
  %v11_15784 = load i32, i32* @ip, align 4
  store i32 %v11_15784, i32* %v10_15784, align 4
  %v12_15784 = add i32 %v7_1577c, 8
  store i32 %v12_15784, i32* @r0, align 4
  %v6_15788 = load i32, i32* %r2.global-to-local, align 4
  %v7_15788 = add i32 %v6_15788, -4
  store i32 %v7_15788, i32* %r2.global-to-local, align 4
  br label %bb131

bb131:                                            ; preds = %.thread5, %.thread11, %dec_label_pc_1576c, %bb, %dec_label_pc_15934, %dec_label_pc_158c8, %dec_label_pc_1585c, %bb130
  %v2_1579c = phi i32 [ %v10_1577c, %.thread5 ], [ %v0_1582c75, %.thread11 ], [ %v7_1577c, %dec_label_pc_1576c ], [ %v1_156f0, %bb ], [ %v2_1579c113, %dec_label_pc_15934 ], [ %v2_1579c112, %dec_label_pc_158c8 ], [ %v2_1579c111, %dec_label_pc_1585c ], [ %v12_15784, %bb130 ]
  %v0_1578c = phi i32 [ %v0_1578c.pre, %.thread5 ], [ %v2_157d4, %.thread11 ], [ %v2_1576c, %dec_label_pc_1576c ], [ %v2_15700, %bb ], [ %v0_1578c109, %dec_label_pc_15934 ], [ %v0_1578c108, %dec_label_pc_158c8 ], [ %v0_1578c107, %dec_label_pc_1585c ], [ %v7_15788, %bb130 ]
  %v1_1578c = add i32 %v0_1578c, 4
  store i32 %v1_1578c, i32* @r2, align 4
  %v3_1578c = sub i32 0, %v0_1578c
  %v4_1578c = and i32 %v1_1578c, %v3_1578c
  %v5_1578c = icmp slt i32 %v4_1578c, 0
  store i1 %v5_1578c, i1* %cpsr_v.global-to-local, align 1
  %v6_1578c = icmp slt i32 %v1_1578c, 0
  store i1 %v6_1578c, i1* %cpsr_n.global-to-local, align 1
  %v7_1578c = icmp eq i32 %v1_1578c, 0
  store i1 %v7_1578c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1578c, label %bb132, label %bb133

bb132:                                            ; preds = %bb131
  %v3_15790 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_15790, i32* %r0.global-to-local, align 4
  ret i32 %v3_15790

bb133:                                            ; preds = %bb131
  %v1_15794 = add i32 %v0_1578c, 2
  %v3_15794 = sub i32 -3, %v0_1578c
  %v4_15794 = and i32 %v3_15794, %v1_1578c
  %v5_15794 = icmp slt i32 %v4_15794, 0
  store i1 %v5_15794, i1* %cpsr_v.global-to-local, align 1
  %v6_15794 = icmp slt i32 %v1_15794, 0
  store i1 %v6_15794, i1* %cpsr_n.global-to-local, align 1
  %v7_15794 = icmp eq i32 %v1_1578c, 2
  store i1 %v7_15794, i1* %cpsr_z.global-to-local, align 1
  %v0_15798 = load i32, i32* @r1, align 4
  %v1_15798 = inttoptr i32 %v0_15798 to i8*
  %v2_15798 = load i8, i8* %v1_15798, align 1
  %v3_15798 = zext i8 %v2_15798 to i32
  store i32 %v3_15798, i32* %r3.global-to-local, align 4
  %v5_15798 = add i32 %v0_15798, 1
  store i32 %v5_15798, i32* %r1.global-to-local, align 4
  %v3_1579c = inttoptr i32 %v2_1579c to i8*
  store i8 %v2_15798, i8* %v3_1579c, align 1
  %v4_1579c = load i32, i32* @r0, align 4
  %v5_1579c = add i32 %v4_1579c, 1
  store i32 %v5_1579c, i32* %r0.global-to-local, align 4
  %v0_157a0 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_157a0 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_157a0 = xor i1 %v0_157a0, %v1_157a0
  br i1 %v2_157a0, label %.thread119, label %bb134

bb134:                                            ; preds = %bb133
  %v3_157a0 = load i32, i32* %r1.global-to-local, align 4
  %v4_157a0 = inttoptr i32 %v3_157a0 to i8*
  %v5_157a0 = load i8, i8* %v4_157a0, align 1
  %v6_157a0 = zext i8 %v5_157a0 to i32
  store i32 %v6_157a0, i32* %r3.global-to-local, align 4
  %v8_157a0 = add i32 %v3_157a0, 1
  store i32 %v8_157a0, i32* %r1.global-to-local, align 4
  %v6_157a4 = inttoptr i32 %v5_1579c to i8*
  store i8 %v5_157a0, i8* %v6_157a4, align 1
  %v7_157a4 = load i32, i32* %r0.global-to-local, align 4
  %v8_157a4 = add i32 %v7_157a4, 1
  store i32 %v8_157a4, i32* %r0.global-to-local, align 4
  %v1_157a8.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_157a8.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread119

.thread119:                                       ; preds = %bb133, %bb134
  %v7_157ac = phi i32 [ %v8_157a4, %bb134 ], [ %v5_1579c, %bb133 ]
  %v2_157ac = phi i1 [ %v2_157a8.pre, %bb134 ], [ %v1_157a0, %bb133 ]
  %v1_157ac = phi i1 [ %v1_157a8.pre, %bb134 ], [ %v0_157a0, %bb133 ]
  %v0_157a8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_157a8 = xor i1 %v2_157ac, %v1_157ac
  %v4_157a8 = or i1 %v0_157a8, %v3_157a8
  br i1 %v4_157a8, label %.thread120, label %bb135

bb135:                                            ; preds = %.thread119
  %v5_157a8 = load i32, i32* %r1.global-to-local, align 4
  %v6_157a8 = inttoptr i32 %v5_157a8 to i8*
  %v7_157a8 = load i8, i8* %v6_157a8, align 1
  %v8_157a8 = zext i8 %v7_157a8 to i32
  store i32 %v8_157a8, i32* %r3.global-to-local, align 4
  %v10_157a8 = add i32 %v5_157a8, 1
  store i32 %v10_157a8, i32* %r1.global-to-local, align 4
  %v8_157ac = inttoptr i32 %v7_157ac to i8*
  store i8 %v7_157a8, i8* %v8_157ac, align 1
  %v9_157ac = load i32, i32* %r0.global-to-local, align 4
  %v10_157ac = add i32 %v9_157ac, 1
  store i32 %v10_157ac, i32* %r0.global-to-local, align 4
  br label %.thread120

.thread120:                                       ; preds = %.thread119, %bb135
  %v2_157b0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_157b0, i32* %r0.global-to-local, align 4
  ret i32 %v2_157b0

dec_label_pc_157b4:                               ; preds = %dec_label_pc_15708
  %v1_157b4 = sub nsw i32 4, %v1_15708
  store i32 %v1_157b4, i32* @ip, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_157b8 = icmp ult i32 %v1_157b4, 2
  store i1 %v8_157b8, i1* %cpsr_n.global-to-local, align 1
  %v9_157b8 = icmp eq i32 %v1_157b4, 2
  store i1 %v9_157b8, i1* %cpsr_z.global-to-local, align 1
  %v1_157bc = inttoptr i32 %v0_156f0 to i8*
  %v2_157bc = load i8, i8* %v1_157bc, align 1
  %v3_157bc = zext i8 %v2_157bc to i32
  store i32 %v3_157bc, i32* %r3.global-to-local, align 4
  %v5_157bc = add i32 %v0_156f0, 1
  store i32 %v5_157bc, i32* @r1, align 4
  %v3_157c0 = inttoptr i32 %v1_156f0 to i8*
  store i8 %v2_157bc, i8* %v3_157c0, align 1
  %v4_157c0 = load i32, i32* @r0, align 4
  %v5_157c0 = add i32 %v4_157c0, 1
  store i32 %v5_157c0, i32* @r0, align 4
  br i1 %v8_157b8, label %.thread11, label %bb136

bb136:                                            ; preds = %dec_label_pc_157b4
  %v6_157c4 = load i32, i32* @r1, align 4
  %v7_157c4 = inttoptr i32 %v6_157c4 to i8*
  %v8_157c4 = load i8, i8* %v7_157c4, align 1
  %v9_157c4 = zext i8 %v8_157c4 to i32
  store i32 %v9_157c4, i32* %r3.global-to-local, align 4
  %v11_157c4 = add i32 %v6_157c4, 1
  store i32 %v11_157c4, i32* @r1, align 4
  %v9_157c8 = inttoptr i32 %v5_157c0 to i8*
  store i8 %v8_157c4, i8* %v9_157c8, align 1
  %v10_157c8 = load i32, i32* @r0, align 4
  %v11_157c8 = add i32 %v10_157c8, 1
  store i32 %v11_157c8, i32* @r0, align 4
  br i1 %v9_157b8, label %.thread11, label %bb137

bb137:                                            ; preds = %bb136
  %v8_157cc = load i32, i32* @r1, align 4
  %v9_157cc = inttoptr i32 %v8_157cc to i8*
  %v10_157cc = load i8, i8* %v9_157cc, align 1
  %v11_157cc = zext i8 %v10_157cc to i32
  store i32 %v11_157cc, i32* %r3.global-to-local, align 4
  %v13_157cc = add i32 %v8_157cc, 1
  store i32 %v13_157cc, i32* @r1, align 4
  %v11_157d0 = inttoptr i32 %v11_157c8 to i8*
  store i8 %v10_157cc, i8* %v11_157d0, align 1
  %v12_157d0 = load i32, i32* @r0, align 4
  %v13_157d0 = add i32 %v12_157d0, 1
  store i32 %v13_157d0, i32* @r0, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb136, %dec_label_pc_157b4, %bb137
  %v0_1582c75 = phi i32 [ %v11_157c8, %bb136 ], [ %v5_157c0, %dec_label_pc_157b4 ], [ %v13_157d0, %bb137 ]
  %v0_157d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_157d4 = load i32, i32* @ip, align 4
  %v2_157d4 = sub i32 %v0_157d4, %v1_157d4
  store i32 %v2_157d4, i32* %r2.global-to-local, align 4
  %v4_157d4 = xor i32 %v1_157d4, %v0_157d4
  %v5_157d4 = xor i32 %v2_157d4, %v0_157d4
  %v6_157d4 = and i32 %v5_157d4, %v4_157d4
  %v7_157d4 = icmp slt i32 %v6_157d4, 0
  store i1 %v7_157d4, i1* %cpsr_v.global-to-local, align 1
  %v8_157d4 = icmp slt i32 %v2_157d4, 0
  store i1 %v8_157d4, i1* %cpsr_n.global-to-local, align 1
  %v9_157d4 = icmp eq i32 %v0_157d4, %v1_157d4
  store i1 %v9_157d4, i1* %cpsr_z.global-to-local, align 1
  %v5_157d8 = icmp slt i32 %v0_157d4, %v1_157d4
  br i1 %v5_157d8, label %bb131, label %dec_label_pc_157dc

dec_label_pc_157dc:                               ; preds = %.thread11
  %v0_157dc = load i32, i32* @r1, align 4
  %v1_157dc = urem i32 %v0_157dc, 4
  store i32 %v1_157dc, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_157dc = icmp eq i32 %v1_157dc, 0
  store i1 %v2_157dc, i1* %cpsr_z.global-to-local, align 1
  %extract.t123 = trunc i32 %v0_157dc to i2
  br i1 %v2_157dc, label %dec_label_pc_15718, label %dec_label_pc_157e4

dec_label_pc_157e4:                               ; preds = %dec_label_pc_15710, %dec_label_pc_157dc
  %v0_1582c74 = phi i32 [ %v1_156f0, %dec_label_pc_15710 ], [ %v0_1582c75, %dec_label_pc_157dc ]
  %v0_158d8 = phi i32 [ %v2_15700, %dec_label_pc_15710 ], [ %v2_157d4, %dec_label_pc_157dc ]
  %v0_157ec.off0 = phi i2 [ %extract.t, %dec_label_pc_15710 ], [ %extract.t123, %dec_label_pc_157dc ]
  %v0_157e4 = phi i32 [ %v0_156f0, %dec_label_pc_15710 ], [ %v0_157dc, %dec_label_pc_157dc ]
  %v1_157e4 = and i32 %v0_157e4, -4
  store i32 %v1_157e4, i32* %r1.global-to-local, align 4
  %v1_157e8 = inttoptr i32 %v1_157e4 to i32*
  %v2_157e8 = load i32, i32* %v1_157e8, align 4
  store i32 %v2_157e8, i32* @lr, align 4
  %v4_157e8 = add i32 %v1_157e4, 4
  store i32 %v4_157e8, i32* %r1.global-to-local, align 4
  %v2_158d0 = add i32 %v0_158d8, -12
  %v4_158d0 = sub i32 11, %v0_158d8
  %v5_158d0 = and i32 %v4_158d0, %v0_158d8
  %v6_158d0 = icmp slt i32 %v5_158d0, 0
  store i1 %v6_158d0, i1* %cpsr_v.global-to-local, align 1
  %v7_158d0 = icmp slt i32 %v2_158d0, 0
  store i1 %v7_158d0, i1* %cpsr_n.global-to-local, align 1
  %v8_158d0 = icmp eq i32 %v0_158d8, 12
  store i1 %v8_158d0, i1* %cpsr_z.global-to-local, align 1
  %v5_158d4 = icmp slt i32 %v0_158d8, 12
  switch i2 %v0_157ec.off0, label %dec_label_pc_157f8 [
    i2 -1, label %dec_label_pc_158d0
    i2 -2, label %dec_label_pc_15864
  ]

dec_label_pc_157f8:                               ; preds = %dec_label_pc_157e4
  br i1 %v5_158d4, label %dec_label_pc_15844, label %dec_label_pc_15800

dec_label_pc_15800:                               ; preds = %dec_label_pc_157f8
  store i32 %v2_158d0, i32* %r2.global-to-local, align 4
  %v3_15804 = load i32, i32* @r4, align 4
  store i32 %v3_15804, i32* %stack_var_-16, align 4
  %v6_15804 = load i32, i32* @r5, align 4
  store i32 %v6_15804, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15808

dec_label_pc_15808:                               ; preds = %dec_label_pc_15808.dec_label_pc_15808_crit_edge, %dec_label_pc_15800
  %v0_1582c = phi i32 [ %v12_1582c, %dec_label_pc_15808.dec_label_pc_15808_crit_edge ], [ %v0_1582c74, %dec_label_pc_15800 ]
  %v0_1580c = phi i32 [ %v0_1580c.pre, %dec_label_pc_15808.dec_label_pc_15808_crit_edge ], [ %v4_157e8, %dec_label_pc_15800 ]
  %v0_15808 = phi i32 [ %v0_15808.pre, %dec_label_pc_15808.dec_label_pc_15808_crit_edge ], [ %v2_157e8, %dec_label_pc_15800 ]
  %v3_15808 = udiv i32 %v0_15808, 256
  store i32 %v3_15808, i32* %r3.global-to-local, align 4
  %v1_1580c = inttoptr i32 %v0_1580c to i32*
  %v2_1580c = load i32, i32* %v1_1580c, align 4
  store i32 %v2_1580c, i32* %r4.global-to-local, align 4
  %v3_1580c = add i32 %v0_1580c, 4
  %v4_1580c = inttoptr i32 %v3_1580c to i32*
  %v5_1580c = load i32, i32* %v4_1580c, align 4
  store i32 %v5_1580c, i32* %r5.global-to-local, align 4
  %v6_1580c = add i32 %v0_1580c, 8
  %v7_1580c = inttoptr i32 %v6_1580c to i32*
  %v8_1580c = load i32, i32* %v7_1580c, align 4
  store i32 %v8_1580c, i32* %ip.global-to-local, align 4
  %v9_1580c = add i32 %v0_1580c, 12
  %v10_1580c = inttoptr i32 %v9_1580c to i32*
  %v11_1580c = load i32, i32* %v10_1580c, align 4
  store i32 %v11_1580c, i32* @lr, align 4
  %v12_1580c = add i32 %v0_1580c, 16
  store i32 %v12_1580c, i32* %r1.global-to-local, align 4
  %v4_15810 = mul i32 %v2_1580c, 16777216
  %v5_15810 = or i32 %v4_15810, %v3_15808
  store i32 %v5_15810, i32* %r3.global-to-local, align 4
  %v3_15814 = udiv i32 %v2_1580c, 256
  %v4_15818 = mul i32 %v5_1580c, 16777216
  %v5_15818 = or i32 %v4_15818, %v3_15814
  store i32 %v5_15818, i32* %r4.global-to-local, align 4
  %v3_1581c = udiv i32 %v5_1580c, 256
  %v4_15820 = mul i32 %v8_1580c, 16777216
  %v5_15820 = or i32 %v4_15820, %v3_1581c
  store i32 %v5_15820, i32* %r5.global-to-local, align 4
  %v3_15824 = udiv i32 %v8_1580c, 256
  %v4_15828 = mul i32 %v11_1580c, 16777216
  %v5_15828 = or i32 %v4_15828, %v3_15824
  store i32 %v5_15828, i32* @ip, align 4
  %v1_1582c = inttoptr i32 %v0_1582c to i32*
  store i32 %v5_15810, i32* %v1_1582c, align 4
  %v3_1582c = add i32 %v0_1582c, 4
  %v4_1582c = inttoptr i32 %v3_1582c to i32*
  %v5_1582c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_1582c, i32* %v4_1582c, align 4
  %v6_1582c = add i32 %v0_1582c, 8
  %v7_1582c = inttoptr i32 %v6_1582c to i32*
  %v8_1582c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_1582c, i32* %v7_1582c, align 4
  %v9_1582c = add i32 %v0_1582c, 12
  %v10_1582c = inttoptr i32 %v9_1582c to i32*
  %v11_1582c = load i32, i32* @ip, align 4
  store i32 %v11_1582c, i32* %v10_1582c, align 4
  %v12_1582c = add i32 %v0_1582c, 16
  store i32 %v12_1582c, i32* @r0, align 4
  %v0_15830 = load i32, i32* %r2.global-to-local, align 4
  %v2_15830 = add i32 %v0_15830, -16
  store i32 %v2_15830, i32* %r2.global-to-local, align 4
  %v6_15834 = icmp slt i32 %v0_15830, 16
  br i1 %v6_15834, label %dec_label_pc_15838, label %dec_label_pc_15808.dec_label_pc_15808_crit_edge

dec_label_pc_15808.dec_label_pc_15808_crit_edge:  ; preds = %dec_label_pc_15808
  %v0_15808.pre = load i32, i32* @lr, align 4
  %v0_1580c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15808

dec_label_pc_15838:                               ; preds = %dec_label_pc_15808
  %v2_15838 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15838, i32* @r4, align 4
  %v5_15838 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_15838, i32* @r5, align 4
  %v2_1583c = add i32 %v0_15830, -4
  store i32 %v2_1583c, i32* %r2.global-to-local, align 4
  %v4_1583c = add i32 %v0_15830, 2147483632
  %v5_1583c = and i32 %v2_1583c, %v4_1583c
  %v6_1583c = icmp slt i32 %v5_1583c, 0
  store i1 %v6_1583c, i1* %cpsr_v.global-to-local, align 1
  %v7_1583c = icmp slt i32 %v2_1583c, 0
  store i1 %v7_1583c, i1* %cpsr_n.global-to-local, align 1
  %v8_1583c = icmp eq i32 %v2_1583c, 0
  store i1 %v8_1583c, i1* %cpsr_z.global-to-local, align 1
  %v5_15840 = icmp slt i32 %v2_15830, -12
  br i1 %v5_15840, label %dec_label_pc_1585c, label %dec_label_pc_15844

dec_label_pc_15844:                               ; preds = %dec_label_pc_15838, %dec_label_pc_157f8, %dec_label_pc_15844
  %v1_15850 = phi i32 [ %v4_15850, %dec_label_pc_15844 ], [ %v12_1582c, %dec_label_pc_15838 ], [ %v0_1582c74, %dec_label_pc_157f8 ]
  %v0_15844 = load i32, i32* @lr, align 4
  %v3_15844 = udiv i32 %v0_15844, 256
  store i32 %v3_15844, i32* %ip.global-to-local, align 4
  %v0_15848 = load i32, i32* %r1.global-to-local, align 4
  %v1_15848 = inttoptr i32 %v0_15848 to i32*
  %v2_15848 = load i32, i32* %v1_15848, align 4
  store i32 %v2_15848, i32* @lr, align 4
  %v4_15848 = add i32 %v0_15848, 4
  store i32 %v4_15848, i32* %r1.global-to-local, align 4
  %v4_1584c = mul i32 %v2_15848, 16777216
  %v5_1584c = or i32 %v4_1584c, %v3_15844
  store i32 %v5_1584c, i32* @ip, align 4
  %v2_15850 = inttoptr i32 %v1_15850 to i32*
  store i32 %v5_1584c, i32* %v2_15850, align 4
  %v3_15850 = load i32, i32* @r0, align 4
  %v4_15850 = add i32 %v3_15850, 4
  store i32 %v4_15850, i32* @r0, align 4
  %v0_15854 = load i32, i32* %r2.global-to-local, align 4
  %v2_15854 = add i32 %v0_15854, -4
  store i32 %v2_15854, i32* %r2.global-to-local, align 4
  %v6_15858 = icmp slt i32 %v0_15854, 4
  br i1 %v6_15858, label %dec_label_pc_1585c.loopexit, label %dec_label_pc_15844

dec_label_pc_1585c.loopexit:                      ; preds = %dec_label_pc_15844
  %v4_15854 = sub i32 3, %v0_15854
  %v5_15854 = and i32 %v4_15854, %v0_15854
  %v6_15854 = icmp slt i32 %v5_15854, 0
  %v7_15854 = icmp slt i32 %v2_15854, 0
  store i1 %v6_15854, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15854, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1585c

dec_label_pc_1585c:                               ; preds = %dec_label_pc_1585c.loopexit, %dec_label_pc_15838
  %v2_1579c111 = phi i32 [ %v4_15850, %dec_label_pc_1585c.loopexit ], [ %v12_1582c, %dec_label_pc_15838 ]
  %v0_1578c107 = phi i32 [ %v2_15854, %dec_label_pc_1585c.loopexit ], [ %v2_1583c, %dec_label_pc_15838 ]
  %v0_1585c = load i32, i32* %r1.global-to-local, align 4
  %v1_1585c = add i32 %v0_1585c, -3
  store i32 %v1_1585c, i32* @r1, align 4
  br label %bb131

dec_label_pc_15864:                               ; preds = %dec_label_pc_157e4
  br i1 %v5_158d4, label %dec_label_pc_158b0, label %dec_label_pc_1586c

dec_label_pc_1586c:                               ; preds = %dec_label_pc_15864
  store i32 %v2_158d0, i32* %r2.global-to-local, align 4
  %v3_15870 = load i32, i32* @r4, align 4
  store i32 %v3_15870, i32* %stack_var_-16, align 4
  %v6_15870 = load i32, i32* @r5, align 4
  store i32 %v6_15870, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15874

dec_label_pc_15874:                               ; preds = %dec_label_pc_15874.dec_label_pc_15874_crit_edge, %dec_label_pc_1586c
  %v0_15898 = phi i32 [ %v12_15898, %dec_label_pc_15874.dec_label_pc_15874_crit_edge ], [ %v0_1582c74, %dec_label_pc_1586c ]
  %v0_15878 = phi i32 [ %v0_15878.pre, %dec_label_pc_15874.dec_label_pc_15874_crit_edge ], [ %v4_157e8, %dec_label_pc_1586c ]
  %v0_15874 = phi i32 [ %v0_15874.pre, %dec_label_pc_15874.dec_label_pc_15874_crit_edge ], [ %v2_157e8, %dec_label_pc_1586c ]
  %v3_15874 = udiv i32 %v0_15874, 65536
  store i32 %v3_15874, i32* %r3.global-to-local, align 4
  %v1_15878 = inttoptr i32 %v0_15878 to i32*
  %v2_15878 = load i32, i32* %v1_15878, align 4
  store i32 %v2_15878, i32* %r4.global-to-local, align 4
  %v3_15878 = add i32 %v0_15878, 4
  %v4_15878 = inttoptr i32 %v3_15878 to i32*
  %v5_15878 = load i32, i32* %v4_15878, align 4
  store i32 %v5_15878, i32* %r5.global-to-local, align 4
  %v6_15878 = add i32 %v0_15878, 8
  %v7_15878 = inttoptr i32 %v6_15878 to i32*
  %v8_15878 = load i32, i32* %v7_15878, align 4
  store i32 %v8_15878, i32* %ip.global-to-local, align 4
  %v9_15878 = add i32 %v0_15878, 12
  %v10_15878 = inttoptr i32 %v9_15878 to i32*
  %v11_15878 = load i32, i32* %v10_15878, align 4
  store i32 %v11_15878, i32* @lr, align 4
  %v12_15878 = add i32 %v0_15878, 16
  store i32 %v12_15878, i32* %r1.global-to-local, align 4
  %v4_1587c = mul i32 %v2_15878, 65536
  %v5_1587c = or i32 %v4_1587c, %v3_15874
  store i32 %v5_1587c, i32* %r3.global-to-local, align 4
  %v3_15880 = udiv i32 %v2_15878, 65536
  %v4_15884 = mul i32 %v5_15878, 65536
  %v5_15884 = or i32 %v4_15884, %v3_15880
  store i32 %v5_15884, i32* %r4.global-to-local, align 4
  %v3_15888 = udiv i32 %v5_15878, 65536
  %v4_1588c = mul i32 %v8_15878, 65536
  %v5_1588c = or i32 %v4_1588c, %v3_15888
  store i32 %v5_1588c, i32* %r5.global-to-local, align 4
  %v3_15890 = udiv i32 %v8_15878, 65536
  %v4_15894 = mul i32 %v11_15878, 65536
  %v5_15894 = or i32 %v4_15894, %v3_15890
  store i32 %v5_15894, i32* @ip, align 4
  %v1_15898 = inttoptr i32 %v0_15898 to i32*
  store i32 %v5_1587c, i32* %v1_15898, align 4
  %v3_15898 = add i32 %v0_15898, 4
  %v4_15898 = inttoptr i32 %v3_15898 to i32*
  %v5_15898 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15898, i32* %v4_15898, align 4
  %v6_15898 = add i32 %v0_15898, 8
  %v7_15898 = inttoptr i32 %v6_15898 to i32*
  %v8_15898 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_15898, i32* %v7_15898, align 4
  %v9_15898 = add i32 %v0_15898, 12
  %v10_15898 = inttoptr i32 %v9_15898 to i32*
  %v11_15898 = load i32, i32* @ip, align 4
  store i32 %v11_15898, i32* %v10_15898, align 4
  %v12_15898 = add i32 %v0_15898, 16
  store i32 %v12_15898, i32* @r0, align 4
  %v0_1589c = load i32, i32* %r2.global-to-local, align 4
  %v2_1589c = add i32 %v0_1589c, -16
  store i32 %v2_1589c, i32* %r2.global-to-local, align 4
  %v6_158a0 = icmp slt i32 %v0_1589c, 16
  br i1 %v6_158a0, label %dec_label_pc_158a4, label %dec_label_pc_15874.dec_label_pc_15874_crit_edge

dec_label_pc_15874.dec_label_pc_15874_crit_edge:  ; preds = %dec_label_pc_15874
  %v0_15874.pre = load i32, i32* @lr, align 4
  %v0_15878.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15874

dec_label_pc_158a4:                               ; preds = %dec_label_pc_15874
  %v2_158a4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_158a4, i32* @r4, align 4
  %v5_158a4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_158a4, i32* @r5, align 4
  %v2_158a8 = add i32 %v0_1589c, -4
  store i32 %v2_158a8, i32* %r2.global-to-local, align 4
  %v4_158a8 = add i32 %v0_1589c, 2147483632
  %v5_158a8 = and i32 %v2_158a8, %v4_158a8
  %v6_158a8 = icmp slt i32 %v5_158a8, 0
  store i1 %v6_158a8, i1* %cpsr_v.global-to-local, align 1
  %v7_158a8 = icmp slt i32 %v2_158a8, 0
  store i1 %v7_158a8, i1* %cpsr_n.global-to-local, align 1
  %v8_158a8 = icmp eq i32 %v2_158a8, 0
  store i1 %v8_158a8, i1* %cpsr_z.global-to-local, align 1
  %v5_158ac = icmp slt i32 %v2_1589c, -12
  br i1 %v5_158ac, label %dec_label_pc_158c8, label %dec_label_pc_158b0

dec_label_pc_158b0:                               ; preds = %dec_label_pc_158a4, %dec_label_pc_15864, %dec_label_pc_158b0
  %v1_158bc = phi i32 [ %v4_158bc, %dec_label_pc_158b0 ], [ %v12_15898, %dec_label_pc_158a4 ], [ %v0_1582c74, %dec_label_pc_15864 ]
  %v0_158b0 = load i32, i32* @lr, align 4
  %v3_158b0 = udiv i32 %v0_158b0, 65536
  store i32 %v3_158b0, i32* %ip.global-to-local, align 4
  %v0_158b4 = load i32, i32* %r1.global-to-local, align 4
  %v1_158b4 = inttoptr i32 %v0_158b4 to i32*
  %v2_158b4 = load i32, i32* %v1_158b4, align 4
  store i32 %v2_158b4, i32* @lr, align 4
  %v4_158b4 = add i32 %v0_158b4, 4
  store i32 %v4_158b4, i32* %r1.global-to-local, align 4
  %v4_158b8 = mul i32 %v2_158b4, 65536
  %v5_158b8 = or i32 %v4_158b8, %v3_158b0
  store i32 %v5_158b8, i32* @ip, align 4
  %v2_158bc = inttoptr i32 %v1_158bc to i32*
  store i32 %v5_158b8, i32* %v2_158bc, align 4
  %v3_158bc = load i32, i32* @r0, align 4
  %v4_158bc = add i32 %v3_158bc, 4
  store i32 %v4_158bc, i32* @r0, align 4
  %v0_158c0 = load i32, i32* %r2.global-to-local, align 4
  %v2_158c0 = add i32 %v0_158c0, -4
  store i32 %v2_158c0, i32* %r2.global-to-local, align 4
  %v6_158c4 = icmp slt i32 %v0_158c0, 4
  br i1 %v6_158c4, label %dec_label_pc_158c8.loopexit, label %dec_label_pc_158b0

dec_label_pc_158c8.loopexit:                      ; preds = %dec_label_pc_158b0
  %v4_158c0 = sub i32 3, %v0_158c0
  %v5_158c0 = and i32 %v4_158c0, %v0_158c0
  %v6_158c0 = icmp slt i32 %v5_158c0, 0
  %v7_158c0 = icmp slt i32 %v2_158c0, 0
  store i1 %v6_158c0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_158c0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_158c8

dec_label_pc_158c8:                               ; preds = %dec_label_pc_158c8.loopexit, %dec_label_pc_158a4
  %v2_1579c112 = phi i32 [ %v4_158bc, %dec_label_pc_158c8.loopexit ], [ %v12_15898, %dec_label_pc_158a4 ]
  %v0_1578c108 = phi i32 [ %v2_158c0, %dec_label_pc_158c8.loopexit ], [ %v2_158a8, %dec_label_pc_158a4 ]
  %v0_158c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_158c8 = add i32 %v0_158c8, -2
  store i32 %v1_158c8, i32* @r1, align 4
  br label %bb131

dec_label_pc_158d0:                               ; preds = %dec_label_pc_157e4
  br i1 %v5_158d4, label %dec_label_pc_1591c, label %dec_label_pc_158d8

dec_label_pc_158d8:                               ; preds = %dec_label_pc_158d0
  store i32 %v2_158d0, i32* %r2.global-to-local, align 4
  %v3_158dc = load i32, i32* @r4, align 4
  store i32 %v3_158dc, i32* %stack_var_-16, align 4
  %v6_158dc = load i32, i32* @r5, align 4
  store i32 %v6_158dc, i32* %stack_var_-12, align 4
  br label %dec_label_pc_158e0

dec_label_pc_158e0:                               ; preds = %dec_label_pc_158e0.dec_label_pc_158e0_crit_edge, %dec_label_pc_158d8
  %v0_15904 = phi i32 [ %v12_15904, %dec_label_pc_158e0.dec_label_pc_158e0_crit_edge ], [ %v0_1582c74, %dec_label_pc_158d8 ]
  %v0_158e4 = phi i32 [ %v0_158e4.pre, %dec_label_pc_158e0.dec_label_pc_158e0_crit_edge ], [ %v4_157e8, %dec_label_pc_158d8 ]
  %v0_158e0 = phi i32 [ %v0_158e0.pre, %dec_label_pc_158e0.dec_label_pc_158e0_crit_edge ], [ %v2_157e8, %dec_label_pc_158d8 ]
  %v3_158e0 = udiv i32 %v0_158e0, 16777216
  store i32 %v3_158e0, i32* %r3.global-to-local, align 4
  %v1_158e4 = inttoptr i32 %v0_158e4 to i32*
  %v2_158e4 = load i32, i32* %v1_158e4, align 4
  store i32 %v2_158e4, i32* %r4.global-to-local, align 4
  %v3_158e4 = add i32 %v0_158e4, 4
  %v4_158e4 = inttoptr i32 %v3_158e4 to i32*
  %v5_158e4 = load i32, i32* %v4_158e4, align 4
  store i32 %v5_158e4, i32* %r5.global-to-local, align 4
  %v6_158e4 = add i32 %v0_158e4, 8
  %v7_158e4 = inttoptr i32 %v6_158e4 to i32*
  %v8_158e4 = load i32, i32* %v7_158e4, align 4
  store i32 %v8_158e4, i32* %ip.global-to-local, align 4
  %v9_158e4 = add i32 %v0_158e4, 12
  %v10_158e4 = inttoptr i32 %v9_158e4 to i32*
  %v11_158e4 = load i32, i32* %v10_158e4, align 4
  store i32 %v11_158e4, i32* @lr, align 4
  %v12_158e4 = add i32 %v0_158e4, 16
  store i32 %v12_158e4, i32* %r1.global-to-local, align 4
  %v4_158e8 = mul i32 %v2_158e4, 256
  %v5_158e8 = or i32 %v4_158e8, %v3_158e0
  store i32 %v5_158e8, i32* %r3.global-to-local, align 4
  %v3_158ec = udiv i32 %v2_158e4, 16777216
  %v4_158f0 = mul i32 %v5_158e4, 256
  %v5_158f0 = or i32 %v4_158f0, %v3_158ec
  store i32 %v5_158f0, i32* %r4.global-to-local, align 4
  %v3_158f4 = udiv i32 %v5_158e4, 16777216
  %v4_158f8 = mul i32 %v8_158e4, 256
  %v5_158f8 = or i32 %v4_158f8, %v3_158f4
  store i32 %v5_158f8, i32* %r5.global-to-local, align 4
  %v3_158fc = udiv i32 %v8_158e4, 16777216
  %v4_15900 = mul i32 %v11_158e4, 256
  %v5_15900 = or i32 %v4_15900, %v3_158fc
  store i32 %v5_15900, i32* @ip, align 4
  %v1_15904 = inttoptr i32 %v0_15904 to i32*
  store i32 %v5_158e8, i32* %v1_15904, align 4
  %v3_15904 = add i32 %v0_15904, 4
  %v4_15904 = inttoptr i32 %v3_15904 to i32*
  %v5_15904 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15904, i32* %v4_15904, align 4
  %v6_15904 = add i32 %v0_15904, 8
  %v7_15904 = inttoptr i32 %v6_15904 to i32*
  %v8_15904 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_15904, i32* %v7_15904, align 4
  %v9_15904 = add i32 %v0_15904, 12
  %v10_15904 = inttoptr i32 %v9_15904 to i32*
  %v11_15904 = load i32, i32* @ip, align 4
  store i32 %v11_15904, i32* %v10_15904, align 4
  %v12_15904 = add i32 %v0_15904, 16
  store i32 %v12_15904, i32* @r0, align 4
  %v0_15908 = load i32, i32* %r2.global-to-local, align 4
  %v2_15908 = add i32 %v0_15908, -16
  store i32 %v2_15908, i32* %r2.global-to-local, align 4
  %v6_1590c = icmp slt i32 %v0_15908, 16
  br i1 %v6_1590c, label %dec_label_pc_15910, label %dec_label_pc_158e0.dec_label_pc_158e0_crit_edge

dec_label_pc_158e0.dec_label_pc_158e0_crit_edge:  ; preds = %dec_label_pc_158e0
  %v0_158e0.pre = load i32, i32* @lr, align 4
  %v0_158e4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_158e0

dec_label_pc_15910:                               ; preds = %dec_label_pc_158e0
  %v2_15910 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15910, i32* @r4, align 4
  %v5_15910 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_15910, i32* @r5, align 4
  %v2_15914 = add i32 %v0_15908, -4
  store i32 %v2_15914, i32* %r2.global-to-local, align 4
  %v4_15914 = add i32 %v0_15908, 2147483632
  %v5_15914 = and i32 %v2_15914, %v4_15914
  %v6_15914 = icmp slt i32 %v5_15914, 0
  store i1 %v6_15914, i1* %cpsr_v.global-to-local, align 1
  %v7_15914 = icmp slt i32 %v2_15914, 0
  store i1 %v7_15914, i1* %cpsr_n.global-to-local, align 1
  %v8_15914 = icmp eq i32 %v2_15914, 0
  store i1 %v8_15914, i1* %cpsr_z.global-to-local, align 1
  %v5_15918 = icmp slt i32 %v2_15908, -12
  br i1 %v5_15918, label %dec_label_pc_15934, label %dec_label_pc_1591c

dec_label_pc_1591c:                               ; preds = %dec_label_pc_15910, %dec_label_pc_158d0, %dec_label_pc_1591c
  %v1_15928 = phi i32 [ %v4_15928, %dec_label_pc_1591c ], [ %v12_15904, %dec_label_pc_15910 ], [ %v0_1582c74, %dec_label_pc_158d0 ]
  %v0_1591c = load i32, i32* @lr, align 4
  %v3_1591c = udiv i32 %v0_1591c, 16777216
  store i32 %v3_1591c, i32* %ip.global-to-local, align 4
  %v0_15920 = load i32, i32* %r1.global-to-local, align 4
  %v1_15920 = inttoptr i32 %v0_15920 to i32*
  %v2_15920 = load i32, i32* %v1_15920, align 4
  store i32 %v2_15920, i32* @lr, align 4
  %v4_15920 = add i32 %v0_15920, 4
  store i32 %v4_15920, i32* %r1.global-to-local, align 4
  %v4_15924 = mul i32 %v2_15920, 256
  %v5_15924 = or i32 %v4_15924, %v3_1591c
  store i32 %v5_15924, i32* @ip, align 4
  %v2_15928 = inttoptr i32 %v1_15928 to i32*
  store i32 %v5_15924, i32* %v2_15928, align 4
  %v3_15928 = load i32, i32* @r0, align 4
  %v4_15928 = add i32 %v3_15928, 4
  store i32 %v4_15928, i32* @r0, align 4
  %v0_1592c = load i32, i32* %r2.global-to-local, align 4
  %v2_1592c = add i32 %v0_1592c, -4
  store i32 %v2_1592c, i32* %r2.global-to-local, align 4
  %v6_15930 = icmp slt i32 %v0_1592c, 4
  br i1 %v6_15930, label %dec_label_pc_15934.loopexit, label %dec_label_pc_1591c

dec_label_pc_15934.loopexit:                      ; preds = %dec_label_pc_1591c
  %v4_1592c = sub i32 3, %v0_1592c
  %v5_1592c = and i32 %v4_1592c, %v0_1592c
  %v6_1592c = icmp slt i32 %v5_1592c, 0
  %v7_1592c = icmp slt i32 %v2_1592c, 0
  store i1 %v6_1592c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_1592c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15934

dec_label_pc_15934:                               ; preds = %dec_label_pc_15934.loopexit, %dec_label_pc_15910
  %v2_1579c113 = phi i32 [ %v4_15928, %dec_label_pc_15934.loopexit ], [ %v12_15904, %dec_label_pc_15910 ]
  %v0_1578c109 = phi i32 [ %v2_1592c, %dec_label_pc_15934.loopexit ], [ %v2_15914, %dec_label_pc_15910 ]
  %v0_15934 = load i32, i32* %r1.global-to-local, align 4
  %v1_15934 = add i32 %v0_15934, -1
  store i32 %v1_15934, i32* @r1, align 4
  br label %bb131

dec_label_pc_1593c:                               ; preds = %dec_label_pc_156f0
  %v1_1593c = load i32, i32* @r2, align 4
  %v2_1593c = add i32 %v1_1593c, %v0_156f0
  store i32 %v2_1593c, i32* %r1.global-to-local, align 4
  %v2_15940 = add i32 %v1_1593c, %v1_156f0
  store i32 %v2_15940, i32* %r0.global-to-local, align 4
  %v2_15944 = add i32 %v1_1593c, -4
  store i32 %v2_15944, i32* %r2.global-to-local, align 4
  %v4_15944 = sub i32 3, %v1_1593c
  %v5_15944 = and i32 %v4_15944, %v1_1593c
  %v6_15944 = icmp slt i32 %v5_15944, 0
  store i1 %v6_15944, i1* %cpsr_v.global-to-local, align 1
  %v7_15944 = icmp slt i32 %v2_15944, 0
  store i1 %v7_15944, i1* %cpsr_n.global-to-local, align 1
  %v8_15944 = icmp eq i32 %v1_1593c, 4
  store i1 %v8_15944, i1* %cpsr_z.global-to-local, align 1
  %v5_15948 = icmp slt i32 %v1_1593c, 4
  br i1 %v5_15948, label %bb141, label %dec_label_pc_1594c

dec_label_pc_1594c:                               ; preds = %dec_label_pc_1593c
  %v1_1594c = urem i32 %v2_15940, 4
  store i32 %v1_1594c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_1594c = icmp eq i32 %v1_1594c, 0
  store i1 %v2_1594c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1594c, label %dec_label_pc_15954, label %dec_label_pc_159f4

dec_label_pc_15954:                               ; preds = %dec_label_pc_1594c
  %v1_15954 = urem i32 %v2_1593c, 4
  store i32 %v1_15954, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15954 = icmp eq i32 %v1_15954, 0
  store i1 %v2_15954, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15954, label %dec_label_pc_1595c, label %dec_label_pc_15a20

dec_label_pc_1595c:                               ; preds = %dec_label_pc_15954, %dec_label_pc_15a18
  %v0_1597448 = phi i32 [ %v2_15940, %dec_label_pc_15954 ], [ %v0_15a6831, %dec_label_pc_15a18 ]
  %v0_1597047 = phi i32 [ %v2_1593c, %dec_label_pc_15954 ], [ %v0_15a18, %dec_label_pc_15a18 ]
  %v0_1595c = phi i32 [ %v2_15944, %dec_label_pc_15954 ], [ %v2_15a10, %dec_label_pc_15a18 ]
  %v2_1595c = add i32 %v0_1595c, -8
  store i32 %v2_1595c, i32* %r2.global-to-local, align 4
  %v4_1595c = sub i32 7, %v0_1595c
  %v5_1595c = and i32 %v4_1595c, %v0_1595c
  %v6_1595c = icmp slt i32 %v5_1595c, 0
  store i1 %v6_1595c, i1* %cpsr_v.global-to-local, align 1
  %v7_1595c = icmp slt i32 %v2_1595c, 0
  store i1 %v7_1595c, i1* %cpsr_n.global-to-local, align 1
  %v8_1595c = icmp eq i32 %v0_1595c, 8
  store i1 %v8_1595c, i1* %cpsr_z.global-to-local, align 1
  %v5_15960 = icmp slt i32 %v0_1595c, 8
  br i1 %v5_15960, label %dec_label_pc_159ac, label %dec_label_pc_15964

dec_label_pc_15964:                               ; preds = %dec_label_pc_1595c
  %v3_15964 = load i32, i32* @r4, align 4
  store i32 %v3_15964, i32* %stack_var_-8, align 4
  %v6_15964 = load i32, i32* @lr, align 4
  %v2_15968 = add i32 %v0_1595c, -28
  store i32 %v2_15968, i32* %r2.global-to-local, align 4
  %v4_15968 = sub i32 27, %v0_1595c
  %v5_15968 = and i32 %v4_15968, %v2_1595c
  %v6_15968 = icmp slt i32 %v5_15968, 0
  store i1 %v6_15968, i1* %cpsr_v.global-to-local, align 1
  %v7_15968 = icmp slt i32 %v2_15968, 0
  store i1 %v7_15968, i1* %cpsr_n.global-to-local, align 1
  %v8_15968 = icmp eq i32 %v2_1595c, 20
  store i1 %v8_15968, i1* %cpsr_z.global-to-local, align 1
  %v5_1596c = icmp slt i32 %v2_1595c, 20
  br i1 %v5_1596c, label %dec_label_pc_15988, label %dec_label_pc_15970

dec_label_pc_15970:                               ; preds = %dec_label_pc_15964, %dec_label_pc_15970.dec_label_pc_15970_crit_edge
  %v0_15974 = phi i32 [ %v1_1597c, %dec_label_pc_15970.dec_label_pc_15970_crit_edge ], [ %v0_1597448, %dec_label_pc_15964 ]
  %v0_15970 = phi i32 [ %v0_15970.pre, %dec_label_pc_15970.dec_label_pc_15970_crit_edge ], [ %v0_1597047, %dec_label_pc_15964 ]
  %v1_15970 = add i32 %v0_15970, -4
  %v2_15970 = inttoptr i32 %v1_15970 to i32*
  %v3_15970 = load i32, i32* %v2_15970, align 4
  store i32 %v3_15970, i32* %r3.global-to-local, align 4
  %v4_15970 = add i32 %v0_15970, -8
  %v5_15970 = inttoptr i32 %v4_15970 to i32*
  %v6_15970 = load i32, i32* %v5_15970, align 4
  store i32 %v6_15970, i32* %r4.global-to-local, align 4
  %v7_15970 = add i32 %v0_15970, -12
  %v8_15970 = inttoptr i32 %v7_15970 to i32*
  %v9_15970 = load i32, i32* %v8_15970, align 4
  store i32 %v9_15970, i32* %ip.global-to-local, align 4
  %v10_15970 = add i32 %v0_15970, -16
  %v11_15970 = inttoptr i32 %v10_15970 to i32*
  %v12_15970 = load i32, i32* %v11_15970, align 4
  store i32 %v12_15970, i32* %lr.global-to-local, align 4
  store i32 %v10_15970, i32* %r1.global-to-local, align 4
  %v1_15974 = add i32 %v0_15974, -16
  %v2_15974 = inttoptr i32 %v1_15974 to i32*
  store i32 %v3_15970, i32* %v2_15974, align 4
  %v4_15974 = add i32 %v0_15974, -12
  %v5_15974 = inttoptr i32 %v4_15974 to i32*
  %v6_15974 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_15974, i32* %v5_15974, align 4
  %v7_15974 = add i32 %v0_15974, -8
  %v8_15974 = inttoptr i32 %v7_15974 to i32*
  %v9_15974 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_15974, i32* %v8_15974, align 4
  %v10_15974 = add i32 %v0_15974, -4
  %v11_15974 = inttoptr i32 %v10_15974 to i32*
  %v12_15974 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15974, i32* %v11_15974, align 4
  store i32 %v1_15974, i32* %r0.global-to-local, align 4
  %v0_15978 = load i32, i32* %r1.global-to-local, align 4
  %v1_15978 = add i32 %v0_15978, -4
  %v2_15978 = inttoptr i32 %v1_15978 to i32*
  %v3_15978 = load i32, i32* %v2_15978, align 4
  store i32 %v3_15978, i32* %r3.global-to-local, align 4
  %v4_15978 = add i32 %v0_15978, -8
  %v5_15978 = inttoptr i32 %v4_15978 to i32*
  %v6_15978 = load i32, i32* %v5_15978, align 4
  store i32 %v6_15978, i32* %r4.global-to-local, align 4
  %v7_15978 = add i32 %v0_15978, -12
  %v8_15978 = inttoptr i32 %v7_15978 to i32*
  %v9_15978 = load i32, i32* %v8_15978, align 4
  store i32 %v9_15978, i32* @ip, align 4
  %v10_15978 = add i32 %v0_15978, -16
  %v11_15978 = inttoptr i32 %v10_15978 to i32*
  %v12_15978 = load i32, i32* %v11_15978, align 4
  store i32 %v12_15978, i32* %lr.global-to-local, align 4
  store i32 %v10_15978, i32* %r1.global-to-local, align 4
  %v1_1597c = add i32 %v0_15974, -32
  %v2_1597c = inttoptr i32 %v1_1597c to i32*
  store i32 %v3_15978, i32* %v2_1597c, align 4
  %v4_1597c = add i32 %v0_15974, -28
  %v5_1597c = inttoptr i32 %v4_1597c to i32*
  %v6_1597c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_1597c, i32* %v5_1597c, align 4
  %v7_1597c = add i32 %v0_15974, -24
  %v8_1597c = inttoptr i32 %v7_1597c to i32*
  %v9_1597c = load i32, i32* @ip, align 4
  store i32 %v9_1597c, i32* %v8_1597c, align 4
  %v10_1597c = add i32 %v0_15974, -20
  %v11_1597c = inttoptr i32 %v10_1597c to i32*
  %v12_1597c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_1597c, i32* %v11_1597c, align 4
  store i32 %v1_1597c, i32* %r0.global-to-local, align 4
  %v0_15980 = load i32, i32* %r2.global-to-local, align 4
  %v2_15980 = add i32 %v0_15980, -32
  store i32 %v2_15980, i32* %r2.global-to-local, align 4
  %v6_15984 = icmp slt i32 %v0_15980, 32
  br i1 %v6_15984, label %dec_label_pc_15988.loopexit, label %dec_label_pc_15970.dec_label_pc_15970_crit_edge

dec_label_pc_15970.dec_label_pc_15970_crit_edge:  ; preds = %dec_label_pc_15970
  %v0_15970.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15970

dec_label_pc_15988.loopexit:                      ; preds = %dec_label_pc_15970
  %v4_15980 = sub i32 31, %v0_15980
  %v5_15980 = and i32 %v4_15980, %v0_15980
  %v6_15980 = icmp slt i32 %v5_15980, 0
  %v7_15980 = icmp slt i32 %v2_15980, 0
  store i1 %v6_15980, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15980, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15988

dec_label_pc_15988:                               ; preds = %dec_label_pc_15988.loopexit, %dec_label_pc_15964
  %v6_15990 = phi i32 [ %v1_1597c, %dec_label_pc_15988.loopexit ], [ %v0_1597448, %dec_label_pc_15964 ]
  %v0_15998.pr = phi i32 [ %v2_15980, %dec_label_pc_15988.loopexit ], [ %v2_15968, %dec_label_pc_15964 ]
  %v4_15988 = add i32 %v0_15998.pr, 16
  %v6_15988 = sub i32 0, %v0_15998.pr
  %v7_15988 = and i32 %v4_15988, %v6_15988
  %v8_15988 = icmp slt i32 %v7_15988, 0
  store i1 %v8_15988, i1* %cpsr_v.global-to-local, align 1
  %v9_15988 = icmp slt i32 %v4_15988, 0
  store i1 %v9_15988, i1* %cpsr_n.global-to-local, align 1
  %v10_15988 = icmp eq i32 %v4_15988, 0
  store i1 %v10_15988, i1* %cpsr_z.global-to-local, align 1
  %v5_1598c = icmp slt i32 %v0_15998.pr, -16
  br i1 %v5_1598c, label %.thread13, label %bb138

bb138:                                            ; preds = %dec_label_pc_15988
  %v6_1598c = load i32, i32* %r1.global-to-local, align 4
  %v7_1598c = add i32 %v6_1598c, -4
  %v8_1598c = inttoptr i32 %v7_1598c to i32*
  %v9_1598c = load i32, i32* %v8_1598c, align 4
  store i32 %v9_1598c, i32* %r3.global-to-local, align 4
  %v10_1598c = add i32 %v6_1598c, -8
  %v11_1598c = inttoptr i32 %v10_1598c to i32*
  %v12_1598c = load i32, i32* %v11_1598c, align 4
  store i32 %v12_1598c, i32* %r4.global-to-local, align 4
  %v13_1598c = add i32 %v6_1598c, -12
  %v14_1598c = inttoptr i32 %v13_1598c to i32*
  %v15_1598c = load i32, i32* %v14_1598c, align 4
  store i32 %v15_1598c, i32* @ip, align 4
  %v16_1598c = add i32 %v6_1598c, -16
  %v17_1598c = inttoptr i32 %v16_1598c to i32*
  %v18_1598c = load i32, i32* %v17_1598c, align 4
  store i32 %v18_1598c, i32* %lr.global-to-local, align 4
  store i32 %v16_1598c, i32* %r1.global-to-local, align 4
  %v7_15990 = add i32 %v6_15990, -16
  %v8_15990 = inttoptr i32 %v7_15990 to i32*
  store i32 %v9_1598c, i32* %v8_15990, align 4
  %v10_15990 = add i32 %v6_15990, -12
  %v11_15990 = inttoptr i32 %v10_15990 to i32*
  %v12_15990 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_15990, i32* %v11_15990, align 4
  %v13_15990 = add i32 %v6_15990, -8
  %v14_15990 = inttoptr i32 %v13_15990 to i32*
  %v15_15990 = load i32, i32* @ip, align 4
  store i32 %v15_15990, i32* %v14_15990, align 4
  %v16_15990 = add i32 %v6_15990, -4
  %v17_15990 = inttoptr i32 %v16_15990 to i32*
  %v18_15990 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_15990, i32* %v17_15990, align 4
  store i32 %v7_15990, i32* %r0.global-to-local, align 4
  %v6_15994 = load i32, i32* %r2.global-to-local, align 4
  %v7_15994 = add i32 %v6_15994, -16
  store i32 %v7_15994, i32* %r2.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_15988, %bb138
  %v6_159a0 = phi i32 [ %v7_15990, %bb138 ], [ %v6_15990, %dec_label_pc_15988 ]
  %v0_15998 = phi i32 [ %v7_15994, %bb138 ], [ %v0_15998.pr, %dec_label_pc_15988 ]
  %v4_15998 = add i32 %v0_15998, 20
  store i32 %v4_15998, i32* %r2.global-to-local, align 4
  %v6_15998 = sub i32 0, %v0_15998
  %v7_15998 = and i32 %v4_15998, %v6_15998
  %v8_15998 = icmp slt i32 %v7_15998, 0
  store i1 %v8_15998, i1* %cpsr_v.global-to-local, align 1
  %v9_15998 = icmp slt i32 %v4_15998, 0
  store i1 %v9_15998, i1* %cpsr_n.global-to-local, align 1
  %v10_15998 = icmp eq i32 %v4_15998, 0
  store i1 %v10_15998, i1* %cpsr_z.global-to-local, align 1
  %v5_1599c = icmp slt i32 %v0_15998, -20
  br i1 %v5_1599c, label %.thread15, label %bb139

bb139:                                            ; preds = %.thread13
  %v6_1599c = load i32, i32* %r1.global-to-local, align 4
  %v7_1599c = add i32 %v6_1599c, -4
  %v8_1599c = inttoptr i32 %v7_1599c to i32*
  %v9_1599c = load i32, i32* %v8_1599c, align 4
  store i32 %v9_1599c, i32* %r3.global-to-local, align 4
  %v10_1599c = add i32 %v6_1599c, -8
  %v11_1599c = inttoptr i32 %v10_1599c to i32*
  %v12_1599c = load i32, i32* %v11_1599c, align 4
  store i32 %v12_1599c, i32* @ip, align 4
  %v13_1599c = add i32 %v6_1599c, -12
  %v14_1599c = inttoptr i32 %v13_1599c to i32*
  %v15_1599c = load i32, i32* %v14_1599c, align 4
  store i32 %v15_1599c, i32* %lr.global-to-local, align 4
  store i32 %v13_1599c, i32* %r1.global-to-local, align 4
  %v7_159a0 = add i32 %v6_159a0, -12
  %v8_159a0 = inttoptr i32 %v7_159a0 to i32*
  store i32 %v9_1599c, i32* %v8_159a0, align 4
  %v10_159a0 = add i32 %v6_159a0, -8
  %v11_159a0 = inttoptr i32 %v10_159a0 to i32*
  %v12_159a0 = load i32, i32* @ip, align 4
  store i32 %v12_159a0, i32* %v11_159a0, align 4
  %v13_159a0 = add i32 %v6_159a0, -4
  %v14_159a0 = inttoptr i32 %v13_159a0 to i32*
  %v15_159a0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_159a0, i32* %v14_159a0, align 4
  store i32 %v7_159a0, i32* %r0.global-to-local, align 4
  %v6_159a4 = load i32, i32* %r2.global-to-local, align 4
  %v7_159a4 = add i32 %v6_159a4, -12
  store i32 %v7_159a4, i32* %r2.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread13, %bb139
  %v6_159c456 = phi i32 [ %v6_159a0, %.thread13 ], [ %v7_159a0, %bb139 ]
  %v0_159ac54 = phi i32 [ %v4_15998, %.thread13 ], [ %v7_159a4, %bb139 ]
  %v2_159a8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_159a8, i32* @r4, align 4
  store i32 %v6_15964, i32* @lr, align 4
  br label %dec_label_pc_159ac

dec_label_pc_159ac:                               ; preds = %dec_label_pc_1595c, %.thread15
  %v7_159bc = phi i32 [ %v0_1597448, %dec_label_pc_1595c ], [ %v6_159c456, %.thread15 ]
  %v0_159ac = phi i32 [ %v2_1595c, %dec_label_pc_1595c ], [ %v0_159ac54, %.thread15 ]
  %v2_159ac = add i32 %v0_159ac, 8
  store i32 %v2_159ac, i32* %r2.global-to-local, align 4
  %v4_159ac = sub i32 0, %v0_159ac
  %v5_159ac = and i32 %v2_159ac, %v4_159ac
  %v6_159ac = icmp slt i32 %v5_159ac, 0
  store i1 %v6_159ac, i1* %cpsr_v.global-to-local, align 1
  %v7_159ac = icmp slt i32 %v2_159ac, 0
  store i1 %v7_159ac, i1* %cpsr_n.global-to-local, align 1
  %v8_159ac = icmp eq i32 %v2_159ac, 0
  store i1 %v8_159ac, i1* %cpsr_z.global-to-local, align 1
  %v5_159b0 = icmp slt i32 %v0_159ac, -8
  br i1 %v5_159b0, label %bb141, label %dec_label_pc_159b4

dec_label_pc_159b4:                               ; preds = %dec_label_pc_159ac
  %v6_159b4 = add i32 %v0_159ac, 4
  store i32 %v6_159b4, i32* %r2.global-to-local, align 4
  %v8_159b4 = sub i32 -5, %v0_159ac
  %v9_159b4 = and i32 %v8_159b4, %v2_159ac
  %v10_159b4 = icmp slt i32 %v9_159b4, 0
  store i1 %v10_159b4, i1* %cpsr_v.global-to-local, align 1
  %v11_159b4 = icmp slt i32 %v6_159b4, 0
  store i1 %v11_159b4, i1* %cpsr_n.global-to-local, align 1
  %v12_159b4 = icmp eq i32 %v2_159ac, 4
  store i1 %v12_159b4, i1* %cpsr_z.global-to-local, align 1
  %v5_159b8 = icmp slt i32 %v2_159ac, 4
  %v6_159b8 = load i32, i32* %r1.global-to-local, align 4
  %v7_159b8 = add i32 %v6_159b8, -4
  %v8_159b8 = inttoptr i32 %v7_159b8 to i32*
  %v9_159b8 = load i32, i32* %v8_159b8, align 4
  store i32 %v9_159b8, i32* %r3.global-to-local, align 4
  br i1 %v5_159b8, label %.thread19, label %bb140

.thread19:                                        ; preds = %dec_label_pc_159b4
  store i32 %v7_159b8, i32* %r1.global-to-local, align 4
  %v8_159bc = add i32 %v7_159bc, -4
  %v9_159bc = inttoptr i32 %v8_159bc to i32*
  store i32 %v9_159b8, i32* %v9_159bc, align 4
  %v10_159bc = load i32, i32* %r0.global-to-local, align 4
  %v11_159bc = add i32 %v10_159bc, -4
  store i32 %v11_159bc, i32* %r0.global-to-local, align 4
  %v0_159cc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb141

bb140:                                            ; preds = %dec_label_pc_159b4
  %v10_159c0 = add i32 %v6_159b8, -8
  %v11_159c0 = inttoptr i32 %v10_159c0 to i32*
  %v12_159c0 = load i32, i32* %v11_159c0, align 4
  store i32 %v12_159c0, i32* @ip, align 4
  store i32 %v10_159c0, i32* %r1.global-to-local, align 4
  %v7_159c4 = add i32 %v7_159bc, -8
  %v8_159c4 = inttoptr i32 %v7_159c4 to i32*
  store i32 %v9_159b8, i32* %v8_159c4, align 4
  %v10_159c4 = add i32 %v7_159bc, -4
  %v11_159c4 = inttoptr i32 %v10_159c4 to i32*
  %v12_159c4 = load i32, i32* @ip, align 4
  store i32 %v12_159c4, i32* %v11_159c4, align 4
  store i32 %v7_159c4, i32* %r0.global-to-local, align 4
  %v6_159c8 = load i32, i32* %r2.global-to-local, align 4
  %v7_159c8 = add i32 %v6_159c8, -4
  store i32 %v7_159c8, i32* %r2.global-to-local, align 4
  br label %bb141

bb141:                                            ; preds = %.thread19, %.thread25, %dec_label_pc_1593c, %dec_label_pc_159ac, %dec_label_pc_15b70, %dec_label_pc_15b04, %dec_label_pc_15a98, %bb140
  %v2_159d0 = phi i32 [ %v11_159bc, %.thread19 ], [ %v0_15a6831, %.thread25 ], [ %v2_15940, %dec_label_pc_1593c ], [ %v7_159bc, %dec_label_pc_159ac ], [ %v2_159dc64, %dec_label_pc_15b70 ], [ %v2_159dc63, %dec_label_pc_15b04 ], [ %v2_159dc62, %dec_label_pc_15a98 ], [ %v7_159c4, %bb140 ]
  %v0_159cc = phi i32 [ %v0_159cc.pre, %.thread19 ], [ %v2_15a10, %.thread25 ], [ %v2_15944, %dec_label_pc_1593c ], [ %v2_159ac, %dec_label_pc_159ac ], [ %v0_159cc60, %dec_label_pc_15b70 ], [ %v0_159cc59, %dec_label_pc_15b04 ], [ %v0_159cc58, %dec_label_pc_15a98 ], [ %v7_159c8, %bb140 ]
  %v1_159cc = add i32 %v0_159cc, 4
  store i32 %v1_159cc, i32* @r2, align 4
  %v3_159cc = sub i32 0, %v0_159cc
  %v4_159cc = and i32 %v1_159cc, %v3_159cc
  %v5_159cc = icmp slt i32 %v4_159cc, 0
  store i1 %v5_159cc, i1* %cpsr_v.global-to-local, align 1
  %v6_159cc = icmp slt i32 %v1_159cc, 0
  store i1 %v6_159cc, i1* %cpsr_n.global-to-local, align 1
  %v7_159cc = icmp eq i32 %v1_159cc, 0
  store i1 %v7_159cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_159cc, label %.thread122, label %bb142

bb142:                                            ; preds = %bb141
  %v1_159d4 = add i32 %v0_159cc, 2
  %v3_159d4 = sub i32 -3, %v0_159cc
  %v4_159d4 = and i32 %v3_159d4, %v1_159cc
  %v5_159d4 = icmp slt i32 %v4_159d4, 0
  store i1 %v5_159d4, i1* %cpsr_v.global-to-local, align 1
  %v6_159d4 = icmp slt i32 %v1_159d4, 0
  store i1 %v6_159d4, i1* %cpsr_n.global-to-local, align 1
  %v7_159d4 = icmp eq i32 %v1_159cc, 2
  store i1 %v7_159d4, i1* %cpsr_z.global-to-local, align 1
  %v0_159d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_159d8 = add i32 %v0_159d8, -1
  %v2_159d8 = inttoptr i32 %v1_159d8 to i8*
  %v3_159d8 = load i8, i8* %v2_159d8, align 1
  %v4_159d8 = zext i8 %v3_159d8 to i32
  store i32 %v4_159d8, i32* %r3.global-to-local, align 4
  store i32 %v1_159d8, i32* %r1.global-to-local, align 4
  %v3_159dc = add i32 %v2_159d0, -1
  %v4_159dc = inttoptr i32 %v3_159dc to i8*
  store i8 %v3_159d8, i8* %v4_159dc, align 1
  %v5_159dc = load i32, i32* %r0.global-to-local, align 4
  %v6_159dc = add i32 %v5_159dc, -1
  store i32 %v6_159dc, i32* %r0.global-to-local, align 4
  %v0_159e0 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_159e0 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_159e0 = xor i1 %v0_159e0, %v1_159e0
  br i1 %v2_159e0, label %.thread121, label %bb143

bb143:                                            ; preds = %bb142
  %v3_159e0 = load i32, i32* %r1.global-to-local, align 4
  %v4_159e0 = add i32 %v3_159e0, -1
  %v5_159e0 = inttoptr i32 %v4_159e0 to i8*
  %v6_159e0 = load i8, i8* %v5_159e0, align 1
  %v7_159e0 = zext i8 %v6_159e0 to i32
  store i32 %v7_159e0, i32* %r3.global-to-local, align 4
  store i32 %v4_159e0, i32* %r1.global-to-local, align 4
  %v6_159e4 = add i32 %v5_159dc, -2
  %v7_159e4 = inttoptr i32 %v6_159e4 to i8*
  store i8 %v6_159e0, i8* %v7_159e4, align 1
  %v8_159e4 = load i32, i32* %r0.global-to-local, align 4
  %v9_159e4 = add i32 %v8_159e4, -1
  store i32 %v9_159e4, i32* %r0.global-to-local, align 4
  %v1_159e8.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_159e8.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread121

.thread121:                                       ; preds = %bb142, %bb143
  %v7_159ec = phi i32 [ %v9_159e4, %bb143 ], [ %v6_159dc, %bb142 ]
  %v2_159ec = phi i1 [ %v2_159e8.pre, %bb143 ], [ %v1_159e0, %bb142 ]
  %v1_159ec = phi i1 [ %v1_159e8.pre, %bb143 ], [ %v0_159e0, %bb142 ]
  %v0_159e8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_159e8 = xor i1 %v2_159ec, %v1_159ec
  %v4_159e8 = or i1 %v0_159e8, %v3_159e8
  br i1 %v4_159e8, label %.thread122, label %bb144

bb144:                                            ; preds = %.thread121
  %v5_159e8 = load i32, i32* %r1.global-to-local, align 4
  %v6_159e8 = add i32 %v5_159e8, -1
  %v7_159e8 = inttoptr i32 %v6_159e8 to i8*
  %v8_159e8 = load i8, i8* %v7_159e8, align 1
  %v9_159e8 = zext i8 %v8_159e8 to i32
  store i32 %v9_159e8, i32* %r3.global-to-local, align 4
  store i32 %v6_159e8, i32* %r1.global-to-local, align 4
  %v8_159ec = add i32 %v7_159ec, -1
  %v9_159ec = inttoptr i32 %v8_159ec to i8*
  store i8 %v8_159e8, i8* %v9_159ec, align 1
  %v10_159ec = load i32, i32* %r0.global-to-local, align 4
  %v11_159ec = add i32 %v10_159ec, -1
  store i32 %v11_159ec, i32* %r0.global-to-local, align 4
  br label %.thread122

dec_label_pc_159f4:                               ; preds = %dec_label_pc_1594c
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_159f4 = icmp eq i32 %v1_1594c, 1
  store i1 %v8_159f4, i1* %cpsr_n.global-to-local, align 1
  %v9_159f4 = icmp eq i32 %v1_1594c, 2
  store i1 %v9_159f4, i1* %cpsr_z.global-to-local, align 1
  %v1_159f8 = add i32 %v2_1593c, -1
  %v2_159f8 = inttoptr i32 %v1_159f8 to i8*
  %v3_159f8 = load i8, i8* %v2_159f8, align 1
  %v4_159f8 = zext i8 %v3_159f8 to i32
  store i32 %v4_159f8, i32* %r3.global-to-local, align 4
  store i32 %v1_159f8, i32* %r1.global-to-local, align 4
  %v3_159fc = add i32 %v2_15940, -1
  %v4_159fc = inttoptr i32 %v3_159fc to i8*
  store i8 %v3_159f8, i8* %v4_159fc, align 1
  %v5_159fc = load i32, i32* %r0.global-to-local, align 4
  %v6_159fc = add i32 %v5_159fc, -1
  store i32 %v6_159fc, i32* %r0.global-to-local, align 4
  br i1 %v8_159f4, label %.thread25, label %bb145

bb145:                                            ; preds = %dec_label_pc_159f4
  %v6_15a00 = load i32, i32* %r1.global-to-local, align 4
  %v7_15a00 = add i32 %v6_15a00, -1
  %v8_15a00 = inttoptr i32 %v7_15a00 to i8*
  %v9_15a00 = load i8, i8* %v8_15a00, align 1
  %v10_15a00 = zext i8 %v9_15a00 to i32
  store i32 %v10_15a00, i32* %r3.global-to-local, align 4
  store i32 %v7_15a00, i32* %r1.global-to-local, align 4
  %v9_15a04 = add i32 %v5_159fc, -2
  %v10_15a04 = inttoptr i32 %v9_15a04 to i8*
  store i8 %v9_15a00, i8* %v10_15a04, align 1
  %v11_15a04 = load i32, i32* %r0.global-to-local, align 4
  %v12_15a04 = add i32 %v11_15a04, -1
  store i32 %v12_15a04, i32* %r0.global-to-local, align 4
  br i1 %v9_159f4, label %.thread25, label %bb146

bb146:                                            ; preds = %bb145
  %v8_15a08 = load i32, i32* %r1.global-to-local, align 4
  %v9_15a08 = add i32 %v8_15a08, -1
  %v10_15a08 = inttoptr i32 %v9_15a08 to i8*
  %v11_15a08 = load i8, i8* %v10_15a08, align 1
  %v12_15a08 = zext i8 %v11_15a08 to i32
  store i32 %v12_15a08, i32* %r3.global-to-local, align 4
  store i32 %v9_15a08, i32* %r1.global-to-local, align 4
  %v11_15a0c = add i32 %v11_15a04, -2
  %v12_15a0c = inttoptr i32 %v11_15a0c to i8*
  store i8 %v11_15a08, i8* %v12_15a0c, align 1
  %v13_15a0c = load i32, i32* %r0.global-to-local, align 4
  %v14_15a0c = add i32 %v13_15a0c, -1
  store i32 %v14_15a0c, i32* %r0.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb145, %dec_label_pc_159f4, %bb146
  %v0_15a6831 = phi i32 [ %v12_15a04, %bb145 ], [ %v6_159fc, %dec_label_pc_159f4 ], [ %v14_15a0c, %bb146 ]
  %v0_15a10 = load i32, i32* %r2.global-to-local, align 4
  %v1_15a10 = load i32, i32* @ip, align 4
  %v2_15a10 = sub i32 %v0_15a10, %v1_15a10
  store i32 %v2_15a10, i32* %r2.global-to-local, align 4
  %v4_15a10 = xor i32 %v1_15a10, %v0_15a10
  %v5_15a10 = xor i32 %v2_15a10, %v0_15a10
  %v6_15a10 = and i32 %v5_15a10, %v4_15a10
  %v7_15a10 = icmp slt i32 %v6_15a10, 0
  store i1 %v7_15a10, i1* %cpsr_v.global-to-local, align 1
  %v8_15a10 = icmp slt i32 %v2_15a10, 0
  store i1 %v8_15a10, i1* %cpsr_n.global-to-local, align 1
  %v9_15a10 = icmp eq i32 %v0_15a10, %v1_15a10
  store i1 %v9_15a10, i1* %cpsr_z.global-to-local, align 1
  %v5_15a14 = icmp slt i32 %v0_15a10, %v1_15a10
  br i1 %v5_15a14, label %bb141, label %dec_label_pc_15a18

dec_label_pc_15a18:                               ; preds = %.thread25
  %v0_15a18 = load i32, i32* %r1.global-to-local, align 4
  %v1_15a18 = urem i32 %v0_15a18, 4
  store i32 %v1_15a18, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15a18 = icmp eq i32 %v1_15a18, 0
  store i1 %v2_15a18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15a18, label %dec_label_pc_1595c, label %dec_label_pc_15a20

dec_label_pc_15a20:                               ; preds = %dec_label_pc_15954, %dec_label_pc_15a18
  %v0_15a6830 = phi i32 [ %v2_15940, %dec_label_pc_15954 ], [ %v0_15a6831, %dec_label_pc_15a18 ]
  %v0_15b14 = phi i32 [ %v2_15944, %dec_label_pc_15954 ], [ %v2_15a10, %dec_label_pc_15a18 ]
  %v0_15a20 = phi i32 [ %v2_1593c, %dec_label_pc_15954 ], [ %v0_15a18, %dec_label_pc_15a18 ]
  %v0_15a28 = phi i32 [ %v1_15954, %dec_label_pc_15954 ], [ %v1_15a18, %dec_label_pc_15a18 ]
  %v1_15a20 = and i32 %v0_15a20, -4
  store i32 %v1_15a20, i32* %r1.global-to-local, align 4
  %v1_15a24 = inttoptr i32 %v1_15a20 to i32*
  %v2_15a24 = load i32, i32* %v1_15a24, align 4
  store i32 %v2_15a24, i32* %r3.global-to-local, align 4
  %v7_15a28 = icmp ult i32 %v0_15a28, 2
  %v2_15b0c = add i32 %v0_15b14, -12
  %v4_15b0c = sub i32 11, %v0_15b14
  %v5_15b0c = and i32 %v4_15b0c, %v0_15b14
  %v6_15b0c = icmp slt i32 %v5_15b0c, 0
  store i1 %v6_15b0c, i1* %cpsr_v.global-to-local, align 1
  %v7_15b0c = icmp slt i32 %v2_15b0c, 0
  store i1 %v7_15b0c, i1* %cpsr_n.global-to-local, align 1
  %v8_15b0c = icmp eq i32 %v0_15b14, 12
  store i1 %v8_15b0c, i1* %cpsr_z.global-to-local, align 1
  %v5_15b10 = icmp slt i32 %v0_15b14, 12
  br i1 %v7_15a28, label %dec_label_pc_15b0c, label %dec_label_pc_15a30

dec_label_pc_15a30:                               ; preds = %dec_label_pc_15a20
  %v8_15a28 = icmp eq i32 %v0_15a28, 2
  br i1 %v8_15a28, label %dec_label_pc_15aa0, label %dec_label_pc_15a34

dec_label_pc_15a34:                               ; preds = %dec_label_pc_15a30
  br i1 %v5_15b10, label %dec_label_pc_15a80, label %dec_label_pc_15a3c

dec_label_pc_15a3c:                               ; preds = %dec_label_pc_15a34
  store i32 %v2_15b0c, i32* %r2.global-to-local, align 4
  %v3_15a40 = load i32, i32* @r4, align 4
  store i32 %v3_15a40, i32* %stack_var_-12, align 4
  %v6_15a40 = load i32, i32* @r5, align 4
  store i32 %v6_15a40, i32* %stack_var_-8, align 4
  %v9_15a40 = load i32, i32* @lr, align 4
  br label %dec_label_pc_15a44

dec_label_pc_15a44:                               ; preds = %dec_label_pc_15a44.dec_label_pc_15a44_crit_edge, %dec_label_pc_15a3c
  %v0_15a68 = phi i32 [ %v1_15a68, %dec_label_pc_15a44.dec_label_pc_15a44_crit_edge ], [ %v0_15a6830, %dec_label_pc_15a3c ]
  %v0_15a48 = phi i32 [ %v0_15a48.pre, %dec_label_pc_15a44.dec_label_pc_15a44_crit_edge ], [ %v1_15a20, %dec_label_pc_15a3c ]
  %v0_15a44 = phi i32 [ %v0_15a44.pre, %dec_label_pc_15a44.dec_label_pc_15a44_crit_edge ], [ %v2_15a24, %dec_label_pc_15a3c ]
  %v3_15a44 = mul i32 %v0_15a44, 256
  store i32 %v3_15a44, i32* %lr.global-to-local, align 4
  %v1_15a48 = add i32 %v0_15a48, -4
  %v2_15a48 = inttoptr i32 %v1_15a48 to i32*
  %v3_15a48 = load i32, i32* %v2_15a48, align 4
  store i32 %v3_15a48, i32* %r3.global-to-local, align 4
  %v4_15a48 = add i32 %v0_15a48, -8
  %v5_15a48 = inttoptr i32 %v4_15a48 to i32*
  %v6_15a48 = load i32, i32* %v5_15a48, align 4
  store i32 %v6_15a48, i32* %r4.global-to-local, align 4
  %v7_15a48 = add i32 %v0_15a48, -12
  %v8_15a48 = inttoptr i32 %v7_15a48 to i32*
  %v9_15a48 = load i32, i32* %v8_15a48, align 4
  store i32 %v9_15a48, i32* %r5.global-to-local, align 4
  %v10_15a48 = add i32 %v0_15a48, -16
  %v11_15a48 = inttoptr i32 %v10_15a48 to i32*
  %v12_15a48 = load i32, i32* %v11_15a48, align 4
  store i32 %v10_15a48, i32* %r1.global-to-local, align 4
  %v4_15a4c = udiv i32 %v12_15a48, 16777216
  %v5_15a4c = or i32 %v4_15a4c, %v3_15a44
  store i32 %v5_15a4c, i32* %lr.global-to-local, align 4
  %v3_15a50 = mul i32 %v12_15a48, 256
  %v4_15a54 = udiv i32 %v9_15a48, 16777216
  %v5_15a54 = or i32 %v3_15a50, %v4_15a54
  store i32 %v5_15a54, i32* @ip, align 4
  %v3_15a58 = mul i32 %v9_15a48, 256
  %v4_15a5c = udiv i32 %v6_15a48, 16777216
  %v5_15a5c = or i32 %v3_15a58, %v4_15a5c
  store i32 %v5_15a5c, i32* %r5.global-to-local, align 4
  %v3_15a60 = mul i32 %v6_15a48, 256
  %v4_15a64 = udiv i32 %v3_15a48, 16777216
  %v5_15a64 = or i32 %v3_15a60, %v4_15a64
  store i32 %v5_15a64, i32* %r4.global-to-local, align 4
  %v1_15a68 = add i32 %v0_15a68, -16
  %v2_15a68 = inttoptr i32 %v1_15a68 to i32*
  store i32 %v5_15a64, i32* %v2_15a68, align 4
  %v4_15a68 = add i32 %v0_15a68, -12
  %v5_15a68 = inttoptr i32 %v4_15a68 to i32*
  %v6_15a68 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15a68, i32* %v5_15a68, align 4
  %v7_15a68 = add i32 %v0_15a68, -8
  %v8_15a68 = inttoptr i32 %v7_15a68 to i32*
  %v9_15a68 = load i32, i32* @ip, align 4
  store i32 %v9_15a68, i32* %v8_15a68, align 4
  %v10_15a68 = add i32 %v0_15a68, -4
  %v11_15a68 = inttoptr i32 %v10_15a68 to i32*
  %v12_15a68 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15a68, i32* %v11_15a68, align 4
  store i32 %v1_15a68, i32* %r0.global-to-local, align 4
  %v0_15a6c = load i32, i32* %r2.global-to-local, align 4
  %v2_15a6c = add i32 %v0_15a6c, -16
  store i32 %v2_15a6c, i32* %r2.global-to-local, align 4
  %v6_15a70 = icmp slt i32 %v0_15a6c, 16
  br i1 %v6_15a70, label %dec_label_pc_15a74, label %dec_label_pc_15a44.dec_label_pc_15a44_crit_edge

dec_label_pc_15a44.dec_label_pc_15a44_crit_edge:  ; preds = %dec_label_pc_15a44
  %v0_15a44.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_15a48.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15a44

dec_label_pc_15a74:                               ; preds = %dec_label_pc_15a44
  %v2_15a74 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15a74, i32* @r4, align 4
  %v5_15a74 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_15a74, i32* @r5, align 4
  store i32 %v9_15a40, i32* @lr, align 4
  %v2_15a78 = add i32 %v0_15a6c, -4
  store i32 %v2_15a78, i32* %r2.global-to-local, align 4
  %v4_15a78 = add i32 %v0_15a6c, 2147483632
  %v5_15a78 = and i32 %v2_15a78, %v4_15a78
  %v6_15a78 = icmp slt i32 %v5_15a78, 0
  store i1 %v6_15a78, i1* %cpsr_v.global-to-local, align 1
  %v7_15a78 = icmp slt i32 %v2_15a78, 0
  store i1 %v7_15a78, i1* %cpsr_n.global-to-local, align 1
  %v8_15a78 = icmp eq i32 %v2_15a78, 0
  store i1 %v8_15a78, i1* %cpsr_z.global-to-local, align 1
  %v5_15a7c = icmp slt i32 %v2_15a6c, -12
  br i1 %v5_15a7c, label %dec_label_pc_15a98, label %dec_label_pc_15a80

dec_label_pc_15a80:                               ; preds = %dec_label_pc_15a74, %dec_label_pc_15a34, %dec_label_pc_15a80
  %v1_15a8c = phi i32 [ %v5_15a8c, %dec_label_pc_15a80 ], [ %v1_15a68, %dec_label_pc_15a74 ], [ %v0_15a6830, %dec_label_pc_15a34 ]
  %v0_15a80 = load i32, i32* %r3.global-to-local, align 4
  %v3_15a80 = mul i32 %v0_15a80, 256
  store i32 %v3_15a80, i32* %ip.global-to-local, align 4
  %v0_15a84 = load i32, i32* %r1.global-to-local, align 4
  %v1_15a84 = add i32 %v0_15a84, -4
  %v2_15a84 = inttoptr i32 %v1_15a84 to i32*
  %v3_15a84 = load i32, i32* %v2_15a84, align 4
  store i32 %v3_15a84, i32* %r3.global-to-local, align 4
  store i32 %v1_15a84, i32* %r1.global-to-local, align 4
  %v4_15a88 = udiv i32 %v3_15a84, 16777216
  %v5_15a88 = or i32 %v4_15a88, %v3_15a80
  store i32 %v5_15a88, i32* @ip, align 4
  %v2_15a8c = add i32 %v1_15a8c, -4
  %v3_15a8c = inttoptr i32 %v2_15a8c to i32*
  store i32 %v5_15a88, i32* %v3_15a8c, align 4
  %v4_15a8c = load i32, i32* %r0.global-to-local, align 4
  %v5_15a8c = add i32 %v4_15a8c, -4
  store i32 %v5_15a8c, i32* %r0.global-to-local, align 4
  %v0_15a90 = load i32, i32* %r2.global-to-local, align 4
  %v2_15a90 = add i32 %v0_15a90, -4
  store i32 %v2_15a90, i32* %r2.global-to-local, align 4
  %v6_15a94 = icmp slt i32 %v0_15a90, 4
  br i1 %v6_15a94, label %dec_label_pc_15a98.loopexit, label %dec_label_pc_15a80

dec_label_pc_15a98.loopexit:                      ; preds = %dec_label_pc_15a80
  %v4_15a90 = sub i32 3, %v0_15a90
  %v5_15a90 = and i32 %v4_15a90, %v0_15a90
  %v6_15a90 = icmp slt i32 %v5_15a90, 0
  %v7_15a90 = icmp slt i32 %v2_15a90, 0
  store i1 %v6_15a90, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15a90, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15a98

dec_label_pc_15a98:                               ; preds = %dec_label_pc_15a98.loopexit, %dec_label_pc_15a74
  %v2_159dc62 = phi i32 [ %v5_15a8c, %dec_label_pc_15a98.loopexit ], [ %v1_15a68, %dec_label_pc_15a74 ]
  %v0_159cc58 = phi i32 [ %v2_15a90, %dec_label_pc_15a98.loopexit ], [ %v2_15a78, %dec_label_pc_15a74 ]
  %v0_15a98 = load i32, i32* %r1.global-to-local, align 4
  %v1_15a98 = add i32 %v0_15a98, 3
  store i32 %v1_15a98, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_15aa0:                               ; preds = %dec_label_pc_15a30
  br i1 %v5_15b10, label %dec_label_pc_15aec, label %dec_label_pc_15aa8

dec_label_pc_15aa8:                               ; preds = %dec_label_pc_15aa0
  store i32 %v2_15b0c, i32* %r2.global-to-local, align 4
  %v3_15aac = load i32, i32* @r4, align 4
  store i32 %v3_15aac, i32* %stack_var_-12, align 4
  %v6_15aac = load i32, i32* @r5, align 4
  store i32 %v6_15aac, i32* %stack_var_-8, align 4
  %v9_15aac = load i32, i32* @lr, align 4
  br label %dec_label_pc_15ab0

dec_label_pc_15ab0:                               ; preds = %dec_label_pc_15ab0.dec_label_pc_15ab0_crit_edge, %dec_label_pc_15aa8
  %v0_15ad4 = phi i32 [ %v1_15ad4, %dec_label_pc_15ab0.dec_label_pc_15ab0_crit_edge ], [ %v0_15a6830, %dec_label_pc_15aa8 ]
  %v0_15ab4 = phi i32 [ %v0_15ab4.pre, %dec_label_pc_15ab0.dec_label_pc_15ab0_crit_edge ], [ %v1_15a20, %dec_label_pc_15aa8 ]
  %v0_15ab0 = phi i32 [ %v0_15ab0.pre, %dec_label_pc_15ab0.dec_label_pc_15ab0_crit_edge ], [ %v2_15a24, %dec_label_pc_15aa8 ]
  %v3_15ab0 = mul i32 %v0_15ab0, 65536
  store i32 %v3_15ab0, i32* %lr.global-to-local, align 4
  %v1_15ab4 = add i32 %v0_15ab4, -4
  %v2_15ab4 = inttoptr i32 %v1_15ab4 to i32*
  %v3_15ab4 = load i32, i32* %v2_15ab4, align 4
  store i32 %v3_15ab4, i32* %r3.global-to-local, align 4
  %v4_15ab4 = add i32 %v0_15ab4, -8
  %v5_15ab4 = inttoptr i32 %v4_15ab4 to i32*
  %v6_15ab4 = load i32, i32* %v5_15ab4, align 4
  store i32 %v6_15ab4, i32* %r4.global-to-local, align 4
  %v7_15ab4 = add i32 %v0_15ab4, -12
  %v8_15ab4 = inttoptr i32 %v7_15ab4 to i32*
  %v9_15ab4 = load i32, i32* %v8_15ab4, align 4
  store i32 %v9_15ab4, i32* %r5.global-to-local, align 4
  %v10_15ab4 = add i32 %v0_15ab4, -16
  %v11_15ab4 = inttoptr i32 %v10_15ab4 to i32*
  %v12_15ab4 = load i32, i32* %v11_15ab4, align 4
  store i32 %v10_15ab4, i32* %r1.global-to-local, align 4
  %v4_15ab8 = udiv i32 %v12_15ab4, 65536
  %v5_15ab8 = or i32 %v4_15ab8, %v3_15ab0
  store i32 %v5_15ab8, i32* %lr.global-to-local, align 4
  %v3_15abc = mul i32 %v12_15ab4, 65536
  %v4_15ac0 = udiv i32 %v9_15ab4, 65536
  %v5_15ac0 = or i32 %v3_15abc, %v4_15ac0
  store i32 %v5_15ac0, i32* @ip, align 4
  %v3_15ac4 = mul i32 %v9_15ab4, 65536
  %v4_15ac8 = udiv i32 %v6_15ab4, 65536
  %v5_15ac8 = or i32 %v3_15ac4, %v4_15ac8
  store i32 %v5_15ac8, i32* %r5.global-to-local, align 4
  %v3_15acc = mul i32 %v6_15ab4, 65536
  %v4_15ad0 = udiv i32 %v3_15ab4, 65536
  %v5_15ad0 = or i32 %v3_15acc, %v4_15ad0
  store i32 %v5_15ad0, i32* %r4.global-to-local, align 4
  %v1_15ad4 = add i32 %v0_15ad4, -16
  %v2_15ad4 = inttoptr i32 %v1_15ad4 to i32*
  store i32 %v5_15ad0, i32* %v2_15ad4, align 4
  %v4_15ad4 = add i32 %v0_15ad4, -12
  %v5_15ad4 = inttoptr i32 %v4_15ad4 to i32*
  %v6_15ad4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15ad4, i32* %v5_15ad4, align 4
  %v7_15ad4 = add i32 %v0_15ad4, -8
  %v8_15ad4 = inttoptr i32 %v7_15ad4 to i32*
  %v9_15ad4 = load i32, i32* @ip, align 4
  store i32 %v9_15ad4, i32* %v8_15ad4, align 4
  %v10_15ad4 = add i32 %v0_15ad4, -4
  %v11_15ad4 = inttoptr i32 %v10_15ad4 to i32*
  %v12_15ad4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15ad4, i32* %v11_15ad4, align 4
  store i32 %v1_15ad4, i32* %r0.global-to-local, align 4
  %v0_15ad8 = load i32, i32* %r2.global-to-local, align 4
  %v2_15ad8 = add i32 %v0_15ad8, -16
  store i32 %v2_15ad8, i32* %r2.global-to-local, align 4
  %v6_15adc = icmp slt i32 %v0_15ad8, 16
  br i1 %v6_15adc, label %dec_label_pc_15ae0, label %dec_label_pc_15ab0.dec_label_pc_15ab0_crit_edge

dec_label_pc_15ab0.dec_label_pc_15ab0_crit_edge:  ; preds = %dec_label_pc_15ab0
  %v0_15ab0.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_15ab4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15ab0

dec_label_pc_15ae0:                               ; preds = %dec_label_pc_15ab0
  %v2_15ae0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15ae0, i32* @r4, align 4
  %v5_15ae0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_15ae0, i32* @r5, align 4
  store i32 %v9_15aac, i32* @lr, align 4
  %v2_15ae4 = add i32 %v0_15ad8, -4
  store i32 %v2_15ae4, i32* %r2.global-to-local, align 4
  %v4_15ae4 = add i32 %v0_15ad8, 2147483632
  %v5_15ae4 = and i32 %v2_15ae4, %v4_15ae4
  %v6_15ae4 = icmp slt i32 %v5_15ae4, 0
  store i1 %v6_15ae4, i1* %cpsr_v.global-to-local, align 1
  %v7_15ae4 = icmp slt i32 %v2_15ae4, 0
  store i1 %v7_15ae4, i1* %cpsr_n.global-to-local, align 1
  %v8_15ae4 = icmp eq i32 %v2_15ae4, 0
  store i1 %v8_15ae4, i1* %cpsr_z.global-to-local, align 1
  %v5_15ae8 = icmp slt i32 %v2_15ad8, -12
  br i1 %v5_15ae8, label %dec_label_pc_15b04, label %dec_label_pc_15aec

dec_label_pc_15aec:                               ; preds = %dec_label_pc_15ae0, %dec_label_pc_15aa0, %dec_label_pc_15aec
  %v1_15af8 = phi i32 [ %v5_15af8, %dec_label_pc_15aec ], [ %v1_15ad4, %dec_label_pc_15ae0 ], [ %v0_15a6830, %dec_label_pc_15aa0 ]
  %v0_15aec = load i32, i32* %r3.global-to-local, align 4
  %v3_15aec = mul i32 %v0_15aec, 65536
  store i32 %v3_15aec, i32* %ip.global-to-local, align 4
  %v0_15af0 = load i32, i32* %r1.global-to-local, align 4
  %v1_15af0 = add i32 %v0_15af0, -4
  %v2_15af0 = inttoptr i32 %v1_15af0 to i32*
  %v3_15af0 = load i32, i32* %v2_15af0, align 4
  store i32 %v3_15af0, i32* %r3.global-to-local, align 4
  store i32 %v1_15af0, i32* %r1.global-to-local, align 4
  %v4_15af4 = udiv i32 %v3_15af0, 65536
  %v5_15af4 = or i32 %v4_15af4, %v3_15aec
  store i32 %v5_15af4, i32* @ip, align 4
  %v2_15af8 = add i32 %v1_15af8, -4
  %v3_15af8 = inttoptr i32 %v2_15af8 to i32*
  store i32 %v5_15af4, i32* %v3_15af8, align 4
  %v4_15af8 = load i32, i32* %r0.global-to-local, align 4
  %v5_15af8 = add i32 %v4_15af8, -4
  store i32 %v5_15af8, i32* %r0.global-to-local, align 4
  %v0_15afc = load i32, i32* %r2.global-to-local, align 4
  %v2_15afc = add i32 %v0_15afc, -4
  store i32 %v2_15afc, i32* %r2.global-to-local, align 4
  %v6_15b00 = icmp slt i32 %v0_15afc, 4
  br i1 %v6_15b00, label %dec_label_pc_15b04.loopexit, label %dec_label_pc_15aec

dec_label_pc_15b04.loopexit:                      ; preds = %dec_label_pc_15aec
  %v4_15afc = sub i32 3, %v0_15afc
  %v5_15afc = and i32 %v4_15afc, %v0_15afc
  %v6_15afc = icmp slt i32 %v5_15afc, 0
  %v7_15afc = icmp slt i32 %v2_15afc, 0
  store i1 %v6_15afc, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15afc, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15b04

dec_label_pc_15b04:                               ; preds = %dec_label_pc_15b04.loopexit, %dec_label_pc_15ae0
  %v2_159dc63 = phi i32 [ %v5_15af8, %dec_label_pc_15b04.loopexit ], [ %v1_15ad4, %dec_label_pc_15ae0 ]
  %v0_159cc59 = phi i32 [ %v2_15afc, %dec_label_pc_15b04.loopexit ], [ %v2_15ae4, %dec_label_pc_15ae0 ]
  %v0_15b04 = load i32, i32* %r1.global-to-local, align 4
  %v1_15b04 = add i32 %v0_15b04, 2
  store i32 %v1_15b04, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_15b0c:                               ; preds = %dec_label_pc_15a20
  br i1 %v5_15b10, label %dec_label_pc_15b58, label %dec_label_pc_15b14

dec_label_pc_15b14:                               ; preds = %dec_label_pc_15b0c
  store i32 %v2_15b0c, i32* %r2.global-to-local, align 4
  %v3_15b18 = load i32, i32* @r4, align 4
  store i32 %v3_15b18, i32* %stack_var_-12, align 4
  %v6_15b18 = load i32, i32* @r5, align 4
  store i32 %v6_15b18, i32* %stack_var_-8, align 4
  %v9_15b18 = load i32, i32* @lr, align 4
  br label %dec_label_pc_15b1c

dec_label_pc_15b1c:                               ; preds = %dec_label_pc_15b1c.dec_label_pc_15b1c_crit_edge, %dec_label_pc_15b14
  %v0_15b40 = phi i32 [ %v1_15b40, %dec_label_pc_15b1c.dec_label_pc_15b1c_crit_edge ], [ %v0_15a6830, %dec_label_pc_15b14 ]
  %v0_15b20 = phi i32 [ %v0_15b20.pre, %dec_label_pc_15b1c.dec_label_pc_15b1c_crit_edge ], [ %v1_15a20, %dec_label_pc_15b14 ]
  %v0_15b1c = phi i32 [ %v0_15b1c.pre, %dec_label_pc_15b1c.dec_label_pc_15b1c_crit_edge ], [ %v2_15a24, %dec_label_pc_15b14 ]
  %v3_15b1c = mul i32 %v0_15b1c, 16777216
  store i32 %v3_15b1c, i32* %lr.global-to-local, align 4
  %v1_15b20 = add i32 %v0_15b20, -4
  %v2_15b20 = inttoptr i32 %v1_15b20 to i32*
  %v3_15b20 = load i32, i32* %v2_15b20, align 4
  store i32 %v3_15b20, i32* %r3.global-to-local, align 4
  %v4_15b20 = add i32 %v0_15b20, -8
  %v5_15b20 = inttoptr i32 %v4_15b20 to i32*
  %v6_15b20 = load i32, i32* %v5_15b20, align 4
  store i32 %v6_15b20, i32* %r4.global-to-local, align 4
  %v7_15b20 = add i32 %v0_15b20, -12
  %v8_15b20 = inttoptr i32 %v7_15b20 to i32*
  %v9_15b20 = load i32, i32* %v8_15b20, align 4
  store i32 %v9_15b20, i32* %r5.global-to-local, align 4
  %v10_15b20 = add i32 %v0_15b20, -16
  %v11_15b20 = inttoptr i32 %v10_15b20 to i32*
  %v12_15b20 = load i32, i32* %v11_15b20, align 4
  store i32 %v10_15b20, i32* %r1.global-to-local, align 4
  %v4_15b24 = udiv i32 %v12_15b20, 256
  %v5_15b24 = or i32 %v4_15b24, %v3_15b1c
  store i32 %v5_15b24, i32* %lr.global-to-local, align 4
  %v3_15b28 = mul i32 %v12_15b20, 16777216
  %v4_15b2c = udiv i32 %v9_15b20, 256
  %v5_15b2c = or i32 %v3_15b28, %v4_15b2c
  store i32 %v5_15b2c, i32* @ip, align 4
  %v3_15b30 = mul i32 %v9_15b20, 16777216
  %v4_15b34 = udiv i32 %v6_15b20, 256
  %v5_15b34 = or i32 %v3_15b30, %v4_15b34
  store i32 %v5_15b34, i32* %r5.global-to-local, align 4
  %v3_15b38 = mul i32 %v6_15b20, 16777216
  %v4_15b3c = udiv i32 %v3_15b20, 256
  %v5_15b3c = or i32 %v3_15b38, %v4_15b3c
  store i32 %v5_15b3c, i32* %r4.global-to-local, align 4
  %v1_15b40 = add i32 %v0_15b40, -16
  %v2_15b40 = inttoptr i32 %v1_15b40 to i32*
  store i32 %v5_15b3c, i32* %v2_15b40, align 4
  %v4_15b40 = add i32 %v0_15b40, -12
  %v5_15b40 = inttoptr i32 %v4_15b40 to i32*
  %v6_15b40 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15b40, i32* %v5_15b40, align 4
  %v7_15b40 = add i32 %v0_15b40, -8
  %v8_15b40 = inttoptr i32 %v7_15b40 to i32*
  %v9_15b40 = load i32, i32* @ip, align 4
  store i32 %v9_15b40, i32* %v8_15b40, align 4
  %v10_15b40 = add i32 %v0_15b40, -4
  %v11_15b40 = inttoptr i32 %v10_15b40 to i32*
  %v12_15b40 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15b40, i32* %v11_15b40, align 4
  store i32 %v1_15b40, i32* %r0.global-to-local, align 4
  %v0_15b44 = load i32, i32* %r2.global-to-local, align 4
  %v2_15b44 = add i32 %v0_15b44, -16
  store i32 %v2_15b44, i32* %r2.global-to-local, align 4
  %v6_15b48 = icmp slt i32 %v0_15b44, 16
  br i1 %v6_15b48, label %dec_label_pc_15b4c, label %dec_label_pc_15b1c.dec_label_pc_15b1c_crit_edge

dec_label_pc_15b1c.dec_label_pc_15b1c_crit_edge:  ; preds = %dec_label_pc_15b1c
  %v0_15b1c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_15b20.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15b1c

dec_label_pc_15b4c:                               ; preds = %dec_label_pc_15b1c
  %v2_15b4c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15b4c, i32* @r4, align 4
  %v5_15b4c = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_15b4c, i32* @r5, align 4
  store i32 %v9_15b18, i32* @lr, align 4
  %v2_15b50 = add i32 %v0_15b44, -4
  store i32 %v2_15b50, i32* %r2.global-to-local, align 4
  %v4_15b50 = add i32 %v0_15b44, 2147483632
  %v5_15b50 = and i32 %v2_15b50, %v4_15b50
  %v6_15b50 = icmp slt i32 %v5_15b50, 0
  store i1 %v6_15b50, i1* %cpsr_v.global-to-local, align 1
  %v7_15b50 = icmp slt i32 %v2_15b50, 0
  store i1 %v7_15b50, i1* %cpsr_n.global-to-local, align 1
  %v8_15b50 = icmp eq i32 %v2_15b50, 0
  store i1 %v8_15b50, i1* %cpsr_z.global-to-local, align 1
  %v5_15b54 = icmp slt i32 %v2_15b44, -12
  br i1 %v5_15b54, label %dec_label_pc_15b70, label %dec_label_pc_15b58

dec_label_pc_15b58:                               ; preds = %dec_label_pc_15b4c, %dec_label_pc_15b0c, %dec_label_pc_15b58
  %v1_15b64 = phi i32 [ %v5_15b64, %dec_label_pc_15b58 ], [ %v1_15b40, %dec_label_pc_15b4c ], [ %v0_15a6830, %dec_label_pc_15b0c ]
  %v0_15b58 = load i32, i32* %r3.global-to-local, align 4
  %v3_15b58 = mul i32 %v0_15b58, 16777216
  store i32 %v3_15b58, i32* %ip.global-to-local, align 4
  %v0_15b5c = load i32, i32* %r1.global-to-local, align 4
  %v1_15b5c = add i32 %v0_15b5c, -4
  %v2_15b5c = inttoptr i32 %v1_15b5c to i32*
  %v3_15b5c = load i32, i32* %v2_15b5c, align 4
  store i32 %v3_15b5c, i32* %r3.global-to-local, align 4
  store i32 %v1_15b5c, i32* %r1.global-to-local, align 4
  %v4_15b60 = udiv i32 %v3_15b5c, 256
  %v5_15b60 = or i32 %v4_15b60, %v3_15b58
  store i32 %v5_15b60, i32* @ip, align 4
  %v2_15b64 = add i32 %v1_15b64, -4
  %v3_15b64 = inttoptr i32 %v2_15b64 to i32*
  store i32 %v5_15b60, i32* %v3_15b64, align 4
  %v4_15b64 = load i32, i32* %r0.global-to-local, align 4
  %v5_15b64 = add i32 %v4_15b64, -4
  store i32 %v5_15b64, i32* %r0.global-to-local, align 4
  %v0_15b68 = load i32, i32* %r2.global-to-local, align 4
  %v2_15b68 = add i32 %v0_15b68, -4
  store i32 %v2_15b68, i32* %r2.global-to-local, align 4
  %v6_15b6c = icmp slt i32 %v0_15b68, 4
  br i1 %v6_15b6c, label %dec_label_pc_15b70.loopexit, label %dec_label_pc_15b58

dec_label_pc_15b70.loopexit:                      ; preds = %dec_label_pc_15b58
  %v4_15b68 = sub i32 3, %v0_15b68
  %v5_15b68 = and i32 %v4_15b68, %v0_15b68
  %v6_15b68 = icmp slt i32 %v5_15b68, 0
  %v7_15b68 = icmp slt i32 %v2_15b68, 0
  store i1 %v6_15b68, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15b68, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15b70

dec_label_pc_15b70:                               ; preds = %dec_label_pc_15b70.loopexit, %dec_label_pc_15b4c
  %v2_159dc64 = phi i32 [ %v5_15b64, %dec_label_pc_15b70.loopexit ], [ %v1_15b40, %dec_label_pc_15b4c ]
  %v0_159cc60 = phi i32 [ %v2_15b68, %dec_label_pc_15b70.loopexit ], [ %v2_15b50, %dec_label_pc_15b4c ]
  %v0_15b70 = load i32, i32* %r1.global-to-local, align 4
  %v1_15b70 = add i32 %v0_15b70, 1
  store i32 %v1_15b70, i32* %r1.global-to-local, align 4
  br label %bb141

; uselistorder directives
  uselistorder i32 %v5_15b64, { 0, 2, 1 }
  uselistorder i32 %v3_15b58, { 1, 0 }
  uselistorder i32 %v2_15b50, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15b40, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15b20, { 1, 0 }
  uselistorder i32 %v3_15b1c, { 1, 0 }
  uselistorder i32 %v0_15b20, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15b40, { 3, 2, 1, 0 }
  uselistorder i32 %v5_15af8, { 0, 2, 1 }
  uselistorder i32 %v3_15aec, { 1, 0 }
  uselistorder i32 %v2_15ae4, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15ad4, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15ab4, { 1, 0 }
  uselistorder i32 %v3_15ab0, { 1, 0 }
  uselistorder i32 %v0_15ab4, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15ad4, { 3, 2, 1, 0 }
  uselistorder i32 %v5_15a8c, { 0, 2, 1 }
  uselistorder i32 %v3_15a80, { 1, 0 }
  uselistorder i32 %v2_15a78, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15a68, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15a48, { 1, 0 }
  uselistorder i32 %v3_15a44, { 1, 0 }
  uselistorder i32 %v0_15a48, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15a68, { 3, 2, 1, 0 }
  uselistorder i1 %v5_15b10, { 2, 0, 1 }
  uselistorder i32 %v0_15a28, { 1, 0 }
  uselistorder i32 %v0_15b14, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_15a6830, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_15a18, { 2, 1, 0 }
  uselistorder i32 %v0_15a18, { 2, 0, 1 }
  uselistorder i32 %v2_15a10, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_15a10, { 1, 2, 0, 3 }
  uselistorder i32 %v0_15a10, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_15a6831, { 2, 1, 0 }
  uselistorder i32 %v11_159ec, { 1, 0 }
  uselistorder i32 %v7_159ec, { 1, 0 }
  uselistorder i32 %v1_159cc, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_159cc, { 1, 2, 0, 3 }
  uselistorder i32 %v2_159d0, { 1, 0 }
  uselistorder i32 %v7_159c4, { 0, 2, 1 }
  uselistorder i32 %v10_159c0, { 1, 0 }
  uselistorder i32 %v9_159b8, { 1, 0, 2 }
  uselistorder i32 %v6_159b4, { 1, 0 }
  uselistorder i32 %v2_159ac, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_159ac, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_159bc, { 0, 3, 2, 1 }
  uselistorder i32 %v7_159a0, { 0, 2, 1 }
  uselistorder i32 %v13_1599c, { 1, 0 }
  uselistorder i32 %v4_15998, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_15998, { 2, 0, 1 }
  uselistorder i32 %v6_159a0, { 0, 3, 2, 1 }
  uselistorder i32 %v7_15990, { 0, 2, 1 }
  uselistorder i32 %v16_1598c, { 1, 0 }
  uselistorder i32 %v4_15988, { 1, 2, 0 }
  uselistorder i32 %v0_15998.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_15990, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_1597c, { 0, 3, 2, 1 }
  uselistorder i32 %v10_15978, { 1, 0 }
  uselistorder i32 %v1_15974, { 1, 0 }
  uselistorder i32 %v10_15970, { 1, 0 }
  uselistorder i32 %v0_15970, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15974, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_15968, { 0, 2, 1 }
  uselistorder i32 %v2_1595c, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_1595c, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_1597448, { 1, 2, 0 }
  uselistorder i32 %v1_15954, { 2, 1, 0 }
  uselistorder i32 %v1_1594c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_15944, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_15940, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_1593c, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_1593c, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v4_15928, { 0, 2, 1 }
  uselistorder i32 %v3_1591c, { 1, 0 }
  uselistorder i32 %v2_15914, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_15904, { 1, 0, 3, 2 }
  uselistorder i32 %v8_158e4, { 1, 0, 2 }
  uselistorder i32 %v5_158e4, { 1, 0, 2 }
  uselistorder i32 %v2_158e4, { 1, 0, 2 }
  uselistorder i32 %v3_158e0, { 1, 0 }
  uselistorder i32 %v0_158e4, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15904, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_158bc, { 0, 2, 1 }
  uselistorder i32 %v3_158b0, { 1, 0 }
  uselistorder i32 %v2_158a8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_15898, { 1, 0, 3, 2 }
  uselistorder i32 %v8_15878, { 1, 0, 2 }
  uselistorder i32 %v5_15878, { 1, 0, 2 }
  uselistorder i32 %v2_15878, { 1, 0, 2 }
  uselistorder i32 %v3_15874, { 1, 0 }
  uselistorder i32 %v0_15878, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15898, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_15850, { 0, 2, 1 }
  uselistorder i32 %v3_15844, { 1, 0 }
  uselistorder i32 %v2_1583c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_1582c, { 1, 0, 3, 2 }
  uselistorder i32 %v8_1580c, { 1, 0, 2 }
  uselistorder i32 %v5_1580c, { 1, 0, 2 }
  uselistorder i32 %v2_1580c, { 1, 0, 2 }
  uselistorder i32 %v3_15808, { 1, 0 }
  uselistorder i32 %v0_1580c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1582c, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v5_158d4, { 2, 0, 1 }
  uselistorder i32 %v0_158d8, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_1582c74, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_157dc, { 1, 0 }
  uselistorder i32 %v0_157dc, { 3, 1, 0, 2 }
  uselistorder i32 %v2_157d4, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_157d4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_157d4, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_1582c75, { 2, 1, 0 }
  uselistorder i32 %v1_157b4, { 1, 0, 2 }
  uselistorder i32 %v1_1578c, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_1578c, { 1, 2, 0, 3 }
  uselistorder i32 %v8_15778, { 1, 0, 2 }
  uselistorder i32 %v6_15774, { 1, 0 }
  uselistorder i32 %v2_1576c, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_1576c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_1577c, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v4_15764, { 0, 2, 1 }
  uselistorder i32 %v3_15764, { 3, 0, 1, 2 }
  uselistorder i1 %v0_15764, { 1, 0 }
  uselistorder i1 %v1_15764, { 1, 0 }
  uselistorder i32 %v3_15760, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_15758, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_15744, { 1, 2, 0 }
  uselistorder i32 %v12_15738, { 0, 1, 3, 2 }
  uselistorder i32 %v0_1572c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15730, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v2_15720, { 0, 2, 1 }
  uselistorder i32 %v2_15718, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_15718, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v1_15710, { 1, 0 }
  uselistorder i32 %v1_15708, { 2, 1, 0 }
  uselistorder i32 %v2_15700, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_15700, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v2_156f0, { 1, 0 }
  uselistorder i32 %v1_156f0, { 1, 5, 6, 3, 4, 0, 7, 9, 2, 8, 10 }
  uselistorder i32 %v0_156f0, { 1, 7, 9, 8, 6, 4, 0, 5, 11, 2, 3, 10, 12 }
  uselistorder i32* %r3.global-to-local, { 0, 9, 1, 2, 3, 10, 4, 5, 6, 11, 7, 8, 12, 13, 35, 36, 37, 38, 39, 40, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i32* %r2.global-to-local, { 0, 25, 1, 2, 3, 4, 5, 26, 6, 7, 8, 9, 10, 27, 11, 12, 13, 14, 15, 28, 65, 67, 66, 68, 69, 16, 17, 18, 19, 21, 20, 22, 23, 24, 29, 30, 60, 31, 32, 33, 34, 35, 61, 36, 37, 38, 39, 40, 62, 41, 42, 43, 44, 45, 63, 46, 48, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 15, 2, 4, 6, 8, 5, 16, 7, 9, 11, 13, 10, 17, 12, 14, 18, 56, 19, 20, 21, 55, 58, 59, 61, 60, 62, 63, 65, 64, 66, 57, 22, 53, 23, 54, 24, 25, 26, 27, 28, 31, 29, 41, 30, 32, 35, 33, 42, 34, 36, 39, 37, 43, 38, 40, 44, 45, 46, 48, 47, 49, 50, 51, 52 }
  uselistorder i32* %r0.global-to-local, { 0, 23, 1, 2, 24, 3, 4, 25, 5, 6, 7, 8, 26, 28, 13, 29, 31, 30, 32, 33, 35, 34, 36, 27, 9, 10, 11, 12, 14, 15, 16, 18, 17, 19, 20, 21, 22 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 41, 42, 43, 44, 45, 46, 13, 14, 3, 15, 16, 17, 18, 19, 0, 20, 1, 22, 2, 23, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 36, 37, 38, 39, 40, 41, 42, 12, 13, 3, 14, 15, 16, 0, 17, 1, 19, 2, 20, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 42, 43, 44, 45, 46, 47, 48, 13, 14, 3, 15, 16, 17, 18, 19, 0, 20, 1, 22, 2, 23, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i32 31, { 21, 22, 1, 0, 10, 12, 11, 13, 2, 15, 14, 26, 16, 6, 17, 23, 18, 24, 19, 25, 20, 7, 3, 8, 4, 5, 9 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -2, { 12, 13, 11, 23, 0, 15, 1, 16, 2, 3, 10, 8, 9, 7, 6, 5, 4, 24, 25, 26, 27, 14, 22, 21, 20, 19, 18, 17 }
  uselistorder i32 65536, { 7, 6, 12, 8, 13, 9, 14, 10, 15, 11, 16, 17, 18, 22, 19, 23, 20, 24, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 59, 62, 61, 63, 64, 65, 1, 66, 0, 2, 67, 68, 69, 70, 71, 74, 72, 73, 75, 76, 77, 81, 82, 83, 84, 78, 79, 80, 85, 88, 89, 90, 86, 87, 91, 92, 93, 95, 94, 96, 3, 97, 99, 100, 98, 101, 102, 104, 105, 106, 103, 107, 108, 109, 110, 111, 137, 113, 112, 138, 115, 114, 116, 118, 117, 120, 119, 121, 4, 122, 124, 125, 126, 123, 127, 5, 128, 132, 133, 134, 129, 130, 131, 136, 135 }
  uselistorder i32 2147483632, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32 16777216, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 47, 46, 49, 48, 53, 50, 52, 51, 54, 56, 55, 58, 57, 60, 59, 61, 62, 70, 63, 71, 64, 72, 65, 73, 74, 66, 75, 67, 76, 68, 77, 69, 81, 78, 82, 79, 83, 80, 87, 84, 88, 85, 89, 86, 90, 91, 92, 97, 93, 98, 94, 99, 95, 100, 96, 101, 102, 103, 104, 105, 106, 110, 107, 111, 108, 112, 109, 113, 114, 116, 115, 122, 117, 123, 118, 124, 119, 125, 120, 126, 121, 127, 130, 131, 128, 129, 132, 133, 137, 134, 138, 135, 136, 139, 146, 140, 147, 148, 141, 149, 144, 150, 142, 151, 152, 143, 145, 153, 154, 158, 155, 159, 160, 156, 157, 161, 162, 163, 165, 164, 168, 166, 169, 167, 170, 171, 172 }
  uselistorder i32* @r5, { 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 220, 221, 222, 224, 743, 744, 745, 746, 747, 0, 748, 749, 750, 611, 612, 613, 614, 615, 616, 546, 547, 548, 549, 550, 551, 552, 553, 590, 591, 592, 593, 594, 595, 617, 618, 619, 626, 627, 628, 629, 620, 621, 622, 623, 624, 625, 60, 61, 62, 225, 226, 4, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 21, 22, 554, 555, 556, 557, 558, 559, 23, 560, 50, 561, 562, 563, 3, 2, 564, 565, 24, 25, 26, 27, 28, 51, 18, 19, 20, 54, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 56, 57, 58, 52, 53, 566, 567, 568, 569, 570, 59, 571, 572, 13, 573, 574, 575, 576, 585, 586, 587, 577, 578, 579, 580, 581, 582, 583, 584, 5, 175, 176, 177, 178, 179, 180, 181, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 6, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 1, 210, 238, 239, 240, 241, 242, 15, 243, 244, 245, 246, 247, 248, 249, 250, 16, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 7, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 588, 589, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 630, 631, 610, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 11, 669, 670, 671, 672, 673, 674, 675, 14, 676, 677, 8, 678, 679, 9, 680, 681, 10, 682, 683, 684, 685, 686, 687, 17, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 12, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730 }
  uselistorder i32 -3, { 1, 2, 0, 3, 4, 6, 5 }
  uselistorder i32 -5, { 1, 0 }
  uselistorder i32 11, { 13, 14, 15, 18, 19, 4, 1, 5, 2, 6, 3, 45, 46, 47, 48, 49, 0, 16, 7, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 8, 30, 31, 32, 9, 33, 34, 35, 10, 36, 37, 38, 39, 40, 41, 42, 43, 44, 11, 50, 51, 52, 12, 53 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 3, 4, 5, 22, 6, 23, 24 }
  uselistorder i32 48, { 0, 9, 10, 7, 8, 2, 15, 3, 1, 11, 4, 12, 5, 13, 6, 14 }
  uselistorder i32 40, { 1, 9, 2, 0, 4, 23, 24, 10, 3, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 6, 25, 7, 26, 5, 27, 8, 28 }
  uselistorder i32 36, { 1, 8, 9, 6, 7, 0, 2, 3, 10, 4, 11, 5, 12 }
  uselistorder i32 -16, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 6, 5, 4, 1, 16, 17, 18, 19, 20, 21, 3, 2, 0 }
  uselistorder i32 -32, { 1, 0, 2, 3 }
  uselistorder i32 24, { 0, 67, 68, 37, 38, 1, 69, 70, 34, 35, 14, 13, 81, 44, 82, 45, 60, 39, 15, 40, 16, 41, 17, 42, 43, 63, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64, 59, 65, 61, 62, 83, 84, 85, 66, 86, 2, 71, 18, 3, 72, 19, 20, 4, 73, 21, 74, 22, 5, 23, 24, 6, 25, 7, 8, 9, 26, 10, 75, 27, 76, 77, 78, 28, 29, 11, 79, 30, 80, 31, 87, 88, 89, 90, 91, 32, 92, 12, 36, 33, 93 }
  uselistorder i32* @lr, { 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 0, 134, 135, 136, 1, 137, 138, 139, 2, 140, 141, 142, 143, 144, 145, 146, 147, 22, 23, 148, 149, 66, 67, 68, 69, 85, 86, 87, 88, 24, 25, 26, 27, 28, 89, 90, 4, 5, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 70, 71, 74, 75, 3, 78, 76, 77, 72, 73, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 60, 61, 62, 63, 64, 31, 106, 6, 7, 8, 9, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 65, 107, 108, 109, 79, 80, 81, 82, 83, 84, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123 }
  uselistorder i32 16, { 27, 28, 29, 175, 30, 176, 177, 31, 178, 179, 32, 180, 181, 182, 183, 184, 185, 81, 82, 71, 72, 86, 83, 84, 85, 87, 22, 88, 89, 4, 5, 6, 7, 8, 21, 9, 10, 0, 11, 12, 45, 157, 46, 75, 33, 47, 73, 74, 158, 160, 161, 162, 23, 70, 13, 14, 20, 68, 15, 163, 16, 48, 159, 49, 78, 34, 79, 37, 36, 35, 76, 38, 77, 39, 50, 51, 52, 53, 54, 55, 80, 56, 57, 24, 90, 91, 92, 93, 58, 94, 95, 96, 97, 98, 99, 100, 59, 101, 102, 103, 41, 104, 40, 105, 106, 61, 107, 108, 109, 110, 111, 1, 60, 112, 113, 114, 63, 115, 116, 117, 118, 119, 2, 62, 120, 64, 121, 122, 123, 17, 124, 18, 125, 69, 19, 65, 66, 126, 127, 3, 43, 128, 42, 129, 130, 131, 132, 133, 134, 25, 135, 136, 137, 138, 140, 139, 141, 142, 143, 144, 145, 146, 147, 26, 148, 149, 150, 151, 152, 154, 153, 155, 156, 164, 165, 166, 167, 168, 67, 169, 44, 170, 171, 172, 173, 174 }
  uselistorder i32 20, { 114, 3, 115, 116, 0, 4, 117, 30, 31, 24, 25, 1, 32, 33, 34, 35, 5, 17, 26, 18, 27, 19, 28, 20, 29, 97, 6, 98, 7, 99, 23, 96, 36, 37, 8, 38, 39, 40, 41, 42, 43, 44, 9, 45, 46, 47, 48, 49, 50, 51, 52, 53, 10, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 11, 64, 65, 66, 67, 68, 69, 70, 71, 12, 72, 73, 74, 2, 75, 76, 77, 78, 21, 79, 80, 81, 82, 83, 84, 85, 86, 14, 87, 13, 88, 89, 90, 91, 16, 92, 15, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 22, 113 }
  uselistorder i32 27, { 1, 0, 3, 2, 4 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 7, { 40, 41, 43, 77, 93, 4, 46, 5, 16, 45, 17, 44, 2, 18, 78, 19, 79, 20, 80, 21, 81, 22, 82, 23, 83, 24, 84, 25, 85, 26, 86, 27, 87, 28, 88, 47, 29, 30, 31, 32, 33, 34, 35, 36, 37, 48, 49, 50, 6, 51, 52, 53, 54, 7, 55, 56, 57, 58, 8, 59, 9, 60, 10, 61, 62, 11, 63, 64, 12, 65, 66, 67, 68, 69, 13, 70, 71, 72, 73, 74, 14, 75, 3, 76, 0, 38, 89, 1, 39, 90, 91, 42, 15, 92 }
  uselistorder i32 -8, { 16, 17, 18, 19, 20, 21, 15, 14, 7, 13, 12, 11, 10, 22, 23, 24, 25, 8, 26, 0, 29, 9, 27, 28, 6, 1, 3, 2, 4, 5 }
  uselistorder i32* @ip, { 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 4, 5, 49, 1, 0, 2, 3 }
  uselistorder i1 false, { 42, 43, 44, 79, 14, 41, 80, 81, 38, 39, 40, 82, 13, 83, 84, 0, 47, 46, 48, 45, 1, 3, 4, 50, 2, 11, 15, 51, 5, 6, 7, 49, 85, 86, 87, 10, 8, 9, 88, 54, 89, 90, 55, 91, 20, 21, 22, 23, 56, 92, 93, 72, 94, 95, 96, 61, 97, 25, 26, 62, 98, 63, 99, 57, 58, 59, 24, 100, 60, 101, 102, 71, 103, 104, 105, 106, 107, 108, 64, 65, 109, 110, 66, 111, 67, 68, 112, 69, 113, 70, 114, 52, 53, 115, 116, 117, 118, 119, 120, 27, 28, 73, 121, 122, 74, 34, 123, 75, 17, 18, 29, 19, 30, 31, 32, 12, 33, 124, 35, 36, 76, 77, 125, 16, 78, 126, 37, 127 }
  uselistorder i32 4, { 87, 78, 79, 5, 439, 80, 440, 64, 6, 7, 81, 441, 82, 442, 443, 444, 445, 83, 446, 447, 448, 449, 84, 450, 451, 452, 453, 454, 8, 455, 456, 457, 458, 459, 85, 460, 63, 461, 462, 463, 464, 465, 466, 9, 10, 86, 467, 244, 245, 199, 200, 246, 247, 248, 468, 469, 470, 471, 472, 147, 148, 149, 65, 150, 151, 401, 403, 402, 399, 400, 358, 359, 360, 361, 404, 405, 406, 407, 389, 390, 391, 408, 409, 152, 153, 154, 155, 156, 53, 11, 12, 249, 250, 251, 252, 253, 254, 13, 14, 73, 15, 16, 74, 410, 411, 197, 17, 18, 108, 88, 412, 413, 66, 203, 109, 204, 157, 205, 362, 363, 364, 221, 222, 62, 61, 365, 206, 207, 201, 202, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 110, 224, 225, 226, 223, 75, 366, 111, 227, 89, 112, 113, 19, 367, 20, 368, 369, 21, 22, 370, 371, 55, 372, 54, 377, 114, 378, 115, 379, 116, 380, 117, 381, 118, 383, 119, 384, 385, 382, 373, 120, 374, 375, 376, 235, 158, 237, 23, 238, 239, 236, 24, 240, 56, 121, 241, 242, 321, 255, 228, 69, 68, 67, 229, 122, 25, 26, 27, 28, 29, 30, 230, 57, 231, 58, 232, 233, 234, 31, 32, 90, 123, 124, 159, 243, 0, 125, 33, 256, 257, 160, 258, 259, 260, 161, 162, 127, 261, 126, 262, 91, 263, 264, 163, 265, 266, 164, 165, 267, 92, 268, 93, 269, 270, 166, 167, 271, 168, 272, 273, 169, 170, 128, 274, 94, 275, 95, 276, 277, 278, 279, 280, 129, 281, 96, 282, 283, 284, 171, 285, 286, 287, 288, 172, 173, 2, 289, 130, 290, 97, 291, 292, 293, 174, 294, 295, 175, 176, 3, 131, 296, 98, 297, 99, 298, 299, 177, 300, 301, 302, 303, 304, 178, 179, 305, 306, 133, 307, 4, 132, 308, 100, 309, 134, 310, 311, 312, 313, 314, 180, 315, 316, 317, 181, 182, 136, 318, 135, 101, 319, 102, 320, 322, 323, 324, 325, 326, 138, 327, 139, 328, 183, 329, 330, 331, 184, 185, 140, 332, 137, 333, 103, 334, 104, 335, 186, 336, 337, 34, 187, 338, 339, 35, 188, 340, 341, 36, 189, 342, 343, 37, 190, 76, 344, 345, 38, 346, 191, 347, 348, 39, 192, 349, 350, 40, 193, 351, 352, 41, 194, 353, 354, 42, 195, 355, 356, 43, 414, 357, 386, 387, 388, 392, 393, 394, 44, 395, 396, 1, 397, 196, 398, 415, 416, 107, 417, 418, 77, 419, 141, 420, 421, 422, 423, 105, 424, 142, 425, 426, 427, 106, 428, 143, 429, 45, 46, 47, 430, 431, 72, 71, 70, 432, 48, 49, 50, 144, 433, 145, 434, 51, 52, 435, 59, 436, 60, 146, 437, 438, 198 }
  uselistorder i32* @r2, { 83, 84, 85, 86, 26, 10, 27, 29, 28, 30, 31, 32, 33, 8, 87, 2, 88, 93, 94, 97, 89, 51, 55, 56, 59, 57, 58, 52, 53, 54, 45, 15, 16, 0, 17, 18, 1, 95, 3, 96, 6, 34, 35, 36, 9, 11, 90, 91, 92, 60, 61, 62, 4, 63, 64, 65, 7, 66, 67, 68, 5, 69, 70, 71, 72, 73, 46, 12, 13, 14, 49, 50, 47, 48, 21, 22, 40, 41, 42, 19, 20, 23, 24, 25, 37, 38, 39, 43, 44, 74, 75, 76, 77, 78, 79, 80, 81, 82 }
  uselistorder label %dec_label_pc_15b58, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15aec, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15a80, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15a20, { 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb141, { 4, 5, 6, 1, 7, 0, 3, 2 }
  uselistorder label %dec_label_pc_159ac, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %dec_label_pc_15970, { 1, 0 }
  uselistorder label %dec_label_pc_1595c, { 1, 0 }
  uselistorder label %dec_label_pc_1591c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_158b0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15844, { 2, 0, 1 }
  uselistorder label %dec_label_pc_157e4, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %.thread120, { 1, 0 }
  uselistorder label %.thread119, { 1, 0 }
  uselistorder label %bb131, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread117, { 1, 0 }
  uselistorder label %dec_label_pc_15758, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_15718, { 1, 0 }
}

define i32 @function_15b78(i32 %arg1) local_unnamed_addr {
dec_label_pc_15b78:
  ret i32 %arg1
}

define i32 @function_15b80() local_unnamed_addr {
dec_label_pc_15b80:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_15b80 = load i32, i32* @r0, align 4
  %v2_15b80 = icmp eq i32 %v0_15b80, 0
  %v3_15b84 = load i32, i32* @r4, align 4
  store i32 %v3_15b84, i32* %stack_var_-20, align 4
  %v0_15b88 = load i32, i32* @r1, align 4
  br i1 %v2_15b80, label %dec_label_pc_15c60, label %dec_label_pc_15b9c.lr.ph

dec_label_pc_15b9c:                               ; preds = %dec_label_pc_15b9c.lr.ph, %dec_label_pc_15c20
  %v1_15c20 = phi i32 [ 0, %dec_label_pc_15b9c.lr.ph ], [ %v5_15c20, %dec_label_pc_15c20 ]
  %v0_15c24 = phi i32 [ 1, %dec_label_pc_15b9c.lr.ph ], [ %v1_15c24, %dec_label_pc_15c20 ]
  %v0_15ba4 = phi i32 [ %v0_15b80, %dec_label_pc_15b9c.lr.ph ], [ %v0_15ba425, %dec_label_pc_15c20 ]
  %v1_15ba4 = inttoptr i32 %v0_15ba4 to i8*
  %v2_15ba4 = load i8, i8* %v1_15ba4, align 1
  %v3_15ba4 = zext i8 %v2_15ba4 to i32
  %v3_15ba8 = mul nuw nsw i32 %v3_15ba4, 2
  %v4_15ba8 = add i32 %v3_15ba8, %v2_15ba0.pre
  %v5_15ba8 = inttoptr i32 %v4_15ba8 to i8*
  %v6_15ba8 = load i8, i8* %v5_15ba8, align 1
  %v1_15bac = and i8 %v6_15ba8, 8
  %v2_15bac = icmp eq i8 %v1_15bac, 0
  br i1 %v2_15bac, label %dec_label_pc_15c60, label %dec_label_pc_15bb4

dec_label_pc_15bb4:                               ; preds = %dec_label_pc_15b9c
  br label %dec_label_pc_15bd4

dec_label_pc_15bbc:                               ; preds = %dec_label_pc_15bd4
  %v3_15bc0 = mul i32 %v0_15c20, 10
  %v4_15bc0 = add i32 %v3_15bd4, %v3_15bc0
  %v1_15bc4 = add i32 %v4_15bc0, -48
  %v8_15bcc = icmp sgt i32 %v1_15bc4, 255
  br i1 %v8_15bcc, label %dec_label_pc_15c60, label %dec_label_pc_15bd0

dec_label_pc_15bd0:                               ; preds = %dec_label_pc_15bbc
  %v1_15bd0 = add i32 %v0_15c10, 1
  store i32 %v1_15bd0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15bd4

dec_label_pc_15bd4:                               ; preds = %dec_label_pc_15bb4, %dec_label_pc_15bd0
  %v0_15c20 = phi i32 [ 0, %dec_label_pc_15bb4 ], [ %v1_15bc4, %dec_label_pc_15bd0 ]
  %v0_15c10 = phi i32 [ %v0_15ba4, %dec_label_pc_15bb4 ], [ %v1_15bd0, %dec_label_pc_15bd0 ]
  %v1_15bd4 = inttoptr i32 %v0_15c10 to i8*
  %v2_15bd4 = load i8, i8* %v1_15bd4, align 1
  %v3_15bd4 = zext i8 %v2_15bd4 to i32
  %v2_15bd8 = mul nuw nsw i32 %v3_15bd4, 2
  %v2_15bdc = add i32 %v2_15bd8, %v2_15ba0.pre
  %v3_15be0 = inttoptr i32 %v2_15bdc to i8*
  %v4_15be0 = load i8, i8* %v3_15be0, align 1
  %v6_15be0 = zext i8 %v4_15be0 to i32
  %v1_15bec = and i32 %v6_15be0, 8
  %v2_15bec = icmp eq i32 %v1_15bec, 0
  br i1 %v2_15bec, label %dec_label_pc_15bf4, label %dec_label_pc_15bbc

dec_label_pc_15bf4:                               ; preds = %dec_label_pc_15bd4
  %v8_15bf8 = icmp sgt i32 %v0_15c24, 3
  br i1 %v8_15bf8, label %dec_label_pc_15c0c, label %dec_label_pc_15bfc

dec_label_pc_15bfc:                               ; preds = %dec_label_pc_15bf4
  %v7_15bfc = icmp eq i8 %v2_15bd4, 46
  br i1 %v7_15bfc, label %dec_label_pc_15c04, label %dec_label_pc_15c60

dec_label_pc_15c04:                               ; preds = %dec_label_pc_15bfc
  %v1_15c04 = add i32 %v0_15c10, 1
  store i32 %v1_15c04, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15c20

dec_label_pc_15c0c:                               ; preds = %dec_label_pc_15bf4
  %v2_15c0c = icmp eq i8 %v2_15bd4, 0
  %v1_15c10 = add i32 %v0_15c10, 1
  store i32 %v1_15c10, i32* %r0.global-to-local, align 4
  br i1 %v2_15c0c, label %dec_label_pc_15c20, label %dec_label_pc_15c18

dec_label_pc_15c18:                               ; preds = %dec_label_pc_15c0c
  %v1_15c18 = and i32 %v6_15be0, 32
  %v2_15c18 = icmp eq i32 %v1_15c18, 0
  br i1 %v2_15c18, label %dec_label_pc_15c60, label %dec_label_pc_15c20

dec_label_pc_15c20:                               ; preds = %dec_label_pc_15c18, %dec_label_pc_15c0c, %dec_label_pc_15c04
  %v0_15ba425 = phi i32 [ %v1_15c10, %dec_label_pc_15c18 ], [ %v1_15c10, %dec_label_pc_15c0c ], [ %v1_15c04, %dec_label_pc_15c04 ]
  %v4_15c20 = mul i32 %v1_15c20, 256
  %v5_15c20 = or i32 %v0_15c20, %v4_15c20
  %v1_15c24 = add nuw nsw i32 %v0_15c24, 1
  %v7_15c2c = icmp slt i32 %v1_15c24, 5
  br i1 %v7_15c2c, label %dec_label_pc_15b9c, label %dec_label_pc_15c30

dec_label_pc_15b9c.lr.ph:                         ; preds = %dec_label_pc_15b80
  %v2_15ba0.pre = load i32, i32* bitcast (i32** @global_var_1ea00.642 to i32*), align 4
  br label %dec_label_pc_15b9c

dec_label_pc_15c30:                               ; preds = %dec_label_pc_15c20
  %v2_15c30 = icmp eq i32 %v0_15b88, 0
  br i1 %v2_15c30, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_15c30
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread11

bb40:                                             ; preds = %dec_label_pc_15c30
  %v3_15c4c = call i32 @llvm.bswap.i32(i32 %v5_15c20)
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_15c58 = inttoptr i32 %v0_15b88 to i32*
  store i32 %v3_15c4c, i32* %v3_15c58, align 4
  %v2_15c5c.pre = load i32, i32* %stack_var_-20, align 4
  %v17_15c5c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb, %bb40
  %v17_15c5c = phi i32 [ 1, %bb ], [ %v17_15c5c.pre, %bb40 ]
  %v2_15c5c = phi i32 [ %v3_15b84, %bb ], [ %v2_15c5c.pre, %bb40 ]
  store i32 %v2_15c5c, i32* @r4, align 4
  ret i32 %v17_15c5c

dec_label_pc_15c60:                               ; preds = %dec_label_pc_15bfc, %dec_label_pc_15c18, %dec_label_pc_15b9c, %dec_label_pc_15bbc, %dec_label_pc_15b80
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_15b84, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_15ba0.pre, { 1, 0 }
  uselistorder i32 %v1_15c24, { 1, 0 }
  uselistorder i32 %v0_15c10, { 0, 1, 3, 2 }
  uselistorder i32 %v3_15b84, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 4, 5, 6 }
  uselistorder i32 5, { 15, 37, 40, 16, 6, 3, 18, 38, 4, 17, 39, 1, 19, 86, 20, 87, 21, 88, 22, 89, 23, 90, 24, 91, 25, 92, 26, 93, 27, 94, 28, 95, 29, 96, 30, 97, 31, 98, 0, 41, 42, 43, 32, 33, 34, 35, 44, 45, 46, 47, 7, 48, 49, 50, 51, 8, 52, 53, 54, 55, 56, 57, 58, 59, 9, 60, 61, 62, 10, 63, 64, 65, 11, 66, 67, 68, 69, 12, 70, 71, 72, 73, 74, 75, 76, 13, 77, 78, 79, 80, 81, 82, 83, 14, 84, 5, 85, 99, 2, 100, 101, 36, 102 }
  uselistorder i32 256, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 63, 64, 68, 71, 72, 73, 69, 70, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 453, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 95, 96, 100, 99, 98, 448, 454, 105, 101, 104, 102, 103, 106, 107, 108, 109, 450, 110, 111, 112, 113, 114, 451, 115, 116, 117, 118, 119, 120, 121, 122, 124, 123, 125, 126, 127, 128, 129, 130, 131, 133, 134, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 144, 146, 147, 148, 152, 158, 153, 149, 154, 159, 155, 160, 156, 150, 161, 151, 162, 163, 157, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 174, 177, 180, 181, 179, 178, 182, 185, 184, 183, 192, 189, 186, 187, 193, 190, 194, 191, 195, 188, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 212, 214, 215, 216, 227, 222, 217, 228, 223, 229, 224, 230, 225, 218, 219, 220, 231, 232, 233, 234, 226, 221, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 259, 269, 265, 261, 270, 266, 262, 271, 267, 272, 268, 263, 264, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 290, 289, 297, 292, 303, 304, 298, 293, 305, 306, 299, 294, 307, 300, 308, 301, 309, 302, 310, 295, 311, 296, 312, 313, 314, 315, 316, 317, 318, 321, 322, 325, 323, 319, 326, 324, 320, 329, 328, 327, 332, 333, 330, 334, 331, 335, 339, 336, 341, 340, 337, 338, 342, 446, 452, 343, 344, 345, 346, 347, 350, 348, 349, 352, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 367, 369, 370, 372, 371, 373, 374, 375, 376, 379, 386, 380, 381, 377, 382, 383, 384, 378, 387, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 400, 402, 403, 404, 408, 415, 409, 410, 416, 411, 405, 406, 412, 407, 413, 417, 414, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 430, 432, 433, 434, 435, 437, 436, 438, 439, 440, 441, 442, 445, 455, 447, 456, 443, 444, 449 }
  uselistorder i32 32, { 74, 56, 57, 54, 69, 70, 66, 67, 80, 68, 4, 3, 6, 5, 8, 7, 55, 53, 75, 76, 59, 58, 10, 9, 12, 11, 14, 13, 16, 15, 65, 18, 17, 19, 20, 21, 23, 22, 24, 26, 25, 28, 27, 29, 30, 32, 31, 60, 71, 72, 33, 73, 34, 35, 36, 0, 37, 1, 2, 38, 39, 40, 41, 42, 44, 43, 61, 77, 62, 78, 63, 79, 46, 45, 48, 47, 49, 50, 51, 52, 64 }
  uselistorder i8 46, { 0, 1, 7, 2, 3, 4, 5, 6, 8, 9, 10 }
  uselistorder i32 3, { 36, 71, 72, 188, 73, 74, 75, 76, 77, 78, 91, 101, 189, 4, 164, 183, 184, 0, 79, 21, 80, 22, 185, 86, 37, 23, 25, 92, 40, 93, 2, 94, 95, 96, 97, 38, 5, 165, 166, 167, 168, 41, 169, 42, 170, 43, 171, 44, 172, 45, 173, 46, 174, 47, 175, 48, 176, 49, 177, 50, 178, 24, 179, 51, 180, 39, 181, 52, 98, 53, 99, 100, 26, 104, 54, 55, 56, 57, 58, 1, 102, 103, 59, 105, 106, 107, 108, 109, 110, 60, 111, 61, 112, 27, 113, 114, 115, 116, 117, 7, 6, 62, 28, 118, 119, 120, 121, 122, 123, 124, 9, 8, 63, 125, 29, 126, 127, 128, 129, 130, 131, 132, 133, 11, 10, 64, 134, 30, 135, 136, 137, 138, 139, 13, 12, 65, 140, 31, 141, 142, 143, 144, 66, 145, 15, 14, 33, 146, 32, 147, 148, 149, 150, 151, 152, 17, 16, 67, 153, 34, 154, 155, 156, 157, 158, 159, 160, 19, 18, 68, 161, 35, 162, 20, 163, 3, 182, 186, 81, 87, 82, 88, 83, 89, 84, 90, 69, 187, 70, 85 }
  uselistorder i32 8, { 124, 163, 29, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 30, 180, 71, 72, 73, 74, 78, 75, 76, 77, 181, 149, 148, 146, 147, 125, 126, 127, 150, 151, 152, 140, 141, 142, 6, 33, 34, 31, 32, 17, 18, 26, 27, 35, 182, 79, 80, 81, 82, 7, 8, 62, 21, 9, 10, 16, 11, 51, 36, 52, 37, 53, 38, 12, 13, 14, 63, 54, 67, 28, 128, 129, 130, 131, 133, 55, 134, 135, 132, 68, 69, 56, 70, 15, 83, 39, 84, 85, 86, 87, 88, 89, 90, 91, 92, 3, 93, 94, 95, 4, 96, 97, 98, 99, 100, 101, 102, 5, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 40, 114, 41, 115, 42, 116, 43, 117, 44, 118, 45, 119, 46, 120, 47, 121, 48, 122, 57, 123, 0, 1, 136, 137, 138, 139, 60, 143, 144, 58, 145, 2, 19, 22, 23, 153, 20, 24, 25, 154, 59, 64, 65, 155, 156, 158, 157, 159, 160, 49, 161, 61, 66, 50, 162 }
  uselistorder i32 255, { 2, 16, 3, 18, 4, 19, 5, 20, 0, 1, 8, 21, 9, 22, 6, 23, 7, 24, 12, 25, 13, 26, 10, 27, 11, 28, 15, 17, 14, 29 }
  uselistorder i32 10, { 14, 48, 49, 0, 4, 5, 35, 36, 84, 1, 2, 15, 44, 10, 37, 43, 16, 42, 8, 73, 74, 38, 17, 75, 39, 76, 18, 77, 19, 78, 20, 79, 21, 80, 22, 81, 82, 45, 23, 6, 24, 25, 26, 27, 46, 28, 47, 11, 50, 51, 3, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 29, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 9, 72, 12, 85, 83, 86, 7, 33, 40, 87, 31, 88, 34, 41, 13, 89, 30, 90, 32 }
  uselistorder i8 0, { 5, 0, 1, 29, 30, 2, 10, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 6, 42, 43, 44, 45, 46, 47, 3, 12, 11, 13, 50, 52, 49, 20, 51, 21, 53, 54, 48, 4, 55, 56, 57, 58, 59, 24, 23, 60, 61, 64, 25, 62, 63, 22, 65, 66, 67, 68, 69, 14, 7, 15, 70, 16, 17, 27, 71, 72, 73, 75, 76, 9, 79, 19, 85, 80, 81, 77, 78, 18, 26, 82, 83, 84, 8, 86, 87, 74, 28, 88, 89, 90, 91, 92, 93, 94 }
  uselistorder i32 2, { 4, 151, 285, 286, 59, 287, 288, 49, 289, 48, 290, 47, 157, 77, 78, 270, 79, 271, 80, 272, 5, 152, 291, 54, 81, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 154, 15, 16, 17, 18, 19, 83, 84, 82, 50, 51, 65, 172, 66, 87, 159, 166, 67, 158, 86, 160, 68, 161, 69, 162, 70, 163, 71, 164, 72, 165, 73, 171, 167, 168, 169, 170, 60, 88, 252, 20, 21, 253, 255, 256, 89, 258, 55, 155, 90, 260, 91, 261, 92, 262, 93, 263, 94, 264, 95, 265, 96, 266, 267, 85, 268, 22, 97, 254, 178, 179, 23, 98, 99, 100, 180, 181, 101, 240, 153, 156, 186, 103, 173, 106, 174, 105, 175, 102, 107, 176, 24, 25, 26, 108, 104, 109, 110, 111, 177, 61, 112, 113, 114, 62, 116, 117, 115, 118, 182, 52, 58, 183, 184, 185, 257, 259, 187, 188, 189, 190, 191, 192, 193, 120, 194, 119, 195, 196, 197, 198, 199, 122, 121, 200, 201, 202, 203, 204, 205, 206, 124, 207, 123, 208, 209, 125, 126, 74, 127, 210, 211, 212, 213, 214, 215, 216, 1, 27, 28, 29, 30, 31, 32, 128, 217, 75, 218, 219, 220, 221, 222, 2, 33, 34, 35, 36, 37, 38, 130, 129, 223, 224, 39, 225, 226, 56, 227, 132, 228, 3, 40, 41, 42, 43, 44, 133, 229, 131, 230, 231, 232, 233, 234, 235, 236, 237, 135, 238, 134, 239, 241, 242, 243, 137, 244, 138, 245, 246, 247, 248, 139, 249, 136, 250, 63, 251, 140, 64, 269, 53, 141, 273, 274, 76, 275, 148, 276, 142, 277, 143, 144, 278, 145, 279, 146, 280, 147, 281, 57, 282, 45, 46, 283, 149, 284, 150 }
  uselistorder i32* @r1, { 40, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 1, 107, 108, 13, 14, 16, 15, 4, 6, 109, 0, 110, 47, 48, 11, 112, 49, 54, 55, 58, 56, 57, 50, 51, 52, 53, 42, 59, 111, 10, 5, 41, 17, 60, 61, 3, 62, 63, 64, 43, 7, 8, 9, 46, 37, 20, 12, 18, 19, 44, 45, 2, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89 }
  uselistorder label %dec_label_pc_15c60, { 1, 0, 3, 2, 4 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_15bd4, { 1, 0 }
}

define i32 @function_15c6c(i32 %arg1) local_unnamed_addr {
dec_label_pc_15c6c:
  %v1_15c6c = add i32 %arg1, 28
  %v2_15c6c = inttoptr i32 %v1_15c6c to i32*
  %v3_15c6c = load i32, i32* %v2_15c6c, align 4
  %v1_15c74 = add i32 %arg1, 44
  %v2_15c74 = inttoptr i32 %v1_15c74 to i32*
  %v3_15c74 = load i32, i32* %v2_15c74, align 4
  store i32 %v3_15c6c, i32* @global_var_1ed40.695, align 4
  store i32 %v3_15c74, i32* @global_var_1ed44.697, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 17, 0, 6, 7, 4, 5, 12, 13, 8, 9, 10, 11, 2, 14, 1, 15, 3, 16 }
  uselistorder i32 28, { 28, 0, 13, 14, 4, 5, 22, 1, 6, 7, 8, 9, 10, 11, 12, 2, 3, 24, 23, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27 }
}

define i32 @function_15c90(i32* %arg1) local_unnamed_addr {
dec_label_pc_15c90:
  %tmp = ptrtoint i32* %arg1 to i32
  %v2_15c98 = call i32 @brk(i32* %arg1)
  %v3_15c9c = icmp ult i32 %v2_15c98, %tmp
  store i32 %v2_15c98, i32* @global_var_1ead8.692, align 4
  br i1 %v3_15c9c, label %dec_label_pc_15cb0, label %dec_label_pc_15cc0

dec_label_pc_15cb0:                               ; preds = %dec_label_pc_15c90
  %v0_15cb0 = call i32 @function_13a64()
  %v2_15cb8 = inttoptr i32 %v0_15cb0 to i32*
  store i32 12, i32* %v2_15cb8, align 4
  br label %dec_label_pc_15cc0

dec_label_pc_15cc0:                               ; preds = %dec_label_pc_15c90, %dec_label_pc_15cb0
  %v0_15cc0 = phi i32 [ 0, %dec_label_pc_15c90 ], [ -1, %dec_label_pc_15cb0 ]
  ret i32 %v0_15cc0

; uselistorder directives
  uselistorder i32 12, { 18, 12, 124, 125, 126, 128, 129, 130, 131, 13, 127, 132, 133, 134, 135, 136, 137, 138, 49, 50, 31, 32, 51, 19, 20, 109, 110, 111, 0, 87, 112, 9, 113, 10, 88, 4, 108, 21, 22, 7, 52, 53, 23, 54, 55, 14, 15, 34, 35, 89, 90, 91, 36, 33, 37, 38, 39, 40, 41, 42, 44, 45, 43, 92, 93, 94, 11, 95, 96, 98, 99, 100, 24, 102, 5, 103, 97, 8, 48, 46, 47, 6, 25, 26, 27, 28, 101, 56, 16, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 29, 68, 69, 70, 71, 72, 30, 73, 74, 75, 76, 77, 78, 17, 79, 80, 81, 82, 83, 84, 85, 86, 1, 2, 104, 105, 106, 107, 3, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123 }
  uselistorder i32 ()* @function_13a64, { 28, 37, 27, 47, 12, 11, 10, 9, 46, 45, 44, 8, 62, 26, 25, 51, 50, 23, 24, 61, 60, 22, 21, 36, 20, 35, 19, 49, 18, 34, 17, 38, 59, 43, 42, 41, 58, 48, 16, 5, 4, 57, 15, 40, 39, 56, 3, 7, 55, 30, 6, 29, 14, 54, 2, 1, 33, 32, 53, 52, 31, 0, 13 }
  uselistorder i32* @global_var_1ead8.692, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_15cc0, { 1, 0 }
}

define i32 @function_15ccc(i32 %arg1) local_unnamed_addr {
dec_label_pc_15ccc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15cd0 = load i32, i32* @global_var_1e88c.655, align 4
  %v7_15cd4 = icmp eq i32 %v3_15cd0, -1
  %v3_15cd8 = load i32, i32* @r4, align 4
  store i32 %v3_15cd8, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1e88c.655 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_15cd4, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_15ccc
  store i32 %v3_15cd8, i32* %r4.global-to-local, align 4
  ret i32 %arg1

.preheader:                                       ; preds = %dec_label_pc_15ccc, %.preheader
  %v0_15ce8 = phi i32 [ %v3_15cec, %.preheader ], [ %v3_15cd0, %dec_label_pc_15ccc ]
  call void @__pseudo_branch(i32 %v0_15ce8)
  %v0_15cec = load i32, i32* %r4.global-to-local, align 4
  %v1_15cec = add i32 %v0_15cec, -4
  %v2_15cec = inttoptr i32 %v1_15cec to i32*
  %v3_15cec = load i32, i32* %v2_15cec, align 4
  store i32 %v1_15cec, i32* %r4.global-to-local, align 4
  %v3_15cf0 = icmp eq i32 %v3_15cec, -1
  br i1 %v3_15cf0, label %dec_label_pc_15cf8, label %.preheader

dec_label_pc_15cf8:                               ; preds = %.preheader
  %v2_15cf8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15cf8, i32* %r4.global-to-local, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v3_15cec, { 1, 0 }
  uselistorder i32 %v3_15cd0, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 54, 16, 55, 56, 57, 3, 17, 18, 19, 58, 59, 60, 4, 20, 21, 22, 61, 62, 63, 5, 23, 24, 64, 15, 14, 65, 66, 67, 13, 12, 11, 10, 25, 26, 27, 28, 29, 0, 30, 1, 31, 2, 68, 9, 32, 42, 43, 49, 44, 33, 34, 45, 46, 47, 48, 50, 8, 7, 41, 6, 35, 36, 37, 51, 38, 39, 52, 53, 40 }
  uselistorder i32 -1, { 170, 0, 95, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 171, 96, 315, 97, 325, 98, 326, 305, 99, 364, 100, 365, 101, 366, 102, 367, 149, 91, 306, 307, 103, 308, 309, 104, 368, 1, 172, 2, 105, 327, 328, 173, 174, 301, 302, 151, 175, 152, 176, 3, 4, 90, 82, 83, 177, 178, 179, 88, 289, 180, 290, 5, 6, 106, 329, 107, 330, 108, 316, 109, 331, 110, 317, 111, 332, 112, 303, 113, 333, 114, 318, 115, 334, 116, 314, 117, 291, 118, 169, 119, 181, 120, 292, 121, 304, 122, 335, 123, 371, 372, 124, 293, 125, 336, 126, 310, 127, 311, 128, 294, 129, 373, 130, 369, 131, 295, 132, 323, 133, 370, 134, 324, 135, 337, 136, 296, 137, 374, 92, 375, 182, 183, 184, 185, 186, 187, 188, 189, 7, 8, 9, 10, 11, 138, 139, 12, 190, 191, 17, 192, 319, 16, 193, 94, 93, 320, 13, 194, 283, 141, 284, 286, 287, 195, 196, 197, 140, 285, 18, 198, 84, 19, 199, 200, 20, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 288, 14, 221, 15, 222, 223, 21, 224, 225, 142, 321, 226, 22, 227, 322, 85, 23, 24, 228, 89, 25, 26, 27, 28, 29, 143, 229, 312, 230, 313, 155, 297, 30, 153, 298, 31, 32, 154, 299, 33, 34, 156, 300, 35, 36, 37, 38, 39, 231, 40, 41, 42, 232, 233, 234, 235, 43, 145, 146, 147, 148, 44, 45, 46, 236, 47, 48, 49, 50, 86, 51, 52, 53, 54, 55, 56, 57, 237, 58, 144, 59, 60, 61, 238, 62, 63, 64, 65, 239, 66, 67, 68, 240, 69, 70, 71, 72, 73, 74, 75, 241, 76, 77, 78, 242, 79, 80, 243, 244, 245, 246, 81, 87, 338, 339, 162, 340, 160, 341, 161, 342, 158, 343, 247, 248, 249, 250, 251, 163, 344, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 157, 345, 164, 346, 278, 279, 280, 281, 282, 159, 347, 150, 165, 348, 166, 167, 168 }
  uselistorder i32* @global_var_1e88c.655, { 1, 0 }
  uselistorder i32 1, { 596, 40, 371, 431, 966, 967, 968, 969, 970, 395, 597, 299, 1133, 377, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 600, 599, 598, 322, 324, 328, 332, 327, 326, 323, 325, 329, 331, 330, 601, 53, 52, 48, 50, 49, 51, 54, 47, 782, 150, 147, 149, 148, 602, 151, 603, 83, 84, 604, 161, 112, 605, 298, 606, 69, 607, 300, 608, 308, 860, 861, 609, 341, 337, 342, 338, 339, 343, 340, 862, 863, 864, 480, 108, 109, 105, 107, 106, 610, 344, 611, 345, 0, 615, 614, 613, 612, 67, 66, 481, 616, 68, 396, 482, 617, 264, 618, 1027, 623, 622, 621, 620, 619, 79, 80, 81, 82, 483, 624, 372, 849, 366, 850, 397, 625, 86, 92, 85, 89, 88, 91, 93, 87, 90, 1146, 398, 628, 627, 626, 304, 303, 629, 294, 295, 293, 296, 9, 10, 11, 12, 630, 242, 243, 241, 240, 239, 631, 632, 310, 309, 633, 399, 1028, 634, 110, 111, 484, 485, 370, 638, 637, 636, 635, 120, 378, 639, 29, 640, 166, 28, 641, 39, 642, 13, 643, 30, 644, 94, 645, 78, 646, 193, 647, 286, 648, 287, 649, 172, 650, 783, 784, 785, 786, 787, 788, 789, 1147, 191, 192, 188, 189, 190, 651, 486, 487, 652, 184, 183, 185, 182, 441, 865, 653, 31, 442, 655, 654, 114, 113, 656, 207, 657, 208, 658, 173, 659, 164, 165, 660, 245, 661, 230, 662, 204, 663, 205, 664, 231, 163, 665, 288, 244, 666, 305, 667, 346, 668, 301, 669, 100, 670, 206, 302, 46, 443, 1029, 1030, 444, 1031, 1032, 350, 1033, 1034, 1035, 1036, 367, 1037, 673, 672, 671, 209, 217, 211, 212, 214, 213, 210, 215, 216, 1, 1038, 1039, 1040, 1041, 203, 202, 2, 1042, 1043, 1044, 1045, 379, 1046, 1047, 380, 1048, 675, 674, 307, 306, 866, 867, 868, 488, 676, 146, 145, 144, 143, 1049, 400, 401, 3, 479, 1050, 677, 97, 95, 98, 99, 96, 1051, 1053, 1052, 489, 1054, 38, 37, 1014, 297, 1055, 1056, 1057, 186, 187, 1058, 678, 102, 103, 104, 101, 1059, 1060, 679, 44, 43, 42, 41, 45, 1061, 1062, 680, 35, 34, 33, 32, 36, 490, 792, 491, 793, 445, 794, 795, 972, 796, 810, 499, 790, 791, 500, 797, 403, 501, 502, 497, 798, 799, 498, 800, 801, 496, 802, 803, 495, 804, 805, 494, 806, 807, 493, 808, 809, 492, 811, 812, 973, 503, 974, 504, 975, 977, 978, 976, 979, 505, 980, 781, 402, 983, 981, 506, 982, 985, 507, 986, 987, 992, 433, 993, 994, 508, 995, 509, 996, 510, 997, 511, 998, 512, 999, 513, 1000, 514, 1001, 515, 1002, 516, 1003, 517, 1004, 518, 1005, 519, 1006, 404, 1012, 1013, 368, 520, 694, 693, 692, 691, 690, 689, 688, 687, 686, 685, 684, 683, 682, 681, 311, 315, 312, 318, 320, 319, 321, 314, 313, 316, 317, 1007, 1008, 521, 1009, 1010, 522, 1011, 695, 181, 180, 175, 179, 178, 177, 174, 176, 984, 523, 697, 696, 334, 336, 333, 335, 819, 820, 821, 822, 823, 824, 825, 351, 361, 826, 827, 405, 352, 828, 829, 830, 831, 353, 360, 832, 833, 406, 354, 834, 524, 836, 837, 525, 838, 835, 839, 438, 840, 381, 843, 844, 841, 842, 356, 355, 357, 845, 526, 846, 704, 703, 591, 702, 701, 700, 590, 699, 698, 56, 57, 55, 60, 62, 64, 59, 65, 61, 58, 63, 705, 171, 956, 382, 955, 432, 706, 156, 157, 155, 154, 153, 159, 160, 152, 158, 877, 878, 879, 527, 708, 707, 19, 21, 26, 16, 18, 15, 20, 14, 27, 17, 22, 23, 25, 24, 709, 450, 813, 814, 446, 815, 528, 530, 529, 531, 816, 817, 532, 533, 534, 535, 536, 537, 538, 449, 448, 447, 818, 539, 722, 721, 720, 719, 718, 717, 716, 715, 714, 713, 592, 712, 711, 710, 167, 168, 169, 170, 847, 723, 542, 541, 540, 848, 725, 724, 543, 851, 416, 852, 415, 853, 414, 854, 413, 855, 856, 544, 422, 407, 857, 545, 858, 546, 859, 369, 547, 739, 738, 737, 736, 735, 734, 733, 732, 731, 730, 729, 728, 727, 726, 137, 138, 139, 140, 874, 5, 869, 548, 870, 4, 871, 434, 872, 373, 374, 873, 875, 435, 876, 743, 742, 741, 593, 594, 740, 988, 451, 989, 452, 990, 6, 991, 7, 8, 880, 881, 882, 883, 884, 885, 375, 376, 886, 887, 888, 889, 890, 891, 892, 893, 549, 894, 895, 550, 896, 899, 897, 898, 746, 745, 744, 218, 221, 220, 229, 226, 224, 225, 228, 227, 223, 222, 219, 900, 901, 902, 903, 904, 551, 383, 552, 748, 747, 284, 281, 277, 278, 282, 283, 285, 279, 280, 905, 906, 907, 553, 908, 909, 910, 911, 912, 913, 554, 914, 384, 555, 454, 453, 556, 915, 749, 257, 260, 261, 263, 262, 259, 258, 256, 916, 439, 359, 917, 557, 919, 918, 358, 558, 456, 455, 595, 750, 266, 265, 920, 921, 922, 923, 924, 925, 559, 926, 385, 560, 561, 927, 457, 928, 751, 269, 267, 268, 273, 274, 275, 276, 271, 272, 270, 929, 930, 417, 931, 932, 933, 562, 934, 386, 563, 459, 458, 564, 935, 565, 936, 752, 118, 117, 119, 116, 115, 937, 938, 418, 939, 940, 941, 566, 942, 387, 567, 464, 463, 568, 943, 460, 944, 461, 945, 462, 946, 757, 756, 755, 754, 753, 235, 236, 238, 237, 232, 234, 233, 947, 948, 949, 419, 950, 951, 952, 388, 569, 467, 466, 570, 953, 465, 954, 758, 72, 71, 74, 75, 77, 76, 70, 73, 957, 958, 959, 420, 960, 961, 962, 389, 571, 470, 469, 572, 963, 468, 964, 763, 762, 761, 760, 759, 253, 252, 248, 249, 250, 251, 255, 246, 254, 247, 965, 471, 573, 764, 290, 291, 292, 289, 1063, 194, 971, 195, 765, 141, 142, 1015, 574, 1018, 575, 1019, 1020, 1016, 1017, 1021, 1022, 1023, 1024, 390, 1025, 391, 196, 199, 201, 197, 198, 200, 1026, 576, 1064, 162, 1065, 362, 580, 423, 424, 1066, 363, 578, 425, 426, 579, 1067, 408, 1068, 421, 1069, 364, 427, 583, 428, 437, 365, 581, 429, 430, 582, 1070, 409, 1071, 1072, 478, 1073, 1074, 1075, 473, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 474, 1088, 1089, 1090, 1091, 1092, 393, 1093, 584, 1094, 585, 586, 1095, 1096, 1097, 1098, 1099, 475, 1100, 1101, 1102, 410, 1103, 476, 1104, 1105, 1106, 411, 1107, 477, 1108, 1109, 1110, 412, 1111, 1112, 1113, 1114, 394, 1115, 1116, 1117, 392, 577, 472, 1118, 1120, 1122, 1121, 1119, 587, 1123, 1124, 1125, 588, 1126, 1127, 1128, 1129, 780, 440, 1130, 1131, 436, 589, 1132, 777, 776, 775, 774, 773, 772, 771, 770, 769, 768, 767, 766, 123, 122, 128, 121, 125, 136, 133, 134, 135, 126, 127, 124, 129, 131, 130, 132, 778, 779, 349, 348, 347 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_15d00() local_unnamed_addr {
dec_label_pc_15d00:
  %v5_15d04 = load i32, i32* @r0, align 4
  ret i32 %v5_15d04

; uselistorder directives
  uselistorder i32* @r0, { 3, 91, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 54, 55, 57, 56, 23, 197, 198, 29, 30, 31, 32, 18, 2, 16, 17, 113, 114, 24, 199, 200, 44, 202, 6, 9, 116, 10, 115, 93, 28, 94, 19, 106, 117, 201, 37, 20, 58, 59, 60, 61, 26, 15, 62, 63, 64, 65, 14, 203, 7, 13, 118, 12, 119, 11, 120, 121, 8, 122, 123, 124, 125, 0, 33, 95, 96, 34, 35, 36, 97, 99, 100, 101, 102, 105, 98, 42, 43, 79, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 25, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 27, 78, 103, 104, 1, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 107, 108, 109, 110, 111, 126, 112, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 5, 4, 21, 22 }
}

define i32 @function_15d08() local_unnamed_addr {
entry:
  %v3_15d0c = load i32, i32* @r4, align 4
  %v0_15d14 = call i32 @function_80b0()
  call void @__pseudo_branch(i32 %v3_15d0c)
  ret i32 %v0_15d14

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 0, 7, 12, 13, 9, 10, 11, 14, 4, 5, 6, 2, 3, 1, 8 }
  uselistorder i32 0, { 145, 0, 961, 962, 963, 964, 147, 146, 965, 1435, 1436, 1437, 1438, 1439, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1440, 1441, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 38, 1460, 1461, 1462, 1463, 1464, 39, 1465, 1466, 1467, 40, 1468, 1469, 1470, 41, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1486, 1487, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 42, 1506, 1507, 1508, 1509, 1510, 43, 1511, 1512, 1513, 1514, 1515, 44, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 779, 780, 322, 781, 323, 969, 1065, 1066, 1067, 1068, 1069, 782, 783, 1529, 1530, 1531, 1532, 324, 784, 1, 785, 786, 787, 1533, 1534, 1535, 148, 1536, 98, 1537, 96, 97, 1538, 1539, 1540, 325, 1544, 326, 1557, 1559, 629, 256, 1560, 327, 1558, 328, 329, 2, 1541, 1542, 149, 1070, 278, 1071, 332, 280, 279, 1072, 1073, 1074, 1075, 331, 1077, 1078, 330, 1079, 1543, 757, 758, 759, 760, 761, 762, 151, 115, 763, 99, 150, 152, 334, 1545, 335, 281, 1546, 1549, 1551, 1552, 333, 1082, 1084, 1085, 74, 257, 1086, 1083, 1080, 1081, 3, 970, 973, 971, 972, 258, 4, 1089, 1087, 1088, 259, 153, 974, 975, 976, 977, 1041, 1042, 336, 5, 1043, 6, 1096, 1097, 154, 1090, 1091, 1092, 1093, 1094, 1095, 7, 8, 1076, 712, 713, 714, 337, 9, 338, 1098, 1099, 623, 978, 624, 1100, 979, 1101, 764, 1102, 980, 1103, 875, 715, 966, 1561, 1562, 88, 788, 339, 789, 790, 791, 792, 340, 793, 794, 795, 796, 797, 798, 799, 716, 765, 1104, 1550, 717, 1105, 800, 818, 718, 625, 1553, 102, 1554, 1547, 719, 1057, 1548, 1058, 1106, 720, 1555, 1556, 10, 1107, 116, 1108, 1109, 253, 252, 630, 103, 104, 105, 106, 655, 631, 76, 75, 117, 1110, 1111, 1112, 1113, 1115, 1114, 11, 1116, 1117, 255, 254, 632, 107, 108, 109, 110, 656, 633, 78, 77, 73, 85, 1118, 657, 1119, 1120, 1121, 111, 1122, 1123, 1124, 1125, 1126, 155, 634, 658, 635, 636, 1127, 659, 125, 156, 1128, 1129, 112, 1130, 1131, 12, 660, 260, 14, 13, 157, 1132, 158, 661, 15, 261, 159, 160, 313, 79, 161, 341, 981, 100, 801, 802, 1134, 1133, 1135, 1136, 45, 162, 1137, 165, 164, 163, 314, 315, 316, 167, 166, 168, 342, 1138, 1139, 169, 1044, 1045, 126, 170, 1140, 171, 721, 172, 1141, 1142, 173, 1143, 1144, 687, 637, 982, 118, 983, 984, 688, 689, 685, 662, 349, 686, 708, 709, 690, 691, 174, 175, 692, 693, 694, 695, 663, 347, 696, 697, 664, 348, 698, 699, 665, 346, 700, 701, 666, 345, 702, 703, 667, 344, 704, 711, 668, 343, 705, 710, 706, 93, 80, 127, 128, 707, 628, 985, 350, 986, 263, 987, 351, 988, 991, 992, 177, 262, 989, 990, 352, 353, 993, 994, 282, 995, 996, 669, 89, 354, 998, 999, 1000, 1001, 1002, 1003, 1004, 274, 273, 1005, 355, 1006, 113, 1007, 1008, 129, 1009, 654, 1010, 1011, 1012, 653, 1013, 1014, 1015, 176, 356, 357, 1016, 1019, 1020, 1021, 1022, 1023, 178, 1017, 179, 1018, 16, 180, 997, 737, 738, 739, 95, 81, 740, 94, 82, 741, 742, 743, 744, 745, 746, 358, 747, 748, 750, 181, 749, 90, 751, 18, 17, 752, 819, 820, 823, 824, 821, 822, 825, 826, 722, 360, 724, 182, 725, 726, 727, 728, 729, 730, 731, 732, 733, 283, 361, 734, 91, 362, 735, 723, 365, 366, 19, 736, 71, 72, 367, 368, 363, 359, 364, 753, 754, 755, 756, 369, 317, 186, 185, 670, 318, 188, 187, 671, 319, 190, 189, 672, 320, 192, 191, 673, 674, 321, 184, 183, 265, 272, 266, 267, 268, 370, 766, 193, 194, 775, 767, 768, 769, 770, 771, 772, 773, 774, 264, 776, 777, 83, 778, 195, 196, 371, 101, 803, 804, 805, 806, 271, 807, 808, 809, 270, 810, 811, 812, 813, 121, 814, 816, 815, 119, 120, 197, 269, 373, 374, 372, 817, 286, 284, 285, 122, 198, 86, 199, 827, 133, 132, 130, 131, 828, 829, 87, 830, 831, 832, 833, 834, 200, 835, 836, 375, 837, 838, 839, 840, 204, 201, 202, 203, 841, 842, 843, 844, 376, 845, 846, 289, 847, 288, 848, 287, 849, 377, 850, 851, 852, 136, 134, 135, 20, 853, 854, 855, 856, 205, 857, 858, 291, 290, 859, 378, 860, 861, 862, 863, 864, 140, 137, 138, 139, 21, 865, 866, 867, 206, 868, 207, 869, 870, 294, 871, 293, 872, 292, 873, 379, 874, 212, 381, 210, 211, 208, 209, 876, 214, 213, 877, 215, 380, 879, 880, 144, 141, 142, 143, 22, 878, 881, 882, 883, 884, 885, 886, 23, 24, 25, 26, 27, 887, 888, 382, 296, 889, 383, 890, 384, 891, 385, 892, 386, 893, 387, 894, 388, 895, 295, 896, 216, 217, 218, 898, 899, 897, 901, 902, 900, 28, 29, 30, 31, 32, 903, 219, 904, 905, 298, 906, 389, 907, 390, 908, 391, 909, 392, 910, 393, 911, 394, 912, 297, 913, 395, 914, 221, 220, 222, 916, 917, 915, 918, 919, 84, 921, 922, 923, 924, 396, 925, 33, 34, 35, 36, 37, 920, 223, 123, 926, 927, 303, 928, 302, 929, 301, 930, 299, 931, 300, 932, 397, 933, 398, 934, 224, 227, 226, 225, 937, 938, 936, 935, 399, 940, 939, 941, 228, 942, 943, 306, 944, 305, 945, 304, 946, 400, 947, 229, 232, 231, 230, 950, 951, 949, 948, 953, 952, 954, 955, 233, 309, 956, 308, 957, 307, 958, 401, 959, 275, 960, 1145, 234, 1146, 967, 235, 968, 1024, 1025, 1026, 1027, 1028, 1029, 236, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 237, 238, 1038, 1039, 1040, 1046, 239, 1047, 1048, 1049, 240, 402, 1050, 1051, 46, 1052, 1053, 1054, 1055, 1056, 403, 1059, 241, 1147, 1060, 1061, 1062, 1063, 1148, 1149, 1064, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 404, 1163, 638, 639, 640, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 47, 1205, 1206, 1207, 242, 243, 1208, 405, 1209, 1210, 1211, 1212, 641, 675, 1213, 1214, 1215, 48, 1216, 1217, 1218, 1219, 49, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 50, 1227, 1228, 248, 1229, 1230, 1231, 1232, 1233, 1234, 51, 1235, 1236, 1237, 52, 1238, 1239, 1240, 53, 1241, 1242, 1243, 1244, 408, 1258, 1259, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 642, 676, 1254, 1255, 1256, 1257, 643, 677, 1260, 1261, 1262, 54, 1263, 1264, 409, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 644, 678, 1273, 1274, 1275, 55, 1276, 1277, 1278, 1279, 56, 1280, 645, 1281, 1282, 1285, 1286, 646, 244, 1283, 1284, 245, 246, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 647, 679, 1298, 1299, 1300, 57, 1301, 1302, 1303, 1304, 1305, 1306, 58, 1307, 124, 1308, 1309, 1310, 1311, 648, 680, 1312, 1313, 1314, 59, 1315, 247, 1316, 1317, 1318, 60, 1319, 1320, 1321, 1322, 1323, 649, 681, 1324, 1325, 1326, 61, 1327, 1328, 1329, 62, 406, 407, 1330, 1331, 1332, 1333, 1334, 650, 682, 1335, 1336, 1337, 63, 1338, 1339, 1340, 64, 1341, 1342, 1343, 65, 1344, 1345, 1346, 66, 1347, 1348, 1349, 1350, 67, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1363, 1364, 651, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 276, 1376, 1379, 1380, 1383, 1384, 1385, 68, 1381, 1382, 1377, 1378, 1386, 1387, 250, 249, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 69, 251, 1398, 1399, 1400, 70, 1401, 1402, 1403, 1404, 1406, 92, 410, 1407, 1405, 1361, 1362, 114, 626, 627, 1408, 1409, 1410, 652, 277, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 310, 1431, 311, 1432, 312, 1433, 1434, 683, 684, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577 }
  uselistorder i32* @r4, {}
}

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @chdir(i8*) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @unlink(i8*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @accept(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @fstat(i32, %stat*) local_unnamed_addr

declare i32 @getdents64(i32, %linux_dirent64*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @times(%tms*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
