source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%tms = type { i32, i32, i32, i32 }
%timespec = type { i32, i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%stat = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%linux_dirent64 = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_80a0.1 = constant i32 -352321502
@global_var_1c714.5 = global i32 0
@global_var_1c724.6 = global i32* @global_var_1c714.5
@global_var_1c884.12 = global i32 0
@global_var_e12c.18 = constant i32 -382906384
@global_var_1c8a0.23 = global i32 0
@global_var_8314.24 = constant i32 -352321546
@global_var_12590.25 = constant i32 -481296384
@global_var_c444.31 = constant i32 -382906384
@global_var_c908.33 = constant i32 -382906384
@global_var_bad4.35 = constant i32 -382906384
@global_var_b388.37 = constant i32 -382906384
@global_var_ac14.39 = constant i32 -382906384
@global_var_a3b4.41 = constant i32 -382906384
@global_var_9154.44 = constant i32 -382906384
@global_var_89d8.46 = constant i32 -382906384
@global_var_9870.48 = constant i32 -382906384
@global_var_1c93c.50 = global i32 0
@global_var_1c944.62 = global i32 0
@global_var_141d4.64 = constant i32 47
@global_var_1c940.67 = global i32 0
@global_var_1c8a4.69 = global i32 0
@global_var_dfb0.71 = constant i32 -382910352
@global_var_1c730.73 = global i32 70552
@global_var_1c728.75 = global i32 -1
@global_var_1c94c.81 = local_unnamed_addr global i32 0
@global_var_1c94b.82 = local_unnamed_addr global i32 0
@global_var_1c94a.83 = local_unnamed_addr global i32 0
@global_var_1c8a8.85 = global i32 0
@global_var_de28.87 = constant i32 -442556408
@global_var_1c949.91 = local_unnamed_addr global i32 0
@global_var_141d8.95 = constant i32 10
@global_var_1c72c.97 = global i32 -1
@global_var_11960.101 = constant i32 -382910448
@global_var_11398.102 = constant i32 -382910224
@global_var_141dc.105 = constant i32 16777216
@global_var_1c8b0.107 = global i32 0
@global_var_1c8bc.109 = global i32 0
@global_var_1c8b4.111 = global i32 0
@global_var_1c8b8.113 = global i32 0
@global_var_efc4.126 = constant i32 -442695668
@global_var_1c960.128 = global i32 0
@global_var_1c8f4.130 = global i32 0
@global_var_1c8c0.132 = global i32 0
@global_var_1c8ec.134 = global i32 0
@global_var_1c958.142 = global i32 0
@global_var_1c95c.144 = global i32 0
@global_var_1c8c7.147 = local_unnamed_addr global i32 0
@global_var_1c8c6.148 = local_unnamed_addr global i32 0
@global_var_1c8d8.150 = global i32 0
@global_var_1c8c9.152 = local_unnamed_addr global i32 0
@global_var_1c8cd.153 = local_unnamed_addr global i32 0
@global_var_1c8cc.154 = local_unnamed_addr global i32 0
@global_var_1c8db.155 = local_unnamed_addr global i32 0
@global_var_1c8d9.156 = local_unnamed_addr global i32 0
@global_var_1c8c8.157 = local_unnamed_addr global i32 0
@global_var_1c8da.158 = local_unnamed_addr global i32 0
@global_var_1c8e7.160 = local_unnamed_addr global i32 0
@global_var_1c8e6.161 = local_unnamed_addr global i32 0
@global_var_14220.163 = constant [8 x i8] c"0125!8 \00"
@global_var_14200.165 = constant i32 0
@global_var_141e4.167 = constant [6 x i8] c"509=:\00"
@global_var_141ec.169 = constant i32 943467547
@global_var_141f8.171 = constant i32 322070023
@global_var_14204.173 = constant i32 606281272
@global_var_1420c.175 = constant [7 x i8] c"5: '8%\00"
@global_var_14214.177 = constant i32 1027158037
@global_var_1c8d0.178 = local_unnamed_addr global i32 0
@global_var_1c8ce.180 = local_unnamed_addr global i32 0
@global_var_1c8cf.181 = local_unnamed_addr global i32 0
@global_var_1c8e8.183 = local_unnamed_addr global i32 0
@global_var_1c8e9.184 = local_unnamed_addr global i32 0
@global_var_1421c.190 = constant [3 x i8] c"\0D\0A\00"
@global_var_14231.192 = constant i32 1428159487
@global_var_14228.194 = constant i32 2095871
@global_var_1c968.196 = global i32 0
@global_var_1c738.199 = global i32 -555811921
@global_var_14234.204 = constant i32 58965
@global_var_1c970.205 = local_unnamed_addr global i32 0
@global_var_1c974.206 = local_unnamed_addr global i32 0
@global_var_1c975.207 = local_unnamed_addr global i32 0
@global_var_14238.209 = constant [13 x i8] c"&;; 91z78!6T\00"
@global_var_1c97c.210 = local_unnamed_addr global i32 0
@global_var_1c978.211 = local_unnamed_addr global i32 0
@global_var_1c97d.212 = local_unnamed_addr global i32 0
@global_var_14248.214 = constant [13 x i8] c"'1:$5=z'= 1T\00"
@global_var_1c984.215 = local_unnamed_addr global i32 0
@global_var_1c980.216 = local_unnamed_addr global i32 0
@global_var_1c985.217 = local_unnamed_addr global i32 0
@global_var_14258.219 = constant i32 28654
@global_var_1c988.220 = local_unnamed_addr global i32 0
@global_var_1c98c.221 = local_unnamed_addr global i32 0
@global_var_1c98d.222 = local_unnamed_addr global i32 0
@global_var_1425c.224 = constant [37 x i8] c"&;; t'1:$5=t>!' t=:217 10t-;!&t'<= T\00"
@global_var_1c994.225 = local_unnamed_addr global i32 0
@global_var_1c990.226 = local_unnamed_addr global i32 0
@global_var_1c995.227 = local_unnamed_addr global i32 0
@global_var_14284.229 = constant [7 x i8] c"'<188T\00"
@global_var_1c998.230 = local_unnamed_addr global i32 0
@global_var_1c99c.231 = local_unnamed_addr global i32 0
@global_var_1c99d.232 = local_unnamed_addr global i32 0
@global_var_1428c.234 = constant [8 x i8] c"1:5681T\00"
@global_var_1c9a0.235 = local_unnamed_addr global i32 0
@global_var_1c9a4.236 = local_unnamed_addr global i32 0
@global_var_1c9a5.237 = local_unnamed_addr global i32 0
@global_var_14294.239 = constant [8 x i8] c"'-' 19T\00"
@global_var_1c9a8.240 = local_unnamed_addr global i32 0
@global_var_1c9ac.241 = local_unnamed_addr global i32 0
@global_var_1c9ad.242 = local_unnamed_addr global i32 0
@global_var_1429c.244 = constant [4 x i8] c"'<T\00"
@global_var_1c9b4.245 = local_unnamed_addr global i32 0
@global_var_1c9b0.246 = local_unnamed_addr global i32 0
@global_var_1c9b5.247 = local_unnamed_addr global i32 0
@global_var_142a0.249 = constant i32 977090171
@global_var_1c9bc.250 = local_unnamed_addr global i32 0
@global_var_1c9b8.251 = local_unnamed_addr global i32 0
@global_var_1c9bd.252 = local_unnamed_addr global i32 0
@global_var_142b4.254 = constant i32 102440217
@global_var_1c9c4.255 = local_unnamed_addr global i32 0
@global_var_1c9c0.256 = local_unnamed_addr global i32 0
@global_var_1c9c5.257 = local_unnamed_addr global i32 0
@global_var_142d0.259 = constant [10 x i8] c":7;&&17 T\00"
@global_var_1c9cc.260 = local_unnamed_addr global i32 0
@global_var_1c9c8.261 = local_unnamed_addr global i32 0
@global_var_1c9cd.262 = local_unnamed_addr global i32 0
@global_var_142dc.264 = constant [17 x i8] c"{6=:{6!'-6;,t$'T\00"
@global_var_1c9d0.265 = local_unnamed_addr global i32 0
@global_var_1c9d4.266 = local_unnamed_addr global i32 0
@global_var_1c9d5.267 = local_unnamed_addr global i32 0
@global_var_142f0.269 = constant [23 x i8] c"{6=:{6!'-6;,t?=88tymtT\00"
@global_var_1c9dc.270 = local_unnamed_addr global i32 0
@global_var_1c9d8.271 = local_unnamed_addr global i32 0
@global_var_1c9dd.272 = local_unnamed_addr global i32 0
@global_var_14308.274 = constant [8 x i8] c"{$&;7{T\00"
@global_var_1c9e0.275 = local_unnamed_addr global i32 0
@global_var_1c9e4.276 = local_unnamed_addr global i32 0
@global_var_1c9e5.277 = local_unnamed_addr global i32 0
@global_var_14310.279 = constant [6 x i8] c"{1,1T\00"
@global_var_1c9e8.280 = local_unnamed_addr global i32 0
@global_var_1c9ec.281 = local_unnamed_addr global i32 0
@global_var_1c9ed.282 = local_unnamed_addr global i32 0
@global_var_14318.284 = constant [5 x i8] c"{20T\00"
@global_var_1c9f4.285 = local_unnamed_addr global i32 0
@global_var_1c9f0.286 = local_unnamed_addr global i32 0
@global_var_1c9f5.287 = local_unnamed_addr global i32 0
@global_var_14320.289 = constant [7 x i8] c"{95$'T\00"
@global_var_1c9f8.290 = local_unnamed_addr global i32 0
@global_var_1c9fc.291 = local_unnamed_addr global i32 0
@global_var_1c9fd.292 = local_unnamed_addr global i32 0
@global_var_14328.294 = constant [15 x i8] c"{$&;7{:1 { 7$T\00"
@global_var_1ca00.295 = local_unnamed_addr global i32 0
@global_var_1ca04.296 = local_unnamed_addr global i32 0
@global_var_1ca05.297 = local_unnamed_addr global i32 0
@global_var_14338.299 = constant [9 x i8] c"{' 5 !'T\00"
@global_var_1ca60.300 = local_unnamed_addr global i32 0
@global_var_1ca64.301 = local_unnamed_addr global i32 0
@global_var_1ca65.302 = local_unnamed_addr global i32 0
@global_var_14344.304 = constant [17 x i8] c"{$&;7{:1 {&;! 1T\00"
@global_var_1ca08.305 = local_unnamed_addr global i32 0
@global_var_1ca0c.306 = local_unnamed_addr global i32 0
@global_var_1ca0d.307 = local_unnamed_addr global i32 0
@global_var_14358.309 = constant [9 x i8] c"5''#;&0T\00"
@global_var_1ca10.310 = local_unnamed_addr global i32 0
@global_var_1ca14.311 = local_unnamed_addr global i32 0
@global_var_1ca15.312 = local_unnamed_addr global i32 0
@global_var_143e0.314 = constant i32 557516544
@global_var_1ca1c.315 = local_unnamed_addr global i32 0
@global_var_1ca18.316 = local_unnamed_addr global i32 0
@global_var_1ca1d.317 = local_unnamed_addr global i32 0
@global_var_14364.319 = constant [18 x i8] c"{1 7{&1';8\22z7;:2T\00"
@global_var_1ca24.320 = local_unnamed_addr global i32 0
@global_var_1ca20.321 = local_unnamed_addr global i32 0
@global_var_1ca25.322 = local_unnamed_addr global i32 0
@global_var_14378.324 = constant [13 x i8] c":591'1&\221&tT\00"
@global_var_1ca2c.325 = local_unnamed_addr global i32 0
@global_var_1ca28.326 = local_unnamed_addr global i32 0
@global_var_1ca2d.327 = local_unnamed_addr global i32 0
@global_var_14388.329 = constant [15 x i8] c"{01\22{#5 7<0;3T\00"
@global_var_1ca30.330 = local_unnamed_addr global i32 0
@global_var_1ca34.331 = local_unnamed_addr global i32 0
@global_var_1ca35.332 = local_unnamed_addr global i32 0
@global_var_14398.334 = constant [20 x i8] c"{01\22{9='7{#5 7<0;3T\00"
@global_var_1ca3c.335 = local_unnamed_addr global i32 0
@global_var_1ca38.336 = local_unnamed_addr global i32 0
@global_var_1ca3d.337 = local_unnamed_addr global i32 0
@global_var_143ac.339 = constant [9 x i8] c"$662*7!E\00"
@global_var_1ca40.340 = local_unnamed_addr global i32 0
@global_var_1ca44.341 = local_unnamed_addr global i32 0
@global_var_1ca45.342 = local_unnamed_addr global i32 0
@global_var_143b8.344 = constant [6 x i8] c";3=:T\00"
@global_var_1ca48.345 = local_unnamed_addr global i32 0
@global_var_1ca4c.346 = local_unnamed_addr global i32 0
@global_var_1ca4d.347 = local_unnamed_addr global i32 0
@global_var_143c0.349 = constant [7 x i8] c"1: 1&T\00"
@global_var_1ca50.350 = local_unnamed_addr global i32 0
@global_var_1ca54.351 = local_unnamed_addr global i32 0
@global_var_1ca55.352 = local_unnamed_addr global i32 0
@global_var_143c8.354 = constant [24 x i8] c"e365`70;9ag:<$ef1=d?2>T\00"
@global_var_1ca5d.355 = local_unnamed_addr global i32 0
@global_var_1ca58.356 = local_unnamed_addr global i32 0
@global_var_1ca5c.357 = local_unnamed_addr global i32 0
@global_var_12f78.360 = constant i32 -476053504
@global_var_11d04.364 = constant i32 -443219956
@global_var_11e70.369 = constant i32 -376111092
@global_var_1c930.372 = global i32 0
@global_var_11fec.374 = constant i32 -456978431
@global_var_1ca68.376 = global i32 0
@global_var_1c8f8.378 = global i32 0
@global_var_1c838.381 = global i32 256
@global_var_1c73c.382 = global i32* @global_var_1c838.381
@global_var_1c920.385 = global i32 0
@global_var_1cae8.387 = global i32 0
@global_var_1372c.388 = constant i32 -382910416
@global_var_11f70.389 = constant i32 -509595648
@global_var_12610.396 = constant i32 -442564520
@global_var_1c844.402 = global i32 0
@global_var_11bdc.404 = constant i32 -481230848
@global_var_1c910.406 = global i32 0
@global_var_1337c.408 = constant i32 -509587456
@global_var_14504.410 = constant i32 33554944
@global_var_1c87c.411 = global i32* @global_var_14504.410
@global_var_1c85c.414 = global i32 0
@global_var_1c914.418 = local_unnamed_addr global i32 0
@global_var_12d30.420 = constant i32 -352321419
@global_var_1c708.424 = global i32 -1
@global_var_1c924.427 = global i32 0
@global_var_1c928.429 = local_unnamed_addr global i32 0
@global_var_12f64.430 = constant i32 -390234096
@global_var_143f8.432 = constant [10 x i8] c"/dev/null\00"
@global_var_1c92c.434 = global i32 0
@global_var_1c918.439 = local_unnamed_addr global i32 0
@global_var_1c91c.441 = global i32 0
@global_var_11f50.443 = constant i32 -369096946
@global_var_1c874 = external local_unnamed_addr global i32
@global_var_11f08.453 = constant i32 -442564608
@global_var_1322c.455 = constant i32 -335544664
@global_var_13348.458 = constant i32 -275775369
@global_var_13ac0.459 = constant i32 -382910352
@global_var_1c938.461 = global i32 0
@global_var_1cb00.464 = global i32 0
@global_var_1cb04.466 = global i32 0
@global_var_1c70c.469 = global i32 0
@global_var_1c880.3 = external global i8*
@global_var_1c89c.21 = external global i8*
@global_var_1c89d.29 = global i8 0
@1 = internal constant [2 x i8] c"\01\00"
@global_var_1c734.77 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_1c948.80 = external global i8*
@global_var_1c8ac.100 = external global i8*
@global_var_1c8f0.136 = external global i8*
@global_var_1c8f1.137 = local_unnamed_addr global i8 0
@global_var_1c8c4.146 = external global i8*
@global_var_1c8e4.151 = local_unnamed_addr global i8 0
@global_var_1c8e5.159 = local_unnamed_addr global i8 0
@global_var_1c8dc.182 = local_unnamed_addr global i8 0
@global_var_1c8d4.179 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  %v0_80a0 = call i32 @function_8130()
  store i32 %v0_80a0, i32* @r0, align 4
  %v1_80a4 = call i32 @function_14184(i32 %v0_80a0)
  call void @__pseudo_branch(i32 %v3_8098)
  ret i32 %v1_80a4
}

define i32 @function_80b0() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1c880.3 to i32), i32* %r5.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1c880.3 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_80c0 = load i32, i32* @r0, align 4
  ret i32 %v12_80c0

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1c724.6 to i32), i32* %r4.global-to-local, align 4
  %v2_80c8 = load i32, i32* bitcast (i32** @global_var_1c724.6 to i32*), align 4
  store i32 %v2_80c8, i32* %r2.global-to-local, align 4
  %v2_80d0 = icmp eq i32 %v2_80c8, 0
  br i1 %v2_80d0, label %bb8, label %dec_label_pc_80d8

dec_label_pc_80d8:                                ; preds = %bb7, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge
  %v1_80dc = phi i32 [ %v1_80dc.pre, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ ptrtoint (i32** @global_var_1c724.6 to i32), %bb7 ]
  %v0_80d8 = phi i32 [ %v2_80e8, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ %v2_80c8, %bb7 ]
  %v1_80d8 = add i32 %v0_80d8, 4
  %v2_80dc = inttoptr i32 %v1_80dc to i32*
  store i32 %v1_80d8, i32* %v2_80dc, align 4
  %v0_80e4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v2_80e8 = load i32, i32* bitcast (i32** @global_var_1c724.6 to i32*), align 4
  store i32 %v2_80e8, i32* %r2.global-to-local, align 4
  %v2_80f0 = icmp eq i32 %v2_80e8, 0
  br i1 %v2_80f0, label %.loopexit, label %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge

dec_label_pc_80d8.dec_label_pc_80d8_crit_edge:    ; preds = %dec_label_pc_80d8
  %v1_80dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_80d8

.loopexit:                                        ; preds = %dec_label_pc_80d8
  %v2_8110.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8110 = phi i32 [ %v2_8110.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1c880.3 to i32), %bb7 ]
  %v3_8110 = inttoptr i32 %v2_8110 to i8*
  store i8 1, i8* %v3_8110, align 1
  %v2_8114 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8114, i32* %r4.global-to-local, align 4
  %v11_8114 = load i32, i32* @r0, align 4
  ret i32 %v11_8114

; uselistorder directives
  uselistorder i32 %v2_80e8, { 1, 2, 0 }
  uselistorder i32** @global_var_1c724.6, { 1, 0 }
  uselistorder i8** @global_var_1c880.3, { 1, 0 }
  uselistorder label %dec_label_pc_80d8, { 1, 0 }
}

define i32 @function_8124(i32 %arg1) local_unnamed_addr {
dec_label_pc_8124:
  %v0_8124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8124, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_8124
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_8124, %bb
  %v5_812c = load i32, i32* @r0, align 4
  ret i32 %v5_812c

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_8130() local_unnamed_addr {
.thread:
  %v2_8150 = load i32, i32* inttoptr (i32 116504 to i32*), align 8
  %v2_8154 = icmp eq i32 %v2_8150, 0
  br i1 %v2_8154, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 116504

bb2:                                              ; preds = %.thread
  ret i32 116504

; uselistorder directives
  uselistorder i32 116504, { 1, 0, 2 }
}

define i32 @function_8188() local_unnamed_addr {
dec_label_pc_8188:
  %v5_818c = load i32, i32* @r0, align 4
  ret i32 %v5_818c
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8198 = ptrtoint i32* %stack_var_4 to i32
  %v8_81b8 = call i32 @function_13018(i32 ptrtoint (i32* @global_var_e12c.18 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 82368, i32 %arg1, i32 %v4_8198)
  %v0_81bc = call i32 @function_129e0()
  ret i32 %v0_81bc
}

define i32 @function_81cc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_81cc:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_81cc = urem i32 %arg1, 256
  %v2_81d0 = icmp eq i32 %v1_81cc, 0
  %v1_81d8 = urem i32 %arg3, 256
  br i1 %v2_81d0, label %dec_label_pc_821c, label %dec_label_pc_81e4

dec_label_pc_81e4:                                ; preds = %dec_label_pc_81cc
  %v0_81e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_81e4 = add i32 %v0_81e4, 4
  %v2_81e4 = inttoptr i32 %v1_81e4 to i8*
  %v3_81e4 = load i8, i8* %v2_81e4, align 1
  %v4_81e4 = zext i8 %v3_81e4 to i32
  %v9_81e8 = icmp eq i32 %v4_81e4, %v1_81d8
  br i1 %v9_81e8, label %dec_label_pc_8224, label %dec_label_pc_820c.preheader

dec_label_pc_820c.preheader:                      ; preds = %dec_label_pc_81e4
  br label %dec_label_pc_820c

dec_label_pc_81fc:                                ; preds = %dec_label_pc_820c
  %v1_81fc = add i32 %v0_8204.in, 12
  %v2_81fc = inttoptr i32 %v1_81fc to i8*
  %v3_81fc = load i8, i8* %v2_81fc, align 1
  %v4_81fc = zext i8 %v3_81fc to i32
  %v9_8200 = icmp eq i32 %v4_81fc, %v1_81d8
  br i1 %v9_8200, label %dec_label_pc_8224, label %dec_label_pc_820c

dec_label_pc_820c:                                ; preds = %dec_label_pc_820c.preheader, %dec_label_pc_81fc
  %v0_8204.in = phi i32 [ %v0_81e4, %dec_label_pc_820c.preheader ], [ %v0_8204, %dec_label_pc_81fc ]
  %v0_820c = phi i32 [ 0, %dec_label_pc_820c.preheader ], [ %v1_820c, %dec_label_pc_81fc ]
  %v0_8204 = add i32 %v0_8204.in, 8
  %v1_820c = add i32 %v0_820c, 1
  %v9_8210 = icmp eq i32 %v1_820c, %v1_81cc
  store i32 %v0_8204, i32* %r1.global-to-local, align 4
  br i1 %v9_8210, label %dec_label_pc_821c, label %dec_label_pc_81fc

dec_label_pc_821c:                                ; preds = %dec_label_pc_820c, %dec_label_pc_81cc
  ret i32 %arg4

dec_label_pc_8224:                                ; preds = %dec_label_pc_81fc, %dec_label_pc_81e4
  %v0_8224 = phi i32 [ %v0_81e4, %dec_label_pc_81e4 ], [ %v0_8204, %dec_label_pc_81fc ]
  %v1_8224 = inttoptr i32 %v0_8224 to i32*
  %v2_8224 = load i32, i32* %v1_8224, align 4
  ret i32 %v2_8224

; uselistorder directives
  uselistorder i32 %v1_820c, { 1, 0 }
  uselistorder i32 %v0_8204, { 1, 0, 2 }
  uselistorder i32 %v0_8204.in, { 1, 0 }
  uselistorder i32 %v0_81e4, { 1, 0, 2 }
  uselistorder i32 %v1_81d8, { 1, 0 }
  uselistorder i32 %v1_81cc, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_820c, { 1, 0 }
}

define i32 @function_8230(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_8230:
  store i32 %arg1, i32* @r6, align 4
  %v1_823c = urem i32 %arg2, 256
  store i32 %v1_823c, i32* @r7, align 4
  %v0_8248 = call i32 @function_1198c()
  %v7_824c = icmp eq i32 %v0_8248, -1
  %tmp23 = icmp slt i32 %v0_8248, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_8230
  br label %bb25

bb24:                                             ; preds = %dec_label_pc_8230
  %. = zext i1 %v7_824c to i32
  store i32 %., i32* @r5, align 4
  %v2_8264 = icmp eq i1 %v7_824c, false
  br i1 %v2_8264, label %bb26, label %bb25

bb25:                                             ; preds = %.thread2, %bb24
  ret i32 %v0_8248

bb26:                                             ; preds = %bb24
  %v0_826c = call i32 @function_1198c()
  %v7_8270 = icmp eq i32 %v0_826c, -1
  store i32 %v0_826c, i32* @r4, align 4
  br i1 %v7_8270, label %dec_label_pc_82a0, label %dec_label_pc_827c

dec_label_pc_827c:                                ; preds = %bb26
  %v2_827c = icmp eq i32 %v0_826c, 0
  br i1 %v2_827c, label %dec_label_pc_8284, label %dec_label_pc_82a8

dec_label_pc_8284:                                ; preds = %dec_label_pc_827c
  %v0_8284 = load i32, i32* @r6, align 4
  %v1_8288 = call i32 @function_12d68(i32 %v0_8284)
  %v0_828c = call i32 @function_119e4()
  %v2_8294 = call i32 @function_11a60(i32 %v0_828c, i32 9)
  %v0_8298 = load i32, i32* @r4, align 4
  %v1_829c = call i32 @function_12cd4(i32 %v0_8298)
  br label %dec_label_pc_82a0

dec_label_pc_82a0:                                ; preds = %bb26, %dec_label_pc_8284
  %v0_82a0 = load i32, i32* @r5, align 4
  %v1_82a4 = call i32 @function_12cd4(i32 %v0_82a0)
  br label %dec_label_pc_82a8

dec_label_pc_82a8:                                ; preds = %dec_label_pc_827c, %dec_label_pc_82a0
  %v2_82ac = load i8, i8* bitcast (i8** @global_var_1c89c.21 to i8*), align 4
  %v3_82ac = zext i8 %v2_82ac to i32
  %v2_82b0 = icmp eq i8 %v2_82ac, 0
  br i1 %v2_82b0, label %dec_label_pc_82f4, label %dec_label_pc_82b8

dec_label_pc_82b8:                                ; preds = %dec_label_pc_82a8
  %v2_82bc = load i32, i32* @global_var_1c8a0.23, align 4
  %v1_82c0 = inttoptr i32 %v2_82bc to i32*
  %v2_82c0 = load i32, i32* %v1_82c0, align 4
  store i32 %v2_82c0, i32* @ip, align 4
  %v1_82c4 = add i32 %v2_82c0, 4
  %v2_82c4 = inttoptr i32 %v1_82c4 to i8*
  %v3_82c4 = load i8, i8* %v2_82c4, align 1
  %v4_82c4 = zext i8 %v3_82c4 to i32
  %v1_82c8 = load i32, i32* @r7, align 4
  %v9_82c8 = icmp eq i32 %v4_82c4, %v1_82c8
  br i1 %v9_82c8, label %dec_label_pc_82fc, label %dec_label_pc_82e8.preheader

dec_label_pc_82e8.preheader:                      ; preds = %dec_label_pc_82b8
  %v1_82cc = load i32, i32* @r5, align 4
  br label %dec_label_pc_82e8

dec_label_pc_82d8:                                ; preds = %dec_label_pc_82e8
  %v4_82d8 = mul i32 %v1_82e8, 4
  %v5_82d8 = add i32 %v4_82d8, %v2_82bc
  %v6_82d8 = inttoptr i32 %v5_82d8 to i32*
  %v7_82d8 = load i32, i32* %v6_82d8, align 4
  store i32 %v7_82d8, i32* @ip, align 4
  %v1_82dc = add i32 %v7_82d8, 4
  %v2_82dc = inttoptr i32 %v1_82dc to i8*
  %v3_82dc = load i8, i8* %v2_82dc, align 1
  %v4_82dc = zext i8 %v3_82dc to i32
  %v9_82e0 = icmp eq i32 %v4_82dc, %v1_82c8
  br i1 %v9_82e0, label %dec_label_pc_82fc, label %dec_label_pc_82e8

dec_label_pc_82e8:                                ; preds = %dec_label_pc_82e8.preheader, %dec_label_pc_82d8
  %v0_82e8 = phi i32 [ %v1_82cc, %dec_label_pc_82e8.preheader ], [ %v1_82e8, %dec_label_pc_82d8 ]
  %v1_82e8 = add i32 %v0_82e8, 1
  %v9_82ec = icmp eq i32 %v1_82e8, %v3_82ac
  br i1 %v9_82ec, label %dec_label_pc_82f4, label %dec_label_pc_82d8

dec_label_pc_82f4:                                ; preds = %dec_label_pc_82e8, %dec_label_pc_82a8, %dec_label_pc_82fc
  %v1_82f8 = call i32 @function_12cd4(i32 0)
  %v0_8310.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_82fc

dec_label_pc_82fc:                                ; preds = %dec_label_pc_82d8, %dec_label_pc_82b8, %dec_label_pc_82f4
  %v0_8310 = phi i32 [ %v2_82c0, %dec_label_pc_82b8 ], [ %v0_8310.pre, %dec_label_pc_82f4 ], [ %v7_82d8, %dec_label_pc_82d8 ]
  %v1_8310 = inttoptr i32 %v0_8310 to i32*
  %v2_8310 = load i32, i32* %v1_8310, align 4
  call void @__pseudo_branch(i32 %v2_8310)
  br label %dec_label_pc_82f4

; uselistorder directives
  uselistorder i32 %v1_82e8, { 2, 0, 1 }
  uselistorder i32 %v0_826c, { 1, 2, 0 }
  uselistorder i1 %v7_824c, { 1, 0 }
  uselistorder i32 %v0_8248, { 1, 2, 0 }
  uselistorder label %dec_label_pc_82fc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82f4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82e8, { 1, 0 }
  uselistorder label %dec_label_pc_82a8, { 1, 0 }
  uselistorder label %dec_label_pc_82a0, { 1, 0 }
  uselistorder label %bb25, { 1, 0 }
}

define i32 @function_8320(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8320:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_8320 = load i32, i32* @r4, align 4
  %v6_8320 = load i32, i32* @r5, align 4
  %v9_8320 = load i32, i32* @r6, align 4
  %v12_8320 = load i32, i32* @r7, align 4
  %v15_8320 = load i32, i32* @r8, align 4
  %v18_8320 = load i32, i32* @sb, align 4
  %v21_8320 = load i32, i32* @sl, align 4
  %v27_8320 = load i32, i32* @lr, align 4
  %v7_8324 = icmp eq i32 %arg2, 3
  store i1 %v7_8324, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_8330 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8330, i32* @r4, align 4
  %tmp33 = icmp ult i32 %arg2, 4
  br i1 %tmp33, label %dec_label_pc_8344, label %dec_label_pc_8338

dec_label_pc_8338:                                ; preds = %dec_label_pc_8320
  %v7_8338 = icmp eq i32 %arg2, 4
  store i1 %v7_8338, i1* %cpsr_z.global-to-local, align 1
  %v1_833c = inttoptr i32 %v0_8330 to i32*
  %v2_833c = load i32, i32* %v1_833c, align 4
  store i32 %v2_833c, i32* @sl, align 4
  br i1 %v7_8338, label %dec_label_pc_8344, label %dec_label_pc_834c

dec_label_pc_8344:                                ; preds = %dec_label_pc_8368, %.dec_label_pc_8344_crit_edge, %dec_label_pc_8338, %dec_label_pc_835c, %dec_label_pc_834c, %dec_label_pc_8320
  %v29_8348 = phi i32 [ %v29_8348.pre, %.dec_label_pc_8344_crit_edge ], [ %v0_8330, %dec_label_pc_8368 ], [ %v0_8330, %dec_label_pc_8338 ], [ %v0_8330, %dec_label_pc_835c ], [ %v0_8330, %dec_label_pc_834c ], [ %v0_8330, %dec_label_pc_8320 ]
  store i32 %v9_8320, i32* @r6, align 4
  store i32 %v12_8320, i32* @r7, align 4
  store i32 %v18_8320, i32* @sb, align 4
  store i32 %v21_8320, i32* @sl, align 4
  ret i32 %v29_8348

dec_label_pc_834c:                                ; preds = %dec_label_pc_8338
  %v7_834c = icmp eq i32 %arg2, 5
  store i1 %v7_834c, i1* %cpsr_z.global-to-local, align 1
  %v1_8350 = add i32 %v0_8330, 4
  %v2_8350 = inttoptr i32 %v1_8350 to i8*
  %v3_8350 = load i8, i8* %v2_8350, align 1
  %v4_8350 = zext i8 %v3_8350 to i32
  store i32 %v4_8350, i32* %r1.global-to-local, align 4
  br i1 %v7_834c, label %dec_label_pc_8344, label %dec_label_pc_835c

dec_label_pc_835c:                                ; preds = %dec_label_pc_834c
  %v1_835c = add i32 %v0_8330, 5
  %v2_835c = inttoptr i32 %v1_835c to i8*
  %v3_835c = load i8, i8* %v2_835c, align 1
  %v4_835c = zext i8 %v3_835c to i32
  store i32 %v4_835c, i32* @r7, align 4
  %v2_8360 = icmp eq i8 %v3_835c, 0
  store i1 %v2_8360, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8360, label %dec_label_pc_8344, label %dec_label_pc_8368

dec_label_pc_8368:                                ; preds = %dec_label_pc_835c
  %v3_8368 = mul nuw nsw i32 %v4_835c, 4
  store i32 %v3_8368, i32* @sb, align 4
  %v1_836c = add i32 %arg2, -6
  store i32 %v1_836c, i32* @r6, align 4
  %v2_8370 = mul nuw nsw i32 %v4_835c, 5
  store i32 %v2_8370, i32* @r8, align 4
  %v3_8374 = icmp ult i32 %v1_836c, %v2_8370
  %v9_8374 = icmp eq i32 %v1_836c, %v2_8370
  store i1 %v9_8374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8374, label %dec_label_pc_8344, label %dec_label_pc_837c

dec_label_pc_837c:                                ; preds = %dec_label_pc_8368
  store i32 %v4_835c, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_8384 = call i32 @function_12538(i32 %v4_835c, i32 24)
  store i32 %v2_8384, i32* %r0.global-to-local, align 4
  %v0_8388 = load i32, i32* @r7, align 4
  %v2_8388 = icmp eq i32 %v0_8388, 0
  store i1 %v2_8388, i1* %cpsr_z.global-to-local, align 1
  %v0_8390 = load i32, i32* @r4, align 4
  %v1_8390 = add i32 %v0_8390, 6
  store i32 %v1_8390, i32* %fp.global-to-local, align 4
  %tmp27 = icmp slt i32 %v0_8388, 1
  br i1 %tmp27, label %dec_label_pc_83e8thread-pre-split, label %dec_label_pc_8398

dec_label_pc_8398:                                ; preds = %dec_label_pc_837c
  store i32 %v2_8384, i32* %r1.global-to-local, align 4
  %v1_839c = load i32, i32* @r8, align 4
  %v2_839c = add i32 %v1_839c, %v0_8390
  store i32 %v2_839c, i32* %ip.global-to-local, align 4
  store i32 %v0_8390, i32* %r0.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_83ac

dec_label_pc_83ac:                                ; preds = %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge, %dec_label_pc_8398
  %v2_83bc = phi i32 [ %v1_83d0, %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge ], [ %v2_8384, %dec_label_pc_8398 ]
  %v1_83b8 = phi i32 [ %v1_83b8.pre, %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge ], [ %v2_839c, %dec_label_pc_8398 ]
  %v0_83b4 = phi i32 [ %v0_83ac.pre, %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge ], [ %v0_8390, %dec_label_pc_8398 ]
  %v1_83ac = add i32 %v0_83b4, 10
  %v2_83ac = inttoptr i32 %v1_83ac to i8*
  %v3_83ac = load i8, i8* %v2_83ac, align 1
  %v1_83b0 = add i32 %v0_83b4, 6
  %v2_83b0 = inttoptr i32 %v1_83b0 to i32*
  %v3_83b0 = load i32, i32* %v2_83b0, align 4
  store i32 %v3_83b0, i32* %r2.global-to-local, align 4
  %v1_83b4 = add i32 %v0_83b4, 5
  store i32 %v1_83b4, i32* %r0.global-to-local, align 4
  %v9_83b8 = icmp eq i32 %v1_83b4, %v1_83b8
  store i1 %v9_83b8, i1* %cpsr_z.global-to-local, align 1
  %v3_83bc = add i32 %v2_83bc, 20
  %v4_83bc = inttoptr i32 %v3_83bc to i8*
  store i8 %v3_83ac, i8* %v4_83bc, align 1
  %v0_83c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_83c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_83c0 = add i32 %v1_83c0, 4
  %v3_83c0 = inttoptr i32 %v2_83c0 to i32*
  store i32 %v0_83c0, i32* %v3_83c0, align 4
  %v0_83c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_83c4 = load i32, i32* %r1.global-to-local, align 4
  %v2_83c4 = add i32 %v1_83c4, 16
  %v3_83c4 = inttoptr i32 %v2_83c4 to i32*
  store i32 %v0_83c4, i32* %v3_83c4, align 4
  %v0_83c8 = load i32, i32* @r4, align 4
  %v1_83c8 = trunc i32 %v0_83c8 to i8
  %v2_83c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_83c8 = inttoptr i32 %v2_83c8 to i8*
  store i8 %v1_83c8, i8* %v3_83c8, align 1
  %v0_83cc = load i32, i32* @lr, align 4
  %v1_83cc = trunc i32 %v0_83cc to i8
  %v2_83cc = load i32, i32* %r1.global-to-local, align 4
  %v3_83cc = add i32 %v2_83cc, 1
  %v4_83cc = inttoptr i32 %v3_83cc to i8*
  store i8 %v1_83cc, i8* %v4_83cc, align 1
  %v0_83d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_83d0 = add i32 %v0_83d0, 24
  store i32 %v1_83d0, i32* %r1.global-to-local, align 4
  %v0_83d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83d4, label %dec_label_pc_83d8, label %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge

dec_label_pc_83ac.dec_label_pc_83ac_crit_edge:    ; preds = %dec_label_pc_83ac
  %v0_83ac.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_83b8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_83ac

dec_label_pc_83d8:                                ; preds = %dec_label_pc_83ac
  %v0_83d8 = load i32, i32* @sb, align 4
  %v1_83d8 = load i32, i32* @r7, align 4
  %v1_83dc = load i32, i32* @r5, align 4
  %sum = add i32 %v1_83d8, %v0_83d8
  %v2_83dc = sub i32 %v1_83dc, %sum
  %v0_83e0 = load i32, i32* %r0.global-to-local, align 4
  %v1_83e0 = add i32 %v0_83e0, 6
  store i32 %v1_83e0, i32* %fp.global-to-local, align 4
  %v1_83e4 = add i32 %v2_83dc, -6
  store i32 %v1_83e4, i32* @r6, align 4
  br label %dec_label_pc_83e8

dec_label_pc_83e8thread-pre-split:                ; preds = %dec_label_pc_837c
  %v0_83e8.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_83e8

dec_label_pc_83e8:                                ; preds = %dec_label_pc_83e8thread-pre-split, %dec_label_pc_83d8
  %v0_83f4 = phi i32 [ %v1_8390, %dec_label_pc_83e8thread-pre-split ], [ %v1_83e0, %dec_label_pc_83d8 ]
  %v1_83ec = phi i32 [ %v0_83e8.pr, %dec_label_pc_83e8thread-pre-split ], [ %v1_83e4, %dec_label_pc_83d8 ]
  %v2_83e8 = icmp eq i32 %v1_83ec, 0
  store i1 %v2_83e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83e8, label %dec_label_pc_8520, label %dec_label_pc_83f4

dec_label_pc_83f4:                                ; preds = %dec_label_pc_83e8
  %v1_83f4 = inttoptr i32 %v0_83f4 to i8*
  %v2_83f4 = load i8, i8* %v1_83f4, align 1
  %v3_83f4 = zext i8 %v2_83f4 to i32
  store i32 %v3_83f4, i32* @sb, align 4
  %v2_83f8 = icmp eq i8 %v2_83f4, 0
  store i1 %v2_83f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83f8, label %dec_label_pc_84d8, label %dec_label_pc_8408

dec_label_pc_8408:                                ; preds = %dec_label_pc_83f4
  store i32 %v3_83f4, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_8410 = call i32 @function_12538(i32 %v3_83f4, i32 8)
  store i32 %v2_8410, i32* %r0.global-to-local, align 4
  %v0_8414 = load i32, i32* @sb, align 4
  %v2_8414 = icmp eq i32 %v0_8414, 0
  store i1 %v2_8414, i1* %cpsr_z.global-to-local, align 1
  %tmp28 = icmp slt i32 %v0_8414, 1
  br i1 %tmp28, label %dec_label_pc_84d8, label %dec_label_pc_8424

dec_label_pc_8424:                                ; preds = %dec_label_pc_8408
  %v0_8424 = load i32, i32* @r6, align 4
  %v1_8424 = add i32 %v0_8424, -1
  store i32 %v1_8424, i32* %r2.global-to-local, align 4
  %v7_8424 = icmp eq i32 %v0_8424, 1
  store i1 %v7_8424, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8424, label %dec_label_pc_8520, label %dec_label_pc_842c

dec_label_pc_842c:                                ; preds = %dec_label_pc_8424
  %v0_842c = load i32, i32* %fp.global-to-local, align 4
  %v1_842c = add i32 %v0_842c, 1
  %v2_842c = inttoptr i32 %v1_842c to i8*
  %v3_842c = load i8, i8* %v2_842c, align 1
  %v1_8430 = add i32 %v0_8424, -2
  store i32 %v1_8430, i32* %r2.global-to-local, align 4
  %v7_8430 = icmp eq i32 %v1_8424, 1
  store i1 %v7_8430, i1* %cpsr_z.global-to-local, align 1
  %v3_8434 = add i32 %v2_8410, 4
  %v4_8434 = inttoptr i32 %v3_8434 to i8*
  store i8 %v3_842c, i8* %v4_8434, align 1
  %v0_8438 = load i32, i32* %fp.global-to-local, align 4
  %v1_8438 = add i32 %v0_8438, 1
  store i32 %v1_8438, i32* %r0.global-to-local, align 4
  %v0_843c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_843c, label %dec_label_pc_8520, label %dec_label_pc_8440

dec_label_pc_8440:                                ; preds = %dec_label_pc_842c
  %v1_8440 = add i32 %v0_8438, 2
  %v2_8440 = inttoptr i32 %v1_8440 to i8*
  %v3_8440 = load i8, i8* %v2_8440, align 1
  %v4_8440 = zext i8 %v3_8440 to i32
  store i32 %v4_8440, i32* @r4, align 4
  %v0_8444 = load i32, i32* %r2.global-to-local, align 4
  %v1_8444 = add i32 %v0_8444, -1
  store i32 %v1_8444, i32* @r8, align 4
  %v9_8448 = icmp eq i32 %v1_8444, %v4_8440
  store i1 %v9_8448, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8440, i32* %r0.global-to-local, align 4
  %v5_8450 = icmp slt i32 %v1_8444, %v4_8440
  br i1 %v5_8450, label %dec_label_pc_8520, label %dec_label_pc_8454

dec_label_pc_8454:                                ; preds = %dec_label_pc_8440
  store i32 %v2_8410, i32* @r5, align 4
  %v1_845c = add i32 %v2_8410, 8
  %v1_8460 = add i32 %v0_8438, 3
  store i32 %v1_8460, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_84a4

dec_label_pc_8470:                                ; preds = %dec_label_pc_84a4
  %v0_8470 = load i32, i32* @r8, align 4
  %v1_8470 = load i32, i32* @r4, align 4
  %v2_8470 = sub i32 %v0_8470, %v1_8470
  store i32 %v2_8470, i32* %r2.global-to-local, align 4
  %v9_8470 = icmp eq i32 %v0_8470, %v1_8470
  store i1 %v9_8470, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8470, label %dec_label_pc_8520, label %dec_label_pc_8478

dec_label_pc_8478:                                ; preds = %dec_label_pc_8470
  %v1_8478 = load i32, i32* @r6, align 4
  %v2_8478 = add i32 %v1_8478, %v1_8470
  %v3_8478 = inttoptr i32 %v2_8478 to i8*
  %v4_8478 = load i8, i8* %v3_8478, align 1
  store i32 %v2_8478, i32* %r0.global-to-local, align 4
  %v1_8480 = add i32 %v2_8470, -1
  store i32 %v1_8480, i32* %r2.global-to-local, align 4
  %v7_8480 = icmp eq i32 %v2_8470, 1
  store i1 %v7_8480, i1* %cpsr_z.global-to-local, align 1
  %v3_8484 = add i32 %v2_8484, 4
  %v4_8484 = inttoptr i32 %v3_8484 to i8*
  store i8 %v4_8478, i8* %v4_8484, align 1
  %v0_8488 = load i32, i32* %r0.global-to-local, align 4
  %v0_848c = load i32, i32* %r2.global-to-local, align 4
  %v1_848c = add i32 %v0_848c, -1
  store i32 %v1_848c, i32* @r8, align 4
  %v1_8490 = add i32 %v0_8488, 2
  store i32 %v1_8490, i32* @r6, align 4
  %v0_8494 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8494, label %dec_label_pc_8520, label %dec_label_pc_8498

dec_label_pc_8498:                                ; preds = %dec_label_pc_8478
  %v1_8488 = add i32 %v0_8488, 1
  %v2_8498 = inttoptr i32 %v1_8488 to i8*
  %v3_8498 = load i8, i8* %v2_8498, align 1
  %v4_8498 = zext i8 %v3_8498 to i32
  store i32 %v4_8498, i32* @r4, align 4
  %v2_849c = sub i32 %v1_848c, %v4_8498
  %tmp30 = sub i32 0, %v2_849c
  %v6_849c = and i32 %v1_848c, %tmp30
  %v7_849c = icmp slt i32 %v6_849c, 0
  %v8_849c = icmp slt i32 %v2_849c, 0
  %v9_849c = icmp eq i32 %v1_848c, %v4_8498
  store i1 %v9_849c, i1* %cpsr_z.global-to-local, align 1
  %v2_84a0 = xor i1 %v8_849c, %v7_849c
  br i1 %v2_84a0, label %dec_label_pc_8520, label %dec_label_pc_84a4

dec_label_pc_84a4:                                ; preds = %dec_label_pc_8498, %dec_label_pc_8454
  %v0_84a8 = phi i32 [ %v4_8440, %dec_label_pc_8454 ], [ %v4_8498, %dec_label_pc_8498 ]
  %v2_8484 = phi i32 [ %v1_845c, %dec_label_pc_8454 ], [ %v1_84c8, %dec_label_pc_8498 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_84a8 = add nuw nsw i32 %v0_84a8, 1
  store i32 %v1_84a8, i32* %r0.global-to-local, align 4
  %v2_84ac = call i32 @function_12538(i32 %v1_84a8, i32 1)
  store i32 %v2_84ac, i32* %r0.global-to-local, align 4
  %v0_84b0 = load i32, i32* @r6, align 4
  store i32 %v0_84b0, i32* %r1.global-to-local, align 4
  %v1_84b4 = load i32, i32* @r5, align 4
  %v2_84b4 = inttoptr i32 %v1_84b4 to i32*
  store i32 %v2_84ac, i32* %v2_84b4, align 4
  %v0_84b8 = load i32, i32* @r4, align 4
  store i32 %v0_84b8, i32* %r2.global-to-local, align 4
  %v3_84bc = call i32 @function_1115c(i32 %v2_84ac, i32 %v0_84b0, i32 %v0_84b8)
  store i32 %v3_84bc, i32* %r0.global-to-local, align 4
  store i32 %v2_8484, i32* @r5, align 4
  %v0_84c4 = load i32, i32* %fp.global-to-local, align 4
  %v1_84c4 = add i32 %v0_84c4, 1
  store i32 %v1_84c4, i32* %fp.global-to-local, align 4
  %v1_84c8 = add i32 %v2_8484, 8
  store i32 %v1_84c8, i32* %ip.global-to-local, align 4
  %v1_84cc = load i32, i32* @sb, align 4
  %v9_84cc = icmp eq i32 %v1_84c4, %v1_84cc
  store i1 %v9_84cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_84cc, label %dec_label_pc_84d8, label %dec_label_pc_8470

dec_label_pc_84d8:                                ; preds = %dec_label_pc_84a4, %dec_label_pc_8408, %dec_label_pc_83f4
  %stack_var_-48.1 = phi i32 [ %v3_83f4, %dec_label_pc_83f4 ], [ %v0_8414, %dec_label_pc_8408 ], [ %v0_8414, %dec_label_pc_84a4 ]
  %stack_var_-52.2 = phi i32 [ %v3_83f4, %dec_label_pc_83f4 ], [ %v2_8410, %dec_label_pc_8408 ], [ %v2_8410, %dec_label_pc_84a4 ]
  %v0_84d8 = call i32 @function_11f08()
  %v0_84dc = load i32, i32* @sl, align 4
  store i32 %stack_var_-48.1, i32* %ip.global-to-local, align 4
  %v3_84e8 = mul i32 %v0_84dc, 16777216
  %v1_84dc = mul i32 %v0_84dc, 256
  %v4_84ec = and i32 %v1_84dc, 16711680
  %v5_84ec = or i32 %v4_84ec, %v3_84e8
  store i32 %v5_84ec, i32* %r1.global-to-local, align 4
  %v1_84e4 = udiv i32 %v0_84dc, 256
  %v3_84f0 = and i32 %v1_84e4, 65280
  store i32 %v3_84f0, i32* %r2.global-to-local, align 4
  %v2_84f8 = inttoptr i32 %v0_84d8 to i32*
  store i32 0, i32* %v2_84f8, align 4
  %v0_84fc = load i32, i32* %r2.global-to-local, align 4
  %v1_84fc = load i32, i32* @sl, align 4
  %v4_84fc = udiv i32 %v1_84fc, 16777216
  %v5_84fc = or i32 %v4_84fc, %v0_84fc
  %v0_8500 = load i32, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-52.2, i32* @ip, align 4
  %v1_8508 = load i32, i32* %r1.global-to-local, align 4
  %v2_8508 = or i32 %v5_84fc, %v1_8508
  store i32 %v2_8508, i32* %r0.global-to-local, align 4
  store i32 %v4_8350, i32* %r1.global-to-local, align 4
  %v0_8514 = load i32, i32* @r7, align 4
  store i32 %v0_8514, i32* %r2.global-to-local, align 4
  %v6_851c = trunc i32 %v0_8500 to i8
  %v7_851c = call i32 @function_8230(i32 %v2_8508, i32 %v4_8350, i32 %v0_8514, i32 %v2_8384, i8 %v6_851c, i32 %stack_var_-52.2)
  store i32 %v7_851c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8520

dec_label_pc_8520:                                ; preds = %dec_label_pc_8498, %dec_label_pc_8478, %dec_label_pc_8470, %dec_label_pc_8440, %dec_label_pc_842c, %dec_label_pc_8424, %dec_label_pc_83e8, %dec_label_pc_84d8
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_83e8 ], [ %stack_var_-52.2, %dec_label_pc_84d8 ], [ %v2_8410, %dec_label_pc_8424 ], [ %v2_8410, %dec_label_pc_842c ], [ %v2_8410, %dec_label_pc_8440 ], [ %v2_8410, %dec_label_pc_8470 ], [ %v2_8410, %dec_label_pc_8478 ], [ %v2_8410, %dec_label_pc_8498 ]
  store i32 %v2_8384, i32* %r1.global-to-local, align 4
  %v2_8524 = icmp eq i32 %v2_8384, 0
  store i1 %v2_8524, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8524, label %bb31, label %bb

bb:                                               ; preds = %dec_label_pc_8520
  store i32 %v2_8384, i32* %r0.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_8520, %bb
  %v1_852c = xor i1 %v2_8524, true
  call void @__pseudo_cond_branch(i1 %v1_852c, i32 ptrtoint (i32* @global_var_12590.25 to i32))
  %v2_8534 = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_8534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8534, label %.dec_label_pc_8344_crit_edge, label %dec_label_pc_853c

.dec_label_pc_8344_crit_edge:                     ; preds = %bb31
  %v29_8348.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8344

dec_label_pc_853c:                                ; preds = %bb31
  %v0_853c = load i32, i32* @sb, align 4
  %v2_853c = icmp eq i32 %v0_853c, 0
  store i1 %v2_853c, i1* %cpsr_z.global-to-local, align 1
  %tmp32 = icmp slt i32 %v0_853c, 1
  br i1 %tmp32, label %dec_label_pc_8564, label %dec_label_pc_8544

dec_label_pc_8544:                                ; preds = %dec_label_pc_853c
  br label %dec_label_pc_8548

dec_label_pc_8548:                                ; preds = %dec_label_pc_8548, %dec_label_pc_8544
  %v0_8554 = phi i32 [ %v1_8554, %dec_label_pc_8548 ], [ 0, %dec_label_pc_8544 ]
  store i32 %stack_var_-52.3, i32* %ip.global-to-local, align 4
  %v4_854c = mul i32 %v0_8554, 8
  %v5_854c = add i32 %v4_854c, %stack_var_-52.3
  %v6_854c = inttoptr i32 %v5_854c to i32*
  %v7_854c = load i32, i32* %v6_854c, align 4
  store i32 %v7_854c, i32* %r0.global-to-local, align 4
  %v2_8550 = icmp eq i32 %v7_854c, 0
  store i1 %v2_8550, i1* %cpsr_z.global-to-local, align 1
  %v1_8554 = add i32 %v0_8554, 1
  %v1_8558 = xor i1 %v2_8550, true
  call void @__pseudo_cond_branch(i1 %v1_8558, i32 ptrtoint (i32* @global_var_12590.25 to i32))
  %v0_855c = load i32, i32* @sb, align 4
  %v9_855c = icmp eq i32 %v0_855c, %v1_8554
  store i1 %v9_855c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_855c, label %dec_label_pc_8564, label %dec_label_pc_8548

dec_label_pc_8564:                                ; preds = %dec_label_pc_8548, %dec_label_pc_853c
  store i32 %stack_var_-52.3, i32* @r0, align 4
  store i32 %v3_8320, i32* @r4, align 4
  store i32 %v6_8320, i32* @r5, align 4
  store i32 %v9_8320, i32* @r6, align 4
  store i32 %v12_8320, i32* @r7, align 4
  store i32 %v15_8320, i32* @r8, align 4
  store i32 %v18_8320, i32* @sb, align 4
  store i32 %v21_8320, i32* @sl, align 4
  store i32 %v27_8320, i32* @lr, align 4
  %v0_8570 = call i32 @function_12590()
  store i32 %v0_8570, i32* %r0.global-to-local, align 4
  ret i32 %v0_8570

; uselistorder directives
  uselistorder i32 %stack_var_-52.3, { 2, 0, 1, 3 }
  uselistorder i32 %v0_84dc, { 2, 0, 1 }
  uselistorder i32 %stack_var_-52.2, { 1, 0, 2 }
  uselistorder i32 %v1_84c8, { 1, 0 }
  uselistorder i32 %v2_8484, { 2, 1, 0 }
  uselistorder i32 %v2_849c, { 1, 0 }
  uselistorder i32 %v4_8498, { 0, 2, 1, 3 }
  uselistorder i32 %v1_848c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_8488, { 1, 0 }
  uselistorder i32 %v0_8424, { 0, 2, 1 }
  uselistorder i32 %v0_8414, { 0, 2, 1, 3 }
  uselistorder i32 %v2_8410, { 0, 1, 2, 8, 7, 6, 3, 5, 9, 10, 4, 11 }
  uselistorder i32 %v3_83f4, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v1_83d0, { 1, 0 }
  uselistorder i32 %v0_83b4, { 0, 2, 1 }
  uselistorder i32 %v0_8390, { 1, 2, 0, 3 }
  uselistorder i32 %v2_8384, { 0, 3, 4, 5, 1, 2, 6 }
  uselistorder i32 %v2_8370, { 2, 1, 0 }
  uselistorder i32 %v4_835c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v4_8350, { 1, 0, 2 }
  uselistorder i32 %v0_8330, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 6, 3, 4, 5, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 21, 4, 22, 5, 8, 12, 9, 6, 7, 10, 11, 18, 13, 15, 14, 16, 17, 20, 19, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 4, 5, 3, 6 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg2, { 1, 4, 2, 0, 3, 5, 6 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_8520, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_8344, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_8574(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8574:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_8574 = urem i32 %arg1, 256
  %v2_8578 = icmp eq i32 %v1_8574, 0
  %v3_857c = load i32, i32* @r4, align 4
  br i1 %v2_8578, label %dec_label_pc_85c4, label %dec_label_pc_8588

dec_label_pc_8588:                                ; preds = %dec_label_pc_8574
  %v0_8588 = load i32, i32* %r1.global-to-local, align 4
  %v1_8588 = add i32 %v0_8588, 4
  %v2_8588 = inttoptr i32 %v1_8588 to i8*
  %v3_8588 = load i8, i8* %v2_8588, align 1
  %v4_8588 = zext i8 %v3_8588 to i32
  %v1_858c = urem i32 %arg3, 256
  %v9_8590 = icmp eq i32 %v4_8588, %v1_858c
  br i1 %v9_8590, label %dec_label_pc_85cc, label %dec_label_pc_85b4.preheader

dec_label_pc_85b4.preheader:                      ; preds = %dec_label_pc_8588
  br label %dec_label_pc_85b4

dec_label_pc_85a4:                                ; preds = %dec_label_pc_85b4
  %v1_85a4 = add i32 %v0_85ac.in, 12
  %v2_85a4 = inttoptr i32 %v1_85a4 to i8*
  %v3_85a4 = load i8, i8* %v2_85a4, align 1
  %v4_85a4 = zext i8 %v3_85a4 to i32
  %v9_85a8 = icmp eq i32 %v1_858c, %v4_85a4
  br i1 %v9_85a8, label %dec_label_pc_85cc, label %dec_label_pc_85b4

dec_label_pc_85b4:                                ; preds = %dec_label_pc_85b4.preheader, %dec_label_pc_85a4
  %v0_85ac.in = phi i32 [ %v0_8588, %dec_label_pc_85b4.preheader ], [ %v0_85ac, %dec_label_pc_85a4 ]
  %v0_85b4 = phi i32 [ 0, %dec_label_pc_85b4.preheader ], [ %v1_85b4, %dec_label_pc_85a4 ]
  %v0_85ac = add i32 %v0_85ac.in, 8
  %v1_85b4 = add i32 %v0_85b4, 1
  %v9_85b8 = icmp eq i32 %v1_8574, %v1_85b4
  store i32 %v0_85ac, i32* %r1.global-to-local, align 4
  br i1 %v9_85b8, label %dec_label_pc_85c4, label %dec_label_pc_85a4

dec_label_pc_85c4:                                ; preds = %dec_label_pc_85b4, %dec_label_pc_85cc, %dec_label_pc_8574
  store i32 %v3_857c, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_85cc:                                ; preds = %dec_label_pc_85a4, %dec_label_pc_8588
  %v0_85cc = phi i32 [ %v0_8588, %dec_label_pc_8588 ], [ %v0_85ac, %dec_label_pc_85a4 ]
  %v1_85cc = inttoptr i32 %v0_85cc to i32*
  %v2_85cc = load i32, i32* %v1_85cc, align 4
  store i32 %v2_85cc, i32* @r0, align 4
  %v2_85d0 = icmp eq i32 %v2_85cc, 0
  br i1 %v2_85d0, label %dec_label_pc_85c4, label %dec_label_pc_85d8

dec_label_pc_85d8:                                ; preds = %dec_label_pc_85cc
  store i32 %v3_857c, i32* @r4, align 4
  %v1_85dc = call i32 @function_1202c(i32 %v2_85cc)
  ret i32 %v1_85dc

; uselistorder directives
  uselistorder i32 %v1_85b4, { 1, 0 }
  uselistorder i32 %v0_85ac, { 1, 0, 2 }
  uselistorder i32 %v0_85ac.in, { 1, 0 }
  uselistorder i32 %v1_858c, { 1, 0 }
  uselistorder i32 %v0_8588, { 1, 0, 2 }
  uselistorder i32 %v3_857c, { 1, 0 }
  uselistorder i32 %v1_8574, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_85c4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_85b4, { 1, 0 }
}

define i32 @function_85e0(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_85e0:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_85e0 = urem i32 %arg1, 256
  %v2_85e4 = icmp eq i32 %v1_85e0, 0
  %v3_85e8 = load i32, i32* @r4, align 4
  %v6_85e8 = load i32, i32* @lr, align 4
  br i1 %v2_85e4, label %dec_label_pc_8630, label %dec_label_pc_85f4

dec_label_pc_85f4:                                ; preds = %dec_label_pc_85e0
  %v0_85f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_85f4 = add i32 %v0_85f4, 4
  %v2_85f4 = inttoptr i32 %v1_85f4 to i8*
  %v3_85f4 = load i8, i8* %v2_85f4, align 1
  %v4_85f4 = zext i8 %v3_85f4 to i32
  %v1_85f8 = urem i32 %arg3, 256
  %v9_85fc = icmp eq i32 %v4_85f4, %v1_85f8
  br i1 %v9_85fc, label %dec_label_pc_8638, label %dec_label_pc_8620.preheader

dec_label_pc_8620.preheader:                      ; preds = %dec_label_pc_85f4
  br label %dec_label_pc_8620

dec_label_pc_8610:                                ; preds = %dec_label_pc_8620
  %v1_8610 = add i32 %v0_8618.in, 12
  %v2_8610 = inttoptr i32 %v1_8610 to i8*
  %v3_8610 = load i8, i8* %v2_8610, align 1
  %v4_8610 = zext i8 %v3_8610 to i32
  %v9_8614 = icmp eq i32 %v1_85f8, %v4_8610
  br i1 %v9_8614, label %dec_label_pc_8638, label %dec_label_pc_8620

dec_label_pc_8620:                                ; preds = %dec_label_pc_8620.preheader, %dec_label_pc_8610
  %v0_8618.in = phi i32 [ %v0_85f4, %dec_label_pc_8620.preheader ], [ %v0_8618, %dec_label_pc_8610 ]
  %v0_8620 = phi i32 [ 0, %dec_label_pc_8620.preheader ], [ %v1_8620, %dec_label_pc_8610 ]
  %v0_8618 = add i32 %v0_8618.in, 8
  %v1_8620 = add i32 %v0_8620, 1
  store i32 %v1_8620, i32* @lr, align 4
  %v9_8624 = icmp eq i32 %v1_85e0, %v1_8620
  store i32 %v0_8618, i32* %r1.global-to-local, align 4
  br i1 %v9_8624, label %dec_label_pc_8630, label %dec_label_pc_8610

dec_label_pc_8630:                                ; preds = %dec_label_pc_8620, %dec_label_pc_8638, %dec_label_pc_85e0
  store i32 %v3_85e8, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_8638:                                ; preds = %dec_label_pc_8610, %dec_label_pc_85f4
  %v0_8638 = phi i32 [ %v0_85f4, %dec_label_pc_85f4 ], [ %v0_8618, %dec_label_pc_8610 ]
  %v1_8638 = inttoptr i32 %v0_8638 to i32*
  %v2_8638 = load i32, i32* %v1_8638, align 4
  %v2_863c = icmp eq i32 %v2_8638, 0
  br i1 %v2_863c, label %dec_label_pc_8630, label %dec_label_pc_8644

dec_label_pc_8644:                                ; preds = %dec_label_pc_8638
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_85e8, i32* @r4, align 4
  store i32 %v6_85e8, i32* @lr, align 4
  %v2_864c = inttoptr i32 %v2_8638 to i8*
  %v3_864c = call i32 @function_1120c(i8* %v2_864c, i32 10)
  ret i32 %v3_864c

; uselistorder directives
  uselistorder i32 %v1_8620, { 1, 2, 0 }
  uselistorder i32 %v0_8618, { 1, 0, 2 }
  uselistorder i32 %v0_8618.in, { 1, 0 }
  uselistorder i32 %v1_85f8, { 1, 0 }
  uselistorder i32 %v0_85f4, { 1, 0, 2 }
  uselistorder i32 %v3_85e8, { 1, 0 }
  uselistorder i32 %v1_85e0, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_8630, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8620, { 1, 0 }
}

define i32 @function_8650(i32 %arg1) local_unnamed_addr {
dec_label_pc_8650:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_8650 = load i32, i32* @r4, align 4
  store i32 %v3_8650, i32* %stack_var_-24, align 4
  %v6_8650 = load i32, i32* @r5, align 4
  %v9_8650 = load i32, i32* @r6, align 4
  %v12_8650 = load i32, i32* @r7, align 4
  %v15_8650 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_865c = call i32 @function_12538(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1c89c.21 to i32), i32* @r4, align 4
  %v2_8664 = load i8, i8* bitcast (i8** @global_var_1c89c.21 to i8*), align 4
  %v3_8664 = zext i8 %v2_8664 to i32
  store i32 ptrtoint (i32* @global_var_1c8a0.23 to i32), i32* @r6, align 4
  store i32 48568, i32* %r2.global-to-local, align 4
  store i32 %v2_865c, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_8678 = mul nuw nsw i32 %v3_8664, 4
  store i32 %v3_8678, i32* %r1.global-to-local, align 4
  %v2_867c = load i32, i32* @global_var_1c8a0.23, align 4
  %v2_8680 = inttoptr i32 %v2_865c to i32*
  store i32 48568, i32* %v2_8680, align 4
  %v3_8684 = load i32, i32* @r5, align 4
  %v4_8684 = add i32 %v3_8684, 4
  %v5_8684 = inttoptr i32 %v4_8684 to i8*
  store i8 0, i8* %v5_8684, align 1
  %v0_8688 = load i32, i32* %r1.global-to-local, align 4
  %v1_8688 = add i32 %v0_8688, 4
  store i32 %v1_8688, i32* %r1.global-to-local, align 4
  %v5_868c = call i32 @function_12680(i32 %v2_867c, i32 %v1_8688, i32 48568, i32 0)
  %v2_8690 = load i8, i8* bitcast (i8** @global_var_1c89c.21 to i8*), align 4
  %v3_8690 = zext i8 %v2_8690 to i32
  store i32 %v3_8690, i32* %r3.global-to-local, align 4
  store i32 %v5_868c, i32* %ip.global-to-local, align 4
  %v0_8698 = load i32, i32* @r5, align 4
  %v5_8698 = mul nuw nsw i32 %v3_8690, 4
  %v6_8698 = add i32 %v5_8698, %v5_868c
  %v7_8698 = inttoptr i32 %v6_8698 to i32*
  store i32 %v0_8698, i32* %v7_8698, align 4
  store i32 ptrtoint (i8* @global_var_1c89d.29 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v3_86a8 = load i32, i32* @r4, align 4
  %v4_86a8 = inttoptr i32 %v3_86a8 to i8*
  store i8 ptrtoint (i8* @global_var_1c89d.29 to i8), i8* %v4_86a8, align 1
  %v0_86ac = load i32, i32* %ip.global-to-local, align 4
  %v1_86ac = load i32, i32* @r6, align 4
  %v2_86ac = inttoptr i32 %v1_86ac to i32*
  store i32 %v0_86ac, i32* %v2_86ac, align 4
  %v2_86b0 = call i32 @function_12538(i32 1, i32 8)
  %v2_86b4 = load i8, i8* bitcast (i8** @global_var_1c89c.21 to i8*), align 4
  %v3_86b4 = zext i8 %v2_86b4 to i32
  store i32 ptrtoint (i32* @global_var_c444.31 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r8, align 4
  store i32 %v2_86b0, i32* @r5, align 4
  %v3_86c4 = mul nuw nsw i32 %v3_86b4, 4
  store i32 %v3_86c4, i32* %r1.global-to-local, align 4
  %v2_86c8 = load i32, i32* @global_var_1c8a0.23, align 4
  %v2_86cc = inttoptr i32 %v2_86b0 to i32*
  store i32 ptrtoint (i32* @global_var_c444.31 to i32), i32* %v2_86cc, align 4
  %v0_86d0 = load i32, i32* @r8, align 4
  %v1_86d0 = trunc i32 %v0_86d0 to i8
  %v2_86d0 = load i32, i32* @r5, align 4
  %v3_86d0 = add i32 %v2_86d0, 4
  %v4_86d0 = inttoptr i32 %v3_86d0 to i8*
  store i8 %v1_86d0, i8* %v4_86d0, align 1
  %v0_86d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_86d4 = add i32 %v0_86d4, 4
  store i32 %v1_86d4, i32* %r1.global-to-local, align 4
  %v5_86d8 = call i32 @function_12680(i32 %v2_86c8, i32 %v1_86d4, i32 sext (i8 ptrtoint (i8* @global_var_1c89d.29 to i8) to i32), i32 ptrtoint (i32* @global_var_c444.31 to i32))
  %v2_86dc = load i8, i8* bitcast (i8** @global_var_1c89c.21 to i8*), align 4
  %v3_86dc = zext i8 %v2_86dc to i32
  store i32 %v3_86dc, i32* %r3.global-to-local, align 4
  store i32 %v5_86d8, i32* %ip.global-to-local, align 4
  %v0_86e4 = load i32, i32* @r5, align 4
  %v5_86e4 = mul nuw nsw i32 %v3_86dc, 4
  %v6_86e4 = add i32 %v5_86e4, %v5_86d8
  %v7_86e4 = inttoptr i32 %v6_86e4 to i32*
  store i32 %v0_86e4, i32* %v7_86e4, align 4
  %v0_86e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_86e8 = load i32, i32* @r8, align 4
  %v2_86e8 = add i32 %v1_86e8, %v0_86e8
  store i32 %v2_86e8, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_86f4 = load i32, i32* %ip.global-to-local, align 4
  %v1_86f4 = load i32, i32* @r6, align 4
  %v2_86f4 = inttoptr i32 %v1_86f4 to i32*
  store i32 %v0_86f4, i32* %v2_86f4, align 4
  %v0_86f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_86f8 = trunc i32 %v0_86f8 to i8
  %v2_86f8 = load i32, i32* @r4, align 4
  %v3_86f8 = inttoptr i32 %v2_86f8 to i8*
  store i8 %v1_86f8, i8* %v3_86f8, align 1
  %v2_86fc = call i32 @function_12538(i32 %v1_86e8, i32 8)
  %v2_8700 = load i8, i8* bitcast (i8** @global_var_1c89c.21 to i8*), align 4
  %v3_8700 = zext i8 %v2_8700 to i32
  store i32 ptrtoint (i32* @global_var_c908.33 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_86fc, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_8710 = mul nuw nsw i32 %v3_8700, 4
  store i32 %v3_8710, i32* %r1.global-to-local, align 4
  %v2_8714 = load i32, i32* @global_var_1c8a0.23, align 4
  %v2_8718 = inttoptr i32 %v2_86fc to i32*
  store i32 ptrtoint (i32* @global_var_c908.33 to i32), i32* %v2_8718, align 4
  %v3_871c = load i32, i32* @r5, align 4
  %v4_871c = add i32 %v3_871c, 4
  %v5_871c = inttoptr i32 %v4_871c to i8*
  store i8 2, i8* %v5_871c, align 1
  %v0_8720 = load i32, i32* %r1.global-to-local, align 4
  %v1_8720 = add i32 %v0_8720, 4
  store i32 %v1_8720, i32* %r1.global-to-local, align 4
  %v5_8724 = call i32 @function_12680(i32 %v2_8714, i32 %v1_8720, i32 ptrtoint (i32* @global_var_c908.33 to i32), i32 2)
  %v2_8728 = load i8, i8* bitcast (i8** @global_var_1c89c.21 to i8*), align 4
  %v3_8728 = zext i8 %v2_8728 to i32
  store i32 %v3_8728, i32* %r3.global-to-local, align 4
  store i32 %v5_8724, i32* %ip.global-to-local, align 4
  %v1_8730 = load i32, i32* @r8, align 4
  %v2_8730 = add i32 %v1_8730, %v3_8728
  %v3_8730 = trunc i32 %v2_8730 to i8
  store i32 %v2_8730, i32* %r2.global-to-local, align 4
  %v0_8734 = load i32, i32* @r5, align 4
  %v5_8734 = mul nuw nsw i32 %v3_8728, 4
  %v6_8734 = add i32 %v5_8734, %v5_8724
  %v7_8734 = inttoptr i32 %v6_8734 to i32*
  store i32 %v0_8734, i32* %v7_8734, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_873c = load i32, i32* @r8, align 4
  %v3_8740 = load i32, i32* @r4, align 4
  %v4_8740 = inttoptr i32 %v3_8740 to i8*
  store i8 %v3_8730, i8* %v4_8740, align 1
  %v0_8744 = load i32, i32* %ip.global-to-local, align 4
  %v1_8744 = load i32, i32* @r6, align 4
  %v2_8744 = inttoptr i32 %v1_8744 to i32*
  store i32 %v0_8744, i32* %v2_8744, align 4
  %v2_8748 = call i32 @function_12538(i32 %v0_873c, i32 8)
  %v2_874c = load i8, i8* bitcast (i8** @global_var_1c89c.21 to i8*), align 4
  %v3_874c = zext i8 %v2_874c to i32
  store i32 ptrtoint (i32* @global_var_bad4.35 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r7, align 4
  store i32 %v2_8748, i32* @r5, align 4
  %v3_875c = mul nuw nsw i32 %v3_874c, 4
  store i32 %v3_875c, i32* %r1.global-to-local, align 4
  %v2_8760 = load i32, i32* @global_var_1c8a0.23, align 4
  %v2_8764 = inttoptr i32 %v2_8748 to i32*
  store i32 ptrtoint (i32* @global_var_bad4.35 to i32), i32* %v2_8764, align 4
  %v0_8768 = load i32, i32* @r7, align 4
  %v1_8768 = trunc i32 %v0_8768 to i8
  %v2_8768 = load i32, i32* @r5, align 4
  %v3_8768 = add i32 %v2_8768, 4
  %v4_8768 = inttoptr i32 %v3_8768 to i8*
  store i8 %v1_8768, i8* %v4_8768, align 1
  %v0_876c = load i32, i32* %r1.global-to-local, align 4
  %v1_876c = add i32 %v0_876c, 4
  store i32 %v1_876c, i32* %r1.global-to-local, align 4
  %v5_8770 = call i32 @function_12680(i32 %v2_8760, i32 %v1_876c, i32 %v2_8730, i32 ptrtoint (i32* @global_var_bad4.35 to i32))
  %v2_8774 = load i8, i8* bitcast (i8** @global_var_1c89c.21 to i8*), align 4
  %v3_8774 = zext i8 %v2_8774 to i32
  store i32 %v3_8774, i32* %r3.global-to-local, align 4
  store i32 %v5_8770, i32* %ip.global-to-local, align 4
  %v0_877c = load i32, i32* @r5, align 4
  %v5_877c = mul nuw nsw i32 %v3_8774, 4
  %v6_877c = add i32 %v5_877c, %v5_8770
  %v7_877c = inttoptr i32 %v6_877c to i32*
  store i32 %v0_877c, i32* %v7_877c, align 4
  %v0_8780 = load i32, i32* %r3.global-to-local, align 4
  %v1_8780 = load i32, i32* @r8, align 4
  %v2_8780 = add i32 %v1_8780, %v0_8780
  store i32 %v2_8780, i32* %r2.global-to-local, align 4
  %v0_8784 = load i32, i32* @r7, align 4
  store i32 %v0_8784, i32* %r1.global-to-local, align 4
  %v0_878c = load i32, i32* %ip.global-to-local, align 4
  %v1_878c = load i32, i32* @r6, align 4
  %v2_878c = inttoptr i32 %v1_878c to i32*
  store i32 %v0_878c, i32* %v2_878c, align 4
  %v0_8790 = load i32, i32* %r2.global-to-local, align 4
  %v1_8790 = trunc i32 %v0_8790 to i8
  %v2_8790 = load i32, i32* @r4, align 4
  %v3_8790 = inttoptr i32 %v2_8790 to i8*
  store i8 %v1_8790, i8* %v3_8790, align 1
  %v2_8794 = call i32 @function_12538(i32 %v1_8780, i32 %v0_8784)
  %v2_8798 = load i8, i8* bitcast (i8** @global_var_1c89c.21 to i8*), align 4
  %v3_8798 = zext i8 %v2_8798 to i32
  store i32 ptrtoint (i32* @global_var_b388.37 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8794, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_87a8 = mul nuw nsw i32 %v3_8798, 4
  store i32 %v3_87a8, i32* %r1.global-to-local, align 4
  %v2_87ac = load i32, i32* @global_var_1c8a0.23, align 4
  %v2_87b0 = inttoptr i32 %v2_8794 to i32*
  store i32 ptrtoint (i32* @global_var_b388.37 to i32), i32* %v2_87b0, align 4
  %v3_87b4 = load i32, i32* @r5, align 4
  %v4_87b4 = add i32 %v3_87b4, 4
  %v5_87b4 = inttoptr i32 %v4_87b4 to i8*
  store i8 3, i8* %v5_87b4, align 1
  %v0_87b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_87b8 = add i32 %v0_87b8, 4
  store i32 %v1_87b8, i32* %r1.global-to-local, align 4
  %v5_87bc = call i32 @function_12680(i32 %v2_87ac, i32 %v1_87b8, i32 ptrtoint (i32* @global_var_b388.37 to i32), i32 3)
  %v2_87c0 = load i8, i8* bitcast (i8** @global_var_1c89c.21 to i8*), align 4
  %v3_87c0 = zext i8 %v2_87c0 to i32
  store i32 %v3_87c0, i32* %r3.global-to-local, align 4
  store i32 %v5_87bc, i32* %ip.global-to-local, align 4
  %v0_87c8 = load i32, i32* @r5, align 4
  %v5_87c8 = mul nuw nsw i32 %v3_87c0, 4
  %v6_87c8 = add i32 %v5_87c8, %v5_87bc
  %v7_87c8 = inttoptr i32 %v6_87c8 to i32*
  store i32 %v0_87c8, i32* %v7_87c8, align 4
  %v0_87cc = load i32, i32* %r3.global-to-local, align 4
  %v1_87cc = load i32, i32* @r8, align 4
  %v2_87cc = add i32 %v1_87cc, %v0_87cc
  store i32 %v2_87cc, i32* %r2.global-to-local, align 4
  %v0_87d0 = load i32, i32* @r7, align 4
  store i32 %v0_87d0, i32* %r1.global-to-local, align 4
  %v0_87d8 = load i32, i32* %ip.global-to-local, align 4
  %v1_87d8 = load i32, i32* @r6, align 4
  %v2_87d8 = inttoptr i32 %v1_87d8 to i32*
  store i32 %v0_87d8, i32* %v2_87d8, align 4
  %v0_87dc = load i32, i32* %r2.global-to-local, align 4
  %v1_87dc = trunc i32 %v0_87dc to i8
  %v2_87dc = load i32, i32* @r4, align 4
  %v3_87dc = inttoptr i32 %v2_87dc to i8*
  store i8 %v1_87dc, i8* %v3_87dc, align 1
  %v2_87e0 = call i32 @function_12538(i32 %v1_87cc, i32 %v0_87d0)
  %v2_87e4 = load i8, i8* bitcast (i8** @global_var_1c89c.21 to i8*), align 4
  %v3_87e4 = zext i8 %v2_87e4 to i32
  store i32 ptrtoint (i32* @global_var_ac14.39 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87e0, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_87f4 = mul nuw nsw i32 %v3_87e4, 4
  store i32 %v3_87f4, i32* %r1.global-to-local, align 4
  %v2_87f8 = load i32, i32* @global_var_1c8a0.23, align 4
  %v2_87fc = inttoptr i32 %v2_87e0 to i32*
  store i32 ptrtoint (i32* @global_var_ac14.39 to i32), i32* %v2_87fc, align 4
  %v3_8800 = load i32, i32* @r5, align 4
  %v4_8800 = add i32 %v3_8800, 4
  %v5_8800 = inttoptr i32 %v4_8800 to i8*
  store i8 4, i8* %v5_8800, align 1
  %v0_8804 = load i32, i32* %r1.global-to-local, align 4
  %v1_8804 = add i32 %v0_8804, 4
  store i32 %v1_8804, i32* %r1.global-to-local, align 4
  %v5_8808 = call i32 @function_12680(i32 %v2_87f8, i32 %v1_8804, i32 ptrtoint (i32* @global_var_ac14.39 to i32), i32 4)
  %v2_880c = load i8, i8* bitcast (i8** @global_var_1c89c.21 to i8*), align 4
  %v3_880c = zext i8 %v2_880c to i32
  store i32 %v3_880c, i32* %r3.global-to-local, align 4
  store i32 %v5_8808, i32* %ip.global-to-local, align 4
  %v0_8814 = load i32, i32* @r5, align 4
  %v5_8814 = mul nuw nsw i32 %v3_880c, 4
  %v6_8814 = add i32 %v5_8814, %v5_8808
  %v7_8814 = inttoptr i32 %v6_8814 to i32*
  store i32 %v0_8814, i32* %v7_8814, align 4
  %v0_8818 = load i32, i32* %r3.global-to-local, align 4
  %v1_8818 = load i32, i32* @r8, align 4
  %v2_8818 = add i32 %v1_8818, %v0_8818
  store i32 %v2_8818, i32* %r2.global-to-local, align 4
  %v0_881c = load i32, i32* @r7, align 4
  store i32 %v0_881c, i32* %r1.global-to-local, align 4
  %v0_8824 = load i32, i32* %ip.global-to-local, align 4
  %v1_8824 = load i32, i32* @r6, align 4
  %v2_8824 = inttoptr i32 %v1_8824 to i32*
  store i32 %v0_8824, i32* %v2_8824, align 4
  %v0_8828 = load i32, i32* %r2.global-to-local, align 4
  %v1_8828 = trunc i32 %v0_8828 to i8
  %v2_8828 = load i32, i32* @r4, align 4
  %v3_8828 = inttoptr i32 %v2_8828 to i8*
  store i8 %v1_8828, i8* %v3_8828, align 1
  %v2_882c = call i32 @function_12538(i32 %v1_8818, i32 %v0_881c)
  %v2_8830 = load i8, i8* bitcast (i8** @global_var_1c89c.21 to i8*), align 4
  %v3_8830 = zext i8 %v2_8830 to i32
  store i32 ptrtoint (i32* @global_var_a3b4.41 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_882c, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_8840 = mul nuw nsw i32 %v3_8830, 4
  store i32 %v3_8840, i32* %r1.global-to-local, align 4
  %v2_8844 = load i32, i32* @global_var_1c8a0.23, align 4
  %v2_8848 = inttoptr i32 %v2_882c to i32*
  store i32 ptrtoint (i32* @global_var_a3b4.41 to i32), i32* %v2_8848, align 4
  %v3_884c = load i32, i32* @r5, align 4
  %v4_884c = add i32 %v3_884c, 4
  %v5_884c = inttoptr i32 %v4_884c to i8*
  store i8 5, i8* %v5_884c, align 1
  %v0_8850 = load i32, i32* %r1.global-to-local, align 4
  %v1_8850 = add i32 %v0_8850, 4
  store i32 %v1_8850, i32* %r1.global-to-local, align 4
  %v5_8854 = call i32 @function_12680(i32 %v2_8844, i32 %v1_8850, i32 ptrtoint (i32* @global_var_a3b4.41 to i32), i32 5)
  %v2_8858 = load i8, i8* bitcast (i8** @global_var_1c89c.21 to i8*), align 4
  %v3_8858 = zext i8 %v2_8858 to i32
  store i32 %v3_8858, i32* %r3.global-to-local, align 4
  store i32 %v5_8854, i32* %ip.global-to-local, align 4
  %v0_8860 = load i32, i32* @r5, align 4
  %v5_8860 = mul nuw nsw i32 %v3_8858, 4
  %v6_8860 = add i32 %v5_8860, %v5_8854
  %v7_8860 = inttoptr i32 %v6_8860 to i32*
  store i32 %v0_8860, i32* %v7_8860, align 4
  %v0_8864 = load i32, i32* %r3.global-to-local, align 4
  %v1_8864 = load i32, i32* @r8, align 4
  %v2_8864 = add i32 %v1_8864, %v0_8864
  store i32 %v2_8864, i32* %r2.global-to-local, align 4
  %v0_8868 = load i32, i32* @r7, align 4
  store i32 %v0_8868, i32* %r1.global-to-local, align 4
  %v0_8870 = load i32, i32* %ip.global-to-local, align 4
  %v1_8870 = load i32, i32* @r6, align 4
  %v2_8870 = inttoptr i32 %v1_8870 to i32*
  store i32 %v0_8870, i32* %v2_8870, align 4
  %v0_8874 = load i32, i32* %r2.global-to-local, align 4
  %v1_8874 = trunc i32 %v0_8874 to i8
  %v2_8874 = load i32, i32* @r4, align 4
  %v3_8874 = inttoptr i32 %v2_8874 to i8*
  store i8 %v1_8874, i8* %v3_8874, align 1
  %v2_8878 = call i32 @function_12538(i32 %v1_8864, i32 %v0_8868)
  %v2_887c = load i8, i8* bitcast (i8** @global_var_1c89c.21 to i8*), align 4
  %v3_887c = zext i8 %v2_887c to i32
  store i32 39764, i32* %r2.global-to-local, align 4
  store i32 %v2_8878, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v3_888c = mul nuw nsw i32 %v3_887c, 4
  store i32 %v3_888c, i32* %r1.global-to-local, align 4
  %v2_8890 = load i32, i32* @global_var_1c8a0.23, align 4
  %v2_8894 = inttoptr i32 %v2_8878 to i32*
  store i32 39764, i32* %v2_8894, align 4
  %v3_8898 = load i32, i32* @r5, align 4
  %v4_8898 = add i32 %v3_8898, 4
  %v5_8898 = inttoptr i32 %v4_8898 to i8*
  store i8 10, i8* %v5_8898, align 1
  %v0_889c = load i32, i32* %r1.global-to-local, align 4
  %v1_889c = add i32 %v0_889c, 4
  store i32 %v1_889c, i32* %r1.global-to-local, align 4
  %v5_88a0 = call i32 @function_12680(i32 %v2_8890, i32 %v1_889c, i32 39764, i32 10)
  %v2_88a4 = load i8, i8* bitcast (i8** @global_var_1c89c.21 to i8*), align 4
  %v3_88a4 = zext i8 %v2_88a4 to i32
  store i32 %v3_88a4, i32* %r3.global-to-local, align 4
  store i32 %v5_88a0, i32* %ip.global-to-local, align 4
  %v0_88ac = load i32, i32* @r5, align 4
  %v5_88ac = mul nuw nsw i32 %v3_88a4, 4
  %v6_88ac = add i32 %v5_88ac, %v5_88a0
  %v7_88ac = inttoptr i32 %v6_88ac to i32*
  store i32 %v0_88ac, i32* %v7_88ac, align 4
  %v0_88b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_88b0 = load i32, i32* @r8, align 4
  %v2_88b0 = add i32 %v1_88b0, %v0_88b0
  store i32 %v2_88b0, i32* %r2.global-to-local, align 4
  %v0_88b4 = load i32, i32* @r7, align 4
  store i32 %v0_88b4, i32* %r1.global-to-local, align 4
  %v0_88bc = load i32, i32* %ip.global-to-local, align 4
  %v1_88bc = load i32, i32* @r6, align 4
  %v2_88bc = inttoptr i32 %v1_88bc to i32*
  store i32 %v0_88bc, i32* %v2_88bc, align 4
  %v0_88c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_88c0 = trunc i32 %v0_88c0 to i8
  %v2_88c0 = load i32, i32* @r4, align 4
  %v3_88c0 = inttoptr i32 %v2_88c0 to i8*
  store i8 %v1_88c0, i8* %v3_88c0, align 1
  %v2_88c4 = call i32 @function_12538(i32 %v1_88b0, i32 %v0_88b4)
  %v2_88c8 = load i8, i8* bitcast (i8** @global_var_1c89c.21 to i8*), align 4
  %v3_88c8 = zext i8 %v2_88c8 to i32
  store i32 ptrtoint (i32* @global_var_9154.44 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_88c4, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_88d8 = mul nuw nsw i32 %v3_88c8, 4
  store i32 %v3_88d8, i32* %r1.global-to-local, align 4
  %v2_88dc = load i32, i32* @global_var_1c8a0.23, align 4
  %v2_88e0 = inttoptr i32 %v2_88c4 to i32*
  store i32 ptrtoint (i32* @global_var_9154.44 to i32), i32* %v2_88e0, align 4
  %v3_88e4 = load i32, i32* @r5, align 4
  %v4_88e4 = add i32 %v3_88e4, 4
  %v5_88e4 = inttoptr i32 %v4_88e4 to i8*
  store i8 6, i8* %v5_88e4, align 1
  %v0_88e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_88e8 = add i32 %v0_88e8, 4
  store i32 %v1_88e8, i32* %r1.global-to-local, align 4
  %v5_88ec = call i32 @function_12680(i32 %v2_88dc, i32 %v1_88e8, i32 ptrtoint (i32* @global_var_9154.44 to i32), i32 6)
  %v2_88f0 = load i8, i8* bitcast (i8** @global_var_1c89c.21 to i8*), align 4
  %v3_88f0 = zext i8 %v2_88f0 to i32
  store i32 %v3_88f0, i32* %r3.global-to-local, align 4
  store i32 %v5_88ec, i32* %ip.global-to-local, align 4
  %v0_88f8 = load i32, i32* @r5, align 4
  %v5_88f8 = mul nuw nsw i32 %v3_88f0, 4
  %v6_88f8 = add i32 %v5_88f8, %v5_88ec
  %v7_88f8 = inttoptr i32 %v6_88f8 to i32*
  store i32 %v0_88f8, i32* %v7_88f8, align 4
  %v0_88fc = load i32, i32* %r3.global-to-local, align 4
  %v1_88fc = load i32, i32* @r8, align 4
  %v2_88fc = add i32 %v1_88fc, %v0_88fc
  store i32 %v2_88fc, i32* %r2.global-to-local, align 4
  %v0_8900 = load i32, i32* @r7, align 4
  store i32 %v0_8900, i32* %r1.global-to-local, align 4
  %v0_8908 = load i32, i32* %ip.global-to-local, align 4
  %v1_8908 = load i32, i32* @r6, align 4
  %v2_8908 = inttoptr i32 %v1_8908 to i32*
  store i32 %v0_8908, i32* %v2_8908, align 4
  %v0_890c = load i32, i32* %r2.global-to-local, align 4
  %v1_890c = trunc i32 %v0_890c to i8
  %v2_890c = load i32, i32* @r4, align 4
  %v3_890c = inttoptr i32 %v2_890c to i8*
  store i8 %v1_890c, i8* %v3_890c, align 1
  %v2_8910 = call i32 @function_12538(i32 %v1_88fc, i32 %v0_8900)
  %v2_8914 = load i8, i8* bitcast (i8** @global_var_1c89c.21 to i8*), align 4
  %v3_8914 = zext i8 %v2_8914 to i32
  store i32 ptrtoint (i32* @global_var_89d8.46 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8910, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_8924 = mul nuw nsw i32 %v3_8914, 4
  store i32 %v3_8924, i32* %r1.global-to-local, align 4
  %v2_8928 = load i32, i32* @global_var_1c8a0.23, align 4
  %v2_892c = inttoptr i32 %v2_8910 to i32*
  store i32 ptrtoint (i32* @global_var_89d8.46 to i32), i32* %v2_892c, align 4
  %v3_8930 = load i32, i32* @r5, align 4
  %v4_8930 = add i32 %v3_8930, 4
  %v5_8930 = inttoptr i32 %v4_8930 to i8*
  store i8 7, i8* %v5_8930, align 1
  %v0_8934 = load i32, i32* %r1.global-to-local, align 4
  %v1_8934 = add i32 %v0_8934, 4
  store i32 %v1_8934, i32* %r1.global-to-local, align 4
  %v5_8938 = call i32 @function_12680(i32 %v2_8928, i32 %v1_8934, i32 ptrtoint (i32* @global_var_89d8.46 to i32), i32 7)
  %v2_893c = load i8, i8* bitcast (i8** @global_var_1c89c.21 to i8*), align 4
  %v3_893c = zext i8 %v2_893c to i32
  store i32 %v3_893c, i32* %r3.global-to-local, align 4
  store i32 %v5_8938, i32* %ip.global-to-local, align 4
  %v0_8944 = load i32, i32* @r5, align 4
  %v5_8944 = mul nuw nsw i32 %v3_893c, 4
  %v6_8944 = add i32 %v5_8944, %v5_8938
  %v7_8944 = inttoptr i32 %v6_8944 to i32*
  store i32 %v0_8944, i32* %v7_8944, align 4
  %v0_8948 = load i32, i32* %r3.global-to-local, align 4
  %v1_8948 = load i32, i32* @r8, align 4
  %v2_8948 = add i32 %v1_8948, %v0_8948
  store i32 %v2_8948, i32* %r2.global-to-local, align 4
  %v0_894c = load i32, i32* @r7, align 4
  store i32 %v0_894c, i32* %r1.global-to-local, align 4
  %v1_8954 = trunc i32 %v2_8948 to i8
  %v2_8954 = load i32, i32* @r4, align 4
  %v3_8954 = inttoptr i32 %v2_8954 to i8*
  store i8 %v1_8954, i8* %v3_8954, align 1
  %v0_8958 = load i32, i32* %ip.global-to-local, align 4
  %v1_8958 = load i32, i32* @r6, align 4
  %v2_8958 = inttoptr i32 %v1_8958 to i32*
  store i32 %v0_8958, i32* %v2_8958, align 4
  %v2_895c = call i32 @function_12538(i32 %v1_8948, i32 %v0_894c)
  %v2_8960 = load i8, i8* bitcast (i8** @global_var_1c89c.21 to i8*), align 4
  %v3_8960 = zext i8 %v2_8960 to i32
  store i32 ptrtoint (i32* @global_var_9870.48 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_895c, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v3_8970 = mul nuw nsw i32 %v3_8960, 4
  store i32 %v3_8970, i32* %r1.global-to-local, align 4
  %v2_8974 = load i32, i32* @global_var_1c8a0.23, align 4
  %v2_8978 = inttoptr i32 %v2_895c to i32*
  store i32 ptrtoint (i32* @global_var_9870.48 to i32), i32* %v2_8978, align 4
  %v3_897c = load i32, i32* @r5, align 4
  %v4_897c = add i32 %v3_897c, 4
  %v5_897c = inttoptr i32 %v4_897c to i8*
  store i8 9, i8* %v5_897c, align 1
  %v0_8980 = load i32, i32* %r1.global-to-local, align 4
  %v1_8980 = add i32 %v0_8980, 4
  store i32 %v1_8980, i32* %r1.global-to-local, align 4
  %v5_8984 = call i32 @function_12680(i32 %v2_8974, i32 %v1_8980, i32 ptrtoint (i32* @global_var_9870.48 to i32), i32 9)
  %v2_8988 = load i8, i8* bitcast (i8** @global_var_1c89c.21 to i8*), align 4
  %v3_8988 = zext i8 %v2_8988 to i32
  store i32 %v3_8988, i32* %r3.global-to-local, align 4
  %v1_898c = load i32, i32* @r6, align 4
  %v2_898c = inttoptr i32 %v1_898c to i32*
  store i32 %v5_8984, i32* %v2_898c, align 4
  %v0_8990 = load i32, i32* @r5, align 4
  %v2_8990 = load i32, i32* %r3.global-to-local, align 4
  %v5_8990 = mul i32 %v2_8990, 4
  %v6_8990 = add i32 %v5_8990, %v5_8984
  %v7_8990 = inttoptr i32 %v6_8990 to i32*
  store i32 %v0_8990, i32* %v7_8990, align 4
  %v0_8994 = load i32, i32* %r3.global-to-local, align 4
  %v1_8994 = load i32, i32* @r8, align 4
  %v2_8994 = add i32 %v1_8994, %v0_8994
  store i32 %v2_8994, i32* %r2.global-to-local, align 4
  %v1_899c = trunc i32 %v2_8994 to i8
  %v2_899c = load i32, i32* @r4, align 4
  %v3_899c = inttoptr i32 %v2_899c to i8*
  store i8 %v1_899c, i8* %v3_899c, align 1
  %v2_89a0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_89a0, i32* @r4, align 4
  store i32 %v6_8650, i32* @r5, align 4
  store i32 %v9_8650, i32* @r6, align 4
  store i32 %v12_8650, i32* @r7, align 4
  store i32 %v15_8650, i32* @r8, align 4
  ret i32 %v1_8994

; uselistorder directives
  uselistorder i32 %v1_8994, { 1, 0 }
  uselistorder i32 %v1_8948, { 1, 0 }
  uselistorder i32 %v1_88fc, { 1, 0 }
  uselistorder i32 %v1_88b0, { 1, 0 }
  uselistorder i32 %v1_8864, { 1, 0 }
  uselistorder i32 %v1_8818, { 1, 0 }
  uselistorder i32 %v1_87cc, { 1, 0 }
  uselistorder i32 %v1_8780, { 1, 0 }
  uselistorder i32 %v2_8730, { 0, 2, 1 }
  uselistorder i32 %v3_8728, { 1, 0, 2 }
  uselistorder i32 %v1_86e8, { 1, 0 }
  uselistorder i32* @global_var_1c8a0.23, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11 }
  uselistorder i8* bitcast (i8** @global_var_1c89c.21 to i8*), { 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_89d8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_89d8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_89d8 = load i32, i32* @r4, align 4
  %v15_89d8 = load i32, i32* @r8, align 4
  %v21_89d8 = load i32, i32* @sl, align 4
  %v1_89dc = urem i32 %arg1, 256
  store i32 %v1_89dc, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_89dc, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_89f4 = urem i32 %arg3, 256
  store i32 %v1_89f4, i32* @r4, align 4
  %v2_89f8 = call i32 @function_12538(i32 %v1_89dc, i32 4)
  %v0_89fc = load i32, i32* @r5, align 4
  store i32 %v0_89fc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8a0c = load i32, i32* @r4, align 4
  store i32 %v0_8a0c, i32* %r0.global-to-local, align 4
  %v5_8a10 = inttoptr i32 %v0_89fc to i32*
  %v6_8a10 = call i32 @function_85e0(i32 %v0_8a0c, i32* %v5_8a10, i32 2, i32 0, i32 %v2_89f8)
  %v1_8a1c = urem i32 %v6_8a10, 256
  store i32 %v1_8a1c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_8a28 = load i32, i32* @r5, align 4
  store i32 %v0_8a28, i32* %r1.global-to-local, align 4
  %v0_8a2c = load i32, i32* @r4, align 4
  store i32 %v0_8a2c, i32* %r0.global-to-local, align 4
  %v5_8a30 = trunc i32 %v6_8a10 to i8
  %v6_8a34 = inttoptr i32 %v0_8a28 to i32*
  %v7_8a34 = call i32 @function_85e0(i32 %v0_8a2c, i32* %v6_8a34, i32 3, i32 65535, i32 %v6_8a10)
  %v0_8a38 = load i32, i32* @r5, align 4
  store i32 %v0_8a38, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_8a34, i32* @r7, align 4
  %v0_8a48 = load i32, i32* @r4, align 4
  store i32 %v0_8a48, i32* %r0.global-to-local, align 4
  %v5_8a4c = inttoptr i32 %v0_8a38 to i32*
  %v6_8a4c = call i32 @function_85e0(i32 %v0_8a48, i32* %v5_8a4c, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_8a54 = urem i32 %v6_8a4c, 256
  store i32 %v1_8a54, i32* %ip.global-to-local, align 4
  %v0_8a58 = load i32, i32* @r5, align 4
  store i32 %v0_8a58, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8a64 = load i32, i32* @r4, align 4
  store i32 %v0_8a64, i32* %r0.global-to-local, align 4
  %v5_8a68 = trunc i32 %v6_8a4c to i8
  %v6_8a6c = inttoptr i32 %v0_8a58 to i32*
  %v7_8a6c = call i32 @function_85e0(i32 %v0_8a64, i32* %v6_8a6c, i32 5, i32 1, i32 %v6_8a4c)
  %v1_8a78 = urem i32 %v7_8a6c, 256
  store i32 %v1_8a78, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_8a84 = load i32, i32* @r5, align 4
  store i32 %v0_8a84, i32* %r1.global-to-local, align 4
  %v0_8a88 = load i32, i32* @r4, align 4
  store i32 %v0_8a88, i32* %r0.global-to-local, align 4
  %v5_8a90 = inttoptr i32 %v0_8a84 to i32*
  %v6_8a90 = call i32 @function_85e0(i32 %v0_8a88, i32* %v5_8a90, i32 6, i32 65535, i32 %v1_8a78)
  %v0_8a98 = load i32, i32* @r5, align 4
  store i32 %v0_8a98, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_8a90, i32* @sl, align 4
  %v0_8aa8 = load i32, i32* @r4, align 4
  store i32 %v0_8aa8, i32* %r0.global-to-local, align 4
  %v5_8aac = inttoptr i32 %v0_8a98 to i32*
  %v6_8aac = call i32 @function_85e0(i32 %v0_8aa8, i32* %v5_8aac, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_8ab0 = load i32, i32* @r5, align 4
  store i32 %v0_8ab0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_8aac, i32* @r8, align 4
  %v0_8ac0 = load i32, i32* @r4, align 4
  store i32 %v0_8ac0, i32* %r0.global-to-local, align 4
  %v5_8ac4 = inttoptr i32 %v0_8ab0 to i32*
  %v6_8ac4 = call i32 @function_85e0(i32 %v0_8ac0, i32* %v5_8ac4, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8ad4 = load i32, i32* @r5, align 4
  store i32 %v0_8ad4, i32* %r1.global-to-local, align 4
  %v0_8ad8 = load i32, i32* @r4, align 4
  store i32 %v0_8ad8, i32* %r0.global-to-local, align 4
  %v5_8adc = inttoptr i32 %v0_8ad4 to i32*
  %v6_8adc = call i32 @function_85e0(i32 %v0_8ad8, i32* %v5_8adc, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_8ae4 = urem i32 %v6_8adc, 256
  store i32 %v1_8ae4, i32* %ip.global-to-local, align 4
  %v0_8ae8 = load i32, i32* @r5, align 4
  store i32 %v0_8ae8, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8af4 = load i32, i32* @r4, align 4
  store i32 %v0_8af4, i32* %r0.global-to-local, align 4
  %v5_8afc = inttoptr i32 %v0_8ae8 to i32*
  %v6_8afc = call i32 @function_85e0(i32 %v0_8af4, i32* %v5_8afc, i32 19, i32 0, i32 %v1_8ae4)
  %v0_8b04 = load i32, i32* @r5, align 4
  store i32 %v0_8b04, i32* %r1.global-to-local, align 4
  %v2_8b08 = load i32, i32* @global_var_1c93c.50, align 4
  store i32 %v2_8b08, i32* %r3.global-to-local, align 4
  store i32 %v6_8afc, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_8b14 = load i32, i32* @r4, align 4
  store i32 %v0_8b14, i32* %r0.global-to-local, align 4
  %v5_8b18 = inttoptr i32 %v0_8b04 to i32*
  %v6_8b18 = call i32 @function_85e0(i32 %v0_8b14, i32* %v5_8b18, i32 25, i32 %v2_8b08, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_8b2c = call i32 @function_1224c(i32 2, i32 3, i32 6)
  store i32 %v3_8b2c, i32* %r0.global-to-local, align 4
  %v7_8b30 = icmp eq i32 %v3_8b2c, -1
  store i1 %v7_8b30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8b30, label %dec_label_pc_9014, label %dec_label_pc_8b3c

dec_label_pc_8b3c:                                ; preds = %dec_label_pc_89d8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_8b44 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_8b44, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_8b58 = call i32 @function_1221c(i32 %v3_8b2c, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_8b58, i32* %r0.global-to-local, align 4
  %v7_8b5c = icmp eq i32 %v6_8b58, -1
  store i1 %v7_8b5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8b5c, label %dec_label_pc_900c, label %dec_label_pc_8b64

dec_label_pc_8b64:                                ; preds = %dec_label_pc_8b3c
  %v0_8b64 = load i32, i32* @sl, align 4
  %v3_8b64 = mul i32 %v0_8b64, 65536
  store i32 %v3_8b64, i32* %sl.global-to-local, align 4
  %v0_8b68 = load i32, i32* @r8, align 4
  %v3_8b68 = mul i32 %v0_8b68, 65536
  store i32 %v3_8b68, i32* %r8.global-to-local, align 4
  %v0_8b70 = load i32, i32* @r7, align 4
  %v3_8b70 = mul i32 %v0_8b70, 65536
  %v0_8b74 = load i32, i32* @r6, align 4
  %v1_8b74 = urem i32 %v0_8b74, 256
  store i32 0, i32* %stack_var_-40, align 4
  %v3_8b7c = urem i32 %v0_8b70, 65536
  store i32 %v3_8b7c, i32* %r2.global-to-local, align 4
  %v3_8b80 = urem i32 %v0_8b64, 65536
  store i32 %v3_8b80, i32* %r3.global-to-local, align 4
  %v3_8b84 = urem i32 %v0_8b68, 65536
  store i32 %v3_8b84, i32* %r1.global-to-local, align 4
  %v0_8b88 = load i32, i32* @fp, align 4
  %v2_8b88 = icmp eq i32 %v0_8b88, 0
  store i1 %v2_8b88, i1* %cpsr_z.global-to-local, align 1
  %tmp88 = icmp slt i32 %v0_8b88, 1
  br i1 %tmp88, label %dec_label_pc_9134, label %dec_label_pc_8ba8

dec_label_pc_8ba8:                                ; preds = %dec_label_pc_8b64
  %v3_8bac = mul i32 %v6_8ac4, 65536
  %v0_8b70.not = or i32 %v0_8b70, -65536
  %v1_8bb4 = xor i32 %v0_8b70.not, 65535
  %v1_8bbc = add i32 %v3_8bac, 4325376
  %v1_8bc0 = urem i32 %v0_8b64, 256
  %v3_8bc8 = udiv i32 %v1_8bbc, 256
  %v1_8bcc = add i32 %v3_8bac, 524288
  %v1_8bd4 = add i32 %v3_8bac, 1835008
  %v1_8bd8 = urem i32 %v0_8b68, 256
  %v1_8bdc = and i32 %v3_8bc8, 65280
  store i32 %v1_8bdc, i32* %r0.global-to-local, align 4
  %v3_8be4 = udiv i32 %v1_8bd4, 256
  %tmp89 = mul nsw i32 %v1_8bb4, 256
  %v1_8bfc = and i32 %v3_8be4, 65280
  store i32 %v1_8bfc, i32* %ip.global-to-local, align 4
  %v1_8c00 = and i32 %tmp89, 65280
  store i32 %v1_8c00, i32* @lr, align 4
  %tmp91 = udiv i32 %v1_8bb4, 256
  %v4_8bec = sdiv i32 %v1_8bbc, 16777216
  %v5_8c1c = trunc i32 %tmp91 to i8
  %v3_8c28 = mul nuw nsw i32 %v1_8bc0, 256
  %v3_8c30 = ashr i32 %v1_8bbc, 31
  %v3_8c34 = mul nuw nsw i32 %v1_8bd8, 256
  store i32 %v3_8c34, i32* @r5, align 4
  %tmp92 = udiv i32 %v0_8b64, 256
  %v4_8c38 = urem i32 %tmp92, 256
  %v5_8c38 = or i32 %v4_8c38, %v3_8c28
  store i32 %v5_8c38, i32* @r7, align 4
  %v3_8c3c = udiv i32 %v1_8bcc, 256
  %tmp93 = udiv i32 %v0_8b68, 256
  %v4_8c40 = urem i32 %tmp93, 256
  %v5_8c40 = or i32 %v4_8c40, %v3_8c34
  store i32 %v5_8c40, i32* %sl.global-to-local, align 4
  %v5_8c44 = trunc i32 %v3_8c30 to i8
  %v3_8c4c = sdiv i32 %v3_8b70, 16777216
  %v7_8c4c = sdiv i32 %v1_8bd4, 16777216
  %v1_8c50 = and i32 %v3_8c3c, 65280
  store i32 %v1_8c50, i32* @r6, align 4
  %v3_8c54 = ashr i32 %v3_8b70, 31
  %v3_8c58 = ashr i32 %v1_8bd4, 31
  %v3_8c5c = udiv i32 %v1_8bb4, 65536
  %v4_8c60 = udiv i32 %v1_8bcc, 16777216
  %v5_8c60 = or i32 %v4_8c60, %v1_8c50
  store i32 %v5_8c60, i32* %r8.global-to-local, align 4
  store i32 %v1_8bc0, i32* %r1.global-to-local, align 4
  store i32 %v1_8bd8, i32* %r2.global-to-local, align 4
  %v3_8c7837 = udiv i32 %v1_8c50, 256
  store i32 %v3_8c7837, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v2_8dd8 = icmp eq i32 %v1_8b74, 0
  %sext16 = mul i32 %v0_8b64, 16777216
  %v4_8dec = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_8bcc, 256
  %v4_8e00 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_8b68, 16777216
  %v4_8e08 = sdiv i32 %sext18, 16777216
  %v1_8e10 = trunc i32 %v4_8e00 to i8
  br label %dec_label_pc_8c8c

dec_label_pc_8c8c:                                ; preds = %bb105, %dec_label_pc_8ba8
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_8c98 = call i32 @function_12538(i32 1510, i32 4)
  store i32 %v2_8c98, i32* %r0.global-to-local, align 4
  store i32 %v2_89f8, i32* %r1.global-to-local, align 4
  %v3_8ca0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8ca0, i32* %r3.global-to-local, align 4
  %v2_8ca4 = load i32, i32* @r4, align 4
  %v5_8ca4 = mul i32 %v2_8ca4, 4
  %v6_8ca4 = add i32 %v5_8ca4, %v2_89f8
  %v7_8ca4 = inttoptr i32 %v6_8ca4 to i32*
  store i32 %v2_8c98, i32* %v7_8ca4, align 4
  %v0_8ca8 = load i32, i32* %r1.global-to-local, align 4
  %v1_8ca8 = load i32, i32* %r3.global-to-local, align 4
  %v4_8ca8 = mul i32 %v1_8ca8, 4
  %v5_8ca8 = add i32 %v4_8ca8, %v0_8ca8
  %v6_8ca8 = inttoptr i32 %v5_8ca8 to i32*
  %v7_8ca8 = load i32, i32* %v6_8ca8, align 4
  store i32 %v7_8ca8, i32* %r4.global-to-local, align 4
  %v1_8cac = inttoptr i32 %v7_8ca8 to i8*
  %v2_8cac = load i8, i8* %v1_8cac, align 1
  %tmp = urem i8 %v2_8cac, 16
  %v1_8cb0 = zext i8 %tmp to i32
  %v1_8cb4 = or i32 %v1_8cb0, 64
  store i32 %v1_8cb4, i32* %r2.global-to-local, align 4
  %v1_8cb8 = trunc i32 %v1_8cb4 to i8
  store i8 %v1_8cb8, i8* %v1_8cac, align 1
  %v0_8cbc = load i32, i32* %r4.global-to-local, align 4
  %v1_8cbc = inttoptr i32 %v0_8cbc to i8*
  %v2_8cbc = load i8, i8* %v1_8cbc, align 1
  %v1_8cc0 = and i8 %v2_8cbc, -16
  %v1_8cc4 = or i8 %v1_8cc0, 5
  store i32 %v1_8a78, i32* %r2.global-to-local, align 4
  store i8 %v1_8cc4, i8* %v1_8cbc, align 1
  %v2_8cd4 = load i32, i32* %r4.global-to-local, align 4
  %v3_8cd4 = add i32 %v2_8cd4, 1
  %v4_8cd4 = inttoptr i32 %v3_8cd4 to i8*
  store i8 %v5_8a30, i8* %v4_8cd4, align 1
  store i32 %v6_8a4c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_8ce0 = load i32, i32* %r4.global-to-local, align 4
  %v3_8ce0 = add i32 %v2_8ce0, 8
  %v4_8ce0 = inttoptr i32 %v3_8ce0 to i8*
  store i8 %v5_8a68, i8* %v4_8ce0, align 1
  %v0_8ce4 = load i32, i32* %r2.global-to-local, align 4
  %v1_8ce4 = load i32, i32* %ip.global-to-local, align 4
  %v9_8ce4 = icmp eq i32 %v0_8ce4, %v1_8ce4
  store i1 %v9_8ce4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8c30, i32* %r3.global-to-local, align 4
  store i32 %v4_8bec, i32* %r2.global-to-local, align 4
  %v2_8cf0 = load i32, i32* %r4.global-to-local, align 4
  %v3_8cf0 = add i32 %v2_8cf0, 3
  %v4_8cf0 = inttoptr i32 %v3_8cf0 to i8*
  store i8 %v5_8c44, i8* %v4_8cf0, align 1
  %v0_8cf4 = load i32, i32* %r2.global-to-local, align 4
  %v1_8cf4 = trunc i32 %v0_8cf4 to i8
  %v2_8cf4 = load i32, i32* %r4.global-to-local, align 4
  %v3_8cf4 = add i32 %v2_8cf4, 2
  %v4_8cf4 = inttoptr i32 %v3_8cf4 to i8*
  store i8 %v1_8cf4, i8* %v4_8cf4, align 1
  %v0_8cf8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8cf8, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_8c8c
  store i32 %v3_8c54, i32* %r2.global-to-local, align 4
  %extract.t114 = trunc i32 %v3_8c54 to i8
  br label %bb94

bb:                                               ; preds = %dec_label_pc_8c8c
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v3_8c54, i32* %r2.global-to-local, align 4
  %v3_8d00 = load i32, i32* %r4.global-to-local, align 4
  %v4_8d00 = add i32 %v3_8d00, 6
  %v5_8d00 = inttoptr i32 %v4_8d00 to i8*
  store i8 64, i8* %v5_8d00, align 1
  %v0_8d08.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t115 = trunc i32 %v0_8d08.pre to i8
  br label %bb94

bb94:                                             ; preds = %.thread, %bb
  %v3_8c54.sink.off0 = phi i8 [ %extract.t114, %.thread ], [ %extract.t115, %bb ]
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_8d08 = load i32, i32* %r4.global-to-local, align 4
  %v3_8d08 = add i32 %v2_8d08, 5
  %v4_8d08 = inttoptr i32 %v3_8d08 to i8*
  store i8 %v3_8c54.sink.off0, i8* %v4_8d08, align 1
  store i32 %v3_8c4c, i32* %r1.global-to-local, align 4
  %v0_8d10 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8d10, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_8d10 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_8d10, i32* %r2.global-to-local, align 4
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_8d14 = load i32, i32* %r3.global-to-local, align 4
  %v1_8d14 = trunc i32 %v0_8d14 to i8
  %v2_8d14 = load i32, i32* %r4.global-to-local, align 4
  %v3_8d14 = add i32 %v2_8d14, 9
  %v4_8d14 = inttoptr i32 %v3_8d14 to i8*
  store i8 %v1_8d14, i8* %v4_8d14, align 1
  %v0_8d18 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8d18, label %bb98, label %bb97

bb97:                                             ; preds = %bb96
  %v1_8d18 = load i32, i32* %r2.global-to-local, align 4
  %v2_8d18 = trunc i32 %v1_8d18 to i8
  %v3_8d18 = load i32, i32* %r4.global-to-local, align 4
  %v4_8d18 = add i32 %v3_8d18, 7
  %v5_8d18 = inttoptr i32 %v4_8d18 to i8*
  store i8 %v2_8d18, i8* %v5_8d18, align 1
  br label %bb98

bb98:                                             ; preds = %bb96, %bb97
  %v3_8d1c = load i32, i32* %stack_var_-40, align 4
  %v5_8d24 = mul i32 %v3_8d1c, 24
  store i32 %v5_8d24, i32* %r3.global-to-local, align 4
  store i32 %v6_8b18, i32* %r2.global-to-local, align 4
  %v1_8d2c = load i32, i32* %r4.global-to-local, align 4
  %v2_8d2c = add i32 %v1_8d2c, 12
  %v3_8d2c = inttoptr i32 %v2_8d2c to i32*
  store i32 %v6_8b18, i32* %v3_8d2c, align 4
  %v0_8d30 = load i32, i32* %r3.global-to-local, align 4
  %v1_8d30 = load i32, i32* @sb, align 4
  %v2_8d30 = add i32 %v1_8d30, %v0_8d30
  store i32 %v2_8d30, i32* %r3.global-to-local, align 4
  %v1_8d34 = add i32 %v2_8d30, 16
  %v2_8d34 = inttoptr i32 %v1_8d34 to i32*
  %v3_8d34 = load i32, i32* %v2_8d34, align 4
  store i32 %v3_8d34, i32* %r2.global-to-local, align 4
  %v0_8d38 = load i32, i32* %r1.global-to-local, align 4
  %v1_8d38 = trunc i32 %v0_8d38 to i8
  %v2_8d38 = load i32, i32* %r4.global-to-local, align 4
  %v3_8d38 = add i32 %v2_8d38, 4
  %v4_8d38 = inttoptr i32 %v3_8d38 to i8*
  store i8 %v1_8d38, i8* %v4_8d38, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_8d40 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d40 = add i32 %v0_8d40, 20
  store i32 %v1_8d40, i32* %r1.global-to-local, align 4
  %v3_8d44 = add i32 %v0_8d40, 22
  %v4_8d44 = inttoptr i32 %v3_8d44 to i8*
  store i8 101, i8* %v4_8d44, align 1
  %v0_8d48 = load i32, i32* %r2.global-to-local, align 4
  %v1_8d48 = load i32, i32* %r4.global-to-local, align 4
  %v2_8d48 = add i32 %v1_8d48, 16
  %v3_8d48 = inttoptr i32 %v2_8d48 to i32*
  store i32 %v0_8d48, i32* %v3_8d48, align 4
  %v0_8d4c = load i32, i32* %r4.global-to-local, align 4
  %v1_8d4c = add i32 %v0_8d4c, 24
  store i32 %v1_8d4c, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_8d54 = load i32, i32* %r3.global-to-local, align 4
  %v1_8d54 = add i32 %v0_8d54, -93
  store i32 %v1_8d54, i32* %r3.global-to-local, align 4
  %v2_8d58 = load i32, i32* %r1.global-to-local, align 4
  %v3_8d58 = add i32 %v2_8d58, 3
  %v4_8d58 = inttoptr i32 %v3_8d58 to i8*
  store i8 88, i8* %v4_8d58, align 1
  %v0_8d5c = load i32, i32* %r3.global-to-local, align 4
  %v1_8d5c = trunc i32 %v0_8d5c to i8
  %v2_8d5c = load i32, i32* %r0.global-to-local, align 4
  %v3_8d5c = add i32 %v2_8d5c, 12
  %v4_8d5c = inttoptr i32 %v3_8d5c to i8*
  store i8 %v1_8d5c, i8* %v4_8d5c, align 1
  %v0_8d60 = load i32, i32* %ip.global-to-local, align 4
  %v1_8d60 = trunc i32 %v0_8d60 to i8
  %v2_8d60 = load i32, i32* %r0.global-to-local, align 4
  %v3_8d60 = add i32 %v2_8d60, 13
  %v4_8d60 = inttoptr i32 %v3_8d60 to i8*
  store i8 %v1_8d60, i8* %v4_8d60, align 1
  %v0_8d64 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d64 = add i32 %v0_8d64, 38
  %v2_8d64 = inttoptr i32 %v1_8d64 to i8*
  %v3_8d64 = load i8, i8* %v2_8d64, align 1
  %tmp116 = urem i8 %v3_8d64, 16
  %v1_8d68 = zext i8 %tmp116 to i32
  %v1_8d6c = or i32 %v1_8d68, 64
  store i32 %v1_8d6c, i32* %r3.global-to-local, align 4
  %v1_8d70 = trunc i32 %v1_8d6c to i8
  store i8 %v1_8d70, i8* %v2_8d64, align 1
  %v0_8d74 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d74 = add i32 %v0_8d74, 38
  %v2_8d74 = inttoptr i32 %v1_8d74 to i8*
  %v3_8d74 = load i8, i8* %v2_8d74, align 1
  %v1_8d78 = and i8 %v3_8d74, -16
  %v1_8d7c = or i8 %v1_8d78, 5
  store i8 %v1_8d7c, i8* %v2_8d74, align 1
  %v0_8d88 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d88 = add i32 %v0_8d88, 38
  store i32 %v1_8d88, i32* @r5, align 4
  %v3_8d8c = add i32 %v0_8d88, 39
  %v4_8d8c = inttoptr i32 %v3_8d8c to i8*
  store i8 %v5_8a30, i8* %v4_8d8c, align 1
  store i32 %v7_8c4c, i32* %r1.global-to-local, align 4
  store i32 %tmp91, i32* %r3.global-to-local, align 4
  store i32 %v3_8c58, i32* %r2.global-to-local, align 4
  %v2_8d9c = load i32, i32* @r5, align 4
  %v3_8d9c = add i32 %v2_8d9c, 4
  %v4_8d9c = inttoptr i32 %v3_8d9c to i8*
  store i8 %v5_8c1c, i8* %v4_8d9c, align 1
  %v0_8da0 = load i32, i32* %r1.global-to-local, align 4
  %v1_8da0 = trunc i32 %v0_8da0 to i8
  %v2_8da0 = load i32, i32* @r5, align 4
  %v3_8da0 = add i32 %v2_8da0, 2
  %v4_8da0 = inttoptr i32 %v3_8da0 to i8*
  store i8 %v1_8da0, i8* %v4_8da0, align 1
  %v0_8da4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8da4, label %bb100, label %bb99

bb99:                                             ; preds = %bb98
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb100

bb100:                                            ; preds = %bb98, %bb99
  store i32 %v3_8c5c, i32* %r1.global-to-local, align 4
  %v0_8dac = load i32, i32* %r2.global-to-local, align 4
  %v1_8dac = trunc i32 %v0_8dac to i8
  %v2_8dac = load i32, i32* @r5, align 4
  %v3_8dac = add i32 %v2_8dac, 3
  %v4_8dac = inttoptr i32 %v3_8dac to i8*
  store i8 %v1_8dac, i8* %v4_8dac, align 1
  store i32 %v6_8a4c, i32* %r2.global-to-local, align 4
  %v0_8db4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8db4, label %bb102, label %bb101

bb101:                                            ; preds = %bb100
  %v1_8db4 = load i32, i32* %r3.global-to-local, align 4
  %v2_8db4 = trunc i32 %v1_8db4 to i8
  %v3_8db4 = load i32, i32* @r5, align 4
  %v4_8db4 = add i32 %v3_8db4, 6
  %v5_8db4 = inttoptr i32 %v4_8db4 to i8*
  store i8 %v2_8db4, i8* %v5_8db4, align 1
  br label %bb102

bb102:                                            ; preds = %bb100, %bb101
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_8dbc = load i32, i32* %r1.global-to-local, align 4
  %v1_8dbc = trunc i32 %v0_8dbc to i8
  %v2_8dbc = load i32, i32* @r5, align 4
  %v3_8dbc = add i32 %v2_8dbc, 5
  %v4_8dbc = inttoptr i32 %v3_8dbc to i8*
  store i8 %v1_8dbc, i8* %v4_8dbc, align 1
  %v0_8dc0 = load i32, i32* %r2.global-to-local, align 4
  %v1_8dc0 = trunc i32 %v0_8dc0 to i8
  %v2_8dc0 = load i32, i32* @r5, align 4
  %v3_8dc0 = add i32 %v2_8dc0, 8
  %v4_8dc0 = inttoptr i32 %v3_8dc0 to i8*
  store i8 %v1_8dc0, i8* %v4_8dc0, align 1
  %v0_8dc4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8dc4, label %bb104, label %bb103

bb103:                                            ; preds = %bb102
  %v1_8dc4 = load i32, i32* %ip.global-to-local, align 4
  %v2_8dc4 = trunc i32 %v1_8dc4 to i8
  %v3_8dc4 = load i32, i32* @r5, align 4
  %v4_8dc4 = add i32 %v3_8dc4, 7
  %v5_8dc4 = inttoptr i32 %v4_8dc4 to i8*
  store i8 %v2_8dc4, i8* %v5_8dc4, align 1
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v0_8dc8 = load i32, i32* %r3.global-to-local, align 4
  %v1_8dc8 = trunc i32 %v0_8dc8 to i8
  %v2_8dc8 = load i32, i32* @r5, align 4
  %v3_8dc8 = add i32 %v2_8dc8, 9
  %v4_8dc8 = inttoptr i32 %v3_8dc8 to i8*
  store i8 %v1_8dc8, i8* %v4_8dc8, align 1
  %v0_8dcc = call i32 @function_e8e4()
  store i32 %v0_8dcc, i32* %r0.global-to-local, align 4
  store i32 %v1_8b74, i32* %r1.global-to-local, align 4
  store i1 %v2_8dd8, i1* %cpsr_z.global-to-local, align 1
  %v1_8ddc = sub i32 1023, %v0_8dcc
  store i32 %v1_8ddc, i32* %r3.global-to-local, align 4
  br i1 %v2_8dd8, label %.thread21, label %.thread22

.thread21:                                        ; preds = %bb104
  %v2_8de4 = load i32, i32* @r5, align 4
  %v3_8de4 = add i32 %v2_8de4, 16
  %v4_8de4 = inttoptr i32 %v3_8de4 to i32*
  store i32 %v1_8ddc, i32* %v4_8de4, align 4
  br label %bb105

.thread22:                                        ; preds = %bb104
  %v1_8de0 = load i32, i32* %r4.global-to-local, align 4
  %v2_8de0 = add i32 %v1_8de0, 16
  %v3_8de0 = inttoptr i32 %v2_8de0 to i32*
  %v4_8de0 = load i32, i32* %v3_8de0, align 4
  store i32 %v4_8de0, i32* %r3.global-to-local, align 4
  %v2_8de8 = load i32, i32* @r5, align 4
  %v3_8de8 = add i32 %v2_8de8, 16
  %v4_8de8 = inttoptr i32 %v3_8de8 to i32*
  store i32 %v4_8de0, i32* %v4_8de8, align 4
  br label %bb105

bb105:                                            ; preds = %.thread21, %.thread22
  store i32 %v4_8dec, i32* %r3.global-to-local, align 4
  %v0_8df0 = load i32, i32* %r4.global-to-local, align 4
  %v1_8df0 = add i32 %v0_8df0, 58
  store i32 %v1_8df0, i32* @r6, align 4
  %v1_8df4 = load i32, i32* @r5, align 4
  %v2_8df4 = add i32 %v1_8df4, 12
  %v3_8df4 = inttoptr i32 %v2_8df4 to i32*
  store i32 %v0_8dcc, i32* %v3_8df4, align 4
  %v0_8df8 = load i32, i32* %r3.global-to-local, align 4
  %v1_8df8 = trunc i32 %v0_8df8 to i8
  %v2_8df8 = load i32, i32* @r6, align 4
  %v3_8df8 = add i32 %v2_8df8, 1
  %v4_8df8 = inttoptr i32 %v3_8df8 to i8*
  store i8 %v1_8df8, i8* %v4_8df8, align 1
  %v3_8dfc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8dfc, i32* %r3.global-to-local, align 4
  store i32 %v4_8e00, i32* %r2.global-to-local, align 4
  %v1_8e04 = add i32 %v3_8dfc, 1
  store i32 %v1_8e04, i32* @r4, align 4
  store i32 %v4_8e08, i32* %r1.global-to-local, align 4
  %v1_8e0c = load i32, i32* @fp, align 4
  %v9_8e0c = icmp eq i32 %v1_8e04, %v1_8e0c
  store i1 %v9_8e0c, i1* %cpsr_z.global-to-local, align 1
  %v2_8e10 = load i32, i32* @r6, align 4
  %v3_8e10 = add i32 %v2_8e10, 5
  %v4_8e10 = inttoptr i32 %v3_8e10 to i8*
  store i8 %v1_8e10, i8* %v4_8e10, align 1
  %v0_8e14 = load i32, i32* @r7, align 4
  %v1_8e14 = trunc i32 %v0_8e14 to i8
  %v2_8e14 = load i32, i32* @r6, align 4
  %v3_8e14 = inttoptr i32 %v2_8e14 to i8*
  store i8 %v1_8e14, i8* %v3_8e14, align 1
  %v0_8e18 = load i32, i32* %sl.global-to-local, align 4
  %v1_8e18 = trunc i32 %v0_8e18 to i8
  %v2_8e18 = load i32, i32* @r6, align 4
  %v3_8e18 = add i32 %v2_8e18, 2
  %v4_8e18 = inttoptr i32 %v3_8e18 to i8*
  store i8 %v1_8e18, i8* %v4_8e18, align 1
  %v0_8e1c = load i32, i32* %r1.global-to-local, align 4
  %v1_8e1c = trunc i32 %v0_8e1c to i8
  %v2_8e1c = load i32, i32* @r6, align 4
  %v3_8e1c = add i32 %v2_8e1c, 3
  %v4_8e1c = inttoptr i32 %v3_8e1c to i8*
  store i8 %v1_8e1c, i8* %v4_8e1c, align 1
  %v0_8e20 = load i32, i32* %r8.global-to-local, align 4
  %v1_8e20 = trunc i32 %v0_8e20 to i8
  %v2_8e20 = load i32, i32* @r6, align 4
  %v3_8e20 = add i32 %v2_8e20, 4
  %v4_8e20 = inttoptr i32 %v3_8e20 to i8*
  store i8 %v1_8e20, i8* %v4_8e20, align 1
  %v0_8e24 = load i32, i32* @r4, align 4
  store i32 %v0_8e24, i32* %stack_var_-40, align 4
  %v5_8e28 = icmp slt i32 %v1_8e04, %v1_8e0c
  br i1 %v5_8e28, label %dec_label_pc_8c8c, label %dec_label_pc_8e2c

dec_label_pc_8e2c:                                ; preds = %bb105
  %v1_8e34 = add i32 %v6_8ac4, 8
  store i32 %v1_8e34, i32* %r2.global-to-local, align 4
  %v1_8e38 = add i32 %v6_8ac4, 66
  store i32 %v1_8e38, i32* %r3.global-to-local, align 4
  %v0_8e44.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_8e44.preheader

dec_label_pc_8e44.preheader:                      ; preds = %dec_label_pc_8e2c, %dec_label_pc_9134
  %v0_8e44.pre = phi i32 [ %v0_8e44.pre.pre, %dec_label_pc_8e2c ], [ %v0_8b88, %dec_label_pc_9134 ]
  %stack_var_-160.0.ph = phi i32 [ %v1_8e38, %dec_label_pc_8e2c ], [ %v1_9140, %dec_label_pc_9134 ]
  %stack_var_-156.0.ph = phi i32 [ %v1_8e34, %dec_label_pc_8e2c ], [ %v1_913c, %dec_label_pc_9134 ]
  %v3_9094 = icmp eq i32 %v3_8b7c, 65535
  %v2_9104 = icmp eq i32 %v1_8b74, 0
  %v2_8ee8 = ptrtoint i32* %stack_var_-44 to i32
  %v2_8f00 = ptrtoint i32* %stack_var_-48 to i32
  %v2_8f10 = ptrtoint i32* %stack_var_-52 to i32
  %v2_8f1c = ptrtoint i32* %stack_var_-50 to i32
  %v2_8f30 = icmp eq i32 %v1_8ae4, 0
  %v2_8e8c = icmp eq i32 %v6_8b18, -1
  %v7_8e8c = icmp eq i32 %v6_8b18, -1
  br label %dec_label_pc_8e44

dec_label_pc_8e44:                                ; preds = %dec_label_pc_8f38, %dec_label_pc_8e44.preheader
  %v0_8e44 = phi i32 [ %v0_8e44.pre, %dec_label_pc_8e44.preheader ], [ %v1_8ffc, %dec_label_pc_8f38 ]
  %v2_8e44 = icmp eq i32 %v0_8e44, 0
  store i1 %v2_8e44, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp106 = icmp slt i32 %v0_8e44, 1
  br label %dec_label_pc_8e4c

dec_label_pc_8e4c:                                ; preds = %dec_label_pc_8e4c, %dec_label_pc_8e44
  br i1 %tmp106, label %dec_label_pc_8e4c, label %dec_label_pc_8e50

dec_label_pc_8e50:                                ; preds = %dec_label_pc_8e4c
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_8e5c

dec_label_pc_8e5c:                                ; preds = %dec_label_pc_8f38, %dec_label_pc_8e50
  %v1_8e70 = phi i32 [ %v1_8ff8, %dec_label_pc_8f38 ], [ 0, %dec_label_pc_8e50 ]
  %v5_8e60 = mul i32 %v1_8e70, 24
  %v1_8e64 = load i32, i32* @sb, align 4
  %v2_8e64 = add i32 %v1_8e64, %v5_8e60
  store i32 %v2_8e64, i32* %r3.global-to-local, align 4
  store i32 %v2_89f8, i32* %r1.global-to-local, align 4
  %v1_8e6c = add i32 %v2_8e64, 20
  %v2_8e6c = inttoptr i32 %v1_8e6c to i8*
  %v3_8e6c = load i8, i8* %v2_8e6c, align 1
  %v4_8e6c = zext i8 %v3_8e6c to i32
  store i32 %v4_8e6c, i32* %r2.global-to-local, align 4
  %v4_8e70 = mul i32 %v1_8e70, 4
  %v5_8e70 = add i32 %v4_8e70, %v2_89f8
  %v6_8e70 = inttoptr i32 %v5_8e70 to i32*
  %v7_8e70 = load i32, i32* %v6_8e70, align 4
  store i32 %v7_8e70, i32* @r5, align 4
  %v7_8e74 = icmp eq i8 %v3_8e6c, 31
  store i1 %v7_8e74, i1* %cpsr_z.global-to-local, align 1
  %v1_8e78 = add i32 %v7_8e70, 24
  store i32 %v1_8e78, i32* @r8, align 4
  %v1_8e7c = add i32 %v7_8e70, 38
  store i32 %v1_8e7c, i32* @r6, align 4
  %v1_8e80 = add i32 %v7_8e70, 58
  store i32 %v1_8e80, i32* @r7, align 4
  %tmp117 = icmp ult i8 %v3_8e6c, 32
  br i1 %tmp117, label %dec_label_pc_901c, label %dec_label_pc_8e88

dec_label_pc_8e88:                                ; preds = %dec_label_pc_8e5c
  store i32 %v6_8b18, i32* %r2.global-to-local, align 4
  store i1 %v7_8e8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e8c, label %dec_label_pc_9084, label %dec_label_pc_8e94

dec_label_pc_8e94:                                ; preds = %dec_label_pc_901c, %dec_label_pc_8e88
  store i32 %v3_8b7c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9094, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9094, label %dec_label_pc_90a0, label %dec_label_pc_8ea8

dec_label_pc_8ea8:                                ; preds = %dec_label_pc_9084.dec_label_pc_8ea8_crit_edge, %dec_label_pc_8e94
  %v1_8eac = phi i32 [ %v1_8eac.pre, %dec_label_pc_9084.dec_label_pc_8ea8_crit_edge ], [ 65535, %dec_label_pc_8e94 ]
  store i32 %v3_8b80, i32* %r1.global-to-local, align 4
  %v9_8eac = icmp eq i32 %v3_8b80, %v1_8eac
  store i1 %v9_8eac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8eac, label %dec_label_pc_90d8, label %dec_label_pc_8eb4

dec_label_pc_8eb4:                                ; preds = %dec_label_pc_90a0.dec_label_pc_8eb4_crit_edge, %dec_label_pc_8ea8
  %v1_8eb8 = phi i32 [ %v1_8eb8.pre, %dec_label_pc_90a0.dec_label_pc_8eb4_crit_edge ], [ %v1_8eac, %dec_label_pc_8ea8 ]
  store i32 %v3_8b84, i32* %r2.global-to-local, align 4
  %v9_8eb8 = icmp eq i32 %v3_8b84, %v1_8eb8
  store i1 %v9_8eb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8eb8, label %dec_label_pc_90f4, label %dec_label_pc_8ec0

dec_label_pc_8ec0:                                ; preds = %dec_label_pc_90d8, %dec_label_pc_8eb4
  store i32 %v1_8b74, i32* %r3.global-to-local, align 4
  store i1 %v2_9104, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9104, label %dec_label_pc_9118, label %.thread23

.thread23:                                        ; preds = %dec_label_pc_8ec0
  %v1_8ec8 = load i32, i32* @r5, align 4
  %v2_8ec8 = add i32 %v1_8ec8, 16
  %v3_8ec8 = inttoptr i32 %v2_8ec8 to i32*
  %v4_8ec8 = load i32, i32* %v3_8ec8, align 4
  store i32 %v4_8ec8, i32* %r3.global-to-local, align 4
  %v2_8ecc = load i32, i32* @r6, align 4
  %v3_8ecc = add i32 %v2_8ecc, 16
  %v4_8ecc = inttoptr i32 %v3_8ecc to i32*
  store i32 %v4_8ec8, i32* %v4_8ecc, align 4
  br label %dec_label_pc_8ed4

dec_label_pc_8ed4:                                ; preds = %bb109, %.thread23, %dec_label_pc_9118
  %v0_8ed4 = call i32 @function_e8e4()
  store i32 %v0_8ed4, i32* %r0.global-to-local, align 4
  store i32 %v0_8ed4, i32* %stack_var_-44, align 4
  %v0_8edc = call i32 @function_e8e4()
  store i32 %v0_8edc, i32* %r0.global-to-local, align 4
  store i32 %v0_8edc, i32* %stack_var_-48, align 4
  %v0_8ee4 = call i32 @function_e8e4()
  store i32 %v2_8ee8, i32* %r1.global-to-local, align 4
  store i32 %v0_8ee4, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_8ef4 = load i32, i32* @r8, align 4
  store i32 %v0_8ef4, i32* %r0.global-to-local, align 4
  %v3_8ef8 = call i32 @function_1115c(i32 %v0_8ef4, i32 %v2_8ee8, i32 4)
  %v0_8efc = load i32, i32* @r8, align 4
  %v1_8efc = add i32 %v0_8efc, 6
  store i32 %v1_8efc, i32* %r0.global-to-local, align 4
  store i32 %v2_8f00, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_8f08 = call i32 @function_1115c(i32 %v1_8efc, i32 %v2_8f00, i32 4)
  %v0_8f0c = load i32, i32* @r8, align 4
  %v1_8f0c = add i32 %v0_8f0c, 4
  store i32 %v1_8f0c, i32* %r0.global-to-local, align 4
  store i32 %v2_8f10, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8f18 = call i32 @function_1115c(i32 %v1_8f0c, i32 %v2_8f10, i32 2)
  store i32 %v2_8f1c, i32* %r1.global-to-local, align 4
  %v0_8f20 = load i32, i32* @r8, align 4
  %v1_8f20 = add i32 %v0_8f20, 10
  store i32 %v1_8f20, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8f28 = call i32 @function_1115c(i32 %v1_8f20, i32 %v2_8f1c, i32 2)
  store i32 %v3_8f28, i32* %r0.global-to-local, align 4
  store i32 %v1_8ae4, i32* %r1.global-to-local, align 4
  store i1 %v2_8f30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f30, label %dec_label_pc_8f38, label %dec_label_pc_9124

dec_label_pc_8f38:                                ; preds = %dec_label_pc_8ed4, %dec_label_pc_9124
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8f3c = load i32, i32* @sl, align 4
  %v1_8f3c = trunc i32 %v0_8f3c to i8
  %v2_8f3c = load i32, i32* @r5, align 4
  %v3_8f3c = add i32 %v2_8f3c, 10
  %v4_8f3c = inttoptr i32 %v3_8f3c to i8*
  store i8 %v1_8f3c, i8* %v4_8f3c, align 1
  %v0_8f40 = load i32, i32* @sl, align 4
  %v1_8f40 = trunc i32 %v0_8f40 to i8
  %v2_8f40 = load i32, i32* @r5, align 4
  %v3_8f40 = add i32 %v2_8f40, 11
  %v4_8f40 = inttoptr i32 %v3_8f40 to i8*
  store i8 %v1_8f40, i8* %v4_8f40, align 1
  %v0_8f44 = load i32, i32* @r5, align 4
  store i32 %v0_8f44, i32* @r0, align 4
  %v2_8f48 = call i32 @function_d0b8(i32 %v0_8f44, i32 20)
  %v3_8f48 = trunc i32 %v2_8f48 to i8
  %v4_8f4c = sdiv i32 %v2_8f48, 256
  store i32 %v4_8f4c, i32* %r3.global-to-local, align 4
  %v1_8f50 = trunc i32 %v4_8f4c to i8
  %v2_8f50 = load i32, i32* @r5, align 4
  %v3_8f50 = add i32 %v2_8f50, 11
  %v4_8f50 = inttoptr i32 %v3_8f50 to i8*
  store i8 %v1_8f50, i8* %v4_8f50, align 1
  %v3_8f54 = load i32, i32* @r5, align 4
  %v4_8f54 = add i32 %v3_8f54, 10
  %v5_8f54 = inttoptr i32 %v4_8f54 to i8*
  store i8 %v3_8f48, i8* %v5_8f54, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8f5c = load i32, i32* @sl, align 4
  %v1_8f5c = trunc i32 %v0_8f5c to i8
  %v2_8f5c = load i32, i32* @r6, align 4
  %v3_8f5c = add i32 %v2_8f5c, 10
  %v4_8f5c = inttoptr i32 %v3_8f5c to i8*
  store i8 %v1_8f5c, i8* %v4_8f5c, align 1
  %v0_8f60 = load i32, i32* @sl, align 4
  %v1_8f60 = trunc i32 %v0_8f60 to i8
  %v2_8f60 = load i32, i32* @r6, align 4
  %v3_8f60 = add i32 %v2_8f60, 11
  %v4_8f60 = inttoptr i32 %v3_8f60 to i8*
  store i8 %v1_8f60, i8* %v4_8f60, align 1
  %v0_8f64 = load i32, i32* @r6, align 4
  store i32 %v0_8f64, i32* @r0, align 4
  %v2_8f68 = call i32 @function_d0b8(i32 %v0_8f64, i32 20)
  %v3_8f68 = trunc i32 %v2_8f68 to i8
  store i32 %v2_8f68, i32* %r0.global-to-local, align 4
  %v4_8f6c = sdiv i32 %v2_8f68, 256
  store i32 %v4_8f6c, i32* %r3.global-to-local, align 4
  %v3_8f70 = load i32, i32* @r6, align 4
  %v4_8f70 = add i32 %v3_8f70, 10
  %v5_8f70 = inttoptr i32 %v4_8f70 to i8*
  store i8 %v3_8f68, i8* %v5_8f70, align 1
  %v0_8f74 = load i32, i32* %r3.global-to-local, align 4
  %v1_8f74 = trunc i32 %v0_8f74 to i8
  %v2_8f74 = load i32, i32* @r6, align 4
  %v3_8f74 = add i32 %v2_8f74, 11
  %v4_8f74 = inttoptr i32 %v3_8f74 to i8*
  store i8 %v1_8f74, i8* %v4_8f74, align 1
  %v0_8f78 = load i32, i32* @r7, align 4
  %v1_8f78 = add i32 %v0_8f78, 4
  %v2_8f78 = inttoptr i32 %v1_8f78 to i8*
  %v3_8f78 = load i8, i8* %v2_8f78, align 1
  %v4_8f78 = zext i8 %v3_8f78 to i32
  store i32 %v4_8f78, i32* %r3.global-to-local, align 4
  %v1_8f7c = add i32 %v0_8f78, 5
  %v2_8f7c = inttoptr i32 %v1_8f7c to i8*
  %v3_8f7c = load i8, i8* %v2_8f7c, align 1
  %v4_8f7c = zext i8 %v3_8f7c to i32
  store i32 %v0_8f78, i32* @r1, align 4
  %v4_8f84 = mul nuw nsw i32 %v4_8f7c, 256
  %v5_8f84 = or i32 %v4_8f84, %v4_8f78
  store i32 %v5_8f84, i32* %r2.global-to-local, align 4
  %v0_8f88 = load i32, i32* @sl, align 4
  %v1_8f88 = trunc i32 %v0_8f88 to i8
  %v3_8f88 = add i32 %v0_8f78, 6
  %v4_8f88 = inttoptr i32 %v3_8f88 to i8*
  store i8 %v1_8f88, i8* %v4_8f88, align 1
  store i32 %stack_var_-156.0.ph, i32* %r3.global-to-local, align 4
  %v0_8f90 = load i32, i32* @sl, align 4
  %v1_8f90 = trunc i32 %v0_8f90 to i8
  %v2_8f90 = load i32, i32* @r7, align 4
  %v3_8f90 = add i32 %v2_8f90, 7
  %v4_8f90 = inttoptr i32 %v3_8f90 to i8*
  store i8 %v1_8f90, i8* %v4_8f90, align 1
  %v0_8f94 = load i32, i32* @r6, align 4
  store i32 %v0_8f94, i32* %r0.global-to-local, align 4
  %v4_8f98 = call i32 @function_d114(i32 %v0_8f94, i32 %v0_8f78, i32 %v5_8f84, i32 %stack_var_-156.0.ph)
  %v5_8f98 = trunc i32 %v4_8f98 to i8
  store i32 %v4_8f98, i32* %r0.global-to-local, align 4
  %v3_8f9c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8f9c, i32* %r3.global-to-local, align 4
  %v3_8fa0 = mul i32 %v3_8f9c, 32
  store i32 %v3_8fa0, i32* %r2.global-to-local, align 4
  %v0_8fa4 = load i32, i32* @r5, align 4
  %v1_8fa4 = add i32 %v0_8fa4, 16
  %v2_8fa4 = inttoptr i32 %v1_8fa4 to i32*
  %v3_8fa4 = load i32, i32* %v2_8fa4, align 4
  store i32 %v3_8fa4, i32* %r1.global-to-local, align 4
  %v5_8fa8 = mul i32 %v3_8f9c, 24
  store i32 %v5_8fa8, i32* %r2.global-to-local, align 4
  %v4_8fac42 = udiv i32 %v4_8f98, 256
  %v1_8fb0 = trunc i32 %v4_8fac42 to i8
  %v2_8fb0 = load i32, i32* @r7, align 4
  %v3_8fb0 = add i32 %v2_8fb0, 7
  %v4_8fb0 = inttoptr i32 %v3_8fb0 to i8*
  store i8 %v1_8fb0, i8* %v4_8fb0, align 1
  %v0_8fb4 = load i32, i32* %r2.global-to-local, align 4
  %v1_8fb4 = load i32, i32* @sb, align 4
  %v2_8fb4 = add i32 %v1_8fb4, %v0_8fb4
  store i32 %v2_8fb4, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_8fbc = load i32, i32* @r7, align 4
  %v4_8fbc = add i32 %v3_8fbc, 6
  %v5_8fbc = inttoptr i32 %v4_8fbc to i8*
  store i8 %v5_8f98, i8* %v5_8fbc, align 1
  %v0_8fc0 = load i32, i32* %r1.global-to-local, align 4
  %v1_8fc0 = load i32, i32* %lr.global-to-local, align 4
  %v2_8fc0 = add i32 %v1_8fc0, 4
  %v3_8fc0 = inttoptr i32 %v2_8fc0 to i32*
  store i32 %v0_8fc0, i32* %v3_8fc0, align 4
  %v0_8fc4 = load i32, i32* %r3.global-to-local, align 4
  %v1_8fc4 = trunc i32 %v0_8fc4 to i8
  %v2_8fc4 = load i32, i32* %r2.global-to-local, align 4
  %v3_8fc4 = load i32, i32* @sb, align 4
  %v4_8fc4 = add i32 %v3_8fc4, %v2_8fc4
  %v5_8fc4 = inttoptr i32 %v4_8fc4 to i8*
  store i8 %v1_8fc4, i8* %v5_8fc4, align 1
  %v0_8fc8 = load i32, i32* @sl, align 4
  %v1_8fc8 = trunc i32 %v0_8fc8 to i8
  %v2_8fc8 = load i32, i32* %lr.global-to-local, align 4
  %v3_8fc8 = add i32 %v2_8fc8, 2
  %v4_8fc8 = inttoptr i32 %v3_8fc8 to i8*
  store i8 %v1_8fc8, i8* %v4_8fc8, align 1
  %v0_8fcc = load i32, i32* @sl, align 4
  %v1_8fcc = trunc i32 %v0_8fcc to i8
  %v2_8fcc = load i32, i32* %lr.global-to-local, align 4
  %v3_8fcc = add i32 %v2_8fcc, 1
  %v4_8fcc = inttoptr i32 %v3_8fcc to i8*
  store i8 %v1_8fcc, i8* %v4_8fcc, align 1
  %v0_8fd0 = load i32, i32* @sl, align 4
  %v1_8fd0 = trunc i32 %v0_8fd0 to i8
  %v2_8fd0 = load i32, i32* %lr.global-to-local, align 4
  %v3_8fd0 = add i32 %v2_8fd0, 3
  %v4_8fd0 = inttoptr i32 %v3_8fd0 to i8*
  store i8 %v1_8fd0, i8* %v4_8fd0, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_8fdc = load i32, i32* @r5, align 4
  store i32 %v0_8fdc, i32* %r1.global-to-local, align 4
  store i32 %v3_8b2c, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-160.0.ph, i32* %r2.global-to-local, align 4
  %v0_8fe8 = load i32, i32* %lr.global-to-local, align 4
  %v6_8ff0 = inttoptr i32 %v0_8fdc to i32*
  %v7_8ff0 = call i32 @function_121e8(i32 %v3_8b2c, i32* %v6_8ff0, i32 %stack_var_-160.0.ph, i32 16384, i32 %v0_8fe8, i32 16)
  %v3_8ff4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8ff4, i32* %r3.global-to-local, align 4
  %v1_8ff8 = add i32 %v3_8ff4, 1
  store i32 %v1_8ff8, i32* %r0.global-to-local, align 4
  %v1_8ffc = load i32, i32* @fp, align 4
  %v9_8ffc = icmp eq i32 %v1_8ff8, %v1_8ffc
  store i1 %v9_8ffc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8ff8, i32* %stack_var_-40, align 4
  %v6_9004 = icmp slt i32 %v1_8ff8, %v1_8ffc
  br i1 %v6_9004, label %dec_label_pc_8e5c, label %dec_label_pc_8e44

dec_label_pc_900c:                                ; preds = %dec_label_pc_8b3c
  store i32 %v3_8b2c, i32* %r0.global-to-local, align 4
  %v1_9010 = call i32 @function_11960(i32 %v3_8b2c)
  store i32 %v1_9010, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9014

dec_label_pc_9014:                                ; preds = %dec_label_pc_89d8, %dec_label_pc_900c
  %v29_9018 = phi i32 [ %v3_8b2c, %dec_label_pc_89d8 ], [ %v1_9010, %dec_label_pc_900c ]
  store i32 %v3_89d8, i32* %r4.global-to-local, align 4
  store i32 %v15_89d8, i32* %r8.global-to-local, align 4
  store i32 %v21_89d8, i32* %sl.global-to-local, align 4
  ret i32 %v29_9018

dec_label_pc_901c:                                ; preds = %dec_label_pc_8e5c
  %v1_901c = add i32 %v2_8e64, 16
  %v2_901c = inttoptr i32 %v1_901c to i32*
  %v3_901c = load i32, i32* %v2_901c, align 4
  store i32 %v3_901c, i32* %r4.global-to-local, align 4
  %v0_9020 = call i32 @function_e8e4()
  store i32 %v0_9020, i32* %r0.global-to-local, align 4
  %v3_9024 = load i32, i32* %stack_var_-40, align 4
  %v5_902c = mul i32 %v3_9024, 24
  %v0_9030 = load i32, i32* %r4.global-to-local, align 4
  %v1_9034 = load i32, i32* @sb, align 4
  %v2_9034 = add i32 %v1_9034, %v5_902c
  store i32 %v2_9034, i32* %r1.global-to-local, align 4
  %v1_9038 = and i32 %v0_9030, 65280
  store i32 %v1_9038, i32* %r3.global-to-local, align 4
  %v1_9030 = udiv i32 %v0_9030, 256
  %v3_903c = and i32 %v1_9030, 65280
  store i32 %v3_903c, i32* %r2.global-to-local, align 4
  %v3_9040 = mul i32 %v0_9030, 16777216
  store i32 %v3_9040, i32* %ip.global-to-local, align 4
  %v1_9044 = add i32 %v2_9034, 20
  %v2_9044 = inttoptr i32 %v1_9044 to i8*
  %v3_9044 = load i8, i8* %v2_9044, align 1
  %v4_9044 = zext i8 %v3_9044 to i32
  store i32 %v4_9044, i32* %lr.global-to-local, align 4
  %v4_9048 = mul nuw nsw i32 %v1_9038, 256
  %v5_9048 = or i32 %v4_9048, %v3_9040
  store i32 %v5_9048, i32* %ip.global-to-local, align 4
  %v2_9050 = call i32 @llvm.bswap.i32(i32 %v0_9030)
  %v7_9054 = lshr i32 %v0_9020, %v4_9044
  %v8_9054 = add i32 %v7_9054, %v2_9050
  %v3_9060 = mul i32 %v8_9054, 16777216
  %v1_9064 = and i32 %v8_9054, 65280
  store i32 %v1_9064, i32* %r0.global-to-local, align 4
  store i32 %v6_8b18, i32* %r2.global-to-local, align 4
  %v4_9070 = mul nuw nsw i32 %v1_9064, 256
  %v5_9070 = or i32 %v4_9070, %v3_9060
  store i32 %v5_9070, i32* %r1.global-to-local, align 4
  %v2_9074 = call i32 @llvm.bswap.i32(i32 %v8_9054)
  store i32 %v2_9074, i32* %r3.global-to-local, align 4
  store i1 %v7_8e8c, i1* %cpsr_z.global-to-local, align 1
  %v1_907c = load i32, i32* @r5, align 4
  %v2_907c = add i32 %v1_907c, 16
  %v3_907c = inttoptr i32 %v2_907c to i32*
  store i32 %v2_9074, i32* %v3_907c, align 4
  br i1 %v2_8e8c, label %dec_label_pc_9084, label %dec_label_pc_8e94

dec_label_pc_9084:                                ; preds = %dec_label_pc_901c, %dec_label_pc_8e88
  %v0_9084 = call i32 @function_e8e4()
  store i32 %v0_9084, i32* %r0.global-to-local, align 4
  store i32 %v3_8b7c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9094, i1* %cpsr_z.global-to-local, align 1
  %v1_9098 = load i32, i32* @r5, align 4
  %v2_9098 = add i32 %v1_9098, 12
  %v3_9098 = inttoptr i32 %v2_9098 to i32*
  store i32 %v0_9084, i32* %v3_9098, align 4
  br i1 %v3_9094, label %dec_label_pc_90a0, label %dec_label_pc_9084.dec_label_pc_8ea8_crit_edge

dec_label_pc_9084.dec_label_pc_8ea8_crit_edge:    ; preds = %dec_label_pc_9084
  %v1_8eac.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_8ea8

dec_label_pc_90a0:                                ; preds = %dec_label_pc_9084, %dec_label_pc_8e94
  %v0_90a0 = call i32 @function_e8e4()
  %v3_90a8 = urem i32 %v0_90a0, 65536
  store i32 %v3_90a8, i32* %r0.global-to-local, align 4
  %v1_90b0 = sub nsw i32 999, %v3_90a8
  store i32 %v1_90b0, i32* %r2.global-to-local, align 4
  %v3_90b4 = sdiv i32 %v1_90b0, 256
  store i32 %v3_90b4, i32* %r1.global-to-local, align 4
  %v3_90b839 = udiv i32 %v3_90a8, 256
  store i32 %v3_90b839, i32* %r3.global-to-local, align 4
  %v1_90bc = trunc i32 %v3_90b839 to i8
  %v2_90bc = load i32, i32* @r5, align 4
  %v3_90bc = add i32 %v2_90bc, 5
  %v4_90bc = inttoptr i32 %v3_90bc to i8*
  store i8 %v1_90bc, i8* %v4_90bc, align 1
  %v0_90c0 = load i32, i32* %r0.global-to-local, align 4
  %v1_90c0 = trunc i32 %v0_90c0 to i8
  %v2_90c0 = load i32, i32* @r5, align 4
  %v3_90c0 = add i32 %v2_90c0, 4
  %v4_90c0 = inttoptr i32 %v3_90c0 to i8*
  store i8 %v1_90c0, i8* %v4_90c0, align 1
  %v0_90c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_90c4 = trunc i32 %v0_90c4 to i8
  %v2_90c4 = load i32, i32* @r6, align 4
  %v3_90c4 = add i32 %v2_90c4, 5
  %v4_90c4 = inttoptr i32 %v3_90c4 to i8*
  store i8 %v1_90c4, i8* %v4_90c4, align 1
  store i32 %v3_8b80, i32* %r1.global-to-local, align 4
  %v1_90cc = load i32, i32* @r4, align 4
  %v9_90cc = icmp eq i32 %v3_8b80, %v1_90cc
  store i1 %v9_90cc, i1* %cpsr_z.global-to-local, align 1
  %v0_90d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_90d0 = trunc i32 %v0_90d0 to i8
  %v2_90d0 = load i32, i32* @r6, align 4
  %v3_90d0 = add i32 %v2_90d0, 4
  %v4_90d0 = inttoptr i32 %v3_90d0 to i8*
  store i8 %v1_90d0, i8* %v4_90d0, align 1
  %v0_90d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_90d4, label %dec_label_pc_90d8, label %dec_label_pc_90a0.dec_label_pc_8eb4_crit_edge

dec_label_pc_90a0.dec_label_pc_8eb4_crit_edge:    ; preds = %dec_label_pc_90a0
  %v1_8eb8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_8eb4

dec_label_pc_90d8:                                ; preds = %dec_label_pc_90a0, %dec_label_pc_8ea8
  %v0_90d8 = call i32 @function_e8e4()
  %v1_90d8 = trunc i32 %v0_90d8 to i8
  store i32 %v0_90d8, i32* %r0.global-to-local, align 4
  store i32 %v3_8b84, i32* %r2.global-to-local, align 4
  %v4_90e0 = sdiv i32 %v0_90d8, 256
  store i32 %v4_90e0, i32* %r3.global-to-local, align 4
  %v1_90e4 = load i32, i32* @r4, align 4
  %v9_90e4 = icmp eq i32 %v3_8b84, %v1_90e4
  store i1 %v9_90e4, i1* %cpsr_z.global-to-local, align 1
  %v3_90e8 = load i32, i32* @r5, align 4
  %v4_90e8 = add i32 %v3_90e8, 58
  %v5_90e8 = inttoptr i32 %v4_90e8 to i8*
  store i8 %v1_90d8, i8* %v5_90e8, align 1
  %v0_90ec = load i32, i32* %r3.global-to-local, align 4
  %v1_90ec = trunc i32 %v0_90ec to i8
  %v2_90ec = load i32, i32* @r7, align 4
  %v3_90ec = add i32 %v2_90ec, 1
  %v4_90ec = inttoptr i32 %v3_90ec to i8*
  store i8 %v1_90ec, i8* %v4_90ec, align 1
  %v0_90f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_90f0, label %dec_label_pc_90f4, label %dec_label_pc_8ec0

dec_label_pc_90f4:                                ; preds = %dec_label_pc_90d8, %dec_label_pc_8eb4
  %v0_90f4 = call i32 @function_e8e4()
  %v1_90f4 = trunc i32 %v0_90f4 to i8
  store i32 %v0_90f4, i32* %r0.global-to-local, align 4
  %v4_90f843 = udiv i32 %v0_90f4, 256
  %v1_90fc = trunc i32 %v4_90f843 to i8
  %v2_90fc = load i32, i32* @r7, align 4
  %v3_90fc = add i32 %v2_90fc, 3
  %v4_90fc = inttoptr i32 %v3_90fc to i8*
  store i8 %v1_90fc, i8* %v4_90fc, align 1
  store i32 %v1_8b74, i32* %r3.global-to-local, align 4
  store i1 %v2_9104, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9104, label %bb108, label %bb107

bb107:                                            ; preds = %dec_label_pc_90f4
  %v1_9108 = load i32, i32* @r5, align 4
  %v2_9108 = add i32 %v1_9108, 16
  %v3_9108 = inttoptr i32 %v2_9108 to i32*
  %v4_9108 = load i32, i32* %v3_9108, align 4
  store i32 %v4_9108, i32* %r3.global-to-local, align 4
  br label %bb108

bb108:                                            ; preds = %dec_label_pc_90f4, %bb107
  %v3_910c = load i32, i32* @r7, align 4
  %v4_910c = add i32 %v3_910c, 2
  %v5_910c = inttoptr i32 %v4_910c to i8*
  store i8 %v1_90f4, i8* %v5_910c, align 1
  %v0_9110 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9110, label %dec_label_pc_9118, label %bb109

bb109:                                            ; preds = %bb108
  %v1_9110 = load i32, i32* %r3.global-to-local, align 4
  %v2_9110 = load i32, i32* @r6, align 4
  %v3_9110 = add i32 %v2_9110, 16
  %v4_9110 = inttoptr i32 %v3_9110 to i32*
  store i32 %v1_9110, i32* %v4_9110, align 4
  br label %dec_label_pc_8ed4

dec_label_pc_9118:                                ; preds = %dec_label_pc_8ec0, %bb108
  %v0_9118 = call i32 @function_e8e4()
  store i32 %v0_9118, i32* %r0.global-to-local, align 4
  %v1_911c = load i32, i32* @r6, align 4
  %v2_911c = add i32 %v1_911c, 16
  %v3_911c = inttoptr i32 %v2_911c to i32*
  store i32 %v0_9118, i32* %v3_911c, align 4
  br label %dec_label_pc_8ed4

dec_label_pc_9124:                                ; preds = %dec_label_pc_8ed4
  %v0_9124 = load i32, i32* @r7, align 4
  %v1_9124 = add i32 %v0_9124, 8
  store i32 %v1_9124, i32* %r0.global-to-local, align 4
  store i32 %v6_8ac4, i32* @r1, align 4
  %v1_912c = inttoptr i32 %v1_9124 to i8*
  %v2_912c = call i32 @function_ea64(i8* %v1_912c)
  store i32 %v2_912c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8f38

dec_label_pc_9134:                                ; preds = %dec_label_pc_8b64
  %v1_913c = add i32 %v6_8ac4, 8
  store i32 %v1_913c, i32* %r1.global-to-local, align 4
  %v1_9140 = add i32 %v6_8ac4, 66
  store i32 %v1_9140, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_8e44.preheader

; uselistorder directives
  uselistorder i32 %v1_9140, { 1, 0 }
  uselistorder i32 %v1_913c, { 1, 0 }
  uselistorder i32 %v0_90f4, { 0, 2, 1 }
  uselistorder i32 %v0_90d8, { 0, 2, 1 }
  uselistorder i32 %v3_90a8, { 0, 2, 1 }
  uselistorder i32 %v2_9074, { 1, 0 }
  uselistorder i32 %v8_9054, { 1, 2, 0 }
  uselistorder i32 %v3_9040, { 1, 0 }
  uselistorder i32 %v0_9030, { 2, 0, 1, 3 }
  uselistorder i32 %v1_8ffc, { 1, 2, 0 }
  uselistorder i32 %v1_8ff8, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_8f9c, { 1, 0, 2 }
  uselistorder i32 %v4_8f98, { 0, 2, 1 }
  uselistorder i32 %v0_8f78, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_8f68, { 0, 2, 1 }
  uselistorder i32 %v4_8f4c, { 1, 0 }
  uselistorder i32 %v7_8e70, { 2, 1, 0, 3 }
  uselistorder i32 %v0_8e44, { 1, 0 }
  uselistorder i1 %v7_8e8c, { 2, 1, 0 }
  uselistorder i1 %v2_9104, { 2, 3, 1, 0 }
  uselistorder i1 %v3_9094, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8dcc, { 1, 0, 2 }
  uselistorder i32 %v3_8c54, { 1, 0, 2 }
  uselistorder i32 %v3_8c34, { 1, 0 }
  uselistorder i32 %tmp91, { 1, 0 }
  uselistorder i32 %v1_8bd8, { 1, 0 }
  uselistorder i32 %v1_8bd4, { 2, 1, 0 }
  uselistorder i32 %v1_8bc0, { 1, 0 }
  uselistorder i32 %v1_8bbc, { 2, 1, 0 }
  uselistorder i32 %v1_8bb4, { 0, 2, 1 }
  uselistorder i32 %v3_8bac, { 2, 1, 0 }
  uselistorder i32 %v0_8b88, { 1, 0, 2 }
  uselistorder i32 %v3_8b7c, { 2, 1, 3, 0 }
  uselistorder i32 %v1_8b74, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v3_8b70, { 1, 0 }
  uselistorder i32 %v0_8b70, { 2, 1, 0 }
  uselistorder i32 %v0_8b68, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_8b64, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_8b5c, { 1, 0 }
  uselistorder i1 %v7_8b30, { 1, 0 }
  uselistorder i32 %v3_8b2c, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_8b18, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_8ae4, { 1, 2, 3, 0 }
  uselistorder i32 %v6_8ac4, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_8a78, { 1, 2, 0 }
  uselistorder i32 %v6_8a4c, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v6_8a10, { 1, 2, 0 }
  uselistorder i32 %v2_89f8, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_89dc, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 31, 32, 34, 1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 46, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 39, 40, 42, 41, 43, 44, 46, 45, 48, 47, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 4, 6, 9, 10, 7, 8, 12, 11, 13, 3, 14, 15, 16, 2, 17, 18, 20, 19, 21, 22, 23, 24, 26, 25, 30, 27, 28, 29, 33, 31, 32, 1, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder label %dec_label_pc_9118, { 1, 0 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %dec_label_pc_9014, { 1, 0 }
  uselistorder label %dec_label_pc_8f38, { 1, 0 }
  uselistorder label %dec_label_pc_8ed4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8e44.preheader, { 1, 0 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
}

define i32 @function_9154(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9154:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_9154 = load i32, i32* @r4, align 4
  %v15_9154 = load i32, i32* @r8, align 4
  %v1_9158 = urem i32 %arg1, 256
  store i32 %v1_9158, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_9158, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_9170 = urem i32 %arg3, 256
  store i32 %v1_9170, i32* @r4, align 4
  %v2_9174 = call i32 @function_12538(i32 %v1_9158, i32 4)
  %v0_9178 = load i32, i32* @r5, align 4
  store i32 %v0_9178, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9188 = load i32, i32* @r4, align 4
  store i32 %v0_9188, i32* %r0.global-to-local, align 4
  %v5_918c = inttoptr i32 %v0_9178 to i32*
  %v6_918c = call i32 @function_85e0(i32 %v0_9188, i32* %v5_918c, i32 2, i32 0, i32 %v2_9174)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_91a4 = load i32, i32* @r5, align 4
  store i32 %v0_91a4, i32* %r1.global-to-local, align 4
  %v0_91a8 = load i32, i32* @r4, align 4
  store i32 %v0_91a8, i32* %r0.global-to-local, align 4
  %v5_91ac = trunc i32 %v6_918c to i8
  %v6_91b0 = inttoptr i32 %v0_91a4 to i32*
  %v7_91b0 = call i32 @function_85e0(i32 %v0_91a8, i32* %v6_91b0, i32 3, i32 65535, i32 %v6_918c)
  %v0_91b4 = load i32, i32* @r5, align 4
  store i32 %v0_91b4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_91b0, i32* @r7, align 4
  %v0_91c4 = load i32, i32* @r4, align 4
  store i32 %v0_91c4, i32* %r0.global-to-local, align 4
  %v5_91c8 = inttoptr i32 %v0_91b4 to i32*
  %v6_91c8 = call i32 @function_85e0(i32 %v0_91c4, i32* %v5_91c8, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v0_91d4 = load i32, i32* @r5, align 4
  store i32 %v0_91d4, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_91e0 = load i32, i32* @r4, align 4
  store i32 %v0_91e0, i32* %r0.global-to-local, align 4
  %v5_91e4 = trunc i32 %v6_91c8 to i8
  %v6_91e8 = inttoptr i32 %v0_91d4 to i32*
  %v7_91e8 = call i32 @function_85e0(i32 %v0_91e0, i32* %v6_91e8, i32 5, i32 1, i32 %v6_91c8)
  %v1_91f4 = urem i32 %v7_91e8, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9200 = load i32, i32* @r5, align 4
  store i32 %v0_9200, i32* %r1.global-to-local, align 4
  %v0_9204 = load i32, i32* @r4, align 4
  store i32 %v0_9204, i32* %r0.global-to-local, align 4
  %v5_920c = inttoptr i32 %v0_9200 to i32*
  %v6_920c = call i32 @function_85e0(i32 %v0_9204, i32* %v5_920c, i32 6, i32 65535, i32 %v1_91f4)
  %v0_9214 = load i32, i32* @r5, align 4
  store i32 %v0_9214, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_920c, i32* @sl, align 4
  %v0_9224 = load i32, i32* @r4, align 4
  store i32 %v0_9224, i32* %r0.global-to-local, align 4
  %v5_9228 = inttoptr i32 %v0_9214 to i32*
  %v6_9228 = call i32 @function_85e0(i32 %v0_9224, i32* %v5_9228, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_922c = load i32, i32* @r5, align 4
  store i32 %v0_922c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_9228, i32* @r8, align 4
  %v0_923c = load i32, i32* @r4, align 4
  store i32 %v0_923c, i32* %r0.global-to-local, align 4
  %v5_9240 = inttoptr i32 %v0_922c to i32*
  %v6_9240 = call i32 @function_85e0(i32 %v0_923c, i32* %v5_9240, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9250 = load i32, i32* @r5, align 4
  store i32 %v0_9250, i32* %r1.global-to-local, align 4
  %v0_9254 = load i32, i32* @r4, align 4
  store i32 %v0_9254, i32* %r0.global-to-local, align 4
  %v5_9258 = inttoptr i32 %v0_9250 to i32*
  %v6_9258 = call i32 @function_85e0(i32 %v0_9254, i32* %v5_9258, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9260 = urem i32 %v6_9258, 256
  %v0_9264 = load i32, i32* @r5, align 4
  store i32 %v0_9264, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9270 = load i32, i32* @r4, align 4
  store i32 %v0_9270, i32* %r0.global-to-local, align 4
  %v5_9278 = inttoptr i32 %v0_9264 to i32*
  %v6_9278 = call i32 @function_85e0(i32 %v0_9270, i32* %v5_9278, i32 19, i32 0, i32 %v1_9260)
  %v0_9280 = load i32, i32* @r5, align 4
  store i32 %v0_9280, i32* %r1.global-to-local, align 4
  %v2_9284 = load i32, i32* @global_var_1c93c.50, align 4
  store i32 %v2_9284, i32* %r3.global-to-local, align 4
  store i32 %v6_9278, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9290 = load i32, i32* @r4, align 4
  store i32 %v0_9290, i32* %r0.global-to-local, align 4
  %v5_9294 = inttoptr i32 %v0_9280 to i32*
  %v6_9294 = call i32 @function_85e0(i32 %v0_9290, i32* %v5_9294, i32 25, i32 %v2_9284, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_92a8 = call i32 @function_1224c(i32 2, i32 3, i32 6)
  store i32 %v3_92a8, i32* %r0.global-to-local, align 4
  %v7_92ac = icmp eq i32 %v3_92a8, -1
  store i1 %v7_92ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_92ac, label %dec_label_pc_972c, label %dec_label_pc_92b8

dec_label_pc_92b8:                                ; preds = %dec_label_pc_9154
  store i32 1, i32* %stack_var_-40, align 4
  %v6_92c0 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_92c0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_92d4 = call i32 @function_1221c(i32 %v3_92a8, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_92d4, i32* %r0.global-to-local, align 4
  %v7_92d8 = icmp eq i32 %v6_92d4, -1
  store i1 %v7_92d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_92d8, label %dec_label_pc_9724, label %dec_label_pc_92e0

dec_label_pc_92e0:                                ; preds = %dec_label_pc_92b8
  %v0_92e0 = load i32, i32* @sl, align 4
  %v0_92ec = load i32, i32* @r8, align 4
  %v3_92ec = mul i32 %v0_92ec, 65536
  store i32 %v3_92ec, i32* %r8.global-to-local, align 4
  %v0_92f0 = load i32, i32* @r7, align 4
  %v0_92f4 = load i32, i32* @r6, align 4
  %v1_92f4 = urem i32 %v0_92f4, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_92fc = urem i32 %v0_92e0, 65536
  store i32 %v3_92fc, i32* %r2.global-to-local, align 4
  %v3_9300 = urem i32 %v0_92ec, 65536
  store i32 %v3_9300, i32* %r3.global-to-local, align 4
  %v0_9304 = load i32, i32* @fp, align 4
  %v2_9304 = icmp eq i32 %v0_9304, 0
  store i1 %v2_9304, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %v3_9314 = urem i32 %v0_92f0, 65536
  store i32 %v3_9314, i32* @sl, align 4
  %tmp84 = icmp slt i32 %v0_9304, 1
  br i1 %tmp84, label %dec_label_pc_9850, label %dec_label_pc_9324

dec_label_pc_9324:                                ; preds = %dec_label_pc_92e0
  %v3_9328 = mul i32 %v6_9240, 65536
  %v1_932c = add i32 %v3_9328, 3407872
  %v3_9334 = udiv i32 %v1_932c, 256
  %v0_92f0.not = or i32 %v0_92f0, -65536
  %v1_9344 = xor i32 %v0_92f0.not, 65535
  %v1_9348 = urem i32 %v0_92ec, 256
  %tmp85 = mul nsw i32 %v1_9344, 256
  %v1_9360 = and i32 %v3_9334, 65280
  %v1_9364 = add i32 %v3_9328, 524288
  %v4_9368 = udiv i32 %v1_932c, 16777216
  %v5_9368 = or i32 %v1_9360, %v4_9368
  store i32 %v5_9368, i32* %r0.global-to-local, align 4
  %v1_936c = add i32 %v3_9328, 1835008
  %v1_9374 = and i32 %tmp85, 65280
  store i32 %v1_9374, i32* @lr, align 4
  %tmp86 = udiv i32 %v1_9344, 256
  %tmp87 = udiv i32 %v0_92f0, 256
  %v5_9388 = trunc i32 %tmp86 to i8
  %tmp88 = udiv i32 %v0_92e0, 256
  %sext29 = mul i32 %tmp87, 16777216
  %v4_93a8 = sdiv i32 %sext29, 16777216
  %v3_93b4 = mul nuw nsw i32 %v1_9348, 256
  store i32 %v3_93b4, i32* @r5, align 4
  %v3_93b8 = udiv i32 %v1_9364, 256
  %tmp89 = udiv i32 %v0_92ec, 256
  %v4_93c0 = urem i32 %tmp89, 256
  %v5_93c0 = or i32 %v4_93c0, %v3_93b4
  store i32 %v5_93c0, i32* @r7, align 4
  %v3_93c4 = ashr i32 %sext29, 31
  %v3_93d0 = sdiv i32 %v1_936c, 16777216
  %v1_93d4 = and i32 %v3_93b8, 65280
  store i32 %v1_93d4, i32* @r6, align 4
  %sext30 = mul i32 %tmp88, 16777216
  %v4_93dc = sdiv i32 %sext30, 16777216
  %v3_93e0 = ashr i32 %v1_936c, 31
  %v3_93e4 = udiv i32 %v1_9344, 65536
  %v4_93e8 = udiv i32 %v1_9364, 16777216
  %v5_93e8 = or i32 %v1_93d4, %v4_93e8
  store i32 %v5_93e8, i32* %r8.global-to-local, align 4
  %v3_93f4 = ashr i32 %sext30, 31
  store i32 %v3_93f4, i32* %r1.global-to-local, align 4
  store i32 %v1_9348, i32* %r2.global-to-local, align 4
  %v3_93fc41 = udiv i32 %v1_93d4, 256
  store i32 %v3_93fc41, i32* %r3.global-to-local, align 4
  %v5_9404 = trunc i32 %v3_93f4 to i8
  store i32 0, i32* @r4, align 4
  %sext = mul i32 %v1_932c, 256
  %v4_9468 = sdiv i32 %sext, 16777216
  %sext16 = mul nuw i32 %v4_9368, 16777216
  %v4_9478 = sdiv i32 %sext16, 16777216
  %v2_954c = icmp eq i32 %v1_92f4, 0
  %sext20 = mul i32 %v1_9364, 256
  %v4_956c = sdiv i32 %sext20, 16777216
  %sext21 = mul i32 %v0_92ec, 16777216
  %v7_9584 = sdiv i32 %sext21, 16777216
  %v1_9474 = trunc i32 %v4_9468 to i8
  br label %dec_label_pc_9414

dec_label_pc_9414:                                ; preds = %bb96, %dec_label_pc_9324
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_9420 = call i32 @function_12538(i32 1510, i32 4)
  store i32 %v2_9420, i32* %r0.global-to-local, align 4
  store i32 %v2_9174, i32* %r1.global-to-local, align 4
  %v3_9428 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9428, i32* %r3.global-to-local, align 4
  %v2_942c = load i32, i32* @r4, align 4
  %v5_942c = mul i32 %v2_942c, 4
  %v6_942c = add i32 %v5_942c, %v2_9174
  %v7_942c = inttoptr i32 %v6_942c to i32*
  store i32 %v2_9420, i32* %v7_942c, align 4
  %v0_9430 = load i32, i32* %r1.global-to-local, align 4
  %v1_9430 = load i32, i32* %r3.global-to-local, align 4
  %v4_9430 = mul i32 %v1_9430, 4
  %v5_9430 = add i32 %v4_9430, %v0_9430
  %v6_9430 = inttoptr i32 %v5_9430 to i32*
  %v7_9430 = load i32, i32* %v6_9430, align 4
  store i32 %v7_9430, i32* %r4.global-to-local, align 4
  %v1_9434 = inttoptr i32 %v7_9430 to i8*
  %v2_9434 = load i8, i8* %v1_9434, align 1
  %tmp = urem i8 %v2_9434, 16
  %v1_9438 = zext i8 %tmp to i32
  %v1_943c = or i32 %v1_9438, 64
  store i32 %v1_943c, i32* %r2.global-to-local, align 4
  %v1_9440 = trunc i32 %v1_943c to i8
  store i8 %v1_9440, i8* %v1_9434, align 1
  %v0_9444 = load i32, i32* %r4.global-to-local, align 4
  %v1_9444 = inttoptr i32 %v0_9444 to i8*
  %v2_9444 = load i8, i8* %v1_9444, align 1
  %v1_9448 = and i8 %v2_9444, -16
  %v1_944c = or i8 %v1_9448, 5
  store i32 %v1_91f4, i32* %r2.global-to-local, align 4
  store i8 %v1_944c, i8* %v1_9444, align 1
  %v2_945c = load i32, i32* %r4.global-to-local, align 4
  %v3_945c = add i32 %v2_945c, 1
  %v4_945c = inttoptr i32 %v3_945c to i8*
  store i8 %v5_91ac, i8* %v4_945c, align 1
  store i32 %v6_91c8, i32* %r1.global-to-local, align 4
  %v2_9464 = load i32, i32* %r4.global-to-local, align 4
  %v3_9464 = add i32 %v2_9464, 8
  %v4_9464 = inttoptr i32 %v3_9464 to i8*
  store i8 %v5_91e4, i8* %v4_9464, align 1
  store i32 %v4_9468, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_9470 = load i32, i32* %r2.global-to-local, align 4
  %v9_9470 = icmp eq i32 %v0_9470, 0
  store i1 %v9_9470, i1* %cpsr_z.global-to-local, align 1
  %v2_9474 = load i32, i32* %r4.global-to-local, align 4
  %v3_9474 = add i32 %v2_9474, 3
  %v4_9474 = inttoptr i32 %v3_9474 to i8*
  store i8 %v1_9474, i8* %v4_9474, align 1
  store i32 %v4_9478, i32* %r2.global-to-local, align 4
  %v0_947c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_947c, label %.thread23, label %.thread

.thread:                                          ; preds = %dec_label_pc_9414
  %v1_947c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_947c, i32* %r3.global-to-local, align 4
  %v2_9480 = trunc i32 %v1_947c to i8
  %v3_9480 = load i32, i32* %r4.global-to-local, align 4
  %v4_9480 = add i32 %v3_9480, 7
  %v5_9480 = inttoptr i32 %v4_9480 to i8*
  store i8 %v2_9480, i8* %v5_9480, align 1
  %v0_9484.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9484.pr.pr, label %.thread23, label %bb

bb:                                               ; preds = %.thread
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_9488 = load i32, i32* %r4.global-to-local, align 4
  %v4_9488 = add i32 %v3_9488, 6
  %v5_9488 = inttoptr i32 %v4_9488 to i8*
  store i8 64, i8* %v5_9488, align 1
  br label %.thread23

.thread23:                                        ; preds = %dec_label_pc_9414, %.thread, %bb
  %v0_948c = load i32, i32* %r2.global-to-local, align 4
  %v1_948c = trunc i32 %v0_948c to i8
  %v2_948c = load i32, i32* %r4.global-to-local, align 4
  %v3_948c = add i32 %v2_948c, 2
  %v4_948c = inttoptr i32 %v3_948c to i8*
  store i8 %v1_948c, i8* %v4_948c, align 1
  store i32 %v3_93c4, i32* %r2.global-to-local, align 4
  store i32 %v4_93a8, i32* %r1.global-to-local, align 4
  %v2_949c = load i32, i32* %r4.global-to-local, align 4
  %v3_949c = add i32 %v2_949c, 9
  %v4_949c = inttoptr i32 %v3_949c to i8*
  store i8 47, i8* %v4_949c, align 1
  %v0_94a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_94a0 = trunc i32 %v0_94a0 to i8
  %v2_94a0 = load i32, i32* %r4.global-to-local, align 4
  %v3_94a0 = add i32 %v2_94a0, 5
  %v4_94a0 = inttoptr i32 %v3_94a0 to i8*
  store i8 %v1_94a0, i8* %v4_94a0, align 1
  %v3_94a4 = load i32, i32* %stack_var_-40, align 4
  %v5_94ac = mul i32 %v3_94a4, 24
  store i32 %v5_94ac, i32* %r3.global-to-local, align 4
  store i32 %v6_9294, i32* %r2.global-to-local, align 4
  %v1_94b4 = load i32, i32* %r4.global-to-local, align 4
  %v2_94b4 = add i32 %v1_94b4, 12
  %v3_94b4 = inttoptr i32 %v2_94b4 to i32*
  store i32 %v6_9294, i32* %v3_94b4, align 4
  %v0_94b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_94b8 = load i32, i32* @sb, align 4
  %v2_94b8 = add i32 %v1_94b8, %v0_94b8
  store i32 %v2_94b8, i32* %r3.global-to-local, align 4
  %v0_94bc = load i32, i32* %r1.global-to-local, align 4
  %v1_94bc = trunc i32 %v0_94bc to i8
  %v2_94bc = load i32, i32* %r4.global-to-local, align 4
  %v3_94bc = add i32 %v2_94bc, 4
  %v4_94bc = inttoptr i32 %v3_94bc to i8*
  store i8 %v1_94bc, i8* %v4_94bc, align 1
  %v0_94c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_94c0 = add i32 %v0_94c0, 16
  %v2_94c0 = inttoptr i32 %v1_94c0 to i32*
  %v3_94c0 = load i32, i32* %v2_94c0, align 4
  store i32 %v3_94c0, i32* %r2.global-to-local, align 4
  %v0_94c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_94c4 = add i32 %v0_94c4, 20
  store i32 %v1_94c4, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_94cc = load i32, i32* %r0.global-to-local, align 4
  %v1_94cc = trunc i32 %v0_94cc to i8
  %v3_94cc = add i32 %v0_94c4, 23
  %v4_94cc = inttoptr i32 %v3_94cc to i8*
  store i8 %v1_94cc, i8* %v4_94cc, align 1
  %v0_94d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_94d0 = trunc i32 %v0_94d0 to i8
  %v2_94d0 = load i32, i32* %r1.global-to-local, align 4
  %v3_94d0 = add i32 %v2_94d0, 2
  %v4_94d0 = inttoptr i32 %v3_94d0 to i8*
  store i8 %v1_94d0, i8* %v4_94d0, align 1
  %v0_94d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_94d4 = add i32 %v0_94d4, 24
  %v2_94d4 = inttoptr i32 %v1_94d4 to i8*
  %v3_94d4 = load i8, i8* %v2_94d4, align 1
  %tmp104 = urem i8 %v3_94d4, 16
  %v1_94d8 = zext i8 %tmp104 to i32
  %v1_94dc = or i32 %v1_94d8, 64
  store i32 %v1_94dc, i32* %r3.global-to-local, align 4
  %v1_94e0 = trunc i32 %v1_94dc to i8
  store i8 %v1_94e0, i8* %v2_94d4, align 1
  %v0_94e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_94e4 = load i32, i32* %r4.global-to-local, align 4
  %v2_94e4 = add i32 %v1_94e4, 16
  %v3_94e4 = inttoptr i32 %v2_94e4 to i32*
  store i32 %v0_94e4, i32* %v3_94e4, align 4
  %v0_94e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_94e8 = add i32 %v0_94e8, 24
  %v2_94e8 = inttoptr i32 %v1_94e8 to i8*
  %v3_94e8 = load i8, i8* %v2_94e8, align 1
  %v1_94ec = and i8 %v3_94e8, -16
  %v1_94f0 = or i8 %v1_94ec, 5
  store i8 %v1_94f0, i8* %v2_94e8, align 1
  %v0_94fc = load i32, i32* %r4.global-to-local, align 4
  %v1_94fc = add i32 %v0_94fc, 24
  store i32 %v1_94fc, i32* @r5, align 4
  %v3_9500 = add i32 %v0_94fc, 25
  %v4_9500 = inttoptr i32 %v3_9500 to i8*
  store i8 %v5_91ac, i8* %v4_9500, align 1
  store i32 %v3_93d0, i32* %r1.global-to-local, align 4
  store i32 %tmp86, i32* %r3.global-to-local, align 4
  store i32 %v3_93e0, i32* %r2.global-to-local, align 4
  %v2_9510 = load i32, i32* @r5, align 4
  %v3_9510 = add i32 %v2_9510, 4
  %v4_9510 = inttoptr i32 %v3_9510 to i8*
  store i8 %v5_9388, i8* %v4_9510, align 1
  %v0_9514 = load i32, i32* %r1.global-to-local, align 4
  %v1_9514 = trunc i32 %v0_9514 to i8
  %v2_9514 = load i32, i32* @r5, align 4
  %v3_9514 = add i32 %v2_9514, 2
  %v4_9514 = inttoptr i32 %v3_9514 to i8*
  store i8 %v1_9514, i8* %v4_9514, align 1
  %v0_9518 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9518, label %bb91, label %bb90

bb90:                                             ; preds = %.thread23
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb91

bb91:                                             ; preds = %.thread23, %bb90
  store i32 %v3_93e4, i32* %r1.global-to-local, align 4
  %v0_9520 = load i32, i32* %r2.global-to-local, align 4
  %v1_9520 = trunc i32 %v0_9520 to i8
  %v2_9520 = load i32, i32* @r5, align 4
  %v3_9520 = add i32 %v2_9520, 3
  %v4_9520 = inttoptr i32 %v3_9520 to i8*
  store i8 %v1_9520, i8* %v4_9520, align 1
  store i32 %v6_91c8, i32* %r2.global-to-local, align 4
  %v0_9528 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9528, label %bb93, label %bb92

bb92:                                             ; preds = %bb91
  %v1_9528 = load i32, i32* %r3.global-to-local, align 4
  %v2_9528 = trunc i32 %v1_9528 to i8
  %v3_9528 = load i32, i32* @r5, align 4
  %v4_9528 = add i32 %v3_9528, 6
  %v5_9528 = inttoptr i32 %v4_9528 to i8*
  store i8 %v2_9528, i8* %v5_9528, align 1
  br label %bb93

bb93:                                             ; preds = %bb91, %bb92
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_9530 = load i32, i32* %r1.global-to-local, align 4
  %v1_9530 = trunc i32 %v0_9530 to i8
  %v2_9530 = load i32, i32* @r5, align 4
  %v3_9530 = add i32 %v2_9530, 5
  %v4_9530 = inttoptr i32 %v3_9530 to i8*
  store i8 %v1_9530, i8* %v4_9530, align 1
  %v0_9534 = load i32, i32* %r2.global-to-local, align 4
  %v1_9534 = trunc i32 %v0_9534 to i8
  %v2_9534 = load i32, i32* @r5, align 4
  %v3_9534 = add i32 %v2_9534, 8
  %v4_9534 = inttoptr i32 %v3_9534 to i8*
  store i8 %v1_9534, i8* %v4_9534, align 1
  %v0_9538 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9538, label %bb95, label %bb94

bb94:                                             ; preds = %bb93
  %v1_9538 = load i32, i32* %r0.global-to-local, align 4
  %v2_9538 = trunc i32 %v1_9538 to i8
  %v3_9538 = load i32, i32* @r5, align 4
  %v4_9538 = add i32 %v3_9538, 7
  %v5_9538 = inttoptr i32 %v4_9538 to i8*
  store i8 %v2_9538, i8* %v5_9538, align 1
  br label %bb95

bb95:                                             ; preds = %bb93, %bb94
  %v0_953c = load i32, i32* %r3.global-to-local, align 4
  %v1_953c = trunc i32 %v0_953c to i8
  %v2_953c = load i32, i32* @r5, align 4
  %v3_953c = add i32 %v2_953c, 9
  %v4_953c = inttoptr i32 %v3_953c to i8*
  store i8 %v1_953c, i8* %v4_953c, align 1
  %v0_9540 = call i32 @function_e8e4()
  store i32 %v0_9540, i32* %r0.global-to-local, align 4
  store i32 %v1_92f4, i32* %r1.global-to-local, align 4
  store i1 %v2_954c, i1* %cpsr_z.global-to-local, align 1
  %v1_9550 = sub i32 1023, %v0_9540
  store i32 %v1_9550, i32* %r3.global-to-local, align 4
  br i1 %v2_954c, label %.thread24, label %.thread25

.thread24:                                        ; preds = %bb95
  %v2_9558 = load i32, i32* @r5, align 4
  %v3_9558 = add i32 %v2_9558, 16
  %v4_9558 = inttoptr i32 %v3_9558 to i32*
  store i32 %v1_9550, i32* %v4_9558, align 4
  br label %bb96

.thread25:                                        ; preds = %bb95
  %v1_9554 = load i32, i32* %r4.global-to-local, align 4
  %v2_9554 = add i32 %v1_9554, 16
  %v3_9554 = inttoptr i32 %v2_9554 to i32*
  %v4_9554 = load i32, i32* %v3_9554, align 4
  store i32 %v4_9554, i32* %r3.global-to-local, align 4
  %v2_955c = load i32, i32* @r5, align 4
  %v3_955c = add i32 %v2_955c, 16
  %v4_955c = inttoptr i32 %v3_955c to i32*
  store i32 %v4_9554, i32* %v4_955c, align 4
  br label %bb96

bb96:                                             ; preds = %.thread24, %.thread25
  store i32 %v4_93dc, i32* %r3.global-to-local, align 4
  %v0_9564 = load i32, i32* %r4.global-to-local, align 4
  %v1_9564 = add i32 %v0_9564, 44
  store i32 %v1_9564, i32* @r6, align 4
  %v1_9568 = load i32, i32* @r5, align 4
  %v2_9568 = add i32 %v1_9568, 12
  %v3_9568 = inttoptr i32 %v2_9568 to i32*
  store i32 %v0_9540, i32* %v3_9568, align 4
  store i32 %v4_956c, i32* %r2.global-to-local, align 4
  %v0_9570 = load i32, i32* %r3.global-to-local, align 4
  %v1_9570 = trunc i32 %v0_9570 to i8
  %v2_9570 = load i32, i32* @r6, align 4
  %v3_9570 = inttoptr i32 %v2_9570 to i8*
  store i8 %v1_9570, i8* %v3_9570, align 1
  %v3_9574 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9574, i32* %r3.global-to-local, align 4
  %v0_9578 = load i32, i32* %r2.global-to-local, align 4
  %v1_9578 = trunc i32 %v0_9578 to i8
  %v2_9578 = load i32, i32* @r6, align 4
  %v3_9578 = add i32 %v2_9578, 5
  %v4_9578 = inttoptr i32 %v3_9578 to i8*
  store i8 %v1_9578, i8* %v4_9578, align 1
  %v0_957c = load i32, i32* %r3.global-to-local, align 4
  %v1_957c = add i32 %v0_957c, 1
  store i32 %v1_957c, i32* @r4, align 4
  store i32 %v3_93f4, i32* %r1.global-to-local, align 4
  store i32 %v7_9584, i32* %r2.global-to-local, align 4
  %v1_9588 = load i32, i32* @fp, align 4
  %v9_9588 = icmp eq i32 %v1_957c, %v1_9588
  store i1 %v9_9588, i1* %cpsr_z.global-to-local, align 1
  %v2_958c = load i32, i32* @r6, align 4
  %v3_958c = add i32 %v2_958c, 1
  %v4_958c = inttoptr i32 %v3_958c to i8*
  store i8 %v5_9404, i8* %v4_958c, align 1
  %v0_9590 = load i32, i32* @r7, align 4
  %v1_9590 = trunc i32 %v0_9590 to i8
  %v2_9590 = load i32, i32* @r6, align 4
  %v3_9590 = add i32 %v2_9590, 2
  %v4_9590 = inttoptr i32 %v3_9590 to i8*
  store i8 %v1_9590, i8* %v4_9590, align 1
  %v0_9594 = load i32, i32* %r2.global-to-local, align 4
  %v1_9594 = trunc i32 %v0_9594 to i8
  %v2_9594 = load i32, i32* @r6, align 4
  %v3_9594 = add i32 %v2_9594, 3
  %v4_9594 = inttoptr i32 %v3_9594 to i8*
  store i8 %v1_9594, i8* %v4_9594, align 1
  %v0_9598 = load i32, i32* %r8.global-to-local, align 4
  %v1_9598 = trunc i32 %v0_9598 to i8
  %v2_9598 = load i32, i32* @r6, align 4
  %v3_9598 = add i32 %v2_9598, 4
  %v4_9598 = inttoptr i32 %v3_9598 to i8*
  store i8 %v1_9598, i8* %v4_9598, align 1
  %v0_959c = load i32, i32* @r4, align 4
  store i32 %v0_959c, i32* %stack_var_-40, align 4
  %v5_95a0 = icmp slt i32 %v1_957c, %v1_9588
  br i1 %v5_95a0, label %dec_label_pc_9414, label %dec_label_pc_95a4

dec_label_pc_95a4:                                ; preds = %bb96
  %v1_95ac = add i32 %v6_9240, 8
  store i32 %v1_95ac, i32* %r3.global-to-local, align 4
  %v1_95b0 = add i32 %v6_9240, 52
  store i32 %v1_95b0, i32* %r1.global-to-local, align 4
  %v0_95bc.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_95bc.preheader

dec_label_pc_95bc.preheader:                      ; preds = %dec_label_pc_95a4, %dec_label_pc_9850
  %v0_95bc.pre = phi i32 [ %v0_95bc.pre.pre, %dec_label_pc_95a4 ], [ %v0_9304, %dec_label_pc_9850 ]
  %stack_var_-120.0.ph = phi i32 [ %v1_95b0, %dec_label_pc_95a4 ], [ %v1_985c, %dec_label_pc_9850 ]
  %stack_var_-152.0.ph = phi i32 [ %v1_95ac, %dec_label_pc_95a4 ], [ %v1_9858, %dec_label_pc_9850 ]
  %v2_9834 = icmp eq i32 %v1_9260, 0
  %v2_9634 = icmp eq i32 %v1_92f4, 0
  %v2_9600 = icmp eq i32 %v6_9294, -1
  %v7_9600 = icmp eq i32 %v6_9294, -1
  br label %dec_label_pc_95bc

dec_label_pc_95bc:                                ; preds = %dec_label_pc_9650, %dec_label_pc_95bc.preheader
  %v0_95bc = phi i32 [ %v0_95bc.pre, %dec_label_pc_95bc.preheader ], [ %v1_9714, %dec_label_pc_9650 ]
  %v2_95bc = icmp eq i32 %v0_95bc, 0
  store i1 %v2_95bc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp97 = icmp slt i32 %v0_95bc, 1
  br label %dec_label_pc_95c4

dec_label_pc_95c4:                                ; preds = %dec_label_pc_95c4, %dec_label_pc_95bc
  br i1 %tmp97, label %dec_label_pc_95c4, label %dec_label_pc_95c8

dec_label_pc_95c8:                                ; preds = %dec_label_pc_95c4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  br label %dec_label_pc_95d4

dec_label_pc_95d4:                                ; preds = %dec_label_pc_9650, %dec_label_pc_95c8
  %v1_95e8 = phi i32 [ %v1_9710, %dec_label_pc_9650 ], [ 0, %dec_label_pc_95c8 ]
  %v5_95d8 = mul i32 %v1_95e8, 24
  %v1_95dc = load i32, i32* @sb, align 4
  %v2_95dc = add i32 %v1_95dc, %v5_95d8
  store i32 %v2_95dc, i32* %r3.global-to-local, align 4
  store i32 %v2_9174, i32* %r1.global-to-local, align 4
  %v1_95e4 = add i32 %v2_95dc, 20
  %v2_95e4 = inttoptr i32 %v1_95e4 to i8*
  %v3_95e4 = load i8, i8* %v2_95e4, align 1
  %v4_95e4 = zext i8 %v3_95e4 to i32
  store i32 %v4_95e4, i32* %r2.global-to-local, align 4
  %v4_95e8 = mul i32 %v1_95e8, 4
  %v5_95e8 = add i32 %v4_95e8, %v2_9174
  %v6_95e8 = inttoptr i32 %v5_95e8 to i32*
  %v7_95e8 = load i32, i32* %v6_95e8, align 4
  store i32 %v7_95e8, i32* @r5, align 4
  %v7_95ec = icmp eq i8 %v3_95e4, 31
  store i1 %v7_95ec, i1* %cpsr_z.global-to-local, align 1
  %v1_95f0 = add i32 %v7_95e8, 24
  store i32 %v1_95f0, i32* @r6, align 4
  %v1_95f4 = add i32 %v7_95e8, 44
  store i32 %v1_95f4, i32* @r7, align 4
  %tmp105 = icmp ult i8 %v3_95e4, 32
  br i1 %tmp105, label %dec_label_pc_9734, label %dec_label_pc_95fc

dec_label_pc_95fc:                                ; preds = %dec_label_pc_95d4
  store i32 %v6_9294, i32* %r2.global-to-local, align 4
  store i1 %v7_9600, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9600, label %dec_label_pc_979c, label %dec_label_pc_9608

dec_label_pc_9608:                                ; preds = %dec_label_pc_9734, %dec_label_pc_95fc
  store i32 65535, i32* @r4, align 4
  %v0_9610 = load i32, i32* @sl, align 4
  %v9_9610 = icmp eq i32 %v0_9610, 65535
  store i1 %v9_9610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9610, label %dec_label_pc_97b4, label %dec_label_pc_9618

dec_label_pc_9618:                                ; preds = %dec_label_pc_979c.dec_label_pc_9618_crit_edge, %dec_label_pc_9608
  %v1_961c = phi i32 [ %v1_961c.pre, %dec_label_pc_979c.dec_label_pc_9618_crit_edge ], [ 65535, %dec_label_pc_9608 ]
  store i32 %v3_92fc, i32* %r3.global-to-local, align 4
  %v9_961c = icmp eq i32 %v3_92fc, %v1_961c
  store i1 %v9_961c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_961c, label %dec_label_pc_97ec, label %dec_label_pc_9624

dec_label_pc_9624:                                ; preds = %dec_label_pc_97b4.dec_label_pc_9624_crit_edge, %dec_label_pc_9618
  %v1_9628 = phi i32 [ %v1_9628.pre, %dec_label_pc_97b4.dec_label_pc_9624_crit_edge ], [ %v1_961c, %dec_label_pc_9618 ]
  store i32 %v3_9300, i32* %r1.global-to-local, align 4
  %v9_9628 = icmp eq i32 %v3_9300, %v1_9628
  store i1 %v9_9628, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9628, label %dec_label_pc_9808, label %dec_label_pc_9630

dec_label_pc_9630:                                ; preds = %dec_label_pc_97ec, %dec_label_pc_9624
  store i32 %v1_92f4, i32* %r2.global-to-local, align 4
  store i1 %v2_9634, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9634, label %dec_label_pc_982c, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_9630
  %v1_9638 = load i32, i32* @r5, align 4
  %v2_9638 = add i32 %v1_9638, 16
  %v3_9638 = inttoptr i32 %v2_9638 to i32*
  %v4_9638 = load i32, i32* %v3_9638, align 4
  store i32 %v4_9638, i32* %r3.global-to-local, align 4
  %v2_963c = load i32, i32* @r6, align 4
  %v3_963c = add i32 %v2_963c, 16
  %v4_963c = inttoptr i32 %v3_963c to i32*
  store i32 %v4_9638, i32* %v4_963c, align 4
  br label %dec_label_pc_9644

dec_label_pc_9644:                                ; preds = %bb102, %.thread26
  store i32 %v1_9260, i32* %r3.global-to-local, align 4
  store i1 %v2_9834, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9834, label %dec_label_pc_9650, label %dec_label_pc_9840

dec_label_pc_9650:                                ; preds = %dec_label_pc_9644, %dec_label_pc_982c, %dec_label_pc_9840
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9654 = load i32, i32* @r8, align 4
  %v1_9654 = trunc i32 %v0_9654 to i8
  %v2_9654 = load i32, i32* @r5, align 4
  %v3_9654 = add i32 %v2_9654, 10
  %v4_9654 = inttoptr i32 %v3_9654 to i8*
  store i8 %v1_9654, i8* %v4_9654, align 1
  %v0_9658 = load i32, i32* @r8, align 4
  %v1_9658 = trunc i32 %v0_9658 to i8
  %v2_9658 = load i32, i32* @r5, align 4
  %v3_9658 = add i32 %v2_9658, 11
  %v4_9658 = inttoptr i32 %v3_9658 to i8*
  store i8 %v1_9658, i8* %v4_9658, align 1
  %v0_965c = load i32, i32* @r5, align 4
  store i32 %v0_965c, i32* @r0, align 4
  %v2_9660 = call i32 @function_d0b8(i32 %v0_965c, i32 20)
  %v3_9660 = trunc i32 %v2_9660 to i8
  %v4_9664 = sdiv i32 %v2_9660, 256
  store i32 %v4_9664, i32* %r3.global-to-local, align 4
  %v1_9668 = trunc i32 %v4_9664 to i8
  %v2_9668 = load i32, i32* @r5, align 4
  %v3_9668 = add i32 %v2_9668, 11
  %v4_9668 = inttoptr i32 %v3_9668 to i8*
  store i8 %v1_9668, i8* %v4_9668, align 1
  %v3_966c = load i32, i32* @r5, align 4
  %v4_966c = add i32 %v3_966c, 10
  %v5_966c = inttoptr i32 %v4_966c to i8*
  store i8 %v3_9660, i8* %v5_966c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9674 = load i32, i32* @r8, align 4
  %v1_9674 = trunc i32 %v0_9674 to i8
  %v2_9674 = load i32, i32* @r6, align 4
  %v3_9674 = add i32 %v2_9674, 10
  %v4_9674 = inttoptr i32 %v3_9674 to i8*
  store i8 %v1_9674, i8* %v4_9674, align 1
  %v0_9678 = load i32, i32* @r8, align 4
  %v1_9678 = trunc i32 %v0_9678 to i8
  %v2_9678 = load i32, i32* @r6, align 4
  %v3_9678 = add i32 %v2_9678, 11
  %v4_9678 = inttoptr i32 %v3_9678 to i8*
  store i8 %v1_9678, i8* %v4_9678, align 1
  %v0_967c = load i32, i32* @r6, align 4
  store i32 %v0_967c, i32* @r0, align 4
  %v2_9680 = call i32 @function_d0b8(i32 %v0_967c, i32 20)
  %v3_9680 = trunc i32 %v2_9680 to i8
  store i32 %v2_9680, i32* %r0.global-to-local, align 4
  %v4_9684 = sdiv i32 %v2_9680, 256
  store i32 %v4_9684, i32* %r3.global-to-local, align 4
  %v3_9688 = load i32, i32* @r6, align 4
  %v4_9688 = add i32 %v3_9688, 10
  %v5_9688 = inttoptr i32 %v4_9688 to i8*
  store i8 %v3_9680, i8* %v5_9688, align 1
  %v0_968c = load i32, i32* %r3.global-to-local, align 4
  %v1_968c = trunc i32 %v0_968c to i8
  %v2_968c = load i32, i32* @r6, align 4
  %v3_968c = add i32 %v2_968c, 11
  %v4_968c = inttoptr i32 %v3_968c to i8*
  store i8 %v1_968c, i8* %v4_968c, align 1
  %v0_9690 = load i32, i32* @r7, align 4
  %v1_9690 = add i32 %v0_9690, 4
  %v2_9690 = inttoptr i32 %v1_9690 to i8*
  %v3_9690 = load i8, i8* %v2_9690, align 1
  %v4_9690 = zext i8 %v3_9690 to i32
  store i32 %v4_9690, i32* %r3.global-to-local, align 4
  %v1_9694 = add i32 %v0_9690, 5
  %v2_9694 = inttoptr i32 %v1_9694 to i8*
  %v3_9694 = load i8, i8* %v2_9694, align 1
  %v4_9694 = zext i8 %v3_9694 to i32
  store i32 %v0_9690, i32* @r1, align 4
  %v4_969c = mul nuw nsw i32 %v4_9694, 256
  %v5_969c = or i32 %v4_969c, %v4_9690
  store i32 %v5_969c, i32* %r2.global-to-local, align 4
  %v0_96a0 = load i32, i32* @r8, align 4
  %v1_96a0 = trunc i32 %v0_96a0 to i8
  %v3_96a0 = add i32 %v0_9690, 6
  %v4_96a0 = inttoptr i32 %v3_96a0 to i8*
  store i8 %v1_96a0, i8* %v4_96a0, align 1
  store i32 %stack_var_-152.0.ph, i32* %r3.global-to-local, align 4
  %v0_96a8 = load i32, i32* @r8, align 4
  %v1_96a8 = trunc i32 %v0_96a8 to i8
  %v2_96a8 = load i32, i32* @r7, align 4
  %v3_96a8 = add i32 %v2_96a8, 7
  %v4_96a8 = inttoptr i32 %v3_96a8 to i8*
  store i8 %v1_96a8, i8* %v4_96a8, align 1
  %v0_96ac = load i32, i32* @r6, align 4
  store i32 %v0_96ac, i32* %r0.global-to-local, align 4
  %v4_96b0 = call i32 @function_d114(i32 %v0_96ac, i32 %v0_9690, i32 %v5_969c, i32 %stack_var_-152.0.ph)
  %v5_96b0 = trunc i32 %v4_96b0 to i8
  store i32 %v4_96b0, i32* %r0.global-to-local, align 4
  %v3_96b4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_96b4, i32* %r3.global-to-local, align 4
  %v3_96b8 = mul i32 %v3_96b4, 32
  store i32 %v3_96b8, i32* %r2.global-to-local, align 4
  %v0_96bc = load i32, i32* @r5, align 4
  %v1_96bc = add i32 %v0_96bc, 16
  %v2_96bc = inttoptr i32 %v1_96bc to i32*
  %v3_96bc = load i32, i32* %v2_96bc, align 4
  store i32 %v3_96bc, i32* %r1.global-to-local, align 4
  %v5_96c0 = mul i32 %v3_96b4, 24
  store i32 %v5_96c0, i32* %r2.global-to-local, align 4
  %v4_96c442 = udiv i32 %v4_96b0, 256
  %v1_96c8 = trunc i32 %v4_96c442 to i8
  %v2_96c8 = load i32, i32* @r7, align 4
  %v3_96c8 = add i32 %v2_96c8, 7
  %v4_96c8 = inttoptr i32 %v3_96c8 to i8*
  store i8 %v1_96c8, i8* %v4_96c8, align 1
  %v0_96cc = load i32, i32* %r2.global-to-local, align 4
  %v1_96cc = load i32, i32* @sb, align 4
  %v2_96cc = add i32 %v1_96cc, %v0_96cc
  store i32 %v2_96cc, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_96d4 = load i32, i32* @r7, align 4
  %v4_96d4 = add i32 %v3_96d4, 6
  %v5_96d4 = inttoptr i32 %v4_96d4 to i8*
  store i8 %v5_96b0, i8* %v5_96d4, align 1
  %v0_96d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_96d8 = load i32, i32* %lr.global-to-local, align 4
  %v2_96d8 = add i32 %v1_96d8, 4
  %v3_96d8 = inttoptr i32 %v2_96d8 to i32*
  store i32 %v0_96d8, i32* %v3_96d8, align 4
  %v0_96dc = load i32, i32* %r3.global-to-local, align 4
  %v1_96dc = trunc i32 %v0_96dc to i8
  %v2_96dc = load i32, i32* %r2.global-to-local, align 4
  %v3_96dc = load i32, i32* @sb, align 4
  %v4_96dc = add i32 %v3_96dc, %v2_96dc
  %v5_96dc = inttoptr i32 %v4_96dc to i8*
  store i8 %v1_96dc, i8* %v5_96dc, align 1
  %v0_96e0 = load i32, i32* @r8, align 4
  %v1_96e0 = trunc i32 %v0_96e0 to i8
  %v2_96e0 = load i32, i32* %lr.global-to-local, align 4
  %v3_96e0 = add i32 %v2_96e0, 2
  %v4_96e0 = inttoptr i32 %v3_96e0 to i8*
  store i8 %v1_96e0, i8* %v4_96e0, align 1
  %v0_96e4 = load i32, i32* @r8, align 4
  %v1_96e4 = trunc i32 %v0_96e4 to i8
  %v2_96e4 = load i32, i32* %lr.global-to-local, align 4
  %v3_96e4 = add i32 %v2_96e4, 1
  %v4_96e4 = inttoptr i32 %v3_96e4 to i8*
  store i8 %v1_96e4, i8* %v4_96e4, align 1
  %v0_96e8 = load i32, i32* @r8, align 4
  %v1_96e8 = trunc i32 %v0_96e8 to i8
  %v2_96e8 = load i32, i32* %lr.global-to-local, align 4
  %v3_96e8 = add i32 %v2_96e8, 3
  %v4_96e8 = inttoptr i32 %v3_96e8 to i8*
  store i8 %v1_96e8, i8* %v4_96e8, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_96f4 = load i32, i32* @r5, align 4
  store i32 %v0_96f4, i32* %r1.global-to-local, align 4
  store i32 %v3_92a8, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-120.0.ph, i32* %r2.global-to-local, align 4
  %v0_9700 = load i32, i32* %lr.global-to-local, align 4
  %v6_9708 = inttoptr i32 %v0_96f4 to i32*
  %v7_9708 = call i32 @function_121e8(i32 %v3_92a8, i32* %v6_9708, i32 %stack_var_-120.0.ph, i32 16384, i32 %v0_9700, i32 16)
  %v3_970c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_970c, i32* %r3.global-to-local, align 4
  %v1_9710 = add i32 %v3_970c, 1
  store i32 %v1_9710, i32* %r0.global-to-local, align 4
  %v1_9714 = load i32, i32* @fp, align 4
  %v9_9714 = icmp eq i32 %v1_9710, %v1_9714
  store i1 %v9_9714, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9710, i32* %stack_var_-40, align 4
  %v6_971c = icmp slt i32 %v1_9710, %v1_9714
  br i1 %v6_971c, label %dec_label_pc_95d4, label %dec_label_pc_95bc

dec_label_pc_9724:                                ; preds = %dec_label_pc_92b8
  store i32 %v3_92a8, i32* %r0.global-to-local, align 4
  %v1_9728 = call i32 @function_11960(i32 %v3_92a8)
  store i32 %v1_9728, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_972c

dec_label_pc_972c:                                ; preds = %dec_label_pc_9154, %dec_label_pc_9724
  %v29_9730 = phi i32 [ %v3_92a8, %dec_label_pc_9154 ], [ %v1_9728, %dec_label_pc_9724 ]
  store i32 %v3_9154, i32* %r4.global-to-local, align 4
  store i32 %v15_9154, i32* %r8.global-to-local, align 4
  ret i32 %v29_9730

dec_label_pc_9734:                                ; preds = %dec_label_pc_95d4
  %v1_9734 = add i32 %v2_95dc, 16
  %v2_9734 = inttoptr i32 %v1_9734 to i32*
  %v3_9734 = load i32, i32* %v2_9734, align 4
  store i32 %v3_9734, i32* %r4.global-to-local, align 4
  %v0_9738 = call i32 @function_e8e4()
  store i32 %v0_9738, i32* %r0.global-to-local, align 4
  %v3_973c = load i32, i32* %stack_var_-40, align 4
  %v5_9744 = mul i32 %v3_973c, 24
  %v0_9748 = load i32, i32* %r4.global-to-local, align 4
  %v1_974c = load i32, i32* @sb, align 4
  %v2_974c = add i32 %v1_974c, %v5_9744
  store i32 %v2_974c, i32* %r1.global-to-local, align 4
  %v1_9750 = and i32 %v0_9748, 65280
  store i32 %v1_9750, i32* %r3.global-to-local, align 4
  %v1_9748 = udiv i32 %v0_9748, 256
  %v3_9754 = and i32 %v1_9748, 65280
  store i32 %v3_9754, i32* %r2.global-to-local, align 4
  %v1_975c = add i32 %v2_974c, 20
  %v2_975c = inttoptr i32 %v1_975c to i8*
  %v3_975c = load i8, i8* %v2_975c, align 1
  %v4_975c = zext i8 %v3_975c to i32
  store i32 %v4_975c, i32* %lr.global-to-local, align 4
  %v2_9768 = call i32 @llvm.bswap.i32(i32 %v0_9748)
  %v7_976c = lshr i32 %v0_9738, %v4_975c
  %v8_976c = add i32 %v7_976c, %v2_9768
  %v3_9778 = mul i32 %v8_976c, 16777216
  %v1_977c = and i32 %v8_976c, 65280
  store i32 %v1_977c, i32* %r0.global-to-local, align 4
  store i32 %v6_9294, i32* %r2.global-to-local, align 4
  %v4_9788 = mul nuw nsw i32 %v1_977c, 256
  %v5_9788 = or i32 %v4_9788, %v3_9778
  store i32 %v5_9788, i32* %r1.global-to-local, align 4
  %v2_978c = call i32 @llvm.bswap.i32(i32 %v8_976c)
  store i32 %v2_978c, i32* %r3.global-to-local, align 4
  store i1 %v7_9600, i1* %cpsr_z.global-to-local, align 1
  %v1_9794 = load i32, i32* @r5, align 4
  %v2_9794 = add i32 %v1_9794, 16
  %v3_9794 = inttoptr i32 %v2_9794 to i32*
  store i32 %v2_978c, i32* %v3_9794, align 4
  br i1 %v2_9600, label %dec_label_pc_979c, label %dec_label_pc_9608

dec_label_pc_979c:                                ; preds = %dec_label_pc_9734, %dec_label_pc_95fc
  %v0_979c = call i32 @function_e8e4()
  store i32 %v0_979c, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  %v0_97a8 = load i32, i32* @sl, align 4
  %v9_97a8 = icmp eq i32 %v0_97a8, 65535
  store i1 %v9_97a8, i1* %cpsr_z.global-to-local, align 1
  %v1_97ac = load i32, i32* @r5, align 4
  %v2_97ac = add i32 %v1_97ac, 12
  %v3_97ac = inttoptr i32 %v2_97ac to i32*
  store i32 %v0_979c, i32* %v3_97ac, align 4
  br i1 %v9_97a8, label %dec_label_pc_97b4, label %dec_label_pc_979c.dec_label_pc_9618_crit_edge

dec_label_pc_979c.dec_label_pc_9618_crit_edge:    ; preds = %dec_label_pc_979c
  %v1_961c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9618

dec_label_pc_97b4:                                ; preds = %dec_label_pc_979c, %dec_label_pc_9608
  %v0_97b4 = call i32 @function_e8e4()
  %v3_97bc = urem i32 %v0_97b4, 65536
  store i32 %v3_97bc, i32* %r0.global-to-local, align 4
  %v3_97c015 = udiv i32 %v0_97b4, 256
  %v1_97c4 = trunc i32 %v3_97c015 to i8
  %v2_97c4 = load i32, i32* @r5, align 4
  %v3_97c4 = add i32 %v2_97c4, 5
  %v4_97c4 = inttoptr i32 %v3_97c4 to i8*
  store i8 %v1_97c4, i8* %v4_97c4, align 1
  %v0_97c8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v3_92fc, i32* %r3.global-to-local, align 4
  %v1_97d0 = sub i32 999, %v0_97c8
  store i32 %v1_97d0, i32* %r2.global-to-local, align 4
  %v3_97d4 = sdiv i32 %v1_97d0, 256
  store i32 %v3_97d4, i32* %r1.global-to-local, align 4
  %v1_97d8 = load i32, i32* @r4, align 4
  %v9_97d8 = icmp eq i32 %v3_92fc, %v1_97d8
  store i1 %v9_97d8, i1* %cpsr_z.global-to-local, align 1
  %v1_97dc = trunc i32 %v0_97c8 to i8
  %v2_97dc = load i32, i32* @r5, align 4
  %v3_97dc = add i32 %v2_97dc, 4
  %v4_97dc = inttoptr i32 %v3_97dc to i8*
  store i8 %v1_97dc, i8* %v4_97dc, align 1
  %v0_97e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_97e0 = trunc i32 %v0_97e0 to i8
  %v2_97e0 = load i32, i32* @r6, align 4
  %v3_97e0 = add i32 %v2_97e0, 5
  %v4_97e0 = inttoptr i32 %v3_97e0 to i8*
  store i8 %v1_97e0, i8* %v4_97e0, align 1
  %v0_97e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_97e4 = trunc i32 %v0_97e4 to i8
  %v2_97e4 = load i32, i32* @r6, align 4
  %v3_97e4 = add i32 %v2_97e4, 4
  %v4_97e4 = inttoptr i32 %v3_97e4 to i8*
  store i8 %v1_97e4, i8* %v4_97e4, align 1
  %v0_97e8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_97e8, label %dec_label_pc_97ec, label %dec_label_pc_97b4.dec_label_pc_9624_crit_edge

dec_label_pc_97b4.dec_label_pc_9624_crit_edge:    ; preds = %dec_label_pc_97b4
  %v1_9628.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9624

dec_label_pc_97ec:                                ; preds = %dec_label_pc_97b4, %dec_label_pc_9618
  %v0_97ec = call i32 @function_e8e4()
  %v1_97ec = trunc i32 %v0_97ec to i8
  store i32 %v0_97ec, i32* %r0.global-to-local, align 4
  store i32 %v3_9300, i32* %r1.global-to-local, align 4
  %v4_97f4 = sdiv i32 %v0_97ec, 256
  store i32 %v4_97f4, i32* %r3.global-to-local, align 4
  %v1_97f8 = load i32, i32* @r4, align 4
  %v9_97f8 = icmp eq i32 %v3_9300, %v1_97f8
  store i1 %v9_97f8, i1* %cpsr_z.global-to-local, align 1
  %v3_97fc = load i32, i32* @r5, align 4
  %v4_97fc = add i32 %v3_97fc, 44
  %v5_97fc = inttoptr i32 %v4_97fc to i8*
  store i8 %v1_97ec, i8* %v5_97fc, align 1
  %v0_9800 = load i32, i32* %r3.global-to-local, align 4
  %v1_9800 = trunc i32 %v0_9800 to i8
  %v2_9800 = load i32, i32* @r7, align 4
  %v3_9800 = add i32 %v2_9800, 1
  %v4_9800 = inttoptr i32 %v3_9800 to i8*
  store i8 %v1_9800, i8* %v4_9800, align 1
  %v0_9804 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9804, label %dec_label_pc_9808, label %dec_label_pc_9630

dec_label_pc_9808:                                ; preds = %dec_label_pc_97ec, %dec_label_pc_9624
  %v0_9808 = call i32 @function_e8e4()
  %v1_9808 = trunc i32 %v0_9808 to i8
  store i32 %v0_9808, i32* %r0.global-to-local, align 4
  store i32 %v1_92f4, i32* %r2.global-to-local, align 4
  %v4_9810 = sdiv i32 %v0_9808, 256
  store i32 %v4_9810, i32* %r3.global-to-local, align 4
  store i1 %v2_9634, i1* %cpsr_z.global-to-local, align 1
  %v1_9818 = trunc i32 %v4_9810 to i8
  %v2_9818 = load i32, i32* @r7, align 4
  %v3_9818 = add i32 %v2_9818, 3
  %v4_9818 = inttoptr i32 %v3_9818 to i8*
  store i8 %v1_9818, i8* %v4_9818, align 1
  %v0_981c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_981c, label %bb101, label %bb100

bb100:                                            ; preds = %dec_label_pc_9808
  %v1_981c = load i32, i32* @r5, align 4
  %v2_981c = add i32 %v1_981c, 16
  %v3_981c = inttoptr i32 %v2_981c to i32*
  %v4_981c = load i32, i32* %v3_981c, align 4
  store i32 %v4_981c, i32* %r3.global-to-local, align 4
  br label %bb101

bb101:                                            ; preds = %dec_label_pc_9808, %bb100
  %v3_9820 = load i32, i32* @r7, align 4
  %v4_9820 = add i32 %v3_9820, 2
  %v5_9820 = inttoptr i32 %v4_9820 to i8*
  store i8 %v1_9808, i8* %v5_9820, align 1
  %v0_9824 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9824, label %dec_label_pc_982c, label %bb102

bb102:                                            ; preds = %bb101
  %v1_9824 = load i32, i32* %r3.global-to-local, align 4
  %v2_9824 = load i32, i32* @r6, align 4
  %v3_9824 = add i32 %v2_9824, 16
  %v4_9824 = inttoptr i32 %v3_9824 to i32*
  store i32 %v1_9824, i32* %v4_9824, align 4
  br label %dec_label_pc_9644

dec_label_pc_982c:                                ; preds = %dec_label_pc_9630, %bb101
  %v0_982c = call i32 @function_e8e4()
  store i32 %v0_982c, i32* %r0.global-to-local, align 4
  store i32 %v1_9260, i32* %r3.global-to-local, align 4
  store i1 %v2_9834, i1* %cpsr_z.global-to-local, align 1
  %v1_9838 = load i32, i32* @r6, align 4
  %v2_9838 = add i32 %v1_9838, 16
  %v3_9838 = inttoptr i32 %v2_9838 to i32*
  store i32 %v0_982c, i32* %v3_9838, align 4
  br i1 %v2_9834, label %dec_label_pc_9650, label %dec_label_pc_9840

dec_label_pc_9840:                                ; preds = %dec_label_pc_9644, %dec_label_pc_982c
  %v0_9840 = load i32, i32* @r7, align 4
  %v1_9840 = add i32 %v0_9840, 8
  store i32 %v1_9840, i32* %r0.global-to-local, align 4
  store i32 %v6_9240, i32* @r1, align 4
  %v1_9848 = inttoptr i32 %v1_9840 to i8*
  %v2_9848 = call i32 @function_ea64(i8* %v1_9848)
  store i32 %v2_9848, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9650

dec_label_pc_9850:                                ; preds = %dec_label_pc_92e0
  %v1_9858 = add i32 %v6_9240, 8
  store i32 %v1_9858, i32* %r2.global-to-local, align 4
  %v1_985c = add i32 %v6_9240, 52
  store i32 %v1_985c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_95bc.preheader

; uselistorder directives
  uselistorder i32 %v1_985c, { 1, 0 }
  uselistorder i32 %v1_9858, { 1, 0 }
  uselistorder i32 %v4_9810, { 1, 0 }
  uselistorder i32 %v0_9808, { 0, 2, 1 }
  uselistorder i32 %v0_97ec, { 0, 2, 1 }
  uselistorder i32 %v2_978c, { 1, 0 }
  uselistorder i32 %v8_976c, { 1, 2, 0 }
  uselistorder i32 %v0_9748, { 1, 0, 2 }
  uselistorder i32 %v1_9714, { 1, 2, 0 }
  uselistorder i32 %v1_9710, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_96b4, { 1, 0, 2 }
  uselistorder i32 %v4_96b0, { 0, 2, 1 }
  uselistorder i32 %v0_9690, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_9680, { 0, 2, 1 }
  uselistorder i32 %v4_9664, { 1, 0 }
  uselistorder i32 %v7_95e8, { 1, 0, 2 }
  uselistorder i32 %v0_95bc, { 1, 0 }
  uselistorder i1 %v7_9600, { 2, 1, 0 }
  uselistorder i1 %v2_9834, { 2, 3, 1, 0 }
  uselistorder i32 %v1_957c, { 1, 0, 2 }
  uselistorder i32 %v0_9540, { 1, 0, 2 }
  uselistorder i32 %v3_93f4, { 0, 2, 1 }
  uselistorder i32 %v3_93b4, { 1, 0 }
  uselistorder i32 %tmp86, { 1, 0 }
  uselistorder i32 %v1_936c, { 1, 0 }
  uselistorder i32 %v1_9348, { 1, 0 }
  uselistorder i32 %v1_9344, { 0, 2, 1 }
  uselistorder i32 %v3_9328, { 2, 1, 0 }
  uselistorder i32 %v0_9304, { 1, 0, 2 }
  uselistorder i32 %v1_92f4, { 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_92f0, { 0, 2, 1 }
  uselistorder i32 %v0_92ec, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_92d8, { 1, 0 }
  uselistorder i1 %v7_92ac, { 1, 0 }
  uselistorder i32 %v3_92a8, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_9294, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_9260, { 1, 0, 2, 3 }
  uselistorder i32 %v6_9240, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v6_91c8, { 2, 1, 0, 3 }
  uselistorder i32 %v2_9174, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_9158, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21 }
  uselistorder i32* %r3.global-to-local, { 61, 62, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 0 }
  uselistorder i32* %r2.global-to-local, { 47, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 36, 35, 37, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 40, 39, 4, 5, 2, 3, 7, 6, 8, 11, 9, 10, 12, 14, 13, 15, 16, 21, 17, 18, 19, 20, 24, 22, 23, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 29, 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 28 }
  uselistorder label %dec_label_pc_9840, { 1, 0 }
  uselistorder label %dec_label_pc_982c, { 1, 0 }
  uselistorder label %bb101, { 1, 0 }
  uselistorder label %dec_label_pc_972c, { 1, 0 }
  uselistorder label %dec_label_pc_9650, { 2, 1, 0 }
  uselistorder label %dec_label_pc_95bc.preheader, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb95, { 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %.thread23, { 2, 1, 0 }
}

define i32 @function_9870(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9870:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v24_9870 = load i32, i32* @fp, align 4
  %v1_9874 = urem i32 %arg1, 256
  store i32 %v1_9874, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_988c = urem i32 %arg3, 256
  store i32 %v1_988c, i32* @r4, align 4
  %v2_9890 = call i32 @function_12538(i32 %v1_9874, i32 4)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v2_9890, i32* @sl, align 4
  %v0_989c = load i32, i32* @r7, align 4
  %v2_98a0 = call i32 @function_12538(i32 %v0_989c, i32 4)
  store i32 65535, i32* @r5, align 4
  %v0_98ac = load i32, i32* @r6, align 4
  store i32 %v0_98ac, i32* %r1.global-to-local, align 4
  store i32 %v2_98a0, i32* @sb, align 4
  %v0_98bc = load i32, i32* @r4, align 4
  %v5_98c0 = inttoptr i32 %v0_98ac to i32*
  %v6_98c0 = call i32 @function_85e0(i32 %v0_98bc, i32* %v5_98c0, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v3_98c8 = urem i32 %v6_98c0, 65536
  %v0_98cc = load i32, i32* @r6, align 4
  store i32 %v0_98cc, i32* %r1.global-to-local, align 4
  %v0_98d4 = load i32, i32* @r5, align 4
  %v0_98d8 = load i32, i32* @r4, align 4
  %v5_98e0 = inttoptr i32 %v0_98cc to i32*
  %v6_98e0 = call i32 @function_85e0(i32 %v0_98d8, i32* %v5_98e0, i32 6, i32 %v0_98d4, i32 %v3_98c8)
  %v0_98e4 = load i32, i32* @r6, align 4
  store i32 %v0_98e4, i32* %r1.global-to-local, align 4
  %v3_98e8 = mul i32 %v6_98e0, 65536
  store i32 %v3_98e8, i32* %fp.global-to-local, align 4
  %v0_98f4 = load i32, i32* @r4, align 4
  %v5_98f8 = inttoptr i32 %v0_98e4 to i32*
  %v6_98f8 = call i32 @function_85e0(i32 %v0_98f4, i32* %v5_98f8, i32 0, i32 1024, i32 ptrtoint (i32* @0 to i32))
  %v0_9904 = load i32, i32* @r6, align 4
  store i32 %v0_9904, i32* %r1.global-to-local, align 4
  %v0_9908 = load i32, i32* @r4, align 4
  %v3_9910 = urem i32 %v6_98f8, 65536
  store i32 %v3_9910, i32* @r6, align 4
  %v5_9914 = inttoptr i32 %v0_9904 to i32*
  %v6_9914 = call i32 @function_85e0(i32 %v0_9908, i32* %v5_9914, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v0_9918 = load i32, i32* %fp.global-to-local, align 4
  %v3_9918 = udiv i32 %v0_9918, 65536
  %v1_9920 = load i32, i32* @r5, align 4
  %v9_9920 = icmp eq i32 %v3_9918, %v1_9920
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_9920, label %dec_label_pc_9948, label %bb

bb:                                               ; preds = %dec_label_pc_9870
  %v2_9934 = mul nuw nsw i32 %v3_9918, 256
  %v4_9938 = and i32 %v2_9934, 65280
  %v1_993c = urem i32 %v6_9914, 256
  store i32 %v1_993c, i32* @r8, align 4
  %v5_9940 = udiv i32 %v0_9918, 16777216
  %v6_9940 = or i32 %v4_9938, %v5_9940
  br label %dec_label_pc_9954

dec_label_pc_9948:                                ; preds = %dec_label_pc_9870
  %v1_993c7 = urem i32 %v6_9914, 256
  store i32 %v1_993c7, i32* @r8, align 4
  %v0_9948 = call i32 @function_e8e4()
  %v3_9950 = urem i32 %v0_9948, 65536
  br label %dec_label_pc_9954

dec_label_pc_9954:                                ; preds = %bb, %dec_label_pc_9948
  %storemerge17 = phi i32 [ %v6_9940, %bb ], [ %v3_9950, %dec_label_pc_9948 ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_9954 = load i32, i32* @r7, align 4
  %tmp41 = icmp slt i32 %v0_9954, 1
  br i1 %tmp41, label %dec_label_pc_9afc.preheader, label %dec_label_pc_995c

dec_label_pc_9afc.preheader:                      ; preds = %dec_label_pc_9a58, %dec_label_pc_9954
  %storemerge3.in12.ph = phi i32 [ %v0_9954, %dec_label_pc_9954 ], [ %v1_99b0, %dec_label_pc_9a58 ]
  %tmp424750 = icmp slt i32 %storemerge3.in12.ph, 1
  br i1 %tmp424750, label %dec_label_pc_9ac4, label %dec_label_pc_9ac8.lr.ph

dec_label_pc_995c:                                ; preds = %dec_label_pc_9954
  store i32 %v3_98c8, i32* %r1.global-to-local, align 4
  %v3_9960 = udiv i32 %v6_98c0, 256
  %v5_996c = trunc i32 %v3_9960 to i8
  store i32 %arg2, i32* @r5, align 4
  %v3_9984 = udiv i32 %v6_98c0, 65536
  store i32 %v3_9984, i32* @r4, align 4
  %v4_9994 = trunc i32 %v3_9984 to i8
  store i8 %v4_9994, i8* %stack_var_-80, align 1
  %v3_9aa4 = icmp eq i32 %v3_98c8, 65535
  %v2_99cc = ptrtoint i32* %stack_var_-52 to i32
  %v3_99fc = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_9a88

dec_label_pc_999c:                                ; preds = %dec_label_pc_9a88
  %v2_999c = load i8, i8* %stack_var_-80, align 1
  %v3_999c = sext i8 %v2_999c to i32
  store i32 %v3_999c, i32* %r1.global-to-local, align 4
  store i32 %v3_9960, i32* @r4, align 4
  %v2_99a0 = load i32, i32* @r5, align 4
  %v3_99a0 = add i32 %v2_99a0, 2
  %v4_99a0 = inttoptr i32 %v3_99a0 to i8*
  store i8 %v5_996c, i8* %v4_99a0, align 1
  %v0_99a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_99a4 = trunc i32 %v0_99a4 to i8
  %v2_99a4 = load i32, i32* @r5, align 4
  %v3_99a4 = add i32 %v2_99a4, 3
  %v4_99a4 = inttoptr i32 %v3_99a4 to i8*
  store i8 %v1_99a4, i8* %v4_99a4, align 1
  br label %dec_label_pc_99a8

dec_label_pc_99a8:                                ; preds = %dec_label_pc_9ab0, %dec_label_pc_999c
  %v1_99b0 = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_99c0 = call i32 @function_1224c(i32 2, i32 2, i32 0)
  store i32 %stack_var_-60.0, i32* @r4, align 4
  %v7_99c8 = icmp eq i32 %v3_99c0, -1
  store i32 %v2_99cc, i32* %r1.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v2_99dc = load i32, i32* @sb, align 4
  %v3_99dc = add i32 %v2_99dc, %stack_var_-60.0
  %v4_99dc = inttoptr i32 %v3_99dc to i32*
  store i32 %v3_99c0, i32* %v4_99dc, align 4
  br i1 %v7_99c8, label %dec_label_pc_9b08, label %dec_label_pc_99e4

dec_label_pc_99e4:                                ; preds = %dec_label_pc_99a8
  store i32 2, i32* %stack_var_-52, align 4
  %v4_99fc = call i32 @function_1207c(i32 %v3_99c0, %sockaddr* %v3_99fc, i32 16)
  %v0_9a00 = load i32, i32* @r5, align 4
  %v1_9a00 = add i32 %v0_9a00, 20
  %v2_9a00 = inttoptr i32 %v1_9a00 to i8*
  %v3_9a00 = load i8, i8* %v2_9a00, align 1
  %tmp = icmp ugt i8 %v3_9a00, 31
  br i1 %tmp, label %dec_label_pc_9a58, label %dec_label_pc_9a0c

dec_label_pc_9a0c:                                ; preds = %dec_label_pc_99e4
  %v1_9a0c = add i32 %v0_9a00, 16
  %v2_9a0c = inttoptr i32 %v1_9a0c to i32*
  %v3_9a0c = load i32, i32* %v2_9a0c, align 4
  store i32 %v3_9a0c, i32* @r4, align 4
  %v0_9a10 = call i32 @function_e8e4()
  %v0_9a14 = load i32, i32* @r4, align 4
  %v1_9a18 = and i32 %v0_9a14, 65280
  %v3_9a20 = mul i32 %v0_9a14, 16777216
  %v4_9a24 = mul nuw nsw i32 %v1_9a18, 256
  %v5_9a24 = or i32 %v4_9a24, %v3_9a20
  store i32 %v5_9a24, i32* %r1.global-to-local, align 4
  %v0_9a2c = load i32, i32* @r5, align 4
  %v1_9a2c = add i32 %v0_9a2c, 20
  %v2_9a2c = inttoptr i32 %v1_9a2c to i8*
  %v3_9a2c = load i8, i8* %v2_9a2c, align 1
  %v4_9a2c = zext i8 %v3_9a2c to i32
  %v2_9a30 = call i32 @llvm.bswap.i32(i32 %v0_9a14)
  %v7_9a34 = lshr i32 %v0_9a10, %v4_9a2c
  %v8_9a34 = add i32 %v7_9a34, %v2_9a30
  %v3_9a40 = mul i32 %v8_9a34, 16777216
  %v1_9a44 = and i32 %v8_9a34, 65280
  %v4_9a48 = mul nuw nsw i32 %v1_9a44, 256
  %v5_9a48 = or i32 %v4_9a48, %v3_9a40
  store i32 %v5_9a48, i32* %r1.global-to-local, align 4
  %v2_9a50 = call i32 @llvm.bswap.i32(i32 %v8_9a34)
  %v2_9a54 = add i32 %v0_9a2c, 4
  %v3_9a54 = inttoptr i32 %v2_9a54 to i32*
  store i32 %v2_9a50, i32* %v3_9a54, align 4
  %v0_9a64.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9a58

dec_label_pc_9a58:                                ; preds = %dec_label_pc_99e4, %dec_label_pc_9a0c
  %v0_9a64 = phi i32 [ %v0_9a00, %dec_label_pc_99e4 ], [ %v0_9a64.pre, %dec_label_pc_9a0c ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_9a60 = load i32, i32* @sb, align 4
  %v2_9a60 = add i32 %v1_9a60, %stack_var_-60.0
  %v3_9a60 = inttoptr i32 %v2_9a60 to i32*
  %v4_9a60 = load i32, i32* %v3_9a60, align 4
  store i32 %v0_9a64, i32* %r1.global-to-local, align 4
  %v3_9a68 = inttoptr i32 %v0_9a64 to %sockaddr*
  %v4_9a68 = call i32 @function_120a8(i32 %v4_9a60, %sockaddr* %v3_9a68, i32 16)
  %v1_9a74 = add i32 %stack_var_-60.0, 4
  %v1_9a78 = load i32, i32* @r7, align 4
  %v9_9a78 = icmp eq i32 %v1_99b0, %v1_9a78
  %v0_9a80 = load i32, i32* @r5, align 4
  %v1_9a80 = add i32 %v0_9a80, 24
  store i32 %v1_9a80, i32* @r5, align 4
  br i1 %v9_9a78, label %dec_label_pc_9afc.preheader, label %dec_label_pc_9a88

dec_label_pc_9a88:                                ; preds = %dec_label_pc_9a58, %dec_label_pc_995c
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_995c ], [ %v1_9a74, %dec_label_pc_9a58 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_995c ], [ %v1_99b0, %dec_label_pc_9a58 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_9a94 = call i32 @function_12538(i32 65535, i32 1)
  store i32 %v3_98c8, i32* %r1.global-to-local, align 4
  %v2_9aa8 = load i32, i32* @sl, align 4
  %v3_9aa8 = add i32 %v2_9aa8, %stack_var_-60.0
  %v4_9aa8 = inttoptr i32 %v3_9aa8 to i32*
  store i32 %v2_9a94, i32* %v4_9aa8, align 4
  br i1 %v3_9aa4, label %dec_label_pc_9ab0, label %dec_label_pc_999c

dec_label_pc_9ab0:                                ; preds = %dec_label_pc_9a88
  %v0_9ab0 = call i32 @function_e8e4()
  %v1_9ab0 = trunc i32 %v0_9ab0 to i8
  %v4_9ab4 = sdiv i32 %v0_9ab0, 256
  %v1_9ab8 = trunc i32 %v4_9ab4 to i8
  %v2_9ab8 = load i32, i32* @r5, align 4
  %v3_9ab8 = add i32 %v2_9ab8, 3
  %v4_9ab8 = inttoptr i32 %v3_9ab8 to i8*
  store i8 %v1_9ab8, i8* %v4_9ab8, align 1
  %v3_9abc = load i32, i32* @r5, align 4
  %v4_9abc = add i32 %v3_9abc, 2
  %v5_9abc = inttoptr i32 %v4_9abc to i8*
  store i8 %v1_9ab0, i8* %v5_9abc, align 1
  br label %dec_label_pc_99a8

dec_label_pc_9ac4:                                ; preds = %dec_label_pc_9afc.loopexit, %dec_label_pc_9afc.preheader, %dec_label_pc_9b00.loopexit, %dec_label_pc_9ac4
  br label %dec_label_pc_9ac4

dec_label_pc_9ac8:                                ; preds = %dec_label_pc_9ac8.lr.ph, %dec_label_pc_9b00.loopexit
  %v0_9ac8 = load i32, i32* @r8, align 4
  %v2_9ac8 = icmp eq i32 %v0_9ac8, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_9ac8, label %dec_label_pc_9ad0, label %dec_label_pc_9b10

dec_label_pc_9ad0:                                ; preds = %dec_label_pc_9ac8
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_9ad8

dec_label_pc_9ad8:                                ; preds = %dec_label_pc_9ad8, %dec_label_pc_9ad0
  %v0_9ae0 = phi i32 [ %v1_9ae0, %dec_label_pc_9ad8 ], [ 0, %dec_label_pc_9ad0 ]
  %v0_9ad8 = phi i32 [ %v1_9af4, %dec_label_pc_9ad8 ], [ 0, %dec_label_pc_9ad0 ]
  %v1_9ad8 = load i32, i32* @sb, align 4
  %v2_9ad8 = add i32 %v1_9ad8, %v0_9ad8
  %v3_9ad8 = inttoptr i32 %v2_9ad8 to i32*
  %v4_9ad8 = load i32, i32* %v3_9ad8, align 4
  %v1_9adc = load i32, i32* @sl, align 4
  %v2_9adc = add i32 %v1_9adc, %v0_9ad8
  %v3_9adc = inttoptr i32 %v2_9adc to i32*
  %v4_9adc = load i32, i32* %v3_9adc, align 4
  store i32 %v4_9adc, i32* %r1.global-to-local, align 4
  %v1_9ae0 = add i32 %v0_9ae0, 1
  %v0_9ae4 = load i32, i32* @r6, align 4
  %v4_9aec = inttoptr i32 %v4_9adc to i32*
  %v5_9aec = call i32 @function_121bc(i32 %v4_9ad8, i32* %v4_9aec, i32 %v0_9ae4, i32 16384)
  %v1_9af0 = load i32, i32* @r7, align 4
  %v9_9af0 = icmp eq i32 %v1_9ae0, %v1_9af0
  %v0_9af4 = load i32, i32* @r4, align 4
  %v1_9af4 = add i32 %v0_9af4, 4
  store i32 %v1_9af4, i32* @r4, align 4
  br i1 %v9_9af0, label %dec_label_pc_9afc.loopexit, label %dec_label_pc_9ad8

dec_label_pc_9afc.loopexit:                       ; preds = %dec_label_pc_9ad8
  %tmp4247 = icmp slt i32 %v1_9ae0, 1
  br i1 %tmp4247, label %dec_label_pc_9ac4, label %dec_label_pc_9ac8.lr.ph

dec_label_pc_9ac8.lr.ph:                          ; preds = %dec_label_pc_9afc.preheader, %dec_label_pc_9afc.loopexit
  br label %dec_label_pc_9ac8

dec_label_pc_9b00.loopexit:                       ; preds = %dec_label_pc_9b18
  %tmp42 = icmp slt i32 %v0_9b40, 1
  br i1 %tmp42, label %dec_label_pc_9ac4, label %dec_label_pc_9ac8

dec_label_pc_9b08:                                ; preds = %dec_label_pc_99a8
  store i32 %v24_9870, i32* %fp.global-to-local, align 4
  ret i32 %v3_99c0

dec_label_pc_9b10:                                ; preds = %dec_label_pc_9ac8
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_9b18

dec_label_pc_9b18:                                ; preds = %dec_label_pc_9b18, %dec_label_pc_9b10
  %v0_9b18 = phi i32 [ %v1_9b44, %dec_label_pc_9b18 ], [ 0, %dec_label_pc_9b10 ]
  %v1_9b18 = load i32, i32* @sl, align 4
  %v2_9b18 = add i32 %v1_9b18, %v0_9b18
  %v3_9b18 = inttoptr i32 %v2_9b18 to i32*
  %v4_9b18 = load i32, i32* %v3_9b18, align 4
  store i32 %v4_9b18, i32* @r4, align 4
  %v0_9b1c = load i32, i32* @r6, align 4
  store i32 %v0_9b1c, i32* @r1, align 4
  %v1_9b24 = inttoptr i32 %v4_9b18 to i8*
  %v2_9b24 = call i32 @function_ea64(i8* %v1_9b24)
  %v0_9b28 = load i32, i32* @r5, align 4
  %v1_9b28 = add i32 %v0_9b28, 1
  store i32 %v1_9b28, i32* @r5, align 4
  %v0_9b2c = load i32, i32* @fp, align 4
  %v1_9b2c = load i32, i32* @sb, align 4
  %v2_9b2c = add i32 %v1_9b2c, %v0_9b2c
  %v3_9b2c = inttoptr i32 %v2_9b2c to i32*
  %v4_9b2c = load i32, i32* %v3_9b2c, align 4
  %v0_9b30 = load i32, i32* @r4, align 4
  store i32 %v0_9b30, i32* %r1.global-to-local, align 4
  %v0_9b34 = load i32, i32* @r6, align 4
  %v4_9b3c = inttoptr i32 %v0_9b30 to i32*
  %v5_9b3c = call i32 @function_121bc(i32 %v4_9b2c, i32* %v4_9b3c, i32 %v0_9b34, i32 16384)
  %v0_9b40 = load i32, i32* @r5, align 4
  %v1_9b40 = load i32, i32* @r7, align 4
  %v9_9b40 = icmp eq i32 %v0_9b40, %v1_9b40
  %v0_9b44 = load i32, i32* @fp, align 4
  %v1_9b44 = add i32 %v0_9b44, 4
  store i32 %v1_9b44, i32* @fp, align 4
  br i1 %v9_9b40, label %dec_label_pc_9b00.loopexit, label %dec_label_pc_9b18

; uselistorder directives
  uselistorder i32 %v1_9b44, { 1, 0 }
  uselistorder i32 %v0_9b40, { 1, 0 }
  uselistorder i32 %v1_9af4, { 1, 0 }
  uselistorder i32 %v1_9ae0, { 2, 0, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 5, 2, 4, 1, 3 }
  uselistorder i32 %v0_9a64, { 1, 0 }
  uselistorder i32 %v8_9a34, { 1, 2, 0 }
  uselistorder i32 %v0_9a14, { 1, 0, 2 }
  uselistorder i32 %v3_99c0, { 1, 3, 2, 0 }
  uselistorder i32 %v1_99b0, { 1, 2, 0 }
  uselistorder i32 %v3_9984, { 1, 0 }
  uselistorder i32 %v3_9960, { 1, 0 }
  uselistorder i32 %v3_98c8, { 0, 3, 1, 2 }
  uselistorder i32 %v1_9874, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 6, 1, 11, 12, 2, 3, 4, 5, 7, 8, 9, 10, 13, 14, 16, 15, 17, 19, 18, 0 }
  uselistorder label %dec_label_pc_9ac8.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_9ac8, { 1, 0 }
  uselistorder label %dec_label_pc_9ac4, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_9a58, { 1, 0 }
  uselistorder label %dec_label_pc_9954, { 1, 0 }
}

define i32 @function_9b54(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9b54:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_9b58 = urem i32 %arg1, 256
  store i32 %v1_9b58, i32* @fp, align 4
  store i32 %v1_9b58, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_9b70 = urem i32 %arg3, 256
  store i32 %v1_9b70, i32* @r4, align 4
  %v2_9b74 = call i32 @function_12538(i32 %v1_9b58, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_9b80 = load i32, i32* @fp, align 4
  store i32 %v0_9b80, i32* %r0.global-to-local, align 4
  %v2_9b84 = call i32 @function_12538(i32 %v0_9b80, i32 4)
  %v0_9b88 = load i32, i32* @r5, align 4
  store i32 %v0_9b88, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9b98 = load i32, i32* @r4, align 4
  store i32 %v0_9b98, i32* %r0.global-to-local, align 4
  %v5_9b9c = inttoptr i32 %v0_9b88 to i32*
  %v6_9b9c = call i32 @function_85e0(i32 %v0_9b98, i32* %v5_9b9c, i32 2, i32 0, i32 %v2_9b84)
  %v1_9ba8 = urem i32 %v6_9b9c, 256
  store i32 %v1_9ba8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9bb4 = load i32, i32* @r5, align 4
  store i32 %v0_9bb4, i32* %r1.global-to-local, align 4
  %v0_9bb8 = load i32, i32* @r4, align 4
  store i32 %v0_9bb8, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_9b9c, 16777216
  %v5_9bc0 = sdiv i32 %sext, 16777216
  %v6_9bc0 = inttoptr i32 %v0_9bb4 to i32*
  %v7_9bc0 = call i32 @function_85e0(i32 %v0_9bb8, i32* %v6_9bc0, i32 3, i32 65535, i32 %v5_9bc0)
  %v0_9bc4 = load i32, i32* @r5, align 4
  store i32 %v0_9bc4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9bc0, i32* @r6, align 4
  %v0_9bd4 = load i32, i32* @r4, align 4
  store i32 %v0_9bd4, i32* %r0.global-to-local, align 4
  %v5_9bd8 = inttoptr i32 %v0_9bc4 to i32*
  %v6_9bd8 = call i32 @function_85e0(i32 %v0_9bd4, i32* %v5_9bd8, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_9be0 = urem i32 %v6_9bd8, 256
  store i32 %v1_9be0, i32* %ip.global-to-local, align 4
  %v0_9be4 = load i32, i32* @r5, align 4
  store i32 %v0_9be4, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9bf0 = load i32, i32* @r4, align 4
  store i32 %v0_9bf0, i32* %r0.global-to-local, align 4
  %sext6 = mul i32 %v6_9bd8, 16777216
  %v5_9bf8 = sdiv i32 %sext6, 16777216
  %v6_9bf8 = inttoptr i32 %v0_9be4 to i32*
  %v7_9bf8 = call i32 @function_85e0(i32 %v0_9bf0, i32* %v6_9bf8, i32 5, i32 1, i32 %v5_9bf8)
  %v1_9c04 = urem i32 %v7_9bf8, 256
  store i32 %v1_9c04, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_9c0c = load i32, i32* @r5, align 4
  store i32 %v0_9c0c, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_9c14 = load i32, i32* @r4, align 4
  store i32 %v0_9c14, i32* %r0.global-to-local, align 4
  %v5_9c1c = inttoptr i32 %v0_9c0c to i32*
  %v6_9c1c = call i32 @function_85e0(i32 %v0_9c14, i32* %v5_9c1c, i32 7, i32 65535, i32 %v1_9c04)
  %v0_9c20 = load i32, i32* @r5, align 4
  store i32 %v0_9c20, i32* %r1.global-to-local, align 4
  %v3_9c24 = mul i32 %v6_9c1c, 65536
  store i32 %v3_9c24, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9c30 = load i32, i32* @r4, align 4
  store i32 %v0_9c30, i32* %r0.global-to-local, align 4
  %v5_9c34 = inttoptr i32 %v0_9c20 to i32*
  %v6_9c34 = call i32 @function_85e0(i32 %v0_9c30, i32* %v5_9c34, i32 11, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9c3c = urem i32 %v6_9c34, 256
  store i32 %v1_9c3c, i32* %ip.global-to-local, align 4
  %v0_9c40 = load i32, i32* @r5, align 4
  store i32 %v0_9c40, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9c4c = load i32, i32* @r4, align 4
  store i32 %v0_9c4c, i32* %r0.global-to-local, align 4
  %v5_9c54 = inttoptr i32 %v0_9c40 to i32*
  %v6_9c54 = call i32 @function_85e0(i32 %v0_9c4c, i32* %v5_9c54, i32 12, i32 1, i32 %v1_9c3c)
  %v1_9c5c = urem i32 %v6_9c54, 256
  store i32 %v1_9c5c, i32* %ip.global-to-local, align 4
  %v0_9c60 = load i32, i32* @r5, align 4
  store i32 %v0_9c60, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9c6c = load i32, i32* @r4, align 4
  store i32 %v0_9c6c, i32* %r0.global-to-local, align 4
  %v5_9c74 = inttoptr i32 %v0_9c60 to i32*
  %v6_9c74 = call i32 @function_85e0(i32 %v0_9c6c, i32* %v5_9c74, i32 13, i32 1, i32 %v1_9c5c)
  %v1_9c7c = urem i32 %v6_9c74, 256
  store i32 %v1_9c7c, i32* %ip.global-to-local, align 4
  %v0_9c80 = load i32, i32* @r5, align 4
  store i32 %v0_9c80, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9c8c = load i32, i32* @r4, align 4
  store i32 %v0_9c8c, i32* %r0.global-to-local, align 4
  %v5_9c94 = inttoptr i32 %v0_9c80 to i32*
  %v6_9c94 = call i32 @function_85e0(i32 %v0_9c8c, i32* %v5_9c94, i32 14, i32 1, i32 %v1_9c7c)
  %v1_9c9c = urem i32 %v6_9c94, 256
  store i32 %v1_9c9c, i32* %ip.global-to-local, align 4
  %v0_9ca0 = load i32, i32* @r5, align 4
  store i32 %v0_9ca0, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9cac = load i32, i32* @r4, align 4
  store i32 %v0_9cac, i32* %r0.global-to-local, align 4
  %v5_9cb4 = inttoptr i32 %v0_9ca0 to i32*
  %v6_9cb4 = call i32 @function_85e0(i32 %v0_9cac, i32* %v5_9cb4, i32 15, i32 1, i32 %v1_9c9c)
  %v1_9cbc = urem i32 %v6_9cb4, 256
  store i32 %v1_9cbc, i32* %ip.global-to-local, align 4
  %v0_9cc0 = load i32, i32* @r5, align 4
  store i32 %v0_9cc0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9ccc = load i32, i32* @r4, align 4
  store i32 %v0_9ccc, i32* %r0.global-to-local, align 4
  %v5_9cd4 = inttoptr i32 %v0_9cc0 to i32*
  %v6_9cd4 = call i32 @function_85e0(i32 %v0_9ccc, i32* %v5_9cd4, i32 16, i32 1, i32 %v1_9cbc)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_9cd4, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_9ce4 = load i32, i32* @r5, align 4
  store i32 %v0_9ce4, i32* %r1.global-to-local, align 4
  %v0_9ce8 = load i32, i32* @r4, align 4
  store i32 %v0_9ce8, i32* %r0.global-to-local, align 4
  %v1_9cec = urem i32 %v6_9cd4, 256
  store i32 %v1_9cec, i32* @r8, align 4
  %v5_9cf0 = inttoptr i32 %v0_9ce4 to i32*
  %v6_9cf0 = call i32 @function_85e0(i32 %v0_9ce8, i32* %v5_9cf0, i32 0, i32 768, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9cfc = load i32, i32* @r5, align 4
  store i32 %v0_9cfc, i32* %r1.global-to-local, align 4
  store i32 %v6_9cf0, i32* @sb, align 4
  %v0_9d04 = load i32, i32* @r4, align 4
  store i32 %v0_9d04, i32* %r0.global-to-local, align 4
  %v5_9d08 = inttoptr i32 %v0_9cfc to i32*
  %v6_9d08 = call i32 @function_85e0(i32 %v0_9d04, i32* %v5_9d08, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_9d14 = urem i32 %v6_9d08, 256
  store i32 %v1_9d14, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9d24 = call i32 @function_1224c(i32 2, i32 3, i32 6)
  store i32 %v3_9d24, i32* %r0.global-to-local, align 4
  %v0_9d28 = load i32, i32* @r7, align 4
  %v3_9d28 = udiv i32 %v0_9d28, 65536
  store i32 %v3_9d28, i32* %r1.global-to-local, align 4
  %v7_9d2c = icmp eq i32 %v3_9d24, -1
  store i1 %v7_9d2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9d2c, label %dec_label_pc_9f88, label %dec_label_pc_9d3c

dec_label_pc_9d3c:                                ; preds = %dec_label_pc_9b54
  store i32 1, i32* %stack_var_-40, align 4
  %v6_9d44 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_9d44, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_9d58 = call i32 @function_1221c(i32 %v3_9d24, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_9d58, i32* %r0.global-to-local, align 4
  %v7_9d5c = icmp eq i32 %v6_9d58, -1
  store i1 %v7_9d5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9d5c, label %dec_label_pc_9f80, label %dec_label_pc_9d64

dec_label_pc_9d64:                                ; preds = %dec_label_pc_9d3c
  %v0_9d64 = load i32, i32* @fp, align 4
  %v2_9d64 = icmp eq i32 %v0_9d64, 0
  store i1 %v2_9d64, i1* %cpsr_z.global-to-local, align 1
  %v0_9d68 = load i32, i32* @r6, align 4
  %v3_9d68 = mul i32 %v0_9d68, 65536
  store i32 %v3_9d68, i32* %r0.global-to-local, align 4
  %v3_9d6c = urem i32 %v0_9d68, 65536
  store i32 %v3_9d6c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_9d64, 1
  br i1 %tmp72, label %.thread18, label %dec_label_pc_9d90.preheader

.thread18:                                        ; preds = %dec_label_pc_9d64
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_a214

dec_label_pc_9d90.preheader:                      ; preds = %dec_label_pc_9d64
  %v5_9d74 = load i32, i32* @r7, align 4
  %v8_9d74 = udiv i32 %v5_9d74, 16777216
  %tmp73 = udiv i32 %v0_9d68, 256
  %v8_9d78 = urem i32 %tmp73, 256
  store i32 %v8_9d78, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_9e7c = icmp ugt i32 %v0_9d28, -65537
  %v2_9ea0 = ptrtoint i32* %stack_var_-60 to i32
  %v3_9eac = bitcast i32* %stack_var_-60 to %sockaddr*
  %v2_9edc = ptrtoint i32* %stack_var_-76 to i32
  %v2_9ee0 = ptrtoint i32* %stack_var_-44 to i32
  %v2_9ee4 = ptrtoint i32* %stack_var_-332 to i32
  %v4_9f30 = zext i8 %tmp31 to i32
  %v4_9f34 = zext i8 %tmp30 to i32
  %v4_9f40 = mul nuw nsw i32 %v4_9f34, 256
  %v4_9f50 = zext i8 %tmp to i32
  %v1_9f54 = and i32 %v4_9f50, 18
  %v2_9f58 = icmp eq i32 %v1_9f54, 18
  %v1_9e8c = mul nuw nsw i32 %v3_9d28, 256
  %v4_9e90 = and i32 %v1_9e8c, 65280
  %v5_9e90 = or i32 %v8_9d74, %v4_9e90
  %v3_9e9493 = udiv i32 %v4_9e90, 256
  %v1_9e98 = trunc i32 %v3_9e9493 to i8
  %v1_a05c = mul i32 %v0_9d68, 256
  %v4_a064 = and i32 %v1_a05c, 65280
  %v5_9f40 = or i32 %v4_9f30, %v4_9f40
  %v1_9f60 = and i32 %v4_9f50, 5
  %v2_9f60 = icmp eq i32 %v1_9f60, 0
  %v1_9e9c = trunc i32 %v8_9d74 to i8
  %v5_a064 = or i32 %v8_9d78, %v4_a064
  %v1_a084 = trunc i32 %v5_9bc0 to i8
  %v1_a164 = urem i32 %v6_9c34, 2
  %tmp94 = sub nsw i32 0, %v1_a164
  %v4_a16c = and i32 %tmp94, 32
  %v1_a17c = urem i32 %v6_9c54, 2
  %tmp95 = sub nsw i32 0, %v1_a17c
  %v4_a184 = and i32 %tmp95, 16
  %v1_a194 = urem i32 %v6_9c74, 2
  %tmp96 = sub nsw i32 0, %v1_a194
  %v4_a19c = and i32 %tmp96, 8
  %v1_a1ac = urem i32 %v6_9c94, 2
  %tmp97 = sub nsw i32 0, %v1_a1ac
  %v4_a1b4 = and i32 %tmp97, 4
  %v1_a1c4 = urem i32 %v6_9cb4, 2
  %tmp98 = sub nsw i32 0, %v1_a1c4
  %v3_a1cc = and i32 %tmp98, 2
  br label %dec_label_pc_9d90

dec_label_pc_9d90:                                ; preds = %dec_label_pc_a200, %dec_label_pc_9f68, %dec_label_pc_9d90.preheader
  store i32 %v8_9d78, i32* %r3.global-to-local, align 4
  %v0_9d9c = load i32, i32* @sb, align 4
  %v1_9d9c = add i32 %v0_9d9c, 40
  store i32 %v1_9d9c, i32* @sl, align 4
  br label %dec_label_pc_9da0

dec_label_pc_9da0:                                ; preds = %dec_label_pc_9f74, %dec_label_pc_9d90
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9dac = call i32 @function_1224c(i32 2, i32 1, i32 0)
  store i32 %v3_9dac, i32* %r0.global-to-local, align 4
  %v7_9db0 = icmp eq i32 %v3_9dac, -1
  store i1 %v7_9db0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9dac, i32* @r7, align 4
  br i1 %v7_9db0, label %dec_label_pc_a200, label %dec_label_pc_9dbc

dec_label_pc_9dbc:                                ; preds = %dec_label_pc_9da0
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_9dc4 = call i32 @function_1189c(i32 %v3_9dac, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_9dcc = or i32 %v2_9dc4, 2048
  store i32 %v1_9dcc, i32* @r2, align 4
  %v0_9dd0 = load i32, i32* @r7, align 4
  store i32 %v0_9dd0, i32* %r0.global-to-local, align 4
  %v2_9dd4 = call i32 @function_1189c(i32 %v0_9dd0, i32 4)
  store i32 %v2_9dd4, i32* %r0.global-to-local, align 4
  %v3_9dd8 = load i32, i32* %stack_var_-40, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9de8 = mul i32 %v3_9dd8, 24
  store i32 %v5_9de8, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v2_9df8 = add i32 %v5_9de8, %arg2
  store i32 %v2_9df8, i32* %r2.global-to-local, align 4
  %v1_9dfc = add i32 %v2_9df8, 20
  %v2_9dfc = inttoptr i32 %v1_9dfc to i8*
  %v3_9dfc = load i8, i8* %v2_9dfc, align 1
  %v4_9dfc = zext i8 %v3_9dfc to i32
  store i32 %v4_9dfc, i32* %r3.global-to-local, align 4
  %v2_9e00 = icmp ugt i8 %v3_9dfc, 30
  %v7_9e00 = icmp eq i8 %v3_9dfc, 31
  store i1 %v7_9e00, i1* %cpsr_z.global-to-local, align 1
  %v2_9e04 = xor i1 %v7_9e00, true
  %v3_9e04 = and i1 %v2_9e00, %v2_9e04
  %v5_9e04 = add i32 %v2_9df8, 16
  %v6_9e04 = inttoptr i32 %v5_9e04 to i32*
  %v7_9e04 = load i32, i32* %v6_9e04, align 4
  br i1 %v3_9e04, label %dec_label_pc_9e70, label %dec_label_pc_9e10

dec_label_pc_9e10:                                ; preds = %dec_label_pc_9dbc
  store i32 %v7_9e04, i32* @r4, align 4
  %v0_9e14 = call i32 @function_e8e4()
  store i32 %v0_9e14, i32* %r0.global-to-local, align 4
  %v3_9e18 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v5_9e24 = mul i32 %v3_9e18, 24
  %v0_9e28 = load i32, i32* @r4, align 4
  %v2_9e2c = add i32 %v5_9e24, %arg2
  store i32 %v2_9e2c, i32* %r1.global-to-local, align 4
  %v1_9e30 = and i32 %v0_9e28, 65280
  store i32 %v1_9e30, i32* %r3.global-to-local, align 4
  %v1_9e28 = udiv i32 %v0_9e28, 256
  %v3_9e34 = and i32 %v1_9e28, 65280
  store i32 %v3_9e34, i32* %r2.global-to-local, align 4
  %v3_9e38 = mul i32 %v0_9e28, 16777216
  store i32 %v3_9e38, i32* %ip.global-to-local, align 4
  %v1_9e3c = add i32 %v2_9e2c, 20
  %v2_9e3c = inttoptr i32 %v1_9e3c to i8*
  %v3_9e3c = load i8, i8* %v2_9e3c, align 1
  %v4_9e3c = zext i8 %v3_9e3c to i32
  store i32 %v4_9e3c, i32* %lr.global-to-local, align 4
  %v4_9e40 = mul nuw nsw i32 %v1_9e30, 256
  %v5_9e40 = or i32 %v4_9e40, %v3_9e38
  store i32 %v5_9e40, i32* %ip.global-to-local, align 4
  %v2_9e48 = call i32 @llvm.bswap.i32(i32 %v0_9e28)
  %v7_9e4c = lshr i32 %v0_9e14, %v4_9e3c
  %v8_9e4c = add i32 %v7_9e4c, %v2_9e48
  store i32 %v8_9e4c, i32* %r2.global-to-local, align 4
  %v3_9e58 = mul i32 %v8_9e4c, 16777216
  %v1_9e5c = and i32 %v8_9e4c, 65280
  store i32 %v1_9e5c, i32* %r0.global-to-local, align 4
  %v4_9e60 = mul nuw nsw i32 %v1_9e5c, 256
  %v5_9e60 = or i32 %v4_9e60, %v3_9e58
  store i32 %v5_9e60, i32* %r1.global-to-local, align 4
  %v2_9e68 = call i32 @llvm.bswap.i32(i32 %v8_9e4c)
  br label %dec_label_pc_9e70

dec_label_pc_9e70:                                ; preds = %dec_label_pc_9dbc, %dec_label_pc_9e10
  %storemerge25 = phi i32 [ %v2_9e68, %dec_label_pc_9e10 ], [ %v7_9e04, %dec_label_pc_9dbc ]
  store i32 %v3_9d28, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_9e7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9e7c, label %dec_label_pc_9f90, label %dec_label_pc_9e84

dec_label_pc_9e84:                                ; preds = %dec_label_pc_9e70
  store i32 %v8_9d74, i32* %ip.global-to-local, align 4
  store i32 %v5_9e90, i32* %r3.global-to-local, align 4
  store i32 %v3_9e9493, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_9ea0

dec_label_pc_9ea0:                                ; preds = %dec_label_pc_9f90, %dec_label_pc_9e84
  %stack_var_-57.0 = phi i8 [ %v1_9f98, %dec_label_pc_9f90 ], [ %v1_9e98, %dec_label_pc_9e84 ]
  %storemerge = phi i8 [ %v1_9f90, %dec_label_pc_9f90 ], [ %v1_9e9c, %dec_label_pc_9e84 ]
  store i32 %v2_9ea0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_9ea8 = load i32, i32* @r7, align 4
  store i32 %v0_9ea8, i32* %r0.global-to-local, align 4
  %v4_9eac = call i32 @function_120a8(i32 %v0_9ea8, %sockaddr* nonnull %v3_9eac, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9eb4 = call i32 @function_11c30(i32* null)
  store i32 %v2_9eb4, i32* %r0.global-to-local, align 4
  store i32 %v2_9eb4, i32* @r4, align 4
  %v9_9f14 = icmp eq i32 %tmp32, %storemerge25
  %v4_9f38 = zext i8 %storemerge to i32
  %v4_9f3c = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_9f14 to i32
  %v9_9f28 = icmp eq i1 %v9_9f14, false
  %v4_9f44 = mul nuw nsw i32 %v4_9f3c, 256
  %v5_9f44 = or i32 %v4_9f44, %v4_9f38
  %v9_9f48 = icmp eq i32 %v5_9f44, %v5_9f40
  br label %dec_label_pc_9ed0

dec_label_pc_9ec0:                                ; preds = %.thread23, %dec_label_pc_9f30, %dec_label_pc_9f60, %bb75
  %v2_9ec0 = call i32 @function_11c30(i32* null)
  %v0_9ec4 = load i32, i32* @r4, align 4
  %v2_9ec4 = sub i32 %v2_9ec0, %v0_9ec4
  store i32 %v2_9ec4, i32* %r0.global-to-local, align 4
  %v7_9ec8 = icmp eq i32 %v2_9ec4, 10
  store i1 %v7_9ec8, i1* %cpsr_z.global-to-local, align 1
  %v8_9ecc = icmp sgt i32 %v2_9ec4, 10
  br i1 %v8_9ecc, label %dec_label_pc_9f74, label %dec_label_pc_9ed0

dec_label_pc_9ed0:                                ; preds = %dec_label_pc_9ec0, %dec_label_pc_9ea0
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  store i32 %v2_9edc, i32* %lr.global-to-local, align 4
  store i32 %v2_9ee0, i32* %ip.global-to-local, align 4
  store i32 %v2_9ee4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_9d24, i32* %r0.global-to-local, align 4
  %v7_9ef8 = call i32 @function_12188(i32 %v3_9d24, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_9edc, i32 %v2_9ee0)
  store i32 %v7_9ef8, i32* %r2.global-to-local, align 4
  %v7_9f00 = icmp eq i32 %v7_9ef8, -1
  store i1 %v7_9f00, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_9f00, label %dec_label_pc_9f88, label %dec_label_pc_9f0c

dec_label_pc_9f0c:                                ; preds = %dec_label_pc_9ed0
  store i32 %tmp32, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_9f20 = icmp eq i32 %v7_9ef8, 40
  store i1 %v7_9f20, i1* %cpsr_z.global-to-local, align 1
  %tmp99 = icmp ult i32 %v7_9ef8, 41
  br i1 %tmp99, label %.thread23, label %bb75

.thread23:                                        ; preds = %dec_label_pc_9f0c
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_9ec0

bb75:                                             ; preds = %dec_label_pc_9f0c
  store i1 %v9_9f28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9f28, label %dec_label_pc_9ec0, label %dec_label_pc_9f30

dec_label_pc_9f30:                                ; preds = %bb75
  store i32 %v4_9f34, i32* %r1.global-to-local, align 4
  store i32 %v4_9f38, i32* %ip.global-to-local, align 4
  store i32 %v4_9f3c, i32* %r2.global-to-local, align 4
  store i32 %v5_9f40, i32* %r3.global-to-local, align 4
  store i32 %v5_9f44, i32* @r5, align 4
  store i1 %v9_9f48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9f48, label %dec_label_pc_9f50, label %dec_label_pc_9ec0

dec_label_pc_9f50:                                ; preds = %dec_label_pc_9f30
  store i32 %v4_9f50, i32* %r2.global-to-local, align 4
  store i32 %v1_9f54, i32* %r3.global-to-local, align 4
  store i1 %v2_9f58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9f58, label %dec_label_pc_9fa4, label %dec_label_pc_9f60

dec_label_pc_9f60:                                ; preds = %dec_label_pc_9f50
  store i1 %v2_9f60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9f60, label %dec_label_pc_9ec0, label %dec_label_pc_9f68

dec_label_pc_9f68:                                ; preds = %dec_label_pc_9f60
  %v0_9f68 = load i32, i32* @r7, align 4
  store i32 %v0_9f68, i32* %r0.global-to-local, align 4
  %v1_9f6c = call i32 @function_11960(i32 %v0_9f68)
  store i32 %v1_9f6c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9d90

dec_label_pc_9f74:                                ; preds = %dec_label_pc_9ec0
  %v0_9f74 = load i32, i32* @r7, align 4
  store i32 %v0_9f74, i32* %r0.global-to-local, align 4
  %v1_9f78 = call i32 @function_11960(i32 %v0_9f74)
  store i32 %v1_9f78, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9da0

dec_label_pc_9f80:                                ; preds = %dec_label_pc_9d3c
  store i32 %v3_9d24, i32* %r0.global-to-local, align 4
  %v1_9f84 = call i32 @function_11960(i32 %v3_9d24)
  store i32 %v1_9f84, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9f88

dec_label_pc_9f88:                                ; preds = %dec_label_pc_9ed0, %dec_label_pc_9b54, %dec_label_pc_9f80
  %v29_9f8c = phi i32 [ %v3_9d24, %dec_label_pc_9b54 ], [ %v1_9f84, %dec_label_pc_9f80 ], [ 0, %dec_label_pc_9ed0 ]
  ret i32 %v29_9f8c

dec_label_pc_9f90:                                ; preds = %dec_label_pc_9e70
  %v0_9f90 = call i32 @function_e8e4()
  %v1_9f90 = trunc i32 %v0_9f90 to i8
  store i32 %v0_9f90, i32* %r0.global-to-local, align 4
  %v4_9f94 = sdiv i32 %v0_9f90, 256
  store i32 %v4_9f94, i32* %r3.global-to-local, align 4
  %v1_9f98 = trunc i32 %v4_9f94 to i8
  br label %dec_label_pc_9ea0

dec_label_pc_9fa4:                                ; preds = %dec_label_pc_9f50
  %v3_9fa4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9fa4, i32* @r4, align 4
  store i32 %v2_9b74, i32* %r2.global-to-local, align 4
  %v3_9fac = mul i32 %v3_9fa4, 16
  store i32 %v3_9fac, i32* %ip.global-to-local, align 4
  %v3_9fb0 = add i32 %v3_9fac, %v2_9b74
  %v4_9fb0 = inttoptr i32 %v3_9fb0 to i32*
  store i32 %storemerge25, i32* %v4_9fb0, align 4
  %v0_9fb4 = load i32, i32* @r6, align 4
  %v1_9fb4 = add i32 %v0_9fb4, 4
  %v2_9fb4 = inttoptr i32 %v1_9fb4 to i32*
  %v3_9fb4 = load i32, i32* %v2_9fb4, align 4
  store i32 %v3_9fb4, i32* %r0.global-to-local, align 4
  %v1_9fbc = and i32 %v3_9fb4, 65280
  store i32 %v1_9fbc, i32* %r1.global-to-local, align 4
  store i32 %v2_9b74, i32* %lr.global-to-local, align 4
  %v3_9fc4 = mul i32 %v3_9fb4, 16777216
  %v4_9fcc = mul nuw nsw i32 %v1_9fbc, 256
  %v5_9fcc = or i32 %v4_9fcc, %v3_9fc4
  store i32 %v5_9fcc, i32* %r2.global-to-local, align 4
  %v1_9fd4 = load i32, i32* %ip.global-to-local, align 4
  %v2_9fd4 = add i32 %v1_9fd4, %v2_9b74
  store i32 %v2_9fd4, i32* %ip.global-to-local, align 4
  %v2_9fd8 = call i32 @llvm.bswap.i32(i32 %v3_9fb4)
  store i32 %v2_9fd8, i32* %r3.global-to-local, align 4
  %v2_9fdc = add i32 %v2_9fd4, 4
  %v3_9fdc = inttoptr i32 %v2_9fdc to i32*
  store i32 %v2_9fd8, i32* %v3_9fdc, align 4
  %v0_9fe0 = load i32, i32* @r6, align 4
  %v1_9fe0 = add i32 %v0_9fe0, 8
  %v2_9fe0 = inttoptr i32 %v1_9fe0 to i32*
  %v3_9fe0 = load i32, i32* %v2_9fe0, align 4
  store i32 %v3_9fe0, i32* %r0.global-to-local, align 4
  %v1_9fe8 = and i32 %v3_9fe0, 65280
  store i32 %v1_9fe8, i32* %r1.global-to-local, align 4
  %v3_9fec = mul i32 %v3_9fe0, 16777216
  %v4_9ff4 = mul nuw nsw i32 %v1_9fe8, 256
  %v5_9ff4 = or i32 %v4_9ff4, %v3_9fec
  store i32 %v5_9ff4, i32* %r2.global-to-local, align 4
  %v2_9ffc = call i32 @llvm.bswap.i32(i32 %v3_9fe0)
  store i32 %v2_9ffc, i32* %r3.global-to-local, align 4
  %v1_a000 = load i32, i32* %ip.global-to-local, align 4
  %v2_a000 = add i32 %v1_a000, 8
  %v3_a000 = inttoptr i32 %v2_a000 to i32*
  store i32 %v2_9ffc, i32* %v3_a000, align 4
  %v0_a004 = load i32, i32* @r6, align 4
  %v1_a004 = inttoptr i32 %v0_a004 to i32*
  %v2_a004 = load i32, i32* %v1_a004, align 4
  %v3_a008 = udiv i32 %v2_a004, 65536
  store i32 %v3_a008, i32* %r2.global-to-local, align 4
  %v3_a00c3 = udiv i32 %v2_a004, 16777216
  store i32 %v3_a00c3, i32* %r1.global-to-local, align 4
  %v0_a010 = load i32, i32* @r5, align 4
  %v3_a010 = sdiv i32 %v0_a010, 256
  store i32 %v3_a010, i32* %r3.global-to-local, align 4
  %v1_a014 = trunc i32 %v3_a010 to i8
  %v2_a014 = load i32, i32* %ip.global-to-local, align 4
  %v3_a014 = add i32 %v2_a014, 15
  %v4_a014 = inttoptr i32 %v3_a014 to i8*
  store i8 %v1_a014, i8* %v4_a014, align 1
  %v0_a018 = load i32, i32* %r1.global-to-local, align 4
  %v1_a018 = trunc i32 %v0_a018 to i8
  %v2_a018 = load i32, i32* %ip.global-to-local, align 4
  %v3_a018 = add i32 %v2_a018, 13
  %v4_a018 = inttoptr i32 %v3_a018 to i8*
  store i8 %v1_a018, i8* %v4_a018, align 1
  %v0_a01c = load i32, i32* %r2.global-to-local, align 4
  %v1_a01c = trunc i32 %v0_a01c to i8
  %v2_a01c = load i32, i32* %ip.global-to-local, align 4
  %v3_a01c = add i32 %v2_a01c, 12
  %v4_a01c = inttoptr i32 %v3_a01c to i8*
  store i8 %v1_a01c, i8* %v4_a01c, align 1
  %v0_a020 = load i32, i32* @r5, align 4
  %v1_a020 = trunc i32 %v0_a020 to i8
  %v2_a020 = load i32, i32* %ip.global-to-local, align 4
  %v3_a020 = add i32 %v2_a020, 14
  %v4_a020 = inttoptr i32 %v3_a020 to i8*
  store i8 %v1_a020, i8* %v4_a020, align 1
  %v0_a024 = load i32, i32* @sl, align 4
  store i32 %v0_a024, i32* %r0.global-to-local, align 4
  %v1_a028 = call i32 @function_123e4(i32 %v0_a024)
  store i32 %v1_a028, i32* %r0.global-to-local, align 4
  store i32 %v2_9b84, i32* %r1.global-to-local, align 4
  %v3_a030 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a030, i32* %r2.global-to-local, align 4
  %v2_a034 = load i32, i32* @r4, align 4
  %v5_a034 = mul i32 %v2_a034, 4
  %v6_a034 = add i32 %v5_a034, %v2_9b84
  %v7_a034 = inttoptr i32 %v6_a034 to i32*
  store i32 %v1_a028, i32* %v7_a034, align 4
  %v0_a038 = load i32, i32* %r1.global-to-local, align 4
  %v1_a038 = load i32, i32* %r2.global-to-local, align 4
  %v4_a038 = mul i32 %v1_a038, 4
  %v5_a038 = add i32 %v4_a038, %v0_a038
  %v6_a038 = inttoptr i32 %v5_a038 to i32*
  %v7_a038 = load i32, i32* %v6_a038, align 4
  store i32 %v7_a038, i32* @r4, align 4
  %v1_a03c = inttoptr i32 %v7_a038 to i8*
  %v2_a03c = load i8, i8* %v1_a03c, align 1
  %tmp100 = urem i8 %v2_a03c, 16
  %v1_a040 = zext i8 %tmp100 to i32
  %v1_a044 = or i32 %v1_a040, 64
  store i32 %v1_a044, i32* %r3.global-to-local, align 4
  %v1_a048 = trunc i32 %v1_a044 to i8
  store i8 %v1_a048, i8* %v1_a03c, align 1
  %v0_a04c = load i32, i32* @r4, align 4
  %v1_a04c = inttoptr i32 %v0_a04c to i8*
  %v2_a04c = load i8, i8* %v1_a04c, align 1
  store i32 %v3_9d6c, i32* %ip.global-to-local, align 4
  %v1_a058 = and i8 %v2_a04c, -16
  %v1_a060 = or i8 %v1_a058, 5
  store i32 %v5_a064, i32* %r0.global-to-local, align 4
  %v0_a068 = load i32, i32* @sl, align 4
  %v3_a068 = mul i32 %v0_a068, 65536
  store i32 %v3_a068, i32* %r2.global-to-local, align 4
  store i32 %v1_9c04, i32* %lr.global-to-local, align 4
  store i8 %v1_a060, i8* %v1_a04c, align 1
  store i32 %v5_9bc0, i32* %r1.global-to-local, align 4
  %v0_a078 = load i32, i32* %r2.global-to-local, align 4
  %v3_a078 = udiv i32 %v0_a078, 65536
  %v1_a07c = urem i32 %v3_a078, 256
  store i32 %v1_a07c, i32* %r3.global-to-local, align 4
  %v3_a080 = udiv i32 %v0_a078, 16777216
  store i32 %v3_a080, i32* %r2.global-to-local, align 4
  %v2_a084 = load i32, i32* @r4, align 4
  %v3_a084 = add i32 %v2_a084, 1
  %v4_a084 = inttoptr i32 %v3_a084 to i8*
  store i8 %v1_a084, i8* %v4_a084, align 1
  %v0_a088 = load i32, i32* %r2.global-to-local, align 4
  %v1_a088 = load i32, i32* %r3.global-to-local, align 4
  %v4_a088 = mul i32 %v1_a088, 256
  %v5_a088 = or i32 %v4_a088, %v0_a088
  store i32 %v5_a088, i32* %r2.global-to-local, align 4
  %v1_a08c = trunc i32 %v0_a088 to i8
  %v2_a08c = load i32, i32* @r4, align 4
  %v3_a08c = add i32 %v2_a08c, 2
  %v4_a08c = inttoptr i32 %v3_a08c to i8*
  store i8 %v1_a08c, i8* %v4_a08c, align 1
  %v0_a090 = load i32, i32* %lr.global-to-local, align 4
  %v2_a090 = icmp eq i32 %v0_a090, 0
  store i1 %v2_a090, i1* %cpsr_z.global-to-local, align 1
  %v0_a094 = load i32, i32* %r2.global-to-local, align 4
  %v3_a094 = sdiv i32 %v0_a094, 256
  store i32 %v3_a094, i32* %r3.global-to-local, align 4
  store i32 %v5_9bf8, i32* %r2.global-to-local, align 4
  %v1_a09c = trunc i32 %v3_a094 to i8
  %v2_a09c = load i32, i32* @r4, align 4
  %v3_a09c = add i32 %v2_a09c, 3
  %v4_a09c = inttoptr i32 %v3_a09c to i8*
  store i8 %v1_a09c, i8* %v4_a09c, align 1
  %v0_a0a0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a0a0, label %bb77, label %bb76

bb76:                                             ; preds = %dec_label_pc_9fa4
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %dec_label_pc_9fa4, %bb76
  %v0_a0a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a0a4 = trunc i32 %v0_a0a4 to i8
  %v2_a0a4 = load i32, i32* @r4, align 4
  %v3_a0a4 = add i32 %v2_a0a4, 8
  %v4_a0a4 = inttoptr i32 %v3_a0a4 to i8*
  store i8 %v1_a0a4, i8* %v4_a0a4, align 1
  %v0_a0a8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a0a8, label %.thread5, label %bb78

bb78:                                             ; preds = %bb77
  %v1_a0a8 = load i32, i32* %r3.global-to-local, align 4
  %v2_a0a8 = trunc i32 %v1_a0a8 to i8
  %v3_a0a8 = load i32, i32* @r4, align 4
  %v4_a0a8 = add i32 %v3_a0a8, 6
  %v5_a0a8 = inttoptr i32 %v4_a0a8 to i8*
  store i8 %v2_a0a8, i8* %v5_a0a8, align 1
  %v0_a0ac.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a0ac.pr, label %.thread5, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %bb77, %bb78, %bb79
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_a0b4 = load i32, i32* @r4, align 4
  %v3_a0b4 = add i32 %v2_a0b4, 9
  %v4_a0b4 = inttoptr i32 %v3_a0b4 to i8*
  store i8 6, i8* %v4_a0b4, align 1
  %v0_a0b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a0b8, label %bb81, label %bb80

bb80:                                             ; preds = %.thread5
  %v1_a0b8 = load i32, i32* %r2.global-to-local, align 4
  %v2_a0b8 = trunc i32 %v1_a0b8 to i8
  %v3_a0b8 = load i32, i32* @r4, align 4
  %v4_a0b8 = add i32 %v3_a0b8, 7
  %v5_a0b8 = inttoptr i32 %v4_a0b8 to i8*
  store i8 %v2_a0b8, i8* %v5_a0b8, align 1
  br label %bb81

bb81:                                             ; preds = %.thread5, %bb80
  %v2_a0c0 = load i32, i32* @global_var_1c93c.50, align 4
  store i32 %v2_a0c0, i32* %r3.global-to-local, align 4
  %v0_a0c4 = load i32, i32* %r0.global-to-local, align 4
  %v3_a0c4 = sdiv i32 %v0_a0c4, 256
  store i32 %v3_a0c4, i32* %ip.global-to-local, align 4
  %v1_a0c8 = load i32, i32* @r4, align 4
  %v2_a0c8 = add i32 %v1_a0c8, 12
  %v3_a0c8 = inttoptr i32 %v2_a0c8 to i32*
  store i32 %v2_a0c0, i32* %v3_a0c8, align 4
  %v0_a0cc = load i32, i32* %ip.global-to-local, align 4
  %v1_a0cc = trunc i32 %v0_a0cc to i8
  %v2_a0cc = load i32, i32* @r4, align 4
  %v3_a0cc = add i32 %v2_a0cc, 5
  %v4_a0cc = inttoptr i32 %v3_a0cc to i8*
  store i8 %v1_a0cc, i8* %v4_a0cc, align 1
  %v3_a0d0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a0d0, i32* %r2.global-to-local, align 4
  store i32 %v2_9b74, i32* %ip.global-to-local, align 4
  %v4_a0d8 = mul i32 %v3_a0d0, 16
  %v5_a0d8 = add i32 %v4_a0d8, %v2_9b74
  %v6_a0d8 = inttoptr i32 %v5_a0d8 to i32*
  %v7_a0d8 = load i32, i32* %v6_a0d8, align 4
  store i32 %v7_a0d8, i32* %r3.global-to-local, align 4
  %v0_a0dc = load i32, i32* %r0.global-to-local, align 4
  %v1_a0dc = trunc i32 %v0_a0dc to i8
  %v2_a0dc = load i32, i32* @r4, align 4
  %v3_a0dc = add i32 %v2_a0dc, 4
  %v4_a0dc = inttoptr i32 %v3_a0dc to i8*
  store i8 %v1_a0dc, i8* %v4_a0dc, align 1
  %v0_a0e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a0e0 = load i32, i32* @r4, align 4
  %v2_a0e0 = add i32 %v1_a0e0, 16
  %v3_a0e0 = inttoptr i32 %v2_a0e0 to i32*
  store i32 %v0_a0e0, i32* %v3_a0e0, align 4
  %v0_a0e4 = load i32, i32* %r2.global-to-local, align 4
  %v3_a0e4 = mul i32 %v0_a0e4, 16
  %v1_a0e8 = load i32, i32* %ip.global-to-local, align 4
  %v2_a0e8 = add i32 %v1_a0e8, %v3_a0e4
  store i32 %v2_a0e8, i32* %r2.global-to-local, align 4
  %v1_a0ec = add i32 %v2_a0e8, 13
  %v2_a0ec = inttoptr i32 %v1_a0ec to i8*
  %v3_a0ec = load i8, i8* %v2_a0ec, align 1
  %v4_a0ec = zext i8 %v3_a0ec to i32
  store i32 %v4_a0ec, i32* %r1.global-to-local, align 4
  %v1_a0f0 = add i32 %v2_a0e8, 12
  %v2_a0f0 = inttoptr i32 %v1_a0f0 to i8*
  %v3_a0f0 = load i8, i8* %v2_a0f0, align 1
  %v4_a0f0 = zext i8 %v3_a0f0 to i32
  %v4_a0f4 = mul nuw nsw i32 %v4_a0ec, 256
  %v5_a0f4 = or i32 %v4_a0f0, %v4_a0f4
  store i32 %v5_a0f4, i32* %r3.global-to-local, align 4
  %v2_a0f8 = load i32, i32* @r4, align 4
  %v3_a0f8 = add i32 %v2_a0f8, 20
  %v4_a0f8 = inttoptr i32 %v3_a0f8 to i8*
  store i8 %v3_a0f0, i8* %v4_a0f8, align 1
  %v0_a0fc = load i32, i32* @r4, align 4
  %v1_a0fc = add i32 %v0_a0fc, 20
  store i32 %v1_a0fc, i32* @r6, align 4
  %v0_a100 = load i32, i32* %r3.global-to-local, align 4
  %v3_a100 = sdiv i32 %v0_a100, 256
  store i32 %v3_a100, i32* %r3.global-to-local, align 4
  %v1_a104 = trunc i32 %v3_a100 to i8
  %v3_a104 = add i32 %v0_a0fc, 21
  %v4_a104 = inttoptr i32 %v3_a104 to i8*
  store i8 %v1_a104, i8* %v4_a104, align 1
  %v0_a108 = load i32, i32* @r6, align 4
  %v1_a108 = add i32 %v0_a108, 13
  %v2_a108 = inttoptr i32 %v1_a108 to i8*
  %v3_a108 = load i8, i8* %v2_a108, align 1
  %v4_a108 = zext i8 %v3_a108 to i32
  store i32 %v4_a108, i32* %r3.global-to-local, align 4
  %v0_a10c = load i32, i32* %r2.global-to-local, align 4
  %v1_a10c = add i32 %v0_a10c, 8
  %v2_a10c = inttoptr i32 %v1_a10c to i32*
  %v3_a10c = load i32, i32* %v2_a10c, align 4
  store i32 %v3_a10c, i32* %r1.global-to-local, align 4
  %v1_a110 = or i32 %v4_a108, 1
  store i32 %v1_a110, i32* %r3.global-to-local, align 4
  %v1_a114 = add i32 %v0_a10c, 15
  %v2_a114 = inttoptr i32 %v1_a114 to i8*
  %v3_a114 = load i8, i8* %v2_a114, align 1
  %v4_a114 = zext i8 %v3_a114 to i32
  store i32 %v4_a114, i32* %ip.global-to-local, align 4
  %v1_a118 = add i32 %v0_a10c, 14
  %v2_a118 = inttoptr i32 %v1_a118 to i8*
  %v3_a118 = load i8, i8* %v2_a118, align 1
  %v4_a118 = zext i8 %v3_a118 to i32
  store i32 %v4_a118, i32* %r0.global-to-local, align 4
  %v2_a11c = add i32 %v0_a108, 4
  %v3_a11c = inttoptr i32 %v2_a11c to i32*
  store i32 %v3_a10c, i32* %v3_a11c, align 4
  %v0_a120 = load i32, i32* %r2.global-to-local, align 4
  %v1_a120 = add i32 %v0_a120, 4
  %v2_a120 = inttoptr i32 %v1_a120 to i32*
  %v3_a120 = load i32, i32* %v2_a120, align 4
  store i32 %v3_a120, i32* %lr.global-to-local, align 4
  %v0_a124 = load i32, i32* %r3.global-to-local, align 4
  %v1_a124 = trunc i32 %v0_a124 to i8
  %v2_a124 = load i32, i32* @r6, align 4
  %v3_a124 = add i32 %v2_a124, 13
  %v4_a124 = inttoptr i32 %v3_a124 to i8*
  store i8 %v1_a124, i8* %v4_a124, align 1
  %v0_a128 = load i32, i32* @r6, align 4
  %v1_a128 = add i32 %v0_a128, 12
  %v2_a128 = inttoptr i32 %v1_a128 to i8*
  %v3_a128 = load i8, i8* %v2_a128, align 1
  %v4_a128 = zext i8 %v3_a128 to i32
  store i32 %v4_a128, i32* %r2.global-to-local, align 4
  %v1_a12c = add i32 %v0_a128, 13
  %v2_a12c = inttoptr i32 %v1_a12c to i8*
  %v3_a12c = load i8, i8* %v2_a12c, align 1
  %v4_a12c = zext i8 %v3_a12c to i32
  %v0_a130 = load i32, i32* %r0.global-to-local, align 4
  %v1_a130 = load i32, i32* %ip.global-to-local, align 4
  %v4_a130 = mul i32 %v1_a130, 256
  %v5_a130 = or i32 %v4_a130, %v0_a130
  store i32 %v5_a130, i32* %r0.global-to-local, align 4
  %tmp101 = urem i8 %v3_a128, 16
  %v1_a134 = zext i8 %tmp101 to i32
  %v3_a138 = sdiv i32 %v5_a130, 256
  store i32 %v3_a138, i32* %r1.global-to-local, align 4
  %v1_a13c = or i32 %v1_a134, 128
  store i32 %v1_a13c, i32* %r2.global-to-local, align 4
  %v1_a140 = or i32 %v4_a12c, 16
  store i32 %v1_a140, i32* %r3.global-to-local, align 4
  %v1_a144 = trunc i32 %v3_a138 to i8
  %v3_a144 = add i32 %v0_a128, 3
  %v4_a144 = inttoptr i32 %v3_a144 to i8*
  store i8 %v1_a144, i8* %v4_a144, align 1
  %v0_a148 = load i32, i32* %lr.global-to-local, align 4
  %v1_a148 = load i32, i32* @r6, align 4
  %v2_a148 = add i32 %v1_a148, 8
  %v3_a148 = inttoptr i32 %v2_a148 to i32*
  store i32 %v0_a148, i32* %v3_a148, align 4
  %v0_a14c = load i32, i32* %r2.global-to-local, align 4
  %v1_a14c = trunc i32 %v0_a14c to i8
  %v2_a14c = load i32, i32* @r6, align 4
  %v3_a14c = add i32 %v2_a14c, 12
  %v4_a14c = inttoptr i32 %v3_a14c to i8*
  store i8 %v1_a14c, i8* %v4_a14c, align 1
  %v0_a150 = load i32, i32* %r3.global-to-local, align 4
  %v1_a150 = trunc i32 %v0_a150 to i8
  %v2_a150 = load i32, i32* @r6, align 4
  %v3_a150 = add i32 %v2_a150, 13
  %v4_a150 = inttoptr i32 %v3_a150 to i8*
  store i8 %v1_a150, i8* %v4_a150, align 1
  %v0_a154 = load i32, i32* %r0.global-to-local, align 4
  %v1_a154 = trunc i32 %v0_a154 to i8
  %v2_a154 = load i32, i32* @r6, align 4
  %v3_a154 = add i32 %v2_a154, 2
  %v4_a154 = inttoptr i32 %v3_a154 to i8*
  store i8 %v1_a154, i8* %v4_a154, align 1
  %v0_a158 = call i32 @function_e8e4()
  %v1_a158 = trunc i32 %v0_a158 to i8
  store i32 %v0_a158, i32* %r0.global-to-local, align 4
  store i32 %v1_9c3c, i32* %lr.global-to-local, align 4
  %v0_a160 = load i32, i32* @r6, align 4
  %v1_a160 = add i32 %v0_a160, 13
  %v2_a160 = inttoptr i32 %v1_a160 to i8*
  %v3_a160 = load i8, i8* %v2_a160, align 1
  %v4_a160 = zext i8 %v3_a160 to i32
  store i32 %v1_a164, i32* %r2.global-to-local, align 4
  %v1_a168 = and i32 %v4_a160, 223
  %v5_a16c = or i32 %v1_a168, %v4_a16c
  store i32 %v5_a16c, i32* %r3.global-to-local, align 4
  %v1_a170 = trunc i32 %v5_a16c to i8
  store i8 %v1_a170, i8* %v2_a160, align 1
  store i32 %v1_9c5c, i32* %r1.global-to-local, align 4
  %v0_a178 = load i32, i32* @r6, align 4
  %v1_a178 = add i32 %v0_a178, 13
  %v2_a178 = inttoptr i32 %v1_a178 to i8*
  %v3_a178 = load i8, i8* %v2_a178, align 1
  %v4_a178 = zext i8 %v3_a178 to i32
  store i32 %v1_a17c, i32* %r3.global-to-local, align 4
  %v1_a180 = and i32 %v4_a178, 239
  %v5_a184 = or i32 %v1_a180, %v4_a184
  store i32 %v5_a184, i32* %r2.global-to-local, align 4
  %v1_a188 = trunc i32 %v5_a184 to i8
  store i8 %v1_a188, i8* %v2_a178, align 1
  store i32 %v1_9c7c, i32* %ip.global-to-local, align 4
  %v0_a190 = load i32, i32* @r6, align 4
  %v1_a190 = add i32 %v0_a190, 13
  %v2_a190 = inttoptr i32 %v1_a190 to i8*
  %v3_a190 = load i8, i8* %v2_a190, align 1
  %v4_a190 = zext i8 %v3_a190 to i32
  store i32 %v1_a194, i32* %r2.global-to-local, align 4
  %v1_a198 = and i32 %v4_a190, 247
  %v5_a19c = or i32 %v1_a198, %v4_a19c
  store i32 %v5_a19c, i32* %r3.global-to-local, align 4
  %v1_a1a0 = trunc i32 %v5_a19c to i8
  store i8 %v1_a1a0, i8* %v2_a190, align 1
  %v0_a1a8 = load i32, i32* @r6, align 4
  %v1_a1a8 = add i32 %v0_a1a8, 13
  %v2_a1a8 = inttoptr i32 %v1_a1a8 to i8*
  %v3_a1a8 = load i8, i8* %v2_a1a8, align 1
  %v4_a1a8 = zext i8 %v3_a1a8 to i32
  store i32 %v1_a1ac, i32* %r3.global-to-local, align 4
  %v1_a1b0 = and i32 %v4_a1a8, 251
  %v5_a1b4 = or i32 %v1_a1b0, %v4_a1b4
  store i32 %v5_a1b4, i32* %r2.global-to-local, align 4
  %v1_a1b8 = trunc i32 %v5_a1b4 to i8
  store i8 %v1_a1b8, i8* %v2_a1a8, align 1
  store i32 %v1_9cbc, i32* %r1.global-to-local, align 4
  %v0_a1c0 = load i32, i32* @r6, align 4
  %v1_a1c0 = add i32 %v0_a1c0, 13
  %v2_a1c0 = inttoptr i32 %v1_a1c0 to i8*
  %v3_a1c0 = load i8, i8* %v2_a1c0, align 1
  %v4_a1c0 = zext i8 %v3_a1c0 to i32
  store i32 %v1_a1c4, i32* %r2.global-to-local, align 4
  %v1_a1c8 = and i32 %v4_a1c0, 253
  %v4_a1cc = or i32 %v1_a1c8, %v3_a1cc
  store i32 %v4_a1cc, i32* %r3.global-to-local, align 4
  %v1_a1d0 = trunc i32 %v4_a1cc to i8
  store i8 %v1_a1d0, i8* %v2_a1c0, align 1
  %v0_a1d4 = load i32, i32* @r6, align 4
  %v1_a1d4 = add i32 %v0_a1d4, 13
  %v2_a1d4 = inttoptr i32 %v1_a1d4 to i8*
  %v3_a1d4 = load i8, i8* %v2_a1d4, align 1
  %v4_a1d4 = zext i8 %v3_a1d4 to i32
  %v0_a1d8 = load i32, i32* @r8, align 4
  %v1_a1d8 = urem i32 %v0_a1d8, 2
  %v1_a1dc = and i32 %v4_a1d4, 254
  store i32 %v1_a1dc, i32* %r2.global-to-local, align 4
  %v4_a1e027 = udiv i32 %v0_a158, 256
  %v2_a1e4 = or i32 %v1_a1dc, %v1_a1d8
  store i32 %v2_a1e4, i32* %r3.global-to-local, align 4
  %v1_a1e8 = trunc i32 %v4_a1e027 to i8
  %v3_a1e8 = add i32 %v0_a1d4, 15
  %v4_a1e8 = inttoptr i32 %v3_a1e8 to i8*
  store i8 %v1_a1e8, i8* %v4_a1e8, align 1
  %v3_a1ec = load i32, i32* @r6, align 4
  %v4_a1ec = add i32 %v3_a1ec, 14
  %v5_a1ec = inttoptr i32 %v4_a1ec to i8*
  store i8 %v1_a158, i8* %v5_a1ec, align 1
  %v0_a1f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a1f0 = trunc i32 %v0_a1f0 to i8
  %v2_a1f0 = load i32, i32* @r6, align 4
  %v3_a1f0 = add i32 %v2_a1f0, 13
  %v4_a1f0 = inttoptr i32 %v3_a1f0 to i8*
  store i8 %v1_a1f0, i8* %v4_a1f0, align 1
  %v0_a1f4 = load i32, i32* @r4, align 4
  %v1_a1f4 = add i32 %v0_a1f4, 40
  store i32 %v1_a1f4, i32* %r0.global-to-local, align 4
  %v0_a1f8 = load i32, i32* @sb, align 4
  store i32 %v0_a1f8, i32* @r1, align 4
  %v1_a1fc = inttoptr i32 %v1_a1f4 to i8*
  %v2_a1fc = call i32 @function_ea64(i8* %v1_a1fc)
  store i32 %v2_a1fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a200

dec_label_pc_a200:                                ; preds = %dec_label_pc_9da0, %bb81
  %v3_a200 = load i32, i32* %stack_var_-40, align 4
  %v1_a204 = add i32 %v3_a200, 1
  store i32 %v1_a204, i32* %r3.global-to-local, align 4
  %v1_a208 = load i32, i32* @fp, align 4
  %v9_a208 = icmp eq i32 %v1_a204, %v1_a208
  store i1 %v9_a208, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a204, i32* %stack_var_-40, align 4
  %v5_a210 = icmp slt i32 %v1_a204, %v1_a208
  br i1 %v5_a210, label %dec_label_pc_9d90, label %dec_label_pc_a214

dec_label_pc_a214:                                ; preds = %dec_label_pc_a200, %.thread18
  %v0_a21c12 = phi i32 [ %v0_9d64, %.thread18 ], [ %v1_a208, %dec_label_pc_a200 ]
  %v0_a214 = load i32, i32* @sb, align 4
  %v1_a214 = add i32 %v0_a214, 40
  store i32 %v1_a214, i32* @sl, align 4
  %v1_a218 = add i32 %v0_a214, 20
  store i32 %v1_a218, i32* @r7, align 4
  %v2_a268 = icmp eq i32 %v1_9d14, 0
  %v6_a248 = inttoptr i32 %v2_9b84 to i32*
  %v3_a250 = icmp eq i32 %v3_9d6c, 65535
  br label %dec_label_pc_a21c

dec_label_pc_a21c:                                ; preds = %dec_label_pc_a278, %dec_label_pc_a214
  %v0_a21c = phi i32 [ %v1_a358, %dec_label_pc_a278 ], [ %v0_a21c12, %dec_label_pc_a214 ]
  %v2_a21c = icmp eq i32 %v0_a21c, 0
  store i1 %v2_a21c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp82 = icmp slt i32 %v0_a21c, 1
  br label %dec_label_pc_a224

dec_label_pc_a224:                                ; preds = %dec_label_pc_a224, %dec_label_pc_a21c
  br i1 %tmp82, label %dec_label_pc_a224, label %dec_label_pc_a228

dec_label_pc_a228:                                ; preds = %dec_label_pc_a224
  %v0_a228 = load i32, i32* @r7, align 4
  %tmp83 = mul i32 %v0_a228, 256
  %v1_a230 = and i32 %tmp83, 65280
  %tmp84 = udiv i32 %v0_a228, 256
  %v4_a234 = urem i32 %tmp84, 256
  %v5_a234 = or i32 %v4_a234, %v1_a230
  store i32 %v5_a234, i32* @r8, align 4
  store i32 %v2_9b84, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_9d6c, i32* %ip.global-to-local, align 4
  %v7_a248 = load i32, i32* %v6_a248, align 4
  store i32 %v7_a248, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_a250, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_a25c = add i32 %v7_a248, 20
  store i32 %v1_a25c, i32* @r5, align 4
  br i1 %v3_a250, label %dec_label_pc_a384, label %dec_label_pc_a264

dec_label_pc_a264:                                ; preds = %dec_label_pc_a364, %dec_label_pc_a228
  %v0_a26c = phi i32 [ %v7_a370, %dec_label_pc_a364 ], [ %v7_a248, %dec_label_pc_a228 ]
  store i32 %v1_9d14, i32* %lr.global-to-local, align 4
  store i1 %v2_a268, i1* %cpsr_z.global-to-local, align 1
  %v1_a26c = add i32 %v0_a26c, 40
  store i32 %v1_a26c, i32* %r0.global-to-local, align 4
  %v0_a270 = load i32, i32* @sb, align 4
  store i32 %v0_a270, i32* @r1, align 4
  br i1 %v2_a268, label %dec_label_pc_a278, label %dec_label_pc_a3a8

dec_label_pc_a278:                                ; preds = %dec_label_pc_a264, %dec_label_pc_a384, %dec_label_pc_a3a8
  %v2_a278 = phi i32 [ %v0_a26c, %dec_label_pc_a264 ], [ %v0_a39c, %dec_label_pc_a384 ], [ %v2_a278.pre, %dec_label_pc_a3a8 ]
  %v0_a278 = load i32, i32* @r6, align 4
  %v1_a278 = trunc i32 %v0_a278 to i8
  %v3_a278 = add i32 %v2_a278, 10
  %v4_a278 = inttoptr i32 %v3_a278 to i8*
  store i8 %v1_a278, i8* %v4_a278, align 1
  %v0_a27c = load i32, i32* @r6, align 4
  %v1_a27c = trunc i32 %v0_a27c to i8
  %v2_a27c = load i32, i32* @r4, align 4
  %v3_a27c = add i32 %v2_a27c, 11
  %v4_a27c = inttoptr i32 %v3_a27c to i8*
  store i8 %v1_a27c, i8* %v4_a27c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a284 = load i32, i32* @r4, align 4
  store i32 %v0_a284, i32* @r0, align 4
  %v2_a288 = call i32 @function_d0b8(i32 %v0_a284, i32 20)
  %v3_a288 = trunc i32 %v2_a288 to i8
  store i32 %v2_a288, i32* %r0.global-to-local, align 4
  %v3_a28c = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_9b74, i32* %r2.global-to-local, align 4
  %v3_a294 = mul i32 %v3_a28c, 16
  %v2_a298 = add i32 %v3_a294, %v2_9b74
  store i32 %v2_a298, i32* %r1.global-to-local, align 4
  %v1_a29c = add i32 %v2_a298, 4
  %v2_a29c = inttoptr i32 %v1_a29c to i32*
  %v3_a29c = load i32, i32* %v2_a29c, align 4
  %v3_a2a0 = mul i32 %v3_a29c, 65536
  store i32 %v3_a2a0, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_a29c, 256
  %v1_a2a8 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_a29c, 256
  %v4_a2ac = urem i32 %tmp86, 256
  %v5_a2ac = or i32 %v4_a2ac, %v1_a2a8
  store i32 %v5_a2ac, i32* %r2.global-to-local, align 4
  %v1_a2b0 = add i32 %v3_a29c, 1
  store i32 %v1_a2b0, i32* %r3.global-to-local, align 4
  store i32 %v1_a2b0, i32* %v2_a29c, align 4
  %v0_a2b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a2b8 = load i32, i32* @r5, align 4
  %v2_a2b8 = add i32 %v1_a2b8, 4
  %v3_a2b8 = inttoptr i32 %v2_a2b8 to i32*
  store i32 %v0_a2b8, i32* %v3_a2b8, align 4
  %v0_a2bc = load i32, i32* %r1.global-to-local, align 4
  %v1_a2bc = add i32 %v0_a2bc, 8
  %v2_a2bc = inttoptr i32 %v1_a2bc to i32*
  %v3_a2bc = load i32, i32* %v2_a2bc, align 4
  %tmp87 = mul i32 %v3_a2bc, 256
  %v1_a2c8 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_a2bc, 256
  %v4_a2cc = urem i32 %tmp88, 256
  %v5_a2cc = or i32 %v4_a2cc, %v1_a2c8
  store i32 %v5_a2cc, i32* %r2.global-to-local, align 4
  %v4_a2d028 = udiv i32 %v2_a288, 256
  %v1_a2d4 = trunc i32 %v4_a2d028 to i8
  %v2_a2d4 = load i32, i32* @r4, align 4
  %v3_a2d4 = add i32 %v2_a2d4, 11
  %v4_a2d4 = inttoptr i32 %v3_a2d4 to i8*
  store i8 %v1_a2d4, i8* %v4_a2d4, align 1
  %v3_a2d8 = load i32, i32* @r4, align 4
  %v4_a2d8 = add i32 %v3_a2d8, 10
  %v5_a2d8 = inttoptr i32 %v4_a2d8 to i8*
  store i8 %v3_a288, i8* %v5_a2d8, align 1
  %v0_a2dc = load i32, i32* %r2.global-to-local, align 4
  %v1_a2dc = load i32, i32* @r5, align 4
  %v2_a2dc = add i32 %v1_a2dc, 8
  %v3_a2dc = inttoptr i32 %v2_a2dc to i32*
  store i32 %v0_a2dc, i32* %v3_a2dc, align 4
  %v0_a2e0 = load i32, i32* @r5, align 4
  store i32 %v0_a2e0, i32* @r1, align 4
  %v0_a2e4 = load i32, i32* @r8, align 4
  store i32 %v0_a2e4, i32* %r2.global-to-local, align 4
  %v0_a2e8 = load i32, i32* @r7, align 4
  store i32 %v0_a2e8, i32* %r3.global-to-local, align 4
  %v0_a2ec = load i32, i32* @r4, align 4
  store i32 %v0_a2ec, i32* %r0.global-to-local, align 4
  %v0_a2f0 = load i32, i32* @r6, align 4
  %v1_a2f0 = trunc i32 %v0_a2f0 to i8
  %v3_a2f0 = add i32 %v0_a2e0, 16
  %v4_a2f0 = inttoptr i32 %v3_a2f0 to i8*
  store i8 %v1_a2f0, i8* %v4_a2f0, align 1
  %v0_a2f4 = load i32, i32* @r6, align 4
  %v1_a2f4 = trunc i32 %v0_a2f4 to i8
  %v2_a2f4 = load i32, i32* @r5, align 4
  %v3_a2f4 = add i32 %v2_a2f4, 17
  %v4_a2f4 = inttoptr i32 %v3_a2f4 to i8*
  store i8 %v1_a2f4, i8* %v4_a2f4, align 1
  %v4_a2f8 = call i32 @function_d114(i32 %v0_a2ec, i32 %v0_a2e0, i32 %v0_a2e4, i32 %v0_a2e8)
  %v5_a2f8 = trunc i32 %v4_a2f8 to i8
  store i32 %v4_a2f8, i32* %r0.global-to-local, align 4
  %v4_a2fc29 = udiv i32 %v4_a2f8, 256
  %v1_a300 = trunc i32 %v4_a2fc29 to i8
  %v2_a300 = load i32, i32* @r5, align 4
  %v3_a300 = add i32 %v2_a300, 17
  %v4_a300 = inttoptr i32 %v3_a300 to i8*
  store i8 %v1_a300, i8* %v4_a300, align 1
  %v3_a304 = load i32, i32* @r5, align 4
  %v4_a304 = add i32 %v3_a304, 16
  %v5_a304 = inttoptr i32 %v4_a304 to i8*
  store i8 %v5_a2f8, i8* %v5_a304, align 1
  %v3_a308 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a308, i32* %r3.global-to-local, align 4
  %v0_a30c = load i32, i32* @r4, align 4
  %v1_a30c = add i32 %v0_a30c, 20
  %v2_a30c = inttoptr i32 %v1_a30c to i32*
  %v3_a30c = load i32, i32* %v2_a30c, align 4
  %v5_a314 = mul i32 %v3_a308, 24
  %v3_a31c = udiv i32 %v3_a30c, 65536
  store i32 %v3_a31c, i32* %r2.global-to-local, align 4
  %v2_a320 = add i32 %v5_a314, %arg2
  store i32 %v2_a320, i32* %ip.global-to-local, align 4
  %v3_a3244 = udiv i32 %v3_a30c, 16777216
  %v1_a328 = trunc i32 %v3_a3244 to i8
  %v3_a328 = add i32 %v2_a320, 3
  %v4_a328 = inttoptr i32 %v3_a328 to i8*
  store i8 %v1_a328, i8* %v4_a328, align 1
  %v0_a32c = load i32, i32* %r2.global-to-local, align 4
  %v1_a32c = trunc i32 %v0_a32c to i8
  %v2_a32c = load i32, i32* %ip.global-to-local, align 4
  %v3_a32c = add i32 %v2_a32c, 2
  %v4_a32c = inttoptr i32 %v3_a32c to i8*
  store i8 %v1_a32c, i8* %v4_a32c, align 1
  %v0_a330 = load i32, i32* @r4, align 4
  store i32 %v0_a330, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_9d24, i32* %r0.global-to-local, align 4
  %v0_a33c = load i32, i32* @sl, align 4
  store i32 %v0_a33c, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_a344 = load i32, i32* %ip.global-to-local, align 4
  %v6_a34c = inttoptr i32 %v0_a330 to i32*
  %v7_a34c = call i32 @function_121e8(i32 %v3_9d24, i32* %v6_a34c, i32 %v0_a33c, i32 16384, i32 %v0_a344, i32 16)
  %v3_a350 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a350, i32* %r3.global-to-local, align 4
  %v1_a354 = add i32 %v3_a350, 1
  store i32 %v1_a354, i32* %r0.global-to-local, align 4
  %v1_a358 = load i32, i32* @fp, align 4
  %v9_a358 = icmp eq i32 %v1_a354, %v1_a358
  store i1 %v9_a358, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a354, i32* %stack_var_-40, align 4
  %v6_a360 = icmp slt i32 %v1_a354, %v1_a358
  br i1 %v6_a360, label %dec_label_pc_a364, label %dec_label_pc_a21c

dec_label_pc_a364:                                ; preds = %dec_label_pc_a278
  store i32 %v2_9b84, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_9d6c, i32* %ip.global-to-local, align 4
  %v4_a370 = mul i32 %v1_a354, 4
  %v5_a370 = add i32 %v4_a370, %v2_9b84
  %v6_a370 = inttoptr i32 %v5_a370 to i32*
  %v7_a370 = load i32, i32* %v6_a370, align 4
  store i32 %v7_a370, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_a250, i1* %cpsr_z.global-to-local, align 1
  %v1_a37c = add i32 %v7_a370, 20
  store i32 %v1_a37c, i32* @r5, align 4
  br i1 %v3_a250, label %dec_label_pc_a384, label %dec_label_pc_a264

dec_label_pc_a384:                                ; preds = %dec_label_pc_a364, %dec_label_pc_a228
  %v0_a384 = call i32 @function_e8e4()
  %v1_a384 = trunc i32 %v0_a384 to i8
  store i32 %v1_9d14, i32* %lr.global-to-local, align 4
  %v4_a38c = sdiv i32 %v0_a384, 256
  store i32 %v4_a38c, i32* %r3.global-to-local, align 4
  store i1 %v2_a268, i1* %cpsr_z.global-to-local, align 1
  %v3_a394 = load i32, i32* @r4, align 4
  %v4_a394 = add i32 %v3_a394, 4
  %v5_a394 = inttoptr i32 %v4_a394 to i8*
  store i8 %v1_a384, i8* %v5_a394, align 1
  %v0_a398 = load i32, i32* %r3.global-to-local, align 4
  %v1_a398 = trunc i32 %v0_a398 to i8
  %v2_a398 = load i32, i32* @r4, align 4
  %v3_a398 = add i32 %v2_a398, 5
  %v4_a398 = inttoptr i32 %v3_a398 to i8*
  store i8 %v1_a398, i8* %v4_a398, align 1
  %v0_a39c = load i32, i32* @r4, align 4
  %v1_a39c = add i32 %v0_a39c, 40
  store i32 %v1_a39c, i32* %r0.global-to-local, align 4
  %v0_a3a0 = load i32, i32* @sb, align 4
  store i32 %v0_a3a0, i32* @r1, align 4
  %v0_a3a4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a3a4, label %dec_label_pc_a278, label %dec_label_pc_a3a8

dec_label_pc_a3a8:                                ; preds = %dec_label_pc_a264, %dec_label_pc_a384
  %v0_a3a8 = phi i32 [ %v1_a26c, %dec_label_pc_a264 ], [ %v1_a39c, %dec_label_pc_a384 ]
  %v1_a3a8 = inttoptr i32 %v0_a3a8 to i8*
  %v2_a3a8 = call i32 @function_ea64(i8* %v1_a3a8)
  store i32 %v2_a3a8, i32* %r0.global-to-local, align 4
  %v2_a278.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a278

; uselistorder directives
  uselistorder i32 %v0_a39c, { 1, 0 }
  uselistorder i32 %v7_a370, { 1, 2, 0 }
  uselistorder i32 %v1_a358, { 1, 2, 0 }
  uselistorder i32 %v1_a354, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_a2f8, { 0, 2, 1 }
  uselistorder i32 %v0_a2e0, { 1, 0, 2 }
  uselistorder i32 %v3_a2bc, { 1, 0 }
  uselistorder i32 %v3_a29c, { 3, 2, 0, 1 }
  uselistorder i32 %v2_a288, { 0, 2, 1 }
  uselistorder i32 %v0_a26c, { 1, 0 }
  uselistorder i32 %v0_a228, { 1, 0 }
  uselistorder i32 %v0_a21c, { 1, 0 }
  uselistorder i1 %v3_a250, { 2, 3, 1, 0 }
  uselistorder i32 %v1_a204, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a158, { 0, 2, 1 }
  uselistorder i32 %v3_a138, { 1, 0 }
  uselistorder i32 %v0_a10c, { 1, 0, 2 }
  uselistorder i32 %v3_a100, { 1, 0 }
  uselistorder i32 %v3_a094, { 1, 0 }
  uselistorder i32 %v0_a088, { 1, 0 }
  uselistorder i32 %v3_a010, { 1, 0 }
  uselistorder i32 %v2_9ffc, { 1, 0 }
  uselistorder i32 %v3_9fe0, { 1, 0, 2, 3 }
  uselistorder i32 %v2_9fd8, { 1, 0 }
  uselistorder i32 %v3_9fb4, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9fac, { 1, 0 }
  uselistorder i32 %v4_9f94, { 1, 0 }
  uselistorder i32 %v0_9f90, { 0, 2, 1 }
  uselistorder i1 %v7_9f00, { 1, 0 }
  uselistorder i32 %v7_9ef8, { 0, 2, 1, 3 }
  uselistorder i32 %v5_9f44, { 1, 0 }
  uselistorder i1 %v9_9f28, { 1, 0 }
  uselistorder i32 %v4_9f3c, { 1, 0 }
  uselistorder i32 %v4_9f38, { 1, 0 }
  uselistorder i32 %v8_9e4c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_9e38, { 1, 0 }
  uselistorder i32 %v0_9e28, { 2, 0, 1, 3 }
  uselistorder i1 %v7_9db0, { 1, 0 }
  uselistorder i32 %v3_9dac, { 2, 1, 0, 3 }
  uselistorder i32 %v1_a1c4, { 1, 0 }
  uselistorder i32 %v1_a1ac, { 1, 0 }
  uselistorder i32 %v1_a194, { 1, 0 }
  uselistorder i32 %v1_a17c, { 1, 0 }
  uselistorder i32 %v1_a164, { 1, 0 }
  uselistorder i32 %v5_9f40, { 1, 0 }
  uselistorder i32 %v3_9e9493, { 1, 0 }
  uselistorder i1 %v2_9f58, { 1, 0 }
  uselistorder i32 %v1_9f54, { 1, 0 }
  uselistorder i32 %v4_9f50, { 2, 0, 1 }
  uselistorder i32 %v4_9f34, { 1, 0 }
  uselistorder i1 %v3_9e7c, { 1, 0 }
  uselistorder i32 %v8_9d78, { 2, 1, 0 }
  uselistorder i32 %v8_9d74, { 1, 2, 0 }
  uselistorder i32 %v3_9d6c, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v0_9d68, { 0, 1, 3, 2 }
  uselistorder i1 %v7_9d5c, { 1, 0 }
  uselistorder i1 %v7_9d2c, { 1, 0 }
  uselistorder i32 %v3_9d28, { 2, 0, 1 }
  uselistorder i32 %v3_9d24, { 5, 6, 1, 3, 4, 7, 8, 2, 0, 9 }
  uselistorder i32 %v1_9d14, { 1, 3, 2, 0 }
  uselistorder i32 %v1_9cbc, { 1, 2, 0 }
  uselistorder i32 %v1_9c9c, { 1, 0 }
  uselistorder i32 %v1_9c7c, { 1, 2, 0 }
  uselistorder i32 %v1_9c5c, { 1, 2, 0 }
  uselistorder i32 %v1_9c3c, { 1, 2, 0 }
  uselistorder i32 %v1_9c04, { 1, 2, 0 }
  uselistorder i32 %v5_9bc0, { 0, 2, 1 }
  uselistorder i32 %v2_9b84, { 0, 4, 5, 2, 1, 3, 6 }
  uselistorder i32 %v2_9b74, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_9b58, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 44, 43, 45, 47, 46, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 4, 5, 7, 6, 11, 8, 9, 12, 10, 20, 13, 14, 15, 16, 17, 18, 19, 24, 21, 22, 23, 25, 27, 26, 29, 28, 32, 30, 33, 34, 31, 1, 36, 35, 37, 38, 40, 39, 44, 41, 42, 43, 45, 47, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 13, 14, 15, 17, 26, 18, 19, 16, 20, 21, 22, 23, 24, 25 }
  uselistorder i32 %arg2, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_a3a8, { 1, 0 }
  uselistorder label %dec_label_pc_a278, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a200, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %.thread5, { 2, 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %dec_label_pc_9f88, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9ec0, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_9e70, { 1, 0 }
}

define i32 @function_a3b4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a3b4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_a3b8 = urem i32 %arg1, 256
  store i32 %v1_a3b8, i32* @fp, align 4
  store i32 %v1_a3b8, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_a3d0 = urem i32 %arg3, 256
  store i32 %v1_a3d0, i32* @r4, align 4
  %v2_a3d4 = call i32 @function_12538(i32 %v1_a3b8, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_a3e0 = load i32, i32* @fp, align 4
  store i32 %v0_a3e0, i32* %r0.global-to-local, align 4
  %v2_a3e4 = call i32 @function_12538(i32 %v0_a3e0, i32 4)
  %v0_a3e8 = load i32, i32* @r5, align 4
  store i32 %v0_a3e8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a3f8 = load i32, i32* @r4, align 4
  store i32 %v0_a3f8, i32* %r0.global-to-local, align 4
  %v5_a3fc = inttoptr i32 %v0_a3e8 to i32*
  %v6_a3fc = call i32 @function_85e0(i32 %v0_a3f8, i32* %v5_a3fc, i32 2, i32 0, i32 %v2_a3e4)
  %v1_a408 = urem i32 %v6_a3fc, 256
  store i32 %v1_a408, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a414 = load i32, i32* @r5, align 4
  store i32 %v0_a414, i32* %r1.global-to-local, align 4
  %v0_a418 = load i32, i32* @r4, align 4
  store i32 %v0_a418, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_a3fc, 16777216
  %v5_a420 = sdiv i32 %sext, 16777216
  %v6_a420 = inttoptr i32 %v0_a414 to i32*
  %v7_a420 = call i32 @function_85e0(i32 %v0_a418, i32* %v6_a420, i32 3, i32 65535, i32 %v5_a420)
  %v0_a424 = load i32, i32* @r5, align 4
  store i32 %v0_a424, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a420, i32* @r6, align 4
  %v0_a434 = load i32, i32* @r4, align 4
  store i32 %v0_a434, i32* %r0.global-to-local, align 4
  %v5_a438 = inttoptr i32 %v0_a424 to i32*
  %v6_a438 = call i32 @function_85e0(i32 %v0_a434, i32* %v5_a438, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_a440 = urem i32 %v6_a438, 256
  store i32 %v1_a440, i32* %ip.global-to-local, align 4
  %v0_a444 = load i32, i32* @r5, align 4
  store i32 %v0_a444, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a450 = load i32, i32* @r4, align 4
  store i32 %v0_a450, i32* %r0.global-to-local, align 4
  %sext6 = mul i32 %v6_a438, 16777216
  %v5_a458 = sdiv i32 %sext6, 16777216
  %v6_a458 = inttoptr i32 %v0_a444 to i32*
  %v7_a458 = call i32 @function_85e0(i32 %v0_a450, i32* %v6_a458, i32 5, i32 1, i32 %v5_a458)
  %v1_a464 = urem i32 %v7_a458, 256
  store i32 %v1_a464, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_a46c = load i32, i32* @r5, align 4
  store i32 %v0_a46c, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a474 = load i32, i32* @r4, align 4
  store i32 %v0_a474, i32* %r0.global-to-local, align 4
  %v5_a47c = inttoptr i32 %v0_a46c to i32*
  %v6_a47c = call i32 @function_85e0(i32 %v0_a474, i32* %v5_a47c, i32 7, i32 65535, i32 %v1_a464)
  %v0_a480 = load i32, i32* @r5, align 4
  store i32 %v0_a480, i32* %r1.global-to-local, align 4
  %v3_a484 = mul i32 %v6_a47c, 65536
  store i32 %v3_a484, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a490 = load i32, i32* @r4, align 4
  store i32 %v0_a490, i32* %r0.global-to-local, align 4
  %v5_a494 = inttoptr i32 %v0_a480 to i32*
  %v6_a494 = call i32 @function_85e0(i32 %v0_a490, i32* %v5_a494, i32 11, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v1_a49c = urem i32 %v6_a494, 256
  store i32 %v1_a49c, i32* %ip.global-to-local, align 4
  %v0_a4a0 = load i32, i32* @r5, align 4
  store i32 %v0_a4a0, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a4ac = load i32, i32* @r4, align 4
  store i32 %v0_a4ac, i32* %r0.global-to-local, align 4
  %v5_a4b4 = inttoptr i32 %v0_a4a0 to i32*
  %v6_a4b4 = call i32 @function_85e0(i32 %v0_a4ac, i32* %v5_a4b4, i32 12, i32 1, i32 %v1_a49c)
  %v1_a4bc = urem i32 %v6_a4b4, 256
  store i32 %v1_a4bc, i32* %ip.global-to-local, align 4
  %v0_a4c0 = load i32, i32* @r5, align 4
  store i32 %v0_a4c0, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a4cc = load i32, i32* @r4, align 4
  store i32 %v0_a4cc, i32* %r0.global-to-local, align 4
  %v5_a4d4 = inttoptr i32 %v0_a4c0 to i32*
  %v6_a4d4 = call i32 @function_85e0(i32 %v0_a4cc, i32* %v5_a4d4, i32 13, i32 1, i32 %v1_a4bc)
  %v1_a4dc = urem i32 %v6_a4d4, 256
  store i32 %v1_a4dc, i32* %ip.global-to-local, align 4
  %v0_a4e0 = load i32, i32* @r5, align 4
  store i32 %v0_a4e0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a4ec = load i32, i32* @r4, align 4
  store i32 %v0_a4ec, i32* %r0.global-to-local, align 4
  %v5_a4f4 = inttoptr i32 %v0_a4e0 to i32*
  %v6_a4f4 = call i32 @function_85e0(i32 %v0_a4ec, i32* %v5_a4f4, i32 14, i32 0, i32 %v1_a4dc)
  %v1_a4fc = urem i32 %v6_a4f4, 256
  store i32 %v1_a4fc, i32* %ip.global-to-local, align 4
  %v0_a500 = load i32, i32* @r5, align 4
  store i32 %v0_a500, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a50c = load i32, i32* @r4, align 4
  store i32 %v0_a50c, i32* %r0.global-to-local, align 4
  %v5_a514 = inttoptr i32 %v0_a500 to i32*
  %v6_a514 = call i32 @function_85e0(i32 %v0_a50c, i32* %v5_a514, i32 15, i32 0, i32 %v1_a4fc)
  %v1_a51c = urem i32 %v6_a514, 256
  store i32 %v1_a51c, i32* %ip.global-to-local, align 4
  %v0_a520 = load i32, i32* @r5, align 4
  store i32 %v0_a520, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a52c = load i32, i32* @r4, align 4
  store i32 %v0_a52c, i32* %r0.global-to-local, align 4
  %v5_a534 = inttoptr i32 %v0_a520 to i32*
  %v6_a534 = call i32 @function_85e0(i32 %v0_a52c, i32* %v5_a534, i32 16, i32 0, i32 %v1_a51c)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_a534, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_a544 = load i32, i32* @r5, align 4
  store i32 %v0_a544, i32* %r1.global-to-local, align 4
  %v0_a548 = load i32, i32* @r4, align 4
  store i32 %v0_a548, i32* %r0.global-to-local, align 4
  %v1_a54c = urem i32 %v6_a534, 256
  store i32 %v1_a54c, i32* @r8, align 4
  %v5_a550 = inttoptr i32 %v0_a544 to i32*
  %v6_a550 = call i32 @function_85e0(i32 %v0_a548, i32* %v5_a550, i32 0, i32 768, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a55c = load i32, i32* @r5, align 4
  store i32 %v0_a55c, i32* %r1.global-to-local, align 4
  store i32 %v6_a550, i32* @sb, align 4
  %v0_a564 = load i32, i32* @r4, align 4
  store i32 %v0_a564, i32* %r0.global-to-local, align 4
  %v5_a568 = inttoptr i32 %v0_a55c to i32*
  %v6_a568 = call i32 @function_85e0(i32 %v0_a564, i32* %v5_a568, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_a574 = urem i32 %v6_a568, 256
  store i32 %v1_a574, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_a584 = call i32 @function_1224c(i32 2, i32 3, i32 6)
  store i32 %v3_a584, i32* %r0.global-to-local, align 4
  %v0_a588 = load i32, i32* @r7, align 4
  %v3_a588 = udiv i32 %v0_a588, 65536
  store i32 %v3_a588, i32* %r1.global-to-local, align 4
  %v7_a58c = icmp eq i32 %v3_a584, -1
  store i1 %v7_a58c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a58c, label %dec_label_pc_a7e8, label %dec_label_pc_a59c

dec_label_pc_a59c:                                ; preds = %dec_label_pc_a3b4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_a5a4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_a5a4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_a5b8 = call i32 @function_1221c(i32 %v3_a584, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_a5b8, i32* %r0.global-to-local, align 4
  %v7_a5bc = icmp eq i32 %v6_a5b8, -1
  store i1 %v7_a5bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a5bc, label %dec_label_pc_a7e0, label %dec_label_pc_a5c4

dec_label_pc_a5c4:                                ; preds = %dec_label_pc_a59c
  %v0_a5c4 = load i32, i32* @fp, align 4
  %v2_a5c4 = icmp eq i32 %v0_a5c4, 0
  store i1 %v2_a5c4, i1* %cpsr_z.global-to-local, align 1
  %v0_a5c8 = load i32, i32* @r6, align 4
  %v3_a5c8 = mul i32 %v0_a5c8, 65536
  store i32 %v3_a5c8, i32* %r0.global-to-local, align 4
  %v3_a5cc = urem i32 %v0_a5c8, 65536
  store i32 %v3_a5cc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_a5c4, 1
  br i1 %tmp72, label %.thread18, label %dec_label_pc_a5f0.preheader

.thread18:                                        ; preds = %dec_label_pc_a5c4
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_aa74

dec_label_pc_a5f0.preheader:                      ; preds = %dec_label_pc_a5c4
  %v5_a5d4 = load i32, i32* @r7, align 4
  %v8_a5d4 = udiv i32 %v5_a5d4, 16777216
  %tmp73 = udiv i32 %v0_a5c8, 256
  %v8_a5d8 = urem i32 %tmp73, 256
  store i32 %v8_a5d8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_a6dc = icmp ugt i32 %v0_a588, -65537
  %v2_a700 = ptrtoint i32* %stack_var_-60 to i32
  %v3_a70c = bitcast i32* %stack_var_-60 to %sockaddr*
  %v2_a73c = ptrtoint i32* %stack_var_-76 to i32
  %v2_a740 = ptrtoint i32* %stack_var_-44 to i32
  %v2_a744 = ptrtoint i32* %stack_var_-332 to i32
  %v4_a790 = zext i8 %tmp31 to i32
  %v4_a794 = zext i8 %tmp30 to i32
  %v4_a7a0 = mul nuw nsw i32 %v4_a794, 256
  %v4_a7b0 = zext i8 %tmp to i32
  %v1_a7b4 = and i32 %v4_a7b0, 18
  %v2_a7b8 = icmp eq i32 %v1_a7b4, 18
  %v1_a6ec = mul nuw nsw i32 %v3_a588, 256
  %v4_a6f0 = and i32 %v1_a6ec, 65280
  %v5_a6f0 = or i32 %v8_a5d4, %v4_a6f0
  %v3_a6f493 = udiv i32 %v4_a6f0, 256
  %v1_a6f8 = trunc i32 %v3_a6f493 to i8
  %v1_a8bc = mul i32 %v0_a5c8, 256
  %v4_a8c4 = and i32 %v1_a8bc, 65280
  %v5_a7a0 = or i32 %v4_a790, %v4_a7a0
  %v1_a7c0 = and i32 %v4_a7b0, 5
  %v2_a7c0 = icmp eq i32 %v1_a7c0, 0
  %v1_a6fc = trunc i32 %v8_a5d4 to i8
  %v5_a8c4 = or i32 %v8_a5d8, %v4_a8c4
  %v1_a8e4 = trunc i32 %v5_a420 to i8
  %v1_a9c4 = urem i32 %v6_a494, 2
  %tmp94 = sub nsw i32 0, %v1_a9c4
  %v4_a9cc = and i32 %tmp94, 32
  %v1_a9dc = urem i32 %v6_a4b4, 2
  %tmp95 = sub nsw i32 0, %v1_a9dc
  %v4_a9e4 = and i32 %tmp95, 16
  %v1_a9f4 = urem i32 %v6_a4d4, 2
  %tmp96 = sub nsw i32 0, %v1_a9f4
  %v4_a9fc = and i32 %tmp96, 8
  %v1_aa0c = urem i32 %v6_a4f4, 2
  %tmp97 = sub nsw i32 0, %v1_aa0c
  %v4_aa14 = and i32 %tmp97, 4
  %v1_aa24 = urem i32 %v6_a514, 2
  %tmp98 = sub nsw i32 0, %v1_aa24
  %v3_aa2c = and i32 %tmp98, 2
  br label %dec_label_pc_a5f0

dec_label_pc_a5f0:                                ; preds = %dec_label_pc_aa60, %dec_label_pc_a7c8, %dec_label_pc_a5f0.preheader
  store i32 %v8_a5d8, i32* %r3.global-to-local, align 4
  %v0_a5fc = load i32, i32* @sb, align 4
  %v1_a5fc = add i32 %v0_a5fc, 40
  store i32 %v1_a5fc, i32* @sl, align 4
  br label %dec_label_pc_a600

dec_label_pc_a600:                                ; preds = %dec_label_pc_a7d4, %dec_label_pc_a5f0
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a60c = call i32 @function_1224c(i32 2, i32 1, i32 0)
  store i32 %v3_a60c, i32* %r0.global-to-local, align 4
  %v7_a610 = icmp eq i32 %v3_a60c, -1
  store i1 %v7_a610, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a60c, i32* @r7, align 4
  br i1 %v7_a610, label %dec_label_pc_aa60, label %dec_label_pc_a61c

dec_label_pc_a61c:                                ; preds = %dec_label_pc_a600
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_a624 = call i32 @function_1189c(i32 %v3_a60c, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_a62c = or i32 %v2_a624, 2048
  store i32 %v1_a62c, i32* @r2, align 4
  %v0_a630 = load i32, i32* @r7, align 4
  store i32 %v0_a630, i32* %r0.global-to-local, align 4
  %v2_a634 = call i32 @function_1189c(i32 %v0_a630, i32 4)
  store i32 %v2_a634, i32* %r0.global-to-local, align 4
  %v3_a638 = load i32, i32* %stack_var_-40, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_a648 = mul i32 %v3_a638, 24
  store i32 %v5_a648, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v2_a658 = add i32 %v5_a648, %arg2
  store i32 %v2_a658, i32* %r2.global-to-local, align 4
  %v1_a65c = add i32 %v2_a658, 20
  %v2_a65c = inttoptr i32 %v1_a65c to i8*
  %v3_a65c = load i8, i8* %v2_a65c, align 1
  %v4_a65c = zext i8 %v3_a65c to i32
  store i32 %v4_a65c, i32* %r3.global-to-local, align 4
  %v2_a660 = icmp ugt i8 %v3_a65c, 30
  %v7_a660 = icmp eq i8 %v3_a65c, 31
  store i1 %v7_a660, i1* %cpsr_z.global-to-local, align 1
  %v2_a664 = xor i1 %v7_a660, true
  %v3_a664 = and i1 %v2_a660, %v2_a664
  %v5_a664 = add i32 %v2_a658, 16
  %v6_a664 = inttoptr i32 %v5_a664 to i32*
  %v7_a664 = load i32, i32* %v6_a664, align 4
  br i1 %v3_a664, label %dec_label_pc_a6d0, label %dec_label_pc_a670

dec_label_pc_a670:                                ; preds = %dec_label_pc_a61c
  store i32 %v7_a664, i32* @r4, align 4
  %v0_a674 = call i32 @function_e8e4()
  store i32 %v0_a674, i32* %r0.global-to-local, align 4
  %v3_a678 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v5_a684 = mul i32 %v3_a678, 24
  %v0_a688 = load i32, i32* @r4, align 4
  %v2_a68c = add i32 %v5_a684, %arg2
  store i32 %v2_a68c, i32* %r1.global-to-local, align 4
  %v1_a690 = and i32 %v0_a688, 65280
  store i32 %v1_a690, i32* %r3.global-to-local, align 4
  %v1_a688 = udiv i32 %v0_a688, 256
  %v3_a694 = and i32 %v1_a688, 65280
  store i32 %v3_a694, i32* %r2.global-to-local, align 4
  %v3_a698 = mul i32 %v0_a688, 16777216
  store i32 %v3_a698, i32* %ip.global-to-local, align 4
  %v1_a69c = add i32 %v2_a68c, 20
  %v2_a69c = inttoptr i32 %v1_a69c to i8*
  %v3_a69c = load i8, i8* %v2_a69c, align 1
  %v4_a69c = zext i8 %v3_a69c to i32
  store i32 %v4_a69c, i32* %lr.global-to-local, align 4
  %v4_a6a0 = mul nuw nsw i32 %v1_a690, 256
  %v5_a6a0 = or i32 %v4_a6a0, %v3_a698
  store i32 %v5_a6a0, i32* %ip.global-to-local, align 4
  %v2_a6a8 = call i32 @llvm.bswap.i32(i32 %v0_a688)
  %v7_a6ac = lshr i32 %v0_a674, %v4_a69c
  %v8_a6ac = add i32 %v7_a6ac, %v2_a6a8
  store i32 %v8_a6ac, i32* %r2.global-to-local, align 4
  %v3_a6b8 = mul i32 %v8_a6ac, 16777216
  %v1_a6bc = and i32 %v8_a6ac, 65280
  store i32 %v1_a6bc, i32* %r0.global-to-local, align 4
  %v4_a6c0 = mul nuw nsw i32 %v1_a6bc, 256
  %v5_a6c0 = or i32 %v4_a6c0, %v3_a6b8
  store i32 %v5_a6c0, i32* %r1.global-to-local, align 4
  %v2_a6c8 = call i32 @llvm.bswap.i32(i32 %v8_a6ac)
  br label %dec_label_pc_a6d0

dec_label_pc_a6d0:                                ; preds = %dec_label_pc_a61c, %dec_label_pc_a670
  %storemerge25 = phi i32 [ %v2_a6c8, %dec_label_pc_a670 ], [ %v7_a664, %dec_label_pc_a61c ]
  store i32 %v3_a588, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_a6dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a6dc, label %dec_label_pc_a7f0, label %dec_label_pc_a6e4

dec_label_pc_a6e4:                                ; preds = %dec_label_pc_a6d0
  store i32 %v8_a5d4, i32* %ip.global-to-local, align 4
  store i32 %v5_a6f0, i32* %r3.global-to-local, align 4
  store i32 %v3_a6f493, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_a700

dec_label_pc_a700:                                ; preds = %dec_label_pc_a7f0, %dec_label_pc_a6e4
  %stack_var_-57.0 = phi i8 [ %v1_a7f8, %dec_label_pc_a7f0 ], [ %v1_a6f8, %dec_label_pc_a6e4 ]
  %storemerge = phi i8 [ %v1_a7f0, %dec_label_pc_a7f0 ], [ %v1_a6fc, %dec_label_pc_a6e4 ]
  store i32 %v2_a700, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_a708 = load i32, i32* @r7, align 4
  store i32 %v0_a708, i32* %r0.global-to-local, align 4
  %v4_a70c = call i32 @function_120a8(i32 %v0_a708, %sockaddr* nonnull %v3_a70c, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_a714 = call i32 @function_11c30(i32* null)
  store i32 %v2_a714, i32* %r0.global-to-local, align 4
  store i32 %v2_a714, i32* @r4, align 4
  %v9_a774 = icmp eq i32 %tmp32, %storemerge25
  %v4_a798 = zext i8 %storemerge to i32
  %v4_a79c = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_a774 to i32
  %v9_a788 = icmp eq i1 %v9_a774, false
  %v4_a7a4 = mul nuw nsw i32 %v4_a79c, 256
  %v5_a7a4 = or i32 %v4_a7a4, %v4_a798
  %v9_a7a8 = icmp eq i32 %v5_a7a4, %v5_a7a0
  br label %dec_label_pc_a730

dec_label_pc_a720:                                ; preds = %.thread23, %dec_label_pc_a790, %dec_label_pc_a7c0, %bb75
  %v2_a720 = call i32 @function_11c30(i32* null)
  %v0_a724 = load i32, i32* @r4, align 4
  %v2_a724 = sub i32 %v2_a720, %v0_a724
  store i32 %v2_a724, i32* %r0.global-to-local, align 4
  %v7_a728 = icmp eq i32 %v2_a724, 10
  store i1 %v7_a728, i1* %cpsr_z.global-to-local, align 1
  %v8_a72c = icmp sgt i32 %v2_a724, 10
  br i1 %v8_a72c, label %dec_label_pc_a7d4, label %dec_label_pc_a730

dec_label_pc_a730:                                ; preds = %dec_label_pc_a720, %dec_label_pc_a700
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  store i32 %v2_a73c, i32* %lr.global-to-local, align 4
  store i32 %v2_a740, i32* %ip.global-to-local, align 4
  store i32 %v2_a744, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_a584, i32* %r0.global-to-local, align 4
  %v7_a758 = call i32 @function_12188(i32 %v3_a584, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_a73c, i32 %v2_a740)
  store i32 %v7_a758, i32* %r2.global-to-local, align 4
  %v7_a760 = icmp eq i32 %v7_a758, -1
  store i1 %v7_a760, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_a760, label %dec_label_pc_a7e8, label %dec_label_pc_a76c

dec_label_pc_a76c:                                ; preds = %dec_label_pc_a730
  store i32 %tmp32, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_a780 = icmp eq i32 %v7_a758, 40
  store i1 %v7_a780, i1* %cpsr_z.global-to-local, align 1
  %tmp99 = icmp ult i32 %v7_a758, 41
  br i1 %tmp99, label %.thread23, label %bb75

.thread23:                                        ; preds = %dec_label_pc_a76c
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_a720

bb75:                                             ; preds = %dec_label_pc_a76c
  store i1 %v9_a788, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a788, label %dec_label_pc_a720, label %dec_label_pc_a790

dec_label_pc_a790:                                ; preds = %bb75
  store i32 %v4_a794, i32* %r1.global-to-local, align 4
  store i32 %v4_a798, i32* %ip.global-to-local, align 4
  store i32 %v4_a79c, i32* %r2.global-to-local, align 4
  store i32 %v5_a7a0, i32* %r3.global-to-local, align 4
  store i32 %v5_a7a4, i32* @r5, align 4
  store i1 %v9_a7a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a7a8, label %dec_label_pc_a7b0, label %dec_label_pc_a720

dec_label_pc_a7b0:                                ; preds = %dec_label_pc_a790
  store i32 %v4_a7b0, i32* %r2.global-to-local, align 4
  store i32 %v1_a7b4, i32* %r3.global-to-local, align 4
  store i1 %v2_a7b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a7b8, label %dec_label_pc_a804, label %dec_label_pc_a7c0

dec_label_pc_a7c0:                                ; preds = %dec_label_pc_a7b0
  store i1 %v2_a7c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a7c0, label %dec_label_pc_a720, label %dec_label_pc_a7c8

dec_label_pc_a7c8:                                ; preds = %dec_label_pc_a7c0
  %v0_a7c8 = load i32, i32* @r7, align 4
  store i32 %v0_a7c8, i32* %r0.global-to-local, align 4
  %v1_a7cc = call i32 @function_11960(i32 %v0_a7c8)
  store i32 %v1_a7cc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a5f0

dec_label_pc_a7d4:                                ; preds = %dec_label_pc_a720
  %v0_a7d4 = load i32, i32* @r7, align 4
  store i32 %v0_a7d4, i32* %r0.global-to-local, align 4
  %v1_a7d8 = call i32 @function_11960(i32 %v0_a7d4)
  store i32 %v1_a7d8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a600

dec_label_pc_a7e0:                                ; preds = %dec_label_pc_a59c
  store i32 %v3_a584, i32* %r0.global-to-local, align 4
  %v1_a7e4 = call i32 @function_11960(i32 %v3_a584)
  store i32 %v1_a7e4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a7e8

dec_label_pc_a7e8:                                ; preds = %dec_label_pc_a730, %dec_label_pc_a3b4, %dec_label_pc_a7e0
  %v29_a7ec = phi i32 [ %v3_a584, %dec_label_pc_a3b4 ], [ %v1_a7e4, %dec_label_pc_a7e0 ], [ 0, %dec_label_pc_a730 ]
  ret i32 %v29_a7ec

dec_label_pc_a7f0:                                ; preds = %dec_label_pc_a6d0
  %v0_a7f0 = call i32 @function_e8e4()
  %v1_a7f0 = trunc i32 %v0_a7f0 to i8
  store i32 %v0_a7f0, i32* %r0.global-to-local, align 4
  %v4_a7f4 = sdiv i32 %v0_a7f0, 256
  store i32 %v4_a7f4, i32* %r3.global-to-local, align 4
  %v1_a7f8 = trunc i32 %v4_a7f4 to i8
  br label %dec_label_pc_a700

dec_label_pc_a804:                                ; preds = %dec_label_pc_a7b0
  %v3_a804 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a804, i32* @r4, align 4
  store i32 %v2_a3d4, i32* %r2.global-to-local, align 4
  %v3_a80c = mul i32 %v3_a804, 16
  store i32 %v3_a80c, i32* %ip.global-to-local, align 4
  %v3_a810 = add i32 %v3_a80c, %v2_a3d4
  %v4_a810 = inttoptr i32 %v3_a810 to i32*
  store i32 %storemerge25, i32* %v4_a810, align 4
  %v0_a814 = load i32, i32* @r6, align 4
  %v1_a814 = add i32 %v0_a814, 4
  %v2_a814 = inttoptr i32 %v1_a814 to i32*
  %v3_a814 = load i32, i32* %v2_a814, align 4
  store i32 %v3_a814, i32* %r0.global-to-local, align 4
  %v1_a81c = and i32 %v3_a814, 65280
  store i32 %v1_a81c, i32* %r1.global-to-local, align 4
  store i32 %v2_a3d4, i32* %lr.global-to-local, align 4
  %v3_a824 = mul i32 %v3_a814, 16777216
  %v4_a82c = mul nuw nsw i32 %v1_a81c, 256
  %v5_a82c = or i32 %v4_a82c, %v3_a824
  store i32 %v5_a82c, i32* %r2.global-to-local, align 4
  %v1_a834 = load i32, i32* %ip.global-to-local, align 4
  %v2_a834 = add i32 %v1_a834, %v2_a3d4
  store i32 %v2_a834, i32* %ip.global-to-local, align 4
  %v2_a838 = call i32 @llvm.bswap.i32(i32 %v3_a814)
  store i32 %v2_a838, i32* %r3.global-to-local, align 4
  %v2_a83c = add i32 %v2_a834, 4
  %v3_a83c = inttoptr i32 %v2_a83c to i32*
  store i32 %v2_a838, i32* %v3_a83c, align 4
  %v0_a840 = load i32, i32* @r6, align 4
  %v1_a840 = add i32 %v0_a840, 8
  %v2_a840 = inttoptr i32 %v1_a840 to i32*
  %v3_a840 = load i32, i32* %v2_a840, align 4
  store i32 %v3_a840, i32* %r0.global-to-local, align 4
  %v1_a848 = and i32 %v3_a840, 65280
  store i32 %v1_a848, i32* %r1.global-to-local, align 4
  %v3_a84c = mul i32 %v3_a840, 16777216
  %v4_a854 = mul nuw nsw i32 %v1_a848, 256
  %v5_a854 = or i32 %v4_a854, %v3_a84c
  store i32 %v5_a854, i32* %r2.global-to-local, align 4
  %v2_a85c = call i32 @llvm.bswap.i32(i32 %v3_a840)
  store i32 %v2_a85c, i32* %r3.global-to-local, align 4
  %v1_a860 = load i32, i32* %ip.global-to-local, align 4
  %v2_a860 = add i32 %v1_a860, 8
  %v3_a860 = inttoptr i32 %v2_a860 to i32*
  store i32 %v2_a85c, i32* %v3_a860, align 4
  %v0_a864 = load i32, i32* @r6, align 4
  %v1_a864 = inttoptr i32 %v0_a864 to i32*
  %v2_a864 = load i32, i32* %v1_a864, align 4
  %v3_a868 = udiv i32 %v2_a864, 65536
  store i32 %v3_a868, i32* %r2.global-to-local, align 4
  %v3_a86c3 = udiv i32 %v2_a864, 16777216
  store i32 %v3_a86c3, i32* %r1.global-to-local, align 4
  %v0_a870 = load i32, i32* @r5, align 4
  %v3_a870 = sdiv i32 %v0_a870, 256
  store i32 %v3_a870, i32* %r3.global-to-local, align 4
  %v1_a874 = trunc i32 %v3_a870 to i8
  %v2_a874 = load i32, i32* %ip.global-to-local, align 4
  %v3_a874 = add i32 %v2_a874, 15
  %v4_a874 = inttoptr i32 %v3_a874 to i8*
  store i8 %v1_a874, i8* %v4_a874, align 1
  %v0_a878 = load i32, i32* %r1.global-to-local, align 4
  %v1_a878 = trunc i32 %v0_a878 to i8
  %v2_a878 = load i32, i32* %ip.global-to-local, align 4
  %v3_a878 = add i32 %v2_a878, 13
  %v4_a878 = inttoptr i32 %v3_a878 to i8*
  store i8 %v1_a878, i8* %v4_a878, align 1
  %v0_a87c = load i32, i32* %r2.global-to-local, align 4
  %v1_a87c = trunc i32 %v0_a87c to i8
  %v2_a87c = load i32, i32* %ip.global-to-local, align 4
  %v3_a87c = add i32 %v2_a87c, 12
  %v4_a87c = inttoptr i32 %v3_a87c to i8*
  store i8 %v1_a87c, i8* %v4_a87c, align 1
  %v0_a880 = load i32, i32* @r5, align 4
  %v1_a880 = trunc i32 %v0_a880 to i8
  %v2_a880 = load i32, i32* %ip.global-to-local, align 4
  %v3_a880 = add i32 %v2_a880, 14
  %v4_a880 = inttoptr i32 %v3_a880 to i8*
  store i8 %v1_a880, i8* %v4_a880, align 1
  %v0_a884 = load i32, i32* @sl, align 4
  store i32 %v0_a884, i32* %r0.global-to-local, align 4
  %v1_a888 = call i32 @function_123e4(i32 %v0_a884)
  store i32 %v1_a888, i32* %r0.global-to-local, align 4
  store i32 %v2_a3e4, i32* %r1.global-to-local, align 4
  %v3_a890 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a890, i32* %r2.global-to-local, align 4
  %v2_a894 = load i32, i32* @r4, align 4
  %v5_a894 = mul i32 %v2_a894, 4
  %v6_a894 = add i32 %v5_a894, %v2_a3e4
  %v7_a894 = inttoptr i32 %v6_a894 to i32*
  store i32 %v1_a888, i32* %v7_a894, align 4
  %v0_a898 = load i32, i32* %r1.global-to-local, align 4
  %v1_a898 = load i32, i32* %r2.global-to-local, align 4
  %v4_a898 = mul i32 %v1_a898, 4
  %v5_a898 = add i32 %v4_a898, %v0_a898
  %v6_a898 = inttoptr i32 %v5_a898 to i32*
  %v7_a898 = load i32, i32* %v6_a898, align 4
  store i32 %v7_a898, i32* @r4, align 4
  %v1_a89c = inttoptr i32 %v7_a898 to i8*
  %v2_a89c = load i8, i8* %v1_a89c, align 1
  %tmp100 = urem i8 %v2_a89c, 16
  %v1_a8a0 = zext i8 %tmp100 to i32
  %v1_a8a4 = or i32 %v1_a8a0, 64
  store i32 %v1_a8a4, i32* %r3.global-to-local, align 4
  %v1_a8a8 = trunc i32 %v1_a8a4 to i8
  store i8 %v1_a8a8, i8* %v1_a89c, align 1
  %v0_a8ac = load i32, i32* @r4, align 4
  %v1_a8ac = inttoptr i32 %v0_a8ac to i8*
  %v2_a8ac = load i8, i8* %v1_a8ac, align 1
  store i32 %v3_a5cc, i32* %ip.global-to-local, align 4
  %v1_a8b8 = and i8 %v2_a8ac, -16
  %v1_a8c0 = or i8 %v1_a8b8, 5
  store i32 %v5_a8c4, i32* %r0.global-to-local, align 4
  %v0_a8c8 = load i32, i32* @sl, align 4
  %v3_a8c8 = mul i32 %v0_a8c8, 65536
  store i32 %v3_a8c8, i32* %r2.global-to-local, align 4
  store i32 %v1_a464, i32* %lr.global-to-local, align 4
  store i8 %v1_a8c0, i8* %v1_a8ac, align 1
  store i32 %v5_a420, i32* %r1.global-to-local, align 4
  %v0_a8d8 = load i32, i32* %r2.global-to-local, align 4
  %v3_a8d8 = udiv i32 %v0_a8d8, 65536
  %v1_a8dc = urem i32 %v3_a8d8, 256
  store i32 %v1_a8dc, i32* %r3.global-to-local, align 4
  %v3_a8e0 = udiv i32 %v0_a8d8, 16777216
  store i32 %v3_a8e0, i32* %r2.global-to-local, align 4
  %v2_a8e4 = load i32, i32* @r4, align 4
  %v3_a8e4 = add i32 %v2_a8e4, 1
  %v4_a8e4 = inttoptr i32 %v3_a8e4 to i8*
  store i8 %v1_a8e4, i8* %v4_a8e4, align 1
  %v0_a8e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a8e8 = load i32, i32* %r3.global-to-local, align 4
  %v4_a8e8 = mul i32 %v1_a8e8, 256
  %v5_a8e8 = or i32 %v4_a8e8, %v0_a8e8
  store i32 %v5_a8e8, i32* %r2.global-to-local, align 4
  %v1_a8ec = trunc i32 %v0_a8e8 to i8
  %v2_a8ec = load i32, i32* @r4, align 4
  %v3_a8ec = add i32 %v2_a8ec, 2
  %v4_a8ec = inttoptr i32 %v3_a8ec to i8*
  store i8 %v1_a8ec, i8* %v4_a8ec, align 1
  %v0_a8f0 = load i32, i32* %lr.global-to-local, align 4
  %v2_a8f0 = icmp eq i32 %v0_a8f0, 0
  store i1 %v2_a8f0, i1* %cpsr_z.global-to-local, align 1
  %v0_a8f4 = load i32, i32* %r2.global-to-local, align 4
  %v3_a8f4 = sdiv i32 %v0_a8f4, 256
  store i32 %v3_a8f4, i32* %r3.global-to-local, align 4
  store i32 %v5_a458, i32* %r2.global-to-local, align 4
  %v1_a8fc = trunc i32 %v3_a8f4 to i8
  %v2_a8fc = load i32, i32* @r4, align 4
  %v3_a8fc = add i32 %v2_a8fc, 3
  %v4_a8fc = inttoptr i32 %v3_a8fc to i8*
  store i8 %v1_a8fc, i8* %v4_a8fc, align 1
  %v0_a900 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a900, label %bb77, label %bb76

bb76:                                             ; preds = %dec_label_pc_a804
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %dec_label_pc_a804, %bb76
  %v0_a904 = load i32, i32* %r2.global-to-local, align 4
  %v1_a904 = trunc i32 %v0_a904 to i8
  %v2_a904 = load i32, i32* @r4, align 4
  %v3_a904 = add i32 %v2_a904, 8
  %v4_a904 = inttoptr i32 %v3_a904 to i8*
  store i8 %v1_a904, i8* %v4_a904, align 1
  %v0_a908 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a908, label %.thread5, label %bb78

bb78:                                             ; preds = %bb77
  %v1_a908 = load i32, i32* %r3.global-to-local, align 4
  %v2_a908 = trunc i32 %v1_a908 to i8
  %v3_a908 = load i32, i32* @r4, align 4
  %v4_a908 = add i32 %v3_a908, 6
  %v5_a908 = inttoptr i32 %v4_a908 to i8*
  store i8 %v2_a908, i8* %v5_a908, align 1
  %v0_a90c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a90c.pr, label %.thread5, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %bb77, %bb78, %bb79
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_a914 = load i32, i32* @r4, align 4
  %v3_a914 = add i32 %v2_a914, 9
  %v4_a914 = inttoptr i32 %v3_a914 to i8*
  store i8 6, i8* %v4_a914, align 1
  %v0_a918 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a918, label %bb81, label %bb80

bb80:                                             ; preds = %.thread5
  %v1_a918 = load i32, i32* %r2.global-to-local, align 4
  %v2_a918 = trunc i32 %v1_a918 to i8
  %v3_a918 = load i32, i32* @r4, align 4
  %v4_a918 = add i32 %v3_a918, 7
  %v5_a918 = inttoptr i32 %v4_a918 to i8*
  store i8 %v2_a918, i8* %v5_a918, align 1
  br label %bb81

bb81:                                             ; preds = %.thread5, %bb80
  %v2_a920 = load i32, i32* @global_var_1c93c.50, align 4
  store i32 %v2_a920, i32* %r3.global-to-local, align 4
  %v0_a924 = load i32, i32* %r0.global-to-local, align 4
  %v3_a924 = sdiv i32 %v0_a924, 256
  store i32 %v3_a924, i32* %ip.global-to-local, align 4
  %v1_a928 = load i32, i32* @r4, align 4
  %v2_a928 = add i32 %v1_a928, 12
  %v3_a928 = inttoptr i32 %v2_a928 to i32*
  store i32 %v2_a920, i32* %v3_a928, align 4
  %v0_a92c = load i32, i32* %ip.global-to-local, align 4
  %v1_a92c = trunc i32 %v0_a92c to i8
  %v2_a92c = load i32, i32* @r4, align 4
  %v3_a92c = add i32 %v2_a92c, 5
  %v4_a92c = inttoptr i32 %v3_a92c to i8*
  store i8 %v1_a92c, i8* %v4_a92c, align 1
  %v3_a930 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a930, i32* %r2.global-to-local, align 4
  store i32 %v2_a3d4, i32* %ip.global-to-local, align 4
  %v4_a938 = mul i32 %v3_a930, 16
  %v5_a938 = add i32 %v4_a938, %v2_a3d4
  %v6_a938 = inttoptr i32 %v5_a938 to i32*
  %v7_a938 = load i32, i32* %v6_a938, align 4
  store i32 %v7_a938, i32* %r3.global-to-local, align 4
  %v0_a93c = load i32, i32* %r0.global-to-local, align 4
  %v1_a93c = trunc i32 %v0_a93c to i8
  %v2_a93c = load i32, i32* @r4, align 4
  %v3_a93c = add i32 %v2_a93c, 4
  %v4_a93c = inttoptr i32 %v3_a93c to i8*
  store i8 %v1_a93c, i8* %v4_a93c, align 1
  %v0_a940 = load i32, i32* %r3.global-to-local, align 4
  %v1_a940 = load i32, i32* @r4, align 4
  %v2_a940 = add i32 %v1_a940, 16
  %v3_a940 = inttoptr i32 %v2_a940 to i32*
  store i32 %v0_a940, i32* %v3_a940, align 4
  %v0_a944 = load i32, i32* %r2.global-to-local, align 4
  %v3_a944 = mul i32 %v0_a944, 16
  %v1_a948 = load i32, i32* %ip.global-to-local, align 4
  %v2_a948 = add i32 %v1_a948, %v3_a944
  store i32 %v2_a948, i32* %r2.global-to-local, align 4
  %v1_a94c = add i32 %v2_a948, 13
  %v2_a94c = inttoptr i32 %v1_a94c to i8*
  %v3_a94c = load i8, i8* %v2_a94c, align 1
  %v4_a94c = zext i8 %v3_a94c to i32
  store i32 %v4_a94c, i32* %r1.global-to-local, align 4
  %v1_a950 = add i32 %v2_a948, 12
  %v2_a950 = inttoptr i32 %v1_a950 to i8*
  %v3_a950 = load i8, i8* %v2_a950, align 1
  %v4_a950 = zext i8 %v3_a950 to i32
  %v4_a954 = mul nuw nsw i32 %v4_a94c, 256
  %v5_a954 = or i32 %v4_a950, %v4_a954
  store i32 %v5_a954, i32* %r3.global-to-local, align 4
  %v2_a958 = load i32, i32* @r4, align 4
  %v3_a958 = add i32 %v2_a958, 20
  %v4_a958 = inttoptr i32 %v3_a958 to i8*
  store i8 %v3_a950, i8* %v4_a958, align 1
  %v0_a95c = load i32, i32* @r4, align 4
  %v1_a95c = add i32 %v0_a95c, 20
  store i32 %v1_a95c, i32* @r6, align 4
  %v0_a960 = load i32, i32* %r3.global-to-local, align 4
  %v3_a960 = sdiv i32 %v0_a960, 256
  store i32 %v3_a960, i32* %r3.global-to-local, align 4
  %v1_a964 = trunc i32 %v3_a960 to i8
  %v3_a964 = add i32 %v0_a95c, 21
  %v4_a964 = inttoptr i32 %v3_a964 to i8*
  store i8 %v1_a964, i8* %v4_a964, align 1
  %v0_a968 = load i32, i32* @r6, align 4
  %v1_a968 = add i32 %v0_a968, 13
  %v2_a968 = inttoptr i32 %v1_a968 to i8*
  %v3_a968 = load i8, i8* %v2_a968, align 1
  %v4_a968 = zext i8 %v3_a968 to i32
  store i32 %v4_a968, i32* %r3.global-to-local, align 4
  %v0_a96c = load i32, i32* %r2.global-to-local, align 4
  %v1_a96c = add i32 %v0_a96c, 8
  %v2_a96c = inttoptr i32 %v1_a96c to i32*
  %v3_a96c = load i32, i32* %v2_a96c, align 4
  store i32 %v3_a96c, i32* %r1.global-to-local, align 4
  %v1_a970 = or i32 %v4_a968, 1
  store i32 %v1_a970, i32* %r3.global-to-local, align 4
  %v1_a974 = add i32 %v0_a96c, 15
  %v2_a974 = inttoptr i32 %v1_a974 to i8*
  %v3_a974 = load i8, i8* %v2_a974, align 1
  %v4_a974 = zext i8 %v3_a974 to i32
  store i32 %v4_a974, i32* %ip.global-to-local, align 4
  %v1_a978 = add i32 %v0_a96c, 14
  %v2_a978 = inttoptr i32 %v1_a978 to i8*
  %v3_a978 = load i8, i8* %v2_a978, align 1
  %v4_a978 = zext i8 %v3_a978 to i32
  store i32 %v4_a978, i32* %r0.global-to-local, align 4
  %v2_a97c = add i32 %v0_a968, 4
  %v3_a97c = inttoptr i32 %v2_a97c to i32*
  store i32 %v3_a96c, i32* %v3_a97c, align 4
  %v0_a980 = load i32, i32* %r2.global-to-local, align 4
  %v1_a980 = add i32 %v0_a980, 4
  %v2_a980 = inttoptr i32 %v1_a980 to i32*
  %v3_a980 = load i32, i32* %v2_a980, align 4
  store i32 %v3_a980, i32* %lr.global-to-local, align 4
  %v0_a984 = load i32, i32* %r3.global-to-local, align 4
  %v1_a984 = trunc i32 %v0_a984 to i8
  %v2_a984 = load i32, i32* @r6, align 4
  %v3_a984 = add i32 %v2_a984, 13
  %v4_a984 = inttoptr i32 %v3_a984 to i8*
  store i8 %v1_a984, i8* %v4_a984, align 1
  %v0_a988 = load i32, i32* @r6, align 4
  %v1_a988 = add i32 %v0_a988, 12
  %v2_a988 = inttoptr i32 %v1_a988 to i8*
  %v3_a988 = load i8, i8* %v2_a988, align 1
  %v4_a988 = zext i8 %v3_a988 to i32
  store i32 %v4_a988, i32* %r2.global-to-local, align 4
  %v1_a98c = add i32 %v0_a988, 13
  %v2_a98c = inttoptr i32 %v1_a98c to i8*
  %v3_a98c = load i8, i8* %v2_a98c, align 1
  %v4_a98c = zext i8 %v3_a98c to i32
  %v0_a990 = load i32, i32* %r0.global-to-local, align 4
  %v1_a990 = load i32, i32* %ip.global-to-local, align 4
  %v4_a990 = mul i32 %v1_a990, 256
  %v5_a990 = or i32 %v4_a990, %v0_a990
  store i32 %v5_a990, i32* %r0.global-to-local, align 4
  %tmp101 = urem i8 %v3_a988, 16
  %v1_a994 = zext i8 %tmp101 to i32
  %v3_a998 = sdiv i32 %v5_a990, 256
  store i32 %v3_a998, i32* %r1.global-to-local, align 4
  %v1_a99c = or i32 %v1_a994, 128
  store i32 %v1_a99c, i32* %r2.global-to-local, align 4
  %v1_a9a0 = or i32 %v4_a98c, 16
  store i32 %v1_a9a0, i32* %r3.global-to-local, align 4
  %v1_a9a4 = trunc i32 %v3_a998 to i8
  %v3_a9a4 = add i32 %v0_a988, 3
  %v4_a9a4 = inttoptr i32 %v3_a9a4 to i8*
  store i8 %v1_a9a4, i8* %v4_a9a4, align 1
  %v0_a9a8 = load i32, i32* %lr.global-to-local, align 4
  %v1_a9a8 = load i32, i32* @r6, align 4
  %v2_a9a8 = add i32 %v1_a9a8, 8
  %v3_a9a8 = inttoptr i32 %v2_a9a8 to i32*
  store i32 %v0_a9a8, i32* %v3_a9a8, align 4
  %v0_a9ac = load i32, i32* %r2.global-to-local, align 4
  %v1_a9ac = trunc i32 %v0_a9ac to i8
  %v2_a9ac = load i32, i32* @r6, align 4
  %v3_a9ac = add i32 %v2_a9ac, 12
  %v4_a9ac = inttoptr i32 %v3_a9ac to i8*
  store i8 %v1_a9ac, i8* %v4_a9ac, align 1
  %v0_a9b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a9b0 = trunc i32 %v0_a9b0 to i8
  %v2_a9b0 = load i32, i32* @r6, align 4
  %v3_a9b0 = add i32 %v2_a9b0, 13
  %v4_a9b0 = inttoptr i32 %v3_a9b0 to i8*
  store i8 %v1_a9b0, i8* %v4_a9b0, align 1
  %v0_a9b4 = load i32, i32* %r0.global-to-local, align 4
  %v1_a9b4 = trunc i32 %v0_a9b4 to i8
  %v2_a9b4 = load i32, i32* @r6, align 4
  %v3_a9b4 = add i32 %v2_a9b4, 2
  %v4_a9b4 = inttoptr i32 %v3_a9b4 to i8*
  store i8 %v1_a9b4, i8* %v4_a9b4, align 1
  %v0_a9b8 = call i32 @function_e8e4()
  %v1_a9b8 = trunc i32 %v0_a9b8 to i8
  store i32 %v0_a9b8, i32* %r0.global-to-local, align 4
  store i32 %v1_a49c, i32* %lr.global-to-local, align 4
  %v0_a9c0 = load i32, i32* @r6, align 4
  %v1_a9c0 = add i32 %v0_a9c0, 13
  %v2_a9c0 = inttoptr i32 %v1_a9c0 to i8*
  %v3_a9c0 = load i8, i8* %v2_a9c0, align 1
  %v4_a9c0 = zext i8 %v3_a9c0 to i32
  store i32 %v1_a9c4, i32* %r2.global-to-local, align 4
  %v1_a9c8 = and i32 %v4_a9c0, 223
  %v5_a9cc = or i32 %v1_a9c8, %v4_a9cc
  store i32 %v5_a9cc, i32* %r3.global-to-local, align 4
  %v1_a9d0 = trunc i32 %v5_a9cc to i8
  store i8 %v1_a9d0, i8* %v2_a9c0, align 1
  store i32 %v1_a4bc, i32* %r1.global-to-local, align 4
  %v0_a9d8 = load i32, i32* @r6, align 4
  %v1_a9d8 = add i32 %v0_a9d8, 13
  %v2_a9d8 = inttoptr i32 %v1_a9d8 to i8*
  %v3_a9d8 = load i8, i8* %v2_a9d8, align 1
  %v4_a9d8 = zext i8 %v3_a9d8 to i32
  store i32 %v1_a9dc, i32* %r3.global-to-local, align 4
  %v1_a9e0 = and i32 %v4_a9d8, 239
  %v5_a9e4 = or i32 %v1_a9e0, %v4_a9e4
  store i32 %v5_a9e4, i32* %r2.global-to-local, align 4
  %v1_a9e8 = trunc i32 %v5_a9e4 to i8
  store i8 %v1_a9e8, i8* %v2_a9d8, align 1
  store i32 %v1_a4dc, i32* %ip.global-to-local, align 4
  %v0_a9f0 = load i32, i32* @r6, align 4
  %v1_a9f0 = add i32 %v0_a9f0, 13
  %v2_a9f0 = inttoptr i32 %v1_a9f0 to i8*
  %v3_a9f0 = load i8, i8* %v2_a9f0, align 1
  %v4_a9f0 = zext i8 %v3_a9f0 to i32
  store i32 %v1_a9f4, i32* %r2.global-to-local, align 4
  %v1_a9f8 = and i32 %v4_a9f0, 247
  %v5_a9fc = or i32 %v1_a9f8, %v4_a9fc
  store i32 %v5_a9fc, i32* %r3.global-to-local, align 4
  %v1_aa00 = trunc i32 %v5_a9fc to i8
  store i8 %v1_aa00, i8* %v2_a9f0, align 1
  %v0_aa08 = load i32, i32* @r6, align 4
  %v1_aa08 = add i32 %v0_aa08, 13
  %v2_aa08 = inttoptr i32 %v1_aa08 to i8*
  %v3_aa08 = load i8, i8* %v2_aa08, align 1
  %v4_aa08 = zext i8 %v3_aa08 to i32
  store i32 %v1_aa0c, i32* %r3.global-to-local, align 4
  %v1_aa10 = and i32 %v4_aa08, 251
  %v5_aa14 = or i32 %v1_aa10, %v4_aa14
  store i32 %v5_aa14, i32* %r2.global-to-local, align 4
  %v1_aa18 = trunc i32 %v5_aa14 to i8
  store i8 %v1_aa18, i8* %v2_aa08, align 1
  store i32 %v1_a51c, i32* %r1.global-to-local, align 4
  %v0_aa20 = load i32, i32* @r6, align 4
  %v1_aa20 = add i32 %v0_aa20, 13
  %v2_aa20 = inttoptr i32 %v1_aa20 to i8*
  %v3_aa20 = load i8, i8* %v2_aa20, align 1
  %v4_aa20 = zext i8 %v3_aa20 to i32
  store i32 %v1_aa24, i32* %r2.global-to-local, align 4
  %v1_aa28 = and i32 %v4_aa20, 253
  %v4_aa2c = or i32 %v1_aa28, %v3_aa2c
  store i32 %v4_aa2c, i32* %r3.global-to-local, align 4
  %v1_aa30 = trunc i32 %v4_aa2c to i8
  store i8 %v1_aa30, i8* %v2_aa20, align 1
  %v0_aa34 = load i32, i32* @r6, align 4
  %v1_aa34 = add i32 %v0_aa34, 13
  %v2_aa34 = inttoptr i32 %v1_aa34 to i8*
  %v3_aa34 = load i8, i8* %v2_aa34, align 1
  %v4_aa34 = zext i8 %v3_aa34 to i32
  %v0_aa38 = load i32, i32* @r8, align 4
  %v1_aa38 = urem i32 %v0_aa38, 2
  %v1_aa3c = and i32 %v4_aa34, 254
  store i32 %v1_aa3c, i32* %r2.global-to-local, align 4
  %v4_aa4027 = udiv i32 %v0_a9b8, 256
  %v2_aa44 = or i32 %v1_aa3c, %v1_aa38
  store i32 %v2_aa44, i32* %r3.global-to-local, align 4
  %v1_aa48 = trunc i32 %v4_aa4027 to i8
  %v3_aa48 = add i32 %v0_aa34, 15
  %v4_aa48 = inttoptr i32 %v3_aa48 to i8*
  store i8 %v1_aa48, i8* %v4_aa48, align 1
  %v3_aa4c = load i32, i32* @r6, align 4
  %v4_aa4c = add i32 %v3_aa4c, 14
  %v5_aa4c = inttoptr i32 %v4_aa4c to i8*
  store i8 %v1_a9b8, i8* %v5_aa4c, align 1
  %v0_aa50 = load i32, i32* %r3.global-to-local, align 4
  %v1_aa50 = trunc i32 %v0_aa50 to i8
  %v2_aa50 = load i32, i32* @r6, align 4
  %v3_aa50 = add i32 %v2_aa50, 13
  %v4_aa50 = inttoptr i32 %v3_aa50 to i8*
  store i8 %v1_aa50, i8* %v4_aa50, align 1
  %v0_aa54 = load i32, i32* @r4, align 4
  %v1_aa54 = add i32 %v0_aa54, 40
  store i32 %v1_aa54, i32* %r0.global-to-local, align 4
  %v0_aa58 = load i32, i32* @sb, align 4
  store i32 %v0_aa58, i32* @r1, align 4
  %v1_aa5c = inttoptr i32 %v1_aa54 to i8*
  %v2_aa5c = call i32 @function_ea64(i8* %v1_aa5c)
  store i32 %v2_aa5c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aa60

dec_label_pc_aa60:                                ; preds = %dec_label_pc_a600, %bb81
  %v3_aa60 = load i32, i32* %stack_var_-40, align 4
  %v1_aa64 = add i32 %v3_aa60, 1
  store i32 %v1_aa64, i32* %r3.global-to-local, align 4
  %v1_aa68 = load i32, i32* @fp, align 4
  %v9_aa68 = icmp eq i32 %v1_aa64, %v1_aa68
  store i1 %v9_aa68, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_aa64, i32* %stack_var_-40, align 4
  %v5_aa70 = icmp slt i32 %v1_aa64, %v1_aa68
  br i1 %v5_aa70, label %dec_label_pc_a5f0, label %dec_label_pc_aa74

dec_label_pc_aa74:                                ; preds = %dec_label_pc_aa60, %.thread18
  %v0_aa7c12 = phi i32 [ %v0_a5c4, %.thread18 ], [ %v1_aa68, %dec_label_pc_aa60 ]
  %v0_aa74 = load i32, i32* @sb, align 4
  %v1_aa74 = add i32 %v0_aa74, 40
  store i32 %v1_aa74, i32* @sl, align 4
  %v1_aa78 = add i32 %v0_aa74, 20
  store i32 %v1_aa78, i32* @r7, align 4
  %v2_aac8 = icmp eq i32 %v1_a574, 0
  %v6_aaa8 = inttoptr i32 %v2_a3e4 to i32*
  %v3_aab0 = icmp eq i32 %v3_a5cc, 65535
  br label %dec_label_pc_aa7c

dec_label_pc_aa7c:                                ; preds = %dec_label_pc_aad8, %dec_label_pc_aa74
  %v0_aa7c = phi i32 [ %v1_abb8, %dec_label_pc_aad8 ], [ %v0_aa7c12, %dec_label_pc_aa74 ]
  %v2_aa7c = icmp eq i32 %v0_aa7c, 0
  store i1 %v2_aa7c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp82 = icmp slt i32 %v0_aa7c, 1
  br label %dec_label_pc_aa84

dec_label_pc_aa84:                                ; preds = %dec_label_pc_aa84, %dec_label_pc_aa7c
  br i1 %tmp82, label %dec_label_pc_aa84, label %dec_label_pc_aa88

dec_label_pc_aa88:                                ; preds = %dec_label_pc_aa84
  %v0_aa88 = load i32, i32* @r7, align 4
  %tmp83 = mul i32 %v0_aa88, 256
  %v1_aa90 = and i32 %tmp83, 65280
  %tmp84 = udiv i32 %v0_aa88, 256
  %v4_aa94 = urem i32 %tmp84, 256
  %v5_aa94 = or i32 %v4_aa94, %v1_aa90
  store i32 %v5_aa94, i32* @r8, align 4
  store i32 %v2_a3e4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_a5cc, i32* %ip.global-to-local, align 4
  %v7_aaa8 = load i32, i32* %v6_aaa8, align 4
  store i32 %v7_aaa8, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_aab0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_aabc = add i32 %v7_aaa8, 20
  store i32 %v1_aabc, i32* @r5, align 4
  br i1 %v3_aab0, label %dec_label_pc_abe4, label %dec_label_pc_aac4

dec_label_pc_aac4:                                ; preds = %dec_label_pc_abc4, %dec_label_pc_aa88
  %v0_aacc = phi i32 [ %v7_abd0, %dec_label_pc_abc4 ], [ %v7_aaa8, %dec_label_pc_aa88 ]
  store i32 %v1_a574, i32* %lr.global-to-local, align 4
  store i1 %v2_aac8, i1* %cpsr_z.global-to-local, align 1
  %v1_aacc = add i32 %v0_aacc, 40
  store i32 %v1_aacc, i32* %r0.global-to-local, align 4
  %v0_aad0 = load i32, i32* @sb, align 4
  store i32 %v0_aad0, i32* @r1, align 4
  br i1 %v2_aac8, label %dec_label_pc_aad8, label %dec_label_pc_ac08

dec_label_pc_aad8:                                ; preds = %dec_label_pc_aac4, %dec_label_pc_abe4, %dec_label_pc_ac08
  %v2_aad8 = phi i32 [ %v0_aacc, %dec_label_pc_aac4 ], [ %v0_abfc, %dec_label_pc_abe4 ], [ %v2_aad8.pre, %dec_label_pc_ac08 ]
  %v0_aad8 = load i32, i32* @r6, align 4
  %v1_aad8 = trunc i32 %v0_aad8 to i8
  %v3_aad8 = add i32 %v2_aad8, 10
  %v4_aad8 = inttoptr i32 %v3_aad8 to i8*
  store i8 %v1_aad8, i8* %v4_aad8, align 1
  %v0_aadc = load i32, i32* @r6, align 4
  %v1_aadc = trunc i32 %v0_aadc to i8
  %v2_aadc = load i32, i32* @r4, align 4
  %v3_aadc = add i32 %v2_aadc, 11
  %v4_aadc = inttoptr i32 %v3_aadc to i8*
  store i8 %v1_aadc, i8* %v4_aadc, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_aae4 = load i32, i32* @r4, align 4
  store i32 %v0_aae4, i32* @r0, align 4
  %v2_aae8 = call i32 @function_d0b8(i32 %v0_aae4, i32 20)
  %v3_aae8 = trunc i32 %v2_aae8 to i8
  store i32 %v2_aae8, i32* %r0.global-to-local, align 4
  %v3_aaec = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_a3d4, i32* %r2.global-to-local, align 4
  %v3_aaf4 = mul i32 %v3_aaec, 16
  %v2_aaf8 = add i32 %v3_aaf4, %v2_a3d4
  store i32 %v2_aaf8, i32* %r1.global-to-local, align 4
  %v1_aafc = add i32 %v2_aaf8, 4
  %v2_aafc = inttoptr i32 %v1_aafc to i32*
  %v3_aafc = load i32, i32* %v2_aafc, align 4
  %v3_ab00 = mul i32 %v3_aafc, 65536
  store i32 %v3_ab00, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_aafc, 256
  %v1_ab08 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_aafc, 256
  %v4_ab0c = urem i32 %tmp86, 256
  %v5_ab0c = or i32 %v4_ab0c, %v1_ab08
  store i32 %v5_ab0c, i32* %r2.global-to-local, align 4
  %v1_ab10 = add i32 %v3_aafc, 1
  store i32 %v1_ab10, i32* %r3.global-to-local, align 4
  store i32 %v1_ab10, i32* %v2_aafc, align 4
  %v0_ab18 = load i32, i32* %r2.global-to-local, align 4
  %v1_ab18 = load i32, i32* @r5, align 4
  %v2_ab18 = add i32 %v1_ab18, 4
  %v3_ab18 = inttoptr i32 %v2_ab18 to i32*
  store i32 %v0_ab18, i32* %v3_ab18, align 4
  %v0_ab1c = load i32, i32* %r1.global-to-local, align 4
  %v1_ab1c = add i32 %v0_ab1c, 8
  %v2_ab1c = inttoptr i32 %v1_ab1c to i32*
  %v3_ab1c = load i32, i32* %v2_ab1c, align 4
  %tmp87 = mul i32 %v3_ab1c, 256
  %v1_ab28 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_ab1c, 256
  %v4_ab2c = urem i32 %tmp88, 256
  %v5_ab2c = or i32 %v4_ab2c, %v1_ab28
  store i32 %v5_ab2c, i32* %r2.global-to-local, align 4
  %v4_ab3028 = udiv i32 %v2_aae8, 256
  %v1_ab34 = trunc i32 %v4_ab3028 to i8
  %v2_ab34 = load i32, i32* @r4, align 4
  %v3_ab34 = add i32 %v2_ab34, 11
  %v4_ab34 = inttoptr i32 %v3_ab34 to i8*
  store i8 %v1_ab34, i8* %v4_ab34, align 1
  %v3_ab38 = load i32, i32* @r4, align 4
  %v4_ab38 = add i32 %v3_ab38, 10
  %v5_ab38 = inttoptr i32 %v4_ab38 to i8*
  store i8 %v3_aae8, i8* %v5_ab38, align 1
  %v0_ab3c = load i32, i32* %r2.global-to-local, align 4
  %v1_ab3c = load i32, i32* @r5, align 4
  %v2_ab3c = add i32 %v1_ab3c, 8
  %v3_ab3c = inttoptr i32 %v2_ab3c to i32*
  store i32 %v0_ab3c, i32* %v3_ab3c, align 4
  %v0_ab40 = load i32, i32* @r5, align 4
  store i32 %v0_ab40, i32* @r1, align 4
  %v0_ab44 = load i32, i32* @r8, align 4
  store i32 %v0_ab44, i32* %r2.global-to-local, align 4
  %v0_ab48 = load i32, i32* @r7, align 4
  store i32 %v0_ab48, i32* %r3.global-to-local, align 4
  %v0_ab4c = load i32, i32* @r4, align 4
  store i32 %v0_ab4c, i32* %r0.global-to-local, align 4
  %v0_ab50 = load i32, i32* @r6, align 4
  %v1_ab50 = trunc i32 %v0_ab50 to i8
  %v3_ab50 = add i32 %v0_ab40, 16
  %v4_ab50 = inttoptr i32 %v3_ab50 to i8*
  store i8 %v1_ab50, i8* %v4_ab50, align 1
  %v0_ab54 = load i32, i32* @r6, align 4
  %v1_ab54 = trunc i32 %v0_ab54 to i8
  %v2_ab54 = load i32, i32* @r5, align 4
  %v3_ab54 = add i32 %v2_ab54, 17
  %v4_ab54 = inttoptr i32 %v3_ab54 to i8*
  store i8 %v1_ab54, i8* %v4_ab54, align 1
  %v4_ab58 = call i32 @function_d114(i32 %v0_ab4c, i32 %v0_ab40, i32 %v0_ab44, i32 %v0_ab48)
  %v5_ab58 = trunc i32 %v4_ab58 to i8
  store i32 %v4_ab58, i32* %r0.global-to-local, align 4
  %v4_ab5c29 = udiv i32 %v4_ab58, 256
  %v1_ab60 = trunc i32 %v4_ab5c29 to i8
  %v2_ab60 = load i32, i32* @r5, align 4
  %v3_ab60 = add i32 %v2_ab60, 17
  %v4_ab60 = inttoptr i32 %v3_ab60 to i8*
  store i8 %v1_ab60, i8* %v4_ab60, align 1
  %v3_ab64 = load i32, i32* @r5, align 4
  %v4_ab64 = add i32 %v3_ab64, 16
  %v5_ab64 = inttoptr i32 %v4_ab64 to i8*
  store i8 %v5_ab58, i8* %v5_ab64, align 1
  %v3_ab68 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ab68, i32* %r3.global-to-local, align 4
  %v0_ab6c = load i32, i32* @r4, align 4
  %v1_ab6c = add i32 %v0_ab6c, 20
  %v2_ab6c = inttoptr i32 %v1_ab6c to i32*
  %v3_ab6c = load i32, i32* %v2_ab6c, align 4
  %v5_ab74 = mul i32 %v3_ab68, 24
  %v3_ab7c = udiv i32 %v3_ab6c, 65536
  store i32 %v3_ab7c, i32* %r2.global-to-local, align 4
  %v2_ab80 = add i32 %v5_ab74, %arg2
  store i32 %v2_ab80, i32* %ip.global-to-local, align 4
  %v3_ab844 = udiv i32 %v3_ab6c, 16777216
  %v1_ab88 = trunc i32 %v3_ab844 to i8
  %v3_ab88 = add i32 %v2_ab80, 3
  %v4_ab88 = inttoptr i32 %v3_ab88 to i8*
  store i8 %v1_ab88, i8* %v4_ab88, align 1
  %v0_ab8c = load i32, i32* %r2.global-to-local, align 4
  %v1_ab8c = trunc i32 %v0_ab8c to i8
  %v2_ab8c = load i32, i32* %ip.global-to-local, align 4
  %v3_ab8c = add i32 %v2_ab8c, 2
  %v4_ab8c = inttoptr i32 %v3_ab8c to i8*
  store i8 %v1_ab8c, i8* %v4_ab8c, align 1
  %v0_ab90 = load i32, i32* @r4, align 4
  store i32 %v0_ab90, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_a584, i32* %r0.global-to-local, align 4
  %v0_ab9c = load i32, i32* @sl, align 4
  store i32 %v0_ab9c, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_aba4 = load i32, i32* %ip.global-to-local, align 4
  %v6_abac = inttoptr i32 %v0_ab90 to i32*
  %v7_abac = call i32 @function_121e8(i32 %v3_a584, i32* %v6_abac, i32 %v0_ab9c, i32 16384, i32 %v0_aba4, i32 16)
  %v3_abb0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_abb0, i32* %r3.global-to-local, align 4
  %v1_abb4 = add i32 %v3_abb0, 1
  store i32 %v1_abb4, i32* %r0.global-to-local, align 4
  %v1_abb8 = load i32, i32* @fp, align 4
  %v9_abb8 = icmp eq i32 %v1_abb4, %v1_abb8
  store i1 %v9_abb8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_abb4, i32* %stack_var_-40, align 4
  %v6_abc0 = icmp slt i32 %v1_abb4, %v1_abb8
  br i1 %v6_abc0, label %dec_label_pc_abc4, label %dec_label_pc_aa7c

dec_label_pc_abc4:                                ; preds = %dec_label_pc_aad8
  store i32 %v2_a3e4, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_a5cc, i32* %ip.global-to-local, align 4
  %v4_abd0 = mul i32 %v1_abb4, 4
  %v5_abd0 = add i32 %v4_abd0, %v2_a3e4
  %v6_abd0 = inttoptr i32 %v5_abd0 to i32*
  %v7_abd0 = load i32, i32* %v6_abd0, align 4
  store i32 %v7_abd0, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_aab0, i1* %cpsr_z.global-to-local, align 1
  %v1_abdc = add i32 %v7_abd0, 20
  store i32 %v1_abdc, i32* @r5, align 4
  br i1 %v3_aab0, label %dec_label_pc_abe4, label %dec_label_pc_aac4

dec_label_pc_abe4:                                ; preds = %dec_label_pc_abc4, %dec_label_pc_aa88
  %v0_abe4 = call i32 @function_e8e4()
  %v1_abe4 = trunc i32 %v0_abe4 to i8
  store i32 %v1_a574, i32* %lr.global-to-local, align 4
  %v4_abec = sdiv i32 %v0_abe4, 256
  store i32 %v4_abec, i32* %r3.global-to-local, align 4
  store i1 %v2_aac8, i1* %cpsr_z.global-to-local, align 1
  %v3_abf4 = load i32, i32* @r4, align 4
  %v4_abf4 = add i32 %v3_abf4, 4
  %v5_abf4 = inttoptr i32 %v4_abf4 to i8*
  store i8 %v1_abe4, i8* %v5_abf4, align 1
  %v0_abf8 = load i32, i32* %r3.global-to-local, align 4
  %v1_abf8 = trunc i32 %v0_abf8 to i8
  %v2_abf8 = load i32, i32* @r4, align 4
  %v3_abf8 = add i32 %v2_abf8, 5
  %v4_abf8 = inttoptr i32 %v3_abf8 to i8*
  store i8 %v1_abf8, i8* %v4_abf8, align 1
  %v0_abfc = load i32, i32* @r4, align 4
  %v1_abfc = add i32 %v0_abfc, 40
  store i32 %v1_abfc, i32* %r0.global-to-local, align 4
  %v0_ac00 = load i32, i32* @sb, align 4
  store i32 %v0_ac00, i32* @r1, align 4
  %v0_ac04 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac04, label %dec_label_pc_aad8, label %dec_label_pc_ac08

dec_label_pc_ac08:                                ; preds = %dec_label_pc_aac4, %dec_label_pc_abe4
  %v0_ac08 = phi i32 [ %v1_aacc, %dec_label_pc_aac4 ], [ %v1_abfc, %dec_label_pc_abe4 ]
  %v1_ac08 = inttoptr i32 %v0_ac08 to i8*
  %v2_ac08 = call i32 @function_ea64(i8* %v1_ac08)
  store i32 %v2_ac08, i32* %r0.global-to-local, align 4
  %v2_aad8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_aad8

; uselistorder directives
  uselistorder i32 %v0_abfc, { 1, 0 }
  uselistorder i32 %v7_abd0, { 1, 2, 0 }
  uselistorder i32 %v1_abb8, { 1, 2, 0 }
  uselistorder i32 %v1_abb4, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_ab58, { 0, 2, 1 }
  uselistorder i32 %v0_ab40, { 1, 0, 2 }
  uselistorder i32 %v3_ab1c, { 1, 0 }
  uselistorder i32 %v3_aafc, { 3, 2, 0, 1 }
  uselistorder i32 %v2_aae8, { 0, 2, 1 }
  uselistorder i32 %v0_aacc, { 1, 0 }
  uselistorder i32 %v0_aa88, { 1, 0 }
  uselistorder i32 %v0_aa7c, { 1, 0 }
  uselistorder i1 %v3_aab0, { 2, 3, 1, 0 }
  uselistorder i32 %v1_aa64, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a9b8, { 0, 2, 1 }
  uselistorder i32 %v3_a998, { 1, 0 }
  uselistorder i32 %v0_a96c, { 1, 0, 2 }
  uselistorder i32 %v3_a960, { 1, 0 }
  uselistorder i32 %v3_a8f4, { 1, 0 }
  uselistorder i32 %v0_a8e8, { 1, 0 }
  uselistorder i32 %v3_a870, { 1, 0 }
  uselistorder i32 %v2_a85c, { 1, 0 }
  uselistorder i32 %v3_a840, { 1, 0, 2, 3 }
  uselistorder i32 %v2_a838, { 1, 0 }
  uselistorder i32 %v3_a814, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a80c, { 1, 0 }
  uselistorder i32 %v4_a7f4, { 1, 0 }
  uselistorder i32 %v0_a7f0, { 0, 2, 1 }
  uselistorder i1 %v7_a760, { 1, 0 }
  uselistorder i32 %v7_a758, { 0, 2, 1, 3 }
  uselistorder i32 %v5_a7a4, { 1, 0 }
  uselistorder i1 %v9_a788, { 1, 0 }
  uselistorder i32 %v4_a79c, { 1, 0 }
  uselistorder i32 %v4_a798, { 1, 0 }
  uselistorder i32 %v8_a6ac, { 1, 2, 0, 3 }
  uselistorder i32 %v3_a698, { 1, 0 }
  uselistorder i32 %v0_a688, { 2, 0, 1, 3 }
  uselistorder i1 %v7_a610, { 1, 0 }
  uselistorder i32 %v3_a60c, { 2, 1, 0, 3 }
  uselistorder i32 %v1_aa24, { 1, 0 }
  uselistorder i32 %v1_aa0c, { 1, 0 }
  uselistorder i32 %v1_a9f4, { 1, 0 }
  uselistorder i32 %v1_a9dc, { 1, 0 }
  uselistorder i32 %v1_a9c4, { 1, 0 }
  uselistorder i32 %v5_a7a0, { 1, 0 }
  uselistorder i32 %v3_a6f493, { 1, 0 }
  uselistorder i1 %v2_a7b8, { 1, 0 }
  uselistorder i32 %v1_a7b4, { 1, 0 }
  uselistorder i32 %v4_a7b0, { 2, 0, 1 }
  uselistorder i32 %v4_a794, { 1, 0 }
  uselistorder i1 %v3_a6dc, { 1, 0 }
  uselistorder i32 %v8_a5d8, { 2, 1, 0 }
  uselistorder i32 %v8_a5d4, { 1, 2, 0 }
  uselistorder i32 %v3_a5cc, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v0_a5c8, { 0, 1, 3, 2 }
  uselistorder i1 %v7_a5bc, { 1, 0 }
  uselistorder i1 %v7_a58c, { 1, 0 }
  uselistorder i32 %v3_a588, { 2, 0, 1 }
  uselistorder i32 %v3_a584, { 5, 6, 1, 3, 4, 7, 8, 2, 0, 9 }
  uselistorder i32 %v1_a574, { 1, 3, 2, 0 }
  uselistorder i32 %v1_a51c, { 1, 2, 0 }
  uselistorder i32 %v1_a4fc, { 1, 0 }
  uselistorder i32 %v1_a4dc, { 1, 2, 0 }
  uselistorder i32 %v1_a4bc, { 1, 2, 0 }
  uselistorder i32 %v1_a49c, { 1, 2, 0 }
  uselistorder i32 %v1_a464, { 1, 2, 0 }
  uselistorder i32 %v5_a420, { 0, 2, 1 }
  uselistorder i32 %v2_a3e4, { 0, 4, 5, 2, 1, 3, 6 }
  uselistorder i32 %v2_a3d4, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_a3b8, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 44, 43, 45, 47, 46, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 6, 5, 10, 7, 8, 11, 9, 19, 12, 13, 14, 15, 16, 17, 18, 23, 20, 21, 22, 24, 26, 25, 28, 27, 31, 29, 32, 33, 30, 34, 36, 35, 37, 38, 40, 39, 44, 41, 42, 43, 45, 47, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 13, 14, 15, 17, 26, 18, 19, 16, 20, 21, 22, 23, 24, 25 }
  uselistorder i32 768, { 0, 2, 1, 3 }
  uselistorder i32 %arg2, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_ac08, { 1, 0 }
  uselistorder label %dec_label_pc_aad8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_aa60, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %.thread5, { 2, 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %dec_label_pc_a7e8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a720, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_a6d0, { 1, 0 }
}

define i32 @function_ac14(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_ac14:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_ac18 = urem i32 %arg1, 256
  store i32 %v1_ac18, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_ac30 = urem i32 %arg3, 256
  store i32 %v1_ac30, i32* @r4, align 4
  %v2_ac34 = call i32 @function_12538(i32 %v1_ac18, i32 4)
  %v0_ac38 = load i32, i32* @r5, align 4
  store i32 %v0_ac38, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ac48 = load i32, i32* @r4, align 4
  %v5_ac4c = inttoptr i32 %v0_ac38 to i32*
  %v6_ac4c = call i32 @function_85e0(i32 %v0_ac48, i32* %v5_ac4c, i32 2, i32 0, i32 %v2_ac34)
  %v1_ac58 = urem i32 %v6_ac4c, 256
  store i32 %v1_ac58, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_ac64 = load i32, i32* @r5, align 4
  store i32 %v0_ac64, i32* %r1.global-to-local, align 4
  %v0_ac68 = load i32, i32* @r4, align 4
  %v5_ac6c = trunc i32 %v6_ac4c to i8
  %v6_ac70 = inttoptr i32 %v0_ac64 to i32*
  %v7_ac70 = call i32 @function_85e0(i32 %v0_ac68, i32* %v6_ac70, i32 3, i32 65535, i32 %v6_ac4c)
  %v0_ac74 = load i32, i32* @r5, align 4
  store i32 %v0_ac74, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_ac70, i32* @r8, align 4
  %v0_ac84 = load i32, i32* @r4, align 4
  %v5_ac88 = inttoptr i32 %v0_ac74 to i32*
  %v6_ac88 = call i32 @function_85e0(i32 %v0_ac84, i32* %v5_ac88, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_ac90 = urem i32 %v6_ac88, 256
  store i32 %v1_ac90, i32* %ip.global-to-local, align 4
  %v0_ac94 = load i32, i32* @r5, align 4
  store i32 %v0_ac94, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_aca0 = load i32, i32* @r4, align 4
  %sext13 = mul i32 %v6_ac88, 16777216
  %v5_aca8 = sdiv i32 %sext13, 16777216
  %v6_aca8 = inttoptr i32 %v0_ac94 to i32*
  %v7_aca8 = call i32 @function_85e0(i32 %v0_aca0, i32* %v6_aca8, i32 5, i32 0, i32 %v5_aca8)
  %v1_acb4 = urem i32 %v7_aca8, 256
  store i32 %v1_acb4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_acc0 = load i32, i32* @r5, align 4
  store i32 %v0_acc0, i32* %r1.global-to-local, align 4
  %v0_acc4 = load i32, i32* @r4, align 4
  %v5_accc = inttoptr i32 %v0_acc0 to i32*
  %v6_accc = call i32 @function_85e0(i32 %v0_acc4, i32* %v5_accc, i32 6, i32 65535, i32 %v1_acb4)
  %v0_acd4 = load i32, i32* @r5, align 4
  store i32 %v0_acd4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_accc, i32* @r7, align 4
  %v0_ace4 = load i32, i32* @r4, align 4
  %v5_ace8 = inttoptr i32 %v0_acd4 to i32*
  %v6_ace8 = call i32 @function_85e0(i32 %v0_ace4, i32* %v5_ace8, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_acf0 = load i32, i32* @r5, align 4
  store i32 %v0_acf0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v6_ace8, i32* @r6, align 4
  %v0_ad00 = load i32, i32* @r4, align 4
  %v5_ad04 = inttoptr i32 %v0_acf0 to i32*
  %v6_ad04 = call i32 @function_85e0(i32 %v0_ad00, i32* %v5_ad04, i32 17, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_ad10 = load i32, i32* @r5, align 4
  store i32 %v0_ad10, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_ad1c = load i32, i32* @r4, align 4
  %v5_ad20 = inttoptr i32 %v0_ad10 to i32*
  %v6_ad20 = call i32 @function_85e0(i32 %v0_ad1c, i32* %v5_ad20, i32 18, i32 65535, i32 %v6_ad04)
  %v0_ad24 = load i32, i32* @r5, align 4
  store i32 %v0_ad24, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ad34 = load i32, i32* @r4, align 4
  %v5_ad38 = inttoptr i32 %v0_ad24 to i32*
  %v6_ad38 = call i32 @function_85e0(i32 %v0_ad34, i32* %v5_ad38, i32 11, i32 0, i32 %v6_ad20)
  %v0_ad3c = load i32, i32* @r5, align 4
  store i32 %v0_ad3c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ad4c = load i32, i32* @r4, align 4
  %v5_ad50 = inttoptr i32 %v0_ad3c to i32*
  %v6_ad50 = call i32 @function_85e0(i32 %v0_ad4c, i32* %v5_ad50, i32 12, i32 1, i32 %v6_ad38)
  %v0_ad54 = load i32, i32* @r5, align 4
  store i32 %v0_ad54, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ad64 = load i32, i32* @r4, align 4
  %v5_ad68 = inttoptr i32 %v0_ad54 to i32*
  %v6_ad68 = call i32 @function_85e0(i32 %v0_ad64, i32* %v5_ad68, i32 13, i32 0, i32 %v6_ad50)
  %v0_ad6c = load i32, i32* @r5, align 4
  store i32 %v0_ad6c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ad7c = load i32, i32* @r4, align 4
  %v5_ad80 = inttoptr i32 %v0_ad6c to i32*
  %v6_ad80 = call i32 @function_85e0(i32 %v0_ad7c, i32* %v5_ad80, i32 14, i32 0, i32 %v6_ad68)
  %v0_ad84 = load i32, i32* @r5, align 4
  store i32 %v0_ad84, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ad94 = load i32, i32* @r4, align 4
  %v5_ad98 = inttoptr i32 %v0_ad84 to i32*
  %v6_ad98 = call i32 @function_85e0(i32 %v0_ad94, i32* %v5_ad98, i32 15, i32 0, i32 %v6_ad80)
  %v0_ad9c = load i32, i32* @r5, align 4
  store i32 %v0_ad9c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_adac = load i32, i32* @r4, align 4
  %v5_adb0 = inttoptr i32 %v0_ad9c to i32*
  %v6_adb0 = call i32 @function_85e0(i32 %v0_adac, i32* %v5_adb0, i32 16, i32 0, i32 %v6_ad98)
  %v0_adb4 = load i32, i32* @r5, align 4
  store i32 %v0_adb4, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_adc4 = load i32, i32* @r4, align 4
  %v5_adc8 = inttoptr i32 %v0_adb4 to i32*
  %v6_adc8 = call i32 @function_85e0(i32 %v0_adc4, i32* %v5_adc8, i32 0, i32 512, i32 %v6_adb0)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_add8 = load i32, i32* @r5, align 4
  store i32 %v0_add8, i32* %r1.global-to-local, align 4
  %v0_addc = load i32, i32* @r4, align 4
  %v5_ade0 = inttoptr i32 %v0_add8 to i32*
  %v6_ade0 = call i32 @function_85e0(i32 %v0_addc, i32* %v5_ade0, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_adec = load i32, i32* @global_var_1c93c.50, align 4
  store i32 %v2_adec, i32* %r3.global-to-local, align 4
  %v1_adf0 = urem i32 %v6_ade0, 256
  store i32 %v1_adf0, i32* %ip.global-to-local, align 4
  %v0_adf4 = load i32, i32* @r5, align 4
  store i32 %v0_adf4, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_adfc = load i32, i32* @r4, align 4
  %v5_ae04 = inttoptr i32 %v0_adf4 to i32*
  %v6_ae04 = call i32 @function_8574(i32 %v0_adfc, i32* %v5_ae04, i32 25, i32 %v2_adec, i32 %v1_adf0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_ae18 = call i32 @function_1224c(i32 2, i32 3, i32 6)
  %v7_ae1c = icmp eq i32 %v3_ae18, -1
  store i1 %v7_ae1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ae1c, label %dec_label_pc_b254, label %dec_label_pc_ae28

dec_label_pc_ae28:                                ; preds = %dec_label_pc_ac14
  store i32 1, i32* %stack_var_-40, align 4
  %v6_ae30 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_ae30, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_ae44 = call i32 @function_1221c(i32 %v3_ae18, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v7_ae48 = icmp eq i32 %v6_ae44, -1
  store i1 %v7_ae48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ae48, label %dec_label_pc_b24c, label %dec_label_pc_ae50

dec_label_pc_ae50:                                ; preds = %dec_label_pc_ae28
  %v0_ae50 = load i32, i32* @r8, align 4
  %v0_ae54 = load i32, i32* @r7, align 4
  %v0_ae58 = load i32, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ae60 = urem i32 %v0_ae50, 65536
  store i32 %v3_ae60, i32* %r2.global-to-local, align 4
  %v3_ae64 = urem i32 %v0_ae54, 65536
  store i32 %v3_ae64, i32* %r3.global-to-local, align 4
  %v3_ae68 = urem i32 %v0_ae58, 65536
  store i32 %v3_ae68, i32* %ip.global-to-local, align 4
  %v0_ae6c = load i32, i32* @fp, align 4
  %v2_ae6c = icmp eq i32 %v0_ae6c, 0
  store i1 %v2_ae6c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp75 = icmp slt i32 %v0_ae6c, 1
  br i1 %tmp75, label %dec_label_pc_b36c, label %dec_label_pc_ae84

dec_label_pc_ae84:                                ; preds = %dec_label_pc_ae50
  %v1_ae8c = add i32 %v6_adc8, 40
  %tmp76 = mul i32 %v1_ae8c, 256
  %v1_aea0 = urem i32 %v0_ae54, 256
  %v1_aea4 = and i32 %tmp76, 65280
  %v3_aea8 = mul nuw nsw i32 %v1_aea0, 256
  %v1_aeb0 = urem i32 %v0_ae58, 256
  %tmp77 = udiv i32 %v0_ae58, 256
  %v3_aeb4 = urem i32 %tmp77, 256
  %tmp78 = udiv i32 %v1_ae8c, 256
  %v4_aeb8 = urem i32 %tmp78, 256
  %v5_aeb8 = or i32 %v4_aeb8, %v1_aea4
  store i32 %v5_aeb8, i32* @lr, align 4
  %tmp79 = udiv i32 %v0_ae54, 256
  %v4_aebc = urem i32 %tmp79, 256
  %v5_aebc = or i32 %v4_aebc, %v3_aea8
  store i32 %v5_aebc, i32* @sl, align 4
  %v4_aec0 = mul nuw nsw i32 %v1_aeb0, 256
  %v5_aec0 = or i32 %v4_aec0, %v3_aeb4
  store i32 %v5_aec0, i32* @r6, align 4
  %tmp80 = udiv i32 %v0_ae50, 256
  %v3_aed0 = urem i32 %tmp80, 256
  %v1_aed4 = urem i32 %v0_ae50, 256
  %tmp81 = mul i32 %v6_ad04, 256
  %v1_aedc = and i32 %tmp81, 65280
  %v1_aee0 = urem i32 %v6_ad38, 2
  %v1_aee4 = urem i32 %v6_ad50, 2
  %v1_aee8 = urem i32 %v6_ad68, 2
  %tmp82 = udiv i32 %v6_ad04, 256
  %v4_aeec = urem i32 %tmp82, 256
  %v5_aeec = or i32 %v4_aeec, %v1_aedc
  store i32 %v5_aeec, i32* @r8, align 4
  %v1_af0c = urem i32 %v6_ad80, 2
  %v1_af10 = urem i32 %v6_ad98, 2
  %v1_af14 = urem i32 %v6_adb0, 2
  %v1_af18 = urem i32 %v6_ad68, 256
  %v4_af1c = mul nuw nsw i32 %v1_aed4, 256
  %v5_af1c = or i32 %v4_af1c, %v3_aed0
  store i32 %v5_af1c, i32* @r5, align 4
  %v3_af3025 = udiv i32 %v1_aea4, 256
  store i32 %v3_af3025, i32* %r3.global-to-local, align 4
  store i32 %v1_aed4, i32* %ip.global-to-local, align 4
  store i32 %v1_aea0, i32* %r1.global-to-local, align 4
  store i32 %v1_aeb0, i32* %r2.global-to-local, align 4
  %v5_af4c = trunc i32 %v0_ae54 to i8
  store i32 0, i32* @r4, align 4
  %sext8 = mul i32 %v0_ae50, 16777216
  %v4_afb4 = sdiv i32 %sext8, 16777216
  %sext9 = mul i32 %tmp78, 16777216
  %v4_afc8 = sdiv i32 %sext9, 16777216
  %sext10 = mul i32 %v1_ae8c, 16777216
  %v4_afcc = sdiv i32 %sext10, 16777216
  %tmp = sub nsw i32 0, %v1_aee0
  %v4_b01c = and i32 %tmp, 32
  %tmp93 = sub nsw i32 0, %v1_aee4
  %v4_b030 = and i32 %tmp93, 16
  %tmp94 = sub nsw i32 0, %v1_aee8
  %v4_b044 = and i32 %tmp94, 8
  %tmp95 = sub nsw i32 0, %v1_af0c
  %v4_b058 = and i32 %tmp95, 4
  %tmp96 = sub nsw i32 0, %v1_af10
  %v3_b06c = and i32 %tmp96, 2
  %sext11 = mul i32 %v0_ae58, 16777216
  %v7_b09c = sdiv i32 %sext11, 16777216
  %v1_afb0 = trunc i32 %v5_aca8 to i8
  %extract.t = trunc i32 %v4_afb4 to i8
  %v3_b09c = sext i8 %v5_af4c to i32
  %v2_b0c0 = icmp eq i32 %v1_af18, 0
  br label %dec_label_pc_af58

dec_label_pc_af58:                                ; preds = %bb89, %dec_label_pc_ae84
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_af64 = call i32 @function_12538(i32 1510, i32 1)
  store i32 %v2_ac34, i32* %ip.global-to-local, align 4
  %v2_af70 = load i32, i32* @r4, align 4
  %v5_af70 = mul i32 %v2_af70, 4
  %v6_af70 = add i32 %v5_af70, %v2_ac34
  %v7_af70 = inttoptr i32 %v6_af70 to i32*
  store i32 %v2_af64, i32* %v7_af70, align 4
  %v3_af74 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_af74, i32* %r3.global-to-local, align 4
  %v0_af78 = load i32, i32* %ip.global-to-local, align 4
  %v4_af78 = mul i32 %v3_af74, 4
  %v5_af78 = add i32 %v0_af78, %v4_af78
  %v6_af78 = inttoptr i32 %v5_af78 to i32*
  %v7_af78 = load i32, i32* %v6_af78, align 4
  store i32 %v7_af78, i32* @r7, align 4
  %v1_af7c = inttoptr i32 %v7_af78 to i8*
  %v2_af7c = load i8, i8* %v1_af7c, align 1
  %tmp97 = urem i8 %v2_af7c, 16
  %v1_af80 = zext i8 %tmp97 to i32
  %v1_af84 = or i32 %v1_af80, 64
  store i32 %v1_af84, i32* %r2.global-to-local, align 4
  %v1_af88 = trunc i32 %v1_af84 to i8
  store i8 %v1_af88, i8* %v1_af7c, align 1
  %v0_af8c = load i32, i32* @r7, align 4
  %v1_af8c = inttoptr i32 %v0_af8c to i8*
  %v2_af8c = load i8, i8* %v1_af8c, align 1
  %v1_af90 = and i8 %v2_af8c, -16
  %v1_af94 = or i8 %v1_af90, 5
  store i32 %v1_acb4, i32* %r1.global-to-local, align 4
  store i8 %v1_af94, i8* %v1_af8c, align 1
  %v2_afa4 = load i32, i32* @r7, align 4
  %v3_afa4 = add i32 %v2_afa4, 1
  %v4_afa4 = inttoptr i32 %v3_afa4 to i8*
  store i8 %v5_ac6c, i8* %v4_afa4, align 1
  store i32 %v5_aca8, i32* %r3.global-to-local, align 4
  %v0_afac = load i32, i32* %r1.global-to-local, align 4
  %v2_afac = icmp eq i32 %v0_afac, 0
  store i1 %v2_afac, i1* %cpsr_z.global-to-local, align 1
  %v2_afb0 = load i32, i32* @r7, align 4
  %v3_afb0 = add i32 %v2_afb0, 8
  %v4_afb0 = inttoptr i32 %v3_afb0 to i8*
  store i8 %v1_afb0, i8* %v4_afb0, align 1
  store i32 %v4_afb4, i32* %r2.global-to-local, align 4
  %v0_afb8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_afb8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_af58
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_afbc = load i32, i32* @r7, align 4
  %v4_afbc = add i32 %v3_afbc, 6
  %v5_afbc = inttoptr i32 %v4_afbc to i8*
  store i8 64, i8* %v5_afbc, align 1
  %v0_afc4.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t26 = trunc i32 %v0_afc4.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_af58, %bb
  %v0_afc4.off0 = phi i8 [ %extract.t, %dec_label_pc_af58 ], [ %extract.t26, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_afc4 = load i32, i32* @r7, align 4
  %v3_afc4 = add i32 %v2_afc4, 5
  %v4_afc4 = inttoptr i32 %v3_afc4 to i8*
  store i8 %v0_afc4.off0, i8* %v4_afc4, align 1
  store i32 %v4_afc8, i32* %ip.global-to-local, align 4
  store i32 %v4_afcc, i32* %r1.global-to-local, align 4
  %v0_afd0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_afd0, label %bb84, label %bb83

bb83:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb84

bb84:                                             ; preds = %.thread, %bb83
  %v0_afd4 = load i32, i32* %r3.global-to-local, align 4
  %v1_afd4 = trunc i32 %v0_afd4 to i8
  %v2_afd4 = load i32, i32* @r7, align 4
  %v3_afd4 = add i32 %v2_afd4, 9
  %v4_afd4 = inttoptr i32 %v3_afd4 to i8*
  store i8 %v1_afd4, i8* %v4_afd4, align 1
  %v0_afd8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_afd8, label %bb86, label %bb85

bb85:                                             ; preds = %bb84
  %v1_afd8 = load i32, i32* %r2.global-to-local, align 4
  %v2_afd8 = trunc i32 %v1_afd8 to i8
  %v3_afd8 = load i32, i32* @r7, align 4
  %v4_afd8 = add i32 %v3_afd8, 7
  %v5_afd8 = inttoptr i32 %v4_afd8 to i8*
  store i8 %v2_afd8, i8* %v5_afd8, align 1
  br label %bb86

bb86:                                             ; preds = %bb84, %bb85
  %v3_afdc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_afdc, i32* %r2.global-to-local, align 4
  %v0_afe0 = load i32, i32* %ip.global-to-local, align 4
  %v1_afe0 = trunc i32 %v0_afe0 to i8
  %v2_afe0 = load i32, i32* @r7, align 4
  %v3_afe0 = add i32 %v2_afe0, 2
  %v4_afe0 = inttoptr i32 %v3_afe0 to i8*
  store i8 %v1_afe0, i8* %v4_afe0, align 1
  store i32 %v6_ae04, i32* %ip.global-to-local, align 4
  %v0_afe8 = load i32, i32* %r2.global-to-local, align 4
  %v3_afe8 = mul i32 %v0_afe8, 32
  store i32 %v3_afe8, i32* %r3.global-to-local, align 4
  %v1_afec = load i32, i32* @r7, align 4
  %v2_afec = add i32 %v1_afec, 12
  %v3_afec = inttoptr i32 %v2_afec to i32*
  store i32 %v6_ae04, i32* %v3_afec, align 4
  %v0_aff0 = load i32, i32* %r3.global-to-local, align 4
  %v1_aff0 = load i32, i32* %r2.global-to-local, align 4
  %tmp98 = mul i32 %v1_aff0, -8
  %v5_aff0 = add i32 %v0_aff0, %tmp98
  %v1_aff4 = load i32, i32* @sb, align 4
  %v2_aff4 = add i32 %v1_aff4, %v5_aff0
  store i32 %v2_aff4, i32* %r3.global-to-local, align 4
  %v1_aff8 = add i32 %v2_aff4, 16
  %v2_aff8 = inttoptr i32 %v1_aff8 to i32*
  %v3_aff8 = load i32, i32* %v2_aff8, align 4
  store i32 %v3_aff8, i32* %r2.global-to-local, align 4
  %v0_affc = load i32, i32* %r1.global-to-local, align 4
  %v1_affc = trunc i32 %v0_affc to i8
  %v2_affc = load i32, i32* @r7, align 4
  %v3_affc = add i32 %v2_affc, 3
  %v4_affc = inttoptr i32 %v3_affc to i8*
  store i8 %v1_affc, i8* %v4_affc, align 1
  %v0_b000 = load i32, i32* @r5, align 4
  %v1_b000 = trunc i32 %v0_b000 to i8
  %v2_b000 = load i32, i32* @r7, align 4
  %v3_b000 = add i32 %v2_b000, 4
  %v4_b000 = inttoptr i32 %v3_b000 to i8*
  store i8 %v1_b000, i8* %v4_b000, align 1
  %v0_b004 = load i32, i32* %r2.global-to-local, align 4
  %v1_b004 = load i32, i32* @r7, align 4
  %v2_b004 = add i32 %v1_b004, 16
  %v3_b004 = inttoptr i32 %v2_b004 to i32*
  store i32 %v0_b004, i32* %v3_b004, align 4
  %v0_b008 = load i32, i32* @sl, align 4
  %v1_b008 = trunc i32 %v0_b008 to i8
  %v2_b008 = load i32, i32* @r7, align 4
  %v3_b008 = add i32 %v2_b008, 20
  %v4_b008 = inttoptr i32 %v3_b008 to i8*
  store i8 %v1_b008, i8* %v4_b008, align 1
  %v0_b00c = load i32, i32* @r7, align 4
  %v1_b00c = add i32 %v0_b00c, 20
  store i32 %v1_b00c, i32* @r4, align 4
  %v1_b010 = add i32 %v0_b00c, 33
  %v2_b010 = inttoptr i32 %v1_b010 to i8*
  %v3_b010 = load i8, i8* %v2_b010, align 1
  %v4_b010 = zext i8 %v3_b010 to i32
  store i32 %v1_aee0, i32* %r1.global-to-local, align 4
  %v1_b018 = and i32 %v4_b010, 223
  %v5_b01c = or i32 %v1_b018, %v4_b01c
  store i32 %v5_b01c, i32* %r3.global-to-local, align 4
  %v1_b020 = trunc i32 %v5_b01c to i8
  store i8 %v1_b020, i8* %v2_b010, align 1
  %v0_b024 = load i32, i32* @r4, align 4
  %v1_b024 = add i32 %v0_b024, 13
  %v2_b024 = inttoptr i32 %v1_b024 to i8*
  %v3_b024 = load i8, i8* %v2_b024, align 1
  %v4_b024 = zext i8 %v3_b024 to i32
  store i32 %v1_aee4, i32* %r3.global-to-local, align 4
  %v1_b02c = and i32 %v4_b024, 239
  %v5_b030 = or i32 %v1_b02c, %v4_b030
  store i32 %v5_b030, i32* %r2.global-to-local, align 4
  %v1_b034 = trunc i32 %v5_b030 to i8
  store i8 %v1_b034, i8* %v2_b024, align 1
  %v0_b038 = load i32, i32* @r4, align 4
  %v1_b038 = add i32 %v0_b038, 13
  %v2_b038 = inttoptr i32 %v1_b038 to i8*
  %v3_b038 = load i8, i8* %v2_b038, align 1
  %v4_b038 = zext i8 %v3_b038 to i32
  store i32 %v1_aee8, i32* %ip.global-to-local, align 4
  %v1_b040 = and i32 %v4_b038, 247
  %v5_b044 = or i32 %v1_b040, %v4_b044
  store i32 %v5_b044, i32* %r3.global-to-local, align 4
  %v1_b048 = trunc i32 %v5_b044 to i8
  store i8 %v1_b048, i8* %v2_b038, align 1
  %v0_b04c = load i32, i32* @r4, align 4
  %v1_b04c = add i32 %v0_b04c, 13
  %v2_b04c = inttoptr i32 %v1_b04c to i8*
  %v3_b04c = load i8, i8* %v2_b04c, align 1
  %v4_b04c = zext i8 %v3_b04c to i32
  store i32 %v1_af0c, i32* %r1.global-to-local, align 4
  %v1_b054 = and i32 %v4_b04c, 251
  %v5_b058 = or i32 %v1_b054, %v4_b058
  store i32 %v5_b058, i32* %r2.global-to-local, align 4
  %v1_b05c = trunc i32 %v5_b058 to i8
  store i8 %v1_b05c, i8* %v2_b04c, align 1
  %v0_b060 = load i32, i32* @r4, align 4
  %v1_b060 = add i32 %v0_b060, 13
  %v2_b060 = inttoptr i32 %v1_b060 to i8*
  %v3_b060 = load i8, i8* %v2_b060, align 1
  %v4_b060 = zext i8 %v3_b060 to i32
  store i32 %v1_af10, i32* %r2.global-to-local, align 4
  %v1_b068 = and i32 %v4_b060, 253
  %v4_b06c = or i32 %v1_b068, %v3_b06c
  store i32 %v4_b06c, i32* %r3.global-to-local, align 4
  %v1_b070 = trunc i32 %v4_b06c to i8
  store i8 %v1_b070, i8* %v2_b060, align 1
  %v0_b074 = load i32, i32* @r4, align 4
  %v1_b074 = add i32 %v0_b074, 12
  %v2_b074 = inttoptr i32 %v1_b074 to i8*
  %v3_b074 = load i8, i8* %v2_b074, align 1
  %v4_b074 = zext i8 %v3_b074 to i32
  store i32 %v4_b074, i32* %r2.global-to-local, align 4
  %v1_b078 = add i32 %v0_b074, 13
  %v2_b078 = inttoptr i32 %v1_b078 to i8*
  %v3_b078 = load i8, i8* %v2_b078, align 1
  %v4_b078 = zext i8 %v3_b078 to i32
  store i32 %v1_af14, i32* %ip.global-to-local, align 4
  %tmp99 = urem i8 %v3_b074, 16
  %v1_b080 = zext i8 %tmp99 to i32
  %v1_b084 = and i32 %v4_b078, 254
  %v2_b088 = or i32 %v1_b084, %v1_af14
  store i32 %v2_b088, i32* %r3.global-to-local, align 4
  %v1_b08c = or i32 %v1_b080, 80
  store i32 %v1_b08c, i32* %r2.global-to-local, align 4
  %v1_b090 = trunc i32 %v2_b088 to i8
  store i8 %v1_b090, i8* %v2_b078, align 1
  %v0_b094 = load i32, i32* %r2.global-to-local, align 4
  %v1_b094 = trunc i32 %v0_b094 to i8
  %v2_b094 = load i32, i32* @r4, align 4
  %v3_b094 = add i32 %v2_b094, 12
  %v4_b094 = inttoptr i32 %v3_b094 to i8*
  store i8 %v1_b094, i8* %v4_b094, align 1
  store i32 %v3_b09c, i32* %r1.global-to-local, align 4
  store i32 %v7_b09c, i32* %r2.global-to-local, align 4
  %v2_b0a0 = load i32, i32* @r4, align 4
  %v3_b0a0 = add i32 %v2_b0a0, 1
  %v4_b0a0 = inttoptr i32 %v3_b0a0 to i8*
  store i8 %v5_af4c, i8* %v4_b0a0, align 1
  %v0_b0a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b0a4 = trunc i32 %v0_b0a4 to i8
  %v2_b0a4 = load i32, i32* @r4, align 4
  %v3_b0a4 = add i32 %v2_b0a4, 3
  %v4_b0a4 = inttoptr i32 %v3_b0a4 to i8*
  store i8 %v1_b0a4, i8* %v4_b0a4, align 1
  %v0_b0a8 = load i32, i32* @r6, align 4
  %v1_b0a8 = trunc i32 %v0_b0a8 to i8
  %v2_b0a8 = load i32, i32* @r4, align 4
  %v3_b0a8 = add i32 %v2_b0a8, 2
  %v4_b0a8 = inttoptr i32 %v3_b0a8 to i8*
  store i8 %v1_b0a8, i8* %v4_b0a8, align 1
  %v0_b0ac = load i32, i32* @r8, align 4
  %v1_b0ac = load i32, i32* @r4, align 4
  %v2_b0ac = add i32 %v1_b0ac, 4
  %v3_b0ac = inttoptr i32 %v2_b0ac to i32*
  store i32 %v0_b0ac, i32* %v3_b0ac, align 4
  %v0_b0b0 = call i32 @function_e8e4()
  store i32 %v1_af18, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_b0b0, 16777216
  %v1_b0b8 = sdiv i32 %sext, 16777216
  store i32 %v1_b0b8, i32* %r2.global-to-local, align 4
  %v3_b0bc = ashr i32 %sext, 31
  store i32 %v3_b0bc, i32* %r3.global-to-local, align 4
  store i1 %v2_b0c0, i1* %cpsr_z.global-to-local, align 1
  %v1_b0c4 = trunc i32 %v3_b0bc to i8
  %v2_b0c4 = load i32, i32* @r4, align 4
  %v3_b0c4 = add i32 %v2_b0c4, 15
  %v4_b0c4 = inttoptr i32 %v3_b0c4 to i8*
  store i8 %v1_b0c4, i8* %v4_b0c4, align 1
  %v0_b0c8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_b0d4.pre = load i32, i32* @r4, align 4
  br i1 %v0_b0c8, label %.thread12, label %bb87

bb87:                                             ; preds = %bb86
  %v2_b0c8 = add i32 %v2_b0d4.pre, 13
  %v3_b0c8 = inttoptr i32 %v2_b0c8 to i8*
  %v4_b0c8 = load i8, i8* %v3_b0c8, align 1
  %v5_b0c8 = zext i8 %v4_b0c8 to i32
  %v2_b0cc = or i32 %v5_b0c8, 8
  store i32 %v2_b0cc, i32* %r3.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %bb86, %bb87
  store i32 %v6_adc8, i32* @r1, align 4
  %v0_b0d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b0d4 = trunc i32 %v0_b0d4 to i8
  %v3_b0d4 = add i32 %v2_b0d4.pre, 14
  %v4_b0d4 = inttoptr i32 %v3_b0d4 to i8*
  store i8 %v1_b0d4, i8* %v4_b0d4, align 1
  %v0_b0d8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b0d8, label %bb89, label %bb88

bb88:                                             ; preds = %.thread12
  %v1_b0d8 = load i32, i32* %r3.global-to-local, align 4
  %v2_b0d8 = trunc i32 %v1_b0d8 to i8
  %v3_b0d8 = load i32, i32* @r4, align 4
  %v4_b0d8 = add i32 %v3_b0d8, 13
  %v5_b0d8 = inttoptr i32 %v4_b0d8 to i8*
  store i8 %v2_b0d8, i8* %v5_b0d8, align 1
  br label %bb89

bb89:                                             ; preds = %.thread12, %bb88
  %v0_b0dc = load i32, i32* @r7, align 4
  %v1_b0dc = add i32 %v0_b0dc, 40
  %v1_b0e0 = inttoptr i32 %v1_b0dc to i8*
  %v2_b0e0 = call i32 @function_ea64(i8* %v1_b0e0)
  %v3_b0e4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b0e4, i32* %r3.global-to-local, align 4
  %v1_b0e8 = add i32 %v3_b0e4, 1
  store i32 %v1_b0e8, i32* @r4, align 4
  %v0_b0ec = load i32, i32* @fp, align 4
  %v9_b0ec = icmp eq i32 %v0_b0ec, %v1_b0e8
  store i1 %v9_b0ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b0e8, i32* %stack_var_-40, align 4
  %v8_b0f4 = icmp sgt i32 %v0_b0ec, %v1_b0e8
  br i1 %v8_b0f4, label %dec_label_pc_af58, label %dec_label_pc_b0f8

dec_label_pc_b0f8:                                ; preds = %bb89
  store i32 %v6_adc8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_b100.preheader

dec_label_pc_b100.preheader:                      ; preds = %dec_label_pc_b0f8, %dec_label_pc_b36c
  %v0_b10017 = phi i32 [ %v0_b0ec, %dec_label_pc_b0f8 ], [ %v0_ae6c, %dec_label_pc_b36c ]
  %stack_var_-168.0.ph = phi i32 [ %v1_ae8c, %dec_label_pc_b0f8 ], [ %v1_b374, %dec_label_pc_b36c ]
  %storemerge = add i32 %v6_adc8, 20
  store i32 %storemerge, i32* @r8, align 4
  %v3_b2b8 = icmp eq i32 %v6_ae04, -1
  %v8_b2b8 = icmp eq i32 %v6_ae04, -1
  %v3_b2d4 = icmp eq i32 %v3_ae60, 65535
  %v2_b350 = icmp eq i32 %v1_adf0, 0
  br label %dec_label_pc_b100

dec_label_pc_b100:                                ; preds = %dec_label_pc_b1a8, %dec_label_pc_b100.preheader
  %v0_b100 = phi i32 [ %v0_b10017, %dec_label_pc_b100.preheader ], [ %v0_b23c, %dec_label_pc_b1a8 ]
  %v2_b100 = icmp eq i32 %v0_b100, 0
  store i1 %v2_b100, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp90 = icmp slt i32 %v0_b100, 1
  br label %dec_label_pc_b108

dec_label_pc_b108:                                ; preds = %dec_label_pc_b108, %dec_label_pc_b100
  br i1 %tmp90, label %dec_label_pc_b108, label %dec_label_pc_b10c

dec_label_pc_b10c:                                ; preds = %dec_label_pc_b108
  %v0_b10c = load i32, i32* @r8, align 4
  %v3_b10c = mul i32 %v0_b10c, 65536
  store i32 %v3_b10c, i32* %r2.global-to-local, align 4
  %tmp91 = mul i32 %v0_b10c, 256
  %v1_b114 = and i32 %tmp91, 65280
  store i32 %v1_b114, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %tmp92 = udiv i32 %v0_b10c, 256
  %v4_b120 = urem i32 %tmp92, 256
  %v5_b120 = or i32 %v4_b120, %v1_b114
  store i32 %v5_b120, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_b128

dec_label_pc_b128:                                ; preds = %dec_label_pc_b1a8, %dec_label_pc_b10c
  %v1_b13c = phi i32 [ %v1_b238, %dec_label_pc_b1a8 ], [ 0, %dec_label_pc_b10c ]
  %v5_b12c = mul i32 %v1_b13c, 24
  %v1_b130 = load i32, i32* @sb, align 4
  %v2_b130 = add i32 %v1_b130, %v5_b12c
  store i32 %v2_b130, i32* %r3.global-to-local, align 4
  store i32 %v2_ac34, i32* %ip.global-to-local, align 4
  %v1_b138 = add i32 %v2_b130, 20
  %v2_b138 = inttoptr i32 %v1_b138 to i8*
  %v3_b138 = load i8, i8* %v2_b138, align 1
  %v4_b138 = zext i8 %v3_b138 to i32
  store i32 %v4_b138, i32* %r2.global-to-local, align 4
  %v4_b13c = mul i32 %v1_b13c, 4
  %v5_b13c = add i32 %v4_b13c, %v2_ac34
  %v6_b13c = inttoptr i32 %v5_b13c to i32*
  %v7_b13c = load i32, i32* %v6_b13c, align 4
  store i32 %v7_b13c, i32* @r5, align 4
  %v7_b140 = icmp eq i8 %v3_b138, 31
  store i1 %v7_b140, i1* %cpsr_z.global-to-local, align 1
  %v1_b144 = add i32 %v7_b13c, 20
  store i32 %v1_b144, i32* @r6, align 4
  %tmp100 = icmp ult i8 %v3_b138, 32
  br i1 %tmp100, label %dec_label_pc_b25c, label %dec_label_pc_b14c

dec_label_pc_b14c:                                ; preds = %dec_label_pc_b128
  store i32 %v6_ae04, i32* %r1.global-to-local, align 4
  store i1 %v8_b2b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_b2b8, label %dec_label_pc_b2c4, label %dec_label_pc_b158

dec_label_pc_b158:                                ; preds = %dec_label_pc_b25c, %dec_label_pc_b14c
  store i32 %v3_ae60, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b2d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b2d4, label %dec_label_pc_b2e0, label %dec_label_pc_b16c

dec_label_pc_b16c:                                ; preds = %dec_label_pc_b2c4.dec_label_pc_b16c_crit_edge, %dec_label_pc_b158
  %v1_b170 = phi i32 [ %v1_b170.pre, %dec_label_pc_b2c4.dec_label_pc_b16c_crit_edge ], [ 65535, %dec_label_pc_b158 ]
  store i32 %v3_ae64, i32* %r3.global-to-local, align 4
  %v9_b170 = icmp eq i32 %v3_ae64, %v1_b170
  store i1 %v9_b170, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b170, label %dec_label_pc_b2fc, label %dec_label_pc_b178

dec_label_pc_b178:                                ; preds = %dec_label_pc_b2e0.dec_label_pc_b178_crit_edge, %dec_label_pc_b16c
  %v1_b17c = phi i32 [ %v1_b17c.pre, %dec_label_pc_b2e0.dec_label_pc_b178_crit_edge ], [ %v1_b170, %dec_label_pc_b16c ]
  store i32 %v3_ae68, i32* %ip.global-to-local, align 4
  %v9_b17c = icmp eq i32 %v3_ae68, %v1_b17c
  store i1 %v9_b17c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b17c, label %dec_label_pc_b318, label %dec_label_pc_b184

dec_label_pc_b184:                                ; preds = %dec_label_pc_b2fc.dec_label_pc_b184_crit_edge, %dec_label_pc_b178
  %v1_b188 = phi i32 [ %v1_b188.pre, %dec_label_pc_b2fc.dec_label_pc_b184_crit_edge ], [ %v1_b17c, %dec_label_pc_b178 ]
  store i32 %v6_ad04, i32* %r1.global-to-local, align 4
  %v9_b188 = icmp eq i32 %v6_ad04, %v1_b188
  store i1 %v9_b188, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b188, label %dec_label_pc_b334, label %dec_label_pc_b190

dec_label_pc_b190:                                ; preds = %dec_label_pc_b318.dec_label_pc_b190_crit_edge, %dec_label_pc_b184
  %v1_b194 = phi i32 [ %v1_b194.pre, %dec_label_pc_b318.dec_label_pc_b190_crit_edge ], [ %v1_b188, %dec_label_pc_b184 ]
  store i32 %v6_ad20, i32* %r2.global-to-local, align 4
  %v9_b194 = icmp eq i32 %v6_ad20, %v1_b194
  store i1 %v9_b194, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b194, label %dec_label_pc_b348, label %dec_label_pc_b19c

dec_label_pc_b19c:                                ; preds = %dec_label_pc_b334, %dec_label_pc_b190
  store i32 %v1_adf0, i32* %r3.global-to-local, align 4
  store i1 %v2_b350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b350, label %dec_label_pc_b1a8, label %dec_label_pc_b35c

dec_label_pc_b1a8:                                ; preds = %dec_label_pc_b19c, %dec_label_pc_b348, %dec_label_pc_b35c
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b1ac = load i32, i32* @r7, align 4
  %v1_b1ac = trunc i32 %v0_b1ac to i8
  %v2_b1ac = load i32, i32* @r5, align 4
  %v3_b1ac = add i32 %v2_b1ac, 10
  %v4_b1ac = inttoptr i32 %v3_b1ac to i8*
  store i8 %v1_b1ac, i8* %v4_b1ac, align 1
  %v0_b1b0 = load i32, i32* @r7, align 4
  %v1_b1b0 = trunc i32 %v0_b1b0 to i8
  %v2_b1b0 = load i32, i32* @r5, align 4
  %v3_b1b0 = add i32 %v2_b1b0, 11
  %v4_b1b0 = inttoptr i32 %v3_b1b0 to i8*
  store i8 %v1_b1b0, i8* %v4_b1b0, align 1
  %v0_b1b4 = load i32, i32* @r5, align 4
  store i32 %v0_b1b4, i32* @r0, align 4
  %v2_b1b8 = call i32 @function_d0b8(i32 %v0_b1b4, i32 20)
  %v3_b1b8 = trunc i32 %v2_b1b8 to i8
  %v4_b1bc28 = udiv i32 %v2_b1b8, 256
  %v1_b1c0 = trunc i32 %v4_b1bc28 to i8
  %v2_b1c0 = load i32, i32* @r5, align 4
  %v3_b1c0 = add i32 %v2_b1c0, 11
  %v4_b1c0 = inttoptr i32 %v3_b1c0 to i8*
  store i8 %v1_b1c0, i8* %v4_b1c0, align 1
  %v3_b1c4 = load i32, i32* @r5, align 4
  %v4_b1c4 = add i32 %v3_b1c4, 10
  %v5_b1c4 = inttoptr i32 %v4_b1c4 to i8*
  store i8 %v3_b1b8, i8* %v5_b1c4, align 1
  %v0_b1c8 = load i32, i32* @r6, align 4
  store i32 %v0_b1c8, i32* @r1, align 4
  %v0_b1cc = load i32, i32* @sl, align 4
  store i32 %v0_b1cc, i32* %r2.global-to-local, align 4
  %v0_b1d0 = load i32, i32* @r8, align 4
  store i32 %v0_b1d0, i32* %r3.global-to-local, align 4
  %v0_b1d4 = load i32, i32* @r7, align 4
  %v1_b1d4 = trunc i32 %v0_b1d4 to i8
  %v3_b1d4 = add i32 %v0_b1c8, 16
  %v4_b1d4 = inttoptr i32 %v3_b1d4 to i8*
  store i8 %v1_b1d4, i8* %v4_b1d4, align 1
  %v0_b1d8 = load i32, i32* @r7, align 4
  %v1_b1d8 = trunc i32 %v0_b1d8 to i8
  %v2_b1d8 = load i32, i32* @r6, align 4
  %v3_b1d8 = add i32 %v2_b1d8, 17
  %v4_b1d8 = inttoptr i32 %v3_b1d8 to i8*
  store i8 %v1_b1d8, i8* %v4_b1d8, align 1
  %v0_b1dc = load i32, i32* @r5, align 4
  %v4_b1e0 = call i32 @function_d114(i32 %v0_b1dc, i32 %v0_b1c8, i32 %v0_b1cc, i32 %v0_b1d0)
  %v5_b1e0 = trunc i32 %v4_b1e0 to i8
  %v4_b1e429 = udiv i32 %v4_b1e0, 256
  %v1_b1e8 = trunc i32 %v4_b1e429 to i8
  %v2_b1e8 = load i32, i32* @r6, align 4
  %v3_b1e8 = add i32 %v2_b1e8, 17
  %v4_b1e8 = inttoptr i32 %v3_b1e8 to i8*
  store i8 %v1_b1e8, i8* %v4_b1e8, align 1
  %v3_b1ec = load i32, i32* @r6, align 4
  %v4_b1ec = add i32 %v3_b1ec, 16
  %v5_b1ec = inttoptr i32 %v4_b1ec to i8*
  store i8 %v5_b1e0, i8* %v5_b1ec, align 1
  %v3_b1f0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b1f0, i32* %r3.global-to-local, align 4
  %v0_b1f4 = load i32, i32* @r5, align 4
  %v1_b1f4 = add i32 %v0_b1f4, 20
  %v2_b1f4 = inttoptr i32 %v1_b1f4 to i32*
  %v3_b1f4 = load i32, i32* %v2_b1f4, align 4
  %v3_b1fc = udiv i32 %v3_b1f4, 65536
  store i32 %v3_b1fc, i32* %r2.global-to-local, align 4
  %v5_b200 = mul i32 %v3_b1f0, 24
  %v1_b204 = load i32, i32* @sb, align 4
  %v2_b204 = add i32 %v1_b204, %v5_b200
  store i32 %v2_b204, i32* %ip.global-to-local, align 4
  %v3_b20827 = udiv i32 %v3_b1f4, 16777216
  %v1_b20c = trunc i32 %v3_b20827 to i8
  %v3_b20c = add i32 %v2_b204, 3
  %v4_b20c = inttoptr i32 %v3_b20c to i8*
  store i8 %v1_b20c, i8* %v4_b20c, align 1
  %v0_b210 = load i32, i32* %r2.global-to-local, align 4
  %v1_b210 = trunc i32 %v0_b210 to i8
  %v2_b210 = load i32, i32* %ip.global-to-local, align 4
  %v3_b210 = add i32 %v2_b210, 2
  %v4_b210 = inttoptr i32 %v3_b210 to i8*
  store i8 %v1_b210, i8* %v4_b210, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b218 = load i32, i32* @r5, align 4
  store i32 %v0_b218, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-168.0.ph, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_b228 = load i32, i32* %ip.global-to-local, align 4
  %v6_b230 = inttoptr i32 %v0_b218 to i32*
  %v7_b230 = call i32 @function_121e8(i32 %v3_ae18, i32* %v6_b230, i32 %stack_var_-168.0.ph, i32 16384, i32 %v0_b228, i32 16)
  %v3_b234 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b234, i32* %r3.global-to-local, align 4
  %v1_b238 = add i32 %v3_b234, 1
  %v0_b23c = load i32, i32* @fp, align 4
  %v9_b23c = icmp eq i32 %v0_b23c, %v1_b238
  store i1 %v9_b23c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b238, i32* %stack_var_-40, align 4
  %v7_b244 = icmp sgt i32 %v0_b23c, %v1_b238
  br i1 %v7_b244, label %dec_label_pc_b128, label %dec_label_pc_b100

dec_label_pc_b24c:                                ; preds = %dec_label_pc_ae28
  %v1_b250 = call i32 @function_11960(i32 %v3_ae18)
  br label %dec_label_pc_b254

dec_label_pc_b254:                                ; preds = %dec_label_pc_ac14, %dec_label_pc_b24c
  %v29_b258 = phi i32 [ %v3_ae18, %dec_label_pc_ac14 ], [ %v1_b250, %dec_label_pc_b24c ]
  ret i32 %v29_b258

dec_label_pc_b25c:                                ; preds = %dec_label_pc_b128
  %v1_b25c = add i32 %v2_b130, 16
  %v2_b25c = inttoptr i32 %v1_b25c to i32*
  %v3_b25c = load i32, i32* %v2_b25c, align 4
  %v0_b260 = call i32 @function_e8e4()
  %v3_b264 = load i32, i32* %stack_var_-40, align 4
  %v5_b26c = mul i32 %v3_b264, 24
  %v1_b274 = load i32, i32* @sb, align 4
  %v2_b274 = add i32 %v1_b274, %v5_b26c
  store i32 %v2_b274, i32* %r1.global-to-local, align 4
  %v1_b278 = and i32 %v3_b25c, 65280
  store i32 %v1_b278, i32* %r3.global-to-local, align 4
  %v1_b270 = udiv i32 %v3_b25c, 256
  %v3_b27c = and i32 %v1_b270, 65280
  store i32 %v3_b27c, i32* %r2.global-to-local, align 4
  %v3_b280 = mul i32 %v3_b25c, 16777216
  store i32 %v3_b280, i32* %ip.global-to-local, align 4
  %v1_b284 = add i32 %v2_b274, 20
  %v2_b284 = inttoptr i32 %v1_b284 to i8*
  %v3_b284 = load i8, i8* %v2_b284, align 1
  %v4_b284 = zext i8 %v3_b284 to i32
  %v4_b288 = mul nuw nsw i32 %v1_b278, 256
  %v5_b288 = or i32 %v4_b288, %v3_b280
  store i32 %v5_b288, i32* %ip.global-to-local, align 4
  %v2_b290 = call i32 @llvm.bswap.i32(i32 %v3_b25c)
  %v7_b294 = lshr i32 %v0_b260, %v4_b284
  %v8_b294 = add i32 %v7_b294, %v2_b290
  store i32 %v8_b294, i32* %r2.global-to-local, align 4
  %v2_b2b0 = call i32 @llvm.bswap.i32(i32 %v8_b294)
  store i32 %v2_b2b0, i32* %r3.global-to-local, align 4
  store i32 %v6_ae04, i32* %r1.global-to-local, align 4
  store i1 %v8_b2b8, i1* %cpsr_z.global-to-local, align 1
  %v1_b2bc = load i32, i32* @r5, align 4
  %v2_b2bc = add i32 %v1_b2bc, 16
  %v3_b2bc = inttoptr i32 %v2_b2bc to i32*
  store i32 %v2_b2b0, i32* %v3_b2bc, align 4
  br i1 %v3_b2b8, label %dec_label_pc_b2c4, label %dec_label_pc_b158

dec_label_pc_b2c4:                                ; preds = %dec_label_pc_b25c, %dec_label_pc_b14c
  %v0_b2c4 = call i32 @function_e8e4()
  store i32 %v3_ae60, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b2d4, i1* %cpsr_z.global-to-local, align 1
  %v1_b2d8 = load i32, i32* @r5, align 4
  %v2_b2d8 = add i32 %v1_b2d8, 12
  %v3_b2d8 = inttoptr i32 %v2_b2d8 to i32*
  store i32 %v0_b2c4, i32* %v3_b2d8, align 4
  br i1 %v3_b2d4, label %dec_label_pc_b2e0, label %dec_label_pc_b2c4.dec_label_pc_b16c_crit_edge

dec_label_pc_b2c4.dec_label_pc_b16c_crit_edge:    ; preds = %dec_label_pc_b2c4
  %v1_b170.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b16c

dec_label_pc_b2e0:                                ; preds = %dec_label_pc_b2c4, %dec_label_pc_b158
  %v0_b2e0 = call i32 @function_e8e4()
  %v1_b2e0 = trunc i32 %v0_b2e0 to i8
  %v4_b2e430 = udiv i32 %v0_b2e0, 256
  %v1_b2e8 = trunc i32 %v4_b2e430 to i8
  %v2_b2e8 = load i32, i32* @r5, align 4
  %v3_b2e8 = add i32 %v2_b2e8, 5
  %v4_b2e8 = inttoptr i32 %v3_b2e8 to i8*
  store i8 %v1_b2e8, i8* %v4_b2e8, align 1
  store i32 %v3_ae64, i32* %r3.global-to-local, align 4
  %v1_b2f0 = load i32, i32* @r4, align 4
  %v9_b2f0 = icmp eq i32 %v3_ae64, %v1_b2f0
  store i1 %v9_b2f0, i1* %cpsr_z.global-to-local, align 1
  %v3_b2f4 = load i32, i32* @r5, align 4
  %v4_b2f4 = add i32 %v3_b2f4, 4
  %v5_b2f4 = inttoptr i32 %v4_b2f4 to i8*
  store i8 %v1_b2e0, i8* %v5_b2f4, align 1
  %v0_b2f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b2f8, label %dec_label_pc_b2fc, label %dec_label_pc_b2e0.dec_label_pc_b178_crit_edge

dec_label_pc_b2e0.dec_label_pc_b178_crit_edge:    ; preds = %dec_label_pc_b2e0
  %v1_b17c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b178

dec_label_pc_b2fc:                                ; preds = %dec_label_pc_b2e0, %dec_label_pc_b16c
  %v0_b2fc = call i32 @function_e8e4()
  %v1_b2fc = trunc i32 %v0_b2fc to i8
  store i32 %v3_ae68, i32* %ip.global-to-local, align 4
  %v4_b304 = sdiv i32 %v0_b2fc, 256
  store i32 %v4_b304, i32* %r3.global-to-local, align 4
  %v1_b308 = load i32, i32* @r4, align 4
  %v9_b308 = icmp eq i32 %v3_ae68, %v1_b308
  store i1 %v9_b308, i1* %cpsr_z.global-to-local, align 1
  %v3_b30c = load i32, i32* @r5, align 4
  %v4_b30c = add i32 %v3_b30c, 20
  %v5_b30c = inttoptr i32 %v4_b30c to i8*
  store i8 %v1_b2fc, i8* %v5_b30c, align 1
  %v0_b310 = load i32, i32* %r3.global-to-local, align 4
  %v1_b310 = trunc i32 %v0_b310 to i8
  %v2_b310 = load i32, i32* @r6, align 4
  %v3_b310 = add i32 %v2_b310, 1
  %v4_b310 = inttoptr i32 %v3_b310 to i8*
  store i8 %v1_b310, i8* %v4_b310, align 1
  %v0_b314 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b314, label %dec_label_pc_b318, label %dec_label_pc_b2fc.dec_label_pc_b184_crit_edge

dec_label_pc_b2fc.dec_label_pc_b184_crit_edge:    ; preds = %dec_label_pc_b2fc
  %v1_b188.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b184

dec_label_pc_b318:                                ; preds = %dec_label_pc_b2fc, %dec_label_pc_b178
  %v0_b318 = call i32 @function_e8e4()
  %v1_b318 = trunc i32 %v0_b318 to i8
  store i32 %v6_ad04, i32* %r1.global-to-local, align 4
  %v4_b320 = sdiv i32 %v0_b318, 256
  store i32 %v4_b320, i32* %r3.global-to-local, align 4
  %v1_b324 = load i32, i32* @r4, align 4
  %v9_b324 = icmp eq i32 %v6_ad04, %v1_b324
  store i1 %v9_b324, i1* %cpsr_z.global-to-local, align 1
  %v1_b328 = trunc i32 %v4_b320 to i8
  %v2_b328 = load i32, i32* @r6, align 4
  %v3_b328 = add i32 %v2_b328, 3
  %v4_b328 = inttoptr i32 %v3_b328 to i8*
  store i8 %v1_b328, i8* %v4_b328, align 1
  %v3_b32c = load i32, i32* @r6, align 4
  %v4_b32c = add i32 %v3_b32c, 2
  %v5_b32c = inttoptr i32 %v4_b32c to i8*
  store i8 %v1_b318, i8* %v5_b32c, align 1
  %v0_b330 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b330, label %dec_label_pc_b334, label %dec_label_pc_b318.dec_label_pc_b190_crit_edge

dec_label_pc_b318.dec_label_pc_b190_crit_edge:    ; preds = %dec_label_pc_b318
  %v1_b194.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b190

dec_label_pc_b334:                                ; preds = %dec_label_pc_b318, %dec_label_pc_b184
  %v0_b334 = call i32 @function_e8e4()
  store i32 %v6_ad20, i32* %r2.global-to-local, align 4
  %v1_b33c = load i32, i32* @r4, align 4
  %v9_b33c = icmp eq i32 %v6_ad20, %v1_b33c
  store i1 %v9_b33c, i1* %cpsr_z.global-to-local, align 1
  %v1_b340 = load i32, i32* @r6, align 4
  %v2_b340 = add i32 %v1_b340, 4
  %v3_b340 = inttoptr i32 %v2_b340 to i32*
  store i32 %v0_b334, i32* %v3_b340, align 4
  br i1 %v9_b33c, label %dec_label_pc_b348, label %dec_label_pc_b19c

dec_label_pc_b348:                                ; preds = %dec_label_pc_b334, %dec_label_pc_b190
  %v0_b348 = call i32 @function_e8e4()
  store i32 %v1_adf0, i32* %r3.global-to-local, align 4
  store i1 %v2_b350, i1* %cpsr_z.global-to-local, align 1
  %v1_b354 = load i32, i32* @r6, align 4
  %v2_b354 = add i32 %v1_b354, 8
  %v3_b354 = inttoptr i32 %v2_b354 to i32*
  store i32 %v0_b348, i32* %v3_b354, align 4
  br i1 %v2_b350, label %dec_label_pc_b1a8, label %dec_label_pc_b35c

dec_label_pc_b35c:                                ; preds = %dec_label_pc_b19c, %dec_label_pc_b348
  %v0_b35c = load i32, i32* @r5, align 4
  %v1_b35c = add i32 %v0_b35c, 40
  store i32 %v6_adc8, i32* @r1, align 4
  %v1_b364 = inttoptr i32 %v1_b35c to i8*
  %v2_b364 = call i32 @function_ea64(i8* %v1_b364)
  br label %dec_label_pc_b1a8

dec_label_pc_b36c:                                ; preds = %dec_label_pc_ae50
  store i32 %v6_adc8, i32* %r3.global-to-local, align 4
  %v1_b374 = add i32 %v6_adc8, 40
  store i32 %v1_b374, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_b100.preheader

; uselistorder directives
  uselistorder i32 %v1_b374, { 1, 0 }
  uselistorder i32 %v4_b320, { 1, 0 }
  uselistorder i32 %v2_b2b0, { 1, 0 }
  uselistorder i32 %v3_b280, { 1, 0 }
  uselistorder i32 %v3_b25c, { 1, 3, 2, 0 }
  uselistorder i32 %v0_b23c, { 1, 2, 0 }
  uselistorder i32 %v1_b238, { 2, 0, 3, 1 }
  uselistorder i32 %v0_b1c8, { 1, 0, 2 }
  uselistorder i32 %v0_b10c, { 2, 0, 1 }
  uselistorder i32 %v0_b100, { 1, 0 }
  uselistorder i1 %v2_b350, { 2, 3, 1, 0 }
  uselistorder i1 %v3_b2d4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_b0e8, { 1, 0, 2, 3 }
  uselistorder i8 %v5_af4c, { 1, 0 }
  uselistorder i32 %v1_af14, { 1, 0 }
  uselistorder i32 %v1_af10, { 1, 0 }
  uselistorder i32 %v1_af0c, { 1, 0 }
  uselistorder i32 %v1_aee8, { 1, 0 }
  uselistorder i32 %v1_aee4, { 1, 0 }
  uselistorder i32 %v1_aee0, { 1, 0 }
  uselistorder i32 %v1_aed4, { 1, 0 }
  uselistorder i32 %v1_aeb0, { 1, 0 }
  uselistorder i32 %v1_aea0, { 1, 0 }
  uselistorder i32 %v1_ae8c, { 3, 0, 2, 1 }
  uselistorder i32 %v0_ae6c, { 1, 0, 2 }
  uselistorder i32 %v3_ae60, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ae54, { 3, 0, 1, 2 }
  uselistorder i32 %v0_ae50, { 0, 2, 1, 3 }
  uselistorder i1 %v7_ae48, { 1, 0 }
  uselistorder i1 %v7_ae1c, { 1, 0 }
  uselistorder i32 %v3_ae18, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v6_ae04, { 4, 3, 0, 5, 1, 2 }
  uselistorder i32 %v1_adf0, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_adc8, { 5, 4, 3, 0, 1, 2, 6 }
  uselistorder i32 %v6_ad20, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_ad04, { 2, 5, 4, 3, 1, 0, 6 }
  uselistorder i32 %v1_acb4, { 1, 2, 0 }
  uselistorder i32 %v5_aca8, { 0, 2, 1 }
  uselistorder i32 %v6_ac4c, { 1, 2, 0 }
  uselistorder i32 %v2_ac34, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_ac18, { 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 37, 36, 39, 38, 0 }
  uselistorder label %dec_label_pc_b35c, { 1, 0 }
  uselistorder label %dec_label_pc_b254, { 1, 0 }
  uselistorder label %dec_label_pc_b1a8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b100.preheader, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %.thread12, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_b388(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b388:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_b388 = load i32, i32* @r4, align 4
  %v12_b388 = load i32, i32* @r7, align 4
  %v1_b38c = urem i32 %arg1, 256
  store i32 %v1_b38c, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_b38c, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_b3a4 = urem i32 %arg3, 256
  store i32 %v1_b3a4, i32* @r4, align 4
  %v2_b3a8 = call i32 @function_12538(i32 %v1_b38c, i32 4)
  %v0_b3ac = load i32, i32* @r5, align 4
  store i32 %v0_b3ac, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_b3a8, i32* %fp.global-to-local, align 4
  %v0_b3bc = load i32, i32* @r4, align 4
  store i32 %v0_b3bc, i32* %r0.global-to-local, align 4
  %v5_b3c0 = inttoptr i32 %v0_b3ac to i32*
  %v6_b3c0 = call i32 @function_85e0(i32 %v0_b3bc, i32* %v5_b3c0, i32 2, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v1_b3cc = urem i32 %v6_b3c0, 256
  store i32 %v1_b3cc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b3d8 = load i32, i32* @r5, align 4
  store i32 %v0_b3d8, i32* %r1.global-to-local, align 4
  %v0_b3dc = load i32, i32* @r4, align 4
  store i32 %v0_b3dc, i32* %r0.global-to-local, align 4
  %v5_b3e0 = trunc i32 %v6_b3c0 to i8
  %v6_b3e4 = inttoptr i32 %v0_b3d8 to i32*
  %v7_b3e4 = call i32 @function_85e0(i32 %v0_b3dc, i32* %v6_b3e4, i32 3, i32 65535, i32 %v6_b3c0)
  %v0_b3e8 = load i32, i32* @r5, align 4
  store i32 %v0_b3e8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_b3f8 = load i32, i32* @r4, align 4
  store i32 %v0_b3f8, i32* %r0.global-to-local, align 4
  %v5_b3fc = inttoptr i32 %v0_b3e8 to i32*
  %v6_b3fc = call i32 @function_85e0(i32 %v0_b3f8, i32* %v5_b3fc, i32 4, i32 64, i32 %v7_b3e4)
  %v1_b404 = urem i32 %v6_b3fc, 256
  store i32 %v1_b404, i32* %ip.global-to-local, align 4
  %v0_b408 = load i32, i32* @r5, align 4
  store i32 %v0_b408, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b414 = load i32, i32* @r4, align 4
  store i32 %v0_b414, i32* %r0.global-to-local, align 4
  %sext9 = mul i32 %v6_b3fc, 16777216
  %v5_b41c = sdiv i32 %sext9, 16777216
  %v6_b41c = inttoptr i32 %v0_b408 to i32*
  %v7_b41c = call i32 @function_85e0(i32 %v0_b414, i32* %v6_b41c, i32 5, i32 1, i32 %v5_b41c)
  %v1_b428 = urem i32 %v7_b41c, 256
  store i32 %v1_b428, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b434 = load i32, i32* @r5, align 4
  store i32 %v0_b434, i32* %r1.global-to-local, align 4
  %v0_b438 = load i32, i32* @r4, align 4
  store i32 %v0_b438, i32* %r0.global-to-local, align 4
  %v5_b440 = inttoptr i32 %v0_b434 to i32*
  %v6_b440 = call i32 @function_85e0(i32 %v0_b438, i32* %v5_b440, i32 6, i32 65535, i32 %v1_b428)
  %v0_b448 = load i32, i32* @r5, align 4
  store i32 %v0_b448, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_b440, i32* @r7, align 4
  %v0_b458 = load i32, i32* @r4, align 4
  store i32 %v0_b458, i32* %r0.global-to-local, align 4
  %v5_b45c = inttoptr i32 %v0_b448 to i32*
  %v6_b45c = call i32 @function_85e0(i32 %v0_b458, i32* %v5_b45c, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b464 = load i32, i32* @r5, align 4
  store i32 %v0_b464, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v6_b45c, i32* @r6, align 4
  %v0_b474 = load i32, i32* @r4, align 4
  store i32 %v0_b474, i32* %r0.global-to-local, align 4
  %v5_b478 = inttoptr i32 %v0_b464 to i32*
  %v6_b478 = call i32 @function_85e0(i32 %v0_b474, i32* %v5_b478, i32 17, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b47c = load i32, i32* @r5, align 4
  store i32 %v0_b47c, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b48c = load i32, i32* @r4, align 4
  store i32 %v0_b48c, i32* %r0.global-to-local, align 4
  %v5_b490 = inttoptr i32 %v0_b47c to i32*
  %v6_b490 = call i32 @function_85e0(i32 %v0_b48c, i32* %v5_b490, i32 18, i32 0, i32 %v6_b478)
  %v0_b494 = load i32, i32* @r5, align 4
  store i32 %v0_b494, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b4a4 = load i32, i32* @r4, align 4
  store i32 %v0_b4a4, i32* %r0.global-to-local, align 4
  %v5_b4a8 = inttoptr i32 %v0_b494 to i32*
  %v6_b4a8 = call i32 @function_85e0(i32 %v0_b4a4, i32* %v5_b4a8, i32 11, i32 0, i32 %v6_b490)
  %v0_b4ac = load i32, i32* @r5, align 4
  store i32 %v0_b4ac, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b4bc = load i32, i32* @r4, align 4
  store i32 %v0_b4bc, i32* %r0.global-to-local, align 4
  %v5_b4c0 = inttoptr i32 %v0_b4ac to i32*
  %v6_b4c0 = call i32 @function_85e0(i32 %v0_b4bc, i32* %v5_b4c0, i32 12, i32 0, i32 %v6_b4a8)
  %v0_b4c4 = load i32, i32* @r5, align 4
  store i32 %v0_b4c4, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b4d4 = load i32, i32* @r4, align 4
  store i32 %v0_b4d4, i32* %r0.global-to-local, align 4
  %v5_b4d8 = inttoptr i32 %v0_b4c4 to i32*
  %v6_b4d8 = call i32 @function_85e0(i32 %v0_b4d4, i32* %v5_b4d8, i32 13, i32 0, i32 %v6_b4c0)
  %v0_b4dc = load i32, i32* @r5, align 4
  store i32 %v0_b4dc, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b4ec = load i32, i32* @r4, align 4
  store i32 %v0_b4ec, i32* %r0.global-to-local, align 4
  %v5_b4f0 = inttoptr i32 %v0_b4dc to i32*
  %v6_b4f0 = call i32 @function_85e0(i32 %v0_b4ec, i32* %v5_b4f0, i32 14, i32 0, i32 %v6_b4d8)
  %v0_b4f4 = load i32, i32* @r5, align 4
  store i32 %v0_b4f4, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b504 = load i32, i32* @r4, align 4
  store i32 %v0_b504, i32* %r0.global-to-local, align 4
  %v5_b508 = inttoptr i32 %v0_b4f4 to i32*
  %v6_b508 = call i32 @function_85e0(i32 %v0_b504, i32* %v5_b508, i32 15, i32 1, i32 %v6_b4f0)
  %v0_b50c = load i32, i32* @r5, align 4
  store i32 %v0_b50c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b51c = load i32, i32* @r4, align 4
  store i32 %v0_b51c, i32* %r0.global-to-local, align 4
  %v5_b520 = inttoptr i32 %v0_b50c to i32*
  %v6_b520 = call i32 @function_85e0(i32 %v0_b51c, i32* %v5_b520, i32 16, i32 0, i32 %v6_b508)
  %v2_b52c = load i32, i32* @global_var_1c93c.50, align 4
  store i32 %v2_b52c, i32* %r3.global-to-local, align 4
  %v0_b530 = load i32, i32* @r5, align 4
  store i32 %v0_b530, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_b538 = load i32, i32* @r4, align 4
  store i32 %v0_b538, i32* %r0.global-to-local, align 4
  %v5_b53c = inttoptr i32 %v0_b530 to i32*
  %v6_b53c = call i32 @function_8574(i32 %v0_b538, i32* %v5_b53c, i32 25, i32 %v2_b52c, i32 %v6_b520)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b550 = call i32 @function_1224c(i32 2, i32 3, i32 6)
  store i32 %v3_b550, i32* %r0.global-to-local, align 4
  %v7_b554 = icmp eq i32 %v3_b550, -1
  store i1 %v7_b554, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b550, i32* %sb.global-to-local, align 4
  br i1 %v7_b554, label %dec_label_pc_bac8, label %dec_label_pc_b560

dec_label_pc_b560:                                ; preds = %dec_label_pc_b388
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b568 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b568, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b57c = call i32 @function_1221c(i32 %v3_b550, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_b57c, i32* %r0.global-to-local, align 4
  %v7_b580 = icmp eq i32 %v6_b57c, -1
  store i1 %v7_b580, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b580, label %dec_label_pc_bac0, label %dec_label_pc_b588

dec_label_pc_b588:                                ; preds = %dec_label_pc_b560
  %v3_b58c = mul i32 %v7_b3e4, 65536
  store i32 %v3_b58c, i32* %r4.global-to-local, align 4
  %v3_b590 = urem i32 %v7_b3e4, 65536
  %v0_b5a0 = load i32, i32* @r7, align 4
  %v3_b5a0 = mul i32 %v0_b5a0, 65536
  store i32 %v3_b5a0, i32* %r0.global-to-local, align 4
  %v0_b5a4 = load i32, i32* @r6, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_b5ac = urem i32 %v0_b5a0, 65536
  store i32 %v3_b5ac, i32* %ip.global-to-local, align 4
  %v3_b5b0 = urem i32 %v0_b5a4, 65536
  store i32 %v3_b5b0, i32* %r2.global-to-local, align 4
  %v1_b5b4 = urem i32 %v6_b4a8, 256
  store i32 %v1_b5b4, i32* %r3.global-to-local, align 4
  %v0_b5b8 = load i32, i32* @sl, align 4
  %v2_b5b8 = icmp eq i32 %v0_b5b8, 0
  store i1 %v2_b5b8, i1* %cpsr_z.global-to-local, align 1
  %tmp69 = icmp slt i32 %v0_b5b8, 1
  br i1 %tmp69, label %dec_label_pc_b86c, label %dec_label_pc_b5cc

dec_label_pc_b5cc:                                ; preds = %dec_label_pc_b588
  %v3_b5d4 = mul i32 %v6_b478, 65536
  store i32 %v3_b5d4, i32* @lr, align 4
  %v1_b5e4 = urem i32 %v0_b5a4, 256
  %tmp70 = udiv i32 %v0_b5a0, 256
  %v3_b5e8 = urem i32 %tmp70, 256
  %v1_b5ec = urem i32 %v0_b5a0, 256
  %v4_b5f0 = mul nuw nsw i32 %v1_b5ec, 256
  %v5_b5f0 = or i32 %v4_b5f0, %v3_b5e8
  store i32 %v5_b5f0, i32* @r7, align 4
  %tmp71 = udiv i32 %v7_b3e4, 256
  %tmp72 = mul i32 %v6_b478, 256
  %v1_b60c = and i32 %tmp72, 65280
  %v1_b610 = urem i32 %v6_b4a8, 2
  %v3_b614 = mul nuw nsw i32 %v1_b5e4, 256
  store i32 %v3_b614, i32* %r1.global-to-local, align 4
  %v5_b618 = trunc i32 %tmp71 to i8
  %tmp73 = udiv i32 %v0_b5a4, 256
  %v4_b61c = urem i32 %tmp73, 256
  %v5_b61c = or i32 %v4_b61c, %v3_b614
  store i32 %v5_b61c, i32* @r6, align 4
  %v1_b620 = urem i32 %v6_b4c0, 2
  %v1_b624 = urem i32 %v6_b4d8, 2
  %tmp74 = udiv i32 %v6_b478, 256
  %v4_b628 = urem i32 %tmp74, 256
  %v5_b628 = or i32 %v4_b628, %v1_b60c
  store i32 %v5_b628, i32* @r5, align 4
  %v1_b648 = urem i32 %v6_b4f0, 2
  %v1_b64c = urem i32 %v6_b508, 2
  %v1_b658 = urem i32 %v6_b520, 2
  store i32 %v1_b658, i32* %r0.global-to-local, align 4
  %v3_b65c = udiv i32 %v7_b3e4, 65536
  store i32 %v3_b65c, i32* %r2.global-to-local, align 4
  store i32 %v1_b5ec, i32* %r3.global-to-local, align 4
  store i32 %v1_b5e4, i32* %ip.global-to-local, align 4
  %v5_b674 = trunc i32 %v0_b5a4 to i8
  store i32 0, i32* @r4, align 4
  %tmp = sub nsw i32 0, %v1_b610
  %v4_b738 = and i32 %tmp, 32
  %tmp77 = sub nsw i32 0, %v1_b620
  %v4_b74c = and i32 %tmp77, 16
  %tmp78 = sub nsw i32 0, %v1_b624
  %v4_b760 = and i32 %tmp78, 8
  %tmp79 = sub nsw i32 0, %v1_b648
  %v4_b774 = and i32 %tmp79, 4
  %tmp80 = sub nsw i32 0, %v1_b64c
  %v3_b788 = and i32 %tmp80, 2
  %v7_b7b8 = sext i8 %v5_b674 to i32
  %sext = mul i32 %v0_b5a0, 16777216
  %v3_b7b8 = sdiv i32 %sext, 16777216
  br label %dec_label_pc_b67c

dec_label_pc_b67c:                                ; preds = %bb76, %dec_label_pc_b5cc
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_b684 = call i32 @function_12538(i32 128, i32 1)
  store i32 %v2_b684, i32* %r0.global-to-local, align 4
  %v3_b688 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b688, i32* %r2.global-to-local, align 4
  %v1_b68c = load i32, i32* %fp.global-to-local, align 4
  %v2_b68c = load i32, i32* @r4, align 4
  %v5_b68c = mul i32 %v2_b68c, 4
  %v6_b68c = add i32 %v5_b68c, %v1_b68c
  %v7_b68c = inttoptr i32 %v6_b68c to i32*
  store i32 %v2_b684, i32* %v7_b68c, align 4
  %v0_b690 = load i32, i32* %fp.global-to-local, align 4
  %v1_b690 = load i32, i32* %r2.global-to-local, align 4
  %v4_b690 = mul i32 %v1_b690, 4
  %v5_b690 = add i32 %v4_b690, %v0_b690
  %v6_b690 = inttoptr i32 %v5_b690 to i32*
  %v7_b690 = load i32, i32* %v6_b690, align 4
  store i32 %v7_b690, i32* %r4.global-to-local, align 4
  %v1_b694 = inttoptr i32 %v7_b690 to i8*
  %v2_b694 = load i8, i8* %v1_b694, align 1
  %tmp81 = urem i8 %v2_b694, 16
  %v1_b698 = zext i8 %tmp81 to i32
  %v1_b69c = or i32 %v1_b698, 64
  store i32 %v1_b69c, i32* %r3.global-to-local, align 4
  %v1_b6a0 = trunc i32 %v1_b69c to i8
  store i8 %v1_b6a0, i8* %v1_b694, align 1
  %v0_b6a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_b6a4 = inttoptr i32 %v0_b6a4 to i8*
  %v2_b6a4 = load i8, i8* %v1_b6a4, align 1
  %v1_b6a8 = and i8 %v2_b6a4, -16
  %v1_b6ac = or i8 %v1_b6a8, 5
  store i32 %v1_b428, i32* %r0.global-to-local, align 4
  store i8 %v1_b6ac, i8* %v1_b6a4, align 1
  %v2_b6bc = load i32, i32* %r4.global-to-local, align 4
  %v3_b6bc = add i32 %v2_b6bc, 1
  %v4_b6bc = inttoptr i32 %v3_b6bc to i8*
  store i8 %v5_b3e0, i8* %v4_b6bc, align 1
  store i32 %v5_b41c, i32* %r2.global-to-local, align 4
  %v2_b6c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b6c8 = add i32 %v2_b6c8, 4
  %v4_b6c8 = inttoptr i32 %v3_b6c8 to i8*
  store i8 %v5_b618, i8* %v4_b6c8, align 1
  store i32 6, i32* %ip.global-to-local, align 4
  %v0_b6d4 = load i32, i32* %r0.global-to-local, align 4
  %v2_b6d4 = icmp eq i32 %v0_b6d4, 0
  store i1 %v2_b6d4, i1* %cpsr_z.global-to-local, align 1
  %v2_b6d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b6d8 = add i32 %v2_b6d8, 3
  %v4_b6d8 = inttoptr i32 %v3_b6d8 to i8*
  store i8 60, i8* %v4_b6d8, align 1
  store i32 %v3_b65c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b6e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b6e4 = trunc i32 %v0_b6e4 to i8
  %v2_b6e4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b6e4 = add i32 %v2_b6e4, 8
  %v4_b6e4 = inttoptr i32 %v3_b6e4 to i8*
  store i8 %v1_b6e4, i8* %v4_b6e4, align 1
  %v0_b6e8 = load i32, i32* %ip.global-to-local, align 4
  %v1_b6e8 = trunc i32 %v0_b6e8 to i8
  %v2_b6e8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b6e8 = add i32 %v2_b6e8, 9
  %v4_b6e8 = inttoptr i32 %v3_b6e8 to i8*
  store i8 %v1_b6e8, i8* %v4_b6e8, align 1
  %v0_b6ec = load i32, i32* %r3.global-to-local, align 4
  %v1_b6ec = trunc i32 %v0_b6ec to i8
  %v2_b6ec = load i32, i32* %r4.global-to-local, align 4
  %v3_b6ec = add i32 %v2_b6ec, 2
  %v4_b6ec = inttoptr i32 %v3_b6ec to i8*
  store i8 %v1_b6ec, i8* %v4_b6ec, align 1
  %v3_b6f0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b6f0, i32* %r2.global-to-local, align 4
  %v0_b6f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b6f4, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_b67c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_b6f8 = load i32, i32* %r4.global-to-local, align 4
  %v4_b6f8 = add i32 %v3_b6f8, 6
  %v5_b6f8 = inttoptr i32 %v4_b6f8 to i8*
  store i8 64, i8* %v5_b6f8, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_b67c, %bb
  %v0_b6fc = load i32, i32* %r0.global-to-local, align 4
  %v1_b6fc = trunc i32 %v0_b6fc to i8
  %v2_b6fc = load i32, i32* %r4.global-to-local, align 4
  %v3_b6fc = add i32 %v2_b6fc, 5
  %v4_b6fc = inttoptr i32 %v3_b6fc to i8*
  store i8 %v1_b6fc, i8* %v4_b6fc, align 1
  %v0_b700 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b700, label %.thread8, label %bb75

.thread8:                                         ; preds = %.thread
  store i32 %v6_b53c, i32* %r0.global-to-local, align 4
  br label %bb76

bb75:                                             ; preds = %.thread
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v6_b53c, i32* %r0.global-to-local, align 4
  %v3_b708 = load i32, i32* %r4.global-to-local, align 4
  %v4_b708 = add i32 %v3_b708, 7
  %v5_b708 = inttoptr i32 %v4_b708 to i8*
  store i8 0, i8* %v5_b708, align 1
  %v0_b710.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb76

bb76:                                             ; preds = %.thread8, %bb75
  %v0_b710 = phi i32 [ %v6_b53c, %.thread8 ], [ %v0_b710.pre, %bb75 ]
  %v0_b70c = load i32, i32* %r2.global-to-local, align 4
  %v3_b70c = mul i32 %v0_b70c, 32
  store i32 %v3_b70c, i32* %r3.global-to-local, align 4
  %v1_b710 = load i32, i32* %r4.global-to-local, align 4
  %v2_b710 = add i32 %v1_b710, 12
  %v3_b710 = inttoptr i32 %v2_b710 to i32*
  store i32 %v0_b710, i32* %v3_b710, align 4
  %v0_b714 = load i32, i32* %r3.global-to-local, align 4
  %v1_b714 = load i32, i32* %r2.global-to-local, align 4
  %tmp82 = mul i32 %v1_b714, -8
  %v5_b714 = add i32 %v0_b714, %tmp82
  %v1_b718 = load i32, i32* @r8, align 4
  %v2_b718 = add i32 %v1_b718, %v5_b714
  store i32 %v2_b718, i32* %r3.global-to-local, align 4
  %v1_b71c = add i32 %v2_b718, 16
  %v2_b71c = inttoptr i32 %v1_b71c to i32*
  %v3_b71c = load i32, i32* %v2_b71c, align 4
  store i32 %v3_b71c, i32* %r2.global-to-local, align 4
  %v0_b720 = load i32, i32* @r7, align 4
  %v1_b720 = trunc i32 %v0_b720 to i8
  %v2_b720 = load i32, i32* %r4.global-to-local, align 4
  %v3_b720 = add i32 %v2_b720, 20
  %v4_b720 = inttoptr i32 %v3_b720 to i8*
  store i8 %v1_b720, i8* %v4_b720, align 1
  %v0_b724 = load i32, i32* %r2.global-to-local, align 4
  %v1_b724 = load i32, i32* %r4.global-to-local, align 4
  %v2_b724 = add i32 %v1_b724, 16
  %v3_b724 = inttoptr i32 %v2_b724 to i32*
  store i32 %v0_b724, i32* %v3_b724, align 4
  %v0_b728 = load i32, i32* %r4.global-to-local, align 4
  %v1_b728 = add i32 %v0_b728, 20
  store i32 %v1_b728, i32* %r1.global-to-local, align 4
  %v1_b72c = add i32 %v0_b728, 33
  %v2_b72c = inttoptr i32 %v1_b72c to i8*
  %v3_b72c = load i8, i8* %v2_b72c, align 1
  %v4_b72c = zext i8 %v3_b72c to i32
  store i32 %v1_b610, i32* %r2.global-to-local, align 4
  %v1_b734 = and i32 %v4_b72c, 223
  %v5_b738 = or i32 %v1_b734, %v4_b738
  store i32 %v5_b738, i32* %r3.global-to-local, align 4
  %v1_b73c = trunc i32 %v5_b738 to i8
  store i8 %v1_b73c, i8* %v2_b72c, align 1
  %v0_b740 = load i32, i32* %r1.global-to-local, align 4
  %v1_b740 = add i32 %v0_b740, 13
  %v2_b740 = inttoptr i32 %v1_b740 to i8*
  %v3_b740 = load i8, i8* %v2_b740, align 1
  %v4_b740 = zext i8 %v3_b740 to i32
  store i32 %v1_b620, i32* %r3.global-to-local, align 4
  %v1_b748 = and i32 %v4_b740, 239
  %v5_b74c = or i32 %v1_b748, %v4_b74c
  store i32 %v5_b74c, i32* %r2.global-to-local, align 4
  %v1_b750 = trunc i32 %v5_b74c to i8
  store i8 %v1_b750, i8* %v2_b740, align 1
  %v0_b754 = load i32, i32* %r1.global-to-local, align 4
  %v1_b754 = add i32 %v0_b754, 13
  %v2_b754 = inttoptr i32 %v1_b754 to i8*
  %v3_b754 = load i8, i8* %v2_b754, align 1
  %v4_b754 = zext i8 %v3_b754 to i32
  store i32 %v1_b624, i32* %ip.global-to-local, align 4
  %v1_b75c = and i32 %v4_b754, 247
  %v5_b760 = or i32 %v1_b75c, %v4_b760
  store i32 %v5_b760, i32* %r3.global-to-local, align 4
  %v1_b764 = trunc i32 %v5_b760 to i8
  store i8 %v1_b764, i8* %v2_b754, align 1
  %v0_b768 = load i32, i32* %r1.global-to-local, align 4
  %v1_b768 = add i32 %v0_b768, 13
  %v2_b768 = inttoptr i32 %v1_b768 to i8*
  %v3_b768 = load i8, i8* %v2_b768, align 1
  %v4_b768 = zext i8 %v3_b768 to i32
  store i32 %v1_b648, i32* %r0.global-to-local, align 4
  %v1_b770 = and i32 %v4_b768, 251
  %v5_b774 = or i32 %v1_b770, %v4_b774
  store i32 %v5_b774, i32* %r2.global-to-local, align 4
  %v1_b778 = trunc i32 %v5_b774 to i8
  store i8 %v1_b778, i8* %v2_b768, align 1
  %v0_b77c = load i32, i32* %r1.global-to-local, align 4
  %v1_b77c = add i32 %v0_b77c, 13
  %v2_b77c = inttoptr i32 %v1_b77c to i8*
  %v3_b77c = load i8, i8* %v2_b77c, align 1
  %v4_b77c = zext i8 %v3_b77c to i32
  store i32 %v1_b64c, i32* %r2.global-to-local, align 4
  %v1_b784 = and i32 %v4_b77c, 253
  %v4_b788 = or i32 %v1_b784, %v3_b788
  store i32 %v4_b788, i32* %r3.global-to-local, align 4
  %v1_b78c = trunc i32 %v4_b788 to i8
  store i8 %v1_b78c, i8* %v2_b77c, align 1
  %v0_b790 = load i32, i32* %r1.global-to-local, align 4
  %v1_b790 = add i32 %v0_b790, 12
  %v2_b790 = inttoptr i32 %v1_b790 to i8*
  %v3_b790 = load i8, i8* %v2_b790, align 1
  %v4_b790 = zext i8 %v3_b790 to i32
  store i32 %v4_b790, i32* %r2.global-to-local, align 4
  %v1_b794 = add i32 %v0_b790, 13
  %v2_b794 = inttoptr i32 %v1_b794 to i8*
  %v3_b794 = load i8, i8* %v2_b794, align 1
  %v4_b794 = zext i8 %v3_b794 to i32
  %tmp83 = urem i8 %v3_b790, 16
  %v1_b79c = zext i8 %tmp83 to i32
  %v1_b7a0 = and i32 %v4_b794, 254
  %v2_b7a4 = or i32 %v1_b7a0, %v1_b658
  %v1_b7a8 = or i32 %v1_b79c, 160
  store i32 %v1_b7a8, i32* %r2.global-to-local, align 4
  %v1_b7ac = trunc i32 %v2_b7a4 to i8
  store i8 %v1_b7ac, i8* %v2_b794, align 1
  %v0_b7b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b7b0 = trunc i32 %v0_b7b0 to i8
  %v2_b7b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_b7b0 = add i32 %v2_b7b0, 12
  %v4_b7b0 = inttoptr i32 %v3_b7b0 to i8*
  store i8 %v1_b7b0, i8* %v4_b7b0, align 1
  store i32 %v3_b7b8, i32* %r0.global-to-local, align 4
  store i32 %v7_b7b8, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_b7c4 = load i32, i32* %r1.global-to-local, align 4
  %v3_b7c4 = add i32 %v2_b7c4, 3
  %v4_b7c4 = inttoptr i32 %v3_b7c4 to i8*
  store i8 %v5_b674, i8* %v4_b7c4, align 1
  %v0_b7c8 = load i32, i32* %r0.global-to-local, align 4
  %v1_b7c8 = trunc i32 %v0_b7c8 to i8
  %v2_b7c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_b7c8 = add i32 %v2_b7c8, 1
  %v4_b7c8 = inttoptr i32 %v3_b7c8 to i8*
  store i8 %v1_b7c8, i8* %v4_b7c8, align 1
  %v0_b7cc = load i32, i32* @r6, align 4
  %v1_b7cc = trunc i32 %v0_b7cc to i8
  %v2_b7cc = load i32, i32* %r1.global-to-local, align 4
  %v3_b7cc = add i32 %v2_b7cc, 2
  %v4_b7cc = inttoptr i32 %v3_b7cc to i8*
  store i8 %v1_b7cc, i8* %v4_b7cc, align 1
  %v0_b7d0 = load i32, i32* @r5, align 4
  %v1_b7d0 = load i32, i32* %r1.global-to-local, align 4
  %v2_b7d0 = add i32 %v1_b7d0, 4
  %v3_b7d0 = inttoptr i32 %v2_b7d0 to i32*
  store i32 %v0_b7d0, i32* %v3_b7d0, align 4
  %v0_b7d4 = load i32, i32* %ip.global-to-local, align 4
  %v1_b7d4 = trunc i32 %v0_b7d4 to i8
  %v2_b7d4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b7d4 = add i32 %v2_b7d4, 41
  %v4_b7d4 = inttoptr i32 %v3_b7d4 to i8*
  store i8 %v1_b7d4, i8* %v4_b7d4, align 1
  %v0_b7d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b7d8 = trunc i32 %v0_b7d8 to i8
  %v2_b7d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b7d8 = add i32 %v2_b7d8, 40
  %v4_b7d8 = inttoptr i32 %v3_b7d8 to i8*
  store i8 %v1_b7d8, i8* %v4_b7d8, align 1
  %v0_b7dc = call i32 @function_e8e4()
  %v1_b7e0 = mul i32 %v0_b7dc, 256
  %v1_b7e4 = and i32 %v1_b7e0, 3840
  %v1_b7e8 = or i32 %v1_b7e4, 28672
  %v3_b7f0 = add nuw nsw i32 %v1_b7e8, 2048
  %v3_b7fc7 = udiv i32 %v3_b7f0, 256
  store i32 %v3_b7fc7, i32* %r1.global-to-local, align 4
  %v0_b800 = load i32, i32* %r4.global-to-local, align 4
  %v1_b800 = add i32 %v0_b800, 42
  store i32 %v1_b800, i32* %r2.global-to-local, align 4
  %v4_b804 = inttoptr i32 %v1_b800 to i8*
  store i8 5, i8* %v4_b804, align 1
  %v0_b808 = load i32, i32* %r1.global-to-local, align 4
  %v1_b808 = trunc i32 %v0_b808 to i8
  %v2_b808 = load i32, i32* %r2.global-to-local, align 4
  %v3_b808 = add i32 %v2_b808, 1
  %v4_b808 = inttoptr i32 %v3_b808 to i8*
  store i8 %v1_b808, i8* %v4_b808, align 1
  store i32 8, i32* %r3.global-to-local, align 4
  %v2_b814 = load i32, i32* %r4.global-to-local, align 4
  %v3_b814 = add i32 %v2_b814, 47
  %v4_b814 = inttoptr i32 %v3_b814 to i8*
  store i8 10, i8* %v4_b814, align 1
  store i32 4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b820 = load i32, i32* %r3.global-to-local, align 4
  %v1_b820 = trunc i32 %v0_b820 to i8
  %v2_b820 = load i32, i32* %r4.global-to-local, align 4
  %v3_b820 = add i32 %v2_b820, 46
  %v4_b820 = inttoptr i32 %v3_b820 to i8*
  store i8 %v1_b820, i8* %v4_b820, align 1
  %v0_b824 = load i32, i32* %r2.global-to-local, align 4
  %v1_b824 = trunc i32 %v0_b824 to i8
  %v2_b824 = load i32, i32* %r4.global-to-local, align 4
  %v3_b824 = add i32 %v2_b824, 45
  %v4_b824 = inttoptr i32 %v3_b824 to i8*
  store i8 %v1_b824, i8* %v4_b824, align 1
  %v0_b828 = load i32, i32* %r0.global-to-local, align 4
  %v1_b828 = trunc i32 %v0_b828 to i8
  %v2_b828 = load i32, i32* %r4.global-to-local, align 4
  %v3_b828 = add i32 %v2_b828, 44
  %v4_b828 = inttoptr i32 %v3_b828 to i8*
  store i8 %v1_b828, i8* %v4_b828, align 1
  %v0_b82c = call i32 @function_e8e4()
  store i32 %v0_b82c, i32* %r0.global-to-local, align 4
  %v2_b834 = load i32, i32* %r4.global-to-local, align 4
  %v3_b834 = add i32 %v2_b834, 56
  %v4_b834 = inttoptr i32 %v3_b834 to i8*
  store i8 1, i8* %v4_b834, align 1
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_b844 = load i32, i32* %r4.global-to-local, align 4
  %v2_b844 = add i32 %v1_b844, 48
  %v3_b844 = inttoptr i32 %v2_b844 to i32*
  store i32 %v0_b82c, i32* %v3_b844, align 4
  %v0_b848 = load i32, i32* %r2.global-to-local, align 4
  %v1_b848 = trunc i32 %v0_b848 to i8
  %v2_b848 = load i32, i32* %r4.global-to-local, align 4
  %v3_b848 = add i32 %v2_b848, 58
  %v4_b848 = inttoptr i32 %v3_b848 to i8*
  store i8 %v1_b848, i8* %v4_b848, align 1
  %v0_b84c = load i32, i32* %r3.global-to-local, align 4
  %v1_b84c = trunc i32 %v0_b84c to i8
  %v2_b84c = load i32, i32* %r4.global-to-local, align 4
  %v3_b84c = add i32 %v2_b84c, 59
  %v4_b84c = inttoptr i32 %v3_b84c to i8*
  store i8 %v1_b84c, i8* %v4_b84c, align 1
  %v0_b850 = load i32, i32* %ip.global-to-local, align 4
  %v1_b850 = load i32, i32* %r4.global-to-local, align 4
  %v2_b850 = add i32 %v1_b850, 52
  %v3_b850 = inttoptr i32 %v2_b850 to i32*
  store i32 %v0_b850, i32* %v3_b850, align 4
  %v0_b854 = load i32, i32* %r2.global-to-local, align 4
  %v1_b854 = trunc i32 %v0_b854 to i8
  %v2_b854 = load i32, i32* %r4.global-to-local, align 4
  %v3_b854 = add i32 %v2_b854, 57
  %v4_b854 = inttoptr i32 %v3_b854 to i8*
  store i8 %v1_b854, i8* %v4_b854, align 1
  %v3_b858 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b858, i32* %r3.global-to-local, align 4
  %v1_b85c = add i32 %v3_b858, 1
  store i32 %v1_b85c, i32* @r4, align 4
  %v0_b860 = load i32, i32* @sl, align 4
  %v9_b860 = icmp eq i32 %v0_b860, %v1_b85c
  store i1 %v9_b860, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b85c, i32* %stack_var_-40, align 4
  %v8_b868 = icmp sgt i32 %v0_b860, %v1_b85c
  br i1 %v8_b868, label %dec_label_pc_b67c, label %dec_label_pc_b86c

dec_label_pc_b86c:                                ; preds = %bb76, %dec_label_pc_b588
  %v0_b86c = phi i32 [ %v0_b5b8, %dec_label_pc_b588 ], [ %v0_b860, %bb76 ]
  %v2_b86c = icmp eq i32 %v0_b86c, 0
  store i1 %v2_b86c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_ba24 = icmp eq i32 %v3_b590, 65535
  %v2_baa0 = icmp eq i32 %v1_b5b4, 0
  %v2_b8a8 = icmp eq i32 %v6_b53c, -1
  %v7_b8a8 = icmp eq i32 %v6_b53c, -1
  br label %dec_label_pc_b874.outer

dec_label_pc_b874.outer:                          ; preds = %dec_label_pc_b9a0, %dec_label_pc_b86c
  %v1_b874.ph.in = phi i32 [ %v1_b994, %dec_label_pc_b9a0 ], [ %v0_b86c, %dec_label_pc_b86c ]
  %v0_b874.ph = phi i1 [ %v2_b9a0, %dec_label_pc_b9a0 ], [ %v2_b86c, %dec_label_pc_b86c ]
  %v1_b874.ph = icmp slt i32 %v1_b874.ph.in, 0
  %v4_b874 = or i1 %v1_b874.ph, %v0_b874.ph
  br label %dec_label_pc_b874

dec_label_pc_b874:                                ; preds = %dec_label_pc_b874.outer, %dec_label_pc_b874
  br i1 %v4_b874, label %dec_label_pc_b874, label %dec_label_pc_b878

dec_label_pc_b878:                                ; preds = %dec_label_pc_b874
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_b884

dec_label_pc_b884:                                ; preds = %dec_label_pc_b900, %dec_label_pc_b878
  %v1_b894 = phi i32 [ %v1_b990, %dec_label_pc_b900 ], [ 0, %dec_label_pc_b878 ]
  %v5_b888 = mul i32 %v1_b894, 24
  %v1_b88c = load i32, i32* @r8, align 4
  %v2_b88c = add i32 %v1_b88c, %v5_b888
  store i32 %v2_b88c, i32* %r3.global-to-local, align 4
  %v1_b890 = add i32 %v2_b88c, 20
  %v2_b890 = inttoptr i32 %v1_b890 to i8*
  %v3_b890 = load i8, i8* %v2_b890, align 1
  %v4_b890 = zext i8 %v3_b890 to i32
  store i32 %v4_b890, i32* %r2.global-to-local, align 4
  %v0_b894 = load i32, i32* %fp.global-to-local, align 4
  %v4_b894 = mul i32 %v1_b894, 4
  %v5_b894 = add i32 %v0_b894, %v4_b894
  %v6_b894 = inttoptr i32 %v5_b894 to i32*
  %v7_b894 = load i32, i32* %v6_b894, align 4
  store i32 %v7_b894, i32* @r5, align 4
  %v7_b898 = icmp eq i8 %v3_b890, 31
  store i1 %v7_b898, i1* %cpsr_z.global-to-local, align 1
  %v1_b89c = add i32 %v7_b894, 20
  store i32 %v1_b89c, i32* @r6, align 4
  %tmp84 = icmp ult i8 %v3_b890, 32
  br i1 %tmp84, label %dec_label_pc_b9ac, label %dec_label_pc_b8a4

dec_label_pc_b8a4:                                ; preds = %dec_label_pc_b884
  store i32 %v6_b53c, i32* %r0.global-to-local, align 4
  store i1 %v7_b8a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b8a8, label %dec_label_pc_ba14, label %dec_label_pc_b8b0

dec_label_pc_b8b0:                                ; preds = %dec_label_pc_b9ac, %dec_label_pc_b8a4
  store i32 %v3_b590, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ba24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ba24, label %dec_label_pc_ba30, label %dec_label_pc_b8c4

dec_label_pc_b8c4:                                ; preds = %dec_label_pc_ba14.dec_label_pc_b8c4_crit_edge, %dec_label_pc_b8b0
  %v1_b8c8 = phi i32 [ %v1_b8c8.pre, %dec_label_pc_ba14.dec_label_pc_b8c4_crit_edge ], [ 65535, %dec_label_pc_b8b0 ]
  store i32 %v3_b5ac, i32* %r3.global-to-local, align 4
  %v9_b8c8 = icmp eq i32 %v3_b5ac, %v1_b8c8
  store i1 %v9_b8c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b8c8, label %dec_label_pc_ba4c, label %dec_label_pc_b8d0

dec_label_pc_b8d0:                                ; preds = %dec_label_pc_ba30.dec_label_pc_b8d0_crit_edge, %dec_label_pc_b8c4
  %v1_b8d4 = phi i32 [ %v1_b8d4.pre, %dec_label_pc_ba30.dec_label_pc_b8d0_crit_edge ], [ %v1_b8c8, %dec_label_pc_b8c4 ]
  store i32 %v3_b5b0, i32* %ip.global-to-local, align 4
  %v9_b8d4 = icmp eq i32 %v3_b5b0, %v1_b8d4
  store i1 %v9_b8d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b8d4, label %dec_label_pc_ba68, label %dec_label_pc_b8dc

dec_label_pc_b8dc:                                ; preds = %dec_label_pc_ba4c.dec_label_pc_b8dc_crit_edge, %dec_label_pc_b8d0
  %v1_b8e0 = phi i32 [ %v1_b8e0.pre, %dec_label_pc_ba4c.dec_label_pc_b8dc_crit_edge ], [ %v1_b8d4, %dec_label_pc_b8d0 ]
  store i32 %v6_b478, i32* %r0.global-to-local, align 4
  %v9_b8e0 = icmp eq i32 %v6_b478, %v1_b8e0
  store i1 %v9_b8e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b8e0, label %dec_label_pc_ba84, label %dec_label_pc_b8e8

dec_label_pc_b8e8:                                ; preds = %dec_label_pc_ba68.dec_label_pc_b8e8_crit_edge, %dec_label_pc_b8dc
  %v1_b8ec = phi i32 [ %v1_b8ec.pre, %dec_label_pc_ba68.dec_label_pc_b8e8_crit_edge ], [ %v1_b8e0, %dec_label_pc_b8dc ]
  store i32 %v6_b490, i32* %r2.global-to-local, align 4
  %v9_b8ec = icmp eq i32 %v6_b490, %v1_b8ec
  store i1 %v9_b8ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b8ec, label %dec_label_pc_ba98, label %dec_label_pc_b8f4

dec_label_pc_b8f4:                                ; preds = %dec_label_pc_ba84, %dec_label_pc_b8e8
  store i32 %v1_b5b4, i32* %r3.global-to-local, align 4
  store i1 %v2_baa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_baa0, label %dec_label_pc_b900, label %dec_label_pc_baac

dec_label_pc_b900:                                ; preds = %dec_label_pc_b8f4, %dec_label_pc_ba98, %dec_label_pc_baac
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b904 = load i32, i32* %r7.global-to-local, align 4
  %v1_b904 = trunc i32 %v0_b904 to i8
  %v2_b904 = load i32, i32* @r5, align 4
  %v3_b904 = add i32 %v2_b904, 10
  %v4_b904 = inttoptr i32 %v3_b904 to i8*
  store i8 %v1_b904, i8* %v4_b904, align 1
  %v0_b908 = load i32, i32* %r7.global-to-local, align 4
  %v1_b908 = trunc i32 %v0_b908 to i8
  %v2_b908 = load i32, i32* @r5, align 4
  %v3_b908 = add i32 %v2_b908, 11
  %v4_b908 = inttoptr i32 %v3_b908 to i8*
  store i8 %v1_b908, i8* %v4_b908, align 1
  %v0_b90c = load i32, i32* @r5, align 4
  store i32 %v0_b90c, i32* @r0, align 4
  %v2_b910 = call i32 @function_d0b8(i32 %v0_b90c, i32 20)
  %v3_b910 = trunc i32 %v2_b910 to i8
  %v4_b91427 = udiv i32 %v2_b910, 256
  %v1_b918 = trunc i32 %v4_b91427 to i8
  %v2_b918 = load i32, i32* @r5, align 4
  %v3_b918 = add i32 %v2_b918, 11
  %v4_b918 = inttoptr i32 %v3_b918 to i8*
  store i8 %v1_b918, i8* %v4_b918, align 1
  %v3_b91c = load i32, i32* @r5, align 4
  %v4_b91c = add i32 %v3_b91c, 10
  %v5_b91c = inttoptr i32 %v4_b91c to i8*
  store i8 %v3_b910, i8* %v5_b91c, align 1
  %v0_b920 = load i32, i32* @r6, align 4
  store i32 %v0_b920, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_b92c = load i32, i32* %r7.global-to-local, align 4
  %v1_b92c = trunc i32 %v0_b92c to i8
  %v3_b92c = add i32 %v0_b920, 16
  %v4_b92c = inttoptr i32 %v3_b92c to i8*
  store i8 %v1_b92c, i8* %v4_b92c, align 1
  %v0_b930 = load i32, i32* %r7.global-to-local, align 4
  %v1_b930 = trunc i32 %v0_b930 to i8
  %v2_b930 = load i32, i32* @r6, align 4
  %v3_b930 = add i32 %v2_b930, 17
  %v4_b930 = inttoptr i32 %v3_b930 to i8*
  store i8 %v1_b930, i8* %v4_b930, align 1
  %v0_b934 = load i32, i32* @r5, align 4
  store i32 %v0_b934, i32* %r0.global-to-local, align 4
  %v4_b938 = call i32 @function_d114(i32 %v0_b934, i32 %v0_b920, i32 10240, i32 40)
  %v5_b938 = trunc i32 %v4_b938 to i8
  store i32 %v4_b938, i32* %r0.global-to-local, align 4
  %v4_b93c28 = udiv i32 %v4_b938, 256
  %v1_b940 = trunc i32 %v4_b93c28 to i8
  %v2_b940 = load i32, i32* @r6, align 4
  %v3_b940 = add i32 %v2_b940, 17
  %v4_b940 = inttoptr i32 %v3_b940 to i8*
  store i8 %v1_b940, i8* %v4_b940, align 1
  %v3_b944 = load i32, i32* @r6, align 4
  %v4_b944 = add i32 %v3_b944, 16
  %v5_b944 = inttoptr i32 %v4_b944 to i8*
  store i8 %v5_b938, i8* %v5_b944, align 1
  %v3_b948 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b948, i32* %r3.global-to-local, align 4
  %v0_b94c = load i32, i32* @r5, align 4
  %v1_b94c = add i32 %v0_b94c, 20
  %v2_b94c = inttoptr i32 %v1_b94c to i32*
  %v3_b94c = load i32, i32* %v2_b94c, align 4
  %v3_b954 = udiv i32 %v3_b94c, 65536
  store i32 %v3_b954, i32* %r2.global-to-local, align 4
  %v5_b958 = mul i32 %v3_b948, 24
  %v1_b95c = load i32, i32* @r8, align 4
  %v2_b95c = add i32 %v1_b95c, %v5_b958
  store i32 %v2_b95c, i32* %ip.global-to-local, align 4
  %v3_b96026 = udiv i32 %v3_b94c, 16777216
  %v1_b964 = trunc i32 %v3_b96026 to i8
  %v3_b964 = add i32 %v2_b95c, 3
  %v4_b964 = inttoptr i32 %v3_b964 to i8*
  store i8 %v1_b964, i8* %v4_b964, align 1
  %v0_b968 = load i32, i32* %r2.global-to-local, align 4
  %v1_b968 = trunc i32 %v0_b968 to i8
  %v2_b968 = load i32, i32* %ip.global-to-local, align 4
  %v3_b968 = add i32 %v2_b968, 2
  %v4_b968 = inttoptr i32 %v3_b968 to i8*
  store i8 %v1_b968, i8* %v4_b968, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b970 = load i32, i32* @r5, align 4
  store i32 %v0_b970, i32* %r1.global-to-local, align 4
  %v0_b974 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_b974, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_b980 = load i32, i32* %ip.global-to-local, align 4
  %v6_b988 = inttoptr i32 %v0_b970 to i32*
  %v7_b988 = call i32 @function_121e8(i32 %v0_b974, i32* %v6_b988, i32 60, i32 16384, i32 %v0_b980, i32 16)
  %v3_b98c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b98c, i32* %r3.global-to-local, align 4
  %v1_b990 = add i32 %v3_b98c, 1
  store i32 %v1_b990, i32* %r0.global-to-local, align 4
  %v1_b994 = load i32, i32* @sl, align 4
  %v9_b994 = icmp eq i32 %v1_b990, %v1_b994
  store i1 %v9_b994, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b990, i32* %stack_var_-40, align 4
  %v5_b99c = icmp slt i32 %v1_b990, %v1_b994
  br i1 %v5_b99c, label %dec_label_pc_b884, label %dec_label_pc_b9a0

dec_label_pc_b9a0:                                ; preds = %dec_label_pc_b900
  %v2_b9a0 = icmp eq i32 %v1_b994, 0
  store i1 %v2_b9a0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b874.outer

dec_label_pc_b9ac:                                ; preds = %dec_label_pc_b884
  %v1_b9ac = add i32 %v2_b88c, 16
  %v2_b9ac = inttoptr i32 %v1_b9ac to i32*
  %v3_b9ac = load i32, i32* %v2_b9ac, align 4
  store i32 %v3_b9ac, i32* %r4.global-to-local, align 4
  %v0_b9b0 = call i32 @function_e8e4()
  store i32 %v0_b9b0, i32* %r0.global-to-local, align 4
  %v3_b9b4 = load i32, i32* %stack_var_-40, align 4
  %v5_b9bc = mul i32 %v3_b9b4, 24
  %v0_b9c0 = load i32, i32* %r4.global-to-local, align 4
  %v1_b9c4 = load i32, i32* @r8, align 4
  %v2_b9c4 = add i32 %v1_b9c4, %v5_b9bc
  store i32 %v2_b9c4, i32* %r1.global-to-local, align 4
  %v1_b9c8 = and i32 %v0_b9c0, 65280
  store i32 %v1_b9c8, i32* %r3.global-to-local, align 4
  %v1_b9c0 = udiv i32 %v0_b9c0, 256
  %v3_b9cc = and i32 %v1_b9c0, 65280
  store i32 %v3_b9cc, i32* %r2.global-to-local, align 4
  %v3_b9d0 = mul i32 %v0_b9c0, 16777216
  store i32 %v3_b9d0, i32* %ip.global-to-local, align 4
  %v1_b9d4 = add i32 %v2_b9c4, 20
  %v2_b9d4 = inttoptr i32 %v1_b9d4 to i8*
  %v3_b9d4 = load i8, i8* %v2_b9d4, align 1
  %v4_b9d4 = zext i8 %v3_b9d4 to i32
  %v4_b9d8 = mul nuw nsw i32 %v1_b9c8, 256
  %v5_b9d8 = or i32 %v4_b9d8, %v3_b9d0
  store i32 %v5_b9d8, i32* %ip.global-to-local, align 4
  %v2_b9e0 = call i32 @llvm.bswap.i32(i32 %v0_b9c0)
  %v7_b9e4 = lshr i32 %v0_b9b0, %v4_b9d4
  %v8_b9e4 = add i32 %v7_b9e4, %v2_b9e0
  store i32 %v8_b9e4, i32* %r2.global-to-local, align 4
  %v3_b9f0 = mul i32 %v8_b9e4, 16777216
  %v1_b9e8 = mul i32 %v8_b9e4, 256
  %v4_b9f4 = and i32 %v1_b9e8, 16711680
  %v5_b9f4 = or i32 %v4_b9f4, %v3_b9f0
  store i32 %v5_b9f4, i32* %r1.global-to-local, align 4
  store i32 %v6_b53c, i32* %r0.global-to-local, align 4
  %v2_ba04 = call i32 @llvm.bswap.i32(i32 %v8_b9e4)
  store i32 %v2_ba04, i32* %r3.global-to-local, align 4
  store i1 %v7_b8a8, i1* %cpsr_z.global-to-local, align 1
  %v1_ba0c = load i32, i32* @r5, align 4
  %v2_ba0c = add i32 %v1_ba0c, 16
  %v3_ba0c = inttoptr i32 %v2_ba0c to i32*
  store i32 %v2_ba04, i32* %v3_ba0c, align 4
  br i1 %v2_b8a8, label %dec_label_pc_ba14, label %dec_label_pc_b8b0

dec_label_pc_ba14:                                ; preds = %dec_label_pc_b9ac, %dec_label_pc_b8a4
  %v0_ba14 = call i32 @function_e8e4()
  store i32 %v0_ba14, i32* %r0.global-to-local, align 4
  store i32 %v3_b590, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ba24, i1* %cpsr_z.global-to-local, align 1
  %v1_ba28 = load i32, i32* @r5, align 4
  %v2_ba28 = add i32 %v1_ba28, 12
  %v3_ba28 = inttoptr i32 %v2_ba28 to i32*
  store i32 %v0_ba14, i32* %v3_ba28, align 4
  br i1 %v3_ba24, label %dec_label_pc_ba30, label %dec_label_pc_ba14.dec_label_pc_b8c4_crit_edge

dec_label_pc_ba14.dec_label_pc_b8c4_crit_edge:    ; preds = %dec_label_pc_ba14
  %v1_b8c8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b8c4

dec_label_pc_ba30:                                ; preds = %dec_label_pc_ba14, %dec_label_pc_b8b0
  %v0_ba30 = call i32 @function_e8e4()
  %v1_ba30 = trunc i32 %v0_ba30 to i8
  store i32 %v0_ba30, i32* %r0.global-to-local, align 4
  %v4_ba3429 = udiv i32 %v0_ba30, 256
  %v1_ba38 = trunc i32 %v4_ba3429 to i8
  %v2_ba38 = load i32, i32* @r5, align 4
  %v3_ba38 = add i32 %v2_ba38, 5
  %v4_ba38 = inttoptr i32 %v3_ba38 to i8*
  store i8 %v1_ba38, i8* %v4_ba38, align 1
  store i32 %v3_b5ac, i32* %r3.global-to-local, align 4
  %v1_ba40 = load i32, i32* @r4, align 4
  %v9_ba40 = icmp eq i32 %v3_b5ac, %v1_ba40
  store i1 %v9_ba40, i1* %cpsr_z.global-to-local, align 1
  %v3_ba44 = load i32, i32* @r5, align 4
  %v4_ba44 = add i32 %v3_ba44, 4
  %v5_ba44 = inttoptr i32 %v4_ba44 to i8*
  store i8 %v1_ba30, i8* %v5_ba44, align 1
  %v0_ba48 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ba48, label %dec_label_pc_ba4c, label %dec_label_pc_ba30.dec_label_pc_b8d0_crit_edge

dec_label_pc_ba30.dec_label_pc_b8d0_crit_edge:    ; preds = %dec_label_pc_ba30
  %v1_b8d4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b8d0

dec_label_pc_ba4c:                                ; preds = %dec_label_pc_ba30, %dec_label_pc_b8c4
  %v0_ba4c = call i32 @function_e8e4()
  %v1_ba4c = trunc i32 %v0_ba4c to i8
  store i32 %v0_ba4c, i32* %r0.global-to-local, align 4
  store i32 %v3_b5b0, i32* %ip.global-to-local, align 4
  %v4_ba54 = sdiv i32 %v0_ba4c, 256
  store i32 %v4_ba54, i32* %r3.global-to-local, align 4
  %v1_ba58 = load i32, i32* @r4, align 4
  %v9_ba58 = icmp eq i32 %v3_b5b0, %v1_ba58
  store i1 %v9_ba58, i1* %cpsr_z.global-to-local, align 1
  %v3_ba5c = load i32, i32* @r5, align 4
  %v4_ba5c = add i32 %v3_ba5c, 20
  %v5_ba5c = inttoptr i32 %v4_ba5c to i8*
  store i8 %v1_ba4c, i8* %v5_ba5c, align 1
  %v0_ba60 = load i32, i32* %r3.global-to-local, align 4
  %v1_ba60 = trunc i32 %v0_ba60 to i8
  %v2_ba60 = load i32, i32* @r6, align 4
  %v3_ba60 = add i32 %v2_ba60, 1
  %v4_ba60 = inttoptr i32 %v3_ba60 to i8*
  store i8 %v1_ba60, i8* %v4_ba60, align 1
  %v0_ba64 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ba64, label %dec_label_pc_ba68, label %dec_label_pc_ba4c.dec_label_pc_b8dc_crit_edge

dec_label_pc_ba4c.dec_label_pc_b8dc_crit_edge:    ; preds = %dec_label_pc_ba4c
  %v1_b8e0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b8dc

dec_label_pc_ba68:                                ; preds = %dec_label_pc_ba4c, %dec_label_pc_b8d0
  %v0_ba68 = call i32 @function_e8e4()
  %v1_ba68 = trunc i32 %v0_ba68 to i8
  %v4_ba6c = sdiv i32 %v0_ba68, 256
  store i32 %v4_ba6c, i32* %r3.global-to-local, align 4
  %v3_ba70 = load i32, i32* @r6, align 4
  %v4_ba70 = add i32 %v3_ba70, 2
  %v5_ba70 = inttoptr i32 %v4_ba70 to i8*
  store i8 %v1_ba68, i8* %v5_ba70, align 1
  store i32 %v6_b478, i32* %r0.global-to-local, align 4
  %v1_ba78 = load i32, i32* @r4, align 4
  %v9_ba78 = icmp eq i32 %v6_b478, %v1_ba78
  store i1 %v9_ba78, i1* %cpsr_z.global-to-local, align 1
  %v0_ba7c = load i32, i32* %r3.global-to-local, align 4
  %v1_ba7c = trunc i32 %v0_ba7c to i8
  %v2_ba7c = load i32, i32* @r6, align 4
  %v3_ba7c = add i32 %v2_ba7c, 3
  %v4_ba7c = inttoptr i32 %v3_ba7c to i8*
  store i8 %v1_ba7c, i8* %v4_ba7c, align 1
  %v0_ba80 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ba80, label %dec_label_pc_ba84, label %dec_label_pc_ba68.dec_label_pc_b8e8_crit_edge

dec_label_pc_ba68.dec_label_pc_b8e8_crit_edge:    ; preds = %dec_label_pc_ba68
  %v1_b8ec.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b8e8

dec_label_pc_ba84:                                ; preds = %dec_label_pc_ba68, %dec_label_pc_b8dc
  %v0_ba84 = call i32 @function_e8e4()
  store i32 %v0_ba84, i32* %r0.global-to-local, align 4
  store i32 %v6_b490, i32* %r2.global-to-local, align 4
  %v1_ba8c = load i32, i32* @r4, align 4
  %v9_ba8c = icmp eq i32 %v6_b490, %v1_ba8c
  store i1 %v9_ba8c, i1* %cpsr_z.global-to-local, align 1
  %v1_ba90 = load i32, i32* @r6, align 4
  %v2_ba90 = add i32 %v1_ba90, 4
  %v3_ba90 = inttoptr i32 %v2_ba90 to i32*
  store i32 %v0_ba84, i32* %v3_ba90, align 4
  br i1 %v9_ba8c, label %dec_label_pc_ba98, label %dec_label_pc_b8f4

dec_label_pc_ba98:                                ; preds = %dec_label_pc_ba84, %dec_label_pc_b8e8
  %v0_ba98 = call i32 @function_e8e4()
  store i32 %v0_ba98, i32* %r0.global-to-local, align 4
  store i32 %v1_b5b4, i32* %r3.global-to-local, align 4
  store i1 %v2_baa0, i1* %cpsr_z.global-to-local, align 1
  %v1_baa4 = load i32, i32* @r6, align 4
  %v2_baa4 = add i32 %v1_baa4, 8
  %v3_baa4 = inttoptr i32 %v2_baa4 to i32*
  store i32 %v0_ba98, i32* %v3_baa4, align 4
  br i1 %v2_baa0, label %dec_label_pc_b900, label %dec_label_pc_baac

dec_label_pc_baac:                                ; preds = %dec_label_pc_b8f4, %dec_label_pc_ba98
  %v0_baac = call i32 @function_e8e4()
  %v1_baac = trunc i32 %v0_baac to i8
  store i32 %v0_baac, i32* %r0.global-to-local, align 4
  %v4_bab0 = sdiv i32 %v0_baac, 256
  store i32 %v4_bab0, i32* %r3.global-to-local, align 4
  %v1_bab4 = trunc i32 %v4_bab0 to i8
  %v2_bab4 = load i32, i32* @r6, align 4
  %v3_bab4 = add i32 %v2_bab4, 19
  %v4_bab4 = inttoptr i32 %v3_bab4 to i8*
  store i8 %v1_bab4, i8* %v4_bab4, align 1
  %v3_bab8 = load i32, i32* @r6, align 4
  %v4_bab8 = add i32 %v3_bab8, 18
  %v5_bab8 = inttoptr i32 %v4_bab8 to i8*
  store i8 %v1_baac, i8* %v5_bab8, align 1
  br label %dec_label_pc_b900

dec_label_pc_bac0:                                ; preds = %dec_label_pc_b560
  %v0_bac0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_bac0, i32* %r0.global-to-local, align 4
  %v1_bac4 = call i32 @function_11960(i32 %v0_bac0)
  store i32 %v1_bac4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bac8

dec_label_pc_bac8:                                ; preds = %dec_label_pc_b388, %dec_label_pc_bac0
  %v29_bacc = phi i32 [ %v3_b550, %dec_label_pc_b388 ], [ %v1_bac4, %dec_label_pc_bac0 ]
  store i32 %v3_b388, i32* %r4.global-to-local, align 4
  store i32 %v12_b388, i32* %r7.global-to-local, align 4
  ret i32 %v29_bacc

; uselistorder directives
  uselistorder i32 %v4_bab0, { 1, 0 }
  uselistorder i32 %v0_baac, { 0, 2, 1 }
  uselistorder i32 %v0_ba4c, { 0, 2, 1 }
  uselistorder i32 %v0_ba30, { 0, 2, 1 }
  uselistorder i32 %v2_ba04, { 1, 0 }
  uselistorder i32 %v8_b9e4, { 2, 0, 1, 3 }
  uselistorder i32 %v3_b9d0, { 1, 0 }
  uselistorder i32 %v0_b9c0, { 2, 0, 1, 3 }
  uselistorder i1 %v2_b9a0, { 1, 0 }
  uselistorder i32 %v1_b994, { 1, 2, 3, 0 }
  uselistorder i32 %v1_b990, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_b938, { 0, 2, 1 }
  uselistorder i32 %v0_b920, { 1, 0, 2 }
  uselistorder i1 %v7_b8a8, { 2, 1, 0 }
  uselistorder i1 %v2_baa0, { 2, 3, 1, 0 }
  uselistorder i1 %v3_ba24, { 3, 2, 0, 1 }
  uselistorder i32 %v1_b85c, { 1, 0, 2, 3 }
  uselistorder i8 %v5_b674, { 1, 0 }
  uselistorder i32 %v3_b65c, { 1, 0 }
  uselistorder i32 %v1_b658, { 1, 0 }
  uselistorder i32 %v1_b64c, { 1, 0 }
  uselistorder i32 %v1_b648, { 1, 0 }
  uselistorder i32 %v1_b624, { 1, 0 }
  uselistorder i32 %v1_b620, { 1, 0 }
  uselistorder i32 %v3_b614, { 1, 0 }
  uselistorder i32 %v1_b610, { 1, 0 }
  uselistorder i32 %v1_b5ec, { 1, 0 }
  uselistorder i32 %v1_b5e4, { 1, 0 }
  uselistorder i32 %v1_b5b4, { 2, 1, 3, 0 }
  uselistorder i32 %v3_b5ac, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_b5a4, { 3, 0, 1, 2 }
  uselistorder i32 %v0_b5a0, { 0, 2, 1, 4, 3 }
  uselistorder i1 %v7_b580, { 1, 0 }
  uselistorder i1 %v7_b554, { 1, 0 }
  uselistorder i32 %v3_b550, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_b53c, { 6, 4, 0, 5, 1, 3, 2 }
  uselistorder i32 %v6_b490, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_b478, { 6, 5, 4, 3, 2, 0, 1, 7 }
  uselistorder i32 %v1_b428, { 1, 2, 0 }
  uselistorder i32 %v7_b3e4, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v6_b3c0, { 1, 2, 0 }
  uselistorder i32 %v1_b38c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 29, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 4, 6, 7, 5, 8, 9, 11, 10, 13, 12, 14, 16, 15, 17, 18, 19, 22, 20, 21, 23, 24, 25, 26, 27, 1, 28, 29, 30, 31, 35, 32, 33, 34, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder label %dec_label_pc_bac8, { 1, 0 }
  uselistorder label %dec_label_pc_baac, { 1, 0 }
  uselistorder label %dec_label_pc_b900, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b874, { 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_bad4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_bad4:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v24_bad4 = load i32, i32* @fp, align 4
  %v1_bad8 = urem i32 %arg1, 256
  store i32 %v1_bad8, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_baf0 = urem i32 %arg3, 256
  store i32 %v1_baf0, i32* @r4, align 4
  %v2_baf4 = call i32 @function_12538(i32 %v1_bad8, i32 4)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v2_baf4, i32* @sl, align 4
  %v0_bb00 = load i32, i32* @r7, align 4
  %v2_bb04 = call i32 @function_12538(i32 %v0_bb00, i32 4)
  store i32 65535, i32* @r5, align 4
  %v0_bb10 = load i32, i32* @r6, align 4
  store i32 %v0_bb10, i32* %r1.global-to-local, align 4
  store i32 %v2_bb04, i32* @sb, align 4
  %v0_bb20 = load i32, i32* @r4, align 4
  %v5_bb24 = inttoptr i32 %v0_bb10 to i32*
  %v6_bb24 = call i32 @function_85e0(i32 %v0_bb20, i32* %v5_bb24, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v3_bb2c = urem i32 %v6_bb24, 65536
  %v0_bb30 = load i32, i32* @r6, align 4
  store i32 %v0_bb30, i32* %r1.global-to-local, align 4
  %v0_bb38 = load i32, i32* @r5, align 4
  %v0_bb3c = load i32, i32* @r4, align 4
  %v5_bb44 = inttoptr i32 %v0_bb30 to i32*
  %v6_bb44 = call i32 @function_85e0(i32 %v0_bb3c, i32* %v5_bb44, i32 6, i32 %v0_bb38, i32 %v3_bb2c)
  %v0_bb48 = load i32, i32* @r6, align 4
  store i32 %v0_bb48, i32* %r1.global-to-local, align 4
  %v3_bb4c = mul i32 %v6_bb44, 65536
  store i32 %v3_bb4c, i32* %fp.global-to-local, align 4
  %v0_bb58 = load i32, i32* @r4, align 4
  %v5_bb5c = inttoptr i32 %v0_bb48 to i32*
  %v6_bb5c = call i32 @function_85e0(i32 %v0_bb58, i32* %v5_bb5c, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  %v0_bb68 = load i32, i32* @r6, align 4
  store i32 %v0_bb68, i32* %r1.global-to-local, align 4
  %v0_bb6c = load i32, i32* @r4, align 4
  %v3_bb74 = urem i32 %v6_bb5c, 65536
  store i32 %v3_bb74, i32* @r6, align 4
  %v5_bb78 = inttoptr i32 %v0_bb68 to i32*
  %v6_bb78 = call i32 @function_85e0(i32 %v0_bb6c, i32* %v5_bb78, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v0_bb7c = load i32, i32* %fp.global-to-local, align 4
  %v3_bb7c = udiv i32 %v0_bb7c, 65536
  %v1_bb84 = load i32, i32* @r5, align 4
  %v9_bb84 = icmp eq i32 %v3_bb7c, %v1_bb84
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_bb84, label %dec_label_pc_bbac, label %bb

bb:                                               ; preds = %dec_label_pc_bad4
  %v2_bb98 = mul nuw nsw i32 %v3_bb7c, 256
  %v4_bb9c = and i32 %v2_bb98, 65280
  %v1_bba0 = urem i32 %v6_bb78, 256
  store i32 %v1_bba0, i32* @r8, align 4
  %v5_bba4 = udiv i32 %v0_bb7c, 16777216
  %v6_bba4 = or i32 %v4_bb9c, %v5_bba4
  br label %dec_label_pc_bbb8

dec_label_pc_bbac:                                ; preds = %dec_label_pc_bad4
  %v1_bba07 = urem i32 %v6_bb78, 256
  store i32 %v1_bba07, i32* @r8, align 4
  %v0_bbac = call i32 @function_e8e4()
  %v3_bbb4 = urem i32 %v0_bbac, 65536
  br label %dec_label_pc_bbb8

dec_label_pc_bbb8:                                ; preds = %bb, %dec_label_pc_bbac
  %storemerge17 = phi i32 [ %v6_bba4, %bb ], [ %v3_bbb4, %dec_label_pc_bbac ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_bbb8 = load i32, i32* @r7, align 4
  %tmp41 = icmp slt i32 %v0_bbb8, 1
  br i1 %tmp41, label %dec_label_pc_bd60.preheader, label %dec_label_pc_bbc0

dec_label_pc_bd60.preheader:                      ; preds = %dec_label_pc_bcbc, %dec_label_pc_bbb8
  %storemerge3.in12.ph = phi i32 [ %v0_bbb8, %dec_label_pc_bbb8 ], [ %v1_bc14, %dec_label_pc_bcbc ]
  %tmp424750 = icmp slt i32 %storemerge3.in12.ph, 1
  br i1 %tmp424750, label %dec_label_pc_bd28, label %dec_label_pc_bd2c.lr.ph

dec_label_pc_bbc0:                                ; preds = %dec_label_pc_bbb8
  store i32 %v3_bb2c, i32* %r1.global-to-local, align 4
  %v3_bbc4 = udiv i32 %v6_bb24, 256
  %v5_bbd0 = trunc i32 %v3_bbc4 to i8
  store i32 %arg2, i32* @r5, align 4
  %v3_bbe8 = udiv i32 %v6_bb24, 65536
  store i32 %v3_bbe8, i32* @r4, align 4
  %v4_bbf8 = trunc i32 %v3_bbe8 to i8
  store i8 %v4_bbf8, i8* %stack_var_-80, align 1
  %v3_bd08 = icmp eq i32 %v3_bb2c, 65535
  %v2_bc30 = ptrtoint i32* %stack_var_-52 to i32
  %v3_bc60 = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_bcec

dec_label_pc_bc00:                                ; preds = %dec_label_pc_bcec
  %v2_bc00 = load i8, i8* %stack_var_-80, align 1
  %v3_bc00 = sext i8 %v2_bc00 to i32
  store i32 %v3_bc00, i32* %r1.global-to-local, align 4
  store i32 %v3_bbc4, i32* @r4, align 4
  %v2_bc04 = load i32, i32* @r5, align 4
  %v3_bc04 = add i32 %v2_bc04, 2
  %v4_bc04 = inttoptr i32 %v3_bc04 to i8*
  store i8 %v5_bbd0, i8* %v4_bc04, align 1
  %v0_bc08 = load i32, i32* %r1.global-to-local, align 4
  %v1_bc08 = trunc i32 %v0_bc08 to i8
  %v2_bc08 = load i32, i32* @r5, align 4
  %v3_bc08 = add i32 %v2_bc08, 3
  %v4_bc08 = inttoptr i32 %v3_bc08 to i8*
  store i8 %v1_bc08, i8* %v4_bc08, align 1
  br label %dec_label_pc_bc0c

dec_label_pc_bc0c:                                ; preds = %dec_label_pc_bd14, %dec_label_pc_bc00
  %v1_bc14 = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_bc24 = call i32 @function_1224c(i32 2, i32 2, i32 17)
  store i32 %stack_var_-60.0, i32* @r4, align 4
  %v7_bc2c = icmp eq i32 %v3_bc24, -1
  store i32 %v2_bc30, i32* %r1.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v2_bc40 = load i32, i32* @sb, align 4
  %v3_bc40 = add i32 %v2_bc40, %stack_var_-60.0
  %v4_bc40 = inttoptr i32 %v3_bc40 to i32*
  store i32 %v3_bc24, i32* %v4_bc40, align 4
  br i1 %v7_bc2c, label %dec_label_pc_bd6c, label %dec_label_pc_bc48

dec_label_pc_bc48:                                ; preds = %dec_label_pc_bc0c
  store i32 2, i32* %stack_var_-52, align 4
  %v4_bc60 = call i32 @function_1207c(i32 %v3_bc24, %sockaddr* %v3_bc60, i32 16)
  %v0_bc64 = load i32, i32* @r5, align 4
  %v1_bc64 = add i32 %v0_bc64, 20
  %v2_bc64 = inttoptr i32 %v1_bc64 to i8*
  %v3_bc64 = load i8, i8* %v2_bc64, align 1
  %tmp = icmp ugt i8 %v3_bc64, 31
  br i1 %tmp, label %dec_label_pc_bcbc, label %dec_label_pc_bc70

dec_label_pc_bc70:                                ; preds = %dec_label_pc_bc48
  %v1_bc70 = add i32 %v0_bc64, 16
  %v2_bc70 = inttoptr i32 %v1_bc70 to i32*
  %v3_bc70 = load i32, i32* %v2_bc70, align 4
  store i32 %v3_bc70, i32* @r4, align 4
  %v0_bc74 = call i32 @function_e8e4()
  %v0_bc78 = load i32, i32* @r4, align 4
  %v1_bc7c = and i32 %v0_bc78, 65280
  %v3_bc84 = mul i32 %v0_bc78, 16777216
  %v4_bc88 = mul nuw nsw i32 %v1_bc7c, 256
  %v5_bc88 = or i32 %v4_bc88, %v3_bc84
  store i32 %v5_bc88, i32* %r1.global-to-local, align 4
  %v0_bc90 = load i32, i32* @r5, align 4
  %v1_bc90 = add i32 %v0_bc90, 20
  %v2_bc90 = inttoptr i32 %v1_bc90 to i8*
  %v3_bc90 = load i8, i8* %v2_bc90, align 1
  %v4_bc90 = zext i8 %v3_bc90 to i32
  %v2_bc94 = call i32 @llvm.bswap.i32(i32 %v0_bc78)
  %v7_bc98 = lshr i32 %v0_bc74, %v4_bc90
  %v8_bc98 = add i32 %v7_bc98, %v2_bc94
  %v3_bca4 = mul i32 %v8_bc98, 16777216
  %v1_bca8 = and i32 %v8_bc98, 65280
  %v4_bcac = mul nuw nsw i32 %v1_bca8, 256
  %v5_bcac = or i32 %v4_bcac, %v3_bca4
  store i32 %v5_bcac, i32* %r1.global-to-local, align 4
  %v2_bcb4 = call i32 @llvm.bswap.i32(i32 %v8_bc98)
  %v2_bcb8 = add i32 %v0_bc90, 4
  %v3_bcb8 = inttoptr i32 %v2_bcb8 to i32*
  store i32 %v2_bcb4, i32* %v3_bcb8, align 4
  %v0_bcc8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_bcbc

dec_label_pc_bcbc:                                ; preds = %dec_label_pc_bc48, %dec_label_pc_bc70
  %v0_bcc8 = phi i32 [ %v0_bc64, %dec_label_pc_bc48 ], [ %v0_bcc8.pre, %dec_label_pc_bc70 ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_bcc4 = load i32, i32* @sb, align 4
  %v2_bcc4 = add i32 %v1_bcc4, %stack_var_-60.0
  %v3_bcc4 = inttoptr i32 %v2_bcc4 to i32*
  %v4_bcc4 = load i32, i32* %v3_bcc4, align 4
  store i32 %v0_bcc8, i32* %r1.global-to-local, align 4
  %v3_bccc = inttoptr i32 %v0_bcc8 to %sockaddr*
  %v4_bccc = call i32 @function_120a8(i32 %v4_bcc4, %sockaddr* %v3_bccc, i32 16)
  %v1_bcd8 = add i32 %stack_var_-60.0, 4
  %v1_bcdc = load i32, i32* @r7, align 4
  %v9_bcdc = icmp eq i32 %v1_bc14, %v1_bcdc
  %v0_bce4 = load i32, i32* @r5, align 4
  %v1_bce4 = add i32 %v0_bce4, 24
  store i32 %v1_bce4, i32* @r5, align 4
  br i1 %v9_bcdc, label %dec_label_pc_bd60.preheader, label %dec_label_pc_bcec

dec_label_pc_bcec:                                ; preds = %dec_label_pc_bcbc, %dec_label_pc_bbc0
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_bbc0 ], [ %v1_bcd8, %dec_label_pc_bcbc ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_bbc0 ], [ %v1_bc14, %dec_label_pc_bcbc ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_bcf8 = call i32 @function_12538(i32 65535, i32 1)
  store i32 %v3_bb2c, i32* %r1.global-to-local, align 4
  %v2_bd0c = load i32, i32* @sl, align 4
  %v3_bd0c = add i32 %v2_bd0c, %stack_var_-60.0
  %v4_bd0c = inttoptr i32 %v3_bd0c to i32*
  store i32 %v2_bcf8, i32* %v4_bd0c, align 4
  br i1 %v3_bd08, label %dec_label_pc_bd14, label %dec_label_pc_bc00

dec_label_pc_bd14:                                ; preds = %dec_label_pc_bcec
  %v0_bd14 = call i32 @function_e8e4()
  %v1_bd14 = trunc i32 %v0_bd14 to i8
  %v4_bd18 = sdiv i32 %v0_bd14, 256
  %v1_bd1c = trunc i32 %v4_bd18 to i8
  %v2_bd1c = load i32, i32* @r5, align 4
  %v3_bd1c = add i32 %v2_bd1c, 3
  %v4_bd1c = inttoptr i32 %v3_bd1c to i8*
  store i8 %v1_bd1c, i8* %v4_bd1c, align 1
  %v3_bd20 = load i32, i32* @r5, align 4
  %v4_bd20 = add i32 %v3_bd20, 2
  %v5_bd20 = inttoptr i32 %v4_bd20 to i8*
  store i8 %v1_bd14, i8* %v5_bd20, align 1
  br label %dec_label_pc_bc0c

dec_label_pc_bd28:                                ; preds = %dec_label_pc_bd60.loopexit, %dec_label_pc_bd60.preheader, %dec_label_pc_bd64.loopexit, %dec_label_pc_bd28
  br label %dec_label_pc_bd28

dec_label_pc_bd2c:                                ; preds = %dec_label_pc_bd2c.lr.ph, %dec_label_pc_bd64.loopexit
  %v0_bd2c = load i32, i32* @r8, align 4
  %v2_bd2c = icmp eq i32 %v0_bd2c, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_bd2c, label %dec_label_pc_bd34, label %dec_label_pc_bd74

dec_label_pc_bd34:                                ; preds = %dec_label_pc_bd2c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_bd3c

dec_label_pc_bd3c:                                ; preds = %dec_label_pc_bd3c, %dec_label_pc_bd34
  %v0_bd44 = phi i32 [ %v1_bd44, %dec_label_pc_bd3c ], [ 0, %dec_label_pc_bd34 ]
  %v0_bd3c = phi i32 [ %v1_bd58, %dec_label_pc_bd3c ], [ 0, %dec_label_pc_bd34 ]
  %v1_bd3c = load i32, i32* @sb, align 4
  %v2_bd3c = add i32 %v1_bd3c, %v0_bd3c
  %v3_bd3c = inttoptr i32 %v2_bd3c to i32*
  %v4_bd3c = load i32, i32* %v3_bd3c, align 4
  %v1_bd40 = load i32, i32* @sl, align 4
  %v2_bd40 = add i32 %v1_bd40, %v0_bd3c
  %v3_bd40 = inttoptr i32 %v2_bd40 to i32*
  %v4_bd40 = load i32, i32* %v3_bd40, align 4
  store i32 %v4_bd40, i32* %r1.global-to-local, align 4
  %v1_bd44 = add i32 %v0_bd44, 1
  %v0_bd48 = load i32, i32* @r6, align 4
  %v4_bd50 = inttoptr i32 %v4_bd40 to i32*
  %v5_bd50 = call i32 @function_121bc(i32 %v4_bd3c, i32* %v4_bd50, i32 %v0_bd48, i32 16384)
  %v1_bd54 = load i32, i32* @r7, align 4
  %v9_bd54 = icmp eq i32 %v1_bd44, %v1_bd54
  %v0_bd58 = load i32, i32* @r4, align 4
  %v1_bd58 = add i32 %v0_bd58, 4
  store i32 %v1_bd58, i32* @r4, align 4
  br i1 %v9_bd54, label %dec_label_pc_bd60.loopexit, label %dec_label_pc_bd3c

dec_label_pc_bd60.loopexit:                       ; preds = %dec_label_pc_bd3c
  %tmp4247 = icmp slt i32 %v1_bd44, 1
  br i1 %tmp4247, label %dec_label_pc_bd28, label %dec_label_pc_bd2c.lr.ph

dec_label_pc_bd2c.lr.ph:                          ; preds = %dec_label_pc_bd60.preheader, %dec_label_pc_bd60.loopexit
  br label %dec_label_pc_bd2c

dec_label_pc_bd64.loopexit:                       ; preds = %dec_label_pc_bd7c
  %tmp42 = icmp slt i32 %v0_bda4, 1
  br i1 %tmp42, label %dec_label_pc_bd28, label %dec_label_pc_bd2c

dec_label_pc_bd6c:                                ; preds = %dec_label_pc_bc0c
  store i32 %v24_bad4, i32* %fp.global-to-local, align 4
  ret i32 %v3_bc24

dec_label_pc_bd74:                                ; preds = %dec_label_pc_bd2c
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_bd7c

dec_label_pc_bd7c:                                ; preds = %dec_label_pc_bd7c, %dec_label_pc_bd74
  %v0_bd7c = phi i32 [ %v1_bda8, %dec_label_pc_bd7c ], [ 0, %dec_label_pc_bd74 ]
  %v1_bd7c = load i32, i32* @sl, align 4
  %v2_bd7c = add i32 %v1_bd7c, %v0_bd7c
  %v3_bd7c = inttoptr i32 %v2_bd7c to i32*
  %v4_bd7c = load i32, i32* %v3_bd7c, align 4
  store i32 %v4_bd7c, i32* @r4, align 4
  %v0_bd80 = load i32, i32* @r6, align 4
  store i32 %v0_bd80, i32* @r1, align 4
  %v1_bd88 = inttoptr i32 %v4_bd7c to i8*
  %v2_bd88 = call i32 @function_ea64(i8* %v1_bd88)
  %v0_bd8c = load i32, i32* @r5, align 4
  %v1_bd8c = add i32 %v0_bd8c, 1
  store i32 %v1_bd8c, i32* @r5, align 4
  %v0_bd90 = load i32, i32* @fp, align 4
  %v1_bd90 = load i32, i32* @sb, align 4
  %v2_bd90 = add i32 %v1_bd90, %v0_bd90
  %v3_bd90 = inttoptr i32 %v2_bd90 to i32*
  %v4_bd90 = load i32, i32* %v3_bd90, align 4
  %v0_bd94 = load i32, i32* @r4, align 4
  store i32 %v0_bd94, i32* %r1.global-to-local, align 4
  %v0_bd98 = load i32, i32* @r6, align 4
  %v4_bda0 = inttoptr i32 %v0_bd94 to i32*
  %v5_bda0 = call i32 @function_121bc(i32 %v4_bd90, i32* %v4_bda0, i32 %v0_bd98, i32 16384)
  %v0_bda4 = load i32, i32* @r5, align 4
  %v1_bda4 = load i32, i32* @r7, align 4
  %v9_bda4 = icmp eq i32 %v0_bda4, %v1_bda4
  %v0_bda8 = load i32, i32* @fp, align 4
  %v1_bda8 = add i32 %v0_bda8, 4
  store i32 %v1_bda8, i32* @fp, align 4
  br i1 %v9_bda4, label %dec_label_pc_bd64.loopexit, label %dec_label_pc_bd7c

; uselistorder directives
  uselistorder i32 %v1_bda8, { 1, 0 }
  uselistorder i32 %v0_bda4, { 1, 0 }
  uselistorder i32 %v1_bd58, { 1, 0 }
  uselistorder i32 %v1_bd44, { 2, 0, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 5, 2, 4, 1, 3 }
  uselistorder i32 %v0_bcc8, { 1, 0 }
  uselistorder i32 %v8_bc98, { 1, 2, 0 }
  uselistorder i32 %v0_bc78, { 1, 0, 2 }
  uselistorder i32 %v3_bc24, { 1, 3, 2, 0 }
  uselistorder i32 %v1_bc14, { 1, 2, 0 }
  uselistorder i32 %v3_bbe8, { 1, 0 }
  uselistorder i32 %v3_bbc4, { 1, 0 }
  uselistorder i32 %v3_bb2c, { 0, 3, 1, 2 }
  uselistorder i32 %v1_bad8, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 15, 17, 19, 18, 0 }
  uselistorder label %dec_label_pc_bd2c.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_bd2c, { 1, 0 }
  uselistorder label %dec_label_pc_bd28, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_bcbc, { 1, 0 }
  uselistorder label %dec_label_pc_bbb8, { 1, 0 }
}

define i32 @function_bdb8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_bdb8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_bdb8 = load i32, i32* @sb, align 4
  %v24_bdb8 = load i32, i32* @fp, align 4
  %v1_bdbc = urem i32 %arg1, 256
  store i32 %v1_bdbc, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_bdbc, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_bdd4 = urem i32 %arg3, 256
  store i32 %v1_bdd4, i32* @r4, align 4
  %v2_bdd8 = call i32 @function_12538(i32 %v1_bdbc, i32 4)
  %v0_bddc = load i32, i32* @r5, align 4
  store i32 %v0_bddc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bdec = load i32, i32* @r4, align 4
  store i32 %v0_bdec, i32* %r0.global-to-local, align 4
  %v5_bdf0 = inttoptr i32 %v0_bddc to i32*
  %v6_bdf0 = call i32 @function_85e0(i32 %v0_bdec, i32* %v5_bdf0, i32 2, i32 0, i32 %v2_bdd8)
  %v1_bdfc = urem i32 %v6_bdf0, 256
  store i32 %v1_bdfc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_be08 = load i32, i32* @r5, align 4
  store i32 %v0_be08, i32* %r1.global-to-local, align 4
  %v0_be0c = load i32, i32* @r4, align 4
  store i32 %v0_be0c, i32* %r0.global-to-local, align 4
  %v5_be10 = trunc i32 %v6_bdf0 to i8
  %v6_be14 = inttoptr i32 %v0_be08 to i32*
  %v7_be14 = call i32 @function_85e0(i32 %v0_be0c, i32* %v6_be14, i32 3, i32 65535, i32 %v6_bdf0)
  %v0_be18 = load i32, i32* @r5, align 4
  store i32 %v0_be18, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_be14, i32* %fp.global-to-local, align 4
  %v0_be28 = load i32, i32* @r4, align 4
  store i32 %v0_be28, i32* %r0.global-to-local, align 4
  %v5_be2c = inttoptr i32 %v0_be18 to i32*
  %v6_be2c = call i32 @function_85e0(i32 %v0_be28, i32* %v5_be2c, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_be34 = urem i32 %v6_be2c, 256
  store i32 %v1_be34, i32* %ip.global-to-local, align 4
  %v0_be38 = load i32, i32* @r5, align 4
  store i32 %v0_be38, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_be44 = load i32, i32* @r4, align 4
  store i32 %v0_be44, i32* %r0.global-to-local, align 4
  %v5_be48 = trunc i32 %v6_be2c to i8
  %v6_be4c = inttoptr i32 %v0_be38 to i32*
  %v7_be4c = call i32 @function_85e0(i32 %v0_be44, i32* %v6_be4c, i32 5, i32 0, i32 %v6_be2c)
  %v1_be58 = urem i32 %v7_be4c, 256
  store i32 %v1_be58, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_be64 = load i32, i32* @r5, align 4
  store i32 %v0_be64, i32* %r1.global-to-local, align 4
  %v0_be68 = load i32, i32* @r4, align 4
  store i32 %v0_be68, i32* %r0.global-to-local, align 4
  %v5_be70 = inttoptr i32 %v0_be64 to i32*
  %v6_be70 = call i32 @function_85e0(i32 %v0_be68, i32* %v5_be70, i32 6, i32 65535, i32 %v1_be58)
  %v0_be78 = load i32, i32* @r5, align 4
  store i32 %v0_be78, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_be70, i32* @r7, align 4
  %v0_be88 = load i32, i32* @r4, align 4
  store i32 %v0_be88, i32* %r0.global-to-local, align 4
  %v5_be8c = inttoptr i32 %v0_be78 to i32*
  %v6_be8c = call i32 @function_85e0(i32 %v0_be88, i32* %v5_be8c, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_be90 = load i32, i32* @r5, align 4
  store i32 %v0_be90, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_be8c, i32* %sb.global-to-local, align 4
  %v0_bea0 = load i32, i32* @r4, align 4
  store i32 %v0_bea0, i32* %r0.global-to-local, align 4
  %v5_bea4 = inttoptr i32 %v0_be90 to i32*
  %v6_bea4 = call i32 @function_85e0(i32 %v0_bea0, i32* %v5_bea4, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_beb0 = load i32, i32* @r5, align 4
  store i32 %v0_beb0, i32* %r1.global-to-local, align 4
  store i32 %v6_bea4, i32* @r6, align 4
  %v0_beb8 = load i32, i32* @r4, align 4
  store i32 %v0_beb8, i32* %r0.global-to-local, align 4
  %v5_bebc = inttoptr i32 %v0_beb0 to i32*
  %v6_bebc = call i32 @function_85e0(i32 %v0_beb8, i32* %v5_bebc, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_bec8 = load i32, i32* @global_var_1c93c.50, align 4
  store i32 %v2_bec8, i32* %r3.global-to-local, align 4
  %v1_becc = urem i32 %v6_bebc, 256
  store i32 %v1_becc, i32* %ip.global-to-local, align 4
  %v0_bed0 = load i32, i32* @r5, align 4
  store i32 %v0_bed0, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_bed8 = load i32, i32* @r4, align 4
  store i32 %v0_bed8, i32* %r0.global-to-local, align 4
  %v5_bee0 = inttoptr i32 %v0_bed0 to i32*
  %v6_bee0 = call i32 @function_85e0(i32 %v0_bed8, i32* %v5_bee0, i32 25, i32 %v2_bec8, i32 %v1_becc)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_bef4 = call i32 @function_1224c(i32 2, i32 3, i32 17)
  store i32 %v3_bef4, i32* %r0.global-to-local, align 4
  %v7_bef8 = icmp eq i32 %v3_bef4, -1
  store i1 %v7_bef8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bef8, label %dec_label_pc_c320, label %dec_label_pc_bf04

dec_label_pc_bf04:                                ; preds = %dec_label_pc_bdb8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_bf0c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_bf0c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_bf20 = call i32 @function_1221c(i32 %v3_bef4, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_bf20, i32* %r0.global-to-local, align 4
  %v7_bf24 = icmp eq i32 %v6_bf20, -1
  store i1 %v7_bf24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bf24, label %dec_label_pc_c318, label %dec_label_pc_bf2c

dec_label_pc_bf2c:                                ; preds = %dec_label_pc_bf04
  %v0_bf2c = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_bf38 = urem i32 %v0_bf2c, 65536
  store i32 %v3_bf38, i32* %r2.global-to-local, align 4
  %v3_bf3c = icmp ugt i32 %v3_bf38, 1459
  %v9_bf3c = icmp eq i32 %v3_bf38, 1460
  store i1 %v9_bf3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bf3c, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_bf2c
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_bf2c, %bb
  %v0_bf44 = phi i32 [ %v3_bf38, %dec_label_pc_bf2c ], [ 1460, %bb ]
  %v0_bf48 = load i32, i32* %fp.global-to-local, align 4
  %v3_bf48 = mul i32 %v0_bf48, 65536
  store i32 %v3_bf48, i32* %r0.global-to-local, align 4
  %v3_bf4c = urem i32 %v0_bf48, 65536
  store i32 %v3_bf4c, i32* %r2.global-to-local, align 4
  %v0_bf50 = load i32, i32* @sl, align 4
  %v2_bf50 = icmp eq i32 %v0_bf50, 0
  store i1 %v2_bf50, i1* %cpsr_z.global-to-local, align 1
  %v0_bf54 = load i32, i32* %sb.global-to-local, align 4
  %v0_bf58 = load i32, i32* @r7, align 4
  %tmp72 = icmp slt i32 %v0_bf50, 1
  br i1 %tmp72, label %bb73, label %bb74

bb73:                                             ; preds = %bb71
  store i32 %v0_bf44, i32* %r2.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %bb71, %bb73
  %v5_bf80 = phi i32 [ %v3_bf4c, %bb71 ], [ %v0_bf44, %bb73 ]
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_bf68 = urem i32 %v0_bf58, 65536
  store i32 %v3_bf68, i32* %r3.global-to-local, align 4
  %v3_bf6c = urem i32 %v0_bf54, 65536
  store i32 %v3_bf6c, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %tmp72, label %.thread, label %dec_label_pc_bf88

.thread:                                          ; preds = %bb74
  %v6_bf7c = add nsw i32 %v5_bf80, 28
  store i32 %v6_bf7c, i32* @fp, align 4
  %v6_bf80 = add nsw i32 %v5_bf80, 8
  store i32 %v6_bf80, i32* @sb, align 4
  br label %dec_label_pc_c0fc

dec_label_pc_bf88:                                ; preds = %bb74
  %v1_bf8c = add nuw nsw i32 %v0_bf44, 28
  store i32 %v1_bf8c, i32* @fp, align 4
  %tmp75 = mul nuw nsw i32 %v1_bf8c, 256
  %v1_bf98 = and i32 %tmp75, 65280
  %tmp76 = udiv i32 %v0_bf48, 256
  %v3_bf9c = urem i32 %tmp76, 256
  %v2_bfb0 = icmp eq i32 %v1_be58, 0
  store i1 %v2_bfb0, i1* %cpsr_z.global-to-local, align 1
  %v1_bfb4 = urem i32 %v0_bf48, 256
  %v1_bfbc = add nuw nsw i32 %v0_bf44, 8
  store i32 %v1_bfbc, i32* @sb, align 4
  %v1_bfc4 = urem i32 %v0_bf58, 256
  %v1_bfc8 = urem i32 %v0_bf54, 256
  store i32 %v1_bfc8, i32* %ip.global-to-local, align 4
  store i32 %v1_bf98, i32* %r3.global-to-local, align 4
  %tmp77 = mul nuw nsw i32 %v1_bfbc, 256
  %v4_bfd4 = mul nuw nsw i32 %v1_bfb4, 256
  %v5_bfd4 = or i32 %v4_bfd4, %v3_bf9c
  store i32 %v5_bfd4, i32* %r0.global-to-local, align 4
  %v3_bfd8 = mul nuw nsw i32 %v1_bfc4, 256
  store i32 %v3_bfd8, i32* %r2.global-to-local, align 4
  %tmp78 = udiv i32 %v0_bf54, 256
  %v3_bfdc = urem i32 %tmp78, 256
  %v1_bfe0 = and i32 %tmp77, 65280
  store i32 %v1_bfe0, i32* %r1.global-to-local, align 4
  %tmp79 = udiv i32 %v1_bf8c, 256
  %v4_bfe4 = urem i32 %tmp79, 256
  %v5_bfe4 = or i32 %v4_bfe4, %v1_bf98
  store i32 %v5_bfe4, i32* @lr, align 4
  %tmp80 = udiv i32 %v0_bf58, 256
  %v4_bfe8 = urem i32 %tmp80, 256
  %v5_bfe8 = or i32 %v4_bfe8, %v3_bfd8
  store i32 %v5_bfe8, i32* @r4, align 4
  %v5_bfec = trunc i32 %tmp79 to i8
  %v5_bff0 = trunc i32 %tmp76 to i8
  %v4_bff4 = mul nuw nsw i32 %v1_bfc8, 256
  %v5_bff4 = or i32 %v4_bff4, %v3_bfdc
  store i32 %v5_bff4, i32* @r5, align 4
  %tmp81 = udiv i32 %v1_bfbc, 256
  %v4_bff8 = urem i32 %tmp81, 256
  %v5_bff8 = or i32 %v4_bff8, %v1_bfe0
  store i32 %v5_bff8, i32* @r7, align 4
  br i1 %v2_bfb0, label %dec_label_pc_c000, label %dec_label_pc_c328

dec_label_pc_c000:                                ; preds = %dec_label_pc_bf88
  %v3_c00036 = udiv i32 %v1_bf98, 256
  store i32 %v3_c00036, i32* %ip.global-to-local, align 4
  store i32 %v1_bfb4, i32* %r0.global-to-local, align 4
  store i32 %v1_bfc4, i32* %r1.global-to-local, align 4
  store i32 %v1_bfc8, i32* %r2.global-to-local, align 4
  %v3_c01037 = udiv i32 %v1_bfe0, 256
  store i32 %v3_c01037, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_c0b4 = sext i8 %v5_bff0 to i32
  %sext15 = mul i32 %v0_bf48, 16777216
  %v4_c0b8 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v0_bf58, 16777216
  %v4_c0d0 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_bfbc, 16777216
  %v4_c0d4 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_bf54, 16777216
  %v4_c0d8 = sdiv i32 %sext18, 16777216
  %v1_c0c0 = trunc i32 %v1_bf8c to i8
  %v1_c0e0 = trunc i32 %v4_c0d4 to i8
  br label %dec_label_pc_c02c

dec_label_pc_c02c:                                ; preds = %dec_label_pc_c02c, %dec_label_pc_c000
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_c038 = call i32 @function_12538(i32 1510, i32 1)
  store i32 %v2_c038, i32* %r0.global-to-local, align 4
  store i32 %v2_bdd8, i32* %ip.global-to-local, align 4
  %v3_c040 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c040, i32* %r2.global-to-local, align 4
  %v2_c044 = load i32, i32* @r6, align 4
  %v5_c044 = mul i32 %v2_c044, 4
  %v6_c044 = add i32 %v5_c044, %v2_bdd8
  %v7_c044 = inttoptr i32 %v6_c044 to i32*
  store i32 %v2_c038, i32* %v7_c044, align 4
  %v0_c048 = load i32, i32* %ip.global-to-local, align 4
  %v1_c048 = load i32, i32* %r2.global-to-local, align 4
  %v4_c048 = mul i32 %v1_c048, 4
  %v5_c048 = add i32 %v4_c048, %v0_c048
  %v6_c048 = inttoptr i32 %v5_c048 to i32*
  %v7_c048 = load i32, i32* %v6_c048, align 4
  store i32 %v7_c048, i32* %r1.global-to-local, align 4
  %v1_c04c = inttoptr i32 %v7_c048 to i8*
  %v2_c04c = load i8, i8* %v1_c04c, align 1
  %tmp = urem i8 %v2_c04c, 16
  %v1_c050 = zext i8 %tmp to i32
  %v1_c054 = or i32 %v1_c050, 64
  store i32 %v1_c054, i32* %r3.global-to-local, align 4
  %v1_c058 = trunc i32 %v1_c054 to i8
  store i8 %v1_c058, i8* %v1_c04c, align 1
  %v0_c05c = load i32, i32* %r1.global-to-local, align 4
  %v1_c05c = inttoptr i32 %v0_c05c to i8*
  %v2_c05c = load i8, i8* %v1_c05c, align 1
  %v3_c05c = zext i8 %v2_c05c to i32
  %v1_c060 = and i32 %v3_c05c, 240
  %v1_c064 = or i32 %v1_c060, 5
  store i32 %v1_c064, i32* %r2.global-to-local, align 4
  %v3_c06c = add i32 %v0_c05c, 9
  %v4_c06c = inttoptr i32 %v3_c06c to i8*
  store i8 17, i8* %v4_c06c, align 1
  %v0_c070 = load i32, i32* %r2.global-to-local, align 4
  %v1_c070 = trunc i32 %v0_c070 to i8
  %v2_c070 = load i32, i32* %r1.global-to-local, align 4
  %v3_c070 = inttoptr i32 %v2_c070 to i8*
  store i8 %v1_c070, i8* %v3_c070, align 1
  store i32 %v6_bdf0, i32* %r0.global-to-local, align 4
  %v2_c078 = load i32, i32* %r1.global-to-local, align 4
  %v3_c078 = add i32 %v2_c078, 1
  %v4_c078 = inttoptr i32 %v3_c078 to i8*
  store i8 %v5_be10, i8* %v4_c078, align 1
  %v2_c080 = load i32, i32* %r1.global-to-local, align 4
  %v3_c080 = add i32 %v2_c080, 8
  %v4_c080 = inttoptr i32 %v3_c080 to i8*
  store i8 %v5_be48, i8* %v4_c080, align 1
  %v3_c084 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c084, i32* %r2.global-to-local, align 4
  store i32 %v6_bee0, i32* %ip.global-to-local, align 4
  %v3_c08c = mul i32 %v3_c084, 32
  store i32 %v3_c08c, i32* %r3.global-to-local, align 4
  %v1_c090 = load i32, i32* %r1.global-to-local, align 4
  %v2_c090 = add i32 %v1_c090, 12
  %v3_c090 = inttoptr i32 %v2_c090 to i32*
  store i32 %v6_bee0, i32* %v3_c090, align 4
  %v0_c094 = load i32, i32* %r3.global-to-local, align 4
  %v1_c094 = load i32, i32* %r2.global-to-local, align 4
  %tmp83 = mul i32 %v1_c094, -8
  %v5_c094 = add i32 %v0_c094, %tmp83
  %v1_c098 = load i32, i32* @r8, align 4
  %v2_c098 = add i32 %v5_c094, %v1_c098
  store i32 %v2_c098, i32* %r3.global-to-local, align 4
  %v1_c09c = add i32 %v2_c098, 16
  %v2_c09c = inttoptr i32 %v1_c09c to i32*
  %v3_c09c = load i32, i32* %v2_c09c, align 4
  %v1_c0a0 = load i32, i32* %r1.global-to-local, align 4
  %v2_c0a0 = add i32 %v1_c0a0, 16
  %v3_c0a0 = inttoptr i32 %v2_c0a0 to i32*
  store i32 %v3_c09c, i32* %v3_c0a0, align 4
  %v0_c0a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_c0a8 = add i32 %v0_c0a8, 1
  store i32 %v1_c0a8, i32* @r6, align 4
  %v2_c0ac = load i32, i32* %r1.global-to-local, align 4
  %v3_c0ac = add i32 %v2_c0ac, 2
  %v4_c0ac = inttoptr i32 %v3_c0ac to i8*
  store i8 %v5_bfec, i8* %v4_c0ac, align 1
  store i32 %v4_c0b4, i32* %ip.global-to-local, align 4
  store i32 %v4_c0b8, i32* %r0.global-to-local, align 4
  %v0_c0bc = load i32, i32* %r1.global-to-local, align 4
  %v1_c0bc = add i32 %v0_c0bc, 20
  store i32 %v1_c0bc, i32* %r3.global-to-local, align 4
  %v3_c0c0 = add i32 %v0_c0bc, 3
  %v4_c0c0 = inttoptr i32 %v3_c0c0 to i8*
  store i8 %v1_c0c0, i8* %v4_c0c0, align 1
  %v0_c0c4 = load i32, i32* %ip.global-to-local, align 4
  %v1_c0c4 = trunc i32 %v0_c0c4 to i8
  %v2_c0c4 = load i32, i32* %r1.global-to-local, align 4
  %v3_c0c4 = add i32 %v2_c0c4, 4
  %v4_c0c4 = inttoptr i32 %v3_c0c4 to i8*
  store i8 %v1_c0c4, i8* %v4_c0c4, align 1
  %v0_c0c8 = load i32, i32* %r0.global-to-local, align 4
  %v1_c0c8 = trunc i32 %v0_c0c8 to i8
  %v2_c0c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c0c8 = add i32 %v2_c0c8, 5
  %v4_c0c8 = inttoptr i32 %v3_c0c8 to i8*
  store i8 %v1_c0c8, i8* %v4_c0c8, align 1
  %v0_c0cc = load i32, i32* @r4, align 4
  %v1_c0cc = trunc i32 %v0_c0cc to i8
  %v2_c0cc = load i32, i32* %r1.global-to-local, align 4
  %v3_c0cc = add i32 %v2_c0cc, 20
  %v4_c0cc = inttoptr i32 %v3_c0cc to i8*
  store i8 %v1_c0cc, i8* %v4_c0cc, align 1
  store i32 %v4_c0d0, i32* %r2.global-to-local, align 4
  store i32 %v4_c0d4, i32* %r1.global-to-local, align 4
  store i32 %v4_c0d8, i32* %ip.global-to-local, align 4
  %v0_c0dc = load i32, i32* @r6, align 4
  %v1_c0dc = load i32, i32* @sl, align 4
  %v9_c0dc = icmp eq i32 %v0_c0dc, %v1_c0dc
  store i1 %v9_c0dc, i1* %cpsr_z.global-to-local, align 1
  %v2_c0e0 = load i32, i32* %r3.global-to-local, align 4
  %v3_c0e0 = add i32 %v2_c0e0, 5
  %v4_c0e0 = inttoptr i32 %v3_c0e0 to i8*
  store i8 %v1_c0e0, i8* %v4_c0e0, align 1
  %v0_c0e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c0e4 = trunc i32 %v0_c0e4 to i8
  %v2_c0e4 = load i32, i32* %r3.global-to-local, align 4
  %v3_c0e4 = add i32 %v2_c0e4, 1
  %v4_c0e4 = inttoptr i32 %v3_c0e4 to i8*
  store i8 %v1_c0e4, i8* %v4_c0e4, align 1
  %v0_c0e8 = load i32, i32* @r5, align 4
  %v1_c0e8 = trunc i32 %v0_c0e8 to i8
  %v2_c0e8 = load i32, i32* %r3.global-to-local, align 4
  %v3_c0e8 = add i32 %v2_c0e8, 2
  %v4_c0e8 = inttoptr i32 %v3_c0e8 to i8*
  store i8 %v1_c0e8, i8* %v4_c0e8, align 1
  %v0_c0ec = load i32, i32* %ip.global-to-local, align 4
  %v1_c0ec = trunc i32 %v0_c0ec to i8
  %v2_c0ec = load i32, i32* %r3.global-to-local, align 4
  %v3_c0ec = add i32 %v2_c0ec, 3
  %v4_c0ec = inttoptr i32 %v3_c0ec to i8*
  store i8 %v1_c0ec, i8* %v4_c0ec, align 1
  %v0_c0f0 = load i32, i32* @r7, align 4
  %v1_c0f0 = trunc i32 %v0_c0f0 to i8
  %v2_c0f0 = load i32, i32* %r3.global-to-local, align 4
  %v3_c0f0 = add i32 %v2_c0f0, 4
  %v4_c0f0 = inttoptr i32 %v3_c0f0 to i8*
  store i8 %v1_c0f0, i8* %v4_c0f0, align 1
  %v0_c0f4 = load i32, i32* @r6, align 4
  store i32 %v0_c0f4, i32* %stack_var_-40, align 4
  %v5_c0f8 = icmp slt i32 %v0_c0dc, %v1_c0dc
  br i1 %v5_c0f8, label %dec_label_pc_c02c, label %dec_label_pc_c0fc

dec_label_pc_c0fc:                                ; preds = %dec_label_pc_c35c, %dec_label_pc_c02c, %.thread
  %v0_c0fc = load i32, i32* @sl, align 4
  %v2_c0fc = icmp eq i32 %v0_c0fc, 0
  store i1 %v2_c0fc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_c2a8 = icmp eq i32 %v3_bf4c, 65535
  %v2_c174 = icmp eq i32 %v1_becc, 0
  %v2_c13c = icmp eq i32 %v6_bee0, -1
  %v7_c13c = icmp eq i32 %v6_bee0, -1
  br label %dec_label_pc_c104.outer

dec_label_pc_c104.outer:                          ; preds = %dec_label_pc_c224, %dec_label_pc_c0fc
  %v1_c104.ph.in = phi i32 [ %v1_c218, %dec_label_pc_c224 ], [ %v0_c0fc, %dec_label_pc_c0fc ]
  %v0_c104.ph = phi i1 [ %v2_c224, %dec_label_pc_c224 ], [ %v2_c0fc, %dec_label_pc_c0fc ]
  %v1_c104.ph = icmp slt i32 %v1_c104.ph.in, 0
  %v4_c104 = or i1 %v1_c104.ph, %v0_c104.ph
  br label %dec_label_pc_c104

dec_label_pc_c104:                                ; preds = %dec_label_pc_c104.outer, %dec_label_pc_c104
  br i1 %v4_c104, label %dec_label_pc_c104, label %dec_label_pc_c108

dec_label_pc_c108:                                ; preds = %dec_label_pc_c104
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_c114

dec_label_pc_c114:                                ; preds = %dec_label_pc_c17c, %dec_label_pc_c108
  %v1_c128 = phi i32 [ %v1_c214, %dec_label_pc_c17c ], [ 0, %dec_label_pc_c108 ]
  %v5_c118 = mul i32 %v1_c128, 24
  %v1_c11c = load i32, i32* @r8, align 4
  %v2_c11c = add i32 %v1_c11c, %v5_c118
  store i32 %v2_c11c, i32* %r3.global-to-local, align 4
  store i32 %v2_bdd8, i32* %ip.global-to-local, align 4
  %v1_c124 = add i32 %v2_c11c, 20
  %v2_c124 = inttoptr i32 %v1_c124 to i8*
  %v3_c124 = load i8, i8* %v2_c124, align 1
  %v4_c124 = zext i8 %v3_c124 to i32
  store i32 %v4_c124, i32* %r2.global-to-local, align 4
  %v4_c128 = mul i32 %v1_c128, 4
  %v5_c128 = add i32 %v4_c128, %v2_bdd8
  %v6_c128 = inttoptr i32 %v5_c128 to i32*
  %v7_c128 = load i32, i32* %v6_c128, align 4
  store i32 %v7_c128, i32* @r5, align 4
  %v7_c12c = icmp eq i8 %v3_c124, 31
  store i1 %v7_c12c, i1* %cpsr_z.global-to-local, align 1
  %v1_c130 = add i32 %v7_c128, 20
  store i32 %v1_c130, i32* @r6, align 4
  %tmp84 = icmp ult i8 %v3_c124, 32
  br i1 %tmp84, label %dec_label_pc_c230, label %dec_label_pc_c138

dec_label_pc_c138:                                ; preds = %dec_label_pc_c114
  store i32 %v6_bee0, i32* %r0.global-to-local, align 4
  store i1 %v7_c13c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c13c, label %dec_label_pc_c298, label %dec_label_pc_c144

dec_label_pc_c144:                                ; preds = %dec_label_pc_c230, %dec_label_pc_c138
  store i32 %v3_bf4c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c2a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c2a8, label %dec_label_pc_c2b4, label %dec_label_pc_c158

dec_label_pc_c158:                                ; preds = %dec_label_pc_c298.dec_label_pc_c158_crit_edge, %dec_label_pc_c144
  %v1_c15c = phi i32 [ %v1_c15c.pre, %dec_label_pc_c298.dec_label_pc_c158_crit_edge ], [ 65535, %dec_label_pc_c144 ]
  store i32 %v3_bf68, i32* %r2.global-to-local, align 4
  %v9_c15c = icmp eq i32 %v3_bf68, %v1_c15c
  store i1 %v9_c15c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c15c, label %dec_label_pc_c2d0, label %dec_label_pc_c164

dec_label_pc_c164:                                ; preds = %dec_label_pc_c2b4.dec_label_pc_c164_crit_edge, %dec_label_pc_c158
  %v1_c168 = phi i32 [ %v1_c168.pre, %dec_label_pc_c2b4.dec_label_pc_c164_crit_edge ], [ %v1_c15c, %dec_label_pc_c158 ]
  store i32 %v3_bf6c, i32* %r3.global-to-local, align 4
  %v9_c168 = icmp eq i32 %v3_bf6c, %v1_c168
  store i1 %v9_c168, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c168, label %dec_label_pc_c2ec, label %dec_label_pc_c170

dec_label_pc_c170:                                ; preds = %dec_label_pc_c2d0, %dec_label_pc_c164
  store i32 %v1_becc, i32* %ip.global-to-local, align 4
  store i1 %v2_c174, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c174, label %dec_label_pc_c17c, label %dec_label_pc_c308

dec_label_pc_c17c:                                ; preds = %dec_label_pc_c170, %dec_label_pc_c2ec, %dec_label_pc_c308
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c180 = load i32, i32* @r7, align 4
  %v1_c180 = trunc i32 %v0_c180 to i8
  %v2_c180 = load i32, i32* @r5, align 4
  %v3_c180 = add i32 %v2_c180, 10
  %v4_c180 = inttoptr i32 %v3_c180 to i8*
  store i8 %v1_c180, i8* %v4_c180, align 1
  %v0_c184 = load i32, i32* @r7, align 4
  %v1_c184 = trunc i32 %v0_c184 to i8
  %v2_c184 = load i32, i32* @r5, align 4
  %v3_c184 = add i32 %v2_c184, 11
  %v4_c184 = inttoptr i32 %v3_c184 to i8*
  store i8 %v1_c184, i8* %v4_c184, align 1
  %v0_c188 = load i32, i32* @r5, align 4
  store i32 %v0_c188, i32* @r0, align 4
  %v2_c18c = call i32 @function_d0b8(i32 %v0_c188, i32 20)
  %v3_c18c = trunc i32 %v2_c18c to i8
  store i32 %v2_c18c, i32* %r0.global-to-local, align 4
  %v4_c190 = sdiv i32 %v2_c18c, 256
  store i32 %v4_c190, i32* %r3.global-to-local, align 4
  %v1_c194 = trunc i32 %v4_c190 to i8
  %v2_c194 = load i32, i32* @r5, align 4
  %v3_c194 = add i32 %v2_c194, 11
  %v4_c194 = inttoptr i32 %v3_c194 to i8*
  store i8 %v1_c194, i8* %v4_c194, align 1
  %v3_c198 = load i32, i32* @r5, align 4
  %v4_c198 = add i32 %v3_c198, 10
  %v5_c198 = inttoptr i32 %v4_c198 to i8*
  store i8 %v3_c18c, i8* %v5_c198, align 1
  %v0_c19c = load i32, i32* @r7, align 4
  %v1_c19c = trunc i32 %v0_c19c to i8
  %v2_c19c = load i32, i32* @r6, align 4
  %v3_c19c = add i32 %v2_c19c, 6
  %v4_c19c = inttoptr i32 %v3_c19c to i8*
  store i8 %v1_c19c, i8* %v4_c19c, align 1
  %v0_c1a0 = load i32, i32* @r7, align 4
  %v1_c1a0 = trunc i32 %v0_c1a0 to i8
  %v2_c1a0 = load i32, i32* @r6, align 4
  %v3_c1a0 = add i32 %v2_c1a0, 7
  %v4_c1a0 = inttoptr i32 %v3_c1a0 to i8*
  store i8 %v1_c1a0, i8* %v4_c1a0, align 1
  %v0_c1a4 = load i32, i32* @r5, align 4
  %v1_c1a4 = add i32 %v0_c1a4, 24
  %v2_c1a4 = inttoptr i32 %v1_c1a4 to i8*
  %v3_c1a4 = load i8, i8* %v2_c1a4, align 1
  %v4_c1a4 = zext i8 %v3_c1a4 to i32
  store i32 %v4_c1a4, i32* %r3.global-to-local, align 4
  %v1_c1a8 = add i32 %v0_c1a4, 25
  %v2_c1a8 = inttoptr i32 %v1_c1a8 to i8*
  %v3_c1a8 = load i8, i8* %v2_c1a8, align 1
  %v4_c1a8 = zext i8 %v3_c1a8 to i32
  %v0_c1ac = load i32, i32* @r6, align 4
  store i32 %v0_c1ac, i32* @r1, align 4
  %v4_c1b0 = mul nuw nsw i32 %v4_c1a8, 256
  %v5_c1b0 = or i32 %v4_c1b0, %v4_c1a4
  store i32 %v5_c1b0, i32* %r2.global-to-local, align 4
  store i32 %v0_c1a4, i32* %r0.global-to-local, align 4
  %v0_c1b8 = load i32, i32* @sb, align 4
  store i32 %v0_c1b8, i32* %r3.global-to-local, align 4
  %v4_c1bc = call i32 @function_d114(i32 %v0_c1a4, i32 %v0_c1ac, i32 %v5_c1b0, i32 %v0_c1b8)
  %v5_c1bc = trunc i32 %v4_c1bc to i8
  store i32 %v4_c1bc, i32* %r0.global-to-local, align 4
  %v4_c1c038 = udiv i32 %v4_c1bc, 256
  %v1_c1c4 = trunc i32 %v4_c1c038 to i8
  %v2_c1c4 = load i32, i32* @r6, align 4
  %v3_c1c4 = add i32 %v2_c1c4, 7
  %v4_c1c4 = inttoptr i32 %v3_c1c4 to i8*
  store i8 %v1_c1c4, i8* %v4_c1c4, align 1
  %v3_c1c8 = load i32, i32* @r6, align 4
  %v4_c1c8 = add i32 %v3_c1c8, 6
  %v5_c1c8 = inttoptr i32 %v4_c1c8 to i8*
  store i8 %v5_c1bc, i8* %v5_c1c8, align 1
  %v3_c1cc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c1cc, i32* %r3.global-to-local, align 4
  %v0_c1d0 = load i32, i32* @r5, align 4
  %v1_c1d0 = add i32 %v0_c1d0, 20
  %v2_c1d0 = inttoptr i32 %v1_c1d0 to i32*
  %v3_c1d0 = load i32, i32* %v2_c1d0, align 4
  %v3_c1d8 = udiv i32 %v3_c1d0, 65536
  store i32 %v3_c1d8, i32* %r2.global-to-local, align 4
  %v5_c1dc = mul i32 %v3_c1cc, 24
  %v1_c1e0 = load i32, i32* @r8, align 4
  %v2_c1e0 = add i32 %v1_c1e0, %v5_c1dc
  store i32 %v2_c1e0, i32* %ip.global-to-local, align 4
  %v3_c1e435 = udiv i32 %v3_c1d0, 16777216
  %v1_c1e8 = trunc i32 %v3_c1e435 to i8
  %v3_c1e8 = add i32 %v2_c1e0, 3
  %v4_c1e8 = inttoptr i32 %v3_c1e8 to i8*
  store i8 %v1_c1e8, i8* %v4_c1e8, align 1
  %v0_c1ec = load i32, i32* %r2.global-to-local, align 4
  %v1_c1ec = trunc i32 %v0_c1ec to i8
  %v2_c1ec = load i32, i32* %ip.global-to-local, align 4
  %v3_c1ec = add i32 %v2_c1ec, 2
  %v4_c1ec = inttoptr i32 %v3_c1ec to i8*
  store i8 %v1_c1ec, i8* %v4_c1ec, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c1f4 = load i32, i32* @r5, align 4
  store i32 %v0_c1f4, i32* %r1.global-to-local, align 4
  store i32 %v3_bef4, i32* %r0.global-to-local, align 4
  %v0_c1fc = load i32, i32* @fp, align 4
  store i32 %v0_c1fc, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c204 = load i32, i32* %ip.global-to-local, align 4
  %v6_c20c = inttoptr i32 %v0_c1f4 to i32*
  %v7_c20c = call i32 @function_121e8(i32 %v3_bef4, i32* %v6_c20c, i32 %v0_c1fc, i32 16384, i32 %v0_c204, i32 16)
  %v3_c210 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c210, i32* %r3.global-to-local, align 4
  %v1_c214 = add i32 %v3_c210, 1
  store i32 %v1_c214, i32* %r0.global-to-local, align 4
  %v1_c218 = load i32, i32* @sl, align 4
  %v9_c218 = icmp eq i32 %v1_c214, %v1_c218
  store i1 %v9_c218, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c214, i32* %stack_var_-40, align 4
  %v5_c220 = icmp slt i32 %v1_c214, %v1_c218
  br i1 %v5_c220, label %dec_label_pc_c114, label %dec_label_pc_c224

dec_label_pc_c224:                                ; preds = %dec_label_pc_c17c
  %v2_c224 = icmp eq i32 %v1_c218, 0
  store i1 %v2_c224, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_c104.outer

dec_label_pc_c230:                                ; preds = %dec_label_pc_c114
  %v1_c230 = add i32 %v2_c11c, 16
  %v2_c230 = inttoptr i32 %v1_c230 to i32*
  %v3_c230 = load i32, i32* %v2_c230, align 4
  %v0_c234 = call i32 @function_e8e4()
  store i32 %v0_c234, i32* %r0.global-to-local, align 4
  %v3_c238 = load i32, i32* %stack_var_-40, align 4
  %v5_c240 = mul i32 %v3_c238, 24
  %v1_c248 = load i32, i32* @r8, align 4
  %v2_c248 = add i32 %v1_c248, %v5_c240
  store i32 %v2_c248, i32* %r1.global-to-local, align 4
  %v1_c24c = and i32 %v3_c230, 65280
  store i32 %v1_c24c, i32* %r3.global-to-local, align 4
  %v1_c244 = udiv i32 %v3_c230, 256
  %v3_c250 = and i32 %v1_c244, 65280
  store i32 %v3_c250, i32* %r2.global-to-local, align 4
  %v3_c254 = mul i32 %v3_c230, 16777216
  store i32 %v3_c254, i32* %ip.global-to-local, align 4
  %v1_c258 = add i32 %v2_c248, 20
  %v2_c258 = inttoptr i32 %v1_c258 to i8*
  %v3_c258 = load i8, i8* %v2_c258, align 1
  %v4_c258 = zext i8 %v3_c258 to i32
  %v4_c25c = mul nuw nsw i32 %v1_c24c, 256
  %v5_c25c = or i32 %v4_c25c, %v3_c254
  store i32 %v5_c25c, i32* %ip.global-to-local, align 4
  %v2_c264 = call i32 @llvm.bswap.i32(i32 %v3_c230)
  %v7_c268 = lshr i32 %v0_c234, %v4_c258
  %v8_c268 = add i32 %v7_c268, %v2_c264
  store i32 %v8_c268, i32* %r2.global-to-local, align 4
  %v3_c274 = mul i32 %v8_c268, 16777216
  %v1_c26c = mul i32 %v8_c268, 256
  %v4_c278 = and i32 %v1_c26c, 16711680
  %v5_c278 = or i32 %v4_c278, %v3_c274
  store i32 %v5_c278, i32* %r1.global-to-local, align 4
  store i32 %v6_bee0, i32* %r0.global-to-local, align 4
  %v2_c288 = call i32 @llvm.bswap.i32(i32 %v8_c268)
  store i32 %v2_c288, i32* %r3.global-to-local, align 4
  store i1 %v7_c13c, i1* %cpsr_z.global-to-local, align 1
  %v1_c290 = load i32, i32* @r5, align 4
  %v2_c290 = add i32 %v1_c290, 16
  %v3_c290 = inttoptr i32 %v2_c290 to i32*
  store i32 %v2_c288, i32* %v3_c290, align 4
  br i1 %v2_c13c, label %dec_label_pc_c298, label %dec_label_pc_c144

dec_label_pc_c298:                                ; preds = %dec_label_pc_c230, %dec_label_pc_c138
  %v0_c298 = call i32 @function_e8e4()
  store i32 %v0_c298, i32* %r0.global-to-local, align 4
  store i32 %v3_bf4c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c2a8, i1* %cpsr_z.global-to-local, align 1
  %v1_c2ac = load i32, i32* @r5, align 4
  %v2_c2ac = add i32 %v1_c2ac, 12
  %v3_c2ac = inttoptr i32 %v2_c2ac to i32*
  store i32 %v0_c298, i32* %v3_c2ac, align 4
  br i1 %v3_c2a8, label %dec_label_pc_c2b4, label %dec_label_pc_c298.dec_label_pc_c158_crit_edge

dec_label_pc_c298.dec_label_pc_c158_crit_edge:    ; preds = %dec_label_pc_c298
  %v1_c15c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c158

dec_label_pc_c2b4:                                ; preds = %dec_label_pc_c298, %dec_label_pc_c144
  %v0_c2b4 = call i32 @function_e8e4()
  %v1_c2b4 = trunc i32 %v0_c2b4 to i8
  store i32 %v0_c2b4, i32* %r0.global-to-local, align 4
  store i32 %v3_bf68, i32* %r2.global-to-local, align 4
  %v4_c2bc = sdiv i32 %v0_c2b4, 256
  store i32 %v4_c2bc, i32* %r3.global-to-local, align 4
  %v1_c2c0 = load i32, i32* @r4, align 4
  %v9_c2c0 = icmp eq i32 %v3_bf68, %v1_c2c0
  store i1 %v9_c2c0, i1* %cpsr_z.global-to-local, align 1
  %v1_c2c4 = trunc i32 %v4_c2bc to i8
  %v2_c2c4 = load i32, i32* @r5, align 4
  %v3_c2c4 = add i32 %v2_c2c4, 5
  %v4_c2c4 = inttoptr i32 %v3_c2c4 to i8*
  store i8 %v1_c2c4, i8* %v4_c2c4, align 1
  %v3_c2c8 = load i32, i32* @r5, align 4
  %v4_c2c8 = add i32 %v3_c2c8, 4
  %v5_c2c8 = inttoptr i32 %v4_c2c8 to i8*
  store i8 %v1_c2b4, i8* %v5_c2c8, align 1
  %v0_c2cc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c2cc, label %dec_label_pc_c2d0, label %dec_label_pc_c2b4.dec_label_pc_c164_crit_edge

dec_label_pc_c2b4.dec_label_pc_c164_crit_edge:    ; preds = %dec_label_pc_c2b4
  %v1_c168.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c164

dec_label_pc_c2d0:                                ; preds = %dec_label_pc_c2b4, %dec_label_pc_c158
  %v0_c2d0 = call i32 @function_e8e4()
  %v1_c2d0 = trunc i32 %v0_c2d0 to i8
  store i32 %v0_c2d0, i32* %r0.global-to-local, align 4
  %v4_c2d4 = sdiv i32 %v0_c2d0, 256
  store i32 %v4_c2d4, i32* %r3.global-to-local, align 4
  %v3_c2d8 = load i32, i32* @r5, align 4
  %v4_c2d8 = add i32 %v3_c2d8, 20
  %v5_c2d8 = inttoptr i32 %v4_c2d8 to i8*
  store i8 %v1_c2d0, i8* %v5_c2d8, align 1
  %v0_c2dc = load i32, i32* %r3.global-to-local, align 4
  %v1_c2dc = trunc i32 %v0_c2dc to i8
  %v2_c2dc = load i32, i32* @r6, align 4
  %v3_c2dc = add i32 %v2_c2dc, 1
  %v4_c2dc = inttoptr i32 %v3_c2dc to i8*
  store i8 %v1_c2dc, i8* %v4_c2dc, align 1
  store i32 %v3_bf6c, i32* %r3.global-to-local, align 4
  %v1_c2e4 = load i32, i32* @r4, align 4
  %v9_c2e4 = icmp eq i32 %v3_bf6c, %v1_c2e4
  store i1 %v9_c2e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c2e4, label %dec_label_pc_c2ec, label %dec_label_pc_c170

dec_label_pc_c2ec:                                ; preds = %dec_label_pc_c2d0, %dec_label_pc_c164
  %v0_c2ec = call i32 @function_e8e4()
  %v1_c2ec = trunc i32 %v0_c2ec to i8
  store i32 %v0_c2ec, i32* %r0.global-to-local, align 4
  store i32 %v1_becc, i32* %ip.global-to-local, align 4
  %v4_c2f4 = sdiv i32 %v0_c2ec, 256
  store i32 %v4_c2f4, i32* %r3.global-to-local, align 4
  store i1 %v2_c174, i1* %cpsr_z.global-to-local, align 1
  %v1_c2fc = trunc i32 %v4_c2f4 to i8
  %v2_c2fc = load i32, i32* @r6, align 4
  %v3_c2fc = add i32 %v2_c2fc, 3
  %v4_c2fc = inttoptr i32 %v3_c2fc to i8*
  store i8 %v1_c2fc, i8* %v4_c2fc, align 1
  %v3_c300 = load i32, i32* @r6, align 4
  %v4_c300 = add i32 %v3_c300, 2
  %v5_c300 = inttoptr i32 %v4_c300 to i8*
  store i8 %v1_c2ec, i8* %v5_c300, align 1
  %v0_c304 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c304, label %dec_label_pc_c17c, label %dec_label_pc_c308

dec_label_pc_c308:                                ; preds = %dec_label_pc_c170, %dec_label_pc_c2ec
  %v0_c308 = load i32, i32* @r5, align 4
  %v1_c308 = add i32 %v0_c308, 28
  store i32 %v1_c308, i32* %r0.global-to-local, align 4
  store i32 %v0_bf44, i32* @r1, align 4
  %v1_c310 = inttoptr i32 %v1_c308 to i8*
  %v2_c310 = call i32 @function_ea64(i8* %v1_c310)
  store i32 %v2_c310, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c17c

dec_label_pc_c318:                                ; preds = %dec_label_pc_bf04
  store i32 %v3_bef4, i32* %r0.global-to-local, align 4
  %v1_c31c = call i32 @function_11960(i32 %v3_bef4)
  store i32 %v1_c31c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c320

dec_label_pc_c320:                                ; preds = %dec_label_pc_bdb8, %dec_label_pc_c318
  %v29_c324 = phi i32 [ %v3_bef4, %dec_label_pc_bdb8 ], [ %v1_c31c, %dec_label_pc_c318 ]
  store i32 %v18_bdb8, i32* %sb.global-to-local, align 4
  store i32 %v24_bdb8, i32* %fp.global-to-local, align 4
  ret i32 %v29_c324

dec_label_pc_c328:                                ; preds = %dec_label_pc_bf88
  %v3_c32c = sext i8 %v5_bfec to i32
  %v7_c32c = sext i8 %v5_bff0 to i32
  %v3_c330 = sdiv i32 %v3_c32c, 256
  store i32 %v3_c330, i32* %r0.global-to-local, align 4
  %v3_c334 = sdiv i32 %v7_c32c, 256
  store i32 %v3_c334, i32* %r1.global-to-local, align 4
  store i32 %v1_bfc4, i32* %r2.global-to-local, align 4
  store i32 %v1_bfc8, i32* %r3.global-to-local, align 4
  %v3_c34034 = udiv i32 %v1_bfe0, 256
  store i32 %v3_c34034, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %sext11 = mul i32 %v1_bfbc, 16777216
  %v4_c404 = sdiv i32 %sext11, 16777216
  %sext12 = mul i32 %v0_bf58, 16777216
  %v4_c408 = sdiv i32 %sext12, 16777216
  %sext13 = mul i32 %v0_bf54, 16777216
  %v4_c424 = sdiv i32 %sext13, 16777216
  %v1_c410 = trunc i32 %v3_c334 to i8
  %v1_c42c = trunc i32 %v4_c424 to i8
  br label %dec_label_pc_c35c

dec_label_pc_c35c:                                ; preds = %dec_label_pc_c35c, %dec_label_pc_c328
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_c368 = call i32 @function_12538(i32 1510, i32 1)
  store i32 %v2_c368, i32* %r0.global-to-local, align 4
  store i32 %v2_bdd8, i32* %r1.global-to-local, align 4
  %v3_c370 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c370, i32* %r2.global-to-local, align 4
  %v2_c374 = load i32, i32* @r6, align 4
  %v5_c374 = mul i32 %v2_c374, 4
  %v6_c374 = add i32 %v5_c374, %v2_bdd8
  %v7_c374 = inttoptr i32 %v6_c374 to i32*
  store i32 %v2_c368, i32* %v7_c374, align 4
  %v0_c378 = load i32, i32* %r1.global-to-local, align 4
  %v1_c378 = load i32, i32* %r2.global-to-local, align 4
  %v4_c378 = mul i32 %v1_c378, 4
  %v5_c378 = add i32 %v4_c378, %v0_c378
  %v6_c378 = inttoptr i32 %v5_c378 to i32*
  %v7_c378 = load i32, i32* %v6_c378, align 4
  store i32 %v7_c378, i32* %r1.global-to-local, align 4
  %v1_c37c = inttoptr i32 %v7_c378 to i8*
  %v2_c37c = load i8, i8* %v1_c37c, align 1
  %tmp85 = urem i8 %v2_c37c, 16
  %v1_c380 = zext i8 %tmp85 to i32
  %v1_c384 = or i32 %v1_c380, 64
  store i32 %v1_c384, i32* %r3.global-to-local, align 4
  %v1_c388 = trunc i32 %v1_c384 to i8
  store i8 %v1_c388, i8* %v1_c37c, align 1
  %v0_c38c = load i32, i32* %r1.global-to-local, align 4
  %v1_c38c = inttoptr i32 %v0_c38c to i8*
  %v2_c38c = load i8, i8* %v1_c38c, align 1
  %v3_c38c = zext i8 %v2_c38c to i32
  %v1_c390 = and i32 %v3_c38c, 240
  %v1_c394 = or i32 %v1_c390, 5
  store i32 %v1_c394, i32* %r2.global-to-local, align 4
  %v3_c39c = add i32 %v0_c38c, 9
  %v4_c39c = inttoptr i32 %v3_c39c to i8*
  store i8 17, i8* %v4_c39c, align 1
  %v0_c3a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c3a0 = trunc i32 %v0_c3a0 to i8
  %v2_c3a0 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3a0 = inttoptr i32 %v2_c3a0 to i8*
  store i8 %v1_c3a0, i8* %v3_c3a0, align 1
  %v2_c3a8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3a8 = add i32 %v2_c3a8, 1
  %v4_c3a8 = inttoptr i32 %v3_c3a8 to i8*
  store i8 %v5_be10, i8* %v4_c3a8, align 1
  store i32 %v6_be2c, i32* %r0.global-to-local, align 4
  %v2_c3b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3b0 = add i32 %v2_c3b0, 8
  %v4_c3b0 = inttoptr i32 %v3_c3b0 to i8*
  store i8 %v5_be48, i8* %v4_c3b0, align 1
  %v3_c3b4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c3b4, i32* %r2.global-to-local, align 4
  store i32 %v6_bee0, i32* %ip.global-to-local, align 4
  %v3_c3bc = mul i32 %v3_c3b4, 32
  store i32 %v3_c3bc, i32* %r3.global-to-local, align 4
  %v1_c3c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_c3c0 = add i32 %v1_c3c0, 12
  %v3_c3c0 = inttoptr i32 %v2_c3c0 to i32*
  store i32 %v6_bee0, i32* %v3_c3c0, align 4
  %v0_c3c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c3c4 = load i32, i32* %r2.global-to-local, align 4
  %tmp86 = mul i32 %v1_c3c4, -8
  %v5_c3c4 = add i32 %v0_c3c4, %tmp86
  %v1_c3c8 = load i32, i32* @r8, align 4
  %v2_c3c8 = add i32 %v5_c3c4, %v1_c3c8
  store i32 %v2_c3c8, i32* %r3.global-to-local, align 4
  %v1_c3cc = add i32 %v2_c3c8, 16
  %v2_c3cc = inttoptr i32 %v1_c3cc to i32*
  %v3_c3cc = load i32, i32* %v2_c3cc, align 4
  store i32 %v3_c3cc, i32* %ip.global-to-local, align 4
  %v1_c3d0 = add i32 %v1_c3c4, 1
  store i32 %v1_c3d0, i32* @r6, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c3dc = load i32, i32* %r1.global-to-local, align 4
  %v3_c3dc = add i32 %v2_c3dc, 6
  %v4_c3dc = inttoptr i32 %v3_c3dc to i8*
  store i8 64, i8* %v4_c3dc, align 1
  %v0_c3e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c3e0 = trunc i32 %v0_c3e0 to i8
  %v2_c3e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3e0 = add i32 %v2_c3e0, 7
  %v4_c3e0 = inttoptr i32 %v3_c3e0 to i8*
  store i8 %v1_c3e0, i8* %v4_c3e0, align 1
  %v0_c3e4 = load i32, i32* %ip.global-to-local, align 4
  %v1_c3e4 = load i32, i32* %r1.global-to-local, align 4
  %v2_c3e4 = add i32 %v1_c3e4, 16
  %v3_c3e4 = inttoptr i32 %v2_c3e4 to i32*
  store i32 %v0_c3e4, i32* %v3_c3e4, align 4
  store i32 %v3_c330, i32* %r3.global-to-local, align 4
  store i32 %v7_c32c, i32* %ip.global-to-local, align 4
  %v2_c3f4 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3f4 = add i32 %v2_c3f4, 2
  %v4_c3f4 = inttoptr i32 %v3_c3f4 to i8*
  store i8 %v5_bfec, i8* %v4_c3f4, align 1
  %v0_c3f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c3f8 = trunc i32 %v0_c3f8 to i8
  %v2_c3f8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3f8 = add i32 %v2_c3f8, 3
  %v4_c3f8 = inttoptr i32 %v3_c3f8 to i8*
  store i8 %v1_c3f8, i8* %v4_c3f8, align 1
  %v0_c3fc = load i32, i32* %ip.global-to-local, align 4
  %v1_c3fc = trunc i32 %v0_c3fc to i8
  %v2_c3fc = load i32, i32* %r1.global-to-local, align 4
  %v3_c3fc = add i32 %v2_c3fc, 4
  %v4_c3fc = inttoptr i32 %v3_c3fc to i8*
  store i8 %v1_c3fc, i8* %v4_c3fc, align 1
  store i32 %v3_c334, i32* %r2.global-to-local, align 4
  store i32 %v4_c404, i32* %r3.global-to-local, align 4
  store i32 %v4_c408, i32* %ip.global-to-local, align 4
  %v0_c40c = load i32, i32* %r1.global-to-local, align 4
  %v1_c40c = add i32 %v0_c40c, 20
  store i32 %v1_c40c, i32* %r0.global-to-local, align 4
  %v3_c410 = add i32 %v0_c40c, 5
  %v4_c410 = inttoptr i32 %v3_c410 to i8*
  store i8 %v1_c410, i8* %v4_c410, align 1
  %v0_c414 = load i32, i32* @r4, align 4
  %v1_c414 = trunc i32 %v0_c414 to i8
  %v2_c414 = load i32, i32* %r1.global-to-local, align 4
  %v3_c414 = add i32 %v2_c414, 20
  %v4_c414 = inttoptr i32 %v3_c414 to i8*
  store i8 %v1_c414, i8* %v4_c414, align 1
  %v0_c418 = load i32, i32* %r3.global-to-local, align 4
  %v1_c418 = trunc i32 %v0_c418 to i8
  %v2_c418 = load i32, i32* %r0.global-to-local, align 4
  %v3_c418 = add i32 %v2_c418, 5
  %v4_c418 = inttoptr i32 %v3_c418 to i8*
  store i8 %v1_c418, i8* %v4_c418, align 1
  %v0_c41c = load i32, i32* %ip.global-to-local, align 4
  %v1_c41c = trunc i32 %v0_c41c to i8
  %v2_c41c = load i32, i32* %r0.global-to-local, align 4
  %v3_c41c = add i32 %v2_c41c, 1
  %v4_c41c = inttoptr i32 %v3_c41c to i8*
  store i8 %v1_c41c, i8* %v4_c41c, align 1
  %v0_c420 = load i32, i32* @r5, align 4
  %v1_c420 = trunc i32 %v0_c420 to i8
  %v2_c420 = load i32, i32* %r0.global-to-local, align 4
  %v3_c420 = add i32 %v2_c420, 2
  %v4_c420 = inttoptr i32 %v3_c420 to i8*
  store i8 %v1_c420, i8* %v4_c420, align 1
  store i32 %v4_c424, i32* %r1.global-to-local, align 4
  %v0_c428 = load i32, i32* @r6, align 4
  %v1_c428 = load i32, i32* @sl, align 4
  %v9_c428 = icmp eq i32 %v0_c428, %v1_c428
  store i1 %v9_c428, i1* %cpsr_z.global-to-local, align 1
  %v2_c42c = load i32, i32* %r0.global-to-local, align 4
  %v3_c42c = add i32 %v2_c42c, 3
  %v4_c42c = inttoptr i32 %v3_c42c to i8*
  store i8 %v1_c42c, i8* %v4_c42c, align 1
  %v0_c430 = load i32, i32* @r7, align 4
  %v1_c430 = trunc i32 %v0_c430 to i8
  %v2_c430 = load i32, i32* %r0.global-to-local, align 4
  %v3_c430 = add i32 %v2_c430, 4
  %v4_c430 = inttoptr i32 %v3_c430 to i8*
  store i8 %v1_c430, i8* %v4_c430, align 1
  %v0_c434 = load i32, i32* @r6, align 4
  store i32 %v0_c434, i32* %stack_var_-40, align 4
  %v5_c438 = icmp slt i32 %v0_c428, %v1_c428
  br i1 %v5_c438, label %dec_label_pc_c35c, label %dec_label_pc_c0fc

; uselistorder directives
  uselistorder i32 %v1_c3c4, { 1, 0 }
  uselistorder i32 %v3_c334, { 2, 1, 0 }
  uselistorder i32 %v3_c330, { 1, 0 }
  uselistorder i32 %v7_c32c, { 1, 0 }
  uselistorder i32 %v4_c2f4, { 1, 0 }
  uselistorder i32 %v0_c2ec, { 0, 2, 1 }
  uselistorder i32 %v0_c2d0, { 0, 2, 1 }
  uselistorder i32 %v4_c2bc, { 1, 0 }
  uselistorder i32 %v0_c2b4, { 0, 2, 1 }
  uselistorder i32 %v2_c288, { 1, 0 }
  uselistorder i32 %v8_c268, { 2, 0, 1, 3 }
  uselistorder i32 %v3_c254, { 1, 0 }
  uselistorder i32 %v3_c230, { 1, 3, 2, 0 }
  uselistorder i1 %v2_c224, { 1, 0 }
  uselistorder i32 %v1_c218, { 1, 2, 3, 0 }
  uselistorder i32 %v1_c214, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_c1bc, { 0, 2, 1 }
  uselistorder i32 %v0_c1a4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_c190, { 1, 0 }
  uselistorder i32 %v2_c18c, { 0, 2, 1 }
  uselistorder i1 %v7_c13c, { 2, 1, 0 }
  uselistorder i1 %v3_c2a8, { 1, 0, 2, 3 }
  uselistorder i8 %v5_bfec, { 0, 2, 1 }
  uselistorder i32 %v3_bfd8, { 1, 0 }
  uselistorder i32 %v1_bfc8, { 2, 3, 0, 1 }
  uselistorder i32 %v1_bfc4, { 1, 2, 0 }
  uselistorder i32 %v1_bfbc, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v1_bfb4, { 1, 0 }
  uselistorder i32 %v1_bf8c, { 2, 1, 0, 3 }
  uselistorder i32 %v3_bf6c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v3_bf4c, { 2, 1, 4, 3, 0 }
  uselistorder i32 %v0_bf48, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v0_bf44, { 3, 0, 4, 1, 2 }
  uselistorder i32 %v3_bf38, { 3, 1, 2, 0 }
  uselistorder i1 %v7_bf24, { 1, 0 }
  uselistorder i1 %v7_bef8, { 1, 0 }
  uselistorder i32 %v3_bef4, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_bee0, { 2, 1, 7, 5, 0, 6, 4, 3 }
  uselistorder i32 %v1_becc, { 3, 1, 2, 4, 0 }
  uselistorder i32 %v1_be58, { 1, 2, 0 }
  uselistorder i32 %v6_be2c, { 2, 1, 3, 0 }
  uselistorder i32 %v6_bdf0, { 2, 1, 3, 0 }
  uselistorder i32 %v2_bdd8, { 0, 3, 1, 5, 2, 4, 6 }
  uselistorder i32 %v1_bdbc, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 14, 13 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 38, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 48, 47, 49, 50, 52, 51, 54, 53, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 10, 8, 9, 12, 11, 14, 13, 15, 16, 17, 19, 18, 21, 20, 22, 24, 23, 30, 25, 26, 27, 28, 29, 35, 31, 32, 33, 34, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32 (i8*)* @function_ea64, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32 240, { 1, 0 }
  uselistorder label %dec_label_pc_c320, { 1, 0 }
  uselistorder label %dec_label_pc_c308, { 1, 0 }
  uselistorder label %dec_label_pc_c17c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c104, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
}

define i32 @function_c444(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c444:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_c444 = load i32, i32* @r4, align 4
  %v12_c444 = load i32, i32* @r7, align 4
  %v1_c448 = urem i32 %arg1, 256
  store i32 %v1_c448, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @sl, align 4
  %v1_c45c = urem i32 %arg3, 256
  store i32 %v1_c45c, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_c464 = call i32 @function_12538(i32 %v1_c448, i32 4)
  %v0_c468 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_c474 = load i32, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_c47c = inttoptr i32 %v0_c468 to i32*
  %v6_c47c = call i32 @function_85e0(i32 %v0_c474, i32* %v5_c47c, i32 2, i32 0, i32 %v2_c464)
  %v1_c488 = urem i32 %v6_c47c, 256
  store i32 %v1_c488, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c494 = load i32, i32* @r4, align 4
  %v0_c498 = load i32, i32* @r5, align 4
  %v5_c49c = trunc i32 %v6_c47c to i8
  %v6_c4a0 = inttoptr i32 %v0_c498 to i32*
  %v7_c4a0 = call i32 @function_85e0(i32 %v0_c494, i32* %v6_c4a0, i32 3, i32 65535, i32 %v6_c47c)
  %v0_c4a4 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_c4a0, i32* @r7, align 4
  %v0_c4b4 = load i32, i32* @r4, align 4
  %v5_c4b8 = inttoptr i32 %v0_c4a4 to i32*
  %v6_c4b8 = call i32 @function_85e0(i32 %v0_c4b4, i32* %v5_c4b8, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_c4c0 = urem i32 %v6_c4b8, 256
  store i32 %v1_c4c0, i32* %ip.global-to-local, align 4
  %v0_c4c4 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c4d0 = load i32, i32* @r4, align 4
  %v5_c4d4 = trunc i32 %v6_c4b8 to i8
  %v6_c4d8 = inttoptr i32 %v0_c4c4 to i32*
  %v7_c4d8 = call i32 @function_85e0(i32 %v0_c4d0, i32* %v6_c4d8, i32 5, i32 0, i32 %v6_c4b8)
  %v1_c4e4 = urem i32 %v7_c4d8, 256
  store i32 %v1_c4e4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c4f0 = load i32, i32* @r4, align 4
  %v0_c4f4 = load i32, i32* @r5, align 4
  %v5_c4fc = inttoptr i32 %v0_c4f4 to i32*
  %v6_c4fc = call i32 @function_85e0(i32 %v0_c4f0, i32* %v5_c4fc, i32 6, i32 65535, i32 %v1_c4e4)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_c50c = load i32, i32* @r5, align 4
  store i32 %v6_c4fc, i32* @r6, align 4
  %v0_c514 = load i32, i32* @r4, align 4
  %v5_c518 = inttoptr i32 %v0_c50c to i32*
  %v6_c518 = call i32 @function_85e0(i32 %v0_c514, i32* %v5_c518, i32 7, i32 27015, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_c518, i32* @r4, align 4
  %v1_c524 = call i32 @function_10ae8(i32 22)
  %v3_c530 = call i32 @function_10a04(i32 22, i32* nonnull %stack_var_-44)
  store i32 %v3_c530, i32* %r8.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_c544 = call i32 @function_1224c(i32 2, i32 3, i32 17)
  %v7_c548 = icmp eq i32 %v3_c544, -1
  store i1 %v7_c548, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c544, i32* %fp.global-to-local, align 4
  br i1 %v7_c548, label %dec_label_pc_c8fc, label %dec_label_pc_c554

dec_label_pc_c554:                                ; preds = %dec_label_pc_c444
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c55c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c55c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c570 = call i32 @function_1221c(i32 %v3_c544, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v7_c574 = icmp eq i32 %v6_c570, -1
  store i1 %v7_c574, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c574, label %dec_label_pc_c8f4, label %dec_label_pc_c57c

dec_label_pc_c57c:                                ; preds = %dec_label_pc_c554
  %v0_c57c = load i32, i32* @r4, align 4
  %v3_c57c = mul i32 %v0_c57c, 65536
  store i32 %v3_c57c, i32* @lr, align 4
  %v0_c580 = load i32, i32* @r7, align 4
  %v0_c584 = load i32, i32* @r6, align 4
  %v3_c584 = mul i32 %v0_c584, 65536
  store i32 %v3_c584, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_c58c = urem i32 %v0_c580, 65536
  %v3_c590 = urem i32 %v0_c584, 65536
  store i32 %v3_c590, i32* %r2.global-to-local, align 4
  %v3_c594 = urem i32 %v0_c57c, 65536
  store i32 %v3_c594, i32* %r3.global-to-local, align 4
  %v0_c598 = load i32, i32* %sb.global-to-local, align 4
  %v2_c598 = icmp eq i32 %v0_c598, 0
  store i1 %v2_c598, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp50 = icmp slt i32 %v0_c598, 1
  br i1 %tmp50, label %dec_label_pc_c71c, label %dec_label_pc_c5b0

dec_label_pc_c5b0:                                ; preds = %dec_label_pc_c57c
  %v1_c5b4 = urem i32 %v0_c57c, 256
  %v1_c5b8 = urem i32 %v0_c584, 256
  %v1_c5bc = urem i32 %v0_c580, 256
  %v3_c5c0 = mul nuw nsw i32 %v1_c5b8, 256
  %v3_c5c4 = mul nuw nsw i32 %v1_c5b4, 256
  %tmp51 = udiv i32 %v0_c580, 256
  %v3_c5c8 = urem i32 %tmp51, 256
  %v4_c5cc = mul nuw nsw i32 %v1_c5bc, 256
  %v5_c5cc = or i32 %v4_c5cc, %v3_c5c8
  store i32 %v5_c5cc, i32* @r7, align 4
  %tmp52 = udiv i32 %v0_c57c, 256
  %v4_c5d0 = urem i32 %tmp52, 256
  %v5_c5d0 = or i32 %v4_c5d0, %v3_c5c4
  store i32 %v5_c5d0, i32* @r5, align 4
  %tmp53 = udiv i32 %v0_c584, 256
  %v4_c5d4 = urem i32 %tmp53, 256
  %v5_c5d4 = or i32 %v4_c5d4, %v3_c5c0
  store i32 %v5_c5d4, i32* @r6, align 4
  store i32 %v1_c5b8, i32* %r2.global-to-local, align 4
  store i32 %v1_c5b4, i32* %r3.global-to-local, align 4
  %v2_c650 = icmp eq i32 %v1_c4e4, 0
  %sext = mul i32 %v0_c580, 16777216
  %v4_c670 = sdiv i32 %sext, 16777216
  %sext6 = mul i32 %v0_c584, 16777216
  %v4_c6cc = sdiv i32 %sext6, 16777216
  %sext7 = mul i32 %v0_c57c, 16777216
  %v4_c6ec = sdiv i32 %sext7, 16777216
  br label %dec_label_pc_c5f0

dec_label_pc_c5f0:                                ; preds = %bb57, %dec_label_pc_c5b0
  %v2_c5f8 = call i32 @function_12538(i32 128, i32 1)
  store i32 %v2_c464, i32* %r2.global-to-local, align 4
  %v3_c600 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c600, i32* %r3.global-to-local, align 4
  %v2_c604 = load i32, i32* @r4, align 4
  %v5_c604 = mul i32 %v2_c604, 4
  %v6_c604 = add i32 %v5_c604, %v2_c464
  %v7_c604 = inttoptr i32 %v6_c604 to i32*
  store i32 %v2_c5f8, i32* %v7_c604, align 4
  %v0_c608 = load i32, i32* %r2.global-to-local, align 4
  %v1_c608 = load i32, i32* %r3.global-to-local, align 4
  %v4_c608 = mul i32 %v1_c608, 4
  %v5_c608 = add i32 %v4_c608, %v0_c608
  %v6_c608 = inttoptr i32 %v5_c608 to i32*
  %v7_c608 = load i32, i32* %v6_c608, align 4
  store i32 %v7_c608, i32* @lr, align 4
  %v1_c60c = inttoptr i32 %v7_c608 to i8*
  %v2_c60c = load i8, i8* %v1_c60c, align 1
  %tmp = urem i8 %v2_c60c, 16
  %v1_c610 = zext i8 %tmp to i32
  %v1_c614 = or i32 %v1_c610, 64
  store i32 %v1_c614, i32* %r3.global-to-local, align 4
  %v1_c618 = trunc i32 %v1_c614 to i8
  store i8 %v1_c618, i8* %v1_c60c, align 1
  %v0_c61c = load i32, i32* @lr, align 4
  %v1_c61c = inttoptr i32 %v0_c61c to i8*
  %v2_c61c = load i8, i8* %v1_c61c, align 1
  %v1_c620 = and i8 %v2_c61c, -16
  %v1_c624 = or i8 %v1_c620, 5
  store i8 %v1_c624, i8* %v1_c61c, align 1
  %v2_c630 = load i32, i32* @lr, align 4
  %v3_c630 = add i32 %v2_c630, 1
  %v4_c630 = inttoptr i32 %v3_c630 to i8*
  store i8 %v5_c49c, i8* %v4_c630, align 1
  %v3_c634 = load i32, i32* %stack_var_-44, align 4
  %v1_c638 = add i32 %v3_c634, 32
  %tmp54 = mul i32 %v1_c638, 256
  %v1_c644 = and i32 %tmp54, 65280
  %tmp55 = udiv i32 %v1_c638, 256
  %v4_c648 = urem i32 %tmp55, 256
  %v5_c648 = or i32 %v4_c648, %v1_c644
  store i32 %v5_c648, i32* %r2.global-to-local, align 4
  store i1 %v2_c650, i1* %cpsr_z.global-to-local, align 1
  store i32 %v6_c4b8, i32* %r3.global-to-local, align 4
  %v2_c658 = load i32, i32* @lr, align 4
  %v3_c658 = add i32 %v2_c658, 8
  %v4_c658 = inttoptr i32 %v3_c658 to i8*
  store i8 %v5_c4d4, i8* %v4_c658, align 1
  %v0_c65c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c65c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_c5f0
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c660 = load i32, i32* @lr, align 4
  %v4_c660 = add i32 %v3_c660, 6
  %v5_c660 = inttoptr i32 %v4_c660 to i8*
  store i8 64, i8* %v5_c660, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c5f0, %bb
  %v0_c664 = load i32, i32* %r2.global-to-local, align 4
  %v1_c664 = trunc i32 %v0_c664 to i8
  %v2_c664 = load i32, i32* @lr, align 4
  %v3_c664 = add i32 %v2_c664, 2
  %v4_c664 = inttoptr i32 %v3_c664 to i8*
  store i8 %v1_c664, i8* %v4_c664, align 1
  %v0_c668 = load i32, i32* %r2.global-to-local, align 4
  %v3_c668 = sdiv i32 %v0_c668, 256
  store i32 %v3_c668, i32* %ip.global-to-local, align 4
  store i32 %v4_c670, i32* %r2.global-to-local, align 4
  %v2_c674 = load i32, i32* @lr, align 4
  %v3_c674 = add i32 %v2_c674, 9
  %v4_c674 = inttoptr i32 %v3_c674 to i8*
  store i8 17, i8* %v4_c674, align 1
  store i32 ptrtoint (i32* @global_var_1c93c.50 to i32), i32* %r3.global-to-local, align 4
  %v0_c67c = load i32, i32* %r2.global-to-local, align 4
  %v1_c67c = trunc i32 %v0_c67c to i8
  %v2_c67c = load i32, i32* @lr, align 4
  %v3_c67c = add i32 %v2_c67c, 5
  %v4_c67c = inttoptr i32 %v3_c67c to i8*
  store i8 %v1_c67c, i8* %v4_c67c, align 1
  %v0_c680 = load i32, i32* %ip.global-to-local, align 4
  %v1_c680 = trunc i32 %v0_c680 to i8
  %v2_c680 = load i32, i32* @lr, align 4
  %v3_c680 = add i32 %v2_c680, 3
  %v4_c680 = inttoptr i32 %v3_c680 to i8*
  store i8 %v1_c680, i8* %v4_c680, align 1
  %v0_c684 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c684, label %.thread8, label %bb56

.thread8:                                         ; preds = %.thread
  %v3_c6889 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c6889, i32* %ip.global-to-local, align 4
  br label %bb57

bb56:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c688 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c688, i32* %ip.global-to-local, align 4
  %v3_c68c = load i32, i32* @lr, align 4
  %v4_c68c = add i32 %v3_c68c, 7
  %v5_c68c = inttoptr i32 %v4_c68c to i8*
  store i8 0, i8* %v5_c68c, align 1
  %v0_c694.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb57

bb57:                                             ; preds = %.thread8, %bb56
  %v0_c694 = phi i32 [ %v3_c6889, %.thread8 ], [ %v0_c694.pre, %bb56 ]
  %v2_c690 = load i32, i32* @global_var_1c93c.50, align 4
  store i32 %v2_c690, i32* %r2.global-to-local, align 4
  %v3_c694 = mul i32 %v0_c694, 32
  store i32 %v3_c694, i32* %r3.global-to-local, align 4
  %v1_c698 = load i32, i32* @lr, align 4
  %v2_c698 = add i32 %v1_c698, 12
  %v3_c698 = inttoptr i32 %v2_c698 to i32*
  store i32 %v2_c690, i32* %v3_c698, align 4
  %v0_c69c = load i32, i32* %r3.global-to-local, align 4
  %v1_c69c = load i32, i32* %ip.global-to-local, align 4
  %tmp60 = mul i32 %v1_c69c, -8
  %v5_c69c = add i32 %v0_c69c, %tmp60
  %v1_c6a0 = load i32, i32* @sl, align 4
  %v2_c6a0 = add i32 %v5_c69c, %v1_c6a0
  store i32 %v2_c6a0, i32* %r3.global-to-local, align 4
  %v1_c6a4 = add i32 %v2_c6a0, 16
  %v2_c6a4 = inttoptr i32 %v1_c6a4 to i32*
  %v3_c6a4 = load i32, i32* %v2_c6a4, align 4
  %v1_c6a8 = load i32, i32* @lr, align 4
  %v2_c6a8 = add i32 %v1_c6a8, 16
  %v3_c6a8 = inttoptr i32 %v2_c6a8 to i32*
  store i32 %v3_c6a4, i32* %v3_c6a8, align 4
  %v3_c6ac = load i32, i32* %stack_var_-44, align 4
  %v1_c6b0 = add i32 %v3_c6ac, 12
  %tmp58 = mul i32 %v1_c6b0, 256
  %v1_c6c0 = and i32 %tmp58, 65280
  %tmp59 = udiv i32 %v1_c6b0, 256
  %v4_c6c4 = urem i32 %tmp59, 256
  %v5_c6c4 = or i32 %v4_c6c4, %v1_c6c0
  store i32 %v5_c6c4, i32* %ip.global-to-local, align 4
  %v1_c6c8 = load i32, i32* @lr, align 4
  %v2_c6c8 = add i32 %v1_c6c8, 28
  %v3_c6c8 = inttoptr i32 %v2_c6c8 to i32*
  store i32 -1, i32* %v3_c6c8, align 4
  store i32 %v4_c6cc, i32* %r2.global-to-local, align 4
  %v0_c6d0 = load i32, i32* @lr, align 4
  %v1_c6d0 = add i32 %v0_c6d0, 20
  store i32 %v1_c6d0, i32* %r4.global-to-local, align 4
  %v0_c6d4 = load i32, i32* %ip.global-to-local, align 4
  %v3_c6d4 = sdiv i32 %v0_c6d4, 256
  store i32 %v3_c6d4, i32* %r3.global-to-local, align 4
  %v0_c6d8 = load i32, i32* @r7, align 4
  %v1_c6d8 = trunc i32 %v0_c6d8 to i8
  %v3_c6d8 = add i32 %v0_c6d0, 4
  %v4_c6d8 = inttoptr i32 %v3_c6d8 to i8*
  store i8 %v1_c6d8, i8* %v4_c6d8, align 1
  %v0_c6dc = load i32, i32* @r6, align 4
  %v1_c6dc = trunc i32 %v0_c6dc to i8
  %v2_c6dc = load i32, i32* @lr, align 4
  %v3_c6dc = add i32 %v2_c6dc, 20
  %v4_c6dc = inttoptr i32 %v3_c6dc to i8*
  store i8 %v1_c6dc, i8* %v4_c6dc, align 1
  %v0_c6e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_c6e0 = trunc i32 %v0_c6e0 to i8
  %v2_c6e0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c6e0 = add i32 %v2_c6e0, 5
  %v4_c6e0 = inttoptr i32 %v3_c6e0 to i8*
  store i8 %v1_c6e0, i8* %v4_c6e0, align 1
  %v0_c6e4 = load i32, i32* @r5, align 4
  %v1_c6e4 = trunc i32 %v0_c6e4 to i8
  %v2_c6e4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c6e4 = add i32 %v2_c6e4, 2
  %v4_c6e4 = inttoptr i32 %v3_c6e4 to i8*
  store i8 %v1_c6e4, i8* %v4_c6e4, align 1
  %v0_c6e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_c6e8 = trunc i32 %v0_c6e8 to i8
  %v2_c6e8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c6e8 = add i32 %v2_c6e8, 1
  %v4_c6e8 = inttoptr i32 %v3_c6e8 to i8*
  store i8 %v1_c6e8, i8* %v4_c6e8, align 1
  store i32 %v4_c6ec, i32* %r3.global-to-local, align 4
  %v0_c6f0 = load i32, i32* %ip.global-to-local, align 4
  %v1_c6f0 = trunc i32 %v0_c6f0 to i8
  %v2_c6f0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c6f0 = add i32 %v2_c6f0, 4
  %v4_c6f0 = inttoptr i32 %v3_c6f0 to i8*
  store i8 %v1_c6f0, i8* %v4_c6f0, align 1
  %v0_c6f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c6f4 = trunc i32 %v0_c6f4 to i8
  %v2_c6f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c6f4 = add i32 %v2_c6f4, 3
  %v4_c6f4 = inttoptr i32 %v3_c6f4 to i8*
  store i8 %v1_c6f4, i8* %v4_c6f4, align 1
  %v0_c6f8 = load i32, i32* %r8.global-to-local, align 4
  %v0_c6fc = load i32, i32* @lr, align 4
  %v1_c6fc = add i32 %v0_c6fc, 32
  %v3_c700 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c700, i32* %r2.global-to-local, align 4
  %v3_c704 = call i32 @function_1115c(i32 %v1_c6fc, i32 %v0_c6f8, i32 %v3_c700)
  %v3_c708 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c708, i32* %r3.global-to-local, align 4
  %v1_c70c = add i32 %v3_c708, 1
  store i32 %v1_c70c, i32* @r4, align 4
  %v1_c710 = load i32, i32* %sb.global-to-local, align 4
  %v9_c710 = icmp eq i32 %v1_c70c, %v1_c710
  store i1 %v9_c710, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c70c, i32* %stack_var_-40, align 4
  %v5_c718 = icmp slt i32 %v1_c70c, %v1_c710
  br i1 %v5_c718, label %dec_label_pc_c5f0, label %dec_label_pc_c71c

dec_label_pc_c71c:                                ; preds = %bb57, %dec_label_pc_c57c
  %v0_c71c = phi i32 [ %v0_c598, %dec_label_pc_c57c ], [ %v1_c710, %bb57 ]
  %v2_c71c = icmp eq i32 %v0_c71c, 0
  store i1 %v2_c71c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_c764 = icmp eq i32 %v3_c58c, 65535
  br label %dec_label_pc_c724.outer

dec_label_pc_c724.outer:                          ; preds = %dec_label_pc_c834, %dec_label_pc_c71c
  %v1_c724.ph.in = phi i32 [ %v1_c828, %dec_label_pc_c834 ], [ %v0_c71c, %dec_label_pc_c71c ]
  %v0_c724.ph = phi i1 [ %v2_c834, %dec_label_pc_c834 ], [ %v2_c71c, %dec_label_pc_c71c ]
  %v1_c724.ph = icmp slt i32 %v1_c724.ph.in, 0
  %v4_c724 = or i1 %v1_c724.ph, %v0_c724.ph
  br label %dec_label_pc_c724

dec_label_pc_c724:                                ; preds = %dec_label_pc_c724.outer, %dec_label_pc_c724
  br i1 %v4_c724, label %dec_label_pc_c724, label %dec_label_pc_c728

dec_label_pc_c728:                                ; preds = %dec_label_pc_c724
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_c734

dec_label_pc_c734:                                ; preds = %dec_label_pc_c784, %dec_label_pc_c728
  %v1_c748 = phi i32 [ %v1_c824, %dec_label_pc_c784 ], [ 0, %dec_label_pc_c728 ]
  %v5_c738 = mul i32 %v1_c748, 24
  %v1_c73c = load i32, i32* @sl, align 4
  %v2_c73c = add i32 %v1_c73c, %v5_c738
  store i32 %v2_c73c, i32* %r3.global-to-local, align 4
  %v1_c744 = add i32 %v2_c73c, 20
  %v2_c744 = inttoptr i32 %v1_c744 to i8*
  %v3_c744 = load i8, i8* %v2_c744, align 1
  %v4_c744 = zext i8 %v3_c744 to i32
  store i32 %v4_c744, i32* %r2.global-to-local, align 4
  %v4_c748 = mul i32 %v1_c748, 4
  %v5_c748 = add i32 %v4_c748, %v2_c464
  %v6_c748 = inttoptr i32 %v5_c748 to i32*
  %v7_c748 = load i32, i32* %v6_c748, align 4
  store i32 %v7_c748, i32* @r5, align 4
  %v7_c750 = icmp eq i8 %v3_c744, 31
  store i1 %v7_c750, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* %r7.global-to-local, align 4
  %v1_c758 = add i32 %v7_c748, 20
  store i32 %v1_c758, i32* @r6, align 4
  %tmp61 = icmp ult i8 %v3_c744, 32
  br i1 %tmp61, label %dec_label_pc_c840, label %dec_label_pc_c760

dec_label_pc_c760:                                ; preds = %dec_label_pc_c734
  store i32 %v3_c58c, i32* %r2.global-to-local, align 4
  store i1 %v3_c764, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c764, label %dec_label_pc_c8a8, label %dec_label_pc_c76c

dec_label_pc_c76c:                                ; preds = %dec_label_pc_c840.dec_label_pc_c76c_crit_edge, %dec_label_pc_c760
  %v1_c770 = phi i32 [ %v1_c770.pre, %dec_label_pc_c840.dec_label_pc_c76c_crit_edge ], [ 65535, %dec_label_pc_c760 ]
  store i32 %v3_c590, i32* %r3.global-to-local, align 4
  %v9_c770 = icmp eq i32 %v3_c590, %v1_c770
  store i1 %v9_c770, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c770, label %dec_label_pc_c8c4, label %dec_label_pc_c778

dec_label_pc_c778:                                ; preds = %dec_label_pc_c8a8.dec_label_pc_c778_crit_edge, %dec_label_pc_c76c
  %v1_c77c = phi i32 [ %v1_c77c.pre, %dec_label_pc_c8a8.dec_label_pc_c778_crit_edge ], [ %v1_c770, %dec_label_pc_c76c ]
  %v9_c77c = icmp eq i32 %v3_c594, %v1_c77c
  store i1 %v9_c77c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c77c, label %dec_label_pc_c8e0, label %dec_label_pc_c784

dec_label_pc_c784:                                ; preds = %dec_label_pc_c8c4, %dec_label_pc_c778, %dec_label_pc_c8e0
  %v0_c788 = load i32, i32* %r8.global-to-local, align 4
  %v1_c788 = trunc i32 %v0_c788 to i8
  %v2_c788 = load i32, i32* @r5, align 4
  %v3_c788 = add i32 %v2_c788, 10
  %v4_c788 = inttoptr i32 %v3_c788 to i8*
  store i8 %v1_c788, i8* %v4_c788, align 1
  %v0_c78c = load i32, i32* %r8.global-to-local, align 4
  %v1_c78c = trunc i32 %v0_c78c to i8
  %v2_c78c = load i32, i32* @r5, align 4
  %v3_c78c = add i32 %v2_c78c, 11
  %v4_c78c = inttoptr i32 %v3_c78c to i8*
  store i8 %v1_c78c, i8* %v4_c78c, align 1
  %v0_c790 = load i32, i32* @r5, align 4
  store i32 %v0_c790, i32* @r0, align 4
  %v2_c794 = call i32 @function_d0b8(i32 %v0_c790, i32 20)
  %v3_c794 = trunc i32 %v2_c794 to i8
  %v4_c798 = sdiv i32 %v2_c794, 256
  store i32 %v4_c798, i32* %r3.global-to-local, align 4
  %v1_c79c = trunc i32 %v4_c798 to i8
  %v2_c79c = load i32, i32* @r5, align 4
  %v3_c79c = add i32 %v2_c79c, 11
  %v4_c79c = inttoptr i32 %v3_c79c to i8*
  store i8 %v1_c79c, i8* %v4_c79c, align 1
  %v3_c7a0 = load i32, i32* @r5, align 4
  %v4_c7a0 = add i32 %v3_c7a0, 10
  %v5_c7a0 = inttoptr i32 %v4_c7a0 to i8*
  store i8 %v3_c794, i8* %v5_c7a0, align 1
  %v0_c7a4 = load i32, i32* %r8.global-to-local, align 4
  %v1_c7a4 = trunc i32 %v0_c7a4 to i8
  %v2_c7a4 = load i32, i32* @r6, align 4
  %v3_c7a4 = add i32 %v2_c7a4, 6
  %v4_c7a4 = inttoptr i32 %v3_c7a4 to i8*
  store i8 %v1_c7a4, i8* %v4_c7a4, align 1
  %v0_c7a8 = load i32, i32* %r8.global-to-local, align 4
  %v1_c7a8 = trunc i32 %v0_c7a8 to i8
  %v2_c7a8 = load i32, i32* @r6, align 4
  %v3_c7a8 = add i32 %v2_c7a8, 7
  %v4_c7a8 = inttoptr i32 %v3_c7a8 to i8*
  store i8 %v1_c7a8, i8* %v4_c7a8, align 1
  %v0_c7ac = load i32, i32* @r5, align 4
  %v1_c7ac = add i32 %v0_c7ac, 24
  %v2_c7ac = inttoptr i32 %v1_c7ac to i8*
  %v3_c7ac = load i8, i8* %v2_c7ac, align 1
  %v4_c7ac = zext i8 %v3_c7ac to i32
  store i32 %v4_c7ac, i32* %r3.global-to-local, align 4
  %v1_c7b0 = add i32 %v0_c7ac, 25
  %v2_c7b0 = inttoptr i32 %v1_c7b0 to i8*
  %v3_c7b0 = load i8, i8* %v2_c7b0, align 1
  %v4_c7b0 = zext i8 %v3_c7b0 to i32
  %v4_c7b4 = mul nuw nsw i32 %v4_c7b0, 256
  %v5_c7b4 = or i32 %v4_c7b4, %v4_c7ac
  store i32 %v5_c7b4, i32* %r2.global-to-local, align 4
  %v3_c7b8 = load i32, i32* %stack_var_-44, align 4
  %v0_c7bc = load i32, i32* @r6, align 4
  store i32 %v0_c7bc, i32* @r1, align 4
  %v1_c7c0 = add i32 %v3_c7b8, 12
  store i32 %v1_c7c0, i32* %r3.global-to-local, align 4
  %v4_c7c8 = call i32 @function_d114(i32 %v0_c7ac, i32 %v0_c7bc, i32 %v5_c7b4, i32 %v1_c7c0)
  %v5_c7c8 = trunc i32 %v4_c7c8 to i8
  %v4_c7cc24 = udiv i32 %v4_c7c8, 256
  %v1_c7d0 = trunc i32 %v4_c7cc24 to i8
  %v2_c7d0 = load i32, i32* @r6, align 4
  %v3_c7d0 = add i32 %v2_c7d0, 7
  %v4_c7d0 = inttoptr i32 %v3_c7d0 to i8*
  store i8 %v1_c7d0, i8* %v4_c7d0, align 1
  %v3_c7d4 = load i32, i32* @r6, align 4
  %v4_c7d4 = add i32 %v3_c7d4, 6
  %v5_c7d4 = inttoptr i32 %v4_c7d4 to i8*
  store i8 %v5_c7c8, i8* %v5_c7d4, align 1
  %v3_c7d8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c7d8, i32* %r3.global-to-local, align 4
  %v0_c7dc = load i32, i32* @r5, align 4
  %v1_c7dc = add i32 %v0_c7dc, 20
  %v2_c7dc = inttoptr i32 %v1_c7dc to i32*
  %v3_c7dc = load i32, i32* %v2_c7dc, align 4
  %v5_c7e4 = mul i32 %v3_c7d8, 24
  %v1_c7e8 = load i32, i32* @sl, align 4
  %v2_c7e8 = add i32 %v1_c7e8, %v5_c7e4
  store i32 %v2_c7e8, i32* %ip.global-to-local, align 4
  %v3_c7ec = udiv i32 %v3_c7dc, 65536
  store i32 %v3_c7ec, i32* %r2.global-to-local, align 4
  %v1_c7f0 = trunc i32 %v3_c7ec to i8
  %v3_c7f0 = add i32 %v2_c7e8, 2
  %v4_c7f0 = inttoptr i32 %v3_c7f0 to i8*
  store i8 %v1_c7f0, i8* %v4_c7f0, align 1
  %v0_c7f4 = load i32, i32* %r2.global-to-local, align 4
  %v3_c7f425 = udiv i32 %v0_c7f4, 256
  %v3_c7f8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c7f8, i32* %r2.global-to-local, align 4
  %v1_c7fc = trunc i32 %v3_c7f425 to i8
  %v2_c7fc = load i32, i32* %ip.global-to-local, align 4
  %v3_c7fc = add i32 %v2_c7fc, 3
  %v4_c7fc = inttoptr i32 %v3_c7fc to i8*
  store i8 %v1_c7fc, i8* %v4_c7fc, align 1
  %v0_c800 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c808 = load i32, i32* %r2.global-to-local, align 4
  %v1_c808 = add i32 %v0_c808, 32
  store i32 %v1_c808, i32* %r2.global-to-local, align 4
  %v0_c80c = load i32, i32* %fp.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c814 = load i32, i32* %ip.global-to-local, align 4
  %v6_c81c = inttoptr i32 %v0_c800 to i32*
  %v7_c81c = call i32 @function_121e8(i32 %v0_c80c, i32* %v6_c81c, i32 %v1_c808, i32 16384, i32 %v0_c814, i32 16)
  %v3_c820 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c820, i32* %r3.global-to-local, align 4
  %v1_c824 = add i32 %v3_c820, 1
  %v1_c828 = load i32, i32* %sb.global-to-local, align 4
  %v9_c828 = icmp eq i32 %v1_c824, %v1_c828
  store i1 %v9_c828, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c824, i32* %stack_var_-40, align 4
  %v5_c830 = icmp slt i32 %v1_c824, %v1_c828
  br i1 %v5_c830, label %dec_label_pc_c734, label %dec_label_pc_c834

dec_label_pc_c834:                                ; preds = %dec_label_pc_c784
  %v2_c834 = icmp eq i32 %v1_c828, 0
  store i1 %v2_c834, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_c724.outer

dec_label_pc_c840:                                ; preds = %dec_label_pc_c734
  %v1_c840 = add i32 %v2_c73c, 16
  %v2_c840 = inttoptr i32 %v1_c840 to i32*
  %v3_c840 = load i32, i32* %v2_c840, align 4
  store i32 %v3_c840, i32* @r4, align 4
  %v0_c844 = call i32 @function_e8e4()
  %v3_c848 = load i32, i32* %stack_var_-40, align 4
  %v5_c850 = mul i32 %v3_c848, 24
  %v0_c854 = load i32, i32* @r4, align 4
  %v1_c858 = and i32 %v0_c854, 65280
  store i32 %v1_c858, i32* %r3.global-to-local, align 4
  %v1_c854 = udiv i32 %v0_c854, 256
  %v3_c85c = and i32 %v1_c854, 65280
  store i32 %v3_c85c, i32* %r2.global-to-local, align 4
  %v1_c860 = load i32, i32* @sl, align 4
  %v2_c860 = add i32 %v1_c860, %v5_c850
  store i32 %v2_c860, i32* %ip.global-to-local, align 4
  %v1_c86c = add i32 %v2_c860, 20
  %v2_c86c = inttoptr i32 %v1_c86c to i8*
  %v3_c86c = load i8, i8* %v2_c86c, align 1
  %v4_c86c = zext i8 %v3_c86c to i32
  %v2_c874 = call i32 @llvm.bswap.i32(i32 %v0_c854)
  %v7_c878 = lshr i32 %v0_c844, %v4_c86c
  %v8_c878 = add i32 %v7_c878, %v2_c874
  store i32 %v3_c58c, i32* %r2.global-to-local, align 4
  %v2_c898 = call i32 @llvm.bswap.i32(i32 %v8_c878)
  store i32 %v2_c898, i32* %r3.global-to-local, align 4
  %v1_c89c = load i32, i32* %r7.global-to-local, align 4
  %v9_c89c = icmp eq i32 %v3_c58c, %v1_c89c
  store i1 %v9_c89c, i1* %cpsr_z.global-to-local, align 1
  %v1_c8a0 = load i32, i32* @r5, align 4
  %v2_c8a0 = add i32 %v1_c8a0, 16
  %v3_c8a0 = inttoptr i32 %v2_c8a0 to i32*
  store i32 %v2_c898, i32* %v3_c8a0, align 4
  br i1 %v9_c89c, label %dec_label_pc_c8a8, label %dec_label_pc_c840.dec_label_pc_c76c_crit_edge

dec_label_pc_c840.dec_label_pc_c76c_crit_edge:    ; preds = %dec_label_pc_c840
  %v1_c770.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_c76c

dec_label_pc_c8a8:                                ; preds = %dec_label_pc_c840, %dec_label_pc_c760
  %v0_c8a8 = call i32 @function_e8e4()
  %v1_c8a8 = trunc i32 %v0_c8a8 to i8
  %v4_c8ac26 = udiv i32 %v0_c8a8, 256
  %v1_c8b0 = trunc i32 %v4_c8ac26 to i8
  %v2_c8b0 = load i32, i32* @r5, align 4
  %v3_c8b0 = add i32 %v2_c8b0, 5
  %v4_c8b0 = inttoptr i32 %v3_c8b0 to i8*
  store i8 %v1_c8b0, i8* %v4_c8b0, align 1
  store i32 %v3_c590, i32* %r3.global-to-local, align 4
  %v1_c8b8 = load i32, i32* %r7.global-to-local, align 4
  %v9_c8b8 = icmp eq i32 %v3_c590, %v1_c8b8
  store i1 %v9_c8b8, i1* %cpsr_z.global-to-local, align 1
  %v3_c8bc = load i32, i32* @r5, align 4
  %v4_c8bc = add i32 %v3_c8bc, 4
  %v5_c8bc = inttoptr i32 %v4_c8bc to i8*
  store i8 %v1_c8a8, i8* %v5_c8bc, align 1
  %v0_c8c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c8c0, label %dec_label_pc_c8c4, label %dec_label_pc_c8a8.dec_label_pc_c778_crit_edge

dec_label_pc_c8a8.dec_label_pc_c778_crit_edge:    ; preds = %dec_label_pc_c8a8
  %v1_c77c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_c778

dec_label_pc_c8c4:                                ; preds = %dec_label_pc_c8a8, %dec_label_pc_c76c
  %v0_c8c4 = call i32 @function_e8e4()
  %v1_c8c4 = trunc i32 %v0_c8c4 to i8
  %v4_c8cc = sdiv i32 %v0_c8c4, 256
  store i32 %v4_c8cc, i32* %r3.global-to-local, align 4
  %v1_c8d0 = load i32, i32* %r7.global-to-local, align 4
  %v9_c8d0 = icmp eq i32 %v3_c594, %v1_c8d0
  store i1 %v9_c8d0, i1* %cpsr_z.global-to-local, align 1
  %v3_c8d4 = load i32, i32* @r5, align 4
  %v4_c8d4 = add i32 %v3_c8d4, 20
  %v5_c8d4 = inttoptr i32 %v4_c8d4 to i8*
  store i8 %v1_c8c4, i8* %v5_c8d4, align 1
  %v0_c8d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c8d8 = trunc i32 %v0_c8d8 to i8
  %v2_c8d8 = load i32, i32* @r6, align 4
  %v3_c8d8 = add i32 %v2_c8d8, 1
  %v4_c8d8 = inttoptr i32 %v3_c8d8 to i8*
  store i8 %v1_c8d8, i8* %v4_c8d8, align 1
  %v0_c8dc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c8dc, label %dec_label_pc_c8e0, label %dec_label_pc_c784

dec_label_pc_c8e0:                                ; preds = %dec_label_pc_c8c4, %dec_label_pc_c778
  %v0_c8e0 = call i32 @function_e8e4()
  %v1_c8e0 = trunc i32 %v0_c8e0 to i8
  %v4_c8e4 = sdiv i32 %v0_c8e0, 256
  store i32 %v4_c8e4, i32* %r3.global-to-local, align 4
  %v1_c8e8 = trunc i32 %v4_c8e4 to i8
  %v2_c8e8 = load i32, i32* @r6, align 4
  %v3_c8e8 = add i32 %v2_c8e8, 3
  %v4_c8e8 = inttoptr i32 %v3_c8e8 to i8*
  store i8 %v1_c8e8, i8* %v4_c8e8, align 1
  %v3_c8ec = load i32, i32* @r6, align 4
  %v4_c8ec = add i32 %v3_c8ec, 2
  %v5_c8ec = inttoptr i32 %v4_c8ec to i8*
  store i8 %v1_c8e0, i8* %v5_c8ec, align 1
  br label %dec_label_pc_c784

dec_label_pc_c8f4:                                ; preds = %dec_label_pc_c554
  %v0_c8f4 = load i32, i32* %fp.global-to-local, align 4
  %v1_c8f8 = call i32 @function_11960(i32 %v0_c8f4)
  br label %dec_label_pc_c8fc

dec_label_pc_c8fc:                                ; preds = %dec_label_pc_c444, %dec_label_pc_c8f4
  %v29_c900 = phi i32 [ %v3_c544, %dec_label_pc_c444 ], [ %v1_c8f8, %dec_label_pc_c8f4 ]
  store i32 %v3_c444, i32* %r4.global-to-local, align 4
  store i32 %v12_c444, i32* %r7.global-to-local, align 4
  ret i32 %v29_c900

; uselistorder directives
  uselistorder i32 %v4_c8e4, { 1, 0 }
  uselistorder i32 %v2_c898, { 1, 0 }
  uselistorder i32 %v0_c854, { 1, 0, 2 }
  uselistorder i1 %v2_c834, { 1, 0 }
  uselistorder i32 %v1_c828, { 1, 2, 3, 0 }
  uselistorder i32 %v1_c824, { 2, 0, 3, 1 }
  uselistorder i32 %v3_c7ec, { 1, 0 }
  uselistorder i32 %v4_c798, { 1, 0 }
  uselistorder i1 %v3_c764, { 1, 0 }
  uselistorder i32 %v1_c70c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_c6b0, { 1, 0 }
  uselistorder i32 %v1_c638, { 1, 0 }
  uselistorder i32 %v1_c5b8, { 1, 0 }
  uselistorder i32 %v1_c5b4, { 1, 0 }
  uselistorder i32 %v0_c584, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_c57c, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_c574, { 1, 0 }
  uselistorder i1 %v7_c548, { 1, 0 }
  uselistorder i32 %v3_c544, { 1, 2, 3, 0 }
  uselistorder i32 %v1_c4e4, { 1, 2, 0 }
  uselistorder i32 %v6_c4b8, { 2, 1, 3, 0 }
  uselistorder i32 %v6_c47c, { 1, 2, 0 }
  uselistorder i32 %v1_c448, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 1, 13, 12 }
  uselistorder i32* %r7.global-to-local, { 6, 2, 0, 3, 1, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 39, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 0, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %fp.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c8fc, { 1, 0 }
  uselistorder label %dec_label_pc_c784, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c724, { 1, 0 }
  uselistorder label %bb57, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c908(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c908:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_c908 = load i32, i32* @r4, align 4
  %v15_c908 = load i32, i32* @r8, align 4
  %v18_c908 = load i32, i32* @sb, align 4
  %v21_c908 = load i32, i32* @sl, align 4
  %v24_c908 = load i32, i32* @fp, align 4
  %v1_c914 = urem i32 %arg1, 256
  store i32 %v1_c914, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_c920 = urem i32 %arg3, 256
  store i32 %v1_c920, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_c92c = call i32 @function_12538(i32 %v1_c914, i32 4)
  %v0_c930 = load i32, i32* @r5, align 4
  store i32 %v0_c930, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_c93c = load i32, i32* @r4, align 4
  store i32 %v0_c93c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_c944 = inttoptr i32 %v0_c930 to i32*
  %v6_c944 = call i32 @function_85e0(i32 %v0_c93c, i32* %v5_c944, i32 2, i32 0, i32 %v2_c92c)
  %v1_c950 = urem i32 %v6_c944, 256
  store i32 %v1_c950, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c95c = load i32, i32* @r4, align 4
  store i32 %v0_c95c, i32* %r0.global-to-local, align 4
  %v0_c960 = load i32, i32* @r5, align 4
  store i32 %v0_c960, i32* %r1.global-to-local, align 4
  %v5_c964 = trunc i32 %v6_c944 to i8
  %v6_c968 = inttoptr i32 %v0_c960 to i32*
  %v7_c968 = call i32 @function_85e0(i32 %v0_c95c, i32* %v6_c968, i32 3, i32 65535, i32 %v6_c944)
  %v0_c96c = load i32, i32* @r5, align 4
  store i32 %v0_c96c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_c978 = load i32, i32* @r4, align 4
  store i32 %v0_c978, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_c980 = inttoptr i32 %v0_c96c to i32*
  %v6_c980 = call i32 @function_85e0(i32 %v0_c978, i32* %v5_c980, i32 4, i32 64, i32 %v7_c968)
  %v1_c988 = urem i32 %v6_c980, 256
  store i32 %v1_c988, i32* %ip.global-to-local, align 4
  %v0_c98c = load i32, i32* @r5, align 4
  store i32 %v0_c98c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c998 = load i32, i32* @r4, align 4
  store i32 %v0_c998, i32* %r0.global-to-local, align 4
  %sext35 = mul i32 %v6_c980, 16777216
  %v5_c9a0 = sdiv i32 %sext35, 16777216
  %v6_c9a0 = inttoptr i32 %v0_c98c to i32*
  %v7_c9a0 = call i32 @function_85e0(i32 %v0_c998, i32* %v6_c9a0, i32 5, i32 0, i32 %v5_c9a0)
  %v1_c9ac = urem i32 %v7_c9a0, 256
  store i32 %v1_c9ac, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c9b8 = load i32, i32* @r4, align 4
  store i32 %v0_c9b8, i32* %r0.global-to-local, align 4
  %v0_c9bc = load i32, i32* @r5, align 4
  store i32 %v0_c9bc, i32* %r1.global-to-local, align 4
  %v5_c9c4 = inttoptr i32 %v0_c9bc to i32*
  %v6_c9c4 = call i32 @function_85e0(i32 %v0_c9b8, i32* %v5_c9c4, i32 6, i32 65535, i32 %v1_c9ac)
  %v0_c9c8 = load i32, i32* @r5, align 4
  store i32 %v0_c9c8, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  store i32 %v6_c9c4, i32* %fp.global-to-local, align 4
  %v0_c9d8 = load i32, i32* @r4, align 4
  store i32 %v0_c9d8, i32* %r0.global-to-local, align 4
  %v5_c9dc = inttoptr i32 %v0_c9c8 to i32*
  %v6_c9dc = call i32 @function_85e0(i32 %v0_c9d8, i32* %v5_c9dc, i32 7, i32 53, i32 ptrtoint (i32* @0 to i32))
  %v0_c9e4 = load i32, i32* @r5, align 4
  store i32 %v0_c9e4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 %v6_c9dc, i32* %sb.global-to-local, align 4
  %v0_c9f4 = load i32, i32* @r4, align 4
  store i32 %v0_c9f4, i32* %r0.global-to-local, align 4
  %v5_c9f8 = inttoptr i32 %v0_c9e4 to i32*
  %v6_c9f8 = call i32 @function_85e0(i32 %v0_c9f4, i32* %v5_c9f8, i32 9, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_c9fc = load i32, i32* @r5, align 4
  store i32 %v0_c9fc, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 %v6_c9f8, i32* @sl, align 4
  %v0_ca0c = load i32, i32* @r4, align 4
  store i32 %v0_ca0c, i32* %r0.global-to-local, align 4
  %v5_ca10 = inttoptr i32 %v0_c9fc to i32*
  %v6_ca10 = call i32 @function_85e0(i32 %v0_ca0c, i32* %v5_ca10, i32 0, i32 12, i32 ptrtoint (i32* @0 to i32))
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ca1c = load i32, i32* @r5, align 4
  store i32 %v0_ca1c, i32* %r1.global-to-local, align 4
  store i32 %v6_ca10, i32* %r8.global-to-local, align 4
  %v0_ca24 = load i32, i32* @r4, align 4
  store i32 %v0_ca24, i32* %r0.global-to-local, align 4
  %v4_ca28 = inttoptr i32 %v0_ca1c to i32*
  %v5_ca28 = call i32 @function_81cc(i32 %v0_ca24, i32* %v4_ca28, i32 8, i32 0)
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_ca34 = call i32 @function_10ae8(i32 23)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r0.global-to-local, align 4
  %v3_ca40 = call i32 @function_10a04(i32 23, i32* null)
  store i32 %v3_ca40, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_ca48 = inttoptr i32 %v3_ca40 to i8*
  %v3_ca48 = call i32 @function_11a8c(i8* %v2_ca48, i32 0)
  store i32 %v3_ca48, i32* @r4, align 4
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_ca54 = call i32 @function_10a30(i32 23)
  store i32 %v1_ca54, i32* %r0.global-to-local, align 4
  %v0_ca58 = load i32, i32* @r4, align 4
  %v1_ca58 = icmp slt i32 %v0_ca58, 0
  %v2_ca58 = icmp eq i32 %v0_ca58, 0
  store i1 %v2_ca58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_ca58, label %dec_label_pc_d024, label %dec_label_pc_ca60

dec_label_pc_ca60:                                ; preds = %dec_label_pc_c908
  %v2_ca64 = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_ca64, i32* @r6, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_ca64, i32* %r1.global-to-local, align 4
  store i32 %v0_ca58, i32* %r0.global-to-local, align 4
  %v4_ca74 = call i32 @function_11b28(i32 %v0_ca58, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_ca74, i32* @r5, align 4
  %v0_ca7c = load i32, i32* @r4, align 4
  store i32 %v0_ca7c, i32* %r0.global-to-local, align 4
  %v1_ca80 = call i32 @function_11960(i32 %v0_ca7c)
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_ca88 = call i32 @function_10ae8(i32 24)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v3_ca94 = call i32 @function_10a04(i32 24, i32* null)
  %v0_ca98 = load i32, i32* @r5, align 4
  store i32 %v0_ca98, i32* @r1, align 4
  store i32 %v3_ca94, i32* %r2.global-to-local, align 4
  store i32 %v2_ca64, i32* %r0.global-to-local, align 4
  %v3_caa4 = bitcast i32* %stack_var_-2120 to i8*
  %v4_caa4 = call i32 @function_11434(i8* %v3_caa4, i32 %v0_ca98, i32 %v3_ca94)
  store i32 %v4_caa4, i32* @r4, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_cab0 = call i32 @function_10a30(i32 24)
  store i32 %v1_cab0, i32* %r0.global-to-local, align 4
  %v0_cab4 = load i32, i32* @r4, align 4
  %v7_cab4 = icmp eq i32 %v0_cab4, -1
  store i1 %v7_cab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cab4, label %dec_label_pc_d024, label %dec_label_pc_cabc

dec_label_pc_cabc:                                ; preds = %dec_label_pc_ca60
  %v0_cabc = load i32, i32* @r5, align 4
  %v9_cabc = icmp eq i32 %v0_cabc, %v0_cab4
  store i1 %v9_cabc, i1* %cpsr_z.global-to-local, align 1
  %v7_cac0 = icmp sgt i32 %v0_cabc, %v0_cab4
  br i1 %v7_cac0, label %dec_label_pc_cac4, label %dec_label_pc_d024

dec_label_pc_cac4:                                ; preds = %dec_label_pc_cabc
  store i32 %v0_cabc, i32* %r3.global-to-local, align 4
  store i32 %v0_cab4, i32* %r2.global-to-local, align 4
  %v0_cad4 = load i32, i32* @r6, align 4
  %v2_cad4 = add i32 %v0_cad4, %v0_cab4
  store i32 %v2_cad4, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_cadc = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_cadc, i32* @r7, align 4
  %v1_cb0c = add i32 %v0_cabc, -1
  br label %dec_label_pc_cb04

dec_label_pc_cae8:                                ; preds = %dec_label_pc_cb2c, %bb138
  %v9_cae8 = icmp eq i32 %v0_caf4, %v1_cb0c
  store i1 %v9_cae8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cae8, label %dec_label_pc_cb38, label %dec_label_pc_caf0

dec_label_pc_caf0:                                ; preds = %dec_label_pc_cb1c, %dec_label_pc_cae8, %bb
  %v0_cb2842 = phi i32 [ %v0_cb28, %dec_label_pc_cb1c ], [ %v0_cb2843, %dec_label_pc_cae8 ], [ %v0_cb28, %bb ]
  %v0_cb0838 = phi i32 [ 0, %dec_label_pc_cb1c ], [ %v0_cb0839, %dec_label_pc_cae8 ], [ 0, %bb ]
  store i32 %v0_cabc, i32* %r0.global-to-local, align 4
  %v1_caf4 = add i32 %v0_caf4, 1
  store i32 %v1_caf4, i32* %r2.global-to-local, align 4
  %v9_caf8 = icmp eq i32 %v0_cabc, %v1_caf4
  store i1 %v9_caf8, i1* %cpsr_z.global-to-local, align 1
  %v1_cafc = add i32 %v0_cafc, 1
  store i32 %v1_cafc, i32* @r7, align 4
  br i1 %v9_caf8, label %dec_label_pc_d024, label %dec_label_pc_cb04

dec_label_pc_cb04:                                ; preds = %dec_label_pc_caf0, %dec_label_pc_cac4
  %v0_cafc = phi i32 [ %v1_cafc, %dec_label_pc_caf0 ], [ %v2_cadc, %dec_label_pc_cac4 ]
  %v0_caf4 = phi i32 [ %v1_caf4, %dec_label_pc_caf0 ], [ %v0_cab4, %dec_label_pc_cac4 ]
  %v0_cb28 = phi i32 [ %v0_cb2842, %dec_label_pc_caf0 ], [ 0, %dec_label_pc_cac4 ]
  %v0_cb08 = phi i32 [ %v0_cb0838, %dec_label_pc_caf0 ], [ 0, %dec_label_pc_cac4 ]
  %v0_cb10 = phi i32 [ %v1_cb10, %dec_label_pc_caf0 ], [ %v2_cad4, %dec_label_pc_cac4 ]
  %v1_cb04 = inttoptr i32 %v0_cb10 to i8*
  %v2_cb04 = load i8, i8* %v1_cb04, align 1
  %v3_cb04 = zext i8 %v2_cb04 to i32
  store i32 %v3_cb04, i32* %r3.global-to-local, align 4
  %v2_cb08 = icmp eq i32 %v0_cb08, 0
  store i1 %v2_cb08, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cb0c, i32* %ip.global-to-local, align 4
  %v1_cb10 = add i32 %v0_cb10, 1
  store i32 %v1_cb10, i32* %r1.global-to-local, align 4
  %v1_cb14 = add nsw i32 %v3_cb04, -48
  store i32 %v1_cb14, i32* %r0.global-to-local, align 4
  br i1 %v2_cb08, label %dec_label_pc_cb1c, label %dec_label_pc_cb2c

dec_label_pc_cb1c:                                ; preds = %dec_label_pc_cb04
  %v7_cb1c = icmp eq i8 %v2_cb04, 9
  store i1 %v7_cb1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cb1c, label %dec_label_pc_caf0, label %bb

bb:                                               ; preds = %dec_label_pc_cb1c
  %v8_cb20 = icmp eq i8 %v2_cb04, 32
  store i1 %v8_cb20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_cb20, label %dec_label_pc_caf0, label %dec_label_pc_cb28

dec_label_pc_cb28:                                ; preds = %bb
  %v1_cb28 = add i32 %v0_cb28, 1
  store i32 %v1_cb28, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_cb2c

dec_label_pc_cb2c:                                ; preds = %dec_label_pc_cb04, %dec_label_pc_cb28
  %v0_cb2843 = phi i32 [ %v0_cb28, %dec_label_pc_cb04 ], [ %v1_cb28, %dec_label_pc_cb28 ]
  %v0_cb0839 = phi i32 [ %v0_cb08, %dec_label_pc_cb04 ], [ %v1_cb28, %dec_label_pc_cb28 ]
  %v7_cb2c = icmp eq i8 %v2_cb04, 46
  store i1 %v7_cb2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cb2c, label %dec_label_pc_cae8, label %bb138

bb138:                                            ; preds = %dec_label_pc_cb2c
  %v8_cb30 = icmp eq i32 %v1_cb14, 9
  store i1 %v8_cb30, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_cb14, 10
  br i1 %tmp, label %dec_label_pc_cae8, label %dec_label_pc_cb38

dec_label_pc_cb38:                                ; preds = %dec_label_pc_cae8, %bb138
  %v0_caf4.lcssa = phi i32 [ %v1_cb0c, %dec_label_pc_cae8 ], [ %v0_caf4, %bb138 ]
  %v2_cb3c = sub i32 %v0_caf4.lcssa, %v0_cab4
  store i32 %v2_cb3c, i32* %r2.global-to-local, align 4
  store i32 %v2_cad4, i32* %r1.global-to-local, align 4
  store i32 %v2_cadc, i32* %r0.global-to-local, align 4
  %v3_cb48 = call i32 @function_1115c(i32 %v2_cadc, i32 %v2_cad4, i32 %v2_cb3c)
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_cadc, i32* @r0, align 4
  %v2_cb58 = load i32, i32* @r7, align 4
  %v3_cb58 = inttoptr i32 %v2_cb58 to i8*
  store i8 0, i8* %v3_cb58, align 1
  %v1_cb5c = call i32 @function_1202c(i32 %v2_cadc)
  store i32 %v1_cb5c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_cb64

dec_label_pc_cb6419:                              ; preds = %dec_label_pc_d024
  unreachable

dec_label_pc_cb64:                                ; preds = %dec_label_pc_d09c, %dec_label_pc_d08c, %dec_label_pc_d080, %dec_label_pc_d06c, %dec_label_pc_cb38
  %v29_d06874 = phi i32 [ %v1_d028, %dec_label_pc_d09c ], [ %v1_d028, %dec_label_pc_d08c ], [ %v1_d028, %dec_label_pc_d080 ], [ %v1_d028, %dec_label_pc_d06c ], [ %v1_cb5c, %dec_label_pc_cb38 ]
  %stack_var_-2176.0 = phi i32 [ 33686020, %dec_label_pc_d09c ], [ 104859200, %dec_label_pc_d08c ], [ 707416650, %dec_label_pc_d080 ], [ 134744072, %dec_label_pc_d06c ], [ %v1_cb5c, %dec_label_pc_cb38 ]
  store i32 %v5_ca28, i32* %ip.global-to-local, align 4
  %v2_cb68 = icmp eq i32 %v5_ca28, 0
  store i1 %v2_cb68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_cb68, label %dec_label_pc_d060, label %dec_label_pc_cb70

dec_label_pc_cb70:                                ; preds = %dec_label_pc_cb64
  store i32 %v5_ca28, i32* %r0.global-to-local, align 4
  %v1_cb74 = inttoptr i32 %v5_ca28 to i8*
  %v2_cb74 = call i32 @function_110e0(i8* %v1_cb74)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_cb88 = call i32 @function_1224c(i32 2, i32 3, i32 17)
  store i32 %v3_cb88, i32* %r0.global-to-local, align 4
  %v7_cb8c = icmp eq i32 %v3_cb88, -1
  store i1 %v7_cb8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cb8c, label %dec_label_pc_d060, label %dec_label_pc_cb98

dec_label_pc_cb98:                                ; preds = %dec_label_pc_cb70
  store i32 1, i32* %stack_var_-40, align 4
  %v6_cba4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_cba4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_cbb8 = call i32 @function_1221c(i32 %v3_cb88, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_cbb8, i32* %r0.global-to-local, align 4
  %v7_cbbc = icmp eq i32 %v6_cbb8, -1
  store i1 %v7_cbbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cbbc, label %dec_label_pc_d058, label %dec_label_pc_cbc4

dec_label_pc_cbc4:                                ; preds = %dec_label_pc_cb98
  store i32 %v1_c914, i32* %r0.global-to-local, align 4
  %v3_cbcc = mul i32 %v7_c968, 65536
  store i32 %v3_cbcc, i32* %lr.global-to-local, align 4
  %v0_cbd0 = load i32, i32* @sl, align 4
  %v3_cbd0 = mul i32 %v0_cbd0, 65536
  store i32 %v3_cbd0, i32* %sl.global-to-local, align 4
  %v0_cbd4 = load i32, i32* %r8.global-to-local, align 4
  %v0_cbd8 = load i32, i32* %fp.global-to-local, align 4
  %v0_cbdc = load i32, i32* %sb.global-to-local, align 4
  %v3_cbdc = mul i32 %v0_cbdc, 65536
  store i32 %v3_cbdc, i32* %sb.global-to-local, align 4
  %v5_cbe0 = trunc i32 %v0_cbd4 to i8
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_cbe8 = urem i32 %v7_c968, 65536
  store i32 %v3_cbe8, i32* %r2.global-to-local, align 4
  %v3_cbec = urem i32 %v0_cbd8, 65536
  store i32 %v3_cbec, i32* %r3.global-to-local, align 4
  %v3_cbf0 = urem i32 %v0_cbdc, 65536
  store i32 %v3_cbf0, i32* %r4.global-to-local, align 4
  %v3_cbf4 = urem i32 %v0_cbd0, 65536
  store i32 %v3_cbf4, i32* %r8.global-to-local, align 4
  %v2_cbf8 = icmp eq i32 %v1_c914, 0
  store i1 %v2_cbf8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_cbf8, label %dec_label_pc_d048, label %dec_label_pc_cc1c

dec_label_pc_cc1c:                                ; preds = %dec_label_pc_cbc4
  %v4_cc20 = sext i8 %v5_cbe0 to i32
  %v2_cc24 = add i32 %v4_cc20, %v2_cb74
  store i32 %v2_cc24, i32* @fp, align 4
  %v3_cc28 = mul i32 %v2_cc24, 65536
  %v1_cc2c = add i32 %v3_cc28, 1769472
  store i32 %v1_cc2c, i32* @r6, align 4
  %v1_cc30 = add i32 %v3_cc28, 3080192
  %v1_cc44 = urem i32 %v0_cbd0, 256
  %v3_cc54 = udiv i32 %v1_cc2c, 256
  %v1_cc58 = urem i32 %v7_c968, 256
  %v1_cc5c = and i32 %v3_cc54, 65280
  %v1_cc60 = urem i32 %v0_cbdc, 256
  %v3_cc64 = mul nuw nsw i32 %v1_cc44, 256
  %v1_cc6c = urem i32 %v0_cbd8, 256
  %v3_cc70 = mul nuw nsw i32 %v1_cc60, 256
  %tmp139 = udiv i32 %v0_cbd0, 256
  %v4_cc74 = urem i32 %tmp139, 256
  %v5_cc74 = or i32 %v4_cc74, %v3_cc64
  store i32 %v5_cc74, i32* %r8.global-to-local, align 4
  %v4_cc78 = udiv i32 %v1_cc2c, 16777216
  %v5_cc78 = or i32 %v1_cc5c, %v4_cc78
  store i32 %v5_cc78, i32* %sl.global-to-local, align 4
  %tmp140 = udiv i32 %v0_cbd8, 256
  %v3_cc84 = urem i32 %tmp140, 256
  %v4_cc88 = sdiv i32 %v1_cc30, 16777216
  %tmp141 = udiv i32 %v7_c968, 256
  %v4_cc90 = mul nuw nsw i32 %v1_cc6c, 256
  %v5_cc90 = or i32 %v4_cc90, %v3_cc84
  store i32 %v5_cc90, i32* @r5, align 4
  %tmp142 = udiv i32 %v0_cbdc, 256
  %v4_cc94 = urem i32 %tmp142, 256
  %v5_cc94 = or i32 %v4_cc94, %v3_cc70
  store i32 %v5_cc94, i32* %sb.global-to-local, align 4
  store i32 %v1_cc58, i32* %r0.global-to-local, align 4
  %v1_cca0 = add i32 %v2_cb74, 1
  store i32 %v1_cca0, i32* @r7, align 4
  %v3_cca4 = ashr i32 %v1_cc30, 31
  store i32 %v3_cca4, i32* @lr, align 4
  store i32 %v1_cc6c, i32* %r1.global-to-local, align 4
  store i32 %v1_cc60, i32* %r2.global-to-local, align 4
  %v3_ccb075 = udiv i32 %v1_cc5c, 256
  store i32 %v3_ccb075, i32* %r3.global-to-local, align 4
  store i32 %v1_cc44, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext13 = mul i32 %tmp141, 16777216
  %v4_cd40 = sdiv i32 %sext13, 16777216
  %sext14 = mul i32 %v7_c968, 16777216
  %v4_cd44 = sdiv i32 %sext14, 16777216
  %sext15 = mul i32 %v1_cc2c, 256
  %v4_cd74 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v0_cbdc, 16777216
  %v4_cd78 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v0_cbd8, 16777216
  %v4_cd9c = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_cbd0, 16777216
  %v4_cda8 = sdiv i32 %sext18, 16777216
  %v1_cd24 = trunc i32 %v4_cc88 to i8
  %extract.t = trunc i32 %v3_cca4 to i8
  br label %dec_label_pc_ccd4

dec_label_pc_ccd4:                                ; preds = %dec_label_pc_ce3c, %dec_label_pc_cc1c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_ccdc = call i32 @function_12538(i32 600, i32 1)
  store i32 %v2_ccdc, i32* %r0.global-to-local, align 4
  store i32 %v2_c92c, i32* %lr.global-to-local, align 4
  %v3_cce4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cce4, i32* %r3.global-to-local, align 4
  %v2_cce8 = load i32, i32* @r4, align 4
  %v5_cce8 = mul i32 %v2_cce8, 4
  %v6_cce8 = add i32 %v5_cce8, %v2_c92c
  %v7_cce8 = inttoptr i32 %v6_cce8 to i32*
  store i32 %v2_ccdc, i32* %v7_cce8, align 4
  %v0_ccec = load i32, i32* %lr.global-to-local, align 4
  %v1_ccec = load i32, i32* %r3.global-to-local, align 4
  %v4_ccec = mul i32 %v1_ccec, 4
  %v5_ccec = add i32 %v4_ccec, %v0_ccec
  %v6_ccec = inttoptr i32 %v5_ccec to i32*
  %v7_ccec = load i32, i32* %v6_ccec, align 4
  store i32 %v7_ccec, i32* %r1.global-to-local, align 4
  %v1_ccf0 = inttoptr i32 %v7_ccec to i8*
  %v2_ccf0 = load i8, i8* %v1_ccf0, align 1
  %tmp154 = urem i8 %v2_ccf0, 16
  %v1_ccf4 = zext i8 %tmp154 to i32
  %v1_ccf8 = or i32 %v1_ccf4, 64
  store i32 %v1_ccf8, i32* %r2.global-to-local, align 4
  %v1_ccfc = trunc i32 %v1_ccf8 to i8
  store i8 %v1_ccfc, i8* %v1_ccf0, align 1
  %v0_cd00 = load i32, i32* %r1.global-to-local, align 4
  %v1_cd00 = inttoptr i32 %v0_cd00 to i8*
  %v2_cd00 = load i8, i8* %v1_cd00, align 1
  %v1_cd04 = and i8 %v2_cd00, -16
  %v1_cd08 = or i8 %v1_cd04, 5
  store i32 %v1_c9ac, i32* %r0.global-to-local, align 4
  store i8 %v1_cd08, i8* %v1_cd00, align 1
  store i32 %v6_c944, i32* %r2.global-to-local, align 4
  %v2_cd18 = load i32, i32* %r1.global-to-local, align 4
  %v3_cd18 = add i32 %v2_cd18, 1
  %v4_cd18 = inttoptr i32 %v3_cd18 to i8*
  store i8 %v5_c964, i8* %v4_cd18, align 1
  store i32 %v4_cc88, i32* %r3.global-to-local, align 4
  %v0_cd20 = load i32, i32* %r0.global-to-local, align 4
  %v2_cd20 = icmp eq i32 %v0_cd20, 0
  store i1 %v2_cd20, i1* %cpsr_z.global-to-local, align 1
  %v2_cd24 = load i32, i32* %r1.global-to-local, align 4
  %v3_cd24 = add i32 %v2_cd24, 2
  %v4_cd24 = inttoptr i32 %v3_cd24 to i8*
  store i8 %v1_cd24, i8* %v4_cd24, align 1
  store i32 %v3_cca4, i32* %r4.global-to-local, align 4
  store i32 %v5_c9a0, i32* %r0.global-to-local, align 4
  %v0_cd30 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cd30, label %.thread20, label %bb143

bb143:                                            ; preds = %dec_label_pc_ccd4
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_cd34 = load i32, i32* %r1.global-to-local, align 4
  %v4_cd34 = add i32 %v3_cd34, 6
  %v5_cd34 = inttoptr i32 %v4_cd34 to i8*
  store i8 64, i8* %v5_cd34, align 1
  %v0_cd3c.pre = load i32, i32* %r4.global-to-local, align 4
  %extract.t76 = trunc i32 %v0_cd3c.pre to i8
  br label %.thread20

.thread20:                                        ; preds = %dec_label_pc_ccd4, %bb143
  %v0_cd3c.off0 = phi i8 [ %extract.t, %dec_label_pc_ccd4 ], [ %extract.t76, %bb143 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_cd3c = load i32, i32* %r1.global-to-local, align 4
  %v3_cd3c = add i32 %v2_cd3c, 3
  %v4_cd3c = inttoptr i32 %v3_cd3c to i8*
  store i8 %v0_cd3c.off0, i8* %v4_cd3c, align 1
  store i32 %v4_cd40, i32* %ip.global-to-local, align 4
  store i32 %v4_cd44, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c93c.50 to i32), i32* %r4.global-to-local, align 4
  %v0_cd4c = load i32, i32* %r0.global-to-local, align 4
  %v1_cd4c = trunc i32 %v0_cd4c to i8
  %v2_cd4c = load i32, i32* %r1.global-to-local, align 4
  %v3_cd4c = add i32 %v2_cd4c, 8
  %v4_cd4c = inttoptr i32 %v3_cd4c to i8*
  store i8 %v1_cd4c, i8* %v4_cd4c, align 1
  %v0_cd50 = load i32, i32* %r3.global-to-local, align 4
  %v1_cd50 = trunc i32 %v0_cd50 to i8
  %v2_cd50 = load i32, i32* %r1.global-to-local, align 4
  %v3_cd50 = add i32 %v2_cd50, 9
  %v4_cd50 = inttoptr i32 %v3_cd50 to i8*
  store i8 %v1_cd50, i8* %v4_cd50, align 1
  %v0_cd54 = load i32, i32* %lr.global-to-local, align 4
  %v1_cd54 = trunc i32 %v0_cd54 to i8
  %v2_cd54 = load i32, i32* %r1.global-to-local, align 4
  %v3_cd54 = add i32 %v2_cd54, 5
  %v4_cd54 = inttoptr i32 %v3_cd54 to i8*
  store i8 %v1_cd54, i8* %v4_cd54, align 1
  %v0_cd58 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cd58, label %.thread21, label %bb144

.thread21:                                        ; preds = %.thread20
  %v2_cd5c22 = load i32, i32* @global_var_1c93c.50, align 4
  store i32 %v2_cd5c22, i32* %r3.global-to-local, align 4
  store i32 %v4_cc20, i32* %lr.global-to-local, align 4
  br label %bb145

bb144:                                            ; preds = %.thread20
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_cd5c = load i32, i32* @global_var_1c93c.50, align 4
  store i32 %v2_cd5c, i32* %r3.global-to-local, align 4
  store i32 %v4_cc20, i32* %lr.global-to-local, align 4
  %v3_cd64 = load i32, i32* %r1.global-to-local, align 4
  %v4_cd64 = add i32 %v3_cd64, 7
  %v5_cd64 = inttoptr i32 %v4_cd64 to i8*
  store i8 0, i8* %v5_cd64, align 1
  %v0_cd6c.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_cd70.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb145

bb145:                                            ; preds = %.thread21, %bb144
  %v0_cd70 = phi i32 [ %v2_cd5c22, %.thread21 ], [ %v0_cd70.pre, %bb144 ]
  %v0_cd6c = phi i32 [ %v4_cc20, %.thread21 ], [ %v0_cd6c.pre, %bb144 ]
  %v0_cd68 = load i32, i32* %r1.global-to-local, align 4
  %v1_cd68 = add i32 %v0_cd6c, 41
  %v2_cd6c = add i32 %v1_cd68, %v0_cd68
  store i32 %v2_cd6c, i32* %r4.global-to-local, align 4
  %v2_cd70 = add i32 %v0_cd68, 12
  %v3_cd70 = inttoptr i32 %v2_cd70 to i32*
  store i32 %v0_cd70, i32* %v3_cd70, align 4
  store i32 %v4_cd74, i32* %r2.global-to-local, align 4
  store i32 %v4_cd78, i32* %r3.global-to-local, align 4
  %v0_cd7c = load i32, i32* %r1.global-to-local, align 4
  %v1_cd7c = add i32 %v0_cd7c, 20
  store i32 %v1_cd7c, i32* %r0.global-to-local, align 4
  %v0_cd80 = load i32, i32* %ip.global-to-local, align 4
  %v1_cd80 = trunc i32 %v0_cd80 to i8
  %v3_cd80 = add i32 %v0_cd7c, 4
  %v4_cd80 = inttoptr i32 %v3_cd80 to i8*
  store i8 %v1_cd80, i8* %v4_cd80, align 1
  %v0_cd84 = load i32, i32* %r2.global-to-local, align 4
  %v1_cd84 = trunc i32 %v0_cd84 to i8
  %v2_cd84 = load i32, i32* %r0.global-to-local, align 4
  %v3_cd84 = add i32 %v2_cd84, 5
  %v4_cd84 = inttoptr i32 %v3_cd84 to i8*
  store i8 %v1_cd84, i8* %v4_cd84, align 1
  %v0_cd88 = load i32, i32* %r3.global-to-local, align 4
  %v1_cd88 = trunc i32 %v0_cd88 to i8
  %v2_cd88 = load i32, i32* %r0.global-to-local, align 4
  %v3_cd88 = add i32 %v2_cd88, 3
  %v4_cd88 = inttoptr i32 %v3_cd88 to i8*
  store i8 %v1_cd88, i8* %v4_cd88, align 1
  %v0_cd8c = load i32, i32* %sb.global-to-local, align 4
  %v1_cd8c = trunc i32 %v0_cd8c to i8
  %v2_cd8c = load i32, i32* %r0.global-to-local, align 4
  %v3_cd8c = add i32 %v2_cd8c, 2
  %v4_cd8c = inttoptr i32 %v3_cd8c to i8*
  store i8 %v1_cd8c, i8* %v4_cd8c, align 1
  %v0_cd90 = load i32, i32* %sl.global-to-local, align 4
  %v1_cd90 = trunc i32 %v0_cd90 to i8
  %v2_cd90 = load i32, i32* %r0.global-to-local, align 4
  %v3_cd90 = add i32 %v2_cd90, 4
  %v4_cd90 = inttoptr i32 %v3_cd90 to i8*
  store i8 %v1_cd90, i8* %v4_cd90, align 1
  %v0_cd94 = load i32, i32* @r5, align 4
  %v1_cd94 = trunc i32 %v0_cd94 to i8
  %v2_cd94 = load i32, i32* %r1.global-to-local, align 4
  %v3_cd94 = add i32 %v2_cd94, 20
  %v4_cd94 = inttoptr i32 %v3_cd94 to i8*
  store i8 %v1_cd94, i8* %v4_cd94, align 1
  store i32 %v4_cd9c, i32* %r2.global-to-local, align 4
  %v1_cda0 = load i32, i32* %r1.global-to-local, align 4
  %v2_cda0 = add i32 %v1_cda0, 16
  %v3_cda0 = inttoptr i32 %v2_cda0 to i32*
  store i32 %stack_var_-2176.0, i32* %v3_cda0, align 4
  %v0_cda4 = load i32, i32* %r2.global-to-local, align 4
  %v1_cda4 = trunc i32 %v0_cda4 to i8
  %v2_cda4 = load i32, i32* %r0.global-to-local, align 4
  %v3_cda4 = add i32 %v2_cda4, 1
  %v4_cda4 = inttoptr i32 %v3_cda4 to i8*
  store i8 %v1_cda4, i8* %v4_cda4, align 1
  store i32 %v4_cda8, i32* %lr.global-to-local, align 4
  store i32 %v4_cc20, i32* %r0.global-to-local, align 4
  %v0_cdb0 = load i32, i32* %r1.global-to-local, align 4
  %v1_cdb0 = add i32 %v0_cdb0, 28
  store i32 %v1_cdb0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_cdbc = load i32, i32* %r8.global-to-local, align 4
  %v1_cdbc = trunc i32 %v0_cdbc to i8
  %v4_cdbc = inttoptr i32 %v1_cdb0 to i8*
  store i8 %v1_cdbc, i8* %v4_cdbc, align 1
  %v0_cdc0 = load i32, i32* %r3.global-to-local, align 4
  %v1_cdc0 = trunc i32 %v0_cdc0 to i8
  %v2_cdc0 = load i32, i32* %ip.global-to-local, align 4
  %v3_cdc0 = add i32 %v2_cdc0, 5
  %v4_cdc0 = inttoptr i32 %v3_cdc0 to i8*
  store i8 %v1_cdc0, i8* %v4_cdc0, align 1
  %v0_cdc4 = load i32, i32* %lr.global-to-local, align 4
  %v1_cdc4 = trunc i32 %v0_cdc4 to i8
  %v2_cdc4 = load i32, i32* %ip.global-to-local, align 4
  %v3_cdc4 = add i32 %v2_cdc4, 1
  %v4_cdc4 = inttoptr i32 %v3_cdc4 to i8*
  store i8 %v1_cdc4, i8* %v4_cdc4, align 1
  %v0_cdc8 = load i32, i32* %r3.global-to-local, align 4
  %v1_cdc8 = trunc i32 %v0_cdc8 to i8
  %v2_cdc8 = load i32, i32* %ip.global-to-local, align 4
  %v3_cdc8 = add i32 %v2_cdc8, 2
  %v4_cdc8 = inttoptr i32 %v3_cdc8 to i8*
  store i8 %v1_cdc8, i8* %v4_cdc8, align 1
  %v0_cdcc = load i32, i32* @r6, align 4
  %v1_cdcc = trunc i32 %v0_cdcc to i8
  %v2_cdcc = load i32, i32* %ip.global-to-local, align 4
  %v3_cdcc = add i32 %v2_cdcc, 3
  %v4_cdcc = inttoptr i32 %v3_cdcc to i8*
  store i8 %v1_cdcc, i8* %v4_cdcc, align 1
  %v0_cdd0 = load i32, i32* @r6, align 4
  %v1_cdd0 = trunc i32 %v0_cdd0 to i8
  %v2_cdd0 = load i32, i32* %ip.global-to-local, align 4
  %v3_cdd0 = add i32 %v2_cdd0, 4
  %v4_cdd0 = inttoptr i32 %v3_cdd0 to i8*
  store i8 %v1_cdd0, i8* %v4_cdd0, align 1
  %v0_cdd4 = load i32, i32* %r0.global-to-local, align 4
  %v1_cdd4 = trunc i32 %v0_cdd4 to i8
  %v2_cdd4 = load i32, i32* %r1.global-to-local, align 4
  %v3_cdd4 = add i32 %v2_cdd4, 40
  %v4_cdd4 = inttoptr i32 %v3_cdd4 to i8*
  store i8 %v1_cdd4, i8* %v4_cdd4, align 1
  store i32 %v5_ca28, i32* %r1.global-to-local, align 4
  %v0_cddc = load i32, i32* @r7, align 4
  store i32 %v0_cddc, i32* %r2.global-to-local, align 4
  %v0_cde0 = load i32, i32* %r4.global-to-local, align 4
  %v1_cde0 = add i32 %v0_cde0, 1
  store i32 %v1_cde0, i32* %r0.global-to-local, align 4
  %v3_cde4 = call i32 @function_1115c(i32 %v1_cde0, i32 %v5_ca28, i32 %v0_cddc)
  store i32 %v3_cde4, i32* %r0.global-to-local, align 4
  store i32 %v2_cb74, i32* %r1.global-to-local, align 4
  %v1_cdec = load i32, i32* @r6, align 4
  %v9_cdec = icmp eq i32 %v2_cb74, %v1_cdec
  store i1 %v9_cdec, i1* %cpsr_z.global-to-local, align 1
  %v7_cdf0 = icmp sgt i32 %v2_cb74, %v1_cdec
  store i32 %v1_cdec, i32* %lr.global-to-local, align 4
  %v0_ce00 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_ce00, i32* %r2.global-to-local, align 4
  %extract.t78 = trunc i32 %v1_cdec to i8
  br i1 %v7_cdf0, label %dec_label_pc_cdfc, label %dec_label_pc_ce3c

dec_label_pc_cdfc:                                ; preds = %bb145
  store i32 %v1_cdec, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ce08

dec_label_pc_ce08:                                ; preds = %bb148, %dec_label_pc_cdfc
  %v0_ce2485151 = phi i32 [ %v0_ce2485152, %bb148 ], [ %v1_cdec, %dec_label_pc_cdfc ]
  %v1_ce1832 = phi i32 [ %v1_ce2891, %bb148 ], [ %v1_cdec, %dec_label_pc_cdfc ]
  %v1_ce14.off0 = phi i8 [ %v1_ce1456.off0, %bb148 ], [ %extract.t78, %dec_label_pc_cdfc ]
  %v0_ce1831 = phi i32 [ %v0_ce18315488, %bb148 ], [ %v0_ce00, %dec_label_pc_cdfc ]
  store i32 %v5_ca28, i32* %ip.global-to-local, align 4
  %v2_ce0c = add i32 %v1_ce1832, %v5_ca28
  %v3_ce0c = inttoptr i32 %v2_ce0c to i8*
  %v4_ce0c = load i8, i8* %v3_ce0c, align 1
  %v6_ce0c = zext i8 %v4_ce0c to i32
  store i32 %v6_ce0c, i32* %r3.global-to-local, align 4
  %v7_ce10 = icmp eq i8 %v4_ce0c, 46
  store i1 %v7_ce10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ce10, label %bb146, label %.thread30

.thread30:                                        ; preds = %dec_label_pc_ce08
  %v2_ce1833 = add i32 %v1_ce1832, %v0_ce1831
  store i32 %v2_ce1833, i32* %r0.global-to-local, align 4
  br label %.thread34

bb146:                                            ; preds = %dec_label_pc_ce08
  %v3_ce14 = load i32, i32* %r2.global-to-local, align 4
  %v4_ce14 = inttoptr i32 %v3_ce14 to i8*
  store i8 %v1_ce14.off0, i8* %v4_ce14, align 1
  %v0_ce1c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_ce18 = load i32, i32* %r4.global-to-local, align 4
  %v1_ce18 = load i32, i32* %r1.global-to-local, align 4
  %v2_ce18 = add i32 %v1_ce18, %v0_ce18
  store i32 %v2_ce18, i32* %r0.global-to-local, align 4
  br i1 %v0_ce1c.pr, label %bb147, label %bb146..thread34_crit_edge

bb146..thread34_crit_edge:                        ; preds = %bb146
  %v0_ce2485.pre = load i32, i32* %lr.global-to-local, align 4
  br label %.thread34

bb147:                                            ; preds = %bb146
  %v2_ce1c = add i32 %v2_ce18, 1
  store i32 %v2_ce1c, i32* %r2.global-to-local, align 4
  store i32 %v2_cb74, i32* %r0.global-to-local, align 4
  %v0_ce24 = load i32, i32* %lr.global-to-local, align 4
  %v1_ce24 = add i32 %v0_ce24, 1
  store i32 %v1_ce24, i32* %ip.global-to-local, align 4
  %v1_ce28 = add i32 %v1_ce18, 1
  store i32 %v1_ce28, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %bb148

.thread34:                                        ; preds = %bb146..thread34_crit_edge, %.thread30
  %v0_ce2485 = phi i32 [ %v0_ce2485.pre, %bb146..thread34_crit_edge ], [ %v0_ce2485151, %.thread30 ]
  %v0_ce28.ph = phi i32 [ %v1_ce18, %bb146..thread34_crit_edge ], [ %v1_ce1832, %.thread30 ]
  %v0_ce183154.ph = phi i32 [ %v0_ce18, %bb146..thread34_crit_edge ], [ %v0_ce1831, %.thread30 ]
  store i32 %v2_cb74, i32* %r0.global-to-local, align 4
  %v1_ce2486 = add i32 %v0_ce2485, 1
  store i32 %v1_ce2486, i32* %ip.global-to-local, align 4
  %v1_ce2887 = add i32 %v0_ce28.ph, 1
  store i32 %v1_ce2887, i32* %r1.global-to-local, align 4
  %v2_ce30 = urem i32 %v1_ce2486, 256
  store i32 %v2_ce30, i32* %lr.global-to-local, align 4
  %extract.t81 = trunc i32 %v1_ce2486 to i8
  br label %bb148

bb148:                                            ; preds = %bb147, %.thread34
  %v0_ce2485152 = phi i32 [ 0, %bb147 ], [ %v2_ce30, %.thread34 ]
  %v1_ce2891 = phi i32 [ %v1_ce28, %bb147 ], [ %v1_ce2887, %.thread34 ]
  %v0_ce18315488 = phi i32 [ %v0_ce18, %bb147 ], [ %v0_ce183154.ph, %.thread34 ]
  %v1_ce1456.off0 = phi i8 [ 0, %bb147 ], [ %extract.t81, %.thread34 ]
  %v9_ce34 = icmp eq i32 %v2_cb74, %v1_ce2891
  store i1 %v9_ce34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ce34, label %dec_label_pc_ce3c.loopexit, label %dec_label_pc_ce08

dec_label_pc_ce3c.loopexit:                       ; preds = %bb148
  %v2_ce3c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ce3c

dec_label_pc_ce3c:                                ; preds = %dec_label_pc_ce3c.loopexit, %bb145
  %v2_ce3c = phi i32 [ %v2_ce3c.pre, %dec_label_pc_ce3c.loopexit ], [ %v0_ce00, %bb145 ]
  %v0_ce3c.off0 = phi i8 [ %v1_ce1456.off0, %dec_label_pc_ce3c.loopexit ], [ %extract.t78, %bb145 ]
  %v3_ce3c = inttoptr i32 %v2_ce3c to i8*
  store i8 %v0_ce3c.off0, i8* %v3_ce3c, align 1
  %v3_ce40 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_cb74, i32* %r1.global-to-local, align 4
  %v0_ce48 = load i32, i32* %r4.global-to-local, align 4
  %v2_ce48 = add i32 %v0_ce48, %v2_cb74
  store i32 %v2_ce48, i32* %r3.global-to-local, align 4
  %v1_ce4c = add i32 %v3_ce40, 1
  store i32 %v1_ce4c, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* @lr, align 4
  %v9_ce5c = icmp eq i32 %v1_c914, %v1_ce4c
  store i1 %v9_ce5c, i1* %cpsr_z.global-to-local, align 1
  %v1_ce60 = add i32 %v2_ce48, 2
  store i32 %v1_ce60, i32* %r2.global-to-local, align 4
  %v4_ce64 = inttoptr i32 %v1_ce60 to i8*
  store i8 0, i8* %v4_ce64, align 1
  %v0_ce68 = load i32, i32* @lr, align 4
  %v1_ce68 = trunc i32 %v0_ce68 to i8
  %v2_ce68 = load i32, i32* %r2.global-to-local, align 4
  %v3_ce68 = add i32 %v2_ce68, 3
  %v4_ce68 = inttoptr i32 %v3_ce68 to i8*
  store i8 %v1_ce68, i8* %v4_ce68, align 1
  %v0_ce6c = load i32, i32* @lr, align 4
  %v1_ce6c = trunc i32 %v0_ce6c to i8
  %v2_ce6c = load i32, i32* %r2.global-to-local, align 4
  %v3_ce6c = add i32 %v2_ce6c, 1
  %v4_ce6c = inttoptr i32 %v3_ce6c to i8*
  store i8 %v1_ce6c, i8* %v4_ce6c, align 1
  %v0_ce70 = load i32, i32* %ip.global-to-local, align 4
  %v1_ce70 = trunc i32 %v0_ce70 to i8
  %v2_ce70 = load i32, i32* %r2.global-to-local, align 4
  %v3_ce70 = add i32 %v2_ce70, 2
  %v4_ce70 = inttoptr i32 %v3_ce70 to i8*
  store i8 %v1_ce70, i8* %v4_ce70, align 1
  %v0_ce74 = load i32, i32* @r4, align 4
  store i32 %v0_ce74, i32* %stack_var_-40, align 4
  %v8_ce78 = icmp sgt i32 %v1_c914, %v1_ce4c
  br i1 %v8_ce78, label %dec_label_pc_ccd4, label %dec_label_pc_ce7c

dec_label_pc_ce7c:                                ; preds = %dec_label_pc_ce3c, %dec_label_pc_d048
  %v4_ceec.pre-phi = phi i32 [ %v4_d04c, %dec_label_pc_d048 ], [ %v4_cc20, %dec_label_pc_ce3c ]
  store i32 %v1_c914, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_cbf8, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ce88

dec_label_pc_ce88:                                ; preds = %dec_label_pc_ce88, %dec_label_pc_cfac, %dec_label_pc_ce7c
  br i1 %v2_cbf8, label %dec_label_pc_ce88, label %dec_label_pc_ce8c

dec_label_pc_ce8c:                                ; preds = %dec_label_pc_ce88
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r6, align 4
  %v0_ce9c = load i32, i32* @fp, align 4
  %v1_ce9c = add i32 %v0_ce9c, 27
  store i32 %v1_ce9c, i32* @sb, align 4
  %v1_cea0 = add i32 %v0_ce9c, 47
  store i32 %v1_cea0, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_cea8

dec_label_pc_cea8:                                ; preds = %dec_label_pc_cee8.dec_label_pc_cea8_crit_edge, %dec_label_pc_ce8c
  %v1_cec8 = phi i32 [ %v1_ceb4.pre, %dec_label_pc_cee8.dec_label_pc_cea8_crit_edge ], [ 65535, %dec_label_pc_ce8c ]
  %v1_ceb0 = phi i32 [ %v1_cf98, %dec_label_pc_cee8.dec_label_pc_cea8_crit_edge ], [ 0, %dec_label_pc_ce8c ]
  store i32 %v2_c92c, i32* %r3.global-to-local, align 4
  store i32 %v3_cbe8, i32* %r8.global-to-local, align 4
  %v4_ceb0 = mul i32 %v1_ceb0, 4
  %v5_ceb0 = add i32 %v4_ceb0, %v2_c92c
  %v6_ceb0 = inttoptr i32 %v5_ceb0 to i32*
  %v7_ceb0 = load i32, i32* %v6_ceb0, align 4
  store i32 %v7_ceb0, i32* @r4, align 4
  %v9_ceb4 = icmp eq i32 %v3_cbe8, %v1_cec8
  store i1 %v9_ceb4, i1* %cpsr_z.global-to-local, align 1
  %v1_ceb8 = add i32 %v7_ceb0, 20
  store i32 %v1_ceb8, i32* @r5, align 4
  %v1_cebc = add i32 %v7_ceb0, 28
  store i32 %v1_cebc, i32* @r8, align 4
  br i1 %v9_ceb4, label %dec_label_pc_cfbc, label %dec_label_pc_cec4

dec_label_pc_cec4:                                ; preds = %dec_label_pc_cea8
  store i32 %v3_cbec, i32* %ip.global-to-local, align 4
  %v9_cec8 = icmp eq i32 %v3_cbec, %v1_cec8
  store i1 %v9_cec8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cec8, label %dec_label_pc_cfd8, label %dec_label_pc_ced0

dec_label_pc_ced0:                                ; preds = %dec_label_pc_cfbc.dec_label_pc_ced0_crit_edge, %dec_label_pc_cec4
  %v1_ced4 = phi i32 [ %v1_ced4.pre, %dec_label_pc_cfbc.dec_label_pc_ced0_crit_edge ], [ %v1_cec8, %dec_label_pc_cec4 ]
  store i32 %v3_cbf0, i32* %lr.global-to-local, align 4
  %v9_ced4 = icmp eq i32 %v3_cbf0, %v1_ced4
  store i1 %v9_ced4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ced4, label %dec_label_pc_cff4, label %dec_label_pc_cedc

dec_label_pc_cedc:                                ; preds = %dec_label_pc_cfd8.dec_label_pc_cedc_crit_edge, %dec_label_pc_ced0
  %v1_cee0 = phi i32 [ %v1_cee0.pre, %dec_label_pc_cfd8.dec_label_pc_cedc_crit_edge ], [ %v1_ced4, %dec_label_pc_ced0 ]
  store i32 %v3_cbf4, i32* %r0.global-to-local, align 4
  %v9_cee0 = icmp eq i32 %v3_cbf4, %v1_cee0
  store i1 %v9_cee0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cee0, label %dec_label_pc_d010, label %dec_label_pc_cee8

dec_label_pc_cee8:                                ; preds = %dec_label_pc_cff4, %dec_label_pc_cedc, %dec_label_pc_d010
  %v0_cee8 = load i32, i32* @r4, align 4
  %v1_cee8 = add i32 %v0_cee8, 41
  store i32 %v1_cee8, i32* %r0.global-to-local, align 4
  store i32 %v4_ceec.pre-phi, i32* %r1.global-to-local, align 4
  %v2_cef0 = call i32 @function_e998(i32 %v1_cee8, i32 %v4_ceec.pre-phi)
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_cef8 = load i32, i32* @r7, align 4
  %v1_cef8 = trunc i32 %v0_cef8 to i8
  %v2_cef8 = load i32, i32* @r4, align 4
  %v3_cef8 = add i32 %v2_cef8, 10
  %v4_cef8 = inttoptr i32 %v3_cef8 to i8*
  store i8 %v1_cef8, i8* %v4_cef8, align 1
  %v0_cefc = load i32, i32* @r7, align 4
  %v1_cefc = trunc i32 %v0_cefc to i8
  %v2_cefc = load i32, i32* @r4, align 4
  %v3_cefc = add i32 %v2_cefc, 11
  %v4_cefc = inttoptr i32 %v3_cefc to i8*
  store i8 %v1_cefc, i8* %v4_cefc, align 1
  %v0_cf00 = load i32, i32* @r4, align 4
  store i32 %v0_cf00, i32* @r0, align 4
  %v2_cf04 = call i32 @function_d0b8(i32 %v0_cf00, i32 20)
  %v3_cf04 = trunc i32 %v2_cf04 to i8
  store i32 %v2_cf04, i32* %r0.global-to-local, align 4
  %v4_cf08 = sdiv i32 %v2_cf04, 256
  store i32 %v4_cf08, i32* %r3.global-to-local, align 4
  %v1_cf0c = trunc i32 %v4_cf08 to i8
  %v2_cf0c = load i32, i32* @r4, align 4
  %v3_cf0c = add i32 %v2_cf0c, 11
  %v4_cf0c = inttoptr i32 %v3_cf0c to i8*
  store i8 %v1_cf0c, i8* %v4_cf0c, align 1
  %v3_cf10 = load i32, i32* @r4, align 4
  %v4_cf10 = add i32 %v3_cf10, 10
  %v5_cf10 = inttoptr i32 %v4_cf10 to i8*
  store i8 %v3_cf04, i8* %v5_cf10, align 1
  %v0_cf14 = load i32, i32* @r7, align 4
  %v1_cf14 = trunc i32 %v0_cf14 to i8
  %v2_cf14 = load i32, i32* @r5, align 4
  %v3_cf14 = add i32 %v2_cf14, 6
  %v4_cf14 = inttoptr i32 %v3_cf14 to i8*
  store i8 %v1_cf14, i8* %v4_cf14, align 1
  %v0_cf18 = load i32, i32* @r7, align 4
  %v1_cf18 = trunc i32 %v0_cf18 to i8
  %v2_cf18 = load i32, i32* @r5, align 4
  %v3_cf18 = add i32 %v2_cf18, 7
  %v4_cf18 = inttoptr i32 %v3_cf18 to i8*
  store i8 %v1_cf18, i8* %v4_cf18, align 1
  %v0_cf1c = load i32, i32* @r4, align 4
  %v1_cf1c = add i32 %v0_cf1c, 24
  %v2_cf1c = inttoptr i32 %v1_cf1c to i8*
  %v3_cf1c = load i8, i8* %v2_cf1c, align 1
  %v4_cf1c = zext i8 %v3_cf1c to i32
  store i32 %v4_cf1c, i32* %r3.global-to-local, align 4
  %v1_cf20 = add i32 %v0_cf1c, 25
  %v2_cf20 = inttoptr i32 %v1_cf20 to i8*
  %v3_cf20 = load i8, i8* %v2_cf20, align 1
  %v4_cf20 = zext i8 %v3_cf20 to i32
  %v0_cf24 = load i32, i32* @r5, align 4
  store i32 %v0_cf24, i32* @r1, align 4
  %v4_cf28 = mul nuw nsw i32 %v4_cf20, 256
  %v5_cf28 = or i32 %v4_cf28, %v4_cf1c
  store i32 %v5_cf28, i32* %r2.global-to-local, align 4
  store i32 %v0_cf1c, i32* %r0.global-to-local, align 4
  %v0_cf30 = load i32, i32* @sb, align 4
  store i32 %v0_cf30, i32* %r3.global-to-local, align 4
  %v4_cf34 = call i32 @function_d114(i32 %v0_cf1c, i32 %v0_cf24, i32 %v5_cf28, i32 %v0_cf30)
  %v5_cf34 = trunc i32 %v4_cf34 to i8
  store i32 %v4_cf34, i32* %r0.global-to-local, align 4
  %v3_cf38 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-2176.0, i32* %r2.global-to-local, align 4
  %v5_cf48 = mul i32 %v3_cf38, 24
  %v2_cf4c = add i32 %v5_cf48, %arg2
  store i32 %v2_cf4c, i32* %lr.global-to-local, align 4
  %v4_cf50 = sdiv i32 %v4_cf34, 256
  store i32 %v4_cf50, i32* %r3.global-to-local, align 4
  %v3_cf54 = load i32, i32* @r5, align 4
  %v4_cf54 = add i32 %v3_cf54, 6
  %v5_cf54 = inttoptr i32 %v4_cf54 to i8*
  store i8 %v5_cf34, i8* %v5_cf54, align 1
  %v0_cf58 = load i32, i32* %r3.global-to-local, align 4
  %v1_cf58 = trunc i32 %v0_cf58 to i8
  %v2_cf58 = load i32, i32* @r5, align 4
  %v3_cf58 = add i32 %v2_cf58, 7
  %v4_cf58 = inttoptr i32 %v3_cf58 to i8*
  store i8 %v1_cf58, i8* %v4_cf58, align 1
  %v0_cf5c = load i32, i32* %r2.global-to-local, align 4
  %v1_cf5c = load i32, i32* %lr.global-to-local, align 4
  %v2_cf5c = add i32 %v1_cf5c, 4
  %v3_cf5c = inttoptr i32 %v2_cf5c to i32*
  store i32 %v0_cf5c, i32* %v3_cf5c, align 4
  %v0_cf60 = load i32, i32* @r4, align 4
  %v1_cf60 = add i32 %v0_cf60, 20
  %v2_cf60 = inttoptr i32 %v1_cf60 to i32*
  %v3_cf60 = load i32, i32* %v2_cf60, align 4
  %v3_cf64 = udiv i32 %v3_cf60, 65536
  store i32 %v3_cf64, i32* %r3.global-to-local, align 4
  %v3_cf6812 = udiv i32 %v3_cf60, 16777216
  %v1_cf6c = trunc i32 %v3_cf6812 to i8
  %v2_cf6c = load i32, i32* %lr.global-to-local, align 4
  %v3_cf6c = add i32 %v2_cf6c, 3
  %v4_cf6c = inttoptr i32 %v3_cf6c to i8*
  store i8 %v1_cf6c, i8* %v4_cf6c, align 1
  %v0_cf70 = load i32, i32* %r3.global-to-local, align 4
  %v1_cf70 = trunc i32 %v0_cf70 to i8
  %v2_cf70 = load i32, i32* %lr.global-to-local, align 4
  %v3_cf70 = add i32 %v2_cf70, 2
  %v4_cf70 = inttoptr i32 %v3_cf70 to i8*
  store i8 %v1_cf70, i8* %v4_cf70, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_cf7c = load i32, i32* @r4, align 4
  store i32 %v0_cf7c, i32* %r1.global-to-local, align 4
  store i32 %v3_cb88, i32* %r0.global-to-local, align 4
  %v0_cf84 = load i32, i32* @sl, align 4
  store i32 %v0_cf84, i32* %r2.global-to-local, align 4
  %v0_cf88 = load i32, i32* %lr.global-to-local, align 4
  %v6_cf90 = inttoptr i32 %v0_cf7c to i32*
  %v7_cf90 = call i32 @function_121e8(i32 %v3_cb88, i32* %v6_cf90, i32 %v0_cf84, i32 16384, i32 %v0_cf88, i32 16)
  %v3_cf94 = load i32, i32* %stack_var_-40, align 4
  %v1_cf98 = add i32 %v3_cf94, 1
  store i32 %v1_cf98, i32* %r0.global-to-local, align 4
  store i32 %v1_c914, i32* %r3.global-to-local, align 4
  %v9_cfa0 = icmp eq i32 %v1_c914, %v1_cf98
  store i1 %v9_cfa0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cf98, i32* %stack_var_-40, align 4
  %v8_cfa8 = icmp sgt i32 %v1_c914, %v1_cf98
  br i1 %v8_cfa8, label %dec_label_pc_cee8.dec_label_pc_cea8_crit_edge, label %dec_label_pc_cfac

dec_label_pc_cee8.dec_label_pc_cea8_crit_edge:    ; preds = %dec_label_pc_cee8
  %v1_ceb4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_cea8

dec_label_pc_cfac:                                ; preds = %dec_label_pc_cee8
  store i32 %v1_c914, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ce88

dec_label_pc_cfbc:                                ; preds = %dec_label_pc_cea8
  %v0_cfbc = call i32 @function_e8e4()
  %v1_cfbc = trunc i32 %v0_cfbc to i8
  store i32 %v0_cfbc, i32* %r0.global-to-local, align 4
  store i32 %v3_cbec, i32* %ip.global-to-local, align 4
  %v4_cfc4 = sdiv i32 %v0_cfbc, 256
  store i32 %v4_cfc4, i32* %r3.global-to-local, align 4
  %v1_cfc8 = load i32, i32* @r6, align 4
  %v9_cfc8 = icmp eq i32 %v3_cbec, %v1_cfc8
  store i1 %v9_cfc8, i1* %cpsr_z.global-to-local, align 1
  %v1_cfcc = trunc i32 %v4_cfc4 to i8
  %v2_cfcc = load i32, i32* @r4, align 4
  %v3_cfcc = add i32 %v2_cfcc, 5
  %v4_cfcc = inttoptr i32 %v3_cfcc to i8*
  store i8 %v1_cfcc, i8* %v4_cfcc, align 1
  %v3_cfd0 = load i32, i32* @r4, align 4
  %v4_cfd0 = add i32 %v3_cfd0, 4
  %v5_cfd0 = inttoptr i32 %v4_cfd0 to i8*
  store i8 %v1_cfbc, i8* %v5_cfd0, align 1
  %v0_cfd4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cfd4, label %dec_label_pc_cfd8, label %dec_label_pc_cfbc.dec_label_pc_ced0_crit_edge

dec_label_pc_cfbc.dec_label_pc_ced0_crit_edge:    ; preds = %dec_label_pc_cfbc
  %v1_ced4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_ced0

dec_label_pc_cfd8:                                ; preds = %dec_label_pc_cfbc, %dec_label_pc_cec4
  %v0_cfd8 = call i32 @function_e8e4()
  %v1_cfd8 = trunc i32 %v0_cfd8 to i8
  store i32 %v0_cfd8, i32* %r0.global-to-local, align 4
  store i32 %v3_cbf0, i32* %lr.global-to-local, align 4
  %v4_cfe0 = sdiv i32 %v0_cfd8, 256
  store i32 %v4_cfe0, i32* %r3.global-to-local, align 4
  %v1_cfe4 = load i32, i32* @r6, align 4
  %v9_cfe4 = icmp eq i32 %v3_cbf0, %v1_cfe4
  store i1 %v9_cfe4, i1* %cpsr_z.global-to-local, align 1
  %v3_cfe8 = load i32, i32* @r4, align 4
  %v4_cfe8 = add i32 %v3_cfe8, 20
  %v5_cfe8 = inttoptr i32 %v4_cfe8 to i8*
  store i8 %v1_cfd8, i8* %v5_cfe8, align 1
  %v0_cfec = load i32, i32* %r3.global-to-local, align 4
  %v1_cfec = trunc i32 %v0_cfec to i8
  %v2_cfec = load i32, i32* @r5, align 4
  %v3_cfec = add i32 %v2_cfec, 1
  %v4_cfec = inttoptr i32 %v3_cfec to i8*
  store i8 %v1_cfec, i8* %v4_cfec, align 1
  %v0_cff0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cff0, label %dec_label_pc_cff4, label %dec_label_pc_cfd8.dec_label_pc_cedc_crit_edge

dec_label_pc_cfd8.dec_label_pc_cedc_crit_edge:    ; preds = %dec_label_pc_cfd8
  %v1_cee0.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_cedc

dec_label_pc_cff4:                                ; preds = %dec_label_pc_cfd8, %dec_label_pc_ced0
  %v0_cff4 = call i32 @function_e8e4()
  %v1_cff4 = trunc i32 %v0_cff4 to i8
  %v4_cff8 = sdiv i32 %v0_cff4, 256
  store i32 %v4_cff8, i32* %r3.global-to-local, align 4
  %v3_cffc = load i32, i32* @r5, align 4
  %v4_cffc = add i32 %v3_cffc, 2
  %v5_cffc = inttoptr i32 %v4_cffc to i8*
  store i8 %v1_cff4, i8* %v5_cffc, align 1
  store i32 %v3_cbf4, i32* %r0.global-to-local, align 4
  %v1_d004 = load i32, i32* @r6, align 4
  %v9_d004 = icmp eq i32 %v3_cbf4, %v1_d004
  store i1 %v9_d004, i1* %cpsr_z.global-to-local, align 1
  %v0_d008 = load i32, i32* %r3.global-to-local, align 4
  %v1_d008 = trunc i32 %v0_d008 to i8
  %v2_d008 = load i32, i32* @r5, align 4
  %v3_d008 = add i32 %v2_d008, 3
  %v4_d008 = inttoptr i32 %v3_d008 to i8*
  store i8 %v1_d008, i8* %v4_d008, align 1
  %v0_d00c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d00c, label %dec_label_pc_d010, label %dec_label_pc_cee8

dec_label_pc_d010:                                ; preds = %dec_label_pc_cff4, %dec_label_pc_cedc
  %v0_d010 = call i32 @function_e8e4()
  %v1_d010 = trunc i32 %v0_d010 to i8
  store i32 %v0_d010, i32* %r0.global-to-local, align 4
  %v4_d014 = sdiv i32 %v0_d010, 256
  store i32 %v4_d014, i32* %r3.global-to-local, align 4
  %v3_d018 = load i32, i32* @r4, align 4
  %v4_d018 = add i32 %v3_d018, 28
  %v5_d018 = inttoptr i32 %v4_d018 to i8*
  store i8 %v1_d010, i8* %v5_d018, align 1
  %v0_d01c = load i32, i32* %r3.global-to-local, align 4
  %v1_d01c = trunc i32 %v0_d01c to i8
  %v2_d01c = load i32, i32* @r8, align 4
  %v3_d01c = add i32 %v2_d01c, 1
  %v4_d01c = inttoptr i32 %v3_d01c to i8*
  store i8 %v1_d01c, i8* %v4_d01c, align 1
  br label %dec_label_pc_cee8

dec_label_pc_d024:                                ; preds = %dec_label_pc_caf0, %dec_label_pc_cabc, %dec_label_pc_ca60, %dec_label_pc_c908
  %v0_d024 = call i32 @function_e8e4()
  %v1_d028 = urem i32 %v0_d024, 4
  store i32 %v1_d028, i32* %r0.global-to-local, align 4
  %v2_d02c = icmp eq i32 %v1_d028, 3
  store i1 %v2_d02c, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_d024 to i2
  switch i2 %trunc, label %dec_label_pc_cb6419 [
    i2 0, label %dec_label_pc_d06c
    i2 1, label %dec_label_pc_d080
    i2 -2, label %dec_label_pc_d08c
    i2 -1, label %dec_label_pc_d09c
  ]

dec_label_pc_d048:                                ; preds = %dec_label_pc_cbc4
  store i32 %v2_cb74, i32* %r0.global-to-local, align 4
  %v4_d04c = sext i8 %v5_cbe0 to i32
  store i32 %v4_d04c, i32* %r1.global-to-local, align 4
  %v2_d050 = add i32 %v4_d04c, %v2_cb74
  store i32 %v2_d050, i32* @fp, align 4
  br label %dec_label_pc_ce7c

dec_label_pc_d058:                                ; preds = %dec_label_pc_cb98
  store i32 %v3_cb88, i32* %r0.global-to-local, align 4
  %v1_d05c = call i32 @function_11960(i32 %v3_cb88)
  store i32 %v1_d05c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d060

dec_label_pc_d060:                                ; preds = %dec_label_pc_cb70, %dec_label_pc_cb64, %dec_label_pc_d058
  %v29_d068 = phi i32 [ %v3_cb88, %dec_label_pc_cb70 ], [ %v29_d06874, %dec_label_pc_cb64 ], [ %v1_d05c, %dec_label_pc_d058 ]
  store i32 %v3_c908, i32* %r4.global-to-local, align 4
  store i32 %v15_c908, i32* %r8.global-to-local, align 4
  store i32 %v18_c908, i32* %sb.global-to-local, align 4
  store i32 %v21_c908, i32* %sl.global-to-local, align 4
  store i32 %v24_c908, i32* %fp.global-to-local, align 4
  ret i32 %v29_d068

dec_label_pc_d06c:                                ; preds = %dec_label_pc_d024
  store i32 134744072, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_cb64

dec_label_pc_d080:                                ; preds = %dec_label_pc_d024
  store i32 707416650, i32* @r4, align 4
  br label %dec_label_pc_cb64

dec_label_pc_d08c:                                ; preds = %dec_label_pc_d024
  store i32 104859200, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_cb64

dec_label_pc_d09c:                                ; preds = %dec_label_pc_d024
  store i32 33686020, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_cb64

; uselistorder directives
  uselistorder i32 %v4_d04c, { 0, 2, 1 }
  uselistorder i32 %v1_d028, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_d024, { 1, 0 }
  uselistorder i32 %v0_d010, { 0, 2, 1 }
  uselistorder i32 %v0_cfd8, { 0, 2, 1 }
  uselistorder i32 %v4_cfc4, { 1, 0 }
  uselistorder i32 %v0_cfbc, { 0, 2, 1 }
  uselistorder i32 %v1_cf98, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_cf34, { 0, 2, 1 }
  uselistorder i32 %v0_cf1c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_cf08, { 1, 0 }
  uselistorder i32 %v2_cf04, { 0, 2, 1 }
  uselistorder i32 %v7_ceb0, { 1, 0, 2 }
  uselistorder i32 %v4_ceec.pre-phi, { 1, 0 }
  uselistorder i32 %v2_ce30, { 1, 0 }
  uselistorder i32 %v1_ce2486, { 1, 0, 2 }
  uselistorder i32 %v1_ce18, { 2, 1, 0 }
  uselistorder i32 %v0_ce18, { 1, 2, 0 }
  uselistorder i32 %v0_ce1831, { 1, 0 }
  uselistorder i32 %v1_ce1832, { 2, 0, 1 }
  uselistorder i8 %extract.t78, { 1, 0 }
  uselistorder i32 %v1_cdec, { 2, 0, 4, 1, 3, 5, 6 }
  uselistorder i32 %v0_cd68, { 1, 0 }
  uselistorder i32 %v3_cca4, { 1, 0, 2 }
  uselistorder i32 %v1_cc6c, { 1, 0 }
  uselistorder i32 %v1_cc60, { 1, 0 }
  uselistorder i32 %v1_cc44, { 1, 0 }
  uselistorder i32 %v1_cc30, { 1, 0 }
  uselistorder i32 %v3_cc28, { 1, 0 }
  uselistorder i32 %v4_cc20, { 0, 4, 2, 5, 3, 1 }
  uselistorder i8 %v5_cbe0, { 1, 0 }
  uselistorder i32 %v0_cbdc, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_cbd0, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_cbbc, { 1, 0 }
  uselistorder i1 %v7_cb8c, { 1, 0 }
  uselistorder i32 %v3_cb88, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_cb74, { 0, 11, 1, 6, 4, 3, 7, 10, 9, 8, 5, 2 }
  uselistorder i32 %stack_var_-2176.0, { 1, 0 }
  uselistorder i32 %v1_cb5c, { 1, 0, 2 }
  uselistorder i1 %v7_cb2c, { 1, 0 }
  uselistorder i32 %v1_cb28, { 1, 0, 2 }
  uselistorder i1 %v8_cb20, { 1, 0 }
  uselistorder i1 %v7_cb1c, { 1, 0 }
  uselistorder i32 %v1_cb10, { 1, 0 }
  uselistorder i8 %v2_cb04, { 2, 0, 1, 3 }
  uselistorder i32 %v0_cb08, { 1, 0 }
  uselistorder i32 %v0_cb28, { 3, 0, 2, 1 }
  uselistorder i32 %v0_caf4, { 0, 2, 1 }
  uselistorder i32 %v1_cb0c, { 0, 2, 1 }
  uselistorder i32 %v2_cadc, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v2_cad4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_cabc, { 1, 2, 0, 3, 4, 5 }
  uselistorder i1 %v7_cab4, { 1, 0 }
  uselistorder i32 %v0_cab4, { 2, 3, 1, 4, 6, 5, 0 }
  uselistorder i32 %v0_ca58, { 1, 0, 3, 2 }
  uselistorder i32 %v5_ca28, { 0, 3, 5, 4, 2, 1, 7, 6 }
  uselistorder i32 %v1_c9ac, { 1, 2, 0 }
  uselistorder i32 %v7_c968, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v6_c944, { 2, 1, 3, 0 }
  uselistorder i32 %v2_c92c, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_c914, { 7, 4, 5, 6, 3, 8, 9, 10, 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 51, 8, 50, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 41, 44, 43, 45, 47, 46, 49, 48, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 2, 3, 4, 7, 6, 8, 10, 9, 11, 13, 12, 14, 15, 16, 17, 68, 18, 19, 1, 33, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 34, 35, 36, 38, 40, 39, 41, 67, 42, 44, 43, 46, 45, 47, 48, 50, 49, 51, 53, 52, 55, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 5, 2, 3, 4, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 0, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 22, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 29, 26, 33, 34, 35 }
  uselistorder i32 41, { 2, 3, 4, 0, 1 }
  uselistorder i32 134744072, { 1, 0 }
  uselistorder i32 707416650, { 1, 0 }
  uselistorder i32 104859200, { 1, 0 }
  uselistorder i32 33686020, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, i32)* @function_85e0, { 67, 68, 69, 70, 71, 72, 73, 74, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 85, 86, 87, 88, 89, 90, 91, 92, 103, 104, 105, 106, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102 }
  uselistorder label %dec_label_pc_d060, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cee8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ce88, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ce7c, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %bb145, { 1, 0 }
  uselistorder label %.thread20, { 1, 0 }
  uselistorder label %dec_label_pc_cb38, { 1, 0 }
  uselistorder label %dec_label_pc_cb2c, { 1, 0 }
  uselistorder label %dec_label_pc_caf0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cae8, { 1, 0 }
}

define i32 @function_d0b8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_d0b8:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_d0e8, label %dec_label_pc_d0c4

dec_label_pc_d0c4:                                ; preds = %dec_label_pc_d0b8
  %v0_d0c8.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_d0c8

dec_label_pc_d0c8:                                ; preds = %dec_label_pc_d0c8, %dec_label_pc_d0c4
  %v0_d0dc = phi i32 [ %v2_d0dc, %dec_label_pc_d0c8 ], [ 0, %dec_label_pc_d0c4 ]
  %v0_d0d0 = phi i32 [ %v1_d0d0, %dec_label_pc_d0c8 ], [ %arg1, %dec_label_pc_d0c4 ]
  %v0_d0e0 = phi i32 [ %v1_d0e0, %dec_label_pc_d0c8 ], [ %v0_d0c8.pre, %dec_label_pc_d0c4 ]
  %v1_d0c8 = inttoptr i32 %v0_d0e0 to i8*
  %v2_d0c8 = load i8, i8* %v1_d0c8, align 1
  %v3_d0c8 = zext i8 %v2_d0c8 to i32
  %v1_d0cc = add i32 %v0_d0e0, 1
  %v2_d0cc = inttoptr i32 %v1_d0cc to i8*
  %v3_d0cc = load i8, i8* %v2_d0cc, align 1
  %v4_d0cc = zext i8 %v3_d0cc to i32
  %v1_d0d0 = add i32 %v0_d0d0, -2
  %v4_d0d4 = mul nuw nsw i32 %v4_d0cc, 256
  %v5_d0d4 = or i32 %v4_d0d4, %v3_d0c8
  %v2_d0dc = add i32 %v5_d0d4, %v0_d0dc
  %v1_d0e0 = add i32 %v0_d0e0, 2
  store i32 %v1_d0e0, i32* @r0, align 4
  %v1_d0d0.cmp = icmp ugt i32 %v1_d0d0, 1
  br i1 %v1_d0d0.cmp, label %dec_label_pc_d0c8, label %dec_label_pc_d0e8

dec_label_pc_d0e8:                                ; preds = %dec_label_pc_d0c8, %dec_label_pc_d0b8
  %v1_d0f0 = phi i32 [ 0, %dec_label_pc_d0b8 ], [ %v2_d0dc, %dec_label_pc_d0c8 ]
  %v0_d0e8 = phi i32 [ %arg1, %dec_label_pc_d0b8 ], [ %v1_d0d0, %dec_label_pc_d0c8 ]
  %v7_d0e8 = icmp eq i32 %v0_d0e8, 1
  br i1 %v7_d0e8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_d0e8
  %v1_d0ec = load i32, i32* @r0, align 4
  %v2_d0ec = inttoptr i32 %v1_d0ec to i8*
  %v3_d0ec = load i8, i8* %v2_d0ec, align 1
  %v4_d0ec = zext i8 %v3_d0ec to i32
  %v3_d0f0 = add i32 %v1_d0f0, %v4_d0ec
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d0e8, %bb
  %v0_d0f4 = phi i32 [ %v1_d0f0, %dec_label_pc_d0e8 ], [ %v3_d0f0, %bb ]
  %v3_d0f8 = urem i32 %v0_d0f4, 65536
  %v4_d0fc = udiv i32 %v0_d0f4, 65536
  %v5_d0fc = add nuw nsw i32 %v4_d0fc, %v3_d0f8
  %v4_d100 = udiv i32 %v5_d0fc, 65536
  %v5_d100 = add nuw nsw i32 %v4_d100, %v5_d0fc
  %v1_d104 = urem i32 %v5_d100, 65536
  %v3_d10c = xor i32 %v1_d104, 65535
  ret i32 %v3_d10c

; uselistorder directives
  uselistorder i32 %v5_d0fc, { 1, 0 }
  uselistorder i32 %v1_d0e0, { 1, 0 }
  uselistorder i32 %v1_d0d0, { 1, 0, 2 }
  uselistorder i32 %v0_d0e0, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_d114(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_d114:
  %v3_d124 = urem i32 %arg2, 65536
  %v1_d128 = add i32 %arg1, 12
  %v1_d12c = inttoptr i32 %v1_d128 to i32*
  %v2_d12c = load i32, i32* %v1_d12c, align 4
  %v3_d12c = add i32 %arg1, 16
  %v4_d12c = inttoptr i32 %v3_d12c to i32*
  %v5_d12c = load i32, i32* %v4_d12c, align 4
  %v7_d130 = icmp sgt i32 %arg3, 1
  br i1 %v7_d130, label %dec_label_pc_d13c.preheader, label %dec_label_pc_d15c

dec_label_pc_d13c.preheader:                      ; preds = %dec_label_pc_d114
  %v0_d13c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_d13c

dec_label_pc_d13c:                                ; preds = %dec_label_pc_d13c.preheader, %dec_label_pc_d13c
  %v0_d150 = phi i32 [ 0, %dec_label_pc_d13c.preheader ], [ %v2_d150, %dec_label_pc_d13c ]
  %v0_d144 = phi i32 [ %arg3, %dec_label_pc_d13c.preheader ], [ %v1_d144, %dec_label_pc_d13c ]
  %v0_d154 = phi i32 [ %v0_d13c.pre, %dec_label_pc_d13c.preheader ], [ %v1_d154, %dec_label_pc_d13c ]
  %v1_d13c = inttoptr i32 %v0_d154 to i8*
  %v2_d13c = load i8, i8* %v1_d13c, align 1
  %v3_d13c = zext i8 %v2_d13c to i32
  %v1_d140 = add i32 %v0_d154, 1
  %v2_d140 = inttoptr i32 %v1_d140 to i8*
  %v3_d140 = load i8, i8* %v2_d140, align 1
  %v4_d140 = zext i8 %v3_d140 to i32
  %v1_d144 = add nsw i32 %v0_d144, -2
  %v4_d148 = mul nuw nsw i32 %v4_d140, 256
  %v5_d148 = or i32 %v4_d148, %v3_d13c
  %v2_d150 = add i32 %v5_d148, %v0_d150
  %v1_d154 = add i32 %v0_d154, 2
  store i32 %v1_d154, i32* @r1, align 4
  %v8_d158 = icmp sgt i32 %v1_d144, 1
  br i1 %v8_d158, label %dec_label_pc_d13c, label %dec_label_pc_d15c

dec_label_pc_d15c:                                ; preds = %dec_label_pc_d13c, %dec_label_pc_d114
  %v1_d164 = phi i32 [ 0, %dec_label_pc_d114 ], [ %v2_d150, %dec_label_pc_d13c ]
  %v0_d15c = phi i32 [ %arg3, %dec_label_pc_d114 ], [ %v1_d144, %dec_label_pc_d13c ]
  %v7_d15c = icmp eq i32 %v0_d15c, 1
  br i1 %v7_d15c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_d15c
  %v1_d160 = load i32, i32* @r1, align 4
  %v2_d160 = inttoptr i32 %v1_d160 to i8*
  %v3_d160 = load i8, i8* %v2_d160, align 1
  %v4_d160 = zext i8 %v3_d160 to i32
  %v3_d164 = add i32 %v4_d160, %v1_d164
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d15c, %bb
  %v0_d188 = phi i32 [ %v1_d164, %dec_label_pc_d15c ], [ %v3_d164, %bb ]
  %v3_d16c = urem i32 %v2_d12c, 65536
  %v1_d174 = add i32 %arg1, 9
  %v2_d174 = inttoptr i32 %v1_d174 to i8*
  %v3_d174 = load i8, i8* %v2_d174, align 1
  %v4_d174 = zext i8 %v3_d174 to i32
  %v3_d178 = urem i32 %v5_d12c, 65536
  %v4_d17c = udiv i32 %v2_d12c, 65536
  %v3_d184 = mul nuw nsw i32 %v4_d174, 256
  %v4_d188 = udiv i32 %v5_d12c, 65536
  %v5_d188 = add i32 %v0_d188, %v4_d188
  %v2_d18c = add i32 %v5_d188, %v3_d184
  %v5_d17c = add nuw nsw i32 %v3_d16c, %v3_d124
  %v2_d180 = add nuw nsw i32 %v5_d17c, %v4_d17c
  %v2_d190 = add nuw nsw i32 %v2_d180, %v3_d178
  %v2_d194 = add i32 %v2_d18c, %v2_d190
  %tmp = icmp ult i32 %v2_d194, 65536
  br i1 %tmp, label %dec_label_pc_d1b4, label %dec_label_pc_d1a0

dec_label_pc_d1a0:                                ; preds = %.thread, %dec_label_pc_d1a0
  %v2_d1a81 = phi i32 [ %v2_d1a8, %dec_label_pc_d1a0 ], [ %v2_d194, %.thread ]
  %v3_d1ac2.in = phi i32 [ %v2_d1a8, %dec_label_pc_d1a0 ], [ %v2_d194, %.thread ]
  %v3_d1ac2 = udiv i32 %v3_d1ac2.in, 65536
  %v3_d1a4 = urem i32 %v2_d1a81, 65536
  %v2_d1a8 = add nuw nsw i32 %v3_d1a4, %v3_d1ac2
  %tmp14 = icmp ult i32 %v2_d1a8, 65536
  br i1 %tmp14, label %dec_label_pc_d1b4.loopexit, label %dec_label_pc_d1a0

dec_label_pc_d1b4.loopexit:                       ; preds = %dec_label_pc_d1a0
  br label %dec_label_pc_d1b4

dec_label_pc_d1b4:                                ; preds = %dec_label_pc_d1b4.loopexit, %.thread
  %v0_d1b4 = phi i32 [ %v2_d1a8, %dec_label_pc_d1b4.loopexit ], [ %v2_d194, %.thread ]
  %v1_d1b4 = urem i32 %v0_d1b4, 65536
  %v3_d1bc = xor i32 %v1_d1b4, 65535
  ret i32 %v3_d1bc

; uselistorder directives
  uselistorder i32 %v2_d1a8, { 2, 1, 3, 0 }
  uselistorder i32 %v2_d194, { 3, 0, 2, 1 }
  uselistorder i32 %v1_d164, { 1, 0 }
  uselistorder i32 %v1_d154, { 1, 0 }
  uselistorder i32 %v1_d144, { 0, 2, 1 }
  uselistorder i32 %v0_d154, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d1a0, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_d13c, { 1, 0 }
}

define i32 @function_d1c4(i32 %arg1) local_unnamed_addr {
dec_label_pc_d1c4:
  %v2_d1c8 = load i32, i32* @global_var_1c944.62, align 4
  %v2_d1d0 = call i32 @function_11a60(i32 %v2_d1c8, i32 9)
  %v0_d1d4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d1d4, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_d1c4
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_d1c4, %bb
  ret i32 %v2_d1d0

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_d1d8(i32 %arg1) local_unnamed_addr {
dec_label_pc_d1d8:
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_d1d8 = load i32, i32* @r4, align 4
  store i32 %v3_d1d8, i32* %stack_var_-36, align 4
  %v6_d1d8 = load i32, i32* @r5, align 4
  %v9_d1d8 = load i32, i32* @r6, align 4
  %v12_d1d8 = load i32, i32* @r7, align 4
  %v15_d1d8 = load i32, i32* @r8, align 4
  %v18_d1d8 = load i32, i32* @sb, align 4
  %v21_d1d8 = load i32, i32* @sl, align 4
  %v24_d1d8 = load i32, i32* @fp, align 4
  %v2_d1ec = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_d1ec, i32* @sl, align 4
  %v3_d1f4 = mul i32 %arg1, 65536
  store i32 %v3_d1f4, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_d200 = ptrtoint i32* %stack_var_-8773 to i32
  %v2_d20c = bitcast i32* %stack_var_-4677 to i8*
  %v3_d20c = call i32 @function_11f70(i8* %v2_d20c, i32 0)
  store i32 4096, i32* @r2, align 4
  %v2_d224 = bitcast i32* %stack_var_-8773 to i8*
  %v3_d224 = call i32 @function_11f70(i8* %v2_d224, i32 0)
  %v2_d228 = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_d228, i32* @r6, align 4
  store i32 513, i32* @r2, align 4
  %v3_d248 = call i32 @function_11f70(i8* nonnull %stack_var_-581, i32 0)
  %v2_d24c = ptrtoint i8* %stack_var_-68 to i32
  %v1_d254 = load i32, i32* @r5, align 4
  %v4_d254 = udiv i32 %v1_d254, 16777216
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_d274 = trunc i32 %v4_d254 to i8
  %v4_d274 = call i32 @function_114c0(i8 %v3_d274, i32 16, i32 %v2_d24c)
  %v2_d27c = call i32 @function_110e0(i8* nonnull %stack_var_-68)
  %v7_d280 = icmp eq i32 %v2_d27c, 2
  br i1 %v7_d280, label %dec_label_pc_d748, label %dec_label_pc_d288

dec_label_pc_d288:                                ; preds = %dec_label_pc_d1d8, %dec_label_pc_d748
  %v1_d28c = call i32 @function_10ae8(i32 15)
  %v1_d294 = call i32 @function_10ae8(i32 16)
  %v1_d29c = call i32 @function_10ae8(i32 17)
  %v1_d2a4 = call i32 @function_10ae8(i32 19)
  %v0_d2a8 = load i32, i32* @r4, align 4
  %v2_d2b0 = inttoptr i32 %v0_d2a8 to i32*
  %v3_d2b0 = call i32 @function_10a04(i32 19, i32* %v2_d2b0)
  %v0_d2b4 = load i32, i32* @r4, align 4
  %v2_d2b8 = inttoptr i32 %v3_d2b0 to i8*
  %v3_d2b8 = call i32 @function_11a8c(i8* %v2_d2b8, i32 %v0_d2b4)
  %v7_d2bc = icmp eq i32 %v3_d2b8, -1
  store i32 %v3_d2b8, i32* @r8, align 4
  br i1 %v7_d2bc, label %dec_label_pc_d6e4, label %dec_label_pc_d2c8.preheader

dec_label_pc_d2c8.preheader:                      ; preds = %dec_label_pc_d288
  %v4_d2d458 = call i32 @function_11338(i8* nonnull %stack_var_-581, i32 512, i32 %v3_d2b8)
  %v2_d2d860 = icmp eq i32 %v4_d2d458, 0
  br i1 %v2_d2d860, label %dec_label_pc_d468.loopexit, label %dec_label_pc_d2e0.lr.ph

dec_label_pc_d2e0.lr.ph:                          ; preds = %dec_label_pc_d2c8.preheader
  %v2_d328 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_d2e0

dec_label_pc_d2e0:                                ; preds = %dec_label_pc_d2e0.lr.ph, %dec_label_pc_d2c8.backedge
  %v3_d2e4 = load i8, i8* %stack_var_-581, align 1
  %v4_d2e4 = sext i8 %v3_d2e4 to i32
  %v2_d2e8 = icmp eq i8 %v3_d2e4, 0
  br i1 %v2_d2e8, label %bb126, label %bb

bb:                                               ; preds = %dec_label_pc_d2e0
  %v8_d2ec = icmp eq i8 %v3_d2e4, 58
  br i1 %v8_d2ec, label %.thread6, label %dec_label_pc_d300

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_d318

bb126:                                            ; preds = %dec_label_pc_d2e0
  br label %dec_label_pc_d318

dec_label_pc_d300:                                ; preds = %bb
  %v1_d308.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_d304

dec_label_pc_d304:                                ; preds = %bb127, %dec_label_pc_d300
  %v0_d304 = phi i32 [ %v1_d304, %bb127 ], [ 0, %dec_label_pc_d300 ]
  %v1_d304 = add i32 %v0_d304, 1
  %v2_d308 = add i32 %v1_d304, %v1_d308.pre
  %v3_d308 = inttoptr i32 %v2_d308 to i8*
  %v4_d308 = load i8, i8* %v3_d308, align 1
  %v6_d308 = zext i8 %v4_d308 to i32
  %v2_d30c = icmp eq i8 %v4_d308, 0
  br i1 %v2_d30c, label %dec_label_pc_d318, label %bb127

bb127:                                            ; preds = %dec_label_pc_d304
  %v8_d310 = icmp eq i8 %v4_d308, 58
  br i1 %v8_d310, label %dec_label_pc_d318, label %dec_label_pc_d304

dec_label_pc_d318:                                ; preds = %dec_label_pc_d304, %bb127, %bb126, %.thread6
  %v1_d344 = phi i32 [ 0, %.thread6 ], [ 0, %bb126 ], [ %v1_d304, %bb127 ], [ %v1_d304, %dec_label_pc_d304 ]
  %v0_d318 = phi i32 [ %v4_d2e4, %.thread6 ], [ %v4_d2e4, %bb126 ], [ %v6_d308, %bb127 ], [ %v6_d308, %dec_label_pc_d304 ]
  %v2_d318 = icmp eq i32 %v0_d318, 0
  br i1 %v2_d318, label %dec_label_pc_d2c8.backedge, label %dec_label_pc_d320

dec_label_pc_d2c8.backedge:                       ; preds = %dec_label_pc_d318, %dec_label_pc_d3f0, %dec_label_pc_d43c, %dec_label_pc_d364
  %v0_d2d0 = load i32, i32* @r8, align 4
  %v4_d2d4 = call i32 @function_11338(i8* nonnull %stack_var_-581, i32 512, i32 %v0_d2d0)
  %v2_d2d8 = icmp eq i32 %v4_d2d4, 0
  br i1 %v2_d2d8, label %dec_label_pc_d468.loopexit, label %dec_label_pc_d2e0

dec_label_pc_d320:                                ; preds = %dec_label_pc_d318
  %v1_d324 = add i32 %v1_d344, 2
  %v2_d32c = add i32 %v1_d324, %v2_d328
  %v1_d330 = add i32 %v2_d32c, -545
  %v2_d330 = inttoptr i32 %v1_d330 to i8*
  %v3_d330 = load i8, i8* %v2_d330, align 1
  %v2_d334 = icmp eq i8 %v3_d330, 0
  br i1 %v2_d334, label %bb129, label %bb128

bb128:                                            ; preds = %dec_label_pc_d320
  %v8_d338 = icmp eq i8 %v3_d330, 32
  br i1 %v8_d338, label %.thread10, label %dec_label_pc_d344

.thread10:                                        ; preds = %bb128
  store i32 %v1_d324, i32* @r5, align 4
  br label %dec_label_pc_d364

bb129:                                            ; preds = %dec_label_pc_d320
  store i32 %v1_d324, i32* @r5, align 4
  br label %dec_label_pc_d364

dec_label_pc_d344:                                ; preds = %bb128
  %v0_d344 = load i32, i32* @r6, align 4
  %v2_d344 = add i32 %v0_d344, %v1_d344
  br label %dec_label_pc_d348

dec_label_pc_d348:                                ; preds = %bb130, %dec_label_pc_d344
  %v0_d35413 = phi i32 [ %v1_d354, %bb130 ], [ %v2_d344, %dec_label_pc_d344 ]
  %v1_d348 = add i32 %v0_d35413, 3
  %v2_d348 = inttoptr i32 %v1_d348 to i8*
  %v3_d348 = load i8, i8* %v2_d348, align 1
  %v2_d34c = icmp eq i8 %v3_d348, 0
  br i1 %v2_d34c, label %.thread12, label %bb130

.thread12:                                        ; preds = %dec_label_pc_d348
  %v1_d35414 = add i32 %v0_d35413, 1
  br label %dec_label_pc_d35c

bb130:                                            ; preds = %dec_label_pc_d348
  %v8_d350 = icmp eq i8 %v3_d348, 32
  %v1_d354 = add i32 %v0_d35413, 1
  br i1 %v8_d350, label %dec_label_pc_d35c, label %dec_label_pc_d348

dec_label_pc_d35c:                                ; preds = %bb130, %.thread12
  %v1_d35415 = phi i32 [ %v1_d35414, %.thread12 ], [ %v1_d354, %bb130 ]
  %v2_d35c = sub i32 %v1_d35415, %v0_d344
  %v1_d360 = add i32 %v2_d35c, 2
  store i32 %v1_d360, i32* @r5, align 4
  br label %dec_label_pc_d364

dec_label_pc_d364:                                ; preds = %bb129, %.thread10, %dec_label_pc_d35c
  %v1_d370 = phi i32 [ %v1_d324, %.thread10 ], [ %v1_d324, %bb129 ], [ %v1_d360, %dec_label_pc_d35c ]
  %v0_d364 = load i32, i32* @r6, align 4
  %v2_d364 = add i32 %v0_d364, %v1_d324
  store i32 %v2_d364, i32* @r4, align 4
  %v2_d370 = add i32 %v1_d370, %v2_d328
  store i32 0, i32* @r7, align 4
  %v3_d37c = add i32 %v2_d370, -545
  %v4_d37c = inttoptr i32 %v3_d37c to i8*
  store i8 0, i8* %v4_d37c, align 1
  %v1_d380 = inttoptr i32 %v2_d364 to i8*
  %v2_d380 = call i32 @function_110e0(i8* %v1_d380)
  store i32 %v2_d380, i32* @r1, align 4
  %v0_d38c = load i32, i32* @r4, align 4
  %v3_d390 = inttoptr i32 %v0_d38c to i8*
  %v4_d390 = call i32 @function_11434(i8* %v3_d390, i32 %v2_d380, i32 %v2_d24c)
  %v7_d394 = icmp eq i32 %v4_d390, -1
  br i1 %v7_d394, label %dec_label_pc_d2c8.backedge, label %dec_label_pc_d3b0.preheader

dec_label_pc_d3b0.preheader:                      ; preds = %dec_label_pc_d364
  %v1_d398 = load i32, i32* @r7, align 4
  %v1_d39c = load i32, i32* @r6, align 4
  %v2_d39c = load i32, i32* @r5, align 4
  %v3_d39c = add i32 %v2_d39c, %v1_d39c
  store i32 %v1_d398, i32* @lr, align 4
  store i32 %v1_d398, i32* @r4, align 4
  %v1_d3b050 = add i32 %v3_d39c, 2
  %v2_d3b051 = inttoptr i32 %v1_d3b050 to i8*
  %v3_d3b052 = load i8, i8* %v2_d3b051, align 1
  %v2_d3b454 = icmp eq i8 %v3_d3b052, 0
  %v1_d3b856 = add i32 %v2_d39c, 2
  br i1 %v2_d3b454, label %dec_label_pc_d3f0, label %dec_label_pc_d3c0

dec_label_pc_d3c0:                                ; preds = %dec_label_pc_d3b0.preheader, %dec_label_pc_d3b0.backedge
  %v0_d3f086 = phi i32 [ %v0_d3f085, %dec_label_pc_d3b0.backedge ], [ %v1_d398, %dec_label_pc_d3b0.preheader ]
  %v0_d3d8.pr = phi i32 [ %v0_d3d8.pr71, %dec_label_pc_d3b0.backedge ], [ %v1_d398, %dec_label_pc_d3b0.preheader ]
  %v0_d6f4 = phi i32 [ %v0_d6f474, %dec_label_pc_d3b0.backedge ], [ %v1_d398, %dec_label_pc_d3b0.preheader ]
  %v0_d3b882 = phi i32 [ %v1_d3b8, %dec_label_pc_d3b0.backedge ], [ %v1_d3b856, %dec_label_pc_d3b0.preheader ]
  %v0_d3e8 = phi i32 [ %v0_d3b0, %dec_label_pc_d3b0.backedge ], [ %v3_d39c, %dec_label_pc_d3b0.preheader ]
  %v1_d3c4.in = phi i8 [ %v3_d3b0, %dec_label_pc_d3b0.backedge ], [ %v3_d3b052, %dec_label_pc_d3b0.preheader ]
  %v7_d3c0 = icmp eq i8 %v1_d3c4.in, 9
  br i1 %v7_d3c0, label %.thread23, label %bb131

bb131:                                            ; preds = %dec_label_pc_d3c0
  %v8_d3c4 = icmp eq i8 %v1_d3c4.in, 32
  br i1 %v8_d3c4, label %.thread23.thread35, label %dec_label_pc_d3d8

.thread23.thread35:                               ; preds = %bb131
  br label %dec_label_pc_d3e4

.thread23:                                        ; preds = %dec_label_pc_d3c0
  br label %dec_label_pc_d3e4

dec_label_pc_d3d8:                                ; preds = %bb131
  %v7_d3d8 = icmp eq i32 %v0_d3d8.pr, 1
  br i1 %v7_d3d8, label %dec_label_pc_d6f4, label %dec_label_pc_d3e0

dec_label_pc_d3e0:                                ; preds = %dec_label_pc_d6f4, %dec_label_pc_d3d8
  %v0_d3e479 = phi i32 [ %v1_d6f4, %dec_label_pc_d6f4 ], [ %v0_d6f4, %dec_label_pc_d3d8 ]
  br label %dec_label_pc_d3e4

dec_label_pc_d3e4:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_d3e0
  %v0_d3e4 = phi i32 [ %v0_d6f4, %.thread23.thread35 ], [ %v0_d6f4, %.thread23 ], [ %v0_d3e479, %dec_label_pc_d3e0 ]
  %v0_d3d8.pr72 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_d3e0 ]
  %v7_d3ec = icmp sgt i32 %v0_d3e4, 6
  br i1 %v7_d3ec, label %dec_label_pc_d3f0, label %dec_label_pc_d3b0.backedge

dec_label_pc_d3f0:                                ; preds = %dec_label_pc_d3b0.backedge, %dec_label_pc_d3e4, %dec_label_pc_d3b0.preheader
  %v1_d440 = phi i32 [ %v1_d3b856, %dec_label_pc_d3b0.preheader ], [ %v1_d3b8, %dec_label_pc_d3b0.backedge ], [ %v0_d3b882, %dec_label_pc_d3e4 ]
  %v0_d3f0 = phi i32 [ %v1_d398, %dec_label_pc_d3b0.preheader ], [ %v0_d3f085, %dec_label_pc_d3b0.backedge ], [ %v0_d3f086, %dec_label_pc_d3e4 ]
  %v2_d3f0 = icmp eq i32 %v0_d3f0, 0
  br i1 %v2_d3f0, label %dec_label_pc_d2c8.backedge, label %dec_label_pc_d3fc

dec_label_pc_d3fc:                                ; preds = %dec_label_pc_d3f0
  %v2_d404 = add i32 %v1_d440, %v2_d328
  %v1_d408 = add i32 %v2_d404, -545
  %v2_d408 = inttoptr i32 %v1_d408 to i8*
  %v3_d408 = load i8, i8* %v2_d408, align 1
  %v2_d40c = icmp eq i8 %v3_d408, 0
  br i1 %v2_d40c, label %dec_label_pc_d43c, label %bb132

bb132:                                            ; preds = %dec_label_pc_d3fc
  %v8_d410 = icmp eq i8 %v3_d408, 32
  br i1 %v8_d410, label %dec_label_pc_d43c, label %dec_label_pc_d418

dec_label_pc_d418:                                ; preds = %bb132
  %v2_d418 = add i32 %v1_d440, %v1_d39c
  br label %dec_label_pc_d41c

dec_label_pc_d41c:                                ; preds = %bb133, %dec_label_pc_d418
  %v0_d42828 = phi i32 [ %v1_d428, %bb133 ], [ %v1_d440, %dec_label_pc_d418 ]
  %v0_d41c = phi i32 [ %v1_d41c, %bb133 ], [ %v2_d418, %dec_label_pc_d418 ]
  %v1_d41c = add i32 %v0_d41c, 1
  %v2_d41c = inttoptr i32 %v1_d41c to i8*
  %v3_d41c = load i8, i8* %v2_d41c, align 1
  %v2_d420 = icmp eq i8 %v3_d41c, 0
  br i1 %v2_d420, label %.thread27, label %bb133

.thread27:                                        ; preds = %dec_label_pc_d41c
  %v1_d42829 = add i32 %v0_d42828, 1
  br label %dec_label_pc_d430

bb133:                                            ; preds = %dec_label_pc_d41c
  %v8_d424 = icmp eq i8 %v3_d41c, 32
  %v1_d428 = add i32 %v0_d42828, 1
  br i1 %v8_d424, label %dec_label_pc_d430, label %dec_label_pc_d41c

dec_label_pc_d430:                                ; preds = %bb133, %.thread27
  %v1_d438 = phi i32 [ %v1_d42829, %.thread27 ], [ %v1_d428, %bb133 ]
  %v2_d438 = add i32 %v1_d438, %v2_d328
  br label %dec_label_pc_d43c

dec_label_pc_d43c:                                ; preds = %dec_label_pc_d3fc, %bb132, %dec_label_pc_d430
  %v2_d448 = phi i32 [ %v2_d404, %dec_label_pc_d3fc ], [ %v2_d404, %bb132 ], [ %v2_d438, %dec_label_pc_d430 ]
  %v2_d440 = add i32 %v1_d440, %v1_d39c
  store i32 %v2_d440, i32* @r4, align 4
  %v3_d448 = add i32 %v2_d448, -545
  %v4_d448 = inttoptr i32 %v3_d448 to i8*
  store i8 0, i8* %v4_d448, align 1
  %v1_d44c = inttoptr i32 %v2_d440 to i8*
  %v2_d44c = call i32 @function_110e0(i8* %v1_d44c)
  %v8_d454 = icmp sgt i32 %v2_d44c, 15
  br i1 %v8_d454, label %dec_label_pc_d2c8.backedge, label %dec_label_pc_d458

dec_label_pc_d458:                                ; preds = %dec_label_pc_d43c
  %v0_d45c = load i32, i32* @r4, align 4
  %v2_d460 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_d460, i32* @r0, align 4
  %v2_d464 = bitcast i32* %stack_var_-52 to i8*
  %v3_d464 = call i32 @function_11108(i8* %v2_d464, i32 %v0_d45c)
  br label %dec_label_pc_d468

dec_label_pc_d468.loopexit:                       ; preds = %dec_label_pc_d2c8.backedge, %dec_label_pc_d2c8.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre95 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_d468

dec_label_pc_d468:                                ; preds = %dec_label_pc_d468.loopexit, %dec_label_pc_d458
  %v1_d478.pre-phi = phi i8* [ %.pre95, %dec_label_pc_d468.loopexit ], [ %v2_d464, %dec_label_pc_d458 ]
  %v2_d474.pre-phi = phi i32 [ %.pre, %dec_label_pc_d468.loopexit ], [ %v2_d460, %dec_label_pc_d458 ]
  %v0_d468 = load i32, i32* @r8, align 4
  %v1_d46c = call i32 @function_11960(i32 %v0_d468)
  %v2_d478 = call i32 @function_110e0(i8* %v1_d478.pre-phi)
  store i32 %v2_d478, i32* @r4, align 4
  %v2_d47c = icmp eq i32 %v2_d478, 0
  br i1 %v2_d47c, label %dec_label_pc_d724, label %dec_label_pc_d484

dec_label_pc_d484:                                ; preds = %dec_label_pc_d468
  %v3_d48c = call i32 @function_10a04(i32 15, i32* null)
  store i32 %v3_d48c, i32* @r0, align 4
  %v1_d490 = call i32 @function_11d3c(i32 %v3_d48c)
  store i32 %v1_d490, i32* @r8, align 4
  %v2_d494 = icmp eq i32 %v1_d490, 0
  br i1 %v2_d494, label %dec_label_pc_d6c4, label %dec_label_pc_d4a4.preheader

dec_label_pc_d4a4.preheader:                      ; preds = %dec_label_pc_d484
  store i32 0, i32* @r5, align 4
  %v1_d4a845 = inttoptr i32 %v1_d490 to i32*
  %v2_d4a846 = call i32 @function_11e38(i32* %v1_d4a845)
  %v2_d4ac48 = icmp eq i32 %v2_d4a846, 0
  br i1 %v2_d4ac48, label %dec_label_pc_d6b8, label %dec_label_pc_d4b4.preheader

dec_label_pc_d4a4.loopexit:                       ; preds = %dec_label_pc_d4bc, %dec_label_pc_d4d0, %dec_label_pc_d538
  %v0_d4a4 = load i32, i32* @r8, align 4
  %v1_d4a8 = inttoptr i32 %v0_d4a4 to i32*
  %v2_d4a8 = call i32 @function_11e38(i32* %v1_d4a8)
  %v2_d4ac = icmp eq i32 %v2_d4a8, 0
  br i1 %v2_d4ac, label %dec_label_pc_d6b8, label %dec_label_pc_d4b4.preheader

dec_label_pc_d4b4.preheader:                      ; preds = %dec_label_pc_d4a4.preheader, %dec_label_pc_d4a4.loopexit
  %v0_d4bc94 = phi i32 [ %v2_d4a8, %dec_label_pc_d4a4.loopexit ], [ %v2_d4a846, %dec_label_pc_d4a4.preheader ]
  br label %dec_label_pc_d4b4

dec_label_pc_d4b4:                                ; preds = %dec_label_pc_d4b4.preheader, %dec_label_pc_d6a0
  %v0_d4c8 = phi i32 [ %v0_d4bc94, %dec_label_pc_d4b4.preheader ], [ %v2_d6ac, %dec_label_pc_d6a0 ]
  %v0_d4b4 = load i32, i32* @r5, align 4
  %v2_d4b4 = icmp eq i32 %v0_d4b4, 0
  br i1 %v2_d4b4, label %dec_label_pc_d4bc, label %dec_label_pc_d6b8

dec_label_pc_d4bc:                                ; preds = %dec_label_pc_d4b4
  %v1_d4bc = add i32 %v0_d4c8, 11
  %v2_d4bc = inttoptr i32 %v1_d4bc to i8*
  %v3_d4bc = load i8, i8* %v2_d4bc, align 1
  %v4_d4bc = zext i8 %v3_d4bc to i32
  %v1_d4c0 = add nsw i32 %v4_d4bc, -48
  store i32 %v1_d4bc, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_d4c0, 9
  br i1 %tmp, label %dec_label_pc_d4a4.loopexit, label %dec_label_pc_d4d0

dec_label_pc_d4d0:                                ; preds = %dec_label_pc_d4bc
  %v3_d4d8 = call i32 @function_10a04(i32 15, i32* null)
  store i32 %v2_d1ec, i32* @r0, align 4
  %v3_d4e4 = call i32 @function_11108(i8* %v2_d20c, i32 %v3_d4d8)
  %v2_d4ec = call i32 @function_110e0(i8* %v2_d20c)
  %v0_d4f0 = load i32, i32* @r7, align 4
  %v0_d4f4 = load i32, i32* @sl, align 4
  %v2_d4f4 = add i32 %v0_d4f4, %v2_d4ec
  store i32 %v2_d4f4, i32* @r0, align 4
  %v2_d4f8 = inttoptr i32 %v2_d4f4 to i8*
  %v3_d4f8 = call i32 @function_11108(i8* %v2_d4f8, i32 %v0_d4f0)
  %v2_d500 = call i32 @function_110e0(i8* %v2_d20c)
  %v0_d504 = load i32, i32* @r5, align 4
  store i32 %v2_d500, i32* @r4, align 4
  %v2_d510 = inttoptr i32 %v0_d504 to i32*
  %v3_d510 = call i32 @function_10a04(i32 16, i32* %v2_d510)
  %v0_d518 = load i32, i32* @sl, align 4
  %v1_d518 = load i32, i32* @r4, align 4
  %v2_d518 = add i32 %v1_d518, %v0_d518
  store i32 %v2_d518, i32* @r0, align 4
  %v2_d51c = inttoptr i32 %v2_d518 to i8*
  %v3_d51c = call i32 @function_11108(i8* %v2_d51c, i32 %v3_d510)
  %v4_d52c = call i32 @function_11b54(i8* %v2_d20c, i32 %v2_d200, i32 4096)
  %v7_d530 = icmp eq i32 %v4_d52c, -1
  br i1 %v7_d530, label %dec_label_pc_d4a4.loopexit, label %dec_label_pc_d538

dec_label_pc_d538:                                ; preds = %dec_label_pc_d4d0
  %v0_d538 = load i32, i32* @r5, align 4
  %v2_d540 = inttoptr i32 %v0_d538 to i32*
  %v3_d540 = call i32 @function_10a04(i32 15, i32* %v2_d540)
  store i32 %v2_d1ec, i32* @r0, align 4
  %v3_d54c = call i32 @function_11108(i8* %v2_d20c, i32 %v3_d540)
  %v2_d554 = call i32 @function_110e0(i8* %v2_d20c)
  %v0_d558 = load i32, i32* @r7, align 4
  %v0_d55c = load i32, i32* @sl, align 4
  %v2_d55c = add i32 %v0_d55c, %v2_d554
  store i32 %v2_d55c, i32* @r0, align 4
  %v2_d560 = inttoptr i32 %v2_d55c to i8*
  %v3_d560 = call i32 @function_11108(i8* %v2_d560, i32 %v0_d558)
  %v2_d568 = call i32 @function_110e0(i8* %v2_d20c)
  %v0_d56c = load i32, i32* @r5, align 4
  store i32 %v2_d568, i32* @r4, align 4
  %v2_d578 = inttoptr i32 %v0_d56c to i32*
  %v3_d578 = call i32 @function_10a04(i32 17, i32* %v2_d578)
  %v0_d580 = load i32, i32* @sl, align 4
  %v1_d580 = load i32, i32* @r4, align 4
  %v2_d580 = add i32 %v1_d580, %v0_d580
  store i32 %v2_d580, i32* @r0, align 4
  %v2_d584 = inttoptr i32 %v2_d580 to i8*
  %v3_d584 = call i32 @function_11108(i8* %v2_d584, i32 %v3_d578)
  store i32 %v2_d1ec, i32* @r0, align 4
  %v1_d58c = call i32 @function_11d3c(i32 %v2_d1ec)
  store i32 %v1_d58c, i32* @sb, align 4
  %v2_d590 = icmp eq i32 %v1_d58c, 0
  br i1 %v2_d590, label %dec_label_pc_d4a4.loopexit, label %dec_label_pc_d598.preheader

dec_label_pc_d598.preheader:                      ; preds = %dec_label_pc_d538
  %v1_d59c40 = inttoptr i32 %v1_d58c to i32*
  %v2_d59c41 = call i32 @function_11e38(i32* %v1_d59c40)
  store i32 %v2_d59c41, i32* @r6, align 4
  %v2_d5a043 = icmp eq i32 %v2_d59c41, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_d200, i32* @r0, align 4
  br i1 %v2_d5a043, label %dec_label_pc_d6a0, label %dec_label_pc_d5b0thread-pre-split

dec_label_pc_d598.loopexit:                       ; preds = %dec_label_pc_d5b8, %dec_label_pc_d650
  %v0_d598 = load i32, i32* @sb, align 4
  %v1_d59c = inttoptr i32 %v0_d598 to i32*
  %v2_d59c = call i32 @function_11e38(i32* %v1_d59c)
  store i32 %v2_d59c, i32* @r6, align 4
  %v2_d5a0 = icmp eq i32 %v2_d59c, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_d200, i32* @r0, align 4
  br i1 %v2_d5a0, label %dec_label_pc_d6a0, label %dec_label_pc_d5b0thread-pre-split

dec_label_pc_d5b0thread-pre-split:                ; preds = %dec_label_pc_d598.preheader, %dec_label_pc_d598.loopexit
  %v0_d5b0.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_d5b0

dec_label_pc_d5b0:                                ; preds = %dec_label_pc_d5b0thread-pre-split, %dec_label_pc_d678
  %v0_d5b0 = phi i32 [ %v0_d5b0.pr, %dec_label_pc_d5b0thread-pre-split ], [ 1, %dec_label_pc_d678 ]
  %v2_d5b0 = icmp eq i32 %v0_d5b0, 0
  br i1 %v2_d5b0, label %dec_label_pc_d5b8, label %dec_label_pc_d6a0

dec_label_pc_d5b8:                                ; preds = %dec_label_pc_d5b0
  %v0_d5b8 = call i32 @function_11180()
  %v0_d5bc = load i32, i32* @r5, align 4
  %v2_d5c4 = inttoptr i32 %v0_d5bc to i32*
  %v3_d5c4 = call i32 @function_10a04(i32 15, i32* %v2_d5c4)
  store i32 %v2_d1ec, i32* @r0, align 4
  %v3_d5d0 = call i32 @function_11108(i8* %v2_d20c, i32 %v3_d5c4)
  %v2_d5d8 = call i32 @function_110e0(i8* %v2_d20c)
  %v0_d5dc = load i32, i32* @r7, align 4
  %v0_d5e0 = load i32, i32* @sl, align 4
  %v2_d5e0 = add i32 %v0_d5e0, %v2_d5d8
  store i32 %v2_d5e0, i32* @r0, align 4
  %v2_d5e4 = inttoptr i32 %v2_d5e0 to i8*
  %v3_d5e4 = call i32 @function_11108(i8* %v2_d5e4, i32 %v0_d5dc)
  %v2_d5ec = call i32 @function_110e0(i8* %v2_d20c)
  %v0_d5f0 = load i32, i32* @r5, align 4
  store i32 %v2_d5ec, i32* @r4, align 4
  %v2_d5fc = inttoptr i32 %v0_d5f0 to i32*
  %v3_d5fc = call i32 @function_10a04(i32 17, i32* %v2_d5fc)
  %v0_d604 = load i32, i32* @sl, align 4
  %v1_d604 = load i32, i32* @r4, align 4
  %v2_d604 = add i32 %v1_d604, %v0_d604
  store i32 %v2_d604, i32* @r0, align 4
  %v2_d608 = inttoptr i32 %v2_d604 to i8*
  %v3_d608 = call i32 @function_11108(i8* %v2_d608, i32 %v3_d5fc)
  %v2_d610 = call i32 @function_110e0(i8* %v2_d20c)
  %v0_d618 = load i32, i32* @sl, align 4
  %v2_d618 = add i32 %v0_d618, %v2_d610
  store i32 %v2_d618, i32* @r0, align 4
  %v2_d61c = inttoptr i32 %v2_d618 to i8*
  %v3_d61c = call i32 @function_11108(i8* %v2_d61c, i32 ptrtoint (i32* @global_var_141d4.64 to i32))
  %v2_d624 = call i32 @function_110e0(i8* %v2_d20c)
  %v0_d628 = load i32, i32* @r6, align 4
  %v1_d628 = add i32 %v0_d628, 11
  %v0_d62c = load i32, i32* @sl, align 4
  %v2_d62c = add i32 %v0_d62c, %v2_d624
  store i32 %v2_d62c, i32* @r0, align 4
  %v2_d630 = inttoptr i32 %v2_d62c to i8*
  %v3_d630 = call i32 @function_11108(i8* %v2_d630, i32 %v1_d628)
  %v4_d640 = call i32 @function_11b54(i8* %v2_d20c, i32 %v2_d200, i32 4096)
  %v7_d644 = icmp eq i32 %v4_d640, -1
  br i1 %v7_d644, label %dec_label_pc_d598.loopexit, label %dec_label_pc_d650

dec_label_pc_d650:                                ; preds = %dec_label_pc_d5b8
  %v2_d650 = call i32 @function_110e0(i8* %v2_d224)
  store i32 %v2_d650, i32* @r1, align 4
  %v4_d664 = call i32 @function_11434(i8* %v2_d224, i32 %v2_d650, i32 %v2_d474.pre-phi)
  %v7_d668 = icmp eq i32 %v4_d664, -1
  br i1 %v7_d668, label %dec_label_pc_d598.loopexit, label %dec_label_pc_d678

dec_label_pc_d678:                                ; preds = %dec_label_pc_d650
  %v0_d670 = load i32, i32* @r7, align 4
  %v2_d678 = inttoptr i32 %v0_d670 to i8*
  %v3_d678 = call i32 @function_1120c(i8* %v2_d678, i32 10)
  %v2_d680 = call i32 @function_11a60(i32 %v3_d678, i32 9)
  %v0_d684 = load i32, i32* @sb, align 4
  %v1_d688 = inttoptr i32 %v0_d684 to i32*
  %v2_d688 = call i32 @function_11e38(i32* %v1_d688)
  store i32 %v2_d688, i32* @r6, align 4
  %v2_d68c = icmp eq i32 %v2_d688, 0
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_d200, i32* @r0, align 4
  br i1 %v2_d68c, label %dec_label_pc_d6a0, label %dec_label_pc_d5b0

dec_label_pc_d6a0:                                ; preds = %dec_label_pc_d598.loopexit, %dec_label_pc_d678, %dec_label_pc_d5b0, %dec_label_pc_d598.preheader
  %v0_d6a0 = load i32, i32* @sb, align 4
  %v1_d6a4 = inttoptr i32 %v0_d6a0 to i32*
  %v2_d6a4 = call i32 @function_11c88(i32* %v1_d6a4)
  %v0_d6a8 = load i32, i32* @r8, align 4
  %v1_d6ac = inttoptr i32 %v0_d6a8 to i32*
  %v2_d6ac = call i32 @function_11e38(i32* %v1_d6ac)
  %v2_d6b0 = icmp eq i32 %v2_d6ac, 0
  br i1 %v2_d6b0, label %dec_label_pc_d6b8, label %dec_label_pc_d4b4

dec_label_pc_d6b8:                                ; preds = %dec_label_pc_d4a4.loopexit, %dec_label_pc_d6a0, %dec_label_pc_d4b4, %dec_label_pc_d4a4.preheader
  %v0_d6b8 = load i32, i32* @r8, align 4
  %v1_d6bc = inttoptr i32 %v0_d6b8 to i32*
  %v2_d6bc = call i32 @function_11c88(i32* %v1_d6bc)
  %v0_d6c0 = load i32, i32* @r5, align 4
  %v1_d6c0 = urem i32 %v0_d6c0, 256
  br label %dec_label_pc_d6c4

dec_label_pc_d6c4:                                ; preds = %dec_label_pc_d484, %dec_label_pc_d6b8
  %storemerge = phi i32 [ %v1_d6c0, %dec_label_pc_d6b8 ], [ 0, %dec_label_pc_d484 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_d6c8 = call i32 @function_12d68(i32 1)
  %v1_d6d0 = call i32 @function_10a30(i32 15)
  %v1_d6d8 = call i32 @function_10a30(i32 16)
  %v1_d6e0 = call i32 @function_10a30(i32 17)
  br label %dec_label_pc_d6e4

dec_label_pc_d6e4:                                ; preds = %dec_label_pc_d288, %dec_label_pc_d724, %dec_label_pc_d6c4
  %v0_d6e4 = load i32, i32* @r4, align 4
  %v2_d6f0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_d6f0, i32* @r4, align 4
  store i32 %v6_d1d8, i32* @r5, align 4
  store i32 %v9_d1d8, i32* @r6, align 4
  store i32 %v12_d1d8, i32* @r7, align 4
  store i32 %v15_d1d8, i32* @r8, align 4
  store i32 %v18_d1d8, i32* @sb, align 4
  store i32 %v21_d1d8, i32* @sl, align 4
  store i32 %v24_d1d8, i32* @fp, align 4
  ret i32 %v0_d6e4

dec_label_pc_d6f4:                                ; preds = %dec_label_pc_d3d8
  %v1_d6f4 = add i32 %v0_d6f4, 1
  store i32 %v1_d6f4, i32* @lr, align 4
  %v7_d6f8 = icmp eq i32 %v0_d6f4, 0
  br i1 %v7_d6f8, label %dec_label_pc_d700, label %dec_label_pc_d3e0

dec_label_pc_d700:                                ; preds = %dec_label_pc_d6f4
  %v1_d700 = add i32 %v0_d3e8, 3
  %v2_d700 = inttoptr i32 %v1_d700 to i8*
  %v3_d700 = load i8, i8* %v2_d700, align 1
  %v7_d704 = icmp eq i8 %v3_d700, 65
  br i1 %v7_d704, label %dec_label_pc_d714, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_d700
  br label %dec_label_pc_d3b0.backedge

dec_label_pc_d714:                                ; preds = %dec_label_pc_d700
  store i32 %v1_d6f4, i32* @r4, align 4
  br label %dec_label_pc_d3b0.backedge

dec_label_pc_d3b0.backedge:                       ; preds = %.thread33, %dec_label_pc_d714, %dec_label_pc_d3e4
  %v0_d3f085 = phi i32 [ %v1_d6f4, %dec_label_pc_d714 ], [ %v0_d3f086, %dec_label_pc_d3e4 ], [ %v0_d3f086, %.thread33 ]
  %v0_d6f474 = phi i32 [ %v1_d6f4, %dec_label_pc_d714 ], [ %v0_d3e4, %dec_label_pc_d3e4 ], [ %v1_d6f4, %.thread33 ]
  %v0_d3d8.pr71 = phi i32 [ 0, %dec_label_pc_d714 ], [ %v0_d3d8.pr72, %dec_label_pc_d3e4 ], [ 0, %.thread33 ]
  %v0_d3b0 = add i32 %v0_d3e8, 1
  %v1_d3b0 = add i32 %v0_d3e8, 3
  %v2_d3b0 = inttoptr i32 %v1_d3b0 to i8*
  %v3_d3b0 = load i8, i8* %v2_d3b0, align 1
  %v2_d3b4 = icmp eq i8 %v3_d3b0, 0
  %v1_d3b8 = add i32 %v0_d3b882, 1
  br i1 %v2_d3b4, label %dec_label_pc_d3f0, label %dec_label_pc_d3c0

dec_label_pc_d724:                                ; preds = %dec_label_pc_d468
  %v1_d728 = call i32 @function_10a30(i32 15)
  %v1_d730 = call i32 @function_10a30(i32 16)
  %v1_d738 = call i32 @function_10a30(i32 17)
  %v1_d740 = call i32 @function_10a30(i32 19)
  br label %dec_label_pc_d6e4

dec_label_pc_d748:                                ; preds = %dec_label_pc_d1d8
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_d288

; uselistorder directives
  uselistorder i32 %v1_d3b8, { 1, 0 }
  uselistorder i8 %v3_d3b0, { 1, 0 }
  uselistorder i32 %v0_d3f085, { 1, 0 }
  uselistorder i32 %v1_d6f4, { 4, 3, 0, 2, 5, 1 }
  uselistorder i32 %v2_d6ac, { 1, 0 }
  uselistorder i32 %v1_d41c, { 1, 0 }
  uselistorder i32 %v0_d42828, { 1, 0 }
  uselistorder i32 %v1_d440, { 0, 3, 1, 2 }
  uselistorder i32 %v0_d3e4, { 1, 0 }
  uselistorder i32 %v0_d3b882, { 1, 0 }
  uselistorder i32 %v0_d6f4, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_d3f086, { 1, 2, 0 }
  uselistorder i32 %v1_d3b856, { 1, 0 }
  uselistorder i32 %v2_d39c, { 1, 0 }
  uselistorder i32 %v1_d398, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v0_d35413, { 1, 0, 2 }
  uselistorder i32 %v0_d344, { 1, 0 }
  uselistorder i32 %v1_d324, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_d2b8, { 1, 2, 0 }
  uselistorder i32 %v2_d200, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_d1ec, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-581, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32)* @function_1120c, { 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @function_11338, { 1, 0 }
  uselistorder label %dec_label_pc_d3b0.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d6e4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d6c4, { 1, 0 }
  uselistorder label %dec_label_pc_d6b8, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_d6a0, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_d5b0, { 1, 0 }
  uselistorder label %dec_label_pc_d5b0thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_d598.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_d4b4, { 1, 0 }
  uselistorder label %dec_label_pc_d4b4.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_d4a4.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d43c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d3e4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d3c0, { 1, 0 }
  uselistorder label %dec_label_pc_d364, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d2c8.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_d318, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_d2e0, { 1, 0 }
  uselistorder label %dec_label_pc_d288, { 1, 0 }
}

define i32 @function_d774(i32 %arg1) local_unnamed_addr {
dec_label_pc_d774:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-204 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-4300 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-208 = alloca i32, align 4
  %stack_var_-4304 = alloca i32, align 4
  %v3_d774 = load i32, i32* @r4, align 4
  %v6_d774 = load i32, i32* @r5, align 4
  %v9_d774 = load i32, i32* @r6, align 4
  %v12_d774 = load i32, i32* @r7, align 4
  %v15_d774 = load i32, i32* @r8, align 4
  %v18_d774 = load i32, i32* @sb, align 4
  %v21_d774 = load i32, i32* @sl, align 4
  %v24_d774 = load i32, i32* @fp, align 4
  %v2_d784 = call i32 @function_11c30(i32* null)
  store i32 %v2_d784, i32* @sl, align 4
  %v0_d78c = call i32 @function_1198c()
  %v7_d790 = icmp eq i32 %v0_d78c, -1
  %. = zext i1 %v7_d790 to i32
  %tmp100 = icmp slt i32 %v0_d78c, 1
  %storemerge72 = select i1 %tmp100, i32 %., i32 1
  store i32 %storemerge72, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1c944.62 to i32), i32* %r3.global-to-local, align 4
  %v2_d7ac = icmp eq i32 %storemerge72, 0
  store i32 %v0_d78c, i32* @global_var_1c944.62, align 4
  br i1 %v2_d7ac, label %dec_label_pc_d7c4, label %dec_label_pc_d7b8

dec_label_pc_d7b8:                                ; preds = %dec_label_pc_db1c, %dec_label_pc_da1c, %dec_label_pc_d774
  %v29_d7c0 = phi i32 [ %v3_dac0, %dec_label_pc_da1c ], [ %v0_d78c, %dec_label_pc_d774 ], [ 0, %dec_label_pc_db1c ]
  store i32 %v3_d774, i32* @r4, align 4
  store i32 %v6_d774, i32* @r5, align 4
  store i32 %v9_d774, i32* @r6, align 4
  store i32 %v12_d774, i32* @r7, align 4
  store i32 %v15_d774, i32* @r8, align 4
  store i32 %v18_d774, i32* @sb, align 4
  store i32 %v21_d774, i32* @sl, align 4
  store i32 %v24_d774, i32* @fp, align 4
  ret i32 %v29_d7c0

dec_label_pc_d7c4:                                ; preds = %dec_label_pc_d774
  %v2_d7c4 = ptrtoint i32* %stack_var_-208 to i32
  store i32 %v2_d7c4, i32* %r3.global-to-local, align 4
  store i32 2, i32* @r6, align 4
  store i32 2, i32* %stack_var_-76, align 4
  %v1_d7e0 = call i32 @function_d1d8(i32 58811)
  store i32 %v2_d7c4, i32* %r3.global-to-local, align 4
  %v0_d7f8 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d800 = load i32, i32* @r5, align 4
  store i32 %v0_d800, i32* %r2.global-to-local, align 4
  %v3_d808 = call i32 @function_1224c(i32 %v0_d7f8, i32 1, i32 %v0_d800)
  %v7_d80c = icmp eq i32 %v3_d808, -1
  store i32 %v3_d808, i32* @r4, align 4
  br i1 %v7_d80c, label %dec_label_pc_d834, label %dec_label_pc_d818

dec_label_pc_d818:                                ; preds = %dec_label_pc_d7c4
  %v2_d81c = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_d81c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d824 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v4_d824 = call i32 @function_1207c(i32 %v3_d808, %sockaddr* %v3_d824, i32 16)
  %v0_d828 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d830 = call i32 @function_12130(i32 %v0_d828, i32 1)
  br label %dec_label_pc_d834

dec_label_pc_d834:                                ; preds = %dec_label_pc_d7c4, %dec_label_pc_d818
  %v1_d83c = call i32 @function_d1d8(i32 50951)
  store i32 %v2_d7c4, i32* %r3.global-to-local, align 4
  %v0_d854 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d85c = load i32, i32* @r5, align 4
  store i32 %v0_d85c, i32* %r2.global-to-local, align 4
  %v3_d864 = call i32 @function_1224c(i32 %v0_d854, i32 1, i32 %v0_d85c)
  %v7_d868 = icmp eq i32 %v3_d864, -1
  store i32 %v3_d864, i32* @r4, align 4
  br i1 %v7_d868, label %dec_label_pc_d890, label %dec_label_pc_d874

dec_label_pc_d874:                                ; preds = %dec_label_pc_d834
  %v2_d878 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_d878, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d880 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v4_d880 = call i32 @function_1207c(i32 %v3_d864, %sockaddr* %v3_d880, i32 16)
  %v0_d884 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d88c = call i32 @function_12130(i32 %v0_d884, i32 1)
  br label %dec_label_pc_d890

dec_label_pc_d890:                                ; preds = %dec_label_pc_d834, %dec_label_pc_d874
  %v0_d890 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d898 = load i32, i32* @r5, align 4
  store i32 %v0_d898, i32* %r2.global-to-local, align 4
  %v3_d89c = call i32 @function_1224c(i32 %v0_d890, i32 1, i32 %v0_d898)
  %v7_d8a0 = icmp eq i32 %v3_d89c, -1
  store i32 %v3_d89c, i32* @r4, align 4
  br i1 %v7_d8a0, label %dec_label_pc_d8c8, label %dec_label_pc_d8ac

dec_label_pc_d8ac:                                ; preds = %dec_label_pc_d890
  %v2_d8b0 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_d8b0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d8b8 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v4_d8b8 = call i32 @function_1207c(i32 %v3_d89c, %sockaddr* %v3_d8b8, i32 16)
  %v0_d8bc = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d8c4 = call i32 @function_12130(i32 %v0_d8bc, i32 1)
  br label %dec_label_pc_d8c8

dec_label_pc_d8c8:                                ; preds = %dec_label_pc_d890, %dec_label_pc_d8ac
  %v1_d8cc = call i32 @function_d1d8(i32 5632)
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_d8d8 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d8e0 = load i32, i32* @r5, align 4
  store i32 %v0_d8e0, i32* %r2.global-to-local, align 4
  %v3_d8ec = call i32 @function_1224c(i32 %v0_d8d8, i32 1, i32 %v0_d8e0)
  %v7_d8f0 = icmp eq i32 %v3_d8ec, -1
  store i32 %v3_d8ec, i32* @r4, align 4
  br i1 %v7_d8f0, label %dec_label_pc_d918, label %dec_label_pc_d8fc

dec_label_pc_d8fc:                                ; preds = %dec_label_pc_d8c8
  %v2_d900 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_d900, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d908 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v4_d908 = call i32 @function_1207c(i32 %v3_d8ec, %sockaddr* %v3_d908, i32 16)
  %v0_d90c = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d914 = call i32 @function_12130(i32 %v0_d90c, i32 1)
  br label %dec_label_pc_d918

dec_label_pc_d918:                                ; preds = %dec_label_pc_d8c8, %dec_label_pc_d8fc
  %v1_d91c = call i32 @function_d1d8(i32 5888)
  store i32 23, i32* %r3.global-to-local, align 4
  %v0_d928 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d930 = load i32, i32* @r5, align 4
  store i32 %v0_d930, i32* %r2.global-to-local, align 4
  %v3_d93c = call i32 @function_1224c(i32 %v0_d928, i32 1, i32 %v0_d930)
  %v7_d940 = icmp eq i32 %v3_d93c, -1
  store i32 %v3_d93c, i32* @r4, align 4
  br i1 %v7_d940, label %dec_label_pc_d968, label %dec_label_pc_d94c

dec_label_pc_d94c:                                ; preds = %dec_label_pc_d918
  %v2_d950 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_d950, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d958 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v4_d958 = call i32 @function_1207c(i32 %v3_d93c, %sockaddr* %v3_d958, i32 16)
  %v0_d95c = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d964 = call i32 @function_12130(i32 %v0_d95c, i32 1)
  br label %dec_label_pc_d968

dec_label_pc_d968:                                ; preds = %dec_label_pc_d918, %dec_label_pc_d94c
  %v1_d970 = call i32 @function_d1d8(i32 14597)
  store i32 5, i32* @r7, align 4
  store i32 57, i32* %r3.global-to-local, align 4
  %v0_d980 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d988 = load i32, i32* @r5, align 4
  store i32 %v0_d988, i32* %r2.global-to-local, align 4
  %v3_d994 = call i32 @function_1224c(i32 %v0_d980, i32 1, i32 %v0_d988)
  %v7_d998 = icmp eq i32 %v3_d994, -1
  store i32 %v3_d994, i32* @r4, align 4
  br i1 %v7_d998, label %dec_label_pc_d9c0, label %dec_label_pc_d9a4

dec_label_pc_d9a4:                                ; preds = %dec_label_pc_d968
  %v2_d9a8 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_d9a8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d9b0 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v4_d9b0 = call i32 @function_1207c(i32 %v3_d994, %sockaddr* %v3_d9b0, i32 16)
  %v0_d9b4 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d9bc = call i32 @function_12130(i32 %v0_d9b4, i32 1)
  br label %dec_label_pc_d9c0

dec_label_pc_d9c0:                                ; preds = %dec_label_pc_d968, %dec_label_pc_d9a4
  %v1_d9c8 = call i32 @function_d1d8(i32 49411)
  store i32 %v2_d7c4, i32* %r3.global-to-local, align 4
  %v0_d9e0 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d9e8 = load i32, i32* @r5, align 4
  store i32 %v0_d9e8, i32* %r2.global-to-local, align 4
  %v3_d9f0 = call i32 @function_1224c(i32 %v0_d9e0, i32 1, i32 %v0_d9e8)
  %v7_d9f4 = icmp eq i32 %v3_d9f0, -1
  store i32 %v3_d9f0, i32* @r4, align 4
  br i1 %v7_d9f4, label %dec_label_pc_da1c, label %dec_label_pc_da00

dec_label_pc_da00:                                ; preds = %dec_label_pc_d9c0
  %v2_da04 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_da04, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_da0c = bitcast i32* %stack_var_-76 to %sockaddr*
  %v4_da0c = call i32 @function_1207c(i32 %v3_d9f0, %sockaddr* %v3_da0c, i32 16)
  %v0_da10 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_da18 = call i32 @function_12130(i32 %v0_da10, i32 1)
  br label %dec_label_pc_da1c

dec_label_pc_da1c:                                ; preds = %dec_label_pc_d9c0, %dec_label_pc_da00
  %v0_da1c = load i32, i32* @r7, align 4
  %v1_da20 = call i32 @function_12d68(i32 %v0_da1c)
  %v1_da28 = call i32 @function_123e4(i32 4096)
  store i32 ptrtoint (i32* @global_var_1c940.67 to i32), i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1c8a4.69 to i32), i32* %r3.global-to-local, align 4
  store i32 %v1_da28, i32* %r2.global-to-local, align 4
  %v0_da38 = load i32, i32* @r5, align 4
  %v1_da38 = trunc i32 %v0_da38 to i8
  %v3_da38 = inttoptr i32 %v1_da28 to i8*
  store i8 %v1_da38, i8* %v3_da38, align 1
  %v0_da40 = load i32, i32* @r5, align 4
  %v1_da40 = load i32, i32* %r3.global-to-local, align 4
  %v2_da40 = inttoptr i32 %v1_da40 to i32*
  store i32 %v0_da40, i32* %v2_da40, align 4
  %v0_da44 = load i32, i32* %r2.global-to-local, align 4
  %v1_da44 = load i32, i32* @r8, align 4
  %v2_da44 = inttoptr i32 %v1_da44 to i32*
  store i32 %v0_da44, i32* %v2_da44, align 4
  %v1_da48 = call i32 @function_10ae8(i32 15)
  %v1_da50 = call i32 @function_10ae8(i32 16)
  %v0_da54 = load i32, i32* @r5, align 4
  store i32 %v0_da54, i32* %r1.global-to-local, align 4
  %v2_da5c = inttoptr i32 %v0_da54 to i32*
  %v3_da5c = call i32 @function_10a04(i32 15, i32* %v2_da5c)
  %v2_da64 = ptrtoint i32* %stack_var_-4300 to i32
  store i32 %v2_da64, i32* @r7, align 4
  store i32 %v3_da5c, i32* %r1.global-to-local, align 4
  store i32 %v2_da64, i32* @r0, align 4
  %v2_da70 = bitcast i32* %stack_var_-4300 to i8*
  %v3_da70 = call i32 @function_11108(i8* %v2_da70, i32 %v3_da5c)
  %v0_da74 = load i32, i32* @r7, align 4
  %v2_da74 = add i32 %v0_da74, %v3_da70
  store i32 %v2_da74, i32* @r4, align 4
  %v0_da78 = call i32 @function_119b8()
  %v2_da80 = ptrtoint i32* %stack_var_-60 to i32
  store i32 %v2_da80, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_da88 = trunc i32 %v0_da78 to i8
  %v4_da88 = call i32 @function_114c0(i8 %v3_da88, i32 10, i32 %v2_da80)
  store i32 %v4_da88, i32* %r1.global-to-local, align 4
  %v0_da90 = load i32, i32* @r4, align 4
  store i32 %v0_da90, i32* @r0, align 4
  %v2_da94 = inttoptr i32 %v0_da90 to i8*
  %v3_da94 = call i32 @function_11108(i8* %v2_da94, i32 %v4_da88)
  %v0_da98 = load i32, i32* @r5, align 4
  store i32 %v0_da98, i32* %r1.global-to-local, align 4
  %v0_da9c = load i32, i32* @r4, align 4
  %v2_da9c = add i32 %v0_da9c, %v3_da94
  store i32 %v2_da9c, i32* @r4, align 4
  %v2_daa4 = inttoptr i32 %v0_da98 to i32*
  %v3_daa4 = call i32 @function_10a04(i32 16, i32* %v2_daa4)
  store i32 %v3_daa4, i32* %r1.global-to-local, align 4
  %v0_daac = load i32, i32* @r4, align 4
  store i32 %v0_daac, i32* @r0, align 4
  %v2_dab0 = inttoptr i32 %v0_daac to i8*
  %v3_dab0 = call i32 @function_11108(i8* %v2_dab0, i32 %v3_daa4)
  %v0_dab4 = load i32, i32* @r5, align 4
  store i32 %v0_dab4, i32* %r1.global-to-local, align 4
  store i32 %v3_dab0, i32* @r6, align 4
  %v3_dac0 = call i32 @function_11a8c(i8* %v2_da70, i32 %v0_dab4)
  %v7_dac4 = icmp eq i32 %v3_dac0, -1
  br i1 %v7_dac4, label %dec_label_pc_d7b8, label %dec_label_pc_dacc

dec_label_pc_dacc:                                ; preds = %dec_label_pc_da1c
  %v1_dacc = call i32 @function_11960(i32 %v3_dac0)
  %v1_dad4 = call i32 @function_10a30(i32 15)
  %v1_dadc = call i32 @function_10a30(i32 16)
  store i32 4095, i32* %r2.global-to-local, align 4
  %v2_dae8 = load i32, i32* @global_var_1c940.67, align 4
  store i32 %v2_dae8, i32* %r1.global-to-local, align 4
  %v4_daf0 = call i32 @function_11b54(i8* %v2_da70, i32 %v2_dae8, i32 4095)
  %v7_daf4 = icmp eq i32 %v4_daf0, -1
  br i1 %v7_daf4, label %.thread2, label %bb103

.thread2:                                         ; preds = %dec_label_pc_dacc
  %v0_dafc3 = load i32, i32* @r4, align 4
  %v1_dafc4 = load i32, i32* @r6, align 4
  %v2_dafc5 = add i32 %v1_dafc4, %v0_dafc3
  store i32 %v2_dafc5, i32* %r1.global-to-local, align 4
  br label %bb104

bb103:                                            ; preds = %dec_label_pc_dacc
  %v3_daf8 = load i32, i32* @global_var_1c940.67, align 4
  store i32 %v3_daf8, i32* %r3.global-to-local, align 4
  %v0_dafc = load i32, i32* @r4, align 4
  %v1_dafc = load i32, i32* @r6, align 4
  %v2_dafc = add i32 %v1_dafc, %v0_dafc
  store i32 %v2_dafc, i32* %r1.global-to-local, align 4
  %v1_db00 = load i32, i32* @r5, align 4
  %v2_db00 = trunc i32 %v1_db00 to i8
  %v5_db00 = add i32 %v3_daf8, %v4_daf0
  %v6_db00 = inttoptr i32 %v5_db00 to i8*
  store i8 %v2_db00, i8* %v6_db00, align 1
  %v1_db04.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb104

bb104:                                            ; preds = %.thread2, %bb103
  %v1_db04 = phi i32 [ %v2_dafc5, %.thread2 ], [ %v1_db04.pre, %bb103 ]
  %v0_db04 = load i32, i32* @r7, align 4
  %v2_db04 = sub i32 %v1_db04, %v0_db04
  store i32 %v2_db04, i32* @r1, align 4
  store i32 %v2_da64, i32* @r0, align 4
  %v0_db0c = call i32 @function_11180()
  %v0_db10 = load i32, i32* @r5, align 4
  store i32 %v0_db10, i32* @fp, align 4
  %v0_db14 = load i32, i32* @sl, align 4
  store i32 %v0_db14, i32* @r4, align 4
  store i32 400, i32* @r5, align 4
  %v2_dc08 = ptrtoint i32* %stack_var_-204 to i32
  %v2_dc0c = bitcast i32* %stack_var_-204 to i8*
  %v2_dc58 = ptrtoint i32* %stack_var_-140 to i32
  %v2_dc5c = bitcast i32* %stack_var_-140 to i8*
  %v2_dcd4 = ptrtoint i32* %stack_var_-40 to i32
  %v2_dce8 = ptrtoint i32* %stack_var_-44 to i32
  br label %dec_label_pc_db1c

dec_label_pc_db1c:                                ; preds = %dec_label_pc_dbcc, %bb104
  %v1_db20 = call i32 @function_10ae8(i32 15)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_db2c = call i32 @function_10a04(i32 15, i32* null)
  store i32 %v3_db2c, i32* @r0, align 4
  %v1_db30 = call i32 @function_11d3c(i32 %v3_db2c)
  store i32 %v1_db30, i32* @sb, align 4
  %v2_db34 = icmp eq i32 %v1_db30, 0
  br i1 %v2_db34, label %dec_label_pc_d7b8, label %dec_label_pc_db3c

dec_label_pc_db3c:                                ; preds = %dec_label_pc_db1c
  %v1_db40 = call i32 @function_10a30(i32 15)
  %v0_db4444 = load i32, i32* @sb, align 4
  %v1_db4845 = inttoptr i32 %v0_db4444 to i32*
  %v2_db4846 = call i32 @function_11e38(i32* %v1_db4845)
  %v2_db4c48 = icmp eq i32 %v2_db4846, 0
  br i1 %v2_db4c48, label %dec_label_pc_dbcc, label %dec_label_pc_db54.preheader

dec_label_pc_db54.preheader:                      ; preds = %dec_label_pc_db3c, %dec_label_pc_db44.backedge
  %v0_db5454 = phi i32 [ %v2_db48, %dec_label_pc_db44.backedge ], [ %v2_db4846, %dec_label_pc_db3c ]
  br label %dec_label_pc_db54

dec_label_pc_db54:                                ; preds = %dec_label_pc_db54.preheader, %dec_label_pc_dbb4
  %v0_db64 = phi i32 [ %v0_db5454, %dec_label_pc_db54.preheader ], [ %v2_dbc0, %dec_label_pc_dbb4 ]
  %v1_db54 = add i32 %v0_db64, 11
  %v2_db54 = inttoptr i32 %v1_db54 to i8*
  %v3_db54 = load i8, i8* %v2_db54, align 1
  %v4_db54 = zext i8 %v3_db54 to i32
  %v1_db58 = add nsw i32 %v4_db54, -48
  store i32 %v1_db58, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_db58, 9
  br i1 %tmp, label %dec_label_pc_db44.backedge, label %dec_label_pc_db64

dec_label_pc_db64:                                ; preds = %dec_label_pc_db54
  store i32 %v1_db54, i32* @r6, align 4
  %v2_db6c = call i32 @function_12b28(i8* %v2_db54)
  %v0_db70 = load i32, i32* @r5, align 4
  store i32 %v2_db6c, i32* @sl, align 4
  %v0_db78 = load i32, i32* @fp, align 4
  %v1_db78 = add i32 %v0_db78, 1
  store i32 %v1_db78, i32* @fp, align 4
  %v5_db7c = icmp slt i32 %v0_db70, %v2_db6c
  %v2_dbdc = call i32 @function_11c30(i32* null)
  br i1 %v5_db7c, label %dec_label_pc_dbd8, label %dec_label_pc_db80

dec_label_pc_db80:                                ; preds = %dec_label_pc_db64
  %v0_db88 = load i32, i32* @r4, align 4
  %v2_db88 = sub i32 %v2_dbdc, %v0_db88
  %v7_db90 = icmp slt i32 %v2_db88, 601
  br i1 %v7_db90, label %dec_label_pc_db98, label %.thread6

.thread6:                                         ; preds = %dec_label_pc_db80
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_db44.backedge

dec_label_pc_db98:                                ; preds = %dec_label_pc_db80
  %v0_db98 = load i32, i32* @sl, align 4
  %v7_db9c = icmp slt i32 %v0_db98, 401
  br i1 %v7_db9c, label %dec_label_pc_db44.backedge, label %dec_label_pc_dba0

dec_label_pc_dba0:                                ; preds = %dec_label_pc_db98
  %v0_dba0 = load i32, i32* @fp, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_dba8 = call i32 @function_116e8(i32 %v0_dba0, i32 10)
  %v2_dbac = icmp eq i32 %v2_dba8, 0
  br i1 %v2_dbac, label %dec_label_pc_dbb4, label %dec_label_pc_db44.backedge

dec_label_pc_dbb4:                                ; preds = %dec_label_pc_dba0
  %v1_dbb8 = call i32 @function_12d68(i32 1)
  %v0_dbbc = load i32, i32* @sb, align 4
  %v1_dbc0 = inttoptr i32 %v0_dbbc to i32*
  %v2_dbc0 = call i32 @function_11e38(i32* %v1_dbc0)
  %v2_dbc4 = icmp eq i32 %v2_dbc0, 0
  br i1 %v2_dbc4, label %dec_label_pc_dbcc, label %dec_label_pc_db54

dec_label_pc_dbcc:                                ; preds = %dec_label_pc_db44.backedge, %dec_label_pc_dbb4, %dec_label_pc_db3c
  %v0_dbcc = load i32, i32* @sb, align 4
  %v1_dbd0 = inttoptr i32 %v0_dbcc to i32*
  %v2_dbd0 = call i32 @function_11c88(i32* %v1_dbd0)
  br label %dec_label_pc_db1c

dec_label_pc_dbd8:                                ; preds = %dec_label_pc_db64
  store i32 %v2_dbdc, i32* %stack_var_-4304, align 4
  %v1_dbe8 = call i32 @function_10ae8(i32 15)
  %v1_dbf0 = call i32 @function_10ae8(i32 16)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_dbfc = call i32 @function_10a04(i32 15, i32* null)
  store i32 %v3_dbfc, i32* %r1.global-to-local, align 4
  store i32 %v2_dc08, i32* @r0, align 4
  %v3_dc0c = call i32 @function_11108(i8* %v2_dc0c, i32 %v3_dbfc)
  %v2_dc18 = add i32 %v3_dc0c, %v2_dc08
  store i32 %v2_dc18, i32* %r5.global-to-local, align 4
  %v0_dc1c = load i32, i32* @r6, align 4
  store i32 %v0_dc1c, i32* %r1.global-to-local, align 4
  store i32 %v2_dc18, i32* @r0, align 4
  %v2_dc24 = inttoptr i32 %v2_dc18 to i8*
  %v3_dc24 = call i32 @function_11108(i8* %v2_dc24, i32 %v0_dc1c)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_dc34 = call i32 @function_10a04(i32 16, i32* null)
  store i32 %v3_dc34, i32* %r1.global-to-local, align 4
  %v0_dc3c = load i32, i32* %r5.global-to-local, align 4
  %v2_dc3c = add i32 %v3_dc24, %v0_dc3c
  store i32 %v2_dc3c, i32* @r0, align 4
  %v2_dc40 = inttoptr i32 %v2_dc3c to i8*
  %v3_dc40 = call i32 @function_11108(i8* %v2_dc40, i32 %v3_dc34)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_dc4c = call i32 @function_10a04(i32 15, i32* null)
  store i32 %v3_dc4c, i32* %r1.global-to-local, align 4
  store i32 %v2_dc58, i32* @r0, align 4
  %v3_dc5c = call i32 @function_11108(i8* %v2_dc5c, i32 %v3_dc4c)
  store i32 %v2_dc58, i32* %r3.global-to-local, align 4
  %v2_dc68 = add i32 %v3_dc5c, %v2_dc58
  store i32 %v2_dc68, i32* @r5, align 4
  %v0_dc6c = load i32, i32* @r6, align 4
  store i32 %v0_dc6c, i32* %r1.global-to-local, align 4
  store i32 %v2_dc68, i32* @r0, align 4
  %v2_dc74 = inttoptr i32 %v2_dc68 to i8*
  %v3_dc74 = call i32 @function_11108(i8* %v2_dc74, i32 %v0_dc6c)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_dc74, i32* @r4, align 4
  %v3_dc84 = call i32 @function_10a04(i32 31, i32* null)
  store i32 %v3_dc84, i32* %r1.global-to-local, align 4
  %v0_dc8c = load i32, i32* @r5, align 4
  %v1_dc8c = load i32, i32* @r4, align 4
  %v2_dc8c = add i32 %v1_dc8c, %v0_dc8c
  store i32 %v2_dc8c, i32* @r0, align 4
  %v2_dc90 = inttoptr i32 %v2_dc8c to i8*
  %v3_dc90 = call i32 @function_11108(i8* %v2_dc90, i32 %v3_dc84)
  %v1_dc98 = call i32 @function_10a30(i32 15)
  %v1_dca0 = call i32 @function_10a30(i32 16)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_dcb0 = call i32 @function_11a8c(i8* %v2_dc0c, i32 0)
  %v7_dcb4 = icmp eq i32 %v3_dcb0, -1
  store i32 %v3_dcb0, i32* @r8, align 4
  br i1 %v7_dcb4, label %dec_label_pc_ddcc, label %dec_label_pc_dcc0

dec_label_pc_dcc0:                                ; preds = %dec_label_pc_dbd8
  %v1_dcc4 = call i32 @function_10ae8(i32 20)
  %v1_dccc = call i32 @function_10ae8(i32 21)
  store i32 %v2_dcd4, i32* %r1.global-to-local, align 4
  %v3_dcdc = call i32 @function_10a04(i32 20, i32* nonnull %stack_var_-40)
  store i32 %v3_dcdc, i32* @r5, align 4
  store i32 %v2_dce8, i32* %r1.global-to-local, align 4
  %v3_dcf0 = call i32 @function_10a04(i32 21, i32* nonnull %stack_var_-44)
  store i32 %v3_dcf0, i32* @r6, align 4
  br label %dec_label_pc_dcf8

dec_label_pc_dcf8:                                ; preds = %dec_label_pc_dd64, %.thread20, %dec_label_pc_dd2c, %dec_label_pc_dcc0
  %v0_dcf8 = load i32, i32* @r8, align 4
  store i32 %v2_da64, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_dd04 = call i32 @function_11b28(i32 %v0_dcf8, i32* nonnull %stack_var_-4300, i32 4096)
  %tmp105 = icmp slt i32 %v4_dd04, 1
  br i1 %tmp105, label %dec_label_pc_de00, label %dec_label_pc_dd10

dec_label_pc_dd10:                                ; preds = %dec_label_pc_dcf8
  %v3_dd14 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_dd14, i32* @r4, align 4
  %v5_dd1c = icmp slt i32 %v4_dd04, %v3_dd14
  br i1 %v5_dd1c, label %dec_label_pc_dd2c, label %dec_label_pc_dd80.lr.ph

dec_label_pc_dd80.lr.ph:                          ; preds = %dec_label_pc_dd10
  %v1_dd7827 = add i32 %v4_dd04, -1
  store i32 %v1_dd7827, i32* %r1.global-to-local, align 4
  %v0_dd80.pre = load i32, i32* @r5, align 4
  %v1_dd84.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_dd80

dec_label_pc_dd2c:                                ; preds = %dec_label_pc_dd78.backedge, %dec_label_pc_dd10
  store i32 %v2_d7c4, i32* %r3.global-to-local, align 4
  %v3_dd30 = load i32, i32* %stack_var_-44, align 4
  %v5_dd38 = icmp slt i32 %v4_dd04, %v3_dd30
  br i1 %v5_dd38, label %dec_label_pc_dcf8, label %.thread20

.thread20:                                        ; preds = %dec_label_pc_dd2c
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_dd4437 = icmp eq i32 %v4_dd04, 0
  br i1 %v2_dd4437, label %dec_label_pc_dcf8, label %dec_label_pc_dd4c.lr.ph

dec_label_pc_dd4c.lr.ph:                          ; preds = %.thread20
  %v0_dd4c.pre = load i32, i32* @r6, align 4
  %v1_dd50.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_dd4c

dec_label_pc_dd4c:                                ; preds = %dec_label_pc_dd64, %dec_label_pc_dd4c.lr.ph
  %v0_dd44.in = phi i32 [ %v4_dd04, %dec_label_pc_dd4c.lr.ph ], [ %v0_dd44, %dec_label_pc_dd64 ]
  %v0_dd64 = phi i32 [ 0, %dec_label_pc_dd4c.lr.ph ], [ %v1_dd64, %dec_label_pc_dd64 ]
  %v0_dd58 = phi i32 [ 0, %dec_label_pc_dd4c.lr.ph ], [ %v1_dd58., %dec_label_pc_dd64 ]
  %v0_dd44 = add i32 %v0_dd44.in, -1
  %v2_dd4c = add i32 %v0_dd58, %v0_dd4c.pre
  %v3_dd4c = inttoptr i32 %v2_dd4c to i8*
  %v4_dd4c = load i8, i8* %v3_dd4c, align 1
  %v6_dd4c = zext i8 %v4_dd4c to i32
  store i32 %v6_dd4c, i32* %r2.global-to-local, align 4
  %v2_dd50 = add i32 %v0_dd64, %v1_dd50.pre
  %v3_dd50 = inttoptr i32 %v2_dd50 to i8*
  %v4_dd50 = load i8, i8* %v3_dd50, align 1
  %v6_dd50 = zext i8 %v4_dd50 to i32
  store i32 %v6_dd50, i32* %r3.global-to-local, align 4
  %v9_dd54 = icmp eq i8 %v4_dd50, %v4_dd4c
  %v1_dd58 = add i32 %v0_dd58, 1
  %v1_dd58. = select i1 %v9_dd54, i32 %v1_dd58, i32 0
  store i32 %v1_dd58., i32* %r1.global-to-local, align 4
  br i1 %v9_dd54, label %dec_label_pc_dda0, label %dec_label_pc_dd64

dec_label_pc_dd64:                                ; preds = %dec_label_pc_dda0, %dec_label_pc_dd4c
  %v1_dd64 = add i32 %v0_dd64, 1
  %v2_dd44 = icmp eq i32 %v0_dd44, 0
  br i1 %v2_dd44, label %dec_label_pc_dcf8, label %dec_label_pc_dd4c

dec_label_pc_dd6c:                                ; preds = %dec_label_pc_dd80
  %v9_dd6c = icmp eq i32 %v3_dd14, %v1_dd8c.
  br i1 %v9_dd6c, label %dec_label_pc_dda8, label %dec_label_pc_dd78.backedge

dec_label_pc_dd78.backedge:                       ; preds = %dec_label_pc_dd80, %dec_label_pc_dd6c
  %storemerge = add i32 %storemerge.in, 1
  %v1_dd78 = add i32 %v0_dd78, -1
  store i32 %v1_dd78, i32* %r1.global-to-local, align 4
  %v2_dd78 = icmp eq i32 %v0_dd78, 0
  br i1 %v2_dd78, label %dec_label_pc_dd2c, label %dec_label_pc_dd80

dec_label_pc_dd80:                                ; preds = %dec_label_pc_dd78.backedge, %dec_label_pc_dd80.lr.ph
  %v0_dd78 = phi i32 [ %v1_dd7827, %dec_label_pc_dd80.lr.ph ], [ %v1_dd78, %dec_label_pc_dd78.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_dd80.lr.ph ], [ %storemerge, %dec_label_pc_dd78.backedge ]
  %v0_dd8c = phi i32 [ 0, %dec_label_pc_dd80.lr.ph ], [ %v1_dd8c., %dec_label_pc_dd78.backedge ]
  %v2_dd80 = add i32 %v0_dd8c, %v0_dd80.pre
  %v3_dd80 = inttoptr i32 %v2_dd80 to i8*
  %v4_dd80 = load i8, i8* %v3_dd80, align 1
  %v6_dd80 = zext i8 %v4_dd80 to i32
  store i32 %v6_dd80, i32* %r2.global-to-local, align 4
  %v2_dd84 = add i32 %storemerge.in, %v1_dd84.pre
  %v3_dd84 = inttoptr i32 %v2_dd84 to i8*
  %v4_dd84 = load i8, i8* %v3_dd84, align 1
  %v6_dd84 = zext i8 %v4_dd84 to i32
  store i32 %v6_dd84, i32* %r3.global-to-local, align 4
  %v9_dd88 = icmp eq i8 %v4_dd84, %v4_dd80
  %v1_dd8c = add i32 %v0_dd8c, 1
  %v1_dd8c. = select i1 %v9_dd88, i32 %v1_dd8c, i32 0
  br i1 %v9_dd88, label %dec_label_pc_dd6c, label %dec_label_pc_dd78.backedge

dec_label_pc_dda0:                                ; preds = %dec_label_pc_dd4c
  %v9_dda0 = icmp eq i32 %v3_dd30, %v1_dd58.
  br i1 %v9_dda0, label %dec_label_pc_dda8, label %dec_label_pc_dd64

dec_label_pc_dda8:                                ; preds = %dec_label_pc_dd6c, %dec_label_pc_dda0
  %v1_ddac = call i32 @function_10a30(i32 20)
  %v1_ddb4 = call i32 @function_10a30(i32 21)
  %v0_ddb8 = load i32, i32* @r8, align 4
  %v1_ddbc = call i32 @function_11960(i32 %v0_ddb8)
  %v0_ddc0 = load i32, i32* @sl, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_ddc8 = call i32 @function_11a60(i32 %v0_ddc0, i32 9)
  br label %dec_label_pc_ddcc

dec_label_pc_ddcc:                                ; preds = %dec_label_pc_dbd8, %dec_label_pc_de00, %dec_label_pc_dda8
  store i32 64, i32* @r1, align 4
  store i32 %v2_dc08, i32* @r0, align 4
  %v0_ddd8 = call i32 @function_11180()
  store i32 %v2_dc58, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_dde8 = call i32 @function_11180()
  %v1_ddf0 = call i32 @function_12d68(i32 1)
  %v2_ddf4 = load i32, i32* %stack_var_-4304, align 4
  store i32 %v2_ddf4, i32* @r4, align 4
  %v0_ddf8 = load i32, i32* @sl, align 4
  store i32 %v0_ddf8, i32* @r5, align 4
  br label %dec_label_pc_db44.backedge

dec_label_pc_db44.backedge:                       ; preds = %dec_label_pc_dba0, %dec_label_pc_db98, %dec_label_pc_db54, %dec_label_pc_ddcc, %.thread6
  %v0_db44 = load i32, i32* @sb, align 4
  %v1_db48 = inttoptr i32 %v0_db44 to i32*
  %v2_db48 = call i32 @function_11e38(i32* %v1_db48)
  %v2_db4c = icmp eq i32 %v2_db48, 0
  br i1 %v2_db4c, label %dec_label_pc_dbcc, label %dec_label_pc_db54.preheader

dec_label_pc_de00:                                ; preds = %dec_label_pc_dcf8
  %v1_de04 = call i32 @function_10a30(i32 20)
  %v1_de0c = call i32 @function_10a30(i32 21)
  %v0_de10 = load i32, i32* @r8, align 4
  %v1_de14 = call i32 @function_11960(i32 %v0_de10)
  br label %dec_label_pc_ddcc

; uselistorder directives
  uselistorder i32 %v2_db48, { 1, 0 }
  uselistorder i32 %v1_dd8c., { 1, 0 }
  uselistorder i1 %v9_dd88, { 1, 0 }
  uselistorder i32 %v0_dd8c, { 1, 0 }
  uselistorder i32 %v1_dd58., { 1, 2, 0 }
  uselistorder i1 %v9_dd54, { 1, 0 }
  uselistorder i32 %v0_dd58, { 1, 0 }
  uselistorder i32 %v0_dd64, { 1, 0 }
  uselistorder i32 %v3_dcb0, { 1, 0 }
  uselistorder i32 %v2_dbc0, { 1, 0 }
  uselistorder i32 %v2_dc58, { 1, 0, 2, 3 }
  uselistorder i32 %v2_dc08, { 1, 0, 2 }
  uselistorder i32 %v4_daf0, { 1, 0 }
  uselistorder i32 %v3_dac0, { 2, 0, 1 }
  uselistorder i32 %v3_d9f0, { 1, 2, 0 }
  uselistorder i32 %v3_d994, { 1, 2, 0 }
  uselistorder i32 %v3_d93c, { 1, 2, 0 }
  uselistorder i32 %v3_d8ec, { 2, 1, 0 }
  uselistorder i32 %v3_d89c, { 1, 2, 0 }
  uselistorder i32 %v3_d864, { 1, 2, 0 }
  uselistorder i32 %v3_d808, { 2, 1, 0 }
  uselistorder i32 %storemerge72, { 1, 0 }
  uselistorder i32 %v0_d78c, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-76, { 0, 8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7 }
  uselistorder i32* %stack_var_-40, { 1, 0, 2 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 0, 52, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 16, 15, 17, 18, 19, 20, 21, 22, 1, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51 }
  uselistorder i32 (i32*)* @function_11e38, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_11d3c, { 2, 1, 0 }
  uselistorder i32* @global_var_1c944.62, { 0, 2, 1 }
  uselistorder label %dec_label_pc_db44.backedge, { 3, 0, 1, 4, 2 }
  uselistorder label %dec_label_pc_ddcc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_dda8, { 1, 0 }
  uselistorder label %dec_label_pc_db54, { 1, 0 }
  uselistorder label %dec_label_pc_db54.preheader, { 1, 0 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %dec_label_pc_da1c, { 1, 0 }
  uselistorder label %dec_label_pc_d9c0, { 1, 0 }
  uselistorder label %dec_label_pc_d968, { 1, 0 }
  uselistorder label %dec_label_pc_d918, { 1, 0 }
  uselistorder label %dec_label_pc_d8c8, { 1, 0 }
  uselistorder label %dec_label_pc_d890, { 1, 0 }
  uselistorder label %dec_label_pc_d834, { 1, 0 }
}

define i32 @function_de28(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_de28:
  store i32 ptrtoint (i32* @global_var_dfb0.71 to i32), i32* @global_var_1c730.73, align 4
  ret i32 %arg1
}

define i32 @function_de40(i32 %arg1) local_unnamed_addr {
dec_label_pc_de40:
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_de40 = load i32, i32* @r4, align 4
  %v9_de40 = load i32, i32* @r6, align 4
  %v12_de40 = load i32, i32* @r7, align 4
  %v15_de40 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_de5c = call i32 @function_1224c(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1c728.75 to i32), i32* @r6, align 4
  %v7_de64 = icmp eq i32 %v3_de5c, -1
  store i32 %v3_de5c, i32* @global_var_1c728.75, align 4
  br i1 %v7_de64, label %dec_label_pc_df24, label %dec_label_pc_de70

dec_label_pc_de70:                                ; preds = %dec_label_pc_de40
  %v0_de74 = load i32, i32* @r4, align 4
  %v6_de84 = call i32 @function_1221c(i32 %v3_de5c, i32 %v0_de74, i32 2, i32* nonnull %stack_var_-28, i32 4)
  %v2_de88 = load i32, i32* @global_var_1c728.75, align 4
  store i32 %v2_de88, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_de98 = call i32 @function_1189c(i32 %v2_de88, i32 3)
  %v1_dea0 = or i32 %v2_de98, 2048
  store i32 %v1_dea0, i32* @r2, align 4
  %v0_dea4 = load i32, i32* @r4, align 4
  %v2_dea8 = call i32 @function_1189c(i32 %v0_dea4, i32 4)
  store i32 ptrtoint (i8** @global_var_1c734.77 to i32), i32* @r8, align 4
  %v2_deb0 = load i8, i8* bitcast (i8** @global_var_1c734.77 to i8*), align 4
  %v2_deb4 = icmp eq i8 %v2_deb0, 0
  br i1 %v2_deb4, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_de70
  br label %bb

.thread:                                          ; preds = %dec_label_pc_de70
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_deec = call i32 @function_11f08()
  %v0_def0 = load i32, i32* @r5, align 4
  %v2_def0 = inttoptr i32 %v0_deec to i32*
  store i32 %v0_def0, i32* %v2_def0, align 4
  %v2_def4 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_def4, i32* @r7, align 4
  store i32 %v0_deec, i32* @r4, align 4
  %v2_df00 = load i32, i32* @global_var_1c728.75, align 4
  %v3_df08 = bitcast i32* %stack_var_-44 to %sockaddr*
  %v4_df08 = call i32 @function_1207c(i32 %v2_df00, %sockaddr* %v3_df08, i32 16)
  %v7_df0c = icmp eq i32 %v4_df08, -1
  br i1 %v7_df0c, label %dec_label_pc_df2c, label %dec_label_pc_df14

dec_label_pc_df14:                                ; preds = %bb
  %v2_df1c = load i32, i32* @global_var_1c728.75, align 4
  %v2_df20 = call i32 @function_12130(i32 %v2_df1c, i32 1)
  br label %dec_label_pc_df24

dec_label_pc_df24:                                ; preds = %dec_label_pc_de40, %dec_label_pc_df38, %dec_label_pc_df14
  %v20_df28 = phi i32 [ %v3_de5c, %dec_label_pc_de40 ], [ %v1_df88, %dec_label_pc_df38 ], [ %v2_df20, %dec_label_pc_df14 ]
  store i32 %v3_de40, i32* @r4, align 4
  store i32 %v9_de40, i32* @r6, align 4
  store i32 %v12_de40, i32* @r7, align 4
  store i32 %v15_de40, i32* @r8, align 4
  ret i32 %v20_df28

dec_label_pc_df2c:                                ; preds = %bb
  %v0_df2c = load i32, i32* @r4, align 4
  %v1_df2c = inttoptr i32 %v0_df2c to i32*
  %v2_df2c = load i32, i32* %v1_df2c, align 4
  %v7_df30 = icmp eq i32 %v2_df2c, 99
  br i1 %v7_df30, label %dec_label_pc_df90, label %dec_label_pc_df38

dec_label_pc_df38:                                ; preds = %dec_label_pc_df90, %bb21, %dec_label_pc_df2c
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_df50 = load i32, i32* @global_var_1c728.75, align 4
  %v4_df68 = call i32 @function_120a8(i32 %v2_df50, %sockaddr* %v3_df08, i32 16)
  %v1_df70 = call i32 @function_12d68(i32 5)
  %v2_df74 = load i32, i32* @global_var_1c728.75, align 4
  %v1_df78 = call i32 @function_11960(i32 %v2_df74)
  %v1_df84 = call i32 @function_d1d8(i32 15290)
  %v1_df88 = call i32 @function_de40(i32 %v1_df84)
  br label %dec_label_pc_df24

dec_label_pc_df90:                                ; preds = %dec_label_pc_df2c
  %v2_df90 = load i8, i8* bitcast (i8** @global_var_1c734.77 to i8*), align 4
  %v3_df90 = zext i8 %v2_df90 to i32
  %v1_df94 = load i32, i32* @r5, align 4
  %v9_df94 = icmp eq i32 %v3_df90, %v1_df94
  br i1 %v9_df94, label %dec_label_pc_df38, label %bb21

bb21:                                             ; preds = %dec_label_pc_df90
  %v2_df9c = trunc i32 %v1_df94 to i8
  store i8 %v2_df9c, i8* bitcast (i8** @global_var_1c734.77 to i8*), align 4
  br label %dec_label_pc_df38

; uselistorder directives
  uselistorder i32 %v3_de5c, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 3, 2 }
  uselistorder i32 (i32)* @function_d1d8, { 0, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_12130, { 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_1207c, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i8* bitcast (i8** @global_var_1c734.77 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1c734.77, { 1, 0 }
  uselistorder label %dec_label_pc_df38, { 1, 0, 2 }
  uselistorder label %dec_label_pc_df24, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_dfb0() local_unnamed_addr {
dec_label_pc_dfb0:
  %stack_var_-16 = alloca i32, align 4
  %v3_dfb0 = load i32, i32* @r4, align 4
  store i32 %v3_dfb0, i32* %stack_var_-16, align 4
  %v1_dfb8 = call i32 @function_10ae8(i32 2)
  %v3_dfc4 = call i32 @function_10a04(i32 2, i32* null)
  %v1_dfc8 = inttoptr i32 %v3_dfc4 to i8*
  %v2_dfc8 = call i32 @function_eb6c(i8* %v1_dfc8)
  store i32 %v2_dfc8, i32* @r5, align 4
  %v1_dfd4 = call i32 @function_10a30(i32 2)
  %v0_dfd8 = load i32, i32* @r5, align 4
  %v2_dfd8 = icmp eq i32 %v0_dfd8, 0
  store i32 ptrtoint (i8** @global_var_1c948.80 to i32), i32* @r6, align 4
  br i1 %v2_dfd8, label %bb, label %bb5

bb:                                               ; preds = %dec_label_pc_dfb0
  ret i32 %v1_dfd4

bb5:                                              ; preds = %dec_label_pc_dfb0
  %v1_dfe4 = add i32 %v0_dfd8, 4
  %v2_dfe4 = inttoptr i32 %v1_dfe4 to i32*
  %v3_dfe4 = load i32, i32* %v2_dfe4, align 4
  store i32 %v3_dfe4, i32* @r4, align 4
  %v0_dfe8 = call i32 @function_e8e4()
  %v0_dfec = load i32, i32* @r5, align 4
  %v1_dfec = inttoptr i32 %v0_dfec to i8*
  %v2_dfec = load i8, i8* %v1_dfec, align 1
  %v3_dfec = zext i8 %v2_dfec to i32
  %v2_dff0 = call i32 @function_116e8(i32 %v0_dfe8, i32 %v3_dfec)
  %v0_dff4 = load i32, i32* @r4, align 4
  %v4_dff4 = mul i32 %v2_dff0, 4
  %v5_dff4 = add i32 %v0_dff4, %v4_dff4
  %v6_dff4 = inttoptr i32 %v5_dff4 to i32*
  %v7_dff4 = load i32, i32* %v6_dff4, align 4
  %v0_dff8 = load i32, i32* @r5, align 4
  store i32 %v7_dff4, i32* @global_var_1c94c.81, align 4
  %v1_e000 = call i32 @function_eb48(i32 %v0_dff8)
  %v1_e008 = call i32 @function_10ae8(i32 1)
  %v3_e014 = call i32 @function_10a04(i32 1, i32* null)
  %v4_e014 = inttoptr i32 %v3_e014 to i8*
  %v2_e018 = add i32 %v3_e014, 1
  %v3_e018 = inttoptr i32 %v2_e018 to i8*
  %v4_e018 = load i8, i8* %v3_e018, align 1
  %v3_e01c = load i8, i8* %v4_e014, align 1
  store i8 %v4_e018, i8* bitcast (i32* @global_var_1c94b.82 to i8*), align 4
  store i8 %v3_e01c, i8* bitcast (i32* @global_var_1c94a.83 to i8*), align 4
  %v2_e034 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_e034, i32* @r4, align 4
  %v1_e038 = call i32 @function_10a30(i32 1)
  %v0_e03c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e03c, label %bb6, label %bb7

bb6:                                              ; preds = %bb5
  br label %bb7

bb7:                                              ; preds = %bb5, %bb6
  ret i32 %v1_e038

; uselistorder directives
  uselistorder label %bb7, { 1, 0 }
}

define i32 @function_e040(i32 %arg1) local_unnamed_addr {
dec_label_pc_e040:
  %stack_var_-16 = alloca i32, align 4
  %v3_e040 = load i32, i32* @r4, align 4
  %v6_e040 = load i32, i32* @r5, align 4
  %v2_e044 = ptrtoint i32* %stack_var_-16 to i32
  %v0_e048 = call i32 @function_1198c()
  %v7_e04c = icmp eq i32 %v0_e048, -1
  %. = zext i1 %v7_e04c to i32
  %tmp10 = icmp slt i32 %v0_e048, 1
  %storemerge4 = select i1 %tmp10, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_e068 = icmp eq i32 %storemerge4, 0
  store i32 %v0_e048, i32* @global_var_1c8a8.85, align 4
  br i1 %v2_e068, label %dec_label_pc_e07c, label %dec_label_pc_e074

dec_label_pc_e074:                                ; preds = %dec_label_pc_e040
  store i32 %v3_e040, i32* @r4, align 4
  store i32 %v6_e040, i32* @r5, align 4
  ret i32 %v0_e048

dec_label_pc_e07c:                                ; preds = %dec_label_pc_e040
  store i32 1, i32* %stack_var_-16, align 4
  %v1_e088 = call i32 @function_10ae8(i32 25)
  %v1_e090 = call i32 @function_10ae8(i32 26)
  %v0_e094 = load i32, i32* @r5, align 4
  %v2_e09c = inttoptr i32 %v0_e094 to i32*
  %v3_e09c = call i32 @function_10a04(i32 25, i32* %v2_e09c)
  %v2_e0a4 = inttoptr i32 %v3_e09c to i8*
  %v3_e0a4 = call i32 @function_11a8c(i8* %v2_e0a4, i32 2)
  %v7_e0a8 = icmp eq i32 %v3_e0a4, -1
  store i32 %v3_e0a4, i32* @r4, align 4
  br i1 %v7_e0a8, label %dec_label_pc_e0f0, label %dec_label_pc_e0b4

dec_label_pc_e0b4:                                ; preds = %dec_label_pc_e0f0, %dec_label_pc_e07c
  %v0_e0c0 = phi i32 [ %v3_e100, %dec_label_pc_e0f0 ], [ %v3_e0a4, %dec_label_pc_e07c ]
  %v3_e0c8 = call i32 @function_11a10(i32 %v0_e0c0, i32 -2147199228, i32 %v2_e044)
  br label %dec_label_pc_e0cc

dec_label_pc_e0cc:                                ; preds = %dec_label_pc_e0cc, %dec_label_pc_e0b4
  %v0_e0d8 = load i32, i32* @r4, align 4
  %v3_e0e0 = call i32 @function_11a10(i32 %v0_e0d8, i32 -2147199227, i32 0)
  %v1_e0e8 = call i32 @function_12d68(i32 10)
  br label %dec_label_pc_e0cc

dec_label_pc_e0f0:                                ; preds = %dec_label_pc_e07c
  %v0_e0f0 = load i32, i32* @r5, align 4
  %v2_e0f8 = inttoptr i32 %v0_e0f0 to i32*
  %v3_e0f8 = call i32 @function_10a04(i32 26, i32* %v2_e0f8)
  %v2_e100 = inttoptr i32 %v3_e0f8 to i8*
  %v3_e100 = call i32 @function_11a8c(i8* %v2_e100, i32 2)
  %v3_e104 = icmp eq i32 %v3_e100, -1
  store i32 %v3_e100, i32* @r4, align 4
  br i1 %v3_e104, label %dec_label_pc_e110, label %dec_label_pc_e0b4

dec_label_pc_e110:                                ; preds = %dec_label_pc_e0f0
  %v1_e114 = call i32 @function_10a30(i32 25)
  %v1_e11c = call i32 @function_10a30(i32 26)
  %v0_e120 = load i32, i32* @r5, align 4
  %v1_e124 = call i32 @function_12cd4(i32 %v0_e120)
  %v0_e128 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e128, label %bb13, label %bb14

bb13:                                             ; preds = %dec_label_pc_e110
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_e110, %bb13
  ret i32 %v1_e124

; uselistorder directives
  uselistorder i32 %v3_e100, { 1, 2, 0 }
  uselistorder i32 %v3_e0a4, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_e048, { 3, 1, 2, 0 }
  uselistorder i32 (i32, i32, i32)* @function_11a10, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
}

define i32 @function_e12c(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_e12c:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-1548 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-38 = alloca i8*, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-524 = alloca i32, align 4
  %stack_var_-396 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e12c = load i32, i32* @r4, align 4
  store i32 %v3_e12c, i32* %stack_var_-36, align 4
  %v6_e12c = load i32, i32* @r5, align 4
  %v9_e12c = load i32, i32* @r6, align 4
  %v15_e12c = load i32, i32* @r8, align 4
  %v2_e138 = ptrtoint i32* %stack_var_-268 to i32
  store i32 %v2_e138, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v2_e138, i32* @r0, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v1_e150 = call i32 @function_122a8(i32 %v2_e138)
  store i32 %v2_e138, i32* @r0, align 4
  %v2_e15c = call i32 @function_12278(i32 %v2_e138, i32 2)
  %v0_e160 = load i32, i32* @r5, align 4
  store i32 %v0_e160, i32* %r2.global-to-local, align 4
  %v3_e16c = bitcast i32* %stack_var_-268 to %_TYPEDEF_sigset_t*
  %v4_e16c = call i32 @function_11bdc(i32 %v0_e160, %_TYPEDEF_sigset_t* %v3_e16c, i32 %v0_e160)
  %v2_e178 = call i32 @function_122c0(i32 17, i32 1)
  %v2_e184 = call i32 @function_122c0(i32 5, i32 ptrtoint (i32* @global_var_de28.87 to i32))
  %v0_e188 = call i32 @function_11398()
  store i32 %v0_e188, i32* @global_var_1c93c.50, align 4
  store i32 1494907823, i32* %r2.global-to-local, align 4
  store i8 -24, i8* bitcast (i32* @global_var_1c94b.82 to i8*), align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i8 2, i8* bitcast (i8** @global_var_1c948.80 to i8*), align 4
  store i32 1494907823, i32* @global_var_1c94c.81, align 4
  %v0_e1b0 = load i32, i32* @r5, align 4
  %v1_e1b0 = trunc i32 %v0_e1b0 to i8
  store i8 %v1_e1b0, i8* bitcast (i32* @global_var_1c94a.83 to i8*), align 4
  store i8 %v1_e1b0, i8* bitcast (i32* @global_var_1c949.91 to i8*), align 4
  %v6_e1b8 = call i32 @function_10ba0(i32 %v0_e188, i32 ptrtoint (i8** @global_var_1c948.80 to i32), i32 1494907823, i32 2)
  store i32 ptrtoint (i32* @global_var_dfb0.71 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_dfb0.71 to i32), i32* @global_var_1c730.73, align 4
  %v2_e1cc = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_e1cc, i32* @sb, align 4
  %v1_e1d0 = call i32 @function_de40(i32 %v6_e1b8)
  %v1_e1d4 = call i32 @function_e93c(i32 %v1_e1d0)
  store i32 %v2_e1cc, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_e1e0 = call i32 @function_11180()
  %v0_e1e4 = load i32, i32* @r6, align 4
  %v7_e1e4 = icmp eq i32 %v0_e1e4, 2
  br i1 %v7_e1e4, label %dec_label_pc_e310, label %dec_label_pc_e1ec

dec_label_pc_e1ec:                                ; preds = %dec_label_pc_e310, %dec_label_pc_e12c, %dec_label_pc_e320
  %v0_e1ec = call i32 @function_e8e4()
  store i32 %v0_e1ec, i32* %r6.global-to-local, align 4
  %v0_e1f4 = load i32, i32* @r8, align 4
  %v1_e1f4 = inttoptr i32 %v0_e1f4 to i32*
  %v2_e1f4 = load i32, i32* %v1_e1f4, align 4
  %v1_e1f8 = inttoptr i32 %v2_e1f4 to i8*
  %v2_e1f8 = call i32 @function_110e0(i8* %v1_e1f8)
  %v0_e200 = load i32, i32* @r8, align 4
  %v1_e200 = inttoptr i32 %v0_e200 to i32*
  %v2_e200 = load i32, i32* %v1_e200, align 4
  %v1_e204 = inttoptr i32 %v2_e200 to i8*
  %v2_e204 = call i32 @function_110e0(i8* %v1_e204)
  %v1_e208 = sub i32 20, %v2_e1f8
  store i32 %v2_e204, i32* @r5, align 4
  %v0_e210 = load i32, i32* %r6.global-to-local, align 4
  %v2_e214 = call i32 @function_116e8(i32 %v0_e210, i32 %v1_e208)
  %v1_e21c = load i32, i32* @r5, align 4
  %v2_e21c = add i32 %v1_e21c, %v2_e214
  store i32 %v2_e21c, i32* @r4, align 4
  %v2_e220 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_e220, i32* @r6, align 4
  %v2_e22c = call i32 @function_e998(i32 %v2_e220, i32 %v2_e21c)
  %v2_e230 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_e230, i32* %r2.global-to-local, align 4
  %v1_e234 = load i32, i32* @r4, align 4
  %v2_e234 = add i32 %v1_e234, %v2_e230
  store i32 %v2_e234, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_e240 = load i32, i32* @r8, align 4
  %v1_e240 = inttoptr i32 %v0_e240 to i32*
  %v2_e240 = load i32, i32* %v1_e240, align 4
  store i32 %v2_e240, i32* @r0, align 4
  %v3_e244 = add i32 %v2_e234, -72
  %v4_e244 = inttoptr i32 %v3_e244 to i8*
  store i8 0, i8* %v4_e244, align 1
  %v2_e248 = inttoptr i32 %v2_e240 to i8*
  %v3_e248 = call i32 @function_11108(i8* %v2_e248, i32 %v2_e220)
  store i32 32, i32* @r1, align 4
  store i32 %v2_e220, i32* @r0, align 4
  %v0_e254 = call i32 @function_11180()
  %v0_e258 = call i32 @function_e8e4()
  store i32 %v0_e258, i32* @r7, align 4
  %v0_e260 = load i32, i32* @r8, align 4
  %v1_e260 = inttoptr i32 %v0_e260 to i32*
  %v2_e260 = load i32, i32* %v1_e260, align 4
  %v1_e264 = inttoptr i32 %v2_e260 to i8*
  %v2_e264 = call i32 @function_110e0(i8* %v1_e264)
  %v0_e26c = load i32, i32* @r8, align 4
  %v1_e26c = inttoptr i32 %v0_e26c to i32*
  %v2_e26c = load i32, i32* %v1_e26c, align 4
  %v1_e270 = inttoptr i32 %v2_e26c to i8*
  %v2_e270 = call i32 @function_110e0(i8* %v1_e270)
  %v1_e274 = sub i32 20, %v2_e264
  store i32 %v2_e270, i32* @r5, align 4
  %v0_e27c = load i32, i32* @r7, align 4
  %v2_e280 = call i32 @function_116e8(i32 %v0_e27c, i32 %v1_e274)
  %v1_e284 = load i32, i32* @r5, align 4
  %v2_e284 = add i32 %v1_e284, %v2_e280
  store i32 %v2_e284, i32* @r4, align 4
  %v2_e290 = call i32 @function_e998(i32 %v2_e220, i32 %v2_e284)
  %v1_e298 = load i32, i32* @r4, align 4
  %v2_e298 = add i32 %v1_e298, %v2_e230
  store i32 %v2_e298, i32* @r3, align 4
  %v0_e29c = load i32, i32* @sl, align 4
  %v1_e29c = trunc i32 %v0_e29c to i8
  %v3_e29c = add i32 %v2_e298, -72
  %v4_e29c = inttoptr i32 %v3_e29c to i8*
  store i8 %v1_e29c, i8* %v4_e29c, align 1
  %v2_e2a8 = call i32 @function_11af8(i32 15, i32 %v2_e220)
  %v1_e2b0 = call i32 @function_10ae8(i32 5)
  %v3_e2c0 = call i32 @function_10a04(i32 5, i32* nonnull %stack_var_-44)
  %v3_e2c4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_e2c4, i32* %r2.global-to-local, align 4
  %v3_e2d0 = inttoptr i32 %v3_e2c0 to i32*
  %v4_e2d0 = call i32 @function_11c5c(i32 1, i32* %v3_e2d0, i32 %v3_e2c4)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_e2e0 = call i32 @function_11c5c(i32 1, i32* nonnull @global_var_141d8.95, i32 1)
  %v1_e2e8 = call i32 @function_10a30(i32 5)
  %v1_e2ec = call i32 @function_8650(i32 %v1_e2e8)
  %v1_e2f0 = call i32 @function_d774(i32 %v1_e2ec)
  %v1_e2f4 = call i32 @function_e040(i32 %v1_e2f0)
  %v0_e2f8 = call i32 @function_1198c()
  %v1_e2fc = load i32, i32* @sl, align 4
  %v7_e300 = icmp sgt i32 %v0_e2f8, %v1_e2fc
  br i1 %v7_e300, label %dec_label_pc_e304, label %dec_label_pc_e348

dec_label_pc_e304:                                ; preds = %dec_label_pc_e1ec
  store i32 %v6_e12c, i32* %r5.global-to-local, align 4
  store i32 %v9_e12c, i32* %r6.global-to-local, align 4
  store i32 %v15_e12c, i32* %r8.global-to-local, align 4
  ret i32 0

dec_label_pc_e310:                                ; preds = %dec_label_pc_e12c
  %v0_e310 = load i32, i32* @r8, align 4
  %v1_e310 = add i32 %v0_e310, 4
  %v2_e310 = inttoptr i32 %v1_e310 to i32*
  %v3_e310 = load i32, i32* %v2_e310, align 4
  %v1_e314 = inttoptr i32 %v3_e310 to i8*
  %v2_e314 = call i32 @function_110e0(i8* %v1_e314)
  %v8_e31c = icmp sgt i32 %v2_e314, 31
  br i1 %v8_e31c, label %dec_label_pc_e1ec, label %dec_label_pc_e320

dec_label_pc_e320:                                ; preds = %dec_label_pc_e310
  %v0_e320 = load i32, i32* @r8, align 4
  %v1_e320 = add i32 %v0_e320, 4
  %v2_e320 = inttoptr i32 %v1_e320 to i32*
  %v3_e320 = load i32, i32* %v2_e320, align 4
  store i32 %v2_e1cc, i32* @r0, align 4
  %v2_e328 = bitcast i32* %stack_var_-140 to i8*
  %v3_e328 = call i32 @function_11108(i8* %v2_e328, i32 %v3_e320)
  %v0_e32c = load i32, i32* @r8, align 4
  %v1_e32c = add i32 %v0_e32c, 4
  %v2_e32c = inttoptr i32 %v1_e32c to i32*
  %v3_e32c = load i32, i32* %v2_e32c, align 4
  %v1_e334 = inttoptr i32 %v3_e32c to i8*
  %v2_e334 = call i32 @function_110e0(i8* %v1_e334)
  store i32 %v2_e334, i32* @r1, align 4
  store i32 %v3_e32c, i32* @r0, align 4
  %v0_e340 = call i32 @function_11180()
  br label %dec_label_pc_e1ec

dec_label_pc_e348:                                ; preds = %dec_label_pc_e1ec
  %v1_e348 = call i32 @function_11bb0(i32 %v0_e2f8)
  %v0_e350 = load i32, i32* @sl, align 4
  %v1_e354 = call i32 @function_11960(i32 %v0_e350)
  %v1_e35c = call i32 @function_11960(i32 1)
  %v1_e364 = call i32 @function_11960(i32 2)
  %v1_e368 = call i32 @function_8650(i32 %v1_e364)
  %v1_e36c = call i32 @function_d774(i32 %v1_e368)
  %v1_e370 = call i32 @function_e040(i32 %v1_e36c)
  %v1_e374 = call i32 @function_f344(i32 %v1_e370)
  %v2_e384 = ptrtoint i32* %stack_var_-396 to i32
  store i32 %v2_e384, i32* @r6, align 4
  %v2_e388 = ptrtoint i32* %stack_var_-524 to i32
  store i32 %v2_e388, i32* @r7, align 4
  %v2_e460 = ptrtoint i32* %stack_var_-60 to i32
  %v2_e6a0 = ptrtoint i32* %stack_var_-52 to i32
  %v4_e6b4 = bitcast i8** %stack_var_-38 to i32*
  %v2_e810 = ptrtoint i32* %stack_var_-1548 to i32
  %v2_e6c4 = ptrtoint i32* %stack_var_-48 to i32
  %v1_e768 = bitcast i32* %stack_var_-140 to i8*
  %v5_e730 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v1_e744 = sub i32 0, %v1_e348
  br label %dec_label_pc_e38c

dec_label_pc_e38c:                                ; preds = %dec_label_pc_e38c.backedge, %dec_label_pc_e348
  %v2_e39445 = phi i32 [ %v2_e39445.pre, %dec_label_pc_e38c.backedge ], [ %v2_e384, %dec_label_pc_e348 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_e39447 = inttoptr i32 %v2_e39445 to i32*
  store i32 0, i32* %v4_e39447, align 4
  %v0_e39848 = load i32, i32* %r3.global-to-local, align 4
  %v1_e39849 = add i32 %v0_e39848, 4
  store i32 %v1_e39849, i32* %r3.global-to-local, align 4
  %v7_e39c50 = icmp eq i32 %v1_e39849, 128
  br i1 %v7_e39c50, label %dec_label_pc_e3a4, label %dec_label_pc_e394.dec_label_pc_e394_crit_edge

dec_label_pc_e394.dec_label_pc_e394_crit_edge:    ; preds = %dec_label_pc_e38c, %dec_label_pc_e394.dec_label_pc_e394_crit_edge
  %v1_e39851 = phi i32 [ %v1_e398, %dec_label_pc_e394.dec_label_pc_e394_crit_edge ], [ %v1_e39849, %dec_label_pc_e38c ]
  %v0_e394.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_e394 = load i32, i32* @r6, align 4
  %v3_e394 = add i32 %v2_e394, %v1_e39851
  %v4_e394 = inttoptr i32 %v3_e394 to i32*
  store i32 %v0_e394.pre, i32* %v4_e394, align 4
  %v0_e398 = load i32, i32* %r3.global-to-local, align 4
  %v1_e398 = add i32 %v0_e398, 4
  store i32 %v1_e398, i32* %r3.global-to-local, align 4
  %v7_e39c = icmp eq i32 %v1_e398, 128
  br i1 %v7_e39c, label %dec_label_pc_e3a4, label %dec_label_pc_e394.dec_label_pc_e394_crit_edge

dec_label_pc_e3a4:                                ; preds = %dec_label_pc_e394.dec_label_pc_e394_crit_edge, %dec_label_pc_e38c
  %v0_e3a4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_e3a4, i32* %r3.global-to-local, align 4
  store i32 %v0_e3a4, i32* @r4, align 4
  %v2_e3ac52 = load i32, i32* @r7, align 4
  %v3_e3ac53 = add i32 %v2_e3ac52, %v0_e3a4
  %v4_e3ac54 = inttoptr i32 %v3_e3ac53 to i32*
  store i32 %v0_e3a4, i32* %v4_e3ac54, align 4
  %v0_e3b055 = load i32, i32* %r3.global-to-local, align 4
  %v1_e3b056 = add i32 %v0_e3b055, 4
  store i32 %v1_e3b056, i32* %r3.global-to-local, align 4
  %v7_e3b457 = icmp eq i32 %v1_e3b056, 128
  br i1 %v7_e3b457, label %dec_label_pc_e3bc, label %dec_label_pc_e3ac.dec_label_pc_e3ac_crit_edge

dec_label_pc_e3ac.dec_label_pc_e3ac_crit_edge:    ; preds = %dec_label_pc_e3a4, %dec_label_pc_e3ac.dec_label_pc_e3ac_crit_edge
  %v1_e3b058 = phi i32 [ %v1_e3b0, %dec_label_pc_e3ac.dec_label_pc_e3ac_crit_edge ], [ %v1_e3b056, %dec_label_pc_e3a4 ]
  %v0_e3ac.pre = load i32, i32* @r4, align 4
  %v2_e3ac = load i32, i32* @r7, align 4
  %v3_e3ac = add i32 %v2_e3ac, %v1_e3b058
  %v4_e3ac = inttoptr i32 %v3_e3ac to i32*
  store i32 %v0_e3ac.pre, i32* %v4_e3ac, align 4
  %v0_e3b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_e3b0 = add i32 %v0_e3b0, 4
  store i32 %v1_e3b0, i32* %r3.global-to-local, align 4
  %v7_e3b4 = icmp eq i32 %v1_e3b0, 128
  br i1 %v7_e3b4, label %dec_label_pc_e3bc, label %dec_label_pc_e3ac.dec_label_pc_e3ac_crit_edge

dec_label_pc_e3bc:                                ; preds = %dec_label_pc_e3ac.dec_label_pc_e3ac_crit_edge, %dec_label_pc_e3a4
  store i32 ptrtoint (i32* @global_var_1c728.75 to i32), i32* %r2.global-to-local, align 4
  %v2_e3c0 = load i32, i32* @global_var_1c728.75, align 4
  %v7_e3c4 = icmp eq i32 %v2_e3c0, -1
  br i1 %v7_e3c4, label %dec_label_pc_e3f0, label %dec_label_pc_e3cc

dec_label_pc_e3cc:                                ; preds = %dec_label_pc_e3bc
  %v3_e3cc = udiv i32 %v2_e3c0, 32
  %v3_e3d0 = mul nuw nsw i32 %v3_e3cc, 4
  %v2_e3d8 = add i32 %v3_e3d0, %v2_e230
  store i32 %v2_e3d8, i32* %r3.global-to-local, align 4
  %v1_e3dc = add i32 %v2_e3d8, -360
  %v2_e3dc = inttoptr i32 %v1_e3dc to i32*
  %v3_e3dc = load i32, i32* %v2_e3dc, align 4
  %v1_e3e0 = urem i32 %v2_e3c0, 32
  %v7_e3e8 = shl i32 1, %v1_e3e0
  %v8_e3e8 = or i32 %v3_e3dc, %v7_e3e8
  store i32 %v8_e3e8, i32* %r2.global-to-local, align 4
  store i32 %v8_e3e8, i32* %v2_e3dc, align 4
  br label %dec_label_pc_e3f0

dec_label_pc_e3f0:                                ; preds = %dec_label_pc_e3bc, %dec_label_pc_e3cc
  %v2_e3f0 = load i32, i32* @global_var_1c72c.97, align 4
  store i32 %v2_e3f0, i32* %r3.global-to-local, align 4
  %v7_e3f4 = icmp eq i32 %v2_e3f0, -1
  store i32 ptrtoint (i32* @global_var_1c72c.97 to i32), i32* %r8.global-to-local, align 4
  br i1 %v7_e3f4, label %dec_label_pc_e62c, label %dec_label_pc_e400

dec_label_pc_e400:                                ; preds = %dec_label_pc_e62c, %dec_label_pc_e3f0, %.thread
  store i32 ptrtoint (i8** @global_var_1c8ac.100 to i32), i32* %r2.global-to-local, align 4
  %v2_e404 = load i8, i8* bitcast (i8** @global_var_1c8ac.100 to i8*), align 4
  %v2_e408 = icmp eq i8 %v2_e404, 0
  %v2_e548 = load i32, i32* @global_var_1c72c.97, align 4
  %v3_e54c = udiv i32 %v2_e548, 32
  store i32 %v3_e54c, i32* %r3.global-to-local, align 4
  br i1 %v2_e408, label %dec_label_pc_e548, label %dec_label_pc_e410

dec_label_pc_e410:                                ; preds = %dec_label_pc_e400
  %v3_e418 = mul nuw nsw i32 %v3_e54c, 4
  %v2_e420 = add i32 %v3_e418, %v2_e230
  store i32 %v2_e420, i32* %r3.global-to-local, align 4
  %v1_e424 = add i32 %v2_e420, -488
  %v2_e424 = inttoptr i32 %v1_e424 to i32*
  %v3_e424 = load i32, i32* %v2_e424, align 4
  %v1_e428 = urem i32 %v2_e548, 32
  %v7_e430 = shl i32 1, %v1_e428
  %v8_e430 = or i32 %v3_e424, %v7_e430
  store i32 %v8_e430, i32* %r2.global-to-local, align 4
  store i32 %v8_e430, i32* %v2_e424, align 4
  br label %dec_label_pc_e438

dec_label_pc_e438:                                ; preds = %dec_label_pc_e548, %dec_label_pc_e410
  %v2_e43c = load i32, i32* @global_var_1c728.75, align 4
  %v2_e440 = load i32, i32* @global_var_1c72c.97, align 4
  store i32 %v2_e440, i32* %r3.global-to-local, align 4
  %v5_e44c = icmp slt i32 %v2_e43c, %v2_e440
  br i1 %v5_e44c, label %bb, label %bb42

bb:                                               ; preds = %dec_label_pc_e438
  br label %bb42

bb42:                                             ; preds = %dec_label_pc_e438, %bb
  %v0_e464 = phi i32 [ %v2_e43c, %dec_label_pc_e438 ], [ %v2_e440, %bb ]
  store i32 0, i32* @lr, align 4
  store i32 10, i32* %stack_var_-60, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_e464 = add i32 %v0_e464, 1
  store i32 %v2_e388, i32* %r2.global-to-local, align 4
  %v5_e478 = call i32 @function_11b80(i32 %v1_e464, i32 %v2_e384, i32 %v2_e388, i32 0, i32 %v2_e460)
  %v8_e47c = icmp eq i32 %v5_e478, -1
  store i32 %v5_e478, i32* %r3.global-to-local, align 4
  br i1 %v8_e47c, label %dec_label_pc_e38c.backedge, label %dec_label_pc_e488

dec_label_pc_e488:                                ; preds = %bb42
  %v6_e478 = trunc i32 %v5_e478 to i8
  %v3_e488 = icmp eq i8 %v6_e478, 0
  br i1 %v3_e488, label %dec_label_pc_e490, label %dec_label_pc_e4b0

dec_label_pc_e490:                                ; preds = %dec_label_pc_e488
  %v0_e490 = load i32, i32* @sl, align 4
  %v6_e49c = inttoptr i32 %v5_e478 to i8*
  store i8* %v6_e49c, i8** %stack_var_-38, align 4
  %v2_e4a0 = call i32 @function_117b4(i32 %v0_e490, i32 6)
  %v2_e4a4 = icmp eq i32 %v2_e4a0, 0
  %v0_e4a8 = load i32, i32* @sl, align 4
  %v1_e4a8 = add i32 %v0_e4a8, 1
  store i32 %v1_e4a8, i32* @sl, align 4
  br i1 %v2_e4a4, label %dec_label_pc_e69c, label %dec_label_pc_e4b0

dec_label_pc_e4b0:                                ; preds = %dec_label_pc_e488, %dec_label_pc_e490, %dec_label_pc_e69c
  store i32 ptrtoint (i32* @global_var_1c728.75 to i32), i32* %r2.global-to-local, align 4
  %v2_e4b4 = load i32, i32* @global_var_1c728.75, align 4
  %v7_e4b8 = icmp eq i32 %v2_e4b4, -1
  br i1 %v7_e4b8, label %dec_label_pc_e4e4, label %dec_label_pc_e4c0

dec_label_pc_e4c0:                                ; preds = %dec_label_pc_e4b0
  %v3_e4c0 = udiv i32 %v2_e4b4, 32
  %v3_e4c4 = mul nuw nsw i32 %v3_e4c0, 4
  %v2_e4cc = add i32 %v3_e4c4, %v2_e230
  store i32 %v2_e4cc, i32* %r3.global-to-local, align 4
  %v1_e4d0 = add i32 %v2_e4cc, -360
  %v2_e4d0 = inttoptr i32 %v1_e4d0 to i32*
  %v3_e4d0 = load i32, i32* %v2_e4d0, align 4
  %v1_e4d4 = urem i32 %v2_e4b4, 32
  %v6_e4d8 = lshr i32 %v3_e4d0, %v1_e4d4
  store i32 %v6_e4d8, i32* %r2.global-to-local, align 4
  %v1_e4dc = urem i32 %v6_e4d8, 2
  %v2_e4dc = icmp eq i32 %v1_e4dc, 0
  br i1 %v2_e4dc, label %dec_label_pc_e4e4, label %dec_label_pc_e718

dec_label_pc_e4e4:                                ; preds = %dec_label_pc_e4c0, %dec_label_pc_e4b0
  store i32 ptrtoint (i8** @global_var_1c8ac.100 to i32), i32* %r3.global-to-local, align 4
  %v2_e4e8 = load i8, i8* bitcast (i8** @global_var_1c8ac.100 to i8*), align 4
  %v3_e4e8 = zext i8 %v2_e4e8 to i32
  store i32 %v3_e4e8, i32* @r4, align 4
  %v2_e4ec = icmp eq i8 %v2_e4e8, 0
  %v2_e574 = load i32, i32* @global_var_1c72c.97, align 4
  br i1 %v2_e4ec, label %dec_label_pc_e574, label %dec_label_pc_e4f4

dec_label_pc_e4f4:                                ; preds = %dec_label_pc_e4e4
  %v3_e4f8 = udiv i32 %v2_e574, 32
  %v3_e500 = mul nuw nsw i32 %v3_e4f8, 4
  %v2_e504 = add i32 %v3_e500, %v2_e230
  store i32 %v2_e504, i32* %r3.global-to-local, align 4
  %v1_e508 = add i32 %v2_e504, -488
  %v2_e508 = inttoptr i32 %v1_e508 to i32*
  %v3_e508 = load i32, i32* %v2_e508, align 4
  %v1_e50c = urem i32 %v2_e574, 32
  %v6_e510 = lshr i32 %v3_e508, %v1_e50c
  store i32 %v6_e510, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1c8ac.100 to i32), i32* %r3.global-to-local, align 4
  %v1_e51c = urem i32 %v6_e510, 2
  %v2_e51c = icmp eq i32 %v1_e51c, 0
  store i8 0, i8* bitcast (i8** @global_var_1c8ac.100 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1c72c.97 to i32), i32* @r5, align 4
  br i1 %v2_e51c, label %dec_label_pc_e52c, label %dec_label_pc_e6bc

dec_label_pc_e52c:                                ; preds = %dec_label_pc_e4f4
  store i32 58676, i32* @lr, align 4
  %v1_e530 = icmp ne i32 %v2_e574, -1
  call void @__pseudo_cond_branch(i1 %v1_e530, i32 ptrtoint (i32* @global_var_11960.101 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e538 = load i32, i32* @r5, align 4
  %v2_e538 = inttoptr i32 %v1_e538 to i32*
  store i32 -1, i32* %v2_e538, align 4
  %v1_e540 = call i32 @function_12d68(i32 1)
  br label %dec_label_pc_e38c.backedge

dec_label_pc_e38c.backedge:                       ; preds = %dec_label_pc_e52c, %dec_label_pc_e618, %dec_label_pc_e6f0, %dec_label_pc_e7b4, %dec_label_pc_e7d8, %dec_label_pc_e88c, %dec_label_pc_e898, %bb42, %dec_label_pc_e574, %dec_label_pc_e584, %dec_label_pc_e764, %bb44, %dec_label_pc_e838, %dec_label_pc_e7c8
  %v2_e39445.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e38c

dec_label_pc_e548:                                ; preds = %dec_label_pc_e400
  store i32 %v2_e230, i32* %r2.global-to-local, align 4
  %v3_e554 = mul nuw nsw i32 %v3_e54c, 4
  %v2_e558 = add i32 %v3_e554, %v2_e230
  store i32 %v2_e558, i32* %r3.global-to-local, align 4
  %v1_e55c = add i32 %v2_e558, -360
  %v2_e55c = inttoptr i32 %v1_e55c to i32*
  %v3_e55c = load i32, i32* %v2_e55c, align 4
  %v1_e560 = urem i32 %v2_e548, 32
  %v7_e568 = shl i32 1, %v1_e560
  %v8_e568 = or i32 %v3_e55c, %v7_e568
  store i32 %v8_e568, i32* %r2.global-to-local, align 4
  store i32 %v8_e568, i32* %v2_e55c, align 4
  br label %dec_label_pc_e438

dec_label_pc_e574:                                ; preds = %dec_label_pc_e4e4
  %v7_e578 = icmp eq i32 %v2_e574, -1
  store i32 ptrtoint (i32* @global_var_1c72c.97 to i32), i32* @r5, align 4
  br i1 %v7_e578, label %dec_label_pc_e38c.backedge, label %dec_label_pc_e584

dec_label_pc_e584:                                ; preds = %dec_label_pc_e574
  %v3_e584 = udiv i32 %v2_e574, 32
  %v3_e588 = mul nuw nsw i32 %v3_e584, 4
  %v2_e590 = add i32 %v3_e588, %v2_e230
  store i32 %v2_e590, i32* %r3.global-to-local, align 4
  %v1_e594 = add i32 %v2_e590, -360
  %v2_e594 = inttoptr i32 %v1_e594 to i32*
  %v3_e594 = load i32, i32* %v2_e594, align 4
  %v1_e598 = urem i32 %v2_e574, 32
  %v6_e59c = lshr i32 %v3_e594, %v1_e598
  store i32 %v6_e59c, i32* %r2.global-to-local, align 4
  %v1_e5a0 = urem i32 %v6_e59c, 2
  %v2_e5a0 = icmp eq i32 %v1_e5a0, 0
  br i1 %v2_e5a0, label %dec_label_pc_e38c.backedge, label %dec_label_pc_e5a8

dec_label_pc_e5a8:                                ; preds = %dec_label_pc_e584
  %v6_e5a8 = inttoptr i32 %v3_e4e8 to i8*
  store i8* %v6_e5a8, i8** %stack_var_-38, align 4
  %v0_e5b0 = call i32 @function_11f08()
  %v0_e5b4 = load i32, i32* @r4, align 4
  %v2_e5b4 = inttoptr i32 %v0_e5b0 to i32*
  store i32 %v0_e5b4, i32* %v2_e5b4, align 4
  store i32 %v0_e5b0, i32* @r8, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_e5c8 = load i32, i32* @global_var_1c72c.97, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_e5d4 = call i32 @function_1215c(i32 %v2_e5c8, i32* %v4_e6b4, i32 2, i32 16386)
  %v7_e5d8 = icmp eq i32 %v5_e5d4, -1
  br i1 %v7_e5d8, label %dec_label_pc_e7c8, label %dec_label_pc_e5e0

dec_label_pc_e5e0:                                ; preds = %dec_label_pc_e5a8
  %v2_e5e0 = icmp eq i32 %v5_e5d4, 0
  br i1 %v2_e5e0, label %dec_label_pc_e7d8, label %dec_label_pc_e5e8

dec_label_pc_e5e8:                                ; preds = %dec_label_pc_e5e0
  %v3_e5e8 = load i8*, i8** %stack_var_-38, align 4
  %v4_e5e8 = ptrtoint i8* %v3_e5e8 to i32
  store i32 %v3_e4e8, i32* %r3.global-to-local, align 4
  %v4_e5f0 = mul nuw nsw i32 %v3_e4e8, 256
  %v5_e5f0 = or i32 %v4_e5e8, %v4_e5f0
  store i32 %v5_e5f0, i32* %r2.global-to-local, align 4
  %v7_e5f0 = icmp eq i32 %v5_e5f0, 0
  br i1 %v7_e5f0, label %dec_label_pc_e898, label %dec_label_pc_e5f8

dec_label_pc_e5f8:                                ; preds = %dec_label_pc_e5e8
  %v1_e5f8 = mul i32 %v4_e5e8, 256
  %v3_e5fc = and i32 %v1_e5f8, 65280
  %v4_e600 = udiv i32 %v5_e5f0, 256
  %v5_e600 = or i32 %v3_e5fc, %v4_e600
  %v6_e600 = trunc i32 %v4_e600 to i8
  store i32 %v5_e600, i32* %r2.global-to-local, align 4
  %v4_e604 = udiv i32 %v5_e5f0, 65536
  store i32 %v4_e604, i32* %r3.global-to-local, align 4
  %v3_e608 = icmp slt i8 %v6_e600, 0
  %v7_e610 = inttoptr i32 %v4_e600 to i8*
  store i8* %v7_e610, i8** %stack_var_-38, align 4
  br i1 %v3_e608, label %dec_label_pc_e618, label %dec_label_pc_e808

dec_label_pc_e618:                                ; preds = %dec_label_pc_e5f8
  %v2_e618 = load i32, i32* @global_var_1c72c.97, align 4
  %v1_e61c = call i32 @function_11960(i32 %v2_e618)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e624 = load i32, i32* @r5, align 4
  %v2_e624 = inttoptr i32 %v1_e624 to i32*
  store i32 -1, i32* %v2_e624, align 4
  br label %dec_label_pc_e38c.backedge

dec_label_pc_e62c:                                ; preds = %dec_label_pc_e3f0
  %v0_e634 = load i32, i32* @r4, align 4
  store i32 %v0_e634, i32* %r2.global-to-local, align 4
  %v3_e638 = call i32 @function_1224c(i32 2, i32 1, i32 %v0_e634)
  %v7_e63c = icmp eq i32 %v3_e638, -1
  store i32 %v3_e638, i32* %r5.global-to-local, align 4
  %v1_e644 = load i32, i32* %r8.global-to-local, align 4
  %v2_e644 = inttoptr i32 %v1_e644 to i32*
  store i32 %v3_e638, i32* %v2_e644, align 4
  br i1 %v7_e63c, label %dec_label_pc_e400, label %dec_label_pc_e64c

dec_label_pc_e64c:                                ; preds = %dec_label_pc_e62c
  %v0_e64c = load i32, i32* @r4, align 4
  store i32 %v0_e64c, i32* @r2, align 4
  %v2_e654 = call i32 @function_1189c(i32 %v3_e638, i32 3)
  %v1_e65c = or i32 %v2_e654, 2048
  store i32 %v1_e65c, i32* @r2, align 4
  %v0_e660 = load i32, i32* %r5.global-to-local, align 4
  %v2_e664 = call i32 @function_1189c(i32 %v0_e660, i32 4)
  store i32 ptrtoint (i32* @global_var_1c730.73 to i32), i32* %r2.global-to-local, align 4
  %v2_e66c = load i32, i32* @global_var_1c730.73, align 4
  store i32 %v2_e66c, i32* %r3.global-to-local, align 4
  %v2_e670 = icmp eq i32 %v2_e66c, 0
  br i1 %v2_e670, label %.thread, label %bb43

bb43:                                             ; preds = %dec_label_pc_e64c
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_11398.102 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e64c, %bb43
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_e684 = load i32, i32* @global_var_1c72c.97, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1c8ac.100 to i8*), align 4
  %v5_e694 = call i32 @function_120a8(i32 %v2_e684, %sockaddr* bitcast (i8** @global_var_1c948.80 to %sockaddr*), i32 16)
  br label %dec_label_pc_e400

dec_label_pc_e69c:                                ; preds = %dec_label_pc_e490
  %v2_e6a4 = load i32, i32* @global_var_1c72c.97, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e6b4 = call i32 @function_121bc(i32 %v2_e6a4, i32* nonnull %v4_e6b4, i32 2, i32 16384)
  br label %dec_label_pc_e4b0

dec_label_pc_e6bc:                                ; preds = %dec_label_pc_e4f4
  store i32 4, i32* @r4, align 4
  store i32 %v2_e6c4, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-52, align 4
  %v6_e6e0 = call i32 @function_12100(i32 %v2_e574, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_e6a0)
  %v3_e6e4 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_e6e4, i32* %r3.global-to-local, align 4
  %v2_e6e8 = icmp eq i32 %v3_e6e4, 0
  br i1 %v2_e6e8, label %dec_label_pc_e764, label %dec_label_pc_e6f0

dec_label_pc_e6f0:                                ; preds = %dec_label_pc_e6bc
  %v2_e6f0 = load i32, i32* @global_var_1c72c.97, align 4
  %v1_e6f4 = call i32 @function_11960(i32 %v2_e6f0)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e6fc = load i32, i32* @r5, align 4
  %v2_e6fc = inttoptr i32 %v1_e6fc to i32*
  store i32 -1, i32* %v2_e6fc, align 4
  %v0_e700 = call i32 @function_e8e4()
  %v2_e708 = call i32 @function_116e8(i32 %v0_e700, i32 10)
  %v1_e70c = add i32 %v2_e708, 1
  %v1_e710 = call i32 @function_12d68(i32 %v1_e70c)
  br label %dec_label_pc_e38c.backedge

dec_label_pc_e718:                                ; preds = %dec_label_pc_e4c0
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_e6c4, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v6_e730 = call i32 @function_12050(i32 %v2_e4b4, %sockaddr* %v5_e730, i32 %v2_e6c4, i32 16, i32 16)
  %v1_e734 = call i32 @function_f0b8(i32 %v6_e730)
  %v1_e738 = call i32 @function_d1c4(i32 %v1_e734)
  store i32 %v1_e348, i32* %r2.global-to-local, align 4
  %v2_e748 = call i32 @function_11a60(i32 %v1_e744, i32 9)
  store i32 ptrtoint (i32* @global_var_1c8a8.85 to i32), i32* %r3.global-to-local, align 4
  %v2_e750 = load i32, i32* @global_var_1c8a8.85, align 4
  %v2_e754 = icmp eq i32 %v2_e750, 0
  br i1 %v2_e754, label %dec_label_pc_e75c, label %dec_label_pc_e7fc

dec_label_pc_e75c:                                ; preds = %dec_label_pc_e718, %dec_label_pc_e7fc
  %v1_e760 = call i32 @function_12cd4(i32 0)
  br label %dec_label_pc_e764

dec_label_pc_e764:                                ; preds = %dec_label_pc_e6bc, %dec_label_pc_e75c
  %v2_e768 = call i32 @function_110e0(i8* %v1_e768)
  %sext = mul i32 %v2_e768, 16777216
  %v1_e76c = sdiv i32 %sext, 16777216
  %v7_e76c = inttoptr i32 %v1_e76c to i8*
  store i8* %v7_e76c, i8** %stack_var_-38, align 4
  %v0_e770 = call i32 @function_11398()
  store i32 %v0_e770, i32* @global_var_1c93c.50, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e784 = load i32, i32* @r4, align 4
  store i32 %v0_e784, i32* %r2.global-to-local, align 4
  %v0_e788 = load i32, i32* @r5, align 4
  %v1_e788 = inttoptr i32 %v0_e788 to i32*
  %v2_e788 = load i32, i32* %v1_e788, align 4
  %v5_e78c = call i32 @function_121bc(i32 %v2_e788, i32* nonnull @global_var_141dc.105, i32 %v0_e784, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_e798 = load i32, i32* @r5, align 4
  %v1_e798 = inttoptr i32 %v0_e798 to i32*
  %v2_e798 = load i32, i32* %v1_e798, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e7a4 = call i32 @function_121bc(i32 %v2_e798, i32* %v4_e6b4, i32 1, i32 16384)
  %v3_e7a8 = load i8*, i8** %stack_var_-38, align 4
  %v4_e7a8 = ptrtoint i8* %v3_e7a8 to i32
  store i32 %v4_e7a8, i32* %r2.global-to-local, align 4
  %v3_e7ac = icmp eq i8* %v3_e7a8, null
  br i1 %v3_e7ac, label %dec_label_pc_e38c.backedge, label %dec_label_pc_e7b4

dec_label_pc_e7b4:                                ; preds = %dec_label_pc_e764
  %v0_e7b4 = load i32, i32* @r5, align 4
  %v1_e7b4 = inttoptr i32 %v0_e7b4 to i32*
  %v2_e7b4 = load i32, i32* %v1_e7b4, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_e7c0 = call i32 @function_121bc(i32 %v2_e7b4, i32* nonnull %stack_var_-140, i32 %v4_e7a8, i32 16384)
  br label %dec_label_pc_e38c.backedge

dec_label_pc_e7c8:                                ; preds = %dec_label_pc_e808, %dec_label_pc_e5a8
  %v0_e7c8 = load i32, i32* @r8, align 4
  %v1_e7c8 = inttoptr i32 %v0_e7c8 to i32*
  %v2_e7c8 = load i32, i32* %v1_e7c8, align 4
  store i32 %v2_e7c8, i32* %r3.global-to-local, align 4
  %v7_e7cc = icmp eq i32 %v2_e7c8, 4
  br i1 %v7_e7cc, label %dec_label_pc_e38c.backedge, label %bb44

bb44:                                             ; preds = %dec_label_pc_e7c8
  %v8_e7d0 = icmp eq i32 %v2_e7c8, 11
  br i1 %v8_e7d0, label %dec_label_pc_e38c.backedge, label %dec_label_pc_e7d8

dec_label_pc_e7d8:                                ; preds = %dec_label_pc_e830, %bb44, %dec_label_pc_e5e0
  %v2_e7d8 = load i32, i32* @global_var_1c72c.97, align 4
  store i32 59364, i32* @lr, align 4
  %v1_e7e0 = icmp ne i32 %v2_e7d8, -1
  call void @__pseudo_cond_branch(i1 %v1_e7e0, i32 ptrtoint (i32* @global_var_11960.101 to i32))
  store i32 ptrtoint (i32* @global_var_1c72c.97 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1c72c.97, align 4
  %v1_e7f4 = call i32 @function_12d68(i32 1)
  br label %dec_label_pc_e38c.backedge

dec_label_pc_e7fc:                                ; preds = %dec_label_pc_e718
  %v2_e800 = call i32 @function_11a60(i32 %v2_e750, i32 9)
  br label %dec_label_pc_e75c

dec_label_pc_e808:                                ; preds = %dec_label_pc_e5f8
  %v0_e808 = load i32, i32* @r4, align 4
  %v1_e808 = load i32, i32* @r8, align 4
  %v2_e808 = inttoptr i32 %v1_e808 to i32*
  store i32 %v0_e808, i32* %v2_e808, align 4
  store i32 %v2_e810, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_e81c = load i32, i32* @global_var_1c72c.97, align 4
  %v9_e824 = call i32 @function_1215c(i32 %v2_e81c, i32* nonnull %stack_var_-1548, i32 %v4_e600, i32 16386)
  %v7_e828 = icmp eq i32 %v9_e824, -1
  br i1 %v7_e828, label %dec_label_pc_e7c8, label %dec_label_pc_e830

dec_label_pc_e830:                                ; preds = %dec_label_pc_e808
  %v2_e830 = icmp eq i32 %v9_e824, 0
  br i1 %v2_e830, label %dec_label_pc_e7d8, label %dec_label_pc_e838

dec_label_pc_e838:                                ; preds = %dec_label_pc_e830
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_e848 = load i32, i32* @global_var_1c72c.97, align 4
  %v5_e84c = call i32 @function_1215c(i32 %v2_e848, i32* nonnull %v4_e6b4, i32 2, i32 16384)
  %v3_e850 = load i8*, i8** %stack_var_-38, align 4
  %v4_e850 = ptrtoint i8* %v3_e850 to i32
  %v4_e854 = urem i32 %v4_e604, 256
  %v4_e858 = mul i32 %v4_e850, 256
  %v5_e858 = or i32 %v4_e858, %v4_e854
  store i32 %v5_e858, i32* %r2.global-to-local, align 4
  %v3_e860 = sdiv i32 %v4_e858, 256
  store i32 %v3_e860, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_e86c = load i32, i32* @global_var_1c72c.97, align 4
  %v6_e874 = inttoptr i32 %v5_e858 to i8*
  store i8* %v6_e874, i8** %stack_var_-38, align 4
  %v8_e878 = call i32 @function_1215c(i32 %v2_e86c, i32* nonnull %stack_var_-1548, i32 %v5_e858, i32 16384)
  %v3_e87c = load i8*, i8** %stack_var_-38, align 4
  %v4_e87c = ptrtoint i8* %v3_e87c to i32
  store i32 %v4_e87c, i32* %r2.global-to-local, align 4
  %v4_e880 = urem i32 %v3_e860, 256
  store i32 %v4_e880, i32* %r3.global-to-local, align 4
  %v6_e884 = mul nuw nsw i32 %v4_e880, 256
  %v7_e884 = or i32 %v4_e87c, %v6_e884
  %v9_e884 = icmp eq i32 %v7_e884, 0
  br i1 %v9_e884, label %dec_label_pc_e38c.backedge, label %dec_label_pc_e88c

dec_label_pc_e88c:                                ; preds = %dec_label_pc_e838
  %v7_e890 = call i32 @function_8320(i32* nonnull %stack_var_-1548, i32 %v7_e884, i32 %v4_e87c, i32 %v4_e880)
  br label %dec_label_pc_e38c.backedge

dec_label_pc_e898:                                ; preds = %dec_label_pc_e5e8
  %v2_e89c = load i32, i32* @global_var_1c72c.97, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e8ac = call i32 @function_1215c(i32 %v2_e89c, i32* nonnull %v4_e6b4, i32 2, i32 16384)
  br label %dec_label_pc_e38c.backedge

; uselistorder directives
  uselistorder i32 %v4_e880, { 2, 0, 1 }
  uselistorder i32 %v4_e87c, { 1, 0, 2 }
  uselistorder i32 %v3_e860, { 1, 0 }
  uselistorder i32 %v5_e858, { 1, 0, 2 }
  uselistorder i32 %v4_e858, { 1, 0 }
  uselistorder i32 %v9_e824, { 1, 0 }
  uselistorder i32 %v3_e638, { 1, 3, 2, 0 }
  uselistorder i32 %v4_e600, { 2, 3, 0, 1 }
  uselistorder i32 %v5_e5d4, { 1, 0 }
  uselistorder i32 %v2_e574, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_e4b4, { 3, 2, 1, 0 }
  uselistorder i32 %v5_e478, { 2, 3, 1, 0 }
  uselistorder i32 %v2_e3c0, { 2, 1, 0 }
  uselistorder i32 %v1_e3b0, { 1, 2, 0 }
  uselistorder i32 %v1_e398, { 1, 2, 0 }
  uselistorder i32 %v2_e6c4, { 1, 0, 2 }
  uselistorder i32* %v4_e6b4, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v2_e388, { 1, 0, 2 }
  uselistorder i32 %v2_e384, { 1, 0, 2 }
  uselistorder i32 %v2_e230, { 0, 1, 8, 2, 3, 4, 5, 6, 7, 9 }
  uselistorder i32 %v2_e220, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_e138, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-140, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i8** %stack_var_-38, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 0, 3, 4 }
  uselistorder i32* %stack_var_-1548, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 29, 28, 30, 31, 32, 33, 24, 34, 35, 36, 47, 48, 40, 41, 37, 45, 46, 38, 39, 42, 43, 44 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36 }
  uselistorder i32* @global_var_1c8a8.85, { 1, 2, 0 }
  uselistorder i32 16386, { 1, 2, 0, 3 }
  uselistorder i8* bitcast (i8** @global_var_1c8ac.100 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1c8ac.100, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1c8ac.100 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1c72c.97, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 13, 12, 15, 14 }
  uselistorder i32* @global_var_1c728.75, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32 (i32)* @function_e040, { 1, 0 }
  uselistorder i32 (i32)* @function_d774, { 1, 0 }
  uselistorder i32 (i32)* @function_8650, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_e998, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_de40, { 1, 0 }
  uselistorder i32* @global_var_1c730.73, { 2, 3, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_dfb0.71 to i32), { 0, 2, 1 }
  uselistorder i32 (i32, i32)* @function_122c0, { 1, 0 }
  uselistorder label %dec_label_pc_e764, { 1, 0 }
  uselistorder label %dec_label_pc_e75c, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_e38c.backedge, { 6, 5, 12, 4, 11, 13, 3, 10, 2, 1, 9, 8, 0, 7 }
  uselistorder label %dec_label_pc_e4b0, { 2, 1, 0 }
  uselistorder label %bb42, { 1, 0 }
  uselistorder label %dec_label_pc_e400, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e3f0, { 1, 0 }
  uselistorder label %dec_label_pc_e3ac.dec_label_pc_e3ac_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e394.dec_label_pc_e394_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e1ec, { 2, 0, 1 }
}

define i32 @function_e8e4() local_unnamed_addr {
dec_label_pc_e8e4:
  %v2_e8f0 = load i32, i32* @global_var_1c8b0.107, align 4
  %v2_e8f4 = load i32, i32* @global_var_1c8bc.109, align 4
  store i32 ptrtoint (i32* @global_var_1c8b4.111 to i32), i32* @lr, align 4
  %v4_e900 = mul i32 %v2_e8f0, 2048
  %v5_e900 = xor i32 %v4_e900, %v2_e8f0
  %v4_e904 = udiv i32 %v2_e8f4, 524288
  %v5_e904 = xor i32 %v4_e904, %v2_e8f4
  %v2_e908 = load i32, i32* @global_var_1c8b4.111, align 4
  %v2_e90c = load i32, i32* @global_var_1c8b8.113, align 4
  %v2_e910 = xor i32 %v5_e904, %v5_e900
  %v4_e914 = udiv i32 %v5_e900, 256
  %v5_e914 = xor i32 %v2_e910, %v4_e914
  store i32 %v2_e908, i32* @global_var_1c8b0.107, align 4
  store i32 %v2_e90c, i32* @global_var_1c8b4.111, align 4
  store i32 %v2_e8f4, i32* @global_var_1c8b8.113, align 4
  store i32 %v5_e914, i32* @global_var_1c8bc.109, align 4
  ret i32 %v5_e914

; uselistorder directives
  uselistorder i32 %v2_e8f4, { 2, 1, 0 }
  uselistorder i32 %v2_e8f0, { 1, 0 }
}

define i32 @function_e93c(i32 %arg1) local_unnamed_addr {
dec_label_pc_e93c:
  %stack_var_-12 = alloca i32, align 4
  %v3_e93c = load i32, i32* @r4, align 4
  store i32 %v3_e93c, i32* %stack_var_-12, align 4
  %v2_e944 = call i32 @function_11c30(i32* null)
  store i32 %v2_e944, i32* @global_var_1c8b0.107, align 4
  %v0_e950 = call i32 @function_119b8()
  store i32 %v0_e950, i32* @r4, align 4
  %v0_e958 = call i32 @function_119e4()
  %v0_e960 = load i32, i32* @r4, align 4
  %v2_e960 = xor i32 %v0_e960, %v0_e958
  store i32 %v2_e960, i32* @r4, align 4
  store i32 %v2_e960, i32* @global_var_1c8b4.111, align 4
  %v1_e968 = call i32 @function_11f14(i32 %v0_e958)
  %v2_e96c = load i32, i32* @global_var_1c8b4.111, align 4
  %v2_e978 = xor i32 %v2_e96c, %v1_e968
  store i32 %v2_e978, i32* @global_var_1c8bc.109, align 4
  store i32 %v1_e968, i32* @global_var_1c8b8.113, align 4
  %v2_e984 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_e984, i32* @r4, align 4
  ret i32 %v1_e968

; uselistorder directives
  uselistorder i32 %v1_e968, { 1, 2, 0 }
  uselistorder i32 %v0_e958, { 1, 0 }
  uselistorder i32 ()* @function_119e4, { 1, 0 }
}

define i32 @function_e998(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e998:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e998 = load i32, i32* @r4, align 4
  store i32 %v3_e998, i32* %stack_var_-36, align 4
  %v6_e998 = load i32, i32* @r5, align 4
  %v9_e998 = load i32, i32* @r6, align 4
  %v12_e998 = load i32, i32* @r7, align 4
  %v28_e998 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %arg1, i32* %fp.global-to-local, align 4
  %v2_e9a0 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_e9ac = call i32 @function_10ae8(i32 30)
  %v3_e9b8 = call i32 @function_10a04(i32 30, i32* null)
  %v2_e9c4 = inttoptr i32 %v3_e9b8 to i8*
  %v3_e9c4 = call i32 @function_12010(i32 %v2_e9a0, i8* %v2_e9c4)
  %v2_e9c8 = icmp eq i32 %arg2, 0
  br i1 %v2_e9c8, label %dec_label_pc_ea44, label %dec_label_pc_e9d0

dec_label_pc_e9d0:                                ; preds = %dec_label_pc_e998
  store i32 ptrtoint (i32* @global_var_1c8b0.107 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c8b4.111 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c8b8.113 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1c8bc.109 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_ea18 = bitcast i32* %stack_var_-68 to i8*
  br label %dec_label_pc_e9e4

dec_label_pc_e9e4:                                ; preds = %dec_label_pc_e9e4.dec_label_pc_e9e4_crit_edge, %dec_label_pc_e9d0
  %v1_ea08 = phi i32 [ %v1_ea08.pre, %dec_label_pc_e9e4.dec_label_pc_e9e4_crit_edge ], [ ptrtoint (i32* @global_var_1c8b0.107 to i32), %dec_label_pc_e9d0 ]
  %v2_e9e4 = load i32, i32* @global_var_1c8bc.109, align 4
  store i32 %v2_e9e4, i32* %r2.global-to-local, align 4
  %v2_e9e8 = load i32, i32* @global_var_1c8b0.107, align 4
  %v4_e9ec = udiv i32 %v2_e9e4, 524288
  %v5_e9ec = xor i32 %v4_e9ec, %v2_e9e4
  %v4_e9f0 = mul i32 %v2_e9e8, 2048
  %v5_e9f0 = xor i32 %v4_e9f0, %v2_e9e8
  %v2_e9f4 = xor i32 %v5_e9ec, %v5_e9f0
  %v2_e9f8 = load i32, i32* @global_var_1c8b4.111, align 4
  %v2_e9fc = load i32, i32* @global_var_1c8b8.113, align 4
  store i32 %v2_e9fc, i32* %ip.global-to-local, align 4
  %v4_ea00 = udiv i32 %v5_e9f0, 256
  %v5_ea00 = xor i32 %v2_e9f4, %v4_ea00
  store i32 %v5_ea00, i32* @r4, align 4
  %v2_ea08 = inttoptr i32 %v1_ea08 to i32*
  store i32 %v2_e9f8, i32* %v2_ea08, align 4
  %v0_ea0c = load i32, i32* %ip.global-to-local, align 4
  %v1_ea0c = load i32, i32* %r8.global-to-local, align 4
  %v2_ea0c = inttoptr i32 %v1_ea0c to i32*
  store i32 %v0_ea0c, i32* %v2_ea0c, align 4
  %v0_ea10 = load i32, i32* %r2.global-to-local, align 4
  %v1_ea10 = load i32, i32* @r7, align 4
  %v2_ea10 = inttoptr i32 %v1_ea10 to i32*
  store i32 %v0_ea10, i32* %v2_ea10, align 4
  %v0_ea14 = load i32, i32* @r4, align 4
  %v1_ea14 = load i32, i32* @r6, align 4
  %v2_ea14 = inttoptr i32 %v1_ea14 to i32*
  store i32 %v0_ea14, i32* %v2_ea14, align 4
  %v2_ea18 = call i32 @function_110e0(i8* %v1_ea18)
  %v0_ea20 = load i32, i32* @r4, align 4
  %v2_ea24 = call i32 @function_116e8(i32 %v0_ea20, i32 %v2_ea18)
  %v2_ea2c = add i32 %v2_ea24, %v28_e998
  %v1_ea30 = add i32 %v2_ea2c, -32
  %v2_ea30 = inttoptr i32 %v1_ea30 to i8*
  %v3_ea30 = load i8, i8* %v2_ea30, align 1
  %v2_ea34 = load i32, i32* @r5, align 4
  %v3_ea34 = load i32, i32* %fp.global-to-local, align 4
  %v4_ea34 = add i32 %v3_ea34, %v2_ea34
  %v5_ea34 = inttoptr i32 %v4_ea34 to i8*
  store i8 %v3_ea30, i8* %v5_ea34, align 1
  %v0_ea38 = load i32, i32* @r5, align 4
  %v1_ea38 = add i32 %v0_ea38, 1
  store i32 %v1_ea38, i32* @r5, align 4
  %v1_ea3c = load i32, i32* %sb.global-to-local, align 4
  %v9_ea3c = icmp eq i32 %v1_ea38, %v1_ea3c
  br i1 %v9_ea3c, label %dec_label_pc_ea44, label %dec_label_pc_e9e4.dec_label_pc_e9e4_crit_edge

dec_label_pc_e9e4.dec_label_pc_e9e4_crit_edge:    ; preds = %dec_label_pc_e9e4
  %v1_ea08.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_e9e4

dec_label_pc_ea44:                                ; preds = %dec_label_pc_e9e4, %dec_label_pc_e998
  %v1_ea48 = call i32 @function_10a30(i32 30)
  %v2_ea50 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_ea50, i32* @r4, align 4
  store i32 %v6_e998, i32* @r5, align 4
  store i32 %v9_e998, i32* @r6, align 4
  store i32 %v12_e998, i32* @r7, align 4
  ret i32 %v1_ea48

; uselistorder directives
  uselistorder i32 %v2_e9e8, { 1, 0 }
  uselistorder i32 %v2_e9e4, { 1, 0, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
}

define i32 @function_ea64(i8* %arg1) local_unnamed_addr {
dec_label_pc_ea64:
  %fp.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_ea64 = load i32, i32* @r4, align 4
  store i32 %v3_ea64, i32* %stack_var_-36, align 4
  %v9_ea64 = load i32, i32* @r6, align 4
  %v12_ea64 = load i32, i32* @r7, align 4
  %v15_ea64 = load i32, i32* @r8, align 4
  %v18_ea64 = load i32, i32* @sb, align 4
  %v21_ea64 = load i32, i32* @sl, align 4
  %v24_ea64 = load i32, i32* @fp, align 4
  %v0_ea68 = load i32, i32* @r1, align 4
  store i32 %v0_ea68, i32* %r4.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %tmp20 = icmp slt i32 %v0_ea68, 1
  br i1 %tmp20, label %bb, label %bb21

bb:                                               ; preds = %dec_label_pc_ea64
  store i32 %v3_ea64, i32* @r4, align 4
  ret i32 %tmp

bb21:                                             ; preds = %dec_label_pc_ea64
  store i32 ptrtoint (i32* @global_var_1c8bc.109 to i32), i32* %fp.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c8b8.113 to i32), i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c8b4.111 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c8b0.107 to i32), i32* %r8.global-to-local, align 4
  %v2_ea84 = load i32, i32* @global_var_1c8bc.109, align 4
  store i32 %v2_ea84, i32* @lr, align 4
  %v2_ea88 = load i32, i32* @global_var_1c8b8.113, align 4
  store i32 %v2_ea88, i32* %r7.global-to-local, align 4
  %v2_ea8c = load i32, i32* @global_var_1c8b4.111, align 4
  store i32 %v2_ea8c, i32* %r6.global-to-local, align 4
  %v2_ea90 = load i32, i32* @global_var_1c8b0.107, align 4
  br label %dec_label_pc_eabc

dec_label_pc_ea98:                                ; preds = %dec_label_pc_eae8
  %v3_eaf0 = sdiv i32 %v5_ead4, 256
  %v1_ea98 = trunc i32 %v3_eaf0 to i8
  %v3_ea98 = add i32 %v9_eadc, 1
  %v4_ea98 = inttoptr i32 %v3_ea98 to i8*
  store i8 %v1_ea98, i8* %v4_ea98, align 1
  %v0_ea9c = load i32, i32* %r3.global-to-local, align 4
  %v1_ea9c = trunc i32 %v0_ea9c to i8
  %v2_ea9c = load i32, i32* %r5.global-to-local, align 4
  %v3_ea9c = inttoptr i32 %v2_ea9c to i8*
  store i8 %v1_ea9c, i8* %v3_ea9c, align 1
  %v0_eaa0 = load i32, i32* %r5.global-to-local, align 4
  %v1_eaa0 = add i32 %v0_eaa0, 2
  store i32 %v1_eaa0, i32* %r5.global-to-local, align 4
  %v0_eaa4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_eaa4

dec_label_pc_eaa4:                                ; preds = %.thread, %dec_label_pc_ea98
  %v0_eaa4 = phi i32 [ %v9_eae0, %.thread ], [ %v0_eaa4.pre, %dec_label_pc_ea98 ]
  %v2_ea987 = phi i32 [ %v12_eadc, %.thread ], [ %v1_eaa0, %dec_label_pc_ea98 ]
  %tmp22 = icmp slt i32 %v0_eaa4, 1
  br i1 %tmp22, label %dec_label_pc_eb24, label %dec_label_pc_eab0

dec_label_pc_eab0:                                ; preds = %dec_label_pc_eaa4
  %v0_eaa8 = load i32, i32* %r6.global-to-local, align 4
  %v0_eab0 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_eab0, i32* %r6.global-to-local, align 4
  %v0_eab4 = load i32, i32* @lr, align 4
  store i32 %v0_eab4, i32* %r7.global-to-local, align 4
  %v0_eab8 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_eab8, i32* @lr, align 4
  br label %dec_label_pc_eabc

dec_label_pc_eabc:                                ; preds = %bb21, %dec_label_pc_eab0
  %v0_eb0c = phi i32 [ %v2_ea8c, %bb21 ], [ %v0_eab0, %dec_label_pc_eab0 ]
  %v9_eadc = phi i32 [ %tmp, %bb21 ], [ %v2_ea987, %dec_label_pc_eab0 ]
  %v0_eaf4 = phi i32 [ %v0_ea68, %bb21 ], [ %v0_eaa4, %dec_label_pc_eab0 ]
  %v0_eb00 = phi i32 [ %v2_ea84, %bb21 ], [ %v0_eab8, %dec_label_pc_eab0 ]
  %v0_eafc = phi i32 [ %v2_ea90, %bb21 ], [ %v0_eaa8, %dec_label_pc_eab0 ]
  %v4_eabc = mul i32 %v0_eafc, 2048
  %v5_eabc = xor i32 %v4_eabc, %v0_eafc
  %v4_eac0 = udiv i32 %v0_eb00, 524288
  %v5_eac0 = xor i32 %v4_eac0, %v0_eb00
  %v2_eac4 = xor i32 %v5_eac0, %v5_eabc
  %v4_ead4 = udiv i32 %v5_eabc, 256
  %v5_ead4 = xor i32 %v4_ead4, %v2_eac4
  store i32 %v5_ead4, i32* %r3.global-to-local, align 4
  %v7_eadc = icmp sgt i32 %v0_eaf4, 3
  br i1 %v7_eadc, label %.thread, label %dec_label_pc_eae8

.thread:                                          ; preds = %dec_label_pc_eabc
  %v10_eadc = inttoptr i32 %v9_eadc to i32*
  store i32 %v5_ead4, i32* %v10_eadc, align 4
  %v11_eadc = load i32, i32* %r5.global-to-local, align 4
  %v12_eadc = add i32 %v11_eadc, 4
  store i32 %v12_eadc, i32* %r5.global-to-local, align 4
  %v8_eae0 = load i32, i32* %r4.global-to-local, align 4
  %v9_eae0 = add i32 %v8_eae0, -4
  store i32 %v9_eae0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_eaa4

dec_label_pc_eae8:                                ; preds = %dec_label_pc_eabc
  store i32 %v5_ead4, i32* %r3.global-to-local, align 4
  %v7_eaec = icmp eq i32 %v0_eaf4, 1
  %v1_eaf4 = add i32 %v0_eaf4, -2
  store i32 %v1_eaf4, i32* %r4.global-to-local, align 4
  br i1 %v7_eaec, label %dec_label_pc_eafc, label %dec_label_pc_ea98

dec_label_pc_eafc:                                ; preds = %dec_label_pc_eae8
  store i32 %v5_ead4, i32* %r3.global-to-local, align 4
  %v1_eb0c = load i32, i32* %r8.global-to-local, align 4
  %v2_eb0c = inttoptr i32 %v1_eb0c to i32*
  store i32 %v0_eb0c, i32* %v2_eb0c, align 4
  %v0_eb10 = load i32, i32* %r7.global-to-local, align 4
  %v1_eb10 = load i32, i32* %sl.global-to-local, align 4
  %v2_eb10 = inttoptr i32 %v1_eb10 to i32*
  store i32 %v0_eb10, i32* %v2_eb10, align 4
  %v0_eb14 = load i32, i32* @lr, align 4
  %v1_eb14 = load i32, i32* %sb.global-to-local, align 4
  %v2_eb14 = inttoptr i32 %v1_eb14 to i32*
  store i32 %v0_eb14, i32* %v2_eb14, align 4
  %v0_eb18 = load i32, i32* %r3.global-to-local, align 4
  %v1_eb18 = load i32, i32* %fp.global-to-local, align 4
  %v2_eb18 = inttoptr i32 %v1_eb18 to i32*
  store i32 %v0_eb18, i32* %v2_eb18, align 4
  %v0_eb1c = load i32, i32* %r3.global-to-local, align 4
  %v1_eb1c = trunc i32 %v0_eb1c to i8
  %v2_eb1c = load i32, i32* %r5.global-to-local, align 4
  %v3_eb1c = inttoptr i32 %v2_eb1c to i8*
  store i8 %v1_eb1c, i8* %v3_eb1c, align 1
  %v2_eb20 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_eb20, i32* @r4, align 4
  store i32 %v9_ea64, i32* @r6, align 4
  store i32 %v12_ea64, i32* @r7, align 4
  store i32 %v15_ea64, i32* @r8, align 4
  store i32 %v18_ea64, i32* @sb, align 4
  store i32 %v21_ea64, i32* @sl, align 4
  store i32 %v24_ea64, i32* @fp, align 4
  ret i32 %v5_eabc

dec_label_pc_eb24:                                ; preds = %dec_label_pc_eaa4
  %v0_eb24 = load i32, i32* %r3.global-to-local, align 4
  %v1_eb24 = load i32, i32* %fp.global-to-local, align 4
  %v2_eb24 = inttoptr i32 %v1_eb24 to i32*
  store i32 %v0_eb24, i32* %v2_eb24, align 4
  %v0_eb28 = load i32, i32* @lr, align 4
  %v1_eb28 = load i32, i32* %sb.global-to-local, align 4
  %v2_eb28 = inttoptr i32 %v1_eb28 to i32*
  store i32 %v0_eb28, i32* %v2_eb28, align 4
  %v0_eb2c = load i32, i32* %r7.global-to-local, align 4
  %v1_eb2c = load i32, i32* %sl.global-to-local, align 4
  %v2_eb2c = inttoptr i32 %v1_eb2c to i32*
  store i32 %v0_eb2c, i32* %v2_eb2c, align 4
  %v0_eb30 = load i32, i32* %r6.global-to-local, align 4
  %v1_eb30 = load i32, i32* %r8.global-to-local, align 4
  %v2_eb30 = inttoptr i32 %v1_eb30 to i32*
  store i32 %v0_eb30, i32* %v2_eb30, align 4
  %v2_eb34 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_eb34, i32* @r4, align 4
  store i32 %v9_ea64, i32* @r6, align 4
  store i32 %v12_ea64, i32* @r7, align 4
  store i32 %v15_ea64, i32* @r8, align 4
  store i32 %v18_ea64, i32* @sb, align 4
  store i32 %v21_ea64, i32* @sl, align 4
  store i32 %v24_ea64, i32* @fp, align 4
  ret i32 %v5_eabc

; uselistorder directives
  uselistorder i32 %v9_eae0, { 1, 0 }
  uselistorder i32 %v12_eadc, { 1, 0 }
  uselistorder i32 %v5_ead4, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v5_eabc, { 1, 2, 0, 3 }
  uselistorder i32 %v0_eafc, { 1, 0 }
  uselistorder i32 %v0_eb00, { 1, 0 }
  uselistorder i32 %v0_eaa4, { 1, 0 }
  uselistorder i32 %v24_ea64, { 1, 0 }
  uselistorder i32 %v21_ea64, { 1, 0 }
  uselistorder i32 %v18_ea64, { 1, 0 }
  uselistorder i32 %v15_ea64, { 1, 0 }
  uselistorder i32 %v12_ea64, { 1, 0 }
  uselistorder i32 %v9_ea64, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 4, 3, 0 }
  uselistorder i32* %r6.global-to-local, { 1, 3, 2, 0 }
  uselistorder i32* %r5.global-to-local, { 2, 6, 5, 1, 3, 4, 0 }
  uselistorder i32* %r4.global-to-local, { 2, 4, 3, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 5, 0, 1, 2, 4, 7, 6, 3 }
  uselistorder i32* @global_var_1c8b0.107, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1c8b0.107 to i32), { 1, 0, 2 }
  uselistorder i32* @global_var_1c8b4.111, { 2, 3, 4, 1, 0, 5, 6 }
  uselistorder i32* @global_var_1c8b8.113, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1c8bc.109, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_eabc, { 1, 0 }
}

define i32 @function_eb48(i32 %arg1) local_unnamed_addr {
dec_label_pc_eb48:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_eb48 = load i32, i32* @r4, align 4
  store i32 %v3_eb48, i32* %stack_var_-8, align 4
  %v6_eb48 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_eb4c = icmp eq i32 %arg1, 0
  br i1 %v2_eb4c, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_eb48
  store i32 %v3_eb48, i32* @r4, align 4
  ret i32 0

bb3:                                              ; preds = %dec_label_pc_eb48
  %v1_eb54 = add i32 %arg1, 4
  %v2_eb54 = inttoptr i32 %v1_eb54 to i32*
  %v3_eb54 = load i32, i32* %v2_eb54, align 4
  %v1_eb5c = icmp ne i32 %v3_eb54, 0
  call void @__pseudo_cond_branch(i1 %v1_eb5c, i32 ptrtoint (i32* @global_var_12590.25 to i32))
  %v0_eb60 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_eb60, i32* @r0, align 4
  %v2_eb64 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_eb64, i32* @r4, align 4
  store i32 %v6_eb48, i32* @lr, align 4
  %v0_eb68 = call i32 @function_12590()
  ret i32 %v0_eb68
}

define i32 @function_eb6c(i8* %arg1) local_unnamed_addr {
dec_label_pc_eb6c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-4288 = alloca i8, align 1
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-2227 = alloca i32, align 4
  %stack_var_-2240 = alloca i8, align 1
  %stack_var_-2228 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_eb6c = load i32, i32* @r4, align 4
  store i32 %v3_eb6c, i32* %stack_var_-36, align 4
  %v6_eb6c = load i32, i32* @r5, align 4
  %v9_eb6c = load i32, i32* @r6, align 4
  %v12_eb6c = load i32, i32* @r7, align 4
  %v15_eb6c = load i32, i32* @r8, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_eb84 = call i32 @function_12538(i32 1, i32 8)
  %v0_eb8c = load i32, i32* @r4, align 4
  %v1_eb8c = inttoptr i32 %v0_eb8c to i8*
  store i32 %v0_eb8c, i32* %r0.global-to-local, align 4
  %v3_eb90 = call i32 @function_110e0(i8* %v1_eb8c)
  %v2_eb98 = ptrtoint i32* %stack_var_-2228 to i32
  store i32 %v2_eb98, i32* %fp.global-to-local, align 4
  %v2_eb9c = ptrtoint i8* %stack_var_-2240 to i32
  %v1_eba0 = add i32 %v3_eb90, 1
  store i32 %v1_eba0, i32* %r0.global-to-local, align 4
  %v2_eba4 = ptrtoint i32* %stack_var_-2227 to i32
  store i32 %v2_eba4, i32* %r2.global-to-local, align 4
  store i32 %v2_eb98, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_ebe4162 = icmp eq i32 %v1_eba0, 0
  store i1 %v2_ebe4162, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_ebec163 = or i32 %v2_eba4, 1
  store i32 %v1_ebec163, i32* %r1.global-to-local, align 4
  %tmp124164 = icmp slt i32 %v1_eba0, 1
  br i1 %tmp124164, label %dec_label_pc_ebf4, label %dec_label_pc_ebb4.lr.ph

dec_label_pc_ebb4.lr.ph:                          ; preds = %dec_label_pc_eb6c
  %v0_ebb4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ebb4

dec_label_pc_ebb4:                                ; preds = %dec_label_pc_ebb4.lr.ph, %.thread12
  %v1_ebc8176.off0 = phi i8 [ 0, %dec_label_pc_ebb4.lr.ph ], [ %extract.t179, %.thread12 ]
  %v0_ebb4 = phi i32 [ %v0_ebb4.pre, %dec_label_pc_ebb4.lr.ph ], [ %v1_ebd8, %.thread12 ]
  %v2_ebf8165 = phi i32 [ %v2_eba4, %dec_label_pc_ebb4.lr.ph ], [ %v0_ebe0, %.thread12 ]
  %v1_ebb4 = inttoptr i32 %v0_ebb4 to i8*
  %v2_ebb4 = load i8, i8* %v1_ebb4, align 1
  %v3_ebb4 = zext i8 %v2_ebb4 to i32
  store i32 %v3_ebb4, i32* %r3.global-to-local, align 4
  %v2_ebb8 = icmp eq i8 %v2_ebb4, 0
  store i1 %v2_ebb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ebb8, label %.thread6, label %bb

bb:                                               ; preds = %dec_label_pc_ebb4
  %v8_ebbc = icmp eq i8 %v2_ebb4, 46
  store i1 %v8_ebbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ebbc, label %.thread6, label %.thread

.thread:                                          ; preds = %bb
  %v4_ebc0 = inttoptr i32 %v2_ebf8165 to i8*
  store i8 %v2_ebb4, i8* %v4_ebc0, align 1
  %v5_ebc0 = load i32, i32* %r2.global-to-local, align 4
  %v6_ebc0 = add i32 %v5_ebc0, 1
  store i32 %v6_ebc0, i32* %r2.global-to-local, align 4
  %v0_ebc4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ebc4.pr.pr, label %.thread..thread6_crit_edge, label %bb122

.thread..thread6_crit_edge:                       ; preds = %.thread
  %v1_ebc8.pre = load i32, i32* %lr.global-to-local, align 4
  %extract.t = trunc i32 %v1_ebc8.pre to i8
  br label %.thread6

.thread6:                                         ; preds = %.thread..thread6_crit_edge, %bb, %dec_label_pc_ebb4
  %v1_ebc8.off0 = phi i8 [ %extract.t, %.thread..thread6_crit_edge ], [ %v1_ebc8176.off0, %bb ], [ %v1_ebc8176.off0, %dec_label_pc_ebb4 ]
  %v3_ebc8 = load i32, i32* %r5.global-to-local, align 4
  %v4_ebc8 = inttoptr i32 %v3_ebc8 to i8*
  store i8 %v1_ebc8.off0, i8* %v4_ebc8, align 1
  %v0_ebcc.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ebcc.pr, label %bb123, label %..thread12_crit_edge

bb122:                                            ; preds = %.thread
  store i32 %v6_ebc0, i32* %r1.global-to-local, align 4
  %v1_ebcc = load i32, i32* %ip.global-to-local, align 4
  %v2_ebcc = urem i32 %v1_ebcc, 256
  store i32 %v2_ebcc, i32* %lr.global-to-local, align 4
  br label %.thread12

..thread12_crit_edge:                             ; preds = %.thread6
  %v1_ebcc10 = load i32, i32* %ip.global-to-local, align 4
  %v2_ebcc11 = urem i32 %v1_ebcc10, 256
  store i32 %v2_ebcc11, i32* %lr.global-to-local, align 4
  br label %.thread12

bb123:                                            ; preds = %.thread6
  %v1_ebd0.pre = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_ebd0.pre, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %bb122, %..thread12_crit_edge, %bb123
  %v0_ebe8.pre = phi i32 [ %v2_ebcc11, %..thread12_crit_edge ], [ %v2_ebcc, %bb122 ], [ 0, %bb123 ]
  %v0_ebd8 = load i32, i32* @r4, align 4
  %v1_ebd8 = add i32 %v0_ebd8, 1
  store i32 %v1_ebd8, i32* @r4, align 4
  %v0_ebdc = load i32, i32* %r0.global-to-local, align 4
  %v1_ebdc = add i32 %v0_ebdc, -1
  store i32 %v1_ebdc, i32* %r0.global-to-local, align 4
  %v0_ebe0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_ebe0, i32* %r2.global-to-local, align 4
  %v2_ebe4 = icmp eq i32 %v1_ebdc, 0
  store i1 %v2_ebe4, i1* %cpsr_z.global-to-local, align 1
  %v1_ebe8 = add nuw nsw i32 %v0_ebe8.pre, 1
  store i32 %v1_ebe8, i32* %ip.global-to-local, align 4
  %v1_ebec = add i32 %v0_ebe0, 1
  store i32 %v1_ebec, i32* %r1.global-to-local, align 4
  %tmp124 = icmp slt i32 %v1_ebdc, 1
  %extract.t179 = trunc i32 %v0_ebe8.pre to i8
  br i1 %tmp124, label %dec_label_pc_ebf4, label %dec_label_pc_ebb4

dec_label_pc_ebf4:                                ; preds = %.thread12, %dec_label_pc_eb6c
  %v2_ebf8.lcssa = phi i32 [ %v2_eba4, %dec_label_pc_eb6c ], [ %v0_ebe0, %.thread12 ]
  %v3_eb84 = inttoptr i32 %v2_eb84 to i8*
  store i32 0, i32* @r4, align 4
  %v3_ebf8 = inttoptr i32 %v2_ebf8.lcssa to i8*
  store i8 0, i8* %v3_ebf8, align 1
  store i32 %v2_eb98, i32* %r0.global-to-local, align 4
  %v1_ec00 = bitcast i32* %stack_var_-2228 to i8*
  %v2_ec00 = call i32 @function_110e0(i8* %v1_ec00)
  %v2_ec04 = ptrtoint i32* %stack_var_-216 to i32
  store i32 %v2_ec04, i32* %r1.global-to-local, align 4
  %v0_ec08 = load i32, i32* %fp.global-to-local, align 4
  %v2_ec08 = add i32 %v0_ec08, %v2_ec00
  store i32 %v2_ec08, i32* @r5, align 4
  %v0_ec0c = load i32, i32* @r4, align 4
  store i32 %v0_ec0c, i32* %stack_var_-64, align 4
  store i32 %v2_eb98, i32* %r0.global-to-local, align 4
  %v2_ec20 = call i32 @function_110e0(i8* %v1_ec00)
  %v1_ec24 = add i32 %v2_ec20, 17
  store i32 %v1_ec24, i32* %r0.global-to-local, align 4
  %v0_ec2c = call i32 @function_e8e4()
  store i32 %v0_ec2c, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r1.global-to-local, align 4
  %v2_ec38 = call i32 @function_116e8(i32 %v0_ec2c, i32 65535)
  store i32 16, i32* @r1, align 4
  %v6_ec44 = urem i32 %v2_ec38, 65536
  store i32 %v6_ec44, i32* %r3.global-to-local, align 4
  %v2_ec4c = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_ec4c, i32* @r0, align 4
  %v0_ec54 = call i32 @function_11180()
  %sext = mul i32 %v2_ec38, 16777216
  %v4_ec58 = sdiv i32 %sext, 16777216
  store i32 2, i32* %stack_var_-64, align 4
  store i32 %v2_ec04, i32* %r3.global-to-local, align 4
  store i32 53, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v4_ec58, i32* %lr.global-to-local, align 4
  %v0_eca0 = load i32, i32* @r5, align 4
  %v2_eca0 = add i32 %v0_eca0, 1
  store i32 %v2_eca0, i32* %ip.global-to-local, align 4
  %v2_eca4 = ptrtoint i8* %stack_var_-4288 to i32
  store i32 %v2_eca4, i32* %r1.global-to-local, align 4
  %v5_eca8 = trunc i32 %v4_ec58 to i8
  store i8 %v5_eca8, i8* %stack_var_-2240, align 1
  %v0_ecc0 = load i32, i32* @r4, align 4
  %v1_ecc0 = trunc i32 %v0_ecc0 to i8
  %v4_ecc0 = inttoptr i32 %v2_eca0 to i8*
  store i8 %v1_ecc0, i8* %v4_ecc0, align 1
  %v0_ecc4 = load i32, i32* @r4, align 4
  %v1_ecc4 = trunc i32 %v0_ecc4 to i8
  %v2_ecc4 = load i32, i32* %ip.global-to-local, align 4
  %v3_ecc4 = add i32 %v2_ecc4, 2
  %v4_ecc4 = inttoptr i32 %v3_ecc4 to i8*
  store i8 %v1_ecc4, i8* %v4_ecc4, align 1
  %v0_ecc8 = load i32, i32* %r0.global-to-local, align 4
  %v1_ecc8 = trunc i32 %v0_ecc8 to i8
  %v2_ecc8 = load i32, i32* %ip.global-to-local, align 4
  %v3_ecc8 = add i32 %v2_ecc8, 3
  %v4_ecc8 = inttoptr i32 %v3_ecc8 to i8*
  store i8 %v1_ecc8, i8* %v4_ecc8, align 1
  %v0_eccc = load i32, i32* %r0.global-to-local, align 4
  %v1_eccc = trunc i32 %v0_eccc to i8
  %v2_eccc = load i32, i32* %ip.global-to-local, align 4
  %v3_eccc = add i32 %v2_eccc, 1
  %v4_eccc = inttoptr i32 %v3_eccc to i8*
  store i8 %v1_eccc, i8* %v4_eccc, align 1
  %v0_ecd4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_ecd4, i32* %sl.global-to-local, align 4
  %v2_ecdc = ptrtoint i32* %stack_var_-192 to i32
  store i32 %v2_ecdc, i32* @r6, align 4
  %v3_ed14 = bitcast i32* %stack_var_-64 to %sockaddr*
  %v4_ed30 = bitcast i8* %stack_var_-2240 to i32*
  %v2_ed80 = ptrtoint i32* %stack_var_-36 to i32
  %v2_edac = ptrtoint i32* %stack_var_-48 to i32
  %v6_ee08 = bitcast i8* %stack_var_-4288 to i32*
  %v1_ee84 = add i32 %v2_eca4, 12
  %v1_ee8c = inttoptr i32 %v1_ee84 to i8*
  %v1_eea0 = add i32 %v2_eca4, 1
  %v2_eea0 = inttoptr i32 %v1_eea0 to i8*
  %v1_eebc = add i32 %v2_eca4, 6
  %v2_eebc = inttoptr i32 %v1_eebc to i8*
  %v1_eec0 = add i32 %v2_eca4, 7
  %v2_eec0 = inttoptr i32 %v1_eec0 to i8*
  br label %dec_label_pc_ece0

dec_label_pc_ece0:                                ; preds = %dec_label_pc_ee34, %dec_label_pc_ebf4
  %v1_ece4 = phi i32 [ %v0_ece0.pre, %dec_label_pc_ee34 ], [ -1, %dec_label_pc_ebf4 ]
  %v7_ece0 = icmp eq i32 %v1_ece4, -1
  store i1 %v7_ece0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ece0, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_ece0
  store i32 %v1_ece4, i32* %r0.global-to-local, align 4
  br label %bb126

bb126:                                            ; preds = %dec_label_pc_ece0, %bb125
  store i32 60652, i32* @lr, align 4
  %v1_ece8 = xor i1 %v7_ece0, true
  call void @__pseudo_cond_branch(i1 %v1_ece8, i32 ptrtoint (i32* @global_var_11960.101 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_ecf8 = call i32 @function_1224c(i32 2, i32 2, i32 0)
  store i32 %v3_ecf8, i32* %r0.global-to-local, align 4
  %v7_ecfc = icmp eq i32 %v3_ecf8, -1
  store i1 %v7_ecfc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ecf8, i32* @r7, align 4
  br i1 %v7_ecfc, label %dec_label_pc_ee74, label %dec_label_pc_ed08

dec_label_pc_ed08:                                ; preds = %bb126
  store i32 %v2_ec4c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_ed14 = call i32 @function_120a8(i32 %v3_ecf8, %sockaddr* %v3_ed14, i32 16)
  store i32 %v4_ed14, i32* %r0.global-to-local, align 4
  %v7_ed18 = icmp eq i32 %v4_ed14, -1
  store i1 %v7_ed18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ed18, label %dec_label_pc_ee3c, label %dec_label_pc_ed20

dec_label_pc_ed20:                                ; preds = %dec_label_pc_ed08
  %v0_ed20 = load i32, i32* @r7, align 4
  store i32 %v0_ed20, i32* %r0.global-to-local, align 4
  store i32 %v2_eb9c, i32* %r1.global-to-local, align 4
  store i32 %v1_ec24, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_ed30 = call i32 @function_121bc(i32 %v0_ed20, i32* %v4_ed30, i32 %v1_ec24, i32 16384)
  store i32 %v5_ed30, i32* %r0.global-to-local, align 4
  %v7_ed34 = icmp eq i32 %v5_ed30, -1
  store i1 %v7_ed34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ed34, label %dec_label_pc_ee3c, label %dec_label_pc_ed3c

dec_label_pc_ed3c:                                ; preds = %dec_label_pc_ed20
  %v0_ed3c = load i32, i32* @r7, align 4
  store i32 %v0_ed3c, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_ed48 = call i32 @function_1189c(i32 3, i32 %v0_ed3c)
  store i32 0, i32* @r4, align 4
  %v1_ed50 = or i32 %v2_ed48, 2048
  store i32 %v1_ed50, i32* @r2, align 4
  %v0_ed54 = load i32, i32* @r7, align 4
  store i32 %v0_ed54, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_ed5c = call i32 @function_1189c(i32 4, i32 %v0_ed54)
  store i32 %v2_ed5c, i32* %r0.global-to-local, align 4
  %v0_ed60 = load i32, i32* @r4, align 4
  store i32 %v0_ed60, i32* %r3.global-to-local, align 4
  %v2_ed64154 = load i32, i32* @r6, align 4
  %v3_ed64155 = add i32 %v2_ed64154, %v0_ed60
  %v4_ed64156 = inttoptr i32 %v3_ed64155 to i32*
  store i32 %v0_ed60, i32* %v4_ed64156, align 4
  %v0_ed68157 = load i32, i32* %r3.global-to-local, align 4
  %v1_ed68158 = add i32 %v0_ed68157, 4
  store i32 %v1_ed68158, i32* %r3.global-to-local, align 4
  %v7_ed6c159 = icmp eq i32 %v1_ed68158, 128
  br i1 %v7_ed6c159, label %dec_label_pc_ed74, label %dec_label_pc_ed64.dec_label_pc_ed64_crit_edge

dec_label_pc_ed64.dec_label_pc_ed64_crit_edge:    ; preds = %dec_label_pc_ed3c, %dec_label_pc_ed64.dec_label_pc_ed64_crit_edge
  %v1_ed68160 = phi i32 [ %v1_ed68, %dec_label_pc_ed64.dec_label_pc_ed64_crit_edge ], [ %v1_ed68158, %dec_label_pc_ed3c ]
  %v0_ed64.pre = load i32, i32* @r4, align 4
  %v2_ed64 = load i32, i32* @r6, align 4
  %v3_ed64 = add i32 %v2_ed64, %v1_ed68160
  %v4_ed64 = inttoptr i32 %v3_ed64 to i32*
  store i32 %v0_ed64.pre, i32* %v4_ed64, align 4
  %v0_ed68 = load i32, i32* %r3.global-to-local, align 4
  %v1_ed68 = add i32 %v0_ed68, 4
  store i32 %v1_ed68, i32* %r3.global-to-local, align 4
  %v7_ed6c = icmp eq i32 %v1_ed68, 128
  br i1 %v7_ed6c, label %dec_label_pc_ed74, label %dec_label_pc_ed64.dec_label_pc_ed64_crit_edge

dec_label_pc_ed74:                                ; preds = %dec_label_pc_ed64.dec_label_pc_ed64_crit_edge, %dec_label_pc_ed3c
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_ed74 = load i32, i32* @r7, align 4
  %v3_ed74 = udiv i32 %v0_ed74, 32
  %v3_ed7c = mul nuw nsw i32 %v3_ed74, 4
  store i32 %v3_ed7c, i32* %r3.global-to-local, align 4
  store i32 %v2_ed80, i32* %r2.global-to-local, align 4
  %v2_ed84 = add i32 %v3_ed7c, %v2_ed80
  store i32 %v2_ed84, i32* @r5, align 4
  %v1_ed88 = add i32 %v2_ed84, -156
  %v2_ed88 = inttoptr i32 %v1_ed88 to i32*
  %v3_ed88 = load i32, i32* %v2_ed88, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_ed90 = urem i32 %v0_ed74, 32
  store i32 %v1_ed90, i32* @r8, align 4
  %v7_ed94 = shl i32 1, %v1_ed90
  %v8_ed94 = or i32 %v3_ed88, %v7_ed94
  store i32 5, i32* %ip.global-to-local, align 4
  store i32 %v8_ed94, i32* %v2_ed88, align 4
  %v0_eda4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_eda4, i32* %stack_var_-48, align 4
  store i32 %v2_edac, i32* @lr, align 4
  store i32 %v2_ec04, i32* %ip.global-to-local, align 4
  %v0_edb4 = load i32, i32* @r7, align 4
  %v1_edb4 = load i32, i32* %r3.global-to-local, align 4
  %v2_edb4 = add i32 %v1_edb4, %v0_edb4
  store i32 %v2_edb4, i32* %r0.global-to-local, align 4
  store i32 %v2_ecdc, i32* %r1.global-to-local, align 4
  %v0_edc0 = load i32, i32* @r4, align 4
  store i32 %v0_edc0, i32* %r2.global-to-local, align 4
  store i32 %v0_edc0, i32* %r3.global-to-local, align 4
  %v5_edcc = call i32 @function_11b80(i32 %v2_edb4, i32 %v2_ecdc, i32 %v0_edc0, i32 %v0_edc0, i32 %v2_edac)
  store i32 %v5_edcc, i32* %r0.global-to-local, align 4
  %v7_edd0 = icmp eq i32 %v5_edcc, -1
  store i1 %v7_edd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_edd0, label %dec_label_pc_ee4c, label %dec_label_pc_edd8

dec_label_pc_edd8:                                ; preds = %dec_label_pc_ed74
  %v2_edd8 = icmp eq i32 %v5_edcc, 0
  store i1 %v2_edd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_edd8, label %dec_label_pc_ee2c, label %dec_label_pc_ede0

dec_label_pc_ede0:                                ; preds = %dec_label_pc_edd8
  %v0_ede0 = load i32, i32* @r5, align 4
  %v1_ede0 = add i32 %v0_ede0, -156
  %v2_ede0 = inttoptr i32 %v1_ede0 to i32*
  %v3_ede0 = load i32, i32* %v2_ede0, align 4
  %v1_ede4 = load i32, i32* @r8, align 4
  %v6_ede4 = ashr i32 %v3_ede0, %v1_ede4
  store i32 %v6_ede4, i32* %r3.global-to-local, align 4
  %v1_ede8 = urem i32 %v6_ede4, 2
  %v2_ede8 = icmp eq i32 %v1_ede8, 0
  store i1 %v2_ede8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ede8, label %dec_label_pc_ee4c, label %dec_label_pc_edf0

dec_label_pc_edf0:                                ; preds = %dec_label_pc_ede0
  store i32 %v2_eca4, i32* %r1.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_edfc = load i32, i32* @r7, align 4
  store i32 %v0_edfc, i32* %r0.global-to-local, align 4
  %v0_ee00 = load i32, i32* @r4, align 4
  %v7_ee08 = call i32 @function_12188(i32 %v0_edfc, i32* %v6_ee08, i32 2048, i32 16384, i32 %v0_ee00, i32 %v0_ee00)
  store i32 %v7_ee08, i32* %r4.global-to-local, align 4
  %v0_ee10 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_ee10, i32* %r0.global-to-local, align 4
  %v1_ee14 = inttoptr i32 %v0_ee10 to i8*
  %v2_ee14 = call i32 @function_110e0(i8* %v1_ee14)
  %v1_ee18 = add i32 %v2_ee14, 17
  store i32 %v1_ee18, i32* %r0.global-to-local, align 4
  %v0_ee1c = load i32, i32* %r4.global-to-local, align 4
  %v3_ee1c = icmp ult i32 %v0_ee1c, %v1_ee18
  %v9_ee1c = icmp eq i32 %v0_ee1c, %v1_ee18
  store i1 %v9_ee1c, i1* %cpsr_z.global-to-local, align 1
  store i32 -4252, i32* @r4, align 4
  br i1 %v3_ee1c, label %dec_label_pc_ee2c, label %dec_label_pc_ee80

dec_label_pc_ee2c:                                ; preds = %dec_label_pc_edf0, %dec_label_pc_ee80, %dec_label_pc_eebc, %dec_label_pc_edd8, %dec_label_pc_ee74
  %v0_ee2c = load i32, i32* %sl.global-to-local, align 4
  %v7_ee2c = icmp eq i32 %v0_ee2c, 5
  store i1 %v7_ee2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee2c, label %dec_label_pc_ee4c, label %dec_label_pc_ee34

dec_label_pc_ee34:                                ; preds = %dec_label_pc_ee3c, %dec_label_pc_ee2c
  %v0_ee34 = phi i32 [ %v0_ee44, %dec_label_pc_ee3c ], [ %v0_ee2c, %dec_label_pc_ee2c ]
  %v1_ee34 = add i32 %v0_ee34, 1
  store i32 %v1_ee34, i32* %sl.global-to-local, align 4
  %v0_ece0.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_ece0

dec_label_pc_ee3c:                                ; preds = %dec_label_pc_ed20, %dec_label_pc_ed08
  %v0_ee3c = phi i32 [ %v5_ed30, %dec_label_pc_ed20 ], [ %v4_ed14, %dec_label_pc_ed08 ]
  %v1_ee3c = add i32 %v0_ee3c, 2
  store i32 %v1_ee3c, i32* %r0.global-to-local, align 4
  %v1_ee40 = call i32 @function_12d68(i32 %v1_ee3c)
  store i32 %v1_ee40, i32* %r0.global-to-local, align 4
  %v0_ee44 = load i32, i32* %sl.global-to-local, align 4
  %v7_ee44 = icmp eq i32 %v0_ee44, 5
  store i1 %v7_ee44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee44, label %dec_label_pc_ee4c, label %dec_label_pc_ee34

dec_label_pc_ee4c:                                ; preds = %dec_label_pc_ee3c, %dec_label_pc_ee2c, %dec_label_pc_ede0, %dec_label_pc_ed74, %dec_label_pc_eecc, %dec_label_pc_eed8.backedge
  %v0_ee4c = load i32, i32* @r7, align 4
  store i32 %v0_ee4c, i32* %r0.global-to-local, align 4
  %v1_ee50 = call i32 @function_11960(i32 %v0_ee4c)
  store i32 %v1_ee50, i32* %r0.global-to-local, align 4
  store i32 %v2_eb84, i32* %r2.global-to-local, align 4
  %v2_ee58 = load i8, i8* %v3_eb84, align 1
  %v3_ee58 = zext i8 %v2_ee58 to i32
  store i32 %v3_ee58, i32* @r4, align 4
  %v2_ee5c = icmp eq i8 %v2_ee58, 0
  store i1 %v2_ee5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee5c, label %dec_label_pc_efb8, label %dec_label_pc_ee64

dec_label_pc_ee64:                                ; preds = %dec_label_pc_ee4c, %dec_label_pc_efb8
  %stack_var_-4300.0 = phi i8* [ %v5_efcc, %dec_label_pc_efb8 ], [ %v3_eb84, %dec_label_pc_ee4c ]
  %v4_ee64 = ptrtoint i8* %stack_var_-4300.0 to i32
  store i32 %v4_ee64, i32* %r0.global-to-local, align 4
  %v2_ee70 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_ee70, i32* @r4, align 4
  store i32 %v6_eb6c, i32* @r5, align 4
  store i32 %v9_eb6c, i32* @r6, align 4
  store i32 %v12_eb6c, i32* @r7, align 4
  store i32 %v15_eb6c, i32* @r8, align 4
  ret i32 %v4_ee64

dec_label_pc_ee74:                                ; preds = %bb126
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_ee78 = call i32 @function_12d68(i32 1)
  store i32 %v1_ee78, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ee2c

dec_label_pc_ee80:                                ; preds = %dec_label_pc_edf0
  store i32 %v2_eca4, i32* %lr.global-to-local, align 4
  store i32 %v1_ee84, i32* %fp.global-to-local, align 4
  store i32 %v1_ee84, i32* %r0.global-to-local, align 4
  %v2_ee8c = call i32 @function_110e0(i8* %v1_ee8c)
  store i32 %v2_ee8c, i32* %r0.global-to-local, align 4
  store i32 %v2_eca4, i32* %ip.global-to-local, align 4
  store i32 %v2_ed80, i32* %r1.global-to-local, align 4
  %v4_ee9c = load i8, i8* %stack_var_-4288, align 1
  %v5_ee9c = sext i8 %v4_ee9c to i32
  store i32 %v5_ee9c, i32* %r3.global-to-local, align 4
  %v3_eea0 = load i8, i8* %v2_eea0, align 1
  %v4_eea0 = zext i8 %v3_eea0 to i32
  store i32 %v4_eea0, i32* %r2.global-to-local, align 4
  store i32 %v4_ec58, i32* @lr, align 4
  %v4_eea8 = mul nuw nsw i32 %v4_eea0, 256
  %v5_eea8 = or i32 %v4_eea8, %v5_ee9c
  store i32 %v5_eea8, i32* %r3.global-to-local, align 4
  %v0_eeac = load i32, i32* %fp.global-to-local, align 4
  %v9_eeb0 = icmp eq i32 %v5_eea8, %v4_ec58
  store i1 %v9_eeb0, i1* %cpsr_z.global-to-local, align 1
  %v2_eeac = add i32 %v2_ee8c, 5
  %v1_eeb4 = add i32 %v2_eeac, %v0_eeac
  store i32 %v1_eeb4, i32* %r0.global-to-local, align 4
  br i1 %v9_eeb0, label %dec_label_pc_eebc, label %dec_label_pc_ee2c

dec_label_pc_eebc:                                ; preds = %dec_label_pc_ee80
  %v3_eebc = load i8, i8* %v2_eebc, align 1
  %v4_eebc = zext i8 %v3_eebc to i32
  store i32 %v4_eebc, i32* %r2.global-to-local, align 4
  %v3_eec0 = load i8, i8* %v2_eec0, align 1
  %v4_eec0 = zext i8 %v3_eec0 to i32
  store i32 %v4_eec0, i32* %r3.global-to-local, align 4
  %v4_eec4 = mul nuw nsw i32 %v4_eec0, 256
  %v5_eec4 = or i32 %v4_eec4, %v4_eebc
  store i32 %v5_eec4, i32* %r2.global-to-local, align 4
  %v7_eec4 = icmp eq i32 %v5_eec4, 0
  store i1 %v7_eec4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eec4, label %dec_label_pc_ee2c, label %dec_label_pc_eecc

dec_label_pc_eecc:                                ; preds = %dec_label_pc_eebc
  %v3_eed0 = mul nuw nsw i32 %v4_eebc, 256
  %v5_eed4 = or i32 %v4_eec0, %v3_eed0
  %v1_ef8c = add i32 %v2_eca4, -49152
  %v1_eed8143 = add nsw i32 %v5_eed4, -1
  %v3_eedc144 = mul i32 %v1_eed8143, 65536
  store i32 %v3_eedc144, i32* %r3.global-to-local, align 4
  %v7_eee0150 = icmp eq i32 %v3_eedc144, -65536
  store i1 %v7_eee0150, i1* %cpsr_z.global-to-local, align 1
  %v3_eee4151 = urem i32 %v1_eed8143, 65536
  store i32 %v3_eee4151, i32* @r6, align 4
  br i1 %v7_eee0150, label %dec_label_pc_ee4c, label %dec_label_pc_eeec.lr.ph

dec_label_pc_eeec.lr.ph:                          ; preds = %dec_label_pc_eecc
  %v1_f068 = add i32 %v2_eb84, 4
  %v2_f068 = inttoptr i32 %v1_f068 to i32*
  br label %dec_label_pc_eeec

dec_label_pc_eeec:                                ; preds = %dec_label_pc_eeec.lr.ph, %dec_label_pc_eed8.backedge
  %v3_eee4153 = phi i32 [ %v3_eee4151, %dec_label_pc_eeec.lr.ph ], [ %v3_eee4, %dec_label_pc_eed8.backedge ]
  %v0_ef40152 = phi i32 [ %v1_eeb4, %dec_label_pc_eeec.lr.ph ], [ %storemerge, %dec_label_pc_eed8.backedge ]
  store i32 %v0_ef40152, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_eef817 = inttoptr i32 %v0_ef40152 to i8*
  %v2_eef818 = load i8, i8* %v1_eef817, align 1
  %v3_eef819 = zext i8 %v2_eef818 to i32
  store i32 %v3_eef819, i32* %r2.global-to-local, align 4
  %v2_eefc20 = icmp eq i8 %v2_eef818, 0
  store i1 %v2_eefc20, i1* %cpsr_z.global-to-local, align 1
  %v3_ef0021 = mul nuw nsw i32 %v3_eef819, 256
  store i32 %v3_ef0021, i32* %r1.global-to-local, align 4
  br i1 %v2_eefc20, label %dec_label_pc_ef38, label %dec_label_pc_ef08.preheader

dec_label_pc_ef08.preheader:                      ; preds = %dec_label_pc_eeec, %dec_label_pc_eef8.backedge
  %v1_efdc = phi i32 [ %v1_efdc49, %dec_label_pc_eef8.backedge ], [ 1, %dec_label_pc_eeec ]
  %v0_efd447 = phi i32 [ %v0_efd4, %dec_label_pc_eef8.backedge ], [ 0, %dec_label_pc_eeec ]
  %v0_ef1445 = phi i32 [ %v3_ef00, %dec_label_pc_eef8.backedge ], [ %v3_ef0021, %dec_label_pc_eeec ]
  %v0_ef1043 = phi i32 [ %v1_efd8, %dec_label_pc_eef8.backedge ], [ %v0_ef40152, %dec_label_pc_eeec ]
  %v0_ef0841 = phi i32 [ %v3_eef8, %dec_label_pc_eef8.backedge ], [ %v3_eef819, %dec_label_pc_eeec ]
  br label %dec_label_pc_ef08

dec_label_pc_ef08:                                ; preds = %dec_label_pc_ef08.preheader, %dec_label_pc_ef10
  %v0_efd4 = phi i32 [ %v0_efd447, %dec_label_pc_ef08.preheader ], [ 1, %dec_label_pc_ef10 ]
  %v0_ef14 = phi i32 [ %v0_ef1445, %dec_label_pc_ef08.preheader ], [ %v3_ef30, %dec_label_pc_ef10 ]
  %v0_efd8 = phi i32 [ %v0_ef1043, %dec_label_pc_ef08.preheader ], [ %v2_ef20, %dec_label_pc_ef10 ]
  %v0_ef08 = phi i32 [ %v0_ef0841, %dec_label_pc_ef08.preheader ], [ %v3_ef24, %dec_label_pc_ef10 ]
  %v7_ef08 = icmp eq i32 %v0_ef08, 191
  store i1 %v7_ef08, i1* %cpsr_z.global-to-local, align 1
  %tmp180 = icmp ult i32 %v0_ef08, 192
  br i1 %tmp180, label %dec_label_pc_efd4, label %dec_label_pc_ef10

dec_label_pc_ef10:                                ; preds = %dec_label_pc_ef08
  %v1_ef10 = add i32 %v0_efd8, 1
  %v2_ef10 = inttoptr i32 %v1_ef10 to i8*
  %v3_ef10 = load i8, i8* %v2_ef10, align 1
  %v4_ef10 = zext i8 %v3_ef10 to i32
  store i32 %v2_eca4, i32* %r1.global-to-local, align 4
  %v2_ef14 = add i32 %v0_ef14, %v1_ef8c
  %v2_ef20 = add i32 %v2_ef14, %v4_ef10
  store i32 %v2_ef20, i32* %r3.global-to-local, align 4
  %v1_ef24 = inttoptr i32 %v2_ef20 to i8*
  %v2_ef24 = load i8, i8* %v1_ef24, align 1
  %v3_ef24 = zext i8 %v2_ef24 to i32
  store i32 %v3_ef24, i32* %r2.global-to-local, align 4
  %v2_ef28 = icmp eq i8 %v2_ef24, 0
  store i1 %v2_ef28, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @lr, align 4
  %v3_ef30 = mul nuw nsw i32 %v3_ef24, 256
  store i32 %v3_ef30, i32* %r1.global-to-local, align 4
  br i1 %v2_ef28, label %dec_label_pc_ef38, label %dec_label_pc_ef08

dec_label_pc_ef38:                                ; preds = %dec_label_pc_eef8.backedge, %dec_label_pc_ef10, %dec_label_pc_eeec
  %v1_ef3c = phi i32 [ 1, %dec_label_pc_eeec ], [ %v1_efdc, %dec_label_pc_ef10 ], [ %v1_efdc49, %dec_label_pc_eef8.backedge ]
  %v0_ef38 = phi i32 [ 0, %dec_label_pc_eeec ], [ 1, %dec_label_pc_ef10 ], [ %v0_efd4, %dec_label_pc_eef8.backedge ]
  %v7_ef38 = icmp eq i32 %v0_ef38, 1
  store i1 %v7_ef38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef38, label %bb127, label %bb128

bb127:                                            ; preds = %dec_label_pc_ef38
  %v2_ef3c = add i32 %v1_ef3c, 1
  store i32 %v2_ef3c, i32* %ip.global-to-local, align 4
  br label %bb128

bb128:                                            ; preds = %dec_label_pc_ef38, %bb127
  %v1_ef40 = phi i32 [ %v1_ef3c, %dec_label_pc_ef38 ], [ %v2_ef3c, %bb127 ]
  %v2_ef40 = add i32 %v1_ef40, %v0_ef40152
  store i32 %v2_ef40, i32* @r4, align 4
  %v3_ef44 = inttoptr i32 %v2_ef40 to i8*
  %v4_ef44 = load i8, i8* %v3_ef44, align 1
  %v6_ef44 = zext i8 %v4_ef44 to i32
  store i32 %v6_ef44, i32* %r3.global-to-local, align 4
  %v1_ef48 = add i32 %v2_ef40, 1
  %v2_ef48 = inttoptr i32 %v1_ef48 to i8*
  %v3_ef48 = load i8, i8* %v2_ef48, align 1
  %v4_ef48 = zext i8 %v3_ef48 to i32
  store i32 %v4_ef48, i32* %r2.global-to-local, align 4
  %v4_ef4c = mul nuw nsw i32 %v4_ef48, 256
  %v5_ef4c = or i32 %v4_ef4c, %v6_ef44
  store i32 %v5_ef4c, i32* %r3.global-to-local, align 4
  %v7_ef50 = icmp eq i32 %v5_ef4c, 256
  store i1 %v7_ef50, i1* %cpsr_z.global-to-local, align 1
  %v1_ef54 = add i32 %v2_ef40, 10
  store i32 %v1_ef54, i32* @r5, align 4
  br i1 %v7_ef50, label %dec_label_pc_eff4, label %dec_label_pc_ef5c

dec_label_pc_ef5c:                                ; preds = %dec_label_pc_eff4, %bb128
  store i32 %v1_ef54, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_ef6823 = inttoptr i32 %v1_ef54 to i8*
  %v2_ef6824 = load i8, i8* %v1_ef6823, align 1
  %v3_ef6825 = zext i8 %v2_ef6824 to i32
  store i32 %v3_ef6825, i32* %r2.global-to-local, align 4
  %v2_ef6c26 = icmp eq i8 %v2_ef6824, 0
  store i1 %v2_ef6c26, i1* %cpsr_z.global-to-local, align 1
  %v3_ef7027 = mul nuw nsw i32 %v3_ef6825, 256
  store i32 %v3_ef7027, i32* %r1.global-to-local, align 4
  br i1 %v2_ef6c26, label %dec_label_pc_efa8, label %dec_label_pc_ef78.preheader

dec_label_pc_ef78.preheader:                      ; preds = %dec_label_pc_ef5c, %dec_label_pc_ef68.backedge
  %v1_efec = phi i32 [ %v1_efec64, %dec_label_pc_ef68.backedge ], [ 1, %dec_label_pc_ef5c ]
  %v0_efe462 = phi i32 [ %v0_efe4, %dec_label_pc_ef68.backedge ], [ 0, %dec_label_pc_ef5c ]
  %v0_ef8460 = phi i32 [ %v3_ef70, %dec_label_pc_ef68.backedge ], [ %v3_ef7027, %dec_label_pc_ef5c ]
  %v0_ef8058 = phi i32 [ %v1_efe8, %dec_label_pc_ef68.backedge ], [ %v1_ef54, %dec_label_pc_ef5c ]
  %v0_ef7856 = phi i32 [ %v3_ef68, %dec_label_pc_ef68.backedge ], [ %v3_ef6825, %dec_label_pc_ef5c ]
  br label %dec_label_pc_ef78

dec_label_pc_ef78:                                ; preds = %dec_label_pc_ef78.preheader, %dec_label_pc_ef80
  %v0_efe4 = phi i32 [ %v0_efe462, %dec_label_pc_ef78.preheader ], [ 1, %dec_label_pc_ef80 ]
  %v0_ef84 = phi i32 [ %v0_ef8460, %dec_label_pc_ef78.preheader ], [ %v3_efa0, %dec_label_pc_ef80 ]
  %v0_efe8 = phi i32 [ %v0_ef8058, %dec_label_pc_ef78.preheader ], [ %v2_ef90, %dec_label_pc_ef80 ]
  %v0_ef78 = phi i32 [ %v0_ef7856, %dec_label_pc_ef78.preheader ], [ %v3_ef94, %dec_label_pc_ef80 ]
  %v7_ef78 = icmp eq i32 %v0_ef78, 191
  store i1 %v7_ef78, i1* %cpsr_z.global-to-local, align 1
  %tmp181 = icmp ult i32 %v0_ef78, 192
  br i1 %tmp181, label %dec_label_pc_efe4, label %dec_label_pc_ef80

dec_label_pc_ef80:                                ; preds = %dec_label_pc_ef78
  %v1_ef80 = add i32 %v0_efe8, 1
  %v2_ef80 = inttoptr i32 %v1_ef80 to i8*
  %v3_ef80 = load i8, i8* %v2_ef80, align 1
  %v4_ef80 = zext i8 %v3_ef80 to i32
  store i32 %v2_eca4, i32* %r1.global-to-local, align 4
  %v2_ef84 = add i32 %v0_ef84, %v1_ef8c
  %v2_ef90 = add i32 %v2_ef84, %v4_ef80
  store i32 %v2_ef90, i32* %r3.global-to-local, align 4
  %v1_ef94 = inttoptr i32 %v2_ef90 to i8*
  %v2_ef94 = load i8, i8* %v1_ef94, align 1
  %v3_ef94 = zext i8 %v2_ef94 to i32
  store i32 %v3_ef94, i32* %r2.global-to-local, align 4
  %v2_ef98 = icmp eq i8 %v2_ef94, 0
  store i1 %v2_ef98, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v3_efa0 = mul nuw nsw i32 %v3_ef94, 256
  store i32 %v3_efa0, i32* %r1.global-to-local, align 4
  br i1 %v2_ef98, label %dec_label_pc_efa8, label %dec_label_pc_ef78

dec_label_pc_efa8:                                ; preds = %dec_label_pc_ef68.backedge, %dec_label_pc_ef80, %dec_label_pc_ef5c
  %v1_efac = phi i32 [ 1, %dec_label_pc_ef5c ], [ %v1_efec, %dec_label_pc_ef80 ], [ %v1_efec64, %dec_label_pc_ef68.backedge ]
  %v0_efa8 = phi i32 [ 0, %dec_label_pc_ef5c ], [ 1, %dec_label_pc_ef80 ], [ %v0_efe4, %dec_label_pc_ef68.backedge ]
  %v7_efa8 = icmp eq i32 %v0_efa8, 1
  store i1 %v7_efa8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_efa8, label %bb129, label %bb130

bb129:                                            ; preds = %dec_label_pc_efa8
  %v2_efac = add i32 %v1_efac, 1
  store i32 %v2_efac, i32* %r0.global-to-local, align 4
  br label %bb130

bb130:                                            ; preds = %dec_label_pc_efa8, %bb129
  %v1_efb0 = phi i32 [ %v1_efac, %dec_label_pc_efa8 ], [ %v2_efac, %bb129 ]
  %v2_efb0 = add i32 %v1_efb0, %v1_ef54
  br label %dec_label_pc_eed8.backedge

dec_label_pc_eed8.backedge:                       ; preds = %bb130, %dec_label_pc_f09c
  %v0_eed8.pre = phi i32 [ %v3_eee4153, %bb130 ], [ %v0_eed8.pre.pre, %dec_label_pc_f09c ]
  %storemerge = phi i32 [ %v2_efb0, %bb130 ], [ %v2_f0b0, %dec_label_pc_f09c ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v1_eed8 = add i32 %v0_eed8.pre, -1
  %v3_eedc = mul i32 %v1_eed8, 65536
  store i32 %v3_eedc, i32* %r3.global-to-local, align 4
  %v7_eee0 = icmp eq i32 %v3_eedc, -65536
  store i1 %v7_eee0, i1* %cpsr_z.global-to-local, align 1
  %v3_eee4 = urem i32 %v1_eed8, 65536
  store i32 %v3_eee4, i32* @r6, align 4
  br i1 %v7_eee0, label %dec_label_pc_ee4c, label %dec_label_pc_eeec

dec_label_pc_efb8:                                ; preds = %dec_label_pc_ee4c
  %v1_efb8 = add i32 %v2_eb84, 4
  %v2_efb8 = inttoptr i32 %v1_efb8 to i32*
  %v3_efb8 = load i32, i32* %v2_efb8, align 4
  store i32 %v3_efb8, i32* %r0.global-to-local, align 4
  %v2_efbc = icmp eq i32 %v3_efb8, 0
  store i1 %v2_efbc, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_efc4.126 to i32), i32* @lr, align 4
  %v1_efc0 = xor i1 %v2_efbc, true
  call void @__pseudo_cond_branch(i1 %v1_efc0, i32 ptrtoint (i32* @global_var_12590.25 to i32))
  store i32 %v2_eb84, i32* @r0, align 4
  %v0_efc8 = call i32 @function_12590()
  store i32 %v0_efc8, i32* %r0.global-to-local, align 4
  %v0_efcc = load i32, i32* @r4, align 4
  %v5_efcc = inttoptr i32 %v0_efcc to i8*
  br label %dec_label_pc_ee64

dec_label_pc_efd4:                                ; preds = %dec_label_pc_ef08
  %v2_efd4 = icmp eq i32 %v0_efd4, 0
  store i1 %v2_efd4, i1* %cpsr_z.global-to-local, align 1
  %v1_efd8 = add i32 %v0_efd8, 1
  store i32 %v1_efd8, i32* %r3.global-to-local, align 4
  br i1 %v2_efd4, label %bb131, label %dec_label_pc_eef8.backedge

dec_label_pc_eef8.backedge:                       ; preds = %dec_label_pc_efd4, %bb131
  %v1_efdc49 = phi i32 [ %v1_efdc, %dec_label_pc_efd4 ], [ %v2_efdc, %bb131 ]
  %v1_eef8 = inttoptr i32 %v1_efd8 to i8*
  %v2_eef8 = load i8, i8* %v1_eef8, align 1
  %v3_eef8 = zext i8 %v2_eef8 to i32
  store i32 %v3_eef8, i32* %r2.global-to-local, align 4
  %v2_eefc = icmp eq i8 %v2_eef8, 0
  store i1 %v2_eefc, i1* %cpsr_z.global-to-local, align 1
  %v3_ef00 = mul nuw nsw i32 %v3_eef8, 256
  store i32 %v3_ef00, i32* %r1.global-to-local, align 4
  br i1 %v2_eefc, label %dec_label_pc_ef38, label %dec_label_pc_ef08.preheader

bb131:                                            ; preds = %dec_label_pc_efd4
  %v2_efdc = add i32 %v1_efdc, 1
  store i32 %v2_efdc, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_eef8.backedge

dec_label_pc_efe4:                                ; preds = %dec_label_pc_ef78
  %v2_efe4 = icmp eq i32 %v0_efe4, 0
  store i1 %v2_efe4, i1* %cpsr_z.global-to-local, align 1
  %v1_efe8 = add i32 %v0_efe8, 1
  store i32 %v1_efe8, i32* %r3.global-to-local, align 4
  br i1 %v2_efe4, label %bb132, label %dec_label_pc_ef68.backedge

dec_label_pc_ef68.backedge:                       ; preds = %dec_label_pc_efe4, %bb132
  %v1_efec64 = phi i32 [ %v1_efec, %dec_label_pc_efe4 ], [ %v2_efec, %bb132 ]
  %v1_ef68 = inttoptr i32 %v1_efe8 to i8*
  %v2_ef68 = load i8, i8* %v1_ef68, align 1
  %v3_ef68 = zext i8 %v2_ef68 to i32
  store i32 %v3_ef68, i32* %r2.global-to-local, align 4
  %v2_ef6c = icmp eq i8 %v2_ef68, 0
  store i1 %v2_ef6c, i1* %cpsr_z.global-to-local, align 1
  %v3_ef70 = mul nuw nsw i32 %v3_ef68, 256
  store i32 %v3_ef70, i32* %r1.global-to-local, align 4
  br i1 %v2_ef6c, label %dec_label_pc_efa8, label %dec_label_pc_ef78.preheader

bb132:                                            ; preds = %dec_label_pc_efe4
  %v2_efec = add i32 %v1_efec, 1
  store i32 %v2_efec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ef68.backedge

dec_label_pc_eff4:                                ; preds = %bb128
  %v1_eff4 = add i32 %v2_ef40, 2
  %v2_eff4 = inttoptr i32 %v1_eff4 to i8*
  %v3_eff4 = load i8, i8* %v2_eff4, align 1
  %v4_eff4 = zext i8 %v3_eff4 to i32
  store i32 %v4_eff4, i32* %r3.global-to-local, align 4
  %v1_eff8 = add i32 %v2_ef40, 3
  %v2_eff8 = inttoptr i32 %v1_eff8 to i8*
  %v3_eff8 = load i8, i8* %v2_eff8, align 1
  %v4_eff8 = zext i8 %v3_eff8 to i32
  store i32 %v4_eff8, i32* %r2.global-to-local, align 4
  %v4_effc = mul nuw nsw i32 %v4_eff8, 256
  %v5_effc = or i32 %v4_effc, %v4_eff4
  store i32 %v5_effc, i32* %r3.global-to-local, align 4
  %v7_f000 = icmp eq i32 %v5_effc, 256
  store i1 %v7_f000, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f000, label %dec_label_pc_f008, label %dec_label_pc_ef5c

dec_label_pc_f008:                                ; preds = %dec_label_pc_eff4
  %v1_f008 = add i32 %v2_ef40, 8
  %v2_f008 = inttoptr i32 %v1_f008 to i8*
  %v3_f008 = load i8, i8* %v2_f008, align 1
  %v4_f008 = zext i8 %v3_f008 to i32
  store i32 %v4_f008, i32* %r1.global-to-local, align 4
  %v1_f00c = add i32 %v2_ef40, 9
  %v2_f00c = inttoptr i32 %v1_f00c to i8*
  %v3_f00c = load i8, i8* %v2_f00c, align 1
  %v4_f00c = zext i8 %v3_f00c to i32
  store i32 %v4_f00c, i32* %r0.global-to-local, align 4
  %v4_f010 = mul nuw nsw i32 %v4_f00c, 256
  %v5_f010 = or i32 %v4_f010, %v4_f008
  %v3_f014 = mul i32 %v5_f010, 65536
  store i32 %v3_f014, i32* %r2.global-to-local, align 4
  %v3_f018 = mul nuw nsw i32 %v4_f008, 256
  %v5_f020 = or i32 %v4_f00c, %v3_f018
  store i32 %v5_f020, i32* %r3.global-to-local, align 4
  %v7_f024 = icmp eq i32 %v5_f020, 4
  store i1 %v7_f024, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f024, label %dec_label_pc_f02c, label %dec_label_pc_f09c

dec_label_pc_f02c:                                ; preds = %dec_label_pc_f008
  %v2_f02c = inttoptr i32 %v1_ef54 to i8*
  %v3_f02c = load i8, i8* %v2_f02c, align 1
  %v4_f02c = zext i8 %v3_f02c to i32
  store i32 %v4_f02c, i32* %r3.global-to-local, align 4
  store i32 %v2_ec04, i32* %r2.global-to-local, align 4
  %v1_f038 = add i32 %v2_ef40, 11
  %v2_f038 = inttoptr i32 %v1_f038 to i8*
  %v3_f038 = load i8, i8* %v2_f038, align 1
  %v4_f038 = zext i8 %v3_f038 to i32
  store i32 %v4_f038, i32* %r2.global-to-local, align 4
  store i32 %v2_ec04, i32* %r3.global-to-local, align 4
  %v1_f044 = add i32 %v2_ef40, 12
  %v2_f044 = inttoptr i32 %v1_f044 to i8*
  %v3_f044 = load i8, i8* %v2_f044, align 1
  %v4_f044 = zext i8 %v3_f044 to i32
  store i32 %v4_f044, i32* %r3.global-to-local, align 4
  store i32 %v2_ec04, i32* %ip.global-to-local, align 4
  %v1_f050 = add i32 %v2_ef40, 13
  %v2_f050 = inttoptr i32 %v1_f050 to i8*
  %v3_f050 = load i8, i8* %v2_f050, align 1
  %v4_f050 = zext i8 %v3_f050 to i32
  store i32 %v4_f050, i32* %r2.global-to-local, align 4
  store i32 %v2_eb84, i32* @lr, align 4
  %v2_f05c = load i8, i8* %v3_eb84, align 1
  %v3_f05c = zext i8 %v2_f05c to i32
  %v3_f060 = mul nuw nsw i32 %v3_f05c, 4
  %v1_f064 = add nuw nsw i32 %v3_f060, 4
  store i32 %v1_f064, i32* %r1.global-to-local, align 4
  %v3_f068 = load i32, i32* %v2_f068, align 4
  store i32 %v3_f068, i32* %r0.global-to-local, align 4
  %v3_f06c = sext i8 %v3_f050 to i32
  %v5_f06c = sext i8 %v3_f044 to i32
  %v10_f06c = call i32 @function_12680(i32 %v3_f068, i32 %v1_f064, i32 %v3_f06c, i32 %v5_f06c)
  store i32 %v10_f06c, i32* %r0.global-to-local, align 4
  store i32 %v2_eb84, i32* %r1.global-to-local, align 4
  store i32 %v2_ec04, i32* %ip.global-to-local, align 4
  %v2_f078 = load i8, i8* %v3_eb84, align 1
  %v3_f078 = zext i8 %v2_f078 to i32
  store i32 %v3_f078, i32* %r2.global-to-local, align 4
  %v4_f07c = sext i8 %v3_f02c to i32
  store i32 %v4_f07c, i32* %r3.global-to-local, align 4
  store i32 %v2_eb84, i32* @lr, align 4
  %v1_f084 = add nuw nsw i32 %v3_f078, 1
  store i32 %v1_f084, i32* %r1.global-to-local, align 4
  %v5_f088 = mul nuw nsw i32 %v3_f078, 4
  %v6_f088 = add i32 %v5_f088, %v10_f06c
  %v7_f088 = inttoptr i32 %v6_f088 to i32*
  store i32 %v4_f07c, i32* %v7_f088, align 4
  %v1_f08c = load i32, i32* @lr, align 4
  %v2_f08c = add i32 %v1_f08c, 4
  %v3_f08c = inttoptr i32 %v2_f08c to i32*
  store i32 %v10_f06c, i32* %v3_f08c, align 4
  %v0_f090 = load i32, i32* %r1.global-to-local, align 4
  %v1_f090 = trunc i32 %v0_f090 to i8
  %v2_f090 = load i32, i32* @lr, align 4
  %v3_f090 = inttoptr i32 %v2_f090 to i8*
  store i8 %v1_f090, i8* %v3_f090, align 1
  %v0_f094 = load i32, i32* @r4, align 4
  %v1_f094 = add i32 %v0_f094, 9
  %v2_f094 = inttoptr i32 %v1_f094 to i8*
  %v3_f094 = load i8, i8* %v2_f094, align 1
  %v4_f094 = zext i8 %v3_f094 to i32
  store i32 %v4_f094, i32* %r0.global-to-local, align 4
  %v1_f098 = add i32 %v0_f094, 8
  %v2_f098 = inttoptr i32 %v1_f098 to i8*
  %v3_f098 = load i8, i8* %v2_f098, align 1
  %v4_f098 = zext i8 %v3_f098 to i32
  store i32 %v4_f098, i32* %r1.global-to-local, align 4
  %v0_f0b0.pre = load i32, i32* @r5, align 4
  %v0_eed8.pre.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_f09c

dec_label_pc_f09c:                                ; preds = %dec_label_pc_f008, %dec_label_pc_f02c
  %v0_eed8.pre.pre = phi i32 [ %v3_eee4153, %dec_label_pc_f008 ], [ %v0_eed8.pre.pre.pre, %dec_label_pc_f02c ]
  %v0_f0b0 = phi i32 [ %v1_ef54, %dec_label_pc_f008 ], [ %v0_f0b0.pre, %dec_label_pc_f02c ]
  %v1_f09c = phi i32 [ %v4_f00c, %dec_label_pc_f008 ], [ %v4_f094, %dec_label_pc_f02c ]
  %v0_f09c = phi i32 [ %v4_f008, %dec_label_pc_f008 ], [ %v4_f098, %dec_label_pc_f02c ]
  %v4_f09c = mul nuw nsw i32 %v1_f09c, 256
  %v5_f09c = or i32 %v4_f09c, %v0_f09c
  %v3_f0a0 = mul i32 %v5_f09c, 65536
  store i32 %v3_f0a0, i32* %r2.global-to-local, align 4
  %tmp133 = mul nuw nsw i32 %v0_f09c, 256
  %v5_f0ac = or i32 %tmp133, %v1_f09c
  store i32 %v5_f0ac, i32* %r3.global-to-local, align 4
  %v2_f0b0 = add i32 %v5_f0ac, %v0_f0b0
  br label %dec_label_pc_eed8.backedge

; uselistorder directives
  uselistorder i32 %v1_f09c, { 1, 0 }
  uselistorder i32 %v3_f078, { 1, 0, 2 }
  uselistorder i32 %v10_f06c, { 1, 0, 2 }
  uselistorder i32 %v4_f00c, { 2, 1, 0, 3 }
  uselistorder i32 %v4_f008, { 2, 0, 1, 3 }
  uselistorder i32 %v2_efec, { 1, 0 }
  uselistorder i32 %v3_ef68, { 0, 2, 1 }
  uselistorder i32 %v1_efec64, { 1, 0 }
  uselistorder i32 %v1_efe8, { 1, 2, 0 }
  uselistorder i32 %v2_efdc, { 1, 0 }
  uselistorder i32 %v3_eef8, { 0, 2, 1 }
  uselistorder i32 %v1_efdc49, { 1, 0 }
  uselistorder i32 %v1_efd8, { 1, 2, 0 }
  uselistorder i1 %v7_eee0, { 1, 0 }
  uselistorder i32 %v1_eed8, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v3_ef94, { 0, 2, 1 }
  uselistorder i32 %v2_ef90, { 1, 2, 0 }
  uselistorder i32 %v0_efe4, { 2, 0, 1 }
  uselistorder i32 %v1_efec, { 1, 2, 0 }
  uselistorder i32 %v3_ef7027, { 1, 0 }
  uselistorder i32 %v3_ef6825, { 1, 0, 2 }
  uselistorder i32 %v1_ef54, { 2, 3, 1, 0, 5, 4, 6 }
  uselistorder i32 %v2_ef40, { 0, 1, 2, 4, 3, 6, 5, 7, 9, 8, 10 }
  uselistorder i32 %v3_ef24, { 0, 2, 1 }
  uselistorder i32 %v2_ef20, { 1, 2, 0 }
  uselistorder i32 %v0_efd4, { 2, 0, 1 }
  uselistorder i32 %v1_efdc, { 1, 2, 0 }
  uselistorder i32 %v3_ef0021, { 1, 0 }
  uselistorder i32 %v3_eef819, { 1, 0, 2 }
  uselistorder i32 %v0_ef40152, { 3, 0, 1, 2 }
  uselistorder i32 %v3_eee4151, { 1, 0 }
  uselistorder i1 %v7_eee0150, { 1, 0 }
  uselistorder i32 %v1_eed8143, { 1, 0 }
  uselistorder i32 %v4_eec0, { 1, 0, 2 }
  uselistorder i32 %v0_ee44, { 1, 0 }
  uselistorder i32 %v0_ee1c, { 1, 0 }
  uselistorder i1 %v7_edd0, { 1, 0 }
  uselistorder i32 %v5_edcc, { 1, 0, 2 }
  uselistorder i32 %v1_ed90, { 1, 0 }
  uselistorder i32 %v3_ed7c, { 1, 0 }
  uselistorder i32 %v0_ed74, { 1, 0 }
  uselistorder i32 %v1_ed68, { 1, 2, 0 }
  uselistorder i1 %v7_ed34, { 1, 0 }
  uselistorder i32 %v5_ed30, { 1, 0, 2 }
  uselistorder i1 %v7_ed18, { 1, 0 }
  uselistorder i32 %v4_ed14, { 1, 0, 2 }
  uselistorder i1 %v7_ecfc, { 1, 0 }
  uselistorder i32 %v3_ecf8, { 2, 1, 0, 3 }
  uselistorder i1 %v7_ece0, { 2, 1, 0 }
  uselistorder i32 %v1_ece4, { 1, 0 }
  uselistorder i32 %v1_ee84, { 1, 2, 0 }
  uselistorder i32 %v2_ed80, { 1, 0, 2 }
  uselistorder i32 %v2_ecdc, { 1, 0, 2 }
  uselistorder i32 %v2_eca4, { 4, 3, 2, 5, 7, 9, 1, 0, 6, 8, 10 }
  uselistorder i32 %v4_ec58, { 3, 0, 2, 1 }
  uselistorder i32 %v1_ec24, { 1, 0, 2 }
  uselistorder i32 %v0_ebe0, { 0, 1, 3, 2 }
  uselistorder i32 %v1_ebdc, { 1, 0, 2 }
  uselistorder i32 %v1_ebd8, { 1, 0 }
  uselistorder i32 %v2_ebcc11, { 1, 0 }
  uselistorder i32 %v2_ebcc, { 1, 0 }
  uselistorder i1 %v8_ebbc, { 1, 0 }
  uselistorder i32 %v2_eba4, { 0, 2, 1, 3 }
  uselistorder i32 %v0_eb8c, { 1, 0 }
  uselistorder i32 %v2_eb84, { 2, 3, 4, 5, 0, 1, 6, 7 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-2240, { 0, 2, 1 }
  uselistorder i32* %stack_var_-64, { 0, 1, 3, 2 }
  uselistorder i8* %stack_var_-4288, { 2, 0, 1 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 10, 13, 11, 12, 14, 16, 33, 17, 18, 19, 20, 21, 25, 22, 23, 24, 26, 34, 35, 27, 28, 29, 30, 31, 32 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 11, 7, 29, 9, 10, 28, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 24, 25, 27 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 9, 12, 7, 8, 0, 10, 11, 29, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 24, 28, 26 }
  uselistorder i32* %r0.global-to-local, { 1, 5, 2, 3, 4, 10, 6, 46, 7, 8, 9, 12, 11, 15, 14, 13, 17, 16, 20, 18, 19, 21, 22, 47, 23, 25, 24, 26, 28, 27, 29, 36, 31, 30, 32, 33, 34, 35, 38, 37, 39, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 16, 18 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 3, 10, 4, 15, 5, 6, 16, 7, 8, 9, 0, 11, 12, 13, 14, 37, 35, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1, 26, 27, 28, 29, 34, 32, 30, 31, 33, 36 }
  uselistorder i32 (i32)* @function_12d68, { 7, 6, 11, 10, 9, 8, 0, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_f09c, { 1, 0 }
  uselistorder label %dec_label_pc_ef68.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_eef8.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_eed8.backedge, { 1, 0 }
  uselistorder label %bb130, { 1, 0 }
  uselistorder label %dec_label_pc_ef78, { 1, 0 }
  uselistorder label %dec_label_pc_ef78.preheader, { 1, 0 }
  uselistorder label %bb128, { 1, 0 }
  uselistorder label %dec_label_pc_ef08, { 1, 0 }
  uselistorder label %dec_label_pc_ef08.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_eeec, { 1, 0 }
  uselistorder label %dec_label_pc_ee64, { 1, 0 }
  uselistorder label %dec_label_pc_ee4c, { 5, 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_ee2c, { 2, 1, 4, 0, 3 }
  uselistorder label %dec_label_pc_ed64.dec_label_pc_ed64_crit_edge, { 1, 0 }
  uselistorder label %bb126, { 1, 0 }
  uselistorder label %.thread12, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ebb4, { 1, 0 }
}

define i32 @function_f0b8(i32 %arg1) local_unnamed_addr {
dec_label_pc_f0b8:
  %v2_f0bc = load i32, i32* @global_var_1c960.128, align 4
  %v2_f0c4 = call i32 @function_11a60(i32 %v2_f0bc, i32 9)
  %v0_f0c8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_f0c8, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_f0b8
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_f0b8, %bb
  ret i32 %v2_f0c4

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_f0cc() local_unnamed_addr {
dec_label_pc_f0cc:
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_f0cc = load i32, i32* @r4, align 4
  store i32 %v3_f0cc, i32* %stack_var_-16, align 4
  %v0_f0d0 = load i32, i32* @r0, align 4
  store i32 %v0_f0d0, i32* %r5.global-to-local, align 4
  %v1_f0d4 = add i32 %v0_f0d0, 4
  %v2_f0d4 = inttoptr i32 %v1_f0d4 to i32*
  %v3_f0d4 = load i32, i32* %v2_f0d4, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 61688, i32* @lr, align 4
  %v1_f0f4 = icmp ne i32 %v3_f0d4, -1
  call void @__pseudo_cond_branch(i1 %v1_f0f4, i32 ptrtoint (i32* @global_var_11960.101 to i32))
  %v3_f104 = call i32 @function_1224c(i32 2, i32 1, i32 0)
  store i32 %v3_f104, i32* %r3.global-to-local, align 4
  %v7_f10c = icmp eq i32 %v3_f104, -1
  store i32 356, i32* @r1, align 4
  %v0_f114 = load i32, i32* %r5.global-to-local, align 4
  %v1_f114 = add i32 %v0_f114, 28
  store i32 %v1_f114, i32* @r0, align 4
  %v2_f118 = add i32 %v0_f114, 4
  %v3_f118 = inttoptr i32 %v2_f118 to i32*
  store i32 %v3_f104, i32* %v3_f118, align 4
  br i1 %v7_f10c, label %dec_label_pc_f0cc.dec_label_pc_f194_crit_edge, label %dec_label_pc_f120

dec_label_pc_f0cc.dec_label_pc_f194_crit_edge:    ; preds = %dec_label_pc_f0cc
  %v14_f198.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_f194

dec_label_pc_f120:                                ; preds = %dec_label_pc_f0cc
  %v0_f120 = load i32, i32* %r6.global-to-local, align 4
  %v1_f120 = load i32, i32* %r5.global-to-local, align 4
  %v2_f120 = add i32 %v1_f120, 24
  %v3_f120 = inttoptr i32 %v2_f120 to i32*
  store i32 %v0_f120, i32* %v3_f120, align 4
  %v0_f124 = call i32 @function_11180()
  %v0_f128 = load i32, i32* %r5.global-to-local, align 4
  %v1_f128 = add i32 %v0_f128, 4
  %v2_f128 = inttoptr i32 %v1_f128 to i32*
  %v3_f128 = load i32, i32* %v2_f128, align 4
  store i32 %v3_f128, i32* @r4, align 4
  %v0_f130 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_f130, i32* @r2, align 4
  %v2_f138 = call i32 @function_1189c(i32 %v3_f128, i32 3)
  %v1_f140 = or i32 %v2_f138, 2048
  store i32 %v1_f140, i32* @r2, align 4
  %v0_f144 = load i32, i32* @r4, align 4
  %v2_f148 = call i32 @function_1189c(i32 %v0_f144, i32 4)
  store i32 ptrtoint (i32* @global_var_1c8f4.130 to i32), i32* %r3.global-to-local, align 4
  %v0_f150 = load i32, i32* %r5.global-to-local, align 4
  %v1_f150 = add i32 %v0_f150, 20
  %v2_f150 = inttoptr i32 %v1_f150 to i32*
  %v3_f150 = load i32, i32* %v2_f150, align 4
  store i32 %v3_f150, i32* @r4, align 4
  %v2_f154 = load i32, i32* @global_var_1c8f4.130, align 4
  %v1_f158 = add i32 %v0_f150, 16
  %v2_f158 = inttoptr i32 %v1_f158 to i32*
  %v3_f158 = load i32, i32* %v2_f158, align 4
  store i32 %v3_f158, i32* @lr, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_f160 = add i32 %v0_f150, 8
  %v3_f160 = inttoptr i32 %v2_f160 to i32*
  store i32 %v2_f154, i32* %v3_f160, align 4
  %v0_f164 = load i32, i32* %r3.global-to-local, align 4
  %v1_f164 = load i32, i32* %r5.global-to-local, align 4
  %v2_f164 = add i32 %v1_f164, 12
  %v3_f164 = inttoptr i32 %v2_f164 to i32*
  store i32 %v0_f164, i32* %v3_f164, align 4
  %v0_f16c = load i32, i32* %r5.global-to-local, align 4
  %v1_f16c = add i32 %v0_f16c, 4
  %v2_f16c = inttoptr i32 %v1_f16c to i32*
  %v3_f16c = load i32, i32* %v2_f16c, align 4
  %v0_f170 = load i32, i32* %r3.global-to-local, align 4
  %v2_f170 = mul i32 %v0_f170, 2
  store i32 %v2_f170, i32* %r3.global-to-local, align 4
  store i32 %v2_f170, i32* %stack_var_-32, align 4
  %v3_f190 = bitcast i32* %stack_var_-32 to %sockaddr*
  %v4_f190 = call i32 @function_120a8(i32 %v3_f16c, %sockaddr* %v3_f190, i32 16)
  br label %dec_label_pc_f194

dec_label_pc_f194:                                ; preds = %dec_label_pc_f0cc.dec_label_pc_f194_crit_edge, %dec_label_pc_f120
  %v14_f198 = phi i32 [ %v14_f198.pre, %dec_label_pc_f0cc.dec_label_pc_f194_crit_edge ], [ %v4_f190, %dec_label_pc_f120 ]
  %v2_f198 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_f198, i32* @r4, align 4
  ret i32 %v14_f198

; uselistorder directives
  uselistorder i32 %v2_f170, { 1, 0 }
  uselistorder i32 %v3_f104, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32 ()* @function_11180, { 8, 4, 7, 6, 5, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_f194, { 1, 0 }
}

define i32 @function_f1a0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_f1a0:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_f1a0 = load i32, i32* @r4, align 4
  %v6_f1a0 = load i32, i32* @r5, align 4
  %v9_f1a0 = load i32, i32* @r6, align 4
  %v12_f1a0 = load i32, i32* @r7, align 4
  %v15_f1a0 = load i32, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1c8c0.132 to i32), i32* @r8, align 4
  %v2_f1a8 = load i32, i32* @global_var_1c8c0.132, align 4
  store i32 ptrtoint (i32* @global_var_1c8ec.134 to i32), i32* %sb.global-to-local, align 4
  %v3_f1b4 = mul i32 %v2_f1a8, 16
  store i32 %v3_f1b4, i32* %r3.global-to-local, align 4
  %v3_f1bc = urem i32 %arg3, 65536
  store i32 %v3_f1bc, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_f1c8 = load i32, i32* @global_var_1c8ec.134, align 4
  %v1_f1cc = add i32 %v3_f1b4, 16
  store i32 %v1_f1cc, i32* %r1.global-to-local, align 4
  store i32 %v3_f1bc, i32* %stack_var_-44, align 4
  %v8_f1d4 = call i32 @function_12680(i32 %v2_f1c8, i32 %v1_f1cc, i32 %v3_f1bc, i32 %v3_f1b4)
  store i32 %v8_f1d4, i32* %sl.global-to-local, align 4
  %v0_f1dc = load i32, i32* @r5, align 4
  %v1_f1e0 = load i32, i32* %sb.global-to-local, align 4
  %v2_f1e0 = inttoptr i32 %v1_f1e0 to i32*
  store i32 %v8_f1d4, i32* %v2_f1e0, align 4
  %v2_f1e4 = load i32, i32* @global_var_1c8c0.132, align 4
  store i32 %v2_f1e4, i32* %fp.global-to-local, align 4
  %v1_f1e8 = inttoptr i32 %v0_f1dc to i8*
  %v2_f1e8 = call i32 @function_110e0(i8* %v1_f1e8)
  %sext = mul i32 %v2_f1e8, 16777216
  %v1_f1ec = sdiv i32 %sext, 16777216
  %v2_f1ec = add nsw i32 %v1_f1ec, 1
  store i32 %v2_f1ec, i32* @r4, align 4
  store i32 %v1_f1ec, i32* @r7, align 4
  %v1_f1f8 = call i32 @function_123e4(i32 %v2_f1ec)
  %v0_f1fc = load i32, i32* @r5, align 4
  store i32 %v0_f1fc, i32* %r1.global-to-local, align 4
  %v0_f200 = load i32, i32* @r4, align 4
  store i32 %v0_f200, i32* %r2.global-to-local, align 4
  store i32 %v1_f1f8, i32* @r6, align 4
  %v3_f208 = call i32 @function_1115c(i32 %v1_f1f8, i32 %v0_f1fc, i32 %v0_f200)
  %v0_f20c = load i32, i32* @r7, align 4
  %tmp21 = icmp slt i32 %v0_f20c, 1
  %extract.t6 = trunc i32 %v0_f20c to i8
  br i1 %tmp21, label %dec_label_pc_f230, label %dec_label_pc_f214

dec_label_pc_f214:                                ; preds = %dec_label_pc_f1a0
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f218

dec_label_pc_f218:                                ; preds = %dec_label_pc_f218, %dec_label_pc_f214
  %v2_f220 = phi i32 [ %v1_f224, %dec_label_pc_f218 ], [ 0, %dec_label_pc_f214 ]
  %v1_f218 = load i32, i32* @r6, align 4
  %v2_f218 = add i32 %v1_f218, %v2_f220
  %v3_f218 = inttoptr i32 %v2_f218 to i8*
  %v4_f218 = load i8, i8* %v3_f218, align 1
  %v6_f218 = zext i8 %v4_f218 to i32
  %v1_f21c = xor i32 %v6_f218, 84
  store i32 %v1_f21c, i32* %r3.global-to-local, align 4
  %v1_f220 = trunc i32 %v1_f21c to i8
  store i8 %v1_f220, i8* %v3_f218, align 1
  %v0_f224 = load i32, i32* %r2.global-to-local, align 4
  %v1_f224 = add i32 %v0_f224, 1
  store i32 %v1_f224, i32* %r2.global-to-local, align 4
  %v0_f228 = load i32, i32* @r7, align 4
  %v9_f228 = icmp eq i32 %v0_f228, %v1_f224
  br i1 %v9_f228, label %dec_label_pc_f230.loopexit, label %dec_label_pc_f218

dec_label_pc_f230.loopexit:                       ; preds = %dec_label_pc_f218
  %extract.t = trunc i32 %v1_f224 to i8
  br label %dec_label_pc_f230

dec_label_pc_f230:                                ; preds = %dec_label_pc_f230.loopexit, %dec_label_pc_f1a0
  %v0_f240.off0 = phi i8 [ %extract.t, %dec_label_pc_f230.loopexit ], [ %extract.t6, %dec_label_pc_f1a0 ]
  %v2_f230 = load i32, i32* @global_var_1c8c0.132, align 4
  %v2_f234 = load i32, i32* @global_var_1c8ec.134, align 4
  store i32 %v2_f234, i32* %r2.global-to-local, align 4
  %v3_f238 = mul i32 %v2_f230, 16
  %v2_f23c = add i32 %v2_f234, %v3_f238
  store i32 %v2_f23c, i32* %r3.global-to-local, align 4
  %v3_f240 = add i32 %v2_f23c, 12
  %v4_f240 = inttoptr i32 %v3_f240 to i8*
  store i8 %v0_f240.off0, i8* %v4_f240, align 1
  %v0_f244 = load i32, i32* @r6, align 4
  %v1_f244 = load i32, i32* %sl.global-to-local, align 4
  %v2_f244 = load i32, i32* %fp.global-to-local, align 4
  %v5_f244 = mul i32 %v2_f244, 16
  %v6_f244 = add i32 %v5_f244, %v1_f244
  %v7_f244 = inttoptr i32 %v6_f244 to i32*
  store i32 %v0_f244, i32* %v7_f244, align 4
  %v2_f24c = load i32, i32* @global_var_1c8c0.132, align 4
  store i32 %v2_f24c, i32* @r7, align 4
  %v2_f250 = load i32, i32* @global_var_1c8ec.134, align 4
  store i32 %v2_f250, i32* %sl.global-to-local, align 4
  %v1_f254 = inttoptr i32 %arg2 to i8*
  %v2_f254 = call i32 @function_110e0(i8* %v1_f254)
  %sext1 = mul i32 %v2_f254, 16777216
  %v1_f258 = sdiv i32 %sext1, 16777216
  %v2_f258 = add nsw i32 %v1_f258, 1
  store i32 %v2_f258, i32* @r4, align 4
  store i32 %v1_f258, i32* @r5, align 4
  %v1_f264 = call i32 @function_123e4(i32 %v2_f258)
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_f26c = load i32, i32* @r4, align 4
  store i32 %v0_f26c, i32* %r2.global-to-local, align 4
  store i32 %v1_f264, i32* %r6.global-to-local, align 4
  %v3_f274 = call i32 @function_1115c(i32 %v1_f264, i32 %arg2, i32 %v0_f26c)
  %v0_f278 = load i32, i32* @r5, align 4
  %tmp22 = icmp slt i32 %v0_f278, 1
  %extract.t8 = trunc i32 %v0_f278 to i8
  br i1 %tmp22, label %dec_label_pc_f29c, label %dec_label_pc_f280

dec_label_pc_f280:                                ; preds = %dec_label_pc_f230
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f284

dec_label_pc_f284:                                ; preds = %dec_label_pc_f284, %dec_label_pc_f280
  %v2_f28c = phi i32 [ %v1_f290, %dec_label_pc_f284 ], [ 0, %dec_label_pc_f280 ]
  %v1_f284 = load i32, i32* %r6.global-to-local, align 4
  %v2_f284 = add i32 %v1_f284, %v2_f28c
  %v3_f284 = inttoptr i32 %v2_f284 to i8*
  %v4_f284 = load i8, i8* %v3_f284, align 1
  %v6_f284 = zext i8 %v4_f284 to i32
  %v1_f288 = xor i32 %v6_f284, 84
  store i32 %v1_f288, i32* %r3.global-to-local, align 4
  %v1_f28c = trunc i32 %v1_f288 to i8
  store i8 %v1_f28c, i8* %v3_f284, align 1
  %v0_f290 = load i32, i32* %r2.global-to-local, align 4
  %v1_f290 = add i32 %v0_f290, 1
  store i32 %v1_f290, i32* %r2.global-to-local, align 4
  %v0_f294 = load i32, i32* @r5, align 4
  %v9_f294 = icmp eq i32 %v0_f294, %v1_f290
  br i1 %v9_f294, label %dec_label_pc_f29c.loopexit, label %dec_label_pc_f284

dec_label_pc_f29c.loopexit:                       ; preds = %dec_label_pc_f284
  %extract.t7 = trunc i32 %v1_f290 to i8
  br label %dec_label_pc_f29c

dec_label_pc_f29c:                                ; preds = %dec_label_pc_f29c.loopexit, %dec_label_pc_f230
  %v0_f2ac.off0 = phi i8 [ %extract.t7, %dec_label_pc_f29c.loopexit ], [ %extract.t8, %dec_label_pc_f230 ]
  %v2_f29c = load i32, i32* @global_var_1c8c0.132, align 4
  %v2_f2a0 = load i32, i32* @global_var_1c8ec.134, align 4
  %v3_f2a4 = mul i32 %v2_f29c, 16
  %v2_f2a8 = or i32 %v3_f2a4, 13
  %v3_f2ac = add i32 %v2_f2a8, %v2_f2a0
  %v4_f2ac = inttoptr i32 %v3_f2ac to i8*
  store i8 %v0_f2ac.off0, i8* %v4_f2ac, align 1
  %v2_f2b4 = load i32, i32* @global_var_1c8c0.132, align 4
  store i32 %v2_f2b4, i32* %lr.global-to-local, align 4
  %v4_f2b8 = load i8, i8* @global_var_1c8f1.137, align 1
  %v5_f2b8 = zext i8 %v4_f2b8 to i32
  %v3_f2bc = load i8, i8* bitcast (i8** @global_var_1c8f0.136 to i8*), align 4
  %v4_f2bc = zext i8 %v3_f2bc to i32
  %v2_f2c0 = load i32, i32* @global_var_1c8ec.134, align 4
  %v4_f2c4 = mul nuw nsw i32 %v5_f2b8, 256
  %v5_f2c4 = or i32 %v4_f2bc, %v4_f2c4
  store i32 %v5_f2c4, i32* %r2.global-to-local, align 4
  %v3_f2c8 = mul i32 %v2_f2b4, 16
  %v2_f2cc = add i32 %v2_f2c0, %v3_f2c8
  store i32 %v2_f2cc, i32* %r1.global-to-local, align 4
  %v3_f2d4 = add i32 %v2_f2cc, 9
  %v4_f2d4 = inttoptr i32 %v3_f2d4 to i8*
  store i8 %v4_f2b8, i8* %v4_f2d4, align 1
  %v0_f2d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_f2d8 = trunc i32 %v0_f2d8 to i8
  %v2_f2d8 = load i32, i32* %r1.global-to-local, align 4
  %v3_f2d8 = add i32 %v2_f2d8, 8
  %v4_f2d8 = inttoptr i32 %v3_f2d8 to i8*
  store i8 %v1_f2d8, i8* %v4_f2d8, align 1
  %v4_f2dc = load i8, i8* @global_var_1c8f1.137, align 1
  %v5_f2dc = zext i8 %v4_f2dc to i32
  %v3_f2e0 = load i8, i8* bitcast (i8** @global_var_1c8f0.136 to i8*), align 4
  %v4_f2e0 = zext i8 %v3_f2e0 to i32
  %v4_f2e4 = mul nuw nsw i32 %v5_f2dc, 256
  %v5_f2e4 = or i32 %v4_f2e0, %v4_f2e4
  %v2_f2e8 = load i32, i32* %stack_var_-44, align 4
  %v2_f2ec = add i32 %v5_f2e4, %v2_f2e8
  store i32 %v2_f2ec, i32* %r3.global-to-local, align 4
  %v3_f2f09 = udiv i32 %v2_f2ec, 256
  %v1_f2f4 = trunc i32 %v3_f2f09 to i8
  %v2_f2f4 = load i32, i32* %r1.global-to-local, align 4
  %v3_f2f4 = add i32 %v2_f2f4, 11
  %v4_f2f4 = inttoptr i32 %v3_f2f4 to i8*
  store i8 %v1_f2f4, i8* %v4_f2f4, align 1
  %v0_f2f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_f2f8 = trunc i32 %v0_f2f8 to i8
  %v2_f2f8 = load i32, i32* %r1.global-to-local, align 4
  %v3_f2f8 = add i32 %v2_f2f8, 10
  %v4_f2f8 = inttoptr i32 %v3_f2f8 to i8*
  store i8 %v1_f2f8, i8* %v4_f2f8, align 1
  %v4_f2fc = load i8, i8* @global_var_1c8f1.137, align 1
  %v5_f2fc = zext i8 %v4_f2fc to i32
  %v3_f300 = load i8, i8* bitcast (i8** @global_var_1c8f0.136 to i8*), align 4
  %v4_f300 = zext i8 %v3_f300 to i32
  %v4_f304 = mul nuw nsw i32 %v5_f2fc, 256
  %v5_f304 = or i32 %v4_f300, %v4_f304
  %v2_f308 = load i32, i32* %stack_var_-44, align 4
  %v2_f30c = add i32 %v5_f304, %v2_f308
  store i32 %v2_f30c, i32* %r2.global-to-local, align 4
  %v0_f310 = load i32, i32* @r7, align 4
  %v3_f310 = mul i32 %v0_f310, 16
  %v1_f314 = load i32, i32* %sl.global-to-local, align 4
  %v2_f314 = add i32 %v1_f314, %v3_f310
  store i32 %v2_f314, i32* %r3.global-to-local, align 4
  %v0_f318 = load i32, i32* %lr.global-to-local, align 4
  %v1_f318 = add i32 %v0_f318, 1
  store i32 %v1_f318, i32* @lr, align 4
  %v3_f31c = sdiv i32 %v2_f30c, 256
  store i32 %v3_f31c, i32* %r1.global-to-local, align 4
  %v0_f320 = load i32, i32* %r6.global-to-local, align 4
  %v2_f320 = add i32 %v2_f314, 4
  %v3_f320 = inttoptr i32 %v2_f320 to i32*
  store i32 %v0_f320, i32* %v3_f320, align 4
  %v0_f324 = load i32, i32* @lr, align 4
  %v1_f324 = load i32, i32* @r8, align 4
  %v2_f324 = inttoptr i32 %v1_f324 to i32*
  store i32 %v0_f324, i32* %v2_f324, align 4
  %v0_f328 = load i32, i32* %r1.global-to-local, align 4
  %v1_f328 = trunc i32 %v0_f328 to i8
  store i8 %v1_f328, i8* @global_var_1c8f1.137, align 1
  %v0_f32c = load i32, i32* %r2.global-to-local, align 4
  %v1_f32c = trunc i32 %v0_f32c to i8
  store i8 %v1_f32c, i8* bitcast (i8** @global_var_1c8f0.136 to i8*), align 4
  store i32 %v3_f1a0, i32* @r4, align 4
  store i32 %v6_f1a0, i32* @r5, align 4
  store i32 %v9_f1a0, i32* @r6, align 4
  store i32 %v12_f1a0, i32* @r7, align 4
  store i32 %v15_f1a0, i32* @r8, align 4
  ret i32 ptrtoint (i8** @global_var_1c8f0.136 to i32)

; uselistorder directives
  uselistorder i32 %v1_f290, { 0, 2, 3, 1 }
  uselistorder i32 %v1_f264, { 1, 0 }
  uselistorder i32 %v1_f224, { 0, 2, 3, 1 }
  uselistorder i32 %v1_f1f8, { 1, 0 }
  uselistorder i32 %v3_f1bc, { 1, 2, 0 }
  uselistorder i32 %v3_f1b4, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 (i8*)* @function_110e0, { 0, 1, 9, 10, 11, 12, 13, 27, 2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28 }
  uselistorder i32 (i32, i32, i32, i32)* @function_12680, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_f344(i32 %arg1) local_unnamed_addr {
dec_label_pc_f344:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp256 = call i32 @__decompiler_undefined_function_0()
  %tmp263 = call i32 @__decompiler_undefined_function_0()
  %tmp264 = call i8* @__decompiler_undefined_function_3()
  %tmp265 = call i32 @__decompiler_undefined_function_0()
  %tmp266 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f344 = load i32, i32* @r4, align 4
  store i32 %v3_f344, i32* %stack_var_-36, align 4
  %v6_f344 = load i32, i32* @r5, align 4
  %v18_f344 = load i32, i32* @sb, align 4
  %v21_f344 = load i32, i32* @sl, align 4
  %v0_f34c = call i32 @function_1198c()
  store i32 %v0_f34c, i32* %r0.global-to-local, align 4
  %v7_f350 = icmp eq i32 %v0_f34c, -1
  %. = zext i1 %v7_f350 to i32
  %tmp297 = icmp slt i32 %v0_f34c, 1
  %storemerge253 = select i1 %tmp297, i32 %., i32 1
  store i32 %storemerge253, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1c960.128 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f36c = icmp eq i32 %storemerge253, 0
  store i1 %v2_f36c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_f34c, i32* @global_var_1c960.128, align 4
  br i1 %v2_f36c, label %dec_label_pc_f380, label %dec_label_pc_f378

dec_label_pc_f378:                                ; preds = %dec_label_pc_f344
  store i32 %v3_f344, i32* %r4.global-to-local, align 4
  store i32 %v6_f344, i32* %r5.global-to-local, align 4
  store i32 %v18_f344, i32* @sb, align 4
  store i32 %v21_f344, i32* @sl, align 4
  ret i32 %v0_f34c

dec_label_pc_f380:                                ; preds = %dec_label_pc_f344
  %v0_f380 = call i32 @function_11398()
  store i32 %v0_f380, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c93c.50 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_f380, i32* @global_var_1c93c.50, align 4
  %v1_f38c = call i32 @function_e93c(i32 %v0_f380)
  %v0_f390 = load i32, i32* @r4, align 4
  store i32 %v0_f390, i32* %r0.global-to-local, align 4
  %v1_f394 = inttoptr i32 %v0_f390 to i32*
  %v2_f394 = call i32 @function_11c30(i32* %v1_f394)
  store i32 ptrtoint (i32* @global_var_1c8f4.130 to i32), i32* %r2.global-to-local, align 4
  store i32 388, i32* %r1.global-to-local, align 4
  store i32 %v2_f394, i32* @global_var_1c8f4.130, align 4
  store i32 356, i32* %r0.global-to-local, align 4
  %v2_f3a8 = call i32 @function_12538(i32 356, i32 388)
  store i32 ptrtoint (i32* @global_var_1c958.142 to i32), i32* %r3.global-to-local, align 4
  %v0_f3b0 = load i32, i32* @r4, align 4
  store i32 %v0_f3b0, i32* %r1.global-to-local, align 4
  store i32 %v2_f3a8, i32* @lr, align 4
  store i32 %v2_f3a8, i32* @global_var_1c958.142, align 4
  store i32 %v0_f3b0, i32* %stack_var_-52, align 4
  store i32 %v0_f3b0, i32* %r5.global-to-local, align 4
  store i32 355, i32* %r0.global-to-local, align 4
  %v1_f3cc = add i32 %v0_f3b0, -1
  store i32 %v1_f3cc, i32* @r4, align 4
  store i32 %v0_f3b0, i32* %ip.global-to-local, align 4
  %v1_f3d4 = add i32 %v2_f3a8, 4
  store i32 %v1_f3d4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f3d8

dec_label_pc_f3d8:                                ; preds = %dec_label_pc_f3d8.dec_label_pc_f3d8_crit_edge, %dec_label_pc_f380
  %v0_f3f4 = phi i32 [ %v0_f3f4.pre, %dec_label_pc_f3d8.dec_label_pc_f3d8_crit_edge ], [ %v0_f3b0, %dec_label_pc_f380 ]
  %v0_f3e4 = phi i32 [ %v0_f3fc, %dec_label_pc_f3d8.dec_label_pc_f3d8_crit_edge ], [ %v0_f3b0, %dec_label_pc_f380 ]
  %v1_f3f0 = phi i32 [ %v1_f3f0.pre, %dec_label_pc_f3d8.dec_label_pc_f3d8_crit_edge ], [ 355, %dec_label_pc_f380 ]
  %v1_f3ec = phi i32 [ %v1_f3ec.pre, %dec_label_pc_f3d8.dec_label_pc_f3d8_crit_edge ], [ %v2_f3a8, %dec_label_pc_f380 ]
  %v1_f3e4 = add i32 %v0_f3e4, 1
  store i32 %v1_f3e4, i32* %ip.global-to-local, align 4
  %v3_f3e8 = mul i32 %v0_f3e4, 388
  %v2_f3ec = add i32 %v3_f3e8, %v1_f3ec
  store i32 %v2_f3ec, i32* %r3.global-to-local, align 4
  %v2_f3f4 = add i32 %v2_f3ec, 12
  %v3_f3f4 = inttoptr i32 %v2_f3f4 to i32*
  store i32 %v0_f3f4, i32* %v3_f3f4, align 4
  %v0_f3f8 = load i32, i32* @r4, align 4
  %v1_f3f8 = load i32, i32* %r2.global-to-local, align 4
  %v2_f3f8 = inttoptr i32 %v1_f3f8 to i32*
  store i32 %v0_f3f8, i32* %v2_f3f8, align 4
  %v3_f3f8 = load i32, i32* %r2.global-to-local, align 4
  %v4_f3f8 = add i32 %v3_f3f8, 388
  store i32 %v4_f3f8, i32* %r2.global-to-local, align 4
  %v0_f3fc = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_f3fc, i32* %r1.global-to-local, align 4
  %v7_f400 = icmp sgt i32 %v1_f3e4, %v1_f3f0
  br i1 %v7_f400, label %dec_label_pc_f404, label %dec_label_pc_f3d8.dec_label_pc_f3d8_crit_edge

dec_label_pc_f3d8.dec_label_pc_f3d8_crit_edge:    ; preds = %dec_label_pc_f3d8
  %v1_f3ec.pre = load i32, i32* @lr, align 4
  %v1_f3f0.pre = load i32, i32* %r0.global-to-local, align 4
  %v0_f3f4.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_f3d8

dec_label_pc_f404:                                ; preds = %dec_label_pc_f3d8
  %v3_f3f0 = icmp uge i32 %v1_f3e4, %v1_f3f0
  %v9_f3f0 = icmp eq i32 %v1_f3e4, %v1_f3f0
  store i1 %v3_f3f0, i1* %cpsr_c.global-to-local, align 1
  store i1 %v9_f3f0, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_f3fc, i32* %stack_var_-52, align 4
  %v3_f414 = call i32 @function_1224c(i32 2, i32 3, i32 6)
  store i32 %v3_f414, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c95c.144 to i32), i32* %ip.global-to-local, align 4
  %v2_f41c = icmp eq i32 %v3_f414, -1
  store i1 %v2_f41c, i1* %cpsr_c.global-to-local, align 1
  %v7_f41c = icmp eq i32 %v3_f414, -1
  store i1 %v7_f41c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_f414, i32* @r4, align 4
  store i32 %v3_f414, i32* @global_var_1c95c.144, align 4
  br i1 %v7_f41c, label %dec_label_pc_fbc0, label %dec_label_pc_f42c

dec_label_pc_f42c:                                ; preds = %dec_label_pc_f404
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_f430 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_f430, i32* @r2, align 4
  %v2_f434 = call i32 @function_1189c(i32 %v3_f414, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_f43c = or i32 %v2_f434, 2048
  store i32 %v1_f43c, i32* @r2, align 4
  %v0_f440 = load i32, i32* @r4, align 4
  store i32 %v0_f440, i32* %r0.global-to-local, align 4
  %v2_f444 = call i32 @function_1189c(i32 %v0_f440, i32 4)
  store i32 1, i32* %ip.global-to-local, align 4
  %v2_f450 = load i32, i32* @global_var_1c95c.144, align 4
  store i32 %v2_f450, i32* %r0.global-to-local, align 4
  %v0_f454 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_f454, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_f45c = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_f45c, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v6_f46c = call i32 @function_1221c(i32 %v2_f450, i32 %v0_f454, i32 3, i32* nonnull %stack_var_-52, i32 4)
  store i32 %v6_f46c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f470 = icmp eq i32 %v6_f46c, 0
  store i1 %v2_f470, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f470, label %dec_label_pc_f478, label %dec_label_pc_fbb4

dec_label_pc_f478:                                ; preds = %dec_label_pc_f42c, %dec_label_pc_f478
  %v0_f478 = call i32 @function_e8e4()
  %v3_f47c = mul i32 %v0_f478, 65536
  store i32 %v3_f47c, i32* %r0.global-to-local, align 4
  %v3_f480 = urem i32 %v0_f478, 65536
  store i32 %v3_f480, i32* %r2.global-to-local, align 4
  %v1_f484 = mul i32 %v0_f478, 256
  %v3_f488 = and i32 %v1_f484, 65280
  %tmp300 = udiv i32 %v0_f478, 256
  %v4_f48c = urem i32 %tmp300, 256
  %v5_f48c = or i32 %v4_f48c, %v3_f488
  store i32 %v5_f48c, i32* %r3.global-to-local, align 4
  %v2_f490 = icmp ugt i32 %v5_f48c, 1023
  store i1 %v2_f490, i1* %cpsr_c.global-to-local, align 1
  %v7_f490 = icmp eq i32 %v5_f48c, 1024
  store i1 %v7_f490, i1* %cpsr_z.global-to-local, align 1
  %v3_f498 = icmp ult i32 %v5_f48c, 1022
  br i1 %v3_f498, label %dec_label_pc_f478, label %dec_label_pc_f49c

dec_label_pc_f49c:                                ; preds = %dec_label_pc_f478
  %v5_f494.le = trunc i32 %v0_f478 to i8
  store i32 ptrtoint (i8** @global_var_1c8c4.146 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i8 69, i8* bitcast (i8** @global_var_1c8c4.146 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1c8c7.147 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1c8c6.148 to i8*), align 4
  %v0_f4d0 = call i32 @function_e8e4()
  %v1_f4d0 = trunc i32 %v0_f4d0 to i8
  store i32 %v0_f4d0, i32* %r0.global-to-local, align 4
  %v3_f4d8 = load i8, i8* @global_var_1c8e4.151, align 1
  %v4_f4e0252 = udiv i32 %v0_f4d0, 256
  %v1_f4e4 = trunc i32 %v4_f4e0252 to i8
  store i8 %v1_f4e4, i8* bitcast (i32* @global_var_1c8c9.152 to i8*), align 4
  %v4_f4e8 = sext i8 %v5_f494.le to i32
  store i8 6, i8* bitcast (i32* @global_var_1c8cd.153 to i8*), align 4
  %tmp = urem i8 %v3_f4d8, 16
  %v1_f4f4 = zext i8 %tmp to i32
  store i32 ptrtoint (i32* @global_var_1c8d8.150 to i32), i32* %r2.global-to-local, align 4
  %v1_f4fc = and i32 %v4_f4e8, 128
  %v2_f4fc = icmp ne i32 %v1_f4fc, 0
  store i1 %v2_f4fc, i1* %cpsr_c.global-to-local, align 1
  %v3_f4fc = sdiv i32 %v4_f4e8, 256
  store i32 %v3_f4fc, i32* %ip.global-to-local, align 4
  %v1_f500 = or i32 %v1_f4f4, 80
  store i32 %v1_f500, i32* %r1.global-to-local, align 4
  store i8 64, i8* bitcast (i32* @global_var_1c8cc.154 to i8*), align 4
  %v1_f50c = trunc i32 %v1_f500 to i8
  store i8 %v1_f50c, i8* @global_var_1c8e4.151, align 1
  store i8 23, i8* bitcast (i32* @global_var_1c8db.155 to i8*), align 4
  store i32 %v4_f4e8, i32* %r3.global-to-local, align 4
  %v1_f51c = trunc i32 %v3_f4fc to i8
  store i8 %v1_f51c, i8* bitcast (i32* @global_var_1c8d9.156 to i8*), align 4
  store i8 %v1_f4d0, i8* bitcast (i32* @global_var_1c8c8.157 to i8*), align 4
  store i8 %v5_f494.le, i8* bitcast (i32* @global_var_1c8d8.150 to i8*), align 4
  %v0_f528 = load i32, i32* @r5, align 4
  %v1_f528 = trunc i32 %v0_f528 to i8
  store i8 %v1_f528, i8* bitcast (i32* @global_var_1c8da.158 to i8*), align 4
  %v0_f52c = call i32 @function_e8e4()
  %v1_f52c = trunc i32 %v0_f52c to i8
  %v3_f534 = load i8, i8* @global_var_1c8e5.159, align 1
  %v4_f534 = zext i8 %v3_f534 to i32
  store i32 ptrtoint (i32* @global_var_1c8d8.150 to i32), i32* @lr, align 4
  %v2_f53c = and i32 %v0_f52c, 128
  %v3_f53c = icmp ne i32 %v2_f53c, 0
  store i1 %v3_f53c, i1* %cpsr_c.global-to-local, align 1
  %v4_f53c = sdiv i32 %v0_f52c, 256
  store i32 %v4_f53c, i32* %ip.global-to-local, align 4
  %v1_f540 = or i32 %v4_f534, 2
  store i32 %v1_f540, i32* %r3.global-to-local, align 4
  store i32 %v0_f52c, i32* @r4, align 4
  %v1_f548 = trunc i32 %v4_f53c to i8
  store i8 %v1_f548, i8* bitcast (i32* @global_var_1c8e7.160 to i8*), align 4
  %v1_f54c = trunc i32 %v1_f540 to i8
  store i8 %v1_f54c, i8* @global_var_1c8e5.159, align 1
  store i8 %v1_f52c, i8* bitcast (i32* @global_var_1c8e6.161 to i8*), align 4
  store i32 ptrtoint ([8 x i8]* @global_var_14220.163 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14200.165 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_f560 = call i32 @function_f1a0(i32 ptrtoint ([8 x i8]* @global_var_14220.163 to i32), i32 ptrtoint (i32* @global_var_14200.165 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_141e4.167 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_141e4.167 to i32), i32* %r1.global-to-local, align 4
  %v5_f570 = call i32 @function_f1a0(i32 ptrtoint ([6 x i8]* @global_var_141e4.167 to i32), i32 ptrtoint ([6 x i8]* @global_var_141e4.167 to i32), i32 10)
  store i32 ptrtoint ([8 x i8]* @global_var_14220.163 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_141ec.169 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_f580 = call i32 @function_f1a0(i32 ptrtoint ([8 x i8]* @global_var_14220.163 to i32), i32 ptrtoint (i32* @global_var_141ec.169 to i32), i32 15)
  store i32 ptrtoint ([8 x i8]* @global_var_14220.163 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_141f8.171 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_f590 = call i32 @function_f1a0(i32 ptrtoint ([8 x i8]* @global_var_14220.163 to i32), i32 ptrtoint (i32* @global_var_141f8.171 to i32), i32 15)
  store i32 ptrtoint ([8 x i8]* @global_var_14220.163 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14204.173 to i32), i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v4_f5a0 = call i32 @function_f1a0(i32 ptrtoint ([8 x i8]* @global_var_14220.163 to i32), i32 ptrtoint (i32* @global_var_14204.173 to i32), i32 14)
  store i32 ptrtoint ([8 x i8]* @global_var_14220.163 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_1420c.175 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_f5b0 = call i32 @function_f1a0(i32 ptrtoint ([8 x i8]* @global_var_14220.163 to i32), i32 ptrtoint ([7 x i8]* @global_var_1420c.175 to i32), i32 13)
  store i32 ptrtoint (i32* @global_var_14214.177 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_14220.163 to i32), i32* %r0.global-to-local, align 4
  %v4_f5c0 = call i32 @function_f1a0(i32 ptrtoint ([8 x i8]* @global_var_14220.163 to i32), i32 ptrtoint (i32* @global_var_14214.177 to i32), i32 12)
  store i32 %v4_f5c0, i32* %r0.global-to-local, align 4
  %v2_f5c8 = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_f5c8, i32* %r1.global-to-local, align 4
  %v2_f5cc = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_f5cc, i32* %r2.global-to-local, align 4
  %tmp301 = bitcast i32* %stack_var_-1842 to i8*
  br label %dec_label_pc_f5d8

dec_label_pc_f5d8:                                ; preds = %dec_label_pc_fcc8, %dec_label_pc_f49c
  %stack_var_-1872.0 = phi i32 [ %tmp263, %dec_label_pc_f49c ], [ %stack_var_-1872.2, %dec_label_pc_fcc8 ]
  %stack_var_-1884.0 = phi i8* [ %tmp301, %dec_label_pc_f49c ], [ %stack_var_-1884.1, %dec_label_pc_fcc8 ]
  %v0_f98c = phi i32 [ %v2_f5c8, %dec_label_pc_f49c ], [ %stack_var_-1880.1, %dec_label_pc_fcc8 ]
  %stack_var_-1876.0 = phi i8 [ %v5_f494.le, %dec_label_pc_f49c ], [ %stack_var_-1876.1, %dec_label_pc_fcc8 ]
  store i32 ptrtoint (i32* @global_var_1c8f4.130 to i32), i32* %r3.global-to-local, align 4
  store i32 %stack_var_-1872.0, i32* %ip.global-to-local, align 4
  %v2_f5e0 = load i32, i32* @global_var_1c8f4.130, align 4
  store i32 %v2_f5e0, i32* @r8, align 4
  %v3_f5e4 = icmp uge i32 %stack_var_-1872.0, %v2_f5e0
  store i1 %v3_f5e4, i1* %cpsr_c.global-to-local, align 1
  %v9_f5e4 = icmp eq i32 %stack_var_-1872.0, %v2_f5e0
  store i1 %v9_f5e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f5e4, label %dec_label_pc_f914, label %dec_label_pc_f5ec

dec_label_pc_f5ec:                                ; preds = %dec_label_pc_f5d8
  store i32 0, i32* %stack_var_-52, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  %v2_f8e0 = ptrtoint i32* %stack_var_-92 to i32
  br label %dec_label_pc_f5f8

dec_label_pc_f5f8:                                ; preds = %.thread64.dec_label_pc_f5f8_crit_edge, %dec_label_pc_f5ec
  %v0_f5f8 = phi i32 [ %v0_f5f8.pre, %.thread64.dec_label_pc_f5f8_crit_edge ], [ 0, %dec_label_pc_f5ec ]
  store i32 %v0_f5f8, i32* %stack_var_-92, align 4
  store i32 %v0_f5f8, i32* %stack_var_-84, align 4
  %v0_f608 = call i32 @function_e8e4()
  %v1_f608 = trunc i32 %v0_f608 to i8
  store i32 %v0_f608, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c93c.50 to i32), i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1c8c4.146 to i32), i32* %ip.global-to-local, align 4
  %v2_f614 = load i32, i32* @global_var_1c93c.50, align 4
  store i32 %v2_f614, i32* %r2.global-to-local, align 4
  %v2_f618 = and i32 %v0_f608, 128
  %v3_f618 = icmp ne i32 %v2_f618, 0
  store i1 %v3_f618, i1* %cpsr_c.global-to-local, align 1
  %v4_f618 = sdiv i32 %v0_f608, 256
  store i32 %v4_f618, i32* %r3.global-to-local, align 4
  %v1_f61c = trunc i32 %v4_f618 to i8
  store i8 %v1_f61c, i8* bitcast (i32* @global_var_1c8c9.152 to i8*), align 4
  store i32 %v2_f614, i32* @global_var_1c8d0.178, align 4
  store i8 %v1_f608, i8* bitcast (i32* @global_var_1c8c8.157 to i8*), align 4
  br label %dec_label_pc_f628

dec_label_pc_f628:                                ; preds = %dec_label_pc_f780, %dec_label_pc_f658, %dec_label_pc_f7b4, %dec_label_pc_f7a8, %dec_label_pc_f79c, %dec_label_pc_f790, %.thread49, %.thread33, %.thread29, %.thread25, %bb327, %bb326, %bb325, %bb324, %bb323, %bb322, %bb321, %bb320, %bb319, %bb318, %dec_label_pc_f6f4, %dec_label_pc_f6ec, %bb312, %dec_label_pc_f6bc, %dec_label_pc_f698, %bb305, %dec_label_pc_f668, %bb304, %dec_label_pc_f650, %bb303, %bb329, %dec_label_pc_f5f8
  %v0_f628 = call i32 @function_e8e4()
  store i32 %v0_f628, i32* %r0.global-to-local, align 4
  %v1_f62c = urem i32 %v0_f628, 256
  store i32 %v1_f62c, i32* %r1.global-to-local, align 4
  %v3_f630 = udiv i32 %v0_f628, 256
  store i32 %v3_f630, i32* %r3.global-to-local, align 4
  %v3_f634 = udiv i32 %v0_f628, 65536
  store i32 %v3_f634, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f638 = icmp eq i32 %v1_f62c, 0
  store i1 %v2_f638, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f638, label %bb303, label %bb302

bb302:                                            ; preds = %dec_label_pc_f628
  %v3_f63c = icmp ugt i32 %v1_f62c, 126
  store i1 %v3_f63c, i1* %cpsr_c.global-to-local, align 1
  %v8_f63c = icmp eq i32 %v1_f62c, 127
  store i1 %v8_f63c, i1* %cpsr_z.global-to-local, align 1
  br label %bb303

bb303:                                            ; preds = %dec_label_pc_f628, %bb302
  %v0_f64c = phi i1 [ true, %dec_label_pc_f628 ], [ %v8_f63c, %bb302 ]
  %v1_f640 = urem i32 %v3_f630, 256
  store i32 %v1_f640, i32* %ip.global-to-local, align 4
  %v1_f644 = urem i32 %v3_f634, 256
  store i32 %v1_f644, i32* %r2.global-to-local, align 4
  %v1_f648 = and i32 %v0_f628, 8388608
  %v2_f648 = icmp ne i32 %v1_f648, 0
  store i1 %v2_f648, i1* %cpsr_c.global-to-local, align 1
  %v3_f648 = udiv i32 %v0_f628, 16777216
  store i32 %v3_f648, i32* %r0.global-to-local, align 4
  br i1 %v0_f64c, label %dec_label_pc_f628, label %dec_label_pc_f650

dec_label_pc_f650:                                ; preds = %bb303
  %v2_f650 = icmp ugt i32 %v1_f62c, 2
  store i1 %v2_f650, i1* %cpsr_c.global-to-local, align 1
  %v7_f650 = icmp eq i32 %v1_f62c, 3
  store i1 %v7_f650, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f650, label %dec_label_pc_f628, label %dec_label_pc_f658

dec_label_pc_f658:                                ; preds = %dec_label_pc_f650
  %v1_f658 = add nsw i32 %v1_f62c, -15
  store i32 %v1_f658, i32* %r3.global-to-local, align 4
  %v2_f65c = icmp ugt i32 %v1_f62c, 55
  store i1 %v2_f65c, i1* %cpsr_c.global-to-local, align 1
  %v7_f65c = icmp eq i32 %v1_f62c, 56
  store i1 %v7_f65c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f65c, label %dec_label_pc_f628, label %bb304

bb304:                                            ; preds = %dec_label_pc_f658
  %v3_f660 = icmp ne i32 %v1_f658, 0
  store i1 %v3_f660, i1* %cpsr_c.global-to-local, align 1
  %v8_f660 = icmp eq i32 %v1_f658, 1
  store i1 %v8_f660, i1* %cpsr_z.global-to-local, align 1
  %v2_f664 = xor i1 %v3_f660, true
  %v3_f664 = or i1 %v8_f660, %v2_f664
  br i1 %v3_f664, label %dec_label_pc_f628, label %dec_label_pc_f668

dec_label_pc_f668:                                ; preds = %bb304
  %v2_f668 = icmp ugt i32 %v1_f62c, 9
  store i1 %v2_f668, i1* %cpsr_c.global-to-local, align 1
  %v7_f668 = icmp eq i32 %v1_f62c, 10
  store i1 %v7_f668, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f668, label %dec_label_pc_f628, label %dec_label_pc_f670

dec_label_pc_f670:                                ; preds = %dec_label_pc_f668
  %v2_f670 = icmp ugt i32 %v1_f62c, 191
  store i1 %v2_f670, i1* %cpsr_c.global-to-local, align 1
  %v7_f670 = icmp eq i32 %v1_f62c, 192
  store i1 %v7_f670, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f670, label %bb305, label %dec_label_pc_f67c

bb305:                                            ; preds = %dec_label_pc_f670
  %v3_f674 = icmp ugt i32 %v1_f640, 167
  store i1 %v3_f674, i1* %cpsr_c.global-to-local, align 1
  %v8_f674 = icmp eq i32 %v1_f640, 168
  store i1 %v8_f674, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f674, label %dec_label_pc_f628, label %dec_label_pc_f67c

dec_label_pc_f67c:                                ; preds = %dec_label_pc_f670, %bb305
  %v7_f67c = icmp eq i32 %v1_f62c, 172
  %.383 = zext i1 %v7_f67c to i32
  store i32 %.383, i32* %r3.global-to-local, align 4
  %v2_f688 = icmp ugt i32 %v1_f640, 14
  store i1 %v2_f688, i1* %cpsr_c.global-to-local, align 1
  %v7_f688 = icmp eq i32 %v1_f640, 15
  store i1 %v7_f688, i1* %cpsr_z.global-to-local, align 1
  %v2_f68c = xor i1 %v2_f688, true
  %v3_f68c = or i1 %v7_f688, %v2_f68c
  br i1 %v3_f68c, label %.thread9, label %bb308

.thread9:                                         ; preds = %dec_label_pc_f67c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f6a0

bb308:                                            ; preds = %dec_label_pc_f67c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f690 = icmp eq i1 %v7_f67c, false
  store i1 %v2_f690, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f690, label %dec_label_pc_f6a0, label %dec_label_pc_f698

dec_label_pc_f698:                                ; preds = %bb308
  %v2_f698 = icmp ugt i32 %v1_f640, 30
  store i1 %v2_f698, i1* %cpsr_c.global-to-local, align 1
  %v7_f698 = icmp eq i32 %v1_f640, 31
  store i1 %v7_f698, i1* %cpsr_z.global-to-local, align 1
  %v2_f69c = xor i1 %v2_f698, true
  %v3_f69c = or i1 %v7_f698, %v2_f69c
  br i1 %v3_f69c, label %dec_label_pc_f628, label %dec_label_pc_f6a0

dec_label_pc_f6a0:                                ; preds = %.thread9, %dec_label_pc_f698, %bb308
  %v7_f6a0 = icmp eq i32 %v1_f62c, 100
  %.384 = zext i1 %v7_f6a0 to i32
  store i32 %.384, i32* %r3.global-to-local, align 4
  %v2_f6ac = icmp ugt i32 %v1_f640, 62
  store i1 %v2_f6ac, i1* %cpsr_c.global-to-local, align 1
  %v7_f6ac = icmp eq i32 %v1_f640, 63
  store i1 %v7_f6ac, i1* %cpsr_z.global-to-local, align 1
  %v2_f6b0 = xor i1 %v2_f6ac, true
  %v3_f6b0 = or i1 %v7_f6ac, %v2_f6b0
  br i1 %v3_f6b0, label %.thread14, label %bb311

.thread14:                                        ; preds = %dec_label_pc_f6a0
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f6c4

bb311:                                            ; preds = %dec_label_pc_f6a0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f6b4 = icmp eq i1 %v7_f6a0, false
  store i1 %v2_f6b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f6b4, label %dec_label_pc_f6c4, label %dec_label_pc_f6bc

dec_label_pc_f6bc:                                ; preds = %bb311
  %v2_f6bc = icmp ugt i32 %v1_f640, 125
  store i1 %v2_f6bc, i1* %cpsr_c.global-to-local, align 1
  %v7_f6bc = icmp eq i32 %v1_f640, 126
  store i1 %v7_f6bc, i1* %cpsr_z.global-to-local, align 1
  %v2_f6c0 = xor i1 %v2_f6bc, true
  %v3_f6c0 = or i1 %v7_f6bc, %v2_f6c0
  br i1 %v3_f6c0, label %dec_label_pc_f628, label %dec_label_pc_f6c4

dec_label_pc_f6c4:                                ; preds = %.thread14, %dec_label_pc_f6bc, %bb311
  %v2_f6c4 = icmp ugt i32 %v1_f62c, 168
  store i1 %v2_f6c4, i1* %cpsr_c.global-to-local, align 1
  %v7_f6c4 = icmp eq i32 %v1_f62c, 169
  store i1 %v7_f6c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6c4, label %bb312, label %dec_label_pc_f6d0

bb312:                                            ; preds = %dec_label_pc_f6c4
  %v3_f6c8 = icmp eq i32 %v1_f640, 255
  store i1 %v3_f6c8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_f6c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f6c8, label %dec_label_pc_f628, label %dec_label_pc_f6d0

dec_label_pc_f6d0:                                ; preds = %dec_label_pc_f6c4, %bb312
  %v7_f6d0 = icmp eq i32 %v1_f62c, 198
  %.385 = zext i1 %v7_f6d0 to i32
  store i32 %.385, i32* %r3.global-to-local, align 4
  %v2_f6dc = icmp ugt i32 %v1_f640, 16
  store i1 %v2_f6dc, i1* %cpsr_c.global-to-local, align 1
  %v7_f6dc = icmp eq i32 %v1_f640, 17
  store i1 %v7_f6dc, i1* %cpsr_z.global-to-local, align 1
  %v2_f6e0 = xor i1 %v2_f6dc, true
  %v3_f6e0 = or i1 %v7_f6dc, %v2_f6e0
  br i1 %v3_f6e0, label %.thread20, label %bb315

.thread20:                                        ; preds = %dec_label_pc_f6d0
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f6f4

bb315:                                            ; preds = %dec_label_pc_f6d0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f6e4 = icmp eq i1 %v7_f6d0, false
  store i1 %v2_f6e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f6e4, label %dec_label_pc_f6f4, label %dec_label_pc_f6ec

dec_label_pc_f6ec:                                ; preds = %bb315
  %v2_f6ec = icmp ugt i32 %v1_f640, 18
  store i1 %v2_f6ec, i1* %cpsr_c.global-to-local, align 1
  %v7_f6ec = icmp eq i32 %v1_f640, 19
  store i1 %v7_f6ec, i1* %cpsr_z.global-to-local, align 1
  %v2_f6f0 = xor i1 %v2_f6ec, true
  %v3_f6f0 = or i1 %v7_f6ec, %v2_f6f0
  br i1 %v3_f6f0, label %dec_label_pc_f628, label %dec_label_pc_f6f4

dec_label_pc_f6f4:                                ; preds = %.thread20, %dec_label_pc_f6ec, %bb315
  %v2_f6f4 = icmp ugt i32 %v1_f62c, 222
  store i1 %v2_f6f4, i1* %cpsr_c.global-to-local, align 1
  %v7_f6f4 = icmp eq i32 %v1_f62c, 223
  store i1 %v7_f6f4, i1* %cpsr_z.global-to-local, align 1
  %v2_f6f8 = xor i1 %v7_f6f4, true
  %v3_f6f8 = and i1 %v2_f6f4, %v2_f6f8
  br i1 %v3_f6f8, label %dec_label_pc_f628, label %dec_label_pc_f6fc

dec_label_pc_f6fc:                                ; preds = %dec_label_pc_f6f4
  %v7_f6fc = icmp eq i32 %v1_f62c, 106
  %.386 = zext i1 %v7_f6fc to i32
  %v2_f708 = icmp ugt i32 %v1_f640, 185
  store i1 %v2_f708, i1* %cpsr_c.global-to-local, align 1
  %v7_f708 = icmp eq i32 %v1_f640, 186
  store i1 %v7_f708, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f708, label %bb318, label %dec_label_pc_f714

bb318:                                            ; preds = %dec_label_pc_f6fc
  %v2_f6fc = icmp ugt i32 %v1_f62c, 105
  store i1 %v2_f6fc, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_f6fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6fc, label %dec_label_pc_f628, label %dec_label_pc_f714

dec_label_pc_f714:                                ; preds = %dec_label_pc_f6fc, %bb318
  %v2_f714 = icmp ugt i32 %v1_f640, 186
  store i1 %v2_f714, i1* %cpsr_c.global-to-local, align 1
  %v7_f714 = icmp eq i32 %v1_f640, 187
  store i1 %v7_f714, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f714, label %.thread25, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_f714
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f728

.thread25:                                        ; preds = %dec_label_pc_f714
  store i32 %.386, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f720 = icmp eq i1 %v7_f6fc, false
  store i1 %v2_f720, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f720, label %dec_label_pc_f728, label %dec_label_pc_f628

dec_label_pc_f728:                                ; preds = %.thread26, %.thread25
  %v2_f728 = icmp ugt i32 %v1_f640, 184
  store i1 %v2_f728, i1* %cpsr_c.global-to-local, align 1
  %v7_f728 = icmp eq i32 %v1_f640, 185
  store i1 %v7_f728, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f728, label %.thread29, label %.thread30

.thread30:                                        ; preds = %dec_label_pc_f728
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f73c

.thread29:                                        ; preds = %dec_label_pc_f728
  store i32 %.386, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f734 = icmp eq i1 %v7_f6fc, false
  store i1 %v2_f734, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f734, label %dec_label_pc_f73c, label %dec_label_pc_f628

dec_label_pc_f73c:                                ; preds = %.thread30, %.thread29
  %v2_f73c = icmp ugt i32 %v1_f640, 183
  store i1 %v2_f73c, i1* %cpsr_c.global-to-local, align 1
  %v7_f73c = icmp eq i32 %v1_f640, 184
  store i1 %v7_f73c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f73c, label %.thread33, label %.thread34

.thread34:                                        ; preds = %dec_label_pc_f73c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f750

.thread33:                                        ; preds = %dec_label_pc_f73c
  store i32 %.386, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f748 = icmp eq i1 %v7_f6fc, false
  store i1 %v2_f748, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f748, label %dec_label_pc_f750, label %dec_label_pc_f628

dec_label_pc_f750:                                ; preds = %.thread34, %.thread33
  %v2_f750 = icmp ugt i32 %v1_f62c, 149
  store i1 %v2_f750, i1* %cpsr_c.global-to-local, align 1
  %v7_f750 = icmp eq i32 %v1_f62c, 150
  store i1 %v7_f750, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f750, label %bb319, label %dec_label_pc_f75c

bb319:                                            ; preds = %dec_label_pc_f750
  %v3_f754 = icmp ugt i32 %v1_f640, 30
  store i1 %v3_f754, i1* %cpsr_c.global-to-local, align 1
  %v8_f754 = icmp eq i32 %v1_f640, 31
  store i1 %v8_f754, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f754, label %dec_label_pc_f628, label %dec_label_pc_f75c

dec_label_pc_f75c:                                ; preds = %dec_label_pc_f750, %bb319
  %v2_f75c = icmp ugt i32 %v1_f62c, 48
  store i1 %v2_f75c, i1* %cpsr_c.global-to-local, align 1
  %v7_f75c = icmp eq i32 %v1_f62c, 49
  store i1 %v7_f75c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f75c, label %bb320, label %dec_label_pc_f768

bb320:                                            ; preds = %dec_label_pc_f75c
  %v3_f760 = icmp ugt i32 %v1_f640, 50
  store i1 %v3_f760, i1* %cpsr_c.global-to-local, align 1
  %v8_f760 = icmp eq i32 %v1_f640, 51
  store i1 %v8_f760, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f760, label %dec_label_pc_f628, label %dec_label_pc_f768

dec_label_pc_f768:                                ; preds = %dec_label_pc_f75c, %bb320
  %v2_f768 = icmp ugt i32 %v1_f62c, 177
  store i1 %v2_f768, i1* %cpsr_c.global-to-local, align 1
  %v7_f768 = icmp eq i32 %v1_f62c, 178
  store i1 %v7_f768, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f768, label %bb321, label %dec_label_pc_f774

bb321:                                            ; preds = %dec_label_pc_f768
  %v3_f76c = icmp ugt i32 %v1_f640, 61
  store i1 %v3_f76c, i1* %cpsr_c.global-to-local, align 1
  %v8_f76c = icmp eq i32 %v1_f640, 62
  store i1 %v8_f76c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f76c, label %dec_label_pc_f628, label %dec_label_pc_f774

dec_label_pc_f774:                                ; preds = %dec_label_pc_f768, %bb321
  %v2_f774 = icmp ugt i32 %v1_f62c, 159
  store i1 %v2_f774, i1* %cpsr_c.global-to-local, align 1
  %v7_f774 = icmp eq i32 %v1_f62c, 160
  store i1 %v7_f774, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f774, label %bb322, label %dec_label_pc_f780

bb322:                                            ; preds = %dec_label_pc_f774
  %v3_f778 = icmp ugt i32 %v1_f640, 12
  store i1 %v3_f778, i1* %cpsr_c.global-to-local, align 1
  %v8_f778 = icmp eq i32 %v1_f640, 13
  store i1 %v8_f778, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f778, label %dec_label_pc_f628, label %dec_label_pc_f780

dec_label_pc_f780:                                ; preds = %dec_label_pc_f774, %bb322
  %v1_f780 = add nsw i32 %v1_f62c, -6
  store i32 %v1_f780, i32* %r3.global-to-local, align 4
  %v2_f784 = icmp ugt i32 %v1_f62c, 10
  store i1 %v2_f784, i1* %cpsr_c.global-to-local, align 1
  %v7_f784 = icmp eq i32 %v1_f62c, 11
  store i1 %v7_f784, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f784, label %dec_label_pc_f628, label %bb323

bb323:                                            ; preds = %dec_label_pc_f780
  %v3_f788 = icmp ne i32 %v1_f780, 0
  store i1 %v3_f788, i1* %cpsr_c.global-to-local, align 1
  %v8_f788 = icmp eq i32 %v1_f780, 1
  store i1 %v8_f788, i1* %cpsr_z.global-to-local, align 1
  %v2_f78c = xor i1 %v3_f788, true
  %v3_f78c = or i1 %v8_f788, %v2_f78c
  br i1 %v3_f78c, label %dec_label_pc_f628, label %dec_label_pc_f790

dec_label_pc_f790:                                ; preds = %bb323
  %v2_f790 = icmp ugt i32 %v1_f62c, 21
  store i1 %v2_f790, i1* %cpsr_c.global-to-local, align 1
  %v7_f790 = icmp eq i32 %v1_f62c, 22
  store i1 %v7_f790, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f790, label %dec_label_pc_f628, label %bb324

bb324:                                            ; preds = %dec_label_pc_f790
  %v3_f794 = icmp ugt i32 %v1_f62c, 20
  store i1 %v3_f794, i1* %cpsr_c.global-to-local, align 1
  %v8_f794 = icmp eq i32 %v1_f62c, 21
  store i1 %v8_f794, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f794, label %dec_label_pc_f628, label %dec_label_pc_f79c

dec_label_pc_f79c:                                ; preds = %bb324
  %v2_f79c = icmp ugt i32 %v1_f62c, 27
  store i1 %v2_f79c, i1* %cpsr_c.global-to-local, align 1
  %v7_f79c = icmp eq i32 %v1_f62c, 28
  store i1 %v7_f79c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f79c, label %dec_label_pc_f628, label %bb325

bb325:                                            ; preds = %dec_label_pc_f79c
  %v3_f7a0 = icmp ugt i32 %v1_f62c, 25
  store i1 %v3_f7a0, i1* %cpsr_c.global-to-local, align 1
  %v8_f7a0 = icmp eq i32 %v1_f62c, 26
  store i1 %v8_f7a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f7a0, label %dec_label_pc_f628, label %dec_label_pc_f7a8

dec_label_pc_f7a8:                                ; preds = %bb325
  %v2_f7a8 = icmp ugt i32 %v1_f62c, 29
  store i1 %v2_f7a8, i1* %cpsr_c.global-to-local, align 1
  %v7_f7a8 = icmp eq i32 %v1_f62c, 30
  store i1 %v7_f7a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7a8, label %dec_label_pc_f628, label %bb326

bb326:                                            ; preds = %dec_label_pc_f7a8
  %v3_f7ac = icmp ugt i32 %v1_f62c, 28
  store i1 %v3_f7ac, i1* %cpsr_c.global-to-local, align 1
  %v8_f7ac = icmp eq i32 %v1_f62c, 29
  store i1 %v8_f7ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f7ac, label %dec_label_pc_f628, label %dec_label_pc_f7b4

dec_label_pc_f7b4:                                ; preds = %bb326
  %v2_f7b4 = icmp ugt i32 %v1_f62c, 54
  store i1 %v2_f7b4, i1* %cpsr_c.global-to-local, align 1
  %v7_f7b4 = icmp eq i32 %v1_f62c, 55
  store i1 %v7_f7b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7b4, label %dec_label_pc_f628, label %bb327

bb327:                                            ; preds = %dec_label_pc_f7b4
  %v3_f7b8 = icmp ugt i32 %v1_f62c, 32
  store i1 %v3_f7b8, i1* %cpsr_c.global-to-local, align 1
  %v8_f7b8 = icmp eq i32 %v1_f62c, 33
  store i1 %v8_f7b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f7b8, label %dec_label_pc_f628, label %dec_label_pc_f7c0

dec_label_pc_f7c0:                                ; preds = %bb327
  %v2_f7c0 = icmp ugt i32 %v1_f62c, 214
  store i1 %v2_f7c0, i1* %cpsr_c.global-to-local, align 1
  %v7_f7c0 = icmp eq i32 %v1_f62c, 215
  store i1 %v7_f7c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7c0, label %.thread49, label %bb328

bb328:                                            ; preds = %dec_label_pc_f7c0
  %v3_f7c4 = icmp ugt i32 %v1_f62c, 213
  store i1 %v3_f7c4, i1* %cpsr_c.global-to-local, align 1
  %v8_f7c4 = icmp eq i32 %v1_f62c, 214
  store i1 %v8_f7c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f7c4, label %bb329, label %dec_label_pc_f7d4

.thread49:                                        ; preds = %dec_label_pc_f7c0
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_f628

bb329:                                            ; preds = %bb328
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_f628

dec_label_pc_f7d4:                                ; preds = %bb328
  store i32 0, i32* @r4, align 4
  %v5_f7e0 = call i32 @llvm.bswap.i32(i32 %v0_f628)
  store i32 %v5_f7e0, i32* %r3.global-to-local, align 4
  %tmp330 = and i32 %v0_f628, 65280
  %tmp331 = call i32 @llvm.bswap.i32(i32 %tmp330)
  %tmp332 = and i32 %v0_f628, 16711680
  %tmp333 = call i32 @llvm.bswap.i32(i32 %tmp332)
  %v3_f7ec = mul nuw i32 %v3_f648, 16777216
  %v3_f7f0 = udiv i32 %tmp331, 256
  %v4_f7f4 = mul nuw nsw i32 %tmp333, 256
  %tmp334 = and i32 %v0_f628, 32768
  %v3_f7f8 = icmp ne i32 %tmp334, 0
  store i1 %v3_f7f8, i1* %cpsr_c.global-to-local, align 1
  %v4_f7f8 = udiv i32 %v5_f7e0, 16777216
  store i32 ptrtoint (i8** @global_var_1c8c4.146 to i32), i32* @r0, align 4
  %v5_f7f8 = or i32 %v4_f7f8, %v3_f7ec
  %v5_f7f4 = or i32 %v5_f7f8, %v4_f7f4
  %v2_f800 = or i32 %v5_f7f4, %v3_f7f0
  store i32 %v2_f800, i32* %r2.global-to-local, align 4
  %v5_f804 = trunc i32 %v4_f7f8 to i8
  store i8 %v5_f804, i8* @global_var_1c8d4.179, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1c8ce.180 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1c8cf.181 to i8*), align 4
  %v3_f814 = call i32 @function_d0b8(i32 ptrtoint (i8** @global_var_1c8c4.146 to i32), i32 20)
  %v4_f814 = trunc i32 %v3_f814 to i8
  store i32 ptrtoint (i8** @global_var_1c8c4.146 to i32), i32* @lr, align 4
  %v2_f81c = and i32 %v3_f814, 128
  %v3_f81c = icmp ne i32 %v2_f81c, 0
  store i1 %v3_f81c, i1* %cpsr_c.global-to-local, align 1
  %v4_f81c = sdiv i32 %v3_f814, 256
  store i32 %v4_f81c, i32* %r2.global-to-local, align 4
  store i32 %v3_f814, i32* %r3.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v1_f828 = trunc i32 %v4_f81c to i8
  store i8 %v1_f828, i8* bitcast (i32* @global_var_1c8cf.181 to i8*), align 4
  store i8 %v4_f814, i8* bitcast (i32* @global_var_1c8ce.180 to i8*), align 4
  %v3_f830 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f830, i32* %r0.global-to-local, align 4
  %v4_f834 = call i32 @function_117b4(i32 %v3_f830, i32 10)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f838 = icmp eq i32 %v4_f834, 0
  store i1 %v2_f838, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1c8c4.146 to i32), i32* %r0.global-to-local, align 4
  br i1 %v2_f838, label %bb336, label %bb335

bb335:                                            ; preds = %dec_label_pc_f7d4
  store i32 ptrtoint (i32* @global_var_1c8d8.150 to i32), i32* %r2.global-to-local, align 4
  %v4_f84c = load i8, i8* @global_var_1c8d4.179, align 1
  %v5_f84c = sext i8 %v4_f84c to i32
  store i32 %v5_f84c, i32* %ip.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  br label %.thread63

bb336:                                            ; preds = %dec_label_pc_f7d4
  store i32 ptrtoint (i32* @global_var_1c8d8.150 to i32), i32* %r1.global-to-local, align 4
  %v4_f84c52 = load i8, i8* @global_var_1c8d4.179, align 1
  %v5_f84c53 = sext i8 %v4_f84c52 to i32
  store i32 %v5_f84c53, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i8 9, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1c8d8.150 to i32), i32 2) to i8*), align 2
  %v0_f860.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f860.pr.pre, label %.thread61, label %.thread63

.thread61:                                        ; preds = %bb336
  %v1_f860 = load i32, i32* %r2.global-to-local, align 4
  %v2_f860 = trunc i32 %v1_f860 to i8
  %v3_f860 = load i32, i32* %r1.global-to-local, align 4
  %v4_f860 = add i32 %v3_f860, 3
  %v5_f860 = inttoptr i32 %v4_f860 to i8*
  store i8 %v2_f860, i8* %v5_f860, align 1
  %v0_f864.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f864.pr.pr, label %.thread64, label %.thread63

.thread63:                                        ; preds = %bb335, %bb336, %.thread61
  %v1_f864 = load i32, i32* @r4, align 4
  %v2_f864 = trunc i32 %v1_f864 to i8
  %v3_f864 = load i32, i32* %r2.global-to-local, align 4
  %v4_f864 = add i32 %v3_f864, 2
  %v5_f864 = inttoptr i32 %v4_f864 to i8*
  store i8 %v2_f864, i8* %v5_f864, align 1
  %v0_f868.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f868.pr, label %.thread64, label %bb337

bb337:                                            ; preds = %.thread63
  %v1_f868 = load i32, i32* %r3.global-to-local, align 4
  %v2_f868 = trunc i32 %v1_f868 to i8
  %v3_f868 = load i32, i32* %r2.global-to-local, align 4
  %v4_f868 = add i32 %v3_f868, 3
  %v5_f868 = inttoptr i32 %v4_f868 to i8*
  store i8 %v2_f868, i8* %v5_f868, align 1
  br label %.thread64

.thread64:                                        ; preds = %.thread61, %.thread63, %bb337
  %v0_f86c = load i32, i32* %ip.global-to-local, align 4
  %v4_f86c = trunc i32 %v0_f86c to i8
  store i8 %v4_f86c, i8* @global_var_1c8dc.182, align 4
  store i32 ptrtoint (i32* @global_var_1c8d8.150 to i32), i32* @r1, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_f87c = load i32, i32* %sl.global-to-local, align 4
  %v1_f87c = trunc i32 %v0_f87c to i8
  store i8 %v1_f87c, i8* bitcast (i32* @global_var_1c8e8.183 to i8*), align 4
  store i8 %v1_f87c, i8* bitcast (i32* @global_var_1c8e9.184 to i8*), align 4
  %v5_f884 = call i32 @function_d114(i32 ptrtoint (i8** @global_var_1c8c4.146 to i32), i32 ptrtoint (i32* @global_var_1c8d8.150 to i32), i32 5120, i32 20)
  %sext = mul i32 %v5_f884, 16777216
  %v1_f88c = sdiv i32 %sext, 16777216
  %v3_f894 = ashr i32 %sext, 31
  %v2_f898 = load i32, i32* @global_var_1c8d8.150, align 4
  %v1_f8a0 = trunc i32 %v3_f894 to i8
  store i8 %v1_f8a0, i8* bitcast (i32* @global_var_1c8e9.184 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_f8b4 = load i8, i8* @global_var_1c8d4.179, align 1
  %v4_f8b4 = sext i8 %v3_f8b4 to i32
  store i32 %v4_f8b4, i32* @r4, align 4
  %v2_f8b8 = load i32, i32* @global_var_1c95c.144, align 4
  store i32 %v2_f8b8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c8d8.150 to i32), i32* %ip.global-to-local, align 4
  %v1_f8c8 = and i32 %v2_f898, 8388608
  %v2_f8c8 = icmp ne i32 %v1_f8c8, 0
  store i1 %v2_f8c8, i1* %cpsr_c.global-to-local, align 1
  %v1_f8d0 = trunc i32 %v1_f88c to i8
  store i8 %v1_f8d0, i8* bitcast (i32* @global_var_1c8e8.183 to i8*), align 4
  store i32 ptrtoint (i8** @global_var_1c8c4.146 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v8_f8f8 = call i32 @function_121e8(i32 %v2_f8b8, i32* bitcast (i8** @global_var_1c8c4.146 to i32*), i32 40, i32 16384, i32 %v2_f8e0, i32 16)
  store i32 %v8_f8f8, i32* %r0.global-to-local, align 4
  %v3_f8fc = load i32, i32* %stack_var_-52, align 4
  %v1_f900 = add i32 %v3_f8fc, 1
  store i32 %v1_f900, i32* %r3.global-to-local, align 4
  %v3_f904 = icmp ugt i32 %v1_f900, 483
  store i1 %v3_f904, i1* %cpsr_c.global-to-local, align 1
  %v8_f904 = icmp eq i32 %v1_f900, 484
  store i1 %v8_f904, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f900, i32* %stack_var_-52, align 4
  %v5_f90c = icmp slt i32 %v1_f900, 484
  br i1 %v5_f90c, label %.thread64.dec_label_pc_f5f8_crit_edge, label %dec_label_pc_f910

.thread64.dec_label_pc_f5f8_crit_edge:            ; preds = %.thread64
  %v0_f5f8.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_f5f8

dec_label_pc_f910:                                ; preds = %.thread64
  %v0_f910 = load i32, i32* @r8, align 4
  br label %dec_label_pc_f914

dec_label_pc_f914:                                ; preds = %dec_label_pc_f5d8, %dec_label_pc_f910
  %stack_var_-1872.1 = phi i32 [ %stack_var_-1872.0, %dec_label_pc_f5d8 ], [ %v0_f910, %dec_label_pc_f910 ]
  %v0_f914 = call i32 @function_11f08()
  store i32 %v0_f914, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v2_f928 = inttoptr i32 %v0_f914 to i32*
  %v6_f950 = inttoptr i32 %v0_f98c to i32*
  %v1_f97c = add i32 %v0_f98c, 16
  %v2_f97c = inttoptr i32 %v1_f97c to i32*
  %v4_f998 = ptrtoint i8* %stack_var_-1884.0 to i32
  %v1_f9a0 = add i32 %v4_f998, 1
  %v2_f9a0 = inttoptr i32 %v1_f9a0 to i8*
  %v1_f9c4 = add i32 %v4_f998, 3
  %v2_f9c4 = inttoptr i32 %v1_f9c4 to i8*
  %v1_f9c8 = add i32 %v4_f998, 2
  %v2_f9c8 = inttoptr i32 %v1_f9c8 to i8*
  %v4_f9d0 = sext i8 %stack_var_-1876.0 to i32
  %v1_faac = bitcast i8* %stack_var_-1884.0 to i32*
  %v1_f98c = add i32 %v0_f98c, 9
  %v2_f98c = inttoptr i32 %v1_f98c to i8*
  %v1_f9dc = add i32 %v4_f998, 13
  %v2_f9dc = inttoptr i32 %v1_f9dc to i8*
  %v1_fa00 = add i32 %v4_f998, 8
  %v2_fa00 = inttoptr i32 %v1_fa00 to i32*
  %v1_fa40 = add i32 %v0_f98c, 12
  %v2_fa40 = inttoptr i32 %v1_fa40 to i32*
  br label %dec_label_pc_f920

dec_label_pc_f920:                                ; preds = %dec_label_pc_fa00, %dec_label_pc_f9f8, %dec_label_pc_f9f0, %dec_label_pc_f9c0, %dec_label_pc_f9b0, %dec_label_pc_f98c, %dec_label_pc_f974, %dec_label_pc_f9e8, %dec_label_pc_f9dc, %dec_label_pc_f96c, %dec_label_pc_faa4, %dec_label_pc_f914
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %v2_f928, align 4
  %v0_f930 = load i32, i32* %r2.global-to-local, align 4
  %v2_f934 = load i32, i32* @global_var_1c95c.144, align 4
  store i32 %v2_f934, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_f93c = add i32 %v0_f930, 1514
  store i32 %v1_f93c, i32* %r2.global-to-local, align 4
  store i32 %v0_f98c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v7_f950 = call i32 @function_12188(i32 %v2_f934, i32* %v6_f950, i32 %v1_f93c, i32 16384, i32 0, i32 0)
  store i32 %v7_f950, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f954 = icmp eq i32 %v7_f950, 0
  store i1 %v2_f954, i1* %cpsr_z.global-to-local, align 1
  %tmp338 = icmp slt i32 %v7_f950, 1
  br i1 %tmp338, label %dec_label_pc_fac4, label %dec_label_pc_f95c

dec_label_pc_f95c:                                ; preds = %dec_label_pc_f920
  %v2_f960 = load i32, i32* %v2_f928, align 4
  store i32 %v2_f960, i32* %r3.global-to-local, align 4
  %v2_f964 = icmp ugt i32 %v2_f960, 10
  store i1 %v2_f964, i1* %cpsr_c.global-to-local, align 1
  %v7_f964 = icmp eq i32 %v2_f960, 11
  store i1 %v7_f964, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f964, label %dec_label_pc_fac4, label %dec_label_pc_f96c

dec_label_pc_f96c:                                ; preds = %dec_label_pc_f95c
  %v2_f96c = icmp ugt i32 %v7_f950, 38
  store i1 %v2_f96c, i1* %cpsr_c.global-to-local, align 1
  %v7_f96c = icmp eq i32 %v7_f950, 39
  store i1 %v7_f96c, i1* %cpsr_z.global-to-local, align 1
  %v2_f970 = xor i1 %v2_f96c, true
  %v3_f970 = or i1 %v7_f96c, %v2_f970
  br i1 %v3_f970, label %dec_label_pc_f920, label %dec_label_pc_f974

dec_label_pc_f974:                                ; preds = %dec_label_pc_f96c
  store i32 %v0_f98c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c93c.50 to i32), i32* %ip.global-to-local, align 4
  %v3_f97c = load i32, i32* %v2_f97c, align 4
  store i32 %v3_f97c, i32* %r2.global-to-local, align 4
  %v2_f980 = load i32, i32* @global_var_1c93c.50, align 4
  store i32 %v2_f980, i32* %r3.global-to-local, align 4
  %v3_f984 = icmp uge i32 %v3_f97c, %v2_f980
  store i1 %v3_f984, i1* %cpsr_c.global-to-local, align 1
  %v9_f984 = icmp eq i32 %v3_f97c, %v2_f980
  store i1 %v9_f984, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f984, label %dec_label_pc_f98c, label %dec_label_pc_f920

dec_label_pc_f98c:                                ; preds = %dec_label_pc_f974
  %v3_f98c = load i8, i8* %v2_f98c, align 1
  %v4_f98c = zext i8 %v3_f98c to i32
  store i32 %v4_f98c, i32* %r3.global-to-local, align 4
  %v2_f990 = icmp ugt i8 %v3_f98c, 5
  store i1 %v2_f990, i1* %cpsr_c.global-to-local, align 1
  %v7_f990 = icmp eq i8 %v3_f98c, 6
  store i1 %v7_f990, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f990, label %dec_label_pc_f998, label %dec_label_pc_f920

dec_label_pc_f998:                                ; preds = %dec_label_pc_f98c
  %v2_f99c = load i8, i8* %stack_var_-1884.0, align 1
  %v3_f99c = zext i8 %v2_f99c to i32
  store i32 %v3_f99c, i32* %r2.global-to-local, align 4
  %v3_f9a0 = load i8, i8* %v2_f9a0, align 1
  %v4_f9a0 = zext i8 %v3_f9a0 to i32
  store i32 %v4_f9a0, i32* %r3.global-to-local, align 4
  %v4_f9a4 = mul nuw nsw i32 %v4_f9a0, 256
  %v5_f9a4 = or i32 %v4_f9a4, %v3_f99c
  store i32 %v5_f9a4, i32* %r2.global-to-local, align 4
  %v2_f9a8 = icmp ugt i32 %v5_f9a4, 5887
  store i1 %v2_f9a8, i1* %cpsr_c.global-to-local, align 1
  %v7_f9a8 = icmp eq i32 %v5_f9a4, 5888
  store i1 %v7_f9a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9a8, label %dec_label_pc_f9c0, label %dec_label_pc_f9b0

dec_label_pc_f9b0:                                ; preds = %dec_label_pc_f998
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_f9b8 = icmp ugt i32 %v5_f9a4, 4872
  store i1 %v3_f9b8, i1* %cpsr_c.global-to-local, align 1
  %v9_f9b8 = icmp eq i32 %v5_f9a4, 4873
  store i1 %v9_f9b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f9b8, label %dec_label_pc_f9c0, label %dec_label_pc_f920

dec_label_pc_f9c0:                                ; preds = %dec_label_pc_f9b0, %dec_label_pc_f998
  store i32 %v4_f998, i32* %r1.global-to-local, align 4
  %v3_f9c4 = load i8, i8* %v2_f9c4, align 1
  %v4_f9c4 = zext i8 %v3_f9c4 to i32
  store i32 %v4_f9c4, i32* %r2.global-to-local, align 4
  %v3_f9c8 = load i8, i8* %v2_f9c8, align 1
  %v4_f9c8 = zext i8 %v3_f9c8 to i32
  %v4_f9cc = mul nuw nsw i32 %v4_f9c4, 256
  %v5_f9cc = or i32 %v4_f9c8, %v4_f9cc
  store i32 %v5_f9cc, i32* %r3.global-to-local, align 4
  store i32 %v4_f9d0, i32* %r2.global-to-local, align 4
  %v3_f9d4 = icmp uge i32 %v5_f9cc, %v4_f9d0
  store i1 %v3_f9d4, i1* %cpsr_c.global-to-local, align 1
  %v9_f9d4 = icmp eq i32 %v5_f9cc, %v4_f9d0
  store i1 %v9_f9d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f9d4, label %dec_label_pc_f9dc, label %dec_label_pc_f920

dec_label_pc_f9dc:                                ; preds = %dec_label_pc_f9c0
  %v3_f9dc = load i8, i8* %v2_f9dc, align 1
  %v4_f9dc = zext i8 %v3_f9dc to i32
  store i32 %v4_f9dc, i32* %r3.global-to-local, align 4
  %v1_f9e0 = and i32 %v4_f9dc, 2
  %v2_f9e0 = icmp eq i32 %v1_f9e0, 0
  store i1 %v2_f9e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f9e0, label %dec_label_pc_f920, label %dec_label_pc_f9e8

dec_label_pc_f9e8:                                ; preds = %dec_label_pc_f9dc
  %v1_f9e8 = and i32 %v4_f9dc, 16
  %v2_f9e8 = icmp eq i32 %v1_f9e8, 0
  store i1 %v2_f9e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f9e8, label %dec_label_pc_f920, label %dec_label_pc_f9f0

dec_label_pc_f9f0:                                ; preds = %dec_label_pc_f9e8
  %v1_f9f0 = and i32 %v4_f9dc, 4
  %v2_f9f0 = icmp eq i32 %v1_f9f0, 0
  store i1 %v2_f9f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f9f0, label %dec_label_pc_f9f8, label %dec_label_pc_f920

dec_label_pc_f9f8:                                ; preds = %dec_label_pc_f9f0
  %tmp495 = urem i8 %v3_f9dc, 2
  %v2_f9f8 = icmp eq i8 %tmp495, 0
  store i1 %v2_f9f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f9f8, label %dec_label_pc_fa00, label %dec_label_pc_f920

dec_label_pc_fa00:                                ; preds = %dec_label_pc_f9f8
  %v3_fa00 = load i32, i32* %v2_fa00, align 4
  %v2_fa1c = call i32 @llvm.bswap.i32(i32 %v3_fa00)
  %v1_fa20 = add i32 %v2_fa1c, -1
  %v1_fa24 = udiv i32 %v1_fa20, 256
  %v3_fa28 = and i32 %v1_fa24, 65280
  %v1_fa2c = and i32 %v1_fa20, 65280
  store i32 %v1_fa2c, i32* %r2.global-to-local, align 4
  %v3_fa30 = mul i32 %v1_fa20, 16777216
  %v4_fa34 = udiv i32 %v1_fa20, 16777216
  %v5_fa34 = or i32 %v3_fa28, %v4_fa34
  store i32 %v5_fa34, i32* %r1.global-to-local, align 4
  store i32 %v0_f98c, i32* %r3.global-to-local, align 4
  %v4_fa3c = mul nuw nsw i32 %v1_fa2c, 256
  %v5_fa3c = or i32 %v4_fa3c, %v3_fa30
  store i32 %v5_fa3c, i32* %r0.global-to-local, align 4
  %v3_fa40 = load i32, i32* %v2_fa40, align 4
  store i32 %v3_fa40, i32* %r2.global-to-local, align 4
  %v2_fa44 = call i32 @llvm.bswap.i32(i32 %v1_fa20)
  store i32 %v2_fa44, i32* %ip.global-to-local, align 4
  %v3_fa48 = icmp uge i32 %v2_fa44, %v3_fa40
  store i1 %v3_fa48, i1* %cpsr_c.global-to-local, align 1
  %v9_fa48 = icmp eq i32 %v2_fa44, %v3_fa40
  store i1 %v9_fa48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fa48, label %dec_label_pc_fa50, label %dec_label_pc_f920

dec_label_pc_fa50:                                ; preds = %dec_label_pc_fa00
  %v0_fa50 = load i32, i32* @r4, align 4
  %v3_fa50 = icmp ugt i32 %v0_fa50, 355
  store i1 %v3_fa50, i1* %cpsr_c.global-to-local, align 1
  %v8_fa50 = icmp eq i32 %v0_fa50, 356
  store i1 %v8_fa50, i1* %cpsr_z.global-to-local, align 1
  %v6_fa54 = icmp slt i32 %v0_fa50, 356
  br i1 %v6_fa54, label %dec_label_pc_fa58, label %dec_label_pc_fac4

dec_label_pc_fa58:                                ; preds = %dec_label_pc_fa50
  %v2_fa68 = load i32, i32* @global_var_1c958.142, align 4
  store i32 %v2_fa68, i32* %r1.global-to-local, align 4
  %v3_fa6c = mul i32 %v0_fa50, 388
  store i32 %v3_fa6c, i32* %r3.global-to-local, align 4
  %v2_fa70 = add i32 %v2_fa68, %v3_fa6c
  store i32 %v2_fa70, i32* @r0, align 4
  %v1_fa74 = add i32 %v2_fa70, 12
  %v2_fa74 = inttoptr i32 %v1_fa74 to i32*
  %v3_fa74 = load i32, i32* %v2_fa74, align 4
  store i32 %v3_fa74, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fa78 = icmp eq i32 %v3_fa74, 0
  store i1 %v2_fa78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fa78, label %dec_label_pc_faa4, label %dec_label_pc_fa84.preheader

dec_label_pc_fa84.preheader:                      ; preds = %dec_label_pc_fa58
  %v2_fa7c = add i32 %v2_fa70, 388
  store i32 %v2_fa7c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fa84

dec_label_pc_fa84:                                ; preds = %dec_label_pc_fa84.preheader, %dec_label_pc_fa90
  %v0_fa90 = phi i32 [ %v2_fa7c, %dec_label_pc_fa84.preheader ], [ %v1_fa9c, %dec_label_pc_fa90 ]
  %v0_fa84 = phi i32 [ %v0_fa50, %dec_label_pc_fa84.preheader ], [ %v1_fa84, %dec_label_pc_fa90 ]
  %v1_fa84 = add i32 %v0_fa84, 1
  store i32 %v1_fa84, i32* @r4, align 4
  %v7_fa88 = icmp eq i32 %v1_fa84, 356
  br i1 %v7_fa88, label %dec_label_pc_fac4.loopexit, label %dec_label_pc_fa90

dec_label_pc_fa90:                                ; preds = %dec_label_pc_fa84
  store i32 %v0_fa90, i32* @r0, align 4
  %v1_fa94 = add i32 %v0_fa90, 12
  %v2_fa94 = inttoptr i32 %v1_fa94 to i32*
  %v3_fa94 = load i32, i32* %v2_fa94, align 4
  %v2_fa98 = icmp eq i32 %v3_fa94, 0
  %v1_fa9c = add i32 %v0_fa90, 388
  store i32 %v1_fa9c, i32* %r3.global-to-local, align 4
  br i1 %v2_fa98, label %dec_label_pc_faa4.loopexit, label %dec_label_pc_fa84

dec_label_pc_faa4.loopexit:                       ; preds = %dec_label_pc_fa90
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_faa4

dec_label_pc_faa4:                                ; preds = %dec_label_pc_faa4.loopexit, %dec_label_pc_fa58
  %v1_faa4 = phi i32 [ %v0_fa90, %dec_label_pc_faa4.loopexit ], [ %v2_fa70, %dec_label_pc_fa58 ]
  %v2_faa4 = add i32 %v1_faa4, 16
  %v3_faa4 = inttoptr i32 %v2_faa4 to i32*
  store i32 %v3_fa40, i32* %v3_faa4, align 4
  store i32 %v4_f998, i32* %r1.global-to-local, align 4
  %v2_faac = load i32, i32* %v1_faac, align 4
  store i32 %v2_faac, i32* %r2.global-to-local, align 4
  %v1_fab0 = and i32 %v2_faac, 128
  %v2_fab0 = icmp ne i32 %v1_fab0, 0
  store i1 %v2_fab0, i1* %cpsr_c.global-to-local, align 1
  %v3_fab0 = sdiv i32 %v2_faac, 256
  store i32 %v3_fab0, i32* %r3.global-to-local, align 4
  %v1_fab4 = trunc i32 %v3_fab0 to i8
  %v2_fab4 = load i32, i32* @r0, align 4
  %v3_fab4 = add i32 %v2_fab4, 21
  %v4_fab4 = inttoptr i32 %v3_fab4 to i8*
  store i8 %v1_fab4, i8* %v4_fab4, align 1
  %v0_fab8 = load i32, i32* %r2.global-to-local, align 4
  %v1_fab8 = trunc i32 %v0_fab8 to i8
  %v2_fab8 = load i32, i32* @r0, align 4
  %v3_fab8 = add i32 %v2_fab8, 20
  %v4_fab8 = inttoptr i32 %v3_fab8 to i8*
  store i8 %v1_fab8, i8* %v4_fab8, align 1
  %v0_fabc = call i32 @function_f0cc()
  store i32 %v0_fabc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f920

dec_label_pc_fac4.loopexit:                       ; preds = %dec_label_pc_fa84
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fac4

dec_label_pc_fac4:                                ; preds = %dec_label_pc_fa50, %dec_label_pc_f95c, %dec_label_pc_f920, %dec_label_pc_fac4.loopexit
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1672, i32* %ip.global-to-local, align 4
  %v2_fadc444 = load i32, i32* @sp, align 4
  %v3_fadc445 = add i32 %v2_fadc444, 1672
  %v4_fadc446 = inttoptr i32 %v3_fadc445 to i32*
  store i32 0, i32* %v4_fadc446, align 4
  br label %dec_label_pc_facc.dec_label_pc_facc_crit_edge

dec_label_pc_facc.dec_label_pc_facc_crit_edge:    ; preds = %dec_label_pc_fac4, %dec_label_pc_facc.dec_label_pc_facc_crit_edge
  %v0_facc.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_fadc.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_fad0 = add i32 %v0_facc.pre, 4
  store i32 %v1_fad0, i32* %r3.global-to-local, align 4
  %v1_fad4 = add i32 %v0_facc.pre, 1672
  store i32 %v1_fad4, i32* %ip.global-to-local, align 4
  %v7_fad8 = icmp eq i32 %v1_fad0, 128
  %v2_fadc = load i32, i32* @sp, align 4
  %v3_fadc = add i32 %v2_fadc, %v1_fad4
  %v4_fadc = inttoptr i32 %v3_fadc to i32*
  store i32 %v0_fadc.pre, i32* %v4_fadc, align 4
  br i1 %v7_fad8, label %dec_label_pc_fae4, label %dec_label_pc_facc.dec_label_pc_facc_crit_edge

dec_label_pc_fae4:                                ; preds = %dec_label_pc_facc.dec_label_pc_facc_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_fae4 = load i32, i32* %r2.global-to-local, align 4
  %v1_faec438 = add i32 %v0_fae4, 4
  store i32 %v1_faec438, i32* %r3.global-to-local, align 4
  %v1_faf0439 = add i32 %v0_fae4, 1544
  %v7_faf4440 = icmp eq i32 %v1_faec438, 128
  %v2_faf8441 = load i32, i32* @sp, align 4
  %v3_faf8442 = add i32 %v2_faf8441, %v1_faf0439
  %v4_faf8443 = inttoptr i32 %v3_faf8442 to i32*
  store i32 %v0_fae4, i32* %v4_faf8443, align 4
  br i1 %v7_faf4440, label %dec_label_pc_fb00, label %dec_label_pc_fae8.dec_label_pc_fae8_crit_edge

dec_label_pc_fae8.dec_label_pc_fae8_crit_edge:    ; preds = %dec_label_pc_fae4, %dec_label_pc_fae8.dec_label_pc_fae8_crit_edge
  %v0_fae8.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_faf8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_faec = add i32 %v0_fae8.pre, 4
  store i32 %v1_faec, i32* %r3.global-to-local, align 4
  %v1_faf0 = add i32 %v0_fae8.pre, 1544
  %v7_faf4 = icmp eq i32 %v1_faec, 128
  %v2_faf8 = load i32, i32* @sp, align 4
  %v3_faf8 = add i32 %v2_faf8, %v1_faf0
  %v4_faf8 = inttoptr i32 %v3_faf8 to i32*
  store i32 %v0_faf8.pre, i32* %v4_faf8, align 4
  br i1 %v7_faf4, label %dec_label_pc_fb00, label %dec_label_pc_fae8.dec_label_pc_fae8_crit_edge

dec_label_pc_fb00:                                ; preds = %dec_label_pc_fae8.dec_label_pc_fae8_crit_edge, %dec_label_pc_fae4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_fb00 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_fb00, i32* @r6, align 4
  store i32 %v0_fb00, i32* @r5, align 4
  store i32 %v0_fb00, i32* @r7, align 4
  store i32 %v0_fb00, i32* %stack_var_-52, align 4
  br label %dec_label_pc_fb78

dec_label_pc_fb14:                                ; preds = %dec_label_pc_fba4, %dec_label_pc_fb78
  %storemerge250 = phi i32 [ 30, %dec_label_pc_fb78 ], [ 5, %dec_label_pc_fba4 ]
  store i32 %storemerge250, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c8f4.130 to i32), i32* %r2.global-to-local, align 4
  %v2_fb18 = load i32, i32* @global_var_1c8f4.130, align 4
  store i32 %v2_fb18, i32* %r3.global-to-local, align 4
  %v1_fb1c = add i32 %v2_fb90, 8
  %v2_fb1c = inttoptr i32 %v1_fb1c to i32*
  %v3_fb1c = load i32, i32* %v2_fb1c, align 4
  store i32 %v3_fb1c, i32* %r2.global-to-local, align 4
  %v2_fb20 = sub i32 %v2_fb18, %v3_fb1c
  store i32 %v2_fb20, i32* %r3.global-to-local, align 4
  %v3_fb24 = icmp uge i32 %v2_fb20, %storemerge250
  store i1 %v3_fb24, i1* %cpsr_c.global-to-local, align 1
  %v9_fb24 = icmp eq i32 %v2_fb20, %storemerge250
  store i1 %v9_fb24, i1* %cpsr_z.global-to-local, align 1
  %v2_fb28 = xor i1 %v9_fb24, true
  %v3_fb28 = and i1 %v3_fb24, %v2_fb28
  br i1 %v3_fb28, label %dec_label_pc_fbf8, label %dec_label_pc_fb2c

dec_label_pc_fb2c:                                ; preds = %dec_label_pc_fb14
  store i1 %v2_fb98, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_fb98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb98, label %dec_label_pc_fbc8, label %dec_label_pc_fb34

dec_label_pc_fb34:                                ; preds = %dec_label_pc_fb2c
  %v1_fb34 = add i32 %v2_fb90, 4
  %v2_fb34 = inttoptr i32 %v1_fb34 to i32*
  %v3_fb34 = load i32, i32* %v2_fb34, align 4
  store i32 %v3_fb34, i32* %ip.global-to-local, align 4
  %v3_fb38 = udiv i32 %v3_fb34, 32
  %v2_fb3c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_fb3c, i32* %r1.global-to-local, align 4
  %v3_fb40 = mul nuw nsw i32 %v3_fb38, 4
  %v2_fb44 = add i32 %v3_fb40, %v2_fb3c
  store i32 %v2_fb44, i32* %r3.global-to-local, align 4
  %v1_fb48 = add i32 %v2_fb44, -184
  %v2_fb48 = inttoptr i32 %v1_fb48 to i32*
  %v3_fb48 = load i32, i32* %v2_fb48, align 4
  %v1_fb4c = urem i32 %v3_fb34, 32
  store i32 %v1_fb4c, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_fb54 = shl i32 1, %v1_fb4c
  %v8_fb54 = or i32 %v3_fb48, %v7_fb54
  store i32 %v8_fb54, i32* %r2.global-to-local, align 4
  store i32 %v8_fb54, i32* %v2_fb48, align 4
  %v0_fb5c = load i32, i32* @r6, align 4
  %v1_fb5c = load i32, i32* %ip.global-to-local, align 4
  %v2_fb5c = sub i32 %v0_fb5c, %v1_fb5c
  %v3_fb5c = icmp uge i32 %v0_fb5c, %v1_fb5c
  store i1 %v3_fb5c, i1* %cpsr_c.global-to-local, align 1
  %v4_fb5c = xor i32 %v1_fb5c, %v0_fb5c
  %v5_fb5c = xor i32 %v2_fb5c, %v0_fb5c
  %v6_fb5c = and i32 %v5_fb5c, %v4_fb5c
  %v7_fb5c = icmp slt i32 %v6_fb5c, 0
  %v8_fb5c = icmp slt i32 %v2_fb5c, 0
  %v9_fb5c = icmp eq i32 %v0_fb5c, %v1_fb5c
  store i1 %v9_fb5c, i1* %cpsr_z.global-to-local, align 1
  %v2_fb60 = xor i1 %v8_fb5c, %v7_fb5c
  br i1 %v2_fb60, label %bb340, label %bb341

bb340:                                            ; preds = %dec_label_pc_fb34
  store i32 %v1_fb5c, i32* @r6, align 4
  br label %bb341

bb341:                                            ; preds = %dec_label_pc_fba4, %dec_label_pc_fc38, %dec_label_pc_fc2c, %bb343, %dec_label_pc_fb34, %bb340
  %stack_var_-1868.0 = phi i32 [ %stack_var_-1868.2, %bb343 ], [ %stack_var_-1868.1, %dec_label_pc_fc38 ], [ %stack_var_-1868.1, %dec_label_pc_fc2c ], [ %stack_var_-1868.1, %bb340 ], [ %stack_var_-1868.1, %dec_label_pc_fb34 ], [ %stack_var_-1868.1, %dec_label_pc_fba4 ]
  %stack_var_-1872.2 = phi i32 [ %stack_var_-1872.4, %bb343 ], [ %stack_var_-1872.3, %dec_label_pc_fc38 ], [ %stack_var_-1872.3, %dec_label_pc_fc2c ], [ %stack_var_-1872.3, %bb340 ], [ %stack_var_-1872.3, %dec_label_pc_fb34 ], [ %stack_var_-1872.3, %dec_label_pc_fba4 ]
  %stack_var_-1884.1 = phi i8* [ %stack_var_-1884.3, %bb343 ], [ %stack_var_-1884.2, %dec_label_pc_fc38 ], [ %stack_var_-1884.2, %dec_label_pc_fc2c ], [ %stack_var_-1884.2, %bb340 ], [ %stack_var_-1884.2, %dec_label_pc_fb34 ], [ %stack_var_-1884.2, %dec_label_pc_fba4 ]
  %stack_var_-1880.1 = phi i32 [ %stack_var_-1880.3, %bb343 ], [ %stack_var_-1880.2, %dec_label_pc_fc38 ], [ %stack_var_-1880.2, %dec_label_pc_fc2c ], [ %stack_var_-1880.2, %bb340 ], [ %stack_var_-1880.2, %dec_label_pc_fb34 ], [ %stack_var_-1880.2, %dec_label_pc_fba4 ]
  %stack_var_-1876.1 = phi i8 [ %stack_var_-1876.3, %bb343 ], [ %stack_var_-1876.2, %dec_label_pc_fc38 ], [ %stack_var_-1876.2, %dec_label_pc_fc2c ], [ %stack_var_-1876.2, %bb340 ], [ %stack_var_-1876.2, %dec_label_pc_fb34 ], [ %stack_var_-1876.2, %dec_label_pc_fba4 ]
  %v3_fb64 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_fb64, i32* %r3.global-to-local, align 4
  %v1_fb68 = add i32 %v3_fb64, 1
  store i32 %v1_fb68, i32* %r2.global-to-local, align 4
  %v3_fb6c = icmp ugt i32 %v1_fb68, 355
  store i1 %v3_fb6c, i1* %cpsr_c.global-to-local, align 1
  %v8_fb6c = icmp eq i32 %v1_fb68, 356
  store i1 %v8_fb6c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_fb68, i32* %stack_var_-52, align 4
  %v6_fb74 = icmp slt i32 %v1_fb68, 356
  br i1 %v6_fb74, label %dec_label_pc_fb78, label %dec_label_pc_fc44

dec_label_pc_fb78:                                ; preds = %bb341, %dec_label_pc_fb00
  %v1_fb84 = phi i32 [ %v1_fb68, %bb341 ], [ %v0_fb00, %dec_label_pc_fb00 ]
  %stack_var_-1868.1 = phi i32 [ %stack_var_-1868.0, %bb341 ], [ %v0_f914, %dec_label_pc_fb00 ]
  %stack_var_-1872.3 = phi i32 [ %stack_var_-1872.2, %bb341 ], [ %stack_var_-1872.1, %dec_label_pc_fb00 ]
  %stack_var_-1884.2 = phi i8* [ %stack_var_-1884.1, %bb341 ], [ %stack_var_-1884.0, %dec_label_pc_fb00 ]
  %stack_var_-1880.2 = phi i32 [ %stack_var_-1880.1, %bb341 ], [ %v0_f98c, %dec_label_pc_fb00 ]
  %stack_var_-1876.2 = phi i8 [ %stack_var_-1876.1, %bb341 ], [ %stack_var_-1876.0, %dec_label_pc_fb00 ]
  store i32 ptrtoint (i32* @global_var_1c958.142 to i32), i32* %r1.global-to-local, align 4
  %v2_fb88 = load i32, i32* @global_var_1c958.142, align 4
  store i32 %v2_fb88, i32* %r2.global-to-local, align 4
  %v3_fb8c = mul i32 %v1_fb84, 388
  store i32 %v3_fb8c, i32* %r3.global-to-local, align 4
  %v2_fb90 = add i32 %v2_fb88, %v3_fb8c
  store i32 %v2_fb90, i32* @r4, align 4
  %v1_fb94 = add i32 %v2_fb90, 12
  %v2_fb94 = inttoptr i32 %v1_fb94 to i32*
  %v3_fb94 = load i32, i32* %v2_fb94, align 4
  store i32 %v3_fb94, i32* %ip.global-to-local, align 4
  %v2_fb98 = icmp ne i32 %v3_fb94, 0
  store i1 %v2_fb98, i1* %cpsr_c.global-to-local, align 1
  %v7_fb98 = icmp eq i32 %v3_fb94, 1
  store i1 %v7_fb98, i1* %cpsr_z.global-to-local, align 1
  %v2_fb9c = xor i1 %v7_fb98, true
  %v3_fb9c = and i1 %v2_fb98, %v2_fb9c
  br i1 %v3_fb9c, label %dec_label_pc_fb14, label %dec_label_pc_fba4

dec_label_pc_fba4:                                ; preds = %dec_label_pc_fb78
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fba4 = icmp eq i32 %v3_fb94, 0
  store i1 %v2_fba4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fba4, label %bb341, label %dec_label_pc_fb14

dec_label_pc_fbb4:                                ; preds = %dec_label_pc_f42c
  store i32 ptrtoint (i32* @global_var_1c95c.144 to i32), i32* %r1.global-to-local, align 4
  %v2_fbb8 = load i32, i32* @global_var_1c95c.144, align 4
  store i32 %v2_fbb8, i32* %r0.global-to-local, align 4
  %v1_fbbc = call i32 @function_11960(i32 %v2_fbb8)
  store i32 %v1_fbbc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fbc0

dec_label_pc_fbc0:                                ; preds = %dec_label_pc_f404, %dec_label_pc_fbb4
  %v0_fbc0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_fbc0, i32* %r0.global-to-local, align 4
  %v1_fbc4 = call i32 @function_12cd4(i32 %v0_fbc0)
  store i32 %v1_fbc4, i32* %r0.global-to-local, align 4
  %v0_fbc8.pre = load i32, i32* @r4, align 4
  %v1_fbe4.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_fbc8

dec_label_pc_fbc8:                                ; preds = %dec_label_pc_fb2c, %dec_label_pc_fbc0
  %v1_fbe4 = phi i32 [ %v1_fbe4.pre, %dec_label_pc_fbc0 ], [ 1, %dec_label_pc_fb2c ]
  %v0_fbc8 = phi i32 [ %v0_fbc8.pre, %dec_label_pc_fbc0 ], [ %v2_fb90, %dec_label_pc_fb2c ]
  %stack_var_-1868.2 = phi i32 [ %tmp256, %dec_label_pc_fbc0 ], [ %stack_var_-1868.1, %dec_label_pc_fb2c ]
  %stack_var_-1872.4 = phi i32 [ %tmp263, %dec_label_pc_fbc0 ], [ %stack_var_-1872.3, %dec_label_pc_fb2c ]
  %stack_var_-1884.3 = phi i8* [ %tmp264, %dec_label_pc_fbc0 ], [ %stack_var_-1884.2, %dec_label_pc_fb2c ]
  %stack_var_-1880.3 = phi i32 [ %tmp265, %dec_label_pc_fbc0 ], [ %stack_var_-1880.2, %dec_label_pc_fb2c ]
  %stack_var_-1876.3 = phi i8 [ %tmp266, %dec_label_pc_fbc0 ], [ %stack_var_-1876.2, %dec_label_pc_fb2c ]
  %v1_fbc8 = add i32 %v0_fbc8, 4
  %v2_fbc8 = inttoptr i32 %v1_fbc8 to i32*
  %v3_fbc8 = load i32, i32* %v2_fbc8, align 4
  store i32 %v3_fbc8, i32* %r0.global-to-local, align 4
  %v3_fbcc = udiv i32 %v3_fbc8, 32
  %v3_fbd0 = mul nuw nsw i32 %v3_fbcc, 4
  %v2_fbd4 = ptrtoint i32* %stack_var_-36 to i32
  %v2_fbd8 = add i32 %v3_fbd0, %v2_fbd4
  store i32 %v2_fbd8, i32* %r3.global-to-local, align 4
  %v1_fbdc = add i32 %v2_fbd8, -312
  %v2_fbdc = inttoptr i32 %v1_fbdc to i32*
  %v3_fbdc = load i32, i32* %v2_fbdc, align 4
  %v1_fbe0 = urem i32 %v3_fbc8, 32
  store i32 %v1_fbe0, i32* %r1.global-to-local, align 4
  %v7_fbe4 = shl i32 %v1_fbe4, %v1_fbe0
  %v8_fbe4 = or i32 %v3_fbdc, %v7_fbe4
  store i32 %v8_fbe4, i32* %r2.global-to-local, align 4
  %v0_fbe8 = load i32, i32* @r5, align 4
  %v2_fbe8 = sub i32 %v0_fbe8, %v3_fbc8
  %v3_fbe8 = icmp uge i32 %v0_fbe8, %v3_fbc8
  store i1 %v3_fbe8, i1* %cpsr_c.global-to-local, align 1
  %v4_fbe8 = xor i32 %v0_fbe8, %v3_fbc8
  %v5_fbe8 = xor i32 %v2_fbe8, %v0_fbe8
  %v6_fbe8 = and i32 %v5_fbe8, %v4_fbe8
  %v7_fbe8 = icmp slt i32 %v6_fbe8, 0
  %v8_fbe8 = icmp slt i32 %v2_fbe8, 0
  %v9_fbe8 = icmp eq i32 %v0_fbe8, %v3_fbc8
  store i1 %v9_fbe8, i1* %cpsr_z.global-to-local, align 1
  %v2_fbec = xor i1 %v8_fbe8, %v7_fbe8
  br i1 %v2_fbec, label %bb342, label %bb343

bb342:                                            ; preds = %dec_label_pc_fbc8
  store i32 %v3_fbc8, i32* @r5, align 4
  br label %bb343

bb343:                                            ; preds = %dec_label_pc_fbc8, %bb342
  store i32 %v8_fbe4, i32* %v2_fbdc, align 4
  br label %bb341

dec_label_pc_fbf8:                                ; preds = %dec_label_pc_fb14
  %v1_fbf8 = add i32 %v2_fb90, 4
  %v2_fbf8 = inttoptr i32 %v1_fbf8 to i32*
  %v3_fbf8 = load i32, i32* %v2_fbf8, align 4
  store i32 %v3_fbf8, i32* %r0.global-to-local, align 4
  %v1_fbfc = call i32 @function_11960(i32 %v3_fbf8)
  store i32 %v1_fbfc, i32* %r0.global-to-local, align 4
  %v0_fc00 = load i32, i32* @r4, align 4
  %v1_fc00 = add i32 %v0_fc00, 12
  %v2_fc00 = inttoptr i32 %v1_fc00 to i32*
  %v3_fc00 = load i32, i32* %v2_fc00, align 4
  store i32 %v3_fc00, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_fc08 = icmp ugt i32 %v3_fc00, 1
  store i1 %v2_fc08, i1* %cpsr_c.global-to-local, align 1
  %v7_fc08 = icmp eq i32 %v3_fc00, 2
  store i1 %v7_fc08, i1* %cpsr_z.global-to-local, align 1
  %v2_fc0c = add i32 %v0_fc00, 4
  %v3_fc0c = inttoptr i32 %v2_fc0c to i32*
  store i32 -1, i32* %v3_fc0c, align 4
  %v2_fc10 = xor i1 %v2_fc08, true
  %v3_fc10 = or i1 %v7_fc08, %v2_fc10
  br i1 %v3_fc10, label %dec_label_pc_fc38, label %dec_label_pc_fc14

dec_label_pc_fc14:                                ; preds = %dec_label_pc_fbf8
  %v0_fc14 = load i32, i32* @r4, align 4
  %v1_fc14 = add i32 %v0_fc14, 384
  %v2_fc14 = inttoptr i32 %v1_fc14 to i8*
  %v3_fc14 = load i8, i8* %v2_fc14, align 1
  %v4_fc14 = zext i8 %v3_fc14 to i32
  %v1_fc18 = add nuw nsw i32 %v4_fc14, 1
  %v1_fc1c = urem i32 %v1_fc18, 256
  store i32 %v1_fc1c, i32* %r3.global-to-local, align 4
  %v2_fc20 = icmp ugt i32 %v1_fc1c, 9
  store i1 %v2_fc20, i1* %cpsr_c.global-to-local, align 1
  %v7_fc20 = icmp eq i32 %v1_fc1c, 10
  store i1 %v7_fc20, i1* %cpsr_z.global-to-local, align 1
  %v1_fc24 = trunc i32 %v1_fc18 to i8
  store i8 %v1_fc24, i8* %v2_fc14, align 1
  %v0_fc28 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fc28, label %dec_label_pc_fc38, label %dec_label_pc_fc2c

dec_label_pc_fc2c:                                ; preds = %dec_label_pc_fc14
  %v0_fc2c = load i32, i32* @r4, align 4
  store i32 %v0_fc2c, i32* @r0, align 4
  %v0_fc30 = call i32 @function_f0cc()
  store i32 %v0_fc30, i32* %r0.global-to-local, align 4
  br label %bb341

dec_label_pc_fc38:                                ; preds = %dec_label_pc_fc14, %dec_label_pc_fbf8
  %v0_fc38 = load i32, i32* @r7, align 4
  %v1_fc38 = load i32, i32* @r4, align 4
  %v2_fc38 = add i32 %v1_fc38, 12
  %v3_fc38 = inttoptr i32 %v2_fc38 to i32*
  store i32 %v0_fc38, i32* %v3_fc38, align 4
  %v0_fc3c = load i32, i32* @r7, align 4
  %v1_fc3c = trunc i32 %v0_fc3c to i8
  %v2_fc3c = load i32, i32* @r4, align 4
  %v3_fc3c = add i32 %v2_fc3c, 384
  %v4_fc3c = inttoptr i32 %v3_fc3c to i8*
  store i8 %v1_fc3c, i8* %v4_fc3c, align 1
  br label %bb341

dec_label_pc_fc44:                                ; preds = %bb341
  store i32 1, i32* %stack_var_-64, align 4
  %v0_fc4c = load i32, i32* @r6, align 4
  %v1_fc4c = load i32, i32* @r5, align 4
  %v2_fc4c = sub i32 %v0_fc4c, %v1_fc4c
  %v3_fc4c = icmp uge i32 %v0_fc4c, %v1_fc4c
  store i1 %v3_fc4c, i1* %cpsr_c.global-to-local, align 1
  %v4_fc4c = xor i32 %v1_fc4c, %v0_fc4c
  %v5_fc4c = xor i32 %v2_fc4c, %v0_fc4c
  %v6_fc4c = and i32 %v5_fc4c, %v4_fc4c
  %v7_fc4c = icmp slt i32 %v6_fc4c, 0
  %v8_fc4c = icmp slt i32 %v2_fc4c, 0
  %v9_fc4c = icmp eq i32 %v0_fc4c, %v1_fc4c
  store i1 %v9_fc4c, i1* %cpsr_z.global-to-local, align 1
  %v2_fc50 = xor i1 %v8_fc4c, %v7_fc4c
  %v1_fc4c.v0_fc4c = select i1 %v2_fc50, i32 %v1_fc4c, i32 %v0_fc4c
  %v2_fc64 = ptrtoint i32* %stack_var_-220 to i32
  store i32 %v2_fc64, i32* %r1.global-to-local, align 4
  %v2_fc68 = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_fc68, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_fc70 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_fc70, i32* %ip.global-to-local, align 4
  %v1_fc74 = add i32 %v1_fc4c.v0_fc4c, 1
  store i32 %v1_fc74, i32* %r0.global-to-local, align 4
  %v5_fc80 = call i32 @function_11b80(i32 %v1_fc74, i32 %v2_fc64, i32 %v2_fc68, i32 0, i32 %v2_fc70)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_fc88 = call i32 @function_11c30(i32* null)
  store i32 %v2_fc88, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v2_fc88, i32* @global_var_1c8f4.130, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_fd0c = ptrtoint i32* %stack_var_-36 to i32
  %v2_feb4 = inttoptr i32 %stack_var_-1868.0 to i32*
  %v2_ff5c = ptrtoint i32* %stack_var_-41 to i32
  %v2_106b4 = ptrtoint i32* %stack_var_-84 to i32
  %v2_106bc = ptrtoint i32* %stack_var_-73 to i32
  %v2_fe04 = ptrtoint i32* %stack_var_-56 to i32
  %v2_10290 = ptrtoint i32* %stack_var_-48 to i32
  %v2_10924 = ptrtoint i32* %stack_var_-92 to i32
  %v3_1092c = bitcast i32* %stack_var_-92 to %sockaddr*
  %v2_10984 = ptrtoint i32* %stack_var_-38 to i32
  br label %dec_label_pc_fcdc

dec_label_pc_fca4:                                ; preds = %dec_label_pc_fd04, %dec_label_pc_10864
  %v0_fcb8 = phi i32 [ %v3_fcf8, %dec_label_pc_fd04 ], [ %v0_fca4.pre, %dec_label_pc_10864 ]
  %v3_fca4 = udiv i32 %v0_fcb8, 32
  %v3_fca8 = mul nuw nsw i32 %v3_fca4, 4
  store i32 %v2_fd0c, i32* @lr, align 4
  %v2_fcb0 = add i32 %v3_fca8, %v2_fd0c
  store i32 %v2_fcb0, i32* %r3.global-to-local, align 4
  %v1_fcb4 = add i32 %v2_fcb0, -184
  %v2_fcb4 = inttoptr i32 %v1_fcb4 to i32*
  %v3_fcb4 = load i32, i32* %v2_fcb4, align 4
  %v1_fcb8 = urem i32 %v0_fcb8, 32
  store i32 %v1_fcb8, i32* %r1.global-to-local, align 4
  %v2_fcbc = add nsw i32 %v1_fcb8, -1
  %v3_fcbc = shl i32 1, %v2_fcbc
  %v4_fcbc = and i32 %v3_fcbc, %v3_fcb4
  %v5_fcbc = icmp ne i32 %v4_fcbc, 0
  store i1 %v5_fcbc, i1* %cpsr_c.global-to-local, align 1
  %v6_fcbc = lshr i32 %v3_fcb4, %v1_fcb8
  store i32 %v6_fcbc, i32* %r2.global-to-local, align 4
  %v1_fcc0 = urem i32 %v6_fcbc, 2
  %v2_fcc0 = icmp eq i32 %v1_fcc0, 0
  store i1 %v2_fcc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fcc0, label %dec_label_pc_fcc8, label %dec_label_pc_fe90.preheader

dec_label_pc_fe90.preheader:                      ; preds = %dec_label_pc_fca4
  %v0_fe90123 = load i32, i32* @r6, align 4
  %v1_fe90124 = add i32 %v0_fe90123, 12
  %v2_fe90125 = inttoptr i32 %v1_fe90124 to i32*
  %v3_fe90126 = load i32, i32* %v2_fe90125, align 4
  store i32 %v3_fe90126, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fe94122128 = icmp eq i32 %v3_fe90126, 0
  store i1 %v2_fe94122128, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fe94122128, label %dec_label_pc_fcc8, label %dec_label_pc_fe9c.lr.ph

dec_label_pc_fcc8:                                ; preds = %dec_label_pc_fe90.loopexit, %dec_label_pc_fe94.backedge, %dec_label_pc_fe90.preheader, %dec_label_pc_fca4, %.thread241, %dec_label_pc_107b0, %dec_label_pc_fcdc, %dec_label_pc_10888, %dec_label_pc_107f4
  %v3_fcc8 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_fcc8, i32* %r3.global-to-local, align 4
  %v1_fccc = add i32 %v3_fcc8, 1
  store i32 %v1_fccc, i32* %r2.global-to-local, align 4
  %v3_fcd0 = icmp ugt i32 %v1_fccc, 355
  store i1 %v3_fcd0, i1* %cpsr_c.global-to-local, align 1
  %v8_fcd0 = icmp eq i32 %v1_fccc, 356
  store i1 %v8_fcd0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_fccc, i32* %stack_var_-52, align 4
  %v6_fcd8 = icmp slt i32 %v1_fccc, 356
  br i1 %v6_fcd8, label %dec_label_pc_fcdc, label %dec_label_pc_f5d8

dec_label_pc_fcdc:                                ; preds = %dec_label_pc_fcc8, %dec_label_pc_fc44
  %v1_fce8 = phi i32 [ %v1_fccc, %dec_label_pc_fcc8 ], [ 0, %dec_label_pc_fc44 ]
  store i32 ptrtoint (i32* @global_var_1c958.142 to i32), i32* %ip.global-to-local, align 4
  %v2_fcec = load i32, i32* @global_var_1c958.142, align 4
  store i32 %v2_fcec, i32* %r2.global-to-local, align 4
  %v3_fcf0 = mul i32 %v1_fce8, 388
  store i32 %v3_fcf0, i32* %r3.global-to-local, align 4
  %v2_fcf4 = add i32 %v2_fcec, %v3_fcf0
  store i32 %v2_fcf4, i32* @r6, align 4
  %v1_fcf8 = add i32 %v2_fcf4, 4
  %v2_fcf8 = inttoptr i32 %v1_fcf8 to i32*
  %v3_fcf8 = load i32, i32* %v2_fcf8, align 4
  store i32 %v3_fcf8, i32* @r4, align 4
  %v2_fcfc = icmp eq i32 %v3_fcf8, -1
  store i1 %v2_fcfc, i1* %cpsr_c.global-to-local, align 1
  %v7_fcfc = icmp eq i32 %v3_fcf8, -1
  store i1 %v7_fcfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcfc, label %dec_label_pc_fcc8, label %dec_label_pc_fd04

dec_label_pc_fd04:                                ; preds = %dec_label_pc_fcdc
  %v3_fd04 = udiv i32 %v3_fcf8, 32
  %v3_fd08 = mul nuw nsw i32 %v3_fd04, 4
  %v2_fd10 = add i32 %v3_fd08, %v2_fd0c
  store i32 %v2_fd10, i32* %r3.global-to-local, align 4
  %v1_fd14 = add i32 %v2_fd10, -312
  %v2_fd14 = inttoptr i32 %v1_fd14 to i32*
  %v3_fd14 = load i32, i32* %v2_fd14, align 4
  %v1_fd18 = urem i32 %v3_fcf8, 32
  store i32 %v1_fd18, i32* %r1.global-to-local, align 4
  %v2_fd1c = add nsw i32 %v1_fd18, -1
  %v3_fd1c = shl i32 1, %v2_fd1c
  %v4_fd1c = and i32 %v3_fd14, %v3_fd1c
  %v5_fd1c = icmp ne i32 %v4_fd1c, 0
  store i1 %v5_fd1c, i1* %cpsr_c.global-to-local, align 1
  %v6_fd1c = lshr i32 %v3_fd14, %v1_fd18
  store i32 %v6_fd1c, i32* %r2.global-to-local, align 4
  %v1_fd20 = urem i32 %v6_fd1c, 2
  %v2_fd20 = icmp eq i32 %v1_fd20, 0
  store i1 %v2_fd20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fd20, label %dec_label_pc_fca4, label %dec_label_pc_fd28

dec_label_pc_fd28:                                ; preds = %dec_label_pc_fd04
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  store i32 %v2_10290, i32* %r3.global-to-local, align 4
  store i32 %v2_fe04, i32* %ip.global-to-local, align 4
  store i32 %v3_fcf8, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v6_fd58 = call i32 @function_12100(i32 %v3_fcf8, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_fe04)
  %v3_fd5c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_fd5c, i32* %r3.global-to-local, align 4
  %v2_fd60 = or i32 %v3_fd5c, %v6_fd58
  store i32 %v2_fd60, i32* %r0.global-to-local, align 4
  %v4_fd60 = icmp eq i32 %v2_fd60, 0
  store i1 %v4_fd60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_fd60, label %dec_label_pc_fd68, label %dec_label_pc_10888

dec_label_pc_fd68:                                ; preds = %dec_label_pc_fd28
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_fd6c = load i32, i32* @r6, align 4
  %v2_fd6c = add i32 %v1_fd6c, 12
  %v3_fd6c = inttoptr i32 %v2_fd6c to i32*
  store i32 2, i32* %v3_fd6c, align 4
  %v0_fd70 = call i32 @function_e8e4()
  store i32 %v0_fd70, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1c8f0.136 to i32), i32* %r3.global-to-local, align 4
  %v3_fd78 = load i8, i8* @global_var_1c8f1.137, align 1
  %v4_fd78 = zext i8 %v3_fd78 to i32
  store i32 %v4_fd78, i32* %r2.global-to-local, align 4
  %v2_fd7c = load i8, i8* bitcast (i8** @global_var_1c8f0.136 to i8*), align 4
  %v3_fd7c = zext i8 %v2_fd7c to i32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_fd80 = mul nuw nsw i32 %v4_fd78, 256
  %v5_fd80 = or i32 %v3_fd7c, %v4_fd80
  store i32 %v5_fd80, i32* %r1.global-to-local, align 4
  %v2_fd84 = call i32 @function_116e8(i32 %v0_fd70, i32 %v5_fd80)
  store i32 ptrtoint (i32* @global_var_1c8c0.132 to i32), i32* %r3.global-to-local, align 4
  %v2_fd8c = load i32, i32* @global_var_1c8c0.132, align 4
  %v1_fd94 = load i32, i32* @r5, align 4
  %v9_fd94 = icmp eq i32 %v2_fd8c, %v1_fd94
  store i1 %v9_fd94, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_fd98 = urem i32 %v2_fd84, 65536
  store i32 %v3_fd98, i32* %r0.global-to-local, align 4
  %v7_fd9c = icmp sgt i32 %v2_fd8c, %v1_fd94
  br i1 %v7_fd9c, label %dec_label_pc_fda0, label %dec_label_pc_10860

dec_label_pc_fda0:                                ; preds = %dec_label_pc_fd68
  %v2_fda4 = load i32, i32* @global_var_1c8ec.134, align 4
  store i32 %v2_fda4, i32* %r3.global-to-local, align 4
  store i32 %v1_fd94, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_fdc0

dec_label_pc_fdb0:                                ; preds = %dec_label_pc_fdd8, %dec_label_pc_fdc0
  %v1_fdb0 = add i32 %v0_fdb0, 1
  store i32 %v1_fdb0, i32* %ip.global-to-local, align 4
  %v3_fdb4 = icmp uge i32 %v1_fdb0, %v2_fd8c
  store i1 %v3_fdb4, i1* %cpsr_c.global-to-local, align 1
  %v9_fdb4 = icmp eq i32 %v1_fdb0, %v2_fd8c
  store i1 %v9_fdb4, i1* %cpsr_z.global-to-local, align 1
  %v1_fdb8 = add i32 %v0_fdb8, 16
  store i32 %v1_fdb8, i32* %r3.global-to-local, align 4
  br i1 %v9_fdb4, label %dec_label_pc_10860, label %dec_label_pc_fdc0

dec_label_pc_fdc0:                                ; preds = %dec_label_pc_fdb0, %dec_label_pc_fda0
  %v0_fdb0 = phi i32 [ %v1_fdb0, %dec_label_pc_fdb0 ], [ %v1_fd94, %dec_label_pc_fda0 ]
  %v0_fdb8 = phi i32 [ %v1_fdb8, %dec_label_pc_fdb0 ], [ %v2_fda4, %dec_label_pc_fda0 ]
  store i32 %v0_fdb8, i32* %r1.global-to-local, align 4
  %v1_fdc4 = add i32 %v0_fdb8, 9
  %v2_fdc4 = inttoptr i32 %v1_fdc4 to i8*
  %v3_fdc4 = load i8, i8* %v2_fdc4, align 1
  %v4_fdc4 = zext i8 %v3_fdc4 to i32
  store i32 %v4_fdc4, i32* %r2.global-to-local, align 4
  %v1_fdc8 = add i32 %v0_fdb8, 8
  %v2_fdc8 = inttoptr i32 %v1_fdc8 to i8*
  %v3_fdc8 = load i8, i8* %v2_fdc8, align 1
  %v4_fdc8 = zext i8 %v3_fdc8 to i32
  %v4_fdcc = mul nuw nsw i32 %v4_fdc4, 256
  %v5_fdcc = or i32 %v4_fdc8, %v4_fdcc
  store i32 %v5_fdcc, i32* %r3.global-to-local, align 4
  %v3_fdd0 = icmp uge i32 %v5_fdcc, %v3_fd98
  store i1 %v3_fdd0, i1* %cpsr_c.global-to-local, align 1
  %v9_fdd0 = icmp eq i32 %v5_fdcc, %v3_fd98
  store i1 %v9_fdd0, i1* %cpsr_z.global-to-local, align 1
  %v2_fdd4 = xor i1 %v9_fdd0, true
  %v3_fdd4 = and i1 %v3_fdd0, %v2_fdd4
  br i1 %v3_fdd4, label %dec_label_pc_fdb0, label %dec_label_pc_fdd8

dec_label_pc_fdd8:                                ; preds = %dec_label_pc_fdc0
  %v1_fdd8 = add i32 %v0_fdb8, 10
  %v2_fdd8 = inttoptr i32 %v1_fdd8 to i8*
  %v3_fdd8 = load i8, i8* %v2_fdd8, align 1
  %v4_fdd8 = zext i8 %v3_fdd8 to i32
  store i32 %v4_fdd8, i32* %r3.global-to-local, align 4
  %v1_fddc = add i32 %v0_fdb8, 11
  %v2_fddc = inttoptr i32 %v1_fddc to i8*
  %v3_fddc = load i8, i8* %v2_fddc, align 1
  %v4_fddc = zext i8 %v3_fddc to i32
  store i32 %v4_fddc, i32* %r2.global-to-local, align 4
  %v4_fde0 = mul nuw nsw i32 %v4_fddc, 256
  %v5_fde0 = or i32 %v4_fde0, %v4_fdd8
  store i32 %v5_fde0, i32* %r3.global-to-local, align 4
  %v3_fde4 = icmp uge i32 %v5_fde0, %v3_fd98
  store i1 %v3_fde4, i1* %cpsr_c.global-to-local, align 1
  %v9_fde4 = icmp eq i32 %v5_fde0, %v3_fd98
  store i1 %v9_fde4, i1* %cpsr_z.global-to-local, align 1
  %v2_fde8 = xor i1 %v3_fde4, true
  %v3_fde8 = or i1 %v9_fde4, %v2_fde8
  br i1 %v3_fde8, label %dec_label_pc_fdb0, label %dec_label_pc_10864

dec_label_pc_fdf0:                                ; preds = %dec_label_pc_10060, %dec_label_pc_10034, %dec_label_pc_1007c
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_fdf4 = call i32 @function_10ae8(i32 28)
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_fdfc = call i32 @function_10ae8(i32 29)
  store i32 %v2_fe04, i32* %r1.global-to-local, align 4
  store i32 28, i32* %r0.global-to-local, align 4
  %v3_fe0c = call i32 @function_10a04(i32 28, i32* nonnull %stack_var_-56)
  store i32 %v3_fe0c, i32* @r4, align 4
  store i32 %v2_fe04, i32* %r1.global-to-local, align 4
  store i32 29, i32* %r0.global-to-local, align 4
  %v3_fe20 = call i32 @function_10a04(i32 29, i32* nonnull %stack_var_-56)
  %v3_fe24 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_fe20, i32* @r5, align 4
  %v0_fe2c = load i32, i32* @r4, align 4
  store i32 %v0_fe2c, i32* %r2.global-to-local, align 4
  %v1_fe30 = add i32 %v3_fe24, -1
  store i32 %v1_fe30, i32* %r3.global-to-local, align 4
  %v0_fe34 = load i32, i32* @sb, align 4
  store i32 %v0_fe34, i32* %r0.global-to-local, align 4
  %v0_fe38 = load i32, i32* @r6, align 4
  %v1_fe38 = add i32 %v0_fe38, 24
  %v2_fe38 = inttoptr i32 %v1_fe38 to i32*
  %v3_fe38 = load i32, i32* %v2_fe38, align 4
  store i32 %v3_fe38, i32* %r1.global-to-local, align 4
  %v4_fe3c = call i32 @function_111a4(i32 %v0_fe34, i32 %v3_fe38, i32 %v0_fe2c, i32 %v1_fe30)
  store i32 %v4_fe3c, i32* %r0.global-to-local, align 4
  %v2_fe40 = icmp eq i32 %v4_fe3c, -1
  store i1 %v2_fe40, i1* %cpsr_c.global-to-local, align 1
  %v7_fe40 = icmp eq i32 %v4_fe3c, -1
  store i1 %v7_fe40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe40, label %dec_label_pc_fe50, label %dec_label_pc_fe78

dec_label_pc_fe50:                                ; preds = %dec_label_pc_fdf0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_fe50 = load i32, i32* %stack_var_-56, align 4
  %v0_fe54 = load i32, i32* @r5, align 4
  store i32 %v0_fe54, i32* %r2.global-to-local, align 4
  %v1_fe58 = add i32 %v3_fe50, -1
  store i32 %v1_fe58, i32* %r3.global-to-local, align 4
  %v0_fe5c = load i32, i32* @sb, align 4
  store i32 %v0_fe5c, i32* %r0.global-to-local, align 4
  %v0_fe60 = load i32, i32* @r6, align 4
  %v1_fe60 = add i32 %v0_fe60, 24
  %v2_fe60 = inttoptr i32 %v1_fe60 to i32*
  %v3_fe60 = load i32, i32* %v2_fe60, align 4
  store i32 %v3_fe60, i32* %r1.global-to-local, align 4
  %v4_fe64 = call i32 @function_111a4(i32 %v0_fe5c, i32 %v3_fe60, i32 %v0_fe54, i32 %v1_fe58)
  store i32 %v4_fe64, i32* %r0.global-to-local, align 4
  %v2_fe68 = icmp eq i32 %v4_fe64, -1
  store i1 %v2_fe68, i1* %cpsr_c.global-to-local, align 1
  %v7_fe68 = icmp eq i32 %v4_fe64, -1
  store i1 %v7_fe68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe68, label %dec_label_pc_108a4, label %dec_label_pc_fe78

dec_label_pc_fe78:                                ; preds = %dec_label_pc_fe50, %dec_label_pc_fdf0
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_fe7c = call i32 @function_10a30(i32 28)
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_fe84 = call i32 @function_10a30(i32 29)
  store i32 %v1_fe84, i32* %r0.global-to-local, align 4
  %v0_fe88 = load i32, i32* @r7, align 4
  %v3_fe88 = icmp eq i32 %v0_fe88, -1
  store i1 %v3_fe88, i1* %cpsr_c.global-to-local, align 1
  %v8_fe88 = icmp eq i32 %v0_fe88, -1
  store i1 %v8_fe88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_fe88, label %dec_label_pc_fe90.loopexit, label %dec_label_pc_10098

dec_label_pc_fe90.loopexit:                       ; preds = %dec_label_pc_10024, %dec_label_pc_10368, %dec_label_pc_ff14, %dec_label_pc_fe78, %dec_label_pc_10744
  %v0_fe90 = load i32, i32* @r6, align 4
  %v1_fe90 = add i32 %v0_fe90, 12
  %v2_fe90 = inttoptr i32 %v1_fe90 to i32*
  %v3_fe90 = load i32, i32* %v2_fe90, align 4
  store i32 %v3_fe90, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fe94122 = icmp eq i32 %v3_fe90, 0
  store i1 %v2_fe94122, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fe94122, label %dec_label_pc_fcc8, label %dec_label_pc_fe9c.lr.ph

dec_label_pc_fe9c.lr.ph:                          ; preds = %dec_label_pc_fe90.preheader, %dec_label_pc_fe90.loopexit
  %v0_fe9c151 = phi i32 [ %v0_fe90, %dec_label_pc_fe90.loopexit ], [ %v0_fe90123, %dec_label_pc_fe90.preheader ]
  br label %dec_label_pc_fe9c

dec_label_pc_fe9c:                                ; preds = %dec_label_pc_fe94.backedge.thread, %dec_label_pc_fe94.backedge, %dec_label_pc_fe94.backedge.thread491, %dec_label_pc_fe9c.lr.ph
  %v0_10828 = phi i32 [ %v0_fe9c151, %dec_label_pc_fe9c.lr.ph ], [ %v0_fe9c148, %dec_label_pc_fe94.backedge ], [ %v0_ff14, %dec_label_pc_fe94.backedge.thread ], [ %v0_ff14, %dec_label_pc_fe94.backedge.thread491 ]
  %v1_fe9c = add i32 %v0_10828, 24
  %v2_fe9c = inttoptr i32 %v1_fe9c to i32*
  %v3_fe9c = load i32, i32* %v2_fe9c, align 4
  store i32 %v3_fe9c, i32* %r3.global-to-local, align 4
  %v2_fea0 = icmp ugt i32 %v3_fe9c, 355
  store i1 %v2_fea0, i1* %cpsr_c.global-to-local, align 1
  %v7_fea0 = icmp eq i32 %v3_fe9c, 356
  store i1 %v7_fea0, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_10828, 28
  store i32 %.pre, i32* @sb, align 4
  br i1 %v7_fea0, label %dec_label_pc_10828, label %dec_label_pc_feac

dec_label_pc_feac:                                ; preds = %dec_label_pc_fe9c, %dec_label_pc_10828
  store i32 %stack_var_-1868.0, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %v2_feb4, align 4
  %v0_feb8 = load i32, i32* @r6, align 4
  %v1_feb8 = add i32 %v0_feb8, 24
  %v2_feb8 = inttoptr i32 %v1_feb8 to i32*
  %v3_feb8 = load i32, i32* %v2_feb8, align 4
  store i32 %v3_feb8, i32* %r2.global-to-local, align 4
  %v0_febc = load i32, i32* @sb, align 4
  %v2_febc = add i32 %v0_febc, %v3_feb8
  store i32 %v2_febc, i32* @r4, align 4
  %v1_fec0 = add i32 %v0_feb8, 4
  %v2_fec0 = inttoptr i32 %v1_fec0 to i32*
  %v3_fec0 = load i32, i32* %v2_fec0, align 4
  store i32 %v3_fec0, i32* %r0.global-to-local, align 4
  %v1_fec4 = sub i32 356, %v3_feb8
  store i32 %v1_fec4, i32* %r2.global-to-local, align 4
  store i32 %v2_febc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fed0 = inttoptr i32 %v2_febc to i32*
  %v5_fed0 = call i32 @function_1215c(i32 %v3_fec0, i32* %v4_fed0, i32 %v1_fec4, i32 16384)
  store i32 %v5_fed0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fed4 = icmp eq i32 %v5_fed0, 0
  store i1 %v2_fed4, i1* %cpsr_z.global-to-local, align 1
  %tmp346 = icmp slt i32 %v5_fed0, 1
  br i1 %tmp346, label %dec_label_pc_107a4, label %dec_label_pc_fedc

dec_label_pc_fedc:                                ; preds = %dec_label_pc_feac
  %v0_fedc = load i32, i32* @r5, align 4
  store i32 %v0_fedc, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fee4

dec_label_pc_fee4:                                ; preds = %bb348, %dec_label_pc_fedc
  %v3_feec = phi i32 [ %v1_fef0, %bb348 ], [ %v0_fedc, %dec_label_pc_fedc ]
  %v1_fee4 = load i32, i32* @r4, align 4
  %v2_fee4 = add i32 %v1_fee4, %v3_feec
  %v3_fee4 = inttoptr i32 %v2_fee4 to i8*
  %v4_fee4 = load i8, i8* %v3_fee4, align 1
  %v6_fee4 = zext i8 %v4_fee4 to i32
  store i32 %v6_fee4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fee8 = icmp eq i8 %v4_fee4, 0
  store i1 %v2_fee8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fee8, label %bb347, label %bb348

bb347:                                            ; preds = %dec_label_pc_fee4
  %v1_feec = load i32, i32* %r1.global-to-local, align 4
  %v2_feec = trunc i32 %v1_feec to i8
  store i8 %v2_feec, i8* %v3_fee4, align 1
  %v0_fef0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb348

bb348:                                            ; preds = %dec_label_pc_fee4, %bb347
  %v0_fef0 = phi i32 [ %v3_feec, %dec_label_pc_fee4 ], [ %v0_fef0.pre, %bb347 ]
  %v1_fef0 = add i32 %v0_fef0, 1
  store i32 %v1_fef0, i32* %r2.global-to-local, align 4
  %v3_fef4 = icmp uge i32 %v5_fed0, %v1_fef0
  store i1 %v3_fef4, i1* %cpsr_c.global-to-local, align 1
  %v9_fef4 = icmp eq i32 %v5_fed0, %v1_fef0
  store i1 %v9_fef4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fef4, label %dec_label_pc_fefc, label %dec_label_pc_fee4

dec_label_pc_fefc:                                ; preds = %bb348, %dec_label_pc_107a8
  store i32 ptrtoint (i32* @global_var_1c8f4.130 to i32), i32* %r1.global-to-local, align 4
  %v0_ff00 = load i32, i32* @r6, align 4
  %v1_ff00 = add i32 %v0_ff00, 24
  %v2_ff00 = inttoptr i32 %v1_ff00 to i32*
  %v3_ff00 = load i32, i32* %v2_ff00, align 4
  %v2_ff04 = load i32, i32* @global_var_1c8f4.130, align 4
  store i32 %v2_ff04, i32* %r3.global-to-local, align 4
  %v2_ff08 = add i32 %v3_ff00, %v5_fed0
  store i32 %v2_ff08, i32* %ip.global-to-local, align 4
  store i32 %v2_ff08, i32* %v2_ff00, align 4
  %v0_ff10 = load i32, i32* %r3.global-to-local, align 4
  %v1_ff10 = load i32, i32* @r6, align 4
  %v2_ff10 = add i32 %v1_ff10, 8
  %v3_ff10 = inttoptr i32 %v2_ff10 to i32*
  store i32 %v0_ff10, i32* %v3_ff10, align 4
  br label %dec_label_pc_ff14

dec_label_pc_ff14:                                ; preds = %dec_label_pc_10464, %dec_label_pc_fefc
  %v0_ff14 = load i32, i32* @r6, align 4
  %v1_ff14 = add i32 %v0_ff14, 12
  %v2_ff14 = inttoptr i32 %v1_ff14 to i32*
  %v3_ff14 = load i32, i32* %v2_ff14, align 4
  store i32 %v3_ff14, i32* %r2.global-to-local, align 4
  %v1_ff18 = add i32 %v3_ff14, -2
  store i32 %v1_ff18, i32* %r3.global-to-local, align 4
  %v7_ff1c = icmp eq i32 %v1_ff18, 8
  store i1 %v7_ff1c, i1* %cpsr_z.global-to-local, align 1
  %v5_ff20 = and i32 %v1_ff18, 1073741824
  %v6_ff20 = icmp ne i32 %v5_ff20, 0
  store i1 %v6_ff20, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_ff14, label %dec_label_pc_fe90.loopexit [
    i32 2, label %dec_label_pc_ff4c
    i32 3, label %dec_label_pc_10034
    i32 4, label %dec_label_pc_100dc
    i32 5, label %dec_label_pc_10174
    i32 6, label %dec_label_pc_10228
    i32 7, label %dec_label_pc_105f0
    i32 8, label %dec_label_pc_10488
    i32 9, label %dec_label_pc_1053c
    i32 10, label %dec_label_pc_10330
  ]

dec_label_pc_ff4c:                                ; preds = %dec_label_pc_ff14
  %v1_ff50 = add i32 %v0_ff14, 24
  %v2_ff50 = inttoptr i32 %v1_ff50 to i32*
  %v3_ff50 = load i32, i32* %v2_ff50, align 4
  store i32 %v3_ff50, i32* %ip.global-to-local, align 4
  %v0_ff54 = load i32, i32* @sb, align 4
  store i32 %v0_ff54, i32* @r5, align 4
  store i32 0, i32* @r7, align 4
  %v1_ff60 = add i32 %v0_ff14, 29
  store i32 %v1_ff60, i32* @r4, align 4
  store i32 -3, i32* %sl.global-to-local, align 4
  store i32 -4, i32* @r8, align 4
  %v3_ff6c113 = icmp eq i32 %v3_ff50, 0
  store i1 %v3_ff6c113, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_ff6c113, i1* %cpsr_z.global-to-local, align 1
  %v6_ff70120 = icmp sgt i32 %v3_ff50, 0
  br i1 %v6_ff70120, label %dec_label_pc_ff74.preheader, label %dec_label_pc_10014

dec_label_pc_ff6c.loopexit:                       ; preds = %dec_label_pc_ff8c
  %v2_ff94 = add i32 %v1_ff94, 2
  store i32 %v2_ff94, i32* @r5, align 4
  %v2_ff98 = add i32 %v1_ff98, 2
  store i32 %v2_ff98, i32* @r4, align 4
  %v2_ff9c = add i32 %v1_ff9c, 2
  store i32 %v2_ff9c, i32* @r7, align 4
  %v3_ff6c = icmp uge i32 %v2_ff9c, %v1_ff6c
  store i1 %v3_ff6c, i1* %cpsr_c.global-to-local, align 1
  %v9_ff6c = icmp eq i32 %v2_ff9c, %v1_ff6c
  store i1 %v9_ff6c, i1* %cpsr_z.global-to-local, align 1
  %v6_ff70 = icmp slt i32 %v2_ff9c, %v1_ff6c
  br i1 %v6_ff70, label %dec_label_pc_ff74.preheader, label %dec_label_pc_10014

dec_label_pc_ff74.preheader:                      ; preds = %dec_label_pc_ff4c, %dec_label_pc_ff6c.loopexit
  %v6_1001c190 = phi i32 [ %v6_1001c191, %dec_label_pc_ff6c.loopexit ], [ %v0_ff14, %dec_label_pc_ff4c ]
  %v1_ff9c179 = phi i32 [ %v2_ff9c, %dec_label_pc_ff6c.loopexit ], [ 0, %dec_label_pc_ff4c ]
  %v1_ff94177 = phi i32 [ %v2_ff94, %dec_label_pc_ff6c.loopexit ], [ %v0_ff54, %dec_label_pc_ff4c ]
  %v1_ff80175 = phi i32 [ %v1_ff6c, %dec_label_pc_ff6c.loopexit ], [ %v3_ff50, %dec_label_pc_ff4c ]
  %v0_ff74173 = phi i32 [ %v2_ff98, %dec_label_pc_ff6c.loopexit ], [ %v1_ff60, %dec_label_pc_ff4c ]
  br label %dec_label_pc_ff74

dec_label_pc_ff74:                                ; preds = %dec_label_pc_ff74.preheader, %dec_label_pc_fff4
  %v6_1001c191 = phi i32 [ %v6_1001c190, %dec_label_pc_ff74.preheader ], [ %v0_fffc, %dec_label_pc_fff4 ]
  %v1_ff9c = phi i32 [ %v1_ff9c179, %dec_label_pc_ff74.preheader ], [ %v1_10000, %dec_label_pc_fff4 ]
  %v1_ff94 = phi i32 [ %v1_ff94177, %dec_label_pc_ff74.preheader ], [ %v1_10008, %dec_label_pc_fff4 ]
  %v1_ff6c = phi i32 [ %v1_ff80175, %dec_label_pc_ff74.preheader ], [ %v3_fffc, %dec_label_pc_fff4 ]
  %v1_ff98 = phi i32 [ %v0_ff74173, %dec_label_pc_ff74.preheader ], [ %v1_1000c, %dec_label_pc_fff4 ]
  %v1_ff74 = add i32 %v1_ff98, -1
  %v2_ff74 = inttoptr i32 %v1_ff74 to i8*
  %v3_ff74 = load i8, i8* %v2_ff74, align 1
  %v4_ff74 = zext i8 %v3_ff74 to i32
  store i32 %v4_ff74, i32* %r3.global-to-local, align 4
  %v2_ff78 = icmp eq i8 %v3_ff74, -1
  store i1 %v2_ff78, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_ff78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ff78, label %dec_label_pc_ff80, label %dec_label_pc_10014

dec_label_pc_ff80:                                ; preds = %dec_label_pc_ff74
  %v0_ff80 = load i32, i32* @sb, align 4
  %v2_ff80 = add i32 %v0_ff80, %v1_ff6c
  store i32 %v2_ff80, i32* %r2.global-to-local, align 4
  %v3_ff84 = icmp uge i32 %v2_ff80, %v1_ff98
  store i1 %v3_ff84, i1* %cpsr_c.global-to-local, align 1
  %v9_ff84 = icmp eq i32 %v2_ff80, %v1_ff98
  store i1 %v9_ff84, i1* %cpsr_z.global-to-local, align 1
  %v2_ff88 = xor i1 %v3_ff84, true
  %v3_ff88 = or i1 %v9_ff84, %v2_ff88
  br i1 %v3_ff88, label %dec_label_pc_10014, label %dec_label_pc_ff8c

dec_label_pc_ff8c:                                ; preds = %dec_label_pc_ff80
  %v1_ff8c = inttoptr i32 %v1_ff98 to i8*
  %v2_ff8c = load i8, i8* %v1_ff8c, align 1
  %v3_ff8c = zext i8 %v2_ff8c to i32
  store i32 %v3_ff8c, i32* %r3.global-to-local, align 4
  %v2_ff90 = icmp eq i8 %v2_ff8c, -1
  store i1 %v2_ff90, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_ff90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ff90, label %dec_label_pc_ff6c.loopexit, label %dec_label_pc_ffa4

dec_label_pc_ffa4:                                ; preds = %dec_label_pc_ff8c
  %v2_ffa4 = icmp ugt i8 %v2_ff8c, -4
  store i1 %v2_ffa4, i1* %cpsr_c.global-to-local, align 1
  %v7_ffa4 = icmp eq i8 %v2_ff8c, -3
  store i1 %v7_ffa4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ffa4, label %dec_label_pc_106a4, label %dec_label_pc_ffac

dec_label_pc_ffac:                                ; preds = %dec_label_pc_ffa4
  %v1_ffac = add i32 %v1_ff94, 2
  store i32 %v1_ffac, i32* %r3.global-to-local, align 4
  %v3_ffb0 = icmp uge i32 %v2_ff80, %v1_ffac
  store i1 %v3_ffb0, i1* %cpsr_c.global-to-local, align 1
  %v9_ffb0 = icmp eq i32 %v2_ff80, %v1_ffac
  store i1 %v9_ffb0, i1* %cpsr_z.global-to-local, align 1
  %v2_ffb4 = xor i1 %v3_ffb0, true
  %v3_ffb4 = or i1 %v9_ffb0, %v2_ffb4
  br i1 %v3_ffb4, label %dec_label_pc_10014, label %dec_label_pc_ffb8

dec_label_pc_ffb8:                                ; preds = %bb378, %dec_label_pc_106f8, %bb377, %dec_label_pc_ffac
  %v0_ffb8 = load i32, i32* @r4, align 4
  %v1_ffb8 = inttoptr i32 %v0_ffb8 to i8*
  %v2_ffb8 = load i8, i8* %v1_ffb8, align 1
  %v3_ffb8 = zext i8 %v2_ffb8 to i32
  store i32 %v3_ffb8, i32* %r3.global-to-local, align 4
  %v2_ffbc = icmp ugt i8 %v2_ffb8, -4
  store i1 %v2_ffbc, i1* %cpsr_c.global-to-local, align 1
  %v7_ffbc = icmp eq i8 %v2_ffb8, -3
  store i1 %v7_ffbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ffbc, label %bb349, label %dec_label_pc_ffc8

bb349:                                            ; preds = %dec_label_pc_ffb8
  %v1_ffc0 = load i32, i32* @r8, align 4
  %v2_ffc0 = trunc i32 %v1_ffc0 to i8
  store i8 %v2_ffc0, i8* %v1_ffb8, align 1
  %v0_ffc4.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ffc4.pr, label %bb351, label %.dec_label_pc_ffc8_crit_edge

.dec_label_pc_ffc8_crit_edge:                     ; preds = %bb349
  %v0_ffc8.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ffc8

dec_label_pc_ffc8:                                ; preds = %.dec_label_pc_ffc8_crit_edge, %dec_label_pc_ffb8
  %v0_ffc8 = phi i32 [ %v0_ffc8.pre, %.dec_label_pc_ffc8_crit_edge ], [ %v3_ffb8, %dec_label_pc_ffb8 ]
  %v2_ffc8 = icmp ugt i32 %v0_ffc8, 250
  store i1 %v2_ffc8, i1* %cpsr_c.global-to-local, align 1
  %v7_ffc8 = icmp eq i32 %v0_ffc8, 251
  store i1 %v7_ffc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ffc8, label %bb350, label %bb351

bb350:                                            ; preds = %dec_label_pc_ffc8
  %v1_ffcc = load i32, i32* %sl.global-to-local, align 4
  %v2_ffcc = trunc i32 %v1_ffcc to i8
  %v3_ffcc = load i32, i32* @r4, align 4
  %v4_ffcc = inttoptr i32 %v3_ffcc to i8*
  store i8 %v2_ffcc, i8* %v4_ffcc, align 1
  br label %bb351

bb351:                                            ; preds = %bb349, %dec_label_pc_ffc8, %bb350
  %v0_ffd0 = load i32, i32* @r4, align 4
  %v1_ffd0 = add i32 %v0_ffd0, 1
  %v2_ffd0 = inttoptr i32 %v1_ffd0 to i8*
  %v3_ffd0 = load i8, i8* %v2_ffd0, align 1
  %v4_ffd0 = zext i8 %v3_ffd0 to i32
  store i32 %v4_ffd0, i32* %r3.global-to-local, align 4
  %v2_ffd4 = icmp ugt i8 %v3_ffd0, -4
  store i1 %v2_ffd4, i1* %cpsr_c.global-to-local, align 1
  %v7_ffd4 = icmp eq i8 %v3_ffd0, -3
  store i1 %v7_ffd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ffd4, label %bb352, label %dec_label_pc_ffe0

bb352:                                            ; preds = %bb351
  %v1_ffd8 = load i32, i32* @r8, align 4
  %v2_ffd8 = trunc i32 %v1_ffd8 to i8
  store i8 %v2_ffd8, i8* %v2_ffd0, align 1
  %v0_ffdc.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ffdc.pr, label %bb354, label %.dec_label_pc_ffe0_crit_edge

.dec_label_pc_ffe0_crit_edge:                     ; preds = %bb352
  %v0_ffe0.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ffe0

dec_label_pc_ffe0:                                ; preds = %.dec_label_pc_ffe0_crit_edge, %bb351
  %v0_ffe0 = phi i32 [ %v0_ffe0.pre, %.dec_label_pc_ffe0_crit_edge ], [ %v4_ffd0, %bb351 ]
  %v2_ffe0 = icmp ugt i32 %v0_ffe0, 250
  store i1 %v2_ffe0, i1* %cpsr_c.global-to-local, align 1
  %v7_ffe0 = icmp eq i32 %v0_ffe0, 251
  store i1 %v7_ffe0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ffe0, label %bb353, label %bb354

bb353:                                            ; preds = %dec_label_pc_ffe0
  %v1_ffe4 = load i32, i32* %sl.global-to-local, align 4
  %v2_ffe4 = trunc i32 %v1_ffe4 to i8
  %v3_ffe4 = load i32, i32* @r4, align 4
  %v4_ffe4 = add i32 %v3_ffe4, 1
  %v5_ffe4 = inttoptr i32 %v4_ffe4 to i8*
  store i8 %v2_ffe4, i8* %v5_ffe4, align 1
  br label %bb354

bb354:                                            ; preds = %bb352, %dec_label_pc_ffe0, %bb353
  %v0_ffe8 = load i32, i32* @r6, align 4
  %v1_ffe8 = add i32 %v0_ffe8, 4
  %v2_ffe8 = inttoptr i32 %v1_ffe8 to i32*
  %v3_ffe8 = load i32, i32* %v2_ffe8, align 4
  store i32 %v3_ffe8, i32* %r0.global-to-local, align 4
  %v0_ffec = load i32, i32* @r5, align 4
  br label %dec_label_pc_fff4

dec_label_pc_fff4:                                ; preds = %dec_label_pc_10800, %bb354
  %v0_fff8 = phi i32 [ %v3_10818, %dec_label_pc_10800 ], [ %v3_ffe8, %bb354 ]
  %storemerge5 = phi i32 [ %v2_106bc, %dec_label_pc_10800 ], [ %v0_ffec, %bb354 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_10800 ], [ 3, %bb354 ]
  store i32 %storemerge5, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fff8 = inttoptr i32 %storemerge5 to i32*
  %v5_fff8 = call i32 @function_121bc(i32 %v0_fff8, i32* %v4_fff8, i32 %storemerge, i32 16384)
  store i32 %v5_fff8, i32* %r0.global-to-local, align 4
  %v0_fffc = load i32, i32* @r6, align 4
  %v1_fffc = add i32 %v0_fffc, 24
  %v2_fffc = inttoptr i32 %v1_fffc to i32*
  %v3_fffc = load i32, i32* %v2_fffc, align 4
  store i32 %v3_fffc, i32* %ip.global-to-local, align 4
  %v0_10000 = load i32, i32* @r7, align 4
  %v1_10000 = add i32 %v0_10000, 3
  store i32 %v1_10000, i32* @r7, align 4
  %v3_10004 = icmp uge i32 %v1_10000, %v3_fffc
  store i1 %v3_10004, i1* %cpsr_c.global-to-local, align 1
  %v9_10004 = icmp eq i32 %v1_10000, %v3_fffc
  store i1 %v9_10004, i1* %cpsr_z.global-to-local, align 1
  %v0_10008 = load i32, i32* @r5, align 4
  %v1_10008 = add i32 %v0_10008, 3
  store i32 %v1_10008, i32* @r5, align 4
  %v0_1000c = load i32, i32* @r4, align 4
  %v1_1000c = add i32 %v0_1000c, 3
  store i32 %v1_1000c, i32* @r4, align 4
  %v5_10010 = icmp slt i32 %v1_10000, %v3_fffc
  br i1 %v5_10010, label %dec_label_pc_ff74, label %dec_label_pc_10014

dec_label_pc_10014:                               ; preds = %dec_label_pc_ff6c.loopexit, %dec_label_pc_ff74, %dec_label_pc_fff4, %dec_label_pc_ffac, %dec_label_pc_ff80, %dec_label_pc_ff4c, %dec_label_pc_106a4.dec_label_pc_10014.loopexit_crit_edge
  %v6_1001c = phi i32 [ %v0_106c8, %dec_label_pc_106a4.dec_label_pc_10014.loopexit_crit_edge ], [ %v0_ff14, %dec_label_pc_ff4c ], [ %v6_1001c191, %dec_label_pc_ff74 ], [ %v0_fffc, %dec_label_pc_fff4 ], [ %v6_1001c191, %dec_label_pc_ffac ], [ %v6_1001c191, %dec_label_pc_ff80 ], [ %v6_1001c191, %dec_label_pc_ff6c.loopexit ]
  %v0_10024.pre = phi i32 [ %v0_10014.pre.pre, %dec_label_pc_106a4.dec_label_pc_10014.loopexit_crit_edge ], [ 0, %dec_label_pc_ff4c ], [ %v1_ff9c, %dec_label_pc_ff74 ], [ %v1_10000, %dec_label_pc_fff4 ], [ %v1_ff9c, %dec_label_pc_ffac ], [ %v1_ff9c, %dec_label_pc_ff80 ], [ %v2_ff9c, %dec_label_pc_ff6c.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10014 = icmp eq i32 %v0_10024.pre, 0
  store i1 %v2_10014, i1* %cpsr_z.global-to-local, align 1
  %tmp355 = icmp slt i32 %v0_10024.pre, 1
  br i1 %tmp355, label %dec_label_pc_10024, label %.thread236

.thread236:                                       ; preds = %dec_label_pc_10014
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_1001c = add i32 %v6_1001c, 12
  %v8_1001c = inttoptr i32 %v7_1001c to i32*
  store i32 3, i32* %v8_1001c, align 4
  br label %dec_label_pc_10464

dec_label_pc_10024:                               ; preds = %dec_label_pc_10014, %dec_label_pc_10644, %dec_label_pc_10590, %dec_label_pc_104dc, %dec_label_pc_103b4, %dec_label_pc_1027c, %dec_label_pc_101c8, %dec_label_pc_10130, %dec_label_pc_10098
  %v0_10024 = phi i32 [ %v1_10638, %dec_label_pc_10644 ], [ %v1_10584, %dec_label_pc_10590 ], [ %v1_104d0, %dec_label_pc_104dc ], [ %v0_103ac, %dec_label_pc_103b4 ], [ %v1_10270, %dec_label_pc_1027c ], [ %v1_101bc, %dec_label_pc_101c8 ], [ %v0_10130, %dec_label_pc_10130 ], [ %v0_10098, %dec_label_pc_10098 ], [ %v0_10024.pre, %dec_label_pc_10014 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10024 = icmp eq i32 %v0_10024, 0
  store i1 %v2_10024, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10024, label %dec_label_pc_fe90.loopexit, label %dec_label_pc_1002c

dec_label_pc_1002c:                               ; preds = %dec_label_pc_10024
  %v0_1002c = load i32, i32* @r6, align 4
  %v1_1002c = add i32 %v0_1002c, 24
  %v2_1002c = inttoptr i32 %v1_1002c to i32*
  %v3_1002c = load i32, i32* %v2_1002c, align 4
  store i32 %v3_1002c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10464

dec_label_pc_10034:                               ; preds = %dec_label_pc_ff14
  %v1_10034 = add i32 %v0_ff14, 24
  %v2_10034 = inttoptr i32 %v1_10034 to i32*
  %v3_10034 = load i32, i32* %v2_10034, align 4
  store i32 %v3_10034, i32* %r3.global-to-local, align 4
  %v1_10038 = add i32 %v3_10034, -1
  store i32 %v1_10038, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1003c = icmp eq i32 %v1_10038, 0
  store i1 %v2_1003c, i1* %cpsr_z.global-to-local, align 1
  %v5_10040 = icmp sgt i32 %v1_10038, 0
  br i1 %v5_10040, label %dec_label_pc_10068, label %dec_label_pc_fdf0

dec_label_pc_10048:                               ; preds = %bb356
  %v2_10048 = icmp ugt i8 %v3_1006c, 35
  store i1 %v2_10048, i1* %cpsr_c.global-to-local, align 1
  %v7_10048 = icmp eq i8 %v3_1006c, 36
  store i1 %v7_10048, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10048, label %dec_label_pc_1007c, label %dec_label_pc_10050

dec_label_pc_10050:                               ; preds = %dec_label_pc_10048
  %v2_10050 = icmp ugt i8 %v3_1006c, 34
  store i1 %v2_10050, i1* %cpsr_c.global-to-local, align 1
  %v7_10050 = icmp eq i8 %v3_1006c, 35
  store i1 %v7_10050, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10050, label %dec_label_pc_1007c, label %dec_label_pc_10058

dec_label_pc_10058:                               ; preds = %dec_label_pc_10050
  %v2_10058 = icmp ugt i8 %v3_1006c, 36
  store i1 %v2_10058, i1* %cpsr_c.global-to-local, align 1
  %v7_10058 = icmp eq i8 %v3_1006c, 37
  store i1 %v7_10058, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10058, label %dec_label_pc_1007c, label %dec_label_pc_10060

dec_label_pc_10060:                               ; preds = %dec_label_pc_10058
  %v1_10060 = add i32 %v0_1007c, -1
  store i32 %v1_10060, i32* %r0.global-to-local, align 4
  %v2_10060 = icmp ne i32 %v0_1007c, 0
  store i1 %v2_10060, i1* %cpsr_c.global-to-local, align 1
  %v7_10060 = icmp eq i32 %v0_1007c, 1
  store i1 %v7_10060, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10060, label %dec_label_pc_fdf0, label %dec_label_pc_10068

dec_label_pc_10068:                               ; preds = %dec_label_pc_10034, %dec_label_pc_10060
  %v0_1007c = phi i32 [ %v1_10060, %dec_label_pc_10060 ], [ %v1_10038, %dec_label_pc_10034 ]
  %v2_10068 = add i32 %v0_1007c, %v0_ff14
  store i32 %v2_10068, i32* %r3.global-to-local, align 4
  %v1_1006c = add i32 %v2_10068, 28
  %v2_1006c = inttoptr i32 %v1_1006c to i8*
  %v3_1006c = load i8, i8* %v2_1006c, align 1
  %v4_1006c = zext i8 %v3_1006c to i32
  store i32 %v4_1006c, i32* %r3.global-to-local, align 4
  %v2_10070 = icmp ugt i8 %v3_1006c, 61
  store i1 %v2_10070, i1* %cpsr_c.global-to-local, align 1
  %v7_10070 = icmp eq i8 %v3_1006c, 62
  store i1 %v7_10070, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10070, label %dec_label_pc_1007c, label %bb356

bb356:                                            ; preds = %dec_label_pc_10068
  %v3_10074 = icmp ugt i8 %v3_1006c, 57
  store i1 %v3_10074, i1* %cpsr_c.global-to-local, align 1
  %v8_10074 = icmp eq i8 %v3_1006c, 58
  store i1 %v8_10074, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10074, label %dec_label_pc_1007c, label %dec_label_pc_10048

dec_label_pc_1007c:                               ; preds = %dec_label_pc_10068, %bb356, %dec_label_pc_10058, %dec_label_pc_10050, %dec_label_pc_10048
  %v1_1007c = add i32 %v0_1007c, 1
  store i32 %v1_1007c, i32* @r7, align 4
  %v2_10080 = icmp eq i32 %v1_1007c, -1
  store i1 %v2_10080, i1* %cpsr_c.global-to-local, align 1
  %v7_10080 = icmp eq i32 %v0_1007c, -2
  store i1 %v7_10080, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10080, label %dec_label_pc_fdf0, label %dec_label_pc_10088

dec_label_pc_10088:                               ; preds = %dec_label_pc_1007c
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_1008c = call i32 @function_10a30(i32 28)
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_10094 = call i32 @function_10a30(i32 29)
  store i32 %v1_10094, i32* %r0.global-to-local, align 4
  %v0_10098.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10098

dec_label_pc_10098:                               ; preds = %dec_label_pc_fe78, %dec_label_pc_10088
  %v0_10098 = phi i32 [ %v0_fe88, %dec_label_pc_fe78 ], [ %v0_10098.pre, %dec_label_pc_10088 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10098 = icmp eq i32 %v0_10098, 0
  store i1 %v2_10098, i1* %cpsr_z.global-to-local, align 1
  %tmp357 = icmp slt i32 %v0_10098, 1
  br i1 %tmp357, label %dec_label_pc_10024, label %dec_label_pc_100a0

dec_label_pc_100a0:                               ; preds = %dec_label_pc_10098
  %v0_100a0 = load i32, i32* @r6, align 4
  %v1_100a0 = inttoptr i32 %v0_100a0 to i32*
  %v2_100a0 = load i32, i32* %v1_100a0, align 4
  store i32 %v2_100a0, i32* %r3.global-to-local, align 4
  %v1_100a4 = add i32 %v0_100a0, 4
  %v2_100a4 = inttoptr i32 %v1_100a4 to i32*
  %v3_100a4 = load i32, i32* %v2_100a4, align 4
  store i32 %v3_100a4, i32* %r0.global-to-local, align 4
  %v1_100a8 = add i32 %v2_100a0, 12
  %v2_100a8 = inttoptr i32 %v1_100a8 to i8*
  %v3_100a8 = load i8, i8* %v2_100a8, align 1
  %v4_100a8 = zext i8 %v3_100a8 to i32
  store i32 %v4_100a8, i32* %r2.global-to-local, align 4
  %v1_100ac = inttoptr i32 %v2_100a0 to i32*
  %v2_100ac = load i32, i32* %v1_100ac, align 4
  store i32 %v2_100ac, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_100b4 = inttoptr i32 %v2_100ac to i32*
  %v5_100b4 = call i32 @function_121bc(i32 %v3_100a4, i32* %v4_100b4, i32 %v4_100a8, i32 16384)
  store i32 %v5_100b4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_100bc = load i32, i32* @r6, align 4
  %v1_100bc = add i32 %v0_100bc, 4
  %v2_100bc = inttoptr i32 %v1_100bc to i32*
  %v3_100bc = load i32, i32* %v2_100bc, align 4
  store i32 %v3_100bc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1421c.190 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_100c8 = call i32 @function_121bc(i32 %v3_100bc, i32* bitcast ([3 x i8]* @global_var_1421c.190 to i32*), i32 2, i32 16384)
  store i32 %v5_100c8, i32* %r0.global-to-local, align 4
  %v0_100cc = load i32, i32* @r6, align 4
  %v1_100cc = add i32 %v0_100cc, 24
  %v2_100cc = inttoptr i32 %v1_100cc to i32*
  %v3_100cc = load i32, i32* %v2_100cc, align 4
  store i32 %v3_100cc, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_100d4 = add i32 %v0_100cc, 12
  %v3_100d4 = inttoptr i32 %v2_100d4 to i32*
  store i32 4, i32* %v3_100d4, align 4
  br label %dec_label_pc_10464

dec_label_pc_100dc:                               ; preds = %dec_label_pc_ff14
  %v1_100dc = add i32 %v0_ff14, 24
  %v2_100dc = inttoptr i32 %v1_100dc to i32*
  %v3_100dc = load i32, i32* %v2_100dc, align 4
  store i32 %v3_100dc, i32* %r3.global-to-local, align 4
  %v1_100e0 = add i32 %v3_100dc, -1
  store i32 %v1_100e0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_100e4 = icmp eq i32 %v1_100e0, 0
  store i1 %v2_100e4, i1* %cpsr_z.global-to-local, align 1
  %v5_100e8 = icmp sgt i32 %v1_100e0, 0
  br i1 %v5_100e8, label %dec_label_pc_10108, label %dec_label_pc_10704

dec_label_pc_100f0:                               ; preds = %bb358
  %v2_100f0 = icmp ugt i8 %v3_1010c, 35
  store i1 %v2_100f0, i1* %cpsr_c.global-to-local, align 1
  %v7_100f0 = icmp eq i8 %v3_1010c, 36
  store i1 %v7_100f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_100f0, label %dec_label_pc_1011c, label %dec_label_pc_100f8

dec_label_pc_100f8:                               ; preds = %dec_label_pc_100f0
  %v2_100f8 = icmp ugt i8 %v3_1010c, 34
  store i1 %v2_100f8, i1* %cpsr_c.global-to-local, align 1
  %v7_100f8 = icmp eq i8 %v3_1010c, 35
  store i1 %v7_100f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_100f8, label %dec_label_pc_1011c, label %dec_label_pc_10100

dec_label_pc_10100:                               ; preds = %dec_label_pc_100f8
  %v1_10100 = add i32 %v0_1011c, -1
  store i32 %v1_10100, i32* %r0.global-to-local, align 4
  %v2_10100 = icmp ne i32 %v0_1011c, 0
  store i1 %v2_10100, i1* %cpsr_c.global-to-local, align 1
  %v7_10100 = icmp eq i32 %v0_1011c, 1
  store i1 %v7_10100, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10100, label %dec_label_pc_10704, label %dec_label_pc_10108

dec_label_pc_10108:                               ; preds = %dec_label_pc_100dc, %dec_label_pc_10100
  %v0_1011c = phi i32 [ %v1_10100, %dec_label_pc_10100 ], [ %v1_100e0, %dec_label_pc_100dc ]
  %v2_10108 = add i32 %v0_1011c, %v0_ff14
  store i32 %v2_10108, i32* %r3.global-to-local, align 4
  %v1_1010c = add i32 %v2_10108, 28
  %v2_1010c = inttoptr i32 %v1_1010c to i8*
  %v3_1010c = load i8, i8* %v2_1010c, align 1
  %v4_1010c = zext i8 %v3_1010c to i32
  store i32 %v4_1010c, i32* %r3.global-to-local, align 4
  %v2_10110 = icmp ugt i8 %v3_1010c, 61
  store i1 %v2_10110, i1* %cpsr_c.global-to-local, align 1
  %v7_10110 = icmp eq i8 %v3_1010c, 62
  store i1 %v7_10110, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10110, label %dec_label_pc_1011c, label %bb358

bb358:                                            ; preds = %dec_label_pc_10108
  %v3_10114 = icmp ugt i8 %v3_1010c, 57
  store i1 %v3_10114, i1* %cpsr_c.global-to-local, align 1
  %v8_10114 = icmp eq i8 %v3_1010c, 58
  store i1 %v8_10114, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10114, label %dec_label_pc_1011c, label %dec_label_pc_100f0

dec_label_pc_1011c:                               ; preds = %dec_label_pc_10108, %bb358, %dec_label_pc_100f8, %dec_label_pc_100f0
  %v1_1011c = add i32 %v0_1011c, 1
  store i32 %v1_1011c, i32* @r7, align 4
  %v2_10120 = icmp eq i32 %v1_1011c, -1
  store i1 %v2_10120, i1* %cpsr_c.global-to-local, align 1
  %v7_10120 = icmp eq i32 %v0_1011c, -2
  store i1 %v7_10120, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10120, label %dec_label_pc_10704, label %dec_label_pc_10128

dec_label_pc_10128:                               ; preds = %dec_label_pc_1011c
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_1012c = call i32 @function_10a30(i32 27)
  store i32 %v1_1012c, i32* %r0.global-to-local, align 4
  %v0_10130.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10130

dec_label_pc_10130:                               ; preds = %dec_label_pc_10744, %dec_label_pc_10128
  %v0_10130 = phi i32 [ %v0_1074c, %dec_label_pc_10744 ], [ %v0_10130.pre, %dec_label_pc_10128 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10130 = icmp eq i32 %v0_10130, 0
  store i1 %v2_10130, i1* %cpsr_z.global-to-local, align 1
  %tmp359 = icmp slt i32 %v0_10130, 1
  br i1 %tmp359, label %dec_label_pc_10024, label %dec_label_pc_10138

dec_label_pc_10138:                               ; preds = %dec_label_pc_10130
  %v0_10138 = load i32, i32* @r6, align 4
  %v1_10138 = inttoptr i32 %v0_10138 to i32*
  %v2_10138 = load i32, i32* %v1_10138, align 4
  store i32 %v2_10138, i32* %r3.global-to-local, align 4
  %v1_1013c = add i32 %v0_10138, 4
  %v2_1013c = inttoptr i32 %v1_1013c to i32*
  %v3_1013c = load i32, i32* %v2_1013c, align 4
  store i32 %v3_1013c, i32* %r0.global-to-local, align 4
  %v1_10140 = add i32 %v2_10138, 13
  %v2_10140 = inttoptr i32 %v1_10140 to i8*
  %v3_10140 = load i8, i8* %v2_10140, align 1
  %v4_10140 = zext i8 %v3_10140 to i32
  store i32 %v4_10140, i32* %r2.global-to-local, align 4
  %v1_10144 = add i32 %v2_10138, 4
  %v2_10144 = inttoptr i32 %v1_10144 to i32*
  %v3_10144 = load i32, i32* %v2_10144, align 4
  store i32 %v3_10144, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_1014c = inttoptr i32 %v3_10144 to i32*
  %v5_1014c = call i32 @function_121bc(i32 %v3_1013c, i32* %v4_1014c, i32 %v4_10140, i32 16384)
  store i32 %v5_1014c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_10154 = load i32, i32* @r6, align 4
  %v1_10154 = add i32 %v0_10154, 4
  %v2_10154 = inttoptr i32 %v1_10154 to i32*
  %v3_10154 = load i32, i32* %v2_10154, align 4
  store i32 %v3_10154, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1421c.190 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_10160 = call i32 @function_121bc(i32 %v3_10154, i32* bitcast ([3 x i8]* @global_var_1421c.190 to i32*), i32 2, i32 16384)
  store i32 %v5_10160, i32* %r0.global-to-local, align 4
  %v0_10164 = load i32, i32* @r6, align 4
  %v1_10164 = add i32 %v0_10164, 24
  %v2_10164 = inttoptr i32 %v1_10164 to i32*
  %v3_10164 = load i32, i32* %v2_10164, align 4
  store i32 %v3_10164, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_1016c = add i32 %v0_10164, 12
  %v3_1016c = inttoptr i32 %v2_1016c to i32*
  store i32 5, i32* %v3_1016c, align 4
  br label %dec_label_pc_10464

dec_label_pc_10174:                               ; preds = %dec_label_pc_ff14
  %v1_10174 = add i32 %v0_ff14, 24
  %v2_10174 = inttoptr i32 %v1_10174 to i32*
  %v3_10174 = load i32, i32* %v2_10174, align 4
  store i32 %v3_10174, i32* %ip.global-to-local, align 4
  %v1_10178 = add i32 %v3_10174, -1
  store i32 %v1_10178, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1017c = icmp eq i32 %v1_10178, 0
  store i1 %v2_1017c, i1* %cpsr_z.global-to-local, align 1
  %v5_10180 = icmp sgt i32 %v1_10178, 0
  br i1 %v5_10180, label %dec_label_pc_101a8, label %dec_label_pc_fe94.backedge.thread

dec_label_pc_10188:                               ; preds = %bb360
  %v2_10188 = icmp ugt i8 %v3_101ac, 35
  store i1 %v2_10188, i1* %cpsr_c.global-to-local, align 1
  %v7_10188 = icmp eq i8 %v3_101ac, 36
  store i1 %v7_10188, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10188, label %dec_label_pc_101bc, label %dec_label_pc_10190

dec_label_pc_10190:                               ; preds = %dec_label_pc_10188
  %v2_10190 = icmp ugt i8 %v3_101ac, 34
  store i1 %v2_10190, i1* %cpsr_c.global-to-local, align 1
  %v7_10190 = icmp eq i8 %v3_101ac, 35
  store i1 %v7_10190, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10190, label %dec_label_pc_101bc, label %dec_label_pc_10198

dec_label_pc_10198:                               ; preds = %dec_label_pc_10190
  %v2_10198 = icmp ugt i8 %v3_101ac, 36
  store i1 %v2_10198, i1* %cpsr_c.global-to-local, align 1
  %v7_10198 = icmp eq i8 %v3_101ac, 37
  store i1 %v7_10198, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10198, label %dec_label_pc_101bc, label %dec_label_pc_101a0

dec_label_pc_101a0:                               ; preds = %dec_label_pc_10198
  %v1_101a0 = add i32 %v0_101bc, -1
  store i32 %v1_101a0, i32* %r0.global-to-local, align 4
  %v2_101a0 = icmp ne i32 %v0_101bc, 0
  store i1 %v2_101a0, i1* %cpsr_c.global-to-local, align 1
  %v7_101a0 = icmp eq i32 %v0_101bc, 1
  store i1 %v7_101a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101a0, label %dec_label_pc_fe94.backedge.thread491, label %dec_label_pc_101a8

dec_label_pc_101a8:                               ; preds = %dec_label_pc_10174, %dec_label_pc_101a0
  %v0_101bc = phi i32 [ %v1_101a0, %dec_label_pc_101a0 ], [ %v1_10178, %dec_label_pc_10174 ]
  %v2_101a8 = add i32 %v0_101bc, %v0_ff14
  store i32 %v2_101a8, i32* %r3.global-to-local, align 4
  %v1_101ac = add i32 %v2_101a8, 28
  %v2_101ac = inttoptr i32 %v1_101ac to i8*
  %v3_101ac = load i8, i8* %v2_101ac, align 1
  %v4_101ac = zext i8 %v3_101ac to i32
  store i32 %v4_101ac, i32* %r3.global-to-local, align 4
  %v2_101b0 = icmp ugt i8 %v3_101ac, 61
  store i1 %v2_101b0, i1* %cpsr_c.global-to-local, align 1
  %v7_101b0 = icmp eq i8 %v3_101ac, 62
  store i1 %v7_101b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101b0, label %dec_label_pc_101bc, label %bb360

bb360:                                            ; preds = %dec_label_pc_101a8
  %v3_101b4 = icmp ugt i8 %v3_101ac, 57
  store i1 %v3_101b4, i1* %cpsr_c.global-to-local, align 1
  %v8_101b4 = icmp eq i8 %v3_101ac, 58
  store i1 %v8_101b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_101b4, label %dec_label_pc_101bc, label %dec_label_pc_10188

dec_label_pc_101bc:                               ; preds = %dec_label_pc_101a8, %bb360, %dec_label_pc_10198, %dec_label_pc_10190, %dec_label_pc_10188
  %v1_101bc = add i32 %v0_101bc, 1
  store i32 %v1_101bc, i32* @r7, align 4
  %v2_101c0 = icmp eq i32 %v1_101bc, -1
  store i1 %v2_101c0, i1* %cpsr_c.global-to-local, align 1
  %v7_101c0 = icmp eq i32 %v0_101bc, -2
  store i1 %v7_101c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101c0, label %dec_label_pc_fe94.backedge.thread491, label %dec_label_pc_101c8

dec_label_pc_101c8:                               ; preds = %dec_label_pc_101bc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_101c8 = icmp eq i32 %v1_101bc, 0
  store i1 %v2_101c8, i1* %cpsr_z.global-to-local, align 1
  %tmp361 = icmp slt i32 %v1_101bc, 1
  br i1 %tmp361, label %dec_label_pc_10024, label %dec_label_pc_101d0

dec_label_pc_101d0:                               ; preds = %dec_label_pc_101c8
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_101d4 = call i32 @function_10ae8(i32 7)
  store i32 %v2_fe04, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r0.global-to-local, align 4
  %v3_101e4 = call i32 @function_10a04(i32 7, i32* nonnull %stack_var_-56)
  store i32 %v3_101e4, i32* %r0.global-to-local, align 4
  %v3_101e8 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_101e8, i32* %r2.global-to-local, align 4
  store i32 %v3_101e4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_101f4 = load i32, i32* @r6, align 4
  %v1_101f4 = add i32 %v0_101f4, 4
  %v2_101f4 = inttoptr i32 %v1_101f4 to i32*
  %v3_101f4 = load i32, i32* %v2_101f4, align 4
  store i32 %v3_101f4, i32* %r0.global-to-local, align 4
  %v4_101f8 = inttoptr i32 %v3_101e4 to i32*
  %v5_101f8 = call i32 @function_121bc(i32 %v3_101f4, i32* %v4_101f8, i32 %v3_101e8, i32 16384)
  store i32 %v5_101f8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1421c.190 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10208 = load i32, i32* @r6, align 4
  %v1_10208 = add i32 %v0_10208, 4
  %v2_10208 = inttoptr i32 %v1_10208 to i32*
  %v3_10208 = load i32, i32* %v2_10208, align 4
  store i32 %v3_10208, i32* %r0.global-to-local, align 4
  %v5_1020c = call i32 @function_121bc(i32 %v3_10208, i32* bitcast ([3 x i8]* @global_var_1421c.190 to i32*), i32 2, i32 16384)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_10214 = call i32 @function_10a30(i32 7)
  store i32 %v1_10214, i32* %r0.global-to-local, align 4
  %v0_10218 = load i32, i32* @r6, align 4
  %v1_10218 = add i32 %v0_10218, 24
  %v2_10218 = inttoptr i32 %v1_10218 to i32*
  %v3_10218 = load i32, i32* %v2_10218, align 4
  store i32 %v3_10218, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_10220 = add i32 %v0_10218, 12
  %v3_10220 = inttoptr i32 %v2_10220 to i32*
  store i32 6, i32* %v3_10220, align 4
  br label %dec_label_pc_10464

dec_label_pc_10228:                               ; preds = %dec_label_pc_ff14
  %v1_10228 = add i32 %v0_ff14, 24
  %v2_10228 = inttoptr i32 %v1_10228 to i32*
  %v3_10228 = load i32, i32* %v2_10228, align 4
  store i32 %v3_10228, i32* %ip.global-to-local, align 4
  %v1_1022c = add i32 %v3_10228, -1
  store i32 %v1_1022c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10230 = icmp eq i32 %v1_1022c, 0
  store i1 %v2_10230, i1* %cpsr_z.global-to-local, align 1
  %v5_10234 = icmp sgt i32 %v1_1022c, 0
  br i1 %v5_10234, label %dec_label_pc_1025c, label %dec_label_pc_fe94.backedge.thread

dec_label_pc_1023c:                               ; preds = %bb362
  %v2_1023c = icmp ugt i8 %v3_10260, 35
  store i1 %v2_1023c, i1* %cpsr_c.global-to-local, align 1
  %v7_1023c = icmp eq i8 %v3_10260, 36
  store i1 %v7_1023c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1023c, label %dec_label_pc_10270, label %dec_label_pc_10244

dec_label_pc_10244:                               ; preds = %dec_label_pc_1023c
  %v2_10244 = icmp ugt i8 %v3_10260, 34
  store i1 %v2_10244, i1* %cpsr_c.global-to-local, align 1
  %v7_10244 = icmp eq i8 %v3_10260, 35
  store i1 %v7_10244, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10244, label %dec_label_pc_10270, label %dec_label_pc_1024c

dec_label_pc_1024c:                               ; preds = %dec_label_pc_10244
  %v2_1024c = icmp ugt i8 %v3_10260, 36
  store i1 %v2_1024c, i1* %cpsr_c.global-to-local, align 1
  %v7_1024c = icmp eq i8 %v3_10260, 37
  store i1 %v7_1024c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1024c, label %dec_label_pc_10270, label %dec_label_pc_10254

dec_label_pc_10254:                               ; preds = %dec_label_pc_1024c
  %v1_10254 = add i32 %v0_10270, -1
  store i32 %v1_10254, i32* %r0.global-to-local, align 4
  %v2_10254 = icmp ne i32 %v0_10270, 0
  store i1 %v2_10254, i1* %cpsr_c.global-to-local, align 1
  %v7_10254 = icmp eq i32 %v0_10270, 1
  store i1 %v7_10254, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10254, label %dec_label_pc_fe94.backedge.thread491, label %dec_label_pc_1025c

dec_label_pc_1025c:                               ; preds = %dec_label_pc_10228, %dec_label_pc_10254
  %v0_10270 = phi i32 [ %v1_10254, %dec_label_pc_10254 ], [ %v1_1022c, %dec_label_pc_10228 ]
  %v2_1025c = add i32 %v0_10270, %v0_ff14
  store i32 %v2_1025c, i32* %r3.global-to-local, align 4
  %v1_10260 = add i32 %v2_1025c, 28
  %v2_10260 = inttoptr i32 %v1_10260 to i8*
  %v3_10260 = load i8, i8* %v2_10260, align 1
  %v4_10260 = zext i8 %v3_10260 to i32
  store i32 %v4_10260, i32* %r3.global-to-local, align 4
  %v2_10264 = icmp ugt i8 %v3_10260, 61
  store i1 %v2_10264, i1* %cpsr_c.global-to-local, align 1
  %v7_10264 = icmp eq i8 %v3_10260, 62
  store i1 %v7_10264, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10264, label %dec_label_pc_10270, label %bb362

bb362:                                            ; preds = %dec_label_pc_1025c
  %v3_10268 = icmp ugt i8 %v3_10260, 57
  store i1 %v3_10268, i1* %cpsr_c.global-to-local, align 1
  %v8_10268 = icmp eq i8 %v3_10260, 58
  store i1 %v8_10268, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10268, label %dec_label_pc_10270, label %dec_label_pc_1023c

dec_label_pc_10270:                               ; preds = %dec_label_pc_1025c, %bb362, %dec_label_pc_1024c, %dec_label_pc_10244, %dec_label_pc_1023c
  %v1_10270 = add i32 %v0_10270, 1
  store i32 %v1_10270, i32* @r7, align 4
  %v2_10274 = icmp eq i32 %v1_10270, -1
  store i1 %v2_10274, i1* %cpsr_c.global-to-local, align 1
  %v7_10274 = icmp eq i32 %v0_10270, -2
  store i1 %v7_10274, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10274, label %dec_label_pc_fe94.backedge.thread491, label %dec_label_pc_1027c

dec_label_pc_1027c:                               ; preds = %dec_label_pc_10270
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1027c = icmp eq i32 %v1_10270, 0
  store i1 %v2_1027c, i1* %cpsr_z.global-to-local, align 1
  %tmp363 = icmp slt i32 %v1_10270, 1
  br i1 %tmp363, label %dec_label_pc_10024, label %dec_label_pc_10284

dec_label_pc_10284:                               ; preds = %dec_label_pc_1027c
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_10288 = call i32 @function_10ae8(i32 8)
  store i32 %v2_10290, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r0.global-to-local, align 4
  %v3_10298 = call i32 @function_10a04(i32 8, i32* nonnull %stack_var_-48)
  store i32 %v3_10298, i32* %r0.global-to-local, align 4
  %v3_1029c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_1029c, i32* %r2.global-to-local, align 4
  store i32 %v3_10298, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_102a8 = load i32, i32* @r6, align 4
  %v1_102a8 = add i32 %v0_102a8, 4
  %v2_102a8 = inttoptr i32 %v1_102a8 to i32*
  %v3_102a8 = load i32, i32* %v2_102a8, align 4
  store i32 %v3_102a8, i32* %r0.global-to-local, align 4
  %v4_102ac = inttoptr i32 %v3_10298 to i32*
  %v5_102ac = call i32 @function_121bc(i32 %v3_102a8, i32* %v4_102ac, i32 %v3_1029c, i32 16384)
  store i32 %v5_102ac, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1421c.190 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_102bc = load i32, i32* @r6, align 4
  %v1_102bc = add i32 %v0_102bc, 4
  %v2_102bc = inttoptr i32 %v1_102bc to i32*
  %v3_102bc = load i32, i32* %v2_102bc, align 4
  store i32 %v3_102bc, i32* %r0.global-to-local, align 4
  %v5_102c0 = call i32 @function_121bc(i32 %v3_102bc, i32* bitcast ([3 x i8]* @global_var_1421c.190 to i32*), i32 2, i32 16384)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_102c8 = call i32 @function_10a30(i32 8)
  store i32 %v1_102c8, i32* %r0.global-to-local, align 4
  %v0_102cc = load i32, i32* @r6, align 4
  %v1_102cc = add i32 %v0_102cc, 24
  %v2_102cc = inttoptr i32 %v1_102cc to i32*
  %v3_102cc = load i32, i32* %v2_102cc, align 4
  store i32 %v3_102cc, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_102d4 = add i32 %v0_102cc, 12
  %v3_102d4 = inttoptr i32 %v2_102d4 to i32*
  store i32 7, i32* %v3_102d4, align 4
  br label %dec_label_pc_10464

dec_label_pc_10330:                               ; preds = %dec_label_pc_ff14
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_10334 = call i32 @function_10ae8(i32 12)
  store i32 %v2_fe04, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %v3_10344 = call i32 @function_10a04(i32 12, i32* nonnull %stack_var_-56)
  %v3_10348 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10344, i32* %r2.global-to-local, align 4
  %v1_10350 = add i32 %v3_10348, -1
  store i32 %v1_10350, i32* %r3.global-to-local, align 4
  %v0_10354 = load i32, i32* @sb, align 4
  store i32 %v0_10354, i32* %r0.global-to-local, align 4
  %v0_10358 = load i32, i32* @r6, align 4
  %v1_10358 = add i32 %v0_10358, 24
  %v2_10358 = inttoptr i32 %v1_10358 to i32*
  %v3_10358 = load i32, i32* %v2_10358, align 4
  store i32 %v3_10358, i32* %r1.global-to-local, align 4
  %v4_1035c = call i32 @function_111a4(i32 %v0_10354, i32 %v3_10358, i32 %v3_10344, i32 %v1_10350)
  %v3_10360 = icmp eq i32 %v4_1035c, -1
  store i1 %v3_10360, i1* %cpsr_c.global-to-local, align 1
  %v8_10360 = icmp eq i32 %v4_1035c, -1
  store i1 %v8_10360, i1* %cpsr_z.global-to-local, align 1
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_1036c = call i32 @function_10a30(i32 12)
  br i1 %v3_10360, label %dec_label_pc_10368, label %dec_label_pc_10758

dec_label_pc_10368:                               ; preds = %dec_label_pc_10330
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_10374 = call i32 @function_10ae8(i32 11)
  store i32 %v2_fe04, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v3_10384 = call i32 @function_10a04(i32 11, i32* nonnull %stack_var_-56)
  store i32 %v3_10384, i32* %r0.global-to-local, align 4
  %v3_10388 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10384, i32* %r2.global-to-local, align 4
  %v1_10390 = add i32 %v3_10388, -1
  store i32 %v1_10390, i32* %r3.global-to-local, align 4
  %v0_10394 = load i32, i32* @r6, align 4
  %v1_10394 = add i32 %v0_10394, 24
  %v2_10394 = inttoptr i32 %v1_10394 to i32*
  %v3_10394 = load i32, i32* %v2_10394, align 4
  store i32 %v3_10394, i32* %r1.global-to-local, align 4
  %v0_10398 = load i32, i32* @sb, align 4
  store i32 %v0_10398, i32* %r0.global-to-local, align 4
  %v4_1039c = call i32 @function_111a4(i32 %v0_10398, i32 %v3_10394, i32 %v3_10384, i32 %v1_10390)
  store i32 %v4_1039c, i32* @r7, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_103a8 = call i32 @function_10a30(i32 11)
  store i32 %v1_103a8, i32* %r0.global-to-local, align 4
  %v0_103ac = load i32, i32* @r7, align 4
  %v2_103ac = icmp eq i32 %v0_103ac, -1
  store i1 %v2_103ac, i1* %cpsr_c.global-to-local, align 1
  %v7_103ac = icmp eq i32 %v0_103ac, -1
  store i1 %v7_103ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_103ac, label %dec_label_pc_fe90.loopexit, label %dec_label_pc_103b4

dec_label_pc_103b4:                               ; preds = %dec_label_pc_10368
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_103b4 = icmp eq i32 %v0_103ac, 0
  store i1 %v2_103b4, i1* %cpsr_z.global-to-local, align 1
  %tmp364 = icmp slt i32 %v0_103ac, 1
  br i1 %tmp364, label %dec_label_pc_10024, label %dec_label_pc_103bc

dec_label_pc_103bc:                               ; preds = %dec_label_pc_103b4
  %v0_103bc = load i32, i32* @r6, align 4
  %v1_103bc = add i32 %v0_103bc, 21
  %v2_103bc = inttoptr i32 %v1_103bc to i8*
  %v3_103bc = load i8, i8* %v2_103bc, align 1
  %v4_103bc = zext i8 %v3_103bc to i32
  store i32 %v4_103bc, i32* %r3.global-to-local, align 4
  %v1_103c0 = add i32 %v0_103bc, 20
  %v2_103c0 = inttoptr i32 %v1_103c0 to i8*
  %v3_103c0 = load i8, i8* %v2_103c0, align 1
  %v4_103c0 = zext i8 %v3_103c0 to i32
  store i32 %v4_103c0, i32* %r2.global-to-local, align 4
  %v1_103c4 = add i32 %v0_103bc, 16
  %v2_103c4 = inttoptr i32 %v1_103c4 to i32*
  %v3_103c4 = load i32, i32* %v2_103c4, align 4
  store i32 %v3_103c4, i32* %r1.global-to-local, align 4
  %v4_103c8 = mul nuw nsw i32 %v4_103bc, 256
  %v5_103c8 = or i32 %v4_103c0, %v4_103c8
  store i32 %v5_103c8, i32* %r2.global-to-local, align 4
  %v1_103cc = and i32 %v4_103c0, 128
  %v2_103cc = icmp ne i32 %v1_103cc, 0
  store i1 %v2_103cc, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_103bc, i32* %r3.global-to-local, align 4
  store i32 %v3_103c4, i32* %stack_var_-48, align 4
  store i32 %v5_103c8, i32* %stack_var_-38, align 4
  %v1_103dc = inttoptr i32 %v0_103bc to i32*
  %v2_103dc = load i32, i32* %v1_103dc, align 4
  store i32 %v2_103dc, i32* @fp, align 4
  %v0_103e0 = call i32 @function_1198c()
  store i32 %v0_103e0, i32* %r0.global-to-local, align 4
  %v7_103e4 = icmp eq i32 %v0_103e0, -1
  %.387 = zext i1 %v7_103e4 to i32
  store i32 %.387, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_103f0 = icmp eq i32 %v0_103e0, 0
  store i1 %v2_103f0, i1* %cpsr_z.global-to-local, align 1
  %tmp367 = icmp slt i32 %v0_103e0, 1
  br i1 %tmp367, label %bb368, label %.thread88

.thread88:                                        ; preds = %dec_label_pc_103bc
  store i32 1, i32* %sl.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10448

bb368:                                            ; preds = %dec_label_pc_103bc
  store i32 %.387, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_103fc = icmp eq i1 %v7_103e4, false
  store i1 %v2_103fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_103fc, label %dec_label_pc_10404, label %dec_label_pc_10448

dec_label_pc_10404:                               ; preds = %bb368
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_10410 = call i32 @function_1224c(i32 2, i32 1, i32 0)
  store i32 %v3_10410, i32* %r0.global-to-local, align 4
  %v2_10414 = icmp eq i32 %v3_10410, -1
  store i1 %v2_10414, i1* %cpsr_c.global-to-local, align 1
  %v7_10414 = icmp eq i32 %v3_10410, -1
  store i1 %v7_10414, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_10410, i32* @r5, align 4
  br i1 %v7_10414, label %dec_label_pc_109ec, label %dec_label_pc_10420

dec_label_pc_10420:                               ; preds = %dec_label_pc_10404
  store i32 3, i32* %r0.global-to-local, align 4
  %v1_10424 = call i32 @function_10ae8(i32 3)
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_1042c = call i32 @function_10ae8(i32 4)
  %v0_10430 = load i32, i32* @sl, align 4
  store i32 %v0_10430, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_10438 = inttoptr i32 %v0_10430 to i32*
  %v3_10438 = call i32 @function_10a04(i32 3, i32* %v2_10438)
  store i32 %v3_10438, i32* %r0.global-to-local, align 4
  %v1_1043c = inttoptr i32 %v3_10438 to i8*
  %v2_1043c = call i32 @function_eb6c(i8* %v1_1043c)
  store i32 %v2_1043c, i32* %r0.global-to-local, align 4
  store i32 %v2_1043c, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_10440 = icmp eq i32 %v2_1043c, 0
  store i1 %v3_10440, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10440, label %dec_label_pc_10448, label %dec_label_pc_108bc

dec_label_pc_10448:                               ; preds = %.thread88, %dec_label_pc_10420, %bb368
  %v0_10448 = load i32, i32* @r6, align 4
  %v1_10448 = add i32 %v0_10448, 4
  %v2_10448 = inttoptr i32 %v1_10448 to i32*
  %v3_10448 = load i32, i32* %v2_10448, align 4
  store i32 %v3_10448, i32* %r0.global-to-local, align 4
  %v1_1044c = call i32 @function_11960(i32 %v3_10448)
  store i32 %v1_1044c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_10458 = load i32, i32* @r6, align 4
  %v1_10458 = add i32 %v0_10458, 24
  %v2_10458 = inttoptr i32 %v1_10458 to i32*
  %v3_10458 = load i32, i32* %v2_10458, align 4
  store i32 %v3_10458, i32* %ip.global-to-local, align 4
  %v2_1045c = add i32 %v0_10458, 4
  %v3_1045c = inttoptr i32 %v2_1045c to i32*
  store i32 -1, i32* %v3_1045c, align 4
  %v0_10460 = load i32, i32* %r2.global-to-local, align 4
  %v1_10460 = load i32, i32* @r6, align 4
  %v2_10460 = add i32 %v1_10460, 12
  %v3_10460 = inttoptr i32 %v2_10460 to i32*
  store i32 %v0_10460, i32* %v3_10460, align 4
  br label %dec_label_pc_10464

dec_label_pc_10464:                               ; preds = %.thread236, %dec_label_pc_1064c, %dec_label_pc_10598, %dec_label_pc_104e4, %dec_label_pc_1084c, %dec_label_pc_10788, %dec_label_pc_10284, %dec_label_pc_101d0, %dec_label_pc_10138, %dec_label_pc_100a0, %dec_label_pc_1002c, %dec_label_pc_10448
  %v0_10464 = load i32, i32* %ip.global-to-local, align 4
  %v1_10464 = load i32, i32* @r7, align 4
  %v2_10464 = sub i32 %v0_10464, %v1_10464
  %v3_10464 = icmp uge i32 %v0_10464, %v1_10464
  store i1 %v3_10464, i1* %cpsr_c.global-to-local, align 1
  %v4_10464 = xor i32 %v1_10464, %v0_10464
  %v5_10464 = xor i32 %v2_10464, %v0_10464
  %v6_10464 = and i32 %v5_10464, %v4_10464
  %v7_10464 = icmp slt i32 %v6_10464, 0
  %v8_10464 = icmp slt i32 %v2_10464, 0
  %v9_10464 = icmp eq i32 %v0_10464, %v1_10464
  store i1 %v9_10464, i1* %cpsr_z.global-to-local, align 1
  %v2_10468 = xor i1 %v8_10464, %v7_10464
  %v0_10464.v1_10464 = select i1 %v2_10468, i32 %v0_10464, i32 %v1_10464
  store i32 %v0_10464.v1_10464, i32* %r1.global-to-local, align 4
  %v2_10470 = sub i32 %v0_10464, %v0_10464.v1_10464
  store i32 %v2_10470, i32* @r2, align 4
  %v1_10474 = load i32, i32* @r6, align 4
  %v2_10474 = add i32 %v1_10474, 24
  %v3_10474 = inttoptr i32 %v2_10474 to i32*
  store i32 %v2_10470, i32* %v3_10474, align 4
  %v0_10478 = load i32, i32* @sb, align 4
  %v1_10478 = load i32, i32* %r1.global-to-local, align 4
  %v2_10478 = add i32 %v1_10478, %v0_10478
  store i32 %v2_10478, i32* @r1, align 4
  store i32 %v0_10478, i32* @r0, align 4
  %v3_10480 = call i32 @function_11f60(i32 %v0_10478, i32 %v2_10478, i32 %v2_10470)
  store i32 %v3_10480, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ff14

dec_label_pc_10488:                               ; preds = %dec_label_pc_ff14
  %v1_10488 = add i32 %v0_ff14, 24
  %v2_10488 = inttoptr i32 %v1_10488 to i32*
  %v3_10488 = load i32, i32* %v2_10488, align 4
  store i32 %v3_10488, i32* %ip.global-to-local, align 4
  %v1_1048c = add i32 %v3_10488, -1
  store i32 %v1_1048c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10490 = icmp eq i32 %v1_1048c, 0
  store i1 %v2_10490, i1* %cpsr_z.global-to-local, align 1
  %v5_10494 = icmp sgt i32 %v1_1048c, 0
  br i1 %v5_10494, label %dec_label_pc_104bc, label %dec_label_pc_fe94.backedge.thread

dec_label_pc_1049c:                               ; preds = %bb371
  %v2_1049c = icmp ugt i8 %v3_104c0, 35
  store i1 %v2_1049c, i1* %cpsr_c.global-to-local, align 1
  %v7_1049c = icmp eq i8 %v3_104c0, 36
  store i1 %v7_1049c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1049c, label %dec_label_pc_104d0, label %dec_label_pc_104a4

dec_label_pc_104a4:                               ; preds = %dec_label_pc_1049c
  %v2_104a4 = icmp ugt i8 %v3_104c0, 34
  store i1 %v2_104a4, i1* %cpsr_c.global-to-local, align 1
  %v7_104a4 = icmp eq i8 %v3_104c0, 35
  store i1 %v7_104a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_104a4, label %dec_label_pc_104d0, label %dec_label_pc_104ac

dec_label_pc_104ac:                               ; preds = %dec_label_pc_104a4
  %v2_104ac = icmp ugt i8 %v3_104c0, 36
  store i1 %v2_104ac, i1* %cpsr_c.global-to-local, align 1
  %v7_104ac = icmp eq i8 %v3_104c0, 37
  store i1 %v7_104ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_104ac, label %dec_label_pc_104d0, label %dec_label_pc_104b4

dec_label_pc_104b4:                               ; preds = %dec_label_pc_104ac
  %v1_104b4 = add i32 %v0_104d0, -1
  store i32 %v1_104b4, i32* %r0.global-to-local, align 4
  %v2_104b4 = icmp ne i32 %v0_104d0, 0
  store i1 %v2_104b4, i1* %cpsr_c.global-to-local, align 1
  %v7_104b4 = icmp eq i32 %v0_104d0, 1
  store i1 %v7_104b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_104b4, label %dec_label_pc_fe94.backedge.thread491, label %dec_label_pc_104bc

dec_label_pc_104bc:                               ; preds = %dec_label_pc_10488, %dec_label_pc_104b4
  %v0_104d0 = phi i32 [ %v1_104b4, %dec_label_pc_104b4 ], [ %v1_1048c, %dec_label_pc_10488 ]
  %v2_104bc = add i32 %v0_104d0, %v0_ff14
  store i32 %v2_104bc, i32* %r3.global-to-local, align 4
  %v1_104c0 = add i32 %v2_104bc, 28
  %v2_104c0 = inttoptr i32 %v1_104c0 to i8*
  %v3_104c0 = load i8, i8* %v2_104c0, align 1
  %v4_104c0 = zext i8 %v3_104c0 to i32
  store i32 %v4_104c0, i32* %r3.global-to-local, align 4
  %v2_104c4 = icmp ugt i8 %v3_104c0, 61
  store i1 %v2_104c4, i1* %cpsr_c.global-to-local, align 1
  %v7_104c4 = icmp eq i8 %v3_104c0, 62
  store i1 %v7_104c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_104c4, label %dec_label_pc_104d0, label %bb371

bb371:                                            ; preds = %dec_label_pc_104bc
  %v3_104c8 = icmp ugt i8 %v3_104c0, 57
  store i1 %v3_104c8, i1* %cpsr_c.global-to-local, align 1
  %v8_104c8 = icmp eq i8 %v3_104c0, 58
  store i1 %v8_104c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_104c8, label %dec_label_pc_104d0, label %dec_label_pc_1049c

dec_label_pc_104d0:                               ; preds = %dec_label_pc_104bc, %bb371, %dec_label_pc_104ac, %dec_label_pc_104a4, %dec_label_pc_1049c
  %v1_104d0 = add i32 %v0_104d0, 1
  store i32 %v1_104d0, i32* @r7, align 4
  %v2_104d4 = icmp eq i32 %v1_104d0, -1
  store i1 %v2_104d4, i1* %cpsr_c.global-to-local, align 1
  %v7_104d4 = icmp eq i32 %v0_104d0, -2
  store i1 %v7_104d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_104d4, label %dec_label_pc_fe94.backedge.thread491, label %dec_label_pc_104dc

dec_label_pc_104dc:                               ; preds = %dec_label_pc_104d0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_104dc = icmp eq i32 %v1_104d0, 0
  store i1 %v2_104dc, i1* %cpsr_z.global-to-local, align 1
  %tmp372 = icmp slt i32 %v1_104d0, 1
  br i1 %tmp372, label %dec_label_pc_10024, label %dec_label_pc_104e4

dec_label_pc_104e4:                               ; preds = %dec_label_pc_104dc
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_104e8 = call i32 @function_10ae8(i32 9)
  store i32 %v2_fe04, i32* %r1.global-to-local, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v3_104f8 = call i32 @function_10a04(i32 9, i32* nonnull %stack_var_-56)
  store i32 %v3_104f8, i32* %r0.global-to-local, align 4
  %v3_104fc = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_104fc, i32* %r2.global-to-local, align 4
  store i32 %v3_104f8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10508 = load i32, i32* @r6, align 4
  %v1_10508 = add i32 %v0_10508, 4
  %v2_10508 = inttoptr i32 %v1_10508 to i32*
  %v3_10508 = load i32, i32* %v2_10508, align 4
  store i32 %v3_10508, i32* %r0.global-to-local, align 4
  %v4_1050c = inttoptr i32 %v3_104f8 to i32*
  %v5_1050c = call i32 @function_121bc(i32 %v3_10508, i32* %v4_1050c, i32 %v3_104fc, i32 16384)
  store i32 %v5_1050c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1421c.190 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1051c = load i32, i32* @r6, align 4
  %v1_1051c = add i32 %v0_1051c, 4
  %v2_1051c = inttoptr i32 %v1_1051c to i32*
  %v3_1051c = load i32, i32* %v2_1051c, align 4
  store i32 %v3_1051c, i32* %r0.global-to-local, align 4
  %v5_10520 = call i32 @function_121bc(i32 %v3_1051c, i32* bitcast ([3 x i8]* @global_var_1421c.190 to i32*), i32 2, i32 16384)
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_10528 = call i32 @function_10a30(i32 9)
  store i32 %v1_10528, i32* %r0.global-to-local, align 4
  %v0_1052c = load i32, i32* @r6, align 4
  %v1_1052c = add i32 %v0_1052c, 24
  %v2_1052c = inttoptr i32 %v1_1052c to i32*
  %v3_1052c = load i32, i32* %v2_1052c, align 4
  store i32 %v3_1052c, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_10534 = add i32 %v0_1052c, 12
  %v3_10534 = inttoptr i32 %v2_10534 to i32*
  store i32 9, i32* %v3_10534, align 4
  br label %dec_label_pc_10464

dec_label_pc_1053c:                               ; preds = %dec_label_pc_ff14
  %v1_1053c = add i32 %v0_ff14, 24
  %v2_1053c = inttoptr i32 %v1_1053c to i32*
  %v3_1053c = load i32, i32* %v2_1053c, align 4
  store i32 %v3_1053c, i32* %ip.global-to-local, align 4
  %v1_10540 = add i32 %v3_1053c, -1
  store i32 %v1_10540, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10544 = icmp eq i32 %v1_10540, 0
  store i1 %v2_10544, i1* %cpsr_z.global-to-local, align 1
  %v5_10548 = icmp sgt i32 %v1_10540, 0
  br i1 %v5_10548, label %dec_label_pc_10570, label %dec_label_pc_fe94.backedge.thread

dec_label_pc_10550:                               ; preds = %bb373
  %v2_10550 = icmp ugt i8 %v3_10574, 35
  store i1 %v2_10550, i1* %cpsr_c.global-to-local, align 1
  %v7_10550 = icmp eq i8 %v3_10574, 36
  store i1 %v7_10550, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10550, label %dec_label_pc_10584, label %dec_label_pc_10558

dec_label_pc_10558:                               ; preds = %dec_label_pc_10550
  %v2_10558 = icmp ugt i8 %v3_10574, 34
  store i1 %v2_10558, i1* %cpsr_c.global-to-local, align 1
  %v7_10558 = icmp eq i8 %v3_10574, 35
  store i1 %v7_10558, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10558, label %dec_label_pc_10584, label %dec_label_pc_10560

dec_label_pc_10560:                               ; preds = %dec_label_pc_10558
  %v2_10560 = icmp ugt i8 %v3_10574, 36
  store i1 %v2_10560, i1* %cpsr_c.global-to-local, align 1
  %v7_10560 = icmp eq i8 %v3_10574, 37
  store i1 %v7_10560, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10560, label %dec_label_pc_10584, label %dec_label_pc_10568

dec_label_pc_10568:                               ; preds = %dec_label_pc_10560
  %v1_10568 = add i32 %v0_10584, -1
  store i32 %v1_10568, i32* %r0.global-to-local, align 4
  %v2_10568 = icmp ne i32 %v0_10584, 0
  store i1 %v2_10568, i1* %cpsr_c.global-to-local, align 1
  %v7_10568 = icmp eq i32 %v0_10584, 1
  store i1 %v7_10568, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10568, label %dec_label_pc_fe94.backedge.thread491, label %dec_label_pc_10570

dec_label_pc_10570:                               ; preds = %dec_label_pc_1053c, %dec_label_pc_10568
  %v0_10584 = phi i32 [ %v1_10568, %dec_label_pc_10568 ], [ %v1_10540, %dec_label_pc_1053c ]
  %v2_10570 = add i32 %v0_10584, %v0_ff14
  store i32 %v2_10570, i32* %r3.global-to-local, align 4
  %v1_10574 = add i32 %v2_10570, 28
  %v2_10574 = inttoptr i32 %v1_10574 to i8*
  %v3_10574 = load i8, i8* %v2_10574, align 1
  %v4_10574 = zext i8 %v3_10574 to i32
  store i32 %v4_10574, i32* %r3.global-to-local, align 4
  %v2_10578 = icmp ugt i8 %v3_10574, 61
  store i1 %v2_10578, i1* %cpsr_c.global-to-local, align 1
  %v7_10578 = icmp eq i8 %v3_10574, 62
  store i1 %v7_10578, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10578, label %dec_label_pc_10584, label %bb373

bb373:                                            ; preds = %dec_label_pc_10570
  %v3_1057c = icmp ugt i8 %v3_10574, 57
  store i1 %v3_1057c, i1* %cpsr_c.global-to-local, align 1
  %v8_1057c = icmp eq i8 %v3_10574, 58
  store i1 %v8_1057c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1057c, label %dec_label_pc_10584, label %dec_label_pc_10550

dec_label_pc_10584:                               ; preds = %dec_label_pc_10570, %bb373, %dec_label_pc_10560, %dec_label_pc_10558, %dec_label_pc_10550
  %v1_10584 = add i32 %v0_10584, 1
  store i32 %v1_10584, i32* @r7, align 4
  %v2_10588 = icmp eq i32 %v1_10584, -1
  store i1 %v2_10588, i1* %cpsr_c.global-to-local, align 1
  %v7_10588 = icmp eq i32 %v0_10584, -2
  store i1 %v7_10588, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10588, label %dec_label_pc_fe94.backedge.thread491, label %dec_label_pc_10590

dec_label_pc_10590:                               ; preds = %dec_label_pc_10584
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10590 = icmp eq i32 %v1_10584, 0
  store i1 %v2_10590, i1* %cpsr_z.global-to-local, align 1
  %tmp374 = icmp slt i32 %v1_10584, 1
  br i1 %tmp374, label %dec_label_pc_10024, label %dec_label_pc_10598

dec_label_pc_10598:                               ; preds = %dec_label_pc_10590
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_1059c = call i32 @function_10ae8(i32 10)
  store i32 %v2_fe04, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v3_105ac = call i32 @function_10a04(i32 10, i32* nonnull %stack_var_-56)
  store i32 %v3_105ac, i32* %r0.global-to-local, align 4
  %v3_105b0 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_105b0, i32* %r2.global-to-local, align 4
  store i32 %v3_105ac, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_105bc = load i32, i32* @r6, align 4
  %v1_105bc = add i32 %v0_105bc, 4
  %v2_105bc = inttoptr i32 %v1_105bc to i32*
  %v3_105bc = load i32, i32* %v2_105bc, align 4
  store i32 %v3_105bc, i32* %r0.global-to-local, align 4
  %v4_105c0 = inttoptr i32 %v3_105ac to i32*
  %v5_105c0 = call i32 @function_121bc(i32 %v3_105bc, i32* %v4_105c0, i32 %v3_105b0, i32 16384)
  store i32 %v5_105c0, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1421c.190 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_105d0 = load i32, i32* @r6, align 4
  %v1_105d0 = add i32 %v0_105d0, 4
  %v2_105d0 = inttoptr i32 %v1_105d0 to i32*
  %v3_105d0 = load i32, i32* %v2_105d0, align 4
  store i32 %v3_105d0, i32* %r0.global-to-local, align 4
  %v5_105d4 = call i32 @function_121bc(i32 %v3_105d0, i32* bitcast ([3 x i8]* @global_var_1421c.190 to i32*), i32 2, i32 16384)
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_105dc = call i32 @function_10a30(i32 10)
  store i32 %v1_105dc, i32* %r0.global-to-local, align 4
  %v0_105e0 = load i32, i32* @r6, align 4
  %v1_105e0 = add i32 %v0_105e0, 24
  %v2_105e0 = inttoptr i32 %v1_105e0 to i32*
  %v3_105e0 = load i32, i32* %v2_105e0, align 4
  store i32 %v3_105e0, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_105e8 = add i32 %v0_105e0, 12
  %v3_105e8 = inttoptr i32 %v2_105e8 to i32*
  store i32 10, i32* %v3_105e8, align 4
  br label %dec_label_pc_10464

dec_label_pc_105f0:                               ; preds = %dec_label_pc_ff14
  %v1_105f0 = add i32 %v0_ff14, 24
  %v2_105f0 = inttoptr i32 %v1_105f0 to i32*
  %v3_105f0 = load i32, i32* %v2_105f0, align 4
  store i32 %v3_105f0, i32* %ip.global-to-local, align 4
  %v1_105f4 = add i32 %v3_105f0, -1
  store i32 %v1_105f4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_105f8 = icmp eq i32 %v1_105f4, 0
  store i1 %v2_105f8, i1* %cpsr_z.global-to-local, align 1
  %v5_105fc = icmp sgt i32 %v1_105f4, 0
  br i1 %v5_105fc, label %dec_label_pc_10624, label %dec_label_pc_fe94.backedge.thread

dec_label_pc_10604:                               ; preds = %bb375
  %v2_10604 = icmp ugt i8 %v3_10628, 35
  store i1 %v2_10604, i1* %cpsr_c.global-to-local, align 1
  %v7_10604 = icmp eq i8 %v3_10628, 36
  store i1 %v7_10604, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10604, label %dec_label_pc_10638, label %dec_label_pc_1060c

dec_label_pc_1060c:                               ; preds = %dec_label_pc_10604
  %v2_1060c = icmp ugt i8 %v3_10628, 34
  store i1 %v2_1060c, i1* %cpsr_c.global-to-local, align 1
  %v7_1060c = icmp eq i8 %v3_10628, 35
  store i1 %v7_1060c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1060c, label %dec_label_pc_10638, label %dec_label_pc_10614

dec_label_pc_10614:                               ; preds = %dec_label_pc_1060c
  %v2_10614 = icmp ugt i8 %v3_10628, 36
  store i1 %v2_10614, i1* %cpsr_c.global-to-local, align 1
  %v7_10614 = icmp eq i8 %v3_10628, 37
  store i1 %v7_10614, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10614, label %dec_label_pc_10638, label %dec_label_pc_1061c

dec_label_pc_1061c:                               ; preds = %dec_label_pc_10614
  %v1_1061c = add i32 %v0_10638, -1
  store i32 %v1_1061c, i32* %r0.global-to-local, align 4
  %v2_1061c = icmp ne i32 %v0_10638, 0
  store i1 %v2_1061c, i1* %cpsr_c.global-to-local, align 1
  %v7_1061c = icmp eq i32 %v0_10638, 1
  store i1 %v7_1061c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1061c, label %dec_label_pc_fe94.backedge.thread491, label %dec_label_pc_10624

dec_label_pc_10624:                               ; preds = %dec_label_pc_105f0, %dec_label_pc_1061c
  %v0_10638 = phi i32 [ %v1_1061c, %dec_label_pc_1061c ], [ %v1_105f4, %dec_label_pc_105f0 ]
  %v2_10624 = add i32 %v0_10638, %v0_ff14
  store i32 %v2_10624, i32* %r3.global-to-local, align 4
  %v1_10628 = add i32 %v2_10624, 28
  %v2_10628 = inttoptr i32 %v1_10628 to i8*
  %v3_10628 = load i8, i8* %v2_10628, align 1
  %v4_10628 = zext i8 %v3_10628 to i32
  store i32 %v4_10628, i32* %r3.global-to-local, align 4
  %v2_1062c = icmp ugt i8 %v3_10628, 61
  store i1 %v2_1062c, i1* %cpsr_c.global-to-local, align 1
  %v7_1062c = icmp eq i8 %v3_10628, 62
  store i1 %v7_1062c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1062c, label %dec_label_pc_10638, label %bb375

bb375:                                            ; preds = %dec_label_pc_10624
  %v3_10630 = icmp ugt i8 %v3_10628, 57
  store i1 %v3_10630, i1* %cpsr_c.global-to-local, align 1
  %v8_10630 = icmp eq i8 %v3_10628, 58
  store i1 %v8_10630, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10630, label %dec_label_pc_10638, label %dec_label_pc_10604

dec_label_pc_10638:                               ; preds = %dec_label_pc_10624, %bb375, %dec_label_pc_10614, %dec_label_pc_1060c, %dec_label_pc_10604
  %v1_10638 = add i32 %v0_10638, 1
  store i32 %v1_10638, i32* @r7, align 4
  %v2_1063c = icmp eq i32 %v1_10638, -1
  store i1 %v2_1063c, i1* %cpsr_c.global-to-local, align 1
  %v7_1063c = icmp eq i32 %v0_10638, -2
  store i1 %v7_1063c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1063c, label %dec_label_pc_fe94.backedge.thread491, label %dec_label_pc_10644

dec_label_pc_10644:                               ; preds = %dec_label_pc_10638
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10644 = icmp eq i32 %v1_10638, 0
  store i1 %v2_10644, i1* %cpsr_z.global-to-local, align 1
  %tmp376 = icmp slt i32 %v1_10638, 1
  br i1 %tmp376, label %dec_label_pc_10024, label %dec_label_pc_1064c

dec_label_pc_1064c:                               ; preds = %dec_label_pc_10644
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_10650 = call i32 @function_10ae8(i32 6)
  store i32 %v2_10290, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v3_10660 = call i32 @function_10a04(i32 6, i32* nonnull %stack_var_-48)
  store i32 %v3_10660, i32* %r0.global-to-local, align 4
  %v3_10664 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_10664, i32* %r2.global-to-local, align 4
  store i32 %v3_10660, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10670 = load i32, i32* @r6, align 4
  %v1_10670 = add i32 %v0_10670, 4
  %v2_10670 = inttoptr i32 %v1_10670 to i32*
  %v3_10670 = load i32, i32* %v2_10670, align 4
  store i32 %v3_10670, i32* %r0.global-to-local, align 4
  %v4_10674 = inttoptr i32 %v3_10660 to i32*
  %v5_10674 = call i32 @function_121bc(i32 %v3_10670, i32* %v4_10674, i32 %v3_10664, i32 16384)
  store i32 %v5_10674, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1421c.190 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10684 = load i32, i32* @r6, align 4
  %v1_10684 = add i32 %v0_10684, 4
  %v2_10684 = inttoptr i32 %v1_10684 to i32*
  %v3_10684 = load i32, i32* %v2_10684, align 4
  store i32 %v3_10684, i32* %r0.global-to-local, align 4
  %v5_10688 = call i32 @function_121bc(i32 %v3_10684, i32* bitcast ([3 x i8]* @global_var_1421c.190 to i32*), i32 2, i32 16384)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_10690 = call i32 @function_10a30(i32 6)
  store i32 %v1_10690, i32* %r0.global-to-local, align 4
  %v0_10694 = load i32, i32* @r6, align 4
  %v1_10694 = add i32 %v0_10694, 24
  %v2_10694 = inttoptr i32 %v1_10694 to i32*
  %v3_10694 = load i32, i32* %v2_10694, align 4
  store i32 %v3_10694, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_1069c = add i32 %v0_10694, 12
  %v3_1069c = inttoptr i32 %v2_1069c to i32*
  store i32 8, i32* %v3_1069c, align 4
  br label %dec_label_pc_10464

dec_label_pc_106a4:                               ; preds = %dec_label_pc_ffa4
  store i32 ptrtoint (i32* @global_var_14231.192 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_ff5c, i32* @r0, align 4
  %v3_106b0 = call i32 @function_11f50(i32 %v2_ff5c, i32 ptrtoint (i32* @global_var_14231.192 to i32), i32 3)
  store i32 9, i32* @r2, align 4
  store i32 %v2_106bc, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_14228.194 to i32), i32* @r1, align 4
  %v3_106c4 = call i32 @function_11f50(i32 %v2_106bc, i32 ptrtoint (i32* @global_var_14228.194 to i32), i32 9)
  store i32 %v3_106c4, i32* %r0.global-to-local, align 4
  %v0_106c8 = load i32, i32* @r6, align 4
  %v1_106c8 = add i32 %v0_106c8, 24
  %v2_106c8 = inttoptr i32 %v1_106c8 to i32*
  %v3_106c8 = load i32, i32* %v2_106c8, align 4
  store i32 %v3_106c8, i32* %ip.global-to-local, align 4
  %v0_106cc = load i32, i32* @r5, align 4
  %v1_106cc = add i32 %v0_106cc, 2
  store i32 %v1_106cc, i32* %r2.global-to-local, align 4
  %v0_106d0 = load i32, i32* @sb, align 4
  %v2_106d0 = add i32 %v0_106d0, %v3_106c8
  store i32 %v2_106d0, i32* %r3.global-to-local, align 4
  %v3_106d4 = icmp uge i32 %v2_106d0, %v1_106cc
  store i1 %v3_106d4, i1* %cpsr_c.global-to-local, align 1
  %v9_106d4 = icmp eq i32 %v2_106d0, %v1_106cc
  store i1 %v9_106d4, i1* %cpsr_z.global-to-local, align 1
  %v2_106d8 = xor i1 %v3_106d4, true
  %v3_106d8 = or i1 %v9_106d4, %v2_106d8
  br i1 %v3_106d8, label %dec_label_pc_106a4.dec_label_pc_10014.loopexit_crit_edge, label %dec_label_pc_106dc

dec_label_pc_106a4.dec_label_pc_10014.loopexit_crit_edge: ; preds = %dec_label_pc_106a4
  %v0_10014.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10014

dec_label_pc_106dc:                               ; preds = %dec_label_pc_106a4
  %v0_106dc = load i32, i32* @r4, align 4
  %v1_106dc = add i32 %v0_106dc, 1
  %v2_106dc = inttoptr i32 %v1_106dc to i8*
  %v3_106dc = load i8, i8* %v2_106dc, align 1
  %v4_106dc = zext i8 %v3_106dc to i32
  store i32 %v4_106dc, i32* %r3.global-to-local, align 4
  %v2_106e0 = icmp ugt i8 %v3_106dc, 30
  store i1 %v2_106e0, i1* %cpsr_c.global-to-local, align 1
  %v7_106e0 = icmp eq i8 %v3_106dc, 31
  store i1 %v7_106e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106e0, label %dec_label_pc_10800, label %dec_label_pc_106e8

dec_label_pc_106e8:                               ; preds = %dec_label_pc_106dc
  %v1_106e8 = add i32 %v0_106dc, -1
  %v2_106e8 = inttoptr i32 %v1_106e8 to i8*
  %v3_106e8 = load i8, i8* %v2_106e8, align 1
  %v4_106e8 = zext i8 %v3_106e8 to i32
  store i32 %v4_106e8, i32* %r3.global-to-local, align 4
  %v2_106ec = icmp ugt i8 %v3_106e8, -4
  store i1 %v2_106ec, i1* %cpsr_c.global-to-local, align 1
  %v7_106ec = icmp eq i8 %v3_106e8, -3
  store i1 %v7_106ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106ec, label %bb377, label %dec_label_pc_106f8

bb377:                                            ; preds = %dec_label_pc_106e8
  %v1_106f0 = load i32, i32* @r8, align 4
  %v2_106f0 = trunc i32 %v1_106f0 to i8
  store i8 %v2_106f0, i8* %v2_106e8, align 1
  %v0_106f4.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_106f4.pr, label %dec_label_pc_ffb8, label %.dec_label_pc_106f8_crit_edge

.dec_label_pc_106f8_crit_edge:                    ; preds = %bb377
  %v0_106f8.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_106f8

dec_label_pc_106f8:                               ; preds = %.dec_label_pc_106f8_crit_edge, %dec_label_pc_106e8
  %v0_106f8 = phi i32 [ %v0_106f8.pre, %.dec_label_pc_106f8_crit_edge ], [ %v4_106e8, %dec_label_pc_106e8 ]
  %v2_106f8 = icmp ugt i32 %v0_106f8, 250
  store i1 %v2_106f8, i1* %cpsr_c.global-to-local, align 1
  %v7_106f8 = icmp eq i32 %v0_106f8, 251
  store i1 %v7_106f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106f8, label %bb378, label %dec_label_pc_ffb8

bb378:                                            ; preds = %dec_label_pc_106f8
  %v1_106fc = load i32, i32* %sl.global-to-local, align 4
  %v2_106fc = trunc i32 %v1_106fc to i8
  %v3_106fc = load i32, i32* @r4, align 4
  %v4_106fc = add i32 %v3_106fc, -1
  %v5_106fc = inttoptr i32 %v4_106fc to i8*
  store i8 %v2_106fc, i8* %v5_106fc, align 1
  br label %dec_label_pc_ffb8

dec_label_pc_10704:                               ; preds = %dec_label_pc_10100, %dec_label_pc_100dc, %dec_label_pc_1011c
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_10708 = call i32 @function_10ae8(i32 27)
  store i32 %v2_fe04, i32* %r1.global-to-local, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v3_10718 = call i32 @function_10a04(i32 27, i32* nonnull %stack_var_-56)
  %v3_1071c = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10718, i32* %r2.global-to-local, align 4
  %v1_10724 = add i32 %v3_1071c, -1
  store i32 %v1_10724, i32* %r3.global-to-local, align 4
  %v0_10728 = load i32, i32* @sb, align 4
  store i32 %v0_10728, i32* %r0.global-to-local, align 4
  %v0_1072c = load i32, i32* @r6, align 4
  %v1_1072c = add i32 %v0_1072c, 24
  %v2_1072c = inttoptr i32 %v1_1072c to i32*
  %v3_1072c = load i32, i32* %v2_1072c, align 4
  store i32 %v3_1072c, i32* %r1.global-to-local, align 4
  %v4_10730 = call i32 @function_111a4(i32 %v0_10728, i32 %v3_1072c, i32 %v3_10718, i32 %v1_10724)
  store i32 %v4_10730, i32* %r0.global-to-local, align 4
  %v1_10734 = add i32 %v4_10730, 1
  store i32 %v1_10734, i32* @r7, align 4
  %v2_10734 = icmp eq i32 %v4_10730, -1
  store i1 %v2_10734, i1* %cpsr_c.global-to-local, align 1
  %v7_10734 = icmp eq i32 %v1_10734, 0
  store i1 %v7_10734, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10734, label %thread-pre-split95, label %bb379

bb379:                                            ; preds = %dec_label_pc_10704
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split95

thread-pre-split95:                               ; preds = %dec_label_pc_10704, %bb379
  %v0_1073c = phi i1 [ false, %bb379 ], [ true, %dec_label_pc_10704 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_1073c, i1* %cpsr_z.global-to-local, align 1
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_1087c = call i32 @function_10a30(i32 27)
  store i32 %v1_1087c, i32* %r0.global-to-local, align 4
  br i1 %v0_1073c, label %dec_label_pc_10878, label %dec_label_pc_10744

dec_label_pc_10744:                               ; preds = %thread-pre-split95
  %v0_1074c = load i32, i32* @r7, align 4
  %v3_1074c = icmp eq i32 %v0_1074c, -1
  store i1 %v3_1074c, i1* %cpsr_c.global-to-local, align 1
  %v8_1074c = icmp eq i32 %v0_1074c, -1
  store i1 %v8_1074c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1074c, label %dec_label_pc_fe90.loopexit, label %dec_label_pc_10130

dec_label_pc_10758:                               ; preds = %dec_label_pc_10330
  store i32 %v1_1036c, i32* %r0.global-to-local, align 4
  %v0_10760 = load i32, i32* @r6, align 4
  %v1_10760 = add i32 %v0_10760, 4
  %v2_10760 = inttoptr i32 %v1_10760 to i32*
  %v3_10760 = load i32, i32* %v2_10760, align 4
  store i32 %v3_10760, i32* %r0.global-to-local, align 4
  %v1_10764 = call i32 @function_11960(i32 %v3_10760)
  store i32 %v1_10764, i32* %r0.global-to-local, align 4
  %v0_10768 = load i32, i32* @r6, align 4
  %v1_10768 = add i32 %v0_10768, 384
  %v2_10768 = inttoptr i32 %v1_10768 to i8*
  %v3_10768 = load i8, i8* %v2_10768, align 1
  %v4_10768 = zext i8 %v3_10768 to i32
  %v1_1076c = add nuw nsw i32 %v4_10768, 1
  %v1_10770 = urem i32 %v1_1076c, 256
  store i32 %v1_10770, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_10778 = icmp ugt i32 %v1_10770, 9
  store i1 %v2_10778, i1* %cpsr_c.global-to-local, align 1
  %v7_10778 = icmp eq i32 %v1_10770, 10
  store i1 %v7_10778, i1* %cpsr_z.global-to-local, align 1
  %v2_1077c = add i32 %v0_10768, 4
  %v3_1077c = inttoptr i32 %v2_1077c to i32*
  store i32 -1, i32* %v3_1077c, align 4
  %v0_10780 = load i32, i32* %r3.global-to-local, align 4
  %v1_10780 = trunc i32 %v0_10780 to i8
  %v2_10780 = load i32, i32* @r6, align 4
  %v3_10780 = add i32 %v2_10780, 384
  %v4_10780 = inttoptr i32 %v3_10780 to i8*
  store i8 %v1_10780, i8* %v4_10780, align 1
  %v0_10784 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_10788 = load i32, i32* @r6, align 4
  br i1 %v0_10784, label %dec_label_pc_10788, label %dec_label_pc_1084c

dec_label_pc_10788:                               ; preds = %dec_label_pc_10758
  %v1_10788 = add i32 %v0_10788, 24
  %v2_10788 = inttoptr i32 %v1_10788 to i32*
  %v3_10788 = load i32, i32* %v2_10788, align 4
  store i32 %v3_10788, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r7, align 4
  %v3_10798 = add i32 %v0_10788, 384
  %v4_10798 = inttoptr i32 %v3_10798 to i8*
  store i8 0, i8* %v4_10798, align 1
  %v0_1079c = load i32, i32* %r3.global-to-local, align 4
  %v1_1079c = load i32, i32* @r6, align 4
  %v2_1079c = add i32 %v1_1079c, 12
  %v3_1079c = inttoptr i32 %v2_1079c to i32*
  store i32 %v0_1079c, i32* %v3_1079c, align 4
  br label %dec_label_pc_10464

dec_label_pc_107a4:                               ; preds = %dec_label_pc_feac
  br i1 %v2_fed4, label %dec_label_pc_109f4, label %dec_label_pc_107a8

dec_label_pc_107a8:                               ; preds = %dec_label_pc_107a4
  %v3_107a8 = icmp eq i32 %v5_fed0, -1
  store i1 %v3_107a8, i1* %cpsr_c.global-to-local, align 1
  %v8_107a8 = icmp eq i32 %v5_fed0, -1
  store i1 %v8_107a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_107a8, label %dec_label_pc_107b0, label %dec_label_pc_fefc

dec_label_pc_107b0:                               ; preds = %dec_label_pc_107a8
  store i32 %stack_var_-1868.0, i32* %ip.global-to-local, align 4
  %v2_107b4 = load i32, i32* %v2_feb4, align 4
  store i32 %v2_107b4, i32* %r3.global-to-local, align 4
  %v2_107b8 = icmp ugt i32 %v2_107b4, 10
  store i1 %v2_107b8, i1* %cpsr_c.global-to-local, align 1
  %v7_107b8 = icmp eq i32 %v2_107b4, 11
  store i1 %v7_107b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107b8, label %dec_label_pc_fcc8, label %dec_label_pc_107c0

dec_label_pc_107c0:                               ; preds = %dec_label_pc_107b0, %dec_label_pc_109f4
  %v0_107c0 = load i32, i32* @r6, align 4
  %v1_107c0 = add i32 %v0_107c0, 4
  %v2_107c0 = inttoptr i32 %v1_107c0 to i32*
  %v3_107c0 = load i32, i32* %v2_107c0, align 4
  store i32 %v3_107c0, i32* %r0.global-to-local, align 4
  %v1_107c4 = call i32 @function_11960(i32 %v3_107c0)
  store i32 %v1_107c4, i32* %r0.global-to-local, align 4
  %v0_107c8 = load i32, i32* @r6, align 4
  %v1_107c8 = add i32 %v0_107c8, 384
  %v2_107c8 = inttoptr i32 %v1_107c8 to i8*
  %v3_107c8 = load i8, i8* %v2_107c8, align 1
  %v4_107c8 = zext i8 %v3_107c8 to i32
  %v1_107cc = add nuw nsw i32 %v4_107c8, 1
  %v1_107d0 = urem i32 %v1_107cc, 256
  store i32 %v1_107d0, i32* %r3.global-to-local, align 4
  %v2_107d4 = icmp ugt i32 %v1_107d0, 8
  store i1 %v2_107d4, i1* %cpsr_c.global-to-local, align 1
  %v7_107d4 = icmp eq i32 %v1_107d0, 9
  store i1 %v7_107d4, i1* %cpsr_z.global-to-local, align 1
  %v2_107d8 = xor i1 %v7_107d4, true
  %v3_107d8 = and i1 %v2_107d4, %v2_107d8
  br i1 %v3_107d8, label %bb380, label %bb381

bb380:                                            ; preds = %dec_label_pc_107c0
  store i32 0, i32* @lr, align 4
  br label %bb381

bb381:                                            ; preds = %dec_label_pc_107c0, %bb380
  store i32 -1, i32* @r4, align 4
  %v1_107e0 = trunc i32 %v1_107cc to i8
  store i8 %v1_107e0, i8* %v2_107c8, align 1
  %v0_107e4 = load i32, i32* @r4, align 4
  %v1_107e4 = load i32, i32* @r6, align 4
  %v2_107e4 = add i32 %v1_107e4, 4
  %v3_107e4 = inttoptr i32 %v2_107e4 to i32*
  store i32 %v0_107e4, i32* %v3_107e4, align 4
  %v0_107e8 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_107e8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_107e8 = xor i1 %v1_107e8, true
  %v3_107e8 = and i1 %v0_107e8, %v2_107e8
  br i1 %v3_107e8, label %bb382, label %.thread241

bb382:                                            ; preds = %bb381
  %v4_107e8 = load i32, i32* @lr, align 4
  %v5_107e8 = load i32, i32* @r6, align 4
  %v6_107e8 = add i32 %v5_107e8, 12
  %v7_107e8 = inttoptr i32 %v6_107e8 to i32*
  store i32 %v4_107e8, i32* %v7_107e8, align 4
  %v4_107ec = load i32, i32* @lr, align 4
  %v5_107ec = trunc i32 %v4_107ec to i8
  %v6_107ec = load i32, i32* @r6, align 4
  %v7_107ec = add i32 %v6_107ec, 384
  %v8_107ec = inttoptr i32 %v7_107ec to i8*
  store i8 %v5_107ec, i8* %v8_107ec, align 1
  %v0_107f0.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_107f0.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread241

.thread241:                                       ; preds = %bb381, %bb382
  %v1_107f0 = phi i1 [ %v1_107f0.pre, %bb382 ], [ %v1_107e8, %bb381 ]
  %v0_107f0 = phi i1 [ %v0_107f0.pre, %bb382 ], [ %v0_107e8, %bb381 ]
  %v2_107f0 = xor i1 %v1_107f0, true
  %v3_107f0 = and i1 %v0_107f0, %v2_107f0
  br i1 %v3_107f0, label %dec_label_pc_fcc8, label %dec_label_pc_107f4

dec_label_pc_107f4:                               ; preds = %.thread241
  %v0_107f4 = load i32, i32* @r6, align 4
  store i32 %v0_107f4, i32* @r0, align 4
  %v0_107f8 = call i32 @function_f0cc()
  store i32 %v0_107f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fcc8

dec_label_pc_10800:                               ; preds = %dec_label_pc_106dc
  store i32 %v2_ff5c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_1080c = add i32 %v0_106c8, 4
  %v2_1080c = inttoptr i32 %v1_1080c to i32*
  %v3_1080c = load i32, i32* %v2_1080c, align 4
  store i32 %v3_1080c, i32* %r0.global-to-local, align 4
  %v5_10810 = call i32 @function_121bc(i32 %v3_1080c, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_10810, i32* %r0.global-to-local, align 4
  store i32 %v2_106b4, i32* %r1.global-to-local, align 4
  %v0_10818 = load i32, i32* @r6, align 4
  %v1_10818 = add i32 %v0_10818, 4
  %v2_10818 = inttoptr i32 %v1_10818 to i32*
  %v3_10818 = load i32, i32* %v2_10818, align 4
  store i32 %v3_10818, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fff4

dec_label_pc_10828:                               ; preds = %dec_label_pc_fe9c
  store i32 %.pre, i32* @r0, align 4
  %v1_10830 = add i32 %v0_10828, 92
  store i32 %v1_10830, i32* @r1, align 4
  store i32 292, i32* @r2, align 4
  %v3_10838 = call i32 @function_11f60(i32 %.pre, i32 %v1_10830, i32 292)
  store i32 %v3_10838, i32* %r0.global-to-local, align 4
  %v0_1083c = load i32, i32* @r6, align 4
  %v1_1083c = add i32 %v0_1083c, 24
  %v2_1083c = inttoptr i32 %v1_1083c to i32*
  %v3_1083c = load i32, i32* %v2_1083c, align 4
  store i32 %v3_1083c, i32* %r3.global-to-local, align 4
  %v1_10840 = add i32 %v3_1083c, -64
  store i32 %v1_10840, i32* %ip.global-to-local, align 4
  store i32 %v1_10840, i32* %v2_1083c, align 4
  br label %dec_label_pc_feac

dec_label_pc_1084c:                               ; preds = %dec_label_pc_10758
  store i32 %v0_10788, i32* @r0, align 4
  %v0_10850 = call i32 @function_f0cc()
  store i32 %v0_10850, i32* %r0.global-to-local, align 4
  %v0_10854 = load i32, i32* @r6, align 4
  %v1_10854 = add i32 %v0_10854, 24
  %v2_10854 = inttoptr i32 %v1_10854 to i32*
  %v3_10854 = load i32, i32* %v2_10854, align 4
  store i32 %v3_10854, i32* %ip.global-to-local, align 4
  %v0_10858 = load i32, i32* @r4, align 4
  store i32 %v0_10858, i32* @r7, align 4
  br label %dec_label_pc_10464

dec_label_pc_10860:                               ; preds = %dec_label_pc_fdb0, %dec_label_pc_fd68
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10864

dec_label_pc_10864:                               ; preds = %dec_label_pc_fdd8, %dec_label_pc_10860
  %v0_1086c = phi i32 [ 0, %dec_label_pc_10860 ], [ %v0_fdb8, %dec_label_pc_fdd8 ]
  %v0_10864 = load i32, i32* @r6, align 4
  %v1_10864 = add i32 %v0_10864, 4
  %v2_10864 = inttoptr i32 %v1_10864 to i32*
  %v3_10864 = load i32, i32* %v2_10864, align 4
  store i32 %v3_10864, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_1086c = inttoptr i32 %v0_10864 to i32*
  store i32 %v0_1086c, i32* %v2_1086c, align 4
  %v0_10870 = load i32, i32* %ip.global-to-local, align 4
  %v1_10870 = load i32, i32* @r6, align 4
  %v2_10870 = add i32 %v1_10870, 24
  %v3_10870 = inttoptr i32 %v2_10870 to i32*
  store i32 %v0_10870, i32* %v3_10870, align 4
  %v0_fca4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_fca4

dec_label_pc_10878:                               ; preds = %thread-pre-split95
  %v0_10880 = load i32, i32* @r6, align 4
  %v1_10880 = add i32 %v0_10880, 12
  %v2_10880 = inttoptr i32 %v1_10880 to i32*
  %v3_10880 = load i32, i32* %v2_10880, align 4
  br label %dec_label_pc_fe94.backedge

dec_label_pc_10888:                               ; preds = %dec_label_pc_fd28
  %v0_10888 = load i32, i32* @r6, align 4
  %v1_10888 = add i32 %v0_10888, 4
  %v2_10888 = inttoptr i32 %v1_10888 to i32*
  %v3_10888 = load i32, i32* %v2_10888, align 4
  store i32 %v3_10888, i32* %r0.global-to-local, align 4
  %v1_1088c = call i32 @function_11960(i32 %v3_10888)
  store i32 %v1_1088c, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_10894 = load i32, i32* @r5, align 4
  %v1_10894 = load i32, i32* @r6, align 4
  %v2_10894 = add i32 %v1_10894, 12
  %v3_10894 = inttoptr i32 %v2_10894 to i32*
  store i32 %v0_10894, i32* %v3_10894, align 4
  %v0_10898 = load i32, i32* %r4.global-to-local, align 4
  %v1_10898 = load i32, i32* @r6, align 4
  %v2_10898 = add i32 %v1_10898, 4
  %v3_10898 = inttoptr i32 %v2_10898 to i32*
  store i32 %v0_10898, i32* %v3_10898, align 4
  %v0_1089c = load i32, i32* @r5, align 4
  %v1_1089c = trunc i32 %v0_1089c to i8
  %v2_1089c = load i32, i32* @r6, align 4
  %v3_1089c = add i32 %v2_1089c, 384
  %v4_1089c = inttoptr i32 %v3_1089c to i8*
  store i8 %v1_1089c, i8* %v4_1089c, align 1
  br label %dec_label_pc_fcc8

dec_label_pc_108a4:                               ; preds = %dec_label_pc_fe50
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_108a8 = call i32 @function_10a30(i32 28)
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_108b0 = call i32 @function_10a30(i32 29)
  store i32 %v1_108b0, i32* %r0.global-to-local, align 4
  %v0_108b4 = load i32, i32* @r6, align 4
  %v1_108b4 = add i32 %v0_108b4, 12
  %v2_108b4 = inttoptr i32 %v1_108b4 to i32*
  %v3_108b4 = load i32, i32* %v2_108b4, align 4
  br label %dec_label_pc_fe94.backedge

dec_label_pc_fe94.backedge.thread:                ; preds = %dec_label_pc_10174, %dec_label_pc_10228, %dec_label_pc_10488, %dec_label_pc_1053c, %dec_label_pc_105f0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fe9c

dec_label_pc_fe94.backedge.thread491:             ; preds = %dec_label_pc_101a0, %dec_label_pc_10254, %dec_label_pc_1061c, %dec_label_pc_104b4, %dec_label_pc_10568, %dec_label_pc_101bc, %dec_label_pc_10270, %dec_label_pc_104d0, %dec_label_pc_10584, %dec_label_pc_10638
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fe9c

dec_label_pc_fe94.backedge:                       ; preds = %dec_label_pc_108a4, %dec_label_pc_10878
  %storemerge494 = phi i32 [ %v3_10880, %dec_label_pc_10878 ], [ %v3_108b4, %dec_label_pc_108a4 ]
  %v0_fe94.be = phi i32 [ %v3_10880, %dec_label_pc_10878 ], [ %v3_108b4, %dec_label_pc_108a4 ]
  %v0_fe9c148 = phi i32 [ %v0_10880, %dec_label_pc_10878 ], [ %v0_108b4, %dec_label_pc_108a4 ]
  store i32 %storemerge494, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fe94 = icmp eq i32 %v0_fe94.be, 0
  store i1 %v2_fe94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fe94, label %dec_label_pc_fcc8, label %dec_label_pc_fe9c

dec_label_pc_108bc:                               ; preds = %dec_label_pc_10420
  store i32 2, i32* @r6, align 4
  %v1_108c0 = add i32 %v2_1043c, 4
  %v2_108c0 = inttoptr i32 %v1_108c0 to i32*
  %v3_108c0 = load i32, i32* %v2_108c0, align 4
  store i32 %v3_108c0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v0_108cc = call i32 @function_e8e4()
  store i32 %v0_108cc, i32* %r0.global-to-local, align 4
  %v0_108d0 = load i32, i32* @r8, align 4
  %v1_108d0 = inttoptr i32 %v0_108d0 to i8*
  %v2_108d0 = load i8, i8* %v1_108d0, align 1
  %v3_108d0 = zext i8 %v2_108d0 to i32
  store i32 %v3_108d0, i32* %r1.global-to-local, align 4
  %v2_108d4 = call i32 @function_116e8(i32 %v0_108cc, i32 %v3_108d0)
  store i32 %v2_108d4, i32* %r0.global-to-local, align 4
  %v0_108d8 = load i32, i32* @r4, align 4
  %v2_108d8 = and i32 %v2_108d4, 1073741824
  %v3_108d8 = icmp ne i32 %v2_108d8, 0
  store i1 %v3_108d8, i1* %cpsr_c.global-to-local, align 1
  %v4_108d8 = mul i32 %v2_108d4, 4
  %v5_108d8 = add i32 %v0_108d8, %v4_108d8
  %v6_108d8 = inttoptr i32 %v5_108d8 to i32*
  %v7_108d8 = load i32, i32* %v6_108d8, align 4
  store i32 %v7_108d8, i32* %r3.global-to-local, align 4
  %v0_108dc = load i32, i32* @sl, align 4
  store i32 %v0_108dc, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_108e8 = inttoptr i32 %v0_108dc to i32*
  %v3_108e8 = call i32 @function_10a04(i32 4, i32* %v2_108e8)
  %v4_108e8 = inttoptr i32 %v3_108e8 to i8*
  store i32 %v3_108e8, i32* %r0.global-to-local, align 4
  %v2_108ec = add i32 %v3_108e8, 1
  %v3_108ec = inttoptr i32 %v2_108ec to i8*
  %v4_108ec = load i8, i8* %v3_108ec, align 1
  %v5_108ec = zext i8 %v4_108ec to i32
  store i32 %v5_108ec, i32* %r2.global-to-local, align 4
  %v3_108f0 = load i8, i8* %v4_108e8, align 1
  %v4_108f0 = zext i8 %v3_108f0 to i32
  %v4_108f4 = mul nuw nsw i32 %v5_108ec, 256
  %v5_108f4 = or i32 %v4_108f0, %v4_108f4
  store i32 %v5_108f4, i32* %r3.global-to-local, align 4
  %v1_108f8 = and i32 %v4_108f0, 128
  %v2_108f8 = icmp ne i32 %v1_108f8, 0
  store i1 %v2_108f8, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_108ec, i32* %r1.global-to-local, align 4
  %v0_108fc = load i32, i32* @r8, align 4
  store i32 %v0_108fc, i32* %r0.global-to-local, align 4
  %v6_10908 = call i32 @function_eb48(i32 %v0_108fc)
  store i32 3, i32* %r0.global-to-local, align 4
  %v1_10910 = call i32 @function_10a30(i32 3)
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_10918 = call i32 @function_10a30(i32 4)
  %v0_10920 = load i32, i32* @r5, align 4
  store i32 %v0_10920, i32* %r0.global-to-local, align 4
  store i32 %v2_10924, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_1092c = call i32 @function_120a8(i32 %v0_10920, %sockaddr* %v3_1092c, i32 16)
  store i32 %v4_1092c, i32* %r0.global-to-local, align 4
  %v3_10930 = icmp eq i32 %v4_1092c, -1
  store i1 %v3_10930, i1* %cpsr_c.global-to-local, align 1
  %v8_10930 = icmp eq i32 %v4_1092c, -1
  store i1 %v8_10930, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10930, label %dec_label_pc_10938, label %dec_label_pc_10948

dec_label_pc_10938:                               ; preds = %dec_label_pc_108bc
  %v0_10938 = load i32, i32* @r5, align 4
  store i32 %v0_10938, i32* %r0.global-to-local, align 4
  %v1_1093c = call i32 @function_11960(i32 %v0_10938)
  %v0_10940 = load i32, i32* @sl, align 4
  store i32 %v0_10940, i32* %r0.global-to-local, align 4
  %v1_10944 = call i32 @function_12cd4(i32 %v0_10940)
  store i32 %v1_10944, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10948

dec_label_pc_10948:                               ; preds = %dec_label_pc_108bc, %dec_label_pc_10938
  store i32 %v2_fe04, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10958 = load i32, i32* @r5, align 4
  store i32 %v0_10958, i32* %r0.global-to-local, align 4
  %v0_1095c = load i32, i32* @sl, align 4
  store i32 %v0_1095c, i32* %stack_var_-56, align 4
  %v6_10960 = call i32 @function_121bc(i32 %v0_10958, i32* nonnull %stack_var_-56, i32 1, i32 16384)
  store i32 %v2_10290, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10974 = load i32, i32* @r5, align 4
  store i32 %v0_10974, i32* %r0.global-to-local, align 4
  %v5_10978 = call i32 @function_121bc(i32 %v0_10974, i32* nonnull %stack_var_-48, i32 4, i32 16384)
  %v0_10980 = load i32, i32* @r6, align 4
  store i32 %v0_10980, i32* %r2.global-to-local, align 4
  store i32 %v2_10984, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1098c = load i32, i32* @r5, align 4
  store i32 %v0_1098c, i32* %r0.global-to-local, align 4
  %v5_10990 = call i32 @function_121bc(i32 %v0_1098c, i32* nonnull %stack_var_-38, i32 %v0_10980, i32 16384)
  %v0_10994 = load i32, i32* @fp, align 4
  %v1_10994 = add i32 %v0_10994, 12
  store i32 %v1_10994, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_109a0 = load i32, i32* @r5, align 4
  store i32 %v0_109a0, i32* %r0.global-to-local, align 4
  %v4_109a4 = inttoptr i32 %v1_10994 to i32*
  %v5_109a4 = call i32 @function_121bc(i32 %v0_109a0, i32* %v4_109a4, i32 1, i32 16384)
  store i32 %v5_109a4, i32* %r0.global-to-local, align 4
  %v0_109a8 = load i32, i32* @fp, align 4
  %v1_109a8 = inttoptr i32 %v0_109a8 to i32*
  %v2_109a8 = load i32, i32* %v1_109a8, align 4
  store i32 %v2_109a8, i32* %r1.global-to-local, align 4
  %v1_109ac = add i32 %v0_109a8, 12
  %v2_109ac = inttoptr i32 %v1_109ac to i8*
  %v3_109ac = load i8, i8* %v2_109ac, align 1
  %v4_109ac = zext i8 %v3_109ac to i32
  store i32 %v4_109ac, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_109b4 = load i32, i32* @r5, align 4
  store i32 %v0_109b4, i32* %r0.global-to-local, align 4
  %v4_109b8 = inttoptr i32 %v2_109a8 to i32*
  %v5_109b8 = call i32 @function_121bc(i32 %v0_109b4, i32* %v4_109b8, i32 %v4_109ac, i32 16384)
  %v0_109bc = load i32, i32* @fp, align 4
  %v1_109bc = add i32 %v0_109bc, 13
  store i32 %v1_109bc, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_109c8 = load i32, i32* @r5, align 4
  store i32 %v0_109c8, i32* %r0.global-to-local, align 4
  %v4_109cc = inttoptr i32 %v1_109bc to i32*
  %v5_109cc = call i32 @function_121bc(i32 %v0_109c8, i32* %v4_109cc, i32 1, i32 16384)
  %v0_109d0 = load i32, i32* @r5, align 4
  store i32 %v0_109d0, i32* %r0.global-to-local, align 4
  %v0_109d4 = load i32, i32* @fp, align 4
  %v1_109d4 = add i32 %v0_109d4, 13
  %v2_109d4 = inttoptr i32 %v1_109d4 to i8*
  %v3_109d4 = load i8, i8* %v2_109d4, align 1
  %v4_109d4 = zext i8 %v3_109d4 to i32
  store i32 %v4_109d4, i32* %r2.global-to-local, align 4
  %v1_109d8 = add i32 %v0_109d4, 4
  %v2_109d8 = inttoptr i32 %v1_109d8 to i32*
  %v3_109d8 = load i32, i32* %v2_109d8, align 4
  store i32 %v3_109d8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_109e0 = inttoptr i32 %v3_109d8 to i32*
  %v5_109e0 = call i32 @function_121bc(i32 %v0_109d0, i32* %v4_109e0, i32 %v4_109d4, i32 16384)
  %v0_109e4 = load i32, i32* @r5, align 4
  store i32 %v0_109e4, i32* %r0.global-to-local, align 4
  %v1_109e8 = call i32 @function_11960(i32 %v0_109e4)
  store i32 %v1_109e8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_109ec

dec_label_pc_109ec:                               ; preds = %dec_label_pc_10404, %dec_label_pc_10948
  %v0_109ec = load i32, i32* @sl, align 4
  store i32 %v0_109ec, i32* %r0.global-to-local, align 4
  %v1_109f0 = call i32 @function_12cd4(i32 %v0_109ec)
  store i32 %v1_109f0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_109f4

dec_label_pc_109f4:                               ; preds = %dec_label_pc_107a4, %dec_label_pc_109ec
  store i32 %stack_var_-1868.0, i32* %r2.global-to-local, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 104, i32* %v2_feb4, align 4
  br label %dec_label_pc_107c0

; uselistorder directives
  uselistorder i32 %v4_108f0, { 1, 0 }
  uselistorder i32 %v5_108ec, { 1, 0, 2 }
  uselistorder i32 %v2_108d4, { 1, 0, 2 }
  uselistorder i32 %v3_108b4, { 1, 0 }
  uselistorder i32 %v3_10880, { 1, 0 }
  uselistorder i32 %v3_10818, { 1, 0 }
  uselistorder i1 %v1_107e8, { 1, 0 }
  uselistorder i32 %v1_107d0, { 2, 1, 0 }
  uselistorder i32 %v1_107cc, { 1, 0 }
  uselistorder i32 %v0_10788, { 1, 0, 2 }
  uselistorder i32 %v1_10770, { 2, 1, 0 }
  uselistorder i32 %v0_1074c, { 0, 2, 1 }
  uselistorder i1 %v0_1073c, { 1, 0 }
  uselistorder i32 %v4_10730, { 1, 0, 2 }
  uselistorder i32 %v0_106c8, { 1, 2, 0 }
  uselistorder i1 %v7_1063c, { 1, 0 }
  uselistorder i32 %v1_10638, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10630, { 1, 0 }
  uselistorder i8 %v3_10628, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10638, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10614, { 1, 0 }
  uselistorder i1 %v7_1060c, { 1, 0 }
  uselistorder i1 %v7_10604, { 1, 0 }
  uselistorder i1 %v7_10588, { 1, 0 }
  uselistorder i32 %v1_10584, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_1057c, { 1, 0 }
  uselistorder i8 %v3_10574, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10584, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10560, { 1, 0 }
  uselistorder i1 %v7_10558, { 1, 0 }
  uselistorder i1 %v7_10550, { 1, 0 }
  uselistorder i1 %v7_104d4, { 1, 0 }
  uselistorder i32 %v1_104d0, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_104c8, { 1, 0 }
  uselistorder i8 %v3_104c0, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_104d0, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_104ac, { 1, 0 }
  uselistorder i1 %v7_104a4, { 1, 0 }
  uselistorder i1 %v7_1049c, { 1, 0 }
  uselistorder i32 %v0_10478, { 1, 2, 0 }
  uselistorder i32 %v2_10464, { 1, 0 }
  uselistorder i32 %v1_10464, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_10464, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i1 %v7_10414, { 1, 0 }
  uselistorder i32 %v3_10410, { 1, 0, 2, 3 }
  uselistorder i1 %v2_103fc, { 1, 0 }
  uselistorder i32 %.387, { 1, 0 }
  uselistorder i1 %v7_103e4, { 1, 0 }
  uselistorder i32 %v0_103e0, { 2, 1, 0, 3 }
  uselistorder i32 %v4_103c0, { 1, 0, 2 }
  uselistorder i32 %v4_103bc, { 1, 0, 2 }
  uselistorder i1 %v7_103ac, { 1, 0 }
  uselistorder i32 %v0_103ac, { 3, 2, 0, 4, 1 }
  uselistorder i1 %v7_10274, { 1, 0 }
  uselistorder i32 %v1_10270, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10268, { 1, 0 }
  uselistorder i8 %v3_10260, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10270, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_1024c, { 1, 0 }
  uselistorder i1 %v7_10244, { 1, 0 }
  uselistorder i1 %v7_1023c, { 1, 0 }
  uselistorder i1 %v7_101c0, { 1, 0 }
  uselistorder i32 %v1_101bc, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_101b4, { 1, 0 }
  uselistorder i8 %v3_101ac, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_101bc, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10198, { 1, 0 }
  uselistorder i1 %v7_10190, { 1, 0 }
  uselistorder i1 %v7_10188, { 1, 0 }
  uselistorder i32 %v0_10130, { 2, 1, 0 }
  uselistorder i1 %v7_10120, { 1, 0 }
  uselistorder i1 %v8_10114, { 1, 0 }
  uselistorder i8 %v3_1010c, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_1011c, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_100f8, { 1, 0 }
  uselistorder i1 %v7_100f0, { 1, 0 }
  uselistorder i32 %v0_10098, { 2, 1, 0 }
  uselistorder i1 %v7_10080, { 1, 0 }
  uselistorder i1 %v8_10074, { 1, 0 }
  uselistorder i8 %v3_1006c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1007c, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10058, { 1, 0 }
  uselistorder i1 %v7_10050, { 1, 0 }
  uselistorder i1 %v7_10048, { 1, 0 }
  uselistorder i32 %v0_10024.pre, { 0, 2, 1 }
  uselistorder i32 %v1_1000c, { 1, 0 }
  uselistorder i32 %v1_10008, { 1, 0 }
  uselistorder i32 %v1_10000, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_fffc, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_fffc, { 0, 2, 1 }
  uselistorder i1 %v7_ffa4, { 1, 0 }
  uselistorder i1 %v2_ff90, { 1, 0, 2 }
  uselistorder i1 %v2_ff78, { 1, 0, 2 }
  uselistorder i32 %v1_ff98, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_ff6c, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_ff94, { 1, 0 }
  uselistorder i32 %v2_ff9c, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v0_ff14, { 4, 17, 5, 19, 6, 18, 7, 16, 8, 15, 9, 14, 10, 13, 3, 2, 11, 12, 20, 1, 0 }
  uselistorder i32 %v1_fef0, { 1, 2, 3, 0 }
  uselistorder i32 %v3_feec, { 1, 0 }
  uselistorder i32 %v5_fed0, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v2_febc, { 1, 0, 2 }
  uselistorder i32 %v3_feb8, { 1, 0, 2 }
  uselistorder i32 %v0_10828, { 1, 0, 2 }
  uselistorder i32 %v0_fe88, { 1, 0, 2 }
  uselistorder i1 %v7_fe68, { 1, 0 }
  uselistorder i1 %v7_fe40, { 1, 0 }
  uselistorder i32 %v0_fdb8, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v3_fd98, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_fd8c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_fd18, { 2, 1, 0 }
  uselistorder i32 %v3_fd14, { 1, 0 }
  uselistorder i1 %v7_fcfc, { 1, 0 }
  uselistorder i32 %v3_fcf8, { 5, 4, 2, 1, 0, 6, 7, 3 }
  uselistorder i32 %v1_fccc, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_fcb8, { 2, 1, 0 }
  uselistorder i32 %v3_fcb4, { 1, 0 }
  uselistorder i32 %v0_fcb8, { 1, 0 }
  uselistorder i32 %v2_10290, { 1, 2, 3, 0 }
  uselistorder i32 %v2_fe04, { 4, 8, 5, 6, 3, 2, 7, 9, 10, 1, 0 }
  uselistorder i32 %v2_106bc, { 1, 2, 0 }
  uselistorder i32 %v2_ff5c, { 0, 2, 1 }
  uselistorder i32* %v2_feb4, { 1, 0, 2 }
  uselistorder i32 %v2_fc4c, { 1, 0 }
  uselistorder i32 %v1_fc4c, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_fc4c, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v1_fc1c, { 2, 1, 0 }
  uselistorder i32 %v1_fc18, { 1, 0 }
  uselistorder i32 %v2_fbe8, { 1, 0 }
  uselistorder i32 %v0_fbe8, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_fbe0, { 1, 0 }
  uselistorder i32 %v3_fbc8, { 3, 5, 2, 6, 4, 1, 0, 7 }
  uselistorder i1 %v7_fb98, { 0, 3, 1, 2 }
  uselistorder i1 %v2_fb98, { 1, 2, 0 }
  uselistorder i32 %v2_fb90, { 0, 3, 4, 5, 2, 1 }
  uselistorder i8 %stack_var_-1876.2, { 3, 5, 4, 2, 1, 0 }
  uselistorder i32 %stack_var_-1880.2, { 3, 5, 4, 2, 1, 0 }
  uselistorder i8* %stack_var_-1884.2, { 3, 5, 4, 2, 1, 0 }
  uselistorder i32 %stack_var_-1872.3, { 3, 5, 4, 2, 1, 0 }
  uselistorder i32 %stack_var_-1868.1, { 3, 5, 4, 2, 1, 0 }
  uselistorder i32 %v1_fb68, { 0, 2, 1, 3, 4, 5 }
  uselistorder i8 %stack_var_-1876.1, { 1, 0 }
  uselistorder i32 %stack_var_-1880.1, { 1, 0 }
  uselistorder i8* %stack_var_-1884.1, { 1, 0 }
  uselistorder i32 %stack_var_-1872.2, { 1, 0 }
  uselistorder i32 %stack_var_-1868.0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_fb5c, { 1, 0 }
  uselistorder i32 %v1_fb5c, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_fb5c, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_fb4c, { 1, 0 }
  uselistorder i32 %v3_fb34, { 1, 0, 2 }
  uselistorder i32 %storemerge250, { 1, 0, 2 }
  uselistorder i32 %v3_fab0, { 1, 0 }
  uselistorder i32 %v1_fa9c, { 1, 0 }
  uselistorder i32 %v1_fa84, { 1, 2, 0 }
  uselistorder i32 %v0_fa90, { 0, 3, 2, 1 }
  uselistorder i32 %v0_fa50, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v2_fa44, { 2, 1, 0 }
  uselistorder i32 %v1_fa20, { 3, 1, 0, 4, 2 }
  uselistorder i1 %v2_f9f8, { 1, 0 }
  uselistorder i32 %v4_f998, { 2, 3, 0, 1, 5, 4, 6 }
  uselistorder i32 %v1_f900, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_f81c, { 1, 0 }
  uselistorder i32 %v3_f814, { 2, 0, 1, 3 }
  uselistorder i32 %v4_f7f8, { 1, 0 }
  uselistorder i1 %v2_f748, { 1, 0 }
  uselistorder i1 %v2_f734, { 1, 0 }
  uselistorder i1 %v2_f720, { 1, 0 }
  uselistorder i32 %.386, { 2, 1, 0 }
  uselistorder i1 %v7_f6fc, { 2, 1, 0, 5, 4, 3 }
  uselistorder i1 %v2_f6e4, { 1, 0 }
  uselistorder i1 %v3_f6c8, { 1, 0, 2 }
  uselistorder i1 %v2_f6b4, { 1, 0 }
  uselistorder i1 %v2_f690, { 1, 0 }
  uselistorder i32 %v1_f640, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 31, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f62c, { 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 30, 31, 32, 29, 28, 27, 26, 25, 24, 23, 22, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f628, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v4_f618, { 1, 0 }
  uselistorder i32 %v0_f608, { 0, 1, 3, 2 }
  uselistorder i32 %v0_f5f8, { 1, 0 }
  uselistorder i8 %stack_var_-1876.0, { 1, 0 }
  uselistorder i32 %v0_f98c, { 5, 2, 3, 6, 0, 1, 4, 7 }
  uselistorder i8* %stack_var_-1884.0, { 3, 2, 0, 1 }
  uselistorder i32 %stack_var_-1872.0, { 0, 3, 2, 1 }
  uselistorder i32 %v4_f53c, { 1, 0 }
  uselistorder i32 %v0_f52c, { 2, 0, 1, 3 }
  uselistorder i32 %v3_f4fc, { 1, 0 }
  uselistorder i32 %v4_f4e8, { 2, 0, 1 }
  uselistorder i32 %v0_f4d0, { 0, 2, 1 }
  uselistorder i32 %v0_f478, { 4, 2, 0, 3, 1 }
  uselistorder i1 %v7_f41c, { 1, 0 }
  uselistorder i32 %v3_f414, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_f3fc, { 0, 2, 1 }
  uselistorder i32 %v1_f3f0, { 1, 0, 2 }
  uselistorder i32 %v0_f3e4, { 1, 0 }
  uselistorder i32 %v0_f3b0, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %storemerge253, { 1, 0 }
  uselistorder i32 %v0_f34c, { 3, 1, 2, 0, 4 }
  uselistorder i32* %stack_var_-36, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-52, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-92, { 1, 0, 4, 2, 3, 5 }
  uselistorder i32* %stack_var_-64, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 4, 3, 5, 6, 2, 7, 0, 8, 9 }
  uselistorder i32* %stack_var_-56, { 0, 9, 10, 3, 11, 6, 12, 5, 13, 7, 14, 8, 15, 4, 16, 17, 1, 2, 18, 19 }
  uselistorder i32* %stack_var_-84, { 1, 0 }
  uselistorder i32 %tmp263, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3, 4, 6, 5, 7 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 4, 3 }
  uselistorder i32* %r3.global-to-local, { 66, 12, 13, 14, 15, 16, 17, 18, 19, 20, 67, 48, 68, 69, 21, 22, 23, 24, 38, 49, 50, 51, 52, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 25, 98, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 61, 62, 63, 45, 46, 47, 53, 54, 55, 56, 57, 58, 59, 60, 70, 71, 72, 73, 74, 75, 64, 65, 76, 77, 79, 78, 80, 81, 82, 83, 84, 86, 88, 87, 85, 89, 91, 92, 93, 99, 94, 95, 96, 97, 100, 147, 148, 101, 149, 150, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 131, 134, 133, 90, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146 }
  uselistorder i32* %r2.global-to-local, { 47, 9, 10, 11, 12, 13, 14, 15, 16, 17, 24, 37, 18, 33, 38, 0, 1, 2, 3, 5, 4, 6, 8, 7, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 32, 31, 34, 36, 35, 42, 44, 43, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 45, 46, 55, 56, 57, 58, 59, 61, 63, 62, 121, 60, 64, 65, 66, 67, 71, 68, 69, 70, 72, 75, 73, 76, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120 }
  uselistorder i32* %r1.global-to-local, { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 46, 38, 39, 34, 35, 1, 2, 3, 4, 5, 6, 7, 8, 9, 63, 64, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 40, 41, 0, 47, 48, 49, 50, 51, 42, 43, 44, 45, 52, 53, 54, 56, 55, 57, 58, 59, 60, 65, 61, 62, 77, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 93, 95, 96 }
  uselistorder i32* %r0.global-to-local, { 31, 30, 33, 32, 34, 35, 36, 38, 37, 39, 40, 41, 42, 43, 44, 46, 45, 47, 49, 48, 51, 50, 52, 53, 123, 124, 125, 141, 140, 54, 142, 117, 119, 118, 143, 145, 144, 56, 55, 57, 99, 98, 101, 100, 102, 103, 120, 1, 0, 2, 4, 3, 6, 5, 7, 8, 9, 10, 12, 11, 14, 13, 16, 15, 17, 18, 19, 20, 22, 21, 24, 23, 26, 25, 27, 28, 29, 126, 59, 58, 60, 62, 61, 63, 64, 66, 65, 67, 69, 68, 70, 72, 71, 73, 74, 75, 76, 77, 79, 78, 80, 82, 81, 84, 83, 85, 86, 87, 88, 90, 89, 92, 91, 94, 93, 95, 96, 97, 105, 104, 107, 106, 111, 108, 109, 110, 128, 127, 130, 129, 113, 112, 114, 115, 116, 122, 121, 148, 146, 132, 131, 133, 135, 134, 137, 136, 138, 139, 155, 198, 147, 150, 149, 151, 152, 154, 153, 156, 159, 157, 158, 160, 162, 164, 161, 163, 166, 165, 168, 167, 169, 171, 170, 172, 173, 174, 175, 176, 178, 177, 179, 180, 181, 182, 183, 184, 186, 185, 188, 187, 189, 193, 190, 191, 192, 194, 195, 196, 197 }
  uselistorder i32* %ip.global-to-local, { 20, 21, 6, 22, 23, 7, 14, 0, 2, 1, 4, 3, 5, 18, 8, 9, 11, 10, 12, 13, 17, 19, 15, 16, 24, 25, 26, 27, 28, 29, 46, 32, 30, 31, 33, 53, 34, 35, 36, 37, 51, 52, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50 }
  uselistorder i1* %cpsr_z.global-to-local, { 27, 112, 222, 221, 98, 102, 103, 104, 105, 106, 28, 29, 56, 57, 58, 75, 76, 77, 78, 79, 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 15, 16, 11, 12, 13, 14, 17, 18, 19, 24, 25, 20, 21, 22, 23, 26, 94, 30, 31, 32, 220, 34, 35, 36, 37, 38, 39, 44, 45, 40, 41, 42, 43, 46, 47, 48, 53, 54, 49, 50, 51, 52, 55, 59, 60, 64, 65, 61, 62, 63, 66, 96, 67, 72, 73, 68, 69, 70, 71, 74, 95, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 211, 107, 108, 109, 110, 111, 212, 97, 33, 99, 100, 101, 113, 115, 114, 116, 117, 119, 121, 120, 213, 118, 122, 123, 124, 125, 126, 127, 132, 128, 129, 130, 131, 214, 215, 216, 217, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 219, 179, 180, 137, 181, 182, 136, 183, 184, 185, 186, 187, 188, 135, 189, 190, 191, 192, 193, 134, 194, 195, 196, 133, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 218, 210 }
  uselistorder i1* %cpsr_c.global-to-local, { 27, 28, 29, 110, 221, 220, 96, 100, 101, 102, 103, 104, 30, 57, 58, 59, 76, 77, 78, 79, 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 15, 16, 11, 12, 13, 14, 17, 18, 19, 24, 25, 20, 21, 22, 23, 26, 92, 31, 32, 33, 218, 34, 35, 36, 37, 38, 39, 40, 45, 46, 41, 42, 43, 44, 47, 48, 49, 54, 55, 50, 51, 52, 53, 56, 60, 61, 65, 66, 62, 63, 64, 67, 94, 68, 73, 74, 69, 70, 71, 72, 75, 93, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 209, 105, 106, 107, 108, 109, 210, 95, 217, 97, 98, 99, 111, 113, 112, 114, 115, 117, 119, 118, 211, 116, 120, 121, 122, 123, 124, 129, 125, 126, 127, 128, 212, 213, 214, 135, 215, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 219, 173, 174, 134, 175, 176, 133, 177, 178, 179, 180, 181, 182, 132, 183, 184, 185, 186, 187, 131, 188, 189, 190, 130, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 216, 208 }
  uselistorder i32 (i32)* @function_eb48, { 1, 0 }
  uselistorder i8 31, { 8, 2, 3, 0, 4, 5, 9, 10, 1, 6, 7 }
  uselistorder i32* @fp, { 2, 3, 4, 5, 6, 51, 52, 53, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0, 48, 49, 50, 54, 1, 55, 56, 57 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_1421c.190 to i32*), { 2, 4, 3, 1, 0, 6, 5 }
  uselistorder [3 x i8]* @global_var_1421c.190, { 1, 0 }
  uselistorder i8 58, { 4, 6, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 57, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 62, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 37, { 3, 5, 4, 2, 1, 0 }
  uselistorder i8 34, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 35, { 8, 9, 12, 13, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_121bc, { 6, 7, 8, 9, 10, 11, 12, 19, 0, 1, 2, 3, 4, 5, 13, 14, 15, 16, 17, 18, 21, 22, 20, 27, 23, 24, 25, 26, 28, 29, 31, 30 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 -3, { 1, 2, 3, 0 }
  uselistorder i8 -4, { 1, 2, 3, 0 }
  uselistorder i32 1073741824, { 1, 0 }
  uselistorder i32 (i32)* @function_10a30, { 36, 35, 26, 25, 30, 39, 38, 37, 34, 33, 32, 31, 29, 28, 27, 24, 23, 5, 22, 21, 20, 40, 2, 1, 0, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 4, 3 }
  uselistorder i32 (i32, i32, i32, i32)* @function_111a4, { 2, 4, 3, 1, 0 }
  uselistorder i32 (i32, i32*)* @function_10a04, { 3, 9, 0, 1, 2, 4, 5, 6, 7, 8, 10, 11, 33, 12, 13, 14, 15, 37, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 34 }
  uselistorder i32 (i32)* @function_10ae8, { 22, 31, 30, 29, 28, 27, 26, 25, 24, 23, 21, 20, 5, 19, 18, 17, 1, 0, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 3, 2, 4 }
  uselistorder i8* bitcast (i8** @global_var_1c8f0.136 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1c8f1.137, { 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1c8f0.136 to i32), { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_11b80, { 2, 0, 1 }
  uselistorder i32 384, { 3, 4, 5, 0, 1, 2, 6, 7 }
  uselistorder i32 1544, { 1, 0 }
  uselistorder i32 1672, { 2, 0, 1 }
  uselistorder i32 ()* @function_f0cc, { 3, 2, 1, 0 }
  uselistorder i8 2, { 0, 2, 1 }
  uselistorder i32 5888, { 1, 0 }
  uselistorder i32 16384, { 33, 56, 34, 57, 35, 58, 36, 59, 37, 60, 38, 61, 13, 62, 12, 69, 0, 50, 1, 51, 2, 52, 3, 53, 4, 54, 5, 55, 6, 63, 7, 64, 8, 65, 9, 66, 31, 67, 32, 68, 29, 71, 30, 72, 28, 70, 39, 73, 10, 74, 11, 75, 14, 83, 40, 84, 42, 76, 16, 77, 43, 78, 44, 79, 45, 80, 15, 81, 41, 82, 17, 85, 18, 86, 19, 87, 46, 47, 20, 88, 21, 89, 23, 90, 22, 91, 25, 92, 24, 93, 48, 49, 26, 94, 27, 95 }
  uselistorder i32 (i32, i32, i32, i32)* @function_d114, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_117b4, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_d0b8, { 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* @global_var_1c8d4.179, { 3, 0, 2, 1 }
  uselistorder i32 16711680, { 3, 0, 1, 2 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 184, { 1, 0 }
  uselistorder i32 185, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 192, { 2, 0, 1 }
  uselistorder i32 126, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_f1a0, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_14220.163 to i32), { 0, 6, 1, 7, 2, 8, 3, 9, 4, 10, 5, 11 }
  uselistorder i8* @global_var_1c8e5.159, { 1, 0 }
  uselistorder i8 64, { 6, 0, 1, 7, 2, 3, 4, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_1c8d8.150 to i32), { 2, 1, 3, 0, 5, 4, 6, 7 }
  uselistorder i8* @global_var_1c8e4.151, { 1, 0 }
  uselistorder i8** @global_var_1c8c4.146, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1c8c4.146 to i32), { 0, 1, 7, 6, 2, 5, 4, 3 }
  uselistorder i32 1024, { 1, 0 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 65280, { 35, 1, 18, 0, 2, 36, 3, 37, 25, 26, 4, 38, 19, 27, 39, 40, 5, 6, 41, 20, 7, 42, 28, 21, 22, 29, 30, 31, 43, 44, 45, 8, 46, 9, 10, 32, 33, 34, 47, 48, 49, 11, 50, 12, 13, 51, 52, 14, 53, 15, 54, 55, 23, 56, 57, 16, 58, 59, 24, 60, 61, 17 }
  uselistorder i32 ()* @function_e8e4, { 74, 73, 72, 71, 70, 69, 68, 64, 67, 66, 65, 18, 63, 62, 61, 60, 59, 21, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 20, 19, 1, 0, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 (i32, i32, i32, i32*, i32)* @function_1221c, { 0, 8, 1, 2, 3, 4, 5, 6, 7, 9, 10 }
  uselistorder i32 2048, { 7, 6, 4, 9, 10, 0, 1, 2, 8, 11, 5, 12, 3, 13, 14 }
  uselistorder i32* @global_var_1c95c.144, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 355, { 2, 3, 4, 5, 0, 1 }
  uselistorder i32* @global_var_1c958.142, { 1, 2, 3, 0, 4 }
  uselistorder i32 356, { 4, 5, 0, 6, 1, 7, 9, 2, 10, 3, 11, 8 }
  uselistorder i32 388, { 2, 1, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1c8f4.130, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32)* @function_e93c, { 1, 0 }
  uselistorder i32* @global_var_1c93c.50, { 4, 5, 1, 2, 3, 6, 0, 7, 15, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32 ()* @function_11398, { 2, 1, 0 }
  uselistorder i32* @global_var_1c960.128, { 0, 2, 1 }
  uselistorder i32 ()* @function_1198c, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* @sl, { 0, 1, 2, 3, 4, 5, 6, 7, 87, 88, 89, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 34, 35, 36, 37, 38, 39 }
  uselistorder i32* @sb, { 3, 4, 7, 1, 2, 5, 6, 11, 10, 8, 9, 12, 13, 77, 78, 79, 14, 17, 15, 16, 0, 18, 19, 20, 21, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80, 81, 82, 83, 84, 85, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36 }
  uselistorder label %dec_label_pc_109f4, { 1, 0 }
  uselistorder label %dec_label_pc_109ec, { 1, 0 }
  uselistorder label %dec_label_pc_10948, { 1, 0 }
  uselistorder label %dec_label_pc_fe94.backedge.thread491, { 9, 2, 8, 4, 7, 3, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_fe94.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10864, { 1, 0 }
  uselistorder label %.thread241, { 1, 0 }
  uselistorder label %bb381, { 1, 0 }
  uselistorder label %dec_label_pc_107c0, { 1, 0 }
  uselistorder label %thread-pre-split95, { 1, 0 }
  uselistorder label %dec_label_pc_10704, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10638, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10624, { 1, 0 }
  uselistorder label %dec_label_pc_10584, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10570, { 1, 0 }
  uselistorder label %dec_label_pc_104d0, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_104bc, { 1, 0 }
  uselistorder label %dec_label_pc_10464, { 4, 5, 1, 2, 3, 11, 6, 7, 8, 9, 10, 0 }
  uselistorder label %dec_label_pc_10448, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10270, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_1025c, { 1, 0 }
  uselistorder label %dec_label_pc_101bc, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_101a8, { 1, 0 }
  uselistorder label %dec_label_pc_1011c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_10108, { 1, 0 }
  uselistorder label %dec_label_pc_10098, { 1, 0 }
  uselistorder label %dec_label_pc_1007c, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10068, { 1, 0 }
  uselistorder label %dec_label_pc_10024, { 1, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_10014, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %bb354, { 2, 1, 0 }
  uselistorder label %bb351, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ff74, { 1, 0 }
  uselistorder label %dec_label_pc_ff74.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_fefc, { 1, 0 }
  uselistorder label %bb348, { 1, 0 }
  uselistorder label %dec_label_pc_feac, { 1, 0 }
  uselistorder label %dec_label_pc_fe9c, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_fe9c.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_fe90.loopexit, { 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_fdf0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_fcc8, { 1, 7, 8, 4, 5, 0, 6, 2, 3 }
  uselistorder label %dec_label_pc_fca4, { 1, 0 }
  uselistorder label %bb343, { 1, 0 }
  uselistorder label %dec_label_pc_fbc8, { 1, 0 }
  uselistorder label %dec_label_pc_fbc0, { 1, 0 }
  uselistorder label %bb341, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_fae8.dec_label_pc_fae8_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_facc.dec_label_pc_facc_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_fac4, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_fa84, { 1, 0 }
  uselistorder label %dec_label_pc_f920, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_f914, { 1, 0 }
  uselistorder label %.thread64, { 2, 1, 0 }
  uselistorder label %.thread63, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f780, { 1, 0 }
  uselistorder label %dec_label_pc_f774, { 1, 0 }
  uselistorder label %dec_label_pc_f768, { 1, 0 }
  uselistorder label %dec_label_pc_f75c, { 1, 0 }
  uselistorder label %dec_label_pc_f750, { 1, 0 }
  uselistorder label %dec_label_pc_f73c, { 1, 0 }
  uselistorder label %dec_label_pc_f728, { 1, 0 }
  uselistorder label %dec_label_pc_f714, { 1, 0 }
  uselistorder label %dec_label_pc_f6f4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f6d0, { 1, 0 }
  uselistorder label %dec_label_pc_f6c4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f6a0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f67c, { 1, 0 }
  uselistorder label %bb303, { 1, 0 }
  uselistorder label %dec_label_pc_f628, { 30, 6, 10, 2, 11, 3, 12, 4, 13, 5, 14, 0, 15, 16, 17, 18, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 28, 29, 31 }
  uselistorder label %dec_label_pc_f478, { 1, 0 }
}

define i32 @function_10a04(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10a04:
  %v3_10a08 = mul i32 %arg1, 8
  %v2_10a0c = add i32 %v3_10a08, ptrtoint (i32* @global_var_1c968.196 to i32)
  %v2_10a10 = icmp eq i32* %arg2, null
  br i1 %v2_10a10, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10a04
  %v3_10a1c11 = inttoptr i32 %v2_10a0c to i32*
  %v4_10a1c12 = load i32, i32* %v3_10a1c11, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_10a04
  %v2_10a14 = add i32 %v3_10a08, add (i32 ptrtoint (i32* @global_var_1c968.196 to i32), i32 5)
  %v3_10a14 = inttoptr i32 %v2_10a14 to i8*
  %v4_10a14 = load i8, i8* %v3_10a14, align 1
  %v5_10a14 = zext i8 %v4_10a14 to i32
  store i32 %v5_10a14, i32* @r2, align 4
  %v2_10a18 = add i32 %v3_10a08, add (i32 ptrtoint (i32* @global_var_1c968.196 to i32), i32 4)
  %v3_10a18 = inttoptr i32 %v2_10a18 to i8*
  %v4_10a18 = load i8, i8* %v3_10a18, align 4
  %v5_10a18 = zext i8 %v4_10a18 to i32
  %v3_10a1c = inttoptr i32 %v2_10a0c to i32*
  %v4_10a1c = load i32, i32* %v3_10a1c, align 4
  %v5_10a20 = mul nuw nsw i32 %v5_10a14, 256
  %v6_10a20 = or i32 %v5_10a18, %v5_10a20
  store i32 %v6_10a20, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_10a1c714 = phi i32 [ %v4_10a1c12, %.thread ], [ %v4_10a1c, %bb ]
  ret i32 %v4_10a1c714

; uselistorder directives
  uselistorder i32 %v2_10a0c, { 1, 0 }
  uselistorder i32 %v3_10a08, { 2, 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_10a30(i32 %arg1) local_unnamed_addr {
dec_label_pc_10a30:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_10a30 = mul i32 %arg1, 8
  %v3_10a34 = load i32, i32* @r4, align 4
  store i32 %v3_10a34, i32* %stack_var_-20, align 4
  %v3_10a44 = and i32 %v3_10a30, 2040
  %v2_10a48 = add i32 %v3_10a44, ptrtoint (i32* @global_var_1c968.196 to i32)
  store i32 %v2_10a48, i32* @lr, align 4
  %v1_10a50 = add i32 %v3_10a44, add (i32 ptrtoint (i32* @global_var_1c968.196 to i32), i32 4)
  store i32 %v1_10a50, i32* %r7.global-to-local, align 4
  %v2_10a54 = load i32, i32* @global_var_1c738.199, align 4
  store i32 %v2_10a54, i32* @r2, align 4
  %v2_10a58 = inttoptr i32 %v1_10a50 to i8*
  %v3_10a58 = load i8, i8* %v2_10a58, align 4
  %v4_10a58 = zext i8 %v3_10a58 to i32
  store i32 %v4_10a58, i32* @r1, align 4
  %v1_10a5c = add i32 %v3_10a44, add (i32 ptrtoint (i32* @global_var_1c968.196 to i32), i32 5)
  %v2_10a5c = inttoptr i32 %v1_10a5c to i8*
  %v3_10a5c = load i8, i8* %v2_10a5c, align 1
  %v4_10a5c = zext i8 %v3_10a5c to i32
  %v3_10a60 = udiv i32 %v2_10a54, 256
  %v4_10a64 = mul nuw nsw i32 %v4_10a5c, 256
  %v5_10a64 = or i32 %v4_10a64, %v4_10a58
  %v7_10a64 = icmp eq i32 %v5_10a64, 0
  store i1 %v7_10a64, i1* @cpsr_z, align 1
  %v3_10a68 = udiv i32 %v2_10a54, 65536
  %v1_10a6c = urem i32 %v3_10a60, 256
  store i32 %v1_10a6c, i32* %r6.global-to-local, align 4
  %v1_10a70 = urem i32 %v3_10a68, 256
  store i32 %v1_10a70, i32* %r5.global-to-local, align 4
  %v3_10a74 = udiv i32 %v2_10a54, 16777216
  store i32 %v3_10a74, i32* %r4.global-to-local, align 4
  %v1_10a78 = urem i32 %v2_10a54, 256
  br i1 %v7_10a64, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_10a30
  store i32 %v3_10a34, i32* @r4, align 4
  ret i32 %v1_10a78

bb8:                                              ; preds = %dec_label_pc_10a30
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10a84

dec_label_pc_10a84:                               ; preds = %dec_label_pc_10a84, %bb8
  %v2_10a90 = phi i32 [ %v1_10acc, %dec_label_pc_10a84 ], [ 0, %bb8 ]
  %v0_10a84 = phi i32 [ %v0_10ac4, %dec_label_pc_10a84 ], [ %v2_10a48, %bb8 ]
  %v1_10a84 = inttoptr i32 %v0_10a84 to i32*
  %v2_10a84 = load i32, i32* %v1_10a84, align 4
  %v2_10a88 = add i32 %v2_10a84, %v2_10a90
  %v3_10a88 = inttoptr i32 %v2_10a88 to i8*
  %v4_10a88 = load i8, i8* %v3_10a88, align 1
  %v6_10a88 = zext i8 %v4_10a88 to i32
  %v2_10a8c = xor i32 %v6_10a88, %v1_10a78
  %v1_10a90 = trunc i32 %v2_10a8c to i8
  store i8 %v1_10a90, i8* %v3_10a88, align 1
  %v0_10a94 = load i32, i32* @lr, align 4
  %v1_10a94 = inttoptr i32 %v0_10a94 to i32*
  %v2_10a94 = load i32, i32* %v1_10a94, align 4
  %v0_10a98 = load i32, i32* %ip.global-to-local, align 4
  %v2_10a98 = add i32 %v0_10a98, %v2_10a94
  %v3_10a98 = inttoptr i32 %v2_10a98 to i8*
  %v4_10a98 = load i8, i8* %v3_10a98, align 1
  %v6_10a98 = zext i8 %v4_10a98 to i32
  %v0_10a9c = load i32, i32* %r6.global-to-local, align 4
  %v2_10a9c = xor i32 %v0_10a9c, %v6_10a98
  %v1_10aa0 = trunc i32 %v2_10a9c to i8
  store i8 %v1_10aa0, i8* %v3_10a98, align 1
  %v0_10aa4 = load i32, i32* @lr, align 4
  %v1_10aa4 = inttoptr i32 %v0_10aa4 to i32*
  %v2_10aa4 = load i32, i32* %v1_10aa4, align 4
  %v0_10aa8 = load i32, i32* %ip.global-to-local, align 4
  %v2_10aa8 = add i32 %v0_10aa8, %v2_10aa4
  %v3_10aa8 = inttoptr i32 %v2_10aa8 to i8*
  %v4_10aa8 = load i8, i8* %v3_10aa8, align 1
  %v6_10aa8 = zext i8 %v4_10aa8 to i32
  %v0_10aac = load i32, i32* %r5.global-to-local, align 4
  %v2_10aac = xor i32 %v0_10aac, %v6_10aa8
  %v1_10ab0 = trunc i32 %v2_10aac to i8
  store i8 %v1_10ab0, i8* %v3_10aa8, align 1
  %v0_10ab4 = load i32, i32* @lr, align 4
  %v1_10ab4 = inttoptr i32 %v0_10ab4 to i32*
  %v2_10ab4 = load i32, i32* %v1_10ab4, align 4
  store i32 %v2_10ab4, i32* @r1, align 4
  %v0_10ab8 = load i32, i32* %ip.global-to-local, align 4
  %v2_10ab8 = add i32 %v0_10ab8, %v2_10ab4
  %v3_10ab8 = inttoptr i32 %v2_10ab8 to i8*
  %v4_10ab8 = load i8, i8* %v3_10ab8, align 1
  %v6_10ab8 = zext i8 %v4_10ab8 to i32
  %v0_10abc = load i32, i32* %r4.global-to-local, align 4
  %v2_10abc = xor i32 %v0_10abc, %v6_10ab8
  %v1_10ac0 = trunc i32 %v2_10abc to i8
  store i8 %v1_10ac0, i8* %v3_10ab8, align 1
  %v0_10ac4 = load i32, i32* @lr, align 4
  %v1_10ac4 = add i32 %v0_10ac4, 4
  %v2_10ac4 = inttoptr i32 %v1_10ac4 to i8*
  %v3_10ac4 = load i8, i8* %v2_10ac4, align 1
  %v4_10ac4 = zext i8 %v3_10ac4 to i32
  %v0_10ac8 = load i32, i32* %r7.global-to-local, align 4
  %v1_10ac8 = add i32 %v0_10ac8, 1
  %v2_10ac8 = inttoptr i32 %v1_10ac8 to i8*
  %v3_10ac8 = load i8, i8* %v2_10ac8, align 1
  %v4_10ac8 = zext i8 %v3_10ac8 to i32
  %v0_10acc = load i32, i32* %ip.global-to-local, align 4
  %v1_10acc = add i32 %v0_10acc, 1
  store i32 %v1_10acc, i32* %ip.global-to-local, align 4
  %v4_10ad0 = mul nuw nsw i32 %v4_10ac8, 256
  %v5_10ad0 = or i32 %v4_10ad0, %v4_10ac4
  store i32 %v5_10ad0, i32* @r2, align 4
  %v9_10ad4 = icmp eq i32 %v5_10ad0, %v1_10acc
  store i1 %v9_10ad4, i1* @cpsr_z, align 1
  %v8_10ad8 = icmp sgt i32 %v5_10ad0, %v1_10acc
  br i1 %v8_10ad8, label %dec_label_pc_10a84, label %dec_label_pc_10adc

dec_label_pc_10adc:                               ; preds = %dec_label_pc_10a84
  %v2_10adc = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_10adc, i32* @r4, align 4
  ret i32 %v1_10a78

; uselistorder directives
  uselistorder i32 %v1_10acc, { 1, 2, 3, 0 }
  uselistorder i32 %v0_10ac4, { 1, 0 }
  uselistorder i32 %v1_10a78, { 0, 2, 1 }
  uselistorder i32 %v2_10a54, { 3, 0, 1, 2, 4 }
}

define i32 @function_10ae8(i32 %arg1) local_unnamed_addr {
dec_label_pc_10ae8:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_10ae8 = mul i32 %arg1, 8
  %v3_10aec = load i32, i32* @r4, align 4
  store i32 %v3_10aec, i32* %stack_var_-20, align 4
  %v3_10afc = and i32 %v3_10ae8, 2040
  %v2_10b00 = add i32 %v3_10afc, ptrtoint (i32* @global_var_1c968.196 to i32)
  store i32 %v2_10b00, i32* @lr, align 4
  %v1_10b08 = add i32 %v3_10afc, add (i32 ptrtoint (i32* @global_var_1c968.196 to i32), i32 4)
  store i32 %v1_10b08, i32* %r7.global-to-local, align 4
  %v2_10b0c = load i32, i32* @global_var_1c738.199, align 4
  store i32 %v2_10b0c, i32* @r2, align 4
  %v2_10b10 = inttoptr i32 %v1_10b08 to i8*
  %v3_10b10 = load i8, i8* %v2_10b10, align 4
  %v4_10b10 = zext i8 %v3_10b10 to i32
  %v1_10b14 = add i32 %v3_10afc, add (i32 ptrtoint (i32* @global_var_1c968.196 to i32), i32 5)
  %v2_10b14 = inttoptr i32 %v1_10b14 to i8*
  %v3_10b14 = load i8, i8* %v2_10b14, align 1
  %v4_10b14 = zext i8 %v3_10b14 to i32
  %v3_10b18 = udiv i32 %v2_10b0c, 256
  %v4_10b1c = mul nuw nsw i32 %v4_10b14, 256
  %v5_10b1c = or i32 %v4_10b1c, %v4_10b10
  %v7_10b1c = icmp eq i32 %v5_10b1c, 0
  %v3_10b20 = udiv i32 %v2_10b0c, 65536
  %v1_10b24 = urem i32 %v3_10b18, 256
  store i32 %v1_10b24, i32* %r6.global-to-local, align 4
  %v1_10b28 = urem i32 %v3_10b20, 256
  store i32 %v1_10b28, i32* %r5.global-to-local, align 4
  %v3_10b2c = udiv i32 %v2_10b0c, 16777216
  store i32 %v3_10b2c, i32* %r4.global-to-local, align 4
  %v1_10b30 = urem i32 %v2_10b0c, 256
  br i1 %v7_10b1c, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_10ae8
  store i32 %v3_10aec, i32* @r4, align 4
  ret i32 %v1_10b30

bb8:                                              ; preds = %dec_label_pc_10ae8
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10b3c

dec_label_pc_10b3c:                               ; preds = %dec_label_pc_10b3c, %bb8
  %v2_10b48 = phi i32 [ %v1_10b84, %dec_label_pc_10b3c ], [ 0, %bb8 ]
  %v0_10b3c = phi i32 [ %v0_10b7c, %dec_label_pc_10b3c ], [ %v2_10b00, %bb8 ]
  %v1_10b3c = inttoptr i32 %v0_10b3c to i32*
  %v2_10b3c = load i32, i32* %v1_10b3c, align 4
  %v2_10b40 = add i32 %v2_10b3c, %v2_10b48
  %v3_10b40 = inttoptr i32 %v2_10b40 to i8*
  %v4_10b40 = load i8, i8* %v3_10b40, align 1
  %v6_10b40 = zext i8 %v4_10b40 to i32
  %v2_10b44 = xor i32 %v6_10b40, %v1_10b30
  %v1_10b48 = trunc i32 %v2_10b44 to i8
  store i8 %v1_10b48, i8* %v3_10b40, align 1
  %v0_10b4c = load i32, i32* @lr, align 4
  %v1_10b4c = inttoptr i32 %v0_10b4c to i32*
  %v2_10b4c = load i32, i32* %v1_10b4c, align 4
  %v0_10b50 = load i32, i32* %ip.global-to-local, align 4
  %v2_10b50 = add i32 %v0_10b50, %v2_10b4c
  %v3_10b50 = inttoptr i32 %v2_10b50 to i8*
  %v4_10b50 = load i8, i8* %v3_10b50, align 1
  %v6_10b50 = zext i8 %v4_10b50 to i32
  %v0_10b54 = load i32, i32* %r6.global-to-local, align 4
  %v2_10b54 = xor i32 %v0_10b54, %v6_10b50
  %v1_10b58 = trunc i32 %v2_10b54 to i8
  store i8 %v1_10b58, i8* %v3_10b50, align 1
  %v0_10b5c = load i32, i32* @lr, align 4
  %v1_10b5c = inttoptr i32 %v0_10b5c to i32*
  %v2_10b5c = load i32, i32* %v1_10b5c, align 4
  %v0_10b60 = load i32, i32* %ip.global-to-local, align 4
  %v2_10b60 = add i32 %v0_10b60, %v2_10b5c
  %v3_10b60 = inttoptr i32 %v2_10b60 to i8*
  %v4_10b60 = load i8, i8* %v3_10b60, align 1
  %v6_10b60 = zext i8 %v4_10b60 to i32
  %v0_10b64 = load i32, i32* %r5.global-to-local, align 4
  %v2_10b64 = xor i32 %v0_10b64, %v6_10b60
  %v1_10b68 = trunc i32 %v2_10b64 to i8
  store i8 %v1_10b68, i8* %v3_10b60, align 1
  %v0_10b6c = load i32, i32* @lr, align 4
  %v1_10b6c = inttoptr i32 %v0_10b6c to i32*
  %v2_10b6c = load i32, i32* %v1_10b6c, align 4
  %v0_10b70 = load i32, i32* %ip.global-to-local, align 4
  %v2_10b70 = add i32 %v0_10b70, %v2_10b6c
  %v3_10b70 = inttoptr i32 %v2_10b70 to i8*
  %v4_10b70 = load i8, i8* %v3_10b70, align 1
  %v6_10b70 = zext i8 %v4_10b70 to i32
  %v0_10b74 = load i32, i32* %r4.global-to-local, align 4
  %v2_10b74 = xor i32 %v0_10b74, %v6_10b70
  %v1_10b78 = trunc i32 %v2_10b74 to i8
  store i8 %v1_10b78, i8* %v3_10b70, align 1
  %v0_10b7c = load i32, i32* @lr, align 4
  %v1_10b7c = add i32 %v0_10b7c, 4
  %v2_10b7c = inttoptr i32 %v1_10b7c to i8*
  %v3_10b7c = load i8, i8* %v2_10b7c, align 1
  %v4_10b7c = zext i8 %v3_10b7c to i32
  %v0_10b80 = load i32, i32* %r7.global-to-local, align 4
  %v1_10b80 = add i32 %v0_10b80, 1
  %v2_10b80 = inttoptr i32 %v1_10b80 to i8*
  %v3_10b80 = load i8, i8* %v2_10b80, align 1
  %v4_10b80 = zext i8 %v3_10b80 to i32
  %v0_10b84 = load i32, i32* %ip.global-to-local, align 4
  %v1_10b84 = add i32 %v0_10b84, 1
  store i32 %v1_10b84, i32* %ip.global-to-local, align 4
  %v4_10b88 = mul nuw nsw i32 %v4_10b80, 256
  %v5_10b88 = or i32 %v4_10b88, %v4_10b7c
  store i32 %v5_10b88, i32* @r2, align 4
  %v8_10b90 = icmp sgt i32 %v5_10b88, %v1_10b84
  br i1 %v8_10b90, label %dec_label_pc_10b3c, label %dec_label_pc_10b94

dec_label_pc_10b94:                               ; preds = %dec_label_pc_10b3c
  %v2_10b94 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_10b94, i32* @r4, align 4
  ret i32 %v1_10b30

; uselistorder directives
  uselistorder i32 %v1_10b84, { 1, 2, 0 }
  uselistorder i32 %v0_10b7c, { 1, 0 }
  uselistorder i32 %v1_10b30, { 0, 2, 1 }
  uselistorder i32 %v2_10b0c, { 3, 0, 1, 2, 4 }
}

define i32 @function_10ba0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10ba0:
  %fp.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_10ba0 = load i32, i32* @r4, align 4
  store i32 %v3_10ba0, i32* %stack_var_-36, align 4
  %v6_10ba0 = load i32, i32* @r5, align 4
  %v9_10ba0 = load i32, i32* @r6, align 4
  %v12_10ba0 = load i32, i32* @r7, align 4
  %v1_10ba8 = call i32 @function_123e4(i32 2)
  store i32 ptrtoint (i32* @global_var_1c968.196 to i32), i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 2, i32* @r7, align 4
  store i32 %v1_10ba8, i32* @r6, align 4
  %v3_10bc4 = call i32 @function_1115c(i32 %v1_10ba8, i32 ptrtoint (i32* @global_var_14234.204 to i32), i32 2)
  %v0_10bcc = load i32, i32* @r6, align 4
  store i32 %v0_10bcc, i32* @global_var_1c970.205, align 4
  %v0_10bd0 = load i32, i32* @r7, align 4
  %v1_10bd0 = trunc i32 %v0_10bd0 to i8
  store i8 %v1_10bd0, i8* bitcast (i32* @global_var_1c974.206 to i8*), align 4
  %v0_10bd4 = load i32, i32* @r5, align 4
  %v1_10bd4 = trunc i32 %v0_10bd4 to i8
  store i8 %v1_10bd4, i8* bitcast (i32* @global_var_1c975.207 to i8*), align 4
  %v1_10bd8 = call i32 @function_123e4(i32 12)
  store i32 %v1_10bd8, i32* @r6, align 4
  %v4_10be8 = call i32 @function_1115c(i32 %v1_10bd8, i32 ptrtoint ([13 x i8]* @global_var_14238.209 to i32), i32 12)
  store i8 12, i8* bitcast (i32* @global_var_1c97c.210 to i8*), align 4
  %v0_10bf8 = load i32, i32* @r6, align 4
  store i32 %v0_10bf8, i32* @global_var_1c978.211, align 4
  %v0_10bfc = load i32, i32* @r5, align 4
  %v1_10bfc = trunc i32 %v0_10bfc to i8
  store i8 %v1_10bfc, i8* bitcast (i32* @global_var_1c97d.212 to i8*), align 4
  %v1_10c00 = call i32 @function_123e4(i32 12)
  store i32 %v1_10c00, i32* @r6, align 4
  %v4_10c10 = call i32 @function_1115c(i32 %v1_10c00, i32 ptrtoint ([13 x i8]* @global_var_14248.214 to i32), i32 12)
  %v0_10c18 = load i32, i32* @r7, align 4
  store i8 12, i8* bitcast (i32* @global_var_1c984.215 to i8*), align 4
  %v0_10c20 = load i32, i32* @r6, align 4
  store i32 %v0_10c20, i32* @global_var_1c980.216, align 4
  %v0_10c24 = load i32, i32* @r5, align 4
  %v1_10c24 = trunc i32 %v0_10c24 to i8
  store i8 %v1_10c24, i8* bitcast (i32* @global_var_1c985.217 to i8*), align 4
  %v1_10c28 = call i32 @function_123e4(i32 %v0_10c18)
  %v0_10c2c = load i32, i32* @r7, align 4
  store i32 %v1_10c28, i32* @r6, align 4
  %v3_10c38 = call i32 @function_1115c(i32 %v1_10c28, i32 ptrtoint (i32* @global_var_14258.219 to i32), i32 %v0_10c2c)
  %v0_10c40 = load i32, i32* @r6, align 4
  store i32 %v0_10c40, i32* @global_var_1c988.220, align 4
  %v0_10c44 = load i32, i32* @r7, align 4
  %v1_10c44 = trunc i32 %v0_10c44 to i8
  store i8 %v1_10c44, i8* bitcast (i32* @global_var_1c98c.221 to i8*), align 4
  %v0_10c48 = load i32, i32* @r5, align 4
  %v1_10c48 = trunc i32 %v0_10c48 to i8
  store i8 %v1_10c48, i8* bitcast (i32* @global_var_1c98d.222 to i8*), align 4
  %v1_10c4c = call i32 @function_123e4(i32 36)
  store i32 %v1_10c4c, i32* @r6, align 4
  %v4_10c5c = call i32 @function_1115c(i32 %v1_10c4c, i32 ptrtoint ([37 x i8]* @global_var_1425c.224 to i32), i32 36)
  store i8 36, i8* bitcast (i32* @global_var_1c994.225 to i8*), align 4
  %v0_10c6c = load i32, i32* @r6, align 4
  store i32 %v0_10c6c, i32* @global_var_1c990.226, align 4
  %v0_10c70 = load i32, i32* @r5, align 4
  %v1_10c70 = trunc i32 %v0_10c70 to i8
  store i8 %v1_10c70, i8* bitcast (i32* @global_var_1c995.227 to i8*), align 4
  %v1_10c74 = call i32 @function_123e4(i32 6)
  store i32 6, i32* %fp.global-to-local, align 4
  store i32 %v1_10c74, i32* @r6, align 4
  %v4_10c88 = call i32 @function_1115c(i32 %v1_10c74, i32 ptrtoint ([7 x i8]* @global_var_14284.229 to i32), i32 6)
  %v0_10c90 = load i32, i32* @r6, align 4
  store i32 %v0_10c90, i32* @global_var_1c998.230, align 4
  store i8 6, i8* bitcast (i32* @global_var_1c99c.231 to i8*), align 4
  %v0_10c98 = load i32, i32* @r5, align 4
  %v1_10c98 = trunc i32 %v0_10c98 to i8
  store i8 %v1_10c98, i8* bitcast (i32* @global_var_1c99d.232 to i8*), align 4
  %v1_10c9c = call i32 @function_123e4(i32 7)
  %v0_10ca0 = load i32, i32* @r7, align 4
  %v1_10ca0 = add i32 %v0_10ca0, 5
  store i32 %v1_10ca0, i32* @r7, align 4
  store i32 %v1_10c9c, i32* @r6, align 4
  %v4_10cb0 = call i32 @function_1115c(i32 %v1_10c9c, i32 ptrtoint ([8 x i8]* @global_var_1428c.234 to i32), i32 %v1_10ca0)
  %v0_10cb4 = load i32, i32* @r7, align 4
  %v0_10cb8 = load i32, i32* @r6, align 4
  store i32 %v0_10cb8, i32* @global_var_1c9a0.235, align 4
  %v1_10cbc = trunc i32 %v0_10cb4 to i8
  store i8 %v1_10cbc, i8* bitcast (i32* @global_var_1c9a4.236 to i8*), align 4
  %v0_10cc0 = load i32, i32* @r5, align 4
  %v1_10cc0 = trunc i32 %v0_10cc0 to i8
  store i8 %v1_10cc0, i8* bitcast (i32* @global_var_1c9a5.237 to i8*), align 4
  %v1_10cc4 = call i32 @function_123e4(i32 %v0_10cb4)
  %v0_10cc8 = load i32, i32* @r7, align 4
  store i32 %v1_10cc4, i32* @r6, align 4
  %v4_10cd4 = call i32 @function_1115c(i32 %v1_10cc4, i32 ptrtoint ([8 x i8]* @global_var_14294.239 to i32), i32 %v0_10cc8)
  %v0_10cdc = load i32, i32* @r6, align 4
  store i32 %v0_10cdc, i32* @global_var_1c9a8.240, align 4
  %v0_10ce0 = load i32, i32* @r7, align 4
  %v1_10ce0 = trunc i32 %v0_10ce0 to i8
  store i8 %v1_10ce0, i8* bitcast (i32* @global_var_1c9ac.241 to i8*), align 4
  %v0_10ce4 = load i32, i32* @r5, align 4
  %v1_10ce4 = trunc i32 %v0_10ce4 to i8
  store i8 %v1_10ce4, i8* bitcast (i32* @global_var_1c9ad.242 to i8*), align 4
  %v1_10ce8 = call i32 @function_123e4(i32 3)
  store i32 %v1_10ce8, i32* @r6, align 4
  %v4_10cf8 = call i32 @function_1115c(i32 %v1_10ce8, i32 ptrtoint ([4 x i8]* @global_var_1429c.244 to i32), i32 3)
  store i8 3, i8* bitcast (i32* @global_var_1c9b4.245 to i8*), align 4
  %v0_10d08 = load i32, i32* @r6, align 4
  store i32 %v0_10d08, i32* @global_var_1c9b0.246, align 4
  %v0_10d0c = load i32, i32* @r5, align 4
  %v1_10d0c = trunc i32 %v0_10d0c to i8
  store i8 %v1_10d0c, i8* bitcast (i32* @global_var_1c9b5.247 to i8*), align 4
  %v1_10d10 = call i32 @function_123e4(i32 19)
  store i32 %v1_10d10, i32* @r6, align 4
  %v3_10d20 = call i32 @function_1115c(i32 %v1_10d10, i32 ptrtoint (i32* @global_var_142a0.249 to i32), i32 19)
  store i8 19, i8* bitcast (i32* @global_var_1c9bc.250 to i8*), align 4
  %v0_10d30 = load i32, i32* @r6, align 4
  store i32 %v0_10d30, i32* @global_var_1c9b8.251, align 4
  %v0_10d34 = load i32, i32* @r5, align 4
  %v1_10d34 = trunc i32 %v0_10d34 to i8
  store i8 %v1_10d34, i8* bitcast (i32* @global_var_1c9bd.252 to i8*), align 4
  %v1_10d38 = call i32 @function_123e4(i32 24)
  store i32 %v1_10d38, i32* @r6, align 4
  %v3_10d48 = call i32 @function_1115c(i32 %v1_10d38, i32 ptrtoint (i32* @global_var_142b4.254 to i32), i32 24)
  store i8 24, i8* bitcast (i32* @global_var_1c9c4.255 to i8*), align 4
  %v0_10d58 = load i32, i32* @r6, align 4
  store i32 %v0_10d58, i32* @global_var_1c9c0.256, align 4
  %v0_10d5c = load i32, i32* @r5, align 4
  %v1_10d5c = trunc i32 %v0_10d5c to i8
  store i8 %v1_10d5c, i8* bitcast (i32* @global_var_1c9c5.257 to i8*), align 4
  %v1_10d60 = call i32 @function_123e4(i32 9)
  store i32 %v1_10d60, i32* @r6, align 4
  %v4_10d70 = call i32 @function_1115c(i32 %v1_10d60, i32 ptrtoint ([10 x i8]* @global_var_142d0.259 to i32), i32 9)
  store i8 9, i8* bitcast (i32* @global_var_1c9cc.260 to i8*), align 4
  %v0_10d80 = load i32, i32* @r6, align 4
  store i32 %v0_10d80, i32* @global_var_1c9c8.261, align 4
  %v0_10d84 = load i32, i32* @r5, align 4
  %v1_10d84 = trunc i32 %v0_10d84 to i8
  store i8 %v1_10d84, i8* bitcast (i32* @global_var_1c9cd.262 to i8*), align 4
  %v1_10d88 = call i32 @function_123e4(i32 16)
  store i32 %v1_10d88, i32* @r6, align 4
  store i32 16, i32* %sl.global-to-local, align 4
  %v4_10d9c = call i32 @function_1115c(i32 %v1_10d88, i32 ptrtoint ([17 x i8]* @global_var_142dc.264 to i32), i32 16)
  %v0_10da4 = load i32, i32* @r6, align 4
  store i32 %v0_10da4, i32* @global_var_1c9d0.265, align 4
  store i8 16, i8* bitcast (i32* @global_var_1c9d4.266 to i8*), align 4
  %v0_10dac = load i32, i32* @r5, align 4
  %v1_10dac = trunc i32 %v0_10dac to i8
  store i8 %v1_10dac, i8* bitcast (i32* @global_var_1c9d5.267 to i8*), align 4
  %v1_10db0 = call i32 @function_123e4(i32 22)
  store i32 %v1_10db0, i32* @r6, align 4
  %v4_10dc0 = call i32 @function_1115c(i32 %v1_10db0, i32 ptrtoint ([23 x i8]* @global_var_142f0.269 to i32), i32 22)
  %v0_10dc8 = load i32, i32* @r7, align 4
  store i8 22, i8* bitcast (i32* @global_var_1c9dc.270 to i8*), align 4
  %v0_10dd0 = load i32, i32* @r6, align 4
  store i32 %v0_10dd0, i32* @global_var_1c9d8.271, align 4
  %v0_10dd4 = load i32, i32* @r5, align 4
  %v1_10dd4 = trunc i32 %v0_10dd4 to i8
  store i8 %v1_10dd4, i8* bitcast (i32* @global_var_1c9dd.272 to i8*), align 4
  %v1_10dd8 = call i32 @function_123e4(i32 %v0_10dc8)
  %v0_10ddc = load i32, i32* @r7, align 4
  store i32 %v1_10dd8, i32* @r6, align 4
  %v4_10de8 = call i32 @function_1115c(i32 %v1_10dd8, i32 ptrtoint ([8 x i8]* @global_var_14308.274 to i32), i32 %v0_10ddc)
  %v0_10df0 = load i32, i32* @r6, align 4
  store i32 %v0_10df0, i32* @global_var_1c9e0.275, align 4
  %v0_10df4 = load i32, i32* @r7, align 4
  %v1_10df4 = trunc i32 %v0_10df4 to i8
  store i8 %v1_10df4, i8* bitcast (i32* @global_var_1c9e4.276 to i8*), align 4
  %v0_10df8 = load i32, i32* @r5, align 4
  %v1_10df8 = trunc i32 %v0_10df8 to i8
  store i8 %v1_10df8, i8* bitcast (i32* @global_var_1c9e5.277 to i8*), align 4
  %v1_10dfc = call i32 @function_123e4(i32 5)
  store i32 %v1_10dfc, i32* @r6, align 4
  store i32 5, i32* %sb.global-to-local, align 4
  %v4_10e10 = call i32 @function_1115c(i32 %v1_10dfc, i32 ptrtoint ([6 x i8]* @global_var_14310.279 to i32), i32 5)
  %v0_10e18 = load i32, i32* @r6, align 4
  store i32 %v0_10e18, i32* @global_var_1c9e8.280, align 4
  store i8 5, i8* bitcast (i32* @global_var_1c9ec.281 to i8*), align 4
  %v0_10e20 = load i32, i32* @r5, align 4
  %v1_10e20 = trunc i32 %v0_10e20 to i8
  store i8 %v1_10e20, i8* bitcast (i32* @global_var_1c9ed.282 to i8*), align 4
  %v1_10e24 = call i32 @function_123e4(i32 4)
  store i32 %v1_10e24, i32* @r6, align 4
  %v4_10e34 = call i32 @function_1115c(i32 %v1_10e24, i32 ptrtoint ([5 x i8]* @global_var_14318.284 to i32), i32 4)
  %v0_10e3c = load i32, i32* %fp.global-to-local, align 4
  store i8 4, i8* bitcast (i32* @global_var_1c9f4.285 to i8*), align 4
  %v0_10e44 = load i32, i32* @r6, align 4
  store i32 %v0_10e44, i32* @global_var_1c9f0.286, align 4
  %v0_10e48 = load i32, i32* @r5, align 4
  %v1_10e48 = trunc i32 %v0_10e48 to i8
  store i8 %v1_10e48, i8* bitcast (i32* @global_var_1c9f5.287 to i8*), align 4
  %v1_10e4c = call i32 @function_123e4(i32 %v0_10e3c)
  %v0_10e54 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_10e4c, i32* @r6, align 4
  %v4_10e5c = call i32 @function_1115c(i32 %v1_10e4c, i32 ptrtoint ([7 x i8]* @global_var_14320.289 to i32), i32 %v0_10e54)
  %v0_10e64 = load i32, i32* @r6, align 4
  store i32 %v0_10e64, i32* @global_var_1c9f8.290, align 4
  %v1_10e68 = trunc i32 %v0_10e54 to i8
  store i8 %v1_10e68, i8* bitcast (i32* @global_var_1c9fc.291 to i8*), align 4
  %v0_10e6c = load i32, i32* @r5, align 4
  %v1_10e6c = trunc i32 %v0_10e6c to i8
  store i8 %v1_10e6c, i8* bitcast (i32* @global_var_1c9fd.292 to i8*), align 4
  %v1_10e70 = call i32 @function_123e4(i32 14)
  store i32 %v1_10e70, i32* @r6, align 4
  store i32 14, i32* %r8.global-to-local, align 4
  %v4_10e84 = call i32 @function_1115c(i32 %v1_10e70, i32 ptrtoint ([15 x i8]* @global_var_14328.294 to i32), i32 14)
  %v0_10e8c = load i32, i32* @r6, align 4
  store i32 %v0_10e8c, i32* @global_var_1ca00.295, align 4
  store i8 14, i8* bitcast (i32* @global_var_1ca04.296 to i8*), align 4
  %v0_10e94 = load i32, i32* @r5, align 4
  %v1_10e94 = trunc i32 %v0_10e94 to i8
  store i8 %v1_10e94, i8* bitcast (i32* @global_var_1ca05.297 to i8*), align 4
  %v1_10e98 = call i32 @function_123e4(i32 8)
  %v0_10ea4 = load i32, i32* @r7, align 4
  %v1_10ea4 = add i32 %v0_10ea4, 1
  store i32 %v1_10ea4, i32* @r7, align 4
  store i32 %v1_10e98, i32* @r6, align 4
  %v4_10eac = call i32 @function_1115c(i32 %v1_10e98, i32 ptrtoint ([9 x i8]* @global_var_14338.299 to i32), i32 8)
  %v0_10eb0 = load i32, i32* %sl.global-to-local, align 4
  %v0_10eb4 = load i32, i32* @r6, align 4
  store i32 %v0_10eb4, i32* @global_var_1ca60.300, align 4
  %v0_10eb8 = load i32, i32* @r7, align 4
  %v1_10eb8 = trunc i32 %v0_10eb8 to i8
  store i8 %v1_10eb8, i8* bitcast (i32* @global_var_1ca64.301 to i8*), align 4
  %v0_10ebc = load i32, i32* @r5, align 4
  %v1_10ebc = trunc i32 %v0_10ebc to i8
  store i8 %v1_10ebc, i8* bitcast (i32* @global_var_1ca65.302 to i8*), align 4
  %v1_10ec0 = call i32 @function_123e4(i32 %v0_10eb0)
  %v0_10ec8 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_10ec0, i32* @r6, align 4
  %v4_10ed0 = call i32 @function_1115c(i32 %v1_10ec0, i32 ptrtoint ([17 x i8]* @global_var_14344.304 to i32), i32 %v0_10ec8)
  %v0_10ed4 = load i32, i32* @r7, align 4
  %v0_10ed8 = load i32, i32* @r6, align 4
  store i32 %v0_10ed8, i32* @global_var_1ca08.305, align 4
  %v1_10edc = trunc i32 %v0_10ec8 to i8
  store i8 %v1_10edc, i8* bitcast (i32* @global_var_1ca0c.306 to i8*), align 4
  %v0_10ee0 = load i32, i32* @r5, align 4
  %v1_10ee0 = trunc i32 %v0_10ee0 to i8
  store i8 %v1_10ee0, i8* bitcast (i32* @global_var_1ca0d.307 to i8*), align 4
  %v1_10ee4 = call i32 @function_123e4(i32 %v0_10ed4)
  %v0_10eec = load i32, i32* @r7, align 4
  store i32 %v1_10ee4, i32* @r6, align 4
  %v4_10ef4 = call i32 @function_1115c(i32 %v1_10ee4, i32 ptrtoint ([9 x i8]* @global_var_14358.309 to i32), i32 %v0_10eec)
  %v0_10efc = load i32, i32* @r6, align 4
  store i32 %v0_10efc, i32* @global_var_1ca10.310, align 4
  %v0_10f00 = load i32, i32* @r7, align 4
  %v1_10f00 = trunc i32 %v0_10f00 to i8
  store i8 %v1_10f00, i8* bitcast (i32* @global_var_1ca14.311 to i8*), align 4
  %v0_10f04 = load i32, i32* @r5, align 4
  %v1_10f04 = trunc i32 %v0_10f04 to i8
  store i8 %v1_10f04, i8* bitcast (i32* @global_var_1ca15.312 to i8*), align 4
  %v1_10f08 = call i32 @function_123e4(i32 21)
  store i32 %v1_10f08, i32* @r6, align 4
  %v3_10f18 = call i32 @function_1115c(i32 %v1_10f08, i32 ptrtoint (i32* @global_var_143e0.314 to i32), i32 21)
  store i8 21, i8* bitcast (i32* @global_var_1ca1c.315 to i8*), align 4
  %v0_10f28 = load i32, i32* @r6, align 4
  store i32 %v0_10f28, i32* @global_var_1ca18.316, align 4
  %v0_10f2c = load i32, i32* @r5, align 4
  %v1_10f2c = trunc i32 %v0_10f2c to i8
  store i8 %v1_10f2c, i8* bitcast (i32* @global_var_1ca1d.317 to i8*), align 4
  %v1_10f30 = call i32 @function_123e4(i32 17)
  store i32 %v1_10f30, i32* @r6, align 4
  %v4_10f40 = call i32 @function_1115c(i32 %v1_10f30, i32 ptrtoint ([18 x i8]* @global_var_14364.319 to i32), i32 17)
  store i8 17, i8* bitcast (i32* @global_var_1ca24.320 to i8*), align 4
  %v0_10f50 = load i32, i32* @r6, align 4
  store i32 %v0_10f50, i32* @global_var_1ca20.321, align 4
  %v0_10f54 = load i32, i32* @r5, align 4
  %v1_10f54 = trunc i32 %v0_10f54 to i8
  store i8 %v1_10f54, i8* bitcast (i32* @global_var_1ca25.322 to i8*), align 4
  %v1_10f58 = call i32 @function_123e4(i32 12)
  store i32 %v1_10f58, i32* @r6, align 4
  %v4_10f68 = call i32 @function_1115c(i32 %v1_10f58, i32 ptrtoint ([13 x i8]* @global_var_14378.324 to i32), i32 12)
  %v0_10f70 = load i32, i32* %r8.global-to-local, align 4
  store i8 12, i8* bitcast (i32* @global_var_1ca2c.325 to i8*), align 4
  %v0_10f78 = load i32, i32* @r6, align 4
  store i32 %v0_10f78, i32* @global_var_1ca28.326, align 4
  %v0_10f7c = load i32, i32* @r5, align 4
  %v1_10f7c = trunc i32 %v0_10f7c to i8
  store i8 %v1_10f7c, i8* bitcast (i32* @global_var_1ca2d.327 to i8*), align 4
  %v1_10f80 = call i32 @function_123e4(i32 %v0_10f70)
  %v0_10f88 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_10f80, i32* @r6, align 4
  %v4_10f90 = call i32 @function_1115c(i32 %v1_10f80, i32 ptrtoint ([15 x i8]* @global_var_14388.329 to i32), i32 %v0_10f88)
  %v0_10f98 = load i32, i32* @r6, align 4
  store i32 %v0_10f98, i32* @global_var_1ca30.330, align 4
  %v1_10f9c = trunc i32 %v0_10f88 to i8
  store i8 %v1_10f9c, i8* bitcast (i32* @global_var_1ca34.331 to i8*), align 4
  %v0_10fa0 = load i32, i32* @r5, align 4
  %v1_10fa0 = trunc i32 %v0_10fa0 to i8
  store i8 %v1_10fa0, i8* bitcast (i32* @global_var_1ca35.332 to i8*), align 4
  %v1_10fa4 = call i32 @function_123e4(i32 19)
  store i32 %v1_10fa4, i32* @r6, align 4
  %v4_10fb4 = call i32 @function_1115c(i32 %v1_10fa4, i32 ptrtoint ([20 x i8]* @global_var_14398.334 to i32), i32 19)
  %v0_10fbc = load i32, i32* @r7, align 4
  store i8 19, i8* bitcast (i32* @global_var_1ca3c.335 to i8*), align 4
  %v0_10fc4 = load i32, i32* @r6, align 4
  store i32 %v0_10fc4, i32* @global_var_1ca38.336, align 4
  %v0_10fc8 = load i32, i32* @r5, align 4
  %v1_10fc8 = trunc i32 %v0_10fc8 to i8
  store i8 %v1_10fc8, i8* bitcast (i32* @global_var_1ca3d.337 to i8*), align 4
  %v1_10fcc = call i32 @function_123e4(i32 %v0_10fbc)
  %v0_10fd4 = load i32, i32* @r7, align 4
  store i32 %v1_10fcc, i32* @r6, align 4
  %v4_10fdc = call i32 @function_1115c(i32 %v1_10fcc, i32 ptrtoint ([9 x i8]* @global_var_143ac.339 to i32), i32 %v0_10fd4)
  %v0_10fe0 = load i32, i32* %sb.global-to-local, align 4
  %v0_10fe4 = load i32, i32* @r6, align 4
  store i32 %v0_10fe4, i32* @global_var_1ca40.340, align 4
  %v0_10fe8 = load i32, i32* @r7, align 4
  %v1_10fe8 = trunc i32 %v0_10fe8 to i8
  store i8 %v1_10fe8, i8* bitcast (i32* @global_var_1ca44.341 to i8*), align 4
  %v0_10fec = load i32, i32* @r5, align 4
  %v1_10fec = trunc i32 %v0_10fec to i8
  store i8 %v1_10fec, i8* bitcast (i32* @global_var_1ca45.342 to i8*), align 4
  %v1_10ff0 = call i32 @function_123e4(i32 %v0_10fe0)
  %v0_10ff8 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_10ff0, i32* @r6, align 4
  %v4_11000 = call i32 @function_1115c(i32 %v1_10ff0, i32 ptrtoint ([6 x i8]* @global_var_143b8.344 to i32), i32 %v0_10ff8)
  %v0_11004 = load i32, i32* %fp.global-to-local, align 4
  %v0_11008 = load i32, i32* @r6, align 4
  store i32 %v0_11008, i32* @global_var_1ca48.345, align 4
  %v1_1100c = trunc i32 %v0_10ff8 to i8
  store i8 %v1_1100c, i8* bitcast (i32* @global_var_1ca4c.346 to i8*), align 4
  %v0_11010 = load i32, i32* @r5, align 4
  %v1_11010 = trunc i32 %v0_11010 to i8
  store i8 %v1_11010, i8* bitcast (i32* @global_var_1ca4d.347 to i8*), align 4
  %v1_11014 = call i32 @function_123e4(i32 %v0_11004)
  %v0_1101c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_11014, i32* @r6, align 4
  %v4_11024 = call i32 @function_1115c(i32 %v1_11014, i32 ptrtoint ([7 x i8]* @global_var_143c0.349 to i32), i32 %v0_1101c)
  %v0_1102c = load i32, i32* @r6, align 4
  store i32 %v0_1102c, i32* @global_var_1ca50.350, align 4
  %v1_11030 = trunc i32 %v0_1101c to i8
  store i8 %v1_11030, i8* bitcast (i32* @global_var_1ca54.351 to i8*), align 4
  %v0_11034 = load i32, i32* @r5, align 4
  %v1_11034 = trunc i32 %v0_11034 to i8
  store i8 %v1_11034, i8* bitcast (i32* @global_var_1ca55.352 to i8*), align 4
  %v1_11038 = call i32 @function_123e4(i32 23)
  %v4_11048 = call i32 @function_1115c(i32 %v1_11038, i32 ptrtoint ([24 x i8]* @global_var_143c8.354 to i32), i32 23)
  %v0_11050 = load i32, i32* @r5, align 4
  %v1_11050 = trunc i32 %v0_11050 to i8
  store i8 %v1_11050, i8* bitcast (i32* @global_var_1ca5d.355 to i8*), align 4
  store i32 %v1_11038, i32* @global_var_1ca58.356, align 4
  store i8 23, i8* bitcast (i32* @global_var_1ca5c.357 to i8*), align 4
  %v2_1105c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_1105c, i32* @r4, align 4
  store i32 %v6_10ba0, i32* @r5, align 4
  store i32 %v9_10ba0, i32* @r6, align 4
  store i32 %v12_10ba0, i32* @r7, align 4
  ret i32 %v4_11048

; uselistorder directives
  uselistorder i32 %v1_11014, { 1, 0 }
  uselistorder i32 %v1_10ff0, { 1, 0 }
  uselistorder i32 %v1_10fcc, { 1, 0 }
  uselistorder i32 %v1_10f80, { 1, 0 }
  uselistorder i32 %v1_10ee4, { 1, 0 }
  uselistorder i32 %v1_10ec0, { 1, 0 }
  uselistorder i32 %v1_10e98, { 1, 0 }
  uselistorder i32 %v1_10e4c, { 1, 0 }
  uselistorder i32 %v1_10dd8, { 1, 0 }
  uselistorder i32 %v1_10cc4, { 1, 0 }
  uselistorder i32 %v1_10c9c, { 1, 0 }
  uselistorder i32 %v1_10c74, { 1, 0 }
  uselistorder i32 %v1_10c28, { 1, 0 }
  uselistorder i32 %v1_10ba8, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i8 5, { 0, 13, 1, 2, 11, 3, 4, 5, 6, 7, 8, 9, 10, 12 }
  uselistorder i8 16, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i8 3, { 1, 0 }
  uselistorder i8 6, { 0, 2, 3, 4, 5, 1 }
  uselistorder i8 36, { 13, 7, 8, 11, 12, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i32 (i32, i32, i32)* @function_1115c, { 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5, 4, 3, 2, 1, 0, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1c968.196 to i32), { 5, 0, 1, 2, 3, 4 }
}

define i32 @function_110e0(i8* %arg1) local_unnamed_addr {
dec_label_pc_110e0:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r2, align 4
  %v3_110e4 = load i8, i8* %arg1, align 1
  %v4_110e4 = zext i8 %v3_110e4 to i32
  %v2_110e8 = icmp eq i8 %v3_110e4, 0
  br i1 %v2_110e8, label %dec_label_pc_11104, label %bb

dec_label_pc_11104:                               ; preds = %dec_label_pc_110f4, %dec_label_pc_110e0
  %merge = phi i32 [ %v4_110e4, %dec_label_pc_110e0 ], [ %v1_110f4, %dec_label_pc_110f4 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_110e0
  br label %dec_label_pc_110f4

dec_label_pc_110f4:                               ; preds = %dec_label_pc_110f4, %bb
  %v0_110f4 = phi i32 [ %v1_110f4, %dec_label_pc_110f4 ], [ 0, %bb ]
  %v1_110f4 = add i32 %v0_110f4, 1
  %v2_110f8 = add i32 %v1_110f4, %tmp
  %v3_110f8 = inttoptr i32 %v2_110f8 to i8*
  %v4_110f8 = load i8, i8* %v3_110f8, align 1
  %v2_110fc = icmp eq i8 %v4_110f8, 0
  br i1 %v2_110fc, label %dec_label_pc_11104, label %dec_label_pc_110f4

; uselistorder directives
  uselistorder i32 %v1_110f4, { 1, 0, 2 }
}

define i32 @function_11108(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11108:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_11108 = load i8, i8* %arg1, align 1
  %v3_11108 = zext i8 %v2_11108 to i32
  %v2_1110c = icmp eq i8 %v2_11108, 0
  br i1 %v2_1110c, label %dec_label_pc_11150, label %dec_label_pc_11114

dec_label_pc_11114:                               ; preds = %dec_label_pc_11108
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11118

dec_label_pc_11118:                               ; preds = %dec_label_pc_11118, %dec_label_pc_11114
  %v0_11118 = phi i32 [ %v1_11118, %dec_label_pc_11118 ], [ 0, %dec_label_pc_11114 ]
  %v1_11118 = add i32 %v0_11118, 1
  store i32 %v1_11118, i32* %ip.global-to-local, align 4
  %v2_1111c = add i32 %v1_11118, %tmp
  %v3_1111c = inttoptr i32 %v2_1111c to i8*
  %v4_1111c = load i8, i8* %v3_1111c, align 1
  %v2_11120 = icmp eq i8 %v4_1111c, 0
  br i1 %v2_11120, label %dec_label_pc_11128, label %dec_label_pc_11118

dec_label_pc_11128:                               ; preds = %dec_label_pc_11118
  %v7_11128 = icmp eq i32 %v0_11118, -2
  br i1 %v7_11128, label %dec_label_pc_11148, label %dec_label_pc_11134.preheader

dec_label_pc_11134.preheader:                     ; preds = %dec_label_pc_11128, %dec_label_pc_11150
  %storemerge = phi i32 [ %v3_11108, %dec_label_pc_11150 ], [ %v1_11118, %dec_label_pc_11128 ]
  %v2_11140.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_11134

dec_label_pc_11134:                               ; preds = %dec_label_pc_11134.dec_label_pc_11134_crit_edge, %dec_label_pc_11134.preheader
  %v2_11140 = phi i32 [ %v5_11140, %dec_label_pc_11134.dec_label_pc_11134_crit_edge ], [ %v2_11140.pre, %dec_label_pc_11134.preheader ]
  %v0_11138 = phi i32 [ %v0_11138.pre, %dec_label_pc_11134.dec_label_pc_11134_crit_edge ], [ %tmp, %dec_label_pc_11134.preheader ]
  %v0_11134 = phi i32 [ %v0_11134.pre, %dec_label_pc_11134.dec_label_pc_11134_crit_edge ], [ %storemerge, %dec_label_pc_11134.preheader ]
  %v1_11134 = add i32 %v0_11134, -1
  store i32 %v1_11134, i32* @r2, align 4
  %v1_11138 = inttoptr i32 %v0_11138 to i8*
  %v2_11138 = load i8, i8* %v1_11138, align 1
  %v5_11138 = add i32 %v0_11138, 1
  store i32 %v5_11138, i32* %r1.global-to-local, align 4
  %v3_1113c = icmp eq i32 %v0_11134, 0
  %v3_11140 = inttoptr i32 %v2_11140 to i8*
  store i8 %v2_11138, i8* %v3_11140, align 1
  %v4_11140 = load i32, i32* @r0, align 4
  %v5_11140 = add i32 %v4_11140, 1
  store i32 %v5_11140, i32* @r0, align 4
  br i1 %v3_1113c, label %dec_label_pc_11148.loopexit, label %dec_label_pc_11134.dec_label_pc_11134_crit_edge

dec_label_pc_11134.dec_label_pc_11134_crit_edge:  ; preds = %dec_label_pc_11134
  %v0_11134.pre = load i32, i32* @r2, align 4
  %v0_11138.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11134

dec_label_pc_11148.loopexit:                      ; preds = %dec_label_pc_11134
  %v0_11148.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11148

dec_label_pc_11148:                               ; preds = %dec_label_pc_11148.loopexit, %dec_label_pc_11128
  %v0_11148 = phi i32 [ %v0_11148.pre, %dec_label_pc_11148.loopexit ], [ %v1_11118, %dec_label_pc_11128 ]
  ret i32 %v0_11148

dec_label_pc_11150:                               ; preds = %dec_label_pc_11108
  store i32 %v3_11108, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11134.preheader

; uselistorder directives
  uselistorder i32 %v5_11140, { 1, 0 }
  uselistorder i32 %v0_11138, { 1, 0 }
  uselistorder i32 %v1_11118, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_11108, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11134.preheader, { 1, 0 }
}

define i32 @function_1115c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1115c:
  %ip.global-to-local = alloca i32, align 4
  %v2_1115c = icmp eq i32 %arg3, 0
  br i1 %v2_1115c, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_11168, %dec_label_pc_1115c
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_1115c
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11168

dec_label_pc_11168:                               ; preds = %dec_label_pc_11168, %bb
  %v0_11168 = phi i32 [ %v1_11170, %dec_label_pc_11168 ], [ 0, %bb ]
  %v2_11168 = add i32 %v0_11168, %arg2
  %v3_11168 = inttoptr i32 %v2_11168 to i8*
  %v4_11168 = load i8, i8* %v3_11168, align 1
  %v4_1116c = add i32 %v0_11168, %arg1
  %v5_1116c = inttoptr i32 %v4_1116c to i8*
  store i8 %v4_11168, i8* %v5_1116c, align 1
  %v0_11170 = load i32, i32* %ip.global-to-local, align 4
  %v1_11170 = add i32 %v0_11170, 1
  store i32 %v1_11170, i32* %ip.global-to-local, align 4
  %v9_11174 = icmp eq i32 %v1_11170, %arg3
  br i1 %v9_11174, label %.loopexit, label %dec_label_pc_11168

; uselistorder directives
  uselistorder i32 %v1_11170, { 1, 2, 0 }
}

define i32 @function_11180() local_unnamed_addr {
dec_label_pc_11180:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v0_11180 = load i32, i32* @r1, align 4
  %v2_11180 = icmp eq i32 %v0_11180, 0
  br i1 %v2_11180, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_11180
  %v2_11184 = load i32, i32* @r0, align 4
  ret i32 %v2_11184

bb3:                                              ; preds = %dec_label_pc_11180
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11190

dec_label_pc_11190:                               ; preds = %dec_label_pc_11190.dec_label_pc_11190_crit_edge, %bb3
  %v2_11190 = phi i32 [ %v1_11194, %dec_label_pc_11190.dec_label_pc_11190_crit_edge ], [ 0, %bb3 ]
  %v0_11190.off0 = phi i8 [ %extract.t, %dec_label_pc_11190.dec_label_pc_11190_crit_edge ], [ 0, %bb3 ]
  %v3_11190 = load i32, i32* @r0, align 4
  %v4_11190 = add i32 %v3_11190, %v2_11190
  %v5_11190 = inttoptr i32 %v4_11190 to i8*
  store i8 %v0_11190.off0, i8* %v5_11190, align 1
  %v0_11194 = load i32, i32* %r3.global-to-local, align 4
  %v1_11194 = add i32 %v0_11194, 1
  store i32 %v1_11194, i32* %r3.global-to-local, align 4
  %v1_11198 = load i32, i32* @r1, align 4
  %v9_11198 = icmp eq i32 %v1_11194, %v1_11198
  br i1 %v9_11198, label %dec_label_pc_111a0, label %dec_label_pc_11190.dec_label_pc_11190_crit_edge

dec_label_pc_11190.dec_label_pc_11190_crit_edge:  ; preds = %dec_label_pc_11190
  %v0_11190.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_11190.pre to i8
  br label %dec_label_pc_11190

dec_label_pc_111a0:                               ; preds = %dec_label_pc_11190
  %v1_111a0 = load i32, i32* @r0, align 4
  ret i32 %v1_111a0

; uselistorder directives
  uselistorder i32 %v1_11194, { 1, 2, 0 }
}

define i32 @function_111a4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_111a4:
  %v7_111b8 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_111b8, label %dec_label_pc_111bc, label %dec_label_pc_111c4

dec_label_pc_111bc:                               ; preds = %dec_label_pc_111d8, %dec_label_pc_111a4, %dec_label_pc_111c4
  ret i32 -1

dec_label_pc_111c4:                               ; preds = %dec_label_pc_111a4
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_111bc, label %dec_label_pc_111cc

dec_label_pc_111cc:                               ; preds = %dec_label_pc_111c4
  br label %dec_label_pc_111e4

dec_label_pc_111d8:                               ; preds = %dec_label_pc_111fc, %dec_label_pc_111e4
  %v1_111d8 = add i32 %v0_11204, 1
  %v9_111dc = icmp eq i32 %v1_111d8, %arg2
  br i1 %v9_111dc, label %dec_label_pc_111bc, label %dec_label_pc_111e4

dec_label_pc_111e4:                               ; preds = %dec_label_pc_111d8, %dec_label_pc_111cc
  %v0_11204 = phi i32 [ %v1_111d8, %dec_label_pc_111d8 ], [ 0, %dec_label_pc_111cc ]
  %v0_111f0 = phi i32 [ %v1_111f0., %dec_label_pc_111d8 ], [ 0, %dec_label_pc_111cc ]
  %v2_111e4 = add i32 %v0_111f0, %arg3
  %v3_111e4 = inttoptr i32 %v2_111e4 to i8*
  %v4_111e4 = load i8, i8* %v3_111e4, align 1
  %v2_111e8 = add i32 %v0_11204, %arg1
  %v3_111e8 = inttoptr i32 %v2_111e8 to i8*
  %v4_111e8 = load i8, i8* %v3_111e8, align 1
  %v9_111ec = icmp eq i8 %v4_111e8, %v4_111e4
  %v1_111f0 = add i32 %v0_111f0, 1
  %v1_111f0. = select i1 %v9_111ec, i32 %v1_111f0, i32 0
  br i1 %v9_111ec, label %dec_label_pc_111fc, label %dec_label_pc_111d8

dec_label_pc_111fc:                               ; preds = %dec_label_pc_111e4
  %v9_111fc = icmp eq i32 %v1_111f0., %arg4
  br i1 %v9_111fc, label %dec_label_pc_11204, label %dec_label_pc_111d8

dec_label_pc_11204:                               ; preds = %dec_label_pc_111fc
  %v1_11204 = add i32 %v0_11204, 1
  ret i32 %v1_11204

; uselistorder directives
  uselistorder i1 %v9_111ec, { 1, 0 }
  uselistorder i32 %v0_111f0, { 1, 0 }
  uselistorder label %dec_label_pc_111bc, { 0, 2, 1 }
}

define i32 @function_1120c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1120c:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  %v3_1120c = load i32, i32* @r4, align 4
  store i32 %v3_1120c, i32* %stack_var_-28, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11218

dec_label_pc_11218:                               ; preds = %.thread, %dec_label_pc_11230, %bb, %dec_label_pc_1120c
  %v0_11218 = phi i32 [ %tmp, %dec_label_pc_1120c ], [ %v5_11218, %bb ], [ %v5_11218, %dec_label_pc_11230 ], [ %v5_11218, %.thread ]
  %v1_11218 = inttoptr i32 %v0_11218 to i8*
  %v2_11218 = load i8, i8* %v1_11218, align 1
  %v3_11218 = zext i8 %v2_11218 to i32
  %v5_11218 = add i32 %v0_11218, 1
  store i32 %v5_11218, i32* %r5.global-to-local, align 4
  %v7_11220 = icmp eq i8 %v2_11218, 9
  br i1 %v7_11220, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_11218
  store i32 %v3_11218, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11218

bb:                                               ; preds = %dec_label_pc_11218
  %v8_11224 = icmp eq i8 %v2_11218, 32
  store i32 %v3_11218, i32* %r4.global-to-local, align 4
  br i1 %v8_11224, label %dec_label_pc_11218, label %dec_label_pc_11230

dec_label_pc_11230:                               ; preds = %bb
  %v7_11230 = icmp eq i8 %v2_11218, 10
  br i1 %v7_11230, label %dec_label_pc_11218, label %dec_label_pc_11238

dec_label_pc_11238:                               ; preds = %dec_label_pc_11230
  %v7_11238 = icmp eq i8 %v2_11218, 45
  br i1 %v7_11238, label %dec_label_pc_11318, label %dec_label_pc_11240

dec_label_pc_11240:                               ; preds = %dec_label_pc_11238
  %v7_11240 = icmp eq i8 %v2_11218, 43
  br i1 %v7_11240, label %bb48, label %dec_label_pc_11250

bb48:                                             ; preds = %dec_label_pc_11240
  %v2_11244 = inttoptr i32 %v5_11218 to i8*
  %v3_11244 = load i8, i8* %v2_11244, align 1
  %v4_11244 = zext i8 %v3_11244 to i32
  store i32 %v4_11244, i32* %r4.global-to-local, align 4
  %v6_11244 = add i32 %v0_11218, 2
  store i32 %v6_11244, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11250

dec_label_pc_11250:                               ; preds = %bb48, %dec_label_pc_11240, %dec_label_pc_11318
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_11318 ], [ 2147483647, %dec_label_pc_11240 ], [ 2147483647, %bb48 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_11318 ], [ 0, %dec_label_pc_11240 ], [ 0, %bb48 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_11258 = call i32 @function_116e8(i32 %storemerge1, i32 %arg2)
  %v0_1125c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_1125c, i32* @r1, align 4
  store i32 %v2_11258, i32* %r8.global-to-local, align 4
  store i32 %storemerge1, i32* @r0, align 4
  %v0_11268 = call i32 @function_115d8()
  store i32 %v0_11268, i32* @lr, align 4
  %v0_11278.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11278

dec_label_pc_11278:                               ; preds = %.thread8, %dec_label_pc_11250
  %v2_112f411 = phi i32 [ %v1_1131026, %.thread8 ], [ 0, %dec_label_pc_11250 ]
  %v1_112d0 = phi i32 [ %v0_1130424, %.thread8 ], [ 0, %dec_label_pc_11250 ]
  %v1_112b8 = phi i32 [ %v3_112fc, %.thread8 ], [ %v0_11278.pre, %dec_label_pc_11250 ]
  %v1_11278 = urem i32 %v1_112b8, 256
  %v1_1127c = add nsw i32 %v1_11278, -48
  %v1_11284 = add nsw i32 %v1_11278, -97
  %v1_11288 = add i32 %v1_112b8, -48
  %v1_1128c = add nsw i32 %v1_11278, -65
  %tmp71 = icmp ult i32 %v1_1127c, 10
  br i1 %tmp71, label %dec_label_pc_112bc, label %dec_label_pc_11294

dec_label_pc_11294:                               ; preds = %dec_label_pc_11278
  %v2_11294 = icmp ugt i32 %v1_1128c, 24
  %v7_11294 = icmp eq i32 %v1_1128c, 25
  %v2_11298 = xor i1 %v7_11294, true
  %v3_11298 = and i1 %v2_11294, %v2_11298
  br i1 %v3_11298, label %bb49, label %bb50

bb49:                                             ; preds = %dec_label_pc_11294
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_11294, %bb49
  %v0_112ac20 = phi i32 [ %v1_11288, %dec_label_pc_11294 ], [ 0, %bb49 ]
  %v2_1129c = xor i1 %v2_11294, true
  %v3_1129c = or i1 %v7_11294, %v2_1129c
  br i1 %v3_1129c, label %bb51, label %bb52

bb51:                                             ; preds = %bb50
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v0_112ac = phi i32 [ %v0_112ac20, %bb50 ], [ 1, %bb51 ]
  br i1 %v3_11298, label %bb53, label %bb54

bb53:                                             ; preds = %bb52
  %v6_112a4 = icmp ugt i32 %v1_11284, 24
  %v11_112a4 = icmp eq i32 %v1_11284, 25
  br label %bb54

bb54:                                             ; preds = %bb52, %bb53
  %v1_112a8 = phi i1 [ %v7_11294, %bb52 ], [ %v11_112a4, %bb53 ]
  %v0_112a8 = phi i1 [ %v2_11294, %bb52 ], [ %v6_112a4, %bb53 ]
  %v2_112a8 = xor i1 %v1_112a8, true
  %v3_112a8 = and i1 %v0_112a8, %v2_112a8
  br i1 %v3_112a8, label %dec_label_pc_11304, label %dec_label_pc_112ac

dec_label_pc_112ac:                               ; preds = %bb54
  %v2_112ac = icmp eq i32 %v0_112ac, 0
  %. = select i1 %v2_112ac, i32 87, i32 55
  %v2_112b8 = sub i32 %v1_112b8, %.
  br label %dec_label_pc_112bc

dec_label_pc_112bc:                               ; preds = %dec_label_pc_11278, %dec_label_pc_112ac
  %v0_112d034 = phi i32 [ %v1_1128c, %dec_label_pc_11278 ], [ %., %dec_label_pc_112ac ]
  %v3_112f412 = phi i32 [ %v1_11288, %dec_label_pc_11278 ], [ %v2_112b8, %dec_label_pc_112ac ]
  %v1_112bc = load i32, i32* %r6.global-to-local, align 4
  %v6_112c0 = icmp slt i32 %v3_112f412, %v1_112bc
  br i1 %v6_112c0, label %dec_label_pc_112c4, label %dec_label_pc_11304

dec_label_pc_112c4:                               ; preds = %dec_label_pc_112bc
  %v3_112c4 = icmp uge i32 %v2_112f411, %v0_11268
  %v9_112c4 = icmp eq i32 %v2_112f411, %v0_11268
  %v2_112c8 = xor i1 %v3_112c4, true
  %v3_112c8 = or i1 %v9_112c4, %v2_112c8
  br i1 %v3_112c8, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_112c4
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_112c4, %bb57
  %v0_112d033 = phi i32 [ %v0_112d034, %dec_label_pc_112c4 ], [ 0, %bb57 ]
  %v2_112cc = xor i1 %v9_112c4, true
  %v3_112cc = and i1 %v3_112c4, %v2_112cc
  br i1 %v3_112cc, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v0_112d0 = phi i32 [ %v0_112d033, %bb58 ], [ 1, %bb59 ]
  %tmp72 = icmp slt i32 %v1_112d0, 0
  %v4_112d0 = zext i1 %tmp72 to i32
  %v5_112d0 = or i32 %v0_112d0, %v4_112d0
  %v7_112d0 = icmp eq i32 %v5_112d0, 0
  br i1 %v7_112d0, label %dec_label_pc_112dc, label %.thread8

dec_label_pc_112dc:                               ; preds = %bb60
  %v1_112e8 = load i32, i32* %r8.global-to-local, align 4
  %v7_112ec = icmp sgt i32 %v3_112f412, %v1_112e8
  br i1 %v7_112ec, label %bb63, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_112dc
  br label %bb64

bb63:                                             ; preds = %dec_label_pc_112dc
  %v2_112f0 = icmp eq i1 %v9_112c4, false
  br i1 %v2_112f0, label %bb64, label %.thread8

bb64:                                             ; preds = %bb63, %.thread5
  %v4_112f413 = mul i32 %v1_112bc, %v2_112f411
  %v5_112f414 = add i32 %v4_112f413, %v3_112f412
  br label %.thread8

.thread8:                                         ; preds = %bb63, %bb60, %bb64
  %v1_1131026 = phi i32 [ %v2_112f411, %bb63 ], [ %v2_112f411, %bb60 ], [ %v5_112f414, %bb64 ]
  %v0_1130424 = phi i32 [ -1, %bb63 ], [ -1, %bb60 ], [ 1, %bb64 ]
  %v0_112fc = load i32, i32* %r5.global-to-local, align 4
  %v1_112fc = inttoptr i32 %v0_112fc to i8*
  %v2_112fc = load i8, i8* %v1_112fc, align 1
  %v3_112fc = zext i8 %v2_112fc to i32
  store i32 %v3_112fc, i32* %r4.global-to-local, align 4
  %v5_112fc = add i32 %v0_112fc, 1
  store i32 %v5_112fc, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11278

dec_label_pc_11304:                               ; preds = %dec_label_pc_112bc, %bb54
  %v1_11304 = icmp slt i32 %v1_112d0, 0
  %v0_11328 = load i32, i32* %sl.global-to-local, align 4
  %v2_11328 = icmp eq i32 %v0_11328, 0
  br i1 %v1_11304, label %dec_label_pc_11328, label %dec_label_pc_1130c

dec_label_pc_1130c:                               ; preds = %dec_label_pc_11304
  br i1 %v2_11328, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_1130c
  %v2_11310 = sub i32 0, %v2_112f411
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_1130c, %bb65
  %v23_11314 = phi i32 [ %v2_112f411, %dec_label_pc_1130c ], [ %v2_11310, %bb65 ]
  %v2_11314 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_11314, i32* @r4, align 4
  ret i32 %v23_11314

dec_label_pc_11318:                               ; preds = %dec_label_pc_11238
  %v1_11318 = inttoptr i32 %v5_11218 to i8*
  %v2_11318 = load i8, i8* %v1_11318, align 1
  %v3_11318 = zext i8 %v2_11318 to i32
  store i32 %v3_11318, i32* %r4.global-to-local, align 4
  %v5_11318 = add i32 %v0_11218, 2
  store i32 %v5_11318, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11250

dec_label_pc_11328:                               ; preds = %dec_label_pc_11304
  %.70 = select i1 %v2_11328, i32 2147483647, i32 -2147483648
  %v2_11334 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_11334, i32* @r4, align 4
  ret i32 %.70

; uselistorder directives
  uselistorder i32 %v3_112fc, { 1, 0 }
  uselistorder i1 %v9_112c4, { 1, 0, 2 }
  uselistorder i1 %v3_112c4, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_11294, { 1, 2, 0 }
  uselistorder i1 %v2_11294, { 1, 0, 2 }
  uselistorder i32 %v1_11278, { 1, 2, 0 }
  uselistorder i32 %v1_112b8, { 1, 2, 0 }
  uselistorder i32 %v1_112d0, { 1, 0 }
  uselistorder i32 %v2_112f411, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_11268, { 1, 0, 2 }
  uselistorder i32 %v5_11218, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v3_11218, { 1, 0 }
  uselistorder i32 %v0_11218, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i8 9, { 4, 5, 1, 0, 2, 3 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %dec_label_pc_112bc, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_11250, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11218, { 1, 2, 0, 3 }
}

define i32 @function_11338(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11338:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_11338 = load i32, i32* @r4, align 4
  store i32 %v3_11338, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11350

dec_label_pc_11350:                               ; preds = %dec_label_pc_1137c.dec_label_pc_11350_crit_edge, %dec_label_pc_11338
  %v0_11354 = phi i32 [ %v0_11354.pre, %dec_label_pc_1137c.dec_label_pc_11350_crit_edge ], [ %arg3, %dec_label_pc_11338 ]
  %v0_11350 = phi i32 [ %v1_11368, %dec_label_pc_1137c.dec_label_pc_11350_crit_edge ], [ %tmp, %dec_label_pc_11338 ]
  %tmp12 = inttoptr i32 %v0_11350 to i32*
  %v5_1135c = call i32 @function_11b28(i32 %v0_11354, i32* %tmp12, i32 1)
  %v7_11360 = icmp eq i32 %v5_1135c, 1
  %v0_11364 = load i32, i32* @r4, align 4
  %v1_11368 = add i32 %v0_11364, 1
  store i32 %v1_11368, i32* @r4, align 4
  %v0_11370 = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_11360, label %dec_label_pc_11370, label %dec_label_pc_11388

dec_label_pc_11370:                               ; preds = %dec_label_pc_11350
  %v1_11370 = add i32 %v0_11370, 1
  store i32 %v1_11370, i32* %r5.global-to-local, align 4
  %v0_11374 = load i32, i32* %r7.global-to-local, align 4
  %v7_11378 = icmp sgt i32 %v0_11374, %v1_11370
  br i1 %v7_11378, label %dec_label_pc_1137c, label %dec_label_pc_11388

dec_label_pc_1137c:                               ; preds = %dec_label_pc_11370
  %v1_1137c = inttoptr i32 %v0_11364 to i8*
  %v2_1137c = load i8, i8* %v1_1137c, align 1
  %v7_11380 = icmp eq i8 %v2_1137c, 10
  br i1 %v7_11380, label %dec_label_pc_11388, label %dec_label_pc_1137c.dec_label_pc_11350_crit_edge

dec_label_pc_1137c.dec_label_pc_11350_crit_edge:  ; preds = %dec_label_pc_1137c
  %v0_11354.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11350

dec_label_pc_11388:                               ; preds = %dec_label_pc_11350, %dec_label_pc_1137c, %dec_label_pc_11370
  %v0_11388 = phi i32 [ %v1_11370, %dec_label_pc_1137c ], [ %v1_11370, %dec_label_pc_11370 ], [ %v0_11370, %dec_label_pc_11350 ]
  %v2_11388 = icmp eq i32 %v0_11388, 0
  %v1_1138c = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_11388, i32 0, i32 %v1_1138c
  %v2_11394 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_11394, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_11368, { 1, 0 }
  uselistorder i8 10, { 2, 0, 3, 1 }
  uselistorder i32 (i32, i32*, i32)* @function_11b28, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11388, { 1, 2, 0 }
}

define i32 @function_11398() local_unnamed_addr {
dec_label_pc_11398:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_11398 = load i32, i32* @r4, align 4
  store i32 16, i32* @r4, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_113a8 = call i32 @function_11f08()
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_113b0 = inttoptr i32 %v0_113a8 to i32*
  store i32 0, i32* %v2_113b0, align 4
  %v0_113bc = load i32, i32* %r6.global-to-local, align 4
  %v3_113c0 = call i32 @function_1224c(i32 2, i32 2, i32 %v0_113bc)
  %v7_113cc = icmp eq i32 %v3_113c0, -1
  store i32 %v3_113c0, i32* %r5.global-to-local, align 4
  %v2_113d8 = load i32, i32* @r4, align 4
  br i1 %v7_113cc, label %dec_label_pc_11428, label %dec_label_pc_113ec

dec_label_pc_113ec:                               ; preds = %dec_label_pc_11398
  %v7_113d8 = shl i32 2056, %v2_113d8
  %v8_113d8 = or i32 %v7_113d8, 2056
  store i32 2, i32* %stack_var_-40, align 4
  %v3_11408 = bitcast i32* %stack_var_-40 to %sockaddr*
  %v4_11408 = call i32 @function_120a8(i32 %v3_113c0, %sockaddr* %v3_11408, i32 %v2_113d8)
  %v2_11410 = ptrtoint i32* %stack_var_-24 to i32
  %v0_11414 = load i32, i32* %r5.global-to-local, align 4
  %v4_11418 = call i32 @function_120d4(i32 %v0_11414, %sockaddr* %v3_11408, i32 %v2_11410)
  %v1_11420 = call i32 @function_11960(i32 %v0_11414)
  br label %dec_label_pc_11428

dec_label_pc_11428:                               ; preds = %dec_label_pc_11398, %dec_label_pc_113ec
  %v0_11428 = phi i32 [ %v0_113bc, %dec_label_pc_11398 ], [ %v8_113d8, %dec_label_pc_113ec ]
  store i32 %v3_11398, i32* @r4, align 4
  ret i32 %v0_11428

; uselistorder directives
  uselistorder i32 %v3_113c0, { 1, 2, 0 }
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_120a8, { 1, 0, 2, 4, 3, 9, 5, 6, 7, 8 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_1224c, { 25, 26, 23, 24, 21, 22, 3, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_11428, { 1, 0 }
}

define i32 @function_11434(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11434:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_11438 = load i8, i8* %tmp, align 1
  %v2_1143c = icmp eq i8 %v3_11438, 0
  br i1 %v2_1143c, label %bb, label %dec_label_pc_11450

bb:                                               ; preds = %dec_label_pc_11434
  %v4_11438 = zext i8 %v3_11438 to i32
  br label %dec_label_pc_11464

dec_label_pc_11450:                               ; preds = %dec_label_pc_11434
  br label %dec_label_pc_11454

dec_label_pc_11454:                               ; preds = %dec_label_pc_11454, %dec_label_pc_11450
  %v0_11454 = phi i32 [ %v1_11454, %dec_label_pc_11454 ], [ 0, %dec_label_pc_11450 ]
  %v1_11454 = add i32 %v0_11454, 1
  %v2_11458 = add i32 %v1_11454, %arg2
  %v3_11458 = inttoptr i32 %v2_11458 to i8*
  %v4_11458 = load i8, i8* %v3_11458, align 1
  %v2_1145c = icmp eq i8 %v4_11458, 0
  br i1 %v2_1145c, label %dec_label_pc_11464, label %dec_label_pc_11454

dec_label_pc_11464:                               ; preds = %dec_label_pc_11454, %bb
  %v0_114a818 = phi i32 [ %v4_11438, %bb ], [ %v1_11454, %dec_label_pc_11454 ]
  %v0_1146c1 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_1146c1, 1
  br i1 %tmp27, label %dec_label_pc_114b8, label %dec_label_pc_11478

dec_label_pc_11478:                               ; preds = %dec_label_pc_11464, %dec_label_pc_1146c.backedge
  %v0_11470.in = phi i32 [ %v0_11470, %dec_label_pc_1146c.backedge ], [ %v0_1146c1, %dec_label_pc_11464 ]
  %v0_1149c = phi i32 [ %v1_1149c., %dec_label_pc_1146c.backedge ], [ 0, %dec_label_pc_11464 ]
  %v0_11478 = phi i32 [ %v5_11478, %dec_label_pc_1146c.backedge ], [ %tmp20, %dec_label_pc_11464 ]
  %v0_11470 = add i32 %v0_11470.in, -1
  %v1_11478 = inttoptr i32 %v0_11478 to i8*
  %v2_11478 = load i8, i8* %v1_11478, align 1
  %v3_11478 = zext i8 %v2_11478 to i32
  store i32 %v3_11478, i32* @lr, align 4
  %v5_11478 = add i32 %v0_11478, 1
  %v2_1147c = add i32 %v0_1149c, %arg2
  %v3_1147c = inttoptr i32 %v2_1147c to i8*
  %v4_1147c = load i8, i8* %v3_1147c, align 1
  %v6_1147c = zext i8 %v4_1147c to i32
  %v1_11480 = add nsw i32 %v3_11478, -65
  %v1_11484 = add nsw i32 %v6_1147c, -65
  %tmp35 = icmp ult i32 %v1_11480, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_11478
  %v5_1148c = or i32 %v3_11478, 96
  store i32 %v5_1148c, i32* @lr, align 4
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_11478, %bb28
  %v0_11498 = phi i32 [ %v3_11478, %dec_label_pc_11478 ], [ %v5_1148c, %bb28 ]
  %tmp36 = icmp ult i32 %v1_11484, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_11494 = or i32 %v6_1147c, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_11498 = phi i32 [ %v6_1147c, %bb29 ], [ %v5_11494, %bb30 ]
  %v9_11498 = icmp eq i32 %v0_11498, %v1_11498
  %v1_1149c = add i32 %v0_1149c, 1
  %v1_1149c. = select i1 %v9_11498, i32 %v1_1149c, i32 0
  br i1 %v9_11498, label %dec_label_pc_114a8, label %dec_label_pc_1146c.backedge

dec_label_pc_1146c.backedge:                      ; preds = %bb31, %dec_label_pc_114a8
  %tmp32 = icmp slt i32 %v0_11470, 1
  br i1 %tmp32, label %dec_label_pc_114b8, label %dec_label_pc_11478

dec_label_pc_114a8:                               ; preds = %bb31
  %v9_114a8 = icmp eq i32 %v0_114a818, %v1_1149c.
  br i1 %v9_114a8, label %dec_label_pc_114b0, label %dec_label_pc_1146c.backedge

dec_label_pc_114b0:                               ; preds = %dec_label_pc_114a8
  %v2_114b0 = sub i32 %v5_11478, %tmp20
  ret i32 %v2_114b0

dec_label_pc_114b8:                               ; preds = %dec_label_pc_1146c.backedge, %dec_label_pc_11464
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_1149c., { 1, 0 }
  uselistorder i32 %v0_11478, { 1, 0 }
  uselistorder i32 %v0_1149c, { 1, 0 }
  uselistorder i8 %v3_11438, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder label %dec_label_pc_1146c.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_11478, { 1, 0 }
}

define i32 @function_114c0(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_114c0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* @r2, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_114c0 = load i32, i32* @r4, align 4
  store i32 %v3_114c0, i32* %stack_var_-28, align 4
  %v22_114c0 = ptrtoint i32* %stack_var_-28 to i32
  %v0_114c4 = load i32, i32* @r2, align 4
  store i32 %v0_114c4, i32* %r8.global-to-local, align 4
  %v2_114c4 = icmp eq i32 %v0_114c4, 0
  store i1 %v2_114c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_114c4, label %dec_label_pc_115b4, label %dec_label_pc_114d4

dec_label_pc_114d4:                               ; preds = %dec_label_pc_114c0
  %v3_114d4 = icmp eq i8 %arg1, 0
  store i1 %v3_114d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_114d4, label %.thread, label %dec_label_pc_114e8

.thread:                                          ; preds = %dec_label_pc_114d4
  %v4_114dc = inttoptr i32 %v0_114c4 to i8*
  store i8 48, i8* %v4_114dc, align 1
  %v0_114e0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_114e0.pr.pr, label %.thread1, label %dec_label_pc_114e8

.thread1:                                         ; preds = %.thread
  %v4_114e0 = load i32, i32* %r8.global-to-local, align 4
  %v5_114e0 = add i32 %v4_114e0, 1
  %v6_114e0 = inttoptr i32 %v5_114e0 to i8*
  store i8 0, i8* %v6_114e0, align 1
  %v0_114e4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_114e4.pr.pr, label %dec_label_pc_115b4, label %dec_label_pc_114e8

dec_label_pc_114e8:                               ; preds = %dec_label_pc_114d4, %.thread, %.thread1
  %v7_114ec = icmp eq i32 %arg2, 10
  store i1 %v7_114ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_114ec, label %bb, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_114e8
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_114e8
  %tmp39 = icmp slt i8 %arg1, 0
  %phitmp = icmp eq i1 %tmp39, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_11510

.thread4:                                         ; preds = %bb, %.thread21
  store i32 %tmp, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11520

dec_label_pc_11510:                               ; preds = %bb
  %v2_11510 = sub nsw i32 0, %tmp
  store i32 %v2_11510, i32* %r4.global-to-local, align 4
  store i1 %v3_114d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_114d4, label %dec_label_pc_115c0, label %dec_label_pc_11520

dec_label_pc_11520:                               ; preds = %dec_label_pc_11510, %.thread4
  %v0_1152810 = phi i32 [ %tmp, %.thread4 ], [ %v2_11510, %dec_label_pc_11510 ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_11510 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_11524 = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_11524, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_11528

dec_label_pc_11528:                               ; preds = %bb37, %dec_label_pc_11520
  %v0_11528 = phi i32 [ %v0_1154c, %bb37 ], [ %v0_1152810, %dec_label_pc_11520 ]
  store i32 %v0_11528, i32* %r0.global-to-local, align 4
  %v0_1152c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1152c, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_11528, 16777216
  %v1_11530 = sdiv i32 %sext, 16777216
  %v3_11530 = call i32 @function_116e8(i32 %v1_11530, i32 %v0_1152c)
  store i32 %v3_11530, i32* %r0.global-to-local, align 4
  %v7_11534 = icmp eq i32 %v3_11530, 9
  store i1 %v7_11534, i1* %cpsr_z.global-to-local, align 1
  %v1_11538 = add i32 %v3_11530, 48
  %v0_1153c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1153c, i32* @r1, align 4
  %v7_11540 = icmp sgt i32 %v3_11530, 9
  %extract.t = trunc i32 %v1_11538 to i8
  br i1 %v7_11540, label %bb36, label %bb37

bb36:                                             ; preds = %dec_label_pc_11528
  %v9_11540 = add i32 %v3_11530, 55
  %extract.t20 = trunc i32 %v9_11540 to i8
  br label %bb37

bb37:                                             ; preds = %dec_label_pc_11528, %bb36
  %v0_11548.off0 = phi i8 [ %extract.t, %dec_label_pc_11528 ], [ %extract.t20, %bb36 ]
  %v0_11544 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11544, i32* @r0, align 4
  %v2_11548 = load i32, i32* %r7.global-to-local, align 4
  %v3_11548 = inttoptr i32 %v2_11548 to i8*
  store i8 %v0_11548.off0, i8* %v3_11548, align 1
  %v4_11548 = load i32, i32* %r7.global-to-local, align 4
  %v5_11548 = add i32 %v4_11548, -1
  store i32 %v5_11548, i32* %r7.global-to-local, align 4
  %v0_1154c = call i32 @function_115d8()
  store i32 %v0_1154c, i32* %r0.global-to-local, align 4
  store i32 %v0_1154c, i32* %r4.global-to-local, align 4
  %v2_11550 = icmp eq i32 %v0_1154c, 0
  store i1 %v2_11550, i1* %cpsr_z.global-to-local, align 1
  %v0_11554 = load i32, i32* %r6.global-to-local, align 4
  %v1_11554 = add i32 %v0_11554, -1
  store i32 %v1_11554, i32* %r6.global-to-local, align 4
  br i1 %v2_11550, label %dec_label_pc_1155c, label %dec_label_pc_11528

dec_label_pc_1155c:                               ; preds = %bb37
  %v0_1155c = load i32, i32* %sl.global-to-local, align 4
  %v2_1155c = icmp eq i32 %v0_1155c, 0
  store i1 %v2_1155c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1155c, label %bb38, label %dec_label_pc_115c4

bb38:                                             ; preds = %dec_label_pc_1155c
  store i32 %v0_11554, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11568

dec_label_pc_11568:                               ; preds = %bb38, %dec_label_pc_115c4
  %v1_11574 = phi i32 [ %v0_11554, %bb38 ], [ %v1_1156c.pre, %dec_label_pc_115c4 ]
  %v2_11568 = ptrtoint i32* %stack_var_-62 to i32
  %v2_1156c = add i32 %v1_11574, %v2_11568
  %v3_1156c = inttoptr i32 %v2_1156c to i8*
  %v4_1156c = load i8, i8* %v3_1156c, align 1
  %v6_1156c = zext i8 %v4_1156c to i32
  %v2_11570 = icmp eq i8 %v4_1156c, 0
  store i1 %v2_11570, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_1156c, i32* %r1.global-to-local, align 4
  br i1 %v2_11570, label %dec_label_pc_11598, label %dec_label_pc_1157c

dec_label_pc_1157c:                               ; preds = %dec_label_pc_11568
  br label %dec_label_pc_11580

dec_label_pc_11580:                               ; preds = %dec_label_pc_11580, %dec_label_pc_1157c
  %v0_11580 = phi i32 [ %v1_11580, %dec_label_pc_11580 ], [ 0, %dec_label_pc_1157c ]
  %v1_11580 = add i32 %v0_11580, 1
  store i32 %v1_11580, i32* @r2, align 4
  %v2_11584 = add i32 %v1_11580, %v2_1156c
  %v3_11584 = inttoptr i32 %v2_11584 to i8*
  %v4_11584 = load i8, i8* %v3_11584, align 1
  %v2_11588 = icmp eq i8 %v4_11584, 0
  store i1 %v2_11588, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11588, label %dec_label_pc_11590, label %dec_label_pc_11580

dec_label_pc_11590:                               ; preds = %dec_label_pc_11580
  %v7_11590 = icmp eq i32 %v0_11580, -2
  store i1 %v7_11590, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11590, label %dec_label_pc_115b4, label %dec_label_pc_11598

dec_label_pc_11598:                               ; preds = %dec_label_pc_11590, %dec_label_pc_11568
  %v0_115a017 = phi i32 [ %v1_11580, %dec_label_pc_11590 ], [ %v6_1156c, %dec_label_pc_11568 ]
  store i32 %v2_1156c, i32* %r0.global-to-local, align 4
  %v0_1159c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_1159c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_115a0

dec_label_pc_115a0:                               ; preds = %dec_label_pc_115a0.dec_label_pc_115a0_crit_edge, %dec_label_pc_11598
  %v2_115ac = phi i32 [ %v5_115ac, %dec_label_pc_115a0.dec_label_pc_115a0_crit_edge ], [ %v0_1159c, %dec_label_pc_11598 ]
  %v0_115a4 = phi i32 [ %v0_115a4.pre, %dec_label_pc_115a0.dec_label_pc_115a0_crit_edge ], [ %v2_1156c, %dec_label_pc_11598 ]
  %v0_115a0 = phi i32 [ %v0_115a0.pre, %dec_label_pc_115a0.dec_label_pc_115a0_crit_edge ], [ %v0_115a017, %dec_label_pc_11598 ]
  %v1_115a0 = add i32 %v0_115a0, -1
  store i32 %v1_115a0, i32* @r2, align 4
  %v1_115a4 = inttoptr i32 %v0_115a4 to i8*
  %v2_115a4 = load i8, i8* %v1_115a4, align 1
  %v5_115a4 = add i32 %v0_115a4, 1
  store i32 %v5_115a4, i32* %r0.global-to-local, align 4
  %v3_115a8 = icmp eq i32 %v0_115a0, 0
  store i1 %v3_115a8, i1* %cpsr_z.global-to-local, align 1
  %v3_115ac = inttoptr i32 %v2_115ac to i8*
  store i8 %v2_115a4, i8* %v3_115ac, align 1
  %v4_115ac = load i32, i32* %r1.global-to-local, align 4
  %v5_115ac = add i32 %v4_115ac, 1
  store i32 %v5_115ac, i32* %r1.global-to-local, align 4
  br i1 %v3_115a8, label %dec_label_pc_115b4, label %dec_label_pc_115a0.dec_label_pc_115a0_crit_edge

dec_label_pc_115a0.dec_label_pc_115a0_crit_edge:  ; preds = %dec_label_pc_115a0
  %v0_115a0.pre = load i32, i32* @r2, align 4
  %v0_115a4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_115a0

dec_label_pc_115b4:                               ; preds = %dec_label_pc_115a0, %dec_label_pc_11590, %.thread1, %dec_label_pc_114c0
  %v0_115b4 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_115b4, i32* %r0.global-to-local, align 4
  %v2_115bc = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_115bc, i32* @r4, align 4
  ret i32 %v0_115b4

dec_label_pc_115c0:                               ; preds = %dec_label_pc_11510
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_115c4

dec_label_pc_115c4:                               ; preds = %dec_label_pc_1155c, %dec_label_pc_115c0
  %v1_115c8 = phi i32 [ %v1_11554, %dec_label_pc_1155c ], [ 32, %dec_label_pc_115c0 ]
  %v2_115c8 = add i32 %v1_115c8, %v22_114c0
  %v3_115d0 = add i32 %v2_115c8, -34
  %v4_115d0 = inttoptr i32 %v3_115d0 to i8*
  store i8 45, i8* %v4_115d0, align 1
  %v1_1156c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11568

; uselistorder directives
  uselistorder i32 %v5_115ac, { 1, 0 }
  uselistorder i1 %v3_115a8, { 1, 0 }
  uselistorder i32 %v0_115a4, { 1, 0 }
  uselistorder i1 %v7_11590, { 1, 0 }
  uselistorder i32 %v1_11580, { 0, 1, 3, 2 }
  uselistorder i32 %v2_1156c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_1154c, { 1, 2, 3, 0 }
  uselistorder i32 %v3_11530, { 1, 0, 2, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_114d4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_114c4, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 14, 9, 11, 10, 12, 13 }
  uselistorder label %dec_label_pc_115c4, { 1, 0 }
  uselistorder label %dec_label_pc_11568, { 1, 0 }
  uselistorder label %bb37, { 1, 0 }
  uselistorder label %dec_label_pc_114e8, { 2, 1, 0 }
}

define i32 @function_115d8() local_unnamed_addr {
dec_label_pc_115d8:
  %v0_115d8 = load i32, i32* @r1, align 4
  %v1_115d8 = add i32 %v0_115d8, -1
  %v7_115d8 = icmp eq i32 %v0_115d8, 1
  br i1 %v7_115d8, label %bb, label %bb82

bb:                                               ; preds = %dec_label_pc_115d8
  %v2_115dc = load i32, i32* @r0, align 4
  ret i32 %v2_115dc

bb82:                                             ; preds = %dec_label_pc_115d8
  %v2_115d8 = icmp eq i32 %v0_115d8, 0
  br i1 %v2_115d8, label %dec_label_pc_116c0, label %dec_label_pc_115e4

dec_label_pc_115e4:                               ; preds = %bb82
  %v0_115e4 = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_115e4, %v0_115d8
  br i1 %tmp, label %dec_label_pc_115ec, label %dec_label_pc_11678

dec_label_pc_115ec:                               ; preds = %dec_label_pc_115e4
  %v2_115ec = and i32 %v1_115d8, %v0_115d8
  %v4_115ec = icmp eq i32 %v2_115ec, 0
  br i1 %v4_115ec, label %dec_label_pc_11684, label %dec_label_pc_115f4

dec_label_pc_115f4:                               ; preds = %dec_label_pc_115ec
  %v3_115f4 = icmp ult i32 %v0_115d8, 536870912
  br i1 %v3_115f4, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_115f4
  %v4_115f8 = mul i32 %v0_115d8, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_115f4, %.thread
  %v0_11618.pr36.ph = phi i32 [ %v4_115f8, %.thread ], [ %v0_115d8, %dec_label_pc_115f4 ]
  %storemerge137 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_115f4 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb85
  %v0_11618.pr36 = phi i32 [ %v4_1160c, %bb85 ], [ %v0_11618.pr36.ph, %.preheader.preheader ]
  %v1_11610 = phi i32 [ %v4_11610, %bb85 ], [ %storemerge137, %.preheader.preheader ]
  %v2_11604 = icmp ugt i32 %v0_11618.pr36, 268435455
  br i1 %v2_11604, label %.thread2, label %bb83

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_11618thread-pre-split.loopexit

bb83:                                             ; preds = %.preheader
  %v4_11608 = icmp ult i32 %v0_11618.pr36, %v0_115e4
  br i1 %v4_11608, label %bb84, label %dec_label_pc_11618thread-pre-split.loopexit.loopexit

bb84:                                             ; preds = %bb83
  %v2_1160c = and i32 %v0_11618.pr36, 268435456
  %v3_1160c = icmp eq i32 %v2_1160c, 0
  %v4_1160c = mul i32 %v0_11618.pr36, 16
  br i1 %v3_1160c, label %bb85, label %dec_label_pc_11618.loopexit

bb85:                                             ; preds = %bb84
  %v2_11610 = and i32 %v1_11610, 268435456
  %v3_11610 = icmp eq i32 %v2_11610, 0
  %v4_11610 = mul i32 %v1_11610, 16
  br i1 %v3_11610, label %.preheader, label %dec_label_pc_11618thread-pre-split.loopexit.loopexit

dec_label_pc_11618thread-pre-split.loopexit.loopexit: ; preds = %bb85, %bb83
  %v1_1162448.ph = phi i32 [ %v1_11610, %bb83 ], [ %v4_11610, %bb85 ]
  %v0_11618.pr38.ph = phi i32 [ %v0_11618.pr36, %bb83 ], [ %v4_1160c, %bb85 ]
  br label %dec_label_pc_11618thread-pre-split.loopexit

dec_label_pc_11618thread-pre-split.loopexit:      ; preds = %dec_label_pc_11618thread-pre-split.loopexit.loopexit, %.thread2
  %v1_1162448 = phi i32 [ %v1_11610, %.thread2 ], [ %v1_1162448.ph, %dec_label_pc_11618thread-pre-split.loopexit.loopexit ]
  %v0_11618.pr38 = phi i32 [ %v0_11618.pr36, %.thread2 ], [ %v0_11618.pr38.ph, %dec_label_pc_11618thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11618thread-pre-split

dec_label_pc_11618thread-pre-split:               ; preds = %dec_label_pc_11618thread-pre-split.loopexit, %bb87
  %v1_1162446 = phi i32 [ %v1_1162448, %dec_label_pc_11618thread-pre-split.loopexit ], [ %v3_11624, %bb87 ]
  %v0_11618.pr = phi i32 [ %v0_11618.pr38, %dec_label_pc_11618thread-pre-split.loopexit ], [ %v3_11620, %bb87 ]
  br label %dec_label_pc_11618

dec_label_pc_11618.loopexit:                      ; preds = %bb84
  br label %dec_label_pc_11618

dec_label_pc_11618:                               ; preds = %dec_label_pc_11618.loopexit, %dec_label_pc_11618thread-pre-split
  %v1_11624 = phi i32 [ %v1_1162446, %dec_label_pc_11618thread-pre-split ], [ %v1_11610, %dec_label_pc_11618.loopexit ]
  %v1_11620 = phi i32 [ %v0_11618.pr, %dec_label_pc_11618thread-pre-split ], [ %v4_1160c, %dec_label_pc_11618.loopexit ]
  %v2_11618 = icmp slt i32 %v1_11620, 0
  br i1 %v2_11618, label %dec_label_pc_1162c, label %bb86

bb86:                                             ; preds = %dec_label_pc_11618
  %v4_1161c = icmp ult i32 %v1_11620, %v0_115e4
  br i1 %v4_1161c, label %bb87, label %dec_label_pc_1162c

bb87:                                             ; preds = %bb86
  %v3_11620 = mul i32 %v1_11620, 2
  %v2_11624 = icmp slt i32 %v1_11624, 0
  %v3_11624 = mul i32 %v1_11624, 2
  br i1 %v2_11624, label %dec_label_pc_1162c, label %dec_label_pc_11618thread-pre-split

dec_label_pc_1162c:                               ; preds = %bb86, %dec_label_pc_11618, %bb87
  %v2_1163859 = phi i32 [ %v3_11624, %bb87 ], [ %v1_11624, %bb86 ], [ %v1_11624, %dec_label_pc_11618 ]
  %v1_1163051 = phi i32 [ %v3_11620, %bb87 ], [ %v1_11620, %bb86 ], [ %v1_11620, %dec_label_pc_11618 ]
  br label %dec_label_pc_11630

dec_label_pc_11630:                               ; preds = %.thread11, %dec_label_pc_1162c
  %v1_11664 = phi i32 [ %v4_11664, %.thread11 ], [ %v2_1163859, %dec_label_pc_1162c ]
  %v1_11638 = phi i32 [ %v0_11670, %.thread11 ], [ 0, %dec_label_pc_1162c ]
  %v1_11668 = phi i32 [ %v4_11668, %.thread11 ], [ %v1_1163051, %dec_label_pc_1162c ]
  %v1_11634 = phi i32 [ %v0_11660, %.thread11 ], [ %v0_115e4, %dec_label_pc_1162c ]
  %v3_11630 = icmp ult i32 %v1_11634, %v1_11668
  br i1 %v3_11630, label %.thread7, label %bb88

bb88:                                             ; preds = %dec_label_pc_11630
  %v3_11634 = sub i32 %v1_11634, %v1_11668
  %v3_11638 = or i32 %v1_11638, %v1_11664
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_11630, %bb88
  %v1_11640 = phi i32 [ %v1_11634, %dec_label_pc_11630 ], [ %v3_11634, %bb88 ]
  %v1_11644 = phi i32 [ %v1_11638, %dec_label_pc_11630 ], [ %v3_11638, %bb88 ]
  %v4_1163c = udiv i32 %v1_11668, 2
  %v6_1163c = icmp ult i32 %v1_11640, %v4_1163c
  br i1 %v6_1163c, label %.thread8, label %bb89

bb89:                                             ; preds = %.thread7
  %v3_11640 = urem i32 %v1_11668, 2
  %v4_11640 = icmp eq i32 %v3_11640, 0
  %v6_11640 = sub i32 %v1_11640, %v4_1163c
  br i1 %v4_11640, label %.thread8, label %bb90

bb90:                                             ; preds = %bb89
  %v5_11644 = udiv i32 %v1_11664, 2
  %v6_11644 = or i32 %v1_11644, %v5_11644
  br label %.thread8

.thread8:                                         ; preds = %bb89, %.thread7, %bb90
  %v1_1164c = phi i32 [ %v6_11640, %bb89 ], [ %v1_11640, %.thread7 ], [ %v6_11640, %bb90 ]
  %v1_11650 = phi i32 [ %v1_11644, %bb89 ], [ %v1_11644, %.thread7 ], [ %v6_11644, %bb90 ]
  %v4_11648 = udiv i32 %v1_11668, 4
  %v6_11648 = icmp ult i32 %v1_1164c, %v4_11648
  br i1 %v6_11648, label %.thread9, label %bb91

bb91:                                             ; preds = %.thread8
  %v3_1164c = and i32 %v1_11668, 2
  %v4_1164c = icmp eq i32 %v3_1164c, 0
  %v6_1164c = sub i32 %v1_1164c, %v4_11648
  br i1 %v4_1164c, label %.thread9, label %bb92

bb92:                                             ; preds = %bb91
  %v5_11650 = udiv i32 %v1_11664, 4
  %v6_11650 = or i32 %v1_11650, %v5_11650
  br label %.thread9

.thread9:                                         ; preds = %bb91, %.thread8, %bb92
  %v1_11658 = phi i32 [ %v6_1164c, %bb91 ], [ %v1_1164c, %.thread8 ], [ %v6_1164c, %bb92 ]
  %v1_1165c = phi i32 [ %v1_11650, %bb91 ], [ %v1_11650, %.thread8 ], [ %v6_11650, %bb92 ]
  %v4_11654 = udiv i32 %v1_11668, 8
  %v6_11654 = icmp ult i32 %v1_11658, %v4_11654
  br i1 %v6_11654, label %thread-pre-split, label %bb93

bb93:                                             ; preds = %.thread9
  %v3_11658 = and i32 %v1_11668, 4
  %v4_11658 = icmp eq i32 %v3_11658, 0
  %v6_11658 = sub i32 %v1_11658, %v4_11654
  br i1 %v4_11658, label %thread-pre-split, label %bb94

bb94:                                             ; preds = %bb93
  %v5_1165c = udiv i32 %v1_11664, 8
  %v6_1165c = or i32 %v1_1165c, %v5_1165c
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb94, %.thread9, %bb93
  %v0_11670 = phi i32 [ %v1_1165c, %bb93 ], [ %v1_1165c, %.thread9 ], [ %v6_1165c, %bb94 ]
  %v0_11660 = phi i32 [ %v6_11658, %bb93 ], [ %v1_11658, %.thread9 ], [ %v6_11658, %bb94 ]
  %v2_11660 = icmp eq i32 %v0_11660, 0
  br i1 %v2_11660, label %dec_label_pc_11670, label %bb95

bb95:                                             ; preds = %thread-pre-split
  %tmp142 = icmp ult i32 %v1_11664, 16
  br i1 %tmp142, label %dec_label_pc_11670, label %.thread11

.thread11:                                        ; preds = %bb95
  %v4_11664 = udiv i32 %v1_11664, 16
  %v4_11668 = udiv i32 %v1_11668, 16
  br label %dec_label_pc_11630

dec_label_pc_11670:                               ; preds = %thread-pre-split, %bb95
  ret i32 %v0_11670

dec_label_pc_11678:                               ; preds = %dec_label_pc_115e4
  %v9_115e4 = icmp eq i32 %v0_115e4, %v0_115d8
  %. = zext i1 %v9_115e4 to i32
  ret i32 %.

dec_label_pc_11684:                               ; preds = %dec_label_pc_115ec
  %v2_11684 = icmp ugt i32 %v0_115d8, 65535
  br i1 %v2_11684, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_11684
  %v2_11688 = and i32 %v0_115d8, 32768
  %v3_11688 = icmp eq i32 %v2_11688, 0
  %v4_11688 = udiv i32 %v0_115d8, 65536
  br i1 %v3_11688, label %.thread16, label %bb100

.thread16:                                        ; preds = %bb99, %dec_label_pc_11684
  %v0_1169465 = phi i32 [ %v0_115d8, %dec_label_pc_11684 ], [ %v4_11688, %bb99 ]
  br label %bb100

bb100:                                            ; preds = %bb99, %.thread16
  %v1_11698 = phi i32 [ %v0_1169465, %.thread16 ], [ %v4_11688, %bb99 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb99 ]
  %v2_11694 = icmp ugt i32 %v1_11698, 255
  br i1 %v2_11694, label %bb101, label %.thread17

bb101:                                            ; preds = %bb100
  %v2_11698 = and i32 %v1_11698, 128
  %v3_11698 = icmp eq i32 %v2_11698, 0
  %v4_11698 = udiv i32 %v1_11698, 256
  br i1 %v3_11698, label %.thread17, label %bb102

bb102:                                            ; preds = %bb101
  %v2_1169c = or i32 %storemerge, 8
  br label %.thread17

.thread17:                                        ; preds = %bb101, %bb100, %bb102
  %v1_116a8 = phi i32 [ %storemerge, %bb100 ], [ %storemerge, %bb101 ], [ %v2_1169c, %bb102 ]
  %v1_116a4 = phi i32 [ %v1_11698, %bb100 ], [ %v4_11698, %bb101 ], [ %v4_11698, %bb102 ]
  %v2_116a0 = icmp ugt i32 %v1_116a4, 15
  br i1 %v2_116a0, label %bb103, label %.thread18

bb103:                                            ; preds = %.thread17
  %v2_116a4 = and i32 %v1_116a4, 8
  %v3_116a4 = icmp eq i32 %v2_116a4, 0
  %v4_116a4 = udiv i32 %v1_116a4, 16
  br i1 %v3_116a4, label %.thread18, label %bb104

bb104:                                            ; preds = %bb103
  %v2_116a8 = add nsw i32 %v1_116a8, 4
  br label %.thread18

.thread18:                                        ; preds = %bb103, %.thread17, %bb104
  %v4_116b0 = phi i32 [ %v1_116a8, %.thread17 ], [ %v1_116a8, %bb103 ], [ %v2_116a8, %bb104 ]
  %v5_116b4 = phi i32 [ %v1_116a4, %.thread17 ], [ %v4_116a4, %bb103 ], [ %v4_116a4, %bb104 ]
  %v2_116ac = icmp ugt i32 %v5_116b4, 3
  %v7_116ac = icmp eq i32 %v5_116b4, 4
  %v2_116b0 = xor i1 %v7_116ac, true
  %v3_116b0 = and i1 %v2_116ac, %v2_116b0
  br i1 %v3_116b0, label %bb105, label %bb106

bb105:                                            ; preds = %.thread18
  %v5_116b0 = add nsw i32 %v4_116b0, 3
  br label %bb106

bb106:                                            ; preds = %.thread18, %bb105
  %v4_116b4 = phi i32 [ %v4_116b0, %.thread18 ], [ %v5_116b0, %bb105 ]
  %v2_116b4 = xor i1 %v2_116ac, true
  %v3_116b4 = or i1 %v7_116ac, %v2_116b4
  br i1 %v3_116b4, label %bb107, label %bb108

bb107:                                            ; preds = %bb106
  %v8_116b4 = udiv i32 %v5_116b4, 2
  %v9_116b4 = add i32 %v4_116b4, %v8_116b4
  br label %bb108

bb108:                                            ; preds = %bb106, %bb107
  %v1_116b8 = phi i32 [ %v4_116b4, %bb106 ], [ %v9_116b4, %bb107 ]
  %v6_116b8 = lshr i32 %v0_115e4, %v1_116b8
  ret i32 %v6_116b8

dec_label_pc_116c0:                               ; preds = %bb82
  %v0_116c0 = load i32, i32* @lr, align 4
  %v0_116c4 = call i32 @function_11898()
  store i32 0, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v0_116c0)
  %v9_116d0 = load i32, i32* @lr, align 4
  %v0_116d4 = call i32 @function_115d8()
  store i32 %v9_116d0, i32* @lr, align 4
  ret i32 %v0_116d4

; uselistorder directives
  uselistorder i32 %v4_116b4, { 1, 0 }
  uselistorder i1 %v7_116ac, { 1, 0 }
  uselistorder i32 %v4_116a4, { 1, 0 }
  uselistorder i32 %v1_116a4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11698, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_11698, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11688, { 1, 0 }
  uselistorder i32 %v0_11660, { 1, 0 }
  uselistorder i32 %v4_11654, { 1, 0 }
  uselistorder i32 %v1_1165c, { 1, 2, 0 }
  uselistorder i32 %v4_11648, { 1, 0 }
  uselistorder i32 %v1_11650, { 1, 2, 0 }
  uselistorder i32 %v4_1163c, { 1, 0 }
  uselistorder i32 %v1_11644, { 1, 2, 0 }
  uselistorder i32 %v1_11668, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_11638, { 1, 0 }
  uselistorder i32 %v1_11664, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_11624, { 1, 0 }
  uselistorder i32 %v3_11620, { 1, 0 }
  uselistorder i32 %v1_11620, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_11624, { 1, 2, 0, 3 }
  uselistorder i32 %v4_11610, { 1, 0 }
  uselistorder i32 %v4_1160c, { 2, 1, 0 }
  uselistorder i32 %v1_11610, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_11618.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_115e4, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_115d8, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1, 10, 12, 11 }
  uselistorder i32 65535, { 102, 53, 54, 0, 1, 12, 55, 27, 56, 26, 57, 25, 58, 13, 14, 2, 29, 59, 28, 60, 61, 15, 62, 3, 30, 63, 31, 64, 32, 65, 66, 4, 33, 67, 68, 16, 69, 24, 37, 70, 34, 71, 35, 72, 36, 73, 74, 17, 75, 5, 76, 77, 41, 78, 40, 79, 38, 80, 39, 81, 18, 19, 6, 82, 42, 83, 43, 84, 20, 21, 7, 85, 44, 86, 45, 87, 88, 8, 46, 89, 90, 91, 22, 92, 93, 9, 49, 94, 47, 95, 48, 96, 97, 23, 98, 10, 11, 52, 99, 50, 100, 51, 101 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %dec_label_pc_11670, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_1162c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11618thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_116e8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_116e8:
  store i32 %arg1, i32* @r0, align 4
  %v1_116e8 = add i32 %arg2, -1
  %v2_116e8 = icmp eq i32 %arg2, 0
  br i1 %v2_116e8, label %dec_label_pc_117a4, label %dec_label_pc_116f0

dec_label_pc_116f0:                               ; preds = %dec_label_pc_116e8
  %v7_116e8 = icmp eq i32 %arg2, 1
  br i1 %v7_116e8, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_116f0
  %v1_116f0 = load i32, i32* @r0, align 4
  %v10_116f0 = icmp eq i32 %v1_116f0, %arg2
  br i1 %v10_116f0, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_116f0, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_116f0 = icmp ult i32 %v1_116f0, %arg2
  br i1 %v4_116f0, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_116f8 = and i32 %v1_116e8, %arg2
  %v8_116f8 = icmp eq i32 %v6_116f8, 0
  br i1 %v8_116f8, label %.thread67, label %dec_label_pc_11708.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_116fc = phi i32 [ %v1_116f0, %bb75 ], [ 0, %.thread65 ]
  %v3_116fc = and i32 %v1_116fc, %v1_116e8
  br label %bb76

dec_label_pc_11708.preheader:                     ; preds = %bb75
  %v2_1170899 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_1170899, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_11798, %bb74, %bb89, %bb84, %dec_label_pc_11768, %.thread67
  %v5_11700 = phi i32 [ %v1_116f0, %bb74 ], [ %v3_116fc, %.thread67 ], [ %v1_11744.v6_11744.v6_1174c.v6_11754, %dec_label_pc_11768 ], [ 0, %bb84 ], [ %v1_1179c, %dec_label_pc_11798 ], [ %v2_11798, %bb89 ]
  ret i32 %v5_11700

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_11708.preheader
  %v0_1171c.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_11708.preheader ], [ %v4_11710, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_11708.preheader ], [ %v2_1171411, %.thread1.thread9 ]
  br label %dec_label_pc_1171cthread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_11708.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_1171411, %.thread1.thread9 ], [ 0, %dec_label_pc_11708.preheader ]
  %v0_1171c.pr33100 = phi i32 [ %v4_11710, %.thread1.thread9 ], [ %arg2, %dec_label_pc_11708.preheader ]
  %v4_1170c = icmp ult i32 %v0_1171c.pr33100, %v1_116f0
  br i1 %v4_1170c, label %bb78, label %dec_label_pc_1171cthread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_11710 = and i32 %v0_1171c.pr33100, 268435456
  %v3_11710 = icmp eq i32 %v2_11710, 0
  %v4_11710 = mul i32 %v0_1171c.pr33100, 16
  br i1 %v3_11710, label %.thread1.thread9, label %dec_label_pc_1171c.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_1171411 = add i32 %storemerge101, 4
  %v2_11708 = icmp ugt i32 %v4_11710, 268435455
  br i1 %v2_11708, label %.thread, label %bb77

dec_label_pc_1171cthread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_1171cthread-pre-split.loopexit

dec_label_pc_1171cthread-pre-split.loopexit:      ; preds = %dec_label_pc_1171cthread-pre-split.loopexit.loopexit, %.thread
  %v0_1171c.pr3398 = phi i32 [ %v0_1171c.pr33.lcssa, %.thread ], [ %v0_1171c.pr33100, %dec_label_pc_1171cthread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_1171cthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_1171cthread-pre-split

dec_label_pc_1171cthread-pre-split:               ; preds = %.thread4, %dec_label_pc_1171cthread-pre-split.loopexit
  %v1_1172839 = phi i32 [ %storemerge95, %dec_label_pc_1171cthread-pre-split.loopexit ], [ %v2_11728, %.thread4 ]
  %v0_1171c.pr = phi i32 [ %v0_1171c.pr3398, %dec_label_pc_1171cthread-pre-split.loopexit ], [ %v3_11724, %.thread4 ]
  br label %dec_label_pc_1171c

dec_label_pc_1171c.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_1171c

dec_label_pc_1171c:                               ; preds = %dec_label_pc_1171c.loopexit, %dec_label_pc_1171cthread-pre-split
  %v0_11730.pr = phi i32 [ %v1_1172839, %dec_label_pc_1171cthread-pre-split ], [ %storemerge101, %dec_label_pc_1171c.loopexit ]
  %v1_11724 = phi i32 [ %v0_1171c.pr, %dec_label_pc_1171cthread-pre-split ], [ %v4_11710, %dec_label_pc_1171c.loopexit ]
  %v2_1171c = icmp slt i32 %v1_11724, 0
  br i1 %v2_1171c, label %dec_label_pc_11730, label %bb79

bb79:                                             ; preds = %dec_label_pc_1171c
  %v4_11720 = icmp ult i32 %v1_11724, %v1_116f0
  br i1 %v4_11720, label %.thread4, label %dec_label_pc_11730

.thread4:                                         ; preds = %bb79
  %v3_11724 = mul i32 %v1_11724, 2
  %v2_11728 = add i32 %v0_11730.pr, 1
  br label %dec_label_pc_1171cthread-pre-split

dec_label_pc_11730:                               ; preds = %bb79, %dec_label_pc_1171c
  %v2_11730 = add i32 %v0_11730.pr, -3
  %v5_11734 = icmp slt i32 %v0_11730.pr, 3
  br i1 %v5_11734, label %dec_label_pc_11774, label %dec_label_pc_11738

dec_label_pc_11738:                               ; preds = %dec_label_pc_11730, %bb83
  %v6_11760 = phi i32 [ %v0_11768, %bb83 ], [ %v2_11730, %dec_label_pc_11730 ]
  %v1_1173c = phi i32 [ %v1_11744.v6_11744.v6_1174c.v6_11754, %bb83 ], [ %v1_116f0, %dec_label_pc_11730 ]
  %v3_1175c12 = phi i32 [ %v3_1175c, %bb83 ], [ %v1_11724, %dec_label_pc_11730 ]
  %v3_11738 = icmp ult i32 %v1_1173c, %v3_1175c12
  %v3_1173c = select i1 %v3_11738, i32 0, i32 %v3_1175c12
  %v1_11744 = sub i32 %v1_1173c, %v3_1173c
  %v4_11740 = udiv i32 %v3_1175c12, 2
  %v6_11740 = icmp ult i32 %v1_11744, %v4_11740
  %v6_11744 = select i1 %v6_11740, i32 0, i32 %v4_11740
  %v1_11744.v6_11744 = sub i32 %v1_11744, %v6_11744
  %.demorgan = and i1 %v3_11738, %v6_11740
  %v4_11748 = udiv i32 %v3_1175c12, 4
  %v6_11748 = icmp ult i32 %v1_11744.v6_11744, %v4_11748
  %v6_1174c = select i1 %v6_11748, i32 0, i32 %v4_11748
  %v1_11744.v6_11744.v6_1174c = sub i32 %v1_11744.v6_11744, %v6_1174c
  %.demorgan71 = and i1 %.demorgan, %v6_11748
  %v4_11750 = udiv i32 %v3_1175c12, 8
  %v6_11750 = icmp ult i32 %v1_11744.v6_11744.v6_1174c, %v4_11750
  %v6_11754 = select i1 %v6_11750, i32 0, i32 %v4_11750
  %v1_11744.v6_11744.v6_1174c.v6_11754 = sub i32 %v1_11744.v6_11744.v6_1174c, %v6_11754
  %.demorgan72 = and i1 %.demorgan71, %v6_11750
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_11738
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_11738, %bb80
  %v2_11758 = add i32 %v1_11744.v6_11744.v6_1174c.v6_11754, -1
  %v4_11758 = sub i32 0, %v1_11744.v6_11744.v6_1174c.v6_11754
  %v5_11758 = and i32 %v1_11744.v6_11744.v6_1174c.v6_11754, %v4_11758
  %v3_1175c = udiv i32 %v3_1175c12, 16
  %v5_11760 = icmp slt i32 %v1_11744.v6_11744.v6_1174c.v6_11754, 1
  br i1 %v5_11760, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_11760 = add i32 %v6_11760, -4
  %v9_11760 = sub i32 3, %v6_11760
  %v10_11760 = and i32 %v9_11760, %v6_11760
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_11768 = phi i32 [ %v6_11760, %bb81 ], [ %v7_11760, %bb82 ]
  %v0_1176415.in = phi i32 [ %v2_11758, %bb81 ], [ %v7_11760, %bb82 ]
  %v1_1176414.in = phi i32 [ %v5_11758, %bb81 ], [ %v10_11760, %bb82 ]
  %v1_1176414 = icmp slt i32 %v1_1176414.in, 0
  %v0_1176415 = icmp slt i32 %v0_1176415.in, 0
  %v2_11764 = xor i1 %v0_1176415, %v1_1176414
  br i1 %v2_11764, label %dec_label_pc_11768, label %dec_label_pc_11738

dec_label_pc_11768:                               ; preds = %bb83
  %v1_11768 = urem i32 %v0_11768, 4
  %v2_11768 = icmp eq i32 %v1_11768, 0
  br i1 %v2_11768, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_11768
  %v3_1176c = icmp eq i32 %v1_11744.v6_11744.v6_1174c.v6_11754, 0
  br i1 %v3_1176c, label %bb76, label %dec_label_pc_11774

dec_label_pc_11774:                               ; preds = %bb84, %dec_label_pc_11730
  %v0_11788 = phi i32 [ %v3_1175c, %bb84 ], [ %v1_11724, %dec_label_pc_11730 ]
  %v1_11784 = phi i32 [ %v1_11744.v6_11744.v6_1174c.v6_11754, %bb84 ], [ %v1_116f0, %dec_label_pc_11730 ]
  %v0_11774 = phi i32 [ %v0_11768, %bb84 ], [ %v2_11730, %dec_label_pc_11730 ]
  %v5_11778 = icmp slt i32 %v0_11774, -2
  br i1 %v5_11778, label %dec_label_pc_11798, label %dec_label_pc_1177c

dec_label_pc_1177c:                               ; preds = %dec_label_pc_11774
  %v8_11774 = icmp eq i32 %v0_11774, -2
  br i1 %v8_11774, label %dec_label_pc_1178c, label %dec_label_pc_11780

dec_label_pc_11780:                               ; preds = %dec_label_pc_1177c
  %v3_11780 = icmp ult i32 %v1_11784, %v0_11788
  br i1 %v3_11780, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_11780
  %v2_11780 = sub i32 %v1_11784, %v0_11788
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_11780, %bb85
  %v0_1178c52 = phi i32 [ %v1_11784, %dec_label_pc_11780 ], [ %v2_11780, %bb85 ]
  %v3_11788 = udiv i32 %v0_11788, 2
  br label %dec_label_pc_1178c

dec_label_pc_1178c:                               ; preds = %dec_label_pc_1177c, %bb86
  %v0_11794 = phi i32 [ %v0_11788, %dec_label_pc_1177c ], [ %v3_11788, %bb86 ]
  %v1_11790 = phi i32 [ %v1_11784, %dec_label_pc_1177c ], [ %v0_1178c52, %bb86 ]
  %v3_1178c = icmp ult i32 %v1_11790, %v0_11794
  br i1 %v3_1178c, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_1178c
  %v2_1178c = sub i32 %v1_11790, %v0_11794
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_1178c, %bb87
  %v0_1179855 = phi i32 [ %v1_11790, %dec_label_pc_1178c ], [ %v2_1178c, %bb87 ]
  %v3_11794 = udiv i32 %v0_11794, 2
  br label %dec_label_pc_11798

dec_label_pc_11798:                               ; preds = %dec_label_pc_11774, %bb88
  %v2_1179c = phi i32 [ %v0_11788, %dec_label_pc_11774 ], [ %v3_11794, %bb88 ]
  %v1_1179c = phi i32 [ %v1_11784, %dec_label_pc_11774 ], [ %v0_1179855, %bb88 ]
  %v3_11798 = icmp ult i32 %v1_1179c, %v2_1179c
  br i1 %v3_11798, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_11798
  %v2_11798 = sub i32 %v1_1179c, %v2_1179c
  br label %bb76

dec_label_pc_117a4:                               ; preds = %dec_label_pc_116e8
  %v0_117a4 = load i32, i32* @lr, align 4
  %v0_117a8 = call i32 @function_11898()
  call void @__pseudo_branch(i32 %v0_117a4)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_1179c, { 1, 2, 0 }
  uselistorder i32 %v0_11788, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11768, { 1, 0, 2 }
  uselistorder i32 %v7_11760, { 1, 0 }
  uselistorder i32 %v3_1175c, { 1, 0 }
  uselistorder i32 %v1_11744.v6_11744.v6_1174c.v6_11754, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_11750, { 1, 0 }
  uselistorder i32 %v4_11748, { 1, 0 }
  uselistorder i32 %v4_11740, { 1, 0 }
  uselistorder i32 %v6_11760, { 3, 0, 2, 1 }
  uselistorder i32 %v2_11730, { 1, 0 }
  uselistorder i32 %v1_11724, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_11710, { 1, 0, 3, 2 }
  uselistorder i32 %v0_1171c.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_116f0, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_11798, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_1178c, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_11738, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @function_117b4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_117b4:
  store i32 %arg1, i32* @r0, align 4
  %v2_117b4 = icmp eq i32 %arg2, 0
  br i1 %v2_117b4, label %dec_label_pc_11888, label %dec_label_pc_117bc

dec_label_pc_117bc:                               ; preds = %dec_label_pc_117b4
  %v1_117b4 = icmp slt i32 %arg2, 0
  br i1 %v1_117b4, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_117bc
  %v2_117bc = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_117bc, %bb
  %v4_117d4 = phi i32 [ %arg2, %dec_label_pc_117bc ], [ %v2_117bc, %bb ]
  %v0_117c0 = load i32, i32* @r0, align 4
  %v1_117c0 = icmp slt i32 %v0_117c0, 0
  br i1 %v1_117c0, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_117c4 = sub i32 0, %v0_117c0
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_117cc = phi i32 [ %v0_117c0, %bb79 ], [ %v2_117c4, %bb80 ]
  %v1_117c8 = add i32 %v4_117d4, -1
  %v7_117c8 = icmp eq i32 %v4_117d4, 1
  br i1 %v7_117c8, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_117cc = icmp eq i32 %v1_117cc, %v4_117d4
  br i1 %v10_117cc, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_117cc = icmp ult i32 %v1_117cc, %v4_117d4
  br i1 %v4_117cc, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_117d4 = and i32 %v1_117c8, %v4_117d4
  %v8_117d4 = icmp eq i32 %v6_117d4, 0
  br i1 %v8_117d4, label %.thread72, label %dec_label_pc_117e4.preheader

dec_label_pc_117e4.preheader:                     ; preds = %bb84
  %v2_117e4109 = icmp ugt i32 %v4_117d4, 268435455
  br i1 %v2_117e4109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_117d864 = phi i32 [ %v1_117cc, %bb84 ], [ 0, %.thread70 ]
  %v3_117d8 = and i32 %v1_117d864, %v1_117c8
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_117e4.preheader
  %v0_117f8.pr35.lcssa = phi i32 [ %v4_117d4, %dec_label_pc_117e4.preheader ], [ %v4_117ec, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_117e4.preheader ], [ %v2_117f09, %.thread2.thread7 ]
  br label %dec_label_pc_117f8thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_117e4.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_117f09, %.thread2.thread7 ], [ 0, %dec_label_pc_117e4.preheader ]
  %v0_117f8.pr35110 = phi i32 [ %v4_117ec, %.thread2.thread7 ], [ %v4_117d4, %dec_label_pc_117e4.preheader ]
  %v4_117e8 = icmp ult i32 %v0_117f8.pr35110, %v1_117cc
  br i1 %v4_117e8, label %bb86, label %dec_label_pc_117f8thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_117ec = and i32 %v0_117f8.pr35110, 268435456
  %v3_117ec = icmp eq i32 %v2_117ec, 0
  %v4_117ec = mul i32 %v0_117f8.pr35110, 16
  br i1 %v3_117ec, label %.thread2.thread7, label %dec_label_pc_117f8.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_117f09 = add i32 %storemerge111, 4
  %v2_117e4 = icmp ugt i32 %v4_117ec, 268435455
  br i1 %v2_117e4, label %.thread1, label %bb85

dec_label_pc_117f8thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_117f8thread-pre-split.loopexit

dec_label_pc_117f8thread-pre-split.loopexit:      ; preds = %dec_label_pc_117f8thread-pre-split.loopexit.loopexit, %.thread1
  %v0_117f8.pr35108 = phi i32 [ %v0_117f8.pr35.lcssa, %.thread1 ], [ %v0_117f8.pr35110, %dec_label_pc_117f8thread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_117f8thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_117f8thread-pre-split

dec_label_pc_117f8thread-pre-split:               ; preds = %.thread4, %dec_label_pc_117f8thread-pre-split.loopexit
  %v1_1180441 = phi i32 [ %storemerge105, %dec_label_pc_117f8thread-pre-split.loopexit ], [ %v2_11804, %.thread4 ]
  %v2_117fc36 = phi i32 [ %v1_117cc, %dec_label_pc_117f8thread-pre-split.loopexit ], [ %v2_117fc, %.thread4 ]
  %v0_117f8.pr = phi i32 [ %v0_117f8.pr35108, %dec_label_pc_117f8thread-pre-split.loopexit ], [ %v3_11800, %.thread4 ]
  br label %dec_label_pc_117f8

dec_label_pc_117f8.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_117f8

dec_label_pc_117f8:                               ; preds = %dec_label_pc_117f8.loopexit, %dec_label_pc_117f8thread-pre-split
  %v0_1180c.pr = phi i32 [ %v1_1180441, %dec_label_pc_117f8thread-pre-split ], [ %storemerge111, %dec_label_pc_117f8.loopexit ]
  %v2_117fc = phi i32 [ %v2_117fc36, %dec_label_pc_117f8thread-pre-split ], [ %v1_117cc, %dec_label_pc_117f8.loopexit ]
  %v1_11800 = phi i32 [ %v0_117f8.pr, %dec_label_pc_117f8thread-pre-split ], [ %v4_117ec, %dec_label_pc_117f8.loopexit ]
  %v2_117f8 = icmp slt i32 %v1_11800, 0
  br i1 %v2_117f8, label %dec_label_pc_1180c, label %bb87

bb87:                                             ; preds = %dec_label_pc_117f8
  %v4_117fc = icmp ult i32 %v1_11800, %v2_117fc
  br i1 %v4_117fc, label %.thread4, label %dec_label_pc_1180c

.thread4:                                         ; preds = %bb87
  %v3_11800 = mul i32 %v1_11800, 2
  %v2_11804 = add i32 %v0_1180c.pr, 1
  br label %dec_label_pc_117f8thread-pre-split

dec_label_pc_1180c:                               ; preds = %bb87, %dec_label_pc_117f8
  %v2_1180c = add i32 %v0_1180c.pr, -3
  %v5_11810 = icmp slt i32 %v0_1180c.pr, 3
  br i1 %v5_11810, label %dec_label_pc_11850, label %dec_label_pc_11814

dec_label_pc_11814:                               ; preds = %dec_label_pc_1180c, %bb91
  %v6_1183c = phi i32 [ %v0_11844, %bb91 ], [ %v2_1180c, %dec_label_pc_1180c ]
  %v1_11818 = phi i32 [ %v1_11820.v6_11820.v6_11828.v6_11830, %bb91 ], [ %v2_117fc, %dec_label_pc_1180c ]
  %v3_1183810 = phi i32 [ %v3_11838, %bb91 ], [ %v1_11800, %dec_label_pc_1180c ]
  %v3_11814 = icmp ult i32 %v1_11818, %v3_1183810
  %v3_11818 = select i1 %v3_11814, i32 0, i32 %v3_1183810
  %v1_11820 = sub i32 %v1_11818, %v3_11818
  %v4_1181c = udiv i32 %v3_1183810, 2
  %v6_1181c = icmp ult i32 %v1_11820, %v4_1181c
  %v6_11820 = select i1 %v6_1181c, i32 0, i32 %v4_1181c
  %v1_11820.v6_11820 = sub i32 %v1_11820, %v6_11820
  %.demorgan = and i1 %v3_11814, %v6_1181c
  %v4_11824 = udiv i32 %v3_1183810, 4
  %v6_11824 = icmp ult i32 %v1_11820.v6_11820, %v4_11824
  %v6_11828 = select i1 %v6_11824, i32 0, i32 %v4_11824
  %v1_11820.v6_11820.v6_11828 = sub i32 %v1_11820.v6_11820, %v6_11828
  %.demorgan76 = and i1 %.demorgan, %v6_11824
  %v4_1182c = udiv i32 %v3_1183810, 8
  %v6_1182c = icmp ult i32 %v1_11820.v6_11820.v6_11828, %v4_1182c
  %v6_11830 = select i1 %v6_1182c, i32 0, i32 %v4_1182c
  %v1_11820.v6_11820.v6_11828.v6_11830 = sub i32 %v1_11820.v6_11820.v6_11828, %v6_11830
  %.demorgan77 = and i1 %.demorgan76, %v6_1182c
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_11814
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_11814, %bb88
  %v2_11834 = add i32 %v1_11820.v6_11820.v6_11828.v6_11830, -1
  %v4_11834 = sub i32 0, %v1_11820.v6_11820.v6_11828.v6_11830
  %v5_11834 = and i32 %v1_11820.v6_11820.v6_11828.v6_11830, %v4_11834
  %v3_11838 = udiv i32 %v3_1183810, 16
  %v5_1183c = icmp slt i32 %v1_11820.v6_11820.v6_11828.v6_11830, 1
  br i1 %v5_1183c, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_1183c = add i32 %v6_1183c, -4
  %v9_1183c = sub i32 3, %v6_1183c
  %v10_1183c = and i32 %v9_1183c, %v6_1183c
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_11844 = phi i32 [ %v6_1183c, %bb89 ], [ %v7_1183c, %bb90 ]
  %v0_1184013.in = phi i32 [ %v2_11834, %bb89 ], [ %v7_1183c, %bb90 ]
  %v1_1184012.in = phi i32 [ %v5_11834, %bb89 ], [ %v10_1183c, %bb90 ]
  %v1_1184012 = icmp slt i32 %v1_1184012.in, 0
  %v0_1184013 = icmp slt i32 %v0_1184013.in, 0
  %v2_11840 = xor i1 %v0_1184013, %v1_1184012
  br i1 %v2_11840, label %dec_label_pc_11844, label %dec_label_pc_11814

dec_label_pc_11844:                               ; preds = %bb91
  %v1_11844 = urem i32 %v0_11844, 4
  %v2_11844 = icmp eq i32 %v1_11844, 0
  br i1 %v2_11844, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_11844
  %v3_11848 = icmp eq i32 %v1_11820.v6_11820.v6_11828.v6_11830, 0
  br i1 %v3_11848, label %.thread6, label %dec_label_pc_11850

dec_label_pc_11850:                               ; preds = %bb92, %dec_label_pc_1180c
  %v0_11864 = phi i32 [ %v3_11838, %bb92 ], [ %v1_11800, %dec_label_pc_1180c ]
  %v1_11860 = phi i32 [ %v1_11820.v6_11820.v6_11828.v6_11830, %bb92 ], [ %v2_117fc, %dec_label_pc_1180c ]
  %v0_11850 = phi i32 [ %v0_11844, %bb92 ], [ %v2_1180c, %dec_label_pc_1180c ]
  %v5_11854 = icmp slt i32 %v0_11850, -2
  br i1 %v5_11854, label %dec_label_pc_11874, label %dec_label_pc_11858

dec_label_pc_11858:                               ; preds = %dec_label_pc_11850
  %v8_11850 = icmp eq i32 %v0_11850, -2
  br i1 %v8_11850, label %dec_label_pc_11868, label %dec_label_pc_1185c

dec_label_pc_1185c:                               ; preds = %dec_label_pc_11858
  %v3_1185c = icmp ult i32 %v1_11860, %v0_11864
  br i1 %v3_1185c, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_1185c
  %v2_1185c = sub i32 %v1_11860, %v0_11864
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_1185c, %bb93
  %v0_1186854 = phi i32 [ %v1_11860, %dec_label_pc_1185c ], [ %v2_1185c, %bb93 ]
  %v3_11864 = udiv i32 %v0_11864, 2
  br label %dec_label_pc_11868

dec_label_pc_11868:                               ; preds = %dec_label_pc_11858, %bb94
  %v0_11870 = phi i32 [ %v0_11864, %dec_label_pc_11858 ], [ %v3_11864, %bb94 ]
  %v1_1186c = phi i32 [ %v1_11860, %dec_label_pc_11858 ], [ %v0_1186854, %bb94 ]
  %v3_11868 = icmp ult i32 %v1_1186c, %v0_11870
  br i1 %v3_11868, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_11868
  %v2_11868 = sub i32 %v1_1186c, %v0_11870
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_11868, %bb95
  %v0_1187457 = phi i32 [ %v1_1186c, %dec_label_pc_11868 ], [ %v2_11868, %bb95 ]
  %v3_11870 = udiv i32 %v0_11870, 2
  br label %dec_label_pc_11874

dec_label_pc_11874:                               ; preds = %dec_label_pc_11850, %bb96
  %v2_11878 = phi i32 [ %v0_11864, %dec_label_pc_11850 ], [ %v3_11870, %bb96 ]
  %v1_11878 = phi i32 [ %v1_11860, %dec_label_pc_11850 ], [ %v0_1187457, %bb96 ]
  %v3_11874 = icmp ult i32 %v1_11878, %v2_11878
  br i1 %v3_11874, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_11874
  %v2_11874 = sub i32 %v1_11878, %v2_11878
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_11874, %bb83, %.thread72, %dec_label_pc_11844, %bb92, %bb97
  %v1_11880 = phi i32 [ %v1_11820.v6_11820.v6_11828.v6_11830, %dec_label_pc_11844 ], [ 0, %bb92 ], [ %v1_11878, %dec_label_pc_11874 ], [ %v2_11874, %bb97 ], [ %v3_117d8, %.thread72 ], [ %v1_117cc, %bb83 ]
  br i1 %v1_117c0, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_11880 = sub i32 0, %v1_11880
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_11884 = phi i32 [ %v1_11880, %.thread6 ], [ %v2_11880, %bb98 ]
  ret i32 %v1_11884

dec_label_pc_11888:                               ; preds = %dec_label_pc_117b4
  %v0_11888 = load i32, i32* @lr, align 4
  %v0_1188c = call i32 @function_11898()
  call void @__pseudo_branch(i32 %v0_11888)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_11864, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11844, { 1, 0, 2 }
  uselistorder i32 %v7_1183c, { 1, 0 }
  uselistorder i32 %v3_11838, { 1, 0 }
  uselistorder i32 %v1_11820.v6_11820.v6_11828.v6_11830, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_1182c, { 1, 0 }
  uselistorder i32 %v4_11824, { 1, 0 }
  uselistorder i32 %v4_1181c, { 1, 0 }
  uselistorder i32 %v6_1183c, { 3, 0, 2, 1 }
  uselistorder i32 %v2_1180c, { 1, 0 }
  uselistorder i32 %v1_11800, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_117fc, { 1, 0, 3, 2 }
  uselistorder i32 %v4_117ec, { 1, 0, 3, 2 }
  uselistorder i32 %v0_117f8.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_117cc, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_117d4, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @function_11898, { 2, 1, 0 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_11874, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_11868, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_11814, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @function_11898() local_unnamed_addr {
dec_label_pc_11898:
  %v1_11898 = load i32, i32* @r0, align 4
  ret i32 %v1_11898
}

define i32 @function_1189c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1189c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_1189c = load i32, i32* @r2, align 4
  %v1_118ac = add i32 %arg2, -12
  store i32 %v6_1189c, i32* @r3, align 4
  %tmp = icmp ugt i32 %v1_118ac, 2
  br i1 %tmp, label %dec_label_pc_118d4, label %dec_label_pc_118cc

dec_label_pc_118cc:                               ; preds = %dec_label_pc_1189c
  %v0_118cc = call i32 @function_11910()
  br label %dec_label_pc_11900

dec_label_pc_118d4:                               ; preds = %dec_label_pc_1189c
  %v2_118dc = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_118dc, i32* %r4.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_118dc, -4095
  br i1 %tmp8, label %dec_label_pc_11900, label %dec_label_pc_118ec

dec_label_pc_118ec:                               ; preds = %dec_label_pc_118d4
  %v0_118ec = call i32 @function_11f08()
  %v0_118f0 = load i32, i32* %r4.global-to-local, align 4
  %v1_118f0 = sub i32 0, %v0_118f0
  %v2_118f4 = inttoptr i32 %v0_118ec to i32*
  store i32 %v1_118f0, i32* %v2_118f4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11900

dec_label_pc_11900:                               ; preds = %dec_label_pc_118ec, %dec_label_pc_118d4, %dec_label_pc_118cc
  %storemerge = phi i32 [ %v0_118cc, %dec_label_pc_118cc ], [ %v2_118dc, %dec_label_pc_118d4 ], [ -1, %dec_label_pc_118ec ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_118dc, { 1, 0, 2 }
}

define i32 @function_11910() local_unnamed_addr {
dec_label_pc_11910:
  %r4.global-to-local = alloca i32, align 4
  %v0_11930 = load i32, i32* @r0, align 4
  store i32 %v0_11930, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11930, -4095
  br i1 %tmp, label %dec_label_pc_1194c, label %dec_label_pc_1193c

dec_label_pc_1193c:                               ; preds = %dec_label_pc_11910
  %v0_1193c = call i32 @function_11f08()
  %v0_11940 = load i32, i32* %r4.global-to-local, align 4
  %v1_11940 = sub i32 0, %v0_11940
  %v2_11944 = inttoptr i32 %v0_1193c to i32*
  store i32 %v1_11940, i32* %v2_11944, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1194c

dec_label_pc_1194c:                               ; preds = %dec_label_pc_11910, %dec_label_pc_1193c
  %v0_1194c = phi i32 [ %v0_11930, %dec_label_pc_11910 ], [ -1, %dec_label_pc_1193c ]
  ret i32 %v0_1194c

; uselistorder directives
  uselistorder i32 %v0_11930, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1194c, { 1, 0 }
}

define i32 @function_11960(i32 %arg1) local_unnamed_addr {
dec_label_pc_11960:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11960 = load i32, i32* @r4, align 4
  store i32 %v3_11960, i32* %stack_var_-8, align 4
  %v1_11964 = call i32 @close(i32 %arg1)
  store i32 %v1_11964, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v1_11964, -4095
  br i1 %tmp, label %dec_label_pc_11984, label %dec_label_pc_11974

dec_label_pc_11974:                               ; preds = %dec_label_pc_11960
  %v0_11974 = call i32 @function_11f08()
  %v0_11978 = load i32, i32* %r4.global-to-local, align 4
  %v1_11978 = sub i32 0, %v0_11978
  %v2_1197c = inttoptr i32 %v0_11974 to i32*
  store i32 %v1_11978, i32* %v2_1197c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11984

dec_label_pc_11984:                               ; preds = %dec_label_pc_11960, %dec_label_pc_11974
  %v0_11984 = phi i32 [ %v1_11964, %dec_label_pc_11960 ], [ -1, %dec_label_pc_11974 ]
  %v2_11988 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11988, i32* @r4, align 4
  ret i32 %v0_11984

; uselistorder directives
  uselistorder i32 %v1_11964, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11984, { 1, 0 }
}

define i32 @function_1198c() local_unnamed_addr {
dec_label_pc_1198c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1198c = load i32, i32* @r4, align 4
  store i32 %v3_1198c, i32* %stack_var_-8, align 4
  %v0_11990 = call i32 @fork()
  store i32 %v0_11990, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11990, -4095
  br i1 %tmp, label %dec_label_pc_119b0, label %dec_label_pc_119a0

dec_label_pc_119a0:                               ; preds = %dec_label_pc_1198c
  %v0_119a0 = call i32 @function_11f08()
  %v0_119a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_119a4 = sub i32 0, %v0_119a4
  %v2_119a8 = inttoptr i32 %v0_119a0 to i32*
  store i32 %v1_119a4, i32* %v2_119a8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_119b0

dec_label_pc_119b0:                               ; preds = %dec_label_pc_1198c, %dec_label_pc_119a0
  %v0_119b0 = phi i32 [ %v0_11990, %dec_label_pc_1198c ], [ -1, %dec_label_pc_119a0 ]
  %v2_119b4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_119b4, i32* @r4, align 4
  ret i32 %v0_119b0

; uselistorder directives
  uselistorder i32 %v0_11990, { 1, 0, 2 }
  uselistorder label %dec_label_pc_119b0, { 1, 0 }
}

define i32 @function_119b8() local_unnamed_addr {
dec_label_pc_119b8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_119b8 = load i32, i32* @r4, align 4
  store i32 %v3_119b8, i32* %stack_var_-8, align 4
  %v0_119bc = call i32 @getpid()
  store i32 %v0_119bc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_119bc, -4095
  br i1 %tmp, label %dec_label_pc_119dc, label %dec_label_pc_119cc

dec_label_pc_119cc:                               ; preds = %dec_label_pc_119b8
  %v0_119cc = call i32 @function_11f08()
  %v0_119d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_119d0 = sub i32 0, %v0_119d0
  %v2_119d4 = inttoptr i32 %v0_119cc to i32*
  store i32 %v1_119d0, i32* %v2_119d4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_119dc

dec_label_pc_119dc:                               ; preds = %dec_label_pc_119b8, %dec_label_pc_119cc
  %v0_119dc = phi i32 [ %v0_119bc, %dec_label_pc_119b8 ], [ -1, %dec_label_pc_119cc ]
  %v2_119e0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_119e0, i32* @r4, align 4
  ret i32 %v0_119dc

; uselistorder directives
  uselistorder i32 %v0_119bc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_119dc, { 1, 0 }
}

define i32 @function_119e4() local_unnamed_addr {
dec_label_pc_119e4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_119e4 = load i32, i32* @r4, align 4
  store i32 %v3_119e4, i32* %stack_var_-8, align 4
  %v0_119e8 = call i32 @getppid()
  store i32 %v0_119e8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_119e8, -4095
  br i1 %tmp, label %dec_label_pc_11a08, label %dec_label_pc_119f8

dec_label_pc_119f8:                               ; preds = %dec_label_pc_119e4
  %v0_119f8 = call i32 @function_11f08()
  %v0_119fc = load i32, i32* %r4.global-to-local, align 4
  %v1_119fc = sub i32 0, %v0_119fc
  %v2_11a00 = inttoptr i32 %v0_119f8 to i32*
  store i32 %v1_119fc, i32* %v2_11a00, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11a08

dec_label_pc_11a08:                               ; preds = %dec_label_pc_119e4, %dec_label_pc_119f8
  %v0_11a08 = phi i32 [ %v0_119e8, %dec_label_pc_119e4 ], [ -1, %dec_label_pc_119f8 ]
  %v2_11a0c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11a0c, i32* @r4, align 4
  ret i32 %v0_11a08

; uselistorder directives
  uselistorder i32 %v0_119e8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11a08, { 1, 0 }
}

define i32 @function_11a10(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11a10:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_11a10 = load i32, i32* @r3, align 4
  store i32 %v9_11a10, i32* %stack_var_-4, align 4
  %v2_11a1c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_11a1c, i32* @r3, align 4
  %v2_11a2c = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v2_11a2c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_11a2c, -4095
  br i1 %tmp, label %dec_label_pc_11a4c, label %dec_label_pc_11a3c

dec_label_pc_11a3c:                               ; preds = %dec_label_pc_11a10
  %v0_11a3c = call i32 @function_11f08()
  %v0_11a40 = load i32, i32* %r4.global-to-local, align 4
  %v1_11a40 = sub i32 0, %v0_11a40
  store i32 %v1_11a40, i32* @r3, align 4
  %v2_11a44 = inttoptr i32 %v0_11a3c to i32*
  store i32 %v1_11a40, i32* %v2_11a44, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11a4c

dec_label_pc_11a4c:                               ; preds = %dec_label_pc_11a10, %dec_label_pc_11a3c
  %v0_11a4c = phi i32 [ %v2_11a2c, %dec_label_pc_11a10 ], [ -1, %dec_label_pc_11a3c ]
  ret i32 %v0_11a4c

; uselistorder directives
  uselistorder i32 %v2_11a2c, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder label %dec_label_pc_11a4c, { 1, 0 }
}

define i32 @function_11a60(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11a60:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11a60 = load i32, i32* @r4, align 4
  store i32 %v3_11a60, i32* %stack_var_-8, align 4
  %v2_11a64 = call i32 @kill(i32 %arg1, i32 %arg2)
  %v7_11a68 = icmp eq i32 %v2_11a64, -4096
  store i1 %v7_11a68, i1* @cpsr_z, align 1
  store i32 %v2_11a64, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_11a64, -4095
  br i1 %tmp, label %dec_label_pc_11a84, label %dec_label_pc_11a74

dec_label_pc_11a74:                               ; preds = %dec_label_pc_11a60
  %v0_11a74 = call i32 @function_11f08()
  %v0_11a78 = load i32, i32* %r4.global-to-local, align 4
  %v1_11a78 = sub i32 0, %v0_11a78
  %v2_11a7c = inttoptr i32 %v0_11a74 to i32*
  store i32 %v1_11a78, i32* %v2_11a7c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11a84

dec_label_pc_11a84:                               ; preds = %dec_label_pc_11a60, %dec_label_pc_11a74
  %v0_11a84 = phi i32 [ %v2_11a64, %dec_label_pc_11a60 ], [ -1, %dec_label_pc_11a74 ]
  %v2_11a88 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11a88, i32* @r4, align 4
  ret i32 %v0_11a84

; uselistorder directives
  uselistorder i32 %v2_11a64, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_11a84, { 1, 0 }
}

define i32 @function_11a8c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11a8c:
  %r4.global-to-local = alloca i32, align 4
  %v6_11a8c = load i32, i32* @r2, align 4
  %v1_11a9c = and i32 %arg2, 64
  store i32 %v1_11a9c, i32* @r3, align 4
  %v2_11a9c = icmp eq i32 %v1_11a9c, 0
  br i1 %v2_11a9c, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_11a8c
  store i32 %v6_11a8c, i32* @r3, align 4
  %phitmp = urem i32 %v6_11a8c, 65536
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_11a8c, %bb
  %v0_11aac = phi i32 [ 0, %dec_label_pc_11a8c ], [ %phitmp, %bb ]
  store i32 %v0_11aac, i32* @r2, align 4
  %v4_11ab4 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  %v7_11ab8 = icmp eq i32 %v4_11ab4, -4096
  store i1 %v7_11ab8, i1* @cpsr_z, align 1
  store i32 %v4_11ab4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_11ab4, -4095
  br i1 %tmp, label %dec_label_pc_11ad4, label %dec_label_pc_11ac4

dec_label_pc_11ac4:                               ; preds = %.thread1
  %v0_11ac4 = call i32 @function_11f08()
  %v0_11ac8 = load i32, i32* %r4.global-to-local, align 4
  %v1_11ac8 = sub i32 0, %v0_11ac8
  store i32 %v1_11ac8, i32* @r3, align 4
  %v2_11acc = inttoptr i32 %v0_11ac4 to i32*
  store i32 %v1_11ac8, i32* %v2_11acc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11ad4

dec_label_pc_11ad4:                               ; preds = %.thread1, %dec_label_pc_11ac4
  %v0_11ad4 = phi i32 [ %v4_11ab4, %.thread1 ], [ -1, %dec_label_pc_11ac4 ]
  ret i32 %v0_11ad4

; uselistorder directives
  uselistorder i32 %v4_11ab4, { 2, 0, 3, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_11ad4, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_11ae8(i32 %arg1) local_unnamed_addr {
dec_label_pc_11ae8:
  store i32 %arg1, i32* @r2, align 4
  %v0_11af0 = load i32, i32* @r0, align 4
  %v2_11af0 = inttoptr i32 %v0_11af0 to i8*
  %v3_11af0 = call i32 @function_11a8c(i8* %v2_11af0, i32 577)
  %v0_11af4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11af4, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_11ae8
  %v6_11af4 = and i32 %v3_11af0, 36
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_11ae8, %bb
  %v7_11af4 = phi i32 [ %v3_11af0, %dec_label_pc_11ae8 ], [ %v6_11af4, %bb ]
  ret i32 %v7_11af4

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_11af8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11af8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11af8 = load i32, i32* @r4, align 4
  store i32 %v3_11af8, i32* %stack_var_-8, align 4
  %v2_11b00 = load i32, i32* @r2, align 4
  %v3_11b00 = load i32, i32* @r3, align 4
  %v4_11b00 = call i32 @prctl(i32 %arg1, i32 %arg2, i32 %v2_11b00, i32 %v3_11b00, i32 0)
  store i32 %v4_11b00, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_11b00, -4095
  br i1 %tmp, label %dec_label_pc_11b20, label %dec_label_pc_11b10

dec_label_pc_11b10:                               ; preds = %dec_label_pc_11af8
  %v0_11b10 = call i32 @function_11f08()
  %v0_11b14 = load i32, i32* %r4.global-to-local, align 4
  %v1_11b14 = sub i32 0, %v0_11b14
  %v2_11b18 = inttoptr i32 %v0_11b10 to i32*
  store i32 %v1_11b14, i32* %v2_11b18, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11b20

dec_label_pc_11b20:                               ; preds = %dec_label_pc_11af8, %dec_label_pc_11b10
  %v0_11b20 = phi i32 [ %v4_11b00, %dec_label_pc_11af8 ], [ -1, %dec_label_pc_11b10 ]
  %v2_11b24 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11b24, i32* @r4, align 4
  ret i32 %v0_11b20

; uselistorder directives
  uselistorder i32 %v4_11b00, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11b20, { 1, 0 }
}

define i32 @function_11b28(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11b28:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11b28 = load i32, i32* @r4, align 4
  store i32 %v3_11b28, i32* %stack_var_-8, align 4
  %v4_11b2c = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_11b2c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_11b2c, -4095
  br i1 %tmp, label %dec_label_pc_11b4c, label %dec_label_pc_11b3c

dec_label_pc_11b3c:                               ; preds = %dec_label_pc_11b28
  %v0_11b3c = call i32 @function_11f08()
  %v0_11b40 = load i32, i32* %r4.global-to-local, align 4
  %v1_11b40 = sub i32 0, %v0_11b40
  %v2_11b44 = inttoptr i32 %v0_11b3c to i32*
  store i32 %v1_11b40, i32* %v2_11b44, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11b4c

dec_label_pc_11b4c:                               ; preds = %dec_label_pc_11b28, %dec_label_pc_11b3c
  %v0_11b4c = phi i32 [ %v4_11b2c, %dec_label_pc_11b28 ], [ -1, %dec_label_pc_11b3c ]
  %v2_11b50 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11b50, i32* @r4, align 4
  ret i32 %v0_11b4c

; uselistorder directives
  uselistorder i32 %v4_11b2c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11b4c, { 1, 0 }
}

define i32 @function_11b54(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11b54:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v3_11b54 = load i32, i32* @r4, align 4
  store i32 %v3_11b54, i32* %stack_var_-8, align 4
  %v7_11b58 = call i32 @readlink(i8* %arg1, i8* %tmp, i32 %arg3)
  store i32 %v7_11b58, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v7_11b58, -4095
  br i1 %tmp6, label %dec_label_pc_11b78, label %dec_label_pc_11b68

dec_label_pc_11b68:                               ; preds = %dec_label_pc_11b54
  %v0_11b68 = call i32 @function_11f08()
  %v0_11b6c = load i32, i32* %r4.global-to-local, align 4
  %v1_11b6c = sub i32 0, %v0_11b6c
  %v2_11b70 = inttoptr i32 %v0_11b68 to i32*
  store i32 %v1_11b6c, i32* %v2_11b70, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11b78

dec_label_pc_11b78:                               ; preds = %dec_label_pc_11b54, %dec_label_pc_11b68
  %v0_11b78 = phi i32 [ %v7_11b58, %dec_label_pc_11b54 ], [ -1, %dec_label_pc_11b68 ]
  %v2_11b7c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11b7c, i32* @r4, align 4
  ret i32 %v0_11b78

; uselistorder directives
  uselistorder i32 %v7_11b58, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11b78, { 1, 0 }
}

define i32 @function_11b80(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11b80:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11b80 = load i32, i32* @r4, align 4
  store i32 %v3_11b80, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11ba8, label %dec_label_pc_11b98

dec_label_pc_11b98:                               ; preds = %dec_label_pc_11b80
  %v0_11b98 = call i32 @function_11f08()
  %v0_11b9c = load i32, i32* %r4.global-to-local, align 4
  %v1_11b9c = sub i32 0, %v0_11b9c
  %v2_11ba0 = inttoptr i32 %v0_11b98 to i32*
  store i32 %v1_11b9c, i32* %v2_11ba0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_11bac.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11ba8

dec_label_pc_11ba8:                               ; preds = %dec_label_pc_11b80, %dec_label_pc_11b98
  %v2_11bac = phi i32 [ %v3_11b80, %dec_label_pc_11b80 ], [ %v2_11bac.pre, %dec_label_pc_11b98 ]
  %v0_11ba8 = phi i32 [ %arg1, %dec_label_pc_11b80 ], [ -1, %dec_label_pc_11b98 ]
  store i32 %v2_11bac, i32* @r4, align 4
  ret i32 %v0_11ba8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11ba8, { 1, 0 }
}

define i32 @function_11bb0(i32 %arg1) local_unnamed_addr {
dec_label_pc_11bb0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11bb0 = load i32, i32* @r4, align 4
  store i32 %v3_11bb0, i32* %stack_var_-8, align 4
  %v0_11bb4 = call i32 @setsid()
  store i32 %v0_11bb4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11bb4, -4095
  br i1 %tmp, label %dec_label_pc_11bd4, label %dec_label_pc_11bc4

dec_label_pc_11bc4:                               ; preds = %dec_label_pc_11bb0
  %v0_11bc4 = call i32 @function_11f08()
  %v0_11bc8 = load i32, i32* %r4.global-to-local, align 4
  %v1_11bc8 = sub i32 0, %v0_11bc8
  %v2_11bcc = inttoptr i32 %v0_11bc4 to i32*
  store i32 %v1_11bc8, i32* %v2_11bcc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11bd4

dec_label_pc_11bd4:                               ; preds = %dec_label_pc_11bb0, %dec_label_pc_11bc4
  %v0_11bd4 = phi i32 [ %v0_11bb4, %dec_label_pc_11bb0 ], [ -1, %dec_label_pc_11bc4 ]
  %v2_11bd8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11bd8, i32* @r4, align 4
  ret i32 %v0_11bd4

; uselistorder directives
  uselistorder i32 %v0_11bb4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11bd4, { 1, 0 }
}

define i32 @function_11bdc(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11bdc:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11bdc = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v3_11bdc, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_11bdc
  %v3_11be45 = load i32, i32* @r4, align 4
  store i32 %v3_11be45, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11c04

bb:                                               ; preds = %dec_label_pc_11bdc
  %v3_11be4 = load i32, i32* @r4, align 4
  store i32 %v3_11be4, i32* %stack_var_-8, align 4
  %tmp12 = icmp ult i32 %arg1, 3
  br i1 %tmp12, label %dec_label_pc_11c04, label %dec_label_pc_11bf0

dec_label_pc_11bf0:                               ; preds = %bb
  %v0_11bf0 = call i32 @function_11f08()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_11bfc = inttoptr i32 %v0_11bf0 to i32*
  store i32 22, i32* %v2_11bfc, align 4
  %v0_11c28.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11c28

dec_label_pc_11c04:                               ; preds = %.thread, %bb
  %v7_11c04 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp)
  store i32 %v7_11c04, i32* %r4.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_11c04, -4095
  br i1 %tmp13, label %dec_label_pc_11c24, label %dec_label_pc_11c14

dec_label_pc_11c14:                               ; preds = %dec_label_pc_11c04
  %v0_11c14 = call i32 @function_11f08()
  %v0_11c18 = load i32, i32* %r4.global-to-local, align 4
  %v1_11c18 = sub i32 0, %v0_11c18
  %v2_11c1c = inttoptr i32 %v0_11c14 to i32*
  store i32 %v1_11c18, i32* %v2_11c1c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11c24

dec_label_pc_11c24:                               ; preds = %dec_label_pc_11c04, %dec_label_pc_11c14
  %v0_11c24 = phi i32 [ %v7_11c04, %dec_label_pc_11c04 ], [ -1, %dec_label_pc_11c14 ]
  store i32 %v0_11c24, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11c28

dec_label_pc_11c28:                               ; preds = %dec_label_pc_11bf0, %dec_label_pc_11c24
  %v0_11c28 = phi i32 [ %v0_11c28.pre, %dec_label_pc_11bf0 ], [ %v0_11c24, %dec_label_pc_11c24 ]
  %v2_11c2c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11c2c, i32* @r4, align 4
  ret i32 %v0_11c28

; uselistorder directives
  uselistorder i32 %v7_11c04, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_11c28, { 1, 0 }
  uselistorder label %dec_label_pc_11c24, { 1, 0 }
  uselistorder label %dec_label_pc_11c04, { 1, 0 }
}

define i32 @function_11c30(i32* %arg1) local_unnamed_addr {
dec_label_pc_11c30:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11c30 = load i32, i32* @r4, align 4
  store i32 %v3_11c30, i32* %stack_var_-8, align 4
  %v2_11c34 = call i32 @time(i32* %arg1)
  store i32 %v2_11c34, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_11c34, -4095
  br i1 %tmp, label %dec_label_pc_11c54, label %dec_label_pc_11c44

dec_label_pc_11c44:                               ; preds = %dec_label_pc_11c30
  %v0_11c44 = call i32 @function_11f08()
  %v0_11c48 = load i32, i32* %r4.global-to-local, align 4
  %v1_11c48 = sub i32 0, %v0_11c48
  %v2_11c4c = inttoptr i32 %v0_11c44 to i32*
  store i32 %v1_11c48, i32* %v2_11c4c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11c54

dec_label_pc_11c54:                               ; preds = %dec_label_pc_11c30, %dec_label_pc_11c44
  %v0_11c54 = phi i32 [ %v2_11c34, %dec_label_pc_11c30 ], [ -1, %dec_label_pc_11c44 ]
  %v2_11c58 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11c58, i32* @r4, align 4
  ret i32 %v0_11c54

; uselistorder directives
  uselistorder i32 %v2_11c34, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11c54, { 1, 0 }
}

define i32 @function_11c5c(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11c5c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11c5c = load i32, i32* @r4, align 4
  store i32 %v3_11c5c, i32* %stack_var_-8, align 4
  %v4_11c60 = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_11c60, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_11c60, -4095
  br i1 %tmp, label %dec_label_pc_11c80, label %dec_label_pc_11c70

dec_label_pc_11c70:                               ; preds = %dec_label_pc_11c5c
  %v0_11c70 = call i32 @function_11f08()
  %v0_11c74 = load i32, i32* %r4.global-to-local, align 4
  %v1_11c74 = sub i32 0, %v0_11c74
  %v2_11c78 = inttoptr i32 %v0_11c70 to i32*
  store i32 %v1_11c74, i32* %v2_11c78, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11c80

dec_label_pc_11c80:                               ; preds = %dec_label_pc_11c5c, %dec_label_pc_11c70
  %v0_11c80 = phi i32 [ %v4_11c60, %dec_label_pc_11c5c ], [ -1, %dec_label_pc_11c70 ]
  %v2_11c84 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11c84, i32* @r4, align 4
  ret i32 %v0_11c80

; uselistorder directives
  uselistorder i32 %v4_11c60, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11c80, { 1, 0 }
}

define i32 @function_11c88(i32* %arg1) local_unnamed_addr {
dec_label_pc_11c88:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11c88 = load i32, i32* @r4, align 4
  store i32 %v3_11c88, i32* %stack_var_-20, align 4
  %v6_11c88 = load i32, i32* @r5, align 4
  %v9_11c88 = load i32, i32* @r6, align 4
  %v12_11c88 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_11c90 = load i32, i32* %arg1, align 4
  store i32 %v2_11c90, i32* %r4.global-to-local, align 4
  %v2_11c94 = ptrtoint i32* %stack_var_-36 to i32
  %v1_11c98 = add i32 %tmp, 24
  store i32 %v1_11c98, i32* @r6, align 4
  %v3_11c9c = icmp eq i32 %v2_11c90, -1
  store i32 %v2_11c94, i32* @r7, align 4
  store i32 %v1_11c98, i32* %r2.global-to-local, align 4
  store i32 %v2_11c94, i32* @r0, align 4
  br i1 %v3_11c9c, label %dec_label_pc_11cb4, label %dec_label_pc_11cc8

dec_label_pc_11cb4:                               ; preds = %dec_label_pc_11c88
  %v0_11cb4 = call i32 @function_11f08()
  %v0_11cbc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11cbc, i32* %r2.global-to-local, align 4
  %v2_11cc0 = inttoptr i32 %v0_11cb4 to i32*
  store i32 9, i32* %v2_11cc0, align 4
  %v0_11d20.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11d20

dec_label_pc_11cc8:                               ; preds = %dec_label_pc_11c88
  %v8_11cd0 = call i32 @function_12f80(i32 %v2_11c94, i32 ptrtoint (i32* @global_var_12f78.360 to i32), i32 %v1_11c98, i32 77696, i32 %v3_11c88, i32 %v6_11c88, i32 %v9_11c88)
  %v1_11ce0 = call i32 @function_12f78()
  %v0_11cec = load i32, i32* @r5, align 4
  %v1_11cec = inttoptr i32 %v0_11cec to i32*
  %v2_11cec = load i32, i32* %v1_11cec, align 4
  store i32 %v2_11cec, i32* @r4, align 4
  store i32 %v2_11c94, i32* @r0, align 4
  store i32 -1, i32* %v1_11cec, align 4
  store i32 ptrtoint (i32* @global_var_11d04.364 to i32), i32* @lr, align 4
  %v8_11d00 = call i32 @function_12f80(i32 %v2_11c94, i32 1, i32 %v1_11c98, i32 77696, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_11d04 = load i32, i32* @r5, align 4
  %v1_11d04 = add i32 %v0_11d04, 12
  %v2_11d04 = inttoptr i32 %v1_11d04 to i32*
  %v3_11d04 = load i32, i32* %v2_11d04, align 4
  store i32 %v3_11d04, i32* @r0, align 4
  %v0_11d08 = call i32 @function_12590()
  %v0_11d0c = load i32, i32* @r5, align 4
  store i32 %v0_11d0c, i32* @r0, align 4
  %v0_11d10 = call i32 @function_12590()
  %v0_11d14 = load i32, i32* @r4, align 4
  %v1_11d18 = call i32 @function_11960(i32 %v0_11d14)
  store i32 %v1_11d18, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11d20

dec_label_pc_11d20:                               ; preds = %dec_label_pc_11cb4, %dec_label_pc_11cc8
  %v0_11d20 = phi i32 [ %v0_11d20.pre, %dec_label_pc_11cb4 ], [ %v1_11d18, %dec_label_pc_11cc8 ]
  %v2_11d28 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_11d28, i32* @r4, align 4
  store i32 %v6_11c88, i32* @r5, align 4
  store i32 %v9_11c88, i32* @r6, align 4
  store i32 %v12_11c88, i32* @r7, align 4
  ret i32 %v0_11d20

; uselistorder directives
  uselistorder i32 %v1_11c98, { 2, 1, 0, 3 }
  uselistorder i32 %v2_11c94, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v9_11c88, { 1, 0 }
  uselistorder i32 %v6_11c88, { 1, 0 }
  uselistorder label %dec_label_pc_11d20, { 1, 0 }
}

define i32 @function_11d3c(i32 %arg1) local_unnamed_addr {
dec_label_pc_11d3c:
  %r5.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-108 = alloca i32, align 4
  %v3_11d3c = load i32, i32* @r4, align 4
  %v9_11d3c = load i32, i32* @r6, align 4
  %v12_11d3c = load i32, i32* @r7, align 4
  %v0_11d48 = load i32, i32* @r0, align 4
  %v2_11d48 = inttoptr i32 %v0_11d48 to i8*
  %v3_11d48 = call i32 @function_11a8c(i8* %v2_11d48, i32 18432)
  store i32 %v3_11d48, i32* @r0, align 4
  store i32 %v3_11d48, i32* @r7, align 4
  %v1_11d4c = icmp slt i32 %v3_11d48, 0
  br i1 %v1_11d4c, label %.thread1, label %dec_label_pc_11d58

.thread1:                                         ; preds = %dec_label_pc_11d3c
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_11e28

dec_label_pc_11d58:                               ; preds = %dec_label_pc_11d3c
  %v2_11d44 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_11d44, i32* @r1, align 4
  %v0_11d5c = call i32 @function_133a4()
  %v1_11d60 = icmp slt i32 %v0_11d5c, 0
  br i1 %v1_11d60, label %dec_label_pc_11d80, label %dec_label_pc_11d68

dec_label_pc_11d68:                               ; preds = %dec_label_pc_11d58
  %v0_11d68 = load i32, i32* @r7, align 4
  store i32 1, i32* @r2, align 4
  %v2_11d74 = call i32 @function_1189c(i32 %v0_11d68, i32 2)
  %v1_11d78 = icmp slt i32 %v2_11d74, 0
  br i1 %v1_11d78, label %dec_label_pc_11d80, label %dec_label_pc_11da0

dec_label_pc_11d80:                               ; preds = %dec_label_pc_11d68, %dec_label_pc_11d58
  %v0_11d80 = call i32 @function_11f08()
  store i32 %v0_11d80, i32* %r5.global-to-local, align 4
  %v0_11d88 = load i32, i32* @r7, align 4
  %v1_11d8c = inttoptr i32 %v0_11d80 to i32*
  %v2_11d8c = load i32, i32* %v1_11d8c, align 4
  store i32 %v2_11d8c, i32* @r4, align 4
  %v1_11d90 = call i32 @function_11960(i32 %v0_11d88)
  store i32 0, i32* @r6, align 4
  %v0_11d98 = load i32, i32* @r4, align 4
  %v1_11d98 = load i32, i32* %r5.global-to-local, align 4
  %v2_11d98 = inttoptr i32 %v1_11d98 to i32*
  store i32 %v0_11d98, i32* %v2_11d98, align 4
  br label %dec_label_pc_11e28

dec_label_pc_11da0:                               ; preds = %dec_label_pc_11d68
  %v1_11da4 = call i32 @function_123e4(i32 48)
  store i32 %v1_11da4, i32* @r6, align 4
  %v2_11da8 = icmp eq i32 %v1_11da4, 0
  br i1 %v2_11da8, label %dec_label_pc_11df8, label %dec_label_pc_11db0

dec_label_pc_11db0:                               ; preds = %dec_label_pc_11da0
  store i32 0, i32* @r4, align 4
  %v2_11db4 = add i32 %v1_11da4, 16
  %v3_11db4 = inttoptr i32 %v2_11db4 to i32*
  store i32 0, i32* %v3_11db4, align 4
  %v2_11dbc = icmp ugt i32 %tmp, 511
  %v1_11dc0 = load i32, i32* @r6, align 4
  %v2_11dc0 = add i32 %v1_11dc0, 20
  %v3_11dc0 = inttoptr i32 %v2_11dc0 to i32*
  store i32 %tmp, i32* %v3_11dc0, align 4
  br i1 %v2_11dbc, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_11db0
  %v2_11dc8 = load i32, i32* @r6, align 4
  %v3_11dc8 = add i32 %v2_11dc8, 20
  %v4_11dc8 = inttoptr i32 %v3_11dc8 to i32*
  store i32 512, i32* %v4_11dc8, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11db0, %bb
  %v0_11dcc = load i32, i32* @r7, align 4
  %v1_11dcc = load i32, i32* @r6, align 4
  %v2_11dcc = inttoptr i32 %v1_11dcc to i32*
  store i32 %v0_11dcc, i32* %v2_11dcc, align 4
  %v0_11dd0 = load i32, i32* @r4, align 4
  %v1_11dd0 = load i32, i32* @r6, align 4
  %v2_11dd0 = add i32 %v1_11dd0, 8
  %v3_11dd0 = inttoptr i32 %v2_11dd0 to i32*
  store i32 %v0_11dd0, i32* %v3_11dd0, align 4
  %v0_11dd4 = load i32, i32* @r4, align 4
  %v1_11dd4 = load i32, i32* @r6, align 4
  %v2_11dd4 = add i32 %v1_11dd4, 4
  %v3_11dd4 = inttoptr i32 %v2_11dd4 to i32*
  store i32 %v0_11dd4, i32* %v3_11dd4, align 4
  %v0_11ddc = load i32, i32* @r6, align 4
  %v1_11ddc = add i32 %v0_11ddc, 20
  %v2_11ddc = inttoptr i32 %v1_11ddc to i32*
  %v3_11ddc = load i32, i32* %v2_11ddc, align 4
  %v2_11de0 = call i32 @function_12538(i32 1, i32 %v3_11ddc)
  %v2_11de4 = icmp eq i32 %v2_11de0, 0
  %v1_11de8 = load i32, i32* @r6, align 4
  %v2_11de8 = add i32 %v1_11de8, 12
  %v3_11de8 = inttoptr i32 %v2_11de8 to i32*
  store i32 %v2_11de0, i32* %v3_11de8, align 4
  br i1 %v2_11de4, label %dec_label_pc_11df0, label %dec_label_pc_11e14

dec_label_pc_11df0:                               ; preds = %.thread
  %v0_11df0 = load i32, i32* @r6, align 4
  store i32 %v0_11df0, i32* @r0, align 4
  %v0_11df4 = call i32 @function_12590()
  br label %dec_label_pc_11df8

dec_label_pc_11df8:                               ; preds = %dec_label_pc_11da0, %dec_label_pc_11df0
  %v0_11df8 = load i32, i32* @r7, align 4
  %v1_11dfc = call i32 @function_11960(i32 %v0_11df8)
  %v0_11e00 = call i32 @function_11f08()
  store i32 0, i32* @r6, align 4
  %v2_11e0c = inttoptr i32 %v0_11e00 to i32*
  store i32 12, i32* %v2_11e0c, align 4
  br label %dec_label_pc_11e28

dec_label_pc_11e14:                               ; preds = %.thread
  store i32 73256, i32* @lr, align 4
  %v1_11e24 = call i32 @function_12f78()
  br label %dec_label_pc_11e28

dec_label_pc_11e28:                               ; preds = %.thread1, %dec_label_pc_11df8, %dec_label_pc_11d80, %dec_label_pc_11e14
  %v0_11e28 = load i32, i32* @r6, align 4
  store i32 %v3_11d3c, i32* @r4, align 4
  store i32 %v9_11d3c, i32* @r6, align 4
  store i32 %v12_11d3c, i32* @r7, align 4
  ret i32 %v0_11e28

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_12538, { 39, 41, 40, 35, 20, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 6, 5, 2, 1, 0, 19, 18, 4, 3, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 38, 37, 36 }
  uselistorder i32 512, { 0, 5, 1, 2, 8, 6, 7, 9, 3, 10, 4, 11 }
  uselistorder i32 (i32)* @function_11960, { 19, 18, 17, 32, 36, 35, 31, 30, 34, 33, 29, 28, 22, 27, 26, 25, 24, 23, 3, 2, 21, 20, 16, 15, 5, 4, 14, 13, 12, 11, 10, 9, 8, 7, 6, 1, 0 }
  uselistorder label %dec_label_pc_11e28, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_11df8, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_11e38(i32* %arg1) local_unnamed_addr {
dec_label_pc_11e38:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_11e38 = load i32, i32* @r4, align 4
  %v6_11e38 = load i32, i32* @r5, align 4
  %v9_11e38 = load i32, i32* @lr, align 4
  %v1_11e3c = add i32 %tmp, 24
  store i32 %v1_11e3c, i32* @r4, align 4
  %v2_11e40 = ptrtoint i32* %stack_var_-28 to i32
  store i32 77696, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v2_11e40, i32* @r0, align 4
  store i32 %v1_11e3c, i32* %r2.global-to-local, align 4
  %v8_11e5c = call i32 @function_12f80(i32 %v2_11e40, i32 ptrtoint (i32* @global_var_12f78.360 to i32), i32 %v1_11e3c, i32 77696, i32 %v3_11e38, i32 %v6_11e38, i32 %v9_11e38)
  %v0_11e60 = load i32, i32* @r4, align 4
  store i32 %v0_11e60, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12f78.360 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_11e70.369 to i32), i32* @lr, align 4
  %v1_11e6c = call i32 @function_12f78()
  store i32 %v1_11e6c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11e70

dec_label_pc_11e70:                               ; preds = %dec_label_pc_11ea4, %dec_label_pc_11e38
  %v0_11e70 = load i32, i32* @r5, align 4
  %v1_11e70 = add i32 %v0_11e70, 4
  %v2_11e70 = inttoptr i32 %v1_11e70 to i32*
  %v3_11e70 = load i32, i32* %v2_11e70, align 4
  store i32 %v3_11e70, i32* %r2.global-to-local, align 4
  %v4_11e70 = add i32 %v0_11e70, 8
  %v5_11e70 = inttoptr i32 %v4_11e70 to i32*
  %v6_11e70 = load i32, i32* %v5_11e70, align 4
  store i32 %v6_11e70, i32* %r3.global-to-local, align 4
  %tmp8 = icmp ugt i32 %v6_11e70, %v3_11e70
  br i1 %tmp8, label %dec_label_pc_11ea4, label %dec_label_pc_11e7c

dec_label_pc_11e7c:                               ; preds = %dec_label_pc_11e70
  %v1_11e7c = inttoptr i32 %v0_11e70 to i32*
  %v2_11e7c = load i32, i32* %v1_11e7c, align 4
  store i32 %v2_11e7c, i32* @r0, align 4
  %v1_11e80 = add i32 %v0_11e70, 12
  %v2_11e80 = inttoptr i32 %v1_11e80 to i32*
  %v3_11e80 = load i32, i32* %v2_11e80, align 4
  %v1_11e84 = add i32 %v0_11e70, 20
  %v2_11e84 = inttoptr i32 %v1_11e84 to i32*
  %v3_11e84 = load i32, i32* %v2_11e84, align 4
  store i32 %v3_11e84, i32* @r2, align 4
  %v4_11e88 = call i32 @function_133f4(i32 %v2_11e7c, i32 %v3_11e80, i32 %v3_11e84, i32 %v6_11e70)
  store i32 %v4_11e88, i32* %r0.global-to-local, align 4
  %tmp7 = icmp slt i32 %v4_11e88, 1
  br i1 %tmp7, label %.thread, label %dec_label_pc_11e98

.thread:                                          ; preds = %dec_label_pc_11e7c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_11ed8

dec_label_pc_11e98:                               ; preds = %dec_label_pc_11e7c
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_11e9c = load i32, i32* @r5, align 4
  %v2_11e9c = add i32 %v1_11e9c, 4
  %v3_11e9c = inttoptr i32 %v2_11e9c to i32*
  store i32 0, i32* %v3_11e9c, align 4
  %v1_11ea0 = load i32, i32* @r5, align 4
  %v2_11ea0 = add i32 %v1_11ea0, 8
  %v3_11ea0 = inttoptr i32 %v2_11ea0 to i32*
  store i32 %v4_11e88, i32* %v3_11ea0, align 4
  %v0_11ea4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11ea4

dec_label_pc_11ea4:                               ; preds = %dec_label_pc_11e70, %dec_label_pc_11e98
  %v1_11ebc = phi i32 [ %v0_11e70, %dec_label_pc_11e70 ], [ %v0_11ea4.pre, %dec_label_pc_11e98 ]
  %v1_11ea4 = add i32 %v1_11ebc, 4
  %v2_11ea4 = inttoptr i32 %v1_11ea4 to i32*
  %v3_11ea4 = load i32, i32* %v2_11ea4, align 4
  store i32 %v3_11ea4, i32* %r2.global-to-local, align 4
  %v1_11ea8 = add i32 %v1_11ebc, 12
  %v2_11ea8 = inttoptr i32 %v1_11ea8 to i32*
  %v3_11ea8 = load i32, i32* %v2_11ea8, align 4
  store i32 %v3_11ea8, i32* %ip.global-to-local, align 4
  %v2_11eac = add i32 %v3_11ea8, %v3_11ea4
  store i32 %v2_11eac, i32* @r4, align 4
  %v1_11eb0 = add i32 %v2_11eac, 4
  %v2_11eb0 = inttoptr i32 %v1_11eb0 to i32*
  %v3_11eb0 = load i32, i32* %v2_11eb0, align 4
  %v1_11eb4 = add i32 %v2_11eac, 8
  %v2_11eb4 = inttoptr i32 %v1_11eb4 to i8*
  %v3_11eb4 = load i8, i8* %v2_11eb4, align 1
  %v4_11eb4 = zext i8 %v3_11eb4 to i32
  store i32 %v4_11eb4, i32* %r3.global-to-local, align 4
  %v1_11eb8 = add i32 %v2_11eac, 9
  %v2_11eb8 = inttoptr i32 %v1_11eb8 to i8*
  %v3_11eb8 = load i8, i8* %v2_11eb8, align 1
  %v4_11eb8 = zext i8 %v3_11eb8 to i32
  store i32 %v4_11eb8, i32* %r0.global-to-local, align 4
  %v2_11ebc = add i32 %v1_11ebc, 16
  %v3_11ebc = inttoptr i32 %v2_11ebc to i32*
  store i32 %v3_11eb0, i32* %v3_11ebc, align 4
  %v0_11ec0 = load i32, i32* %r2.global-to-local, align 4
  %v1_11ec0 = load i32, i32* %ip.global-to-local, align 4
  %v2_11ec0 = add i32 %v1_11ec0, %v0_11ec0
  %v3_11ec0 = inttoptr i32 %v2_11ec0 to i32*
  %v4_11ec0 = load i32, i32* %v3_11ec0, align 4
  %v0_11ec4 = load i32, i32* %r3.global-to-local, align 4
  %v1_11ec4 = load i32, i32* %r0.global-to-local, align 4
  %v4_11ec4 = mul i32 %v1_11ec4, 256
  %v5_11ec4 = or i32 %v4_11ec4, %v0_11ec4
  store i32 %v5_11ec4, i32* %r3.global-to-local, align 4
  %v2_11ec8 = add i32 %v5_11ec4, %v0_11ec0
  store i32 %v2_11ec8, i32* @r2, align 4
  %v2_11ecc = icmp eq i32 %v4_11ec0, 0
  %v1_11ed0 = load i32, i32* @r5, align 4
  %v2_11ed0 = add i32 %v1_11ed0, 4
  %v3_11ed0 = inttoptr i32 %v2_11ed0 to i32*
  store i32 %v2_11ec8, i32* %v3_11ed0, align 4
  br i1 %v2_11ecc, label %dec_label_pc_11e70, label %dec_label_pc_11ed8

dec_label_pc_11ed8:                               ; preds = %dec_label_pc_11ea4, %.thread
  store i32 %v2_11e40, i32* @r0, align 4
  store i32 77696, i32* %r3.global-to-local, align 4
  store i32 73452, i32* @lr, align 4
  %v3_11ee8 = load i32, i32* @r2, align 4
  %v8_11ee8 = call i32 @function_12f80(i32 %v2_11e40, i32 1, i32 %v3_11ee8, i32 77696, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_11eec = load i32, i32* @r4, align 4
  store i32 %v0_11eec, i32* %r0.global-to-local, align 4
  store i32 %v3_11e38, i32* @r4, align 4
  store i32 %v6_11e38, i32* @r5, align 4
  ret i32 %v0_11eec

; uselistorder directives
  uselistorder i32 %v1_11ebc, { 0, 2, 1 }
  uselistorder i32 %v6_11e70, { 1, 0, 2 }
  uselistorder i32 %v0_11e70, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %v2_11e40, { 1, 0, 3, 2 }
  uselistorder i32 %v1_11e3c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_11ea4, { 1, 0 }
}

define i32 @function_11f08() local_unnamed_addr {
dec_label_pc_11f08:
  ret i32 ptrtoint (i32* @global_var_1c930.372 to i32)
}

define i32 @function_11f14(i32 %arg1) local_unnamed_addr {
dec_label_pc_11f14:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %v1_11f20 = bitcast i32* %stack_var_-20 to %tms*
  %v2_11f20 = call i32 @function_13784(%tms* %v1_11f20)
  %v2_11f28 = load i32, i32* %stack_var_-20, align 4
  %v2_11f2c = add i32 %v2_11f28, %tmp
  %v2_11f34 = mul i32 %v2_11f2c, 10000
  %v1_11f38 = and i32 %v2_11f34, 2147483632
  ret i32 %v1_11f38

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @function_11f44(i32 %arg1) local_unnamed_addr {
dec_label_pc_11f44:
  %v0_11f44 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11f44, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_11f44
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_11f44, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_11f50(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11f50:
  %v0_11f50 = call i32 @function_13b90()
  ret i32 %v0_11f50
}

define i32 @function_11f60(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11f60:
  %v0_11f60 = call i32 @function_13b90()
  ret i32 %v0_11f60

; uselistorder directives
  uselistorder i32 ()* @function_13b90, { 1, 0 }
}

define i32 @function_11f70(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11f70:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v0_11f74 = load i32, i32* @r2, align 4
  %v8_11f74 = icmp eq i32 %v0_11f74, 8
  store i1 %v8_11f74, i1* %cpsr_z.global-to-local, align 1
  %v5_11f78 = icmp slt i32 %v0_11f74, 8
  br i1 %v5_11f78, label %dec_label_pc_11fd8, label %dec_label_pc_11f7c

dec_label_pc_11f7c:                               ; preds = %dec_label_pc_11f70
  %v4_11f7c = mul i32 %arg2, 256
  %v5_11f7c = or i32 %v4_11f7c, %arg2
  %v4_11f80 = mul i32 %v5_11f7c, 65536
  %v5_11f80 = or i32 %v4_11f80, %v5_11f7c
  store i32 %v5_11f80, i32* %r1.global-to-local, align 4
  %v1_11f8457 = urem i32 %tmp, 4
  %v2_11f8458 = icmp eq i32 %v1_11f8457, 0
  store i1 %v2_11f8458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_11f8458, label %dec_label_pc_11f94, label %bb

bb:                                               ; preds = %dec_label_pc_11f7c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_11f7c ]
  %v3_11f8859 = phi i32 [ %v6_11f88, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_11f7c ]
  %v4_11f88 = inttoptr i32 %v3_11f8859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_11f88, align 1
  %v5_11f88 = load i32, i32* %r3.global-to-local, align 4
  %v6_11f88 = add i32 %v5_11f88, 1
  store i32 %v6_11f88, i32* %r3.global-to-local, align 4
  %v0_11f8c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_11f98.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_11f8c.pr, label %dec_label_pc_11f94, label %.thread

.thread:                                          ; preds = %bb
  %v2_11f8c = add i32 %v0_11f98.pr.pre, -1
  store i32 %v2_11f8c, i32* @r2, align 4
  %v1_11f84 = urem i32 %v6_11f88, 4
  %v2_11f84 = icmp eq i32 %v1_11f84, 0
  store i1 %v2_11f84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11f84, label %dec_label_pc_11f94, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_11f88.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_11f88.pre to i8
  br label %bb

dec_label_pc_11f94:                               ; preds = %.thread, %bb, %dec_label_pc_11f7c
  %v0_11fa028 = phi i32 [ %tmp, %dec_label_pc_11f7c ], [ %v6_11f88, %bb ], [ %v6_11f88, %.thread ]
  %v0_11f98.pr = phi i32 [ %v0_11f74, %dec_label_pc_11f7c ], [ %v0_11f98.pr.pre, %bb ], [ %v2_11f8c, %.thread ]
  %v0_11f94 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_11f94, i32* %ip.global-to-local, align 4
  %v8_11f9810 = icmp eq i32 %v0_11f98.pr, 8
  store i1 %v8_11f9810, i1* %cpsr_z.global-to-local, align 1
  %v5_11f9c11 = icmp slt i32 %v0_11f98.pr, 8
  br i1 %v5_11f9c11, label %dec_label_pc_11fd8, label %dec_label_pc_11fa0.preheader

dec_label_pc_11fa0.preheader:                     ; preds = %dec_label_pc_11f94
  %v1_11fa046 = inttoptr i32 %v0_11fa028 to i32*
  store i32 %v0_11f94, i32* %v1_11fa046, align 4
  %v3_11fa047 = add i32 %v0_11fa028, 4
  %v4_11fa048 = inttoptr i32 %v3_11fa047 to i32*
  %v5_11fa049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11fa049, i32* %v4_11fa048, align 4
  %v6_11fa050 = add i32 %v0_11fa028, 8
  store i32 %v6_11fa050, i32* %r3.global-to-local, align 4
  %v0_11fa451 = load i32, i32* @r2, align 4
  %v1_11fa452 = add i32 %v0_11fa451, -8
  store i32 %v1_11fa452, i32* %r2.global-to-local, align 4
  %v5_11fac53 = icmp slt i32 %v1_11fa452, 8
  br i1 %v5_11fac53, label %dec_label_pc_11fa0.dec_label_pc_11fd8.loopexit_crit_edge, label %dec_label_pc_11fb0

dec_label_pc_11fb0:                               ; preds = %dec_label_pc_11fa0.preheader, %dec_label_pc_11f98.dec_label_pc_11fa0_crit_edge
  %v6_11fa055 = phi i32 [ %v6_11fa0, %dec_label_pc_11f98.dec_label_pc_11fa0_crit_edge ], [ %v6_11fa050, %dec_label_pc_11fa0.preheader ]
  %v0_11fa054 = phi i32 [ %v12_11fcc, %dec_label_pc_11f98.dec_label_pc_11fa0_crit_edge ], [ %v0_11fa028, %dec_label_pc_11fa0.preheader ]
  %v1_11fb0 = inttoptr i32 %v6_11fa055 to i32*
  %v2_11fb0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_11fb0, i32* %v1_11fb0, align 4
  %v3_11fb0 = add i32 %v0_11fa054, 12
  %v4_11fb0 = inttoptr i32 %v3_11fb0 to i32*
  %v5_11fb0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11fb0, i32* %v4_11fb0, align 4
  %v6_11fb0 = add i32 %v0_11fa054, 16
  store i32 %v6_11fb0, i32* %r3.global-to-local, align 4
  %v0_11fb4 = load i32, i32* %r2.global-to-local, align 4
  %v1_11fb4 = add i32 %v0_11fb4, -8
  store i32 %v1_11fb4, i32* %r2.global-to-local, align 4
  %v5_11fbc = icmp slt i32 %v1_11fb4, 8
  br i1 %v5_11fbc, label %dec_label_pc_11fb0.dec_label_pc_11fd8.loopexit_crit_edge, label %dec_label_pc_11fc0

dec_label_pc_11fc0:                               ; preds = %dec_label_pc_11fb0
  %v1_11fc0 = inttoptr i32 %v6_11fb0 to i32*
  %v2_11fc0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_11fc0, i32* %v1_11fc0, align 4
  %v3_11fc0 = add i32 %v0_11fa054, 20
  %v4_11fc0 = inttoptr i32 %v3_11fc0 to i32*
  %v5_11fc0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11fc0, i32* %v4_11fc0, align 4
  %v6_11fc0 = add i32 %v0_11fa054, 24
  store i32 %v6_11fc0, i32* %r3.global-to-local, align 4
  %v0_11fc4 = load i32, i32* %r2.global-to-local, align 4
  %v1_11fc4 = add i32 %v0_11fc4, -8
  store i32 %v1_11fc4, i32* %r2.global-to-local, align 4
  %v5_11fcc = icmp slt i32 %v1_11fc4, 8
  br i1 %v5_11fcc, label %dec_label_pc_11fc0.dec_label_pc_11fd8.loopexit_crit_edge, label %dec_label_pc_11f98

dec_label_pc_11f98:                               ; preds = %dec_label_pc_11fc0
  %v7_11fcc = inttoptr i32 %v6_11fc0 to i32*
  %v8_11fcc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_11fcc, i32* %v7_11fcc, align 4
  %v9_11fcc = add i32 %v0_11fa054, 28
  %v10_11fcc = inttoptr i32 %v9_11fcc to i32*
  %v11_11fcc = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_11fcc, i32* %v10_11fcc, align 4
  %v12_11fcc = add i32 %v0_11fa054, 32
  store i32 %v12_11fcc, i32* %r3.global-to-local, align 4
  %v6_11fd0 = load i32, i32* %r2.global-to-local, align 4
  %v7_11fd0 = add i32 %v6_11fd0, -8
  store i32 %v7_11fd0, i32* %r2.global-to-local, align 4
  %v5_11f9c = icmp slt i32 %v7_11fd0, 8
  br i1 %v5_11f9c, label %dec_label_pc_11f98.dec_label_pc_11fd8.loopexit_crit_edge, label %dec_label_pc_11f98.dec_label_pc_11fa0_crit_edge

dec_label_pc_11f98.dec_label_pc_11fa0_crit_edge:  ; preds = %dec_label_pc_11f98
  %v2_11fa0.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_11fa0 = inttoptr i32 %v12_11fcc to i32*
  store i32 %v2_11fa0.pre, i32* %v1_11fa0, align 4
  %v3_11fa0 = add i32 %v0_11fa054, 36
  %v4_11fa0 = inttoptr i32 %v3_11fa0 to i32*
  %v5_11fa0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11fa0, i32* %v4_11fa0, align 4
  %v6_11fa0 = add i32 %v0_11fa054, 40
  store i32 %v6_11fa0, i32* %r3.global-to-local, align 4
  %v0_11fa4 = load i32, i32* %r2.global-to-local, align 4
  %v1_11fa4 = add i32 %v0_11fa4, -8
  store i32 %v1_11fa4, i32* %r2.global-to-local, align 4
  %v5_11fac = icmp slt i32 %v1_11fa4, 8
  br i1 %v5_11fac, label %dec_label_pc_11fa0.dec_label_pc_11fd8.loopexit_crit_edge, label %dec_label_pc_11fb0

dec_label_pc_11fa0.dec_label_pc_11fd8.loopexit_crit_edge: ; preds = %dec_label_pc_11f98.dec_label_pc_11fa0_crit_edge, %dec_label_pc_11fa0.preheader
  %v1_11fa4.lcssa = phi i32 [ %v1_11fa452, %dec_label_pc_11fa0.preheader ], [ %v1_11fa4, %dec_label_pc_11f98.dec_label_pc_11fa0_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11fd8

dec_label_pc_11f98.dec_label_pc_11fd8.loopexit_crit_edge: ; preds = %dec_label_pc_11f98
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11fd8

dec_label_pc_11fb0.dec_label_pc_11fd8.loopexit_crit_edge: ; preds = %dec_label_pc_11fb0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11fd8

dec_label_pc_11fc0.dec_label_pc_11fd8.loopexit_crit_edge: ; preds = %dec_label_pc_11fc0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11fd8

dec_label_pc_11fd8:                               ; preds = %dec_label_pc_11f94, %dec_label_pc_11fa0.dec_label_pc_11fd8.loopexit_crit_edge, %dec_label_pc_11f98.dec_label_pc_11fd8.loopexit_crit_edge, %dec_label_pc_11fb0.dec_label_pc_11fd8.loopexit_crit_edge, %dec_label_pc_11fc0.dec_label_pc_11fd8.loopexit_crit_edge, %dec_label_pc_11f70
  %v0_11fe0 = phi i32 [ %v0_11f74, %dec_label_pc_11f70 ], [ %v1_11fc4, %dec_label_pc_11fc0.dec_label_pc_11fd8.loopexit_crit_edge ], [ %v1_11fb4, %dec_label_pc_11fb0.dec_label_pc_11fd8.loopexit_crit_edge ], [ %v7_11fd0, %dec_label_pc_11f98.dec_label_pc_11fd8.loopexit_crit_edge ], [ %v1_11fa4.lcssa, %dec_label_pc_11fa0.dec_label_pc_11fd8.loopexit_crit_edge ], [ %v0_11f98.pr, %dec_label_pc_11f94 ]
  %v2_11fd8 = icmp eq i32 %v0_11fe0, 0
  store i1 %v2_11fd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11fd8, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_11fd8
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_11fd8
  %v1_11fe0 = sub i32 7, %v0_11fe0
  store i32 %v1_11fe0, i32* %r2.global-to-local, align 4
  %v3_11fe4 = mul i32 %v1_11fe0, 4
  %v4_11fe4 = add i32 %v3_11fe4, ptrtoint (i32* @global_var_11fec.374 to i32)
  call void @__pseudo_branch(i32 %v4_11fe4)
  %v0_11fec = load i32, i32* %r1.global-to-local, align 4
  %v1_11fec = trunc i32 %v0_11fec to i8
  %v2_11fec = load i32, i32* %r3.global-to-local, align 4
  %v3_11fec = inttoptr i32 %v2_11fec to i8*
  store i8 %v1_11fec, i8* %v3_11fec, align 1
  %v4_11fec = load i32, i32* %r3.global-to-local, align 4
  %v5_11fec = add i32 %v4_11fec, 1
  store i32 %v5_11fec, i32* %r3.global-to-local, align 4
  %v0_11ff0 = load i32, i32* %r1.global-to-local, align 4
  %v1_11ff0 = trunc i32 %v0_11ff0 to i8
  %v3_11ff0 = inttoptr i32 %v5_11fec to i8*
  store i8 %v1_11ff0, i8* %v3_11ff0, align 1
  %v4_11ff0 = load i32, i32* %r3.global-to-local, align 4
  %v5_11ff0 = add i32 %v4_11ff0, 1
  store i32 %v5_11ff0, i32* %r3.global-to-local, align 4
  %v0_11ff4 = load i32, i32* %r1.global-to-local, align 4
  %v1_11ff4 = trunc i32 %v0_11ff4 to i8
  %v3_11ff4 = inttoptr i32 %v5_11ff0 to i8*
  store i8 %v1_11ff4, i8* %v3_11ff4, align 1
  %v4_11ff4 = load i32, i32* %r3.global-to-local, align 4
  %v5_11ff4 = add i32 %v4_11ff4, 1
  store i32 %v5_11ff4, i32* %r3.global-to-local, align 4
  %v0_11ff8 = load i32, i32* %r1.global-to-local, align 4
  %v1_11ff8 = trunc i32 %v0_11ff8 to i8
  %v3_11ff8 = inttoptr i32 %v5_11ff4 to i8*
  store i8 %v1_11ff8, i8* %v3_11ff8, align 1
  %v4_11ff8 = load i32, i32* %r3.global-to-local, align 4
  %v5_11ff8 = add i32 %v4_11ff8, 1
  store i32 %v5_11ff8, i32* %r3.global-to-local, align 4
  %v0_11ffc = load i32, i32* %r1.global-to-local, align 4
  %v1_11ffc = trunc i32 %v0_11ffc to i8
  %v3_11ffc = inttoptr i32 %v5_11ff8 to i8*
  store i8 %v1_11ffc, i8* %v3_11ffc, align 1
  %v4_11ffc = load i32, i32* %r3.global-to-local, align 4
  %v5_11ffc = add i32 %v4_11ffc, 1
  store i32 %v5_11ffc, i32* %r3.global-to-local, align 4
  %v0_12000 = load i32, i32* %r1.global-to-local, align 4
  %v1_12000 = trunc i32 %v0_12000 to i8
  %v3_12000 = inttoptr i32 %v5_11ffc to i8*
  store i8 %v1_12000, i8* %v3_12000, align 1
  %v4_12000 = load i32, i32* %r3.global-to-local, align 4
  %v5_12000 = add i32 %v4_12000, 1
  store i32 %v5_12000, i32* %r3.global-to-local, align 4
  %v0_12004 = load i32, i32* %r1.global-to-local, align 4
  %v1_12004 = trunc i32 %v0_12004 to i8
  %v3_12004 = inttoptr i32 %v5_12000 to i8*
  store i8 %v1_12004, i8* %v3_12004, align 1
  %v4_12004 = load i32, i32* %r3.global-to-local, align 4
  %v5_12004 = add i32 %v4_12004, 1
  store i32 %v5_12004, i32* %r3.global-to-local, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_11fa0, { 1, 0 }
  uselistorder i32 %v12_11fcc, { 1, 2, 0 }
  uselistorder i32 %v0_11fa054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_11f98.pr, { 0, 2, 1 }
  uselistorder i32 %v6_11f88, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_11f7c, { 1, 0 }
  uselistorder i32 %v0_11f74, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 17, 14, 15, 16, 13, 18, 21, 22 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 1, 10, 11, 12, 13, 2, 14, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 3, 2, 4, 1, 0, 8, 7, 5, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_11fd8, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_11fb0, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_12010(i32 %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_12010:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_12010 = sub i32 %arg1, %tmp
  %v1_12014 = add i32 %v2_12010, -1
  store i32 %v1_12014, i32* %r2.global-to-local, align 4
  %v2_120184 = load i8, i8* %arg2, align 1
  %v5_120186 = add i32 %tmp, 1
  store i32 %v5_120186, i32* %r1.global-to-local, align 4
  %v2_1201c7 = icmp eq i8 %v2_120184, 0
  store i1 %v2_1201c7, i1* %cpsr_z.global-to-local, align 1
  %v5_120208 = inttoptr i32 %arg1 to i8*
  store i8 %v2_120184, i8* %v5_120208, align 1
  %v0_120249 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_120249, label %dec_label_pc_12028, label %dec_label_pc_12018.dec_label_pc_12018_crit_edge

dec_label_pc_12018.dec_label_pc_12018_crit_edge:  ; preds = %dec_label_pc_12010, %dec_label_pc_12018.dec_label_pc_12018_crit_edge
  %v0_12018.pre = load i32, i32* %r1.global-to-local, align 4
  %v3_12020.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_12018 = inttoptr i32 %v0_12018.pre to i8*
  %v2_12018 = load i8, i8* %v1_12018, align 1
  %v5_12018 = add i32 %v0_12018.pre, 1
  store i32 %v5_12018, i32* %r1.global-to-local, align 4
  %v2_1201c = icmp eq i8 %v2_12018, 0
  store i1 %v2_1201c, i1* %cpsr_z.global-to-local, align 1
  %v4_12020 = add i32 %v5_12018, %v3_12020.pre
  %v5_12020 = inttoptr i32 %v4_12020 to i8*
  store i8 %v2_12018, i8* %v5_12020, align 1
  %v0_12024 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_12024, label %dec_label_pc_12028, label %dec_label_pc_12018.dec_label_pc_12018_crit_edge

dec_label_pc_12028:                               ; preds = %dec_label_pc_12018.dec_label_pc_12018_crit_edge, %dec_label_pc_12010
  ret i32 %arg1

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12018.dec_label_pc_12018_crit_edge, { 1, 0 }
}

define i32 @function_1202c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1202c:
  %stack_var_-8 = alloca i32, align 4
  %v2_12030 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_12030, i32* @r1, align 4
  %v0_12038 = call i32 @function_14020()
  %v2_1203c = icmp eq i32 %v0_12038, 0
  br i1 %v2_1203c, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_1202c
  %v3_12044 = load i32, i32* %stack_var_-8, align 4
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_1202c, %bb
  %v5_1204c = phi i32 [ -1, %dec_label_pc_1202c ], [ %v3_12044, %bb ]
  ret i32 %v5_1204c

; uselistorder directives
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_12050(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_12050:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12050 = load i32, i32* @r4, align 4
  store i32 %v3_12050, i32* %stack_var_-8, align 4
  %v5_12054 = inttoptr i32 %arg3 to i32*
  %v6_12054 = call i32 @accept(i32 %arg1, %sockaddr* %arg2, i32* %v5_12054)
  store i32 %v6_12054, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_12054, -4095
  br i1 %tmp, label %dec_label_pc_12074, label %dec_label_pc_12064

dec_label_pc_12064:                               ; preds = %dec_label_pc_12050
  %v0_12064 = call i32 @function_11f08()
  %v0_12068 = load i32, i32* %r4.global-to-local, align 4
  %v1_12068 = sub i32 0, %v0_12068
  %v2_1206c = inttoptr i32 %v0_12064 to i32*
  store i32 %v1_12068, i32* %v2_1206c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12074

dec_label_pc_12074:                               ; preds = %dec_label_pc_12050, %dec_label_pc_12064
  %v0_12074 = phi i32 [ %v6_12054, %dec_label_pc_12050 ], [ -1, %dec_label_pc_12064 ]
  %v2_12078 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12078, i32* @r4, align 4
  ret i32 %v0_12074

; uselistorder directives
  uselistorder i32 %v6_12054, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12074, { 1, 0 }
}

define i32 @function_1207c(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1207c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1207c = load i32, i32* @r4, align 4
  store i32 %v3_1207c, i32* %stack_var_-8, align 4
  %v5_12080 = call i32 @bind(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_12080, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12080, -4095
  br i1 %tmp, label %dec_label_pc_120a0, label %dec_label_pc_12090

dec_label_pc_12090:                               ; preds = %dec_label_pc_1207c
  %v0_12090 = call i32 @function_11f08()
  %v0_12094 = load i32, i32* %r4.global-to-local, align 4
  %v1_12094 = sub i32 0, %v0_12094
  %v2_12098 = inttoptr i32 %v0_12090 to i32*
  store i32 %v1_12094, i32* %v2_12098, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_120a0

dec_label_pc_120a0:                               ; preds = %dec_label_pc_1207c, %dec_label_pc_12090
  %v0_120a0 = phi i32 [ %v5_12080, %dec_label_pc_1207c ], [ -1, %dec_label_pc_12090 ]
  %v2_120a4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_120a4, i32* @r4, align 4
  ret i32 %v0_120a0

; uselistorder directives
  uselistorder i32 %v5_12080, { 1, 0, 2 }
  uselistorder label %dec_label_pc_120a0, { 1, 0 }
}

define i32 @function_120a8(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_120a8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_120a8 = load i32, i32* @r4, align 4
  store i32 %v3_120a8, i32* %stack_var_-8, align 4
  %v5_120ac = call i32 @connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_120ac, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_120ac, -4095
  br i1 %tmp, label %dec_label_pc_120cc, label %dec_label_pc_120bc

dec_label_pc_120bc:                               ; preds = %dec_label_pc_120a8
  %v0_120bc = call i32 @function_11f08()
  %v0_120c0 = load i32, i32* %r4.global-to-local, align 4
  %v1_120c0 = sub i32 0, %v0_120c0
  %v2_120c4 = inttoptr i32 %v0_120bc to i32*
  store i32 %v1_120c0, i32* %v2_120c4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_120cc

dec_label_pc_120cc:                               ; preds = %dec_label_pc_120a8, %dec_label_pc_120bc
  %v0_120cc = phi i32 [ %v5_120ac, %dec_label_pc_120a8 ], [ -1, %dec_label_pc_120bc ]
  %v2_120d0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_120d0, i32* @r4, align 4
  ret i32 %v0_120cc

; uselistorder directives
  uselistorder i32 %v5_120ac, { 1, 0, 2 }
  uselistorder label %dec_label_pc_120cc, { 1, 0 }
}

define i32 @function_120d4(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_120d4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_120d4 = load i32, i32* @r4, align 4
  store i32 %v3_120d4, i32* %stack_var_-8, align 4
  %v5_120d8 = inttoptr i32 %arg3 to i32*
  %v6_120d8 = call i32 @getsockname(i32 %arg1, %sockaddr* %arg2, i32* %v5_120d8)
  store i32 %v6_120d8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_120d8, -4095
  br i1 %tmp, label %dec_label_pc_120f8, label %dec_label_pc_120e8

dec_label_pc_120e8:                               ; preds = %dec_label_pc_120d4
  %v0_120e8 = call i32 @function_11f08()
  %v0_120ec = load i32, i32* %r4.global-to-local, align 4
  %v1_120ec = sub i32 0, %v0_120ec
  %v2_120f0 = inttoptr i32 %v0_120e8 to i32*
  store i32 %v1_120ec, i32* %v2_120f0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_120f8

dec_label_pc_120f8:                               ; preds = %dec_label_pc_120d4, %dec_label_pc_120e8
  %v0_120f8 = phi i32 [ %v6_120d8, %dec_label_pc_120d4 ], [ -1, %dec_label_pc_120e8 ]
  %v2_120fc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_120fc, i32* @r4, align 4
  ret i32 %v0_120f8

; uselistorder directives
  uselistorder i32 %v6_120d8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_120f8, { 1, 0 }
}

define i32 @function_12100(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_12100:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12100 = load i32, i32* @r4, align 4
  store i32 %v3_12100, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_12108 = call i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* null)
  store i32 %v5_12108, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12108, -4095
  br i1 %tmp, label %dec_label_pc_12128, label %dec_label_pc_12118

dec_label_pc_12118:                               ; preds = %dec_label_pc_12100
  %v0_12118 = call i32 @function_11f08()
  %v0_1211c = load i32, i32* %r4.global-to-local, align 4
  %v1_1211c = sub i32 0, %v0_1211c
  %v2_12120 = inttoptr i32 %v0_12118 to i32*
  store i32 %v1_1211c, i32* %v2_12120, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12128

dec_label_pc_12128:                               ; preds = %dec_label_pc_12100, %dec_label_pc_12118
  %v0_12128 = phi i32 [ %v5_12108, %dec_label_pc_12100 ], [ -1, %dec_label_pc_12118 ]
  %v2_1212c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1212c, i32* @r4, align 4
  ret i32 %v0_12128

; uselistorder directives
  uselistorder i32 %v5_12108, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12128, { 1, 0 }
}

define i32 @function_12130(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12130:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12130 = load i32, i32* @r4, align 4
  store i32 %v3_12130, i32* %stack_var_-8, align 4
  %v2_12134 = call i32 @listen(i32 %arg1, i32 %arg2)
  store i32 %v2_12134, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_12134, -4095
  br i1 %tmp, label %dec_label_pc_12154, label %dec_label_pc_12144

dec_label_pc_12144:                               ; preds = %dec_label_pc_12130
  %v0_12144 = call i32 @function_11f08()
  %v0_12148 = load i32, i32* %r4.global-to-local, align 4
  %v1_12148 = sub i32 0, %v0_12148
  %v2_1214c = inttoptr i32 %v0_12144 to i32*
  store i32 %v1_12148, i32* %v2_1214c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12154

dec_label_pc_12154:                               ; preds = %dec_label_pc_12130, %dec_label_pc_12144
  %v0_12154 = phi i32 [ %v2_12134, %dec_label_pc_12130 ], [ -1, %dec_label_pc_12144 ]
  %v2_12158 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12158, i32* @r4, align 4
  ret i32 %v0_12154

; uselistorder directives
  uselistorder i32 %v2_12134, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12154, { 1, 0 }
}

define i32 @function_1215c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1215c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1215c = load i32, i32* @r4, align 4
  store i32 %v3_1215c, i32* %stack_var_-8, align 4
  %v5_12160 = call i32 @recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_12160, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12160, -4095
  br i1 %tmp, label %dec_label_pc_12180, label %dec_label_pc_12170

dec_label_pc_12170:                               ; preds = %dec_label_pc_1215c
  %v0_12170 = call i32 @function_11f08()
  %v0_12174 = load i32, i32* %r4.global-to-local, align 4
  %v1_12174 = sub i32 0, %v0_12174
  %v2_12178 = inttoptr i32 %v0_12170 to i32*
  store i32 %v1_12174, i32* %v2_12178, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12180

dec_label_pc_12180:                               ; preds = %dec_label_pc_1215c, %dec_label_pc_12170
  %v0_12180 = phi i32 [ %v5_12160, %dec_label_pc_1215c ], [ -1, %dec_label_pc_12170 ]
  %v2_12184 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12184, i32* @r4, align 4
  ret i32 %v0_12180

; uselistorder directives
  uselistorder i32 %v5_12160, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12180, { 1, 0 }
}

define i32 @function_12188(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_12188:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_12188 = load i32, i32* @r4, align 4
  store i32 %v3_12188, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_12194 = call i32 @recvfrom(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32* null)
  store i32 %v5_12194, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12194, -4095
  br i1 %tmp, label %dec_label_pc_121b4, label %dec_label_pc_121a4

dec_label_pc_121a4:                               ; preds = %dec_label_pc_12188
  %v0_121a4 = call i32 @function_11f08()
  %v0_121a8 = load i32, i32* %r4.global-to-local, align 4
  %v1_121a8 = sub i32 0, %v0_121a8
  %v2_121ac = inttoptr i32 %v0_121a4 to i32*
  store i32 %v1_121a8, i32* %v2_121ac, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_121b4

dec_label_pc_121b4:                               ; preds = %dec_label_pc_12188, %dec_label_pc_121a4
  %v0_121b4 = phi i32 [ %v5_12194, %dec_label_pc_12188 ], [ -1, %dec_label_pc_121a4 ]
  %v2_121b8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_121b8, i32* @r4, align 4
  ret i32 %v0_121b4

; uselistorder directives
  uselistorder i32 %v5_12194, { 1, 0, 2 }
  uselistorder label %dec_label_pc_121b4, { 1, 0 }
}

define i32 @function_121bc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_121bc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_121bc = load i32, i32* @r4, align 4
  store i32 %v3_121bc, i32* %stack_var_-8, align 4
  %v5_121c0 = call i32 @send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_121c0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_121c0, -4095
  br i1 %tmp, label %dec_label_pc_121e0, label %dec_label_pc_121d0

dec_label_pc_121d0:                               ; preds = %dec_label_pc_121bc
  %v0_121d0 = call i32 @function_11f08()
  %v0_121d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_121d4 = sub i32 0, %v0_121d4
  %v2_121d8 = inttoptr i32 %v0_121d0 to i32*
  store i32 %v1_121d4, i32* %v2_121d8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_121e0

dec_label_pc_121e0:                               ; preds = %dec_label_pc_121bc, %dec_label_pc_121d0
  %v0_121e0 = phi i32 [ %v5_121c0, %dec_label_pc_121bc ], [ -1, %dec_label_pc_121d0 ]
  %v2_121e4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_121e4, i32* @r4, align 4
  ret i32 %v0_121e0

; uselistorder directives
  uselistorder i32 %v5_121c0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_121e0, { 1, 0 }
}

define i32 @function_121e8(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_121e8:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_121f4 = call i32 @sendto(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32 0)
  store i32 %v5_121f4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_121f4, -4095
  br i1 %tmp, label %dec_label_pc_12214, label %dec_label_pc_12204

dec_label_pc_12204:                               ; preds = %dec_label_pc_121e8
  %v0_12204 = call i32 @function_11f08()
  %v0_12208 = load i32, i32* %r4.global-to-local, align 4
  %v1_12208 = sub i32 0, %v0_12208
  %v2_1220c = inttoptr i32 %v0_12204 to i32*
  store i32 %v1_12208, i32* %v2_1220c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12214

dec_label_pc_12214:                               ; preds = %dec_label_pc_121e8, %dec_label_pc_12204
  %v0_12214 = phi i32 [ %v5_121f4, %dec_label_pc_121e8 ], [ -1, %dec_label_pc_12204 ]
  ret i32 %v0_12214

; uselistorder directives
  uselistorder i32 %v5_121f4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12214, { 1, 0 }
}

define i32 @function_1221c(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_1221c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1221c = load i32, i32* @r4, align 4
  store i32 %v3_1221c, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_12224 = call i32 @setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 0)
  store i32 %v5_12224, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12224, -4095
  br i1 %tmp, label %dec_label_pc_12244, label %dec_label_pc_12234

dec_label_pc_12234:                               ; preds = %dec_label_pc_1221c
  %v0_12234 = call i32 @function_11f08()
  %v0_12238 = load i32, i32* %r4.global-to-local, align 4
  %v1_12238 = sub i32 0, %v0_12238
  %v2_1223c = inttoptr i32 %v0_12234 to i32*
  store i32 %v1_12238, i32* %v2_1223c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12244

dec_label_pc_12244:                               ; preds = %dec_label_pc_1221c, %dec_label_pc_12234
  %v0_12244 = phi i32 [ %v5_12224, %dec_label_pc_1221c ], [ -1, %dec_label_pc_12234 ]
  %v2_12248 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12248, i32* @r4, align 4
  ret i32 %v0_12244

; uselistorder directives
  uselistorder i32 %v5_12224, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12244, { 1, 0 }
}

define i32 @function_1224c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1224c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1224c = load i32, i32* @r4, align 4
  store i32 %v3_1224c, i32* %stack_var_-8, align 4
  %v3_12250 = call i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3)
  store i32 %v3_12250, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_12250, -4095
  br i1 %tmp, label %dec_label_pc_12270, label %dec_label_pc_12260

dec_label_pc_12260:                               ; preds = %dec_label_pc_1224c
  %v0_12260 = call i32 @function_11f08()
  %v0_12264 = load i32, i32* %r4.global-to-local, align 4
  %v1_12264 = sub i32 0, %v0_12264
  %v2_12268 = inttoptr i32 %v0_12260 to i32*
  store i32 %v1_12264, i32* %v2_12268, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12270

dec_label_pc_12270:                               ; preds = %dec_label_pc_1224c, %dec_label_pc_12260
  %v0_12270 = phi i32 [ %v3_12250, %dec_label_pc_1224c ], [ -1, %dec_label_pc_12260 ]
  %v2_12274 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12274, i32* @r4, align 4
  ret i32 %v0_12270

; uselistorder directives
  uselistorder i32 %v3_12250, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12270, { 1, 0 }
}

define i32 @function_12278(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12278:
  store i32 %arg1, i32* @r1, align 4
  %tmp2 = icmp slt i32 %arg1, 1
  br i1 %tmp2, label %dec_label_pc_12294, label %dec_label_pc_12284

dec_label_pc_12284:                               ; preds = %dec_label_pc_12278
  %v8_12288 = icmp sgt i32 %arg1, 64
  br i1 %v8_12288, label %dec_label_pc_12294, label %dec_label_pc_1228c

dec_label_pc_1228c:                               ; preds = %dec_label_pc_12284
  %v0_12290 = call i32 @function_1239c()
  br label %dec_label_pc_12294

dec_label_pc_12294:                               ; preds = %dec_label_pc_12284, %dec_label_pc_12278, %dec_label_pc_1228c
  %v0_12294 = call i32 @function_11f08()
  %v2_1229c = inttoptr i32 %v0_12294 to i32*
  store i32 22, i32* %v2_1229c, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12294, { 2, 0, 1 }
}

define i32 @function_122a8(i32 %arg1) local_unnamed_addr {
dec_label_pc_122a8:
  store i32 128, i32* @r2, align 4
  %v0_122b4 = load i32, i32* @r0, align 4
  %v2_122b4 = inttoptr i32 %v0_122b4 to i8*
  %v3_122b4 = call i32 @function_11f70(i8* %v2_122b4, i32 0)
  ret i32 0
}

define i32 @function_122c0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_122c0:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_122c0 = load i32, i32* @r4, align 4
  store i32 %v3_122c0, i32* %stack_var_-12, align 4
  %v6_122c0 = load i32, i32* @r5, align 4
  %v10_122c0 = ptrtoint i32* %stack_var_-12 to i32
  %v7_122c4 = icmp eq i32 %arg2, -1
  %v0_122d0.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v7_122c4, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_122c0
  br label %dec_label_pc_122e8

bb:                                               ; preds = %dec_label_pc_122c0
  %v2_122cc = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v0_122d0.pre, i32* @r4, align 4
  %tmp19 = icmp slt i32 %v0_122d0.pre, 1
  br i1 %tmp19, label %dec_label_pc_122e8, label %dec_label_pc_122d8

dec_label_pc_122d8:                               ; preds = %bb
  %v7_122dc = icmp sgt i32 %v0_122d0.pre, 64
  br i1 %v7_122dc, label %dec_label_pc_122e8, label %bb20

bb20:                                             ; preds = %dec_label_pc_122d8
  store i32 %arg2, i32* %stack_var_-152, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v5_1230c24 = add i32 %v10_122c0, 124
  store i32 %v5_1230c24, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_122fc

dec_label_pc_122e8:                               ; preds = %.thread, %dec_label_pc_122d8, %bb
  %v0_122e8 = call i32 @function_11f08()
  store i32 %v0_122e8, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_122f4 = inttoptr i32 %v0_122e8 to i32*
  store i32 22, i32* %v2_122f4, align 4
  %v0_12368.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12368

dec_label_pc_122fc:                               ; preds = %bb20, %dec_label_pc_122fc
  %v5_1230c25 = phi i32 [ %v5_1230c24, %bb20 ], [ %v5_1230c, %dec_label_pc_122fc ]
  %v2_12300 = add i32 %v5_1230c25, -136
  %v3_12300 = inttoptr i32 %v2_12300 to i32*
  store i32 0, i32* %v3_12300, align 4
  %v0_12304.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_12304 = add i32 %v0_12304.pre, -1
  store i32 %v1_12304, i32* %r0.global-to-local, align 4
  %v6_12304 = icmp slt i32 %v1_12304, 0
  %v4_1230c = mul i32 %v1_12304, 4
  %v5_1230c = add i32 %v4_1230c, %v10_122c0
  store i32 %v5_1230c, i32* %r2.global-to-local, align 4
  br i1 %v6_12304, label %dec_label_pc_12314, label %dec_label_pc_122fc

dec_label_pc_12314:                               ; preds = %dec_label_pc_122fc
  %v2_12314 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_12314, i32* @r5, align 4
  %v2_12318 = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_12318, i32* @r0, align 4
  %v0_1231c = load i32, i32* @r4, align 4
  store i32 %v0_1231c, i32* @r1, align 4
  %v0_12320 = call i32 @function_1239c()
  store i32 %v0_12320, i32* %r0.global-to-local, align 4
  %v1_12324 = icmp slt i32 %v0_12320, 0
  br i1 %v1_12324, label %dec_label_pc_12364, label %dec_label_pc_1232c

dec_label_pc_1232c:                               ; preds = %dec_label_pc_12314
  %v0_1232c = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1ca68.376 to i32), i32* %r0.global-to-local, align 4
  %v2_12334 = call i32 @function_12378(i32 ptrtoint (i32* @global_var_1ca68.376 to i32), i32 %v0_1232c)
  store i32 %v2_122cc, i32* %r2.global-to-local, align 4
  %v0_1234c = load i32, i32* @r4, align 4
  store i32 %v0_1234c, i32* %r0.global-to-local, align 4
  %v4_12354 = call i32 @function_13264(i32 %v0_1234c, i32* nonnull %stack_var_-152, i32 %v2_122cc)
  store i32 %v4_12354, i32* %r0.global-to-local, align 4
  %v1_12358 = icmp slt i32 %v4_12354, 0
  br i1 %v1_12358, label %dec_label_pc_12364, label %bb23

bb23:                                             ; preds = %dec_label_pc_1232c
  %v5_1235c = load i32, i32* %stack_var_-292, align 4
  store i32 %v5_1235c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12368

dec_label_pc_12364:                               ; preds = %dec_label_pc_1232c, %dec_label_pc_12314
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12368

dec_label_pc_12368:                               ; preds = %bb23, %dec_label_pc_122e8, %dec_label_pc_12364
  %v0_12368 = phi i32 [ %v5_1235c, %bb23 ], [ %v0_12368.pre, %dec_label_pc_122e8 ], [ -1, %dec_label_pc_12364 ]
  store i32 %v0_12368, i32* %r0.global-to-local, align 4
  %v2_12370 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12370, i32* @r4, align 4
  store i32 %v6_122c0, i32* @r5, align 4
  ret i32 %v0_12368

; uselistorder directives
  uselistorder i32 %v0_12368, { 1, 0 }
  uselistorder i32 %v5_1230c, { 1, 0 }
  uselistorder i32 %v1_12304, { 0, 2, 1 }
  uselistorder i32 %v2_122cc, { 1, 0 }
  uselistorder i32 %v0_122d0.pre, { 1, 0, 2 }
  uselistorder i32 %v10_122c0, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %stack_var_-152, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 7, 6, 9, 8, 10, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_12368, { 2, 0, 1 }
  uselistorder label %dec_label_pc_122fc, { 1, 0 }
  uselistorder label %dec_label_pc_122e8, { 1, 2, 0 }
}

define i32 @function_12378(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12378:
  %v1_12378 = add i32 %arg2, -1
  %v3_1237c = udiv i32 %v1_12378, 32
  %v4_12380 = mul nuw nsw i32 %v3_1237c, 4
  %v5_12380 = add i32 %v4_12380, %arg1
  %v6_12380 = inttoptr i32 %v5_12380 to i32*
  %v7_12380 = load i32, i32* %v6_12380, align 4
  %v1_12384 = urem i32 %v1_12378, 32
  %v7_1238c = shl i32 1, %v1_12384
  %v8_1238c = and i32 %v7_12380, %v7_1238c
  %v10_1238c = icmp ne i32 %v8_1238c, 0
  %. = zext i1 %v10_1238c to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_12378, { 1, 0 }
}

define i32 @function_1239c() local_unnamed_addr {
dec_label_pc_1239c:
  %v0_1239c = load i32, i32* @r1, align 4
  %v1_1239c = add i32 %v0_1239c, -1
  %v3_123a0 = udiv i32 %v1_1239c, 32
  store i32 %v3_123a0, i32* @ip, align 4
  %v0_123a4 = load i32, i32* @r0, align 4
  %v4_123a4 = mul nuw nsw i32 %v3_123a0, 4
  %v5_123a4 = add i32 %v0_123a4, %v4_123a4
  %v6_123a4 = inttoptr i32 %v5_123a4 to i32*
  %v7_123a4 = load i32, i32* %v6_123a4, align 4
  %v1_123a8 = urem i32 %v1_1239c, 32
  %v7_123b0 = shl i32 1, %v1_123a8
  %v8_123b0 = or i32 %v7_123a4, %v7_123b0
  store i32 %v8_123b0, i32* %v6_123a4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_123a0, { 1, 0 }
  uselistorder i32 %v1_1239c, { 1, 0 }
}

define i32 @function_123c0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_123c0:
  %v1_123c0 = add i32 %arg2, -1
  %v3_123c4 = udiv i32 %v1_123c0, 32
  %v4_123c8 = mul nuw nsw i32 %v3_123c4, 4
  %v5_123c8 = add i32 %v4_123c8, %arg1
  %v6_123c8 = inttoptr i32 %v5_123c8 to i32*
  %v7_123c8 = load i32, i32* %v6_123c8, align 4
  %v1_123cc = urem i32 %v1_123c0, 32
  %tmp = shl i32 -1, %v1_123cc
  %v8_123d4 = add i32 %tmp, -1
  %v9_123d4 = and i32 %v7_123c8, %v8_123d4
  store i32 %v9_123d4, i32* %v6_123c8, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_123c0, { 1, 0 }
}

define i32 @function_123e4(i32 %arg1) local_unnamed_addr {
dec_label_pc_123e4:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_123e4 = load i32, i32* @r4, align 4
  %v6_123e4 = load i32, i32* @r5, align 4
  %v9_123e4 = load i32, i32* @r6, align 4
  %v0_123e8 = load i32, i32* %r0.global-to-local, align 4
  %v2_123e8 = icmp eq i32 %v0_123e8, 0
  %v2_123ec = ptrtoint i32* %stack_var_-20 to i32
  br i1 %v2_123e8, label %bb, label %dec_label_pc_123f8

bb:                                               ; preds = %dec_label_pc_123e4
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12400

dec_label_pc_123f8:                               ; preds = %dec_label_pc_123e4
  %tmp = icmp ugt i32 %v0_123e8, -8
  br i1 %tmp, label %dec_label_pc_12504, label %dec_label_pc_12400

dec_label_pc_12400:                               ; preds = %bb, %dec_label_pc_123f8
  %v0_12400 = phi i32 [ %v0_123e8, %dec_label_pc_123f8 ], [ 1, %bb ]
  %v1_12400 = add i32 %v0_12400, 4
  store i32 %v1_12400, i32* %stack_var_-20, align 4
  store i32 %v2_123ec, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1c8f8.378 to i32), i32* %r0.global-to-local, align 4
  %v1_12418 = call i32 @function_12f78()
  store i32 ptrtoint (i32** @global_var_1c73c.382 to i32), i32* %r0.global-to-local, align 4
  %v3_12424 = call i32 @function_12798(i32* bitcast (i32** @global_var_1c73c.382 to i32*), i32 %v2_123ec)
  store i32 %v3_12424, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c8f8.378 to i32), i32* %r0.global-to-local, align 4
  store i32 74812, i32* @lr, align 4
  %v1_12438 = call i32 @function_12f78()
  store i32 %v1_12438, i32* %r0.global-to-local, align 4
  %v2_1243c = icmp eq i32 %v3_12424, 0
  br i1 %v2_1243c, label %dec_label_pc_12444, label %dec_label_pc_124f4

dec_label_pc_12444:                               ; preds = %dec_label_pc_12400
  %v2_12448 = load i32, i32* @global_var_1c920.385, align 4
  store i32 %v2_12448, i32* @r4, align 4
  %v2_1244c = load i32, i32* %stack_var_-20, align 4
  %v3_12450 = icmp ult i32 %v2_1244c, %v2_12448
  br i1 %v3_12450, label %.thread3, label %bb14

bb14:                                             ; preds = %dec_label_pc_12444
  %v3_12454 = add i32 %v2_12448, -1
  %v2_12458 = add i32 %v3_12454, %v2_1244c
  %v2_1245c = sub i32 0, %v2_12448
  %v3_12460 = and i32 %v2_12458, %v2_1245c
  store i32 %v3_12460, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_12444, %bb14
  store i32 ptrtoint (i32* @global_var_1cae8.387 to i32), i32* %r0.global-to-local, align 4
  %v1_1246c = call i32 @function_12f78()
  %v0_12470 = load i32, i32* @r4, align 4
  store i32 %v0_12470, i32* %r0.global-to-local, align 4
  %v1_12474 = call i32 @function_1372c(i32 %v0_12470)
  store i32 %v1_12474, i32* %r0.global-to-local, align 4
  %v7_12478 = icmp eq i32 %v1_12474, -1
  br i1 %v7_12478, label %bb15, label %dec_label_pc_12484

bb15:                                             ; preds = %.thread3
  store i32 %v1_12474, i32* @r5, align 4
  br label %dec_label_pc_12498

dec_label_pc_12484:                               ; preds = %.thread3
  %v1_12484 = add i32 %v1_12474, 3
  %v1_12488 = and i32 %v1_12484, -4
  store i32 %v1_12488, i32* @r5, align 4
  %v9_1248c = icmp eq i32 %v1_12488, %v1_12474
  br i1 %v9_1248c, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_12484
  %v3_12490 = sub i32 %v1_12488, %v1_12474
  store i32 %v3_12490, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_12484, %bb16
  %v1_12494 = xor i1 %v9_1248c, true
  call void @__pseudo_cond_branch(i1 %v1_12494, i32 ptrtoint (i32* @global_var_1372c.388 to i32))
  br label %dec_label_pc_12498

dec_label_pc_12498:                               ; preds = %bb15, %bb17
  store i32 ptrtoint (i32* @global_var_1cae8.387 to i32), i32* %r0.global-to-local, align 4
  store i32 74920, i32* @lr, align 4
  %v1_124a4 = call i32 @function_12f78()
  store i32 %v1_124a4, i32* %r0.global-to-local, align 4
  %v0_124a8 = load i32, i32* @r5, align 4
  %v7_124a8 = icmp eq i32 %v0_124a8, -1
  br i1 %v7_124a8, label %dec_label_pc_12504, label %dec_label_pc_124b0

dec_label_pc_124b0:                               ; preds = %dec_label_pc_12498
  store i32 ptrtoint (i32* @global_var_1c8f8.378 to i32), i32* %r0.global-to-local, align 4
  %v1_124bc = call i32 @function_12f78()
  %v0_124c0 = load i32, i32* @r4, align 4
  %v0_124c4 = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1c73c.382 to i32), i32* %r0.global-to-local, align 4
  %v4_124cc = call i32 @function_128ec(i32* bitcast (i32** @global_var_1c73c.382 to i32*), i32 %v0_124c4, i32 %v0_124c0)
  store i32 ptrtoint (i32** @global_var_1c73c.382 to i32), i32* %r0.global-to-local, align 4
  %v3_124d8 = call i32 @function_12798(i32* bitcast (i32** @global_var_1c73c.382 to i32*), i32 %v2_123ec)
  store i32 %v3_124d8, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c8f8.378 to i32), i32* %r0.global-to-local, align 4
  store i32 74988, i32* @lr, align 4
  %v1_124e8 = call i32 @function_12f78()
  store i32 %v1_124e8, i32* %r0.global-to-local, align 4
  %v2_124ec = icmp eq i32 %v3_124d8, 0
  br i1 %v2_124ec, label %dec_label_pc_12504, label %dec_label_pc_124f4

dec_label_pc_124f4:                               ; preds = %dec_label_pc_12400, %dec_label_pc_124b0
  %v1_124f8 = phi i32 [ %v3_12424, %dec_label_pc_12400 ], [ %v3_124d8, %dec_label_pc_124b0 ]
  %v2_124f4 = load i32, i32* %stack_var_-20, align 4
  %v2_124f8 = inttoptr i32 %v1_124f8 to i32*
  store i32 %v2_124f4, i32* %v2_124f8, align 4
  %v3_124f8 = load i32, i32* %r4.global-to-local, align 4
  %v4_124f8 = add i32 %v3_124f8, 4
  store i32 %v4_124f8, i32* %r4.global-to-local, align 4
  %v2_124fc = icmp eq i32 %v4_124f8, 0
  br i1 %v2_124fc, label %dec_label_pc_12504, label %dec_label_pc_12514

dec_label_pc_12504:                               ; preds = %dec_label_pc_124f4, %dec_label_pc_124b0, %dec_label_pc_12498, %dec_label_pc_123f8
  %v0_12504 = call i32 @function_11f08()
  store i32 %v0_12504, i32* %r0.global-to-local, align 4
  %v2_1250c = inttoptr i32 %v0_12504 to i32*
  store i32 12, i32* %v2_1250c, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12514

dec_label_pc_12514:                               ; preds = %dec_label_pc_124f4, %dec_label_pc_12504
  %v0_12514 = phi i32 [ %v4_124f8, %dec_label_pc_124f4 ], [ 0, %dec_label_pc_12504 ]
  store i32 %v0_12514, i32* %r0.global-to-local, align 4
  store i32 %v3_123e4, i32* @r4, align 4
  store i32 %v6_123e4, i32* @r5, align 4
  store i32 %v9_123e4, i32* @r6, align 4
  ret i32 %v0_12514

; uselistorder directives
  uselistorder i32 %v0_12514, { 1, 0 }
  uselistorder i32 %v3_124d8, { 1, 0, 2 }
  uselistorder i32 %v1_12488, { 1, 0, 2 }
  uselistorder i32 %v1_12474, { 3, 0, 2, 4, 1, 5 }
  uselistorder i32 %v3_12424, { 1, 0, 2 }
  uselistorder i32 %v0_123e8, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r0.global-to-local, { 6, 8, 2, 7, 9, 10, 11, 4, 13, 12, 5, 15, 14, 3, 16, 17, 18, 19, 0, 1 }
  uselistorder label %dec_label_pc_12514, { 1, 0 }
  uselistorder label %dec_label_pc_124f4, { 1, 0 }
  uselistorder label %dec_label_pc_12498, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_12400, { 1, 0 }
}

define i32 @function_12538(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12538:
  %stack_var_-12 = alloca i32, align 4
  %v3_12538 = load i32, i32* @r4, align 4
  store i32 %v3_12538, i32* %stack_var_-12, align 4
  %v6_12538 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  %v2_12540 = mul i32 %arg2, %arg1
  store i32 %v2_12540, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_12544 = icmp eq i32 %arg1, 0
  store i32 %v2_12540, i32* @r0, align 4
  br i1 %v2_12544, label %dec_label_pc_12570, label %dec_label_pc_12550

dec_label_pc_12550:                               ; preds = %dec_label_pc_12538
  %v0_12550 = call i32 @function_115d8()
  %v0_12554 = load i32, i32* @r5, align 4
  %v9_12554 = icmp eq i32 %v0_12554, %v0_12550
  store i32 0, i32* @r5, align 4
  br i1 %v9_12554, label %dec_label_pc_12550.dec_label_pc_12570_crit_edge, label %dec_label_pc_12560

dec_label_pc_12550.dec_label_pc_12570_crit_edge:  ; preds = %dec_label_pc_12550
  %v0_12570.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12570

dec_label_pc_12560:                               ; preds = %dec_label_pc_12550
  %v0_12560 = call i32 @function_11f08()
  %v2_12568 = inttoptr i32 %v0_12560 to i32*
  store i32 12, i32* %v2_12568, align 4
  br label %dec_label_pc_12588

dec_label_pc_12570:                               ; preds = %dec_label_pc_12550.dec_label_pc_12570_crit_edge, %dec_label_pc_12538
  %v0_12570 = phi i32 [ %v0_12570.pre, %dec_label_pc_12550.dec_label_pc_12570_crit_edge ], [ %v2_12540, %dec_label_pc_12538 ]
  %v1_12574 = call i32 @function_123e4(i32 %v0_12570)
  store i32 %v1_12574, i32* @r5, align 4
  store i32 75144, i32* @lr, align 4
  %v1_12584 = icmp ne i32 %v1_12574, 0
  call void @__pseudo_cond_branch(i1 %v1_12584, i32 ptrtoint (i32* @global_var_11f70.389 to i32))
  br label %dec_label_pc_12588

dec_label_pc_12588:                               ; preds = %dec_label_pc_12560, %dec_label_pc_12570
  %v0_12588 = load i32, i32* @r5, align 4
  %v2_1258c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1258c, i32* @r4, align 4
  store i32 %v6_12538, i32* @r5, align 4
  ret i32 %v0_12588

; uselistorder directives
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_12588, { 1, 0 }
}

define i32 @function_12590() local_unnamed_addr {
dec_label_pc_12590:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_12590 = load i32, i32* @r0, align 4
  %v2_12590 = icmp eq i32 %v0_12590, 0
  %v3_12594 = load i32, i32* @r4, align 4
  store i32 %v3_12594, i32* %stack_var_-24, align 4
  %v6_12594 = load i32, i32* @r5, align 4
  %v9_12594 = load i32, i32* @r6, align 4
  %v15_12594 = load i32, i32* @r8, align 4
  br i1 %v2_12590, label %bb, label %bb11

bb:                                               ; preds = %dec_label_pc_12590
  ret i32 0

bb11:                                             ; preds = %dec_label_pc_12590
  %v1_1259c = add i32 %v0_12590, -4
  %v2_1259c = inttoptr i32 %v1_1259c to i32*
  %v3_1259c = load i32, i32* %v2_1259c, align 4
  store i32 %v3_1259c, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1c73c.382 to i32), i32* %r8.global-to-local, align 4
  store i32 %v1_1259c, i32* @r4, align 4
  %v1_125b4 = call i32 @function_12f78()
  %v0_125b8 = load i32, i32* @r4, align 4
  %v0_125bc = load i32, i32* @r5, align 4
  %v4_125c4 = call i32 @function_128ec(i32* bitcast (i32** @global_var_1c73c.382 to i32*), i32 %v0_125b8, i32 %v0_125bc)
  %v1_125cc = inttoptr i32 %v4_125c4 to i32*
  %v2_125cc = load i32, i32* %v1_125cc, align 4
  store i32 %v2_125cc, i32* %r6.global-to-local, align 4
  %v2_125d0 = load i32, i32* @global_var_1c920.385, align 4
  %v4_125d4 = mul i32 %v2_125d0, 8
  %v6_125d4 = icmp ult i32 %v2_125cc, %v4_125d4
  store i32 %v4_125c4, i32* @r4, align 4
  br i1 %v6_125d4, label %dec_label_pc_12614, label %dec_label_pc_125e0

dec_label_pc_125e0:                               ; preds = %bb11
  %v1_125e8 = call i32 @function_12f78()
  %v1_125f0 = call i32 @function_1372c(i32 0)
  %v0_125f4 = load i32, i32* @r4, align 4
  %v1_125f4 = add i32 %v0_125f4, 12
  store i32 %v1_125f4, i32* @r5, align 4
  %v9_125f8 = icmp eq i32 %v1_125f4, %v1_125f0
  br i1 %v9_125f8, label %dec_label_pc_1261c, label %dec_label_pc_12600

dec_label_pc_12600:                               ; preds = %dec_label_pc_125e0
  %v1_1260c = call i32 @function_12f78()
  br label %dec_label_pc_12614

dec_label_pc_12614:                               ; preds = %bb11, %dec_label_pc_12600, %bb14
  %v2_12614 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_12614, i32* @r4, align 4
  store i32 %v6_12594, i32* @r5, align 4
  store i32 %v9_12594, i32* %r6.global-to-local, align 4
  store i32 %v15_12594, i32* %r8.global-to-local, align 4
  %v0_12618 = call i32 @function_12f78()
  %v0_1261c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1261c

dec_label_pc_1261c:                               ; preds = %dec_label_pc_125e0, %dec_label_pc_12614
  %v1_12624 = phi i32 [ %v0_125f4, %dec_label_pc_125e0 ], [ %v0_1261c.pre, %dec_label_pc_12614 ]
  %v1_1261c = add i32 %v1_12624, 4
  %v2_1261c = inttoptr i32 %v1_1261c to i32*
  %v3_1261c = load i32, i32* %v2_1261c, align 4
  %v2_12620 = icmp eq i32 %v3_1261c, 0
  br i1 %v2_12620, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_1261c
  %v2_12624 = add i32 %v1_12624, 8
  %v3_12624 = inttoptr i32 %v2_12624 to i32*
  %v4_12624 = load i32, i32* %v3_12624, align 4
  %v3_12628 = add i32 %v3_1261c, 8
  %v4_12628 = inttoptr i32 %v3_12628 to i32*
  store i32 %v4_12624, i32* %v4_12628, align 4
  %v0_1262c.pre = load i32, i32* @r4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1261c, %bb12
  %v0_1262c = phi i32 [ %v1_12624, %dec_label_pc_1261c ], [ %v0_1262c.pre, %bb12 ]
  %v1_1262c = add i32 %v0_1262c, 8
  %v2_1262c = inttoptr i32 %v1_1262c to i32*
  %v3_1262c = load i32, i32* %v2_1262c, align 4
  %v1_12630 = add i32 %v0_1262c, 4
  %v2_12630 = inttoptr i32 %v1_12630 to i32*
  %v3_12630 = load i32, i32* %v2_12630, align 4
  %v2_12634 = icmp eq i32 %v3_1262c, 0
  br i1 %v2_12634, label %.thread1, label %bb13

bb13:                                             ; preds = %.thread
  %v3_12638 = add i32 %v3_1262c, 4
  %v4_12638 = inttoptr i32 %v3_12638 to i32*
  store i32 %v3_12630, i32* %v4_12638, align 4
  br label %bb14

.thread1:                                         ; preds = %.thread
  %v2_1263c = load i32, i32* %r8.global-to-local, align 4
  %v3_1263c = inttoptr i32 %v2_1263c to i32*
  store i32 %v3_12630, i32* %v3_1263c, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %.thread1
  %v1_1264c = call i32 @function_12f78()
  %v0_12650 = load i32, i32* %r6.global-to-local, align 4
  %v1_12650 = load i32, i32* @r4, align 4
  %v0_12658 = load i32, i32* @r5, align 4
  %v2_12650 = sub i32 12, %v0_12650
  %v1_12654 = add i32 %v2_12650, %v1_12650
  %v2_12658 = sub i32 %v1_12654, %v0_12658
  %v1_1265c = call i32 @function_1372c(i32 %v2_12658)
  br label %dec_label_pc_12614

; uselistorder directives
  uselistorder i32 %v0_1262c, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_1372c, { 2, 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_1261c, { 1, 0 }
  uselistorder label %dec_label_pc_12614, { 2, 1, 0 }
}

define i32 @function_12680(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12680:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_12680 = load i32, i32* @r4, align 4
  store i32 %v3_12680, i32* %stack_var_-24, align 4
  %v6_12680 = load i32, i32* @r5, align 4
  %v9_12680 = load i32, i32* @r6, align 4
  %v12_12680 = load i32, i32* @r7, align 4
  %v15_12680 = load i32, i32* @r8, align 4
  %v18_12680 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_12684 = icmp eq i32 %arg2, 0
  %v0_12688 = load i32, i32* @r0, align 4
  store i32 %v0_12688, i32* @r7, align 4
  br i1 %v2_12684, label %dec_label_pc_12690, label %dec_label_pc_12698

dec_label_pc_12690:                               ; preds = %dec_label_pc_12680
  %v0_12690 = call i32 @function_12590()
  %v0_126a0.pre = load i32, i32* @r4, align 4
  %v2_126a4.pre = load i32, i32* %stack_var_-24, align 4
  br label %dec_label_pc_126a0

dec_label_pc_12698:                               ; preds = %dec_label_pc_12680
  %v2_12698 = icmp eq i32 %v0_12688, 0
  br i1 %v2_12698, label %dec_label_pc_126a0, label %dec_label_pc_126ac

dec_label_pc_126a0:                               ; preds = %dec_label_pc_12698, %dec_label_pc_12690
  %v2_126a4 = phi i32 [ %v3_12680, %dec_label_pc_12698 ], [ %v2_126a4.pre, %dec_label_pc_12690 ]
  %v0_126a0 = phi i32 [ %arg2, %dec_label_pc_12698 ], [ %v0_126a0.pre, %dec_label_pc_12690 ]
  store i32 %v2_126a4, i32* @r4, align 4
  store i32 %v6_12680, i32* @r5, align 4
  store i32 %v9_12680, i32* @r6, align 4
  store i32 %v12_12680, i32* @r7, align 4
  store i32 %v18_12680, i32* @lr, align 4
  %v1_126a8 = call i32 @function_123e4(i32 %v0_126a0)
  %v0_126ac.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_126ac

dec_label_pc_126ac:                               ; preds = %dec_label_pc_12698, %dec_label_pc_126a0
  %v0_126c4 = phi i32 [ %v0_12688, %dec_label_pc_12698 ], [ %v1_126a8, %dec_label_pc_126a0 ]
  %v0_126ac = phi i32 [ %arg2, %dec_label_pc_12698 ], [ %v0_126ac.pre, %dec_label_pc_126a0 ]
  %v1_126ac = add i32 %v0_126ac, 7
  %v1_126b0 = and i32 %v1_126ac, -4
  store i32 %v1_126b0, i32* @r5, align 4
  %v2_126b4 = icmp ugt i32 %v1_126b0, 10
  %v1_126b8 = add i32 %v0_126c4, -4
  %v2_126b8 = inttoptr i32 %v1_126b8 to i32*
  %v3_126b8 = load i32, i32* %v2_126b8, align 4
  store i32 %v3_126b8, i32* @r6, align 4
  br i1 %v2_126b4, label %bb14, label %bb

bb:                                               ; preds = %dec_label_pc_126ac
  store i32 12, i32* @r5, align 4
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_126ac, %bb
  %v0_12740 = phi i32 [ %v1_126b0, %dec_label_pc_126ac ], [ 12, %bb ]
  store i32 %v1_126b8, i32* @r8, align 4
  %tmp = icmp ugt i32 %v0_12740, %v3_126b8
  br i1 %tmp, label %dec_label_pc_126cc, label %dec_label_pc_12740

dec_label_pc_126cc:                               ; preds = %bb14
  %v2_126c0 = sub i32 %v0_12740, %v3_126b8
  %v1_126dc = call i32 @function_12f78()
  %v0_126e4 = load i32, i32* @r8, align 4
  %v1_126e4 = load i32, i32* @r6, align 4
  %v2_126e4 = add i32 %v1_126e4, %v0_126e4
  %v4_126ec = call i32 @function_1282c(i32* bitcast (i32** @global_var_1c73c.382 to i32*), i32 %v2_126e4, i32 %v2_126c0)
  store i32 %v4_126ec, i32* @r4, align 4
  store i32 75524, i32* @lr, align 4
  %v1_12700 = call i32 @function_12f78()
  %v0_12704 = load i32, i32* @r4, align 4
  %v2_12704 = icmp eq i32 %v0_12704, 0
  br i1 %v2_12704, label %dec_label_pc_12714, label %.thread

.thread:                                          ; preds = %dec_label_pc_126cc
  %v1_12708 = load i32, i32* @r6, align 4
  %v3_12708 = add i32 %v1_12708, %v0_12704
  %v2_1270c = load i32, i32* @r7, align 4
  %v3_1270c = add i32 %v2_1270c, -4
  %v4_1270c = inttoptr i32 %v3_1270c to i32*
  store i32 %v3_12708, i32* %v4_1270c, align 4
  br label %dec_label_pc_12780

dec_label_pc_12714:                               ; preds = %dec_label_pc_126cc
  %v0_12714 = load i32, i32* @r5, align 4
  %v1_12714 = add i32 %v0_12714, -4
  %v1_12718 = call i32 @function_123e4(i32 %v1_12714)
  store i32 %v1_12718, i32* @r0, align 4
  store i32 %v1_12718, i32* @r4, align 4
  %v2_1271c = icmp eq i32 %v1_12718, 0
  br i1 %v2_1271c, label %dec_label_pc_12738, label %dec_label_pc_12724

dec_label_pc_12724:                               ; preds = %dec_label_pc_12714
  %v0_12724 = load i32, i32* @r6, align 4
  %v1_12724 = add i32 %v0_12724, -4
  store i32 %v1_12724, i32* @r2, align 4
  %v0_12728 = load i32, i32* @r7, align 4
  store i32 %v0_12728, i32* @r1, align 4
  %v3_1272c = call i32 @function_11f50(i32 %v1_12718, i32 %v0_12728, i32 %v1_12724)
  %v0_12730 = load i32, i32* @r7, align 4
  store i32 %v0_12730, i32* @r0, align 4
  %v0_12734 = call i32 @function_12590()
  %v0_12738.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12738

dec_label_pc_12738:                               ; preds = %dec_label_pc_12714, %dec_label_pc_12724
  %v0_12738 = phi i32 [ 0, %dec_label_pc_12714 ], [ %v0_12738.pre, %dec_label_pc_12724 ]
  store i32 %v0_12738, i32* @r7, align 4
  br label %dec_label_pc_12780

dec_label_pc_12740:                               ; preds = %bb14
  %v1_12740 = add i32 %v0_12740, 28
  %tmp15 = icmp ugt i32 %v1_12740, %v3_126b8
  br i1 %tmp15, label %dec_label_pc_12780, label %dec_label_pc_1274c

dec_label_pc_1274c:                               ; preds = %dec_label_pc_12740
  %v1_12758 = call i32 @function_12f78()
  %v0_1275c = load i32, i32* @r8, align 4
  %v1_1275c = load i32, i32* @r5, align 4
  %v2_1275c = add i32 %v1_1275c, %v0_1275c
  %v1_12760 = load i32, i32* @r6, align 4
  %v2_12760 = sub i32 %v1_12760, %v1_1275c
  %v4_12768 = call i32 @function_128ec(i32* bitcast (i32** @global_var_1c73c.382 to i32*), i32 %v2_1275c, i32 %v2_12760)
  store i32 75644, i32* @lr, align 4
  %v1_12778 = call i32 @function_12f78()
  %v0_1277c = load i32, i32* @r5, align 4
  %v1_1277c = load i32, i32* @r7, align 4
  %v2_1277c = add i32 %v1_1277c, -4
  %v3_1277c = inttoptr i32 %v2_1277c to i32*
  store i32 %v0_1277c, i32* %v3_1277c, align 4
  br label %dec_label_pc_12780

dec_label_pc_12780:                               ; preds = %.thread, %dec_label_pc_12740, %dec_label_pc_12738, %dec_label_pc_1274c
  %v0_12780 = load i32, i32* @r7, align 4
  %v2_12784 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_12784, i32* @r4, align 4
  store i32 %v6_12680, i32* @r5, align 4
  store i32 %v9_12680, i32* @r6, align 4
  store i32 %v12_12680, i32* @r7, align 4
  store i32 %v15_12680, i32* @r8, align 4
  ret i32 %v0_12780

; uselistorder directives
  uselistorder i32 %v1_1275c, { 1, 0 }
  uselistorder i32 %v0_12740, { 1, 2, 0 }
  uselistorder i32 %v3_126b8, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-24, { 1, 0, 2 }
  uselistorder i32** @global_var_1c73c.382, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_1c73c.382 to i32*), { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i32)* @function_123e4, { 1, 39, 0, 4, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 3, 2 }
  uselistorder i32 ()* @function_12590, { 1, 0, 4, 3, 2, 5, 7, 6 }
  uselistorder i32* @r8, { 105, 106, 107, 108, 110, 109, 3, 4, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 29, 30, 31, 32, 126, 127, 128, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 1, 70, 71, 72, 73, 74, 75, 76, 77, 0, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 2, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 129, 130, 131, 132, 133, 134, 135, 136, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 53, 54, 55, 56, 57, 58, 59 }
  uselistorder i32* @r7, { 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 11, 12, 17, 18, 19, 2, 8, 9, 10, 26, 13, 14, 15, 16, 4, 20, 3, 21, 22, 23, 24, 25, 27, 1, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66, 67, 5, 68, 69, 70, 71, 72, 73, 74, 75, 239, 240, 241, 114, 115, 116, 117, 62, 0, 63, 64, 65, 76, 77, 78, 6, 7, 79, 80, 81, 82, 83, 84, 85, 96, 97, 98, 99, 100, 101, 102, 103, 104, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 105, 106, 107, 108, 109, 110, 111, 112, 113 }
  uselistorder label %dec_label_pc_12780, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_12738, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %dec_label_pc_126ac, { 1, 0 }
}

define i32 @function_12798(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12798:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v1_12798 = inttoptr i32 %arg2 to i32*
  %v2_12798 = load i32, i32* %v1_12798, align 4
  %v3_1279c = load i32, i32* @r4, align 4
  store i32 %v3_1279c, i32* %stack_var_-8, align 4
  %v1_127a0 = add i32 %v2_12798, 3
  %v1_127a4 = and i32 %v1_127a0, -4
  store i32 %v1_127a4, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_127ac = icmp ugt i32 %v1_127a4, 10
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_127b4 = load i32, i32* %arg1, align 4
  store i32 %v2_127b4, i32* %r0.global-to-local, align 4
  br i1 %v2_127ac, label %dec_label_pc_12820.preheader, label %bb

bb:                                               ; preds = %dec_label_pc_12798
  store i32 12, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12820.preheader

dec_label_pc_12820.preheader:                     ; preds = %dec_label_pc_12798, %bb
  %v1_127d4 = phi i32 [ %v1_127a4, %dec_label_pc_12798 ], [ 12, %bb ]
  %v2_128209 = icmp eq i32 %v2_127b4, 0
  br i1 %v2_128209, label %dec_label_pc_12828, label %dec_label_pc_127c0

dec_label_pc_127c0:                               ; preds = %dec_label_pc_12820.preheader, %dec_label_pc_1281c
  %v2_127d8 = phi i32 [ %v3_1281c, %dec_label_pc_1281c ], [ %v2_127b4, %dec_label_pc_12820.preheader ]
  %v1_127c0 = inttoptr i32 %v2_127d8 to i32*
  %v2_127c0 = load i32, i32* %v1_127c0, align 4
  store i32 %v2_127c0, i32* %ip.global-to-local, align 4
  %v3_127c4 = icmp ult i32 %v2_127c0, %v1_127d4
  br i1 %v3_127c4, label %dec_label_pc_1281c, label %dec_label_pc_127cc

dec_label_pc_127cc:                               ; preds = %dec_label_pc_127c0
  %v1_127cc = add i32 %v1_127d4, 44
  %v3_127d0 = icmp ult i32 %v2_127c0, %v1_127cc
  br i1 %v3_127d0, label %dec_label_pc_127e0, label %.thread._crit_edge

.thread._crit_edge:                               ; preds = %dec_label_pc_127cc
  %v2_127c4.le = sub i32 %v2_127c0, %v1_127d4
  store i32 %v2_127c4.le, i32* %v1_127c0, align 4
  %v0_1280c.pre = load i32, i32* %ip.global-to-local, align 4
  %v0_12814.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb29

dec_label_pc_127e0:                               ; preds = %dec_label_pc_127cc
  %v1_127e0 = add i32 %v2_127d8, 4
  %v2_127e0 = inttoptr i32 %v1_127e0 to i32*
  %v3_127e0 = load i32, i32* %v2_127e0, align 4
  store i32 %v3_127e0, i32* %r2.global-to-local, align 4
  %v2_127e4 = icmp eq i32 %v3_127e0, 0
  br i1 %v2_127e4, label %.thread2, label %bb27

bb27:                                             ; preds = %dec_label_pc_127e0
  %v2_127e8 = add i32 %v2_127d8, 8
  %v3_127e8 = inttoptr i32 %v2_127e8 to i32*
  %v4_127e8 = load i32, i32* %v3_127e8, align 4
  %v3_127ec = add i32 %v3_127e0, 8
  %v4_127ec = inttoptr i32 %v3_127ec to i32*
  store i32 %v4_127e8, i32* %v4_127ec, align 4
  %v0_127f0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_127e0, %bb27
  %v0_127f0 = phi i32 [ %v2_127d8, %dec_label_pc_127e0 ], [ %v0_127f0.pre, %bb27 ]
  %v1_127f0 = add i32 %v0_127f0, 8
  %v2_127f0 = inttoptr i32 %v1_127f0 to i32*
  %v3_127f0 = load i32, i32* %v2_127f0, align 4
  %v1_127f4 = add i32 %v0_127f0, 4
  %v2_127f4 = inttoptr i32 %v1_127f4 to i32*
  %v3_127f4 = load i32, i32* %v2_127f4, align 4
  %v2_127f8 = icmp eq i32 %v3_127f0, 0
  br i1 %v2_127f8, label %.thread5, label %bb28

bb28:                                             ; preds = %.thread2
  %v3_127fc = add i32 %v3_127f0, 4
  %v4_127fc = inttoptr i32 %v3_127fc to i32*
  store i32 %v3_127f4, i32* %v4_127fc, align 4
  %v1_12804 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_12804, i32* %r2.global-to-local, align 4
  br label %bb29

.thread5:                                         ; preds = %.thread2
  %v2_12800 = load i32, i32* %r1.global-to-local, align 4
  %v3_12800 = inttoptr i32 %v2_12800 to i32*
  store i32 %v3_127f4, i32* %v3_12800, align 4
  %v1_12808.pre = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_12808.pre, i32* %r2.global-to-local, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %.thread._crit_edge, %.thread5
  %v0_12814 = phi i32 [ %v0_12814.pre, %.thread._crit_edge ], [ %v1_12804, %bb28 ], [ %v1_12808.pre, %.thread5 ]
  %v0_1280c = phi i32 [ %v0_1280c.pre, %.thread._crit_edge ], [ %v1_12804, %bb28 ], [ %v1_12808.pre, %.thread5 ]
  %v1_1280c = load i32, i32* %r0.global-to-local, align 4
  %v2_1280c = sub i32 %v1_1280c, %v0_1280c
  %v1_12810 = add i32 %v2_1280c, 12
  store i32 %v1_12810, i32* %r0.global-to-local, align 4
  %v1_12814 = load i32, i32* %r4.global-to-local, align 4
  %v2_12814 = inttoptr i32 %v1_12814 to i32*
  store i32 %v0_12814, i32* %v2_12814, align 4
  %v2_12818 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12818, i32* %r4.global-to-local, align 4
  ret i32 %v1_12810

dec_label_pc_1281c:                               ; preds = %dec_label_pc_127c0
  %v1_1281c = add i32 %v2_127d8, 4
  %v2_1281c = inttoptr i32 %v1_1281c to i32*
  %v3_1281c = load i32, i32* %v2_1281c, align 4
  store i32 %v3_1281c, i32* %r0.global-to-local, align 4
  %v2_12820 = icmp eq i32 %v3_1281c, 0
  br i1 %v2_12820, label %dec_label_pc_12820.dec_label_pc_12828_crit_edge, label %dec_label_pc_127c0

dec_label_pc_12820.dec_label_pc_12828_crit_edge:  ; preds = %dec_label_pc_1281c
  br label %dec_label_pc_12828

dec_label_pc_12828:                               ; preds = %dec_label_pc_12820.dec_label_pc_12828_crit_edge, %dec_label_pc_12820.preheader
  store i32 %v3_1279c, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_1281c, { 1, 2, 0 }
  uselistorder i32 %v0_127f0, { 1, 0 }
  uselistorder i32 %v2_127c0, { 1, 0, 2, 3 }
  uselistorder i32 %v2_127d8, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_127d4, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder label %bb29, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_127c0, { 1, 0 }
  uselistorder label %dec_label_pc_12820.preheader, { 1, 0 }
}

define i32 @function_1282c(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1282c:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_12830 = load i32, i32* %arg1, align 4
  store i32 %v2_12830, i32* %ip.global-to-local, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  %v2_128a86 = icmp eq i32 %v2_12830, 0
  br i1 %v2_128a86, label %dec_label_pc_128b0, label %dec_label_pc_1283c

dec_label_pc_1283c:                               ; preds = %dec_label_pc_1282c, %dec_label_pc_128a4
  %v0_1287c = phi i32 [ %v3_128a4, %dec_label_pc_128a4 ], [ %v2_12830, %dec_label_pc_1282c ]
  %v1_1283c = inttoptr i32 %v0_1287c to i32*
  %v2_1283c = load i32, i32* %v1_1283c, align 4
  store i32 %v2_1283c, i32* %r0.global-to-local, align 4
  %v2_12840 = sub i32 %v0_1287c, %v2_1283c
  %v1_12844 = add i32 %v2_12840, 12
  %v3_12848 = icmp uge i32 %v1_12844, %arg2
  %v9_12848 = icmp eq i32 %v1_12844, %arg2
  %v2_1284c = xor i1 %v9_12848, true
  %v3_1284c = and i1 %v3_12848, %v2_1284c
  br i1 %v3_1284c, label %dec_label_pc_128a4, label %dec_label_pc_12850

dec_label_pc_12850:                               ; preds = %dec_label_pc_1283c
  br i1 %v9_12848, label %dec_label_pc_12854, label %dec_label_pc_128b0

dec_label_pc_12854:                               ; preds = %dec_label_pc_12850
  %v1_12854 = add i32 %arg3, 3
  %v1_12858 = and i32 %v1_12854, -4
  store i32 %v1_12858, i32* %r2.global-to-local, align 4
  %v2_1285c = sub i32 %v2_1283c, %v1_12858
  %v3_1285c = icmp ult i32 %v2_1283c, %v1_12858
  br i1 %v3_1285c, label %dec_label_pc_128b0, label %dec_label_pc_12864

dec_label_pc_12864:                               ; preds = %dec_label_pc_12854
  %v1_12864 = add i32 %v1_12858, 44
  %v3_12868 = icmp ult i32 %v2_1283c, %v1_12864
  br i1 %v3_12868, label %.thread2, label %bb

bb:                                               ; preds = %dec_label_pc_12864
  store i32 %v2_1285c, i32* %v1_1283c, align 4
  %v1_12874 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_12874, i32* %r0.global-to-local, align 4
  ret i32 %v1_12874

.thread2:                                         ; preds = %dec_label_pc_12864
  %v1_1287c = add i32 %v0_1287c, 4
  %v2_1287c = inttoptr i32 %v1_1287c to i32*
  %v3_1287c = load i32, i32* %v2_1287c, align 4
  store i32 %v3_1287c, i32* %r2.global-to-local, align 4
  %v2_12880 = icmp eq i32 %v3_1287c, 0
  br i1 %v2_12880, label %.thread3, label %bb17

bb17:                                             ; preds = %.thread2
  %v2_12884 = add i32 %v0_1287c, 8
  %v3_12884 = inttoptr i32 %v2_12884 to i32*
  %v4_12884 = load i32, i32* %v3_12884, align 4
  %v3_12888 = add i32 %v3_1287c, 8
  %v4_12888 = inttoptr i32 %v3_12888 to i32*
  store i32 %v4_12884, i32* %v4_12888, align 4
  %v0_1288c.pre = load i32, i32* %ip.global-to-local, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread2, %bb17
  %v0_1288c = phi i32 [ %v0_1287c, %.thread2 ], [ %v0_1288c.pre, %bb17 ]
  %v1_1288c = add i32 %v0_1288c, 8
  %v2_1288c = inttoptr i32 %v1_1288c to i32*
  %v3_1288c = load i32, i32* %v2_1288c, align 4
  store i32 %v3_1288c, i32* %r2.global-to-local, align 4
  %v1_12890 = add i32 %v0_1288c, 4
  %v2_12890 = inttoptr i32 %v1_12890 to i32*
  %v3_12890 = load i32, i32* %v2_12890, align 4
  %v2_12894 = icmp eq i32 %v3_1288c, 0
  br i1 %v2_12894, label %.thread4, label %bb18

bb18:                                             ; preds = %.thread3
  %v3_12898 = add i32 %v3_1288c, 4
  %v4_12898 = inttoptr i32 %v3_12898 to i32*
  store i32 %v3_12890, i32* %v4_12898, align 4
  br label %bb19

.thread4:                                         ; preds = %.thread3
  %v2_1289c = load i32, i32* %lr.global-to-local, align 4
  %v3_1289c = inttoptr i32 %v2_1289c to i32*
  store i32 %v3_12890, i32* %v3_1289c, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %.thread4
  %v5_128a0 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v5_128a0

dec_label_pc_128a4:                               ; preds = %dec_label_pc_1283c
  %v1_128a4 = add i32 %v0_1287c, 4
  %v2_128a4 = inttoptr i32 %v1_128a4 to i32*
  %v3_128a4 = load i32, i32* %v2_128a4, align 4
  store i32 %v3_128a4, i32* %ip.global-to-local, align 4
  %v2_128a8 = icmp eq i32 %v3_128a4, 0
  br i1 %v2_128a8, label %dec_label_pc_128a8.dec_label_pc_128b0.loopexit_crit_edge, label %dec_label_pc_1283c

dec_label_pc_128a8.dec_label_pc_128b0.loopexit_crit_edge: ; preds = %dec_label_pc_128a4
  br label %dec_label_pc_128b0

dec_label_pc_128b0:                               ; preds = %dec_label_pc_12854, %dec_label_pc_1282c, %dec_label_pc_128a8.dec_label_pc_128b0.loopexit_crit_edge, %dec_label_pc_12850
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_128a4, { 1, 2, 0 }
  uselistorder i32 %v0_1288c, { 1, 0 }
  uselistorder i32 %v1_12858, { 0, 2, 1, 3 }
  uselistorder i1 %v9_12848, { 1, 0 }
  uselistorder i32 %v2_1283c, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_1287c, { 3, 2, 1, 0, 5, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 0 }
  uselistorder label %dec_label_pc_128b0, { 2, 0, 3, 1 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_1283c, { 1, 0 }
}

define i32 @function_128b8() local_unnamed_addr {
dec_label_pc_128b8:
  %v0_128b8 = load i32, i32* @r2, align 4
  %v2_128b8 = icmp eq i32 %v0_128b8, 0
  %v0_128bc = load i32, i32* @r3, align 4
  %v1_128bc = load i32, i32* @r1, align 4
  %v2_128bc = add i32 %v1_128bc, 4
  %v3_128bc = inttoptr i32 %v2_128bc to i32*
  store i32 %v0_128bc, i32* %v3_128bc, align 4
  %v0_128c0 = load i32, i32* @r2, align 4
  %v1_128c0 = load i32, i32* @r1, align 4
  %v2_128c0 = add i32 %v1_128c0, 8
  %v3_128c0 = inttoptr i32 %v2_128c0 to i32*
  store i32 %v0_128c0, i32* %v3_128c0, align 4
  %v1_128c8 = load i32, i32* @r1, align 4
  br i1 %v2_128b8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_128b8
  %v2_128c4 = load i32, i32* @r2, align 4
  %v3_128c4 = add i32 %v2_128c4, 4
  %v4_128c4 = inttoptr i32 %v3_128c4 to i32*
  store i32 %v1_128c8, i32* %v4_128c4, align 4
  br label %bb1

.thread:                                          ; preds = %dec_label_pc_128b8
  %v2_128c8 = load i32, i32* @r0, align 4
  %v3_128c8 = inttoptr i32 %v2_128c8 to i32*
  store i32 %v1_128c8, i32* %v3_128c8, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %.thread
  %v0_128cc = load i32, i32* @r3, align 4
  %v2_128cc = icmp eq i32 %v0_128cc, 0
  br i1 %v2_128cc, label %bb3, label %bb2

bb2:                                              ; preds = %bb1
  %v1_128d0 = load i32, i32* @r1, align 4
  %v3_128d0 = add i32 %v0_128cc, 8
  %v4_128d0 = inttoptr i32 %v3_128d0 to i32*
  store i32 %v1_128d0, i32* %v4_128d0, align 4
  br label %bb3

bb3:                                              ; preds = %bb1, %bb2
  %v1_128d4 = load i32, i32* @r0, align 4
  ret i32 %v1_128d4

; uselistorder directives
  uselistorder i32 %v1_128c8, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_128d8() local_unnamed_addr {
dec_label_pc_128d8:
  %v0_128d8 = load i32, i32* @r2, align 4
  %v2_128d8 = icmp eq i32 %v0_128d8, 0
  %v1_128dc = load i32, i32* @r1, align 4
  br i1 %v2_128d8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_128d8
  %v2_128dc = load i32, i32* @r0, align 4
  %v3_128dc = inttoptr i32 %v2_128dc to i32*
  store i32 %v1_128dc, i32* %v3_128dc, align 4
  br label %bb2

.thread:                                          ; preds = %dec_label_pc_128d8
  %v3_128e0 = add i32 %v0_128d8, 4
  %v4_128e0 = inttoptr i32 %v3_128e0 to i32*
  store i32 %v1_128dc, i32* %v4_128e0, align 4
  br label %bb2

bb2:                                              ; preds = %bb, %.thread
  %v0_128e4 = load i32, i32* @r2, align 4
  %v1_128e4 = load i32, i32* @r1, align 4
  %v2_128e4 = add i32 %v1_128e4, 8
  %v3_128e4 = inttoptr i32 %v2_128e4 to i32*
  store i32 %v0_128e4, i32* %v3_128e4, align 4
  %v1_128e8 = load i32, i32* @r0, align 4
  ret i32 %v1_128e8

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_128ec(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_128ec:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_128ec = load i32, i32* @r4, align 4
  store i32 %v3_128ec, i32* %stack_var_-20, align 4
  %v2_128f0 = load i32, i32* %arg1, align 4
  store i32 %v2_128f0, i32* %r4.global-to-local, align 4
  %v2_128f4 = add i32 %arg3, %arg2
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_129102 = icmp eq i32 %v2_128f0, 0
  br i1 %v2_129102, label %dec_label_pc_129c0, label %dec_label_pc_12900

dec_label_pc_12900:                               ; preds = %dec_label_pc_128ec, %dec_label_pc_12908
  %v0_12950 = phi i32 [ %v0_12958, %dec_label_pc_12908 ], [ 0, %dec_label_pc_128ec ]
  %v0_12958 = phi i32 [ %v3_1290c, %dec_label_pc_12908 ], [ %v2_128f0, %dec_label_pc_128ec ]
  %v1_129145.in = phi i32 [ %v3_1290c, %dec_label_pc_12908 ], [ %v2_128f0, %dec_label_pc_128ec ]
  %v1_129145 = add i32 %v1_129145.in, 12
  %v3_12900 = icmp ult i32 %v1_129145, %arg2
  br i1 %v3_12900, label %dec_label_pc_12908, label %dec_label_pc_12920

dec_label_pc_12908:                               ; preds = %dec_label_pc_12900
  store i32 %v0_12958, i32* %r6.global-to-local, align 4
  %v1_1290c = add i32 %v0_12958, 4
  %v2_1290c = inttoptr i32 %v1_1290c to i32*
  %v3_1290c = load i32, i32* %v2_1290c, align 4
  store i32 %v3_1290c, i32* %r4.global-to-local, align 4
  %v2_12910 = icmp eq i32 %v3_1290c, 0
  br i1 %v2_12910, label %dec_label_pc_12910.dec_label_pc_129c0.loopexit_crit_edge, label %dec_label_pc_12900

dec_label_pc_12920:                               ; preds = %dec_label_pc_12900
  %v1_12920 = inttoptr i32 %v0_12958 to i32*
  %v2_12920 = load i32, i32* %v1_12920, align 4
  %v2_12924 = sub i32 %v0_12958, %v2_12920
  %v1_12928 = add i32 %v2_12924, 12
  %v3_1292c = icmp uge i32 %v1_12928, %v2_128f4
  %v9_1292c = icmp eq i32 %v1_12928, %v2_128f4
  %v2_12930 = xor i1 %v9_1292c, true
  %v3_12930 = and i1 %v3_1292c, %v2_12930
  br i1 %v3_12930, label %dec_label_pc_129c0, label %dec_label_pc_12934

dec_label_pc_12934:                               ; preds = %dec_label_pc_12920
  %v2_12934 = add i32 %v2_12920, %arg3
  store i32 %v2_12934, i32* %r7.global-to-local, align 4
  br i1 %v9_1292c, label %dec_label_pc_1293c, label %dec_label_pc_12968

dec_label_pc_1293c:                               ; preds = %dec_label_pc_12934
  %v2_1293c = icmp eq i32 %v0_12950, 0
  br i1 %v2_1293c, label %dec_label_pc_129b4, label %dec_label_pc_12944

dec_label_pc_12944:                               ; preds = %dec_label_pc_1293c
  %v1_12944 = add i32 %v0_12950, 12
  %v9_12948 = icmp eq i32 %v1_12944, %arg2
  br i1 %v9_12948, label %dec_label_pc_12950, label %dec_label_pc_129b4

dec_label_pc_12950:                               ; preds = %dec_label_pc_12944
  %v1_12950 = inttoptr i32 %v0_12950 to i32*
  %v2_12950 = load i32, i32* %v1_12950, align 4
  %v1_12954 = add i32 %v0_12950, 8
  %v2_12954 = inttoptr i32 %v1_12954 to i32*
  %v3_12954 = load i32, i32* %v2_12954, align 4
  store i32 %v3_12954, i32* @r2, align 4
  store i32 %v0_12958, i32* @r1, align 4
  %v2_1295c = add i32 %v2_12950, %v2_12934
  store i32 %v2_1295c, i32* %r7.global-to-local, align 4
  %v0_12960 = call i32 @function_128d8()
  br label %dec_label_pc_129b4

dec_label_pc_12968:                               ; preds = %dec_label_pc_12934
  %v1_12968 = add i32 %v0_12958, 4
  %v2_12968 = inttoptr i32 %v1_12968 to i32*
  %v3_12968 = load i32, i32* %v2_12968, align 4
  store i32 %v3_12968, i32* %r5.global-to-local, align 4
  %v2_1296c = icmp eq i32 %v3_12968, 0
  br i1 %v2_1296c, label %dec_label_pc_129a0, label %dec_label_pc_12974

dec_label_pc_12974:                               ; preds = %dec_label_pc_12968
  %v1_12974 = inttoptr i32 %v3_12968 to i32*
  %v2_12974 = load i32, i32* %v1_12974, align 4
  %v2_12978 = sub i32 %v3_12968, %v2_12974
  %v1_1297c = add i32 %v2_12978, 12
  %v9_12980 = icmp eq i32 %v2_128f4, %v1_1297c
  br i1 %v9_12980, label %dec_label_pc_12988, label %dec_label_pc_129a0

dec_label_pc_12988:                               ; preds = %dec_label_pc_12974
  store i32 %v0_12950, i32* @r2, align 4
  store i32 %v3_12968, i32* @r1, align 4
  %v2_12990 = add i32 %v2_12974, %v2_12934
  store i32 %v2_12990, i32* %r7.global-to-local, align 4
  %v0_12994 = call i32 @function_128d8()
  %v0_12998 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12998, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_129b4

dec_label_pc_129a0:                               ; preds = %dec_label_pc_12974, %dec_label_pc_12968
  %v2_129a0 = add i32 %v0_12958, %arg3
  store i32 %v2_129a0, i32* %r4.global-to-local, align 4
  store i32 %v3_12968, i32* @r3, align 4
  store i32 %v0_12950, i32* @r2, align 4
  store i32 %v2_129a0, i32* @r1, align 4
  %v0_129b0 = call i32 @function_128b8()
  br label %dec_label_pc_129b4

dec_label_pc_129b4:                               ; preds = %dec_label_pc_12944, %dec_label_pc_1293c, %dec_label_pc_12988, %dec_label_pc_12950, %dec_label_pc_129a0
  %v0_129b4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_129b4, i32* %r5.global-to-local, align 4
  %v0_129b8 = load i32, i32* %r7.global-to-local, align 4
  %v2_129b8 = inttoptr i32 %v0_129b4 to i32*
  store i32 %v0_129b8, i32* %v2_129b8, align 4
  br label %dec_label_pc_129d8

dec_label_pc_12910.dec_label_pc_129c0.loopexit_crit_edge: ; preds = %dec_label_pc_12908
  br label %dec_label_pc_129c0

dec_label_pc_129c0:                               ; preds = %dec_label_pc_128ec, %dec_label_pc_12910.dec_label_pc_129c0.loopexit_crit_edge, %dec_label_pc_12920
  %v1_129c0 = add i32 %v2_128f4, -12
  store i32 %v1_129c0, i32* %r5.global-to-local, align 4
  %v3_129c4 = inttoptr i32 %v1_129c0 to i32*
  store i32 %arg3, i32* %v3_129c4, align 4
  %v0_129c8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_129c8, i32* @r3, align 4
  %v0_129cc = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_129cc, i32* @r2, align 4
  %v0_129d0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_129d0, i32* @r1, align 4
  %v0_129d4 = call i32 @function_128b8()
  br label %dec_label_pc_129d8

dec_label_pc_129d8:                               ; preds = %dec_label_pc_129b4, %dec_label_pc_129c0
  %v0_129d8 = load i32, i32* %r5.global-to-local, align 4
  %v2_129dc = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_129dc, i32* @r4, align 4
  ret i32 %v0_129d8

; uselistorder directives
  uselistorder i32 %v3_12968, { 0, 1, 3, 2, 4, 5 }
  uselistorder i1 %v9_1292c, { 1, 0 }
  uselistorder i32 %v3_1290c, { 2, 3, 1, 0 }
  uselistorder i32 %v0_12958, { 0, 2, 1, 3, 4, 6, 7, 5 }
  uselistorder i32 %v0_12950, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 ()* @function_128b8, { 1, 0 }
  uselistorder i32* @r3, { 5, 8, 6, 7, 0, 9, 10, 11, 1, 2, 3, 12, 4 }
  uselistorder i32 ()* @function_128d8, { 1, 0 }
  uselistorder i32 %arg3, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_129d8, { 1, 0 }
  uselistorder label %dec_label_pc_129c0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_129b4, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_12900, { 1, 0 }
}

define i32 @function_129e0() local_unnamed_addr {
dec_label_pc_129fc.lr.ph:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %v2_129e0 = ptrtoint i32* %stack_var_-268 to i32
  %v1_129f0 = call i32 @function_12f78()
  store i32 31, i32* %r1.global-to-local, align 4
  %v2_129fc = ptrtoint i32* %stack_var_0 to i32
  br label %dec_label_pc_129fc

dec_label_pc_129fc:                               ; preds = %dec_label_pc_129fc.lr.ph, %dec_label_pc_129fc
  %v1_12a00 = phi i32 [ 31, %dec_label_pc_129fc.lr.ph ], [ %v1_12a0c, %dec_label_pc_129fc ]
  %v4_12a00 = mul i32 %v1_12a00, 4
  %v5_12a00 = add i32 %v4_12a00, %v2_129fc
  %v2_12a08 = add i32 %v5_12a00, -128
  %v3_12a08 = inttoptr i32 %v2_12a08 to i32*
  store i32 0, i32* %v3_12a08, align 4
  %v0_12a0c = load i32, i32* %r1.global-to-local, align 4
  %v1_12a0c = add i32 %v0_12a0c, -1
  store i32 %v1_12a0c, i32* %r1.global-to-local, align 4
  %v6_12a0c = icmp slt i32 %v1_12a0c, 0
  br i1 %v6_12a0c, label %dec_label_pc_12a14, label %dec_label_pc_129fc

dec_label_pc_12a14:                               ; preds = %dec_label_pc_129fc
  %v2_12a14 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_12a14, i32* @r4, align 4
  store i32 %v2_12a14, i32* @r0, align 4
  store i32 6, i32* @r1, align 4
  %v0_12a20 = call i32 @function_1239c()
  %v2_12a24 = icmp eq i32 %v0_12a20, 0
  br i1 %v2_12a24, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_12a14
  store i32 %v2_12a14, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_12a14, %bb
  store i32 76344, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_12a24, i32 ptrtoint (i32* @global_var_11bdc.404 to i32))
  %v2_12a3c = load i32, i32* @global_var_1c910.406, align 4
  %v2_12a40 = icmp eq i32 %v2_12a3c, 0
  br i1 %v2_12a40, label %dec_label_pc_12a48, label %dec_label_pc_12a78

dec_label_pc_12a48:                               ; preds = %.thread1
  store i32 1, i32* @global_var_1c910.406, align 4
  br label %dec_label_pc_12a50

dec_label_pc_12a50:                               ; preds = %dec_label_pc_12ac8, %dec_label_pc_12a48
  %v1_12a5c = call i32 @function_12f78()
  %v1_12a64 = call i32 @function_1410c(i32 6)
  store i32 76408, i32* @lr, align 4
  %v1_12a74 = call i32 @function_12f78()
  %v2_12a7c.pre = load i32, i32* @global_var_1c910.406, align 4
  br label %dec_label_pc_12a78

dec_label_pc_12a78:                               ; preds = %.thread1, %dec_label_pc_12a50
  %v0_12aec = phi i32 [ %v2_12a3c, %.thread1 ], [ %v2_12a7c.pre, %dec_label_pc_12a50 ]
  store i32 ptrtoint (i32* @global_var_1c910.406 to i32), i32* %ip.global-to-local, align 4
  %v7_12a80 = icmp eq i32 %v0_12aec, 1
  br i1 %v7_12a80, label %dec_label_pc_12ab0.lr.ph, label %dec_label_pc_12ae4

dec_label_pc_12ab0.lr.ph:                         ; preds = %dec_label_pc_12a78
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 140, i32* @r2, align 4
  store i32 2, i32* @global_var_1c910.406, align 4
  %v2_12a9c = bitcast i32* %stack_var_-268 to i8*
  %v3_12a9c = call i32 @function_11f70(i8* %v2_12a9c, i32 0)
  store i32 0, i32* %stack_var_-268, align 4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12ab0

dec_label_pc_12ab0:                               ; preds = %dec_label_pc_12ab0.lr.ph, %dec_label_pc_12ab0
  %v1_12ab4 = phi i32 [ 31, %dec_label_pc_12ab0.lr.ph ], [ %v1_12ac0, %dec_label_pc_12ab0 ]
  %v4_12ab4 = mul i32 %v1_12ab4, 4
  %v5_12ab4 = add i32 %v4_12ab4, %v2_129fc
  %v2_12abc = add i32 %v5_12ab4, -264
  %v3_12abc = inttoptr i32 %v2_12abc to i32*
  store i32 -1, i32* %v3_12abc, align 4
  %v0_12ac0 = load i32, i32* %r1.global-to-local, align 4
  %v1_12ac0 = add i32 %v0_12ac0, -1
  store i32 %v1_12ac0, i32* %r1.global-to-local, align 4
  %v6_12ac0 = icmp slt i32 %v1_12ac0, 0
  br i1 %v6_12ac0, label %dec_label_pc_12ac8, label %dec_label_pc_12ab0

dec_label_pc_12ac8:                               ; preds = %dec_label_pc_12ab0
  store i32 %v2_129e0, i32* %r1.global-to-local, align 4
  %v4_12adc = call i32 @function_13264(i32 6, i32* nonnull %stack_var_-268, i32 0)
  br label %dec_label_pc_12a50

dec_label_pc_12ae4:                               ; preds = %dec_label_pc_12a78
  %v7_12ae4 = icmp eq i32 %v0_12aec, 2
  br i1 %v7_12ae4, label %dec_label_pc_12aec, label %dec_label_pc_12af8

dec_label_pc_12aec:                               ; preds = %dec_label_pc_12ae4
  store i32 3, i32* @global_var_1c910.406, align 4
  %v0_12af4 = call i32 @function_129e0()
  %v2_12af8.pre = load i32, i32* @global_var_1c910.406, align 4
  br label %dec_label_pc_12af8

dec_label_pc_12af8:                               ; preds = %dec_label_pc_12ae4, %dec_label_pc_12aec
  %v1_12b00 = phi i32 [ %v0_12aec, %dec_label_pc_12ae4 ], [ %v2_12af8.pre, %dec_label_pc_12aec ]
  %v7_12afc = icmp eq i32 %v1_12b00, 3
  br i1 %v7_12afc, label %bb27, label %.thread3

bb27:                                             ; preds = %dec_label_pc_12af8
  %v2_12b08 = load i32, i32* %ip.global-to-local, align 4
  %v3_12b08 = inttoptr i32 %v2_12b08 to i32*
  store i32 4, i32* %v3_12b08, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_12af8, %bb27
  call void @__pseudo_cond_branch(i1 %v7_12afc, i32 ptrtoint (i32* @global_var_1337c.408 to i32))
  br label %dec_label_pc_12b10

dec_label_pc_12b10:                               ; preds = %dec_label_pc_12b10, %.thread3
  %v0_12b10 = call i32 @function_129e0()
  br label %dec_label_pc_12b10

; uselistorder directives
  uselistorder i32 %v1_12ac0, { 2, 1, 0 }
  uselistorder i32 %v1_12a0c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-268, { 1, 2, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 0, 1, 5, 6, 8, 7, 2 }
  uselistorder i32* @global_var_1c910.406, { 1, 2, 0, 6, 3, 4, 5 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_12af8, { 1, 0 }
  uselistorder label %dec_label_pc_12ab0, { 1, 0 }
  uselistorder label %dec_label_pc_12a78, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_129fc, { 1, 0 }
}

define i32 @function_12b28(i8* %arg1) local_unnamed_addr {
dec_label_pc_12b28:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_12b3c = load i32, i32* @r4, align 4
  store i32 %v3_12b3c, i32* %stack_var_-36, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 10, i32* %r5.global-to-local, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  %v2_12b60.pre = load i32, i32* bitcast (i32** @global_var_1c87c.411 to i32*), align 4
  br label %dec_label_pc_12b58

dec_label_pc_12b58:                               ; preds = %dec_label_pc_12b58, %dec_label_pc_12b28
  %v0_12b90 = phi i32 [ %tmp, %dec_label_pc_12b28 ], [ %v1_12b54, %dec_label_pc_12b58 ]
  store i32 %v0_12b90, i32* %r4.global-to-local, align 4
  %v1_12b5c = inttoptr i32 %v0_12b90 to i8*
  %v2_12b5c = load i8, i8* %v1_12b5c, align 1
  %v3_12b5c = zext i8 %v2_12b5c to i32
  %v3_12b64 = mul nuw nsw i32 %v3_12b5c, 2
  %v4_12b64 = add i32 %v3_12b64, %v2_12b60.pre
  %v5_12b64 = inttoptr i32 %v4_12b64 to i8*
  %v6_12b64 = load i8, i8* %v5_12b64, align 1
  %v1_12b68 = and i8 %v6_12b64, 32
  %v2_12b68 = icmp eq i8 %v1_12b68, 0
  %v1_12b54 = add i32 %v0_12b90, 1
  br i1 %v2_12b68, label %dec_label_pc_12b70, label %dec_label_pc_12b58

dec_label_pc_12b70:                               ; preds = %dec_label_pc_12b58
  %v7_12b70 = icmp eq i8 %v2_12b5c, 43
  br i1 %v7_12b70, label %dec_label_pc_12b90, label %dec_label_pc_12b78

dec_label_pc_12b78:                               ; preds = %dec_label_pc_12b70
  %v7_12b78 = icmp eq i8 %v2_12b5c, 45
  br i1 %v7_12b78, label %dec_label_pc_12b90, label %bb

bb:                                               ; preds = %dec_label_pc_12b78
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_12bec

dec_label_pc_12b90:                               ; preds = %dec_label_pc_12b70, %dec_label_pc_12b78
  %storemerge30 = phi i32 [ 1, %dec_label_pc_12b78 ], [ 0, %dec_label_pc_12b70 ]
  store i32 %storemerge30, i32* %r7.global-to-local, align 4
  store i32 %v1_12b54, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12bec

dec_label_pc_12bec:                               ; preds = %bb, %dec_label_pc_12b90
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v2_12bf4 = call i32 @function_116e8(i32 -1, i32 10)
  %v0_12bf8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12bf8, i32* @r1, align 4
  store i32 -1, i32* @r0, align 4
  %v1_12c04 = urem i32 %v2_12bf4, 256
  store i32 %v1_12c04, i32* %sl.global-to-local, align 4
  %v0_12c08 = call i32 @function_115d8()
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v0_12c08, i32* %r8.global-to-local, align 4
  %v0_12c1c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12c1c

dec_label_pc_12c18:                               ; preds = %bb48, %dec_label_pc_12c78
  %v0_12c18 = phi i32 [ %v1_12c48, %bb48 ], [ %v0_12c18.pre, %dec_label_pc_12c78 ]
  store i32 %v0_12c18, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12c1c

dec_label_pc_12c1c:                               ; preds = %dec_label_pc_12bec, %dec_label_pc_12c18
  %v0_12c48 = phi i32 [ %v0_12c1c.pre, %dec_label_pc_12bec ], [ %v0_12c18, %dec_label_pc_12c18 ]
  %v1_12c1c = inttoptr i32 %v0_12c48 to i8*
  %v2_12c1c = load i8, i8* %v1_12c1c, align 1
  %v3_12c1c = zext i8 %v2_12c1c to i32
  %v1_12c20 = add nsw i32 %v3_12c1c, -48
  %v1_12c24 = urem i32 %v1_12c20, 256
  %v1_12c2c = or i32 %v3_12c1c, 32
  %tmp56 = icmp ult i32 %v1_12c24, 10
  br i1 %tmp56, label %bb43, label %dec_label_pc_12c34

dec_label_pc_12c34:                               ; preds = %dec_label_pc_12c1c
  %tmp57 = icmp ugt i32 %v1_12c2c, 96
  br i1 %tmp57, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_12c34
  %v1_12c38 = add nsw i32 %v1_12c2c, -87
  %v5_12c40 = urem i32 %v1_12c38, 256
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_12c1c, %dec_label_pc_12c34, %bb42
  %v3_12c70 = phi i32 [ %v1_12c24, %dec_label_pc_12c1c ], [ 40, %dec_label_pc_12c34 ], [ %v5_12c40, %bb42 ]
  %v1_12c44 = load i32, i32* %r5.global-to-local, align 4
  %v1_12c48 = add i32 %v0_12c48, 1
  store i32 %v1_12c48, i32* %r4.global-to-local, align 4
  %v6_12c4c = icmp slt i32 %v3_12c70, %v1_12c44
  br i1 %v6_12c4c, label %dec_label_pc_12c50, label %dec_label_pc_12c90

dec_label_pc_12c50:                               ; preds = %bb43
  %v0_12c50 = load i32, i32* %ip.global-to-local, align 4
  %v1_12c50 = load i32, i32* %r8.global-to-local, align 4
  %v9_12c50 = icmp eq i32 %v0_12c50, %v1_12c50
  br i1 %v9_12c50, label %.thread, label %bb44

.thread:                                          ; preds = %dec_label_pc_12c50
  br label %dec_label_pc_12c60

bb44:                                             ; preds = %dec_label_pc_12c50
  %v3_12c50 = icmp ult i32 %v0_12c50, %v1_12c50
  br i1 %v3_12c50, label %dec_label_pc_12c60, label %dec_label_pc_12c78

dec_label_pc_12c60:                               ; preds = %bb44, %.thread
  %v4_12c681727 = phi i32 [ 1, %.thread ], [ 0, %bb44 ]
  %v1_12c60 = load i32, i32* %sl.global-to-local, align 4
  %v3_12c60 = icmp uge i32 %v3_12c70, %v1_12c60
  %v9_12c60 = icmp eq i32 %v3_12c70, %v1_12c60
  %v2_12c64 = xor i1 %v3_12c60, true
  %v3_12c64 = or i1 %v9_12c60, %v2_12c64
  br i1 %v3_12c64, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_12c60
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_12c60, %bb45
  %v4_12c68 = phi i32 [ %v4_12c681727, %dec_label_pc_12c60 ], [ 0, %bb45 ]
  %v2_12c68 = xor i1 %v9_12c60, true
  %v3_12c68 = and i1 %v3_12c60, %v2_12c68
  br i1 %v3_12c68, label %bb47, label %thread-pre-split

bb47:                                             ; preds = %bb46
  %v5_12c68 = urem i32 %v4_12c68, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb46, %bb47
  %v0_12c6c = phi i32 [ %v5_12c68, %bb47 ], [ %v4_12c68, %bb46 ]
  %v2_12c6c = icmp eq i32 %v0_12c6c, 0
  br i1 %v2_12c6c, label %bb48, label %dec_label_pc_12c78

bb48:                                             ; preds = %thread-pre-split
  %v4_12c70 = mul i32 %v0_12c50, %v1_12c44
  %v5_12c70 = add i32 %v4_12c70, %v3_12c70
  store i32 %v5_12c70, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12c18

dec_label_pc_12c78:                               ; preds = %bb44, %thread-pre-split
  %v0_12c78 = call i32 @function_11f08()
  %v0_12c7c = load i32, i32* %r7.global-to-local, align 4
  %v1_12c7c = load i32, i32* %fp.global-to-local, align 4
  %v2_12c7c = and i32 %v1_12c7c, %v0_12c7c
  store i32 %v2_12c7c, i32* %r7.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  %v2_12c88 = inttoptr i32 %v0_12c78 to i32*
  store i32 34, i32* %v2_12c88, align 4
  %v0_12c18.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12c18

dec_label_pc_12c90:                               ; preds = %bb43
  %v0_12c90.pre = load i32, i32* %sb.global-to-local, align 4
  %v2_12c90 = icmp eq i32 %v0_12c90.pre, 0
  br i1 %v2_12c90, label %bb50, label %bb49

bb49:                                             ; preds = %dec_label_pc_12c90
  %v1_12c94 = load i32, i32* %r6.global-to-local, align 4
  %v3_12c94 = inttoptr i32 %v0_12c90.pre to i32*
  store i32 %v1_12c94, i32* %v3_12c94, align 4
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_12c90, %bb49
  %v0_12c98 = load i32, i32* %r7.global-to-local, align 4
  %v2_12c98 = icmp eq i32 %v0_12c98, 0
  %. = select i1 %v2_12c98, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v0_12ca4 = load i32, i32* %fp.global-to-local, align 4
  %v2_12ca4 = icmp eq i32 %v0_12ca4, 0
  %v0_12cc8.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_12ca4, label %dec_label_pc_12cc0, label %bb53

bb53:                                             ; preds = %bb50
  %tmp58 = icmp ugt i32 %v0_12cc8.pre.pre, %.
  br i1 %tmp58, label %dec_label_pc_12cb0, label %dec_label_pc_12cc0

dec_label_pc_12cb0:                               ; preds = %bb53
  %v0_12cb0 = call i32 @function_11f08()
  %v2_12cb8 = inttoptr i32 %v0_12cb0 to i32*
  store i32 34, i32* %v2_12cb8, align 4
  %v0_12cbc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12cbc, i32* %ip.global-to-local, align 4
  %v0_12cc0.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_12cc0

dec_label_pc_12cc0:                               ; preds = %bb53, %bb50, %dec_label_pc_12cb0
  %v0_12cc8.pre = phi i32 [ %v0_12cc8.pre.pre, %bb53 ], [ %v0_12cbc, %dec_label_pc_12cb0 ], [ %v0_12cc8.pre.pre, %bb50 ]
  %v0_12cc0 = phi i32 [ %v0_12c98, %bb53 ], [ %v0_12cc0.pre, %dec_label_pc_12cb0 ], [ %v0_12c98, %bb50 ]
  %v2_12cc0 = icmp eq i32 %v0_12cc0, 0
  br i1 %v2_12cc0, label %dec_label_pc_12cc0._crit_edge, label %bb54

bb54:                                             ; preds = %dec_label_pc_12cc0
  %v2_12cc4 = sub i32 0, %v0_12cc8.pre
  store i32 %v2_12cc4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12cc0._crit_edge

dec_label_pc_12cc0._crit_edge:                    ; preds = %dec_label_pc_12cc0, %bb54
  %v0_12cc8 = phi i32 [ %v2_12cc4, %bb54 ], [ %v0_12cc8.pre, %dec_label_pc_12cc0 ]
  %v2_12ccc = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_12ccc, i32* @r4, align 4
  ret i32 %v0_12cc8

; uselistorder directives
  uselistorder i32 %v0_12cc8.pre, { 1, 0 }
  uselistorder i32 %v0_12cc8.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v0_12c90.pre, { 1, 0 }
  uselistorder i32 %v4_12c68, { 1, 0 }
  uselistorder i1 %v3_12c60, { 1, 0 }
  uselistorder i32 %v1_12c60, { 1, 0 }
  uselistorder i32 %v1_12c48, { 1, 0 }
  uselistorder i32 %v1_12c2c, { 1, 0 }
  uselistorder i32 %v1_12c24, { 1, 0 }
  uselistorder i32 %v0_12c18, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 1, 4, 0, 5 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 5, 2, 3, 4, 6 }
  uselistorder i32 ()* @function_115d8, { 2, 1, 4, 3, 0 }
  uselistorder i32 (i32, i32)* @function_116e8, { 1, 4, 0, 11, 10, 6, 3, 9, 8, 7, 2, 5 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder i8 32, { 0, 8, 9, 10, 1, 11, 12, 13, 2, 3, 4, 5, 6, 7 }
  uselistorder label %dec_label_pc_12cc0._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_12cc0, { 2, 0, 1 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_12c78, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %bb43, { 2, 1, 0 }
  uselistorder label %dec_label_pc_12c1c, { 1, 0 }
  uselistorder label %dec_label_pc_12c18, { 1, 0 }
  uselistorder label %dec_label_pc_12bec, { 1, 0 }
  uselistorder label %dec_label_pc_12b90, { 1, 0 }
}

define i32 @function_12cd4(i32 %arg1) local_unnamed_addr {
dec_label_pc_12cd4:
  %stack_var_-16 = alloca i32, align 4
  %v2_12cd4 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r4, align 4
  store i32 %v2_12cd4, i32* @r0, align 4
  %v8_12cf0 = call i32 @function_12f80(i32 %v2_12cd4, i32 ptrtoint (i32* @global_var_12f78.360 to i32), i32 ptrtoint (i32* @global_var_1c85c.414 to i32), i32 77696, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v1_12d00 = call i32 @function_12f78()
  %v2_12d08 = load i32, i32* @global_var_1c914.418, align 4
  %v2_12d0c = icmp eq i32 %v2_12d08, 0
  br i1 %v2_12d0c, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_12cd4
  call void @__pseudo_branch(i32 %v2_12d08)
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_12cd4, %bb
  store i32 %v2_12cd4, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_12d30.420 to i32), i32* @lr, align 4
  %v8_12d2c = call i32 @function_12f80(i32 %v2_12cd4, i32 1, i32 ptrtoint (i32* @global_var_1c85c.414 to i32), i32 77696, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v8_12d2c, i32* @r0, align 4
  %v1_12d30 = call i32 @function_12f0c(i32 %v8_12d2c)
  store i1 true, i1* @cpsr_z, align 1
  %v0_12d44 = load i32, i32* @r4, align 4
  %v1_12d48 = call i32 @function_1337c(i32 %v0_12d44)
  unreachable

; uselistorder directives
  uselistorder i32 %v2_12cd4, { 1, 0, 3, 2 }
  uselistorder i32 ()* @function_12f78, { 4, 3, 2, 1, 18, 17, 16, 15, 14, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 21, 20, 19 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @function_12f80, { 1, 0, 5, 4, 3, 2 }
  uselistorder i32 77696, { 1, 0, 3, 4, 2, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1c85c.414 to i32), { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_12f78.360 to i32), { 0, 3, 1, 2 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_12d68(i32 %arg1) local_unnamed_addr {
dec_label_pc_12d68:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-424 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_12d68 = load i32, i32* @r4, align 4
  store i32 %v3_12d68, i32* %stack_var_-20, align 4
  %v6_12d68 = load i32, i32* @r5, align 4
  %v9_12d68 = load i32, i32* @r6, align 4
  %v16_12d68 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* @ip, align 4
  %v2_12d6c = icmp eq i32 %arg1, 0
  %v2_12d70 = ptrtoint i32* %stack_var_-424 to i32
  br i1 %v2_12d6c, label %dec_label_pc_12ef4, label %dec_label_pc_12d88.preheader

dec_label_pc_12d88.preheader:                     ; preds = %dec_label_pc_12d68
  store i32 31, i32* %r1.global-to-local, align 4
  %v5_12d9017 = add i32 %v16_12d68, 124
  br label %dec_label_pc_12d80

dec_label_pc_12d80:                               ; preds = %dec_label_pc_12d88.preheader, %dec_label_pc_12d80
  %v5_12d9018 = phi i32 [ %v5_12d9017, %dec_label_pc_12d88.preheader ], [ %v5_12d90, %dec_label_pc_12d80 ]
  %v2_12d84 = add i32 %v5_12d9018, -136
  %v3_12d84 = inttoptr i32 %v2_12d84 to i32*
  store i32 0, i32* %v3_12d84, align 4
  %v0_12d88.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_12d88 = add i32 %v0_12d88.pre, -1
  store i32 %v1_12d88, i32* %r1.global-to-local, align 4
  %v6_12d88 = icmp slt i32 %v1_12d88, 0
  %v4_12d90 = mul i32 %v1_12d88, 4
  %v5_12d90 = add i32 %v4_12d90, %v16_12d68
  br i1 %v6_12d88, label %dec_label_pc_12d98, label %dec_label_pc_12d80

dec_label_pc_12d98:                               ; preds = %dec_label_pc_12d80
  %v2_12d98 = ptrtoint i32* %stack_var_-156 to i32
  store i32 0, i32* @r5, align 4
  store i32 %v2_12d98, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_12da8 = load i32, i32* @ip, align 4
  store i32 %v0_12da8, i32* %stack_var_-28, align 4
  %v0_12db0 = call i32 @function_1239c()
  store i32 %v0_12db0, i32* %r0.global-to-local, align 4
  %v1_12db4 = load i32, i32* @r5, align 4
  %v5_12db8 = icmp slt i32 %v0_12db0, %v1_12db4
  br i1 %v5_12db8, label %dec_label_pc_12efc, label %dec_label_pc_12dbc

dec_label_pc_12dbc:                               ; preds = %dec_label_pc_12d98
  %v2_12dbc = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_12dbc, i32* @r4, align 4
  store i32 %v1_12db4, i32* %r0.global-to-local, align 4
  store i32 %v2_12d98, i32* %r1.global-to-local, align 4
  %v3_12dcc = bitcast i32* %stack_var_-156 to %_TYPEDEF_sigset_t*
  %v4_12dcc = call i32 @function_11bdc(i32 %v1_12db4, %_TYPEDEF_sigset_t* %v3_12dcc, i32 %v2_12dbc)
  store i32 %v4_12dcc, i32* %r0.global-to-local, align 4
  %v1_12dd0 = load i32, i32* @r5, align 4
  %v9_12dd0 = icmp eq i32 %v4_12dcc, %v1_12dd0
  br i1 %v9_12dd0, label %dec_label_pc_12dd8, label %dec_label_pc_12efc

dec_label_pc_12dd8:                               ; preds = %dec_label_pc_12dbc
  store i32 17, i32* %r1.global-to-local, align 4
  store i32 %v2_12dbc, i32* %r0.global-to-local, align 4
  %v2_12de0 = call i32 @function_12378(i32 %v2_12dbc, i32 17)
  store i32 %v2_12de0, i32* %r0.global-to-local, align 4
  %v1_12de4 = load i32, i32* @r5, align 4
  %v9_12de4 = icmp eq i32 %v2_12de0, %v1_12de4
  br i1 %v9_12de4, label %dec_label_pc_12dfc.preheader, label %dec_label_pc_12dd8.dec_label_pc_12ec4_crit_edge

dec_label_pc_12dd8.dec_label_pc_12ec4_crit_edge:  ; preds = %dec_label_pc_12dd8
  %.pre = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_12ec4

dec_label_pc_12dfc.preheader:                     ; preds = %dec_label_pc_12dd8
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12df4

dec_label_pc_12df4:                               ; preds = %dec_label_pc_12dfc.preheader, %dec_label_pc_12df4
  %v5_12e0416 = phi i32 [ %v5_12d9017, %dec_label_pc_12dfc.preheader ], [ %v5_12e04, %dec_label_pc_12df4 ]
  %v2_12df8 = add i32 %v5_12e0416, -136
  %v3_12df8 = inttoptr i32 %v2_12df8 to i32*
  store i32 0, i32* %v3_12df8, align 4
  %v0_12dfc.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_12dfc = add i32 %v0_12dfc.pre, -1
  store i32 %v1_12dfc, i32* %r1.global-to-local, align 4
  %v6_12dfc = icmp slt i32 %v1_12dfc, 0
  %v4_12e04 = mul i32 %v1_12dfc, 4
  %v5_12e04 = add i32 %v4_12e04, %v16_12d68
  br i1 %v6_12dfc, label %dec_label_pc_12e0c, label %dec_label_pc_12df4

dec_label_pc_12e0c:                               ; preds = %dec_label_pc_12df4
  store i32 %v2_12d98, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_12e14 = call i32 @function_1239c()
  store i32 %v0_12e14, i32* %r0.global-to-local, align 4
  %v1_12e18 = icmp slt i32 %v0_12e14, 0
  br i1 %v1_12e18, label %dec_label_pc_12efc, label %dec_label_pc_12e20

dec_label_pc_12e20:                               ; preds = %dec_label_pc_12e0c
  store i32 17, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_12e2c = call i32 @function_13264(i32 17, i32* null, i32 %v2_12d70)
  store i32 %v4_12e2c, i32* %r0.global-to-local, align 4
  %v1_12e30 = icmp slt i32 %v4_12e2c, 0
  br i1 %v1_12e30, label %dec_label_pc_12e38, label %dec_label_pc_12e60

dec_label_pc_12e38:                               ; preds = %dec_label_pc_12e20
  %v0_12e38 = call i32 @function_11f08()
  store i32 %v2_12dbc, i32* %r1.global-to-local, align 4
  store i32 %v0_12e38, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_12e4c = inttoptr i32 %v0_12e38 to i32*
  %v2_12e4c = load i32, i32* %v1_12e4c, align 4
  store i32 %v2_12e4c, i32* @r4, align 4
  %v3_12e50 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_12e50 = call i32 @function_11bdc(i32 2, %_TYPEDEF_sigset_t* %v3_12e50, i32 0)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v0_12e58 = load i32, i32* @r4, align 4
  %v1_12e58 = load i32, i32* %r5.global-to-local, align 4
  %v2_12e58 = inttoptr i32 %v1_12e58 to i32*
  store i32 %v0_12e58, i32* %v2_12e58, align 4
  %v17_12f04.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12f00

dec_label_pc_12e60:                               ; preds = %dec_label_pc_12e20
  %v2_12e60 = load i32, i32* %stack_var_-424, align 4
  %v7_12e64 = icmp eq i32 %v2_12e60, 1
  %v2_12e6c = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_12e6c, i32* @r4, align 4
  br i1 %v7_12e64, label %dec_label_pc_12e74, label %dec_label_pc_12ea8

dec_label_pc_12e74:                               ; preds = %dec_label_pc_12e60
  store i32 %v2_12e6c, i32* %r1.global-to-local, align 4
  store i32 %v2_12e6c, i32* %r0.global-to-local, align 4
  %v2_12e7c = bitcast i32* %stack_var_-28 to %timespec*
  %v3_12e7c = call i32 @function_13700(%timespec* %v2_12e7c, i32 %v2_12e6c)
  store i32 %v3_12e7c, i32* %r0.global-to-local, align 4
  store i32 %v3_12e7c, i32* %r6.global-to-local, align 4
  %v0_12e84 = call i32 @function_11f08()
  store i32 %v2_12dbc, i32* %r1.global-to-local, align 4
  store i32 %v0_12e84, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_12e98 = inttoptr i32 %v0_12e84 to i32*
  %v2_12e98 = load i32, i32* %v1_12e98, align 4
  store i32 %v2_12e98, i32* @r4, align 4
  %v3_12e9c = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_12e9c = call i32 @function_11bdc(i32 2, %_TYPEDEF_sigset_t* %v3_12e9c, i32 0)
  store i32 %v4_12e9c, i32* %r0.global-to-local, align 4
  %v0_12ea0 = load i32, i32* @r4, align 4
  %v1_12ea0 = load i32, i32* %r5.global-to-local, align 4
  %v2_12ea0 = inttoptr i32 %v1_12ea0 to i32*
  store i32 %v0_12ea0, i32* %v2_12ea0, align 4
  %v0_12ed0.pr = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12ed0

dec_label_pc_12ea8:                               ; preds = %dec_label_pc_12e60
  store i32 %v2_12dbc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_12eb4 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_12eb4 = call i32 @function_11bdc(i32 2, %_TYPEDEF_sigset_t* %v3_12eb4, i32 0)
  store i32 %v4_12eb4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12ec4

dec_label_pc_12ec4:                               ; preds = %dec_label_pc_12dd8.dec_label_pc_12ec4_crit_edge, %dec_label_pc_12ea8
  %storemerge.pre-phi = phi i32 [ %.pre, %dec_label_pc_12dd8.dec_label_pc_12ec4_crit_edge ], [ %v2_12e6c, %dec_label_pc_12ea8 ]
  store i32 %storemerge.pre-phi, i32* %r0.global-to-local, align 4
  store i32 %storemerge.pre-phi, i32* %r1.global-to-local, align 4
  %v2_12ec8 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_12ec8 = call i32 @function_13700(%timespec* %v2_12ec8, i32 %storemerge.pre-phi)
  store i32 %v3_12ec8, i32* %r0.global-to-local, align 4
  store i32 %v3_12ec8, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12ed0

dec_label_pc_12ed0:                               ; preds = %dec_label_pc_12e74, %dec_label_pc_12ec4
  %v0_12ed0 = phi i32 [ %v0_12ed0.pr, %dec_label_pc_12e74 ], [ %v3_12ec8, %dec_label_pc_12ec4 ]
  %v2_12ed0 = icmp eq i32 %v0_12ed0, 0
  br i1 %v2_12ed0, label %dec_label_pc_12ef4, label %dec_label_pc_12ed8

dec_label_pc_12ed8:                               ; preds = %dec_label_pc_12ed0
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_12ee0 = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_12ee0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12f00

dec_label_pc_12ef4:                               ; preds = %dec_label_pc_12d68, %dec_label_pc_12ed0
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12f00

dec_label_pc_12efc:                               ; preds = %dec_label_pc_12dbc, %dec_label_pc_12e0c, %dec_label_pc_12d98
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12f00

dec_label_pc_12f00:                               ; preds = %dec_label_pc_12ed8, %dec_label_pc_12ef4, %dec_label_pc_12e38, %dec_label_pc_12efc
  %v17_12f04 = phi i32 [ %v3_12ee0, %dec_label_pc_12ed8 ], [ 0, %dec_label_pc_12ef4 ], [ %v17_12f04.pre, %dec_label_pc_12e38 ], [ -1, %dec_label_pc_12efc ]
  %v2_12f04 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_12f04, i32* @r4, align 4
  store i32 %v6_12d68, i32* @r5, align 4
  store i32 %v9_12d68, i32* @r6, align 4
  ret i32 %v17_12f04

; uselistorder directives
  uselistorder i32 %storemerge.pre-phi, { 1, 2, 0 }
  uselistorder i32 %v2_12e6c, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_12dfc, { 0, 2, 1 }
  uselistorder i32 %v2_12dbc, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32 %v1_12db4, { 1, 0, 2 }
  uselistorder i32 %v1_12d88, { 0, 2, 1 }
  uselistorder i32 %v16_12d68, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 0, 2, 1 }
  uselistorder i32* %stack_var_-284, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-28, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 8, 9, 10, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 0, 7, 6, 9, 8, 21, 10, 12, 13, 11, 15, 14, 16, 22, 17, 20, 18, 19, 1 }
  uselistorder i32 (i32, i32*, i32)* @function_13264, { 1, 2, 0 }
  uselistorder i32 (i32, %_TYPEDEF_sigset_t*, i32)* @function_11bdc, { 1, 2, 3, 4, 0 }
  uselistorder i32 ()* @function_1239c, { 2, 1, 0, 3, 4 }
  uselistorder i32 -136, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12f00, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_12efc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12ef4, { 1, 0 }
  uselistorder label %dec_label_pc_12ed0, { 1, 0 }
  uselistorder label %dec_label_pc_12ec4, { 1, 0 }
  uselistorder label %dec_label_pc_12df4, { 1, 0 }
  uselistorder label %dec_label_pc_12d80, { 1, 0 }
}

define i32 @function_12f0c(i32 %arg1) local_unnamed_addr {
dec_label_pc_12f38:
  %stack_var_-8 = alloca i32, align 4
  %v3_12f0c = load i32, i32* @r4, align 4
  store i32 %v3_12f0c, i32* %stack_var_-8, align 4
  %v2_12f3c = load i32, i32* @global_var_1c924.427, align 4
  %v2_12f40 = icmp eq i32 %v2_12f3c, 0
  br i1 %v2_12f40, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_12f38
  store i32 77644, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_12f3c)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12f38, %bb
  %v2_12f50 = load i32, i32* @global_var_1c928.429, align 4
  %v2_12f54 = icmp eq i32 %v2_12f50, 0
  br i1 %v2_12f54, label %bb12, label %bb13

bb12:                                             ; preds = %.thread
  %v3_12f58 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_12f58, i32* @r4, align 4
  %v9_12f58 = load i32, i32* @r0, align 4
  ret i32 %v9_12f58

bb13:                                             ; preds = %.thread
  store i32 ptrtoint (i32* @global_var_12f64.430 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_12f50)
  %v2_12f64 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12f64, i32* @r4, align 4
  %v8_12f64 = load i32, i32* @r0, align 4
  ret i32 %v8_12f64

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_12f78() local_unnamed_addr {
dec_label_pc_12f78:
  ret i32 0
}

define i32 @function_12f80(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_12f80:
  %v1_12f80 = load i32, i32* @r0, align 4
  ret i32 %v1_12f80
}

define i32 @function_12f84(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_12f84:
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-12 = alloca i32, align 4
  %v3_12f84 = load i32, i32* @r4, align 4
  store i32 %v3_12f84, i32* %stack_var_-12, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_12f94 = call i32 @function_1189c(i32 %arg1, i32 1)
  %v7_12f98 = icmp eq i32 %v2_12f94, -1
  br i1 %v7_12f98, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_12f84
  %v3_12f9c = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_12f9c, i32* @r4, align 4
  ret i32 %v2_12f94

bb5:                                              ; preds = %dec_label_pc_12f84
  %v0_12fa0 = load i32, i32* @r4, align 4
  %v4_12fa8 = call i32 @function_11a8c(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_143f8.432, i32 0, i32 0), i32 %v0_12fa0)
  %v1_12fac = load i32, i32* %r5.global-to-local, align 4
  %v9_12fac = icmp eq i32 %v4_12fa8, %v1_12fac
  br i1 %v9_12fac, label %bb6, label %bb7

bb6:                                              ; preds = %bb5
  %v3_12fb0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_12fb0, i32* @r4, align 4
  ret i32 %v4_12fa8

bb7:                                              ; preds = %bb5
  %v0_12fb4 = call i32 @function_129e0()
  %v0_12fb8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12fb8, label %bb8, label %bb9

bb8:                                              ; preds = %bb7
  %v1_12fb8 = load i32, i32* @r4, align 4
  %v4_12fb8 = inttoptr i32 %v0_12fa0 to i32*
  store i32 %v1_12fb8, i32* %v4_12fb8, align 4
  br label %bb9

bb9:                                              ; preds = %bb7, %bb8
  ret i32 %v0_12fb4

; uselistorder directives
  uselistorder i32 %v2_12f94, { 1, 0 }
  uselistorder i1* @cpsr_z, { 11, 10, 0, 1, 12, 9, 6, 7, 2, 3, 4, 5, 8 }
  uselistorder i32 ()* @function_129e0, { 0, 2, 1, 3 }
  uselistorder i32 (i8*, i32)* @function_11a8c, { 8, 5, 0, 1, 2, 3, 4, 6, 7 }
  uselistorder i32 (i32, i32)* @function_1189c, { 0, 7, 13, 12, 15, 14, 9, 8, 11, 10, 2, 1, 6, 5, 4, 3 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %bb9, { 1, 0 }
}

define i32 @function_12fbc(i32 %arg1) local_unnamed_addr {
dec_label_pc_12fbc:
  %v2_12fc0 = load i32, i32* @global_var_1c92c.434, align 4
  %v2_12fc4 = icmp eq i32 %v2_12fc0, 0
  br i1 %v2_12fc4, label %bb2, label %bb

bb:                                               ; preds = %dec_label_pc_12fbc
  %v6_12fd0 = load i32, i32* @r0, align 4
  ret i32 %v6_12fd0

bb2:                                              ; preds = %dec_label_pc_12fbc
  store i32 1, i32* @global_var_1c92c.434, align 4
  store i32 4096, i32* @global_var_1c920.385, align 4
  ret i32 undef
}

define i32 @function_13018(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_13018:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v4_1301c = mul i32 %arg2, 4
  %v5_1301c = add i32 %tmp, %v4_1301c
  %v2_13020 = load i32, i32* %arg3, align 4
  %v2_13024 = ptrtoint i32* %stack_var_-120 to i32
  %v1_13028 = add i32 %v5_1301c, 4
  %v9_1302c = icmp eq i32 %v1_13028, %v2_13020
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg7, i32* @global_var_1c918.439, align 4
  store i32 %v1_13028, i32* @global_var_1c91c.441, align 4
  store i32 %arg6, i32* @global_var_1c928.429, align 4
  store i32 120, i32* @r2, align 4
  br i1 %v9_1302c, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_13018
  store i32 %v5_1301c, i32* @global_var_1c91c.441, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_13018, %bb
  %v2_1306c = bitcast i32* %stack_var_-120 to i8*
  %v3_1306c = call i32 @function_11f70(i8* %v2_1306c, i32 0)
  %storemerge.pre = load i32, i32* @global_var_1c91c.441, align 4
  br label %dec_label_pc_1307c

dec_label_pc_1307c:                               ; preds = %dec_label_pc_1307c, %bb41
  %storemerge = phi i32 [ %storemerge.pre, %bb41 ], [ %v4_1307c, %dec_label_pc_1307c ]
  %v1_1307c = inttoptr i32 %storemerge to i32*
  %v2_1307c = load i32, i32* %v1_1307c, align 4
  %v4_1307c = add i32 %storemerge, 4
  %v2_13080 = icmp eq i32 %v2_1307c, 0
  br i1 %v2_13080, label %dec_label_pc_1308c, label %dec_label_pc_1307c

dec_label_pc_1308c:                               ; preds = %dec_label_pc_1307c
  store i32 %v4_1307c, i32* @r4, align 4
  %v1_130ac22 = inttoptr i32 %v4_1307c to i32*
  %v2_130ac23 = load i32, i32* %v1_130ac22, align 4
  %v2_130b025 = icmp eq i32 %v2_130ac23, 0
  br i1 %v2_130b025, label %dec_label_pc_130b8, label %dec_label_pc_13094

dec_label_pc_13094:                               ; preds = %dec_label_pc_1308c, %dec_label_pc_130ac
  %v5_13098 = phi i32 [ %v2_130ac, %dec_label_pc_130ac ], [ %v2_130ac23, %dec_label_pc_1308c ]
  %v2_13094 = icmp ugt i32 %v5_13098, 13
  %v7_13094 = icmp eq i32 %v5_13098, 14
  %v2_13098 = xor i1 %v2_13094, true
  %v3_13098 = or i1 %v7_13094, %v2_13098
  br i1 %v3_13098, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_13094
  %v6_13098 = and i32 %v5_13098, 536870912
  %v7_13098 = icmp ne i32 %v6_13098, 0
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_13094, %bb42
  %v1_130a4 = phi i1 [ %v2_13094, %dec_label_pc_13094 ], [ %v7_13098, %bb42 ]
  %v2_1309c = xor i1 %v1_130a4, true
  %v3_1309c = or i1 %v7_13094, %v2_1309c
  br i1 %v3_1309c, label %bb44, label %dec_label_pc_130ac

bb44:                                             ; preds = %bb43
  br label %dec_label_pc_130ac

dec_label_pc_130ac:                               ; preds = %bb43, %bb44
  call void @__pseudo_cond_branch(i1 %v3_1309c, i32 ptrtoint (i32* @global_var_11f50.443 to i32))
  %v0_130a8 = load i32, i32* @r4, align 4
  %v1_130a8 = add i32 %v0_130a8, 8
  store i32 %v1_130a8, i32* @r4, align 4
  %v1_130ac = inttoptr i32 %v1_130a8 to i32*
  %v2_130ac = load i32, i32* %v1_130ac, align 4
  %v2_130b0 = icmp eq i32 %v2_130ac, 0
  br i1 %v2_130b0, label %dec_label_pc_130b8, label %dec_label_pc_13094

dec_label_pc_130b8:                               ; preds = %dec_label_pc_130ac, %dec_label_pc_1308c
  %v1_130bc = call i32 @function_14124(i32 %v2_13024)
  store i32 %v1_130bc, i32* @r0, align 4
  %v1_130c0 = call i32 @function_12fbc(i32 %v1_130bc)
  store i32 %v1_130c0, i32* @r0, align 4
  %v2_130cc = icmp eq i32 %tmp37, 0
  br i1 %v2_130cc, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_130b8
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_130b8, %bb45
  %v0_130dc = phi i32 [ %tmp37, %dec_label_pc_130b8 ], [ 4096, %bb45 ]
  %v3_130d4 = icmp eq i32 %tmp36, -1
  %v8_130d4 = icmp eq i32 %tmp36, -1
  store i32 ptrtoint (i32* @global_var_1c920.385 to i32), i32* @r2, align 4
  store i32 %v0_130dc, i32* @global_var_1c920.385, align 4
  br i1 %v3_130d4, label %dec_label_pc_130e4, label %dec_label_pc_1310c

dec_label_pc_130e4:                               ; preds = %bb46
  %v0_130e4 = call i32 @function_13670()
  store i32 %v0_130e4, i32* @r0, align 4
  store i32 %v0_130e4, i32* @r4, align 4
  %v0_130ec = call i32 @function_13618()
  %v0_130f0 = load i32, i32* @r4, align 4
  %v9_130f0 = icmp eq i32 %v0_130f0, %v0_130ec
  br i1 %v9_130f0, label %dec_label_pc_130f8, label %dec_label_pc_13134

dec_label_pc_130f8:                               ; preds = %dec_label_pc_130e4
  %v1_130f8 = call i32 @function_13644(i32 %v0_130ec)
  store i32 %v1_130f8, i32* @r0, align 4
  store i32 %v1_130f8, i32* @r4, align 4
  %v0_13100 = call i32 @function_135ec()
  %v0_13104 = load i32, i32* @r4, align 4
  %v9_13104 = icmp eq i32 %v0_13104, %v0_13100
  br i1 %v9_13104, label %dec_label_pc_1310c, label %dec_label_pc_13134

dec_label_pc_1310c:                               ; preds = %dec_label_pc_130f8, %bb46
  store i32 %tmp36, i32* @r2, align 4
  br i1 %v8_130d4, label %dec_label_pc_131a0, label %dec_label_pc_13118

dec_label_pc_13118:                               ; preds = %dec_label_pc_1310c
  %v9_1311c = icmp eq i32 %tmp36, %tmp35
  br i1 %v9_1311c, label %dec_label_pc_13124, label %dec_label_pc_13134

dec_label_pc_13124:                               ; preds = %dec_label_pc_13118
  br label %dec_label_pc_13134

dec_label_pc_13134:                               ; preds = %dec_label_pc_13124, %dec_label_pc_13118, %dec_label_pc_130f8, %dec_label_pc_130e4
  %v3_1313c = call i32 @function_12f84(i32 0, i32* inttoptr (i32 32768 to i32*))
  %v3_13148 = call i32 @function_12f84(i32 1, i32* inttoptr (i32 32770 to i32*))
  %v3_13154 = call i32 @function_12f84(i32 2, i32* inttoptr (i32 32770 to i32*))
  br label %dec_label_pc_131a0

dec_label_pc_131a0:                               ; preds = %dec_label_pc_13134, %dec_label_pc_1310c
  %v0_13164 = load i32, i32* %r6.global-to-local, align 4
  %v1_13164 = inttoptr i32 %v0_13164 to i32*
  %v2_13164 = load i32, i32* %v1_13164, align 4
  store i32 %v2_13164, i32* @global_var_1c874, align 4
  store i32 %arg5, i32* @global_var_1c924.427, align 4
  %v2_131a0 = icmp eq i32 %arg4, 0
  br i1 %v2_131a0, label %dec_label_pc_131dc, label %bb47

bb47:                                             ; preds = %dec_label_pc_131a0
  br label %dec_label_pc_131dc

dec_label_pc_131dc:                               ; preds = %dec_label_pc_131a0, %bb47
  call void @__pseudo_branch(i32 %arg4)
  %v1_131ec = call i32 @function_11f08()
  %v2_131f4 = inttoptr i32 %v1_131ec to i32*
  store i32 0, i32* %v2_131f4, align 4
  %v0_13220 = load i32, i32* %r8.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_1322c = call i32 @function_12cd4(i32 %v0_13220)
  ret i32 %v1_1322c

; uselistorder directives
  uselistorder i32 %v2_130ac, { 1, 0 }
  uselistorder i32 %v1_130a8, { 1, 0 }
  uselistorder i1 %v2_13094, { 1, 0 }
  uselistorder i32 %v4_1307c, { 1, 0, 2 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %tmp36, { 1, 3, 0, 2 }
  uselistorder i32 (i32)* @function_12cd4, { 0, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 32768, { 1, 2, 0 }
  uselistorder i32* @global_var_1c920.385, { 1, 4, 0, 2, 3 }
  uselistorder i32 4096, { 0, 1, 3, 7, 4, 8, 5, 9, 2, 6, 10, 11 }
  uselistorder i32 536870912, { 1, 0 }
  uselistorder i1 true, { 0, 1, 75, 2, 3, 4, 5, 6, 7, 8, 43, 9, 10, 11, 12, 13, 99, 41, 44, 53, 100, 19, 20, 21, 76, 45, 16, 77, 78, 79, 80, 81, 82, 83, 84, 62, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 17, 18, 97, 98, 61, 42, 54, 101, 14, 15, 60, 22, 102, 24, 23, 49, 57, 50, 58, 51, 56, 52, 59, 103, 25, 104, 105, 26, 106, 63, 64, 107, 65, 66, 108, 67, 68, 27, 28, 109, 69, 70, 29, 30, 110, 71, 72, 31, 32, 111, 73, 74, 33, 34, 48, 112, 113, 114, 35, 55, 36, 46, 37, 47, 38, 39, 40 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder label %dec_label_pc_131dc, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_130ac, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_13094, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @function_13264(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13264:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %v3_13264 = load i32, i32* @r4, align 4
  %v6_13264 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_13268 = icmp eq i32* %arg2, null
  %v2_1326c = ptrtoint i32* %stack_var_-296 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  br i1 %v2_13268, label %dec_label_pc_132d8, label %dec_label_pc_1327c

dec_label_pc_1327c:                               ; preds = %dec_label_pc_13264
  %v2_13280 = load i32, i32* %arg2, align 4
  %v4_13280 = add i32 %tmp, 4
  store i32 %v4_13280, i32* @r1, align 4
  %v2_13284 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_13284, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  store i32 %v2_13280, i32* %stack_var_-156, align 4
  %v3_13290 = call i32 @function_11f50(i32 %v2_13284, i32 %v4_13280, i32 128)
  store i32 %v3_13290, i32* %r0.global-to-local, align 4
  %v0_13294 = load i32, i32* @r4, align 4
  %v1_13294 = add i32 %v0_13294, 132
  %v2_13294 = inttoptr i32 %v1_13294 to i32*
  %v3_13294 = load i32, i32* %v2_13294, align 4
  %v1_13298 = and i32 %v3_13294, 67108864
  %v2_13298 = icmp eq i32 %v1_13298, 0
  br i1 %v2_13298, label %dec_label_pc_132ac, label %bb

bb:                                               ; preds = %dec_label_pc_1327c
  br label %dec_label_pc_132c8

dec_label_pc_132ac:                               ; preds = %dec_label_pc_1327c
  %v1_132b4 = and i32 %v3_13294, 4
  %v2_132b4 = icmp eq i32 %v1_132b4, 0
  br i1 %v2_132b4, label %bb21, label %bb20

bb20:                                             ; preds = %dec_label_pc_132ac
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_132ac, %bb20
  br label %dec_label_pc_132c8

dec_label_pc_132c8:                               ; preds = %bb, %bb21
  %v2_132c8 = icmp eq i32 %v0_13294, 0
  %v3_132cc = ptrtoint i32* %stack_var_-156 to i32
  %.v3_132cc = select i1 %v2_132c8, i32 0, i32 %v3_132cc
  %v0_132d8.pre = load i32, i32* @r5, align 4
  %v0_132e8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_132d8

dec_label_pc_132d8:                               ; preds = %dec_label_pc_132c8, %dec_label_pc_13264
  %v0_132e8 = phi i32 [ %arg1, %dec_label_pc_13264 ], [ %v0_132e8.pre, %dec_label_pc_132c8 ]
  %v0_132d8 = phi i32 [ %arg3, %dec_label_pc_13264 ], [ %v0_132d8.pre, %dec_label_pc_132c8 ]
  %storemerge = phi i32 [ 0, %dec_label_pc_13264 ], [ %.v3_132cc, %dec_label_pc_132c8 ]
  store i32 %storemerge, i32* @r1, align 4
  %v2_132d8 = icmp eq i32 %v0_132d8, 0
  %.v2_1326c = select i1 %v2_132d8, i32 0, i32 %v2_1326c
  store i32 %.v2_1326c, i32* @r2, align 4
  store i32 %v0_132e8, i32* %r0.global-to-local, align 4
  %v1_132ec = call i32 @function_13350(i32 %v0_132e8)
  store i32 %v1_132ec, i32* %r0.global-to-local, align 4
  %v0_132f0 = load i32, i32* @r5, align 4
  %v2_132f0 = icmp eq i32 %v0_132f0, 0
  br i1 %v2_132f0, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_132d8
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_132d8, %bb25
  %v0_13300.pr = phi i32 [ 0, %dec_label_pc_132d8 ], [ 1, %bb25 ]
  %v1_132f8 = icmp slt i32 %v1_132ec, 0
  br i1 %v1_132f8, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %bb26
  br label %dec_label_pc_13334

thread-pre-split:                                 ; preds = %bb26
  %v2_13300 = icmp eq i32 %v0_13300.pr, 0
  store i32 %v1_132ec, i32* @r4, align 4
  br i1 %v2_13300, label %dec_label_pc_13334, label %dec_label_pc_1330c

dec_label_pc_1330c:                               ; preds = %thread-pre-split
  %v2_1330c = load i32, i32* %stack_var_-296, align 4
  store i32 %v0_132f0, i32* %r0.global-to-local, align 4
  %v2_13314 = inttoptr i32 %v0_132f0 to i32*
  store i32 %v2_1330c, i32* %v2_13314, align 4
  %v3_13314 = load i32, i32* %r0.global-to-local, align 4
  %v4_13314 = add i32 %v3_13314, 4
  store i32 %v4_13314, i32* @r0, align 4
  %v2_13318 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_13318, i32* @r1, align 4
  store i32 128, i32* @r2, align 4
  %v3_13320 = call i32 @function_11f50(i32 %v4_13314, i32 %v2_13318, i32 128)
  store i32 %v3_13320, i32* %r0.global-to-local, align 4
  %v1_13328 = load i32, i32* @r5, align 4
  %v2_13328 = add i32 %v1_13328, 136
  %v3_13328 = inttoptr i32 %v2_13328 to i32*
  %v1_13330 = load i32, i32* @r5, align 4
  %v2_13330 = add i32 %v1_13330, 132
  %v3_13330 = inttoptr i32 %v2_13330 to i32*
  %v0_13334.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_13334

dec_label_pc_13334:                               ; preds = %thread-pre-split.thread, %thread-pre-split, %dec_label_pc_1330c
  %v0_13334 = phi i32 [ %v1_132ec, %thread-pre-split ], [ %v0_13334.pre, %dec_label_pc_1330c ], [ %v1_132ec, %thread-pre-split.thread ]
  store i32 %v0_13334, i32* %r0.global-to-local, align 4
  store i32 %v3_13264, i32* @r4, align 4
  store i32 %v6_13264, i32* @r5, align 4
  ret i32 %v0_13334

; uselistorder directives
  uselistorder i32 %v0_13334, { 1, 0 }
  uselistorder i32 %v0_132f0, { 1, 0, 2 }
  uselistorder i32 %v0_132e8, { 1, 0 }
  uselistorder i32* %stack_var_-156, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 6, 4, 5, 2, 7, 1, 0 }
  uselistorder label %dec_label_pc_13334, { 2, 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_132c8, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @function_13350(i32 %arg1) local_unnamed_addr {
dec_label_pc_13350:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13350 = load i32, i32* @r4, align 4
  store i32 %v3_13350, i32* %stack_var_-8, align 4
  %v1_13354 = load i32, i32* @r1, align 4
  %v2_13354 = inttoptr i32 %v1_13354 to %sigaction*
  %v3_13354 = load i32, i32* @r2, align 4
  %v4_13354 = inttoptr i32 %v3_13354 to %sigaction*
  %v5_13354 = call i32 @sigaction(i32 %arg1, %sigaction* %v2_13354, %sigaction* %v4_13354)
  store i32 %v5_13354, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13354, -4095
  br i1 %tmp, label %dec_label_pc_13374, label %dec_label_pc_13364

dec_label_pc_13364:                               ; preds = %dec_label_pc_13350
  %v0_13364 = call i32 @function_11f08()
  %v0_13368 = load i32, i32* %r4.global-to-local, align 4
  %v1_13368 = sub i32 0, %v0_13368
  %v2_1336c = inttoptr i32 %v0_13364 to i32*
  store i32 %v1_13368, i32* %v2_1336c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13374

dec_label_pc_13374:                               ; preds = %dec_label_pc_13350, %dec_label_pc_13364
  %v0_13374 = phi i32 [ %v5_13354, %dec_label_pc_13350 ], [ -1, %dec_label_pc_13364 ]
  %v2_13378 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13378, i32* %r4.global-to-local, align 4
  ret i32 %v0_13374

; uselistorder directives
  uselistorder i32 %v5_13354, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13374, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_1337c(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_1337c:
  store i32 %arg1, i32* @r5, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_133a4() local_unnamed_addr {
dec_label_pc_133a4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %tmp4 = bitcast i32* %stack_var_-72 to %stat*
  %v0_133b4 = load i32, i32* @r0, align 4
  %v4_133b4 = call i32 @fstat(i32 %v0_133b4, %stat* %tmp4)
  store i32 %v4_133b4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_133b4, -4095
  br i1 %tmp, label %dec_label_pc_133d8, label %dec_label_pc_133c4

dec_label_pc_133c4:                               ; preds = %dec_label_pc_133a4
  %v0_133c4 = call i32 @function_11f08()
  %v0_133c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_133c8 = sub i32 0, %v0_133c8
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_133d0 = inttoptr i32 %v0_133c4 to i32*
  store i32 %v1_133c8, i32* %v2_133d0, align 4
  br label %dec_label_pc_133e8

dec_label_pc_133d8:                               ; preds = %dec_label_pc_133a4
  %v2_133d8 = icmp eq i32 %v4_133b4, 0
  store i32 78824, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_133d8, i32 ptrtoint (i32* @global_var_13ac0.459 to i32))
  br label %dec_label_pc_133e8

dec_label_pc_133e8:                               ; preds = %dec_label_pc_133c4, %dec_label_pc_133d8
  %v0_133e8 = load i32, i32* %r4.global-to-local, align 4
  ret i32 %v0_133e8

; uselistorder directives
  uselistorder i32 %v4_133b4, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 6, 13, 11, 12, 9, 10, 0, 3, 4, 5, 1, 2, 7, 8 }
  uselistorder label %dec_label_pc_133e8, { 1, 0 }
}

define i32 @function_133f4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_133f4:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %v6_133f4 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_133fc = call i32 @function_13488()
  store i32 %v0_133fc, i32* %r6.global-to-local, align 4
  %tmp8 = icmp slt i32 %v0_133fc, 1
  br i1 %tmp8, label %dec_label_pc_13480, label %dec_label_pc_1346c.preheader

dec_label_pc_1346c.preheader:                     ; preds = %dec_label_pc_133f4
  %v5_13404 = load i32, i32* @r4, align 4
  %v7_13404 = add i32 %v5_13404, %v0_133fc
  store i32 %v7_13404, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1346c

dec_label_pc_13410:                               ; preds = %dec_label_pc_1346c
  %v1_13410 = add i32 %v2_13420, 16
  %v2_13410 = inttoptr i32 %v1_13410 to i32*
  %v3_13410 = load i32, i32* %v2_13410, align 4
  store i32 %v3_13410, i32* @lr, align 4
  %v2_13414 = inttoptr i32 %v1_13470 to i32*
  %v3_13414 = load i32, i32* %v2_13414, align 4
  store i32 %v3_13414, i32* %r2.global-to-local, align 4
  %v1_13418 = add i32 %v2_13420, 18
  %v2_13418 = inttoptr i32 %v1_13418 to i8*
  %v3_13418 = load i8, i8* %v2_13418, align 1
  %v4_13418 = zext i8 %v3_13418 to i32
  store i32 %v4_13418, i32* %ip.global-to-local, align 4
  %v3_1341c = sdiv i32 %v3_13410, 256
  store i32 %v3_1341c, i32* %r3.global-to-local, align 4
  %v1_13420 = trunc i32 %v3_13410 to i8
  %v4_13420 = inttoptr i32 %v1_13470 to i8*
  store i8 %v1_13420, i8* %v4_13420, align 1
  %v0_13424 = load i32, i32* %r2.global-to-local, align 4
  %v1_13424 = load i32, i32* @r4, align 4
  %v2_13424 = add i32 %v1_13424, 4
  %v3_13424 = inttoptr i32 %v2_13424 to i32*
  store i32 %v0_13424, i32* %v3_13424, align 4
  %v0_13428 = load i32, i32* %ip.global-to-local, align 4
  %v1_13428 = trunc i32 %v0_13428 to i8
  %v2_13428 = load i32, i32* @r4, align 4
  %v3_13428 = add i32 %v2_13428, 10
  %v4_13428 = inttoptr i32 %v3_13428 to i8*
  store i8 %v1_13428, i8* %v4_13428, align 1
  %v0_1342c = load i32, i32* %r3.global-to-local, align 4
  %v1_1342c = trunc i32 %v0_1342c to i8
  %v2_1342c = load i32, i32* @r4, align 4
  %v3_1342c = add i32 %v2_1342c, 9
  %v4_1342c = inttoptr i32 %v3_1342c to i8*
  store i8 %v1_1342c, i8* %v4_1342c, align 1
  %v0_13430 = load i32, i32* @r4, align 4
  %v1_13430 = add i32 %v0_13430, 8
  %v2_13430 = inttoptr i32 %v1_13430 to i8*
  %v3_13430 = load i8, i8* %v2_13430, align 1
  %v4_13430 = zext i8 %v3_13430 to i32
  store i32 %v4_13430, i32* %r2.global-to-local, align 4
  %v0_13434 = load i32, i32* @r5, align 4
  %v1_13434 = add i32 %v0_13434, 1
  %v2_13434 = inttoptr i32 %v1_13434 to i8*
  %v3_13434 = load i8, i8* %v2_13434, align 1
  %v4_13434 = zext i8 %v3_13434 to i32
  store i32 %v4_13434, i32* %r3.global-to-local, align 4
  %v4_13438 = mul nuw nsw i32 %v4_13434, 256
  %v5_13438 = or i32 %v4_13438, %v4_13430
  %v1_1343c = add nsw i32 %v5_13438, -19
  store i32 %v1_1343c, i32* @r2, align 4
  %v3_13440 = call i32 @function_11f60(i32 %v1_13478, i32 %v1_13474, i32 %v1_1343c)
  %v0_13444 = load i32, i32* @r4, align 4
  %v1_13444 = add i32 %v0_13444, 8
  %v2_13444 = inttoptr i32 %v1_13444 to i8*
  %v3_13444 = load i8, i8* %v2_13444, align 1
  %v4_13444 = zext i8 %v3_13444 to i32
  store i32 %v4_13444, i32* %r3.global-to-local, align 4
  %v0_13448 = load i32, i32* @r5, align 4
  %v1_13448 = add i32 %v0_13448, 1
  %v2_13448 = inttoptr i32 %v1_13448 to i8*
  %v3_13448 = load i8, i8* %v2_13448, align 1
  %v4_13448 = zext i8 %v3_13448 to i32
  store i32 %v0_13444, i32* @r0, align 4
  %v4_13450 = mul nuw nsw i32 %v4_13448, 256
  %v5_13450 = or i32 %v4_13450, %v4_13444
  store i32 %v5_13450, i32* @r2, align 4
  store i32 %v0_13444, i32* @r1, align 4
  %v3_13458 = call i32 @function_11f60(i32 %v0_13444, i32 %v0_13444, i32 %v5_13450)
  %v0_1345c = load i32, i32* @r4, align 4
  %v1_1345c = add i32 %v0_1345c, 8
  %v2_1345c = inttoptr i32 %v1_1345c to i8*
  %v3_1345c = load i8, i8* %v2_1345c, align 1
  %v4_1345c = zext i8 %v3_1345c to i32
  store i32 %v4_1345c, i32* %r3.global-to-local, align 4
  %v0_13460 = load i32, i32* @r5, align 4
  %v1_13460 = add i32 %v0_13460, 1
  %v2_13460 = inttoptr i32 %v1_13460 to i8*
  %v3_13460 = load i8, i8* %v2_13460, align 1
  %v4_13460 = zext i8 %v3_13460 to i32
  store i32 %v4_13460, i32* @r2, align 4
  %v4_13464 = mul nuw nsw i32 %v4_13460, 256
  %v5_13464 = or i32 %v4_13464, %v4_1345c
  store i32 %v5_13464, i32* %r3.global-to-local, align 4
  %v2_13468 = add i32 %v5_13464, %v0_1345c
  store i32 %v2_13468, i32* @r4, align 4
  %v1_1346c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1346c

dec_label_pc_1346c:                               ; preds = %dec_label_pc_1346c.preheader, %dec_label_pc_13410
  %v1_1346c = phi i32 [ %v7_13404, %dec_label_pc_1346c.preheader ], [ %v1_1346c.pre, %dec_label_pc_13410 ]
  %v2_13420 = phi i32 [ %v5_13404, %dec_label_pc_1346c.preheader ], [ %v2_13468, %dec_label_pc_13410 ]
  %v3_1346c = icmp ult i32 %v2_13420, %v1_1346c
  %v1_13470 = add i32 %v2_13420, 8
  store i32 %v1_13470, i32* @r5, align 4
  %v1_13474 = add i32 %v2_13420, 19
  store i32 %v1_13474, i32* @r1, align 4
  %v1_13478 = add i32 %v2_13420, 11
  store i32 %v1_13478, i32* @r0, align 4
  br i1 %v3_1346c, label %dec_label_pc_13410, label %dec_label_pc_13480.loopexit

dec_label_pc_13480.loopexit:                      ; preds = %dec_label_pc_1346c
  %v0_13480.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13480

dec_label_pc_13480:                               ; preds = %dec_label_pc_133f4, %dec_label_pc_13480.loopexit
  %v0_13480 = phi i32 [ %v0_13480.pre, %dec_label_pc_13480.loopexit ], [ %v0_133fc, %dec_label_pc_133f4 ]
  store i32 %v6_133f4, i32* @r5, align 4
  ret i32 %v0_13480

; uselistorder directives
  uselistorder i32 %v1_13478, { 1, 0 }
  uselistorder i32 %v1_13474, { 1, 0 }
  uselistorder i32 %v1_13470, { 2, 1, 0 }
  uselistorder i32 %v2_13420, { 4, 3, 2, 5, 1, 0 }
  uselistorder i32 %v0_13444, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v3_13410, { 1, 0, 2 }
  uselistorder i32 %v5_13404, { 1, 0 }
  uselistorder i32 %v0_133fc, { 1, 0, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @function_11f60, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_13480, { 1, 0 }
  uselistorder label %dec_label_pc_1346c, { 1, 0 }
}

define i32 @function_13488() local_unnamed_addr {
dec_label_pc_13488:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_1348c = load i32, i32* @r4, align 4
  %v9_1348c = load i32, i32* @r6, align 4
  %v0_13490 = load i32, i32* @r2, align 4
  %v1_13490 = add i32 %v0_13490, 6
  %v2_13498 = ptrtoint i32* %stack_var_-60 to i32
  %v1_1349c = and i32 %v1_13490, -4
  store i32 %v1_1349c, i32* %r3.global-to-local, align 4
  %v2_134a0 = sub i32 %v2_13498, %v1_1349c
  %v0_134a4 = load i32, i32* @r1, align 4
  store i32 %v0_134a4, i32* %r8.global-to-local, align 4
  store i32 %v0_13490, i32* %stack_var_-60, align 4
  store i32 %v2_134a0, i32* %sl.global-to-local, align 4
  %v0_134b0 = load i32, i32* @r0, align 4
  %v1_134b4 = inttoptr i32 %v2_134a0 to %linux_dirent64*
  store i32 %v2_134a0, i32* %r1.global-to-local, align 4
  %v5_134b8 = call i32 @getdents64(i32 %v0_134b0, %linux_dirent64* %v1_134b4, i32 %v0_13490)
  store i32 %v5_134b8, i32* @r6, align 4
  %tmp = icmp ult i32 %v5_134b8, -4095
  br i1 %tmp, label %dec_label_pc_134dc, label %dec_label_pc_134c8

dec_label_pc_134c8:                               ; preds = %dec_label_pc_13488
  %v0_134c8 = call i32 @function_11f08()
  %v0_134cc = load i32, i32* @r6, align 4
  %v1_134cc = sub i32 0, %v0_134cc
  store i32 %v1_134cc, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r6.global-to-local, align 4
  %v2_134d4 = inttoptr i32 %v0_134c8 to i32*
  store i32 %v1_134cc, i32* %v2_134d4, align 4
  %v0_134e4.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_134e4

dec_label_pc_134dc:                               ; preds = %dec_label_pc_13488
  br i1 false, label %dec_label_pc_134e4, label %dec_label_pc_134ec

dec_label_pc_134e4:                               ; preds = %dec_label_pc_134dc, %dec_label_pc_134c8
  %v0_134e4 = phi i32 [ -1, %dec_label_pc_134dc ], [ %v0_134e4.pre, %dec_label_pc_134c8 ]
  store i32 %v0_134e4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_135e0

dec_label_pc_134ec:                               ; preds = %dec_label_pc_134dc
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_134f4 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_134f4, i32* @r5, align 4
  %v0_134f8 = load i32, i32* @sp, align 4
  store i32 %v0_134f8, i32* @r4, align 4
  br label %dec_label_pc_135bc

dec_label_pc_13508:                               ; preds = %dec_label_pc_135bc
  %v2_135d4 = add i32 %v3_135c0, %v0_135d4
  %v1_13508 = add i32 %v0_1350c, 17
  %v2_13508 = inttoptr i32 %v1_13508 to i8*
  %v3_13508 = load i8, i8* %v2_13508, align 1
  %v4_13508 = zext i8 %v3_13508 to i32
  %v2_1350c = inttoptr i32 %v1_135c8 to i8*
  %v3_1350c = load i8, i8* %v2_1350c, align 1
  %v4_1350c = zext i8 %v3_1350c to i32
  %v4_13510 = mul nuw nsw i32 %v4_13508, 256
  %v5_13510 = or i32 %v4_1350c, %v4_13510
  %v1_13514 = add nuw nsw i32 %v5_13510, 3
  %v1_13518 = and i32 %v1_13514, 131068
  store i32 %v1_13518, i32* %r3.global-to-local, align 4
  %v2_1351c = add i32 %v1_13518, %v2_1355c
  store i32 %v2_1351c, i32* %sb.global-to-local, align 4
  %v9_13520 = icmp eq i32 %v2_1351c, %v2_135d4
  %v1_13524 = and i32 %v1_13514, 128
  %v2_13528 = icmp eq i32 %v1_13524, 0
  %v3_13528 = or i1 %v9_13520, %v2_13528
  br i1 %v3_13528, label %dec_label_pc_1355c, label %dec_label_pc_1352c

dec_label_pc_1352c:                               ; preds = %dec_label_pc_13508
  store i32 %stack_var_-52.0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_1353c = call i32 @function_1369c(i32 %v0_134b0, i32 %stack_var_-52.0, i32 %stack_var_-48.0, i32 0)
  %v0_13540 = load i32, i32* @r5, align 4
  %v1_13540 = load i32, i32* %r8.global-to-local, align 4
  %v9_13540 = icmp eq i32 %v0_13540, %v1_13540
  br i1 %v9_13540, label %dec_label_pc_13548, label %dec_label_pc_135dc

dec_label_pc_13548:                               ; preds = %dec_label_pc_1352c
  %v0_13548 = call i32 @function_11f08()
  store i32 22, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_13554 = inttoptr i32 %v0_13548 to i32*
  store i32 22, i32* %v2_13554, align 4
  %v0_135e0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_135e0

dec_label_pc_1355c:                               ; preds = %dec_label_pc_13508
  %v3_1352411 = udiv i32 %v1_13514, 256
  %v1_1355c = trunc i32 %v3_1352411 to i8
  %v3_1355c = add i32 %v2_1355c, 17
  %v4_1355c = inttoptr i32 %v3_1355c to i8*
  store i8 %v1_1355c, i8* %v4_1355c, align 1
  %v0_13560 = load i32, i32* %r3.global-to-local, align 4
  %v1_13560 = trunc i32 %v0_13560 to i8
  %v2_13560 = load i32, i32* @r5, align 4
  %v3_13560 = add i32 %v2_13560, 16
  %v4_13560 = inttoptr i32 %v3_13560 to i8*
  store i8 %v1_13560, i8* %v4_13560, align 1
  %v0_13564 = load i32, i32* @r4, align 4
  %v1_13564 = add i32 %v0_13564, 8
  %v1_13568 = inttoptr i32 %v1_13564 to i32*
  %v2_13568 = load i32, i32* %v1_13568, align 4
  %v3_13568 = add i32 %v0_13564, 12
  %v4_13568 = inttoptr i32 %v3_13568 to i32*
  %v5_13568 = load i32, i32* %v4_13568, align 4
  store i32 %v5_13568, i32* %r3.global-to-local, align 4
  %v1_13574 = inttoptr i32 %v0_13564 to i32*
  %v2_13574 = load i32, i32* %v1_13574, align 4
  %v3_13574 = add i32 %v0_13564, 4
  %v4_13574 = inttoptr i32 %v3_13574 to i32*
  %v5_13574 = load i32, i32* %v4_13574, align 4
  store i32 %v5_13574, i32* %r3.global-to-local, align 4
  %v0_13578 = load i32, i32* @r5, align 4
  %v1_13578 = inttoptr i32 %v0_13578 to i32*
  store i32 %v2_13574, i32* %v1_13578, align 4
  %v3_13578 = add i32 %v0_13578, 4
  %v4_13578 = inttoptr i32 %v3_13578 to i32*
  %v5_13578 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_13578, i32* %v4_13578, align 4
  %v0_1357c = load i32, i32* @r4, align 4
  %v1_1357c = add i32 %v0_1357c, 8
  %v1_13580 = inttoptr i32 %v1_1357c to i32*
  %v2_13580 = load i32, i32* %v1_13580, align 4
  %v3_13580 = add i32 %v0_1357c, 12
  %v4_13580 = inttoptr i32 %v3_13580 to i32*
  %v5_13580 = load i32, i32* %v4_13580, align 4
  store i32 %v5_13580, i32* %r3.global-to-local, align 4
  %v1_13584 = load i32, i32* @r5, align 4
  %v2_13584 = add i32 %v1_13584, 8
  %v3_13584 = inttoptr i32 %v2_13584 to i32*
  store i32 %v2_13580, i32* %v3_13584, align 4
  %v0_13588 = load i32, i32* %r3.global-to-local, align 4
  %v1_13588 = load i32, i32* @r5, align 4
  %v2_13588 = add i32 %v1_13588, 12
  %v3_13588 = inttoptr i32 %v2_13588 to i32*
  store i32 %v0_13588, i32* %v3_13588, align 4
  %v0_1358c = load i32, i32* @r4, align 4
  %v1_1358c = add i32 %v0_1358c, 18
  %v2_1358c = inttoptr i32 %v1_1358c to i8*
  %v3_1358c = load i8, i8* %v2_1358c, align 1
  %v4_1358c = zext i8 %v3_1358c to i32
  store i32 %v4_1358c, i32* %r3.global-to-local, align 4
  %v2_13590 = load i32, i32* @r5, align 4
  %v3_13590 = add i32 %v2_13590, 18
  %v4_13590 = inttoptr i32 %v3_13590 to i8*
  store i8 %v3_1358c, i8* %v4_13590, align 1
  %v0_13594 = load i32, i32* @r4, align 4
  %v1_13594 = add i32 %v0_13594, 16
  %v2_13594 = inttoptr i32 %v1_13594 to i8*
  %v3_13594 = load i8, i8* %v2_13594, align 1
  %v4_13594 = zext i8 %v3_13594 to i32
  %v0_13598 = load i32, i32* %r7.global-to-local, align 4
  %v1_13598 = add i32 %v0_13598, 1
  %v2_13598 = inttoptr i32 %v1_13598 to i8*
  %v3_13598 = load i8, i8* %v2_13598, align 1
  %v4_13598 = zext i8 %v3_13598 to i32
  store i32 %v4_13598, i32* %r3.global-to-local, align 4
  %v4_1359c = mul nuw nsw i32 %v4_13598, 256
  %v5_1359c = or i32 %v4_1359c, %v4_13594
  %v1_135a0 = add nsw i32 %v5_1359c, -19
  store i32 %v1_135a0, i32* @r2, align 4
  %v3_135a4 = call i32 @function_11f50(i32 %v1_135cc, i32 %v1_135d0, i32 %v1_135a0)
  %v0_135a8 = load i32, i32* @r4, align 4
  %v1_135a8 = add i32 %v0_135a8, 16
  %v2_135a8 = inttoptr i32 %v1_135a8 to i8*
  %v3_135a8 = load i8, i8* %v2_135a8, align 1
  %v4_135a8 = zext i8 %v3_135a8 to i32
  store i32 %v4_135a8, i32* %r3.global-to-local, align 4
  %v0_135ac = load i32, i32* %r7.global-to-local, align 4
  %v1_135ac = add i32 %v0_135ac, 1
  %v2_135ac = inttoptr i32 %v1_135ac to i8*
  %v3_135ac = load i8, i8* %v2_135ac, align 1
  %v4_135ac = zext i8 %v3_135ac to i32
  %v4_135b0 = mul nuw nsw i32 %v4_135ac, 256
  %v5_135b0 = or i32 %v4_135b0, %v4_135a8
  store i32 %v5_135b0, i32* %r3.global-to-local, align 4
  %v2_135b4 = add i32 %v5_135b0, %v0_135a8
  store i32 %v2_135b4, i32* @r4, align 4
  %v0_135b8 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_135b8, i32* @r5, align 4
  %v1_135bc.pre = load i32, i32* @r6, align 4
  %v0_135d4.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_135bc

dec_label_pc_135bc:                               ; preds = %dec_label_pc_134ec, %dec_label_pc_1355c
  %stack_var_-52.0 = phi i32 [ -1, %dec_label_pc_134ec ], [ %v2_13568, %dec_label_pc_1355c ]
  %v0_135d4 = phi i32 [ %v0_134f4, %dec_label_pc_134ec ], [ %v0_135d4.pre, %dec_label_pc_1355c ]
  %v2_1355c = phi i32 [ %v0_134f4, %dec_label_pc_134ec ], [ %v0_135b8, %dec_label_pc_1355c ]
  %v0_1350c = phi i32 [ %v0_134f8, %dec_label_pc_134ec ], [ %v2_135b4, %dec_label_pc_1355c ]
  %v1_135bc = phi i32 [ %v5_134b8, %dec_label_pc_134ec ], [ %v1_135bc.pre, %dec_label_pc_1355c ]
  %stack_var_-48.0 = phi i32 [ -1, %dec_label_pc_134ec ], [ %v5_13568, %dec_label_pc_1355c ]
  %v0_135bc = load i32, i32* %sl.global-to-local, align 4
  %v2_135bc = add i32 %v0_135bc, %v1_135bc
  store i32 %v2_135bc, i32* %r3.global-to-local, align 4
  %v3_135c0 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_135c0, i32* @r2, align 4
  %v3_135c4 = icmp ult i32 %v0_1350c, %v2_135bc
  %v1_135c8 = add i32 %v0_1350c, 16
  store i32 %v1_135c8, i32* %r7.global-to-local, align 4
  %v1_135cc = add i32 %v2_1355c, 19
  store i32 %v1_135cc, i32* @r0, align 4
  %v1_135d0 = add i32 %v0_1350c, 19
  store i32 %v1_135d0, i32* @r1, align 4
  br i1 %v3_135c4, label %dec_label_pc_13508, label %dec_label_pc_135dc

dec_label_pc_135dc:                               ; preds = %dec_label_pc_135bc, %dec_label_pc_1352c
  %v1_135dc = phi i32 [ %v0_13540, %dec_label_pc_1352c ], [ %v2_1355c, %dec_label_pc_135bc ]
  %v0_135dc = phi i32 [ %v1_13540, %dec_label_pc_1352c ], [ %v0_135d4, %dec_label_pc_135bc ]
  %v2_135dc = sub i32 %v1_135dc, %v0_135dc
  store i32 %v2_135dc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_135e0

dec_label_pc_135e0:                               ; preds = %dec_label_pc_13548, %dec_label_pc_134e4, %dec_label_pc_135dc
  %v0_135e0 = phi i32 [ %v0_135e0.pre, %dec_label_pc_13548 ], [ %v0_134e4, %dec_label_pc_134e4 ], [ %v2_135dc, %dec_label_pc_135dc ]
  store i32 %v3_1348c, i32* @r4, align 4
  store i32 %v9_1348c, i32* %r6.global-to-local, align 4
  ret i32 %v0_135e0

; uselistorder directives
  uselistorder i32 %v1_135d0, { 1, 0 }
  uselistorder i32 %v1_135cc, { 1, 0 }
  uselistorder i32 %v1_135c8, { 1, 0 }
  uselistorder i32 %v3_135c0, { 1, 0 }
  uselistorder i32 %v0_1350c, { 2, 1, 3, 0 }
  uselistorder i32 %v2_1355c, { 0, 3, 1, 2 }
  uselistorder i32 %v0_13564, { 1, 0, 2, 3 }
  uselistorder i32 %v0_134f4, { 1, 0, 2 }
  uselistorder i32 %v5_134b8, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 14, 15, 16 }
  uselistorder i32 (i32, i32, i32)* @function_11f50, { 3, 1, 0, 2, 5, 4 }
  uselistorder i32 128, { 4, 5, 26, 6, 27, 17, 9, 10, 11, 18, 0, 19, 12, 13, 14, 15, 16, 22, 1, 20, 2, 21, 3, 7, 8, 23, 24, 25 }
  uselistorder i32* @sp, { 4, 2, 1, 3, 0 }
  uselistorder i32* @r6, { 3, 182, 183, 184, 222, 223, 397, 398, 399, 400, 401, 402, 403, 405, 404, 420, 421, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 23, 24, 52, 122, 123, 124, 125, 43, 126, 127, 25, 128, 48, 129, 130, 131, 132, 133, 134, 26, 27, 28, 29, 30, 44, 49, 14, 15, 16, 17, 18, 19, 20, 21, 22, 53, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 47, 54, 55, 56, 57, 50, 51, 135, 136, 137, 138, 139, 58, 59, 140, 141, 10, 142, 143, 144, 145, 146, 147, 148, 149, 150, 4, 157, 2, 158, 159, 1, 160, 161, 422, 423, 424, 226, 227, 228, 229, 0, 151, 152, 153, 154, 155, 156, 162, 163, 164, 165, 5, 166, 167, 168, 169, 170, 12, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 203, 204, 205, 206, 11, 207, 208, 209, 6, 210, 211, 230, 7, 231, 8, 232, 9, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 212, 215, 213, 214, 216, 217, 13, 218, 219, 220, 221, 224, 225 }
  uselistorder label %dec_label_pc_135e0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_135bc, { 1, 0 }
}

define i32 @function_135ec() local_unnamed_addr {
dec_label_pc_135ec:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_135ec = load i32, i32* @r4, align 4
  store i32 %v3_135ec, i32* %stack_var_-8, align 4
  %v0_135f4 = load i32, i32* @r0, align 4
  store i32 %v0_135f4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_135f4, -4095
  br i1 %tmp, label %dec_label_pc_13610, label %dec_label_pc_13600

dec_label_pc_13600:                               ; preds = %dec_label_pc_135ec
  %v0_13600 = call i32 @function_11f08()
  %v0_13604 = load i32, i32* %r4.global-to-local, align 4
  %v1_13604 = sub i32 0, %v0_13604
  %v2_13608 = inttoptr i32 %v0_13600 to i32*
  store i32 %v1_13604, i32* %v2_13608, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_13614.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13610

dec_label_pc_13610:                               ; preds = %dec_label_pc_135ec, %dec_label_pc_13600
  %v2_13614 = phi i32 [ %v3_135ec, %dec_label_pc_135ec ], [ %v2_13614.pre, %dec_label_pc_13600 ]
  %v0_13610 = phi i32 [ %v0_135f4, %dec_label_pc_135ec ], [ -1, %dec_label_pc_13600 ]
  store i32 %v2_13614, i32* @r4, align 4
  ret i32 %v0_13610

; uselistorder directives
  uselistorder i32 %v0_135f4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13610, { 1, 0 }
}

define i32 @function_13618() local_unnamed_addr {
dec_label_pc_13618:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13618 = load i32, i32* @r4, align 4
  store i32 %v3_13618, i32* %stack_var_-8, align 4
  %v0_13620 = load i32, i32* @r0, align 4
  store i32 %v0_13620, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13620, -4095
  br i1 %tmp, label %dec_label_pc_1363c, label %dec_label_pc_1362c

dec_label_pc_1362c:                               ; preds = %dec_label_pc_13618
  %v0_1362c = call i32 @function_11f08()
  %v0_13630 = load i32, i32* %r4.global-to-local, align 4
  %v1_13630 = sub i32 0, %v0_13630
  %v2_13634 = inttoptr i32 %v0_1362c to i32*
  store i32 %v1_13630, i32* %v2_13634, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_13640.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1363c

dec_label_pc_1363c:                               ; preds = %dec_label_pc_13618, %dec_label_pc_1362c
  %v2_13640 = phi i32 [ %v3_13618, %dec_label_pc_13618 ], [ %v2_13640.pre, %dec_label_pc_1362c ]
  %v0_1363c = phi i32 [ %v0_13620, %dec_label_pc_13618 ], [ -1, %dec_label_pc_1362c ]
  store i32 %v2_13640, i32* @r4, align 4
  ret i32 %v0_1363c

; uselistorder directives
  uselistorder i32 %v0_13620, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1363c, { 1, 0 }
}

define i32 @function_13644(i32 %arg1) local_unnamed_addr {
dec_label_pc_13644:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13644 = load i32, i32* @r4, align 4
  store i32 %v3_13644, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13668, label %dec_label_pc_13658

dec_label_pc_13658:                               ; preds = %dec_label_pc_13644
  %v0_13658 = call i32 @function_11f08()
  %v0_1365c = load i32, i32* %r4.global-to-local, align 4
  %v1_1365c = sub i32 0, %v0_1365c
  %v2_13660 = inttoptr i32 %v0_13658 to i32*
  store i32 %v1_1365c, i32* %v2_13660, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1366c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13668

dec_label_pc_13668:                               ; preds = %dec_label_pc_13644, %dec_label_pc_13658
  %v2_1366c = phi i32 [ %v3_13644, %dec_label_pc_13644 ], [ %v2_1366c.pre, %dec_label_pc_13658 ]
  %v0_13668 = phi i32 [ %arg1, %dec_label_pc_13644 ], [ -1, %dec_label_pc_13658 ]
  store i32 %v2_1366c, i32* %r4.global-to-local, align 4
  ret i32 %v0_13668

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13668, { 1, 0 }
}

define i32 @function_13670() local_unnamed_addr {
dec_label_pc_13670:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13670 = load i32, i32* @r4, align 4
  store i32 %v3_13670, i32* %stack_var_-8, align 4
  %v0_13678 = load i32, i32* @r0, align 4
  store i32 %v0_13678, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13678, -4095
  br i1 %tmp, label %dec_label_pc_13694, label %dec_label_pc_13684

dec_label_pc_13684:                               ; preds = %dec_label_pc_13670
  %v0_13684 = call i32 @function_11f08()
  %v0_13688 = load i32, i32* %r4.global-to-local, align 4
  %v1_13688 = sub i32 0, %v0_13688
  %v2_1368c = inttoptr i32 %v0_13684 to i32*
  store i32 %v1_13688, i32* %v2_1368c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_13698.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13694

dec_label_pc_13694:                               ; preds = %dec_label_pc_13670, %dec_label_pc_13684
  %v2_13698 = phi i32 [ %v3_13670, %dec_label_pc_13670 ], [ %v2_13698.pre, %dec_label_pc_13684 ]
  %v0_13694 = phi i32 [ %v0_13678, %dec_label_pc_13670 ], [ -1, %dec_label_pc_13684 ]
  store i32 %v2_13698, i32* %r4.global-to-local, align 4
  ret i32 %v0_13694

; uselistorder directives
  uselistorder i32 %v0_13678, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13694, { 1, 0 }
}

define i32 @function_1369c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1369c:
  %r4.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_136e0, label %dec_label_pc_136cc

dec_label_pc_136cc:                               ; preds = %dec_label_pc_1369c
  %v0_136cc = call i32 @function_11f08()
  %v0_136d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_136d0 = sub i32 0, %v0_136d0
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_136d8 = inttoptr i32 %v0_136cc to i32*
  store i32 %v1_136d0, i32* %v2_136d8, align 4
  %v0_136e8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_136e8

dec_label_pc_136e0:                               ; preds = %dec_label_pc_1369c
  %v2_136e0 = icmp eq i32 %arg1, 0
  br i1 %v2_136e0, label %dec_label_pc_136f4, label %dec_label_pc_136e8

dec_label_pc_136e8:                               ; preds = %dec_label_pc_136e0, %dec_label_pc_136cc
  %v0_136e8 = phi i32 [ %arg1, %dec_label_pc_136e0 ], [ %v0_136e8.pre, %dec_label_pc_136cc ]
  br label %dec_label_pc_136f8

dec_label_pc_136f4:                               ; preds = %dec_label_pc_136e0
  br label %dec_label_pc_136f8

dec_label_pc_136f8:                               ; preds = %dec_label_pc_136e8, %dec_label_pc_136f4
  %v14_136fc = phi i32 [ %v0_136e8, %dec_label_pc_136e8 ], [ %tmp9, %dec_label_pc_136f4 ]
  ret i32 %v14_136fc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_136f8, { 1, 0 }
}

define i32 @function_13700(%timespec* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13700:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to %timespec*
  %stack_var_-8 = alloca i32, align 4
  %v3_13700 = load i32, i32* @r4, align 4
  store i32 %v3_13700, i32* %stack_var_-8, align 4
  %v6_13704 = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp)
  store i32 %v6_13704, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v6_13704, -4095
  br i1 %tmp6, label %dec_label_pc_13724, label %dec_label_pc_13714

dec_label_pc_13714:                               ; preds = %dec_label_pc_13700
  %v0_13714 = call i32 @function_11f08()
  %v0_13718 = load i32, i32* %r4.global-to-local, align 4
  %v1_13718 = sub i32 0, %v0_13718
  %v2_1371c = inttoptr i32 %v0_13714 to i32*
  store i32 %v1_13718, i32* %v2_1371c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13724

dec_label_pc_13724:                               ; preds = %dec_label_pc_13700, %dec_label_pc_13714
  %v0_13724 = phi i32 [ %v6_13704, %dec_label_pc_13700 ], [ -1, %dec_label_pc_13714 ]
  %v2_13728 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13728, i32* %r4.global-to-local, align 4
  ret i32 %v0_13724

; uselistorder directives
  uselistorder i32 %v6_13704, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13724, { 1, 0 }
}

define i32 @function_1372c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1372c:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_1372c = load i32, i32* @r4, align 4
  store i32 %v3_1372c, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1c938.461 to i32), i32* %r4.global-to-local, align 4
  %v2_13734 = load i32, i32* @global_var_1c938.461, align 4
  %v2_13738 = icmp eq i32 %v2_13734, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_13738, label %dec_label_pc_13748, label %dec_label_pc_13754

dec_label_pc_13748:                               ; preds = %dec_label_pc_1372c
  %v2_13748 = call i32 @function_14148(i32* null)
  %v1_1374c = icmp slt i32 %v2_13748, 0
  br i1 %v1_1374c, label %dec_label_pc_13774, label %dec_label_pc_13754thread-pre-split

dec_label_pc_13754thread-pre-split:               ; preds = %dec_label_pc_13748
  %v0_13758.pr = load i32, i32* %r5.global-to-local, align 4
  %v2_13754.pre = load i32, i32* @global_var_1c938.461, align 4
  br label %dec_label_pc_13754

dec_label_pc_13754:                               ; preds = %dec_label_pc_13754thread-pre-split, %dec_label_pc_1372c
  %v2_13754 = phi i32 [ %v2_13754.pre, %dec_label_pc_13754thread-pre-split ], [ %v2_13734, %dec_label_pc_1372c ]
  %v1_13760 = phi i32 [ %v0_13758.pr, %dec_label_pc_13754thread-pre-split ], [ %arg1, %dec_label_pc_1372c ]
  %v2_13758 = icmp eq i32 %v1_13760, 0
  store i32 %v2_13754, i32* %r4.global-to-local, align 4
  br i1 %v2_13758, label %dec_label_pc_13778, label %dec_label_pc_13768

dec_label_pc_13768:                               ; preds = %dec_label_pc_13754
  %v2_13760 = add i32 %v1_13760, %v2_13754
  %v1_13768 = inttoptr i32 %v2_13760 to i32*
  %v2_13768 = call i32 @function_14148(i32* %v1_13768)
  %v1_1376c = icmp slt i32 %v2_13768, 0
  br i1 %v1_1376c, label %dec_label_pc_13774, label %dec_label_pc_13768.dec_label_pc_13778_crit_edge

dec_label_pc_13768.dec_label_pc_13778_crit_edge:  ; preds = %dec_label_pc_13768
  %v0_13778.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13778

dec_label_pc_13774:                               ; preds = %dec_label_pc_13768, %dec_label_pc_13748
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13778

dec_label_pc_13778:                               ; preds = %dec_label_pc_13768.dec_label_pc_13778_crit_edge, %dec_label_pc_13754, %dec_label_pc_13774
  %v0_13778 = phi i32 [ %v0_13778.pre, %dec_label_pc_13768.dec_label_pc_13778_crit_edge ], [ %v2_13754, %dec_label_pc_13754 ], [ -1, %dec_label_pc_13774 ]
  %v2_1377c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1377c, i32* @r4, align 4
  ret i32 %v0_13778

; uselistorder directives
  uselistorder i32 %v2_13754, { 1, 0, 2 }
  uselistorder i32* null, { 0, 4, 6, 24, 25, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 19, 20, 21, 2, 22, 3, 23 }
  uselistorder label %dec_label_pc_13778, { 2, 0, 1 }
}

define i32 @function_13784(%tms* %arg1) local_unnamed_addr {
dec_label_pc_13784:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13784 = load i32, i32* @r4, align 4
  store i32 %v3_13784, i32* %stack_var_-8, align 4
  %v3_13788 = call i32 @times(%tms* %arg1)
  store i32 %v3_13788, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_13788, -4095
  br i1 %tmp, label %dec_label_pc_137a8, label %dec_label_pc_13798

dec_label_pc_13798:                               ; preds = %dec_label_pc_13784
  %v0_13798 = call i32 @function_11f08()
  %v0_1379c = load i32, i32* %r4.global-to-local, align 4
  %v1_1379c = sub i32 0, %v0_1379c
  %v2_137a0 = inttoptr i32 %v0_13798 to i32*
  store i32 %v1_1379c, i32* %v2_137a0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_137a8

dec_label_pc_137a8:                               ; preds = %dec_label_pc_13784, %dec_label_pc_13798
  %v0_137a8 = phi i32 [ %v3_13788, %dec_label_pc_13784 ], [ -1, %dec_label_pc_13798 ]
  %v2_137ac = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_137ac, i32* %r4.global-to-local, align 4
  ret i32 %v0_137a8

; uselistorder directives
  uselistorder i32 %v3_13788, { 1, 0, 2 }
  uselistorder label %dec_label_pc_137a8, { 1, 0 }
}

define i32 @function_137b0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_137b0:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 96, i32* @r2, align 4
  %v2_137cc = inttoptr i32 %arg2 to i8*
  %v3_137cc = call i32 @function_11f70(i8* %v2_137cc, i32 0)
  %v1_137d0 = add i32 %tmp, 1
  %v2_137d0 = inttoptr i32 %v1_137d0 to i8*
  %v3_137d0 = load i8, i8* %v2_137d0, align 1
  %v4_137d0 = zext i8 %v3_137d0 to i32
  %v1_137d4 = add i32 %tmp, 5
  %v2_137d4 = inttoptr i32 %v1_137d4 to i8*
  %v3_137d4 = load i8, i8* %v2_137d4, align 1
  %v4_137d4 = zext i8 %v3_137d4 to i32
  %v2_137d8 = load i8, i8* %arg1, align 1
  %v3_137d8 = zext i8 %v2_137d8 to i32
  %v1_137dc = add i32 %tmp, 4
  %v2_137dc = inttoptr i32 %v1_137dc to i8*
  %v3_137dc = load i8, i8* %v2_137dc, align 1
  %v4_137dc = zext i8 %v3_137dc to i32
  %v1_137e0 = add i32 %tmp, 2
  %v2_137e0 = inttoptr i32 %v1_137e0 to i8*
  %v3_137e0 = load i8, i8* %v2_137e0, align 1
  %v4_137e0 = zext i8 %v3_137e0 to i32
  %v1_137e4 = add i32 %tmp, 6
  %v2_137e4 = inttoptr i32 %v1_137e4 to i8*
  %v3_137e4 = load i8, i8* %v2_137e4, align 1
  %v4_137e4 = zext i8 %v3_137e4 to i32
  %v1_137e8 = add i32 %tmp, 3
  %v2_137e8 = inttoptr i32 %v1_137e8 to i8*
  %v3_137e8 = load i8, i8* %v2_137e8, align 1
  %v4_137e8 = zext i8 %v3_137e8 to i32
  %v4_137ec = mul nuw nsw i32 %v4_137d0, 256
  %v5_137ec = or i32 %v3_137d8, %v4_137ec
  %v4_137f0 = mul nuw nsw i32 %v4_137d4, 256
  %v5_137f0 = or i32 %v4_137dc, %v4_137f0
  %v1_137f4 = add i32 %tmp, 7
  %v2_137f4 = inttoptr i32 %v1_137f4 to i8*
  %v3_137f4 = load i8, i8* %v2_137f4, align 1
  %v4_137f4 = zext i8 %v3_137f4 to i32
  %v4_137f8 = mul nuw nsw i32 %v4_137e0, 65536
  %v5_137f8 = or i32 %v4_137f8, %v5_137ec
  %v4_137fc = mul nuw nsw i32 %v4_137e4, 65536
  %v5_137fc = or i32 %v4_137fc, %v5_137f0
  %v4_13800 = mul nuw i32 %v4_137e8, 16777216
  %v5_13800 = or i32 %v4_13800, %v5_137f8
  %v4_13804 = mul nuw i32 %v4_137f4, 16777216
  %v5_13804 = or i32 %v4_13804, %v5_137fc
  store i32 %v5_13804, i32* %r3.global-to-local, align 4
  %v0_13808 = load i32, i32* %r7.global-to-local, align 4
  %v1_13808 = inttoptr i32 %v0_13808 to i32*
  store i32 %v5_13800, i32* %v1_13808, align 4
  %v3_13808 = add i32 %v0_13808, 4
  %v4_13808 = inttoptr i32 %v3_13808 to i32*
  %v5_13808 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_13808, i32* %v4_13808, align 4
  %v0_1380c = load i32, i32* %r4.global-to-local, align 4
  %v1_1380c = add i32 %v0_1380c, 89
  %v2_1380c = inttoptr i32 %v1_1380c to i8*
  %v3_1380c = load i8, i8* %v2_1380c, align 1
  %v4_1380c = zext i8 %v3_1380c to i32
  %v1_13810 = add i32 %v0_1380c, 93
  %v2_13810 = inttoptr i32 %v1_13810 to i8*
  %v3_13810 = load i8, i8* %v2_13810, align 1
  %v4_13810 = zext i8 %v3_13810 to i32
  %v1_13814 = add i32 %v0_1380c, 88
  %v2_13814 = inttoptr i32 %v1_13814 to i8*
  %v3_13814 = load i8, i8* %v2_13814, align 1
  %v4_13814 = zext i8 %v3_13814 to i32
  %v1_13818 = add i32 %v0_1380c, 92
  %v2_13818 = inttoptr i32 %v1_13818 to i8*
  %v3_13818 = load i8, i8* %v2_13818, align 1
  %v4_13818 = zext i8 %v3_13818 to i32
  store i32 %v4_13818, i32* %r3.global-to-local, align 4
  %v1_1381c = add i32 %v0_1380c, 94
  %v2_1381c = inttoptr i32 %v1_1381c to i8*
  %v3_1381c = load i8, i8* %v2_1381c, align 1
  %v4_1381c = zext i8 %v3_1381c to i32
  %v1_13820 = add i32 %v0_1380c, 90
  %v2_13820 = inttoptr i32 %v1_13820 to i8*
  %v3_13820 = load i8, i8* %v2_13820, align 1
  %v4_13820 = zext i8 %v3_13820 to i32
  %v1_13824 = add i32 %v0_1380c, 91
  %v2_13824 = inttoptr i32 %v1_13824 to i8*
  %v3_13824 = load i8, i8* %v2_13824, align 1
  %v4_13824 = zext i8 %v3_13824 to i32
  %v4_13828 = mul nuw nsw i32 %v4_1380c, 256
  %v5_13828 = or i32 %v4_13814, %v4_13828
  %v4_1382c = mul nuw nsw i32 %v4_13810, 256
  %v5_1382c = or i32 %v4_13818, %v4_1382c
  store i32 %v5_1382c, i32* %r3.global-to-local, align 4
  %v1_13830 = add i32 %v0_1380c, 95
  %v2_13830 = inttoptr i32 %v1_13830 to i8*
  %v3_13830 = load i8, i8* %v2_13830, align 1
  %v4_13830 = zext i8 %v3_13830 to i32
  %v4_13834 = mul nuw nsw i32 %v4_1381c, 65536
  %v5_13834 = or i32 %v4_13834, %v5_1382c
  store i32 %v5_13834, i32* %r3.global-to-local, align 4
  %v4_13838 = mul nuw nsw i32 %v4_13820, 65536
  %v5_13838 = or i32 %v4_13838, %v5_13828
  %v4_1383c = mul nuw i32 %v4_13824, 16777216
  %v5_1383c = or i32 %v4_1383c, %v5_13838
  %v4_13840 = mul nuw i32 %v4_13830, 16777216
  %v5_13840 = or i32 %v4_13840, %v5_13834
  store i32 %v5_13840, i32* %r6.global-to-local, align 4
  %v1_13844 = load i32, i32* %r7.global-to-local, align 4
  %v2_13844 = add i32 %v1_13844, 88
  %v3_13844 = inttoptr i32 %v2_13844 to i32*
  store i32 %v5_1383c, i32* %v3_13844, align 4
  %v0_13848 = load i32, i32* %r6.global-to-local, align 4
  %v1_13848 = load i32, i32* %r7.global-to-local, align 4
  %v2_13848 = add i32 %v1_13848, 92
  %v3_13848 = inttoptr i32 %v2_13848 to i32*
  store i32 %v0_13848, i32* %v3_13848, align 4
  %v0_1384c = load i32, i32* %r4.global-to-local, align 4
  %v1_1384c = add i32 %v0_1384c, 13
  %v2_1384c = inttoptr i32 %v1_1384c to i8*
  %v3_1384c = load i8, i8* %v2_1384c, align 1
  %v4_1384c = zext i8 %v3_1384c to i32
  %v1_13850 = add i32 %v0_1384c, 12
  %v2_13850 = inttoptr i32 %v1_13850 to i8*
  %v3_13850 = load i8, i8* %v2_13850, align 1
  %v4_13850 = zext i8 %v3_13850 to i32
  store i32 %v4_13850, i32* %r3.global-to-local, align 4
  %v1_13854 = add i32 %v0_1384c, 14
  %v2_13854 = inttoptr i32 %v1_13854 to i8*
  %v3_13854 = load i8, i8* %v2_13854, align 1
  %v4_13854 = zext i8 %v3_13854 to i32
  %v4_13858 = mul nuw nsw i32 %v4_1384c, 256
  %v5_13858 = or i32 %v4_13850, %v4_13858
  store i32 %v5_13858, i32* %r3.global-to-local, align 4
  %v1_1385c = add i32 %v0_1384c, 15
  %v2_1385c = inttoptr i32 %v1_1385c to i8*
  %v3_1385c = load i8, i8* %v2_1385c, align 1
  %v4_1385c = zext i8 %v3_1385c to i32
  %v4_13860 = mul nuw nsw i32 %v4_13854, 65536
  %v5_13860 = or i32 %v4_13860, %v5_13858
  %v4_13864 = mul nuw i32 %v4_1385c, 16777216
  %v5_13864 = or i32 %v5_13860, %v4_13864
  store i32 %v5_13864, i32* %r3.global-to-local, align 4
  %v1_13868 = load i32, i32* %r7.global-to-local, align 4
  %v2_13868 = add i32 %v1_13868, 12
  %v3_13868 = inttoptr i32 %v2_13868 to i32*
  store i32 %v5_13864, i32* %v3_13868, align 4
  %v0_1386c = load i32, i32* %r4.global-to-local, align 4
  %v1_1386c = add i32 %v0_1386c, 17
  %v2_1386c = inttoptr i32 %v1_1386c to i8*
  %v3_1386c = load i8, i8* %v2_1386c, align 1
  %v4_1386c = zext i8 %v3_1386c to i32
  %v1_13870 = add i32 %v0_1386c, 16
  %v2_13870 = inttoptr i32 %v1_13870 to i8*
  %v3_13870 = load i8, i8* %v2_13870, align 1
  %v4_13870 = zext i8 %v3_13870 to i32
  store i32 %v4_13870, i32* %r3.global-to-local, align 4
  %v1_13874 = add i32 %v0_1386c, 18
  %v2_13874 = inttoptr i32 %v1_13874 to i8*
  %v3_13874 = load i8, i8* %v2_13874, align 1
  %v4_13874 = zext i8 %v3_13874 to i32
  %v4_13878 = mul nuw nsw i32 %v4_1386c, 256
  %v5_13878 = or i32 %v4_13870, %v4_13878
  store i32 %v5_13878, i32* %r3.global-to-local, align 4
  %v1_1387c = add i32 %v0_1386c, 19
  %v2_1387c = inttoptr i32 %v1_1387c to i8*
  %v3_1387c = load i8, i8* %v2_1387c, align 1
  %v4_1387c = zext i8 %v3_1387c to i32
  %v4_13880 = mul nuw nsw i32 %v4_13874, 65536
  %v5_13880 = or i32 %v4_13880, %v5_13878
  %v4_13884 = mul nuw i32 %v4_1387c, 16777216
  %v5_13884 = or i32 %v5_13880, %v4_13884
  store i32 %v5_13884, i32* %r3.global-to-local, align 4
  %v1_13888 = load i32, i32* %r7.global-to-local, align 4
  %v2_13888 = add i32 %v1_13888, 16
  %v3_13888 = inttoptr i32 %v2_13888 to i32*
  store i32 %v5_13884, i32* %v3_13888, align 4
  %v0_1388c = load i32, i32* %r4.global-to-local, align 4
  %v1_1388c = add i32 %v0_1388c, 21
  %v2_1388c = inttoptr i32 %v1_1388c to i8*
  %v3_1388c = load i8, i8* %v2_1388c, align 1
  %v4_1388c = zext i8 %v3_1388c to i32
  %v1_13890 = add i32 %v0_1388c, 20
  %v2_13890 = inttoptr i32 %v1_13890 to i8*
  %v3_13890 = load i8, i8* %v2_13890, align 1
  %v4_13890 = zext i8 %v3_13890 to i32
  store i32 %v4_13890, i32* %r3.global-to-local, align 4
  %v1_13894 = add i32 %v0_1388c, 22
  %v2_13894 = inttoptr i32 %v1_13894 to i8*
  %v3_13894 = load i8, i8* %v2_13894, align 1
  %v4_13894 = zext i8 %v3_13894 to i32
  %v4_13898 = mul nuw nsw i32 %v4_1388c, 256
  %v5_13898 = or i32 %v4_13890, %v4_13898
  store i32 %v5_13898, i32* %r3.global-to-local, align 4
  %v1_1389c = add i32 %v0_1388c, 23
  %v2_1389c = inttoptr i32 %v1_1389c to i8*
  %v3_1389c = load i8, i8* %v2_1389c, align 1
  %v4_1389c = zext i8 %v3_1389c to i32
  %v4_138a0 = mul nuw nsw i32 %v4_13894, 65536
  %v5_138a0 = or i32 %v4_138a0, %v5_13898
  %v4_138a4 = mul nuw i32 %v4_1389c, 16777216
  %v5_138a4 = or i32 %v5_138a0, %v4_138a4
  store i32 %v5_138a4, i32* %r3.global-to-local, align 4
  %v1_138a8 = load i32, i32* %r7.global-to-local, align 4
  %v2_138a8 = add i32 %v1_138a8, 20
  %v3_138a8 = inttoptr i32 %v2_138a8 to i32*
  store i32 %v5_138a4, i32* %v3_138a8, align 4
  %v0_138ac = load i32, i32* %r4.global-to-local, align 4
  %v1_138ac = add i32 %v0_138ac, 25
  %v2_138ac = inttoptr i32 %v1_138ac to i8*
  %v3_138ac = load i8, i8* %v2_138ac, align 1
  %v4_138ac = zext i8 %v3_138ac to i32
  %v1_138b0 = add i32 %v0_138ac, 24
  %v2_138b0 = inttoptr i32 %v1_138b0 to i8*
  %v3_138b0 = load i8, i8* %v2_138b0, align 1
  %v4_138b0 = zext i8 %v3_138b0 to i32
  store i32 %v4_138b0, i32* %r3.global-to-local, align 4
  %v1_138b4 = add i32 %v0_138ac, 26
  %v2_138b4 = inttoptr i32 %v1_138b4 to i8*
  %v3_138b4 = load i8, i8* %v2_138b4, align 1
  %v4_138b4 = zext i8 %v3_138b4 to i32
  %v4_138b8 = mul nuw nsw i32 %v4_138ac, 256
  %v5_138b8 = or i32 %v4_138b0, %v4_138b8
  store i32 %v5_138b8, i32* %r3.global-to-local, align 4
  %v1_138bc = add i32 %v0_138ac, 27
  %v2_138bc = inttoptr i32 %v1_138bc to i8*
  %v3_138bc = load i8, i8* %v2_138bc, align 1
  %v4_138bc = zext i8 %v3_138bc to i32
  %v4_138c0 = mul nuw nsw i32 %v4_138b4, 65536
  %v5_138c0 = or i32 %v4_138c0, %v5_138b8
  %v4_138c4 = mul nuw i32 %v4_138bc, 16777216
  %v5_138c4 = or i32 %v5_138c0, %v4_138c4
  store i32 %v5_138c4, i32* %r3.global-to-local, align 4
  %v1_138c8 = load i32, i32* %r7.global-to-local, align 4
  %v2_138c8 = add i32 %v1_138c8, 24
  %v3_138c8 = inttoptr i32 %v2_138c8 to i32*
  store i32 %v5_138c4, i32* %v3_138c8, align 4
  %v0_138cc = load i32, i32* %r4.global-to-local, align 4
  %v1_138cc = add i32 %v0_138cc, 29
  %v2_138cc = inttoptr i32 %v1_138cc to i8*
  %v3_138cc = load i8, i8* %v2_138cc, align 1
  %v4_138cc = zext i8 %v3_138cc to i32
  %v1_138d0 = add i32 %v0_138cc, 28
  %v2_138d0 = inttoptr i32 %v1_138d0 to i8*
  %v3_138d0 = load i8, i8* %v2_138d0, align 1
  %v4_138d0 = zext i8 %v3_138d0 to i32
  store i32 %v4_138d0, i32* %r3.global-to-local, align 4
  %v1_138d4 = add i32 %v0_138cc, 30
  %v2_138d4 = inttoptr i32 %v1_138d4 to i8*
  %v3_138d4 = load i8, i8* %v2_138d4, align 1
  %v4_138d4 = zext i8 %v3_138d4 to i32
  %v4_138d8 = mul nuw nsw i32 %v4_138cc, 256
  %v5_138d8 = or i32 %v4_138d0, %v4_138d8
  store i32 %v5_138d8, i32* %r3.global-to-local, align 4
  %v1_138dc = add i32 %v0_138cc, 31
  %v2_138dc = inttoptr i32 %v1_138dc to i8*
  %v3_138dc = load i8, i8* %v2_138dc, align 1
  %v4_138dc = zext i8 %v3_138dc to i32
  %v4_138e0 = mul nuw nsw i32 %v4_138d4, 65536
  %v5_138e0 = or i32 %v4_138e0, %v5_138d8
  %v4_138e4 = mul nuw i32 %v4_138dc, 16777216
  %v5_138e4 = or i32 %v5_138e0, %v4_138e4
  store i32 %v5_138e4, i32* %r3.global-to-local, align 4
  %v1_138e8 = load i32, i32* %r7.global-to-local, align 4
  %v2_138e8 = add i32 %v1_138e8, 28
  %v3_138e8 = inttoptr i32 %v2_138e8 to i32*
  store i32 %v5_138e4, i32* %v3_138e8, align 4
  %v0_138ec = load i32, i32* %r4.global-to-local, align 4
  %v1_138ec = add i32 %v0_138ec, 33
  %v2_138ec = inttoptr i32 %v1_138ec to i8*
  %v3_138ec = load i8, i8* %v2_138ec, align 1
  %v4_138ec = zext i8 %v3_138ec to i32
  %v1_138f0 = add i32 %v0_138ec, 37
  %v2_138f0 = inttoptr i32 %v1_138f0 to i8*
  %v3_138f0 = load i8, i8* %v2_138f0, align 1
  %v4_138f0 = zext i8 %v3_138f0 to i32
  %v1_138f4 = add i32 %v0_138ec, 32
  %v2_138f4 = inttoptr i32 %v1_138f4 to i8*
  %v3_138f4 = load i8, i8* %v2_138f4, align 1
  %v4_138f4 = zext i8 %v3_138f4 to i32
  %v1_138f8 = add i32 %v0_138ec, 36
  %v2_138f8 = inttoptr i32 %v1_138f8 to i8*
  %v3_138f8 = load i8, i8* %v2_138f8, align 1
  %v4_138f8 = zext i8 %v3_138f8 to i32
  store i32 %v4_138f8, i32* %r3.global-to-local, align 4
  %v1_138fc = add i32 %v0_138ec, 34
  %v2_138fc = inttoptr i32 %v1_138fc to i8*
  %v3_138fc = load i8, i8* %v2_138fc, align 1
  %v4_138fc = zext i8 %v3_138fc to i32
  %v1_13900 = add i32 %v0_138ec, 38
  %v2_13900 = inttoptr i32 %v1_13900 to i8*
  %v3_13900 = load i8, i8* %v2_13900, align 1
  %v4_13900 = zext i8 %v3_13900 to i32
  %v1_13904 = add i32 %v0_138ec, 35
  %v2_13904 = inttoptr i32 %v1_13904 to i8*
  %v3_13904 = load i8, i8* %v2_13904, align 1
  %v4_13904 = zext i8 %v3_13904 to i32
  %v4_13908 = mul nuw nsw i32 %v4_138ec, 256
  %v5_13908 = or i32 %v4_138f4, %v4_13908
  %v4_1390c = mul nuw nsw i32 %v4_138f0, 256
  %v5_1390c = or i32 %v4_138f8, %v4_1390c
  store i32 %v5_1390c, i32* %r3.global-to-local, align 4
  %v1_13910 = add i32 %v0_138ec, 39
  %v2_13910 = inttoptr i32 %v1_13910 to i8*
  %v3_13910 = load i8, i8* %v2_13910, align 1
  %v4_13910 = zext i8 %v3_13910 to i32
  %v4_13914 = mul nuw nsw i32 %v4_138fc, 65536
  %v5_13914 = or i32 %v4_13914, %v5_13908
  %v4_13918 = mul nuw nsw i32 %v4_13900, 65536
  %v5_13918 = or i32 %v4_13918, %v5_1390c
  %v4_1391c = mul nuw i32 %v4_13904, 16777216
  %v5_1391c = or i32 %v5_13914, %v4_1391c
  %v4_13920 = mul nuw i32 %v4_13910, 16777216
  %v5_13920 = or i32 %v5_13918, %v4_13920
  store i32 %v5_13920, i32* %r3.global-to-local, align 4
  %v1_13934 = load i32, i32* %r7.global-to-local, align 4
  %v2_13934 = add i32 %v1_13934, 32
  %v3_13934 = inttoptr i32 %v2_13934 to i32*
  store i32 %v5_1391c, i32* %v3_13934, align 4
  %v0_13938 = load i32, i32* %r3.global-to-local, align 4
  %v1_13938 = load i32, i32* %r7.global-to-local, align 4
  %v2_13938 = add i32 %v1_13938, 36
  %v3_13938 = inttoptr i32 %v2_13938 to i32*
  store i32 %v0_13938, i32* %v3_13938, align 4
  %v0_1393c = load i32, i32* %r4.global-to-local, align 4
  %v1_1393c = add i32 %v0_1393c, 45
  %v2_1393c = inttoptr i32 %v1_1393c to i8*
  %v3_1393c = load i8, i8* %v2_1393c, align 1
  %v4_1393c = zext i8 %v3_1393c to i32
  %v1_13940 = add i32 %v0_1393c, 49
  %v2_13940 = inttoptr i32 %v1_13940 to i8*
  %v3_13940 = load i8, i8* %v2_13940, align 1
  %v4_13940 = zext i8 %v3_13940 to i32
  %v1_13944 = add i32 %v0_1393c, 44
  %v2_13944 = inttoptr i32 %v1_13944 to i8*
  %v3_13944 = load i8, i8* %v2_13944, align 1
  %v4_13944 = zext i8 %v3_13944 to i32
  %v1_13948 = add i32 %v0_1393c, 48
  %v2_13948 = inttoptr i32 %v1_13948 to i8*
  %v3_13948 = load i8, i8* %v2_13948, align 1
  %v4_13948 = zext i8 %v3_13948 to i32
  store i32 %v4_13948, i32* %r3.global-to-local, align 4
  %v1_1394c = add i32 %v0_1393c, 46
  %v2_1394c = inttoptr i32 %v1_1394c to i8*
  %v3_1394c = load i8, i8* %v2_1394c, align 1
  %v4_1394c = zext i8 %v3_1394c to i32
  %v1_13950 = add i32 %v0_1393c, 50
  %v2_13950 = inttoptr i32 %v1_13950 to i8*
  %v3_13950 = load i8, i8* %v2_13950, align 1
  %v4_13950 = zext i8 %v3_13950 to i32
  %v1_13954 = add i32 %v0_1393c, 47
  %v2_13954 = inttoptr i32 %v1_13954 to i8*
  %v3_13954 = load i8, i8* %v2_13954, align 1
  %v4_13954 = zext i8 %v3_13954 to i32
  %v4_13958 = mul nuw nsw i32 %v4_1393c, 256
  %v5_13958 = or i32 %v4_13944, %v4_13958
  %v4_1395c = mul nuw nsw i32 %v4_13940, 256
  %v5_1395c = or i32 %v4_13948, %v4_1395c
  store i32 %v5_1395c, i32* %r3.global-to-local, align 4
  %v1_13960 = add i32 %v0_1393c, 51
  %v2_13960 = inttoptr i32 %v1_13960 to i8*
  %v3_13960 = load i8, i8* %v2_13960, align 1
  %v4_13960 = zext i8 %v3_13960 to i32
  %v4_13964 = mul nuw nsw i32 %v4_1394c, 65536
  %v5_13964 = or i32 %v4_13964, %v5_13958
  %v4_13968 = mul nuw nsw i32 %v4_13950, 65536
  %v5_13968 = or i32 %v4_13968, %v5_1395c
  %v4_1396c = mul nuw i32 %v4_13954, 16777216
  %v5_1396c = or i32 %v5_13964, %v4_1396c
  %v4_13970 = mul nuw i32 %v4_13960, 16777216
  %v5_13970 = or i32 %v5_13968, %v4_13970
  store i32 %v5_13970, i32* %r3.global-to-local, align 4
  %v1_13984 = load i32, i32* %r7.global-to-local, align 4
  %v2_13984 = add i32 %v1_13984, 44
  %v3_13984 = inttoptr i32 %v2_13984 to i32*
  store i32 %v5_1396c, i32* %v3_13984, align 4
  %v0_13988 = load i32, i32* %r3.global-to-local, align 4
  %v1_13988 = load i32, i32* %r7.global-to-local, align 4
  %v2_13988 = add i32 %v1_13988, 48
  %v3_13988 = inttoptr i32 %v2_13988 to i32*
  store i32 %v0_13988, i32* %v3_13988, align 4
  %v0_1398c = load i32, i32* %r4.global-to-local, align 4
  %v1_1398c = add i32 %v0_1398c, 53
  %v2_1398c = inttoptr i32 %v1_1398c to i8*
  %v3_1398c = load i8, i8* %v2_1398c, align 1
  %v4_1398c = zext i8 %v3_1398c to i32
  %v1_13990 = add i32 %v0_1398c, 52
  %v2_13990 = inttoptr i32 %v1_13990 to i8*
  %v3_13990 = load i8, i8* %v2_13990, align 1
  %v4_13990 = zext i8 %v3_13990 to i32
  store i32 %v4_13990, i32* %r3.global-to-local, align 4
  %v1_13994 = add i32 %v0_1398c, 54
  %v2_13994 = inttoptr i32 %v1_13994 to i8*
  %v3_13994 = load i8, i8* %v2_13994, align 1
  %v4_13994 = zext i8 %v3_13994 to i32
  %v4_13998 = mul nuw nsw i32 %v4_1398c, 256
  %v5_13998 = or i32 %v4_13990, %v4_13998
  store i32 %v5_13998, i32* %r3.global-to-local, align 4
  %v1_1399c = add i32 %v0_1398c, 55
  %v2_1399c = inttoptr i32 %v1_1399c to i8*
  %v3_1399c = load i8, i8* %v2_1399c, align 1
  %v4_1399c = zext i8 %v3_1399c to i32
  %v4_139a0 = mul nuw nsw i32 %v4_13994, 65536
  %v5_139a0 = or i32 %v4_139a0, %v5_13998
  %v4_139a4 = mul nuw i32 %v4_1399c, 16777216
  %v5_139a4 = or i32 %v5_139a0, %v4_139a4
  store i32 %v5_139a4, i32* %r3.global-to-local, align 4
  %v1_139a8 = load i32, i32* %r7.global-to-local, align 4
  %v2_139a8 = add i32 %v1_139a8, 52
  %v3_139a8 = inttoptr i32 %v2_139a8 to i32*
  store i32 %v5_139a4, i32* %v3_139a8, align 4
  %v0_139ac = load i32, i32* %r4.global-to-local, align 4
  %v1_139ac = add i32 %v0_139ac, 57
  %v2_139ac = inttoptr i32 %v1_139ac to i8*
  %v3_139ac = load i8, i8* %v2_139ac, align 1
  %v4_139ac = zext i8 %v3_139ac to i32
  %v1_139b0 = add i32 %v0_139ac, 56
  %v2_139b0 = inttoptr i32 %v1_139b0 to i8*
  %v3_139b0 = load i8, i8* %v2_139b0, align 1
  %v4_139b0 = zext i8 %v3_139b0 to i32
  %v1_139b4 = add i32 %v0_139ac, 60
  %v2_139b4 = inttoptr i32 %v1_139b4 to i8*
  %v3_139b4 = load i8, i8* %v2_139b4, align 1
  %v4_139b4 = zext i8 %v3_139b4 to i32
  store i32 %v4_139b4, i32* %r3.global-to-local, align 4
  %v1_139b8 = add i32 %v0_139ac, 61
  %v2_139b8 = inttoptr i32 %v1_139b8 to i8*
  %v3_139b8 = load i8, i8* %v2_139b8, align 1
  %v4_139b8 = zext i8 %v3_139b8 to i32
  %v1_139bc = add i32 %v0_139ac, 58
  %v2_139bc = inttoptr i32 %v1_139bc to i8*
  %v3_139bc = load i8, i8* %v2_139bc, align 1
  %v4_139bc = zext i8 %v3_139bc to i32
  %v1_139c0 = add i32 %v0_139ac, 62
  %v2_139c0 = inttoptr i32 %v1_139c0 to i8*
  %v3_139c0 = load i8, i8* %v2_139c0, align 1
  %v4_139c0 = zext i8 %v3_139c0 to i32
  %v1_139c4 = add i32 %v0_139ac, 59
  %v2_139c4 = inttoptr i32 %v1_139c4 to i8*
  %v3_139c4 = load i8, i8* %v2_139c4, align 1
  %v4_139c4 = zext i8 %v3_139c4 to i32
  %v4_139c8 = mul nuw nsw i32 %v4_139ac, 256
  %v5_139c8 = or i32 %v4_139b0, %v4_139c8
  %v4_139cc = mul nuw nsw i32 %v4_139b8, 256
  %v5_139cc = or i32 %v4_139cc, %v4_139b4
  store i32 %v5_139cc, i32* %r3.global-to-local, align 4
  %v1_139d0 = add i32 %v0_139ac, 63
  %v2_139d0 = inttoptr i32 %v1_139d0 to i8*
  %v3_139d0 = load i8, i8* %v2_139d0, align 1
  %v4_139d0 = zext i8 %v3_139d0 to i32
  %v4_139d4 = mul nuw nsw i32 %v4_139bc, 65536
  %v5_139d4 = or i32 %v4_139d4, %v5_139c8
  %v4_139d8 = mul nuw nsw i32 %v4_139c0, 65536
  %v5_139d8 = or i32 %v4_139d8, %v5_139cc
  %v4_139dc = mul nuw i32 %v4_139d0, 16777216
  %v5_139dc = or i32 %v5_139d8, %v4_139dc
  %v4_139e0 = mul nuw i32 %v4_139c4, 16777216
  %v5_139e0 = or i32 %v5_139d4, %v4_139e0
  store i32 %v5_139dc, i32* %r3.global-to-local, align 4
  %v1_139f0 = load i32, i32* %r7.global-to-local, align 4
  %v2_139f0 = add i32 %v1_139f0, 56
  %v3_139f0 = inttoptr i32 %v2_139f0 to i32*
  store i32 %v5_139e0, i32* %v3_139f0, align 4
  %v0_139f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_139f4 = load i32, i32* %r7.global-to-local, align 4
  %v2_139f4 = add i32 %v1_139f4, 60
  %v3_139f4 = inttoptr i32 %v2_139f4 to i32*
  store i32 %v0_139f4, i32* %v3_139f4, align 4
  %v0_139f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_139f8 = add i32 %v0_139f8, 65
  %v2_139f8 = inttoptr i32 %v1_139f8 to i8*
  %v3_139f8 = load i8, i8* %v2_139f8, align 1
  %v4_139f8 = zext i8 %v3_139f8 to i32
  %v1_139fc = add i32 %v0_139f8, 64
  %v2_139fc = inttoptr i32 %v1_139fc to i8*
  %v3_139fc = load i8, i8* %v2_139fc, align 1
  %v4_139fc = zext i8 %v3_139fc to i32
  store i32 %v4_139fc, i32* %r3.global-to-local, align 4
  %v1_13a00 = add i32 %v0_139f8, 66
  %v2_13a00 = inttoptr i32 %v1_13a00 to i8*
  %v3_13a00 = load i8, i8* %v2_13a00, align 1
  %v4_13a00 = zext i8 %v3_13a00 to i32
  %v4_13a04 = mul nuw nsw i32 %v4_139f8, 256
  %v5_13a04 = or i32 %v4_139fc, %v4_13a04
  store i32 %v5_13a04, i32* %r3.global-to-local, align 4
  %v1_13a08 = add i32 %v0_139f8, 67
  %v2_13a08 = inttoptr i32 %v1_13a08 to i8*
  %v3_13a08 = load i8, i8* %v2_13a08, align 1
  %v4_13a08 = zext i8 %v3_13a08 to i32
  %v4_13a0c = mul nuw nsw i32 %v4_13a00, 65536
  %v5_13a0c = or i32 %v4_13a0c, %v5_13a04
  %v4_13a10 = mul nuw i32 %v4_13a08, 16777216
  %v5_13a10 = or i32 %v5_13a0c, %v4_13a10
  store i32 %v5_13a10, i32* %r3.global-to-local, align 4
  %v1_13a14 = load i32, i32* %r7.global-to-local, align 4
  %v2_13a14 = add i32 %v1_13a14, 64
  %v3_13a14 = inttoptr i32 %v2_13a14 to i32*
  store i32 %v5_13a10, i32* %v3_13a14, align 4
  %v0_13a18 = load i32, i32* %r4.global-to-local, align 4
  %v1_13a18 = add i32 %v0_13a18, 73
  %v2_13a18 = inttoptr i32 %v1_13a18 to i8*
  %v3_13a18 = load i8, i8* %v2_13a18, align 1
  %v4_13a18 = zext i8 %v3_13a18 to i32
  %v1_13a1c = add i32 %v0_13a18, 72
  %v2_13a1c = inttoptr i32 %v1_13a1c to i8*
  %v3_13a1c = load i8, i8* %v2_13a1c, align 1
  %v4_13a1c = zext i8 %v3_13a1c to i32
  store i32 %v4_13a1c, i32* %r3.global-to-local, align 4
  %v1_13a20 = add i32 %v0_13a18, 74
  %v2_13a20 = inttoptr i32 %v1_13a20 to i8*
  %v3_13a20 = load i8, i8* %v2_13a20, align 1
  %v4_13a20 = zext i8 %v3_13a20 to i32
  %v4_13a24 = mul nuw nsw i32 %v4_13a18, 256
  %v5_13a24 = or i32 %v4_13a1c, %v4_13a24
  store i32 %v5_13a24, i32* %r3.global-to-local, align 4
  %v1_13a28 = add i32 %v0_13a18, 75
  %v2_13a28 = inttoptr i32 %v1_13a28 to i8*
  %v3_13a28 = load i8, i8* %v2_13a28, align 1
  %v4_13a28 = zext i8 %v3_13a28 to i32
  %v4_13a2c = mul nuw nsw i32 %v4_13a20, 65536
  %v5_13a2c = or i32 %v4_13a2c, %v5_13a24
  %v4_13a30 = mul nuw i32 %v4_13a28, 16777216
  %v5_13a30 = or i32 %v5_13a2c, %v4_13a30
  store i32 %v5_13a30, i32* %r3.global-to-local, align 4
  %v1_13a34 = load i32, i32* %r7.global-to-local, align 4
  %v2_13a34 = add i32 %v1_13a34, 72
  %v3_13a34 = inttoptr i32 %v2_13a34 to i32*
  store i32 %v5_13a30, i32* %v3_13a34, align 4
  %v0_13a38 = load i32, i32* %r4.global-to-local, align 4
  %v1_13a38 = add i32 %v0_13a38, 81
  %v2_13a38 = inttoptr i32 %v1_13a38 to i8*
  %v3_13a38 = load i8, i8* %v2_13a38, align 1
  %v4_13a38 = zext i8 %v3_13a38 to i32
  %v1_13a3c = add i32 %v0_13a38, 80
  %v2_13a3c = inttoptr i32 %v1_13a3c to i8*
  %v3_13a3c = load i8, i8* %v2_13a3c, align 1
  %v4_13a3c = zext i8 %v3_13a3c to i32
  store i32 %v4_13a3c, i32* %r3.global-to-local, align 4
  %v1_13a40 = add i32 %v0_13a38, 82
  %v2_13a40 = inttoptr i32 %v1_13a40 to i8*
  %v3_13a40 = load i8, i8* %v2_13a40, align 1
  %v4_13a40 = zext i8 %v3_13a40 to i32
  %v4_13a44 = mul nuw nsw i32 %v4_13a38, 256
  %v5_13a44 = or i32 %v4_13a3c, %v4_13a44
  store i32 %v5_13a44, i32* %r3.global-to-local, align 4
  %v1_13a48 = add i32 %v0_13a38, 83
  %v2_13a48 = inttoptr i32 %v1_13a48 to i8*
  %v3_13a48 = load i8, i8* %v2_13a48, align 1
  %v4_13a48 = zext i8 %v3_13a48 to i32
  %v4_13a4c = mul nuw nsw i32 %v4_13a40, 65536
  %v5_13a4c = or i32 %v4_13a4c, %v5_13a44
  %v4_13a50 = mul nuw i32 %v4_13a48, 16777216
  %v5_13a50 = or i32 %v5_13a4c, %v4_13a50
  store i32 %v5_13a50, i32* %r3.global-to-local, align 4
  %v1_13a54 = load i32, i32* %r7.global-to-local, align 4
  %v2_13a54 = add i32 %v1_13a54, 80
  %v3_13a54 = inttoptr i32 %v2_13a54 to i32*
  store i32 %v5_13a50, i32* %v3_13a54, align 4
  %v0_13a58 = load i32, i32* %r4.global-to-local, align 4
  %v1_13a58 = add i32 %v0_13a58, 69
  %v2_13a58 = inttoptr i32 %v1_13a58 to i8*
  %v3_13a58 = load i8, i8* %v2_13a58, align 1
  %v4_13a58 = zext i8 %v3_13a58 to i32
  %v1_13a5c = add i32 %v0_13a58, 68
  %v2_13a5c = inttoptr i32 %v1_13a5c to i8*
  %v3_13a5c = load i8, i8* %v2_13a5c, align 1
  %v4_13a5c = zext i8 %v3_13a5c to i32
  store i32 %v4_13a5c, i32* %r3.global-to-local, align 4
  %v1_13a60 = add i32 %v0_13a58, 70
  %v2_13a60 = inttoptr i32 %v1_13a60 to i8*
  %v3_13a60 = load i8, i8* %v2_13a60, align 1
  %v4_13a60 = zext i8 %v3_13a60 to i32
  %v4_13a64 = mul nuw nsw i32 %v4_13a58, 256
  %v5_13a64 = or i32 %v4_13a5c, %v4_13a64
  store i32 %v5_13a64, i32* %r3.global-to-local, align 4
  %v1_13a68 = add i32 %v0_13a58, 71
  %v2_13a68 = inttoptr i32 %v1_13a68 to i8*
  %v3_13a68 = load i8, i8* %v2_13a68, align 1
  %v4_13a68 = zext i8 %v3_13a68 to i32
  %v4_13a6c = mul nuw nsw i32 %v4_13a60, 65536
  %v5_13a6c = or i32 %v4_13a6c, %v5_13a64
  %v4_13a70 = mul nuw i32 %v4_13a68, 16777216
  %v5_13a70 = or i32 %v5_13a6c, %v4_13a70
  store i32 %v5_13a70, i32* %r3.global-to-local, align 4
  %v1_13a74 = load i32, i32* %r7.global-to-local, align 4
  %v2_13a74 = add i32 %v1_13a74, 68
  %v3_13a74 = inttoptr i32 %v2_13a74 to i32*
  store i32 %v5_13a70, i32* %v3_13a74, align 4
  %v0_13a78 = load i32, i32* %r4.global-to-local, align 4
  %v1_13a78 = add i32 %v0_13a78, 77
  %v2_13a78 = inttoptr i32 %v1_13a78 to i8*
  %v3_13a78 = load i8, i8* %v2_13a78, align 1
  %v4_13a78 = zext i8 %v3_13a78 to i32
  %v1_13a7c = add i32 %v0_13a78, 76
  %v2_13a7c = inttoptr i32 %v1_13a7c to i8*
  %v3_13a7c = load i8, i8* %v2_13a7c, align 1
  %v4_13a7c = zext i8 %v3_13a7c to i32
  store i32 %v4_13a7c, i32* %r3.global-to-local, align 4
  %v1_13a80 = add i32 %v0_13a78, 78
  %v2_13a80 = inttoptr i32 %v1_13a80 to i8*
  %v3_13a80 = load i8, i8* %v2_13a80, align 1
  %v4_13a80 = zext i8 %v3_13a80 to i32
  %v4_13a84 = mul nuw nsw i32 %v4_13a78, 256
  %v5_13a84 = or i32 %v4_13a7c, %v4_13a84
  store i32 %v5_13a84, i32* %r3.global-to-local, align 4
  %v1_13a88 = add i32 %v0_13a78, 79
  %v2_13a88 = inttoptr i32 %v1_13a88 to i8*
  %v3_13a88 = load i8, i8* %v2_13a88, align 1
  %v4_13a88 = zext i8 %v3_13a88 to i32
  %v4_13a8c = mul nuw nsw i32 %v4_13a80, 65536
  %v5_13a8c = or i32 %v4_13a8c, %v5_13a84
  %v4_13a90 = mul nuw i32 %v4_13a88, 16777216
  %v5_13a90 = or i32 %v5_13a8c, %v4_13a90
  store i32 %v5_13a90, i32* %r3.global-to-local, align 4
  %v1_13a94 = load i32, i32* %r7.global-to-local, align 4
  %v2_13a94 = add i32 %v1_13a94, 76
  %v3_13a94 = inttoptr i32 %v2_13a94 to i32*
  store i32 %v5_13a90, i32* %v3_13a94, align 4
  %v0_13a98 = load i32, i32* %r4.global-to-local, align 4
  %v1_13a98 = add i32 %v0_13a98, 85
  %v2_13a98 = inttoptr i32 %v1_13a98 to i8*
  %v3_13a98 = load i8, i8* %v2_13a98, align 1
  %v4_13a98 = zext i8 %v3_13a98 to i32
  %v1_13a9c = add i32 %v0_13a98, 84
  %v2_13a9c = inttoptr i32 %v1_13a9c to i8*
  %v3_13a9c = load i8, i8* %v2_13a9c, align 1
  %v4_13a9c = zext i8 %v3_13a9c to i32
  store i32 %v4_13a9c, i32* %r3.global-to-local, align 4
  %v1_13aa0 = add i32 %v0_13a98, 86
  %v2_13aa0 = inttoptr i32 %v1_13aa0 to i8*
  %v3_13aa0 = load i8, i8* %v2_13aa0, align 1
  %v4_13aa0 = zext i8 %v3_13aa0 to i32
  %v4_13aa4 = mul nuw nsw i32 %v4_13a98, 256
  %v5_13aa4 = or i32 %v4_13a9c, %v4_13aa4
  store i32 %v5_13aa4, i32* %r3.global-to-local, align 4
  %v1_13aa8 = add i32 %v0_13a98, 87
  %v2_13aa8 = inttoptr i32 %v1_13aa8 to i8*
  %v3_13aa8 = load i8, i8* %v2_13aa8, align 1
  %v4_13aa8 = zext i8 %v3_13aa8 to i32
  %v4_13aac = mul nuw nsw i32 %v4_13aa0, 65536
  %v5_13aac = or i32 %v4_13aac, %v5_13aa4
  %v4_13ab0 = mul nuw i32 %v4_13aa8, 16777216
  %v5_13ab0 = or i32 %v5_13aac, %v4_13ab0
  store i32 %v5_13ab0, i32* %r3.global-to-local, align 4
  %v1_13ab4 = load i32, i32* %r7.global-to-local, align 4
  %v2_13ab4 = add i32 %v1_13ab4, 84
  %v3_13ab4 = inttoptr i32 %v2_13ab4 to i32*
  store i32 %v5_13ab0, i32* %v3_13ab4, align 4
  ret i32 %v4_139b8

; uselistorder directives
  uselistorder i32 %v4_139b8, { 1, 0 }
  uselistorder i32 %v0_139ac, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_1393c, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_138ec, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_1380c, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %tmp, { 6, 5, 3, 4, 2, 1, 0, 7 }
  uselistorder i32 87, { 1, 0 }
  uselistorder i32 69, { 1, 0 }
  uselistorder i32 62, { 1, 2, 0 }
  uselistorder i32 61, { 1, 0 }
  uselistorder i32 55, { 2, 4, 0, 3, 1 }
  uselistorder i32 54, { 1, 0 }
  uselistorder i32 53, { 1, 2, 0, 3 }
  uselistorder i32 47, { 1, 2, 3, 4, 0 }
  uselistorder i32 50, { 1, 0 }
  uselistorder i32 39, { 1, 2, 0 }
  uselistorder i32 38, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 34, { 2, 0, 1 }
  uselistorder i32 33, { 2, 3, 0, 1 }
  uselistorder i32 30, { 6, 0, 7, 4, 5, 1, 2, 3 }
  uselistorder i32 29, { 6, 1, 9, 0, 7, 8, 2, 10, 3, 11, 4, 12, 13, 5 }
  uselistorder i32 26, { 5, 0, 1, 6, 2, 3, 4 }
  uselistorder i32 25, { 10, 18, 19, 9, 2, 3, 4, 11, 12, 13, 0, 14, 5, 15, 1, 16, 6, 7, 17, 8, 20 }
  uselistorder i32 23, { 6, 1, 0, 7, 8, 2, 9, 3, 10, 4, 11, 5 }
  uselistorder i32 22, { 9, 1, 12, 2, 3, 4, 5, 0, 10, 11, 6, 7, 8 }
  uselistorder i32 21, { 9, 3, 2, 10, 11, 12, 8, 4, 5, 6, 7, 0, 1 }
  uselistorder i32 19, { 9, 12, 13, 14, 4, 0, 5, 1, 10, 11, 6, 7, 8, 15, 2, 16, 3, 17 }
  uselistorder i32 18, { 5, 6, 7, 8, 4, 9, 0, 10, 1, 11, 2, 12, 3, 13 }
  uselistorder i32 17, { 17, 21, 0, 4, 22, 23, 5, 24, 25, 6, 1, 18, 19, 20, 7, 8, 9, 10, 11, 12, 26, 13, 27, 14, 28, 15, 29, 16, 30, 31, 2, 32, 33, 34, 3, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i32 6, { 28, 36, 15, 16, 81, 2, 33, 3, 18, 29, 19, 30, 20, 31, 17, 32, 0, 21, 34, 35, 4, 5, 40, 41, 42, 6, 43, 44, 45, 46, 7, 47, 48, 49, 50, 8, 51, 9, 52, 53, 54, 22, 55, 10, 56, 57, 58, 23, 59, 11, 60, 61, 62, 24, 63, 64, 65, 25, 66, 12, 67, 68, 69, 70, 26, 71, 13, 72, 74, 75, 76, 77, 78, 27, 79, 14, 80, 1, 73, 37, 38, 39 }
  uselistorder i32 96, { 1, 0, 2, 3 }
}

define i32 @function_13ac0(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13ac0:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13ac0 = load i32, i32* @r4, align 4
  store i32 %v3_13ac0, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v2_13ad8 = inttoptr i32 %arg2 to i8*
  %v3_13ad8 = call i32 @function_11f70(i8* %v2_13ad8, i32 0)
  store i32 %v3_13ad8, i32* %r0.global-to-local, align 4
  %v0_13adc = load i32, i32* %r5.global-to-local, align 4
  %v1_13adc = inttoptr i32 %v0_13adc to i32*
  %v2_13adc = load i32, i32* %v1_13adc, align 4
  store i32 %v2_13adc, i32* %r3.global-to-local, align 4
  %v1_13ae0 = add i32 %v0_13adc, 4
  %v2_13ae0 = inttoptr i32 %v1_13ae0 to i32*
  %v3_13ae0 = load i32, i32* %v2_13ae0, align 4
  store i32 %v3_13ae0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_13ae8 = load i32, i32* %r6.global-to-local, align 4
  %v1_13ae8 = inttoptr i32 %v0_13ae8 to i32*
  store i32 %v2_13adc, i32* %v1_13ae8, align 4
  %v3_13ae8 = add i32 %v0_13ae8, 4
  %v4_13ae8 = inttoptr i32 %v3_13ae8 to i32*
  %v5_13ae8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13ae8, i32* %v4_13ae8, align 4
  %v0_13aec = load i32, i32* %r2.global-to-local, align 4
  %v1_13aec = load i32, i32* %r6.global-to-local, align 4
  %v2_13aec = add i32 %v1_13aec, 12
  %v3_13aec = inttoptr i32 %v2_13aec to i32*
  store i32 %v0_13aec, i32* %v3_13aec, align 4
  %v0_13af0 = load i32, i32* %r5.global-to-local, align 4
  %v1_13af0 = add i32 %v0_13af0, 9
  %v2_13af0 = inttoptr i32 %v1_13af0 to i8*
  %v3_13af0 = load i8, i8* %v2_13af0, align 1
  %v4_13af0 = zext i8 %v3_13af0 to i32
  store i32 %v4_13af0, i32* %r2.global-to-local, align 4
  %v1_13af4 = add i32 %v0_13af0, 8
  %v2_13af4 = inttoptr i32 %v1_13af4 to i8*
  %v3_13af4 = load i8, i8* %v2_13af4, align 1
  %v4_13af4 = zext i8 %v3_13af4 to i32
  %v4_13af8 = mul nuw nsw i32 %v4_13af0, 256
  %v5_13af8 = or i32 %v4_13af4, %v4_13af8
  store i32 %v5_13af8, i32* %r3.global-to-local, align 4
  %v1_13afc = load i32, i32* %r6.global-to-local, align 4
  %v2_13afc = add i32 %v1_13afc, 16
  %v3_13afc = inttoptr i32 %v2_13afc to i32*
  store i32 %v5_13af8, i32* %v3_13afc, align 4
  %v0_13b00 = load i32, i32* %r5.global-to-local, align 4
  %v1_13b00 = add i32 %v0_13b00, 11
  %v2_13b00 = inttoptr i32 %v1_13b00 to i8*
  %v3_13b00 = load i8, i8* %v2_13b00, align 1
  %v4_13b00 = zext i8 %v3_13b00 to i32
  store i32 %v4_13b00, i32* %r2.global-to-local, align 4
  %v1_13b04 = add i32 %v0_13b00, 10
  %v2_13b04 = inttoptr i32 %v1_13b04 to i8*
  %v3_13b04 = load i8, i8* %v2_13b04, align 1
  %v4_13b04 = zext i8 %v3_13b04 to i32
  %v4_13b08 = mul nuw nsw i32 %v4_13b00, 256
  %v5_13b08 = or i32 %v4_13b04, %v4_13b08
  store i32 %v5_13b08, i32* %r3.global-to-local, align 4
  %v1_13b0c = load i32, i32* %r6.global-to-local, align 4
  %v2_13b0c = add i32 %v1_13b0c, 20
  %v3_13b0c = inttoptr i32 %v2_13b0c to i32*
  store i32 %v5_13b08, i32* %v3_13b0c, align 4
  %v0_13b10 = load i32, i32* %r5.global-to-local, align 4
  %v1_13b10 = add i32 %v0_13b10, 13
  %v2_13b10 = inttoptr i32 %v1_13b10 to i8*
  %v3_13b10 = load i8, i8* %v2_13b10, align 1
  %v4_13b10 = zext i8 %v3_13b10 to i32
  store i32 %v4_13b10, i32* %r2.global-to-local, align 4
  %v1_13b14 = add i32 %v0_13b10, 12
  %v2_13b14 = inttoptr i32 %v1_13b14 to i8*
  %v3_13b14 = load i8, i8* %v2_13b14, align 1
  %v4_13b14 = zext i8 %v3_13b14 to i32
  %v4_13b18 = mul nuw nsw i32 %v4_13b10, 256
  %v5_13b18 = or i32 %v4_13b14, %v4_13b18
  store i32 %v5_13b18, i32* %r3.global-to-local, align 4
  %v1_13b1c = load i32, i32* %r6.global-to-local, align 4
  %v2_13b1c = add i32 %v1_13b1c, 24
  %v3_13b1c = inttoptr i32 %v2_13b1c to i32*
  store i32 %v5_13b18, i32* %v3_13b1c, align 4
  %v0_13b20 = load i32, i32* %r5.global-to-local, align 4
  %v1_13b20 = add i32 %v0_13b20, 20
  %v2_13b20 = inttoptr i32 %v1_13b20 to i32*
  %v3_13b20 = load i32, i32* %v2_13b20, align 4
  store i32 %v3_13b20, i32* %r3.global-to-local, align 4
  %v1_13b24 = add i32 %v0_13b20, 14
  %v2_13b24 = inttoptr i32 %v1_13b24 to i8*
  %v3_13b24 = load i8, i8* %v2_13b24, align 1
  %v4_13b24 = zext i8 %v3_13b24 to i32
  store i32 %v4_13b24, i32* %r0.global-to-local, align 4
  %v1_13b28 = add i32 %v0_13b20, 15
  %v2_13b28 = inttoptr i32 %v1_13b28 to i8*
  %v3_13b28 = load i8, i8* %v2_13b28, align 1
  %v4_13b28 = zext i8 %v3_13b28 to i32
  store i32 %v4_13b28, i32* %ip.global-to-local, align 4
  %v1_13b2c = add i32 %v0_13b20, 16
  %v2_13b2c = inttoptr i32 %v1_13b2c to i32*
  %v3_13b2c = load i32, i32* %v2_13b2c, align 4
  store i32 %v3_13b2c, i32* %r1.global-to-local, align 4
  %v1_13b30 = load i32, i32* %r6.global-to-local, align 4
  %v2_13b30 = add i32 %v1_13b30, 44
  %v3_13b30 = inttoptr i32 %v2_13b30 to i32*
  store i32 %v3_13b20, i32* %v3_13b30, align 4
  %v0_13b34 = load i32, i32* %r5.global-to-local, align 4
  %v1_13b34 = add i32 %v0_13b34, 24
  %v2_13b34 = inttoptr i32 %v1_13b34 to i32*
  %v3_13b34 = load i32, i32* %v2_13b34, align 4
  store i32 %v3_13b34, i32* %r3.global-to-local, align 4
  %v1_13b38 = load i32, i32* %r6.global-to-local, align 4
  %v2_13b38 = add i32 %v1_13b38, 48
  %v3_13b38 = inttoptr i32 %v2_13b38 to i32*
  store i32 %v3_13b34, i32* %v3_13b38, align 4
  %v0_13b3c = load i32, i32* %r5.global-to-local, align 4
  %v1_13b3c = add i32 %v0_13b3c, 28
  %v2_13b3c = inttoptr i32 %v1_13b3c to i32*
  %v3_13b3c = load i32, i32* %v2_13b3c, align 4
  store i32 %v3_13b3c, i32* %r3.global-to-local, align 4
  %v1_13b40 = load i32, i32* %r6.global-to-local, align 4
  %v2_13b40 = add i32 %v1_13b40, 52
  %v3_13b40 = inttoptr i32 %v2_13b40 to i32*
  store i32 %v3_13b3c, i32* %v3_13b40, align 4
  %v0_13b44 = load i32, i32* %r5.global-to-local, align 4
  %v1_13b44 = add i32 %v0_13b44, 32
  %v2_13b44 = inttoptr i32 %v1_13b44 to i32*
  %v3_13b44 = load i32, i32* %v2_13b44, align 4
  store i32 %v3_13b44, i32* %r3.global-to-local, align 4
  %v1_13b48 = load i32, i32* %r6.global-to-local, align 4
  %v2_13b48 = add i32 %v1_13b48, 56
  %v3_13b48 = inttoptr i32 %v2_13b48 to i32*
  store i32 %v3_13b44, i32* %v3_13b48, align 4
  %v0_13b4c = load i32, i32* %r5.global-to-local, align 4
  %v1_13b4c = add i32 %v0_13b4c, 40
  %v2_13b4c = inttoptr i32 %v1_13b4c to i32*
  %v3_13b4c = load i32, i32* %v2_13b4c, align 4
  store i32 %v3_13b4c, i32* %r3.global-to-local, align 4
  %v1_13b50 = load i32, i32* %r6.global-to-local, align 4
  %v2_13b50 = add i32 %v1_13b50, 64
  %v3_13b50 = inttoptr i32 %v2_13b50 to i32*
  store i32 %v3_13b4c, i32* %v3_13b50, align 4
  %v0_13b54 = load i32, i32* %r5.global-to-local, align 4
  %v1_13b54 = add i32 %v0_13b54, 48
  %v2_13b54 = inttoptr i32 %v1_13b54 to i32*
  %v3_13b54 = load i32, i32* %v2_13b54, align 4
  store i32 %v3_13b54, i32* %r3.global-to-local, align 4
  %v1_13b58 = load i32, i32* %r6.global-to-local, align 4
  %v2_13b58 = add i32 %v1_13b58, 72
  %v3_13b58 = inttoptr i32 %v2_13b58 to i32*
  store i32 %v3_13b54, i32* %v3_13b58, align 4
  %v0_13b5c = load i32, i32* %r5.global-to-local, align 4
  %v1_13b5c = add i32 %v0_13b5c, 36
  %v2_13b5c = inttoptr i32 %v1_13b5c to i32*
  %v3_13b5c = load i32, i32* %v2_13b5c, align 4
  store i32 %v3_13b5c, i32* %r3.global-to-local, align 4
  %v1_13b60 = load i32, i32* %r6.global-to-local, align 4
  %v2_13b60 = add i32 %v1_13b60, 60
  %v3_13b60 = inttoptr i32 %v2_13b60 to i32*
  store i32 %v3_13b5c, i32* %v3_13b60, align 4
  %v0_13b64 = load i32, i32* %r5.global-to-local, align 4
  %v1_13b64 = add i32 %v0_13b64, 44
  %v2_13b64 = inttoptr i32 %v1_13b64 to i32*
  %v3_13b64 = load i32, i32* %v2_13b64, align 4
  store i32 %v3_13b64, i32* %r3.global-to-local, align 4
  %v0_13b68 = load i32, i32* %r0.global-to-local, align 4
  %v1_13b68 = load i32, i32* %ip.global-to-local, align 4
  %v4_13b68 = mul i32 %v1_13b68, 256
  %v5_13b68 = or i32 %v4_13b68, %v0_13b68
  store i32 %v5_13b68, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_13b70 = load i32, i32* %r6.global-to-local, align 4
  %v2_13b70 = add i32 %v1_13b70, 28
  %v3_13b70 = inttoptr i32 %v2_13b70 to i32*
  store i32 %v5_13b68, i32* %v3_13b70, align 4
  %v0_13b74 = load i32, i32* %r1.global-to-local, align 4
  %v1_13b74 = load i32, i32* %r6.global-to-local, align 4
  %v2_13b74 = add i32 %v1_13b74, 32
  %v3_13b74 = inttoptr i32 %v2_13b74 to i32*
  store i32 %v0_13b74, i32* %v3_13b74, align 4
  %v0_13b78 = load i32, i32* %r2.global-to-local, align 4
  %v1_13b78 = load i32, i32* %r6.global-to-local, align 4
  %v2_13b78 = add i32 %v1_13b78, 36
  %v3_13b78 = inttoptr i32 %v2_13b78 to i32*
  store i32 %v0_13b78, i32* %v3_13b78, align 4
  %v0_13b7c = load i32, i32* %r3.global-to-local, align 4
  %v1_13b7c = load i32, i32* %r6.global-to-local, align 4
  %v2_13b7c = add i32 %v1_13b7c, 68
  %v3_13b7c = inttoptr i32 %v2_13b7c to i32*
  store i32 %v0_13b7c, i32* %v3_13b7c, align 4
  %v0_13b80 = load i32, i32* %r5.global-to-local, align 4
  %v1_13b80 = add i32 %v0_13b80, 52
  %v2_13b80 = inttoptr i32 %v1_13b80 to i32*
  %v3_13b80 = load i32, i32* %v2_13b80, align 4
  store i32 %v3_13b80, i32* %r3.global-to-local, align 4
  %v1_13b84 = load i32, i32* %r6.global-to-local, align 4
  %v2_13b84 = add i32 %v1_13b84, 76
  %v3_13b84 = inttoptr i32 %v2_13b84 to i32*
  store i32 %v3_13b80, i32* %v3_13b84, align 4
  %v2_13b88 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13b88, i32* %r4.global-to-local, align 4
  ret i32 %v5_13b68

; uselistorder directives
  uselistorder i32 %v0_13b20, { 1, 0, 2, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 5, 4, 0 }
  uselistorder i32 76, { 2, 0, 1 }
  uselistorder i32 68, { 2, 0, 1 }
  uselistorder i32 60, { 3, 1, 2, 0, 4 }
  uselistorder i32 72, { 2, 0, 1 }
  uselistorder i32 64, { 15, 11, 12, 0, 8, 47, 13, 14, 16, 17, 9, 18, 19, 20, 1, 21, 22, 23, 2, 24, 25, 26, 10, 27, 28, 29, 3, 30, 31, 32, 4, 33, 34, 35, 5, 36, 37, 38, 39, 40, 6, 41, 42, 43, 44, 45, 7, 46 }
  uselistorder i32 56, { 3, 0, 1, 2, 4 }
  uselistorder i32 52, { 2, 3, 0, 1, 4, 5, 6 }
  uselistorder i32 15, { 30, 26, 25, 27, 3, 28, 4, 29, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 15, 16, 17, 18, 19, 20, 21, 22, 23, 31, 32, 24, 33, 34, 35, 36, 1, 37, 38, 39, 40, 2, 41 }
  uselistorder i32 14, { 11, 8, 23, 0, 9, 1, 7, 4, 10, 5, 12, 13, 6, 14, 15, 16, 17, 2, 18, 19, 20, 21, 3, 22 }
  uselistorder i32 13, { 15, 8, 7, 9, 10, 11, 12, 13, 4, 14, 0, 1, 16, 17, 18, 19, 20, 5, 21, 22, 23, 24, 25, 26, 27, 28, 6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 3, 57, 58 }
  uselistorder i32 9, { 38, 39, 40, 7, 4, 41, 8, 5, 30, 22, 10, 29, 11, 25, 12, 26, 13, 27, 14, 28, 9, 2, 31, 23, 32, 33, 24, 34, 15, 35, 36, 16, 17, 18, 37, 0, 19, 1, 20, 55, 42, 43, 6, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 3, 54, 21 }
  uselistorder i32 (i8*, i32)* @function_11f70, { 2, 0, 7, 6, 1, 3, 4, 5 }
  uselistorder i32 88, { 2, 0, 1, 3 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
}

define i32 @function_13b90() local_unnamed_addr {
dec_label_pc_13b90:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_13b90 = load i32, i32* @r1, align 4
  %v1_13b90 = load i32, i32* @r0, align 4
  %v2_13b90 = sub i32 %v0_13b90, %v1_13b90
  %v3_13b90 = icmp ult i32 %v0_13b90, %v1_13b90
  %v4_13b90 = xor i32 %v1_13b90, %v0_13b90
  %v5_13b90 = xor i32 %v2_13b90, %v0_13b90
  %v6_13b90 = and i32 %v5_13b90, %v4_13b90
  %v7_13b90 = icmp slt i32 %v6_13b90, 0
  store i1 %v7_13b90, i1* %cpsr_v.global-to-local, align 1
  %v8_13b90 = icmp slt i32 %v2_13b90, 0
  store i1 %v8_13b90, i1* %cpsr_n.global-to-local, align 1
  %v9_13b90 = icmp eq i32 %v0_13b90, %v1_13b90
  store i1 %v9_13b90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_13b90, label %dec_label_pc_13ddc, label %dec_label_pc_13b98

dec_label_pc_13b98:                               ; preds = %dec_label_pc_13b90
  br i1 %v9_13b90, label %.thread122, label %bb

.thread122:                                       ; preds = %bb144, %.thread121, %bb141, %dec_label_pc_13b98
  %merge = phi i32 [ %v0_13b90, %dec_label_pc_13b98 ], [ %v2_13e70, %bb141 ], [ %v11_13e8c, %bb144 ], [ %v7_13e8c, %.thread121 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_13b98
  store i32 %v1_13b90, i32* %stack_var_-8, align 4
  %v0_13ba0 = load i32, i32* @r2, align 4
  %v2_13ba0 = add i32 %v0_13ba0, -4
  store i32 %v2_13ba0, i32* %r2.global-to-local, align 4
  %v4_13ba0 = sub i32 3, %v0_13ba0
  %v5_13ba0 = and i32 %v4_13ba0, %v0_13ba0
  %v6_13ba0 = icmp slt i32 %v5_13ba0, 0
  store i1 %v6_13ba0, i1* %cpsr_v.global-to-local, align 1
  %v7_13ba0 = icmp slt i32 %v2_13ba0, 0
  store i1 %v7_13ba0, i1* %cpsr_n.global-to-local, align 1
  %v8_13ba0 = icmp eq i32 %v0_13ba0, 4
  store i1 %v8_13ba0, i1* %cpsr_z.global-to-local, align 1
  %v5_13ba4 = icmp slt i32 %v0_13ba0, 4
  br i1 %v5_13ba4, label %bb131, label %dec_label_pc_13ba8

dec_label_pc_13ba8:                               ; preds = %bb
  %v1_13ba8 = urem i32 %v1_13b90, 4
  store i32 %v1_13ba8, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_13ba8 = icmp eq i32 %v1_13ba8, 0
  store i1 %v2_13ba8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13ba8, label %dec_label_pc_13bb0, label %dec_label_pc_13c54

dec_label_pc_13bb0:                               ; preds = %dec_label_pc_13ba8
  %v1_13bb0 = urem i32 %v0_13b90, 4
  store i32 %v1_13bb0, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_13bb0 = icmp eq i32 %v1_13bb0, 0
  store i1 %v2_13bb0, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_13b90 to i2
  br i1 %v2_13bb0, label %dec_label_pc_13bb8, label %dec_label_pc_13c84

dec_label_pc_13bb8:                               ; preds = %dec_label_pc_13bb0, %dec_label_pc_13c7c
  %v0_13bd092 = phi i32 [ %v1_13b90, %dec_label_pc_13bb0 ], [ %v0_13ccc75, %dec_label_pc_13c7c ]
  %v0_13bcc91 = phi i32 [ %v0_13b90, %dec_label_pc_13bb0 ], [ %v0_13c7c, %dec_label_pc_13c7c ]
  %v0_13bb8 = phi i32 [ %v2_13ba0, %dec_label_pc_13bb0 ], [ %v2_13c74, %dec_label_pc_13c7c ]
  %v2_13bb8 = add i32 %v0_13bb8, -8
  store i32 %v2_13bb8, i32* %r2.global-to-local, align 4
  %v4_13bb8 = sub i32 7, %v0_13bb8
  %v5_13bb8 = and i32 %v4_13bb8, %v0_13bb8
  %v6_13bb8 = icmp slt i32 %v5_13bb8, 0
  store i1 %v6_13bb8, i1* %cpsr_v.global-to-local, align 1
  %v7_13bb8 = icmp slt i32 %v2_13bb8, 0
  store i1 %v7_13bb8, i1* %cpsr_n.global-to-local, align 1
  %v8_13bb8 = icmp eq i32 %v0_13bb8, 8
  store i1 %v8_13bb8, i1* %cpsr_z.global-to-local, align 1
  %v5_13bbc = icmp slt i32 %v0_13bb8, 8
  br i1 %v5_13bbc, label %dec_label_pc_13c0c, label %dec_label_pc_13bc0

dec_label_pc_13bc0:                               ; preds = %dec_label_pc_13bb8
  %v2_13bc0 = add i32 %v0_13bb8, -28
  store i32 %v2_13bc0, i32* %r2.global-to-local, align 4
  %v4_13bc0 = sub i32 27, %v0_13bb8
  %v5_13bc0 = and i32 %v4_13bc0, %v2_13bb8
  %v6_13bc0 = icmp slt i32 %v5_13bc0, 0
  store i1 %v6_13bc0, i1* %cpsr_v.global-to-local, align 1
  %v7_13bc0 = icmp slt i32 %v2_13bc0, 0
  store i1 %v7_13bc0, i1* %cpsr_n.global-to-local, align 1
  %v8_13bc0 = icmp eq i32 %v2_13bb8, 20
  store i1 %v8_13bc0, i1* %cpsr_z.global-to-local, align 1
  %v5_13bc4 = icmp slt i32 %v2_13bb8, 20
  br i1 %v5_13bc4, label %dec_label_pc_13bf8, label %dec_label_pc_13bc8

dec_label_pc_13bc8:                               ; preds = %dec_label_pc_13bc0
  %v0_13bc8 = load i32, i32* @r4, align 4
  store i32 %v0_13bc8, i32* %stack_var_-12, align 4
  br label %dec_label_pc_13bcc

dec_label_pc_13bcc:                               ; preds = %dec_label_pc_13bcc.dec_label_pc_13bcc_crit_edge, %dec_label_pc_13bc8
  %v0_13bd0 = phi i32 [ %v12_13bd8, %dec_label_pc_13bcc.dec_label_pc_13bcc_crit_edge ], [ %v0_13bd092, %dec_label_pc_13bc8 ]
  %v0_13bcc = phi i32 [ %v0_13bcc.pre, %dec_label_pc_13bcc.dec_label_pc_13bcc_crit_edge ], [ %v0_13bcc91, %dec_label_pc_13bc8 ]
  %v1_13bcc = inttoptr i32 %v0_13bcc to i32*
  %v2_13bcc = load i32, i32* %v1_13bcc, align 4
  store i32 %v2_13bcc, i32* %r3.global-to-local, align 4
  %v3_13bcc = add i32 %v0_13bcc, 4
  %v4_13bcc = inttoptr i32 %v3_13bcc to i32*
  %v5_13bcc = load i32, i32* %v4_13bcc, align 4
  store i32 %v5_13bcc, i32* %r4.global-to-local, align 4
  %v6_13bcc = add i32 %v0_13bcc, 8
  %v7_13bcc = inttoptr i32 %v6_13bcc to i32*
  %v8_13bcc = load i32, i32* %v7_13bcc, align 4
  store i32 %v8_13bcc, i32* %ip.global-to-local, align 4
  %v9_13bcc = add i32 %v0_13bcc, 12
  %v10_13bcc = inttoptr i32 %v9_13bcc to i32*
  %v11_13bcc = load i32, i32* %v10_13bcc, align 4
  store i32 %v11_13bcc, i32* %lr.global-to-local, align 4
  %v12_13bcc = add i32 %v0_13bcc, 16
  store i32 %v12_13bcc, i32* %r1.global-to-local, align 4
  %v1_13bd0 = inttoptr i32 %v0_13bd0 to i32*
  store i32 %v2_13bcc, i32* %v1_13bd0, align 4
  %v3_13bd0 = add i32 %v0_13bd0, 4
  %v4_13bd0 = inttoptr i32 %v3_13bd0 to i32*
  %v5_13bd0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13bd0, i32* %v4_13bd0, align 4
  %v6_13bd0 = add i32 %v0_13bd0, 8
  %v7_13bd0 = inttoptr i32 %v6_13bd0 to i32*
  %v8_13bd0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_13bd0, i32* %v7_13bd0, align 4
  %v9_13bd0 = add i32 %v0_13bd0, 12
  %v10_13bd0 = inttoptr i32 %v9_13bd0 to i32*
  %v11_13bd0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_13bd0, i32* %v10_13bd0, align 4
  %v12_13bd0 = add i32 %v0_13bd0, 16
  store i32 %v12_13bd0, i32* %r0.global-to-local, align 4
  %v0_13bd4 = load i32, i32* %r1.global-to-local, align 4
  %v1_13bd4 = inttoptr i32 %v0_13bd4 to i32*
  %v2_13bd4 = load i32, i32* %v1_13bd4, align 4
  store i32 %v2_13bd4, i32* %r3.global-to-local, align 4
  %v3_13bd4 = add i32 %v0_13bd4, 4
  %v4_13bd4 = inttoptr i32 %v3_13bd4 to i32*
  %v5_13bd4 = load i32, i32* %v4_13bd4, align 4
  store i32 %v5_13bd4, i32* %r4.global-to-local, align 4
  %v6_13bd4 = add i32 %v0_13bd4, 8
  %v7_13bd4 = inttoptr i32 %v6_13bd4 to i32*
  %v8_13bd4 = load i32, i32* %v7_13bd4, align 4
  store i32 %v8_13bd4, i32* @ip, align 4
  %v9_13bd4 = add i32 %v0_13bd4, 12
  %v10_13bd4 = inttoptr i32 %v9_13bd4 to i32*
  %v11_13bd4 = load i32, i32* %v10_13bd4, align 4
  store i32 %v11_13bd4, i32* @lr, align 4
  %v12_13bd4 = add i32 %v0_13bd4, 16
  store i32 %v12_13bd4, i32* @r1, align 4
  %v1_13bd8 = inttoptr i32 %v12_13bd0 to i32*
  store i32 %v2_13bd4, i32* %v1_13bd8, align 4
  %v3_13bd8 = add i32 %v0_13bd0, 20
  %v4_13bd8 = inttoptr i32 %v3_13bd8 to i32*
  %v5_13bd8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13bd8, i32* %v4_13bd8, align 4
  %v6_13bd8 = add i32 %v0_13bd0, 24
  %v7_13bd8 = inttoptr i32 %v6_13bd8 to i32*
  %v8_13bd8 = load i32, i32* @ip, align 4
  store i32 %v8_13bd8, i32* %v7_13bd8, align 4
  %v9_13bd8 = add i32 %v0_13bd0, 28
  %v10_13bd8 = inttoptr i32 %v9_13bd8 to i32*
  %v11_13bd8 = load i32, i32* @lr, align 4
  store i32 %v11_13bd8, i32* %v10_13bd8, align 4
  %v12_13bd8 = add i32 %v0_13bd0, 32
  store i32 %v12_13bd8, i32* @r0, align 4
  %v0_13bdc = load i32, i32* %r2.global-to-local, align 4
  %v2_13bdc = add i32 %v0_13bdc, -32
  store i32 %v2_13bdc, i32* %r2.global-to-local, align 4
  %v6_13be0 = icmp slt i32 %v0_13bdc, 32
  br i1 %v6_13be0, label %dec_label_pc_13be4, label %dec_label_pc_13bcc.dec_label_pc_13bcc_crit_edge

dec_label_pc_13bcc.dec_label_pc_13bcc_crit_edge:  ; preds = %dec_label_pc_13bcc
  %v0_13bcc.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_13bcc

dec_label_pc_13be4:                               ; preds = %dec_label_pc_13bcc
  %v4_13be4 = add i32 %v0_13bdc, -16
  %v6_13be4 = add i32 %v0_13bdc, 2147483616
  %v7_13be4 = and i32 %v4_13be4, %v6_13be4
  %v8_13be4 = icmp slt i32 %v7_13be4, 0
  store i1 %v8_13be4, i1* %cpsr_v.global-to-local, align 1
  %v9_13be4 = icmp slt i32 %v4_13be4, 0
  store i1 %v9_13be4, i1* %cpsr_n.global-to-local, align 1
  %v10_13be4 = icmp eq i32 %v4_13be4, 0
  store i1 %v10_13be4, i1* %cpsr_z.global-to-local, align 1
  %v5_13be8 = icmp slt i32 %v2_13bdc, -16
  br i1 %v5_13be8, label %.thread1, label %bb128

bb128:                                            ; preds = %dec_label_pc_13be4
  %v6_13be8 = load i32, i32* @r1, align 4
  %v7_13be8 = inttoptr i32 %v6_13be8 to i32*
  %v8_13be8 = load i32, i32* %v7_13be8, align 4
  store i32 %v8_13be8, i32* %r3.global-to-local, align 4
  %v9_13be8 = add i32 %v6_13be8, 4
  %v10_13be8 = inttoptr i32 %v9_13be8 to i32*
  %v11_13be8 = load i32, i32* %v10_13be8, align 4
  store i32 %v11_13be8, i32* %r4.global-to-local, align 4
  %v12_13be8 = add i32 %v6_13be8, 8
  %v13_13be8 = inttoptr i32 %v12_13be8 to i32*
  %v14_13be8 = load i32, i32* %v13_13be8, align 4
  store i32 %v14_13be8, i32* @ip, align 4
  %v15_13be8 = add i32 %v6_13be8, 12
  %v16_13be8 = inttoptr i32 %v15_13be8 to i32*
  %v17_13be8 = load i32, i32* %v16_13be8, align 4
  store i32 %v17_13be8, i32* @lr, align 4
  %v18_13be8 = add i32 %v6_13be8, 16
  store i32 %v18_13be8, i32* @r1, align 4
  %v7_13bec = inttoptr i32 %v12_13bd8 to i32*
  store i32 %v8_13be8, i32* %v7_13bec, align 4
  %v9_13bec = add i32 %v0_13bd0, 36
  %v10_13bec = inttoptr i32 %v9_13bec to i32*
  %v11_13bec = load i32, i32* %r4.global-to-local, align 4
  store i32 %v11_13bec, i32* %v10_13bec, align 4
  %v12_13bec = add i32 %v0_13bd0, 40
  %v13_13bec = inttoptr i32 %v12_13bec to i32*
  %v14_13bec = load i32, i32* @ip, align 4
  store i32 %v14_13bec, i32* %v13_13bec, align 4
  %v15_13bec = add i32 %v0_13bd0, 44
  %v16_13bec = inttoptr i32 %v15_13bec to i32*
  %v17_13bec = load i32, i32* @lr, align 4
  store i32 %v17_13bec, i32* %v16_13bec, align 4
  %v18_13bec = add i32 %v0_13bd0, 48
  store i32 %v18_13bec, i32* @r0, align 4
  %v6_13bf0 = load i32, i32* %r2.global-to-local, align 4
  %v7_13bf0 = add i32 %v6_13bf0, -16
  store i32 %v7_13bf0, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_13be4, %bb128
  %v3_13c00101 = phi i32 [ %v12_13bd8, %dec_label_pc_13be4 ], [ %v18_13bec, %bb128 ]
  %v0_13bf895 = phi i32 [ %v2_13bdc, %dec_label_pc_13be4 ], [ %v7_13bf0, %bb128 ]
  %v2_13bf4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13bf4, i32* @r4, align 4
  br label %dec_label_pc_13bf8

dec_label_pc_13bf8:                               ; preds = %dec_label_pc_13bc0, %.thread1
  %v3_13c00100 = phi i32 [ %v0_13bd092, %dec_label_pc_13bc0 ], [ %v3_13c00101, %.thread1 ]
  %v0_13bf8 = phi i32 [ %v2_13bc0, %dec_label_pc_13bc0 ], [ %v0_13bf895, %.thread1 ]
  %v1_13bf8 = add i32 %v0_13bf8, 20
  store i32 %v1_13bf8, i32* %r2.global-to-local, align 4
  %v3_13bf8 = sub i32 0, %v0_13bf8
  %v4_13bf8 = and i32 %v1_13bf8, %v3_13bf8
  %v5_13bf8 = icmp slt i32 %v4_13bf8, 0
  store i1 %v5_13bf8, i1* %cpsr_v.global-to-local, align 1
  %v6_13bf8 = icmp slt i32 %v1_13bf8, 0
  store i1 %v6_13bf8, i1* %cpsr_n.global-to-local, align 1
  %v7_13bf8 = icmp eq i32 %v1_13bf8, 0
  store i1 %v7_13bf8, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13bfc

dec_label_pc_13bfc:                               ; preds = %.thread117, %dec_label_pc_13bf8
  %v0_13c0c.pre147 = phi i32 [ %v0_13c0c.pre, %.thread117 ], [ %v1_13bf8, %dec_label_pc_13bf8 ]
  %v3_13c00 = phi i32 [ %v3_13c0098118, %.thread117 ], [ %v3_13c00100, %dec_label_pc_13bf8 ]
  %v1_13c04 = phi i1 [ %v1_13c08, %.thread117 ], [ %v5_13bf8, %dec_label_pc_13bf8 ]
  %v0_13c04 = phi i1 [ %v0_13c08, %.thread117 ], [ %v6_13bf8, %dec_label_pc_13bf8 ]
  %v2_13bfc = xor i1 %v1_13c04, %v0_13c04
  br i1 %v2_13bfc, label %.thread117, label %bb129

bb129:                                            ; preds = %dec_label_pc_13bfc
  %v3_13bfc = load i32, i32* @r1, align 4
  %v4_13bfc = inttoptr i32 %v3_13bfc to i32*
  %v5_13bfc = load i32, i32* %v4_13bfc, align 4
  store i32 %v5_13bfc, i32* %r3.global-to-local, align 4
  %v6_13bfc = add i32 %v3_13bfc, 4
  %v7_13bfc = inttoptr i32 %v6_13bfc to i32*
  %v8_13bfc = load i32, i32* %v7_13bfc, align 4
  store i32 %v8_13bfc, i32* @ip, align 4
  %v9_13bfc = add i32 %v3_13bfc, 8
  %v10_13bfc = inttoptr i32 %v9_13bfc to i32*
  %v11_13bfc = load i32, i32* %v10_13bfc, align 4
  store i32 %v11_13bfc, i32* @lr, align 4
  %v12_13bfc = add i32 %v3_13bfc, 12
  store i32 %v12_13bfc, i32* @r1, align 4
  %v4_13c00 = inttoptr i32 %v3_13c00 to i32*
  store i32 %v5_13bfc, i32* %v4_13c00, align 4
  %v6_13c00 = add i32 %v3_13c00, 4
  %v7_13c00 = inttoptr i32 %v6_13c00 to i32*
  %v8_13c00 = load i32, i32* @ip, align 4
  store i32 %v8_13c00, i32* %v7_13c00, align 4
  %v9_13c00 = add i32 %v3_13c00, 8
  %v10_13c00 = inttoptr i32 %v9_13c00 to i32*
  %v11_13c00 = load i32, i32* @lr, align 4
  store i32 %v11_13c00, i32* %v10_13c00, align 4
  %v12_13c00 = add i32 %v3_13c00, 12
  store i32 %v12_13c00, i32* @r0, align 4
  %v3_13c04 = load i32, i32* %r2.global-to-local, align 4
  %v4_13c04 = add i32 %v3_13c04, -12
  store i32 %v4_13c04, i32* %r2.global-to-local, align 4
  %v6_13c04 = sub i32 11, %v3_13c04
  %v7_13c04 = and i32 %v6_13c04, %v3_13c04
  %v8_13c04 = icmp slt i32 %v7_13c04, 0
  store i1 %v8_13c04, i1* %cpsr_v.global-to-local, align 1
  %v9_13c04 = icmp slt i32 %v4_13c04, 0
  store i1 %v9_13c04, i1* %cpsr_n.global-to-local, align 1
  %v10_13c04 = icmp eq i32 %v3_13c04, 12
  store i1 %v10_13c04, i1* %cpsr_z.global-to-local, align 1
  br label %.thread117

.thread117:                                       ; preds = %dec_label_pc_13bfc, %bb129
  %v0_13c0c.pre = phi i32 [ %v4_13c04, %bb129 ], [ %v0_13c0c.pre147, %dec_label_pc_13bfc ]
  %v3_13c0098118 = phi i32 [ %v12_13c00, %bb129 ], [ %v3_13c00, %dec_label_pc_13bfc ]
  %v1_13c08 = phi i1 [ %v8_13c04, %bb129 ], [ %v1_13c04, %dec_label_pc_13bfc ]
  %v0_13c08 = phi i1 [ %v9_13c04, %bb129 ], [ %v0_13c04, %dec_label_pc_13bfc ]
  %v2_13c08 = xor i1 %v1_13c08, %v0_13c08
  br i1 %v2_13c08, label %dec_label_pc_13c0c, label %dec_label_pc_13bfc

dec_label_pc_13c0c:                               ; preds = %.thread117, %dec_label_pc_13bb8
  %v7_13c1c = phi i32 [ %v0_13bd092, %dec_label_pc_13bb8 ], [ %v3_13c0098118, %.thread117 ]
  %v0_13c0c = phi i32 [ %v2_13bb8, %dec_label_pc_13bb8 ], [ %v0_13c0c.pre, %.thread117 ]
  %v2_13c0c = add i32 %v0_13c0c, 8
  store i32 %v2_13c0c, i32* %r2.global-to-local, align 4
  %v4_13c0c = sub i32 0, %v0_13c0c
  %v5_13c0c = and i32 %v2_13c0c, %v4_13c0c
  %v6_13c0c = icmp slt i32 %v5_13c0c, 0
  store i1 %v6_13c0c, i1* %cpsr_v.global-to-local, align 1
  %v7_13c0c = icmp slt i32 %v2_13c0c, 0
  store i1 %v7_13c0c, i1* %cpsr_n.global-to-local, align 1
  %v8_13c0c = icmp eq i32 %v2_13c0c, 0
  store i1 %v8_13c0c, i1* %cpsr_z.global-to-local, align 1
  %v5_13c10 = icmp slt i32 %v0_13c0c, -8
  br i1 %v5_13c10, label %bb131, label %dec_label_pc_13c14

dec_label_pc_13c14:                               ; preds = %dec_label_pc_13c0c
  %v6_13c14 = add i32 %v0_13c0c, 4
  store i32 %v6_13c14, i32* %r2.global-to-local, align 4
  %v8_13c14 = sub i32 -5, %v0_13c0c
  %v9_13c14 = and i32 %v8_13c14, %v2_13c0c
  %v10_13c14 = icmp slt i32 %v9_13c14, 0
  store i1 %v10_13c14, i1* %cpsr_v.global-to-local, align 1
  %v11_13c14 = icmp slt i32 %v6_13c14, 0
  store i1 %v11_13c14, i1* %cpsr_n.global-to-local, align 1
  %v12_13c14 = icmp eq i32 %v2_13c0c, 4
  store i1 %v12_13c14, i1* %cpsr_z.global-to-local, align 1
  %v5_13c18 = icmp slt i32 %v2_13c0c, 4
  %v6_13c18 = load i32, i32* @r1, align 4
  %v7_13c18 = inttoptr i32 %v6_13c18 to i32*
  %v8_13c18 = load i32, i32* %v7_13c18, align 4
  store i32 %v8_13c18, i32* %r3.global-to-local, align 4
  %v10_13c18 = add i32 %v6_13c18, 4
  br i1 %v5_13c18, label %.thread5, label %bb130

.thread5:                                         ; preds = %dec_label_pc_13c14
  store i32 %v10_13c18, i32* @r1, align 4
  %v8_13c1c = inttoptr i32 %v7_13c1c to i32*
  store i32 %v8_13c18, i32* %v8_13c1c, align 4
  %v9_13c1c = load i32, i32* @r0, align 4
  %v10_13c1c = add i32 %v9_13c1c, 4
  store i32 %v10_13c1c, i32* @r0, align 4
  %v0_13c2c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb131

bb130:                                            ; preds = %dec_label_pc_13c14
  %v10_13c20 = inttoptr i32 %v10_13c18 to i32*
  %v11_13c20 = load i32, i32* %v10_13c20, align 4
  store i32 %v11_13c20, i32* @ip, align 4
  %v12_13c20 = add i32 %v6_13c18, 8
  store i32 %v12_13c20, i32* @r1, align 4
  %v7_13c24 = inttoptr i32 %v7_13c1c to i32*
  store i32 %v8_13c18, i32* %v7_13c24, align 4
  %v9_13c24 = add i32 %v7_13c1c, 4
  %v10_13c24 = inttoptr i32 %v9_13c24 to i32*
  %v11_13c24 = load i32, i32* @ip, align 4
  store i32 %v11_13c24, i32* %v10_13c24, align 4
  %v12_13c24 = add i32 %v7_13c1c, 8
  store i32 %v12_13c24, i32* @r0, align 4
  %v6_13c28 = load i32, i32* %r2.global-to-local, align 4
  %v7_13c28 = add i32 %v6_13c28, -4
  store i32 %v7_13c28, i32* %r2.global-to-local, align 4
  br label %bb131

bb131:                                            ; preds = %.thread5, %.thread11, %dec_label_pc_13c0c, %bb, %dec_label_pc_13dd4, %dec_label_pc_13d68, %dec_label_pc_13cfc, %bb130
  %v2_13c3c = phi i32 [ %v10_13c1c, %.thread5 ], [ %v0_13ccc75, %.thread11 ], [ %v7_13c1c, %dec_label_pc_13c0c ], [ %v1_13b90, %bb ], [ %v2_13c3c113, %dec_label_pc_13dd4 ], [ %v2_13c3c112, %dec_label_pc_13d68 ], [ %v2_13c3c111, %dec_label_pc_13cfc ], [ %v12_13c24, %bb130 ]
  %v0_13c2c = phi i32 [ %v0_13c2c.pre, %.thread5 ], [ %v2_13c74, %.thread11 ], [ %v2_13c0c, %dec_label_pc_13c0c ], [ %v2_13ba0, %bb ], [ %v0_13c2c109, %dec_label_pc_13dd4 ], [ %v0_13c2c108, %dec_label_pc_13d68 ], [ %v0_13c2c107, %dec_label_pc_13cfc ], [ %v7_13c28, %bb130 ]
  %v1_13c2c = add i32 %v0_13c2c, 4
  store i32 %v1_13c2c, i32* %r2.global-to-local, align 4
  %v3_13c2c = sub i32 0, %v0_13c2c
  %v4_13c2c = and i32 %v1_13c2c, %v3_13c2c
  %v5_13c2c = icmp slt i32 %v4_13c2c, 0
  store i1 %v5_13c2c, i1* %cpsr_v.global-to-local, align 1
  %v6_13c2c = icmp slt i32 %v1_13c2c, 0
  store i1 %v6_13c2c, i1* %cpsr_n.global-to-local, align 1
  %v7_13c2c = icmp eq i32 %v1_13c2c, 0
  store i1 %v7_13c2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13c2c, label %bb132, label %bb133

bb132:                                            ; preds = %bb131
  %v3_13c30 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_13c30, i32* %r0.global-to-local, align 4
  ret i32 %v3_13c30

bb133:                                            ; preds = %bb131
  %v1_13c34 = add i32 %v0_13c2c, 2
  %v3_13c34 = sub i32 -3, %v0_13c2c
  %v4_13c34 = and i32 %v3_13c34, %v1_13c2c
  %v5_13c34 = icmp slt i32 %v4_13c34, 0
  store i1 %v5_13c34, i1* %cpsr_v.global-to-local, align 1
  %v6_13c34 = icmp slt i32 %v1_13c34, 0
  store i1 %v6_13c34, i1* %cpsr_n.global-to-local, align 1
  %v7_13c34 = icmp eq i32 %v1_13c2c, 2
  store i1 %v7_13c34, i1* %cpsr_z.global-to-local, align 1
  %v0_13c38 = load i32, i32* @r1, align 4
  %v1_13c38 = inttoptr i32 %v0_13c38 to i8*
  %v2_13c38 = load i8, i8* %v1_13c38, align 1
  %v3_13c38 = zext i8 %v2_13c38 to i32
  store i32 %v3_13c38, i32* %r3.global-to-local, align 4
  %v5_13c38 = add i32 %v0_13c38, 1
  store i32 %v5_13c38, i32* %r1.global-to-local, align 4
  %v3_13c3c = inttoptr i32 %v2_13c3c to i8*
  store i8 %v2_13c38, i8* %v3_13c3c, align 1
  %v4_13c3c = load i32, i32* @r0, align 4
  %v5_13c3c = add i32 %v4_13c3c, 1
  store i32 %v5_13c3c, i32* %r0.global-to-local, align 4
  %v0_13c40 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_13c40 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_13c40 = xor i1 %v0_13c40, %v1_13c40
  br i1 %v2_13c40, label %.thread119, label %bb134

bb134:                                            ; preds = %bb133
  %v3_13c40 = load i32, i32* %r1.global-to-local, align 4
  %v4_13c40 = inttoptr i32 %v3_13c40 to i8*
  %v5_13c40 = load i8, i8* %v4_13c40, align 1
  %v6_13c40 = zext i8 %v5_13c40 to i32
  store i32 %v6_13c40, i32* %r3.global-to-local, align 4
  %v8_13c40 = add i32 %v3_13c40, 1
  store i32 %v8_13c40, i32* %r1.global-to-local, align 4
  %v6_13c44 = inttoptr i32 %v5_13c3c to i8*
  store i8 %v5_13c40, i8* %v6_13c44, align 1
  %v7_13c44 = load i32, i32* %r0.global-to-local, align 4
  %v8_13c44 = add i32 %v7_13c44, 1
  store i32 %v8_13c44, i32* %r0.global-to-local, align 4
  %v1_13c48.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_13c48.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread119

.thread119:                                       ; preds = %bb133, %bb134
  %v7_13c4c = phi i32 [ %v8_13c44, %bb134 ], [ %v5_13c3c, %bb133 ]
  %v2_13c4c = phi i1 [ %v2_13c48.pre, %bb134 ], [ %v1_13c40, %bb133 ]
  %v1_13c4c = phi i1 [ %v1_13c48.pre, %bb134 ], [ %v0_13c40, %bb133 ]
  %v0_13c48 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_13c48 = xor i1 %v2_13c4c, %v1_13c4c
  %v4_13c48 = or i1 %v0_13c48, %v3_13c48
  br i1 %v4_13c48, label %.thread120, label %bb135

bb135:                                            ; preds = %.thread119
  %v5_13c48 = load i32, i32* %r1.global-to-local, align 4
  %v6_13c48 = inttoptr i32 %v5_13c48 to i8*
  %v7_13c48 = load i8, i8* %v6_13c48, align 1
  %v8_13c48 = zext i8 %v7_13c48 to i32
  store i32 %v8_13c48, i32* %r3.global-to-local, align 4
  %v10_13c48 = add i32 %v5_13c48, 1
  store i32 %v10_13c48, i32* %r1.global-to-local, align 4
  %v8_13c4c = inttoptr i32 %v7_13c4c to i8*
  store i8 %v7_13c48, i8* %v8_13c4c, align 1
  %v9_13c4c = load i32, i32* %r0.global-to-local, align 4
  %v10_13c4c = add i32 %v9_13c4c, 1
  store i32 %v10_13c4c, i32* %r0.global-to-local, align 4
  br label %.thread120

.thread120:                                       ; preds = %.thread119, %bb135
  %v2_13c50 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13c50, i32* %r0.global-to-local, align 4
  ret i32 %v2_13c50

dec_label_pc_13c54:                               ; preds = %dec_label_pc_13ba8
  %v1_13c54 = sub nsw i32 4, %v1_13ba8
  store i32 %v1_13c54, i32* @ip, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_13c58 = icmp ult i32 %v1_13c54, 2
  store i1 %v8_13c58, i1* %cpsr_n.global-to-local, align 1
  %v9_13c58 = icmp eq i32 %v1_13c54, 2
  store i1 %v9_13c58, i1* %cpsr_z.global-to-local, align 1
  %v1_13c5c = inttoptr i32 %v0_13b90 to i8*
  %v2_13c5c = load i8, i8* %v1_13c5c, align 1
  %v3_13c5c = zext i8 %v2_13c5c to i32
  store i32 %v3_13c5c, i32* %r3.global-to-local, align 4
  %v5_13c5c = add i32 %v0_13b90, 1
  store i32 %v5_13c5c, i32* @r1, align 4
  %v3_13c60 = inttoptr i32 %v1_13b90 to i8*
  store i8 %v2_13c5c, i8* %v3_13c60, align 1
  %v4_13c60 = load i32, i32* @r0, align 4
  %v5_13c60 = add i32 %v4_13c60, 1
  store i32 %v5_13c60, i32* @r0, align 4
  br i1 %v8_13c58, label %.thread11, label %bb136

bb136:                                            ; preds = %dec_label_pc_13c54
  %v6_13c64 = load i32, i32* @r1, align 4
  %v7_13c64 = inttoptr i32 %v6_13c64 to i8*
  %v8_13c64 = load i8, i8* %v7_13c64, align 1
  %v9_13c64 = zext i8 %v8_13c64 to i32
  store i32 %v9_13c64, i32* %r3.global-to-local, align 4
  %v11_13c64 = add i32 %v6_13c64, 1
  store i32 %v11_13c64, i32* @r1, align 4
  %v9_13c68 = inttoptr i32 %v5_13c60 to i8*
  store i8 %v8_13c64, i8* %v9_13c68, align 1
  %v10_13c68 = load i32, i32* @r0, align 4
  %v11_13c68 = add i32 %v10_13c68, 1
  store i32 %v11_13c68, i32* @r0, align 4
  br i1 %v9_13c58, label %.thread11, label %bb137

bb137:                                            ; preds = %bb136
  %v8_13c6c = load i32, i32* @r1, align 4
  %v9_13c6c = inttoptr i32 %v8_13c6c to i8*
  %v10_13c6c = load i8, i8* %v9_13c6c, align 1
  %v11_13c6c = zext i8 %v10_13c6c to i32
  store i32 %v11_13c6c, i32* %r3.global-to-local, align 4
  %v13_13c6c = add i32 %v8_13c6c, 1
  store i32 %v13_13c6c, i32* @r1, align 4
  %v11_13c70 = inttoptr i32 %v11_13c68 to i8*
  store i8 %v10_13c6c, i8* %v11_13c70, align 1
  %v12_13c70 = load i32, i32* @r0, align 4
  %v13_13c70 = add i32 %v12_13c70, 1
  store i32 %v13_13c70, i32* @r0, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb136, %dec_label_pc_13c54, %bb137
  %v0_13ccc75 = phi i32 [ %v11_13c68, %bb136 ], [ %v5_13c60, %dec_label_pc_13c54 ], [ %v13_13c70, %bb137 ]
  %v0_13c74 = load i32, i32* %r2.global-to-local, align 4
  %v1_13c74 = load i32, i32* @ip, align 4
  %v2_13c74 = sub i32 %v0_13c74, %v1_13c74
  store i32 %v2_13c74, i32* %r2.global-to-local, align 4
  %v4_13c74 = xor i32 %v1_13c74, %v0_13c74
  %v5_13c74 = xor i32 %v2_13c74, %v0_13c74
  %v6_13c74 = and i32 %v5_13c74, %v4_13c74
  %v7_13c74 = icmp slt i32 %v6_13c74, 0
  store i1 %v7_13c74, i1* %cpsr_v.global-to-local, align 1
  %v8_13c74 = icmp slt i32 %v2_13c74, 0
  store i1 %v8_13c74, i1* %cpsr_n.global-to-local, align 1
  %v9_13c74 = icmp eq i32 %v0_13c74, %v1_13c74
  store i1 %v9_13c74, i1* %cpsr_z.global-to-local, align 1
  %v5_13c78 = icmp slt i32 %v0_13c74, %v1_13c74
  br i1 %v5_13c78, label %bb131, label %dec_label_pc_13c7c

dec_label_pc_13c7c:                               ; preds = %.thread11
  %v0_13c7c = load i32, i32* @r1, align 4
  %v1_13c7c = urem i32 %v0_13c7c, 4
  store i32 %v1_13c7c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_13c7c = icmp eq i32 %v1_13c7c, 0
  store i1 %v2_13c7c, i1* %cpsr_z.global-to-local, align 1
  %extract.t123 = trunc i32 %v0_13c7c to i2
  br i1 %v2_13c7c, label %dec_label_pc_13bb8, label %dec_label_pc_13c84

dec_label_pc_13c84:                               ; preds = %dec_label_pc_13bb0, %dec_label_pc_13c7c
  %v0_13ccc74 = phi i32 [ %v1_13b90, %dec_label_pc_13bb0 ], [ %v0_13ccc75, %dec_label_pc_13c7c ]
  %v0_13d78 = phi i32 [ %v2_13ba0, %dec_label_pc_13bb0 ], [ %v2_13c74, %dec_label_pc_13c7c ]
  %v0_13c8c.off0 = phi i2 [ %extract.t, %dec_label_pc_13bb0 ], [ %extract.t123, %dec_label_pc_13c7c ]
  %v0_13c84 = phi i32 [ %v0_13b90, %dec_label_pc_13bb0 ], [ %v0_13c7c, %dec_label_pc_13c7c ]
  %v1_13c84 = and i32 %v0_13c84, -4
  store i32 %v1_13c84, i32* %r1.global-to-local, align 4
  %v1_13c88 = inttoptr i32 %v1_13c84 to i32*
  %v2_13c88 = load i32, i32* %v1_13c88, align 4
  store i32 %v2_13c88, i32* @lr, align 4
  %v4_13c88 = add i32 %v1_13c84, 4
  store i32 %v4_13c88, i32* %r1.global-to-local, align 4
  %v2_13d70 = add i32 %v0_13d78, -12
  %v4_13d70 = sub i32 11, %v0_13d78
  %v5_13d70 = and i32 %v4_13d70, %v0_13d78
  %v6_13d70 = icmp slt i32 %v5_13d70, 0
  store i1 %v6_13d70, i1* %cpsr_v.global-to-local, align 1
  %v7_13d70 = icmp slt i32 %v2_13d70, 0
  store i1 %v7_13d70, i1* %cpsr_n.global-to-local, align 1
  %v8_13d70 = icmp eq i32 %v0_13d78, 12
  store i1 %v8_13d70, i1* %cpsr_z.global-to-local, align 1
  %v5_13d74 = icmp slt i32 %v0_13d78, 12
  switch i2 %v0_13c8c.off0, label %dec_label_pc_13c98 [
    i2 -1, label %dec_label_pc_13d70
    i2 -2, label %dec_label_pc_13d04
  ]

dec_label_pc_13c98:                               ; preds = %dec_label_pc_13c84
  br i1 %v5_13d74, label %dec_label_pc_13ce4, label %dec_label_pc_13ca0

dec_label_pc_13ca0:                               ; preds = %dec_label_pc_13c98
  store i32 %v2_13d70, i32* %r2.global-to-local, align 4
  %v3_13ca4 = load i32, i32* @r4, align 4
  store i32 %v3_13ca4, i32* %stack_var_-16, align 4
  %v6_13ca4 = load i32, i32* @r5, align 4
  store i32 %v6_13ca4, i32* %stack_var_-12, align 4
  br label %dec_label_pc_13ca8

dec_label_pc_13ca8:                               ; preds = %dec_label_pc_13ca8.dec_label_pc_13ca8_crit_edge, %dec_label_pc_13ca0
  %v0_13ccc = phi i32 [ %v12_13ccc, %dec_label_pc_13ca8.dec_label_pc_13ca8_crit_edge ], [ %v0_13ccc74, %dec_label_pc_13ca0 ]
  %v0_13cac = phi i32 [ %v0_13cac.pre, %dec_label_pc_13ca8.dec_label_pc_13ca8_crit_edge ], [ %v4_13c88, %dec_label_pc_13ca0 ]
  %v0_13ca8 = phi i32 [ %v0_13ca8.pre, %dec_label_pc_13ca8.dec_label_pc_13ca8_crit_edge ], [ %v2_13c88, %dec_label_pc_13ca0 ]
  %v3_13ca8 = udiv i32 %v0_13ca8, 256
  store i32 %v3_13ca8, i32* %r3.global-to-local, align 4
  %v1_13cac = inttoptr i32 %v0_13cac to i32*
  %v2_13cac = load i32, i32* %v1_13cac, align 4
  store i32 %v2_13cac, i32* %r4.global-to-local, align 4
  %v3_13cac = add i32 %v0_13cac, 4
  %v4_13cac = inttoptr i32 %v3_13cac to i32*
  %v5_13cac = load i32, i32* %v4_13cac, align 4
  store i32 %v5_13cac, i32* %r5.global-to-local, align 4
  %v6_13cac = add i32 %v0_13cac, 8
  %v7_13cac = inttoptr i32 %v6_13cac to i32*
  %v8_13cac = load i32, i32* %v7_13cac, align 4
  store i32 %v8_13cac, i32* %ip.global-to-local, align 4
  %v9_13cac = add i32 %v0_13cac, 12
  %v10_13cac = inttoptr i32 %v9_13cac to i32*
  %v11_13cac = load i32, i32* %v10_13cac, align 4
  store i32 %v11_13cac, i32* @lr, align 4
  %v12_13cac = add i32 %v0_13cac, 16
  store i32 %v12_13cac, i32* %r1.global-to-local, align 4
  %v4_13cb0 = mul i32 %v2_13cac, 16777216
  %v5_13cb0 = or i32 %v4_13cb0, %v3_13ca8
  store i32 %v5_13cb0, i32* %r3.global-to-local, align 4
  %v3_13cb4 = udiv i32 %v2_13cac, 256
  %v4_13cb8 = mul i32 %v5_13cac, 16777216
  %v5_13cb8 = or i32 %v4_13cb8, %v3_13cb4
  store i32 %v5_13cb8, i32* %r4.global-to-local, align 4
  %v3_13cbc = udiv i32 %v5_13cac, 256
  %v4_13cc0 = mul i32 %v8_13cac, 16777216
  %v5_13cc0 = or i32 %v4_13cc0, %v3_13cbc
  store i32 %v5_13cc0, i32* %r5.global-to-local, align 4
  %v3_13cc4 = udiv i32 %v8_13cac, 256
  %v4_13cc8 = mul i32 %v11_13cac, 16777216
  %v5_13cc8 = or i32 %v4_13cc8, %v3_13cc4
  store i32 %v5_13cc8, i32* @ip, align 4
  %v1_13ccc = inttoptr i32 %v0_13ccc to i32*
  store i32 %v5_13cb0, i32* %v1_13ccc, align 4
  %v3_13ccc = add i32 %v0_13ccc, 4
  %v4_13ccc = inttoptr i32 %v3_13ccc to i32*
  %v5_13ccc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13ccc, i32* %v4_13ccc, align 4
  %v6_13ccc = add i32 %v0_13ccc, 8
  %v7_13ccc = inttoptr i32 %v6_13ccc to i32*
  %v8_13ccc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_13ccc, i32* %v7_13ccc, align 4
  %v9_13ccc = add i32 %v0_13ccc, 12
  %v10_13ccc = inttoptr i32 %v9_13ccc to i32*
  %v11_13ccc = load i32, i32* @ip, align 4
  store i32 %v11_13ccc, i32* %v10_13ccc, align 4
  %v12_13ccc = add i32 %v0_13ccc, 16
  store i32 %v12_13ccc, i32* @r0, align 4
  %v0_13cd0 = load i32, i32* %r2.global-to-local, align 4
  %v2_13cd0 = add i32 %v0_13cd0, -16
  store i32 %v2_13cd0, i32* %r2.global-to-local, align 4
  %v6_13cd4 = icmp slt i32 %v0_13cd0, 16
  br i1 %v6_13cd4, label %dec_label_pc_13cd8, label %dec_label_pc_13ca8.dec_label_pc_13ca8_crit_edge

dec_label_pc_13ca8.dec_label_pc_13ca8_crit_edge:  ; preds = %dec_label_pc_13ca8
  %v0_13ca8.pre = load i32, i32* @lr, align 4
  %v0_13cac.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13ca8

dec_label_pc_13cd8:                               ; preds = %dec_label_pc_13ca8
  %v2_13cd8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13cd8, i32* @r4, align 4
  %v5_13cd8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_13cd8, i32* @r5, align 4
  %v2_13cdc = add i32 %v0_13cd0, -4
  store i32 %v2_13cdc, i32* %r2.global-to-local, align 4
  %v4_13cdc = add i32 %v0_13cd0, 2147483632
  %v5_13cdc = and i32 %v2_13cdc, %v4_13cdc
  %v6_13cdc = icmp slt i32 %v5_13cdc, 0
  store i1 %v6_13cdc, i1* %cpsr_v.global-to-local, align 1
  %v7_13cdc = icmp slt i32 %v2_13cdc, 0
  store i1 %v7_13cdc, i1* %cpsr_n.global-to-local, align 1
  %v8_13cdc = icmp eq i32 %v2_13cdc, 0
  store i1 %v8_13cdc, i1* %cpsr_z.global-to-local, align 1
  %v5_13ce0 = icmp slt i32 %v2_13cd0, -12
  br i1 %v5_13ce0, label %dec_label_pc_13cfc, label %dec_label_pc_13ce4

dec_label_pc_13ce4:                               ; preds = %dec_label_pc_13cd8, %dec_label_pc_13c98, %dec_label_pc_13ce4
  %v1_13cf0 = phi i32 [ %v4_13cf0, %dec_label_pc_13ce4 ], [ %v12_13ccc, %dec_label_pc_13cd8 ], [ %v0_13ccc74, %dec_label_pc_13c98 ]
  %v0_13ce4 = load i32, i32* @lr, align 4
  %v3_13ce4 = udiv i32 %v0_13ce4, 256
  store i32 %v3_13ce4, i32* %ip.global-to-local, align 4
  %v0_13ce8 = load i32, i32* %r1.global-to-local, align 4
  %v1_13ce8 = inttoptr i32 %v0_13ce8 to i32*
  %v2_13ce8 = load i32, i32* %v1_13ce8, align 4
  store i32 %v2_13ce8, i32* @lr, align 4
  %v4_13ce8 = add i32 %v0_13ce8, 4
  store i32 %v4_13ce8, i32* %r1.global-to-local, align 4
  %v4_13cec = mul i32 %v2_13ce8, 16777216
  %v5_13cec = or i32 %v4_13cec, %v3_13ce4
  store i32 %v5_13cec, i32* @ip, align 4
  %v2_13cf0 = inttoptr i32 %v1_13cf0 to i32*
  store i32 %v5_13cec, i32* %v2_13cf0, align 4
  %v3_13cf0 = load i32, i32* @r0, align 4
  %v4_13cf0 = add i32 %v3_13cf0, 4
  store i32 %v4_13cf0, i32* @r0, align 4
  %v0_13cf4 = load i32, i32* %r2.global-to-local, align 4
  %v2_13cf4 = add i32 %v0_13cf4, -4
  store i32 %v2_13cf4, i32* %r2.global-to-local, align 4
  %v6_13cf8 = icmp slt i32 %v0_13cf4, 4
  br i1 %v6_13cf8, label %dec_label_pc_13cfc.loopexit, label %dec_label_pc_13ce4

dec_label_pc_13cfc.loopexit:                      ; preds = %dec_label_pc_13ce4
  %v4_13cf4 = sub i32 3, %v0_13cf4
  %v5_13cf4 = and i32 %v4_13cf4, %v0_13cf4
  %v6_13cf4 = icmp slt i32 %v5_13cf4, 0
  %v7_13cf4 = icmp slt i32 %v2_13cf4, 0
  store i1 %v6_13cf4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_13cf4, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13cfc

dec_label_pc_13cfc:                               ; preds = %dec_label_pc_13cfc.loopexit, %dec_label_pc_13cd8
  %v2_13c3c111 = phi i32 [ %v4_13cf0, %dec_label_pc_13cfc.loopexit ], [ %v12_13ccc, %dec_label_pc_13cd8 ]
  %v0_13c2c107 = phi i32 [ %v2_13cf4, %dec_label_pc_13cfc.loopexit ], [ %v2_13cdc, %dec_label_pc_13cd8 ]
  %v0_13cfc = load i32, i32* %r1.global-to-local, align 4
  %v1_13cfc = add i32 %v0_13cfc, -3
  store i32 %v1_13cfc, i32* @r1, align 4
  br label %bb131

dec_label_pc_13d04:                               ; preds = %dec_label_pc_13c84
  br i1 %v5_13d74, label %dec_label_pc_13d50, label %dec_label_pc_13d0c

dec_label_pc_13d0c:                               ; preds = %dec_label_pc_13d04
  store i32 %v2_13d70, i32* %r2.global-to-local, align 4
  %v3_13d10 = load i32, i32* @r4, align 4
  store i32 %v3_13d10, i32* %stack_var_-16, align 4
  %v6_13d10 = load i32, i32* @r5, align 4
  store i32 %v6_13d10, i32* %stack_var_-12, align 4
  br label %dec_label_pc_13d14

dec_label_pc_13d14:                               ; preds = %dec_label_pc_13d14.dec_label_pc_13d14_crit_edge, %dec_label_pc_13d0c
  %v0_13d38 = phi i32 [ %v12_13d38, %dec_label_pc_13d14.dec_label_pc_13d14_crit_edge ], [ %v0_13ccc74, %dec_label_pc_13d0c ]
  %v0_13d18 = phi i32 [ %v0_13d18.pre, %dec_label_pc_13d14.dec_label_pc_13d14_crit_edge ], [ %v4_13c88, %dec_label_pc_13d0c ]
  %v0_13d14 = phi i32 [ %v0_13d14.pre, %dec_label_pc_13d14.dec_label_pc_13d14_crit_edge ], [ %v2_13c88, %dec_label_pc_13d0c ]
  %v3_13d14 = udiv i32 %v0_13d14, 65536
  store i32 %v3_13d14, i32* %r3.global-to-local, align 4
  %v1_13d18 = inttoptr i32 %v0_13d18 to i32*
  %v2_13d18 = load i32, i32* %v1_13d18, align 4
  store i32 %v2_13d18, i32* %r4.global-to-local, align 4
  %v3_13d18 = add i32 %v0_13d18, 4
  %v4_13d18 = inttoptr i32 %v3_13d18 to i32*
  %v5_13d18 = load i32, i32* %v4_13d18, align 4
  store i32 %v5_13d18, i32* %r5.global-to-local, align 4
  %v6_13d18 = add i32 %v0_13d18, 8
  %v7_13d18 = inttoptr i32 %v6_13d18 to i32*
  %v8_13d18 = load i32, i32* %v7_13d18, align 4
  store i32 %v8_13d18, i32* %ip.global-to-local, align 4
  %v9_13d18 = add i32 %v0_13d18, 12
  %v10_13d18 = inttoptr i32 %v9_13d18 to i32*
  %v11_13d18 = load i32, i32* %v10_13d18, align 4
  store i32 %v11_13d18, i32* @lr, align 4
  %v12_13d18 = add i32 %v0_13d18, 16
  store i32 %v12_13d18, i32* %r1.global-to-local, align 4
  %v4_13d1c = mul i32 %v2_13d18, 65536
  %v5_13d1c = or i32 %v4_13d1c, %v3_13d14
  store i32 %v5_13d1c, i32* %r3.global-to-local, align 4
  %v3_13d20 = udiv i32 %v2_13d18, 65536
  %v4_13d24 = mul i32 %v5_13d18, 65536
  %v5_13d24 = or i32 %v4_13d24, %v3_13d20
  store i32 %v5_13d24, i32* %r4.global-to-local, align 4
  %v3_13d28 = udiv i32 %v5_13d18, 65536
  %v4_13d2c = mul i32 %v8_13d18, 65536
  %v5_13d2c = or i32 %v4_13d2c, %v3_13d28
  store i32 %v5_13d2c, i32* %r5.global-to-local, align 4
  %v3_13d30 = udiv i32 %v8_13d18, 65536
  %v4_13d34 = mul i32 %v11_13d18, 65536
  %v5_13d34 = or i32 %v4_13d34, %v3_13d30
  store i32 %v5_13d34, i32* @ip, align 4
  %v1_13d38 = inttoptr i32 %v0_13d38 to i32*
  store i32 %v5_13d1c, i32* %v1_13d38, align 4
  %v3_13d38 = add i32 %v0_13d38, 4
  %v4_13d38 = inttoptr i32 %v3_13d38 to i32*
  %v5_13d38 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13d38, i32* %v4_13d38, align 4
  %v6_13d38 = add i32 %v0_13d38, 8
  %v7_13d38 = inttoptr i32 %v6_13d38 to i32*
  %v8_13d38 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_13d38, i32* %v7_13d38, align 4
  %v9_13d38 = add i32 %v0_13d38, 12
  %v10_13d38 = inttoptr i32 %v9_13d38 to i32*
  %v11_13d38 = load i32, i32* @ip, align 4
  store i32 %v11_13d38, i32* %v10_13d38, align 4
  %v12_13d38 = add i32 %v0_13d38, 16
  store i32 %v12_13d38, i32* @r0, align 4
  %v0_13d3c = load i32, i32* %r2.global-to-local, align 4
  %v2_13d3c = add i32 %v0_13d3c, -16
  store i32 %v2_13d3c, i32* %r2.global-to-local, align 4
  %v6_13d40 = icmp slt i32 %v0_13d3c, 16
  br i1 %v6_13d40, label %dec_label_pc_13d44, label %dec_label_pc_13d14.dec_label_pc_13d14_crit_edge

dec_label_pc_13d14.dec_label_pc_13d14_crit_edge:  ; preds = %dec_label_pc_13d14
  %v0_13d14.pre = load i32, i32* @lr, align 4
  %v0_13d18.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13d14

dec_label_pc_13d44:                               ; preds = %dec_label_pc_13d14
  %v2_13d44 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13d44, i32* @r4, align 4
  %v5_13d44 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_13d44, i32* @r5, align 4
  %v2_13d48 = add i32 %v0_13d3c, -4
  store i32 %v2_13d48, i32* %r2.global-to-local, align 4
  %v4_13d48 = add i32 %v0_13d3c, 2147483632
  %v5_13d48 = and i32 %v2_13d48, %v4_13d48
  %v6_13d48 = icmp slt i32 %v5_13d48, 0
  store i1 %v6_13d48, i1* %cpsr_v.global-to-local, align 1
  %v7_13d48 = icmp slt i32 %v2_13d48, 0
  store i1 %v7_13d48, i1* %cpsr_n.global-to-local, align 1
  %v8_13d48 = icmp eq i32 %v2_13d48, 0
  store i1 %v8_13d48, i1* %cpsr_z.global-to-local, align 1
  %v5_13d4c = icmp slt i32 %v2_13d3c, -12
  br i1 %v5_13d4c, label %dec_label_pc_13d68, label %dec_label_pc_13d50

dec_label_pc_13d50:                               ; preds = %dec_label_pc_13d44, %dec_label_pc_13d04, %dec_label_pc_13d50
  %v1_13d5c = phi i32 [ %v4_13d5c, %dec_label_pc_13d50 ], [ %v12_13d38, %dec_label_pc_13d44 ], [ %v0_13ccc74, %dec_label_pc_13d04 ]
  %v0_13d50 = load i32, i32* @lr, align 4
  %v3_13d50 = udiv i32 %v0_13d50, 65536
  store i32 %v3_13d50, i32* %ip.global-to-local, align 4
  %v0_13d54 = load i32, i32* %r1.global-to-local, align 4
  %v1_13d54 = inttoptr i32 %v0_13d54 to i32*
  %v2_13d54 = load i32, i32* %v1_13d54, align 4
  store i32 %v2_13d54, i32* @lr, align 4
  %v4_13d54 = add i32 %v0_13d54, 4
  store i32 %v4_13d54, i32* %r1.global-to-local, align 4
  %v4_13d58 = mul i32 %v2_13d54, 65536
  %v5_13d58 = or i32 %v4_13d58, %v3_13d50
  store i32 %v5_13d58, i32* @ip, align 4
  %v2_13d5c = inttoptr i32 %v1_13d5c to i32*
  store i32 %v5_13d58, i32* %v2_13d5c, align 4
  %v3_13d5c = load i32, i32* @r0, align 4
  %v4_13d5c = add i32 %v3_13d5c, 4
  store i32 %v4_13d5c, i32* @r0, align 4
  %v0_13d60 = load i32, i32* %r2.global-to-local, align 4
  %v2_13d60 = add i32 %v0_13d60, -4
  store i32 %v2_13d60, i32* %r2.global-to-local, align 4
  %v6_13d64 = icmp slt i32 %v0_13d60, 4
  br i1 %v6_13d64, label %dec_label_pc_13d68.loopexit, label %dec_label_pc_13d50

dec_label_pc_13d68.loopexit:                      ; preds = %dec_label_pc_13d50
  %v4_13d60 = sub i32 3, %v0_13d60
  %v5_13d60 = and i32 %v4_13d60, %v0_13d60
  %v6_13d60 = icmp slt i32 %v5_13d60, 0
  %v7_13d60 = icmp slt i32 %v2_13d60, 0
  store i1 %v6_13d60, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_13d60, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13d68

dec_label_pc_13d68:                               ; preds = %dec_label_pc_13d68.loopexit, %dec_label_pc_13d44
  %v2_13c3c112 = phi i32 [ %v4_13d5c, %dec_label_pc_13d68.loopexit ], [ %v12_13d38, %dec_label_pc_13d44 ]
  %v0_13c2c108 = phi i32 [ %v2_13d60, %dec_label_pc_13d68.loopexit ], [ %v2_13d48, %dec_label_pc_13d44 ]
  %v0_13d68 = load i32, i32* %r1.global-to-local, align 4
  %v1_13d68 = add i32 %v0_13d68, -2
  store i32 %v1_13d68, i32* @r1, align 4
  br label %bb131

dec_label_pc_13d70:                               ; preds = %dec_label_pc_13c84
  br i1 %v5_13d74, label %dec_label_pc_13dbc, label %dec_label_pc_13d78

dec_label_pc_13d78:                               ; preds = %dec_label_pc_13d70
  store i32 %v2_13d70, i32* %r2.global-to-local, align 4
  %v3_13d7c = load i32, i32* @r4, align 4
  store i32 %v3_13d7c, i32* %stack_var_-16, align 4
  %v6_13d7c = load i32, i32* @r5, align 4
  store i32 %v6_13d7c, i32* %stack_var_-12, align 4
  br label %dec_label_pc_13d80

dec_label_pc_13d80:                               ; preds = %dec_label_pc_13d80.dec_label_pc_13d80_crit_edge, %dec_label_pc_13d78
  %v0_13da4 = phi i32 [ %v12_13da4, %dec_label_pc_13d80.dec_label_pc_13d80_crit_edge ], [ %v0_13ccc74, %dec_label_pc_13d78 ]
  %v0_13d84 = phi i32 [ %v0_13d84.pre, %dec_label_pc_13d80.dec_label_pc_13d80_crit_edge ], [ %v4_13c88, %dec_label_pc_13d78 ]
  %v0_13d80 = phi i32 [ %v0_13d80.pre, %dec_label_pc_13d80.dec_label_pc_13d80_crit_edge ], [ %v2_13c88, %dec_label_pc_13d78 ]
  %v3_13d80 = udiv i32 %v0_13d80, 16777216
  store i32 %v3_13d80, i32* %r3.global-to-local, align 4
  %v1_13d84 = inttoptr i32 %v0_13d84 to i32*
  %v2_13d84 = load i32, i32* %v1_13d84, align 4
  store i32 %v2_13d84, i32* %r4.global-to-local, align 4
  %v3_13d84 = add i32 %v0_13d84, 4
  %v4_13d84 = inttoptr i32 %v3_13d84 to i32*
  %v5_13d84 = load i32, i32* %v4_13d84, align 4
  store i32 %v5_13d84, i32* %r5.global-to-local, align 4
  %v6_13d84 = add i32 %v0_13d84, 8
  %v7_13d84 = inttoptr i32 %v6_13d84 to i32*
  %v8_13d84 = load i32, i32* %v7_13d84, align 4
  store i32 %v8_13d84, i32* %ip.global-to-local, align 4
  %v9_13d84 = add i32 %v0_13d84, 12
  %v10_13d84 = inttoptr i32 %v9_13d84 to i32*
  %v11_13d84 = load i32, i32* %v10_13d84, align 4
  store i32 %v11_13d84, i32* @lr, align 4
  %v12_13d84 = add i32 %v0_13d84, 16
  store i32 %v12_13d84, i32* %r1.global-to-local, align 4
  %v4_13d88 = mul i32 %v2_13d84, 256
  %v5_13d88 = or i32 %v4_13d88, %v3_13d80
  store i32 %v5_13d88, i32* %r3.global-to-local, align 4
  %v3_13d8c = udiv i32 %v2_13d84, 16777216
  %v4_13d90 = mul i32 %v5_13d84, 256
  %v5_13d90 = or i32 %v4_13d90, %v3_13d8c
  store i32 %v5_13d90, i32* %r4.global-to-local, align 4
  %v3_13d94 = udiv i32 %v5_13d84, 16777216
  %v4_13d98 = mul i32 %v8_13d84, 256
  %v5_13d98 = or i32 %v4_13d98, %v3_13d94
  store i32 %v5_13d98, i32* %r5.global-to-local, align 4
  %v3_13d9c = udiv i32 %v8_13d84, 16777216
  %v4_13da0 = mul i32 %v11_13d84, 256
  %v5_13da0 = or i32 %v4_13da0, %v3_13d9c
  store i32 %v5_13da0, i32* @ip, align 4
  %v1_13da4 = inttoptr i32 %v0_13da4 to i32*
  store i32 %v5_13d88, i32* %v1_13da4, align 4
  %v3_13da4 = add i32 %v0_13da4, 4
  %v4_13da4 = inttoptr i32 %v3_13da4 to i32*
  %v5_13da4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13da4, i32* %v4_13da4, align 4
  %v6_13da4 = add i32 %v0_13da4, 8
  %v7_13da4 = inttoptr i32 %v6_13da4 to i32*
  %v8_13da4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_13da4, i32* %v7_13da4, align 4
  %v9_13da4 = add i32 %v0_13da4, 12
  %v10_13da4 = inttoptr i32 %v9_13da4 to i32*
  %v11_13da4 = load i32, i32* @ip, align 4
  store i32 %v11_13da4, i32* %v10_13da4, align 4
  %v12_13da4 = add i32 %v0_13da4, 16
  store i32 %v12_13da4, i32* @r0, align 4
  %v0_13da8 = load i32, i32* %r2.global-to-local, align 4
  %v2_13da8 = add i32 %v0_13da8, -16
  store i32 %v2_13da8, i32* %r2.global-to-local, align 4
  %v6_13dac = icmp slt i32 %v0_13da8, 16
  br i1 %v6_13dac, label %dec_label_pc_13db0, label %dec_label_pc_13d80.dec_label_pc_13d80_crit_edge

dec_label_pc_13d80.dec_label_pc_13d80_crit_edge:  ; preds = %dec_label_pc_13d80
  %v0_13d80.pre = load i32, i32* @lr, align 4
  %v0_13d84.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13d80

dec_label_pc_13db0:                               ; preds = %dec_label_pc_13d80
  %v2_13db0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13db0, i32* @r4, align 4
  %v5_13db0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_13db0, i32* @r5, align 4
  %v2_13db4 = add i32 %v0_13da8, -4
  store i32 %v2_13db4, i32* %r2.global-to-local, align 4
  %v4_13db4 = add i32 %v0_13da8, 2147483632
  %v5_13db4 = and i32 %v2_13db4, %v4_13db4
  %v6_13db4 = icmp slt i32 %v5_13db4, 0
  store i1 %v6_13db4, i1* %cpsr_v.global-to-local, align 1
  %v7_13db4 = icmp slt i32 %v2_13db4, 0
  store i1 %v7_13db4, i1* %cpsr_n.global-to-local, align 1
  %v8_13db4 = icmp eq i32 %v2_13db4, 0
  store i1 %v8_13db4, i1* %cpsr_z.global-to-local, align 1
  %v5_13db8 = icmp slt i32 %v2_13da8, -12
  br i1 %v5_13db8, label %dec_label_pc_13dd4, label %dec_label_pc_13dbc

dec_label_pc_13dbc:                               ; preds = %dec_label_pc_13db0, %dec_label_pc_13d70, %dec_label_pc_13dbc
  %v1_13dc8 = phi i32 [ %v4_13dc8, %dec_label_pc_13dbc ], [ %v12_13da4, %dec_label_pc_13db0 ], [ %v0_13ccc74, %dec_label_pc_13d70 ]
  %v0_13dbc = load i32, i32* @lr, align 4
  %v3_13dbc = udiv i32 %v0_13dbc, 16777216
  store i32 %v3_13dbc, i32* %ip.global-to-local, align 4
  %v0_13dc0 = load i32, i32* %r1.global-to-local, align 4
  %v1_13dc0 = inttoptr i32 %v0_13dc0 to i32*
  %v2_13dc0 = load i32, i32* %v1_13dc0, align 4
  store i32 %v2_13dc0, i32* @lr, align 4
  %v4_13dc0 = add i32 %v0_13dc0, 4
  store i32 %v4_13dc0, i32* %r1.global-to-local, align 4
  %v4_13dc4 = mul i32 %v2_13dc0, 256
  %v5_13dc4 = or i32 %v4_13dc4, %v3_13dbc
  store i32 %v5_13dc4, i32* @ip, align 4
  %v2_13dc8 = inttoptr i32 %v1_13dc8 to i32*
  store i32 %v5_13dc4, i32* %v2_13dc8, align 4
  %v3_13dc8 = load i32, i32* @r0, align 4
  %v4_13dc8 = add i32 %v3_13dc8, 4
  store i32 %v4_13dc8, i32* @r0, align 4
  %v0_13dcc = load i32, i32* %r2.global-to-local, align 4
  %v2_13dcc = add i32 %v0_13dcc, -4
  store i32 %v2_13dcc, i32* %r2.global-to-local, align 4
  %v6_13dd0 = icmp slt i32 %v0_13dcc, 4
  br i1 %v6_13dd0, label %dec_label_pc_13dd4.loopexit, label %dec_label_pc_13dbc

dec_label_pc_13dd4.loopexit:                      ; preds = %dec_label_pc_13dbc
  %v4_13dcc = sub i32 3, %v0_13dcc
  %v5_13dcc = and i32 %v4_13dcc, %v0_13dcc
  %v6_13dcc = icmp slt i32 %v5_13dcc, 0
  %v7_13dcc = icmp slt i32 %v2_13dcc, 0
  store i1 %v6_13dcc, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_13dcc, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13dd4

dec_label_pc_13dd4:                               ; preds = %dec_label_pc_13dd4.loopexit, %dec_label_pc_13db0
  %v2_13c3c113 = phi i32 [ %v4_13dc8, %dec_label_pc_13dd4.loopexit ], [ %v12_13da4, %dec_label_pc_13db0 ]
  %v0_13c2c109 = phi i32 [ %v2_13dcc, %dec_label_pc_13dd4.loopexit ], [ %v2_13db4, %dec_label_pc_13db0 ]
  %v0_13dd4 = load i32, i32* %r1.global-to-local, align 4
  %v1_13dd4 = add i32 %v0_13dd4, -1
  store i32 %v1_13dd4, i32* @r1, align 4
  br label %bb131

dec_label_pc_13ddc:                               ; preds = %dec_label_pc_13b90
  %v1_13ddc = load i32, i32* @r2, align 4
  %v2_13ddc = add i32 %v1_13ddc, %v0_13b90
  store i32 %v2_13ddc, i32* %r1.global-to-local, align 4
  %v2_13de0 = add i32 %v1_13ddc, %v1_13b90
  store i32 %v2_13de0, i32* %r0.global-to-local, align 4
  %v2_13de4 = add i32 %v1_13ddc, -4
  store i32 %v2_13de4, i32* %r2.global-to-local, align 4
  %v4_13de4 = sub i32 3, %v1_13ddc
  %v5_13de4 = and i32 %v4_13de4, %v1_13ddc
  %v6_13de4 = icmp slt i32 %v5_13de4, 0
  store i1 %v6_13de4, i1* %cpsr_v.global-to-local, align 1
  %v7_13de4 = icmp slt i32 %v2_13de4, 0
  store i1 %v7_13de4, i1* %cpsr_n.global-to-local, align 1
  %v8_13de4 = icmp eq i32 %v1_13ddc, 4
  store i1 %v8_13de4, i1* %cpsr_z.global-to-local, align 1
  %v5_13de8 = icmp slt i32 %v1_13ddc, 4
  br i1 %v5_13de8, label %bb141, label %dec_label_pc_13dec

dec_label_pc_13dec:                               ; preds = %dec_label_pc_13ddc
  %v1_13dec = urem i32 %v2_13de0, 4
  store i32 %v1_13dec, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_13dec = icmp eq i32 %v1_13dec, 0
  store i1 %v2_13dec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13dec, label %dec_label_pc_13df4, label %dec_label_pc_13e94

dec_label_pc_13df4:                               ; preds = %dec_label_pc_13dec
  %v1_13df4 = urem i32 %v2_13ddc, 4
  store i32 %v1_13df4, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_13df4 = icmp eq i32 %v1_13df4, 0
  store i1 %v2_13df4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13df4, label %dec_label_pc_13dfc, label %dec_label_pc_13ec0

dec_label_pc_13dfc:                               ; preds = %dec_label_pc_13df4, %dec_label_pc_13eb8
  %v0_13e1448 = phi i32 [ %v2_13de0, %dec_label_pc_13df4 ], [ %v0_13f0831, %dec_label_pc_13eb8 ]
  %v0_13e1047 = phi i32 [ %v2_13ddc, %dec_label_pc_13df4 ], [ %v0_13eb8, %dec_label_pc_13eb8 ]
  %v0_13dfc = phi i32 [ %v2_13de4, %dec_label_pc_13df4 ], [ %v2_13eb0, %dec_label_pc_13eb8 ]
  %v2_13dfc = add i32 %v0_13dfc, -8
  store i32 %v2_13dfc, i32* %r2.global-to-local, align 4
  %v4_13dfc = sub i32 7, %v0_13dfc
  %v5_13dfc = and i32 %v4_13dfc, %v0_13dfc
  %v6_13dfc = icmp slt i32 %v5_13dfc, 0
  store i1 %v6_13dfc, i1* %cpsr_v.global-to-local, align 1
  %v7_13dfc = icmp slt i32 %v2_13dfc, 0
  store i1 %v7_13dfc, i1* %cpsr_n.global-to-local, align 1
  %v8_13dfc = icmp eq i32 %v0_13dfc, 8
  store i1 %v8_13dfc, i1* %cpsr_z.global-to-local, align 1
  %v5_13e00 = icmp slt i32 %v0_13dfc, 8
  br i1 %v5_13e00, label %dec_label_pc_13e4c, label %dec_label_pc_13e04

dec_label_pc_13e04:                               ; preds = %dec_label_pc_13dfc
  %v3_13e04 = load i32, i32* @r4, align 4
  store i32 %v3_13e04, i32* %stack_var_-8, align 4
  %v6_13e04 = load i32, i32* @lr, align 4
  %v2_13e08 = add i32 %v0_13dfc, -28
  store i32 %v2_13e08, i32* %r2.global-to-local, align 4
  %v4_13e08 = sub i32 27, %v0_13dfc
  %v5_13e08 = and i32 %v4_13e08, %v2_13dfc
  %v6_13e08 = icmp slt i32 %v5_13e08, 0
  store i1 %v6_13e08, i1* %cpsr_v.global-to-local, align 1
  %v7_13e08 = icmp slt i32 %v2_13e08, 0
  store i1 %v7_13e08, i1* %cpsr_n.global-to-local, align 1
  %v8_13e08 = icmp eq i32 %v2_13dfc, 20
  store i1 %v8_13e08, i1* %cpsr_z.global-to-local, align 1
  %v5_13e0c = icmp slt i32 %v2_13dfc, 20
  br i1 %v5_13e0c, label %dec_label_pc_13e28, label %dec_label_pc_13e10

dec_label_pc_13e10:                               ; preds = %dec_label_pc_13e04, %dec_label_pc_13e10.dec_label_pc_13e10_crit_edge
  %v0_13e14 = phi i32 [ %v1_13e1c, %dec_label_pc_13e10.dec_label_pc_13e10_crit_edge ], [ %v0_13e1448, %dec_label_pc_13e04 ]
  %v0_13e10 = phi i32 [ %v0_13e10.pre, %dec_label_pc_13e10.dec_label_pc_13e10_crit_edge ], [ %v0_13e1047, %dec_label_pc_13e04 ]
  %v1_13e10 = add i32 %v0_13e10, -4
  %v2_13e10 = inttoptr i32 %v1_13e10 to i32*
  %v3_13e10 = load i32, i32* %v2_13e10, align 4
  store i32 %v3_13e10, i32* %r3.global-to-local, align 4
  %v4_13e10 = add i32 %v0_13e10, -8
  %v5_13e10 = inttoptr i32 %v4_13e10 to i32*
  %v6_13e10 = load i32, i32* %v5_13e10, align 4
  store i32 %v6_13e10, i32* %r4.global-to-local, align 4
  %v7_13e10 = add i32 %v0_13e10, -12
  %v8_13e10 = inttoptr i32 %v7_13e10 to i32*
  %v9_13e10 = load i32, i32* %v8_13e10, align 4
  store i32 %v9_13e10, i32* %ip.global-to-local, align 4
  %v10_13e10 = add i32 %v0_13e10, -16
  %v11_13e10 = inttoptr i32 %v10_13e10 to i32*
  %v12_13e10 = load i32, i32* %v11_13e10, align 4
  store i32 %v12_13e10, i32* %lr.global-to-local, align 4
  store i32 %v10_13e10, i32* %r1.global-to-local, align 4
  %v1_13e14 = add i32 %v0_13e14, -16
  %v2_13e14 = inttoptr i32 %v1_13e14 to i32*
  store i32 %v3_13e10, i32* %v2_13e14, align 4
  %v4_13e14 = add i32 %v0_13e14, -12
  %v5_13e14 = inttoptr i32 %v4_13e14 to i32*
  %v6_13e14 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_13e14, i32* %v5_13e14, align 4
  %v7_13e14 = add i32 %v0_13e14, -8
  %v8_13e14 = inttoptr i32 %v7_13e14 to i32*
  %v9_13e14 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_13e14, i32* %v8_13e14, align 4
  %v10_13e14 = add i32 %v0_13e14, -4
  %v11_13e14 = inttoptr i32 %v10_13e14 to i32*
  %v12_13e14 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_13e14, i32* %v11_13e14, align 4
  store i32 %v1_13e14, i32* %r0.global-to-local, align 4
  %v0_13e18 = load i32, i32* %r1.global-to-local, align 4
  %v1_13e18 = add i32 %v0_13e18, -4
  %v2_13e18 = inttoptr i32 %v1_13e18 to i32*
  %v3_13e18 = load i32, i32* %v2_13e18, align 4
  store i32 %v3_13e18, i32* %r3.global-to-local, align 4
  %v4_13e18 = add i32 %v0_13e18, -8
  %v5_13e18 = inttoptr i32 %v4_13e18 to i32*
  %v6_13e18 = load i32, i32* %v5_13e18, align 4
  store i32 %v6_13e18, i32* %r4.global-to-local, align 4
  %v7_13e18 = add i32 %v0_13e18, -12
  %v8_13e18 = inttoptr i32 %v7_13e18 to i32*
  %v9_13e18 = load i32, i32* %v8_13e18, align 4
  store i32 %v9_13e18, i32* @ip, align 4
  %v10_13e18 = add i32 %v0_13e18, -16
  %v11_13e18 = inttoptr i32 %v10_13e18 to i32*
  %v12_13e18 = load i32, i32* %v11_13e18, align 4
  store i32 %v12_13e18, i32* %lr.global-to-local, align 4
  store i32 %v10_13e18, i32* %r1.global-to-local, align 4
  %v1_13e1c = add i32 %v0_13e14, -32
  %v2_13e1c = inttoptr i32 %v1_13e1c to i32*
  store i32 %v3_13e18, i32* %v2_13e1c, align 4
  %v4_13e1c = add i32 %v0_13e14, -28
  %v5_13e1c = inttoptr i32 %v4_13e1c to i32*
  %v6_13e1c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_13e1c, i32* %v5_13e1c, align 4
  %v7_13e1c = add i32 %v0_13e14, -24
  %v8_13e1c = inttoptr i32 %v7_13e1c to i32*
  %v9_13e1c = load i32, i32* @ip, align 4
  store i32 %v9_13e1c, i32* %v8_13e1c, align 4
  %v10_13e1c = add i32 %v0_13e14, -20
  %v11_13e1c = inttoptr i32 %v10_13e1c to i32*
  %v12_13e1c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_13e1c, i32* %v11_13e1c, align 4
  store i32 %v1_13e1c, i32* %r0.global-to-local, align 4
  %v0_13e20 = load i32, i32* %r2.global-to-local, align 4
  %v2_13e20 = add i32 %v0_13e20, -32
  store i32 %v2_13e20, i32* %r2.global-to-local, align 4
  %v6_13e24 = icmp slt i32 %v0_13e20, 32
  br i1 %v6_13e24, label %dec_label_pc_13e28.loopexit, label %dec_label_pc_13e10.dec_label_pc_13e10_crit_edge

dec_label_pc_13e10.dec_label_pc_13e10_crit_edge:  ; preds = %dec_label_pc_13e10
  %v0_13e10.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13e10

dec_label_pc_13e28.loopexit:                      ; preds = %dec_label_pc_13e10
  %v4_13e20 = sub i32 31, %v0_13e20
  %v5_13e20 = and i32 %v4_13e20, %v0_13e20
  %v6_13e20 = icmp slt i32 %v5_13e20, 0
  %v7_13e20 = icmp slt i32 %v2_13e20, 0
  store i1 %v6_13e20, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_13e20, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13e28

dec_label_pc_13e28:                               ; preds = %dec_label_pc_13e28.loopexit, %dec_label_pc_13e04
  %v6_13e30 = phi i32 [ %v1_13e1c, %dec_label_pc_13e28.loopexit ], [ %v0_13e1448, %dec_label_pc_13e04 ]
  %v0_13e38.pr = phi i32 [ %v2_13e20, %dec_label_pc_13e28.loopexit ], [ %v2_13e08, %dec_label_pc_13e04 ]
  %v4_13e28 = add i32 %v0_13e38.pr, 16
  %v6_13e28 = sub i32 0, %v0_13e38.pr
  %v7_13e28 = and i32 %v4_13e28, %v6_13e28
  %v8_13e28 = icmp slt i32 %v7_13e28, 0
  store i1 %v8_13e28, i1* %cpsr_v.global-to-local, align 1
  %v9_13e28 = icmp slt i32 %v4_13e28, 0
  store i1 %v9_13e28, i1* %cpsr_n.global-to-local, align 1
  %v10_13e28 = icmp eq i32 %v4_13e28, 0
  store i1 %v10_13e28, i1* %cpsr_z.global-to-local, align 1
  %v5_13e2c = icmp slt i32 %v0_13e38.pr, -16
  br i1 %v5_13e2c, label %.thread13, label %bb138

bb138:                                            ; preds = %dec_label_pc_13e28
  %v6_13e2c = load i32, i32* %r1.global-to-local, align 4
  %v7_13e2c = add i32 %v6_13e2c, -4
  %v8_13e2c = inttoptr i32 %v7_13e2c to i32*
  %v9_13e2c = load i32, i32* %v8_13e2c, align 4
  store i32 %v9_13e2c, i32* %r3.global-to-local, align 4
  %v10_13e2c = add i32 %v6_13e2c, -8
  %v11_13e2c = inttoptr i32 %v10_13e2c to i32*
  %v12_13e2c = load i32, i32* %v11_13e2c, align 4
  store i32 %v12_13e2c, i32* %r4.global-to-local, align 4
  %v13_13e2c = add i32 %v6_13e2c, -12
  %v14_13e2c = inttoptr i32 %v13_13e2c to i32*
  %v15_13e2c = load i32, i32* %v14_13e2c, align 4
  store i32 %v15_13e2c, i32* @ip, align 4
  %v16_13e2c = add i32 %v6_13e2c, -16
  %v17_13e2c = inttoptr i32 %v16_13e2c to i32*
  %v18_13e2c = load i32, i32* %v17_13e2c, align 4
  store i32 %v18_13e2c, i32* %lr.global-to-local, align 4
  store i32 %v16_13e2c, i32* %r1.global-to-local, align 4
  %v7_13e30 = add i32 %v6_13e30, -16
  %v8_13e30 = inttoptr i32 %v7_13e30 to i32*
  store i32 %v9_13e2c, i32* %v8_13e30, align 4
  %v10_13e30 = add i32 %v6_13e30, -12
  %v11_13e30 = inttoptr i32 %v10_13e30 to i32*
  %v12_13e30 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_13e30, i32* %v11_13e30, align 4
  %v13_13e30 = add i32 %v6_13e30, -8
  %v14_13e30 = inttoptr i32 %v13_13e30 to i32*
  %v15_13e30 = load i32, i32* @ip, align 4
  store i32 %v15_13e30, i32* %v14_13e30, align 4
  %v16_13e30 = add i32 %v6_13e30, -4
  %v17_13e30 = inttoptr i32 %v16_13e30 to i32*
  %v18_13e30 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_13e30, i32* %v17_13e30, align 4
  store i32 %v7_13e30, i32* %r0.global-to-local, align 4
  %v6_13e34 = load i32, i32* %r2.global-to-local, align 4
  %v7_13e34 = add i32 %v6_13e34, -16
  store i32 %v7_13e34, i32* %r2.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_13e28, %bb138
  %v6_13e40 = phi i32 [ %v7_13e30, %bb138 ], [ %v6_13e30, %dec_label_pc_13e28 ]
  %v0_13e38 = phi i32 [ %v7_13e34, %bb138 ], [ %v0_13e38.pr, %dec_label_pc_13e28 ]
  %v4_13e38 = add i32 %v0_13e38, 20
  store i32 %v4_13e38, i32* %r2.global-to-local, align 4
  %v6_13e38 = sub i32 0, %v0_13e38
  %v7_13e38 = and i32 %v4_13e38, %v6_13e38
  %v8_13e38 = icmp slt i32 %v7_13e38, 0
  store i1 %v8_13e38, i1* %cpsr_v.global-to-local, align 1
  %v9_13e38 = icmp slt i32 %v4_13e38, 0
  store i1 %v9_13e38, i1* %cpsr_n.global-to-local, align 1
  %v10_13e38 = icmp eq i32 %v4_13e38, 0
  store i1 %v10_13e38, i1* %cpsr_z.global-to-local, align 1
  %v5_13e3c = icmp slt i32 %v0_13e38, -20
  br i1 %v5_13e3c, label %.thread15, label %bb139

bb139:                                            ; preds = %.thread13
  %v6_13e3c = load i32, i32* %r1.global-to-local, align 4
  %v7_13e3c = add i32 %v6_13e3c, -4
  %v8_13e3c = inttoptr i32 %v7_13e3c to i32*
  %v9_13e3c = load i32, i32* %v8_13e3c, align 4
  store i32 %v9_13e3c, i32* %r3.global-to-local, align 4
  %v10_13e3c = add i32 %v6_13e3c, -8
  %v11_13e3c = inttoptr i32 %v10_13e3c to i32*
  %v12_13e3c = load i32, i32* %v11_13e3c, align 4
  store i32 %v12_13e3c, i32* @ip, align 4
  %v13_13e3c = add i32 %v6_13e3c, -12
  %v14_13e3c = inttoptr i32 %v13_13e3c to i32*
  %v15_13e3c = load i32, i32* %v14_13e3c, align 4
  store i32 %v15_13e3c, i32* %lr.global-to-local, align 4
  store i32 %v13_13e3c, i32* %r1.global-to-local, align 4
  %v7_13e40 = add i32 %v6_13e40, -12
  %v8_13e40 = inttoptr i32 %v7_13e40 to i32*
  store i32 %v9_13e3c, i32* %v8_13e40, align 4
  %v10_13e40 = add i32 %v6_13e40, -8
  %v11_13e40 = inttoptr i32 %v10_13e40 to i32*
  %v12_13e40 = load i32, i32* @ip, align 4
  store i32 %v12_13e40, i32* %v11_13e40, align 4
  %v13_13e40 = add i32 %v6_13e40, -4
  %v14_13e40 = inttoptr i32 %v13_13e40 to i32*
  %v15_13e40 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_13e40, i32* %v14_13e40, align 4
  store i32 %v7_13e40, i32* %r0.global-to-local, align 4
  %v6_13e44 = load i32, i32* %r2.global-to-local, align 4
  %v7_13e44 = add i32 %v6_13e44, -12
  store i32 %v7_13e44, i32* %r2.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread13, %bb139
  %v6_13e6456 = phi i32 [ %v6_13e40, %.thread13 ], [ %v7_13e40, %bb139 ]
  %v0_13e4c54 = phi i32 [ %v4_13e38, %.thread13 ], [ %v7_13e44, %bb139 ]
  %v2_13e48 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13e48, i32* @r4, align 4
  store i32 %v6_13e04, i32* @lr, align 4
  br label %dec_label_pc_13e4c

dec_label_pc_13e4c:                               ; preds = %dec_label_pc_13dfc, %.thread15
  %v7_13e5c = phi i32 [ %v0_13e1448, %dec_label_pc_13dfc ], [ %v6_13e6456, %.thread15 ]
  %v0_13e4c = phi i32 [ %v2_13dfc, %dec_label_pc_13dfc ], [ %v0_13e4c54, %.thread15 ]
  %v2_13e4c = add i32 %v0_13e4c, 8
  store i32 %v2_13e4c, i32* %r2.global-to-local, align 4
  %v4_13e4c = sub i32 0, %v0_13e4c
  %v5_13e4c = and i32 %v2_13e4c, %v4_13e4c
  %v6_13e4c = icmp slt i32 %v5_13e4c, 0
  store i1 %v6_13e4c, i1* %cpsr_v.global-to-local, align 1
  %v7_13e4c = icmp slt i32 %v2_13e4c, 0
  store i1 %v7_13e4c, i1* %cpsr_n.global-to-local, align 1
  %v8_13e4c = icmp eq i32 %v2_13e4c, 0
  store i1 %v8_13e4c, i1* %cpsr_z.global-to-local, align 1
  %v5_13e50 = icmp slt i32 %v0_13e4c, -8
  br i1 %v5_13e50, label %bb141, label %dec_label_pc_13e54

dec_label_pc_13e54:                               ; preds = %dec_label_pc_13e4c
  %v6_13e54 = add i32 %v0_13e4c, 4
  store i32 %v6_13e54, i32* %r2.global-to-local, align 4
  %v8_13e54 = sub i32 -5, %v0_13e4c
  %v9_13e54 = and i32 %v8_13e54, %v2_13e4c
  %v10_13e54 = icmp slt i32 %v9_13e54, 0
  store i1 %v10_13e54, i1* %cpsr_v.global-to-local, align 1
  %v11_13e54 = icmp slt i32 %v6_13e54, 0
  store i1 %v11_13e54, i1* %cpsr_n.global-to-local, align 1
  %v12_13e54 = icmp eq i32 %v2_13e4c, 4
  store i1 %v12_13e54, i1* %cpsr_z.global-to-local, align 1
  %v5_13e58 = icmp slt i32 %v2_13e4c, 4
  %v6_13e58 = load i32, i32* %r1.global-to-local, align 4
  %v7_13e58 = add i32 %v6_13e58, -4
  %v8_13e58 = inttoptr i32 %v7_13e58 to i32*
  %v9_13e58 = load i32, i32* %v8_13e58, align 4
  store i32 %v9_13e58, i32* %r3.global-to-local, align 4
  br i1 %v5_13e58, label %.thread19, label %bb140

.thread19:                                        ; preds = %dec_label_pc_13e54
  store i32 %v7_13e58, i32* %r1.global-to-local, align 4
  %v8_13e5c = add i32 %v7_13e5c, -4
  %v9_13e5c = inttoptr i32 %v8_13e5c to i32*
  store i32 %v9_13e58, i32* %v9_13e5c, align 4
  %v10_13e5c = load i32, i32* %r0.global-to-local, align 4
  %v11_13e5c = add i32 %v10_13e5c, -4
  store i32 %v11_13e5c, i32* %r0.global-to-local, align 4
  %v0_13e6c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb141

bb140:                                            ; preds = %dec_label_pc_13e54
  %v10_13e60 = add i32 %v6_13e58, -8
  %v11_13e60 = inttoptr i32 %v10_13e60 to i32*
  %v12_13e60 = load i32, i32* %v11_13e60, align 4
  store i32 %v12_13e60, i32* @ip, align 4
  store i32 %v10_13e60, i32* %r1.global-to-local, align 4
  %v7_13e64 = add i32 %v7_13e5c, -8
  %v8_13e64 = inttoptr i32 %v7_13e64 to i32*
  store i32 %v9_13e58, i32* %v8_13e64, align 4
  %v10_13e64 = add i32 %v7_13e5c, -4
  %v11_13e64 = inttoptr i32 %v10_13e64 to i32*
  %v12_13e64 = load i32, i32* @ip, align 4
  store i32 %v12_13e64, i32* %v11_13e64, align 4
  store i32 %v7_13e64, i32* %r0.global-to-local, align 4
  %v6_13e68 = load i32, i32* %r2.global-to-local, align 4
  %v7_13e68 = add i32 %v6_13e68, -4
  store i32 %v7_13e68, i32* %r2.global-to-local, align 4
  br label %bb141

bb141:                                            ; preds = %.thread19, %.thread25, %dec_label_pc_13e4c, %dec_label_pc_13ddc, %dec_label_pc_14010, %dec_label_pc_13fa4, %dec_label_pc_13f38, %bb140
  %v2_13e70 = phi i32 [ %v11_13e5c, %.thread19 ], [ %v0_13f0831, %.thread25 ], [ %v7_13e5c, %dec_label_pc_13e4c ], [ %v2_13de0, %dec_label_pc_13ddc ], [ %v2_13e7c64, %dec_label_pc_14010 ], [ %v2_13e7c63, %dec_label_pc_13fa4 ], [ %v2_13e7c62, %dec_label_pc_13f38 ], [ %v7_13e64, %bb140 ]
  %v0_13e6c = phi i32 [ %v0_13e6c.pre, %.thread19 ], [ %v2_13eb0, %.thread25 ], [ %v2_13e4c, %dec_label_pc_13e4c ], [ %v2_13de4, %dec_label_pc_13ddc ], [ %v0_13e6c60, %dec_label_pc_14010 ], [ %v0_13e6c59, %dec_label_pc_13fa4 ], [ %v0_13e6c58, %dec_label_pc_13f38 ], [ %v7_13e68, %bb140 ]
  %v1_13e6c = add i32 %v0_13e6c, 4
  store i32 %v1_13e6c, i32* %r2.global-to-local, align 4
  %v3_13e6c = sub i32 0, %v0_13e6c
  %v4_13e6c = and i32 %v1_13e6c, %v3_13e6c
  %v5_13e6c = icmp slt i32 %v4_13e6c, 0
  store i1 %v5_13e6c, i1* %cpsr_v.global-to-local, align 1
  %v6_13e6c = icmp slt i32 %v1_13e6c, 0
  store i1 %v6_13e6c, i1* %cpsr_n.global-to-local, align 1
  %v7_13e6c = icmp eq i32 %v1_13e6c, 0
  store i1 %v7_13e6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13e6c, label %.thread122, label %bb142

bb142:                                            ; preds = %bb141
  %v1_13e74 = add i32 %v0_13e6c, 2
  %v3_13e74 = sub i32 -3, %v0_13e6c
  %v4_13e74 = and i32 %v3_13e74, %v1_13e6c
  %v5_13e74 = icmp slt i32 %v4_13e74, 0
  store i1 %v5_13e74, i1* %cpsr_v.global-to-local, align 1
  %v6_13e74 = icmp slt i32 %v1_13e74, 0
  store i1 %v6_13e74, i1* %cpsr_n.global-to-local, align 1
  %v7_13e74 = icmp eq i32 %v1_13e6c, 2
  store i1 %v7_13e74, i1* %cpsr_z.global-to-local, align 1
  %v0_13e78 = load i32, i32* %r1.global-to-local, align 4
  %v1_13e78 = add i32 %v0_13e78, -1
  %v2_13e78 = inttoptr i32 %v1_13e78 to i8*
  %v3_13e78 = load i8, i8* %v2_13e78, align 1
  %v4_13e78 = zext i8 %v3_13e78 to i32
  store i32 %v4_13e78, i32* %r3.global-to-local, align 4
  store i32 %v1_13e78, i32* %r1.global-to-local, align 4
  %v3_13e7c = add i32 %v2_13e70, -1
  %v4_13e7c = inttoptr i32 %v3_13e7c to i8*
  store i8 %v3_13e78, i8* %v4_13e7c, align 1
  %v5_13e7c = load i32, i32* %r0.global-to-local, align 4
  %v6_13e7c = add i32 %v5_13e7c, -1
  store i32 %v6_13e7c, i32* %r0.global-to-local, align 4
  %v0_13e80 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_13e80 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_13e80 = xor i1 %v0_13e80, %v1_13e80
  br i1 %v2_13e80, label %.thread121, label %bb143

bb143:                                            ; preds = %bb142
  %v3_13e80 = load i32, i32* %r1.global-to-local, align 4
  %v4_13e80 = add i32 %v3_13e80, -1
  %v5_13e80 = inttoptr i32 %v4_13e80 to i8*
  %v6_13e80 = load i8, i8* %v5_13e80, align 1
  %v7_13e80 = zext i8 %v6_13e80 to i32
  store i32 %v7_13e80, i32* %r3.global-to-local, align 4
  store i32 %v4_13e80, i32* %r1.global-to-local, align 4
  %v6_13e84 = add i32 %v5_13e7c, -2
  %v7_13e84 = inttoptr i32 %v6_13e84 to i8*
  store i8 %v6_13e80, i8* %v7_13e84, align 1
  %v8_13e84 = load i32, i32* %r0.global-to-local, align 4
  %v9_13e84 = add i32 %v8_13e84, -1
  store i32 %v9_13e84, i32* %r0.global-to-local, align 4
  %v1_13e88.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_13e88.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread121

.thread121:                                       ; preds = %bb142, %bb143
  %v7_13e8c = phi i32 [ %v9_13e84, %bb143 ], [ %v6_13e7c, %bb142 ]
  %v2_13e8c = phi i1 [ %v2_13e88.pre, %bb143 ], [ %v1_13e80, %bb142 ]
  %v1_13e8c = phi i1 [ %v1_13e88.pre, %bb143 ], [ %v0_13e80, %bb142 ]
  %v0_13e88 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_13e88 = xor i1 %v2_13e8c, %v1_13e8c
  %v4_13e88 = or i1 %v0_13e88, %v3_13e88
  br i1 %v4_13e88, label %.thread122, label %bb144

bb144:                                            ; preds = %.thread121
  %v5_13e88 = load i32, i32* %r1.global-to-local, align 4
  %v6_13e88 = add i32 %v5_13e88, -1
  %v7_13e88 = inttoptr i32 %v6_13e88 to i8*
  %v8_13e88 = load i8, i8* %v7_13e88, align 1
  %v9_13e88 = zext i8 %v8_13e88 to i32
  store i32 %v9_13e88, i32* %r3.global-to-local, align 4
  store i32 %v6_13e88, i32* %r1.global-to-local, align 4
  %v8_13e8c = add i32 %v7_13e8c, -1
  %v9_13e8c = inttoptr i32 %v8_13e8c to i8*
  store i8 %v8_13e88, i8* %v9_13e8c, align 1
  %v10_13e8c = load i32, i32* %r0.global-to-local, align 4
  %v11_13e8c = add i32 %v10_13e8c, -1
  store i32 %v11_13e8c, i32* %r0.global-to-local, align 4
  br label %.thread122

dec_label_pc_13e94:                               ; preds = %dec_label_pc_13dec
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_13e94 = icmp eq i32 %v1_13dec, 1
  store i1 %v8_13e94, i1* %cpsr_n.global-to-local, align 1
  %v9_13e94 = icmp eq i32 %v1_13dec, 2
  store i1 %v9_13e94, i1* %cpsr_z.global-to-local, align 1
  %v1_13e98 = add i32 %v2_13ddc, -1
  %v2_13e98 = inttoptr i32 %v1_13e98 to i8*
  %v3_13e98 = load i8, i8* %v2_13e98, align 1
  %v4_13e98 = zext i8 %v3_13e98 to i32
  store i32 %v4_13e98, i32* %r3.global-to-local, align 4
  store i32 %v1_13e98, i32* %r1.global-to-local, align 4
  %v3_13e9c = add i32 %v2_13de0, -1
  %v4_13e9c = inttoptr i32 %v3_13e9c to i8*
  store i8 %v3_13e98, i8* %v4_13e9c, align 1
  %v5_13e9c = load i32, i32* %r0.global-to-local, align 4
  %v6_13e9c = add i32 %v5_13e9c, -1
  store i32 %v6_13e9c, i32* %r0.global-to-local, align 4
  br i1 %v8_13e94, label %.thread25, label %bb145

bb145:                                            ; preds = %dec_label_pc_13e94
  %v6_13ea0 = load i32, i32* %r1.global-to-local, align 4
  %v7_13ea0 = add i32 %v6_13ea0, -1
  %v8_13ea0 = inttoptr i32 %v7_13ea0 to i8*
  %v9_13ea0 = load i8, i8* %v8_13ea0, align 1
  %v10_13ea0 = zext i8 %v9_13ea0 to i32
  store i32 %v10_13ea0, i32* %r3.global-to-local, align 4
  store i32 %v7_13ea0, i32* %r1.global-to-local, align 4
  %v9_13ea4 = add i32 %v5_13e9c, -2
  %v10_13ea4 = inttoptr i32 %v9_13ea4 to i8*
  store i8 %v9_13ea0, i8* %v10_13ea4, align 1
  %v11_13ea4 = load i32, i32* %r0.global-to-local, align 4
  %v12_13ea4 = add i32 %v11_13ea4, -1
  store i32 %v12_13ea4, i32* %r0.global-to-local, align 4
  br i1 %v9_13e94, label %.thread25, label %bb146

bb146:                                            ; preds = %bb145
  %v8_13ea8 = load i32, i32* %r1.global-to-local, align 4
  %v9_13ea8 = add i32 %v8_13ea8, -1
  %v10_13ea8 = inttoptr i32 %v9_13ea8 to i8*
  %v11_13ea8 = load i8, i8* %v10_13ea8, align 1
  %v12_13ea8 = zext i8 %v11_13ea8 to i32
  store i32 %v12_13ea8, i32* %r3.global-to-local, align 4
  store i32 %v9_13ea8, i32* %r1.global-to-local, align 4
  %v11_13eac = add i32 %v11_13ea4, -2
  %v12_13eac = inttoptr i32 %v11_13eac to i8*
  store i8 %v11_13ea8, i8* %v12_13eac, align 1
  %v13_13eac = load i32, i32* %r0.global-to-local, align 4
  %v14_13eac = add i32 %v13_13eac, -1
  store i32 %v14_13eac, i32* %r0.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb145, %dec_label_pc_13e94, %bb146
  %v0_13f0831 = phi i32 [ %v12_13ea4, %bb145 ], [ %v6_13e9c, %dec_label_pc_13e94 ], [ %v14_13eac, %bb146 ]
  %v0_13eb0 = load i32, i32* %r2.global-to-local, align 4
  %v1_13eb0 = load i32, i32* @ip, align 4
  %v2_13eb0 = sub i32 %v0_13eb0, %v1_13eb0
  store i32 %v2_13eb0, i32* %r2.global-to-local, align 4
  %v4_13eb0 = xor i32 %v1_13eb0, %v0_13eb0
  %v5_13eb0 = xor i32 %v2_13eb0, %v0_13eb0
  %v6_13eb0 = and i32 %v5_13eb0, %v4_13eb0
  %v7_13eb0 = icmp slt i32 %v6_13eb0, 0
  store i1 %v7_13eb0, i1* %cpsr_v.global-to-local, align 1
  %v8_13eb0 = icmp slt i32 %v2_13eb0, 0
  store i1 %v8_13eb0, i1* %cpsr_n.global-to-local, align 1
  %v9_13eb0 = icmp eq i32 %v0_13eb0, %v1_13eb0
  store i1 %v9_13eb0, i1* %cpsr_z.global-to-local, align 1
  %v5_13eb4 = icmp slt i32 %v0_13eb0, %v1_13eb0
  br i1 %v5_13eb4, label %bb141, label %dec_label_pc_13eb8

dec_label_pc_13eb8:                               ; preds = %.thread25
  %v0_13eb8 = load i32, i32* %r1.global-to-local, align 4
  %v1_13eb8 = urem i32 %v0_13eb8, 4
  store i32 %v1_13eb8, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_13eb8 = icmp eq i32 %v1_13eb8, 0
  store i1 %v2_13eb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13eb8, label %dec_label_pc_13dfc, label %dec_label_pc_13ec0

dec_label_pc_13ec0:                               ; preds = %dec_label_pc_13df4, %dec_label_pc_13eb8
  %v0_13f0830 = phi i32 [ %v2_13de0, %dec_label_pc_13df4 ], [ %v0_13f0831, %dec_label_pc_13eb8 ]
  %v0_13fb4 = phi i32 [ %v2_13de4, %dec_label_pc_13df4 ], [ %v2_13eb0, %dec_label_pc_13eb8 ]
  %v0_13ec0 = phi i32 [ %v2_13ddc, %dec_label_pc_13df4 ], [ %v0_13eb8, %dec_label_pc_13eb8 ]
  %v0_13ec8 = phi i32 [ %v1_13df4, %dec_label_pc_13df4 ], [ %v1_13eb8, %dec_label_pc_13eb8 ]
  %v1_13ec0 = and i32 %v0_13ec0, -4
  store i32 %v1_13ec0, i32* %r1.global-to-local, align 4
  %v1_13ec4 = inttoptr i32 %v1_13ec0 to i32*
  %v2_13ec4 = load i32, i32* %v1_13ec4, align 4
  store i32 %v2_13ec4, i32* %r3.global-to-local, align 4
  %v7_13ec8 = icmp ult i32 %v0_13ec8, 2
  %v2_13fac = add i32 %v0_13fb4, -12
  %v4_13fac = sub i32 11, %v0_13fb4
  %v5_13fac = and i32 %v4_13fac, %v0_13fb4
  %v6_13fac = icmp slt i32 %v5_13fac, 0
  store i1 %v6_13fac, i1* %cpsr_v.global-to-local, align 1
  %v7_13fac = icmp slt i32 %v2_13fac, 0
  store i1 %v7_13fac, i1* %cpsr_n.global-to-local, align 1
  %v8_13fac = icmp eq i32 %v0_13fb4, 12
  store i1 %v8_13fac, i1* %cpsr_z.global-to-local, align 1
  %v5_13fb0 = icmp slt i32 %v0_13fb4, 12
  br i1 %v7_13ec8, label %dec_label_pc_13fac, label %dec_label_pc_13ed0

dec_label_pc_13ed0:                               ; preds = %dec_label_pc_13ec0
  %v8_13ec8 = icmp eq i32 %v0_13ec8, 2
  br i1 %v8_13ec8, label %dec_label_pc_13f40, label %dec_label_pc_13ed4

dec_label_pc_13ed4:                               ; preds = %dec_label_pc_13ed0
  br i1 %v5_13fb0, label %dec_label_pc_13f20, label %dec_label_pc_13edc

dec_label_pc_13edc:                               ; preds = %dec_label_pc_13ed4
  store i32 %v2_13fac, i32* %r2.global-to-local, align 4
  %v3_13ee0 = load i32, i32* @r4, align 4
  store i32 %v3_13ee0, i32* %stack_var_-12, align 4
  %v6_13ee0 = load i32, i32* @r5, align 4
  store i32 %v6_13ee0, i32* %stack_var_-8, align 4
  %v9_13ee0 = load i32, i32* @lr, align 4
  br label %dec_label_pc_13ee4

dec_label_pc_13ee4:                               ; preds = %dec_label_pc_13ee4.dec_label_pc_13ee4_crit_edge, %dec_label_pc_13edc
  %v0_13f08 = phi i32 [ %v1_13f08, %dec_label_pc_13ee4.dec_label_pc_13ee4_crit_edge ], [ %v0_13f0830, %dec_label_pc_13edc ]
  %v0_13ee8 = phi i32 [ %v0_13ee8.pre, %dec_label_pc_13ee4.dec_label_pc_13ee4_crit_edge ], [ %v1_13ec0, %dec_label_pc_13edc ]
  %v0_13ee4 = phi i32 [ %v0_13ee4.pre, %dec_label_pc_13ee4.dec_label_pc_13ee4_crit_edge ], [ %v2_13ec4, %dec_label_pc_13edc ]
  %v3_13ee4 = mul i32 %v0_13ee4, 256
  store i32 %v3_13ee4, i32* %lr.global-to-local, align 4
  %v1_13ee8 = add i32 %v0_13ee8, -4
  %v2_13ee8 = inttoptr i32 %v1_13ee8 to i32*
  %v3_13ee8 = load i32, i32* %v2_13ee8, align 4
  store i32 %v3_13ee8, i32* %r3.global-to-local, align 4
  %v4_13ee8 = add i32 %v0_13ee8, -8
  %v5_13ee8 = inttoptr i32 %v4_13ee8 to i32*
  %v6_13ee8 = load i32, i32* %v5_13ee8, align 4
  store i32 %v6_13ee8, i32* %r4.global-to-local, align 4
  %v7_13ee8 = add i32 %v0_13ee8, -12
  %v8_13ee8 = inttoptr i32 %v7_13ee8 to i32*
  %v9_13ee8 = load i32, i32* %v8_13ee8, align 4
  store i32 %v9_13ee8, i32* %r5.global-to-local, align 4
  %v10_13ee8 = add i32 %v0_13ee8, -16
  %v11_13ee8 = inttoptr i32 %v10_13ee8 to i32*
  %v12_13ee8 = load i32, i32* %v11_13ee8, align 4
  store i32 %v10_13ee8, i32* %r1.global-to-local, align 4
  %v4_13eec = udiv i32 %v12_13ee8, 16777216
  %v5_13eec = or i32 %v4_13eec, %v3_13ee4
  store i32 %v5_13eec, i32* %lr.global-to-local, align 4
  %v3_13ef0 = mul i32 %v12_13ee8, 256
  %v4_13ef4 = udiv i32 %v9_13ee8, 16777216
  %v5_13ef4 = or i32 %v3_13ef0, %v4_13ef4
  store i32 %v5_13ef4, i32* @ip, align 4
  %v3_13ef8 = mul i32 %v9_13ee8, 256
  %v4_13efc = udiv i32 %v6_13ee8, 16777216
  %v5_13efc = or i32 %v3_13ef8, %v4_13efc
  store i32 %v5_13efc, i32* %r5.global-to-local, align 4
  %v3_13f00 = mul i32 %v6_13ee8, 256
  %v4_13f04 = udiv i32 %v3_13ee8, 16777216
  %v5_13f04 = or i32 %v3_13f00, %v4_13f04
  store i32 %v5_13f04, i32* %r4.global-to-local, align 4
  %v1_13f08 = add i32 %v0_13f08, -16
  %v2_13f08 = inttoptr i32 %v1_13f08 to i32*
  store i32 %v5_13f04, i32* %v2_13f08, align 4
  %v4_13f08 = add i32 %v0_13f08, -12
  %v5_13f08 = inttoptr i32 %v4_13f08 to i32*
  %v6_13f08 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_13f08, i32* %v5_13f08, align 4
  %v7_13f08 = add i32 %v0_13f08, -8
  %v8_13f08 = inttoptr i32 %v7_13f08 to i32*
  %v9_13f08 = load i32, i32* @ip, align 4
  store i32 %v9_13f08, i32* %v8_13f08, align 4
  %v10_13f08 = add i32 %v0_13f08, -4
  %v11_13f08 = inttoptr i32 %v10_13f08 to i32*
  %v12_13f08 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_13f08, i32* %v11_13f08, align 4
  store i32 %v1_13f08, i32* %r0.global-to-local, align 4
  %v0_13f0c = load i32, i32* %r2.global-to-local, align 4
  %v2_13f0c = add i32 %v0_13f0c, -16
  store i32 %v2_13f0c, i32* %r2.global-to-local, align 4
  %v6_13f10 = icmp slt i32 %v0_13f0c, 16
  br i1 %v6_13f10, label %dec_label_pc_13f14, label %dec_label_pc_13ee4.dec_label_pc_13ee4_crit_edge

dec_label_pc_13ee4.dec_label_pc_13ee4_crit_edge:  ; preds = %dec_label_pc_13ee4
  %v0_13ee4.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_13ee8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13ee4

dec_label_pc_13f14:                               ; preds = %dec_label_pc_13ee4
  %v2_13f14 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13f14, i32* @r4, align 4
  %v5_13f14 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_13f14, i32* @r5, align 4
  store i32 %v9_13ee0, i32* @lr, align 4
  %v2_13f18 = add i32 %v0_13f0c, -4
  store i32 %v2_13f18, i32* %r2.global-to-local, align 4
  %v4_13f18 = add i32 %v0_13f0c, 2147483632
  %v5_13f18 = and i32 %v2_13f18, %v4_13f18
  %v6_13f18 = icmp slt i32 %v5_13f18, 0
  store i1 %v6_13f18, i1* %cpsr_v.global-to-local, align 1
  %v7_13f18 = icmp slt i32 %v2_13f18, 0
  store i1 %v7_13f18, i1* %cpsr_n.global-to-local, align 1
  %v8_13f18 = icmp eq i32 %v2_13f18, 0
  store i1 %v8_13f18, i1* %cpsr_z.global-to-local, align 1
  %v5_13f1c = icmp slt i32 %v2_13f0c, -12
  br i1 %v5_13f1c, label %dec_label_pc_13f38, label %dec_label_pc_13f20

dec_label_pc_13f20:                               ; preds = %dec_label_pc_13f14, %dec_label_pc_13ed4, %dec_label_pc_13f20
  %v1_13f2c = phi i32 [ %v5_13f2c, %dec_label_pc_13f20 ], [ %v1_13f08, %dec_label_pc_13f14 ], [ %v0_13f0830, %dec_label_pc_13ed4 ]
  %v0_13f20 = load i32, i32* %r3.global-to-local, align 4
  %v3_13f20 = mul i32 %v0_13f20, 256
  store i32 %v3_13f20, i32* %ip.global-to-local, align 4
  %v0_13f24 = load i32, i32* %r1.global-to-local, align 4
  %v1_13f24 = add i32 %v0_13f24, -4
  %v2_13f24 = inttoptr i32 %v1_13f24 to i32*
  %v3_13f24 = load i32, i32* %v2_13f24, align 4
  store i32 %v3_13f24, i32* %r3.global-to-local, align 4
  store i32 %v1_13f24, i32* %r1.global-to-local, align 4
  %v4_13f28 = udiv i32 %v3_13f24, 16777216
  %v5_13f28 = or i32 %v4_13f28, %v3_13f20
  store i32 %v5_13f28, i32* @ip, align 4
  %v2_13f2c = add i32 %v1_13f2c, -4
  %v3_13f2c = inttoptr i32 %v2_13f2c to i32*
  store i32 %v5_13f28, i32* %v3_13f2c, align 4
  %v4_13f2c = load i32, i32* %r0.global-to-local, align 4
  %v5_13f2c = add i32 %v4_13f2c, -4
  store i32 %v5_13f2c, i32* %r0.global-to-local, align 4
  %v0_13f30 = load i32, i32* %r2.global-to-local, align 4
  %v2_13f30 = add i32 %v0_13f30, -4
  store i32 %v2_13f30, i32* %r2.global-to-local, align 4
  %v6_13f34 = icmp slt i32 %v0_13f30, 4
  br i1 %v6_13f34, label %dec_label_pc_13f38.loopexit, label %dec_label_pc_13f20

dec_label_pc_13f38.loopexit:                      ; preds = %dec_label_pc_13f20
  %v4_13f30 = sub i32 3, %v0_13f30
  %v5_13f30 = and i32 %v4_13f30, %v0_13f30
  %v6_13f30 = icmp slt i32 %v5_13f30, 0
  %v7_13f30 = icmp slt i32 %v2_13f30, 0
  store i1 %v6_13f30, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_13f30, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13f38

dec_label_pc_13f38:                               ; preds = %dec_label_pc_13f38.loopexit, %dec_label_pc_13f14
  %v2_13e7c62 = phi i32 [ %v5_13f2c, %dec_label_pc_13f38.loopexit ], [ %v1_13f08, %dec_label_pc_13f14 ]
  %v0_13e6c58 = phi i32 [ %v2_13f30, %dec_label_pc_13f38.loopexit ], [ %v2_13f18, %dec_label_pc_13f14 ]
  %v0_13f38 = load i32, i32* %r1.global-to-local, align 4
  %v1_13f38 = add i32 %v0_13f38, 3
  store i32 %v1_13f38, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_13f40:                               ; preds = %dec_label_pc_13ed0
  br i1 %v5_13fb0, label %dec_label_pc_13f8c, label %dec_label_pc_13f48

dec_label_pc_13f48:                               ; preds = %dec_label_pc_13f40
  store i32 %v2_13fac, i32* %r2.global-to-local, align 4
  %v3_13f4c = load i32, i32* @r4, align 4
  store i32 %v3_13f4c, i32* %stack_var_-12, align 4
  %v6_13f4c = load i32, i32* @r5, align 4
  store i32 %v6_13f4c, i32* %stack_var_-8, align 4
  %v9_13f4c = load i32, i32* @lr, align 4
  br label %dec_label_pc_13f50

dec_label_pc_13f50:                               ; preds = %dec_label_pc_13f50.dec_label_pc_13f50_crit_edge, %dec_label_pc_13f48
  %v0_13f74 = phi i32 [ %v1_13f74, %dec_label_pc_13f50.dec_label_pc_13f50_crit_edge ], [ %v0_13f0830, %dec_label_pc_13f48 ]
  %v0_13f54 = phi i32 [ %v0_13f54.pre, %dec_label_pc_13f50.dec_label_pc_13f50_crit_edge ], [ %v1_13ec0, %dec_label_pc_13f48 ]
  %v0_13f50 = phi i32 [ %v0_13f50.pre, %dec_label_pc_13f50.dec_label_pc_13f50_crit_edge ], [ %v2_13ec4, %dec_label_pc_13f48 ]
  %v3_13f50 = mul i32 %v0_13f50, 65536
  store i32 %v3_13f50, i32* %lr.global-to-local, align 4
  %v1_13f54 = add i32 %v0_13f54, -4
  %v2_13f54 = inttoptr i32 %v1_13f54 to i32*
  %v3_13f54 = load i32, i32* %v2_13f54, align 4
  store i32 %v3_13f54, i32* %r3.global-to-local, align 4
  %v4_13f54 = add i32 %v0_13f54, -8
  %v5_13f54 = inttoptr i32 %v4_13f54 to i32*
  %v6_13f54 = load i32, i32* %v5_13f54, align 4
  store i32 %v6_13f54, i32* %r4.global-to-local, align 4
  %v7_13f54 = add i32 %v0_13f54, -12
  %v8_13f54 = inttoptr i32 %v7_13f54 to i32*
  %v9_13f54 = load i32, i32* %v8_13f54, align 4
  store i32 %v9_13f54, i32* %r5.global-to-local, align 4
  %v10_13f54 = add i32 %v0_13f54, -16
  %v11_13f54 = inttoptr i32 %v10_13f54 to i32*
  %v12_13f54 = load i32, i32* %v11_13f54, align 4
  store i32 %v10_13f54, i32* %r1.global-to-local, align 4
  %v4_13f58 = udiv i32 %v12_13f54, 65536
  %v5_13f58 = or i32 %v4_13f58, %v3_13f50
  store i32 %v5_13f58, i32* %lr.global-to-local, align 4
  %v3_13f5c = mul i32 %v12_13f54, 65536
  %v4_13f60 = udiv i32 %v9_13f54, 65536
  %v5_13f60 = or i32 %v3_13f5c, %v4_13f60
  store i32 %v5_13f60, i32* @ip, align 4
  %v3_13f64 = mul i32 %v9_13f54, 65536
  %v4_13f68 = udiv i32 %v6_13f54, 65536
  %v5_13f68 = or i32 %v3_13f64, %v4_13f68
  store i32 %v5_13f68, i32* %r5.global-to-local, align 4
  %v3_13f6c = mul i32 %v6_13f54, 65536
  %v4_13f70 = udiv i32 %v3_13f54, 65536
  %v5_13f70 = or i32 %v3_13f6c, %v4_13f70
  store i32 %v5_13f70, i32* %r4.global-to-local, align 4
  %v1_13f74 = add i32 %v0_13f74, -16
  %v2_13f74 = inttoptr i32 %v1_13f74 to i32*
  store i32 %v5_13f70, i32* %v2_13f74, align 4
  %v4_13f74 = add i32 %v0_13f74, -12
  %v5_13f74 = inttoptr i32 %v4_13f74 to i32*
  %v6_13f74 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_13f74, i32* %v5_13f74, align 4
  %v7_13f74 = add i32 %v0_13f74, -8
  %v8_13f74 = inttoptr i32 %v7_13f74 to i32*
  %v9_13f74 = load i32, i32* @ip, align 4
  store i32 %v9_13f74, i32* %v8_13f74, align 4
  %v10_13f74 = add i32 %v0_13f74, -4
  %v11_13f74 = inttoptr i32 %v10_13f74 to i32*
  %v12_13f74 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_13f74, i32* %v11_13f74, align 4
  store i32 %v1_13f74, i32* %r0.global-to-local, align 4
  %v0_13f78 = load i32, i32* %r2.global-to-local, align 4
  %v2_13f78 = add i32 %v0_13f78, -16
  store i32 %v2_13f78, i32* %r2.global-to-local, align 4
  %v6_13f7c = icmp slt i32 %v0_13f78, 16
  br i1 %v6_13f7c, label %dec_label_pc_13f80, label %dec_label_pc_13f50.dec_label_pc_13f50_crit_edge

dec_label_pc_13f50.dec_label_pc_13f50_crit_edge:  ; preds = %dec_label_pc_13f50
  %v0_13f50.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_13f54.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13f50

dec_label_pc_13f80:                               ; preds = %dec_label_pc_13f50
  %v2_13f80 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13f80, i32* @r4, align 4
  %v5_13f80 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_13f80, i32* @r5, align 4
  store i32 %v9_13f4c, i32* @lr, align 4
  %v2_13f84 = add i32 %v0_13f78, -4
  store i32 %v2_13f84, i32* %r2.global-to-local, align 4
  %v4_13f84 = add i32 %v0_13f78, 2147483632
  %v5_13f84 = and i32 %v2_13f84, %v4_13f84
  %v6_13f84 = icmp slt i32 %v5_13f84, 0
  store i1 %v6_13f84, i1* %cpsr_v.global-to-local, align 1
  %v7_13f84 = icmp slt i32 %v2_13f84, 0
  store i1 %v7_13f84, i1* %cpsr_n.global-to-local, align 1
  %v8_13f84 = icmp eq i32 %v2_13f84, 0
  store i1 %v8_13f84, i1* %cpsr_z.global-to-local, align 1
  %v5_13f88 = icmp slt i32 %v2_13f78, -12
  br i1 %v5_13f88, label %dec_label_pc_13fa4, label %dec_label_pc_13f8c

dec_label_pc_13f8c:                               ; preds = %dec_label_pc_13f80, %dec_label_pc_13f40, %dec_label_pc_13f8c
  %v1_13f98 = phi i32 [ %v5_13f98, %dec_label_pc_13f8c ], [ %v1_13f74, %dec_label_pc_13f80 ], [ %v0_13f0830, %dec_label_pc_13f40 ]
  %v0_13f8c = load i32, i32* %r3.global-to-local, align 4
  %v3_13f8c = mul i32 %v0_13f8c, 65536
  store i32 %v3_13f8c, i32* %ip.global-to-local, align 4
  %v0_13f90 = load i32, i32* %r1.global-to-local, align 4
  %v1_13f90 = add i32 %v0_13f90, -4
  %v2_13f90 = inttoptr i32 %v1_13f90 to i32*
  %v3_13f90 = load i32, i32* %v2_13f90, align 4
  store i32 %v3_13f90, i32* %r3.global-to-local, align 4
  store i32 %v1_13f90, i32* %r1.global-to-local, align 4
  %v4_13f94 = udiv i32 %v3_13f90, 65536
  %v5_13f94 = or i32 %v4_13f94, %v3_13f8c
  store i32 %v5_13f94, i32* @ip, align 4
  %v2_13f98 = add i32 %v1_13f98, -4
  %v3_13f98 = inttoptr i32 %v2_13f98 to i32*
  store i32 %v5_13f94, i32* %v3_13f98, align 4
  %v4_13f98 = load i32, i32* %r0.global-to-local, align 4
  %v5_13f98 = add i32 %v4_13f98, -4
  store i32 %v5_13f98, i32* %r0.global-to-local, align 4
  %v0_13f9c = load i32, i32* %r2.global-to-local, align 4
  %v2_13f9c = add i32 %v0_13f9c, -4
  store i32 %v2_13f9c, i32* %r2.global-to-local, align 4
  %v6_13fa0 = icmp slt i32 %v0_13f9c, 4
  br i1 %v6_13fa0, label %dec_label_pc_13fa4.loopexit, label %dec_label_pc_13f8c

dec_label_pc_13fa4.loopexit:                      ; preds = %dec_label_pc_13f8c
  %v4_13f9c = sub i32 3, %v0_13f9c
  %v5_13f9c = and i32 %v4_13f9c, %v0_13f9c
  %v6_13f9c = icmp slt i32 %v5_13f9c, 0
  %v7_13f9c = icmp slt i32 %v2_13f9c, 0
  store i1 %v6_13f9c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_13f9c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13fa4

dec_label_pc_13fa4:                               ; preds = %dec_label_pc_13fa4.loopexit, %dec_label_pc_13f80
  %v2_13e7c63 = phi i32 [ %v5_13f98, %dec_label_pc_13fa4.loopexit ], [ %v1_13f74, %dec_label_pc_13f80 ]
  %v0_13e6c59 = phi i32 [ %v2_13f9c, %dec_label_pc_13fa4.loopexit ], [ %v2_13f84, %dec_label_pc_13f80 ]
  %v0_13fa4 = load i32, i32* %r1.global-to-local, align 4
  %v1_13fa4 = add i32 %v0_13fa4, 2
  store i32 %v1_13fa4, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_13fac:                               ; preds = %dec_label_pc_13ec0
  br i1 %v5_13fb0, label %dec_label_pc_13ff8, label %dec_label_pc_13fb4

dec_label_pc_13fb4:                               ; preds = %dec_label_pc_13fac
  store i32 %v2_13fac, i32* %r2.global-to-local, align 4
  %v3_13fb8 = load i32, i32* @r4, align 4
  store i32 %v3_13fb8, i32* %stack_var_-12, align 4
  %v6_13fb8 = load i32, i32* @r5, align 4
  store i32 %v6_13fb8, i32* %stack_var_-8, align 4
  %v9_13fb8 = load i32, i32* @lr, align 4
  br label %dec_label_pc_13fbc

dec_label_pc_13fbc:                               ; preds = %dec_label_pc_13fbc.dec_label_pc_13fbc_crit_edge, %dec_label_pc_13fb4
  %v0_13fe0 = phi i32 [ %v1_13fe0, %dec_label_pc_13fbc.dec_label_pc_13fbc_crit_edge ], [ %v0_13f0830, %dec_label_pc_13fb4 ]
  %v0_13fc0 = phi i32 [ %v0_13fc0.pre, %dec_label_pc_13fbc.dec_label_pc_13fbc_crit_edge ], [ %v1_13ec0, %dec_label_pc_13fb4 ]
  %v0_13fbc = phi i32 [ %v0_13fbc.pre, %dec_label_pc_13fbc.dec_label_pc_13fbc_crit_edge ], [ %v2_13ec4, %dec_label_pc_13fb4 ]
  %v3_13fbc = mul i32 %v0_13fbc, 16777216
  store i32 %v3_13fbc, i32* %lr.global-to-local, align 4
  %v1_13fc0 = add i32 %v0_13fc0, -4
  %v2_13fc0 = inttoptr i32 %v1_13fc0 to i32*
  %v3_13fc0 = load i32, i32* %v2_13fc0, align 4
  store i32 %v3_13fc0, i32* %r3.global-to-local, align 4
  %v4_13fc0 = add i32 %v0_13fc0, -8
  %v5_13fc0 = inttoptr i32 %v4_13fc0 to i32*
  %v6_13fc0 = load i32, i32* %v5_13fc0, align 4
  store i32 %v6_13fc0, i32* %r4.global-to-local, align 4
  %v7_13fc0 = add i32 %v0_13fc0, -12
  %v8_13fc0 = inttoptr i32 %v7_13fc0 to i32*
  %v9_13fc0 = load i32, i32* %v8_13fc0, align 4
  store i32 %v9_13fc0, i32* %r5.global-to-local, align 4
  %v10_13fc0 = add i32 %v0_13fc0, -16
  %v11_13fc0 = inttoptr i32 %v10_13fc0 to i32*
  %v12_13fc0 = load i32, i32* %v11_13fc0, align 4
  store i32 %v10_13fc0, i32* %r1.global-to-local, align 4
  %v4_13fc4 = udiv i32 %v12_13fc0, 256
  %v5_13fc4 = or i32 %v4_13fc4, %v3_13fbc
  store i32 %v5_13fc4, i32* %lr.global-to-local, align 4
  %v3_13fc8 = mul i32 %v12_13fc0, 16777216
  %v4_13fcc = udiv i32 %v9_13fc0, 256
  %v5_13fcc = or i32 %v3_13fc8, %v4_13fcc
  store i32 %v5_13fcc, i32* @ip, align 4
  %v3_13fd0 = mul i32 %v9_13fc0, 16777216
  %v4_13fd4 = udiv i32 %v6_13fc0, 256
  %v5_13fd4 = or i32 %v3_13fd0, %v4_13fd4
  store i32 %v5_13fd4, i32* %r5.global-to-local, align 4
  %v3_13fd8 = mul i32 %v6_13fc0, 16777216
  %v4_13fdc = udiv i32 %v3_13fc0, 256
  %v5_13fdc = or i32 %v3_13fd8, %v4_13fdc
  store i32 %v5_13fdc, i32* %r4.global-to-local, align 4
  %v1_13fe0 = add i32 %v0_13fe0, -16
  %v2_13fe0 = inttoptr i32 %v1_13fe0 to i32*
  store i32 %v5_13fdc, i32* %v2_13fe0, align 4
  %v4_13fe0 = add i32 %v0_13fe0, -12
  %v5_13fe0 = inttoptr i32 %v4_13fe0 to i32*
  %v6_13fe0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_13fe0, i32* %v5_13fe0, align 4
  %v7_13fe0 = add i32 %v0_13fe0, -8
  %v8_13fe0 = inttoptr i32 %v7_13fe0 to i32*
  %v9_13fe0 = load i32, i32* @ip, align 4
  store i32 %v9_13fe0, i32* %v8_13fe0, align 4
  %v10_13fe0 = add i32 %v0_13fe0, -4
  %v11_13fe0 = inttoptr i32 %v10_13fe0 to i32*
  %v12_13fe0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_13fe0, i32* %v11_13fe0, align 4
  store i32 %v1_13fe0, i32* %r0.global-to-local, align 4
  %v0_13fe4 = load i32, i32* %r2.global-to-local, align 4
  %v2_13fe4 = add i32 %v0_13fe4, -16
  store i32 %v2_13fe4, i32* %r2.global-to-local, align 4
  %v6_13fe8 = icmp slt i32 %v0_13fe4, 16
  br i1 %v6_13fe8, label %dec_label_pc_13fec, label %dec_label_pc_13fbc.dec_label_pc_13fbc_crit_edge

dec_label_pc_13fbc.dec_label_pc_13fbc_crit_edge:  ; preds = %dec_label_pc_13fbc
  %v0_13fbc.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_13fc0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13fbc

dec_label_pc_13fec:                               ; preds = %dec_label_pc_13fbc
  %v2_13fec = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13fec, i32* @r4, align 4
  %v5_13fec = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_13fec, i32* @r5, align 4
  store i32 %v9_13fb8, i32* @lr, align 4
  %v2_13ff0 = add i32 %v0_13fe4, -4
  store i32 %v2_13ff0, i32* %r2.global-to-local, align 4
  %v4_13ff0 = add i32 %v0_13fe4, 2147483632
  %v5_13ff0 = and i32 %v2_13ff0, %v4_13ff0
  %v6_13ff0 = icmp slt i32 %v5_13ff0, 0
  store i1 %v6_13ff0, i1* %cpsr_v.global-to-local, align 1
  %v7_13ff0 = icmp slt i32 %v2_13ff0, 0
  store i1 %v7_13ff0, i1* %cpsr_n.global-to-local, align 1
  %v8_13ff0 = icmp eq i32 %v2_13ff0, 0
  store i1 %v8_13ff0, i1* %cpsr_z.global-to-local, align 1
  %v5_13ff4 = icmp slt i32 %v2_13fe4, -12
  br i1 %v5_13ff4, label %dec_label_pc_14010, label %dec_label_pc_13ff8

dec_label_pc_13ff8:                               ; preds = %dec_label_pc_13fec, %dec_label_pc_13fac, %dec_label_pc_13ff8
  %v1_14004 = phi i32 [ %v5_14004, %dec_label_pc_13ff8 ], [ %v1_13fe0, %dec_label_pc_13fec ], [ %v0_13f0830, %dec_label_pc_13fac ]
  %v0_13ff8 = load i32, i32* %r3.global-to-local, align 4
  %v3_13ff8 = mul i32 %v0_13ff8, 16777216
  store i32 %v3_13ff8, i32* %ip.global-to-local, align 4
  %v0_13ffc = load i32, i32* %r1.global-to-local, align 4
  %v1_13ffc = add i32 %v0_13ffc, -4
  %v2_13ffc = inttoptr i32 %v1_13ffc to i32*
  %v3_13ffc = load i32, i32* %v2_13ffc, align 4
  store i32 %v3_13ffc, i32* %r3.global-to-local, align 4
  store i32 %v1_13ffc, i32* %r1.global-to-local, align 4
  %v4_14000 = udiv i32 %v3_13ffc, 256
  %v5_14000 = or i32 %v4_14000, %v3_13ff8
  store i32 %v5_14000, i32* @ip, align 4
  %v2_14004 = add i32 %v1_14004, -4
  %v3_14004 = inttoptr i32 %v2_14004 to i32*
  store i32 %v5_14000, i32* %v3_14004, align 4
  %v4_14004 = load i32, i32* %r0.global-to-local, align 4
  %v5_14004 = add i32 %v4_14004, -4
  store i32 %v5_14004, i32* %r0.global-to-local, align 4
  %v0_14008 = load i32, i32* %r2.global-to-local, align 4
  %v2_14008 = add i32 %v0_14008, -4
  store i32 %v2_14008, i32* %r2.global-to-local, align 4
  %v6_1400c = icmp slt i32 %v0_14008, 4
  br i1 %v6_1400c, label %dec_label_pc_14010.loopexit, label %dec_label_pc_13ff8

dec_label_pc_14010.loopexit:                      ; preds = %dec_label_pc_13ff8
  %v4_14008 = sub i32 3, %v0_14008
  %v5_14008 = and i32 %v4_14008, %v0_14008
  %v6_14008 = icmp slt i32 %v5_14008, 0
  %v7_14008 = icmp slt i32 %v2_14008, 0
  store i1 %v6_14008, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14008, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14010

dec_label_pc_14010:                               ; preds = %dec_label_pc_14010.loopexit, %dec_label_pc_13fec
  %v2_13e7c64 = phi i32 [ %v5_14004, %dec_label_pc_14010.loopexit ], [ %v1_13fe0, %dec_label_pc_13fec ]
  %v0_13e6c60 = phi i32 [ %v2_14008, %dec_label_pc_14010.loopexit ], [ %v2_13ff0, %dec_label_pc_13fec ]
  %v0_14010 = load i32, i32* %r1.global-to-local, align 4
  %v1_14010 = add i32 %v0_14010, 1
  store i32 %v1_14010, i32* %r1.global-to-local, align 4
  br label %bb141

; uselistorder directives
  uselistorder i32 %v5_14004, { 0, 2, 1 }
  uselistorder i32 %v3_13ff8, { 1, 0 }
  uselistorder i32 %v2_13ff0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_13fe0, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_13fc0, { 1, 0 }
  uselistorder i32 %v3_13fbc, { 1, 0 }
  uselistorder i32 %v0_13fc0, { 3, 2, 1, 0 }
  uselistorder i32 %v0_13fe0, { 3, 2, 1, 0 }
  uselistorder i32 %v5_13f98, { 0, 2, 1 }
  uselistorder i32 %v3_13f8c, { 1, 0 }
  uselistorder i32 %v2_13f84, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_13f74, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_13f54, { 1, 0 }
  uselistorder i32 %v3_13f50, { 1, 0 }
  uselistorder i32 %v0_13f54, { 3, 2, 1, 0 }
  uselistorder i32 %v0_13f74, { 3, 2, 1, 0 }
  uselistorder i32 %v5_13f2c, { 0, 2, 1 }
  uselistorder i32 %v3_13f20, { 1, 0 }
  uselistorder i32 %v2_13f18, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_13f08, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_13ee8, { 1, 0 }
  uselistorder i32 %v3_13ee4, { 1, 0 }
  uselistorder i32 %v0_13ee8, { 3, 2, 1, 0 }
  uselistorder i32 %v0_13f08, { 3, 2, 1, 0 }
  uselistorder i1 %v5_13fb0, { 2, 0, 1 }
  uselistorder i32 %v0_13ec8, { 1, 0 }
  uselistorder i32 %v0_13fb4, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_13f0830, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_13eb8, { 2, 1, 0 }
  uselistorder i32 %v0_13eb8, { 2, 0, 1 }
  uselistorder i32 %v2_13eb0, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_13eb0, { 1, 2, 0, 3 }
  uselistorder i32 %v0_13eb0, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_13f0831, { 2, 1, 0 }
  uselistorder i32 %v11_13e8c, { 1, 0 }
  uselistorder i32 %v7_13e8c, { 1, 0 }
  uselistorder i32 %v1_13e6c, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_13e6c, { 1, 2, 0, 3 }
  uselistorder i32 %v2_13e70, { 1, 0 }
  uselistorder i32 %v7_13e64, { 0, 2, 1 }
  uselistorder i32 %v10_13e60, { 1, 0 }
  uselistorder i32 %v9_13e58, { 1, 0, 2 }
  uselistorder i32 %v6_13e54, { 1, 0 }
  uselistorder i32 %v2_13e4c, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_13e4c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_13e5c, { 0, 3, 2, 1 }
  uselistorder i32 %v7_13e40, { 0, 2, 1 }
  uselistorder i32 %v13_13e3c, { 1, 0 }
  uselistorder i32 %v4_13e38, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_13e38, { 2, 0, 1 }
  uselistorder i32 %v6_13e40, { 0, 3, 2, 1 }
  uselistorder i32 %v7_13e30, { 0, 2, 1 }
  uselistorder i32 %v16_13e2c, { 1, 0 }
  uselistorder i32 %v4_13e28, { 1, 2, 0 }
  uselistorder i32 %v0_13e38.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_13e30, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_13e1c, { 0, 3, 2, 1 }
  uselistorder i32 %v10_13e18, { 1, 0 }
  uselistorder i32 %v1_13e14, { 1, 0 }
  uselistorder i32 %v10_13e10, { 1, 0 }
  uselistorder i32 %v0_13e10, { 3, 2, 1, 0 }
  uselistorder i32 %v0_13e14, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_13e08, { 0, 2, 1 }
  uselistorder i32 %v2_13dfc, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_13dfc, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_13e1448, { 1, 2, 0 }
  uselistorder i32 %v1_13df4, { 2, 1, 0 }
  uselistorder i32 %v1_13dec, { 2, 3, 1, 0 }
  uselistorder i32 %v2_13de4, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_13de0, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_13ddc, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_13ddc, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v4_13dc8, { 0, 2, 1 }
  uselistorder i32 %v3_13dbc, { 1, 0 }
  uselistorder i32 %v2_13db4, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_13da4, { 1, 0, 3, 2 }
  uselistorder i32 %v8_13d84, { 1, 0, 2 }
  uselistorder i32 %v5_13d84, { 1, 0, 2 }
  uselistorder i32 %v2_13d84, { 1, 0, 2 }
  uselistorder i32 %v3_13d80, { 1, 0 }
  uselistorder i32 %v0_13d84, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_13da4, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_13d5c, { 0, 2, 1 }
  uselistorder i32 %v3_13d50, { 1, 0 }
  uselistorder i32 %v2_13d48, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_13d38, { 1, 0, 3, 2 }
  uselistorder i32 %v8_13d18, { 1, 0, 2 }
  uselistorder i32 %v5_13d18, { 1, 0, 2 }
  uselistorder i32 %v2_13d18, { 1, 0, 2 }
  uselistorder i32 %v3_13d14, { 1, 0 }
  uselistorder i32 %v0_13d18, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_13d38, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_13cf0, { 0, 2, 1 }
  uselistorder i32 %v3_13ce4, { 1, 0 }
  uselistorder i32 %v2_13cdc, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_13ccc, { 1, 0, 3, 2 }
  uselistorder i32 %v8_13cac, { 1, 0, 2 }
  uselistorder i32 %v5_13cac, { 1, 0, 2 }
  uselistorder i32 %v2_13cac, { 1, 0, 2 }
  uselistorder i32 %v3_13ca8, { 1, 0 }
  uselistorder i32 %v0_13cac, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_13ccc, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v5_13d74, { 2, 0, 1 }
  uselistorder i32 %v0_13d78, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_13ccc74, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_13c7c, { 1, 0 }
  uselistorder i32 %v0_13c7c, { 3, 1, 0, 2 }
  uselistorder i32 %v2_13c74, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_13c74, { 1, 2, 0, 3 }
  uselistorder i32 %v0_13c74, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_13ccc75, { 2, 1, 0 }
  uselistorder i32 %v1_13c54, { 1, 0, 2 }
  uselistorder i32 %v1_13c2c, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_13c2c, { 1, 2, 0, 3 }
  uselistorder i32 %v8_13c18, { 1, 0, 2 }
  uselistorder i32 %v6_13c14, { 1, 0 }
  uselistorder i32 %v2_13c0c, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_13c0c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_13c1c, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v4_13c04, { 0, 2, 1 }
  uselistorder i32 %v3_13c04, { 3, 0, 1, 2 }
  uselistorder i1 %v0_13c04, { 1, 0 }
  uselistorder i1 %v1_13c04, { 1, 0 }
  uselistorder i32 %v3_13c00, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_13bf8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_13be4, { 1, 2, 0 }
  uselistorder i32 %v12_13bd8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_13bcc, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_13bd0, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v2_13bc0, { 0, 2, 1 }
  uselistorder i32 %v2_13bb8, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_13bb8, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v1_13bb0, { 1, 0 }
  uselistorder i32 %v1_13ba8, { 2, 1, 0 }
  uselistorder i32 %v2_13ba0, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_13ba0, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v2_13b90, { 1, 0 }
  uselistorder i32 %v1_13b90, { 1, 5, 6, 3, 4, 0, 7, 9, 2, 8, 10 }
  uselistorder i32 %v0_13b90, { 1, 7, 9, 8, 6, 4, 0, 5, 11, 2, 3, 10, 12 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 25, 26, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r3.global-to-local, { 0, 37, 1, 2, 3, 38, 4, 5, 6, 39, 35, 36, 40, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i32* %r2.global-to-local, { 0, 27, 1, 2, 3, 4, 5, 28, 6, 7, 8, 9, 10, 67, 68, 69, 70, 71, 11, 29, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 26, 30, 31, 62, 32, 33, 34, 35, 36, 63, 37, 38, 39, 40, 41, 64, 42, 43, 44, 45, 46, 65, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0, 12, 3, 4, 6, 8, 5, 13, 7, 9, 11, 65, 10, 64, 63, 66, 14, 19, 15, 16, 17, 18, 20, 21, 23, 22, 24, 25, 34, 26, 27, 35, 28, 36, 29, 37, 30, 31, 32, 33, 38, 41, 39, 51, 40, 42, 45, 43, 52, 44, 46, 49, 47, 53, 48, 50, 54, 55, 56, 58, 57, 59, 60, 61, 62 }
  uselistorder i32* %r0.global-to-local, { 0, 21, 1, 2, 22, 3, 4, 34, 36, 5, 6, 7, 8, 9, 23, 10, 12, 11, 13, 14, 35, 15, 16, 24, 17, 18, 19, 20, 25, 26, 27, 29, 28, 30, 31, 32, 33 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 16, 17, 18, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 45, 8, 46, 10, 11, 12, 13, 14, 15, 16, 17, 18, 3, 19, 20, 21, 22, 23, 0, 24, 1, 26, 2, 27, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 42, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 0, 23, 1, 25, 2, 26, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 47, 8, 48, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 0, 25, 1, 27, 2, 28, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46 }
  uselistorder i32 31, { 18, 19, 1, 0, 10, 12, 11, 13, 2, 14, 20, 21, 15, 16, 6, 17, 7, 3, 8, 4, 5, 9 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -2, { 12, 13, 11, 17, 0, 15, 1, 16, 2, 3, 8, 10, 9, 7, 6, 5, 4, 18, 19, 20, 21, 14 }
  uselistorder i32 65536, { 10, 9, 15, 11, 16, 12, 17, 13, 18, 14, 19, 20, 21, 25, 22, 26, 23, 27, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 58, 60, 61, 62, 64, 63, 66, 65, 67, 1, 68, 69, 2, 70, 0, 3, 71, 72, 73, 74, 75, 78, 76, 77, 79, 80, 81, 85, 86, 87, 88, 82, 83, 84, 89, 92, 93, 94, 90, 91, 95, 96, 97, 99, 98, 100, 4, 101, 103, 104, 102, 105, 106, 5, 107, 110, 111, 108, 112, 109, 113, 114, 115, 116, 117, 155, 119, 118, 156, 121, 120, 122, 124, 123, 126, 125, 157, 128, 127, 158, 130, 129, 131, 133, 132, 135, 134, 6, 136, 138, 139, 137, 140, 141, 7, 142, 144, 145, 146, 143, 147, 8, 148, 152, 153, 154, 149, 150, 151 }
  uselistorder i32 2147483632, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32 16777216, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 47, 46, 49, 48, 51, 50, 52, 54, 53, 56, 55, 58, 57, 60, 59, 61, 62, 69, 63, 70, 64, 71, 65, 72, 73, 66, 74, 67, 75, 68, 77, 76, 81, 78, 82, 79, 83, 80, 87, 84, 88, 85, 89, 86, 90, 91, 92, 97, 93, 98, 94, 99, 95, 100, 96, 101, 102, 103, 104, 105, 106, 108, 107, 110, 109, 111, 112, 114, 113, 119, 115, 120, 116, 121, 117, 122, 118, 124, 123, 125, 128, 129, 126, 127, 130, 131, 132, 135, 133, 136, 134, 137, 140, 141, 138, 139, 142, 143, 144, 147, 145, 148, 146, 149, 150, 151, 152, 159, 153, 160, 161, 154, 162, 157, 163, 155, 164, 165, 156, 158, 166, 167, 171, 168, 172, 173, 169, 170, 174, 175, 176, 178, 177, 179 }
  uselistorder i32* @r5, { 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 145, 146, 147, 148, 149, 150, 151, 152, 153, 157, 154, 155, 156, 158, 585, 586, 587, 588, 589, 0, 590, 591, 195, 196, 197, 198, 199, 200, 472, 473, 474, 475, 476, 477, 478, 485, 479, 480, 481, 482, 483, 484, 521, 522, 523, 530, 531, 532, 533, 524, 525, 526, 527, 528, 529, 29, 30, 31, 159, 160, 3, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 66, 67, 21, 20, 22, 23, 24, 25, 26, 68, 69, 27, 28, 70, 71, 72, 73, 74, 75, 84, 85, 86, 76, 77, 78, 79, 80, 81, 82, 83, 4, 108, 109, 110, 111, 112, 113, 114, 204, 205, 206, 207, 208, 209, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 1, 107, 115, 116, 117, 118, 119, 120, 121, 122, 5, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 2, 144, 172, 173, 174, 175, 176, 8, 177, 178, 179, 180, 181, 182, 183, 184, 9, 185, 186, 187, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 6, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 7, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 188, 189, 190, 191, 192, 193, 194, 201, 202, 203 }
  uselistorder i32 -3, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 -5, { 1, 0 }
  uselistorder i32 11, { 8, 9, 10, 21, 22, 14, 1, 11, 2, 12, 3, 13, 15, 16, 17, 18, 0, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 4, 33, 34, 35, 5, 36, 37, 38, 6, 39, 40, 41, 7, 42, 43, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 3, 4, 5, 22, 6, 23, 24 }
  uselistorder i32 48, { 0, 5, 6, 3, 4, 1, 7, 2, 8 }
  uselistorder i32 40, { 1, 7, 2, 0, 4, 5, 6, 8, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 36, { 1, 7, 8, 5, 6, 0, 2, 4, 3 }
  uselistorder i32 -16, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 6, 5, 4, 1, 16, 17, 18, 19, 20, 21, 3, 2, 0 }
  uselistorder i32 -32, { 1, 0, 2, 3 }
  uselistorder i32 24, { 0, 72, 73, 37, 38, 1, 74, 75, 35, 36, 16, 15, 66, 45, 67, 46, 54, 58, 39, 40, 41, 42, 43, 44, 61, 47, 48, 49, 50, 51, 52, 53, 55, 56, 62, 57, 63, 59, 60, 68, 69, 70, 64, 65, 71, 2, 78, 17, 79, 18, 80, 19, 81, 20, 3, 82, 21, 22, 4, 83, 23, 84, 24, 5, 25, 26, 6, 27, 7, 8, 9, 10, 11, 12, 85, 28, 13, 86, 29, 87, 88, 89, 30, 31, 14, 90, 32, 91, 33, 76, 34, 77 }
  uselistorder i32* @lr, { 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 0, 117, 118, 119, 1, 120, 121, 122, 2, 123, 124, 125, 126, 127, 128, 129, 130, 34, 35, 131, 132, 133, 134, 135, 86, 87, 88, 89, 90, 91, 92, 93, 36, 37, 38, 39, 40, 6, 94, 4, 5, 95, 47, 48, 96, 58, 59, 60, 61, 62, 49, 50, 51, 52, 53, 7, 8, 9, 10, 13, 16, 3, 17, 14, 15, 11, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 97, 98, 99, 100, 101, 102, 18, 19, 20, 21, 41, 42, 54, 55, 56, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 103, 104, 105, 106, 43, 44, 45, 46 }
  uselistorder i32 16, { 31, 32, 33, 202, 34, 203, 204, 35, 205, 206, 36, 207, 208, 209, 210, 211, 212, 115, 116, 92, 93, 120, 117, 118, 119, 121, 26, 122, 123, 5, 6, 7, 8, 9, 25, 10, 11, 0, 12, 13, 52, 96, 37, 97, 38, 53, 94, 95, 98, 100, 101, 102, 27, 91, 14, 15, 24, 88, 16, 103, 17, 54, 99, 55, 106, 107, 41, 40, 39, 104, 42, 105, 43, 56, 57, 58, 59, 60, 61, 62, 63, 108, 64, 109, 65, 110, 66, 111, 67, 112, 68, 113, 69, 114, 71, 72, 73, 74, 70, 75, 28, 125, 126, 127, 128, 76, 129, 130, 131, 132, 133, 134, 135, 77, 136, 137, 138, 45, 139, 44, 140, 141, 79, 142, 143, 144, 145, 146, 1, 78, 147, 148, 149, 81, 150, 151, 152, 153, 154, 2, 80, 155, 82, 156, 157, 158, 18, 159, 19, 160, 89, 20, 83, 84, 161, 162, 3, 47, 163, 46, 164, 85, 165, 166, 167, 21, 168, 22, 169, 90, 23, 86, 87, 170, 171, 4, 49, 172, 48, 173, 51, 174, 50, 175, 176, 177, 178, 179, 29, 180, 181, 182, 183, 185, 184, 186, 187, 188, 189, 190, 191, 192, 30, 193, 194, 195, 196, 197, 199, 198, 200, 201, 124 }
  uselistorder i32 20, { 110, 3, 111, 112, 0, 4, 113, 32, 33, 23, 24, 1, 34, 35, 36, 37, 25, 27, 5, 28, 6, 29, 22, 26, 30, 31, 16, 17, 18, 19, 39, 40, 7, 41, 42, 43, 44, 45, 46, 47, 8, 48, 49, 50, 51, 52, 53, 54, 55, 56, 9, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 10, 67, 68, 69, 70, 71, 72, 73, 74, 11, 75, 76, 77, 2, 78, 79, 80, 81, 20, 82, 83, 84, 85, 86, 87, 88, 89, 90, 21, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 13, 101, 12, 102, 103, 104, 105, 15, 106, 14, 107, 108, 109, 38 }
  uselistorder i32 27, { 1, 0, 7, 3, 8, 4, 9, 5, 10, 2, 11, 6, 12 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 7, { 19, 20, 21, 53, 60, 2, 17, 22, 14, 23, 15, 24, 16, 25, 0, 18, 26, 27, 28, 29, 30, 3, 31, 32, 33, 34, 4, 35, 36, 37, 38, 5, 39, 6, 40, 7, 41, 42, 8, 43, 44, 9, 45, 46, 10, 47, 11, 48, 49, 50, 51, 12, 52, 55, 56, 57, 58, 13, 59, 1, 54 }
  uselistorder i32 -8, { 16, 17, 18, 19, 20, 21, 15, 14, 7, 13, 12, 11, 10, 22, 23, 24, 25, 8, 26, 0, 29, 9, 27, 28, 6, 1, 3, 2, 4, 5 }
  uselistorder i32* @ip, { 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 2, 3, 48, 1, 0, 4, 5 }
  uselistorder i1 false, { 25, 26, 27, 34, 19, 24, 35, 36, 21, 22, 23, 37, 18, 38, 39, 0, 30, 29, 31, 28, 1, 3, 2, 16, 17, 4, 32, 15, 20, 33, 7, 6, 5, 8, 9, 10, 14, 11, 12, 13, 40 }
  uselistorder i32 4, { 71, 62, 63, 6, 412, 64, 413, 52, 7, 8, 65, 414, 66, 415, 416, 417, 418, 67, 419, 420, 421, 422, 68, 423, 424, 425, 426, 427, 9, 428, 429, 430, 431, 432, 69, 433, 51, 434, 435, 436, 437, 438, 439, 10, 11, 70, 440, 248, 249, 179, 180, 250, 251, 252, 441, 442, 443, 444, 445, 123, 124, 125, 53, 126, 127, 385, 387, 386, 383, 384, 353, 354, 355, 356, 388, 389, 390, 391, 357, 358, 359, 392, 393, 128, 129, 130, 131, 132, 45, 12, 13, 253, 254, 255, 256, 257, 258, 14, 15, 58, 16, 17, 59, 394, 395, 177, 18, 19, 90, 72, 276, 266, 54, 187, 91, 188, 93, 189, 94, 190, 133, 191, 210, 211, 212, 204, 205, 213, 214, 192, 193, 181, 182, 183, 184, 185, 186, 194, 195, 95, 196, 197, 198, 199, 200, 201, 202, 203, 92, 207, 208, 209, 206, 60, 215, 73, 96, 97, 20, 216, 21, 217, 218, 22, 219, 23, 220, 221, 47, 222, 46, 227, 98, 229, 99, 230, 231, 228, 223, 100, 224, 225, 226, 239, 134, 241, 24, 242, 243, 240, 25, 244, 48, 101, 245, 246, 396, 232, 57, 56, 55, 233, 102, 26, 27, 28, 29, 30, 31, 234, 49, 235, 50, 236, 237, 238, 135, 247, 0, 103, 32, 267, 268, 136, 269, 270, 271, 137, 138, 105, 272, 104, 274, 74, 275, 277, 139, 278, 279, 140, 141, 280, 75, 281, 76, 282, 283, 142, 143, 284, 144, 285, 286, 145, 146, 106, 287, 77, 288, 78, 289, 290, 291, 292, 293, 107, 294, 79, 295, 296, 297, 147, 298, 299, 300, 301, 148, 149, 2, 302, 108, 303, 80, 304, 305, 306, 150, 307, 308, 151, 152, 3, 109, 309, 81, 311, 82, 312, 313, 153, 314, 315, 316, 317, 318, 154, 155, 319, 320, 111, 321, 4, 110, 322, 83, 323, 112, 324, 325, 156, 326, 327, 328, 329, 330, 157, 158, 331, 332, 114, 333, 5, 113, 334, 84, 335, 115, 336, 337, 338, 339, 340, 116, 341, 85, 342, 343, 344, 345, 346, 159, 347, 348, 349, 160, 161, 118, 350, 117, 86, 351, 87, 352, 397, 398, 399, 400, 401, 120, 402, 121, 403, 162, 404, 405, 406, 163, 164, 122, 407, 119, 408, 88, 409, 89, 411, 165, 360, 361, 33, 166, 362, 363, 34, 167, 364, 365, 35, 168, 366, 367, 36, 169, 368, 369, 37, 170, 61, 370, 371, 38, 372, 171, 373, 374, 39, 172, 375, 376, 40, 173, 377, 378, 41, 174, 379, 380, 42, 175, 381, 382, 43, 410, 310, 259, 260, 261, 44, 262, 263, 1, 264, 176, 265, 273, 178 }
  uselistorder i32* @r2, { 64, 65, 26, 9, 27, 29, 28, 30, 31, 32, 33, 7, 66, 1, 67, 72, 73, 76, 68, 55, 59, 60, 63, 61, 62, 56, 57, 58, 54, 14, 0, 74, 2, 75, 5, 34, 35, 36, 8, 10, 69, 70, 71, 3, 37, 38, 39, 6, 4, 40, 44, 47, 48, 45, 46, 49, 15, 11, 12, 13, 18, 19, 16, 17, 22, 23, 20, 21, 24, 25, 41, 42, 43, 50, 51, 52, 53 }
  uselistorder label %dec_label_pc_13ff8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13f8c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13f20, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13ec0, { 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb141, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %dec_label_pc_13e4c, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %dec_label_pc_13e10, { 1, 0 }
  uselistorder label %dec_label_pc_13dfc, { 1, 0 }
  uselistorder label %dec_label_pc_13dbc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13d50, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13ce4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13c84, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %.thread120, { 1, 0 }
  uselistorder label %.thread119, { 1, 0 }
  uselistorder label %bb131, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread117, { 1, 0 }
  uselistorder label %dec_label_pc_13bf8, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_13bb8, { 1, 0 }
}

define i32 @function_14018(i32 %arg1) local_unnamed_addr {
dec_label_pc_14018:
  ret i32 %arg1
}

define i32 @function_14020() local_unnamed_addr {
dec_label_pc_14020:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_14020 = load i32, i32* @r0, align 4
  %v2_14020 = icmp eq i32 %v0_14020, 0
  %v3_14024 = load i32, i32* @r4, align 4
  store i32 %v3_14024, i32* %stack_var_-20, align 4
  %v0_14028 = load i32, i32* @r1, align 4
  br i1 %v2_14020, label %dec_label_pc_14100, label %dec_label_pc_1403c.lr.ph

dec_label_pc_1403c:                               ; preds = %dec_label_pc_1403c.lr.ph, %dec_label_pc_140c0
  %v1_140c0 = phi i32 [ 0, %dec_label_pc_1403c.lr.ph ], [ %v5_140c0, %dec_label_pc_140c0 ]
  %v0_140c4 = phi i32 [ 1, %dec_label_pc_1403c.lr.ph ], [ %v1_140c4, %dec_label_pc_140c0 ]
  %v0_14044 = phi i32 [ %v0_14020, %dec_label_pc_1403c.lr.ph ], [ %v0_1404425, %dec_label_pc_140c0 ]
  %v1_14044 = inttoptr i32 %v0_14044 to i8*
  %v2_14044 = load i8, i8* %v1_14044, align 1
  %v3_14044 = zext i8 %v2_14044 to i32
  %v3_14048 = mul nuw nsw i32 %v3_14044, 2
  %v4_14048 = add i32 %v3_14048, %v2_14040.pre
  %v5_14048 = inttoptr i32 %v4_14048 to i8*
  %v6_14048 = load i8, i8* %v5_14048, align 1
  %v1_1404c = and i8 %v6_14048, 8
  %v2_1404c = icmp eq i8 %v1_1404c, 0
  br i1 %v2_1404c, label %dec_label_pc_14100, label %dec_label_pc_14054

dec_label_pc_14054:                               ; preds = %dec_label_pc_1403c
  br label %dec_label_pc_14074

dec_label_pc_1405c:                               ; preds = %dec_label_pc_14074
  %v3_14060 = mul i32 %v0_140c0, 10
  %v4_14060 = add i32 %v3_14074, %v3_14060
  %v1_14064 = add i32 %v4_14060, -48
  %v8_1406c = icmp sgt i32 %v1_14064, 255
  br i1 %v8_1406c, label %dec_label_pc_14100, label %dec_label_pc_14070

dec_label_pc_14070:                               ; preds = %dec_label_pc_1405c
  %v1_14070 = add i32 %v0_140b0, 1
  store i32 %v1_14070, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14074

dec_label_pc_14074:                               ; preds = %dec_label_pc_14054, %dec_label_pc_14070
  %v0_140c0 = phi i32 [ 0, %dec_label_pc_14054 ], [ %v1_14064, %dec_label_pc_14070 ]
  %v0_140b0 = phi i32 [ %v0_14044, %dec_label_pc_14054 ], [ %v1_14070, %dec_label_pc_14070 ]
  %v1_14074 = inttoptr i32 %v0_140b0 to i8*
  %v2_14074 = load i8, i8* %v1_14074, align 1
  %v3_14074 = zext i8 %v2_14074 to i32
  %v2_14078 = mul nuw nsw i32 %v3_14074, 2
  %v2_1407c = add i32 %v2_14078, %v2_14040.pre
  %v3_14080 = inttoptr i32 %v2_1407c to i8*
  %v4_14080 = load i8, i8* %v3_14080, align 1
  %v6_14080 = zext i8 %v4_14080 to i32
  %v1_1408c = and i32 %v6_14080, 8
  %v2_1408c = icmp eq i32 %v1_1408c, 0
  br i1 %v2_1408c, label %dec_label_pc_14094, label %dec_label_pc_1405c

dec_label_pc_14094:                               ; preds = %dec_label_pc_14074
  %v8_14098 = icmp sgt i32 %v0_140c4, 3
  br i1 %v8_14098, label %dec_label_pc_140ac, label %dec_label_pc_1409c

dec_label_pc_1409c:                               ; preds = %dec_label_pc_14094
  %v7_1409c = icmp eq i8 %v2_14074, 46
  br i1 %v7_1409c, label %dec_label_pc_140a4, label %dec_label_pc_14100

dec_label_pc_140a4:                               ; preds = %dec_label_pc_1409c
  %v1_140a4 = add i32 %v0_140b0, 1
  store i32 %v1_140a4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_140c0

dec_label_pc_140ac:                               ; preds = %dec_label_pc_14094
  %v2_140ac = icmp eq i8 %v2_14074, 0
  %v1_140b0 = add i32 %v0_140b0, 1
  store i32 %v1_140b0, i32* %r0.global-to-local, align 4
  br i1 %v2_140ac, label %dec_label_pc_140c0, label %dec_label_pc_140b8

dec_label_pc_140b8:                               ; preds = %dec_label_pc_140ac
  %v1_140b8 = and i32 %v6_14080, 32
  %v2_140b8 = icmp eq i32 %v1_140b8, 0
  br i1 %v2_140b8, label %dec_label_pc_14100, label %dec_label_pc_140c0

dec_label_pc_140c0:                               ; preds = %dec_label_pc_140b8, %dec_label_pc_140ac, %dec_label_pc_140a4
  %v0_1404425 = phi i32 [ %v1_140b0, %dec_label_pc_140b8 ], [ %v1_140b0, %dec_label_pc_140ac ], [ %v1_140a4, %dec_label_pc_140a4 ]
  %v4_140c0 = mul i32 %v1_140c0, 256
  %v5_140c0 = or i32 %v0_140c0, %v4_140c0
  %v1_140c4 = add nuw nsw i32 %v0_140c4, 1
  %v7_140cc = icmp slt i32 %v1_140c4, 5
  br i1 %v7_140cc, label %dec_label_pc_1403c, label %dec_label_pc_140d0

dec_label_pc_1403c.lr.ph:                         ; preds = %dec_label_pc_14020
  %v2_14040.pre = load i32, i32* bitcast (i32** @global_var_1c87c.411 to i32*), align 4
  br label %dec_label_pc_1403c

dec_label_pc_140d0:                               ; preds = %dec_label_pc_140c0
  %v2_140d0 = icmp eq i32 %v0_14028, 0
  br i1 %v2_140d0, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_140d0
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread11

bb40:                                             ; preds = %dec_label_pc_140d0
  %v3_140ec = call i32 @llvm.bswap.i32(i32 %v5_140c0)
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_140f8 = inttoptr i32 %v0_14028 to i32*
  store i32 %v3_140ec, i32* %v3_140f8, align 4
  %v2_140fc.pre = load i32, i32* %stack_var_-20, align 4
  %v17_140fc.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb, %bb40
  %v17_140fc = phi i32 [ 1, %bb ], [ %v17_140fc.pre, %bb40 ]
  %v2_140fc = phi i32 [ %v3_14024, %bb ], [ %v2_140fc.pre, %bb40 ]
  store i32 %v2_140fc, i32* @r4, align 4
  ret i32 %v17_140fc

dec_label_pc_14100:                               ; preds = %dec_label_pc_1409c, %dec_label_pc_140b8, %dec_label_pc_1403c, %dec_label_pc_1405c, %dec_label_pc_14020
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_14024, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_14040.pre, { 1, 0 }
  uselistorder i32 %v1_140c4, { 1, 0 }
  uselistorder i32 %v0_140b0, { 0, 1, 3, 2 }
  uselistorder i32 %v3_14024, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 4, 5, 6 }
  uselistorder i32 5, { 17, 24, 6, 26, 7, 27, 3, 18, 25, 4, 1, 0, 28, 29, 30, 19, 20, 21, 22, 23, 31, 35, 36, 37, 38, 8, 39, 40, 41, 42, 9, 43, 44, 45, 46, 47, 48, 49, 50, 10, 51, 52, 53, 11, 54, 55, 56, 12, 57, 58, 59, 60, 13, 61, 62, 63, 64, 14, 65, 66, 67, 68, 69, 70, 71, 15, 72, 74, 75, 76, 77, 78, 79, 16, 80, 5, 73, 32, 2, 33, 34 }
  uselistorder i32 256, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 63, 64, 68, 71, 72, 73, 69, 70, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 88, 89, 91, 92, 93, 94, 95, 97, 98, 96, 101, 100, 99, 106, 102, 105, 103, 104, 107, 108, 109, 110, 491, 111, 112, 113, 114, 115, 492, 116, 117, 118, 119, 120, 121, 122, 123, 125, 124, 126, 127, 128, 131, 130, 129, 132, 134, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 144, 146, 147, 148, 152, 158, 153, 149, 154, 159, 155, 160, 156, 150, 161, 151, 162, 163, 157, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 174, 177, 180, 181, 179, 178, 182, 185, 184, 183, 192, 189, 193, 190, 186, 194, 191, 187, 188, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 212, 214, 215, 216, 227, 222, 217, 228, 223, 229, 224, 230, 225, 218, 219, 220, 231, 232, 233, 234, 226, 221, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 259, 268, 264, 269, 265, 261, 262, 266, 263, 270, 271, 267, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 287, 286, 294, 289, 300, 301, 295, 290, 302, 303, 296, 291, 304, 297, 305, 298, 306, 299, 307, 292, 308, 293, 309, 310, 311, 312, 313, 314, 315, 318, 319, 322, 320, 316, 323, 321, 317, 326, 325, 324, 329, 330, 327, 331, 328, 332, 336, 333, 338, 337, 334, 335, 339, 488, 493, 340, 341, 342, 343, 344, 347, 345, 346, 349, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 365, 366, 369, 367, 363, 370, 368, 364, 373, 372, 371, 376, 377, 374, 378, 375, 379, 383, 380, 385, 384, 381, 382, 386, 489, 494, 387, 388, 389, 390, 391, 394, 392, 393, 396, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 414, 416, 417, 418, 419, 421, 420, 422, 423, 425, 424, 426, 427, 428, 429, 432, 439, 433, 434, 430, 435, 436, 437, 431, 440, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 453, 455, 456, 457, 461, 468, 462, 463, 469, 464, 458, 459, 465, 460, 466, 470, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 483, 485, 486, 487, 490 }
  uselistorder i32 32, { 56, 41, 42, 39, 49, 50, 44, 45, 48, 5, 4, 7, 6, 9, 8, 40, 38, 51, 52, 11, 10, 13, 12, 15, 14, 17, 16, 43, 19, 18, 21, 20, 22, 24, 23, 26, 25, 27, 28, 30, 29, 46, 47, 53, 54, 31, 55, 32, 33, 34, 0, 35, 1, 2, 3, 36, 37 }
  uselistorder i8 46, { 0, 1, 3, 2 }
  uselistorder i32 3, { 40, 64, 65, 170, 66, 67, 68, 69, 70, 71, 75, 95, 171, 4, 157, 159, 160, 0, 72, 23, 73, 24, 161, 74, 41, 25, 45, 76, 27, 79, 44, 80, 46, 77, 47, 78, 2, 81, 82, 83, 84, 42, 5, 85, 86, 87, 88, 26, 89, 48, 90, 43, 91, 49, 92, 50, 93, 94, 28, 51, 52, 1, 96, 97, 53, 99, 100, 101, 102, 103, 104, 54, 105, 55, 106, 29, 107, 108, 109, 110, 111, 7, 6, 56, 30, 112, 113, 114, 115, 116, 117, 118, 9, 8, 57, 119, 31, 120, 121, 122, 123, 124, 125, 126, 127, 11, 10, 58, 128, 32, 129, 130, 131, 132, 133, 13, 12, 59, 134, 33, 135, 136, 137, 138, 60, 139, 15, 14, 35, 140, 34, 141, 142, 143, 144, 61, 145, 17, 16, 37, 146, 36, 147, 148, 149, 150, 151, 152, 153, 154, 19, 18, 62, 155, 38, 156, 162, 163, 164, 165, 166, 167, 21, 20, 63, 168, 39, 169, 22, 158, 3, 98 }
  uselistorder i32 8, { 85, 132, 23, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 24, 149, 60, 61, 62, 63, 67, 64, 65, 66, 150, 123, 122, 120, 121, 109, 110, 111, 124, 125, 126, 112, 113, 114, 7, 27, 28, 25, 26, 17, 18, 20, 21, 29, 151, 68, 69, 70, 71, 8, 9, 44, 19, 10, 11, 16, 12, 30, 31, 13, 14, 15, 45, 39, 46, 36, 47, 37, 48, 38, 49, 22, 50, 51, 52, 53, 55, 56, 54, 57, 58, 40, 59, 75, 32, 76, 77, 78, 79, 80, 81, 82, 83, 84, 3, 86, 87, 88, 4, 89, 90, 91, 92, 93, 94, 95, 5, 96, 97, 98, 99, 100, 101, 102, 6, 103, 104, 105, 106, 107, 108, 127, 128, 129, 130, 131, 115, 33, 116, 34, 117, 35, 118, 41, 119, 0, 1, 43, 72, 73, 42, 74, 2 }
  uselistorder i32 255, { 1, 2, 0 }
  uselistorder i32 10, { 10, 43, 44, 0, 3, 4, 24, 25, 45, 1, 26, 33, 11, 29, 12, 30, 13, 31, 14, 32, 6, 34, 35, 27, 15, 36, 28, 37, 16, 38, 39, 40, 17, 5, 18, 19, 41, 20, 42, 8, 47, 48, 2, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 21, 59, 60, 61, 22, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 7, 67, 9, 73, 46, 23 }
  uselistorder i8 0, { 6, 0, 1, 23, 5, 24, 25, 2, 9, 26, 27, 28, 7, 29, 30, 31, 32, 33, 34, 3, 11, 10, 12, 37, 39, 36, 17, 38, 18, 40, 41, 35, 4, 42, 43, 44, 45, 46, 20, 47, 50, 21, 48, 49, 19, 51, 52, 53, 54, 55, 13, 8, 14, 56, 15, 16, 22, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66 }
  uselistorder i32 2, { 5, 144, 264, 265, 63, 266, 267, 55, 268, 54, 269, 53, 148, 80, 81, 185, 82, 186, 83, 187, 6, 145, 270, 59, 84, 0, 7, 8, 9, 10, 11, 12, 13, 14, 15, 146, 16, 17, 18, 19, 20, 86, 87, 85, 56, 57, 69, 163, 88, 91, 152, 157, 70, 149, 71, 150, 72, 151, 90, 153, 73, 154, 74, 155, 75, 156, 76, 162, 158, 159, 160, 161, 64, 92, 164, 21, 22, 165, 166, 167, 93, 168, 52, 147, 169, 89, 170, 23, 94, 176, 177, 24, 95, 96, 97, 178, 179, 98, 251, 102, 171, 100, 172, 101, 173, 99, 103, 174, 25, 26, 27, 104, 175, 65, 105, 106, 107, 108, 109, 110, 111, 66, 113, 114, 112, 115, 180, 58, 62, 181, 182, 183, 252, 253, 188, 189, 190, 191, 192, 193, 194, 117, 195, 116, 196, 197, 198, 199, 200, 119, 118, 201, 202, 203, 204, 205, 206, 207, 121, 208, 120, 209, 210, 122, 123, 77, 124, 211, 212, 213, 214, 215, 216, 217, 1, 28, 29, 30, 31, 32, 33, 125, 218, 78, 219, 220, 221, 222, 223, 2, 34, 35, 36, 37, 38, 39, 127, 126, 224, 225, 40, 226, 227, 60, 228, 129, 229, 3, 41, 42, 43, 44, 45, 130, 230, 128, 231, 232, 46, 233, 234, 61, 235, 132, 236, 4, 47, 48, 49, 50, 51, 133, 237, 131, 238, 239, 134, 135, 79, 136, 240, 241, 242, 243, 244, 245, 246, 247, 138, 248, 137, 249, 254, 255, 256, 140, 257, 141, 258, 259, 260, 261, 142, 262, 139, 263, 67, 250, 143, 68, 184 }
  uselistorder i32* @r1, { 46, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 1, 98, 99, 23, 24, 26, 25, 6, 7, 100, 0, 101, 35, 36, 19, 103, 63, 68, 69, 72, 70, 71, 64, 65, 66, 67, 62, 73, 102, 11, 5, 47, 27, 74, 28, 3, 75, 29, 30, 37, 38, 12, 8, 9, 10, 14, 13, 18, 76, 15, 16, 17, 20, 21, 22, 31, 32, 33, 4, 34, 77, 78, 2, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 79, 80 }
  uselistorder label %dec_label_pc_14100, { 1, 0, 3, 2, 4 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_14074, { 1, 0 }
}

define i32 @function_1410c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1410c:
  %v3_1410c = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_14114 = call i32 @function_119b8()
  %v0_14118 = load i32, i32* @r4, align 4
  store i32 %v3_1410c, i32* @r4, align 4
  %v2_14120 = call i32 @function_11a60(i32 %v0_14114, i32 %v0_14118)
  ret i32 %v2_14120

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_11a60, { 5, 7, 4, 3, 2, 1, 6, 0 }
  uselistorder i32 ()* @function_119b8, { 0, 2, 1 }
}

define i32 @function_14124(i32 %arg1) local_unnamed_addr {
dec_label_pc_14124:
  %v1_14124 = add i32 %arg1, 28
  %v2_14124 = inttoptr i32 %v1_14124 to i32*
  %v3_14124 = load i32, i32* %v2_14124, align 4
  %v1_1412c = add i32 %arg1, 44
  %v2_1412c = inttoptr i32 %v1_1412c to i32*
  %v3_1412c = load i32, i32* %v2_1412c, align 4
  store i32 %v3_14124, i32* @global_var_1cb00.464, align 4
  store i32 %v3_1412c, i32* @global_var_1cb04.466, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 11, 0, 3, 4, 1, 2, 9, 10, 5, 6, 7, 8 }
  uselistorder i32 28, { 35, 0, 25, 26, 9, 10, 34, 1, 4, 19, 11, 12, 13, 14, 15, 16, 3, 17, 18, 2, 5, 20, 6, 21, 7, 22, 8, 24, 23, 27, 28, 29, 30, 31, 32, 33 }
}

define i32 @function_14148(i32* %arg1) local_unnamed_addr {
dec_label_pc_14148:
  %tmp = ptrtoint i32* %arg1 to i32
  %v2_14150 = call i32 @brk(i32* %arg1)
  %v3_14154 = icmp ult i32 %v2_14150, %tmp
  store i32 %v2_14150, i32* @global_var_1c938.461, align 4
  br i1 %v3_14154, label %dec_label_pc_14168, label %dec_label_pc_14178

dec_label_pc_14168:                               ; preds = %dec_label_pc_14148
  %v0_14168 = call i32 @function_11f08()
  %v2_14170 = inttoptr i32 %v0_14168 to i32*
  store i32 12, i32* %v2_14170, align 4
  br label %dec_label_pc_14178

dec_label_pc_14178:                               ; preds = %dec_label_pc_14148, %dec_label_pc_14168
  %v0_14178 = phi i32 [ 0, %dec_label_pc_14148 ], [ -1, %dec_label_pc_14168 ]
  ret i32 %v0_14178

; uselistorder directives
  uselistorder i32 12, { 18, 10, 123, 124, 125, 127, 128, 129, 130, 11, 126, 131, 132, 133, 134, 135, 136, 137, 70, 71, 34, 35, 72, 19, 20, 113, 114, 115, 0, 110, 116, 7, 117, 8, 111, 4, 112, 21, 22, 5, 73, 74, 23, 75, 76, 24, 12, 25, 13, 26, 14, 39, 40, 51, 54, 48, 55, 41, 36, 37, 38, 42, 27, 43, 28, 44, 29, 45, 46, 47, 49, 52, 53, 50, 56, 57, 58, 9, 59, 60, 61, 63, 64, 65, 33, 30, 66, 68, 67, 62, 6, 69, 118, 77, 15, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 31, 89, 90, 91, 92, 93, 32, 94, 95, 96, 97, 98, 99, 16, 100, 101, 102, 103, 104, 105, 17, 106, 107, 108, 109, 119, 120, 121, 122, 1, 2, 3 }
  uselistorder i32 ()* @function_11f08, { 21, 57, 33, 42, 9, 8, 7, 6, 41, 40, 39, 5, 58, 32, 31, 24, 23, 19, 20, 56, 55, 18, 17, 16, 14, 27, 54, 22, 53, 52, 13, 12, 51, 38, 37, 36, 50, 26, 4, 3, 49, 43, 35, 28, 48, 2, 11, 47, 30, 10, 29, 15, 1, 0, 46, 45, 44, 25, 34 }
  uselistorder i32* @global_var_1c938.461, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_14178, { 1, 0 }
}

define i32 @function_14184(i32 %arg1) local_unnamed_addr {
dec_label_pc_14184:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14188 = load i32, i32* @global_var_1c708.424, align 4
  %v7_1418c = icmp eq i32 %v3_14188, -1
  %v3_14190 = load i32, i32* @r4, align 4
  store i32 %v3_14190, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1c708.424 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_1418c, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_14184
  store i32 %v3_14190, i32* %r4.global-to-local, align 4
  %v9_14198 = load i32, i32* @r0, align 4
  ret i32 %v9_14198

.preheader:                                       ; preds = %dec_label_pc_14184, %.preheader
  %v0_141a0 = phi i32 [ %v3_141a4, %.preheader ], [ %v3_14188, %dec_label_pc_14184 ]
  call void @__pseudo_branch(i32 %v0_141a0)
  %v0_141a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_141a4 = add i32 %v0_141a4, -4
  %v2_141a4 = inttoptr i32 %v1_141a4 to i32*
  %v3_141a4 = load i32, i32* %v2_141a4, align 4
  store i32 %v1_141a4, i32* %r4.global-to-local, align 4
  %v3_141a8 = icmp eq i32 %v3_141a4, -1
  br i1 %v3_141a8, label %dec_label_pc_141b0, label %.preheader

dec_label_pc_141b0:                               ; preds = %.preheader
  %v2_141b0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_141b0, i32* %r4.global-to-local, align 4
  %v8_141b0 = load i32, i32* @r0, align 4
  ret i32 %v8_141b0

; uselistorder directives
  uselistorder i32 %v3_141a4, { 1, 0 }
  uselistorder i32 %v3_14188, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 45, 16, 46, 47, 48, 3, 17, 18, 19, 49, 50, 51, 4, 20, 21, 22, 52, 53, 54, 5, 23, 24, 55, 15, 14, 56, 57, 58, 13, 12, 11, 10, 25, 26, 27, 28, 29, 0, 30, 1, 31, 2, 59, 9, 32, 36, 37, 43, 38, 33, 34, 39, 40, 41, 42, 44, 8, 7, 35, 6 }
  uselistorder i32 -1, { 161, 0, 101, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 162, 102, 245, 103, 284, 104, 273, 267, 105, 306, 106, 307, 107, 308, 108, 309, 149, 99, 268, 269, 109, 270, 271, 110, 310, 1, 163, 2, 111, 274, 275, 164, 165, 264, 265, 150, 166, 151, 167, 3, 4, 98, 89, 90, 168, 169, 170, 96, 246, 171, 247, 5, 6, 112, 285, 113, 286, 114, 287, 115, 281, 116, 279, 117, 248, 118, 266, 119, 249, 120, 250, 121, 282, 122, 283, 123, 251, 124, 172, 160, 125, 173, 126, 252, 127, 280, 128, 311, 312, 129, 253, 130, 263, 131, 272, 132, 278, 133, 254, 134, 313, 135, 289, 136, 255, 137, 276, 138, 290, 139, 277, 140, 288, 141, 314, 100, 315, 174, 175, 176, 177, 178, 179, 180, 181, 7, 8, 9, 142, 143, 10, 182, 16, 183, 256, 257, 11, 184, 239, 145, 240, 15, 185, 186, 187, 242, 243, 188, 189, 190, 191, 192, 193, 194, 195, 196, 152, 241, 17, 197, 91, 18, 198, 199, 19, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 244, 13, 214, 12, 215, 216, 14, 217, 218, 219, 20, 220, 221, 144, 258, 222, 21, 223, 224, 92, 22, 23, 225, 97, 24, 25, 26, 27, 28, 146, 226, 31, 153, 259, 30, 155, 260, 29, 154, 261, 32, 33, 156, 262, 34, 35, 36, 37, 38, 227, 39, 93, 40, 41, 228, 42, 148, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 94, 53, 54, 55, 56, 57, 58, 59, 229, 60, 147, 61, 62, 63, 230, 64, 65, 66, 67, 231, 68, 69, 70, 232, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 233, 83, 84, 85, 234, 86, 87, 235, 236, 237, 238, 88, 95, 157, 158, 159 }
  uselistorder i32* @global_var_1c708.424, { 1, 0 }
  uselistorder i32 1, {}
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_141b8() local_unnamed_addr {
dec_label_pc_141b8:
  %v5_141bc = load i32, i32* @r0, align 4
  ret i32 %v5_141bc

; uselistorder directives
  uselistorder i32* @r0, { 5, 12, 13, 118, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 79, 80, 82, 81, 29, 165, 166, 36, 37, 38, 39, 21, 6, 15, 16, 111, 112, 30, 167, 168, 66, 170, 26, 9, 129, 22, 128, 125, 34, 127, 8, 126, 130, 169, 44, 17, 83, 84, 85, 86, 32, 20, 87, 88, 89, 90, 19, 171, 23, 25, 45, 14, 131, 18, 132, 133, 24, 91, 134, 10, 92, 11, 93, 94, 0, 40, 46, 47, 41, 42, 43, 48, 51, 52, 53, 54, 55, 1, 49, 50, 63, 64, 65, 56, 57, 58, 59, 60, 61, 62, 67, 68, 69, 70, 71, 72, 73, 74, 31, 75, 76, 77, 78, 95, 96, 97, 98, 99, 100, 101, 3, 102, 103, 104, 105, 106, 107, 108, 33, 109, 135, 136, 2, 113, 114, 115, 116, 117, 119, 121, 122, 123, 124, 137, 138, 120, 110, 7, 4, 27, 28, 35 }
}

define i32 @function_141c0() local_unnamed_addr {
entry:
  %v3_141c4 = load i32, i32* @r4, align 4
  %v0_141cc = call i32 @function_80b0()
  call void @__pseudo_branch(i32 %v3_141c4)
  ret i32 %v0_141cc

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 0, 7, 12, 13, 9, 10, 11, 14, 2, 5, 6, 3, 4, 1, 8 }
  uselistorder i32 0, { 119, 0, 846, 847, 848, 849, 121, 120, 850, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1007, 1008, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 39, 1027, 1028, 1029, 1030, 1031, 40, 1032, 1033, 1034, 41, 1035, 1036, 1037, 42, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1053, 1054, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 43, 1073, 1074, 1075, 1076, 1077, 44, 1078, 1079, 1080, 1081, 1082, 45, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 698, 699, 274, 700, 275, 566, 940, 941, 942, 943, 755, 701, 702, 1096, 1097, 1098, 1099, 276, 703, 1, 704, 705, 706, 1100, 1101, 1102, 122, 1103, 73, 1104, 71, 72, 1105, 1106, 1107, 277, 1111, 278, 1122, 1124, 510, 218, 1125, 279, 1123, 280, 281, 2, 1108, 1109, 123, 756, 234, 757, 284, 236, 235, 758, 759, 760, 761, 283, 763, 764, 282, 765, 1110, 679, 680, 681, 682, 683, 684, 125, 89, 685, 74, 124, 126, 286, 1112, 287, 237, 1113, 1114, 1116, 1117, 285, 946, 948, 949, 49, 219, 950, 947, 944, 945, 3, 928, 931, 929, 930, 220, 4, 953, 951, 952, 221, 127, 932, 933, 934, 938, 935, 936, 288, 5, 937, 6, 960, 961, 128, 954, 955, 956, 957, 958, 959, 7, 8, 762, 567, 568, 569, 289, 9, 290, 962, 963, 506, 964, 507, 910, 892, 570, 686, 571, 572, 911, 912, 573, 851, 1126, 1127, 64, 707, 291, 708, 709, 710, 711, 292, 712, 713, 714, 715, 716, 717, 718, 574, 893, 1115, 575, 658, 719, 769, 576, 508, 1118, 77, 1119, 1000, 577, 766, 1001, 767, 965, 1120, 1121, 10, 578, 90, 579, 580, 215, 214, 511, 78, 79, 80, 81, 521, 512, 51, 50, 91, 581, 582, 583, 584, 586, 585, 11, 966, 967, 217, 216, 513, 82, 83, 84, 85, 522, 514, 53, 52, 48, 61, 968, 523, 969, 970, 971, 86, 972, 973, 974, 975, 976, 129, 515, 524, 516, 517, 977, 525, 99, 130, 720, 721, 87, 722, 723, 268, 54, 131, 293, 587, 75, 724, 725, 979, 978, 980, 981, 46, 132, 982, 135, 134, 133, 269, 270, 271, 137, 136, 138, 294, 726, 727, 139, 983, 984, 100, 140, 728, 141, 588, 142, 799, 800, 143, 770, 771, 544, 518, 594, 589, 92, 590, 591, 545, 546, 556, 538, 526, 299, 539, 540, 527, 301, 541, 542, 528, 300, 543, 562, 563, 547, 548, 144, 145, 549, 550, 551, 552, 529, 298, 553, 554, 530, 297, 555, 557, 531, 296, 558, 565, 532, 295, 559, 564, 560, 68, 55, 101, 102, 561, 509, 592, 302, 593, 223, 595, 303, 596, 599, 600, 147, 222, 597, 598, 304, 305, 601, 602, 238, 603, 604, 605, 606, 607, 608, 533, 609, 610, 65, 306, 612, 613, 614, 615, 616, 617, 618, 231, 230, 619, 307, 620, 621, 88, 622, 623, 103, 624, 520, 625, 626, 627, 628, 629, 630, 519, 631, 632, 633, 146, 308, 309, 636, 637, 638, 639, 640, 148, 634, 149, 635, 12, 150, 611, 659, 660, 661, 70, 56, 662, 69, 57, 663, 664, 665, 666, 667, 668, 310, 669, 670, 672, 151, 671, 66, 673, 14, 13, 674, 772, 773, 641, 642, 311, 643, 645, 152, 646, 647, 648, 649, 650, 651, 652, 239, 312, 653, 67, 313, 654, 644, 15, 655, 232, 656, 314, 657, 675, 676, 677, 678, 315, 694, 272, 156, 155, 534, 535, 273, 154, 153, 225, 229, 316, 687, 688, 689, 690, 691, 692, 693, 224, 695, 696, 58, 697, 157, 158, 317, 76, 729, 730, 731, 732, 228, 733, 734, 735, 227, 736, 737, 738, 739, 95, 740, 742, 741, 93, 94, 159, 226, 318, 743, 242, 240, 241, 96, 160, 62, 161, 774, 107, 106, 104, 105, 775, 776, 63, 777, 778, 779, 780, 781, 162, 782, 783, 319, 784, 785, 786, 787, 166, 163, 164, 165, 788, 789, 790, 791, 320, 792, 793, 245, 795, 244, 796, 243, 797, 321, 798, 801, 802, 110, 108, 109, 16, 803, 804, 805, 806, 167, 807, 808, 247, 246, 809, 322, 810, 811, 812, 813, 814, 114, 111, 112, 113, 17, 815, 816, 817, 168, 818, 169, 819, 820, 250, 821, 249, 822, 248, 823, 323, 824, 174, 325, 172, 173, 170, 171, 825, 176, 175, 826, 177, 324, 828, 829, 118, 115, 116, 117, 18, 827, 830, 831, 832, 833, 834, 835, 19, 20, 21, 22, 23, 836, 837, 178, 252, 838, 326, 839, 327, 840, 328, 841, 329, 842, 330, 843, 331, 844, 251, 845, 179, 180, 181, 853, 854, 852, 856, 857, 855, 24, 25, 26, 27, 28, 858, 182, 859, 860, 254, 861, 332, 864, 333, 865, 334, 866, 335, 867, 336, 868, 337, 869, 253, 870, 338, 871, 184, 183, 185, 873, 874, 872, 875, 876, 59, 878, 879, 880, 881, 339, 882, 29, 30, 31, 32, 33, 877, 186, 97, 883, 884, 259, 885, 258, 886, 257, 887, 255, 888, 256, 889, 340, 890, 341, 891, 188, 187, 189, 895, 896, 894, 897, 898, 60, 900, 901, 902, 903, 342, 904, 34, 35, 36, 37, 38, 899, 190, 98, 905, 906, 261, 907, 260, 908, 343, 909, 195, 345, 193, 194, 191, 192, 913, 197, 196, 914, 346, 198, 344, 199, 202, 201, 200, 917, 918, 916, 915, 347, 920, 919, 921, 203, 922, 923, 264, 924, 263, 925, 262, 926, 348, 927, 204, 207, 206, 205, 987, 988, 986, 985, 990, 989, 991, 992, 208, 267, 993, 266, 994, 265, 995, 349, 998, 233, 939, 996, 209, 997, 862, 210, 863, 744, 211, 745, 746, 747, 212, 350, 748, 749, 47, 750, 751, 752, 753, 754, 351, 768, 213, 794, 999, 536, 537, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142 }
  uselistorder i32* @r4, {}
}

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @accept(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @fstat(i32, %stat*) local_unnamed_addr

declare i32 @getdents64(i32, %linux_dirent64*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @times(%tms*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i16 @__decompiler_undefined_function_2() local_unnamed_addr

declare i8* @__decompiler_undefined_function_3() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
