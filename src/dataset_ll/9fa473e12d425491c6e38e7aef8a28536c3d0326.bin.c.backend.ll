source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_dad0.14 = constant i32 -382906384
@global_var_1f250.19 = global i32 0
@global_var_82dc.20 = constant i32 -352321547
@global_var_130a8.21 = constant i32 -382909968
@global_var_bd54.27 = constant i32 -382906384
@global_var_c18c.29 = constant i32 -382906384
@global_var_b5c8.31 = constant i32 -382906384
@global_var_af1c.33 = constant i32 -382906384
@global_var_a824.35 = constant i32 -382906384
@global_var_a070.37 = constant i32 -382906384
@global_var_9000.40 = constant i32 -382906384
@global_var_896c.42 = constant i32 -382906384
@global_var_961c.44 = constant i32 -382906384
@global_var_212d8.46 = global i32 0
@global_var_212e0.58 = global i32 0
@global_var_1697c.60 = constant i32 47
@global_var_1f254.63 = global i32 0
@global_var_212dc.65 = global i32 0
@global_var_113ac.67 = constant i32 -382910336
@global_var_d45c.68 = constant i32 -509607932
@global_var_d95c.70 = constant i32 -382910352
@global_var_d9dc.75 = constant i32 135908
@global_var_212e8.77 = local_unnamed_addr global i32 0
@global_var_212e6.78 = local_unnamed_addr global i32 0
@global_var_1f258.80 = global i32 0
@global_var_16980.88 = constant i32 10
@global_var_115e0.94 = constant i32 -382910336
@global_var_16984.98 = constant i32 16777216
@global_var_1f260.100 = global i32 0
@global_var_1f26c.102 = global i32 0
@global_var_1f264.104 = global i32 0
@global_var_1f268.106 = global i32 0
@global_var_e954.119 = constant i32 -509607925
@global_var_212fc.121 = global i32 0
@global_var_1f2a4.123 = global i32 0
@global_var_1f270.125 = global i32 0
@global_var_1f29c.127 = global i32 0
@global_var_212f4.134 = global i32 0
@global_var_212f8.136 = global i32 0
@global_var_1f276.139 = local_unnamed_addr global i32 0
@global_var_1f288.141 = global i32 0
@global_var_1f278.143 = local_unnamed_addr global i32 0
@global_var_1f27c.144 = local_unnamed_addr global i32 0
@global_var_1f27d.145 = local_unnamed_addr global i32 0
@global_var_1f296.148 = local_unnamed_addr global i32 0
@global_var_1698c.150 = constant [5 x i8] c"&;; \00"
@global_var_16990.152 = constant i32 0
@global_var_16994.154 = constant [5 x i8] c"5:?;\00"
@global_var_1699c.156 = constant [9 x i8] c"<!: acam\00"
@global_var_169a8.158 = constant [8 x i8] c"0125!8 \00"
@global_var_169b0.160 = constant [9 x i8] c"$5''#;&0\00"
@global_var_169bc.162 = constant [6 x i8] c"509=:\00"
@global_var_169c4.164 = constant [6 x i8] c"\22=.,\22\00"
@global_var_169cc.166 = constant [8 x i8] c"'!$$;& \00"
@global_var_169d4.168 = constant i32 423502179
@global_var_169e4.170 = constant [6 x i8] c"efg`a\00"
@global_var_169ec.172 = constant [5 x i8] c"!'1&\00"
@global_var_169f4.174 = constant i32 943467547
@global_var_16a00.176 = constant i32 322070023
@global_var_16a0c.178 = constant [5 x i8] c"efg`\00"
@global_var_1f280.179 = local_unnamed_addr global i32 0
@global_var_1f27e.180 = local_unnamed_addr global i32 0
@global_var_1f284.181 = local_unnamed_addr global i32 0
@global_var_1f28c.183 = local_unnamed_addr global i32 0
@global_var_1f298.184 = local_unnamed_addr global i32 0
@global_var_ea64.186 = constant i32 -382910352
@global_var_16a14.188 = constant [3 x i8] c"\0D\0A\00"
@global_var_16a20.190 = constant i32 2096127
@global_var_16a17.192 = constant i32 2095871
@global_var_21304.197 = global i32 0
@global_var_16a24.204 = constant i32 58965
@global_var_2130c.205 = local_unnamed_addr global i32 0
@global_var_21310.206 = local_unnamed_addr global i32 0
@global_var_16a28.208 = constant [13 x i8] c"&;; 91z78!6T\00"
@global_var_21314.209 = local_unnamed_addr global i32 0
@global_var_21318.210 = local_unnamed_addr global i32 0
@global_var_16a38.212 = constant [13 x i8] c"'1:$5=z'= 1T\00"
@global_var_2131c.213 = local_unnamed_addr global i32 0
@global_var_21320.214 = local_unnamed_addr global i32 0
@global_var_16a48.216 = constant i32 28654
@global_var_21324.217 = local_unnamed_addr global i32 0
@global_var_21328.218 = local_unnamed_addr global i32 0
@global_var_16a4c.220 = constant [37 x i8] c"&;; t'1:$5=t>!' t=:217 10t-;!&t'<= T\00"
@global_var_2132c.221 = local_unnamed_addr global i32 0
@global_var_21330.222 = local_unnamed_addr global i32 0
@global_var_16a74.224 = constant [7 x i8] c"'<188T\00"
@global_var_21338.225 = local_unnamed_addr global i32 0
@global_var_21334.226 = local_unnamed_addr global i32 0
@global_var_16a7c.228 = constant [8 x i8] c"1:5681T\00"
@global_var_2133c.229 = local_unnamed_addr global i32 0
@global_var_21340.230 = local_unnamed_addr global i32 0
@global_var_16a84.232 = constant [8 x i8] c"'-' 19T\00"
@global_var_21344.233 = local_unnamed_addr global i32 0
@global_var_21348.234 = local_unnamed_addr global i32 0
@global_var_16a8c.236 = constant [4 x i8] c"'<T\00"
@global_var_2134c.237 = local_unnamed_addr global i32 0
@global_var_21350.238 = local_unnamed_addr global i32 0
@global_var_16a90.240 = constant i32 977090171
@global_var_21354.241 = local_unnamed_addr global i32 0
@global_var_21358.242 = local_unnamed_addr global i32 0
@global_var_16aa4.244 = constant i32 102440217
@global_var_21360.245 = local_unnamed_addr global i32 0
@global_var_2135c.246 = local_unnamed_addr global i32 0
@global_var_16ac0.248 = constant [10 x i8] c":7;&&17 T\00"
@global_var_21364.249 = local_unnamed_addr global i32 0
@global_var_21368.250 = local_unnamed_addr global i32 0
@global_var_16acc.252 = constant [17 x i8] c"{6=:{6!'-6;,t$'T\00"
@global_var_2136c.253 = local_unnamed_addr global i32 0
@global_var_21370.254 = local_unnamed_addr global i32 0
@global_var_16ae0.256 = constant [23 x i8] c"{6=:{6!'-6;,t?=88tymtT\00"
@global_var_21378.257 = local_unnamed_addr global i32 0
@global_var_21374.258 = local_unnamed_addr global i32 0
@global_var_16af8.260 = constant [8 x i8] c"{$&;7{T\00"
@global_var_2137c.261 = local_unnamed_addr global i32 0
@global_var_21380.262 = local_unnamed_addr global i32 0
@global_var_16b00.264 = constant [6 x i8] c"{1,1T\00"
@global_var_21384.265 = local_unnamed_addr global i32 0
@global_var_21388.266 = local_unnamed_addr global i32 0
@global_var_16b08.268 = constant [5 x i8] c"{20T\00"
@global_var_21390.269 = local_unnamed_addr global i32 0
@global_var_2138c.270 = local_unnamed_addr global i32 0
@global_var_16b10.272 = constant [7 x i8] c"{95$'T\00"
@global_var_21394.273 = local_unnamed_addr global i32 0
@global_var_21398.274 = local_unnamed_addr global i32 0
@global_var_16b18.276 = constant [15 x i8] c"{$&;7{:1 { 7$T\00"
@global_var_2139c.277 = local_unnamed_addr global i32 0
@global_var_213a0.278 = local_unnamed_addr global i32 0
@global_var_16b28.280 = constant [9 x i8] c"{' 5 !'T\00"
@global_var_21414.281 = local_unnamed_addr global i32 0
@global_var_16b34.283 = constant [8 x i8] c"z5:=91T\00"
@global_var_2141c.284 = local_unnamed_addr global i32 0
@global_var_16b3c.286 = constant [17 x i8] c"{$&;7{:1 {&;! 1T\00"
@global_var_213a4.287 = local_unnamed_addr global i32 0
@global_var_213a8.288 = local_unnamed_addr global i32 0
@global_var_16b50.290 = constant [24 x i8] c"3e567`09;ga<:$f8=1d?>2T\00"
@global_var_213ac.291 = local_unnamed_addr global i32 0
@global_var_213b0.292 = local_unnamed_addr global i32 0
@global_var_16b68.294 = constant [9 x i8] c"5''#;&0T\00"
@global_var_213b4.295 = local_unnamed_addr global i32 0
@global_var_213b8.296 = local_unnamed_addr global i32 0
@global_var_16b74.298 = constant [15 x i8] c"{01\22{#5 7<0;3T\00"
@global_var_213bc.299 = local_unnamed_addr global i32 0
@global_var_213c0.300 = local_unnamed_addr global i32 0
@global_var_16b84.302 = constant [20 x i8] c"{01\22{9='7{#5 7<0;3T\00"
@global_var_213c4.303 = local_unnamed_addr global i32 0
@global_var_213c8.304 = local_unnamed_addr global i32 0
@global_var_16b98.306 = constant [11 x i8] c"0\22&<18$1&T\00"
@global_var_21424.307 = local_unnamed_addr global i32 0
@global_var_16bfc.309 = constant i32 557516544
@global_var_213d0.310 = local_unnamed_addr global i32 0
@global_var_213cc.311 = local_unnamed_addr global i32 0
@global_var_16ba4.313 = constant [18 x i8] c"{1 7{&1';8\22z7;:2T\00"
@global_var_213d4.314 = local_unnamed_addr global i32 0
@global_var_213d8.315 = local_unnamed_addr global i32 0
@global_var_16bb8.317 = constant [13 x i8] c":591'1&\221&tT\00"
@global_var_213dc.318 = local_unnamed_addr global i32 0
@global_var_213e0.319 = local_unnamed_addr global i32 0
@global_var_213e4.320 = local_unnamed_addr global i32 0
@global_var_213e8.321 = local_unnamed_addr global i32 0
@global_var_213ec.322 = local_unnamed_addr global i32 0
@global_var_213f0.323 = local_unnamed_addr global i32 0
@global_var_16bc8.325 = constant [9 x i8] c"$662*7!E\00"
@global_var_213f4.326 = local_unnamed_addr global i32 0
@global_var_213f8.327 = local_unnamed_addr global i32 0
@global_var_16bd4.329 = constant [6 x i8] c";3=:T\00"
@global_var_21400.330 = local_unnamed_addr global i32 0
@global_var_213fc.331 = local_unnamed_addr global i32 0
@global_var_16bdc.333 = constant [7 x i8] c"1: 1&T\00"
@global_var_21404.334 = local_unnamed_addr global i32 0
@global_var_16be4.336 = constant [24 x i8] c"e365`70;9ag:<$ef1=d?2>T\00"
@global_var_2140c.337 = local_unnamed_addr global i32 0
@global_var_116a4.343 = constant i32 -443088884
@global_var_1f2c4.360 = global i32 0
@global_var_11adc.362 = constant i32 -456978431
@global_var_2142c.375 = global i32 0
@global_var_12098.381 = constant i32 -478871519
@global_var_12b18.395 = constant i32 -478805983
@global_var_12ef4.404 = constant i32 -382906384
@global_var_bd18.407 = constant [3 x i8] c"_\09\00"
@global_var_1f2a8.413 = local_unnamed_addr global i32 0
@global_var_1497c.415 = constant i32 -509591552
@global_var_1f2ac.424 = local_unnamed_addr global i32 0
@global_var_153b0.427 = constant i32 -382909968
@global_var_13754.428 = constant i32 -494075872
@global_var_115a8.429 = constant i32 -382910336
@global_var_16c2c.433 = constant [11 x i8] c"/proc/stat\00"
@global_var_16c38.436 = constant i32 32
@global_var_16c3c.439 = constant [14 x i8] c"/proc/cpuinfo\00"
@global_var_16c4c.441 = constant [10 x i8] c"processor\00"
@global_var_16c70.443 = constant i32 604672
@global_var_13914.446 = constant i32 -369098421
@global_var_1f2bc.459 = local_unnamed_addr global i32 0
@global_var_1f2c0.461 = local_unnamed_addr global i32 0
@global_var_b058.463 = constant i32 -443744204
@global_var_16c74.465 = constant [10 x i8] c"/dev/null\00"
@global_var_13324.466 = constant i32 -442543860
@global_var_15314.471 = constant i32 -382910352
@global_var_11b10.476 = constant i32 -369094618
@global_var_142e0.489 = constant i32 -335545128
@global_var_147a8.495 = constant i32 -382909456
@global_var_212d4.498 = local_unnamed_addr global i32 0
@global_var_16c54.506 = constant i32 114
@global_var_157d4.511 = constant i32 -382906384
@global_var_20003.520 = global i32 0
@global_var_20000.521 = global i32 0
@global_var_152b4.531 = constant i32 -509607926
@global_var_16f80.536 = constant i32 0
@global_var_16768.537 = constant i32 -382909968
@global_var_155f8.547 = constant i32 -509607928
@global_var_8be0.577 = constant [3 x i8] c"]'\00"
@global_var_1f230.2 = external global i8*
@global_var_1f24c.17 = external global i8*
@global_var_1f24d.25 = global i8 0
@1 = internal constant [4 x i8] c"\90\F0\01\00"
@global_var_212e4.76 = global i16* null
@global_var_1f25c.92 = external global i8*
@global_var_1f2a0.129 = global i16* null
@global_var_1f274.138 = external global i8*
@global_var_1f294.142 = local_unnamed_addr global i8 0
@global_var_1f28a.146 = local_unnamed_addr global i16 0
@global_var_1f295.147 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_8098)
  %v31_80a0 = load i32, i32* @r0, align 4
  ret i32 %v31_80a0
}

define i32 @function_80b0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i8** @global_var_1f230.2 to i32), i32* %r4.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1f230.2 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %dec_label_pc_80c4, label %dec_label_pc_80e0

dec_label_pc_80c4:                                ; preds = %entry
  store i1 true, i1* @cpsr_z, align 1
  %v3_80d4 = call i32 @function_80ec()
  store i32 %v3_80d4, i32* @r0, align 4
  %v2_80dc = load i32, i32* %r4.global-to-local, align 4
  %v3_80dc = inttoptr i32 %v2_80dc to i8*
  store i8 1, i8* %v3_80dc, align 1
  %v2_80e0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_80e0

dec_label_pc_80e0:                                ; preds = %entry, %dec_label_pc_80c4
  %v2_80e0 = phi i32 [ %v3_80b0, %entry ], [ %v2_80e0.pre, %dec_label_pc_80c4 ]
  store i32 %v2_80e0, i32* %r4.global-to-local, align 4
  %v1_80e4 = load i32, i32* @r0, align 4
  ret i32 %v1_80e4

; uselistorder directives
  uselistorder i8** @global_var_1f230.2, { 1, 0 }
  uselistorder label %dec_label_pc_80e0, { 1, 0 }
}

define i32 @function_80ec() local_unnamed_addr {
dec_label_pc_80ec:
  %v0_80f0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_80f0, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_80ec
  %v1_80f0 = load i32, i32* @r1, align 4
  %v2_80f0 = load i32, i32* @r0, align 4
  %v3_80f0 = and i32 %v2_80f0, %v1_80f0
  call void @__pseudo_branch(i32 %v3_80f0)
  br label %bb3

bb3:                                              ; preds = %bb, %dec_label_pc_80ec
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_8118 = load i32, i32* inttoptr (i32 126988 to i32*), align 4
  %v2_811c = icmp eq i32 %v2_8118, 0
  br i1 %v2_811c, label %dec_label_pc_8134, label %dec_label_pc_8124

dec_label_pc_8124:                                ; preds = %bb3
  call void @__pseudo_cond_branch(i1 false, i32 0)
  br label %dec_label_pc_8134

dec_label_pc_8134:                                ; preds = %bb3, %dec_label_pc_8124
  ret i32 126988

; uselistorder directives
  uselistorder label %dec_label_pc_8134, { 1, 0 }
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_815c = ptrtoint i32* %stack_var_4 to i32
  %v8_817c = call i32 @function_14050(i32 ptrtoint (i32* @global_var_dad0.14 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 92524, i32 %arg1, i32 %v4_815c)
  %v0_8180 = call i32 @function_13324()
  ret i32 %v0_8180
}

define i32 @function_8190(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8190:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_8190 = icmp eq i32 %arg1, 0
  br i1 %v2_8190, label %dec_label_pc_81d8, label %dec_label_pc_81a0

dec_label_pc_81a0:                                ; preds = %dec_label_pc_8190
  %v0_81a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_81a0 = add i32 %v0_81a0, 4
  %v2_81a0 = inttoptr i32 %v1_81a0 to i8*
  %v3_81a0 = load i8, i8* %v2_81a0, align 1
  %v4_81a0 = zext i8 %v3_81a0 to i32
  %v9_81a4 = icmp eq i32 %v4_81a0, %arg3
  br i1 %v9_81a4, label %dec_label_pc_81e4, label %dec_label_pc_81c8.preheader

dec_label_pc_81c8.preheader:                      ; preds = %dec_label_pc_81a0
  br label %dec_label_pc_81c8

dec_label_pc_81b8:                                ; preds = %dec_label_pc_81c8
  %v1_81b8 = add i32 %v0_81c0.in, 12
  %v2_81b8 = inttoptr i32 %v1_81b8 to i8*
  %v3_81b8 = load i8, i8* %v2_81b8, align 1
  %v4_81b8 = zext i8 %v3_81b8 to i32
  %v9_81bc = icmp eq i32 %v4_81b8, %arg3
  br i1 %v9_81bc, label %dec_label_pc_81e4, label %dec_label_pc_81c8

dec_label_pc_81c8:                                ; preds = %dec_label_pc_81c8.preheader, %dec_label_pc_81b8
  %v0_81c0.in = phi i32 [ %v0_81a0, %dec_label_pc_81c8.preheader ], [ %v0_81c0, %dec_label_pc_81b8 ]
  %v0_81c8 = phi i32 [ 0, %dec_label_pc_81c8.preheader ], [ %v1_81c8, %dec_label_pc_81b8 ]
  %v0_81c0 = add i32 %v0_81c0.in, 8
  %v1_81c8 = add i32 %v0_81c8, 1
  %v9_81cc = icmp eq i32 %v1_81c8, %arg1
  store i32 %v0_81c0, i32* %r1.global-to-local, align 4
  br i1 %v9_81cc, label %dec_label_pc_81d8, label %dec_label_pc_81b8

dec_label_pc_81d8:                                ; preds = %dec_label_pc_81c8, %dec_label_pc_8190, %dec_label_pc_81e4
  %v0_81d8 = phi i32 [ %arg4, %dec_label_pc_8190 ], [ %v2_81e4, %dec_label_pc_81e4 ], [ %arg4, %dec_label_pc_81c8 ]
  ret i32 %v0_81d8

dec_label_pc_81e4:                                ; preds = %dec_label_pc_81b8, %dec_label_pc_81a0
  %v0_81e4 = phi i32 [ %v0_81a0, %dec_label_pc_81a0 ], [ %v0_81c0, %dec_label_pc_81b8 ]
  %v1_81e4 = inttoptr i32 %v0_81e4 to i32*
  %v2_81e4 = load i32, i32* %v1_81e4, align 4
  br label %dec_label_pc_81d8

; uselistorder directives
  uselistorder i32 %v1_81c8, { 1, 0 }
  uselistorder i32 %v0_81c0, { 1, 0, 2 }
  uselistorder i32 %v0_81c0.in, { 1, 0 }
  uselistorder i32 %v0_81a0, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_81d8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_81c8, { 1, 0 }
}

define i32 @function_81ec(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_81ec:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_81ec = load i32, i32* @r4, align 4
  store i32 %v3_81ec, i32* %stack_var_-32, align 4
  %v6_81ec = load i32, i32* @r5, align 4
  %v9_81ec = load i32, i32* @r6, align 4
  %v12_81ec = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* @r7, align 4
  %v0_8204 = call i32 @function_112d0()
  store i32 %v0_8204, i32* @r0, align 4
  %v7_8208 = icmp eq i32 %v0_8204, -1
  %tmp23 = icmp slt i32 %v0_8204, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_81ec
  br label %dec_label_pc_8228

bb24:                                             ; preds = %dec_label_pc_81ec
  %. = zext i1 %v7_8208 to i32
  store i32 %., i32* @r5, align 4
  %v2_8220 = icmp eq i1 %v7_8208, false
  br i1 %v2_8220, label %dec_label_pc_8230, label %dec_label_pc_8228

dec_label_pc_8228:                                ; preds = %.thread2, %bb24
  %v2_8228 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_8228, i32* @r4, align 4
  store i32 %v6_81ec, i32* @r5, align 4
  store i32 %v9_81ec, i32* @r6, align 4
  store i32 %v12_81ec, i32* @r7, align 4
  ret i32 %v0_8204

dec_label_pc_8230:                                ; preds = %bb24
  %v0_8230 = call i32 @function_112d0()
  %v7_8234 = icmp eq i32 %v0_8230, -1
  store i32 %v0_8230, i32* @r4, align 4
  br i1 %v7_8234, label %dec_label_pc_8264, label %dec_label_pc_8240

dec_label_pc_8240:                                ; preds = %dec_label_pc_8230
  %v2_8240 = icmp eq i32 %v0_8230, 0
  br i1 %v2_8240, label %dec_label_pc_8248, label %dec_label_pc_826c

dec_label_pc_8248:                                ; preds = %dec_label_pc_8240
  %v0_8248 = load i32, i32* @r6, align 4
  %v1_824c = call i32 @function_13700(i32 %v0_8248)
  store i32 %v1_824c, i32* @r0, align 4
  %v0_8250 = call i32 @function_111a4()
  %v2_8258 = call i32 @function_113ac(i32 %v0_8250, i32 9)
  %v0_825c = load i32, i32* @r4, align 4
  %v1_8260 = call i32 @function_13648(i32 %v0_825c)
  br label %dec_label_pc_8264

dec_label_pc_8264:                                ; preds = %dec_label_pc_8230, %dec_label_pc_8248
  %v0_8264 = load i32, i32* @r5, align 4
  %v1_8268 = call i32 @function_13648(i32 %v0_8264)
  br label %dec_label_pc_826c

dec_label_pc_826c:                                ; preds = %dec_label_pc_8240, %dec_label_pc_8264
  %v2_8270 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_8270 = zext i8 %v2_8270 to i32
  %v2_8274 = icmp eq i8 %v2_8270, 0
  br i1 %v2_8274, label %dec_label_pc_82b8, label %dec_label_pc_827c

dec_label_pc_827c:                                ; preds = %dec_label_pc_826c
  %v2_8280 = load i32, i32* @global_var_1f250.19, align 4
  %v1_8284 = inttoptr i32 %v2_8280 to i32*
  %v2_8284 = load i32, i32* %v1_8284, align 4
  %v1_8288 = add i32 %v2_8284, 4
  %v2_8288 = inttoptr i32 %v1_8288 to i8*
  %v3_8288 = load i8, i8* %v2_8288, align 1
  %v4_8288 = zext i8 %v3_8288 to i32
  %v1_828c = load i32, i32* @r7, align 4
  %v9_828c = icmp eq i32 %v4_8288, %v1_828c
  br i1 %v9_828c, label %dec_label_pc_82c0, label %dec_label_pc_82ac.preheader

dec_label_pc_82ac.preheader:                      ; preds = %dec_label_pc_827c
  %v1_8290 = load i32, i32* @r5, align 4
  br label %dec_label_pc_82ac

dec_label_pc_829c:                                ; preds = %dec_label_pc_82ac
  %v4_829c = mul i32 %v1_82ac, 4
  %v5_829c = add i32 %v4_829c, %v2_8280
  %v6_829c = inttoptr i32 %v5_829c to i32*
  %v7_829c = load i32, i32* %v6_829c, align 4
  %v1_82a0 = add i32 %v7_829c, 4
  %v2_82a0 = inttoptr i32 %v1_82a0 to i8*
  %v3_82a0 = load i8, i8* %v2_82a0, align 1
  %v4_82a0 = zext i8 %v3_82a0 to i32
  %v9_82a4 = icmp eq i32 %v4_82a0, %v1_828c
  br i1 %v9_82a4, label %dec_label_pc_82c0, label %dec_label_pc_82ac

dec_label_pc_82ac:                                ; preds = %dec_label_pc_82ac.preheader, %dec_label_pc_829c
  %v0_82ac = phi i32 [ %v1_8290, %dec_label_pc_82ac.preheader ], [ %v1_82ac, %dec_label_pc_829c ]
  %v1_82ac = add i32 %v0_82ac, 1
  %v9_82b0 = icmp eq i32 %v1_82ac, %v3_8270
  br i1 %v9_82b0, label %dec_label_pc_82b8, label %dec_label_pc_829c

dec_label_pc_82b8:                                ; preds = %dec_label_pc_82ac, %dec_label_pc_826c, %dec_label_pc_82c0
  %v1_82bc = call i32 @function_13648(i32 0)
  %v0_82d0.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_82c0

dec_label_pc_82c0:                                ; preds = %dec_label_pc_829c, %dec_label_pc_827c, %dec_label_pc_82b8
  %v0_82d0 = phi i32 [ %v2_8284, %dec_label_pc_827c ], [ %v0_82d0.pre, %dec_label_pc_82b8 ], [ %v7_829c, %dec_label_pc_829c ]
  %v1_82d0 = inttoptr i32 %v0_82d0 to i32*
  %v2_82d0 = load i32, i32* %v1_82d0, align 4
  call void @__pseudo_branch(i32 %v2_82d0)
  br label %dec_label_pc_82b8

; uselistorder directives
  uselistorder i32 %v1_82ac, { 2, 0, 1 }
  uselistorder i32 %v0_8230, { 1, 2, 0 }
  uselistorder i1 %v7_8208, { 1, 0 }
  uselistorder i32 %v0_8204, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_82c0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82b8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82ac, { 1, 0 }
  uselistorder label %dec_label_pc_826c, { 1, 0 }
  uselistorder label %dec_label_pc_8264, { 1, 0 }
  uselistorder label %dec_label_pc_8228, { 1, 0 }
}

define i32 @function_82e8(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_82e8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v9_82e8 = load i32, i32* @r6, align 4
  %v12_82e8 = load i32, i32* @r7, align 4
  %v18_82e8 = load i32, i32* @sb, align 4
  %v24_82e8 = load i32, i32* @fp, align 4
  %v2_82ec = icmp ugt i32 %arg2, 2
  %v7_82ec = icmp eq i32 %arg2, 3
  store i1 %v7_82ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r4, align 4
  %v0_82f8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_82f8, i32* @r5, align 4
  %v2_82fc = xor i1 %v7_82ec, true
  %v3_82fc = and i1 %v2_82ec, %v2_82fc
  br i1 %v3_82fc, label %dec_label_pc_830c, label %dec_label_pc_8300

dec_label_pc_8300:                                ; preds = %dec_label_pc_834c, %.dec_label_pc_8300_crit_edge, %dec_label_pc_8340, %dec_label_pc_8330, %dec_label_pc_830c, %dec_label_pc_82e8, %dec_label_pc_84f8
  %v1_8308 = phi i32 [ %v1_8308.pre, %.dec_label_pc_8300_crit_edge ], [ %v1_8310, %dec_label_pc_834c ], [ %v1_8310, %dec_label_pc_8340 ], [ %v1_8310, %dec_label_pc_8330 ], [ %v1_8310, %dec_label_pc_830c ], [ %v0_82f8, %dec_label_pc_82e8 ], [ %v0_84fc, %dec_label_pc_84f8 ]
  store i32 %v9_82e8, i32* @r6, align 4
  store i32 %v12_82e8, i32* @r7, align 4
  store i32 %v18_82e8, i32* @sb, align 4
  store i32 %v24_82e8, i32* @fp, align 4
  ret i32 %v1_8308

dec_label_pc_830c:                                ; preds = %dec_label_pc_82e8
  %v1_830c = inttoptr i32 %v0_82f8 to i32*
  %v2_830c = load i32, i32* %v1_830c, align 4
  store i32 %v2_830c, i32* %r1.global-to-local, align 4
  %v1_8310 = and i32 %v2_830c, 16711680
  store i32 %v1_8310, i32* %r0.global-to-local, align 4
  %v3_8314 = udiv i32 %v2_830c, 16777216
  %v4_8318 = udiv i32 %v1_8310, 256
  %v5_8318 = or i32 %v4_8318, %v3_8314
  %v1_831c = and i32 %v2_830c, 65280
  store i32 %v1_831c, i32* %r2.global-to-local, align 4
  %v4_8320 = mul nuw nsw i32 %v1_831c, 256
  %v5_8320 = or i32 %v5_8318, %v4_8320
  store i32 %v5_8320, i32* %r3.global-to-local, align 4
  %v7_8324 = icmp eq i32 %arg2, 4
  store i1 %v7_8324, i1* %cpsr_z.global-to-local, align 1
  %v5_8328 = call i32 @llvm.bswap.i32(i32 %v2_830c)
  store i32 %v5_8328, i32* @fp, align 4
  br i1 %v7_8324, label %dec_label_pc_8300, label %dec_label_pc_8330

dec_label_pc_8330:                                ; preds = %dec_label_pc_830c
  %v1_8330 = add i32 %v0_82f8, 4
  %v2_8330 = inttoptr i32 %v1_8330 to i8*
  %v3_8330 = load i8, i8* %v2_8330, align 1
  %v4_8330 = zext i8 %v3_8330 to i32
  store i32 %v4_8330, i32* %r2.global-to-local, align 4
  %v7_8334 = icmp eq i32 %arg2, 5
  store i1 %v7_8334, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8334, label %dec_label_pc_8300, label %dec_label_pc_8340

dec_label_pc_8340:                                ; preds = %dec_label_pc_8330
  %v1_8340 = add i32 %v0_82f8, 5
  %v2_8340 = inttoptr i32 %v1_8340 to i8*
  %v3_8340 = load i8, i8* %v2_8340, align 1
  %v4_8340 = zext i8 %v3_8340 to i32
  store i32 %v4_8340, i32* @sb, align 4
  %v2_8344 = icmp eq i8 %v3_8340, 0
  store i1 %v2_8344, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8344, label %dec_label_pc_8300, label %dec_label_pc_834c

dec_label_pc_834c:                                ; preds = %dec_label_pc_8340
  %v2_8350 = mul nuw nsw i32 %v4_8340, 5
  store i32 %v2_8350, i32* @r7, align 4
  %v1_8354 = add i32 %arg2, -6
  store i32 %v1_8354, i32* %r3.global-to-local, align 4
  %v3_8358 = icmp ult i32 %v1_8354, %v2_8350
  %v9_8358 = icmp eq i32 %v1_8354, %v2_8350
  store i1 %v9_8358, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8358, label %dec_label_pc_8300, label %dec_label_pc_8360

dec_label_pc_8360:                                ; preds = %dec_label_pc_834c
  store i32 %v4_8340, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  store i32 %v1_8354, i32* @r6, align 4
  %v2_836c = call i32 @function_1295c(i32 %v4_8340, i32 24)
  store i32 %v2_836c, i32* @ip, align 4
  %v0_8378 = load i32, i32* @r7, align 4
  %v1_8378 = load i32, i32* @r4, align 4
  %v2_8378 = sub i32 %v1_8378, %v0_8378
  store i32 %v2_8378, i32* @r7, align 4
  %v0_837c = load i32, i32* @r5, align 4
  %v1_837c = add i32 %v0_837c, 11
  store i32 %v1_837c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8380

dec_label_pc_8380:                                ; preds = %dec_label_pc_8380, %dec_label_pc_8360
  %v1_8384 = phi i32 [ %v1_83b0, %dec_label_pc_8380 ], [ %v2_836c, %dec_label_pc_8360 ]
  %v0_8380 = phi i32 [ %v1_83ac, %dec_label_pc_8380 ], [ %v1_837c, %dec_label_pc_8360 ]
  %v1_8380 = add i32 %v0_8380, -5
  %v2_8380 = inttoptr i32 %v1_8380 to i32*
  %v3_8380 = load i32, i32* %v2_8380, align 4
  store i32 %v3_8380, i32* %r1.global-to-local, align 4
  %v2_8384 = add i32 %v1_8384, 16
  %v3_8384 = inttoptr i32 %v2_8384 to i32*
  store i32 %v3_8380, i32* %v3_8384, align 4
  %v0_8388 = load i32, i32* @r7, align 4
  %v1_8388 = add i32 %v0_8388, -6
  store i32 %v1_8388, i32* %r3.global-to-local, align 4
  %v0_838c = load i32, i32* %r0.global-to-local, align 4
  %v1_838c = add i32 %v0_838c, -1
  %v2_838c = inttoptr i32 %v1_838c to i8*
  %v3_838c = load i8, i8* %v2_838c, align 1
  %v4_838c = zext i8 %v3_838c to i32
  store i32 %v4_838c, i32* %r2.global-to-local, align 4
  %v0_8390 = load i32, i32* @r6, align 4
  %v1_8390 = add i32 %v0_8390, -5
  store i32 %v1_8390, i32* @r6, align 4
  %v9_8394 = icmp eq i32 %v1_8390, %v1_8388
  store i1 %v9_8394, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %v0_838c, i32* @r4, align 4
  %v2_83a0 = load i32, i32* @ip, align 4
  %v3_83a0 = add i32 %v2_83a0, 20
  %v4_83a0 = inttoptr i32 %v3_83a0 to i8*
  store i8 %v3_838c, i8* %v4_83a0, align 1
  %v0_83a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_83a4 = load i32, i32* @ip, align 4
  %v2_83a4 = add i32 %v1_83a4, 4
  %v3_83a4 = inttoptr i32 %v2_83a4 to i32*
  store i32 %v0_83a4, i32* %v3_83a4, align 4
  %v0_83a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_83a8 = trunc i32 %v0_83a8 to i16
  %v2_83a8 = load i32, i32* @ip, align 4
  %v3_83a8 = inttoptr i32 %v2_83a8 to i16*
  store i16 %v1_83a8, i16* %v3_83a8, align 2
  %v0_83ac = load i32, i32* %r0.global-to-local, align 4
  %v1_83ac = add i32 %v0_83ac, 5
  store i32 %v1_83ac, i32* %r0.global-to-local, align 4
  %v0_83b0 = load i32, i32* @ip, align 4
  %v1_83b0 = add i32 %v0_83b0, 24
  store i32 %v1_83b0, i32* @ip, align 4
  %v0_83b4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83b4, label %dec_label_pc_83b8, label %dec_label_pc_8380

dec_label_pc_83b8:                                ; preds = %dec_label_pc_8380
  %v0_83b8 = load i32, i32* @r6, align 4
  %v2_83b8 = icmp eq i32 %v0_83b8, 0
  store i1 %v2_83b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83b8, label %dec_label_pc_84bc, label %dec_label_pc_83c0

dec_label_pc_83c0:                                ; preds = %dec_label_pc_83b8
  %v0_83c0 = load i32, i32* @r4, align 4
  %v1_83c0 = inttoptr i32 %v0_83c0 to i8*
  %v2_83c0 = load i8, i8* %v1_83c0, align 1
  %v3_83c0 = zext i8 %v2_83c0 to i32
  store i32 %v3_83c0, i32* @r5, align 4
  %v2_83c4 = icmp eq i8 %v2_83c0, 0
  store i1 %v2_83c4, i1* %cpsr_z.global-to-local, align 1
  %v0_83c8 = load i32, i32* @r7, align 4
  %v1_83c8 = add i32 %v0_83c8, -7
  store i32 %v1_83c8, i32* @r8, align 4
  br i1 %v2_83c4, label %bb, label %dec_label_pc_83d4

bb:                                               ; preds = %dec_label_pc_83c0
  store i32 %v3_83c0, i32* @r6, align 4
  br label %dec_label_pc_8498

dec_label_pc_83d4:                                ; preds = %dec_label_pc_83c0
  store i32 %v3_83c0, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_83dc = call i32 @function_1295c(i32 %v3_83c0, i32 8)
  store i32 %v2_83dc, i32* %r0.global-to-local, align 4
  %v0_83e0 = load i32, i32* @r8, align 4
  %v2_83e0 = icmp eq i32 %v0_83e0, 0
  store i1 %v2_83e0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_83dc, i32* @r6, align 4
  br i1 %v2_83e0, label %dec_label_pc_84bc, label %dec_label_pc_83ec

dec_label_pc_83ec:                                ; preds = %dec_label_pc_83d4
  %v0_83ec = load i32, i32* @r4, align 4
  %v1_83ec = add i32 %v0_83ec, 1
  %v2_83ec = inttoptr i32 %v1_83ec to i8*
  %v3_83ec = load i8, i8* %v2_83ec, align 1
  %v0_83f0 = load i32, i32* @r7, align 4
  %v7_83f0 = icmp eq i32 %v0_83f0, 8
  store i1 %v7_83f0, i1* %cpsr_z.global-to-local, align 1
  %v3_83f4 = add i32 %v2_83dc, 4
  %v4_83f4 = inttoptr i32 %v3_83f4 to i8*
  store i8 %v3_83ec, i8* %v4_83f4, align 1
  %v0_83f8 = load i32, i32* @r4, align 4
  %v1_83f8 = add i32 %v0_83f8, 1
  store i32 %v1_83f8, i32* %r3.global-to-local, align 4
  %v0_83fc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83fc, label %dec_label_pc_84bc, label %dec_label_pc_8400

dec_label_pc_8400:                                ; preds = %dec_label_pc_83ec
  %v1_8400 = add i32 %v0_83f8, 2
  %v2_8400 = inttoptr i32 %v1_8400 to i8*
  %v3_8400 = load i8, i8* %v2_8400, align 1
  %v4_8400 = zext i8 %v3_8400 to i32
  store i32 %v4_8400, i32* @r4, align 4
  %v0_8404 = load i32, i32* @r7, align 4
  %v1_8404 = add i32 %v0_8404, -9
  store i32 %v1_8404, i32* @r8, align 4
  %v9_8408 = icmp eq i32 %v1_8404, %v4_8400
  store i1 %v9_8408, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8400, i32* %r1.global-to-local, align 4
  %v5_8410 = icmp slt i32 %v1_8404, %v4_8400
  br i1 %v5_8410, label %dec_label_pc_84bc, label %bb35

bb35:                                             ; preds = %dec_label_pc_8400
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_84147 = add i32 %v0_83f8, 3
  store i32 %v7_84147, i32* @r7, align 4
  %v6_8418 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v6_8418, i32* @sl, align 4
  br label %dec_label_pc_845c

dec_label_pc_8428:                                ; preds = %dec_label_pc_845c
  %v0_8428 = load i32, i32* @r8, align 4
  %v1_8428 = load i32, i32* @r4, align 4
  %v2_8428 = sub i32 %v0_8428, %v1_8428
  store i32 %v2_8428, i32* %r2.global-to-local, align 4
  %v9_8428 = icmp eq i32 %v0_8428, %v1_8428
  store i1 %v9_8428, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8428, label %dec_label_pc_84bc, label %dec_label_pc_8430

dec_label_pc_8430:                                ; preds = %dec_label_pc_8428
  %v1_8430 = load i32, i32* @r7, align 4
  %v2_8430 = add i32 %v1_8430, %v1_8428
  %v3_8430 = inttoptr i32 %v2_8430 to i8*
  %v4_8430 = load i8, i8* %v3_8430, align 1
  store i32 %v2_8430, i32* %r0.global-to-local, align 4
  %v1_8438 = add i32 %v2_8428, -1
  store i32 %v1_8438, i32* %r2.global-to-local, align 4
  %v7_8438 = icmp eq i32 %v2_8428, 1
  store i1 %v7_8438, i1* %cpsr_z.global-to-local, align 1
  %v3_843c = add i32 %v2_8490, 4
  %v4_843c = inttoptr i32 %v3_843c to i8*
  store i8 %v4_8430, i8* %v4_843c, align 1
  %v0_8440 = load i32, i32* %r0.global-to-local, align 4
  %v1_8440 = add i32 %v0_8440, 1
  store i32 %v1_8440, i32* %r3.global-to-local, align 4
  %v0_8444 = load i32, i32* %r2.global-to-local, align 4
  %v1_8444 = add i32 %v0_8444, -1
  store i32 %v1_8444, i32* @r8, align 4
  %v1_8448 = add i32 %v0_8440, 2
  store i32 %v1_8448, i32* @r7, align 4
  %v0_844c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_844c, label %dec_label_pc_84bc, label %dec_label_pc_8450

dec_label_pc_8450:                                ; preds = %dec_label_pc_8430
  %v2_8450 = inttoptr i32 %v1_8440 to i8*
  %v3_8450 = load i8, i8* %v2_8450, align 1
  %v4_8450 = zext i8 %v3_8450 to i32
  store i32 %v4_8450, i32* @r4, align 4
  %v2_8454 = sub i32 %v1_8444, %v4_8450
  %tmp36 = sub i32 0, %v2_8454
  %v6_8454 = and i32 %v1_8444, %tmp36
  %v7_8454 = icmp slt i32 %v6_8454, 0
  %v8_8454 = icmp slt i32 %v2_8454, 0
  %v9_8454 = icmp eq i32 %v1_8444, %v4_8450
  store i1 %v9_8454, i1* %cpsr_z.global-to-local, align 1
  %v2_8458 = xor i1 %v8_8454, %v7_8454
  br i1 %v2_8458, label %dec_label_pc_84bc, label %dec_label_pc_845c

dec_label_pc_845c:                                ; preds = %bb35, %dec_label_pc_8450
  %v0_8460 = phi i32 [ %v4_8400, %bb35 ], [ %v4_8450, %dec_label_pc_8450 ]
  %stack_var_-48.1 = phi i32 [ 0, %bb35 ], [ %v1_8470, %dec_label_pc_8450 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_8460 = add nuw nsw i32 %v0_8460, 1
  store i32 %v1_8460, i32* %r0.global-to-local, align 4
  %v2_8464 = call i32 @function_1295c(i32 %v1_8460, i32 1)
  store i32 %v2_8464, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-48.1, i32* %r3.global-to-local, align 4
  %v1_846c = load i32, i32* @sl, align 4
  %v2_846c = inttoptr i32 %v1_846c to i32*
  store i32 %v2_8464, i32* %v2_846c, align 4
  %v0_8470 = load i32, i32* %r3.global-to-local, align 4
  %v1_8470 = add i32 %v0_8470, 1
  store i32 %v1_8470, i32* %r3.global-to-local, align 4
  %v0_8474 = load i32, i32* @r4, align 4
  store i32 %v0_8474, i32* %r2.global-to-local, align 4
  %v0_8478 = load i32, i32* @r7, align 4
  store i32 %v0_8478, i32* %r1.global-to-local, align 4
  %v3_8480 = call i32 @function_10b90(i32 %v2_8464, i32 %v0_8478, i32 %v0_8474)
  store i32 %v3_8480, i32* %r0.global-to-local, align 4
  store i32 %v1_8470, i32* %r2.global-to-local, align 4
  %v3_8488 = mul i32 %v1_8470, 8
  store i32 %v3_8488, i32* %r3.global-to-local, align 4
  %v1_848c = load i32, i32* @r5, align 4
  %v9_848c = icmp eq i32 %v1_8470, %v1_848c
  store i1 %v9_848c, i1* %cpsr_z.global-to-local, align 1
  %v0_8490 = load i32, i32* @r6, align 4
  %v2_8490 = add i32 %v0_8490, %v3_8488
  store i32 %v2_8490, i32* @sl, align 4
  br i1 %v9_848c, label %dec_label_pc_8498, label %dec_label_pc_8428

dec_label_pc_8498:                                ; preds = %dec_label_pc_845c, %bb
  %v0_8498 = call i32 @function_11a08()
  %v2_84a0 = inttoptr i32 %v0_8498 to i32*
  store i32 0, i32* %v2_84a0, align 4
  store i32 %v4_8330, i32* %r1.global-to-local, align 4
  %v0_84a8 = load i32, i32* @fp, align 4
  store i32 %v0_84a8, i32* %r0.global-to-local, align 4
  %v0_84ac = load i32, i32* @sb, align 4
  store i32 %v0_84ac, i32* %r2.global-to-local, align 4
  store i32 %v2_836c, i32* %r3.global-to-local, align 4
  %v2_84b4 = load i32, i32* @r5, align 4
  %v5_84b4 = load i32, i32* @r6, align 4
  %v6_84b8 = trunc i32 %v2_84b4 to i8
  %v7_84b8 = call i32 @function_81ec(i32 %v0_84a8, i32 %v4_8330, i32 %v0_84ac, i32 %v2_836c, i8 %v6_84b8, i32 %v5_84b4)
  store i32 %v7_84b8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_84bc

dec_label_pc_84bc:                                ; preds = %dec_label_pc_8450, %dec_label_pc_8430, %dec_label_pc_8428, %dec_label_pc_8400, %dec_label_pc_83ec, %dec_label_pc_83d4, %dec_label_pc_83b8, %dec_label_pc_8498
  store i32 %v2_836c, i32* %r3.global-to-local, align 4
  %v2_84c0 = icmp eq i32 %v2_836c, 0
  store i1 %v2_84c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84c0, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_84bc
  store i32 %v2_836c, i32* %r0.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_84bc, %bb37
  store i32 33996, i32* @lr, align 4
  %v1_84c8 = xor i1 %v2_84c0, true
  call void @__pseudo_cond_branch(i1 %v1_84c8, i32 ptrtoint (i32* @global_var_130a8.21 to i32))
  %v0_84cc = load i32, i32* @r6, align 4
  %v2_84cc = icmp eq i32 %v0_84cc, 0
  store i1 %v2_84cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84cc, label %.dec_label_pc_8300_crit_edge, label %dec_label_pc_84d4

.dec_label_pc_8300_crit_edge:                     ; preds = %bb38
  %v1_8308.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8300

dec_label_pc_84d4:                                ; preds = %bb38
  %v0_84d4 = load i32, i32* @r5, align 4
  %v2_84d4 = icmp eq i32 %v0_84d4, 0
  store i1 %v2_84d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84d4, label %dec_label_pc_84f8, label %dec_label_pc_84dc

dec_label_pc_84dc:                                ; preds = %dec_label_pc_84d4
  br label %dec_label_pc_84e0

dec_label_pc_84e0:                                ; preds = %dec_label_pc_84e0, %dec_label_pc_84dc
  %v0_84e8 = phi i32 [ 0, %dec_label_pc_84dc ], [ %v1_84f0, %dec_label_pc_84e0 ]
  %v0_84e0 = phi i32 [ %v0_84cc, %dec_label_pc_84dc ], [ %v0_84f8.pre, %dec_label_pc_84e0 ]
  %v4_84e0 = mul i32 %v0_84e8, 8
  %v5_84e0 = add i32 %v4_84e0, %v0_84e0
  %v6_84e0 = inttoptr i32 %v5_84e0 to i32*
  %v7_84e0 = load i32, i32* %v6_84e0, align 4
  store i32 %v7_84e0, i32* %r0.global-to-local, align 4
  %v2_84e4 = icmp eq i32 %v7_84e0, 0
  store i1 %v2_84e4, i1* %cpsr_z.global-to-local, align 1
  %v1_84e8 = add i32 %v0_84e8, 1
  store i32 %v1_84e8, i32* @r4, align 4
  store i32 34032, i32* @lr, align 4
  %v1_84ec = xor i1 %v2_84e4, true
  call void @__pseudo_cond_branch(i1 %v1_84ec, i32 ptrtoint (i32* @global_var_130a8.21 to i32))
  %v0_84f0 = load i32, i32* @r5, align 4
  %v1_84f0 = load i32, i32* @r4, align 4
  %v9_84f0 = icmp eq i32 %v0_84f0, %v1_84f0
  store i1 %v9_84f0, i1* %cpsr_z.global-to-local, align 1
  %v0_84f8.pre = load i32, i32* @r6, align 4
  br i1 %v9_84f0, label %dec_label_pc_84f8, label %dec_label_pc_84e0

dec_label_pc_84f8:                                ; preds = %dec_label_pc_84e0, %dec_label_pc_84d4
  %v0_84f8 = phi i32 [ %v0_84cc, %dec_label_pc_84d4 ], [ %v0_84f8.pre, %dec_label_pc_84e0 ]
  store i32 %v0_84f8, i32* @r0, align 4
  %v0_84fc = call i32 @function_130a8()
  store i32 %v0_84fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8300

; uselistorder directives
  uselistorder i32 %v0_84fc, { 1, 0 }
  uselistorder i32 %v1_84f0, { 1, 0 }
  uselistorder i1 %v2_84c0, { 0, 2, 1 }
  uselistorder i32 %v2_8490, { 1, 0 }
  uselistorder i32 %v3_8488, { 1, 0 }
  uselistorder i32 %v1_8470, { 3, 0, 2, 4, 1 }
  uselistorder i32 %v2_8454, { 1, 0 }
  uselistorder i32 %v4_8450, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8444, { 2, 0, 1, 3 }
  uselistorder i32 %v3_83c0, { 1, 0, 2, 3 }
  uselistorder i32 %v1_83b0, { 1, 0 }
  uselistorder i32 %v1_83ac, { 1, 0 }
  uselistorder i32 %v2_836c, { 0, 4, 5, 2, 3, 1, 6 }
  uselistorder i32 %v4_8340, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8310, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 %v2_830c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_82f8, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 4, 5, 6, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r2.global-to-local, { 1, 5, 6, 2, 3, 4, 0, 7, 8, 9 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 20, 3, 21, 5, 8, 10, 9, 6, 7, 16, 17, 11, 12, 13, 14, 15, 18, 19, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_84bc, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_845c, { 1, 0 }
  uselistorder label %dec_label_pc_8300, { 6, 1, 0, 2, 3, 4, 5 }
}

define i32 @function_8504(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8504:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_8504 = icmp eq i32 %arg1, 0
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_8504, label %dec_label_pc_854c, label %dec_label_pc_8514

dec_label_pc_8514:                                ; preds = %dec_label_pc_8504
  %v0_8514 = load i32, i32* %r1.global-to-local, align 4
  %v1_8514 = add i32 %v0_8514, 4
  %v2_8514 = inttoptr i32 %v1_8514 to i8*
  %v3_8514 = load i8, i8* %v2_8514, align 1
  %v4_8514 = zext i8 %v3_8514 to i32
  %v9_8518 = icmp eq i32 %v4_8514, %arg3
  br i1 %v9_8518, label %dec_label_pc_8558, label %dec_label_pc_853c.preheader

dec_label_pc_853c.preheader:                      ; preds = %dec_label_pc_8514
  br label %dec_label_pc_853c

dec_label_pc_852c:                                ; preds = %dec_label_pc_853c
  %v1_852c = add i32 %v0_8534.in, 12
  %v2_852c = inttoptr i32 %v1_852c to i8*
  %v3_852c = load i8, i8* %v2_852c, align 1
  %v4_852c = zext i8 %v3_852c to i32
  %v9_8530 = icmp eq i32 %v4_852c, %arg3
  br i1 %v9_8530, label %dec_label_pc_8558, label %dec_label_pc_853c

dec_label_pc_853c:                                ; preds = %dec_label_pc_853c.preheader, %dec_label_pc_852c
  %v0_8534.in = phi i32 [ %v0_8514, %dec_label_pc_853c.preheader ], [ %v0_8534, %dec_label_pc_852c ]
  %v0_853c = phi i32 [ 0, %dec_label_pc_853c.preheader ], [ %v1_853c, %dec_label_pc_852c ]
  %v0_8534 = add i32 %v0_8534.in, 8
  %v1_853c = add i32 %v0_853c, 1
  %v9_8540 = icmp eq i32 %v1_853c, %arg1
  store i32 %v0_8534, i32* %r1.global-to-local, align 4
  br i1 %v9_8540, label %dec_label_pc_854c, label %dec_label_pc_852c

dec_label_pc_854c:                                ; preds = %dec_label_pc_853c, %dec_label_pc_8558, %dec_label_pc_8504, %dec_label_pc_8564
  %v0_854c = phi i32 [ %arg4, %dec_label_pc_8558 ], [ %arg4, %dec_label_pc_8504 ], [ %v1_8564, %dec_label_pc_8564 ], [ %arg4, %dec_label_pc_853c ]
  ret i32 %v0_854c

dec_label_pc_8558:                                ; preds = %dec_label_pc_852c, %dec_label_pc_8514
  %v0_8558 = phi i32 [ %v0_8514, %dec_label_pc_8514 ], [ %v0_8534, %dec_label_pc_852c ]
  %v1_8558 = inttoptr i32 %v0_8558 to i32*
  %v2_8558 = load i32, i32* %v1_8558, align 4
  store i32 %v2_8558, i32* @r0, align 4
  %v2_855c = icmp eq i32 %v2_8558, 0
  br i1 %v2_855c, label %dec_label_pc_854c, label %dec_label_pc_8564

dec_label_pc_8564:                                ; preds = %dec_label_pc_8558
  %v1_8564 = call i32 @function_11b44(i32 %v2_8558)
  br label %dec_label_pc_854c

; uselistorder directives
  uselistorder i32 %v1_853c, { 1, 0 }
  uselistorder i32 %v0_8534, { 1, 0, 2 }
  uselistorder i32 %v0_8534.in, { 1, 0 }
  uselistorder i32 %v0_8514, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_854c, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_853c, { 1, 0 }
}

define i32 @function_8570(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8570:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_8570 = icmp eq i32 %arg1, 0
  %v3_8574 = load i32, i32* @r4, align 4
  store i32 %v3_8574, i32* %stack_var_-8, align 4
  %v6_8574 = load i32, i32* @lr, align 4
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_8570, label %dec_label_pc_85b8, label %dec_label_pc_8580

dec_label_pc_8580:                                ; preds = %dec_label_pc_8570
  %v0_8580 = load i32, i32* %r1.global-to-local, align 4
  %v1_8580 = add i32 %v0_8580, 4
  %v2_8580 = inttoptr i32 %v1_8580 to i8*
  %v3_8580 = load i8, i8* %v2_8580, align 1
  %v4_8580 = zext i8 %v3_8580 to i32
  %v9_8584 = icmp eq i32 %v4_8580, %arg3
  br i1 %v9_8584, label %dec_label_pc_85c4, label %dec_label_pc_85a8.preheader

dec_label_pc_85a8.preheader:                      ; preds = %dec_label_pc_8580
  br label %dec_label_pc_85a8

dec_label_pc_8598:                                ; preds = %dec_label_pc_85a8
  %v1_8598 = add i32 %v0_85a0.in, 12
  %v2_8598 = inttoptr i32 %v1_8598 to i8*
  %v3_8598 = load i8, i8* %v2_8598, align 1
  %v4_8598 = zext i8 %v3_8598 to i32
  %v9_859c = icmp eq i32 %v4_8598, %arg3
  br i1 %v9_859c, label %dec_label_pc_85c4, label %dec_label_pc_85a8

dec_label_pc_85a8:                                ; preds = %dec_label_pc_85a8.preheader, %dec_label_pc_8598
  %v0_85a0.in = phi i32 [ %v0_8580, %dec_label_pc_85a8.preheader ], [ %v0_85a0, %dec_label_pc_8598 ]
  %v0_85a8 = phi i32 [ 0, %dec_label_pc_85a8.preheader ], [ %v1_85a8, %dec_label_pc_8598 ]
  %v0_85a0 = add i32 %v0_85a0.in, 8
  %v1_85a8 = add i32 %v0_85a8, 1
  store i32 %v1_85a8, i32* @lr, align 4
  %v9_85ac = icmp eq i32 %v1_85a8, %arg1
  store i32 %v0_85a0, i32* %r1.global-to-local, align 4
  br i1 %v9_85ac, label %dec_label_pc_85b8, label %dec_label_pc_8598

dec_label_pc_85b8:                                ; preds = %dec_label_pc_85a8, %dec_label_pc_85c4, %dec_label_pc_8570, %dec_label_pc_85d0
  %v2_85bc = phi i32 [ %v3_8574, %dec_label_pc_85c4 ], [ %v3_8574, %dec_label_pc_8570 ], [ %v2_85bc.pre, %dec_label_pc_85d0 ], [ %v3_8574, %dec_label_pc_85a8 ]
  %v0_85b8 = phi i32 [ %arg4, %dec_label_pc_85c4 ], [ %arg4, %dec_label_pc_8570 ], [ %v3_85d4, %dec_label_pc_85d0 ], [ %arg4, %dec_label_pc_85a8 ]
  store i32 %v2_85bc, i32* @r4, align 4
  store i32 %v6_8574, i32* @lr, align 4
  ret i32 %v0_85b8

dec_label_pc_85c4:                                ; preds = %dec_label_pc_8598, %dec_label_pc_8580
  %v0_85c4 = phi i32 [ %v0_8580, %dec_label_pc_8580 ], [ %v0_85a0, %dec_label_pc_8598 ]
  %v1_85c4 = inttoptr i32 %v0_85c4 to i32*
  %v2_85c4 = load i32, i32* %v1_85c4, align 4
  %v2_85c8 = icmp eq i32 %v2_85c4, 0
  br i1 %v2_85c8, label %dec_label_pc_85b8, label %dec_label_pc_85d0

dec_label_pc_85d0:                                ; preds = %dec_label_pc_85c4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_85d4 = inttoptr i32 %v2_85c4 to i8*
  %v3_85d4 = call i32 @function_10c44(i8* %v2_85d4, i32 10)
  %v2_85bc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_85b8

; uselistorder directives
  uselistorder i32 %v1_85a8, { 1, 2, 0 }
  uselistorder i32 %v0_85a0, { 1, 0, 2 }
  uselistorder i32 %v0_85a0.in, { 1, 0 }
  uselistorder i32 %v0_8580, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_85b8, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_85a8, { 1, 0 }
}

define i32 @function_85e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_85e0:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_85e0 = load i32, i32* @r4, align 4
  store i32 %v3_85e0, i32* %stack_var_-24, align 4
  %v6_85e0 = load i32, i32* @r5, align 4
  %v9_85e0 = load i32, i32* @r6, align 4
  %v12_85e0 = load i32, i32* @r7, align 4
  %v15_85e0 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_85ec = call i32 @function_1295c(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1f24c.17 to i32), i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1f250.19 to i32), i32* @r6, align 4
  store i32 47208, i32* %r2.global-to-local, align 4
  store i32 %v2_85ec, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1f24d.25 to i32), i32* %r1.global-to-local, align 4
  %v2_860c = load i32, i32* @global_var_1f250.19, align 4
  %v2_8610 = inttoptr i32 %v2_85ec to i32*
  store i32 47208, i32* %v2_8610, align 4
  %v3_8614 = load i32, i32* @r5, align 4
  %v4_8614 = add i32 %v3_8614, 4
  %v5_8614 = inttoptr i32 %v4_8614 to i8*
  store i8 0, i8* %v5_8614, align 1
  %v0_8618 = load i32, i32* %r1.global-to-local, align 4
  %v3_8618 = mul i32 %v0_8618, 4
  store i32 %v3_8618, i32* %r1.global-to-local, align 4
  %v5_861c = inttoptr i32 %v2_860c to i32*
  %v6_861c = call i32 @function_12a90(i32* %v5_861c, i32 %v3_8618, i32 47208, i32 0)
  %v2_8620 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_8620 = zext i8 %v2_8620 to i32
  store i32 %v6_861c, i32* %r2.global-to-local, align 4
  %v0_8628 = load i32, i32* @r5, align 4
  %v5_8628 = mul nuw nsw i32 %v3_8620, 4
  %v6_8628 = add i32 %v5_8628, %v6_861c
  %v7_8628 = inttoptr i32 %v6_8628 to i32*
  store i32 %v0_8628, i32* %v7_8628, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1f24d.25 to i32), i32* %r3.global-to-local, align 4
  %v1_8638 = load i32, i32* @r6, align 4
  %v2_8638 = inttoptr i32 %v1_8638 to i32*
  store i32 %v6_861c, i32* %v2_8638, align 4
  %v0_863c = load i32, i32* %r3.global-to-local, align 4
  %v1_863c = trunc i32 %v0_863c to i8
  %v2_863c = load i32, i32* @r4, align 4
  %v3_863c = inttoptr i32 %v2_863c to i8*
  store i8 %v1_863c, i8* %v3_863c, align 1
  %v2_8640 = call i32 @function_1295c(i32 1, i32 8)
  store i32 ptrtoint (i32* @global_var_bd54.27 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r8, align 4
  store i32 %v2_8640, i32* @r5, align 4
  store i32 ptrtoint (i8* @global_var_1f24d.25 to i32), i32* %r1.global-to-local, align 4
  %v2_8658 = load i32, i32* @global_var_1f250.19, align 4
  %v2_865c = inttoptr i32 %v2_8640 to i32*
  store i32 ptrtoint (i32* @global_var_bd54.27 to i32), i32* %v2_865c, align 4
  %v0_8660 = load i32, i32* @r8, align 4
  %v1_8660 = trunc i32 %v0_8660 to i8
  %v2_8660 = load i32, i32* @r5, align 4
  %v3_8660 = add i32 %v2_8660, 4
  %v4_8660 = inttoptr i32 %v3_8660 to i8*
  store i8 %v1_8660, i8* %v4_8660, align 1
  %v0_8664 = load i32, i32* %r1.global-to-local, align 4
  %v3_8664 = mul i32 %v0_8664, 4
  store i32 %v3_8664, i32* %r1.global-to-local, align 4
  %v4_8668 = inttoptr i32 %v2_8658 to i32*
  %v5_8668 = call i32 @function_12a90(i32* %v4_8668, i32 %v3_8664, i32 %v6_861c, i32 ptrtoint (i32* @global_var_bd54.27 to i32))
  %v2_866c = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_866c = zext i8 %v2_866c to i32
  store i32 %v3_866c, i32* %r3.global-to-local, align 4
  store i32 %v5_8668, i32* %r2.global-to-local, align 4
  %v0_8674 = load i32, i32* @r5, align 4
  %v5_8674 = mul nuw nsw i32 %v3_866c, 4
  %v6_8674 = add i32 %v5_8674, %v5_8668
  %v7_8674 = inttoptr i32 %v6_8674 to i32*
  store i32 %v0_8674, i32* %v7_8674, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_867c = load i32, i32* %r3.global-to-local, align 4
  %v1_867c = load i32, i32* @r8, align 4
  %v2_867c = add i32 %v1_867c, %v0_867c
  store i32 %v2_867c, i32* %r3.global-to-local, align 4
  %v1_8684 = trunc i32 %v2_867c to i8
  %v2_8684 = load i32, i32* @r4, align 4
  %v3_8684 = inttoptr i32 %v2_8684 to i8*
  store i8 %v1_8684, i8* %v3_8684, align 1
  %v0_8688 = load i32, i32* %r2.global-to-local, align 4
  %v1_8688 = load i32, i32* @r6, align 4
  %v2_8688 = inttoptr i32 %v1_8688 to i32*
  store i32 %v0_8688, i32* %v2_8688, align 4
  %v2_868c = call i32 @function_1295c(i32 %v1_867c, i32 8)
  %v2_8690 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_8690 = zext i8 %v2_8690 to i32
  store i32 ptrtoint (i32* @global_var_c18c.29 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_868c, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_86a0 = load i32, i32* @r8, align 4
  %v2_86a0 = add i32 %v1_86a0, %v3_8690
  store i32 %v2_86a0, i32* %r1.global-to-local, align 4
  %v2_86a4 = load i32, i32* @global_var_1f250.19, align 4
  %v2_86a8 = inttoptr i32 %v2_868c to i32*
  store i32 ptrtoint (i32* @global_var_c18c.29 to i32), i32* %v2_86a8, align 4
  %v3_86ac = load i32, i32* @r5, align 4
  %v4_86ac = add i32 %v3_86ac, 4
  %v5_86ac = inttoptr i32 %v4_86ac to i8*
  store i8 2, i8* %v5_86ac, align 1
  %v0_86b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_86b0 = mul i32 %v0_86b0, 4
  store i32 %v3_86b0, i32* %r1.global-to-local, align 4
  %v5_86b4 = inttoptr i32 %v2_86a4 to i32*
  %v6_86b4 = call i32 @function_12a90(i32* %v5_86b4, i32 %v3_86b0, i32 ptrtoint (i32* @global_var_c18c.29 to i32), i32 2)
  %v2_86b8 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_86b8 = zext i8 %v2_86b8 to i32
  store i32 %v3_86b8, i32* %r3.global-to-local, align 4
  store i32 %v6_86b4, i32* %r2.global-to-local, align 4
  %v0_86c0 = load i32, i32* @r5, align 4
  %v5_86c0 = mul nuw nsw i32 %v3_86b8, 4
  %v6_86c0 = add i32 %v5_86c0, %v6_86b4
  %v7_86c0 = inttoptr i32 %v6_86c0 to i32*
  store i32 %v0_86c0, i32* %v7_86c0, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_86c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_86c8 = load i32, i32* @r8, align 4
  %v2_86c8 = add i32 %v1_86c8, %v0_86c8
  store i32 %v2_86c8, i32* %r3.global-to-local, align 4
  %v1_86d0 = load i32, i32* @r6, align 4
  %v2_86d0 = inttoptr i32 %v1_86d0 to i32*
  store i32 %v6_86b4, i32* %v2_86d0, align 4
  %v0_86d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_86d4 = trunc i32 %v0_86d4 to i8
  %v2_86d4 = load i32, i32* @r4, align 4
  %v3_86d4 = inttoptr i32 %v2_86d4 to i8*
  store i8 %v1_86d4, i8* %v3_86d4, align 1
  %v2_86d8 = call i32 @function_1295c(i32 %v1_86c8, i32 8)
  %v2_86dc = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_86dc = zext i8 %v2_86dc to i32
  store i32 ptrtoint (i32* @global_var_b5c8.31 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r7, align 4
  store i32 %v2_86d8, i32* @r5, align 4
  %v1_86ec = load i32, i32* @r8, align 4
  %v2_86ec = add i32 %v1_86ec, %v3_86dc
  store i32 %v2_86ec, i32* %r1.global-to-local, align 4
  %v2_86f0 = load i32, i32* @global_var_1f250.19, align 4
  %v2_86f4 = inttoptr i32 %v2_86d8 to i32*
  store i32 ptrtoint (i32* @global_var_b5c8.31 to i32), i32* %v2_86f4, align 4
  %v0_86f8 = load i32, i32* @r7, align 4
  %v1_86f8 = trunc i32 %v0_86f8 to i8
  %v2_86f8 = load i32, i32* @r5, align 4
  %v3_86f8 = add i32 %v2_86f8, 4
  %v4_86f8 = inttoptr i32 %v3_86f8 to i8*
  store i8 %v1_86f8, i8* %v4_86f8, align 1
  %v0_86fc = load i32, i32* %r1.global-to-local, align 4
  %v3_86fc = mul i32 %v0_86fc, 4
  store i32 %v3_86fc, i32* %r1.global-to-local, align 4
  %v4_8700 = inttoptr i32 %v2_86f0 to i32*
  %v5_8700 = call i32 @function_12a90(i32* %v4_8700, i32 %v3_86fc, i32 %v6_86b4, i32 ptrtoint (i32* @global_var_b5c8.31 to i32))
  %v2_8704 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_8704 = zext i8 %v2_8704 to i32
  store i32 %v3_8704, i32* %r3.global-to-local, align 4
  store i32 %v5_8700, i32* %r2.global-to-local, align 4
  %v0_870c = load i32, i32* @r5, align 4
  %v5_870c = mul nuw nsw i32 %v3_8704, 4
  %v6_870c = add i32 %v5_870c, %v5_8700
  %v7_870c = inttoptr i32 %v6_870c to i32*
  store i32 %v0_870c, i32* %v7_870c, align 4
  %v0_8710 = load i32, i32* @r7, align 4
  store i32 %v0_8710, i32* %r1.global-to-local, align 4
  %v0_8714 = load i32, i32* %r3.global-to-local, align 4
  %v1_8714 = load i32, i32* @r8, align 4
  %v2_8714 = add i32 %v1_8714, %v0_8714
  store i32 %v2_8714, i32* %r3.global-to-local, align 4
  %v1_871c = trunc i32 %v2_8714 to i8
  %v2_871c = load i32, i32* @r4, align 4
  %v3_871c = inttoptr i32 %v2_871c to i8*
  store i8 %v1_871c, i8* %v3_871c, align 1
  %v0_8720 = load i32, i32* %r2.global-to-local, align 4
  %v1_8720 = load i32, i32* @r6, align 4
  %v2_8720 = inttoptr i32 %v1_8720 to i32*
  store i32 %v0_8720, i32* %v2_8720, align 4
  %v2_8724 = call i32 @function_1295c(i32 %v1_8714, i32 %v0_8710)
  %v2_8728 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_8728 = zext i8 %v2_8728 to i32
  store i32 ptrtoint (i32* @global_var_af1c.33 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8724, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_8738 = load i32, i32* @r8, align 4
  %v2_8738 = add i32 %v1_8738, %v3_8728
  store i32 %v2_8738, i32* %r1.global-to-local, align 4
  %v2_873c = load i32, i32* @global_var_1f250.19, align 4
  %v2_8740 = inttoptr i32 %v2_8724 to i32*
  store i32 ptrtoint (i32* @global_var_af1c.33 to i32), i32* %v2_8740, align 4
  %v3_8744 = load i32, i32* @r5, align 4
  %v4_8744 = add i32 %v3_8744, 4
  %v5_8744 = inttoptr i32 %v4_8744 to i8*
  store i8 3, i8* %v5_8744, align 1
  %v0_8748 = load i32, i32* %r1.global-to-local, align 4
  %v3_8748 = mul i32 %v0_8748, 4
  store i32 %v3_8748, i32* %r1.global-to-local, align 4
  %v5_874c = inttoptr i32 %v2_873c to i32*
  %v6_874c = call i32 @function_12a90(i32* %v5_874c, i32 %v3_8748, i32 ptrtoint (i32* @global_var_af1c.33 to i32), i32 3)
  %v2_8750 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_8750 = zext i8 %v2_8750 to i32
  store i32 %v3_8750, i32* %r3.global-to-local, align 4
  store i32 %v6_874c, i32* %r2.global-to-local, align 4
  %v0_8758 = load i32, i32* @r5, align 4
  %v5_8758 = mul nuw nsw i32 %v3_8750, 4
  %v6_8758 = add i32 %v5_8758, %v6_874c
  %v7_8758 = inttoptr i32 %v6_8758 to i32*
  store i32 %v0_8758, i32* %v7_8758, align 4
  %v0_875c = load i32, i32* @r7, align 4
  store i32 %v0_875c, i32* %r1.global-to-local, align 4
  %v0_8760 = load i32, i32* %r3.global-to-local, align 4
  %v1_8760 = load i32, i32* @r8, align 4
  %v2_8760 = add i32 %v1_8760, %v0_8760
  store i32 %v2_8760, i32* %r3.global-to-local, align 4
  %v1_8768 = trunc i32 %v2_8760 to i8
  %v2_8768 = load i32, i32* @r4, align 4
  %v3_8768 = inttoptr i32 %v2_8768 to i8*
  store i8 %v1_8768, i8* %v3_8768, align 1
  %v0_876c = load i32, i32* %r2.global-to-local, align 4
  %v1_876c = load i32, i32* @r6, align 4
  %v2_876c = inttoptr i32 %v1_876c to i32*
  store i32 %v0_876c, i32* %v2_876c, align 4
  %v2_8770 = call i32 @function_1295c(i32 %v1_8760, i32 %v0_875c)
  %v2_8774 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_8774 = zext i8 %v2_8774 to i32
  store i32 ptrtoint (i32* @global_var_a824.35 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8770, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v1_8784 = load i32, i32* @r8, align 4
  %v2_8784 = add i32 %v1_8784, %v3_8774
  store i32 %v2_8784, i32* %r1.global-to-local, align 4
  %v2_8788 = load i32, i32* @global_var_1f250.19, align 4
  %v2_878c = inttoptr i32 %v2_8770 to i32*
  store i32 ptrtoint (i32* @global_var_a824.35 to i32), i32* %v2_878c, align 4
  %v3_8790 = load i32, i32* @r5, align 4
  %v4_8790 = add i32 %v3_8790, 4
  %v5_8790 = inttoptr i32 %v4_8790 to i8*
  store i8 4, i8* %v5_8790, align 1
  %v0_8794 = load i32, i32* %r1.global-to-local, align 4
  %v3_8794 = mul i32 %v0_8794, 4
  store i32 %v3_8794, i32* %r1.global-to-local, align 4
  %v5_8798 = inttoptr i32 %v2_8788 to i32*
  %v6_8798 = call i32 @function_12a90(i32* %v5_8798, i32 %v3_8794, i32 ptrtoint (i32* @global_var_a824.35 to i32), i32 4)
  %v2_879c = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_879c = zext i8 %v2_879c to i32
  store i32 %v3_879c, i32* %r3.global-to-local, align 4
  store i32 %v6_8798, i32* %r2.global-to-local, align 4
  %v0_87a4 = load i32, i32* @r5, align 4
  %v5_87a4 = mul nuw nsw i32 %v3_879c, 4
  %v6_87a4 = add i32 %v5_87a4, %v6_8798
  %v7_87a4 = inttoptr i32 %v6_87a4 to i32*
  store i32 %v0_87a4, i32* %v7_87a4, align 4
  %v0_87a8 = load i32, i32* @r7, align 4
  store i32 %v0_87a8, i32* %r1.global-to-local, align 4
  %v0_87ac = load i32, i32* %r3.global-to-local, align 4
  %v1_87ac = load i32, i32* @r8, align 4
  %v2_87ac = add i32 %v1_87ac, %v0_87ac
  store i32 %v2_87ac, i32* %r3.global-to-local, align 4
  %v1_87b4 = trunc i32 %v2_87ac to i8
  %v2_87b4 = load i32, i32* @r4, align 4
  %v3_87b4 = inttoptr i32 %v2_87b4 to i8*
  store i8 %v1_87b4, i8* %v3_87b4, align 1
  %v0_87b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_87b8 = load i32, i32* @r6, align 4
  %v2_87b8 = inttoptr i32 %v1_87b8 to i32*
  store i32 %v0_87b8, i32* %v2_87b8, align 4
  %v2_87bc = call i32 @function_1295c(i32 %v1_87ac, i32 %v0_87a8)
  %v2_87c0 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_87c0 = zext i8 %v2_87c0 to i32
  store i32 ptrtoint (i32* @global_var_a070.37 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87bc, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v1_87d0 = load i32, i32* @r8, align 4
  %v2_87d0 = add i32 %v1_87d0, %v3_87c0
  store i32 %v2_87d0, i32* %r1.global-to-local, align 4
  %v2_87d4 = load i32, i32* @global_var_1f250.19, align 4
  %v2_87d8 = inttoptr i32 %v2_87bc to i32*
  store i32 ptrtoint (i32* @global_var_a070.37 to i32), i32* %v2_87d8, align 4
  %v3_87dc = load i32, i32* @r5, align 4
  %v4_87dc = add i32 %v3_87dc, 4
  %v5_87dc = inttoptr i32 %v4_87dc to i8*
  store i8 5, i8* %v5_87dc, align 1
  %v0_87e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_87e0 = mul i32 %v0_87e0, 4
  store i32 %v3_87e0, i32* %r1.global-to-local, align 4
  %v5_87e4 = inttoptr i32 %v2_87d4 to i32*
  %v6_87e4 = call i32 @function_12a90(i32* %v5_87e4, i32 %v3_87e0, i32 ptrtoint (i32* @global_var_a070.37 to i32), i32 5)
  %v2_87e8 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_87e8 = zext i8 %v2_87e8 to i32
  store i32 %v3_87e8, i32* %r3.global-to-local, align 4
  store i32 %v6_87e4, i32* %r2.global-to-local, align 4
  %v0_87f0 = load i32, i32* @r5, align 4
  %v5_87f0 = mul nuw nsw i32 %v3_87e8, 4
  %v6_87f0 = add i32 %v5_87f0, %v6_87e4
  %v7_87f0 = inttoptr i32 %v6_87f0 to i32*
  store i32 %v0_87f0, i32* %v7_87f0, align 4
  %v0_87f4 = load i32, i32* @r7, align 4
  store i32 %v0_87f4, i32* %r1.global-to-local, align 4
  %v0_87f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_87f8 = load i32, i32* @r8, align 4
  %v2_87f8 = add i32 %v1_87f8, %v0_87f8
  store i32 %v2_87f8, i32* %r3.global-to-local, align 4
  %v1_8800 = trunc i32 %v2_87f8 to i8
  %v2_8800 = load i32, i32* @r4, align 4
  %v3_8800 = inttoptr i32 %v2_8800 to i8*
  store i8 %v1_8800, i8* %v3_8800, align 1
  %v0_8804 = load i32, i32* %r2.global-to-local, align 4
  %v1_8804 = load i32, i32* @r6, align 4
  %v2_8804 = inttoptr i32 %v1_8804 to i32*
  store i32 %v0_8804, i32* %v2_8804, align 4
  %v2_8808 = call i32 @function_1295c(i32 %v1_87f8, i32 %v0_87f4)
  %v2_880c = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_880c = zext i8 %v2_880c to i32
  store i32 39100, i32* %r2.global-to-local, align 4
  store i32 %v2_8808, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_881c = load i32, i32* @r8, align 4
  %v2_881c = add i32 %v1_881c, %v3_880c
  store i32 %v2_881c, i32* %r1.global-to-local, align 4
  %v2_8820 = load i32, i32* @global_var_1f250.19, align 4
  %v2_8824 = inttoptr i32 %v2_8808 to i32*
  store i32 39100, i32* %v2_8824, align 4
  %v3_8828 = load i32, i32* @r5, align 4
  %v4_8828 = add i32 %v3_8828, 4
  %v5_8828 = inttoptr i32 %v4_8828 to i8*
  store i8 10, i8* %v5_8828, align 1
  %v0_882c = load i32, i32* %r1.global-to-local, align 4
  %v3_882c = mul i32 %v0_882c, 4
  store i32 %v3_882c, i32* %r1.global-to-local, align 4
  %v5_8830 = inttoptr i32 %v2_8820 to i32*
  %v6_8830 = call i32 @function_12a90(i32* %v5_8830, i32 %v3_882c, i32 39100, i32 10)
  %v2_8834 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_8834 = zext i8 %v2_8834 to i32
  store i32 %v3_8834, i32* %r3.global-to-local, align 4
  store i32 %v6_8830, i32* %r2.global-to-local, align 4
  %v0_883c = load i32, i32* @r5, align 4
  %v5_883c = mul nuw nsw i32 %v3_8834, 4
  %v6_883c = add i32 %v5_883c, %v6_8830
  %v7_883c = inttoptr i32 %v6_883c to i32*
  store i32 %v0_883c, i32* %v7_883c, align 4
  %v0_8840 = load i32, i32* @r7, align 4
  store i32 %v0_8840, i32* %r1.global-to-local, align 4
  %v0_8844 = load i32, i32* %r3.global-to-local, align 4
  %v1_8844 = load i32, i32* @r8, align 4
  %v2_8844 = add i32 %v1_8844, %v0_8844
  store i32 %v2_8844, i32* %r3.global-to-local, align 4
  %v1_884c = trunc i32 %v2_8844 to i8
  %v2_884c = load i32, i32* @r4, align 4
  %v3_884c = inttoptr i32 %v2_884c to i8*
  store i8 %v1_884c, i8* %v3_884c, align 1
  %v0_8850 = load i32, i32* %r2.global-to-local, align 4
  %v1_8850 = load i32, i32* @r6, align 4
  %v2_8850 = inttoptr i32 %v1_8850 to i32*
  store i32 %v0_8850, i32* %v2_8850, align 4
  %v2_8854 = call i32 @function_1295c(i32 %v1_8844, i32 %v0_8840)
  %v2_8858 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_8858 = zext i8 %v2_8858 to i32
  store i32 ptrtoint (i32* @global_var_9000.40 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8854, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v1_8868 = load i32, i32* @r8, align 4
  %v2_8868 = add i32 %v1_8868, %v3_8858
  store i32 %v2_8868, i32* %r1.global-to-local, align 4
  %v2_886c = load i32, i32* @global_var_1f250.19, align 4
  %v2_8870 = inttoptr i32 %v2_8854 to i32*
  store i32 ptrtoint (i32* @global_var_9000.40 to i32), i32* %v2_8870, align 4
  %v3_8874 = load i32, i32* @r5, align 4
  %v4_8874 = add i32 %v3_8874, 4
  %v5_8874 = inttoptr i32 %v4_8874 to i8*
  store i8 6, i8* %v5_8874, align 1
  %v0_8878 = load i32, i32* %r1.global-to-local, align 4
  %v3_8878 = mul i32 %v0_8878, 4
  store i32 %v3_8878, i32* %r1.global-to-local, align 4
  %v5_887c = inttoptr i32 %v2_886c to i32*
  %v6_887c = call i32 @function_12a90(i32* %v5_887c, i32 %v3_8878, i32 ptrtoint (i32* @global_var_9000.40 to i32), i32 6)
  %v2_8880 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_8880 = zext i8 %v2_8880 to i32
  store i32 %v3_8880, i32* %r3.global-to-local, align 4
  store i32 %v6_887c, i32* %r2.global-to-local, align 4
  %v0_8888 = load i32, i32* @r5, align 4
  %v5_8888 = mul nuw nsw i32 %v3_8880, 4
  %v6_8888 = add i32 %v5_8888, %v6_887c
  %v7_8888 = inttoptr i32 %v6_8888 to i32*
  store i32 %v0_8888, i32* %v7_8888, align 4
  %v0_888c = load i32, i32* @r7, align 4
  store i32 %v0_888c, i32* %r1.global-to-local, align 4
  %v0_8890 = load i32, i32* %r3.global-to-local, align 4
  %v1_8890 = load i32, i32* @r8, align 4
  %v2_8890 = add i32 %v1_8890, %v0_8890
  store i32 %v2_8890, i32* %r3.global-to-local, align 4
  %v1_8898 = trunc i32 %v2_8890 to i8
  %v2_8898 = load i32, i32* @r4, align 4
  %v3_8898 = inttoptr i32 %v2_8898 to i8*
  store i8 %v1_8898, i8* %v3_8898, align 1
  %v0_889c = load i32, i32* %r2.global-to-local, align 4
  %v1_889c = load i32, i32* @r6, align 4
  %v2_889c = inttoptr i32 %v1_889c to i32*
  store i32 %v0_889c, i32* %v2_889c, align 4
  %v2_88a0 = call i32 @function_1295c(i32 %v1_8890, i32 %v0_888c)
  %v2_88a4 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_88a4 = zext i8 %v2_88a4 to i32
  store i32 ptrtoint (i32* @global_var_896c.42 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_88a0, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v1_88b4 = load i32, i32* @r8, align 4
  %v2_88b4 = add i32 %v1_88b4, %v3_88a4
  store i32 %v2_88b4, i32* %r1.global-to-local, align 4
  %v2_88b8 = load i32, i32* @global_var_1f250.19, align 4
  %v2_88bc = inttoptr i32 %v2_88a0 to i32*
  store i32 ptrtoint (i32* @global_var_896c.42 to i32), i32* %v2_88bc, align 4
  %v3_88c0 = load i32, i32* @r5, align 4
  %v4_88c0 = add i32 %v3_88c0, 4
  %v5_88c0 = inttoptr i32 %v4_88c0 to i8*
  store i8 7, i8* %v5_88c0, align 1
  %v0_88c4 = load i32, i32* %r1.global-to-local, align 4
  %v3_88c4 = mul i32 %v0_88c4, 4
  store i32 %v3_88c4, i32* %r1.global-to-local, align 4
  %v5_88c8 = inttoptr i32 %v2_88b8 to i32*
  %v6_88c8 = call i32 @function_12a90(i32* %v5_88c8, i32 %v3_88c4, i32 ptrtoint (i32* @global_var_896c.42 to i32), i32 7)
  %v2_88cc = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_88cc = zext i8 %v2_88cc to i32
  store i32 %v3_88cc, i32* %r3.global-to-local, align 4
  store i32 %v6_88c8, i32* %r2.global-to-local, align 4
  %v0_88d4 = load i32, i32* @r5, align 4
  %v5_88d4 = mul nuw nsw i32 %v3_88cc, 4
  %v6_88d4 = add i32 %v5_88d4, %v6_88c8
  %v7_88d4 = inttoptr i32 %v6_88d4 to i32*
  store i32 %v0_88d4, i32* %v7_88d4, align 4
  %v0_88d8 = load i32, i32* @r7, align 4
  store i32 %v0_88d8, i32* %r1.global-to-local, align 4
  %v0_88dc = load i32, i32* %r3.global-to-local, align 4
  %v1_88dc = load i32, i32* @r8, align 4
  %v2_88dc = add i32 %v1_88dc, %v0_88dc
  store i32 %v2_88dc, i32* %r3.global-to-local, align 4
  %v1_88e4 = trunc i32 %v2_88dc to i8
  %v2_88e4 = load i32, i32* @r4, align 4
  %v3_88e4 = inttoptr i32 %v2_88e4 to i8*
  store i8 %v1_88e4, i8* %v3_88e4, align 1
  %v0_88e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_88e8 = load i32, i32* @r6, align 4
  %v2_88e8 = inttoptr i32 %v1_88e8 to i32*
  store i32 %v0_88e8, i32* %v2_88e8, align 4
  %v2_88ec = call i32 @function_1295c(i32 %v1_88dc, i32 %v0_88d8)
  %v2_88f0 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_88f0 = zext i8 %v2_88f0 to i32
  store i32 ptrtoint (i32* @global_var_961c.44 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_88ec, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v1_8900 = load i32, i32* @r8, align 4
  %v2_8900 = add i32 %v1_8900, %v3_88f0
  store i32 %v2_8900, i32* %r1.global-to-local, align 4
  %v2_8904 = load i32, i32* @global_var_1f250.19, align 4
  %v2_8908 = inttoptr i32 %v2_88ec to i32*
  store i32 ptrtoint (i32* @global_var_961c.44 to i32), i32* %v2_8908, align 4
  %v3_890c = load i32, i32* @r5, align 4
  %v4_890c = add i32 %v3_890c, 4
  %v5_890c = inttoptr i32 %v4_890c to i8*
  store i8 9, i8* %v5_890c, align 1
  %v0_8910 = load i32, i32* %r1.global-to-local, align 4
  %v3_8910 = mul i32 %v0_8910, 4
  store i32 %v3_8910, i32* %r1.global-to-local, align 4
  %v5_8914 = inttoptr i32 %v2_8904 to i32*
  %v6_8914 = call i32 @function_12a90(i32* %v5_8914, i32 %v3_8910, i32 ptrtoint (i32* @global_var_961c.44 to i32), i32 9)
  %v2_8918 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_8918 = zext i8 %v2_8918 to i32
  store i32 %v3_8918, i32* %r3.global-to-local, align 4
  %v1_891c = load i32, i32* @r6, align 4
  %v2_891c = inttoptr i32 %v1_891c to i32*
  store i32 %v6_8914, i32* %v2_891c, align 4
  %v0_8920 = load i32, i32* @r5, align 4
  %v2_8920 = load i32, i32* %r3.global-to-local, align 4
  %v5_8920 = mul i32 %v2_8920, 4
  %v6_8920 = add i32 %v5_8920, %v6_8914
  %v7_8920 = inttoptr i32 %v6_8920 to i32*
  store i32 %v0_8920, i32* %v7_8920, align 4
  %v0_8924 = load i32, i32* %r3.global-to-local, align 4
  %v1_8924 = load i32, i32* @r8, align 4
  %v2_8924 = add i32 %v1_8924, %v0_8924
  store i32 %v2_8924, i32* %r2.global-to-local, align 4
  %v1_892c = trunc i32 %v2_8924 to i8
  %v2_892c = load i32, i32* @r4, align 4
  %v3_892c = inttoptr i32 %v2_892c to i8*
  store i8 %v1_892c, i8* %v3_892c, align 1
  %v2_8930 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_8930, i32* @r4, align 4
  store i32 %v6_85e0, i32* @r5, align 4
  store i32 %v9_85e0, i32* @r6, align 4
  store i32 %v12_85e0, i32* @r7, align 4
  store i32 %v15_85e0, i32* @r8, align 4
  ret i32 %v1_8924

; uselistorder directives
  uselistorder i32 %v1_8924, { 1, 0 }
  uselistorder i32 %v3_8910, { 1, 0 }
  uselistorder i32 %v1_88dc, { 1, 0 }
  uselistorder i32 %v3_88c4, { 1, 0 }
  uselistorder i32 %v1_8890, { 1, 0 }
  uselistorder i32 %v3_8878, { 1, 0 }
  uselistorder i32 %v1_8844, { 1, 0 }
  uselistorder i32 %v3_882c, { 1, 0 }
  uselistorder i32 %v1_87f8, { 1, 0 }
  uselistorder i32 %v3_87e0, { 1, 0 }
  uselistorder i32 %v1_87ac, { 1, 0 }
  uselistorder i32 %v3_8794, { 1, 0 }
  uselistorder i32 %v1_8760, { 1, 0 }
  uselistorder i32 %v3_8748, { 1, 0 }
  uselistorder i32 %v1_8714, { 1, 0 }
  uselistorder i32 %v3_86fc, { 1, 0 }
  uselistorder i32 %v1_86c8, { 1, 0 }
  uselistorder i32 %v6_86b4, { 1, 2, 0, 3 }
  uselistorder i32 %v3_86b0, { 1, 0 }
  uselistorder i32 %v1_867c, { 1, 0 }
  uselistorder i32 %v3_8664, { 1, 0 }
  uselistorder i32 %v2_8640, { 1, 0 }
  uselistorder i32 %v6_861c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_8618, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 43, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42 }
  uselistorder i8* bitcast (i8** @global_var_1f24c.17 to i8*), { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_1f24d.25 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1f250.19, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11 }
}

define i32 @function_896c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_896c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-54 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_896c = load i32, i32* @r4, align 4
  %v6_896c = load i32, i32* @r5, align 4
  %v24_896c = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_8988 = call i32 @function_1295c(i32 %arg1, i32 4)
  %v0_898c = load i32, i32* @r5, align 4
  store i32 %v0_898c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_899c = load i32, i32* @r4, align 4
  store i32 %v0_899c, i32* %r0.global-to-local, align 4
  %v5_89a0 = inttoptr i32 %v0_898c to i32*
  %v6_89a0 = call i32 @function_8570(i32 %v0_899c, i32* %v5_89a0, i32 2, i32 0, i32 %v2_8988)
  %v1_89ac = urem i32 %v6_89a0, 256
  store i32 %v1_89ac, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_89b8 = load i32, i32* @r5, align 4
  store i32 %v0_89b8, i32* %r1.global-to-local, align 4
  %v0_89bc = load i32, i32* @r4, align 4
  store i32 %v0_89bc, i32* %r0.global-to-local, align 4
  %v5_89c0 = trunc i32 %v6_89a0 to i8
  %v6_89c4 = inttoptr i32 %v0_89b8 to i32*
  %v7_89c4 = call i32 @function_8570(i32 %v0_89bc, i32* %v6_89c4, i32 3, i32 65535, i32 %v6_89a0)
  %v0_89c8 = load i32, i32* @r5, align 4
  store i32 %v0_89c8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_89c4, i32* %fp.global-to-local, align 4
  %v0_89d8 = load i32, i32* @r4, align 4
  store i32 %v0_89d8, i32* %r0.global-to-local, align 4
  %v5_89dc = inttoptr i32 %v0_89c8 to i32*
  %v6_89dc = call i32 @function_8570(i32 %v0_89d8, i32* %v5_89dc, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_89e4 = urem i32 %v6_89dc, 256
  store i32 %v1_89e4, i32* %ip.global-to-local, align 4
  %v0_89e8 = load i32, i32* @r5, align 4
  store i32 %v0_89e8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_89f4 = load i32, i32* @r4, align 4
  store i32 %v0_89f4, i32* %r0.global-to-local, align 4
  %v6_89fc = inttoptr i32 %v0_89e8 to i32*
  %v7_89fc = call i32 @function_8570(i32 %v0_89f4, i32* %v6_89fc, i32 5, i32 1, i32 %v1_89e4)
  %v1_8a08 = urem i32 %v7_89fc, 256
  store i32 %v1_8a08, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_8a14 = load i32, i32* @r5, align 4
  store i32 %v0_8a14, i32* %r1.global-to-local, align 4
  %v0_8a18 = load i32, i32* @r4, align 4
  store i32 %v0_8a18, i32* %r0.global-to-local, align 4
  %v5_8a20 = inttoptr i32 %v0_8a14 to i32*
  %v6_8a20 = call i32 @function_8570(i32 %v0_8a18, i32* %v5_8a20, i32 6, i32 65535, i32 %v1_8a08)
  %v0_8a28 = load i32, i32* @r5, align 4
  store i32 %v0_8a28, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_8a20, i32* @r8, align 4
  %v0_8a38 = load i32, i32* @r4, align 4
  store i32 %v0_8a38, i32* %r0.global-to-local, align 4
  %v5_8a3c = inttoptr i32 %v0_8a28 to i32*
  %v6_8a3c = call i32 @function_8570(i32 %v0_8a38, i32* %v5_8a3c, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_8a40 = load i32, i32* @r5, align 4
  store i32 %v0_8a40, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_8a3c, i32* @r7, align 4
  %v0_8a50 = load i32, i32* @r4, align 4
  store i32 %v0_8a50, i32* %r0.global-to-local, align 4
  %v5_8a54 = inttoptr i32 %v0_8a40 to i32*
  %v6_8a54 = call i32 @function_8570(i32 %v0_8a50, i32* %v5_8a54, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8a64 = load i32, i32* @r5, align 4
  store i32 %v0_8a64, i32* %r1.global-to-local, align 4
  %v0_8a68 = load i32, i32* @r4, align 4
  store i32 %v0_8a68, i32* %r0.global-to-local, align 4
  %v5_8a6c = inttoptr i32 %v0_8a64 to i32*
  %v6_8a6c = call i32 @function_8570(i32 %v0_8a68, i32* %v5_8a6c, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_8a74 = urem i32 %v6_8a6c, 256
  store i32 %v1_8a74, i32* %ip.global-to-local, align 4
  %v0_8a78 = load i32, i32* @r5, align 4
  store i32 %v0_8a78, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8a84 = load i32, i32* @r4, align 4
  store i32 %v0_8a84, i32* %r0.global-to-local, align 4
  %v5_8a8c = inttoptr i32 %v0_8a78 to i32*
  %v6_8a8c = call i32 @function_8570(i32 %v0_8a84, i32* %v5_8a8c, i32 19, i32 0, i32 %v1_8a74)
  %v0_8a94 = load i32, i32* @r5, align 4
  store i32 %v0_8a94, i32* %r1.global-to-local, align 4
  %v2_8a98 = load i32, i32* @global_var_212d8.46, align 4
  store i32 %v2_8a98, i32* %r3.global-to-local, align 4
  store i32 %v6_8a8c, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_8aa4 = load i32, i32* @r4, align 4
  store i32 %v0_8aa4, i32* %r0.global-to-local, align 4
  %v5_8aa8 = inttoptr i32 %v0_8a94 to i32*
  %v6_8aa8 = call i32 @function_8570(i32 %v0_8aa4, i32* %v5_8aa8, i32 25, i32 %v2_8a98, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_8abc = call i32 @function_11df4(i32 2, i32 3, i32 6)
  store i32 %v3_8abc, i32* %r0.global-to-local, align 4
  %v7_8ac0 = icmp eq i32 %v3_8abc, -1
  store i1 %v7_8ac0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8ac0, label %dec_label_pc_8fd4, label %dec_label_pc_8acc

dec_label_pc_8acc:                                ; preds = %dec_label_pc_896c
  store i32 1, i32* %stack_var_-44, align 4
  %v6_8ad4 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_8ad4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_8ae8 = call i32 @function_11db0(i32 %v3_8abc, i32 0, i32 3, i32 %v6_8ad4, i32 4)
  store i32 %v5_8ae8, i32* %r0.global-to-local, align 4
  %v7_8aec = icmp eq i32 %v5_8ae8, -1
  store i1 %v7_8aec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8aec, label %dec_label_pc_8fcc, label %dec_label_pc_8af4

dec_label_pc_8af4:                                ; preds = %dec_label_pc_8acc
  %v0_8af4 = load i32, i32* @r8, align 4
  %v0_8af8 = load i32, i32* @r7, align 4
  %v0_8afc = load i32, i32* %fp.global-to-local, align 4
  %v0_8b00 = load i32, i32* @r6, align 4
  %v1_8b00 = urem i32 %v0_8b00, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_8b08 = urem i32 %v0_8af4, 65536
  store i32 %v3_8b08, i32* %r3.global-to-local, align 4
  %v3_8b0c = urem i32 %v0_8af8, 65536
  store i32 %v3_8b0c, i32* %r4.global-to-local, align 4
  %v0_8b10 = load i32, i32* @sl, align 4
  %v2_8b10 = icmp eq i32 %v0_8b10, 0
  store i1 %v2_8b10, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_8b28 = urem i32 %v0_8afc, 65536
  store i32 %v3_8b28, i32* @fp, align 4
  br i1 %v2_8b10, label %dec_label_pc_8fe0, label %dec_label_pc_8b38

dec_label_pc_8b38:                                ; preds = %dec_label_pc_8af4
  %v3_8af8 = mul i32 %v0_8af8, 65536
  %v3_8af4 = mul i32 %v0_8af4, 65536
  %v0_8afc.not = or i32 %v0_8afc, -65536
  %v1_8b3c = xor i32 %v0_8afc.not, 65535
  %v3_8b40 = mul i32 %v6_8a54, 65536
  %v1_8b44 = add i32 %v3_8b40, 4325376
  %tmp73 = udiv i32 %v1_8b44, 256
  %v3_8b58 = and i32 %tmp73, 65280
  %tmp74 = mul nsw i32 %v1_8b3c, 256
  %v3_8b5c = and i32 %tmp74, 65280
  store i32 %v3_8b5c, i32* %ip.global-to-local, align 4
  %v1_8b60 = add i32 %v3_8b40, 524288
  %v1_8b68 = add i32 %v3_8b40, 1835008
  %tmp75 = udiv i32 %v1_8b3c, 256
  %v4_8b6c = urem i32 %tmp75, 256
  %v5_8b6c = or i32 %v4_8b6c, %v3_8b5c
  %v4_8b74 = udiv i32 %v1_8b44, 16777216
  %v5_8b74 = or i32 %v3_8b58, %v4_8b74
  store i32 %v5_8b74, i32* @r8, align 4
  %v3_8b80 = udiv i32 %v1_8b68, 256
  %tmp76 = mul i32 %v0_8afc, 256
  %v3_8b84 = and i32 %tmp76, 65280
  store i32 %v3_8af4, i32* %r2.global-to-local, align 4
  %tmp77 = udiv i32 %v0_8afc, 256
  %v4_8b94 = urem i32 %tmp77, 256
  %v5_8b94 = or i32 %v4_8b94, %v3_8b84
  store i32 %v5_8b94, i32* %r0.global-to-local, align 4
  %tmp78 = mul i32 %v0_8af4, 256
  %v3_8b98 = and i32 %tmp78, 65280
  %v1_8b9c = and i32 %v3_8b80, 65280
  store i32 %v1_8b9c, i32* @r6, align 4
  store i32 %v3_8af8, i32* %r1.global-to-local, align 4
  %tmp79 = mul i32 %v0_8af8, 256
  %v3_8ba8 = and i32 %tmp79, 65280
  %tmp80 = udiv i32 %v0_8af4, 256
  %v4_8bac = urem i32 %tmp80, 256
  %v5_8bac = or i32 %v4_8bac, %v3_8b98
  store i32 %v5_8bac, i32* @lr, align 4
  %v4_8bb0 = udiv i32 %v1_8b68, 16777216
  %v5_8bb0 = or i32 %v1_8b9c, %v4_8bb0
  store i32 %v5_8bb0, i32* %r3.global-to-local, align 4
  %tmp81 = udiv i32 %v0_8af8, 256
  %v4_8bb4 = urem i32 %tmp81, 256
  %v5_8bb4 = or i32 %v4_8bb4, %v3_8ba8
  %tmp82 = udiv i32 %v1_8b60, 256
  %v3_8bb8 = and i32 %tmp82, 65280
  store i32 %v3_8bb8, i32* @r5, align 4
  %v5_8bbc = trunc i32 %v5_8b94 to i16
  %v5_8bc4 = trunc i32 %v5_8bb0 to i16
  %v4_8bcc = udiv i32 %v1_8b60, 16777216
  %v5_8bcc = or i32 %v3_8bb8, %v4_8bcc
  store i32 %v5_8bcc, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %v1_8c34 = trunc i32 %v6_89dc to i8
  %sext = mul nuw i32 %v5_8b6c, 65536
  %v4_8cc0 = sdiv i32 %sext, 65536
  %v2_8cec = icmp eq i32 %v1_8b00, 0
  %sext8 = mul nuw i32 %v5_8bac, 65536
  %v4_8d0c = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_8bb4, 65536
  %v4_8d14 = sdiv i32 %sext9, 65536
  %v1_8ccc27 = trunc i32 %v4_8cc0 to i16
  br label %dec_label_pc_8bd4

dec_label_pc_8bd4:                                ; preds = %bb85, %dec_label_pc_8b38
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_8be0 = call i32 @function_1295c(i32 1510, i32 4)
  store i32 %v2_8be0, i32* %r0.global-to-local, align 4
  %v2_8be8 = load i32, i32* @r4, align 4
  %v5_8be8 = mul i32 %v2_8be8, 4
  %v6_8be8 = add i32 %v5_8be8, %v2_8988
  %v7_8be8 = inttoptr i32 %v6_8be8 to i32*
  store i32 %v2_8be0, i32* %v7_8be8, align 4
  %v3_8bec = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8bec, i32* %r2.global-to-local, align 4
  %v5_8bf4 = mul i32 %v3_8bec, 24
  %v1_8bf8 = load i32, i32* @sb, align 4
  %v2_8bf8 = add i32 %v1_8bf8, %v5_8bf4
  store i32 %v2_8bf8, i32* @lr, align 4
  store i32 %v2_8988, i32* %r3.global-to-local, align 4
  %v4_8c00 = mul i32 %v3_8bec, 4
  %v5_8c00 = add i32 %v4_8c00, %v2_8988
  %v6_8c00 = inttoptr i32 %v5_8c00 to i32*
  %v7_8c00 = load i32, i32* %v6_8c00, align 4
  store i32 %v7_8c00, i32* %r4.global-to-local, align 4
  %v1_8c04 = inttoptr i32 %v7_8c00 to i8*
  %v2_8c04 = load i8, i8* %v1_8c04, align 1
  %tmp = urem i8 %v2_8c04, 16
  %v1_8c08 = zext i8 %tmp to i32
  %v1_8c0c = or i32 %v1_8c08, 64
  store i32 %v1_8c0c, i32* %r3.global-to-local, align 4
  %v1_8c10 = trunc i32 %v1_8c0c to i8
  store i8 %v1_8c10, i8* %v1_8c04, align 1
  %v0_8c14 = load i32, i32* %r4.global-to-local, align 4
  %v1_8c14 = inttoptr i32 %v0_8c14 to i8*
  %v2_8c14 = load i8, i8* %v1_8c14, align 1
  %v1_8c18 = and i8 %v2_8c14, -16
  %v1_8c1c = or i8 %v1_8c18, 5
  store i32 %v1_8a08, i32* %r5.global-to-local, align 4
  store i8 %v1_8c1c, i8* %v1_8c14, align 1
  store i32 %v6_89a0, i32* %r1.global-to-local, align 4
  %v2_8c2c = load i32, i32* %r4.global-to-local, align 4
  %v3_8c2c = add i32 %v2_8c2c, 1
  %v4_8c2c = inttoptr i32 %v3_8c2c to i8*
  store i8 %v5_89c0, i8* %v4_8c2c, align 1
  store i32 %v1_89e4, i32* %r2.global-to-local, align 4
  %v2_8c34 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c34 = add i32 %v2_8c34, 8
  %v4_8c34 = inttoptr i32 %v3_8c34 to i8*
  store i8 %v1_8c34, i8* %v4_8c34, align 1
  %v2_8c3c = load i32, i32* %r4.global-to-local, align 4
  %v3_8c3c = add i32 %v2_8c3c, 4
  %v4_8c3c = inttoptr i32 %v3_8c3c to i16*
  store i16 %v5_8bbc, i16* %v4_8c3c, align 2
  %v2_8c44 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c44 = add i32 %v2_8c44, 9
  %v4_8c44 = inttoptr i32 %v3_8c44 to i8*
  store i8 47, i8* %v4_8c44, align 1
  store i32 %v6_8aa8, i32* %r3.global-to-local, align 4
  %v0_8c4c = load i32, i32* %r5.global-to-local, align 4
  %v2_8c4c = icmp eq i32 %v0_8c4c, 0
  store i1 %v2_8c4c, i1* %cpsr_z.global-to-local, align 1
  %v1_8c50 = load i32, i32* %r4.global-to-local, align 4
  %v2_8c50 = add i32 %v1_8c50, 12
  %v3_8c50 = inttoptr i32 %v2_8c50 to i32*
  store i32 %v6_8aa8, i32* %v3_8c50, align 4
  br i1 %v2_8c4c, label %.thread25, label %bb

bb:                                               ; preds = %dec_label_pc_8bd4
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_8c58 = load i32, i32* %r4.global-to-local, align 4
  %v4_8c58 = add i32 %v3_8c58, 6
  %v5_8c58 = inttoptr i32 %v4_8c58 to i16*
  store i16 64, i16* %v5_8c58, align 2
  br label %.thread25

.thread25:                                        ; preds = %dec_label_pc_8bd4, %bb
  %v0_8c5c = load i32, i32* @lr, align 4
  %v1_8c5c = add i32 %v0_8c5c, 16
  %v2_8c5c = inttoptr i32 %v1_8c5c to i32*
  %v3_8c5c = load i32, i32* %v2_8c5c, align 4
  store i32 22528, i32* %ip.global-to-local, align 4
  %v1_8c64 = load i32, i32* %r4.global-to-local, align 4
  %v2_8c64 = add i32 %v1_8c64, 16
  %v3_8c64 = inttoptr i32 %v2_8c64 to i32*
  store i32 %v3_8c5c, i32* %v3_8c64, align 4
  %v0_8c68 = load i32, i32* %r4.global-to-local, align 4
  %v1_8c68 = add i32 %v0_8c68, 24
  store i32 %v1_8c68, i32* %r1.global-to-local, align 4
  %v1_8c6c = add i32 %v0_8c68, 20
  store i32 %v1_8c6c, i32* %r0.global-to-local, align 4
  %v0_8c70 = load i32, i32* %ip.global-to-local, align 4
  %v1_8c70 = add i32 %v0_8c70, 101
  store i32 %v1_8c70, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_8c7c = load i32, i32* @r8, align 4
  %v1_8c7c = trunc i32 %v0_8c7c to i16
  %v3_8c7c = add i32 %v0_8c68, 2
  %v4_8c7c = inttoptr i32 %v3_8c7c to i16*
  store i16 %v1_8c7c, i16* %v4_8c7c, align 2
  %v0_8c80 = load i32, i32* %ip.global-to-local, align 4
  %v1_8c80 = trunc i32 %v0_8c80 to i16
  %v2_8c80 = load i32, i32* %r0.global-to-local, align 4
  %v3_8c80 = add i32 %v2_8c80, 2
  %v4_8c80 = inttoptr i32 %v3_8c80 to i16*
  store i16 %v1_8c80, i16* %v4_8c80, align 2
  %v0_8c84 = load i32, i32* %r3.global-to-local, align 4
  %v1_8c84 = trunc i32 %v0_8c84 to i8
  %v2_8c84 = load i32, i32* %r1.global-to-local, align 4
  %v3_8c84 = add i32 %v2_8c84, 13
  %v4_8c84 = inttoptr i32 %v3_8c84 to i8*
  store i8 %v1_8c84, i8* %v4_8c84, align 1
  %v0_8c88 = load i32, i32* %r2.global-to-local, align 4
  %v1_8c88 = trunc i32 %v0_8c88 to i8
  %v2_8c88 = load i32, i32* %r1.global-to-local, align 4
  %v3_8c88 = add i32 %v2_8c88, 12
  %v4_8c88 = inttoptr i32 %v3_8c88 to i8*
  store i8 %v1_8c88, i8* %v4_8c88, align 1
  %v0_8c8c = load i32, i32* %r4.global-to-local, align 4
  %v1_8c8c = add i32 %v0_8c8c, 38
  %v2_8c8c = inttoptr i32 %v1_8c8c to i8*
  %v3_8c8c = load i8, i8* %v2_8c8c, align 1
  %tmp89 = urem i8 %v3_8c8c, 16
  %v1_8c90 = zext i8 %tmp89 to i32
  %v1_8c94 = or i32 %v1_8c90, 64
  store i32 %v1_8c94, i32* %r3.global-to-local, align 4
  %v1_8c98 = trunc i32 %v1_8c94 to i8
  store i8 %v1_8c98, i8* %v2_8c8c, align 1
  %v0_8c9c = load i32, i32* %r4.global-to-local, align 4
  %v1_8c9c = add i32 %v0_8c9c, 38
  %v2_8c9c = inttoptr i32 %v1_8c9c to i8*
  %v3_8c9c = load i8, i8* %v2_8c9c, align 1
  %v1_8ca0 = and i8 %v3_8c9c, -16
  %v1_8ca4 = or i8 %v1_8ca0, 5
  store i8 %v1_8ca4, i8* %v2_8c9c, align 1
  %v0_8cb0 = load i32, i32* %r4.global-to-local, align 4
  %v1_8cb0 = add i32 %v0_8cb0, 38
  store i32 %v1_8cb0, i32* @r5, align 4
  %v3_8cb4 = add i32 %v0_8cb0, 39
  %v4_8cb4 = inttoptr i32 %v3_8cb4 to i8*
  store i8 %v5_89c0, i8* %v4_8cb4, align 1
  store i32 %v5_8bb0, i32* %r2.global-to-local, align 4
  %v2_8cbc = load i32, i32* @r5, align 4
  %v3_8cbc = add i32 %v2_8cbc, 2
  %v4_8cbc = inttoptr i32 %v3_8cbc to i16*
  store i16 %v5_8bc4, i16* %v4_8cbc, align 2
  store i32 %v4_8cc0, i32* %r3.global-to-local, align 4
  store i32 %v1_89e4, i32* %r1.global-to-local, align 4
  %v0_8cc8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8cc8, label %.thread26, label %bb83

.thread26:                                        ; preds = %.thread25
  %v2_8ccc28 = load i32, i32* @r5, align 4
  %v3_8ccc29 = add i32 %v2_8ccc28, 4
  %v4_8ccc30 = inttoptr i32 %v3_8ccc29 to i16*
  store i16 %v1_8ccc27, i16* %v4_8ccc30, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  br label %bb84

bb83:                                             ; preds = %.thread25
  store i32 64, i32* %r2.global-to-local, align 4
  %v2_8ccc = load i32, i32* @r5, align 4
  %v3_8ccc = add i32 %v2_8ccc, 4
  %v4_8ccc = inttoptr i32 %v3_8ccc to i16*
  store i16 %v1_8ccc27, i16* %v4_8ccc, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  %v1_8cd4 = load i32, i32* %r2.global-to-local, align 4
  %v2_8cd4 = trunc i32 %v1_8cd4 to i16
  %v3_8cd4 = load i32, i32* @r5, align 4
  %v4_8cd4 = add i32 %v3_8cd4, 6
  %v5_8cd4 = inttoptr i32 %v4_8cd4 to i16*
  store i16 %v2_8cd4, i16* %v5_8cd4, align 2
  br label %bb84

bb84:                                             ; preds = %.thread26, %bb83
  %v0_8cd8 = load i32, i32* %r1.global-to-local, align 4
  %v1_8cd8 = trunc i32 %v0_8cd8 to i8
  %v2_8cd8 = load i32, i32* @r5, align 4
  %v3_8cd8 = add i32 %v2_8cd8, 8
  %v4_8cd8 = inttoptr i32 %v3_8cd8 to i8*
  store i8 %v1_8cd8, i8* %v4_8cd8, align 1
  %v0_8cdc = load i32, i32* %r3.global-to-local, align 4
  %v1_8cdc = trunc i32 %v0_8cdc to i8
  %v2_8cdc = load i32, i32* @r5, align 4
  %v3_8cdc = add i32 %v2_8cdc, 9
  %v4_8cdc = inttoptr i32 %v3_8cdc to i8*
  store i8 %v1_8cdc, i8* %v4_8cdc, align 1
  %v0_8ce0 = call i32 @function_e29c()
  store i32 %v0_8ce0, i32* %r0.global-to-local, align 4
  store i32 %v1_8b00, i32* %r1.global-to-local, align 4
  store i1 %v2_8cec, i1* %cpsr_z.global-to-local, align 1
  %v1_8cf0 = sub i32 1023, %v0_8ce0
  store i32 %v1_8cf0, i32* %r3.global-to-local, align 4
  br i1 %v2_8cec, label %.thread, label %.thread10

.thread:                                          ; preds = %bb84
  %v2_8cf8 = load i32, i32* @r5, align 4
  %v3_8cf8 = add i32 %v2_8cf8, 16
  %v4_8cf8 = inttoptr i32 %v3_8cf8 to i32*
  store i32 %v1_8cf0, i32* %v4_8cf8, align 4
  br label %bb85

.thread10:                                        ; preds = %bb84
  %v1_8cf4 = load i32, i32* %r4.global-to-local, align 4
  %v2_8cf4 = add i32 %v1_8cf4, 16
  %v3_8cf4 = inttoptr i32 %v2_8cf4 to i32*
  %v4_8cf4 = load i32, i32* %v3_8cf4, align 4
  store i32 %v4_8cf4, i32* %r3.global-to-local, align 4
  %v2_8cfc = load i32, i32* @r5, align 4
  %v3_8cfc = add i32 %v2_8cfc, 16
  %v4_8cfc = inttoptr i32 %v3_8cfc to i32*
  store i32 %v4_8cf4, i32* %v4_8cfc, align 4
  br label %bb85

bb85:                                             ; preds = %.thread, %.thread10
  %v1_8d00 = load i32, i32* @r5, align 4
  %v2_8d00 = add i32 %v1_8d00, 12
  %v3_8d00 = inttoptr i32 %v2_8d00 to i32*
  store i32 %v0_8ce0, i32* %v3_8d00, align 4
  %v3_8d04 = load i32, i32* %stack_var_-44, align 4
  %v0_8d08 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d08 = add i32 %v0_8d08, 58
  store i32 %v1_8d08, i32* @r6, align 4
  store i32 %v4_8d0c, i32* %r2.global-to-local, align 4
  %v1_8d10 = add i32 %v3_8d04, 1
  store i32 %v1_8d10, i32* @r4, align 4
  store i32 %v4_8d14, i32* %r3.global-to-local, align 4
  %v1_8d18 = load i32, i32* @sl, align 4
  %v9_8d18 = icmp eq i32 %v1_8d10, %v1_8d18
  store i1 %v9_8d18, i1* %cpsr_z.global-to-local, align 1
  %v0_8d1c = load i32, i32* @r7, align 4
  %v1_8d1c = trunc i32 %v0_8d1c to i16
  %v3_8d1c = add i32 %v0_8d08, 62
  %v4_8d1c = inttoptr i32 %v3_8d1c to i16*
  store i16 %v1_8d1c, i16* %v4_8d1c, align 2
  %v0_8d20 = load i32, i32* %r2.global-to-local, align 4
  %v1_8d20 = trunc i32 %v0_8d20 to i16
  %v2_8d20 = load i32, i32* @r6, align 4
  %v3_8d20 = inttoptr i32 %v2_8d20 to i16*
  store i16 %v1_8d20, i16* %v3_8d20, align 2
  %v0_8d24 = load i32, i32* %r3.global-to-local, align 4
  %v1_8d24 = trunc i32 %v0_8d24 to i16
  %v2_8d24 = load i32, i32* @r6, align 4
  %v3_8d24 = add i32 %v2_8d24, 2
  %v4_8d24 = inttoptr i32 %v3_8d24 to i16*
  store i16 %v1_8d24, i16* %v4_8d24, align 2
  %v0_8d28 = load i32, i32* @r4, align 4
  store i32 %v0_8d28, i32* %stack_var_-44, align 4
  %v5_8d2c = icmp slt i32 %v1_8d10, %v1_8d18
  br i1 %v5_8d2c, label %dec_label_pc_8bd4, label %dec_label_pc_8d30

dec_label_pc_8d30:                                ; preds = %bb85
  %v1_8d38 = add i32 %v6_8a54, 8
  store i32 %v1_8d38, i32* %r4.global-to-local, align 4
  %v1_8d3c = add i32 %v6_8a54, 66
  store i32 %v1_8d3c, i32* %r5.global-to-local, align 4
  %v0_8d4c.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_8d48.preheader

dec_label_pc_8d48.preheader:                      ; preds = %dec_label_pc_8d30, %dec_label_pc_8fe0
  %v0_8d4c.pre = phi i32 [ %v0_8d4c.pre.pre, %dec_label_pc_8d30 ], [ 0, %dec_label_pc_8fe0 ]
  %stack_var_-132.0.ph = phi i32 [ %v1_8d3c, %dec_label_pc_8d30 ], [ %v1_8fec, %dec_label_pc_8fe0 ]
  %stack_var_-136.0.ph = phi i32 [ %v1_8d38, %dec_label_pc_8d30 ], [ %v1_8fe8, %dec_label_pc_8fe0 ]
  %v2_8f9c = icmp eq i32 %v1_8b00, 0
  %v2_8de4 = ptrtoint i32* %stack_var_-48 to i32
  %v2_8dfc = ptrtoint i32* %stack_var_-52 to i32
  %v2_8e0c = ptrtoint i32* %stack_var_-56 to i32
  %v2_8e18 = ptrtoint i32* %stack_var_-54 to i32
  %v2_8e2c = icmp eq i32 %v1_8a74, 0
  %v2_8d8c = icmp eq i32 %v6_8aa8, -1
  %v7_8d8c = icmp eq i32 %v6_8aa8, -1
  br label %dec_label_pc_8d48

dec_label_pc_8d48:                                ; preds = %dec_label_pc_8d48, %dec_label_pc_8e34, %dec_label_pc_8d48.preheader
  %v0_8d4c = phi i32 [ %v0_8d4c.pre, %dec_label_pc_8d48.preheader ], [ 0, %dec_label_pc_8d48 ], [ %v1_8ed0, %dec_label_pc_8e34 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_8d4c = icmp eq i32 %v0_8d4c, 0
  store i1 %v2_8d4c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_8d4c, label %dec_label_pc_8d48, label %dec_label_pc_8d58

dec_label_pc_8d58:                                ; preds = %dec_label_pc_8d48
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8d5c

dec_label_pc_8d5c:                                ; preds = %dec_label_pc_8e34, %dec_label_pc_8d58
  %v1_8d70 = phi i32 [ %v1_8ecc, %dec_label_pc_8e34 ], [ 0, %dec_label_pc_8d58 ]
  %v5_8d60 = mul i32 %v1_8d70, 24
  %v1_8d64 = load i32, i32* @sb, align 4
  %v2_8d64 = add i32 %v1_8d64, %v5_8d60
  store i32 %v2_8d64, i32* %r3.global-to-local, align 4
  store i32 %v2_8988, i32* %r4.global-to-local, align 4
  %v1_8d6c = add i32 %v2_8d64, 20
  %v2_8d6c = inttoptr i32 %v1_8d6c to i8*
  %v3_8d6c = load i8, i8* %v2_8d6c, align 1
  %v4_8d6c = zext i8 %v3_8d6c to i32
  store i32 %v4_8d6c, i32* %r2.global-to-local, align 4
  %v4_8d70 = mul i32 %v1_8d70, 4
  %v5_8d70 = add i32 %v4_8d70, %v2_8988
  %v6_8d70 = inttoptr i32 %v5_8d70 to i32*
  %v7_8d70 = load i32, i32* %v6_8d70, align 4
  store i32 %v7_8d70, i32* @r5, align 4
  %v7_8d74 = icmp eq i8 %v3_8d6c, 31
  store i1 %v7_8d74, i1* %cpsr_z.global-to-local, align 1
  %v1_8d78 = add i32 %v7_8d70, 24
  store i32 %v1_8d78, i32* @r7, align 4
  %v1_8d7c = add i32 %v7_8d70, 38
  store i32 %v1_8d7c, i32* @r6, align 4
  %v1_8d80 = add i32 %v7_8d70, 58
  store i32 %v1_8d80, i32* @r8, align 4
  %tmp90 = icmp ult i8 %v3_8d6c, 32
  br i1 %tmp90, label %dec_label_pc_8ee0, label %dec_label_pc_8d88

dec_label_pc_8d88:                                ; preds = %dec_label_pc_8d5c
  store i32 %v6_8aa8, i32* %r1.global-to-local, align 4
  store i1 %v7_8d8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8d8c, label %dec_label_pc_8f40, label %dec_label_pc_8d94

dec_label_pc_8d94:                                ; preds = %dec_label_pc_8ee0, %dec_label_pc_8d88
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_8d9c = load i32, i32* @fp, align 4
  %v9_8d9c = icmp eq i32 %v0_8d9c, 65535
  store i1 %v9_8d9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8d9c, label %dec_label_pc_8f58, label %dec_label_pc_8da4

dec_label_pc_8da4:                                ; preds = %dec_label_pc_8f40.dec_label_pc_8da4_crit_edge, %dec_label_pc_8d94
  %v1_8da8 = phi i32 [ %v1_8da8.pre, %dec_label_pc_8f40.dec_label_pc_8da4_crit_edge ], [ 65535, %dec_label_pc_8d94 ]
  store i32 %v3_8b08, i32* %r2.global-to-local, align 4
  %v9_8da8 = icmp eq i32 %v3_8b08, %v1_8da8
  store i1 %v9_8da8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8da8, label %dec_label_pc_8f80, label %dec_label_pc_8db0

dec_label_pc_8db0:                                ; preds = %dec_label_pc_8f58.dec_label_pc_8db0_crit_edge, %dec_label_pc_8da4
  %v1_8db4 = phi i32 [ %v1_8db4.pre, %dec_label_pc_8f58.dec_label_pc_8db0_crit_edge ], [ %v1_8da8, %dec_label_pc_8da4 ]
  store i32 %v3_8b0c, i32* %r3.global-to-local, align 4
  %v9_8db4 = icmp eq i32 %v3_8b0c, %v1_8db4
  store i1 %v9_8db4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8db4, label %dec_label_pc_8f94, label %dec_label_pc_8dbc

dec_label_pc_8dbc:                                ; preds = %dec_label_pc_8f80, %dec_label_pc_8db0
  store i32 %v1_8b00, i32* @r4, align 4
  store i1 %v2_8f9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f9c, label %dec_label_pc_8fb0, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_8dbc
  %v1_8dc4 = load i32, i32* @r5, align 4
  %v2_8dc4 = add i32 %v1_8dc4, 16
  %v3_8dc4 = inttoptr i32 %v2_8dc4 to i32*
  %v4_8dc4 = load i32, i32* %v3_8dc4, align 4
  store i32 %v4_8dc4, i32* %r3.global-to-local, align 4
  %v2_8dc8 = load i32, i32* @r6, align 4
  %v3_8dc8 = add i32 %v2_8dc8, 16
  %v4_8dc8 = inttoptr i32 %v3_8dc8 to i32*
  store i32 %v4_8dc4, i32* %v4_8dc8, align 4
  br label %dec_label_pc_8dd0

dec_label_pc_8dd0:                                ; preds = %bb88, %.thread11, %dec_label_pc_8fb0
  %v0_8dd0 = call i32 @function_e29c()
  store i32 %v0_8dd0, i32* %r0.global-to-local, align 4
  store i32 %v0_8dd0, i32* %stack_var_-48, align 4
  %v0_8dd8 = call i32 @function_e29c()
  store i32 %v0_8dd8, i32* %r0.global-to-local, align 4
  store i32 %v0_8dd8, i32* %stack_var_-52, align 4
  %v0_8de0 = call i32 @function_e29c()
  store i32 %v2_8de4, i32* %r1.global-to-local, align 4
  store i32 %v0_8de0, i32* %stack_var_-56, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_8df0 = load i32, i32* @r7, align 4
  store i32 %v0_8df0, i32* %r0.global-to-local, align 4
  %v3_8df4 = call i32 @function_10b90(i32 %v0_8df0, i32 %v2_8de4, i32 4)
  %v0_8df8 = load i32, i32* @r7, align 4
  %v1_8df8 = add i32 %v0_8df8, 6
  store i32 %v1_8df8, i32* %r0.global-to-local, align 4
  store i32 %v2_8dfc, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_8e04 = call i32 @function_10b90(i32 %v1_8df8, i32 %v2_8dfc, i32 4)
  %v0_8e08 = load i32, i32* @r7, align 4
  %v1_8e08 = add i32 %v0_8e08, 4
  store i32 %v1_8e08, i32* %r0.global-to-local, align 4
  store i32 %v2_8e0c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8e14 = call i32 @function_10b90(i32 %v1_8e08, i32 %v2_8e0c, i32 2)
  store i32 %v2_8e18, i32* %r1.global-to-local, align 4
  %v0_8e1c = load i32, i32* @r7, align 4
  %v1_8e1c = add i32 %v0_8e1c, 10
  store i32 %v1_8e1c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8e24 = call i32 @function_10b90(i32 %v1_8e1c, i32 %v2_8e18, i32 2)
  store i32 %v3_8e24, i32* %r0.global-to-local, align 4
  store i32 %v1_8a74, i32* %r1.global-to-local, align 4
  store i1 %v2_8e2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8e2c, label %dec_label_pc_8e34, label %dec_label_pc_8fbc

dec_label_pc_8e34:                                ; preds = %dec_label_pc_8dd0, %dec_label_pc_8fbc
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_8e38 = load i32, i32* @r5, align 4
  %v3_8e38 = add i32 %v2_8e38, 10
  %v4_8e38 = inttoptr i32 %v3_8e38 to i16*
  store i16 0, i16* %v4_8e38, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8e40 = load i32, i32* @r5, align 4
  store i32 %v0_8e40, i32* @r0, align 4
  %v2_8e44 = call i32 @function_c848(i32 %v0_8e40, i32 20)
  %v3_8e44 = trunc i32 %v2_8e44 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_8e4c = load i32, i32* @r5, align 4
  %v4_8e4c = add i32 %v3_8e4c, 10
  %v5_8e4c = inttoptr i32 %v4_8e4c to i16*
  store i16 %v3_8e44, i16* %v5_8e4c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8e54 = load i32, i32* %r3.global-to-local, align 4
  %v1_8e54 = trunc i32 %v0_8e54 to i16
  %v2_8e54 = load i32, i32* @r6, align 4
  %v3_8e54 = add i32 %v2_8e54, 10
  %v4_8e54 = inttoptr i32 %v3_8e54 to i16*
  store i16 %v1_8e54, i16* %v4_8e54, align 2
  %v0_8e58 = load i32, i32* @r6, align 4
  store i32 %v0_8e58, i32* @r0, align 4
  %v2_8e5c = call i32 @function_c848(i32 %v0_8e58, i32 20)
  %v3_8e5c = trunc i32 %v2_8e5c to i16
  store i32 %v2_8e5c, i32* %r0.global-to-local, align 4
  %v3_8e60 = load i32, i32* @r6, align 4
  %v4_8e60 = add i32 %v3_8e60, 10
  %v5_8e60 = inttoptr i32 %v4_8e60 to i16*
  store i16 %v3_8e5c, i16* %v5_8e60, align 2
  store i32 0, i32* @r4, align 4
  %v0_8e68 = load i32, i32* @r8, align 4
  store i32 %v0_8e68, i32* @r1, align 4
  %v1_8e6c = add i32 %v0_8e68, 4
  %v2_8e6c = inttoptr i32 %v1_8e6c to i16*
  %v3_8e6c = load i16, i16* %v2_8e6c, align 2
  %v4_8e6c = zext i16 %v3_8e6c to i32
  store i32 %v4_8e6c, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-136.0.ph, i32* %r3.global-to-local, align 4
  %v3_8e74 = add i32 %v0_8e68, 6
  %v4_8e74 = inttoptr i32 %v3_8e74 to i16*
  store i16 0, i16* %v4_8e74, align 2
  %v0_8e78 = load i32, i32* @r6, align 4
  store i32 %v0_8e78, i32* %r0.global-to-local, align 4
  %v4_8e7c = call i32 @function_c898(i32 %v0_8e78, i32 %v0_8e68, i32 %v4_8e6c, i32 %stack_var_-136.0.ph)
  %v5_8e7c = trunc i32 %v4_8e7c to i16
  store i32 %v4_8e7c, i32* %r0.global-to-local, align 4
  %v3_8e80 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8e80, i32* %r2.global-to-local, align 4
  %v3_8e84 = mul i32 %v3_8e80, 32
  store i32 %v3_8e84, i32* %r3.global-to-local, align 4
  %v0_8e88 = load i32, i32* @r5, align 4
  %v1_8e88 = add i32 %v0_8e88, 16
  %v2_8e88 = inttoptr i32 %v1_8e88 to i32*
  %v3_8e88 = load i32, i32* %v2_8e88, align 4
  %v5_8e8c = mul i32 %v3_8e80, 24
  store i32 %v5_8e8c, i32* %r3.global-to-local, align 4
  %v1_8e90 = load i32, i32* @sb, align 4
  %v2_8e90 = add i32 %v1_8e90, %v5_8e8c
  store i32 %v2_8e90, i32* @lr, align 4
  %v2_8e94 = add i32 %v2_8e90, 4
  %v3_8e94 = inttoptr i32 %v2_8e94 to i32*
  store i32 %v3_8e88, i32* %v3_8e94, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_8e9c = load i32, i32* @r8, align 4
  %v4_8e9c = add i32 %v3_8e9c, 6
  %v5_8e9c = inttoptr i32 %v4_8e9c to i16*
  store i16 %v5_8e7c, i16* %v5_8e9c, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_8ea4 = load i32, i32* %r1.global-to-local, align 4
  %v1_8ea4 = trunc i32 %v0_8ea4 to i16
  %v2_8ea4 = load i32, i32* %r3.global-to-local, align 4
  %v3_8ea4 = load i32, i32* @sb, align 4
  %v4_8ea4 = add i32 %v3_8ea4, %v2_8ea4
  %v5_8ea4 = inttoptr i32 %v4_8ea4 to i16*
  store i16 %v1_8ea4, i16* %v5_8ea4, align 2
  %v0_8ea8 = load i32, i32* @r4, align 4
  %v1_8ea8 = trunc i32 %v0_8ea8 to i16
  %v2_8ea8 = load i32, i32* @lr, align 4
  %v3_8ea8 = add i32 %v2_8ea8, 2
  %v4_8ea8 = inttoptr i32 %v3_8ea8 to i16*
  store i16 %v1_8ea8, i16* %v4_8ea8, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8eb0 = load i32, i32* @r5, align 4
  store i32 %v0_8eb0, i32* %r1.global-to-local, align 4
  store i32 %v3_8abc, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-132.0.ph, i32* %r2.global-to-local, align 4
  %v0_8ebc = load i32, i32* @lr, align 4
  %v0_8ec0 = load i32, i32* %ip.global-to-local, align 4
  %v6_8ec4 = call i32 @function_11d70(i32 %v3_8abc, i32 %v0_8eb0, i32 %stack_var_-132.0.ph, i32 16384, i32 %v0_8ebc, i32 %v0_8ec0)
  %v3_8ec8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8ec8, i32* %r3.global-to-local, align 4
  %v1_8ecc = add i32 %v3_8ec8, 1
  store i32 %v1_8ecc, i32* %r0.global-to-local, align 4
  %v1_8ed0 = load i32, i32* @sl, align 4
  %v9_8ed0 = icmp eq i32 %v1_8ecc, %v1_8ed0
  store i1 %v9_8ed0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8ecc, i32* %stack_var_-44, align 4
  %v6_8ed8 = icmp slt i32 %v1_8ecc, %v1_8ed0
  br i1 %v6_8ed8, label %dec_label_pc_8d5c, label %dec_label_pc_8d48

dec_label_pc_8ee0:                                ; preds = %dec_label_pc_8d5c
  %v1_8ee0 = add i32 %v2_8d64, 16
  %v2_8ee0 = inttoptr i32 %v1_8ee0 to i32*
  %v3_8ee0 = load i32, i32* %v2_8ee0, align 4
  store i32 %v3_8ee0, i32* %r4.global-to-local, align 4
  %v0_8ee4 = call i32 @function_e29c()
  store i32 %v0_8ee4, i32* %r0.global-to-local, align 4
  %v3_8ee8 = load i32, i32* %stack_var_-44, align 4
  %v5_8ef0 = mul i32 %v3_8ee8, 24
  %v0_8ef4 = load i32, i32* %r4.global-to-local, align 4
  %v1_8ef4 = and i32 %v0_8ef4, 16711680
  store i32 %v1_8ef4, i32* %ip.global-to-local, align 4
  %v3_8ef8 = udiv i32 %v0_8ef4, 16777216
  %v4_8efc = udiv i32 %v1_8ef4, 256
  %v5_8efc = or i32 %v4_8efc, %v3_8ef8
  store i32 %v5_8efc, i32* %r2.global-to-local, align 4
  %v1_8f00 = load i32, i32* @sb, align 4
  %v2_8f00 = add i32 %v1_8f00, %v5_8ef0
  store i32 %v2_8f00, i32* %r1.global-to-local, align 4
  %v1_8f04 = and i32 %v0_8ef4, 65280
  store i32 %v1_8f04, i32* %r3.global-to-local, align 4
  %v1_8f08 = add i32 %v2_8f00, 20
  %v2_8f08 = inttoptr i32 %v1_8f08 to i8*
  %v3_8f08 = load i8, i8* %v2_8f08, align 1
  %v4_8f08 = zext i8 %v3_8f08 to i32
  store i32 %v4_8f08, i32* %ip.global-to-local, align 4
  %v5_8f10 = call i32 @llvm.bswap.i32(i32 %v0_8ef4)
  %v7_8f14 = lshr i32 %v0_8ee4, %v4_8f08
  %v8_8f14 = add i32 %v7_8f14, %v5_8f10
  store i32 %v8_8f14, i32* %r2.global-to-local, align 4
  %v1_8f18 = and i32 %v8_8f14, 16711680
  store i32 %v1_8f18, i32* %r0.global-to-local, align 4
  store i32 %v6_8aa8, i32* %r1.global-to-local, align 4
  %v5_8f30 = call i32 @llvm.bswap.i32(i32 %v8_8f14)
  store i32 %v5_8f30, i32* %r3.global-to-local, align 4
  store i1 %v7_8d8c, i1* %cpsr_z.global-to-local, align 1
  %v1_8f38 = load i32, i32* @r5, align 4
  %v2_8f38 = add i32 %v1_8f38, 16
  %v3_8f38 = inttoptr i32 %v2_8f38 to i32*
  store i32 %v5_8f30, i32* %v3_8f38, align 4
  br i1 %v2_8d8c, label %dec_label_pc_8f40, label %dec_label_pc_8d94

dec_label_pc_8f40:                                ; preds = %dec_label_pc_8ee0, %dec_label_pc_8d88
  %v0_8f40 = call i32 @function_e29c()
  store i32 %v0_8f40, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_8f4c = load i32, i32* @fp, align 4
  %v9_8f4c = icmp eq i32 %v0_8f4c, 65535
  store i1 %v9_8f4c, i1* %cpsr_z.global-to-local, align 1
  %v1_8f50 = load i32, i32* @r5, align 4
  %v2_8f50 = add i32 %v1_8f50, 12
  %v3_8f50 = inttoptr i32 %v2_8f50 to i32*
  store i32 %v0_8f40, i32* %v3_8f50, align 4
  br i1 %v9_8f4c, label %dec_label_pc_8f58, label %dec_label_pc_8f40.dec_label_pc_8da4_crit_edge

dec_label_pc_8f40.dec_label_pc_8da4_crit_edge:    ; preds = %dec_label_pc_8f40
  %v1_8da8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_8da4

dec_label_pc_8f58:                                ; preds = %dec_label_pc_8f40, %dec_label_pc_8d94
  %v0_8f58 = call i32 @function_e29c()
  %v3_8f60 = urem i32 %v0_8f58, 65536
  store i32 %v3_8f60, i32* %r0.global-to-local, align 4
  store i32 %v3_8b08, i32* %r2.global-to-local, align 4
  %v1_8f6c = sub nsw i32 999, %v3_8f60
  store i32 %v1_8f6c, i32* %r3.global-to-local, align 4
  %v1_8f70 = load i32, i32* %r4.global-to-local, align 4
  %v9_8f70 = icmp eq i32 %v3_8b08, %v1_8f70
  store i1 %v9_8f70, i1* %cpsr_z.global-to-local, align 1
  %v1_8f74 = trunc i32 %v0_8f58 to i16
  %v2_8f74 = load i32, i32* @r5, align 4
  %v3_8f74 = add i32 %v2_8f74, 4
  %v4_8f74 = inttoptr i32 %v3_8f74 to i16*
  store i16 %v1_8f74, i16* %v4_8f74, align 2
  %v0_8f78 = load i32, i32* %r3.global-to-local, align 4
  %v1_8f78 = trunc i32 %v0_8f78 to i16
  %v2_8f78 = load i32, i32* @r6, align 4
  %v3_8f78 = add i32 %v2_8f78, 4
  %v4_8f78 = inttoptr i32 %v3_8f78 to i16*
  store i16 %v1_8f78, i16* %v4_8f78, align 2
  br i1 %v9_8f70, label %dec_label_pc_8f80, label %dec_label_pc_8f58.dec_label_pc_8db0_crit_edge

dec_label_pc_8f58.dec_label_pc_8db0_crit_edge:    ; preds = %dec_label_pc_8f58
  %v1_8db4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_8db0

dec_label_pc_8f80:                                ; preds = %dec_label_pc_8f58, %dec_label_pc_8da4
  %v0_8f80 = call i32 @function_e29c()
  %v1_8f80 = trunc i32 %v0_8f80 to i16
  store i32 %v0_8f80, i32* %r0.global-to-local, align 4
  store i32 %v3_8b0c, i32* %r3.global-to-local, align 4
  %v1_8f88 = load i32, i32* %r4.global-to-local, align 4
  %v9_8f88 = icmp eq i32 %v3_8b0c, %v1_8f88
  store i1 %v9_8f88, i1* %cpsr_z.global-to-local, align 1
  %v3_8f8c = load i32, i32* @r5, align 4
  %v4_8f8c = add i32 %v3_8f8c, 58
  %v5_8f8c = inttoptr i32 %v4_8f8c to i16*
  store i16 %v1_8f80, i16* %v5_8f8c, align 2
  br i1 %v9_8f88, label %dec_label_pc_8f94, label %dec_label_pc_8dbc

dec_label_pc_8f94:                                ; preds = %dec_label_pc_8f80, %dec_label_pc_8db0
  %v0_8f94 = call i32 @function_e29c()
  %v1_8f94 = trunc i32 %v0_8f94 to i16
  store i32 %v0_8f94, i32* %r0.global-to-local, align 4
  store i32 %v1_8b00, i32* @r4, align 4
  store i1 %v2_8f9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f9c, label %.thread31, label %bb88

.thread31:                                        ; preds = %dec_label_pc_8f94
  %v3_8fa432 = load i32, i32* @r8, align 4
  %v4_8fa433 = add i32 %v3_8fa432, 2
  %v5_8fa434 = inttoptr i32 %v4_8fa433 to i16*
  store i16 %v1_8f94, i16* %v5_8fa434, align 2
  br label %dec_label_pc_8fb0

bb88:                                             ; preds = %dec_label_pc_8f94
  %v1_8fa0 = load i32, i32* @r5, align 4
  %v2_8fa0 = add i32 %v1_8fa0, 16
  %v3_8fa0 = inttoptr i32 %v2_8fa0 to i32*
  %v4_8fa0 = load i32, i32* %v3_8fa0, align 4
  store i32 %v4_8fa0, i32* %r3.global-to-local, align 4
  %v3_8fa4 = load i32, i32* @r8, align 4
  %v4_8fa4 = add i32 %v3_8fa4, 2
  %v5_8fa4 = inttoptr i32 %v4_8fa4 to i16*
  store i16 %v1_8f94, i16* %v5_8fa4, align 2
  %v1_8fa8 = load i32, i32* %r3.global-to-local, align 4
  %v2_8fa8 = load i32, i32* @r6, align 4
  %v3_8fa8 = add i32 %v2_8fa8, 16
  %v4_8fa8 = inttoptr i32 %v3_8fa8 to i32*
  store i32 %v1_8fa8, i32* %v4_8fa8, align 4
  br label %dec_label_pc_8dd0

dec_label_pc_8fb0:                                ; preds = %.thread31, %dec_label_pc_8dbc
  %v0_8fb0 = call i32 @function_e29c()
  store i32 %v0_8fb0, i32* %r0.global-to-local, align 4
  %v1_8fb4 = load i32, i32* @r6, align 4
  %v2_8fb4 = add i32 %v1_8fb4, 16
  %v3_8fb4 = inttoptr i32 %v2_8fb4 to i32*
  store i32 %v0_8fb0, i32* %v3_8fb4, align 4
  br label %dec_label_pc_8dd0

dec_label_pc_8fbc:                                ; preds = %dec_label_pc_8dd0
  %v0_8fbc = load i32, i32* @r8, align 4
  %v1_8fbc = add i32 %v0_8fbc, 8
  store i32 %v1_8fbc, i32* %r0.global-to-local, align 4
  store i32 %v6_8a54, i32* %r1.global-to-local, align 4
  %v2_8fc4 = inttoptr i32 %v1_8fbc to i16*
  %v3_8fc4 = call i32 @function_e430(i16* %v2_8fc4, i32 %v6_8a54)
  store i32 %v3_8fc4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8e34

dec_label_pc_8fcc:                                ; preds = %dec_label_pc_8acc
  store i32 %v3_8abc, i32* %r0.global-to-local, align 4
  %v1_8fd0 = call i32 @function_115e0(i32 %v3_8abc)
  store i32 %v1_8fd0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8fd4

dec_label_pc_8fd4:                                ; preds = %dec_label_pc_896c, %dec_label_pc_8fcc
  %v1_8fdc = phi i32 [ %v3_8abc, %dec_label_pc_896c ], [ %v1_8fd0, %dec_label_pc_8fcc ]
  store i32 %v3_896c, i32* %r4.global-to-local, align 4
  store i32 %v6_896c, i32* %r5.global-to-local, align 4
  store i32 %v24_896c, i32* %fp.global-to-local, align 4
  ret i32 %v1_8fdc

dec_label_pc_8fe0:                                ; preds = %dec_label_pc_8af4
  %v1_8fe8 = add i32 %v6_8a54, 8
  store i32 %v1_8fe8, i32* %r1.global-to-local, align 4
  %v1_8fec = add i32 %v6_8a54, 66
  store i32 %v1_8fec, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_8d48.preheader

; uselistorder directives
  uselistorder i32 %v1_8fec, { 1, 0 }
  uselistorder i32 %v1_8fe8, { 1, 0 }
  uselistorder i16 %v1_8f94, { 1, 0 }
  uselistorder i32 %v0_8f94, { 1, 0 }
  uselistorder i32 %v0_8f80, { 1, 0 }
  uselistorder i32 %v3_8f60, { 1, 0 }
  uselistorder i32 %v0_8f58, { 1, 0 }
  uselistorder i32 %v5_8f30, { 1, 0 }
  uselistorder i32 %v0_8ef4, { 1, 2, 0, 3 }
  uselistorder i32 %v1_8ed0, { 1, 2, 0 }
  uselistorder i32 %v1_8ecc, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_8e80, { 1, 0, 2 }
  uselistorder i32 %v4_8e7c, { 1, 0 }
  uselistorder i32 %v0_8e68, { 1, 0, 2, 3 }
  uselistorder i32 %v2_8e5c, { 1, 0 }
  uselistorder i32 %v7_8d70, { 2, 1, 0, 3 }
  uselistorder i1 %v7_8d8c, { 2, 1, 0 }
  uselistorder i1 %v2_8f9c, { 2, 3, 1, 0 }
  uselistorder i32 %v0_8ce0, { 1, 0, 2 }
  uselistorder i32 %v3_8b5c, { 1, 0 }
  uselistorder i32 %v3_8b40, { 1, 2, 0 }
  uselistorder i32 %v1_8b3c, { 1, 0 }
  uselistorder i32 %v1_8b00, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_8afc, { 1, 0, 3, 2 }
  uselistorder i32 %v0_8af8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8af4, { 1, 0, 2, 3 }
  uselistorder i1 %v7_8aec, { 1, 0 }
  uselistorder i1 %v7_8ac0, { 1, 0 }
  uselistorder i32 %v3_8abc, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_8aa8, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_8a74, { 1, 2, 3, 0 }
  uselistorder i32 %v6_8a54, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_8a08, { 1, 2, 0 }
  uselistorder i32 %v1_89e4, { 3, 2, 1, 0 }
  uselistorder i32 %v6_89dc, { 1, 0 }
  uselistorder i32 %v6_89a0, { 2, 1, 3, 0 }
  uselistorder i32 %v2_8988, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r4.global-to-local, { 0, 6, 5, 7, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 28, 27, 29, 30, 32, 31, 33, 34, 36, 35, 38, 37, 0 }
  uselistorder i32* %r0.global-to-local, { 6, 7, 5, 8, 9, 11, 12, 10, 14, 13, 16, 15, 17, 4, 18, 19, 21, 20, 22, 23, 24, 25, 27, 26, 2, 28, 29, 32, 30, 31, 3, 1, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8fd4, { 1, 0 }
  uselistorder label %dec_label_pc_8e34, { 1, 0 }
  uselistorder label %dec_label_pc_8dd0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8d48, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8d48.preheader, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread25, { 1, 0 }
}

define i32 @function_9000(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9000:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_9000 = load i32, i32* @r4, align 4
  %v6_9000 = load i32, i32* @r5, align 4
  %v24_9000 = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_901c = call i32 @function_1295c(i32 %arg1, i32 4)
  %v0_9020 = load i32, i32* @r5, align 4
  store i32 %v0_9020, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9030 = load i32, i32* @r4, align 4
  %v5_9034 = inttoptr i32 %v0_9020 to i32*
  %v6_9034 = call i32 @function_8570(i32 %v0_9030, i32* %v5_9034, i32 2, i32 0, i32 %v2_901c)
  %v1_9040 = urem i32 %v6_9034, 256
  store i32 %v1_9040, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_904c = load i32, i32* @r5, align 4
  store i32 %v0_904c, i32* %r1.global-to-local, align 4
  %v0_9050 = load i32, i32* @r4, align 4
  %v5_9054 = trunc i32 %v6_9034 to i8
  %v6_9058 = inttoptr i32 %v0_904c to i32*
  %v7_9058 = call i32 @function_8570(i32 %v0_9050, i32* %v6_9058, i32 3, i32 65535, i32 %v6_9034)
  %v0_905c = load i32, i32* @r5, align 4
  store i32 %v0_905c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9058, i32* %fp.global-to-local, align 4
  %v0_906c = load i32, i32* @r4, align 4
  %v5_9070 = inttoptr i32 %v0_905c to i32*
  %v6_9070 = call i32 @function_8570(i32 %v0_906c, i32* %v5_9070, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_9078 = urem i32 %v6_9070, 256
  store i32 %v1_9078, i32* %ip.global-to-local, align 4
  %v0_907c = load i32, i32* @r5, align 4
  store i32 %v0_907c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9088 = load i32, i32* @r4, align 4
  %v6_9090 = inttoptr i32 %v0_907c to i32*
  %v7_9090 = call i32 @function_8570(i32 %v0_9088, i32* %v6_9090, i32 5, i32 1, i32 %v1_9078)
  %v1_909c = urem i32 %v7_9090, 256
  store i32 %v1_909c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_90a8 = load i32, i32* @r5, align 4
  store i32 %v0_90a8, i32* %r1.global-to-local, align 4
  %v0_90ac = load i32, i32* @r4, align 4
  %v5_90b4 = inttoptr i32 %v0_90a8 to i32*
  %v6_90b4 = call i32 @function_8570(i32 %v0_90ac, i32* %v5_90b4, i32 6, i32 65535, i32 %v1_909c)
  %v0_90bc = load i32, i32* @r5, align 4
  store i32 %v0_90bc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_90b4, i32* @r8, align 4
  %v0_90cc = load i32, i32* @r4, align 4
  %v5_90d0 = inttoptr i32 %v0_90bc to i32*
  %v6_90d0 = call i32 @function_8570(i32 %v0_90cc, i32* %v5_90d0, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_90d4 = load i32, i32* @r5, align 4
  store i32 %v0_90d4, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_90d0, i32* @r7, align 4
  %v0_90e4 = load i32, i32* @r4, align 4
  %v5_90e8 = inttoptr i32 %v0_90d4 to i32*
  %v6_90e8 = call i32 @function_8570(i32 %v0_90e4, i32* %v5_90e8, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_90f8 = load i32, i32* @r5, align 4
  store i32 %v0_90f8, i32* %r1.global-to-local, align 4
  %v0_90fc = load i32, i32* @r4, align 4
  %v5_9100 = inttoptr i32 %v0_90f8 to i32*
  %v6_9100 = call i32 @function_8570(i32 %v0_90fc, i32* %v5_9100, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9108 = urem i32 %v6_9100, 256
  store i32 %v1_9108, i32* %ip.global-to-local, align 4
  %v0_910c = load i32, i32* @r5, align 4
  store i32 %v0_910c, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9118 = load i32, i32* @r4, align 4
  %v5_9120 = inttoptr i32 %v0_910c to i32*
  %v6_9120 = call i32 @function_8570(i32 %v0_9118, i32* %v5_9120, i32 19, i32 0, i32 %v1_9108)
  %v0_9128 = load i32, i32* @r5, align 4
  store i32 %v0_9128, i32* %r1.global-to-local, align 4
  %v2_912c = load i32, i32* @global_var_212d8.46, align 4
  store i32 %v2_912c, i32* %r3.global-to-local, align 4
  store i32 %v6_9120, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9138 = load i32, i32* @r4, align 4
  %v5_913c = inttoptr i32 %v0_9128 to i32*
  %v6_913c = call i32 @function_8570(i32 %v0_9138, i32* %v5_913c, i32 25, i32 %v2_912c, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9150 = call i32 @function_11df4(i32 2, i32 3, i32 6)
  %v7_9154 = icmp eq i32 %v3_9150, -1
  store i1 %v7_9154, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9154, label %dec_label_pc_95f4, label %dec_label_pc_9160

dec_label_pc_9160:                                ; preds = %dec_label_pc_9000
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9168 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9168, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_917c = call i32 @function_11db0(i32 %v3_9150, i32 0, i32 3, i32 %v6_9168, i32 4)
  %v7_9180 = icmp eq i32 %v5_917c, -1
  store i1 %v7_9180, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9180, label %dec_label_pc_95ec, label %dec_label_pc_9188

dec_label_pc_9188:                                ; preds = %dec_label_pc_9160
  %v0_9188 = load i32, i32* @r8, align 4
  %v0_918c = load i32, i32* @r7, align 4
  %v0_9190 = load i32, i32* %fp.global-to-local, align 4
  %v0_9194 = load i32, i32* @r6, align 4
  %v1_9194 = urem i32 %v0_9194, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_919c = urem i32 %v0_9188, 65536
  store i32 %v3_919c, i32* %r3.global-to-local, align 4
  %v3_91a0 = urem i32 %v0_918c, 65536
  store i32 %v3_91a0, i32* %r4.global-to-local, align 4
  %v0_91a4 = load i32, i32* @sl, align 4
  %v2_91a4 = icmp eq i32 %v0_91a4, 0
  store i1 %v2_91a4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_91bc = urem i32 %v0_9190, 65536
  store i32 %v3_91bc, i32* @fp, align 4
  br i1 %v2_91a4, label %dec_label_pc_9600, label %dec_label_pc_91cc

dec_label_pc_91cc:                                ; preds = %dec_label_pc_9188
  %v3_918c = mul i32 %v0_918c, 65536
  %v3_9188 = mul i32 %v0_9188, 65536
  %v0_9190.not = or i32 %v0_9190, -65536
  %v1_91d0 = xor i32 %v0_9190.not, 65535
  %v3_91d4 = mul i32 %v6_90e8, 65536
  %v1_91d8 = add i32 %v3_91d4, 3407872
  %tmp67 = udiv i32 %v1_91d8, 256
  %v3_91ec = and i32 %tmp67, 65280
  %tmp68 = mul nsw i32 %v1_91d0, 256
  %v3_91f0 = and i32 %tmp68, 65280
  store i32 %v3_91f0, i32* %ip.global-to-local, align 4
  %v1_91f4 = add i32 %v3_91d4, 524288
  %v1_91fc = add i32 %v3_91d4, 1835008
  %tmp69 = udiv i32 %v1_91d0, 256
  %v4_9200 = urem i32 %tmp69, 256
  %v5_9200 = or i32 %v4_9200, %v3_91f0
  %v4_9208 = udiv i32 %v1_91d8, 16777216
  %v5_9208 = or i32 %v3_91ec, %v4_9208
  store i32 %v5_9208, i32* @r8, align 4
  %v3_9214 = udiv i32 %v1_91fc, 256
  %tmp70 = mul i32 %v0_9190, 256
  %v3_9218 = and i32 %tmp70, 65280
  store i32 %v3_9188, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v0_9190, 256
  %v4_9228 = urem i32 %tmp71, 256
  %v5_9228 = or i32 %v4_9228, %v3_9218
  %tmp72 = mul i32 %v0_9188, 256
  %v3_922c = and i32 %tmp72, 65280
  %v1_9230 = and i32 %v3_9214, 65280
  store i32 %v1_9230, i32* @r6, align 4
  store i32 %v3_918c, i32* %r1.global-to-local, align 4
  %tmp73 = mul i32 %v0_918c, 256
  %v3_923c = and i32 %tmp73, 65280
  %tmp74 = udiv i32 %v0_9188, 256
  %v4_9240 = urem i32 %tmp74, 256
  %v5_9240 = or i32 %v4_9240, %v3_922c
  store i32 %v5_9240, i32* @lr, align 4
  %v4_9244 = udiv i32 %v1_91fc, 16777216
  %v5_9244 = or i32 %v1_9230, %v4_9244
  store i32 %v5_9244, i32* %r3.global-to-local, align 4
  %tmp75 = udiv i32 %v0_918c, 256
  %v4_9248 = urem i32 %tmp75, 256
  %v5_9248 = or i32 %v4_9248, %v3_923c
  %tmp76 = udiv i32 %v1_91f4, 256
  %v3_924c = and i32 %tmp76, 65280
  store i32 %v3_924c, i32* @r5, align 4
  %v4_9260 = udiv i32 %v1_91f4, 16777216
  %v5_9260 = or i32 %v3_924c, %v4_9260
  store i32 %v5_9260, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %sext12 = mul nuw i32 %v5_9228, 65536
  %v4_92cc13 = sdiv i32 %sext12, 65536
  %sext8 = mul nuw i32 %v5_9244, 65536
  %v4_9330 = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_9200, 65536
  %v4_9334 = sdiv i32 %sext9, 65536
  %v1_933c = trunc i32 %v4_9330 to i16
  %v2_9364 = icmp eq i32 %v1_9194, 0
  %sext10 = mul nuw i32 %v5_9240, 65536
  %v4_9384 = sdiv i32 %sext10, 65536
  %sext11 = mul nuw i32 %v5_9248, 65536
  %v4_938c = sdiv i32 %sext11, 65536
  %v1_92c4 = trunc i32 %v6_9070 to i8
  br label %dec_label_pc_9268

dec_label_pc_9268:                                ; preds = %bb82, %dec_label_pc_91cc
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_9274 = call i32 @function_1295c(i32 1510, i32 4)
  store i32 %v2_901c, i32* %r2.global-to-local, align 4
  %v3_927c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_927c, i32* %r3.global-to-local, align 4
  %v2_9280 = load i32, i32* @r4, align 4
  %v5_9280 = mul i32 %v2_9280, 4
  %v6_9280 = add i32 %v5_9280, %v2_901c
  %v7_9280 = inttoptr i32 %v6_9280 to i32*
  store i32 %v2_9274, i32* %v7_9280, align 4
  %v0_9284 = load i32, i32* %r2.global-to-local, align 4
  %v1_9284 = load i32, i32* %r3.global-to-local, align 4
  %v4_9284 = mul i32 %v1_9284, 4
  %v5_9284 = add i32 %v4_9284, %v0_9284
  %v6_9284 = inttoptr i32 %v5_9284 to i32*
  %v7_9284 = load i32, i32* %v6_9284, align 4
  store i32 %v7_9284, i32* %r4.global-to-local, align 4
  %v1_9288 = inttoptr i32 %v7_9284 to i8*
  %v2_9288 = load i8, i8* %v1_9288, align 1
  %tmp = urem i8 %v2_9288, 16
  %v1_928c = zext i8 %tmp to i32
  %v1_9290 = or i32 %v1_928c, 64
  store i32 %v1_9290, i32* %r2.global-to-local, align 4
  %v1_9294 = trunc i32 %v1_9290 to i8
  store i8 %v1_9294, i8* %v1_9288, align 1
  %v0_9298 = load i32, i32* %r3.global-to-local, align 4
  %v5_929c = mul i32 %v0_9298, 24
  store i32 %v5_929c, i32* %r1.global-to-local, align 4
  %v0_92a0 = load i32, i32* %r4.global-to-local, align 4
  %v1_92a0 = inttoptr i32 %v0_92a0 to i8*
  %v2_92a0 = load i8, i8* %v1_92a0, align 1
  %v1_92a4 = and i8 %v2_92a0, -16
  %v1_92a8 = or i8 %v1_92a4, 5
  store i32 %v1_909c, i32* %r5.global-to-local, align 4
  store i8 %v1_92a8, i8* %v1_92a0, align 1
  store i32 %v6_9034, i32* %r2.global-to-local, align 4
  %v2_92b8 = load i32, i32* %r4.global-to-local, align 4
  %v3_92b8 = add i32 %v2_92b8, 1
  %v4_92b8 = inttoptr i32 %v3_92b8 to i8*
  store i8 %v5_9054, i8* %v4_92b8, align 1
  store i32 %v1_9078, i32* %r3.global-to-local, align 4
  %v0_92c0 = load i32, i32* %r5.global-to-local, align 4
  %v2_92c0 = icmp eq i32 %v0_92c0, 0
  store i1 %v2_92c0, i1* %cpsr_z.global-to-local, align 1
  %v2_92c4 = load i32, i32* %r4.global-to-local, align 4
  %v3_92c4 = add i32 %v2_92c4, 8
  %v4_92c4 = inttoptr i32 %v3_92c4 to i8*
  store i8 %v1_92c4, i8* %v4_92c4, align 1
  %v0_92c8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_92c8, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_9268
  store i32 %v4_92cc13, i32* %r5.global-to-local, align 4
  br label %bb77

bb:                                               ; preds = %dec_label_pc_9268
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v4_92cc13, i32* %r5.global-to-local, align 4
  %v3_92d0 = load i32, i32* %r4.global-to-local, align 4
  %v4_92d0 = add i32 %v3_92d0, 6
  %v5_92d0 = inttoptr i32 %v4_92d0 to i16*
  store i16 64, i16* %v5_92d0, align 2
  br label %bb77

bb77:                                             ; preds = %.thread, %bb
  %v2_92d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_92d8 = add i32 %v2_92d8, 9
  %v4_92d8 = inttoptr i32 %v3_92d8 to i8*
  store i8 47, i8* %v4_92d8, align 1
  %v0_92dc = load i32, i32* %r4.global-to-local, align 4
  %v1_92dc = add i32 %v0_92dc, 20
  store i32 %v1_92dc, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_92e4 = load i32, i32* %r5.global-to-local, align 4
  %v1_92e4 = trunc i32 %v0_92e4 to i16
  %v3_92e4 = add i32 %v0_92dc, 4
  %v4_92e4 = inttoptr i32 %v3_92e4 to i16*
  store i16 %v1_92e4, i16* %v4_92e4, align 2
  %v0_92e8 = load i32, i32* @r8, align 4
  %v1_92e8 = trunc i32 %v0_92e8 to i16
  %v2_92e8 = load i32, i32* %r4.global-to-local, align 4
  %v3_92e8 = add i32 %v2_92e8, 2
  %v4_92e8 = inttoptr i32 %v3_92e8 to i16*
  store i16 %v1_92e8, i16* %v4_92e8, align 2
  %v0_92ec = load i32, i32* %r3.global-to-local, align 4
  %v1_92ec = trunc i32 %v0_92ec to i16
  %v2_92ec = load i32, i32* %r2.global-to-local, align 4
  %v3_92ec = add i32 %v2_92ec, 2
  %v4_92ec = inttoptr i32 %v3_92ec to i16*
  store i16 %v1_92ec, i16* %v4_92ec, align 2
  store i32 %v6_913c, i32* %r3.global-to-local, align 4
  %v0_92f4 = load i32, i32* %r4.global-to-local, align 4
  %v1_92f4 = add i32 %v0_92f4, 24
  %v2_92f4 = inttoptr i32 %v1_92f4 to i8*
  %v3_92f4 = load i8, i8* %v2_92f4, align 1
  %v4_92f4 = zext i8 %v3_92f4 to i32
  store i32 %v4_92f4, i32* %r2.global-to-local, align 4
  %v2_92f8 = add i32 %v0_92f4, 12
  %v3_92f8 = inttoptr i32 %v2_92f8 to i32*
  store i32 %v6_913c, i32* %v3_92f8, align 4
  %v0_92fc = load i32, i32* %r2.global-to-local, align 4
  %v1_92fc = and i32 %v0_92fc, -241
  %v1_9300 = or i32 %v1_92fc, 64
  store i32 %v1_9300, i32* %r2.global-to-local, align 4
  %v0_9304 = load i32, i32* %r1.global-to-local, align 4
  %v1_9304 = load i32, i32* @sb, align 4
  %v2_9304 = add i32 %v1_9304, %v0_9304
  store i32 %v2_9304, i32* %r1.global-to-local, align 4
  %v1_9308 = add i32 %v2_9304, 16
  %v2_9308 = inttoptr i32 %v1_9308 to i32*
  %v3_9308 = load i32, i32* %v2_9308, align 4
  store i32 %v3_9308, i32* %r1.global-to-local, align 4
  %v1_930c = trunc i32 %v1_9300 to i8
  %v2_930c = load i32, i32* %r4.global-to-local, align 4
  %v3_930c = add i32 %v2_930c, 24
  %v4_930c = inttoptr i32 %v3_930c to i8*
  store i8 %v1_930c, i8* %v4_930c, align 1
  %v0_9310 = load i32, i32* %r4.global-to-local, align 4
  %v1_9310 = add i32 %v0_9310, 24
  %v2_9310 = inttoptr i32 %v1_9310 to i8*
  %v3_9310 = load i8, i8* %v2_9310, align 1
  %v1_9314 = and i8 %v3_9310, -16
  %v1_9318 = or i8 %v1_9314, 5
  store i8 %v1_9318, i8* %v2_9310, align 1
  %v0_9320 = load i32, i32* %r1.global-to-local, align 4
  %v1_9320 = load i32, i32* %r4.global-to-local, align 4
  %v2_9320 = add i32 %v1_9320, 16
  %v3_9320 = inttoptr i32 %v2_9320 to i32*
  store i32 %v0_9320, i32* %v3_9320, align 4
  %v0_9328 = load i32, i32* %r4.global-to-local, align 4
  %v1_9328 = add i32 %v0_9328, 24
  store i32 %v1_9328, i32* @r5, align 4
  %v3_932c = add i32 %v0_9328, 25
  %v4_932c = inttoptr i32 %v3_932c to i8*
  store i8 %v5_9054, i8* %v4_932c, align 1
  store i32 %v4_9330, i32* %r2.global-to-local, align 4
  store i32 %v4_9334, i32* %r3.global-to-local, align 4
  store i32 %v1_9078, i32* %r1.global-to-local, align 4
  %v2_933c = load i32, i32* @r5, align 4
  %v3_933c = add i32 %v2_933c, 2
  %v4_933c = inttoptr i32 %v3_933c to i16*
  store i16 %v1_933c, i16* %v4_933c, align 2
  %v0_9340 = load i32, i32* %r3.global-to-local, align 4
  %v1_9340 = trunc i32 %v0_9340 to i16
  %v2_9340 = load i32, i32* @r5, align 4
  %v3_9340 = add i32 %v2_9340, 4
  %v4_9340 = inttoptr i32 %v3_9340 to i16*
  store i16 %v1_9340, i16* %v4_9340, align 2
  %v0_9344 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9344, label %bb79, label %bb78

bb78:                                             ; preds = %bb77
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %bb77, %bb78
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_934c = load i32, i32* %r1.global-to-local, align 4
  %v1_934c = trunc i32 %v0_934c to i8
  %v2_934c = load i32, i32* @r5, align 4
  %v3_934c = add i32 %v2_934c, 8
  %v4_934c = inttoptr i32 %v3_934c to i8*
  store i8 %v1_934c, i8* %v4_934c, align 1
  %v0_9350 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9350, label %bb81, label %bb80

bb80:                                             ; preds = %bb79
  %v1_9350 = load i32, i32* %r2.global-to-local, align 4
  %v2_9350 = trunc i32 %v1_9350 to i16
  %v3_9350 = load i32, i32* @r5, align 4
  %v4_9350 = add i32 %v3_9350, 6
  %v5_9350 = inttoptr i32 %v4_9350 to i16*
  store i16 %v2_9350, i16* %v5_9350, align 2
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v0_9354 = load i32, i32* %r3.global-to-local, align 4
  %v1_9354 = trunc i32 %v0_9354 to i8
  %v2_9354 = load i32, i32* @r5, align 4
  %v3_9354 = add i32 %v2_9354, 9
  %v4_9354 = inttoptr i32 %v3_9354 to i8*
  store i8 %v1_9354, i8* %v4_9354, align 1
  %v0_9358 = call i32 @function_e29c()
  store i32 %v1_9194, i32* %r1.global-to-local, align 4
  store i1 %v2_9364, i1* %cpsr_z.global-to-local, align 1
  %v1_9368 = sub i32 1023, %v0_9358
  store i32 %v1_9368, i32* %r3.global-to-local, align 4
  br i1 %v2_9364, label %.thread14, label %.thread15

.thread14:                                        ; preds = %bb81
  %v2_9370 = load i32, i32* @r5, align 4
  %v3_9370 = add i32 %v2_9370, 16
  %v4_9370 = inttoptr i32 %v3_9370 to i32*
  store i32 %v1_9368, i32* %v4_9370, align 4
  br label %bb82

.thread15:                                        ; preds = %bb81
  %v1_936c = load i32, i32* %r4.global-to-local, align 4
  %v2_936c = add i32 %v1_936c, 16
  %v3_936c = inttoptr i32 %v2_936c to i32*
  %v4_936c = load i32, i32* %v3_936c, align 4
  store i32 %v4_936c, i32* %r3.global-to-local, align 4
  %v2_9374 = load i32, i32* @r5, align 4
  %v3_9374 = add i32 %v2_9374, 16
  %v4_9374 = inttoptr i32 %v3_9374 to i32*
  store i32 %v4_936c, i32* %v4_9374, align 4
  br label %bb82

bb82:                                             ; preds = %.thread14, %.thread15
  %v1_9378 = load i32, i32* @r5, align 4
  %v2_9378 = add i32 %v1_9378, 12
  %v3_9378 = inttoptr i32 %v2_9378 to i32*
  store i32 %v0_9358, i32* %v3_9378, align 4
  %v3_937c = load i32, i32* %stack_var_-44, align 4
  %v0_9380 = load i32, i32* %r4.global-to-local, align 4
  %v1_9380 = add i32 %v0_9380, 44
  store i32 %v1_9380, i32* @r6, align 4
  store i32 %v4_9384, i32* %r2.global-to-local, align 4
  %v1_9388 = add i32 %v3_937c, 1
  store i32 %v1_9388, i32* @r4, align 4
  store i32 %v4_938c, i32* %r3.global-to-local, align 4
  %v1_9390 = load i32, i32* @sl, align 4
  %v9_9390 = icmp eq i32 %v1_9388, %v1_9390
  store i1 %v9_9390, i1* %cpsr_z.global-to-local, align 1
  %v0_9394 = load i32, i32* @r7, align 4
  %v1_9394 = trunc i32 %v0_9394 to i16
  %v3_9394 = add i32 %v0_9380, 48
  %v4_9394 = inttoptr i32 %v3_9394 to i16*
  store i16 %v1_9394, i16* %v4_9394, align 2
  %v0_9398 = load i32, i32* %r2.global-to-local, align 4
  %v1_9398 = trunc i32 %v0_9398 to i16
  %v2_9398 = load i32, i32* @r6, align 4
  %v3_9398 = inttoptr i32 %v2_9398 to i16*
  store i16 %v1_9398, i16* %v3_9398, align 2
  %v0_939c = load i32, i32* %r3.global-to-local, align 4
  %v1_939c = trunc i32 %v0_939c to i16
  %v2_939c = load i32, i32* @r6, align 4
  %v3_939c = add i32 %v2_939c, 2
  %v4_939c = inttoptr i32 %v3_939c to i16*
  store i16 %v1_939c, i16* %v4_939c, align 2
  %v0_93a0 = load i32, i32* @r4, align 4
  store i32 %v0_93a0, i32* %stack_var_-44, align 4
  %v5_93a4 = icmp slt i32 %v1_9388, %v1_9390
  br i1 %v5_93a4, label %dec_label_pc_9268, label %dec_label_pc_93a8

dec_label_pc_93a8:                                ; preds = %bb82
  store i32 %v6_90e8, i32* %r5.global-to-local, align 4
  %v1_93b0 = add i32 %v6_90e8, 8
  store i32 %v1_93b0, i32* %r4.global-to-local, align 4
  %v0_93c0.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_93bc.preheader

dec_label_pc_93bc.preheader:                      ; preds = %dec_label_pc_93a8, %dec_label_pc_9600
  %v0_93c0.pre = phi i32 [ %v0_93c0.pre.pre, %dec_label_pc_93a8 ], [ 0, %dec_label_pc_9600 ]
  %stack_var_-124.0.ph = phi i32 [ %v1_93b0, %dec_label_pc_93a8 ], [ %v1_9608, %dec_label_pc_9600 ]
  %storemerge = add i32 %v6_90e8, 52
  store i32 %storemerge, i32* @r8, align 4
  %v2_95b4 = icmp eq i32 %v1_9194, 0
  %v2_95d0 = icmp eq i32 %v1_9108, 0
  %v2_93fc = icmp eq i32 %v6_913c, -1
  %v7_93fc = icmp eq i32 %v6_913c, -1
  br label %dec_label_pc_93bc

dec_label_pc_93bc:                                ; preds = %dec_label_pc_93bc, %dec_label_pc_944c, %dec_label_pc_93bc.preheader
  %v0_93c0 = phi i32 [ %v0_93c0.pre, %dec_label_pc_93bc.preheader ], [ 0, %dec_label_pc_93bc ], [ %v1_94e8, %dec_label_pc_944c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_93c0 = icmp eq i32 %v0_93c0, 0
  store i1 %v2_93c0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_93c0, label %dec_label_pc_93bc, label %dec_label_pc_93cc

dec_label_pc_93cc:                                ; preds = %dec_label_pc_93bc
  br label %dec_label_pc_93d0

dec_label_pc_93d0:                                ; preds = %dec_label_pc_944c, %dec_label_pc_93cc
  %v1_93e4 = phi i32 [ %v1_94e4, %dec_label_pc_944c ], [ 0, %dec_label_pc_93cc ]
  %v5_93d4 = mul i32 %v1_93e4, 24
  %v1_93d8 = load i32, i32* @sb, align 4
  %v2_93d8 = add i32 %v1_93d8, %v5_93d4
  store i32 %v2_93d8, i32* %r3.global-to-local, align 4
  store i32 %v2_901c, i32* %r4.global-to-local, align 4
  %v1_93e0 = add i32 %v2_93d8, 20
  %v2_93e0 = inttoptr i32 %v1_93e0 to i8*
  %v3_93e0 = load i8, i8* %v2_93e0, align 1
  %v4_93e0 = zext i8 %v3_93e0 to i32
  store i32 %v4_93e0, i32* %r2.global-to-local, align 4
  %v4_93e4 = mul i32 %v1_93e4, 4
  %v5_93e4 = add i32 %v4_93e4, %v2_901c
  %v6_93e4 = inttoptr i32 %v5_93e4 to i32*
  %v7_93e4 = load i32, i32* %v6_93e4, align 4
  store i32 %v7_93e4, i32* @r5, align 4
  %v7_93e8 = icmp eq i8 %v3_93e0, 31
  store i1 %v7_93e8, i1* %cpsr_z.global-to-local, align 1
  %v1_93ec = add i32 %v7_93e4, 24
  store i32 %v1_93ec, i32* @r6, align 4
  %v1_93f0 = add i32 %v7_93e4, 44
  store i32 %v1_93f0, i32* @r7, align 4
  %tmp86 = icmp ult i8 %v3_93e0, 32
  br i1 %tmp86, label %dec_label_pc_94f8, label %dec_label_pc_93f8

dec_label_pc_93f8:                                ; preds = %dec_label_pc_93d0
  store i32 %v6_913c, i32* %r1.global-to-local, align 4
  store i1 %v7_93fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_93fc, label %dec_label_pc_9558, label %dec_label_pc_9404

dec_label_pc_9404:                                ; preds = %dec_label_pc_94f8, %dec_label_pc_93f8
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_940c = load i32, i32* @fp, align 4
  %v9_940c = icmp eq i32 %v0_940c, 65535
  store i1 %v9_940c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_940c, label %dec_label_pc_9570, label %dec_label_pc_9414

dec_label_pc_9414:                                ; preds = %dec_label_pc_9558.dec_label_pc_9414_crit_edge, %dec_label_pc_9404
  %v1_9418 = phi i32 [ %v1_9418.pre, %dec_label_pc_9558.dec_label_pc_9414_crit_edge ], [ 65535, %dec_label_pc_9404 ]
  store i32 %v3_919c, i32* %r2.global-to-local, align 4
  %v9_9418 = icmp eq i32 %v3_919c, %v1_9418
  store i1 %v9_9418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9418, label %dec_label_pc_9598, label %dec_label_pc_9420

dec_label_pc_9420:                                ; preds = %dec_label_pc_9570.dec_label_pc_9420_crit_edge, %dec_label_pc_9414
  %v1_9424 = phi i32 [ %v1_9424.pre, %dec_label_pc_9570.dec_label_pc_9420_crit_edge ], [ %v1_9418, %dec_label_pc_9414 ]
  store i32 %v3_91a0, i32* %r3.global-to-local, align 4
  %v9_9424 = icmp eq i32 %v3_91a0, %v1_9424
  store i1 %v9_9424, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9424, label %dec_label_pc_95ac, label %dec_label_pc_942c

dec_label_pc_942c:                                ; preds = %dec_label_pc_9598, %dec_label_pc_9420
  store i32 %v1_9194, i32* @r4, align 4
  store i1 %v2_95b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95b4, label %dec_label_pc_95c8, label %.thread16

.thread16:                                        ; preds = %dec_label_pc_942c
  %v1_9434 = load i32, i32* @r5, align 4
  %v2_9434 = add i32 %v1_9434, 16
  %v3_9434 = inttoptr i32 %v2_9434 to i32*
  %v4_9434 = load i32, i32* %v3_9434, align 4
  store i32 %v4_9434, i32* %r3.global-to-local, align 4
  %v2_9438 = load i32, i32* @r6, align 4
  %v3_9438 = add i32 %v2_9438, 16
  %v4_9438 = inttoptr i32 %v3_9438 to i32*
  store i32 %v4_9434, i32* %v4_9438, align 4
  br label %dec_label_pc_9440

dec_label_pc_9440:                                ; preds = %bb85, %.thread16
  store i32 %v1_9108, i32* %r1.global-to-local, align 4
  store i1 %v2_95d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95d0, label %dec_label_pc_944c, label %dec_label_pc_95dc

dec_label_pc_944c:                                ; preds = %dec_label_pc_9440, %dec_label_pc_95c8, %dec_label_pc_95dc
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_9450 = load i32, i32* @r5, align 4
  %v3_9450 = add i32 %v2_9450, 10
  %v4_9450 = inttoptr i32 %v3_9450 to i16*
  store i16 0, i16* %v4_9450, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9458 = load i32, i32* @r5, align 4
  store i32 %v0_9458, i32* @r0, align 4
  %v2_945c = call i32 @function_c848(i32 %v0_9458, i32 20)
  %v3_945c = trunc i32 %v2_945c to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_9464 = load i32, i32* @r5, align 4
  %v4_9464 = add i32 %v3_9464, 10
  %v5_9464 = inttoptr i32 %v4_9464 to i16*
  store i16 %v3_945c, i16* %v5_9464, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_946c = load i32, i32* %r3.global-to-local, align 4
  %v1_946c = trunc i32 %v0_946c to i16
  %v2_946c = load i32, i32* @r6, align 4
  %v3_946c = add i32 %v2_946c, 10
  %v4_946c = inttoptr i32 %v3_946c to i16*
  store i16 %v1_946c, i16* %v4_946c, align 2
  %v0_9470 = load i32, i32* @r6, align 4
  store i32 %v0_9470, i32* @r0, align 4
  %v2_9474 = call i32 @function_c848(i32 %v0_9470, i32 20)
  %v3_9474 = trunc i32 %v2_9474 to i16
  %v3_9478 = load i32, i32* @r6, align 4
  %v4_9478 = add i32 %v3_9478, 10
  %v5_9478 = inttoptr i32 %v4_9478 to i16*
  store i16 %v3_9474, i16* %v5_9478, align 2
  store i32 0, i32* @r4, align 4
  %v0_9480 = load i32, i32* @r7, align 4
  store i32 %v0_9480, i32* @r1, align 4
  %v1_9484 = add i32 %v0_9480, 4
  %v2_9484 = inttoptr i32 %v1_9484 to i16*
  %v3_9484 = load i16, i16* %v2_9484, align 2
  %v4_9484 = zext i16 %v3_9484 to i32
  store i32 %v4_9484, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-124.0.ph, i32* %r3.global-to-local, align 4
  %v3_948c = add i32 %v0_9480, 6
  %v4_948c = inttoptr i32 %v3_948c to i16*
  store i16 0, i16* %v4_948c, align 2
  %v0_9490 = load i32, i32* @r6, align 4
  %v4_9494 = call i32 @function_c898(i32 %v0_9490, i32 %v0_9480, i32 %v4_9484, i32 %stack_var_-124.0.ph)
  %v5_9494 = trunc i32 %v4_9494 to i16
  %v3_9498 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9498, i32* %r2.global-to-local, align 4
  %v3_949c = mul i32 %v3_9498, 32
  store i32 %v3_949c, i32* %r3.global-to-local, align 4
  %v0_94a0 = load i32, i32* @r5, align 4
  %v1_94a0 = add i32 %v0_94a0, 16
  %v2_94a0 = inttoptr i32 %v1_94a0 to i32*
  %v3_94a0 = load i32, i32* %v2_94a0, align 4
  %v5_94a4 = mul i32 %v3_9498, 24
  store i32 %v5_94a4, i32* %r3.global-to-local, align 4
  %v1_94a8 = load i32, i32* @sb, align 4
  %v2_94a8 = add i32 %v1_94a8, %v5_94a4
  store i32 %v2_94a8, i32* @lr, align 4
  %v2_94ac = add i32 %v2_94a8, 4
  %v3_94ac = inttoptr i32 %v2_94ac to i32*
  store i32 %v3_94a0, i32* %v3_94ac, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_94b4 = load i32, i32* @r7, align 4
  %v4_94b4 = add i32 %v3_94b4, 6
  %v5_94b4 = inttoptr i32 %v4_94b4 to i16*
  store i16 %v5_9494, i16* %v5_94b4, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_94bc = load i32, i32* %r1.global-to-local, align 4
  %v1_94bc = trunc i32 %v0_94bc to i16
  %v2_94bc = load i32, i32* %r3.global-to-local, align 4
  %v3_94bc = load i32, i32* @sb, align 4
  %v4_94bc = add i32 %v3_94bc, %v2_94bc
  %v5_94bc = inttoptr i32 %v4_94bc to i16*
  store i16 %v1_94bc, i16* %v5_94bc, align 2
  %v0_94c0 = load i32, i32* @r4, align 4
  %v1_94c0 = trunc i32 %v0_94c0 to i16
  %v2_94c0 = load i32, i32* @lr, align 4
  %v3_94c0 = add i32 %v2_94c0, 2
  %v4_94c0 = inttoptr i32 %v3_94c0 to i16*
  store i16 %v1_94c0, i16* %v4_94c0, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_94c8 = load i32, i32* @r5, align 4
  store i32 %v0_94c8, i32* %r1.global-to-local, align 4
  %v0_94d0 = load i32, i32* @r8, align 4
  store i32 %v0_94d0, i32* %r2.global-to-local, align 4
  %v0_94d4 = load i32, i32* @lr, align 4
  %v0_94d8 = load i32, i32* %ip.global-to-local, align 4
  %v6_94dc = call i32 @function_11d70(i32 %v3_9150, i32 %v0_94c8, i32 %v0_94d0, i32 16384, i32 %v0_94d4, i32 %v0_94d8)
  %v3_94e0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_94e0, i32* %r3.global-to-local, align 4
  %v1_94e4 = add i32 %v3_94e0, 1
  %v1_94e8 = load i32, i32* @sl, align 4
  %v9_94e8 = icmp eq i32 %v1_94e4, %v1_94e8
  store i1 %v9_94e8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_94e4, i32* %stack_var_-44, align 4
  %v6_94f0 = icmp slt i32 %v1_94e4, %v1_94e8
  br i1 %v6_94f0, label %dec_label_pc_93d0, label %dec_label_pc_93bc

dec_label_pc_94f8:                                ; preds = %dec_label_pc_93d0
  %v1_94f8 = add i32 %v2_93d8, 16
  %v2_94f8 = inttoptr i32 %v1_94f8 to i32*
  %v3_94f8 = load i32, i32* %v2_94f8, align 4
  store i32 %v3_94f8, i32* %r4.global-to-local, align 4
  %v0_94fc = call i32 @function_e29c()
  %v3_9500 = load i32, i32* %stack_var_-44, align 4
  %v5_9508 = mul i32 %v3_9500, 24
  %v0_950c = load i32, i32* %r4.global-to-local, align 4
  %v1_950c = and i32 %v0_950c, 16711680
  store i32 %v1_950c, i32* %ip.global-to-local, align 4
  %v3_9510 = udiv i32 %v0_950c, 16777216
  %v4_9514 = udiv i32 %v1_950c, 256
  %v5_9514 = or i32 %v4_9514, %v3_9510
  store i32 %v5_9514, i32* %r2.global-to-local, align 4
  %v1_9518 = load i32, i32* @sb, align 4
  %v2_9518 = add i32 %v1_9518, %v5_9508
  store i32 %v2_9518, i32* %r1.global-to-local, align 4
  %v1_951c = and i32 %v0_950c, 65280
  store i32 %v1_951c, i32* %r3.global-to-local, align 4
  %v1_9520 = add i32 %v2_9518, 20
  %v2_9520 = inttoptr i32 %v1_9520 to i8*
  %v3_9520 = load i8, i8* %v2_9520, align 1
  %v4_9520 = zext i8 %v3_9520 to i32
  store i32 %v4_9520, i32* %ip.global-to-local, align 4
  %v5_9528 = call i32 @llvm.bswap.i32(i32 %v0_950c)
  %v7_952c = lshr i32 %v0_94fc, %v4_9520
  %v8_952c = add i32 %v7_952c, %v5_9528
  store i32 %v8_952c, i32* %r2.global-to-local, align 4
  store i32 %v6_913c, i32* %r1.global-to-local, align 4
  %v5_9548 = call i32 @llvm.bswap.i32(i32 %v8_952c)
  store i32 %v5_9548, i32* %r3.global-to-local, align 4
  store i1 %v7_93fc, i1* %cpsr_z.global-to-local, align 1
  %v1_9550 = load i32, i32* @r5, align 4
  %v2_9550 = add i32 %v1_9550, 16
  %v3_9550 = inttoptr i32 %v2_9550 to i32*
  store i32 %v5_9548, i32* %v3_9550, align 4
  br i1 %v2_93fc, label %dec_label_pc_9558, label %dec_label_pc_9404

dec_label_pc_9558:                                ; preds = %dec_label_pc_94f8, %dec_label_pc_93f8
  %v0_9558 = call i32 @function_e29c()
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9564 = load i32, i32* @fp, align 4
  %v9_9564 = icmp eq i32 %v0_9564, 65535
  store i1 %v9_9564, i1* %cpsr_z.global-to-local, align 1
  %v1_9568 = load i32, i32* @r5, align 4
  %v2_9568 = add i32 %v1_9568, 12
  %v3_9568 = inttoptr i32 %v2_9568 to i32*
  store i32 %v0_9558, i32* %v3_9568, align 4
  br i1 %v9_9564, label %dec_label_pc_9570, label %dec_label_pc_9558.dec_label_pc_9414_crit_edge

dec_label_pc_9558.dec_label_pc_9414_crit_edge:    ; preds = %dec_label_pc_9558
  %v1_9418.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9414

dec_label_pc_9570:                                ; preds = %dec_label_pc_9558, %dec_label_pc_9404
  %v0_9570 = call i32 @function_e29c()
  %v3_9578 = urem i32 %v0_9570, 65536
  store i32 %v3_919c, i32* %r2.global-to-local, align 4
  %v1_9584 = sub nsw i32 999, %v3_9578
  store i32 %v1_9584, i32* %r3.global-to-local, align 4
  %v1_9588 = load i32, i32* %r4.global-to-local, align 4
  %v9_9588 = icmp eq i32 %v3_919c, %v1_9588
  store i1 %v9_9588, i1* %cpsr_z.global-to-local, align 1
  %v1_958c = trunc i32 %v0_9570 to i16
  %v2_958c = load i32, i32* @r5, align 4
  %v3_958c = add i32 %v2_958c, 4
  %v4_958c = inttoptr i32 %v3_958c to i16*
  store i16 %v1_958c, i16* %v4_958c, align 2
  %v0_9590 = load i32, i32* %r3.global-to-local, align 4
  %v1_9590 = trunc i32 %v0_9590 to i16
  %v2_9590 = load i32, i32* @r6, align 4
  %v3_9590 = add i32 %v2_9590, 4
  %v4_9590 = inttoptr i32 %v3_9590 to i16*
  store i16 %v1_9590, i16* %v4_9590, align 2
  br i1 %v9_9588, label %dec_label_pc_9598, label %dec_label_pc_9570.dec_label_pc_9420_crit_edge

dec_label_pc_9570.dec_label_pc_9420_crit_edge:    ; preds = %dec_label_pc_9570
  %v1_9424.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9420

dec_label_pc_9598:                                ; preds = %dec_label_pc_9570, %dec_label_pc_9414
  %v0_9598 = call i32 @function_e29c()
  %v1_9598 = trunc i32 %v0_9598 to i16
  store i32 %v3_91a0, i32* %r3.global-to-local, align 4
  %v1_95a0 = load i32, i32* %r4.global-to-local, align 4
  %v9_95a0 = icmp eq i32 %v3_91a0, %v1_95a0
  store i1 %v9_95a0, i1* %cpsr_z.global-to-local, align 1
  %v3_95a4 = load i32, i32* @r5, align 4
  %v4_95a4 = add i32 %v3_95a4, 44
  %v5_95a4 = inttoptr i32 %v4_95a4 to i16*
  store i16 %v1_9598, i16* %v5_95a4, align 2
  br i1 %v9_95a0, label %dec_label_pc_95ac, label %dec_label_pc_942c

dec_label_pc_95ac:                                ; preds = %dec_label_pc_9598, %dec_label_pc_9420
  %v0_95ac = call i32 @function_e29c()
  %v1_95ac = trunc i32 %v0_95ac to i16
  store i32 %v1_9194, i32* @r4, align 4
  store i1 %v2_95b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95b4, label %.thread30, label %bb85

.thread30:                                        ; preds = %dec_label_pc_95ac
  %v3_95bc31 = load i32, i32* @r7, align 4
  %v4_95bc32 = add i32 %v3_95bc31, 2
  %v5_95bc33 = inttoptr i32 %v4_95bc32 to i16*
  store i16 %v1_95ac, i16* %v5_95bc33, align 2
  br label %dec_label_pc_95c8

bb85:                                             ; preds = %dec_label_pc_95ac
  %v1_95b8 = load i32, i32* @r5, align 4
  %v2_95b8 = add i32 %v1_95b8, 16
  %v3_95b8 = inttoptr i32 %v2_95b8 to i32*
  %v4_95b8 = load i32, i32* %v3_95b8, align 4
  store i32 %v4_95b8, i32* %r3.global-to-local, align 4
  %v3_95bc = load i32, i32* @r7, align 4
  %v4_95bc = add i32 %v3_95bc, 2
  %v5_95bc = inttoptr i32 %v4_95bc to i16*
  store i16 %v1_95ac, i16* %v5_95bc, align 2
  %v1_95c0 = load i32, i32* %r3.global-to-local, align 4
  %v2_95c0 = load i32, i32* @r6, align 4
  %v3_95c0 = add i32 %v2_95c0, 16
  %v4_95c0 = inttoptr i32 %v3_95c0 to i32*
  store i32 %v1_95c0, i32* %v4_95c0, align 4
  br label %dec_label_pc_9440

dec_label_pc_95c8:                                ; preds = %.thread30, %dec_label_pc_942c
  %v0_95c8 = call i32 @function_e29c()
  store i32 %v1_9108, i32* %r1.global-to-local, align 4
  store i1 %v2_95d0, i1* %cpsr_z.global-to-local, align 1
  %v1_95d4 = load i32, i32* @r6, align 4
  %v2_95d4 = add i32 %v1_95d4, 16
  %v3_95d4 = inttoptr i32 %v2_95d4 to i32*
  store i32 %v0_95c8, i32* %v3_95d4, align 4
  br i1 %v2_95d0, label %dec_label_pc_944c, label %dec_label_pc_95dc

dec_label_pc_95dc:                                ; preds = %dec_label_pc_9440, %dec_label_pc_95c8
  %v0_95dc = load i32, i32* @r7, align 4
  %v1_95dc = add i32 %v0_95dc, 8
  store i32 %v6_90e8, i32* %r1.global-to-local, align 4
  %v2_95e4 = inttoptr i32 %v1_95dc to i16*
  %v3_95e4 = call i32 @function_e430(i16* %v2_95e4, i32 %v6_90e8)
  br label %dec_label_pc_944c

dec_label_pc_95ec:                                ; preds = %dec_label_pc_9160
  %v1_95f0 = call i32 @function_115e0(i32 %v3_9150)
  br label %dec_label_pc_95f4

dec_label_pc_95f4:                                ; preds = %dec_label_pc_9000, %dec_label_pc_95ec
  %v1_95fc = phi i32 [ %v3_9150, %dec_label_pc_9000 ], [ %v1_95f0, %dec_label_pc_95ec ]
  store i32 %v3_9000, i32* %r4.global-to-local, align 4
  store i32 %v6_9000, i32* %r5.global-to-local, align 4
  store i32 %v24_9000, i32* %fp.global-to-local, align 4
  ret i32 %v1_95fc

dec_label_pc_9600:                                ; preds = %dec_label_pc_9188
  store i32 %v6_90e8, i32* %r2.global-to-local, align 4
  %v1_9608 = add i32 %v6_90e8, 8
  store i32 %v1_9608, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_93bc.preheader

; uselistorder directives
  uselistorder i32 %v1_9608, { 1, 0 }
  uselistorder i16 %v1_95ac, { 1, 0 }
  uselistorder i32 %v0_9570, { 1, 0 }
  uselistorder i32 %v5_9548, { 1, 0 }
  uselistorder i32 %v0_950c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_94e8, { 1, 2, 0 }
  uselistorder i32 %v1_94e4, { 2, 0, 3, 1 }
  uselistorder i32 %v3_9498, { 1, 0, 2 }
  uselistorder i32 %v0_9480, { 1, 0, 2, 3 }
  uselistorder i32 %v7_93e4, { 1, 0, 2 }
  uselistorder i1 %v7_93fc, { 2, 1, 0 }
  uselistorder i1 %v2_95d0, { 2, 3, 1, 0 }
  uselistorder i1 %v2_95b4, { 2, 3, 1, 0 }
  uselistorder i32 %v0_9358, { 1, 0 }
  uselistorder i32 %v4_92cc13, { 1, 0 }
  uselistorder i32 %v3_91f0, { 1, 0 }
  uselistorder i32 %v3_91d4, { 1, 2, 0 }
  uselistorder i32 %v1_91d0, { 1, 0 }
  uselistorder i32 %v1_9194, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_9190, { 1, 0, 3, 2 }
  uselistorder i32 %v0_918c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9188, { 1, 0, 2, 3 }
  uselistorder i1 %v7_9180, { 1, 0 }
  uselistorder i1 %v7_9154, { 1, 0 }
  uselistorder i32 %v3_9150, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v6_913c, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_9108, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_90e8, { 7, 6, 5, 4, 1, 3, 2, 0 }
  uselistorder i32 %v1_909c, { 1, 2, 0 }
  uselistorder i32 %v1_9078, { 3, 2, 1, 0 }
  uselistorder i32 %v6_9070, { 1, 0 }
  uselistorder i32 %v6_9034, { 2, 1, 3, 0 }
  uselistorder i32 %v2_901c, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 6, 5, 7, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 26, 25, 27, 28, 30, 29, 31, 32, 34, 33, 36, 35, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_95f4, { 1, 0 }
  uselistorder label %dec_label_pc_95dc, { 1, 0 }
  uselistorder label %dec_label_pc_944c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_93bc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_93bc.preheader, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
}

define i32 @function_961c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_961c:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_961c = load i32, i32* @r4, align 4
  %v18_961c = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_9638 = call i32 @function_1295c(i32 %arg1, i32 4)
  store i32 %v2_9638, i32* @sl, align 4
  %v0_9644 = load i32, i32* @r7, align 4
  %v2_9648 = call i32 @function_1295c(i32 %v0_9644, i32 4)
  store i32 65535, i32* @r4, align 4
  %v0_9654 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_9648, i32* @r8, align 4
  %v0_9664 = load i32, i32* @r5, align 4
  %v5_9668 = inttoptr i32 %v0_9654 to i32*
  %v6_9668 = call i32 @function_8570(i32 %v0_9664, i32* %v5_9668, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v3_9670 = urem i32 %v6_9668, 65536
  %v0_9674 = load i32, i32* @r6, align 4
  %v0_967c = load i32, i32* @r4, align 4
  store i32 %v0_967c, i32* %r3.global-to-local, align 4
  %v0_9680 = load i32, i32* @r5, align 4
  %v5_9688 = inttoptr i32 %v0_9674 to i32*
  %v6_9688 = call i32 @function_8570(i32 %v0_9680, i32* %v5_9688, i32 6, i32 %v0_967c, i32 %v3_9670)
  %v0_968c = load i32, i32* @r6, align 4
  %v3_9690 = mul i32 %v6_9688, 65536
  store i32 %v3_9690, i32* %sb.global-to-local, align 4
  store i32 1024, i32* %r3.global-to-local, align 4
  %v0_969c = load i32, i32* @r5, align 4
  %v5_96a0 = inttoptr i32 %v0_968c to i32*
  %v6_96a0 = call i32 @function_8570(i32 %v0_969c, i32* %v5_96a0, i32 0, i32 1024, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_96b0 = load i32, i32* @r6, align 4
  %v0_96b4 = load i32, i32* @r5, align 4
  %v3_96b8 = urem i32 %v6_96a0, 65536
  store i32 %v3_96b8, i32* @r5, align 4
  %v5_96bc = inttoptr i32 %v0_96b0 to i32*
  %v6_96bc = call i32 @function_8570(i32 %v0_96b4, i32* %v5_96bc, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v0_96c0 = load i32, i32* %sb.global-to-local, align 4
  %v3_96c0 = udiv i32 %v0_96c0, 65536
  store i32 %v3_96c0, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_96c8 = load i32, i32* @r4, align 4
  %v9_96c8 = icmp eq i32 %v3_96c0, %v1_96c8
  br i1 %v9_96c8, label %dec_label_pc_96f8, label %bb

bb:                                               ; preds = %dec_label_pc_961c
  store i32 0, i32* %stack_var_-56, align 4
  %v4_96e0 = udiv i32 %v0_96c0, 16777216
  store i32 %v4_96e0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9708

dec_label_pc_96f8:                                ; preds = %dec_label_pc_961c
  store i32 0, i32* %stack_var_-56, align 4
  %v0_96f8 = call i32 @function_e29c()
  br label %dec_label_pc_9708

dec_label_pc_9708:                                ; preds = %bb, %dec_label_pc_96f8
  %v0_96ec10 = urem i32 %v6_96bc, 256
  %v0_9708 = load i32, i32* @r7, align 4
  %v2_9708 = icmp eq i32 %v0_9708, 0
  br i1 %v2_9708, label %dec_label_pc_9848, label %dec_label_pc_9710

dec_label_pc_9710:                                ; preds = %dec_label_pc_9708
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_97bc = udiv i32 %v3_9670, 256
  %v1_97b8 = mul i32 %v6_9668, 256
  %v4_97c0 = and i32 %v1_97b8, 65280
  %v5_97c0 = or i32 %v4_97c0, %v3_97bc
  %v2_9740 = ptrtoint i32* %stack_var_-56 to i32
  br label %dec_label_pc_97a0

dec_label_pc_9720:                                ; preds = %bb51, %dec_label_pc_97e0
  %v3_972c = call i32 @function_11df4(i32 2, i32 2, i32 0)
  %v7_9734 = icmp eq i32 %v3_972c, -1
  %v0_9738 = load i32, i32* @sb, align 4
  %v1_9738 = add i32 %v0_9738, 1
  store i32 %v1_9738, i32* @sb, align 4
  %v0_973c = load i32, i32* @fp, align 4
  %v1_973c = add i32 %v0_973c, 24
  store i32 %v1_973c, i32* @fp, align 4
  %v2_9748 = load i32, i32* @r8, align 4
  %v3_9748 = add i32 %v2_9748, %stack_var_-60.0
  %v4_9748 = inttoptr i32 %v3_9748 to i32*
  store i32 %v3_972c, i32* %v4_9748, align 4
  br i1 %v7_9734, label %dec_label_pc_983c, label %dec_label_pc_9750

dec_label_pc_9750:                                ; preds = %dec_label_pc_9720
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v3_9768 = call i32 @function_11ba4(i32 %v3_972c, i32 %v2_9740, i32 16)
  %v0_976c = load i32, i32* @r6, align 4
  %v1_976c = add i32 %v0_976c, 20
  %v2_976c = inttoptr i32 %v1_976c to i8*
  %v3_976c = load i8, i8* %v2_976c, align 1
  %v4_976c = zext i8 %v3_976c to i32
  store i32 %v4_976c, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_976c, 32
  br i1 %tmp, label %dec_label_pc_97f4, label %dec_label_pc_9778

dec_label_pc_9778:                                ; preds = %dec_label_pc_9750, %dec_label_pc_97f4
  %v0_977c = phi i32 [ %v0_976c, %dec_label_pc_9750 ], [ %v0_977c.pre, %dec_label_pc_97f4 ]
  %v1_9780 = load i32, i32* @r8, align 4
  %v2_9780 = add i32 %v1_9780, %stack_var_-60.0
  %v3_9780 = inttoptr i32 %v2_9780 to i32*
  %v4_9780 = load i32, i32* %v3_9780, align 4
  %v3_9788 = call i32 @function_11bdc(i32 %v4_9780, i32 %v0_977c, i32 16)
  %v0_9790 = load i32, i32* @sb, align 4
  %v1_9790 = load i32, i32* @r7, align 4
  %v9_9790 = icmp eq i32 %v0_9790, %v1_9790
  %v1_9794 = add i32 %stack_var_-60.0, 4
  store i32 %v1_9794, i32* %r3.global-to-local, align 4
  br i1 %v9_9790, label %dec_label_pc_9848, label %dec_label_pc_97a0

dec_label_pc_97a0:                                ; preds = %dec_label_pc_9778, %dec_label_pc_9710
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_9710 ], [ %v1_9794, %dec_label_pc_9778 ]
  store i32 65535, i32* @r4, align 4
  %v2_97b0 = call i32 @function_1295c(i32 65535, i32 1)
  store i32 %v5_97c0, i32* %r3.global-to-local, align 4
  %v1_97cc = load i32, i32* @r4, align 4
  %v9_97cc = icmp eq i32 %v3_9670, %v1_97cc
  %v1_97d0 = load i32, i32* @fp, align 4
  %v2_97d0 = add i32 %v1_97d0, %arg2
  store i32 %v2_97d0, i32* @r6, align 4
  %v2_97d4 = load i32, i32* @sl, align 4
  %v3_97d4 = add i32 %v2_97d4, %stack_var_-60.0
  %v4_97d4 = inttoptr i32 %v3_97d4 to i32*
  store i32 %v2_97b0, i32* %v4_97d4, align 4
  br i1 %v9_97cc, label %dec_label_pc_97e0, label %bb51

bb51:                                             ; preds = %dec_label_pc_97a0
  %v1_97d8 = load i32, i32* %r3.global-to-local, align 4
  %v2_97d8 = trunc i32 %v1_97d8 to i16
  %v3_97d8 = load i32, i32* @r6, align 4
  %v4_97d8 = add i32 %v3_97d8, 2
  %v5_97d8 = inttoptr i32 %v4_97d8 to i16*
  store i16 %v2_97d8, i16* %v5_97d8, align 2
  br label %dec_label_pc_9720

dec_label_pc_97e0:                                ; preds = %dec_label_pc_97a0
  %v0_97e0 = call i32 @function_e29c()
  %v1_97e0 = trunc i32 %v0_97e0 to i16
  %v0_97e8 = load i32, i32* @fp, align 4
  %v2_97e8 = add i32 %v0_97e8, %arg2
  store i32 %v2_97e8, i32* @r6, align 4
  %v4_97ec = add i32 %v2_97e8, 2
  %v5_97ec = inttoptr i32 %v4_97ec to i16*
  store i16 %v1_97e0, i16* %v5_97ec, align 2
  br label %dec_label_pc_9720

dec_label_pc_97f4:                                ; preds = %dec_label_pc_9750
  %v1_97f4 = add i32 %v0_976c, 16
  %v2_97f4 = inttoptr i32 %v1_97f4 to i32*
  %v3_97f4 = load i32, i32* %v2_97f4, align 4
  store i32 %v3_97f4, i32* %r4.global-to-local, align 4
  %v0_97f8 = call i32 @function_e29c()
  %v1_9808 = and i32 %v3_97f4, 65280
  store i32 %v1_9808, i32* %r3.global-to-local, align 4
  %v0_9810 = load i32, i32* @r6, align 4
  %v1_9810 = add i32 %v0_9810, 20
  %v2_9810 = inttoptr i32 %v1_9810 to i8*
  %v3_9810 = load i8, i8* %v2_9810, align 1
  %v4_9810 = zext i8 %v3_9810 to i32
  %v5_9814 = call i32 @llvm.bswap.i32(i32 %v3_97f4)
  %v7_9818 = lshr i32 %v0_97f8, %v4_9810
  %v8_9818 = add i32 %v7_9818, %v5_9814
  %v5_9830 = call i32 @llvm.bswap.i32(i32 %v8_9818)
  store i32 %v5_9830, i32* %r3.global-to-local, align 4
  %v2_9834 = add i32 %v0_9810, 4
  %v3_9834 = inttoptr i32 %v2_9834 to i32*
  store i32 %v5_9830, i32* %v3_9834, align 4
  %v0_977c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9778

dec_label_pc_983c:                                ; preds = %dec_label_pc_9720
  store i32 %v3_961c, i32* %r4.global-to-local, align 4
  store i32 %v18_961c, i32* %sb.global-to-local, align 4
  ret i32 %v3_972c

dec_label_pc_9848:                                ; preds = %dec_label_pc_9778, %dec_label_pc_9708
  %v1_988822 = phi i32 [ 0, %dec_label_pc_9708 ], [ %v0_9790, %dec_label_pc_9778 ]
  %v2_984c = icmp eq i32 %v0_96ec10, 0
  br i1 %v2_984c, label %dec_label_pc_986c.outer, label %dec_label_pc_9884

dec_label_pc_985c:                                ; preds = %dec_label_pc_986c
  store i32 %v1_9860, i32* %r4.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_985c = load i32, i32* @r8, align 4
  %v4_985c = mul i32 %v1_9860, 4
  %v5_985c = add i32 %v0_985c, %v4_985c
  %v6_985c = inttoptr i32 %v5_985c to i32*
  %v7_985c = load i32, i32* %v6_985c, align 4
  %v0_9860 = load i32, i32* @sl, align 4
  %v5_9860 = add i32 %v0_9860, %v4_985c
  %v6_9860 = inttoptr i32 %v5_9860 to i32*
  %v7_9860 = load i32, i32* %v6_9860, align 4
  %v4_9864 = call i32 @function_11d38(i32 %v7_985c, i32 %v7_9860, i32 %v0_9870, i32 16384)
  %v0_9868 = load i32, i32* %r4.global-to-local, align 4
  %v1_9868 = add i32 %v0_9868, 1
  %v0_986c.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_986c.outer

dec_label_pc_986c.outer:                          ; preds = %dec_label_pc_9848, %dec_label_pc_985c
  %v0_986c.ph = phi i32 [ %v0_986c.pre.pre, %dec_label_pc_985c ], [ %v1_988822, %dec_label_pc_9848 ]
  %v1_9860.ph = phi i32 [ %v1_9868, %dec_label_pc_985c ], [ 0, %dec_label_pc_9848 ]
  %v0_9870 = load i32, i32* @r5, align 4
  br label %dec_label_pc_986c

dec_label_pc_986c:                                ; preds = %dec_label_pc_986c.outer, %dec_label_pc_986c
  %v1_9860 = phi i32 [ 0, %dec_label_pc_986c ], [ %v1_9860.ph, %dec_label_pc_986c.outer ]
  %v8_9878 = icmp sgt i32 %v0_986c.ph, %v1_9860
  br i1 %v8_9878, label %dec_label_pc_985c, label %dec_label_pc_986c

dec_label_pc_9884:                                ; preds = %dec_label_pc_9888, %dec_label_pc_9848
  %v1_988821 = phi i32 [ %v1_988822, %dec_label_pc_9848 ], [ %v1_9888, %dec_label_pc_9888 ]
  br label %dec_label_pc_9888

dec_label_pc_9888:                                ; preds = %dec_label_pc_9894, %dec_label_pc_9884
  %v1_9888 = phi i32 [ %v1_988821, %dec_label_pc_9884 ], [ %v1_9888.pre, %dec_label_pc_9894 ]
  %v1_9894 = phi i32 [ 0, %dec_label_pc_9884 ], [ %v1_98b4, %dec_label_pc_9894 ]
  store i32 %v1_9894, i32* @r6, align 4
  %v6_9890 = icmp slt i32 %v1_9894, %v1_9888
  br i1 %v6_9890, label %dec_label_pc_9894, label %dec_label_pc_9884

dec_label_pc_9894:                                ; preds = %dec_label_pc_9888
  %v0_988c = load i32, i32* @r5, align 4
  %v0_9894 = load i32, i32* @sl, align 4
  %v4_9894 = mul i32 %v1_9894, 4
  %v5_9894 = add i32 %v0_9894, %v4_9894
  %v6_9894 = inttoptr i32 %v5_9894 to i32*
  %v7_9894 = load i32, i32* %v6_9894, align 4
  store i32 %v7_9894, i32* @r4, align 4
  %v2_989c = inttoptr i32 %v7_9894 to i16*
  %v3_989c = call i32 @function_e430(i16* %v2_989c, i32 %v0_988c)
  %v0_98a0 = load i32, i32* @r8, align 4
  %v1_98a0 = load i32, i32* @r6, align 4
  %v4_98a0 = mul i32 %v1_98a0, 4
  %v5_98a0 = add i32 %v4_98a0, %v0_98a0
  %v6_98a0 = inttoptr i32 %v5_98a0 to i32*
  %v7_98a0 = load i32, i32* %v6_98a0, align 4
  %v0_98a4 = load i32, i32* @r4, align 4
  %v0_98a8 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_98b0 = call i32 @function_11d38(i32 %v7_98a0, i32 %v0_98a4, i32 %v0_98a8, i32 16384)
  %v0_98b4 = load i32, i32* @r6, align 4
  %v1_98b4 = add i32 %v0_98b4, 1
  %v1_9888.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_9888

; uselistorder directives
  uselistorder i32 %v1_9888, { 1, 0 }
  uselistorder i32 %v1_9860, { 2, 1, 0 }
  uselistorder i32 %v5_9830, { 1, 0 }
  uselistorder i32 %v3_97f4, { 1, 0, 2 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_976c, { 1, 0, 2 }
  uselistorder i32 %v3_972c, { 1, 3, 2, 0 }
  uselistorder i32 %v3_96c0, { 1, 0 }
  uselistorder i32 %v3_9670, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 1, 3, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 8, 9, 5, 6, 7, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_986c, { 1, 0 }
  uselistorder label %dec_label_pc_986c.outer, { 1, 0 }
  uselistorder label %dec_label_pc_9778, { 1, 0 }
  uselistorder label %dec_label_pc_9720, { 1, 0 }
  uselistorder label %dec_label_pc_9708, { 1, 0 }
}

define i32 @function_98bc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_98bc:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_98bc = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_98d8 = call i32 @function_1295c(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_98e4 = load i32, i32* @r6, align 4
  store i32 %v0_98e4, i32* %r0.global-to-local, align 4
  %v2_98e8 = call i32 @function_1295c(i32 %v0_98e4, i32 4)
  %v0_98ec = load i32, i32* @r5, align 4
  store i32 %v0_98ec, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_98fc = load i32, i32* @r4, align 4
  store i32 %v0_98fc, i32* %r0.global-to-local, align 4
  %v5_9900 = inttoptr i32 %v0_98ec to i32*
  %v6_9900 = call i32 @function_8570(i32 %v0_98fc, i32* %v5_9900, i32 2, i32 0, i32 %v2_98e8)
  %v1_990c = urem i32 %v6_9900, 256
  store i32 %v1_990c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9918 = load i32, i32* @r5, align 4
  store i32 %v0_9918, i32* %r1.global-to-local, align 4
  %v0_991c = load i32, i32* @r4, align 4
  store i32 %v0_991c, i32* %r0.global-to-local, align 4
  %v5_9920 = trunc i32 %v6_9900 to i8
  %v6_9924 = inttoptr i32 %v0_9918 to i32*
  %v7_9924 = call i32 @function_8570(i32 %v0_991c, i32* %v6_9924, i32 3, i32 65535, i32 %v6_9900)
  %v0_9928 = load i32, i32* @r5, align 4
  store i32 %v0_9928, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9924, i32* @r7, align 4
  %v0_9938 = load i32, i32* @r4, align 4
  store i32 %v0_9938, i32* %r0.global-to-local, align 4
  %v5_993c = inttoptr i32 %v0_9928 to i32*
  %v6_993c = call i32 @function_8570(i32 %v0_9938, i32* %v5_993c, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_9944 = urem i32 %v6_993c, 256
  store i32 %v1_9944, i32* %ip.global-to-local, align 4
  %v0_9948 = load i32, i32* @r5, align 4
  store i32 %v0_9948, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9954 = load i32, i32* @r4, align 4
  store i32 %v0_9954, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_993c, 16777216
  %v5_995c = sdiv i32 %sext, 16777216
  %v6_995c = inttoptr i32 %v0_9948 to i32*
  %v7_995c = call i32 @function_8570(i32 %v0_9954, i32* %v6_995c, i32 5, i32 1, i32 %v5_995c)
  %v1_9968 = urem i32 %v7_995c, 256
  store i32 %v1_9968, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_9970 = load i32, i32* @r5, align 4
  store i32 %v0_9970, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_9978 = load i32, i32* @r4, align 4
  store i32 %v0_9978, i32* %r0.global-to-local, align 4
  %v5_9980 = inttoptr i32 %v0_9970 to i32*
  %v6_9980 = call i32 @function_8570(i32 %v0_9978, i32* %v5_9980, i32 7, i32 65535, i32 %v1_9968)
  %v0_9984 = load i32, i32* @r5, align 4
  store i32 %v0_9984, i32* %r1.global-to-local, align 4
  %v3_9988 = mul i32 %v6_9980, 65536
  store i32 %v3_9988, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9994 = load i32, i32* @r4, align 4
  store i32 %v0_9994, i32* %r0.global-to-local, align 4
  %v3_9998 = urem i32 %v6_9980, 65536
  store i32 %v3_9998, i32* @sl, align 4
  %v5_999c = inttoptr i32 %v0_9984 to i32*
  %v6_999c = call i32 @function_8570(i32 %v0_9994, i32* %v5_999c, i32 11, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_99a4 = urem i32 %v6_999c, 256
  store i32 %v1_99a4, i32* %ip.global-to-local, align 4
  %v0_99a8 = load i32, i32* @r5, align 4
  store i32 %v0_99a8, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_99b4 = load i32, i32* @r4, align 4
  store i32 %v0_99b4, i32* %r0.global-to-local, align 4
  %v5_99bc = inttoptr i32 %v0_99a8 to i32*
  %v6_99bc = call i32 @function_8570(i32 %v0_99b4, i32* %v5_99bc, i32 12, i32 1, i32 %v1_99a4)
  %v1_99c4 = urem i32 %v6_99bc, 256
  store i32 %v1_99c4, i32* %ip.global-to-local, align 4
  %v0_99c8 = load i32, i32* @r5, align 4
  store i32 %v0_99c8, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_99d4 = load i32, i32* @r4, align 4
  store i32 %v0_99d4, i32* %r0.global-to-local, align 4
  %v5_99dc = inttoptr i32 %v0_99c8 to i32*
  %v6_99dc = call i32 @function_8570(i32 %v0_99d4, i32* %v5_99dc, i32 13, i32 1, i32 %v1_99c4)
  %v1_99e4 = urem i32 %v6_99dc, 256
  store i32 %v1_99e4, i32* %ip.global-to-local, align 4
  %v0_99e8 = load i32, i32* @r5, align 4
  store i32 %v0_99e8, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_99f4 = load i32, i32* @r4, align 4
  store i32 %v0_99f4, i32* %r0.global-to-local, align 4
  %v5_99fc = inttoptr i32 %v0_99e8 to i32*
  %v6_99fc = call i32 @function_8570(i32 %v0_99f4, i32* %v5_99fc, i32 14, i32 1, i32 %v1_99e4)
  %v1_9a04 = urem i32 %v6_99fc, 256
  store i32 %v1_9a04, i32* %ip.global-to-local, align 4
  %v0_9a08 = load i32, i32* @r5, align 4
  store i32 %v0_9a08, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9a14 = load i32, i32* @r4, align 4
  store i32 %v0_9a14, i32* %r0.global-to-local, align 4
  %v5_9a1c = inttoptr i32 %v0_9a08 to i32*
  %v6_9a1c = call i32 @function_8570(i32 %v0_9a14, i32* %v5_9a1c, i32 15, i32 1, i32 %v1_9a04)
  %v1_9a24 = urem i32 %v6_9a1c, 256
  store i32 %v1_9a24, i32* %ip.global-to-local, align 4
  %v0_9a28 = load i32, i32* @r5, align 4
  store i32 %v0_9a28, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9a34 = load i32, i32* @r4, align 4
  store i32 %v0_9a34, i32* %r0.global-to-local, align 4
  %v5_9a3c = inttoptr i32 %v0_9a28 to i32*
  %v6_9a3c = call i32 @function_8570(i32 %v0_9a34, i32* %v5_9a3c, i32 16, i32 1, i32 %v1_9a24)
  %v1_9a44 = urem i32 %v6_9a3c, 256
  store i32 %v1_9a44, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_9a50 = load i32, i32* @r5, align 4
  store i32 %v0_9a50, i32* %r1.global-to-local, align 4
  %v0_9a54 = load i32, i32* @r4, align 4
  store i32 %v0_9a54, i32* %r0.global-to-local, align 4
  %v5_9a5c = inttoptr i32 %v0_9a50 to i32*
  %v6_9a5c = call i32 @function_8570(i32 %v0_9a54, i32* %v5_9a5c, i32 0, i32 768, i32 %v1_9a44)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9a6c = load i32, i32* @r5, align 4
  store i32 %v0_9a6c, i32* %r1.global-to-local, align 4
  %v0_9a70 = load i32, i32* @r4, align 4
  store i32 %v0_9a70, i32* %r0.global-to-local, align 4
  %v5_9a74 = inttoptr i32 %v0_9a6c to i32*
  %v6_9a74 = call i32 @function_8570(i32 %v0_9a70, i32* %v5_9a74, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9a7c = urem i32 %v6_9a74, 256
  store i32 %v1_9a7c, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9a90 = call i32 @function_11df4(i32 2, i32 3, i32 6)
  store i32 %v3_9a90, i32* %r0.global-to-local, align 4
  %v7_9a94 = icmp eq i32 %v3_9a90, -1
  store i1 %v7_9a94, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9a90, i32* @sb, align 4
  br i1 %v7_9a94, label %dec_label_pc_9c84, label %dec_label_pc_9aa0

dec_label_pc_9aa0:                                ; preds = %dec_label_pc_98bc
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9aa8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9aa8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9abc = call i32 @function_11db0(i32 %v3_9a90, i32 0, i32 3, i32 %v6_9aa8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_9abc, i32* %r0.global-to-local, align 4
  %v7_9ac0 = icmp eq i32 %v5_9abc, -1
  store i1 %v7_9ac0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9ac0, label %dec_label_pc_9c7c, label %dec_label_pc_9ac8

dec_label_pc_9ac8:                                ; preds = %dec_label_pc_9aa0
  %v0_9ac8 = load i32, i32* @r7, align 4
  %v3_9ac8 = mul i32 %v0_9ac8, 65536
  store i32 %v3_9ac8, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_9ad0 = load i32, i32* @r6, align 4
  %v2_9ad0 = icmp eq i32 %v0_9ad0, 0
  store i1 %v2_9ad0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_9ad8 = urem i32 %v0_9ac8, 65536
  store i32 %v3_9ad8, i32* @fp, align 4
  br i1 %v2_9ad0, label %dec_label_pc_9f08, label %dec_label_pc_9ae0.preheader

dec_label_pc_9ae0.preheader:                      ; preds = %dec_label_pc_9ac8
  %v2_9b2c = ptrtoint i32* %stack_var_-144 to i32
  %v2_9b70 = ptrtoint i32* %stack_var_-64 to i32
  %v2_9ba8 = ptrtoint i32* %stack_var_-80 to i32
  %v2_9bb4 = ptrtoint i32* %stack_var_-336 to i32
  %v2_9bb8 = ptrtoint i32* %stack_var_-48 to i32
  %v4_9c18 = zext i8 %tmp to i32
  %v1_9c1c = and i32 %v4_9c18, 18
  %v2_9c20 = icmp eq i32 %v1_9c1c, 18
  %v3_9c04 = sext i16 %tmp61 to i32
  %v1_9c28 = and i32 %v4_9c18, 5
  %v2_9c28 = icmp eq i32 %v1_9c28, 0
  %v4_9b68 = add i32 %v2_9b2c, 82
  %v5_9b68 = inttoptr i32 %v4_9b68 to i16*
  %v1_9d58 = add i32 %v6_9a5c, 40
  %v1_9e6c = urem i32 %v6_999c, 2
  %tmp97 = sub nsw i32 0, %v1_9e6c
  %v4_9e74 = and i32 %tmp97, 32
  %v1_9e84 = urem i32 %v6_99bc, 2
  %tmp98 = sub nsw i32 0, %v1_9e84
  %v4_9e8c = and i32 %tmp98, 16
  %v1_9e9c = urem i32 %v6_99dc, 2
  %tmp99 = sub nsw i32 0, %v1_9e9c
  %v4_9ea4 = and i32 %tmp99, 8
  %v1_9eb4 = urem i32 %v6_99fc, 2
  %tmp100 = sub nsw i32 0, %v1_9eb4
  %v4_9ebc = and i32 %tmp100, 4
  %v1_9ecc = urem i32 %v6_9a1c, 2
  %tmp101 = sub nsw i32 0, %v1_9ecc
  %v3_9ed4 = and i32 %tmp101, 2
  %v1_9ee4 = urem i32 %v6_9a3c, 2
  br label %dec_label_pc_9ae0

dec_label_pc_9ae0:                                ; preds = %dec_label_pc_9ae0.preheader, %dec_label_pc_9c54
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_9c54 ], [ %tmp34, %dec_label_pc_9ae0.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_9c54 ], [ %tmp37, %dec_label_pc_9ae0.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9aec = call i32 @function_11df4(i32 2, i32 1, i32 0)
  store i32 %v3_9aec, i32* %r0.global-to-local, align 4
  %v7_9af0 = icmp eq i32 %v3_9aec, -1
  store i1 %v7_9af0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9aec, i32* @r5, align 4
  br i1 %v7_9af0, label %dec_label_pc_9c54, label %dec_label_pc_9afc

dec_label_pc_9afc:                                ; preds = %dec_label_pc_9ae0, %dec_label_pc_9c30
  %v0_9b04 = phi i32 [ %v3_9c44, %dec_label_pc_9c30 ], [ %v3_9aec, %dec_label_pc_9ae0 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_9c30 ], [ %stack_var_-62.0, %dec_label_pc_9ae0 ]
  %stack_var_-60.1 = phi i32 [ %v0_9d04, %dec_label_pc_9c30 ], [ %stack_var_-60.0, %dec_label_pc_9ae0 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_9b04 = call i32 @function_11414(i32 %v0_9b04, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_9b0c = or i32 %v2_9b04, 2048
  store i32 %v1_9b0c, i32* %r2.global-to-local, align 4
  %v0_9b10 = load i32, i32* @r5, align 4
  store i32 %v0_9b10, i32* %r0.global-to-local, align 4
  %v2_9b14 = call i32 @function_11414(i32 %v0_9b10, i32 4)
  %v3_9b18 = load i32, i32* %stack_var_-44, align 4
  %v5_9b20 = mul i32 %v3_9b18, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_9b2c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_9b34 = add i32 %v5_9b20, %arg2
  store i32 %v2_9b34, i32* %r3.global-to-local, align 4
  %v1_9b38 = add i32 %v2_9b34, 20
  %v2_9b38 = inttoptr i32 %v1_9b38 to i8*
  %v3_9b38 = load i8, i8* %v2_9b38, align 1
  %v4_9b38 = zext i8 %v3_9b38 to i32
  store i32 %v4_9b38, i32* %r2.global-to-local, align 4
  %v2_9b3c = icmp ugt i8 %v3_9b38, 30
  %v7_9b3c = icmp eq i8 %v3_9b38, 31
  store i1 %v7_9b3c, i1* %cpsr_z.global-to-local, align 1
  %v2_9b40 = xor i1 %v7_9b3c, true
  %v3_9b40 = and i1 %v2_9b3c, %v2_9b40
  br i1 %v3_9b40, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_9afc
  %v5_9b40 = add i32 %v2_9b34, 16
  %v6_9b40 = inttoptr i32 %v5_9b40 to i32*
  %v7_9b40 = load i32, i32* %v6_9b40, align 4
  store i32 %v7_9b40, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_9afc, %bb
  %v4_9b44 = phi i32 [ %v2_9b34, %dec_label_pc_9afc ], [ %v7_9b40, %bb ]
  %v4_9b44.stack_var_-60.1 = select i1 %v3_9b40, i32 %v4_9b44, i32 %stack_var_-60.1
  %v2_9b48 = xor i1 %v2_9b3c, true
  %v3_9b48 = or i1 %v7_9b3c, %v2_9b48
  br i1 %v3_9b48, label %dec_label_pc_9c90, label %dec_label_pc_9b4c

dec_label_pc_9b4c:                                ; preds = %bb71, %dec_label_pc_9c90
  %v0_9d04 = phi i32 [ %v5_9ce0, %dec_label_pc_9c90 ], [ %v4_9b44.stack_var_-60.1, %bb71 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_9b54 = load i32, i32* @sl, align 4
  %v9_9b54 = icmp eq i32 %v0_9b54, 65535
  store i1 %v9_9b54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9b54, label %dec_label_pc_9cec, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_9b4c
  %v4_9b58 = udiv i32 %v0_9b54, 256
  %v2_9b5c = urem i32 %v0_9b54, 256
  store i32 %v2_9b5c, i32* %r2.global-to-local, align 4
  %v5_9b60 = mul nuw nsw i32 %v2_9b5c, 256
  %v6_9b60 = or i32 %v5_9b60, %v4_9b58
  store i32 %v6_9b60, i32* %r3.global-to-local, align 4
  store i32 %v2_9b2c, i32* %r0.global-to-local, align 4
  %v2_9b68 = trunc i32 %v6_9b60 to i16
  store i16 %v2_9b68, i16* %v5_9b68, align 2
  br label %dec_label_pc_9b70

dec_label_pc_9b70:                                ; preds = %.thread9, %dec_label_pc_9cec
  %stack_var_-62.2 = phi i16 [ %v1_9cec, %dec_label_pc_9cec ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_9b70, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_9b78 = load i32, i32* @r5, align 4
  store i32 %v0_9b78, i32* %r0.global-to-local, align 4
  %v3_9b7c = call i32 @function_11bdc(i32 %v0_9b78, i32 %v2_9b70, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9b84 = call i32 @function_11260(i32* null)
  store i32 %v2_9b84, i32* %r0.global-to-local, align 4
  store i32 %v2_9b84, i32* @r4, align 4
  %v9_9be4 = icmp eq i32 %tmp35, %v0_9d04
  %v4_9c0c = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_9be4 to i32
  %v9_9bf8 = icmp eq i1 %v9_9be4, false
  %v9_9c10 = icmp eq i32 %v3_9c04, %v4_9c0c
  br label %dec_label_pc_9ba0

dec_label_pc_9b90:                                ; preds = %.thread, %dec_label_pc_9c00, %dec_label_pc_9c28, %bb75
  %v2_9b90 = call i32 @function_11260(i32* null)
  %v0_9b94 = load i32, i32* @r4, align 4
  %v2_9b94 = sub i32 %v2_9b90, %v0_9b94
  store i32 %v2_9b94, i32* %r0.global-to-local, align 4
  %v7_9b98 = icmp eq i32 %v2_9b94, 10
  store i1 %v7_9b98, i1* %cpsr_z.global-to-local, align 1
  %v8_9b9c = icmp sgt i32 %v2_9b94, 10
  br i1 %v8_9b9c, label %dec_label_pc_9c30, label %dec_label_pc_9ba0

dec_label_pc_9ba0:                                ; preds = %dec_label_pc_9b90, %dec_label_pc_9b70
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_9bb4, i32* %r1.global-to-local, align 4
  store i32 %v2_9bb8, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9bc0 = load i32, i32* @sb, align 4
  store i32 %v0_9bc0, i32* %r0.global-to-local, align 4
  %v6_9bc8 = call i32 @function_11cfc(i32 %v0_9bc0, i32 %v2_9bb4, i32 256, i32 16384, i32 %v2_9ba8, i32 %v2_9bb8)
  store i32 %v6_9bc8, i32* %r2.global-to-local, align 4
  %v7_9bd0 = icmp eq i32 %v6_9bc8, -1
  store i1 %v7_9bd0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_9bd0, label %dec_label_pc_9c84, label %dec_label_pc_9bdc

dec_label_pc_9bdc:                                ; preds = %dec_label_pc_9ba0
  store i32 %v0_9d04, i32* %r1.global-to-local, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_9bf0 = icmp eq i32 %v6_9bc8, 40
  store i1 %v7_9bf0, i1* %cpsr_z.global-to-local, align 1
  %tmp102 = icmp ult i32 %v6_9bc8, 41
  br i1 %tmp102, label %.thread, label %bb75

.thread:                                          ; preds = %dec_label_pc_9bdc
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_9b90

bb75:                                             ; preds = %dec_label_pc_9bdc
  store i1 %v9_9bf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9bf8, label %dec_label_pc_9b90, label %dec_label_pc_9c00

dec_label_pc_9c00:                                ; preds = %bb75
  store i32 %v3_9c04, i32* @lr, align 4
  store i32 %v2_9b2c, i32* @r3, align 4
  store i32 %v4_9c0c, i32* %r2.global-to-local, align 4
  store i1 %v9_9c10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9c10, label %dec_label_pc_9c18, label %dec_label_pc_9b90

dec_label_pc_9c18:                                ; preds = %dec_label_pc_9c00
  store i32 %v4_9c18, i32* %r2.global-to-local, align 4
  store i32 %v1_9c1c, i32* @r3, align 4
  store i1 %v2_9c20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9c20, label %dec_label_pc_9cfc, label %dec_label_pc_9c28

dec_label_pc_9c28:                                ; preds = %dec_label_pc_9c18
  store i1 %v2_9c28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9c28, label %dec_label_pc_9b90, label %dec_label_pc_9c30

dec_label_pc_9c30:                                ; preds = %dec_label_pc_9c28, %dec_label_pc_9b90
  %v0_9c30 = load i32, i32* @r5, align 4
  store i32 %v0_9c30, i32* %r0.global-to-local, align 4
  %v1_9c34 = call i32 @function_115e0(i32 %v0_9c30)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9c44 = call i32 @function_11df4(i32 2, i32 1, i32 0)
  store i32 %v3_9c44, i32* %r0.global-to-local, align 4
  %v3_9c48 = icmp eq i32 %v3_9c44, -1
  %v8_9c48 = icmp eq i32 %v3_9c44, -1
  store i1 %v8_9c48, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9c44, i32* @r5, align 4
  br i1 %v3_9c48, label %dec_label_pc_9c54, label %dec_label_pc_9afc

dec_label_pc_9c54:                                ; preds = %dec_label_pc_9c30, %dec_label_pc_9ae0, %bb82
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_9ae0 ], [ %stack_var_-62.2, %bb82 ], [ %stack_var_-62.2, %dec_label_pc_9c30 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_9ae0 ], [ %v0_9d04, %bb82 ], [ %v0_9d04, %dec_label_pc_9c30 ]
  %v3_9c54 = load i32, i32* %stack_var_-44, align 4
  %v1_9c58 = add i32 %v3_9c54, 1
  store i32 %v1_9c58, i32* @r3, align 4
  %v1_9c5c = load i32, i32* @r6, align 4
  %v9_9c5c = icmp eq i32 %v1_9c58, %v1_9c5c
  store i1 %v9_9c5c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9c58, i32* %stack_var_-44, align 4
  %v5_9c64 = icmp slt i32 %v1_9c58, %v1_9c5c
  br i1 %v5_9c64, label %dec_label_pc_9ae0, label %dec_label_pc_9c68

dec_label_pc_9c68:                                ; preds = %dec_label_pc_9c54
  store i32 %v6_9a5c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9f18

dec_label_pc_9c7c:                                ; preds = %dec_label_pc_9aa0
  %v0_9c7c = load i32, i32* @sb, align 4
  store i32 %v0_9c7c, i32* %r0.global-to-local, align 4
  %v1_9c80 = call i32 @function_115e0(i32 %v0_9c7c)
  store i32 %v1_9c80, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9c84

dec_label_pc_9c84:                                ; preds = %dec_label_pc_9ba0, %dec_label_pc_98bc, %dec_label_pc_9c7c
  %v1_9c8c = phi i32 [ %v3_9a90, %dec_label_pc_98bc ], [ %v1_9c80, %dec_label_pc_9c7c ], [ 0, %dec_label_pc_9ba0 ]
  store i32 %v27_98bc, i32* %lr.global-to-local, align 4
  ret i32 %v1_9c8c

dec_label_pc_9c90:                                ; preds = %bb71
  %v1_9c90 = add i32 %v4_9b44, 16
  %v2_9c90 = inttoptr i32 %v1_9c90 to i32*
  %v3_9c90 = load i32, i32* %v2_9c90, align 4
  store i32 %v3_9c90, i32* @r4, align 4
  %v0_9c94 = call i32 @function_e29c()
  store i32 %v0_9c94, i32* %r0.global-to-local, align 4
  %v3_9c98 = load i32, i32* %stack_var_-44, align 4
  %v5_9ca0 = mul i32 %v3_9c98, 24
  %v0_9ca8 = load i32, i32* @r4, align 4
  %v1_9ca8 = and i32 %v0_9ca8, 16711680
  store i32 %v1_9ca8, i32* %ip.global-to-local, align 4
  %v3_9cac = udiv i32 %v0_9ca8, 16777216
  %v2_9cb0 = add i32 %v5_9ca0, %arg2
  store i32 %v2_9cb0, i32* %r1.global-to-local, align 4
  %v4_9cb4 = udiv i32 %v1_9ca8, 256
  %v5_9cb4 = or i32 %v4_9cb4, %v3_9cac
  store i32 %v5_9cb4, i32* %r2.global-to-local, align 4
  %v1_9cb8 = and i32 %v0_9ca8, 65280
  store i32 %v1_9cb8, i32* %r3.global-to-local, align 4
  %v1_9cbc = add i32 %v2_9cb0, 20
  %v2_9cbc = inttoptr i32 %v1_9cbc to i8*
  %v3_9cbc = load i8, i8* %v2_9cbc, align 1
  %v4_9cbc = zext i8 %v3_9cbc to i32
  store i32 %v4_9cbc, i32* %ip.global-to-local, align 4
  %v5_9cc4 = call i32 @llvm.bswap.i32(i32 %v0_9ca8)
  %v7_9cc8 = lshr i32 %v0_9c94, %v4_9cbc
  %v8_9cc8 = add i32 %v7_9cc8, %v5_9cc4
  store i32 %v8_9cc8, i32* %r2.global-to-local, align 4
  %v1_9ccc = and i32 %v8_9cc8, 16711680
  store i32 %v1_9ccc, i32* %r0.global-to-local, align 4
  %v1_9cd8 = and i32 %v8_9cc8, 65280
  store i32 %v1_9cd8, i32* %r1.global-to-local, align 4
  %v5_9ce0 = call i32 @llvm.bswap.i32(i32 %v8_9cc8)
  store i32 %v5_9ce0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9b4c

dec_label_pc_9cec:                                ; preds = %dec_label_pc_9b4c
  %v0_9cec = call i32 @function_e29c()
  %v1_9cec = trunc i32 %v0_9cec to i16
  store i32 %v0_9cec, i32* %r0.global-to-local, align 4
  store i32 %v2_9b2c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_9b70

dec_label_pc_9cfc:                                ; preds = %dec_label_pc_9c18
  %v3_9cfc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9cfc, i32* @r4, align 4
  store i32 %v2_98d8, i32* %ip.global-to-local, align 4
  %v5_9d04 = mul i32 %v3_9cfc, 16
  %v6_9d04 = add i32 %v5_9d04, %v2_98d8
  %v7_9d04 = inttoptr i32 %v6_9d04 to i32*
  store i32 %v0_9d04, i32* %v7_9d04, align 4
  %v0_9d08 = load i32, i32* @r8, align 4
  %v1_9d08 = add i32 %v0_9d08, 4
  %v2_9d08 = inttoptr i32 %v1_9d08 to i32*
  %v3_9d08 = load i32, i32* %v2_9d08, align 4
  store i32 %v3_9d08, i32* %r1.global-to-local, align 4
  %v1_9d14 = and i32 %v3_9d08, 65280
  store i32 %v1_9d14, i32* %r2.global-to-local, align 4
  store i32 %v2_98d8, i32* %r0.global-to-local, align 4
  %v0_9d24 = load i32, i32* @r4, align 4
  %v3_9d24 = mul i32 %v0_9d24, 16
  %v2_9d28 = add i32 %v3_9d24, %v2_98d8
  store i32 %v2_9d28, i32* %ip.global-to-local, align 4
  %v5_9d2c = call i32 @llvm.bswap.i32(i32 %v3_9d08)
  store i32 %v5_9d2c, i32* %r3.global-to-local, align 4
  %v2_9d30 = add i32 %v2_9d28, 4
  %v3_9d30 = inttoptr i32 %v2_9d30 to i32*
  store i32 %v5_9d2c, i32* %v3_9d30, align 4
  %v0_9d34 = load i32, i32* @r8, align 4
  %v1_9d34 = add i32 %v0_9d34, 8
  %v2_9d34 = inttoptr i32 %v1_9d34 to i32*
  %v3_9d34 = load i32, i32* %v2_9d34, align 4
  store i32 %v3_9d34, i32* %r1.global-to-local, align 4
  %v1_9d38 = and i32 %v3_9d34, 16711680
  store i32 %v1_9d38, i32* %r0.global-to-local, align 4
  store i32 %v6_9a5c, i32* %r2.global-to-local, align 4
  %v5_9d50 = call i32 @llvm.bswap.i32(i32 %v3_9d34)
  store i32 %v5_9d50, i32* %r3.global-to-local, align 4
  %v1_9d54 = add i32 %v0_9d34, 2
  %v2_9d54 = inttoptr i32 %v1_9d54 to i16*
  %v3_9d54 = load i16, i16* %v2_9d54, align 2
  %v4_9d54 = zext i16 %v3_9d54 to i32
  store i32 %v4_9d54, i32* %r1.global-to-local, align 4
  store i32 %v1_9d58, i32* @r7, align 4
  %v0_9d5c = load i32, i32* @lr, align 4
  %v1_9d5c = trunc i32 %v0_9d5c to i16
  %v2_9d5c = load i32, i32* %ip.global-to-local, align 4
  %v3_9d5c = add i32 %v2_9d5c, 14
  %v4_9d5c = inttoptr i32 %v3_9d5c to i16*
  store i16 %v1_9d5c, i16* %v4_9d5c, align 2
  %v0_9d60 = load i32, i32* %r1.global-to-local, align 4
  %v1_9d60 = trunc i32 %v0_9d60 to i16
  %v2_9d60 = load i32, i32* %ip.global-to-local, align 4
  %v3_9d60 = add i32 %v2_9d60, 12
  %v4_9d60 = inttoptr i32 %v3_9d60 to i16*
  store i16 %v1_9d60, i16* %v4_9d60, align 2
  %v0_9d64 = load i32, i32* %r3.global-to-local, align 4
  %v1_9d64 = load i32, i32* %ip.global-to-local, align 4
  %v2_9d64 = add i32 %v1_9d64, 8
  %v3_9d64 = inttoptr i32 %v2_9d64 to i32*
  store i32 %v0_9d64, i32* %v3_9d64, align 4
  %v0_9d68 = load i32, i32* @r7, align 4
  store i32 %v0_9d68, i32* @r0, align 4
  %v0_9d6c = call i32 @function_1203c()
  store i32 %v0_9d6c, i32* %r0.global-to-local, align 4
  store i32 %v2_98e8, i32* %r3.global-to-local, align 4
  %v2_9d78 = load i32, i32* @r4, align 4
  %v5_9d78 = mul i32 %v2_9d78, 4
  %v6_9d78 = add i32 %v5_9d78, %v2_98e8
  %v7_9d78 = inttoptr i32 %v6_9d78 to i32*
  store i32 %v0_9d6c, i32* %v7_9d78, align 4
  %v3_9d7c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9d7c, i32* %r2.global-to-local, align 4
  %v0_9d80 = load i32, i32* %r3.global-to-local, align 4
  %v4_9d80 = mul i32 %v3_9d7c, 4
  %v5_9d80 = add i32 %v0_9d80, %v4_9d80
  %v6_9d80 = inttoptr i32 %v5_9d80 to i32*
  %v7_9d80 = load i32, i32* %v6_9d80, align 4
  store i32 %v7_9d80, i32* @r4, align 4
  %v1_9d84 = inttoptr i32 %v7_9d80 to i8*
  %v2_9d84 = load i8, i8* %v1_9d84, align 1
  %tmp103 = urem i8 %v2_9d84, 16
  %v1_9d88 = zext i8 %tmp103 to i32
  %v1_9d8c = or i32 %v1_9d88, 64
  store i32 %v1_9d8c, i32* %r3.global-to-local, align 4
  %v1_9d90 = trunc i32 %v1_9d8c to i8
  store i8 %v1_9d90, i8* %v1_9d84, align 1
  %v0_9d94 = load i32, i32* @r4, align 4
  %v1_9d94 = inttoptr i32 %v0_9d94 to i8*
  %v2_9d94 = load i8, i8* %v1_9d94, align 1
  %v0_9d98 = load i32, i32* @r7, align 4
  %tmp77 = mul i32 %v0_9d98, 256
  %v1_9da0 = and i8 %v2_9d94, -16
  %v1_9da4 = or i8 %v1_9da0, 5
  %v1_9da8 = and i32 %tmp77, 65280
  %tmp78 = udiv i32 %v0_9d98, 256
  %v4_9dac = urem i32 %tmp78, 256
  %v5_9dac = or i32 %v4_9dac, %v1_9da8
  store i32 %v5_9dac, i32* %r2.global-to-local, align 4
  %v0_9db0 = load i32, i32* @fp, align 4
  %v1_9db0 = urem i32 %v0_9db0, 256
  store i32 %v1_9db0, i32* %r0.global-to-local, align 4
  store i32 %v1_9968, i32* %ip.global-to-local, align 4
  %v3_9db8 = udiv i32 %v0_9db0, 256
  store i32 %v3_9db8, i32* %r1.global-to-local, align 4
  store i8 %v1_9da4, i8* %v1_9d94, align 1
  %v0_9dc0 = load i32, i32* %r1.global-to-local, align 4
  %v1_9dc0 = load i32, i32* %r0.global-to-local, align 4
  %v4_9dc0 = mul i32 %v1_9dc0, 256
  %v5_9dc0 = or i32 %v4_9dc0, %v0_9dc0
  store i32 %v5_9dc0, i32* %r1.global-to-local, align 4
  store i32 %v6_9900, i32* %r0.global-to-local, align 4
  %v2_9dc8 = load i32, i32* @r4, align 4
  %v3_9dc8 = add i32 %v2_9dc8, 1
  %v4_9dc8 = inttoptr i32 %v3_9dc8 to i8*
  store i8 %v5_9920, i8* %v4_9dc8, align 1
  %v0_9dcc = load i32, i32* %r1.global-to-local, align 4
  %v1_9dcc = trunc i32 %v0_9dcc to i16
  %v2_9dcc = load i32, i32* @r4, align 4
  %v3_9dcc = add i32 %v2_9dcc, 4
  %v4_9dcc = inttoptr i32 %v3_9dcc to i16*
  store i16 %v1_9dcc, i16* %v4_9dcc, align 2
  %v0_9dd0 = load i32, i32* %ip.global-to-local, align 4
  %v2_9dd0 = icmp eq i32 %v0_9dd0, 0
  store i1 %v2_9dd0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_995c, i32* %r1.global-to-local, align 4
  %v0_9dd8 = load i32, i32* %r2.global-to-local, align 4
  %v1_9dd8 = trunc i32 %v0_9dd8 to i16
  %v2_9dd8 = load i32, i32* @r4, align 4
  %v3_9dd8 = add i32 %v2_9dd8, 2
  %v4_9dd8 = inttoptr i32 %v3_9dd8 to i16*
  store i16 %v1_9dd8, i16* %v4_9dd8, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_9dd0, label %bb80, label %bb79

bb79:                                             ; preds = %dec_label_pc_9cfc
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %dec_label_pc_9cfc, %bb79
  %v0_9de4 = load i32, i32* %r1.global-to-local, align 4
  %v1_9de4 = trunc i32 %v0_9de4 to i8
  %v2_9de4 = load i32, i32* @r4, align 4
  %v3_9de4 = add i32 %v2_9de4, 8
  %v4_9de4 = inttoptr i32 %v3_9de4 to i8*
  store i8 %v1_9de4, i8* %v4_9de4, align 1
  %v0_9de8 = load i32, i32* %r3.global-to-local, align 4
  %v1_9de8 = trunc i32 %v0_9de8 to i8
  %v2_9de8 = load i32, i32* @r4, align 4
  %v3_9de8 = add i32 %v2_9de8, 9
  %v4_9de8 = inttoptr i32 %v3_9de8 to i8*
  store i8 %v1_9de8, i8* %v4_9de8, align 1
  %v0_9dec = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9dec, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_9dec = load i32, i32* %r2.global-to-local, align 4
  %v2_9dec = trunc i32 %v1_9dec to i16
  %v3_9dec = load i32, i32* @r4, align 4
  %v4_9dec = add i32 %v3_9dec, 6
  %v5_9dec = inttoptr i32 %v4_9dec to i16*
  store i16 %v2_9dec, i16* %v5_9dec, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  store i32 ptrtoint (i32* @global_var_212d8.46 to i32), i32* %r2.global-to-local, align 4
  %v2_9df4 = load i32, i32* @global_var_212d8.46, align 4
  store i32 %v2_9df4, i32* %r1.global-to-local, align 4
  %v1_9df8 = load i32, i32* @r4, align 4
  %v2_9df8 = add i32 %v1_9df8, 12
  %v3_9df8 = inttoptr i32 %v2_9df8 to i32*
  store i32 %v2_9df4, i32* %v3_9df8, align 4
  %v3_9dfc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9dfc, i32* %r3.global-to-local, align 4
  store i32 %v2_98d8, i32* %ip.global-to-local, align 4
  %v4_9e04 = mul i32 %v3_9dfc, 16
  %v5_9e04 = add i32 %v4_9e04, %v2_98d8
  %v6_9e04 = inttoptr i32 %v5_9e04 to i32*
  %v7_9e04 = load i32, i32* %v6_9e04, align 4
  store i32 %v7_9e04, i32* %r2.global-to-local, align 4
  store i32 %v5_9e04, i32* %r3.global-to-local, align 4
  %v1_9e10 = load i32, i32* @r4, align 4
  %v2_9e10 = add i32 %v1_9e10, 16
  %v3_9e10 = inttoptr i32 %v2_9e10 to i32*
  store i32 %v7_9e04, i32* %v3_9e10, align 4
  %v0_9e14 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e14 = add i32 %v0_9e14, 12
  %v2_9e14 = inttoptr i32 %v1_9e14 to i16*
  %v3_9e14 = load i16, i16* %v2_9e14, align 2
  %v4_9e14 = zext i16 %v3_9e14 to i32
  store i32 %v4_9e14, i32* %r0.global-to-local, align 4
  %v1_9e18 = add i32 %v0_9e14, 8
  %v2_9e18 = inttoptr i32 %v1_9e18 to i32*
  %v3_9e18 = load i32, i32* %v2_9e18, align 4
  store i32 %v3_9e18, i32* %r1.global-to-local, align 4
  %v2_9e1c = load i32, i32* @r4, align 4
  %v3_9e1c = add i32 %v2_9e1c, 20
  %v4_9e1c = inttoptr i32 %v3_9e1c to i16*
  store i16 %v3_9e14, i16* %v4_9e1c, align 2
  %v0_9e20 = load i32, i32* @r4, align 4
  %v1_9e20 = add i32 %v0_9e20, 20
  store i32 %v1_9e20, i32* @r8, align 4
  %v1_9e24 = add i32 %v0_9e20, 33
  %v2_9e24 = inttoptr i32 %v1_9e24 to i8*
  %v3_9e24 = load i8, i8* %v2_9e24, align 1
  %v4_9e24 = zext i8 %v3_9e24 to i32
  store i32 %v4_9e24, i32* %r2.global-to-local, align 4
  %v0_9e28 = load i32, i32* %r1.global-to-local, align 4
  %v2_9e28 = add i32 %v0_9e20, 24
  %v3_9e28 = inttoptr i32 %v2_9e28 to i32*
  store i32 %v0_9e28, i32* %v3_9e28, align 4
  %v0_9e2c = load i32, i32* %r2.global-to-local, align 4
  %v1_9e2c = or i32 %v0_9e2c, 1
  store i32 %v1_9e2c, i32* %r2.global-to-local, align 4
  %v0_9e30 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e30 = add i32 %v0_9e30, 4
  %v2_9e30 = inttoptr i32 %v1_9e30 to i32*
  %v3_9e30 = load i32, i32* %v2_9e30, align 4
  store i32 %v3_9e30, i32* %r1.global-to-local, align 4
  %v1_9e34 = add i32 %v0_9e30, 14
  %v2_9e34 = inttoptr i32 %v1_9e34 to i16*
  %v3_9e34 = load i16, i16* %v2_9e34, align 2
  %v4_9e34 = zext i16 %v3_9e34 to i32
  store i32 %v4_9e34, i32* %r3.global-to-local, align 4
  %v1_9e38 = trunc i32 %v1_9e2c to i8
  %v2_9e38 = load i32, i32* @r8, align 4
  %v3_9e38 = add i32 %v2_9e38, 13
  %v4_9e38 = inttoptr i32 %v3_9e38 to i8*
  store i8 %v1_9e38, i8* %v4_9e38, align 1
  %v0_9e3c = load i32, i32* %r3.global-to-local, align 4
  %v1_9e3c = trunc i32 %v0_9e3c to i16
  %v2_9e3c = load i32, i32* @r8, align 4
  %v3_9e3c = add i32 %v2_9e3c, 2
  %v4_9e3c = inttoptr i32 %v3_9e3c to i16*
  store i16 %v1_9e3c, i16* %v4_9e3c, align 2
  %v0_9e40 = load i32, i32* @r8, align 4
  %v1_9e40 = add i32 %v0_9e40, 12
  %v2_9e40 = inttoptr i32 %v1_9e40 to i8*
  %v3_9e40 = load i8, i8* %v2_9e40, align 1
  %v4_9e40 = zext i8 %v3_9e40 to i32
  store i32 %v4_9e40, i32* %r3.global-to-local, align 4
  %v1_9e44 = add i32 %v0_9e40, 13
  %v2_9e44 = inttoptr i32 %v1_9e44 to i8*
  %v3_9e44 = load i8, i8* %v2_9e44, align 1
  %v4_9e44 = zext i8 %v3_9e44 to i32
  %tmp104 = urem i8 %v3_9e40, 16
  %v1_9e48 = zext i8 %tmp104 to i32
  %v1_9e4c = or i32 %v1_9e48, 128
  store i32 %v1_9e4c, i32* %r3.global-to-local, align 4
  %v1_9e50 = or i32 %v4_9e44, 16
  store i32 %v1_9e50, i32* %r2.global-to-local, align 4
  %v0_9e54 = load i32, i32* %r1.global-to-local, align 4
  %v2_9e54 = add i32 %v0_9e40, 8
  %v3_9e54 = inttoptr i32 %v2_9e54 to i32*
  store i32 %v0_9e54, i32* %v3_9e54, align 4
  %v0_9e58 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e58 = trunc i32 %v0_9e58 to i8
  %v2_9e58 = load i32, i32* @r8, align 4
  %v3_9e58 = add i32 %v2_9e58, 12
  %v4_9e58 = inttoptr i32 %v3_9e58 to i8*
  store i8 %v1_9e58, i8* %v4_9e58, align 1
  %v0_9e5c = load i32, i32* %r2.global-to-local, align 4
  %v1_9e5c = trunc i32 %v0_9e5c to i8
  %v2_9e5c = load i32, i32* @r8, align 4
  %v3_9e5c = add i32 %v2_9e5c, 13
  %v4_9e5c = inttoptr i32 %v3_9e5c to i8*
  store i8 %v1_9e5c, i8* %v4_9e5c, align 1
  %v0_9e60 = call i32 @function_e29c()
  %v1_9e60 = trunc i32 %v0_9e60 to i16
  store i32 %v0_9e60, i32* %r0.global-to-local, align 4
  store i32 %v1_99a4, i32* %r1.global-to-local, align 4
  %v0_9e68 = load i32, i32* @r8, align 4
  %v1_9e68 = add i32 %v0_9e68, 13
  %v2_9e68 = inttoptr i32 %v1_9e68 to i8*
  %v3_9e68 = load i8, i8* %v2_9e68, align 1
  %v4_9e68 = zext i8 %v3_9e68 to i32
  store i32 %v1_9e6c, i32* %r2.global-to-local, align 4
  %v1_9e70 = and i32 %v4_9e68, 223
  %v5_9e74 = or i32 %v1_9e70, %v4_9e74
  store i32 %v5_9e74, i32* %r3.global-to-local, align 4
  %v1_9e78 = trunc i32 %v5_9e74 to i8
  store i8 %v1_9e78, i8* %v2_9e68, align 1
  store i32 %v1_99c4, i32* %ip.global-to-local, align 4
  %v0_9e80 = load i32, i32* @r8, align 4
  %v1_9e80 = add i32 %v0_9e80, 13
  %v2_9e80 = inttoptr i32 %v1_9e80 to i8*
  %v3_9e80 = load i8, i8* %v2_9e80, align 1
  %v4_9e80 = zext i8 %v3_9e80 to i32
  store i32 %v1_9e84, i32* %r3.global-to-local, align 4
  %v1_9e88 = and i32 %v4_9e80, 239
  %v5_9e8c = or i32 %v1_9e88, %v4_9e8c
  store i32 %v5_9e8c, i32* %r2.global-to-local, align 4
  %v1_9e90 = trunc i32 %v5_9e8c to i8
  store i8 %v1_9e90, i8* %v2_9e80, align 1
  store i32 %v1_99e4, i32* %r1.global-to-local, align 4
  %v0_9e98 = load i32, i32* @r8, align 4
  %v1_9e98 = add i32 %v0_9e98, 13
  %v2_9e98 = inttoptr i32 %v1_9e98 to i8*
  %v3_9e98 = load i8, i8* %v2_9e98, align 1
  %v4_9e98 = zext i8 %v3_9e98 to i32
  store i32 %v1_9e9c, i32* %r2.global-to-local, align 4
  %v1_9ea0 = and i32 %v4_9e98, 247
  %v5_9ea4 = or i32 %v1_9ea0, %v4_9ea4
  store i32 %v5_9ea4, i32* %r3.global-to-local, align 4
  %v1_9ea8 = trunc i32 %v5_9ea4 to i8
  store i8 %v1_9ea8, i8* %v2_9e98, align 1
  store i32 %v1_9a04, i32* %ip.global-to-local, align 4
  %v0_9eb0 = load i32, i32* @r8, align 4
  %v1_9eb0 = add i32 %v0_9eb0, 13
  %v2_9eb0 = inttoptr i32 %v1_9eb0 to i8*
  %v3_9eb0 = load i8, i8* %v2_9eb0, align 1
  %v4_9eb0 = zext i8 %v3_9eb0 to i32
  store i32 %v1_9eb4, i32* %r3.global-to-local, align 4
  %v1_9eb8 = and i32 %v4_9eb0, 251
  %v5_9ebc = or i32 %v1_9eb8, %v4_9ebc
  store i32 %v5_9ebc, i32* %r2.global-to-local, align 4
  %v1_9ec0 = trunc i32 %v5_9ebc to i8
  store i8 %v1_9ec0, i8* %v2_9eb0, align 1
  store i32 %v1_9a24, i32* %r1.global-to-local, align 4
  %v0_9ec8 = load i32, i32* @r8, align 4
  %v1_9ec8 = add i32 %v0_9ec8, 13
  %v2_9ec8 = inttoptr i32 %v1_9ec8 to i8*
  %v3_9ec8 = load i8, i8* %v2_9ec8, align 1
  %v4_9ec8 = zext i8 %v3_9ec8 to i32
  store i32 %v1_9ecc, i32* %r2.global-to-local, align 4
  %v1_9ed0 = and i32 %v4_9ec8, 253
  %v4_9ed4 = or i32 %v1_9ed0, %v3_9ed4
  store i32 %v4_9ed4, i32* %r3.global-to-local, align 4
  %v1_9ed8 = trunc i32 %v4_9ed4 to i8
  store i8 %v1_9ed8, i8* %v2_9ec8, align 1
  store i32 %v1_9a44, i32* %ip.global-to-local, align 4
  %v0_9ee0 = load i32, i32* @r8, align 4
  %v1_9ee0 = add i32 %v0_9ee0, 13
  %v2_9ee0 = inttoptr i32 %v1_9ee0 to i8*
  %v3_9ee0 = load i8, i8* %v2_9ee0, align 1
  %v4_9ee0 = zext i8 %v3_9ee0 to i32
  %v1_9ee8 = and i32 %v4_9ee0, 254
  store i32 %v1_9ee8, i32* %r2.global-to-local, align 4
  %v2_9eec = or i32 %v1_9ee8, %v1_9ee4
  store i32 %v2_9eec, i32* %r3.global-to-local, align 4
  %v1_9ef0 = trunc i32 %v2_9eec to i8
  store i8 %v1_9ef0, i8* %v2_9ee0, align 1
  %v3_9ef4 = load i32, i32* @r8, align 4
  %v4_9ef4 = add i32 %v3_9ef4, 14
  %v5_9ef4 = inttoptr i32 %v4_9ef4 to i16*
  store i16 %v1_9e60, i16* %v5_9ef4, align 2
  store i32 %v6_9a5c, i32* %r1.global-to-local, align 4
  %v0_9efc = load i32, i32* @r4, align 4
  %v1_9efc = add i32 %v0_9efc, 40
  store i32 %v1_9efc, i32* %r0.global-to-local, align 4
  %v2_9f00 = inttoptr i32 %v1_9efc to i16*
  %v3_9f00 = call i32 @function_e430(i16* %v2_9f00, i32 %v6_9a5c)
  store i32 %v3_9f00, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9c54

dec_label_pc_9f08:                                ; preds = %dec_label_pc_9ac8
  store i32 %v6_9a5c, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_9a5c, 40
  br label %dec_label_pc_9f18

dec_label_pc_9f18:                                ; preds = %dec_label_pc_9c68, %dec_label_pc_9f08
  %storemerge6.pre-phi = phi i32 [ %v1_9d58, %dec_label_pc_9c68 ], [ %.pre, %dec_label_pc_9f08 ]
  %v0_9f2c26 = phi i32 [ %v1_9c5c, %dec_label_pc_9c68 ], [ 0, %dec_label_pc_9f08 ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_9a5c, 65536
  %storemerge = add i32 %v6_9a5c, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_9f18 = add i32 %storemerge4, 1310720
  store i32 %v1_9f18, i32* %r2.global-to-local, align 4
  %tmp83 = udiv i32 %v1_9f18, 256
  %v3_9f20 = and i32 %tmp83, 65280
  store i32 %v3_9f20, i32* %r3.global-to-local, align 4
  %v4_9f24 = udiv i32 %v1_9f18, 16777216
  %v5_9f24 = or i32 %v3_9f20, %v4_9f24
  store i32 %v5_9f24, i32* @r8, align 4
  %v2_a050 = icmp eq i32 %v1_9a7c, 0
  br label %dec_label_pc_9f28

dec_label_pc_9f28:                                ; preds = %dec_label_pc_9f28, %dec_label_pc_a034, %dec_label_pc_9f18
  %v0_9f2c = phi i32 [ %v0_9f2c26, %dec_label_pc_9f18 ], [ 0, %dec_label_pc_a034 ], [ 0, %dec_label_pc_9f28 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9f2c = icmp eq i32 %v0_9f2c, 0
  store i1 %v2_9f2c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9f2c, label %dec_label_pc_9f28, label %dec_label_pc_9f38

dec_label_pc_9f38:                                ; preds = %dec_label_pc_9f28, %dec_label_pc_a034
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9f3c

dec_label_pc_9f3c:                                ; preds = %dec_label_pc_9f64, %dec_label_pc_9f38
  %v1_9f44 = phi i32 [ %v1_a024, %dec_label_pc_9f64 ], [ 0, %dec_label_pc_9f38 ]
  store i32 %v2_98e8, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_9f44 = mul i32 %v1_9f44, 4
  %v5_9f44 = add i32 %v4_9f44, %v2_98e8
  %v6_9f44 = inttoptr i32 %v5_9f44 to i32*
  %v7_9f44 = load i32, i32* %v6_9f44, align 4
  store i32 %v7_9f44, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_9f4c = load i32, i32* @fp, align 4
  %v9_9f4c = icmp eq i32 %v0_9f4c, 65535
  store i1 %v9_9f4c, i1* %cpsr_z.global-to-local, align 1
  %v1_9f50 = add i32 %v7_9f44, 20
  store i32 %v1_9f50, i32* @r5, align 4
  br i1 %v9_9f4c, label %dec_label_pc_a048, label %dec_label_pc_9f58

dec_label_pc_9f58:                                ; preds = %dec_label_pc_9f3c
  store i32 %v1_9a7c, i32* %r3.global-to-local, align 4
  store i1 %v2_a050, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a050, label %dec_label_pc_9f64, label %dec_label_pc_a05c

dec_label_pc_9f64:                                ; preds = %dec_label_pc_9f58, %dec_label_pc_a048, %dec_label_pc_a05c
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_9f68 = load i32, i32* @r4, align 4
  %v3_9f68 = add i32 %v2_9f68, 10
  %v4_9f68 = inttoptr i32 %v3_9f68 to i16*
  store i16 0, i16* %v4_9f68, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9f70 = load i32, i32* @r4, align 4
  store i32 %v0_9f70, i32* @r0, align 4
  %v2_9f74 = call i32 @function_c848(i32 %v0_9f70, i32 20)
  %v3_9f74 = trunc i32 %v2_9f74 to i16
  store i32 %v2_9f74, i32* %r0.global-to-local, align 4
  %v3_9f78 = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_98d8, i32* %r2.global-to-local, align 4
  %v3_9f80 = mul i32 %v3_9f78, 16
  %v2_9f84 = add i32 %v3_9f80, %v2_98d8
  store i32 %v2_9f84, i32* %r1.global-to-local, align 4
  %v1_9f88 = add i32 %v2_9f84, 4
  %v2_9f88 = inttoptr i32 %v1_9f88 to i32*
  %v3_9f88 = load i32, i32* %v2_9f88, align 4
  %v3_9f8c = mul i32 %v3_9f88, 65536
  store i32 %v3_9f8c, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_9f88, 256
  %v1_9f94 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_9f88, 256
  %v4_9f98 = urem i32 %tmp86, 256
  %v5_9f98 = or i32 %v4_9f98, %v1_9f94
  store i32 %v5_9f98, i32* %r3.global-to-local, align 4
  %v1_9f9c = add i32 %v3_9f88, 1
  store i32 %v1_9f9c, i32* %r2.global-to-local, align 4
  store i32 %v1_9f9c, i32* %v2_9f88, align 4
  %v0_9fa4 = load i32, i32* %r3.global-to-local, align 4
  %v1_9fa4 = load i32, i32* @r5, align 4
  %v2_9fa4 = add i32 %v1_9fa4, 4
  %v3_9fa4 = inttoptr i32 %v2_9fa4 to i32*
  store i32 %v0_9fa4, i32* %v3_9fa4, align 4
  %v0_9fa8 = load i32, i32* %r1.global-to-local, align 4
  %v1_9fa8 = add i32 %v0_9fa8, 8
  %v2_9fa8 = inttoptr i32 %v1_9fa8 to i32*
  %v3_9fa8 = load i32, i32* %v2_9fa8, align 4
  %tmp87 = mul i32 %v3_9fa8, 256
  %v1_9fb4 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_9fa8, 256
  %v4_9fb8 = urem i32 %tmp88, 256
  %v5_9fb8 = or i32 %v4_9fb8, %v1_9fb4
  %v1_9fbc = load i32, i32* @r5, align 4
  %v2_9fbc = add i32 %v1_9fbc, 8
  %v3_9fbc = inttoptr i32 %v2_9fbc to i32*
  store i32 %v5_9fb8, i32* %v3_9fbc, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_9fc4 = load i32, i32* @r4, align 4
  %v4_9fc4 = add i32 %v3_9fc4, 10
  %v5_9fc4 = inttoptr i32 %v4_9fc4 to i16*
  store i16 %v3_9f74, i16* %v5_9fc4, align 2
  %v0_9fc8 = load i32, i32* @r5, align 4
  store i32 %v0_9fc8, i32* @r1, align 4
  %v0_9fcc = load i32, i32* %r3.global-to-local, align 4
  %v1_9fcc = trunc i32 %v0_9fcc to i16
  %v3_9fcc = add i32 %v0_9fc8, 16
  %v4_9fcc = inttoptr i32 %v3_9fcc to i16*
  store i16 %v1_9fcc, i16* %v4_9fcc, align 2
  %v0_9fd0 = load i32, i32* @r8, align 4
  store i32 %v0_9fd0, i32* %r2.global-to-local, align 4
  %v0_9fd4 = load i32, i32* @sl, align 4
  store i32 %v0_9fd4, i32* %r3.global-to-local, align 4
  %v0_9fd8 = load i32, i32* @r4, align 4
  store i32 %v0_9fd8, i32* %r0.global-to-local, align 4
  %v4_9fdc = call i32 @function_c898(i32 %v0_9fd8, i32 %v0_9fc8, i32 %v0_9fd0, i32 %v0_9fd4)
  %v5_9fdc = trunc i32 %v4_9fdc to i16
  store i32 %v4_9fdc, i32* %r0.global-to-local, align 4
  %v3_9fe0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9fe0, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_9fe8 = mul i32 %v3_9fe0, 32
  store i32 %v3_9fe8, i32* %lr.global-to-local, align 4
  %v3_9fec = load i32, i32* @r5, align 4
  %v4_9fec = add i32 %v3_9fec, 16
  %v5_9fec = inttoptr i32 %v4_9fec to i16*
  store i16 %v5_9fdc, i16* %v5_9fec, align 2
  %v0_9ff0 = load i32, i32* %lr.global-to-local, align 4
  %v1_9ff0 = load i32, i32* %r3.global-to-local, align 4
  %tmp105 = mul i32 %v1_9ff0, -8
  %v5_9ff0 = add i32 %v0_9ff0, %tmp105
  store i32 %v5_9ff0, i32* %lr.global-to-local, align 4
  %v0_9ff4 = load i32, i32* @r5, align 4
  %v1_9ff4 = add i32 %v0_9ff4, 2
  %v2_9ff4 = inttoptr i32 %v1_9ff4 to i16*
  %v3_9ff4 = load i16, i16* %v2_9ff4, align 2
  %v1_9ff8 = load i32, i32* %ip.global-to-local, align 4
  %v2_9ff8 = add i32 %v1_9ff8, %v5_9ff0
  store i32 %v2_9ff8, i32* @lr, align 4
  %v3_9ffc = add i32 %v2_9ff8, 2
  %v4_9ffc = inttoptr i32 %v3_9ffc to i16*
  store i16 %v3_9ff4, i16* %v4_9ffc, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_a008 = load i32, i32* @r4, align 4
  store i32 %v0_a008, i32* %r1.global-to-local, align 4
  %v0_a00c = load i32, i32* @sb, align 4
  store i32 %v0_a00c, i32* %r0.global-to-local, align 4
  %v0_a010 = load i32, i32* @r7, align 4
  store i32 %v0_a010, i32* %r2.global-to-local, align 4
  %v0_a014 = load i32, i32* @lr, align 4
  %v6_a01c = call i32 @function_11d70(i32 %v0_a00c, i32 %v0_a008, i32 %v0_a010, i32 16384, i32 %v0_a014, i32 16)
  %v3_a020 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a020, i32* %r3.global-to-local, align 4
  %v1_a024 = add i32 %v3_a020, 1
  store i32 %v1_a024, i32* %r0.global-to-local, align 4
  %v0_a028 = load i32, i32* @r6, align 4
  %v9_a028 = icmp eq i32 %v0_a028, %v1_a024
  store i1 %v9_a028, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a024, i32* %stack_var_-44, align 4
  %v8_a030 = icmp sgt i32 %v0_a028, %v1_a024
  br i1 %v8_a030, label %dec_label_pc_9f3c, label %dec_label_pc_a034

dec_label_pc_a034:                                ; preds = %dec_label_pc_9f64
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a038 = icmp eq i32 %v0_a028, 0
  store i1 %v2_a038, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a038, label %dec_label_pc_9f28, label %dec_label_pc_9f38

dec_label_pc_a048:                                ; preds = %dec_label_pc_9f3c
  %v0_a048 = call i32 @function_e29c()
  %v1_a048 = trunc i32 %v0_a048 to i16
  store i32 %v0_a048, i32* %r0.global-to-local, align 4
  store i32 %v1_9a7c, i32* %r3.global-to-local, align 4
  store i1 %v2_a050, i1* %cpsr_z.global-to-local, align 1
  %v3_a054 = load i32, i32* @r4, align 4
  %v4_a054 = add i32 %v3_a054, 4
  %v5_a054 = inttoptr i32 %v4_a054 to i16*
  store i16 %v1_a048, i16* %v5_a054, align 2
  br i1 %v2_a050, label %dec_label_pc_9f64, label %dec_label_pc_a048.dec_label_pc_a05c_crit_edge

dec_label_pc_a048.dec_label_pc_a05c_crit_edge:    ; preds = %dec_label_pc_a048
  %v0_a05c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a05c

dec_label_pc_a05c:                                ; preds = %dec_label_pc_a048.dec_label_pc_a05c_crit_edge, %dec_label_pc_9f58
  %v0_a05c = phi i32 [ %v0_a05c.pre, %dec_label_pc_a048.dec_label_pc_a05c_crit_edge ], [ %v7_9f44, %dec_label_pc_9f58 ]
  %v1_a05c = add i32 %v0_a05c, 40
  store i32 %v1_a05c, i32* %r0.global-to-local, align 4
  store i32 %v6_9a5c, i32* %r1.global-to-local, align 4
  %v2_a064 = inttoptr i32 %v1_a05c to i16*
  %v3_a064 = call i32 @function_e430(i16* %v2_a064, i32 %v6_9a5c)
  store i32 %v3_a064, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9f64

; uselistorder directives
  uselistorder i32 %v0_a048, { 1, 0 }
  uselistorder i32 %v1_a024, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_9ff0, { 1, 0 }
  uselistorder i32 %v4_9fdc, { 1, 0 }
  uselistorder i32 %v3_9fa8, { 1, 0 }
  uselistorder i32 %v3_9f88, { 3, 2, 0, 1 }
  uselistorder i32 %v2_9f74, { 1, 0 }
  uselistorder i1 %v2_a050, { 2, 3, 1, 0 }
  uselistorder i32 %v0_9e60, { 1, 0 }
  uselistorder i32 %v0_9d98, { 1, 0 }
  uselistorder i32 %v5_9d2c, { 1, 0 }
  uselistorder i32 %v0_9cec, { 1, 0 }
  uselistorder i32 %v0_9ca8, { 1, 2, 0, 3 }
  uselistorder i32 %v1_9c58, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9c44, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_9bd0, { 1, 0 }
  uselistorder i32 %v6_9bc8, { 0, 2, 1, 3 }
  uselistorder i1 %v9_9bf8, { 1, 0 }
  uselistorder i32 %v4_9c0c, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_9b54, { 1, 0, 2 }
  uselistorder i32 %v0_9d04, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_9b44, { 1, 0 }
  uselistorder i1 %v7_9b3c, { 1, 0, 2 }
  uselistorder i1 %v7_9af0, { 1, 0 }
  uselistorder i32 %v3_9aec, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_9ecc, { 1, 0 }
  uselistorder i32 %v1_9eb4, { 1, 0 }
  uselistorder i32 %v1_9e9c, { 1, 0 }
  uselistorder i32 %v1_9e84, { 1, 0 }
  uselistorder i32 %v1_9e6c, { 1, 0 }
  uselistorder i32 %v3_9c04, { 1, 0 }
  uselistorder i1 %v2_9c20, { 1, 0 }
  uselistorder i32 %v1_9c1c, { 1, 0 }
  uselistorder i32 %v4_9c18, { 2, 0, 1 }
  uselistorder i32 %v2_9b2c, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_9ac8, { 1, 0 }
  uselistorder i1 %v7_9ac0, { 1, 0 }
  uselistorder i1 %v7_9a94, { 1, 0 }
  uselistorder i32 %v3_9a90, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_9a7c, { 2, 3, 1, 0 }
  uselistorder i32 %v6_9a5c, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_9a44, { 1, 2, 0 }
  uselistorder i32 %v1_9a24, { 1, 2, 0 }
  uselistorder i32 %v1_9a04, { 1, 2, 0 }
  uselistorder i32 %v1_99e4, { 1, 2, 0 }
  uselistorder i32 %v1_99c4, { 1, 2, 0 }
  uselistorder i32 %v1_99a4, { 1, 2, 0 }
  uselistorder i32 %v6_9980, { 1, 0 }
  uselistorder i32 %v1_9968, { 1, 2, 0 }
  uselistorder i32 %v6_9900, { 2, 1, 3, 0 }
  uselistorder i32 %v2_98e8, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v2_98d8, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 49, 48, 50, 52, 51, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 6, 9, 8, 11, 10, 16, 12, 13, 14, 15, 19, 17, 18, 21, 20, 22, 25, 24, 23, 26, 27, 28, 30, 31, 29, 56, 33, 32, 34, 35, 36, 38, 37, 39, 41, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9f64, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9f38, { 1, 0 }
  uselistorder label %dec_label_pc_9f28, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9f18, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %dec_label_pc_9c84, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9c54, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9b90, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_9b70, { 1, 0 }
  uselistorder label %dec_label_pc_9b4c, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_9afc, { 1, 0 }
  uselistorder label %dec_label_pc_9ae0, { 1, 0 }
}

define i32 @function_a070(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a070:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_a070 = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_a08c = call i32 @function_1295c(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_a098 = load i32, i32* @r6, align 4
  store i32 %v0_a098, i32* %r0.global-to-local, align 4
  %v2_a09c = call i32 @function_1295c(i32 %v0_a098, i32 4)
  %v0_a0a0 = load i32, i32* @r5, align 4
  store i32 %v0_a0a0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a0b0 = load i32, i32* @r4, align 4
  store i32 %v0_a0b0, i32* %r0.global-to-local, align 4
  %v5_a0b4 = inttoptr i32 %v0_a0a0 to i32*
  %v6_a0b4 = call i32 @function_8570(i32 %v0_a0b0, i32* %v5_a0b4, i32 2, i32 0, i32 %v2_a09c)
  %v1_a0c0 = urem i32 %v6_a0b4, 256
  store i32 %v1_a0c0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a0cc = load i32, i32* @r5, align 4
  store i32 %v0_a0cc, i32* %r1.global-to-local, align 4
  %v0_a0d0 = load i32, i32* @r4, align 4
  store i32 %v0_a0d0, i32* %r0.global-to-local, align 4
  %v5_a0d4 = trunc i32 %v6_a0b4 to i8
  %v6_a0d8 = inttoptr i32 %v0_a0cc to i32*
  %v7_a0d8 = call i32 @function_8570(i32 %v0_a0d0, i32* %v6_a0d8, i32 3, i32 65535, i32 %v6_a0b4)
  %v0_a0dc = load i32, i32* @r5, align 4
  store i32 %v0_a0dc, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a0d8, i32* @r7, align 4
  %v0_a0ec = load i32, i32* @r4, align 4
  store i32 %v0_a0ec, i32* %r0.global-to-local, align 4
  %v5_a0f0 = inttoptr i32 %v0_a0dc to i32*
  %v6_a0f0 = call i32 @function_8570(i32 %v0_a0ec, i32* %v5_a0f0, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_a0f8 = urem i32 %v6_a0f0, 256
  store i32 %v1_a0f8, i32* %ip.global-to-local, align 4
  %v0_a0fc = load i32, i32* @r5, align 4
  store i32 %v0_a0fc, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a108 = load i32, i32* @r4, align 4
  store i32 %v0_a108, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_a0f0, 16777216
  %v5_a110 = sdiv i32 %sext, 16777216
  %v6_a110 = inttoptr i32 %v0_a0fc to i32*
  %v7_a110 = call i32 @function_8570(i32 %v0_a108, i32* %v6_a110, i32 5, i32 1, i32 %v5_a110)
  %v1_a11c = urem i32 %v7_a110, 256
  store i32 %v1_a11c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_a124 = load i32, i32* @r5, align 4
  store i32 %v0_a124, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a12c = load i32, i32* @r4, align 4
  store i32 %v0_a12c, i32* %r0.global-to-local, align 4
  %v5_a134 = inttoptr i32 %v0_a124 to i32*
  %v6_a134 = call i32 @function_8570(i32 %v0_a12c, i32* %v5_a134, i32 7, i32 65535, i32 %v1_a11c)
  %v0_a138 = load i32, i32* @r5, align 4
  store i32 %v0_a138, i32* %r1.global-to-local, align 4
  %v3_a13c = mul i32 %v6_a134, 65536
  store i32 %v3_a13c, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a148 = load i32, i32* @r4, align 4
  store i32 %v0_a148, i32* %r0.global-to-local, align 4
  %v3_a14c = urem i32 %v6_a134, 65536
  store i32 %v3_a14c, i32* @sl, align 4
  %v5_a150 = inttoptr i32 %v0_a138 to i32*
  %v6_a150 = call i32 @function_8570(i32 %v0_a148, i32* %v5_a150, i32 11, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v1_a158 = urem i32 %v6_a150, 256
  store i32 %v1_a158, i32* %ip.global-to-local, align 4
  %v0_a15c = load i32, i32* @r5, align 4
  store i32 %v0_a15c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a168 = load i32, i32* @r4, align 4
  store i32 %v0_a168, i32* %r0.global-to-local, align 4
  %v5_a170 = inttoptr i32 %v0_a15c to i32*
  %v6_a170 = call i32 @function_8570(i32 %v0_a168, i32* %v5_a170, i32 12, i32 1, i32 %v1_a158)
  %v1_a178 = urem i32 %v6_a170, 256
  store i32 %v1_a178, i32* %ip.global-to-local, align 4
  %v0_a17c = load i32, i32* @r5, align 4
  store i32 %v0_a17c, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a188 = load i32, i32* @r4, align 4
  store i32 %v0_a188, i32* %r0.global-to-local, align 4
  %v5_a190 = inttoptr i32 %v0_a17c to i32*
  %v6_a190 = call i32 @function_8570(i32 %v0_a188, i32* %v5_a190, i32 13, i32 1, i32 %v1_a178)
  %v1_a198 = urem i32 %v6_a190, 256
  store i32 %v1_a198, i32* %ip.global-to-local, align 4
  %v0_a19c = load i32, i32* @r5, align 4
  store i32 %v0_a19c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a1a8 = load i32, i32* @r4, align 4
  store i32 %v0_a1a8, i32* %r0.global-to-local, align 4
  %v5_a1b0 = inttoptr i32 %v0_a19c to i32*
  %v6_a1b0 = call i32 @function_8570(i32 %v0_a1a8, i32* %v5_a1b0, i32 14, i32 0, i32 %v1_a198)
  %v1_a1b8 = urem i32 %v6_a1b0, 256
  store i32 %v1_a1b8, i32* %ip.global-to-local, align 4
  %v0_a1bc = load i32, i32* @r5, align 4
  store i32 %v0_a1bc, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a1c8 = load i32, i32* @r4, align 4
  store i32 %v0_a1c8, i32* %r0.global-to-local, align 4
  %v5_a1d0 = inttoptr i32 %v0_a1bc to i32*
  %v6_a1d0 = call i32 @function_8570(i32 %v0_a1c8, i32* %v5_a1d0, i32 15, i32 0, i32 %v1_a1b8)
  %v1_a1d8 = urem i32 %v6_a1d0, 256
  store i32 %v1_a1d8, i32* %ip.global-to-local, align 4
  %v0_a1dc = load i32, i32* @r5, align 4
  store i32 %v0_a1dc, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a1e8 = load i32, i32* @r4, align 4
  store i32 %v0_a1e8, i32* %r0.global-to-local, align 4
  %v5_a1f0 = inttoptr i32 %v0_a1dc to i32*
  %v6_a1f0 = call i32 @function_8570(i32 %v0_a1e8, i32* %v5_a1f0, i32 16, i32 0, i32 %v1_a1d8)
  %v1_a1f8 = urem i32 %v6_a1f0, 256
  store i32 %v1_a1f8, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_a204 = load i32, i32* @r5, align 4
  store i32 %v0_a204, i32* %r1.global-to-local, align 4
  %v0_a208 = load i32, i32* @r4, align 4
  store i32 %v0_a208, i32* %r0.global-to-local, align 4
  %v5_a210 = inttoptr i32 %v0_a204 to i32*
  %v6_a210 = call i32 @function_8570(i32 %v0_a208, i32* %v5_a210, i32 0, i32 768, i32 %v1_a1f8)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a220 = load i32, i32* @r5, align 4
  store i32 %v0_a220, i32* %r1.global-to-local, align 4
  %v0_a224 = load i32, i32* @r4, align 4
  store i32 %v0_a224, i32* %r0.global-to-local, align 4
  %v5_a228 = inttoptr i32 %v0_a220 to i32*
  %v6_a228 = call i32 @function_8570(i32 %v0_a224, i32* %v5_a228, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_a230 = urem i32 %v6_a228, 256
  store i32 %v1_a230, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_a244 = call i32 @function_11df4(i32 2, i32 3, i32 6)
  store i32 %v3_a244, i32* %r0.global-to-local, align 4
  %v7_a248 = icmp eq i32 %v3_a244, -1
  store i1 %v7_a248, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a244, i32* @sb, align 4
  br i1 %v7_a248, label %dec_label_pc_a438, label %dec_label_pc_a254

dec_label_pc_a254:                                ; preds = %dec_label_pc_a070
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a25c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a25c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_a270 = call i32 @function_11db0(i32 %v3_a244, i32 0, i32 3, i32 %v6_a25c, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_a270, i32* %r0.global-to-local, align 4
  %v7_a274 = icmp eq i32 %v5_a270, -1
  store i1 %v7_a274, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a274, label %dec_label_pc_a430, label %dec_label_pc_a27c

dec_label_pc_a27c:                                ; preds = %dec_label_pc_a254
  %v0_a27c = load i32, i32* @r7, align 4
  %v3_a27c = mul i32 %v0_a27c, 65536
  store i32 %v3_a27c, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_a284 = load i32, i32* @r6, align 4
  %v2_a284 = icmp eq i32 %v0_a284, 0
  store i1 %v2_a284, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_a28c = urem i32 %v0_a27c, 65536
  store i32 %v3_a28c, i32* @fp, align 4
  br i1 %v2_a284, label %dec_label_pc_a6bc, label %dec_label_pc_a294.preheader

dec_label_pc_a294.preheader:                      ; preds = %dec_label_pc_a27c
  %v2_a2e0 = ptrtoint i32* %stack_var_-144 to i32
  %v2_a324 = ptrtoint i32* %stack_var_-64 to i32
  %v2_a35c = ptrtoint i32* %stack_var_-80 to i32
  %v2_a368 = ptrtoint i32* %stack_var_-336 to i32
  %v2_a36c = ptrtoint i32* %stack_var_-48 to i32
  %v4_a3cc = zext i8 %tmp to i32
  %v1_a3d0 = and i32 %v4_a3cc, 18
  %v2_a3d4 = icmp eq i32 %v1_a3d0, 18
  %v3_a3b8 = sext i16 %tmp61 to i32
  %v1_a3dc = and i32 %v4_a3cc, 5
  %v2_a3dc = icmp eq i32 %v1_a3dc, 0
  %v4_a31c = add i32 %v2_a2e0, 82
  %v5_a31c = inttoptr i32 %v4_a31c to i16*
  %v1_a50c = add i32 %v6_a210, 40
  %v1_a620 = urem i32 %v6_a150, 2
  %tmp97 = sub nsw i32 0, %v1_a620
  %v4_a628 = and i32 %tmp97, 32
  %v1_a638 = urem i32 %v6_a170, 2
  %tmp98 = sub nsw i32 0, %v1_a638
  %v4_a640 = and i32 %tmp98, 16
  %v1_a650 = urem i32 %v6_a190, 2
  %tmp99 = sub nsw i32 0, %v1_a650
  %v4_a658 = and i32 %tmp99, 8
  %v1_a668 = urem i32 %v6_a1b0, 2
  %tmp100 = sub nsw i32 0, %v1_a668
  %v4_a670 = and i32 %tmp100, 4
  %v1_a680 = urem i32 %v6_a1d0, 2
  %tmp101 = sub nsw i32 0, %v1_a680
  %v3_a688 = and i32 %tmp101, 2
  %v1_a698 = urem i32 %v6_a1f0, 2
  br label %dec_label_pc_a294

dec_label_pc_a294:                                ; preds = %dec_label_pc_a294.preheader, %dec_label_pc_a408
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_a408 ], [ %tmp34, %dec_label_pc_a294.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_a408 ], [ %tmp37, %dec_label_pc_a294.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a2a0 = call i32 @function_11df4(i32 2, i32 1, i32 0)
  store i32 %v3_a2a0, i32* %r0.global-to-local, align 4
  %v7_a2a4 = icmp eq i32 %v3_a2a0, -1
  store i1 %v7_a2a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a2a0, i32* @r5, align 4
  br i1 %v7_a2a4, label %dec_label_pc_a408, label %dec_label_pc_a2b0

dec_label_pc_a2b0:                                ; preds = %dec_label_pc_a294, %dec_label_pc_a3e4
  %v0_a2b8 = phi i32 [ %v3_a3f8, %dec_label_pc_a3e4 ], [ %v3_a2a0, %dec_label_pc_a294 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_a3e4 ], [ %stack_var_-62.0, %dec_label_pc_a294 ]
  %stack_var_-60.1 = phi i32 [ %v0_a4b8, %dec_label_pc_a3e4 ], [ %stack_var_-60.0, %dec_label_pc_a294 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_a2b8 = call i32 @function_11414(i32 %v0_a2b8, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_a2c0 = or i32 %v2_a2b8, 2048
  store i32 %v1_a2c0, i32* %r2.global-to-local, align 4
  %v0_a2c4 = load i32, i32* @r5, align 4
  store i32 %v0_a2c4, i32* %r0.global-to-local, align 4
  %v2_a2c8 = call i32 @function_11414(i32 %v0_a2c4, i32 4)
  %v3_a2cc = load i32, i32* %stack_var_-44, align 4
  %v5_a2d4 = mul i32 %v3_a2cc, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_a2e0, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_a2e8 = add i32 %v5_a2d4, %arg2
  store i32 %v2_a2e8, i32* %r3.global-to-local, align 4
  %v1_a2ec = add i32 %v2_a2e8, 20
  %v2_a2ec = inttoptr i32 %v1_a2ec to i8*
  %v3_a2ec = load i8, i8* %v2_a2ec, align 1
  %v4_a2ec = zext i8 %v3_a2ec to i32
  store i32 %v4_a2ec, i32* %r2.global-to-local, align 4
  %v2_a2f0 = icmp ugt i8 %v3_a2ec, 30
  %v7_a2f0 = icmp eq i8 %v3_a2ec, 31
  store i1 %v7_a2f0, i1* %cpsr_z.global-to-local, align 1
  %v2_a2f4 = xor i1 %v7_a2f0, true
  %v3_a2f4 = and i1 %v2_a2f0, %v2_a2f4
  br i1 %v3_a2f4, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_a2b0
  %v5_a2f4 = add i32 %v2_a2e8, 16
  %v6_a2f4 = inttoptr i32 %v5_a2f4 to i32*
  %v7_a2f4 = load i32, i32* %v6_a2f4, align 4
  store i32 %v7_a2f4, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_a2b0, %bb
  %v4_a2f8 = phi i32 [ %v2_a2e8, %dec_label_pc_a2b0 ], [ %v7_a2f4, %bb ]
  %v4_a2f8.stack_var_-60.1 = select i1 %v3_a2f4, i32 %v4_a2f8, i32 %stack_var_-60.1
  %v2_a2fc = xor i1 %v2_a2f0, true
  %v3_a2fc = or i1 %v7_a2f0, %v2_a2fc
  br i1 %v3_a2fc, label %dec_label_pc_a444, label %dec_label_pc_a300

dec_label_pc_a300:                                ; preds = %bb71, %dec_label_pc_a444
  %v0_a4b8 = phi i32 [ %v5_a494, %dec_label_pc_a444 ], [ %v4_a2f8.stack_var_-60.1, %bb71 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_a308 = load i32, i32* @sl, align 4
  %v9_a308 = icmp eq i32 %v0_a308, 65535
  store i1 %v9_a308, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a308, label %dec_label_pc_a4a0, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_a300
  %v4_a30c = udiv i32 %v0_a308, 256
  %v2_a310 = urem i32 %v0_a308, 256
  store i32 %v2_a310, i32* %r2.global-to-local, align 4
  %v5_a314 = mul nuw nsw i32 %v2_a310, 256
  %v6_a314 = or i32 %v5_a314, %v4_a30c
  store i32 %v6_a314, i32* %r3.global-to-local, align 4
  store i32 %v2_a2e0, i32* %r0.global-to-local, align 4
  %v2_a31c = trunc i32 %v6_a314 to i16
  store i16 %v2_a31c, i16* %v5_a31c, align 2
  br label %dec_label_pc_a324

dec_label_pc_a324:                                ; preds = %.thread9, %dec_label_pc_a4a0
  %stack_var_-62.2 = phi i16 [ %v1_a4a0, %dec_label_pc_a4a0 ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_a324, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_a32c = load i32, i32* @r5, align 4
  store i32 %v0_a32c, i32* %r0.global-to-local, align 4
  %v3_a330 = call i32 @function_11bdc(i32 %v0_a32c, i32 %v2_a324, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_a338 = call i32 @function_11260(i32* null)
  store i32 %v2_a338, i32* %r0.global-to-local, align 4
  store i32 %v2_a338, i32* @r4, align 4
  %v9_a398 = icmp eq i32 %tmp35, %v0_a4b8
  %v4_a3c0 = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_a398 to i32
  %v9_a3ac = icmp eq i1 %v9_a398, false
  %v9_a3c4 = icmp eq i32 %v3_a3b8, %v4_a3c0
  br label %dec_label_pc_a354

dec_label_pc_a344:                                ; preds = %.thread, %dec_label_pc_a3b4, %dec_label_pc_a3dc, %bb75
  %v2_a344 = call i32 @function_11260(i32* null)
  %v0_a348 = load i32, i32* @r4, align 4
  %v2_a348 = sub i32 %v2_a344, %v0_a348
  store i32 %v2_a348, i32* %r0.global-to-local, align 4
  %v7_a34c = icmp eq i32 %v2_a348, 10
  store i1 %v7_a34c, i1* %cpsr_z.global-to-local, align 1
  %v8_a350 = icmp sgt i32 %v2_a348, 10
  br i1 %v8_a350, label %dec_label_pc_a3e4, label %dec_label_pc_a354

dec_label_pc_a354:                                ; preds = %dec_label_pc_a344, %dec_label_pc_a324
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_a368, i32* %r1.global-to-local, align 4
  store i32 %v2_a36c, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a374 = load i32, i32* @sb, align 4
  store i32 %v0_a374, i32* %r0.global-to-local, align 4
  %v6_a37c = call i32 @function_11cfc(i32 %v0_a374, i32 %v2_a368, i32 256, i32 16384, i32 %v2_a35c, i32 %v2_a36c)
  store i32 %v6_a37c, i32* %r2.global-to-local, align 4
  %v7_a384 = icmp eq i32 %v6_a37c, -1
  store i1 %v7_a384, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_a384, label %dec_label_pc_a438, label %dec_label_pc_a390

dec_label_pc_a390:                                ; preds = %dec_label_pc_a354
  store i32 %v0_a4b8, i32* %r1.global-to-local, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_a3a4 = icmp eq i32 %v6_a37c, 40
  store i1 %v7_a3a4, i1* %cpsr_z.global-to-local, align 1
  %tmp102 = icmp ult i32 %v6_a37c, 41
  br i1 %tmp102, label %.thread, label %bb75

.thread:                                          ; preds = %dec_label_pc_a390
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_a344

bb75:                                             ; preds = %dec_label_pc_a390
  store i1 %v9_a3ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a3ac, label %dec_label_pc_a344, label %dec_label_pc_a3b4

dec_label_pc_a3b4:                                ; preds = %bb75
  store i32 %v3_a3b8, i32* @lr, align 4
  store i32 %v2_a2e0, i32* @r3, align 4
  store i32 %v4_a3c0, i32* %r2.global-to-local, align 4
  store i1 %v9_a3c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a3c4, label %dec_label_pc_a3cc, label %dec_label_pc_a344

dec_label_pc_a3cc:                                ; preds = %dec_label_pc_a3b4
  store i32 %v4_a3cc, i32* %r2.global-to-local, align 4
  store i32 %v1_a3d0, i32* @r3, align 4
  store i1 %v2_a3d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a3d4, label %dec_label_pc_a4b0, label %dec_label_pc_a3dc

dec_label_pc_a3dc:                                ; preds = %dec_label_pc_a3cc
  store i1 %v2_a3dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a3dc, label %dec_label_pc_a344, label %dec_label_pc_a3e4

dec_label_pc_a3e4:                                ; preds = %dec_label_pc_a3dc, %dec_label_pc_a344
  %v0_a3e4 = load i32, i32* @r5, align 4
  store i32 %v0_a3e4, i32* %r0.global-to-local, align 4
  %v1_a3e8 = call i32 @function_115e0(i32 %v0_a3e4)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a3f8 = call i32 @function_11df4(i32 2, i32 1, i32 0)
  store i32 %v3_a3f8, i32* %r0.global-to-local, align 4
  %v3_a3fc = icmp eq i32 %v3_a3f8, -1
  %v8_a3fc = icmp eq i32 %v3_a3f8, -1
  store i1 %v8_a3fc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a3f8, i32* @r5, align 4
  br i1 %v3_a3fc, label %dec_label_pc_a408, label %dec_label_pc_a2b0

dec_label_pc_a408:                                ; preds = %dec_label_pc_a3e4, %dec_label_pc_a294, %bb82
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_a294 ], [ %stack_var_-62.2, %bb82 ], [ %stack_var_-62.2, %dec_label_pc_a3e4 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_a294 ], [ %v0_a4b8, %bb82 ], [ %v0_a4b8, %dec_label_pc_a3e4 ]
  %v3_a408 = load i32, i32* %stack_var_-44, align 4
  %v1_a40c = add i32 %v3_a408, 1
  store i32 %v1_a40c, i32* @r3, align 4
  %v1_a410 = load i32, i32* @r6, align 4
  %v9_a410 = icmp eq i32 %v1_a40c, %v1_a410
  store i1 %v9_a410, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a40c, i32* %stack_var_-44, align 4
  %v5_a418 = icmp slt i32 %v1_a40c, %v1_a410
  br i1 %v5_a418, label %dec_label_pc_a294, label %dec_label_pc_a41c

dec_label_pc_a41c:                                ; preds = %dec_label_pc_a408
  store i32 %v6_a210, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a6cc

dec_label_pc_a430:                                ; preds = %dec_label_pc_a254
  %v0_a430 = load i32, i32* @sb, align 4
  store i32 %v0_a430, i32* %r0.global-to-local, align 4
  %v1_a434 = call i32 @function_115e0(i32 %v0_a430)
  store i32 %v1_a434, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a438

dec_label_pc_a438:                                ; preds = %dec_label_pc_a354, %dec_label_pc_a070, %dec_label_pc_a430
  %v1_a440 = phi i32 [ %v3_a244, %dec_label_pc_a070 ], [ %v1_a434, %dec_label_pc_a430 ], [ 0, %dec_label_pc_a354 ]
  store i32 %v27_a070, i32* %lr.global-to-local, align 4
  ret i32 %v1_a440

dec_label_pc_a444:                                ; preds = %bb71
  %v1_a444 = add i32 %v4_a2f8, 16
  %v2_a444 = inttoptr i32 %v1_a444 to i32*
  %v3_a444 = load i32, i32* %v2_a444, align 4
  store i32 %v3_a444, i32* @r4, align 4
  %v0_a448 = call i32 @function_e29c()
  store i32 %v0_a448, i32* %r0.global-to-local, align 4
  %v3_a44c = load i32, i32* %stack_var_-44, align 4
  %v5_a454 = mul i32 %v3_a44c, 24
  %v0_a45c = load i32, i32* @r4, align 4
  %v1_a45c = and i32 %v0_a45c, 16711680
  store i32 %v1_a45c, i32* %ip.global-to-local, align 4
  %v3_a460 = udiv i32 %v0_a45c, 16777216
  %v2_a464 = add i32 %v5_a454, %arg2
  store i32 %v2_a464, i32* %r1.global-to-local, align 4
  %v4_a468 = udiv i32 %v1_a45c, 256
  %v5_a468 = or i32 %v4_a468, %v3_a460
  store i32 %v5_a468, i32* %r2.global-to-local, align 4
  %v1_a46c = and i32 %v0_a45c, 65280
  store i32 %v1_a46c, i32* %r3.global-to-local, align 4
  %v1_a470 = add i32 %v2_a464, 20
  %v2_a470 = inttoptr i32 %v1_a470 to i8*
  %v3_a470 = load i8, i8* %v2_a470, align 1
  %v4_a470 = zext i8 %v3_a470 to i32
  store i32 %v4_a470, i32* %ip.global-to-local, align 4
  %v5_a478 = call i32 @llvm.bswap.i32(i32 %v0_a45c)
  %v7_a47c = lshr i32 %v0_a448, %v4_a470
  %v8_a47c = add i32 %v7_a47c, %v5_a478
  store i32 %v8_a47c, i32* %r2.global-to-local, align 4
  %v1_a480 = and i32 %v8_a47c, 16711680
  store i32 %v1_a480, i32* %r0.global-to-local, align 4
  %v1_a48c = and i32 %v8_a47c, 65280
  store i32 %v1_a48c, i32* %r1.global-to-local, align 4
  %v5_a494 = call i32 @llvm.bswap.i32(i32 %v8_a47c)
  store i32 %v5_a494, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_a300

dec_label_pc_a4a0:                                ; preds = %dec_label_pc_a300
  %v0_a4a0 = call i32 @function_e29c()
  %v1_a4a0 = trunc i32 %v0_a4a0 to i16
  store i32 %v0_a4a0, i32* %r0.global-to-local, align 4
  store i32 %v2_a2e0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a324

dec_label_pc_a4b0:                                ; preds = %dec_label_pc_a3cc
  %v3_a4b0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a4b0, i32* @r4, align 4
  store i32 %v2_a08c, i32* %ip.global-to-local, align 4
  %v5_a4b8 = mul i32 %v3_a4b0, 16
  %v6_a4b8 = add i32 %v5_a4b8, %v2_a08c
  %v7_a4b8 = inttoptr i32 %v6_a4b8 to i32*
  store i32 %v0_a4b8, i32* %v7_a4b8, align 4
  %v0_a4bc = load i32, i32* @r8, align 4
  %v1_a4bc = add i32 %v0_a4bc, 4
  %v2_a4bc = inttoptr i32 %v1_a4bc to i32*
  %v3_a4bc = load i32, i32* %v2_a4bc, align 4
  store i32 %v3_a4bc, i32* %r1.global-to-local, align 4
  %v1_a4c8 = and i32 %v3_a4bc, 65280
  store i32 %v1_a4c8, i32* %r2.global-to-local, align 4
  store i32 %v2_a08c, i32* %r0.global-to-local, align 4
  %v0_a4d8 = load i32, i32* @r4, align 4
  %v3_a4d8 = mul i32 %v0_a4d8, 16
  %v2_a4dc = add i32 %v3_a4d8, %v2_a08c
  store i32 %v2_a4dc, i32* %ip.global-to-local, align 4
  %v5_a4e0 = call i32 @llvm.bswap.i32(i32 %v3_a4bc)
  store i32 %v5_a4e0, i32* %r3.global-to-local, align 4
  %v2_a4e4 = add i32 %v2_a4dc, 4
  %v3_a4e4 = inttoptr i32 %v2_a4e4 to i32*
  store i32 %v5_a4e0, i32* %v3_a4e4, align 4
  %v0_a4e8 = load i32, i32* @r8, align 4
  %v1_a4e8 = add i32 %v0_a4e8, 8
  %v2_a4e8 = inttoptr i32 %v1_a4e8 to i32*
  %v3_a4e8 = load i32, i32* %v2_a4e8, align 4
  store i32 %v3_a4e8, i32* %r1.global-to-local, align 4
  %v1_a4ec = and i32 %v3_a4e8, 16711680
  store i32 %v1_a4ec, i32* %r0.global-to-local, align 4
  store i32 %v6_a210, i32* %r2.global-to-local, align 4
  %v5_a504 = call i32 @llvm.bswap.i32(i32 %v3_a4e8)
  store i32 %v5_a504, i32* %r3.global-to-local, align 4
  %v1_a508 = add i32 %v0_a4e8, 2
  %v2_a508 = inttoptr i32 %v1_a508 to i16*
  %v3_a508 = load i16, i16* %v2_a508, align 2
  %v4_a508 = zext i16 %v3_a508 to i32
  store i32 %v4_a508, i32* %r1.global-to-local, align 4
  store i32 %v1_a50c, i32* @r7, align 4
  %v0_a510 = load i32, i32* @lr, align 4
  %v1_a510 = trunc i32 %v0_a510 to i16
  %v2_a510 = load i32, i32* %ip.global-to-local, align 4
  %v3_a510 = add i32 %v2_a510, 14
  %v4_a510 = inttoptr i32 %v3_a510 to i16*
  store i16 %v1_a510, i16* %v4_a510, align 2
  %v0_a514 = load i32, i32* %r1.global-to-local, align 4
  %v1_a514 = trunc i32 %v0_a514 to i16
  %v2_a514 = load i32, i32* %ip.global-to-local, align 4
  %v3_a514 = add i32 %v2_a514, 12
  %v4_a514 = inttoptr i32 %v3_a514 to i16*
  store i16 %v1_a514, i16* %v4_a514, align 2
  %v0_a518 = load i32, i32* %r3.global-to-local, align 4
  %v1_a518 = load i32, i32* %ip.global-to-local, align 4
  %v2_a518 = add i32 %v1_a518, 8
  %v3_a518 = inttoptr i32 %v2_a518 to i32*
  store i32 %v0_a518, i32* %v3_a518, align 4
  %v0_a51c = load i32, i32* @r7, align 4
  store i32 %v0_a51c, i32* @r0, align 4
  %v0_a520 = call i32 @function_1203c()
  store i32 %v0_a520, i32* %r0.global-to-local, align 4
  store i32 %v2_a09c, i32* %r3.global-to-local, align 4
  %v2_a52c = load i32, i32* @r4, align 4
  %v5_a52c = mul i32 %v2_a52c, 4
  %v6_a52c = add i32 %v5_a52c, %v2_a09c
  %v7_a52c = inttoptr i32 %v6_a52c to i32*
  store i32 %v0_a520, i32* %v7_a52c, align 4
  %v3_a530 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a530, i32* %r2.global-to-local, align 4
  %v0_a534 = load i32, i32* %r3.global-to-local, align 4
  %v4_a534 = mul i32 %v3_a530, 4
  %v5_a534 = add i32 %v0_a534, %v4_a534
  %v6_a534 = inttoptr i32 %v5_a534 to i32*
  %v7_a534 = load i32, i32* %v6_a534, align 4
  store i32 %v7_a534, i32* @r4, align 4
  %v1_a538 = inttoptr i32 %v7_a534 to i8*
  %v2_a538 = load i8, i8* %v1_a538, align 1
  %tmp103 = urem i8 %v2_a538, 16
  %v1_a53c = zext i8 %tmp103 to i32
  %v1_a540 = or i32 %v1_a53c, 64
  store i32 %v1_a540, i32* %r3.global-to-local, align 4
  %v1_a544 = trunc i32 %v1_a540 to i8
  store i8 %v1_a544, i8* %v1_a538, align 1
  %v0_a548 = load i32, i32* @r4, align 4
  %v1_a548 = inttoptr i32 %v0_a548 to i8*
  %v2_a548 = load i8, i8* %v1_a548, align 1
  %v0_a54c = load i32, i32* @r7, align 4
  %tmp77 = mul i32 %v0_a54c, 256
  %v1_a554 = and i8 %v2_a548, -16
  %v1_a558 = or i8 %v1_a554, 5
  %v1_a55c = and i32 %tmp77, 65280
  %tmp78 = udiv i32 %v0_a54c, 256
  %v4_a560 = urem i32 %tmp78, 256
  %v5_a560 = or i32 %v4_a560, %v1_a55c
  store i32 %v5_a560, i32* %r2.global-to-local, align 4
  %v0_a564 = load i32, i32* @fp, align 4
  %v1_a564 = urem i32 %v0_a564, 256
  store i32 %v1_a564, i32* %r0.global-to-local, align 4
  store i32 %v1_a11c, i32* %ip.global-to-local, align 4
  %v3_a56c = udiv i32 %v0_a564, 256
  store i32 %v3_a56c, i32* %r1.global-to-local, align 4
  store i8 %v1_a558, i8* %v1_a548, align 1
  %v0_a574 = load i32, i32* %r1.global-to-local, align 4
  %v1_a574 = load i32, i32* %r0.global-to-local, align 4
  %v4_a574 = mul i32 %v1_a574, 256
  %v5_a574 = or i32 %v4_a574, %v0_a574
  store i32 %v5_a574, i32* %r1.global-to-local, align 4
  store i32 %v6_a0b4, i32* %r0.global-to-local, align 4
  %v2_a57c = load i32, i32* @r4, align 4
  %v3_a57c = add i32 %v2_a57c, 1
  %v4_a57c = inttoptr i32 %v3_a57c to i8*
  store i8 %v5_a0d4, i8* %v4_a57c, align 1
  %v0_a580 = load i32, i32* %r1.global-to-local, align 4
  %v1_a580 = trunc i32 %v0_a580 to i16
  %v2_a580 = load i32, i32* @r4, align 4
  %v3_a580 = add i32 %v2_a580, 4
  %v4_a580 = inttoptr i32 %v3_a580 to i16*
  store i16 %v1_a580, i16* %v4_a580, align 2
  %v0_a584 = load i32, i32* %ip.global-to-local, align 4
  %v2_a584 = icmp eq i32 %v0_a584, 0
  store i1 %v2_a584, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_a110, i32* %r1.global-to-local, align 4
  %v0_a58c = load i32, i32* %r2.global-to-local, align 4
  %v1_a58c = trunc i32 %v0_a58c to i16
  %v2_a58c = load i32, i32* @r4, align 4
  %v3_a58c = add i32 %v2_a58c, 2
  %v4_a58c = inttoptr i32 %v3_a58c to i16*
  store i16 %v1_a58c, i16* %v4_a58c, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_a584, label %bb80, label %bb79

bb79:                                             ; preds = %dec_label_pc_a4b0
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %dec_label_pc_a4b0, %bb79
  %v0_a598 = load i32, i32* %r1.global-to-local, align 4
  %v1_a598 = trunc i32 %v0_a598 to i8
  %v2_a598 = load i32, i32* @r4, align 4
  %v3_a598 = add i32 %v2_a598, 8
  %v4_a598 = inttoptr i32 %v3_a598 to i8*
  store i8 %v1_a598, i8* %v4_a598, align 1
  %v0_a59c = load i32, i32* %r3.global-to-local, align 4
  %v1_a59c = trunc i32 %v0_a59c to i8
  %v2_a59c = load i32, i32* @r4, align 4
  %v3_a59c = add i32 %v2_a59c, 9
  %v4_a59c = inttoptr i32 %v3_a59c to i8*
  store i8 %v1_a59c, i8* %v4_a59c, align 1
  %v0_a5a0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a5a0, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_a5a0 = load i32, i32* %r2.global-to-local, align 4
  %v2_a5a0 = trunc i32 %v1_a5a0 to i16
  %v3_a5a0 = load i32, i32* @r4, align 4
  %v4_a5a0 = add i32 %v3_a5a0, 6
  %v5_a5a0 = inttoptr i32 %v4_a5a0 to i16*
  store i16 %v2_a5a0, i16* %v5_a5a0, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  store i32 ptrtoint (i32* @global_var_212d8.46 to i32), i32* %r2.global-to-local, align 4
  %v2_a5a8 = load i32, i32* @global_var_212d8.46, align 4
  store i32 %v2_a5a8, i32* %r1.global-to-local, align 4
  %v1_a5ac = load i32, i32* @r4, align 4
  %v2_a5ac = add i32 %v1_a5ac, 12
  %v3_a5ac = inttoptr i32 %v2_a5ac to i32*
  store i32 %v2_a5a8, i32* %v3_a5ac, align 4
  %v3_a5b0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a5b0, i32* %r3.global-to-local, align 4
  store i32 %v2_a08c, i32* %ip.global-to-local, align 4
  %v4_a5b8 = mul i32 %v3_a5b0, 16
  %v5_a5b8 = add i32 %v4_a5b8, %v2_a08c
  %v6_a5b8 = inttoptr i32 %v5_a5b8 to i32*
  %v7_a5b8 = load i32, i32* %v6_a5b8, align 4
  store i32 %v7_a5b8, i32* %r2.global-to-local, align 4
  store i32 %v5_a5b8, i32* %r3.global-to-local, align 4
  %v1_a5c4 = load i32, i32* @r4, align 4
  %v2_a5c4 = add i32 %v1_a5c4, 16
  %v3_a5c4 = inttoptr i32 %v2_a5c4 to i32*
  store i32 %v7_a5b8, i32* %v3_a5c4, align 4
  %v0_a5c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_a5c8 = add i32 %v0_a5c8, 12
  %v2_a5c8 = inttoptr i32 %v1_a5c8 to i16*
  %v3_a5c8 = load i16, i16* %v2_a5c8, align 2
  %v4_a5c8 = zext i16 %v3_a5c8 to i32
  store i32 %v4_a5c8, i32* %r0.global-to-local, align 4
  %v1_a5cc = add i32 %v0_a5c8, 8
  %v2_a5cc = inttoptr i32 %v1_a5cc to i32*
  %v3_a5cc = load i32, i32* %v2_a5cc, align 4
  store i32 %v3_a5cc, i32* %r1.global-to-local, align 4
  %v2_a5d0 = load i32, i32* @r4, align 4
  %v3_a5d0 = add i32 %v2_a5d0, 20
  %v4_a5d0 = inttoptr i32 %v3_a5d0 to i16*
  store i16 %v3_a5c8, i16* %v4_a5d0, align 2
  %v0_a5d4 = load i32, i32* @r4, align 4
  %v1_a5d4 = add i32 %v0_a5d4, 20
  store i32 %v1_a5d4, i32* @r8, align 4
  %v1_a5d8 = add i32 %v0_a5d4, 33
  %v2_a5d8 = inttoptr i32 %v1_a5d8 to i8*
  %v3_a5d8 = load i8, i8* %v2_a5d8, align 1
  %v4_a5d8 = zext i8 %v3_a5d8 to i32
  store i32 %v4_a5d8, i32* %r2.global-to-local, align 4
  %v0_a5dc = load i32, i32* %r1.global-to-local, align 4
  %v2_a5dc = add i32 %v0_a5d4, 24
  %v3_a5dc = inttoptr i32 %v2_a5dc to i32*
  store i32 %v0_a5dc, i32* %v3_a5dc, align 4
  %v0_a5e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a5e0 = or i32 %v0_a5e0, 1
  store i32 %v1_a5e0, i32* %r2.global-to-local, align 4
  %v0_a5e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a5e4 = add i32 %v0_a5e4, 4
  %v2_a5e4 = inttoptr i32 %v1_a5e4 to i32*
  %v3_a5e4 = load i32, i32* %v2_a5e4, align 4
  store i32 %v3_a5e4, i32* %r1.global-to-local, align 4
  %v1_a5e8 = add i32 %v0_a5e4, 14
  %v2_a5e8 = inttoptr i32 %v1_a5e8 to i16*
  %v3_a5e8 = load i16, i16* %v2_a5e8, align 2
  %v4_a5e8 = zext i16 %v3_a5e8 to i32
  store i32 %v4_a5e8, i32* %r3.global-to-local, align 4
  %v1_a5ec = trunc i32 %v1_a5e0 to i8
  %v2_a5ec = load i32, i32* @r8, align 4
  %v3_a5ec = add i32 %v2_a5ec, 13
  %v4_a5ec = inttoptr i32 %v3_a5ec to i8*
  store i8 %v1_a5ec, i8* %v4_a5ec, align 1
  %v0_a5f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a5f0 = trunc i32 %v0_a5f0 to i16
  %v2_a5f0 = load i32, i32* @r8, align 4
  %v3_a5f0 = add i32 %v2_a5f0, 2
  %v4_a5f0 = inttoptr i32 %v3_a5f0 to i16*
  store i16 %v1_a5f0, i16* %v4_a5f0, align 2
  %v0_a5f4 = load i32, i32* @r8, align 4
  %v1_a5f4 = add i32 %v0_a5f4, 12
  %v2_a5f4 = inttoptr i32 %v1_a5f4 to i8*
  %v3_a5f4 = load i8, i8* %v2_a5f4, align 1
  %v4_a5f4 = zext i8 %v3_a5f4 to i32
  store i32 %v4_a5f4, i32* %r3.global-to-local, align 4
  %v1_a5f8 = add i32 %v0_a5f4, 13
  %v2_a5f8 = inttoptr i32 %v1_a5f8 to i8*
  %v3_a5f8 = load i8, i8* %v2_a5f8, align 1
  %v4_a5f8 = zext i8 %v3_a5f8 to i32
  %tmp104 = urem i8 %v3_a5f4, 16
  %v1_a5fc = zext i8 %tmp104 to i32
  %v1_a600 = or i32 %v1_a5fc, 128
  store i32 %v1_a600, i32* %r3.global-to-local, align 4
  %v1_a604 = or i32 %v4_a5f8, 16
  store i32 %v1_a604, i32* %r2.global-to-local, align 4
  %v0_a608 = load i32, i32* %r1.global-to-local, align 4
  %v2_a608 = add i32 %v0_a5f4, 8
  %v3_a608 = inttoptr i32 %v2_a608 to i32*
  store i32 %v0_a608, i32* %v3_a608, align 4
  %v0_a60c = load i32, i32* %r3.global-to-local, align 4
  %v1_a60c = trunc i32 %v0_a60c to i8
  %v2_a60c = load i32, i32* @r8, align 4
  %v3_a60c = add i32 %v2_a60c, 12
  %v4_a60c = inttoptr i32 %v3_a60c to i8*
  store i8 %v1_a60c, i8* %v4_a60c, align 1
  %v0_a610 = load i32, i32* %r2.global-to-local, align 4
  %v1_a610 = trunc i32 %v0_a610 to i8
  %v2_a610 = load i32, i32* @r8, align 4
  %v3_a610 = add i32 %v2_a610, 13
  %v4_a610 = inttoptr i32 %v3_a610 to i8*
  store i8 %v1_a610, i8* %v4_a610, align 1
  %v0_a614 = call i32 @function_e29c()
  %v1_a614 = trunc i32 %v0_a614 to i16
  store i32 %v0_a614, i32* %r0.global-to-local, align 4
  store i32 %v1_a158, i32* %r1.global-to-local, align 4
  %v0_a61c = load i32, i32* @r8, align 4
  %v1_a61c = add i32 %v0_a61c, 13
  %v2_a61c = inttoptr i32 %v1_a61c to i8*
  %v3_a61c = load i8, i8* %v2_a61c, align 1
  %v4_a61c = zext i8 %v3_a61c to i32
  store i32 %v1_a620, i32* %r2.global-to-local, align 4
  %v1_a624 = and i32 %v4_a61c, 223
  %v5_a628 = or i32 %v1_a624, %v4_a628
  store i32 %v5_a628, i32* %r3.global-to-local, align 4
  %v1_a62c = trunc i32 %v5_a628 to i8
  store i8 %v1_a62c, i8* %v2_a61c, align 1
  store i32 %v1_a178, i32* %ip.global-to-local, align 4
  %v0_a634 = load i32, i32* @r8, align 4
  %v1_a634 = add i32 %v0_a634, 13
  %v2_a634 = inttoptr i32 %v1_a634 to i8*
  %v3_a634 = load i8, i8* %v2_a634, align 1
  %v4_a634 = zext i8 %v3_a634 to i32
  store i32 %v1_a638, i32* %r3.global-to-local, align 4
  %v1_a63c = and i32 %v4_a634, 239
  %v5_a640 = or i32 %v1_a63c, %v4_a640
  store i32 %v5_a640, i32* %r2.global-to-local, align 4
  %v1_a644 = trunc i32 %v5_a640 to i8
  store i8 %v1_a644, i8* %v2_a634, align 1
  store i32 %v1_a198, i32* %r1.global-to-local, align 4
  %v0_a64c = load i32, i32* @r8, align 4
  %v1_a64c = add i32 %v0_a64c, 13
  %v2_a64c = inttoptr i32 %v1_a64c to i8*
  %v3_a64c = load i8, i8* %v2_a64c, align 1
  %v4_a64c = zext i8 %v3_a64c to i32
  store i32 %v1_a650, i32* %r2.global-to-local, align 4
  %v1_a654 = and i32 %v4_a64c, 247
  %v5_a658 = or i32 %v1_a654, %v4_a658
  store i32 %v5_a658, i32* %r3.global-to-local, align 4
  %v1_a65c = trunc i32 %v5_a658 to i8
  store i8 %v1_a65c, i8* %v2_a64c, align 1
  store i32 %v1_a1b8, i32* %ip.global-to-local, align 4
  %v0_a664 = load i32, i32* @r8, align 4
  %v1_a664 = add i32 %v0_a664, 13
  %v2_a664 = inttoptr i32 %v1_a664 to i8*
  %v3_a664 = load i8, i8* %v2_a664, align 1
  %v4_a664 = zext i8 %v3_a664 to i32
  store i32 %v1_a668, i32* %r3.global-to-local, align 4
  %v1_a66c = and i32 %v4_a664, 251
  %v5_a670 = or i32 %v1_a66c, %v4_a670
  store i32 %v5_a670, i32* %r2.global-to-local, align 4
  %v1_a674 = trunc i32 %v5_a670 to i8
  store i8 %v1_a674, i8* %v2_a664, align 1
  store i32 %v1_a1d8, i32* %r1.global-to-local, align 4
  %v0_a67c = load i32, i32* @r8, align 4
  %v1_a67c = add i32 %v0_a67c, 13
  %v2_a67c = inttoptr i32 %v1_a67c to i8*
  %v3_a67c = load i8, i8* %v2_a67c, align 1
  %v4_a67c = zext i8 %v3_a67c to i32
  store i32 %v1_a680, i32* %r2.global-to-local, align 4
  %v1_a684 = and i32 %v4_a67c, 253
  %v4_a688 = or i32 %v1_a684, %v3_a688
  store i32 %v4_a688, i32* %r3.global-to-local, align 4
  %v1_a68c = trunc i32 %v4_a688 to i8
  store i8 %v1_a68c, i8* %v2_a67c, align 1
  store i32 %v1_a1f8, i32* %ip.global-to-local, align 4
  %v0_a694 = load i32, i32* @r8, align 4
  %v1_a694 = add i32 %v0_a694, 13
  %v2_a694 = inttoptr i32 %v1_a694 to i8*
  %v3_a694 = load i8, i8* %v2_a694, align 1
  %v4_a694 = zext i8 %v3_a694 to i32
  %v1_a69c = and i32 %v4_a694, 254
  store i32 %v1_a69c, i32* %r2.global-to-local, align 4
  %v2_a6a0 = or i32 %v1_a69c, %v1_a698
  store i32 %v2_a6a0, i32* %r3.global-to-local, align 4
  %v1_a6a4 = trunc i32 %v2_a6a0 to i8
  store i8 %v1_a6a4, i8* %v2_a694, align 1
  %v3_a6a8 = load i32, i32* @r8, align 4
  %v4_a6a8 = add i32 %v3_a6a8, 14
  %v5_a6a8 = inttoptr i32 %v4_a6a8 to i16*
  store i16 %v1_a614, i16* %v5_a6a8, align 2
  store i32 %v6_a210, i32* %r1.global-to-local, align 4
  %v0_a6b0 = load i32, i32* @r4, align 4
  %v1_a6b0 = add i32 %v0_a6b0, 40
  store i32 %v1_a6b0, i32* %r0.global-to-local, align 4
  %v2_a6b4 = inttoptr i32 %v1_a6b0 to i16*
  %v3_a6b4 = call i32 @function_e430(i16* %v2_a6b4, i32 %v6_a210)
  store i32 %v3_a6b4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a408

dec_label_pc_a6bc:                                ; preds = %dec_label_pc_a27c
  store i32 %v6_a210, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_a210, 40
  br label %dec_label_pc_a6cc

dec_label_pc_a6cc:                                ; preds = %dec_label_pc_a41c, %dec_label_pc_a6bc
  %storemerge6.pre-phi = phi i32 [ %v1_a50c, %dec_label_pc_a41c ], [ %.pre, %dec_label_pc_a6bc ]
  %v0_a6e026 = phi i32 [ %v1_a410, %dec_label_pc_a41c ], [ 0, %dec_label_pc_a6bc ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_a210, 65536
  %storemerge = add i32 %v6_a210, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_a6cc = add i32 %storemerge4, 1310720
  store i32 %v1_a6cc, i32* %r2.global-to-local, align 4
  %tmp83 = udiv i32 %v1_a6cc, 256
  %v3_a6d4 = and i32 %tmp83, 65280
  store i32 %v3_a6d4, i32* %r3.global-to-local, align 4
  %v4_a6d8 = udiv i32 %v1_a6cc, 16777216
  %v5_a6d8 = or i32 %v3_a6d4, %v4_a6d8
  store i32 %v5_a6d8, i32* @r8, align 4
  %v2_a804 = icmp eq i32 %v1_a230, 0
  br label %dec_label_pc_a6dc

dec_label_pc_a6dc:                                ; preds = %dec_label_pc_a6dc, %dec_label_pc_a7e8, %dec_label_pc_a6cc
  %v0_a6e0 = phi i32 [ %v0_a6e026, %dec_label_pc_a6cc ], [ 0, %dec_label_pc_a7e8 ], [ 0, %dec_label_pc_a6dc ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a6e0 = icmp eq i32 %v0_a6e0, 0
  store i1 %v2_a6e0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a6e0, label %dec_label_pc_a6dc, label %dec_label_pc_a6ec

dec_label_pc_a6ec:                                ; preds = %dec_label_pc_a6dc, %dec_label_pc_a7e8
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a6f0

dec_label_pc_a6f0:                                ; preds = %dec_label_pc_a718, %dec_label_pc_a6ec
  %v1_a6f8 = phi i32 [ %v1_a7d8, %dec_label_pc_a718 ], [ 0, %dec_label_pc_a6ec ]
  store i32 %v2_a09c, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_a6f8 = mul i32 %v1_a6f8, 4
  %v5_a6f8 = add i32 %v4_a6f8, %v2_a09c
  %v6_a6f8 = inttoptr i32 %v5_a6f8 to i32*
  %v7_a6f8 = load i32, i32* %v6_a6f8, align 4
  store i32 %v7_a6f8, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_a700 = load i32, i32* @fp, align 4
  %v9_a700 = icmp eq i32 %v0_a700, 65535
  store i1 %v9_a700, i1* %cpsr_z.global-to-local, align 1
  %v1_a704 = add i32 %v7_a6f8, 20
  store i32 %v1_a704, i32* @r5, align 4
  br i1 %v9_a700, label %dec_label_pc_a7fc, label %dec_label_pc_a70c

dec_label_pc_a70c:                                ; preds = %dec_label_pc_a6f0
  store i32 %v1_a230, i32* %r3.global-to-local, align 4
  store i1 %v2_a804, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a804, label %dec_label_pc_a718, label %dec_label_pc_a810

dec_label_pc_a718:                                ; preds = %dec_label_pc_a70c, %dec_label_pc_a7fc, %dec_label_pc_a810
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_a71c = load i32, i32* @r4, align 4
  %v3_a71c = add i32 %v2_a71c, 10
  %v4_a71c = inttoptr i32 %v3_a71c to i16*
  store i16 0, i16* %v4_a71c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a724 = load i32, i32* @r4, align 4
  store i32 %v0_a724, i32* @r0, align 4
  %v2_a728 = call i32 @function_c848(i32 %v0_a724, i32 20)
  %v3_a728 = trunc i32 %v2_a728 to i16
  store i32 %v2_a728, i32* %r0.global-to-local, align 4
  %v3_a72c = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_a08c, i32* %r2.global-to-local, align 4
  %v3_a734 = mul i32 %v3_a72c, 16
  %v2_a738 = add i32 %v3_a734, %v2_a08c
  store i32 %v2_a738, i32* %r1.global-to-local, align 4
  %v1_a73c = add i32 %v2_a738, 4
  %v2_a73c = inttoptr i32 %v1_a73c to i32*
  %v3_a73c = load i32, i32* %v2_a73c, align 4
  %v3_a740 = mul i32 %v3_a73c, 65536
  store i32 %v3_a740, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_a73c, 256
  %v1_a748 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_a73c, 256
  %v4_a74c = urem i32 %tmp86, 256
  %v5_a74c = or i32 %v4_a74c, %v1_a748
  store i32 %v5_a74c, i32* %r3.global-to-local, align 4
  %v1_a750 = add i32 %v3_a73c, 1
  store i32 %v1_a750, i32* %r2.global-to-local, align 4
  store i32 %v1_a750, i32* %v2_a73c, align 4
  %v0_a758 = load i32, i32* %r3.global-to-local, align 4
  %v1_a758 = load i32, i32* @r5, align 4
  %v2_a758 = add i32 %v1_a758, 4
  %v3_a758 = inttoptr i32 %v2_a758 to i32*
  store i32 %v0_a758, i32* %v3_a758, align 4
  %v0_a75c = load i32, i32* %r1.global-to-local, align 4
  %v1_a75c = add i32 %v0_a75c, 8
  %v2_a75c = inttoptr i32 %v1_a75c to i32*
  %v3_a75c = load i32, i32* %v2_a75c, align 4
  %tmp87 = mul i32 %v3_a75c, 256
  %v1_a768 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_a75c, 256
  %v4_a76c = urem i32 %tmp88, 256
  %v5_a76c = or i32 %v4_a76c, %v1_a768
  %v1_a770 = load i32, i32* @r5, align 4
  %v2_a770 = add i32 %v1_a770, 8
  %v3_a770 = inttoptr i32 %v2_a770 to i32*
  store i32 %v5_a76c, i32* %v3_a770, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a778 = load i32, i32* @r4, align 4
  %v4_a778 = add i32 %v3_a778, 10
  %v5_a778 = inttoptr i32 %v4_a778 to i16*
  store i16 %v3_a728, i16* %v5_a778, align 2
  %v0_a77c = load i32, i32* @r5, align 4
  store i32 %v0_a77c, i32* @r1, align 4
  %v0_a780 = load i32, i32* %r3.global-to-local, align 4
  %v1_a780 = trunc i32 %v0_a780 to i16
  %v3_a780 = add i32 %v0_a77c, 16
  %v4_a780 = inttoptr i32 %v3_a780 to i16*
  store i16 %v1_a780, i16* %v4_a780, align 2
  %v0_a784 = load i32, i32* @r8, align 4
  store i32 %v0_a784, i32* %r2.global-to-local, align 4
  %v0_a788 = load i32, i32* @sl, align 4
  store i32 %v0_a788, i32* %r3.global-to-local, align 4
  %v0_a78c = load i32, i32* @r4, align 4
  store i32 %v0_a78c, i32* %r0.global-to-local, align 4
  %v4_a790 = call i32 @function_c898(i32 %v0_a78c, i32 %v0_a77c, i32 %v0_a784, i32 %v0_a788)
  %v5_a790 = trunc i32 %v4_a790 to i16
  store i32 %v4_a790, i32* %r0.global-to-local, align 4
  %v3_a794 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a794, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_a79c = mul i32 %v3_a794, 32
  store i32 %v3_a79c, i32* %lr.global-to-local, align 4
  %v3_a7a0 = load i32, i32* @r5, align 4
  %v4_a7a0 = add i32 %v3_a7a0, 16
  %v5_a7a0 = inttoptr i32 %v4_a7a0 to i16*
  store i16 %v5_a790, i16* %v5_a7a0, align 2
  %v0_a7a4 = load i32, i32* %lr.global-to-local, align 4
  %v1_a7a4 = load i32, i32* %r3.global-to-local, align 4
  %tmp105 = mul i32 %v1_a7a4, -8
  %v5_a7a4 = add i32 %v0_a7a4, %tmp105
  store i32 %v5_a7a4, i32* %lr.global-to-local, align 4
  %v0_a7a8 = load i32, i32* @r5, align 4
  %v1_a7a8 = add i32 %v0_a7a8, 2
  %v2_a7a8 = inttoptr i32 %v1_a7a8 to i16*
  %v3_a7a8 = load i16, i16* %v2_a7a8, align 2
  %v1_a7ac = load i32, i32* %ip.global-to-local, align 4
  %v2_a7ac = add i32 %v1_a7ac, %v5_a7a4
  store i32 %v2_a7ac, i32* @lr, align 4
  %v3_a7b0 = add i32 %v2_a7ac, 2
  %v4_a7b0 = inttoptr i32 %v3_a7b0 to i16*
  store i16 %v3_a7a8, i16* %v4_a7b0, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_a7bc = load i32, i32* @r4, align 4
  store i32 %v0_a7bc, i32* %r1.global-to-local, align 4
  %v0_a7c0 = load i32, i32* @sb, align 4
  store i32 %v0_a7c0, i32* %r0.global-to-local, align 4
  %v0_a7c4 = load i32, i32* @r7, align 4
  store i32 %v0_a7c4, i32* %r2.global-to-local, align 4
  %v0_a7c8 = load i32, i32* @lr, align 4
  %v6_a7d0 = call i32 @function_11d70(i32 %v0_a7c0, i32 %v0_a7bc, i32 %v0_a7c4, i32 16384, i32 %v0_a7c8, i32 16)
  %v3_a7d4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a7d4, i32* %r3.global-to-local, align 4
  %v1_a7d8 = add i32 %v3_a7d4, 1
  store i32 %v1_a7d8, i32* %r0.global-to-local, align 4
  %v0_a7dc = load i32, i32* @r6, align 4
  %v9_a7dc = icmp eq i32 %v0_a7dc, %v1_a7d8
  store i1 %v9_a7dc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a7d8, i32* %stack_var_-44, align 4
  %v8_a7e4 = icmp sgt i32 %v0_a7dc, %v1_a7d8
  br i1 %v8_a7e4, label %dec_label_pc_a6f0, label %dec_label_pc_a7e8

dec_label_pc_a7e8:                                ; preds = %dec_label_pc_a718
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a7ec = icmp eq i32 %v0_a7dc, 0
  store i1 %v2_a7ec, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a7ec, label %dec_label_pc_a6dc, label %dec_label_pc_a6ec

dec_label_pc_a7fc:                                ; preds = %dec_label_pc_a6f0
  %v0_a7fc = call i32 @function_e29c()
  %v1_a7fc = trunc i32 %v0_a7fc to i16
  store i32 %v0_a7fc, i32* %r0.global-to-local, align 4
  store i32 %v1_a230, i32* %r3.global-to-local, align 4
  store i1 %v2_a804, i1* %cpsr_z.global-to-local, align 1
  %v3_a808 = load i32, i32* @r4, align 4
  %v4_a808 = add i32 %v3_a808, 4
  %v5_a808 = inttoptr i32 %v4_a808 to i16*
  store i16 %v1_a7fc, i16* %v5_a808, align 2
  br i1 %v2_a804, label %dec_label_pc_a718, label %dec_label_pc_a7fc.dec_label_pc_a810_crit_edge

dec_label_pc_a7fc.dec_label_pc_a810_crit_edge:    ; preds = %dec_label_pc_a7fc
  %v0_a810.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a810

dec_label_pc_a810:                                ; preds = %dec_label_pc_a7fc.dec_label_pc_a810_crit_edge, %dec_label_pc_a70c
  %v0_a810 = phi i32 [ %v0_a810.pre, %dec_label_pc_a7fc.dec_label_pc_a810_crit_edge ], [ %v7_a6f8, %dec_label_pc_a70c ]
  %v1_a810 = add i32 %v0_a810, 40
  store i32 %v1_a810, i32* %r0.global-to-local, align 4
  store i32 %v6_a210, i32* %r1.global-to-local, align 4
  %v2_a818 = inttoptr i32 %v1_a810 to i16*
  %v3_a818 = call i32 @function_e430(i16* %v2_a818, i32 %v6_a210)
  store i32 %v3_a818, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a718

; uselistorder directives
  uselistorder i32 %v0_a7fc, { 1, 0 }
  uselistorder i32 %v1_a7d8, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_a7a4, { 1, 0 }
  uselistorder i32 %v4_a790, { 1, 0 }
  uselistorder i32 %v3_a75c, { 1, 0 }
  uselistorder i32 %v3_a73c, { 3, 2, 0, 1 }
  uselistorder i32 %v2_a728, { 1, 0 }
  uselistorder i1 %v2_a804, { 2, 3, 1, 0 }
  uselistorder i32 %v0_a614, { 1, 0 }
  uselistorder i32 %v0_a54c, { 1, 0 }
  uselistorder i32 %v5_a4e0, { 1, 0 }
  uselistorder i32 %v0_a4a0, { 1, 0 }
  uselistorder i32 %v0_a45c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_a40c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a3f8, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_a384, { 1, 0 }
  uselistorder i32 %v6_a37c, { 0, 2, 1, 3 }
  uselistorder i1 %v9_a3ac, { 1, 0 }
  uselistorder i32 %v4_a3c0, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_a308, { 1, 0, 2 }
  uselistorder i32 %v0_a4b8, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_a2f8, { 1, 0 }
  uselistorder i1 %v7_a2f0, { 1, 0, 2 }
  uselistorder i1 %v7_a2a4, { 1, 0 }
  uselistorder i32 %v3_a2a0, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_a680, { 1, 0 }
  uselistorder i32 %v1_a668, { 1, 0 }
  uselistorder i32 %v1_a650, { 1, 0 }
  uselistorder i32 %v1_a638, { 1, 0 }
  uselistorder i32 %v1_a620, { 1, 0 }
  uselistorder i32 %v3_a3b8, { 1, 0 }
  uselistorder i1 %v2_a3d4, { 1, 0 }
  uselistorder i32 %v1_a3d0, { 1, 0 }
  uselistorder i32 %v4_a3cc, { 2, 0, 1 }
  uselistorder i32 %v2_a2e0, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_a27c, { 1, 0 }
  uselistorder i1 %v7_a274, { 1, 0 }
  uselistorder i1 %v7_a248, { 1, 0 }
  uselistorder i32 %v3_a244, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_a230, { 2, 3, 1, 0 }
  uselistorder i32 %v6_a210, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_a1f8, { 1, 2, 0 }
  uselistorder i32 %v1_a1d8, { 1, 2, 0 }
  uselistorder i32 %v1_a1b8, { 1, 2, 0 }
  uselistorder i32 %v1_a198, { 1, 2, 0 }
  uselistorder i32 %v1_a178, { 1, 2, 0 }
  uselistorder i32 %v1_a158, { 1, 2, 0 }
  uselistorder i32 %v6_a134, { 1, 0 }
  uselistorder i32 %v1_a11c, { 1, 2, 0 }
  uselistorder i32 %v6_a0b4, { 2, 1, 3, 0 }
  uselistorder i32 %v2_a09c, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v2_a08c, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 49, 48, 50, 52, 51, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 6, 9, 8, 11, 10, 16, 12, 13, 14, 15, 19, 17, 18, 21, 20, 22, 25, 24, 23, 26, 27, 28, 30, 31, 29, 32, 34, 33, 35, 36, 37, 39, 38, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a718, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a6ec, { 1, 0 }
  uselistorder label %dec_label_pc_a6dc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a6cc, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %dec_label_pc_a438, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a408, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a344, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_a324, { 1, 0 }
  uselistorder label %dec_label_pc_a300, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_a2b0, { 1, 0 }
  uselistorder label %dec_label_pc_a294, { 1, 0 }
}

define i32 @function_a824(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a824:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_a824 = load i32, i32* @sb, align 4
  %v24_a824 = load i32, i32* @fp, align 4
  %v27_a824 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_a840 = call i32 @function_1295c(i32 %arg1, i32 4)
  %v0_a844 = load i32, i32* @r5, align 4
  store i32 %v0_a844, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a854 = load i32, i32* @r4, align 4
  store i32 %v0_a854, i32* %r0.global-to-local, align 4
  %v5_a858 = inttoptr i32 %v0_a844 to i32*
  %v6_a858 = call i32 @function_8570(i32 %v0_a854, i32* %v5_a858, i32 2, i32 0, i32 %v2_a840)
  %v1_a864 = urem i32 %v6_a858, 256
  store i32 %v1_a864, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a870 = load i32, i32* @r5, align 4
  store i32 %v0_a870, i32* %r1.global-to-local, align 4
  %v0_a874 = load i32, i32* @r4, align 4
  store i32 %v0_a874, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_a858, 16777216
  %v5_a87c = sdiv i32 %sext, 16777216
  %v6_a87c = inttoptr i32 %v0_a870 to i32*
  %v7_a87c = call i32 @function_8570(i32 %v0_a874, i32* %v6_a87c, i32 3, i32 65535, i32 %v5_a87c)
  %v0_a880 = load i32, i32* @r5, align 4
  store i32 %v0_a880, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a87c, i32* %sb.global-to-local, align 4
  %v0_a890 = load i32, i32* @r4, align 4
  store i32 %v0_a890, i32* %r0.global-to-local, align 4
  %v5_a894 = inttoptr i32 %v0_a880 to i32*
  %v6_a894 = call i32 @function_8570(i32 %v0_a890, i32* %v5_a894, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_a89c = urem i32 %v6_a894, 256
  store i32 %v1_a89c, i32* %ip.global-to-local, align 4
  %v0_a8a0 = load i32, i32* @r5, align 4
  store i32 %v0_a8a0, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a8ac = load i32, i32* @r4, align 4
  store i32 %v0_a8ac, i32* %r0.global-to-local, align 4
  %sext4 = mul i32 %v6_a894, 16777216
  %v5_a8b4 = sdiv i32 %sext4, 16777216
  %v6_a8b4 = inttoptr i32 %v0_a8a0 to i32*
  %v7_a8b4 = call i32 @function_8570(i32 %v0_a8ac, i32* %v6_a8b4, i32 5, i32 0, i32 %v5_a8b4)
  %v1_a8c0 = urem i32 %v7_a8b4, 256
  store i32 %v1_a8c0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a8cc = load i32, i32* @r5, align 4
  store i32 %v0_a8cc, i32* %r1.global-to-local, align 4
  %v0_a8d0 = load i32, i32* @r4, align 4
  store i32 %v0_a8d0, i32* %r0.global-to-local, align 4
  %v5_a8d8 = inttoptr i32 %v0_a8cc to i32*
  %v6_a8d8 = call i32 @function_8570(i32 %v0_a8d0, i32* %v5_a8d8, i32 6, i32 65535, i32 %v1_a8c0)
  %v0_a8e0 = load i32, i32* @r5, align 4
  store i32 %v0_a8e0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_a8d8, i32* @r6, align 4
  %v0_a8f0 = load i32, i32* @r4, align 4
  store i32 %v0_a8f0, i32* %r0.global-to-local, align 4
  %v5_a8f4 = inttoptr i32 %v0_a8e0 to i32*
  %v6_a8f4 = call i32 @function_8570(i32 %v0_a8f0, i32* %v5_a8f4, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_a8fc = load i32, i32* @r5, align 4
  store i32 %v0_a8fc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v6_a8f4, i32* @sl, align 4
  %v0_a90c = load i32, i32* @r4, align 4
  store i32 %v0_a90c, i32* %r0.global-to-local, align 4
  %v5_a910 = inttoptr i32 %v0_a8fc to i32*
  %v6_a910 = call i32 @function_8570(i32 %v0_a90c, i32* %v5_a910, i32 17, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_a91c = load i32, i32* @r5, align 4
  store i32 %v0_a91c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_a928 = load i32, i32* @r4, align 4
  store i32 %v0_a928, i32* %r0.global-to-local, align 4
  %v5_a92c = inttoptr i32 %v0_a91c to i32*
  %v6_a92c = call i32 @function_8570(i32 %v0_a928, i32* %v5_a92c, i32 18, i32 65535, i32 %v6_a910)
  %v0_a930 = load i32, i32* @r5, align 4
  store i32 %v0_a930, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a940 = load i32, i32* @r4, align 4
  store i32 %v0_a940, i32* %r0.global-to-local, align 4
  %v5_a944 = inttoptr i32 %v0_a930 to i32*
  %v6_a944 = call i32 @function_8570(i32 %v0_a940, i32* %v5_a944, i32 11, i32 0, i32 %v6_a92c)
  %v0_a948 = load i32, i32* @r5, align 4
  store i32 %v0_a948, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a958 = load i32, i32* @r4, align 4
  store i32 %v0_a958, i32* %r0.global-to-local, align 4
  %v5_a95c = inttoptr i32 %v0_a948 to i32*
  %v6_a95c = call i32 @function_8570(i32 %v0_a958, i32* %v5_a95c, i32 12, i32 1, i32 %v6_a944)
  %v0_a960 = load i32, i32* @r5, align 4
  store i32 %v0_a960, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a970 = load i32, i32* @r4, align 4
  store i32 %v0_a970, i32* %r0.global-to-local, align 4
  %v5_a974 = inttoptr i32 %v0_a960 to i32*
  %v6_a974 = call i32 @function_8570(i32 %v0_a970, i32* %v5_a974, i32 13, i32 0, i32 %v6_a95c)
  %v0_a978 = load i32, i32* @r5, align 4
  store i32 %v0_a978, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a988 = load i32, i32* @r4, align 4
  store i32 %v0_a988, i32* %r0.global-to-local, align 4
  %v5_a98c = inttoptr i32 %v0_a978 to i32*
  %v6_a98c = call i32 @function_8570(i32 %v0_a988, i32* %v5_a98c, i32 14, i32 0, i32 %v6_a974)
  %v0_a990 = load i32, i32* @r5, align 4
  store i32 %v0_a990, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a9a0 = load i32, i32* @r4, align 4
  store i32 %v0_a9a0, i32* %r0.global-to-local, align 4
  %v5_a9a4 = inttoptr i32 %v0_a990 to i32*
  %v6_a9a4 = call i32 @function_8570(i32 %v0_a9a0, i32* %v5_a9a4, i32 15, i32 0, i32 %v6_a98c)
  %v0_a9a8 = load i32, i32* @r5, align 4
  store i32 %v0_a9a8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a9b8 = load i32, i32* @r4, align 4
  store i32 %v0_a9b8, i32* %r0.global-to-local, align 4
  %v5_a9bc = inttoptr i32 %v0_a9a8 to i32*
  %v6_a9bc = call i32 @function_8570(i32 %v0_a9b8, i32* %v5_a9bc, i32 16, i32 0, i32 %v6_a9a4)
  %v0_a9c0 = load i32, i32* @r5, align 4
  store i32 %v0_a9c0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_a9d0 = load i32, i32* @r4, align 4
  store i32 %v0_a9d0, i32* %r0.global-to-local, align 4
  %v5_a9d4 = inttoptr i32 %v0_a9c0 to i32*
  %v6_a9d4 = call i32 @function_8570(i32 %v0_a9d0, i32* %v5_a9d4, i32 0, i32 512, i32 %v6_a9bc)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a9e4 = load i32, i32* @r5, align 4
  store i32 %v0_a9e4, i32* %r1.global-to-local, align 4
  %v0_a9e8 = load i32, i32* @r4, align 4
  store i32 %v0_a9e8, i32* %r0.global-to-local, align 4
  %v5_a9ec = inttoptr i32 %v0_a9e4 to i32*
  %v6_a9ec = call i32 @function_8570(i32 %v0_a9e8, i32* %v5_a9ec, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_a9f8 = load i32, i32* @global_var_212d8.46, align 4
  store i32 %v2_a9f8, i32* %r3.global-to-local, align 4
  %v1_a9fc = urem i32 %v6_a9ec, 256
  store i32 %v1_a9fc, i32* %ip.global-to-local, align 4
  %v0_aa00 = load i32, i32* @r5, align 4
  store i32 %v0_aa00, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_aa08 = load i32, i32* @r4, align 4
  store i32 %v0_aa08, i32* %r0.global-to-local, align 4
  %v5_aa10 = inttoptr i32 %v0_aa00 to i32*
  %v6_aa10 = call i32 @function_8504(i32 %v0_aa08, i32* %v5_aa10, i32 25, i32 %v2_a9f8, i32 %v1_a9fc)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_aa24 = call i32 @function_11df4(i32 2, i32 3, i32 6)
  store i32 %v3_aa24, i32* %r0.global-to-local, align 4
  %v7_aa28 = icmp eq i32 %v3_aa24, -1
  store i1 %v7_aa28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa28, label %dec_label_pc_aef0, label %dec_label_pc_aa34

dec_label_pc_aa34:                                ; preds = %dec_label_pc_a824
  store i32 1, i32* %stack_var_-44, align 4
  %v6_aa3c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_aa3c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_aa50 = call i32 @function_11db0(i32 %v3_aa24, i32 0, i32 3, i32 %v6_aa3c, i32 4)
  store i32 %v5_aa50, i32* %r0.global-to-local, align 4
  %v7_aa54 = icmp eq i32 %v5_aa50, -1
  store i1 %v7_aa54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa54, label %dec_label_pc_aee8, label %dec_label_pc_aa5c

dec_label_pc_aa5c:                                ; preds = %dec_label_pc_aa34
  %v0_aa5c = load i32, i32* %sb.global-to-local, align 4
  %v3_aa5c = mul i32 %v0_aa5c, 65536
  store i32 %v3_aa5c, i32* @r5, align 4
  %v0_aa60 = load i32, i32* @r6, align 4
  %v0_aa64 = load i32, i32* @sl, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v3_aa6c = urem i32 %v0_aa5c, 65536
  store i32 %v3_aa6c, i32* %r1.global-to-local, align 4
  %v3_aa70 = urem i32 %v0_aa60, 65536
  store i32 %v3_aa70, i32* %r2.global-to-local, align 4
  %v3_aa74 = urem i32 %v0_aa64, 65536
  store i32 %v3_aa74, i32* %r3.global-to-local, align 4
  %v0_aa78 = load i32, i32* @r7, align 4
  %v2_aa78 = icmp eq i32 %v0_aa78, 0
  store i1 %v2_aa78, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_aa78, label %dec_label_pc_aefc, label %dec_label_pc_aa90

dec_label_pc_aa90:                                ; preds = %dec_label_pc_aa5c
  %v3_aa94 = mul i32 %v6_a9d4, 65536
  %v1_aa98 = add i32 %v3_aa94, 2621440
  store i32 %v1_aa98, i32* @lr, align 4
  %tmp59 = mul i32 %v0_aa60, 256
  %v3_aabc = and i32 %tmp59, 65280
  %tmp60 = mul i32 %v0_aa64, 256
  %v3_aac0 = and i32 %tmp60, 65280
  %tmp61 = udiv i32 %v0_aa60, 256
  %v4_aac4 = urem i32 %tmp61, 256
  %v5_aac4 = or i32 %v4_aac4, %v3_aabc
  store i32 %v5_aac4, i32* @r6, align 4
  %tmp62 = udiv i32 %v0_aa64, 256
  %v4_aac8 = urem i32 %tmp62, 256
  %v5_aac8 = or i32 %v4_aac8, %v3_aac0
  store i32 %v5_aac8, i32* @sl, align 4
  %tmp63 = udiv i32 %v1_aa98, 256
  %v3_aadc = and i32 %tmp63, 65280
  %tmp64 = mul i32 %v0_aa5c, 256
  %v3_aae0 = and i32 %tmp64, 65280
  %tmp65 = mul i32 %v6_a910, 256
  %v3_aae4 = and i32 %tmp65, 65280
  %v1_aae8 = urem i32 %v6_a944, 2
  %v1_aaec = urem i32 %v6_a95c, 2
  %tmp66 = udiv i32 %v6_a910, 256
  %v4_aaf0 = urem i32 %tmp66, 256
  %v5_aaf0 = or i32 %v4_aaf0, %v3_aae4
  %v4_aaf4 = udiv i32 %v1_aa98, 16777216
  %v5_aaf4 = or i32 %v3_aadc, %v4_aaf4
  store i32 %v5_aaf4, i32* @sb, align 4
  %tmp67 = udiv i32 %v0_aa5c, 256
  %v4_aaf8 = urem i32 %tmp67, 256
  %v5_aaf8 = or i32 %v4_aaf8, %v3_aae0
  store i32 %v5_aaf8, i32* @fp, align 4
  %v1_ab14 = urem i32 %v6_a974, 2
  store i32 %v1_ab14, i32* %r2.global-to-local, align 4
  %v1_ab18 = urem i32 %v6_a98c, 2
  store i32 %v1_ab18, i32* %r3.global-to-local, align 4
  %v1_ab1c = urem i32 %v6_a9a4, 2
  store i32 %v1_ab1c, i32* %ip.global-to-local, align 4
  %v1_ab20 = urem i32 %v6_a9bc, 2
  store i32 %v1_ab20, i32* %r0.global-to-local, align 4
  %v1_ab24 = urem i32 %v6_a974, 256
  store i32 %v1_ab24, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %tmp = sub nsw i32 0, %v1_aaec
  %v4_ac10 = and i32 %tmp, 16
  %tmp72 = sub nsw i32 0, %v1_ab14
  %v4_ac2c = and i32 %tmp72, 8
  %tmp73 = sub nsw i32 0, %v1_ab18
  %v4_ac40 = and i32 %tmp73, 4
  %tmp74 = sub nsw i32 0, %v1_ab1c
  %v3_ac54 = and i32 %tmp74, 2
  %v2_ac78 = icmp eq i32 %v1_ab24, 0
  %v1_aba0 = trunc i32 %v5_a87c to i8
  %extract.t = trunc i32 %v5_a8b4 to i8
  br label %dec_label_pc_ab44

dec_label_pc_ab44:                                ; preds = %bb70, %dec_label_pc_aa90
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_ab50 = call i32 @function_1295c(i32 1510, i32 1)
  store i32 %v2_ab50, i32* %r0.global-to-local, align 4
  %v2_ab58 = load i32, i32* @r4, align 4
  %v5_ab58 = mul i32 %v2_ab58, 4
  %v6_ab58 = add i32 %v5_ab58, %v2_a840
  %v7_ab58 = inttoptr i32 %v6_ab58 to i32*
  store i32 %v2_ab50, i32* %v7_ab58, align 4
  %v3_ab5c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ab5c, i32* %r2.global-to-local, align 4
  %v5_ab64 = mul i32 %v3_ab5c, 24
  %v1_ab68 = load i32, i32* @r8, align 4
  %v2_ab68 = add i32 %v1_ab68, %v5_ab64
  store i32 %v2_ab68, i32* %r1.global-to-local, align 4
  store i32 %v2_a840, i32* %r3.global-to-local, align 4
  %v4_ab70 = mul i32 %v3_ab5c, 4
  %v5_ab70 = add i32 %v4_ab70, %v2_a840
  %v6_ab70 = inttoptr i32 %v5_ab70 to i32*
  %v7_ab70 = load i32, i32* %v6_ab70, align 4
  store i32 %v7_ab70, i32* @r5, align 4
  %v1_ab74 = inttoptr i32 %v7_ab70 to i8*
  %v2_ab74 = load i8, i8* %v1_ab74, align 1
  %tmp75 = urem i8 %v2_ab74, 16
  %v1_ab78 = zext i8 %tmp75 to i32
  %v1_ab7c = or i32 %v1_ab78, 64
  store i32 %v1_ab7c, i32* %r3.global-to-local, align 4
  %v1_ab80 = trunc i32 %v1_ab7c to i8
  store i8 %v1_ab80, i8* %v1_ab74, align 1
  %v0_ab84 = load i32, i32* @r5, align 4
  %v1_ab84 = inttoptr i32 %v0_ab84 to i8*
  %v2_ab84 = load i8, i8* %v1_ab84, align 1
  %v1_ab88 = and i8 %v2_ab84, -16
  %v1_ab8c = or i8 %v1_ab88, 5
  store i32 %v1_a8c0, i32* %ip.global-to-local, align 4
  store i8 %v1_ab8c, i8* %v1_ab84, align 1
  store i32 %v5_a87c, i32* %r0.global-to-local, align 4
  %v0_ab9c = load i32, i32* %ip.global-to-local, align 4
  %v2_ab9c = icmp eq i32 %v0_ab9c, 0
  store i1 %v2_ab9c, i1* %cpsr_z.global-to-local, align 1
  %v2_aba0 = load i32, i32* @r5, align 4
  %v3_aba0 = add i32 %v2_aba0, 1
  %v4_aba0 = inttoptr i32 %v3_aba0 to i8*
  store i8 %v1_aba0, i8* %v4_aba0, align 1
  store i32 %v5_a8b4, i32* %r2.global-to-local, align 4
  %v0_aba8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aba8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_ab44
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_abac = load i32, i32* @r5, align 4
  %v4_abac = add i32 %v3_abac, 6
  %v5_abac = inttoptr i32 %v4_abac to i16*
  store i16 64, i16* %v5_abac, align 2
  %v0_abb4.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t17 = trunc i32 %v0_abb4.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_ab44, %bb
  %v0_abb4.off0 = phi i8 [ %extract.t, %dec_label_pc_ab44 ], [ %extract.t17, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_abb4 = load i32, i32* @r5, align 4
  %v3_abb4 = add i32 %v2_abb4, 8
  %v4_abb4 = inttoptr i32 %v3_abb4 to i8*
  store i8 %v0_abb4.off0, i8* %v4_abb4, align 1
  %v0_abb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_abb8 = trunc i32 %v0_abb8 to i8
  %v2_abb8 = load i32, i32* @r5, align 4
  %v3_abb8 = add i32 %v2_abb8, 9
  %v4_abb8 = inttoptr i32 %v3_abb8 to i8*
  store i8 %v1_abb8, i8* %v4_abb8, align 1
  store i32 %v6_aa10, i32* %ip.global-to-local, align 4
  %v1_abc0 = load i32, i32* @r5, align 4
  %v2_abc0 = add i32 %v1_abc0, 12
  %v3_abc0 = inttoptr i32 %v2_abc0 to i32*
  store i32 %v6_aa10, i32* %v3_abc0, align 4
  %v0_abc4 = load i32, i32* %r1.global-to-local, align 4
  %v1_abc4 = add i32 %v0_abc4, 16
  %v2_abc4 = inttoptr i32 %v1_abc4 to i32*
  %v3_abc4 = load i32, i32* %v2_abc4, align 4
  store i32 %v3_abc4, i32* %r3.global-to-local, align 4
  %v0_abc8 = load i32, i32* @sb, align 4
  %v1_abc8 = trunc i32 %v0_abc8 to i16
  %v2_abc8 = load i32, i32* @r5, align 4
  %v3_abc8 = add i32 %v2_abc8, 2
  %v4_abc8 = inttoptr i32 %v3_abc8 to i16*
  store i16 %v1_abc8, i16* %v4_abc8, align 2
  %v0_abcc = load i32, i32* @fp, align 4
  %v1_abcc = trunc i32 %v0_abcc to i16
  %v2_abcc = load i32, i32* @r5, align 4
  %v3_abcc = add i32 %v2_abcc, 4
  %v4_abcc = inttoptr i32 %v3_abcc to i16*
  store i16 %v1_abcc, i16* %v4_abcc, align 2
  %v0_abd0 = load i32, i32* %r3.global-to-local, align 4
  %v1_abd0 = load i32, i32* @r5, align 4
  %v2_abd0 = add i32 %v1_abd0, 16
  %v3_abd0 = inttoptr i32 %v2_abd0 to i32*
  store i32 %v0_abd0, i32* %v3_abd0, align 4
  %v0_abd4 = load i32, i32* @r6, align 4
  %v1_abd4 = trunc i32 %v0_abd4 to i16
  %v2_abd4 = load i32, i32* @r5, align 4
  %v3_abd4 = add i32 %v2_abd4, 20
  %v4_abd4 = inttoptr i32 %v3_abd4 to i16*
  store i16 %v1_abd4, i16* %v4_abd4, align 2
  %v0_abd8 = load i32, i32* @r5, align 4
  %v1_abd8 = add i32 %v0_abd8, 20
  store i32 %v1_abd8, i32* @r4, align 4
  %v1_abdc = add i32 %v0_abd8, 32
  %v2_abdc = inttoptr i32 %v1_abdc to i8*
  %v3_abdc = load i8, i8* %v2_abdc, align 1
  %v4_abdc = zext i8 %v3_abdc to i32
  store i32 %v4_abdc, i32* %r3.global-to-local, align 4
  %v1_abe0 = add i32 %v0_abd8, 33
  %v2_abe0 = inttoptr i32 %v1_abe0 to i8*
  %v3_abe0 = load i8, i8* %v2_abe0, align 1
  %v4_abe0 = zext i8 %v3_abe0 to i32
  store i32 %v1_aae8, i32* %r0.global-to-local, align 4
  %tmp76 = urem i8 %v3_abdc, 16
  %v1_abe8 = zext i8 %tmp76 to i32
  %v1_abec = or i32 %v1_abe8, 80
  store i32 %v1_abec, i32* %r3.global-to-local, align 4
  %v1_abf0 = and i32 %v4_abe0, 223
  store i32 %v1_abf0, i32* %r2.global-to-local, align 4
  %v1_abf4 = trunc i32 %v1_abec to i8
  store i8 %v1_abf4, i8* %v2_abdc, align 1
  %v0_abf8 = load i32, i32* %r2.global-to-local, align 4
  %v1_abf8 = load i32, i32* %r0.global-to-local, align 4
  %v4_abf8 = mul i32 %v1_abf8, 32
  %v5_abf8 = or i32 %v4_abf8, %v0_abf8
  store i32 %v5_abf8, i32* %r2.global-to-local, align 4
  store i32 %v5_aaf0, i32* %r1.global-to-local, align 4
  %v1_ac00 = trunc i32 %v5_abf8 to i8
  %v2_ac00 = load i32, i32* @r4, align 4
  %v3_ac00 = add i32 %v2_ac00, 13
  %v4_ac00 = inttoptr i32 %v3_ac00 to i8*
  store i8 %v1_ac00, i8* %v4_ac00, align 1
  %v0_ac04 = load i32, i32* @r4, align 4
  %v1_ac04 = add i32 %v0_ac04, 13
  %v2_ac04 = inttoptr i32 %v1_ac04 to i8*
  %v3_ac04 = load i8, i8* %v2_ac04, align 1
  %v4_ac04 = zext i8 %v3_ac04 to i32
  store i32 %v1_aaec, i32* %r2.global-to-local, align 4
  %v1_ac0c = and i32 %v4_ac04, 239
  %v5_ac10 = or i32 %v1_ac0c, %v4_ac10
  store i32 %v5_ac10, i32* %r3.global-to-local, align 4
  %v0_ac14 = load i32, i32* %r1.global-to-local, align 4
  %v2_ac14 = add i32 %v0_ac04, 4
  %v3_ac14 = inttoptr i32 %v2_ac14 to i32*
  store i32 %v0_ac14, i32* %v3_ac14, align 4
  %v0_ac18 = load i32, i32* @sl, align 4
  %v1_ac18 = trunc i32 %v0_ac18 to i16
  %v2_ac18 = load i32, i32* @r4, align 4
  %v3_ac18 = add i32 %v2_ac18, 2
  %v4_ac18 = inttoptr i32 %v3_ac18 to i16*
  store i16 %v1_ac18, i16* %v4_ac18, align 2
  %v0_ac1c = load i32, i32* %r3.global-to-local, align 4
  %v1_ac1c = trunc i32 %v0_ac1c to i8
  %v2_ac1c = load i32, i32* @r4, align 4
  %v3_ac1c = add i32 %v2_ac1c, 13
  %v4_ac1c = inttoptr i32 %v3_ac1c to i8*
  store i8 %v1_ac1c, i8* %v4_ac1c, align 1
  %v0_ac20 = load i32, i32* @r4, align 4
  %v1_ac20 = add i32 %v0_ac20, 13
  %v2_ac20 = inttoptr i32 %v1_ac20 to i8*
  %v3_ac20 = load i8, i8* %v2_ac20, align 1
  %v4_ac20 = zext i8 %v3_ac20 to i32
  store i32 %v1_ab14, i32* %r3.global-to-local, align 4
  %v1_ac28 = and i32 %v4_ac20, 247
  %v5_ac2c = or i32 %v1_ac28, %v4_ac2c
  store i32 %v5_ac2c, i32* %r2.global-to-local, align 4
  %v1_ac30 = trunc i32 %v5_ac2c to i8
  store i8 %v1_ac30, i8* %v2_ac20, align 1
  %v0_ac34 = load i32, i32* @r4, align 4
  %v1_ac34 = add i32 %v0_ac34, 13
  %v2_ac34 = inttoptr i32 %v1_ac34 to i8*
  %v3_ac34 = load i8, i8* %v2_ac34, align 1
  %v4_ac34 = zext i8 %v3_ac34 to i32
  store i32 %v1_ab18, i32* %ip.global-to-local, align 4
  %v1_ac3c = and i32 %v4_ac34, 251
  %v5_ac40 = or i32 %v1_ac3c, %v4_ac40
  store i32 %v5_ac40, i32* %r3.global-to-local, align 4
  %v1_ac44 = trunc i32 %v5_ac40 to i8
  store i8 %v1_ac44, i8* %v2_ac34, align 1
  %v0_ac48 = load i32, i32* @r4, align 4
  %v1_ac48 = add i32 %v0_ac48, 13
  %v2_ac48 = inttoptr i32 %v1_ac48 to i8*
  %v3_ac48 = load i8, i8* %v2_ac48, align 1
  %v4_ac48 = zext i8 %v3_ac48 to i32
  store i32 %v1_ab1c, i32* %r0.global-to-local, align 4
  %v1_ac50 = and i32 %v4_ac48, 253
  %v4_ac54 = or i32 %v1_ac50, %v3_ac54
  store i32 %v4_ac54, i32* %r2.global-to-local, align 4
  %v1_ac58 = trunc i32 %v4_ac54 to i8
  store i8 %v1_ac58, i8* %v2_ac48, align 1
  %v0_ac5c = load i32, i32* @r4, align 4
  %v1_ac5c = add i32 %v0_ac5c, 13
  %v2_ac5c = inttoptr i32 %v1_ac5c to i8*
  %v3_ac5c = load i8, i8* %v2_ac5c, align 1
  %v4_ac5c = zext i8 %v3_ac5c to i32
  store i32 %v1_ab20, i32* %r1.global-to-local, align 4
  %v1_ac64 = and i32 %v4_ac5c, 254
  %v2_ac68 = or i32 %v1_ac64, %v1_ab20
  store i32 %v2_ac68, i32* %r3.global-to-local, align 4
  %v1_ac6c = trunc i32 %v2_ac68 to i8
  store i8 %v1_ac6c, i8* %v2_ac5c, align 1
  %v0_ac70 = call i32 @function_e29c()
  %v1_ac70 = trunc i32 %v0_ac70 to i16
  store i32 %v0_ac70, i32* %r0.global-to-local, align 4
  store i32 %v1_ab24, i32* %r2.global-to-local, align 4
  store i1 %v2_ac78, i1* %cpsr_z.global-to-local, align 1
  %v3_ac84.pre = load i32, i32* @r4, align 4
  br i1 %v2_ac78, label %.thread3, label %bb68

bb68:                                             ; preds = %.thread
  %v2_ac7c = add i32 %v3_ac84.pre, 13
  %v3_ac7c = inttoptr i32 %v2_ac7c to i8*
  %v4_ac7c = load i8, i8* %v3_ac7c, align 1
  %v5_ac7c = zext i8 %v4_ac7c to i32
  %v2_ac80 = or i32 %v5_ac7c, 8
  store i32 %v2_ac80, i32* @r3, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread, %bb68
  %v4_ac84 = add i32 %v3_ac84.pre, 14
  %v5_ac84 = inttoptr i32 %v4_ac84 to i16*
  store i16 %v1_ac70, i16* %v5_ac84, align 2
  store i32 %v6_a9d4, i32* %r1.global-to-local, align 4
  %v0_ac8c = load i32, i32* @r5, align 4
  %v1_ac8c = add i32 %v0_ac8c, 40
  store i32 %v1_ac8c, i32* %r0.global-to-local, align 4
  br i1 %v2_ac78, label %bb70, label %bb69

bb69:                                             ; preds = %.thread3
  %v1_ac90 = load i32, i32* @r3, align 4
  %v2_ac90 = trunc i32 %v1_ac90 to i8
  %v3_ac90 = load i32, i32* @r4, align 4
  %v4_ac90 = add i32 %v3_ac90, 13
  %v5_ac90 = inttoptr i32 %v4_ac90 to i8*
  store i8 %v2_ac90, i8* %v5_ac90, align 1
  br label %bb70

bb70:                                             ; preds = %.thread3, %bb69
  %v2_ac94 = inttoptr i32 %v1_ac8c to i16*
  %v3_ac94 = call i32 @function_e430(i16* %v2_ac94, i32 %v6_a9d4)
  store i32 %v3_ac94, i32* %r0.global-to-local, align 4
  %v3_ac98 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ac98, i32* %r3.global-to-local, align 4
  %v1_ac9c = add i32 %v3_ac98, 1
  store i32 %v1_ac9c, i32* @r4, align 4
  %v1_aca0 = load i32, i32* @r7, align 4
  %v9_aca0 = icmp eq i32 %v1_ac9c, %v1_aca0
  store i1 %v9_aca0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ac9c, i32* %stack_var_-44, align 4
  %v5_aca8 = icmp slt i32 %v1_ac9c, %v1_aca0
  br i1 %v5_aca8, label %dec_label_pc_ab44, label %dec_label_pc_acac

dec_label_pc_acac:                                ; preds = %bb70
  store i32 %v6_a9d4, i32* %r3.global-to-local, align 4
  %v1_acb0 = add i32 %v6_a9d4, 20
  store i32 %v1_acb0, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_acb8

dec_label_pc_acb8:                                ; preds = %dec_label_pc_aefc, %dec_label_pc_acac
  %v0_acd08 = phi i32 [ %v1_aca0, %dec_label_pc_acac ], [ 0, %dec_label_pc_aefc ]
  %stack_var_-140.0 = phi i32 [ %v3_aa94, %dec_label_pc_acac ], [ %v3_af08, %dec_label_pc_aefc ]
  %storemerge = add i32 %v6_a9d4, 40
  store i32 %storemerge, i32* %fp.global-to-local, align 4
  store i32 %stack_var_-140.0, i32* %r1.global-to-local, align 4
  %v1_acbc = add i32 %stack_var_-140.0, 1310720
  store i32 %v1_acbc, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v1_acbc, 256
  %v3_acc4 = and i32 %tmp71, 65280
  store i32 %v3_acc4, i32* %r3.global-to-local, align 4
  %v4_acc8 = udiv i32 %v1_acbc, 16777216
  %v5_acc8 = or i32 %v3_acc4, %v4_acc8
  store i32 %v5_acc8, i32* @sl, align 4
  %v3_ae68 = icmp eq i32 %v3_aa6c, 65535
  %v2_aecc = icmp eq i32 %v1_a9fc, 0
  %v2_ad08 = icmp eq i32 %v6_aa10, -1
  %v7_ad08 = icmp eq i32 %v6_aa10, -1
  br label %dec_label_pc_accc

dec_label_pc_accc:                                ; preds = %dec_label_pc_accc, %dec_label_pc_ade4, %dec_label_pc_acb8
  %v0_acd0 = phi i32 [ %v0_acd08, %dec_label_pc_acb8 ], [ 0, %dec_label_pc_ade4 ], [ 0, %dec_label_pc_accc ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_acd0 = icmp eq i32 %v0_acd0, 0
  store i1 %v2_acd0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_acd0, label %dec_label_pc_accc, label %dec_label_pc_acdc

dec_label_pc_acdc:                                ; preds = %dec_label_pc_accc, %dec_label_pc_ade4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ace0

dec_label_pc_ace0:                                ; preds = %dec_label_pc_ad60, %dec_label_pc_acdc
  %v1_acf4 = phi i32 [ %v1_add4, %dec_label_pc_ad60 ], [ 0, %dec_label_pc_acdc ]
  %v5_ace4 = mul i32 %v1_acf4, 24
  %v1_ace8 = load i32, i32* @r8, align 4
  %v2_ace8 = add i32 %v1_ace8, %v5_ace4
  store i32 %v2_ace8, i32* %r3.global-to-local, align 4
  store i32 %v2_a840, i32* %ip.global-to-local, align 4
  %v1_acf0 = add i32 %v2_ace8, 20
  %v2_acf0 = inttoptr i32 %v1_acf0 to i8*
  %v3_acf0 = load i8, i8* %v2_acf0, align 1
  %v4_acf0 = zext i8 %v3_acf0 to i32
  store i32 %v4_acf0, i32* %r2.global-to-local, align 4
  %v4_acf4 = mul i32 %v1_acf4, 4
  %v5_acf4 = add i32 %v4_acf4, %v2_a840
  %v6_acf4 = inttoptr i32 %v5_acf4 to i32*
  %v7_acf4 = load i32, i32* %v6_acf4, align 4
  store i32 %v7_acf4, i32* @r5, align 4
  %v7_acf8 = icmp eq i8 %v3_acf0, 31
  store i1 %v7_acf8, i1* %cpsr_z.global-to-local, align 1
  %v1_acfc = add i32 %v7_acf4, 20
  store i32 %v1_acfc, i32* @r6, align 4
  %tmp77 = icmp ult i8 %v3_acf0, 32
  br i1 %tmp77, label %dec_label_pc_adf8, label %dec_label_pc_ad04

dec_label_pc_ad04:                                ; preds = %dec_label_pc_ace0
  store i32 %v6_aa10, i32* %r0.global-to-local, align 4
  store i1 %v7_ad08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ad08, label %dec_label_pc_ae58, label %dec_label_pc_ad10

dec_label_pc_ad10:                                ; preds = %dec_label_pc_adf8, %dec_label_pc_ad04
  store i32 %v3_aa6c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ae68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ae68, label %dec_label_pc_ae74, label %dec_label_pc_ad24

dec_label_pc_ad24:                                ; preds = %dec_label_pc_ae58.dec_label_pc_ad24_crit_edge, %dec_label_pc_ad10
  %v1_ad28 = phi i32 [ %v1_ad28.pre, %dec_label_pc_ae58.dec_label_pc_ad24_crit_edge ], [ 65535, %dec_label_pc_ad10 ]
  store i32 %v3_aa70, i32* %r2.global-to-local, align 4
  %v9_ad28 = icmp eq i32 %v3_aa70, %v1_ad28
  store i1 %v9_ad28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad28, label %dec_label_pc_ae88, label %dec_label_pc_ad30

dec_label_pc_ad30:                                ; preds = %dec_label_pc_ae74.dec_label_pc_ad30_crit_edge, %dec_label_pc_ad24
  %v1_ad34 = phi i32 [ %v1_ad34.pre, %dec_label_pc_ae74.dec_label_pc_ad30_crit_edge ], [ %v1_ad28, %dec_label_pc_ad24 ]
  store i32 %v3_aa74, i32* %r3.global-to-local, align 4
  %v9_ad34 = icmp eq i32 %v3_aa74, %v1_ad34
  store i1 %v9_ad34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad34, label %dec_label_pc_ae9c, label %dec_label_pc_ad3c

dec_label_pc_ad3c:                                ; preds = %dec_label_pc_ae88.dec_label_pc_ad3c_crit_edge, %dec_label_pc_ad30
  %v1_ad40 = phi i32 [ %v1_ad40.pre, %dec_label_pc_ae88.dec_label_pc_ad3c_crit_edge ], [ %v1_ad34, %dec_label_pc_ad30 ]
  store i32 %v6_a910, i32* %ip.global-to-local, align 4
  %v9_ad40 = icmp eq i32 %v6_a910, %v1_ad40
  store i1 %v9_ad40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad40, label %dec_label_pc_aeb0, label %dec_label_pc_ad48

dec_label_pc_ad48:                                ; preds = %dec_label_pc_ae9c.dec_label_pc_ad48_crit_edge, %dec_label_pc_ad3c
  %v1_ad4c = phi i32 [ %v1_ad4c.pre, %dec_label_pc_ae9c.dec_label_pc_ad48_crit_edge ], [ %v1_ad40, %dec_label_pc_ad3c ]
  store i32 %v6_a92c, i32* %r0.global-to-local, align 4
  %v9_ad4c = icmp eq i32 %v6_a92c, %v1_ad4c
  store i1 %v9_ad4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad4c, label %dec_label_pc_aec4, label %dec_label_pc_ad54

dec_label_pc_ad54:                                ; preds = %dec_label_pc_aeb0, %dec_label_pc_ad48
  store i32 %v1_a9fc, i32* %r1.global-to-local, align 4
  store i1 %v2_aecc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aecc, label %dec_label_pc_ad60, label %dec_label_pc_aed8

dec_label_pc_ad60:                                ; preds = %dec_label_pc_ad54, %dec_label_pc_aec4, %dec_label_pc_aed8
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_ad64 = load i32, i32* @r5, align 4
  %v3_ad64 = add i32 %v2_ad64, 10
  %v4_ad64 = inttoptr i32 %v3_ad64 to i16*
  store i16 0, i16* %v4_ad64, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ad6c = load i32, i32* @r5, align 4
  store i32 %v0_ad6c, i32* @r0, align 4
  %v2_ad70 = call i32 @function_c848(i32 %v0_ad6c, i32 20)
  %v3_ad70 = trunc i32 %v2_ad70 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_ad78 = load i32, i32* @r5, align 4
  %v4_ad78 = add i32 %v3_ad78, 10
  %v5_ad78 = inttoptr i32 %v4_ad78 to i16*
  store i16 %v3_ad70, i16* %v5_ad78, align 2
  %v0_ad7c = load i32, i32* @r6, align 4
  store i32 %v0_ad7c, i32* @r1, align 4
  %v0_ad80 = load i32, i32* %r3.global-to-local, align 4
  %v1_ad80 = trunc i32 %v0_ad80 to i16
  %v3_ad80 = add i32 %v0_ad7c, 16
  %v4_ad80 = inttoptr i32 %v3_ad80 to i16*
  store i16 %v1_ad80, i16* %v4_ad80, align 2
  %v0_ad84 = load i32, i32* @sl, align 4
  store i32 %v0_ad84, i32* %r2.global-to-local, align 4
  %v0_ad88 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_ad88, i32* %r3.global-to-local, align 4
  %v0_ad8c = load i32, i32* @r5, align 4
  store i32 %v0_ad8c, i32* %r0.global-to-local, align 4
  %v4_ad90 = call i32 @function_c898(i32 %v0_ad8c, i32 %v0_ad7c, i32 %v0_ad84, i32 %v0_ad88)
  %v5_ad90 = trunc i32 %v4_ad90 to i16
  store i32 %v4_ad90, i32* %r0.global-to-local, align 4
  %v3_ad94 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ad94, i32* %r3.global-to-local, align 4
  %v3_ad98 = mul i32 %v3_ad94, 32
  store i32 %v3_ad98, i32* %lr.global-to-local, align 4
  %v3_ad9c = load i32, i32* @r6, align 4
  %v4_ad9c = add i32 %v3_ad9c, 16
  %v5_ad9c = inttoptr i32 %v4_ad9c to i16*
  store i16 %v5_ad90, i16* %v5_ad9c, align 2
  %v0_ada0 = load i32, i32* %lr.global-to-local, align 4
  %v1_ada0 = load i32, i32* %r3.global-to-local, align 4
  %tmp78 = mul i32 %v1_ada0, -8
  %v5_ada0 = add i32 %v0_ada0, %tmp78
  store i32 %v5_ada0, i32* %lr.global-to-local, align 4
  %v0_ada4 = load i32, i32* @r6, align 4
  %v1_ada4 = add i32 %v0_ada4, 2
  %v2_ada4 = inttoptr i32 %v1_ada4 to i16*
  %v3_ada4 = load i16, i16* %v2_ada4, align 2
  %v1_ada8 = load i32, i32* @r8, align 4
  %v2_ada8 = add i32 %v1_ada8, %v5_ada0
  store i32 %v2_ada8, i32* @lr, align 4
  %v3_adac = add i32 %v2_ada8, 2
  %v4_adac = inttoptr i32 %v3_adac to i16*
  store i16 %v3_ada4, i16* %v4_adac, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_adb8 = load i32, i32* @r5, align 4
  store i32 %v0_adb8, i32* %r1.global-to-local, align 4
  store i32 %v3_aa24, i32* %r0.global-to-local, align 4
  %v0_adc0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_adc0, i32* %r2.global-to-local, align 4
  %v0_adc4 = load i32, i32* @lr, align 4
  %v6_adcc = call i32 @function_11d70(i32 %v3_aa24, i32 %v0_adb8, i32 %v0_adc0, i32 16384, i32 %v0_adc4, i32 16)
  %v3_add0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_add0, i32* %r3.global-to-local, align 4
  %v1_add4 = add i32 %v3_add0, 1
  store i32 %v1_add4, i32* %r0.global-to-local, align 4
  %v1_add8 = load i32, i32* @r7, align 4
  %v9_add8 = icmp eq i32 %v1_add4, %v1_add8
  store i1 %v9_add8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_add4, i32* %stack_var_-44, align 4
  %v5_ade0 = icmp slt i32 %v1_add4, %v1_add8
  br i1 %v5_ade0, label %dec_label_pc_ace0, label %dec_label_pc_ade4

dec_label_pc_ade4:                                ; preds = %dec_label_pc_ad60
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ade8 = icmp eq i32 %v1_add8, 0
  store i1 %v2_ade8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_ade8, label %dec_label_pc_accc, label %dec_label_pc_acdc

dec_label_pc_adf8:                                ; preds = %dec_label_pc_ace0
  %v1_adf8 = add i32 %v2_ace8, 16
  %v2_adf8 = inttoptr i32 %v1_adf8 to i32*
  %v3_adf8 = load i32, i32* %v2_adf8, align 4
  %v0_adfc = call i32 @function_e29c()
  store i32 %v0_adfc, i32* %r0.global-to-local, align 4
  %v3_ae00 = load i32, i32* %stack_var_-44, align 4
  %v5_ae08 = mul i32 %v3_ae00, 24
  %v1_ae0c = and i32 %v3_adf8, 16711680
  store i32 %v1_ae0c, i32* %ip.global-to-local, align 4
  %v3_ae10 = udiv i32 %v3_adf8, 16777216
  %v4_ae14 = udiv i32 %v1_ae0c, 256
  %v5_ae14 = or i32 %v4_ae14, %v3_ae10
  store i32 %v5_ae14, i32* %r2.global-to-local, align 4
  %v1_ae18 = load i32, i32* @r8, align 4
  %v2_ae18 = add i32 %v1_ae18, %v5_ae08
  store i32 %v2_ae18, i32* %r1.global-to-local, align 4
  %v1_ae1c = and i32 %v3_adf8, 65280
  store i32 %v1_ae1c, i32* %r3.global-to-local, align 4
  %v1_ae20 = add i32 %v2_ae18, 20
  %v2_ae20 = inttoptr i32 %v1_ae20 to i8*
  %v3_ae20 = load i8, i8* %v2_ae20, align 1
  %v4_ae20 = zext i8 %v3_ae20 to i32
  store i32 %v4_ae20, i32* %ip.global-to-local, align 4
  %v5_ae28 = call i32 @llvm.bswap.i32(i32 %v3_adf8)
  %v7_ae2c = lshr i32 %v0_adfc, %v4_ae20
  %v8_ae2c = add i32 %v7_ae2c, %v5_ae28
  store i32 %v8_ae2c, i32* %r2.global-to-local, align 4
  %v1_ae3c = and i32 %v8_ae2c, 65280
  store i32 %v1_ae3c, i32* %r1.global-to-local, align 4
  store i32 %v6_aa10, i32* %r0.global-to-local, align 4
  %v5_ae48 = call i32 @llvm.bswap.i32(i32 %v8_ae2c)
  store i32 %v5_ae48, i32* %r3.global-to-local, align 4
  store i1 %v7_ad08, i1* %cpsr_z.global-to-local, align 1
  %v1_ae50 = load i32, i32* @r5, align 4
  %v2_ae50 = add i32 %v1_ae50, 16
  %v3_ae50 = inttoptr i32 %v2_ae50 to i32*
  store i32 %v5_ae48, i32* %v3_ae50, align 4
  br i1 %v2_ad08, label %dec_label_pc_ae58, label %dec_label_pc_ad10

dec_label_pc_ae58:                                ; preds = %dec_label_pc_adf8, %dec_label_pc_ad04
  %v0_ae58 = call i32 @function_e29c()
  store i32 %v0_ae58, i32* %r0.global-to-local, align 4
  store i32 %v3_aa6c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ae68, i1* %cpsr_z.global-to-local, align 1
  %v1_ae6c = load i32, i32* @r5, align 4
  %v2_ae6c = add i32 %v1_ae6c, 12
  %v3_ae6c = inttoptr i32 %v2_ae6c to i32*
  store i32 %v0_ae58, i32* %v3_ae6c, align 4
  br i1 %v3_ae68, label %dec_label_pc_ae74, label %dec_label_pc_ae58.dec_label_pc_ad24_crit_edge

dec_label_pc_ae58.dec_label_pc_ad24_crit_edge:    ; preds = %dec_label_pc_ae58
  %v1_ad28.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad24

dec_label_pc_ae74:                                ; preds = %dec_label_pc_ae58, %dec_label_pc_ad10
  %v0_ae74 = call i32 @function_e29c()
  %v1_ae74 = trunc i32 %v0_ae74 to i16
  store i32 %v0_ae74, i32* %r0.global-to-local, align 4
  store i32 %v3_aa70, i32* %r2.global-to-local, align 4
  %v1_ae7c = load i32, i32* @r4, align 4
  %v9_ae7c = icmp eq i32 %v3_aa70, %v1_ae7c
  store i1 %v9_ae7c, i1* %cpsr_z.global-to-local, align 1
  %v3_ae80 = load i32, i32* @r5, align 4
  %v4_ae80 = add i32 %v3_ae80, 4
  %v5_ae80 = inttoptr i32 %v4_ae80 to i16*
  store i16 %v1_ae74, i16* %v5_ae80, align 2
  br i1 %v9_ae7c, label %dec_label_pc_ae88, label %dec_label_pc_ae74.dec_label_pc_ad30_crit_edge

dec_label_pc_ae74.dec_label_pc_ad30_crit_edge:    ; preds = %dec_label_pc_ae74
  %v1_ad34.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad30

dec_label_pc_ae88:                                ; preds = %dec_label_pc_ae74, %dec_label_pc_ad24
  %v0_ae88 = call i32 @function_e29c()
  %v1_ae88 = trunc i32 %v0_ae88 to i16
  store i32 %v0_ae88, i32* %r0.global-to-local, align 4
  store i32 %v3_aa74, i32* %r3.global-to-local, align 4
  %v1_ae90 = load i32, i32* @r4, align 4
  %v9_ae90 = icmp eq i32 %v3_aa74, %v1_ae90
  store i1 %v9_ae90, i1* %cpsr_z.global-to-local, align 1
  %v3_ae94 = load i32, i32* @r5, align 4
  %v4_ae94 = add i32 %v3_ae94, 20
  %v5_ae94 = inttoptr i32 %v4_ae94 to i16*
  store i16 %v1_ae88, i16* %v5_ae94, align 2
  br i1 %v9_ae90, label %dec_label_pc_ae9c, label %dec_label_pc_ae88.dec_label_pc_ad3c_crit_edge

dec_label_pc_ae88.dec_label_pc_ad3c_crit_edge:    ; preds = %dec_label_pc_ae88
  %v1_ad40.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad3c

dec_label_pc_ae9c:                                ; preds = %dec_label_pc_ae88, %dec_label_pc_ad30
  %v0_ae9c = call i32 @function_e29c()
  %v1_ae9c = trunc i32 %v0_ae9c to i16
  store i32 %v0_ae9c, i32* %r0.global-to-local, align 4
  store i32 %v6_a910, i32* %ip.global-to-local, align 4
  %v1_aea4 = load i32, i32* @r4, align 4
  %v9_aea4 = icmp eq i32 %v6_a910, %v1_aea4
  store i1 %v9_aea4, i1* %cpsr_z.global-to-local, align 1
  %v3_aea8 = load i32, i32* @r6, align 4
  %v4_aea8 = add i32 %v3_aea8, 2
  %v5_aea8 = inttoptr i32 %v4_aea8 to i16*
  store i16 %v1_ae9c, i16* %v5_aea8, align 2
  br i1 %v9_aea4, label %dec_label_pc_aeb0, label %dec_label_pc_ae9c.dec_label_pc_ad48_crit_edge

dec_label_pc_ae9c.dec_label_pc_ad48_crit_edge:    ; preds = %dec_label_pc_ae9c
  %v1_ad4c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad48

dec_label_pc_aeb0:                                ; preds = %dec_label_pc_ae9c, %dec_label_pc_ad3c
  %v0_aeb0 = call i32 @function_e29c()
  %v1_aeb4 = load i32, i32* @r6, align 4
  %v2_aeb4 = add i32 %v1_aeb4, 4
  %v3_aeb4 = inttoptr i32 %v2_aeb4 to i32*
  store i32 %v0_aeb0, i32* %v3_aeb4, align 4
  store i32 %v6_a92c, i32* %r0.global-to-local, align 4
  %v1_aebc = load i32, i32* @r4, align 4
  %v9_aebc = icmp eq i32 %v6_a92c, %v1_aebc
  store i1 %v9_aebc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aebc, label %dec_label_pc_aec4, label %dec_label_pc_ad54

dec_label_pc_aec4:                                ; preds = %dec_label_pc_aeb0, %dec_label_pc_ad48
  %v0_aec4 = call i32 @function_e29c()
  store i32 %v0_aec4, i32* %r0.global-to-local, align 4
  store i32 %v1_a9fc, i32* %r1.global-to-local, align 4
  store i1 %v2_aecc, i1* %cpsr_z.global-to-local, align 1
  %v1_aed0 = load i32, i32* @r6, align 4
  %v2_aed0 = add i32 %v1_aed0, 8
  %v3_aed0 = inttoptr i32 %v2_aed0 to i32*
  store i32 %v0_aec4, i32* %v3_aed0, align 4
  br i1 %v2_aecc, label %dec_label_pc_ad60, label %dec_label_pc_aed8

dec_label_pc_aed8:                                ; preds = %dec_label_pc_ad54, %dec_label_pc_aec4
  %v0_aed8 = load i32, i32* @r5, align 4
  %v1_aed8 = add i32 %v0_aed8, 40
  store i32 %v1_aed8, i32* %r0.global-to-local, align 4
  store i32 %v6_a9d4, i32* %r1.global-to-local, align 4
  %v2_aee0 = inttoptr i32 %v1_aed8 to i16*
  %v3_aee0 = call i32 @function_e430(i16* %v2_aee0, i32 %v6_a9d4)
  store i32 %v3_aee0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ad60

dec_label_pc_aee8:                                ; preds = %dec_label_pc_aa34
  store i32 %v3_aa24, i32* %r0.global-to-local, align 4
  %v1_aeec = call i32 @function_115e0(i32 %v3_aa24)
  store i32 %v1_aeec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aef0

dec_label_pc_aef0:                                ; preds = %dec_label_pc_a824, %dec_label_pc_aee8
  %v1_aef8 = phi i32 [ %v3_aa24, %dec_label_pc_a824 ], [ %v1_aeec, %dec_label_pc_aee8 ]
  store i32 %v18_a824, i32* %sb.global-to-local, align 4
  store i32 %v24_a824, i32* %fp.global-to-local, align 4
  store i32 %v27_a824, i32* %lr.global-to-local, align 4
  ret i32 %v1_aef8

dec_label_pc_aefc:                                ; preds = %dec_label_pc_aa5c
  store i32 %v6_a9d4, i32* %r0.global-to-local, align 4
  %v1_af04 = add i32 %v6_a9d4, 20
  store i32 %v1_af04, i32* %sb.global-to-local, align 4
  %v3_af08 = mul i32 %v6_a9d4, 65536
  store i32 %v3_af08, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_acb8

; uselistorder directives
  uselistorder i32 %v0_ae9c, { 1, 0 }
  uselistorder i32 %v0_ae88, { 1, 0 }
  uselistorder i32 %v0_ae74, { 1, 0 }
  uselistorder i32 %v5_ae48, { 1, 0 }
  uselistorder i32 %v3_adf8, { 2, 1, 3, 0 }
  uselistorder i32 %v1_add4, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_ada0, { 1, 0 }
  uselistorder i32 %v4_ad90, { 1, 0 }
  uselistorder i1 %v7_ad08, { 2, 1, 0 }
  uselistorder i1 %v2_aecc, { 2, 3, 1, 0 }
  uselistorder i1 %v3_ae68, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-140.0, { 1, 0 }
  uselistorder i32 %v1_ac9c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_ac70, { 1, 0 }
  uselistorder i32 %v1_ab24, { 1, 2, 0 }
  uselistorder i32 %v1_ab20, { 2, 1, 0 }
  uselistorder i32 %v1_ab1c, { 2, 0, 1 }
  uselistorder i32 %v1_ab18, { 2, 0, 1 }
  uselistorder i32 %v1_ab14, { 2, 0, 1 }
  uselistorder i32 %v1_aaec, { 1, 0 }
  uselistorder i32 %v3_aa94, { 1, 0 }
  uselistorder i32 %v3_aa6c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_aa64, { 1, 0, 2 }
  uselistorder i32 %v0_aa60, { 1, 0, 2 }
  uselistorder i32 %v0_aa5c, { 1, 0, 3, 2 }
  uselistorder i1 %v7_aa54, { 1, 0 }
  uselistorder i1 %v7_aa28, { 1, 0 }
  uselistorder i32 %v3_aa24, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_aa10, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_a9fc, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_a9d4, { 0, 10, 9, 8, 7, 2, 4, 3, 6, 5, 1 }
  uselistorder i32 %v6_a92c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_a910, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v1_a8c0, { 1, 2, 0 }
  uselistorder i32 %v5_a8b4, { 0, 2, 1 }
  uselistorder i32 %v5_a87c, { 0, 2, 1 }
  uselistorder i32 %v2_a840, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 37, 36, 39, 38, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 6, 4, 7, 5, 8, 9, 10, 12, 11, 14, 13, 15, 17, 16, 18, 19, 20, 22, 21, 27, 23, 24, 25, 26, 31, 28, 29, 30, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_aef0, { 1, 0 }
  uselistorder label %dec_label_pc_aed8, { 1, 0 }
  uselistorder label %dec_label_pc_ad60, { 2, 1, 0 }
  uselistorder label %dec_label_pc_acdc, { 1, 0 }
  uselistorder label %dec_label_pc_accc, { 1, 0, 2 }
  uselistorder label %bb70, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_af1c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_af1c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_af1c = load i32, i32* @r4, align 4
  %v24_af1c = load i32, i32* @fp, align 4
  %v27_af1c = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_af38 = call i32 @function_1295c(i32 %arg1, i32 4)
  %v0_af3c = load i32, i32* @r5, align 4
  store i32 %v0_af3c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_af38, i32* @sb, align 4
  %v0_af4c = load i32, i32* @r4, align 4
  store i32 %v0_af4c, i32* %r0.global-to-local, align 4
  %v5_af50 = inttoptr i32 %v0_af3c to i32*
  %v6_af50 = call i32 @function_8570(i32 %v0_af4c, i32* %v5_af50, i32 2, i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_af68 = load i32, i32* @r5, align 4
  store i32 %v0_af68, i32* %r1.global-to-local, align 4
  %v0_af6c = load i32, i32* @r4, align 4
  store i32 %v0_af6c, i32* %r0.global-to-local, align 4
  %v5_af70 = trunc i32 %v6_af50 to i8
  %v6_af74 = inttoptr i32 %v0_af68 to i32*
  %v7_af74 = call i32 @function_8570(i32 %v0_af6c, i32* %v6_af74, i32 3, i32 65535, i32 %v6_af50)
  %v0_af78 = load i32, i32* @r5, align 4
  store i32 %v0_af78, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_af88 = load i32, i32* @r4, align 4
  store i32 %v0_af88, i32* %r0.global-to-local, align 4
  %v5_af8c = inttoptr i32 %v0_af78 to i32*
  %v6_af8c = call i32 @function_8570(i32 %v0_af88, i32* %v5_af8c, i32 4, i32 64, i32 %v7_af74)
  %v1_af94 = urem i32 %v6_af8c, 256
  %v0_af98 = load i32, i32* @r5, align 4
  store i32 %v0_af98, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_afa4 = load i32, i32* @r4, align 4
  store i32 %v0_afa4, i32* %r0.global-to-local, align 4
  %v6_afac = inttoptr i32 %v0_af98 to i32*
  %v7_afac = call i32 @function_8570(i32 %v0_afa4, i32* %v6_afac, i32 5, i32 1, i32 %v1_af94)
  %v1_afb8 = urem i32 %v7_afac, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_afc4 = load i32, i32* @r5, align 4
  store i32 %v0_afc4, i32* %r1.global-to-local, align 4
  %v0_afc8 = load i32, i32* @r4, align 4
  store i32 %v0_afc8, i32* %r0.global-to-local, align 4
  %v5_afd0 = inttoptr i32 %v0_afc4 to i32*
  %v6_afd0 = call i32 @function_8570(i32 %v0_afc8, i32* %v5_afd0, i32 6, i32 65535, i32 %v1_afb8)
  %v0_afd8 = load i32, i32* @r5, align 4
  store i32 %v0_afd8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_afd0, i32* %fp.global-to-local, align 4
  %v0_afe8 = load i32, i32* @r4, align 4
  store i32 %v0_afe8, i32* %r0.global-to-local, align 4
  %v5_afec = inttoptr i32 %v0_afd8 to i32*
  %v6_afec = call i32 @function_8570(i32 %v0_afe8, i32* %v5_afec, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_aff4 = load i32, i32* @r5, align 4
  store i32 %v0_aff4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v6_afec, i32* @r6, align 4
  %v0_b004 = load i32, i32* @r4, align 4
  store i32 %v0_b004, i32* %r0.global-to-local, align 4
  %v5_b008 = inttoptr i32 %v0_aff4 to i32*
  %v6_b008 = call i32 @function_8570(i32 %v0_b004, i32* %v5_b008, i32 17, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b00c = load i32, i32* @r5, align 4
  store i32 %v0_b00c, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b01c = load i32, i32* @r4, align 4
  store i32 %v0_b01c, i32* %r0.global-to-local, align 4
  %v5_b020 = inttoptr i32 %v0_b00c to i32*
  %v6_b020 = call i32 @function_8570(i32 %v0_b01c, i32* %v5_b020, i32 18, i32 0, i32 %v6_b008)
  %v0_b024 = load i32, i32* @r5, align 4
  store i32 %v0_b024, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b034 = load i32, i32* @r4, align 4
  store i32 %v0_b034, i32* %r0.global-to-local, align 4
  %v5_b038 = inttoptr i32 %v0_b024 to i32*
  %v6_b038 = call i32 @function_8570(i32 %v0_b034, i32* %v5_b038, i32 11, i32 0, i32 %v6_b020)
  %v0_b03c = load i32, i32* @r5, align 4
  store i32 %v0_b03c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b04c = load i32, i32* @r4, align 4
  store i32 %v0_b04c, i32* %r0.global-to-local, align 4
  %v5_b050 = inttoptr i32 %v0_b03c to i32*
  %v6_b050 = call i32 @function_8570(i32 %v0_b04c, i32* %v5_b050, i32 12, i32 0, i32 %v6_b038)
  %v0_b054 = load i32, i32* @r5, align 4
  store i32 %v0_b054, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b064 = load i32, i32* @r4, align 4
  store i32 %v0_b064, i32* %r0.global-to-local, align 4
  %v5_b068 = inttoptr i32 %v0_b054 to i32*
  %v6_b068 = call i32 @function_8570(i32 %v0_b064, i32* %v5_b068, i32 13, i32 0, i32 %v6_b050)
  %v0_b06c = load i32, i32* @r5, align 4
  store i32 %v0_b06c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b07c = load i32, i32* @r4, align 4
  store i32 %v0_b07c, i32* %r0.global-to-local, align 4
  %v5_b080 = inttoptr i32 %v0_b06c to i32*
  %v6_b080 = call i32 @function_8570(i32 %v0_b07c, i32* %v5_b080, i32 14, i32 0, i32 %v6_b068)
  %v0_b084 = load i32, i32* @r5, align 4
  store i32 %v0_b084, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b094 = load i32, i32* @r4, align 4
  store i32 %v0_b094, i32* %r0.global-to-local, align 4
  %v5_b098 = inttoptr i32 %v0_b084 to i32*
  %v6_b098 = call i32 @function_8570(i32 %v0_b094, i32* %v5_b098, i32 15, i32 1, i32 %v6_b080)
  %v0_b09c = load i32, i32* @r5, align 4
  store i32 %v0_b09c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b0ac = load i32, i32* @r4, align 4
  store i32 %v0_b0ac, i32* %r0.global-to-local, align 4
  %v5_b0b0 = inttoptr i32 %v0_b09c to i32*
  %v6_b0b0 = call i32 @function_8570(i32 %v0_b0ac, i32* %v5_b0b0, i32 16, i32 0, i32 %v6_b098)
  %v2_b0bc = load i32, i32* @global_var_212d8.46, align 4
  store i32 %v2_b0bc, i32* %r3.global-to-local, align 4
  %v0_b0c0 = load i32, i32* @r5, align 4
  store i32 %v0_b0c0, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_b0c8 = load i32, i32* @r4, align 4
  store i32 %v0_b0c8, i32* %r0.global-to-local, align 4
  %v5_b0cc = inttoptr i32 %v0_b0c0 to i32*
  %v6_b0cc = call i32 @function_8504(i32 %v0_b0c8, i32* %v5_b0cc, i32 25, i32 %v2_b0bc, i32 %v6_b0b0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b0e0 = call i32 @function_11df4(i32 2, i32 3, i32 6)
  store i32 %v3_b0e0, i32* %r0.global-to-local, align 4
  %v7_b0e4 = icmp eq i32 %v3_b0e0, -1
  store i1 %v7_b0e4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b0e0, i32* @sl, align 4
  br i1 %v7_b0e4, label %dec_label_pc_b5b8, label %dec_label_pc_b0f0

dec_label_pc_b0f0:                                ; preds = %dec_label_pc_af1c
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b0f8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b0f8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_b10c = call i32 @function_11db0(i32 %v3_b0e0, i32 0, i32 3, i32 %v6_b0f8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_b10c, i32* %r0.global-to-local, align 4
  %v7_b110 = icmp eq i32 %v5_b10c, -1
  store i1 %v7_b110, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b110, label %dec_label_pc_b5b0, label %dec_label_pc_b118

dec_label_pc_b118:                                ; preds = %dec_label_pc_b0f0
  %v3_b120 = mul i32 %v7_af74, 65536
  store i32 %v3_b120, i32* %r0.global-to-local, align 4
  %v0_b124 = load i32, i32* %fp.global-to-local, align 4
  %v3_b124 = mul i32 %v0_b124, 65536
  store i32 %v3_b124, i32* %r4.global-to-local, align 4
  %v0_b128 = load i32, i32* @r6, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 %v6_b038, i32* %r2.global-to-local, align 4
  %v3_b134 = urem i32 %v7_af74, 65536
  store i32 %v3_b134, i32* %r3.global-to-local, align 4
  %v3_b138 = urem i32 %v0_b124, 65536
  %v3_b13c = urem i32 %v0_b128, 65536
  store i32 %v3_b13c, i32* %r1.global-to-local, align 4
  %v0_b140 = load i32, i32* @r7, align 4
  %v2_b140 = icmp eq i32 %v0_b140, 0
  store i1 %v2_b140, i1* %cpsr_z.global-to-local, align 1
  %v1_b150 = urem i32 %v6_b038, 256
  store i32 %v1_b150, i32* @fp, align 4
  br i1 %v2_b140, label %dec_label_pc_b3a4.preheader, label %dec_label_pc_b158

dec_label_pc_b158:                                ; preds = %dec_label_pc_b118
  %tmp52 = mul i32 %v6_b008, 256
  %v3_b170 = and i32 %tmp52, 65280
  %tmp53 = udiv i32 %v7_af74, 256
  %v3_b174 = urem i32 %tmp53, 256
  %tmp54 = udiv i32 %v6_b008, 256
  %v4_b17c = urem i32 %tmp54, 256
  %v5_b17c = or i32 %v4_b17c, %v3_b170
  store i32 %v5_b17c, i32* @lr, align 4
  %v1_b178 = mul i32 %v7_af74, 256
  %v4_b180 = and i32 %v1_b178, 65280
  %v5_b180 = or i32 %v4_b180, %v3_b174
  %tmp55 = mul i32 %v0_b124, 256
  %v3_b18c = and i32 %tmp55, 65280
  %tmp56 = mul i32 %v0_b128, 256
  %v3_b190 = and i32 %tmp56, 65280
  %v1_b194 = urem i32 %v6_b038, 2
  %v1_b198 = urem i32 %v6_b050, 2
  %tmp57 = udiv i32 %v0_b124, 256
  %v4_b19c = urem i32 %tmp57, 256
  %v5_b19c = or i32 %v4_b19c, %v3_b18c
  store i32 %v5_b19c, i32* @r6, align 4
  %tmp58 = udiv i32 %v0_b128, 256
  %v4_b1a0 = urem i32 %tmp58, 256
  %v5_b1a0 = or i32 %v4_b1a0, %v3_b190
  store i32 %v5_b1a0, i32* @r5, align 4
  %v1_b1bc = urem i32 %v6_b068, 2
  store i32 %v1_b1bc, i32* %r2.global-to-local, align 4
  %v1_b1c0 = urem i32 %v6_b080, 2
  store i32 %v1_b1c0, i32* %r3.global-to-local, align 4
  %v1_b1c4 = urem i32 %v6_b098, 2
  store i32 %v1_b1c4, i32* %r0.global-to-local, align 4
  %v1_b1c8 = urem i32 %v6_b0b0, 2
  store i32 %v1_b1c8, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext = mul nuw i32 %v5_b180, 65536
  %v4_b250 = sdiv i32 %sext, 65536
  %tmp = sub nsw i32 0, %v1_b198
  %v4_b2b4 = and i32 %tmp, 16
  %tmp62 = sub nsw i32 0, %v1_b1bc
  %v4_b2c8 = and i32 %tmp62, 8
  %tmp63 = sub nsw i32 0, %v1_b1c0
  %v4_b2e0 = and i32 %tmp63, 4
  %tmp64 = sub nsw i32 0, %v1_b1c4
  %v3_b2f4 = and i32 %tmp64, 2
  %v1_b244 = trunc i32 %v6_af8c to i8
  br label %dec_label_pc_b1e8

dec_label_pc_b1e8:                                ; preds = %bb61, %dec_label_pc_b158
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_b1f0 = call i32 @function_1295c(i32 128, i32 1)
  store i32 %v2_b1f0, i32* %r0.global-to-local, align 4
  %v3_b1f4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b1f4, i32* %r2.global-to-local, align 4
  %v1_b1f8 = load i32, i32* @sb, align 4
  %v2_b1f8 = load i32, i32* @r4, align 4
  %v5_b1f8 = mul i32 %v2_b1f8, 4
  %v6_b1f8 = add i32 %v5_b1f8, %v1_b1f8
  %v7_b1f8 = inttoptr i32 %v6_b1f8 to i32*
  store i32 %v2_b1f0, i32* %v7_b1f8, align 4
  %v0_b1fc = load i32, i32* %r2.global-to-local, align 4
  %v3_b1fc = mul i32 %v0_b1fc, 32
  store i32 %v3_b1fc, i32* %r3.global-to-local, align 4
  %v0_b200 = load i32, i32* @sb, align 4
  %v4_b200 = mul i32 %v0_b1fc, 4
  %v5_b200 = add i32 %v0_b200, %v4_b200
  %v6_b200 = inttoptr i32 %v5_b200 to i32*
  %v7_b200 = load i32, i32* %v6_b200, align 4
  store i32 %v7_b200, i32* %r4.global-to-local, align 4
  %v5_b204 = mul i32 %v0_b1fc, 24
  store i32 %v5_b204, i32* %r3.global-to-local, align 4
  %v1_b208 = load i32, i32* @r8, align 4
  %v2_b208 = add i32 %v1_b208, %v5_b204
  store i32 %v2_b208, i32* %r0.global-to-local, align 4
  %v1_b20c = inttoptr i32 %v7_b200 to i8*
  %v2_b20c = load i8, i8* %v1_b20c, align 1
  %tmp65 = urem i8 %v2_b20c, 16
  %v1_b210 = zext i8 %tmp65 to i32
  %v1_b214 = or i32 %v1_b210, 64
  store i32 %v1_b214, i32* %r3.global-to-local, align 4
  %v1_b218 = trunc i32 %v1_b214 to i8
  store i8 %v1_b218, i8* %v1_b20c, align 1
  %v0_b21c = load i32, i32* %r4.global-to-local, align 4
  %v1_b21c = inttoptr i32 %v0_b21c to i8*
  %v2_b21c = load i8, i8* %v1_b21c, align 1
  %v1_b220 = and i8 %v2_b21c, -16
  %v1_b224 = or i8 %v1_b220, 5
  store i32 %v1_afb8, i32* %r3.global-to-local, align 4
  store i8 %v1_b224, i8* %v1_b21c, align 1
  %v2_b234 = load i32, i32* %r4.global-to-local, align 4
  %v3_b234 = add i32 %v2_b234, 1
  %v4_b234 = inttoptr i32 %v3_b234 to i8*
  store i8 %v5_af70, i8* %v4_b234, align 1
  store i32 %v1_af94, i32* %r2.global-to-local, align 4
  %v0_b23c = load i32, i32* %r3.global-to-local, align 4
  %v2_b23c = icmp eq i32 %v0_b23c, 0
  store i1 %v2_b23c, i1* %cpsr_z.global-to-local, align 1
  store i32 15360, i32* %r3.global-to-local, align 4
  %v2_b244 = load i32, i32* %r4.global-to-local, align 4
  %v3_b244 = add i32 %v2_b244, 8
  %v4_b244 = inttoptr i32 %v3_b244 to i8*
  store i8 %v1_b244, i8* %v4_b244, align 1
  %v0_b248 = load i32, i32* %r3.global-to-local, align 4
  %v1_b248 = trunc i32 %v0_b248 to i16
  %v2_b248 = load i32, i32* %r4.global-to-local, align 4
  %v3_b248 = add i32 %v2_b248, 2
  %v4_b248 = inttoptr i32 %v3_b248 to i16*
  store i16 %v1_b248, i16* %v4_b248, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 %v4_b250, i32* %r1.global-to-local, align 4
  %v0_b254 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b254, label %bb59, label %bb

bb:                                               ; preds = %dec_label_pc_b1e8
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_b1e8, %bb
  %v2_b258 = load i32, i32* %r4.global-to-local, align 4
  %v3_b258 = add i32 %v2_b258, 9
  %v4_b258 = inttoptr i32 %v3_b258 to i8*
  store i8 6, i8* %v4_b258, align 1
  %v0_b25c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b25c, label %bb61, label %bb60

bb60:                                             ; preds = %bb59
  %v1_b25c = load i32, i32* %r2.global-to-local, align 4
  %v2_b25c = trunc i32 %v1_b25c to i16
  %v3_b25c = load i32, i32* %r4.global-to-local, align 4
  %v4_b25c = add i32 %v3_b25c, 6
  %v5_b25c = inttoptr i32 %v4_b25c to i16*
  store i16 %v2_b25c, i16* %v5_b25c, align 2
  br label %bb61

bb61:                                             ; preds = %bb59, %bb60
  store i32 %v6_b0cc, i32* %r2.global-to-local, align 4
  %v1_b264 = load i32, i32* %r4.global-to-local, align 4
  %v2_b264 = add i32 %v1_b264, 12
  %v3_b264 = inttoptr i32 %v2_b264 to i32*
  store i32 %v6_b0cc, i32* %v3_b264, align 4
  %v0_b268 = load i32, i32* %r0.global-to-local, align 4
  %v1_b268 = add i32 %v0_b268, 16
  %v2_b268 = inttoptr i32 %v1_b268 to i32*
  %v3_b268 = load i32, i32* %v2_b268, align 4
  store i32 %v3_b268, i32* %r3.global-to-local, align 4
  %v0_b26c = load i32, i32* %r1.global-to-local, align 4
  %v1_b26c = trunc i32 %v0_b26c to i16
  %v2_b26c = load i32, i32* %r4.global-to-local, align 4
  %v3_b26c = add i32 %v2_b26c, 4
  %v4_b26c = inttoptr i32 %v3_b26c to i16*
  store i16 %v1_b26c, i16* %v4_b26c, align 2
  %v0_b270 = load i32, i32* %r3.global-to-local, align 4
  %v1_b270 = load i32, i32* %r4.global-to-local, align 4
  %v2_b270 = add i32 %v1_b270, 16
  %v3_b270 = inttoptr i32 %v2_b270 to i32*
  store i32 %v0_b270, i32* %v3_b270, align 4
  %v0_b274 = load i32, i32* @r6, align 4
  %v1_b274 = trunc i32 %v0_b274 to i16
  %v2_b274 = load i32, i32* %r4.global-to-local, align 4
  %v3_b274 = add i32 %v2_b274, 20
  %v4_b274 = inttoptr i32 %v3_b274 to i16*
  store i16 %v1_b274, i16* %v4_b274, align 2
  %v0_b278 = load i32, i32* %r4.global-to-local, align 4
  %v1_b278 = add i32 %v0_b278, 20
  store i32 %v1_b278, i32* %r1.global-to-local, align 4
  %v1_b27c = add i32 %v0_b278, 32
  %v2_b27c = inttoptr i32 %v1_b27c to i8*
  %v3_b27c = load i8, i8* %v2_b27c, align 1
  %v4_b27c = zext i8 %v3_b27c to i32
  store i32 %v4_b27c, i32* %r3.global-to-local, align 4
  %v1_b280 = add i32 %v0_b278, 33
  %v2_b280 = inttoptr i32 %v1_b280 to i8*
  %v3_b280 = load i8, i8* %v2_b280, align 1
  %v4_b280 = zext i8 %v3_b280 to i32
  store i32 %v1_b194, i32* %r0.global-to-local, align 4
  %v1_b288 = urem i8 %v3_b27c, 16
  %v1_b28c = or i8 %v1_b288, -96
  %v1_b290 = and i32 %v4_b280, 223
  store i32 %v1_b290, i32* %r2.global-to-local, align 4
  store i8 %v1_b28c, i8* %v2_b27c, align 1
  %v0_b298 = load i32, i32* %r2.global-to-local, align 4
  %v1_b298 = load i32, i32* %r0.global-to-local, align 4
  %v4_b298 = mul i32 %v1_b298, 32
  %v5_b298 = or i32 %v4_b298, %v0_b298
  store i32 %v5_b298, i32* %r2.global-to-local, align 4
  store i32 %v5_b17c, i32* %r3.global-to-local, align 4
  %v1_b2a0 = trunc i32 %v5_b298 to i8
  %v2_b2a0 = load i32, i32* %r1.global-to-local, align 4
  %v3_b2a0 = add i32 %v2_b2a0, 13
  %v4_b2a0 = inttoptr i32 %v3_b2a0 to i8*
  store i8 %v1_b2a0, i8* %v4_b2a0, align 1
  %v0_b2a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b2a4 = load i32, i32* %r1.global-to-local, align 4
  %v2_b2a4 = add i32 %v1_b2a4, 4
  %v3_b2a4 = inttoptr i32 %v2_b2a4 to i32*
  store i32 %v0_b2a4, i32* %v3_b2a4, align 4
  %v0_b2a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b2a8 = add i32 %v0_b2a8, 13
  %v2_b2a8 = inttoptr i32 %v1_b2a8 to i8*
  %v3_b2a8 = load i8, i8* %v2_b2a8, align 1
  %v4_b2a8 = zext i8 %v3_b2a8 to i32
  store i32 %v1_b198, i32* %r0.global-to-local, align 4
  %v1_b2b0 = and i32 %v4_b2a8, 239
  %v5_b2b4 = or i32 %v1_b2b0, %v4_b2b4
  store i32 %v5_b2b4, i32* %r3.global-to-local, align 4
  %v1_b2b8 = trunc i32 %v5_b2b4 to i8
  store i8 %v1_b2b8, i8* %v2_b2a8, align 1
  %v0_b2bc = load i32, i32* %r1.global-to-local, align 4
  %v1_b2bc = add i32 %v0_b2bc, 13
  %v2_b2bc = inttoptr i32 %v1_b2bc to i8*
  %v3_b2bc = load i8, i8* %v2_b2bc, align 1
  %v4_b2bc = zext i8 %v3_b2bc to i32
  store i32 %v1_b1bc, i32* %r3.global-to-local, align 4
  %v1_b2c4 = and i32 %v4_b2bc, 247
  %v5_b2c8 = or i32 %v1_b2c4, %v4_b2c8
  store i32 %v5_b2c8, i32* %r2.global-to-local, align 4
  %v0_b2cc = load i32, i32* @r5, align 4
  %v1_b2cc = trunc i32 %v0_b2cc to i16
  %v3_b2cc = add i32 %v0_b2bc, 2
  %v4_b2cc = inttoptr i32 %v3_b2cc to i16*
  store i16 %v1_b2cc, i16* %v4_b2cc, align 2
  %v0_b2d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b2d0 = trunc i32 %v0_b2d0 to i8
  %v2_b2d0 = load i32, i32* %r1.global-to-local, align 4
  %v3_b2d0 = add i32 %v2_b2d0, 13
  %v4_b2d0 = inttoptr i32 %v3_b2d0 to i8*
  store i8 %v1_b2d0, i8* %v4_b2d0, align 1
  %v0_b2d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_b2d4 = add i32 %v0_b2d4, 13
  %v2_b2d4 = inttoptr i32 %v1_b2d4 to i8*
  %v3_b2d4 = load i8, i8* %v2_b2d4, align 1
  %v4_b2d4 = zext i8 %v3_b2d4 to i32
  store i32 %v1_b1c0, i32* %r0.global-to-local, align 4
  %v1_b2dc = and i32 %v4_b2d4, 251
  %v5_b2e0 = or i32 %v1_b2dc, %v4_b2e0
  store i32 %v5_b2e0, i32* %r3.global-to-local, align 4
  %v1_b2e4 = trunc i32 %v5_b2e0 to i8
  store i8 %v1_b2e4, i8* %v2_b2d4, align 1
  %v0_b2e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b2e8 = add i32 %v0_b2e8, 13
  %v2_b2e8 = inttoptr i32 %v1_b2e8 to i8*
  %v3_b2e8 = load i8, i8* %v2_b2e8, align 1
  %v4_b2e8 = zext i8 %v3_b2e8 to i32
  store i32 %v1_b1c4, i32* %r3.global-to-local, align 4
  %v1_b2f0 = and i32 %v4_b2e8, 253
  %v4_b2f4 = or i32 %v1_b2f0, %v3_b2f4
  store i32 %v4_b2f4, i32* %r2.global-to-local, align 4
  %v1_b2f8 = trunc i32 %v4_b2f4 to i8
  store i8 %v1_b2f8, i8* %v2_b2e8, align 1
  %v0_b2fc = load i32, i32* %r1.global-to-local, align 4
  %v1_b2fc = add i32 %v0_b2fc, 13
  %v2_b2fc = inttoptr i32 %v1_b2fc to i8*
  %v3_b2fc = load i8, i8* %v2_b2fc, align 1
  %v4_b2fc = zext i8 %v3_b2fc to i32
  store i32 %v1_b1c8, i32* %r0.global-to-local, align 4
  %v1_b304 = and i32 %v4_b2fc, 254
  %v2_b308 = or i32 %v1_b304, %v1_b1c8
  store i32 %v2_b308, i32* %r3.global-to-local, align 4
  %v1_b30c = trunc i32 %v2_b308 to i8
  store i8 %v1_b30c, i8* %v2_b2fc, align 1
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v2_b318 = load i32, i32* %r4.global-to-local, align 4
  %v3_b318 = add i32 %v2_b318, 40
  %v4_b318 = inttoptr i32 %v3_b318 to i8*
  store i8 2, i8* %v4_b318, align 1
  %v0_b31c = load i32, i32* %r2.global-to-local, align 4
  %v1_b31c = trunc i32 %v0_b31c to i8
  %v2_b31c = load i32, i32* %r4.global-to-local, align 4
  %v3_b31c = add i32 %v2_b31c, 41
  %v4_b31c = inttoptr i32 %v3_b31c to i8*
  store i8 %v1_b31c, i8* %v4_b31c, align 1
  %v0_b320 = call i32 @function_e29c()
  %v1_b324 = urem i32 %v0_b320, 16
  %v1_b328 = or i32 %v1_b324, 1392
  %tmp66 = mul nuw nsw i32 %v1_b328, 256
  %v3_b334 = add nuw nsw i32 %tmp66, 2048
  %v5_b33c = or i32 %v3_b334, 5
  %v1_b340 = trunc i32 %v5_b33c to i16
  %v2_b340 = load i32, i32* %r4.global-to-local, align 4
  %v3_b340 = add i32 %v2_b340, 42
  %v4_b340 = inttoptr i32 %v3_b340 to i16*
  store i16 %v1_b340, i16* %v4_b340, align 2
  %v2_b348 = load i32, i32* %r4.global-to-local, align 4
  %v3_b348 = add i32 %v2_b348, 44
  %v4_b348 = inttoptr i32 %v3_b348 to i8*
  store i8 4, i8* %v4_b348, align 1
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_b358 = load i32, i32* %r4.global-to-local, align 4
  %v3_b358 = add i32 %v2_b358, 46
  %v4_b358 = inttoptr i32 %v3_b358 to i8*
  store i8 8, i8* %v4_b358, align 1
  %v0_b35c = load i32, i32* %r2.global-to-local, align 4
  %v1_b35c = trunc i32 %v0_b35c to i8
  %v2_b35c = load i32, i32* %r4.global-to-local, align 4
  %v3_b35c = add i32 %v2_b35c, 47
  %v4_b35c = inttoptr i32 %v3_b35c to i8*
  store i8 %v1_b35c, i8* %v4_b35c, align 1
  %v0_b360 = load i32, i32* %r0.global-to-local, align 4
  %v1_b360 = trunc i32 %v0_b360 to i8
  %v2_b360 = load i32, i32* %r4.global-to-local, align 4
  %v3_b360 = add i32 %v2_b360, 45
  %v4_b360 = inttoptr i32 %v3_b360 to i8*
  store i8 %v1_b360, i8* %v4_b360, align 1
  %v0_b364 = call i32 @function_e29c()
  store i32 %v0_b364, i32* %r0.global-to-local, align 4
  %v2_b36c = load i32, i32* %r4.global-to-local, align 4
  %v3_b36c = add i32 %v2_b36c, 59
  %v4_b36c = inttoptr i32 %v3_b36c to i8*
  store i8 6, i8* %v4_b36c, align 1
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v1_b37c = load i32, i32* %r4.global-to-local, align 4
  %v2_b37c = add i32 %v1_b37c, 48
  %v3_b37c = inttoptr i32 %v2_b37c to i32*
  store i32 %v0_b364, i32* %v3_b37c, align 4
  %v0_b380 = load i32, i32* %r3.global-to-local, align 4
  %v1_b380 = load i32, i32* %r4.global-to-local, align 4
  %v2_b380 = add i32 %v1_b380, 52
  %v3_b380 = inttoptr i32 %v2_b380 to i32*
  store i32 %v0_b380, i32* %v3_b380, align 4
  %v0_b384 = load i32, i32* %r2.global-to-local, align 4
  %v1_b384 = trunc i32 %v0_b384 to i8
  %v2_b384 = load i32, i32* %r4.global-to-local, align 4
  %v3_b384 = add i32 %v2_b384, 56
  %v4_b384 = inttoptr i32 %v3_b384 to i8*
  store i8 %v1_b384, i8* %v4_b384, align 1
  %v0_b388 = load i32, i32* %r1.global-to-local, align 4
  %v1_b388 = trunc i32 %v0_b388 to i8
  %v2_b388 = load i32, i32* %r4.global-to-local, align 4
  %v3_b388 = add i32 %v2_b388, 58
  %v4_b388 = inttoptr i32 %v3_b388 to i8*
  store i8 %v1_b388, i8* %v4_b388, align 1
  %v0_b38c = load i32, i32* %r1.global-to-local, align 4
  %v1_b38c = trunc i32 %v0_b38c to i8
  %v2_b38c = load i32, i32* %r4.global-to-local, align 4
  %v3_b38c = add i32 %v2_b38c, 57
  %v4_b38c = inttoptr i32 %v3_b38c to i8*
  store i8 %v1_b38c, i8* %v4_b38c, align 1
  %v3_b390 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b390, i32* %r3.global-to-local, align 4
  %v1_b394 = load i32, i32* %r2.global-to-local, align 4
  %v2_b394 = add i32 %v1_b394, %v3_b390
  store i32 %v2_b394, i32* @r4, align 4
  %v1_b398 = load i32, i32* @r7, align 4
  %v9_b398 = icmp eq i32 %v2_b394, %v1_b398
  store i1 %v9_b398, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_b394, i32* %stack_var_-44, align 4
  %v5_b3a0 = icmp slt i32 %v2_b394, %v1_b398
  br i1 %v5_b3a0, label %dec_label_pc_b1e8, label %dec_label_pc_b3a4.preheader

dec_label_pc_b3a4.preheader:                      ; preds = %bb61, %dec_label_pc_b118
  %v0_b3a86 = phi i32 [ 0, %dec_label_pc_b118 ], [ %v1_b398, %bb61 ]
  %v3_b520 = icmp eq i32 %v6_b0cc, -1
  %v8_b520 = icmp eq i32 %v6_b0cc, -1
  %v3_b3f0 = icmp eq i32 %v3_b134, 65535
  br label %dec_label_pc_b3a4

dec_label_pc_b3a4:                                ; preds = %dec_label_pc_b3a4, %dec_label_pc_b4b4, %dec_label_pc_b3a4.preheader
  %v0_b3a8 = phi i32 [ %v0_b3a86, %dec_label_pc_b3a4.preheader ], [ 0, %dec_label_pc_b4b4 ], [ 0, %dec_label_pc_b3a4 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b3a8 = icmp eq i32 %v0_b3a8, 0
  store i1 %v2_b3a8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b3a8, label %dec_label_pc_b3a4, label %dec_label_pc_b3b4

dec_label_pc_b3b4:                                ; preds = %dec_label_pc_b3a4, %dec_label_pc_b4b4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b3b8

dec_label_pc_b3b8:                                ; preds = %dec_label_pc_b430, %dec_label_pc_b3b4
  %v1_b3c8 = phi i32 [ %v1_b4a4, %dec_label_pc_b430 ], [ 0, %dec_label_pc_b3b4 ]
  %v5_b3bc = mul i32 %v1_b3c8, 24
  %v1_b3c0 = load i32, i32* @r8, align 4
  %v2_b3c0 = add i32 %v1_b3c0, %v5_b3bc
  store i32 %v2_b3c0, i32* %r3.global-to-local, align 4
  %v1_b3c4 = add i32 %v2_b3c0, 20
  %v2_b3c4 = inttoptr i32 %v1_b3c4 to i8*
  %v3_b3c4 = load i8, i8* %v2_b3c4, align 1
  %v4_b3c4 = zext i8 %v3_b3c4 to i32
  store i32 %v4_b3c4, i32* %r2.global-to-local, align 4
  %v0_b3c8 = load i32, i32* @sb, align 4
  %v4_b3c8 = mul i32 %v1_b3c8, 4
  %v5_b3c8 = add i32 %v0_b3c8, %v4_b3c8
  %v6_b3c8 = inttoptr i32 %v5_b3c8 to i32*
  %v7_b3c8 = load i32, i32* %v6_b3c8, align 4
  store i32 %v7_b3c8, i32* @r5, align 4
  %v7_b3cc = icmp eq i8 %v3_b3c4, 31
  store i1 %v7_b3cc, i1* %cpsr_z.global-to-local, align 1
  %v1_b3d0 = add i32 %v7_b3c8, 20
  store i32 %v1_b3d0, i32* @r6, align 4
  %tmp67 = icmp ult i8 %v3_b3c4, 32
  br i1 %tmp67, label %dec_label_pc_b4c8, label %dec_label_pc_b3d8

dec_label_pc_b3d8:                                ; preds = %dec_label_pc_b3b8
  store i32 %v6_b0cc, i32* %r3.global-to-local, align 4
  store i1 %v8_b520, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_b520, label %dec_label_pc_b528, label %dec_label_pc_b3e4

dec_label_pc_b3e4:                                ; preds = %dec_label_pc_b4c8, %dec_label_pc_b3d8
  store i32 %v3_b134, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b3f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b3f0, label %dec_label_pc_b544, label %dec_label_pc_b3f8

dec_label_pc_b3f8:                                ; preds = %dec_label_pc_b528, %dec_label_pc_b3e4
  %v1_b3fc = phi i32 [ %v1_b538, %dec_label_pc_b528 ], [ 65535, %dec_label_pc_b3e4 ]
  store i32 %v3_b138, i32* %r1.global-to-local, align 4
  %v9_b3fc = icmp eq i32 %v3_b138, %v1_b3fc
  store i1 %v9_b3fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b3fc, label %dec_label_pc_b558, label %dec_label_pc_b404

dec_label_pc_b404:                                ; preds = %dec_label_pc_b544.dec_label_pc_b404_crit_edge, %dec_label_pc_b3f8
  %v1_b408 = phi i32 [ %v1_b408.pre, %dec_label_pc_b544.dec_label_pc_b404_crit_edge ], [ %v1_b3fc, %dec_label_pc_b3f8 ]
  store i32 %v3_b13c, i32* %r2.global-to-local, align 4
  %v9_b408 = icmp eq i32 %v3_b13c, %v1_b408
  store i1 %v9_b408, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b408, label %dec_label_pc_b56c, label %dec_label_pc_b410

dec_label_pc_b410:                                ; preds = %dec_label_pc_b558.dec_label_pc_b410_crit_edge, %dec_label_pc_b404
  %v1_b414 = phi i32 [ %v1_b414.pre, %dec_label_pc_b558.dec_label_pc_b410_crit_edge ], [ %v1_b408, %dec_label_pc_b404 ]
  store i32 %v6_b008, i32* %r3.global-to-local, align 4
  %v9_b414 = icmp eq i32 %v6_b008, %v1_b414
  store i1 %v9_b414, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b414, label %dec_label_pc_b580, label %dec_label_pc_b41c

dec_label_pc_b41c:                                ; preds = %dec_label_pc_b56c.dec_label_pc_b41c_crit_edge, %dec_label_pc_b410
  %v1_b420 = phi i32 [ %v1_b420.pre, %dec_label_pc_b56c.dec_label_pc_b41c_crit_edge ], [ %v1_b414, %dec_label_pc_b410 ]
  store i32 %v6_b020, i32* %r0.global-to-local, align 4
  %v9_b420 = icmp eq i32 %v6_b020, %v1_b420
  store i1 %v9_b420, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b420, label %dec_label_pc_b594, label %dec_label_pc_b428

dec_label_pc_b428:                                ; preds = %dec_label_pc_b580, %dec_label_pc_b41c
  %v0_b428 = load i32, i32* @fp, align 4
  %v2_b428 = icmp eq i32 %v0_b428, 0
  store i1 %v2_b428, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b428, label %dec_label_pc_b430, label %dec_label_pc_b5a4

dec_label_pc_b430:                                ; preds = %dec_label_pc_b428, %dec_label_pc_b594, %dec_label_pc_b5a4
  %v2_b434 = load i32, i32* @r5, align 4
  %v3_b434 = add i32 %v2_b434, 10
  %v4_b434 = inttoptr i32 %v3_b434 to i16*
  store i16 0, i16* %v4_b434, align 2
  %v0_b438 = load i32, i32* @r5, align 4
  store i32 %v0_b438, i32* @r0, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  %v2_b440 = call i32 @function_c848(i32 %v0_b438, i32 20)
  %v3_b440 = trunc i32 %v2_b440 to i16
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b448 = load i32, i32* @r5, align 4
  %v4_b448 = add i32 %v3_b448, 10
  %v5_b448 = inttoptr i32 %v4_b448 to i16*
  store i16 %v3_b440, i16* %v5_b448, align 2
  %v0_b44c = load i32, i32* @r6, align 4
  store i32 %v0_b44c, i32* @r1, align 4
  %v0_b450 = load i32, i32* %r2.global-to-local, align 4
  %v1_b450 = trunc i32 %v0_b450 to i16
  %v3_b450 = add i32 %v0_b44c, 16
  %v4_b450 = inttoptr i32 %v3_b450 to i16*
  store i16 %v1_b450, i16* %v4_b450, align 2
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v0_b45c = load i32, i32* @r5, align 4
  store i32 %v0_b45c, i32* %r0.global-to-local, align 4
  %v4_b460 = call i32 @function_c898(i32 %v0_b45c, i32 %v0_b44c, i32 10240, i32 40)
  %v5_b460 = trunc i32 %v4_b460 to i16
  store i32 %v4_b460, i32* %r0.global-to-local, align 4
  %v3_b464 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b464, i32* %r3.global-to-local, align 4
  %v3_b468 = mul i32 %v3_b464, 32
  store i32 %v3_b468, i32* %lr.global-to-local, align 4
  %v3_b46c = load i32, i32* @r6, align 4
  %v4_b46c = add i32 %v3_b46c, 16
  %v5_b46c = inttoptr i32 %v4_b46c to i16*
  store i16 %v5_b460, i16* %v5_b46c, align 2
  %v0_b470 = load i32, i32* %lr.global-to-local, align 4
  %v1_b470 = load i32, i32* %r3.global-to-local, align 4
  %tmp68 = mul i32 %v1_b470, -8
  %v5_b470 = add i32 %v0_b470, %tmp68
  store i32 %v5_b470, i32* %lr.global-to-local, align 4
  %v0_b474 = load i32, i32* @r6, align 4
  %v1_b474 = add i32 %v0_b474, 2
  %v2_b474 = inttoptr i32 %v1_b474 to i16*
  %v3_b474 = load i16, i16* %v2_b474, align 2
  %v1_b478 = load i32, i32* @r8, align 4
  %v2_b478 = add i32 %v1_b478, %v5_b470
  store i32 %v2_b478, i32* @lr, align 4
  %v3_b47c = add i32 %v2_b478, 2
  %v4_b47c = inttoptr i32 %v3_b47c to i16*
  store i16 %v3_b474, i16* %v4_b47c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b488 = load i32, i32* @r5, align 4
  store i32 %v0_b488, i32* %r1.global-to-local, align 4
  %v0_b48c = load i32, i32* @sl, align 4
  store i32 %v0_b48c, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  %v0_b494 = load i32, i32* @lr, align 4
  %v6_b49c = call i32 @function_11d70(i32 %v0_b48c, i32 %v0_b488, i32 60, i32 16384, i32 %v0_b494, i32 16)
  %v3_b4a0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b4a0, i32* %r3.global-to-local, align 4
  %v1_b4a4 = add i32 %v3_b4a0, 1
  store i32 %v1_b4a4, i32* %r0.global-to-local, align 4
  %v1_b4a8 = load i32, i32* @r7, align 4
  %v9_b4a8 = icmp eq i32 %v1_b4a4, %v1_b4a8
  store i1 %v9_b4a8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b4a4, i32* %stack_var_-44, align 4
  %v5_b4b0 = icmp slt i32 %v1_b4a4, %v1_b4a8
  br i1 %v5_b4b0, label %dec_label_pc_b3b8, label %dec_label_pc_b4b4

dec_label_pc_b4b4:                                ; preds = %dec_label_pc_b430
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b4b8 = icmp eq i32 %v1_b4a8, 0
  store i1 %v2_b4b8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b4b8, label %dec_label_pc_b3a4, label %dec_label_pc_b3b4

dec_label_pc_b4c8:                                ; preds = %dec_label_pc_b3b8
  %v1_b4c8 = add i32 %v2_b3c0, 16
  %v2_b4c8 = inttoptr i32 %v1_b4c8 to i32*
  %v3_b4c8 = load i32, i32* %v2_b4c8, align 4
  store i32 %v3_b4c8, i32* %r4.global-to-local, align 4
  %v0_b4cc = call i32 @function_e29c()
  store i32 %v0_b4cc, i32* %r0.global-to-local, align 4
  %v3_b4d0 = load i32, i32* %stack_var_-44, align 4
  %v5_b4d8 = mul i32 %v3_b4d0, 24
  %v0_b4dc = load i32, i32* %r4.global-to-local, align 4
  %v1_b4dc = and i32 %v0_b4dc, 16711680
  %v3_b4e0 = udiv i32 %v0_b4dc, 16777216
  %v4_b4e4 = udiv i32 %v1_b4dc, 256
  %v5_b4e4 = or i32 %v4_b4e4, %v3_b4e0
  store i32 %v5_b4e4, i32* %r2.global-to-local, align 4
  %v1_b4e8 = load i32, i32* @r8, align 4
  %v2_b4e8 = add i32 %v1_b4e8, %v5_b4d8
  store i32 %v2_b4e8, i32* %r1.global-to-local, align 4
  %v1_b4ec = and i32 %v0_b4dc, 65280
  store i32 %v1_b4ec, i32* %r3.global-to-local, align 4
  %v1_b4f0 = add i32 %v2_b4e8, 20
  %v2_b4f0 = inttoptr i32 %v1_b4f0 to i8*
  %v3_b4f0 = load i8, i8* %v2_b4f0, align 1
  %v4_b4f0 = zext i8 %v3_b4f0 to i32
  %v5_b4f8 = call i32 @llvm.bswap.i32(i32 %v0_b4dc)
  %v7_b4fc = lshr i32 %v0_b4cc, %v4_b4f0
  %v8_b4fc = add i32 %v7_b4fc, %v5_b4f8
  store i32 %v8_b4fc, i32* %r2.global-to-local, align 4
  %v1_b500 = and i32 %v8_b4fc, 16711680
  store i32 %v1_b500, i32* %r0.global-to-local, align 4
  %v1_b50c = and i32 %v8_b4fc, 65280
  store i32 %v1_b50c, i32* %r1.global-to-local, align 4
  %v5_b514 = call i32 @llvm.bswap.i32(i32 %v8_b4fc)
  %v1_b518 = load i32, i32* @r5, align 4
  %v2_b518 = add i32 %v1_b518, 16
  %v3_b518 = inttoptr i32 %v2_b518 to i32*
  store i32 %v5_b514, i32* %v3_b518, align 4
  store i32 %v6_b0cc, i32* %r3.global-to-local, align 4
  store i1 %v8_b520, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b520, label %dec_label_pc_b528, label %dec_label_pc_b3e4

dec_label_pc_b528:                                ; preds = %dec_label_pc_b4c8, %dec_label_pc_b3d8
  %v0_b528 = call i32 @function_e29c()
  store i32 65536, i32* %r4.global-to-local, align 4
  %v1_b530 = load i32, i32* @r5, align 4
  %v2_b530 = add i32 %v1_b530, 12
  %v3_b530 = inttoptr i32 %v2_b530 to i32*
  store i32 %v0_b528, i32* %v3_b530, align 4
  store i32 %v3_b134, i32* %r0.global-to-local, align 4
  %v0_b538 = load i32, i32* %r4.global-to-local, align 4
  %v1_b538 = add i32 %v0_b538, -1
  store i32 %v1_b538, i32* @r4, align 4
  %v9_b53c = icmp eq i32 %v3_b134, %v1_b538
  store i1 %v9_b53c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b53c, label %dec_label_pc_b544, label %dec_label_pc_b3f8

dec_label_pc_b544:                                ; preds = %dec_label_pc_b528, %dec_label_pc_b3e4
  %v0_b544 = call i32 @function_e29c()
  %v1_b544 = trunc i32 %v0_b544 to i16
  store i32 %v0_b544, i32* %r0.global-to-local, align 4
  store i32 %v3_b138, i32* %r1.global-to-local, align 4
  %v1_b54c = load i32, i32* @r4, align 4
  %v9_b54c = icmp eq i32 %v3_b138, %v1_b54c
  store i1 %v9_b54c, i1* %cpsr_z.global-to-local, align 1
  %v3_b550 = load i32, i32* @r5, align 4
  %v4_b550 = add i32 %v3_b550, 4
  %v5_b550 = inttoptr i32 %v4_b550 to i16*
  store i16 %v1_b544, i16* %v5_b550, align 2
  br i1 %v9_b54c, label %dec_label_pc_b558, label %dec_label_pc_b544.dec_label_pc_b404_crit_edge

dec_label_pc_b544.dec_label_pc_b404_crit_edge:    ; preds = %dec_label_pc_b544
  %v1_b408.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b404

dec_label_pc_b558:                                ; preds = %dec_label_pc_b544, %dec_label_pc_b3f8
  %v0_b558 = call i32 @function_e29c()
  %v1_b558 = trunc i32 %v0_b558 to i16
  store i32 %v0_b558, i32* %r0.global-to-local, align 4
  store i32 %v3_b13c, i32* %r2.global-to-local, align 4
  %v1_b560 = load i32, i32* @r4, align 4
  %v9_b560 = icmp eq i32 %v3_b13c, %v1_b560
  store i1 %v9_b560, i1* %cpsr_z.global-to-local, align 1
  %v3_b564 = load i32, i32* @r5, align 4
  %v4_b564 = add i32 %v3_b564, 20
  %v5_b564 = inttoptr i32 %v4_b564 to i16*
  store i16 %v1_b558, i16* %v5_b564, align 2
  br i1 %v9_b560, label %dec_label_pc_b56c, label %dec_label_pc_b558.dec_label_pc_b410_crit_edge

dec_label_pc_b558.dec_label_pc_b410_crit_edge:    ; preds = %dec_label_pc_b558
  %v1_b414.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b410

dec_label_pc_b56c:                                ; preds = %dec_label_pc_b558, %dec_label_pc_b404
  %v0_b56c = call i32 @function_e29c()
  %v1_b56c = trunc i32 %v0_b56c to i16
  store i32 %v0_b56c, i32* %r0.global-to-local, align 4
  store i32 %v6_b008, i32* %r3.global-to-local, align 4
  %v1_b574 = load i32, i32* @r4, align 4
  %v9_b574 = icmp eq i32 %v6_b008, %v1_b574
  store i1 %v9_b574, i1* %cpsr_z.global-to-local, align 1
  %v3_b578 = load i32, i32* @r6, align 4
  %v4_b578 = add i32 %v3_b578, 2
  %v5_b578 = inttoptr i32 %v4_b578 to i16*
  store i16 %v1_b56c, i16* %v5_b578, align 2
  br i1 %v9_b574, label %dec_label_pc_b580, label %dec_label_pc_b56c.dec_label_pc_b41c_crit_edge

dec_label_pc_b56c.dec_label_pc_b41c_crit_edge:    ; preds = %dec_label_pc_b56c
  %v1_b420.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b41c

dec_label_pc_b580:                                ; preds = %dec_label_pc_b56c, %dec_label_pc_b410
  %v0_b580 = call i32 @function_e29c()
  %v1_b584 = load i32, i32* @r6, align 4
  %v2_b584 = add i32 %v1_b584, 4
  %v3_b584 = inttoptr i32 %v2_b584 to i32*
  store i32 %v0_b580, i32* %v3_b584, align 4
  store i32 %v6_b020, i32* %r0.global-to-local, align 4
  %v1_b58c = load i32, i32* @r4, align 4
  %v9_b58c = icmp eq i32 %v6_b020, %v1_b58c
  store i1 %v9_b58c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b58c, label %dec_label_pc_b594, label %dec_label_pc_b428

dec_label_pc_b594:                                ; preds = %dec_label_pc_b580, %dec_label_pc_b41c
  %v0_b594 = call i32 @function_e29c()
  store i32 %v0_b594, i32* %r0.global-to-local, align 4
  %v0_b598 = load i32, i32* @fp, align 4
  %v2_b598 = icmp eq i32 %v0_b598, 0
  store i1 %v2_b598, i1* %cpsr_z.global-to-local, align 1
  %v1_b59c = load i32, i32* @r6, align 4
  %v2_b59c = add i32 %v1_b59c, 8
  %v3_b59c = inttoptr i32 %v2_b59c to i32*
  store i32 %v0_b594, i32* %v3_b59c, align 4
  br i1 %v2_b598, label %dec_label_pc_b430, label %dec_label_pc_b5a4

dec_label_pc_b5a4:                                ; preds = %dec_label_pc_b428, %dec_label_pc_b594
  %v0_b5a4 = call i32 @function_e29c()
  %v1_b5a4 = trunc i32 %v0_b5a4 to i16
  store i32 %v0_b5a4, i32* %r0.global-to-local, align 4
  %v3_b5a8 = load i32, i32* @r6, align 4
  %v4_b5a8 = add i32 %v3_b5a8, 18
  %v5_b5a8 = inttoptr i32 %v4_b5a8 to i16*
  store i16 %v1_b5a4, i16* %v5_b5a8, align 2
  br label %dec_label_pc_b430

dec_label_pc_b5b0:                                ; preds = %dec_label_pc_b0f0
  %v0_b5b0 = load i32, i32* @sl, align 4
  store i32 %v0_b5b0, i32* %r0.global-to-local, align 4
  %v1_b5b4 = call i32 @function_115e0(i32 %v0_b5b0)
  store i32 %v1_b5b4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b5b8

dec_label_pc_b5b8:                                ; preds = %dec_label_pc_af1c, %dec_label_pc_b5b0
  %v1_b5c0 = phi i32 [ %v3_b0e0, %dec_label_pc_af1c ], [ %v1_b5b4, %dec_label_pc_b5b0 ]
  store i32 %v3_af1c, i32* %r4.global-to-local, align 4
  store i32 %v24_af1c, i32* %fp.global-to-local, align 4
  store i32 %v27_af1c, i32* %lr.global-to-local, align 4
  ret i32 %v1_b5c0

; uselistorder directives
  uselistorder i32 %v0_b5a4, { 1, 0 }
  uselistorder i32 %v0_b56c, { 1, 0 }
  uselistorder i32 %v0_b558, { 1, 0 }
  uselistorder i32 %v0_b544, { 1, 0 }
  uselistorder i32 %v1_b538, { 1, 2, 0 }
  uselistorder i32 %v0_b4dc, { 1, 2, 0, 3 }
  uselistorder i32 %v1_b4a4, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_b470, { 1, 0 }
  uselistorder i32 %v4_b460, { 1, 0 }
  uselistorder i1 %v3_b3f0, { 1, 0 }
  uselistorder i32 %v2_b394, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b1fc, { 1, 2, 0 }
  uselistorder i32 %v1_b1c8, { 2, 1, 0 }
  uselistorder i32 %v1_b1c4, { 2, 0, 1 }
  uselistorder i32 %v1_b1c0, { 2, 0, 1 }
  uselistorder i32 %v1_b1bc, { 2, 0, 1 }
  uselistorder i32 %v1_b198, { 1, 0 }
  uselistorder i32 %v3_b134, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_b128, { 1, 0, 2 }
  uselistorder i32 %v0_b124, { 1, 0, 3, 2 }
  uselistorder i1 %v7_b110, { 1, 0 }
  uselistorder i1 %v7_b0e4, { 1, 0 }
  uselistorder i32 %v3_b0e0, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_b0cc, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v6_b020, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_b008, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v1_af94, { 1, 0 }
  uselistorder i32 %v6_af8c, { 1, 0 }
  uselistorder i32 %v7_af74, { 0, 1, 3, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 16, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 35, 34, 36, 37, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 5, 3, 6, 8, 9, 7, 10, 12, 11, 13, 15, 14, 16, 17, 18, 21, 19, 20, 22, 23, 24, 25, 26, 27, 28, 32, 29, 30, 31, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b5b8, { 1, 0 }
  uselistorder label %dec_label_pc_b5a4, { 1, 0 }
  uselistorder label %dec_label_pc_b430, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b3b4, { 1, 0 }
  uselistorder label %dec_label_pc_b3a4, { 1, 0, 2 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
}

define i32 @function_b5c8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b5c8:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_b5c8 = load i32, i32* @r4, align 4
  %v18_b5c8 = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_b5e4 = call i32 @function_1295c(i32 %arg1, i32 4)
  store i32 %v2_b5e4, i32* @sl, align 4
  %v0_b5f0 = load i32, i32* @r7, align 4
  %v2_b5f4 = call i32 @function_1295c(i32 %v0_b5f0, i32 4)
  store i32 65535, i32* @r4, align 4
  %v0_b600 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_b5f4, i32* @r8, align 4
  %v0_b610 = load i32, i32* @r5, align 4
  %v5_b614 = inttoptr i32 %v0_b600 to i32*
  %v6_b614 = call i32 @function_8570(i32 %v0_b610, i32* %v5_b614, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v3_b61c = urem i32 %v6_b614, 65536
  %v0_b620 = load i32, i32* @r6, align 4
  %v0_b628 = load i32, i32* @r4, align 4
  store i32 %v0_b628, i32* %r3.global-to-local, align 4
  %v0_b62c = load i32, i32* @r5, align 4
  %v5_b634 = inttoptr i32 %v0_b620 to i32*
  %v6_b634 = call i32 @function_8570(i32 %v0_b62c, i32* %v5_b634, i32 6, i32 %v0_b628, i32 %v3_b61c)
  %v0_b638 = load i32, i32* @r6, align 4
  %v3_b63c = mul i32 %v6_b634, 65536
  store i32 %v3_b63c, i32* %sb.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_b648 = load i32, i32* @r5, align 4
  %v5_b64c = inttoptr i32 %v0_b638 to i32*
  %v6_b64c = call i32 @function_8570(i32 %v0_b648, i32* %v5_b64c, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b65c = load i32, i32* @r6, align 4
  %v0_b660 = load i32, i32* @r5, align 4
  %v3_b664 = urem i32 %v6_b64c, 65536
  store i32 %v3_b664, i32* @r5, align 4
  %v5_b668 = inttoptr i32 %v0_b65c to i32*
  %v6_b668 = call i32 @function_8570(i32 %v0_b660, i32* %v5_b668, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v0_b66c = load i32, i32* %sb.global-to-local, align 4
  %v3_b66c = udiv i32 %v0_b66c, 65536
  store i32 %v3_b66c, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_b674 = load i32, i32* @r4, align 4
  %v9_b674 = icmp eq i32 %v3_b66c, %v1_b674
  br i1 %v9_b674, label %dec_label_pc_b6a4, label %bb

bb:                                               ; preds = %dec_label_pc_b5c8
  store i32 0, i32* %stack_var_-56, align 4
  %v4_b68c = udiv i32 %v0_b66c, 16777216
  store i32 %v4_b68c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b6b4

dec_label_pc_b6a4:                                ; preds = %dec_label_pc_b5c8
  store i32 0, i32* %stack_var_-56, align 4
  %v0_b6a4 = call i32 @function_e29c()
  br label %dec_label_pc_b6b4

dec_label_pc_b6b4:                                ; preds = %bb, %dec_label_pc_b6a4
  %v0_b69810 = urem i32 %v6_b668, 256
  %v0_b6b4 = load i32, i32* @r7, align 4
  %v2_b6b4 = icmp eq i32 %v0_b6b4, 0
  br i1 %v2_b6b4, label %dec_label_pc_b7f4, label %dec_label_pc_b6bc

dec_label_pc_b6bc:                                ; preds = %dec_label_pc_b6b4
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_b768 = udiv i32 %v3_b61c, 256
  %v1_b764 = mul i32 %v6_b614, 256
  %v4_b76c = and i32 %v1_b764, 65280
  %v5_b76c = or i32 %v4_b76c, %v3_b768
  %v2_b6ec = ptrtoint i32* %stack_var_-56 to i32
  br label %dec_label_pc_b74c

dec_label_pc_b6cc:                                ; preds = %bb51, %dec_label_pc_b78c
  %v3_b6d8 = call i32 @function_11df4(i32 2, i32 2, i32 17)
  %v7_b6e0 = icmp eq i32 %v3_b6d8, -1
  %v0_b6e4 = load i32, i32* @sb, align 4
  %v1_b6e4 = add i32 %v0_b6e4, 1
  store i32 %v1_b6e4, i32* @sb, align 4
  %v0_b6e8 = load i32, i32* @fp, align 4
  %v1_b6e8 = add i32 %v0_b6e8, 24
  store i32 %v1_b6e8, i32* @fp, align 4
  %v2_b6f4 = load i32, i32* @r8, align 4
  %v3_b6f4 = add i32 %v2_b6f4, %stack_var_-60.0
  %v4_b6f4 = inttoptr i32 %v3_b6f4 to i32*
  store i32 %v3_b6d8, i32* %v4_b6f4, align 4
  br i1 %v7_b6e0, label %dec_label_pc_b7e8, label %dec_label_pc_b6fc

dec_label_pc_b6fc:                                ; preds = %dec_label_pc_b6cc
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v3_b714 = call i32 @function_11ba4(i32 %v3_b6d8, i32 %v2_b6ec, i32 16)
  %v0_b718 = load i32, i32* @r6, align 4
  %v1_b718 = add i32 %v0_b718, 20
  %v2_b718 = inttoptr i32 %v1_b718 to i8*
  %v3_b718 = load i8, i8* %v2_b718, align 1
  %v4_b718 = zext i8 %v3_b718 to i32
  store i32 %v4_b718, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_b718, 32
  br i1 %tmp, label %dec_label_pc_b7a0, label %dec_label_pc_b724

dec_label_pc_b724:                                ; preds = %dec_label_pc_b6fc, %dec_label_pc_b7a0
  %v0_b728 = phi i32 [ %v0_b718, %dec_label_pc_b6fc ], [ %v0_b728.pre, %dec_label_pc_b7a0 ]
  %v1_b72c = load i32, i32* @r8, align 4
  %v2_b72c = add i32 %v1_b72c, %stack_var_-60.0
  %v3_b72c = inttoptr i32 %v2_b72c to i32*
  %v4_b72c = load i32, i32* %v3_b72c, align 4
  %v3_b734 = call i32 @function_11bdc(i32 %v4_b72c, i32 %v0_b728, i32 16)
  %v0_b73c = load i32, i32* @sb, align 4
  %v1_b73c = load i32, i32* @r7, align 4
  %v9_b73c = icmp eq i32 %v0_b73c, %v1_b73c
  %v1_b740 = add i32 %stack_var_-60.0, 4
  store i32 %v1_b740, i32* %r3.global-to-local, align 4
  br i1 %v9_b73c, label %dec_label_pc_b7f4, label %dec_label_pc_b74c

dec_label_pc_b74c:                                ; preds = %dec_label_pc_b724, %dec_label_pc_b6bc
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_b6bc ], [ %v1_b740, %dec_label_pc_b724 ]
  store i32 65535, i32* @r4, align 4
  %v2_b75c = call i32 @function_1295c(i32 65535, i32 1)
  store i32 %v5_b76c, i32* %r3.global-to-local, align 4
  %v1_b778 = load i32, i32* @r4, align 4
  %v9_b778 = icmp eq i32 %v3_b61c, %v1_b778
  %v1_b77c = load i32, i32* @fp, align 4
  %v2_b77c = add i32 %v1_b77c, %arg2
  store i32 %v2_b77c, i32* @r6, align 4
  %v2_b780 = load i32, i32* @sl, align 4
  %v3_b780 = add i32 %v2_b780, %stack_var_-60.0
  %v4_b780 = inttoptr i32 %v3_b780 to i32*
  store i32 %v2_b75c, i32* %v4_b780, align 4
  br i1 %v9_b778, label %dec_label_pc_b78c, label %bb51

bb51:                                             ; preds = %dec_label_pc_b74c
  %v1_b784 = load i32, i32* %r3.global-to-local, align 4
  %v2_b784 = trunc i32 %v1_b784 to i16
  %v3_b784 = load i32, i32* @r6, align 4
  %v4_b784 = add i32 %v3_b784, 2
  %v5_b784 = inttoptr i32 %v4_b784 to i16*
  store i16 %v2_b784, i16* %v5_b784, align 2
  br label %dec_label_pc_b6cc

dec_label_pc_b78c:                                ; preds = %dec_label_pc_b74c
  %v0_b78c = call i32 @function_e29c()
  %v1_b78c = trunc i32 %v0_b78c to i16
  %v0_b794 = load i32, i32* @fp, align 4
  %v2_b794 = add i32 %v0_b794, %arg2
  store i32 %v2_b794, i32* @r6, align 4
  %v4_b798 = add i32 %v2_b794, 2
  %v5_b798 = inttoptr i32 %v4_b798 to i16*
  store i16 %v1_b78c, i16* %v5_b798, align 2
  br label %dec_label_pc_b6cc

dec_label_pc_b7a0:                                ; preds = %dec_label_pc_b6fc
  %v1_b7a0 = add i32 %v0_b718, 16
  %v2_b7a0 = inttoptr i32 %v1_b7a0 to i32*
  %v3_b7a0 = load i32, i32* %v2_b7a0, align 4
  store i32 %v3_b7a0, i32* %r4.global-to-local, align 4
  %v0_b7a4 = call i32 @function_e29c()
  %v1_b7b4 = and i32 %v3_b7a0, 65280
  store i32 %v1_b7b4, i32* %r3.global-to-local, align 4
  %v0_b7bc = load i32, i32* @r6, align 4
  %v1_b7bc = add i32 %v0_b7bc, 20
  %v2_b7bc = inttoptr i32 %v1_b7bc to i8*
  %v3_b7bc = load i8, i8* %v2_b7bc, align 1
  %v4_b7bc = zext i8 %v3_b7bc to i32
  %v5_b7c0 = call i32 @llvm.bswap.i32(i32 %v3_b7a0)
  %v7_b7c4 = lshr i32 %v0_b7a4, %v4_b7bc
  %v8_b7c4 = add i32 %v7_b7c4, %v5_b7c0
  %v5_b7dc = call i32 @llvm.bswap.i32(i32 %v8_b7c4)
  store i32 %v5_b7dc, i32* %r3.global-to-local, align 4
  %v2_b7e0 = add i32 %v0_b7bc, 4
  %v3_b7e0 = inttoptr i32 %v2_b7e0 to i32*
  store i32 %v5_b7dc, i32* %v3_b7e0, align 4
  %v0_b728.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_b724

dec_label_pc_b7e8:                                ; preds = %dec_label_pc_b6cc
  store i32 %v3_b5c8, i32* %r4.global-to-local, align 4
  store i32 %v18_b5c8, i32* %sb.global-to-local, align 4
  ret i32 %v3_b6d8

dec_label_pc_b7f4:                                ; preds = %dec_label_pc_b724, %dec_label_pc_b6b4
  %v1_b83422 = phi i32 [ 0, %dec_label_pc_b6b4 ], [ %v0_b73c, %dec_label_pc_b724 ]
  %v2_b7f8 = icmp eq i32 %v0_b69810, 0
  br i1 %v2_b7f8, label %dec_label_pc_b818.outer, label %dec_label_pc_b830

dec_label_pc_b808:                                ; preds = %dec_label_pc_b818
  store i32 %v1_b80c, i32* %r4.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b808 = load i32, i32* @r8, align 4
  %v4_b808 = mul i32 %v1_b80c, 4
  %v5_b808 = add i32 %v0_b808, %v4_b808
  %v6_b808 = inttoptr i32 %v5_b808 to i32*
  %v7_b808 = load i32, i32* %v6_b808, align 4
  %v0_b80c = load i32, i32* @sl, align 4
  %v5_b80c = add i32 %v0_b80c, %v4_b808
  %v6_b80c = inttoptr i32 %v5_b80c to i32*
  %v7_b80c = load i32, i32* %v6_b80c, align 4
  %v4_b810 = call i32 @function_11d38(i32 %v7_b808, i32 %v7_b80c, i32 %v0_b81c, i32 16384)
  %v0_b814 = load i32, i32* %r4.global-to-local, align 4
  %v1_b814 = add i32 %v0_b814, 1
  %v0_b818.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_b818.outer

dec_label_pc_b818.outer:                          ; preds = %dec_label_pc_b7f4, %dec_label_pc_b808
  %v0_b818.ph = phi i32 [ %v0_b818.pre.pre, %dec_label_pc_b808 ], [ %v1_b83422, %dec_label_pc_b7f4 ]
  %v1_b80c.ph = phi i32 [ %v1_b814, %dec_label_pc_b808 ], [ 0, %dec_label_pc_b7f4 ]
  %v0_b81c = load i32, i32* @r5, align 4
  br label %dec_label_pc_b818

dec_label_pc_b818:                                ; preds = %dec_label_pc_b818.outer, %dec_label_pc_b818
  %v1_b80c = phi i32 [ 0, %dec_label_pc_b818 ], [ %v1_b80c.ph, %dec_label_pc_b818.outer ]
  %v8_b824 = icmp sgt i32 %v0_b818.ph, %v1_b80c
  br i1 %v8_b824, label %dec_label_pc_b808, label %dec_label_pc_b818

dec_label_pc_b830:                                ; preds = %dec_label_pc_b834, %dec_label_pc_b7f4
  %v1_b83421 = phi i32 [ %v1_b83422, %dec_label_pc_b7f4 ], [ %v1_b834, %dec_label_pc_b834 ]
  br label %dec_label_pc_b834

dec_label_pc_b834:                                ; preds = %dec_label_pc_b840, %dec_label_pc_b830
  %v1_b834 = phi i32 [ %v1_b83421, %dec_label_pc_b830 ], [ %v1_b834.pre, %dec_label_pc_b840 ]
  %v1_b840 = phi i32 [ 0, %dec_label_pc_b830 ], [ %v1_b860, %dec_label_pc_b840 ]
  store i32 %v1_b840, i32* @r6, align 4
  %v6_b83c = icmp slt i32 %v1_b840, %v1_b834
  br i1 %v6_b83c, label %dec_label_pc_b840, label %dec_label_pc_b830

dec_label_pc_b840:                                ; preds = %dec_label_pc_b834
  %v0_b838 = load i32, i32* @r5, align 4
  %v0_b840 = load i32, i32* @sl, align 4
  %v4_b840 = mul i32 %v1_b840, 4
  %v5_b840 = add i32 %v0_b840, %v4_b840
  %v6_b840 = inttoptr i32 %v5_b840 to i32*
  %v7_b840 = load i32, i32* %v6_b840, align 4
  store i32 %v7_b840, i32* @r4, align 4
  %v2_b848 = inttoptr i32 %v7_b840 to i16*
  %v3_b848 = call i32 @function_e430(i16* %v2_b848, i32 %v0_b838)
  %v0_b84c = load i32, i32* @r8, align 4
  %v1_b84c = load i32, i32* @r6, align 4
  %v4_b84c = mul i32 %v1_b84c, 4
  %v5_b84c = add i32 %v4_b84c, %v0_b84c
  %v6_b84c = inttoptr i32 %v5_b84c to i32*
  %v7_b84c = load i32, i32* %v6_b84c, align 4
  %v0_b850 = load i32, i32* @r4, align 4
  %v0_b854 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_b85c = call i32 @function_11d38(i32 %v7_b84c, i32 %v0_b850, i32 %v0_b854, i32 16384)
  %v0_b860 = load i32, i32* @r6, align 4
  %v1_b860 = add i32 %v0_b860, 1
  %v1_b834.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_b834

; uselistorder directives
  uselistorder i32 %v1_b834, { 1, 0 }
  uselistorder i32 %v1_b80c, { 2, 1, 0 }
  uselistorder i32 %v5_b7dc, { 1, 0 }
  uselistorder i32 %v3_b7a0, { 1, 0, 2 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_b718, { 1, 0, 2 }
  uselistorder i32 %v3_b6d8, { 1, 3, 2, 0 }
  uselistorder i32 %v3_b66c, { 1, 0 }
  uselistorder i32 %v3_b61c, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 1, 3, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 8, 9, 5, 6, 7, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_b818, { 1, 0 }
  uselistorder label %dec_label_pc_b818.outer, { 1, 0 }
  uselistorder label %dec_label_pc_b724, { 1, 0 }
  uselistorder label %dec_label_pc_b6cc, { 1, 0 }
  uselistorder label %dec_label_pc_b6b4, { 1, 0 }
}

define i32 @function_b868(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b868:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_b868 = load i32, i32* @sb, align 4
  %v27_b868 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_b884 = call i32 @function_1295c(i32 %arg1, i32 4)
  %v0_b888 = load i32, i32* @r5, align 4
  store i32 %v0_b888, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b898 = load i32, i32* @r4, align 4
  store i32 %v0_b898, i32* %r0.global-to-local, align 4
  %v5_b89c = inttoptr i32 %v0_b888 to i32*
  %v6_b89c = call i32 @function_8570(i32 %v0_b898, i32* %v5_b89c, i32 2, i32 0, i32 %v2_b884)
  %v1_b8a8 = urem i32 %v6_b89c, 256
  store i32 %v1_b8a8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b8b4 = load i32, i32* @r5, align 4
  store i32 %v0_b8b4, i32* %r1.global-to-local, align 4
  %v0_b8b8 = load i32, i32* @r4, align 4
  store i32 %v0_b8b8, i32* %r0.global-to-local, align 4
  %v5_b8bc = trunc i32 %v6_b89c to i8
  %v6_b8c0 = inttoptr i32 %v0_b8b4 to i32*
  %v7_b8c0 = call i32 @function_8570(i32 %v0_b8b8, i32* %v6_b8c0, i32 3, i32 65535, i32 %v6_b89c)
  %v0_b8c4 = load i32, i32* @r5, align 4
  store i32 %v0_b8c4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_b8d4 = load i32, i32* @r4, align 4
  store i32 %v0_b8d4, i32* %r0.global-to-local, align 4
  %v5_b8d8 = inttoptr i32 %v0_b8c4 to i32*
  %v6_b8d8 = call i32 @function_8570(i32 %v0_b8d4, i32* %v5_b8d8, i32 4, i32 64, i32 %v7_b8c0)
  %v1_b8e0 = urem i32 %v6_b8d8, 256
  store i32 %v1_b8e0, i32* %ip.global-to-local, align 4
  %v0_b8e4 = load i32, i32* @r5, align 4
  store i32 %v0_b8e4, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b8f0 = load i32, i32* @r4, align 4
  store i32 %v0_b8f0, i32* %r0.global-to-local, align 4
  %v6_b8f8 = inttoptr i32 %v0_b8e4 to i32*
  %v7_b8f8 = call i32 @function_8570(i32 %v0_b8f0, i32* %v6_b8f8, i32 5, i32 0, i32 %v1_b8e0)
  %v1_b904 = urem i32 %v7_b8f8, 256
  store i32 %v1_b904, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b910 = load i32, i32* @r5, align 4
  store i32 %v0_b910, i32* %r1.global-to-local, align 4
  %v0_b914 = load i32, i32* @r4, align 4
  store i32 %v0_b914, i32* %r0.global-to-local, align 4
  %v5_b91c = inttoptr i32 %v0_b910 to i32*
  %v6_b91c = call i32 @function_8570(i32 %v0_b914, i32* %v5_b91c, i32 6, i32 65535, i32 %v1_b904)
  %v0_b924 = load i32, i32* @r5, align 4
  store i32 %v0_b924, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_b91c, i32* %sb.global-to-local, align 4
  %v0_b934 = load i32, i32* @r4, align 4
  store i32 %v0_b934, i32* %r0.global-to-local, align 4
  %v5_b938 = inttoptr i32 %v0_b924 to i32*
  %v6_b938 = call i32 @function_8570(i32 %v0_b934, i32* %v5_b938, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b93c = load i32, i32* @r5, align 4
  store i32 %v0_b93c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_b938, i32* @sl, align 4
  %v0_b94c = load i32, i32* @r4, align 4
  store i32 %v0_b94c, i32* %r0.global-to-local, align 4
  %v5_b950 = inttoptr i32 %v0_b93c to i32*
  %v6_b950 = call i32 @function_8570(i32 %v0_b94c, i32* %v5_b950, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b95c = load i32, i32* @r5, align 4
  store i32 %v0_b95c, i32* %r1.global-to-local, align 4
  store i32 %v6_b950, i32* @r6, align 4
  %v0_b964 = load i32, i32* @r4, align 4
  store i32 %v0_b964, i32* %r0.global-to-local, align 4
  %v5_b968 = inttoptr i32 %v0_b95c to i32*
  %v6_b968 = call i32 @function_8570(i32 %v0_b964, i32* %v5_b968, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_b974 = load i32, i32* @global_var_212d8.46, align 4
  store i32 %v2_b974, i32* %r3.global-to-local, align 4
  %v1_b978 = urem i32 %v6_b968, 256
  store i32 %v1_b978, i32* %ip.global-to-local, align 4
  %v0_b97c = load i32, i32* @r5, align 4
  store i32 %v0_b97c, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_b984 = load i32, i32* @r4, align 4
  store i32 %v0_b984, i32* %r0.global-to-local, align 4
  %v5_b98c = inttoptr i32 %v0_b97c to i32*
  %v6_b98c = call i32 @function_8570(i32 %v0_b984, i32* %v5_b98c, i32 25, i32 %v2_b974, i32 %v1_b978)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b9a0 = call i32 @function_11df4(i32 2, i32 3, i32 17)
  store i32 %v3_b9a0, i32* %r0.global-to-local, align 4
  %v7_b9a4 = icmp eq i32 %v3_b9a0, -1
  store i1 %v7_b9a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b9a0, i32* @fp, align 4
  br i1 %v7_b9a4, label %dec_label_pc_bd44, label %dec_label_pc_b9b0

dec_label_pc_b9b0:                                ; preds = %dec_label_pc_b868
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b9b8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b9b8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_b9cc = call i32 @function_11db0(i32 %v3_b9a0, i32 0, i32 3, i32 %v6_b9b8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_b9cc, i32* %r0.global-to-local, align 4
  %v7_b9d0 = icmp eq i32 %v5_b9cc, -1
  store i1 %v7_b9d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b9d0, label %dec_label_pc_bd3c, label %dec_label_pc_b9d8

dec_label_pc_b9d8:                                ; preds = %dec_label_pc_b9b0
  %v0_b9d8 = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_b9e4 = urem i32 %v0_b9d8, 65536
  store i32 %v3_b9e4, i32* %r2.global-to-local, align 4
  %v3_b9e8 = icmp ugt i32 %v3_b9e4, 1459
  %v9_b9e8 = icmp eq i32 %v3_b9e4, 1460
  store i1 %v9_b9e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b9e8, label %bb, label %bb48

bb:                                               ; preds = %dec_label_pc_b9d8
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_b9d8, %bb
  %v0_ba44 = phi i32 [ %v3_b9e4, %dec_label_pc_b9d8 ], [ 1460, %bb ]
  store i32 %v7_b8c0, i32* %r0.global-to-local, align 4
  %v0_b9f4 = load i32, i32* %sb.global-to-local, align 4
  %v3_b9fc = urem i32 %v0_b9f4, 65536
  store i32 %v3_b9fc, i32* %ip.global-to-local, align 4
  %v0_ba00 = load i32, i32* @r7, align 4
  %v2_ba00 = icmp eq i32 %v0_ba00, 0
  store i1 %v2_ba00, i1* %cpsr_z.global-to-local, align 1
  %v0_ba04 = load i32, i32* @sl, align 4
  %v3_ba04 = mul i32 %v0_ba04, 65536
  br i1 %v2_ba00, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  store i32 %v0_ba44, i32* %ip.global-to-local, align 4
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_ba34 = phi i32 [ %v3_b9fc, %bb48 ], [ %v0_ba44, %bb49 ]
  %v3_ba14 = urem i32 %v0_ba04, 65536
  store i32 %v3_ba14, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ba1c = urem i32 %v7_b8c0, 65536
  store i32 %v3_ba1c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_ba00, label %.thread, label %dec_label_pc_ba3c

.thread:                                          ; preds = %bb50
  %v2_ba30 = add nsw i32 %v1_ba34, 28
  store i32 %v2_ba30, i32* @sb, align 4
  %v2_ba34 = add nsw i32 %v1_ba34, 8
  store i32 %v2_ba34, i32* @sl, align 4
  br label %dec_label_pc_bb60.preheader

dec_label_pc_ba3c:                                ; preds = %bb50
  %v1_ba44 = add nuw nsw i32 %v0_ba44, 28
  store i32 %v1_ba44, i32* @sb, align 4
  %v1_ba48 = add nuw nsw i32 %v0_ba44, 8
  store i32 %v1_ba48, i32* @sl, align 4
  %tmp51 = mul i32 %v0_b9f4, 256
  %v3_ba5c = and i32 %tmp51, 65280
  %tmp52 = udiv i32 %v0_b9f4, 256
  %v4_ba6c = urem i32 %tmp52, 256
  %v5_ba6c = or i32 %v4_ba6c, %v3_ba5c
  store i32 %v5_ba6c, i32* @r6, align 4
  store i32 %v3_ba04, i32* %r1.global-to-local, align 4
  %tmp53 = mul nuw nsw i32 %v1_ba44, 256
  %v3_ba78 = and i32 %tmp53, 65280
  store i32 %v3_ba78, i32* %r3.global-to-local, align 4
  %tmp54 = mul i32 %v0_ba04, 256
  %v3_ba7c = and i32 %tmp54, 65280
  %tmp55 = mul nuw nsw i32 %v1_ba48, 256
  %v3_ba80 = and i32 %tmp55, 65280
  store i32 %v3_ba80, i32* %ip.global-to-local, align 4
  %tmp56 = udiv i32 %v1_ba44, 256
  %v4_ba84 = urem i32 %tmp56, 256
  %v5_ba84 = or i32 %v4_ba84, %v3_ba78
  store i32 %v5_ba84, i32* @lr, align 4
  %tmp57 = udiv i32 %v0_ba04, 256
  %v4_ba88 = urem i32 %tmp57, 256
  %v5_ba88 = or i32 %v4_ba88, %v3_ba7c
  store i32 %v5_ba88, i32* %r0.global-to-local, align 4
  %trunc = trunc i32 %v1_ba48 to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc)
  %tmp58 = mul i32 %v7_b8c0, 256
  %v3_ba90 = and i32 %tmp58, 65280
  store i32 %v3_ba90, i32* %r2.global-to-local, align 4
  %tmp59 = udiv i32 %v7_b8c0, 256
  %v4_baa0 = urem i32 %tmp59, 256
  %v5_baa0 = or i32 %v4_baa0, %v3_ba90
  store i32 %v5_baa0, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  %sext = mul nuw i32 %v5_ba84, 65536
  %v4_bb14 = sdiv i32 %sext, 65536
  %sext6 = mul nuw i32 %v5_ba88, 65536
  %v7_bb48 = sdiv i32 %sext6, 65536
  %v1_bb08 = trunc i32 %v6_b8d8 to i8
  %v3_bb48 = sext i16 %rev to i32
  br label %dec_label_pc_baa8

dec_label_pc_baa8:                                ; preds = %.thread8, %dec_label_pc_ba3c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_bab4 = call i32 @function_1295c(i32 1510, i32 1)
  store i32 %v2_bab4, i32* %r0.global-to-local, align 4
  store i32 %v2_b884, i32* %r3.global-to-local, align 4
  %v3_babc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_babc, i32* %r1.global-to-local, align 4
  %v2_bac0 = load i32, i32* @r4, align 4
  %v5_bac0 = mul i32 %v2_bac0, 4
  %v6_bac0 = add i32 %v5_bac0, %v2_b884
  %v7_bac0 = inttoptr i32 %v6_bac0 to i32*
  store i32 %v2_bab4, i32* %v7_bac0, align 4
  %v0_bac4 = load i32, i32* %r3.global-to-local, align 4
  %v1_bac4 = load i32, i32* %r1.global-to-local, align 4
  %v4_bac4 = mul i32 %v1_bac4, 4
  %v5_bac4 = add i32 %v4_bac4, %v0_bac4
  %v6_bac4 = inttoptr i32 %v5_bac4 to i32*
  %v7_bac4 = load i32, i32* %v6_bac4, align 4
  store i32 %v7_bac4, i32* %r0.global-to-local, align 4
  %v1_bac8 = inttoptr i32 %v7_bac4 to i8*
  %v2_bac8 = load i8, i8* %v1_bac8, align 1
  %tmp = urem i8 %v2_bac8, 16
  %v1_bacc = zext i8 %tmp to i32
  %v1_bad0 = or i32 %v1_bacc, 64
  store i32 %v1_bad0, i32* %r3.global-to-local, align 4
  %v1_bad4 = trunc i32 %v1_bad0 to i8
  store i8 %v1_bad4, i8* %v1_bac8, align 1
  %v0_bad8 = load i32, i32* %r0.global-to-local, align 4
  %v1_bad8 = inttoptr i32 %v0_bad8 to i8*
  %v2_bad8 = load i8, i8* %v1_bad8, align 1
  %v1_badc = and i8 %v2_bad8, -16
  %v1_bae0 = or i8 %v1_badc, 5
  store i32 %v1_b904, i32* %ip.global-to-local, align 4
  %v0_bae8 = load i32, i32* %r1.global-to-local, align 4
  %v3_bae8 = mul i32 %v0_bae8, 32
  store i32 %v3_bae8, i32* %r2.global-to-local, align 4
  store i8 %v1_bae0, i8* %v1_bad8, align 1
  %v0_baf0 = load i32, i32* %r1.global-to-local, align 4
  %v1_baf0 = add i32 %v0_baf0, 1
  store i32 %v1_baf0, i32* @r4, align 4
  %v0_baf4 = load i32, i32* %r2.global-to-local, align 4
  %tmp61 = mul i32 %v0_baf0, -8
  %v5_baf4 = add i32 %v0_baf4, %tmp61
  store i32 %v5_baf4, i32* %r2.global-to-local, align 4
  store i32 %v6_b89c, i32* %r1.global-to-local, align 4
  %v2_bafc = load i32, i32* %r0.global-to-local, align 4
  %v3_bafc = add i32 %v2_bafc, 1
  %v4_bafc = inttoptr i32 %v3_bafc to i8*
  store i8 %v5_b8bc, i8* %v4_bafc, align 1
  store i32 %v1_b8e0, i32* %r3.global-to-local, align 4
  %v0_bb04 = load i32, i32* %ip.global-to-local, align 4
  %v2_bb04 = icmp eq i32 %v0_bb04, 0
  store i1 %v2_bb04, i1* %cpsr_z.global-to-local, align 1
  %v2_bb08 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb08 = add i32 %v2_bb08, 8
  %v4_bb08 = inttoptr i32 %v3_bb08 to i8*
  store i8 %v1_bb08, i8* %v4_bb08, align 1
  %v0_bb0c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bb0c, label %.thread8, label %bb60

bb60:                                             ; preds = %dec_label_pc_baa8
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_bb10 = load i32, i32* %r0.global-to-local, align 4
  %v4_bb10 = add i32 %v3_bb10, 6
  %v5_bb10 = inttoptr i32 %v4_bb10 to i16*
  store i16 64, i16* %v5_bb10, align 2
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_baa8, %bb60
  store i32 %v4_bb14, i32* %ip.global-to-local, align 4
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_bb1c = load i32, i32* %r0.global-to-local, align 4
  %v3_bb1c = add i32 %v2_bb1c, 9
  %v4_bb1c = inttoptr i32 %v3_bb1c to i8*
  store i8 17, i8* %v4_bb1c, align 1
  %v0_bb20 = load i32, i32* %ip.global-to-local, align 4
  %v1_bb20 = trunc i32 %v0_bb20 to i16
  %v2_bb20 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb20 = add i32 %v2_bb20, 2
  %v4_bb20 = inttoptr i32 %v3_bb20 to i16*
  store i16 %v1_bb20, i16* %v4_bb20, align 2
  store i32 %v6_b98c, i32* %ip.global-to-local, align 4
  %v1_bb28 = load i32, i32* %r0.global-to-local, align 4
  %v2_bb28 = add i32 %v1_bb28, 12
  %v3_bb28 = inttoptr i32 %v2_bb28 to i32*
  store i32 %v6_b98c, i32* %v3_bb28, align 4
  %v0_bb2c = load i32, i32* %r2.global-to-local, align 4
  %v1_bb2c = load i32, i32* @r8, align 4
  %v2_bb2c = add i32 %v1_bb2c, %v0_bb2c
  store i32 %v2_bb2c, i32* %r2.global-to-local, align 4
  %v1_bb30 = add i32 %v2_bb2c, 16
  %v2_bb30 = inttoptr i32 %v1_bb30 to i32*
  %v3_bb30 = load i32, i32* %v2_bb30, align 4
  store i32 %v3_bb30, i32* %r3.global-to-local, align 4
  %v0_bb34 = load i32, i32* @r5, align 4
  %v1_bb34 = trunc i32 %v0_bb34 to i16
  %v2_bb34 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb34 = add i32 %v2_bb34, 4
  %v4_bb34 = inttoptr i32 %v3_bb34 to i16*
  store i16 %v1_bb34, i16* %v4_bb34, align 2
  %v0_bb38 = load i32, i32* %r0.global-to-local, align 4
  %v1_bb38 = add i32 %v0_bb38, 20
  store i32 %v1_bb38, i32* %r1.global-to-local, align 4
  %v0_bb3c = load i32, i32* %r3.global-to-local, align 4
  %v2_bb3c = add i32 %v0_bb38, 16
  %v3_bb3c = inttoptr i32 %v2_bb3c to i32*
  store i32 %v0_bb3c, i32* %v3_bb3c, align 4
  %v0_bb40 = load i32, i32* @r6, align 4
  %v1_bb40 = trunc i32 %v0_bb40 to i16
  %v2_bb40 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb40 = add i32 %v2_bb40, 20
  %v4_bb40 = inttoptr i32 %v3_bb40 to i16*
  store i16 %v1_bb40, i16* %v4_bb40, align 2
  store i32 %v3_bb48, i32* %r0.global-to-local, align 4
  store i32 %v7_bb48, i32* %r3.global-to-local, align 4
  %v0_bb4c = load i32, i32* @r4, align 4
  %v1_bb4c = load i32, i32* @r7, align 4
  %v9_bb4c = icmp eq i32 %v0_bb4c, %v1_bb4c
  store i1 %v9_bb4c, i1* %cpsr_z.global-to-local, align 1
  %v2_bb50 = load i32, i32* %r1.global-to-local, align 4
  %v3_bb50 = add i32 %v2_bb50, 4
  %v4_bb50 = inttoptr i32 %v3_bb50 to i16*
  store i16 %rev, i16* %v4_bb50, align 2
  %v0_bb54 = load i32, i32* %r3.global-to-local, align 4
  %v1_bb54 = trunc i32 %v0_bb54 to i16
  %v2_bb54 = load i32, i32* %r1.global-to-local, align 4
  %v3_bb54 = add i32 %v2_bb54, 2
  %v4_bb54 = inttoptr i32 %v3_bb54 to i16*
  store i16 %v1_bb54, i16* %v4_bb54, align 2
  %v0_bb58 = load i32, i32* @r4, align 4
  store i32 %v0_bb58, i32* %stack_var_-44, align 4
  %v5_bb5c = icmp slt i32 %v0_bb4c, %v1_bb4c
  br i1 %v5_bb5c, label %dec_label_pc_baa8, label %dec_label_pc_bb60.preheader.loopexit

dec_label_pc_bb60.preheader.loopexit:             ; preds = %.thread8
  %v0_bb64.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_bb60.preheader

dec_label_pc_bb60.preheader:                      ; preds = %.thread, %dec_label_pc_bb60.preheader.loopexit
  %v0_bb64.pre = phi i32 [ %v0_bb64.pre.pre, %dec_label_pc_bb60.preheader.loopexit ], [ 0, %.thread ]
  %v3_bccc = icmp eq i32 %v6_b98c, -1
  %v8_bccc = icmp eq i32 %v6_b98c, -1
  %v3_bce4 = icmp eq i32 %v3_ba1c, 65535
  %v2_bd20 = icmp eq i32 %v1_b978, 0
  br label %dec_label_pc_bb60

dec_label_pc_bb60:                                ; preds = %dec_label_pc_bb60, %dec_label_pc_bc60, %dec_label_pc_bb60.preheader
  %v0_bb64 = phi i32 [ %v0_bb64.pre, %dec_label_pc_bb60.preheader ], [ 0, %dec_label_pc_bc60 ], [ 0, %dec_label_pc_bb60 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_bb64 = icmp eq i32 %v0_bb64, 0
  store i1 %v2_bb64, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bb64, label %dec_label_pc_bb60, label %dec_label_pc_bb70

dec_label_pc_bb70:                                ; preds = %dec_label_pc_bb60, %dec_label_pc_bc60
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bb74

dec_label_pc_bb74:                                ; preds = %dec_label_pc_bbdc, %dec_label_pc_bb70
  %v1_bb88 = phi i32 [ %v1_bc50, %dec_label_pc_bbdc ], [ 0, %dec_label_pc_bb70 ]
  %v5_bb78 = mul i32 %v1_bb88, 24
  %v1_bb7c = load i32, i32* @r8, align 4
  %v2_bb7c = add i32 %v1_bb7c, %v5_bb78
  store i32 %v2_bb7c, i32* %r3.global-to-local, align 4
  store i32 %v2_b884, i32* %r1.global-to-local, align 4
  %v1_bb84 = add i32 %v2_bb7c, 20
  %v2_bb84 = inttoptr i32 %v1_bb84 to i8*
  %v3_bb84 = load i8, i8* %v2_bb84, align 1
  %v4_bb84 = zext i8 %v3_bb84 to i32
  store i32 %v4_bb84, i32* %r2.global-to-local, align 4
  %v4_bb88 = mul i32 %v1_bb88, 4
  %v5_bb88 = add i32 %v4_bb88, %v2_b884
  %v6_bb88 = inttoptr i32 %v5_bb88 to i32*
  %v7_bb88 = load i32, i32* %v6_bb88, align 4
  store i32 %v7_bb88, i32* @r5, align 4
  %v7_bb8c = icmp eq i8 %v3_bb84, 31
  store i1 %v7_bb8c, i1* %cpsr_z.global-to-local, align 1
  %v1_bb90 = add i32 %v7_bb88, 20
  store i32 %v1_bb90, i32* @r6, align 4
  %tmp62 = icmp ult i8 %v3_bb84, 32
  br i1 %tmp62, label %dec_label_pc_bc74, label %dec_label_pc_bb98

dec_label_pc_bb98:                                ; preds = %dec_label_pc_bb74
  store i32 %v6_b98c, i32* %r3.global-to-local, align 4
  store i1 %v8_bccc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_bccc, label %dec_label_pc_bcd4, label %dec_label_pc_bba4

dec_label_pc_bba4:                                ; preds = %dec_label_pc_bc74, %dec_label_pc_bb98
  store i32 %v3_ba1c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_bce4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bce4, label %dec_label_pc_bcf0, label %dec_label_pc_bbb8

dec_label_pc_bbb8:                                ; preds = %dec_label_pc_bcd4.dec_label_pc_bbb8_crit_edge, %dec_label_pc_bba4
  %v1_bbbc = phi i32 [ %v1_bbbc.pre, %dec_label_pc_bcd4.dec_label_pc_bbb8_crit_edge ], [ 65535, %dec_label_pc_bba4 ]
  store i32 %v3_b9fc, i32* %r0.global-to-local, align 4
  %v9_bbbc = icmp eq i32 %v3_b9fc, %v1_bbbc
  store i1 %v9_bbbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bbbc, label %dec_label_pc_bd04, label %dec_label_pc_bbc4

dec_label_pc_bbc4:                                ; preds = %dec_label_pc_bcf0, %dec_label_pc_bbb8
  %v1_bbc8 = phi i32 [ %v1_bcfc, %dec_label_pc_bcf0 ], [ %v1_bbbc, %dec_label_pc_bbb8 ]
  store i32 %v3_ba14, i32* %r1.global-to-local, align 4
  %v9_bbc8 = icmp eq i32 %v3_ba14, %v1_bbc8
  store i1 %v9_bbc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bbc8, label %dec_label_pc_bd18, label %dec_label_pc_bbd0

dec_label_pc_bbd0:                                ; preds = %dec_label_pc_bd04, %dec_label_pc_bbc4
  store i32 %v1_b978, i32* %r3.global-to-local, align 4
  store i1 %v2_bd20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bd20, label %dec_label_pc_bbdc, label %dec_label_pc_bd2c

dec_label_pc_bbdc:                                ; preds = %dec_label_pc_bbd0, %dec_label_pc_bd18, %dec_label_pc_bd2c
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_bbe0 = load i32, i32* @r5, align 4
  %v3_bbe0 = add i32 %v2_bbe0, 10
  %v4_bbe0 = inttoptr i32 %v3_bbe0 to i16*
  store i16 0, i16* %v4_bbe0, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_bbe8 = load i32, i32* @r5, align 4
  store i32 %v0_bbe8, i32* @r0, align 4
  %v2_bbec = call i32 @function_c848(i32 %v0_bbe8, i32 20)
  %v3_bbec = trunc i32 %v2_bbec to i16
  %v3_bbf0 = load i32, i32* @r5, align 4
  %v4_bbf0 = add i32 %v3_bbf0, 10
  %v5_bbf0 = inttoptr i32 %v4_bbf0 to i16*
  store i16 %v3_bbec, i16* %v5_bbf0, align 2
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_bbf8 = load i32, i32* @r6, align 4
  %v3_bbf8 = add i32 %v2_bbf8, 6
  %v4_bbf8 = inttoptr i32 %v3_bbf8 to i16*
  store i16 0, i16* %v4_bbf8, align 2
  %v0_bbfc = load i32, i32* @r6, align 4
  store i32 %v0_bbfc, i32* @r1, align 4
  %v1_bc00 = add i32 %v0_bbfc, 4
  %v2_bc00 = inttoptr i32 %v1_bc00 to i16*
  %v3_bc00 = load i16, i16* %v2_bc00, align 2
  %v4_bc00 = zext i16 %v3_bc00 to i32
  store i32 %v4_bc00, i32* %r2.global-to-local, align 4
  %v0_bc04 = load i32, i32* @sl, align 4
  store i32 %v0_bc04, i32* %r3.global-to-local, align 4
  %v0_bc08 = load i32, i32* @r5, align 4
  store i32 %v0_bc08, i32* %r0.global-to-local, align 4
  %v4_bc0c = call i32 @function_c898(i32 %v0_bc08, i32 %v0_bbfc, i32 %v4_bc00, i32 %v0_bc04)
  %v5_bc0c = trunc i32 %v4_bc0c to i16
  store i32 %v4_bc0c, i32* %r0.global-to-local, align 4
  %v3_bc10 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bc10, i32* %r3.global-to-local, align 4
  %v3_bc14 = mul i32 %v3_bc10, 32
  store i32 %v3_bc14, i32* %lr.global-to-local, align 4
  %v3_bc18 = load i32, i32* @r6, align 4
  %v4_bc18 = add i32 %v3_bc18, 6
  %v5_bc18 = inttoptr i32 %v4_bc18 to i16*
  store i16 %v5_bc0c, i16* %v5_bc18, align 2
  %v0_bc1c = load i32, i32* %lr.global-to-local, align 4
  %v1_bc1c = load i32, i32* %r3.global-to-local, align 4
  %tmp63 = mul i32 %v1_bc1c, -8
  %v5_bc1c = add i32 %v0_bc1c, %tmp63
  store i32 %v5_bc1c, i32* %lr.global-to-local, align 4
  %v0_bc20 = load i32, i32* @r6, align 4
  %v1_bc20 = add i32 %v0_bc20, 2
  %v2_bc20 = inttoptr i32 %v1_bc20 to i16*
  %v3_bc20 = load i16, i16* %v2_bc20, align 2
  %v1_bc24 = load i32, i32* @r8, align 4
  %v2_bc24 = add i32 %v1_bc24, %v5_bc1c
  store i32 %v2_bc24, i32* @lr, align 4
  %v3_bc28 = add i32 %v2_bc24, 2
  %v4_bc28 = inttoptr i32 %v3_bc28 to i16*
  store i16 %v3_bc20, i16* %v4_bc28, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_bc34 = load i32, i32* @r5, align 4
  store i32 %v0_bc34, i32* %r1.global-to-local, align 4
  %v0_bc38 = load i32, i32* @fp, align 4
  store i32 %v0_bc38, i32* %r0.global-to-local, align 4
  %v0_bc3c = load i32, i32* @sb, align 4
  store i32 %v0_bc3c, i32* %r2.global-to-local, align 4
  %v0_bc40 = load i32, i32* @lr, align 4
  %v6_bc48 = call i32 @function_11d70(i32 %v0_bc38, i32 %v0_bc34, i32 %v0_bc3c, i32 16384, i32 %v0_bc40, i32 16)
  %v3_bc4c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bc4c, i32* %r3.global-to-local, align 4
  %v1_bc50 = add i32 %v3_bc4c, 1
  store i32 %v1_bc50, i32* %r0.global-to-local, align 4
  %v1_bc54 = load i32, i32* @r7, align 4
  %v9_bc54 = icmp eq i32 %v1_bc50, %v1_bc54
  store i1 %v9_bc54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bc50, i32* %stack_var_-44, align 4
  %v5_bc5c = icmp slt i32 %v1_bc50, %v1_bc54
  br i1 %v5_bc5c, label %dec_label_pc_bb74, label %dec_label_pc_bc60

dec_label_pc_bc60:                                ; preds = %dec_label_pc_bbdc
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_bc64 = icmp eq i32 %v1_bc54, 0
  store i1 %v2_bc64, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bc64, label %dec_label_pc_bb60, label %dec_label_pc_bb70

dec_label_pc_bc74:                                ; preds = %dec_label_pc_bb74
  %v1_bc74 = add i32 %v2_bb7c, 16
  %v2_bc74 = inttoptr i32 %v1_bc74 to i32*
  %v3_bc74 = load i32, i32* %v2_bc74, align 4
  %v0_bc78 = call i32 @function_e29c()
  store i32 %v0_bc78, i32* %r0.global-to-local, align 4
  %v3_bc7c = load i32, i32* %stack_var_-44, align 4
  %v5_bc84 = mul i32 %v3_bc7c, 24
  %v1_bc88 = and i32 %v3_bc74, 16711680
  store i32 %v1_bc88, i32* %ip.global-to-local, align 4
  %v3_bc8c = udiv i32 %v3_bc74, 16777216
  %v4_bc90 = udiv i32 %v1_bc88, 256
  %v5_bc90 = or i32 %v4_bc90, %v3_bc8c
  store i32 %v5_bc90, i32* %r2.global-to-local, align 4
  %v1_bc94 = load i32, i32* @r8, align 4
  %v2_bc94 = add i32 %v1_bc94, %v5_bc84
  store i32 %v2_bc94, i32* %r1.global-to-local, align 4
  %v1_bc98 = and i32 %v3_bc74, 65280
  store i32 %v1_bc98, i32* %r3.global-to-local, align 4
  %v1_bc9c = add i32 %v2_bc94, 20
  %v2_bc9c = inttoptr i32 %v1_bc9c to i8*
  %v3_bc9c = load i8, i8* %v2_bc9c, align 1
  %v4_bc9c = zext i8 %v3_bc9c to i32
  store i32 %v4_bc9c, i32* %ip.global-to-local, align 4
  %v5_bca4 = call i32 @llvm.bswap.i32(i32 %v3_bc74)
  %v7_bca8 = lshr i32 %v0_bc78, %v4_bc9c
  %v8_bca8 = add i32 %v7_bca8, %v5_bca4
  store i32 %v8_bca8, i32* %r2.global-to-local, align 4
  %v1_bcac = and i32 %v8_bca8, 16711680
  store i32 %v1_bcac, i32* %r0.global-to-local, align 4
  %v1_bcb8 = and i32 %v8_bca8, 65280
  store i32 %v1_bcb8, i32* %r1.global-to-local, align 4
  %v5_bcc0 = call i32 @llvm.bswap.i32(i32 %v8_bca8)
  %v1_bcc4 = load i32, i32* @r5, align 4
  %v2_bcc4 = add i32 %v1_bcc4, 16
  %v3_bcc4 = inttoptr i32 %v2_bcc4 to i32*
  store i32 %v5_bcc0, i32* %v3_bcc4, align 4
  store i32 %v6_b98c, i32* %r3.global-to-local, align 4
  store i1 %v8_bccc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bccc, label %dec_label_pc_bcd4, label %dec_label_pc_bba4

dec_label_pc_bcd4:                                ; preds = %dec_label_pc_bc74, %dec_label_pc_bb98
  %v0_bcd4 = call i32 @function_e29c()
  store i32 %v0_bcd4, i32* %r0.global-to-local, align 4
  store i32 %v3_ba1c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_bce4, i1* %cpsr_z.global-to-local, align 1
  %v1_bce8 = load i32, i32* @r5, align 4
  %v2_bce8 = add i32 %v1_bce8, 12
  %v3_bce8 = inttoptr i32 %v2_bce8 to i32*
  store i32 %v0_bcd4, i32* %v3_bce8, align 4
  br i1 %v3_bce4, label %dec_label_pc_bcf0, label %dec_label_pc_bcd4.dec_label_pc_bbb8_crit_edge

dec_label_pc_bcd4.dec_label_pc_bbb8_crit_edge:    ; preds = %dec_label_pc_bcd4
  %v1_bbbc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bbb8

dec_label_pc_bcf0:                                ; preds = %dec_label_pc_bcd4, %dec_label_pc_bba4
  %v0_bcf0 = call i32 @function_e29c()
  %v1_bcf0 = trunc i32 %v0_bcf0 to i16
  %v3_bcf4 = load i32, i32* @r5, align 4
  %v4_bcf4 = add i32 %v3_bcf4, 4
  %v5_bcf4 = inttoptr i32 %v4_bcf4 to i16*
  store i16 %v1_bcf0, i16* %v5_bcf4, align 2
  store i32 %v3_b9fc, i32* %r0.global-to-local, align 4
  %v1_bcfc = load i32, i32* @r4, align 4
  %v9_bcfc = icmp eq i32 %v3_b9fc, %v1_bcfc
  store i1 %v9_bcfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bcfc, label %dec_label_pc_bd04, label %dec_label_pc_bbc4

dec_label_pc_bd04:                                ; preds = %dec_label_pc_bcf0, %dec_label_pc_bbb8
  %v0_bd04 = call i32 @function_e29c()
  %v1_bd04 = trunc i32 %v0_bd04 to i16
  store i32 %v0_bd04, i32* %r0.global-to-local, align 4
  store i32 %v3_ba14, i32* %r1.global-to-local, align 4
  %v1_bd0c = load i32, i32* @r4, align 4
  %v9_bd0c = icmp eq i32 %v3_ba14, %v1_bd0c
  store i1 %v9_bd0c, i1* %cpsr_z.global-to-local, align 1
  %v3_bd10 = load i32, i32* @r5, align 4
  %v4_bd10 = add i32 %v3_bd10, 20
  %v5_bd10 = inttoptr i32 %v4_bd10 to i16*
  store i16 %v1_bd04, i16* %v5_bd10, align 2
  br i1 %v9_bd0c, label %dec_label_pc_bd18, label %dec_label_pc_bbd0

dec_label_pc_bd18:                                ; preds = %dec_label_pc_bd04, %dec_label_pc_bbc4
  %v0_bd18 = call i32 @function_e29c()
  %v1_bd18 = trunc i32 %v0_bd18 to i16
  store i32 %v0_bd18, i32* %r0.global-to-local, align 4
  store i32 %v1_b978, i32* %r3.global-to-local, align 4
  store i1 %v2_bd20, i1* %cpsr_z.global-to-local, align 1
  %v3_bd24 = load i32, i32* @r6, align 4
  %v4_bd24 = add i32 %v3_bd24, 2
  %v5_bd24 = inttoptr i32 %v4_bd24 to i16*
  store i16 %v1_bd18, i16* %v5_bd24, align 2
  br i1 %v2_bd20, label %dec_label_pc_bbdc, label %dec_label_pc_bd2c

dec_label_pc_bd2c:                                ; preds = %dec_label_pc_bbd0, %dec_label_pc_bd18
  %v0_bd2c = load i32, i32* @r5, align 4
  %v1_bd2c = add i32 %v0_bd2c, 28
  store i32 %v1_bd2c, i32* %r0.global-to-local, align 4
  store i32 %v0_ba44, i32* %r1.global-to-local, align 4
  %v2_bd34 = inttoptr i32 %v1_bd2c to i16*
  %v3_bd34 = call i32 @function_e430(i16* %v2_bd34, i32 %v0_ba44)
  store i32 %v3_bd34, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bbdc

dec_label_pc_bd3c:                                ; preds = %dec_label_pc_b9b0
  %v0_bd3c = load i32, i32* @fp, align 4
  store i32 %v0_bd3c, i32* %r0.global-to-local, align 4
  %v1_bd40 = call i32 @function_115e0(i32 %v0_bd3c)
  store i32 %v1_bd40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bd44

dec_label_pc_bd44:                                ; preds = %dec_label_pc_b868, %dec_label_pc_bd3c
  %v1_bd4c = phi i32 [ %v3_b9a0, %dec_label_pc_b868 ], [ %v1_bd40, %dec_label_pc_bd3c ]
  store i32 %v18_b868, i32* %sb.global-to-local, align 4
  store i32 %v27_b868, i32* %lr.global-to-local, align 4
  ret i32 %v1_bd4c

; uselistorder directives
  uselistorder i32 %v0_bd18, { 1, 0 }
  uselistorder i32 %v0_bd04, { 1, 0 }
  uselistorder i32 %v1_bcfc, { 1, 0 }
  uselistorder i32 %v3_bc74, { 2, 1, 3, 0 }
  uselistorder i32 %v1_bc50, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_bc1c, { 1, 0 }
  uselistorder i32 %v4_bc0c, { 1, 0 }
  uselistorder i1 %v2_bd20, { 2, 3, 1, 0 }
  uselistorder i1 %v3_bce4, { 3, 2, 0, 1 }
  uselistorder i32 %v3_ba90, { 1, 0 }
  uselistorder i16 %rev, { 1, 0 }
  uselistorder i32 %v3_ba78, { 1, 0 }
  uselistorder i32 %v1_ba48, { 1, 0, 2 }
  uselistorder i32 %v1_ba44, { 1, 0, 2 }
  uselistorder i32 %v3_ba1c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_ba04, { 1, 0, 2, 3 }
  uselistorder i32 %v3_b9fc, { 4, 3, 2, 1, 5, 0 }
  uselistorder i32 %v0_b9f4, { 1, 0, 2 }
  uselistorder i32 %v0_ba44, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32 %v3_b9e4, { 3, 1, 2, 0 }
  uselistorder i1 %v7_b9d0, { 1, 0 }
  uselistorder i1 %v7_b9a4, { 1, 0 }
  uselistorder i32 %v3_b9a0, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_b98c, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v1_b978, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v1_b904, { 1, 2, 0 }
  uselistorder i32 %v1_b8e0, { 2, 1, 0 }
  uselistorder i32 %v6_b8d8, { 1, 0 }
  uselistorder i32 %v7_b8c0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v6_b89c, { 2, 1, 3, 0 }
  uselistorder i32 %v2_b884, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %sb.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 12, 13, 14, 16, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r2.global-to-local, { 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 2, 3, 4, 5, 7, 6, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32* %r1.global-to-local, { 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 3, 2, 4, 6, 5, 7, 8, 10, 9, 12, 11, 0 }
  uselistorder i32* %r0.global-to-local, { 15, 14, 17, 16, 19, 20, 18, 22, 21, 24, 23, 25, 28, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 43, 44, 45, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32* %ip.global-to-local, { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4 }
  uselistorder i1* %cpsr_z.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 1, 2 }
  uselistorder i32 (i16*, i32)* @function_e430, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bd44, { 1, 0 }
  uselistorder label %dec_label_pc_bd2c, { 1, 0 }
  uselistorder label %dec_label_pc_bbdc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_bb70, { 1, 0 }
  uselistorder label %dec_label_pc_bb60, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bb60.preheader, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
}

define i32 @function_bd54(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_bd54:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v3_bd54 = load i32, i32* @r4, align 4
  %v27_bd54 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @sl, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_bd70 = call i32 @function_1295c(i32 %arg1, i32 4)
  %v0_bd74 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_bd70, i32* @fp, align 4
  %v0_bd84 = load i32, i32* @r4, align 4
  %v5_bd88 = inttoptr i32 %v0_bd74 to i32*
  %v6_bd88 = call i32 @function_8570(i32 %v0_bd84, i32* %v5_bd88, i32 2, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v1_bd94 = urem i32 %v6_bd88, 256
  store i32 %v1_bd94, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bda0 = load i32, i32* @r4, align 4
  %v0_bda4 = load i32, i32* @r5, align 4
  %v5_bda8 = trunc i32 %v6_bd88 to i8
  %v6_bdac = inttoptr i32 %v0_bda4 to i32*
  %v7_bdac = call i32 @function_8570(i32 %v0_bda0, i32* %v6_bdac, i32 3, i32 65535, i32 %v6_bd88)
  %v0_bdb0 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_bdac, i32* @r7, align 4
  %v0_bdc0 = load i32, i32* @r4, align 4
  %v5_bdc4 = inttoptr i32 %v0_bdb0 to i32*
  %v6_bdc4 = call i32 @function_8570(i32 %v0_bdc0, i32* %v5_bdc4, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_bdcc = urem i32 %v6_bdc4, 256
  store i32 %v1_bdcc, i32* %ip.global-to-local, align 4
  %v0_bdd0 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bddc = load i32, i32* @r4, align 4
  %sext = mul i32 %v6_bdc4, 16777216
  %v5_bde4 = sdiv i32 %sext, 16777216
  %v6_bde4 = inttoptr i32 %v0_bdd0 to i32*
  %v7_bde4 = call i32 @function_8570(i32 %v0_bddc, i32* %v6_bde4, i32 5, i32 0, i32 %v5_bde4)
  %v1_bdf0 = urem i32 %v7_bde4, 256
  store i32 %v1_bdf0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_bdfc = load i32, i32* @r4, align 4
  %v0_be00 = load i32, i32* @r5, align 4
  %v5_be08 = inttoptr i32 %v0_be00 to i32*
  %v6_be08 = call i32 @function_8570(i32 %v0_bdfc, i32* %v5_be08, i32 6, i32 65535, i32 %v1_bdf0)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_be18 = load i32, i32* @r5, align 4
  store i32 %v6_be08, i32* @r6, align 4
  %v0_be20 = load i32, i32* @r4, align 4
  %v5_be24 = inttoptr i32 %v0_be18 to i32*
  %v6_be24 = call i32 @function_8570(i32 %v0_be20, i32* %v5_be24, i32 7, i32 27015, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_be24, i32* @r4, align 4
  %v1_be30 = call i32 @function_104ec(i32 25)
  %v3_be3c = call i32 @function_10428(i32 25, i32* nonnull %stack_var_-48)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_be50 = call i32 @function_11df4(i32 2, i32 3, i32 17)
  %v7_be54 = icmp eq i32 %v3_be50, -1
  store i1 %v7_be54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_be50, i32* @sb, align 4
  br i1 %v7_be54, label %dec_label_pc_c17c, label %dec_label_pc_be60

dec_label_pc_be60:                                ; preds = %dec_label_pc_bd54
  store i32 1, i32* %stack_var_-44, align 4
  %v6_be68 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_be68, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_be7c = call i32 @function_11db0(i32 %v3_be50, i32 0, i32 3, i32 %v6_be68, i32 ptrtoint (i32* @0 to i32))
  %v7_be80 = icmp eq i32 %v5_be7c, -1
  store i1 %v7_be80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_be80, label %dec_label_pc_c174, label %dec_label_pc_be88

dec_label_pc_be88:                                ; preds = %dec_label_pc_be60
  %v0_be88 = load i32, i32* @r4, align 4
  %v3_be88 = mul i32 %v0_be88, 65536
  store i32 %v3_be88, i32* @lr, align 4
  %v0_be8c = load i32, i32* @r7, align 4
  %v0_be90 = load i32, i32* @r6, align 4
  %v3_be90 = mul i32 %v0_be90, 65536
  store i32 %v3_be90, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_be98 = urem i32 %v0_be8c, 65536
  %v3_be9c = urem i32 %v0_be90, 65536
  store i32 %v3_be9c, i32* %r2.global-to-local, align 4
  %v3_bea0 = urem i32 %v0_be88, 65536
  store i32 %v3_bea0, i32* %r3.global-to-local, align 4
  %v0_bea4 = load i32, i32* @r8, align 4
  %v2_bea4 = icmp eq i32 %v0_bea4, 0
  store i1 %v2_bea4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bea4, label %dec_label_pc_bfe0.preheader, label %dec_label_pc_bebc

dec_label_pc_bebc:                                ; preds = %dec_label_pc_be88
  %tmp33 = mul i32 %v0_be8c, 256
  %v3_becc = and i32 %tmp33, 65280
  store i32 %v3_becc, i32* %r3.global-to-local, align 4
  %tmp34 = mul i32 %v0_be90, 256
  %v3_bed0 = and i32 %tmp34, 65280
  store i32 %v3_bed0, i32* %r2.global-to-local, align 4
  %tmp35 = mul i32 %v0_be88, 256
  %v3_bed4 = and i32 %tmp35, 65280
  %tmp36 = udiv i32 %v0_be8c, 256
  %v4_bed8 = urem i32 %tmp36, 256
  %v5_bed8 = or i32 %v4_bed8, %v3_becc
  store i32 %v5_bed8, i32* @r5, align 4
  %tmp37 = udiv i32 %v0_be90, 256
  %v4_bedc = urem i32 %tmp37, 256
  %v5_bedc = or i32 %v4_bedc, %v3_bed0
  store i32 %v5_bedc, i32* @r6, align 4
  %tmp38 = udiv i32 %v0_be88, 256
  %v4_bee0 = urem i32 %tmp38, 256
  %v5_bee0 = or i32 %v4_bee0, %v3_bed4
  store i32 %v5_bee0, i32* @r7, align 4
  %v1_bf68 = trunc i32 %v5_bde4 to i8
  br label %dec_label_pc_bee4

dec_label_pc_bee4:                                ; preds = %.thread, %dec_label_pc_bebc
  %v2_beec = call i32 @function_1295c(i32 128, i32 1)
  %v3_bef0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bef0, i32* %r2.global-to-local, align 4
  %v5_bef8 = mul i32 %v3_bef0, 24
  store i32 %v5_bef8, i32* %r3.global-to-local, align 4
  %v1_befc = load i32, i32* @fp, align 4
  %v2_befc = load i32, i32* @r4, align 4
  %v5_befc = mul i32 %v2_befc, 4
  %v6_befc = add i32 %v5_befc, %v1_befc
  %v7_befc = inttoptr i32 %v6_befc to i32*
  store i32 %v2_beec, i32* %v7_befc, align 4
  %v0_bf00 = load i32, i32* %r3.global-to-local, align 4
  %v1_bf00 = load i32, i32* @sl, align 4
  %v2_bf00 = add i32 %v1_bf00, %v0_bf00
  store i32 %v2_bf00, i32* %r3.global-to-local, align 4
  %v0_bf04 = load i32, i32* @fp, align 4
  %v1_bf04 = load i32, i32* %r2.global-to-local, align 4
  %v4_bf04 = mul i32 %v1_bf04, 4
  %v5_bf04 = add i32 %v4_bf04, %v0_bf04
  %v6_bf04 = inttoptr i32 %v5_bf04 to i32*
  %v7_bf04 = load i32, i32* %v6_bf04, align 4
  store i32 %v7_bf04, i32* @lr, align 4
  %v1_bf0c = inttoptr i32 %v7_bf04 to i8*
  %v2_bf0c = load i8, i8* %v1_bf0c, align 1
  %tmp = urem i8 %v2_bf0c, 16
  %v1_bf10 = zext i8 %tmp to i32
  %v1_bf14 = or i32 %v1_bf10, 64
  store i32 %v1_bf14, i32* %r3.global-to-local, align 4
  %v1_bf1c = trunc i32 %v1_bf14 to i8
  store i8 %v1_bf1c, i8* %v1_bf0c, align 1
  %v0_bf20 = load i32, i32* @lr, align 4
  %v1_bf20 = inttoptr i32 %v0_bf20 to i8*
  %v2_bf20 = load i8, i8* %v1_bf20, align 1
  %v1_bf24 = and i8 %v2_bf20, -16
  %v1_bf28 = or i8 %v1_bf24, 5
  store i8 %v1_bf28, i8* %v1_bf20, align 1
  %v2_bf34 = load i32, i32* @lr, align 4
  %v3_bf34 = add i32 %v2_bf34, 1
  %v4_bf34 = inttoptr i32 %v3_bf34 to i8*
  store i8 %v5_bda8, i8* %v4_bf34, align 1
  %v3_bf38 = load i32, i32* %stack_var_-48, align 4
  %v3_bf3c = mul i32 %v3_bf38, 65536
  %v1_bf40 = add i32 %v3_bf3c, 2097152
  %v3_bf44 = udiv i32 %v1_bf40, 256
  %v4_bf4c = udiv i32 %v1_bf40, 16777216
  %v5_bf4c = or i32 %v3_bf44, %v4_bf4c
  %v3_bf50 = urem i32 %v3_bf38, 65536
  store i32 %v3_bf50, i32* %r2.global-to-local, align 4
  %v1_bf54 = trunc i32 %v5_bf4c to i16
  %v2_bf54 = load i32, i32* @lr, align 4
  %v3_bf54 = add i32 %v2_bf54, 2
  %v4_bf54 = inttoptr i32 %v3_bf54 to i16*
  store i16 %v1_bf54, i16* %v4_bf54, align 2
  %v0_bf58 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf58 = mul i32 %v0_bf58, 65536
  %v3_bf60 = add i32 %v1_bf58, 786432
  store i32 %v3_bf60, i32* %r2.global-to-local, align 4
  store i32 %v1_bdf0, i32* %ip.global-to-local, align 4
  %v2_bf68 = load i32, i32* @lr, align 4
  %v3_bf68 = add i32 %v2_bf68, 8
  %v4_bf68 = inttoptr i32 %v3_bf68 to i8*
  store i8 %v1_bf68, i8* %v4_bf68, align 1
  %v0_bf6c = load i32, i32* %r2.global-to-local, align 4
  %v3_bf6c = udiv i32 %v0_bf6c, 256
  %v1_bf70 = and i32 %v3_bf6c, 65280
  %v0_bf74 = load i32, i32* %ip.global-to-local, align 4
  %v2_bf74 = icmp eq i32 %v0_bf74, 0
  store i1 %v2_bf74, i1* %cpsr_z.global-to-local, align 1
  %v4_bf78 = udiv i32 %v0_bf6c, 16777216
  %v5_bf78 = or i32 %v1_bf70, %v4_bf78
  store i32 %v5_bf78, i32* %ip.global-to-local, align 4
  %v2_bf80 = load i32, i32* @lr, align 4
  %v3_bf80 = add i32 %v2_bf80, 9
  %v4_bf80 = inttoptr i32 %v3_bf80 to i8*
  store i8 17, i8* %v4_bf80, align 1
  store i32 ptrtoint (i32* @global_var_212d8.46 to i32), i32* %r3.global-to-local, align 4
  %v0_bf88 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bf88, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_bee4
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_bf8c = load i32, i32* @lr, align 4
  %v4_bf8c = add i32 %v3_bf8c, 6
  %v5_bf8c = inttoptr i32 %v4_bf8c to i16*
  store i16 64, i16* %v5_bf8c, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_bee4, %bb
  %v2_bf90 = load i32, i32* @global_var_212d8.46, align 4
  %v1_bf94 = load i32, i32* @lr, align 4
  %v2_bf94 = add i32 %v1_bf94, 12
  %v3_bf94 = inttoptr i32 %v2_bf94 to i32*
  store i32 %v2_bf90, i32* %v3_bf94, align 4
  store i32 %v2_bf00, i32* %r2.global-to-local, align 4
  %v1_bf9c = add i32 %v2_bf00, 16
  %v2_bf9c = inttoptr i32 %v1_bf9c to i32*
  %v3_bf9c = load i32, i32* %v2_bf9c, align 4
  %v1_bfa0 = load i32, i32* @lr, align 4
  %v2_bfa0 = add i32 %v1_bfa0, 16
  %v3_bfa0 = inttoptr i32 %v2_bfa0 to i32*
  store i32 %v3_bf9c, i32* %v3_bfa0, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_bfa8 = load i32, i32* @lr, align 4
  %v1_bfa8 = add i32 %v0_bfa8, 20
  store i32 %v1_bfa8, i32* %r4.global-to-local, align 4
  %v2_bfac = add i32 %v0_bfa8, 28
  %v3_bfac = inttoptr i32 %v2_bfac to i32*
  store i32 -1, i32* %v3_bfac, align 4
  %v0_bfb0 = load i32, i32* @r5, align 4
  %v1_bfb0 = trunc i32 %v0_bfb0 to i16
  %v2_bfb0 = load i32, i32* @lr, align 4
  %v3_bfb0 = add i32 %v2_bfb0, 4
  %v4_bfb0 = inttoptr i32 %v3_bfb0 to i16*
  store i16 %v1_bfb0, i16* %v4_bfb0, align 2
  %v0_bfb4 = load i32, i32* @lr, align 4
  %v1_bfb4 = add i32 %v0_bfb4, 32
  %v0_bfb8 = load i32, i32* %ip.global-to-local, align 4
  %v1_bfb8 = trunc i32 %v0_bfb8 to i16
  %v2_bfb8 = load i32, i32* %r4.global-to-local, align 4
  %v3_bfb8 = add i32 %v2_bfb8, 4
  %v4_bfb8 = inttoptr i32 %v3_bfb8 to i16*
  store i16 %v1_bfb8, i16* %v4_bfb8, align 2
  %v0_bfbc = load i32, i32* @r7, align 4
  %v1_bfbc = trunc i32 %v0_bfbc to i16
  %v2_bfbc = load i32, i32* %r4.global-to-local, align 4
  %v3_bfbc = add i32 %v2_bfbc, 2
  %v4_bfbc = inttoptr i32 %v3_bfbc to i16*
  store i16 %v1_bfbc, i16* %v4_bfbc, align 2
  %v0_bfc0 = load i32, i32* @r6, align 4
  %v1_bfc0 = trunc i32 %v0_bfc0 to i16
  %v2_bfc0 = load i32, i32* @lr, align 4
  %v3_bfc0 = add i32 %v2_bfc0, 20
  %v4_bfc0 = inttoptr i32 %v3_bfc0 to i16*
  store i16 %v1_bfc0, i16* %v4_bfc0, align 2
  %v3_bfc4 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_bfc4, i32* %r2.global-to-local, align 4
  %v3_bfc8 = call i32 @function_10b90(i32 %v1_bfb4, i32 %v3_be3c, i32 %v3_bfc4)
  %v3_bfcc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bfcc, i32* %r3.global-to-local, align 4
  %v1_bfd0 = add i32 %v3_bfcc, 1
  store i32 %v1_bfd0, i32* @r4, align 4
  %v1_bfd4 = load i32, i32* @r8, align 4
  %v9_bfd4 = icmp eq i32 %v1_bfd0, %v1_bfd4
  store i1 %v9_bfd4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bfd0, i32* %stack_var_-44, align 4
  %v5_bfdc = icmp slt i32 %v1_bfd0, %v1_bfd4
  br i1 %v5_bfdc, label %dec_label_pc_bee4, label %dec_label_pc_bfe0.preheader

dec_label_pc_bfe0.preheader:                      ; preds = %.thread, %dec_label_pc_be88
  %v0_bfe4.ph = phi i32 [ 0, %dec_label_pc_be88 ], [ %v1_bfd4, %.thread ]
  %v3_c020 = icmp eq i32 %v3_be98, 65535
  br label %dec_label_pc_bfe0

dec_label_pc_bfe0:                                ; preds = %dec_label_pc_bfe0, %dec_label_pc_c0cc, %dec_label_pc_bfe0.preheader
  %v0_bfe4 = phi i32 [ %v0_bfe4.ph, %dec_label_pc_bfe0.preheader ], [ 0, %dec_label_pc_c0cc ], [ 0, %dec_label_pc_bfe0 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_bfe4 = icmp eq i32 %v0_bfe4, 0
  store i1 %v2_bfe4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bfe4, label %dec_label_pc_bfe0, label %dec_label_pc_bff0

dec_label_pc_bff0:                                ; preds = %dec_label_pc_bfe0, %dec_label_pc_c0cc
  br label %dec_label_pc_bff4

dec_label_pc_bff4:                                ; preds = %dec_label_pc_c040, %dec_label_pc_bff0
  %v1_c004 = phi i32 [ %v1_c0bc, %dec_label_pc_c040 ], [ 0, %dec_label_pc_bff0 ]
  %v5_bff8 = mul i32 %v1_c004, 24
  %v1_bffc = load i32, i32* @sl, align 4
  %v2_bffc = add i32 %v1_bffc, %v5_bff8
  store i32 %v2_bffc, i32* %r3.global-to-local, align 4
  %v1_c000 = add i32 %v2_bffc, 20
  %v2_c000 = inttoptr i32 %v1_c000 to i8*
  %v3_c000 = load i8, i8* %v2_c000, align 1
  %v4_c000 = zext i8 %v3_c000 to i32
  store i32 %v4_c000, i32* %r2.global-to-local, align 4
  %v0_c004 = load i32, i32* @fp, align 4
  %v4_c004 = mul i32 %v1_c004, 4
  %v5_c004 = add i32 %v0_c004, %v4_c004
  %v6_c004 = inttoptr i32 %v5_c004 to i32*
  %v7_c004 = load i32, i32* %v6_c004, align 4
  store i32 %v7_c004, i32* @r5, align 4
  %v7_c00c = icmp eq i8 %v3_c000, 31
  store i1 %v7_c00c, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* @r7, align 4
  %v1_c014 = add i32 %v7_c004, 20
  store i32 %v1_c014, i32* @r6, align 4
  %tmp39 = icmp ult i8 %v3_c000, 32
  br i1 %tmp39, label %dec_label_pc_c0e0, label %dec_label_pc_c01c

dec_label_pc_c01c:                                ; preds = %dec_label_pc_bff4
  store i32 %v3_be98, i32* %r3.global-to-local, align 4
  store i1 %v3_c020, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c020, label %dec_label_pc_c140, label %dec_label_pc_c028

dec_label_pc_c028:                                ; preds = %dec_label_pc_c0e0, %dec_label_pc_c01c
  %v1_c02c = phi i32 [ %v1_c138, %dec_label_pc_c0e0 ], [ 65535, %dec_label_pc_c01c ]
  store i32 %v3_be9c, i32* %ip.global-to-local, align 4
  %v9_c02c = icmp eq i32 %v3_be9c, %v1_c02c
  store i1 %v9_c02c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c02c, label %dec_label_pc_c154, label %dec_label_pc_c034

dec_label_pc_c034:                                ; preds = %dec_label_pc_c140.dec_label_pc_c034_crit_edge, %dec_label_pc_c028
  %v1_c038 = phi i32 [ %v1_c038.pre, %dec_label_pc_c140.dec_label_pc_c034_crit_edge ], [ %v1_c02c, %dec_label_pc_c028 ]
  %v9_c038 = icmp eq i32 %v3_bea0, %v1_c038
  store i1 %v9_c038, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c038, label %dec_label_pc_c168, label %dec_label_pc_c040

dec_label_pc_c040:                                ; preds = %dec_label_pc_c154, %dec_label_pc_c034, %dec_label_pc_c168
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c044 = load i32, i32* @r5, align 4
  %v3_c044 = add i32 %v2_c044, 10
  %v4_c044 = inttoptr i32 %v3_c044 to i16*
  store i16 0, i16* %v4_c044, align 2
  %v0_c04c = load i32, i32* @r5, align 4
  store i32 %v0_c04c, i32* @r0, align 4
  %v2_c050 = call i32 @function_c848(i32 %v0_c04c, i32 20)
  %v3_c050 = trunc i32 %v2_c050 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_c058 = load i32, i32* @r5, align 4
  %v4_c058 = add i32 %v3_c058, 10
  %v5_c058 = inttoptr i32 %v4_c058 to i16*
  store i16 %v3_c050, i16* %v5_c058, align 2
  %v0_c05c = load i32, i32* %r3.global-to-local, align 4
  %v1_c05c = trunc i32 %v0_c05c to i16
  %v2_c05c = load i32, i32* @r6, align 4
  %v3_c05c = add i32 %v2_c05c, 6
  %v4_c05c = inttoptr i32 %v3_c05c to i16*
  store i16 %v1_c05c, i16* %v4_c05c, align 2
  %v3_c060 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_c060, i32* %r3.global-to-local, align 4
  %v0_c064 = load i32, i32* @r6, align 4
  store i32 %v0_c064, i32* @r1, align 4
  %v1_c068 = add i32 %v0_c064, 4
  %v2_c068 = inttoptr i32 %v1_c068 to i16*
  %v3_c068 = load i16, i16* %v2_c068, align 2
  %v4_c068 = zext i16 %v3_c068 to i32
  store i32 %v4_c068, i32* %r2.global-to-local, align 4
  %v1_c06c = add i32 %v3_c060, 12
  store i32 %v1_c06c, i32* %r3.global-to-local, align 4
  %v0_c070 = load i32, i32* @r5, align 4
  %v4_c074 = call i32 @function_c898(i32 %v0_c070, i32 %v0_c064, i32 %v4_c068, i32 %v1_c06c)
  %v5_c074 = trunc i32 %v4_c074 to i16
  %v3_c078 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c078, i32* %r3.global-to-local, align 4
  %v3_c07c = mul i32 %v3_c078, 32
  store i32 %v3_c07c, i32* %lr.global-to-local, align 4
  %v3_c080 = load i32, i32* @r6, align 4
  %v4_c080 = add i32 %v3_c080, 6
  %v5_c080 = inttoptr i32 %v4_c080 to i16*
  store i16 %v5_c074, i16* %v5_c080, align 2
  %v0_c084 = load i32, i32* %lr.global-to-local, align 4
  %v1_c084 = load i32, i32* %r3.global-to-local, align 4
  %tmp40 = mul i32 %v1_c084, -8
  %v5_c084 = add i32 %v0_c084, %tmp40
  store i32 %v5_c084, i32* %lr.global-to-local, align 4
  %v0_c088 = load i32, i32* @r6, align 4
  %v1_c088 = add i32 %v0_c088, 2
  %v2_c088 = inttoptr i32 %v1_c088 to i16*
  %v3_c088 = load i16, i16* %v2_c088, align 2
  %v3_c08c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_c08c, i32* %r2.global-to-local, align 4
  %v1_c090 = load i32, i32* @sl, align 4
  %v2_c090 = add i32 %v1_c090, %v5_c084
  store i32 %v2_c090, i32* @lr, align 4
  %v3_c094 = add i32 %v2_c090, 2
  %v4_c094 = inttoptr i32 %v3_c094 to i16*
  store i16 %v3_c088, i16* %v4_c094, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_c0a0 = load i32, i32* @r5, align 4
  %v0_c0a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c0a4 = add i32 %v0_c0a4, 32
  store i32 %v1_c0a4, i32* %r2.global-to-local, align 4
  %v0_c0a8 = load i32, i32* @sb, align 4
  %v0_c0ac = load i32, i32* @lr, align 4
  %v6_c0b4 = call i32 @function_11d70(i32 %v0_c0a8, i32 %v0_c0a0, i32 %v1_c0a4, i32 16384, i32 %v0_c0ac, i32 16)
  %v3_c0b8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c0b8, i32* %r3.global-to-local, align 4
  %v1_c0bc = add i32 %v3_c0b8, 1
  %v1_c0c0 = load i32, i32* @r8, align 4
  %v9_c0c0 = icmp eq i32 %v1_c0bc, %v1_c0c0
  store i1 %v9_c0c0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c0bc, i32* %stack_var_-44, align 4
  %v5_c0c8 = icmp slt i32 %v1_c0bc, %v1_c0c0
  br i1 %v5_c0c8, label %dec_label_pc_bff4, label %dec_label_pc_c0cc

dec_label_pc_c0cc:                                ; preds = %dec_label_pc_c040
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c0d0 = icmp eq i32 %v1_c0c0, 0
  store i1 %v2_c0d0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c0d0, label %dec_label_pc_bfe0, label %dec_label_pc_bff0

dec_label_pc_c0e0:                                ; preds = %dec_label_pc_bff4
  %v1_c0e0 = add i32 %v2_bffc, 16
  %v2_c0e0 = inttoptr i32 %v1_c0e0 to i32*
  %v3_c0e0 = load i32, i32* %v2_c0e0, align 4
  store i32 %v3_c0e0, i32* @r4, align 4
  %v0_c0e4 = call i32 @function_e29c()
  %v3_c0e8 = load i32, i32* %stack_var_-44, align 4
  %v5_c0f0 = mul i32 %v3_c0e8, 24
  %v0_c0f4 = load i32, i32* @r4, align 4
  %v1_c0f4 = and i32 %v0_c0f4, 16711680
  store i32 %v1_c0f4, i32* %ip.global-to-local, align 4
  %v3_c0f8 = udiv i32 %v0_c0f4, 16777216
  %v4_c0fc = udiv i32 %v1_c0f4, 256
  %v5_c0fc = or i32 %v4_c0fc, %v3_c0f8
  store i32 %v5_c0fc, i32* %r2.global-to-local, align 4
  %v1_c100 = load i32, i32* @sl, align 4
  %v2_c100 = add i32 %v1_c100, %v5_c0f0
  %v1_c104 = and i32 %v0_c0f4, 65280
  store i32 %v1_c104, i32* %r3.global-to-local, align 4
  %v1_c108 = add i32 %v2_c100, 20
  %v2_c108 = inttoptr i32 %v1_c108 to i8*
  %v3_c108 = load i8, i8* %v2_c108, align 1
  %v4_c108 = zext i8 %v3_c108 to i32
  store i32 %v4_c108, i32* %ip.global-to-local, align 4
  %v5_c110 = call i32 @llvm.bswap.i32(i32 %v0_c0f4)
  %v7_c114 = lshr i32 %v0_c0e4, %v4_c108
  %v8_c114 = add i32 %v7_c114, %v5_c110
  store i32 %v8_c114, i32* %r2.global-to-local, align 4
  %v5_c12c = call i32 @llvm.bswap.i32(i32 %v8_c114)
  %v1_c130 = load i32, i32* @r5, align 4
  %v2_c130 = add i32 %v1_c130, 16
  %v3_c130 = inttoptr i32 %v2_c130 to i32*
  store i32 %v5_c12c, i32* %v3_c130, align 4
  store i32 %v3_be98, i32* %r3.global-to-local, align 4
  %v1_c138 = load i32, i32* @r7, align 4
  %v9_c138 = icmp eq i32 %v3_be98, %v1_c138
  store i1 %v9_c138, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c138, label %dec_label_pc_c140, label %dec_label_pc_c028

dec_label_pc_c140:                                ; preds = %dec_label_pc_c0e0, %dec_label_pc_c01c
  %v0_c140 = call i32 @function_e29c()
  %v1_c140 = trunc i32 %v0_c140 to i16
  store i32 %v3_be9c, i32* %ip.global-to-local, align 4
  %v1_c148 = load i32, i32* @r7, align 4
  %v9_c148 = icmp eq i32 %v3_be9c, %v1_c148
  store i1 %v9_c148, i1* %cpsr_z.global-to-local, align 1
  %v3_c14c = load i32, i32* @r5, align 4
  %v4_c14c = add i32 %v3_c14c, 4
  %v5_c14c = inttoptr i32 %v4_c14c to i16*
  store i16 %v1_c140, i16* %v5_c14c, align 2
  br i1 %v9_c148, label %dec_label_pc_c154, label %dec_label_pc_c140.dec_label_pc_c034_crit_edge

dec_label_pc_c140.dec_label_pc_c034_crit_edge:    ; preds = %dec_label_pc_c140
  %v1_c038.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_c034

dec_label_pc_c154:                                ; preds = %dec_label_pc_c140, %dec_label_pc_c028
  %v0_c154 = call i32 @function_e29c()
  %v1_c154 = trunc i32 %v0_c154 to i16
  %v1_c15c = load i32, i32* @r7, align 4
  %v9_c15c = icmp eq i32 %v3_bea0, %v1_c15c
  store i1 %v9_c15c, i1* %cpsr_z.global-to-local, align 1
  %v3_c160 = load i32, i32* @r5, align 4
  %v4_c160 = add i32 %v3_c160, 20
  %v5_c160 = inttoptr i32 %v4_c160 to i16*
  store i16 %v1_c154, i16* %v5_c160, align 2
  br i1 %v9_c15c, label %dec_label_pc_c168, label %dec_label_pc_c040

dec_label_pc_c168:                                ; preds = %dec_label_pc_c154, %dec_label_pc_c034
  %v0_c168 = call i32 @function_e29c()
  %v1_c168 = trunc i32 %v0_c168 to i16
  %v3_c16c = load i32, i32* @r6, align 4
  %v4_c16c = add i32 %v3_c16c, 2
  %v5_c16c = inttoptr i32 %v4_c16c to i16*
  store i16 %v1_c168, i16* %v5_c16c, align 2
  br label %dec_label_pc_c040

dec_label_pc_c174:                                ; preds = %dec_label_pc_be60
  %v0_c174 = load i32, i32* @sb, align 4
  %v1_c178 = call i32 @function_115e0(i32 %v0_c174)
  br label %dec_label_pc_c17c

dec_label_pc_c17c:                                ; preds = %dec_label_pc_bd54, %dec_label_pc_c174
  %v1_c184 = phi i32 [ %v3_be50, %dec_label_pc_bd54 ], [ %v1_c178, %dec_label_pc_c174 ]
  store i32 %v3_bd54, i32* %r4.global-to-local, align 4
  store i32 %v27_bd54, i32* %lr.global-to-local, align 4
  ret i32 %v1_c184

; uselistorder directives
  uselistorder i32 %v1_c138, { 1, 0 }
  uselistorder i32 %v0_c0f4, { 1, 2, 0, 3 }
  uselistorder i32 %v1_c0bc, { 2, 0, 3, 1 }
  uselistorder i32 %v5_c084, { 1, 0 }
  uselistorder i1 %v3_c020, { 1, 0 }
  uselistorder i32 %v1_bfd0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_bf38, { 1, 0 }
  uselistorder i32 %v3_bed0, { 1, 0 }
  uselistorder i32 %v3_becc, { 1, 0 }
  uselistorder i32 %v0_be90, { 1, 0, 3, 2 }
  uselistorder i32 %v0_be8c, { 1, 0, 2 }
  uselistorder i32 %v0_be88, { 1, 0, 3, 2 }
  uselistorder i1 %v7_be80, { 1, 0 }
  uselistorder i1 %v7_be54, { 1, 0 }
  uselistorder i32 %v3_be50, { 1, 2, 3, 0 }
  uselistorder i32 %v1_bdf0, { 1, 2, 0 }
  uselistorder i32 %v5_bde4, { 1, 0 }
  uselistorder i32 %v6_bd88, { 1, 2, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 0 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_c17c, { 1, 0 }
  uselistorder label %dec_label_pc_c040, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bff0, { 1, 0 }
  uselistorder label %dec_label_pc_bfe0, { 1, 0, 2 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c18c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c18c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-2124 = alloca i32, align 4
  %v18_c18c = load i32, i32* @sb, align 4
  %v27_c18c = load i32, i32* @lr, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_c1ac = call i32 @function_1295c(i32 %arg1, i32 4)
  %v0_c1b0 = load i32, i32* @r5, align 4
  store i32 %v0_c1b0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_c1bc = load i32, i32* @r4, align 4
  store i32 %v0_c1bc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_c1c4 = inttoptr i32 %v0_c1b0 to i32*
  %v6_c1c4 = call i32 @function_8570(i32 %v0_c1bc, i32* %v5_c1c4, i32 2, i32 0, i32 %v2_c1ac)
  %v1_c1d0 = urem i32 %v6_c1c4, 256
  store i32 %v1_c1d0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c1dc = load i32, i32* @r4, align 4
  store i32 %v0_c1dc, i32* %r0.global-to-local, align 4
  %v0_c1e0 = load i32, i32* @r5, align 4
  store i32 %v0_c1e0, i32* %r1.global-to-local, align 4
  %sext22 = mul i32 %v6_c1c4, 16777216
  %v5_c1e8 = sdiv i32 %sext22, 16777216
  %v6_c1e8 = inttoptr i32 %v0_c1e0 to i32*
  %v7_c1e8 = call i32 @function_8570(i32 %v0_c1dc, i32* %v6_c1e8, i32 3, i32 65535, i32 %v5_c1e8)
  %v0_c1ec = load i32, i32* @r5, align 4
  store i32 %v0_c1ec, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_c1f8 = load i32, i32* @r4, align 4
  store i32 %v0_c1f8, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_c200 = inttoptr i32 %v0_c1ec to i32*
  %v6_c200 = call i32 @function_8570(i32 %v0_c1f8, i32* %v5_c200, i32 4, i32 64, i32 %v7_c1e8)
  %v1_c208 = urem i32 %v6_c200, 256
  store i32 %v1_c208, i32* %ip.global-to-local, align 4
  %v0_c20c = load i32, i32* @r5, align 4
  store i32 %v0_c20c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c218 = load i32, i32* @r4, align 4
  store i32 %v0_c218, i32* %r0.global-to-local, align 4
  %sext23 = mul i32 %v6_c200, 16777216
  %v5_c220 = sdiv i32 %sext23, 16777216
  %v6_c220 = inttoptr i32 %v0_c20c to i32*
  %v7_c220 = call i32 @function_8570(i32 %v0_c218, i32* %v6_c220, i32 5, i32 0, i32 %v5_c220)
  %v1_c22c = urem i32 %v7_c220, 256
  store i32 %v1_c22c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c238 = load i32, i32* @r4, align 4
  store i32 %v0_c238, i32* %r0.global-to-local, align 4
  %v0_c23c = load i32, i32* @r5, align 4
  store i32 %v0_c23c, i32* %r1.global-to-local, align 4
  %v5_c244 = inttoptr i32 %v0_c23c to i32*
  %v6_c244 = call i32 @function_8570(i32 %v0_c238, i32* %v5_c244, i32 6, i32 65535, i32 %v1_c22c)
  %v0_c248 = load i32, i32* @r5, align 4
  store i32 %v0_c248, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_c254 = load i32, i32* @r4, align 4
  store i32 %v0_c254, i32* %r0.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v5_c25c = inttoptr i32 %v0_c248 to i32*
  %v6_c25c = call i32 @function_8570(i32 %v0_c254, i32* %v5_c25c, i32 7, i32 53, i32 %v6_c244)
  %v0_c268 = load i32, i32* @r5, align 4
  store i32 %v0_c268, i32* %r1.global-to-local, align 4
  %v0_c26c = load i32, i32* @r4, align 4
  store i32 %v0_c26c, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_c278 = inttoptr i32 %v0_c268 to i32*
  %v6_c278 = call i32 @function_8570(i32 %v0_c26c, i32* %v5_c278, i32 9, i32 65535, i32 %v6_c25c)
  %v0_c27c = load i32, i32* @r5, align 4
  store i32 %v0_c27c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_c288 = load i32, i32* @r4, align 4
  store i32 %v0_c288, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v5_c290 = inttoptr i32 %v0_c27c to i32*
  %v6_c290 = call i32 @function_8570(i32 %v0_c288, i32* %v5_c290, i32 0, i32 12, i32 %v6_c278)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c29c = load i32, i32* @r5, align 4
  store i32 %v0_c29c, i32* %r1.global-to-local, align 4
  store i32 %v6_c290, i32* %sb.global-to-local, align 4
  %v0_c2a4 = load i32, i32* @r4, align 4
  store i32 %v0_c2a4, i32* %r0.global-to-local, align 4
  %v4_c2a8 = inttoptr i32 %v0_c29c to i32*
  %v5_c2a8 = call i32 @function_8190(i32 %v0_c2a4, i32* %v4_c2a8, i32 8, i32 0)
  store i32 %v5_c2a8, i32* @r7, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_c2b4 = call i32 @function_104ec(i32 26)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_c2c0 = call i32 @function_10428(i32 26, i32* null)
  store i32 %v3_c2c0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_c2c8 = call i32 @function_111ec(i32 %v3_c2c0, i32 0)
  store i32 %v2_c2c8, i32* @r4, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_c2d4 = call i32 @function_1044c(i32 26)
  store i32 %v1_c2d4, i32* %r0.global-to-local, align 4
  %v0_c2d8 = load i32, i32* @r4, align 4
  %v1_c2d8 = icmp slt i32 %v0_c2d8, 0
  %v2_c2d8 = icmp eq i32 %v0_c2d8, 0
  store i1 %v2_c2d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_c2d8, label %dec_label_pc_c7d0, label %dec_label_pc_c2e0

dec_label_pc_c2e0:                                ; preds = %dec_label_pc_c18c
  %v2_c2e4 = ptrtoint i32* %stack_var_-2124 to i32
  store i32 %v2_c2e4, i32* @sl, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_c2e4, i32* %r1.global-to-local, align 4
  store i32 %v0_c2d8, i32* %r0.global-to-local, align 4
  %v1_c2f4 = call i32 @function_11378(i32 %v0_c2d8)
  store i32 %v1_c2f4, i32* @r5, align 4
  %v0_c2fc = load i32, i32* @r4, align 4
  store i32 %v0_c2fc, i32* %r0.global-to-local, align 4
  %v1_c300 = call i32 @function_115e0(i32 %v0_c2fc)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_c308 = call i32 @function_104ec(i32 27)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v3_c314 = call i32 @function_10428(i32 27, i32* null)
  %v0_c318 = load i32, i32* @r5, align 4
  store i32 %v0_c318, i32* @r1, align 4
  store i32 %v3_c314, i32* %r2.global-to-local, align 4
  store i32 %v2_c2e4, i32* %r0.global-to-local, align 4
  %v3_c324 = bitcast i32* %stack_var_-2124 to i8*
  %v4_c324 = call i32 @function_10e70(i8* %v3_c324, i32 %v0_c318, i32 %v3_c314)
  store i32 %v4_c324, i32* @r6, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_c330 = call i32 @function_1044c(i32 27)
  store i32 %v1_c330, i32* %r0.global-to-local, align 4
  %v0_c334 = load i32, i32* @r6, align 4
  %v7_c334 = icmp eq i32 %v0_c334, -1
  store i1 %v7_c334, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c334, label %dec_label_pc_c7d0, label %dec_label_pc_c33c

dec_label_pc_c33c:                                ; preds = %dec_label_pc_c2e0
  %v0_c33c = load i32, i32* @r5, align 4
  %v9_c33c = icmp eq i32 %v0_c33c, %v0_c334
  store i1 %v9_c33c, i1* %cpsr_z.global-to-local, align 1
  %v7_c340 = icmp sgt i32 %v0_c33c, %v0_c334
  br i1 %v7_c340, label %dec_label_pc_c344, label %dec_label_pc_c7d0

dec_label_pc_c344:                                ; preds = %dec_label_pc_c33c
  %v0_c344 = load i32, i32* @sl, align 4
  %v2_c344 = add i32 %v0_c344, %v0_c334
  store i32 %v2_c344, i32* %r2.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_c370 = add i32 %v0_c33c, -1
  br label %dec_label_pc_c368

dec_label_pc_c354:                                ; preds = %dec_label_pc_c390, %bb103
  %v9_c354 = icmp eq i32 %v1_c370, %v0_c35c
  store i1 %v9_c354, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c354, label %dec_label_pc_c39c, label %dec_label_pc_c35c

dec_label_pc_c35c:                                ; preds = %dec_label_pc_c380, %dec_label_pc_c354, %bb
  %v0_c38c29 = phi i32 [ %v0_c38c, %dec_label_pc_c380 ], [ %v0_c38c30, %dec_label_pc_c354 ], [ %v0_c38c, %bb ]
  %v0_c36c25 = phi i32 [ 0, %dec_label_pc_c380 ], [ %v0_c36c26, %dec_label_pc_c354 ], [ 0, %bb ]
  %v1_c35c = add i32 %v0_c35c, 1
  %v9_c360 = icmp eq i32 %v1_c35c, %v0_c33c
  store i1 %v9_c360, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c360, label %dec_label_pc_c7d0, label %dec_label_pc_c368

dec_label_pc_c368:                                ; preds = %dec_label_pc_c35c, %dec_label_pc_c344
  %v0_c35c = phi i32 [ %v1_c35c, %dec_label_pc_c35c ], [ %v0_c334, %dec_label_pc_c344 ]
  %v0_c38c = phi i32 [ %v0_c38c29, %dec_label_pc_c35c ], [ 0, %dec_label_pc_c344 ]
  %v0_c36c = phi i32 [ %v0_c36c25, %dec_label_pc_c35c ], [ 0, %dec_label_pc_c344 ]
  %v0_c374 = phi i32 [ %v1_c374, %dec_label_pc_c35c ], [ %v2_c344, %dec_label_pc_c344 ]
  %v1_c368 = inttoptr i32 %v0_c374 to i8*
  %v2_c368 = load i8, i8* %v1_c368, align 1
  %v3_c368 = zext i8 %v2_c368 to i32
  store i32 %v3_c368, i32* %r3.global-to-local, align 4
  %v2_c36c = icmp eq i32 %v0_c36c, 0
  store i1 %v2_c36c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c370, i32* %r0.global-to-local, align 4
  %v1_c374 = add i32 %v0_c374, 1
  store i32 %v1_c374, i32* %r2.global-to-local, align 4
  %v1_c378 = add nsw i32 %v3_c368, -48
  store i32 %v1_c378, i32* %r1.global-to-local, align 4
  br i1 %v2_c36c, label %dec_label_pc_c380, label %dec_label_pc_c390

dec_label_pc_c380:                                ; preds = %dec_label_pc_c368
  %v7_c380 = icmp eq i8 %v2_c368, 9
  store i1 %v7_c380, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c380, label %dec_label_pc_c35c, label %bb

bb:                                               ; preds = %dec_label_pc_c380
  %v8_c384 = icmp eq i8 %v2_c368, 32
  store i1 %v8_c384, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c384, label %dec_label_pc_c35c, label %dec_label_pc_c38c

dec_label_pc_c38c:                                ; preds = %bb
  %v1_c38c = add i32 %v0_c38c, 1
  store i32 %v1_c38c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_c390

dec_label_pc_c390:                                ; preds = %dec_label_pc_c368, %dec_label_pc_c38c
  %v0_c38c30 = phi i32 [ %v0_c38c, %dec_label_pc_c368 ], [ %v1_c38c, %dec_label_pc_c38c ]
  %v0_c36c26 = phi i32 [ %v0_c36c, %dec_label_pc_c368 ], [ %v1_c38c, %dec_label_pc_c38c ]
  %v7_c390 = icmp eq i8 %v2_c368, 46
  store i1 %v7_c390, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c390, label %dec_label_pc_c354, label %bb103

bb103:                                            ; preds = %dec_label_pc_c390
  %v8_c394 = icmp eq i32 %v1_c378, 9
  store i1 %v8_c394, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_c378, 10
  br i1 %tmp, label %dec_label_pc_c354, label %dec_label_pc_c39c

dec_label_pc_c39c:                                ; preds = %dec_label_pc_c354, %bb103
  %v0_c35c.lcssa = phi i32 [ %v1_c370, %dec_label_pc_c354 ], [ %v0_c35c, %bb103 ]
  %v2_c3a0 = sub i32 %v0_c35c.lcssa, %v0_c334
  store i32 %v2_c3a0, i32* @r4, align 4
  %v2_c3a4 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_c344, i32* %r1.global-to-local, align 4
  store i32 %v2_c3a4, i32* %r0.global-to-local, align 4
  store i32 %v2_c3a0, i32* %r2.global-to-local, align 4
  %v3_c3b4 = call i32 @function_10b90(i32 %v2_c3a4, i32 %v2_c344, i32 %v2_c3a0)
  %v2_c3b8 = ptrtoint i32* %stack_var_-40 to i32
  %v1_c3bc = load i32, i32* @r4, align 4
  %v2_c3bc = add i32 %v1_c3bc, %v2_c3b8
  store i32 %v2_c3bc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c3a4, i32* @r0, align 4
  %v3_c3c8 = add i32 %v2_c3bc, -36
  %v4_c3c8 = inttoptr i32 %v3_c3c8 to i8*
  store i8 0, i8* %v4_c3c8, align 1
  %v1_c3cc = call i32 @function_11b44(i32 %v2_c3a4)
  store i32 %v1_c3cc, i32* %r0.global-to-local, align 4
  store i32 %v1_c3cc, i32* @fp, align 4
  br label %dec_label_pc_c3d4

dec_label_pc_c3d49:                               ; preds = %dec_label_pc_c7d0
  unreachable

dec_label_pc_c3d4:                                ; preds = %dec_label_pc_c838, %dec_label_pc_c82c, %dec_label_pc_c81c, %dec_label_pc_c80c, %dec_label_pc_c39c
  %v1_c80849 = phi i32 [ %v1_c7d4, %dec_label_pc_c838 ], [ %v1_c7d4, %dec_label_pc_c82c ], [ %v1_c7d4, %dec_label_pc_c81c ], [ %v1_c7d4, %dec_label_pc_c80c ], [ %v1_c3cc, %dec_label_pc_c39c ]
  %v0_c3d4 = load i32, i32* @r7, align 4
  %v2_c3d4 = icmp eq i32 %v0_c3d4, 0
  store i1 %v2_c3d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c3d4, label %dec_label_pc_c7fc, label %dec_label_pc_c3dc

dec_label_pc_c3dc:                                ; preds = %dec_label_pc_c3d4
  store i32 %v0_c3d4, i32* %r0.global-to-local, align 4
  %v1_c3e0 = inttoptr i32 %v0_c3d4 to i8*
  %v2_c3e0 = call i32 @function_10b20(i8* %v1_c3e0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 %v2_c3e0, i32* @r6, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_c3f4 = call i32 @function_11df4(i32 2, i32 3, i32 17)
  store i32 %v3_c3f4, i32* %r0.global-to-local, align 4
  %v7_c3f8 = icmp eq i32 %v3_c3f4, -1
  store i1 %v7_c3f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c3f8, label %dec_label_pc_c7fc, label %dec_label_pc_c404

dec_label_pc_c404:                                ; preds = %dec_label_pc_c3dc
  store i32 1, i32* %stack_var_-44, align 4
  %v6_c40c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_c40c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_c420 = call i32 @function_11db0(i32 %v3_c3f4, i32 0, i32 3, i32 %v6_c40c, i32 4)
  store i32 %v5_c420, i32* %r0.global-to-local, align 4
  %v7_c424 = icmp eq i32 %v5_c420, -1
  store i1 %v7_c424, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c424, label %dec_label_pc_c7f4, label %dec_label_pc_c42c

dec_label_pc_c42c:                                ; preds = %dec_label_pc_c404
  %v0_c434 = load i32, i32* %sb.global-to-local, align 4
  %v1_c434 = urem i32 %v0_c434, 256
  store i32 %v1_c434, i32* %sb.global-to-local, align 4
  %v3_c43c = mul i32 %v6_c244, 65536
  store i32 %v3_c43c, i32* %r3.global-to-local, align 4
  %v5_c448 = trunc i32 %v0_c434 to i8
  %v0_c44c = load i32, i32* @r8, align 4
  %v2_c44c = icmp eq i32 %v0_c44c, 0
  store i1 %v2_c44c, i1* %cpsr_z.global-to-local, align 1
  %v3_c450 = urem i32 %v7_c1e8, 65536
  store i32 %v3_c450, i32* %r0.global-to-local, align 4
  %v3_c458 = urem i32 %v6_c244, 65536
  store i32 %v3_c458, i32* %r2.global-to-local, align 4
  %v3_c45c = mul i32 %v6_c25c, 65536
  %v3_c460 = mul i32 %v6_c278, 65536
  store i32 %v3_c460, i32* %ip.global-to-local, align 4
  br i1 %v2_c44c, label %bb104, label %bb105

bb104:                                            ; preds = %dec_label_pc_c42c
  %v5_c468 = sext i8 %v5_c448 to i32
  store i32 %v5_c468, i32* %r2.global-to-local, align 4
  br label %bb105

bb105:                                            ; preds = %dec_label_pc_c42c, %bb104
  %v2_c494 = phi i32 [ %v3_c458, %dec_label_pc_c42c ], [ %v5_c468, %bb104 ]
  %v3_c474 = urem i32 %v6_c25c, 65536
  store i32 %v3_c474, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v3_c47c = urem i32 %v6_c278, 65536
  store i32 0, i32* %stack_var_-44, align 4
  %v1_c494 = load i32, i32* @r6, align 4
  br i1 %v2_c44c, label %.dec_label_pc_c67c.preheader_crit_edge, label %dec_label_pc_c49c

.dec_label_pc_c67c.preheader_crit_edge:           ; preds = %bb105
  %v3_c494 = add i32 %v1_c494, %v2_c494
  store i32 %v3_c494, i32* @r7, align 4
  %.pre = sext i8 %v5_c448 to i32
  br label %dec_label_pc_c67c.preheader

dec_label_pc_c49c:                                ; preds = %bb105
  %v2_c49c = add i32 %v1_c494, %v1_c434
  %v3_c4a0 = mul i32 %v2_c49c, 65536
  %v1_c4a8 = add i32 %v3_c4a0, 1769472
  %v1_c4ac = add i32 %v3_c4a0, 3080192
  %tmp106 = udiv i32 %v1_c4ac, 256
  %v3_c4c0 = and i32 %tmp106, 65280
  %v4_c4d0 = udiv i32 %v1_c4ac, 16777216
  %v5_c4d0 = or i32 %v3_c4c0, %v4_c4d0
  store i32 %v5_c4d0, i32* @sl, align 4
  %trunc60 = trunc i32 %v6_c244 to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc60)
  %tmp107 = mul i32 %v7_c1e8, 256
  %v3_c4e4 = and i32 %tmp107, 65280
  store i32 %v3_c4e4, i32* %r1.global-to-local, align 4
  %tmp108 = udiv i32 %v7_c1e8, 256
  %v4_c4e8 = urem i32 %tmp108, 256
  %v5_c4e8 = or i32 %v4_c4e8, %v3_c4e4
  store i32 %v5_c4e8, i32* @sb, align 4
  store i32 %v3_c460, i32* %r2.global-to-local, align 4
  store i32 %v3_c45c, i32* %r0.global-to-local, align 4
  %tmp109 = mul i32 %v6_c25c, 256
  %v3_c4fc = and i32 %tmp109, 65280
  %tmp110 = mul i32 %v6_c278, 256
  %v3_c500 = and i32 %tmp110, 65280
  %tmp111 = udiv i32 %v1_c4a8, 256
  %v3_c504 = and i32 %tmp111, 65280
  store i32 %v3_c504, i32* @lr, align 4
  %tmp112 = udiv i32 %v6_c25c, 256
  %v4_c508 = urem i32 %tmp112, 256
  %v5_c508 = or i32 %v4_c508, %v3_c4fc
  store i32 %v5_c508, i32* %ip.global-to-local, align 4
  %tmp113 = udiv i32 %v6_c278, 256
  %v4_c50c = urem i32 %tmp113, 256
  %v5_c50c = or i32 %v4_c50c, %v3_c500
  store i32 %v5_c50c, i32* @r4, align 4
  %v1_c510 = add i32 %v1_c494, 1
  store i32 %v1_c510, i32* %r3.global-to-local, align 4
  %v4_c514 = udiv i32 %v1_c4a8, 16777216
  %v5_c514 = or i32 %v4_c514, %tmp111
  store i32 0, i32* @r5, align 4
  %v4_c598 = sext i8 %v5_c448 to i32
  %sext = mul nuw i32 %v5_c508, 65536
  %v7_c5ac = sdiv i32 %sext, 65536
  %sext8 = mul nuw i32 %v5_c50c, 65536
  %v4_c5d4 = sdiv i32 %sext8, 65536
  %v1_c574 = trunc i32 %v5_c1e8 to i8
  %extract.t = trunc i32 %v5_c220 to i8
  %v1_c59c = add nsw i32 %v4_c598, 41
  %sext120 = mul i32 %v5_c514, 65536
  %v3_c5ac = sdiv i32 %sext120, 65536
  br label %dec_label_pc_c52c

dec_label_pc_c52c:                                ; preds = %dec_label_pc_c64c, %dec_label_pc_c49c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_c534 = call i32 @function_1295c(i32 600, i32 1)
  store i32 %v2_c534, i32* %r0.global-to-local, align 4
  store i32 %v2_c1ac, i32* %ip.global-to-local, align 4
  %v3_c53c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c53c, i32* %r3.global-to-local, align 4
  %v2_c540 = load i32, i32* @r5, align 4
  %v5_c540 = mul i32 %v2_c540, 4
  %v6_c540 = add i32 %v5_c540, %v2_c1ac
  %v7_c540 = inttoptr i32 %v6_c540 to i32*
  store i32 %v2_c534, i32* %v7_c540, align 4
  %v0_c544 = load i32, i32* %ip.global-to-local, align 4
  %v1_c544 = load i32, i32* %r3.global-to-local, align 4
  %v4_c544 = mul i32 %v1_c544, 4
  %v5_c544 = add i32 %v4_c544, %v0_c544
  %v6_c544 = inttoptr i32 %v5_c544 to i32*
  %v7_c544 = load i32, i32* %v6_c544, align 4
  store i32 %v7_c544, i32* %r1.global-to-local, align 4
  %v1_c548 = inttoptr i32 %v7_c544 to i8*
  %v2_c548 = load i8, i8* %v1_c548, align 1
  %tmp127 = urem i8 %v2_c548, 16
  %v1_c54c = zext i8 %tmp127 to i32
  %v1_c550 = or i32 %v1_c54c, 64
  store i32 %v1_c550, i32* %r2.global-to-local, align 4
  %v1_c554 = trunc i32 %v1_c550 to i8
  store i8 %v1_c554, i8* %v1_c548, align 1
  %v0_c558 = load i32, i32* %r1.global-to-local, align 4
  %v1_c558 = inttoptr i32 %v0_c558 to i8*
  %v2_c558 = load i8, i8* %v1_c558, align 1
  %v3_c558 = zext i8 %v2_c558 to i32
  %v1_c55c = and i32 %v3_c558, 240
  %v1_c560 = or i32 %v1_c55c, 5
  store i32 %v1_c560, i32* %r3.global-to-local, align 4
  store i32 %v1_c22c, i32* %lr.global-to-local, align 4
  %v1_c568 = trunc i32 %v1_c560 to i8
  store i8 %v1_c568, i8* %v1_c558, align 1
  store i32 %v5_c1e8, i32* %r0.global-to-local, align 4
  %v0_c570 = load i32, i32* %lr.global-to-local, align 4
  %v2_c570 = icmp eq i32 %v0_c570, 0
  store i1 %v2_c570, i1* %cpsr_z.global-to-local, align 1
  %v2_c574 = load i32, i32* %r1.global-to-local, align 4
  %v3_c574 = add i32 %v2_c574, 1
  %v4_c574 = inttoptr i32 %v3_c574 to i8*
  store i8 %v1_c574, i8* %v4_c574, align 1
  store i32 %v5_c220, i32* %r2.global-to-local, align 4
  %v0_c57c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c57c, label %.thread11, label %bb114

bb114:                                            ; preds = %dec_label_pc_c52c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c580 = load i32, i32* %r1.global-to-local, align 4
  %v4_c580 = add i32 %v3_c580, 6
  %v5_c580 = inttoptr i32 %v4_c580 to i16*
  store i16 64, i16* %v5_c580, align 2
  %v0_c588.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t52 = trunc i32 %v0_c588.pre to i8
  br label %.thread11

.thread11:                                        ; preds = %dec_label_pc_c52c, %bb114
  %v0_c588.off0 = phi i8 [ %extract.t, %dec_label_pc_c52c ], [ %extract.t52, %bb114 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_c588 = load i32, i32* %r1.global-to-local, align 4
  %v3_c588 = add i32 %v2_c588, 8
  %v4_c588 = inttoptr i32 %v3_c588 to i8*
  store i8 %v0_c588.off0, i8* %v4_c588, align 1
  %v0_c58c = load i32, i32* %r3.global-to-local, align 4
  %v1_c58c = trunc i32 %v0_c58c to i8
  %v2_c58c = load i32, i32* %r1.global-to-local, align 4
  %v3_c58c = add i32 %v2_c58c, 9
  %v4_c58c = inttoptr i32 %v3_c58c to i8*
  store i8 %v1_c58c, i8* %v4_c58c, align 1
  %v2_c594 = load i32, i32* @global_var_212d8.46, align 4
  %v0_c59c = load i32, i32* %r1.global-to-local, align 4
  %v2_c5a0 = add i32 %v1_c59c, %v0_c59c
  store i32 %v2_c5a0, i32* @r4, align 4
  %v2_c5a4 = add i32 %v0_c59c, 12
  %v3_c5a4 = inttoptr i32 %v2_c5a4 to i32*
  store i32 %v2_c594, i32* %v3_c5a4, align 4
  store i32 %v3_c5ac, i32* %r2.global-to-local, align 4
  store i32 %v7_c5ac, i32* %r3.global-to-local, align 4
  %v0_c5b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_c5b0 = add i32 %v0_c5b0, 20
  store i32 %v1_c5b0, i32* %ip.global-to-local, align 4
  %v0_c5b4 = load i32, i32* @sl, align 4
  %v1_c5b4 = trunc i32 %v0_c5b4 to i16
  %v3_c5b4 = add i32 %v0_c5b0, 2
  %v4_c5b4 = inttoptr i32 %v3_c5b4 to i16*
  store i16 %v1_c5b4, i16* %v4_c5b4, align 2
  %v0_c5b8 = load i32, i32* @sb, align 4
  %v1_c5b8 = trunc i32 %v0_c5b8 to i16
  %v2_c5b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c5b8 = add i32 %v2_c5b8, 4
  %v4_c5b8 = inttoptr i32 %v3_c5b8 to i16*
  store i16 %v1_c5b8, i16* %v4_c5b8, align 2
  %v0_c5bc = load i32, i32* %r2.global-to-local, align 4
  %v1_c5bc = trunc i32 %v0_c5bc to i16
  %v2_c5bc = load i32, i32* %ip.global-to-local, align 4
  %v3_c5bc = add i32 %v2_c5bc, 4
  %v4_c5bc = inttoptr i32 %v3_c5bc to i16*
  store i16 %v1_c5bc, i16* %v4_c5bc, align 2
  %v0_c5c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5c0 = trunc i32 %v0_c5c0 to i16
  %v2_c5c0 = load i32, i32* %ip.global-to-local, align 4
  %v3_c5c0 = add i32 %v2_c5c0, 2
  %v4_c5c0 = inttoptr i32 %v3_c5c0 to i16*
  store i16 %v1_c5c0, i16* %v4_c5c0, align 2
  %v2_c5c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c5c8 = add i32 %v2_c5c8, 20
  %v4_c5c8 = inttoptr i32 %v3_c5c8 to i16*
  store i16 %rev, i16* %v4_c5c8, align 2
  store i32 %v4_c598, i32* %ip.global-to-local, align 4
  %v0_c5d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_c5d0 = add i32 %v0_c5d0, 28
  store i32 %v1_c5d0, i32* %r0.global-to-local, align 4
  store i32 %v4_c5d4, i32* %r3.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v3_c5e0 = add i32 %v0_c5d0, 30
  %v4_c5e0 = inttoptr i32 %v3_c5e0 to i16*
  store i16 1, i16* %v4_c5e0, align 2
  %v0_c5e4 = load i32, i32* @lr, align 4
  %v1_c5e4 = trunc i32 %v0_c5e4 to i16
  %v2_c5e4 = load i32, i32* %r0.global-to-local, align 4
  %v3_c5e4 = add i32 %v2_c5e4, 4
  %v4_c5e4 = inttoptr i32 %v3_c5e4 to i16*
  store i16 %v1_c5e4, i16* %v4_c5e4, align 2
  %v0_c5e8 = load i32, i32* %ip.global-to-local, align 4
  %v1_c5e8 = trunc i32 %v0_c5e8 to i8
  %v2_c5e8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c5e8 = add i32 %v2_c5e8, 40
  %v4_c5e8 = inttoptr i32 %v3_c5e8 to i8*
  store i8 %v1_c5e8, i8* %v4_c5e8, align 1
  %v0_c5ec = load i32, i32* @fp, align 4
  %v1_c5ec = load i32, i32* %r1.global-to-local, align 4
  %v2_c5ec = add i32 %v1_c5ec, 16
  %v3_c5ec = inttoptr i32 %v2_c5ec to i32*
  store i32 %v0_c5ec, i32* %v3_c5ec, align 4
  %v0_c5f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5f0 = trunc i32 %v0_c5f0 to i16
  %v2_c5f0 = load i32, i32* %r1.global-to-local, align 4
  %v3_c5f0 = add i32 %v2_c5f0, 28
  %v4_c5f0 = inttoptr i32 %v3_c5f0 to i16*
  store i16 %v1_c5f0, i16* %v4_c5f0, align 2
  %v0_c5f4 = load i32, i32* @r4, align 4
  %v1_c5f4 = add i32 %v0_c5f4, 1
  store i32 %v1_c5f4, i32* %r0.global-to-local, align 4
  %v0_c5f8 = load i32, i32* @r7, align 4
  store i32 %v0_c5f8, i32* %r1.global-to-local, align 4
  store i32 %v1_c510, i32* %r2.global-to-local, align 4
  %v3_c600 = call i32 @function_10b90(i32 %v1_c5f4, i32 %v0_c5f8, i32 %v1_c510)
  store i32 %v3_c600, i32* %r0.global-to-local, align 4
  %v0_c604 = load i32, i32* @r6, align 4
  %v2_c604 = icmp eq i32 %v0_c604, 0
  store i1 %v2_c604, i1* %cpsr_z.global-to-local, align 1
  %tmp115 = icmp slt i32 %v0_c604, 1
  br i1 %tmp115, label %bb116, label %dec_label_pc_c614

bb116:                                            ; preds = %.thread11
  %v5_c608 = load i32, i32* @r4, align 4
  store i32 %v5_c608, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_c64c

dec_label_pc_c614:                                ; preds = %.thread11
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_c618 = load i32, i32* @r4, align 4
  store i32 %v0_c618, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_c620

dec_label_pc_c620:                                ; preds = %.thread18, %dec_label_pc_c614
  %v0_c62c = phi i32 [ %storemerge, %.thread18 ], [ 0, %dec_label_pc_c614 ]
  %v0_c630 = phi i32 [ %v0_c644, %.thread18 ], [ 0, %dec_label_pc_c614 ]
  %v1_c620 = load i32, i32* @r7, align 4
  %v2_c620 = add i32 %v1_c620, %v0_c630
  %v3_c620 = inttoptr i32 %v2_c620 to i8*
  %v4_c620 = load i8, i8* %v3_c620, align 1
  %v6_c620 = zext i8 %v4_c620 to i32
  store i32 %v6_c620, i32* %r3.global-to-local, align 4
  %v7_c624 = icmp eq i8 %v4_c620, 46
  store i1 %v7_c624, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c624, label %bb117, label %.thread59

.thread59:                                        ; preds = %dec_label_pc_c620
  %v1_c62c14 = add nsw i32 %v0_c62c, 1
  store i32 %v1_c62c14, i32* %r2.global-to-local, align 4
  %v1_c63016 = add i32 %v0_c630, 1
  store i32 %v1_c63016, i32* %r1.global-to-local, align 4
  br label %bb118

bb117:                                            ; preds = %dec_label_pc_c620
  %v2_c628 = load i32, i32* @r4, align 4
  %v3_c628 = add i32 %v2_c628, %v0_c630
  store i32 %v3_c628, i32* %r3.global-to-local, align 4
  %v1_c62c = add nsw i32 %v0_c62c, 1
  store i32 %v1_c62c, i32* %r2.global-to-local, align 4
  %v1_c630 = add i32 %v0_c630, 1
  store i32 %v1_c630, i32* %r1.global-to-local, align 4
  %v2_c634 = trunc i32 %v0_c62c to i8
  %v3_c634 = load i32, i32* %r0.global-to-local, align 4
  %v4_c634 = inttoptr i32 %v3_c634 to i8*
  store i8 %v2_c634, i8* %v4_c634, align 1
  %v0_c638.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c638.pre, label %bb119, label %bb117.bb118_crit_edge

bb117.bb118_crit_edge:                            ; preds = %bb117
  %v1_c638.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb118

bb118:                                            ; preds = %bb117.bb118_crit_edge, %.thread59
  %v1_c638 = phi i32 [ %v1_c638.pre, %bb117.bb118_crit_edge ], [ %v1_c62c14, %.thread59 ]
  %v2_c638 = urem i32 %v1_c638, 256
  br label %.thread18

bb119:                                            ; preds = %bb117
  %v1_c63c = load i32, i32* %r3.global-to-local, align 4
  %v2_c63c = add i32 %v1_c63c, 1
  store i32 %v2_c63c, i32* %r0.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb118, %bb119
  %storemerge = phi i32 [ %v2_c638, %bb118 ], [ 0, %bb119 ]
  store i32 %storemerge, i32* %ip.global-to-local, align 4
  %v0_c644 = load i32, i32* %r1.global-to-local, align 4
  %v1_c644 = load i32, i32* @r6, align 4
  %v9_c644 = icmp eq i32 %v0_c644, %v1_c644
  store i1 %v9_c644, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c644, label %dec_label_pc_c64c.loopexit, label %dec_label_pc_c620

dec_label_pc_c64c.loopexit:                       ; preds = %.thread18
  %v2_c64c.pre = load i32, i32* %r0.global-to-local, align 4
  %extract.t126 = trunc i32 %storemerge to i8
  br label %dec_label_pc_c64c

dec_label_pc_c64c:                                ; preds = %bb116, %dec_label_pc_c64c.loopexit
  %v0_c64c.off0 = phi i8 [ %extract.t126, %dec_label_pc_c64c.loopexit ], [ 0, %bb116 ]
  %v2_c64c = phi i32 [ %v2_c64c.pre, %dec_label_pc_c64c.loopexit ], [ %v5_c608, %bb116 ]
  %v3_c64c = inttoptr i32 %v2_c64c to i8*
  store i8 %v0_c64c.off0, i8* %v3_c64c, align 1
  %v3_c650 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c650, i32* %r3.global-to-local, align 4
  %v1_c654 = add i32 %v3_c650, 1
  store i32 %v1_c654, i32* @r5, align 4
  %v0_c658 = load i32, i32* @r4, align 4
  %v1_c658 = load i32, i32* @r6, align 4
  %v2_c658 = add i32 %v1_c658, %v0_c658
  store i32 %v2_c658, i32* %r2.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v0_c660 = load i32, i32* @r8, align 4
  %v9_c660 = icmp eq i32 %v0_c660, %v1_c654
  store i1 %v9_c660, i1* %cpsr_z.global-to-local, align 1
  %v3_c664 = add i32 %v2_c658, 4
  %v4_c664 = inttoptr i32 %v3_c664 to i16*
  store i16 256, i16* %v4_c664, align 2
  %v0_c668 = load i32, i32* @lr, align 4
  %v1_c668 = trunc i32 %v0_c668 to i16
  %v2_c668 = load i32, i32* %r2.global-to-local, align 4
  %v3_c668 = add i32 %v2_c668, 2
  %v4_c668 = inttoptr i32 %v3_c668 to i16*
  store i16 %v1_c668, i16* %v4_c668, align 2
  %v0_c66c = load i32, i32* @r5, align 4
  store i32 %v0_c66c, i32* %stack_var_-44, align 4
  %v8_c670 = icmp sgt i32 %v0_c660, %v1_c654
  br i1 %v8_c670, label %dec_label_pc_c52c, label %dec_label_pc_c674

dec_label_pc_c674:                                ; preds = %dec_label_pc_c64c
  store i32 %v4_c598, i32* %r0.global-to-local, align 4
  %v0_c678 = load i32, i32* @r6, align 4
  %v2_c678 = add i32 %v0_c678, %v4_c598
  store i32 %v2_c678, i32* @r7, align 4
  %v0_c680.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_c67c.preheader

dec_label_pc_c67c.preheader:                      ; preds = %.dec_label_pc_c67c.preheader_crit_edge, %dec_label_pc_c674
  %v4_c6e0.pre-phi = phi i32 [ %.pre, %.dec_label_pc_c67c.preheader_crit_edge ], [ %v4_c598, %dec_label_pc_c674 ]
  %v0_c680.pre = phi i32 [ 0, %.dec_label_pc_c67c.preheader_crit_edge ], [ %v0_c680.pre.pre, %dec_label_pc_c674 ]
  %v3_c6ac = icmp eq i32 %v3_c450, 65535
  %v3_c6bc = icmp eq i32 %v3_c458, 65535
  br label %dec_label_pc_c67c

dec_label_pc_c67c:                                ; preds = %dec_label_pc_c67c, %dec_label_pc_c774, %dec_label_pc_c67c.preheader
  %v0_c680 = phi i32 [ %v0_c680.pre, %dec_label_pc_c67c.preheader ], [ 0, %dec_label_pc_c774 ], [ 0, %dec_label_pc_c67c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c680 = icmp eq i32 %v0_c680, 0
  store i1 %v2_c680, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c680, label %dec_label_pc_c67c, label %dec_label_pc_c68c

dec_label_pc_c68c:                                ; preds = %dec_label_pc_c67c, %dec_label_pc_c774
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_c690 = load i32, i32* @r7, align 4
  %v1_c690 = add i32 %v0_c690, 27
  store i32 %v1_c690, i32* @sb, align 4
  %v1_c694 = add i32 %v0_c690, 47
  store i32 %v1_c694, i32* @sl, align 4
  br label %dec_label_pc_c698

dec_label_pc_c698:                                ; preds = %dec_label_pc_c6dc, %dec_label_pc_c68c
  %v1_c6a4 = phi i32 [ %v1_c764, %dec_label_pc_c6dc ], [ 0, %dec_label_pc_c68c ]
  store i32 %v2_c1ac, i32* %r3.global-to-local, align 4
  store i32 %v3_c450, i32* %ip.global-to-local, align 4
  %v4_c6a4 = mul i32 %v1_c6a4, 4
  %v5_c6a4 = add i32 %v4_c6a4, %v2_c1ac
  %v6_c6a4 = inttoptr i32 %v5_c6a4 to i32*
  %v7_c6a4 = load i32, i32* %v6_c6a4, align 4
  store i32 %v7_c6a4, i32* @r4, align 4
  store i32 65535, i32* @r5, align 4
  store i1 %v3_c6ac, i1* %cpsr_z.global-to-local, align 1
  %v1_c6b0 = add i32 %v7_c6a4, 20
  store i32 %v1_c6b0, i32* @r6, align 4
  br i1 %v3_c6ac, label %dec_label_pc_c788, label %dec_label_pc_c6b8

dec_label_pc_c6b8:                                ; preds = %dec_label_pc_c698
  store i32 %v3_c458, i32* @lr, align 4
  store i1 %v3_c6bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c6bc, label %dec_label_pc_c79c, label %dec_label_pc_c6c4

dec_label_pc_c6c4:                                ; preds = %dec_label_pc_c788.dec_label_pc_c6c4_crit_edge, %dec_label_pc_c6b8
  %v1_c6c8 = phi i32 [ %v1_c6c8.pre, %dec_label_pc_c788.dec_label_pc_c6c4_crit_edge ], [ 65535, %dec_label_pc_c6b8 ]
  store i32 %v3_c474, i32* %r0.global-to-local, align 4
  %v9_c6c8 = icmp eq i32 %v3_c474, %v1_c6c8
  store i1 %v9_c6c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c6c8, label %dec_label_pc_c7b0, label %dec_label_pc_c6d0

dec_label_pc_c6d0:                                ; preds = %dec_label_pc_c79c, %dec_label_pc_c6c4
  %v1_c6d4 = phi i32 [ %v1_c7a8, %dec_label_pc_c79c ], [ %v1_c6c8, %dec_label_pc_c6c4 ]
  store i32 %v3_c47c, i32* %r2.global-to-local, align 4
  %v9_c6d4 = icmp eq i32 %v3_c47c, %v1_c6d4
  store i1 %v9_c6d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c6d4, label %dec_label_pc_c7c4, label %dec_label_pc_c6dc

dec_label_pc_c6dc:                                ; preds = %dec_label_pc_c7b0, %dec_label_pc_c6d0, %dec_label_pc_c7c4
  %v0_c6dc = load i32, i32* @r4, align 4
  %v1_c6dc = add i32 %v0_c6dc, 41
  store i32 %v1_c6dc, i32* %r0.global-to-local, align 4
  store i32 %v4_c6e0.pre-phi, i32* %r1.global-to-local, align 4
  %v2_c6e4 = call i32 @function_e360(i32 %v1_c6dc, i32 %v4_c6e0.pre-phi)
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c6ec = load i32, i32* @r4, align 4
  %v3_c6ec = add i32 %v2_c6ec, 10
  %v4_c6ec = inttoptr i32 %v3_c6ec to i16*
  store i16 0, i16* %v4_c6ec, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c6f4 = load i32, i32* @r4, align 4
  store i32 %v0_c6f4, i32* @r0, align 4
  %v2_c6f8 = call i32 @function_c848(i32 %v0_c6f4, i32 20)
  %v3_c6f8 = trunc i32 %v2_c6f8 to i16
  store i32 %v2_c6f8, i32* %r0.global-to-local, align 4
  %v3_c6fc = load i32, i32* @r4, align 4
  %v4_c6fc = add i32 %v3_c6fc, 10
  %v5_c6fc = inttoptr i32 %v4_c6fc to i16*
  store i16 %v3_c6f8, i16* %v5_c6fc, align 2
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_c704 = load i32, i32* @r6, align 4
  %v3_c704 = add i32 %v2_c704, 6
  %v4_c704 = inttoptr i32 %v3_c704 to i16*
  store i16 0, i16* %v4_c704, align 2
  %v0_c708 = load i32, i32* @r6, align 4
  store i32 %v0_c708, i32* @r1, align 4
  %v1_c70c = add i32 %v0_c708, 4
  %v2_c70c = inttoptr i32 %v1_c70c to i16*
  %v3_c70c = load i16, i16* %v2_c70c, align 2
  %v4_c70c = zext i16 %v3_c70c to i32
  store i32 %v4_c70c, i32* %r2.global-to-local, align 4
  %v0_c710 = load i32, i32* @sb, align 4
  store i32 %v0_c710, i32* %r3.global-to-local, align 4
  %v0_c714 = load i32, i32* @r4, align 4
  store i32 %v0_c714, i32* %r0.global-to-local, align 4
  %v4_c718 = call i32 @function_c898(i32 %v0_c714, i32 %v0_c708, i32 %v4_c70c, i32 %v0_c710)
  %v5_c718 = trunc i32 %v4_c718 to i16
  store i32 %v4_c718, i32* %r0.global-to-local, align 4
  %v3_c71c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c71c, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* @lr, align 4
  %v3_c724 = mul i32 %v3_c71c, 32
  store i32 %v3_c724, i32* %ip.global-to-local, align 4
  %v3_c728 = load i32, i32* @r6, align 4
  %v4_c728 = add i32 %v3_c728, 6
  %v5_c728 = inttoptr i32 %v4_c728 to i16*
  store i16 %v5_c718, i16* %v5_c728, align 2
  %v0_c72c = load i32, i32* %ip.global-to-local, align 4
  %v1_c72c = load i32, i32* %r3.global-to-local, align 4
  %tmp128 = mul i32 %v1_c72c, -8
  %v5_c72c = add i32 %v0_c72c, %tmp128
  store i32 %v5_c72c, i32* %ip.global-to-local, align 4
  %v0_c730 = load i32, i32* @r6, align 4
  %v1_c730 = add i32 %v0_c730, 2
  %v2_c730 = inttoptr i32 %v1_c730 to i16*
  %v3_c730 = load i16, i16* %v2_c730, align 2
  %v1_c734 = load i32, i32* @lr, align 4
  %v2_c734 = add i32 %v1_c734, %v5_c72c
  store i32 %v2_c734, i32* %ip.global-to-local, align 4
  %v3_c738 = add i32 %v2_c734, 2
  %v4_c738 = inttoptr i32 %v3_c738 to i16*
  store i16 %v3_c730, i16* %v4_c738, align 2
  %v0_c73c = load i32, i32* @fp, align 4
  %v1_c73c = load i32, i32* %ip.global-to-local, align 4
  %v2_c73c = add i32 %v1_c73c, 4
  %v3_c73c = inttoptr i32 %v2_c73c to i32*
  store i32 %v0_c73c, i32* %v3_c73c, align 4
  %v0_c740 = load i32, i32* @r4, align 4
  store i32 %v0_c740, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_c3f4, i32* %r0.global-to-local, align 4
  %v0_c74c = load i32, i32* @sl, align 4
  store i32 %v0_c74c, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c754 = load i32, i32* %ip.global-to-local, align 4
  %v6_c75c = call i32 @function_11d70(i32 %v3_c3f4, i32 %v0_c740, i32 %v0_c74c, i32 16384, i32 %v0_c754, i32 16)
  %v3_c760 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c760, i32* %r3.global-to-local, align 4
  %v1_c764 = add i32 %v3_c760, 1
  store i32 %v1_c764, i32* %r0.global-to-local, align 4
  %v0_c768 = load i32, i32* @r8, align 4
  %v9_c768 = icmp eq i32 %v0_c768, %v1_c764
  store i1 %v9_c768, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c764, i32* %stack_var_-44, align 4
  %v8_c770 = icmp sgt i32 %v0_c768, %v1_c764
  br i1 %v8_c770, label %dec_label_pc_c698, label %dec_label_pc_c774

dec_label_pc_c774:                                ; preds = %dec_label_pc_c6dc
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c778 = icmp eq i32 %v0_c768, 0
  store i1 %v2_c778, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c778, label %dec_label_pc_c67c, label %dec_label_pc_c68c

dec_label_pc_c788:                                ; preds = %dec_label_pc_c698
  %v0_c788 = call i32 @function_e29c()
  %v1_c788 = trunc i32 %v0_c788 to i16
  store i32 %v0_c788, i32* %r0.global-to-local, align 4
  store i32 %v3_c458, i32* @lr, align 4
  %v1_c790 = load i32, i32* @r5, align 4
  %v9_c790 = icmp eq i32 %v3_c458, %v1_c790
  store i1 %v9_c790, i1* %cpsr_z.global-to-local, align 1
  %v3_c794 = load i32, i32* @r4, align 4
  %v4_c794 = add i32 %v3_c794, 4
  %v5_c794 = inttoptr i32 %v4_c794 to i16*
  store i16 %v1_c788, i16* %v5_c794, align 2
  br i1 %v9_c790, label %dec_label_pc_c79c, label %dec_label_pc_c788.dec_label_pc_c6c4_crit_edge

dec_label_pc_c788.dec_label_pc_c6c4_crit_edge:    ; preds = %dec_label_pc_c788
  %v1_c6c8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_c6c4

dec_label_pc_c79c:                                ; preds = %dec_label_pc_c788, %dec_label_pc_c6b8
  %v0_c79c = call i32 @function_e29c()
  %v1_c79c = trunc i32 %v0_c79c to i16
  %v3_c7a0 = load i32, i32* @r4, align 4
  %v4_c7a0 = add i32 %v3_c7a0, 20
  %v5_c7a0 = inttoptr i32 %v4_c7a0 to i16*
  store i16 %v1_c79c, i16* %v5_c7a0, align 2
  store i32 %v3_c474, i32* %r0.global-to-local, align 4
  %v1_c7a8 = load i32, i32* @r5, align 4
  %v9_c7a8 = icmp eq i32 %v3_c474, %v1_c7a8
  store i1 %v9_c7a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c7a8, label %dec_label_pc_c7b0, label %dec_label_pc_c6d0

dec_label_pc_c7b0:                                ; preds = %dec_label_pc_c79c, %dec_label_pc_c6c4
  %v0_c7b0 = call i32 @function_e29c()
  %v1_c7b0 = trunc i32 %v0_c7b0 to i16
  store i32 %v0_c7b0, i32* %r0.global-to-local, align 4
  store i32 %v3_c47c, i32* %r2.global-to-local, align 4
  %v1_c7b8 = load i32, i32* @r5, align 4
  %v9_c7b8 = icmp eq i32 %v3_c47c, %v1_c7b8
  store i1 %v9_c7b8, i1* %cpsr_z.global-to-local, align 1
  %v3_c7bc = load i32, i32* @r6, align 4
  %v4_c7bc = add i32 %v3_c7bc, 2
  %v5_c7bc = inttoptr i32 %v4_c7bc to i16*
  store i16 %v1_c7b0, i16* %v5_c7bc, align 2
  br i1 %v9_c7b8, label %dec_label_pc_c7c4, label %dec_label_pc_c6dc

dec_label_pc_c7c4:                                ; preds = %dec_label_pc_c7b0, %dec_label_pc_c6d0
  %v0_c7c4 = call i32 @function_e29c()
  %v1_c7c4 = trunc i32 %v0_c7c4 to i16
  store i32 %v0_c7c4, i32* %r0.global-to-local, align 4
  %v3_c7c8 = load i32, i32* @r4, align 4
  %v4_c7c8 = add i32 %v3_c7c8, 28
  %v5_c7c8 = inttoptr i32 %v4_c7c8 to i16*
  store i16 %v1_c7c4, i16* %v5_c7c8, align 2
  br label %dec_label_pc_c6dc

dec_label_pc_c7d0:                                ; preds = %dec_label_pc_c35c, %dec_label_pc_c33c, %dec_label_pc_c2e0, %dec_label_pc_c18c
  %v0_c7d0 = call i32 @function_e29c()
  %v1_c7d4 = urem i32 %v0_c7d0, 4
  store i32 %v1_c7d4, i32* %r0.global-to-local, align 4
  %v2_c7d8 = icmp eq i32 %v1_c7d4, 3
  store i1 %v2_c7d8, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_c7d0 to i2
  switch i2 %trunc, label %dec_label_pc_c3d49 [
    i2 0, label %dec_label_pc_c80c
    i2 1, label %dec_label_pc_c838
    i2 -2, label %dec_label_pc_c82c
    i2 -1, label %dec_label_pc_c81c
  ]

dec_label_pc_c7f4:                                ; preds = %dec_label_pc_c404
  store i32 %v3_c3f4, i32* %r0.global-to-local, align 4
  %v1_c7f8 = call i32 @function_115e0(i32 %v3_c3f4)
  store i32 %v1_c7f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c7fc

dec_label_pc_c7fc:                                ; preds = %dec_label_pc_c3dc, %dec_label_pc_c3d4, %dec_label_pc_c7f4
  %v1_c808 = phi i32 [ %v3_c3f4, %dec_label_pc_c3dc ], [ %v1_c80849, %dec_label_pc_c3d4 ], [ %v1_c7f8, %dec_label_pc_c7f4 ]
  store i32 %v18_c18c, i32* %sb.global-to-local, align 4
  store i32 %v27_c18c, i32* %lr.global-to-local, align 4
  ret i32 %v1_c808

dec_label_pc_c80c:                                ; preds = %dec_label_pc_c7d0
  store i32 134744072, i32* @fp, align 4
  br label %dec_label_pc_c3d4

dec_label_pc_c81c:                                ; preds = %dec_label_pc_c7d0
  store i32 33686020, i32* @fp, align 4
  br label %dec_label_pc_c3d4

dec_label_pc_c82c:                                ; preds = %dec_label_pc_c7d0
  store i32 104859200, i32* @fp, align 4
  br label %dec_label_pc_c3d4

dec_label_pc_c838:                                ; preds = %dec_label_pc_c7d0
  store i32 707416650, i32* @fp, align 4
  br label %dec_label_pc_c3d4

; uselistorder directives
  uselistorder i32 %v1_c7d4, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_c7d0, { 1, 0 }
  uselistorder i32 %v0_c7c4, { 1, 0 }
  uselistorder i32 %v0_c7b0, { 1, 0 }
  uselistorder i32 %v1_c7a8, { 1, 0 }
  uselistorder i32 %v0_c788, { 1, 0 }
  uselistorder i32 %v1_c764, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_c72c, { 1, 0 }
  uselistorder i32 %v4_c718, { 1, 0 }
  uselistorder i32 %v2_c6f8, { 1, 0 }
  uselistorder i1 %v3_c6bc, { 1, 0 }
  uselistorder i1 %v3_c6ac, { 1, 0 }
  uselistorder i32 %v4_c6e0.pre-phi, { 1, 0 }
  uselistorder i32 %v1_c654, { 1, 0, 2 }
  uselistorder i32 %v0_c644, { 1, 0 }
  uselistorder i32 %storemerge, { 0, 2, 1 }
  uselistorder i32 %v0_c630, { 2, 0, 3, 1 }
  uselistorder i32 %v0_c62c, { 1, 0, 2 }
  uselistorder i32 %v0_c59c, { 1, 0 }
  uselistorder i32 %v4_c598, { 2, 0, 3, 4, 1 }
  uselistorder i32 %tmp111, { 1, 0 }
  uselistorder i32 %v3_c4e4, { 1, 0 }
  uselistorder i32 %v3_c4a0, { 1, 0 }
  uselistorder i32 %v1_c494, { 2, 0, 1 }
  uselistorder i32 %v3_c460, { 1, 0 }
  uselistorder i32 %v3_c458, { 1, 2, 3, 5, 0, 4 }
  uselistorder i32 %v3_c450, { 0, 2, 1 }
  uselistorder i8 %v5_c448, { 1, 0, 2 }
  uselistorder i32 %v1_c434, { 1, 0 }
  uselistorder i32 %v0_c434, { 1, 0 }
  uselistorder i1 %v7_c424, { 1, 0 }
  uselistorder i1 %v7_c3f8, { 1, 0 }
  uselistorder i32 %v3_c3f4, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v0_c3d4, { 1, 0, 2 }
  uselistorder i32 %v2_c3a4, { 0, 1, 3, 2 }
  uselistorder i32 %v2_c3a0, { 1, 0, 2 }
  uselistorder i1 %v7_c390, { 1, 0 }
  uselistorder i32 %v1_c38c, { 1, 0, 2 }
  uselistorder i1 %v8_c384, { 1, 0 }
  uselistorder i1 %v7_c380, { 1, 0 }
  uselistorder i32 %v1_c374, { 1, 0 }
  uselistorder i8 %v2_c368, { 2, 0, 1, 3 }
  uselistorder i32 %v0_c36c, { 1, 0 }
  uselistorder i32 %v0_c38c, { 3, 0, 2, 1 }
  uselistorder i32 %v0_c35c, { 0, 2, 1 }
  uselistorder i32 %v1_c370, { 0, 2, 1 }
  uselistorder i32 %v2_c344, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c33c, { 1, 0, 2, 3 }
  uselistorder i1 %v7_c334, { 1, 0 }
  uselistorder i32 %v0_c334, { 2, 3, 1, 5, 4, 0 }
  uselistorder i32 %v0_c2d8, { 1, 0, 3, 2 }
  uselistorder i32 %v6_c278, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v6_c25c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v6_c244, { 2, 1, 0, 3 }
  uselistorder i32 %v1_c22c, { 1, 2, 0 }
  uselistorder i32 %v5_c220, { 0, 2, 1 }
  uselistorder i32 %v7_c1e8, { 1, 0, 2, 3 }
  uselistorder i32 %v5_c1e8, { 0, 2, 1 }
  uselistorder i32 %v2_c1ac, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 34, 37, 36, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 2, 4, 6, 5, 8, 7, 9, 11, 10, 12, 13, 14, 16, 15, 19, 17, 18, 20, 21, 26, 22, 23, 24, 25, 30, 27, 28, 29, 31, 33, 32, 34, 35, 36, 37, 39, 38, 40, 41, 42, 43, 44, 46, 45, 48, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 15, 9, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 25, 22, 29, 30, 31 }
  uselistorder i16 64, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 41, { 2, 3, 4, 0, 1 }
  uselistorder i32 (i32)* @function_11b44, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c7fc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c6dc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c68c, { 1, 0 }
  uselistorder label %dec_label_pc_c67c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c67c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_c64c, { 1, 0 }
  uselistorder label %.thread18, { 1, 0 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %dec_label_pc_c39c, { 1, 0 }
  uselistorder label %dec_label_pc_c390, { 1, 0 }
  uselistorder label %dec_label_pc_c35c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c354, { 1, 0 }
}

define i32 @function_c848(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c848:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_c86c, label %dec_label_pc_c854

dec_label_pc_c854:                                ; preds = %dec_label_pc_c848
  %v0_c85c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_c858

dec_label_pc_c858:                                ; preds = %dec_label_pc_c858, %dec_label_pc_c854
  %v0_c864 = phi i32 [ %v2_c864, %dec_label_pc_c858 ], [ 0, %dec_label_pc_c854 ]
  %v0_c85c = phi i32 [ %v5_c85c, %dec_label_pc_c858 ], [ %v0_c85c.pre, %dec_label_pc_c854 ]
  %v0_c858 = phi i32 [ %v1_c858, %dec_label_pc_c858 ], [ %arg1, %dec_label_pc_c854 ]
  %v1_c858 = add i32 %v0_c858, -2
  %v1_c85c = inttoptr i32 %v0_c85c to i16*
  %v2_c85c = load i16, i16* %v1_c85c, align 2
  %v3_c85c = zext i16 %v2_c85c to i32
  %v5_c85c = add i32 %v0_c85c, -2
  store i32 %v5_c85c, i32* @r0, align 4
  %v2_c864 = add i32 %v3_c85c, %v0_c864
  %v1_c858.cmp = icmp ugt i32 %v1_c858, 1
  br i1 %v1_c858.cmp, label %dec_label_pc_c858, label %dec_label_pc_c86c.loopexit

dec_label_pc_c86c.loopexit:                       ; preds = %dec_label_pc_c858
  br label %dec_label_pc_c86c

dec_label_pc_c86c:                                ; preds = %dec_label_pc_c848, %dec_label_pc_c86c.loopexit
  %v1_c874 = phi i32 [ %v2_c864, %dec_label_pc_c86c.loopexit ], [ 0, %dec_label_pc_c848 ]
  %v0_c86c = phi i32 [ %v1_c858, %dec_label_pc_c86c.loopexit ], [ %arg1, %dec_label_pc_c848 ]
  %v7_c86c = icmp eq i32 %v0_c86c, 1
  br i1 %v7_c86c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c86c
  %v1_c870 = load i32, i32* @r0, align 4
  %v2_c870 = inttoptr i32 %v1_c870 to i8*
  %v3_c870 = load i8, i8* %v2_c870, align 1
  %v4_c870 = zext i8 %v3_c870 to i32
  %v3_c874 = add i32 %v1_c874, %v4_c870
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c86c, %bb
  %v0_c878 = phi i32 [ %v1_c874, %dec_label_pc_c86c ], [ %v3_c874, %bb ]
  %v3_c87c = urem i32 %v0_c878, 65536
  %v4_c880 = udiv i32 %v0_c878, 65536
  %v5_c880 = add nuw nsw i32 %v4_c880, %v3_c87c
  %v4_c884 = udiv i32 %v5_c880, 65536
  %v5_c884 = add nuw nsw i32 %v4_c884, %v5_c880
  %v1_c888 = urem i32 %v5_c884, 65536
  %v3_c890 = xor i32 %v1_c888, 65535
  ret i32 %v3_c890

; uselistorder directives
  uselistorder i32 %v5_c880, { 1, 0 }
  uselistorder i32 %v5_c85c, { 1, 0 }
  uselistorder i32 %v1_c858, { 1, 0, 2 }
  uselistorder i32 %v0_c85c, { 1, 0 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_c86c, { 1, 0 }
}

define i32 @function_c898(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c898:
  %v1_c8a8 = add i32 %arg1, 12
  %v2_c8a8 = inttoptr i32 %v1_c8a8 to i32*
  %v3_c8a8 = load i32, i32* %v2_c8a8, align 4
  %v1_c8ac = add i32 %arg1, 16
  %v2_c8ac = inttoptr i32 %v1_c8ac to i32*
  %v3_c8ac = load i32, i32* %v2_c8ac, align 4
  %v7_c8b0 = icmp sgt i32 %arg3, 1
  br i1 %v7_c8b0, label %dec_label_pc_c8bc.preheader, label %dec_label_pc_c8d0

dec_label_pc_c8bc.preheader:                      ; preds = %dec_label_pc_c898
  %v0_c8c0.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_c8bc

dec_label_pc_c8bc:                                ; preds = %dec_label_pc_c8bc.preheader, %dec_label_pc_c8bc
  %v0_c8c8 = phi i32 [ 0, %dec_label_pc_c8bc.preheader ], [ %v2_c8c8, %dec_label_pc_c8bc ]
  %v0_c8c0 = phi i32 [ %v0_c8c0.pre, %dec_label_pc_c8bc.preheader ], [ %v5_c8c0, %dec_label_pc_c8bc ]
  %v0_c8bc = phi i32 [ %arg3, %dec_label_pc_c8bc.preheader ], [ %v1_c8bc, %dec_label_pc_c8bc ]
  %v1_c8bc = add nsw i32 %v0_c8bc, -2
  %v1_c8c0 = inttoptr i32 %v0_c8c0 to i16*
  %v2_c8c0 = load i16, i16* %v1_c8c0, align 2
  %v3_c8c0 = zext i16 %v2_c8c0 to i32
  %v5_c8c0 = add i32 %v0_c8c0, -2
  store i32 %v5_c8c0, i32* @r1, align 4
  %v2_c8c8 = add i32 %v3_c8c0, %v0_c8c8
  %v8_c8cc = icmp sgt i32 %v1_c8bc, 1
  br i1 %v8_c8cc, label %dec_label_pc_c8bc, label %dec_label_pc_c8d0.loopexit

dec_label_pc_c8d0.loopexit:                       ; preds = %dec_label_pc_c8bc
  br label %dec_label_pc_c8d0

dec_label_pc_c8d0:                                ; preds = %dec_label_pc_c8d0.loopexit, %dec_label_pc_c898
  %v1_c8dc = phi i32 [ %v2_c8c8, %dec_label_pc_c8d0.loopexit ], [ 0, %dec_label_pc_c898 ]
  %v0_c8d0 = phi i32 [ %v1_c8bc, %dec_label_pc_c8d0.loopexit ], [ %arg3, %dec_label_pc_c898 ]
  %v7_c8d0 = icmp eq i32 %v0_c8d0, 1
  br i1 %v7_c8d0, label %bb, label %.thread

.thread:                                          ; preds = %dec_label_pc_c8d0
  br label %bb19

bb:                                               ; preds = %dec_label_pc_c8d0
  %v1_c8d4 = load i32, i32* @r1, align 4
  %v2_c8d4 = inttoptr i32 %v1_c8d4 to i8*
  %v3_c8d4 = load i8, i8* %v2_c8d4, align 1
  %v4_c8d4 = zext i8 %v3_c8d4 to i32
  %v3_c8dc = add i32 %v4_c8d4, %v1_c8dc
  br label %bb19

bb19:                                             ; preds = %.thread, %bb
  %v1_c904 = phi i32 [ %v1_c8dc, %.thread ], [ %v3_c8dc, %bb ]
  %v0_c8e4 = mul i32 %v3_c8a8, 65536
  %v3_c8e4 = udiv i32 %v0_c8e4, 65536
  %v3_c8e8 = urem i32 %v3_c8ac, 65536
  %v4_c8f0 = udiv i32 %v3_c8a8, 65536
  %v2_c8ec = add nuw nsw i32 %v3_c8e8, %v4_c8f0
  %v5_c8f0 = add nuw nsw i32 %v2_c8ec, %v3_c8e4
  %v1_c8f4 = add i32 %arg1, 9
  %v2_c8f4 = inttoptr i32 %v1_c8f4 to i8*
  %v3_c8f4 = load i8, i8* %v2_c8f4, align 1
  %v4_c8f4 = zext i8 %v3_c8f4 to i32
  %v4_c8f8 = udiv i32 %v3_c8ac, 65536
  %v3_c900 = mul nuw nsw i32 %v4_c8f4, 256
  %v5_c8f8 = add i32 %v4_c8f8, %arg2
  %v2_c8fc = add i32 %v5_c8f8, %v1_c904
  %v2_c904 = add i32 %v2_c8fc, %v5_c8f0
  %v2_c908 = add i32 %v2_c904, %v3_c900
  %tmp = icmp ult i32 %v2_c908, 65536
  br i1 %tmp, label %dec_label_pc_c928, label %dec_label_pc_c914

dec_label_pc_c914:                                ; preds = %bb19, %dec_label_pc_c914
  %v2_c91c5 = phi i32 [ %v2_c91c, %dec_label_pc_c914 ], [ %v2_c908, %bb19 ]
  %v3_c9206.in = phi i32 [ %v2_c91c, %dec_label_pc_c914 ], [ %v2_c908, %bb19 ]
  %v3_c9206 = udiv i32 %v3_c9206.in, 65536
  %v3_c918 = urem i32 %v2_c91c5, 65536
  %v2_c91c = add nuw nsw i32 %v3_c918, %v3_c9206
  %tmp20 = icmp ult i32 %v2_c91c, 65536
  br i1 %tmp20, label %dec_label_pc_c928.loopexit, label %dec_label_pc_c914

dec_label_pc_c928.loopexit:                       ; preds = %dec_label_pc_c914
  br label %dec_label_pc_c928

dec_label_pc_c928:                                ; preds = %dec_label_pc_c928.loopexit, %bb19
  %v0_c928 = phi i32 [ %v2_c91c, %dec_label_pc_c928.loopexit ], [ %v2_c908, %bb19 ]
  %v1_c928 = urem i32 %v0_c928, 65536
  %v3_c930 = xor i32 %v1_c928, 65535
  ret i32 %v3_c930

; uselistorder directives
  uselistorder i32 %v2_c91c, { 2, 1, 3, 0 }
  uselistorder i32 %v2_c908, { 3, 0, 2, 1 }
  uselistorder i32 %v1_c8dc, { 1, 0 }
  uselistorder i32 %v5_c8c0, { 1, 0 }
  uselistorder i32 %v0_c8c0, { 1, 0 }
  uselistorder i32 %v3_c8a8, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_c914, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %dec_label_pc_c8bc, { 1, 0 }
}

define i32 @function_c93c(i32 %arg1) local_unnamed_addr {
dec_label_pc_c93c:
  %v2_c948 = load i32, i32* @global_var_212e0.58, align 4
  %v2_c950 = call i32 @function_113ac(i32 %v2_c948, i32 9)
  ret i32 %v2_c950
}

define i32 @function_c964(i32 %arg1) local_unnamed_addr {
dec_label_pc_c964:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-4681 = alloca i32, align 4
  %stack_var_-8777 = alloca i32, align 4
  %stack_var_-585 = alloca i8, align 1
  %v3_c964 = load i32, i32* @r4, align 4
  %v6_c964 = load i32, i32* @r5, align 4
  %v9_c964 = load i32, i32* @r6, align 4
  %v12_c964 = load i32, i32* @r7, align 4
  %v15_c964 = load i32, i32* @r8, align 4
  %v18_c964 = load i32, i32* @sb, align 4
  %v21_c964 = load i32, i32* @sl, align 4
  %v24_c964 = load i32, i32* @fp, align 4
  %v27_c964 = load i32, i32* @lr, align 4
  store i32 0, i32* @r5, align 4
  %v2_c980 = ptrtoint i8* %stack_var_-585 to i32
  store i32 %v2_c980, i32* @r6, align 4
  store i32 0, i32* %stack_var_-56, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  store i32 513, i32* @r2, align 4
  %v2_c9ac = ptrtoint i32* %stack_var_-8777 to i32
  store i32 %v2_c9ac, i32* @fp, align 4
  %v3_c9b8 = call i32 @function_11a60(i8* nonnull %stack_var_-585, i32 0)
  %v2_c9bc = ptrtoint i32* %stack_var_-4681 to i32
  store i32 %v2_c9bc, i32* @sl, align 4
  %v0_c9c0 = load i32, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_c9cc = bitcast i32* %stack_var_-8777 to i8*
  %v3_c9cc = call i32 @function_11a60(i8* %v2_c9cc, i32 %v0_c9c0)
  %v0_c9d4 = load i32, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_c9e0 = bitcast i32* %stack_var_-4681 to i8*
  %v3_c9e0 = call i32 @function_11a60(i8* %v2_c9e0, i32 %v0_c9d4)
  %v2_c9e4 = ptrtoint i8* %stack_var_-72 to i32
  store i32 %v2_c9e4, i32* @sb, align 4
  %v0_c9e8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c9e8 = udiv i32 %v0_c9e8, 256
  %v1_c9ec = urem i32 %v0_c9e8, 256
  store i32 %v1_c9ec, i32* @r4, align 4
  %v3_c9fc = trunc i32 %v3_c9e8 to i8
  %v4_c9fc = call i32 @function_10f80(i8 %v3_c9fc, i32 16, i32 %v2_c9e4)
  %v2_ca04 = call i32 @function_10b20(i8* nonnull %stack_var_-72)
  %v7_ca08 = icmp eq i32 %v2_ca04, 2
  br i1 %v7_ca08, label %dec_label_pc_cecc, label %dec_label_pc_ca10

dec_label_pc_ca10:                                ; preds = %dec_label_pc_c964, %dec_label_pc_cecc
  %v1_ca14 = call i32 @function_104ec(i32 15)
  %v1_ca1c = call i32 @function_104ec(i32 16)
  %v1_ca24 = call i32 @function_104ec(i32 17)
  %v1_ca2c = call i32 @function_104ec(i32 19)
  %v0_ca30 = load i32, i32* @r5, align 4
  %v2_ca38 = inttoptr i32 %v0_ca30 to i32*
  %v3_ca38 = call i32 @function_10428(i32 19, i32* %v2_ca38)
  %v0_ca3c = load i32, i32* @r5, align 4
  %v2_ca40 = call i32 @function_111ec(i32 %v3_ca38, i32 %v0_ca3c)
  %v7_ca44 = icmp eq i32 %v2_ca40, -1
  store i32 %v2_ca40, i32* @r8, align 4
  br i1 %v7_ca44, label %bb, label %dec_label_pc_ca54.preheader

bb:                                               ; preds = %dec_label_pc_ca10
  %v1_ca4c = load i32, i32* @r5, align 4
  store i32 %v1_ca4c, i32* @r4, align 4
  br label %dec_label_pc_ce68

dec_label_pc_ca54.preheader:                      ; preds = %dec_label_pc_ca10
  %v4_ca6056 = call i32 @function_10d80(i8* nonnull %stack_var_-585, i32 512, i32 %v2_ca40)
  %v2_ca6458 = icmp eq i32 %v4_ca6056, 0
  br i1 %v2_ca6458, label %dec_label_pc_cbec.loopexit, label %dec_label_pc_ca6c.lr.ph

dec_label_pc_ca6c.lr.ph:                          ; preds = %dec_label_pc_ca54.preheader
  %v2_cab4 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_ca6c

dec_label_pc_ca6c:                                ; preds = %dec_label_pc_ca6c.lr.ph, %dec_label_pc_ca54.backedge
  %v3_ca70 = load i8, i8* %stack_var_-585, align 1
  %v4_ca70 = sext i8 %v3_ca70 to i32
  %v2_ca74 = icmp eq i8 %v3_ca70, 0
  br i1 %v2_ca74, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_ca6c
  %v8_ca78 = icmp eq i8 %v3_ca70, 58
  br i1 %v8_ca78, label %.thread8, label %dec_label_pc_ca8c

.thread8:                                         ; preds = %bb125
  br label %dec_label_pc_caa4

bb126:                                            ; preds = %dec_label_pc_ca6c
  br label %dec_label_pc_caa4

dec_label_pc_ca8c:                                ; preds = %bb125
  %v1_ca94.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_ca90

dec_label_pc_ca90:                                ; preds = %bb127, %dec_label_pc_ca8c
  %v0_ca90 = phi i32 [ %v1_ca90, %bb127 ], [ 0, %dec_label_pc_ca8c ]
  %v1_ca90 = add i32 %v0_ca90, 1
  %v2_ca94 = add i32 %v1_ca90, %v1_ca94.pre
  %v3_ca94 = inttoptr i32 %v2_ca94 to i8*
  %v4_ca94 = load i8, i8* %v3_ca94, align 1
  %v6_ca94 = zext i8 %v4_ca94 to i32
  %v2_ca98 = icmp eq i8 %v4_ca94, 0
  br i1 %v2_ca98, label %dec_label_pc_caa4, label %bb127

bb127:                                            ; preds = %dec_label_pc_ca90
  %v8_ca9c = icmp eq i8 %v4_ca94, 58
  br i1 %v8_ca9c, label %dec_label_pc_caa4, label %dec_label_pc_ca90

dec_label_pc_caa4:                                ; preds = %dec_label_pc_ca90, %bb127, %bb126, %.thread8
  %v1_cad0 = phi i32 [ 0, %.thread8 ], [ 0, %bb126 ], [ %v1_ca90, %bb127 ], [ %v1_ca90, %dec_label_pc_ca90 ]
  %v0_caa4 = phi i32 [ %v4_ca70, %.thread8 ], [ %v4_ca70, %bb126 ], [ %v6_ca94, %bb127 ], [ %v6_ca94, %dec_label_pc_ca90 ]
  %v2_caa4 = icmp eq i32 %v0_caa4, 0
  br i1 %v2_caa4, label %dec_label_pc_ca54.backedge, label %dec_label_pc_caac

dec_label_pc_ca54.backedge:                       ; preds = %dec_label_pc_caa4, %dec_label_pc_cb74, %dec_label_pc_cbc0, %dec_label_pc_caf0
  %v0_ca5c = load i32, i32* @r8, align 4
  %v4_ca60 = call i32 @function_10d80(i8* nonnull %stack_var_-585, i32 512, i32 %v0_ca5c)
  %v2_ca64 = icmp eq i32 %v4_ca60, 0
  br i1 %v2_ca64, label %dec_label_pc_cbec.loopexit, label %dec_label_pc_ca6c

dec_label_pc_caac:                                ; preds = %dec_label_pc_caa4
  %v1_cab0 = add i32 %v1_cad0, 2
  %v2_cab8 = add i32 %v1_cab0, %v2_cab4
  %v1_cabc = add i32 %v2_cab8, -545
  %v2_cabc = inttoptr i32 %v1_cabc to i8*
  %v3_cabc = load i8, i8* %v2_cabc, align 1
  %v2_cac0 = icmp eq i8 %v3_cabc, 0
  br i1 %v2_cac0, label %bb129, label %bb128

bb128:                                            ; preds = %dec_label_pc_caac
  %v8_cac4 = icmp eq i8 %v3_cabc, 32
  br i1 %v8_cac4, label %.thread13, label %dec_label_pc_cad0

.thread13:                                        ; preds = %bb128
  store i32 %v1_cab0, i32* @r5, align 4
  br label %dec_label_pc_caf0

bb129:                                            ; preds = %dec_label_pc_caac
  store i32 %v1_cab0, i32* @r5, align 4
  br label %dec_label_pc_caf0

dec_label_pc_cad0:                                ; preds = %bb128
  %v0_cad0 = load i32, i32* @r6, align 4
  %v2_cad0 = add i32 %v0_cad0, %v1_cad0
  br label %dec_label_pc_cad8

dec_label_pc_cad8:                                ; preds = %bb130, %dec_label_pc_cad0
  %v0_cae416 = phi i32 [ %v1_cae4, %bb130 ], [ %v1_cab0, %dec_label_pc_cad0 ]
  %v0_cae818 = phi i32 [ %v1_cae8, %bb130 ], [ %v2_cad0, %dec_label_pc_cad0 ]
  %v1_cad8 = add i32 %v0_cae818, 3
  %v2_cad8 = inttoptr i32 %v1_cad8 to i8*
  %v3_cad8 = load i8, i8* %v2_cad8, align 1
  %v2_cadc = icmp eq i8 %v3_cad8, 0
  br i1 %v2_cadc, label %.thread15, label %bb130

.thread15:                                        ; preds = %dec_label_pc_cad8
  %v1_cae417 = add i32 %v0_cae416, 1
  store i32 %v1_cae417, i32* @r5, align 4
  br label %dec_label_pc_caf0

bb130:                                            ; preds = %dec_label_pc_cad8
  %v8_cae0 = icmp eq i8 %v3_cad8, 32
  %v1_cae4 = add i32 %v0_cae416, 1
  store i32 %v1_cae4, i32* @r5, align 4
  %v1_cae8 = add i32 %v0_cae818, 1
  br i1 %v8_cae0, label %dec_label_pc_caf0, label %dec_label_pc_cad8

dec_label_pc_caf0:                                ; preds = %bb130, %bb129, %.thread15, %.thread13
  %v1_cafc = phi i32 [ %v1_cae417, %.thread15 ], [ %v1_cab0, %.thread13 ], [ %v1_cab0, %bb129 ], [ %v1_cae4, %bb130 ]
  %v0_caf0 = load i32, i32* @r6, align 4
  %v2_caf0 = add i32 %v0_caf0, %v1_cab0
  store i32 %v2_caf0, i32* @r4, align 4
  %v2_cafc = add i32 %v1_cafc, %v2_cab4
  store i32 0, i32* @r7, align 4
  %v3_cb04 = add i32 %v2_cafc, -545
  %v4_cb04 = inttoptr i32 %v3_cb04 to i8*
  store i8 0, i8* %v4_cb04, align 1
  %v0_cb08 = load i32, i32* @r4, align 4
  %v1_cb0c = inttoptr i32 %v0_cb08 to i8*
  %v2_cb0c = call i32 @function_10b20(i8* %v1_cb0c)
  store i32 %v2_cb0c, i32* @r1, align 4
  %v0_cb18 = load i32, i32* @r4, align 4
  %v3_cb1c = inttoptr i32 %v0_cb18 to i8*
  %v4_cb1c = call i32 @function_10e70(i8* %v3_cb1c, i32 %v2_cb0c, i32 %v2_c9e4)
  %v7_cb20 = icmp eq i32 %v4_cb1c, -1
  br i1 %v7_cb20, label %dec_label_pc_ca54.backedge, label %dec_label_pc_cb3c.preheader

dec_label_pc_cb3c.preheader:                      ; preds = %dec_label_pc_caf0
  %v1_cb24 = load i32, i32* @r7, align 4
  %v1_cb28 = load i32, i32* @r6, align 4
  %v2_cb28 = load i32, i32* @r5, align 4
  %v3_cb28 = add i32 %v2_cb28, %v1_cb28
  store i32 %v1_cb24, i32* @lr, align 4
  %v1_cb3c48 = add i32 %v3_cb28, 2
  %v2_cb3c49 = inttoptr i32 %v1_cb3c48 to i8*
  %v3_cb3c50 = load i8, i8* %v2_cb3c49, align 1
  %v2_cb4052 = icmp eq i8 %v3_cb3c50, 0
  %v1_cb4454 = add i32 %v2_cb28, 2
  br i1 %v2_cb4052, label %dec_label_pc_cb74, label %dec_label_pc_cb4c

dec_label_pc_cb4c:                                ; preds = %dec_label_pc_cb3c.preheader, %dec_label_pc_cb3c.backedge
  %v0_cb7483 = phi i32 [ %v0_cb7481, %dec_label_pc_cb3c.backedge ], [ %v1_cb24, %dec_label_pc_cb3c.preheader ]
  %v0_cb5c.pr = phi i32 [ %v0_cb5c.pr70, %dec_label_pc_cb3c.backedge ], [ %v1_cb24, %dec_label_pc_cb3c.preheader ]
  %v0_ce7c = phi i32 [ %v0_ce7c73, %dec_label_pc_cb3c.backedge ], [ %v1_cb24, %dec_label_pc_cb3c.preheader ]
  %v0_cb4478 = phi i32 [ %v1_cb44, %dec_label_pc_cb3c.backedge ], [ %v1_cb4454, %dec_label_pc_cb3c.preheader ]
  %v0_cb6c = phi i32 [ %v0_cb3c, %dec_label_pc_cb3c.backedge ], [ %v3_cb28, %dec_label_pc_cb3c.preheader ]
  %v1_cb50.in = phi i8 [ %v3_cb3c, %dec_label_pc_cb3c.backedge ], [ %v3_cb3c50, %dec_label_pc_cb3c.preheader ]
  %v7_cb4c = icmp eq i8 %v1_cb50.in, 9
  br i1 %v7_cb4c, label %bb132, label %bb131

bb131:                                            ; preds = %dec_label_pc_cb4c
  %v8_cb50 = icmp eq i8 %v1_cb50.in, 32
  br i1 %v8_cb50, label %.thread27, label %dec_label_pc_cb5c

.thread27:                                        ; preds = %bb131
  br label %dec_label_pc_cb68

bb132:                                            ; preds = %dec_label_pc_cb4c
  br label %dec_label_pc_cb68

dec_label_pc_cb5c:                                ; preds = %bb131
  %v7_cb5c = icmp eq i32 %v0_cb5c.pr, 1
  br i1 %v7_cb5c, label %dec_label_pc_ce7c, label %dec_label_pc_cb64

dec_label_pc_cb64:                                ; preds = %dec_label_pc_ce7c, %dec_label_pc_cb5c
  %v0_cb6875 = phi i32 [ %v1_ce7c, %dec_label_pc_ce7c ], [ %v0_ce7c, %dec_label_pc_cb5c ]
  br label %dec_label_pc_cb68

dec_label_pc_cb68:                                ; preds = %bb132, %.thread27, %dec_label_pc_cb64
  %v0_cb68 = phi i32 [ %v0_ce7c, %.thread27 ], [ %v0_ce7c, %bb132 ], [ %v0_cb6875, %dec_label_pc_cb64 ]
  %v0_cb5c.pr71 = phi i32 [ 1, %.thread27 ], [ 1, %bb132 ], [ 0, %dec_label_pc_cb64 ]
  %v7_cb70 = icmp sgt i32 %v0_cb68, 6
  br i1 %v7_cb70, label %dec_label_pc_cb74, label %dec_label_pc_cb3c.backedge

dec_label_pc_cb74:                                ; preds = %dec_label_pc_cb3c.backedge, %dec_label_pc_cb68, %dec_label_pc_cb3c.preheader
  %v1_cbc4 = phi i32 [ %v1_cb4454, %dec_label_pc_cb3c.preheader ], [ %v1_cb44, %dec_label_pc_cb3c.backedge ], [ %v0_cb4478, %dec_label_pc_cb68 ]
  %v0_cb74 = phi i32 [ %v1_cb24, %dec_label_pc_cb3c.preheader ], [ %v0_cb7481, %dec_label_pc_cb3c.backedge ], [ %v0_cb7483, %dec_label_pc_cb68 ]
  %v2_cb74 = icmp eq i32 %v0_cb74, 0
  br i1 %v2_cb74, label %dec_label_pc_ca54.backedge, label %dec_label_pc_cb80

dec_label_pc_cb80:                                ; preds = %dec_label_pc_cb74
  %v2_cb88 = add i32 %v1_cbc4, %v2_cab4
  %v1_cb8c = add i32 %v2_cb88, -545
  %v2_cb8c = inttoptr i32 %v1_cb8c to i8*
  %v3_cb8c = load i8, i8* %v2_cb8c, align 1
  %v2_cb90 = icmp eq i8 %v3_cb8c, 0
  br i1 %v2_cb90, label %dec_label_pc_cbc0, label %bb133

bb133:                                            ; preds = %dec_label_pc_cb80
  %v8_cb94 = icmp eq i8 %v3_cb8c, 32
  br i1 %v8_cb94, label %dec_label_pc_cbc0, label %dec_label_pc_cb9c

dec_label_pc_cb9c:                                ; preds = %bb133
  %v2_cb9c = add i32 %v1_cbc4, %v1_cb28
  br label %dec_label_pc_cba0

dec_label_pc_cba0:                                ; preds = %bb134, %dec_label_pc_cb9c
  %v0_cbac30 = phi i32 [ %v1_cbac, %bb134 ], [ %v1_cbc4, %dec_label_pc_cb9c ]
  %v0_cba0 = phi i32 [ %v1_cba0, %bb134 ], [ %v2_cb9c, %dec_label_pc_cb9c ]
  %v1_cba0 = add i32 %v0_cba0, 1
  %v2_cba0 = inttoptr i32 %v1_cba0 to i8*
  %v3_cba0 = load i8, i8* %v2_cba0, align 1
  %v2_cba4 = icmp eq i8 %v3_cba0, 0
  br i1 %v2_cba4, label %.thread29, label %bb134

.thread29:                                        ; preds = %dec_label_pc_cba0
  %v1_cbac31 = add i32 %v0_cbac30, 1
  br label %dec_label_pc_cbb4

bb134:                                            ; preds = %dec_label_pc_cba0
  %v8_cba8 = icmp eq i8 %v3_cba0, 32
  %v1_cbac = add i32 %v0_cbac30, 1
  br i1 %v8_cba8, label %dec_label_pc_cbb4, label %dec_label_pc_cba0

dec_label_pc_cbb4:                                ; preds = %bb134, %.thread29
  %v1_cbbc = phi i32 [ %v1_cbac31, %.thread29 ], [ %v1_cbac, %bb134 ]
  %v2_cbbc = add i32 %v1_cbbc, %v2_cab4
  br label %dec_label_pc_cbc0

dec_label_pc_cbc0:                                ; preds = %dec_label_pc_cb80, %bb133, %dec_label_pc_cbb4
  %v2_cbcc = phi i32 [ %v2_cb88, %dec_label_pc_cb80 ], [ %v2_cb88, %bb133 ], [ %v2_cbbc, %dec_label_pc_cbb4 ]
  %v2_cbc4 = add i32 %v1_cbc4, %v1_cb28
  store i32 %v2_cbc4, i32* @r4, align 4
  %v3_cbcc = add i32 %v2_cbcc, -545
  %v4_cbcc = inttoptr i32 %v3_cbcc to i8*
  store i8 0, i8* %v4_cbcc, align 1
  %v1_cbd0 = inttoptr i32 %v2_cbc4 to i8*
  %v2_cbd0 = call i32 @function_10b20(i8* %v1_cbd0)
  %v8_cbd8 = icmp sgt i32 %v2_cbd0, 15
  br i1 %v8_cbd8, label %dec_label_pc_ca54.backedge, label %dec_label_pc_cbdc

dec_label_pc_cbdc:                                ; preds = %dec_label_pc_cbc0
  %v0_cbe0 = load i32, i32* @r4, align 4
  %v2_cbe4 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_cbe4, i32* @r0, align 4
  %v2_cbe8 = bitcast i32* %stack_var_-56 to i8*
  %v3_cbe8 = call i32 @function_10b48(i8* %v2_cbe8, i32 %v0_cbe0)
  br label %dec_label_pc_cbec

dec_label_pc_cbec.loopexit:                       ; preds = %dec_label_pc_ca54.backedge, %dec_label_pc_ca54.preheader
  %.pre = ptrtoint i32* %stack_var_-56 to i32
  %.pre92 = bitcast i32* %stack_var_-56 to i8*
  br label %dec_label_pc_cbec

dec_label_pc_cbec:                                ; preds = %dec_label_pc_cbec.loopexit, %dec_label_pc_cbdc
  %v1_cbfc.pre-phi = phi i8* [ %.pre92, %dec_label_pc_cbec.loopexit ], [ %v2_cbe8, %dec_label_pc_cbdc ]
  %v2_cbf8.pre-phi = phi i32 [ %.pre, %dec_label_pc_cbec.loopexit ], [ %v2_cbe4, %dec_label_pc_cbdc ]
  %v0_cbec = load i32, i32* @r8, align 4
  %v1_cbf0 = call i32 @function_115e0(i32 %v0_cbec)
  %v2_cbfc = call i32 @function_10b20(i8* %v1_cbfc.pre-phi)
  store i32 %v2_cbfc, i32* @r4, align 4
  %v2_cc00 = icmp eq i32 %v2_cbfc, 0
  br i1 %v2_cc00, label %dec_label_pc_cea8, label %dec_label_pc_cc08

dec_label_pc_cc08:                                ; preds = %dec_label_pc_cbec
  %v3_cc10 = call i32 @function_10428(i32 15, i32* null)
  %v1_cc14 = call i32 @function_117dc(i32 %v3_cc10)
  store i32 %v1_cc14, i32* @sb, align 4
  %v2_cc18 = icmp eq i32 %v1_cc14, 0
  br i1 %v2_cc18, label %dec_label_pc_ce48, label %dec_label_pc_cc28.preheader

dec_label_pc_cc28.preheader:                      ; preds = %dec_label_pc_cc08
  store i32 0, i32* @r5, align 4
  %v1_cc2c43 = inttoptr i32 %v1_cc14 to i32*
  %v2_cc2c44 = call i32 @function_11920(i32* %v1_cc2c43)
  %v2_cc3046 = icmp eq i32 %v2_cc2c44, 0
  br i1 %v2_cc3046, label %dec_label_pc_ce3c, label %dec_label_pc_cc38.preheader

dec_label_pc_cc28.loopexit:                       ; preds = %dec_label_pc_cc40, %dec_label_pc_cc50, %dec_label_pc_ccbc
  %v0_cc28 = load i32, i32* @sb, align 4
  %v1_cc2c = inttoptr i32 %v0_cc28 to i32*
  %v2_cc2c = call i32 @function_11920(i32* %v1_cc2c)
  %v2_cc30 = icmp eq i32 %v2_cc2c, 0
  br i1 %v2_cc30, label %dec_label_pc_ce3c, label %dec_label_pc_cc38.preheader

dec_label_pc_cc38.preheader:                      ; preds = %dec_label_pc_cc28.preheader, %dec_label_pc_cc28.loopexit
  %v0_cc4091 = phi i32 [ %v2_cc2c, %dec_label_pc_cc28.loopexit ], [ %v2_cc2c44, %dec_label_pc_cc28.preheader ]
  br label %dec_label_pc_cc38

dec_label_pc_cc38:                                ; preds = %dec_label_pc_cc38.preheader, %dec_label_pc_ce24
  %v0_cc58 = phi i32 [ %v0_cc4091, %dec_label_pc_cc38.preheader ], [ %v2_ce30, %dec_label_pc_ce24 ]
  %v0_cc38 = load i32, i32* @r5, align 4
  %v2_cc38 = icmp eq i32 %v0_cc38, 0
  br i1 %v2_cc38, label %dec_label_pc_cc40, label %dec_label_pc_ce3c

dec_label_pc_cc40:                                ; preds = %dec_label_pc_cc38
  %v1_cc40 = add i32 %v0_cc58, 11
  %v2_cc40 = inttoptr i32 %v1_cc40 to i8*
  %v3_cc40 = load i8, i8* %v2_cc40, align 1
  %v4_cc40 = zext i8 %v3_cc40 to i32
  %v1_cc44 = add nsw i32 %v4_cc40, -48
  %tmp = icmp ugt i32 %v1_cc44, 9
  br i1 %tmp, label %dec_label_pc_cc28.loopexit, label %dec_label_pc_cc50

dec_label_pc_cc50:                                ; preds = %dec_label_pc_cc40
  store i32 %v1_cc40, i32* @r7, align 4
  %v3_cc5c = call i32 @function_10428(i32 15, i32* null)
  store i32 %v2_c9bc, i32* @r0, align 4
  %v3_cc68 = call i32 @function_10b48(i8* %v2_c9e0, i32 %v3_cc5c)
  %v2_cc70 = call i32 @function_10b20(i8* %v2_c9e0)
  %v0_cc74 = load i32, i32* @r7, align 4
  %v1_cc78 = load i32, i32* @sl, align 4
  %v2_cc78 = add i32 %v1_cc78, %v2_cc70
  store i32 %v2_cc78, i32* @r0, align 4
  %v2_cc7c = inttoptr i32 %v2_cc78 to i8*
  %v3_cc7c = call i32 @function_10b48(i8* %v2_cc7c, i32 %v0_cc74)
  %v2_cc84 = call i32 @function_10b20(i8* %v2_c9e0)
  %v0_cc88 = load i32, i32* @r5, align 4
  store i32 %v2_cc84, i32* @r4, align 4
  %v2_cc94 = inttoptr i32 %v0_cc88 to i32*
  %v3_cc94 = call i32 @function_10428(i32 16, i32* %v2_cc94)
  %v0_cc9c = load i32, i32* @r4, align 4
  %v1_cc9c = load i32, i32* @sl, align 4
  %v2_cc9c = add i32 %v1_cc9c, %v0_cc9c
  store i32 %v2_cc9c, i32* @r0, align 4
  %v2_cca0 = inttoptr i32 %v2_cc9c to i8*
  %v3_cca0 = call i32 @function_10b48(i8* %v2_cca0, i32 %v3_cc94)
  %v3_ccb0 = call i32 @function_11344(i32 %v2_c9bc, i32 %v2_c9ac, i32 4096)
  %v7_ccb4 = icmp eq i32 %v3_ccb0, -1
  br i1 %v7_ccb4, label %dec_label_pc_cc28.loopexit, label %dec_label_pc_ccbc

dec_label_pc_ccbc:                                ; preds = %dec_label_pc_cc50
  %v0_ccbc = load i32, i32* @r5, align 4
  %v2_ccc4 = inttoptr i32 %v0_ccbc to i32*
  %v3_ccc4 = call i32 @function_10428(i32 15, i32* %v2_ccc4)
  store i32 %v2_c9bc, i32* @r0, align 4
  %v3_ccd0 = call i32 @function_10b48(i8* %v2_c9e0, i32 %v3_ccc4)
  %v2_ccd8 = call i32 @function_10b20(i8* %v2_c9e0)
  %v0_ccdc = load i32, i32* @r7, align 4
  %v1_cce0 = load i32, i32* @sl, align 4
  %v2_cce0 = add i32 %v1_cce0, %v2_ccd8
  store i32 %v2_cce0, i32* @r0, align 4
  %v2_cce4 = inttoptr i32 %v2_cce0 to i8*
  %v3_cce4 = call i32 @function_10b48(i8* %v2_cce4, i32 %v0_ccdc)
  %v2_ccec = call i32 @function_10b20(i8* %v2_c9e0)
  %v0_ccf0 = load i32, i32* @r5, align 4
  store i32 %v2_ccec, i32* @r4, align 4
  %v2_ccfc = inttoptr i32 %v0_ccf0 to i32*
  %v3_ccfc = call i32 @function_10428(i32 17, i32* %v2_ccfc)
  %v0_cd04 = load i32, i32* @r4, align 4
  %v1_cd04 = load i32, i32* @sl, align 4
  %v2_cd04 = add i32 %v1_cd04, %v0_cd04
  store i32 %v2_cd04, i32* @r0, align 4
  %v2_cd08 = inttoptr i32 %v2_cd04 to i8*
  %v3_cd08 = call i32 @function_10b48(i8* %v2_cd08, i32 %v3_ccfc)
  %v1_cd10 = call i32 @function_117dc(i32 %v2_c9bc)
  store i32 %v1_cd10, i32* @r8, align 4
  %v2_cd14 = icmp eq i32 %v1_cd10, 0
  br i1 %v2_cd14, label %dec_label_pc_cc28.loopexit, label %dec_label_pc_cd1c.preheader

dec_label_pc_cd1c.preheader:                      ; preds = %dec_label_pc_ccbc
  %v1_cd2038 = inttoptr i32 %v1_cd10 to i32*
  %v2_cd2039 = call i32 @function_11920(i32* %v1_cd2038)
  store i32 %v2_cd2039, i32* @r6, align 4
  %v2_cd2441 = icmp eq i32 %v2_cd2039, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9ac, i32* @r0, align 4
  br i1 %v2_cd2441, label %dec_label_pc_ce24, label %dec_label_pc_cd34thread-pre-split

dec_label_pc_cd1c.loopexit:                       ; preds = %dec_label_pc_cd3c, %dec_label_pc_cdd4
  %v0_cd1c = load i32, i32* @r8, align 4
  %v1_cd20 = inttoptr i32 %v0_cd1c to i32*
  %v2_cd20 = call i32 @function_11920(i32* %v1_cd20)
  store i32 %v2_cd20, i32* @r6, align 4
  %v2_cd24 = icmp eq i32 %v2_cd20, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9ac, i32* @r0, align 4
  br i1 %v2_cd24, label %dec_label_pc_ce24, label %dec_label_pc_cd34thread-pre-split

dec_label_pc_cd34thread-pre-split:                ; preds = %dec_label_pc_cd1c.preheader, %dec_label_pc_cd1c.loopexit
  %v0_cd34.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_cd34

dec_label_pc_cd34:                                ; preds = %dec_label_pc_cd34thread-pre-split, %dec_label_pc_cdfc
  %v0_cd34 = phi i32 [ %v0_cd34.pr, %dec_label_pc_cd34thread-pre-split ], [ 1, %dec_label_pc_cdfc ]
  %v2_cd34 = icmp eq i32 %v0_cd34, 0
  br i1 %v2_cd34, label %dec_label_pc_cd3c, label %dec_label_pc_ce24

dec_label_pc_cd3c:                                ; preds = %dec_label_pc_cd34
  %v0_cd3c = call i32 @function_10bb4()
  %v0_cd40 = load i32, i32* @r5, align 4
  %v2_cd48 = inttoptr i32 %v0_cd40 to i32*
  %v3_cd48 = call i32 @function_10428(i32 15, i32* %v2_cd48)
  store i32 %v2_c9bc, i32* @r0, align 4
  %v3_cd54 = call i32 @function_10b48(i8* %v2_c9e0, i32 %v3_cd48)
  %v2_cd5c = call i32 @function_10b20(i8* %v2_c9e0)
  %v0_cd60 = load i32, i32* @r7, align 4
  %v1_cd64 = load i32, i32* @sl, align 4
  %v2_cd64 = add i32 %v1_cd64, %v2_cd5c
  store i32 %v2_cd64, i32* @r0, align 4
  %v2_cd68 = inttoptr i32 %v2_cd64 to i8*
  %v3_cd68 = call i32 @function_10b48(i8* %v2_cd68, i32 %v0_cd60)
  %v2_cd70 = call i32 @function_10b20(i8* %v2_c9e0)
  %v0_cd74 = load i32, i32* @r5, align 4
  store i32 %v2_cd70, i32* @r4, align 4
  %v2_cd80 = inttoptr i32 %v0_cd74 to i32*
  %v3_cd80 = call i32 @function_10428(i32 17, i32* %v2_cd80)
  %v0_cd88 = load i32, i32* @r4, align 4
  %v1_cd88 = load i32, i32* @sl, align 4
  %v2_cd88 = add i32 %v1_cd88, %v0_cd88
  store i32 %v2_cd88, i32* @r0, align 4
  %v2_cd8c = inttoptr i32 %v2_cd88 to i8*
  %v3_cd8c = call i32 @function_10b48(i8* %v2_cd8c, i32 %v3_cd80)
  %v2_cd94 = call i32 @function_10b20(i8* %v2_c9e0)
  %v1_cd9c = load i32, i32* @sl, align 4
  %v2_cd9c = add i32 %v1_cd9c, %v2_cd94
  store i32 %v2_cd9c, i32* @r0, align 4
  %v2_cda0 = inttoptr i32 %v2_cd9c to i8*
  %v3_cda0 = call i32 @function_10b48(i8* %v2_cda0, i32 ptrtoint (i32* @global_var_1697c.60 to i32))
  %v2_cda8 = call i32 @function_10b20(i8* %v2_c9e0)
  %v0_cdac = load i32, i32* @r6, align 4
  %v1_cdac = add i32 %v0_cdac, 11
  %v1_cdb0 = load i32, i32* @sl, align 4
  %v2_cdb0 = add i32 %v1_cdb0, %v2_cda8
  store i32 %v2_cdb0, i32* @r0, align 4
  %v2_cdb4 = inttoptr i32 %v2_cdb0 to i8*
  %v3_cdb4 = call i32 @function_10b48(i8* %v2_cdb4, i32 %v1_cdac)
  %v3_cdc4 = call i32 @function_11344(i32 %v2_c9bc, i32 %v2_c9ac, i32 4096)
  %v7_cdc8 = icmp eq i32 %v3_cdc4, -1
  br i1 %v7_cdc8, label %dec_label_pc_cd1c.loopexit, label %dec_label_pc_cdd4

dec_label_pc_cdd4:                                ; preds = %dec_label_pc_cd3c
  %v2_cdd4 = call i32 @function_10b20(i8* %v2_c9cc)
  store i32 %v2_cdd4, i32* @r1, align 4
  %v4_cde8 = call i32 @function_10e70(i8* %v2_c9cc, i32 %v2_cdd4, i32 %v2_cbf8.pre-phi)
  %v7_cdec = icmp eq i32 %v4_cde8, -1
  br i1 %v7_cdec, label %dec_label_pc_cd1c.loopexit, label %dec_label_pc_cdfc

dec_label_pc_cdfc:                                ; preds = %dec_label_pc_cdd4
  %v0_cdf4 = load i32, i32* @r7, align 4
  %v2_cdfc = inttoptr i32 %v0_cdf4 to i8*
  %v3_cdfc = call i32 @function_10c44(i8* %v2_cdfc, i32 10)
  %v2_ce04 = call i32 @function_113ac(i32 %v3_cdfc, i32 9)
  %v0_ce08 = load i32, i32* @r8, align 4
  %v1_ce0c = inttoptr i32 %v0_ce08 to i32*
  %v2_ce0c = call i32 @function_11920(i32* %v1_ce0c)
  store i32 %v2_ce0c, i32* @r6, align 4
  %v2_ce10 = icmp eq i32 %v2_ce0c, 0
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9ac, i32* @r0, align 4
  br i1 %v2_ce10, label %dec_label_pc_ce24, label %dec_label_pc_cd34

dec_label_pc_ce24:                                ; preds = %dec_label_pc_cd1c.loopexit, %dec_label_pc_cdfc, %dec_label_pc_cd34, %dec_label_pc_cd1c.preheader
  %v0_ce24 = load i32, i32* @r8, align 4
  %v1_ce28 = inttoptr i32 %v0_ce24 to i32*
  %v2_ce28 = call i32 @function_11614(i32* %v1_ce28)
  %v0_ce2c = load i32, i32* @sb, align 4
  %v1_ce30 = inttoptr i32 %v0_ce2c to i32*
  %v2_ce30 = call i32 @function_11920(i32* %v1_ce30)
  %v2_ce34 = icmp eq i32 %v2_ce30, 0
  br i1 %v2_ce34, label %dec_label_pc_ce3c, label %dec_label_pc_cc38

dec_label_pc_ce3c:                                ; preds = %dec_label_pc_cc28.loopexit, %dec_label_pc_ce24, %dec_label_pc_cc38, %dec_label_pc_cc28.preheader
  %v0_ce3c = load i32, i32* @sb, align 4
  %v1_ce40 = inttoptr i32 %v0_ce3c to i32*
  %v2_ce40 = call i32 @function_11614(i32* %v1_ce40)
  %v0_ce44 = load i32, i32* @r5, align 4
  %v1_ce44 = urem i32 %v0_ce44, 256
  br label %dec_label_pc_ce48

dec_label_pc_ce48:                                ; preds = %dec_label_pc_cc08, %dec_label_pc_ce3c
  %storemerge = phi i32 [ %v1_ce44, %dec_label_pc_ce3c ], [ 0, %dec_label_pc_cc08 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_ce4c = call i32 @function_13700(i32 1)
  %v1_ce54 = call i32 @function_1044c(i32 15)
  %v1_ce5c = call i32 @function_1044c(i32 16)
  %v1_ce64 = call i32 @function_1044c(i32 17)
  br label %dec_label_pc_ce68

dec_label_pc_ce68:                                ; preds = %bb, %dec_label_pc_cea8, %dec_label_pc_ce48
  %v0_ce68 = load i32, i32* @r4, align 4
  store i32 %v3_c964, i32* @r4, align 4
  store i32 %v6_c964, i32* @r5, align 4
  store i32 %v9_c964, i32* @r6, align 4
  store i32 %v12_c964, i32* @r7, align 4
  store i32 %v15_c964, i32* @r8, align 4
  store i32 %v18_c964, i32* @sb, align 4
  store i32 %v21_c964, i32* @sl, align 4
  store i32 %v24_c964, i32* @fp, align 4
  store i32 %v27_c964, i32* @lr, align 4
  ret i32 %v0_ce68

dec_label_pc_ce7c:                                ; preds = %dec_label_pc_cb5c
  %v1_ce7c = add i32 %v0_ce7c, 1
  %v7_ce80 = icmp eq i32 %v0_ce7c, 0
  br i1 %v7_ce80, label %dec_label_pc_ce88, label %dec_label_pc_cb64

dec_label_pc_ce88:                                ; preds = %dec_label_pc_ce7c
  %v1_ce88 = add i32 %v0_cb6c, 3
  %v2_ce88 = inttoptr i32 %v1_ce88 to i8*
  %v3_ce88 = load i8, i8* %v2_ce88, align 1
  %v7_ce8c = icmp eq i8 %v3_ce88, 65
  br i1 %v7_ce8c, label %dec_label_pc_cea0, label %dec_label_pc_ce94

dec_label_pc_ce94:                                ; preds = %dec_label_pc_ce88, %dec_label_pc_cea0
  %v0_cb7482 = phi i32 [ %v0_cb7483, %dec_label_pc_ce88 ], [ 1, %dec_label_pc_cea0 ]
  br label %dec_label_pc_cb3c.backedge

dec_label_pc_cb3c.backedge:                       ; preds = %dec_label_pc_ce94, %dec_label_pc_cb68
  %v0_cb7481 = phi i32 [ %v0_cb7482, %dec_label_pc_ce94 ], [ %v0_cb7483, %dec_label_pc_cb68 ]
  %v0_ce7c73 = phi i32 [ %v1_ce7c, %dec_label_pc_ce94 ], [ %v0_cb68, %dec_label_pc_cb68 ]
  %v0_cb5c.pr70 = phi i32 [ 0, %dec_label_pc_ce94 ], [ %v0_cb5c.pr71, %dec_label_pc_cb68 ]
  %v0_cb3c = add i32 %v0_cb6c, 1
  %v1_cb3c = add i32 %v0_cb6c, 3
  %v2_cb3c = inttoptr i32 %v1_cb3c to i8*
  %v3_cb3c = load i8, i8* %v2_cb3c, align 1
  %v2_cb40 = icmp eq i8 %v3_cb3c, 0
  %v1_cb44 = add i32 %v0_cb4478, 1
  br i1 %v2_cb40, label %dec_label_pc_cb74, label %dec_label_pc_cb4c

dec_label_pc_cea0:                                ; preds = %dec_label_pc_ce88
  store i32 1, i32* @lr, align 4
  br label %dec_label_pc_ce94

dec_label_pc_cea8:                                ; preds = %dec_label_pc_cbec
  %v1_ceac = call i32 @function_1044c(i32 15)
  %v1_ceb4 = call i32 @function_1044c(i32 16)
  %v1_cebc = call i32 @function_1044c(i32 17)
  %v1_cec4 = call i32 @function_1044c(i32 19)
  br label %dec_label_pc_ce68

dec_label_pc_cecc:                                ; preds = %dec_label_pc_c964
  store i8 48, i8* %stack_var_-72, align 1
  br label %dec_label_pc_ca10

; uselistorder directives
  uselistorder i32 %v1_cb44, { 1, 0 }
  uselistorder i8 %v3_cb3c, { 1, 0 }
  uselistorder i32 %v0_cb7481, { 1, 0 }
  uselistorder i32 %v1_ce7c, { 1, 0 }
  uselistorder i32 %v2_ce30, { 1, 0 }
  uselistorder i32 %v1_cba0, { 1, 0 }
  uselistorder i32 %v0_cbac30, { 1, 0 }
  uselistorder i32 %v1_cbc4, { 0, 3, 1, 2 }
  uselistorder i32 %v0_cb68, { 1, 0 }
  uselistorder i32 %v0_cb4478, { 1, 0 }
  uselistorder i32 %v0_ce7c, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_cb7483, { 1, 2, 0 }
  uselistorder i32 %v1_cb4454, { 1, 0 }
  uselistorder i32 %v2_cb28, { 1, 0 }
  uselistorder i32 %v1_cb24, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v1_cae4, { 0, 2, 1 }
  uselistorder i32 %v0_cae416, { 1, 0 }
  uselistorder i32 %v1_cab0, { 0, 2, 3, 4, 5, 6, 1 }
  uselistorder i32 %v2_ca40, { 1, 2, 0 }
  uselistorder i32 %v0_c9e8, { 1, 0 }
  uselistorder i32 %v2_c9e4, { 1, 0, 2 }
  uselistorder i8* %v2_c9cc, { 1, 0, 2 }
  uselistorder i32 %v2_c9ac, { 1, 2, 3, 0, 4, 5 }
  uselistorder i8* %stack_var_-585, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-72, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32, i32)* @function_10d80, { 1, 0 }
  uselistorder label %dec_label_pc_ce94, { 1, 0 }
  uselistorder label %dec_label_pc_ce68, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ce48, { 1, 0 }
  uselistorder label %dec_label_pc_ce3c, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ce24, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_cd34, { 1, 0 }
  uselistorder label %dec_label_pc_cd34thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_cd1c.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_cc38, { 1, 0 }
  uselistorder label %dec_label_pc_cc38.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_cc28.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cbc0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cb68, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cb4c, { 1, 0 }
  uselistorder label %dec_label_pc_caf0, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_ca54.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_caa4, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_ca6c, { 1, 0 }
  uselistorder label %dec_label_pc_ca10, { 1, 0 }
}

define i32 @function_cef8(i32 %arg1) local_unnamed_addr {
dec_label_pc_cef8:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-8416 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-160 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-4264 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-256 = alloca i32, align 4
  %v3_cef8 = load i32, i32* @r4, align 4
  %v6_cef8 = load i32, i32* @r5, align 4
  %v9_cef8 = load i32, i32* @r6, align 4
  %v12_cef8 = load i32, i32* @r7, align 4
  %v15_cef8 = load i32, i32* @r8, align 4
  %v18_cef8 = load i32, i32* @sb, align 4
  %v21_cef8 = load i32, i32* @sl, align 4
  %v24_cef8 = load i32, i32* @fp, align 4
  %v27_cef8 = load i32, i32* @lr, align 4
  %v2_cf08 = call i32 @function_11260(i32* null)
  store i32 %v2_cf08, i32* @r0, align 4
  store i32 %v2_cf08, i32* @r7, align 4
  %v0_cf10 = call i32 @function_112d0()
  %v7_cf14 = icmp eq i32 %v0_cf10, -1
  %. = zext i1 %v7_cf14 to i32
  %tmp251 = icmp slt i32 %v0_cf10, 1
  %storemerge212 = select i1 %tmp251, i32 %., i32 1
  store i32 %storemerge212, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_212e0.58 to i32), i32* %r3.global-to-local, align 4
  %v2_cf30 = icmp eq i32 %storemerge212, 0
  store i32 %v0_cf10, i32* @global_var_212e0.58, align 4
  br i1 %v2_cf30, label %dec_label_pc_cf4c, label %dec_label_pc_cf3c

dec_label_pc_cf3c:                                ; preds = %dec_label_pc_d1f0, %dec_label_pc_d0d4, %dec_label_pc_cef8
  %v1_cf48 = phi i32 [ %v2_d18c, %dec_label_pc_d0d4 ], [ %v0_cf10, %dec_label_pc_cef8 ], [ 0, %dec_label_pc_d1f0 ]
  store i32 %v3_cef8, i32* @r4, align 4
  store i32 %v6_cef8, i32* @r5, align 4
  store i32 %v9_cef8, i32* @r6, align 4
  store i32 %v12_cef8, i32* @r7, align 4
  store i32 %v15_cef8, i32* @r8, align 4
  store i32 %v18_cef8, i32* @sb, align 4
  store i32 %v21_cef8, i32* @sl, align 4
  store i32 %v24_cef8, i32* @fp, align 4
  store i32 %v27_cef8, i32* @lr, align 4
  ret i32 %v1_cf48

dec_label_pc_cf4c:                                ; preds = %dec_label_pc_cef8
  %v2_cf4c = ptrtoint i32* %stack_var_-256 to i32
  store i32 %v2_cf4c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 2, i32* %stack_var_-80, align 4
  %v1_cf64 = call i32 @function_c964(i32 58811)
  store i32 -6725, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_cf7c = load i32, i32* @r5, align 4
  store i32 %v0_cf7c, i32* %r2.global-to-local, align 4
  %v3_cf84 = call i32 @function_11df4(i32 2, i32 1, i32 %v0_cf7c)
  %v7_cf88 = icmp eq i32 %v3_cf84, -1
  store i32 %v3_cf84, i32* @r4, align 4
  br i1 %v7_cf88, label %dec_label_pc_cfb0, label %dec_label_pc_cf94

dec_label_pc_cf94:                                ; preds = %dec_label_pc_cf4c
  %v2_cf98 = ptrtoint i32* %stack_var_-80 to i32
  store i32 %v2_cf98, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_cfa0 = call i32 @function_11ba4(i32 %v3_cf84, i32 %v2_cf98, i32 16)
  %v0_cfa4 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_cfac = call i32 @function_11c90(i32 %v0_cfa4, i32 1)
  br label %dec_label_pc_cfb0

dec_label_pc_cfb0:                                ; preds = %dec_label_pc_cf4c, %dec_label_pc_cf94
  %v1_cfb8 = call i32 @function_c964(i32 50951)
  store i32 -14585, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_cfd0 = load i32, i32* @r5, align 4
  store i32 %v0_cfd0, i32* %r2.global-to-local, align 4
  %v3_cfd8 = call i32 @function_11df4(i32 2, i32 1, i32 %v0_cfd0)
  %v7_cfdc = icmp eq i32 %v3_cfd8, -1
  store i32 %v3_cfd8, i32* %r4.global-to-local, align 4
  br i1 %v7_cfdc, label %dec_label_pc_d004, label %dec_label_pc_cfe8

dec_label_pc_cfe8:                                ; preds = %dec_label_pc_cfb0
  %v2_cfec = ptrtoint i32* %stack_var_-80 to i32
  store i32 %v2_cfec, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_cff4 = call i32 @function_11ba4(i32 %v3_cfd8, i32 %v2_cfec, i32 16)
  %v0_cff8 = load i32, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d000 = call i32 @function_11c90(i32 %v0_cff8, i32 1)
  br label %dec_label_pc_d004

dec_label_pc_d004:                                ; preds = %dec_label_pc_cfb0, %dec_label_pc_cfe8
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d00c = load i32, i32* @r5, align 4
  store i32 %v0_d00c, i32* %r2.global-to-local, align 4
  %v3_d010 = call i32 @function_11df4(i32 2, i32 1, i32 %v0_d00c)
  %v7_d014 = icmp eq i32 %v3_d010, -1
  store i32 %v3_d010, i32* @r4, align 4
  br i1 %v7_d014, label %dec_label_pc_d03c, label %dec_label_pc_d020

dec_label_pc_d020:                                ; preds = %dec_label_pc_d004
  %v2_d024 = ptrtoint i32* %stack_var_-80 to i32
  store i32 %v2_d024, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d02c = call i32 @function_11ba4(i32 %v3_d010, i32 %v2_d024, i32 16)
  %v0_d030 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d038 = call i32 @function_11c90(i32 %v0_d030, i32 1)
  br label %dec_label_pc_d03c

dec_label_pc_d03c:                                ; preds = %dec_label_pc_d004, %dec_label_pc_d020
  %v1_d040 = call i32 @function_c964(i32 5632)
  store i32 %v2_cf4c, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d054 = load i32, i32* @r5, align 4
  store i32 %v0_d054, i32* %r2.global-to-local, align 4
  %v3_d05c = call i32 @function_11df4(i32 2, i32 1, i32 %v0_d054)
  %v7_d060 = icmp eq i32 %v3_d05c, -1
  store i32 %v3_d05c, i32* @r4, align 4
  br i1 %v7_d060, label %dec_label_pc_d088, label %dec_label_pc_d06c

dec_label_pc_d06c:                                ; preds = %dec_label_pc_d03c
  %v2_d070 = ptrtoint i32* %stack_var_-80 to i32
  store i32 %v2_d070, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d078 = call i32 @function_11ba4(i32 %v3_d05c, i32 %v2_d070, i32 16)
  %v0_d07c = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d084 = call i32 @function_11c90(i32 %v0_d07c, i32 1)
  br label %dec_label_pc_d088

dec_label_pc_d088:                                ; preds = %dec_label_pc_d03c, %dec_label_pc_d06c
  %v1_d08c = call i32 @function_c964(i32 5888)
  store i32 %v2_cf4c, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d0a0 = load i32, i32* @r5, align 4
  store i32 %v0_d0a0, i32* %r2.global-to-local, align 4
  %v3_d0a8 = call i32 @function_11df4(i32 2, i32 1, i32 %v0_d0a0)
  %v7_d0ac = icmp eq i32 %v3_d0a8, -1
  store i32 %v3_d0a8, i32* @r4, align 4
  br i1 %v7_d0ac, label %dec_label_pc_d0d4, label %dec_label_pc_d0b8

dec_label_pc_d0b8:                                ; preds = %dec_label_pc_d088
  %v2_d0bc = ptrtoint i32* %stack_var_-80 to i32
  store i32 %v2_d0bc, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d0c4 = call i32 @function_11ba4(i32 %v3_d0a8, i32 %v2_d0bc, i32 16)
  %v0_d0c8 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d0d0 = call i32 @function_11c90(i32 %v0_d0c8, i32 1)
  br label %dec_label_pc_d0d4

dec_label_pc_d0d4:                                ; preds = %dec_label_pc_d088, %dec_label_pc_d0b8
  %v1_d0d8 = call i32 @function_13700(i32 5)
  store i32 4096, i32* @r0, align 4
  %v0_d0e0 = call i32 @function_1203c()
  store i32 ptrtoint (i32* @global_var_1f254.63 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_212dc.65 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_d0e0, i32* %r2.global-to-local, align 4
  %v0_d0f0 = load i32, i32* @r5, align 4
  %v1_d0f0 = trunc i32 %v0_d0f0 to i8
  %v3_d0f0 = inttoptr i32 %v0_d0e0 to i8*
  store i8 %v1_d0f0, i8* %v3_d0f0, align 1
  %v0_d0f8 = load i32, i32* @r5, align 4
  %v1_d0f8 = load i32, i32* %r3.global-to-local, align 4
  %v2_d0f8 = inttoptr i32 %v1_d0f8 to i32*
  store i32 %v0_d0f8, i32* %v2_d0f8, align 4
  %v0_d0fc = load i32, i32* %r2.global-to-local, align 4
  %v1_d0fc = load i32, i32* %r1.global-to-local, align 4
  %v2_d0fc = inttoptr i32 %v1_d0fc to i32*
  store i32 %v0_d0fc, i32* %v2_d0fc, align 4
  %v1_d100 = call i32 @function_104ec(i32 15)
  %v1_d108 = call i32 @function_104ec(i32 16)
  %v2_d110 = ptrtoint i32* %stack_var_-4264 to i32
  store i32 %v2_d110, i32* %r2.global-to-local, align 4
  %v0_d114 = load i32, i32* @r5, align 4
  store i32 %v0_d114, i32* %r1.global-to-local, align 4
  %v2_d120 = inttoptr i32 %v0_d114 to i32*
  %v3_d120 = call i32 @function_10428(i32 15, i32* %v2_d120)
  %v1_d128 = add i32 %v2_d110, -56
  store i32 %v1_d128, i32* %r3.global-to-local, align 4
  store i32 %v3_d120, i32* %r1.global-to-local, align 4
  store i32 %v1_d128, i32* @r0, align 4
  %v2_d138 = inttoptr i32 %v1_d128 to i8*
  %v3_d138 = call i32 @function_10b48(i8* %v2_d138, i32 %v3_d120)
  store i32 %v3_d138, i32* @r0, align 4
  %v2_d140 = add i32 %v3_d138, %v1_d128
  store i32 %v2_d140, i32* @r4, align 4
  %v0_d144 = call i32 @function_1124c()
  %v2_d14c = ptrtoint i32* %stack_var_-96 to i32
  store i32 %v2_d14c, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_d154 = trunc i32 %v0_d144 to i8
  %v4_d154 = call i32 @function_10f80(i8 %v3_d154, i32 10, i32 %v2_d14c)
  store i32 %v4_d154, i32* %r1.global-to-local, align 4
  %v0_d15c = load i32, i32* @r4, align 4
  store i32 %v0_d15c, i32* @r0, align 4
  %v2_d160 = inttoptr i32 %v0_d15c to i8*
  %v3_d160 = call i32 @function_10b48(i8* %v2_d160, i32 %v4_d154)
  %v0_d164 = load i32, i32* @r5, align 4
  store i32 %v0_d164, i32* %r1.global-to-local, align 4
  %v1_d168 = load i32, i32* @r4, align 4
  %v2_d168 = add i32 %v1_d168, %v3_d160
  store i32 %v2_d168, i32* @r4, align 4
  %v2_d170 = inttoptr i32 %v0_d164 to i32*
  %v3_d170 = call i32 @function_10428(i32 16, i32* %v2_d170)
  store i32 %v3_d170, i32* %r1.global-to-local, align 4
  %v0_d178 = load i32, i32* @r4, align 4
  store i32 %v0_d178, i32* @r0, align 4
  %v2_d17c = inttoptr i32 %v0_d178 to i8*
  %v3_d17c = call i32 @function_10b48(i8* %v2_d17c, i32 %v3_d170)
  %v0_d180 = load i32, i32* @r5, align 4
  store i32 %v0_d180, i32* %r1.global-to-local, align 4
  store i32 %v3_d17c, i32* @r6, align 4
  %v2_d18c = call i32 @function_111ec(i32 %v1_d128, i32 %v0_d180)
  %v7_d190 = icmp eq i32 %v2_d18c, -1
  br i1 %v7_d190, label %dec_label_pc_cf3c, label %dec_label_pc_d198

dec_label_pc_d198:                                ; preds = %dec_label_pc_d0d4
  %v1_d198 = call i32 @function_115e0(i32 %v2_d18c)
  %v1_d1a0 = call i32 @function_1044c(i32 15)
  %v1_d1a8 = call i32 @function_1044c(i32 16)
  store i32 ptrtoint (i32* @global_var_212dc.65 to i32), i32* %r3.global-to-local, align 4
  %v2_d1b4 = load i32, i32* @global_var_212dc.65, align 4
  store i32 %v2_d1b4, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v3_d1c0 = call i32 @function_11344(i32 %v1_d128, i32 %v2_d1b4, i32 4095)
  %v7_d1c4 = icmp eq i32 %v3_d1c0, -1
  br i1 %v7_d1c4, label %.thread9, label %bb254

bb254:                                            ; preds = %dec_label_pc_d198
  %v3_d1cc = load i32, i32* @global_var_212dc.65, align 4
  store i32 %v3_d1cc, i32* %r3.global-to-local, align 4
  %v1_d1d0 = load i32, i32* @r5, align 4
  %v2_d1d0 = trunc i32 %v1_d1d0 to i8
  %v5_d1d0 = add i32 %v3_d1cc, %v3_d1c0
  %v6_d1d0 = inttoptr i32 %v5_d1d0 to i8*
  store i8 %v2_d1d0, i8* %v6_d1d0, align 1
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_d198, %bb254
  store i32 %v1_d128, i32* @r0, align 4
  %v0_d1d8 = load i32, i32* @r6, align 4
  %v1_d1d8 = load i32, i32* @r4, align 4
  %v1_d128.neg = sub i32 56, %v2_d110
  %v2_d1d8 = add i32 %v1_d128.neg, %v0_d1d8
  %v2_d1dc = add i32 %v2_d1d8, %v1_d1d8
  store i32 %v2_d1dc, i32* @r1, align 4
  %v0_d1e0 = call i32 @function_10bb4()
  %v0_d1e4 = load i32, i32* @r7, align 4
  store i32 %v0_d1e4, i32* @r4, align 4
  %v0_d1e8 = load i32, i32* @r5, align 4
  store i32 400, i32* @r5, align 4
  %v2_d2f0 = ptrtoint i32* %stack_var_-160 to i32
  %v2_d2fc = bitcast i32* %stack_var_-160 to i8*
  %v2_d340 = ptrtoint i32* %stack_var_-224 to i32
  %v2_d344 = bitcast i32* %stack_var_-224 to i8*
  %v2_d4b0 = ptrtoint i32* %stack_var_-44 to i32
  %v2_d4c0 = ptrtoint i32* %stack_var_-48 to i32
  %v2_d4d4 = ptrtoint i32* %stack_var_-52 to i32
  %v2_d4e8 = ptrtoint i32* %stack_var_-56 to i32
  %v2_d4f8 = ptrtoint i32* %stack_var_-64 to i32
  %v2_d500 = ptrtoint i32* %stack_var_-60 to i32
  %v2_d524 = ptrtoint i32* %stack_var_-8416 to i32
  br label %dec_label_pc_d1f0

dec_label_pc_d1f0:                                ; preds = %dec_label_pc_d2b8, %.thread9
  %stack_var_-8436.0 = phi i32 [ %v0_d1e8, %.thread9 ], [ %stack_var_-8436.3, %dec_label_pc_d2b8 ]
  %v1_d1f4 = call i32 @function_104ec(i32 15)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d200 = call i32 @function_10428(i32 15, i32* null)
  %v1_d204 = call i32 @function_117dc(i32 %v3_d200)
  store i32 %v1_d204, i32* @r8, align 4
  %v2_d208 = icmp eq i32 %v1_d204, 0
  br i1 %v2_d208, label %dec_label_pc_cf3c, label %dec_label_pc_d210

dec_label_pc_d210:                                ; preds = %dec_label_pc_d1f0
  %v1_d214 = call i32 @function_1044c(i32 15)
  %v0_d218139 = load i32, i32* @r8, align 4
  %v1_d21c140 = inttoptr i32 %v0_d218139 to i32*
  %v2_d21c141 = call i32 @function_11920(i32* %v1_d21c140)
  %v2_d220143 = icmp eq i32 %v2_d21c141, 0
  br i1 %v2_d220143, label %dec_label_pc_d2b8, label %dec_label_pc_d228.preheader

dec_label_pc_d228.preheader:                      ; preds = %dec_label_pc_d210, %dec_label_pc_d218.backedge
  %v0_d228155 = phi i32 [ %v2_d21c, %dec_label_pc_d218.backedge ], [ %v2_d21c141, %dec_label_pc_d210 ]
  %stack_var_-8436.1144 = phi i32 [ %stack_var_-8436.1.be, %dec_label_pc_d218.backedge ], [ %stack_var_-8436.0, %dec_label_pc_d210 ]
  br label %dec_label_pc_d228

dec_label_pc_d228:                                ; preds = %dec_label_pc_d228.preheader, %dec_label_pc_d2a0
  %v0_d238 = phi i32 [ %v2_d2ac, %dec_label_pc_d2a0 ], [ %v0_d228155, %dec_label_pc_d228.preheader ]
  %stack_var_-8436.2 = phi i32 [ %v1_d24c, %dec_label_pc_d2a0 ], [ %stack_var_-8436.1144, %dec_label_pc_d228.preheader ]
  %v1_d228 = add i32 %v0_d238, 11
  %v2_d228 = inttoptr i32 %v1_d228 to i8*
  %v3_d228 = load i8, i8* %v2_d228, align 1
  %v4_d228 = zext i8 %v3_d228 to i32
  %v1_d22c = add nsw i32 %v4_d228, -48
  store i32 %v1_d22c, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_d22c, 9
  br i1 %tmp, label %dec_label_pc_d218.backedge, label %dec_label_pc_d238

dec_label_pc_d238:                                ; preds = %dec_label_pc_d228
  store i32 %v1_d228, i32* @r6, align 4
  store i32 %v1_d228, i32* @r0, align 4
  %v1_d240 = call i32 @function_1344c(i32 %v1_d228)
  %v0_d248 = load i32, i32* @r5, align 4
  %v1_d24c = add i32 %stack_var_-8436.2, 1
  store i32 %v1_d24c, i32* %r1.global-to-local, align 4
  store i32 %v1_d240, i32* @r7, align 4
  %v5_d258 = icmp slt i32 %v0_d248, %v1_d240
  %v2_d2c8 = call i32 @function_11260(i32* null)
  br i1 %v5_d258, label %dec_label_pc_d2c4, label %dec_label_pc_d25c

dec_label_pc_d25c:                                ; preds = %dec_label_pc_d238
  %v0_d264 = load i32, i32* @r4, align 4
  %v2_d264 = sub i32 %v2_d2c8, %v0_d264
  %v7_d26c = icmp slt i32 %v2_d264, 601
  br i1 %v7_d26c, label %dec_label_pc_d274, label %.thread10

.thread10:                                        ; preds = %dec_label_pc_d25c
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_d218.backedge

dec_label_pc_d274:                                ; preds = %dec_label_pc_d25c
  %v0_d274 = load i32, i32* @r7, align 4
  %v7_d278 = icmp slt i32 %v0_d274, 401
  br i1 %v7_d278, label %dec_label_pc_d218.backedge, label %dec_label_pc_d27c

dec_label_pc_d27c:                                ; preds = %dec_label_pc_d274
  %v3_d284 = zext i32 %v1_d24c to i64
  %v4_d284 = mul nuw i64 %v3_d284, 3435973837
  %v3_d2881 = udiv i64 %v4_d284, 34359738368
  %v3_d28c3 = mul nuw nsw i64 %v3_d2881, 8
  %v3_d28c = trunc i64 %v3_d28c3 to i32
  store i32 %v3_d28c, i32* %r3.global-to-local, align 4
  %v2_d2905 = mul nuw nsw i64 %v3_d2881, 2
  %v2_d290 = trunc i64 %v2_d2905 to i32
  %v2_d294 = add i32 %v3_d28c, %v2_d290
  store i32 %v2_d294, i32* %r2.global-to-local, align 4
  %v9_d298 = icmp eq i32 %v1_d24c, %v2_d294
  br i1 %v9_d298, label %dec_label_pc_d2a0, label %dec_label_pc_d218.backedge

dec_label_pc_d2a0:                                ; preds = %dec_label_pc_d27c
  %v1_d2a4 = call i32 @function_13700(i32 1)
  %v0_d2a8 = load i32, i32* @r8, align 4
  %v1_d2ac = inttoptr i32 %v0_d2a8 to i32*
  %v2_d2ac = call i32 @function_11920(i32* %v1_d2ac)
  %v2_d2b0 = icmp eq i32 %v2_d2ac, 0
  br i1 %v2_d2b0, label %dec_label_pc_d2b8, label %dec_label_pc_d228

dec_label_pc_d2b8:                                ; preds = %dec_label_pc_d218.backedge, %dec_label_pc_d2a0, %dec_label_pc_d210
  %stack_var_-8436.3 = phi i32 [ %stack_var_-8436.0, %dec_label_pc_d210 ], [ %v1_d24c, %dec_label_pc_d2a0 ], [ %stack_var_-8436.1.be, %dec_label_pc_d218.backedge ]
  %v0_d2b8 = load i32, i32* @r8, align 4
  %v1_d2bc = inttoptr i32 %v0_d2b8 to i32*
  %v2_d2bc = call i32 @function_11614(i32* %v1_d2bc)
  br label %dec_label_pc_d1f0

dec_label_pc_d2c4:                                ; preds = %dec_label_pc_d238
  %v1_d2d4 = call i32 @function_104ec(i32 15)
  %v1_d2dc = call i32 @function_104ec(i32 16)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d2e8 = call i32 @function_10428(i32 15, i32* null)
  store i32 %v2_d2f0, i32* @fp, align 4
  store i32 %v3_d2e8, i32* %r1.global-to-local, align 4
  store i32 %v2_d2f0, i32* @r0, align 4
  %v3_d2fc = call i32 @function_10b48(i8* %v2_d2fc, i32 %v3_d2e8)
  %v1_d300 = load i32, i32* @fp, align 4
  %v2_d300 = add i32 %v1_d300, %v3_d2fc
  store i32 %v2_d300, i32* %r5.global-to-local, align 4
  %v0_d304 = load i32, i32* @r6, align 4
  store i32 %v0_d304, i32* %r1.global-to-local, align 4
  store i32 %v2_d300, i32* @r0, align 4
  %v2_d30c = inttoptr i32 %v2_d300 to i8*
  %v3_d30c = call i32 @function_10b48(i8* %v2_d30c, i32 %v0_d304)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_d30c, i32* %r4.global-to-local, align 4
  %v3_d31c = call i32 @function_10428(i32 16, i32* null)
  store i32 %v3_d31c, i32* %r1.global-to-local, align 4
  %v1_d324 = load i32, i32* %r5.global-to-local, align 4
  %v2_d324 = add i32 %v1_d324, %v3_d30c
  store i32 %v2_d324, i32* @r0, align 4
  %v2_d328 = inttoptr i32 %v2_d324 to i8*
  %v3_d328 = call i32 @function_10b48(i8* %v2_d328, i32 %v3_d31c)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d334 = call i32 @function_10428(i32 15, i32* null)
  store i32 %v3_d334, i32* %r1.global-to-local, align 4
  store i32 %v2_d340, i32* @r0, align 4
  %v3_d344 = call i32 @function_10b48(i8* %v2_d344, i32 %v3_d334)
  %v2_d350 = add i32 %v3_d344, %v2_d340
  store i32 %v2_d350, i32* @r5, align 4
  store i32 %v2_d350, i32* @r0, align 4
  %v0_d358 = load i32, i32* @r6, align 4
  store i32 %v0_d358, i32* %r1.global-to-local, align 4
  %v2_d35c = inttoptr i32 %v2_d350 to i8*
  %v3_d35c = call i32 @function_10b48(i8* %v2_d35c, i32 %v0_d358)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_d35c, i32* @r4, align 4
  %v3_d36c = call i32 @function_10428(i32 34, i32* null)
  store i32 %v3_d36c, i32* %r1.global-to-local, align 4
  %v0_d374 = load i32, i32* @r4, align 4
  %v1_d374 = load i32, i32* @r5, align 4
  %v2_d374 = add i32 %v1_d374, %v0_d374
  store i32 %v2_d374, i32* @r0, align 4
  %v2_d378 = inttoptr i32 %v2_d374 to i8*
  %v3_d378 = call i32 @function_10b48(i8* %v2_d378, i32 %v3_d36c)
  %v1_d380 = call i32 @function_1044c(i32 15)
  %v1_d388 = call i32 @function_1044c(i32 16)
  store i32 %v1_d128, i32* %r1.global-to-local, align 4
  store i32 4095, i32* @r2, align 4
  %v3_d39c = call i32 @function_11344(i32 %v2_d2f0, i32 %v1_d128, i32 4095)
  %v7_d3a0 = icmp eq i32 %v3_d39c, -1
  store i32 %v3_d39c, i32* @r5, align 4
  br i1 %v7_d3a0, label %dec_label_pc_d464, label %dec_label_pc_d3ac

dec_label_pc_d3ac:                                ; preds = %dec_label_pc_d2c4
  store i32 %v1_d128, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_d3b4 = add i32 %v3_d39c, %v1_d128
  %v5_d3b4 = inttoptr i32 %v4_d3b4 to i8*
  store i8 0, i8* %v5_d3b4, align 1
  %v1_d3bc = call i32 @function_104ec(i32 35)
  %v0_d3c0 = load i32, i32* @r4, align 4
  store i32 %v0_d3c0, i32* %r1.global-to-local, align 4
  %v2_d3c8 = inttoptr i32 %v0_d3c0 to i32*
  %v3_d3c8 = call i32 @function_10428(i32 35, i32* %v2_d3c8)
  %v0_d3cc = load i32, i32* @r5, align 4
  %v1_d3cc = add i32 %v0_d3cc, -1
  store i32 %v1_d3cc, i32* @r1, align 4
  store i32 %v3_d3c8, i32* %r2.global-to-local, align 4
  %v4_d3d8 = call i32 @function_10e70(i8* %v2_d138, i32 %v1_d3cc, i32 %v3_d3c8)
  %v7_d3dc = icmp eq i32 %v4_d3d8, -1
  br i1 %v7_d3dc, label %dec_label_pc_d3f8, label %dec_label_pc_d3e4

dec_label_pc_d3e4:                                ; preds = %dec_label_pc_d3ac
  %v1_d3e8 = call i32 @function_111b8(i32 %v1_d128)
  %v0_d3ec = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d3f4 = call i32 @function_113ac(i32 %v0_d3ec, i32 9)
  br label %dec_label_pc_d3f8

dec_label_pc_d3f8:                                ; preds = %dec_label_pc_d3ac, %dec_label_pc_d3e4
  %v1_d3fc = call i32 @function_1044c(i32 35)
  store i32 %v1_d3fc, i32* @r0, align 4
  %v0_d400 = call i32 @function_1124c()
  store i32 %v0_d400, i32* @r0, align 4
  %v1_d404 = load i32, i32* @r7, align 4
  %v9_d404 = icmp eq i32 %v0_d400, %v1_d404
  br i1 %v9_d404, label %dec_label_pc_d430, label %dec_label_pc_d40c

dec_label_pc_d40c:                                ; preds = %dec_label_pc_d3f8
  %v0_d40c = call i32 @function_111a4()
  %v1_d410 = load i32, i32* @r7, align 4
  %v9_d410 = icmp eq i32 %v0_d40c, %v1_d410
  br i1 %v9_d410, label %dec_label_pc_d430, label %dec_label_pc_d418

dec_label_pc_d418:                                ; preds = %dec_label_pc_d40c
  store i32 ptrtoint (i32* @global_var_212dc.65 to i32), i32* %r3.global-to-local, align 4
  %v2_d420 = load i32, i32* @global_var_212dc.65, align 4
  store i32 %v2_d420, i32* %r1.global-to-local, align 4
  %v3_d424 = call i32 @function_10f00(i8* %v2_d138, i32 %v2_d420)
  %v2_d428 = icmp eq i32 %v3_d424, 0
  br i1 %v2_d428, label %dec_label_pc_d43c, label %dec_label_pc_d418.dec_label_pc_d430_crit_edge

dec_label_pc_d418.dec_label_pc_d430_crit_edge:    ; preds = %dec_label_pc_d418
  %v0_d434.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_d430

dec_label_pc_d430:                                ; preds = %dec_label_pc_d418.dec_label_pc_d430_crit_edge, %dec_label_pc_d40c, %dec_label_pc_d3f8
  %v0_d434 = phi i32 [ %v0_d434.pre, %dec_label_pc_d418.dec_label_pc_d430_crit_edge ], [ %v0_d40c, %dec_label_pc_d40c ], [ %v0_d400, %dec_label_pc_d3f8 ]
  store i32 %v2_d2c8, i32* @r4, align 4
  store i32 %v0_d434, i32* @r5, align 4
  br label %dec_label_pc_d218.backedge

dec_label_pc_d218.backedge:                       ; preds = %dec_label_pc_d27c, %dec_label_pc_d274, %dec_label_pc_d228, %dec_label_pc_d430, %dec_label_pc_d768, %.thread10
  %stack_var_-8436.1.be = phi i32 [ %v1_d24c, %dec_label_pc_d768 ], [ %v1_d24c, %dec_label_pc_d430 ], [ %v1_d24c, %.thread10 ], [ %stack_var_-8436.2, %dec_label_pc_d228 ], [ %v1_d24c, %dec_label_pc_d274 ], [ %v1_d24c, %dec_label_pc_d27c ]
  %v0_d218 = load i32, i32* @r8, align 4
  %v1_d21c = inttoptr i32 %v0_d218 to i32*
  %v2_d21c = call i32 @function_11920(i32* %v1_d21c)
  %v2_d220 = icmp eq i32 %v2_d21c, 0
  br i1 %v2_d220, label %dec_label_pc_d2b8, label %dec_label_pc_d228.preheader

dec_label_pc_d43c:                                ; preds = %dec_label_pc_d418
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d444 = call i32 @function_111ec(i32 %v1_d128, i32 0)
  %v7_d448 = icmp eq i32 %v2_d444, -1
  store i32 %v2_d444, i32* @r4, align 4
  br i1 %v7_d448, label %bb255, label %.thread12

bb255:                                            ; preds = %dec_label_pc_d43c
  store i32 9, i32* %r1.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %dec_label_pc_d43c, %bb255
  store i32 ptrtoint (i32* @global_var_d45c.68 to i32), i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_d448, i32 ptrtoint (i32* @global_var_113ac.67 to i32))
  %v0_d45c = load i32, i32* @r4, align 4
  %v1_d460 = call i32 @function_115e0(i32 %v0_d45c)
  br label %dec_label_pc_d464

dec_label_pc_d464:                                ; preds = %dec_label_pc_d2c4, %.thread12
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d46c = call i32 @function_111ec(i32 %v2_d2f0, i32 0)
  %v7_d470 = icmp eq i32 %v2_d46c, -1
  br i1 %v7_d470, label %dec_label_pc_d768, label %dec_label_pc_d47c

dec_label_pc_d47c:                                ; preds = %dec_label_pc_d464
  %v1_d480 = call i32 @function_104ec(i32 20)
  %v1_d488 = call i32 @function_104ec(i32 21)
  %v1_d490 = call i32 @function_104ec(i32 22)
  %v1_d498 = call i32 @function_104ec(i32 23)
  %v1_d4a0 = call i32 @function_104ec(i32 24)
  %v1_d4a8 = call i32 @function_104ec(i32 36)
  store i32 %v2_d4b0, i32* %r1.global-to-local, align 4
  %v3_d4b8 = call i32 @function_10428(i32 20, i32* nonnull %stack_var_-44)
  store i32 %v2_d4c0, i32* %r1.global-to-local, align 4
  store i32 %v3_d4b8, i32* @r6, align 4
  %v3_d4cc = call i32 @function_10428(i32 21, i32* nonnull %stack_var_-48)
  store i32 %v2_d4d4, i32* %r1.global-to-local, align 4
  store i32 %v3_d4cc, i32* @sl, align 4
  %v3_d4e0 = call i32 @function_10428(i32 22, i32* nonnull %stack_var_-52)
  store i32 %v2_d4e8, i32* %r1.global-to-local, align 4
  store i32 %v3_d4e0, i32* @sb, align 4
  %v3_d4f4 = call i32 @function_10428(i32 23, i32* nonnull %stack_var_-56)
  store i32 %v2_d500, i32* %r1.global-to-local, align 4
  %v3_d508 = call i32 @function_10428(i32 24, i32* nonnull %stack_var_-60)
  store i32 %v2_d4f8, i32* %r1.global-to-local, align 4
  %v3_d518 = call i32 @function_10428(i32 36, i32* nonnull %stack_var_-64)
  store i32 %v2_d524, i32* @r4, align 4
  store i32 %v2_d524, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v1_d534136 = call i32 @function_11378(i32 %v2_d46c)
  %tmp256 = icmp slt i32 %v1_d534136, 1
  br i1 %tmp256, label %dec_label_pc_d798, label %dec_label_pc_d540

dec_label_pc_d540:                                ; preds = %dec_label_pc_d47c, %dec_label_pc_d528.backedge
  %v0_d5e4127 = phi i32 [ %v1_d534, %dec_label_pc_d528.backedge ], [ %v1_d534136, %dec_label_pc_d47c ]
  %v3_d544 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d544, i32* @r5, align 4
  %v5_d54c = icmp slt i32 %v0_d5e4127, %v3_d544
  br i1 %v5_d54c, label %dec_label_pc_d55c, label %dec_label_pc_d624.lr.ph

dec_label_pc_d624.lr.ph:                          ; preds = %dec_label_pc_d540
  %v1_d61c83 = add i32 %v0_d5e4127, -1
  store i32 %v1_d61c83, i32* %r1.global-to-local, align 4
  %v0_d624.pre = load i32, i32* @r6, align 4
  %v1_d628.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d624

dec_label_pc_d55c:                                ; preds = %dec_label_pc_d61c.backedge, %dec_label_pc_d540
  store i32 %v2_cf4c, i32* %r1.global-to-local, align 4
  %v3_d560 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d560, i32* @r5, align 4
  %v5_d568 = icmp slt i32 %v0_d5e4127, %v3_d560
  br i1 %v5_d568, label %dec_label_pc_d578, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_d55c
  %v1_d65092 = add i32 %v0_d5e4127, -1
  store i32 %v1_d65092, i32* %r1.global-to-local, align 4
  %v2_d65093 = icmp eq i32 %v0_d5e4127, 0
  br i1 %v2_d65093, label %dec_label_pc_d578, label %dec_label_pc_d658.lr.ph

dec_label_pc_d658.lr.ph:                          ; preds = %.thread28
  %v0_d658.pre = load i32, i32* @sl, align 4
  %v1_d65c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d658

dec_label_pc_d578:                                ; preds = %dec_label_pc_d650.backedge, %.thread28, %dec_label_pc_d55c
  store i32 %v2_cf4c, i32* %r2.global-to-local, align 4
  %v3_d57c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_d57c, i32* @r5, align 4
  %v5_d584 = icmp slt i32 %v0_d5e4127, %v3_d57c
  br i1 %v5_d584, label %dec_label_pc_d594, label %.thread37

.thread37:                                        ; preds = %dec_label_pc_d578
  %v1_d684101 = add i32 %v0_d5e4127, -1
  store i32 %v1_d684101, i32* %r1.global-to-local, align 4
  %v2_d684102 = icmp eq i32 %v0_d5e4127, 0
  br i1 %v2_d684102, label %dec_label_pc_d594, label %dec_label_pc_d68c.lr.ph

dec_label_pc_d68c.lr.ph:                          ; preds = %.thread37
  %v0_d68c.pre = load i32, i32* @sb, align 4
  %v1_d690.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d68c

dec_label_pc_d594:                                ; preds = %dec_label_pc_d684.backedge, %.thread37, %dec_label_pc_d578
  store i32 %v2_cf4c, i32* %r3.global-to-local, align 4
  %v3_d598 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_d598, i32* @r5, align 4
  %v5_d5a0 = icmp slt i32 %v0_d5e4127, %v3_d598
  br i1 %v5_d5a0, label %dec_label_pc_d5b0, label %.thread46

.thread46:                                        ; preds = %dec_label_pc_d594
  %v1_d6b8110 = add i32 %v0_d5e4127, -1
  store i32 %v1_d6b8110, i32* %r1.global-to-local, align 4
  %v2_d6b8111 = icmp eq i32 %v0_d5e4127, 0
  br i1 %v2_d6b8111, label %dec_label_pc_d5b0, label %dec_label_pc_d6c0.lr.ph

dec_label_pc_d6c0.lr.ph:                          ; preds = %.thread46
  %v1_d6c8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d6c0

dec_label_pc_d5b0:                                ; preds = %dec_label_pc_d6b8.backedge, %.thread46, %dec_label_pc_d594
  %v3_d5b4 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_d5b4, i32* @r5, align 4
  %v5_d5bc = icmp slt i32 %v0_d5e4127, %v3_d5b4
  br i1 %v5_d5bc, label %dec_label_pc_d5cc, label %.thread55

.thread55:                                        ; preds = %dec_label_pc_d5b0
  %v1_d6f0119 = add i32 %v0_d5e4127, -1
  store i32 %v1_d6f0119, i32* %r1.global-to-local, align 4
  %v2_d6f0120 = icmp eq i32 %v0_d5e4127, 0
  br i1 %v2_d6f0120, label %dec_label_pc_d5cc, label %dec_label_pc_d6f8.lr.ph

dec_label_pc_d6f8.lr.ph:                          ; preds = %.thread55
  %v1_d700.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d6f8

dec_label_pc_d5cc:                                ; preds = %dec_label_pc_d6f0.backedge, %.thread55, %dec_label_pc_d5b0
  %v3_d5d0 = load i32, i32* %stack_var_-64, align 4
  store i32 %v3_d5d0, i32* @lr, align 4
  %v5_d5d8 = icmp slt i32 %v0_d5e4127, %v3_d5d0
  br i1 %v5_d5d8, label %dec_label_pc_d528.backedge, label %.thread61

dec_label_pc_d528.backedge:                       ; preds = %dec_label_pc_d604, %.thread61, %dec_label_pc_d5cc
  store i32 %v2_d524, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v1_d534 = call i32 @function_11378(i32 %v2_d46c)
  %tmp257 = icmp slt i32 %v1_d534, 1
  br i1 %tmp257, label %dec_label_pc_d798, label %dec_label_pc_d540

.thread61:                                        ; preds = %dec_label_pc_d5cc
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d5e4129 = icmp eq i32 %v0_d5e4127, 0
  br i1 %v2_d5e4129, label %dec_label_pc_d528.backedge, label %dec_label_pc_d5ec.lr.ph

dec_label_pc_d5ec.lr.ph:                          ; preds = %.thread61
  %v1_d5f4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d5ec

dec_label_pc_d5ec:                                ; preds = %dec_label_pc_d604, %dec_label_pc_d5ec.lr.ph
  %v0_d5e4.in = phi i32 [ %v0_d5e4127, %dec_label_pc_d5ec.lr.ph ], [ %v0_d5e4, %dec_label_pc_d604 ]
  %v0_d604 = phi i32 [ 0, %dec_label_pc_d5ec.lr.ph ], [ %v1_d604, %dec_label_pc_d604 ]
  %v1_d5f0 = phi i32 [ 0, %dec_label_pc_d5ec.lr.ph ], [ %v1_d5f0202, %dec_label_pc_d604 ]
  %v0_d5e4 = add i32 %v0_d5e4.in, -1
  store i32 %v3_d518, i32* %r3.global-to-local, align 4
  %v2_d5f0 = add i32 %v1_d5f0, %v3_d518
  %v3_d5f0 = inttoptr i32 %v2_d5f0 to i8*
  %v4_d5f0 = load i8, i8* %v3_d5f0, align 1
  %v6_d5f0 = zext i8 %v4_d5f0 to i32
  store i32 %v6_d5f0, i32* %r2.global-to-local, align 4
  %v2_d5f4 = add i32 %v0_d604, %v1_d5f4.pre
  %v3_d5f4 = inttoptr i32 %v2_d5f4 to i8*
  %v4_d5f4 = load i8, i8* %v3_d5f4, align 1
  %v6_d5f4 = zext i8 %v4_d5f4 to i32
  store i32 %v6_d5f4, i32* %r3.global-to-local, align 4
  %v9_d5f8 = icmp eq i8 %v4_d5f4, %v4_d5f0
  br i1 %v9_d5f8, label %dec_label_pc_d718, label %bb258

bb258:                                            ; preds = %dec_label_pc_d5ec
  br label %dec_label_pc_d604

dec_label_pc_d604:                                ; preds = %bb258, %dec_label_pc_d718
  %v1_d5f0202 = phi i32 [ %v1_d718, %dec_label_pc_d718 ], [ 0, %bb258 ]
  %v1_d604 = add i32 %v0_d604, 1
  store i32 %v1_d604, i32* %r1.global-to-local, align 4
  %v2_d5e4 = icmp eq i32 %v0_d5e4, 0
  br i1 %v2_d5e4, label %dec_label_pc_d528.backedge, label %dec_label_pc_d5ec

dec_label_pc_d60c:                                ; preds = %dec_label_pc_d624
  %v1_d60c = add i32 %v1_d624, 1
  store i32 %v1_d60c, i32* @lr, align 4
  %v9_d610 = icmp eq i32 %v3_d544, %v1_d60c
  br i1 %v9_d610, label %dec_label_pc_d724, label %dec_label_pc_d61c.backedge

dec_label_pc_d61c.backedge:                       ; preds = %dec_label_pc_d60c, %dec_label_pc_d638
  %v1_d624160 = phi i32 [ 0, %dec_label_pc_d638 ], [ %v1_d60c, %dec_label_pc_d60c ]
  %storemerge148 = add i32 %storemerge148.in, 1
  %v1_d61c = add i32 %v0_d61c, -1
  store i32 %v1_d61c, i32* %r1.global-to-local, align 4
  %v2_d61c = icmp eq i32 %v0_d61c, 0
  br i1 %v2_d61c, label %dec_label_pc_d55c, label %dec_label_pc_d624

dec_label_pc_d624:                                ; preds = %dec_label_pc_d61c.backedge, %dec_label_pc_d624.lr.ph
  %v0_d61c = phi i32 [ %v1_d61c83, %dec_label_pc_d624.lr.ph ], [ %v1_d61c, %dec_label_pc_d61c.backedge ]
  %storemerge148.in = phi i32 [ 0, %dec_label_pc_d624.lr.ph ], [ %storemerge148, %dec_label_pc_d61c.backedge ]
  %v1_d624 = phi i32 [ 0, %dec_label_pc_d624.lr.ph ], [ %v1_d624160, %dec_label_pc_d61c.backedge ]
  %v2_d624 = add i32 %v1_d624, %v0_d624.pre
  %v3_d624 = inttoptr i32 %v2_d624 to i8*
  %v4_d624 = load i8, i8* %v3_d624, align 1
  %v6_d624 = zext i8 %v4_d624 to i32
  store i32 %v6_d624, i32* %r2.global-to-local, align 4
  %v2_d628 = add i32 %storemerge148.in, %v1_d628.pre
  %v3_d628 = inttoptr i32 %v2_d628 to i8*
  %v4_d628 = load i8, i8* %v3_d628, align 1
  %v6_d628 = zext i8 %v4_d628 to i32
  store i32 %v6_d628, i32* %r3.global-to-local, align 4
  %v9_d62c = icmp eq i8 %v4_d628, %v4_d624
  br i1 %v9_d62c, label %dec_label_pc_d60c, label %dec_label_pc_d638

dec_label_pc_d638:                                ; preds = %dec_label_pc_d624
  br label %dec_label_pc_d61c.backedge

dec_label_pc_d640:                                ; preds = %dec_label_pc_d658
  %v1_d640 = add i32 %v1_d658, 1
  store i32 %v1_d640, i32* @lr, align 4
  %v9_d644 = icmp eq i32 %v3_d560, %v1_d640
  br i1 %v9_d644, label %dec_label_pc_d724, label %dec_label_pc_d650.backedge

dec_label_pc_d650.backedge:                       ; preds = %dec_label_pc_d640, %dec_label_pc_d66c
  %v1_d658169 = phi i32 [ 0, %dec_label_pc_d66c ], [ %v1_d640, %dec_label_pc_d640 ]
  %storemerge147 = add i32 %storemerge147.in, 1
  %v1_d650 = add i32 %v0_d650, -1
  store i32 %v1_d650, i32* %r1.global-to-local, align 4
  %v2_d650 = icmp eq i32 %v0_d650, 0
  br i1 %v2_d650, label %dec_label_pc_d578, label %dec_label_pc_d658

dec_label_pc_d658:                                ; preds = %dec_label_pc_d650.backedge, %dec_label_pc_d658.lr.ph
  %v0_d650 = phi i32 [ %v1_d65092, %dec_label_pc_d658.lr.ph ], [ %v1_d650, %dec_label_pc_d650.backedge ]
  %storemerge147.in = phi i32 [ 0, %dec_label_pc_d658.lr.ph ], [ %storemerge147, %dec_label_pc_d650.backedge ]
  %v1_d658 = phi i32 [ 0, %dec_label_pc_d658.lr.ph ], [ %v1_d658169, %dec_label_pc_d650.backedge ]
  %v2_d658 = add i32 %v1_d658, %v0_d658.pre
  %v3_d658 = inttoptr i32 %v2_d658 to i8*
  %v4_d658 = load i8, i8* %v3_d658, align 1
  %v6_d658 = zext i8 %v4_d658 to i32
  store i32 %v6_d658, i32* %r2.global-to-local, align 4
  %v2_d65c = add i32 %storemerge147.in, %v1_d65c.pre
  %v3_d65c = inttoptr i32 %v2_d65c to i8*
  %v4_d65c = load i8, i8* %v3_d65c, align 1
  %v6_d65c = zext i8 %v4_d65c to i32
  store i32 %v6_d65c, i32* %r3.global-to-local, align 4
  %v9_d660 = icmp eq i8 %v4_d65c, %v4_d658
  br i1 %v9_d660, label %dec_label_pc_d640, label %dec_label_pc_d66c

dec_label_pc_d66c:                                ; preds = %dec_label_pc_d658
  br label %dec_label_pc_d650.backedge

dec_label_pc_d674:                                ; preds = %dec_label_pc_d68c
  %v1_d674 = add i32 %v1_d68c, 1
  store i32 %v1_d674, i32* @lr, align 4
  %v9_d678 = icmp eq i32 %v3_d57c, %v1_d674
  br i1 %v9_d678, label %dec_label_pc_d724, label %dec_label_pc_d684.backedge

dec_label_pc_d684.backedge:                       ; preds = %dec_label_pc_d674, %dec_label_pc_d6a0
  %v1_d68c178 = phi i32 [ 0, %dec_label_pc_d6a0 ], [ %v1_d674, %dec_label_pc_d674 ]
  %storemerge146 = add i32 %storemerge146.in, 1
  %v1_d684 = add i32 %v0_d684, -1
  store i32 %v1_d684, i32* %r1.global-to-local, align 4
  %v2_d684 = icmp eq i32 %v0_d684, 0
  br i1 %v2_d684, label %dec_label_pc_d594, label %dec_label_pc_d68c

dec_label_pc_d68c:                                ; preds = %dec_label_pc_d684.backedge, %dec_label_pc_d68c.lr.ph
  %v0_d684 = phi i32 [ %v1_d684101, %dec_label_pc_d68c.lr.ph ], [ %v1_d684, %dec_label_pc_d684.backedge ]
  %storemerge146.in = phi i32 [ 0, %dec_label_pc_d68c.lr.ph ], [ %storemerge146, %dec_label_pc_d684.backedge ]
  %v1_d68c = phi i32 [ 0, %dec_label_pc_d68c.lr.ph ], [ %v1_d68c178, %dec_label_pc_d684.backedge ]
  %v2_d68c = add i32 %v1_d68c, %v0_d68c.pre
  %v3_d68c = inttoptr i32 %v2_d68c to i8*
  %v4_d68c = load i8, i8* %v3_d68c, align 1
  %v6_d68c = zext i8 %v4_d68c to i32
  store i32 %v6_d68c, i32* %r2.global-to-local, align 4
  %v2_d690 = add i32 %storemerge146.in, %v1_d690.pre
  %v3_d690 = inttoptr i32 %v2_d690 to i8*
  %v4_d690 = load i8, i8* %v3_d690, align 1
  %v6_d690 = zext i8 %v4_d690 to i32
  store i32 %v6_d690, i32* %r3.global-to-local, align 4
  %v9_d694 = icmp eq i8 %v4_d690, %v4_d68c
  br i1 %v9_d694, label %dec_label_pc_d674, label %dec_label_pc_d6a0

dec_label_pc_d6a0:                                ; preds = %dec_label_pc_d68c
  br label %dec_label_pc_d684.backedge

dec_label_pc_d6a8:                                ; preds = %dec_label_pc_d6c0
  %v1_d6a8 = add i32 %v1_d6c4, 1
  store i32 %v1_d6a8, i32* @lr, align 4
  %v9_d6ac = icmp eq i32 %v3_d598, %v1_d6a8
  br i1 %v9_d6ac, label %dec_label_pc_d724, label %dec_label_pc_d6b8.backedge

dec_label_pc_d6b8.backedge:                       ; preds = %dec_label_pc_d6a8, %dec_label_pc_d6d8
  %v1_d6c4186 = phi i32 [ 0, %dec_label_pc_d6d8 ], [ %v1_d6a8, %dec_label_pc_d6a8 ]
  %storemerge145 = add i32 %storemerge145.in, 1
  %v1_d6b8 = add i32 %v0_d6b8, -1
  store i32 %v1_d6b8, i32* %r1.global-to-local, align 4
  %v2_d6b8 = icmp eq i32 %v0_d6b8, 0
  br i1 %v2_d6b8, label %dec_label_pc_d5b0, label %dec_label_pc_d6c0

dec_label_pc_d6c0:                                ; preds = %dec_label_pc_d6b8.backedge, %dec_label_pc_d6c0.lr.ph
  %v0_d6b8 = phi i32 [ %v1_d6b8110, %dec_label_pc_d6c0.lr.ph ], [ %v1_d6b8, %dec_label_pc_d6b8.backedge ]
  %storemerge145.in = phi i32 [ 0, %dec_label_pc_d6c0.lr.ph ], [ %storemerge145, %dec_label_pc_d6b8.backedge ]
  %v1_d6c4 = phi i32 [ 0, %dec_label_pc_d6c0.lr.ph ], [ %v1_d6c4186, %dec_label_pc_d6b8.backedge ]
  store i32 %v3_d4f4, i32* %r3.global-to-local, align 4
  %v2_d6c4 = add i32 %v1_d6c4, %v3_d4f4
  %v3_d6c4 = inttoptr i32 %v2_d6c4 to i8*
  %v4_d6c4 = load i8, i8* %v3_d6c4, align 1
  %v6_d6c4 = zext i8 %v4_d6c4 to i32
  store i32 %v6_d6c4, i32* %r2.global-to-local, align 4
  %v2_d6c8 = add i32 %storemerge145.in, %v1_d6c8.pre
  %v3_d6c8 = inttoptr i32 %v2_d6c8 to i8*
  %v4_d6c8 = load i8, i8* %v3_d6c8, align 1
  %v6_d6c8 = zext i8 %v4_d6c8 to i32
  store i32 %v6_d6c8, i32* %r3.global-to-local, align 4
  %v9_d6cc = icmp eq i8 %v4_d6c8, %v4_d6c4
  br i1 %v9_d6cc, label %dec_label_pc_d6a8, label %dec_label_pc_d6d8

dec_label_pc_d6d8:                                ; preds = %dec_label_pc_d6c0
  br label %dec_label_pc_d6b8.backedge

dec_label_pc_d6e0:                                ; preds = %dec_label_pc_d6f8
  %v1_d6e0 = add i32 %v1_d6fc, 1
  store i32 %v1_d6e0, i32* @lr, align 4
  %v9_d6e4 = icmp eq i32 %v3_d5b4, %v1_d6e0
  br i1 %v9_d6e4, label %dec_label_pc_d724, label %dec_label_pc_d6f0.backedge

dec_label_pc_d6f0.backedge:                       ; preds = %dec_label_pc_d6e0, %dec_label_pc_d710
  %v1_d6fc194 = phi i32 [ 0, %dec_label_pc_d710 ], [ %v1_d6e0, %dec_label_pc_d6e0 ]
  %storemerge = add i32 %storemerge.in, 1
  %v1_d6f0 = add i32 %v0_d6f0, -1
  store i32 %v1_d6f0, i32* %r1.global-to-local, align 4
  %v2_d6f0 = icmp eq i32 %v0_d6f0, 0
  br i1 %v2_d6f0, label %dec_label_pc_d5cc, label %dec_label_pc_d6f8

dec_label_pc_d6f8:                                ; preds = %dec_label_pc_d6f0.backedge, %dec_label_pc_d6f8.lr.ph
  %v0_d6f0 = phi i32 [ %v1_d6f0119, %dec_label_pc_d6f8.lr.ph ], [ %v1_d6f0, %dec_label_pc_d6f0.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_d6f8.lr.ph ], [ %storemerge, %dec_label_pc_d6f0.backedge ]
  %v1_d6fc = phi i32 [ 0, %dec_label_pc_d6f8.lr.ph ], [ %v1_d6fc194, %dec_label_pc_d6f0.backedge ]
  store i32 %v3_d508, i32* %r3.global-to-local, align 4
  %v2_d6fc = add i32 %v1_d6fc, %v3_d508
  %v3_d6fc = inttoptr i32 %v2_d6fc to i8*
  %v4_d6fc = load i8, i8* %v3_d6fc, align 1
  %v6_d6fc = zext i8 %v4_d6fc to i32
  store i32 %v6_d6fc, i32* %r2.global-to-local, align 4
  %v2_d700 = add i32 %storemerge.in, %v1_d700.pre
  %v3_d700 = inttoptr i32 %v2_d700 to i8*
  %v4_d700 = load i8, i8* %v3_d700, align 1
  %v6_d700 = zext i8 %v4_d700 to i32
  store i32 %v6_d700, i32* %r3.global-to-local, align 4
  %v9_d704 = icmp eq i8 %v4_d700, %v4_d6fc
  br i1 %v9_d704, label %dec_label_pc_d6e0, label %dec_label_pc_d710

dec_label_pc_d710:                                ; preds = %dec_label_pc_d6f8
  br label %dec_label_pc_d6f0.backedge

dec_label_pc_d718:                                ; preds = %dec_label_pc_d5ec
  %v1_d718 = add i32 %v1_d5f0, 1
  %v9_d71c = icmp eq i32 %v3_d5d0, %v1_d718
  br i1 %v9_d71c, label %dec_label_pc_d724, label %dec_label_pc_d604

dec_label_pc_d724:                                ; preds = %dec_label_pc_d60c, %dec_label_pc_d640, %dec_label_pc_d674, %dec_label_pc_d6a8, %dec_label_pc_d6e0, %dec_label_pc_d718
  %v1_d728 = call i32 @function_1044c(i32 20)
  %v1_d730 = call i32 @function_1044c(i32 21)
  %v1_d738 = call i32 @function_1044c(i32 22)
  %v1_d740 = call i32 @function_1044c(i32 23)
  %v1_d748 = call i32 @function_1044c(i32 24)
  %v1_d750 = call i32 @function_1044c(i32 36)
  %v1_d758 = call i32 @function_115e0(i32 %v2_d46c)
  %v0_d75c = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d764 = call i32 @function_113ac(i32 %v0_d75c, i32 9)
  br label %dec_label_pc_d768

dec_label_pc_d768:                                ; preds = %dec_label_pc_d464, %dec_label_pc_d798, %dec_label_pc_d724
  store i32 %v2_d2f0, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d770 = call i32 @function_10bb4()
  store i32 %v2_d340, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d780 = call i32 @function_10bb4()
  %v1_d788 = call i32 @function_13700(i32 1)
  store i32 %v2_d2c8, i32* @r4, align 4
  %v0_d790 = load i32, i32* @r7, align 4
  store i32 %v0_d790, i32* @r5, align 4
  br label %dec_label_pc_d218.backedge

dec_label_pc_d798:                                ; preds = %dec_label_pc_d528.backedge, %dec_label_pc_d47c
  %v1_d79c = call i32 @function_1044c(i32 20)
  %v1_d7a4 = call i32 @function_1044c(i32 21)
  %v1_d7ac = call i32 @function_1044c(i32 22)
  %v1_d7b4 = call i32 @function_1044c(i32 23)
  %v1_d7bc = call i32 @function_1044c(i32 24)
  %v1_d7c4 = call i32 @function_1044c(i32 36)
  %v1_d7cc = call i32 @function_115e0(i32 %v2_d46c)
  br label %dec_label_pc_d768

; uselistorder directives
  uselistorder i32 %v1_d718, { 1, 0 }
  uselistorder i32 %v1_d604, { 1, 0 }
  uselistorder i32 %v1_d5f0, { 1, 0 }
  uselistorder i32 %v0_d604, { 1, 0 }
  uselistorder i32 %v1_d534, { 1, 0 }
  uselistorder i32 %v2_d46c, { 3, 2, 4, 1, 0 }
  uselistorder i1 %v7_d448, { 1, 0 }
  uselistorder i32 %v2_d444, { 1, 0 }
  uselistorder i32 %v2_d21c, { 1, 0 }
  uselistorder i32 %stack_var_-8436.1.be, { 1, 0 }
  uselistorder i32 %v3_d39c, { 1, 2, 0 }
  uselistorder i32 %v2_d2ac, { 1, 0 }
  uselistorder i32 %v1_d24c, { 0, 1, 5, 4, 3, 2, 6, 8, 9, 7 }
  uselistorder i32 %v1_d228, { 2, 1, 0, 3 }
  uselistorder i32 %stack_var_-8436.0, { 1, 0 }
  uselistorder i32 %v2_d524, { 1, 0, 2 }
  uselistorder i32 %v2_d340, { 1, 0, 2 }
  uselistorder i32 %v3_d1c0, { 1, 0 }
  uselistorder i32 %v2_d18c, { 2, 0, 1 }
  uselistorder i32 %v1_d128, { 3, 2, 0, 4, 6, 5, 7, 8, 9, 1, 10, 11, 12 }
  uselistorder i32 %v3_d0a8, { 1, 2, 0 }
  uselistorder i32 %v3_d05c, { 1, 2, 0 }
  uselistorder i32 %v3_d010, { 2, 1, 0 }
  uselistorder i32 %v3_cfd8, { 1, 2, 0 }
  uselistorder i32 %v3_cf84, { 2, 1, 0 }
  uselistorder i32 %storemerge212, { 1, 0 }
  uselistorder i32 %v0_cf10, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-80, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %stack_var_-64, { 1, 0, 2 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %stack_var_-56, { 1, 0, 2 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 8, 7, 0, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i32* %r1.global-to-local, { 7, 8, 9, 10, 11, 13, 12, 0, 15, 5, 4, 3, 2, 14, 1, 6, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66 }
  uselistorder i32 (i32*)* @function_11920, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_117dc, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_11344, { 3, 2, 1, 0 }
  uselistorder i32 4095, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_212dc.65, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_212e0.58, { 0, 2, 1 }
  uselistorder label %dec_label_pc_d768, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d724, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_d6f0.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d6b8.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d684.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d650.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d61c.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d604, { 1, 0 }
  uselistorder label %dec_label_pc_d540, { 1, 0 }
  uselistorder label %dec_label_pc_d464, { 1, 0 }
  uselistorder label %.thread12, { 1, 0 }
  uselistorder label %dec_label_pc_d218.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_d3f8, { 1, 0 }
  uselistorder label %dec_label_pc_d228, { 1, 0 }
  uselistorder label %dec_label_pc_d228.preheader, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %dec_label_pc_d0d4, { 1, 0 }
  uselistorder label %dec_label_pc_d088, { 1, 0 }
  uselistorder label %dec_label_pc_d03c, { 1, 0 }
  uselistorder label %dec_label_pc_d004, { 1, 0 }
  uselistorder label %dec_label_pc_cfb0, { 1, 0 }
}

define i32 @function_d7e4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_d7e4:
  store i32 ptrtoint (i32* @global_var_d95c.70 to i32), i32* inttoptr (i32 127116 to i32*), align 4
  ret i32 %arg1
}

define i32 @function_d7fc(i32 %arg1) local_unnamed_addr {
dec_label_pc_d7fc:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v9_d7fc = load i32, i32* @r6, align 4
  %v12_d7fc = load i32, i32* @r7, align 4
  %v15_d7fc = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_d818 = call i32 @function_11df4(i32 2, i32 1, i32 0)
  store i32 %v3_d818, i32* %r0.global-to-local, align 4
  store i32 127108, i32* @r6, align 4
  %v7_d820 = icmp eq i32 %v3_d818, -1
  store i32 %v3_d818, i32* inttoptr (i32 127108 to i32*), align 4
  br i1 %v7_d820, label %dec_label_pc_d7fc.dec_label_pc_d8d8_crit_edge, label %dec_label_pc_d82c

dec_label_pc_d7fc.dec_label_pc_d8d8_crit_edge:    ; preds = %dec_label_pc_d7fc
  %v1_d8e0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d8d8

dec_label_pc_d82c:                                ; preds = %dec_label_pc_d7fc
  %v2_d82c = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_d82c, i32* @r3, align 4
  %v0_d830 = load i32, i32* @r4, align 4
  store i32 4, i32* %r5.global-to-local, align 4
  %v0_d840 = load i32, i32* %r0.global-to-local, align 4
  %v5_d840 = call i32 @function_11db0(i32 %v0_d840, i32 %v0_d830, i32 2, i32 %v2_d82c, i32 4)
  store i32 %v5_d840, i32* %r0.global-to-local, align 4
  %v0_d844 = load i32, i32* @r6, align 4
  %v1_d844 = inttoptr i32 %v0_d844 to i32*
  %v2_d844 = load i32, i32* %v1_d844, align 4
  store i32 %v2_d844, i32* %r4.global-to-local, align 4
  store i32 %v2_d844, i32* %r0.global-to-local, align 4
  %v2_d854 = call i32 @function_11414(i32 %v2_d844, i32 3)
  %v0_d858 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v2_d844, i32* %r0.global-to-local, align 4
  %v2_d864 = call i32 @function_11414(i32 %v2_d844, i32 %v0_d858)
  store i32 %v2_d864, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @1 to i32), i32* @r8, align 4
  %v0_d894 = call i32 @function_11a08()
  store i32 %v0_d894, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v2_d89c = inttoptr i32 %v0_d894 to i32*
  store i32 0, i32* %v2_d89c, align 4
  %v2_d8a0 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_d8a0, i32* @r5, align 4
  store i32 %v0_d894, i32* %r4.global-to-local, align 4
  %v0_d8b0 = load i32, i32* @r6, align 4
  %v1_d8b0 = inttoptr i32 %v0_d8b0 to i32*
  %v2_d8b0 = load i32, i32* %v1_d8b0, align 4
  store i32 %v2_d8b0, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_d8bc = call i32 @function_11ba4(i32 %v2_d8b0, i32 %v2_d8a0, i32 16)
  store i32 %v3_d8bc, i32* %r0.global-to-local, align 4
  %v7_d8c0 = icmp eq i32 %v3_d8bc, -1
  br i1 %v7_d8c0, label %dec_label_pc_d8e4, label %dec_label_pc_d8c8

dec_label_pc_d8c8:                                ; preds = %dec_label_pc_d82c
  %v2_d8d0 = load i32, i32* inttoptr (i32 127108 to i32*), align 4
  store i32 %v2_d8d0, i32* %r0.global-to-local, align 4
  %v2_d8d4 = call i32 @function_11c90(i32 %v2_d8d0, i32 1)
  store i32 %v2_d8d4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d8d8

dec_label_pc_d8d8:                                ; preds = %dec_label_pc_d7fc.dec_label_pc_d8d8_crit_edge, %dec_label_pc_d8f0, %dec_label_pc_d8c8
  %v1_d8e0 = phi i32 [ %v1_d8e0.pre, %dec_label_pc_d7fc.dec_label_pc_d8d8_crit_edge ], [ %v1_d934, %dec_label_pc_d8f0 ], [ %v2_d8d4, %dec_label_pc_d8c8 ]
  store i32 %v9_d7fc, i32* @r6, align 4
  store i32 %v12_d7fc, i32* @r7, align 4
  store i32 %v15_d7fc, i32* @r8, align 4
  ret i32 %v1_d8e0

dec_label_pc_d8e4:                                ; preds = %dec_label_pc_d82c
  %v0_d8e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_d8e4 = inttoptr i32 %v0_d8e4 to i32*
  %v2_d8e4 = load i32, i32* %v1_d8e4, align 4
  %v7_d8e8 = icmp eq i32 %v2_d8e4, 99
  br i1 %v7_d8e8, label %dec_label_pc_d93c, label %dec_label_pc_d8f0

dec_label_pc_d8f0:                                ; preds = %dec_label_pc_d93c, %bb, %dec_label_pc_d8e4
  store i32 15290, i32* @r4, align 4
  %v0_d908 = load i32, i32* @r6, align 4
  %v1_d908 = inttoptr i32 %v0_d908 to i32*
  %v2_d908 = load i32, i32* %v1_d908, align 4
  store i32 %v2_d908, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_d918 = call i32 @function_11bdc(i32 %v2_d908, i32 %v2_d8a0, i32 16)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_d920 = call i32 @function_13700(i32 5)
  store i32 %v1_d920, i32* %r0.global-to-local, align 4
  %v0_d924 = load i32, i32* @r6, align 4
  %v1_d924 = inttoptr i32 %v0_d924 to i32*
  %v2_d924 = load i32, i32* %v1_d924, align 4
  store i32 %v2_d924, i32* %r0.global-to-local, align 4
  %v1_d928 = call i32 @function_115e0(i32 %v2_d924)
  %v0_d92c = load i32, i32* @r4, align 4
  store i32 %v0_d92c, i32* %r0.global-to-local, align 4
  %v1_d930 = call i32 @function_c964(i32 %v0_d92c)
  store i32 %v1_d930, i32* %r0.global-to-local, align 4
  %v1_d934 = call i32 @function_d7fc(i32 %v1_d930)
  store i32 %v1_d934, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d8d8

dec_label_pc_d93c:                                ; preds = %dec_label_pc_d8e4
  %v0_d93c = load i32, i32* @r8, align 4
  %v1_d93c = inttoptr i32 %v0_d93c to i8*
  %v2_d93c = load i8, i8* %v1_d93c, align 1
  %v3_d93c = zext i8 %v2_d93c to i32
  %v1_d940 = load i32, i32* @r7, align 4
  %v9_d940 = icmp eq i32 %v3_d93c, %v1_d940
  br i1 %v9_d940, label %dec_label_pc_d8f0, label %bb

bb:                                               ; preds = %dec_label_pc_d93c
  %v2_d948 = trunc i32 %v1_d940 to i8
  store i8 %v2_d948, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), align 1
  br label %dec_label_pc_d8f0

; uselistorder directives
  uselistorder i32 %v1_d934, { 1, 0 }
  uselistorder i32 %v2_d8a0, { 1, 0, 2 }
  uselistorder i32 %v2_d844, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v3_d818, { 1, 0, 2 }
  uselistorder i32* %stack_var_-28, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 3, 2, 4, 6, 5, 8, 7, 10, 9, 11, 13, 12, 14, 15, 17, 18, 19, 16 }
  uselistorder i32 (i32)* @function_c964, { 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_11c90, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_11ba4, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder [4 x i8]* @1, { 1, 0 }
  uselistorder label %dec_label_pc_d8f0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d8d8, { 1, 2, 0 }
}

define i32 @function_d950(i32 %arg1, i32 %arg2, i64* %arg3) local_unnamed_addr {
dec_label_pc_d950:
  %v0_d950 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d950, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_d950
  %v2_d950 = load i32, i32* @r4, align 4
  %v4_d950 = mul i32 %v2_d950, 2
  %v5_d950 = and i32 %v4_d950, %arg2
  call void @__pseudo_branch(i32 %v5_d950)
  %v0_d954.pr = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d954.pr, label %bb2, label %.thread1

bb2:                                              ; preds = %bb
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_d950, %bb, %bb2
  ret i32 %arg1

; uselistorder directives
  uselistorder label %.thread1, { 2, 1, 0 }
}

define i32 @function_d95c(i32 %arg1) local_unnamed_addr {
dec_label_pc_d95c:
  %v1_d964 = call i32 @function_104ec(i32 2)
  %v3_d970 = call i32 @function_10428(i32 2, i32* null)
  %v1_d974 = call i32 @function_e534(i32 %v3_d970)
  store i32 %v1_d974, i32* @r6, align 4
  %v1_d980 = call i32 @function_1044c(i32 2)
  %v0_d984 = load i32, i32* @r6, align 4
  %v2_d984 = icmp eq i32 %v0_d984, 0
  br i1 %v2_d984, label %dec_label_pc_d9d4, label %dec_label_pc_d98c

dec_label_pc_d98c:                                ; preds = %dec_label_pc_d95c
  %v1_d98c = add i32 %v0_d984, 4
  %v2_d98c = inttoptr i32 %v1_d98c to i32*
  %v3_d98c = load i32, i32* %v2_d98c, align 4
  store i32 %v3_d98c, i32* @r4, align 4
  %v0_d990 = call i32 @function_e29c()
  %v0_d994 = load i32, i32* @r6, align 4
  %v1_d994 = inttoptr i32 %v0_d994 to i8*
  %v2_d994 = load i8, i8* %v1_d994, align 1
  %v3_d994 = zext i8 %v2_d994 to i32
  %v2_d998 = call i32 @function_11178(i32 %v0_d990, i32 %v3_d994)
  store i32 ptrtoint (i16** @global_var_212e4.76 to i32), i32* @r5, align 4
  %v0_d9a0 = load i32, i32* @r4, align 4
  %v4_d9a0 = mul nuw nsw i32 %v3_d994, 4
  %v5_d9a0 = add i32 %v0_d9a0, %v4_d9a0
  %v6_d9a0 = inttoptr i32 %v5_d9a0 to i32*
  %v7_d9a0 = load i32, i32* %v6_d9a0, align 4
  %v0_d9a4 = load i32, i32* @r6, align 4
  store i32 %v7_d9a0, i32* @global_var_212e8.77, align 4
  %v1_d9ac = call i32 @function_e50c(i32 %v0_d9a4)
  %v1_d9b4 = call i32 @function_104ec(i32 1)
  %v3_d9c0 = call i32 @function_10428(i32 1, i32* null)
  %v4_d9c0 = inttoptr i32 %v3_d9c0 to i16*
  %v3_d9c4 = load i16, i16* %v4_d9c0, align 2
  store i16 %v3_d9c4, i16* bitcast (i32* @global_var_212e6.78 to i16*), align 4
  %v1_d9d0 = call i32 @function_1044c(i32 1)
  br label %dec_label_pc_d9d4

dec_label_pc_d9d4:                                ; preds = %dec_label_pc_d95c, %dec_label_pc_d98c
  %v1_d9d8 = phi i32 [ %v1_d980, %dec_label_pc_d95c ], [ %v1_d9d0, %dec_label_pc_d98c ]
  ret i32 %v1_d9d8

; uselistorder directives
  uselistorder label %dec_label_pc_d9d4, { 1, 0 }
}

define i32 @function_d9e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_d9e0:
  %stack_var_-20 = alloca i32, align 4
  %v3_d9e0 = load i32, i32* @r4, align 4
  %v6_d9e0 = load i32, i32* @r5, align 4
  %v0_d9e8 = call i32 @function_112d0()
  %v7_d9ec = icmp eq i32 %v0_d9e8, -1
  %. = zext i1 %v7_d9ec to i32
  %tmp11 = icmp slt i32 %v0_d9e8, 1
  %storemerge4 = select i1 %tmp11, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_da08 = icmp eq i32 %storemerge4, 0
  store i32 %v0_d9e8, i32* @global_var_1f258.80, align 4
  br i1 %v2_da08, label %dec_label_pc_da20, label %dec_label_pc_da14

dec_label_pc_da14:                                ; preds = %dec_label_pc_d9e0
  store i32 %v3_d9e0, i32* @r4, align 4
  store i32 %v6_d9e0, i32* @r5, align 4
  ret i32 %v0_d9e8

dec_label_pc_da20:                                ; preds = %dec_label_pc_d9e0
  store i32 1, i32* %stack_var_-20, align 4
  %v1_da2c = call i32 @function_104ec(i32 28)
  %v1_da34 = call i32 @function_104ec(i32 29)
  %v0_da38 = load i32, i32* @r5, align 4
  %v2_da40 = inttoptr i32 %v0_da38 to i32*
  %v3_da40 = call i32 @function_10428(i32 28, i32* %v2_da40)
  %v2_da48 = call i32 @function_111ec(i32 %v3_da40, i32 2)
  %v7_da4c = icmp eq i32 %v2_da48, -1
  store i32 %v2_da48, i32* @r4, align 4
  br i1 %v7_da4c, label %dec_label_pc_da94, label %dec_label_pc_da58

dec_label_pc_da58:                                ; preds = %dec_label_pc_da94, %dec_label_pc_da20
  %v0_da64 = phi i32 [ %v2_daa4, %dec_label_pc_da94 ], [ %v2_da48, %dec_label_pc_da20 ]
  %v2_da68 = ptrtoint i32* %stack_var_-20 to i32
  %v3_da6c = call i32 @function_11554(i32 %v0_da64, i32 -2147199228, i32 %v2_da68)
  br label %dec_label_pc_da70

dec_label_pc_da70:                                ; preds = %dec_label_pc_da70, %dec_label_pc_da58
  %v0_da7c = load i32, i32* @r4, align 4
  %v3_da84 = call i32 @function_11554(i32 %v0_da7c, i32 -2147199227, i32 0)
  %v1_da8c = call i32 @function_13700(i32 10)
  br label %dec_label_pc_da70

dec_label_pc_da94:                                ; preds = %dec_label_pc_da20
  %v0_da94 = load i32, i32* @r5, align 4
  %v2_da9c = inttoptr i32 %v0_da94 to i32*
  %v3_da9c = call i32 @function_10428(i32 29, i32* %v2_da9c)
  %v2_daa4 = call i32 @function_111ec(i32 %v3_da9c, i32 2)
  %v3_daa8 = icmp eq i32 %v2_daa4, -1
  store i32 %v2_daa4, i32* @r4, align 4
  br i1 %v3_daa8, label %dec_label_pc_dab4, label %dec_label_pc_da58

dec_label_pc_dab4:                                ; preds = %dec_label_pc_da94
  %v1_dab8 = call i32 @function_1044c(i32 28)
  %v1_dac0 = call i32 @function_1044c(i32 29)
  %v0_dac4 = load i32, i32* @r5, align 4
  %v1_dac8 = call i32 @function_13648(i32 %v0_dac4)
  %v0_dacc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_dacc, label %bb14, label %bb15

bb14:                                             ; preds = %dec_label_pc_dab4
  %v2_dacc = load i32, i32* @r8, align 4
  %v8_dacc = ashr i32 %v2_dacc, %arg1
  %v9_dacc = and i32 %v8_dacc, 2
  call void @__pseudo_branch(i32 %v9_dacc)
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_dab4, %bb14
  ret i32 %v1_dac8

; uselistorder directives
  uselistorder i32 %v2_daa4, { 1, 2, 0 }
  uselistorder i32 %v2_da48, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_d9e8, { 2, 1, 3, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_dad0(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_dad0:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-1432 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-42 = alloca i8*, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-408 = alloca i32, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v15_dad0 = load i32, i32* @r8, align 4
  %v2_dae0 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_dae0, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v2_daf8 = call i32 @function_11e8c(i32* nonnull %stack_var_-64)
  store i32 %v2_dae0, i32* @r0, align 4
  %v2_db04 = call i32 @function_11e48(i32 %v2_dae0, i32 2)
  %v0_db08 = load i32, i32* @r5, align 4
  store i32 %v0_db08, i32* %r2.global-to-local, align 4
  %v3_db14 = call i32 @function_115a8(i32 %v0_db08, i32 %v2_dae0, i32 %v0_db08)
  %v2_db20 = call i32 @function_11ea0(i32 17, i32 1)
  %v2_db2c = call i32 @function_11ea0(i32 5, i32 55268)
  %v0_db30 = call i32 @function_10ddc()
  store i32 ptrtoint (i16** @global_var_212e4.76 to i32), i32* %r2.global-to-local, align 4
  store i16 -6144, i16* bitcast (i32* @global_var_212e6.78 to i16*), align 4
  store i32 1494907823, i32* @global_var_212e8.77, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %v0_db30, i32* @global_var_212d8.46, align 4
  store i16 2, i16* bitcast (i16** @global_var_212e4.76 to i16*), align 4
  %v6_db58 = call i32 @function_1058c(i32 %v0_db30, i32 ptrtoint (i32* @global_var_212d8.46 to i32), i32 ptrtoint (i16** @global_var_212e4.76 to i32), i32 2)
  store i32 ptrtoint (i32* @global_var_d95c.70 to i32), i32* %r3.global-to-local, align 4
  store i32 127116, i32* %ip.global-to-local, align 4
  %v2_db64 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_db64, i32* @sb, align 4
  store i32 ptrtoint (i32* @global_var_d95c.70 to i32), i32* inttoptr (i32 127116 to i32*), align 4
  %v1_db6c = call i32 @function_d7fc(i32 %v6_db58)
  %v1_db70 = call i32 @function_e2f8(i32 %v1_db6c)
  store i32 %v2_db64, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_db7c = call i32 @function_10bb4()
  %v0_db80 = load i32, i32* @r6, align 4
  %v7_db80 = icmp eq i32 %v0_db80, 2
  br i1 %v7_db80, label %dec_label_pc_dcb0, label %dec_label_pc_db88

dec_label_pc_db88:                                ; preds = %dec_label_pc_dcb0, %dec_label_pc_dad0, %dec_label_pc_dcc0
  %v0_db88 = call i32 @function_e29c()
  store i32 %v0_db88, i32* @r6, align 4
  %v0_db90 = load i32, i32* @r8, align 4
  %v1_db90 = inttoptr i32 %v0_db90 to i32*
  %v2_db90 = load i32, i32* %v1_db90, align 4
  %v1_db94 = inttoptr i32 %v2_db90 to i8*
  %v2_db94 = call i32 @function_10b20(i8* %v1_db94)
  %v0_db9c = load i32, i32* @r8, align 4
  %v1_db9c = inttoptr i32 %v0_db9c to i32*
  %v2_db9c = load i32, i32* %v1_db9c, align 4
  %v1_dba0 = inttoptr i32 %v2_db9c to i8*
  %v2_dba0 = call i32 @function_10b20(i8* %v1_dba0)
  %v1_dba4 = sub i32 20, %v2_db94
  store i32 %v2_dba0, i32* @r4, align 4
  %v0_dbac = load i32, i32* @r6, align 4
  %v2_dbb0 = call i32 @function_11178(i32 %v0_dbac, i32 %v1_dba4)
  %v2_dbb4 = ptrtoint i32* %stack_var_-120 to i32
  store i32 %v2_dbb4, i32* @r5, align 4
  %v0_dbb8 = load i32, i32* @r4, align 4
  %v2_dbb8 = add i32 %v0_dbb8, %v1_dba4
  store i32 %v2_dbb8, i32* @r4, align 4
  %v2_dbc4 = call i32 @function_e360(i32 %v2_dbb4, i32 %v2_dbb8)
  %v2_dbc8 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v2_dbc8, i32* @lr, align 4
  %v1_dbcc = load i32, i32* @r4, align 4
  %v2_dbcc = add i32 %v1_dbcc, %v2_dbc8
  store i32 %v2_dbcc, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_dbd8 = load i32, i32* @r8, align 4
  %v1_dbd8 = inttoptr i32 %v0_dbd8 to i32*
  %v2_dbd8 = load i32, i32* %v1_dbd8, align 4
  store i32 %v2_dbd8, i32* @r0, align 4
  %v3_dbdc = add i32 %v2_dbcc, -80
  %v4_dbdc = inttoptr i32 %v3_dbdc to i8*
  store i8 0, i8* %v4_dbdc, align 1
  %v2_dbe0 = inttoptr i32 %v2_dbd8 to i8*
  %v3_dbe0 = call i32 @function_10b48(i8* %v2_dbe0, i32 %v2_dbb4)
  store i32 32, i32* @r1, align 4
  store i32 %v2_dbb4, i32* @r0, align 4
  %v0_dbec = call i32 @function_10bb4()
  %v0_dbf0 = call i32 @function_e29c()
  store i32 %v0_dbf0, i32* @r7, align 4
  %v0_dbf8 = load i32, i32* @r8, align 4
  %v1_dbf8 = inttoptr i32 %v0_dbf8 to i32*
  %v2_dbf8 = load i32, i32* %v1_dbf8, align 4
  %v1_dbfc = inttoptr i32 %v2_dbf8 to i8*
  %v2_dbfc = call i32 @function_10b20(i8* %v1_dbfc)
  store i32 %v2_dbfc, i32* @r6, align 4
  %v0_dc04 = load i32, i32* @r8, align 4
  %v1_dc04 = inttoptr i32 %v0_dc04 to i32*
  %v2_dc04 = load i32, i32* %v1_dc04, align 4
  %v1_dc08 = inttoptr i32 %v2_dc04 to i8*
  %v2_dc08 = call i32 @function_10b20(i8* %v1_dc08)
  %v0_dc0c = load i32, i32* @r6, align 4
  %v1_dc0c = sub i32 20, %v0_dc0c
  store i32 %v2_dc08, i32* @r4, align 4
  %v0_dc14 = load i32, i32* @r7, align 4
  %v2_dc18 = call i32 @function_11178(i32 %v0_dc14, i32 %v1_dc0c)
  %v0_dc1c = load i32, i32* @r4, align 4
  %v2_dc1c = add i32 %v0_dc1c, %v1_dc0c
  store i32 %v2_dc1c, i32* @r4, align 4
  %v2_dc28 = call i32 @function_e360(i32 %v2_dbb4, i32 %v2_dc1c)
  store i32 %v2_dbc8, i32* %r2.global-to-local, align 4
  %v1_dc30 = load i32, i32* @r4, align 4
  %v2_dc30 = add i32 %v1_dc30, %v2_dbc8
  store i32 %v2_dc30, i32* %r3.global-to-local, align 4
  %v0_dc34 = load i32, i32* @sl, align 4
  %v1_dc34 = trunc i32 %v0_dc34 to i8
  %v3_dc34 = add i32 %v2_dc30, -80
  %v4_dc34 = inttoptr i32 %v3_dc34 to i8*
  store i8 %v1_dc34, i8* %v4_dc34, align 1
  %v4_dc40 = call i32 @function_11290(i32 15, i32 %v2_dbb4, i32 %v2_dbc8, i32 %v2_dc30)
  %v1_dc48 = call i32 @function_104ec(i32 5)
  %v3_dc58 = call i32 @function_10428(i32 5, i32* nonnull %stack_var_-48)
  %v3_dc5c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_dc5c, i32* %r2.global-to-local, align 4
  %v2_dc68 = call i32 @function_114ec(i32 1, i32 %v3_dc58)
  store i32 1, i32* %r2.global-to-local, align 4
  %v2_dc78 = call i32 @function_114ec(i32 1, i32 ptrtoint (i32* @global_var_16980.88 to i32))
  %v1_dc80 = call i32 @function_1044c(i32 5)
  %v1_dc84 = call i32 @function_85e0(i32 %v1_dc80)
  %v1_dc88 = call i32 @function_cef8(i32 %v1_dc84)
  store i32 %v1_dc88, i32* @r0, align 4
  %v1_dc8c = call i32 @function_d9e0(i32 %v1_dc88)
  store i32 %v1_dc8c, i32* @r0, align 4
  %v0_dc90 = call i32 @function_112d0()
  %v1_dc94 = load i32, i32* @sl, align 4
  %v7_dc98 = icmp sgt i32 %v0_dc90, %v1_dc94
  br i1 %v7_dc98, label %dec_label_pc_dc9c, label %dec_label_pc_dce8

dec_label_pc_dc9c:                                ; preds = %dec_label_pc_db88
  store i32 %v15_dad0, i32* %r8.global-to-local, align 4
  ret i32 %v1_dc94

dec_label_pc_dcb0:                                ; preds = %dec_label_pc_dad0
  %v0_dcb0 = load i32, i32* @r8, align 4
  %v1_dcb0 = add i32 %v0_dcb0, 4
  %v2_dcb0 = inttoptr i32 %v1_dcb0 to i32*
  %v3_dcb0 = load i32, i32* %v2_dcb0, align 4
  %v1_dcb4 = inttoptr i32 %v3_dcb0 to i8*
  %v2_dcb4 = call i32 @function_10b20(i8* %v1_dcb4)
  %v8_dcbc = icmp sgt i32 %v2_dcb4, 31
  br i1 %v8_dcbc, label %dec_label_pc_db88, label %dec_label_pc_dcc0

dec_label_pc_dcc0:                                ; preds = %dec_label_pc_dcb0
  %v0_dcc0 = load i32, i32* @r8, align 4
  %v1_dcc0 = add i32 %v0_dcc0, 4
  %v2_dcc0 = inttoptr i32 %v1_dcc0 to i32*
  %v3_dcc0 = load i32, i32* %v2_dcc0, align 4
  store i32 %v2_db64, i32* @r0, align 4
  %v2_dcc8 = bitcast i32* %stack_var_-152 to i8*
  %v3_dcc8 = call i32 @function_10b48(i8* %v2_dcc8, i32 %v3_dcc0)
  %v0_dccc = load i32, i32* @r8, align 4
  %v1_dccc = add i32 %v0_dccc, 4
  %v2_dccc = inttoptr i32 %v1_dccc to i32*
  %v3_dccc = load i32, i32* %v2_dccc, align 4
  %v1_dcd4 = inttoptr i32 %v3_dccc to i8*
  %v2_dcd4 = call i32 @function_10b20(i8* %v1_dcd4)
  store i32 %v2_dcd4, i32* @r1, align 4
  store i32 %v3_dccc, i32* @r0, align 4
  %v0_dce0 = call i32 @function_10bb4()
  br label %dec_label_pc_db88

dec_label_pc_dce8:                                ; preds = %dec_label_pc_db88
  %v1_dce8 = call i32 @function_11520(i32 %v0_dc90)
  %v0_dcf0 = load i32, i32* @sl, align 4
  %v1_dcf4 = call i32 @function_115e0(i32 %v0_dcf0)
  %v1_dcfc = call i32 @function_115e0(i32 1)
  %v1_dd04 = call i32 @function_115e0(i32 2)
  store i32 127112, i32* @fp, align 4
  %v1_dd0c = call i32 @function_85e0(i32 %v1_dd04)
  %v1_dd10 = call i32 @function_cef8(i32 %v1_dd0c)
  store i32 %v1_dd10, i32* @r0, align 4
  %v1_dd14 = call i32 @function_d9e0(i32 %v1_dd10)
  store i32 %v1_dd14, i32* @r0, align 4
  %v1_dd18 = call i32 @function_ec8c(i32 %v1_dd14)
  %v0_dd1c = load i32, i32* @sl, align 4
  %v2_dd20 = ptrtoint i32* %stack_var_-280 to i32
  store i32 %v2_dd20, i32* @r7, align 4
  %v2_dd24 = ptrtoint i32* %stack_var_-408 to i32
  store i32 %v2_dd24, i32* @r6, align 4
  %v2_de04 = ptrtoint i32* %stack_var_-72 to i32
  %v2_de54 = ptrtoint i32* %stack_var_-168 to i32
  %v2_e030 = ptrtoint i32* %stack_var_-56 to i32
  %v2_e038 = ptrtoint i8** %stack_var_-42 to i32
  %v2_e1e0 = ptrtoint i32* %stack_var_-1432 to i32
  %v2_e054 = ptrtoint i32* %stack_var_-52 to i32
  %v1_e108 = bitcast i32* %stack_var_-152 to i8*
  %v2_e0c8 = ptrtoint i32* %stack_var_-88 to i32
  %v1_e0e4 = sub i32 0, %v1_dce8
  br label %dec_label_pc_dd28

dec_label_pc_dd28:                                ; preds = %dec_label_pc_e168, %dec_label_pc_e204, %bb43, %dec_label_pc_e104, %dec_label_pc_df38, %dec_label_pc_df28, %bb40, %dec_label_pc_e258, %dec_label_pc_e1c4, %dec_label_pc_e178, %dec_label_pc_e154, %dec_label_pc_e080, %dec_label_pc_dfa8, %dec_label_pc_dee0, %dec_label_pc_dce8
  %stack_var_-1436.0 = phi i32 [ %v0_dd1c, %dec_label_pc_dce8 ], [ %stack_var_-1436.0, %bb40 ], [ %stack_var_-1436.1, %dec_label_pc_df28 ], [ %stack_var_-1436.1, %dec_label_pc_df38 ], [ %stack_var_-1436.1, %bb43 ], [ %stack_var_-1436.1, %dec_label_pc_e178 ], [ %stack_var_-1436.1, %dec_label_pc_dfa8 ], [ %stack_var_-1436.1, %dec_label_pc_e204 ], [ %stack_var_-1436.1, %dec_label_pc_e258 ], [ %stack_var_-1436.1, %dec_label_pc_e1c4 ], [ %stack_var_-1436.1, %dec_label_pc_dee0 ], [ %stack_var_-1436.1, %dec_label_pc_e104 ], [ %stack_var_-1436.1, %dec_label_pc_e154 ], [ %stack_var_-1436.1, %dec_label_pc_e080 ], [ %stack_var_-1436.1, %dec_label_pc_e168 ]
  store i32 0, i32* %stack_var_-280, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_dd34

dec_label_pc_dd34:                                ; preds = %dec_label_pc_dd34, %dec_label_pc_dd28
  %v1_dd38 = phi i32 [ %v1_dd3c, %dec_label_pc_dd34 ], [ 4, %dec_label_pc_dd28 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_dd38 = load i32, i32* @r7, align 4
  %v3_dd38 = add i32 %v2_dd38, %v1_dd38
  %v4_dd38 = inttoptr i32 %v3_dd38 to i32*
  store i32 0, i32* %v4_dd38, align 4
  %v0_dd3c = load i32, i32* %r3.global-to-local, align 4
  %v1_dd3c = add i32 %v0_dd3c, 4
  store i32 %v1_dd3c, i32* %r3.global-to-local, align 4
  %v7_dd40 = icmp eq i32 %v1_dd3c, 128
  br i1 %v7_dd40, label %dec_label_pc_dd48, label %dec_label_pc_dd34

dec_label_pc_dd48:                                ; preds = %dec_label_pc_dd34
  %v0_dd48 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_dd48, i32* %stack_var_-408, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_dd50

dec_label_pc_dd50:                                ; preds = %dec_label_pc_dd50, %dec_label_pc_dd48
  %v1_dd54 = phi i32 [ %v1_dd58, %dec_label_pc_dd50 ], [ 4, %dec_label_pc_dd48 ]
  store i32 0, i32* @r4, align 4
  %v2_dd54 = load i32, i32* @r6, align 4
  %v3_dd54 = add i32 %v2_dd54, %v1_dd54
  %v4_dd54 = inttoptr i32 %v3_dd54 to i32*
  store i32 0, i32* %v4_dd54, align 4
  %v0_dd58 = load i32, i32* %r3.global-to-local, align 4
  %v1_dd58 = add i32 %v0_dd58, 4
  store i32 %v1_dd58, i32* %r3.global-to-local, align 4
  %v7_dd5c = icmp eq i32 %v1_dd58, 128
  br i1 %v7_dd5c, label %dec_label_pc_dd64, label %dec_label_pc_dd50

dec_label_pc_dd64:                                ; preds = %dec_label_pc_dd50
  store i32 127108, i32* %r3.global-to-local, align 4
  %v2_dd68 = load i32, i32* inttoptr (i32 127108 to i32*), align 4
  %v7_dd6c = icmp eq i32 %v2_dd68, -1
  br i1 %v7_dd6c, label %dec_label_pc_dd98, label %dec_label_pc_dd74

dec_label_pc_dd74:                                ; preds = %dec_label_pc_dd64
  %v3_dd74 = udiv i32 %v2_dd68, 32
  %v3_dd78 = mul nuw nsw i32 %v3_dd74, 4
  store i32 %v2_dbc8, i32* %ip.global-to-local, align 4
  %v2_dd80 = add i32 %v3_dd78, %v2_dbc8
  store i32 %v2_dd80, i32* %r3.global-to-local, align 4
  %v1_dd84 = add i32 %v2_dd80, -240
  %v2_dd84 = inttoptr i32 %v1_dd84 to i32*
  %v3_dd84 = load i32, i32* %v2_dd84, align 4
  %v1_dd88 = urem i32 %v2_dd68, 32
  %v7_dd90 = shl i32 1, %v1_dd88
  %v8_dd90 = or i32 %v3_dd84, %v7_dd90
  store i32 %v8_dd90, i32* %r2.global-to-local, align 4
  store i32 %v8_dd90, i32* %v2_dd84, align 4
  br label %dec_label_pc_dd98

dec_label_pc_dd98:                                ; preds = %dec_label_pc_dd64, %dec_label_pc_dd74
  %v0_dd98 = load i32, i32* @fp, align 4
  %v1_dd98 = inttoptr i32 %v0_dd98 to i32*
  %v2_dd98 = load i32, i32* %v1_dd98, align 4
  store i32 %v2_dd98, i32* @r3, align 4
  %v7_dd9c = icmp eq i32 %v2_dd98, -1
  store i32 127112, i32* %r8.global-to-local, align 4
  br i1 %v7_dd9c, label %dec_label_pc_dfc0, label %dec_label_pc_dda8

dec_label_pc_dda8:                                ; preds = %dec_label_pc_dfc0, %dec_label_pc_dd98, %bb42
  %v2_ddac = load i8, i8* bitcast (i8** @global_var_1f25c.92 to i8*), align 4
  %v3_ddac = zext i8 %v2_ddac to i32
  store i32 %v3_ddac, i32* %r3.global-to-local, align 4
  %v2_ddb0 = icmp eq i8 %v2_ddac, 0
  %v0_defc = load i32, i32* @fp, align 4
  %v1_defc = inttoptr i32 %v0_defc to i32*
  %v2_defc = load i32, i32* %v1_defc, align 4
  store i32 %v2_defc, i32* %ip.global-to-local, align 4
  %v3_df00 = udiv i32 %v2_defc, 32
  store i32 %v3_df00, i32* %r3.global-to-local, align 4
  br i1 %v2_ddb0, label %dec_label_pc_defc, label %dec_label_pc_ddb8

dec_label_pc_ddb8:                                ; preds = %dec_label_pc_dda8
  %v3_ddc4 = mul nuw nsw i32 %v3_df00, 4
  %v2_ddc8 = add i32 %v3_ddc4, %v2_dbc8
  store i32 %v2_ddc8, i32* %r3.global-to-local, align 4
  %v1_ddcc = add i32 %v2_ddc8, -368
  %v2_ddcc = inttoptr i32 %v1_ddcc to i32*
  %v3_ddcc = load i32, i32* %v2_ddcc, align 4
  %v1_ddd0 = urem i32 %v2_defc, 32
  %v7_ddd8 = shl i32 1, %v1_ddd0
  %v8_ddd8 = or i32 %v3_ddcc, %v7_ddd8
  store i32 %v8_ddd8, i32* %r2.global-to-local, align 4
  store i32 %v8_ddd8, i32* %v2_ddcc, align 4
  br label %dec_label_pc_dde0

dec_label_pc_dde0:                                ; preds = %dec_label_pc_defc, %dec_label_pc_ddb8
  store i32 127108, i32* %r3.global-to-local, align 4
  %v2_dde4 = load i32, i32* inttoptr (i32 127108 to i32*), align 4
  store i32 0, i32* @lr, align 4
  %v0_ddec = load i32, i32* %ip.global-to-local, align 4
  %v5_ddf0 = icmp slt i32 %v0_ddec, %v2_dde4
  br i1 %v5_ddf0, label %bb40, label %bb

bb:                                               ; preds = %dec_label_pc_dde0
  br label %bb40

bb40:                                             ; preds = %dec_label_pc_dde0, %bb
  %v0_de00 = phi i32 [ %v2_dde4, %dec_label_pc_dde0 ], [ %v0_ddec, %bb ]
  store i32 10, i32* %stack_var_-72, align 4
  %v1_de00 = add i32 %v0_de00, 1
  store i32 %v2_de04, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_dd24, i32* %r2.global-to-local, align 4
  %v5_de1c = call i32 @function_11304(i32 %v1_de00, i32 %v2_dd20, i32 %v2_dd24, i32 0, i32 %v2_de04)
  %v8_de20 = icmp eq i32 %v5_de1c, -1
  br i1 %v8_de20, label %dec_label_pc_dd28, label %dec_label_pc_de28

dec_label_pc_de28:                                ; preds = %bb40
  %v6_de1c = trunc i32 %v5_de1c to i16
  %v3_de28 = icmp eq i16 %v6_de1c, 0
  br i1 %v3_de28, label %dec_label_pc_de30, label %dec_label_pc_de64

dec_label_pc_de30:                                ; preds = %dec_label_pc_de28
  %v5_de3c = srem i32 %stack_var_-1436.0, 6
  %v4_de44 = sub i32 %stack_var_-1436.0, %v5_de3c
  store i32 %v4_de44, i32* %r3.global-to-local, align 4
  %v2_de4c = icmp eq i32 %v5_de3c, 0
  %v1_de50 = add i32 %stack_var_-1436.0, 1
  store i32 %v1_de50, i32* @lr, align 4
  store i32 %v2_de54, i32* %r2.global-to-local, align 4
  %v7_de58 = inttoptr i32 %v5_de1c to i8*
  store i8* %v7_de58, i8** %stack_var_-42, align 4
  br i1 %v2_de4c, label %dec_label_pc_e030, label %dec_label_pc_de64

dec_label_pc_de64:                                ; preds = %dec_label_pc_de28, %dec_label_pc_de30, %dec_label_pc_e030
  %stack_var_-1436.1 = phi i32 [ %v1_de50, %dec_label_pc_e030 ], [ %v1_de50, %dec_label_pc_de30 ], [ %stack_var_-1436.0, %dec_label_pc_de28 ]
  store i32 127108, i32* %r3.global-to-local, align 4
  %v2_de68 = load i32, i32* inttoptr (i32 127108 to i32*), align 4
  %v7_de6c = icmp eq i32 %v2_de68, -1
  br i1 %v7_de6c, label %dec_label_pc_de98, label %dec_label_pc_de74

dec_label_pc_de74:                                ; preds = %dec_label_pc_de64
  %v3_de74 = udiv i32 %v2_de68, 32
  %v3_de78 = mul nuw nsw i32 %v3_de74, 4
  store i32 %v2_dbc8, i32* %ip.global-to-local, align 4
  %v2_de80 = add i32 %v3_de78, %v2_dbc8
  store i32 %v2_de80, i32* %r3.global-to-local, align 4
  %v1_de84 = add i32 %v2_de80, -240
  %v2_de84 = inttoptr i32 %v1_de84 to i32*
  %v3_de84 = load i32, i32* %v2_de84, align 4
  %v1_de88 = urem i32 %v2_de68, 32
  %v6_de8c = lshr i32 %v3_de84, %v1_de88
  store i32 %v6_de8c, i32* %r2.global-to-local, align 4
  %v1_de90 = urem i32 %v6_de8c, 2
  %v2_de90 = icmp eq i32 %v1_de90, 0
  br i1 %v2_de90, label %dec_label_pc_de98, label %dec_label_pc_e0bc

dec_label_pc_de98:                                ; preds = %dec_label_pc_de74, %dec_label_pc_de64
  %v2_de9c = load i8, i8* bitcast (i8** @global_var_1f25c.92 to i8*), align 4
  %v3_de9c = zext i8 %v2_de9c to i32
  store i32 %v3_de9c, i32* @r4, align 4
  %v2_dea0 = icmp eq i8 %v2_de9c, 0
  %v0_df28 = load i32, i32* @fp, align 4
  %v1_df28 = inttoptr i32 %v0_df28 to i32*
  %v2_df28 = load i32, i32* %v1_df28, align 4
  br i1 %v2_dea0, label %dec_label_pc_df28, label %dec_label_pc_dea8

dec_label_pc_dea8:                                ; preds = %dec_label_pc_de98
  %v3_deac = udiv i32 %v2_df28, 32
  store i32 %v2_dbc8, i32* %r2.global-to-local, align 4
  %v3_deb4 = mul nuw nsw i32 %v3_deac, 4
  %v2_deb8 = add i32 %v3_deb4, %v2_dbc8
  store i32 %v2_deb8, i32* %r3.global-to-local, align 4
  %v1_debc = add i32 %v2_deb8, -368
  %v2_debc = inttoptr i32 %v1_debc to i32*
  %v3_debc = load i32, i32* %v2_debc, align 4
  %v1_dec0 = urem i32 %v2_df28, 32
  %v6_dec4 = lshr i32 %v3_debc, %v1_dec0
  store i32 %v6_dec4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1f25c.92 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_ded0 = urem i32 %v6_dec4, 2
  %v2_ded0 = icmp eq i32 %v1_ded0, 0
  store i8 0, i8* bitcast (i8** @global_var_1f25c.92 to i8*), align 4
  store i32 127112, i32* @r5, align 4
  br i1 %v2_ded0, label %dec_label_pc_dee0, label %dec_label_pc_e04c

dec_label_pc_dee0:                                ; preds = %dec_label_pc_dea8
  store i32 57064, i32* @lr, align 4
  %v1_dee4 = icmp ne i32 %v2_df28, -1
  call void @__pseudo_cond_branch(i1 %v1_dee4, i32 ptrtoint (i32* @global_var_115e0.94 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_deec = load i32, i32* @r5, align 4
  %v2_deec = inttoptr i32 %v1_deec to i32*
  store i32 -1, i32* %v2_deec, align 4
  %v1_def4 = call i32 @function_13700(i32 1)
  br label %dec_label_pc_dd28

dec_label_pc_defc:                                ; preds = %dec_label_pc_dda8
  store i32 %v2_dbc8, i32* %r2.global-to-local, align 4
  %v3_df08 = mul nuw nsw i32 %v3_df00, 4
  %v2_df0c = add i32 %v3_df08, %v2_dbc8
  store i32 %v2_df0c, i32* %r3.global-to-local, align 4
  %v1_df10 = add i32 %v2_df0c, -240
  %v2_df10 = inttoptr i32 %v1_df10 to i32*
  %v3_df10 = load i32, i32* %v2_df10, align 4
  %v1_df14 = urem i32 %v2_defc, 32
  %v7_df1c = shl i32 1, %v1_df14
  %v8_df1c = or i32 %v3_df10, %v7_df1c
  store i32 %v8_df1c, i32* %r2.global-to-local, align 4
  store i32 %v8_df1c, i32* %v2_df10, align 4
  br label %dec_label_pc_dde0

dec_label_pc_df28:                                ; preds = %dec_label_pc_de98
  %v7_df2c = icmp eq i32 %v2_df28, -1
  store i32 127112, i32* @r8, align 4
  br i1 %v7_df2c, label %dec_label_pc_dd28, label %dec_label_pc_df38

dec_label_pc_df38:                                ; preds = %dec_label_pc_df28
  %v3_df38 = udiv i32 %v2_df28, 32
  store i32 %v2_dbc8, i32* %r2.global-to-local, align 4
  %v3_df40 = mul nuw nsw i32 %v3_df38, 4
  %v2_df44 = add i32 %v3_df40, %v2_dbc8
  store i32 %v2_df44, i32* %r3.global-to-local, align 4
  %v1_df48 = add i32 %v2_df44, -240
  %v2_df48 = inttoptr i32 %v1_df48 to i32*
  %v3_df48 = load i32, i32* %v2_df48, align 4
  %v1_df4c = urem i32 %v2_df28, 32
  %v6_df50 = lshr i32 %v3_df48, %v1_df4c
  store i32 %v6_df50, i32* %r2.global-to-local, align 4
  %v1_df54 = urem i32 %v6_df50, 2
  %v2_df54 = icmp eq i32 %v1_df54, 0
  br i1 %v2_df54, label %dec_label_pc_dd28, label %dec_label_pc_df5c

dec_label_pc_df5c:                                ; preds = %dec_label_pc_df38
  %v6_df60 = inttoptr i32 %v3_de9c to i8*
  store i8* %v6_df60, i8** %stack_var_-42, align 4
  store i32 %v2_e038, i32* @sl, align 4
  %v0_df64 = call i32 @function_11a08()
  %v0_df68 = load i32, i32* @r4, align 4
  %v2_df68 = inttoptr i32 %v0_df64 to i32*
  store i32 %v0_df68, i32* %v2_df68, align 4
  store i32 %v0_df64, i32* @r5, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_df78 = load i32, i32* @r8, align 4
  %v1_df78 = inttoptr i32 %v0_df78 to i32*
  %v2_df78 = load i32, i32* %v1_df78, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_df84 = call i32 @function_11cc4(i32 %v2_df78, i32 %v2_e038, i32 2, i32 16386)
  %v7_df88 = icmp eq i32 %v4_df84, -1
  br i1 %v7_df88, label %dec_label_pc_e168, label %dec_label_pc_df90

dec_label_pc_df90:                                ; preds = %dec_label_pc_df5c
  %v2_df90 = icmp eq i32 %v4_df84, 0
  br i1 %v2_df90, label %dec_label_pc_e178, label %dec_label_pc_df98

dec_label_pc_df98:                                ; preds = %dec_label_pc_df90
  store i32 %v2_de54, i32* %ip.global-to-local, align 4
  %v3_df9c = load i8*, i8** %stack_var_-42, align 4
  %v4_df9c = ptrtoint i8* %v3_df9c to i32
  store i32 %v4_df9c, i32* %r3.global-to-local, align 4
  %v2_dfa0 = icmp eq i8* %v3_df9c, null
  br i1 %v2_dfa0, label %dec_label_pc_dfa8, label %dec_label_pc_e1a8

dec_label_pc_dfa8:                                ; preds = %dec_label_pc_df98
  %v0_dfa8 = load i32, i32* @r8, align 4
  %v1_dfa8 = inttoptr i32 %v0_dfa8 to i32*
  %v2_dfa8 = load i32, i32* %v1_dfa8, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_dfb4 = add i32 %v4_df9c, 16384
  store i32 %v1_dfb4, i32* %r3.global-to-local, align 4
  %v4_dfb8 = call i32 @function_11cc4(i32 %v2_dfa8, i32 %v2_e038, i32 2, i32 %v1_dfb4)
  br label %dec_label_pc_dd28

dec_label_pc_dfc0:                                ; preds = %dec_label_pc_dd98
  %v0_dfc8 = load i32, i32* @r4, align 4
  store i32 %v0_dfc8, i32* %r2.global-to-local, align 4
  %v3_dfcc = call i32 @function_11df4(i32 2, i32 1, i32 %v0_dfc8)
  %v7_dfd0 = icmp eq i32 %v3_dfcc, -1
  store i32 %v3_dfcc, i32* @r5, align 4
  %v1_dfd8 = load i32, i32* %r8.global-to-local, align 4
  %v2_dfd8 = inttoptr i32 %v1_dfd8 to i32*
  store i32 %v3_dfcc, i32* %v2_dfd8, align 4
  br i1 %v7_dfd0, label %dec_label_pc_dda8, label %dec_label_pc_dfe0

dec_label_pc_dfe0:                                ; preds = %dec_label_pc_dfc0
  %v0_dfe0 = load i32, i32* @r4, align 4
  store i32 %v0_dfe0, i32* %r2.global-to-local, align 4
  %v2_dfe8 = call i32 @function_11414(i32 %v3_dfcc, i32 3)
  %v1_dff0 = or i32 %v2_dfe8, 2048
  store i32 %v1_dff0, i32* %r2.global-to-local, align 4
  %v0_dff4 = load i32, i32* @r5, align 4
  %v2_dff8 = call i32 @function_11414(i32 %v0_dff4, i32 4)
  %v2_e000 = load i32, i32* inttoptr (i32 127116 to i32*), align 4
  store i32 %v2_e000, i32* %r3.global-to-local, align 4
  %v2_e004 = icmp eq i32 %v2_e000, 0
  br i1 %v2_e004, label %bb42, label %bb41

bb41:                                             ; preds = %dec_label_pc_dfe0
  br label %bb42

bb42:                                             ; preds = %dec_label_pc_dfe0, %bb41
  %v2_e00c = xor i1 %v2_e004, true
  call void @__pseudo_cond_branch(i1 %v2_e00c, i32 %v2_e000)
  store i32 ptrtoint (i8** @global_var_1f25c.92 to i32), i32* %ip.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_e018 = load i32, i32* %r8.global-to-local, align 4
  %v1_e018 = inttoptr i32 %v0_e018 to i32*
  %v2_e018 = load i32, i32* %v1_e018, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1f25c.92 to i8*), align 4
  %v4_e028 = call i32 @function_11bdc(i32 %v2_e018, i32 ptrtoint (i16** @global_var_212e4.76 to i32), i32 16)
  br label %dec_label_pc_dda8

dec_label_pc_e030:                                ; preds = %dec_label_pc_de30
  %v0_e034 = load i32, i32* @fp, align 4
  %v1_e034 = inttoptr i32 %v0_e034 to i32*
  %v2_e034 = load i32, i32* %v1_e034, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e044 = call i32 @function_11d38(i32 %v2_e034, i32 %v2_e038, i32 2, i32 16384)
  br label %dec_label_pc_de64

dec_label_pc_e04c:                                ; preds = %dec_label_pc_dea8
  store i32 4, i32* @r4, align 4
  store i32 %v2_e054, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 %v2_e030, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  %v5_e070 = call i32 @function_11c4c(i32 %v2_df28, i32 1, i32 4, i32 %v2_e054, i32 %v2_e030)
  %v3_e074 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_e074, i32* %r3.global-to-local, align 4
  %v2_e078 = icmp eq i32 %v3_e074, 0
  br i1 %v2_e078, label %dec_label_pc_e104, label %dec_label_pc_e080

dec_label_pc_e080:                                ; preds = %dec_label_pc_e04c
  %v0_e080 = load i32, i32* @r5, align 4
  %v1_e080 = inttoptr i32 %v0_e080 to i32*
  %v2_e080 = load i32, i32* %v1_e080, align 4
  %v1_e084 = call i32 @function_115e0(i32 %v2_e080)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e08c = load i32, i32* @r5, align 4
  %v2_e08c = inttoptr i32 %v1_e08c to i32*
  store i32 -1, i32* %v2_e08c, align 4
  %v0_e090 = call i32 @function_e29c()
  %v3_e098 = zext i32 %v0_e090 to i64
  %v4_e098 = mul nuw i64 %v3_e098, 3435973837
  %v7_e098 = trunc i64 %v4_e098 to i32
  store i32 %v7_e098, i32* %ip.global-to-local, align 4
  %v3_e09c1 = udiv i64 %v4_e098, 34359738368
  %v3_e0a03 = mul nuw nsw i64 %v3_e09c1, 8
  %v3_e0a0 = trunc i64 %v3_e0a03 to i32
  store i32 %v3_e0a0, i32* %r2.global-to-local, align 4
  %v2_e0a45 = mul nuw nsw i64 %v3_e09c1, 2
  %v2_e0a4 = trunc i64 %v2_e0a45 to i32
  %v2_e0a8 = add i32 %v3_e0a0, %v2_e0a4
  store i32 %v2_e0a8, i32* %r3.global-to-local, align 4
  %v2_e0ac = sub i32 %v0_e090, %v2_e0a8
  %v1_e0b0 = add i32 %v2_e0ac, 1
  %v1_e0b4 = call i32 @function_13700(i32 %v1_e0b0)
  br label %dec_label_pc_dd28

dec_label_pc_e0bc:                                ; preds = %dec_label_pc_de74
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_e054, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-52, align 4
  %v5_e0d0 = call i32 @function_11b6c(i32 %v2_de68, i32 %v2_e0c8, i32 %v2_e054, i32 16, i32 16)
  %v1_e0d4 = call i32 @function_ea3c(i32 %v5_e0d0)
  %v1_e0d8 = call i32 @function_c93c(i32 %v1_e0d4)
  %v2_e0e8 = call i32 @function_113ac(i32 %v1_e0e4, i32 9)
  store i32 ptrtoint (i32* @global_var_1f258.80 to i32), i32* %r3.global-to-local, align 4
  %v2_e0f0 = load i32, i32* @global_var_1f258.80, align 4
  %v2_e0f4 = icmp eq i32 %v2_e0f0, 0
  br i1 %v2_e0f4, label %dec_label_pc_e0fc, label %dec_label_pc_e19c

dec_label_pc_e0fc:                                ; preds = %dec_label_pc_e0bc, %dec_label_pc_e19c
  %v1_e100 = call i32 @function_13648(i32 0)
  br label %dec_label_pc_e104

dec_label_pc_e104:                                ; preds = %dec_label_pc_e04c, %dec_label_pc_e0fc
  %v2_e108 = call i32 @function_10b20(i8* %v1_e108)
  %sext = mul i32 %v2_e108, 16777216
  %v1_e10c = sdiv i32 %sext, 16777216
  %v7_e10c = inttoptr i32 %v1_e10c to i8*
  store i8* %v7_e10c, i8** %stack_var_-42, align 4
  %v0_e110 = call i32 @function_10ddc()
  %v0_e118 = load i32, i32* @r4, align 4
  store i32 %v0_e118, i32* %r2.global-to-local, align 4
  store i32 %v0_e110, i32* @global_var_212d8.46, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e128 = load i32, i32* @r5, align 4
  %v1_e128 = inttoptr i32 %v0_e128 to i32*
  %v2_e128 = load i32, i32* %v1_e128, align 4
  %v4_e12c = call i32 @function_11d38(i32 %v2_e128, i32 ptrtoint (i32* @global_var_16984.98 to i32), i32 %v0_e118, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_e138 = load i32, i32* @r5, align 4
  %v1_e138 = inttoptr i32 %v0_e138 to i32*
  %v2_e138 = load i32, i32* %v1_e138, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_e144 = call i32 @function_11d38(i32 %v2_e138, i32 %v2_e038, i32 1, i32 16384)
  %v3_e148 = load i8*, i8** %stack_var_-42, align 4
  %v4_e148 = ptrtoint i8* %v3_e148 to i32
  store i32 %v4_e148, i32* %r2.global-to-local, align 4
  %v3_e14c = icmp eq i8* %v3_e148, null
  br i1 %v3_e14c, label %dec_label_pc_dd28, label %dec_label_pc_e154

dec_label_pc_e154:                                ; preds = %dec_label_pc_e104
  %v0_e154 = load i32, i32* @r5, align 4
  %v1_e154 = inttoptr i32 %v0_e154 to i32*
  %v2_e154 = load i32, i32* %v1_e154, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e160 = call i32 @function_11d38(i32 %v2_e154, i32 %v2_db64, i32 %v4_e148, i32 16384)
  br label %dec_label_pc_dd28

dec_label_pc_e168:                                ; preds = %dec_label_pc_e1d8, %dec_label_pc_df5c
  %v0_e168 = load i32, i32* @r5, align 4
  %v1_e168 = inttoptr i32 %v0_e168 to i32*
  %v2_e168 = load i32, i32* %v1_e168, align 4
  store i32 %v2_e168, i32* %r3.global-to-local, align 4
  %v7_e16c = icmp eq i32 %v2_e168, 4
  br i1 %v7_e16c, label %dec_label_pc_dd28, label %bb43

bb43:                                             ; preds = %dec_label_pc_e168
  %v8_e170 = icmp eq i32 %v2_e168, 11
  br i1 %v8_e170, label %dec_label_pc_dd28, label %dec_label_pc_e178

dec_label_pc_e178:                                ; preds = %dec_label_pc_e1fc, %bb43, %dec_label_pc_df90
  %v0_e178 = load i32, i32* @fp, align 4
  %v1_e178 = inttoptr i32 %v0_e178 to i32*
  %v2_e178 = load i32, i32* %v1_e178, align 4
  store i32 57732, i32* @lr, align 4
  %v1_e180 = icmp ne i32 %v2_e178, -1
  call void @__pseudo_cond_branch(i1 %v1_e180, i32 ptrtoint (i32* @global_var_115e0.94 to i32))
  store i32 127112, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* inttoptr (i32 127112 to i32*), align 8
  %v1_e194 = call i32 @function_13700(i32 1)
  br label %dec_label_pc_dd28

dec_label_pc_e19c:                                ; preds = %dec_label_pc_e0bc
  %v2_e1a0 = call i32 @function_113ac(i32 %v2_e0f0, i32 9)
  br label %dec_label_pc_e0fc

dec_label_pc_e1a8:                                ; preds = %dec_label_pc_df98
  %v3_e1a8 = udiv i32 %v4_df9c, 256
  %v1_e1ac = urem i32 %v4_df9c, 256
  store i32 %v1_e1ac, i32* %r3.global-to-local, align 4
  %v4_e1b0 = mul nuw nsw i32 %v1_e1ac, 256
  %v5_e1b0 = or i32 %v4_e1b0, %v3_e1a8
  %v6_e1b0 = trunc i32 %v5_e1b0 to i16
  store i32 %v5_e1b0, i32* %r2.global-to-local, align 4
  %v7_e1bc = inttoptr i32 %v5_e1b0 to i8*
  store i8* %v7_e1bc, i8** %stack_var_-42, align 4
  %tmp44 = icmp ult i16 %v6_e1b0, 1025
  br i1 %tmp44, label %dec_label_pc_e1d8, label %dec_label_pc_e1c4

dec_label_pc_e1c4:                                ; preds = %dec_label_pc_e1a8
  %v0_e1c4 = load i32, i32* @r8, align 4
  %v1_e1c4 = inttoptr i32 %v0_e1c4 to i32*
  %v2_e1c4 = load i32, i32* %v1_e1c4, align 4
  %v1_e1c8 = call i32 @function_115e0(i32 %v2_e1c4)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e1d0 = load i32, i32* @r8, align 4
  %v2_e1d0 = inttoptr i32 %v1_e1d0 to i32*
  store i32 -1, i32* %v2_e1d0, align 4
  br label %dec_label_pc_dd28

dec_label_pc_e1d8:                                ; preds = %dec_label_pc_e1a8
  %v0_e1d8 = load i32, i32* @r4, align 4
  %v1_e1d8 = load i32, i32* @r5, align 4
  %v2_e1d8 = inttoptr i32 %v1_e1d8 to i32*
  store i32 %v0_e1d8, i32* %v2_e1d8, align 4
  store i32 %v2_e1e0, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_e1e8 = load i32, i32* @r8, align 4
  %v1_e1e8 = inttoptr i32 %v0_e1e8 to i32*
  %v2_e1e8 = load i32, i32* %v1_e1e8, align 4
  %v7_e1f0 = call i32 @function_11cc4(i32 %v2_e1e8, i32 %v2_e1e0, i32 %v5_e1b0, i32 16386)
  %v7_e1f4 = icmp eq i32 %v7_e1f0, -1
  br i1 %v7_e1f4, label %dec_label_pc_e168, label %dec_label_pc_e1fc

dec_label_pc_e1fc:                                ; preds = %dec_label_pc_e1d8
  %v2_e1fc = icmp eq i32 %v7_e1f0, 0
  br i1 %v2_e1fc, label %dec_label_pc_e178, label %dec_label_pc_e204

dec_label_pc_e204:                                ; preds = %dec_label_pc_e1fc
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e210 = load i32, i32* @r8, align 4
  %v1_e210 = inttoptr i32 %v0_e210 to i32*
  %v2_e210 = load i32, i32* %v1_e210, align 4
  %v4_e214 = call i32 @function_11cc4(i32 %v2_e210, i32 %v2_e038, i32 2, i32 16384)
  %v3_e21c = load i8*, i8** %stack_var_-42, align 4
  %v4_e21c = ptrtoint i8* %v3_e21c to i32
  %v3_e220 = udiv i32 %v4_e21c, 256
  %v1_e224 = urem i32 %v4_e21c, 256
  store i32 %v1_e224, i32* %r3.global-to-local, align 4
  %v4_e228 = mul nuw nsw i32 %v1_e224, 256
  %v5_e228 = or i32 %v4_e228, %v3_e220
  store i32 %v5_e228, i32* %ip.global-to-local, align 4
  store i32 %v2_de54, i32* @lr, align 4
  store i32 %v5_e228, i32* %r2.global-to-local, align 4
  %v0_e238 = load i32, i32* @r8, align 4
  %v1_e238 = inttoptr i32 %v0_e238 to i32*
  %v2_e238 = load i32, i32* %v1_e238, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_e240 = inttoptr i32 %v5_e228 to i8*
  store i8* %v6_e240, i8** %stack_var_-42, align 4
  %v6_e244 = call i32 @function_11cc4(i32 %v2_e238, i32 %v2_e1e0, i32 %v5_e228, i32 16384)
  store i32 %v2_de54, i32* %r2.global-to-local, align 4
  %v3_e24c = load i8*, i8** %stack_var_-42, align 4
  %v3_e250 = icmp eq i8* %v3_e24c, null
  br i1 %v3_e250, label %dec_label_pc_dd28, label %dec_label_pc_e258

dec_label_pc_e258:                                ; preds = %dec_label_pc_e204
  %v4_e24c = ptrtoint i8* %v3_e24c to i32
  %v5_e25c = call i32 @function_82e8(i32* nonnull %stack_var_-1432, i32 %v4_e24c, i32 %v2_de54)
  br label %dec_label_pc_dd28

; uselistorder directives
  uselistorder i8* %v3_e24c, { 1, 0 }
  uselistorder i32 %v5_e228, { 1, 0, 2, 3 }
  uselistorder i32 %v4_e21c, { 1, 0 }
  uselistorder i32 %v7_e1f0, { 1, 0 }
  uselistorder i32 %v5_e1b0, { 1, 0, 3, 2 }
  uselistorder i32 %v3_dfcc, { 3, 2, 1, 0 }
  uselistorder i32 %v4_df9c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_df84, { 1, 0 }
  uselistorder i32 %v2_df28, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_de68, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-1436.1, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_de50, { 1, 0, 2 }
  uselistorder i32 %v5_de1c, { 1, 2, 0 }
  uselistorder i32 %v2_dd68, { 2, 1, 0 }
  uselistorder i32 %v1_dd58, { 1, 2, 0 }
  uselistorder i32 %v1_dd3c, { 1, 2, 0 }
  uselistorder i32 %stack_var_-1436.0, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v2_e054, { 1, 0, 2, 3 }
  uselistorder i32 %v2_e038, { 3, 0, 5, 4, 2, 1 }
  uselistorder i32 %v2_e030, { 1, 0 }
  uselistorder i32 %v2_de54, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_dd24, { 1, 0, 2 }
  uselistorder i32 %v2_dbc8, { 0, 12, 1, 13, 2, 11, 3, 10, 4, 5, 9, 8, 6, 14, 7, 15 }
  uselistorder i32 %v2_dbb4, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v0_db30, { 1, 0 }
  uselistorder i32 %v2_dae0, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-152, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i8** %stack_var_-42, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 30, 34, 32, 33, 25, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 7, 8, 9, 5, 6, 10, 11 }
  uselistorder i32* @global_var_1f258.80, { 1, 2, 0 }
  uselistorder i8* null, { 0, 2, 1 }
  uselistorder i32 16386, { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint (i8** @global_var_1f25c.92 to i32), { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1f25c.92 to i8*), { 0, 1, 3, 2 }
  uselistorder i32* inttoptr (i32 127108 to i32*), { 1, 2, 3, 4, 0 }
  uselistorder i32 (i32)* @function_d9e0, { 1, 0 }
  uselistorder i32 (i32)* @function_cef8, { 1, 0 }
  uselistorder i32 (i32)* @function_85e0, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_e360, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_d7fc, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_d95c.70 to i32), { 0, 2, 1 }
  uselistorder i32 ptrtoint (i16** @global_var_212e4.76 to i32), { 0, 1, 3, 2 }
  uselistorder i32 (i32, i32)* @function_11ea0, { 1, 0 }
  uselistorder label %dec_label_pc_e104, { 1, 0 }
  uselistorder label %dec_label_pc_e0fc, { 1, 0 }
  uselistorder label %bb42, { 1, 0 }
  uselistorder label %dec_label_pc_de64, { 2, 1, 0 }
  uselistorder label %bb40, { 1, 0 }
  uselistorder label %dec_label_pc_dda8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dd98, { 1, 0 }
  uselistorder label %dec_label_pc_dd28, { 7, 1, 8, 9, 2, 0, 10, 3, 11, 12, 4, 5, 13, 6, 14 }
  uselistorder label %dec_label_pc_db88, { 2, 0, 1 }
}

define i32 @function_e280(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e280:
  %cpsr_c.global-to-local = alloca i1, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v0_e280 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e280, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_e280
  %v2_e280 = load i32, i32* @r8, align 4
  %v3_e280 = icmp slt i32 %v2_e280, 0
  store i1 %v3_e280, i1* %cpsr_c.global-to-local, align 1
  %v4_e280 = mul i32 %v2_e280, 2
  %v5_e280 = and i32 %v4_e280, %arg1
  call void @__pseudo_branch(i32 %v5_e280)
  %v0_e284.pr = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e284.pr, label %.thread, label %.thread1

.thread:                                          ; preds = %bb
  %v2_e284 = load i32, i32* @r4, align 4
  %v3_e284 = icmp slt i32 %v2_e284, 0
  store i1 %v3_e284, i1* %cpsr_c.global-to-local, align 1
  %v4_e284 = mul i32 %v2_e284, 2
  %v5_e284 = and i32 %v4_e284, %arg1
  call void @__pseudo_branch(i32 %v5_e284)
  %v0_e288.pr.pr = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e288.pr.pr, label %bb3, label %.thread1

bb3:                                              ; preds = %.thread
  %v2_e288 = load i32, i32* @ip, align 4
  %v4_e288 = add i32 %arg2, -1
  %v5_e288 = shl i32 1, %v4_e288
  %v6_e288 = and i32 %v2_e288, %v5_e288
  %v7_e288 = icmp ne i32 %v6_e288, 0
  store i1 %v7_e288, i1* %cpsr_c.global-to-local, align 1
  %v8_e288 = ashr i32 %v2_e288, %arg2
  %v9_e288 = and i32 %v8_e288, %arg1
  call void @__pseudo_branch(i32 %v9_e288)
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_e280, %bb, %.thread, %bb3
  %v0_e28c = load i1, i1* %cpsr_c.global-to-local, align 1
  call void @__pseudo_cond_branch(i1 %v0_e28c, i32 -22311616)
  %v0_e294 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e294, label %bb4, label %.thread2

bb4:                                              ; preds = %.thread1
  %v2_e294 = load i32, i32* @r8, align 4
  %v4_e294 = add i32 %arg2, -1
  %v5_e294 = shl i32 1, %v4_e294
  %v6_e294 = and i32 %v2_e294, %v5_e294
  %v7_e294 = icmp ne i32 %v6_e294, 0
  store i1 %v7_e294, i1* %cpsr_c.global-to-local, align 1
  %v8_e294 = ashr i32 %v2_e294, %arg2
  %v9_e294 = and i32 %v8_e294, %arg1
  call void @__pseudo_branch(i32 %v9_e294)
  %v0_e298.pr = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e298.pr, label %bb5, label %.thread2

bb5:                                              ; preds = %bb4
  %v2_e298 = load i32, i32* @r4, align 4
  %v3_e298 = and i32 %v2_e298, 8192
  %v4_e298 = icmp ne i32 %v3_e298, 0
  store i1 %v4_e298, i1* %cpsr_c.global-to-local, align 1
  br label %.thread2

.thread2:                                         ; preds = %.thread1, %bb4, %bb5
  %v7_e298 = load i32, i32* @r0, align 4
  ret i32 %v7_e298

; uselistorder directives
  uselistorder i32 %v2_e294, { 1, 0 }
  uselistorder i32 %v2_e288, { 1, 0 }
  uselistorder i1* %cpsr_c.global-to-local, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder label %.thread2, { 2, 1, 0 }
  uselistorder label %.thread1, { 3, 2, 1, 0 }
}

define i32 @function_e29c() local_unnamed_addr {
dec_label_pc_e29c:
  %v2_e2a8 = load i32, i32* @global_var_1f260.100, align 4
  %v2_e2ac = load i32, i32* @global_var_1f26c.102, align 4
  %v4_e2b8 = mul i32 %v2_e2a8, 2048
  %v5_e2b8 = xor i32 %v4_e2b8, %v2_e2a8
  store i32 %v5_e2b8, i32* @r3, align 4
  %v4_e2bc = udiv i32 %v2_e2ac, 524288
  %v5_e2bc = xor i32 %v4_e2bc, %v2_e2ac
  %v2_e2c0 = load i32, i32* @global_var_1f264.104, align 4
  %v2_e2c4 = load i32, i32* @global_var_1f268.106, align 4
  %v2_e2c8 = xor i32 %v5_e2bc, %v5_e2b8
  %v4_e2cc = udiv i32 %v5_e2b8, 256
  %v5_e2cc = xor i32 %v2_e2c8, %v4_e2cc
  store i32 %v2_e2c0, i32* @global_var_1f260.100, align 4
  store i32 %v2_e2c4, i32* @global_var_1f264.104, align 4
  store i32 %v2_e2ac, i32* @global_var_1f268.106, align 4
  store i32 %v5_e2cc, i32* @global_var_1f26c.102, align 4
  ret i32 %v5_e2cc

; uselistorder directives
  uselistorder i32 %v2_e2ac, { 2, 1, 0 }
  uselistorder i32 %v2_e2a8, { 1, 0 }
}

define i32 @function_e2f8(i32 %arg1) local_unnamed_addr {
dec_label_pc_e2f8:
  %v2_e304 = call i32 @function_11260(i32* null)
  store i32 %v2_e304, i32* @r0, align 4
  store i32 %v2_e304, i32* @global_var_1f260.100, align 4
  %v0_e310 = call i32 @function_1124c()
  store i32 %v0_e310, i32* @r0, align 4
  %v0_e318 = call i32 @function_111a4()
  %v2_e320 = xor i32 %v0_e310, %v0_e318
  store i32 %v2_e320, i32* @global_var_1f264.104, align 4
  %v1_e328 = call i32 @function_11a24(i32 %v2_e320)
  %v2_e32c = load i32, i32* @global_var_1f264.104, align 4
  %v2_e338 = xor i32 %v2_e32c, %v1_e328
  store i32 %v2_e338, i32* @global_var_1f26c.102, align 4
  store i32 %v1_e328, i32* @global_var_1f268.106, align 4
  ret i32 %v1_e328

; uselistorder directives
  uselistorder i32 %v1_e328, { 1, 2, 0 }
  uselistorder i32 ()* @function_111a4, { 2, 1, 0 }
}

define i32 @function_e360(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e360:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_e360 = load i32, i32* @r4, align 4
  %v6_e360 = load i32, i32* @r5, align 4
  %v9_e360 = load i32, i32* @r6, align 4
  %v12_e360 = load i32, i32* @r7, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_e374 = call i32 @function_104ec(i32 33)
  %v3_e380 = call i32 @function_10428(i32 33, i32* null)
  store i32 %v3_e380, i32* @r1, align 4
  %v2_e38c = bitcast i32* %stack_var_-72 to i8*
  %v3_e38c = call i32 @function_11b20(i8* %v2_e38c, i32 %v3_e380)
  %v2_e390 = icmp eq i32 %arg2, 0
  br i1 %v2_e390, label %dec_label_pc_e40c, label %dec_label_pc_e398

dec_label_pc_e398:                                ; preds = %dec_label_pc_e360
  store i32 ptrtoint (i32* @global_var_1f260.100 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f264.104 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f268.106 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1f26c.102 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v2_e3f0 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_e3ac

dec_label_pc_e3ac:                                ; preds = %dec_label_pc_e3ac.dec_label_pc_e3ac_crit_edge, %dec_label_pc_e398
  %v1_e3d0 = phi i32 [ %v1_e3d0.pre, %dec_label_pc_e3ac.dec_label_pc_e3ac_crit_edge ], [ ptrtoint (i32* @global_var_1f260.100 to i32), %dec_label_pc_e398 ]
  %v2_e3ac = load i32, i32* @global_var_1f26c.102, align 4
  store i32 %v2_e3ac, i32* %r2.global-to-local, align 4
  %v2_e3b0 = load i32, i32* @global_var_1f260.100, align 4
  %v4_e3b4 = udiv i32 %v2_e3ac, 524288
  %v5_e3b4 = xor i32 %v4_e3b4, %v2_e3ac
  %v4_e3b8 = mul i32 %v2_e3b0, 2048
  %v5_e3b8 = xor i32 %v4_e3b8, %v2_e3b0
  %v2_e3bc = xor i32 %v5_e3b4, %v5_e3b8
  %v2_e3c0 = load i32, i32* @global_var_1f264.104, align 4
  %v2_e3c4 = load i32, i32* @global_var_1f268.106, align 4
  store i32 %v2_e3c4, i32* %ip.global-to-local, align 4
  %v4_e3c8 = udiv i32 %v5_e3b8, 256
  %v5_e3c8 = xor i32 %v2_e3bc, %v4_e3c8
  store i32 %v5_e3c8, i32* @r4, align 4
  %v2_e3d0 = inttoptr i32 %v1_e3d0 to i32*
  store i32 %v2_e3c0, i32* %v2_e3d0, align 4
  %v0_e3d4 = load i32, i32* %ip.global-to-local, align 4
  %v1_e3d4 = load i32, i32* %r8.global-to-local, align 4
  %v2_e3d4 = inttoptr i32 %v1_e3d4 to i32*
  store i32 %v0_e3d4, i32* %v2_e3d4, align 4
  %v0_e3d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_e3d8 = load i32, i32* @r7, align 4
  %v2_e3d8 = inttoptr i32 %v1_e3d8 to i32*
  store i32 %v0_e3d8, i32* %v2_e3d8, align 4
  %v0_e3dc = load i32, i32* @r4, align 4
  %v1_e3dc = load i32, i32* @r6, align 4
  %v2_e3dc = inttoptr i32 %v1_e3dc to i32*
  store i32 %v0_e3dc, i32* %v2_e3dc, align 4
  %v2_e3e0 = call i32 @function_10b20(i8* %v2_e38c)
  %v0_e3e8 = load i32, i32* @r4, align 4
  %v2_e3ec = call i32 @function_11178(i32 %v0_e3e8, i32 %v2_e3e0)
  %v2_e3f4 = add i32 %v2_e3e0, %v2_e3f0
  %v1_e3f8 = add i32 %v2_e3f4, -32
  %v2_e3f8 = inttoptr i32 %v1_e3f8 to i8*
  %v3_e3f8 = load i8, i8* %v2_e3f8, align 1
  %v2_e3fc = load i32, i32* @r5, align 4
  %v3_e3fc = load i32, i32* %fp.global-to-local, align 4
  %v4_e3fc = add i32 %v3_e3fc, %v2_e3fc
  %v5_e3fc = inttoptr i32 %v4_e3fc to i8*
  store i8 %v3_e3f8, i8* %v5_e3fc, align 1
  %v0_e400 = load i32, i32* @r5, align 4
  %v1_e400 = add i32 %v0_e400, 1
  store i32 %v1_e400, i32* @r5, align 4
  %v1_e404 = load i32, i32* %sb.global-to-local, align 4
  %v9_e404 = icmp eq i32 %v1_e400, %v1_e404
  br i1 %v9_e404, label %dec_label_pc_e40c, label %dec_label_pc_e3ac.dec_label_pc_e3ac_crit_edge

dec_label_pc_e3ac.dec_label_pc_e3ac_crit_edge:    ; preds = %dec_label_pc_e3ac
  %v1_e3d0.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_e3ac

dec_label_pc_e40c:                                ; preds = %dec_label_pc_e3ac, %dec_label_pc_e360
  %v1_e410 = call i32 @function_1044c(i32 33)
  store i32 %v3_e360, i32* @r4, align 4
  store i32 %v6_e360, i32* @r5, align 4
  store i32 %v9_e360, i32* @r6, align 4
  store i32 %v12_e360, i32* @r7, align 4
  ret i32 %v1_e410

; uselistorder directives
  uselistorder i32 %v2_e3b0, { 1, 0 }
  uselistorder i32 %v2_e3ac, { 1, 0, 2 }
}

define i32 @function_e430(i16* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e430:
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_e430 = load i32, i32* %r1.global-to-local, align 4
  %v3_e434 = load i32, i32* @r4, align 4
  store i32 %v3_e434, i32* %stack_var_-28, align 4
  %v0_e438 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e438, i32* %r5.global-to-local, align 4
  %tmp16 = icmp slt i32 %v0_e430, 1
  br i1 %tmp16, label %dec_label_pc_e4e0, label %dec_label_pc_e440

dec_label_pc_e440:                                ; preds = %dec_label_pc_e430
  store i32 ptrtoint (i32* @global_var_1f26c.102 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f268.106 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f264.104 to i32), i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f260.100 to i32), i32* %r6.global-to-local, align 4
  %v2_e450 = load i32, i32* @global_var_1f26c.102, align 4
  store i32 %v2_e450, i32* %lr.global-to-local, align 4
  %v2_e454 = load i32, i32* @global_var_1f268.106, align 4
  store i32 %v2_e454, i32* %r4.global-to-local, align 4
  %v2_e458 = load i32, i32* @global_var_1f264.104, align 4
  store i32 %v2_e458, i32* %r0.global-to-local, align 4
  %v2_e45c = load i32, i32* @global_var_1f260.100, align 4
  br label %dec_label_pc_e480

dec_label_pc_e464:                                ; preds = %dec_label_pc_e4a0
  %v1_e464 = trunc i32 %v5_e490 to i16
  %v3_e464 = inttoptr i32 %v9_e494 to i16*
  store i16 %v1_e464, i16* %v3_e464, align 2
  %v4_e464 = load i32, i32* %r5.global-to-local, align 4
  %v5_e464 = add i32 %v4_e464, -2
  store i32 %v5_e464, i32* %r5.global-to-local, align 4
  %v0_e468.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e468

dec_label_pc_e468:                                ; preds = %.thread, %dec_label_pc_e464
  %v0_e468 = phi i32 [ %v9_e498, %.thread ], [ %v0_e468.pre, %dec_label_pc_e464 ]
  %v2_e4645 = phi i32 [ %v12_e494, %.thread ], [ %v5_e464, %dec_label_pc_e464 ]
  %tmp17 = icmp slt i32 %v0_e468, 1
  br i1 %tmp17, label %dec_label_pc_e4e8, label %dec_label_pc_e474

dec_label_pc_e474:                                ; preds = %dec_label_pc_e468
  %v0_e46c = load i32, i32* %r0.global-to-local, align 4
  %v0_e474 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e474, i32* %r0.global-to-local, align 4
  %v0_e478 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v0_e478, i32* %r4.global-to-local, align 4
  %v0_e47c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_e47c, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_e480

dec_label_pc_e480:                                ; preds = %dec_label_pc_e440, %dec_label_pc_e474
  %v0_e4cc = phi i32 [ %v2_e458, %dec_label_pc_e440 ], [ %v0_e474, %dec_label_pc_e474 ]
  %v9_e494 = phi i32 [ %v0_e438, %dec_label_pc_e440 ], [ %v2_e4645, %dec_label_pc_e474 ]
  %v0_e4ac = phi i32 [ %v0_e430, %dec_label_pc_e440 ], [ %v0_e468, %dec_label_pc_e474 ]
  %v0_e4c0 = phi i32 [ %v2_e450, %dec_label_pc_e440 ], [ %v0_e47c, %dec_label_pc_e474 ]
  %v0_e4bc = phi i32 [ %v2_e45c, %dec_label_pc_e440 ], [ %v0_e46c, %dec_label_pc_e474 ]
  %v4_e480 = mul i32 %v0_e4bc, 2048
  %v5_e480 = xor i32 %v4_e480, %v0_e4bc
  %v4_e484 = udiv i32 %v0_e4c0, 524288
  %v5_e484 = xor i32 %v4_e484, %v0_e4c0
  %v2_e488 = xor i32 %v5_e484, %v5_e480
  %v4_e490 = udiv i32 %v5_e480, 256
  %v5_e490 = xor i32 %v2_e488, %v4_e490
  store i32 %v5_e490, i32* %r3.global-to-local, align 4
  %v7_e494 = icmp sgt i32 %v0_e4ac, 3
  br i1 %v7_e494, label %.thread, label %dec_label_pc_e4a0

.thread:                                          ; preds = %dec_label_pc_e480
  %v10_e494 = inttoptr i32 %v9_e494 to i32*
  store i32 %v5_e490, i32* %v10_e494, align 4
  %v11_e494 = load i32, i32* %r5.global-to-local, align 4
  %v12_e494 = add i32 %v11_e494, 4
  store i32 %v12_e494, i32* %r5.global-to-local, align 4
  %v8_e498 = load i32, i32* %r1.global-to-local, align 4
  %v9_e498 = add i32 %v8_e498, -4
  store i32 %v9_e498, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e468

dec_label_pc_e4a0:                                ; preds = %dec_label_pc_e480
  %v7_e4ac = icmp eq i32 %v0_e4ac, 1
  store i32 %v5_e490, i32* %r3.global-to-local, align 4
  %v1_e4b4 = add i32 %v0_e4ac, -2
  store i32 %v1_e4b4, i32* %r1.global-to-local, align 4
  br i1 %v7_e4ac, label %dec_label_pc_e4bc, label %dec_label_pc_e464

dec_label_pc_e4bc:                                ; preds = %dec_label_pc_e4a0
  store i32 %v5_e490, i32* %r3.global-to-local, align 4
  %v1_e4cc = load i32, i32* %r6.global-to-local, align 4
  %v2_e4cc = inttoptr i32 %v1_e4cc to i32*
  store i32 %v0_e4cc, i32* %v2_e4cc, align 4
  %v0_e4d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_e4d0 = load i32, i32* %r7.global-to-local, align 4
  %v2_e4d0 = inttoptr i32 %v1_e4d0 to i32*
  store i32 %v0_e4d0, i32* %v2_e4d0, align 4
  %v0_e4d4 = load i32, i32* %lr.global-to-local, align 4
  %v1_e4d4 = load i32, i32* %r8.global-to-local, align 4
  %v2_e4d4 = inttoptr i32 %v1_e4d4 to i32*
  store i32 %v0_e4d4, i32* %v2_e4d4, align 4
  %v0_e4d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_e4d8 = load i32, i32* %sl.global-to-local, align 4
  %v2_e4d8 = inttoptr i32 %v1_e4d8 to i32*
  store i32 %v0_e4d8, i32* %v2_e4d8, align 4
  %v0_e4dc = load i32, i32* %r3.global-to-local, align 4
  %v1_e4dc = trunc i32 %v0_e4dc to i8
  %v2_e4dc = load i32, i32* %r5.global-to-local, align 4
  %v3_e4dc = inttoptr i32 %v2_e4dc to i8*
  store i8 %v1_e4dc, i8* %v3_e4dc, align 1
  br label %dec_label_pc_e4e0

dec_label_pc_e4e0:                                ; preds = %dec_label_pc_e430, %dec_label_pc_e4e8, %dec_label_pc_e4bc
  %v2_e4e0 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_e4e0, i32* @r4, align 4
  %v1_e4e4 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_e4e4

dec_label_pc_e4e8:                                ; preds = %dec_label_pc_e468
  %v0_e4e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_e4e8 = load i32, i32* %sl.global-to-local, align 4
  %v2_e4e8 = inttoptr i32 %v1_e4e8 to i32*
  store i32 %v0_e4e8, i32* %v2_e4e8, align 4
  %v0_e4ec = load i32, i32* %lr.global-to-local, align 4
  %v1_e4ec = load i32, i32* %r8.global-to-local, align 4
  %v2_e4ec = inttoptr i32 %v1_e4ec to i32*
  store i32 %v0_e4ec, i32* %v2_e4ec, align 4
  %v0_e4f0 = load i32, i32* %r4.global-to-local, align 4
  %v1_e4f0 = load i32, i32* %r7.global-to-local, align 4
  %v2_e4f0 = inttoptr i32 %v1_e4f0 to i32*
  store i32 %v0_e4f0, i32* %v2_e4f0, align 4
  %v0_e4f4 = load i32, i32* %r0.global-to-local, align 4
  %v1_e4f4 = load i32, i32* %r6.global-to-local, align 4
  %v2_e4f4 = inttoptr i32 %v1_e4f4 to i32*
  store i32 %v0_e4f4, i32* %v2_e4f4, align 4
  br label %dec_label_pc_e4e0

; uselistorder directives
  uselistorder i32 %v9_e498, { 1, 0 }
  uselistorder i32 %v12_e494, { 1, 0 }
  uselistorder i32 %v5_e490, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v0_e4bc, { 1, 0 }
  uselistorder i32 %v0_e4c0, { 1, 0 }
  uselistorder i32 %v0_e4ac, { 1, 0, 2 }
  uselistorder i32 %v0_e468, { 1, 0 }
  uselistorder i32 %v0_e430, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 4, 0, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r3.global-to-local, { 4, 0, 1, 2, 3, 6, 5 }
  uselistorder i32* %r1.global-to-local, { 3, 5, 4, 2, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 4, 3, 2, 5, 6, 0, 1 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* @global_var_1f260.100, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1f260.100 to i32), { 1, 0, 2 }
  uselistorder i32* @global_var_1f264.104, { 2, 3, 6, 4, 1, 0, 5 }
  uselistorder i32* @global_var_1f268.106, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1f26c.102, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_e4e0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e480, { 1, 0 }
}

define i32 @function_e50c(i32 %arg1) local_unnamed_addr {
dec_label_pc_e50c:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_e50c = load i32, i32* @r4, align 4
  store i32 %v3_e50c, i32* %stack_var_-8, align 4
  %v0_e510 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e510, i32* @r4, align 4
  %v2_e510 = icmp eq i32 %v0_e510, 0
  br i1 %v2_e510, label %dec_label_pc_e52c, label %dec_label_pc_e518

dec_label_pc_e518:                                ; preds = %dec_label_pc_e50c
  %v1_e518 = add i32 %v0_e510, 4
  %v2_e518 = inttoptr i32 %v1_e518 to i32*
  %v3_e518 = load i32, i32* %v2_e518, align 4
  store i32 %v3_e518, i32* %r0.global-to-local, align 4
  store i32 58660, i32* @lr, align 4
  %v1_e520 = icmp ne i32 %v3_e518, 0
  call void @__pseudo_cond_branch(i1 %v1_e520, i32 ptrtoint (i32* @global_var_130a8.21 to i32))
  %v0_e524 = load i32, i32* @r4, align 4
  store i32 %v0_e524, i32* @r0, align 4
  %v0_e528 = call i32 @function_130a8()
  store i32 %v0_e528, i32* %r0.global-to-local, align 4
  %v2_e52c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_e52c

dec_label_pc_e52c:                                ; preds = %dec_label_pc_e50c, %dec_label_pc_e518
  %v1_e530 = phi i32 [ 0, %dec_label_pc_e50c ], [ %v0_e528, %dec_label_pc_e518 ]
  %v2_e52c = phi i32 [ %v3_e50c, %dec_label_pc_e50c ], [ %v2_e52c.pre, %dec_label_pc_e518 ]
  store i32 %v2_e52c, i32* @r4, align 4
  ret i32 %v1_e530

; uselistorder directives
  uselistorder i32 %v0_e510, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_e52c, { 1, 0 }
}

define i32 @function_e534(i32 %arg1) local_unnamed_addr {
dec_label_pc_e534:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp79 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-4280 = alloca i32, align 4
  %stack_var_-4292 = alloca i16, align 2
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-196 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-2230 = alloca i32, align 4
  %stack_var_-2244 = alloca i16, align 2
  %stack_var_-2232 = alloca i32, align 4
  %v3_e534 = load i32, i32* @r4, align 4
  %v9_e534 = load i32, i32* @r6, align 4
  %v12_e534 = load i32, i32* @r7, align 4
  %v15_e534 = load i32, i32* @r8, align 4
  %v18_e534 = load i32, i32* @sb, align 4
  %v21_e534 = load i32, i32* @sl, align 4
  %v24_e534 = load i32, i32* @fp, align 4
  %v27_e534 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_e54c = call i32 @function_1295c(i32 1, i32 8)
  store i32 %v2_e54c, i32* @fp, align 4
  %v0_e554 = load i32, i32* @r5, align 4
  store i32 %v0_e554, i32* %r0.global-to-local, align 4
  %v1_e558 = inttoptr i32 %v0_e554 to i8*
  %v2_e558 = call i32 @function_10b20(i8* %v1_e558)
  %v2_e560 = ptrtoint i16* %stack_var_-2244 to i32
  store i32 %v2_e560, i32* @sl, align 4
  %v2_e564 = ptrtoint i32* %stack_var_-2232 to i32
  store i32 %v2_e564, i32* @sb, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_e56c = add i32 %v2_e558, 1
  store i32 %v1_e56c, i32* %r0.global-to-local, align 4
  %v2_e570 = ptrtoint i32* %stack_var_-2230 to i32
  store i32 %v2_e570, i32* %r2.global-to-local, align 4
  store i32 %v2_e564, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 %v1_e56c, i32* %r3.global-to-local, align 4
  %v2_e5ac146 = icmp eq i32 %v1_e56c, 0
  store i1 %v2_e5ac146, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @lr, align 4
  %v1_e5b4147 = add i32 %v2_e570, -1
  store i32 %v1_e5b4147, i32* %r1.global-to-local, align 4
  %tmp116148 = icmp slt i32 %v1_e56c, 1
  br i1 %tmp116148, label %dec_label_pc_e5bc, label %dec_label_pc_e580

dec_label_pc_e580:                                ; preds = %dec_label_pc_e534, %bb115
  %v0_e580151 = phi i32 [ %v1_e5a0, %bb115 ], [ 0, %dec_label_pc_e534 ]
  %v1_e58c150.off0 = phi i8 [ %extract.t152, %bb115 ], [ 0, %dec_label_pc_e534 ]
  %v2_e5c0149 = phi i32 [ %v1_e5a4, %bb115 ], [ %v2_e570, %dec_label_pc_e534 ]
  %v1_e580 = load i32, i32* @r5, align 4
  %v2_e580 = add i32 %v1_e580, %v0_e580151
  %v3_e580 = inttoptr i32 %v2_e580 to i8*
  %v4_e580 = load i8, i8* %v3_e580, align 1
  %v6_e580 = zext i8 %v4_e580 to i32
  store i32 %v6_e580, i32* %r3.global-to-local, align 4
  %v2_e584 = icmp eq i8 %v4_e580, 0
  store i1 %v2_e584, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e584, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_e580
  %v8_e588 = icmp eq i8 %v4_e580, 46
  store i1 %v8_e588, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e588, label %.thread, label %.thread7

.thread:                                          ; preds = %dec_label_pc_e580, %bb
  %v3_e58c = load i32, i32* %r6.global-to-local, align 4
  %v4_e58c = inttoptr i32 %v3_e58c to i8*
  store i8 %v1_e58c150.off0, i8* %v4_e58c, align 1
  %v0_e590.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e590.pr, label %.thread9.thread13, label %.thread..thread7_crit_edge

.thread..thread7_crit_edge:                       ; preds = %.thread
  %v1_e590.pre = load i32, i32* %r3.global-to-local, align 4
  %v3_e590.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v1_e590.pre to i8
  br label %.thread7

.thread7:                                         ; preds = %.thread..thread7_crit_edge, %bb
  %v3_e590 = phi i32 [ %v3_e590.pre, %.thread..thread7_crit_edge ], [ %v2_e5c0149, %bb ]
  %v1_e590.off0 = phi i8 [ %extract.t, %.thread..thread7_crit_edge ], [ %v4_e580, %bb ]
  %v4_e590 = add i32 %v3_e590, -1
  %v5_e590 = inttoptr i32 %v4_e590 to i8*
  store i8 %v1_e590.off0, i8* %v5_e590, align 1
  %v0_e594.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e594.pr, label %.thread9, label %.thread12

.thread9.thread13:                                ; preds = %.thread
  %v1_e594 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v1_e594, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %bb115

.thread9:                                         ; preds = %.thread7
  %v1_e59411 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v1_e59411, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %bb115

.thread12:                                        ; preds = %.thread7
  %v1_e59c = load i32, i32* @lr, align 4
  %v2_e59c = urem i32 %v1_e59c, 256
  store i32 %v2_e59c, i32* %r4.global-to-local, align 4
  br label %bb115

bb115:                                            ; preds = %.thread9, %.thread9.thread13, %.thread12
  %v0_e5b033 = phi i32 [ 0, %.thread9.thread13 ], [ 0, %.thread9 ], [ %v2_e59c, %.thread12 ]
  %v0_e5a0 = load i32, i32* %ip.global-to-local, align 4
  %v1_e5a0 = add i32 %v0_e5a0, 1
  store i32 %v1_e5a0, i32* %ip.global-to-local, align 4
  %v0_e5a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_e5a4 = add i32 %v0_e5a4, 1
  store i32 %v1_e5a4, i32* %r2.global-to-local, align 4
  %v1_e5a8.pre = load i32, i32* %r0.global-to-local, align 4
  %v2_e5a8 = sub i32 %v1_e5a8.pre, %v1_e5a0
  store i32 %v2_e5a8, i32* %r3.global-to-local, align 4
  %v2_e5ac = icmp eq i32 %v2_e5a8, 0
  store i1 %v2_e5ac, i1* %cpsr_z.global-to-local, align 1
  %v1_e5b0 = add nuw nsw i32 %v0_e5b033, 1
  store i32 %v1_e5b0, i32* @lr, align 4
  store i32 %v0_e5a4, i32* %r1.global-to-local, align 4
  %tmp116 = icmp slt i32 %v2_e5a8, 1
  %extract.t152 = trunc i32 %v0_e5b033 to i8
  br i1 %tmp116, label %dec_label_pc_e5bc, label %dec_label_pc_e580

dec_label_pc_e5bc:                                ; preds = %bb115, %dec_label_pc_e534
  %v1_e5b4.lcssa = phi i32 [ %v1_e5b4147, %dec_label_pc_e534 ], [ %v0_e5a4, %bb115 ]
  store i32 0, i32* @r4, align 4
  %v4_e5c0 = inttoptr i32 %v1_e5b4.lcssa to i8*
  store i8 0, i8* %v4_e5c0, align 1
  store i32 %v2_e564, i32* %r0.global-to-local, align 4
  %v1_e5c8 = bitcast i32* %stack_var_-2232 to i8*
  %v2_e5c8 = call i32 @function_10b20(i8* %v1_e5c8)
  %v2_e5cc = ptrtoint i32* %stack_var_-216 to i32
  store i32 %v2_e5cc, i32* %r1.global-to-local, align 4
  %v1_e5d0 = load i32, i32* @sb, align 4
  %v2_e5d0 = add i32 %v1_e5d0, %v2_e5c8
  store i32 %v2_e5d0, i32* @r5, align 4
  %v0_e5d8 = load i32, i32* @r4, align 4
  store i32 %v0_e5d8, i32* %stack_var_-68, align 4
  store i32 %v2_e564, i32* %r0.global-to-local, align 4
  %v2_e5e8 = call i32 @function_10b20(i8* %v1_e5c8)
  %v1_e5ec = add i32 %v2_e5e8, 17
  store i32 %v1_e5ec, i32* %r0.global-to-local, align 4
  %v0_e5f4 = call i32 @function_e29c()
  %v1_e5f4 = sext i32 %v0_e5f4 to i64
  store i32 -2147450879, i32* %r3.global-to-local, align 4
  %v5_e600 = mul nuw nsw i64 %v1_e5f4, 2147516417
  %v6_e600 = udiv i64 %v5_e600, 4294967296
  %v7_e600 = trunc i64 %v6_e600 to i32
  %v8_e600 = trunc i64 %v5_e600 to i32
  store i32 %v8_e600, i32* @lr, align 4
  store i32 %v7_e600, i32* %r2.global-to-local, align 4
  %v5_e6044 = udiv i64 %v5_e600, 140737488355328
  %v5_e604 = trunc i64 %v5_e6044 to i32
  %v6_e604 = add i32 %v5_e604, %v0_e5f4
  store i32 16, i32* @r1, align 4
  %v6_e610 = urem i32 %v6_e604, 65536
  store i32 %v6_e610, i32* %ip.global-to-local, align 4
  %v2_e618 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_e618, i32* @r0, align 4
  %v5_e61c = trunc i32 %v6_e604 to i16
  %v0_e620 = call i32 @function_10bb4()
  store i32 %v0_e620, i32* %r0.global-to-local, align 4
  store i32 13568, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-68, align 4
  store i32 256, i32* %r3.global-to-local, align 4
  %v0_e650 = load i32, i32* @r5, align 4
  %v1_e650 = add i32 %v0_e650, 1
  store i32 %v1_e650, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i16 %v5_e61c, i16* %stack_var_-2244, align 2
  %v4_e664 = inttoptr i32 %v1_e650 to i16*
  store i16 256, i16* %v4_e664, align 2
  %v0_e668 = load i32, i32* %r3.global-to-local, align 4
  %v1_e668 = trunc i32 %v0_e668 to i16
  %v2_e668 = load i32, i32* %r2.global-to-local, align 4
  %v3_e668 = add i32 %v2_e668, 2
  %v4_e668 = inttoptr i32 %v3_e668 to i16*
  store i16 %v1_e668, i16* %v4_e668, align 2
  store i32 -1, i32* %r6.global-to-local, align 4
  %v2_e700 = ptrtoint i32* %stack_var_-196 to i32
  %v2_e728 = ptrtoint i32* %stack_var_-40 to i32
  %v2_e754 = ptrtoint i32* %stack_var_-52 to i32
  %v2_e798 = ptrtoint i16* %stack_var_-4292 to i32
  %v2_e82c = ptrtoint i32* %stack_var_-4280 to i32
  %v1_e834 = bitcast i32* %stack_var_-4280 to i8*
  %v4_e858 = zext i16 %tmp79 to i32
  %v2_e85c = icmp eq i16 %tmp79, 0
  br label %dec_label_pc_e674

dec_label_pc_e674:                                ; preds = %dec_label_pc_e7e0, %dec_label_pc_e5bc
  %v1_e678 = phi i32 [ -1, %dec_label_pc_e5bc ], [ %v0_e674.pre, %dec_label_pc_e7e0 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_e5bc ], [ %v1_e7e0, %dec_label_pc_e7e0 ]
  store i32 %storemerge, i32* @r8, align 4
  %v7_e674 = icmp eq i32 %v1_e678, -1
  store i1 %v7_e674, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e674, label %bb118, label %bb117

bb117:                                            ; preds = %dec_label_pc_e674
  store i32 %v1_e678, i32* %r0.global-to-local, align 4
  br label %bb118

bb118:                                            ; preds = %dec_label_pc_e674, %bb117
  store i32 59008, i32* @lr, align 4
  %v1_e67c = xor i1 %v7_e674, true
  call void @__pseudo_cond_branch(i1 %v1_e67c, i32 ptrtoint (i32* @global_var_115e0.94 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_e68c = call i32 @function_11df4(i32 2, i32 2, i32 0)
  store i32 %v3_e68c, i32* %r0.global-to-local, align 4
  %v7_e690 = icmp eq i32 %v3_e68c, -1
  store i1 %v7_e690, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_e68c, i32* @r6, align 4
  br i1 %v7_e690, label %dec_label_pc_e820, label %dec_label_pc_e69c

dec_label_pc_e69c:                                ; preds = %bb118
  store i32 %v2_e618, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_e6a8 = call i32 @function_11bdc(i32 %v3_e68c, i32 %v2_e618, i32 16)
  store i32 %v3_e6a8, i32* %r0.global-to-local, align 4
  %v7_e6ac = icmp eq i32 %v3_e6a8, -1
  store i1 %v7_e6ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e6ac, label %dec_label_pc_e7e8, label %dec_label_pc_e6b4

dec_label_pc_e6b4:                                ; preds = %dec_label_pc_e69c
  %v0_e6b4 = load i32, i32* @r6, align 4
  store i32 %v0_e6b4, i32* %r0.global-to-local, align 4
  store i32 %v2_e560, i32* %r1.global-to-local, align 4
  store i32 %v1_e5ec, i32* %r2.global-to-local, align 4
  store i32 16384, i32* @r3, align 4
  %v4_e6c4 = call i32 @function_11d38(i32 %v0_e6b4, i32 %v2_e560, i32 %v1_e5ec, i32 16384)
  store i32 %v4_e6c4, i32* %r0.global-to-local, align 4
  %v7_e6c8 = icmp eq i32 %v4_e6c4, -1
  store i1 %v7_e6c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e6c8, label %dec_label_pc_e7e8, label %dec_label_pc_e6d0

dec_label_pc_e6d0:                                ; preds = %dec_label_pc_e6b4
  %v0_e6d0 = load i32, i32* @r6, align 4
  store i32 %v0_e6d0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_e6dc = call i32 @function_11414(i32 3, i32 %v0_e6d0)
  %v0_e6e0 = load i32, i32* @r6, align 4
  store i32 %v0_e6e0, i32* %r1.global-to-local, align 4
  %v1_e6e4 = or i32 %v2_e6dc, 2048
  store i32 %v1_e6e4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_e6ec = call i32 @function_11414(i32 4, i32 %v0_e6e0)
  store i32 %v2_e6ec, i32* %r0.global-to-local, align 4
  store i32 %v2_e5cc, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-196, align 4
  store i32 %v2_e700, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e708

dec_label_pc_e708:                                ; preds = %dec_label_pc_e708, %dec_label_pc_e6d0
  %v1_e70c = phi i32 [ %v1_e710, %dec_label_pc_e708 ], [ 4, %dec_label_pc_e6d0 ]
  store i32 0, i32* @r4, align 4
  %v3_e70c = add i32 %v1_e70c, %v2_e700
  %v4_e70c = inttoptr i32 %v3_e70c to i32*
  store i32 0, i32* %v4_e70c, align 4
  %v0_e710 = load i32, i32* %r3.global-to-local, align 4
  %v1_e710 = add i32 %v0_e710, 4
  store i32 %v1_e710, i32* %r3.global-to-local, align 4
  %v7_e714 = icmp eq i32 %v1_e710, 128
  br i1 %v7_e714, label %dec_label_pc_e71c, label %dec_label_pc_e708

dec_label_pc_e71c:                                ; preds = %dec_label_pc_e708
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_e71c = load i32, i32* @r6, align 4
  %v3_e71c = udiv i32 %v0_e71c, 32
  %v3_e724 = mul nuw nsw i32 %v3_e71c, 4
  store i32 %v3_e724, i32* %r3.global-to-local, align 4
  %v2_e72c = add i32 %v3_e724, %v2_e728
  store i32 %v2_e72c, i32* @r5, align 4
  %v1_e730 = add i32 %v2_e72c, -156
  %v2_e730 = inttoptr i32 %v1_e730 to i32*
  %v3_e730 = load i32, i32* %v2_e730, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_e738 = urem i32 %v0_e71c, 32
  store i32 %v1_e738, i32* @r7, align 4
  %v7_e73c = shl i32 1, %v1_e738
  %v8_e73c = or i32 %v3_e730, %v7_e73c
  store i32 5, i32* %ip.global-to-local, align 4
  store i32 %v8_e73c, i32* %v2_e730, align 4
  %v0_e74c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_e74c, i32* %stack_var_-52, align 4
  store i32 %v2_e754, i32* @lr, align 4
  store i32 %v2_e5cc, i32* @ip, align 4
  %v0_e75c = load i32, i32* @r6, align 4
  %v1_e75c = load i32, i32* %r3.global-to-local, align 4
  %v2_e75c = add i32 %v1_e75c, %v0_e75c
  store i32 %v2_e75c, i32* %r0.global-to-local, align 4
  %v0_e764 = load i32, i32* @r4, align 4
  store i32 %v0_e764, i32* %r2.global-to-local, align 4
  store i32 %v0_e764, i32* %r3.global-to-local, align 4
  %v5_e770 = call i32 @function_11304(i32 %v2_e75c, i32 %v2_e700, i32 %v0_e764, i32 %v0_e764, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_e770, i32* %r0.global-to-local, align 4
  %v7_e774 = icmp eq i32 %v5_e770, -1
  store i1 %v7_e774, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e774, label %dec_label_pc_e7f8, label %dec_label_pc_e77c

dec_label_pc_e77c:                                ; preds = %dec_label_pc_e71c
  %v1_e77c = load i32, i32* @r4, align 4
  %v9_e77c = icmp eq i32 %v5_e770, %v1_e77c
  store i1 %v9_e77c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e77c, label %dec_label_pc_e7d8, label %dec_label_pc_e784

dec_label_pc_e784:                                ; preds = %dec_label_pc_e77c
  %v0_e784 = load i32, i32* @r5, align 4
  %v1_e784 = add i32 %v0_e784, -156
  %v2_e784 = inttoptr i32 %v1_e784 to i32*
  %v3_e784 = load i32, i32* %v2_e784, align 4
  %v1_e788 = load i32, i32* @r7, align 4
  %v6_e788 = ashr i32 %v3_e784, %v1_e788
  store i32 %v6_e788, i32* %r3.global-to-local, align 4
  %v1_e78c = urem i32 %v6_e788, 2
  %v2_e78c = icmp eq i32 %v1_e78c, 0
  store i1 %v2_e78c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e78c, label %dec_label_pc_e7f8, label %dec_label_pc_e794

dec_label_pc_e794:                                ; preds = %dec_label_pc_e784
  store i32 %v2_e798, i32* @r5, align 4
  store i32 %v2_e798, i32* %r1.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e7a8 = load i32, i32* @r6, align 4
  store i32 %v0_e7a8, i32* %r0.global-to-local, align 4
  %v6_e7b4 = call i32 @function_11cfc(i32 %v0_e7a8, i32 %v2_e798, i32 2048, i32 16384, i32 %v1_e77c, i32 %v1_e77c)
  store i32 %v6_e7b4, i32* %r4.global-to-local, align 4
  %v0_e7bc = load i32, i32* @sb, align 4
  store i32 %v0_e7bc, i32* %r0.global-to-local, align 4
  %v1_e7c0 = inttoptr i32 %v0_e7bc to i8*
  %v2_e7c0 = call i32 @function_10b20(i8* %v1_e7c0)
  %v1_e7c4 = add i32 %v2_e7c0, 17
  store i32 %v1_e7c4, i32* %r0.global-to-local, align 4
  %v0_e7c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_e7c8 = icmp ult i32 %v0_e7c8, %v1_e7c4
  %v9_e7c8 = icmp eq i32 %v0_e7c8, %v1_e7c4
  store i1 %v9_e7c8, i1* %cpsr_z.global-to-local, align 1
  store i32 -4252, i32* @r4, align 4
  br i1 %v3_e7c8, label %dec_label_pc_e7d8, label %dec_label_pc_e82c

dec_label_pc_e7d8:                                ; preds = %dec_label_pc_e794, %dec_label_pc_e82c, %dec_label_pc_e858, %dec_label_pc_e77c, %dec_label_pc_e820
  %v0_e7d8 = load i32, i32* @r8, align 4
  %v7_e7d8 = icmp eq i32 %v0_e7d8, 5
  store i1 %v7_e7d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7d8, label %dec_label_pc_e7f8, label %dec_label_pc_e7e0

dec_label_pc_e7e0:                                ; preds = %dec_label_pc_e7e8, %dec_label_pc_e7d8
  %v0_e7e0 = phi i32 [ %v0_e7f0, %dec_label_pc_e7e8 ], [ %v0_e7d8, %dec_label_pc_e7d8 ]
  %v1_e7e0 = add i32 %v0_e7e0, 1
  %v0_e674.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e674

dec_label_pc_e7e8:                                ; preds = %dec_label_pc_e6b4, %dec_label_pc_e69c
  %v0_e7e8 = phi i32 [ %v4_e6c4, %dec_label_pc_e6b4 ], [ %v3_e6a8, %dec_label_pc_e69c ]
  %v1_e7e8 = add i32 %v0_e7e8, 2
  store i32 %v1_e7e8, i32* %r0.global-to-local, align 4
  %v1_e7ec = call i32 @function_13700(i32 %v1_e7e8)
  store i32 %v1_e7ec, i32* %r0.global-to-local, align 4
  %v0_e7f0 = load i32, i32* @r8, align 4
  %v7_e7f0 = icmp eq i32 %v0_e7f0, 5
  store i1 %v7_e7f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7f0, label %dec_label_pc_e7f8, label %dec_label_pc_e7e0

dec_label_pc_e7f8:                                ; preds = %dec_label_pc_e7e8, %dec_label_pc_e7d8, %dec_label_pc_e784, %dec_label_pc_e71c, %dec_label_pc_e864, %dec_label_pc_e870.backedge
  %v0_e7f8 = load i32, i32* @r6, align 4
  store i32 %v0_e7f8, i32* %r0.global-to-local, align 4
  %v1_e7fc = call i32 @function_115e0(i32 %v0_e7f8)
  store i32 %v1_e7fc, i32* %r0.global-to-local, align 4
  %v0_e800 = load i32, i32* @fp, align 4
  %v1_e800 = inttoptr i32 %v0_e800 to i8*
  %v2_e800 = load i8, i8* %v1_e800, align 1
  %v3_e800 = zext i8 %v2_e800 to i32
  store i32 %v3_e800, i32* @r4, align 4
  %v2_e804 = icmp eq i8 %v2_e800, 0
  store i1 %v2_e804, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e804, label %dec_label_pc_e948, label %dec_label_pc_e80c

dec_label_pc_e80c:                                ; preds = %dec_label_pc_e7f8, %dec_label_pc_e948
  %v0_e80c = phi i32 [ %v0_e800, %dec_label_pc_e7f8 ], [ %v0_e95c, %dec_label_pc_e948 ]
  store i32 %v0_e80c, i32* %r0.global-to-local, align 4
  store i32 %v3_e534, i32* @r4, align 4
  store i32 %v9_e534, i32* @r6, align 4
  store i32 %v12_e534, i32* @r7, align 4
  store i32 %v15_e534, i32* @r8, align 4
  store i32 %v18_e534, i32* @sb, align 4
  store i32 %v21_e534, i32* @sl, align 4
  store i32 %v24_e534, i32* @fp, align 4
  store i32 %v27_e534, i32* @lr, align 4
  ret i32 %v0_e80c

dec_label_pc_e820:                                ; preds = %bb118
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_e824 = call i32 @function_13700(i32 1)
  store i32 %v1_e824, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e7d8

dec_label_pc_e82c:                                ; preds = %dec_label_pc_e794
  store i32 %v2_e82c, i32* @sb, align 4
  store i32 %v2_e82c, i32* %r0.global-to-local, align 4
  %v2_e834 = call i32 @function_10b20(i8* %v1_e834)
  %v4_e840 = load i16, i16* %stack_var_-4292, align 2
  %v5_e840 = sext i16 %v4_e840 to i32
  store i32 %v5_e840, i32* %r3.global-to-local, align 4
  store i32 %v6_e604, i32* %r1.global-to-local, align 4
  %v1_e848 = load i32, i32* @sb, align 4
  %v9_e84c = icmp eq i16 %v4_e840, %v5_e61c
  store i1 %v9_e84c, i1* %cpsr_z.global-to-local, align 1
  %v2_e848 = add i32 %v2_e834, 5
  %v1_e850 = add i32 %v2_e848, %v1_e848
  store i32 %v1_e850, i32* %r0.global-to-local, align 4
  br i1 %v9_e84c, label %dec_label_pc_e858, label %dec_label_pc_e7d8

dec_label_pc_e858:                                ; preds = %dec_label_pc_e82c
  store i32 %v4_e858, i32* %r3.global-to-local, align 4
  store i1 %v2_e85c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e85c, label %dec_label_pc_e7d8, label %dec_label_pc_e864

dec_label_pc_e864:                                ; preds = %dec_label_pc_e858
  %div = udiv i16 %tmp79, 256
  %v3_e864 = zext i16 %div to i32
  store i32 %v3_e864, i32* %r2.global-to-local, align 4
  %v1_e868 = mul nuw nsw i32 %v4_e858, 256
  %v4_e86c = and i32 %v1_e868, 65280
  %v5_e86c = or i32 %v4_e86c, %v3_e864
  %v1_e870134 = add nsw i32 %v5_e86c, -1
  %v3_e874135 = mul i32 %v1_e870134, 65536
  store i32 %v3_e874135, i32* %r3.global-to-local, align 4
  %v7_e878141 = icmp eq i32 %v3_e874135, -65536
  store i1 %v7_e878141, i1* %cpsr_z.global-to-local, align 1
  %v3_e87c142 = urem i32 %v1_e870134, 65536
  store i32 %v3_e87c142, i32* @r8, align 4
  br i1 %v7_e878141, label %dec_label_pc_e7f8, label %dec_label_pc_e884

dec_label_pc_e884:                                ; preds = %dec_label_pc_e864, %dec_label_pc_e870.backedge
  %v3_e87c144 = phi i32 [ %v3_e87c, %dec_label_pc_e870.backedge ], [ %v3_e87c142, %dec_label_pc_e864 ]
  %v0_e8d4143 = phi i32 [ %storemerge29, %dec_label_pc_e870.backedge ], [ %v1_e850, %dec_label_pc_e864 ]
  store i32 %v0_e8d4143, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 1, i32* @ip, align 4
  %v1_e89018 = inttoptr i32 %v0_e8d4143 to i8*
  %v2_e89019 = load i8, i8* %v1_e89018, align 1
  %v3_e89020 = zext i8 %v2_e89019 to i32
  store i32 %v3_e89020, i32* %r2.global-to-local, align 4
  %v2_e89421 = icmp eq i8 %v2_e89019, 0
  store i1 %v2_e89421, i1* %cpsr_z.global-to-local, align 1
  %v3_e89822 = mul nuw nsw i32 %v3_e89020, 256
  store i32 %v3_e89822, i32* %r1.global-to-local, align 4
  br i1 %v2_e89421, label %dec_label_pc_e8cc, label %dec_label_pc_e8a0.preheader

dec_label_pc_e8a0.preheader:                      ; preds = %dec_label_pc_e884, %dec_label_pc_e890.backedge
  %v1_e96c = phi i32 [ %v1_e96c50, %dec_label_pc_e890.backedge ], [ 1, %dec_label_pc_e884 ]
  %v0_e96448 = phi i32 [ %v0_e964, %dec_label_pc_e890.backedge ], [ 0, %dec_label_pc_e884 ]
  %v0_e8ac46 = phi i32 [ %v3_e898, %dec_label_pc_e890.backedge ], [ %v3_e89822, %dec_label_pc_e884 ]
  %v0_e8a844 = phi i32 [ %v1_e968, %dec_label_pc_e890.backedge ], [ %v0_e8d4143, %dec_label_pc_e884 ]
  %v0_e8a042 = phi i32 [ %v3_e890, %dec_label_pc_e890.backedge ], [ %v3_e89020, %dec_label_pc_e884 ]
  br label %dec_label_pc_e8a0

dec_label_pc_e8a0:                                ; preds = %dec_label_pc_e8a0.preheader, %dec_label_pc_e8a8
  %v0_e964 = phi i32 [ %v0_e96448, %dec_label_pc_e8a0.preheader ], [ 1, %dec_label_pc_e8a8 ]
  %v0_e8ac = phi i32 [ %v0_e8ac46, %dec_label_pc_e8a0.preheader ], [ %v3_e8c4, %dec_label_pc_e8a8 ]
  %v0_e968 = phi i32 [ %v0_e8a844, %dec_label_pc_e8a0.preheader ], [ %v2_e8b4, %dec_label_pc_e8a8 ]
  %v0_e8a0 = phi i32 [ %v0_e8a042, %dec_label_pc_e8a0.preheader ], [ %v3_e8b8, %dec_label_pc_e8a8 ]
  %v7_e8a0 = icmp eq i32 %v0_e8a0, 191
  store i1 %v7_e8a0, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v0_e8a0, 192
  br i1 %tmp, label %dec_label_pc_e964, label %dec_label_pc_e8a8

dec_label_pc_e8a8:                                ; preds = %dec_label_pc_e8a0
  %v1_e8a8 = add i32 %v0_e968, 1
  %v2_e8a8 = inttoptr i32 %v1_e8a8 to i8*
  %v3_e8a8 = load i8, i8* %v2_e8a8, align 1
  %v4_e8a8 = zext i8 %v3_e8a8 to i32
  %v2_e8ac = or i32 %v4_e8a8, -49152
  %v0_e8b4 = load i32, i32* @r5, align 4
  %v1_e8b0 = add i32 %v0_e8b4, %v0_e8ac
  %v2_e8b4 = add i32 %v1_e8b0, %v2_e8ac
  store i32 %v2_e8b4, i32* %r3.global-to-local, align 4
  %v1_e8b8 = inttoptr i32 %v2_e8b4 to i8*
  %v2_e8b8 = load i8, i8* %v1_e8b8, align 1
  %v3_e8b8 = zext i8 %v2_e8b8 to i32
  store i32 %v3_e8b8, i32* %r2.global-to-local, align 4
  %v2_e8bc = icmp eq i8 %v2_e8b8, 0
  store i1 %v2_e8bc, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @lr, align 4
  %v3_e8c4 = mul nuw nsw i32 %v3_e8b8, 256
  store i32 %v3_e8c4, i32* %r1.global-to-local, align 4
  br i1 %v2_e8bc, label %dec_label_pc_e8cc, label %dec_label_pc_e8a0

dec_label_pc_e8cc:                                ; preds = %dec_label_pc_e890.backedge, %dec_label_pc_e8a8, %dec_label_pc_e884
  %v1_e8d0 = phi i32 [ 1, %dec_label_pc_e884 ], [ %v1_e96c, %dec_label_pc_e8a8 ], [ %v1_e96c50, %dec_label_pc_e890.backedge ]
  %v0_e8cc = phi i32 [ 0, %dec_label_pc_e884 ], [ 1, %dec_label_pc_e8a8 ], [ %v0_e964, %dec_label_pc_e890.backedge ]
  %v7_e8cc = icmp eq i32 %v0_e8cc, 1
  store i1 %v7_e8cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e8cc, label %bb119, label %bb120

bb119:                                            ; preds = %dec_label_pc_e8cc
  %v2_e8d0 = add i32 %v1_e8d0, 1
  store i32 %v2_e8d0, i32* @ip, align 4
  br label %bb120

bb120:                                            ; preds = %dec_label_pc_e8cc, %bb119
  %v1_e8d4 = phi i32 [ %v1_e8d0, %dec_label_pc_e8cc ], [ %v2_e8d0, %bb119 ]
  %v2_e8d4 = add i32 %v1_e8d4, %v0_e8d4143
  store i32 %v2_e8d4, i32* @r4, align 4
  %v3_e8d8 = inttoptr i32 %v2_e8d4 to i8*
  %v4_e8d8 = load i8, i8* %v3_e8d8, align 1
  %v6_e8d8 = zext i8 %v4_e8d8 to i32
  store i32 %v6_e8d8, i32* %r3.global-to-local, align 4
  %v1_e8dc = add i32 %v2_e8d4, 1
  %v2_e8dc = inttoptr i32 %v1_e8dc to i8*
  %v3_e8dc = load i8, i8* %v2_e8dc, align 1
  %v4_e8dc = zext i8 %v3_e8dc to i32
  store i32 %v4_e8dc, i32* %r2.global-to-local, align 4
  %v4_e8e0 = mul nuw nsw i32 %v4_e8dc, 256
  %v5_e8e0 = or i32 %v4_e8e0, %v6_e8d8
  store i32 %v5_e8e0, i32* %r3.global-to-local, align 4
  %v7_e8e4 = icmp eq i32 %v5_e8e0, 256
  store i1 %v7_e8e4, i1* %cpsr_z.global-to-local, align 1
  %v1_e8e8 = add i32 %v2_e8d4, 10
  store i32 %v1_e8e8, i32* @r7, align 4
  br i1 %v7_e8e4, label %dec_label_pc_e984, label %dec_label_pc_e8f0

dec_label_pc_e8f0:                                ; preds = %dec_label_pc_e984, %bb120
  store i32 %v1_e8e8, i32* %r3.global-to-local, align 4
  store i32 0, i32* @ip, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_e8fc24 = inttoptr i32 %v1_e8e8 to i8*
  %v2_e8fc25 = load i8, i8* %v1_e8fc24, align 1
  %v3_e8fc26 = zext i8 %v2_e8fc25 to i32
  store i32 %v3_e8fc26, i32* %r2.global-to-local, align 4
  %v2_e90027 = icmp eq i8 %v2_e8fc25, 0
  store i1 %v2_e90027, i1* %cpsr_z.global-to-local, align 1
  %v3_e90428 = mul nuw nsw i32 %v3_e8fc26, 256
  store i32 %v3_e90428, i32* %r1.global-to-local, align 4
  br i1 %v2_e90027, label %dec_label_pc_e938, label %dec_label_pc_e90c.preheader

dec_label_pc_e90c.preheader:                      ; preds = %dec_label_pc_e8f0, %dec_label_pc_e8fc.backedge
  %v1_e97c = phi i32 [ %v1_e97c65, %dec_label_pc_e8fc.backedge ], [ 1, %dec_label_pc_e8f0 ]
  %v0_e97463 = phi i32 [ %v0_e974, %dec_label_pc_e8fc.backedge ], [ 0, %dec_label_pc_e8f0 ]
  %v0_e91861 = phi i32 [ %v3_e904, %dec_label_pc_e8fc.backedge ], [ %v3_e90428, %dec_label_pc_e8f0 ]
  %v0_e91459 = phi i32 [ %v1_e978, %dec_label_pc_e8fc.backedge ], [ %v1_e8e8, %dec_label_pc_e8f0 ]
  %v0_e90c57 = phi i32 [ %v3_e8fc, %dec_label_pc_e8fc.backedge ], [ %v3_e8fc26, %dec_label_pc_e8f0 ]
  br label %dec_label_pc_e90c

dec_label_pc_e90c:                                ; preds = %dec_label_pc_e90c.preheader, %dec_label_pc_e914
  %v0_e974 = phi i32 [ %v0_e97463, %dec_label_pc_e90c.preheader ], [ 1, %dec_label_pc_e914 ]
  %v0_e918 = phi i32 [ %v0_e91861, %dec_label_pc_e90c.preheader ], [ %v3_e930, %dec_label_pc_e914 ]
  %v0_e978 = phi i32 [ %v0_e91459, %dec_label_pc_e90c.preheader ], [ %v2_e920, %dec_label_pc_e914 ]
  %v0_e90c = phi i32 [ %v0_e90c57, %dec_label_pc_e90c.preheader ], [ %v3_e924, %dec_label_pc_e914 ]
  %v7_e90c = icmp eq i32 %v0_e90c, 191
  store i1 %v7_e90c, i1* %cpsr_z.global-to-local, align 1
  %tmp159 = icmp ult i32 %v0_e90c, 192
  br i1 %tmp159, label %dec_label_pc_e974, label %dec_label_pc_e914

dec_label_pc_e914:                                ; preds = %dec_label_pc_e90c
  %v1_e914 = add i32 %v0_e978, 1
  %v2_e914 = inttoptr i32 %v1_e914 to i8*
  %v3_e914 = load i8, i8* %v2_e914, align 1
  %v4_e914 = zext i8 %v3_e914 to i32
  %v2_e918 = or i32 %v4_e914, -49152
  %v0_e920 = load i32, i32* @r5, align 4
  %v1_e91c = add i32 %v0_e920, %v0_e918
  %v2_e920 = add i32 %v1_e91c, %v2_e918
  store i32 %v2_e920, i32* %r3.global-to-local, align 4
  %v1_e924 = inttoptr i32 %v2_e920 to i8*
  %v2_e924 = load i8, i8* %v1_e924, align 1
  %v3_e924 = zext i8 %v2_e924 to i32
  store i32 %v3_e924, i32* %r2.global-to-local, align 4
  %v2_e928 = icmp eq i8 %v2_e924, 0
  store i1 %v2_e928, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @ip, align 4
  %v3_e930 = mul nuw nsw i32 %v3_e924, 256
  store i32 %v3_e930, i32* %r1.global-to-local, align 4
  br i1 %v2_e928, label %dec_label_pc_e938, label %dec_label_pc_e90c

dec_label_pc_e938:                                ; preds = %dec_label_pc_e8fc.backedge, %dec_label_pc_e914, %dec_label_pc_e8f0
  %v1_e93c = phi i32 [ 1, %dec_label_pc_e8f0 ], [ %v1_e97c, %dec_label_pc_e914 ], [ %v1_e97c65, %dec_label_pc_e8fc.backedge ]
  %v0_e938 = phi i32 [ 0, %dec_label_pc_e8f0 ], [ 1, %dec_label_pc_e914 ], [ %v0_e974, %dec_label_pc_e8fc.backedge ]
  %v7_e938 = icmp eq i32 %v0_e938, 1
  store i1 %v7_e938, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e938, label %bb121, label %bb122

bb121:                                            ; preds = %dec_label_pc_e938
  %v2_e93c = add i32 %v1_e93c, 1
  store i32 %v2_e93c, i32* %r0.global-to-local, align 4
  br label %bb122

bb122:                                            ; preds = %dec_label_pc_e998, %dec_label_pc_e938, %bb121
  %v1_e940 = phi i32 [ %v5_e9b0, %dec_label_pc_e998 ], [ %v1_e93c, %dec_label_pc_e938 ], [ %v2_e93c, %bb121 ]
  %v2_e940 = add i32 %v1_e940, %v1_e8e8
  br label %dec_label_pc_e870.backedge

dec_label_pc_e870.backedge:                       ; preds = %bb122, %dec_label_pc_e9bc
  %v0_e870.pre = phi i32 [ %v3_e87c144, %bb122 ], [ %v0_e870.pre.pre, %dec_label_pc_e9bc ]
  %storemerge29 = phi i32 [ %v2_e940, %bb122 ], [ %v2_ea34, %dec_label_pc_e9bc ]
  store i32 %storemerge29, i32* %r0.global-to-local, align 4
  %v1_e870 = add i32 %v0_e870.pre, -1
  %v3_e874 = mul i32 %v1_e870, 65536
  store i32 %v3_e874, i32* %r3.global-to-local, align 4
  %v7_e878 = icmp eq i32 %v3_e874, -65536
  store i1 %v7_e878, i1* %cpsr_z.global-to-local, align 1
  %v3_e87c = urem i32 %v1_e870, 65536
  store i32 %v3_e87c, i32* @r8, align 4
  br i1 %v7_e878, label %dec_label_pc_e7f8, label %dec_label_pc_e884

dec_label_pc_e948:                                ; preds = %dec_label_pc_e7f8
  %v1_e948 = add i32 %v0_e800, 4
  %v2_e948 = inttoptr i32 %v1_e948 to i32*
  %v3_e948 = load i32, i32* %v2_e948, align 4
  store i32 %v3_e948, i32* %r0.global-to-local, align 4
  %v2_e94c = icmp eq i32 %v3_e948, 0
  store i1 %v2_e94c, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_e954.119 to i32), i32* @lr, align 4
  %v1_e950 = xor i1 %v2_e94c, true
  call void @__pseudo_cond_branch(i1 %v1_e950, i32 ptrtoint (i32* @global_var_130a8.21 to i32))
  %v0_e954 = load i32, i32* @fp, align 4
  store i32 %v0_e954, i32* @r0, align 4
  %v0_e958 = call i32 @function_130a8()
  store i32 %v0_e958, i32* %r0.global-to-local, align 4
  %v0_e95c = load i32, i32* @r4, align 4
  br label %dec_label_pc_e80c

dec_label_pc_e964:                                ; preds = %dec_label_pc_e8a0
  %v2_e964 = icmp eq i32 %v0_e964, 0
  store i1 %v2_e964, i1* %cpsr_z.global-to-local, align 1
  %v1_e968 = add i32 %v0_e968, 1
  store i32 %v1_e968, i32* %r3.global-to-local, align 4
  br i1 %v2_e964, label %bb123, label %dec_label_pc_e890.backedge

dec_label_pc_e890.backedge:                       ; preds = %dec_label_pc_e964, %bb123
  %v1_e96c50 = phi i32 [ %v1_e96c, %dec_label_pc_e964 ], [ %v2_e96c, %bb123 ]
  %v1_e890 = inttoptr i32 %v1_e968 to i8*
  %v2_e890 = load i8, i8* %v1_e890, align 1
  %v3_e890 = zext i8 %v2_e890 to i32
  store i32 %v3_e890, i32* %r2.global-to-local, align 4
  %v2_e894 = icmp eq i8 %v2_e890, 0
  store i1 %v2_e894, i1* %cpsr_z.global-to-local, align 1
  %v3_e898 = mul nuw nsw i32 %v3_e890, 256
  store i32 %v3_e898, i32* %r1.global-to-local, align 4
  br i1 %v2_e894, label %dec_label_pc_e8cc, label %dec_label_pc_e8a0.preheader

bb123:                                            ; preds = %dec_label_pc_e964
  %v2_e96c = add i32 %v1_e96c, 1
  store i32 %v2_e96c, i32* @ip, align 4
  br label %dec_label_pc_e890.backedge

dec_label_pc_e974:                                ; preds = %dec_label_pc_e90c
  %v2_e974 = icmp eq i32 %v0_e974, 0
  store i1 %v2_e974, i1* %cpsr_z.global-to-local, align 1
  %v1_e978 = add i32 %v0_e978, 1
  store i32 %v1_e978, i32* %r3.global-to-local, align 4
  br i1 %v2_e974, label %bb124, label %dec_label_pc_e8fc.backedge

dec_label_pc_e8fc.backedge:                       ; preds = %dec_label_pc_e974, %bb124
  %v1_e97c65 = phi i32 [ %v1_e97c, %dec_label_pc_e974 ], [ %v2_e97c, %bb124 ]
  %v1_e8fc = inttoptr i32 %v1_e978 to i8*
  %v2_e8fc = load i8, i8* %v1_e8fc, align 1
  %v3_e8fc = zext i8 %v2_e8fc to i32
  store i32 %v3_e8fc, i32* %r2.global-to-local, align 4
  %v2_e900 = icmp eq i8 %v2_e8fc, 0
  store i1 %v2_e900, i1* %cpsr_z.global-to-local, align 1
  %v3_e904 = mul nuw nsw i32 %v3_e8fc, 256
  store i32 %v3_e904, i32* %r1.global-to-local, align 4
  br i1 %v2_e900, label %dec_label_pc_e938, label %dec_label_pc_e90c.preheader

bb124:                                            ; preds = %dec_label_pc_e974
  %v2_e97c = add i32 %v1_e97c, 1
  store i32 %v2_e97c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e8fc.backedge

dec_label_pc_e984:                                ; preds = %bb120
  %v1_e984 = add i32 %v2_e8d4, 2
  %v2_e984 = inttoptr i32 %v1_e984 to i8*
  %v3_e984 = load i8, i8* %v2_e984, align 1
  %v4_e984 = zext i8 %v3_e984 to i32
  store i32 %v4_e984, i32* %r3.global-to-local, align 4
  %v1_e988 = add i32 %v2_e8d4, 3
  %v2_e988 = inttoptr i32 %v1_e988 to i8*
  %v3_e988 = load i8, i8* %v2_e988, align 1
  %v4_e988 = zext i8 %v3_e988 to i32
  store i32 %v4_e988, i32* %r2.global-to-local, align 4
  %v4_e98c = mul nuw nsw i32 %v4_e988, 256
  %v5_e98c = or i32 %v4_e98c, %v4_e984
  store i32 %v5_e98c, i32* %r3.global-to-local, align 4
  %v7_e990 = icmp eq i32 %v5_e98c, 256
  store i1 %v7_e990, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e990, label %dec_label_pc_e998, label %dec_label_pc_e8f0

dec_label_pc_e998:                                ; preds = %dec_label_pc_e984
  %v1_e998 = add i32 %v2_e8d4, 9
  %v2_e998 = inttoptr i32 %v1_e998 to i8*
  %v3_e998 = load i8, i8* %v2_e998, align 1
  %v4_e998 = zext i8 %v3_e998 to i32
  store i32 %v4_e998, i32* %r2.global-to-local, align 4
  %v1_e99c = add i32 %v2_e8d4, 8
  %v2_e99c = inttoptr i32 %v1_e99c to i8*
  %v3_e99c = load i8, i8* %v2_e99c, align 1
  %v4_e99c = zext i8 %v3_e99c to i32
  %v4_e9a0 = mul nuw nsw i32 %v4_e998, 256
  %v5_e9a0 = or i32 %v4_e99c, %v4_e9a0
  %v3_e9a4 = mul i32 %v5_e9a0, 65536
  store i32 %v3_e9a4, i32* %r3.global-to-local, align 4
  %v3_e9a8 = mul nuw nsw i32 %v4_e99c, 256
  store i32 %v3_e9a8, i32* %r2.global-to-local, align 4
  %v5_e9b0 = or i32 %v3_e9a8, %v4_e998
  store i32 %v5_e9b0, i32* %r0.global-to-local, align 4
  %v7_e9b4 = icmp eq i32 %v5_e9b0, 4
  store i1 %v7_e9b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9b4, label %dec_label_pc_e9bc, label %bb122

dec_label_pc_e9bc:                                ; preds = %dec_label_pc_e998
  %v2_e9bc = inttoptr i32 %v1_e8e8 to i8*
  %v3_e9bc = load i8, i8* %v2_e9bc, align 1
  %v4_e9bc = zext i8 %v3_e9bc to i32
  store i32 %v4_e9bc, i32* %r3.global-to-local, align 4
  store i32 %v2_e5cc, i32* %r2.global-to-local, align 4
  %v1_e9c8 = add i32 %v2_e8d4, 11
  %v2_e9c8 = inttoptr i32 %v1_e9c8 to i8*
  %v3_e9c8 = load i8, i8* %v2_e9c8, align 1
  %v4_e9c8 = zext i8 %v3_e9c8 to i32
  store i32 %v4_e9c8, i32* %r2.global-to-local, align 4
  store i32 %v2_e5cc, i32* %r3.global-to-local, align 4
  %v1_e9d4 = add i32 %v2_e8d4, 12
  %v2_e9d4 = inttoptr i32 %v1_e9d4 to i8*
  %v3_e9d4 = load i8, i8* %v2_e9d4, align 1
  %v4_e9d4 = zext i8 %v3_e9d4 to i32
  store i32 %v4_e9d4, i32* %r3.global-to-local, align 4
  store i32 %v2_e5cc, i32* @ip, align 4
  %v1_e9e0 = add i32 %v2_e8d4, 13
  %v2_e9e0 = inttoptr i32 %v1_e9e0 to i8*
  %v3_e9e0 = load i8, i8* %v2_e9e0, align 1
  %v4_e9e0 = zext i8 %v3_e9e0 to i32
  store i32 %v4_e9e0, i32* %r2.global-to-local, align 4
  %v0_e9e8 = load i32, i32* @fp, align 4
  %v1_e9e8 = inttoptr i32 %v0_e9e8 to i8*
  %v2_e9e8 = load i8, i8* %v1_e9e8, align 1
  %v3_e9e8 = zext i8 %v2_e9e8 to i32
  %v1_e9ec = mul nuw nsw i32 %v3_e9e8, 4
  %v3_e9f0 = add nuw nsw i32 %v1_e9ec, 4
  store i32 %v3_e9f0, i32* %r1.global-to-local, align 4
  %v1_e9f4 = add i32 %v0_e9e8, 4
  %v2_e9f4 = inttoptr i32 %v1_e9f4 to i32*
  %v3_e9f4 = load i32, i32* %v2_e9f4, align 4
  store i32 %v3_e9f4, i32* %r0.global-to-local, align 4
  %v3_e9f8 = sext i8 %v3_e9e0 to i32
  %v5_e9f8 = sext i8 %v3_e9d4 to i32
  %v10_e9f8 = inttoptr i32 %v3_e9f4 to i32*
  %v11_e9f8 = call i32 @function_12a90(i32* %v10_e9f8, i32 %v3_e9f0, i32 %v3_e9f8, i32 %v5_e9f8)
  store i32 %v11_e9f8, i32* %r0.global-to-local, align 4
  %v0_e9fc = load i32, i32* @fp, align 4
  %v1_e9fc = inttoptr i32 %v0_e9fc to i8*
  %v2_e9fc = load i8, i8* %v1_e9fc, align 1
  %v3_e9fc = zext i8 %v2_e9fc to i32
  store i32 %v3_e9fc, i32* %r2.global-to-local, align 4
  %v4_ea04 = sext i8 %v3_e9bc to i32
  store i32 %v4_ea04, i32* %r3.global-to-local, align 4
  %v1_ea08 = add nuw nsw i32 %v3_e9fc, 1
  store i32 %v1_ea08, i32* %r1.global-to-local, align 4
  %v5_ea0c = mul nuw nsw i32 %v3_e9fc, 4
  %v6_ea0c = add i32 %v5_ea0c, %v11_e9f8
  %v7_ea0c = inttoptr i32 %v6_ea0c to i32*
  store i32 %v4_ea04, i32* %v7_ea0c, align 4
  %v1_ea10 = load i32, i32* @fp, align 4
  %v2_ea10 = add i32 %v1_ea10, 4
  %v3_ea10 = inttoptr i32 %v2_ea10 to i32*
  store i32 %v11_e9f8, i32* %v3_ea10, align 4
  %v0_ea14 = load i32, i32* %r1.global-to-local, align 4
  %v1_ea14 = trunc i32 %v0_ea14 to i8
  %v2_ea14 = load i32, i32* @fp, align 4
  %v3_ea14 = inttoptr i32 %v2_ea14 to i8*
  store i8 %v1_ea14, i8* %v3_ea14, align 1
  %v0_ea18 = load i32, i32* @r4, align 4
  %v1_ea18 = add i32 %v0_ea18, 9
  %v2_ea18 = inttoptr i32 %v1_ea18 to i8*
  %v3_ea18 = load i8, i8* %v2_ea18, align 1
  %v4_ea18 = zext i8 %v3_ea18 to i32
  store i32 %v4_ea18, i32* %r3.global-to-local, align 4
  %v1_ea1c = add i32 %v0_ea18, 8
  %v2_ea1c = inttoptr i32 %v1_ea1c to i8*
  %v3_ea1c = load i8, i8* %v2_ea1c, align 1
  %v4_ea1c = zext i8 %v3_ea1c to i32
  %v4_ea20 = mul nuw nsw i32 %v4_ea18, 256
  %v5_ea20 = or i32 %v4_ea1c, %v4_ea20
  %v3_ea24 = mul i32 %v5_ea20, 65536
  store i32 %v3_ea24, i32* %r2.global-to-local, align 4
  %v3_ea28 = mul nuw nsw i32 %v4_ea1c, 256
  store i32 %v3_ea28, i32* %r3.global-to-local, align 4
  %v5_ea30 = or i32 %v3_ea28, %v4_ea18
  store i32 %v5_ea30, i32* %r0.global-to-local, align 4
  %v0_ea34 = load i32, i32* @r7, align 4
  %v2_ea34 = add i32 %v0_ea34, %v5_ea30
  %v0_e870.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_e870.backedge

; uselistorder directives
  uselistorder i32 %v3_ea28, { 1, 0 }
  uselistorder i32 %v4_ea18, { 1, 0, 2 }
  uselistorder i32 %v11_e9f8, { 1, 0, 2 }
  uselistorder i32 %v3_e9f0, { 1, 0 }
  uselistorder i32 %v5_e9b0, { 1, 2, 0 }
  uselistorder i32 %v3_e9a8, { 1, 0 }
  uselistorder i32 %v4_e998, { 1, 0, 2 }
  uselistorder i32 %v2_e97c, { 1, 0 }
  uselistorder i32 %v3_e8fc, { 0, 2, 1 }
  uselistorder i32 %v1_e97c65, { 1, 0 }
  uselistorder i32 %v1_e978, { 1, 2, 0 }
  uselistorder i32 %v2_e96c, { 1, 0 }
  uselistorder i32 %v3_e890, { 0, 2, 1 }
  uselistorder i32 %v1_e96c50, { 1, 0 }
  uselistorder i32 %v1_e968, { 1, 2, 0 }
  uselistorder i1 %v7_e878, { 1, 0 }
  uselistorder i32 %v1_e870, { 1, 0 }
  uselistorder i32 %storemerge29, { 1, 0 }
  uselistorder i32 %v3_e924, { 0, 2, 1 }
  uselistorder i32 %v2_e920, { 1, 2, 0 }
  uselistorder i32 %v0_e974, { 2, 0, 1 }
  uselistorder i32 %v1_e97c, { 1, 2, 0 }
  uselistorder i32 %v3_e90428, { 1, 0 }
  uselistorder i32 %v3_e8fc26, { 1, 0, 2 }
  uselistorder i32 %v1_e8e8, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v2_e8d4, { 0, 1, 2, 4, 3, 6, 5, 7, 9, 8, 10 }
  uselistorder i32 %v3_e8b8, { 0, 2, 1 }
  uselistorder i32 %v2_e8b4, { 1, 2, 0 }
  uselistorder i32 %v0_e964, { 2, 0, 1 }
  uselistorder i32 %v1_e96c, { 1, 2, 0 }
  uselistorder i32 %v3_e89822, { 1, 0 }
  uselistorder i32 %v3_e89020, { 1, 0, 2 }
  uselistorder i32 %v0_e8d4143, { 3, 0, 1, 2 }
  uselistorder i32 %v3_e87c142, { 1, 0 }
  uselistorder i1 %v7_e878141, { 1, 0 }
  uselistorder i32 %v1_e870134, { 1, 0 }
  uselistorder i1 %v9_e84c, { 1, 0 }
  uselistorder i32 %v0_e80c, { 1, 0 }
  uselistorder i32 %v0_e800, { 1, 0, 2 }
  uselistorder i32 %v0_e7f0, { 1, 0 }
  uselistorder i32 %v0_e7c8, { 1, 0 }
  uselistorder i32 %v1_e77c, { 1, 0, 2 }
  uselistorder i1 %v7_e774, { 1, 0 }
  uselistorder i32 %v5_e770, { 1, 0, 2 }
  uselistorder i32 %v1_e738, { 1, 0 }
  uselistorder i32 %v3_e724, { 1, 0 }
  uselistorder i32 %v0_e71c, { 1, 0 }
  uselistorder i32 %v1_e710, { 1, 2, 0 }
  uselistorder i1 %v7_e6c8, { 1, 0 }
  uselistorder i32 %v4_e6c4, { 1, 0, 2 }
  uselistorder i1 %v7_e6ac, { 1, 0 }
  uselistorder i32 %v3_e6a8, { 1, 0, 2 }
  uselistorder i1 %v7_e690, { 1, 0 }
  uselistorder i32 %v3_e68c, { 2, 1, 0, 3 }
  uselistorder i1 %v7_e674, { 2, 1, 0 }
  uselistorder i32 %v1_e678, { 1, 0 }
  uselistorder i32 %v2_e700, { 1, 0, 2 }
  uselistorder i16 %v5_e61c, { 1, 0 }
  uselistorder i32 %v2_e618, { 1, 0, 2 }
  uselistorder i32 %v6_e604, { 1, 2, 0 }
  uselistorder i64 %v5_e600, { 0, 2, 1 }
  uselistorder i32 %v1_e5ec, { 1, 0, 2 }
  uselistorder i32 %v1_e5a4, { 1, 0 }
  uselistorder i32 %v1_e5a0, { 1, 2, 0 }
  uselistorder i32 %v2_e59c, { 1, 0 }
  uselistorder i1 %v8_e588, { 1, 0 }
  uselistorder i32 %v2_e560, { 1, 0, 2 }
  uselistorder i16* %stack_var_-2244, { 1, 0 }
  uselistorder i32* %stack_var_-68, { 0, 2, 1 }
  uselistorder i16* %stack_var_-4292, { 1, 0 }
  uselistorder i16 %tmp79, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 18, 13, 16, 14, 15, 17, 19, 0, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 34, 35, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 12, 8, 17, 10, 11, 16, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 5, 7, 4, 11, 6, 10, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 22, 21, 20, 0, 23 }
  uselistorder i32* %r0.global-to-local, { 1, 5, 2, 3, 4, 11, 6, 8, 7, 9, 10, 12, 15, 13, 14, 17, 16, 20, 18, 19, 21, 22, 41, 23, 25, 24, 26, 28, 27, 29, 32, 31, 30, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 3, 4, 11, 5, 16, 6, 7, 17, 8, 9, 10, 28, 12, 13, 14, 15, 27, 0, 18, 19, 20, 21, 22, 23, 24, 25, 26, 2, 29, 30, 31, 32, 37, 34, 35, 33, 36, 1 }
  uselistorder i32 (i32)* @function_13700, { 7, 6, 11, 10, 9, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_e8fc.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_e890.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_e870.backedge, { 1, 0 }
  uselistorder label %bb122, { 0, 2, 1 }
  uselistorder label %dec_label_pc_e90c, { 1, 0 }
  uselistorder label %dec_label_pc_e90c.preheader, { 1, 0 }
  uselistorder label %bb120, { 1, 0 }
  uselistorder label %dec_label_pc_e8a0, { 1, 0 }
  uselistorder label %dec_label_pc_e8a0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_e884, { 1, 0 }
  uselistorder label %dec_label_pc_e80c, { 1, 0 }
  uselistorder label %dec_label_pc_e7f8, { 5, 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_e7d8, { 2, 1, 4, 0, 3 }
  uselistorder label %bb118, { 1, 0 }
  uselistorder label %bb115, { 2, 0, 1 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_e580, { 1, 0 }
}

define i32 @function_ea3c(i32 %arg1) local_unnamed_addr {
dec_label_pc_ea3c:
  %v2_ea48 = load i32, i32* @global_var_212fc.121, align 4
  %v2_ea50 = call i32 @function_113ac(i32 %v2_ea48, i32 9)
  ret i32 %v2_ea50
}

define i32 @function_ea64() local_unnamed_addr {
dec_label_pc_ea64:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_ea64 = load i32, i32* @r4, align 4
  store i32 %v3_ea64, i32* %stack_var_-16, align 4
  %v12_ea64 = load i32, i32* @lr, align 4
  %v0_ea68 = load i32, i32* @r0, align 4
  store i32 %v0_ea68, i32* %r5.global-to-local, align 4
  %v1_ea6c = add i32 %v0_ea68, 4
  %v2_ea6c = inttoptr i32 %v1_ea6c to i32*
  %v3_ea6c = load i32, i32* %v2_ea6c, align 4
  store i32 %v3_ea6c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 60048, i32* @lr, align 4
  %v1_ea8c = icmp ne i32 %v3_ea6c, -1
  call void @__pseudo_cond_branch(i1 %v1_ea8c, i32 ptrtoint (i32* @global_var_115e0.94 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_ea9c = call i32 @function_11df4(i32 2, i32 1, i32 0)
  store i32 %v3_ea9c, i32* %r0.global-to-local, align 4
  %v7_eaa0 = icmp eq i32 %v3_ea9c, -1
  %v1_eaa4 = load i32, i32* %r5.global-to-local, align 4
  %v2_eaa4 = add i32 %v1_eaa4, 4
  %v3_eaa4 = inttoptr i32 %v2_eaa4 to i32*
  store i32 %v3_ea9c, i32* %v3_eaa4, align 4
  br i1 %v7_eaa0, label %dec_label_pc_ea64.dec_label_pc_eb1c_crit_edge, label %dec_label_pc_eaac

dec_label_pc_ea64.dec_label_pc_eb1c_crit_edge:    ; preds = %dec_label_pc_ea64
  %v1_eb24.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_eb1c

dec_label_pc_eaac:                                ; preds = %dec_label_pc_ea64
  %v2_ea70 = ptrtoint i32* %stack_var_-32 to i32
  %v0_eaac = load i32, i32* %r5.global-to-local, align 4
  %v1_eaac = add i32 %v0_eaac, 28
  store i32 %v1_eaac, i32* @r0, align 4
  %v0_eab0 = load i32, i32* %r6.global-to-local, align 4
  %v2_eab0 = add i32 %v0_eaac, 24
  %v3_eab0 = inttoptr i32 %v2_eab0 to i32*
  store i32 %v0_eab0, i32* %v3_eab0, align 4
  store i32 356, i32* @r1, align 4
  %v0_eab8 = call i32 @function_10bb4()
  store i32 %v0_eab8, i32* %r0.global-to-local, align 4
  %v0_eabc = load i32, i32* %r5.global-to-local, align 4
  %v1_eabc = add i32 %v0_eabc, 4
  %v2_eabc = inttoptr i32 %v1_eabc to i32*
  %v3_eabc = load i32, i32* %v2_eabc, align 4
  store i32 %v3_eabc, i32* %r4.global-to-local, align 4
  %v0_eac0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_eac0, i32* %r2.global-to-local, align 4
  store i32 %v3_eabc, i32* %r0.global-to-local, align 4
  %v2_eacc = call i32 @function_11414(i32 %v3_eabc, i32 3)
  %v1_ead4 = or i32 %v2_eacc, 2048
  store i32 %v1_ead4, i32* %r2.global-to-local, align 4
  %v0_ead8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_ead8, i32* %r0.global-to-local, align 4
  %v2_eadc = call i32 @function_11414(i32 %v0_ead8, i32 4)
  store i32 %v2_eadc, i32* %r0.global-to-local, align 4
  %v2_eae4 = load i32, i32* @global_var_1f2a4.123, align 4
  store i32 %v2_eae4, i32* %r2.global-to-local, align 4
  %v1_eaec = load i32, i32* %r5.global-to-local, align 4
  %v2_eaec = add i32 %v1_eaec, 12
  %v3_eaec = inttoptr i32 %v2_eaec to i32*
  store i32 1, i32* %v3_eaec, align 4
  store i32 2, i32* @r3, align 4
  store i32 2, i32* %stack_var_-32, align 4
  %v0_eaf8 = load i32, i32* %r2.global-to-local, align 4
  %v1_eaf8 = load i32, i32* %r5.global-to-local, align 4
  %v2_eaf8 = add i32 %v1_eaf8, 8
  %v3_eaf8 = inttoptr i32 %v2_eaf8 to i32*
  store i32 %v0_eaf8, i32* %v3_eaf8, align 4
  %v0_eafc = load i32, i32* %r5.global-to-local, align 4
  %v1_eafc = add i32 %v0_eafc, 16
  %v2_eafc = inttoptr i32 %v1_eafc to i32*
  %v3_eafc = load i32, i32* %v2_eafc, align 4
  store i32 %v3_eafc, i32* @ip, align 4
  %v1_eb00 = add i32 %v0_eafc, 4
  %v2_eb00 = inttoptr i32 %v1_eb00 to i32*
  %v3_eb00 = load i32, i32* %v2_eb00, align 4
  store i32 %v3_eb00, i32* %r0.global-to-local, align 4
  %v1_eb04 = add i32 %v0_eafc, 20
  %v2_eb04 = inttoptr i32 %v1_eb04 to i16*
  %v3_eb04 = load i16, i16* %v2_eb04, align 2
  %v4_eb04 = zext i16 %v3_eb04 to i32
  store i32 %v4_eb04, i32* %r5.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_eb18 = call i32 @function_11bdc(i32 %v3_eb00, i32 %v2_ea70, i32 16)
  store i32 %v3_eb18, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_eb1c

dec_label_pc_eb1c:                                ; preds = %dec_label_pc_ea64.dec_label_pc_eb1c_crit_edge, %dec_label_pc_eaac
  %v1_eb24 = phi i32 [ %v1_eb24.pre, %dec_label_pc_ea64.dec_label_pc_eb1c_crit_edge ], [ %v3_eb18, %dec_label_pc_eaac ]
  %v2_eb20 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_eb20, i32* @r4, align 4
  store i32 %v12_ea64, i32* @lr, align 4
  ret i32 %v1_eb24

; uselistorder directives
  uselistorder i32 %v3_ea9c, { 1, 0, 2 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 5, 6, 4, 7 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 5, 8, 9, 7, 6 }
  uselistorder i32 ()* @function_10bb4, { 8, 4, 7, 6, 5, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_eb1c, { 1, 0 }
}

define i32 @function_eb2c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_eb2c:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v3_eb2c = load i32, i32* @r4, align 4
  %v6_eb2c = load i32, i32* @r5, align 4
  %v9_eb2c = load i32, i32* @r6, align 4
  %v12_eb2c = load i32, i32* @r7, align 4
  %v15_eb2c = load i32, i32* @r8, align 4
  %v18_eb2c = load i32, i32* @sb, align 4
  %v21_eb2c = load i32, i32* @sl, align 4
  %v24_eb2c = load i32, i32* @fp, align 4
  store i32 ptrtoint (i32* @global_var_1f270.125 to i32), i32* @fp, align 4
  %v2_eb34 = load i32, i32* @global_var_1f270.125, align 4
  store i32 ptrtoint (i32* @global_var_1f29c.127 to i32), i32* @sl, align 4
  %v1_eb40 = add i32 %v2_eb34, 1
  store i32 %v1_eb40, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_eb4c = load i32, i32* @global_var_1f29c.127, align 4
  store i32 %v2_eb4c, i32* %r0.global-to-local, align 4
  %v3_eb50 = mul i32 %v1_eb40, 16
  store i32 %v3_eb50, i32* %r1.global-to-local, align 4
  %v4_eb58 = inttoptr i32 %v2_eb4c to i32*
  %v5_eb58 = call i32 @function_12a90(i32* %v4_eb58, i32 %v3_eb50, i32 %arg3, i32 %v1_eb40)
  %v2_eb5c = load i32, i32* @global_var_1f270.125, align 4
  store i32 %v2_eb5c, i32* %r2.global-to-local, align 4
  store i32 %v5_eb58, i32* @r8, align 4
  %v0_eb64 = load i32, i32* @r5, align 4
  store i32 %v0_eb64, i32* %r0.global-to-local, align 4
  %v1_eb6c = load i32, i32* @sl, align 4
  %v2_eb6c = inttoptr i32 %v1_eb6c to i32*
  store i32 %v5_eb58, i32* %v2_eb6c, align 4
  %v1_eb70 = inttoptr i32 %v0_eb64 to i8*
  %v2_eb70 = call i32 @function_10b20(i8* %v1_eb70)
  %sext = mul i32 %v2_eb70, 16777216
  %v1_eb74 = sdiv i32 %sext, 16777216
  %v2_eb74 = add nsw i32 %v1_eb74, 1
  store i32 %v2_eb74, i32* @r4, align 4
  store i32 %v1_eb74, i32* @r7, align 4
  store i32 %v2_eb74, i32* @r0, align 4
  %v0_eb80 = call i32 @function_1203c()
  store i32 %v0_eb80, i32* %r0.global-to-local, align 4
  %v0_eb84 = load i32, i32* @r5, align 4
  store i32 %v0_eb84, i32* %r1.global-to-local, align 4
  %v0_eb88 = load i32, i32* @r4, align 4
  store i32 %v0_eb88, i32* %r2.global-to-local, align 4
  store i32 %v0_eb80, i32* %r6.global-to-local, align 4
  %v3_eb90 = call i32 @function_10b90(i32 %v0_eb80, i32 %v0_eb84, i32 %v0_eb88)
  store i32 %v3_eb90, i32* %r0.global-to-local, align 4
  %v0_eb94 = load i32, i32* @r7, align 4
  %tmp22 = icmp slt i32 %v0_eb94, 1
  %extract.t6 = trunc i32 %v0_eb94 to i8
  br i1 %tmp22, label %dec_label_pc_ebb8, label %dec_label_pc_eb9c

dec_label_pc_eb9c:                                ; preds = %dec_label_pc_eb2c
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_eba0

dec_label_pc_eba0:                                ; preds = %dec_label_pc_eba0, %dec_label_pc_eb9c
  %v2_eba8 = phi i32 [ %v1_ebac, %dec_label_pc_eba0 ], [ 0, %dec_label_pc_eb9c ]
  %v1_eba0 = load i32, i32* %r6.global-to-local, align 4
  %v2_eba0 = add i32 %v1_eba0, %v2_eba8
  %v3_eba0 = inttoptr i32 %v2_eba0 to i8*
  %v4_eba0 = load i8, i8* %v3_eba0, align 1
  %v6_eba0 = zext i8 %v4_eba0 to i32
  %v1_eba4 = xor i32 %v6_eba0, 84
  store i32 %v1_eba4, i32* %r3.global-to-local, align 4
  %v1_eba8 = trunc i32 %v1_eba4 to i8
  store i8 %v1_eba8, i8* %v3_eba0, align 1
  %v0_ebac = load i32, i32* %r2.global-to-local, align 4
  %v1_ebac = add i32 %v0_ebac, 1
  store i32 %v1_ebac, i32* %r2.global-to-local, align 4
  %v1_ebb0 = load i32, i32* @r7, align 4
  %v9_ebb0 = icmp eq i32 %v1_ebac, %v1_ebb0
  br i1 %v9_ebb0, label %dec_label_pc_ebb8.loopexit, label %dec_label_pc_eba0

dec_label_pc_ebb8.loopexit:                       ; preds = %dec_label_pc_eba0
  %extract.t = trunc i32 %v1_ebac to i8
  br label %dec_label_pc_ebb8

dec_label_pc_ebb8:                                ; preds = %dec_label_pc_ebb8.loopexit, %dec_label_pc_eb2c
  %v0_ebc8.off0 = phi i8 [ %extract.t, %dec_label_pc_ebb8.loopexit ], [ %extract.t6, %dec_label_pc_eb2c ]
  %v2_ebb8 = load i32, i32* @global_var_1f270.125, align 4
  %v2_ebbc = load i32, i32* @global_var_1f29c.127, align 4
  %v3_ebc0 = mul i32 %v2_ebb8, 16
  store i32 %v3_ebc0, i32* @sb, align 4
  %v2_ebc4 = add i32 %v2_ebbc, %v3_ebc0
  store i32 %v2_ebc4, i32* %r2.global-to-local, align 4
  %v3_ebc8 = add i32 %v2_ebc4, 12
  %v4_ebc8 = inttoptr i32 %v3_ebc8 to i8*
  store i8 %v0_ebc8.off0, i8* %v4_ebc8, align 1
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %v2_eb5c, i32* %r3.global-to-local, align 4
  %v0_ebd4 = load i32, i32* %r6.global-to-local, align 4
  %v1_ebd4 = load i32, i32* @r8, align 4
  %v5_ebd4 = mul i32 %v2_eb5c, 16
  %v6_ebd4 = add i32 %v1_ebd4, %v5_ebd4
  %v7_ebd4 = inttoptr i32 %v6_ebd4 to i32*
  store i32 %v0_ebd4, i32* %v7_ebd4, align 4
  %v2_ebd8 = load i32, i32* @global_var_1f29c.127, align 4
  store i32 %v2_ebd8, i32* @r7, align 4
  %v1_ebdc = inttoptr i32 %arg2 to i8*
  %v2_ebdc = call i32 @function_10b20(i8* %v1_ebdc)
  %sext1 = mul i32 %v2_ebdc, 16777216
  %v1_ebe0 = sdiv i32 %sext1, 16777216
  %v2_ebe0 = add nsw i32 %v1_ebe0, 1
  store i32 %v2_ebe0, i32* @r4, align 4
  store i32 %v1_ebe0, i32* @r6, align 4
  store i32 %v2_ebe0, i32* @r0, align 4
  %v0_ebec = call i32 @function_1203c()
  store i32 %v0_ebec, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_ebf4 = load i32, i32* @r4, align 4
  store i32 %v0_ebf4, i32* %r2.global-to-local, align 4
  store i32 %v0_ebec, i32* %r5.global-to-local, align 4
  %v3_ebfc = call i32 @function_10b90(i32 %v0_ebec, i32 %arg2, i32 %v0_ebf4)
  store i32 %v3_ebfc, i32* %r0.global-to-local, align 4
  %v0_ec00 = load i32, i32* @r6, align 4
  %tmp23 = icmp slt i32 %v0_ec00, 1
  %extract.t8 = trunc i32 %v0_ec00 to i8
  br i1 %tmp23, label %dec_label_pc_ec24, label %dec_label_pc_ec08

dec_label_pc_ec08:                                ; preds = %dec_label_pc_ebb8
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ec0c

dec_label_pc_ec0c:                                ; preds = %dec_label_pc_ec0c, %dec_label_pc_ec08
  %v2_ec14 = phi i32 [ %v1_ec18, %dec_label_pc_ec0c ], [ 0, %dec_label_pc_ec08 ]
  %v1_ec0c = load i32, i32* %r5.global-to-local, align 4
  %v2_ec0c = add i32 %v1_ec0c, %v2_ec14
  %v3_ec0c = inttoptr i32 %v2_ec0c to i8*
  %v4_ec0c = load i8, i8* %v3_ec0c, align 1
  %v6_ec0c = zext i8 %v4_ec0c to i32
  %v1_ec10 = xor i32 %v6_ec0c, 84
  store i32 %v1_ec10, i32* %r3.global-to-local, align 4
  %v1_ec14 = trunc i32 %v1_ec10 to i8
  store i8 %v1_ec14, i8* %v3_ec0c, align 1
  %v0_ec18 = load i32, i32* %r2.global-to-local, align 4
  %v1_ec18 = add i32 %v0_ec18, 1
  store i32 %v1_ec18, i32* %r2.global-to-local, align 4
  %v1_ec1c = load i32, i32* @r6, align 4
  %v9_ec1c = icmp eq i32 %v1_ec18, %v1_ec1c
  br i1 %v9_ec1c, label %dec_label_pc_ec24.loopexit, label %dec_label_pc_ec0c

dec_label_pc_ec24.loopexit:                       ; preds = %dec_label_pc_ec0c
  %extract.t7 = trunc i32 %v1_ec18 to i8
  br label %dec_label_pc_ec24

dec_label_pc_ec24:                                ; preds = %dec_label_pc_ec24.loopexit, %dec_label_pc_ebb8
  %v0_ec34.off0 = phi i8 [ %extract.t7, %dec_label_pc_ec24.loopexit ], [ %extract.t8, %dec_label_pc_ebb8 ]
  %v2_ec24 = load i32, i32* @global_var_1f270.125, align 4
  store i32 %v2_ec24, i32* %r0.global-to-local, align 4
  %v2_ec28 = load i32, i32* @global_var_1f29c.127, align 4
  %v3_ec2c = mul i32 %v2_ec24, 16
  store i32 %v3_ec2c, i32* %r1.global-to-local, align 4
  %v2_ec30 = or i32 %v3_ec2c, 13
  %v3_ec34 = add i32 %v2_ec30, %v2_ec28
  %v4_ec34 = inttoptr i32 %v3_ec34 to i8*
  store i8 %v0_ec34.off0, i8* %v4_ec34, align 1
  store i32 ptrtoint (i16** @global_var_1f2a0.129 to i32), i32* %r4.global-to-local, align 4
  %v2_ec40 = load i16, i16* bitcast (i16** @global_var_1f2a0.129 to i16*), align 4
  %v3_ec40 = zext i16 %v2_ec40 to i32
  store i32 %v3_ec40, i32* %lr.global-to-local, align 4
  %v2_ec48 = load i32, i32* @global_var_1f29c.127, align 4
  store i32 %v2_ec48, i32* %r2.global-to-local, align 4
  %v0_ec50 = load i32, i32* %r1.global-to-local, align 4
  %v2_ec50 = add i32 %v0_ec50, %v2_ec48
  store i32 %v2_ec50, i32* %r1.global-to-local, align 4
  store i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_1f2a0.129 to i32), i32 16), i32 16), i32* %r3.global-to-local, align 4
  %v0_ec58 = load i32, i32* @sb, align 4
  %v1_ec58 = load i32, i32* @r7, align 4
  %v2_ec58 = add i32 %v1_ec58, %v0_ec58
  store i32 %v2_ec58, i32* %ip.global-to-local, align 4
  %v0_ec5c = load i32, i32* %r0.global-to-local, align 4
  %v1_ec5c = add i32 %v0_ec5c, 1
  store i32 %v1_ec5c, i32* %r0.global-to-local, align 4
  %v3_ec60 = add i32 %v2_ec50, 10
  %v4_ec60 = inttoptr i32 %v3_ec60 to i16*
  store i16 trunc (i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_1f2a0.129 to i32), i32 16), i32 16) to i16), i16* %v4_ec60, align 2
  %v0_ec64 = load i32, i32* %lr.global-to-local, align 4
  %v1_ec64 = trunc i32 %v0_ec64 to i16
  %v2_ec64 = load i32, i32* %r1.global-to-local, align 4
  %v3_ec64 = add i32 %v2_ec64, 8
  %v4_ec64 = inttoptr i32 %v3_ec64 to i16*
  store i16 %v1_ec64, i16* %v4_ec64, align 2
  %v0_ec68 = load i32, i32* %r5.global-to-local, align 4
  %v1_ec68 = load i32, i32* %ip.global-to-local, align 4
  %v2_ec68 = add i32 %v1_ec68, 4
  %v3_ec68 = inttoptr i32 %v2_ec68 to i32*
  store i32 %v0_ec68, i32* %v3_ec68, align 4
  %v1_ec6c = load i32, i32* @fp, align 4
  %v2_ec6c = inttoptr i32 %v1_ec6c to i32*
  store i32 %v1_ec5c, i32* %v2_ec6c, align 4
  %v0_ec70 = load i32, i32* %r3.global-to-local, align 4
  %v1_ec70 = trunc i32 %v0_ec70 to i16
  %v2_ec70 = load i32, i32* %r4.global-to-local, align 4
  %v3_ec70 = inttoptr i32 %v2_ec70 to i16*
  store i16 %v1_ec70, i16* %v3_ec70, align 2
  store i32 %v3_eb2c, i32* @r4, align 4
  store i32 %v6_eb2c, i32* @r5, align 4
  store i32 %v9_eb2c, i32* @r6, align 4
  store i32 %v12_eb2c, i32* @r7, align 4
  store i32 %v15_eb2c, i32* @r8, align 4
  store i32 %v18_eb2c, i32* @sb, align 4
  store i32 %v21_eb2c, i32* @sl, align 4
  store i32 %v24_eb2c, i32* @fp, align 4
  ret i32 %v1_ec5c

; uselistorder directives
  uselistorder i32 %v3_ec2c, { 1, 0 }
  uselistorder i32 %v1_ec18, { 0, 2, 3, 1 }
  uselistorder i32 %v0_ebec, { 1, 0, 2 }
  uselistorder i32 %v3_ebc0, { 1, 0 }
  uselistorder i32 %v1_ebac, { 0, 2, 3, 1 }
  uselistorder i32 %v0_eb80, { 1, 0, 2 }
  uselistorder i32 %v2_eb5c, { 1, 0, 2 }
  uselistorder i32 %v3_eb50, { 1, 0 }
  uselistorder i32 %v1_eb40, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder i32 (i8*)* @function_10b20, { 0, 1, 9, 10, 11, 12, 13, 27, 2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28 }
  uselistorder i32 %arg2, { 3, 2, 1, 0, 4 }
}

define i32 @function_ec8c(i32 %arg1) local_unnamed_addr {
dec_label_pc_ec8c:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp334 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-42 = alloca i32, align 4
  %stack_var_-77 = alloca i32, align 4
  %stack_var_-45 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-352 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-1866 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_ec8c = load i32, i32* @r4, align 4
  %v18_ec8c = load i32, i32* @sb, align 4
  %v21_ec8c = load i32, i32* @sl, align 4
  %v24_ec8c = load i32, i32* @fp, align 4
  %v0_ec98 = call i32 @function_112d0()
  %v7_ec9c = icmp eq i32 %v0_ec98, -1
  %. = zext i1 %v7_ec9c to i32
  %tmp369 = icmp slt i32 %v0_ec98, 1
  %storemerge328 = select i1 %tmp369, i32 %., i32 1
  store i32 %storemerge328, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_212fc.121 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ecb8 = icmp eq i32 %storemerge328, 0
  store i1 %v2_ecb8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_ec98, i32* @global_var_212fc.121, align 4
  br i1 %v2_ecb8, label %dec_label_pc_ecd4, label %dec_label_pc_ecc4

dec_label_pc_ecc4:                                ; preds = %dec_label_pc_ec8c
  store i32 %v3_ec8c, i32* %r4.global-to-local, align 4
  store i32 %v18_ec8c, i32* @sb, align 4
  store i32 %v21_ec8c, i32* @sl, align 4
  store i32 %v24_ec8c, i32* @fp, align 4
  ret i32 %v0_ec98

dec_label_pc_ecd4:                                ; preds = %dec_label_pc_ec8c
  %v0_ecd4 = call i32 @function_10ddc()
  store i32 ptrtoint (i32* @global_var_212d8.46 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_ecd4, i32* @global_var_212d8.46, align 4
  %v1_ece0 = call i32 @function_e2f8(i32 %v0_ecd4)
  %v0_ece4 = load i32, i32* @r4, align 4
  %v1_ece8 = inttoptr i32 %v0_ece4 to i32*
  %v2_ece8 = call i32 @function_11260(i32* %v1_ece8)
  store i32 ptrtoint (i32* @global_var_1f2a4.123 to i32), i32* %r2.global-to-local, align 4
  store i32 388, i32* %r1.global-to-local, align 4
  store i32 %v2_ece8, i32* @global_var_1f2a4.123, align 4
  %v2_ecfc = call i32 @function_1295c(i32 356, i32 388)
  store i32 ptrtoint (i32* @global_var_212f4.134 to i32), i32* %r3.global-to-local, align 4
  %v0_ed04 = load i32, i32* @r4, align 4
  store i32 %v0_ed04, i32* %stack_var_-52, align 4
  store i32 %v2_ecfc, i32* @global_var_212f4.134, align 4
  store i32 %v0_ed04, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ed10

dec_label_pc_ed10:                                ; preds = %dec_label_pc_ed10.dec_label_pc_ed10_crit_edge, %dec_label_pc_ecd4
  %v2_ed2c = phi i32 [ %v2_ed2c.pre, %dec_label_pc_ed10.dec_label_pc_ed10_crit_edge ], [ %v2_ecfc, %dec_label_pc_ecd4 ]
  %v0_ed14 = phi i32 [ %v0_ed5c, %dec_label_pc_ed10.dec_label_pc_ed10_crit_edge ], [ %v0_ed04, %dec_label_pc_ecd4 ]
  %v1_ed34 = add i32 %v0_ed14, 1
  store i32 %v1_ed34, i32* %ip.global-to-local, align 4
  %v3_ed38 = mul i32 %v0_ed14, 388
  %v2_ed40 = add i32 %v3_ed38, %v2_ed2c
  store i32 %v2_ed40, i32* @r3, align 4
  store i32 %v2_ed40, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ed54 = add i32 %v2_ed40, 4
  %v3_ed54 = inttoptr i32 %v2_ed54 to i32*
  store i32 -1, i32* %v3_ed54, align 4
  %v0_ed58 = load i32, i32* @r5, align 4
  %v1_ed58 = load i32, i32* %r1.global-to-local, align 4
  %v2_ed58 = add i32 %v1_ed58, 12
  %v3_ed58 = inttoptr i32 %v2_ed58 to i32*
  store i32 %v0_ed58, i32* %v3_ed58, align 4
  %v0_ed5c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_ed5c, i32* %stack_var_-52, align 4
  %v5_ed60 = icmp slt i32 %v1_ed34, 356
  br i1 %v5_ed60, label %dec_label_pc_ed10.dec_label_pc_ed10_crit_edge, label %dec_label_pc_ed64

dec_label_pc_ed10.dec_label_pc_ed10_crit_edge:    ; preds = %dec_label_pc_ed10
  %v2_ed2c.pre = load i32, i32* @global_var_212f4.134, align 4
  br label %dec_label_pc_ed10

dec_label_pc_ed64:                                ; preds = %dec_label_pc_ed10
  %v8_ed50 = icmp eq i32 %v1_ed34, 356
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v8_ed50, i1* %cpsr_z.global-to-local, align 1
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_ed6c = load i32, i32* %r2.global-to-local, align 4
  %v1_ed6c = add i32 %v0_ed6c, 7
  store i32 %v1_ed6c, i32* %r2.global-to-local, align 4
  %v3_ed70 = call i32 @function_11df4(i32 2, i32 3, i32 %v1_ed6c)
  %v2_ed78 = icmp eq i32 %v3_ed70, -1
  store i1 %v2_ed78, i1* %cpsr_c.global-to-local, align 1
  %v7_ed78 = icmp eq i32 %v3_ed70, -1
  store i1 %v7_ed78, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ed70, i32* %r4.global-to-local, align 4
  store i32 %v3_ed70, i32* @global_var_212f8.136, align 4
  br i1 %v7_ed78, label %dec_label_pc_10420, label %dec_label_pc_ed88

dec_label_pc_ed88:                                ; preds = %dec_label_pc_ed64
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_ed8c = load i32, i32* @r5, align 4
  store i32 %v0_ed8c, i32* %r2.global-to-local, align 4
  %v2_ed90 = call i32 @function_11414(i32 %v3_ed70, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_ed98 = or i32 %v2_ed90, 2048
  store i32 %v1_ed98, i32* %r2.global-to-local, align 4
  %v0_ed9c = load i32, i32* %r4.global-to-local, align 4
  %v2_eda0 = call i32 @function_11414(i32 %v0_ed9c, i32 4)
  %v2_eda8 = ptrtoint i32* %stack_var_-56 to i32
  %v2_edac = load i32, i32* @global_var_212f8.136, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_edb4 = load i32, i32* @r5, align 4
  store i32 %v0_edb4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_edbc = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_edbc, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v5_edcc = call i32 @function_11db0(i32 %v2_edac, i32 %v0_edb4, i32 3, i32 %v2_edbc, i32 4)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_edd0 = icmp eq i32 %v5_edcc, 0
  store i1 %v2_edd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_edd0, label %dec_label_pc_edd8, label %dec_label_pc_10414

dec_label_pc_edd8:                                ; preds = %dec_label_pc_ed88, %dec_label_pc_edd8
  %v0_edd8 = call i32 @function_e29c()
  %v1_ede8 = mul i32 %v0_edd8, 256
  %v3_edec = and i32 %v1_ede8, 65280
  %tmp372 = udiv i32 %v0_edd8, 256
  %v4_edf0 = urem i32 %tmp372, 256
  %v5_edf0 = or i32 %v4_edf0, %v3_edec
  store i32 %v5_edf0, i32* %r3.global-to-local, align 4
  %v2_edf4 = icmp ugt i32 %v5_edf0, 1023
  store i1 %v2_edf4, i1* %cpsr_c.global-to-local, align 1
  %v7_edf4 = icmp eq i32 %v5_edf0, 1024
  store i1 %v7_edf4, i1* %cpsr_z.global-to-local, align 1
  %v3_edf8 = icmp ult i32 %v5_edf0, 1022
  br i1 %v3_edf8, label %dec_label_pc_edd8, label %dec_label_pc_edfc

dec_label_pc_edfc:                                ; preds = %dec_label_pc_edd8
  %v5_ede4.le = trunc i32 %v0_edd8 to i16
  store i32 ptrtoint (i8** @global_var_1f274.138 to i32), i32* %ip.global-to-local, align 4
  %v2_ee00 = load i8, i8* bitcast (i8** @global_var_1f274.138 to i8*), align 4
  %v3_ee00 = zext i8 %v2_ee00 to i32
  %v1_ee04 = and i32 %v3_ee00, 240
  %v1_ee08 = or i32 %v1_ee04, 5
  store i32 %v1_ee08, i32* %r3.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i8 69, i8* bitcast (i8** @global_var_1f274.138 to i8*), align 4
  store i16 10240, i16* bitcast (i32* @global_var_1f276.139 to i16*), align 4
  %v0_ee28 = call i32 @function_e29c()
  %v1_ee28 = trunc i32 %v0_ee28 to i16
  %v3_ee30 = load i8, i8* @global_var_1f294.142, align 1
  store i32 ptrtoint (i32* @global_var_1f288.141 to i32), i32* @lr, align 4
  store i32 ptrtoint (i8** @global_var_1f274.138 to i32), i32* %ip.global-to-local, align 4
  %v1_ee40 = urem i8 %v3_ee30, 16
  store i16 %v1_ee28, i16* bitcast (i32* @global_var_1f278.143 to i16*), align 4
  %v1_ee48 = or i8 %v1_ee40, 80
  store i32 64, i32* %r3.global-to-local, align 4
  store i8 64, i8* bitcast (i32* @global_var_1f27c.144 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_1f27d.145 to i8*), align 4
  store i8 %v1_ee48, i8* @global_var_1f294.142, align 1
  %v4_ee60 = sext i16 %v5_ede4.le to i32
  store i32 %v4_ee60, i32* %r2.global-to-local, align 4
  store i32 5888, i32* %r1.global-to-local, align 4
  store i16 5888, i16* @global_var_1f28a.146, align 2
  store i16 %v5_ede4.le, i16* bitcast (i32* @global_var_1f288.141 to i16*), align 4
  %v0_ee70 = call i32 @function_e29c()
  %v1_ee70 = trunc i32 %v0_ee70 to i16
  store i32 ptrtoint (i32* @global_var_1f288.141 to i32), i32* %ip.global-to-local, align 4
  %v3_ee78 = load i8, i8* @global_var_1f295.147, align 1
  %v4_ee78 = zext i8 %v3_ee78 to i32
  %v1_ee7c = or i32 %v4_ee78, 2
  store i32 %v1_ee7c, i32* %r3.global-to-local, align 4
  store i16 %v1_ee70, i16* bitcast (i32* @global_var_1f296.148 to i16*), align 4
  %v1_ee84 = trunc i32 %v1_ee7c to i8
  store i8 %v1_ee84, i8* @global_var_1f295.147, align 1
  store i32 ptrtoint (i32* @global_var_16990.152 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_ee94 = call i32 @function_eb2c(i32 ptrtoint ([5 x i8]* @global_var_1698c.150 to i32), i32 ptrtoint (i32* @global_var_16990.152 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_16994.154 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_eea4 = call i32 @function_eb2c(i32 ptrtoint ([5 x i8]* @global_var_1698c.150 to i32), i32 ptrtoint ([5 x i8]* @global_var_16994.154 to i32), i32 8)
  store i32 ptrtoint ([9 x i8]* @global_var_1699c.156 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_eeb4 = call i32 @function_eb2c(i32 ptrtoint ([5 x i8]* @global_var_1698c.150 to i32), i32 ptrtoint ([9 x i8]* @global_var_1699c.156 to i32), i32 12)
  store i32 ptrtoint (i32* @global_var_16990.152 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_eec4 = call i32 @function_eb2c(i32 ptrtoint ([8 x i8]* @global_var_169a8.158 to i32), i32 ptrtoint (i32* @global_var_16990.152 to i32), i32 7)
  store i32 ptrtoint ([9 x i8]* @global_var_169b0.160 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_eed4 = call i32 @function_eb2c(i32 ptrtoint ([5 x i8]* @global_var_1698c.150 to i32), i32 ptrtoint ([9 x i8]* @global_var_169b0.160 to i32), i32 12)
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_169bc.162 to i32), i32* %r1.global-to-local, align 4
  %v5_eee4 = call i32 @function_eb2c(i32 ptrtoint ([6 x i8]* @global_var_169bc.162 to i32), i32 ptrtoint ([6 x i8]* @global_var_169bc.162 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_169c4.164 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_eef4 = call i32 @function_eb2c(i32 ptrtoint ([5 x i8]* @global_var_1698c.150 to i32), i32 ptrtoint ([6 x i8]* @global_var_169c4.164 to i32), i32 9)
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_169cc.166 to i32), i32* %r1.global-to-local, align 4
  %v5_ef04 = call i32 @function_eb2c(i32 ptrtoint ([8 x i8]* @global_var_169cc.166 to i32), i32 ptrtoint ([8 x i8]* @global_var_169cc.166 to i32), i32 14)
  store i32 ptrtoint ([8 x i8]* @global_var_169a8.158 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_ef14 = call i32 @function_eb2c(i32 ptrtoint ([5 x i8]* @global_var_1698c.150 to i32), i32 ptrtoint ([8 x i8]* @global_var_169a8.158 to i32), i32 11)
  store i32 ptrtoint (i32* @global_var_169d4.168 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_ef24 = call i32 @function_eb2c(i32 ptrtoint ([5 x i8]* @global_var_1698c.150 to i32), i32 ptrtoint (i32* @global_var_169d4.168 to i32), i32 17)
  store i32 ptrtoint ([6 x i8]* @global_var_169e4.170 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_ef34 = call i32 @function_eb2c(i32 ptrtoint ([5 x i8]* @global_var_1698c.150 to i32), i32 ptrtoint ([6 x i8]* @global_var_169e4.170 to i32), i32 9)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_169ec.172 to i32), i32* %r1.global-to-local, align 4
  %v5_ef44 = call i32 @function_eb2c(i32 ptrtoint ([5 x i8]* @global_var_169ec.172 to i32), i32 ptrtoint ([5 x i8]* @global_var_169ec.172 to i32), i32 8)
  store i32 ptrtoint (i32* @global_var_169f4.174 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_ef54 = call i32 @function_eb2c(i32 ptrtoint ([8 x i8]* @global_var_169a8.158 to i32), i32 ptrtoint (i32* @global_var_169f4.174 to i32), i32 15)
  store i32 ptrtoint (i32* @global_var_16a00.176 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_ef64 = call i32 @function_eb2c(i32 ptrtoint ([8 x i8]* @global_var_169a8.158 to i32), i32 ptrtoint (i32* @global_var_16a00.176 to i32), i32 15)
  store i32 ptrtoint ([5 x i8]* @global_var_16a0c.178 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_ef74 = call i32 @function_eb2c(i32 ptrtoint ([6 x i8]* @global_var_169bc.162 to i32), i32 ptrtoint ([5 x i8]* @global_var_16a0c.178 to i32), i32 9)
  %v2_ef7c = ptrtoint i32* %stack_var_-1866 to i32
  %v1_f2a4 = add i32 %v2_ef7c, 20
  %v1_f304 = add i32 %v2_ef7c, 16
  %v2_f304 = inttoptr i32 %v1_f304 to i32*
  %v1_f3a8 = add i32 %v2_ef7c, 12
  %v2_f3a8 = inttoptr i32 %v1_f3a8 to i32*
  %v2_f598 = ptrtoint i32* %stack_var_-40 to i32
  %v2_f5e0 = ptrtoint i32* %stack_var_-68 to i32
  %v2_f5e4 = ptrtoint i32* %stack_var_-224 to i32
  %v2_f5e8 = ptrtoint i32* %stack_var_-352 to i32
  %v2_1006c = ptrtoint i32* %stack_var_-45 to i32
  %v2_10080 = ptrtoint i32* %stack_var_-77 to i32
  %v2_ffd8 = ptrtoint i32* %stack_var_-60 to i32
  %v2_f834 = ptrtoint i32* %stack_var_-104 to i32
  %v2_10310 = ptrtoint i32* %stack_var_-96 to i32
  %v2_10368 = ptrtoint i32* %stack_var_-42 to i32
  %v1_f314 = add i32 %v2_ef7c, 9
  %v2_f314 = inttoptr i32 %v1_f314 to i8*
  br label %dec_label_pc_ef84

dec_label_pc_ef84:                                ; preds = %dec_label_pc_f788, %dec_label_pc_edfc
  %stack_var_-1880.0 = phi i32 [ %tmp334, %dec_label_pc_edfc ], [ %stack_var_-1880.1, %dec_label_pc_f788 ]
  store i32 ptrtoint (i32* @global_var_1f2a4.123 to i32), i32* %r1.global-to-local, align 4
  store i32 %stack_var_-1880.0, i32* %r2.global-to-local, align 4
  %v2_ef8c = load i32, i32* @global_var_1f2a4.123, align 4
  store i32 %v2_ef8c, i32* @r4, align 4
  %v3_ef90 = icmp uge i32 %stack_var_-1880.0, %v2_ef8c
  store i1 %v3_ef90, i1* %cpsr_c.global-to-local, align 1
  %v9_ef90 = icmp eq i32 %stack_var_-1880.0, %v2_ef8c
  store i1 %v9_ef90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ef90, label %dec_label_pc_f298, label %dec_label_pc_ef98

dec_label_pc_ef98:                                ; preds = %dec_label_pc_ef84
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  br label %dec_label_pc_efa8

dec_label_pc_efa8:                                ; preds = %bb407, %dec_label_pc_ef98
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-96, align 4
  %v0_efbc = call i32 @function_e29c()
  %v1_efbc = trunc i32 %v0_efbc to i16
  store i32 ptrtoint (i32* @global_var_212d8.46 to i32), i32* %ip.global-to-local, align 4
  %v2_efc8 = load i32, i32* @global_var_212d8.46, align 4
  store i32 %v2_efc8, i32* %r3.global-to-local, align 4
  store i16 %v1_efbc, i16* bitcast (i32* @global_var_1f278.143 to i16*), align 4
  store i32 %v2_efc8, i32* @global_var_1f280.179, align 4
  br label %dec_label_pc_efd4

dec_label_pc_efd4:                                ; preds = %dec_label_pc_f12c, %dec_label_pc_f004, %dec_label_pc_f160, %dec_label_pc_f154, %dec_label_pc_f148, %dec_label_pc_f13c, %.thread47, %.thread31, %.thread27, %.thread23, %bb398, %bb397, %bb396, %bb395, %bb394, %bb393, %bb392, %bb391, %bb390, %bb389, %dec_label_pc_f0a0, %dec_label_pc_f098, %bb383, %dec_label_pc_f068, %dec_label_pc_f044, %bb376, %dec_label_pc_f014, %bb375, %dec_label_pc_effc, %bb374, %bb400, %dec_label_pc_efa8
  %v0_efd4 = call i32 @function_e29c()
  %v1_efd8 = urem i32 %v0_efd4, 256
  store i32 %v1_efd8, i32* %r1.global-to-local, align 4
  %v3_efdc = udiv i32 %v0_efd4, 256
  store i32 %v3_efdc, i32* %r3.global-to-local, align 4
  %v3_efe0 = udiv i32 %v0_efd4, 65536
  store i32 %v3_efe0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_efe4 = icmp eq i32 %v1_efd8, 0
  store i1 %v2_efe4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_efe4, label %bb374, label %bb373

bb373:                                            ; preds = %dec_label_pc_efd4
  %v3_efe8 = icmp ugt i32 %v1_efd8, 126
  store i1 %v3_efe8, i1* %cpsr_c.global-to-local, align 1
  %v8_efe8 = icmp eq i32 %v1_efd8, 127
  store i1 %v8_efe8, i1* %cpsr_z.global-to-local, align 1
  br label %bb374

bb374:                                            ; preds = %dec_label_pc_efd4, %bb373
  %v0_eff8 = phi i1 [ true, %dec_label_pc_efd4 ], [ %v8_efe8, %bb373 ]
  %v1_efec = urem i32 %v3_efdc, 256
  store i32 %v1_efec, i32* %ip.global-to-local, align 4
  %v1_eff0 = urem i32 %v3_efe0, 256
  store i32 %v1_eff0, i32* %r2.global-to-local, align 4
  %v1_eff4 = and i32 %v0_efd4, 8388608
  %v2_eff4 = icmp ne i32 %v1_eff4, 0
  store i1 %v2_eff4, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_eff8, label %dec_label_pc_efd4, label %dec_label_pc_effc

dec_label_pc_effc:                                ; preds = %bb374
  %v2_effc = icmp ugt i32 %v1_efd8, 2
  store i1 %v2_effc, i1* %cpsr_c.global-to-local, align 1
  %v7_effc = icmp eq i32 %v1_efd8, 3
  store i1 %v7_effc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_effc, label %dec_label_pc_efd4, label %dec_label_pc_f004

dec_label_pc_f004:                                ; preds = %dec_label_pc_effc
  %v1_f004 = add nsw i32 %v1_efd8, -15
  store i32 %v1_f004, i32* %r3.global-to-local, align 4
  %v2_f008 = icmp ugt i32 %v1_efd8, 55
  store i1 %v2_f008, i1* %cpsr_c.global-to-local, align 1
  %v7_f008 = icmp eq i32 %v1_efd8, 56
  store i1 %v7_f008, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f008, label %dec_label_pc_efd4, label %bb375

bb375:                                            ; preds = %dec_label_pc_f004
  %v3_f00c = icmp ne i32 %v1_f004, 0
  store i1 %v3_f00c, i1* %cpsr_c.global-to-local, align 1
  %v8_f00c = icmp eq i32 %v1_f004, 1
  store i1 %v8_f00c, i1* %cpsr_z.global-to-local, align 1
  %v2_f010 = xor i1 %v3_f00c, true
  %v3_f010 = or i1 %v8_f00c, %v2_f010
  br i1 %v3_f010, label %dec_label_pc_efd4, label %dec_label_pc_f014

dec_label_pc_f014:                                ; preds = %bb375
  %v2_f014 = icmp ugt i32 %v1_efd8, 9
  store i1 %v2_f014, i1* %cpsr_c.global-to-local, align 1
  %v7_f014 = icmp eq i32 %v1_efd8, 10
  store i1 %v7_f014, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f014, label %dec_label_pc_efd4, label %dec_label_pc_f01c

dec_label_pc_f01c:                                ; preds = %dec_label_pc_f014
  %v2_f01c = icmp ugt i32 %v1_efd8, 191
  store i1 %v2_f01c, i1* %cpsr_c.global-to-local, align 1
  %v7_f01c = icmp eq i32 %v1_efd8, 192
  store i1 %v7_f01c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f01c, label %bb376, label %dec_label_pc_f028

bb376:                                            ; preds = %dec_label_pc_f01c
  %v3_f020 = icmp ugt i32 %v1_efec, 167
  store i1 %v3_f020, i1* %cpsr_c.global-to-local, align 1
  %v8_f020 = icmp eq i32 %v1_efec, 168
  store i1 %v8_f020, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f020, label %dec_label_pc_efd4, label %dec_label_pc_f028

dec_label_pc_f028:                                ; preds = %dec_label_pc_f01c, %bb376
  %v7_f028 = icmp eq i32 %v1_efd8, 172
  %.460 = zext i1 %v7_f028 to i32
  store i32 %.460, i32* %r3.global-to-local, align 4
  %v2_f034 = icmp ugt i32 %v1_efec, 14
  store i1 %v2_f034, i1* %cpsr_c.global-to-local, align 1
  %v7_f034 = icmp eq i32 %v1_efec, 15
  store i1 %v7_f034, i1* %cpsr_z.global-to-local, align 1
  %v2_f038 = xor i1 %v2_f034, true
  %v3_f038 = or i1 %v7_f034, %v2_f038
  br i1 %v3_f038, label %.thread7, label %bb379

.thread7:                                         ; preds = %dec_label_pc_f028
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f04c

bb379:                                            ; preds = %dec_label_pc_f028
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f03c = icmp eq i1 %v7_f028, false
  store i1 %v2_f03c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f03c, label %dec_label_pc_f04c, label %dec_label_pc_f044

dec_label_pc_f044:                                ; preds = %bb379
  %v2_f044 = icmp ugt i32 %v1_efec, 30
  store i1 %v2_f044, i1* %cpsr_c.global-to-local, align 1
  %v7_f044 = icmp eq i32 %v1_efec, 31
  store i1 %v7_f044, i1* %cpsr_z.global-to-local, align 1
  %v2_f048 = xor i1 %v2_f044, true
  %v3_f048 = or i1 %v7_f044, %v2_f048
  br i1 %v3_f048, label %dec_label_pc_efd4, label %dec_label_pc_f04c

dec_label_pc_f04c:                                ; preds = %.thread7, %dec_label_pc_f044, %bb379
  %v7_f04c = icmp eq i32 %v1_efd8, 100
  %.461 = zext i1 %v7_f04c to i32
  store i32 %.461, i32* %r3.global-to-local, align 4
  %v2_f058 = icmp ugt i32 %v1_efec, 62
  store i1 %v2_f058, i1* %cpsr_c.global-to-local, align 1
  %v7_f058 = icmp eq i32 %v1_efec, 63
  store i1 %v7_f058, i1* %cpsr_z.global-to-local, align 1
  %v2_f05c = xor i1 %v2_f058, true
  %v3_f05c = or i1 %v7_f058, %v2_f05c
  br i1 %v3_f05c, label %.thread12, label %bb382

.thread12:                                        ; preds = %dec_label_pc_f04c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f070

bb382:                                            ; preds = %dec_label_pc_f04c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f060 = icmp eq i1 %v7_f04c, false
  store i1 %v2_f060, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f060, label %dec_label_pc_f070, label %dec_label_pc_f068

dec_label_pc_f068:                                ; preds = %bb382
  %v2_f068 = icmp ugt i32 %v1_efec, 125
  store i1 %v2_f068, i1* %cpsr_c.global-to-local, align 1
  %v7_f068 = icmp eq i32 %v1_efec, 126
  store i1 %v7_f068, i1* %cpsr_z.global-to-local, align 1
  %v2_f06c = xor i1 %v2_f068, true
  %v3_f06c = or i1 %v7_f068, %v2_f06c
  br i1 %v3_f06c, label %dec_label_pc_efd4, label %dec_label_pc_f070

dec_label_pc_f070:                                ; preds = %.thread12, %dec_label_pc_f068, %bb382
  %v2_f070 = icmp ugt i32 %v1_efd8, 168
  store i1 %v2_f070, i1* %cpsr_c.global-to-local, align 1
  %v7_f070 = icmp eq i32 %v1_efd8, 169
  store i1 %v7_f070, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f070, label %bb383, label %dec_label_pc_f07c

bb383:                                            ; preds = %dec_label_pc_f070
  %v3_f074 = icmp eq i32 %v1_efec, 255
  store i1 %v3_f074, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_f074, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f074, label %dec_label_pc_efd4, label %dec_label_pc_f07c

dec_label_pc_f07c:                                ; preds = %dec_label_pc_f070, %bb383
  %v7_f07c = icmp eq i32 %v1_efd8, 198
  %.462 = zext i1 %v7_f07c to i32
  store i32 %.462, i32* %r3.global-to-local, align 4
  %v2_f088 = icmp ugt i32 %v1_efec, 16
  store i1 %v2_f088, i1* %cpsr_c.global-to-local, align 1
  %v7_f088 = icmp eq i32 %v1_efec, 17
  store i1 %v7_f088, i1* %cpsr_z.global-to-local, align 1
  %v2_f08c = xor i1 %v2_f088, true
  %v3_f08c = or i1 %v7_f088, %v2_f08c
  br i1 %v3_f08c, label %.thread18, label %bb386

.thread18:                                        ; preds = %dec_label_pc_f07c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f0a0

bb386:                                            ; preds = %dec_label_pc_f07c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f090 = icmp eq i1 %v7_f07c, false
  store i1 %v2_f090, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f090, label %dec_label_pc_f0a0, label %dec_label_pc_f098

dec_label_pc_f098:                                ; preds = %bb386
  %v2_f098 = icmp ugt i32 %v1_efec, 18
  store i1 %v2_f098, i1* %cpsr_c.global-to-local, align 1
  %v7_f098 = icmp eq i32 %v1_efec, 19
  store i1 %v7_f098, i1* %cpsr_z.global-to-local, align 1
  %v2_f09c = xor i1 %v2_f098, true
  %v3_f09c = or i1 %v7_f098, %v2_f09c
  br i1 %v3_f09c, label %dec_label_pc_efd4, label %dec_label_pc_f0a0

dec_label_pc_f0a0:                                ; preds = %.thread18, %dec_label_pc_f098, %bb386
  %v2_f0a0 = icmp ugt i32 %v1_efd8, 222
  store i1 %v2_f0a0, i1* %cpsr_c.global-to-local, align 1
  %v7_f0a0 = icmp eq i32 %v1_efd8, 223
  store i1 %v7_f0a0, i1* %cpsr_z.global-to-local, align 1
  %v2_f0a4 = xor i1 %v7_f0a0, true
  %v3_f0a4 = and i1 %v2_f0a0, %v2_f0a4
  br i1 %v3_f0a4, label %dec_label_pc_efd4, label %dec_label_pc_f0a8

dec_label_pc_f0a8:                                ; preds = %dec_label_pc_f0a0
  %v7_f0a8 = icmp eq i32 %v1_efd8, 106
  %.463 = zext i1 %v7_f0a8 to i32
  %v2_f0b4 = icmp ugt i32 %v1_efec, 185
  store i1 %v2_f0b4, i1* %cpsr_c.global-to-local, align 1
  %v7_f0b4 = icmp eq i32 %v1_efec, 186
  store i1 %v7_f0b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0b4, label %bb389, label %dec_label_pc_f0c0

bb389:                                            ; preds = %dec_label_pc_f0a8
  %v2_f0a8 = icmp ugt i32 %v1_efd8, 105
  store i1 %v2_f0a8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_f0a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0a8, label %dec_label_pc_efd4, label %dec_label_pc_f0c0

dec_label_pc_f0c0:                                ; preds = %dec_label_pc_f0a8, %bb389
  %v2_f0c0 = icmp ugt i32 %v1_efec, 186
  store i1 %v2_f0c0, i1* %cpsr_c.global-to-local, align 1
  %v7_f0c0 = icmp eq i32 %v1_efec, 187
  store i1 %v7_f0c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0c0, label %.thread23, label %.thread24

.thread24:                                        ; preds = %dec_label_pc_f0c0
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f0d4

.thread23:                                        ; preds = %dec_label_pc_f0c0
  store i32 %.463, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f0cc = icmp eq i1 %v7_f0a8, false
  store i1 %v2_f0cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f0cc, label %dec_label_pc_f0d4, label %dec_label_pc_efd4

dec_label_pc_f0d4:                                ; preds = %.thread24, %.thread23
  %v2_f0d4 = icmp ugt i32 %v1_efec, 184
  store i1 %v2_f0d4, i1* %cpsr_c.global-to-local, align 1
  %v7_f0d4 = icmp eq i32 %v1_efec, 185
  store i1 %v7_f0d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0d4, label %.thread27, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_f0d4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f0e8

.thread27:                                        ; preds = %dec_label_pc_f0d4
  store i32 %.463, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f0e0 = icmp eq i1 %v7_f0a8, false
  store i1 %v2_f0e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f0e0, label %dec_label_pc_f0e8, label %dec_label_pc_efd4

dec_label_pc_f0e8:                                ; preds = %.thread28, %.thread27
  %v2_f0e8 = icmp ugt i32 %v1_efec, 183
  store i1 %v2_f0e8, i1* %cpsr_c.global-to-local, align 1
  %v7_f0e8 = icmp eq i32 %v1_efec, 184
  store i1 %v7_f0e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0e8, label %.thread31, label %.thread32

.thread32:                                        ; preds = %dec_label_pc_f0e8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f0fc

.thread31:                                        ; preds = %dec_label_pc_f0e8
  store i32 %.463, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f0f4 = icmp eq i1 %v7_f0a8, false
  store i1 %v2_f0f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f0f4, label %dec_label_pc_f0fc, label %dec_label_pc_efd4

dec_label_pc_f0fc:                                ; preds = %.thread32, %.thread31
  %v2_f0fc = icmp ugt i32 %v1_efd8, 149
  store i1 %v2_f0fc, i1* %cpsr_c.global-to-local, align 1
  %v7_f0fc = icmp eq i32 %v1_efd8, 150
  store i1 %v7_f0fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0fc, label %bb390, label %dec_label_pc_f108

bb390:                                            ; preds = %dec_label_pc_f0fc
  %v3_f100 = icmp ugt i32 %v1_efec, 30
  store i1 %v3_f100, i1* %cpsr_c.global-to-local, align 1
  %v8_f100 = icmp eq i32 %v1_efec, 31
  store i1 %v8_f100, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f100, label %dec_label_pc_efd4, label %dec_label_pc_f108

dec_label_pc_f108:                                ; preds = %dec_label_pc_f0fc, %bb390
  %v2_f108 = icmp ugt i32 %v1_efd8, 48
  store i1 %v2_f108, i1* %cpsr_c.global-to-local, align 1
  %v7_f108 = icmp eq i32 %v1_efd8, 49
  store i1 %v7_f108, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f108, label %bb391, label %dec_label_pc_f114

bb391:                                            ; preds = %dec_label_pc_f108
  %v3_f10c = icmp ugt i32 %v1_efec, 50
  store i1 %v3_f10c, i1* %cpsr_c.global-to-local, align 1
  %v8_f10c = icmp eq i32 %v1_efec, 51
  store i1 %v8_f10c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f10c, label %dec_label_pc_efd4, label %dec_label_pc_f114

dec_label_pc_f114:                                ; preds = %dec_label_pc_f108, %bb391
  %v2_f114 = icmp ugt i32 %v1_efd8, 177
  store i1 %v2_f114, i1* %cpsr_c.global-to-local, align 1
  %v7_f114 = icmp eq i32 %v1_efd8, 178
  store i1 %v7_f114, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f114, label %bb392, label %dec_label_pc_f120

bb392:                                            ; preds = %dec_label_pc_f114
  %v3_f118 = icmp ugt i32 %v1_efec, 61
  store i1 %v3_f118, i1* %cpsr_c.global-to-local, align 1
  %v8_f118 = icmp eq i32 %v1_efec, 62
  store i1 %v8_f118, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f118, label %dec_label_pc_efd4, label %dec_label_pc_f120

dec_label_pc_f120:                                ; preds = %dec_label_pc_f114, %bb392
  %v2_f120 = icmp ugt i32 %v1_efd8, 159
  store i1 %v2_f120, i1* %cpsr_c.global-to-local, align 1
  %v7_f120 = icmp eq i32 %v1_efd8, 160
  store i1 %v7_f120, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f120, label %bb393, label %dec_label_pc_f12c

bb393:                                            ; preds = %dec_label_pc_f120
  %v3_f124 = icmp ugt i32 %v1_efec, 12
  store i1 %v3_f124, i1* %cpsr_c.global-to-local, align 1
  %v8_f124 = icmp eq i32 %v1_efec, 13
  store i1 %v8_f124, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f124, label %dec_label_pc_efd4, label %dec_label_pc_f12c

dec_label_pc_f12c:                                ; preds = %dec_label_pc_f120, %bb393
  %v1_f12c = add nsw i32 %v1_efd8, -6
  store i32 %v1_f12c, i32* %r3.global-to-local, align 4
  %v2_f130 = icmp ugt i32 %v1_efd8, 10
  store i1 %v2_f130, i1* %cpsr_c.global-to-local, align 1
  %v7_f130 = icmp eq i32 %v1_efd8, 11
  store i1 %v7_f130, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f130, label %dec_label_pc_efd4, label %bb394

bb394:                                            ; preds = %dec_label_pc_f12c
  %v3_f134 = icmp ne i32 %v1_f12c, 0
  store i1 %v3_f134, i1* %cpsr_c.global-to-local, align 1
  %v8_f134 = icmp eq i32 %v1_f12c, 1
  store i1 %v8_f134, i1* %cpsr_z.global-to-local, align 1
  %v2_f138 = xor i1 %v3_f134, true
  %v3_f138 = or i1 %v8_f134, %v2_f138
  br i1 %v3_f138, label %dec_label_pc_efd4, label %dec_label_pc_f13c

dec_label_pc_f13c:                                ; preds = %bb394
  %v2_f13c = icmp ugt i32 %v1_efd8, 21
  store i1 %v2_f13c, i1* %cpsr_c.global-to-local, align 1
  %v7_f13c = icmp eq i32 %v1_efd8, 22
  store i1 %v7_f13c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f13c, label %dec_label_pc_efd4, label %bb395

bb395:                                            ; preds = %dec_label_pc_f13c
  %v3_f140 = icmp ugt i32 %v1_efd8, 20
  store i1 %v3_f140, i1* %cpsr_c.global-to-local, align 1
  %v8_f140 = icmp eq i32 %v1_efd8, 21
  store i1 %v8_f140, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f140, label %dec_label_pc_efd4, label %dec_label_pc_f148

dec_label_pc_f148:                                ; preds = %bb395
  %v2_f148 = icmp ugt i32 %v1_efd8, 27
  store i1 %v2_f148, i1* %cpsr_c.global-to-local, align 1
  %v7_f148 = icmp eq i32 %v1_efd8, 28
  store i1 %v7_f148, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f148, label %dec_label_pc_efd4, label %bb396

bb396:                                            ; preds = %dec_label_pc_f148
  %v3_f14c = icmp ugt i32 %v1_efd8, 25
  store i1 %v3_f14c, i1* %cpsr_c.global-to-local, align 1
  %v8_f14c = icmp eq i32 %v1_efd8, 26
  store i1 %v8_f14c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f14c, label %dec_label_pc_efd4, label %dec_label_pc_f154

dec_label_pc_f154:                                ; preds = %bb396
  %v2_f154 = icmp ugt i32 %v1_efd8, 29
  store i1 %v2_f154, i1* %cpsr_c.global-to-local, align 1
  %v7_f154 = icmp eq i32 %v1_efd8, 30
  store i1 %v7_f154, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f154, label %dec_label_pc_efd4, label %bb397

bb397:                                            ; preds = %dec_label_pc_f154
  %v3_f158 = icmp ugt i32 %v1_efd8, 28
  store i1 %v3_f158, i1* %cpsr_c.global-to-local, align 1
  %v8_f158 = icmp eq i32 %v1_efd8, 29
  store i1 %v8_f158, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f158, label %dec_label_pc_efd4, label %dec_label_pc_f160

dec_label_pc_f160:                                ; preds = %bb397
  %v2_f160 = icmp ugt i32 %v1_efd8, 54
  store i1 %v2_f160, i1* %cpsr_c.global-to-local, align 1
  %v7_f160 = icmp eq i32 %v1_efd8, 55
  store i1 %v7_f160, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f160, label %dec_label_pc_efd4, label %bb398

bb398:                                            ; preds = %dec_label_pc_f160
  %v3_f164 = icmp ugt i32 %v1_efd8, 32
  store i1 %v3_f164, i1* %cpsr_c.global-to-local, align 1
  %v8_f164 = icmp eq i32 %v1_efd8, 33
  store i1 %v8_f164, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f164, label %dec_label_pc_efd4, label %dec_label_pc_f16c

dec_label_pc_f16c:                                ; preds = %bb398
  %v2_f16c = icmp ugt i32 %v1_efd8, 214
  store i1 %v2_f16c, i1* %cpsr_c.global-to-local, align 1
  %v7_f16c = icmp eq i32 %v1_efd8, 215
  store i1 %v7_f16c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f16c, label %.thread47, label %bb399

bb399:                                            ; preds = %dec_label_pc_f16c
  %v3_f170 = icmp ugt i32 %v1_efd8, 213
  store i1 %v3_f170, i1* %cpsr_c.global-to-local, align 1
  %v8_f170 = icmp eq i32 %v1_efd8, 214
  store i1 %v8_f170, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f170, label %bb400, label %dec_label_pc_f180

.thread47:                                        ; preds = %dec_label_pc_f16c
  br label %dec_label_pc_efd4

bb400:                                            ; preds = %bb399
  br label %dec_label_pc_efd4

dec_label_pc_f180:                                ; preds = %bb399
  %v5_f18c = call i32 @llvm.bswap.i32(i32 %v0_efd4)
  store i32 %v5_f18c, i32* %r3.global-to-local, align 4
  %tmp401 = and i32 %v0_efd4, 65280
  %tmp402 = call i32 @llvm.bswap.i32(i32 %tmp401)
  %v3_f194 = udiv i32 %v5_f18c, 16777216
  %tmp403 = and i32 %v0_efd4, 16711680
  %tmp404 = call i32 @llvm.bswap.i32(i32 %tmp403)
  %v4_f19c = udiv i32 %tmp402, 256
  %v4_f1a0 = mul nuw nsw i32 %tmp404, 256
  store i32 ptrtoint (i8** @global_var_1f274.138 to i32), i32* @r0, align 4
  %tmp405 = and i32 %v0_efd4, 65536
  %v3_f1a8 = icmp ne i32 %tmp405, 0
  store i1 %v3_f1a8, i1* %cpsr_c.global-to-local, align 1
  %v4_f1a8 = mul i32 %v5_f18c, 16777216
  %v5_f19c = or i32 %v4_f1a8, %v3_f194
  %v5_f1a0 = or i32 %v5_f19c, %v4_f19c
  %v5_f1a8 = or i32 %v5_f1a0, %v4_f1a0
  store i32 %v5_f1a8, i32* %r2.global-to-local, align 4
  store i16 0, i16* bitcast (i32* @global_var_1f27e.180 to i16*), align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i32 %v5_f1a8, i32* @global_var_1f284.181, align 4
  %v3_f1b8 = call i32 @function_c848(i32 ptrtoint (i8** @global_var_1f274.138 to i32), i32 20)
  %v4_f1b8 = trunc i32 %v3_f1b8 to i16
  %v3_f1bc = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f1bc, i32* %r1.global-to-local, align 4
  %v5_f1cc = sdiv i32 %v3_f1bc, 10
  %v3_f1d0 = mul i32 %v5_f1cc, 8
  store i32 %v3_f1d0, i32* %r2.global-to-local, align 4
  %v2_f1d8 = mul i32 %v5_f1cc, 10
  store i32 %v2_f1d8, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1f274.138 to i32), i32* %ip.global-to-local, align 4
  %v3_f1e0 = icmp uge i32 %v3_f1bc, %v2_f1d8
  store i1 %v3_f1e0, i1* %cpsr_c.global-to-local, align 1
  %v9_f1e0 = icmp eq i32 %v3_f1bc, %v2_f1d8
  store i1 %v9_f1e0, i1* %cpsr_z.global-to-local, align 1
  store i16 %v4_f1b8, i16* bitcast (i32* @global_var_1f27e.180 to i16*), align 4
  br i1 %v9_f1e0, label %.thread56.thread, label %bb406

.thread56.thread:                                 ; preds = %dec_label_pc_f180
  store i32 4873, i32* %r3.global-to-local, align 4
  store i16 4873, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f288.141 to i32), i32 2) to i16*), align 2
  %v4_f1fc288 = load i32, i32* @global_var_1f284.181, align 4
  store i32 %v4_f1fc288, i32* @global_var_1f28c.183, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %bb407

bb406:                                            ; preds = %dec_label_pc_f180
  %v4_f1fc291 = load i32, i32* @global_var_1f284.181, align 4
  store i32 ptrtoint (i32* @global_var_1f288.141 to i32), i32* %r1.global-to-local, align 4
  store i32 5888, i32* %r2.global-to-local, align 4
  store i32 %v4_f1fc291, i32* @global_var_1f28c.183, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i16 5888, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f288.141 to i32), i32 2) to i16*), align 2
  br label %bb407

bb407:                                            ; preds = %.thread56.thread, %bb406
  store i16 0, i16* bitcast (i32* @global_var_1f298.184 to i16*), align 4
  store i32 ptrtoint (i32* @global_var_1f288.141 to i32), i32* @r1, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v5_f228 = call i32 @function_c898(i32 ptrtoint (i8** @global_var_1f274.138 to i32), i32 ptrtoint (i32* @global_var_1f288.141 to i32), i32 5120, i32 20)
  %v6_f228 = trunc i32 %v5_f228 to i16
  store i32 ptrtoint (i8** @global_var_1f274.138 to i32), i32* %r1.global-to-local, align 4
  %v2_f234 = load i32, i32* @global_var_212f8.136, align 4
  store i16 %v6_f228, i16* bitcast (i32* @global_var_1f298.184 to i16*), align 4
  store i32 2, i32* %stack_var_-96, align 4
  store i32 %v2_f834, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v7_f27c = call i32 @function_11d70(i32 %v2_f234, i32 ptrtoint (i8** @global_var_1f274.138 to i32), i32 40, i32 16384, i32 %v2_10310, i32 16)
  %v3_f280 = load i32, i32* %stack_var_-52, align 4
  %v1_f284 = add i32 %v3_f280, 1
  store i32 %v1_f284, i32* %r3.global-to-local, align 4
  %v3_f288 = icmp ugt i32 %v1_f284, 483
  store i1 %v3_f288, i1* %cpsr_c.global-to-local, align 1
  %v8_f288 = icmp eq i32 %v1_f284, 484
  store i1 %v8_f288, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f284, i32* %stack_var_-52, align 4
  %v5_f290 = icmp slt i32 %v1_f284, 484
  br i1 %v5_f290, label %dec_label_pc_efa8, label %dec_label_pc_f294

dec_label_pc_f294:                                ; preds = %bb407
  %v0_f294 = load i32, i32* @r4, align 4
  br label %dec_label_pc_f298

dec_label_pc_f298:                                ; preds = %dec_label_pc_ef84, %dec_label_pc_f294
  %stack_var_-1880.1 = phi i32 [ %stack_var_-1880.0, %dec_label_pc_ef84 ], [ %v0_f294, %dec_label_pc_f294 ]
  %v0_f298 = call i32 @function_11a08()
  store i32 %v2_ef7c, i32* %r1.global-to-local, align 4
  store i32 %v1_f2a4, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  %v2_f2b4 = inttoptr i32 %v0_f298 to i32*
  br label %dec_label_pc_f2ac

dec_label_pc_f2ac:                                ; preds = %dec_label_pc_f370, %dec_label_pc_f368, %dec_label_pc_f360, %dec_label_pc_f33c, %dec_label_pc_f32c, %dec_label_pc_f314, %dec_label_pc_f2fc, %dec_label_pc_f358, %dec_label_pc_f34c, %dec_label_pc_f2f4, %dec_label_pc_f430, %dec_label_pc_f298
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %v2_f2b4, align 4
  %v2_f2c0 = load i32, i32* @global_var_212f8.136, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v2_ef7c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f2d0 = load i32, i32* %ip.global-to-local, align 4
  %v6_f2d8 = call i32 @function_11cfc(i32 %v2_f2c0, i32 %v2_ef7c, i32 1514, i32 16384, i32 %v0_f2d0, i32 %v0_f2d0)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f2dc = icmp eq i32 %v6_f2d8, 0
  store i1 %v2_f2dc, i1* %cpsr_z.global-to-local, align 1
  %tmp408 = icmp slt i32 %v6_f2d8, 1
  br i1 %tmp408, label %dec_label_pc_f440, label %dec_label_pc_f2e4

dec_label_pc_f2e4:                                ; preds = %dec_label_pc_f2ac
  store i32 %v0_f298, i32* %ip.global-to-local, align 4
  %v2_f2e8 = load i32, i32* %v2_f2b4, align 4
  store i32 %v2_f2e8, i32* %r3.global-to-local, align 4
  %v2_f2ec = icmp ugt i32 %v2_f2e8, 10
  store i1 %v2_f2ec, i1* %cpsr_c.global-to-local, align 1
  %v7_f2ec = icmp eq i32 %v2_f2e8, 11
  store i1 %v7_f2ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2ec, label %dec_label_pc_f440, label %dec_label_pc_f2f4

dec_label_pc_f2f4:                                ; preds = %dec_label_pc_f2e4
  %v2_f2f4 = icmp ugt i32 %v6_f2d8, 38
  store i1 %v2_f2f4, i1* %cpsr_c.global-to-local, align 1
  %v7_f2f4 = icmp eq i32 %v6_f2d8, 39
  store i1 %v7_f2f4, i1* %cpsr_z.global-to-local, align 1
  %v2_f2f8 = xor i1 %v2_f2f4, true
  %v3_f2f8 = or i1 %v7_f2f4, %v2_f2f8
  br i1 %v3_f2f8, label %dec_label_pc_f2ac, label %dec_label_pc_f2fc

dec_label_pc_f2fc:                                ; preds = %dec_label_pc_f2f4
  store i32 ptrtoint (i32* @global_var_212d8.46 to i32), i32* %r1.global-to-local, align 4
  %v3_f304 = load i32, i32* %v2_f304, align 4
  store i32 %v3_f304, i32* %r2.global-to-local, align 4
  %v2_f308 = load i32, i32* @global_var_212d8.46, align 4
  store i32 %v2_f308, i32* %r3.global-to-local, align 4
  %v3_f30c = icmp uge i32 %v3_f304, %v2_f308
  store i1 %v3_f30c, i1* %cpsr_c.global-to-local, align 1
  %v9_f30c = icmp eq i32 %v3_f304, %v2_f308
  store i1 %v9_f30c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f30c, label %dec_label_pc_f314, label %dec_label_pc_f2ac

dec_label_pc_f314:                                ; preds = %dec_label_pc_f2fc
  %v3_f314 = load i8, i8* %v2_f314, align 1
  %v4_f314 = zext i8 %v3_f314 to i32
  store i32 %v4_f314, i32* %r3.global-to-local, align 4
  %v2_f318 = icmp ugt i8 %v3_f314, 5
  store i1 %v2_f318, i1* %cpsr_c.global-to-local, align 1
  %v7_f318 = icmp eq i8 %v3_f314, 6
  store i1 %v7_f318, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f318, label %dec_label_pc_f320, label %dec_label_pc_f2ac

dec_label_pc_f320:                                ; preds = %dec_label_pc_f314
  %v0_f320 = load i32, i32* @r4, align 4
  %v1_f320 = inttoptr i32 %v0_f320 to i16*
  %v2_f320 = load i16, i16* %v1_f320, align 2
  %v3_f320 = zext i16 %v2_f320 to i32
  store i32 %v3_f320, i32* %ip.global-to-local, align 4
  %v2_f324 = icmp ugt i16 %v2_f320, 5887
  store i1 %v2_f324, i1* %cpsr_c.global-to-local, align 1
  %v7_f324 = icmp eq i16 %v2_f320, 5888
  store i1 %v7_f324, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f324, label %dec_label_pc_f33c, label %dec_label_pc_f32c

dec_label_pc_f32c:                                ; preds = %dec_label_pc_f320
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_f334 = icmp ugt i16 %v2_f320, 4872
  store i1 %v3_f334, i1* %cpsr_c.global-to-local, align 1
  %v9_f334 = icmp eq i16 %v2_f320, 4873
  store i1 %v9_f334, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f334, label %dec_label_pc_f33c, label %dec_label_pc_f2ac

dec_label_pc_f33c:                                ; preds = %dec_label_pc_f32c, %dec_label_pc_f320
  %v1_f33c = add i32 %v0_f320, 2
  %v2_f33c = inttoptr i32 %v1_f33c to i16*
  %v3_f33c = load i16, i16* %v2_f33c, align 2
  %v4_f33c = zext i16 %v3_f33c to i32
  store i32 %v4_f33c, i32* %r3.global-to-local, align 4
  store i32 %v4_ee60, i32* %r2.global-to-local, align 4
  %v3_f344 = icmp uge i32 %v4_f33c, %v4_ee60
  store i1 %v3_f344, i1* %cpsr_c.global-to-local, align 1
  %v9_f344 = icmp eq i32 %v4_f33c, %v4_ee60
  store i1 %v9_f344, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f344, label %dec_label_pc_f34c, label %dec_label_pc_f2ac

dec_label_pc_f34c:                                ; preds = %dec_label_pc_f33c
  %v1_f34c = add i32 %v0_f320, 13
  %v2_f34c = inttoptr i32 %v1_f34c to i8*
  %v3_f34c = load i8, i8* %v2_f34c, align 1
  %v4_f34c = zext i8 %v3_f34c to i32
  store i32 %v4_f34c, i32* %r3.global-to-local, align 4
  %v1_f350 = and i32 %v4_f34c, 2
  %v2_f350 = icmp eq i32 %v1_f350, 0
  store i1 %v2_f350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f350, label %dec_label_pc_f2ac, label %dec_label_pc_f358

dec_label_pc_f358:                                ; preds = %dec_label_pc_f34c
  %v1_f358 = and i32 %v4_f34c, 16
  %v2_f358 = icmp eq i32 %v1_f358, 0
  store i1 %v2_f358, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f358, label %dec_label_pc_f2ac, label %dec_label_pc_f360

dec_label_pc_f360:                                ; preds = %dec_label_pc_f358
  %v1_f360 = and i32 %v4_f34c, 4
  %v2_f360 = icmp eq i32 %v1_f360, 0
  store i1 %v2_f360, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f360, label %dec_label_pc_f368, label %dec_label_pc_f2ac

dec_label_pc_f368:                                ; preds = %dec_label_pc_f360
  %tmp = urem i8 %v3_f34c, 2
  %v2_f368 = icmp eq i8 %tmp, 0
  store i1 %v2_f368, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f368, label %dec_label_pc_f370, label %dec_label_pc_f2ac

dec_label_pc_f370:                                ; preds = %dec_label_pc_f368
  %v1_f370 = add i32 %v0_f320, 8
  %v2_f370 = inttoptr i32 %v1_f370 to i32*
  %v3_f370 = load i32, i32* %v2_f370, align 4
  %v5_f388 = call i32 @llvm.bswap.i32(i32 %v3_f370)
  %v1_f38c = add i32 %v5_f388, -1
  store i32 %v1_f38c, i32* %r2.global-to-local, align 4
  %v1_f390 = and i32 %v1_f38c, 16711680
  %v3_f394 = udiv i32 %v1_f38c, 16777216
  %v4_f39c = udiv i32 %v1_f390, 256
  %v5_f39c = or i32 %v4_f39c, %v3_f394
  %v1_f398 = mul i32 %v1_f38c, 256
  %v4_f3a0 = and i32 %v1_f398, 16711680
  %v5_f3a0 = or i32 %v5_f39c, %v4_f3a0
  store i32 %v5_f3a0, i32* %r3.global-to-local, align 4
  store i32 %v2_ef7c, i32* %r1.global-to-local, align 4
  %v3_f3a8 = load i32, i32* %v2_f3a8, align 4
  store i32 %v3_f3a8, i32* @lr, align 4
  %v5_f3ac = call i32 @llvm.bswap.i32(i32 %v1_f38c)
  store i32 %v5_f3ac, i32* %r3.global-to-local, align 4
  %v3_f3b0 = icmp uge i32 %v5_f3ac, %v3_f3a8
  store i1 %v3_f3b0, i1* %cpsr_c.global-to-local, align 1
  %v9_f3b0 = icmp eq i32 %v5_f3ac, %v3_f3a8
  store i1 %v9_f3b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f3b0, label %dec_label_pc_f3b8, label %dec_label_pc_f2ac

dec_label_pc_f3b8:                                ; preds = %dec_label_pc_f370
  %v0_f3b8 = load i32, i32* @r5, align 4
  %v3_f3b8 = icmp ugt i32 %v0_f3b8, 355
  store i1 %v3_f3b8, i1* %cpsr_c.global-to-local, align 1
  %v8_f3b8 = icmp eq i32 %v0_f3b8, 356
  store i1 %v8_f3b8, i1* %cpsr_z.global-to-local, align 1
  %v6_f3bc = icmp slt i32 %v0_f3b8, 356
  br i1 %v6_f3bc, label %dec_label_pc_f3c0, label %dec_label_pc_f440

dec_label_pc_f3c0:                                ; preds = %dec_label_pc_f3b8
  store i32 ptrtoint (i32* @global_var_212f4.134 to i32), i32* %r2.global-to-local, align 4
  %v2_f3cc = load i32, i32* @global_var_212f4.134, align 4
  store i32 %v2_f3cc, i32* %r1.global-to-local, align 4
  %v3_f3d4 = mul i32 %v0_f3b8, 388
  store i32 %v3_f3d4, i32* %r3.global-to-local, align 4
  %v2_f3d8 = add i32 %v2_f3cc, %v3_f3d4
  store i32 %v2_f3d8, i32* @r0, align 4
  %v1_f3dc = add i32 %v2_f3d8, 12
  %v2_f3dc = inttoptr i32 %v1_f3dc to i32*
  %v3_f3dc = load i32, i32* %v2_f3dc, align 4
  store i32 %v3_f3dc, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f3e0 = icmp eq i32 %v3_f3dc, 0
  store i1 %v2_f3e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f3e0, label %dec_label_pc_f428, label %dec_label_pc_f404.preheader

dec_label_pc_f404.preheader:                      ; preds = %dec_label_pc_f3c0
  %v2_f3e4 = add i32 %v0_f3b8, 1
  %v3_f3f0 = mul i32 %v2_f3e4, 97
  %v2_f3f4 = and i32 %v3_f3f0, 1073741824
  %v3_f3f4 = icmp ne i32 %v2_f3f4, 0
  store i1 %v3_f3f4, i1* %cpsr_c.global-to-local, align 1
  %v4_f3f4 = mul i32 %v2_f3e4, 388
  %v3_f3f8 = add i32 %v2_f3cc, %v4_f3f4
  store i32 %v3_f3f8, i32* %r3.global-to-local, align 4
  store i32 %v0_f3b8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f404

dec_label_pc_f404:                                ; preds = %dec_label_pc_f404.preheader, %dec_label_pc_f410
  %v0_f410 = phi i32 [ %v3_f3f8, %dec_label_pc_f404.preheader ], [ %v1_f41c, %dec_label_pc_f410 ]
  %v0_f404 = phi i32 [ %v0_f3b8, %dec_label_pc_f404.preheader ], [ %v1_f404, %dec_label_pc_f410 ]
  %v1_f404 = add i32 %v0_f404, 1
  store i32 %v1_f404, i32* %r2.global-to-local, align 4
  %v7_f408 = icmp eq i32 %v1_f404, 356
  br i1 %v7_f408, label %dec_label_pc_f440.loopexit, label %dec_label_pc_f410

dec_label_pc_f410:                                ; preds = %dec_label_pc_f404
  store i32 %v0_f410, i32* @r0, align 4
  %v1_f414 = add i32 %v0_f410, 12
  %v2_f414 = inttoptr i32 %v1_f414 to i32*
  %v3_f414 = load i32, i32* %v2_f414, align 4
  %v2_f418 = icmp eq i32 %v3_f414, 0
  %v1_f41c = add i32 %v0_f410, 388
  store i32 %v1_f41c, i32* %r3.global-to-local, align 4
  br i1 %v2_f418, label %dec_label_pc_f424, label %dec_label_pc_f404

dec_label_pc_f424:                                ; preds = %dec_label_pc_f410
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f404, i32* @r5, align 4
  br label %dec_label_pc_f428

dec_label_pc_f428:                                ; preds = %dec_label_pc_f3c0, %dec_label_pc_f424
  %v1_f430 = phi i32 [ %v2_f3d8, %dec_label_pc_f3c0 ], [ %v0_f410, %dec_label_pc_f424 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f428 = icmp eq i32 %v1_f430, 0
  store i1 %v2_f428, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f428, label %dec_label_pc_f440, label %dec_label_pc_f430

dec_label_pc_f430:                                ; preds = %dec_label_pc_f428
  %v2_f430 = add i32 %v1_f430, 16
  %v3_f430 = inttoptr i32 %v2_f430 to i32*
  store i32 %v3_f3a8, i32* %v3_f430, align 4
  %v0_f434 = load i32, i32* %ip.global-to-local, align 4
  %v1_f434 = trunc i32 %v0_f434 to i16
  %v2_f434 = load i32, i32* @r0, align 4
  %v3_f434 = add i32 %v2_f434, 20
  %v4_f434 = inttoptr i32 %v3_f434 to i16*
  store i16 %v1_f434, i16* %v4_f434, align 2
  %v0_f438 = call i32 @function_ea64()
  br label %dec_label_pc_f2ac

dec_label_pc_f440.loopexit:                       ; preds = %dec_label_pc_f404
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f440

dec_label_pc_f440:                                ; preds = %dec_label_pc_f3b8, %dec_label_pc_f428, %dec_label_pc_f2e4, %dec_label_pc_f2ac, %dec_label_pc_f440.loopexit
  store i32 0, i32* %stack_var_-224, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1676, i32* %ip.global-to-local, align 4
  %v2_f460514 = load i32, i32* @sp, align 4
  %v3_f460515 = add i32 %v2_f460514, 1676
  %v4_f460516 = inttoptr i32 %v3_f460515 to i32*
  store i32 0, i32* %v4_f460516, align 4
  br label %dec_label_pc_f44c.dec_label_pc_f44c_crit_edge

dec_label_pc_f44c.dec_label_pc_f44c_crit_edge:    ; preds = %dec_label_pc_f440, %dec_label_pc_f44c.dec_label_pc_f44c_crit_edge
  %v0_f44c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_f450 = add i32 %v0_f44c.pre, 4
  store i32 %v1_f450, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f458 = add i32 %v0_f44c.pre, 1672
  store i32 %v1_f458, i32* %ip.global-to-local, align 4
  %v7_f45c = icmp eq i32 %v1_f450, 128
  %v2_f460 = load i32, i32* @sp, align 4
  %v3_f460 = add i32 %v2_f460, %v1_f458
  %v4_f460 = inttoptr i32 %v3_f460 to i32*
  store i32 0, i32* %v4_f460, align 4
  br i1 %v7_f45c, label %dec_label_pc_f468, label %dec_label_pc_f44c.dec_label_pc_f44c_crit_edge

dec_label_pc_f468:                                ; preds = %dec_label_pc_f44c.dec_label_pc_f44c_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_f468 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_f468, i32* %stack_var_-352, align 4
  %v1_f474517 = add i32 %v0_f468, 8
  store i32 %v1_f474517, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_f47c518 = add i32 %v0_f468, 1548
  store i32 %v1_f47c518, i32* @lr, align 4
  %v7_f480519 = icmp eq i32 %v1_f474517, 128
  %v2_f484520 = load i32, i32* @sp, align 4
  %v3_f484521 = add i32 %v2_f484520, %v1_f47c518
  %v4_f484522 = inttoptr i32 %v3_f484521 to i32*
  store i32 0, i32* %v4_f484522, align 4
  br i1 %v7_f480519, label %dec_label_pc_f48c, label %dec_label_pc_f470.dec_label_pc_f470_crit_edge

dec_label_pc_f470.dec_label_pc_f470_crit_edge:    ; preds = %dec_label_pc_f468, %dec_label_pc_f470.dec_label_pc_f470_crit_edge
  %v0_f470.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_f474 = add i32 %v0_f470.pre, 4
  store i32 %v1_f474, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_f47c = add i32 %v0_f470.pre, 1544
  store i32 %v1_f47c, i32* @lr, align 4
  %v7_f480 = icmp eq i32 %v1_f474, 128
  %v2_f484 = load i32, i32* @sp, align 4
  %v3_f484 = add i32 %v2_f484, %v1_f47c
  %v4_f484 = inttoptr i32 %v3_f484 to i32*
  store i32 0, i32* %v4_f484, align 4
  br i1 %v7_f480, label %dec_label_pc_f48c, label %dec_label_pc_f470.dec_label_pc_f470_crit_edge

dec_label_pc_f48c:                                ; preds = %dec_label_pc_f470.dec_label_pc_f470_crit_edge, %dec_label_pc_f468
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_f48c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_f48c, i32* @r6, align 4
  store i32 %v0_f48c, i32* @r5, align 4
  store i32 %v0_f48c, i32* %stack_var_-52, align 4
  br label %dec_label_pc_f4e8

dec_label_pc_f49c:                                ; preds = %dec_label_pc_f51c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_f508, i1* %cpsr_z.global-to-local, align 1
  %v1_f58c = add i32 %v2_f500, 4
  %v2_f58c = inttoptr i32 %v1_f58c to i32*
  %v3_f58c = load i32, i32* %v2_f58c, align 4
  br i1 %v7_f508, label %dec_label_pc_f58c, label %dec_label_pc_f4a4

dec_label_pc_f4a4:                                ; preds = %dec_label_pc_f49c
  store i32 %v3_f58c, i32* %ip.global-to-local, align 4
  %v3_f4a8 = udiv i32 %v3_f58c, 32
  store i32 %v2_f598, i32* %r1.global-to-local, align 4
  %v3_f4b0 = mul nuw nsw i32 %v3_f4a8, 4
  %v2_f4b4 = add i32 %v3_f4b0, %v2_f598
  store i32 %v2_f4b4, i32* %r3.global-to-local, align 4
  %v1_f4b8 = add i32 %v2_f4b4, -184
  %v2_f4b8 = inttoptr i32 %v1_f4b8 to i32*
  %v3_f4b8 = load i32, i32* %v2_f4b8, align 4
  %v1_f4bc = urem i32 %v3_f58c, 32
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_f4c4 = shl i32 1, %v1_f4bc
  %v8_f4c4 = or i32 %v3_f4b8, %v7_f4c4
  store i32 %v8_f4c4, i32* %r2.global-to-local, align 4
  store i32 %v8_f4c4, i32* %v2_f4b8, align 4
  %v0_f4cc = load i32, i32* @r6, align 4
  %v1_f4cc = load i32, i32* %ip.global-to-local, align 4
  %v3_f4cc = icmp uge i32 %v0_f4cc, %v1_f4cc
  store i1 %v3_f4cc, i1* %cpsr_c.global-to-local, align 1
  %v9_f4cc = icmp eq i32 %v0_f4cc, %v1_f4cc
  store i1 %v9_f4cc, i1* %cpsr_z.global-to-local, align 1
  %v5_f4d0 = icmp slt i32 %v0_f4cc, %v1_f4cc
  br i1 %v5_f4d0, label %bb409, label %bb410

bb409:                                            ; preds = %dec_label_pc_f4a4
  store i32 %v1_f4cc, i32* @r6, align 4
  br label %bb410

bb410:                                            ; preds = %.thread76, %bb416, %bb414, %bb418, %dec_label_pc_f580, %dec_label_pc_f4a4, %bb409
  %v3_f4d4 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f4d4, i32* %r3.global-to-local, align 4
  %v1_f4d8 = add i32 %v3_f4d4, 1
  store i32 %v1_f4d8, i32* %r2.global-to-local, align 4
  %v3_f4dc = icmp ugt i32 %v1_f4d8, 355
  store i1 %v3_f4dc, i1* %cpsr_c.global-to-local, align 1
  %v8_f4dc = icmp eq i32 %v1_f4d8, 356
  store i1 %v8_f4dc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f4d8, i32* %stack_var_-52, align 4
  %v6_f4e4 = icmp slt i32 %v1_f4d8, 356
  br i1 %v6_f4e4, label %dec_label_pc_f4e8, label %dec_label_pc_f5bc

dec_label_pc_f4e8:                                ; preds = %bb410, %dec_label_pc_f48c
  %v1_f4f4 = phi i32 [ %v1_f4d8, %bb410 ], [ %v0_f48c, %dec_label_pc_f48c ]
  store i32 ptrtoint (i32* @global_var_212f4.134 to i32), i32* %r1.global-to-local, align 4
  %v2_f4f8 = load i32, i32* @global_var_212f4.134, align 4
  store i32 %v2_f4f8, i32* %r2.global-to-local, align 4
  %v3_f4fc = mul i32 %v1_f4f4, 388
  store i32 %v3_f4fc, i32* %r3.global-to-local, align 4
  %v2_f500 = add i32 %v2_f4f8, %v3_f4fc
  store i32 %v2_f500, i32* @r4, align 4
  %v1_f504 = add i32 %v2_f500, 12
  %v2_f504 = inttoptr i32 %v1_f504 to i32*
  %v3_f504 = load i32, i32* %v2_f504, align 4
  store i32 %v3_f504, i32* %ip.global-to-local, align 4
  %v2_f508 = icmp ne i32 %v3_f504, 0
  store i1 %v2_f508, i1* %cpsr_c.global-to-local, align 1
  %v7_f508 = icmp eq i32 %v3_f504, 1
  store i1 %v7_f508, i1* %cpsr_z.global-to-local, align 1
  %v2_f50c = xor i1 %v2_f508, true
  %v3_f50c = or i1 %v7_f508, %v2_f50c
  br i1 %v3_f50c, label %bb411, label %bb412

bb411:                                            ; preds = %dec_label_pc_f4e8
  store i32 5, i32* %r1.global-to-local, align 4
  br label %bb412

bb412:                                            ; preds = %dec_label_pc_f4e8, %bb411
  %v1_f52c215 = phi i32 [ ptrtoint (i32* @global_var_212f4.134 to i32), %dec_label_pc_f4e8 ], [ 5, %bb411 ]
  %v2_f510 = xor i1 %v7_f508, true
  %v3_f510 = and i1 %v2_f508, %v2_f510
  br i1 %v3_f510, label %bb413, label %bb414

bb413:                                            ; preds = %bb412
  store i32 30, i32* %r1.global-to-local, align 4
  br label %bb414

bb414:                                            ; preds = %bb412, %bb413
  %v1_f52c = phi i32 [ %v1_f52c215, %bb412 ], [ 30, %bb413 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f514 = icmp eq i32 %v3_f504, 0
  store i1 %v2_f514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f514, label %bb410, label %dec_label_pc_f51c

dec_label_pc_f51c:                                ; preds = %bb414
  store i32 ptrtoint (i32* @global_var_1f2a4.123 to i32), i32* %r2.global-to-local, align 4
  %v2_f520 = load i32, i32* @global_var_1f2a4.123, align 4
  store i32 %v2_f520, i32* %r3.global-to-local, align 4
  %v1_f524 = add i32 %v2_f500, 8
  %v2_f524 = inttoptr i32 %v1_f524 to i32*
  %v3_f524 = load i32, i32* %v2_f524, align 4
  store i32 %v3_f524, i32* %r2.global-to-local, align 4
  %v2_f528 = sub i32 %v2_f520, %v3_f524
  store i32 %v2_f528, i32* %r3.global-to-local, align 4
  %v3_f52c = icmp uge i32 %v2_f528, %v1_f52c
  store i1 %v3_f52c, i1* %cpsr_c.global-to-local, align 1
  %v9_f52c = icmp eq i32 %v2_f528, %v1_f52c
  store i1 %v9_f52c, i1* %cpsr_z.global-to-local, align 1
  %v2_f530 = xor i1 %v3_f52c, true
  %v3_f530 = or i1 %v9_f52c, %v2_f530
  br i1 %v3_f530, label %dec_label_pc_f49c, label %dec_label_pc_f534

dec_label_pc_f534:                                ; preds = %dec_label_pc_f51c
  %v1_f534 = add i32 %v2_f500, 4
  %v2_f534 = inttoptr i32 %v1_f534 to i32*
  %v3_f534 = load i32, i32* %v2_f534, align 4
  %v1_f538 = call i32 @function_115e0(i32 %v3_f534)
  %v0_f53c = load i32, i32* @r4, align 4
  %v1_f53c = add i32 %v0_f53c, 12
  %v2_f53c = inttoptr i32 %v1_f53c to i32*
  %v3_f53c = load i32, i32* %v2_f53c, align 4
  store i32 %v3_f53c, i32* %r3.global-to-local, align 4
  %v2_f540 = icmp ugt i32 %v3_f53c, 1
  store i1 %v2_f540, i1* %cpsr_c.global-to-local, align 1
  %v7_f540 = icmp eq i32 %v3_f53c, 2
  store i1 %v7_f540, i1* %cpsr_z.global-to-local, align 1
  %v2_f544 = xor i1 %v2_f540, true
  %v3_f544 = or i1 %v7_f540, %v2_f544
  br i1 %v3_f544, label %bb415, label %.thread300

.thread300:                                       ; preds = %dec_label_pc_f534
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_f54c297301 = add i32 %v0_f53c, 4
  %v3_f54c298302 = inttoptr i32 %v2_f54c297301 to i32*
  store i32 -1, i32* %v3_f54c298302, align 4
  br label %bb416

bb415:                                            ; preds = %dec_label_pc_f534
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_f54c294 = add i32 %v0_f53c, 4
  %v3_f54c295 = inttoptr i32 %v2_f54c294 to i32*
  store i32 -1, i32* %v3_f54c295, align 4
  %v4_f550 = load i32, i32* %r3.global-to-local, align 4
  %v5_f550 = load i32, i32* @r4, align 4
  %v6_f550 = add i32 %v5_f550, 12
  %v7_f550 = inttoptr i32 %v6_f550 to i32*
  store i32 %v4_f550, i32* %v7_f550, align 4
  %v4_f554 = load i32, i32* %r3.global-to-local, align 4
  %v5_f554 = trunc i32 %v4_f554 to i8
  %v6_f554 = load i32, i32* @r4, align 4
  %v7_f554 = add i32 %v6_f554, 384
  %v8_f554 = inttoptr i32 %v7_f554 to i8*
  store i8 %v5_f554, i8* %v8_f554, align 1
  %v0_f558.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_f558.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb416

bb416:                                            ; preds = %.thread300, %bb415
  %v1_f558 = phi i1 [ %v1_f558.pre, %bb415 ], [ %v2_f540, %.thread300 ]
  %v0_f558 = phi i1 [ %v0_f558.pre, %bb415 ], [ false, %.thread300 ]
  %v2_f558 = xor i1 %v1_f558, true
  %v3_f558 = or i1 %v0_f558, %v2_f558
  br i1 %v3_f558, label %bb410, label %dec_label_pc_f55c

dec_label_pc_f55c:                                ; preds = %bb416
  %v0_f55c = load i32, i32* @r4, align 4
  %v1_f55c = add i32 %v0_f55c, 384
  %v2_f55c = inttoptr i32 %v1_f55c to i8*
  %v3_f55c = load i8, i8* %v2_f55c, align 1
  %v4_f55c = zext i8 %v3_f55c to i32
  %v1_f560 = add nuw nsw i32 %v4_f55c, 1
  %v1_f564 = urem i32 %v1_f560, 256
  store i32 %v1_f564, i32* %r3.global-to-local, align 4
  %v2_f568 = icmp ugt i32 %v1_f564, 9
  store i1 %v2_f568, i1* %cpsr_c.global-to-local, align 1
  %v7_f568 = icmp eq i32 %v1_f564, 10
  store i1 %v7_f568, i1* %cpsr_z.global-to-local, align 1
  %v1_f56c = trunc i32 %v1_f560 to i8
  store i8 %v1_f56c, i8* %v2_f55c, align 1
  %v0_f570 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f570, label %.thread76, label %dec_label_pc_f580

.thread76:                                        ; preds = %dec_label_pc_f55c
  %v1_f570 = load i32, i32* %r3.global-to-local, align 4
  %v2_f570 = add i32 %v1_f570, -10
  store i32 %v2_f570, i32* %r3.global-to-local, align 4
  %v2_f574 = load i32, i32* @r4, align 4
  %v3_f574 = add i32 %v2_f574, 12
  %v4_f574 = inttoptr i32 %v3_f574 to i32*
  store i32 %v2_f570, i32* %v4_f574, align 4
  %v1_f578 = load i32, i32* %r3.global-to-local, align 4
  %v2_f578 = trunc i32 %v1_f578 to i8
  %v3_f578 = load i32, i32* @r4, align 4
  %v4_f578 = add i32 %v3_f578, 384
  %v5_f578 = inttoptr i32 %v4_f578 to i8*
  store i8 %v2_f578, i8* %v5_f578, align 1
  %v0_f57c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f57c.pr.pr, label %bb410, label %dec_label_pc_f580

dec_label_pc_f580:                                ; preds = %dec_label_pc_f55c, %.thread76
  %v0_f580 = load i32, i32* @r4, align 4
  store i32 %v0_f580, i32* @r0, align 4
  %v0_f584 = call i32 @function_ea64()
  br label %bb410

dec_label_pc_f58c:                                ; preds = %dec_label_pc_f49c
  %v3_f590 = udiv i32 %v3_f58c, 32
  %v3_f594 = mul nuw nsw i32 %v3_f590, 4
  store i32 %v2_f598, i32* @lr, align 4
  %v2_f59c = add i32 %v3_f594, %v2_f598
  store i32 %v2_f59c, i32* %r3.global-to-local, align 4
  %v1_f5a0 = add i32 %v2_f59c, -312
  %v2_f5a0 = inttoptr i32 %v1_f5a0 to i32*
  %v3_f5a0 = load i32, i32* %v2_f5a0, align 4
  %v1_f5a4 = urem i32 %v3_f58c, 32
  store i32 %v1_f5a4, i32* %r1.global-to-local, align 4
  %v7_f5a8 = shl i32 1, %v1_f5a4
  %v8_f5a8 = or i32 %v3_f5a0, %v7_f5a8
  store i32 %v8_f5a8, i32* %r2.global-to-local, align 4
  %v0_f5ac = load i32, i32* @r5, align 4
  %v3_f5ac = icmp uge i32 %v0_f5ac, %v3_f58c
  store i1 %v3_f5ac, i1* %cpsr_c.global-to-local, align 1
  %v9_f5ac = icmp eq i32 %v0_f5ac, %v3_f58c
  store i1 %v9_f5ac, i1* %cpsr_z.global-to-local, align 1
  %v5_f5b0 = icmp slt i32 %v0_f5ac, %v3_f58c
  br i1 %v5_f5b0, label %bb417, label %bb418

bb417:                                            ; preds = %dec_label_pc_f58c
  store i32 %v3_f58c, i32* @r5, align 4
  br label %bb418

bb418:                                            ; preds = %dec_label_pc_f58c, %bb417
  store i32 %v8_f5a8, i32* %v2_f5a0, align 4
  br label %bb410

dec_label_pc_f5bc:                                ; preds = %bb410
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %stack_var_-68, align 4
  %v0_f5c8 = load i32, i32* @r5, align 4
  %v1_f5c8 = load i32, i32* @r6, align 4
  %v3_f5c8 = icmp uge i32 %v0_f5c8, %v1_f5c8
  store i1 %v3_f5c8, i1* %cpsr_c.global-to-local, align 1
  %v9_f5c8 = icmp eq i32 %v0_f5c8, %v1_f5c8
  store i1 %v9_f5c8, i1* %cpsr_z.global-to-local, align 1
  %v5_f5cc = icmp slt i32 %v0_f5c8, %v1_f5c8
  %storemerge157 = select i1 %v5_f5cc, i32 %v1_f5c8, i32 %v0_f5c8
  store i32 %v2_f5e0, i32* %ip.global-to-local, align 4
  store i32 %v2_f5e4, i32* %r1.global-to-local, align 4
  store i32 %v2_f5e8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f5f0 = add i32 %storemerge157, 1
  %v5_f5fc = call i32 @function_11304(i32 %v1_f5f0, i32 %v2_f5e4, i32 %v2_f5e8, i32 0, i32 %v2_f5e0)
  %v0_f600 = load i32, i32* @r4, align 4
  %v1_f604 = inttoptr i32 %v0_f600 to i32*
  %v2_f604 = call i32 @function_11260(i32* %v1_f604)
  store i32 ptrtoint (i32* @global_var_1f2a4.123 to i32), i32* @lr, align 4
  %v0_f60c = load i32, i32* @r4, align 4
  store i32 %v0_f60c, i32* %stack_var_-52, align 4
  store i32 %v2_f604, i32* @global_var_1f2a4.123, align 4
  br label %dec_label_pc_f614

dec_label_pc_f614:                                ; preds = %dec_label_pc_f788, %dec_label_pc_f5bc
  %v1_f620 = phi i32 [ %v1_f78c, %dec_label_pc_f788 ], [ %v0_f60c, %dec_label_pc_f5bc ]
  store i32 ptrtoint (i32* @global_var_212f4.134 to i32), i32* %r1.global-to-local, align 4
  %v2_f624 = load i32, i32* @global_var_212f4.134, align 4
  store i32 %v2_f624, i32* %r2.global-to-local, align 4
  %v3_f628 = mul i32 %v1_f620, 388
  store i32 %v3_f628, i32* %r3.global-to-local, align 4
  %v2_f62c = add i32 %v2_f624, %v3_f628
  store i32 %v2_f62c, i32* @r6, align 4
  %v1_f630 = add i32 %v2_f62c, 4
  %v2_f630 = inttoptr i32 %v1_f630 to i32*
  %v3_f630 = load i32, i32* %v2_f630, align 4
  %v2_f634 = icmp eq i32 %v3_f630, -1
  store i1 %v2_f634, i1* %cpsr_c.global-to-local, align 1
  %v7_f634 = icmp eq i32 %v3_f630, -1
  store i1 %v7_f634, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f634, label %dec_label_pc_f788, label %dec_label_pc_f63c

dec_label_pc_f63c:                                ; preds = %dec_label_pc_f614
  %v3_f63c = udiv i32 %v3_f630, 32
  store i32 %v2_f598, i32* %r3.global-to-local, align 4
  %v3_f644 = mul nuw nsw i32 %v3_f63c, 4
  store i32 %v3_f644, i32* @ip, align 4
  %v2_f648 = add i32 %v3_f644, %v2_f598
  store i32 %v2_f648, i32* %r2.global-to-local, align 4
  %v1_f64c = add i32 %v2_f648, -312
  %v2_f64c = inttoptr i32 %v1_f64c to i32*
  %v3_f64c = load i32, i32* %v2_f64c, align 4
  %v1_f650 = urem i32 %v3_f630, 32
  store i32 %v1_f650, i32* %r1.global-to-local, align 4
  %v2_f654 = add nsw i32 %v1_f650, -1
  %v3_f654 = shl i32 1, %v2_f654
  %v4_f654 = and i32 %v3_f64c, %v3_f654
  %v5_f654 = icmp ne i32 %v4_f654, 0
  store i1 %v5_f654, i1* %cpsr_c.global-to-local, align 1
  %v6_f654 = lshr i32 %v3_f64c, %v1_f650
  store i32 %v6_f654, i32* %r3.global-to-local, align 4
  %v1_f658 = urem i32 %v6_f654, 2
  %v2_f658 = icmp eq i32 %v1_f658, 0
  store i1 %v2_f658, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f658, label %dec_label_pc_f660, label %dec_label_pc_101d4

dec_label_pc_f660:                                ; preds = %dec_label_pc_f63c, %dec_label_pc_10278
  %v1_f66c = phi i32 [ %v1_f650, %dec_label_pc_f63c ], [ %v1_f66c.pre, %dec_label_pc_10278 ]
  %v0_f664 = phi i32 [ %v3_f644, %dec_label_pc_f63c ], [ %v0_f664.pre, %dec_label_pc_10278 ]
  store i32 %v2_f598, i32* @lr, align 4
  %v2_f664 = add i32 %v0_f664, %v2_f598
  store i32 %v2_f664, i32* %r2.global-to-local, align 4
  %v1_f668 = add i32 %v2_f664, -184
  %v2_f668 = inttoptr i32 %v1_f668 to i32*
  %v3_f668 = load i32, i32* %v2_f668, align 4
  %v2_f66c = add i32 %v1_f66c, -1
  %v3_f66c = shl i32 1, %v2_f66c
  %v4_f66c = and i32 %v3_f668, %v3_f66c
  %v5_f66c = icmp ne i32 %v4_f66c, 0
  store i1 %v5_f66c, i1* %cpsr_c.global-to-local, align 1
  %v6_f66c = lshr i32 %v3_f668, %v1_f66c
  store i32 %v6_f66c, i32* %r3.global-to-local, align 4
  %v1_f670 = urem i32 %v6_f66c, 2
  %v2_f670 = icmp eq i32 %v1_f670, 0
  store i1 %v2_f670, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f670, label %dec_label_pc_f788, label %dec_label_pc_f678.preheader

dec_label_pc_f678.preheader:                      ; preds = %dec_label_pc_f660
  %v0_f678182 = load i32, i32* @r6, align 4
  %v1_f678183 = add i32 %v0_f678182, 12
  %v2_f678184 = inttoptr i32 %v1_f678183 to i32*
  %v3_f678185 = load i32, i32* %v2_f678184, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f67c181187 = icmp eq i32 %v3_f678185, 0
  store i1 %v2_f67c181187, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f67c181187, label %dec_label_pc_f788, label %dec_label_pc_f684.lr.ph

dec_label_pc_f678.loopexit:                       ; preds = %dec_label_pc_f7d8, %dec_label_pc_f8c4
  %v0_f678 = load i32, i32* @r6, align 4
  %v1_f678 = add i32 %v0_f678, 12
  %v2_f678 = inttoptr i32 %v1_f678 to i32*
  %v3_f678 = load i32, i32* %v2_f678, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f67c181 = icmp eq i32 %v3_f678, 0
  store i1 %v2_f67c181, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f67c181, label %dec_label_pc_f788, label %dec_label_pc_f684.lr.ph

dec_label_pc_f684.lr.ph:                          ; preds = %dec_label_pc_f678.preheader, %dec_label_pc_f678.loopexit
  %v0_f684231 = phi i32 [ %v0_f678, %dec_label_pc_f678.loopexit ], [ %v0_f678182, %dec_label_pc_f678.preheader ]
  br label %dec_label_pc_f684

dec_label_pc_f684:                                ; preds = %dec_label_pc_f67c.backedge.thread, %dec_label_pc_f67c.backedge, %dec_label_pc_f67c.backedge.thread564, %dec_label_pc_f684.lr.ph
  %v0_101a0 = phi i32 [ %v0_f684231, %dec_label_pc_f684.lr.ph ], [ %v0_f684228, %dec_label_pc_f67c.backedge ], [ %v0_f6fc, %dec_label_pc_f67c.backedge.thread ], [ %v0_f6fc, %dec_label_pc_f67c.backedge.thread564 ]
  %v1_f684 = add i32 %v0_101a0, 24
  %v2_f684 = inttoptr i32 %v1_f684 to i32*
  %v3_f684 = load i32, i32* %v2_f684, align 4
  store i32 %v3_f684, i32* @r3, align 4
  %v2_f688 = icmp ugt i32 %v3_f684, 355
  store i1 %v2_f688, i1* %cpsr_c.global-to-local, align 1
  %v7_f688 = icmp eq i32 %v3_f684, 356
  store i1 %v7_f688, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_101a0, 28
  store i32 %.pre, i32* @fp, align 4
  br i1 %v7_f688, label %dec_label_pc_101a0, label %dec_label_pc_f694

dec_label_pc_f694:                                ; preds = %dec_label_pc_f684, %dec_label_pc_101a0
  store i32 %v0_f298, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %v2_f2b4, align 4
  %v0_f6a0 = load i32, i32* @r6, align 4
  %v1_f6a0 = add i32 %v0_f6a0, 24
  %v2_f6a0 = inttoptr i32 %v1_f6a0 to i32*
  %v3_f6a0 = load i32, i32* %v2_f6a0, align 4
  store i32 %v3_f6a0, i32* %r2.global-to-local, align 4
  %v0_f6a4 = load i32, i32* @fp, align 4
  %v2_f6a4 = add i32 %v0_f6a4, %v3_f6a0
  store i32 %v2_f6a4, i32* @r4, align 4
  %v1_f6a8 = add i32 %v0_f6a0, 4
  %v2_f6a8 = inttoptr i32 %v1_f6a8 to i32*
  %v3_f6a8 = load i32, i32* %v2_f6a8, align 4
  %v1_f6ac = sub i32 356, %v3_f6a0
  store i32 %v1_f6ac, i32* %r2.global-to-local, align 4
  store i32 %v2_f6a4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f6b8 = call i32 @function_11cc4(i32 %v3_f6a8, i32 %v2_f6a4, i32 %v1_f6ac, i32 16384)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f6bc = icmp eq i32 %v4_f6b8, 0
  store i1 %v2_f6bc, i1* %cpsr_z.global-to-local, align 1
  %tmp419 = icmp slt i32 %v4_f6b8, 1
  br i1 %tmp419, label %dec_label_pc_f734, label %dec_label_pc_f6c4

dec_label_pc_f6c4:                                ; preds = %dec_label_pc_f694
  %v0_f6c4 = load i32, i32* @r5, align 4
  store i32 %v0_f6c4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f6c8

dec_label_pc_f6c8:                                ; preds = %.thread83, %dec_label_pc_f6c4
  %v3_f6d4 = phi i32 [ %v1_f6d8, %.thread83 ], [ %v0_f6c4, %dec_label_pc_f6c4 ]
  %v1_f6c8 = load i32, i32* @r4, align 4
  %v2_f6c8 = add i32 %v1_f6c8, %v3_f6d4
  %v3_f6c8 = inttoptr i32 %v2_f6c8 to i8*
  %v4_f6c8 = load i8, i8* %v3_f6c8, align 1
  %v6_f6c8 = zext i8 %v4_f6c8 to i32
  store i32 %v6_f6c8, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f6cc = icmp eq i8 %v4_f6c8, 0
  store i1 %v2_f6cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f6cc, label %bb420, label %.thread83

bb420:                                            ; preds = %dec_label_pc_f6c8
  %v2_f6d0 = add nuw nsw i32 %v6_f6c8, 65
  store i32 %v2_f6d0, i32* %r3.global-to-local, align 4
  %v2_f6d4 = trunc i32 %v2_f6d0 to i8
  store i8 %v2_f6d4, i8* %v3_f6c8, align 1
  %v0_f6d8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %.thread83

.thread83:                                        ; preds = %dec_label_pc_f6c8, %bb420
  %v0_f6d8 = phi i32 [ %v3_f6d4, %dec_label_pc_f6c8 ], [ %v0_f6d8.pre, %bb420 ]
  %v1_f6d8 = add i32 %v0_f6d8, 1
  store i32 %v1_f6d8, i32* %r2.global-to-local, align 4
  %v3_f6dc = icmp uge i32 %v1_f6d8, %v4_f6b8
  store i1 %v3_f6dc, i1* %cpsr_c.global-to-local, align 1
  %v9_f6dc = icmp eq i32 %v1_f6d8, %v4_f6b8
  store i1 %v9_f6dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f6dc, label %dec_label_pc_f6e4, label %dec_label_pc_f6c8

dec_label_pc_f6e4:                                ; preds = %.thread83, %dec_label_pc_f738
  store i32 ptrtoint (i32* @global_var_1f2a4.123 to i32), i32* @lr, align 4
  %v0_f6e8 = load i32, i32* @r6, align 4
  %v1_f6e8 = add i32 %v0_f6e8, 24
  %v2_f6e8 = inttoptr i32 %v1_f6e8 to i32*
  %v3_f6e8 = load i32, i32* %v2_f6e8, align 4
  %v2_f6ec = load i32, i32* @global_var_1f2a4.123, align 4
  store i32 %v2_f6ec, i32* %r2.global-to-local, align 4
  %v2_f6f0 = add i32 %v3_f6e8, %v4_f6b8
  store i32 %v2_f6f0, i32* %r3.global-to-local, align 4
  store i32 %v2_f6f0, i32* %v2_f6e8, align 4
  %v0_f6f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_f6f8 = load i32, i32* @r6, align 4
  %v2_f6f8 = add i32 %v1_f6f8, 8
  %v3_f6f8 = inttoptr i32 %v2_f6f8 to i32*
  store i32 %v0_f6f8, i32* %v3_f6f8, align 4
  br label %dec_label_pc_f6fc

dec_label_pc_f6fc:                                ; preds = %dec_label_pc_f8cc, %dec_label_pc_f6e4
  %v0_f6fc = load i32, i32* @r6, align 4
  %v1_f6fc = add i32 %v0_f6fc, 12
  %v2_f6fc = inttoptr i32 %v1_f6fc to i32*
  %v3_f6fc = load i32, i32* %v2_f6fc, align 4
  %v1_f700 = add i32 %v3_f6fc, -2
  store i32 %v1_f700, i32* @r3, align 4
  %v7_f704 = icmp eq i32 %v1_f700, 8
  store i1 %v7_f704, i1* %cpsr_z.global-to-local, align 1
  %v5_f708 = and i32 %v1_f700, 1073741824
  %v6_f708 = icmp ne i32 %v5_f708, 0
  store i1 %v6_f708, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_f6fc, label %dec_label_pc_f67c.backedge [
    i32 2, label %dec_label_pc_f9c8
    i32 3, label %dec_label_pc_ff48
    i32 4, label %dec_label_pc_fd88
    i32 5, label %dec_label_pc_fb6c
    i32 6, label %dec_label_pc_fa98
    i32 7, label %dec_label_pc_fe74
    i32 8, label %dec_label_pc_fc40
    i32 9, label %dec_label_pc_f8f4
    i32 10, label %dec_label_pc_f7a0
  ]

dec_label_pc_f734:                                ; preds = %dec_label_pc_f694
  br i1 %v2_f6bc, label %dec_label_pc_10404, label %dec_label_pc_f738

dec_label_pc_f738:                                ; preds = %dec_label_pc_f734
  %v3_f738 = icmp eq i32 %v4_f6b8, -1
  store i1 %v3_f738, i1* %cpsr_c.global-to-local, align 1
  %v8_f738 = icmp eq i32 %v4_f6b8, -1
  store i1 %v8_f738, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f738, label %dec_label_pc_f740, label %dec_label_pc_f6e4

dec_label_pc_f740:                                ; preds = %dec_label_pc_f738
  store i32 %v0_f298, i32* %ip.global-to-local, align 4
  %v2_f744 = load i32, i32* %v2_f2b4, align 4
  store i32 %v2_f744, i32* %r3.global-to-local, align 4
  %v2_f748 = icmp ugt i32 %v2_f744, 10
  store i1 %v2_f748, i1* %cpsr_c.global-to-local, align 1
  %v7_f748 = icmp eq i32 %v2_f744, 11
  store i1 %v7_f748, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f748, label %dec_label_pc_f788, label %dec_label_pc_f750

dec_label_pc_f750:                                ; preds = %dec_label_pc_f740, %dec_label_pc_10404
  %v0_f750 = load i32, i32* @r6, align 4
  %v1_f750 = add i32 %v0_f750, 4
  %v2_f750 = inttoptr i32 %v1_f750 to i32*
  %v3_f750 = load i32, i32* %v2_f750, align 4
  %v1_f754 = call i32 @function_115e0(i32 %v3_f750)
  %v0_f758 = load i32, i32* @r6, align 4
  %v1_f758 = add i32 %v0_f758, 384
  %v2_f758 = inttoptr i32 %v1_f758 to i8*
  %v3_f758 = load i8, i8* %v2_f758, align 1
  %v4_f758 = zext i8 %v3_f758 to i32
  %v1_f75c = add nuw nsw i32 %v4_f758, 1
  %v1_f760 = urem i32 %v1_f75c, 256
  store i32 %v1_f760, i32* %r3.global-to-local, align 4
  %v2_f764 = icmp ugt i32 %v1_f760, 8
  store i1 %v2_f764, i1* %cpsr_c.global-to-local, align 1
  %v7_f764 = icmp eq i32 %v1_f760, 9
  store i1 %v7_f764, i1* %cpsr_z.global-to-local, align 1
  %v1_f768 = trunc i32 %v1_f75c to i8
  store i8 %v1_f768, i8* %v2_f758, align 1
  store i32 -1, i32* %r2.global-to-local, align 4
  %v0_f770 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_f770 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_f770 = xor i1 %v1_f770, true
  %v3_f770 = and i1 %v0_f770, %v2_f770
  br i1 %v3_f770, label %bb421, label %.thread312

.thread312:                                       ; preds = %dec_label_pc_f750
  %v1_f774308313 = load i32, i32* @r6, align 4
  %v2_f774309314 = add i32 %v1_f774308313, 4
  %v3_f774310315 = inttoptr i32 %v2_f774309314 to i32*
  store i32 -1, i32* %v3_f774310315, align 4
  br label %bb422

bb421:                                            ; preds = %dec_label_pc_f750
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f774304 = load i32, i32* @r6, align 4
  %v2_f774305 = add i32 %v1_f774304, 4
  %v3_f774306 = inttoptr i32 %v2_f774305 to i32*
  store i32 -1, i32* %v3_f774306, align 4
  %v4_f778 = load i32, i32* %r3.global-to-local, align 4
  %v5_f778 = load i32, i32* @r6, align 4
  %v6_f778 = add i32 %v5_f778, 12
  %v7_f778 = inttoptr i32 %v6_f778 to i32*
  store i32 %v4_f778, i32* %v7_f778, align 4
  %v4_f77c = load i32, i32* %r3.global-to-local, align 4
  %v5_f77c = trunc i32 %v4_f77c to i8
  %v6_f77c = load i32, i32* @r6, align 4
  %v7_f77c = add i32 %v6_f77c, 384
  %v8_f77c = inttoptr i32 %v7_f77c to i8*
  store i8 %v5_f77c, i8* %v8_f77c, align 1
  %v0_f780.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_f780.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb422

bb422:                                            ; preds = %.thread312, %bb421
  %v1_f784 = phi i1 [ %v1_f780.pre, %bb421 ], [ %v0_f770, %.thread312 ]
  %v0_f784 = phi i1 [ %v0_f780.pre, %bb421 ], [ %v1_f770, %.thread312 ]
  %v2_f780 = xor i1 %v1_f784, true
  %v3_f780 = or i1 %v0_f784, %v2_f780
  br i1 %v3_f780, label %bb423, label %bb424

bb423:                                            ; preds = %bb422
  br label %bb424

bb424:                                            ; preds = %bb422, %bb423
  store i32 63368, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v3_f780, i32 ptrtoint (i32* @global_var_ea64.186 to i32))
  br label %dec_label_pc_f788

dec_label_pc_f788:                                ; preds = %dec_label_pc_f678.loopexit, %dec_label_pc_f67c.backedge, %dec_label_pc_f678.preheader, %dec_label_pc_f740, %dec_label_pc_f660, %dec_label_pc_f614, %dec_label_pc_10298, %bb424
  %v3_f788 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f788, i32* %r3.global-to-local, align 4
  %v1_f78c = add i32 %v3_f788, 1
  store i32 %v1_f78c, i32* @r4, align 4
  %v3_f790 = icmp ugt i32 %v1_f78c, 355
  store i1 %v3_f790, i1* %cpsr_c.global-to-local, align 1
  %v8_f790 = icmp eq i32 %v1_f78c, 356
  store i1 %v8_f790, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f78c, i32* %stack_var_-52, align 4
  %v5_f798 = icmp slt i32 %v1_f78c, 356
  br i1 %v5_f798, label %dec_label_pc_f614, label %dec_label_pc_ef84

dec_label_pc_f7a0:                                ; preds = %dec_label_pc_f6fc
  %v1_f7a4 = call i32 @function_104ec(i32 12)
  store i32 %v2_ffd8, i32* %r1.global-to-local, align 4
  %v3_f7b4 = call i32 @function_10428(i32 12, i32* nonnull %stack_var_-60)
  %v3_f7b8 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f7b4, i32* %r2.global-to-local, align 4
  %v1_f7c0 = add i32 %v3_f7b8, -1
  store i32 %v1_f7c0, i32* %r3.global-to-local, align 4
  %v0_f7c4 = load i32, i32* @fp, align 4
  %v0_f7c8 = load i32, i32* @r6, align 4
  %v1_f7c8 = add i32 %v0_f7c8, 24
  %v2_f7c8 = inttoptr i32 %v1_f7c8 to i32*
  %v3_f7c8 = load i32, i32* %v2_f7c8, align 4
  store i32 %v3_f7c8, i32* %r1.global-to-local, align 4
  %v4_f7cc = call i32 @function_10bd8(i32 %v0_f7c4, i32 %v3_f7c8, i32 %v3_f7b4, i32 %v1_f7c0)
  %v3_f7d0 = icmp eq i32 %v4_f7cc, -1
  store i1 %v3_f7d0, i1* %cpsr_c.global-to-local, align 1
  %v8_f7d0 = icmp eq i32 %v4_f7cc, -1
  store i1 %v8_f7d0, i1* %cpsr_z.global-to-local, align 1
  %v1_f7dc = call i32 @function_1044c(i32 12)
  br i1 %v3_f7d0, label %dec_label_pc_f7d8, label %dec_label_pc_10138

dec_label_pc_f7d8:                                ; preds = %dec_label_pc_f7a0
  %v1_f7e4 = call i32 @function_104ec(i32 11)
  store i32 %v2_ffd8, i32* %r1.global-to-local, align 4
  %v3_f7f4 = call i32 @function_10428(i32 11, i32* nonnull %stack_var_-60)
  %v3_f7f8 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f7f4, i32* %r2.global-to-local, align 4
  %v1_f800 = add i32 %v3_f7f8, -1
  store i32 %v1_f800, i32* %r3.global-to-local, align 4
  %v0_f804 = load i32, i32* @r6, align 4
  %v1_f804 = add i32 %v0_f804, 24
  %v2_f804 = inttoptr i32 %v1_f804 to i32*
  %v3_f804 = load i32, i32* %v2_f804, align 4
  store i32 %v3_f804, i32* %r1.global-to-local, align 4
  %v0_f808 = load i32, i32* @fp, align 4
  %v4_f80c = call i32 @function_10bd8(i32 %v0_f808, i32 %v3_f804, i32 %v3_f7f4, i32 %v1_f800)
  store i32 %v4_f80c, i32* @r8, align 4
  %v1_f818 = call i32 @function_1044c(i32 11)
  store i32 %v1_f818, i32* @r0, align 4
  %v0_f81c = load i32, i32* @r8, align 4
  %v2_f81c = icmp eq i32 %v0_f81c, -1
  store i1 %v2_f81c, i1* %cpsr_c.global-to-local, align 1
  %v7_f81c = icmp eq i32 %v0_f81c, -1
  store i1 %v7_f81c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f81c, label %dec_label_pc_f678.loopexit, label %dec_label_pc_f824

dec_label_pc_f824:                                ; preds = %dec_label_pc_f7d8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f824 = icmp eq i32 %v0_f81c, 0
  store i1 %v2_f824, i1* %cpsr_z.global-to-local, align 1
  %tmp425 = icmp slt i32 %v0_f81c, 1
  br i1 %tmp425, label %dec_label_pc_f8c4, label %dec_label_pc_f82c

dec_label_pc_f82c:                                ; preds = %dec_label_pc_f824
  %v0_f82c = load i32, i32* @r6, align 4
  %v1_f82c = add i32 %v0_f82c, 20
  %v2_f82c = inttoptr i32 %v1_f82c to i16*
  %v3_f82c = load i16, i16* %v2_f82c, align 2
  %v4_f82c = zext i16 %v3_f82c to i32
  store i32 %v4_f82c, i32* %r3.global-to-local, align 4
  %v1_f830 = add i32 %v0_f82c, 16
  %v2_f830 = inttoptr i32 %v1_f830 to i32*
  %v3_f830 = load i32, i32* %v2_f830, align 4
  store i32 %v3_f830, i32* %r2.global-to-local, align 4
  store i32 %v2_f834, i32* %r1.global-to-local, align 4
  store i32 %v4_f82c, i32* %stack_var_-42, align 4
  store i32 %v3_f830, i32* %stack_var_-60, align 4
  %v1_f840 = inttoptr i32 %v0_f82c to i32*
  %v2_f840 = load i32, i32* %v1_f840, align 4
  store i32 %v2_f840, i32* @sb, align 4
  %v0_f844 = call i32 @function_112d0()
  %v7_f848 = icmp eq i32 %v0_f844, -1
  %.464 = zext i1 %v7_f848 to i32
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f854 = icmp eq i32 %v0_f844, 0
  store i1 %v2_f854, i1* %cpsr_z.global-to-local, align 1
  %tmp428 = icmp slt i32 %v0_f844, 1
  br i1 %tmp428, label %bb429, label %.thread86

.thread86:                                        ; preds = %dec_label_pc_f82c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f8ac

bb429:                                            ; preds = %dec_label_pc_f82c
  store i32 %.464, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f860 = icmp eq i1 %v7_f848, false
  store i1 %v2_f860, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f860, label %dec_label_pc_f868, label %dec_label_pc_f8ac

dec_label_pc_f868:                                ; preds = %bb429
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_f874 = call i32 @function_11df4(i32 2, i32 1, i32 0)
  %v2_f878 = icmp eq i32 %v3_f874, -1
  store i1 %v2_f878, i1* %cpsr_c.global-to-local, align 1
  %v7_f878 = icmp eq i32 %v3_f874, -1
  store i1 %v7_f878, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_f874, i32* @r7, align 4
  br i1 %v7_f878, label %dec_label_pc_103d4, label %dec_label_pc_f884

dec_label_pc_f884:                                ; preds = %dec_label_pc_f868
  %v1_f888 = call i32 @function_104ec(i32 3)
  %v1_f890 = call i32 @function_104ec(i32 4)
  %v0_f894 = load i32, i32* @sl, align 4
  store i32 %v0_f894, i32* %r1.global-to-local, align 4
  %v2_f89c = inttoptr i32 %v0_f894 to i32*
  %v3_f89c = call i32 @function_10428(i32 3, i32* %v2_f89c)
  %v1_f8a0 = call i32 @function_e534(i32 %v3_f89c)
  store i32 %v1_f8a0, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_f8a4 = icmp eq i32 %v1_f8a0, 0
  store i1 %v3_f8a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f8a4, label %dec_label_pc_f8ac, label %dec_label_pc_102b4

dec_label_pc_f8ac:                                ; preds = %.thread86, %dec_label_pc_f884, %bb429
  %v0_f8ac = load i32, i32* @r6, align 4
  %v1_f8ac = add i32 %v0_f8ac, 4
  %v2_f8ac = inttoptr i32 %v1_f8ac to i32*
  %v3_f8ac = load i32, i32* %v2_f8ac, align 4
  %v1_f8b0 = call i32 @function_115e0(i32 %v3_f8ac)
  store i32 -1, i32* @r3, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_f8bc = load i32, i32* @r6, align 4
  %v2_f8bc = add i32 %v1_f8bc, 4
  %v3_f8bc = inttoptr i32 %v2_f8bc to i32*
  store i32 -1, i32* %v3_f8bc, align 4
  %v0_f8c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_f8c0 = load i32, i32* @r6, align 4
  %v2_f8c0 = add i32 %v1_f8c0, 12
  %v3_f8c0 = inttoptr i32 %v2_f8c0 to i32*
  store i32 %v0_f8c0, i32* %v3_f8c0, align 4
  br label %dec_label_pc_f8c4

dec_label_pc_f8c4:                                ; preds = %dec_label_pc_fa88, %bb438, %dec_label_pc_f824, %dec_label_pc_1004c, %dec_label_pc_fe3c, %dec_label_pc_100f0, %dec_label_pc_f8ac
  %v0_f8c4 = load i32, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f8c4 = icmp eq i32 %v0_f8c4, 0
  store i1 %v2_f8c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f8c4, label %dec_label_pc_f678.loopexit, label %dec_label_pc_f8cc

dec_label_pc_f8cc:                                ; preds = %dec_label_pc_f8c4, %dec_label_pc_fd30, %dec_label_pc_fbe8, %dec_label_pc_fb14, %dec_label_pc_f970, %dec_label_pc_101c4, %dec_label_pc_10168, %dec_label_pc_fef0
  %v0_f8cc = load i32, i32* @r6, align 4
  %v1_f8cc = add i32 %v0_f8cc, 24
  %v2_f8cc = inttoptr i32 %v1_f8cc to i32*
  %v3_f8cc = load i32, i32* %v2_f8cc, align 4
  %v0_f8d0 = load i32, i32* @r8, align 4
  %v2_f8d0 = sub i32 %v0_f8d0, %v3_f8cc
  %v3_f8d0 = icmp uge i32 %v0_f8d0, %v3_f8cc
  store i1 %v3_f8d0, i1* %cpsr_c.global-to-local, align 1
  %v4_f8d0 = xor i32 %v0_f8d0, %v3_f8cc
  %v5_f8d0 = xor i32 %v2_f8d0, %v0_f8d0
  %v6_f8d0 = and i32 %v5_f8d0, %v4_f8d0
  %v7_f8d0 = icmp slt i32 %v6_f8d0, 0
  %v8_f8d0 = icmp slt i32 %v2_f8d0, 0
  %v9_f8d0 = icmp eq i32 %v0_f8d0, %v3_f8cc
  store i1 %v9_f8d0, i1* %cpsr_z.global-to-local, align 1
  %v2_f8d4 = xor i1 %v8_f8d0, %v7_f8d0
  %v0_f8d0.v3_f8cc = select i1 %v2_f8d4, i32 %v0_f8d0, i32 %v3_f8cc
  store i32 %v0_f8d0.v3_f8cc, i32* %r1.global-to-local, align 4
  %v2_f8dc = sub i32 %v3_f8cc, %v0_f8d0.v3_f8cc
  store i32 %v2_f8dc, i32* @r2, align 4
  store i32 %v2_f8dc, i32* %v2_f8cc, align 4
  %v0_f8e4 = load i32, i32* @fp, align 4
  %v1_f8e4 = load i32, i32* %r1.global-to-local, align 4
  %v2_f8e4 = add i32 %v1_f8e4, %v0_f8e4
  store i32 %v2_f8e4, i32* @r1, align 4
  store i32 %v0_f8e4, i32* @r0, align 4
  %v3_f8ec = call i32 @function_11b00(i32 %v0_f8e4, i32 %v2_f8e4, i32 %v2_f8dc)
  br label %dec_label_pc_f6fc

dec_label_pc_f8f4:                                ; preds = %dec_label_pc_f6fc
  %v1_f8f4 = add i32 %v0_f6fc, 24
  %v2_f8f4 = inttoptr i32 %v1_f8f4 to i32*
  %v3_f8f4 = load i32, i32* %v2_f8f4, align 4
  store i32 %v3_f8f4, i32* %r2.global-to-local, align 4
  %v1_f8f8 = add i32 %v3_f8f4, -1
  store i32 %v1_f8f8, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f8fc = icmp eq i32 %v1_f8f8, 0
  store i1 %v2_f8fc, i1* %cpsr_z.global-to-local, align 1
  %tmp432 = icmp slt i32 %v1_f8f8, 1
  br i1 %tmp432, label %dec_label_pc_f67c.backedge.thread, label %dec_label_pc_f904

dec_label_pc_f904:                                ; preds = %dec_label_pc_f8f4
  %v2_f904 = add i32 %v1_f8f8, %v0_f6fc
  store i32 %v2_f904, i32* %r3.global-to-local, align 4
  %v1_f908 = add i32 %v2_f904, 28
  %v2_f908 = inttoptr i32 %v1_f908 to i8*
  %v3_f908 = load i8, i8* %v2_f908, align 1
  %v4_f908 = zext i8 %v3_f908 to i32
  store i32 %v4_f908, i32* %r3.global-to-local, align 4
  %v2_f90c = icmp ugt i8 %v3_f908, 61
  store i1 %v2_f90c, i1* %cpsr_c.global-to-local, align 1
  %v7_f90c = icmp eq i8 %v3_f908, 62
  store i1 %v7_f90c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f90c, label %dec_label_pc_f970, label %bb433

bb433:                                            ; preds = %dec_label_pc_f904
  %v3_f910 = icmp ugt i8 %v3_f908, 57
  store i1 %v3_f910, i1* %cpsr_c.global-to-local, align 1
  %v8_f910 = icmp eq i8 %v3_f908, 58
  store i1 %v8_f910, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f910, label %dec_label_pc_f970, label %dec_label_pc_f918

dec_label_pc_f918:                                ; preds = %bb433
  %v2_f918 = icmp ugt i8 %v3_f908, 35
  store i1 %v2_f918, i1* %cpsr_c.global-to-local, align 1
  %v7_f918 = icmp eq i8 %v3_f908, 36
  store i1 %v7_f918, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f918, label %dec_label_pc_f970, label %dec_label_pc_f920

dec_label_pc_f920:                                ; preds = %dec_label_pc_f918
  %v2_f920 = icmp ugt i8 %v3_f908, 34
  store i1 %v2_f920, i1* %cpsr_c.global-to-local, align 1
  %v7_f920 = icmp eq i8 %v3_f908, 35
  store i1 %v7_f920, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f920, label %dec_label_pc_f970, label %dec_label_pc_f928

dec_label_pc_f928:                                ; preds = %dec_label_pc_f920
  %v2_f928 = icmp ugt i8 %v3_f908, 36
  store i1 %v2_f928, i1* %cpsr_c.global-to-local, align 1
  %v7_f928 = icmp eq i8 %v3_f908, 37
  store i1 %v7_f928, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f928, label %dec_label_pc_f970, label %dec_label_pc_f958.preheader

dec_label_pc_f958.preheader:                      ; preds = %dec_label_pc_f928
  %v3_f92c = add i32 %v0_f6fc, 28
  %v2_f930 = add i32 %v3_f92c, %v3_f8f4
  store i32 %v2_f930, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f958

dec_label_pc_f93c:                                ; preds = %bb434
  %v2_f93c = icmp ugt i8 %v3_f960, 35
  store i1 %v2_f93c, i1* %cpsr_c.global-to-local, align 1
  %v7_f93c = icmp eq i8 %v3_f960, 36
  store i1 %v7_f93c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f93c, label %dec_label_pc_f970, label %dec_label_pc_f944

dec_label_pc_f944:                                ; preds = %dec_label_pc_f93c
  %v2_f944 = icmp ugt i8 %v3_f960, 34
  store i1 %v2_f944, i1* %cpsr_c.global-to-local, align 1
  %v7_f944 = icmp eq i8 %v3_f960, 35
  store i1 %v7_f944, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f944, label %dec_label_pc_f970, label %dec_label_pc_f94c

dec_label_pc_f94c:                                ; preds = %dec_label_pc_f944
  %v2_f94c = icmp ugt i8 %v3_f960, 36
  store i1 %v2_f94c, i1* %cpsr_c.global-to-local, align 1
  %v7_f94c = icmp eq i8 %v3_f960, 37
  store i1 %v7_f94c, i1* %cpsr_z.global-to-local, align 1
  %v1_f950 = add i32 %v0_f950, -1
  store i32 %v1_f950, i32* %r3.global-to-local, align 4
  br i1 %v7_f94c, label %dec_label_pc_f970, label %dec_label_pc_f958

dec_label_pc_f958:                                ; preds = %dec_label_pc_f958.preheader, %dec_label_pc_f94c
  %v0_f950 = phi i32 [ %v2_f930, %dec_label_pc_f958.preheader ], [ %v1_f950, %dec_label_pc_f94c ]
  %v0_f958 = phi i32 [ %v1_f8f8, %dec_label_pc_f958.preheader ], [ %v1_f958, %dec_label_pc_f94c ]
  %v1_f958 = add i32 %v0_f958, -1
  store i32 %v1_f958, i32* %r1.global-to-local, align 4
  %v2_f958 = icmp ne i32 %v0_f958, 0
  store i1 %v2_f958, i1* %cpsr_c.global-to-local, align 1
  %v7_f958 = icmp eq i32 %v0_f958, 1
  store i1 %v7_f958, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f958, label %dec_label_pc_f67c.backedge.thread564, label %dec_label_pc_f960

dec_label_pc_f960:                                ; preds = %dec_label_pc_f958
  %v1_f960 = add i32 %v0_f950, -2
  %v2_f960 = inttoptr i32 %v1_f960 to i8*
  %v3_f960 = load i8, i8* %v2_f960, align 1
  %v4_f960 = zext i8 %v3_f960 to i32
  store i32 %v4_f960, i32* %r2.global-to-local, align 4
  %v2_f964 = icmp ugt i8 %v3_f960, 61
  store i1 %v2_f964, i1* %cpsr_c.global-to-local, align 1
  %v7_f964 = icmp eq i8 %v3_f960, 62
  store i1 %v7_f964, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f964, label %dec_label_pc_f970, label %bb434

bb434:                                            ; preds = %dec_label_pc_f960
  %v3_f968 = icmp ugt i8 %v3_f960, 57
  store i1 %v3_f968, i1* %cpsr_c.global-to-local, align 1
  %v8_f968 = icmp eq i8 %v3_f960, 58
  store i1 %v8_f968, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f968, label %dec_label_pc_f970, label %dec_label_pc_f93c

dec_label_pc_f970:                                ; preds = %dec_label_pc_f960, %bb434, %dec_label_pc_f94c, %dec_label_pc_f944, %dec_label_pc_f93c, %dec_label_pc_f928, %dec_label_pc_f904, %dec_label_pc_f920, %dec_label_pc_f918, %bb433
  %v0_f974 = phi i32 [ %v1_f8f8, %dec_label_pc_f928 ], [ %v1_f8f8, %dec_label_pc_f904 ], [ %v1_f8f8, %dec_label_pc_f920 ], [ %v1_f8f8, %dec_label_pc_f918 ], [ %v1_f8f8, %bb433 ], [ %v1_f958, %dec_label_pc_f93c ], [ %v1_f958, %dec_label_pc_f944 ], [ %v1_f958, %dec_label_pc_f94c ], [ %v1_f958, %bb434 ], [ %v1_f958, %dec_label_pc_f960 ]
  %v1_f974 = add i32 %v0_f974, 1
  store i32 %v1_f974, i32* @r8, align 4
  %v1_f978 = call i32 @function_104ec(i32 10)
  store i32 %v2_ffd8, i32* %r1.global-to-local, align 4
  %v3_f988 = call i32 @function_10428(i32 10, i32* nonnull %stack_var_-60)
  %v3_f98c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f98c, i32* %r2.global-to-local, align 4
  store i32 %v3_f988, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f998 = load i32, i32* @r6, align 4
  %v1_f998 = add i32 %v0_f998, 4
  %v2_f998 = inttoptr i32 %v1_f998 to i32*
  %v3_f998 = load i32, i32* %v2_f998, align 4
  %v4_f99c = call i32 @function_11d38(i32 %v3_f998, i32 %v3_f988, i32 %v3_f98c, i32 16384)
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16a14.188 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f9ac = load i32, i32* @r6, align 4
  %v1_f9ac = add i32 %v0_f9ac, 4
  %v2_f9ac = inttoptr i32 %v1_f9ac to i32*
  %v3_f9ac = load i32, i32* %v2_f9ac, align 4
  %v4_f9b0 = call i32 @function_11d38(i32 %v3_f9ac, i32 ptrtoint ([3 x i8]* @global_var_16a14.188 to i32), i32 2, i32 16384)
  %v1_f9b8 = call i32 @function_1044c(i32 10)
  store i32 10, i32* @r3, align 4
  %v1_f9c0 = load i32, i32* @r6, align 4
  %v2_f9c0 = add i32 %v1_f9c0, 12
  %v3_f9c0 = inttoptr i32 %v2_f9c0 to i32*
  store i32 10, i32* %v3_f9c0, align 4
  br label %dec_label_pc_f8cc

dec_label_pc_f9c8:                                ; preds = %dec_label_pc_f6fc
  %v1_f9c8 = add i32 %v0_f6fc, 24
  %v2_f9c8 = inttoptr i32 %v1_f9c8 to i32*
  %v3_f9c8 = load i32, i32* %v2_f9c8, align 4
  store i32 %v3_f9c8, i32* %r1.global-to-local, align 4
  %v0_f9cc = load i32, i32* @fp, align 4
  store i32 %v0_f9cc, i32* @r4, align 4
  store i32 0, i32* @r8, align 4
  %v3_f9d4172 = icmp eq i32 %v3_f9c8, 0
  store i1 %v3_f9d4172, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_f9d4172, i1* %cpsr_z.global-to-local, align 1
  %v6_f9d8179 = icmp sgt i32 %v3_f9c8, 0
  br i1 %v6_f9d8179, label %dec_label_pc_f9dc.preheader, label %dec_label_pc_fa88

dec_label_pc_f9d4.loopexit:                       ; preds = %dec_label_pc_f9f8
  %v2_fa00 = add i32 %v1_fa00, 2
  store i32 %v2_fa00, i32* @r4, align 4
  %v2_fa04 = add i32 %v1_fa04, 2
  store i32 %v2_fa04, i32* @r8, align 4
  %v3_f9d4 = icmp uge i32 %v2_fa04, %v1_f9d4
  store i1 %v3_f9d4, i1* %cpsr_c.global-to-local, align 1
  %v9_f9d4 = icmp eq i32 %v2_fa04, %v1_f9d4
  store i1 %v9_f9d4, i1* %cpsr_z.global-to-local, align 1
  %v6_f9d8 = icmp slt i32 %v2_fa04, %v1_f9d4
  br i1 %v6_f9d8, label %dec_label_pc_f9dc.preheader, label %dec_label_pc_fa88

dec_label_pc_f9dc.preheader:                      ; preds = %dec_label_pc_f9c8, %dec_label_pc_f9d4.loopexit
  %v6_fa90273 = phi i32 [ %v6_fa90274, %dec_label_pc_f9d4.loopexit ], [ %v0_f6fc, %dec_label_pc_f9c8 ]
  %v1_fa04262 = phi i32 [ %v2_fa04, %dec_label_pc_f9d4.loopexit ], [ 0, %dec_label_pc_f9c8 ]
  %v1_f9e8260 = phi i32 [ %v1_f9d4, %dec_label_pc_f9d4.loopexit ], [ %v3_f9c8, %dec_label_pc_f9c8 ]
  %v0_f9dc258 = phi i32 [ %v2_fa00, %dec_label_pc_f9d4.loopexit ], [ %v0_f9cc, %dec_label_pc_f9c8 ]
  br label %dec_label_pc_f9dc

dec_label_pc_f9dc:                                ; preds = %dec_label_pc_f9dc.preheader, %dec_label_pc_fa6c
  %v6_fa90274 = phi i32 [ %v6_fa90273, %dec_label_pc_f9dc.preheader ], [ %v0_fa74, %dec_label_pc_fa6c ]
  %v1_fa04 = phi i32 [ %v1_fa04262, %dec_label_pc_f9dc.preheader ], [ %v1_fa78, %dec_label_pc_fa6c ]
  %v1_f9d4 = phi i32 [ %v1_f9e8260, %dec_label_pc_f9dc.preheader ], [ %v3_fa74, %dec_label_pc_fa6c ]
  %v1_fa00 = phi i32 [ %v0_f9dc258, %dec_label_pc_f9dc.preheader ], [ %v1_fa80, %dec_label_pc_fa6c ]
  %v1_f9dc = inttoptr i32 %v1_fa00 to i8*
  %v2_f9dc = load i8, i8* %v1_f9dc, align 1
  %v3_f9dc = zext i8 %v2_f9dc to i32
  store i32 %v3_f9dc, i32* @r3, align 4
  %v2_f9e0 = icmp eq i8 %v2_f9dc, -1
  store i1 %v2_f9e0, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f9e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f9e0, label %dec_label_pc_f9e8, label %dec_label_pc_fa88

dec_label_pc_f9e8:                                ; preds = %dec_label_pc_f9dc
  %v0_f9e8 = load i32, i32* @fp, align 4
  %v2_f9e8 = add i32 %v0_f9e8, %v1_f9d4
  store i32 %v2_f9e8, i32* %r2.global-to-local, align 4
  %v1_f9ec = add i32 %v1_fa00, 1
  store i32 %v1_f9ec, i32* @r5, align 4
  %v3_f9f0 = icmp uge i32 %v2_f9e8, %v1_f9ec
  store i1 %v3_f9f0, i1* %cpsr_c.global-to-local, align 1
  %v9_f9f0 = icmp eq i32 %v2_f9e8, %v1_f9ec
  store i1 %v9_f9f0, i1* %cpsr_z.global-to-local, align 1
  %v2_f9f4 = xor i1 %v3_f9f0, true
  %v3_f9f4 = or i1 %v9_f9f0, %v2_f9f4
  br i1 %v3_f9f4, label %dec_label_pc_fa88, label %dec_label_pc_f9f8

dec_label_pc_f9f8:                                ; preds = %dec_label_pc_f9e8
  %v2_f9f8 = inttoptr i32 %v1_f9ec to i8*
  %v3_f9f8 = load i8, i8* %v2_f9f8, align 1
  %v4_f9f8 = zext i8 %v3_f9f8 to i32
  store i32 %v4_f9f8, i32* @r3, align 4
  %v2_f9fc = icmp eq i8 %v3_f9f8, -1
  store i1 %v2_f9fc, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f9fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f9fc, label %dec_label_pc_f9d4.loopexit, label %dec_label_pc_fa0c

dec_label_pc_fa0c:                                ; preds = %dec_label_pc_f9f8
  %v2_fa0c = icmp ugt i8 %v3_f9f8, -4
  store i1 %v2_fa0c, i1* %cpsr_c.global-to-local, align 1
  %v7_fa0c = icmp eq i8 %v3_f9f8, -3
  store i1 %v7_fa0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa0c, label %dec_label_pc_10068, label %dec_label_pc_fa14

dec_label_pc_fa14:                                ; preds = %dec_label_pc_fa0c
  %v1_fa14 = add i32 %v1_fa00, 2
  store i32 %v1_fa14, i32* @r3, align 4
  %v3_fa18 = icmp uge i32 %v2_f9e8, %v1_fa14
  store i1 %v3_fa18, i1* %cpsr_c.global-to-local, align 1
  %v9_fa18 = icmp eq i32 %v2_f9e8, %v1_fa14
  store i1 %v9_fa18, i1* %cpsr_z.global-to-local, align 1
  %v2_fa1c = xor i1 %v3_fa18, true
  %v3_fa1c = or i1 %v9_fa18, %v2_fa1c
  br i1 %v3_fa1c, label %dec_label_pc_fa88, label %dec_label_pc_fa20

dec_label_pc_fa20:                                ; preds = %dec_label_pc_100cc, %bb458, %.thread147, %dec_label_pc_fa14
  %v0_fa20 = load i32, i32* @r5, align 4
  %v1_fa20 = inttoptr i32 %v0_fa20 to i8*
  %v2_fa20 = load i8, i8* %v1_fa20, align 1
  %v3_fa20 = zext i8 %v2_fa20 to i32
  store i32 %v3_fa20, i32* %r3.global-to-local, align 4
  %v2_fa24 = icmp ugt i8 %v2_fa20, -4
  store i1 %v2_fa24, i1* %cpsr_c.global-to-local, align 1
  %v7_fa24 = icmp eq i8 %v2_fa20, -3
  store i1 %v7_fa24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa24, label %.thread97, label %dec_label_pc_fa34

.thread97:                                        ; preds = %dec_label_pc_fa20
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_fa20, align 1
  %v0_fa30.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fa30.pr.pr, label %.thread100, label %.thread97.dec_label_pc_fa34thread-pre-split_crit_edge

.thread97.dec_label_pc_fa34thread-pre-split_crit_edge: ; preds = %.thread97
  %v0_fa34.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fa34

dec_label_pc_fa34:                                ; preds = %dec_label_pc_fa20, %.thread97.dec_label_pc_fa34thread-pre-split_crit_edge
  %v0_fa34.pr = phi i32 [ %v0_fa34.pr.pre, %.thread97.dec_label_pc_fa34thread-pre-split_crit_edge ], [ %v3_fa20, %dec_label_pc_fa20 ]
  %v2_fa34 = icmp ugt i32 %v0_fa34.pr, 250
  store i1 %v2_fa34, i1* %cpsr_c.global-to-local, align 1
  %v7_fa34 = icmp eq i32 %v0_fa34.pr, 251
  store i1 %v7_fa34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa34, label %bb435, label %.thread100

bb435:                                            ; preds = %dec_label_pc_fa34
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_fa3c = load i32, i32* @r5, align 4
  %v4_fa3c = inttoptr i32 %v3_fa3c to i8*
  store i8 -3, i8* %v4_fa3c, align 1
  br label %.thread100

.thread100:                                       ; preds = %dec_label_pc_fa34, %.thread97, %bb435
  %v0_fa40 = load i32, i32* @r4, align 4
  %v1_fa40 = add i32 %v0_fa40, 2
  %v2_fa40 = inttoptr i32 %v1_fa40 to i8*
  %v3_fa40 = load i8, i8* %v2_fa40, align 1
  %v4_fa40 = zext i8 %v3_fa40 to i32
  store i32 %v4_fa40, i32* %r3.global-to-local, align 4
  %v2_fa44 = icmp ugt i8 %v3_fa40, -4
  store i1 %v2_fa44, i1* %cpsr_c.global-to-local, align 1
  %v7_fa44 = icmp eq i8 %v3_fa40, -3
  store i1 %v7_fa44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa44, label %.thread101, label %dec_label_pc_fa54

.thread101:                                       ; preds = %.thread100
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v2_fa40, align 1
  %v0_fa50.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fa50.pr.pr, label %.thread104, label %.thread101.dec_label_pc_fa54thread-pre-split_crit_edge

.thread101.dec_label_pc_fa54thread-pre-split_crit_edge: ; preds = %.thread101
  %v0_fa54.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fa54

dec_label_pc_fa54:                                ; preds = %.thread100, %.thread101.dec_label_pc_fa54thread-pre-split_crit_edge
  %v0_fa54.pr = phi i32 [ %v0_fa54.pr.pre, %.thread101.dec_label_pc_fa54thread-pre-split_crit_edge ], [ %v4_fa40, %.thread100 ]
  %v2_fa54 = icmp ugt i32 %v0_fa54.pr, 250
  store i1 %v2_fa54, i1* %cpsr_c.global-to-local, align 1
  %v7_fa54 = icmp eq i32 %v0_fa54.pr, 251
  store i1 %v7_fa54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa54, label %bb436, label %.thread104

bb436:                                            ; preds = %dec_label_pc_fa54
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_fa5c = load i32, i32* @r4, align 4
  %v4_fa5c = add i32 %v3_fa5c, 2
  %v5_fa5c = inttoptr i32 %v4_fa5c to i8*
  store i8 -3, i8* %v5_fa5c, align 1
  br label %.thread104

.thread104:                                       ; preds = %dec_label_pc_fa54, %.thread101, %bb436
  %v0_fa64 = load i32, i32* @r4, align 4
  br label %dec_label_pc_fa6c

dec_label_pc_fa6c:                                ; preds = %dec_label_pc_1017c, %.thread104
  %storemerge3 = phi i32 [ %v2_10080, %dec_label_pc_1017c ], [ %v0_fa64, %.thread104 ]
  %storemerge2 = phi i32 [ 9, %dec_label_pc_1017c ], [ 3, %.thread104 ]
  %v0_fa70.in.in.in = load i32, i32* @r6, align 4
  %v0_fa70.in.in = add i32 %v0_fa70.in.in.in, 4
  %v0_fa70.in = inttoptr i32 %v0_fa70.in.in to i32*
  %v0_fa70 = load i32, i32* %v0_fa70.in, align 4
  store i32 %storemerge3, i32* %r1.global-to-local, align 4
  store i32 %storemerge2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* @r3, align 4
  %v4_fa70 = call i32 @function_11d38(i32 %v0_fa70, i32 %storemerge3, i32 %storemerge2, i32 16384)
  %v0_fa74 = load i32, i32* @r6, align 4
  %v1_fa74 = add i32 %v0_fa74, 24
  %v2_fa74 = inttoptr i32 %v1_fa74 to i32*
  %v3_fa74 = load i32, i32* %v2_fa74, align 4
  store i32 %v3_fa74, i32* %r1.global-to-local, align 4
  %v0_fa78 = load i32, i32* @r8, align 4
  %v1_fa78 = add i32 %v0_fa78, 3
  store i32 %v1_fa78, i32* @r8, align 4
  %v3_fa7c = icmp uge i32 %v1_fa78, %v3_fa74
  store i1 %v3_fa7c, i1* %cpsr_c.global-to-local, align 1
  %v9_fa7c = icmp eq i32 %v1_fa78, %v3_fa74
  store i1 %v9_fa7c, i1* %cpsr_z.global-to-local, align 1
  %v0_fa80 = load i32, i32* @r4, align 4
  %v1_fa80 = add i32 %v0_fa80, 3
  store i32 %v1_fa80, i32* @r4, align 4
  %v5_fa84 = icmp slt i32 %v1_fa78, %v3_fa74
  br i1 %v5_fa84, label %dec_label_pc_f9dc, label %dec_label_pc_fa88

dec_label_pc_fa88:                                ; preds = %dec_label_pc_f9d4.loopexit, %dec_label_pc_f9dc, %dec_label_pc_fa6c, %dec_label_pc_fa14, %dec_label_pc_f9e8, %dec_label_pc_f9c8, %dec_label_pc_10068.dec_label_pc_fa88.loopexit_crit_edge
  %v6_fa90 = phi i32 [ %v0_10098, %dec_label_pc_10068.dec_label_pc_fa88.loopexit_crit_edge ], [ %v0_f6fc, %dec_label_pc_f9c8 ], [ %v6_fa90274, %dec_label_pc_f9dc ], [ %v0_fa74, %dec_label_pc_fa6c ], [ %v6_fa90274, %dec_label_pc_fa14 ], [ %v6_fa90274, %dec_label_pc_f9e8 ], [ %v6_fa90274, %dec_label_pc_f9d4.loopexit ]
  %v0_fa88 = phi i32 [ %v0_fa88.pre.pre, %dec_label_pc_10068.dec_label_pc_fa88.loopexit_crit_edge ], [ 0, %dec_label_pc_f9c8 ], [ %v1_fa04, %dec_label_pc_f9dc ], [ %v1_fa78, %dec_label_pc_fa6c ], [ %v1_fa04, %dec_label_pc_fa14 ], [ %v1_fa04, %dec_label_pc_f9e8 ], [ %v2_fa04, %dec_label_pc_f9d4.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fa88 = icmp eq i32 %v0_fa88, 0
  store i1 %v2_fa88, i1* %cpsr_z.global-to-local, align 1
  %tmp437 = icmp slt i32 %v0_fa88, 1
  br i1 %tmp437, label %dec_label_pc_f8c4, label %bb438

bb438:                                            ; preds = %dec_label_pc_fa88
  store i32 3, i32* @r3, align 4
  %v7_fa90 = add i32 %v6_fa90, 12
  %v8_fa90 = inttoptr i32 %v7_fa90 to i32*
  store i32 3, i32* %v8_fa90, align 4
  br label %dec_label_pc_f8c4

dec_label_pc_fa98:                                ; preds = %dec_label_pc_f6fc
  %v1_fa98 = add i32 %v0_f6fc, 24
  %v2_fa98 = inttoptr i32 %v1_fa98 to i32*
  %v3_fa98 = load i32, i32* %v2_fa98, align 4
  store i32 %v3_fa98, i32* %r2.global-to-local, align 4
  %v1_fa9c = add i32 %v3_fa98, -1
  store i32 %v1_fa9c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_faa0 = icmp eq i32 %v1_fa9c, 0
  store i1 %v2_faa0, i1* %cpsr_z.global-to-local, align 1
  %tmp439 = icmp slt i32 %v1_fa9c, 1
  br i1 %tmp439, label %dec_label_pc_f67c.backedge.thread, label %dec_label_pc_faa8

dec_label_pc_faa8:                                ; preds = %dec_label_pc_fa98
  %v2_faa8 = add i32 %v1_fa9c, %v0_f6fc
  store i32 %v2_faa8, i32* %r3.global-to-local, align 4
  %v1_faac = add i32 %v2_faa8, 28
  %v2_faac = inttoptr i32 %v1_faac to i8*
  %v3_faac = load i8, i8* %v2_faac, align 1
  %v4_faac = zext i8 %v3_faac to i32
  store i32 %v4_faac, i32* %r3.global-to-local, align 4
  %v2_fab0 = icmp ugt i8 %v3_faac, 61
  store i1 %v2_fab0, i1* %cpsr_c.global-to-local, align 1
  %v7_fab0 = icmp eq i8 %v3_faac, 62
  store i1 %v7_fab0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fab0, label %dec_label_pc_fb14, label %bb440

bb440:                                            ; preds = %dec_label_pc_faa8
  %v3_fab4 = icmp ugt i8 %v3_faac, 57
  store i1 %v3_fab4, i1* %cpsr_c.global-to-local, align 1
  %v8_fab4 = icmp eq i8 %v3_faac, 58
  store i1 %v8_fab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fab4, label %dec_label_pc_fb14, label %dec_label_pc_fabc

dec_label_pc_fabc:                                ; preds = %bb440
  %v2_fabc = icmp ugt i8 %v3_faac, 35
  store i1 %v2_fabc, i1* %cpsr_c.global-to-local, align 1
  %v7_fabc = icmp eq i8 %v3_faac, 36
  store i1 %v7_fabc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fabc, label %dec_label_pc_fb14, label %dec_label_pc_fac4

dec_label_pc_fac4:                                ; preds = %dec_label_pc_fabc
  %v2_fac4 = icmp ugt i8 %v3_faac, 34
  store i1 %v2_fac4, i1* %cpsr_c.global-to-local, align 1
  %v7_fac4 = icmp eq i8 %v3_faac, 35
  store i1 %v7_fac4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fac4, label %dec_label_pc_fb14, label %dec_label_pc_facc

dec_label_pc_facc:                                ; preds = %dec_label_pc_fac4
  %v2_facc = icmp ugt i8 %v3_faac, 36
  store i1 %v2_facc, i1* %cpsr_c.global-to-local, align 1
  %v7_facc = icmp eq i8 %v3_faac, 37
  store i1 %v7_facc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_facc, label %dec_label_pc_fb14, label %dec_label_pc_fafc.preheader

dec_label_pc_fafc.preheader:                      ; preds = %dec_label_pc_facc
  %v3_fad0 = add i32 %v0_f6fc, 28
  %v2_fad4 = add i32 %v3_fad0, %v3_fa98
  store i32 %v2_fad4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fafc

dec_label_pc_fae0:                                ; preds = %bb441
  %v2_fae0 = icmp ugt i8 %v3_fb04, 35
  store i1 %v2_fae0, i1* %cpsr_c.global-to-local, align 1
  %v7_fae0 = icmp eq i8 %v3_fb04, 36
  store i1 %v7_fae0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fae0, label %dec_label_pc_fb14, label %dec_label_pc_fae8

dec_label_pc_fae8:                                ; preds = %dec_label_pc_fae0
  %v2_fae8 = icmp ugt i8 %v3_fb04, 34
  store i1 %v2_fae8, i1* %cpsr_c.global-to-local, align 1
  %v7_fae8 = icmp eq i8 %v3_fb04, 35
  store i1 %v7_fae8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fae8, label %dec_label_pc_fb14, label %dec_label_pc_faf0

dec_label_pc_faf0:                                ; preds = %dec_label_pc_fae8
  %v2_faf0 = icmp ugt i8 %v3_fb04, 36
  store i1 %v2_faf0, i1* %cpsr_c.global-to-local, align 1
  %v7_faf0 = icmp eq i8 %v3_fb04, 37
  store i1 %v7_faf0, i1* %cpsr_z.global-to-local, align 1
  %v1_faf4 = add i32 %v0_faf4, -1
  store i32 %v1_faf4, i32* %r3.global-to-local, align 4
  br i1 %v7_faf0, label %dec_label_pc_fb14, label %dec_label_pc_fafc

dec_label_pc_fafc:                                ; preds = %dec_label_pc_fafc.preheader, %dec_label_pc_faf0
  %v0_faf4 = phi i32 [ %v2_fad4, %dec_label_pc_fafc.preheader ], [ %v1_faf4, %dec_label_pc_faf0 ]
  %v0_fafc = phi i32 [ %v1_fa9c, %dec_label_pc_fafc.preheader ], [ %v1_fafc, %dec_label_pc_faf0 ]
  %v1_fafc = add i32 %v0_fafc, -1
  store i32 %v1_fafc, i32* %r1.global-to-local, align 4
  %v2_fafc = icmp ne i32 %v0_fafc, 0
  store i1 %v2_fafc, i1* %cpsr_c.global-to-local, align 1
  %v7_fafc = icmp eq i32 %v0_fafc, 1
  store i1 %v7_fafc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fafc, label %dec_label_pc_f67c.backedge.thread564, label %dec_label_pc_fb04

dec_label_pc_fb04:                                ; preds = %dec_label_pc_fafc
  %v1_fb04 = add i32 %v0_faf4, -2
  %v2_fb04 = inttoptr i32 %v1_fb04 to i8*
  %v3_fb04 = load i8, i8* %v2_fb04, align 1
  %v4_fb04 = zext i8 %v3_fb04 to i32
  store i32 %v4_fb04, i32* %r2.global-to-local, align 4
  %v2_fb08 = icmp ugt i8 %v3_fb04, 61
  store i1 %v2_fb08, i1* %cpsr_c.global-to-local, align 1
  %v7_fb08 = icmp eq i8 %v3_fb04, 62
  store i1 %v7_fb08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb08, label %dec_label_pc_fb14, label %bb441

bb441:                                            ; preds = %dec_label_pc_fb04
  %v3_fb0c = icmp ugt i8 %v3_fb04, 57
  store i1 %v3_fb0c, i1* %cpsr_c.global-to-local, align 1
  %v8_fb0c = icmp eq i8 %v3_fb04, 58
  store i1 %v8_fb0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fb0c, label %dec_label_pc_fb14, label %dec_label_pc_fae0

dec_label_pc_fb14:                                ; preds = %dec_label_pc_fb04, %bb441, %dec_label_pc_faf0, %dec_label_pc_fae8, %dec_label_pc_fae0, %dec_label_pc_facc, %dec_label_pc_faa8, %dec_label_pc_fac4, %dec_label_pc_fabc, %bb440
  %v0_fb18 = phi i32 [ %v1_fa9c, %dec_label_pc_facc ], [ %v1_fa9c, %dec_label_pc_faa8 ], [ %v1_fa9c, %dec_label_pc_fac4 ], [ %v1_fa9c, %dec_label_pc_fabc ], [ %v1_fa9c, %bb440 ], [ %v1_fafc, %dec_label_pc_fae0 ], [ %v1_fafc, %dec_label_pc_fae8 ], [ %v1_fafc, %dec_label_pc_faf0 ], [ %v1_fafc, %bb441 ], [ %v1_fafc, %dec_label_pc_fb04 ]
  %v1_fb18 = add i32 %v0_fb18, 1
  store i32 %v1_fb18, i32* @r8, align 4
  %v1_fb1c = call i32 @function_104ec(i32 8)
  store i32 %v2_ffd8, i32* %r1.global-to-local, align 4
  %v3_fb2c = call i32 @function_10428(i32 8, i32* nonnull %stack_var_-60)
  %v3_fb30 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_fb30, i32* %r2.global-to-local, align 4
  store i32 %v3_fb2c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fb3c = load i32, i32* @r6, align 4
  %v1_fb3c = add i32 %v0_fb3c, 4
  %v2_fb3c = inttoptr i32 %v1_fb3c to i32*
  %v3_fb3c = load i32, i32* %v2_fb3c, align 4
  %v4_fb40 = call i32 @function_11d38(i32 %v3_fb3c, i32 %v3_fb2c, i32 %v3_fb30, i32 16384)
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16a14.188 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_fb50 = load i32, i32* @r6, align 4
  %v1_fb50 = add i32 %v0_fb50, 4
  %v2_fb50 = inttoptr i32 %v1_fb50 to i32*
  %v3_fb50 = load i32, i32* %v2_fb50, align 4
  %v4_fb54 = call i32 @function_11d38(i32 %v3_fb50, i32 ptrtoint ([3 x i8]* @global_var_16a14.188 to i32), i32 2, i32 16384)
  %v1_fb5c = call i32 @function_1044c(i32 8)
  store i32 7, i32* @r3, align 4
  %v1_fb64 = load i32, i32* @r6, align 4
  %v2_fb64 = add i32 %v1_fb64, 12
  %v3_fb64 = inttoptr i32 %v2_fb64 to i32*
  store i32 7, i32* %v3_fb64, align 4
  br label %dec_label_pc_f8cc

dec_label_pc_fb6c:                                ; preds = %dec_label_pc_f6fc
  %v1_fb6c = add i32 %v0_f6fc, 24
  %v2_fb6c = inttoptr i32 %v1_fb6c to i32*
  %v3_fb6c = load i32, i32* %v2_fb6c, align 4
  store i32 %v3_fb6c, i32* %r2.global-to-local, align 4
  %v1_fb70 = add i32 %v3_fb6c, -1
  store i32 %v1_fb70, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fb74 = icmp eq i32 %v1_fb70, 0
  store i1 %v2_fb74, i1* %cpsr_z.global-to-local, align 1
  %tmp442 = icmp slt i32 %v1_fb70, 1
  br i1 %tmp442, label %dec_label_pc_f67c.backedge.thread, label %dec_label_pc_fb7c

dec_label_pc_fb7c:                                ; preds = %dec_label_pc_fb6c
  %v2_fb7c = add i32 %v1_fb70, %v0_f6fc
  store i32 %v2_fb7c, i32* %r3.global-to-local, align 4
  %v1_fb80 = add i32 %v2_fb7c, 28
  %v2_fb80 = inttoptr i32 %v1_fb80 to i8*
  %v3_fb80 = load i8, i8* %v2_fb80, align 1
  %v4_fb80 = zext i8 %v3_fb80 to i32
  store i32 %v4_fb80, i32* %r3.global-to-local, align 4
  %v2_fb84 = icmp ugt i8 %v3_fb80, 61
  store i1 %v2_fb84, i1* %cpsr_c.global-to-local, align 1
  %v7_fb84 = icmp eq i8 %v3_fb80, 62
  store i1 %v7_fb84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb84, label %dec_label_pc_fbe8, label %bb443

bb443:                                            ; preds = %dec_label_pc_fb7c
  %v3_fb88 = icmp ugt i8 %v3_fb80, 57
  store i1 %v3_fb88, i1* %cpsr_c.global-to-local, align 1
  %v8_fb88 = icmp eq i8 %v3_fb80, 58
  store i1 %v8_fb88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fb88, label %dec_label_pc_fbe8, label %dec_label_pc_fb90

dec_label_pc_fb90:                                ; preds = %bb443
  %v2_fb90 = icmp ugt i8 %v3_fb80, 35
  store i1 %v2_fb90, i1* %cpsr_c.global-to-local, align 1
  %v7_fb90 = icmp eq i8 %v3_fb80, 36
  store i1 %v7_fb90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb90, label %dec_label_pc_fbe8, label %dec_label_pc_fb98

dec_label_pc_fb98:                                ; preds = %dec_label_pc_fb90
  %v2_fb98 = icmp ugt i8 %v3_fb80, 34
  store i1 %v2_fb98, i1* %cpsr_c.global-to-local, align 1
  %v7_fb98 = icmp eq i8 %v3_fb80, 35
  store i1 %v7_fb98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb98, label %dec_label_pc_fbe8, label %dec_label_pc_fba0

dec_label_pc_fba0:                                ; preds = %dec_label_pc_fb98
  %v2_fba0 = icmp ugt i8 %v3_fb80, 36
  store i1 %v2_fba0, i1* %cpsr_c.global-to-local, align 1
  %v7_fba0 = icmp eq i8 %v3_fb80, 37
  store i1 %v7_fba0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fba0, label %dec_label_pc_fbe8, label %dec_label_pc_fbd0.preheader

dec_label_pc_fbd0.preheader:                      ; preds = %dec_label_pc_fba0
  %v3_fba4 = add i32 %v0_f6fc, 28
  %v2_fba8 = add i32 %v3_fba4, %v3_fb6c
  store i32 %v2_fba8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fbd0

dec_label_pc_fbb4:                                ; preds = %bb444
  %v2_fbb4 = icmp ugt i8 %v3_fbd8, 35
  store i1 %v2_fbb4, i1* %cpsr_c.global-to-local, align 1
  %v7_fbb4 = icmp eq i8 %v3_fbd8, 36
  store i1 %v7_fbb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbb4, label %dec_label_pc_fbe8, label %dec_label_pc_fbbc

dec_label_pc_fbbc:                                ; preds = %dec_label_pc_fbb4
  %v2_fbbc = icmp ugt i8 %v3_fbd8, 34
  store i1 %v2_fbbc, i1* %cpsr_c.global-to-local, align 1
  %v7_fbbc = icmp eq i8 %v3_fbd8, 35
  store i1 %v7_fbbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbbc, label %dec_label_pc_fbe8, label %dec_label_pc_fbc4

dec_label_pc_fbc4:                                ; preds = %dec_label_pc_fbbc
  %v2_fbc4 = icmp ugt i8 %v3_fbd8, 36
  store i1 %v2_fbc4, i1* %cpsr_c.global-to-local, align 1
  %v7_fbc4 = icmp eq i8 %v3_fbd8, 37
  store i1 %v7_fbc4, i1* %cpsr_z.global-to-local, align 1
  %v1_fbc8 = add i32 %v0_fbc8, -1
  store i32 %v1_fbc8, i32* %r3.global-to-local, align 4
  br i1 %v7_fbc4, label %dec_label_pc_fbe8, label %dec_label_pc_fbd0

dec_label_pc_fbd0:                                ; preds = %dec_label_pc_fbd0.preheader, %dec_label_pc_fbc4
  %v0_fbc8 = phi i32 [ %v2_fba8, %dec_label_pc_fbd0.preheader ], [ %v1_fbc8, %dec_label_pc_fbc4 ]
  %v0_fbd0 = phi i32 [ %v1_fb70, %dec_label_pc_fbd0.preheader ], [ %v1_fbd0, %dec_label_pc_fbc4 ]
  %v1_fbd0 = add i32 %v0_fbd0, -1
  store i32 %v1_fbd0, i32* %r1.global-to-local, align 4
  %v2_fbd0 = icmp ne i32 %v0_fbd0, 0
  store i1 %v2_fbd0, i1* %cpsr_c.global-to-local, align 1
  %v7_fbd0 = icmp eq i32 %v0_fbd0, 1
  store i1 %v7_fbd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbd0, label %dec_label_pc_f67c.backedge.thread564, label %dec_label_pc_fbd8

dec_label_pc_fbd8:                                ; preds = %dec_label_pc_fbd0
  %v1_fbd8 = add i32 %v0_fbc8, -2
  %v2_fbd8 = inttoptr i32 %v1_fbd8 to i8*
  %v3_fbd8 = load i8, i8* %v2_fbd8, align 1
  %v4_fbd8 = zext i8 %v3_fbd8 to i32
  store i32 %v4_fbd8, i32* %r2.global-to-local, align 4
  %v2_fbdc = icmp ugt i8 %v3_fbd8, 61
  store i1 %v2_fbdc, i1* %cpsr_c.global-to-local, align 1
  %v7_fbdc = icmp eq i8 %v3_fbd8, 62
  store i1 %v7_fbdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbdc, label %dec_label_pc_fbe8, label %bb444

bb444:                                            ; preds = %dec_label_pc_fbd8
  %v3_fbe0 = icmp ugt i8 %v3_fbd8, 57
  store i1 %v3_fbe0, i1* %cpsr_c.global-to-local, align 1
  %v8_fbe0 = icmp eq i8 %v3_fbd8, 58
  store i1 %v8_fbe0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fbe0, label %dec_label_pc_fbe8, label %dec_label_pc_fbb4

dec_label_pc_fbe8:                                ; preds = %dec_label_pc_fbd8, %bb444, %dec_label_pc_fbc4, %dec_label_pc_fbbc, %dec_label_pc_fbb4, %dec_label_pc_fba0, %dec_label_pc_fb7c, %dec_label_pc_fb98, %dec_label_pc_fb90, %bb443
  %v0_fbec = phi i32 [ %v1_fb70, %dec_label_pc_fba0 ], [ %v1_fb70, %dec_label_pc_fb7c ], [ %v1_fb70, %dec_label_pc_fb98 ], [ %v1_fb70, %dec_label_pc_fb90 ], [ %v1_fb70, %bb443 ], [ %v1_fbd0, %dec_label_pc_fbb4 ], [ %v1_fbd0, %dec_label_pc_fbbc ], [ %v1_fbd0, %dec_label_pc_fbc4 ], [ %v1_fbd0, %bb444 ], [ %v1_fbd0, %dec_label_pc_fbd8 ]
  %v1_fbec = add i32 %v0_fbec, 1
  store i32 %v1_fbec, i32* @r8, align 4
  %v1_fbf0 = call i32 @function_104ec(i32 7)
  store i32 %v2_ffd8, i32* %r1.global-to-local, align 4
  %v3_fc00 = call i32 @function_10428(i32 7, i32* nonnull %stack_var_-60)
  %v3_fc04 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_fc04, i32* %r2.global-to-local, align 4
  store i32 %v3_fc00, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fc10 = load i32, i32* @r6, align 4
  %v1_fc10 = add i32 %v0_fc10, 4
  %v2_fc10 = inttoptr i32 %v1_fc10 to i32*
  %v3_fc10 = load i32, i32* %v2_fc10, align 4
  %v4_fc14 = call i32 @function_11d38(i32 %v3_fc10, i32 %v3_fc00, i32 %v3_fc04, i32 16384)
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16a14.188 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_fc24 = load i32, i32* @r6, align 4
  %v1_fc24 = add i32 %v0_fc24, 4
  %v2_fc24 = inttoptr i32 %v1_fc24 to i32*
  %v3_fc24 = load i32, i32* %v2_fc24, align 4
  %v4_fc28 = call i32 @function_11d38(i32 %v3_fc24, i32 ptrtoint ([3 x i8]* @global_var_16a14.188 to i32), i32 2, i32 16384)
  %v1_fc30 = call i32 @function_1044c(i32 7)
  store i32 6, i32* @r3, align 4
  %v1_fc38 = load i32, i32* @r6, align 4
  %v2_fc38 = add i32 %v1_fc38, 12
  %v3_fc38 = inttoptr i32 %v2_fc38 to i32*
  store i32 6, i32* %v3_fc38, align 4
  br label %dec_label_pc_f8cc

dec_label_pc_fc40:                                ; preds = %dec_label_pc_f6fc
  %v1_fc40 = add i32 %v0_f6fc, 24
  %v2_fc40 = inttoptr i32 %v1_fc40 to i32*
  %v3_fc40 = load i32, i32* %v2_fc40, align 4
  store i32 %v3_fc40, i32* %r2.global-to-local, align 4
  %v1_fc44 = add i32 %v3_fc40, -1
  store i32 %v1_fc44, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fc48 = icmp eq i32 %v1_fc44, 0
  store i1 %v2_fc48, i1* %cpsr_z.global-to-local, align 1
  %tmp445 = icmp slt i32 %v1_fc44, 1
  br i1 %tmp445, label %dec_label_pc_f67c.backedge.thread, label %dec_label_pc_fc50

dec_label_pc_fc50:                                ; preds = %dec_label_pc_fc40
  %v2_fc50 = add i32 %v1_fc44, %v0_f6fc
  store i32 %v2_fc50, i32* %r3.global-to-local, align 4
  %v1_fc54 = add i32 %v2_fc50, 28
  %v2_fc54 = inttoptr i32 %v1_fc54 to i8*
  %v3_fc54 = load i8, i8* %v2_fc54, align 1
  %v4_fc54 = zext i8 %v3_fc54 to i32
  store i32 %v4_fc54, i32* %r3.global-to-local, align 4
  %v2_fc58 = icmp ugt i8 %v3_fc54, 61
  store i1 %v2_fc58, i1* %cpsr_c.global-to-local, align 1
  %v7_fc58 = icmp eq i8 %v3_fc54, 62
  store i1 %v7_fc58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc58, label %dec_label_pc_fd30, label %bb446

bb446:                                            ; preds = %dec_label_pc_fc50
  %v3_fc5c = icmp ugt i8 %v3_fc54, 57
  store i1 %v3_fc5c, i1* %cpsr_c.global-to-local, align 1
  %v8_fc5c = icmp eq i8 %v3_fc54, 58
  store i1 %v8_fc5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fc5c, label %dec_label_pc_fd30, label %dec_label_pc_fc64

dec_label_pc_fc64:                                ; preds = %bb446
  %v2_fc64 = icmp ugt i8 %v3_fc54, 35
  store i1 %v2_fc64, i1* %cpsr_c.global-to-local, align 1
  %v7_fc64 = icmp eq i8 %v3_fc54, 36
  store i1 %v7_fc64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc64, label %dec_label_pc_fd30, label %dec_label_pc_fc6c

dec_label_pc_fc6c:                                ; preds = %dec_label_pc_fc64
  %v2_fc6c = icmp ugt i8 %v3_fc54, 34
  store i1 %v2_fc6c, i1* %cpsr_c.global-to-local, align 1
  %v7_fc6c = icmp eq i8 %v3_fc54, 35
  store i1 %v7_fc6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc6c, label %dec_label_pc_fd30, label %dec_label_pc_fc74

dec_label_pc_fc74:                                ; preds = %dec_label_pc_fc6c
  %v2_fc74 = icmp ugt i8 %v3_fc54, 36
  store i1 %v2_fc74, i1* %cpsr_c.global-to-local, align 1
  %v7_fc74 = icmp eq i8 %v3_fc54, 37
  store i1 %v7_fc74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc74, label %dec_label_pc_fd30, label %dec_label_pc_fd18.preheader

dec_label_pc_fd18.preheader:                      ; preds = %dec_label_pc_fc74
  %v3_fc78 = add i32 %v0_f6fc, 28
  %v2_fc7c = add i32 %v3_fc78, %v3_fc40
  store i32 %v2_fc7c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fd18

dec_label_pc_fcfc:                                ; preds = %bb447
  %v2_fcfc = icmp ugt i8 %v3_fd20, 35
  store i1 %v2_fcfc, i1* %cpsr_c.global-to-local, align 1
  %v7_fcfc = icmp eq i8 %v3_fd20, 36
  store i1 %v7_fcfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcfc, label %dec_label_pc_fd30, label %dec_label_pc_fd04

dec_label_pc_fd04:                                ; preds = %dec_label_pc_fcfc
  %v2_fd04 = icmp ugt i8 %v3_fd20, 34
  store i1 %v2_fd04, i1* %cpsr_c.global-to-local, align 1
  %v7_fd04 = icmp eq i8 %v3_fd20, 35
  store i1 %v7_fd04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd04, label %dec_label_pc_fd30, label %dec_label_pc_fd0c

dec_label_pc_fd0c:                                ; preds = %dec_label_pc_fd04
  %v2_fd0c = icmp ugt i8 %v3_fd20, 36
  store i1 %v2_fd0c, i1* %cpsr_c.global-to-local, align 1
  %v7_fd0c = icmp eq i8 %v3_fd20, 37
  store i1 %v7_fd0c, i1* %cpsr_z.global-to-local, align 1
  %v1_fd10 = add i32 %v0_fd10, -1
  store i32 %v1_fd10, i32* %r3.global-to-local, align 4
  br i1 %v7_fd0c, label %dec_label_pc_fd30, label %dec_label_pc_fd18

dec_label_pc_fd18:                                ; preds = %dec_label_pc_fd18.preheader, %dec_label_pc_fd0c
  %v0_fd10 = phi i32 [ %v2_fc7c, %dec_label_pc_fd18.preheader ], [ %v1_fd10, %dec_label_pc_fd0c ]
  %v0_fd18 = phi i32 [ %v1_fc44, %dec_label_pc_fd18.preheader ], [ %v1_fd18, %dec_label_pc_fd0c ]
  %v1_fd18 = add i32 %v0_fd18, -1
  store i32 %v1_fd18, i32* %r1.global-to-local, align 4
  %v2_fd18 = icmp ne i32 %v0_fd18, 0
  store i1 %v2_fd18, i1* %cpsr_c.global-to-local, align 1
  %v7_fd18 = icmp eq i32 %v0_fd18, 1
  store i1 %v7_fd18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd18, label %dec_label_pc_f67c.backedge.thread564, label %dec_label_pc_fd20

dec_label_pc_fd20:                                ; preds = %dec_label_pc_fd18
  %v1_fd20 = add i32 %v0_fd10, -2
  %v2_fd20 = inttoptr i32 %v1_fd20 to i8*
  %v3_fd20 = load i8, i8* %v2_fd20, align 1
  %v4_fd20 = zext i8 %v3_fd20 to i32
  store i32 %v4_fd20, i32* %r2.global-to-local, align 4
  %v2_fd24 = icmp ugt i8 %v3_fd20, 61
  store i1 %v2_fd24, i1* %cpsr_c.global-to-local, align 1
  %v7_fd24 = icmp eq i8 %v3_fd20, 62
  store i1 %v7_fd24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd24, label %dec_label_pc_fd30, label %bb447

bb447:                                            ; preds = %dec_label_pc_fd20
  %v3_fd28 = icmp ugt i8 %v3_fd20, 57
  store i1 %v3_fd28, i1* %cpsr_c.global-to-local, align 1
  %v8_fd28 = icmp eq i8 %v3_fd20, 58
  store i1 %v8_fd28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fd28, label %dec_label_pc_fd30, label %dec_label_pc_fcfc

dec_label_pc_fd30:                                ; preds = %dec_label_pc_fd20, %bb447, %dec_label_pc_fd0c, %dec_label_pc_fd04, %dec_label_pc_fcfc, %dec_label_pc_fc74, %dec_label_pc_fc50, %dec_label_pc_fc6c, %dec_label_pc_fc64, %bb446
  %v0_fd34 = phi i32 [ %v1_fc44, %dec_label_pc_fc74 ], [ %v1_fc44, %dec_label_pc_fc50 ], [ %v1_fc44, %dec_label_pc_fc6c ], [ %v1_fc44, %dec_label_pc_fc64 ], [ %v1_fc44, %bb446 ], [ %v1_fd18, %dec_label_pc_fcfc ], [ %v1_fd18, %dec_label_pc_fd04 ], [ %v1_fd18, %dec_label_pc_fd0c ], [ %v1_fd18, %bb447 ], [ %v1_fd18, %dec_label_pc_fd20 ]
  %v1_fd34 = add i32 %v0_fd34, 1
  store i32 %v1_fd34, i32* @r8, align 4
  %v1_fd38 = call i32 @function_104ec(i32 9)
  store i32 %v2_ffd8, i32* %r1.global-to-local, align 4
  %v3_fd48 = call i32 @function_10428(i32 9, i32* nonnull %stack_var_-60)
  %v3_fd4c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_fd4c, i32* %r2.global-to-local, align 4
  store i32 %v3_fd48, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fd58 = load i32, i32* @r6, align 4
  %v1_fd58 = add i32 %v0_fd58, 4
  %v2_fd58 = inttoptr i32 %v1_fd58 to i32*
  %v3_fd58 = load i32, i32* %v2_fd58, align 4
  %v4_fd5c = call i32 @function_11d38(i32 %v3_fd58, i32 %v3_fd48, i32 %v3_fd4c, i32 16384)
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16a14.188 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_fd6c = load i32, i32* @r6, align 4
  %v1_fd6c = add i32 %v0_fd6c, 4
  %v2_fd6c = inttoptr i32 %v1_fd6c to i32*
  %v3_fd6c = load i32, i32* %v2_fd6c, align 4
  %v4_fd70 = call i32 @function_11d38(i32 %v3_fd6c, i32 ptrtoint ([3 x i8]* @global_var_16a14.188 to i32), i32 2, i32 16384)
  %v1_fd78 = call i32 @function_1044c(i32 9)
  store i32 9, i32* @r3, align 4
  %v1_fd80 = load i32, i32* @r6, align 4
  %v2_fd80 = add i32 %v1_fd80, 12
  %v3_fd80 = inttoptr i32 %v2_fd80 to i32*
  store i32 9, i32* %v3_fd80, align 4
  br label %dec_label_pc_f8cc

dec_label_pc_fd88:                                ; preds = %dec_label_pc_f6fc
  %v1_fd88 = add i32 %v0_f6fc, 24
  %v2_fd88 = inttoptr i32 %v1_fd88 to i32*
  %v3_fd88 = load i32, i32* %v2_fd88, align 4
  store i32 %v3_fd88, i32* %r2.global-to-local, align 4
  %v1_fd8c = add i32 %v3_fd88, -1
  store i32 %v1_fd8c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fd90 = icmp eq i32 %v1_fd8c, 0
  store i1 %v2_fd90, i1* %cpsr_z.global-to-local, align 1
  %tmp448 = icmp slt i32 %v1_fd8c, 1
  br i1 %tmp448, label %dec_label_pc_fdf4, label %dec_label_pc_fd98

dec_label_pc_fd98:                                ; preds = %dec_label_pc_fd88
  %v2_fd98 = add i32 %v1_fd8c, %v0_f6fc
  store i32 %v2_fd98, i32* %r3.global-to-local, align 4
  %v1_fd9c = add i32 %v2_fd98, 28
  %v2_fd9c = inttoptr i32 %v1_fd9c to i8*
  %v3_fd9c = load i8, i8* %v2_fd9c, align 1
  %v4_fd9c = zext i8 %v3_fd9c to i32
  store i32 %v4_fd9c, i32* %r3.global-to-local, align 4
  %v2_fda0 = icmp ugt i8 %v3_fd9c, 61
  store i1 %v2_fda0, i1* %cpsr_c.global-to-local, align 1
  %v7_fda0 = icmp eq i8 %v3_fd9c, 62
  store i1 %v7_fda0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fda0, label %dec_label_pc_10128, label %bb449

bb449:                                            ; preds = %dec_label_pc_fd98
  %v3_fda4 = icmp ugt i8 %v3_fd9c, 57
  store i1 %v3_fda4, i1* %cpsr_c.global-to-local, align 1
  %v8_fda4 = icmp eq i8 %v3_fd9c, 58
  store i1 %v8_fda4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fda4, label %dec_label_pc_10128, label %dec_label_pc_fdac

dec_label_pc_fdac:                                ; preds = %bb449
  %v2_fdac = icmp ugt i8 %v3_fd9c, 35
  store i1 %v2_fdac, i1* %cpsr_c.global-to-local, align 1
  %v7_fdac = icmp eq i8 %v3_fd9c, 36
  store i1 %v7_fdac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fdac, label %dec_label_pc_10128, label %dec_label_pc_fdb4

dec_label_pc_fdb4:                                ; preds = %dec_label_pc_fdac
  %v2_fdb4 = icmp ugt i8 %v3_fd9c, 34
  store i1 %v2_fdb4, i1* %cpsr_c.global-to-local, align 1
  %v7_fdb4 = icmp eq i8 %v3_fd9c, 35
  store i1 %v7_fdb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fdb4, label %dec_label_pc_10128, label %dec_label_pc_fdec.preheader

dec_label_pc_fdec.preheader:                      ; preds = %dec_label_pc_fdb4
  %v3_fdb8 = add i32 %v0_f6fc, 28
  %v2_fdbc = add i32 %v3_fdb8, %v3_fd88
  store i32 %v2_fdbc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fdec

dec_label_pc_fdc8:                                ; preds = %dec_label_pc_fdec
  %v1_fdc8 = add i32 %v0_fde4, -2
  %v2_fdc8 = inttoptr i32 %v1_fdc8 to i8*
  %v3_fdc8 = load i8, i8* %v2_fdc8, align 1
  %v4_fdc8 = zext i8 %v3_fdc8 to i32
  store i32 %v4_fdc8, i32* %r2.global-to-local, align 4
  %v2_fdcc = icmp ugt i8 %v3_fdc8, 61
  store i1 %v2_fdcc, i1* %cpsr_c.global-to-local, align 1
  %v7_fdcc = icmp eq i8 %v3_fdc8, 62
  store i1 %v7_fdcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fdcc, label %dec_label_pc_10128, label %bb450

bb450:                                            ; preds = %dec_label_pc_fdc8
  %v3_fdd0 = icmp ugt i8 %v3_fdc8, 57
  store i1 %v3_fdd0, i1* %cpsr_c.global-to-local, align 1
  %v8_fdd0 = icmp eq i8 %v3_fdc8, 58
  store i1 %v8_fdd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fdd0, label %dec_label_pc_10128, label %dec_label_pc_fdd8

dec_label_pc_fdd8:                                ; preds = %bb450
  %v2_fdd8 = icmp ugt i8 %v3_fdc8, 35
  store i1 %v2_fdd8, i1* %cpsr_c.global-to-local, align 1
  %v7_fdd8 = icmp eq i8 %v3_fdc8, 36
  store i1 %v7_fdd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fdd8, label %dec_label_pc_10128, label %dec_label_pc_fde0

dec_label_pc_fde0:                                ; preds = %dec_label_pc_fdd8
  %v2_fde0 = icmp ugt i8 %v3_fdc8, 34
  store i1 %v2_fde0, i1* %cpsr_c.global-to-local, align 1
  %v7_fde0 = icmp eq i8 %v3_fdc8, 35
  store i1 %v7_fde0, i1* %cpsr_z.global-to-local, align 1
  %v1_fde4 = add i32 %v0_fde4, -1
  store i32 %v1_fde4, i32* %r3.global-to-local, align 4
  br i1 %v7_fde0, label %dec_label_pc_10128, label %dec_label_pc_fdec

dec_label_pc_fdec:                                ; preds = %dec_label_pc_fdec.preheader, %dec_label_pc_fde0
  %v0_fde4 = phi i32 [ %v2_fdbc, %dec_label_pc_fdec.preheader ], [ %v1_fde4, %dec_label_pc_fde0 ]
  %v0_fdec = phi i32 [ %v1_fd8c, %dec_label_pc_fdec.preheader ], [ %v1_fdec, %dec_label_pc_fde0 ]
  %v1_fdec = add i32 %v0_fdec, -1
  store i32 %v1_fdec, i32* %r1.global-to-local, align 4
  %v2_fdec = icmp ne i32 %v0_fdec, 0
  store i1 %v2_fdec, i1* %cpsr_c.global-to-local, align 1
  %v7_fdec = icmp eq i32 %v0_fdec, 1
  store i1 %v7_fdec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fdec, label %dec_label_pc_fdf4, label %dec_label_pc_fdc8

dec_label_pc_fdf4:                                ; preds = %dec_label_pc_fdec, %dec_label_pc_fd88
  %v1_fdf8 = call i32 @function_104ec(i32 30)
  store i32 %v2_ffd8, i32* %r1.global-to-local, align 4
  %v3_fe08 = call i32 @function_10428(i32 30, i32* nonnull %stack_var_-60)
  %v3_fe0c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_fe08, i32* %r2.global-to-local, align 4
  %v1_fe14 = add i32 %v3_fe0c, -1
  store i32 %v1_fe14, i32* %r3.global-to-local, align 4
  %v0_fe18 = load i32, i32* @fp, align 4
  %v0_fe1c = load i32, i32* @r6, align 4
  %v1_fe1c = add i32 %v0_fe1c, 24
  %v2_fe1c = inttoptr i32 %v1_fe1c to i32*
  %v3_fe1c = load i32, i32* %v2_fe1c, align 4
  store i32 %v3_fe1c, i32* %r1.global-to-local, align 4
  %v4_fe20 = call i32 @function_10bd8(i32 %v0_fe18, i32 %v3_fe1c, i32 %v3_fe08, i32 %v1_fe14)
  %v2_fe24 = icmp eq i32 %v4_fe20, -1
  store i1 %v2_fe24, i1* %cpsr_c.global-to-local, align 1
  %v7_fe24 = icmp eq i32 %v4_fe20, -1
  store i1 %v7_fe24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe24, label %dec_label_pc_103dc.loopexit, label %dec_label_pc_fe34

dec_label_pc_fe34:                                ; preds = %dec_label_pc_fdf4
  store i32 1, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  %v1_fe38 = call i32 @function_1044c(i32 30)
  br label %dec_label_pc_fe3c

dec_label_pc_fe3c:                                ; preds = %dec_label_pc_10128, %dec_label_pc_fe34
  %v0_fe3c = load i32, i32* @r6, align 4
  %v1_fe3c = inttoptr i32 %v0_fe3c to i32*
  %v2_fe3c = load i32, i32* %v1_fe3c, align 4
  store i32 %v2_fe3c, i32* %r3.global-to-local, align 4
  %v1_fe40 = add i32 %v0_fe3c, 4
  %v2_fe40 = inttoptr i32 %v1_fe40 to i32*
  %v3_fe40 = load i32, i32* %v2_fe40, align 4
  %v1_fe44 = add i32 %v2_fe3c, 13
  %v2_fe44 = inttoptr i32 %v1_fe44 to i8*
  %v3_fe44 = load i8, i8* %v2_fe44, align 1
  %v4_fe44 = zext i8 %v3_fe44 to i32
  store i32 %v4_fe44, i32* %r2.global-to-local, align 4
  %v1_fe48 = add i32 %v2_fe3c, 4
  %v2_fe48 = inttoptr i32 %v1_fe48 to i32*
  %v3_fe48 = load i32, i32* %v2_fe48, align 4
  store i32 %v3_fe48, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fe50 = call i32 @function_11d38(i32 %v3_fe40, i32 %v3_fe48, i32 %v4_fe44, i32 16384)
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fe58 = load i32, i32* @r6, align 4
  %v1_fe58 = add i32 %v0_fe58, 4
  %v2_fe58 = inttoptr i32 %v1_fe58 to i32*
  %v3_fe58 = load i32, i32* %v2_fe58, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16a14.188 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_fe64 = call i32 @function_11d38(i32 %v3_fe58, i32 ptrtoint ([3 x i8]* @global_var_16a14.188 to i32), i32 2, i32 16384)
  store i32 5, i32* @r3, align 4
  %v1_fe6c = load i32, i32* @r6, align 4
  %v2_fe6c = add i32 %v1_fe6c, 12
  %v3_fe6c = inttoptr i32 %v2_fe6c to i32*
  store i32 5, i32* %v3_fe6c, align 4
  br label %dec_label_pc_f8c4

dec_label_pc_fe74:                                ; preds = %dec_label_pc_f6fc
  %v1_fe74 = add i32 %v0_f6fc, 24
  %v2_fe74 = inttoptr i32 %v1_fe74 to i32*
  %v3_fe74 = load i32, i32* %v2_fe74, align 4
  store i32 %v3_fe74, i32* %r2.global-to-local, align 4
  %v1_fe78 = add i32 %v3_fe74, -1
  store i32 %v1_fe78, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fe7c = icmp eq i32 %v1_fe78, 0
  store i1 %v2_fe7c, i1* %cpsr_z.global-to-local, align 1
  %tmp451 = icmp slt i32 %v1_fe78, 1
  br i1 %tmp451, label %dec_label_pc_f67c.backedge.thread, label %dec_label_pc_fe84

dec_label_pc_fe84:                                ; preds = %dec_label_pc_fe74
  %v2_fe84 = add i32 %v1_fe78, %v0_f6fc
  store i32 %v2_fe84, i32* %r3.global-to-local, align 4
  %v1_fe88 = add i32 %v2_fe84, 28
  %v2_fe88 = inttoptr i32 %v1_fe88 to i8*
  %v3_fe88 = load i8, i8* %v2_fe88, align 1
  %v4_fe88 = zext i8 %v3_fe88 to i32
  store i32 %v4_fe88, i32* %r3.global-to-local, align 4
  %v2_fe8c = icmp ugt i8 %v3_fe88, 61
  store i1 %v2_fe8c, i1* %cpsr_c.global-to-local, align 1
  %v7_fe8c = icmp eq i8 %v3_fe88, 62
  store i1 %v7_fe8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe8c, label %dec_label_pc_fef0, label %bb452

bb452:                                            ; preds = %dec_label_pc_fe84
  %v3_fe90 = icmp ugt i8 %v3_fe88, 57
  store i1 %v3_fe90, i1* %cpsr_c.global-to-local, align 1
  %v8_fe90 = icmp eq i8 %v3_fe88, 58
  store i1 %v8_fe90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fe90, label %dec_label_pc_fef0, label %dec_label_pc_fe98

dec_label_pc_fe98:                                ; preds = %bb452
  %v2_fe98 = icmp ugt i8 %v3_fe88, 35
  store i1 %v2_fe98, i1* %cpsr_c.global-to-local, align 1
  %v7_fe98 = icmp eq i8 %v3_fe88, 36
  store i1 %v7_fe98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe98, label %dec_label_pc_fef0, label %dec_label_pc_fea0

dec_label_pc_fea0:                                ; preds = %dec_label_pc_fe98
  %v2_fea0 = icmp ugt i8 %v3_fe88, 34
  store i1 %v2_fea0, i1* %cpsr_c.global-to-local, align 1
  %v7_fea0 = icmp eq i8 %v3_fe88, 35
  store i1 %v7_fea0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fea0, label %dec_label_pc_fef0, label %dec_label_pc_fea8

dec_label_pc_fea8:                                ; preds = %dec_label_pc_fea0
  %v2_fea8 = icmp ugt i8 %v3_fe88, 36
  store i1 %v2_fea8, i1* %cpsr_c.global-to-local, align 1
  %v7_fea8 = icmp eq i8 %v3_fe88, 37
  store i1 %v7_fea8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fea8, label %dec_label_pc_fef0, label %dec_label_pc_fed8.preheader

dec_label_pc_fed8.preheader:                      ; preds = %dec_label_pc_fea8
  %v3_feac = add i32 %v0_f6fc, 28
  %v2_feb0 = add i32 %v3_feac, %v3_fe74
  store i32 %v2_feb0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fed8

dec_label_pc_febc:                                ; preds = %bb453
  %v2_febc = icmp ugt i8 %v3_fee0, 35
  store i1 %v2_febc, i1* %cpsr_c.global-to-local, align 1
  %v7_febc = icmp eq i8 %v3_fee0, 36
  store i1 %v7_febc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_febc, label %dec_label_pc_fef0, label %dec_label_pc_fec4

dec_label_pc_fec4:                                ; preds = %dec_label_pc_febc
  %v2_fec4 = icmp ugt i8 %v3_fee0, 34
  store i1 %v2_fec4, i1* %cpsr_c.global-to-local, align 1
  %v7_fec4 = icmp eq i8 %v3_fee0, 35
  store i1 %v7_fec4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fec4, label %dec_label_pc_fef0, label %dec_label_pc_fecc

dec_label_pc_fecc:                                ; preds = %dec_label_pc_fec4
  %v2_fecc = icmp ugt i8 %v3_fee0, 36
  store i1 %v2_fecc, i1* %cpsr_c.global-to-local, align 1
  %v7_fecc = icmp eq i8 %v3_fee0, 37
  store i1 %v7_fecc, i1* %cpsr_z.global-to-local, align 1
  %v1_fed0 = add i32 %v0_fed0, -1
  store i32 %v1_fed0, i32* %r3.global-to-local, align 4
  br i1 %v7_fecc, label %dec_label_pc_fef0, label %dec_label_pc_fed8

dec_label_pc_fed8:                                ; preds = %dec_label_pc_fed8.preheader, %dec_label_pc_fecc
  %v0_fed0 = phi i32 [ %v2_feb0, %dec_label_pc_fed8.preheader ], [ %v1_fed0, %dec_label_pc_fecc ]
  %v0_fed8 = phi i32 [ %v1_fe78, %dec_label_pc_fed8.preheader ], [ %v1_fed8, %dec_label_pc_fecc ]
  %v1_fed8 = add i32 %v0_fed8, -1
  store i32 %v1_fed8, i32* %r1.global-to-local, align 4
  %v2_fed8 = icmp ne i32 %v0_fed8, 0
  store i1 %v2_fed8, i1* %cpsr_c.global-to-local, align 1
  %v7_fed8 = icmp eq i32 %v0_fed8, 1
  store i1 %v7_fed8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fed8, label %dec_label_pc_f67c.backedge.thread564, label %dec_label_pc_fee0

dec_label_pc_fee0:                                ; preds = %dec_label_pc_fed8
  %v1_fee0 = add i32 %v0_fed0, -2
  %v2_fee0 = inttoptr i32 %v1_fee0 to i8*
  %v3_fee0 = load i8, i8* %v2_fee0, align 1
  %v4_fee0 = zext i8 %v3_fee0 to i32
  store i32 %v4_fee0, i32* %r2.global-to-local, align 4
  %v2_fee4 = icmp ugt i8 %v3_fee0, 61
  store i1 %v2_fee4, i1* %cpsr_c.global-to-local, align 1
  %v7_fee4 = icmp eq i8 %v3_fee0, 62
  store i1 %v7_fee4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fee4, label %dec_label_pc_fef0, label %bb453

bb453:                                            ; preds = %dec_label_pc_fee0
  %v3_fee8 = icmp ugt i8 %v3_fee0, 57
  store i1 %v3_fee8, i1* %cpsr_c.global-to-local, align 1
  %v8_fee8 = icmp eq i8 %v3_fee0, 58
  store i1 %v8_fee8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fee8, label %dec_label_pc_fef0, label %dec_label_pc_febc

dec_label_pc_fef0:                                ; preds = %dec_label_pc_fee0, %bb453, %dec_label_pc_fecc, %dec_label_pc_fec4, %dec_label_pc_febc, %dec_label_pc_fea8, %dec_label_pc_fe84, %dec_label_pc_fea0, %dec_label_pc_fe98, %bb452
  %v0_fef4 = phi i32 [ %v1_fe78, %dec_label_pc_fea8 ], [ %v1_fe78, %dec_label_pc_fe84 ], [ %v1_fe78, %dec_label_pc_fea0 ], [ %v1_fe78, %dec_label_pc_fe98 ], [ %v1_fe78, %bb452 ], [ %v1_fed8, %dec_label_pc_febc ], [ %v1_fed8, %dec_label_pc_fec4 ], [ %v1_fed8, %dec_label_pc_fecc ], [ %v1_fed8, %bb453 ], [ %v1_fed8, %dec_label_pc_fee0 ]
  %v1_fef4 = add i32 %v0_fef4, 1
  store i32 %v1_fef4, i32* @r8, align 4
  %v1_fef8 = call i32 @function_104ec(i32 6)
  store i32 %v2_ffd8, i32* %r1.global-to-local, align 4
  %v3_ff08 = call i32 @function_10428(i32 6, i32* nonnull %stack_var_-60)
  %v3_ff0c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_ff0c, i32* %r2.global-to-local, align 4
  store i32 %v3_ff08, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ff18 = load i32, i32* @r6, align 4
  %v1_ff18 = add i32 %v0_ff18, 4
  %v2_ff18 = inttoptr i32 %v1_ff18 to i32*
  %v3_ff18 = load i32, i32* %v2_ff18, align 4
  %v4_ff1c = call i32 @function_11d38(i32 %v3_ff18, i32 %v3_ff08, i32 %v3_ff0c, i32 16384)
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16a14.188 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_ff2c = load i32, i32* @r6, align 4
  %v1_ff2c = add i32 %v0_ff2c, 4
  %v2_ff2c = inttoptr i32 %v1_ff2c to i32*
  %v3_ff2c = load i32, i32* %v2_ff2c, align 4
  %v4_ff30 = call i32 @function_11d38(i32 %v3_ff2c, i32 ptrtoint ([3 x i8]* @global_var_16a14.188 to i32), i32 2, i32 16384)
  %v1_ff38 = call i32 @function_1044c(i32 6)
  store i32 8, i32* @r3, align 4
  %v1_ff40 = load i32, i32* @r6, align 4
  %v2_ff40 = add i32 %v1_ff40, 12
  %v3_ff40 = inttoptr i32 %v2_ff40 to i32*
  store i32 8, i32* %v3_ff40, align 4
  br label %dec_label_pc_f8cc

dec_label_pc_ff48:                                ; preds = %dec_label_pc_f6fc
  %v1_ff48 = add i32 %v0_f6fc, 24
  %v2_ff48 = inttoptr i32 %v1_ff48 to i32*
  %v3_ff48 = load i32, i32* %v2_ff48, align 4
  store i32 %v3_ff48, i32* %r2.global-to-local, align 4
  %v1_ff4c = add i32 %v3_ff48, -1
  store i32 %v1_ff4c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ff50 = icmp eq i32 %v1_ff4c, 0
  store i1 %v2_ff50, i1* %cpsr_z.global-to-local, align 1
  %tmp454 = icmp slt i32 %v1_ff4c, 1
  br i1 %tmp454, label %dec_label_pc_ffc4, label %dec_label_pc_ff58

dec_label_pc_ff58:                                ; preds = %dec_label_pc_ff48
  %v2_ff58 = add i32 %v1_ff4c, %v0_f6fc
  store i32 %v2_ff58, i32* %r3.global-to-local, align 4
  %v1_ff5c = add i32 %v2_ff58, 28
  %v2_ff5c = inttoptr i32 %v1_ff5c to i8*
  %v3_ff5c = load i8, i8* %v2_ff5c, align 1
  %v4_ff5c = zext i8 %v3_ff5c to i32
  store i32 %v4_ff5c, i32* %r3.global-to-local, align 4
  %v2_ff60 = icmp ugt i8 %v3_ff5c, 61
  store i1 %v2_ff60, i1* %cpsr_c.global-to-local, align 1
  %v7_ff60 = icmp eq i8 %v3_ff5c, 62
  store i1 %v7_ff60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff60, label %dec_label_pc_100dc, label %bb455

bb455:                                            ; preds = %dec_label_pc_ff58
  %v3_ff64 = icmp ugt i8 %v3_ff5c, 57
  store i1 %v3_ff64, i1* %cpsr_c.global-to-local, align 1
  %v8_ff64 = icmp eq i8 %v3_ff5c, 58
  store i1 %v8_ff64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ff64, label %dec_label_pc_100dc, label %dec_label_pc_ff6c

dec_label_pc_ff6c:                                ; preds = %bb455
  %v2_ff6c = icmp ugt i8 %v3_ff5c, 35
  store i1 %v2_ff6c, i1* %cpsr_c.global-to-local, align 1
  %v7_ff6c = icmp eq i8 %v3_ff5c, 36
  store i1 %v7_ff6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff6c, label %dec_label_pc_100dc, label %dec_label_pc_ff74

dec_label_pc_ff74:                                ; preds = %dec_label_pc_ff6c
  %v2_ff74 = icmp ugt i8 %v3_ff5c, 34
  store i1 %v2_ff74, i1* %cpsr_c.global-to-local, align 1
  %v7_ff74 = icmp eq i8 %v3_ff5c, 35
  store i1 %v7_ff74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff74, label %dec_label_pc_100dc, label %dec_label_pc_ff7c

dec_label_pc_ff7c:                                ; preds = %dec_label_pc_ff74
  %v2_ff7c = icmp ugt i8 %v3_ff5c, 36
  store i1 %v2_ff7c, i1* %cpsr_c.global-to-local, align 1
  %v7_ff7c = icmp eq i8 %v3_ff5c, 37
  store i1 %v7_ff7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff7c, label %dec_label_pc_100dc, label %dec_label_pc_ffbc.preheader

dec_label_pc_ffbc.preheader:                      ; preds = %dec_label_pc_ff7c
  %v3_ff80 = add i32 %v0_f6fc, 28
  %v2_ff84 = add i32 %v3_ff80, %v3_ff48
  store i32 %v2_ff84, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ffbc

dec_label_pc_ff90:                                ; preds = %dec_label_pc_ffbc
  %v1_ff90 = add i32 %v0_ffb4, -2
  %v2_ff90 = inttoptr i32 %v1_ff90 to i8*
  %v3_ff90 = load i8, i8* %v2_ff90, align 1
  %v4_ff90 = zext i8 %v3_ff90 to i32
  store i32 %v4_ff90, i32* %r2.global-to-local, align 4
  %v2_ff94 = icmp ugt i8 %v3_ff90, 61
  store i1 %v2_ff94, i1* %cpsr_c.global-to-local, align 1
  %v7_ff94 = icmp eq i8 %v3_ff90, 62
  store i1 %v7_ff94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff94, label %dec_label_pc_100dc, label %bb456

bb456:                                            ; preds = %dec_label_pc_ff90
  %v3_ff98 = icmp ugt i8 %v3_ff90, 57
  store i1 %v3_ff98, i1* %cpsr_c.global-to-local, align 1
  %v8_ff98 = icmp eq i8 %v3_ff90, 58
  store i1 %v8_ff98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ff98, label %dec_label_pc_100dc, label %dec_label_pc_ffa0

dec_label_pc_ffa0:                                ; preds = %bb456
  %v2_ffa0 = icmp ugt i8 %v3_ff90, 35
  store i1 %v2_ffa0, i1* %cpsr_c.global-to-local, align 1
  %v7_ffa0 = icmp eq i8 %v3_ff90, 36
  store i1 %v7_ffa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ffa0, label %dec_label_pc_100dc, label %dec_label_pc_ffa8

dec_label_pc_ffa8:                                ; preds = %dec_label_pc_ffa0
  %v2_ffa8 = icmp ugt i8 %v3_ff90, 34
  store i1 %v2_ffa8, i1* %cpsr_c.global-to-local, align 1
  %v7_ffa8 = icmp eq i8 %v3_ff90, 35
  store i1 %v7_ffa8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ffa8, label %dec_label_pc_100dc, label %dec_label_pc_ffb0

dec_label_pc_ffb0:                                ; preds = %dec_label_pc_ffa8
  %v2_ffb0 = icmp ugt i8 %v3_ff90, 36
  store i1 %v2_ffb0, i1* %cpsr_c.global-to-local, align 1
  %v7_ffb0 = icmp eq i8 %v3_ff90, 37
  store i1 %v7_ffb0, i1* %cpsr_z.global-to-local, align 1
  %v1_ffb4 = add i32 %v0_ffb4, -1
  store i32 %v1_ffb4, i32* %r3.global-to-local, align 4
  br i1 %v7_ffb0, label %dec_label_pc_100dc, label %dec_label_pc_ffbc

dec_label_pc_ffbc:                                ; preds = %dec_label_pc_ffbc.preheader, %dec_label_pc_ffb0
  %v0_ffb4 = phi i32 [ %v2_ff84, %dec_label_pc_ffbc.preheader ], [ %v1_ffb4, %dec_label_pc_ffb0 ]
  %v0_ffbc = phi i32 [ %v1_ff4c, %dec_label_pc_ffbc.preheader ], [ %v1_ffbc, %dec_label_pc_ffb0 ]
  %v1_ffbc = add i32 %v0_ffbc, -1
  store i32 %v1_ffbc, i32* %r1.global-to-local, align 4
  %v2_ffbc = icmp ne i32 %v0_ffbc, 0
  store i1 %v2_ffbc, i1* %cpsr_c.global-to-local, align 1
  %v7_ffbc = icmp eq i32 %v0_ffbc, 1
  store i1 %v7_ffbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ffbc, label %dec_label_pc_ffc4, label %dec_label_pc_ff90

dec_label_pc_ffc4:                                ; preds = %dec_label_pc_ffbc, %dec_label_pc_ff48
  %v1_ffc8 = call i32 @function_104ec(i32 31)
  %v1_ffd0 = call i32 @function_104ec(i32 32)
  store i32 %v2_ffd8, i32* %r1.global-to-local, align 4
  %v3_ffe0 = call i32 @function_10428(i32 31, i32* nonnull %stack_var_-60)
  store i32 %v3_ffe0, i32* @r4, align 4
  store i32 %v2_ffd8, i32* %r1.global-to-local, align 4
  %v3_fff4 = call i32 @function_10428(i32 32, i32* nonnull %stack_var_-60)
  %v3_fff8 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_fff4, i32* @r5, align 4
  %v0_10000 = load i32, i32* @r4, align 4
  store i32 %v0_10000, i32* %r2.global-to-local, align 4
  %v1_10004 = add i32 %v3_fff8, -1
  store i32 %v1_10004, i32* %r3.global-to-local, align 4
  %v0_10008 = load i32, i32* @fp, align 4
  %v0_1000c = load i32, i32* @r6, align 4
  %v1_1000c = add i32 %v0_1000c, 24
  %v2_1000c = inttoptr i32 %v1_1000c to i32*
  %v3_1000c = load i32, i32* %v2_1000c, align 4
  store i32 %v3_1000c, i32* %r1.global-to-local, align 4
  %v4_10010 = call i32 @function_10bd8(i32 %v0_10008, i32 %v3_1000c, i32 %v0_10000, i32 %v1_10004)
  %v2_10014 = icmp eq i32 %v4_10010, -1
  store i1 %v2_10014, i1* %cpsr_c.global-to-local, align 1
  %v7_10014 = icmp eq i32 %v4_10010, -1
  store i1 %v7_10014, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10014, label %dec_label_pc_10024, label %dec_label_pc_1004c

dec_label_pc_10024:                               ; preds = %dec_label_pc_ffc4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_10024 = load i32, i32* %stack_var_-60, align 4
  %v0_10028 = load i32, i32* @r5, align 4
  store i32 %v0_10028, i32* %r2.global-to-local, align 4
  %v1_1002c = add i32 %v3_10024, -1
  store i32 %v1_1002c, i32* %r3.global-to-local, align 4
  %v0_10030 = load i32, i32* @fp, align 4
  %v0_10034 = load i32, i32* @r6, align 4
  %v1_10034 = add i32 %v0_10034, 24
  %v2_10034 = inttoptr i32 %v1_10034 to i32*
  %v3_10034 = load i32, i32* %v2_10034, align 4
  store i32 %v3_10034, i32* %r1.global-to-local, align 4
  %v4_10038 = call i32 @function_10bd8(i32 %v0_10030, i32 %v3_10034, i32 %v0_10028, i32 %v1_1002c)
  %v2_1003c = icmp eq i32 %v4_10038, -1
  store i1 %v2_1003c, i1* %cpsr_c.global-to-local, align 1
  %v7_1003c = icmp eq i32 %v4_10038, -1
  store i1 %v7_1003c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1003c, label %dec_label_pc_103ec, label %dec_label_pc_1004c

dec_label_pc_1004c:                               ; preds = %dec_label_pc_10024, %dec_label_pc_ffc4
  store i32 1, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  %v1_10050 = call i32 @function_1044c(i32 31)
  %v1_10058 = call i32 @function_1044c(i32 32)
  %v0_1005c = load i32, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1005c = icmp eq i32 %v0_1005c, 0
  store i1 %v2_1005c, i1* %cpsr_z.global-to-local, align 1
  %tmp457 = icmp slt i32 %v0_1005c, 1
  br i1 %tmp457, label %dec_label_pc_f8c4, label %dec_label_pc_100f0

dec_label_pc_10068:                               ; preds = %dec_label_pc_fa0c
  store i32 %v2_1006c, i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_16a20.190 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_1006c, i32* @r0, align 4
  %v0_10084 = call i32 @function_11b10()
  store i32 9, i32* @r2, align 4
  store i32 %v2_10080, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_16a17.192 to i32), i32* @r1, align 4
  %v0_10094 = call i32 @function_11b10()
  %v0_10098 = load i32, i32* @r6, align 4
  %v1_10098 = add i32 %v0_10098, 24
  %v2_10098 = inttoptr i32 %v1_10098 to i32*
  %v3_10098 = load i32, i32* %v2_10098, align 4
  %v0_1009c = load i32, i32* @r4, align 4
  %v1_1009c = add i32 %v0_1009c, 2
  store i32 %v1_1009c, i32* %r2.global-to-local, align 4
  %v0_100a0 = load i32, i32* @fp, align 4
  %v2_100a0 = add i32 %v0_100a0, %v3_10098
  store i32 %v2_100a0, i32* @r3, align 4
  %v3_100a4 = icmp uge i32 %v2_100a0, %v1_1009c
  store i1 %v3_100a4, i1* %cpsr_c.global-to-local, align 1
  %v9_100a4 = icmp eq i32 %v2_100a0, %v1_1009c
  store i1 %v9_100a4, i1* %cpsr_z.global-to-local, align 1
  %v2_100a8 = xor i1 %v3_100a4, true
  %v3_100a8 = or i1 %v9_100a4, %v2_100a8
  br i1 %v3_100a8, label %dec_label_pc_10068.dec_label_pc_fa88.loopexit_crit_edge, label %dec_label_pc_100ac

dec_label_pc_10068.dec_label_pc_fa88.loopexit_crit_edge: ; preds = %dec_label_pc_10068
  %v0_fa88.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_fa88

dec_label_pc_100ac:                               ; preds = %dec_label_pc_10068
  %v2_100ac = inttoptr i32 %v1_1009c to i8*
  %v3_100ac = load i8, i8* %v2_100ac, align 1
  %v4_100ac = zext i8 %v3_100ac to i32
  store i32 %v4_100ac, i32* %r3.global-to-local, align 4
  %v2_100b0 = icmp ugt i8 %v3_100ac, 30
  store i1 %v2_100b0, i1* %cpsr_c.global-to-local, align 1
  %v7_100b0 = icmp eq i8 %v3_100ac, 31
  store i1 %v7_100b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_100b0, label %dec_label_pc_1017c, label %dec_label_pc_100b8

dec_label_pc_100b8:                               ; preds = %dec_label_pc_100ac
  %v1_100b8 = inttoptr i32 %v0_1009c to i8*
  %v2_100b8 = load i8, i8* %v1_100b8, align 1
  %v3_100b8 = zext i8 %v2_100b8 to i32
  store i32 %v3_100b8, i32* %r3.global-to-local, align 4
  %v2_100bc = icmp ugt i8 %v2_100b8, -4
  store i1 %v2_100bc, i1* %cpsr_c.global-to-local, align 1
  %v7_100bc = icmp eq i8 %v2_100b8, -3
  store i1 %v7_100bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_100bc, label %.thread147, label %dec_label_pc_100cc

.thread147:                                       ; preds = %dec_label_pc_100b8
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_100b8, align 1
  %v0_100c8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_100c8.pr.pr, label %dec_label_pc_fa20, label %.thread147.dec_label_pc_100ccthread-pre-split_crit_edge

.thread147.dec_label_pc_100ccthread-pre-split_crit_edge: ; preds = %.thread147
  %v0_100cc.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_100cc

dec_label_pc_100cc:                               ; preds = %dec_label_pc_100b8, %.thread147.dec_label_pc_100ccthread-pre-split_crit_edge
  %v0_100cc.pr = phi i32 [ %v0_100cc.pr.pre, %.thread147.dec_label_pc_100ccthread-pre-split_crit_edge ], [ %v3_100b8, %dec_label_pc_100b8 ]
  %v2_100cc = icmp ugt i32 %v0_100cc.pr, 250
  store i1 %v2_100cc, i1* %cpsr_c.global-to-local, align 1
  %v7_100cc = icmp eq i32 %v0_100cc.pr, 251
  store i1 %v7_100cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_100cc, label %bb458, label %dec_label_pc_fa20

bb458:                                            ; preds = %dec_label_pc_100cc
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_100d4 = load i32, i32* @r4, align 4
  %v4_100d4 = inttoptr i32 %v3_100d4 to i8*
  store i8 -3, i8* %v4_100d4, align 1
  br label %dec_label_pc_fa20

dec_label_pc_100dc:                               ; preds = %dec_label_pc_ff90, %dec_label_pc_ffb0, %dec_label_pc_ffa8, %dec_label_pc_ffa0, %bb456, %dec_label_pc_ff7c, %dec_label_pc_ff58, %dec_label_pc_ff74, %dec_label_pc_ff6c, %bb455
  %v0_100e0 = phi i32 [ %v1_ff4c, %dec_label_pc_ff7c ], [ %v1_ff4c, %dec_label_pc_ff58 ], [ %v1_ff4c, %dec_label_pc_ff74 ], [ %v1_ff4c, %dec_label_pc_ff6c ], [ %v1_ff4c, %bb455 ], [ %v1_ffbc, %bb456 ], [ %v1_ffbc, %dec_label_pc_ffa0 ], [ %v1_ffbc, %dec_label_pc_ffa8 ], [ %v1_ffbc, %dec_label_pc_ffb0 ], [ %v1_ffbc, %dec_label_pc_ff90 ]
  %v1_100e0 = add i32 %v0_100e0, 1
  store i32 %v1_100e0, i32* @r8, align 4
  %v1_100e4 = call i32 @function_1044c(i32 31)
  %v1_100ec = call i32 @function_1044c(i32 32)
  br label %dec_label_pc_100f0

dec_label_pc_100f0:                               ; preds = %dec_label_pc_1004c, %dec_label_pc_100dc
  %v0_100f0 = load i32, i32* @r6, align 4
  %v1_100f0 = inttoptr i32 %v0_100f0 to i32*
  %v2_100f0 = load i32, i32* %v1_100f0, align 4
  store i32 %v2_100f0, i32* %r3.global-to-local, align 4
  %v1_100f4 = add i32 %v0_100f0, 4
  %v2_100f4 = inttoptr i32 %v1_100f4 to i32*
  %v3_100f4 = load i32, i32* %v2_100f4, align 4
  %v1_100f8 = add i32 %v2_100f0, 12
  %v2_100f8 = inttoptr i32 %v1_100f8 to i8*
  %v3_100f8 = load i8, i8* %v2_100f8, align 1
  %v4_100f8 = zext i8 %v3_100f8 to i32
  store i32 %v4_100f8, i32* %r2.global-to-local, align 4
  %v1_100fc = inttoptr i32 %v2_100f0 to i32*
  %v2_100fc = load i32, i32* %v1_100fc, align 4
  store i32 %v2_100fc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10104 = call i32 @function_11d38(i32 %v3_100f4, i32 %v2_100fc, i32 %v4_100f8, i32 16384)
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1010c = load i32, i32* @r6, align 4
  %v1_1010c = add i32 %v0_1010c, 4
  %v2_1010c = inttoptr i32 %v1_1010c to i32*
  %v3_1010c = load i32, i32* %v2_1010c, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_16a14.188 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_10118 = call i32 @function_11d38(i32 %v3_1010c, i32 ptrtoint ([3 x i8]* @global_var_16a14.188 to i32), i32 2, i32 16384)
  store i32 4, i32* @r3, align 4
  %v1_10120 = load i32, i32* @r6, align 4
  %v2_10120 = add i32 %v1_10120, 12
  %v3_10120 = inttoptr i32 %v2_10120 to i32*
  store i32 4, i32* %v3_10120, align 4
  br label %dec_label_pc_f8c4

dec_label_pc_10128:                               ; preds = %dec_label_pc_fdc8, %dec_label_pc_fde0, %dec_label_pc_fdd8, %bb450, %dec_label_pc_fdb4, %dec_label_pc_fd98, %dec_label_pc_fdac, %bb449
  %v0_1012c = phi i32 [ %v1_fd8c, %dec_label_pc_fdb4 ], [ %v1_fd8c, %dec_label_pc_fd98 ], [ %v1_fd8c, %dec_label_pc_fdac ], [ %v1_fd8c, %bb449 ], [ %v1_fdec, %bb450 ], [ %v1_fdec, %dec_label_pc_fdd8 ], [ %v1_fdec, %dec_label_pc_fde0 ], [ %v1_fdec, %dec_label_pc_fdc8 ]
  %v1_1012c = add i32 %v0_1012c, 1
  store i32 %v1_1012c, i32* @r8, align 4
  %v1_10130 = call i32 @function_1044c(i32 30)
  br label %dec_label_pc_fe3c

dec_label_pc_10138:                               ; preds = %dec_label_pc_f7a0
  %v0_10140 = load i32, i32* @r6, align 4
  %v1_10140 = add i32 %v0_10140, 4
  %v2_10140 = inttoptr i32 %v1_10140 to i32*
  %v3_10140 = load i32, i32* %v2_10140, align 4
  %v1_10144 = call i32 @function_115e0(i32 %v3_10140)
  %v0_10148 = load i32, i32* @r6, align 4
  %v1_10148 = add i32 %v0_10148, 384
  %v2_10148 = inttoptr i32 %v1_10148 to i8*
  %v3_10148 = load i8, i8* %v2_10148, align 1
  %v4_10148 = zext i8 %v3_10148 to i32
  %v1_1014c = add nuw nsw i32 %v4_10148, 1
  %v1_10150 = urem i32 %v1_1014c, 256
  store i32 %v1_10150, i32* @r3, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_10158 = icmp ugt i32 %v1_10150, 9
  store i1 %v2_10158, i1* %cpsr_c.global-to-local, align 1
  %v7_10158 = icmp eq i32 %v1_10150, 10
  store i1 %v7_10158, i1* %cpsr_z.global-to-local, align 1
  %v2_1015c = add i32 %v0_10148, 4
  %v3_1015c = inttoptr i32 %v2_1015c to i32*
  store i32 -1, i32* %v3_1015c, align 4
  %v0_10160 = load i32, i32* @r3, align 4
  %v1_10160 = trunc i32 %v0_10160 to i8
  %v2_10160 = load i32, i32* @r6, align 4
  %v3_10160 = add i32 %v2_10160, 384
  %v4_10160 = inttoptr i32 %v3_10160 to i8*
  store i8 %v1_10160, i8* %v4_10160, align 1
  %v0_10164 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10164, label %dec_label_pc_10168, label %dec_label_pc_101c4

dec_label_pc_10168:                               ; preds = %dec_label_pc_10138
  store i32 0, i32* @r3, align 4
  store i32 -1, i32* @r8, align 4
  %v1_10170 = load i32, i32* @r6, align 4
  %v2_10170 = add i32 %v1_10170, 12
  %v3_10170 = inttoptr i32 %v2_10170 to i32*
  store i32 0, i32* %v3_10170, align 4
  %v0_10174 = load i32, i32* @r3, align 4
  %v1_10174 = trunc i32 %v0_10174 to i8
  %v2_10174 = load i32, i32* @r6, align 4
  %v3_10174 = add i32 %v2_10174, 384
  %v4_10174 = inttoptr i32 %v3_10174 to i8*
  store i8 %v1_10174, i8* %v4_10174, align 1
  br label %dec_label_pc_f8cc

dec_label_pc_1017c:                               ; preds = %dec_label_pc_100ac
  store i32 %v2_1006c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_10188 = add i32 %v0_10098, 4
  %v2_10188 = inttoptr i32 %v1_10188 to i32*
  %v3_10188 = load i32, i32* %v2_10188, align 4
  %v4_1018c = call i32 @function_11d38(i32 %v3_10188, i32 %v2_1006c, i32 3, i32 16384)
  br label %dec_label_pc_fa6c

dec_label_pc_101a0:                               ; preds = %dec_label_pc_f684
  store i32 %.pre, i32* @r0, align 4
  %v1_101a8 = add i32 %v0_101a0, 92
  store i32 %v1_101a8, i32* @r1, align 4
  store i32 292, i32* @r2, align 4
  %v3_101b0 = call i32 @function_11b00(i32 %.pre, i32 %v1_101a8, i32 292)
  %v0_101b4 = load i32, i32* @r6, align 4
  %v1_101b4 = add i32 %v0_101b4, 24
  %v2_101b4 = inttoptr i32 %v1_101b4 to i32*
  %v3_101b4 = load i32, i32* %v2_101b4, align 4
  %v1_101b8 = add i32 %v3_101b4, -64
  store i32 %v1_101b8, i32* %r3.global-to-local, align 4
  store i32 %v1_101b8, i32* %v2_101b4, align 4
  br label %dec_label_pc_f694

dec_label_pc_101c4:                               ; preds = %dec_label_pc_10138
  %v0_101c4 = load i32, i32* @r6, align 4
  store i32 %v0_101c4, i32* @r0, align 4
  %v0_101c8 = call i32 @function_ea64()
  store i32 -1, i32* @r8, align 4
  br label %dec_label_pc_f8cc

dec_label_pc_101d4:                               ; preds = %dec_label_pc_f63c
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-60, align 4
  store i32 %v2_eda8, i32* %r3.global-to-local, align 4
  store i32 %v2_ffd8, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-56, align 4
  %v5_101fc = call i32 @function_11c4c(i32 %v3_f630, i32 1, i32 4, i32 %v2_eda8, i32 %v2_ffd8)
  %v3_10200 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10200, i32* %r3.global-to-local, align 4
  %v2_10204 = or i32 %v3_10200, %v5_101fc
  %v4_10204 = icmp eq i32 %v2_10204, 0
  store i1 %v4_10204, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_10204, label %dec_label_pc_1020c, label %dec_label_pc_10298

dec_label_pc_1020c:                               ; preds = %dec_label_pc_101d4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_10210 = load i32, i32* @r6, align 4
  %v2_10210 = add i32 %v1_10210, 12
  %v3_10210 = inttoptr i32 %v2_10210 to i32*
  store i32 2, i32* %v3_10210, align 4
  %v0_10214 = call i32 @function_e29c()
  store i32 ptrtoint (i16** @global_var_1f2a0.129 to i32), i32* %r3.global-to-local, align 4
  %v2_1021c = load i16, i16* bitcast (i16** @global_var_1f2a0.129 to i16*), align 4
  %v3_1021c = zext i16 %v2_1021c to i32
  store i32 %v3_1021c, i32* %r1.global-to-local, align 4
  %v3_10220 = call i32 @function_11178(i32 %v0_10214, i32 %v3_1021c)
  store i32 ptrtoint (i32* @global_var_1f270.125 to i32), i32* %r3.global-to-local, align 4
  %v2_10228 = load i32, i32* @global_var_1f270.125, align 4
  store i32 %v2_10228, i32* %ip.global-to-local, align 4
  %v1_10230 = load i32, i32* @r4, align 4
  %v9_10230 = icmp eq i32 %v2_10228, %v1_10230
  store i1 %v9_10230, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_1021c, i32* %r1.global-to-local, align 4
  %v7_10238 = icmp sgt i32 %v2_10228, %v1_10230
  br i1 %v7_10238, label %dec_label_pc_1023c, label %dec_label_pc_10274

dec_label_pc_1023c:                               ; preds = %dec_label_pc_1020c
  %v2_10240 = load i32, i32* @global_var_1f29c.127, align 4
  store i32 %v2_10240, i32* %r3.global-to-local, align 4
  store i32 %v1_10230, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10248

dec_label_pc_10248:                               ; preds = %dec_label_pc_10264, %dec_label_pc_1023c
  %v0_10264 = phi i32 [ %v1_10264, %dec_label_pc_10264 ], [ %v1_10230, %dec_label_pc_1023c ]
  %v0_1026c = phi i32 [ %v1_1026c, %dec_label_pc_10264 ], [ %v2_10240, %dec_label_pc_1023c ]
  %v1_1024c = add i32 %v0_1026c, 8
  %v2_1024c = inttoptr i32 %v1_1024c to i16*
  %v3_1024c = load i16, i16* %v2_1024c, align 2
  %v4_1024c = zext i16 %v3_1024c to i32
  store i32 %v4_1024c, i32* %r3.global-to-local, align 4
  %tmp459 = icmp ugt i16 %v3_1024c, %v2_1021c
  br i1 %tmp459, label %dec_label_pc_10264, label %dec_label_pc_10258

dec_label_pc_10258:                               ; preds = %dec_label_pc_10248
  %v1_10258 = add i32 %v0_1026c, 10
  %v2_10258 = inttoptr i32 %v1_10258 to i16*
  %v3_10258 = load i16, i16* %v2_10258, align 2
  %v4_10258 = zext i16 %v3_10258 to i32
  store i32 %v4_10258, i32* %r3.global-to-local, align 4
  %v3_1025c = icmp uge i16 %v3_10258, %v2_1021c
  %v9_1025c = icmp eq i16 %v3_10258, %v2_1021c
  %v2_10260 = xor i1 %v9_1025c, true
  %v3_10260 = and i1 %v3_1025c, %v2_10260
  br i1 %v3_10260, label %dec_label_pc_10278.loopexit, label %dec_label_pc_10264

dec_label_pc_10264:                               ; preds = %dec_label_pc_10258, %dec_label_pc_10248
  %v1_10264 = add i32 %v0_10264, 1
  store i32 %v1_10264, i32* %r2.global-to-local, align 4
  %v9_10268 = icmp eq i32 %v1_10264, %v2_10228
  %v1_1026c = add i32 %v0_1026c, 16
  store i32 %v1_1026c, i32* %r3.global-to-local, align 4
  br i1 %v9_10268, label %dec_label_pc_10274.loopexit, label %dec_label_pc_10248

dec_label_pc_10274.loopexit:                      ; preds = %dec_label_pc_10264
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10274

dec_label_pc_10274:                               ; preds = %dec_label_pc_10274.loopexit, %dec_label_pc_1020c
  br label %dec_label_pc_10278

dec_label_pc_10278.loopexit:                      ; preds = %dec_label_pc_10258
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v9_1025c, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10278

dec_label_pc_10278:                               ; preds = %dec_label_pc_10278.loopexit, %dec_label_pc_10274
  %v0_1028c = phi i32 [ %v0_1026c, %dec_label_pc_10278.loopexit ], [ 0, %dec_label_pc_10274 ]
  %v0_10278 = load i32, i32* @r6, align 4
  %v1_10278 = add i32 %v0_10278, 4
  %v2_10278 = inttoptr i32 %v1_10278 to i32*
  %v3_10278 = load i32, i32* %v2_10278, align 4
  %v3_1027c = udiv i32 %v3_10278, 32
  store i32 %v3_1027c, i32* %r2.global-to-local, align 4
  %v1_10280 = urem i32 %v3_10278, 32
  store i32 %v1_10280, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_10284 = mul nuw nsw i32 %v3_1027c, 4
  store i32 %v3_10284, i32* @ip, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_1028c = inttoptr i32 %v0_10278 to i32*
  store i32 %v0_1028c, i32* %v2_1028c, align 4
  %v0_10290 = load i32, i32* %r3.global-to-local, align 4
  %v1_10290 = load i32, i32* @r6, align 4
  %v2_10290 = add i32 %v1_10290, 24
  %v3_10290 = inttoptr i32 %v2_10290 to i32*
  store i32 %v0_10290, i32* %v3_10290, align 4
  %v0_f664.pre = load i32, i32* @ip, align 4
  %v1_f66c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f660

dec_label_pc_10298:                               ; preds = %dec_label_pc_101d4
  %v0_10298 = load i32, i32* @r6, align 4
  %v1_10298 = add i32 %v0_10298, 4
  %v2_10298 = inttoptr i32 %v1_10298 to i32*
  %v3_10298 = load i32, i32* %v2_10298, align 4
  %v1_1029c = call i32 @function_115e0(i32 %v3_10298)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_102a4 = load i32, i32* @r4, align 4
  %v1_102a4 = load i32, i32* @r6, align 4
  %v2_102a4 = add i32 %v1_102a4, 12
  %v3_102a4 = inttoptr i32 %v2_102a4 to i32*
  store i32 %v0_102a4, i32* %v3_102a4, align 4
  %v0_102a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_102a8 = load i32, i32* @r6, align 4
  %v2_102a8 = add i32 %v1_102a8, 4
  %v3_102a8 = inttoptr i32 %v2_102a8 to i32*
  store i32 %v0_102a8, i32* %v3_102a8, align 4
  %v0_102ac = load i32, i32* @r4, align 4
  %v1_102ac = trunc i32 %v0_102ac to i8
  %v2_102ac = load i32, i32* @r6, align 4
  %v3_102ac = add i32 %v2_102ac, 384
  %v4_102ac = inttoptr i32 %v3_102ac to i8*
  store i8 %v1_102ac, i8* %v4_102ac, align 1
  br label %dec_label_pc_f788

dec_label_pc_102b4:                               ; preds = %dec_label_pc_f884
  store i32 %v2_f834, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-96, align 4
  %v1_102c0 = add i32 %v1_f8a0, 4
  %v2_102c0 = inttoptr i32 %v1_102c0 to i32*
  %v3_102c0 = load i32, i32* %v2_102c0, align 4
  store i32 %v3_102c0, i32* @r4, align 4
  %v0_102c4 = call i32 @function_e29c()
  %v0_102c8 = load i32, i32* @r5, align 4
  %v1_102c8 = inttoptr i32 %v0_102c8 to i8*
  %v2_102c8 = load i8, i8* %v1_102c8, align 1
  %v3_102c8 = zext i8 %v2_102c8 to i32
  store i32 %v3_102c8, i32* %r1.global-to-local, align 4
  %v2_102cc = call i32 @function_11178(i32 %v0_102c4, i32 %v3_102c8)
  %v0_102d0 = load i32, i32* @r4, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_102d0 = mul nuw nsw i32 %v3_102c8, 4
  %v5_102d0 = add i32 %v0_102d0, %v4_102d0
  %v6_102d0 = inttoptr i32 %v5_102d0 to i32*
  %v7_102d0 = load i32, i32* %v6_102d0, align 4
  store i32 %v7_102d0, i32* %r3.global-to-local, align 4
  %v0_102d8 = load i32, i32* @sl, align 4
  store i32 %v0_102d8, i32* %r1.global-to-local, align 4
  %v2_102e0 = inttoptr i32 %v0_102d8 to i32*
  %v3_102e0 = call i32 @function_10428(i32 4, i32* %v2_102e0)
  %v0_102f0 = load i32, i32* @r5, align 4
  %v1_102f4 = call i32 @function_e50c(i32 %v0_102f0)
  %v1_102fc = call i32 @function_1044c(i32 3)
  %v1_10304 = call i32 @function_1044c(i32 4)
  %v0_1030c = load i32, i32* @r7, align 4
  store i32 %v2_10310, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_10318 = call i32 @function_11bdc(i32 %v0_1030c, i32 %v2_10310, i32 16)
  %v3_1031c = icmp eq i32 %v3_10318, -1
  store i1 %v3_1031c, i1* %cpsr_c.global-to-local, align 1
  %v8_1031c = icmp eq i32 %v3_10318, -1
  store i1 %v8_1031c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1031c, label %dec_label_pc_10324, label %dec_label_pc_10334

dec_label_pc_10324:                               ; preds = %dec_label_pc_102b4
  %v0_10324 = load i32, i32* @r7, align 4
  %v1_10328 = call i32 @function_115e0(i32 %v0_10324)
  %v0_1032c = load i32, i32* @sl, align 4
  %v1_10330 = call i32 @function_13648(i32 %v0_1032c)
  br label %dec_label_pc_10334

dec_label_pc_10334:                               ; preds = %dec_label_pc_102b4, %dec_label_pc_10324
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v2_eda8, i32* %r1.global-to-local, align 4
  %v0_10340 = load i32, i32* @r7, align 4
  %v0_10344 = load i32, i32* @sl, align 4
  store i32 %v0_10344, i32* %stack_var_-56, align 4
  %v5_10348 = call i32 @function_11d38(i32 %v0_10340, i32 %v2_eda8, i32 1, i32 16384)
  store i32 %v2_ffd8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1035c = load i32, i32* @r7, align 4
  %v4_10360 = call i32 @function_11d38(i32 %v0_1035c, i32 %v2_ffd8, i32 4, i32 16384)
  store i32 %v2_10368, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10374 = load i32, i32* @r7, align 4
  %v4_10378 = call i32 @function_11d38(i32 %v0_10374, i32 %v2_10368, i32 2, i32 16384)
  %v0_1037c = load i32, i32* @sb, align 4
  %v1_1037c = add i32 %v0_1037c, 12
  store i32 %v1_1037c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10388 = load i32, i32* @r7, align 4
  %v4_1038c = call i32 @function_11d38(i32 %v0_10388, i32 %v1_1037c, i32 1, i32 16384)
  %v0_10390 = load i32, i32* @sb, align 4
  %v1_10390 = inttoptr i32 %v0_10390 to i32*
  %v2_10390 = load i32, i32* %v1_10390, align 4
  store i32 %v2_10390, i32* %r1.global-to-local, align 4
  %v1_10394 = add i32 %v0_10390, 12
  %v2_10394 = inttoptr i32 %v1_10394 to i8*
  %v3_10394 = load i8, i8* %v2_10394, align 1
  %v4_10394 = zext i8 %v3_10394 to i32
  store i32 %v4_10394, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1039c = load i32, i32* @r7, align 4
  %v4_103a0 = call i32 @function_11d38(i32 %v0_1039c, i32 %v2_10390, i32 %v4_10394, i32 16384)
  %v0_103a4 = load i32, i32* @sb, align 4
  %v1_103a4 = add i32 %v0_103a4, 13
  store i32 %v1_103a4, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_103b0 = load i32, i32* @r7, align 4
  %v4_103b4 = call i32 @function_11d38(i32 %v0_103b0, i32 %v1_103a4, i32 1, i32 16384)
  %v0_103b8 = load i32, i32* @r7, align 4
  %v0_103bc = load i32, i32* @sb, align 4
  %v1_103bc = add i32 %v0_103bc, 13
  %v2_103bc = inttoptr i32 %v1_103bc to i8*
  %v3_103bc = load i8, i8* %v2_103bc, align 1
  %v4_103bc = zext i8 %v3_103bc to i32
  store i32 %v4_103bc, i32* %r2.global-to-local, align 4
  %v1_103c0 = add i32 %v0_103bc, 4
  %v2_103c0 = inttoptr i32 %v1_103c0 to i32*
  %v3_103c0 = load i32, i32* %v2_103c0, align 4
  store i32 %v3_103c0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_103c8 = call i32 @function_11d38(i32 %v0_103b8, i32 %v3_103c0, i32 %v4_103bc, i32 16384)
  %v0_103cc = load i32, i32* @r7, align 4
  %v1_103d0 = call i32 @function_115e0(i32 %v0_103cc)
  br label %dec_label_pc_103d4

dec_label_pc_103d4:                               ; preds = %dec_label_pc_f868, %dec_label_pc_10334
  %v0_103d4 = load i32, i32* @sl, align 4
  %v1_103d8 = call i32 @function_13648(i32 %v0_103d4)
  br label %dec_label_pc_103dc

dec_label_pc_103dc.loopexit:                      ; preds = %dec_label_pc_fdf4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_103dc

dec_label_pc_103dc:                               ; preds = %dec_label_pc_103dc.loopexit, %dec_label_pc_103d4
  %v1_103e0 = call i32 @function_1044c(i32 30)
  %v0_103e4 = load i32, i32* @r6, align 4
  %v1_103e4 = add i32 %v0_103e4, 12
  %v2_103e4 = inttoptr i32 %v1_103e4 to i32*
  %v3_103e4 = load i32, i32* %v2_103e4, align 4
  br label %dec_label_pc_f67c.backedge

dec_label_pc_103ec:                               ; preds = %dec_label_pc_10024
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v1_103f0 = call i32 @function_1044c(i32 31)
  %v1_103f8 = call i32 @function_1044c(i32 32)
  %v0_103fc = load i32, i32* @r6, align 4
  %v1_103fc = add i32 %v0_103fc, 12
  %v2_103fc = inttoptr i32 %v1_103fc to i32*
  %v3_103fc = load i32, i32* %v2_103fc, align 4
  br label %dec_label_pc_f67c.backedge

dec_label_pc_f67c.backedge.thread:                ; preds = %dec_label_pc_f8f4, %dec_label_pc_fa98, %dec_label_pc_fb6c, %dec_label_pc_fc40, %dec_label_pc_fe74
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f684

dec_label_pc_f67c.backedge.thread564:             ; preds = %dec_label_pc_fbd0, %dec_label_pc_fafc, %dec_label_pc_fed8, %dec_label_pc_fd18, %dec_label_pc_f958
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f684

dec_label_pc_f67c.backedge:                       ; preds = %dec_label_pc_f6fc, %dec_label_pc_103ec, %dec_label_pc_103dc
  %v0_f684228 = phi i32 [ %v0_103e4, %dec_label_pc_103dc ], [ %v0_103fc, %dec_label_pc_103ec ], [ %v0_f6fc, %dec_label_pc_f6fc ]
  %v0_f67c.be = phi i32 [ %v3_103e4, %dec_label_pc_103dc ], [ %v3_103fc, %dec_label_pc_103ec ], [ %v3_f6fc, %dec_label_pc_f6fc ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f67c = icmp eq i32 %v0_f67c.be, 0
  store i1 %v2_f67c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f67c, label %dec_label_pc_f788, label %dec_label_pc_f684

dec_label_pc_10404:                               ; preds = %dec_label_pc_f734
  store i32 %v0_f298, i32* %r2.global-to-local, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 104, i32* %v2_f2b4, align 4
  br label %dec_label_pc_f750

dec_label_pc_10414:                               ; preds = %dec_label_pc_ed88
  store i32 ptrtoint (i32* @global_var_212f8.136 to i32), i32* %r2.global-to-local, align 4
  %v2_10418 = load i32, i32* @global_var_212f8.136, align 4
  %v1_1041c = call i32 @function_115e0(i32 %v2_10418)
  br label %dec_label_pc_10420

dec_label_pc_10420:                               ; preds = %dec_label_pc_ed64, %dec_label_pc_10414
  %v0_10420 = load i32, i32* @r5, align 4
  %v1_10424 = call i32 @function_13648(i32 %v0_10420)
  ret i32 %v1_10424

; uselistorder directives
  uselistorder i32 %v3_10278, { 1, 0 }
  uselistorder i32 %v1_1026c, { 1, 0 }
  uselistorder i32 %v1_10264, { 1, 2, 0 }
  uselistorder i1 %v9_1025c, { 1, 0 }
  uselistorder i32 %v2_10228, { 0, 2, 1, 3 }
  uselistorder i32 %v1_10150, { 2, 1, 0 }
  uselistorder i32 %v0_100cc.pr, { 1, 0 }
  uselistorder i32 %v0_10098, { 1, 2, 0 }
  uselistorder i1 %v7_1003c, { 1, 0 }
  uselistorder i1 %v7_10014, { 1, 0 }
  uselistorder i32 %v1_ffbc, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_ffbc, { 0, 2, 1 }
  uselistorder i32 %v0_ffb4, { 1, 0 }
  uselistorder i1 %v7_ffb0, { 1, 0 }
  uselistorder i1 %v7_ffa8, { 1, 0 }
  uselistorder i1 %v7_ffa0, { 1, 0 }
  uselistorder i1 %v8_ff98, { 1, 0 }
  uselistorder i1 %v7_ff7c, { 1, 0 }
  uselistorder i1 %v7_ff74, { 1, 0 }
  uselistorder i1 %v7_ff6c, { 1, 0 }
  uselistorder i1 %v8_ff64, { 1, 0 }
  uselistorder i32 %v1_ff4c, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_fee8, { 1, 0 }
  uselistorder i8 %v3_fee0, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_fed8, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_fed8, { 0, 2, 1 }
  uselistorder i32 %v0_fed0, { 1, 0 }
  uselistorder i1 %v7_fecc, { 1, 0 }
  uselistorder i1 %v7_fec4, { 1, 0 }
  uselistorder i1 %v7_febc, { 1, 0 }
  uselistorder i1 %v7_fea8, { 1, 0 }
  uselistorder i1 %v7_fea0, { 1, 0 }
  uselistorder i1 %v7_fe98, { 1, 0 }
  uselistorder i1 %v8_fe90, { 1, 0 }
  uselistorder i32 %v1_fe78, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v7_fe24, { 1, 0 }
  uselistorder i32 %v1_fdec, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_fdec, { 0, 2, 1 }
  uselistorder i32 %v0_fde4, { 1, 0 }
  uselistorder i1 %v7_fde0, { 1, 0 }
  uselistorder i1 %v7_fdd8, { 1, 0 }
  uselistorder i1 %v8_fdd0, { 1, 0 }
  uselistorder i1 %v7_fdb4, { 1, 0 }
  uselistorder i1 %v7_fdac, { 1, 0 }
  uselistorder i1 %v8_fda4, { 1, 0 }
  uselistorder i32 %v1_fd8c, { 1, 2, 3, 4, 5, 0, 6, 7, 8 }
  uselistorder i1 %v8_fd28, { 1, 0 }
  uselistorder i8 %v3_fd20, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_fd18, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_fd18, { 0, 2, 1 }
  uselistorder i32 %v0_fd10, { 1, 0 }
  uselistorder i1 %v7_fd0c, { 1, 0 }
  uselistorder i1 %v7_fd04, { 1, 0 }
  uselistorder i1 %v7_fcfc, { 1, 0 }
  uselistorder i1 %v7_fc74, { 1, 0 }
  uselistorder i1 %v7_fc6c, { 1, 0 }
  uselistorder i1 %v7_fc64, { 1, 0 }
  uselistorder i1 %v8_fc5c, { 1, 0 }
  uselistorder i32 %v1_fc44, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_fbe0, { 1, 0 }
  uselistorder i8 %v3_fbd8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_fbd0, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_fbd0, { 0, 2, 1 }
  uselistorder i32 %v0_fbc8, { 1, 0 }
  uselistorder i1 %v7_fbc4, { 1, 0 }
  uselistorder i1 %v7_fbbc, { 1, 0 }
  uselistorder i1 %v7_fbb4, { 1, 0 }
  uselistorder i1 %v7_fba0, { 1, 0 }
  uselistorder i1 %v7_fb98, { 1, 0 }
  uselistorder i1 %v7_fb90, { 1, 0 }
  uselistorder i1 %v8_fb88, { 1, 0 }
  uselistorder i32 %v1_fb70, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_fb0c, { 1, 0 }
  uselistorder i8 %v3_fb04, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_fafc, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_fafc, { 0, 2, 1 }
  uselistorder i32 %v0_faf4, { 1, 0 }
  uselistorder i1 %v7_faf0, { 1, 0 }
  uselistorder i1 %v7_fae8, { 1, 0 }
  uselistorder i1 %v7_fae0, { 1, 0 }
  uselistorder i1 %v7_facc, { 1, 0 }
  uselistorder i1 %v7_fac4, { 1, 0 }
  uselistorder i1 %v7_fabc, { 1, 0 }
  uselistorder i1 %v8_fab4, { 1, 0 }
  uselistorder i32 %v1_fa9c, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_fa88, { 1, 0 }
  uselistorder i32 %v1_fa80, { 1, 0 }
  uselistorder i32 %v1_fa78, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_fa74, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_fa74, { 0, 2, 1 }
  uselistorder i32 %v0_fa54.pr, { 1, 0 }
  uselistorder i32 %v0_fa34.pr, { 1, 0 }
  uselistorder i1 %v7_fa0c, { 1, 0 }
  uselistorder i1 %v2_f9fc, { 1, 0, 2 }
  uselistorder i1 %v2_f9e0, { 1, 0, 2 }
  uselistorder i32 %v1_fa00, { 1, 2, 3, 0 }
  uselistorder i32 %v1_f9d4, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v2_fa04, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1 %v8_f968, { 1, 0 }
  uselistorder i8 %v3_f960, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f958, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f958, { 0, 2, 1 }
  uselistorder i32 %v0_f950, { 1, 0 }
  uselistorder i1 %v7_f94c, { 1, 0 }
  uselistorder i1 %v7_f944, { 1, 0 }
  uselistorder i1 %v7_f93c, { 1, 0 }
  uselistorder i1 %v7_f928, { 1, 0 }
  uselistorder i1 %v7_f920, { 1, 0 }
  uselistorder i1 %v7_f918, { 1, 0 }
  uselistorder i1 %v8_f910, { 1, 0 }
  uselistorder i32 %v1_f8f8, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_f8e4, { 1, 2, 0 }
  uselistorder i32 %v2_f8d0, { 1, 0 }
  uselistorder i32 %v0_f8d0, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v3_f8cc, { 2, 1, 4, 0, 5, 3 }
  uselistorder i1 %v7_f878, { 1, 0 }
  uselistorder i32 %v3_f874, { 1, 0, 2 }
  uselistorder i1 %v2_f860, { 1, 0 }
  uselistorder i32 %.464, { 1, 0 }
  uselistorder i1 %v7_f848, { 1, 0 }
  uselistorder i32 %v0_f844, { 2, 1, 0 }
  uselistorder i1 %v7_f81c, { 1, 0 }
  uselistorder i32 %v0_f81c, { 2, 1, 0, 3 }
  uselistorder i32 %v1_f78c, { 2, 0, 3, 4, 5, 1 }
  uselistorder i1 %v1_f770, { 1, 0 }
  uselistorder i32 %v1_f760, { 2, 1, 0 }
  uselistorder i32 %v1_f75c, { 1, 0 }
  uselistorder i32 %v0_f6fc, { 2, 5, 6, 20, 7, 8, 24, 9, 10, 21, 11, 12, 25, 13, 14, 22, 15, 16, 23, 4, 3, 19, 17, 18, 26, 27, 1, 0 }
  uselistorder i32 %v1_f6d8, { 1, 2, 3, 0 }
  uselistorder i32 %v3_f6d4, { 1, 0 }
  uselistorder i32 %v4_f6b8, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32 %v2_f6a4, { 1, 0, 2 }
  uselistorder i32 %v3_f6a0, { 1, 0, 2 }
  uselistorder i32 %v0_101a0, { 1, 0, 2 }
  uselistorder i32 %v3_f668, { 1, 0 }
  uselistorder i32 %v1_f650, { 3, 2, 1, 0 }
  uselistorder i32 %v3_f64c, { 1, 0 }
  uselistorder i32 %v3_f644, { 1, 2, 0 }
  uselistorder i1 %v7_f634, { 1, 0 }
  uselistorder i32 %v3_f630, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_f5c8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_f5c8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_f5ac, { 0, 2, 1 }
  uselistorder i32 %v1_f5a4, { 1, 0 }
  uselistorder i32 %v1_f564, { 2, 1, 0 }
  uselistorder i32 %v1_f560, { 1, 0 }
  uselistorder i1 %v2_f540, { 1, 0, 2 }
  uselistorder i32 %v0_f53c, { 1, 0, 2 }
  uselistorder i1 %v7_f508, { 0, 3, 4, 1, 2 }
  uselistorder i1 %v2_f508, { 1, 0, 2 }
  uselistorder i32 %v2_f500, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_f4d8, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_f4cc, { 0, 1, 3, 2 }
  uselistorder i32 %v0_f4cc, { 0, 2, 1 }
  uselistorder i32 %v3_f58c, { 4, 7, 5, 6, 1, 0, 3, 2, 8 }
  uselistorder i32 %v1_f41c, { 1, 0 }
  uselistorder i32 %v1_f404, { 0, 2, 3, 1 }
  uselistorder i32 %v0_f410, { 0, 3, 2, 1 }
  uselistorder i32 %v0_f3b8, { 1, 2, 3, 0, 4, 6, 5 }
  uselistorder i32 %v5_f3ac, { 2, 1, 0 }
  uselistorder i32 %v1_f38c, { 2, 0, 1, 3, 4 }
  uselistorder i1 %v2_f368, { 1, 0 }
  uselistorder i1 %v9_f334, { 1, 0 }
  uselistorder i32* %v2_f2b4, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_f298, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v1_f284, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v5_f1cc, { 1, 0 }
  uselistorder i32 %v3_f1bc, { 1, 2, 0, 3 }
  uselistorder i1 %v2_f0f4, { 1, 0 }
  uselistorder i1 %v2_f0e0, { 1, 0 }
  uselistorder i1 %v2_f0cc, { 1, 0 }
  uselistorder i32 %.463, { 2, 1, 0 }
  uselistorder i1 %v7_f0a8, { 2, 1, 0, 5, 4, 3 }
  uselistorder i1 %v2_f090, { 1, 0 }
  uselistorder i1 %v3_f074, { 1, 0, 2 }
  uselistorder i1 %v2_f060, { 1, 0 }
  uselistorder i1 %v2_f03c, { 1, 0 }
  uselistorder i32 %v1_efec, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 31, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_efd8, { 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 30, 31, 32, 29, 28, 27, 26, 25, 24, 23, 22, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_efd4, { 3, 4, 5, 6, 7, 0, 1, 2 }
  uselistorder i32 %stack_var_-1880.0, { 0, 3, 2, 1 }
  uselistorder i32 %v2_10310, { 1, 2, 0 }
  uselistorder i32 %v2_f834, { 1, 2, 0 }
  uselistorder i32 %v2_ffd8, { 4, 5, 1, 0, 12, 13, 8, 11, 7, 10, 9, 6, 3, 2 }
  uselistorder i32 %v2_10080, { 1, 0 }
  uselistorder i32 %v2_f598, { 0, 5, 1, 4, 2, 7, 3, 6 }
  uselistorder i32 %v2_ef7c, { 1, 5, 4, 6, 0, 2, 3, 7 }
  uselistorder i32 %v4_ee60, { 2, 1, 0, 3 }
  uselistorder i16 %v5_ede4.le, { 1, 0 }
  uselistorder i32 %v0_edd8, { 2, 1, 0 }
  uselistorder i32 %v2_eda8, { 3, 2, 0, 1 }
  uselistorder i1 %v7_ed78, { 1, 0 }
  uselistorder i32 %v3_ed70, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_ed5c, { 1, 0 }
  uselistorder i32 %v2_ed40, { 1, 0, 2 }
  uselistorder i32 %storemerge328, { 1, 0 }
  uselistorder i32 %v0_ec98, { 3, 1, 2, 0 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 11, 12 }
  uselistorder i32* %stack_var_-60, { 10, 11, 12, 0, 1, 13, 5, 14, 2, 15, 6, 16, 3, 17, 4, 18, 7, 19, 20, 8, 21, 9, 22 }
  uselistorder i32* %r3.global-to-local, { 62, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 73, 75, 76, 30, 154, 155, 156, 31, 32, 33, 34, 35, 157, 158, 159, 160, 161, 162, 164, 163, 165, 166, 2, 3, 6, 4, 5, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 138, 59, 60, 61, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 105, 104, 101, 107, 106, 0, 108, 109, 1, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 136, 140, 139, 148, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153 }
  uselistorder i32* %r2.global-to-local, { 44, 45, 28, 29, 30, 31, 32, 33, 34, 35, 36, 46, 47, 48, 49, 20, 37, 113, 114, 21, 115, 116, 117, 118, 119, 120, 121, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 38, 39, 40, 41, 42, 43, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 111, 112, 64, 65, 67, 66, 63, 69, 70, 0, 72, 71, 1, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 68, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 122, 102, 103, 104, 105, 106, 107, 108, 109, 110 }
  uselistorder i32* %r1.global-to-local, { 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 48, 49, 50, 51, 52, 23, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 0, 25, 26, 27, 28, 29, 30, 98, 99, 41, 42, 43, 44, 45, 46, 47, 53, 54, 55, 56, 57, 58, 61, 62, 64, 59, 60, 65, 66, 67, 68, 69, 70, 63, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 112, 89, 90, 91, 92, 93, 94, 95, 96, 97 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 8, 6, 7, 10, 0, 11, 12, 13, 14, 15, 16, 9, 5, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i1* %cpsr_z.global-to-local, { 111, 217, 218, 220, 6, 85, 211, 212, 98, 99, 86, 87, 54, 55, 56, 57, 58, 219, 93, 221, 222, 223, 229, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 239, 240, 241, 236, 237, 238, 0, 1, 2, 3, 4, 5, 135, 7, 12, 8, 9, 10, 11, 13, 14, 15, 16, 17, 21, 22, 23, 18, 19, 20, 24, 25, 26, 27, 28, 29, 33, 34, 35, 30, 31, 32, 36, 37, 38, 39, 40, 41, 45, 46, 47, 42, 43, 44, 48, 49, 50, 51, 52, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 214, 76, 77, 78, 73, 74, 75, 79, 80, 81, 82, 83, 84, 88, 89, 90, 91, 92, 133, 94, 95, 96, 97, 100, 102, 101, 103, 104, 105, 106, 107, 108, 109, 110, 215, 216, 112, 113, 114, 117, 119, 123, 122, 124, 126, 127, 130, 132, 134, 131, 128, 129, 210, 209, 207, 136, 208, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 125, 175, 176, 121, 177, 178, 120, 179, 180, 181, 182, 183, 184, 118, 185, 186, 187, 188, 189, 116, 190, 191, 192, 115, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 213, 206 }
  uselistorder i1* %cpsr_c.global-to-local, { 107, 211, 212, 214, 6, 82, 83, 94, 205, 206, 95, 84, 54, 55, 56, 57, 213, 122, 215, 216, 217, 223, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 233, 234, 235, 230, 231, 232, 0, 1, 2, 3, 4, 5, 130, 7, 12, 8, 9, 10, 11, 13, 14, 15, 16, 17, 21, 22, 23, 18, 19, 20, 24, 25, 26, 27, 28, 29, 33, 34, 35, 30, 31, 32, 36, 37, 38, 39, 40, 41, 45, 46, 47, 42, 43, 44, 48, 49, 50, 51, 52, 53, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 208, 73, 74, 75, 70, 71, 72, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 126, 90, 91, 92, 93, 96, 98, 97, 99, 100, 101, 102, 103, 104, 105, 106, 209, 210, 108, 109, 110, 114, 116, 119, 120, 121, 125, 128, 129, 127, 123, 124, 204, 203, 201, 131, 202, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 118, 168, 169, 117, 170, 171, 115, 172, 173, 174, 175, 176, 177, 113, 178, 179, 180, 181, 182, 112, 183, 184, 185, 111, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 207, 200 }
  uselistorder i32 (i32)* @function_e50c, { 1, 0 }
  uselistorder i16* bitcast (i16** @global_var_1f2a0.129 to i16*), { 1, 0 }
  uselistorder i16** @global_var_1f2a0.129, { 1, 0 }
  uselistorder i32 ptrtoint (i16** @global_var_1f2a0.129 to i32), { 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_11c4c, { 1, 0 }
  uselistorder i8 31, { 6, 0, 1, 2, 3, 7, 8, 4, 5 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 -3, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_16a14.188 to i32), { 5, 7, 2, 8, 6, 9, 3, 10, 0, 11, 1, 12, 4, 13 }
  uselistorder i32 (i32, i32, i32, i32)* @function_11d38, { 19, 18, 17, 16, 15, 14, 13, 23, 7, 6, 5, 4, 31, 30, 29, 28, 27, 26, 25, 24, 22, 21, 20, 8, 12, 11, 10, 9, 3, 2, 1, 0 }
  uselistorder i8 37, { 0, 1, 6, 7, 8, 9, 2, 3, 4, 5, 10, 11 }
  uselistorder i8 34, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13 }
  uselistorder i8 36, { 0, 1, 2, 3, 14, 15, 16, 17, 4, 5, 18, 19, 20, 21, 6, 7, 8, 9, 10, 11, 12, 13, 22, 23, 24, 25 }
  uselistorder i8 35, { 0, 1, 2, 3, 16, 17, 18, 19, 4, 5, 6, 7, 20, 21, 22, 23, 8, 9, 10, 11, 12, 13, 14, 15, 24, 25, 26, 27 }
  uselistorder i8 58, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13, 14, 15 }
  uselistorder i8 57, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13 }
  uselistorder i8 62, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13 }
  uselistorder i8 61, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13 }
  uselistorder i32 (i32)* @function_e534, { 1, 0 }
  uselistorder i32 (i32)* @function_1044c, { 6, 5, 44, 43, 42, 50, 4, 3, 2, 1, 0, 49, 48, 47, 46, 45, 41, 40, 9, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 8, 7 }
  uselistorder i32 (i32, i32, i32, i32)* @function_10bd8, { 1, 0, 4, 3, 2 }
  uselistorder i32 (i32, i32*)* @function_10428, { 5, 40, 41, 42, 0, 1, 2, 3, 4, 6, 7, 8, 36, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39 }
  uselistorder i32 (i32)* @function_104ec, { 2, 1, 0, 36, 35, 34, 33, 32, 31, 30, 29, 28, 6, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 5, 4, 3 }
  uselistorder i32 (i32, i32, i32, i32)* @function_11cc4, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_11304, { 2, 0, 1 }
  uselistorder i32 ()* @function_ea64, { 2, 1, 0 }
  uselistorder i8 2, { 0, 2, 1 }
  uselistorder i8 5, { 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 39, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_11cfc, { 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_11d70, { 9, 8, 7, 1, 6, 5, 4, 3, 2, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_c898, { 9, 8, 7, 1, 6, 5, 4, 3, 2, 0 }
  uselistorder i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f288.141 to i32), i32 2) to i16*), { 1, 0 }
  uselistorder i32 4873, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_c848, { 11, 10, 9, 2, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 15, 16, 21, 22, 19, 20, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 29, { 4, 3, 0, 1, 2 }
  uselistorder i32 184, { 1, 0 }
  uselistorder i32 185, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 62, { 2, 1, 0 }
  uselistorder i32 192, { 2, 0, 1 }
  uselistorder i32 126, { 1, 0 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_169a8.158 to i32), { 0, 1, 2, 4, 3 }
  uselistorder i32 (i32, i32, i32)* @function_eb2c, { 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_16990.152 to i32), { 0, 2, 1, 3 }
  uselistorder i8* @global_var_1f295.147, { 1, 0 }
  uselistorder i16 5888, { 1, 0, 2 }
  uselistorder i32 5888, { 0, 2, 1 }
  uselistorder i8 6, { 2, 3, 4, 0, 1 }
  uselistorder i8 16, { 13, 0, 1, 2, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 ptrtoint (i32* @global_var_1f288.141 to i32), { 2, 3, 1, 0, 4, 5 }
  uselistorder i8* @global_var_1f294.142, { 1, 0 }
  uselistorder i8** @global_var_1f274.138, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1f274.138 to i32), { 0, 7, 1, 6, 2, 5, 4, 3 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 ()* @function_e29c, { 74, 73, 72, 71, 70, 69, 68, 64, 67, 66, 65, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 14, 13, 12, 11, 10, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_11db0, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 2048, { 6, 5, 4, 8, 9, 1, 2, 3, 7, 10, 0, 11, 12 }
  uselistorder i32* @global_var_212f8.136, { 1, 5, 2, 3, 4, 0 }
  uselistorder i32* @global_var_212f4.134, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_212f4.134 to i32), { 1, 0, 2, 3, 4 }
  uselistorder i32 356, { 0, 5, 6, 7, 1, 8, 10, 2, 11, 12, 3, 4, 9 }
  uselistorder i32 388, { 2, 3, 6, 0, 1, 4, 5, 7 }
  uselistorder i32* @global_var_1f2a4.123, { 2, 0, 3, 4, 1, 6, 5 }
  uselistorder i32 (i32)* @function_e2f8, { 1, 0 }
  uselistorder i32* @global_var_212d8.46, { 3, 4, 0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 14, 12, 13 }
  uselistorder i32 ptrtoint (i32* @global_var_212d8.46 to i32), { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ()* @function_10ddc, { 2, 1, 0 }
  uselistorder i32* @global_var_212fc.121, { 0, 2, 1 }
  uselistorder i32 ()* @function_112d0, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10420, { 1, 0 }
  uselistorder label %dec_label_pc_f67c.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f67c.backedge.thread564, { 2, 3, 0, 1, 4 }
  uselistorder label %dec_label_pc_f67c.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_103d4, { 1, 0 }
  uselistorder label %dec_label_pc_10334, { 1, 0 }
  uselistorder label %dec_label_pc_10128, { 1, 2, 3, 0, 4, 6, 7, 5 }
  uselistorder label %dec_label_pc_100f0, { 1, 0 }
  uselistorder label %dec_label_pc_100dc, { 1, 2, 3, 4, 0, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_100cc, { 1, 0 }
  uselistorder label %dec_label_pc_ffbc, { 1, 0 }
  uselistorder label %dec_label_pc_fef0, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_fed8, { 1, 0 }
  uselistorder label %dec_label_pc_fdec, { 1, 0 }
  uselistorder label %dec_label_pc_fd30, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_fd18, { 1, 0 }
  uselistorder label %dec_label_pc_fbe8, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_fbd0, { 1, 0 }
  uselistorder label %dec_label_pc_fb14, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_fafc, { 1, 0 }
  uselistorder label %dec_label_pc_fa88, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %.thread104, { 2, 0, 1 }
  uselistorder label %dec_label_pc_fa54, { 1, 0 }
  uselistorder label %.thread100, { 2, 0, 1 }
  uselistorder label %dec_label_pc_fa34, { 1, 0 }
  uselistorder label %dec_label_pc_fa20, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f9dc, { 1, 0 }
  uselistorder label %dec_label_pc_f9dc.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f970, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f958, { 1, 0 }
  uselistorder label %dec_label_pc_f8cc, { 5, 6, 7, 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_f8c4, { 5, 3, 4, 1, 0, 6, 2 }
  uselistorder label %dec_label_pc_f8ac, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f788, { 1, 6, 7, 3, 0, 2, 4, 5 }
  uselistorder label %bb424, { 1, 0 }
  uselistorder label %bb422, { 1, 0 }
  uselistorder label %dec_label_pc_f750, { 1, 0 }
  uselistorder label %dec_label_pc_f6e4, { 1, 0 }
  uselistorder label %.thread83, { 1, 0 }
  uselistorder label %dec_label_pc_f694, { 1, 0 }
  uselistorder label %dec_label_pc_f684, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_f684.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_f678.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_f660, { 1, 0 }
  uselistorder label %bb418, { 1, 0 }
  uselistorder label %dec_label_pc_f580, { 1, 0 }
  uselistorder label %bb416, { 1, 0 }
  uselistorder label %bb414, { 1, 0 }
  uselistorder label %bb412, { 1, 0 }
  uselistorder label %bb410, { 3, 4, 0, 1, 2, 6, 5 }
  uselistorder label %dec_label_pc_f470.dec_label_pc_f470_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f44c.dec_label_pc_f44c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f440, { 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f428, { 1, 0 }
  uselistorder label %dec_label_pc_f404, { 1, 0 }
  uselistorder label %dec_label_pc_f2ac, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_f298, { 1, 0 }
  uselistorder label %bb407, { 1, 0 }
  uselistorder label %dec_label_pc_f12c, { 1, 0 }
  uselistorder label %dec_label_pc_f120, { 1, 0 }
  uselistorder label %dec_label_pc_f114, { 1, 0 }
  uselistorder label %dec_label_pc_f108, { 1, 0 }
  uselistorder label %dec_label_pc_f0fc, { 1, 0 }
  uselistorder label %dec_label_pc_f0e8, { 1, 0 }
  uselistorder label %dec_label_pc_f0d4, { 1, 0 }
  uselistorder label %dec_label_pc_f0c0, { 1, 0 }
  uselistorder label %dec_label_pc_f0a0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f07c, { 1, 0 }
  uselistorder label %dec_label_pc_f070, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f04c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f028, { 1, 0 }
  uselistorder label %bb374, { 1, 0 }
  uselistorder label %dec_label_pc_efd4, { 30, 6, 10, 2, 11, 3, 12, 4, 13, 5, 14, 0, 15, 16, 17, 18, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 28, 29, 31 }
  uselistorder label %dec_label_pc_edd8, { 1, 0 }
}

define i32 @function_10428(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10428:
  store i32 ptrtoint (i32* @global_var_21304.197 to i32), i32* @r2, align 4
  %v3_1042c = mul i32 %arg1, 8
  %v2_10430 = add i32 %v3_1042c, ptrtoint (i32* @global_var_21304.197 to i32)
  store i32 %v2_10430, i32* @r3, align 4
  %v2_10434 = icmp eq i32* %arg2, null
  br i1 %v2_10434, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10428
  %v3_1043c4 = inttoptr i32 %v2_10430 to i32*
  %v4_1043c5 = load i32, i32* %v3_1043c4, align 4
  br label %bb7

bb:                                               ; preds = %dec_label_pc_10428
  %v2_10438 = add i32 %v3_1042c, add (i32 ptrtoint (i32* @global_var_21304.197 to i32), i32 4)
  %v3_10438 = inttoptr i32 %v2_10438 to i16*
  %v4_10438 = load i16, i16* %v3_10438, align 4
  %v5_10438 = zext i16 %v4_10438 to i32
  store i32 %v5_10438, i32* @r3, align 4
  %v3_1043c = inttoptr i32 %v2_10430 to i32*
  %v4_1043c = load i32, i32* %v3_1043c, align 4
  store i32 %v5_10438, i32* %arg2, align 4
  br label %bb7

bb7:                                              ; preds = %.thread, %bb
  %v4_1043c6 = phi i32 [ %v4_1043c5, %.thread ], [ %v4_1043c, %bb ]
  ret i32 %v4_1043c6

; uselistorder directives
  uselistorder i32 %v2_10430, { 1, 0, 2 }
  uselistorder i32 %v3_1042c, { 1, 0 }
  uselistorder label %bb7, { 1, 0 }
}

define i32 @function_1044c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1044c:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_10454 = mul i32 %arg1, 8
  %v2_10458 = add i32 %v3_10454, ptrtoint (i32* @global_var_21304.197 to i32)
  %v2_1045c = load i32, i32* inttoptr (i32 127124 to i32*), align 4
  %v1_10460 = add i32 %v3_10454, add (i32 ptrtoint (i32* @global_var_21304.197 to i32), i32 4)
  %v2_10460 = inttoptr i32 %v1_10460 to i16*
  %v3_10460 = load i16, i16* %v2_10460, align 4
  %v3_10464 = udiv i32 %v2_1045c, 256
  %v2_10468 = icmp eq i16 %v3_10460, 0
  %v3_1046c = udiv i32 %v2_1045c, 65536
  store i32 %v3_1046c, i32* @r3, align 4
  %v3_10470 = load i32, i32* @r4, align 4
  store i32 %v3_10470, i32* %stack_var_-16, align 4
  %v1_10474 = urem i32 %v3_10464, 256
  store i32 %v1_10474, i32* %r6.global-to-local, align 4
  %v1_10478 = urem i32 %v3_1046c, 256
  store i32 %v1_10478, i32* %r5.global-to-local, align 4
  %v3_1047c = udiv i32 %v2_1045c, 16777216
  store i32 %v3_1047c, i32* %r4.global-to-local, align 4
  %v1_10480 = urem i32 %v2_1045c, 256
  store i32 %v1_10480, i32* %lr.global-to-local, align 4
  br i1 %v2_10468, label %dec_label_pc_104dc, label %dec_label_pc_10488

dec_label_pc_10488:                               ; preds = %dec_label_pc_1044c
  store i32 0, i32* @ip, align 4
  %v1_1048c = inttoptr i32 %v2_10458 to i32*
  br label %dec_label_pc_1048c

dec_label_pc_1048c:                               ; preds = %dec_label_pc_1048c.dec_label_pc_1048c_crit_edge, %dec_label_pc_10488
  %v0_10494 = phi i32 [ %v0_10494.pre, %dec_label_pc_1048c.dec_label_pc_1048c_crit_edge ], [ %v1_10480, %dec_label_pc_10488 ]
  %v2_10498 = phi i32 [ %v1_104d0, %dec_label_pc_1048c.dec_label_pc_1048c_crit_edge ], [ 0, %dec_label_pc_10488 ]
  %v2_1048c = load i32, i32* %v1_1048c, align 4
  %v2_10490 = add i32 %v2_1048c, %v2_10498
  %v3_10490 = inttoptr i32 %v2_10490 to i8*
  %v4_10490 = load i8, i8* %v3_10490, align 1
  %v6_10490 = zext i8 %v4_10490 to i32
  %v2_10494 = xor i32 %v6_10490, %v0_10494
  %v1_10498 = trunc i32 %v2_10494 to i8
  store i8 %v1_10498, i8* %v3_10490, align 1
  %v2_1049c = load i32, i32* %v1_1048c, align 4
  %v0_104a0 = load i32, i32* @ip, align 4
  %v2_104a0 = add i32 %v0_104a0, %v2_1049c
  %v3_104a0 = inttoptr i32 %v2_104a0 to i8*
  %v4_104a0 = load i8, i8* %v3_104a0, align 1
  %v6_104a0 = zext i8 %v4_104a0 to i32
  %v0_104a4 = load i32, i32* %r6.global-to-local, align 4
  %v2_104a4 = xor i32 %v0_104a4, %v6_104a0
  %v1_104a8 = trunc i32 %v2_104a4 to i8
  store i8 %v1_104a8, i8* %v3_104a0, align 1
  %v2_104ac = load i32, i32* %v1_1048c, align 4
  %v0_104b0 = load i32, i32* @ip, align 4
  %v2_104b0 = add i32 %v0_104b0, %v2_104ac
  %v3_104b0 = inttoptr i32 %v2_104b0 to i8*
  %v4_104b0 = load i8, i8* %v3_104b0, align 1
  %v6_104b0 = zext i8 %v4_104b0 to i32
  %v0_104b4 = load i32, i32* %r5.global-to-local, align 4
  %v2_104b4 = xor i32 %v0_104b4, %v6_104b0
  %v1_104b8 = trunc i32 %v2_104b4 to i8
  store i8 %v1_104b8, i8* %v3_104b0, align 1
  %v2_104bc = load i32, i32* %v1_1048c, align 4
  %v0_104c0 = load i32, i32* @ip, align 4
  %v2_104c0 = add i32 %v0_104c0, %v2_104bc
  %v3_104c0 = inttoptr i32 %v2_104c0 to i8*
  %v4_104c0 = load i8, i8* %v3_104c0, align 1
  %v6_104c0 = zext i8 %v4_104c0 to i32
  %v0_104c4 = load i32, i32* %r4.global-to-local, align 4
  %v2_104c4 = xor i32 %v0_104c4, %v6_104c0
  store i32 %v2_104c4, i32* @r3, align 4
  %v1_104c8 = trunc i32 %v2_104c4 to i8
  store i8 %v1_104c8, i8* %v3_104c0, align 1
  %v3_104cc = load i16, i16* %v2_10460, align 4
  %v4_104cc = zext i16 %v3_104cc to i32
  %v0_104d0 = load i32, i32* @ip, align 4
  %v1_104d0 = add i32 %v0_104d0, 1
  store i32 %v1_104d0, i32* @ip, align 4
  %v8_104d8 = icmp sgt i32 %v4_104cc, %v1_104d0
  br i1 %v8_104d8, label %dec_label_pc_1048c.dec_label_pc_1048c_crit_edge, label %dec_label_pc_104dc.loopexit

dec_label_pc_1048c.dec_label_pc_1048c_crit_edge:  ; preds = %dec_label_pc_1048c
  %v0_10494.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_1048c

dec_label_pc_104dc.loopexit:                      ; preds = %dec_label_pc_1048c
  %v2_104dc.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_104dc

dec_label_pc_104dc:                               ; preds = %dec_label_pc_104dc.loopexit, %dec_label_pc_1044c
  %v2_104dc = phi i32 [ %v2_104dc.pre, %dec_label_pc_104dc.loopexit ], [ %v3_10470, %dec_label_pc_1044c ]
  store i32 %v2_104dc, i32* @r4, align 4
  ret i32 %v2_10458

; uselistorder directives
  uselistorder i32 %v1_104d0, { 1, 2, 0 }
  uselistorder i32 %v1_10480, { 1, 0 }
  uselistorder i32 %v3_1046c, { 1, 0 }
  uselistorder i32 %v2_1045c, { 3, 0, 1, 2 }
  uselistorder i32 %v2_10458, { 1, 0 }
  uselistorder i32 %v3_10454, { 1, 0 }
}

define i32 @function_104ec(i32 %arg1) local_unnamed_addr {
dec_label_pc_104ec:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_104f4 = mul i32 %arg1, 8
  %v2_104f8 = add i32 %v3_104f4, ptrtoint (i32* @global_var_21304.197 to i32)
  %v2_104fc = load i32, i32* inttoptr (i32 127124 to i32*), align 4
  %v1_10500 = add i32 %v3_104f4, add (i32 ptrtoint (i32* @global_var_21304.197 to i32), i32 4)
  %v2_10500 = inttoptr i32 %v1_10500 to i16*
  %v3_10500 = load i16, i16* %v2_10500, align 4
  %v3_10504 = udiv i32 %v2_104fc, 256
  %v2_10508 = icmp eq i16 %v3_10500, 0
  %v3_1050c = udiv i32 %v2_104fc, 65536
  %v3_10510 = load i32, i32* @r4, align 4
  store i32 %v3_10510, i32* %stack_var_-16, align 4
  %v1_10514 = urem i32 %v3_10504, 256
  store i32 %v1_10514, i32* %r6.global-to-local, align 4
  %v1_10518 = urem i32 %v3_1050c, 256
  store i32 %v1_10518, i32* %r5.global-to-local, align 4
  %v3_1051c = udiv i32 %v2_104fc, 16777216
  store i32 %v3_1051c, i32* %r4.global-to-local, align 4
  %v1_10520 = urem i32 %v2_104fc, 256
  store i32 %v1_10520, i32* %lr.global-to-local, align 4
  br i1 %v2_10508, label %dec_label_pc_1057c, label %dec_label_pc_10528

dec_label_pc_10528:                               ; preds = %dec_label_pc_104ec
  store i32 0, i32* @ip, align 4
  %v1_1052c = inttoptr i32 %v2_104f8 to i32*
  br label %dec_label_pc_1052c

dec_label_pc_1052c:                               ; preds = %dec_label_pc_1052c.dec_label_pc_1052c_crit_edge, %dec_label_pc_10528
  %v0_10534 = phi i32 [ %v0_10534.pre, %dec_label_pc_1052c.dec_label_pc_1052c_crit_edge ], [ %v1_10520, %dec_label_pc_10528 ]
  %v2_10538 = phi i32 [ %v1_10570, %dec_label_pc_1052c.dec_label_pc_1052c_crit_edge ], [ 0, %dec_label_pc_10528 ]
  %v2_1052c = load i32, i32* %v1_1052c, align 4
  %v2_10530 = add i32 %v2_1052c, %v2_10538
  %v3_10530 = inttoptr i32 %v2_10530 to i8*
  %v4_10530 = load i8, i8* %v3_10530, align 1
  %v6_10530 = zext i8 %v4_10530 to i32
  %v2_10534 = xor i32 %v6_10530, %v0_10534
  %v1_10538 = trunc i32 %v2_10534 to i8
  store i8 %v1_10538, i8* %v3_10530, align 1
  %v2_1053c = load i32, i32* %v1_1052c, align 4
  %v0_10540 = load i32, i32* @ip, align 4
  %v2_10540 = add i32 %v0_10540, %v2_1053c
  %v3_10540 = inttoptr i32 %v2_10540 to i8*
  %v4_10540 = load i8, i8* %v3_10540, align 1
  %v6_10540 = zext i8 %v4_10540 to i32
  %v0_10544 = load i32, i32* %r6.global-to-local, align 4
  %v2_10544 = xor i32 %v0_10544, %v6_10540
  %v1_10548 = trunc i32 %v2_10544 to i8
  store i8 %v1_10548, i8* %v3_10540, align 1
  %v2_1054c = load i32, i32* %v1_1052c, align 4
  %v0_10550 = load i32, i32* @ip, align 4
  %v2_10550 = add i32 %v0_10550, %v2_1054c
  %v3_10550 = inttoptr i32 %v2_10550 to i8*
  %v4_10550 = load i8, i8* %v3_10550, align 1
  %v6_10550 = zext i8 %v4_10550 to i32
  %v0_10554 = load i32, i32* %r5.global-to-local, align 4
  %v2_10554 = xor i32 %v0_10554, %v6_10550
  %v1_10558 = trunc i32 %v2_10554 to i8
  store i8 %v1_10558, i8* %v3_10550, align 1
  %v2_1055c = load i32, i32* %v1_1052c, align 4
  %v0_10560 = load i32, i32* @ip, align 4
  %v2_10560 = add i32 %v0_10560, %v2_1055c
  %v3_10560 = inttoptr i32 %v2_10560 to i8*
  %v4_10560 = load i8, i8* %v3_10560, align 1
  %v6_10560 = zext i8 %v4_10560 to i32
  %v0_10564 = load i32, i32* %r4.global-to-local, align 4
  %v2_10564 = xor i32 %v0_10564, %v6_10560
  %v1_10568 = trunc i32 %v2_10564 to i8
  store i8 %v1_10568, i8* %v3_10560, align 1
  %v3_1056c = load i16, i16* %v2_10500, align 4
  %v4_1056c = zext i16 %v3_1056c to i32
  %v0_10570 = load i32, i32* @ip, align 4
  %v1_10570 = add i32 %v0_10570, 1
  store i32 %v1_10570, i32* @ip, align 4
  %v8_10578 = icmp sgt i32 %v4_1056c, %v1_10570
  br i1 %v8_10578, label %dec_label_pc_1052c.dec_label_pc_1052c_crit_edge, label %dec_label_pc_1057c.loopexit

dec_label_pc_1052c.dec_label_pc_1052c_crit_edge:  ; preds = %dec_label_pc_1052c
  %v0_10534.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_1052c

dec_label_pc_1057c.loopexit:                      ; preds = %dec_label_pc_1052c
  %v2_1057c.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_1057c

dec_label_pc_1057c:                               ; preds = %dec_label_pc_1057c.loopexit, %dec_label_pc_104ec
  %v2_1057c = phi i32 [ %v2_1057c.pre, %dec_label_pc_1057c.loopexit ], [ %v3_10510, %dec_label_pc_104ec ]
  store i32 %v2_1057c, i32* @r4, align 4
  ret i32 %v2_104f8

; uselistorder directives
  uselistorder i32 %v1_10570, { 1, 2, 0 }
  uselistorder i32 %v1_10520, { 1, 0 }
  uselistorder i32 %v2_104fc, { 3, 0, 1, 2 }
  uselistorder i32 %v3_104f4, { 1, 0 }
}

define i32 @function_1058c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1058c:
  %r5.global-to-local = alloca i32, align 4
  %v3_1058c = load i32, i32* @r4, align 4
  %v6_1058c = load i32, i32* @r5, align 4
  %v9_1058c = load i32, i32* @r6, align 4
  %v12_1058c = load i32, i32* @r7, align 4
  %v15_1058c = load i32, i32* @r8, align 4
  %v21_1058c = load i32, i32* @sl, align 4
  %v24_1058c = load i32, i32* @fp, align 4
  store i32 2, i32* @r0, align 4
  %v0_10598 = call i32 @function_1203c()
  store i32 ptrtoint (i32* @global_var_21304.197 to i32), i32* @r4, align 4
  store i32 2, i32* @r6, align 4
  store i32 %v0_10598, i32* @r5, align 4
  %v3_105b0 = call i32 @function_10b90(i32 %v0_10598, i32 ptrtoint (i32* @global_var_16a24.204 to i32), i32 2)
  store i32 12, i32* @r0, align 4
  store i32 12, i32* @fp, align 4
  %v0_105bc = load i32, i32* @r5, align 4
  store i32 %v0_105bc, i32* @global_var_2130c.205, align 4
  %v0_105c0 = load i32, i32* @r6, align 4
  %v1_105c0 = trunc i32 %v0_105c0 to i16
  store i16 %v1_105c0, i16* bitcast (i32* @global_var_21310.206 to i16*), align 4
  %v0_105c4 = call i32 @function_1203c()
  %v0_105cc = load i32, i32* @fp, align 4
  store i32 %v0_105c4, i32* @r5, align 4
  %v4_105d4 = call i32 @function_10b90(i32 %v0_105c4, i32 ptrtoint ([13 x i8]* @global_var_16a28.208 to i32), i32 %v0_105cc)
  %v0_105d8 = load i32, i32* @fp, align 4
  store i32 %v0_105d8, i32* @r0, align 4
  %v0_105dc = load i32, i32* @r5, align 4
  store i32 %v0_105dc, i32* @global_var_21314.209, align 4
  %v1_105e0 = trunc i32 %v0_105d8 to i16
  store i16 %v1_105e0, i16* bitcast (i32* @global_var_21318.210 to i16*), align 4
  %v0_105e4 = call i32 @function_1203c()
  %v0_105ec = load i32, i32* @fp, align 4
  store i32 %v0_105e4, i32* @r5, align 4
  %v4_105f4 = call i32 @function_10b90(i32 %v0_105e4, i32 ptrtoint ([13 x i8]* @global_var_16a38.212 to i32), i32 %v0_105ec)
  %v0_105f8 = load i32, i32* @r6, align 4
  store i32 %v0_105f8, i32* @r0, align 4
  %v0_105fc = load i32, i32* @r5, align 4
  store i32 %v0_105fc, i32* @global_var_2131c.213, align 4
  %v0_10600 = load i32, i32* @fp, align 4
  %v1_10600 = trunc i32 %v0_10600 to i16
  store i16 %v1_10600, i16* bitcast (i32* @global_var_21320.214 to i16*), align 4
  %v0_10604 = call i32 @function_1203c()
  %v0_10608 = load i32, i32* @r6, align 4
  store i32 %v0_10604, i32* @r5, align 4
  %v3_10614 = call i32 @function_10b90(i32 %v0_10604, i32 ptrtoint (i32* @global_var_16a48.216 to i32), i32 %v0_10608)
  store i32 36, i32* @r0, align 4
  %v0_1061c = load i32, i32* @r5, align 4
  store i32 %v0_1061c, i32* @global_var_21324.217, align 4
  %v0_10620 = load i32, i32* @r6, align 4
  %v1_10620 = trunc i32 %v0_10620 to i16
  store i16 %v1_10620, i16* bitcast (i32* @global_var_21328.218 to i16*), align 4
  %v0_10624 = call i32 @function_1203c()
  store i32 %v0_10624, i32* @r5, align 4
  %v4_10634 = call i32 @function_10b90(i32 %v0_10624, i32 ptrtoint ([37 x i8]* @global_var_16a4c.220 to i32), i32 36)
  store i32 6, i32* @r0, align 4
  %v0_10640 = load i32, i32* @r5, align 4
  store i32 %v0_10640, i32* @global_var_2132c.221, align 4
  store i16 36, i16* bitcast (i32* @global_var_21330.222 to i16*), align 4
  %v0_10648 = call i32 @function_1203c()
  store i32 %v0_10648, i32* @r5, align 4
  %v4_10658 = call i32 @function_10b90(i32 %v0_10648, i32 ptrtoint ([7 x i8]* @global_var_16a74.224 to i32), i32 6)
  store i32 7, i32* @r0, align 4
  store i32 7, i32* @r6, align 4
  store i16 6, i16* bitcast (i32* @global_var_21338.225 to i16*), align 4
  %v0_1066c = load i32, i32* @r5, align 4
  store i32 %v0_1066c, i32* @global_var_21334.226, align 4
  %v0_10670 = call i32 @function_1203c()
  %v0_10674 = load i32, i32* @r6, align 4
  store i32 %v0_10670, i32* @r5, align 4
  %v4_10680 = call i32 @function_10b90(i32 %v0_10670, i32 ptrtoint ([8 x i8]* @global_var_16a7c.228 to i32), i32 %v0_10674)
  %v0_10684 = load i32, i32* @r6, align 4
  store i32 %v0_10684, i32* @r0, align 4
  %v0_10688 = load i32, i32* @r5, align 4
  store i32 %v0_10688, i32* @global_var_2133c.229, align 4
  %v1_1068c = trunc i32 %v0_10684 to i16
  store i16 %v1_1068c, i16* bitcast (i32* @global_var_21340.230 to i16*), align 4
  %v0_10690 = call i32 @function_1203c()
  %v0_10694 = load i32, i32* @r6, align 4
  store i32 %v0_10690, i32* @r5, align 4
  %v4_106a0 = call i32 @function_10b90(i32 %v0_10690, i32 ptrtoint ([8 x i8]* @global_var_16a84.232 to i32), i32 %v0_10694)
  store i32 3, i32* @r0, align 4
  %v0_106a8 = load i32, i32* @r5, align 4
  store i32 %v0_106a8, i32* @global_var_21344.233, align 4
  %v0_106ac = load i32, i32* @r6, align 4
  %v1_106ac = trunc i32 %v0_106ac to i16
  store i16 %v1_106ac, i16* bitcast (i32* @global_var_21348.234 to i16*), align 4
  %v0_106b0 = call i32 @function_1203c()
  store i32 %v0_106b0, i32* @r5, align 4
  %v4_106c0 = call i32 @function_10b90(i32 %v0_106b0, i32 ptrtoint ([4 x i8]* @global_var_16a8c.236 to i32), i32 3)
  store i32 19, i32* @r0, align 4
  %v0_106cc = load i32, i32* @r5, align 4
  store i32 %v0_106cc, i32* @global_var_2134c.237, align 4
  store i16 3, i16* bitcast (i32* @global_var_21350.238 to i16*), align 4
  %v0_106d4 = call i32 @function_1203c()
  store i32 19, i32* @sl, align 4
  store i32 %v0_106d4, i32* @r5, align 4
  %v3_106e8 = call i32 @function_10b90(i32 %v0_106d4, i32 ptrtoint (i32* @global_var_16a90.240 to i32), i32 19)
  store i32 24, i32* @r0, align 4
  %v0_106f0 = load i32, i32* @r5, align 4
  store i32 %v0_106f0, i32* @global_var_21354.241, align 4
  %v0_106f4 = load i32, i32* @sl, align 4
  %v1_106f4 = trunc i32 %v0_106f4 to i16
  store i16 %v1_106f4, i16* bitcast (i32* @global_var_21358.242 to i16*), align 4
  %v0_106f8 = call i32 @function_1203c()
  store i32 %v0_106f8, i32* @r5, align 4
  %v3_10708 = call i32 @function_10b90(i32 %v0_106f8, i32 ptrtoint (i32* @global_var_16aa4.244 to i32), i32 24)
  store i32 9, i32* @r0, align 4
  store i16 24, i16* bitcast (i32* @global_var_21360.245 to i16*), align 4
  %v0_10718 = load i32, i32* @r5, align 4
  store i32 %v0_10718, i32* @global_var_2135c.246, align 4
  %v0_1071c = call i32 @function_1203c()
  store i32 %v0_1071c, i32* @r5, align 4
  %v4_1072c = call i32 @function_10b90(i32 %v0_1071c, i32 ptrtoint ([10 x i8]* @global_var_16ac0.248 to i32), i32 9)
  store i32 16, i32* @r0, align 4
  %v0_10738 = load i32, i32* @r5, align 4
  store i32 %v0_10738, i32* @global_var_21364.249, align 4
  store i16 9, i16* bitcast (i32* @global_var_21368.250 to i16*), align 4
  %v0_10740 = call i32 @function_1203c()
  store i32 16, i32* @sb, align 4
  store i32 %v0_10740, i32* @r5, align 4
  %v4_10754 = call i32 @function_10b90(i32 %v0_10740, i32 ptrtoint ([17 x i8]* @global_var_16acc.252 to i32), i32 16)
  store i32 22, i32* @r0, align 4
  %v0_1075c = load i32, i32* @r5, align 4
  store i32 %v0_1075c, i32* @global_var_2136c.253, align 4
  %v0_10760 = load i32, i32* @sb, align 4
  %v1_10760 = trunc i32 %v0_10760 to i16
  store i16 %v1_10760, i16* bitcast (i32* @global_var_21370.254 to i16*), align 4
  %v0_10764 = call i32 @function_1203c()
  store i32 %v0_10764, i32* @r5, align 4
  %v4_10774 = call i32 @function_10b90(i32 %v0_10764, i32 ptrtoint ([23 x i8]* @global_var_16ae0.256 to i32), i32 22)
  %v0_1077c = load i32, i32* @r6, align 4
  store i32 %v0_1077c, i32* @r0, align 4
  store i16 22, i16* bitcast (i32* @global_var_21378.257 to i16*), align 4
  %v0_10784 = load i32, i32* @r5, align 4
  store i32 %v0_10784, i32* @global_var_21374.258, align 4
  %v0_10788 = call i32 @function_1203c()
  %v0_1078c = load i32, i32* @r6, align 4
  store i32 %v0_10788, i32* @r5, align 4
  %v4_10798 = call i32 @function_10b90(i32 %v0_10788, i32 ptrtoint ([8 x i8]* @global_var_16af8.260 to i32), i32 %v0_1078c)
  store i32 5, i32* @r0, align 4
  %v0_107a0 = load i32, i32* @r5, align 4
  store i32 %v0_107a0, i32* @global_var_2137c.261, align 4
  %v0_107a4 = load i32, i32* @r6, align 4
  %v1_107a4 = trunc i32 %v0_107a4 to i16
  store i16 %v1_107a4, i16* bitcast (i32* @global_var_21380.262 to i16*), align 4
  %v0_107a8 = call i32 @function_1203c()
  store i32 %v0_107a8, i32* @r5, align 4
  %v4_107b8 = call i32 @function_10b90(i32 %v0_107a8, i32 ptrtoint ([6 x i8]* @global_var_16b00.264 to i32), i32 5)
  store i32 4, i32* @r0, align 4
  %v0_107c4 = load i32, i32* @r5, align 4
  store i32 %v0_107c4, i32* @global_var_21384.265, align 4
  store i16 5, i16* bitcast (i32* @global_var_21388.266 to i16*), align 4
  %v0_107cc = call i32 @function_1203c()
  store i32 %v0_107cc, i32* @r5, align 4
  %v4_107dc = call i32 @function_10b90(i32 %v0_107cc, i32 ptrtoint ([5 x i8]* @global_var_16b08.268 to i32), i32 4)
  store i32 6, i32* @r0, align 4
  store i16 4, i16* bitcast (i32* @global_var_21390.269 to i16*), align 4
  %v0_107ec = load i32, i32* @r5, align 4
  store i32 %v0_107ec, i32* @global_var_2138c.270, align 4
  %v0_107f0 = call i32 @function_1203c()
  store i32 %v0_107f0, i32* @r5, align 4
  %v4_10800 = call i32 @function_10b90(i32 %v0_107f0, i32 ptrtoint ([7 x i8]* @global_var_16b10.272 to i32), i32 6)
  store i32 14, i32* @r0, align 4
  %v0_1080c = load i32, i32* @r5, align 4
  store i32 %v0_1080c, i32* @global_var_21394.273, align 4
  store i16 6, i16* bitcast (i32* @global_var_21398.274 to i16*), align 4
  %v0_10814 = call i32 @function_1203c()
  store i32 14, i32* @r7, align 4
  store i32 %v0_10814, i32* @r5, align 4
  %v4_10828 = call i32 @function_10b90(i32 %v0_10814, i32 ptrtoint ([15 x i8]* @global_var_16b18.276 to i32), i32 14)
  store i32 8, i32* @r0, align 4
  %v0_10830 = load i32, i32* @r5, align 4
  store i32 %v0_10830, i32* @global_var_2139c.277, align 4
  %v0_10834 = load i32, i32* @r7, align 4
  %v1_10834 = trunc i32 %v0_10834 to i16
  store i16 %v1_10834, i16* bitcast (i32* @global_var_213a0.278 to i16*), align 4
  %v0_10838 = call i32 @function_1203c()
  store i32 8, i32* @r8, align 4
  store i32 %v0_10838, i32* @r5, align 4
  %v4_1084c = call i32 @function_10b90(i32 %v0_10838, i32 ptrtoint ([9 x i8]* @global_var_16b28.280 to i32), i32 8)
  %v0_10854 = load i32, i32* @r6, align 4
  store i32 %v0_10854, i32* @r0, align 4
  %v0_10858 = load i32, i32* @r8, align 4
  %v1_10858 = trunc i32 %v0_10858 to i16
  %v2_10858 = load i32, i32* @r4, align 4
  %v4_10858 = add i32 %v2_10858, 276
  %v5_10858 = inttoptr i32 %v4_10858 to i16*
  store i16 %v1_10858, i16* %v5_10858, align 2
  %v0_1085c = load i32, i32* @r5, align 4
  store i32 %v0_1085c, i32* @global_var_21414.281, align 4
  %v0_10860 = call i32 @function_1203c()
  %v0_10864 = load i32, i32* @r6, align 4
  store i32 %v0_10860, i32* @r5, align 4
  %v4_10870 = call i32 @function_10b90(i32 %v0_10860, i32 ptrtoint ([8 x i8]* @global_var_16b34.283 to i32), i32 %v0_10864)
  %v0_10878 = load i32, i32* @sb, align 4
  store i32 %v0_10878, i32* @r0, align 4
  %v0_1087c = load i32, i32* @r6, align 4
  %v1_1087c = trunc i32 %v0_1087c to i16
  %v2_1087c = load i32, i32* @r4, align 4
  %v4_1087c = add i32 %v2_1087c, 284
  %v5_1087c = inttoptr i32 %v4_1087c to i16*
  store i16 %v1_1087c, i16* %v5_1087c, align 2
  %v0_10880 = load i32, i32* @r5, align 4
  store i32 %v0_10880, i32* @global_var_2141c.284, align 4
  %v0_10884 = call i32 @function_1203c()
  %v0_10888 = load i32, i32* @sb, align 4
  store i32 %v0_10884, i32* @r5, align 4
  %v4_10894 = call i32 @function_10b90(i32 %v0_10884, i32 ptrtoint ([17 x i8]* @global_var_16b3c.286 to i32), i32 %v0_10888)
  store i32 23, i32* @r0, align 4
  %v0_1089c = load i32, i32* @r5, align 4
  store i32 %v0_1089c, i32* @global_var_213a4.287, align 4
  %v0_108a0 = load i32, i32* @sb, align 4
  %v1_108a0 = trunc i32 %v0_108a0 to i16
  store i16 %v1_108a0, i16* bitcast (i32* @global_var_213a8.288 to i16*), align 4
  %v0_108a4 = call i32 @function_1203c()
  %v0_108b0 = load i32, i32* @r6, align 4
  %v1_108b0 = load i32, i32* @sb, align 4
  %v2_108b0 = add i32 %v1_108b0, %v0_108b0
  store i32 %v2_108b0, i32* @r6, align 4
  store i32 %v0_108a4, i32* @r5, align 4
  %v4_108b8 = call i32 @function_10b90(i32 %v0_108a4, i32 ptrtoint ([24 x i8]* @global_var_16b50.290 to i32), i32 23)
  %v0_108bc = load i32, i32* @r8, align 4
  store i32 %v0_108bc, i32* @r0, align 4
  %v0_108c0 = load i32, i32* @r5, align 4
  store i32 %v0_108c0, i32* @global_var_213ac.291, align 4
  %v0_108c4 = load i32, i32* @r6, align 4
  %v1_108c4 = trunc i32 %v0_108c4 to i16
  store i16 %v1_108c4, i16* bitcast (i32* @global_var_213b0.292 to i16*), align 4
  %v0_108c8 = call i32 @function_1203c()
  %v0_108d0 = load i32, i32* @r8, align 4
  store i32 %v0_108c8, i32* @r5, align 4
  %v4_108d8 = call i32 @function_10b90(i32 %v0_108c8, i32 ptrtoint ([9 x i8]* @global_var_16b68.294 to i32), i32 %v0_108d0)
  %v0_108dc = load i32, i32* @r7, align 4
  store i32 %v0_108dc, i32* @r0, align 4
  %v0_108e0 = load i32, i32* @r5, align 4
  store i32 %v0_108e0, i32* @global_var_213b4.295, align 4
  %v0_108e4 = load i32, i32* @r8, align 4
  %v1_108e4 = trunc i32 %v0_108e4 to i16
  store i16 %v1_108e4, i16* bitcast (i32* @global_var_213b8.296 to i16*), align 4
  %v0_108e8 = call i32 @function_1203c()
  %v0_108f0 = load i32, i32* @r7, align 4
  store i32 %v0_108e8, i32* @r5, align 4
  %v4_108f8 = call i32 @function_10b90(i32 %v0_108e8, i32 ptrtoint ([15 x i8]* @global_var_16b74.298 to i32), i32 %v0_108f0)
  %v0_108fc = load i32, i32* @sl, align 4
  store i32 %v0_108fc, i32* @r0, align 4
  %v0_10900 = load i32, i32* @r5, align 4
  store i32 %v0_10900, i32* @global_var_213bc.299, align 4
  %v0_10904 = load i32, i32* @r7, align 4
  %v1_10904 = trunc i32 %v0_10904 to i16
  store i16 %v1_10904, i16* bitcast (i32* @global_var_213c0.300 to i16*), align 4
  %v0_10908 = call i32 @function_1203c()
  store i32 ptrtoint ([20 x i8]* @global_var_16b84.302 to i32), i32* @sb, align 4
  %v0_10910 = load i32, i32* @sl, align 4
  store i32 %v0_10908, i32* @r5, align 4
  %v4_1091c = call i32 @function_10b90(i32 %v0_10908, i32 ptrtoint ([20 x i8]* @global_var_16b84.302 to i32), i32 %v0_10910)
  store i32 10, i32* @r0, align 4
  %v0_10924 = load i32, i32* @r5, align 4
  store i32 %v0_10924, i32* @global_var_213c4.303, align 4
  %v0_10928 = load i32, i32* @sl, align 4
  %v1_10928 = trunc i32 %v0_10928 to i16
  store i16 %v1_10928, i16* bitcast (i32* @global_var_213c8.304 to i16*), align 4
  %v0_1092c = call i32 @function_1203c()
  store i32 %v0_1092c, i32* @r5, align 4
  %v4_1093c = call i32 @function_10b90(i32 %v0_1092c, i32 ptrtoint ([11 x i8]* @global_var_16b98.306 to i32), i32 10)
  store i32 21, i32* @r0, align 4
  %v2_1094c = load i32, i32* @r4, align 4
  %v4_1094c = add i32 %v2_1094c, 292
  %v5_1094c = inttoptr i32 %v4_1094c to i16*
  store i16 10, i16* %v5_1094c, align 2
  %v0_10950 = load i32, i32* @r5, align 4
  store i32 %v0_10950, i32* @global_var_21424.307, align 4
  %v0_10954 = call i32 @function_1203c()
  store i32 %v0_10954, i32* @r5, align 4
  %v3_10964 = call i32 @function_10b90(i32 %v0_10954, i32 ptrtoint (i32* @global_var_16bfc.309 to i32), i32 21)
  store i32 17, i32* @r0, align 4
  store i16 21, i16* bitcast (i32* @global_var_213d0.310 to i16*), align 4
  %v0_10974 = load i32, i32* @r5, align 4
  store i32 %v0_10974, i32* @global_var_213cc.311, align 4
  %v0_10978 = call i32 @function_1203c()
  store i32 %v0_10978, i32* @r5, align 4
  %v4_10988 = call i32 @function_10b90(i32 %v0_10978, i32 ptrtoint ([18 x i8]* @global_var_16ba4.313 to i32), i32 17)
  %v0_10990 = load i32, i32* @fp, align 4
  store i32 %v0_10990, i32* @r0, align 4
  %v0_10994 = load i32, i32* @r5, align 4
  store i32 %v0_10994, i32* @global_var_213d4.314, align 4
  store i16 17, i16* bitcast (i32* @global_var_213d8.315 to i16*), align 4
  %v0_1099c = call i32 @function_1203c()
  %v0_109a4 = load i32, i32* @fp, align 4
  store i32 %v0_1099c, i32* @r5, align 4
  %v4_109ac = call i32 @function_10b90(i32 %v0_1099c, i32 ptrtoint ([13 x i8]* @global_var_16bb8.317 to i32), i32 %v0_109a4)
  %v0_109b0 = load i32, i32* @r7, align 4
  store i32 %v0_109b0, i32* @r0, align 4
  %v0_109b4 = load i32, i32* @r5, align 4
  store i32 %v0_109b4, i32* @global_var_213dc.318, align 4
  %v0_109b8 = load i32, i32* @fp, align 4
  %v1_109b8 = trunc i32 %v0_109b8 to i16
  store i16 %v1_109b8, i16* bitcast (i32* @global_var_213e0.319 to i16*), align 4
  %v0_109bc = call i32 @function_1203c()
  %v0_109c4 = load i32, i32* @r7, align 4
  store i32 %v0_109bc, i32* @r5, align 4
  %v4_109cc = call i32 @function_10b90(i32 %v0_109bc, i32 ptrtoint ([15 x i8]* @global_var_16b74.298 to i32), i32 %v0_109c4)
  %v0_109d0 = load i32, i32* @sl, align 4
  store i32 %v0_109d0, i32* @r0, align 4
  %v0_109d4 = load i32, i32* @r5, align 4
  store i32 %v0_109d4, i32* @global_var_213e4.320, align 4
  %v0_109d8 = load i32, i32* @r7, align 4
  %v1_109d8 = trunc i32 %v0_109d8 to i16
  store i16 %v1_109d8, i16* bitcast (i32* @global_var_213e8.321 to i16*), align 4
  %v0_109dc = call i32 @function_1203c()
  %v0_109e0 = load i32, i32* @sb, align 4
  %v0_109e4 = load i32, i32* @sl, align 4
  store i32 %v0_109dc, i32* @r5, align 4
  %v4_109ec = call i32 @function_10b90(i32 %v0_109dc, i32 %v0_109e0, i32 %v0_109e4)
  %v0_109f0 = load i32, i32* @r8, align 4
  store i32 %v0_109f0, i32* @r0, align 4
  %v0_109f4 = load i32, i32* @r5, align 4
  store i32 %v0_109f4, i32* @global_var_213ec.322, align 4
  %v0_109f8 = load i32, i32* @sl, align 4
  %v1_109f8 = trunc i32 %v0_109f8 to i16
  store i16 %v1_109f8, i16* bitcast (i32* @global_var_213f0.323 to i16*), align 4
  %v0_109fc = call i32 @function_1203c()
  %v0_10a04 = load i32, i32* @r8, align 4
  store i32 %v0_109fc, i32* @r5, align 4
  %v4_10a0c = call i32 @function_10b90(i32 %v0_109fc, i32 ptrtoint ([9 x i8]* @global_var_16bc8.325 to i32), i32 %v0_10a04)
  store i32 5, i32* @r0, align 4
  %v0_10a14 = load i32, i32* @r5, align 4
  store i32 %v0_10a14, i32* @global_var_213f4.326, align 4
  %v0_10a18 = load i32, i32* @r8, align 4
  %v1_10a18 = trunc i32 %v0_10a18 to i16
  store i16 %v1_10a18, i16* bitcast (i32* @global_var_213f8.327 to i16*), align 4
  %v0_10a1c = call i32 @function_1203c()
  store i32 %v0_10a1c, i32* @r5, align 4
  %v4_10a2c = call i32 @function_10b90(i32 %v0_10a1c, i32 ptrtoint ([6 x i8]* @global_var_16bd4.329 to i32), i32 5)
  store i32 6, i32* @r0, align 4
  store i16 5, i16* bitcast (i32* @global_var_21400.330 to i16*), align 4
  %v0_10a3c = load i32, i32* @r5, align 4
  store i32 %v0_10a3c, i32* @global_var_213fc.331, align 4
  %v0_10a40 = call i32 @function_1203c()
  store i32 %v0_10a40, i32* @r5, align 4
  %v4_10a50 = call i32 @function_10b90(i32 %v0_10a40, i32 ptrtoint ([7 x i8]* @global_var_16bdc.333 to i32), i32 6)
  %v0_10a5c = load i32, i32* @r6, align 4
  store i32 %v0_10a5c, i32* @r0, align 4
  %v2_10a60 = load i32, i32* @r4, align 4
  %v4_10a60 = add i32 %v2_10a60, 260
  %v5_10a60 = inttoptr i32 %v4_10a60 to i16*
  store i16 6, i16* %v5_10a60, align 2
  %v0_10a64 = load i32, i32* @r5, align 4
  store i32 %v0_10a64, i32* @global_var_21404.334, align 4
  %v0_10a68 = call i32 @function_1203c()
  %v0_10a70 = load i32, i32* @r6, align 4
  store i32 %v0_10a68, i32* %r5.global-to-local, align 4
  %v4_10a78 = call i32 @function_10b90(i32 %v0_10a68, i32 ptrtoint ([24 x i8]* @global_var_16be4.336 to i32), i32 %v0_10a70)
  %v0_10a80 = load i32, i32* @r6, align 4
  %v1_10a80 = trunc i32 %v0_10a80 to i16
  %v2_10a80 = load i32, i32* @r4, align 4
  %v4_10a80 = add i32 %v2_10a80, 268
  %v5_10a80 = inttoptr i32 %v4_10a80 to i16*
  store i16 %v1_10a80, i16* %v5_10a80, align 2
  %v0_10a84 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10a84, i32* @global_var_2140c.337, align 4
  store i32 %v3_1058c, i32* @r4, align 4
  store i32 %v6_1058c, i32* @r5, align 4
  store i32 %v9_1058c, i32* @r6, align 4
  store i32 %v12_1058c, i32* @r7, align 4
  store i32 %v15_1058c, i32* @r8, align 4
  store i32 %v21_1058c, i32* @sl, align 4
  store i32 %v24_1058c, i32* @fp, align 4
  ret i32 %v4_10a78

; uselistorder directives
  uselistorder i32 %v0_10a68, { 1, 0 }
  uselistorder i32 %v0_109fc, { 1, 0 }
  uselistorder i32 %v0_109dc, { 1, 0 }
  uselistorder i32 %v0_109bc, { 1, 0 }
  uselistorder i32 %v0_1099c, { 1, 0 }
  uselistorder i32 %v0_10908, { 1, 0 }
  uselistorder i32 %v0_108e8, { 1, 0 }
  uselistorder i32 %v0_108c8, { 1, 0 }
  uselistorder i32 %v0_108a4, { 1, 0 }
  uselistorder i32 %v0_10884, { 1, 0 }
  uselistorder i32 %v0_10860, { 1, 0 }
  uselistorder i32 %v0_10838, { 1, 0 }
  uselistorder i32 %v0_10814, { 1, 0 }
  uselistorder i32 %v0_10788, { 1, 0 }
  uselistorder i32 %v0_10740, { 1, 0 }
  uselistorder i32 %v0_106d4, { 1, 0 }
  uselistorder i32 %v0_10690, { 1, 0 }
  uselistorder i32 %v0_10670, { 1, 0 }
  uselistorder i32 %v0_10604, { 1, 0 }
  uselistorder i32 %v0_105e4, { 1, 0 }
  uselistorder i32 %v0_105c4, { 1, 0 }
  uselistorder i32 %v0_10598, { 1, 0 }
  uselistorder i32 21, { 0, 6, 7, 5, 1, 2, 3, 4 }
  uselistorder i32 23, { 0, 5, 1, 2, 3, 4 }
  uselistorder i32 (i32, i32, i32)* @function_10b90, { 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5, 4, 3, 2, 1, 0, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_21304.197 to i32), { 4, 0, 1, 2, 3, 5 }
}

define i32 @function_10b20(i8* %arg1) local_unnamed_addr {
dec_label_pc_10b20:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_10b24 = load i8, i8* %arg1, align 1
  %v2_10b28 = icmp eq i8 %v3_10b24, 0
  %v0_10b2c = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_10b28, i32 %v0_10b2c)
  br label %dec_label_pc_10b34

dec_label_pc_10b34:                               ; preds = %dec_label_pc_10b34, %dec_label_pc_10b20
  %v0_10b34 = phi i32 [ %v1_10b34, %dec_label_pc_10b34 ], [ 0, %dec_label_pc_10b20 ]
  %v1_10b34 = add i32 %v0_10b34, 1
  %v2_10b38 = add i32 %v1_10b34, %tmp
  %v3_10b38 = inttoptr i32 %v2_10b38 to i8*
  %v4_10b38 = load i8, i8* %v3_10b38, align 1
  %v2_10b3c = icmp eq i8 %v4_10b38, 0
  br i1 %v2_10b3c, label %dec_label_pc_10b44, label %dec_label_pc_10b34

dec_label_pc_10b44:                               ; preds = %dec_label_pc_10b34
  ret i32 %v1_10b34
}

define i32 @function_10b48(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10b48:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_10b48 = load i8, i8* %arg1, align 1
  %v3_10b48 = zext i8 %v2_10b48 to i32
  store i32 %v3_10b48, i32* @r2, align 4
  %v2_10b4c = icmp eq i8 %v2_10b48, 0
  br i1 %v2_10b4c, label %bb, label %dec_label_pc_10b58

bb:                                               ; preds = %dec_label_pc_10b48
  store i32 %v3_10b48, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10b6c

dec_label_pc_10b58:                               ; preds = %dec_label_pc_10b48
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10b5c

dec_label_pc_10b5c:                               ; preds = %dec_label_pc_10b5c, %dec_label_pc_10b58
  %v0_10b5c = phi i32 [ %v1_10b5c, %dec_label_pc_10b5c ], [ 0, %dec_label_pc_10b58 ]
  %v1_10b5c = add i32 %v0_10b5c, 1
  store i32 %v1_10b5c, i32* %ip.global-to-local, align 4
  %v2_10b60 = add i32 %v1_10b5c, %tmp
  %v3_10b60 = inttoptr i32 %v2_10b60 to i8*
  %v4_10b60 = load i8, i8* %v3_10b60, align 1
  %v2_10b64 = icmp eq i8 %v4_10b60, 0
  br i1 %v2_10b64, label %dec_label_pc_10b6c, label %dec_label_pc_10b5c

dec_label_pc_10b6c:                               ; preds = %dec_label_pc_10b5c, %bb
  %v0_10b6c = phi i32 [ %v3_10b48, %bb ], [ %v1_10b5c, %dec_label_pc_10b5c ]
  br label %dec_label_pc_10b78

dec_label_pc_10b74:                               ; preds = %dec_label_pc_10b78
  %v0_10b74 = load i32, i32* %r1.global-to-local, align 4
  %v1_10b74 = add i32 %v0_10b74, 1
  %v2_10b74 = inttoptr i32 %v1_10b74 to i8*
  %v3_10b74 = load i8, i8* %v2_10b74, align 1
  %v4_10b74 = zext i8 %v3_10b74 to i32
  store i32 %v4_10b74, i32* @r2, align 4
  store i32 %v1_10b74, i32* %r1.global-to-local, align 4
  %v0_10b78.pr = load i32, i32* @r3, align 4
  br label %dec_label_pc_10b78

dec_label_pc_10b78:                               ; preds = %dec_label_pc_10b6c, %dec_label_pc_10b74
  %v0_10b80.off0 = phi i8 [ %v2_10b48, %dec_label_pc_10b6c ], [ %v3_10b74, %dec_label_pc_10b74 ]
  %v0_10b78 = phi i32 [ %v0_10b6c, %dec_label_pc_10b6c ], [ %v0_10b78.pr, %dec_label_pc_10b74 ]
  %v1_10b78 = add i32 %v0_10b78, -1
  store i32 %v1_10b78, i32* @r3, align 4
  %v3_10b7c = icmp eq i32 %v0_10b78, 0
  %v2_10b80 = load i32, i32* @r0, align 4
  %v3_10b80 = inttoptr i32 %v2_10b80 to i8*
  store i8 %v0_10b80.off0, i8* %v3_10b80, align 1
  %v4_10b80 = load i32, i32* @r0, align 4
  %v5_10b80 = add i32 %v4_10b80, 1
  store i32 %v5_10b80, i32* @r0, align 4
  br i1 %v3_10b7c, label %dec_label_pc_10b88, label %dec_label_pc_10b74

dec_label_pc_10b88:                               ; preds = %dec_label_pc_10b78
  %v0_10b88 = load i32, i32* %ip.global-to-local, align 4
  ret i32 %v0_10b88

; uselistorder directives
  uselistorder i32 %v0_10b78, { 1, 0 }
  uselistorder i32 %v1_10b5c, { 0, 1, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 1, 0 }
  uselistorder i32* %ip.global-to-local, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_10b78, { 1, 0 }
}

define i32 @function_10b90(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10b90:
  %v2_10b90 = icmp eq i32 %arg3, 0
  %v0_10b94 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_10b90, i32 %v0_10b94)
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_10b9c

dec_label_pc_10b9c:                               ; preds = %dec_label_pc_10b9c, %dec_label_pc_10b90
  %v0_10b9c = phi i32 [ %v1_10ba4, %dec_label_pc_10b9c ], [ 0, %dec_label_pc_10b90 ]
  %v2_10b9c = add i32 %v0_10b9c, %arg2
  %v3_10b9c = inttoptr i32 %v2_10b9c to i8*
  %v4_10b9c = load i8, i8* %v3_10b9c, align 1
  %v4_10ba0 = add i32 %v0_10b9c, %arg1
  %v5_10ba0 = inttoptr i32 %v4_10ba0 to i8*
  store i8 %v4_10b9c, i8* %v5_10ba0, align 1
  %v0_10ba4 = load i32, i32* @ip, align 4
  %v1_10ba4 = add i32 %v0_10ba4, 1
  store i32 %v1_10ba4, i32* @ip, align 4
  %v9_10ba8 = icmp eq i32 %v1_10ba4, %arg3
  br i1 %v9_10ba8, label %dec_label_pc_10bb0, label %dec_label_pc_10b9c

dec_label_pc_10bb0:                               ; preds = %dec_label_pc_10b9c
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_10ba4, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_10bb4() local_unnamed_addr {
dec_label_pc_10bb4:
  %r2.global-to-local = alloca i32, align 4
  %v0_10bb4 = load i32, i32* @r1, align 4
  %v2_10bb4 = icmp eq i32 %v0_10bb4, 0
  %v0_10bb8 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_10bb4, i32 %v0_10bb8)
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10bc0

dec_label_pc_10bc0:                               ; preds = %dec_label_pc_10bc0, %dec_label_pc_10bb4
  %v2_10bc4 = phi i32 [ %v1_10bc8, %dec_label_pc_10bc0 ], [ 0, %dec_label_pc_10bb4 ]
  store i32 0, i32* @r3, align 4
  %v3_10bc4 = load i32, i32* @r0, align 4
  %v4_10bc4 = add i32 %v3_10bc4, %v2_10bc4
  %v5_10bc4 = inttoptr i32 %v4_10bc4 to i8*
  store i8 0, i8* %v5_10bc4, align 1
  %v0_10bc8 = load i32, i32* %r2.global-to-local, align 4
  %v1_10bc8 = add i32 %v0_10bc8, 1
  store i32 %v1_10bc8, i32* %r2.global-to-local, align 4
  %v1_10bcc = load i32, i32* @r1, align 4
  %v9_10bcc = icmp eq i32 %v1_10bc8, %v1_10bcc
  br i1 %v9_10bcc, label %dec_label_pc_10bd4, label %dec_label_pc_10bc0

dec_label_pc_10bd4:                               ; preds = %dec_label_pc_10bc0
  %v1_10bd4 = load i32, i32* @r0, align 4
  ret i32 %v1_10bd4

; uselistorder directives
  uselistorder i32 %v1_10bc8, { 1, 2, 0 }
}

define i32 @function_10bd8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10bd8:
  %v7_10bec = icmp sgt i32 %arg4, %arg2
  br i1 %v7_10bec, label %dec_label_pc_10bf4, label %dec_label_pc_10bfc

dec_label_pc_10bf4:                               ; preds = %dec_label_pc_10c10, %dec_label_pc_10bfc, %dec_label_pc_10bd8, %dec_label_pc_10c3c
  %storemerge = phi i32 [ %v1_10c3c, %dec_label_pc_10c3c ], [ -1, %dec_label_pc_10bd8 ], [ -1, %dec_label_pc_10bfc ], [ -1, %dec_label_pc_10c10 ]
  ret i32 %storemerge

dec_label_pc_10bfc:                               ; preds = %dec_label_pc_10bd8
  %tmp12 = icmp slt i32 %arg2, 1
  br i1 %tmp12, label %dec_label_pc_10bf4, label %dec_label_pc_10c04

dec_label_pc_10c04:                               ; preds = %dec_label_pc_10bfc
  br label %dec_label_pc_10c1c

dec_label_pc_10c10:                               ; preds = %bb, %dec_label_pc_10c30
  %v1_10c1c3 = phi i32 [ %v1_10c30, %dec_label_pc_10c30 ], [ 0, %bb ]
  %v1_10c10 = add i32 %v0_10c3c, 1
  %v9_10c14 = icmp eq i32 %v1_10c10, %arg2
  br i1 %v9_10c14, label %dec_label_pc_10bf4, label %dec_label_pc_10c1c

dec_label_pc_10c1c:                               ; preds = %dec_label_pc_10c10, %dec_label_pc_10c04
  %v0_10c3c = phi i32 [ %v1_10c10, %dec_label_pc_10c10 ], [ 0, %dec_label_pc_10c04 ]
  %v1_10c1c = phi i32 [ %v1_10c1c3, %dec_label_pc_10c10 ], [ 0, %dec_label_pc_10c04 ]
  %v2_10c1c = add i32 %v1_10c1c, %arg3
  %v3_10c1c = inttoptr i32 %v2_10c1c to i8*
  %v4_10c1c = load i8, i8* %v3_10c1c, align 1
  %v2_10c20 = add i32 %v0_10c3c, %arg1
  %v3_10c20 = inttoptr i32 %v2_10c20 to i8*
  %v4_10c20 = load i8, i8* %v3_10c20, align 1
  %v9_10c24 = icmp eq i8 %v4_10c20, %v4_10c1c
  br i1 %v9_10c24, label %dec_label_pc_10c30, label %bb

bb:                                               ; preds = %dec_label_pc_10c1c
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_10c10

dec_label_pc_10c30:                               ; preds = %dec_label_pc_10c1c
  %v1_10c30 = add i32 %v1_10c1c, 1
  store i32 %v1_10c30, i32* @ip, align 4
  %v9_10c34 = icmp eq i32 %v1_10c30, %arg4
  br i1 %v9_10c34, label %dec_label_pc_10c3c, label %dec_label_pc_10c10

dec_label_pc_10c3c:                               ; preds = %dec_label_pc_10c30
  %v1_10c3c = add i32 %v0_10c3c, 1
  br label %dec_label_pc_10bf4

; uselistorder directives
  uselistorder i32 %v1_10c30, { 1, 2, 0 }
  uselistorder i32 %v1_10c1c, { 1, 0 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10c10, { 1, 0 }
  uselistorder label %dec_label_pc_10bf4, { 3, 0, 1, 2 }
}

define i32 @function_10c44(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10c44:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_10c44 = load i32, i32* @r4, align 4
  %v12_10c44 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10c54

dec_label_pc_10c54:                               ; preds = %.thread, %dec_label_pc_10c68, %bb, %dec_label_pc_10c44
  %v0_10c54 = phi i32 [ %tmp, %dec_label_pc_10c44 ], [ %v5_10c54, %bb ], [ %v5_10c54, %dec_label_pc_10c68 ], [ %v5_10c54, %.thread ]
  %v1_10c54 = inttoptr i32 %v0_10c54 to i8*
  %v2_10c54 = load i8, i8* %v1_10c54, align 1
  %v5_10c54 = add i32 %v0_10c54, 1
  store i32 %v5_10c54, i32* %r5.global-to-local, align 4
  %v7_10c58 = icmp eq i8 %v2_10c54, 9
  br i1 %v7_10c58, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10c54
  br label %dec_label_pc_10c54

bb:                                               ; preds = %dec_label_pc_10c54
  %v3_10c54 = zext i8 %v2_10c54 to i32
  %v8_10c5c = icmp eq i8 %v2_10c54, 32
  store i32 %v3_10c54, i32* @r4, align 4
  br i1 %v8_10c5c, label %dec_label_pc_10c54, label %dec_label_pc_10c68

dec_label_pc_10c68:                               ; preds = %bb
  %v7_10c68 = icmp eq i8 %v2_10c54, 10
  br i1 %v7_10c68, label %dec_label_pc_10c54, label %dec_label_pc_10c70

dec_label_pc_10c70:                               ; preds = %dec_label_pc_10c68
  %v7_10c70 = icmp eq i8 %v2_10c54, 45
  br i1 %v7_10c70, label %dec_label_pc_10d60, label %dec_label_pc_10c78

dec_label_pc_10c78:                               ; preds = %dec_label_pc_10c70
  %v7_10c78 = icmp eq i8 %v2_10c54, 43
  br i1 %v7_10c78, label %bb44, label %dec_label_pc_10c88

bb44:                                             ; preds = %dec_label_pc_10c78
  %v2_10c7c = inttoptr i32 %v5_10c54 to i8*
  %v3_10c7c = load i8, i8* %v2_10c7c, align 1
  %v4_10c7c = zext i8 %v3_10c7c to i32
  store i32 %v4_10c7c, i32* @r4, align 4
  %v6_10c7c = add i32 %v0_10c54, 2
  store i32 %v6_10c7c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10c88

dec_label_pc_10c88:                               ; preds = %bb44, %dec_label_pc_10c78, %dec_label_pc_10d60
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_10d60 ], [ 2147483647, %dec_label_pc_10c78 ], [ 2147483647, %bb44 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_10d60 ], [ 0, %dec_label_pc_10c78 ], [ 0, %bb44 ]
  store i32 %storemerge1, i32* @r7, align 4
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_10c90 = call i32 @function_11178(i32 %storemerge1, i32 %arg2)
  %v0_10c94 = load i32, i32* @r7, align 4
  store i32 %v0_10c94, i32* @r0, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  %v0_10c9c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_10c9c, i32* @r1, align 4
  %v0_10ca0 = call i32 @function_1107c()
  %v0_10cb0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_10cb0.outer

dec_label_pc_10cb0.outer:                         ; preds = %.thread5, %dec_label_pc_10c88
  %v2_10d2c.ph = phi i32 [ %v5_10d2c, %.thread5 ], [ 0, %dec_label_pc_10c88 ]
  %v1_10cf0.ph = phi i32 [ %v4_10d30, %.thread5 ], [ %v0_10cb0.pre, %dec_label_pc_10c88 ]
  %v1_10d08.ph = phi i32 [ 1, %.thread5 ], [ 0, %dec_label_pc_10c88 ]
  %v3_10cfc = icmp uge i32 %v2_10d2c.ph, %v0_10ca0
  %v9_10cfc = icmp eq i32 %v2_10d2c.ph, %v0_10ca0
  %v2_10d00 = xor i1 %v3_10cfc, true
  %v3_10d00 = or i1 %v9_10cfc, %v2_10d00
  %v2_10d04 = xor i1 %v9_10cfc, true
  %v3_10d04 = and i1 %v3_10cfc, %v2_10d04
  %v2_10d24 = icmp eq i1 %v9_10cfc, false
  br label %dec_label_pc_10cb0

dec_label_pc_10cb0:                               ; preds = %dec_label_pc_10cb0.outer, %dec_label_pc_10d38
  %v1_10d08 = phi i32 [ -1, %dec_label_pc_10d38 ], [ %v1_10d08.ph, %dec_label_pc_10cb0.outer ]
  %v1_10cf0 = phi i32 [ %v3_10d38, %dec_label_pc_10d38 ], [ %v1_10cf0.ph, %dec_label_pc_10cb0.outer ]
  %v1_10cb0 = urem i32 %v1_10cf0, 256
  %v1_10cb4 = add nsw i32 %v1_10cb0, -48
  %v1_10cbc = add nsw i32 %v1_10cb0, -97
  %v1_10cc0 = add i32 %v1_10cf0, -48
  %v1_10cc4 = add nsw i32 %v1_10cb0, -65
  %tmp75 = icmp ult i32 %v1_10cb4, 10
  br i1 %tmp75, label %dec_label_pc_10cf4, label %dec_label_pc_10ccc

dec_label_pc_10ccc:                               ; preds = %dec_label_pc_10cb0
  %v2_10ccc = icmp ugt i32 %v1_10cc4, 24
  %v7_10ccc = icmp eq i32 %v1_10cc4, 25
  %v2_10cd0 = xor i1 %v7_10ccc, true
  %v3_10cd0 = and i1 %v2_10ccc, %v2_10cd0
  br i1 %v3_10cd0, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_10ccc
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_10ccc, %bb45
  %v0_10ce414 = phi i32 [ %v1_10cc0, %dec_label_pc_10ccc ], [ 0, %bb45 ]
  %v2_10cd4 = xor i1 %v2_10ccc, true
  %v3_10cd4 = or i1 %v7_10ccc, %v2_10cd4
  br i1 %v3_10cd4, label %bb47, label %bb48

bb47:                                             ; preds = %bb46
  br label %bb48

bb48:                                             ; preds = %bb46, %bb47
  %v0_10ce4 = phi i32 [ %v0_10ce414, %bb46 ], [ 1, %bb47 ]
  br i1 %v3_10cd0, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  %v6_10cdc = icmp ugt i32 %v1_10cbc, 24
  %v11_10cdc = icmp eq i32 %v1_10cbc, 25
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_10ce0 = phi i1 [ %v7_10ccc, %bb48 ], [ %v11_10cdc, %bb49 ]
  %v0_10ce0 = phi i1 [ %v2_10ccc, %bb48 ], [ %v6_10cdc, %bb49 ]
  %v2_10ce0 = xor i1 %v1_10ce0, true
  %v3_10ce0 = and i1 %v0_10ce0, %v2_10ce0
  br i1 %v3_10ce0, label %dec_label_pc_10d44, label %dec_label_pc_10ce4

dec_label_pc_10ce4:                               ; preds = %bb50
  %v2_10ce4 = icmp eq i32 %v0_10ce4, 0
  %. = select i1 %v2_10ce4, i32 87, i32 55
  %v2_10cf0 = sub i32 %v1_10cf0, %.
  br label %dec_label_pc_10cf4

dec_label_pc_10cf4:                               ; preds = %dec_label_pc_10cb0, %dec_label_pc_10ce4
  %v0_10d0829 = phi i32 [ %v1_10cc4, %dec_label_pc_10cb0 ], [ %., %dec_label_pc_10ce4 ]
  %v3_10d2c = phi i32 [ %v1_10cc0, %dec_label_pc_10cb0 ], [ %v2_10cf0, %dec_label_pc_10ce4 ]
  %v1_10cf4 = load i32, i32* %r6.global-to-local, align 4
  %v2_10cf4 = sub i32 %v3_10d2c, %v1_10cf4
  %v4_10cf4 = xor i32 %v1_10cf4, %v3_10d2c
  %v5_10cf4 = xor i32 %v2_10cf4, %v3_10d2c
  %v6_10cf4 = and i32 %v5_10cf4, %v4_10cf4
  %v7_10cf4 = icmp slt i32 %v6_10cf4, 0
  %v8_10cf4 = icmp slt i32 %v2_10cf4, 0
  %v2_10cf8 = xor i1 %v8_10cf4, %v7_10cf4
  br i1 %v2_10cf8, label %dec_label_pc_10cfc, label %dec_label_pc_10d44

dec_label_pc_10cfc:                               ; preds = %dec_label_pc_10cf4
  br i1 %v3_10d00, label %bb53, label %bb54

bb53:                                             ; preds = %dec_label_pc_10cfc
  br label %bb54

bb54:                                             ; preds = %dec_label_pc_10cfc, %bb53
  %v0_10d0828 = phi i32 [ %v0_10d0829, %dec_label_pc_10cfc ], [ 0, %bb53 ]
  br i1 %v3_10d04, label %bb55, label %bb56

bb55:                                             ; preds = %bb54
  br label %bb56

bb56:                                             ; preds = %bb54, %bb55
  %v0_10d08 = phi i32 [ %v0_10d0828, %bb54 ], [ 1, %bb55 ]
  %tmp76 = icmp slt i32 %v1_10d08, 0
  %v4_10d08 = zext i1 %tmp76 to i32
  %v5_10d08 = or i32 %v0_10d08, %v4_10d08
  %v7_10d08 = icmp eq i32 %v5_10d08, 0
  br i1 %v7_10d08, label %dec_label_pc_10d10, label %dec_label_pc_10d38

dec_label_pc_10d10:                               ; preds = %bb56
  %v1_10d1c = load i32, i32* %r8.global-to-local, align 4
  %v2_10d1c = sub i32 %v3_10d2c, %v1_10d1c
  %v4_10d1c = xor i32 %v1_10d1c, %v3_10d2c
  %v5_10d1c = xor i32 %v2_10d1c, %v3_10d2c
  %v6_10d1c = and i32 %v5_10d1c, %v4_10d1c
  %v7_10d1c = icmp slt i32 %v6_10d1c, 0
  %v8_10d1c = icmp slt i32 %v2_10d1c, 0
  %v9_10d1c = icmp eq i32 %v3_10d2c, %v1_10d1c
  %v3_10d20 = xor i1 %v8_10d1c, %v7_10d1c
  %v4_10d20 = or i1 %v9_10d1c, %v3_10d20
  br i1 %v4_10d20, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %dec_label_pc_10d10
  br label %.thread5

thread-pre-split:                                 ; preds = %dec_label_pc_10d10
  br i1 %v2_10d24, label %.thread5, label %dec_label_pc_10d38

.thread5:                                         ; preds = %thread-pre-split, %thread-pre-split.thread
  %v4_10d2c = mul i32 %v1_10cf4, %v2_10d2c.ph
  %v5_10d2c = add i32 %v4_10d2c, %v3_10d2c
  %v1_10d30 = load i32, i32* %r5.global-to-local, align 4
  %v2_10d30 = inttoptr i32 %v1_10d30 to i8*
  %v3_10d30 = load i8, i8* %v2_10d30, align 1
  %v4_10d30 = zext i8 %v3_10d30 to i32
  %v6_10d30 = add i32 %v1_10d30, 1
  store i32 %v6_10d30, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10cb0.outer

dec_label_pc_10d38:                               ; preds = %thread-pre-split, %bb56
  %v0_10d38 = load i32, i32* %r5.global-to-local, align 4
  %v1_10d38 = inttoptr i32 %v0_10d38 to i8*
  %v2_10d38 = load i8, i8* %v1_10d38, align 1
  %v3_10d38 = zext i8 %v2_10d38 to i32
  %v5_10d38 = add i32 %v0_10d38, 1
  store i32 %v5_10d38, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10cb0

dec_label_pc_10d44:                               ; preds = %dec_label_pc_10cf4, %bb50
  %v1_10d44 = icmp slt i32 %v1_10d08, 0
  %v0_10d70 = load i32, i32* %sl.global-to-local, align 4
  %v2_10d70 = icmp eq i32 %v0_10d70, 0
  br i1 %v1_10d44, label %dec_label_pc_10d70, label %dec_label_pc_10d4c

dec_label_pc_10d4c:                               ; preds = %dec_label_pc_10d44
  br i1 %v2_10d70, label %bb60, label %bb59

bb59:                                             ; preds = %dec_label_pc_10d4c
  %v2_10d50 = sub i32 0, %v2_10d2c.ph
  br label %bb60

bb60:                                             ; preds = %.thread32, %bb61, %dec_label_pc_10d4c, %bb59
  %v1_10d5c = phi i32 [ -2147483648, %bb61 ], [ %v2_10d2c.ph, %dec_label_pc_10d4c ], [ %v2_10d50, %bb59 ], [ 2147483647, %.thread32 ]
  store i32 %v3_10c44, i32* @r4, align 4
  store i32 %v12_10c44, i32* @r7, align 4
  ret i32 %v1_10d5c

dec_label_pc_10d60:                               ; preds = %dec_label_pc_10c70
  %v1_10d60 = inttoptr i32 %v5_10c54 to i8*
  %v2_10d60 = load i8, i8* %v1_10d60, align 1
  %v3_10d60 = zext i8 %v2_10d60 to i32
  store i32 %v3_10d60, i32* @r4, align 4
  %v5_10d60 = add i32 %v0_10c54, 2
  store i32 %v5_10d60, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10c88

dec_label_pc_10d70:                               ; preds = %dec_label_pc_10d44
  br i1 %v2_10d70, label %.thread32, label %bb61

.thread32:                                        ; preds = %dec_label_pc_10d70
  br label %bb60

bb61:                                             ; preds = %dec_label_pc_10d70
  br label %bb60

; uselistorder directives
  uselistorder i1 %v2_10d70, { 1, 0 }
  uselistorder i32 %v2_10d1c, { 1, 0 }
  uselistorder i32 %v1_10d1c, { 1, 0, 2 }
  uselistorder i32 %v2_10cf4, { 1, 0 }
  uselistorder i32 %v3_10d2c, { 0, 6, 1, 2, 5, 3, 4, 7 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_10ccc, { 1, 2, 0 }
  uselistorder i1 %v2_10ccc, { 1, 0, 2 }
  uselistorder i32 %v1_10cb0, { 1, 2, 0 }
  uselistorder i32 %v1_10cf0, { 1, 2, 0 }
  uselistorder i32 %v1_10d08, { 1, 0 }
  uselistorder i1 %v9_10cfc, { 1, 0, 2 }
  uselistorder i1 %v3_10cfc, { 1, 0 }
  uselistorder i32 %v2_10d2c.ph, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v0_10ca0, { 1, 0 }
  uselistorder i32 %v5_10c54, { 3, 4, 5, 2, 1, 0 }
  uselistorder i8 %v2_10c54, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_10c54, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 5, 2, 4, 3, 6, 7 }
  uselistorder i32 25, { 13, 14, 8, 2, 3, 0, 9, 4, 10, 1, 11, 5, 6, 12, 7, 15 }
  uselistorder i8 32, { 9, 10, 11, 0, 12, 13, 14, 1, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i8 9, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %bb60, { 1, 0, 3, 2 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %dec_label_pc_10cf4, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_10cb0, { 1, 0 }
  uselistorder label %dec_label_pc_10c88, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10c54, { 1, 2, 0, 3 }
}

define i32 @function_10d80(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10d80:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_10d80 = load i32, i32* @r4, align 4
  store i32 %v3_10d80, i32* %stack_var_-24, align 4
  %v12_10d80 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10d98

dec_label_pc_10d98:                               ; preds = %dec_label_pc_10dbc.dec_label_pc_10d98_crit_edge, %dec_label_pc_10d80
  %v0_10d9c = phi i32 [ %v0_10d9c.pre, %dec_label_pc_10dbc.dec_label_pc_10d98_crit_edge ], [ %arg3, %dec_label_pc_10d80 ]
  %v1_10da4 = call i32 @function_11378(i32 %v0_10d9c)
  %v7_10da8 = icmp eq i32 %v1_10da4, 1
  %v0_10db0 = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_10da8, label %dec_label_pc_10db0, label %dec_label_pc_10dc8

dec_label_pc_10db0:                               ; preds = %dec_label_pc_10d98
  %v1_10db0 = add i32 %v0_10db0, 1
  store i32 %v1_10db0, i32* %r5.global-to-local, align 4
  %v1_10db4 = load i32, i32* %r8.global-to-local, align 4
  %v6_10db8 = icmp slt i32 %v1_10db0, %v1_10db4
  br i1 %v6_10db8, label %dec_label_pc_10dbc, label %.loopexit

dec_label_pc_10dbc:                               ; preds = %dec_label_pc_10db0
  %v0_10dbc = load i32, i32* %r4.global-to-local, align 4
  %v1_10dbc = inttoptr i32 %v0_10dbc to i8*
  %v2_10dbc = load i8, i8* %v1_10dbc, align 1
  %v5_10dbc = add i32 %v0_10dbc, 1
  store i32 %v5_10dbc, i32* %r4.global-to-local, align 4
  %v7_10dc0 = icmp eq i8 %v2_10dbc, 10
  br i1 %v7_10dc0, label %dec_label_pc_10dc8, label %dec_label_pc_10dbc.dec_label_pc_10d98_crit_edge

dec_label_pc_10dbc.dec_label_pc_10d98_crit_edge:  ; preds = %dec_label_pc_10dbc
  %v0_10d9c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10d98

dec_label_pc_10dc8:                               ; preds = %dec_label_pc_10d98, %dec_label_pc_10dbc
  %v0_10dc8 = phi i32 [ %v1_10db0, %dec_label_pc_10dbc ], [ %v0_10db0, %dec_label_pc_10d98 ]
  %v2_10dc8 = icmp eq i32 %v0_10dc8, 0
  br i1 %v2_10dc8, label %bb, label %.loopexit

bb:                                               ; preds = %dec_label_pc_10dc8
  store i32 0, i32* @r7, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_10db0, %dec_label_pc_10dc8, %bb
  %v0_10dd0 = load i32, i32* @r7, align 4
  %v2_10dd4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_10dd4, i32* @r4, align 4
  store i32 %v12_10d80, i32* @r7, align 4
  ret i32 %v0_10dd0

; uselistorder directives
  uselistorder label %.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10dc8, { 1, 0 }
}

define i32 @function_10ddc() local_unnamed_addr {
dec_label_pc_10ddc:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  store i32 16, i32* %r6.global-to-local, align 4
  store i32 16, i32* %stack_var_-20, align 4
  %v0_10dec = call i32 @function_11a08()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_10df4 = inttoptr i32 %v0_10dec to i32*
  store i32 0, i32* %v2_10df4, align 4
  %v0_10e00 = load i32, i32* %r4.global-to-local, align 4
  %v3_10e04 = call i32 @function_11df4(i32 2, i32 2, i32 %v0_10e00)
  %v7_10e08 = icmp eq i32 %v3_10e04, -1
  store i32 %v3_10e04, i32* %r5.global-to-local, align 4
  br i1 %v7_10e08, label %bb, label %dec_label_pc_10e18

bb:                                               ; preds = %dec_label_pc_10ddc
  %v1_10e10 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10e64

dec_label_pc_10e18:                               ; preds = %dec_label_pc_10ddc
  %v2_10e24 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_10e24, i32* %r4.global-to-local, align 4
  %v0_10e30 = load i32, i32* %r6.global-to-local, align 4
  store i32 2, i32* %stack_var_-36, align 4
  %v3_10e44 = call i32 @function_11bdc(i32 %v3_10e04, i32 %v2_10e24, i32 %v0_10e30)
  %v2_10e4c = ptrtoint i32* %stack_var_-20 to i32
  %v0_10e50 = load i32, i32* %r5.global-to-local, align 4
  %v3_10e54 = call i32 @function_11c14(i32 %v0_10e50, i32 %v2_10e24, i32 %v2_10e4c)
  %v1_10e5c = call i32 @function_115e0(i32 %v0_10e50)
  br label %dec_label_pc_10e64

dec_label_pc_10e64:                               ; preds = %bb, %dec_label_pc_10e18
  %storemerge = phi i32 [ 134744072, %dec_label_pc_10e18 ], [ %v1_10e10, %bb ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v3_10e04, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_11bdc, { 8, 9, 7, 5, 6, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_11df4, { 25, 26, 23, 24, 21, 22, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10e64, { 1, 0 }
}

define i32 @function_10e70(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10e70:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp23 = ptrtoint i8* %arg1 to i32
  %v3_10e74 = load i8, i8* %tmp, align 1
  %v2_10e78 = icmp eq i8 %v3_10e74, 0
  br i1 %v2_10e78, label %bb, label %dec_label_pc_10e8c

bb:                                               ; preds = %dec_label_pc_10e70
  %v4_10e74 = zext i8 %v3_10e74 to i32
  br label %dec_label_pc_10ea0

dec_label_pc_10e8c:                               ; preds = %dec_label_pc_10e70
  br label %dec_label_pc_10e90

dec_label_pc_10e90:                               ; preds = %dec_label_pc_10e90, %dec_label_pc_10e8c
  %v0_10e90 = phi i32 [ %v1_10e90, %dec_label_pc_10e90 ], [ 0, %dec_label_pc_10e8c ]
  %v1_10e90 = add i32 %v0_10e90, 1
  %v2_10e94 = add i32 %v1_10e90, %arg2
  %v3_10e94 = inttoptr i32 %v2_10e94 to i8*
  %v4_10e94 = load i8, i8* %v3_10e94, align 1
  %v2_10e98 = icmp eq i8 %v4_10e94, 0
  br i1 %v2_10e98, label %dec_label_pc_10ea0, label %dec_label_pc_10e90

dec_label_pc_10ea0:                               ; preds = %dec_label_pc_10e90, %bb
  %v0_10ee421 = phi i32 [ %v4_10e74, %bb ], [ %v1_10e90, %dec_label_pc_10e90 ]
  %v0_10ea82 = load i32, i32* @r1, align 4
  %tmp29 = icmp slt i32 %v0_10ea82, 1
  br i1 %tmp29, label %dec_label_pc_10ef8, label %dec_label_pc_10eb4

dec_label_pc_10eb4:                               ; preds = %dec_label_pc_10ea0, %dec_label_pc_10ea8.backedge
  %v0_10eac.in = phi i32 [ %v0_10eac, %dec_label_pc_10ea8.backedge ], [ %v0_10ea82, %dec_label_pc_10ea0 ]
  %v1_10ec0 = phi i32 [ %v1_10ec015, %dec_label_pc_10ea8.backedge ], [ 0, %dec_label_pc_10ea0 ]
  %v0_10eb4 = phi i32 [ %v5_10eb4, %dec_label_pc_10ea8.backedge ], [ %tmp23, %dec_label_pc_10ea0 ]
  %v0_10eac = add i32 %v0_10eac.in, -1
  %v1_10eb4 = inttoptr i32 %v0_10eb4 to i8*
  %v2_10eb4 = load i8, i8* %v1_10eb4, align 1
  %v3_10eb4 = zext i8 %v2_10eb4 to i32
  %v5_10eb4 = add i32 %v0_10eb4, 1
  %v1_10eb8 = add nsw i32 %v3_10eb4, -65
  %v2_10ec0 = add i32 %v1_10ec0, %arg2
  %v3_10ec0 = inttoptr i32 %v2_10ec0 to i8*
  %v4_10ec0 = load i8, i8* %v3_10ec0, align 1
  %v6_10ec0 = zext i8 %v4_10ec0 to i32
  %v1_10ec4 = add nsw i32 %v6_10ec0, -65
  %tmp38 = icmp ult i32 %v1_10eb8, 26
  br i1 %tmp38, label %bb30, label %bb31

bb30:                                             ; preds = %dec_label_pc_10eb4
  %v5_10ec8 = or i32 %v3_10eb4, 96
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_10eb4, %bb30
  %v0_10ed4 = phi i32 [ %v3_10eb4, %dec_label_pc_10eb4 ], [ %v5_10ec8, %bb30 ]
  %tmp39 = icmp ult i32 %v1_10ec4, 26
  br i1 %tmp39, label %bb32, label %bb33

bb32:                                             ; preds = %bb31
  %v5_10ed0 = or i32 %v6_10ec0, 96
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_10ed4 = phi i32 [ %v6_10ec0, %bb31 ], [ %v5_10ed0, %bb32 ]
  %v9_10ed4 = icmp eq i32 %v0_10ed4, %v1_10ed4
  br i1 %v9_10ed4, label %dec_label_pc_10ee0, label %bb34

bb34:                                             ; preds = %bb33
  br label %dec_label_pc_10ea8.backedge

dec_label_pc_10ea8.backedge:                      ; preds = %bb34, %dec_label_pc_10ee0
  %v1_10ec015 = phi i32 [ 0, %bb34 ], [ %v1_10ee0, %dec_label_pc_10ee0 ]
  %tmp35 = icmp slt i32 %v0_10eac, 1
  br i1 %tmp35, label %dec_label_pc_10ef8, label %dec_label_pc_10eb4

dec_label_pc_10ee0:                               ; preds = %bb33
  %v1_10ee0 = add i32 %v1_10ec0, 1
  %v9_10ee4 = icmp eq i32 %v0_10ee421, %v1_10ee0
  br i1 %v9_10ee4, label %dec_label_pc_10eec, label %dec_label_pc_10ea8.backedge

dec_label_pc_10eec:                               ; preds = %dec_label_pc_10ee0
  %v2_10eec = sub i32 %v5_10eb4, %tmp23
  br label %dec_label_pc_10ef8

dec_label_pc_10ef8:                               ; preds = %dec_label_pc_10ea8.backedge, %dec_label_pc_10ea0, %dec_label_pc_10eec
  %storemerge = phi i32 [ %v2_10eec, %dec_label_pc_10eec ], [ -1, %dec_label_pc_10ea0 ], [ -1, %dec_label_pc_10ea8.backedge ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10ee0, { 1, 0 }
  uselistorder i32 %v0_10eb4, { 1, 0 }
  uselistorder i32 %v1_10ec0, { 1, 0 }
  uselistorder i8 %v3_10e74, { 1, 0 }
  uselistorder i32 %tmp23, { 1, 0 }
  uselistorder i32 26, { 0, 1, 5, 2, 6, 3, 7, 4, 8 }
  uselistorder label %dec_label_pc_10ef8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10ea8.backedge, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_10eb4, { 1, 0 }
}

define i32 @function_10f00(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10f00:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_10f00 = load i8, i8* %arg1, align 1
  %v2_10f04 = icmp eq i8 %v2_10f00, 0
  br i1 %v2_10f04, label %bb, label %dec_label_pc_10f10

bb:                                               ; preds = %dec_label_pc_10f00
  %v3_10f00 = zext i8 %v2_10f00 to i32
  br label %dec_label_pc_10f24

dec_label_pc_10f10:                               ; preds = %dec_label_pc_10f00
  br label %dec_label_pc_10f14

dec_label_pc_10f14:                               ; preds = %dec_label_pc_10f14, %dec_label_pc_10f10
  %v0_10f14 = phi i32 [ %v1_10f14, %dec_label_pc_10f14 ], [ 0, %dec_label_pc_10f10 ]
  %v1_10f14 = add i32 %v0_10f14, 1
  %v2_10f18 = add i32 %v1_10f14, %tmp
  %v3_10f18 = inttoptr i32 %v2_10f18 to i8*
  %v4_10f18 = load i8, i8* %v3_10f18, align 1
  %v2_10f1c = icmp eq i8 %v4_10f18, 0
  br i1 %v2_10f1c, label %dec_label_pc_10f24, label %dec_label_pc_10f14

dec_label_pc_10f24:                               ; preds = %dec_label_pc_10f14, %bb
  %v0_10f703 = phi i32 [ %v3_10f00, %bb ], [ %v1_10f14, %dec_label_pc_10f14 ]
  %v1_10f24 = inttoptr i32 %arg2 to i8*
  %v2_10f24 = load i8, i8* %v1_10f24, align 1
  %v3_10f24 = zext i8 %v2_10f24 to i32
  store i32 %v3_10f24, i32* @r3, align 4
  %v2_10f28 = icmp eq i8 %v2_10f24, 0
  br i1 %v2_10f28, label %bb21, label %dec_label_pc_10f34

bb21:                                             ; preds = %dec_label_pc_10f24
  store i32 %v3_10f24, i32* @r2, align 4
  br label %dec_label_pc_10f48

dec_label_pc_10f34:                               ; preds = %dec_label_pc_10f24
  br label %dec_label_pc_10f38

dec_label_pc_10f38:                               ; preds = %dec_label_pc_10f38, %dec_label_pc_10f34
  %v0_10f38 = phi i32 [ %v1_10f38, %dec_label_pc_10f38 ], [ 0, %dec_label_pc_10f34 ]
  %v1_10f38 = add i32 %v0_10f38, 1
  store i32 %v1_10f38, i32* @r2, align 4
  %v2_10f3c = add i32 %v1_10f38, %arg2
  %v3_10f3c = inttoptr i32 %v2_10f3c to i8*
  %v4_10f3c = load i8, i8* %v3_10f3c, align 1
  %v6_10f3c = zext i8 %v4_10f3c to i32
  store i32 %v6_10f3c, i32* @r3, align 4
  %v2_10f40 = icmp eq i8 %v4_10f3c, 0
  br i1 %v2_10f40, label %dec_label_pc_10f48, label %dec_label_pc_10f38

dec_label_pc_10f48:                               ; preds = %dec_label_pc_10f38, %bb21
  %v0_10f48 = phi i32 [ %v3_10f24, %bb21 ], [ %v1_10f38, %dec_label_pc_10f38 ]
  %v9_10f48 = icmp eq i32 %v0_10f48, %v0_10f703
  br i1 %v9_10f48, label %dec_label_pc_10f70.preheader, label %dec_label_pc_10f50

dec_label_pc_10f70.preheader:                     ; preds = %dec_label_pc_10f48
  %v2_10f705 = icmp eq i32 %v0_10f703, 0
  br i1 %v2_10f705, label %dec_label_pc_10f78, label %dec_label_pc_10f58

dec_label_pc_10f50:                               ; preds = %dec_label_pc_10f58, %dec_label_pc_10f48
  ret i32 0

dec_label_pc_10f58:                               ; preds = %dec_label_pc_10f68, %dec_label_pc_10f70.preheader
  %v0_10f70.in = phi i32 [ %v0_10f70, %dec_label_pc_10f68 ], [ %v0_10f703, %dec_label_pc_10f70.preheader ]
  %v0_10f6c = phi i32 [ %v1_10f6c, %dec_label_pc_10f68 ], [ %arg2, %dec_label_pc_10f70.preheader ]
  %v0_10f68 = phi i32 [ %v1_10f68, %dec_label_pc_10f68 ], [ %tmp, %dec_label_pc_10f70.preheader ]
  %v0_10f70 = add i32 %v0_10f70.in, -1
  %v1_10f58 = inttoptr i32 %v0_10f68 to i8*
  %v2_10f58 = load i8, i8* %v1_10f58, align 1
  %v3_10f58 = zext i8 %v2_10f58 to i32
  store i32 %v3_10f58, i32* @r2, align 4
  %v1_10f5c = inttoptr i32 %v0_10f6c to i8*
  %v2_10f5c = load i8, i8* %v1_10f5c, align 1
  %v3_10f5c = zext i8 %v2_10f5c to i32
  store i32 %v3_10f5c, i32* @r3, align 4
  %v9_10f60 = icmp eq i8 %v2_10f58, %v2_10f5c
  br i1 %v9_10f60, label %dec_label_pc_10f68, label %dec_label_pc_10f50

dec_label_pc_10f68:                               ; preds = %dec_label_pc_10f58
  %v1_10f68 = add i32 %v0_10f68, 1
  %v1_10f6c = add i32 %v0_10f6c, 1
  %v2_10f70 = icmp eq i32 %v0_10f70, 0
  br i1 %v2_10f70, label %dec_label_pc_10f78, label %dec_label_pc_10f58

dec_label_pc_10f78:                               ; preds = %dec_label_pc_10f68, %dec_label_pc_10f70.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_10f38, { 0, 1, 3, 2 }
  uselistorder i8 %v2_10f00, { 1, 0 }
}

define i32 @function_10f80(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10f80:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-66 = alloca i32, align 4
  %v3_10f80 = load i32, i32* @r4, align 4
  %v12_10f80 = load i32, i32* @r7, align 4
  %v0_10f84 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_10f84, i32* %r8.global-to-local, align 4
  %v2_10f84 = icmp eq i32 %v0_10f84, 0
  store i1 %v2_10f84, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br i1 %v2_10f84, label %dec_label_pc_11064, label %dec_label_pc_10f94

dec_label_pc_10f94:                               ; preds = %dec_label_pc_10f80
  %v3_10f94 = icmp eq i8 %arg1, 0
  store i1 %v3_10f94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10f94, label %.thread, label %dec_label_pc_10fa8

.thread:                                          ; preds = %dec_label_pc_10f94
  %v4_10f9c = inttoptr i32 %v0_10f84 to i8*
  store i8 48, i8* %v4_10f9c, align 1
  %v0_10fa0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10fa0.pr.pr, label %.thread1, label %dec_label_pc_10fa8

.thread1:                                         ; preds = %.thread
  %v4_10fa0 = load i32, i32* %r8.global-to-local, align 4
  %v5_10fa0 = add i32 %v4_10fa0, 1
  %v6_10fa0 = inttoptr i32 %v5_10fa0 to i8*
  store i8 0, i8* %v6_10fa0, align 1
  %v0_10fa4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10fa4.pr.pr, label %dec_label_pc_11064, label %dec_label_pc_10fa8

dec_label_pc_10fa8:                               ; preds = %dec_label_pc_10f94, %.thread, %.thread1
  %tmp47 = icmp slt i8 %arg1, 0
  %v7_10fac = icmp eq i32 %arg2, 10
  store i1 %v7_10fac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10fac, label %bb, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_10fa8
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread6

bb:                                               ; preds = %dec_label_pc_10fa8
  %v4_10fa8 = zext i1 %tmp47 to i32
  store i32 %v4_10fa8, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp47, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  %v3_10fcc8 = sub nsw i32 0, %tmp
  %tmp.v3_10fcc8 = select i1 %phitmp, i32 %tmp, i32 %v3_10fcc8
  %tmp46 = zext i1 %phitmp to i32
  %. = xor i32 %tmp46, 1
  br label %.thread6

.thread6:                                         ; preds = %bb, %.thread28
  %storemerge30 = phi i32 [ %tmp, %.thread28 ], [ %tmp.v3_10fcc8, %bb ]
  %storemerge = phi i32 [ 0, %.thread28 ], [ %., %bb ]
  store i32 %storemerge30, i32* @r4, align 4
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r5.global-to-local, align 4
  %v2_10fd8 = ptrtoint i32* %stack_var_-66 to i32
  store i32 %v2_10fd8, i32* @r7, align 4
  br label %dec_label_pc_10fdc

dec_label_pc_10fdc:                               ; preds = %bb45, %.thread6
  %v0_10fdc = phi i32 [ %v0_11000, %bb45 ], [ %storemerge30, %.thread6 ]
  store i32 %v0_10fdc, i32* %r0.global-to-local, align 4
  %v0_10fe0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_10fe0, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_10fdc, 16777216
  %v1_10fe4 = sdiv i32 %sext, 16777216
  %v3_10fe4 = call i32 @function_11178(i32 %v1_10fe4, i32 %v0_10fe0)
  %v7_10fe8 = icmp eq i32 %v0_10fe0, 9
  store i1 %v7_10fe8, i1* %cpsr_z.global-to-local, align 1
  %v1_10fec = add i32 %v0_10fe0, 48
  %v0_10ff0 = load i32, i32* @r4, align 4
  store i32 %v0_10ff0, i32* @r0, align 4
  %v7_10ff4 = icmp sgt i32 %v0_10fe0, 9
  %extract.t = trunc i32 %v1_10fec to i8
  br i1 %v7_10ff4, label %bb44, label %bb45

bb44:                                             ; preds = %dec_label_pc_10fdc
  %v9_10ff4 = add i32 %v0_10fe0, 55
  %extract.t27 = trunc i32 %v9_10ff4 to i8
  br label %bb45

bb45:                                             ; preds = %dec_label_pc_10fdc, %bb44
  %v0_10ffc.off0 = phi i8 [ %extract.t, %dec_label_pc_10fdc ], [ %extract.t27, %bb44 ]
  %v0_10ff8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_10ff8, i32* @r1, align 4
  %v2_10ffc = load i32, i32* %r5.global-to-local, align 4
  %v3_10ffc = load i32, i32* @r7, align 4
  %v4_10ffc = add i32 %v3_10ffc, %v2_10ffc
  %v5_10ffc = inttoptr i32 %v4_10ffc to i8*
  store i8 %v0_10ffc.off0, i8* %v5_10ffc, align 1
  %v0_11000 = call i32 @function_1107c()
  store i32 %v0_11000, i32* %r0.global-to-local, align 4
  store i32 %v0_11000, i32* @r4, align 4
  %v2_11004 = icmp eq i32 %v0_11000, 0
  store i1 %v2_11004, i1* %cpsr_z.global-to-local, align 1
  %v0_11008 = load i32, i32* %r5.global-to-local, align 4
  %v1_11008 = add i32 %v0_11008, -1
  store i32 %v1_11008, i32* %r5.global-to-local, align 4
  br i1 %v2_11004, label %dec_label_pc_11010, label %dec_label_pc_10fdc

dec_label_pc_11010:                               ; preds = %bb45
  %v0_11010 = load i32, i32* %sl.global-to-local, align 4
  %v2_11010 = icmp eq i32 %v0_11010, 0
  store i1 %v2_11010, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11010, label %.thread12, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_11010
  %v3_11014 = ptrtoint i32* %stack_var_-32 to i32
  %v3_11018 = add i32 %v1_11008, %v3_11014
  store i32 %v3_11018, i32* %r2.global-to-local, align 4
  %v4_11020 = add i32 %v3_11018, -34
  %v5_11020 = inttoptr i32 %v4_11020 to i8*
  store i8 45, i8* %v5_11020, align 1
  %v0_11024.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_11024.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v0_11024.pr.pr.pr, label %.thread12, label %.thread11._crit_edge

.thread12:                                        ; preds = %.thread11, %dec_label_pc_11010
  %v1_11024 = phi i32 [ %v1_11008, %dec_label_pc_11010 ], [ %v1_11024.pre, %.thread11 ]
  %v2_11024 = add i32 %v1_11024, 1
  store i32 %v2_11024, i32* %r5.global-to-local, align 4
  br label %.thread11._crit_edge

.thread11._crit_edge:                             ; preds = %.thread11, %.thread12
  %v1_11030 = phi i32 [ %v2_11024, %.thread12 ], [ %v1_11024.pre, %.thread11 ]
  %v0_11028 = load i32, i32* @r7, align 4
  %v2_11028 = add i32 %v0_11028, %v1_11030
  %v3_11028 = inttoptr i32 %v2_11028 to i8*
  %v4_11028 = load i8, i8* %v3_11028, align 1
  %v6_11028 = zext i8 %v4_11028 to i32
  %v2_1102c = icmp eq i8 %v4_11028, 0
  store i1 %v2_1102c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_11028, i32* %r2.global-to-local, align 4
  br i1 %v2_1102c, label %dec_label_pc_11074, label %dec_label_pc_1103c.preheader

dec_label_pc_1103c.preheader:                     ; preds = %.thread11._crit_edge
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1103c

dec_label_pc_1103c:                               ; preds = %dec_label_pc_1103c.preheader, %dec_label_pc_1103c
  %v0_1103c = phi i32 [ 0, %dec_label_pc_1103c.preheader ], [ %v1_1103c, %dec_label_pc_1103c ]
  %v1_1103c = add i32 %v0_1103c, 1
  store i32 %v1_1103c, i32* %r1.global-to-local, align 4
  %v2_11040 = add i32 %v1_1103c, %v2_11028
  %v3_11040 = inttoptr i32 %v2_11040 to i8*
  %v4_11040 = load i8, i8* %v3_11040, align 1
  %v2_11044 = icmp eq i8 %v4_11040, 0
  store i1 %v2_11044, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11044, label %dec_label_pc_1104c, label %dec_label_pc_1103c

dec_label_pc_1104c:                               ; preds = %dec_label_pc_1103c, %dec_label_pc_11074
  %v0_1105024 = phi i32 [ %v6_11028, %dec_label_pc_11074 ], [ %v1_1103c, %dec_label_pc_1103c ]
  %v0_1104c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_1104c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11050

dec_label_pc_11050:                               ; preds = %dec_label_pc_11050.dec_label_pc_11050_crit_edge, %dec_label_pc_1104c
  %v2_1105c = phi i32 [ %v5_1105c, %dec_label_pc_11050.dec_label_pc_11050_crit_edge ], [ %v0_1104c, %dec_label_pc_1104c ]
  %v0_11054 = phi i32 [ %v0_11054.pre, %dec_label_pc_11050.dec_label_pc_11050_crit_edge ], [ %v2_11028, %dec_label_pc_1104c ]
  %v0_11050 = phi i32 [ %v0_11050.pre, %dec_label_pc_11050.dec_label_pc_11050_crit_edge ], [ %v0_1105024, %dec_label_pc_1104c ]
  %v1_11050 = add i32 %v0_11050, -1
  store i32 %v1_11050, i32* %r1.global-to-local, align 4
  %v1_11054 = inttoptr i32 %v0_11054 to i8*
  %v2_11054 = load i8, i8* %v1_11054, align 1
  %v5_11054 = add i32 %v0_11054, 1
  store i32 %v5_11054, i32* %r2.global-to-local, align 4
  %v3_11058 = icmp eq i32 %v0_11050, 0
  store i1 %v3_11058, i1* %cpsr_z.global-to-local, align 1
  %v3_1105c = inttoptr i32 %v2_1105c to i8*
  store i8 %v2_11054, i8* %v3_1105c, align 1
  %v4_1105c = load i32, i32* %r0.global-to-local, align 4
  %v5_1105c = add i32 %v4_1105c, 1
  store i32 %v5_1105c, i32* %r0.global-to-local, align 4
  br i1 %v3_11058, label %dec_label_pc_11064, label %dec_label_pc_11050.dec_label_pc_11050_crit_edge

dec_label_pc_11050.dec_label_pc_11050_crit_edge:  ; preds = %dec_label_pc_11050
  %v0_11050.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_11054.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11050

dec_label_pc_11064:                               ; preds = %dec_label_pc_11050, %.thread1, %dec_label_pc_10f80
  %v0_11064 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_11064, i32* %r0.global-to-local, align 4
  store i32 %v3_10f80, i32* @r4, align 4
  store i32 %v12_10f80, i32* @r7, align 4
  ret i32 %v0_11064

dec_label_pc_11074:                               ; preds = %.thread11._crit_edge
  store i32 %v6_11028, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1104c

; uselistorder directives
  uselistorder i32 %v5_1105c, { 1, 0 }
  uselistorder i1 %v3_11058, { 1, 0 }
  uselistorder i32 %v0_11054, { 1, 0 }
  uselistorder i32 %v1_1103c, { 0, 1, 3, 2 }
  uselistorder i32 %v6_11028, { 1, 0 }
  uselistorder i32 %v2_11028, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11024.pre, { 1, 0 }
  uselistorder i32 %v1_11008, { 1, 0, 2 }
  uselistorder i32 %v0_11000, { 1, 2, 3, 0 }
  uselistorder i32 %v0_10fe0, { 1, 0, 2, 3, 4, 5 }
  uselistorder i1 %phitmp, { 2, 1, 0 }
  uselistorder i32 %v0_10f84, { 0, 2, 1 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r2.global-to-local, { 6, 7, 2, 3, 4, 5, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 4, 5, 6, 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 6, 5, 1, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 13, 0, 1, 2, 3, 4, 5, 6, 12, 7, 9, 8, 10, 11 }
  uselistorder i32 55, { 3, 0, 2, 1 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1104c, { 1, 0 }
  uselistorder label %dec_label_pc_1103c, { 1, 0 }
  uselistorder label %.thread11._crit_edge, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %dec_label_pc_10fa8, { 2, 1, 0 }
}

define i32 @function_1107c() local_unnamed_addr {
dec_label_pc_1107c:
  %r2.global-to-local = alloca i32, align 4
  %v0_1107c = load i32, i32* @r1, align 4
  %v1_1107c = add i32 %v0_1107c, -1
  store i32 %v1_1107c, i32* %r2.global-to-local, align 4
  %v2_1107c = icmp eq i32 %v0_1107c, 0
  %v7_1107c = icmp eq i32 %v0_1107c, 1
  %v0_11080 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_1107c, i32 %v0_11080)
  br i1 %v2_1107c, label %dec_label_pc_11164, label %dec_label_pc_11088

dec_label_pc_11088:                               ; preds = %dec_label_pc_1107c
  %v0_11088 = load i32, i32* @r0, align 4
  %v1_11088 = load i32, i32* @r1, align 4
  %tmp = icmp ugt i32 %v0_11088, %v1_11088
  br i1 %tmp, label %dec_label_pc_11090, label %dec_label_pc_1111c

dec_label_pc_11090:                               ; preds = %dec_label_pc_11088
  %v1_11090 = load i32, i32* %r2.global-to-local, align 4
  %v2_11090 = and i32 %v1_11090, %v1_11088
  %v4_11090 = icmp eq i32 %v2_11090, 0
  br i1 %v4_11090, label %dec_label_pc_11128, label %dec_label_pc_11098

dec_label_pc_11098:                               ; preds = %dec_label_pc_11090
  %v3_11098 = icmp ult i32 %v1_11088, 536870912
  br i1 %v3_11098, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_11098
  %v4_1109c = mul i32 %v1_11088, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_11098, %.thread
  %v0_110bc.pr36.ph = phi i32 [ %v4_1109c, %.thread ], [ %v1_11088, %dec_label_pc_11098 ]
  %storemerge133 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_11098 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb81
  %v0_110bc.pr36 = phi i32 [ %v4_110b0, %bb81 ], [ %v0_110bc.pr36.ph, %.preheader.preheader ]
  %v1_110b4 = phi i32 [ %v4_110b4, %bb81 ], [ %storemerge133, %.preheader.preheader ]
  %v2_110a8 = icmp ugt i32 %v0_110bc.pr36, 268435455
  br i1 %v2_110a8, label %.thread2, label %bb

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_110bcthread-pre-split.loopexit

bb:                                               ; preds = %.preheader
  %v4_110ac = icmp ult i32 %v0_110bc.pr36, %v0_11088
  br i1 %v4_110ac, label %bb80, label %dec_label_pc_110bcthread-pre-split.loopexit.loopexit

bb80:                                             ; preds = %bb
  %v2_110b0 = and i32 %v0_110bc.pr36, 268435456
  %v3_110b0 = icmp eq i32 %v2_110b0, 0
  %v4_110b0 = mul i32 %v0_110bc.pr36, 16
  br i1 %v3_110b0, label %bb81, label %dec_label_pc_110bc.loopexit

bb81:                                             ; preds = %bb80
  %v2_110b4 = and i32 %v1_110b4, 268435456
  %v3_110b4 = icmp eq i32 %v2_110b4, 0
  %v4_110b4 = mul i32 %v1_110b4, 16
  br i1 %v3_110b4, label %.preheader, label %dec_label_pc_110bcthread-pre-split.loopexit.loopexit

dec_label_pc_110bcthread-pre-split.loopexit.loopexit: ; preds = %bb81, %bb
  %v1_110c848.ph = phi i32 [ %v1_110b4, %bb ], [ %v4_110b4, %bb81 ]
  %v0_110bc.pr38.ph = phi i32 [ %v0_110bc.pr36, %bb ], [ %v4_110b0, %bb81 ]
  br label %dec_label_pc_110bcthread-pre-split.loopexit

dec_label_pc_110bcthread-pre-split.loopexit:      ; preds = %dec_label_pc_110bcthread-pre-split.loopexit.loopexit, %.thread2
  %v1_110c848 = phi i32 [ %v1_110b4, %.thread2 ], [ %v1_110c848.ph, %dec_label_pc_110bcthread-pre-split.loopexit.loopexit ]
  %v0_110bc.pr38 = phi i32 [ %v0_110bc.pr36, %.thread2 ], [ %v0_110bc.pr38.ph, %dec_label_pc_110bcthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_110bcthread-pre-split

dec_label_pc_110bcthread-pre-split:               ; preds = %dec_label_pc_110bcthread-pre-split.loopexit, %bb83
  %v1_110c846 = phi i32 [ %v1_110c848, %dec_label_pc_110bcthread-pre-split.loopexit ], [ %v3_110c8, %bb83 ]
  %v0_110bc.pr = phi i32 [ %v0_110bc.pr38, %dec_label_pc_110bcthread-pre-split.loopexit ], [ %v3_110c4, %bb83 ]
  br label %dec_label_pc_110bc

dec_label_pc_110bc.loopexit:                      ; preds = %bb80
  br label %dec_label_pc_110bc

dec_label_pc_110bc:                               ; preds = %dec_label_pc_110bc.loopexit, %dec_label_pc_110bcthread-pre-split
  %v1_110c8 = phi i32 [ %v1_110c846, %dec_label_pc_110bcthread-pre-split ], [ %v1_110b4, %dec_label_pc_110bc.loopexit ]
  %v1_110c4 = phi i32 [ %v0_110bc.pr, %dec_label_pc_110bcthread-pre-split ], [ %v4_110b0, %dec_label_pc_110bc.loopexit ]
  %v2_110bc = icmp slt i32 %v1_110c4, 0
  br i1 %v2_110bc, label %dec_label_pc_110d0, label %bb82

bb82:                                             ; preds = %dec_label_pc_110bc
  %v4_110c0 = icmp ult i32 %v1_110c4, %v0_11088
  br i1 %v4_110c0, label %bb83, label %dec_label_pc_110d0

bb83:                                             ; preds = %bb82
  %v3_110c4 = mul i32 %v1_110c4, 2
  %v2_110c8 = icmp slt i32 %v1_110c8, 0
  %v3_110c8 = mul i32 %v1_110c8, 2
  br i1 %v2_110c8, label %dec_label_pc_110d0, label %dec_label_pc_110bcthread-pre-split

dec_label_pc_110d0:                               ; preds = %bb82, %dec_label_pc_110bc, %bb83
  %v2_110dc59 = phi i32 [ %v3_110c8, %bb83 ], [ %v1_110c8, %bb82 ], [ %v1_110c8, %dec_label_pc_110bc ]
  %v1_110d451 = phi i32 [ %v3_110c4, %bb83 ], [ %v1_110c4, %bb82 ], [ %v1_110c4, %dec_label_pc_110bc ]
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_110d4

dec_label_pc_110d4:                               ; preds = %.thread11, %dec_label_pc_110d0
  %v1_11108 = phi i32 [ %v4_11108, %.thread11 ], [ %v2_110dc59, %dec_label_pc_110d0 ]
  %v1_110dc = phi i32 [ %v0_11114, %.thread11 ], [ 0, %dec_label_pc_110d0 ]
  %v1_1110c = phi i32 [ %v4_1110c, %.thread11 ], [ %v1_110d451, %dec_label_pc_110d0 ]
  %v1_110d8 = phi i32 [ %v0_11104, %.thread11 ], [ %v0_11088, %dec_label_pc_110d0 ]
  %v3_110d4 = icmp ult i32 %v1_110d8, %v1_1110c
  br i1 %v3_110d4, label %.thread7, label %bb84

bb84:                                             ; preds = %dec_label_pc_110d4
  %v3_110d8 = sub i32 %v1_110d8, %v1_1110c
  %v3_110dc = or i32 %v1_110dc, %v1_11108
  store i32 %v3_110dc, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_110d4, %bb84
  %v1_110e4 = phi i32 [ %v1_110d8, %dec_label_pc_110d4 ], [ %v3_110d8, %bb84 ]
  %v1_110e8 = phi i32 [ %v1_110dc, %dec_label_pc_110d4 ], [ %v3_110dc, %bb84 ]
  %v4_110e0 = udiv i32 %v1_1110c, 2
  %v6_110e0 = icmp ult i32 %v1_110e4, %v4_110e0
  br i1 %v6_110e0, label %.thread8, label %bb85

bb85:                                             ; preds = %.thread7
  %v3_110e4 = urem i32 %v1_1110c, 2
  %v4_110e4 = icmp eq i32 %v3_110e4, 0
  %v6_110e4 = sub i32 %v1_110e4, %v4_110e0
  br i1 %v4_110e4, label %.thread8, label %bb86

bb86:                                             ; preds = %bb85
  %v5_110e8 = udiv i32 %v1_11108, 2
  %v6_110e8 = or i32 %v1_110e8, %v5_110e8
  store i32 %v6_110e8, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb85, %.thread7, %bb86
  %v1_110f0 = phi i32 [ %v6_110e4, %bb85 ], [ %v1_110e4, %.thread7 ], [ %v6_110e4, %bb86 ]
  %v1_110f4 = phi i32 [ %v1_110e8, %bb85 ], [ %v1_110e8, %.thread7 ], [ %v6_110e8, %bb86 ]
  %v4_110ec = udiv i32 %v1_1110c, 4
  %v6_110ec = icmp ult i32 %v1_110f0, %v4_110ec
  br i1 %v6_110ec, label %.thread9, label %bb87

bb87:                                             ; preds = %.thread8
  %v3_110f0 = and i32 %v1_1110c, 2
  %v4_110f0 = icmp eq i32 %v3_110f0, 0
  %v6_110f0 = sub i32 %v1_110f0, %v4_110ec
  br i1 %v4_110f0, label %.thread9, label %bb88

bb88:                                             ; preds = %bb87
  %v5_110f4 = udiv i32 %v1_11108, 4
  %v6_110f4 = or i32 %v1_110f4, %v5_110f4
  store i32 %v6_110f4, i32* %r2.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb87, %.thread8, %bb88
  %v1_110fc = phi i32 [ %v6_110f0, %bb87 ], [ %v1_110f0, %.thread8 ], [ %v6_110f0, %bb88 ]
  %v1_11100 = phi i32 [ %v1_110f4, %bb87 ], [ %v1_110f4, %.thread8 ], [ %v6_110f4, %bb88 ]
  %v4_110f8 = udiv i32 %v1_1110c, 8
  %v6_110f8 = icmp ult i32 %v1_110fc, %v4_110f8
  br i1 %v6_110f8, label %thread-pre-split, label %bb89

bb89:                                             ; preds = %.thread9
  %v3_110fc = and i32 %v1_1110c, 4
  %v4_110fc = icmp eq i32 %v3_110fc, 0
  %v6_110fc = sub i32 %v1_110fc, %v4_110f8
  br i1 %v4_110fc, label %thread-pre-split, label %bb90

bb90:                                             ; preds = %bb89
  %v5_11100 = udiv i32 %v1_11108, 8
  %v6_11100 = or i32 %v1_11100, %v5_11100
  store i32 %v6_11100, i32* %r2.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb90, %.thread9, %bb89
  %v0_11114 = phi i32 [ %v1_11100, %bb89 ], [ %v1_11100, %.thread9 ], [ %v6_11100, %bb90 ]
  %v0_11104 = phi i32 [ %v6_110fc, %bb89 ], [ %v1_110fc, %.thread9 ], [ %v6_110fc, %bb90 ]
  %v2_11104 = icmp eq i32 %v0_11104, 0
  br i1 %v2_11104, label %dec_label_pc_11114, label %bb91

bb91:                                             ; preds = %thread-pre-split
  %tmp138 = icmp ult i32 %v1_11108, 16
  br i1 %tmp138, label %dec_label_pc_11114, label %.thread11

.thread11:                                        ; preds = %bb91
  %v4_11108 = udiv i32 %v1_11108, 16
  %v4_1110c = udiv i32 %v1_1110c, 16
  br label %dec_label_pc_110d4

dec_label_pc_11114:                               ; preds = %thread-pre-split, %bb91
  ret i32 %v0_11114

dec_label_pc_1111c:                               ; preds = %dec_label_pc_11088
  %v9_11088 = icmp eq i32 %v0_11088, %v1_11088
  %. = zext i1 %v9_11088 to i32
  ret i32 %.

dec_label_pc_11128:                               ; preds = %dec_label_pc_11090
  %v2_11128 = icmp ugt i32 %v1_11088, 65535
  br i1 %v2_11128, label %bb95, label %.thread16

bb95:                                             ; preds = %dec_label_pc_11128
  %v2_1112c = and i32 %v1_11088, 32768
  %v3_1112c = icmp eq i32 %v2_1112c, 0
  %v4_1112c = udiv i32 %v1_11088, 65536
  br i1 %v3_1112c, label %.thread16, label %bb96

.thread16:                                        ; preds = %bb95, %dec_label_pc_11128
  %v0_1113865 = phi i32 [ %v1_11088, %dec_label_pc_11128 ], [ %v4_1112c, %bb95 ]
  br label %bb96

bb96:                                             ; preds = %bb95, %.thread16
  %v1_1113c = phi i32 [ %v0_1113865, %.thread16 ], [ %v4_1112c, %bb95 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb95 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_11138 = icmp ugt i32 %v1_1113c, 255
  br i1 %v2_11138, label %bb97, label %.thread17

bb97:                                             ; preds = %bb96
  %v2_1113c = and i32 %v1_1113c, 128
  %v3_1113c = icmp eq i32 %v2_1113c, 0
  %v4_1113c = udiv i32 %v1_1113c, 256
  br i1 %v3_1113c, label %.thread17, label %bb98

bb98:                                             ; preds = %bb97
  %v2_11140 = or i32 %storemerge, 8
  store i32 %v2_11140, i32* %r2.global-to-local, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb97, %bb96, %bb98
  %v1_1114c = phi i32 [ %storemerge, %bb96 ], [ %storemerge, %bb97 ], [ %v2_11140, %bb98 ]
  %v1_11148 = phi i32 [ %v1_1113c, %bb96 ], [ %v4_1113c, %bb97 ], [ %v4_1113c, %bb98 ]
  %v2_11144 = icmp ugt i32 %v1_11148, 15
  br i1 %v2_11144, label %bb99, label %.thread18

bb99:                                             ; preds = %.thread17
  %v2_11148 = and i32 %v1_11148, 8
  %v3_11148 = icmp eq i32 %v2_11148, 0
  %v4_11148 = udiv i32 %v1_11148, 16
  br i1 %v3_11148, label %.thread18, label %bb100

bb100:                                            ; preds = %bb99
  %v2_1114c = add nsw i32 %v1_1114c, 4
  store i32 %v2_1114c, i32* %r2.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb99, %.thread17, %bb100
  %v4_11154 = phi i32 [ %v1_1114c, %.thread17 ], [ %v1_1114c, %bb99 ], [ %v2_1114c, %bb100 ]
  %v5_11158 = phi i32 [ %v1_11148, %.thread17 ], [ %v4_11148, %bb99 ], [ %v4_11148, %bb100 ]
  %v2_11150 = icmp ugt i32 %v5_11158, 3
  %v7_11150 = icmp eq i32 %v5_11158, 4
  %v2_11154 = xor i1 %v7_11150, true
  %v3_11154 = and i1 %v2_11150, %v2_11154
  br i1 %v3_11154, label %bb101, label %bb102

bb101:                                            ; preds = %.thread18
  %v5_11154 = add nsw i32 %v4_11154, 3
  store i32 %v5_11154, i32* %r2.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %.thread18, %bb101
  %v4_11158 = phi i32 [ %v4_11154, %.thread18 ], [ %v5_11154, %bb101 ]
  %v2_11158 = xor i1 %v2_11150, true
  %v3_11158 = or i1 %v7_11150, %v2_11158
  br i1 %v3_11158, label %bb103, label %bb104

bb103:                                            ; preds = %bb102
  %v8_11158 = udiv i32 %v5_11158, 2
  %v9_11158 = add i32 %v4_11158, %v8_11158
  store i32 %v9_11158, i32* %r2.global-to-local, align 4
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v1_1115c = phi i32 [ %v4_11158, %bb102 ], [ %v9_11158, %bb103 ]
  %v6_1115c = lshr i32 %v0_11088, %v1_1115c
  ret i32 %v6_1115c

dec_label_pc_11164:                               ; preds = %dec_label_pc_1107c
  %v0_11164 = load i32, i32* @lr, align 4
  %v0_11168 = call i32 @function_11190()
  store i32 %v0_11164, i32* @lr, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_11158, { 1, 0 }
  uselistorder i1 %v7_11150, { 1, 0 }
  uselistorder i32 %v4_11148, { 1, 0 }
  uselistorder i32 %v1_11148, { 1, 0, 2, 3 }
  uselistorder i32 %v2_11140, { 1, 0 }
  uselistorder i32 %v4_1113c, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_1113c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_1112c, { 1, 0 }
  uselistorder i32 %v0_11104, { 1, 0 }
  uselistorder i32 %v4_110f8, { 1, 0 }
  uselistorder i32 %v1_11100, { 1, 2, 0 }
  uselistorder i32 %v4_110ec, { 1, 0 }
  uselistorder i32 %v1_110f4, { 1, 2, 0 }
  uselistorder i32 %v4_110e0, { 1, 0 }
  uselistorder i32 %v1_110e8, { 1, 2, 0 }
  uselistorder i32 %v1_1110c, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_110dc, { 1, 0 }
  uselistorder i32 %v1_11108, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_110c8, { 1, 0 }
  uselistorder i32 %v3_110c4, { 1, 0 }
  uselistorder i32 %v1_110c4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_110c8, { 1, 2, 0, 3 }
  uselistorder i32 %v4_110b4, { 1, 0 }
  uselistorder i32 %v4_110b0, { 2, 1, 0 }
  uselistorder i32 %v1_110b4, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_110bc.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v1_11088, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1 }
  uselistorder i32 %v0_11088, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_1107c, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_11114, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_110d0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_110bcthread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_11178(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11178:
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %v0_1117c = call i32 @function_1107c()
  ret i32 %v0_1117c
}

define i32 @function_11190() local_unnamed_addr {
dec_label_pc_11190:
  %v1_11198 = call i32 @function_11e2c(i32 8)
  ret i32 %v1_11198
}

define i32 @function_111a4() local_unnamed_addr {
dec_label_pc_111a4:
  %v1_111b4 = load i32, i32* @r0, align 4
  ret i32 %v1_111b4
}

define i32 @function_111b8(i32 %arg1) local_unnamed_addr {
dec_label_pc_111b8:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_111b8 = load i32, i32* @r7, align 4
  store i32 %v3_111b8, i32* %stack_var_-8, align 4
  %v0_111c4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_111c4, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_111c4, -4095
  br i1 %tmp, label %dec_label_pc_111e4, label %dec_label_pc_111d4

dec_label_pc_111d4:                               ; preds = %dec_label_pc_111b8
  %v0_111d4 = call i32 @function_11a08()
  %v0_111d8 = load i32, i32* %r7.global-to-local, align 4
  %v1_111d8 = sub i32 0, %v0_111d8
  %v2_111dc = inttoptr i32 %v0_111d4 to i32*
  store i32 %v1_111d8, i32* %v2_111dc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_111e4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_111e4

dec_label_pc_111e4:                               ; preds = %dec_label_pc_111b8, %dec_label_pc_111d4
  %v1_111e8 = phi i32 [ %v0_111c4, %dec_label_pc_111b8 ], [ -1, %dec_label_pc_111d4 ]
  %v2_111e4 = phi i32 [ %v3_111b8, %dec_label_pc_111b8 ], [ %v2_111e4.pre, %dec_label_pc_111d4 ]
  store i32 %v2_111e4, i32* @r7, align 4
  ret i32 %v1_111e8

; uselistorder directives
  uselistorder i32 %v0_111c4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_111e4, { 1, 0 }
}

define i32 @function_111ec(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_111ec:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v6_111ec = load i32, i32* @r2, align 4
  %v9_111ec = load i32, i32* @r3, align 4
  store i32 %v9_111ec, i32* %stack_var_-4, align 4
  %v1_111fc = and i32 %arg2, 64
  %v2_111fc = icmp eq i32 %v1_111fc, 0
  br i1 %v2_111fc, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_111ec
  %v3_11204 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v3_11204, i32* @r3, align 4
  %phitmp = urem i32 %v6_111ec, 65536
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_111ec, %bb
  %v0_11208 = phi i32 [ 0, %dec_label_pc_111ec ], [ %phitmp, %bb ]
  store i32 %v0_11208, i32* @r2, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11238, label %dec_label_pc_11228

dec_label_pc_11228:                               ; preds = %.thread
  %v0_11228 = call i32 @function_11a08()
  %v0_1122c = load i32, i32* %r7.global-to-local, align 4
  %v1_1122c = sub i32 0, %v0_1122c
  store i32 %v1_1122c, i32* @r3, align 4
  %v2_11230 = inttoptr i32 %v0_11228 to i32*
  store i32 %v1_1122c, i32* %v2_11230, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_11238

dec_label_pc_11238:                               ; preds = %.thread, %dec_label_pc_11228
  %v0_11238 = phi i32 [ %arg1, %.thread ], [ -1, %dec_label_pc_11228 ]
  ret i32 %v0_11238

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11238, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_1124c() local_unnamed_addr {
dec_label_pc_1124c:
  %v1_1125c = load i32, i32* @r0, align 4
  ret i32 %v1_1125c
}

define i32 @function_11260(i32* %arg1) local_unnamed_addr {
dec_label_pc_11260:
  %stack_var_-16 = alloca i32, align 4
  %v2_11264 = ptrtoint i32* %stack_var_-16 to i32
  %v2_11274 = call i32 @function_113e0(i32 %v2_11264, i32 0)
  %v2_11278 = load i32, i32* %stack_var_-16, align 4
  %v2_1127c = icmp eq i32* %arg1, null
  br i1 %v2_1127c, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_11260
  store i32 %v2_11278, i32* %arg1, align 4
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_11260, %bb
  ret i32 %v2_11278

; uselistorder directives
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_11290(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11290:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_112c4, label %dec_label_pc_112b4

dec_label_pc_112b4:                               ; preds = %dec_label_pc_11290
  %v0_112b4 = call i32 @function_11a08()
  %v0_112b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_112b8 = sub i32 0, %v0_112b8
  %v2_112bc = inttoptr i32 %v0_112b4 to i32*
  store i32 %v1_112b8, i32* %v2_112bc, align 4
  br label %dec_label_pc_112c4

dec_label_pc_112c4:                               ; preds = %dec_label_pc_11290, %dec_label_pc_112b4
  %v1_112cc = phi i32 [ %arg1, %dec_label_pc_11290 ], [ -1, %dec_label_pc_112b4 ]
  ret i32 %v1_112cc

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_112c4, { 1, 0 }
}

define i32 @function_112d0() local_unnamed_addr {
dec_label_pc_112d0:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_112d0 = load i32, i32* @r7, align 4
  store i32 %v3_112d0, i32* %stack_var_-8, align 4
  %v0_112dc = load i32, i32* @r0, align 4
  store i32 %v0_112dc, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_112dc, -4095
  br i1 %tmp, label %dec_label_pc_112fc, label %dec_label_pc_112ec

dec_label_pc_112ec:                               ; preds = %dec_label_pc_112d0
  %v0_112ec = call i32 @function_11a08()
  %v0_112f0 = load i32, i32* %r7.global-to-local, align 4
  %v1_112f0 = sub i32 0, %v0_112f0
  %v2_112f4 = inttoptr i32 %v0_112ec to i32*
  store i32 %v1_112f0, i32* %v2_112f4, align 4
  %v2_112fc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_112fc

dec_label_pc_112fc:                               ; preds = %dec_label_pc_112d0, %dec_label_pc_112ec
  %v1_11300 = phi i32 [ %v0_112dc, %dec_label_pc_112d0 ], [ -1, %dec_label_pc_112ec ]
  %v2_112fc = phi i32 [ %v3_112d0, %dec_label_pc_112d0 ], [ %v2_112fc.pre, %dec_label_pc_112ec ]
  store i32 %v2_112fc, i32* @r7, align 4
  ret i32 %v1_11300

; uselistorder directives
  uselistorder i32 %v0_112dc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_112fc, { 1, 0 }
}

define i32 @function_11304(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11304:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11334, label %dec_label_pc_11324

dec_label_pc_11324:                               ; preds = %dec_label_pc_11304
  %v0_11324 = call i32 @function_11a08()
  %v0_11328 = load i32, i32* %r4.global-to-local, align 4
  %v1_11328 = sub i32 0, %v0_11328
  %v2_1132c = inttoptr i32 %v0_11324 to i32*
  store i32 %v1_11328, i32* %v2_1132c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11334

dec_label_pc_11334:                               ; preds = %dec_label_pc_11304, %dec_label_pc_11324
  %v0_11334 = phi i32 [ %arg1, %dec_label_pc_11304 ], [ -1, %dec_label_pc_11324 ]
  ret i32 %v0_11334

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11334, { 1, 0 }
}

define i32 @function_11344(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11344:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11344 = load i32, i32* @r7, align 4
  store i32 %v3_11344, i32* %stack_var_-8, align 4
  %v0_11350 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11350, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11350, -4095
  br i1 %tmp, label %dec_label_pc_11370, label %dec_label_pc_11360

dec_label_pc_11360:                               ; preds = %dec_label_pc_11344
  %v0_11360 = call i32 @function_11a08()
  %v0_11364 = load i32, i32* %r7.global-to-local, align 4
  %v1_11364 = sub i32 0, %v0_11364
  store i32 %v1_11364, i32* @r3, align 4
  %v2_11368 = inttoptr i32 %v0_11360 to i32*
  store i32 %v1_11364, i32* %v2_11368, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11370.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11370

dec_label_pc_11370:                               ; preds = %dec_label_pc_11344, %dec_label_pc_11360
  %v1_11374 = phi i32 [ %v0_11350, %dec_label_pc_11344 ], [ -1, %dec_label_pc_11360 ]
  %v2_11370 = phi i32 [ %v3_11344, %dec_label_pc_11344 ], [ %v2_11370.pre, %dec_label_pc_11360 ]
  store i32 %v2_11370, i32* @r7, align 4
  ret i32 %v1_11374

; uselistorder directives
  uselistorder i32 %v0_11350, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11370, { 1, 0 }
}

define i32 @function_11378(i32 %arg1) local_unnamed_addr {
dec_label_pc_11378:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11378 = load i32, i32* @r7, align 4
  store i32 %v3_11378, i32* %stack_var_-8, align 4
  %v0_11384 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11384, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11384, -4095
  br i1 %tmp, label %dec_label_pc_113a4, label %dec_label_pc_11394

dec_label_pc_11394:                               ; preds = %dec_label_pc_11378
  %v0_11394 = call i32 @function_11a08()
  %v0_11398 = load i32, i32* %r7.global-to-local, align 4
  %v1_11398 = sub i32 0, %v0_11398
  %v2_1139c = inttoptr i32 %v0_11394 to i32*
  store i32 %v1_11398, i32* %v2_1139c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_113a4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_113a4

dec_label_pc_113a4:                               ; preds = %dec_label_pc_11378, %dec_label_pc_11394
  %v1_113a8 = phi i32 [ %v0_11384, %dec_label_pc_11378 ], [ -1, %dec_label_pc_11394 ]
  %v2_113a4 = phi i32 [ %v3_11378, %dec_label_pc_11378 ], [ %v2_113a4.pre, %dec_label_pc_11394 ]
  store i32 %v2_113a4, i32* @r7, align 4
  ret i32 %v1_113a8

; uselistorder directives
  uselistorder i32 %v0_11384, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_113a4, { 1, 0 }
}

define i32 @function_113ac(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_113ac:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_113ac = load i32, i32* @r7, align 4
  store i32 %v3_113ac, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_113d4, label %dec_label_pc_113c4

dec_label_pc_113c4:                               ; preds = %dec_label_pc_113ac
  %v0_113c4 = call i32 @function_11a08()
  %v0_113c8 = load i32, i32* %r7.global-to-local, align 4
  %v1_113c8 = sub i32 0, %v0_113c8
  %v2_113cc = inttoptr i32 %v0_113c4 to i32*
  store i32 %v1_113c8, i32* %v2_113cc, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_113d8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_113d4

dec_label_pc_113d4:                               ; preds = %dec_label_pc_113ac, %dec_label_pc_113c4
  %v2_113d8 = phi i32 [ %v3_113ac, %dec_label_pc_113ac ], [ %v2_113d8.pre, %dec_label_pc_113c4 ]
  %v0_113d4 = phi i32 [ %arg1, %dec_label_pc_113ac ], [ -1, %dec_label_pc_113c4 ]
  store i32 %v2_113d8, i32* @r7, align 4
  ret i32 %v0_113d4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_113d4, { 1, 0 }
}

define i32 @function_113e0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_113e0:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_113e0 = load i32, i32* @r7, align 4
  store i32 %v3_113e0, i32* %stack_var_-8, align 4
  %v0_113ec = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_113ec, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_113ec, -4095
  br i1 %tmp, label %dec_label_pc_1140c, label %dec_label_pc_113fc

dec_label_pc_113fc:                               ; preds = %dec_label_pc_113e0
  %v0_113fc = call i32 @function_11a08()
  %v0_11400 = load i32, i32* %r7.global-to-local, align 4
  %v1_11400 = sub i32 0, %v0_11400
  store i32 %v1_11400, i32* @r3, align 4
  %v2_11404 = inttoptr i32 %v0_113fc to i32*
  store i32 %v1_11400, i32* %v2_11404, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_1140c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1140c

dec_label_pc_1140c:                               ; preds = %dec_label_pc_113e0, %dec_label_pc_113fc
  %v1_11410 = phi i32 [ %v0_113ec, %dec_label_pc_113e0 ], [ -1, %dec_label_pc_113fc ]
  %v2_1140c = phi i32 [ %v3_113e0, %dec_label_pc_113e0 ], [ %v2_1140c.pre, %dec_label_pc_113fc ]
  store i32 %v2_1140c, i32* @r7, align 4
  ret i32 %v1_11410

; uselistorder directives
  uselistorder i32 %v0_113ec, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1140c, { 1, 0 }
}

define i32 @function_11414(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11414:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_11414 = load i32, i32* @r3, align 4
  store i32 %v9_11414, i32* %stack_var_-4, align 4
  %v2_1142c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_1142c, i32* @r3, align 4
  %v0_11450 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11450, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11450, -4095
  br i1 %tmp, label %dec_label_pc_11470, label %dec_label_pc_11460

dec_label_pc_11460:                               ; preds = %dec_label_pc_11414
  %v0_11460 = call i32 @function_11a08()
  %v0_11464 = load i32, i32* %r7.global-to-local, align 4
  %v1_11464 = sub i32 0, %v0_11464
  store i32 %v1_11464, i32* @r3, align 4
  %v2_11468 = inttoptr i32 %v0_11460 to i32*
  store i32 %v1_11464, i32* %v2_11468, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11470

dec_label_pc_11470:                               ; preds = %dec_label_pc_11414, %dec_label_pc_11460
  %v1_1147c = phi i32 [ %v0_11450, %dec_label_pc_11414 ], [ -1, %dec_label_pc_11460 ]
  ret i32 %v1_1147c

; uselistorder directives
  uselistorder i32 %v0_11450, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11470, { 1, 0 }
}

define i32 @function_11480(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11480:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_114bc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_114bc, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_114bc, -4095
  br i1 %tmp, label %dec_label_pc_114dc, label %dec_label_pc_114cc

dec_label_pc_114cc:                               ; preds = %dec_label_pc_11480
  %v0_114cc = call i32 @function_11a08()
  %v0_114d0 = load i32, i32* %r7.global-to-local, align 4
  %v1_114d0 = sub i32 0, %v0_114d0
  %v2_114d4 = inttoptr i32 %v0_114cc to i32*
  store i32 %v1_114d0, i32* %v2_114d4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_114dc

dec_label_pc_114dc:                               ; preds = %dec_label_pc_11480, %dec_label_pc_114cc
  %v1_114e8 = phi i32 [ %v0_114bc, %dec_label_pc_11480 ], [ -1, %dec_label_pc_114cc ]
  ret i32 %v1_114e8

; uselistorder directives
  uselistorder i32 %v0_114bc, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_114dc, { 1, 0 }
}

define i32 @function_114ec(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_114ec:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_114ec = load i32, i32* @r7, align 4
  store i32 %v3_114ec, i32* %stack_var_-8, align 4
  %v0_114f8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_114f8, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_114f8, -4095
  br i1 %tmp, label %dec_label_pc_11518, label %dec_label_pc_11508

dec_label_pc_11508:                               ; preds = %dec_label_pc_114ec
  %v0_11508 = call i32 @function_11a08()
  %v0_1150c = load i32, i32* %r7.global-to-local, align 4
  %v1_1150c = sub i32 0, %v0_1150c
  %v2_11510 = inttoptr i32 %v0_11508 to i32*
  store i32 %v1_1150c, i32* %v2_11510, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11518.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11518

dec_label_pc_11518:                               ; preds = %dec_label_pc_114ec, %dec_label_pc_11508
  %v1_1151c = phi i32 [ %v0_114f8, %dec_label_pc_114ec ], [ -1, %dec_label_pc_11508 ]
  %v2_11518 = phi i32 [ %v3_114ec, %dec_label_pc_114ec ], [ %v2_11518.pre, %dec_label_pc_11508 ]
  store i32 %v2_11518, i32* @r7, align 4
  ret i32 %v1_1151c

; uselistorder directives
  uselistorder i32 %v0_114f8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11518, { 1, 0 }
}

define i32 @function_11520(i32 %arg1) local_unnamed_addr {
dec_label_pc_11520:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11520 = load i32, i32* @r7, align 4
  store i32 %v3_11520, i32* %stack_var_-8, align 4
  %v0_1152c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1152c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1152c, -4095
  br i1 %tmp, label %dec_label_pc_1154c, label %dec_label_pc_1153c

dec_label_pc_1153c:                               ; preds = %dec_label_pc_11520
  %v0_1153c = call i32 @function_11a08()
  %v0_11540 = load i32, i32* %r7.global-to-local, align 4
  %v1_11540 = sub i32 0, %v0_11540
  %v2_11544 = inttoptr i32 %v0_1153c to i32*
  store i32 %v1_11540, i32* %v2_11544, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_1154c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1154c

dec_label_pc_1154c:                               ; preds = %dec_label_pc_11520, %dec_label_pc_1153c
  %v1_11550 = phi i32 [ %v0_1152c, %dec_label_pc_11520 ], [ -1, %dec_label_pc_1153c ]
  %v2_1154c = phi i32 [ %v3_11520, %dec_label_pc_11520 ], [ %v2_1154c.pre, %dec_label_pc_1153c ]
  store i32 %v2_1154c, i32* @r7, align 4
  ret i32 %v1_11550

; uselistorder directives
  uselistorder i32 %v0_1152c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1154c, { 1, 0 }
}

define i32 @function_11554(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11554:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_11554 = load i32, i32* @r3, align 4
  store i32 %v9_11554, i32* %stack_var_-4, align 4
  %v2_11560 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_11560, i32* @r3, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11594, label %dec_label_pc_11584

dec_label_pc_11584:                               ; preds = %dec_label_pc_11554
  %v0_11584 = call i32 @function_11a08()
  %v0_11588 = load i32, i32* %r7.global-to-local, align 4
  %v1_11588 = sub i32 0, %v0_11588
  store i32 %v1_11588, i32* @r3, align 4
  %v2_1158c = inttoptr i32 %v0_11584 to i32*
  store i32 %v1_11588, i32* %v2_1158c, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_11594

dec_label_pc_11594:                               ; preds = %dec_label_pc_11554, %dec_label_pc_11584
  %v0_11594 = phi i32 [ %arg1, %dec_label_pc_11554 ], [ -1, %dec_label_pc_11584 ]
  ret i32 %v0_11594

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11594, { 1, 0 }
}

define i32 @function_115a8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_115a8:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_115a8 = load i32, i32* @r7, align 4
  store i32 %v3_115a8, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_115d4, label %dec_label_pc_115c4

dec_label_pc_115c4:                               ; preds = %dec_label_pc_115a8
  %v0_115c4 = call i32 @function_11a08()
  %v0_115c8 = load i32, i32* %r7.global-to-local, align 4
  %v1_115c8 = sub i32 0, %v0_115c8
  %v2_115cc = inttoptr i32 %v0_115c4 to i32*
  store i32 %v1_115c8, i32* %v2_115cc, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_115d8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_115d4

dec_label_pc_115d4:                               ; preds = %dec_label_pc_115a8, %dec_label_pc_115c4
  %v2_115d8 = phi i32 [ %v3_115a8, %dec_label_pc_115a8 ], [ %v2_115d8.pre, %dec_label_pc_115c4 ]
  %v0_115d4 = phi i32 [ %arg1, %dec_label_pc_115a8 ], [ -1, %dec_label_pc_115c4 ]
  store i32 %v2_115d8, i32* @r7, align 4
  ret i32 %v0_115d4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_115d4, { 1, 0 }
}

define i32 @function_115e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_115e0:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_115e0 = load i32, i32* @r7, align 4
  store i32 %v3_115e0, i32* %stack_var_-8, align 4
  %v0_115ec = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_115ec, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_115ec, -4095
  br i1 %tmp, label %dec_label_pc_1160c, label %dec_label_pc_115fc

dec_label_pc_115fc:                               ; preds = %dec_label_pc_115e0
  %v0_115fc = call i32 @function_11a08()
  %v0_11600 = load i32, i32* %r7.global-to-local, align 4
  %v1_11600 = sub i32 0, %v0_11600
  store i32 %v1_11600, i32* @r3, align 4
  %v2_11604 = inttoptr i32 %v0_115fc to i32*
  store i32 %v1_11600, i32* %v2_11604, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_1160c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1160c

dec_label_pc_1160c:                               ; preds = %dec_label_pc_115e0, %dec_label_pc_115fc
  %v1_11610 = phi i32 [ %v0_115ec, %dec_label_pc_115e0 ], [ -1, %dec_label_pc_115fc ]
  %v2_1160c = phi i32 [ %v3_115e0, %dec_label_pc_115e0 ], [ %v2_1160c.pre, %dec_label_pc_115fc ]
  store i32 %v2_1160c, i32* @r7, align 4
  ret i32 %v1_11610

; uselistorder directives
  uselistorder i32 %v0_115ec, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1160c, { 1, 0 }
}

define i32 @function_11614(i32* %arg1) local_unnamed_addr {
dec_label_pc_11614:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_11614 = load i32, i32* @r4, align 4
  store i32 %v3_11614, i32* %stack_var_-24, align 4
  %v9_11614 = load i32, i32* @r6, align 4
  %v12_11614 = load i32, i32* @r7, align 4
  %v15_11614 = load i32, i32* @r8, align 4
  %v18_11614 = load i32, i32* @lr, align 4
  %v2_11618 = load i32, i32* %arg1, align 4
  store i32 %v2_11618, i32* %r4.global-to-local, align 4
  %v3_11620 = icmp eq i32 %v2_11618, -1
  store i32 %tmp, i32* @r7, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_d9dc.75 to i32), i32 71220), i32* @r6, align 4
  br i1 %v3_11620, label %dec_label_pc_11634, label %dec_label_pc_11648

dec_label_pc_11634:                               ; preds = %dec_label_pc_11614
  %v0_11634 = call i32 @function_11a08()
  store i32 9, i32* %r3.global-to-local, align 4
  %v0_1163c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1163c, i32* %r2.global-to-local, align 4
  %v2_11640 = inttoptr i32 %v0_11634 to i32*
  store i32 9, i32* %v2_11640, align 4
  %v0_116e8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_116e8

dec_label_pc_11648:                               ; preds = %dec_label_pc_11614
  store i32 36, i32* %r3.global-to-local, align 4
  %v1_1164c = add i32 %tmp, 24
  store i32 %v1_1164c, i32* %r4.global-to-local, align 4
  store i32 %v1_1164c, i32* %r2.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_11660 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_d9dc.75 to i32), i32 71292) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_11660)
  store i32 -1, i32* @r8, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_11678 = load i32, i32* @r6, align 4
  %v2_11678 = add i32 %v0_11678, 16
  %v3_11678 = inttoptr i32 %v2_11678 to i32*
  %v4_11678 = load i32, i32* %v3_11678, align 4
  call void @__pseudo_branch(i32 %v4_11678)
  %v0_11684 = load i32, i32* @r7, align 4
  %v1_11684 = inttoptr i32 %v0_11684 to i32*
  %v2_11684 = load i32, i32* %v1_11684, align 4
  store i32 %v2_11684, i32* @r4, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_11694 = load i32, i32* @r8, align 4
  store i32 %v0_11694, i32* %v1_11684, align 4
  %v0_11698 = load i32, i32* @r6, align 4
  %v1_11698 = load i32, i32* %r3.global-to-local, align 4
  %v2_11698 = add i32 %v1_11698, %v0_11698
  %v3_11698 = inttoptr i32 %v2_11698 to i32*
  %v4_11698 = load i32, i32* %v3_11698, align 4
  store i32 ptrtoint (i32* @global_var_116a4.343 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_11698)
  %v0_116a4 = load i32, i32* @r7, align 4
  %v1_116a4 = add i32 %v0_116a4, 12
  %v2_116a4 = inttoptr i32 %v1_116a4 to i32*
  %v3_116a4 = load i32, i32* %v2_116a4, align 4
  store i32 %v3_116a4, i32* @r0, align 4
  %v0_116a8 = call i32 @function_130a8()
  %v0_116ac = load i32, i32* @r7, align 4
  store i32 %v0_116ac, i32* @r0, align 4
  %v0_116b0 = call i32 @function_130a8()
  %v0_116b8 = load i32, i32* @r4, align 4
  %tmp11 = icmp ult i32 %v0_116b8, -4095
  br i1 %tmp11, label %dec_label_pc_116e4, label %dec_label_pc_116d4

dec_label_pc_116d4:                               ; preds = %dec_label_pc_11648
  %v0_116d4 = call i32 @function_11a08()
  %v0_116d8 = load i32, i32* @r4, align 4
  %v1_116d8 = sub i32 0, %v0_116d8
  store i32 %v1_116d8, i32* %r3.global-to-local, align 4
  %v2_116dc = inttoptr i32 %v0_116d4 to i32*
  store i32 %v1_116d8, i32* %v2_116dc, align 4
  %v0_116e0 = load i32, i32* @r8, align 4
  br label %dec_label_pc_116e4

dec_label_pc_116e4:                               ; preds = %dec_label_pc_11648, %dec_label_pc_116d4
  %v0_116e4 = phi i32 [ %v0_116b8, %dec_label_pc_11648 ], [ %v0_116e0, %dec_label_pc_116d4 ]
  store i32 %v0_116e4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_116e8

dec_label_pc_116e8:                               ; preds = %dec_label_pc_11634, %dec_label_pc_116e4
  %v0_116e8 = phi i32 [ %v0_116e8.pre, %dec_label_pc_11634 ], [ %v0_116e4, %dec_label_pc_116e4 ]
  %v2_116f0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_116f0, i32* @r4, align 4
  store i32 %v9_11614, i32* @r6, align 4
  store i32 %v12_11614, i32* @r7, align 4
  store i32 %v15_11614, i32* @r8, align 4
  store i32 %v18_11614, i32* @lr, align 4
  ret i32 %v0_116e8

; uselistorder directives
  uselistorder i32 %v0_116b8, { 1, 0 }
  uselistorder label %dec_label_pc_116e8, { 1, 0 }
  uselistorder label %dec_label_pc_116e4, { 1, 0 }
}

define i32 @function_116fc(i32 %arg1) local_unnamed_addr {
dec_label_pc_116fc:
  %v0_116fc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_116fc, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_116fc
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_116fc, %bb
  %v10_11708 = phi i32 [ %arg1, %dec_label_pc_116fc ], [ 0, %bb ]
  ret i32 %v10_11708

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_1170c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1170c:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v6_1170c = load i32, i32* @r5, align 4
  %v9_1170c = load i32, i32* @r6, align 4
  %v12_1170c = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 48, i32* @r0, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_11720 = call i32 @function_1203c()
  %v2_11728 = icmp eq i32 %v0_11720, 0
  store i32 126992, i32* @r6, align 4
  br i1 %v2_11728, label %bb, label %dec_label_pc_11738

bb:                                               ; preds = %dec_label_pc_1170c
  br label %dec_label_pc_117c4

dec_label_pc_11738:                               ; preds = %dec_label_pc_1170c
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_1173c = load i32, i32* @r4, align 4
  %v2_1173c = icmp ugt i32 %v0_1173c, 511
  %v2_11740 = add i32 %v0_11720, 4
  %v3_11740 = inttoptr i32 %v2_11740 to i32*
  store i32 0, i32* %v3_11740, align 4
  %v0_11744 = load i32, i32* %r3.global-to-local, align 4
  %v2_11744 = add i32 %v0_11720, 16
  %v3_11744 = inttoptr i32 %v2_11744 to i32*
  store i32 %v0_11744, i32* %v3_11744, align 4
  %v0_11748 = load i32, i32* %r3.global-to-local, align 4
  %v2_11748 = add i32 %v0_11720, 8
  %v3_11748 = inttoptr i32 %v2_11748 to i32*
  store i32 %v0_11748, i32* %v3_11748, align 4
  br i1 %v2_1173c, label %.thread, label %bb16

.thread:                                          ; preds = %dec_label_pc_11738
  %v0_117502 = load i32, i32* @r4, align 4
  %v2_117503 = add i32 %v0_11720, 20
  %v3_117504 = inttoptr i32 %v2_117503 to i32*
  store i32 %v0_117502, i32* %v3_117504, align 4
  br label %bb17

bb16:                                             ; preds = %dec_label_pc_11738
  %v1_1174c = load i32, i32* %r3.global-to-local, align 4
  %v2_1174c = add i32 %v1_1174c, 512
  store i32 %v2_1174c, i32* %r3.global-to-local, align 4
  %v0_11750 = load i32, i32* @r4, align 4
  %v2_11750 = add i32 %v0_11720, 20
  %v3_11750 = inttoptr i32 %v2_11750 to i32*
  store i32 %v0_11750, i32* %v3_11750, align 4
  %v1_11754 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v1_11754, i32* %v3_11750, align 4
  br label %bb17

bb17:                                             ; preds = %.thread, %bb16
  store i32 %v0_11720, i32* @r5, align 4
  %v0_1175c = load i32, i32* @r7, align 4
  %v2_1175c = inttoptr i32 %v0_11720 to i32*
  store i32 %v0_1175c, i32* %v2_1175c, align 4
  %v0_11760 = load i32, i32* @r5, align 4
  %v1_11760 = add i32 %v0_11760, 20
  %v2_11760 = inttoptr i32 %v1_11760 to i32*
  %v3_11760 = load i32, i32* %v2_11760, align 4
  store i32 %v3_11760, i32* %r1.global-to-local, align 4
  %v2_11768 = call i32 @function_1295c(i32 1, i32 %v3_11760)
  %v2_1176c = icmp eq i32 %v2_11768, 0
  store i32 %v2_11768, i32* @r4, align 4
  %v1_11774 = load i32, i32* @r5, align 4
  %v2_11774 = add i32 %v1_11774, 12
  %v3_11774 = inttoptr i32 %v2_11774 to i32*
  store i32 %v2_11768, i32* %v3_11774, align 4
  br i1 %v2_1176c, label %dec_label_pc_1177c, label %dec_label_pc_1178c

dec_label_pc_1177c:                               ; preds = %bb17
  %v0_1177c = load i32, i32* @r5, align 4
  store i32 %v0_1177c, i32* @r0, align 4
  %v0_11780 = call i32 @function_130a8()
  %v0_11784 = load i32, i32* @r4, align 4
  br label %dec_label_pc_117c4

dec_label_pc_1178c:                               ; preds = %bb17
  store i32 0, i32* %stack_var_-32, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_117b4 = load i32, i32* @r5, align 4
  %v1_117b4 = add i32 %v0_117b4, 24
  %v1_117b8 = inttoptr i32 %v1_117b4 to i32*
  store i32 0, i32* %v1_117b8, align 4
  %v3_117b8 = add i32 %v0_117b4, 28
  %v4_117b8 = inttoptr i32 %v3_117b8 to i32*
  %v5_117b8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_117b8, i32* %v4_117b8, align 4
  %v6_117b8 = add i32 %v0_117b4, 32
  %v7_117b8 = inttoptr i32 %v6_117b8 to i32*
  %v8_117b8 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_117b8, i32* %v7_117b8, align 4
  %v9_117b8 = add i32 %v0_117b4, 36
  %v10_117b8 = inttoptr i32 %v9_117b8 to i32*
  %v11_117b8 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v11_117b8, i32* %v10_117b8, align 4
  %v12_117b8 = add i32 %v0_117b4, 40
  %v2_117bc = load i32, i32* %stack_var_-32, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_117c0 = inttoptr i32 %v12_117b8 to i32*
  store i32 %v2_117bc, i32* %v1_117c0, align 4
  %v3_117c0 = add i32 %v0_117b4, 44
  %v4_117c0 = inttoptr i32 %v3_117c0 to i32*
  %v5_117c0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_117c0, i32* %v4_117c0, align 4
  %v0_117c4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_117c4

dec_label_pc_117c4:                               ; preds = %bb, %dec_label_pc_1177c, %dec_label_pc_1178c
  %v0_117c4 = phi i32 [ 0, %bb ], [ %v0_11784, %dec_label_pc_1177c ], [ %v0_117c4.pre, %dec_label_pc_1178c ]
  store i32 %v6_1170c, i32* @r5, align 4
  store i32 %v9_1170c, i32* @r6, align 4
  store i32 %v12_1170c, i32* @r7, align 4
  ret i32 %v0_117c4

; uselistorder directives
  uselistorder i32 %v2_11768, { 1, 0, 2 }
  uselistorder i32 %v0_11720, { 2, 1, 6, 0, 5, 3, 4, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 512, { 7, 4, 0, 1, 8, 5, 9, 6, 10, 2, 11, 3, 12 }
  uselistorder label %dec_label_pc_117c4, { 2, 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @function_117dc(i32 %arg1) local_unnamed_addr {
dec_label_pc_117dc:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v6_117dc = load i32, i32* @r7, align 4
  %v2_117e4 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %arg1, i32* @r7, align 4
  %tmp7 = icmp ult i32 %arg1, -4095
  br i1 %tmp7, label %dec_label_pc_1180c, label %dec_label_pc_117fc

dec_label_pc_117fc:                               ; preds = %dec_label_pc_117dc
  %v0_117fc = call i32 @function_11a08()
  %v0_11800 = load i32, i32* @r7, align 4
  %v1_11800 = sub i32 0, %v0_11800
  %v2_11804 = inttoptr i32 %v0_117fc to i32*
  store i32 %v1_11800, i32* %v2_11804, align 4
  br label %dec_label_pc_11830

dec_label_pc_1180c:                               ; preds = %dec_label_pc_117dc
  %v1_1180c = icmp slt i32 %arg1, 0
  br i1 %v1_1180c, label %dec_label_pc_11830, label %dec_label_pc_11814

dec_label_pc_11814:                               ; preds = %dec_label_pc_1180c
  store i32 %v2_117e4, i32* @r1, align 4
  %v0_11818 = call i32 @function_14558()
  %v1_1181c = icmp slt i32 %v0_11818, 0
  br i1 %v1_1181c, label %dec_label_pc_11824, label %dec_label_pc_11838

dec_label_pc_11824:                               ; preds = %dec_label_pc_11814
  br label %dec_label_pc_11830

dec_label_pc_11830:                               ; preds = %dec_label_pc_11824, %dec_label_pc_1180c, %dec_label_pc_117fc
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11874

dec_label_pc_11838:                               ; preds = %dec_label_pc_11814
  %v0_11840 = load i32, i32* @r7, align 4
  %v3_11844 = call i32 @function_11480(i32 %v0_11840, i32 2, i32 1)
  %v0_11848 = load i32, i32* @r7, align 4
  %v2_11850 = call i32 @function_1170c(i32 %v0_11848, i32 %tmp)
  store i32 %v2_11850, i32* %r4.global-to-local, align 4
  %v2_11854 = icmp eq i32 %v2_11850, 0
  br i1 %v2_11854, label %dec_label_pc_1185c, label %dec_label_pc_11874

dec_label_pc_1185c:                               ; preds = %dec_label_pc_11838
  %v0_11868 = call i32 @function_11a08()
  %v2_11870 = inttoptr i32 %v0_11868 to i32*
  store i32 12, i32* %v2_11870, align 4
  %v0_11874.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11874

dec_label_pc_11874:                               ; preds = %dec_label_pc_11838, %dec_label_pc_11830, %dec_label_pc_1185c
  %v0_11874 = phi i32 [ %v2_11850, %dec_label_pc_11838 ], [ 0, %dec_label_pc_11830 ], [ %v0_11874.pre, %dec_label_pc_1185c ]
  store i32 %v6_117dc, i32* @r7, align 4
  ret i32 %v0_11874

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_11874, { 2, 0, 1 }
}

define i32 @function_11884(i32 %arg1) local_unnamed_addr {
dec_label_pc_11884:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v0_11884 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11884, label %bb, label %dec_label_pc_11884._crit_edge

dec_label_pc_11884._crit_edge:                    ; preds = %dec_label_pc_11884
  br label %bb11

bb:                                               ; preds = %dec_label_pc_11884
  br label %bb11

bb11:                                             ; preds = %dec_label_pc_11884._crit_edge, %bb
  %v2_1188c = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_1188c, i32* @r1, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_11898 = call i32 @function_14558()
  store i32 %v0_11898, i32* @r5, align 4
  %v2_1189c = icmp eq i32 %v0_11898, 0
  br i1 %v2_1189c, label %dec_label_pc_118a4, label %dec_label_pc_1190c

dec_label_pc_118a4:                               ; preds = %bb11
  %v1_118a8 = and i32 %tmp5, 61440
  store i32 %v1_118a8, i32* @r3, align 4
  %v7_118ac = icmp eq i32 %v1_118a8, 16384
  br i1 %v7_118ac, label %dec_label_pc_118c4, label %dec_label_pc_118b4

dec_label_pc_118b4:                               ; preds = %dec_label_pc_118a4
  %v0_118b4 = call i32 @function_11a08()
  br label %dec_label_pc_118f0

dec_label_pc_118c4:                               ; preds = %dec_label_pc_118a4
  %v0_118c4 = load i32, i32* @r4, align 4
  %v2_118cc = call i32 @function_11414(i32 %v0_118c4, i32 3)
  %v7_118d0 = icmp eq i32 %v2_118cc, -1
  br i1 %v7_118d0, label %dec_label_pc_1190c, label %dec_label_pc_118d8

dec_label_pc_118d8:                               ; preds = %dec_label_pc_118c4
  %v1_118d8 = urem i32 %v2_118cc, 4
  %v7_118dc = icmp eq i32 %v1_118d8, 1
  br i1 %v7_118dc, label %dec_label_pc_118e4, label %dec_label_pc_118f8

dec_label_pc_118e4:                               ; preds = %dec_label_pc_118d8
  %v0_118e4 = call i32 @function_11a08()
  br label %dec_label_pc_118f0

dec_label_pc_118f0:                               ; preds = %dec_label_pc_118b4, %dec_label_pc_118e4
  %storemerge2 = phi i32 [ %v0_118b4, %dec_label_pc_118b4 ], [ %v0_118e4, %dec_label_pc_118e4 ]
  %storemerge = phi i32 [ 20, %dec_label_pc_118b4 ], [ 22, %dec_label_pc_118e4 ]
  %storemerge1 = load i32, i32* @r5, align 4
  store i32 %storemerge1, i32* %r2.global-to-local, align 4
  %v2_118f0 = inttoptr i32 %storemerge2 to i32*
  store i32 %storemerge, i32* %v2_118f0, align 4
  %v0_11910.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11910

dec_label_pc_118f8:                               ; preds = %dec_label_pc_118d8
  %v0_118f8 = load i32, i32* @r4, align 4
  %v2_11900 = call i32 @function_1170c(i32 %v0_118f8, i32 %tmp)
  store i32 %v2_11900, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11910

dec_label_pc_1190c:                               ; preds = %bb11, %dec_label_pc_118c4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11910

dec_label_pc_11910:                               ; preds = %dec_label_pc_118f8, %dec_label_pc_118f0, %dec_label_pc_1190c
  %v0_11910 = phi i32 [ %v2_11900, %dec_label_pc_118f8 ], [ %v0_11910.pre, %dec_label_pc_118f0 ], [ 0, %dec_label_pc_1190c ]
  ret i32 %v0_11910

; uselistorder directives
  uselistorder i32 %v2_118cc, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 (i32, i32)* @function_1170c, { 1, 0 }
  uselistorder i32 ()* @function_14558, { 1, 0 }
  uselistorder label %dec_label_pc_11910, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1190c, { 1, 0 }
  uselistorder label %dec_label_pc_118f0, { 1, 0 }
  uselistorder label %bb11, { 1, 0 }
}

define i32 @function_11920(i32* %arg1) local_unnamed_addr {
dec_label_pc_11920:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_11920 = load i32, i32* @r4, align 4
  %v6_11920 = load i32, i32* @r5, align 4
  %v9_11920 = load i32, i32* @r6, align 4
  %v12_11920 = load i32, i32* @r7, align 4
  %v15_11920 = load i32, i32* @lr, align 4
  store i32 126992, i32* @r6, align 4
  %v1_11934 = add i32 %tmp, 24
  store i32 %v1_11934, i32* @r4, align 4
  %v4_11938 = load i32, i32* inttoptr (i32 127028 to i32*), align 4
  store i32 %v4_11938, i32* %r1.global-to-local, align 4
  store i32 %v1_11934, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_1194c = load i32, i32* inttoptr (i32 127064 to i32*), align 8
  call void @__pseudo_branch(i32 %v4_1194c)
  %v0_11960 = load i32, i32* @r6, align 4
  %v2_11960 = add i32 %v0_11960, 16
  %v3_11960 = inttoptr i32 %v2_11960 to i32*
  %v4_11960 = load i32, i32* %v3_11960, align 4
  store i32 %v4_11960, i32* @ip, align 4
  store i32 72044, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_11960)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_11970

dec_label_pc_11970:                               ; preds = %dec_label_pc_119a0, %dec_label_pc_11920
  %v0_11970 = load i32, i32* @r5, align 4
  %v1_11970 = add i32 %v0_11970, 4
  %v2_11970 = inttoptr i32 %v1_11970 to i32*
  %v3_11970 = load i32, i32* %v2_11970, align 4
  store i32 %v3_11970, i32* %r2.global-to-local, align 4
  %v4_11970 = add i32 %v0_11970, 8
  %v5_11970 = inttoptr i32 %v4_11970 to i32*
  %v6_11970 = load i32, i32* %v5_11970, align 4
  %tmp10 = icmp ugt i32 %v6_11970, %v3_11970
  br i1 %tmp10, label %dec_label_pc_119a0, label %dec_label_pc_1197c

dec_label_pc_1197c:                               ; preds = %dec_label_pc_11970
  %v1_1197c = inttoptr i32 %v0_11970 to i32*
  %v2_1197c = load i32, i32* %v1_1197c, align 4
  %v1_11980 = add i32 %v0_11970, 12
  %v2_11980 = inttoptr i32 %v1_11980 to i32*
  %v3_11980 = load i32, i32* %v2_11980, align 4
  store i32 %v3_11980, i32* %r1.global-to-local, align 4
  %v1_11984 = add i32 %v0_11970, 20
  %v2_11984 = inttoptr i32 %v1_11984 to i32*
  %v3_11984 = load i32, i32* %v2_11984, align 4
  store i32 %v3_11984, i32* %r2.global-to-local, align 4
  %v4_11988 = call i32 @function_144c4(i32 %v2_1197c, i32 %v3_11980, i32 %v3_11984, i32 %v6_11970)
  %tmp9 = icmp slt i32 %v4_11988, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_11998

.thread:                                          ; preds = %dec_label_pc_1197c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_119cc

dec_label_pc_11998:                               ; preds = %dec_label_pc_1197c
  %v1_11998 = load i32, i32* @r5, align 4
  %v2_11998 = add i32 %v1_11998, 8
  %v3_11998 = inttoptr i32 %v2_11998 to i32*
  store i32 %v4_11988, i32* %v3_11998, align 4
  %v0_1199c = load i32, i32* @r7, align 4
  %v1_1199c = load i32, i32* @r5, align 4
  %v2_1199c = add i32 %v1_1199c, 4
  %v3_1199c = inttoptr i32 %v2_1199c to i32*
  store i32 %v0_1199c, i32* %v3_1199c, align 4
  %v0_119a0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_119a0

dec_label_pc_119a0:                               ; preds = %dec_label_pc_11970, %dec_label_pc_11998
  %v1_119b0 = phi i32 [ %v0_11970, %dec_label_pc_11970 ], [ %v0_119a0.pre, %dec_label_pc_11998 ]
  %v1_119a0 = add i32 %v1_119b0, 4
  %v2_119a0 = inttoptr i32 %v1_119a0 to i32*
  %v3_119a0 = load i32, i32* %v2_119a0, align 4
  store i32 %v3_119a0, i32* %r2.global-to-local, align 4
  %v1_119a4 = add i32 %v1_119b0, 12
  %v2_119a4 = inttoptr i32 %v1_119a4 to i32*
  %v3_119a4 = load i32, i32* %v2_119a4, align 4
  store i32 %v3_119a4, i32* %r1.global-to-local, align 4
  %v2_119a8 = add i32 %v3_119a4, %v3_119a0
  store i32 %v2_119a8, i32* @r4, align 4
  %v1_119ac = add i32 %v2_119a8, 4
  %v2_119ac = inttoptr i32 %v1_119ac to i32*
  %v3_119ac = load i32, i32* %v2_119ac, align 4
  %v2_119b0 = add i32 %v1_119b0, 16
  %v3_119b0 = inttoptr i32 %v2_119b0 to i32*
  store i32 %v3_119ac, i32* %v3_119b0, align 4
  %v0_119b4 = load i32, i32* @r4, align 4
  %v1_119b4 = add i32 %v0_119b4, 8
  %v2_119b4 = inttoptr i32 %v1_119b4 to i16*
  %v3_119b4 = load i16, i16* %v2_119b4, align 2
  %v4_119b4 = zext i16 %v3_119b4 to i32
  %v0_119b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_119b8 = load i32, i32* %r1.global-to-local, align 4
  %v2_119b8 = add i32 %v1_119b8, %v0_119b8
  %v3_119b8 = inttoptr i32 %v2_119b8 to i32*
  %v4_119b8 = load i32, i32* %v3_119b8, align 4
  store i32 %v4_119b8, i32* %r1.global-to-local, align 4
  %v2_119bc = add i32 %v0_119b8, %v4_119b4
  %v2_119c0 = icmp eq i32 %v4_119b8, 0
  %v1_119c4 = load i32, i32* @r5, align 4
  %v2_119c4 = add i32 %v1_119c4, 4
  %v3_119c4 = inttoptr i32 %v2_119c4 to i32*
  store i32 %v2_119bc, i32* %v3_119c4, align 4
  br i1 %v2_119c0, label %dec_label_pc_11970, label %dec_label_pc_119cc

dec_label_pc_119cc:                               ; preds = %dec_label_pc_119a0, %.thread
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_119d8 = load i32, i32* @r6, align 4
  %v2_119d8 = add i32 %v0_119d8, 24
  %v3_119d8 = inttoptr i32 %v2_119d8 to i32*
  %v4_119d8 = load i32, i32* %v3_119d8, align 4
  call void @__pseudo_branch(i32 %v4_119d8)
  %v0_119e4 = load i32, i32* @r4, align 4
  store i32 %v3_11920, i32* @r4, align 4
  store i32 %v6_11920, i32* @r5, align 4
  store i32 %v9_11920, i32* @r6, align 4
  store i32 %v12_11920, i32* @r7, align 4
  store i32 %v15_11920, i32* @lr, align 4
  ret i32 %v0_119e4

; uselistorder directives
  uselistorder i32 %v1_119b0, { 0, 2, 1 }
  uselistorder i32 %v6_11970, { 1, 0 }
  uselistorder i32 %v0_11970, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_119a0, { 1, 0 }
}

define i32 @function_119f8(i32 %arg1) local_unnamed_addr {
dec_label_pc_119f8:
  %v0_119f8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_119f8, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_119f8
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_119f8, %bb
  %v10_11a04 = phi i32 [ %arg1, %dec_label_pc_119f8 ], [ 0, %bb ]
  ret i32 %v10_11a04

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_11a08() local_unnamed_addr {
dec_label_pc_11a08:
  store i32 126992, i32* @r3, align 4
  ret i32 ptrtoint (i32* @global_var_1f2c4.360 to i32)
}

define i32 @function_11a24(i32 %arg1) local_unnamed_addr {
dec_label_pc_11a24:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %v2_11a28 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_11a28, i32* @r0, align 4
  %v1_11a30 = call i32 @function_14934(i32 %v2_11a28)
  %v2_11a34 = load i32, i32* %stack_var_-24, align 4
  %v2_11a38 = add i32 %v2_11a34, %tmp
  %v2_11a40 = mul i32 %v2_11a38, 10000
  %v1_11a44 = and i32 %v2_11a40, 2147483632
  ret i32 %v1_11a44

; uselistorder directives
  uselistorder i32 %v2_11a28, { 1, 0 }
}

define i32 @function_11a54(i32 %arg1) local_unnamed_addr {
dec_label_pc_11a54:
  %v0_11a54 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11a54, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_11a54
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_11a54, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_11a60(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11a60:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r3, align 4
  %v0_11a64 = load i32, i32* @r2, align 4
  %v8_11a64 = icmp eq i32 %v0_11a64, 8
  store i1 %v8_11a64, i1* %cpsr_z.global-to-local, align 1
  %v5_11a68 = icmp slt i32 %v0_11a64, 8
  br i1 %v5_11a68, label %dec_label_pc_11ac8, label %dec_label_pc_11a6c

dec_label_pc_11a6c:                               ; preds = %dec_label_pc_11a60
  %v4_11a6c = mul i32 %arg2, 256
  %v5_11a6c = or i32 %v4_11a6c, %arg2
  %v4_11a70 = mul i32 %v5_11a6c, 65536
  %v5_11a70 = or i32 %v4_11a70, %v5_11a6c
  store i32 %v5_11a70, i32* %r1.global-to-local, align 4
  %v1_11a7457 = urem i32 %tmp, 4
  %v2_11a7458 = icmp eq i32 %v1_11a7457, 0
  store i1 %v2_11a7458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_11a7458, label %dec_label_pc_11a84, label %bb

bb:                                               ; preds = %dec_label_pc_11a6c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_11a6c ]
  %v3_11a7859 = phi i32 [ %v6_11a78, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_11a6c ]
  %v4_11a78 = inttoptr i32 %v3_11a7859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_11a78, align 1
  %v5_11a78 = load i32, i32* @r3, align 4
  %v6_11a78 = add i32 %v5_11a78, 1
  store i32 %v6_11a78, i32* @r3, align 4
  %v0_11a7c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_11a88.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_11a7c.pr, label %dec_label_pc_11a84, label %.thread

.thread:                                          ; preds = %bb
  %v2_11a7c = add i32 %v0_11a88.pr.pre, -1
  store i32 %v2_11a7c, i32* @r2, align 4
  %v1_11a74 = urem i32 %v6_11a78, 4
  %v2_11a74 = icmp eq i32 %v1_11a74, 0
  store i1 %v2_11a74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11a74, label %dec_label_pc_11a84, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_11a78.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_11a78.pre to i8
  br label %bb

dec_label_pc_11a84:                               ; preds = %.thread, %bb, %dec_label_pc_11a6c
  %v0_11a9028 = phi i32 [ %tmp, %dec_label_pc_11a6c ], [ %v6_11a78, %bb ], [ %v6_11a78, %.thread ]
  %v0_11a88.pr = phi i32 [ %v0_11a64, %dec_label_pc_11a6c ], [ %v0_11a88.pr.pre, %bb ], [ %v2_11a7c, %.thread ]
  %v0_11a84 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_11a84, i32* @ip, align 4
  %v8_11a8810 = icmp eq i32 %v0_11a88.pr, 8
  store i1 %v8_11a8810, i1* %cpsr_z.global-to-local, align 1
  %v5_11a8c11 = icmp slt i32 %v0_11a88.pr, 8
  br i1 %v5_11a8c11, label %dec_label_pc_11ac8, label %dec_label_pc_11a90.preheader

dec_label_pc_11a90.preheader:                     ; preds = %dec_label_pc_11a84
  %v1_11a9046 = inttoptr i32 %v0_11a9028 to i32*
  store i32 %v0_11a84, i32* %v1_11a9046, align 4
  %v3_11a9047 = add i32 %v0_11a9028, 4
  %v4_11a9048 = inttoptr i32 %v3_11a9047 to i32*
  %v5_11a9049 = load i32, i32* @ip, align 4
  store i32 %v5_11a9049, i32* %v4_11a9048, align 4
  %v6_11a9050 = add i32 %v0_11a9028, 8
  store i32 %v6_11a9050, i32* @r3, align 4
  %v0_11a9451 = load i32, i32* @r2, align 4
  %v1_11a9452 = add i32 %v0_11a9451, -8
  store i32 %v1_11a9452, i32* %r2.global-to-local, align 4
  %v5_11a9c53 = icmp slt i32 %v1_11a9452, 8
  br i1 %v5_11a9c53, label %dec_label_pc_11a90.dec_label_pc_11ac8.loopexit_crit_edge, label %dec_label_pc_11aa0

dec_label_pc_11aa0:                               ; preds = %dec_label_pc_11a90.preheader, %dec_label_pc_11a88.dec_label_pc_11a90_crit_edge
  %v6_11a9055 = phi i32 [ %v6_11a90, %dec_label_pc_11a88.dec_label_pc_11a90_crit_edge ], [ %v6_11a9050, %dec_label_pc_11a90.preheader ]
  %v0_11a9054 = phi i32 [ %v12_11abc, %dec_label_pc_11a88.dec_label_pc_11a90_crit_edge ], [ %v0_11a9028, %dec_label_pc_11a90.preheader ]
  %v1_11aa0 = inttoptr i32 %v6_11a9055 to i32*
  %v2_11aa0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_11aa0, i32* %v1_11aa0, align 4
  %v3_11aa0 = add i32 %v0_11a9054, 12
  %v4_11aa0 = inttoptr i32 %v3_11aa0 to i32*
  %v5_11aa0 = load i32, i32* @ip, align 4
  store i32 %v5_11aa0, i32* %v4_11aa0, align 4
  %v6_11aa0 = add i32 %v0_11a9054, 16
  store i32 %v6_11aa0, i32* @r3, align 4
  %v0_11aa4 = load i32, i32* %r2.global-to-local, align 4
  %v1_11aa4 = add i32 %v0_11aa4, -8
  store i32 %v1_11aa4, i32* %r2.global-to-local, align 4
  %v5_11aac = icmp slt i32 %v1_11aa4, 8
  br i1 %v5_11aac, label %dec_label_pc_11aa0.dec_label_pc_11ac8.loopexit_crit_edge, label %dec_label_pc_11ab0

dec_label_pc_11ab0:                               ; preds = %dec_label_pc_11aa0
  %v1_11ab0 = inttoptr i32 %v6_11aa0 to i32*
  %v2_11ab0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_11ab0, i32* %v1_11ab0, align 4
  %v3_11ab0 = add i32 %v0_11a9054, 20
  %v4_11ab0 = inttoptr i32 %v3_11ab0 to i32*
  %v5_11ab0 = load i32, i32* @ip, align 4
  store i32 %v5_11ab0, i32* %v4_11ab0, align 4
  %v6_11ab0 = add i32 %v0_11a9054, 24
  store i32 %v6_11ab0, i32* @r3, align 4
  %v0_11ab4 = load i32, i32* %r2.global-to-local, align 4
  %v1_11ab4 = add i32 %v0_11ab4, -8
  store i32 %v1_11ab4, i32* %r2.global-to-local, align 4
  %v5_11abc = icmp slt i32 %v1_11ab4, 8
  br i1 %v5_11abc, label %dec_label_pc_11ab0.dec_label_pc_11ac8.loopexit_crit_edge, label %dec_label_pc_11a88

dec_label_pc_11a88:                               ; preds = %dec_label_pc_11ab0
  %v7_11abc = inttoptr i32 %v6_11ab0 to i32*
  %v8_11abc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_11abc, i32* %v7_11abc, align 4
  %v9_11abc = add i32 %v0_11a9054, 28
  %v10_11abc = inttoptr i32 %v9_11abc to i32*
  %v11_11abc = load i32, i32* @ip, align 4
  store i32 %v11_11abc, i32* %v10_11abc, align 4
  %v12_11abc = add i32 %v0_11a9054, 32
  store i32 %v12_11abc, i32* @r3, align 4
  %v6_11ac0 = load i32, i32* %r2.global-to-local, align 4
  %v7_11ac0 = add i32 %v6_11ac0, -8
  store i32 %v7_11ac0, i32* %r2.global-to-local, align 4
  %v5_11a8c = icmp slt i32 %v7_11ac0, 8
  br i1 %v5_11a8c, label %dec_label_pc_11a88.dec_label_pc_11ac8.loopexit_crit_edge, label %dec_label_pc_11a88.dec_label_pc_11a90_crit_edge

dec_label_pc_11a88.dec_label_pc_11a90_crit_edge:  ; preds = %dec_label_pc_11a88
  %v2_11a90.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_11a90 = inttoptr i32 %v12_11abc to i32*
  store i32 %v2_11a90.pre, i32* %v1_11a90, align 4
  %v3_11a90 = add i32 %v0_11a9054, 36
  %v4_11a90 = inttoptr i32 %v3_11a90 to i32*
  %v5_11a90 = load i32, i32* @ip, align 4
  store i32 %v5_11a90, i32* %v4_11a90, align 4
  %v6_11a90 = add i32 %v0_11a9054, 40
  store i32 %v6_11a90, i32* @r3, align 4
  %v0_11a94 = load i32, i32* %r2.global-to-local, align 4
  %v1_11a94 = add i32 %v0_11a94, -8
  store i32 %v1_11a94, i32* %r2.global-to-local, align 4
  %v5_11a9c = icmp slt i32 %v1_11a94, 8
  br i1 %v5_11a9c, label %dec_label_pc_11a90.dec_label_pc_11ac8.loopexit_crit_edge, label %dec_label_pc_11aa0

dec_label_pc_11a88.dec_label_pc_11ac8.loopexit_crit_edge: ; preds = %dec_label_pc_11a88
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11ac8

dec_label_pc_11a90.dec_label_pc_11ac8.loopexit_crit_edge: ; preds = %dec_label_pc_11a88.dec_label_pc_11a90_crit_edge, %dec_label_pc_11a90.preheader
  %v1_11a94.lcssa = phi i32 [ %v1_11a9452, %dec_label_pc_11a90.preheader ], [ %v1_11a94, %dec_label_pc_11a88.dec_label_pc_11a90_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11ac8

dec_label_pc_11aa0.dec_label_pc_11ac8.loopexit_crit_edge: ; preds = %dec_label_pc_11aa0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11ac8

dec_label_pc_11ab0.dec_label_pc_11ac8.loopexit_crit_edge: ; preds = %dec_label_pc_11ab0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11ac8

dec_label_pc_11ac8:                               ; preds = %dec_label_pc_11a84, %dec_label_pc_11a88.dec_label_pc_11ac8.loopexit_crit_edge, %dec_label_pc_11a90.dec_label_pc_11ac8.loopexit_crit_edge, %dec_label_pc_11aa0.dec_label_pc_11ac8.loopexit_crit_edge, %dec_label_pc_11ab0.dec_label_pc_11ac8.loopexit_crit_edge, %dec_label_pc_11a60
  %v0_11ad0 = phi i32 [ %v0_11a64, %dec_label_pc_11a60 ], [ %v1_11ab4, %dec_label_pc_11ab0.dec_label_pc_11ac8.loopexit_crit_edge ], [ %v1_11aa4, %dec_label_pc_11aa0.dec_label_pc_11ac8.loopexit_crit_edge ], [ %v1_11a94.lcssa, %dec_label_pc_11a90.dec_label_pc_11ac8.loopexit_crit_edge ], [ %v7_11ac0, %dec_label_pc_11a88.dec_label_pc_11ac8.loopexit_crit_edge ], [ %v0_11a88.pr, %dec_label_pc_11a84 ]
  %v2_11ac8 = icmp eq i32 %v0_11ad0, 0
  store i1 %v2_11ac8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11ac8, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_11ac8
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_11ac8
  %v1_11ad0 = sub i32 7, %v0_11ad0
  store i32 %v1_11ad0, i32* %r2.global-to-local, align 4
  %v3_11ad4 = mul i32 %v1_11ad0, 4
  %v4_11ad4 = add i32 %v3_11ad4, ptrtoint (i32* @global_var_11adc.362 to i32)
  call void @__pseudo_branch(i32 %v4_11ad4)
  %v0_11adc = load i32, i32* %r1.global-to-local, align 4
  %v1_11adc = trunc i32 %v0_11adc to i8
  %v2_11adc = load i32, i32* @r3, align 4
  %v3_11adc = inttoptr i32 %v2_11adc to i8*
  store i8 %v1_11adc, i8* %v3_11adc, align 1
  %v4_11adc = load i32, i32* @r3, align 4
  %v5_11adc = add i32 %v4_11adc, 1
  store i32 %v5_11adc, i32* %r3.global-to-local, align 4
  %v0_11ae0 = load i32, i32* %r1.global-to-local, align 4
  %v1_11ae0 = trunc i32 %v0_11ae0 to i8
  %v3_11ae0 = inttoptr i32 %v5_11adc to i8*
  store i8 %v1_11ae0, i8* %v3_11ae0, align 1
  %v4_11ae0 = load i32, i32* %r3.global-to-local, align 4
  %v5_11ae0 = add i32 %v4_11ae0, 1
  store i32 %v5_11ae0, i32* %r3.global-to-local, align 4
  %v0_11ae4 = load i32, i32* %r1.global-to-local, align 4
  %v1_11ae4 = trunc i32 %v0_11ae4 to i8
  %v3_11ae4 = inttoptr i32 %v5_11ae0 to i8*
  store i8 %v1_11ae4, i8* %v3_11ae4, align 1
  %v4_11ae4 = load i32, i32* %r3.global-to-local, align 4
  %v5_11ae4 = add i32 %v4_11ae4, 1
  store i32 %v5_11ae4, i32* %r3.global-to-local, align 4
  %v0_11ae8 = load i32, i32* %r1.global-to-local, align 4
  %v1_11ae8 = trunc i32 %v0_11ae8 to i8
  %v3_11ae8 = inttoptr i32 %v5_11ae4 to i8*
  store i8 %v1_11ae8, i8* %v3_11ae8, align 1
  %v4_11ae8 = load i32, i32* %r3.global-to-local, align 4
  %v5_11ae8 = add i32 %v4_11ae8, 1
  store i32 %v5_11ae8, i32* %r3.global-to-local, align 4
  %v0_11aec = load i32, i32* %r1.global-to-local, align 4
  %v1_11aec = trunc i32 %v0_11aec to i8
  %v3_11aec = inttoptr i32 %v5_11ae8 to i8*
  store i8 %v1_11aec, i8* %v3_11aec, align 1
  %v4_11aec = load i32, i32* %r3.global-to-local, align 4
  %v5_11aec = add i32 %v4_11aec, 1
  store i32 %v5_11aec, i32* %r3.global-to-local, align 4
  %v0_11af0 = load i32, i32* %r1.global-to-local, align 4
  %v1_11af0 = trunc i32 %v0_11af0 to i8
  %v3_11af0 = inttoptr i32 %v5_11aec to i8*
  store i8 %v1_11af0, i8* %v3_11af0, align 1
  %v4_11af0 = load i32, i32* %r3.global-to-local, align 4
  %v5_11af0 = add i32 %v4_11af0, 1
  store i32 %v5_11af0, i32* %r3.global-to-local, align 4
  %v0_11af4 = load i32, i32* %r1.global-to-local, align 4
  %v1_11af4 = trunc i32 %v0_11af4 to i8
  %v3_11af4 = inttoptr i32 %v5_11af0 to i8*
  store i8 %v1_11af4, i8* %v3_11af4, align 1
  %v4_11af4 = load i32, i32* %r3.global-to-local, align 4
  %v5_11af4 = add i32 %v4_11af4, 1
  store i32 %v5_11af4, i32* @r3, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_11a90, { 1, 0 }
  uselistorder i32 %v12_11abc, { 1, 2, 0 }
  uselistorder i32 %v0_11a9054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_11a88.pr, { 0, 2, 1 }
  uselistorder i32 %v6_11a78, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_11a6c, { 1, 0 }
  uselistorder i32 %v0_11a64, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 1, 10, 11, 12, 13, 9, 14, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 3, 2, 1, 4, 5, 8, 7, 0, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_11ac8, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_11aa0, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_11b00(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11b00:
  %v0_11b00 = call i32 @function_15bb0()
  ret i32 %v0_11b00
}

define i32 @function_11b10() local_unnamed_addr {
dec_label_pc_11b10:
  %v0_11b10 = call i32 @function_15bb0()
  ret i32 %v0_11b10
}

define i32 @function_11b20(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11b20:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %v0_11b301 = load i32, i32* @r1, align 4
  %v1_11b302 = inttoptr i32 %v0_11b301 to i8*
  %v2_11b303 = load i8, i8* %v1_11b302, align 1
  %v2_11b345 = icmp eq i8 %v2_11b303, 0
  store i1 %v2_11b345, i1* %cpsr_z.global-to-local, align 1
  store i8 %v2_11b303, i8* %arg1, align 1
  br i1 %v2_11b345, label %dec_label_pc_11b40, label %dec_label_pc_11b28

dec_label_pc_11b28:                               ; preds = %dec_label_pc_11b20, %dec_label_pc_11b28
  %v0_11b28 = load i32, i32* @r1, align 4
  %v1_11b28 = add i32 %v0_11b28, 1
  store i32 %v1_11b28, i32* @r1, align 4
  %v0_11b2c = load i32, i32* %r2.global-to-local, align 4
  %v1_11b2c = add i32 %v0_11b2c, 1
  store i32 %v1_11b2c, i32* %r2.global-to-local, align 4
  %v1_11b30 = inttoptr i32 %v1_11b28 to i8*
  %v2_11b30 = load i8, i8* %v1_11b30, align 1
  %v2_11b34 = icmp eq i8 %v2_11b30, 0
  store i1 %v2_11b34, i1* %cpsr_z.global-to-local, align 1
  %v3_11b38 = inttoptr i32 %v1_11b2c to i8*
  store i8 %v2_11b30, i8* %v3_11b38, align 1
  %v0_11b3c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11b3c, label %dec_label_pc_11b40, label %dec_label_pc_11b28

dec_label_pc_11b40:                               ; preds = %dec_label_pc_11b28, %dec_label_pc_11b20
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11b28, { 1, 0 }
}

define i32 @function_11b44(i32 %arg1) local_unnamed_addr {
dec_label_pc_11b44:
  %stack_var_-12 = alloca i32, align 4
  %v2_11b4c = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_11b4c, i32* @r1, align 4
  %v0_11b50 = call i32 @function_1641c()
  %v2_11b54 = icmp eq i32 %v0_11b50, 0
  %v4_11b58 = load i32, i32* %stack_var_-12, align 4
  %storemerge = select i1 %v2_11b54, i32 -1, i32 %v4_11b58
  ret i32 %storemerge
}

define i32 @function_11b6c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11b6c:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11b6c = load i32, i32* @r7, align 4
  store i32 %v3_11b6c, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11b94, label %dec_label_pc_11b84

dec_label_pc_11b84:                               ; preds = %dec_label_pc_11b6c
  %v0_11b84 = call i32 @function_11a08()
  %v0_11b88 = load i32, i32* %r7.global-to-local, align 4
  %v1_11b88 = sub i32 0, %v0_11b88
  %v2_11b8c = inttoptr i32 %v0_11b84 to i32*
  store i32 %v1_11b88, i32* %v2_11b8c, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_11b98.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11b94

dec_label_pc_11b94:                               ; preds = %dec_label_pc_11b6c, %dec_label_pc_11b84
  %v2_11b98 = phi i32 [ %v3_11b6c, %dec_label_pc_11b6c ], [ %v2_11b98.pre, %dec_label_pc_11b84 ]
  %v0_11b94 = phi i32 [ %arg1, %dec_label_pc_11b6c ], [ -1, %dec_label_pc_11b84 ]
  store i32 %v2_11b98, i32* @r7, align 4
  ret i32 %v0_11b94

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11b94, { 1, 0 }
}

define i32 @function_11ba4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11ba4:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11ba4 = load i32, i32* @r7, align 4
  store i32 %v3_11ba4, i32* %stack_var_-8, align 4
  %v0_11bb0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11bb0, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11bb0, -4095
  br i1 %tmp, label %dec_label_pc_11bd0, label %dec_label_pc_11bc0

dec_label_pc_11bc0:                               ; preds = %dec_label_pc_11ba4
  %v0_11bc0 = call i32 @function_11a08()
  %v0_11bc4 = load i32, i32* %r7.global-to-local, align 4
  %v1_11bc4 = sub i32 0, %v0_11bc4
  %v2_11bc8 = inttoptr i32 %v0_11bc0 to i32*
  store i32 %v1_11bc4, i32* %v2_11bc8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11bd0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11bd0

dec_label_pc_11bd0:                               ; preds = %dec_label_pc_11ba4, %dec_label_pc_11bc0
  %v1_11bd4 = phi i32 [ %v0_11bb0, %dec_label_pc_11ba4 ], [ -1, %dec_label_pc_11bc0 ]
  %v2_11bd0 = phi i32 [ %v3_11ba4, %dec_label_pc_11ba4 ], [ %v2_11bd0.pre, %dec_label_pc_11bc0 ]
  store i32 %v2_11bd0, i32* @r7, align 4
  ret i32 %v1_11bd4

; uselistorder directives
  uselistorder i32 %v0_11bb0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11bd0, { 1, 0 }
}

define i32 @function_11bdc(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11bdc:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11bdc = load i32, i32* @r7, align 4
  store i32 %v3_11bdc, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11c04, label %dec_label_pc_11bf4

dec_label_pc_11bf4:                               ; preds = %dec_label_pc_11bdc
  %v0_11bf4 = call i32 @function_11a08()
  %v0_11bf8 = load i32, i32* %r7.global-to-local, align 4
  %v1_11bf8 = sub i32 0, %v0_11bf8
  store i32 %v1_11bf8, i32* @r3, align 4
  %v2_11bfc = inttoptr i32 %v0_11bf4 to i32*
  store i32 %v1_11bf8, i32* %v2_11bfc, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_11c08.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11c04

dec_label_pc_11c04:                               ; preds = %dec_label_pc_11bdc, %dec_label_pc_11bf4
  %v2_11c08 = phi i32 [ %v3_11bdc, %dec_label_pc_11bdc ], [ %v2_11c08.pre, %dec_label_pc_11bf4 ]
  %v0_11c04 = phi i32 [ %arg1, %dec_label_pc_11bdc ], [ -1, %dec_label_pc_11bf4 ]
  store i32 %v2_11c08, i32* @r7, align 4
  ret i32 %v0_11c04

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11c04, { 1, 0 }
}

define i32 @function_11c14(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11c14:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11c14 = load i32, i32* @r7, align 4
  store i32 %v3_11c14, i32* %stack_var_-8, align 4
  %v0_11c20 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11c20, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11c20, -4095
  br i1 %tmp, label %dec_label_pc_11c40, label %dec_label_pc_11c30

dec_label_pc_11c30:                               ; preds = %dec_label_pc_11c14
  %v0_11c30 = call i32 @function_11a08()
  %v0_11c34 = load i32, i32* %r7.global-to-local, align 4
  %v1_11c34 = sub i32 0, %v0_11c34
  %v2_11c38 = inttoptr i32 %v0_11c30 to i32*
  store i32 %v1_11c34, i32* %v2_11c38, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11c40.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11c40

dec_label_pc_11c40:                               ; preds = %dec_label_pc_11c14, %dec_label_pc_11c30
  %v1_11c44 = phi i32 [ %v0_11c20, %dec_label_pc_11c14 ], [ -1, %dec_label_pc_11c30 ]
  %v2_11c40 = phi i32 [ %v3_11c14, %dec_label_pc_11c14 ], [ %v2_11c40.pre, %dec_label_pc_11c30 ]
  store i32 %v2_11c40, i32* @r7, align 4
  ret i32 %v1_11c44

; uselistorder directives
  uselistorder i32 %v0_11c20, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11c40, { 1, 0 }
}

define i32 @function_11c4c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11c4c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11c80, label %dec_label_pc_11c70

dec_label_pc_11c70:                               ; preds = %dec_label_pc_11c4c
  %v0_11c70 = call i32 @function_11a08()
  %v0_11c74 = load i32, i32* %r4.global-to-local, align 4
  %v1_11c74 = sub i32 0, %v0_11c74
  %v2_11c78 = inttoptr i32 %v0_11c70 to i32*
  store i32 %v1_11c74, i32* %v2_11c78, align 4
  br label %dec_label_pc_11c80

dec_label_pc_11c80:                               ; preds = %dec_label_pc_11c4c, %dec_label_pc_11c70
  %v1_11c88 = phi i32 [ %arg1, %dec_label_pc_11c4c ], [ -1, %dec_label_pc_11c70 ]
  ret i32 %v1_11c88

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11c80, { 1, 0 }
}

define i32 @function_11c90(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11c90:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11c90 = load i32, i32* @r7, align 4
  store i32 %v3_11c90, i32* %stack_var_-8, align 4
  %v0_11c9c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11c9c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11c9c, -4095
  br i1 %tmp, label %dec_label_pc_11cbc, label %dec_label_pc_11cac

dec_label_pc_11cac:                               ; preds = %dec_label_pc_11c90
  %v0_11cac = call i32 @function_11a08()
  %v0_11cb0 = load i32, i32* %r7.global-to-local, align 4
  %v1_11cb0 = sub i32 0, %v0_11cb0
  %v2_11cb4 = inttoptr i32 %v0_11cac to i32*
  store i32 %v1_11cb0, i32* %v2_11cb4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11cbc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11cbc

dec_label_pc_11cbc:                               ; preds = %dec_label_pc_11c90, %dec_label_pc_11cac
  %v1_11cc0 = phi i32 [ %v0_11c9c, %dec_label_pc_11c90 ], [ -1, %dec_label_pc_11cac ]
  %v2_11cbc = phi i32 [ %v3_11c90, %dec_label_pc_11c90 ], [ %v2_11cbc.pre, %dec_label_pc_11cac ]
  store i32 %v2_11cbc, i32* @r7, align 4
  ret i32 %v1_11cc0

; uselistorder directives
  uselistorder i32 %v0_11c9c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11cbc, { 1, 0 }
}

define i32 @function_11cc4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11cc4:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11cc4 = load i32, i32* @r7, align 4
  store i32 %v3_11cc4, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11cec, label %dec_label_pc_11cdc

dec_label_pc_11cdc:                               ; preds = %dec_label_pc_11cc4
  %v0_11cdc = call i32 @function_11a08()
  %v0_11ce0 = load i32, i32* %r7.global-to-local, align 4
  %v1_11ce0 = sub i32 0, %v0_11ce0
  %v2_11ce4 = inttoptr i32 %v0_11cdc to i32*
  store i32 %v1_11ce0, i32* %v2_11ce4, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_11cf0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11cec

dec_label_pc_11cec:                               ; preds = %dec_label_pc_11cc4, %dec_label_pc_11cdc
  %v2_11cf0 = phi i32 [ %v3_11cc4, %dec_label_pc_11cc4 ], [ %v2_11cf0.pre, %dec_label_pc_11cdc ]
  %v0_11cec = phi i32 [ %arg1, %dec_label_pc_11cc4 ], [ -1, %dec_label_pc_11cdc ]
  store i32 %v2_11cf0, i32* @r7, align 4
  ret i32 %v0_11cec

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11cec, { 1, 0 }
}

define i32 @function_11cfc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_11cfc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11cfc = load i32, i32* @r4, align 4
  store i32 %v3_11cfc, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11d2c, label %dec_label_pc_11d1c

dec_label_pc_11d1c:                               ; preds = %dec_label_pc_11cfc
  %v0_11d1c = call i32 @function_11a08()
  %v0_11d20 = load i32, i32* %r4.global-to-local, align 4
  %v1_11d20 = sub i32 0, %v0_11d20
  %v2_11d24 = inttoptr i32 %v0_11d1c to i32*
  store i32 %v1_11d20, i32* %v2_11d24, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_11d30.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_11d2c

dec_label_pc_11d2c:                               ; preds = %dec_label_pc_11cfc, %dec_label_pc_11d1c
  %v2_11d30 = phi i32 [ %v3_11cfc, %dec_label_pc_11cfc ], [ %v2_11d30.pre, %dec_label_pc_11d1c ]
  %v0_11d2c = phi i32 [ %arg1, %dec_label_pc_11cfc ], [ -1, %dec_label_pc_11d1c ]
  store i32 %v2_11d30, i32* @r4, align 4
  ret i32 %v0_11d2c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11d2c, { 1, 0 }
}

define i32 @function_11d38(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11d38:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11d38 = load i32, i32* @r7, align 4
  store i32 %v3_11d38, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11d60, label %dec_label_pc_11d50

dec_label_pc_11d50:                               ; preds = %dec_label_pc_11d38
  %v0_11d50 = call i32 @function_11a08()
  %v0_11d54 = load i32, i32* %r7.global-to-local, align 4
  %v1_11d54 = sub i32 0, %v0_11d54
  store i32 %v1_11d54, i32* @r3, align 4
  %v2_11d58 = inttoptr i32 %v0_11d50 to i32*
  store i32 %v1_11d54, i32* %v2_11d58, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_11d64.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11d60

dec_label_pc_11d60:                               ; preds = %dec_label_pc_11d38, %dec_label_pc_11d50
  %v2_11d64 = phi i32 [ %v3_11d38, %dec_label_pc_11d38 ], [ %v2_11d64.pre, %dec_label_pc_11d50 ]
  %v0_11d60 = phi i32 [ %arg1, %dec_label_pc_11d38 ], [ -1, %dec_label_pc_11d50 ]
  store i32 %v2_11d64, i32* @r7, align 4
  ret i32 %v0_11d60

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11d60, { 1, 0 }
}

define i32 @function_11d70(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_11d70:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11d70 = load i32, i32* @r4, align 4
  store i32 %v3_11d70, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11da0, label %dec_label_pc_11d90

dec_label_pc_11d90:                               ; preds = %dec_label_pc_11d70
  %v0_11d90 = call i32 @function_11a08()
  %v0_11d94 = load i32, i32* %r4.global-to-local, align 4
  %v1_11d94 = sub i32 0, %v0_11d94
  %v2_11d98 = inttoptr i32 %v0_11d90 to i32*
  store i32 %v1_11d94, i32* %v2_11d98, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_11da4.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_11da0

dec_label_pc_11da0:                               ; preds = %dec_label_pc_11d70, %dec_label_pc_11d90
  %v2_11da4 = phi i32 [ %v3_11d70, %dec_label_pc_11d70 ], [ %v2_11da4.pre, %dec_label_pc_11d90 ]
  %v0_11da0 = phi i32 [ %arg1, %dec_label_pc_11d70 ], [ -1, %dec_label_pc_11d90 ]
  store i32 %v2_11da4, i32* @r4, align 4
  ret i32 %v0_11da0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11da0, { 1, 0 }
}

define i32 @function_11db0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11db0:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11de4, label %dec_label_pc_11dd4

dec_label_pc_11dd4:                               ; preds = %dec_label_pc_11db0
  %v0_11dd4 = call i32 @function_11a08()
  %v0_11dd8 = load i32, i32* %r4.global-to-local, align 4
  %v1_11dd8 = sub i32 0, %v0_11dd8
  store i32 %v1_11dd8, i32* @r3, align 4
  %v2_11ddc = inttoptr i32 %v0_11dd4 to i32*
  store i32 %v1_11dd8, i32* %v2_11ddc, align 4
  br label %dec_label_pc_11de4

dec_label_pc_11de4:                               ; preds = %dec_label_pc_11db0, %dec_label_pc_11dd4
  %v1_11dec = phi i32 [ %arg1, %dec_label_pc_11db0 ], [ -1, %dec_label_pc_11dd4 ]
  ret i32 %v1_11dec

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11de4, { 1, 0 }
}

define i32 @function_11df4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11df4:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11df4 = load i32, i32* @r7, align 4
  store i32 %v3_11df4, i32* %stack_var_-8, align 4
  %v0_11e00 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11e00, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11e00, -4095
  br i1 %tmp, label %dec_label_pc_11e20, label %dec_label_pc_11e10

dec_label_pc_11e10:                               ; preds = %dec_label_pc_11df4
  %v0_11e10 = call i32 @function_11a08()
  %v0_11e14 = load i32, i32* %r7.global-to-local, align 4
  %v1_11e14 = sub i32 0, %v0_11e14
  store i32 %v1_11e14, i32* @r3, align 4
  %v2_11e18 = inttoptr i32 %v0_11e10 to i32*
  store i32 %v1_11e14, i32* %v2_11e18, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11e20.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11e20

dec_label_pc_11e20:                               ; preds = %dec_label_pc_11df4, %dec_label_pc_11e10
  %v1_11e24 = phi i32 [ %v0_11e00, %dec_label_pc_11df4 ], [ -1, %dec_label_pc_11e10 ]
  %v2_11e20 = phi i32 [ %v3_11df4, %dec_label_pc_11df4 ], [ %v2_11e20.pre, %dec_label_pc_11e10 ]
  store i32 %v2_11e20, i32* @r7, align 4
  ret i32 %v1_11e24

; uselistorder directives
  uselistorder i32 %v0_11e00, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11e20, { 1, 0 }
}

define i32 @function_11e2c(i32 %arg1) local_unnamed_addr {
dec_label_pc_11e2c:
  store i32 %arg1, i32* @r0, align 4
  %v3_11e2c = load i32, i32* @r4, align 4
  %v0_11e34 = call i32 @function_1124c()
  %v2_11e3c = call i32 @function_113ac(i32 %v0_11e34, i32 %arg1)
  store i32 %v3_11e2c, i32* @r4, align 4
  ret i32 %v2_11e3c

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_113ac, { 0, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 ()* @function_1124c, { 0, 3, 2, 1 }
}

define i32 @function_11e48(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11e48:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %tmp4 = icmp slt i32 %arg1, 1
  br i1 %tmp4, label %dec_label_pc_11e60, label %dec_label_pc_11e58

dec_label_pc_11e58:                               ; preds = %dec_label_pc_11e48
  %v7_11e5c = icmp slt i32 %arg1, 65
  br i1 %v7_11e5c, label %dec_label_pc_11e74, label %dec_label_pc_11e60

dec_label_pc_11e60:                               ; preds = %dec_label_pc_11e58, %dec_label_pc_11e48
  %v0_11e60 = call i32 @function_11a08()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_11e6c = inttoptr i32 %v0_11e60 to i32*
  store i32 22, i32* %v2_11e6c, align 4
  %v0_11e7c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11e7c

dec_label_pc_11e74:                               ; preds = %dec_label_pc_11e58
  %v0_11e74 = call i32 @function_11f7c()
  store i32 %v0_11e74, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11e7c

dec_label_pc_11e7c:                               ; preds = %dec_label_pc_11e60, %dec_label_pc_11e74
  %v0_11e7c = phi i32 [ %v0_11e7c.pre, %dec_label_pc_11e60 ], [ %v0_11e74, %dec_label_pc_11e74 ]
  ret i32 %v0_11e7c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11e7c, { 1, 0 }
}

define i32 @function_11e8c(i32* %arg1) local_unnamed_addr {
dec_label_pc_11e8c:
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v2_11e94 = add i32 %tmp, 4
  %v3_11e94 = inttoptr i32 %v2_11e94 to i32*
  store i32 0, i32* %v3_11e94, align 4
  %v1_11e98 = load i32, i32* %r3.global-to-local, align 4
  %v2_11e98 = inttoptr i32 %v1_11e98 to i32*
  store i32 0, i32* %v2_11e98, align 4
  ret i32 0
}

define i32 @function_11ea0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11ea0:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11ea0 = load i32, i32* @r4, align 4
  store i32 %v3_11ea0, i32* %stack_var_-16, align 4
  %v6_11ea0 = load i32, i32* @r5, align 4
  %v9_11ea0 = load i32, i32* @r6, align 4
  %v7_11ea8 = icmp eq i32 %arg2, -1
  br i1 %v7_11ea8, label %.thread4, label %bb

.thread4:                                         ; preds = %dec_label_pc_11ea0
  br label %.thread16

bb:                                               ; preds = %dec_label_pc_11ea0
  %v2_11eb0 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %arg1, i32* @r5, align 4
  %tmp28 = icmp slt i32 %arg1, 1
  br i1 %tmp28, label %.thread16, label %dec_label_pc_11ecc

.thread16:                                        ; preds = %bb, %.thread4
  store i32 1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11ed4

dec_label_pc_11ecc:                               ; preds = %bb
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_11ed0 = icmp slt i32 %arg1, 65
  br i1 %v7_11ed0, label %dec_label_pc_11ee8, label %dec_label_pc_11ed4

dec_label_pc_11ed4:                               ; preds = %.thread16, %dec_label_pc_11ecc
  %v0_11ed4 = call i32 @function_11a08()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_11ee0 = inttoptr i32 %v0_11ed4 to i32*
  store i32 22, i32* %v2_11ee0, align 4
  %v0_11f40.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb33

dec_label_pc_11ee8:                               ; preds = %dec_label_pc_11ecc
  %v2_11ee8 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_11ee8, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_11ef0 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_11ef0, i32* @r0, align 4
  store i32 %arg2, i32* %stack_var_-36, align 4
  store i32 0, i32* %stack_var_-24, align 4
  %v0_11f00 = call i32 @function_11f7c()
  %v0_11f08 = load i32, i32* @r5, align 4
  %v2_11f10 = call i32 @function_11f58(i32 ptrtoint (i32* @global_var_2142c.375 to i32), i32 %v0_11f08)
  store i32 %v2_11eb0, i32* %r2.global-to-local, align 4
  %v0_11f28 = load i32, i32* @r5, align 4
  %v3_11f30 = call i32 @function_1438c(i32 %v0_11f28, i32 %v2_11ee8, i32 %v2_11eb0)
  %v1_11f34 = icmp slt i32 %v3_11f30, 0
  br i1 %v1_11f34, label %bb32, label %bb31

bb31:                                             ; preds = %dec_label_pc_11ee8
  %v5_11f38 = load i32, i32* %stack_var_-56, align 4
  store i32 %v5_11f38, i32* %r2.global-to-local, align 4
  br label %bb33

bb32:                                             ; preds = %dec_label_pc_11ee8
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %dec_label_pc_11ed4, %bb32
  %v0_11f40 = phi i32 [ %v5_11f38, %bb31 ], [ %v0_11f40.pre, %dec_label_pc_11ed4 ], [ -1, %bb32 ]
  %v2_11f48 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_11f48, i32* @r4, align 4
  store i32 %v6_11ea0, i32* @r5, align 4
  store i32 %v9_11ea0, i32* @r6, align 4
  ret i32 %v0_11f40

; uselistorder directives
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 ()* @function_11f7c, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 2, 3, 0, 1 }
  uselistorder label %bb33, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11ed4, { 1, 0 }
}

define i32 @function_11f58(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11f58:
  %v1_11f58 = add i32 %arg2, -1
  %v3_11f5c = udiv i32 %v1_11f58, 32
  %v4_11f60 = mul nuw nsw i32 %v3_11f5c, 4
  %v5_11f60 = add i32 %v4_11f60, %arg1
  %v6_11f60 = inttoptr i32 %v5_11f60 to i32*
  %v7_11f60 = load i32, i32* %v6_11f60, align 4
  %v1_11f64 = urem i32 %v1_11f58, 32
  %v7_11f6c = shl i32 1, %v1_11f64
  %v8_11f6c = and i32 %v7_11f60, %v7_11f6c
  %v10_11f6c = icmp ne i32 %v8_11f6c, 0
  %. = zext i1 %v10_11f6c to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_11f58, { 1, 0 }
}

define i32 @function_11f7c() local_unnamed_addr {
dec_label_pc_11f7c:
  %v0_11f7c = load i32, i32* @r1, align 4
  %v1_11f7c = add i32 %v0_11f7c, -1
  %v3_11f80 = udiv i32 %v1_11f7c, 32
  %v0_11f84 = load i32, i32* @r0, align 4
  %v4_11f84 = mul nuw nsw i32 %v3_11f80, 4
  %v5_11f84 = add i32 %v0_11f84, %v4_11f84
  %v6_11f84 = inttoptr i32 %v5_11f84 to i32*
  %v7_11f84 = load i32, i32* %v6_11f84, align 4
  %v1_11f88 = urem i32 %v1_11f7c, 32
  %v7_11f90 = shl i32 1, %v1_11f88
  %v8_11f90 = or i32 %v7_11f84, %v7_11f90
  store i32 %v8_11f90, i32* %v6_11f84, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_11f7c, { 1, 0 }
}

define i32 @function_11fa0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11fa0:
  %v1_11fa0 = add i32 %arg2, -1
  %v3_11fa4 = udiv i32 %v1_11fa0, 32
  %v4_11fa8 = mul nuw nsw i32 %v3_11fa4, 4
  %v5_11fa8 = add i32 %v4_11fa8, %arg1
  %v6_11fa8 = inttoptr i32 %v5_11fa8 to i32*
  %v7_11fa8 = load i32, i32* %v6_11fa8, align 4
  %v1_11fac = urem i32 %v1_11fa0, 32
  %tmp = shl i32 -1, %v1_11fac
  %v8_11fb4 = add i32 %tmp, -1
  %v9_11fb4 = and i32 %v7_11fa8, %v8_11fb4
  store i32 %v9_11fb4, i32* %v6_11fa8, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_11fa0, { 1, 0 }
}

define i32 @function_11fc4(i32 %arg1) local_unnamed_addr {
dec_label_pc_11fc4:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %v3_11fc4 = udiv i32 %arg1, 256
  store i32 %v3_11fc4, i32* %r1.global-to-local, align 4
  %v2_11fc8 = icmp ugt i32 %arg1, 16777215
  store i32 %arg1, i32* %ip.global-to-local, align 4
  br i1 %v2_11fc8, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_11fc4
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_11fc4, %bb
  %v0_11fd4 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_11fc8, i32 %v0_11fd4)
  %v0_11fd8 = load i32, i32* %r1.global-to-local, align 4
  %v1_11fd8 = add i32 %v0_11fd8, 1048320
  %v3_11fdc = udiv i32 %v1_11fd8, 65536
  %v1_11fe0 = and i32 %v3_11fdc, 8
  %v6_11fe4 = shl i32 %v0_11fd8, %v1_11fe0
  %v1_11fe8 = add i32 %v6_11fe4, 520192
  %v3_11fec = udiv i32 %v1_11fe8, 65536
  %v1_11ff0 = and i32 %v3_11fec, 4
  %v6_11ff4 = shl i32 %v6_11fe4, %v1_11ff0
  %v1_11ff8 = add i32 %v6_11ff4, 245760
  %v3_11ffc = udiv i32 %v1_11ff8, 65536
  %v1_12000 = and i32 %v3_11ffc, 2
  %v6_12004 = shl i32 %v6_11ff4, %v1_12000
  store i32 %v6_12004, i32* %r1.global-to-local, align 4
  %v1_12008 = sub nsw i32 13, %v1_11fe0
  %v2_1200c = sub nsw i32 %v1_12008, %v1_11ff0
  %v3_12010 = udiv i32 %v6_12004, 32768
  %v4_12010 = sub nuw nsw i32 -1, %v3_12010
  %v4_12014 = udiv i32 %v6_12004, 16384
  %v5_12014 = and i32 %v4_12014, %v4_12010
  %v2_12018 = sub nsw i32 %v2_1200c, %v1_12000
  %v2_1201c = add nsw i32 %v2_12018, %v5_12014
  %v1_12020 = add nsw i32 %v2_1201c, 6
  %v0_12024 = load i32, i32* %ip.global-to-local, align 4
  %v6_12024 = lshr i32 %v0_12024, %v1_12020
  %v3_12028 = mul nsw i32 %v2_1201c, 4
  %v1_1202c = add nsw i32 %v3_12028, 32
  %v1_12030 = urem i32 %v6_12024, 4
  %v2_12034 = or i32 %v1_12030, %v1_1202c
  ret i32 %v2_12034

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_1203c() local_unnamed_addr {
dec_label_pc_1203c:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_1203c = load i32, i32* @r4, align 4
  %v6_1203c = load i32, i32* @r5, align 4
  %v9_1203c = load i32, i32* @r6, align 4
  %v12_1203c = load i32, i32* @r7, align 4
  %v15_1203c = load i32, i32* @r8, align 4
  %v18_1203c = load i32, i32* @sb, align 4
  %v21_1203c = load i32, i32* @sl, align 4
  %v24_1203c = load i32, i32* @fp, align 4
  %v27_1203c = load i32, i32* @lr, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %r1.global-to-local, align 4
  %v4_12050 = load i32, i32* inttoptr (i32 127060 to i32*), align 4
  store i32 %v4_12050, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  %v4_1205c = load i32, i32* inttoptr (i32 127028 to i32*), align 4
  store i32 %v4_1205c, i32* %r1.global-to-local, align 4
  %v0_12060 = load i32, i32* @r0, align 4
  store i32 %v0_12060, i32* @r5, align 4
  store i32 %v4_12050, i32* %r2.global-to-local, align 4
  %v2_12068 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_12068, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %ip.global-to-local, align 4
  %v4_12074 = load i32, i32* inttoptr (i32 127064 to i32*), align 8
  store i32 %v4_12074, i32* %ip.global-to-local, align 4
  store i32 73856, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12074)
  %v0_12080 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12080, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %r1.global-to-local, align 4
  %v4_1208c = load i32, i32* inttoptr (i32 127008 to i32*), align 32
  store i32 %v4_1208c, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_12098.381 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_1208c)
  %v0_12098 = load i32, i32* @r5, align 4
  %tmp = icmp ult i32 %v0_12098, -32
  br i1 %tmp, label %dec_label_pc_120b4, label %dec_label_pc_120a0

dec_label_pc_120a0:                               ; preds = %dec_label_pc_1203c
  %v0_120a0 = call i32 @function_11a08()
  store i32 %v0_120a0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 12, i32* @r3, align 4
  %v2_120ac = inttoptr i32 %v0_120a0 to i32*
  store i32 12, i32* %v2_120ac, align 4
  br label %dec_label_pc_12930

dec_label_pc_120b4:                               ; preds = %dec_label_pc_1203c
  %v1_120b4 = add i32 %v0_12098, 11
  store i32 %v1_120b4, i32* %r0.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %r2.global-to-local, align 4
  %v2_120c0 = icmp ugt i32 %v1_120b4, 14
  %v7_120c0 = icmp eq i32 %v1_120b4, 15
  %v2_120c4 = xor i1 %v7_120c0, true
  %v3_120c4 = and i1 %v2_120c0, %v2_120c4
  br i1 %v3_120c4, label %bb, label %bb138

bb:                                               ; preds = %dec_label_pc_120b4
  %v5_120c4 = and i32 %v1_120b4, -8
  store i32 %v5_120c4, i32* @sl, align 4
  br label %bb138

bb138:                                            ; preds = %dec_label_pc_120b4, %bb
  %v4_120c8 = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_120c8, i32* @r0, align 4
  %v1_120cc = inttoptr i32 %v4_120c8 to i32*
  %v2_120cc = load i32, i32* %v1_120cc, align 4
  store i32 %v2_120cc, i32* @r4, align 4
  %v2_120d0 = xor i1 %v2_120c0, true
  %v3_120d0 = or i1 %v7_120c0, %v2_120d0
  br i1 %v3_120d0, label %bb139, label %bb140

bb139:                                            ; preds = %bb138
  store i32 16, i32* @sl, align 4
  br label %bb140

bb140:                                            ; preds = %bb138, %bb139
  %v1_120d4 = urem i32 %v2_120cc, 2
  %v2_120d4 = icmp eq i32 %v1_120d4, 0
  br i1 %v2_120d4, label %dec_label_pc_120dc, label %dec_label_pc_120ec

dec_label_pc_120dc:                               ; preds = %bb140
  %v2_120dc = icmp eq i32 %v2_120cc, 0
  br i1 %v2_120dc, label %dec_label_pc_120e4, label %dec_label_pc_124c8

dec_label_pc_120e4:                               ; preds = %dec_label_pc_120dc
  %v0_120e4 = call i32 @function_12ef4()
  store i32 %v0_120e4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_124c8

dec_label_pc_120ec:                               ; preds = %bb140
  %v0_120ec = load i32, i32* @sl, align 4
  %tmp201 = icmp ugt i32 %v0_120ec, %v2_120cc
  br i1 %tmp201, label %dec_label_pc_12114, label %dec_label_pc_120f4

dec_label_pc_120f4:                               ; preds = %dec_label_pc_120ec
  %v1_120f4 = add i32 %v4_120c8, -4
  store i32 %v1_120f4, i32* %r1.global-to-local, align 4
  %v3_120f8 = udiv i32 %v0_120ec, 8
  store i32 %v3_120f8, i32* %r2.global-to-local, align 4
  %v4_120fc = mul nuw i32 %v3_120f8, 4
  %v5_120fc = add i32 %v4_120fc, %v1_120f4
  %v6_120fc = inttoptr i32 %v5_120fc to i32*
  %v7_120fc = load i32, i32* %v6_120fc, align 4
  store i32 %v7_120fc, i32* %r0.global-to-local, align 4
  %v2_12100 = icmp eq i32 %v7_120fc, 0
  br i1 %v2_12100, label %dec_label_pc_12114, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_120f4
  %v2_12104 = add i32 %v7_120fc, 8
  %v3_12104 = inttoptr i32 %v2_12104 to i32*
  %v4_12104 = load i32, i32* %v3_12104, align 4
  store i32 %v4_12104, i32* %r3.global-to-local, align 4
  store i32 %v2_12104, i32* %r0.global-to-local, align 4
  store i32 %v2_12104, i32* %r4.global-to-local, align 4
  store i32 %v4_12104, i32* %v6_120fc, align 4
  br label %dec_label_pc_12914

dec_label_pc_12114:                               ; preds = %dec_label_pc_120f4, %dec_label_pc_120ec
  %tmp202 = icmp ugt i32 %v0_120ec, 255
  br i1 %tmp202, label %dec_label_pc_12164, label %dec_label_pc_1211c

dec_label_pc_1211c:                               ; preds = %dec_label_pc_12114
  store i32 126992, i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_12124 = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  %v3_12128 = udiv i32 %v0_120ec, 8
  store i32 %v3_12128, i32* @r7, align 4
  %v4_1212c = mul nuw i32 %v3_12128, 8
  %v5_1212c = add i32 %v4_12124, %v4_1212c
  store i32 %v5_1212c, i32* %r3.global-to-local, align 4
  %v1_12130 = add i32 %v5_1212c, 44
  store i32 %v1_12130, i32* %ip.global-to-local, align 4
  %v1_12134 = add i32 %v5_1212c, 56
  %v2_12134 = inttoptr i32 %v1_12134 to i32*
  %v3_12134 = load i32, i32* %v2_12134, align 4
  store i32 %v3_12134, i32* %r0.global-to-local, align 4
  %v9_12138 = icmp eq i32 %v3_12134, %v1_12130
  br i1 %v9_12138, label %dec_label_pc_122c4, label %dec_label_pc_12140

dec_label_pc_12140:                               ; preds = %dec_label_pc_1211c
  %v2_12140 = add i32 %v3_12134, %v0_120ec
  store i32 %v2_12140, i32* %r3.global-to-local, align 4
  %v1_12144 = add i32 %v2_12140, 4
  %v2_12144 = inttoptr i32 %v1_12144 to i32*
  %v3_12144 = load i32, i32* %v2_12144, align 4
  store i32 %v3_12144, i32* %r2.global-to-local, align 4
  %v1_12148 = add i32 %v3_12134, 12
  %v2_12148 = inttoptr i32 %v1_12148 to i32*
  %v3_12148 = load i32, i32* %v2_12148, align 4
  store i32 %v3_12148, i32* %r1.global-to-local, align 4
  %v1_1214c = or i32 %v3_12144, 1
  store i32 %v1_1214c, i32* %r2.global-to-local, align 4
  %v1_12150 = add i32 %v3_12134, 8
  store i32 %v1_12150, i32* %r4.global-to-local, align 4
  store i32 %v1_1214c, i32* %v2_12144, align 4
  %v0_12158 = load i32, i32* %ip.global-to-local, align 4
  %v1_12158 = load i32, i32* %r1.global-to-local, align 4
  %v2_12158 = add i32 %v1_12158, 8
  %v3_12158 = inttoptr i32 %v2_12158 to i32*
  store i32 %v0_12158, i32* %v3_12158, align 4
  %v0_1215c = load i32, i32* %r1.global-to-local, align 4
  %v1_1215c = load i32, i32* %ip.global-to-local, align 4
  %v2_1215c = add i32 %v1_1215c, 12
  %v3_1215c = inttoptr i32 %v2_1215c to i32*
  store i32 %v0_1215c, i32* %v3_1215c, align 4
  br label %dec_label_pc_12914

dec_label_pc_12164:                               ; preds = %dec_label_pc_12114
  store i32 %v0_120ec, i32* %r0.global-to-local, align 4
  %v1_12168 = call i32 @function_11fc4(i32 %v0_120ec)
  store i32 %v1_12168, i32* %r0.global-to-local, align 4
  %v0_1216c = load i32, i32* @r4, align 4
  %v1_1216c = and i32 %v0_1216c, 2
  %v2_1216c = icmp eq i32 %v1_1216c, 0
  store i32 %v1_12168, i32* @r7, align 4
  br i1 %v2_1216c, label %dec_label_pc_122c4, label %dec_label_pc_12178

dec_label_pc_12178:                               ; preds = %dec_label_pc_12164
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %r1.global-to-local, align 4
  %v4_12180 = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_12180, i32* @r0, align 4
  %v0_12184 = call i32 @function_12ef4()
  store i32 %v0_12184, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_122c4

dec_label_pc_1218c:                               ; preds = %dec_label_pc_122d8
  %v1_1218c = add i32 %v3_122d8, 4
  %v2_1218c = inttoptr i32 %v1_1218c to i32*
  %v3_1218c = load i32, i32* %v2_1218c, align 4
  store i32 %v3_1218c, i32* %r3.global-to-local, align 4
  %v0_12190 = load i32, i32* @sl, align 4
  %v1_12194 = and i32 %v3_1218c, -4
  store i32 %v1_12194, i32* %r4.global-to-local, align 4
  %v1_12198 = add i32 %v3_122d8, 12
  %v2_12198 = inttoptr i32 %v1_12198 to i32*
  %v3_12198 = load i32, i32* %v2_12198, align 4
  store i32 %v3_12198, i32* %ip.global-to-local, align 4
  %tmp203 = icmp ugt i32 %v0_12190, 255
  br i1 %tmp203, label %dec_label_pc_121f4, label %dec_label_pc_121a0

dec_label_pc_121a0:                               ; preds = %dec_label_pc_1218c
  %v9_121a0 = icmp eq i32 %v3_12198, %v0_121f8
  br i1 %v9_121a0, label %dec_label_pc_121a8, label %dec_label_pc_121f4

dec_label_pc_121a8:                               ; preds = %dec_label_pc_121a0
  %v0_121a8 = load i32, i32* @sb, align 4
  %v1_121a8 = add i32 %v0_121a8, 48
  %v2_121a8 = inttoptr i32 %v1_121a8 to i32*
  %v3_121a8 = load i32, i32* %v2_121a8, align 4
  store i32 %v3_121a8, i32* %r3.global-to-local, align 4
  %v9_121ac = icmp eq i32 %v3_122d8, %v3_121a8
  br i1 %v9_121ac, label %dec_label_pc_121b4, label %dec_label_pc_121f4

dec_label_pc_121b4:                               ; preds = %dec_label_pc_121a8
  %v1_121b4 = load i32, i32* @fp, align 4
  %tmp204 = icmp ugt i32 %v1_12194, %v1_121b4
  br i1 %tmp204, label %dec_label_pc_121bc, label %dec_label_pc_121f4

dec_label_pc_121bc:                               ; preds = %dec_label_pc_121b4
  %v2_121bc = sub i32 %v1_12194, %v0_12190
  store i32 %v2_121bc, i32* %r2.global-to-local, align 4
  %v2_121c0 = add i32 %v0_12190, %v3_122d8
  store i32 %v2_121c0, i32* %r3.global-to-local, align 4
  %v1_121c4 = or i32 %v0_12190, 1
  store i32 %v1_121c4, i32* %r0.global-to-local, align 4
  %v1_121c8 = or i32 %v2_121bc, 1
  store i32 %v1_121c8, i32* %r1.global-to-local, align 4
  %v1_121cc = add i32 %v3_122d8, 8
  store i32 %v1_121cc, i32* %r4.global-to-local, align 4
  %v2_121d0 = add i32 %v0_121f8, 8
  %v3_121d0 = inttoptr i32 %v2_121d0 to i32*
  store i32 %v2_121c0, i32* %v3_121d0, align 4
  %v0_121d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_121d4 = load i32, i32* %ip.global-to-local, align 4
  %v2_121d4 = add i32 %v1_121d4, 12
  %v3_121d4 = inttoptr i32 %v2_121d4 to i32*
  store i32 %v0_121d4, i32* %v3_121d4, align 4
  %v0_121d8 = load i32, i32* %r0.global-to-local, align 4
  %v1_121d8 = load i32, i32* @r6, align 4
  %v2_121d8 = add i32 %v1_121d8, 4
  %v3_121d8 = inttoptr i32 %v2_121d8 to i32*
  store i32 %v0_121d8, i32* %v3_121d8, align 4
  %v0_121dc = load i32, i32* %r3.global-to-local, align 4
  %v1_121dc = load i32, i32* @sb, align 4
  %v2_121dc = add i32 %v1_121dc, 48
  %v3_121dc = inttoptr i32 %v2_121dc to i32*
  store i32 %v0_121dc, i32* %v3_121dc, align 4
  %v0_121e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_121e0 = load i32, i32* %r3.global-to-local, align 4
  %v3_121e0 = add i32 %v1_121e0, %v0_121e0
  %v4_121e0 = inttoptr i32 %v3_121e0 to i32*
  store i32 %v0_121e0, i32* %v4_121e0, align 4
  %v0_121e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_121e4 = load i32, i32* %r3.global-to-local, align 4
  %v2_121e4 = add i32 %v1_121e4, 4
  %v3_121e4 = inttoptr i32 %v2_121e4 to i32*
  store i32 %v0_121e4, i32* %v3_121e4, align 4
  %v0_121e8 = load i32, i32* %ip.global-to-local, align 4
  %v1_121e8 = load i32, i32* %r3.global-to-local, align 4
  %v2_121e8 = add i32 %v1_121e8, 12
  %v3_121e8 = inttoptr i32 %v2_121e8 to i32*
  store i32 %v0_121e8, i32* %v3_121e8, align 4
  %v0_121ec = load i32, i32* %ip.global-to-local, align 4
  %v1_121ec = load i32, i32* %r3.global-to-local, align 4
  %v2_121ec = add i32 %v1_121ec, 8
  %v3_121ec = inttoptr i32 %v2_121ec to i32*
  store i32 %v0_121ec, i32* %v3_121ec, align 4
  br label %dec_label_pc_12914

dec_label_pc_121f4:                               ; preds = %dec_label_pc_121b4, %dec_label_pc_121a8, %dec_label_pc_121a0, %dec_label_pc_1218c
  %v9_121f4 = icmp eq i32 %v1_12194, %v0_12190
  %v2_121f8 = add i32 %v3_12198, 8
  %v3_121f8 = inttoptr i32 %v2_121f8 to i32*
  store i32 %v0_121f8, i32* %v3_121f8, align 4
  %v0_121fc = load i32, i32* %ip.global-to-local, align 4
  %v1_121fc = load i32, i32* %r5.global-to-local, align 4
  %v2_121fc = add i32 %v1_121fc, 12
  %v3_121fc = inttoptr i32 %v2_121fc to i32*
  store i32 %v0_121fc, i32* %v3_121fc, align 4
  br i1 %v9_121f4, label %dec_label_pc_12354.loopexit, label %dec_label_pc_12210

dec_label_pc_12210:                               ; preds = %dec_label_pc_121f4
  %v0_12210 = load i32, i32* %r4.global-to-local, align 4
  %tmp205 = icmp ugt i32 %v0_12210, 255
  br i1 %tmp205, label %dec_label_pc_12234, label %dec_label_pc_12218

dec_label_pc_12218:                               ; preds = %dec_label_pc_12210
  store i32 126992, i32* %r2.global-to-local, align 4
  %v1_1221c = load i32, i32* %r8.global-to-local, align 4
  %v2_1221c = add i32 %v1_1221c, 126992
  %v3_1221c = inttoptr i32 %v2_1221c to i32*
  %v4_1221c = load i32, i32* %v3_1221c, align 4
  %v3_12220 = udiv i32 %v0_12210, 8
  store i32 %v3_12220, i32* %r0.global-to-local, align 4
  %v4_12224 = mul nuw i32 %v3_12220, 8
  %v5_12224 = add i32 %v4_1221c, %v4_12224
  store i32 %v5_12224, i32* %r3.global-to-local, align 4
  %v1_12228 = add i32 %v5_12224, 44
  store i32 %v1_12228, i32* %ip.global-to-local, align 4
  %v1_1222c = add i32 %v5_12224, 52
  %v2_1222c = inttoptr i32 %v1_1222c to i32*
  %v3_1222c = load i32, i32* %v2_1222c, align 4
  store i32 %v3_1222c, i32* @lr, align 4
  br label %dec_label_pc_1228c

dec_label_pc_12234:                               ; preds = %dec_label_pc_12210
  store i32 %v0_12210, i32* %r0.global-to-local, align 4
  %v1_12238 = call i32 @function_11fc4(i32 %v0_12210)
  store i32 %v1_12238, i32* %r0.global-to-local, align 4
  store i32 126992, i32* %ip.global-to-local, align 4
  %v1_12240 = load i32, i32* %r8.global-to-local, align 4
  %v2_12240 = add i32 %v1_12240, 126992
  %v3_12240 = inttoptr i32 %v2_12240 to i32*
  %v4_12240 = load i32, i32* %v3_12240, align 4
  %v4_12244 = mul i32 %v1_12238, 8
  %v5_12244 = add i32 %v4_12240, %v4_12244
  store i32 %v5_12244, i32* %r3.global-to-local, align 4
  %v1_12248 = add i32 %v5_12244, 44
  store i32 %v1_12248, i32* %ip.global-to-local, align 4
  %v1_1224c = add i32 %v5_12244, 52
  %v2_1224c = inttoptr i32 %v1_1224c to i32*
  %v3_1224c = load i32, i32* %v2_1224c, align 4
  store i32 %v3_1224c, i32* @lr, align 4
  %v9_12250 = icmp eq i32 %v3_1224c, %v1_12248
  br i1 %v9_12250, label %dec_label_pc_1228c, label %dec_label_pc_12258

dec_label_pc_12258:                               ; preds = %dec_label_pc_12234
  %v1_12258 = add i32 %v5_12244, 56
  %v2_12258 = inttoptr i32 %v1_12258 to i32*
  %v3_12258 = load i32, i32* %v2_12258, align 4
  store i32 %v3_12258, i32* %r1.global-to-local, align 4
  %v1_1225c = add i32 %v3_12258, 4
  %v2_1225c = inttoptr i32 %v1_1225c to i32*
  %v3_1225c = load i32, i32* %v2_1225c, align 4
  store i32 %v3_1225c, i32* %r3.global-to-local, align 4
  %v0_12260 = load i32, i32* %r4.global-to-local, align 4
  %v3_12260 = icmp ult i32 %v0_12260, %v3_1225c
  br i1 %v3_12260, label %.thread, label %dec_label_pc_1227c.preheader

.thread:                                          ; preds = %dec_label_pc_12258
  store i32 %v1_12248, i32* @lr, align 4
  store i32 %v3_12258, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1228c

dec_label_pc_1227c.preheader:                     ; preds = %dec_label_pc_12258
  %v2_12268 = or i32 %v0_12260, 1
  store i32 %v2_12268, i32* %r2.global-to-local, align 4
  %v1_1227c179 = add i32 %v3_1224c, 4
  %v2_1227c180 = inttoptr i32 %v1_1227c179 to i32*
  %v3_1227c181 = load i32, i32* %v2_1227c180, align 4
  store i32 %v3_1227c181, i32* %r3.global-to-local, align 4
  %v3_12280183 = icmp ult i32 %v2_12268, %v3_1227c181
  br i1 %v3_12280183, label %dec_label_pc_12278, label %dec_label_pc_12288

dec_label_pc_12278:                               ; preds = %dec_label_pc_1227c.preheader, %dec_label_pc_12278
  %v0_12288184 = phi i32 [ %v3_12278, %dec_label_pc_12278 ], [ %v3_1224c, %dec_label_pc_1227c.preheader ]
  %v1_12278 = add i32 %v0_12288184, 8
  %v2_12278 = inttoptr i32 %v1_12278 to i32*
  %v3_12278 = load i32, i32* %v2_12278, align 4
  store i32 %v3_12278, i32* @lr, align 4
  %v1_1227c = add i32 %v3_12278, 4
  %v2_1227c = inttoptr i32 %v1_1227c to i32*
  %v3_1227c = load i32, i32* %v2_1227c, align 4
  store i32 %v3_1227c, i32* %r3.global-to-local, align 4
  %v3_12280 = icmp ult i32 %v2_12268, %v3_1227c
  br i1 %v3_12280, label %dec_label_pc_12278, label %dec_label_pc_12288

dec_label_pc_12288:                               ; preds = %dec_label_pc_12278, %dec_label_pc_1227c.preheader
  %v0_12288.lcssa = phi i32 [ %v3_1224c, %dec_label_pc_1227c.preheader ], [ %v3_12278, %dec_label_pc_12278 ]
  %v1_12288 = add i32 %v0_12288.lcssa, 12
  %v2_12288 = inttoptr i32 %v1_12288 to i32*
  %v3_12288 = load i32, i32* %v2_12288, align 4
  store i32 %v3_12288, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1228c

dec_label_pc_1228c:                               ; preds = %.thread, %dec_label_pc_12234, %dec_label_pc_12218, %dec_label_pc_12288
  %v0_122ac = phi i32 [ %v1_12248, %dec_label_pc_12234 ], [ %v1_12228, %dec_label_pc_12218 ], [ %v3_12288, %dec_label_pc_12288 ], [ %v3_12258, %.thread ]
  %v0_122a0 = phi i32 [ %v1_12238, %dec_label_pc_12234 ], [ %v3_12220, %dec_label_pc_12218 ], [ %v1_12238, %dec_label_pc_12288 ], [ %v1_12238, %.thread ]
  %v1_12290 = phi i32 [ %v1_12240, %dec_label_pc_12234 ], [ %v1_1221c, %dec_label_pc_12218 ], [ %v1_12240, %dec_label_pc_12288 ], [ %v1_12240, %.thread ]
  store i32 126992, i32* %r2.global-to-local, align 4
  %v2_12290 = add i32 %v1_12290, 126992
  %v3_12290 = inttoptr i32 %v2_12290 to i32*
  %v4_12290 = load i32, i32* %v3_12290, align 4
  %v3_12294 = sdiv i32 %v0_122a0, 32
  store i32 %v3_12294, i32* %r3.global-to-local, align 4
  %v4_12298 = mul nsw i32 %v3_12294, 4
  %v5_12298 = add i32 %v4_12290, %v4_12298
  store i32 %v5_12298, i32* %r1.global-to-local, align 4
  %v1_1229c = add i32 %v5_12298, 820
  %v2_1229c = inttoptr i32 %v1_1229c to i32*
  %v3_1229c = load i32, i32* %v2_1229c, align 4
  %v1_122a0 = urem i32 %v0_122a0, 32
  store i32 %v1_122a0, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v7_122a8 = shl i32 1, %v1_122a0
  %v8_122a8 = or i32 %v3_1229c, %v7_122a8
  store i32 %v8_122a8, i32* %r3.global-to-local, align 4
  %v1_122ac = load i32, i32* @r6, align 4
  %v2_122ac = add i32 %v1_122ac, 12
  %v3_122ac = inttoptr i32 %v2_122ac to i32*
  store i32 %v0_122ac, i32* %v3_122ac, align 4
  %v0_122b0 = load i32, i32* @lr, align 4
  %v1_122b0 = load i32, i32* @r6, align 4
  %v2_122b0 = add i32 %v1_122b0, 8
  %v3_122b0 = inttoptr i32 %v2_122b0 to i32*
  store i32 %v0_122b0, i32* %v3_122b0, align 4
  %v0_122b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_122b4 = load i32, i32* %r1.global-to-local, align 4
  %v2_122b4 = add i32 %v1_122b4, 820
  %v3_122b4 = inttoptr i32 %v2_122b4 to i32*
  store i32 %v0_122b4, i32* %v3_122b4, align 4
  %v0_122b8 = load i32, i32* @r6, align 4
  %v1_122b8 = load i32, i32* @lr, align 4
  %v2_122b8 = add i32 %v1_122b8, 12
  %v3_122b8 = inttoptr i32 %v2_122b8 to i32*
  store i32 %v0_122b8, i32* %v3_122b8, align 4
  %v0_122bc = load i32, i32* @r6, align 4
  %v1_122bc = load i32, i32* %ip.global-to-local, align 4
  %v2_122bc = add i32 %v1_122bc, 8
  %v3_122bc = inttoptr i32 %v2_122bc to i32*
  store i32 %v0_122bc, i32* %v3_122bc, align 4
  %v0_122d8.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_122d8

dec_label_pc_122c4:                               ; preds = %dec_label_pc_12164, %dec_label_pc_1211c, %dec_label_pc_12178
  store i32 32, i32* %r8.global-to-local, align 4
  store i32 126992, i32* %r1.global-to-local, align 4
  %v4_122cc = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_122cc, i32* @sb, align 4
  %v0_122d0 = load i32, i32* @sl, align 4
  %v1_122d0 = add i32 %v0_122d0, 16
  store i32 %v1_122d0, i32* @fp, align 4
  %v1_122d4 = add i32 %v4_122cc, 52
  store i32 %v1_122d4, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_122d8

dec_label_pc_122d8:                               ; preds = %dec_label_pc_1228c, %dec_label_pc_122c4
  %v0_121f8 = phi i32 [ %v0_122d8.pre, %dec_label_pc_1228c ], [ %v1_122d4, %dec_label_pc_122c4 ]
  %v1_122d8 = add i32 %v0_121f8, 12
  %v2_122d8 = inttoptr i32 %v1_122d8 to i32*
  %v3_122d8 = load i32, i32* %v2_122d8, align 4
  store i32 %v3_122d8, i32* @r6, align 4
  %v9_122dc = icmp eq i32 %v3_122d8, %v0_121f8
  br i1 %v9_122dc, label %dec_label_pc_122e4, label %dec_label_pc_1218c

dec_label_pc_122e4:                               ; preds = %dec_label_pc_122d8
  %v0_122e4 = load i32, i32* @sl, align 4
  %tmp206 = icmp ult i32 %v0_122e4, 256
  %v0_1239c.pre = load i32, i32* @r7, align 4
  br i1 %tmp206, label %dec_label_pc_122e4.dec_label_pc_1239c_crit_edge, label %dec_label_pc_122ec

dec_label_pc_122e4.dec_label_pc_1239c_crit_edge:  ; preds = %dec_label_pc_122e4
  %.pre200 = mul i32 %v0_1239c.pre, 8
  br label %dec_label_pc_1239c

dec_label_pc_122ec:                               ; preds = %dec_label_pc_122e4
  %v4_122ec = mul i32 %v0_1239c.pre, 8
  %v5_122ec = add i32 %v4_122ec, %v0_121f8
  store i32 %v5_122ec, i32* %r3.global-to-local, align 4
  %v1_122f0 = add i32 %v5_122ec, -8
  store i32 %v1_122f0, i32* %r1.global-to-local, align 4
  %v1_122f4 = add i32 %v5_122ec, 4
  %v2_122f4 = inttoptr i32 %v1_122f4 to i32*
  %storemerge.pre = load i32, i32* %v2_122f4, align 4
  br label %dec_label_pc_12394

dec_label_pc_122fc:                               ; preds = %dec_label_pc_12394
  %v1_122fc = add i32 %v1_12324, 4
  %v2_122fc = inttoptr i32 %v1_122fc to i32*
  %v3_122fc = load i32, i32* %v2_122fc, align 4
  store i32 %v3_122fc, i32* %r3.global-to-local, align 4
  %v1_12300 = and i32 %v3_122fc, -4
  store i32 %v1_12300, i32* %r2.global-to-local, align 4
  %v3_12304 = icmp ult i32 %v1_12300, %v0_122e4
  %v1_12308 = add i32 %v1_12324, 12
  %v2_12308 = inttoptr i32 %v1_12308 to i32*
  %v3_12308 = load i32, i32* %v2_12308, align 4
  store i32 %v3_12308, i32* %r0.global-to-local, align 4
  br i1 %v3_12304, label %dec_label_pc_12394, label %dec_label_pc_12310

dec_label_pc_12310:                               ; preds = %dec_label_pc_122fc
  %v1_12310 = add i32 %v1_12324, 8
  %v2_12310 = inttoptr i32 %v1_12310 to i32*
  %v3_12310 = load i32, i32* %v2_12310, align 4
  store i32 %v3_12310, i32* %r1.global-to-local, align 4
  %v1_12314 = add i32 %v3_12310, 12
  %v2_12314 = inttoptr i32 %v1_12314 to i32*
  %v3_12314 = load i32, i32* %v2_12314, align 4
  store i32 %v3_12314, i32* %r3.global-to-local, align 4
  %v9_12318 = icmp eq i32 %v3_12314, %v1_12324
  br i1 %v9_12318, label %dec_label_pc_12320, label %dec_label_pc_1232c

dec_label_pc_12320:                               ; preds = %dec_label_pc_12310
  %v1_12320 = add i32 %v3_12308, 8
  %v2_12320 = inttoptr i32 %v1_12320 to i32*
  %v3_12320 = load i32, i32* %v2_12320, align 4
  store i32 %v3_12320, i32* %r3.global-to-local, align 4
  %v9_12324 = icmp eq i32 %v3_12320, %v1_12324
  br i1 %v9_12324, label %dec_label_pc_12330, label %dec_label_pc_1232c

dec_label_pc_1232c:                               ; preds = %dec_label_pc_12310, %dec_label_pc_12320
  %v0_1232c = call i32 @function_13324()
  store i32 %v0_1232c, i32* %r0.global-to-local, align 4
  %v0_12330.pre = load i32, i32* @sl, align 4
  %v1_12330.pre = load i32, i32* @r2, align 4
  %v0_12338.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_12330

dec_label_pc_12330:                               ; preds = %dec_label_pc_12320, %dec_label_pc_1232c
  %v1_12338 = phi i32 [ %v3_12308, %dec_label_pc_12320 ], [ %v0_1232c, %dec_label_pc_1232c ]
  %v0_12338 = phi i32 [ %v3_12310, %dec_label_pc_12320 ], [ %v0_12338.pre, %dec_label_pc_1232c ]
  %v1_12330 = phi i32 [ %v1_12300, %dec_label_pc_12320 ], [ %v1_12330.pre, %dec_label_pc_1232c ]
  %v0_12330 = phi i32 [ %v0_122e4, %dec_label_pc_12320 ], [ %v0_12330.pre, %dec_label_pc_1232c ]
  %v2_12330 = sub i32 %v1_12330, %v0_12330
  store i32 %v2_12330, i32* %lr.global-to-local, align 4
  %v2_12338 = add i32 %v1_12338, 8
  %v3_12338 = inttoptr i32 %v2_12338 to i32*
  store i32 %v0_12338, i32* %v3_12338, align 4
  %v0_1233c = load i32, i32* %r0.global-to-local, align 4
  %v1_1233c = load i32, i32* %r1.global-to-local, align 4
  %v2_1233c = add i32 %v1_1233c, 12
  %v3_1233c = inttoptr i32 %v2_1233c to i32*
  store i32 %v0_1233c, i32* %v3_1233c, align 4
  %v0_12340 = load i32, i32* %ip.global-to-local, align 4
  %v1_12340 = add i32 %v0_12340, 8
  store i32 %v1_12340, i32* %r0.global-to-local, align 4
  %tmp207 = icmp ugt i32 %v2_12330, 15
  br i1 %tmp207, label %dec_label_pc_12360, label %dec_label_pc_12348

dec_label_pc_12348:                               ; preds = %dec_label_pc_12330
  %v1_12348 = load i32, i32* %r2.global-to-local, align 4
  %v2_12348 = add i32 %v1_12348, %v0_12340
  store i32 %v2_12348, i32* %r2.global-to-local, align 4
  %v1_1234c = add i32 %v2_12348, 4
  %v2_1234c = inttoptr i32 %v1_1234c to i32*
  %v3_1234c = load i32, i32* %v2_1234c, align 4
  store i32 %v3_1234c, i32* %r3.global-to-local, align 4
  store i32 %v1_12340, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12354

dec_label_pc_12354.loopexit:                      ; preds = %dec_label_pc_121f4
  %v1_12200 = load i32, i32* @r6, align 4
  %v2_12200 = load i32, i32* @sl, align 4
  %v3_12200 = add i32 %v2_12200, %v1_12200
  store i32 %v3_12200, i32* %r2.global-to-local, align 4
  %v2_12204 = add i32 %v3_12200, 4
  %v3_12204 = inttoptr i32 %v2_12204 to i32*
  %v4_12204 = load i32, i32* %v3_12204, align 4
  store i32 %v4_12204, i32* %r3.global-to-local, align 4
  %v2_12208 = add i32 %v1_12200, 8
  store i32 %v2_12208, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12354

dec_label_pc_12354:                               ; preds = %.dec_label_pc_12354_crit_edge, %dec_label_pc_12354.loopexit, %dec_label_pc_12348
  %v1_12358 = phi i32 [ %v4_1247c, %.dec_label_pc_12354_crit_edge ], [ %v3_12200, %dec_label_pc_12354.loopexit ], [ %v2_12348, %dec_label_pc_12348 ]
  %v0_12354 = phi i32 [ %v7_1247c, %.dec_label_pc_12354_crit_edge ], [ %v4_12204, %dec_label_pc_12354.loopexit ], [ %v3_1234c, %dec_label_pc_12348 ]
  %v1_12354 = or i32 %v0_12354, 1
  store i32 %v1_12354, i32* %r3.global-to-local, align 4
  %v2_12358 = add i32 %v1_12358, 4
  %v3_12358 = inttoptr i32 %v2_12358 to i32*
  store i32 %v1_12354, i32* %v3_12358, align 4
  br label %dec_label_pc_12914

dec_label_pc_12360:                               ; preds = %dec_label_pc_12330
  %v1_12360 = load i32, i32* @sl, align 4
  %v2_12360 = add i32 %v1_12360, %v0_12340
  store i32 %v2_12360, i32* %r2.global-to-local, align 4
  %v1_12364 = or i32 %v1_12360, 1
  store i32 %v1_12364, i32* %r3.global-to-local, align 4
  %v0_12368 = load i32, i32* %lr.global-to-local, align 4
  %v1_12368 = or i32 %v0_12368, 1
  store i32 %v1_12368, i32* %r1.global-to-local, align 4
  store i32 %v1_12340, i32* %r4.global-to-local, align 4
  %v2_12370 = add i32 %v0_12340, 4
  %v3_12370 = inttoptr i32 %v2_12370 to i32*
  store i32 %v1_12364, i32* %v3_12370, align 4
  %v0_12374 = load i32, i32* %r2.global-to-local, align 4
  %v1_12374 = load i32, i32* @r6, align 4
  %v2_12374 = add i32 %v1_12374, 8
  %v3_12374 = inttoptr i32 %v2_12374 to i32*
  store i32 %v0_12374, i32* %v3_12374, align 4
  %v0_12378 = load i32, i32* %r2.global-to-local, align 4
  %v1_12378 = load i32, i32* @r6, align 4
  %v2_12378 = add i32 %v1_12378, 12
  %v3_12378 = inttoptr i32 %v2_12378 to i32*
  store i32 %v0_12378, i32* %v3_12378, align 4
  %v0_1237c = load i32, i32* %lr.global-to-local, align 4
  %v1_1237c = load i32, i32* %r2.global-to-local, align 4
  %v3_1237c = add i32 %v1_1237c, %v0_1237c
  %v4_1237c = inttoptr i32 %v3_1237c to i32*
  store i32 %v0_1237c, i32* %v4_1237c, align 4
  %v0_12380 = load i32, i32* %r1.global-to-local, align 4
  %v1_12380 = load i32, i32* %r2.global-to-local, align 4
  %v2_12380 = add i32 %v1_12380, 4
  %v3_12380 = inttoptr i32 %v2_12380 to i32*
  store i32 %v0_12380, i32* %v3_12380, align 4
  %v0_12384 = load i32, i32* @r6, align 4
  %v1_12384 = load i32, i32* %r2.global-to-local, align 4
  %v2_12384 = add i32 %v1_12384, 12
  %v3_12384 = inttoptr i32 %v2_12384 to i32*
  store i32 %v0_12384, i32* %v3_12384, align 4
  %v0_12388 = load i32, i32* @r6, align 4
  %v1_12388 = load i32, i32* %r2.global-to-local, align 4
  %v2_12388 = add i32 %v1_12388, 8
  %v3_12388 = inttoptr i32 %v2_12388 to i32*
  store i32 %v0_12388, i32* %v3_12388, align 4
  br label %dec_label_pc_12914

dec_label_pc_12394:                               ; preds = %dec_label_pc_122fc, %dec_label_pc_122ec
  %v1_12324 = phi i32 [ %storemerge.pre, %dec_label_pc_122ec ], [ %v3_12308, %dec_label_pc_122fc ]
  store i32 %v1_12324, i32* %ip.global-to-local, align 4
  %v9_12394 = icmp eq i32 %v1_12324, %v1_122f0
  br i1 %v9_12394, label %dec_label_pc_1239c.loopexit, label %dec_label_pc_122fc

dec_label_pc_1239c.loopexit:                      ; preds = %dec_label_pc_12394
  br label %dec_label_pc_1239c

dec_label_pc_1239c:                               ; preds = %dec_label_pc_122e4.dec_label_pc_1239c_crit_edge, %dec_label_pc_1239c.loopexit
  %v4_123cc.pre-phi = phi i32 [ %.pre200, %dec_label_pc_122e4.dec_label_pc_1239c_crit_edge ], [ %v4_122ec, %dec_label_pc_1239c.loopexit ]
  %v1_1239c = add i32 %v0_1239c.pre, 1
  store i32 %v1_1239c, i32* %r2.global-to-local, align 4
  %v1_123a0 = urem i32 %v1_1239c, 32
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 126992, i32* %r0.global-to-local, align 4
  %v6_123ac = shl i32 1, %v1_123a0
  store i32 %v6_123ac, i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_123b4 = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_123b4, i32* %r3.global-to-local, align 4
  %v3_123b8 = udiv i32 %v1_1239c, 32
  store i32 %v3_123b8, i32* @r5, align 4
  %v4_123bc = mul nuw nsw i32 %v3_123b8, 4
  %v5_123bc = add i32 %v4_123b4, %v4_123bc
  store i32 %v5_123bc, i32* %r2.global-to-local, align 4
  %v1_123c0 = add i32 %v5_123bc, 820
  %v2_123c0 = inttoptr i32 %v1_123c0 to i32*
  %v3_123c0 = load i32, i32* %v2_123c0, align 4
  store i32 %v3_123c0, i32* @r4, align 4
  %v1_123c4 = add i32 %v4_123b4, 52
  store i32 %v1_123c4, i32* %r3.global-to-local, align 4
  store i32 32, i32* @r8, align 4
  %v5_123cc = add i32 %v1_123c4, %v4_123cc.pre-phi
  store i32 %v5_123cc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_123d0

dec_label_pc_123d0:                               ; preds = %dec_label_pc_12438, %dec_label_pc_1239c
  %v1_123d8 = phi i32 [ %v1_123d8.pre, %dec_label_pc_12438 ], [ %v3_123c0, %dec_label_pc_1239c ]
  %v0_123d8 = phi i32 [ %v0_123d0.pre, %dec_label_pc_12438 ], [ %v6_123ac, %dec_label_pc_1239c ]
  %v1_123d0 = sub i32 1, %v0_123d8
  %v2_123d0 = icmp ult i32 %v0_123d8, 2
  %v1_123d0. = select i1 %v2_123d0, i32 %v1_123d0, i32 0
  store i32 %v1_123d0., i32* %r3.global-to-local, align 4
  %tmp141 = icmp ugt i32 %v0_123d8, %v1_123d8
  br i1 %tmp141, label %.thread12, label %bb142

.thread12:                                        ; preds = %dec_label_pc_123d0
  %v5_123dc = or i32 %v1_123d0., 1
  store i32 %v5_123dc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_123e8.preheader

bb142:                                            ; preds = %dec_label_pc_123d0
  %v2_123e0 = icmp eq i32 %v1_123d0., 0
  br i1 %v2_123e0, label %.dec_label_pc_12424.preheader_crit_edge, label %dec_label_pc_123e8.preheader

.dec_label_pc_12424.preheader_crit_edge:          ; preds = %bb142
  %v0_1241c54.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12424.preheader

dec_label_pc_123e8.preheader:                     ; preds = %bb142, %.thread12
  %v0_123e8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_123e8

dec_label_pc_123e8:                               ; preds = %dec_label_pc_123e8.preheader, %dec_label_pc_123f4
  %v0_123e8 = phi i32 [ %v0_123e8.pre, %dec_label_pc_123e8.preheader ], [ %v1_123e8, %dec_label_pc_123f4 ]
  %v1_123e8 = add i32 %v0_123e8, 1
  store i32 %v1_123e8, i32* @r5, align 4
  %tmp208 = icmp ugt i32 %v1_123e8, 2
  br i1 %tmp208, label %dec_label_pc_124c8.loopexit, label %dec_label_pc_123f4

dec_label_pc_123f4:                               ; preds = %dec_label_pc_123e8
  store i32 126992, i32* %r3.global-to-local, align 4
  %v1_123f8 = load i32, i32* @r8, align 4
  %v2_123f8 = add i32 %v1_123f8, 126992
  %v3_123f8 = inttoptr i32 %v2_123f8 to i32*
  %v4_123f8 = load i32, i32* %v3_123f8, align 4
  store i32 %v4_123f8, i32* %r2.global-to-local, align 4
  %v4_123fc = mul i32 %v1_123e8, 4
  %v5_123fc = add i32 %v4_123f8, %v4_123fc
  store i32 %v5_123fc, i32* %r3.global-to-local, align 4
  %v1_12400 = add i32 %v5_123fc, 820
  %v2_12400 = inttoptr i32 %v1_12400 to i32*
  %v3_12400 = load i32, i32* %v2_12400, align 4
  store i32 %v3_12400, i32* @r4, align 4
  %v2_12404 = icmp eq i32 %v3_12400, 0
  br i1 %v2_12404, label %dec_label_pc_123e8, label %dec_label_pc_1240c

dec_label_pc_1240c:                               ; preds = %dec_label_pc_123f4
  %v4_1240c = mul i32 %v1_123e8, 256
  %v5_1240c = add i32 %v4_123f8, %v4_1240c
  store i32 %v5_1240c, i32* %r3.global-to-local, align 4
  %v1_12410 = add i32 %v5_1240c, 44
  store i32 %v1_12410, i32* %r0.global-to-local, align 4
  %v0_12414 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_12414, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12424.preheader

dec_label_pc_12424.preheader:                     ; preds = %.dec_label_pc_12424.preheader_crit_edge, %dec_label_pc_1240c
  %v0_1241c54 = phi i32 [ %v1_12410, %dec_label_pc_1240c ], [ %v0_1241c54.pre, %.dec_label_pc_12424.preheader_crit_edge ]
  %v0_12440 = phi i32 [ %v3_12400, %dec_label_pc_1240c ], [ %v1_123d8, %.dec_label_pc_12424.preheader_crit_edge ]
  %ip.promoted = phi i32 [ %v0_12414, %dec_label_pc_1240c ], [ %v0_123d8, %.dec_label_pc_12424.preheader_crit_edge ]
  %v2_1242451 = and i32 %ip.promoted, %v0_12440
  %v4_1242453 = icmp eq i32 %v2_1242451, 0
  br i1 %v4_1242453, label %dec_label_pc_1241c, label %dec_label_pc_1242c

dec_label_pc_1241c:                               ; preds = %dec_label_pc_12424.preheader, %dec_label_pc_1241c
  %v2_1242056 = phi i32 [ %v2_12420, %dec_label_pc_1241c ], [ %ip.promoted, %dec_label_pc_12424.preheader ]
  %v0_1241c55 = phi i32 [ %v1_1241c, %dec_label_pc_1241c ], [ %v0_1241c54, %dec_label_pc_12424.preheader ]
  %v1_1241c = add i32 %v0_1241c55, 8
  %v2_12420 = mul i32 %v2_1242056, 2
  %v2_12424 = and i32 %v2_12420, %v0_12440
  %v4_12424 = icmp eq i32 %v2_12424, 0
  br i1 %v4_12424, label %dec_label_pc_1241c, label %dec_label_pc_12424.dec_label_pc_1242c_crit_edge

dec_label_pc_12424.dec_label_pc_1242c_crit_edge:  ; preds = %dec_label_pc_1241c
  store i32 %v1_1241c, i32* %r0.global-to-local, align 4
  store i32 %v2_12420, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1242c

dec_label_pc_1242c:                               ; preds = %dec_label_pc_12424.dec_label_pc_1242c_crit_edge, %dec_label_pc_12424.preheader
  %v0_1244c = phi i32 [ %v2_12420, %dec_label_pc_12424.dec_label_pc_1242c_crit_edge ], [ %ip.promoted, %dec_label_pc_12424.preheader ]
  %v0_12470 = phi i32 [ %v1_1241c, %dec_label_pc_12424.dec_label_pc_1242c_crit_edge ], [ %v0_1241c54, %dec_label_pc_12424.preheader ]
  %v1_1242c = add i32 %v0_12470, 12
  %v2_1242c = inttoptr i32 %v1_1242c to i32*
  %v3_1242c = load i32, i32* %v2_1242c, align 4
  store i32 %v3_1242c, i32* @lr, align 4
  %v9_12430 = icmp eq i32 %v3_1242c, %v0_12470
  br i1 %v9_12430, label %dec_label_pc_12438, label %dec_label_pc_12458

dec_label_pc_12438:                               ; preds = %dec_label_pc_1242c
  store i32 126992, i32* %r0.global-to-local, align 4
  %v1_1243c = load i32, i32* @r8, align 4
  %v2_1243c = add i32 %v1_1243c, 126992
  %v3_1243c = inttoptr i32 %v2_1243c to i32*
  %v4_1243c = load i32, i32* %v3_1243c, align 4
  %v2_12440 = sub i32 -1, %v0_1244c
  %v3_12440 = and i32 %v0_12440, %v2_12440
  store i32 %v3_12440, i32* @r4, align 4
  %v1_12444 = load i32, i32* @r5, align 4
  %v4_12444 = mul i32 %v1_12444, 4
  %v5_12444 = add i32 %v4_12444, %v4_1243c
  store i32 %v5_12444, i32* %r3.global-to-local, align 4
  %v1_12448 = add i32 %v0_12470, 8
  store i32 %v1_12448, i32* %r0.global-to-local, align 4
  %v2_1244c = mul i32 %v0_1244c, 2
  store i32 %v2_1244c, i32* %ip.global-to-local, align 4
  %v2_12450 = add i32 %v5_12444, 820
  %v3_12450 = inttoptr i32 %v2_12450 to i32*
  store i32 %v3_12440, i32* %v3_12450, align 4
  %v0_123d0.pre = load i32, i32* %ip.global-to-local, align 4
  %v1_123d8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_123d0

dec_label_pc_12458:                               ; preds = %dec_label_pc_1242c
  %v1_12458 = add i32 %v3_1242c, 4
  %v2_12458 = inttoptr i32 %v1_12458 to i32*
  %v3_12458 = load i32, i32* %v2_12458, align 4
  store i32 %v3_12458, i32* %r3.global-to-local, align 4
  %v1_1245c = and i32 %v3_12458, -4
  store i32 %v1_1245c, i32* %r2.global-to-local, align 4
  %v0_12460 = load i32, i32* @sl, align 4
  %v2_12460 = sub i32 %v1_1245c, %v0_12460
  store i32 %v2_12460, i32* %ip.global-to-local, align 4
  %v1_12464 = add i32 %v3_1242c, 12
  %v2_12464 = inttoptr i32 %v1_12464 to i32*
  %v3_12464 = load i32, i32* %v2_12464, align 4
  store i32 %v3_12464, i32* %r3.global-to-local, align 4
  %tmp209 = icmp ult i32 %v2_12460, 16
  br i1 %tmp209, label %bb143, label %bb144

bb143:                                            ; preds = %dec_label_pc_12458
  %v6_1246c = add i32 %v1_1245c, %v3_1242c
  store i32 %v6_1246c, i32* %r2.global-to-local, align 4
  br label %bb144

bb144:                                            ; preds = %dec_label_pc_12458, %bb143
  %v2_12470 = add i32 %v3_12464, 8
  %v3_12470 = inttoptr i32 %v2_12470 to i32*
  store i32 %v0_12470, i32* %v3_12470, align 4
  %v0_12474 = load i32, i32* %r3.global-to-local, align 4
  %v1_12474 = load i32, i32* %r0.global-to-local, align 4
  %v2_12474 = add i32 %v1_12474, 12
  %v3_12474 = inttoptr i32 %v2_12474 to i32*
  store i32 %v0_12474, i32* %v3_12474, align 4
  %v4_12478 = load i32, i32* @lr, align 4
  br i1 %tmp209, label %.dec_label_pc_12354_crit_edge, label %dec_label_pc_12484

.dec_label_pc_12354_crit_edge:                    ; preds = %bb144
  %v5_12478 = add i32 %v4_12478, 8
  store i32 %v5_12478, i32* %r4.global-to-local, align 4
  %v4_1247c = load i32, i32* %r2.global-to-local, align 4
  %v5_1247c = add i32 %v4_1247c, 4
  %v6_1247c = inttoptr i32 %v5_1247c to i32*
  %v7_1247c = load i32, i32* %v6_1247c, align 4
  store i32 %v7_1247c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_12354

dec_label_pc_12484:                               ; preds = %bb144
  %v1_12484 = load i32, i32* @sl, align 4
  %v2_12484 = add i32 %v1_12484, %v4_12478
  store i32 %v2_12484, i32* %r1.global-to-local, align 4
  %v1_1248c = load i32, i32* @r6, align 4
  %v2_1248c = add i32 %v1_1248c, 8
  %v3_1248c = inttoptr i32 %v2_1248c to i32*
  store i32 %v2_12484, i32* %v3_1248c, align 4
  %v0_12490 = load i32, i32* %r1.global-to-local, align 4
  %v1_12490 = load i32, i32* @r6, align 4
  %v2_12490 = add i32 %v1_12490, 12
  %v3_12490 = inttoptr i32 %v2_12490 to i32*
  store i32 %v0_12490, i32* %v3_12490, align 4
  %v0_12494 = load i32, i32* @r6, align 4
  %v1_12494 = load i32, i32* %r1.global-to-local, align 4
  %v2_12494 = add i32 %v1_12494, 8
  %v3_12494 = inttoptr i32 %v2_12494 to i32*
  store i32 %v0_12494, i32* %v3_12494, align 4
  %v0_12498 = load i32, i32* @r6, align 4
  %v1_12498 = load i32, i32* %r1.global-to-local, align 4
  %v2_12498 = add i32 %v1_12498, 12
  %v3_12498 = inttoptr i32 %v2_12498 to i32*
  store i32 %v0_12498, i32* %v3_12498, align 4
  %tmp210 = icmp ult i32 %v1_12484, 256
  br i1 %tmp210, label %bb145, label %.thread121

bb145:                                            ; preds = %dec_label_pc_12484
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %r2.global-to-local, align 4
  %v8_124a4 = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v8_124a4, i32* %r3.global-to-local, align 4
  %v4_124a8 = load i32, i32* %r1.global-to-local, align 4
  %v6_124a8 = add i32 %v8_124a4, 48
  %v7_124a8 = inttoptr i32 %v6_124a8 to i32*
  store i32 %v4_124a8, i32* %v7_124a8, align 4
  br label %.thread121

.thread121:                                       ; preds = %dec_label_pc_12484, %bb145
  %v0_124ac = load i32, i32* @sl, align 4
  %v1_124ac = or i32 %v0_124ac, 1
  store i32 %v1_124ac, i32* %r2.global-to-local, align 4
  %v0_124b0 = load i32, i32* %ip.global-to-local, align 4
  %v1_124b0 = or i32 %v0_124b0, 1
  store i32 %v1_124b0, i32* %r3.global-to-local, align 4
  %v0_124b4 = load i32, i32* @lr, align 4
  %v1_124b4 = add i32 %v0_124b4, 8
  store i32 %v1_124b4, i32* %r4.global-to-local, align 4
  %v2_124b8 = add i32 %v0_124b4, 4
  %v3_124b8 = inttoptr i32 %v2_124b8 to i32*
  store i32 %v1_124ac, i32* %v3_124b8, align 4
  %v0_124bc = load i32, i32* %ip.global-to-local, align 4
  %v1_124bc = load i32, i32* %r1.global-to-local, align 4
  %v3_124bc = add i32 %v1_124bc, %v0_124bc
  %v4_124bc = inttoptr i32 %v3_124bc to i32*
  store i32 %v0_124bc, i32* %v4_124bc, align 4
  %v0_124c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_124c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_124c0 = add i32 %v1_124c0, 4
  %v3_124c0 = inttoptr i32 %v2_124c0 to i32*
  store i32 %v0_124c0, i32* %v3_124c0, align 4
  br label %dec_label_pc_12914

dec_label_pc_124c8.loopexit:                      ; preds = %dec_label_pc_123e8
  br label %dec_label_pc_124c8

dec_label_pc_124c8:                               ; preds = %dec_label_pc_124c8.loopexit, %dec_label_pc_120dc, %dec_label_pc_120e4
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %ip.global-to-local, align 4
  %v4_124d0 = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_124d0, i32* @r0, align 4
  %v1_124d4 = add i32 %v4_124d0, 44
  %v2_124d4 = inttoptr i32 %v1_124d4 to i32*
  %v3_124d4 = load i32, i32* %v2_124d4, align 4
  store i32 %v3_124d4, i32* %ip.global-to-local, align 4
  %v1_124d8 = add i32 %v3_124d4, 4
  %v2_124d8 = inttoptr i32 %v1_124d8 to i32*
  %v3_124d8 = load i32, i32* %v2_124d8, align 4
  %v0_124dc = load i32, i32* @sl, align 4
  %v1_124dc = add i32 %v0_124dc, 16
  store i32 %v1_124dc, i32* %r1.global-to-local, align 4
  %v1_124e0 = and i32 %v3_124d8, -4
  store i32 %v1_124e0, i32* %r3.global-to-local, align 4
  %v3_124e4 = icmp ult i32 %v1_124e0, %v1_124dc
  br i1 %v3_124e4, label %dec_label_pc_12514, label %dec_label_pc_124f0

dec_label_pc_124f0:                               ; preds = %dec_label_pc_124c8
  %v2_124f0 = sub i32 %v1_124e0, %v0_124dc
  %v2_124f4 = add i32 %v0_124dc, %v3_124d4
  store i32 %v2_124f4, i32* %r1.global-to-local, align 4
  %v1_124f8 = or i32 %v2_124f0, 1
  store i32 %v1_124f8, i32* %r3.global-to-local, align 4
  %v1_124fc = or i32 %v0_124dc, 1
  store i32 %v1_124fc, i32* %r2.global-to-local, align 4
  %v1_12500 = add i32 %v3_124d4, 8
  store i32 %v1_12500, i32* %r4.global-to-local, align 4
  store i32 %v1_124fc, i32* %v2_124d8, align 4
  %v0_12508 = load i32, i32* %r1.global-to-local, align 4
  %v1_12508 = load i32, i32* @r0, align 4
  %v2_12508 = add i32 %v1_12508, 44
  %v3_12508 = inttoptr i32 %v2_12508 to i32*
  store i32 %v0_12508, i32* %v3_12508, align 4
  %v0_1250c = load i32, i32* %r3.global-to-local, align 4
  %v1_1250c = load i32, i32* %r1.global-to-local, align 4
  %v2_1250c = add i32 %v1_1250c, 4
  %v3_1250c = inttoptr i32 %v2_1250c to i32*
  store i32 %v0_1250c, i32* %v3_1250c, align 4
  br label %dec_label_pc_12914

dec_label_pc_12514:                               ; preds = %dec_label_pc_124c8
  %v1_12514 = inttoptr i32 %v4_124d0 to i32*
  %v2_12514 = load i32, i32* %v1_12514, align 4
  store i32 %v2_12514, i32* %r3.global-to-local, align 4
  %v1_12518 = and i32 %v2_12514, 2
  store i32 %v1_12518, i32* %ip.global-to-local, align 4
  %v2_12518 = icmp eq i32 %v1_12518, 0
  %v1_1251c = add i32 %v4_124d0, 860
  %v2_1251c = inttoptr i32 %v1_1251c to i32*
  %v3_1251c = load i32, i32* %v2_1251c, align 4
  store i32 %v3_1251c, i32* %r1.global-to-local, align 4
  br i1 %v2_12518, label %dec_label_pc_12534, label %dec_label_pc_12524

dec_label_pc_12524:                               ; preds = %dec_label_pc_12514
  %v0_12524 = call i32 @function_12ef4()
  %v0_12528 = load i32, i32* @sl, align 4
  %v1_12528 = add i32 %v0_12528, -7
  store i32 %v1_12528, i32* @r0, align 4
  %v0_1252c = call i32 @function_1203c()
  store i32 %v0_1252c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12910

dec_label_pc_12534:                               ; preds = %dec_label_pc_12514
  %v1_12534 = add i32 %v4_124d0, 844
  %v2_12534 = inttoptr i32 %v1_12534 to i32*
  %v3_12534 = load i32, i32* %v2_12534, align 4
  store i32 %v3_12534, i32* %r3.global-to-local, align 4
  %v3_12538 = icmp ult i32 %v0_124dc, %v3_12534
  %v1_1253c = add i32 %v3_1251c, -1
  store i32 %v1_1253c, i32* %sb.global-to-local, align 4
  br i1 %v3_12538, label %dec_label_pc_12610, label %dec_label_pc_12544

dec_label_pc_12544:                               ; preds = %dec_label_pc_12534
  %v1_12544 = add i32 %v4_124d0, 852
  %v2_12544 = inttoptr i32 %v1_12544 to i32*
  %v3_12544 = load i32, i32* %v2_12544, align 4
  store i32 %v3_12544, i32* %r2.global-to-local, align 4
  %v1_12548 = add i32 %v4_124d0, 848
  %v2_12548 = inttoptr i32 %v1_12548 to i32*
  %v3_12548 = load i32, i32* %v2_12548, align 4
  store i32 %v3_12548, i32* %r3.global-to-local, align 4
  %v6_12550 = icmp slt i32 %v3_12548, %v3_12544
  br i1 %v6_12550, label %dec_label_pc_12554, label %dec_label_pc_12610

dec_label_pc_12554:                               ; preds = %dec_label_pc_12544
  %v1_12554 = add i32 %v0_124dc, 10
  %v2_12558 = add i32 %v1_12554, %v3_1251c
  store i32 %v2_12558, i32* %r3.global-to-local, align 4
  %v2_1255c = sub i32 0, %v3_1251c
  %v3_1255c = and i32 %v2_12558, %v2_1255c
  store i32 %v3_1255c, i32* @r4, align 4
  %tmp211 = icmp ugt i32 %v3_1255c, %v0_124dc
  br i1 %tmp211, label %dec_label_pc_12568, label %dec_label_pc_12610

dec_label_pc_12568:                               ; preds = %dec_label_pc_12554
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_1255c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_12580 = call i32 @function_14324(i32 0, i32 %v3_1255c, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_12580, i32* %r0.global-to-local, align 4
  %v7_12584 = icmp eq i32 %v6_12580, -1
  br i1 %v7_12584, label %dec_label_pc_12568.dec_label_pc_12610_crit_edge, label %dec_label_pc_1258c

dec_label_pc_12568.dec_label_pc_12610_crit_edge:  ; preds = %dec_label_pc_12568
  %v1_12634.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_12610

dec_label_pc_1258c:                               ; preds = %dec_label_pc_12568
  %v1_1258c = urem i32 %v6_12580, 8
  store i32 %v1_1258c, i32* %r2.global-to-local, align 4
  %v2_1258c = icmp eq i32 %v1_1258c, 0
  br i1 %v2_1258c, label %bb146, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_1258c
  %v2_12590 = sub nsw i32 8, %v1_1258c
  store i32 %v2_12590, i32* %r3.global-to-local, align 4
  %v2_12594 = load i32, i32* @r4, align 4
  %v3_12594 = sub i32 %v2_12594, %v2_12590
  %v3_12598 = add i32 %v2_12590, %v6_12580
  store i32 %v3_12598, i32* %lr.global-to-local, align 4
  %v2_125a0 = or i32 %v3_12594, 2
  store i32 %v2_125a0, i32* %r2.global-to-local, align 4
  %v5_125a8 = inttoptr i32 %v3_12598 to i32*
  store i32 %v2_12590, i32* %v5_125a8, align 4
  %v1_125ac = load i32, i32* %r2.global-to-local, align 4
  %v2_125ac = load i32, i32* %lr.global-to-local, align 4
  %v3_125ac = add i32 %v2_125ac, 4
  %v4_125ac = inttoptr i32 %v3_125ac to i32*
  store i32 %v1_125ac, i32* %v4_125ac, align 4
  br label %.thread27

bb146:                                            ; preds = %dec_label_pc_1258c
  store i32 %v6_12580, i32* %lr.global-to-local, align 4
  %v1_125a447 = load i32, i32* @r4, align 4
  %v2_125a448 = or i32 %v1_125a447, 2
  store i32 %v2_125a448, i32* %r3.global-to-local, align 4
  %v3_125b0 = inttoptr i32 %v6_12580 to i32*
  store i32 0, i32* %v3_125b0, align 4
  %v1_125b4 = load i32, i32* %r3.global-to-local, align 4
  %v2_125b4 = load i32, i32* %lr.global-to-local, align 4
  %v3_125b4 = add i32 %v2_125b4, 4
  %v4_125b4 = inttoptr i32 %v3_125b4 to i32*
  store i32 %v1_125b4, i32* %v4_125b4, align 4
  br label %.thread27

.thread27:                                        ; preds = %.thread25, %bb146
  store i32 126992, i32* %r2.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_125c0 = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_125c0, i32* %ip.global-to-local, align 4
  %v1_125c4 = add i32 %v4_125c0, 848
  %v2_125c4 = inttoptr i32 %v1_125c4 to i32*
  %v3_125c4 = load i32, i32* %v2_125c4, align 4
  store i32 %v3_125c4, i32* %r3.global-to-local, align 4
  %v1_125c8 = add i32 %v4_125c0, 856
  %v2_125c8 = inttoptr i32 %v1_125c8 to i32*
  %v3_125c8 = load i32, i32* %v2_125c8, align 4
  store i32 %v3_125c8, i32* %r2.global-to-local, align 4
  %v1_125cc = add i32 %v3_125c4, 1
  store i32 %v1_125cc, i32* %r3.global-to-local, align 4
  %v7_125d4 = icmp sgt i32 %v1_125cc, %v3_125c8
  br i1 %v7_125d4, label %bb147, label %bb148

bb147:                                            ; preds = %.thread27
  store i32 %v1_125cc, i32* %v2_125c8, align 4
  %v0_125d8.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_125d8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb148

bb148:                                            ; preds = %.thread27, %bb147
  %v1_125d8 = phi i32 [ %v4_125c0, %.thread27 ], [ %v1_125d8.pre, %bb147 ]
  %v0_125d8 = phi i32 [ %v1_125cc, %.thread27 ], [ %v0_125d8.pre, %bb147 ]
  %v2_125d8 = add i32 %v1_125d8, 848
  %v3_125d8 = inttoptr i32 %v2_125d8 to i32*
  store i32 %v0_125d8, i32* %v3_125d8, align 4
  %v0_125dc = load i32, i32* %ip.global-to-local, align 4
  %v1_125dc = add i32 %v0_125dc, 868
  %v2_125dc = inttoptr i32 %v1_125dc to i32*
  %v3_125dc = load i32, i32* %v2_125dc, align 4
  store i32 %v3_125dc, i32* %r3.global-to-local, align 4
  %v1_125e0 = add i32 %v0_125dc, 880
  %v2_125e0 = inttoptr i32 %v1_125e0 to i32*
  %v3_125e0 = load i32, i32* %v2_125e0, align 4
  store i32 %v3_125e0, i32* %r2.global-to-local, align 4
  %v0_125e4 = load i32, i32* @r4, align 4
  %v2_125e4 = add i32 %v0_125e4, %v3_125dc
  store i32 %v2_125e4, i32* %r1.global-to-local, align 4
  %v1_125e8 = add i32 %v0_125dc, 872
  %v2_125e8 = inttoptr i32 %v1_125e8 to i32*
  %v3_125e8 = load i32, i32* %v2_125e8, align 4
  store i32 %v3_125e8, i32* %r3.global-to-local, align 4
  %v1_125f0 = add i32 %v0_125dc, 884
  %v2_125f0 = inttoptr i32 %v1_125f0 to i32*
  %v3_125f0 = load i32, i32* %v2_125f0, align 4
  store i32 %v3_125f0, i32* %r2.global-to-local, align 4
  %tmp212 = icmp ugt i32 %v2_125e4, %v3_125e0
  br i1 %tmp212, label %bb149, label %bb150

bb149:                                            ; preds = %bb148
  store i32 %v2_125e4, i32* %v2_125e0, align 4
  %v0_125f8.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_125f8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %bb148, %bb149
  %v1_125f8 = phi i32 [ %v0_125dc, %bb148 ], [ %v1_125f8.pre, %bb149 ]
  %v0_125f8 = phi i32 [ %v2_125e4, %bb148 ], [ %v0_125f8.pre, %bb149 ]
  %v2_125f8 = add i32 %v1_125f8, 868
  %v3_125f8 = inttoptr i32 %v2_125f8 to i32*
  store i32 %v0_125f8, i32* %v3_125f8, align 4
  %v0_125fc = load i32, i32* %r1.global-to-local, align 4
  %v1_125fc = load i32, i32* %r3.global-to-local, align 4
  %v2_125fc = add i32 %v1_125fc, %v0_125fc
  store i32 %v2_125fc, i32* %r1.global-to-local, align 4
  %v1_12600 = load i32, i32* %r2.global-to-local, align 4
  %v0_12604 = load i32, i32* %lr.global-to-local, align 4
  %v1_12604 = add i32 %v0_12604, 8
  store i32 %v1_12604, i32* %r0.global-to-local, align 4
  %tmp213 = icmp ugt i32 %v2_125fc, %v1_12600
  br i1 %tmp213, label %bb151, label %dec_label_pc_12910

bb151:                                            ; preds = %bb150
  %v5_12608 = load i32, i32* %ip.global-to-local, align 4
  %v6_12608 = add i32 %v5_12608, 884
  %v7_12608 = inttoptr i32 %v6_12608 to i32*
  store i32 %v2_125fc, i32* %v7_12608, align 4
  br label %dec_label_pc_12910

dec_label_pc_12610:                               ; preds = %dec_label_pc_12554, %dec_label_pc_12534, %dec_label_pc_12568.dec_label_pc_12610_crit_edge, %dec_label_pc_12544
  %v1_12634 = phi i32 [ %v1_12634.pre, %dec_label_pc_12568.dec_label_pc_12610_crit_edge ], [ %v0_124dc, %dec_label_pc_12544 ], [ %v0_124dc, %dec_label_pc_12534 ], [ %v0_124dc, %dec_label_pc_12554 ]
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %ip.global-to-local, align 4
  %v4_12618 = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_12618, i32* %r3.global-to-local, align 4
  %v1_1261c = add i32 %v4_12618, 44
  %v2_1261c = inttoptr i32 %v1_1261c to i32*
  %v3_1261c = load i32, i32* %v2_1261c, align 4
  store i32 %v3_1261c, i32* %r0.global-to-local, align 4
  %v1_12620 = add i32 %v4_12618, 864
  %v2_12620 = inttoptr i32 %v1_12620 to i32*
  %v3_12620 = load i32, i32* %v2_12620, align 4
  store i32 %v3_12620, i32* %r2.global-to-local, align 4
  %v1_12624 = add i32 %v4_12618, 840
  %v2_12624 = inttoptr i32 %v1_12624 to i32*
  %v3_12624 = load i32, i32* %v2_12624, align 4
  store i32 %v3_12624, i32* %r3.global-to-local, align 4
  %v1_12628 = add i32 %v3_1261c, 4
  %v2_12628 = inttoptr i32 %v1_12628 to i32*
  %v3_12628 = load i32, i32* %v2_12628, align 4
  store i32 %v3_12628, i32* %r1.global-to-local, align 4
  %v1_12630 = urem i32 %v3_12620, 2
  %v2_12630 = icmp eq i32 %v1_12630, 0
  %v1_1262c = add i32 %v1_12634, 16
  %v2_12634 = add i32 %v1_1262c, %v3_12624
  store i32 %v2_12634, i32* %r3.global-to-local, align 4
  %v1_12638 = and i32 %v3_12628, -4
  store i32 %v1_12638, i32* @r8, align 4
  br i1 %v2_12630, label %bb153, label %bb152

bb152:                                            ; preds = %dec_label_pc_12610
  %v3_1263c = sub i32 %v2_12634, %v1_12638
  store i32 %v3_1263c, i32* %r3.global-to-local, align 4
  br label %bb153

bb153:                                            ; preds = %dec_label_pc_12610, %bb152
  %v0_12640 = phi i32 [ %v2_12634, %dec_label_pc_12610 ], [ %v3_1263c, %bb152 ]
  %v1_12640 = load i32, i32* %sb.global-to-local, align 4
  %v2_12640 = add i32 %v1_12640, %v0_12640
  store i32 %v2_12640, i32* %r3.global-to-local, align 4
  %v1_12644 = sub i32 -1, %v1_12640
  store i32 %v1_12644, i32* %fp.global-to-local, align 4
  %v2_12648 = and i32 %v2_12640, %v1_12644
  store i32 %v2_12648, i32* @r5, align 4
  %tmp154 = icmp slt i32 %v2_12648, 1
  br i1 %tmp154, label %dec_label_pc_1266c, label %dec_label_pc_12658

dec_label_pc_12658:                               ; preds = %bb153
  store i32 %v2_12648, i32* %r0.global-to-local, align 4
  %v1_1265c = call i32 @function_145b0(i32 %v2_12648)
  store i32 %v1_1265c, i32* %r0.global-to-local, align 4
  %v3_12660 = icmp eq i32 %v1_1265c, -1
  store i32 %v1_1265c, i32* @r4, align 4
  br i1 %v3_12660, label %dec_label_pc_1266c, label %dec_label_pc_126d8

dec_label_pc_1266c:                               ; preds = %dec_label_pc_12658, %bb153
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %r1.global-to-local, align 4
  %v4_12674 = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_12674, i32* %r6.global-to-local, align 4
  %v1_12678 = add i32 %v4_12674, 864
  %v2_12678 = inttoptr i32 %v1_12678 to i32*
  %v3_12678 = load i32, i32* %v2_12678, align 4
  store i32 %v3_12678, i32* %r3.global-to-local, align 4
  %v1_1267c = urem i32 %v3_12678, 2
  %v2_1267c = icmp eq i32 %v1_1267c, 0
  br i1 %v2_1267c, label %.thread29thread-pre-split, label %bb155

bb155:                                            ; preds = %dec_label_pc_1266c
  %v1_12680 = load i32, i32* @r8, align 4
  %v2_12680 = load i32, i32* %sb.global-to-local, align 4
  %v3_12680 = add i32 %v2_12680, %v1_12680
  %v2_12684 = load i32, i32* @r5, align 4
  %v3_12684 = add i32 %v3_12680, %v2_12684
  store i32 %v3_12684, i32* %r3.global-to-local, align 4
  %v2_12688 = load i32, i32* %fp.global-to-local, align 4
  %v3_12688 = and i32 %v2_12688, %v3_12684
  store i32 %v3_12688, i32* @r5, align 4
  br label %.thread29

.thread29thread-pre-split:                        ; preds = %dec_label_pc_1266c
  %v0_1268c.pr = load i32, i32* @r5, align 4
  br label %.thread29

.thread29:                                        ; preds = %.thread29thread-pre-split, %bb155
  %v0_1268c = phi i32 [ %v0_1268c.pr, %.thread29thread-pre-split ], [ %v3_12688, %bb155 ]
  %v2_1268c = icmp ugt i32 %v0_1268c, 1048575
  br i1 %v2_1268c, label %bb157, label %bb156

bb156:                                            ; preds = %.thread29
  store i32 1048576, i32* @r5, align 4
  br label %bb157

bb157:                                            ; preds = %.thread29, %bb156
  %v0_126a4 = phi i32 [ %v0_1268c, %.thread29 ], [ 1048576, %bb156 ]
  %v1_12694 = load i32, i32* @sl, align 4
  %tmp214 = icmp ugt i32 %v0_126a4, %v1_12694
  br i1 %tmp214, label %dec_label_pc_1269c, label %dec_label_pc_12900

dec_label_pc_1269c:                               ; preds = %bb157
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_126a4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_126b8 = call i32 @function_14324(i32 0, i32 %v0_126a4, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_126b8, i32* %r0.global-to-local, align 4
  %v3_126bc = icmp eq i32 %v6_126b8, -1
  %v8_126bc = icmp eq i32 %v6_126b8, -1
  store i32 %v6_126b8, i32* @r4, align 4
  br i1 %v8_126bc, label %.thread32, label %bb158

bb158:                                            ; preds = %dec_label_pc_1269c
  %v1_126c4 = load i32, i32* %r6.global-to-local, align 4
  %v2_126c4 = add i32 %v1_126c4, 864
  %v3_126c4 = inttoptr i32 %v2_126c4 to i32*
  %v4_126c4 = load i32, i32* %v3_126c4, align 4
  %v2_126c8 = load i32, i32* @r5, align 4
  %v3_126c8 = add i32 %v2_126c8, %v6_126b8
  store i32 %v3_126c8, i32* %r0.global-to-local, align 4
  %v2_126cc = and i32 %v4_126c4, -2
  store i32 %v2_126cc, i32* %r3.global-to-local, align 4
  store i32 %v2_126cc, i32* %v3_126c4, align 4
  br label %.thread32

.thread32:                                        ; preds = %dec_label_pc_1269c, %bb158
  br i1 %v3_126bc, label %dec_label_pc_126d8, label %dec_label_pc_126dc

dec_label_pc_126d8:                               ; preds = %.thread32, %dec_label_pc_12658
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_126dc

dec_label_pc_126dc:                               ; preds = %.thread32, %dec_label_pc_126d8
  %v0_126dc = load i32, i32* @r4, align 4
  %v7_126dc = icmp eq i32 %v0_126dc, -1
  br i1 %v7_126dc, label %dec_label_pc_12900, label %dec_label_pc_126e4

dec_label_pc_126e4:                               ; preds = %dec_label_pc_126dc
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %r2.global-to-local, align 4
  %v4_126ec = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_126ec, i32* %ip.global-to-local, align 4
  store i32 %v3_1261c, i32* %r2.global-to-local, align 4
  %v1_126f4 = add i32 %v4_126ec, 872
  %v2_126f4 = inttoptr i32 %v1_126f4 to i32*
  %v3_126f4 = load i32, i32* %v2_126f4, align 4
  %v1_126f8 = load i32, i32* @r8, align 4
  %v2_126f8 = add i32 %v1_126f8, %v3_1261c
  store i32 %v2_126f8, i32* %r1.global-to-local, align 4
  %v0_126fc = load i32, i32* @r5, align 4
  %v2_126fc = add i32 %v0_126fc, %v3_126f4
  store i32 %v2_126fc, i32* %r3.global-to-local, align 4
  %v9_12700 = icmp eq i32 %v0_126dc, %v2_126f8
  br i1 %v9_12700, label %bb159, label %.thread122

.thread122:                                       ; preds = %dec_label_pc_126e4
  store i32 %v2_126fc, i32* %v2_126f4, align 4
  br label %dec_label_pc_1271c

bb159:                                            ; preds = %dec_label_pc_126e4
  %v1_12704 = load i32, i32* %r0.global-to-local, align 4
  %v8_12704 = icmp eq i32 %v1_12704, -1
  store i32 %v2_126fc, i32* %v2_126f4, align 4
  br i1 %v8_12704, label %.thread34, label %dec_label_pc_1271c

.thread34:                                        ; preds = %bb159
  %v1_1270c = load i32, i32* @r5, align 4
  %v2_1270c = load i32, i32* @r8, align 4
  %v3_1270c = add i32 %v2_1270c, %v1_1270c
  %v2_12710 = or i32 %v3_1270c, 1
  store i32 %v2_12710, i32* %r3.global-to-local, align 4
  %v2_12714 = load i32, i32* %r2.global-to-local, align 4
  %v3_12714 = add i32 %v2_12714, 4
  %v4_12714 = inttoptr i32 %v3_12714 to i32*
  store i32 %v2_12710, i32* %v4_12714, align 4
  br label %dec_label_pc_12894

dec_label_pc_1271c:                               ; preds = %bb159, %.thread122
  %v0_12720.pr = load i32, i32* @r8, align 4
  %v0_1271c = load i32, i32* %ip.global-to-local, align 4
  %v1_1271c = add i32 %v0_1271c, 864
  %v2_1271c = inttoptr i32 %v1_1271c to i32*
  %v3_1271c = load i32, i32* %v2_1271c, align 4
  store i32 %v3_1271c, i32* %r2.global-to-local, align 4
  %v2_12720 = icmp eq i32 %v0_12720.pr, 0
  br i1 %v2_12720, label %.thread37, label %.thread36

.thread37:                                        ; preds = %dec_label_pc_1271c
  store i32 0, i32* %r3.global-to-local, align 4
  br label %.thread40

.thread36:                                        ; preds = %dec_label_pc_1271c
  %v2_12728 = urem i32 %v3_1271c, 2
  store i32 %v2_12728, i32* %r3.global-to-local, align 4
  %v2_1272c = icmp eq i32 %v2_12728, 0
  br i1 %v2_1272c, label %.thread40, label %dec_label_pc_12734

dec_label_pc_12734:                               ; preds = %.thread36
  %v0_12734 = load i32, i32* @r4, align 4
  %v1_12734 = load i32, i32* %r1.global-to-local, align 4
  %v3_12734 = icmp ult i32 %v0_12734, %v1_12734
  br i1 %v3_12734, label %bb160, label %.thread40

bb160:                                            ; preds = %dec_label_pc_12734
  %v2_12738 = and i32 %v3_1271c, -2
  store i32 %v2_12738, i32* %r3.global-to-local, align 4
  store i32 %v2_12738, i32* %v2_1271c, align 4
  br label %.thread40

.thread40:                                        ; preds = %dec_label_pc_12734, %.thread37, %.thread36, %bb160
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %ip.global-to-local, align 4
  %v4_12748 = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_12748, i32* @r7, align 4
  %v1_1274c = add i32 %v4_12748, 864
  %v2_1274c = inttoptr i32 %v1_1274c to i32*
  %v3_1274c = load i32, i32* %v2_1274c, align 4
  store i32 %v3_1274c, i32* %r3.global-to-local, align 4
  %v1_12750 = urem i32 %v3_1274c, 2
  store i32 %v1_12750, i32* @r6, align 4
  %v2_12750 = icmp eq i32 %v1_12750, 0
  br i1 %v2_12750, label %dec_label_pc_127e4, label %dec_label_pc_12758

dec_label_pc_12758:                               ; preds = %.thread40
  %v0_12758 = load i32, i32* @r8, align 4
  %v2_12758 = icmp eq i32 %v0_12758, 0
  br i1 %v2_12758, label %.thread43, label %bb161

bb161:                                            ; preds = %dec_label_pc_12758
  %v2_1275c = add i32 %v4_12748, 872
  %v3_1275c = inttoptr i32 %v2_1275c to i32*
  %v4_1275c = load i32, i32* %v3_1275c, align 4
  store i32 %v4_1275c, i32* %r2.global-to-local, align 4
  %v1_12760 = load i32, i32* %r1.global-to-local, align 4
  %v2_12760 = load i32, i32* @r4, align 4
  %v3_12760 = sub i32 %v2_12760, %v1_12760
  %v3_12764 = add i32 %v3_12760, %v4_1275c
  store i32 %v3_12764, i32* %r3.global-to-local, align 4
  store i32 %v3_12764, i32* %v3_1275c, align 4
  br label %.thread43

.thread43:                                        ; preds = %dec_label_pc_12758, %bb161
  %v0_1276c = load i32, i32* @r4, align 4
  %v1_1276c = urem i32 %v0_1276c, 8
  store i32 %v1_1276c, i32* %r3.global-to-local, align 4
  %v2_1276c = icmp eq i32 %v1_1276c, 0
  br i1 %v2_1276c, label %.thread44, label %bb162

bb162:                                            ; preds = %.thread43
  %v2_12770 = sub nsw i32 8, %v1_1276c
  store i32 %v2_12770, i32* %r3.global-to-local, align 4
  %v3_12774 = add i32 %v2_12770, %v0_1276c
  store i32 %v3_12774, i32* @r7, align 4
  br label %.thread44

.thread44:                                        ; preds = %.thread43, %bb162
  %v0_1277c = phi i32 [ 0, %.thread43 ], [ %v2_12770, %bb162 ]
  %v1_12778 = load i32, i32* @r5, align 4
  %v2_12778 = add i32 %v1_12778, %v0_1276c
  store i32 %v2_12778, i32* @r6, align 4
  %v1_1277c = load i32, i32* @r8, align 4
  %v2_1277c = add i32 %v2_12778, %v0_1277c
  %v2_12780 = add i32 %v2_1277c, %v1_1277c
  store i32 %v2_12780, i32* %r1.global-to-local, align 4
  %v1_12784 = load i32, i32* %sb.global-to-local, align 4
  %v2_12784 = add i32 %v1_12784, %v2_12780
  %v1_12788 = load i32, i32* %fp.global-to-local, align 4
  %v2_12788 = and i32 %v1_12788, %v2_12784
  store i32 %v2_12788, i32* %r2.global-to-local, align 4
  %v2_1278c = sub i32 0, %v2_12778
  store i32 %v2_1278c, i32* %r3.global-to-local, align 4
  %v2_12790 = sub i32 %v2_12788, %v2_12778
  store i32 %v2_12790, i32* @r5, align 4
  store i32 %v2_12790, i32* %r0.global-to-local, align 4
  br i1 %v2_1276c, label %bb163, label %bb164

bb163:                                            ; preds = %.thread44
  store i32 %v0_1276c, i32* @r7, align 4
  br label %bb164

bb164:                                            ; preds = %.thread44, %bb163
  %v1_1279c = call i32 @function_145b0(i32 %v2_12790)
  store i32 %v1_1279c, i32* %r0.global-to-local, align 4
  %v3_127a0 = icmp eq i32 %v1_1279c, -1
  br i1 %v3_127a0, label %dec_label_pc_127a8, label %dec_label_pc_127b8

dec_label_pc_127a8:                               ; preds = %bb164
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_127ac = call i32 @function_145b0(i32 0)
  store i32 %v1_127ac, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_12810

dec_label_pc_127b8:                               ; preds = %bb164
  %v1_127b8 = load i32, i32* @r4, align 4
  %v3_127b8 = icmp ult i32 %v1_1279c, %v1_127b8
  br i1 %v3_127b8, label %dec_label_pc_127c0, label %dec_label_pc_12810

dec_label_pc_127c0:                               ; preds = %dec_label_pc_127b8
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %r0.global-to-local, align 4
  %v4_127c8 = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_127c8, i32* %r2.global-to-local, align 4
  %v1_127cc = add i32 %v4_127c8, 864
  %v2_127cc = inttoptr i32 %v1_127cc to i32*
  %v3_127cc = load i32, i32* %v2_127cc, align 4
  %v0_127d0 = load i32, i32* @r6, align 4
  store i32 %v0_127d0, i32* %r0.global-to-local, align 4
  %v1_127d4 = and i32 %v3_127cc, -2
  store i32 %v1_127d4, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_127d4, i32* %v2_127cc, align 4
  br label %dec_label_pc_12810

dec_label_pc_127e4:                               ; preds = %.thread40
  %v0_127e4 = load i32, i32* %r0.global-to-local, align 4
  %v3_127e4 = icmp eq i32 %v0_127e4, -1
  br i1 %v3_127e4, label %dec_label_pc_127ec, label %dec_label_pc_12808

dec_label_pc_127ec:                               ; preds = %dec_label_pc_127e4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_127f0 = call i32 @function_145b0(i32 0)
  store i32 %v1_127f0, i32* %r0.global-to-local, align 4
  %v0_127f4 = load i32, i32* @r7, align 4
  %v1_127f4 = add i32 %v0_127f4, 872
  %v2_127f4 = inttoptr i32 %v1_127f4 to i32*
  %v3_127f4 = load i32, i32* %v2_127f4, align 4
  store i32 %v3_127f4, i32* %r2.global-to-local, align 4
  %v0_127f8 = load i32, i32* @r4, align 4
  %v0_127fc = load i32, i32* @r5, align 4
  %v2_127f8 = add i32 %v3_127f4, %v1_127f0
  %v2_127fc = sub i32 %v2_127f8, %v0_127f8
  %v2_12800 = sub i32 %v2_127fc, %v0_127fc
  store i32 %v2_12800, i32* %r3.global-to-local, align 4
  store i32 %v2_12800, i32* %v2_127f4, align 4
  %v0_1280c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_12808

dec_label_pc_12808:                               ; preds = %dec_label_pc_127e4, %dec_label_pc_127ec
  %v0_1280c = phi i32 [ 0, %dec_label_pc_127e4 ], [ %v0_1280c.pre, %dec_label_pc_127ec ]
  %v0_12808 = load i32, i32* @r4, align 4
  store i32 %v0_12808, i32* @r7, align 4
  store i32 %v0_1280c, i32* @r5, align 4
  br label %dec_label_pc_12810

dec_label_pc_12810:                               ; preds = %dec_label_pc_127b8, %dec_label_pc_127c0, %dec_label_pc_127a8, %dec_label_pc_12808
  %v0_12810 = load i32, i32* %r0.global-to-local, align 4
  %v7_12810 = icmp eq i32 %v0_12810, -1
  br i1 %v7_12810, label %dec_label_pc_12894, label %dec_label_pc_12818

dec_label_pc_12818:                               ; preds = %dec_label_pc_12810
  %v1_12818 = load i32, i32* @r5, align 4
  %v2_12818 = add i32 %v1_12818, %v0_12810
  %v0_1281c = load i32, i32* @r7, align 4
  %v2_1281c = sub i32 %v2_12818, %v0_1281c
  %v1_12820 = or i32 %v2_1281c, 1
  %v2_12824 = add i32 %v0_1281c, 4
  %v3_12824 = inttoptr i32 %v2_12824 to i32*
  store i32 %v1_12820, i32* %v3_12824, align 4
  store i32 126992, i32* %r1.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_12830 = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_12830, i32* @r6, align 4
  %v1_12834 = add i32 %v4_12830, 872
  %v2_12834 = inttoptr i32 %v1_12834 to i32*
  %v3_12834 = load i32, i32* %v2_12834, align 4
  %v0_12838 = load i32, i32* @r8, align 4
  %v2_12838 = icmp eq i32 %v0_12838, 0
  %v0_1283c = load i32, i32* @r5, align 4
  %v2_1283c = add i32 %v0_1283c, %v3_12834
  store i32 %v2_1283c, i32* %r3.global-to-local, align 4
  store i32 %v2_1283c, i32* %v2_12834, align 4
  %v0_12844 = load i32, i32* @r7, align 4
  %v1_12844 = load i32, i32* @r6, align 4
  %v2_12844 = add i32 %v1_12844, 44
  %v3_12844 = inttoptr i32 %v2_12844 to i32*
  store i32 %v0_12844, i32* %v3_12844, align 4
  br i1 %v2_12838, label %dec_label_pc_12894, label %dec_label_pc_1284c

dec_label_pc_1284c:                               ; preds = %dec_label_pc_12818
  %v0_12850 = load i32, i32* @r8, align 4
  %v1_12850 = add i32 %v0_12850, -12
  %v1_12854 = and i32 %v1_12850, -8
  store i32 %v3_1261c, i32* %ip.global-to-local, align 4
  %v2_1285c = add i32 %v1_12854, %v3_1261c
  store i32 %v2_1285c, i32* %r1.global-to-local, align 4
  %v2_12860 = icmp ugt i32 %v1_12854, 14
  store i32 5, i32* %r2.global-to-local, align 4
  %v1_12868 = or i32 %v1_12854, 1
  store i32 %v1_12868, i32* %r3.global-to-local, align 4
  store i32 %v1_12868, i32* %v2_12628, align 4
  %v0_12870 = load i32, i32* %r2.global-to-local, align 4
  %v1_12870 = load i32, i32* %r1.global-to-local, align 4
  %v2_12870 = add i32 %v1_12870, 8
  %v3_12870 = inttoptr i32 %v2_12870 to i32*
  store i32 %v0_12870, i32* %v3_12870, align 4
  %v0_12874 = load i32, i32* %r2.global-to-local, align 4
  %v1_12874 = load i32, i32* %r1.global-to-local, align 4
  %v2_12874 = add i32 %v1_12874, 4
  %v3_12874 = inttoptr i32 %v2_12874 to i32*
  store i32 %v0_12874, i32* %v3_12874, align 4
  br i1 %v2_12860, label %dec_label_pc_1287c, label %dec_label_pc_12894

dec_label_pc_1287c:                               ; preds = %dec_label_pc_1284c
  %v0_1287c = load i32, i32* @r6, align 4
  %v1_1287c = add i32 %v0_1287c, 836
  %v2_1287c = inttoptr i32 %v1_1287c to i32*
  %v3_1287c = load i32, i32* %v2_1287c, align 4
  store i32 %v3_1287c, i32* @r4, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_12884 = load i32, i32* %ip.global-to-local, align 4
  %v1_12884 = add i32 %v0_12884, 8
  store i32 %v1_12884, i32* @r0, align 4
  store i32 -1, i32* %v2_1287c, align 4
  %v0_1288c = call i32 @function_130a8()
  store i32 %v0_1288c, i32* %r0.global-to-local, align 4
  %v0_12890 = load i32, i32* @r4, align 4
  %v1_12890 = load i32, i32* @r6, align 4
  %v2_12890 = add i32 %v1_12890, 836
  %v3_12890 = inttoptr i32 %v2_12890 to i32*
  store i32 %v0_12890, i32* %v3_12890, align 4
  br label %dec_label_pc_12894

dec_label_pc_12894:                               ; preds = %.thread34, %dec_label_pc_1284c, %dec_label_pc_12818, %dec_label_pc_12810, %dec_label_pc_1287c
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %r0.global-to-local, align 4
  %v4_1289c = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_1289c, i32* %lr.global-to-local, align 4
  %v1_128a0 = add i32 %v4_1289c, 872
  store i32 %v1_128a0, i32* %r1.global-to-local, align 4
  %v1_128a4 = inttoptr i32 %v1_128a0 to i32*
  %v2_128a4 = load i32, i32* %v1_128a4, align 4
  store i32 %v2_128a4, i32* %r1.global-to-local, align 4
  %v3_128a4 = add i32 %v4_1289c, 876
  %v4_128a4 = inttoptr i32 %v3_128a4 to i32*
  %v5_128a4 = load i32, i32* %v4_128a4, align 4
  store i32 %v5_128a4, i32* %r3.global-to-local, align 4
  %v1_128ac = add i32 %v4_1289c, 868
  %v2_128ac = inttoptr i32 %v1_128ac to i32*
  %v3_128ac = load i32, i32* %v2_128ac, align 4
  store i32 %v3_128ac, i32* %r3.global-to-local, align 4
  %v1_128b0 = add i32 %v4_1289c, 884
  %v2_128b0 = inttoptr i32 %v1_128b0 to i32*
  %v3_128b0 = load i32, i32* %v2_128b0, align 4
  store i32 %v3_128b0, i32* %r2.global-to-local, align 4
  %v2_128b4 = add i32 %v3_128ac, %v2_128a4
  store i32 %v2_128b4, i32* %r3.global-to-local, align 4
  %tmp215 = icmp ugt i32 %v2_128a4, %v5_128a4
  br i1 %tmp215, label %bb165, label %bb166

bb165:                                            ; preds = %dec_label_pc_12894
  store i32 %v2_128a4, i32* %v4_128a4, align 4
  %v0_128bc.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_128bc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb166

bb166:                                            ; preds = %dec_label_pc_12894, %bb165
  %v1_128bc = phi i32 [ %v3_128b0, %dec_label_pc_12894 ], [ %v1_128bc.pre, %bb165 ]
  %v4_128c0 = phi i32 [ %v2_128b4, %dec_label_pc_12894 ], [ %v0_128bc.pre, %bb165 ]
  %tmp216 = icmp ugt i32 %v4_128c0, %v1_128bc
  br i1 %tmp216, label %bb167, label %bb168

bb167:                                            ; preds = %bb166
  %v5_128c0 = load i32, i32* %lr.global-to-local, align 4
  %v6_128c0 = add i32 %v5_128c0, 884
  %v7_128c0 = inttoptr i32 %v6_128c0 to i32*
  store i32 %v4_128c0, i32* %v7_128c0, align 4
  br label %bb168

bb168:                                            ; preds = %bb166, %bb167
  %v0_128c4 = load i32, i32* %lr.global-to-local, align 4
  %v1_128c4 = add i32 %v0_128c4, 44
  %v2_128c4 = inttoptr i32 %v1_128c4 to i32*
  %v3_128c4 = load i32, i32* %v2_128c4, align 4
  store i32 %v3_128c4, i32* %ip.global-to-local, align 4
  %v1_128c8 = add i32 %v3_128c4, 4
  %v2_128c8 = inttoptr i32 %v1_128c8 to i32*
  %v3_128c8 = load i32, i32* %v2_128c8, align 4
  store i32 %v1_124dc, i32* %r1.global-to-local, align 4
  %v1_128d0 = and i32 %v3_128c8, -4
  store i32 %v1_128d0, i32* %r3.global-to-local, align 4
  %v3_128d4 = icmp ult i32 %v1_128d0, %v1_124dc
  br i1 %v3_128d4, label %dec_label_pc_12900, label %dec_label_pc_128dc

dec_label_pc_128dc:                               ; preds = %bb168
  %v0_128dc = load i32, i32* @sl, align 4
  %v2_128dc = sub i32 %v1_128d0, %v0_128dc
  %v2_128e0 = add i32 %v0_128dc, %v3_128c4
  store i32 %v2_128e0, i32* %r1.global-to-local, align 4
  %v1_128e4 = or i32 %v2_128dc, 1
  store i32 %v1_128e4, i32* %r3.global-to-local, align 4
  %v1_128e8 = or i32 %v0_128dc, 1
  store i32 %v1_128e8, i32* %r2.global-to-local, align 4
  %v1_128ec = add i32 %v3_128c4, 8
  store i32 %v1_128ec, i32* %r0.global-to-local, align 4
  store i32 %v1_128e8, i32* %v2_128c8, align 4
  %v0_128f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_128f4 = load i32, i32* %lr.global-to-local, align 4
  %v2_128f4 = add i32 %v1_128f4, 44
  %v3_128f4 = inttoptr i32 %v2_128f4 to i32*
  store i32 %v0_128f4, i32* %v3_128f4, align 4
  %v0_128f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_128f8 = load i32, i32* %r1.global-to-local, align 4
  %v2_128f8 = add i32 %v1_128f8, 4
  %v3_128f8 = inttoptr i32 %v2_128f8 to i32*
  store i32 %v0_128f8, i32* %v3_128f8, align 4
  br label %dec_label_pc_12910

dec_label_pc_12900:                               ; preds = %bb157, %bb168, %dec_label_pc_126dc
  %v0_12900 = call i32 @function_11a08()
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_12908 = inttoptr i32 %v0_12900 to i32*
  store i32 12, i32* %v2_12908, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12910

dec_label_pc_12910:                               ; preds = %bb151, %bb150, %dec_label_pc_12524, %dec_label_pc_128dc, %dec_label_pc_12900
  %v0_12910 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_12910, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12914

dec_label_pc_12914:                               ; preds = %.thread1, %dec_label_pc_124f0, %.thread121, %dec_label_pc_12360, %dec_label_pc_12354, %dec_label_pc_121bc, %dec_label_pc_12140, %dec_label_pc_12910
  store i32 %v2_12068, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* @r3, align 4
  store i32 126992, i32* %r2.global-to-local, align 4
  %v4_12924 = load i32, i32* inttoptr (i32 127016 to i32*), align 8
  store i32 %v4_12924, i32* @ip, align 4
  store i32 76080, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12924)
  br label %dec_label_pc_12930

dec_label_pc_12930:                               ; preds = %dec_label_pc_120a0, %dec_label_pc_12914
  %v0_12930 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12930, i32* %r0.global-to-local, align 4
  store i32 %v3_1203c, i32* @r4, align 4
  store i32 %v6_1203c, i32* @r5, align 4
  store i32 %v9_1203c, i32* @r6, align 4
  store i32 %v12_1203c, i32* @r7, align 4
  store i32 %v15_1203c, i32* @r8, align 4
  store i32 %v18_1203c, i32* @sb, align 4
  store i32 %v21_1203c, i32* @sl, align 4
  store i32 %v24_1203c, i32* @fp, align 4
  store i32 %v27_1203c, i32* @lr, align 4
  ret i32 %v0_12930

; uselistorder directives
  uselistorder i32 %v0_128dc, { 1, 0, 2 }
  uselistorder i32 %v3_128c4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_128c0, { 1, 0 }
  uselistorder i32 %v2_128a4, { 2, 0, 1, 3 }
  uselistorder i32 %v4_1289c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_12854, { 1, 2, 0 }
  uselistorder i32 %v0_1281c, { 1, 0 }
  uselistorder i32 %v0_12810, { 1, 0 }
  uselistorder i32 %v2_12800, { 1, 0 }
  uselistorder i32 %v2_12790, { 2, 1, 0 }
  uselistorder i32 %v2_12778, { 1, 2, 0, 3 }
  uselistorder i32 %v2_12770, { 1, 0, 2 }
  uselistorder i32 %v1_1276c, { 2, 1, 0 }
  uselistorder i32 %v0_1276c, { 3, 1, 2, 0 }
  uselistorder i32 %v1_12750, { 1, 0 }
  uselistorder i32 %v2_12728, { 1, 0 }
  uselistorder i32 %v3_1271c, { 1, 0, 2 }
  uselistorder i32 %v2_126fc, { 1, 0, 2 }
  uselistorder i32* %v2_126f4, { 1, 0, 2 }
  uselistorder i32 %v0_126dc, { 1, 0 }
  uselistorder i32 %v6_126b8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_126a4, { 2, 1, 0 }
  uselistorder i32 %v0_1268c, { 1, 0 }
  uselistorder i32 %v2_12648, { 1, 0, 2, 3 }
  uselistorder i32 %v1_12644, { 1, 0 }
  uselistorder i32 %v3_1261c, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 %v2_125fc, { 1, 0, 2 }
  uselistorder i32 %v2_125e4, { 1, 2, 0, 3 }
  uselistorder i32 %v1_1258c, { 2, 1, 0 }
  uselistorder i32 %v6_12580, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32 %v3_1255c, { 2, 1, 0, 3 }
  uselistorder i32 %v3_1251c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_124dc, { 5, 6, 7, 0, 1, 8, 3, 2, 4, 9 }
  uselistorder i32 %v3_124d4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_124d0, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v0_124bc, { 1, 0 }
  uselistorder i32 %v7_1247c, { 1, 0 }
  uselistorder i32 %v4_1247c, { 1, 0 }
  uselistorder i32 %v0_1244c, { 1, 0 }
  uselistorder i32 %v2_12420, { 3, 2, 1, 0 }
  uselistorder i32 %ip.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_1241c54, { 1, 0 }
  uselistorder i32 %v1_123e8, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v1_123d0., { 1, 2, 0 }
  uselistorder i32 %v0_123d8, { 0, 1, 3, 2 }
  uselistorder i32 %v1_123d8, { 1, 0 }
  uselistorder i32 %v3_123b8, { 1, 0 }
  uselistorder i32 %v4_123b4, { 1, 0, 2 }
  uselistorder i32 %v1_12324, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1237c, { 1, 0 }
  uselistorder i32 %v1_12360, { 1, 0 }
  uselistorder i32 %v1_12200, { 1, 0 }
  uselistorder i32 %v0_12340, { 2, 0, 1, 3 }
  uselistorder i32 %v3_12308, { 2, 0, 1, 3 }
  uselistorder i32 %v0_1239c.pre, { 1, 2, 0 }
  uselistorder i32 %v0_122e4, { 2, 1, 0 }
  uselistorder i32 %v3_122d8, { 5, 6, 4, 3, 2, 0, 1 }
  uselistorder i32 %v0_121f8, { 0, 5, 4, 3, 1, 2 }
  uselistorder i32 %v1_122a0, { 1, 0 }
  uselistorder i32 %v3_12294, { 1, 0 }
  uselistorder i32 %v0_122a0, { 1, 0 }
  uselistorder i32 %v3_12278, { 0, 2, 3, 1 }
  uselistorder i32 %v2_12268, { 1, 0, 2 }
  uselistorder i32 %v3_12220, { 2, 1, 0 }
  uselistorder i32 %v0_12210, { 3, 2, 1, 0 }
  uselistorder i32 %v0_121e0, { 1, 0 }
  uselistorder i32 %v1_12194, { 2, 1, 0, 3 }
  uselistorder i32 %v0_12190, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v3_12134, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_12128, { 1, 0 }
  uselistorder i32 %v3_120f8, { 1, 0 }
  uselistorder i32 %v0_120ec, { 5, 6, 4, 2, 0, 3, 1 }
  uselistorder i32 %v2_120cc, { 0, 2, 1, 3 }
  uselistorder i1 %v7_120c0, { 1, 0 }
  uselistorder i32 %v0_12098, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 15, 16, 0, 1, 2, 3, 5, 4, 7, 8, 6, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r3.global-to-local, { 109, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 40, 41, 42, 44, 45, 46, 47, 1, 2, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 81, 89, 76, 77, 78, 79, 80, 82, 83, 84, 85, 0, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108 }
  uselistorder i32* %r2.global-to-local, { 57, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 49, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56 }
  uselistorder i32* %r1.global-to-local, { 55, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 46, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54 }
  uselistorder i32* %r0.global-to-local, { 57, 54, 55, 56, 5, 6, 7, 19, 11, 8, 20, 9, 10, 13, 12, 17, 14, 21, 16, 15, 22, 18, 0, 24, 23, 25, 3, 26, 27, 32, 28, 29, 4, 30, 31, 33, 34, 35, 38, 39, 36, 37, 44, 41, 40, 42, 43, 45, 2, 46, 47, 48, 49, 1, 50, 53, 52, 51 }
  uselistorder i32* %lr.global-to-local, { 13, 2, 0, 1, 3, 6, 4, 5, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %ip.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 13, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 23, 24, 36, 35, 28, 25, 1, 26, 27, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_14324, { 1, 0 }
  uselistorder i32 (i32)* @function_11fc4, { 1, 0 }
  uselistorder label %dec_label_pc_12930, { 1, 0 }
  uselistorder label %dec_label_pc_12914, { 7, 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_12910, { 4, 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12900, { 1, 2, 0 }
  uselistorder label %bb168, { 1, 0 }
  uselistorder label %bb166, { 1, 0 }
  uselistorder label %dec_label_pc_12894, { 4, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_12810, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_12808, { 1, 0 }
  uselistorder label %bb164, { 1, 0 }
  uselistorder label %.thread44, { 1, 0 }
  uselistorder label %.thread43, { 1, 0 }
  uselistorder label %.thread40, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_126dc, { 1, 0 }
  uselistorder label %.thread32, { 1, 0 }
  uselistorder label %bb157, { 1, 0 }
  uselistorder label %bb153, { 1, 0 }
  uselistorder label %dec_label_pc_12610, { 2, 0, 3, 1 }
  uselistorder label %bb150, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %.thread27, { 1, 0 }
  uselistorder label %dec_label_pc_124c8, { 0, 2, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb144, { 1, 0 }
  uselistorder label %dec_label_pc_1241c, { 1, 0 }
  uselistorder label %dec_label_pc_12424.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_123e8, { 1, 0 }
  uselistorder label %dec_label_pc_1239c, { 1, 0 }
  uselistorder label %dec_label_pc_12330, { 1, 0 }
  uselistorder label %dec_label_pc_1232c, { 1, 0 }
  uselistorder label %dec_label_pc_122d8, { 1, 0 }
  uselistorder label %dec_label_pc_122c4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1228c, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12278, { 1, 0 }
  uselistorder label %bb140, { 1, 0 }
  uselistorder label %bb138, { 1, 0 }
}

define i32 @function_12944(i32 %arg1) local_unnamed_addr {
dec_label_pc_12944:
  %v0_12944 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12944, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_12944
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_12944, %bb
  %v10_12958 = phi i32 [ %arg1, %dec_label_pc_12944 ], [ 0, %bb ]
  ret i32 %v10_12958

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_1295c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1295c:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %v3_1295c = load i32, i32* @r4, align 4
  %v6_1295c = load i32, i32* @r5, align 4
  %v9_1295c = load i32, i32* @r6, align 4
  %v12_1295c = load i32, i32* @lr, align 4
  %v2_12964 = icmp eq i32 %arg1, 0
  store i32 126992, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_12974 = mul i32 %arg2, %arg1
  store i32 %v2_12974, i32* @r6, align 4
  br i1 %v2_12964, label %dec_label_pc_129a4, label %dec_label_pc_1297c

dec_label_pc_1297c:                               ; preds = %dec_label_pc_1295c
  store i32 %arg1, i32* @r1, align 4
  store i32 %v2_12974, i32* @r0, align 4
  %v0_12984 = call i32 @function_1107c()
  %v0_12988 = load i32, i32* @r4, align 4
  %v9_12988 = icmp eq i32 %v0_12988, %v0_12984
  br i1 %v9_12988, label %dec_label_pc_1297c.dec_label_pc_129a4_crit_edge, label %dec_label_pc_12990

dec_label_pc_1297c.dec_label_pc_129a4_crit_edge:  ; preds = %dec_label_pc_1297c
  %v0_129a8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_129a4

dec_label_pc_12990:                               ; preds = %dec_label_pc_1297c
  %v0_12990 = call i32 @function_11a08()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_1299c = inttoptr i32 %v0_12990 to i32*
  store i32 12, i32* %v2_1299c, align 4
  br label %dec_label_pc_12a68

dec_label_pc_129a4:                               ; preds = %dec_label_pc_1297c.dec_label_pc_129a4_crit_edge, %dec_label_pc_1295c
  %v0_129c0 = phi i32 [ %v0_129a8.pre, %dec_label_pc_1297c.dec_label_pc_129a4_crit_edge ], [ 126992, %dec_label_pc_1295c ]
  %v2_129a8 = add i32 %v0_129c0, 68
  %v3_129a8 = inttoptr i32 %v2_129a8 to i32*
  %v4_129a8 = load i32, i32* %v3_129a8, align 4
  store i32 %v4_129a8, i32* @r4, align 4
  %v2_129c0 = add i32 %v0_129c0, 72
  %v3_129c0 = inttoptr i32 %v2_129c0 to i32*
  %v4_129c0 = load i32, i32* %v3_129c0, align 4
  store i32 %v4_129c0, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_129c0)
  %v0_129d4 = load i32, i32* @r5, align 4
  %v2_129d4 = add i32 %v0_129d4, 16
  %v3_129d4 = inttoptr i32 %v2_129d4 to i32*
  %v4_129d4 = load i32, i32* %v3_129d4, align 4
  store i32 %v4_129d4, i32* %ip.global-to-local, align 4
  store i32 76256, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_129d4)
  %v0_129e0 = load i32, i32* @r6, align 4
  store i32 %v0_129e0, i32* @r0, align 4
  %v0_129e4 = call i32 @function_1203c()
  store i32 %v0_129e4, i32* %r4.global-to-local, align 4
  %v2_129e8 = icmp eq i32 %v0_129e4, 0
  br i1 %v2_129e8, label %.thread, label %dec_label_pc_129f0

dec_label_pc_129f0:                               ; preds = %dec_label_pc_129a4
  %v1_129f0 = add i32 %v0_129e4, -4
  %v2_129f0 = inttoptr i32 %v1_129f0 to i32*
  %v3_129f0 = load i32, i32* %v2_129f0, align 4
  %v1_129f4 = and i32 %v3_129f0, 2
  %v2_129f4 = icmp eq i32 %v1_129f4, 0
  br i1 %v2_129f4, label %dec_label_pc_129fc, label %.thread

dec_label_pc_129fc:                               ; preds = %dec_label_pc_129f0
  %v1_129fc7 = add i32 %v3_129f0, -4
  %v1_12a00 = and i32 %v1_129fc7, -4
  store i32 %v1_12a00, i32* @r2, align 4
  %v3_12a04 = udiv i32 %v1_12a00, 4
  store i32 %v3_12a04, i32* %ip.global-to-local, align 4
  %tmp = icmp eq i32 %v1_12a00, 36
  %v2_12a0c = icmp ult i32 %v1_12a00, 33
  %v3_12a0c = or i1 %tmp, %v2_12a0c
  br i1 %v3_12a0c, label %dec_label_pc_12a18, label %dec_label_pc_12a10

dec_label_pc_12a10:                               ; preds = %dec_label_pc_129fc
  %v2_12a10 = inttoptr i32 %v0_129e4 to i8*
  %v3_12a10 = call i32 @function_11a60(i8* %v2_12a10, i32 0)
  br label %.thread

dec_label_pc_12a18:                               ; preds = %dec_label_pc_129fc
  %tmp8 = icmp eq i32 %v1_12a00, 16
  %v2_12a1c = inttoptr i32 %v0_129e4 to i32*
  store i32 0, i32* %v2_12a1c, align 4
  %v1_12a20 = load i32, i32* %r4.global-to-local, align 4
  %v2_12a20 = add i32 %v1_12a20, 4
  %v3_12a20 = inttoptr i32 %v2_12a20 to i32*
  store i32 0, i32* %v3_12a20, align 4
  %v1_12a24 = load i32, i32* %r4.global-to-local, align 4
  %v2_12a24 = add i32 %v1_12a24, 8
  %v3_12a24 = inttoptr i32 %v2_12a24 to i32*
  store i32 0, i32* %v3_12a24, align 4
  %v2_12a28 = icmp ult i32 %v1_12a00, 13
  %v3_12a28 = or i1 %tmp8, %v2_12a28
  br i1 %v3_12a28, label %.thread, label %dec_label_pc_12a2c

dec_label_pc_12a2c:                               ; preds = %dec_label_pc_12a18
  %v0_12a2c = load i32, i32* %ip.global-to-local, align 4
  %v1_12a30 = load i32, i32* %r4.global-to-local, align 4
  %v2_12a30 = add i32 %v1_12a30, 12
  %v3_12a30 = inttoptr i32 %v2_12a30 to i32*
  store i32 0, i32* %v3_12a30, align 4
  %v1_12a34 = load i32, i32* %r4.global-to-local, align 4
  %v2_12a34 = add i32 %v1_12a34, 16
  %v3_12a34 = inttoptr i32 %v2_12a34 to i32*
  store i32 0, i32* %v3_12a34, align 4
  %tmp9 = icmp ult i32 %v0_12a2c, 7
  br i1 %tmp9, label %.thread, label %dec_label_pc_12a3c

dec_label_pc_12a3c:                               ; preds = %dec_label_pc_12a2c
  %v0_12a3c = load i32, i32* %ip.global-to-local, align 4
  %v7_12a3c = icmp eq i32 %v0_12a3c, 9
  %v1_12a40 = load i32, i32* %r4.global-to-local, align 4
  %v2_12a40 = add i32 %v1_12a40, 20
  %v3_12a40 = inttoptr i32 %v2_12a40 to i32*
  store i32 0, i32* %v3_12a40, align 4
  %v1_12a44 = load i32, i32* %r4.global-to-local, align 4
  %v2_12a44 = add i32 %v1_12a44, 24
  %v3_12a44 = inttoptr i32 %v2_12a44 to i32*
  store i32 0, i32* %v3_12a44, align 4
  br i1 %v7_12a3c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_12a3c
  %v2_12a48 = load i32, i32* %r4.global-to-local, align 4
  %v3_12a48 = add i32 %v2_12a48, 32
  %v4_12a48 = inttoptr i32 %v3_12a48 to i32*
  store i32 0, i32* %v4_12a48, align 4
  %v2_12a4c = load i32, i32* %r4.global-to-local, align 4
  %v3_12a4c = add i32 %v2_12a4c, 28
  %v4_12a4c = inttoptr i32 %v3_12a4c to i32*
  store i32 0, i32* %v4_12a4c, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12a3c, %dec_label_pc_129f0, %dec_label_pc_12a2c, %dec_label_pc_12a18, %dec_label_pc_129a4, %dec_label_pc_12a10, %bb
  %v0_12a5c = load i32, i32* @r5, align 4
  %v2_12a5c = add i32 %v0_12a5c, 24
  %v3_12a5c = inttoptr i32 %v2_12a5c to i32*
  %v4_12a5c = load i32, i32* %v3_12a5c, align 4
  store i32 %v4_12a5c, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_12a5c)
  br label %dec_label_pc_12a68

dec_label_pc_12a68:                               ; preds = %dec_label_pc_12990, %.thread
  %v0_12a68 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v3_1295c, i32* @r4, align 4
  store i32 %v6_1295c, i32* @r5, align 4
  store i32 %v9_1295c, i32* @r6, align 4
  store i32 %v12_1295c, i32* @lr, align 4
  ret i32 %v0_12a68

; uselistorder directives
  uselistorder i32 %v1_12a00, { 0, 5, 1, 4, 3, 2 }
  uselistorder i32 %v0_129e4, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder i32* %ip.global-to-local, { 2, 3, 4, 0, 1 }
  uselistorder i32 33, { 0, 8, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12a68, { 1, 0 }
  uselistorder label %.thread, { 6, 0, 2, 3, 5, 1, 4 }
}

define i32 @function_12a7c(i32 %arg1) local_unnamed_addr {
dec_label_pc_12a7c:
  %v0_12a7c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12a7c, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_12a7c
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_12a7c, %bb
  %v10_12a8c = phi i32 [ %arg1, %dec_label_pc_12a7c ], [ 0, %bb ]
  ret i32 %v10_12a8c

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @function_12a90(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12a90:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_12a90 = load i32, i32* @r4, align 4
  %v6_12a90 = load i32, i32* @r5, align 4
  %v9_12a90 = load i32, i32* @r6, align 4
  %v12_12a90 = load i32, i32* @r7, align 4
  %v15_12a90 = load i32, i32* @r8, align 4
  %v18_12a90 = load i32, i32* @sb, align 4
  %v21_12a90 = load i32, i32* @sl, align 4
  %v24_12a90 = load i32, i32* @fp, align 4
  %v27_12a90 = load i32, i32* @lr, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_12a9c = icmp eq i32* %arg1, null
  store i32 126992, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_12a9c, label %dec_label_pc_12ab0, label %dec_label_pc_12ac0

dec_label_pc_12ab0:                               ; preds = %dec_label_pc_12a90
  store i32 %arg2, i32* @r0, align 4
  %v0_12ab4 = call i32 @function_1203c()
  store i32 %v0_12ab4, i32* %r0.global-to-local, align 4
  store i32 %v0_12ab4, i32* @r4, align 4
  br label %dec_label_pc_12e18

dec_label_pc_12ac0:                               ; preds = %dec_label_pc_12a90
  %v2_12ac0 = icmp eq i32 %arg2, 0
  br i1 %v2_12ac0, label %dec_label_pc_12ac8, label %dec_label_pc_12ad4

dec_label_pc_12ac8:                               ; preds = %dec_label_pc_12ac0
  %v0_12ac8 = call i32 @function_130a8()
  store i32 %v0_12ac8, i32* %r0.global-to-local, align 4
  %v0_12acc = load i32, i32* @r6, align 4
  store i32 %v0_12acc, i32* @r4, align 4
  br label %dec_label_pc_12e18

dec_label_pc_12ad4:                               ; preds = %dec_label_pc_12ac0
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_12adc = load i32, i32* inttoptr (i32 127060 to i32*), align 4
  store i32 %v4_12adc, i32* @r4, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_12adc, i32* %r2.global-to-local, align 4
  %v4_12ae8 = load i32, i32* inttoptr (i32 127028 to i32*), align 4
  store i32 %v4_12ae8, i32* %r1.global-to-local, align 4
  %v2_12aec = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_12aec, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_12af4 = load i32, i32* inttoptr (i32 127064 to i32*), align 8
  call void @__pseudo_branch(i32 %v4_12af4)
  %v0_12b00 = load i32, i32* @r4, align 4
  store i32 %v0_12b00, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %r1.global-to-local, align 4
  %v4_12b0c = load i32, i32* inttoptr (i32 127008 to i32*), align 32
  store i32 %v4_12b0c, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_12b18.395 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12b0c)
  %v0_12b18 = load i32, i32* @r6, align 4
  %tmp36 = icmp ult i32 %v0_12b18, -32
  br i1 %tmp36, label %dec_label_pc_12b34, label %dec_label_pc_12b20

dec_label_pc_12b20:                               ; preds = %dec_label_pc_12ad4
  %v0_12b20 = call i32 @function_11a08()
  store i32 %v0_12b20, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_12b2c = inttoptr i32 %v0_12b20 to i32*
  store i32 12, i32* %v2_12b2c, align 4
  br label %dec_label_pc_12e18

dec_label_pc_12b34:                               ; preds = %dec_label_pc_12ad4
  %v1_12b34 = add i32 %v0_12b18, 11
  store i32 %v1_12b34, i32* %r0.global-to-local, align 4
  %v0_12b38 = load i32, i32* @r5, align 4
  %v1_12b38 = add i32 %v0_12b38, -4
  %v2_12b38 = inttoptr i32 %v1_12b38 to i32*
  %v3_12b38 = load i32, i32* %v2_12b38, align 4
  store i32 %v3_12b38, i32* %r2.global-to-local, align 4
  %v2_12b3c = icmp ugt i32 %v1_12b34, 14
  %v7_12b3c = icmp eq i32 %v1_12b34, 15
  %v2_12b40 = xor i1 %v2_12b3c, true
  %v3_12b40 = or i1 %v7_12b3c, %v2_12b40
  br i1 %v3_12b40, label %bb, label %bb27

bb:                                               ; preds = %dec_label_pc_12b34
  store i32 16, i32* @sb, align 4
  br label %bb27

bb27:                                             ; preds = %dec_label_pc_12b34, %bb
  %v2_12b44 = xor i1 %v7_12b3c, true
  %v3_12b44 = and i1 %v2_12b3c, %v2_12b44
  br i1 %v3_12b44, label %bb28, label %bb29

bb28:                                             ; preds = %bb27
  %v5_12b44 = and i32 %v1_12b34, -8
  store i32 %v5_12b44, i32* @sb, align 4
  br label %bb29

bb29:                                             ; preds = %bb27, %bb28
  %v1_12b48 = and i32 %v3_12b38, 2
  %v2_12b48 = icmp eq i32 %v1_12b48, 0
  %v1_12b4c = add i32 %v0_12b38, -8
  store i32 %v1_12b4c, i32* @sl, align 4
  %v1_12b50 = and i32 %v3_12b38, -4
  store i32 %v1_12b50, i32* @r6, align 4
  br i1 %v2_12b48, label %dec_label_pc_12b58, label %dec_label_pc_12d30

dec_label_pc_12b58:                               ; preds = %bb29
  %v1_12b58 = load i32, i32* @sb, align 4
  %v3_12b58 = icmp ult i32 %v1_12b50, %v1_12b58
  br i1 %v3_12b58, label %dec_label_pc_12b64, label %bb30

bb30:                                             ; preds = %dec_label_pc_12b58
  store i32 %v1_12b50, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12cc8

dec_label_pc_12b64:                               ; preds = %dec_label_pc_12b58
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_12b6c = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_12b6c, i32* %r0.global-to-local, align 4
  %v1_12b70 = add i32 %v4_12b6c, 44
  %v2_12b70 = inttoptr i32 %v1_12b70 to i32*
  %v3_12b70 = load i32, i32* %v2_12b70, align 4
  store i32 %v3_12b70, i32* %r3.global-to-local, align 4
  %v2_12b74 = add i32 %v1_12b50, %v1_12b4c
  store i32 %v2_12b74, i32* @r4, align 4
  %v9_12b78 = icmp eq i32 %v2_12b74, %v3_12b70
  %v1_12b7c = add i32 %v2_12b74, 4
  %v2_12b7c = inttoptr i32 %v1_12b7c to i32*
  %v3_12b7c = load i32, i32* %v2_12b7c, align 4
  store i32 %v3_12b7c, i32* %r1.global-to-local, align 4
  br i1 %v9_12b78, label %dec_label_pc_12b84, label %dec_label_pc_12bc0

dec_label_pc_12b84:                               ; preds = %dec_label_pc_12b64
  %v1_12b84 = and i32 %v3_12b7c, -4
  %v2_12b88 = add i32 %v1_12b84, %v1_12b50
  store i32 %v2_12b88, i32* %r1.global-to-local, align 4
  %v1_12b8c = add i32 %v1_12b58, 16
  store i32 %v1_12b8c, i32* %r3.global-to-local, align 4
  %v3_12b90 = icmp ult i32 %v2_12b88, %v1_12b8c
  br i1 %v3_12b90, label %dec_label_pc_12c14, label %dec_label_pc_12b98

dec_label_pc_12b98:                               ; preds = %dec_label_pc_12b84
  %v2_12b98 = sub i32 %v2_12b88, %v1_12b58
  %v1_12b9c = urem i32 %v3_12b38, 2
  %v2_12ba0 = add i32 %v1_12b58, %v1_12b4c
  store i32 %v2_12ba0, i32* %r1.global-to-local, align 4
  %v2_12ba4 = or i32 %v1_12b58, %v1_12b9c
  store i32 %v2_12ba4, i32* %r2.global-to-local, align 4
  %v1_12ba8 = or i32 %v2_12b98, 1
  store i32 %v1_12ba8, i32* %r3.global-to-local, align 4
  store i32 %v0_12b38, i32* @r4, align 4
  store i32 %v2_12ba4, i32* %v2_12b38, align 4
  %v0_12bb4 = load i32, i32* %r1.global-to-local, align 4
  %v1_12bb4 = load i32, i32* %r0.global-to-local, align 4
  %v2_12bb4 = add i32 %v1_12bb4, 44
  %v3_12bb4 = inttoptr i32 %v2_12bb4 to i32*
  store i32 %v0_12bb4, i32* %v3_12bb4, align 4
  %v0_12bb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_12bb8 = load i32, i32* %r1.global-to-local, align 4
  %v2_12bb8 = add i32 %v1_12bb8, 4
  %v3_12bb8 = inttoptr i32 %v2_12bb8 to i32*
  store i32 %v0_12bb8, i32* %v3_12bb8, align 4
  br label %dec_label_pc_12dfc

dec_label_pc_12bc0:                               ; preds = %dec_label_pc_12b64
  %v1_12bc0 = and i32 %v3_12b7c, -2
  %v2_12bc4 = add i32 %v1_12bc0, %v2_12b74
  store i32 %v2_12bc4, i32* %r3.global-to-local, align 4
  %v1_12bc8 = add i32 %v2_12bc4, 4
  %v2_12bc8 = inttoptr i32 %v1_12bc8 to i32*
  %v3_12bc8 = load i32, i32* %v2_12bc8, align 4
  store i32 %v3_12bc8, i32* %r3.global-to-local, align 4
  %v1_12bcc = urem i32 %v3_12bc8, 2
  %v2_12bcc = icmp eq i32 %v1_12bcc, 0
  br i1 %v2_12bcc, label %dec_label_pc_12bd4, label %dec_label_pc_12c14

dec_label_pc_12bd4:                               ; preds = %dec_label_pc_12bc0
  %v1_12bd4 = and i32 %v3_12b7c, -4
  store i32 %v1_12bd4, i32* %r3.global-to-local, align 4
  %v2_12bd8 = add i32 %v1_12bd4, %v1_12b50
  store i32 %v2_12bd8, i32* %r0.global-to-local, align 4
  %v3_12bdc = icmp ult i32 %v2_12bd8, %v1_12b58
  br i1 %v3_12bdc, label %dec_label_pc_12c14, label %dec_label_pc_12be4

dec_label_pc_12be4:                               ; preds = %dec_label_pc_12bd4
  %v1_12be4 = add i32 %v1_12b50, %v0_12b38
  %v2_12be4 = inttoptr i32 %v1_12be4 to i32*
  %v3_12be4 = load i32, i32* %v2_12be4, align 4
  store i32 %v3_12be4, i32* %r1.global-to-local, align 4
  %v1_12be8 = add i32 %v3_12be4, 12
  %v2_12be8 = inttoptr i32 %v1_12be8 to i32*
  %v3_12be8 = load i32, i32* %v2_12be8, align 4
  store i32 %v3_12be8, i32* %r3.global-to-local, align 4
  %v9_12bec = icmp eq i32 %v3_12be8, %v2_12b74
  %v1_12bf0 = add i32 %v2_12b74, 12
  %v2_12bf0 = inttoptr i32 %v1_12bf0 to i32*
  %v3_12bf0 = load i32, i32* %v2_12bf0, align 4
  store i32 %v3_12bf0, i32* %r2.global-to-local, align 4
  br i1 %v9_12bec, label %dec_label_pc_12bf8, label %dec_label_pc_12c04

dec_label_pc_12bf8:                               ; preds = %dec_label_pc_12be4
  %v1_12bf8 = add i32 %v3_12bf0, 8
  %v2_12bf8 = inttoptr i32 %v1_12bf8 to i32*
  %v3_12bf8 = load i32, i32* %v2_12bf8, align 4
  store i32 %v3_12bf8, i32* %r3.global-to-local, align 4
  %v9_12bfc = icmp eq i32 %v3_12bf8, %v2_12b74
  br i1 %v9_12bfc, label %dec_label_pc_12c08, label %dec_label_pc_12c04

dec_label_pc_12c04:                               ; preds = %dec_label_pc_12be4, %dec_label_pc_12bf8
  %v0_12c04 = call i32 @function_13324()
  store i32 %v0_12c04, i32* %r0.global-to-local, align 4
  %v0_12c08.pre = load i32, i32* @r1, align 4
  %v1_12c08.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_12c08

dec_label_pc_12c08:                               ; preds = %dec_label_pc_12bf8, %dec_label_pc_12c04
  %v1_12c08 = phi i32 [ %v3_12bf0, %dec_label_pc_12bf8 ], [ %v1_12c08.pre, %dec_label_pc_12c04 ]
  %v0_12c08 = phi i32 [ %v3_12be4, %dec_label_pc_12bf8 ], [ %v0_12c08.pre, %dec_label_pc_12c04 ]
  %v2_12c08 = add i32 %v1_12c08, 8
  %v3_12c08 = inttoptr i32 %v2_12c08 to i32*
  store i32 %v0_12c08, i32* %v3_12c08, align 4
  %v0_12c0c = load i32, i32* %r2.global-to-local, align 4
  %v1_12c0c = load i32, i32* %r1.global-to-local, align 4
  %v2_12c0c = add i32 %v1_12c0c, 12
  %v3_12c0c = inttoptr i32 %v2_12c0c to i32*
  store i32 %v0_12c0c, i32* %v3_12c0c, align 4
  %v1_12cc8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12cc8

dec_label_pc_12c14:                               ; preds = %dec_label_pc_12b84, %dec_label_pc_12bd4, %dec_label_pc_12bc0
  %v1_12c14 = add i32 %v1_12b58, -7
  store i32 %v1_12c14, i32* @r0, align 4
  %v0_12c18 = call i32 @function_1203c()
  store i32 %v0_12c18, i32* @r0, align 4
  store i32 %v0_12c18, i32* %r1.global-to-local, align 4
  %v2_12c1c = icmp eq i32 %v0_12c18, 0
  br i1 %v2_12c1c, label %bb31, label %dec_label_pc_12c28

bb31:                                             ; preds = %dec_label_pc_12c14
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_12dfc

dec_label_pc_12c28:                               ; preds = %dec_label_pc_12c14
  %v1_12c30.pre = load i32, i32* @r4, align 4
  %v1_12c28 = add i32 %v0_12c18, -4
  %v2_12c28 = inttoptr i32 %v1_12c28 to i32*
  %v3_12c28 = load i32, i32* %v2_12c28, align 4
  store i32 %v3_12c28, i32* @r3, align 4
  %v1_12c2c = add i32 %v0_12c18, -8
  store i32 %v1_12c2c, i32* @r7, align 4
  %v9_12c30 = icmp eq i32 %v1_12c2c, %v1_12c30.pre
  br i1 %v9_12c30, label %.thread2, label %dec_label_pc_12c40

.thread2:                                         ; preds = %dec_label_pc_12c28
  %v2_12c34 = and i32 %v3_12c28, -4
  store i32 %v2_12c34, i32* %r3.global-to-local, align 4
  %v2_12c38 = load i32, i32* @r6, align 4
  %v3_12c38 = add i32 %v2_12c38, %v2_12c34
  store i32 %v3_12c38, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12cc8

dec_label_pc_12c40:                               ; preds = %dec_label_pc_12c28
  %v0_12c40 = load i32, i32* @r6, align 4
  %v1_12c40 = add i32 %v0_12c40, -4
  store i32 %v1_12c40, i32* @r2, align 4
  %v3_12c44 = udiv i32 %v1_12c40, 4
  store i32 %v3_12c44, i32* @ip, align 4
  %tmp37 = and i32 %v1_12c40, -4
  %tmp38 = icmp eq i32 %tmp37, 36
  %v2_12c4c = icmp ult i32 %v1_12c40, 36
  %v3_12c4c = or i1 %tmp38, %v2_12c4c
  %v0_12c5c = load i32, i32* @r5, align 4
  br i1 %v3_12c4c, label %dec_label_pc_12c5c, label %dec_label_pc_12c50

dec_label_pc_12c50:                               ; preds = %dec_label_pc_12c40
  store i32 %v0_12c5c, i32* @r1, align 4
  %v0_12c54 = call i32 @function_11b10()
  store i32 %v0_12c54, i32* %r0.global-to-local, align 4
  br label %.thread6

dec_label_pc_12c5c:                               ; preds = %dec_label_pc_12c40
  %v1_12c5c = inttoptr i32 %v0_12c5c to i32*
  %v2_12c5c = load i32, i32* %v1_12c5c, align 4
  store i32 %v2_12c5c, i32* %r3.global-to-local, align 4
  %v2_12c60 = inttoptr i32 %v0_12c18 to i32*
  store i32 %v2_12c5c, i32* %v2_12c60, align 4
  %v0_12c64 = load i32, i32* @r5, align 4
  %v1_12c64 = add i32 %v0_12c64, 4
  %v2_12c64 = inttoptr i32 %v1_12c64 to i32*
  %v3_12c64 = load i32, i32* %v2_12c64, align 4
  store i32 %v3_12c64, i32* %r3.global-to-local, align 4
  %v1_12c68 = load i32, i32* %r1.global-to-local, align 4
  %v2_12c68 = add i32 %v1_12c68, 4
  %v3_12c68 = inttoptr i32 %v2_12c68 to i32*
  store i32 %v3_12c64, i32* %v3_12c68, align 4
  %v0_12c6c = load i32, i32* @r5, align 4
  %v1_12c6c = add i32 %v0_12c6c, 8
  %v2_12c6c = inttoptr i32 %v1_12c6c to i32*
  %v3_12c6c = load i32, i32* %v2_12c6c, align 4
  store i32 %v3_12c6c, i32* %r3.global-to-local, align 4
  %v0_12c70 = load i32, i32* @ip, align 4
  %v1_12c74 = load i32, i32* %r1.global-to-local, align 4
  %v2_12c74 = add i32 %v1_12c74, 8
  %v3_12c74 = inttoptr i32 %v2_12c74 to i32*
  store i32 %v3_12c6c, i32* %v3_12c74, align 4
  %tmp39 = icmp ult i32 %v0_12c70, 5
  br i1 %tmp39, label %.thread6, label %dec_label_pc_12c7c

dec_label_pc_12c7c:                               ; preds = %dec_label_pc_12c5c
  %v0_12c7c = load i32, i32* @r5, align 4
  %v1_12c7c = add i32 %v0_12c7c, 12
  %v2_12c7c = inttoptr i32 %v1_12c7c to i32*
  %v3_12c7c = load i32, i32* %v2_12c7c, align 4
  store i32 %v3_12c7c, i32* %r3.global-to-local, align 4
  %v1_12c80 = load i32, i32* %r1.global-to-local, align 4
  %v2_12c80 = add i32 %v1_12c80, 12
  %v3_12c80 = inttoptr i32 %v2_12c80 to i32*
  store i32 %v3_12c7c, i32* %v3_12c80, align 4
  %v0_12c84 = load i32, i32* @r5, align 4
  %v1_12c84 = add i32 %v0_12c84, 16
  %v2_12c84 = inttoptr i32 %v1_12c84 to i32*
  %v3_12c84 = load i32, i32* %v2_12c84, align 4
  store i32 %v3_12c84, i32* %r3.global-to-local, align 4
  %v0_12c88 = load i32, i32* @ip, align 4
  %v1_12c8c = load i32, i32* %r1.global-to-local, align 4
  %v2_12c8c = add i32 %v1_12c8c, 16
  %v3_12c8c = inttoptr i32 %v2_12c8c to i32*
  store i32 %v3_12c84, i32* %v3_12c8c, align 4
  %tmp40 = icmp ult i32 %v0_12c88, 7
  br i1 %tmp40, label %.thread6, label %dec_label_pc_12c94

dec_label_pc_12c94:                               ; preds = %dec_label_pc_12c7c
  %v0_12c94 = load i32, i32* @r5, align 4
  %v1_12c94 = add i32 %v0_12c94, 20
  %v2_12c94 = inttoptr i32 %v1_12c94 to i32*
  %v3_12c94 = load i32, i32* %v2_12c94, align 4
  store i32 %v3_12c94, i32* %r3.global-to-local, align 4
  %v1_12c98 = load i32, i32* %r1.global-to-local, align 4
  %v2_12c98 = add i32 %v1_12c98, 20
  %v3_12c98 = inttoptr i32 %v2_12c98 to i32*
  store i32 %v3_12c94, i32* %v3_12c98, align 4
  %v0_12c9c = load i32, i32* @r5, align 4
  %v1_12c9c = add i32 %v0_12c9c, 24
  %v2_12c9c = inttoptr i32 %v1_12c9c to i32*
  %v3_12c9c = load i32, i32* %v2_12c9c, align 4
  store i32 %v3_12c9c, i32* %r3.global-to-local, align 4
  %v1_12ca0 = load i32, i32* %r1.global-to-local, align 4
  %v2_12ca0 = add i32 %v1_12ca0, 24
  %v3_12ca0 = inttoptr i32 %v2_12ca0 to i32*
  store i32 %v3_12c9c, i32* %v3_12ca0, align 4
  %v0_12ca4 = load i32, i32* @ip, align 4
  %v7_12ca4 = icmp eq i32 %v0_12ca4, 9
  br i1 %v7_12ca4, label %bb32, label %.thread6

bb32:                                             ; preds = %dec_label_pc_12c94
  %v1_12ca8 = load i32, i32* @r5, align 4
  %v2_12ca8 = add i32 %v1_12ca8, 28
  %v3_12ca8 = inttoptr i32 %v2_12ca8 to i32*
  %v4_12ca8 = load i32, i32* %v3_12ca8, align 4
  store i32 %v4_12ca8, i32* %r3.global-to-local, align 4
  %v2_12cac = load i32, i32* %r1.global-to-local, align 4
  %v3_12cac = add i32 %v2_12cac, 28
  %v4_12cac = inttoptr i32 %v3_12cac to i32*
  store i32 %v4_12ca8, i32* %v4_12cac, align 4
  %v1_12cb0 = load i32, i32* @r5, align 4
  %v2_12cb0 = add i32 %v1_12cb0, 32
  %v3_12cb0 = inttoptr i32 %v2_12cb0 to i32*
  %v4_12cb0 = load i32, i32* %v3_12cb0, align 4
  store i32 %v4_12cb0, i32* %r3.global-to-local, align 4
  %v2_12cb4 = load i32, i32* %r1.global-to-local, align 4
  %v3_12cb4 = add i32 %v2_12cb4, 32
  %v4_12cb4 = inttoptr i32 %v3_12cb4 to i32*
  store i32 %v4_12cb0, i32* %v4_12cb4, align 4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_12c94, %dec_label_pc_12c7c, %dec_label_pc_12c5c, %dec_label_pc_12c50, %bb32
  %v0_12cb8 = load i32, i32* @r5, align 4
  store i32 %v0_12cb8, i32* @r0, align 4
  %v0_12cbc = call i32 @function_130a8()
  store i32 %v0_12cbc, i32* %r0.global-to-local, align 4
  %v0_12cc0 = load i32, i32* @r7, align 4
  %v1_12cc0 = add i32 %v0_12cc0, 8
  store i32 %v1_12cc0, i32* @r4, align 4
  br label %dec_label_pc_12dfc

dec_label_pc_12cc8:                               ; preds = %bb30, %.thread2, %dec_label_pc_12c08
  %v0_12cdc = phi i32 [ %v3_12c38, %.thread2 ], [ %v1_12b50, %bb30 ], [ %v1_12cc8.pre, %dec_label_pc_12c08 ]
  %v0_12cc8 = load i32, i32* @sb, align 4
  %v2_12cc8 = sub i32 %v0_12cdc, %v0_12cc8
  store i32 %v2_12cc8, i32* %r1.global-to-local, align 4
  %v0_12cd0 = load i32, i32* @sl, align 4
  %v1_12cd0 = add i32 %v0_12cd0, 4
  %v2_12cd0 = inttoptr i32 %v1_12cd0 to i32*
  %v3_12cd0 = load i32, i32* %v2_12cd0, align 4
  %tmp41 = icmp ugt i32 %v2_12cc8, 15
  %v1_12cf8 = urem i32 %v3_12cd0, 2
  store i32 %v1_12cf8, i32* %r3.global-to-local, align 4
  br i1 %tmp41, label %dec_label_pc_12cf8, label %dec_label_pc_12cd8

dec_label_pc_12cd8:                               ; preds = %dec_label_pc_12cc8
  %v2_12cdc = or i32 %v1_12cf8, %v0_12cdc
  store i32 %v2_12cdc, i32* %r3.global-to-local, align 4
  store i32 %v2_12cdc, i32* %v2_12cd0, align 4
  %v0_12ce4 = load i32, i32* @sl, align 4
  %v1_12ce4 = load i32, i32* %r0.global-to-local, align 4
  %v2_12ce4 = add i32 %v1_12ce4, %v0_12ce4
  store i32 %v2_12ce4, i32* %r2.global-to-local, align 4
  %v1_12ce8 = add i32 %v2_12ce4, 4
  %v2_12ce8 = inttoptr i32 %v1_12ce8 to i32*
  %v3_12ce8 = load i32, i32* %v2_12ce8, align 4
  %v1_12cec = or i32 %v3_12ce8, 1
  store i32 %v1_12cec, i32* %r3.global-to-local, align 4
  store i32 %v1_12cec, i32* %v2_12ce8, align 4
  br label %dec_label_pc_12d28

dec_label_pc_12cf8:                               ; preds = %dec_label_pc_12cc8
  %v2_12cfc = add i32 %v0_12cd0, %v0_12cc8
  store i32 %v2_12cfc, i32* %r0.global-to-local, align 4
  %v2_12d00 = or i32 %v1_12cf8, %v0_12cc8
  store i32 %v2_12d00, i32* %r3.global-to-local, align 4
  %v1_12d04 = or i32 %v2_12cc8, 1
  store i32 %v1_12d04, i32* %r2.global-to-local, align 4
  store i32 %v2_12d00, i32* %v2_12cd0, align 4
  %v0_12d0c = load i32, i32* %r2.global-to-local, align 4
  %v1_12d0c = load i32, i32* %r0.global-to-local, align 4
  %v2_12d0c = add i32 %v1_12d0c, 4
  %v3_12d0c = inttoptr i32 %v2_12d0c to i32*
  store i32 %v0_12d0c, i32* %v3_12d0c, align 4
  %v0_12d10 = load i32, i32* %r0.global-to-local, align 4
  %v1_12d10 = load i32, i32* %r1.global-to-local, align 4
  %v2_12d10 = add i32 %v1_12d10, %v0_12d10
  store i32 %v2_12d10, i32* %r2.global-to-local, align 4
  %v1_12d14 = add i32 %v2_12d10, 4
  %v2_12d14 = inttoptr i32 %v1_12d14 to i32*
  %v3_12d14 = load i32, i32* %v2_12d14, align 4
  %v1_12d18 = or i32 %v3_12d14, 1
  store i32 %v1_12d18, i32* %r3.global-to-local, align 4
  store i32 %v1_12d18, i32* %v2_12d14, align 4
  %v0_12d20 = load i32, i32* %r0.global-to-local, align 4
  %v1_12d20 = add i32 %v0_12d20, 8
  store i32 %v1_12d20, i32* @r0, align 4
  %v0_12d24 = call i32 @function_130a8()
  store i32 %v0_12d24, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12d28

dec_label_pc_12d28:                               ; preds = %dec_label_pc_12cd8, %dec_label_pc_12cf8
  %v0_12d28 = load i32, i32* @sl, align 4
  %v1_12d28 = add i32 %v0_12d28, 8
  store i32 %v1_12d28, i32* @r4, align 4
  br label %dec_label_pc_12dfc

dec_label_pc_12d30:                               ; preds = %bb29
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %r1.global-to-local, align 4
  %v4_12d38 = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_12d38, i32* @r8, align 4
  %v2_12d3c = inttoptr i32 %v1_12b4c to i32*
  %v3_12d3c = load i32, i32* %v2_12d3c, align 4
  store i32 %v3_12d3c, i32* @r4, align 4
  %v1_12d40 = add i32 %v4_12d38, 860
  %v2_12d40 = inttoptr i32 %v1_12d40 to i32*
  %v3_12d40 = load i32, i32* %v2_12d40, align 4
  %v1_12d44 = add i32 %v3_12d3c, 4
  %v1_12d48 = add i32 %v3_12d40, -1
  store i32 %v1_12d48, i32* %r2.global-to-local, align 4
  %v2_12d4c = add i32 %v1_12d44, %v1_12d48
  %v1_12d50 = load i32, i32* @sb, align 4
  %v2_12d50 = add i32 %v2_12d4c, %v1_12d50
  store i32 %v2_12d50, i32* %r3.global-to-local, align 4
  %v2_12d54 = sub i32 0, %v3_12d40
  %v3_12d54 = and i32 %v2_12d50, %v2_12d54
  store i32 %v3_12d54, i32* @r7, align 4
  %v2_12d58 = sub i32 %v3_12d54, %v3_12d3c
  store i32 %v2_12d58, i32* @fp, align 4
  %v9_12d5c = icmp eq i32 %v1_12b50, %v2_12d58
  br i1 %v9_12d5c, label %dec_label_pc_12dd0, label %dec_label_pc_12d64

dec_label_pc_12d64:                               ; preds = %dec_label_pc_12d30
  %v2_12d64 = sub i32 %v1_12b4c, %v3_12d3c
  store i32 %v2_12d64, i32* %r0.global-to-local, align 4
  %v2_12d68 = add i32 %v3_12d3c, %v1_12b50
  store i32 %v2_12d68, i32* %r1.global-to-local, align 4
  store i32 %v3_12d54, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_12d74 = call i32 @function_148f4(i32 %v2_12d64, i32 %v2_12d68, i32 %v3_12d54, i32 1)
  store i32 %v4_12d74, i32* %r0.global-to-local, align 4
  %v7_12d78 = icmp eq i32 %v4_12d74, -1
  br i1 %v7_12d78, label %dec_label_pc_12dc4, label %dec_label_pc_12d80

dec_label_pc_12d80:                               ; preds = %dec_label_pc_12d64
  %v1_12d80 = load i32, i32* @r4, align 4
  %v2_12d80 = add i32 %v1_12d80, %v4_12d74
  store i32 %v2_12d80, i32* %r0.global-to-local, align 4
  %v0_12d84 = load i32, i32* @fp, align 4
  %v1_12d84 = or i32 %v0_12d84, 2
  store i32 %v1_12d84, i32* %r3.global-to-local, align 4
  %v2_12d88 = add i32 %v2_12d80, 4
  %v3_12d88 = inttoptr i32 %v2_12d88 to i32*
  store i32 %v1_12d84, i32* %v3_12d88, align 4
  %v0_12d8c = load i32, i32* @r8, align 4
  %v1_12d8c = add i32 %v0_12d8c, 868
  %v2_12d8c = inttoptr i32 %v1_12d8c to i32*
  %v3_12d8c = load i32, i32* %v2_12d8c, align 4
  store i32 %v3_12d8c, i32* %r3.global-to-local, align 4
  %v1_12d90 = add i32 %v0_12d8c, 880
  %v2_12d90 = inttoptr i32 %v1_12d90 to i32*
  %v3_12d90 = load i32, i32* %v2_12d90, align 4
  store i32 %v3_12d90, i32* %r2.global-to-local, align 4
  %v0_12d94 = load i32, i32* @r6, align 4
  %v2_12d94 = sub i32 %v3_12d8c, %v0_12d94
  store i32 %v2_12d94, i32* %r3.global-to-local, align 4
  %v1_12d98 = load i32, i32* @r7, align 4
  %v2_12d98 = add i32 %v1_12d98, %v2_12d94
  store i32 %v2_12d98, i32* %r1.global-to-local, align 4
  %v1_12d9c = add i32 %v0_12d8c, 872
  %v2_12d9c = inttoptr i32 %v1_12d9c to i32*
  %v3_12d9c = load i32, i32* %v2_12d9c, align 4
  store i32 %v3_12d9c, i32* %r3.global-to-local, align 4
  %v1_12da4 = add i32 %v0_12d8c, 884
  %v2_12da4 = inttoptr i32 %v1_12da4 to i32*
  %v3_12da4 = load i32, i32* %v2_12da4, align 4
  store i32 %v3_12da4, i32* %r2.global-to-local, align 4
  %tmp42 = icmp ugt i32 %v2_12d98, %v3_12d90
  br i1 %tmp42, label %bb33, label %bb34

bb33:                                             ; preds = %dec_label_pc_12d80
  store i32 %v2_12d98, i32* %v2_12d90, align 4
  %v0_12dac.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_12dac.pre = load i32, i32* @r8, align 4
  br label %bb34

bb34:                                             ; preds = %dec_label_pc_12d80, %bb33
  %v1_12dac = phi i32 [ %v0_12d8c, %dec_label_pc_12d80 ], [ %v1_12dac.pre, %bb33 ]
  %v0_12dac = phi i32 [ %v2_12d98, %dec_label_pc_12d80 ], [ %v0_12dac.pre, %bb33 ]
  %v2_12dac = add i32 %v1_12dac, 868
  %v3_12dac = inttoptr i32 %v2_12dac to i32*
  store i32 %v0_12dac, i32* %v3_12dac, align 4
  %v0_12db0 = load i32, i32* %r1.global-to-local, align 4
  %v1_12db0 = load i32, i32* %r3.global-to-local, align 4
  %v2_12db0 = add i32 %v1_12db0, %v0_12db0
  store i32 %v2_12db0, i32* %r1.global-to-local, align 4
  %v1_12db4 = load i32, i32* %r2.global-to-local, align 4
  %v0_12db8 = load i32, i32* %r0.global-to-local, align 4
  %v1_12db8 = add i32 %v0_12db8, 8
  store i32 %v1_12db8, i32* @r4, align 4
  %tmp43 = icmp ugt i32 %v2_12db0, %v1_12db4
  br i1 %tmp43, label %bb35, label %dec_label_pc_12dfc

bb35:                                             ; preds = %bb34
  %v5_12dbc = load i32, i32* @r8, align 4
  %v6_12dbc = add i32 %v5_12dbc, 884
  %v7_12dbc = inttoptr i32 %v6_12dbc to i32*
  store i32 %v2_12db0, i32* %v7_12dbc, align 4
  br label %dec_label_pc_12dfc

dec_label_pc_12dc4:                               ; preds = %dec_label_pc_12d64
  %v0_12dc4 = load i32, i32* @sb, align 4
  %v1_12dc4 = add i32 %v0_12dc4, 4
  store i32 %v1_12dc4, i32* %r3.global-to-local, align 4
  %v0_12dc8 = load i32, i32* @r6, align 4
  %v3_12dc8 = icmp ult i32 %v0_12dc8, %v1_12dc4
  br i1 %v3_12dc8, label %dec_label_pc_12dd8, label %dec_label_pc_12dc4.dec_label_pc_12dd0_crit_edge

dec_label_pc_12dc4.dec_label_pc_12dd0_crit_edge:  ; preds = %dec_label_pc_12dc4
  %v0_12dd0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12dd0

dec_label_pc_12dd0:                               ; preds = %dec_label_pc_12dc4.dec_label_pc_12dd0_crit_edge, %dec_label_pc_12d30
  %v0_12dd0 = phi i32 [ %v0_12dd0.pre, %dec_label_pc_12dc4.dec_label_pc_12dd0_crit_edge ], [ %v0_12b38, %dec_label_pc_12d30 ]
  store i32 %v0_12dd0, i32* @r4, align 4
  br label %dec_label_pc_12dfc

dec_label_pc_12dd8:                               ; preds = %dec_label_pc_12dc4
  %v1_12dd8 = add i32 %v0_12dc4, -7
  store i32 %v1_12dd8, i32* @r0, align 4
  %v0_12ddc = call i32 @function_1203c()
  store i32 %v0_12ddc, i32* @r0, align 4
  store i32 %v0_12ddc, i32* @r4, align 4
  %v2_12de0 = icmp eq i32 %v0_12ddc, 0
  br i1 %v2_12de0, label %dec_label_pc_12dfc, label %dec_label_pc_12de8

dec_label_pc_12de8:                               ; preds = %dec_label_pc_12dd8
  %v0_12de8 = load i32, i32* @r6, align 4
  %v1_12de8 = add i32 %v0_12de8, -8
  store i32 %v1_12de8, i32* @r2, align 4
  %v0_12dec = load i32, i32* @r5, align 4
  store i32 %v0_12dec, i32* @r1, align 4
  %v0_12df0 = call i32 @function_11b10()
  %v0_12df4 = load i32, i32* @r5, align 4
  store i32 %v0_12df4, i32* @r0, align 4
  %v0_12df8 = call i32 @function_130a8()
  store i32 %v0_12df8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12dfc

dec_label_pc_12dfc:                               ; preds = %bb31, %bb35, %bb34, %dec_label_pc_12dd8, %dec_label_pc_12dd0, %dec_label_pc_12d28, %.thread6, %dec_label_pc_12b98, %dec_label_pc_12de8
  store i32 %v2_12aec, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %r2.global-to-local, align 4
  %v4_12e0c = load i32, i32* inttoptr (i32 127016 to i32*), align 8
  store i32 %v4_12e0c, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_12e0c)
  br label %dec_label_pc_12e18

dec_label_pc_12e18:                               ; preds = %dec_label_pc_12ac8, %dec_label_pc_12ab0, %dec_label_pc_12b20, %dec_label_pc_12dfc
  %v0_12e18 = load i32, i32* @r4, align 4
  store i32 %v0_12e18, i32* %r0.global-to-local, align 4
  store i32 %v3_12a90, i32* @r4, align 4
  store i32 %v6_12a90, i32* @r5, align 4
  store i32 %v9_12a90, i32* @r6, align 4
  store i32 %v12_12a90, i32* @r7, align 4
  store i32 %v15_12a90, i32* @r8, align 4
  store i32 %v18_12a90, i32* @sb, align 4
  store i32 %v21_12a90, i32* @sl, align 4
  store i32 %v24_12a90, i32* @fp, align 4
  store i32 %v27_12a90, i32* @lr, align 4
  ret i32 %v0_12e18

; uselistorder directives
  uselistorder i32 %v2_12db0, { 1, 0, 2 }
  uselistorder i32 %v2_12d98, { 1, 2, 0, 3 }
  uselistorder i32 %v4_12d74, { 1, 0, 2 }
  uselistorder i32 %v3_12d54, { 1, 0, 2, 3 }
  uselistorder i32 %v1_12cf8, { 2, 1, 0 }
  uselistorder i32 %v2_12cc8, { 1, 0, 2 }
  uselistorder i32 %v0_12c5c, { 1, 0 }
  uselistorder i32 %v0_12c18, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v3_12b7c, { 0, 2, 1, 3 }
  uselistorder i32 %v2_12b74, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 %v1_12b58, { 3, 5, 0, 1, 2, 4, 6 }
  uselistorder i32 %v1_12b50, { 0, 7, 5, 1, 2, 3, 4, 6, 8, 9 }
  uselistorder i32 %v1_12b4c, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_12b3c, { 1, 0 }
  uselistorder i32 %v0_12b38, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_12b18, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 13, 14, 15, 16, 17 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 9, 10 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 8, 9, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 6, 1, 7, 12, 8, 9, 10, 11, 25, 0, 20, 19, 26, 27, 21, 22, 23, 24, 13, 16, 15, 14, 17, 18 }
  uselistorder i32* inttoptr (i32 127024 to i32*), { 2, 1, 7, 8, 9, 10, 11, 6, 12, 5, 13, 0, 14, 15, 4, 16, 3 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_12e18, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_12dfc, { 8, 3, 4, 1, 2, 5, 6, 0, 7 }
  uselistorder label %bb34, { 1, 0 }
  uselistorder label %dec_label_pc_12d28, { 1, 0 }
  uselistorder label %dec_label_pc_12cc8, { 1, 2, 0 }
  uselistorder label %.thread6, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_12c14, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12c08, { 1, 0 }
  uselistorder label %dec_label_pc_12c04, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %bb27, { 1, 0 }
}

define i32 @function_12e2c(i32 %arg1) local_unnamed_addr {
dec_label_pc_12e2c:
  %v0_12e2c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12e2c, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_12e2c
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_12e2c, %bb
  %v10_12e40 = phi i32 [ %arg1, %dec_label_pc_12e2c ], [ 0, %bb ]
  ret i32 %v10_12e40

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_12e44(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12e44:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v1_12e44 = add i32 %arg2, 44
  %v2_12e44 = inttoptr i32 %v1_12e44 to i32*
  %v3_12e44 = load i32, i32* %v2_12e44, align 4
  %v1_12e4c = add i32 %v3_12e44, 4
  %v2_12e4c = inttoptr i32 %v1_12e4c to i32*
  %v3_12e4c = load i32, i32* %v2_12e4c, align 4
  %v1_12e50 = add i32 %arg2, 860
  %v2_12e50 = inttoptr i32 %v1_12e50 to i32*
  %v3_12e50 = load i32, i32* %v2_12e50, align 4
  store i32 %v3_12e50, i32* @r4, align 4
  %v1_12e54 = and i32 %v3_12e4c, -4
  store i32 %v1_12e54, i32* @r6, align 4
  %v1_12e58 = add i32 %v1_12e54, -17
  %v2_12e5c = add i32 %v1_12e58, %v3_12e50
  store i32 %arg2, i32* @r5, align 4
  %v2_12e68 = sub i32 %v2_12e5c, %arg1
  store i32 %v2_12e68, i32* @r0, align 4
  store i32 %v3_12e50, i32* @r1, align 4
  %v0_12e70 = call i32 @function_1107c()
  %v1_12e74 = add i32 %v0_12e70, -1
  store i32 %v1_12e74, i32* %r0.global-to-local, align 4
  %v0_12e78 = load i32, i32* @r4, align 4
  %v2_12e78 = mul i32 %v0_12e78, %v1_12e74
  store i32 %v2_12e78, i32* %r7.global-to-local, align 4
  %v2_12e7c = icmp eq i32 %v2_12e78, 0
  store i1 %v2_12e7c, i1* @cpsr_z, align 1
  %tmp8 = icmp slt i32 %v2_12e78, 1
  br i1 %tmp8, label %dec_label_pc_12ee4, label %dec_label_pc_12e84

dec_label_pc_12e84:                               ; preds = %dec_label_pc_12e44
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_12e88 = call i32 @function_145b0(i32 0)
  store i32 %v1_12e88, i32* %r0.global-to-local, align 4
  %v0_12e8c = load i32, i32* @r5, align 4
  %v1_12e8c = add i32 %v0_12e8c, 44
  %v2_12e8c = inttoptr i32 %v1_12e8c to i32*
  %v3_12e8c = load i32, i32* %v2_12e8c, align 4
  %v0_12e90 = load i32, i32* @r6, align 4
  %v2_12e90 = add i32 %v0_12e90, %v3_12e8c
  %v9_12e94 = icmp eq i32 %v1_12e88, %v2_12e90
  store i1 %v9_12e94, i1* @cpsr_z, align 1
  store i32 %v1_12e88, i32* @r4, align 4
  br i1 %v9_12e94, label %dec_label_pc_12ea0, label %dec_label_pc_12ee4

dec_label_pc_12ea0:                               ; preds = %dec_label_pc_12e84
  %v0_12ea0 = load i32, i32* %r7.global-to-local, align 4
  %v1_12ea0 = sub i32 0, %v0_12ea0
  store i32 %v1_12ea0, i32* %r0.global-to-local, align 4
  %v1_12ea4 = call i32 @function_145b0(i32 %v1_12ea0)
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_12eac = call i32 @function_145b0(i32 0)
  store i32 %v1_12eac, i32* %r0.global-to-local, align 4
  %v7_12eb0 = icmp eq i32 %v1_12eac, -1
  store i1 %v7_12eb0, i1* @cpsr_z, align 1
  br i1 %v7_12eb0, label %dec_label_pc_12ee4, label %dec_label_pc_12eb8

dec_label_pc_12eb8:                               ; preds = %dec_label_pc_12ea0
  %v0_12eb8 = load i32, i32* @r4, align 4
  %v2_12eb8 = sub i32 %v0_12eb8, %v1_12eac
  store i32 %v2_12eb8, i32* %r0.global-to-local, align 4
  %v9_12eb8 = icmp eq i32 %v0_12eb8, %v1_12eac
  store i1 %v9_12eb8, i1* @cpsr_z, align 1
  br i1 %v9_12eb8, label %dec_label_pc_12ee4, label %dec_label_pc_12ec0

dec_label_pc_12ec0:                               ; preds = %dec_label_pc_12eb8
  %v0_12ec0 = load i32, i32* @r5, align 4
  %v1_12ec0 = add i32 %v0_12ec0, 872
  %v2_12ec0 = inttoptr i32 %v1_12ec0 to i32*
  %v3_12ec0 = load i32, i32* %v2_12ec0, align 4
  %v1_12ec4 = load i32, i32* @r6, align 4
  %v2_12ec4 = sub i32 %v1_12ec4, %v2_12eb8
  store i32 %v2_12ec4, i32* %r2.global-to-local, align 4
  %v1_12ec8 = add i32 %v0_12ec0, 44
  %v2_12ec8 = inttoptr i32 %v1_12ec8 to i32*
  %v3_12ec8 = load i32, i32* %v2_12ec8, align 4
  store i32 %v3_12ec8, i32* %r1.global-to-local, align 4
  %v2_12ecc = sub i32 %v3_12ec0, %v2_12eb8
  %v1_12ed0 = or i32 %v2_12ec4, 1
  store i32 %v1_12ed0, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v2_12ecc, i32* %v2_12ec0, align 4
  %v0_12edc = load i32, i32* %r2.global-to-local, align 4
  %v1_12edc = load i32, i32* %r1.global-to-local, align 4
  %v2_12edc = add i32 %v1_12edc, 4
  %v3_12edc = inttoptr i32 %v2_12edc to i32*
  store i32 %v0_12edc, i32* %v3_12edc, align 4
  %v1_12ef0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12ee8

dec_label_pc_12ee4:                               ; preds = %dec_label_pc_12e84, %dec_label_pc_12eb8, %dec_label_pc_12ea0, %dec_label_pc_12e44
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12ee8

dec_label_pc_12ee8:                               ; preds = %dec_label_pc_12ec0, %dec_label_pc_12ee4
  %v1_12ef0 = phi i32 [ %v1_12ef0.pre, %dec_label_pc_12ec0 ], [ 0, %dec_label_pc_12ee4 ]
  ret i32 %v1_12ef0

; uselistorder directives
  uselistorder i1 %v7_12eb0, { 1, 0 }
  uselistorder i32 %v1_12eac, { 2, 1, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 10, 9, 8, 0 }
  uselistorder i32 872, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 (i32)* @function_145b0, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_12ee8, { 1, 0 }
  uselistorder label %dec_label_pc_12ee4, { 1, 2, 0, 3 }
}

define i32 @function_12ef4() local_unnamed_addr {
dec_label_pc_12ef4:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_12ef4 = load i32, i32* @r4, align 4
  store i32 %v3_12ef4, i32* %stack_var_-36, align 4
  %v0_12ef8 = load i32, i32* @r0, align 4
  %v1_12ef8 = inttoptr i32 %v0_12ef8 to i32*
  %v2_12ef8 = load i32, i32* %v1_12ef8, align 4
  store i32 %v2_12ef8, i32* %r3.global-to-local, align 4
  %v2_12efc = icmp eq i32 %v2_12ef8, 0
  store i32 %v0_12ef8, i32* @r4, align 4
  br i1 %v2_12efc, label %dec_label_pc_13034.preheader, label %dec_label_pc_12f10

dec_label_pc_13034.preheader:                     ; preds = %dec_label_pc_12ef4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_1303c25 = add i32 %v0_12ef8, 52
  store i32 %v1_1303c25, i32* %r3.global-to-local, align 4
  %v2_1304426 = add i32 %v0_12ef8, 60
  %v3_1304427 = inttoptr i32 %v2_1304426 to i32*
  store i32 %v1_1303c25, i32* %v3_1304427, align 4
  %v0_1304828 = load i32, i32* %r3.global-to-local, align 4
  %v2_1304829 = add i32 %v0_1304828, 12
  %v3_1304830 = inttoptr i32 %v2_1304829 to i32*
  store i32 %v0_1304828, i32* %v3_1304830, align 4
  br label %dec_label_pc_13034.dec_label_pc_13034_crit_edge

dec_label_pc_12f10:                               ; preds = %dec_label_pc_12ef4
  %v1_12f10 = and i32 %v2_12ef8, -3
  %v3_12f14 = udiv i32 %v2_12ef8, 8
  store i32 %v3_12f14, i32* %r2.global-to-local, align 4
  store i32 %v1_12f10, i32* %v1_12ef8, align 4
  %v0_12f1c = load i32, i32* @r0, align 4
  %v1_12f1c = add i32 %v0_12f1c, -4
  store i32 %v1_12f1c, i32* %r3.global-to-local, align 4
  %v1_12f20 = load i32, i32* %r2.global-to-local, align 4
  %v4_12f20 = mul i32 %v1_12f20, 4
  %v5_12f20 = add i32 %v4_12f20, %v1_12f1c
  store i32 %v5_12f20, i32* %sb.global-to-local, align 4
  %v1_12f24 = add i32 %v0_12f1c, 52
  store i32 %v1_12f24, i32* %r7.global-to-local, align 4
  %v1_12f28 = add i32 %v0_12f1c, 4
  store i32 %v1_12f28, i32* %r6.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_12f30

dec_label_pc_12f30:                               ; preds = %dec_label_pc_1302c, %dec_label_pc_12f10
  %v1_1302410 = phi i32 [ %v1_13024, %dec_label_pc_1302c ], [ %v5_12f20, %dec_label_pc_12f10 ]
  %v1_12f3c = phi i32 [ %v1_1302c, %dec_label_pc_1302c ], [ %v1_12f28, %dec_label_pc_12f10 ]
  %v1_12f30 = inttoptr i32 %v1_12f3c to i32*
  %v2_12f30 = load i32, i32* %v1_12f30, align 4
  store i32 %v2_12f30, i32* %r1.global-to-local, align 4
  %v2_12f34 = icmp eq i32 %v2_12f30, 0
  br i1 %v2_12f34, label %dec_label_pc_13024, label %dec_label_pc_12f3c

dec_label_pc_12f3c:                               ; preds = %dec_label_pc_12f30
  %v0_12f3c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_12f3c, i32* %v1_12f30, align 4
  %v0_12f40.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12f40

dec_label_pc_12f40:                               ; preds = %dec_label_pc_13018, %dec_label_pc_12f3c
  %v0_12f5c = phi i32 [ %v0_13018, %dec_label_pc_13018 ], [ %v0_12f40.pre, %dec_label_pc_12f3c ]
  %v1_12f40 = add i32 %v0_12f5c, 4
  %v2_12f40 = inttoptr i32 %v1_12f40 to i32*
  %v3_12f40 = load i32, i32* %v2_12f40, align 4
  store i32 %v3_12f40, i32* %r3.global-to-local, align 4
  %v1_12f44 = and i32 %v3_12f40, -2
  store i32 %v1_12f44, i32* %lr.global-to-local, align 4
  %v2_12f48 = add i32 %v1_12f44, %v0_12f5c
  store i32 %v2_12f48, i32* @r0, align 4
  %v1_12f4c = urem i32 %v3_12f40, 2
  %v2_12f4c = icmp eq i32 %v1_12f4c, 0
  %v1_12f50 = add i32 %v0_12f5c, 8
  %v2_12f50 = inttoptr i32 %v1_12f50 to i32*
  %v3_12f50 = load i32, i32* %v2_12f50, align 4
  store i32 %v3_12f50, i32* %sl.global-to-local, align 4
  %v1_12f54 = add i32 %v2_12f48, 4
  %v2_12f54 = inttoptr i32 %v1_12f54 to i32*
  %v3_12f54 = load i32, i32* %v2_12f54, align 4
  store i32 %v3_12f54, i32* %r8.global-to-local, align 4
  br i1 %v2_12f4c, label %dec_label_pc_12f5c, label %dec_label_pc_12f90

dec_label_pc_12f5c:                               ; preds = %dec_label_pc_12f40
  %v1_12f5c = inttoptr i32 %v0_12f5c to i32*
  %v2_12f5c = load i32, i32* %v1_12f5c, align 4
  store i32 %v2_12f5c, i32* %r5.global-to-local, align 4
  %v2_12f60 = sub i32 %v0_12f5c, %v2_12f5c
  store i32 %v2_12f60, i32* %r3.global-to-local, align 4
  %v1_12f64 = add i32 %v2_12f60, 8
  %v2_12f64 = inttoptr i32 %v1_12f64 to i32*
  %v3_12f64 = load i32, i32* %v2_12f64, align 4
  store i32 %v3_12f64, i32* %ip.global-to-local, align 4
  %v1_12f68 = add i32 %v3_12f64, 12
  %v2_12f68 = inttoptr i32 %v1_12f68 to i32*
  %v3_12f68 = load i32, i32* %v2_12f68, align 4
  store i32 %v3_12f68, i32* %r1.global-to-local, align 4
  %v9_12f6c = icmp eq i32 %v3_12f68, %v2_12f60
  %v1_12f70 = add i32 %v2_12f60, 12
  %v2_12f70 = inttoptr i32 %v1_12f70 to i32*
  %v3_12f70 = load i32, i32* %v2_12f70, align 4
  store i32 %v3_12f70, i32* %r2.global-to-local, align 4
  br i1 %v9_12f6c, label %dec_label_pc_12f78, label %dec_label_pc_12fd4

dec_label_pc_12f78:                               ; preds = %dec_label_pc_12f5c
  %v1_12f78 = add i32 %v3_12f70, 8
  %v2_12f78 = inttoptr i32 %v1_12f78 to i32*
  %v3_12f78 = load i32, i32* %v2_12f78, align 4
  store i32 %v3_12f78, i32* %r3.global-to-local, align 4
  %v9_12f7c = icmp eq i32 %v3_12f78, %v2_12f60
  br i1 %v9_12f7c, label %dec_label_pc_12f84, label %dec_label_pc_12fd4

dec_label_pc_12f84:                               ; preds = %dec_label_pc_12f78
  store i32 %v3_12f64, i32* %v2_12f78, align 4
  %v0_12f88 = load i32, i32* %r2.global-to-local, align 4
  %v1_12f88 = load i32, i32* %ip.global-to-local, align 4
  %v2_12f88 = add i32 %v1_12f88, 12
  %v3_12f88 = inttoptr i32 %v2_12f88 to i32*
  store i32 %v0_12f88, i32* %v3_12f88, align 4
  %v0_12f8c = load i32, i32* %lr.global-to-local, align 4
  %v1_12f8c = load i32, i32* %r5.global-to-local, align 4
  %v2_12f8c = add i32 %v1_12f8c, %v0_12f8c
  store i32 %v2_12f8c, i32* %lr.global-to-local, align 4
  %v0_12f94.pre = load i32, i32* @r0, align 4
  %v0_12f98.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12f90

dec_label_pc_12f90:                               ; preds = %dec_label_pc_12f40, %dec_label_pc_12f84
  %v0_13008 = phi i32 [ %v1_12f44, %dec_label_pc_12f40 ], [ %v2_12f8c, %dec_label_pc_12f84 ]
  %v0_12f98 = phi i32 [ %v3_12f54, %dec_label_pc_12f40 ], [ %v0_12f98.pre, %dec_label_pc_12f84 ]
  %v1_12fac = phi i32 [ %v2_12f48, %dec_label_pc_12f40 ], [ %v0_12f94.pre, %dec_label_pc_12f84 ]
  %v0_12f90 = load i32, i32* @r4, align 4
  %v1_12f90 = add i32 %v0_12f90, 44
  %v2_12f90 = inttoptr i32 %v1_12f90 to i32*
  %v3_12f90 = load i32, i32* %v2_12f90, align 4
  store i32 %v3_12f90, i32* %r3.global-to-local, align 4
  %v9_12f94 = icmp eq i32 %v1_12fac, %v3_12f90
  %v1_12f98 = and i32 %v0_12f98, -4
  store i32 %v1_12f98, i32* %r5.global-to-local, align 4
  br i1 %v9_12f94, label %dec_label_pc_13008, label %dec_label_pc_12fa0

dec_label_pc_12fa0:                               ; preds = %dec_label_pc_12f90
  %v2_12fa0 = add i32 %v1_12fac, %v1_12f98
  store i32 %v2_12fa0, i32* %r3.global-to-local, align 4
  %v1_12fa4 = add i32 %v2_12fa0, 4
  %v2_12fa4 = inttoptr i32 %v1_12fa4 to i32*
  %v3_12fa4 = load i32, i32* %v2_12fa4, align 4
  store i32 %v3_12fa4, i32* %r3.global-to-local, align 4
  %v1_12fa8 = urem i32 %v3_12fa4, 2
  %v2_12fa8 = icmp eq i32 %v1_12fa8, 0
  %v2_12fac = add i32 %v1_12fac, 4
  %v3_12fac = inttoptr i32 %v2_12fac to i32*
  store i32 %v1_12f98, i32* %v3_12fac, align 4
  br i1 %v2_12fa8, label %dec_label_pc_12fb4, label %dec_label_pc_12fa0.dec_label_pc_12fe4_crit_edge

dec_label_pc_12fa0.dec_label_pc_12fe4_crit_edge:  ; preds = %dec_label_pc_12fa0
  %v0_12fe8.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_12fe4

dec_label_pc_12fb4:                               ; preds = %dec_label_pc_12fa0
  %v0_12fb4 = load i32, i32* @r0, align 4
  %v1_12fb4 = add i32 %v0_12fb4, 8
  %v2_12fb4 = inttoptr i32 %v1_12fb4 to i32*
  %v3_12fb4 = load i32, i32* %v2_12fb4, align 4
  store i32 %v3_12fb4, i32* %ip.global-to-local, align 4
  %v1_12fb8 = add i32 %v3_12fb4, 12
  %v2_12fb8 = inttoptr i32 %v1_12fb8 to i32*
  %v3_12fb8 = load i32, i32* %v2_12fb8, align 4
  store i32 %v3_12fb8, i32* %r3.global-to-local, align 4
  %v9_12fbc = icmp eq i32 %v3_12fb8, %v0_12fb4
  %v1_12fc0 = add i32 %v0_12fb4, 12
  %v2_12fc0 = inttoptr i32 %v1_12fc0 to i32*
  %v3_12fc0 = load i32, i32* %v2_12fc0, align 4
  store i32 %v3_12fc0, i32* %r2.global-to-local, align 4
  br i1 %v9_12fbc, label %dec_label_pc_12fc8, label %dec_label_pc_12fd4

dec_label_pc_12fc8:                               ; preds = %dec_label_pc_12fb4
  %v1_12fc8 = add i32 %v3_12fc0, 8
  %v2_12fc8 = inttoptr i32 %v1_12fc8 to i32*
  %v3_12fc8 = load i32, i32* %v2_12fc8, align 4
  store i32 %v3_12fc8, i32* %r3.global-to-local, align 4
  %v9_12fcc = icmp eq i32 %v3_12fc8, %v0_12fb4
  br i1 %v9_12fcc, label %dec_label_pc_12fd8, label %dec_label_pc_12fd4

dec_label_pc_12fd4:                               ; preds = %dec_label_pc_12fb4, %dec_label_pc_12f78, %dec_label_pc_12f5c, %dec_label_pc_12fc8
  %v0_12fd4 = call i32 @function_13324()
  store i32 %v0_12fd4, i32* @r0, align 4
  %v0_12fd8.pre = load i32, i32* @ip, align 4
  %v1_12fd8.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_12fd8

dec_label_pc_12fd8:                               ; preds = %dec_label_pc_12fc8, %dec_label_pc_12fd4
  %v1_12fd8 = phi i32 [ %v3_12fc0, %dec_label_pc_12fc8 ], [ %v1_12fd8.pre, %dec_label_pc_12fd4 ]
  %v0_12fd8 = phi i32 [ %v3_12fb4, %dec_label_pc_12fc8 ], [ %v0_12fd8.pre, %dec_label_pc_12fd4 ]
  %v2_12fd8 = add i32 %v1_12fd8, 8
  %v3_12fd8 = inttoptr i32 %v2_12fd8 to i32*
  store i32 %v0_12fd8, i32* %v3_12fd8, align 4
  %v0_12fdc = load i32, i32* %r2.global-to-local, align 4
  %v1_12fdc = load i32, i32* %ip.global-to-local, align 4
  %v2_12fdc = add i32 %v1_12fdc, 12
  %v3_12fdc = inttoptr i32 %v2_12fdc to i32*
  store i32 %v0_12fdc, i32* %v3_12fdc, align 4
  %v0_12fe0 = load i32, i32* %lr.global-to-local, align 4
  %v1_12fe0 = load i32, i32* %r5.global-to-local, align 4
  %v2_12fe0 = add i32 %v1_12fe0, %v0_12fe0
  store i32 %v2_12fe0, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_12fe4

dec_label_pc_12fe4:                               ; preds = %dec_label_pc_12fa0.dec_label_pc_12fe4_crit_edge, %dec_label_pc_12fd8
  %v0_12fe8 = phi i32 [ %v0_12fe8.pre, %dec_label_pc_12fa0.dec_label_pc_12fe4_crit_edge ], [ %v2_12fe0, %dec_label_pc_12fd8 ]
  %v0_12fe4 = load i32, i32* %r7.global-to-local, align 4
  %v1_12fe4 = add i32 %v0_12fe4, 8
  %v2_12fe4 = inttoptr i32 %v1_12fe4 to i32*
  %v3_12fe4 = load i32, i32* %v2_12fe4, align 4
  store i32 %v3_12fe4, i32* %r2.global-to-local, align 4
  %v1_12fe8 = or i32 %v0_12fe8, 1
  store i32 %v1_12fe8, i32* %r3.global-to-local, align 4
  %v0_12fec = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_12fec, i32* %v2_12fe4, align 4
  %v0_12ff0 = load i32, i32* %r1.global-to-local, align 4
  %v1_12ff0 = load i32, i32* %r2.global-to-local, align 4
  %v2_12ff0 = add i32 %v1_12ff0, 12
  %v3_12ff0 = inttoptr i32 %v2_12ff0 to i32*
  store i32 %v0_12ff0, i32* %v3_12ff0, align 4
  %v0_12ff4 = load i32, i32* %lr.global-to-local, align 4
  %v1_12ff4 = load i32, i32* %r1.global-to-local, align 4
  %v3_12ff4 = add i32 %v1_12ff4, %v0_12ff4
  %v4_12ff4 = inttoptr i32 %v3_12ff4 to i32*
  store i32 %v0_12ff4, i32* %v4_12ff4, align 4
  %v0_12ff8 = load i32, i32* %r3.global-to-local, align 4
  %v1_12ff8 = load i32, i32* %r1.global-to-local, align 4
  %v2_12ff8 = add i32 %v1_12ff8, 4
  %v3_12ff8 = inttoptr i32 %v2_12ff8 to i32*
  store i32 %v0_12ff8, i32* %v3_12ff8, align 4
  %v0_12ffc = load i32, i32* %r2.global-to-local, align 4
  %v1_12ffc = load i32, i32* %r1.global-to-local, align 4
  %v2_12ffc = add i32 %v1_12ffc, 8
  %v3_12ffc = inttoptr i32 %v2_12ffc to i32*
  store i32 %v0_12ffc, i32* %v3_12ffc, align 4
  %v0_13000 = load i32, i32* %r7.global-to-local, align 4
  %v1_13000 = load i32, i32* %r1.global-to-local, align 4
  %v2_13000 = add i32 %v1_13000, 12
  %v3_13000 = inttoptr i32 %v2_13000 to i32*
  store i32 %v0_13000, i32* %v3_13000, align 4
  br label %dec_label_pc_13018

dec_label_pc_13008:                               ; preds = %dec_label_pc_12f90
  %v2_13008 = add i32 %v1_12f98, %v0_13008
  %v1_1300c = or i32 %v2_13008, 1
  store i32 %v1_1300c, i32* %r3.global-to-local, align 4
  %v1_13010 = load i32, i32* %r1.global-to-local, align 4
  %v2_13010 = add i32 %v1_13010, 4
  %v3_13010 = inttoptr i32 %v2_13010 to i32*
  store i32 %v1_1300c, i32* %v3_13010, align 4
  %v0_13014 = load i32, i32* %r1.global-to-local, align 4
  %v1_13014 = load i32, i32* @r4, align 4
  %v2_13014 = add i32 %v1_13014, 44
  %v3_13014 = inttoptr i32 %v2_13014 to i32*
  store i32 %v0_13014, i32* %v3_13014, align 4
  br label %dec_label_pc_13018

dec_label_pc_13018:                               ; preds = %dec_label_pc_12fe4, %dec_label_pc_13008
  %v0_13018 = load i32, i32* %sl.global-to-local, align 4
  %v2_13018 = icmp eq i32 %v0_13018, 0
  store i32 %v0_13018, i32* %r1.global-to-local, align 4
  br i1 %v2_13018, label %dec_label_pc_13024.loopexit, label %dec_label_pc_12f40

dec_label_pc_13024.loopexit:                      ; preds = %dec_label_pc_13018
  %v0_13024.pre = load i32, i32* %r6.global-to-local, align 4
  %v1_13024.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_13024

dec_label_pc_13024:                               ; preds = %dec_label_pc_13024.loopexit, %dec_label_pc_12f30
  %v1_13024 = phi i32 [ %v1_13024.pre, %dec_label_pc_13024.loopexit ], [ %v1_1302410, %dec_label_pc_12f30 ]
  %v0_1302c = phi i32 [ %v0_13024.pre, %dec_label_pc_13024.loopexit ], [ %v1_12f3c, %dec_label_pc_12f30 ]
  %v9_13024 = icmp eq i32 %v0_1302c, %v1_13024
  br i1 %v9_13024, label %dec_label_pc_1309c, label %dec_label_pc_1302c

dec_label_pc_1302c:                               ; preds = %dec_label_pc_13024
  %v1_1302c = add i32 %v0_1302c, 4
  store i32 %v1_1302c, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12f30

dec_label_pc_13034.dec_label_pc_13034_crit_edge:  ; preds = %dec_label_pc_13034.preheader, %dec_label_pc_13034.dec_label_pc_13034_crit_edge
  %v0_13034.pre = load i32, i32* @r4, align 4
  %v1_13034.pre = load i32, i32* %r2.global-to-local, align 4
  %v4_13034 = mul i32 %v1_13034.pre, 8
  %v5_13034 = add i32 %v4_13034, %v0_13034.pre
  %v1_13038 = add i32 %v1_13034.pre, 1
  store i32 %v1_13038, i32* %r2.global-to-local, align 4
  %v1_1303c = add i32 %v5_13034, 44
  store i32 %v1_1303c, i32* %r3.global-to-local, align 4
  %v2_13044 = add i32 %v5_13034, 52
  %v3_13044 = inttoptr i32 %v2_13044 to i32*
  store i32 %v1_1303c, i32* %v3_13044, align 4
  %v0_13048 = load i32, i32* %r3.global-to-local, align 4
  %v2_13048 = add i32 %v0_13048, 12
  %v3_13048 = inttoptr i32 %v2_13048 to i32*
  store i32 %v0_13048, i32* %v3_13048, align 4
  %v7_1304c = icmp sgt i32 %v1_13038, 95
  br i1 %v7_1304c, label %dec_label_pc_13050, label %dec_label_pc_13034.dec_label_pc_13034_crit_edge

dec_label_pc_13050:                               ; preds = %dec_label_pc_13034.dec_label_pc_13034_crit_edge
  %v0_13050 = load i32, i32* @r4, align 4
  %v1_13050 = inttoptr i32 %v0_13050 to i32*
  %v2_13050 = load i32, i32* %v1_13050, align 4
  store i32 %v2_13050, i32* %r2.global-to-local, align 4
  %v1_13054 = add i32 %v0_13050, 864
  %v2_13054 = inttoptr i32 %v1_13054 to i32*
  %v3_13054 = load i32, i32* %v2_13054, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_1305c = urem i32 %v2_13050, 4
  store i32 262144, i32* %r0.global-to-local, align 4
  %v1_13064 = or i32 %v3_13054, 1
  store i32 %v1_13064, i32* %r1.global-to-local, align 4
  %v1_13068 = or i32 %v1_1305c, 72
  store i32 %v1_13068, i32* %r2.global-to-local, align 4
  %v1_1306c = add i32 %v0_13050, 52
  store i32 %v1_1306c, i32* %ip.global-to-local, align 4
  %v2_13070 = add i32 %v0_13050, 840
  %v3_13070 = inttoptr i32 %v2_13070 to i32*
  store i32 0, i32* %v3_13070, align 4
  %v0_13074 = load i32, i32* %r3.global-to-local, align 4
  %v1_13074 = add i32 %v0_13074, 65536
  store i32 %v1_13074, i32* %r3.global-to-local, align 4
  %v0_13078 = load i32, i32* %r0.global-to-local, align 4
  %v1_13078 = load i32, i32* @r4, align 4
  %v2_13078 = add i32 %v1_13078, 836
  %v3_13078 = inttoptr i32 %v2_13078 to i32*
  store i32 %v0_13078, i32* %v3_13078, align 4
  %v0_1307c = load i32, i32* %r0.global-to-local, align 4
  %v1_1307c = load i32, i32* @r4, align 4
  %v2_1307c = add i32 %v1_1307c, 844
  %v3_1307c = inttoptr i32 %v2_1307c to i32*
  store i32 %v0_1307c, i32* %v3_1307c, align 4
  %v1_13080 = load i32, i32* @r4, align 4
  %v2_13080 = add i32 %v1_13080, 852
  %v3_13080 = inttoptr i32 %v2_13080 to i32*
  store i32 %v1_13074, i32* %v3_13080, align 4
  %v1_13084 = load i32, i32* @r4, align 4
  %v2_13084 = add i32 %v1_13084, 864
  %v3_13084 = inttoptr i32 %v2_13084 to i32*
  store i32 %v1_13064, i32* %v3_13084, align 4
  %v1_13088 = load i32, i32* @r4, align 4
  %v2_13088 = inttoptr i32 %v1_13088 to i32*
  store i32 %v1_13068, i32* %v2_13088, align 4
  %v0_1308c = load i32, i32* %ip.global-to-local, align 4
  %v1_1308c = load i32, i32* @r4, align 4
  %v2_1308c = add i32 %v1_1308c, 44
  %v3_1308c = inttoptr i32 %v2_1308c to i32*
  store i32 %v0_1308c, i32* %v3_1308c, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v4_13094 = call i32 @function_138f8(i32 30, i32 %v1_13064, i32 %v1_13068, i32 %v1_13074)
  store i32 %v4_13094, i32* @r0, align 4
  %v1_13098 = load i32, i32* @r4, align 4
  %v2_13098 = add i32 %v1_13098, 860
  %v3_13098 = inttoptr i32 %v2_13098 to i32*
  store i32 %v4_13094, i32* %v3_13098, align 4
  br label %dec_label_pc_1309c

dec_label_pc_1309c:                               ; preds = %dec_label_pc_13024, %dec_label_pc_13050
  %v2_130a0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_130a0, i32* @r4, align 4
  %v1_130a4 = load i32, i32* @r0, align 4
  ret i32 %v1_130a4

; uselistorder directives
  uselistorder i32 %v0_13050, { 1, 0, 2, 3 }
  uselistorder i32 %v0_13048, { 1, 0 }
  uselistorder i32 %v1_1302c, { 1, 0 }
  uselistorder i32 %v0_13018, { 0, 2, 1 }
  uselistorder i32 %v0_12ff4, { 1, 0 }
  uselistorder i32 %v1_12f44, { 1, 0, 2 }
  uselistorder i32 %v0_12f5c, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_12f1c, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 19 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 2, 6, 12 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 4, 2, 1, 5, 6 }
  uselistorder i32 860, { 2, 1, 0, 3 }
  uselistorder i32 30, { 1, 12, 6, 5, 2, 3, 4, 0, 10, 11, 8, 9, 7 }
  uselistorder label %dec_label_pc_1309c, { 1, 0 }
  uselistorder label %dec_label_pc_13034.dec_label_pc_13034_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_13018, { 1, 0 }
  uselistorder label %dec_label_pc_12fe4, { 1, 0 }
  uselistorder label %dec_label_pc_12fd8, { 1, 0 }
  uselistorder label %dec_label_pc_12fd4, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12f90, { 1, 0 }
}

define i32 @function_130a8() local_unnamed_addr {
dec_label_pc_130a8:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_130a8 = load i32, i32* @r4, align 4
  %v6_130a8 = load i32, i32* @r5, align 4
  %v9_130a8 = load i32, i32* @r6, align 4
  %v12_130a8 = load i32, i32* @r7, align 4
  %v18_130a8 = load i32, i32* @lr, align 4
  %v0_130b0 = load i32, i32* @r0, align 4
  store i32 %v0_130b0, i32* @r6, align 4
  %v2_130b0 = icmp eq i32 %v0_130b0, 0
  %v2_130b4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 126992, i32* @r7, align 4
  br i1 %v2_130b0, label %dec_label_pc_132bc, label %dec_label_pc_130c0

dec_label_pc_130c0:                               ; preds = %dec_label_pc_130a8
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_130c4 = load i32, i32* inttoptr (i32 127060 to i32*), align 4
  store i32 %v4_130c4, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_130c4, i32* %r2.global-to-local, align 4
  %v4_130d0 = load i32, i32* inttoptr (i32 127028 to i32*), align 4
  store i32 %v4_130d0, i32* %r1.global-to-local, align 4
  store i32 %v2_130b4, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_130dc = load i32, i32* inttoptr (i32 127064 to i32*), align 8
  store i32 %v4_130dc, i32* %ip.global-to-local, align 4
  store i32 78056, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_130dc)
  %v0_130e8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_130e8, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_130f0 = load i32, i32* @r7, align 4
  %v2_130f0 = add i32 %v0_130f0, 16
  %v3_130f0 = inttoptr i32 %v2_130f0 to i32*
  %v4_130f0 = load i32, i32* %v3_130f0, align 4
  store i32 %v4_130f0, i32* %ip.global-to-local, align 4
  store i32 78076, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_130f0)
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_13100 = load i32, i32* @r7, align 4
  %v2_13100 = add i32 %v0_13100, 32
  %v3_13100 = inttoptr i32 %v2_13100 to i32*
  %v4_13100 = load i32, i32* %v3_13100, align 4
  store i32 %v4_13100, i32* @lr, align 4
  %v0_13104 = load i32, i32* @r6, align 4
  %v1_13104 = add i32 %v0_13104, -4
  %v2_13104 = inttoptr i32 %v1_13104 to i32*
  %v3_13104 = load i32, i32* %v2_13104, align 4
  store i32 %v3_13104, i32* %r2.global-to-local, align 4
  %v1_13108 = inttoptr i32 %v4_13100 to i32*
  %v2_13108 = load i32, i32* %v1_13108, align 4
  store i32 %v2_13108, i32* %r3.global-to-local, align 4
  %v1_1310c = and i32 %v3_13104, -4
  store i32 %v1_1310c, i32* %ip.global-to-local, align 4
  %v1_13110 = add i32 %v0_13104, -8
  store i32 %v1_13110, i32* @r5, align 4
  store i32 %v1_13110, i32* %r4.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_1310c, %v2_13108
  br i1 %tmp, label %dec_label_pc_13140, label %dec_label_pc_13120

dec_label_pc_13120:                               ; preds = %dec_label_pc_130c0
  %v1_13120 = or i32 %v2_13108, 3
  store i32 %v1_13120, i32* %r3.global-to-local, align 4
  store i32 %v1_13120, i32* %v1_13108, align 4
  %v3_13124 = load i32, i32* @lr, align 4
  %v4_13124 = add i32 %v3_13124, -8
  store i32 %v4_13124, i32* %lr.global-to-local, align 4
  %v0_13128 = load i32, i32* %ip.global-to-local, align 4
  %v3_13128 = udiv i32 %v0_13128, 8
  store i32 %v3_13128, i32* %r1.global-to-local, align 4
  %v1_1312c = add i32 %v3_13124, -4
  store i32 %v1_1312c, i32* %r2.global-to-local, align 4
  %v4_13130 = mul nuw i32 %v3_13128, 4
  %v5_13130 = add i32 %v4_13130, %v1_1312c
  %v6_13130 = inttoptr i32 %v5_13130 to i32*
  %v7_13130 = load i32, i32* %v6_13130, align 4
  store i32 %v7_13130, i32* %r3.global-to-local, align 4
  %v1_13134 = load i32, i32* @r5, align 4
  %v2_13134 = add i32 %v1_13134, 8
  %v3_13134 = inttoptr i32 %v2_13134 to i32*
  store i32 %v7_13130, i32* %v3_13134, align 4
  %v0_13138 = load i32, i32* @r5, align 4
  %v1_13138 = load i32, i32* %r2.global-to-local, align 4
  %v2_13138 = load i32, i32* %r1.global-to-local, align 4
  %v5_13138 = mul i32 %v2_13138, 4
  %v6_13138 = add i32 %v5_13138, %v1_13138
  %v7_13138 = inttoptr i32 %v6_13138 to i32*
  store i32 %v0_13138, i32* %v7_13138, align 4
  br label %dec_label_pc_132a4

dec_label_pc_13140:                               ; preds = %dec_label_pc_130c0
  %v1_13140 = and i32 %v3_13104, 2
  %v2_13140 = icmp eq i32 %v1_13140, 0
  br i1 %v2_13140, label %dec_label_pc_13148, label %dec_label_pc_1327c

dec_label_pc_13148:                               ; preds = %dec_label_pc_13140
  %v1_13148 = or i32 %v2_13108, 1
  store i32 %v1_13148, i32* %r3.global-to-local, align 4
  store i32 %v1_13148, i32* %v1_13108, align 4
  %v0_13150 = load i32, i32* @r6, align 4
  %v1_13150 = add i32 %v0_13150, -4
  %v2_13150 = inttoptr i32 %v1_13150 to i32*
  %v3_13150 = load i32, i32* %v2_13150, align 4
  store i32 %v3_13150, i32* %r3.global-to-local, align 4
  %v0_13154 = load i32, i32* @r5, align 4
  %v1_13154 = load i32, i32* %ip.global-to-local, align 4
  %v2_13154 = add i32 %v1_13154, %v0_13154
  store i32 %v2_13154, i32* %lr.global-to-local, align 4
  %v1_13158 = urem i32 %v3_13150, 2
  %v2_13158 = icmp eq i32 %v1_13158, 0
  %v1_1315c = add i32 %v2_13154, 4
  %v2_1315c = inttoptr i32 %v1_1315c to i32*
  %v3_1315c = load i32, i32* %v2_1315c, align 4
  store i32 %v3_1315c, i32* %r8.global-to-local, align 4
  br i1 %v2_13158, label %dec_label_pc_13164, label %dec_label_pc_13198

dec_label_pc_13164:                               ; preds = %dec_label_pc_13148
  %v1_13164 = add i32 %v0_13150, -8
  %v2_13164 = inttoptr i32 %v1_13164 to i32*
  %v3_13164 = load i32, i32* %v2_13164, align 4
  store i32 %v3_13164, i32* %r1.global-to-local, align 4
  %v2_13168 = sub i32 %v0_13154, %v3_13164
  store i32 %v2_13168, i32* %r3.global-to-local, align 4
  %v1_1316c = add i32 %v2_13168, 8
  %v2_1316c = inttoptr i32 %v1_1316c to i32*
  %v3_1316c = load i32, i32* %v2_1316c, align 4
  store i32 %v3_1316c, i32* %r2.global-to-local, align 4
  %v1_13170 = add i32 %v3_1316c, 12
  %v2_13170 = inttoptr i32 %v1_13170 to i32*
  %v3_13170 = load i32, i32* %v2_13170, align 4
  store i32 %v3_13170, i32* %r4.global-to-local, align 4
  %v9_13174 = icmp eq i32 %v3_13170, %v2_13168
  %v1_13178 = add i32 %v2_13168, 12
  %v2_13178 = inttoptr i32 %v1_13178 to i32*
  %v3_13178 = load i32, i32* %v2_13178, align 4
  store i32 %v3_13178, i32* %r0.global-to-local, align 4
  br i1 %v9_13174, label %dec_label_pc_13180, label %dec_label_pc_131e4

dec_label_pc_13180:                               ; preds = %dec_label_pc_13164
  %v1_13180 = add i32 %v3_13178, 8
  %v2_13180 = inttoptr i32 %v1_13180 to i32*
  %v3_13180 = load i32, i32* %v2_13180, align 4
  store i32 %v3_13180, i32* %r3.global-to-local, align 4
  %v9_13184 = icmp eq i32 %v3_13180, %v2_13168
  br i1 %v9_13184, label %dec_label_pc_1318c, label %dec_label_pc_131e4

dec_label_pc_1318c:                               ; preds = %dec_label_pc_13180
  store i32 %v3_1316c, i32* %v2_13180, align 4
  %v0_13190 = load i32, i32* %r0.global-to-local, align 4
  %v1_13190 = load i32, i32* %r2.global-to-local, align 4
  %v2_13190 = add i32 %v1_13190, 12
  %v3_13190 = inttoptr i32 %v2_13190 to i32*
  store i32 %v0_13190, i32* %v3_13190, align 4
  %v0_13194 = load i32, i32* %ip.global-to-local, align 4
  %v1_13194 = load i32, i32* %r1.global-to-local, align 4
  %v2_13194 = add i32 %v1_13194, %v0_13194
  store i32 %v2_13194, i32* %ip.global-to-local, align 4
  %v0_131a4.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_131a8.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_13198

dec_label_pc_13198:                               ; preds = %dec_label_pc_13148, %dec_label_pc_1318c
  %v0_13224 = phi i32 [ %v1_13154, %dec_label_pc_13148 ], [ %v2_13194, %dec_label_pc_1318c ]
  %v0_131a8 = phi i32 [ %v3_1315c, %dec_label_pc_13148 ], [ %v0_131a8.pre, %dec_label_pc_1318c ]
  %v1_131bc = phi i32 [ %v2_13154, %dec_label_pc_13148 ], [ %v0_131a4.pre, %dec_label_pc_1318c ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_1319c = load i32, i32* @r7, align 4
  %v2_1319c = add i32 %v0_1319c, 32
  %v3_1319c = inttoptr i32 %v2_1319c to i32*
  %v4_1319c = load i32, i32* %v3_1319c, align 4
  store i32 %v4_1319c, i32* %r2.global-to-local, align 4
  %v1_131a0 = add i32 %v4_1319c, 44
  %v2_131a0 = inttoptr i32 %v1_131a0 to i32*
  %v3_131a0 = load i32, i32* %v2_131a0, align 4
  store i32 %v3_131a0, i32* %r3.global-to-local, align 4
  %v9_131a4 = icmp eq i32 %v1_131bc, %v3_131a0
  %v1_131a8 = and i32 %v0_131a8, -4
  store i32 %v1_131a8, i32* %r0.global-to-local, align 4
  br i1 %v9_131a4, label %dec_label_pc_13224, label %dec_label_pc_131b0

dec_label_pc_131b0:                               ; preds = %dec_label_pc_13198
  %v2_131b0 = add i32 %v1_131bc, %v1_131a8
  store i32 %v2_131b0, i32* %r3.global-to-local, align 4
  %v1_131b4 = add i32 %v2_131b0, 4
  %v2_131b4 = inttoptr i32 %v1_131b4 to i32*
  %v3_131b4 = load i32, i32* %v2_131b4, align 4
  store i32 %v3_131b4, i32* %r3.global-to-local, align 4
  %v1_131b8 = urem i32 %v3_131b4, 2
  %v2_131b8 = icmp eq i32 %v1_131b8, 0
  %v2_131bc = add i32 %v1_131bc, 4
  %v3_131bc = inttoptr i32 %v2_131bc to i32*
  store i32 %v1_131a8, i32* %v3_131bc, align 4
  br i1 %v2_131b8, label %dec_label_pc_131c4, label %dec_label_pc_131b0.dec_label_pc_131f4_crit_edge

dec_label_pc_131b0.dec_label_pc_131f4_crit_edge:  ; preds = %dec_label_pc_131b0
  %v0_13204.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_131f4

dec_label_pc_131c4:                               ; preds = %dec_label_pc_131b0
  %v0_131c4 = load i32, i32* %lr.global-to-local, align 4
  %v1_131c4 = add i32 %v0_131c4, 8
  %v2_131c4 = inttoptr i32 %v1_131c4 to i32*
  %v3_131c4 = load i32, i32* %v2_131c4, align 4
  store i32 %v3_131c4, i32* %r1.global-to-local, align 4
  %v1_131c8 = add i32 %v3_131c4, 12
  %v2_131c8 = inttoptr i32 %v1_131c8 to i32*
  %v3_131c8 = load i32, i32* %v2_131c8, align 4
  store i32 %v3_131c8, i32* %r3.global-to-local, align 4
  %v9_131cc = icmp eq i32 %v3_131c8, %v0_131c4
  %v1_131d0 = add i32 %v0_131c4, 12
  %v2_131d0 = inttoptr i32 %v1_131d0 to i32*
  %v3_131d0 = load i32, i32* %v2_131d0, align 4
  store i32 %v3_131d0, i32* %r2.global-to-local, align 4
  br i1 %v9_131cc, label %dec_label_pc_131d8, label %dec_label_pc_131e4

dec_label_pc_131d8:                               ; preds = %dec_label_pc_131c4
  %v1_131d8 = add i32 %v3_131d0, 8
  %v2_131d8 = inttoptr i32 %v1_131d8 to i32*
  %v3_131d8 = load i32, i32* %v2_131d8, align 4
  store i32 %v3_131d8, i32* %r3.global-to-local, align 4
  %v9_131dc = icmp eq i32 %v3_131d8, %v0_131c4
  br i1 %v9_131dc, label %dec_label_pc_131e8, label %dec_label_pc_131e4

dec_label_pc_131e4:                               ; preds = %dec_label_pc_131c4, %dec_label_pc_13180, %dec_label_pc_13164, %dec_label_pc_131d8
  %v0_131e4 = call i32 @function_13324()
  store i32 %v0_131e4, i32* %r0.global-to-local, align 4
  %v0_131e8.pre = load i32, i32* @r1, align 4
  %v1_131e8.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_131e8

dec_label_pc_131e8:                               ; preds = %dec_label_pc_131d8, %dec_label_pc_131e4
  %v1_131e8 = phi i32 [ %v3_131d0, %dec_label_pc_131d8 ], [ %v1_131e8.pre, %dec_label_pc_131e4 ]
  %v0_131e8 = phi i32 [ %v3_131c4, %dec_label_pc_131d8 ], [ %v0_131e8.pre, %dec_label_pc_131e4 ]
  %v2_131e8 = add i32 %v1_131e8, 8
  %v3_131e8 = inttoptr i32 %v2_131e8 to i32*
  store i32 %v0_131e8, i32* %v3_131e8, align 4
  %v0_131ec = load i32, i32* %r2.global-to-local, align 4
  %v1_131ec = load i32, i32* %r1.global-to-local, align 4
  %v2_131ec = add i32 %v1_131ec, 12
  %v3_131ec = inttoptr i32 %v2_131ec to i32*
  store i32 %v0_131ec, i32* %v3_131ec, align 4
  %v0_131f0 = load i32, i32* %ip.global-to-local, align 4
  %v1_131f0 = load i32, i32* %r0.global-to-local, align 4
  %v2_131f0 = add i32 %v1_131f0, %v0_131f0
  store i32 %v2_131f0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_131f4

dec_label_pc_131f4:                               ; preds = %dec_label_pc_131b0.dec_label_pc_131f4_crit_edge, %dec_label_pc_131e8
  %v0_13204 = phi i32 [ %v0_13204.pre, %dec_label_pc_131b0.dec_label_pc_131f4_crit_edge ], [ %v2_131f0, %dec_label_pc_131e8 ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_131f8 = load i32, i32* @r7, align 4
  %v2_131f8 = add i32 %v0_131f8, 32
  %v3_131f8 = inttoptr i32 %v2_131f8 to i32*
  %v4_131f8 = load i32, i32* %v3_131f8, align 4
  %v1_131fc = add i32 %v4_131f8, 52
  store i32 %v1_131fc, i32* %r3.global-to-local, align 4
  %v1_13200 = add i32 %v4_131f8, 60
  %v2_13200 = inttoptr i32 %v1_13200 to i32*
  %v3_13200 = load i32, i32* %v2_13200, align 4
  store i32 %v3_13200, i32* %r1.global-to-local, align 4
  %v1_13204 = or i32 %v0_13204, 1
  store i32 %v1_13204, i32* %r2.global-to-local, align 4
  %v1_13208 = load i32, i32* %r4.global-to-local, align 4
  %v2_13208 = add i32 %v1_13208, 12
  %v3_13208 = inttoptr i32 %v2_13208 to i32*
  store i32 %v1_131fc, i32* %v3_13208, align 4
  %v0_1320c = load i32, i32* %r1.global-to-local, align 4
  %v1_1320c = load i32, i32* %r4.global-to-local, align 4
  %v2_1320c = add i32 %v1_1320c, 8
  %v3_1320c = inttoptr i32 %v2_1320c to i32*
  store i32 %v0_1320c, i32* %v3_1320c, align 4
  %v0_13210 = load i32, i32* %r2.global-to-local, align 4
  %v1_13210 = load i32, i32* %r4.global-to-local, align 4
  %v2_13210 = add i32 %v1_13210, 4
  %v3_13210 = inttoptr i32 %v2_13210 to i32*
  store i32 %v0_13210, i32* %v3_13210, align 4
  %v0_13214 = load i32, i32* %ip.global-to-local, align 4
  %v1_13214 = load i32, i32* %r4.global-to-local, align 4
  %v3_13214 = add i32 %v1_13214, %v0_13214
  %v4_13214 = inttoptr i32 %v3_13214 to i32*
  store i32 %v0_13214, i32* %v4_13214, align 4
  %v0_13218 = load i32, i32* %r4.global-to-local, align 4
  %v1_13218 = load i32, i32* %r1.global-to-local, align 4
  %v2_13218 = add i32 %v1_13218, 12
  %v3_13218 = inttoptr i32 %v2_13218 to i32*
  store i32 %v0_13218, i32* %v3_13218, align 4
  %v0_1321c = load i32, i32* %r4.global-to-local, align 4
  %v1_1321c = load i32, i32* %r3.global-to-local, align 4
  %v2_1321c = add i32 %v1_1321c, 8
  %v3_1321c = inttoptr i32 %v2_1321c to i32*
  store i32 %v0_1321c, i32* %v3_1321c, align 4
  br label %dec_label_pc_13234

dec_label_pc_13224:                               ; preds = %dec_label_pc_13198
  %v2_13224 = add i32 %v1_131a8, %v0_13224
  store i32 %v2_13224, i32* %ip.global-to-local, align 4
  %v1_13228 = or i32 %v2_13224, 1
  store i32 %v1_13228, i32* %r3.global-to-local, align 4
  %v0_1322c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1322c, i32* %v2_131a0, align 4
  %v0_13230 = load i32, i32* %r3.global-to-local, align 4
  %v1_13230 = load i32, i32* %r4.global-to-local, align 4
  %v2_13230 = add i32 %v1_13230, 4
  %v3_13230 = inttoptr i32 %v2_13230 to i32*
  store i32 %v0_13230, i32* %v3_13230, align 4
  br label %dec_label_pc_13234

dec_label_pc_13234:                               ; preds = %dec_label_pc_131f4, %dec_label_pc_13224
  %v0_13234 = load i32, i32* %ip.global-to-local, align 4
  %v3_13238 = icmp ult i32 %v0_13234, 131070
  br i1 %v3_13238, label %dec_label_pc_132a4, label %dec_label_pc_1323c

dec_label_pc_1323c:                               ; preds = %dec_label_pc_13234
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_13240 = load i32, i32* @r7, align 4
  %v2_13240 = add i32 %v0_13240, 32
  %v3_13240 = inttoptr i32 %v2_13240 to i32*
  %v4_13240 = load i32, i32* %v3_13240, align 4
  store i32 %v4_13240, i32* @r4, align 4
  %v1_13244 = inttoptr i32 %v4_13240 to i32*
  %v2_13244 = load i32, i32* %v1_13244, align 4
  store i32 %v2_13244, i32* %r3.global-to-local, align 4
  %v1_13248 = and i32 %v2_13244, 2
  %v2_13248 = icmp eq i32 %v1_13248, 0
  br i1 %v2_13248, label %bb15, label %bb

bb:                                               ; preds = %dec_label_pc_1323c
  store i32 %v4_13240, i32* %r0.global-to-local, align 4
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_1323c, %bb
  store i32 78420, i32* @lr, align 4
  %v1_13250 = xor i1 %v2_13248, true
  call void @__pseudo_cond_branch(i1 %v1_13250, i32 ptrtoint (i32* @global_var_12ef4.404 to i32))
  %v0_13254 = load i32, i32* @r4, align 4
  %v1_13254 = add i32 %v0_13254, 44
  %v2_13254 = inttoptr i32 %v1_13254 to i32*
  %v3_13254 = load i32, i32* %v2_13254, align 4
  store i32 %v3_13254, i32* %r3.global-to-local, align 4
  %v1_13258 = add i32 %v3_13254, 4
  %v2_13258 = inttoptr i32 %v1_13258 to i32*
  %v3_13258 = load i32, i32* %v2_13258, align 4
  store i32 %v3_13258, i32* %r3.global-to-local, align 4
  %v1_1325c = add i32 %v0_13254, 836
  %v2_1325c = inttoptr i32 %v1_1325c to i32*
  %v3_1325c = load i32, i32* %v2_1325c, align 4
  store i32 %v3_1325c, i32* %r2.global-to-local, align 4
  %v1_13260 = and i32 %v3_13258, -4
  store i32 %v1_13260, i32* %r3.global-to-local, align 4
  %v3_13264 = icmp ult i32 %v1_13260, %v3_1325c
  br i1 %v3_13264, label %dec_label_pc_132a4, label %dec_label_pc_1326c

dec_label_pc_1326c:                               ; preds = %bb15
  store i32 %v0_13254, i32* %r1.global-to-local, align 4
  %v1_13270 = add i32 %v0_13254, 840
  %v2_13270 = inttoptr i32 %v1_13270 to i32*
  %v3_13270 = load i32, i32* %v2_13270, align 4
  store i32 %v3_13270, i32* %r0.global-to-local, align 4
  %v2_13274 = call i32 @function_12e44(i32 %v3_13270, i32 %v0_13254)
  store i32 %v2_13274, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_132a4

dec_label_pc_1327c:                               ; preds = %dec_label_pc_13140
  %v2_1327c = inttoptr i32 %v1_13110 to i32*
  %v3_1327c = load i32, i32* %v2_1327c, align 4
  store i32 %v3_1327c, i32* %r0.global-to-local, align 4
  %v1_13280 = add i32 %v4_13100, 848
  %v2_13280 = inttoptr i32 %v1_13280 to i32*
  %v3_13280 = load i32, i32* %v2_13280, align 4
  store i32 %v3_13280, i32* %r2.global-to-local, align 4
  %v1_13284 = add i32 %v4_13100, 868
  %v2_13284 = inttoptr i32 %v1_13284 to i32*
  %v3_13284 = load i32, i32* %v2_13284, align 4
  %v2_13288 = add i32 %v3_1327c, %v1_1310c
  store i32 %v2_13288, i32* %r1.global-to-local, align 4
  %v1_1328c = add i32 %v3_13280, -1
  store i32 %v1_1328c, i32* %r2.global-to-local, align 4
  %v2_13290 = sub i32 %v3_13284, %v2_13288
  store i32 %v2_13290, i32* %r3.global-to-local, align 4
  store i32 %v2_13290, i32* %v2_13284, align 4
  %v1_13298 = load i32, i32* @lr, align 4
  %v2_13298 = add i32 %v1_13298, 848
  %v3_13298 = inttoptr i32 %v2_13298 to i32*
  store i32 %v1_1328c, i32* %v3_13298, align 4
  %v0_1329c = load i32, i32* %r0.global-to-local, align 4
  %v1_1329c = load i32, i32* @r5, align 4
  %v2_1329c = sub i32 %v1_1329c, %v0_1329c
  store i32 %v2_1329c, i32* %r0.global-to-local, align 4
  %v4_132a0 = call i32 @function_1488c(i32 %v2_1329c, i32 %v2_13288, i32 %v1_1328c, i32 %v2_13290)
  store i32 %v4_132a0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_132a4

dec_label_pc_132a4:                               ; preds = %bb15, %dec_label_pc_13234, %dec_label_pc_1326c, %dec_label_pc_13120, %dec_label_pc_1327c
  store i32 %v2_130b4, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_132b0 = load i32, i32* @r7, align 4
  %v2_132b0 = add i32 %v0_132b0, 24
  %v3_132b0 = inttoptr i32 %v2_132b0 to i32*
  %v4_132b0 = load i32, i32* %v3_132b0, align 4
  store i32 %v4_132b0, i32* @ip, align 4
  store i32 78524, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_132b0)
  br label %dec_label_pc_132bc

dec_label_pc_132bc:                               ; preds = %dec_label_pc_130a8, %dec_label_pc_132a4
  store i32 %v3_130a8, i32* @r4, align 4
  store i32 %v6_130a8, i32* @r5, align 4
  store i32 %v9_130a8, i32* @r6, align 4
  store i32 %v12_130a8, i32* @r7, align 4
  store i32 %v18_130a8, i32* @lr, align 4
  ret i32 %v2_130b4

; uselistorder directives
  uselistorder i32 %v0_13254, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_13214, { 1, 0 }
  uselistorder i32 %v1_13154, { 1, 0 }
  uselistorder i32 %v0_13154, { 1, 0 }
  uselistorder i32 %v3_13128, { 1, 0 }
  uselistorder i32 %v1_1310c, { 1, 0, 2 }
  uselistorder i32 %v2_13108, { 1, 2, 0, 3 }
  uselistorder i32 %v4_13100, { 1, 0, 2, 3 }
  uselistorder i32 %v0_130b0, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %r0.global-to-local, { 3, 14, 0, 1, 2, 13, 4, 5, 11, 12, 6, 7, 8, 10, 9 }
  uselistorder i32* %lr.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %ip.global-to-local, { 4, 0, 5, 1, 6, 3, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 868, { 2, 0, 1, 3, 4, 5 }
  uselistorder label %dec_label_pc_132bc, { 1, 0 }
  uselistorder label %dec_label_pc_132a4, { 4, 2, 0, 1, 3 }
  uselistorder label %bb15, { 1, 0 }
  uselistorder label %dec_label_pc_13234, { 1, 0 }
  uselistorder label %dec_label_pc_131f4, { 1, 0 }
  uselistorder label %dec_label_pc_131e8, { 1, 0 }
  uselistorder label %dec_label_pc_131e4, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_13198, { 1, 0 }
}

define i32 @function_132cc(i32 %arg1) local_unnamed_addr {
dec_label_pc_132cc:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_132cc = load i1, i1* @cpsr_z, align 1
  %v2_132cc = load i32, i32* @r4, align 4
  br i1 %v0_132cc, label %bb, label %dec_label_pc_132cc..thread4_crit_edge

dec_label_pc_132cc..thread4_crit_edge:            ; preds = %dec_label_pc_132cc
  %v0_132f8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_132cc
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_132cc..thread4_crit_edge, %bb
  %v0_132f8 = phi i32 [ %v0_132f8.pre, %dec_label_pc_132cc..thread4_crit_edge ], [ 0, %bb ]
  store i32 %v2_132cc, i32* %stack_var_-12, align 4
  %v6_132e4 = load i32, i32* @r5, align 4
  %v9_132e4 = load i32, i32* @lr, align 4
  %v4_132f4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint ([3 x i8]* @global_var_bd18.407 to i32), i32 78616) to i32*), align 4
  store i32 %v4_132f4, i32* @r5, align 4
  store i32 %v0_132f8, i32* @r4, align 4
  store i32 %v4_132f4, i32* @r0, align 4
  %v0_13304 = call i32 @function_12ef4()
  %v0_13308 = load i32, i32* @r4, align 4
  store i32 %v0_13308, i32* %r0.global-to-local, align 4
  %v0_1330c = load i32, i32* @r5, align 4
  %v2_13314 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13314, i32* @r4, align 4
  store i32 %v6_132e4, i32* @r5, align 4
  store i32 %v9_132e4, i32* @lr, align 4
  %v2_13318 = call i32 @function_12e44(i32 %v0_13308, i32 %v0_1330c)
  store i32 %v2_13318, i32* %r0.global-to-local, align 4
  %v0_1331c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1331c, label %bb13, label %.thread5

bb13:                                             ; preds = %.thread4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %.thread4, %bb13
  %v4_13320 = phi i32 [ %v2_13318, %.thread4 ], [ 0, %bb13 ]
  ret i32 %v4_13320

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 5, 3, 4, 0, 1 }
  uselistorder i32 (i32, i32)* @function_12e44, { 1, 0 }
  uselistorder i32 ()* @function_12ef4, { 3, 2, 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_13324() local_unnamed_addr {
dec_label_pc_13324:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 126992, i32* @r5, align 4
  %v4_1333c = load i32, i32* inttoptr (i32 127008 to i32*), align 32
  store i32 78664, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_1333c)
  %v2_13358 = ptrtoint i32* %stack_var_-8 to i32
  store i32 32, i32* %stack_var_-8, align 4
  %v3_13364 = call i32 @function_115a8(i32 1, i32 %v2_13358, i32 0)
  %v4_1336c = load i32, i32* @global_var_1f2a8.413, align 4
  %v2_13370 = icmp eq i32 %v4_1336c, 0
  br i1 %v2_13370, label %dec_label_pc_13378, label %dec_label_pc_133b8

dec_label_pc_13378:                               ; preds = %dec_label_pc_13324
  store i32 1, i32* @global_var_1f2a8.413, align 4
  br label %dec_label_pc_13380

dec_label_pc_13380:                               ; preds = %dec_label_pc_133c8, %dec_label_pc_13378
  %v0_13384 = load i32, i32* @r5, align 4
  %v2_13384 = add i32 %v0_13384, 160
  store i32 %v2_13384, i32* @r4, align 4
  %v2_13390 = add i32 %v0_13384, 36
  %v3_13390 = inttoptr i32 %v2_13390 to i32*
  %v4_13390 = load i32, i32* %v3_13390, align 4
  call void @__pseudo_branch(i32 %v4_13390)
  %v1_133a0 = call i32 @function_11e2c(i32 6)
  %v0_133ac = load i32, i32* @r5, align 4
  %v2_133ac = add i32 %v0_133ac, 16
  %v3_133ac = inttoptr i32 %v2_133ac to i32*
  %v4_133ac = load i32, i32* %v3_133ac, align 4
  store i32 78776, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_133ac)
  %v4_133bc.pre = load i32, i32* @global_var_1f2a8.413, align 4
  br label %dec_label_pc_133b8

dec_label_pc_133b8:                               ; preds = %dec_label_pc_13324, %dec_label_pc_13380
  %v0_133cc = phi i32 [ %v4_1336c, %dec_label_pc_13324 ], [ %v4_133bc.pre, %dec_label_pc_13380 ]
  %v7_133c0 = icmp eq i32 %v0_133cc, 1
  br i1 %v7_133c0, label %dec_label_pc_133c8, label %dec_label_pc_13404

dec_label_pc_133c8:                               ; preds = %dec_label_pc_133b8
  %v2_133c8 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_133c8, i32* @r4, align 4
  store i32 2, i32* @global_var_1f2a8.413, align 4
  store i32 20, i32* @r2, align 4
  %v2_133e0 = bitcast i32* %stack_var_-28 to i8*
  %v3_133e0 = call i32 @function_11a60(i8* %v2_133e0, i32 0)
  %v3_133fc = call i32 @function_1438c(i32 6, i32 %v2_133c8, i32 0)
  br label %dec_label_pc_13380

dec_label_pc_13404:                               ; preds = %dec_label_pc_133b8
  %v7_13404 = icmp eq i32 %v0_133cc, 2
  br i1 %v7_13404, label %dec_label_pc_1340c, label %dec_label_pc_13418

dec_label_pc_1340c:                               ; preds = %dec_label_pc_13404
  store i32 3, i32* @global_var_1f2a8.413, align 4
  %v0_13414 = call i32 @function_13324()
  %v4_13418.pre = load i32, i32* @global_var_1f2a8.413, align 4
  br label %dec_label_pc_13418

dec_label_pc_13418:                               ; preds = %dec_label_pc_13404, %dec_label_pc_1340c
  %v1_13420 = phi i32 [ %v0_133cc, %dec_label_pc_13404 ], [ %v4_13418.pre, %dec_label_pc_1340c ]
  %v7_1341c = icmp eq i32 %v1_13420, 3
  br i1 %v7_1341c, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_13418
  store i32 4, i32* @global_var_1f2a8.413, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_13418, %bb
  call void @__pseudo_cond_branch(i1 %v7_1341c, i32 ptrtoint (i32* @global_var_1497c.415 to i32))
  br label %dec_label_pc_13430

dec_label_pc_13430:                               ; preds = %dec_label_pc_13430, %.thread1
  %v0_13430 = call i32 @function_13324()
  br label %dec_label_pc_13430

; uselistorder directives
  uselistorder i32 ()* @function_13324, { 2, 1, 6, 0, 4, 5, 3 }
  uselistorder i32 6, { 13, 14, 65, 15, 29, 16, 30, 17, 31, 19, 20, 21, 18, 28, 1, 0, 3, 32, 33, 34, 4, 35, 36, 37, 38, 5, 39, 40, 41, 42, 6, 43, 7, 44, 45, 22, 46, 8, 47, 48, 49, 23, 50, 9, 51, 52, 53, 24, 54, 55, 56, 25, 57, 10, 58, 59, 60, 61, 26, 62, 11, 63, 66, 67, 68, 69, 70, 27, 71, 12, 72, 2, 64 }
  uselistorder i32* @global_var_1f2a8.413, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32* inttoptr (i32 127008 to i32*), { 2, 0, 1 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_13418, { 1, 0 }
  uselistorder label %dec_label_pc_133b8, { 1, 0 }
}

define i32 @function_1343c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1343c:
  %v0_1343c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1343c, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_1343c
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_1343c, %bb
  %v4_13448 = phi i32 [ %arg1, %dec_label_pc_1343c ], [ 0, %bb ]
  ret i32 %v4_13448

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_1344c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1344c:
  store i32 0, i32* @r1, align 4
  store i32 10, i32* @r2, align 4
  %v0_1345c = call i32 @function_1346c()
  ret i32 %v0_1345c
}

define i32 @function_1346c() local_unnamed_addr {
dec_label_pc_1346c:
  store i32 1, i32* @r3, align 4
  %v0_13478 = call i32 @function_13488()
  ret i32 %v0_13478
}

define i32 @function_13488() local_unnamed_addr {
dec_label_pc_13488:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %v3_13488 = load i32, i32* @r4, align 4
  store i32 224, i32* @lr, align 4
  store i32 126992, i32* %ip.global-to-local, align 4
  %v0_1349c = load i32, i32* @r1, align 4
  store i32 %v0_1349c, i32* %fp.global-to-local, align 4
  %v0_134a0 = load i32, i32* @r2, align 4
  store i32 %v0_134a0, i32* %r5.global-to-local, align 4
  %v0_134a4 = load i32, i32* @r0, align 4
  store i32 %v0_134a4, i32* @r4, align 4
  %v0_134a8 = load i32, i32* @r3, align 4
  br label %dec_label_pc_134b4

dec_label_pc_134b0:                               ; preds = %dec_label_pc_134b4
  %v1_134b0 = add i32 %v0_134ec, 1
  store i32 %v1_134b0, i32* @r4, align 4
  br label %dec_label_pc_134b4

dec_label_pc_134b4:                               ; preds = %dec_label_pc_13488, %dec_label_pc_134b0
  %v0_134ec = phi i32 [ %v0_134a4, %dec_label_pc_13488 ], [ %v1_134b0, %dec_label_pc_134b0 ]
  %v1_134b4 = inttoptr i32 %v0_134ec to i8*
  %v2_134b4 = load i8, i8* %v1_134b4, align 1
  %v3_134b4 = zext i8 %v2_134b4 to i32
  %v4_134b8 = load i32, i32* inttoptr (i32 127216 to i32*), align 16
  %v2_134bc = mul nuw nsw i32 %v3_134b4, 2
  %v2_134c0 = add i32 %v2_134bc, %v4_134b8
  %v3_134c0 = inttoptr i32 %v2_134c0 to i16*
  %v4_134c0 = load i16, i16* %v3_134c0, align 2
  %v1_134c4 = and i16 %v4_134c0, 32
  %v2_134c4 = icmp eq i16 %v1_134c4, 0
  br i1 %v2_134c4, label %dec_label_pc_134cc, label %dec_label_pc_134b0

dec_label_pc_134cc:                               ; preds = %dec_label_pc_134b4
  %v7_134cc = icmp eq i8 %v2_134b4, 43
  br i1 %v7_134cc, label %dec_label_pc_134ec, label %dec_label_pc_134d4

dec_label_pc_134d4:                               ; preds = %dec_label_pc_134cc
  %v7_134d4 = icmp eq i8 %v2_134b4, 45
  br i1 %v7_134d4, label %dec_label_pc_134ec, label %bb

bb:                                               ; preds = %dec_label_pc_134d4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_134f0

dec_label_pc_134ec:                               ; preds = %dec_label_pc_134cc, %dec_label_pc_134d4
  %storemerge39 = phi i32 [ 1, %dec_label_pc_134d4 ], [ 0, %dec_label_pc_134cc ]
  store i32 %storemerge39, i32* @r7, align 4
  %v1_134ec = add i32 %v0_134ec, 1
  store i32 %v1_134ec, i32* @r4, align 4
  br label %dec_label_pc_134f0

dec_label_pc_134f0:                               ; preds = %bb, %dec_label_pc_134ec
  %v0_13510 = phi i32 [ %v0_134ec, %bb ], [ %v1_134ec, %dec_label_pc_134ec ]
  %v1_134f0 = and i32 %v0_134a0, -17
  %v3_134f0 = icmp eq i32 %v1_134f0, 0
  br i1 %v3_134f0, label %dec_label_pc_134fc, label %bb52

bb52:                                             ; preds = %dec_label_pc_134f0
  store i32 %v0_134a4, i32* %r6.global-to-local, align 4
  br label %bb56

dec_label_pc_134fc:                               ; preds = %dec_label_pc_134f0
  %v1_134fc = inttoptr i32 %v0_13510 to i8*
  %v2_134fc = load i8, i8* %v1_134fc, align 1
  %v7_13500 = icmp eq i8 %v2_134fc, 48
  %v1_13504 = add i32 %v0_134a0, 10
  store i32 %v1_13504, i32* %r5.global-to-local, align 4
  br i1 %v7_13500, label %dec_label_pc_13510, label %bb53

bb53:                                             ; preds = %dec_label_pc_134fc
  store i32 %v0_134a4, i32* %r6.global-to-local, align 4
  br label %.thread8

dec_label_pc_13510:                               ; preds = %dec_label_pc_134fc
  %v1_13510 = add i32 %v0_13510, 1
  %v2_13510 = inttoptr i32 %v1_13510 to i8*
  %v3_13510 = load i8, i8* %v2_13510, align 1
  %v4_13510 = zext i8 %v3_13510 to i32
  store i32 %v1_13510, i32* @r4, align 4
  %v1_13514 = or i32 %v4_13510, 32
  %v7_13518 = icmp eq i32 %v1_13514, 120
  %v1_1351c = add i32 %v0_134a0, 8
  store i32 %v1_1351c, i32* %r5.global-to-local, align 4
  store i32 %v1_13510, i32* %r6.global-to-local, align 4
  br i1 %v7_13518, label %bb54, label %.thread8

bb54:                                             ; preds = %dec_label_pc_13510
  %v3_13528 = mul i32 %v1_1351c, 2
  store i32 %v3_13528, i32* %r5.global-to-local, align 4
  %v2_1352c = add i32 %v0_13510, 2
  store i32 %v2_1352c, i32* @r4, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_13510, %bb53, %bb54
  %v0_13530 = phi i32 [ %v1_13504, %bb53 ], [ %v3_13528, %bb54 ], [ %v1_1351c, %dec_label_pc_13510 ]
  %v5_13534 = icmp slt i32 %v0_13530, 16
  br i1 %v5_13534, label %bb56, label %bb55

bb55:                                             ; preds = %.thread8
  store i32 16, i32* %r5.global-to-local, align 4
  br label %bb56

bb56:                                             ; preds = %bb52, %.thread8, %bb55
  %v0_1354c = phi i32 [ %v0_134a0, %bb52 ], [ %v0_13530, %.thread8 ], [ 16, %bb55 ]
  %v1_13538 = add i32 %v0_1354c, -2
  %tmp = icmp ugt i32 %v1_13538, 34
  br i1 %tmp, label %.thread, label %dec_label_pc_13548

.thread:                                          ; preds = %bb56
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_135f4

dec_label_pc_13548:                               ; preds = %bb56
  %v2_13550 = call i32 @function_11178(i32 -1, i32 %v0_1354c)
  store i32 -1, i32* @r0, align 4
  %v0_1355c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1355c, i32* @r1, align 4
  %v1_13560 = urem i32 %v0_1354c, 256
  store i32 %v1_13560, i32* %sl.global-to-local, align 4
  %v0_13564 = call i32 @function_1107c()
  store i32 -1, i32* %sb.global-to-local, align 4
  store i32 %v0_13564, i32* %r8.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_1357c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1357c

dec_label_pc_13578:                               ; preds = %bb63, %dec_label_pc_135d8
  %v0_13578 = phi i32 [ %v1_135b836, %bb63 ], [ %v0_13578.pre, %dec_label_pc_135d8 ]
  store i32 %v0_13578, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1357c

dec_label_pc_1357c:                               ; preds = %dec_label_pc_13548, %dec_label_pc_13578
  %v0_135b8 = phi i32 [ %v0_1357c.pre, %dec_label_pc_13548 ], [ %v0_13578, %dec_label_pc_13578 ]
  %v1_1357c = inttoptr i32 %v0_135b8 to i8*
  %v2_1357c = load i8, i8* %v1_1357c, align 1
  %v3_1357c = zext i8 %v2_1357c to i32
  %v1_13580 = add nsw i32 %v3_1357c, -48
  %v1_13584 = urem i32 %v1_13580, 256
  %v1_1358c = or i32 %v3_1357c, 32
  %tmp71 = icmp ult i32 %v1_13584, 10
  br i1 %tmp71, label %bb58, label %dec_label_pc_13594

dec_label_pc_13594:                               ; preds = %dec_label_pc_1357c
  %tmp72 = icmp ugt i32 %v1_1358c, 96
  br i1 %tmp72, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_13594
  %v1_13598 = add nsw i32 %v1_1358c, -87
  %v5_135a0 = urem i32 %v1_13598, 256
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_1357c, %dec_label_pc_13594, %bb57
  %v3_135d0 = phi i32 [ %v1_13584, %dec_label_pc_1357c ], [ 40, %dec_label_pc_13594 ], [ %v5_135a0, %bb57 ]
  %v1_135a4 = load i32, i32* %r5.global-to-local, align 4
  %v6_135a8 = icmp slt i32 %v3_135d0, %v1_135a4
  br i1 %v6_135a8, label %dec_label_pc_135ac, label %dec_label_pc_135f4.loopexit

dec_label_pc_135ac:                               ; preds = %bb58
  %v0_135ac = load i32, i32* %ip.global-to-local, align 4
  %v1_135ac = load i32, i32* %r8.global-to-local, align 4
  %v9_135ac = icmp eq i32 %v0_135ac, %v1_135ac
  br i1 %v9_135ac, label %.thread31, label %bb59

.thread31:                                        ; preds = %dec_label_pc_135ac
  %v1_135b832 = add i32 %v0_135b8, 1
  store i32 %v1_135b832, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_135c0

bb59:                                             ; preds = %dec_label_pc_135ac
  %v3_135ac = icmp ult i32 %v0_135ac, %v1_135ac
  %v1_135b8 = add i32 %v0_135b8, 1
  store i32 %v1_135b8, i32* %r4.global-to-local, align 4
  br i1 %v3_135ac, label %dec_label_pc_135c0, label %dec_label_pc_135d8

dec_label_pc_135c0:                               ; preds = %bb59, %.thread31
  %v1_135b836 = phi i32 [ %v1_135b832, %.thread31 ], [ %v1_135b8, %bb59 ]
  %v4_135c82235 = phi i32 [ 1, %.thread31 ], [ 0, %bb59 ]
  %v1_135c0 = load i32, i32* %sl.global-to-local, align 4
  %v3_135c0 = icmp uge i32 %v3_135d0, %v1_135c0
  %v9_135c0 = icmp eq i32 %v3_135d0, %v1_135c0
  %v2_135c4 = xor i1 %v3_135c0, true
  %v3_135c4 = or i1 %v9_135c0, %v2_135c4
  br i1 %v3_135c4, label %bb60, label %bb61

bb60:                                             ; preds = %dec_label_pc_135c0
  br label %bb61

bb61:                                             ; preds = %dec_label_pc_135c0, %bb60
  %v4_135c8 = phi i32 [ %v4_135c82235, %dec_label_pc_135c0 ], [ 0, %bb60 ]
  %v2_135c8 = xor i1 %v9_135c0, true
  %v3_135c8 = and i1 %v3_135c0, %v2_135c8
  br i1 %v3_135c8, label %bb62, label %thread-pre-split

bb62:                                             ; preds = %bb61
  %v5_135c8 = urem i32 %v4_135c8, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb61, %bb62
  %v0_135cc = phi i32 [ %v5_135c8, %bb62 ], [ %v4_135c8, %bb61 ]
  %v2_135cc = icmp eq i32 %v0_135cc, 0
  br i1 %v2_135cc, label %bb63, label %dec_label_pc_135d8

bb63:                                             ; preds = %thread-pre-split
  %v4_135d0 = mul i32 %v0_135ac, %v1_135a4
  %v5_135d0 = add i32 %v4_135d0, %v3_135d0
  store i32 %v5_135d0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13578

dec_label_pc_135d8:                               ; preds = %bb59, %thread-pre-split
  %v0_135d8 = call i32 @function_11a08()
  %v0_135e0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_135e0, i32* %ip.global-to-local, align 4
  %v0_135e4 = load i32, i32* @r7, align 4
  %v2_135e4 = and i32 %v0_135e4, %v0_134a8
  store i32 %v2_135e4, i32* @r7, align 4
  %v2_135ec = inttoptr i32 %v0_135d8 to i32*
  store i32 34, i32* %v2_135ec, align 4
  %v0_13578.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13578

dec_label_pc_135f4.loopexit:                      ; preds = %bb58
  %v0_135f4.pre = load i32, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_135f4

dec_label_pc_135f4:                               ; preds = %.thread, %dec_label_pc_135f4.loopexit
  %v2_135f8 = phi i32 [ %v0_135f4.pre, %dec_label_pc_135f4.loopexit ], [ %v0_1349c, %.thread ]
  %v2_135f4 = icmp eq i32 %v2_135f8, 0
  br i1 %v2_135f4, label %bb65, label %bb64

bb64:                                             ; preds = %dec_label_pc_135f4
  %v1_135f8 = load i32, i32* %r6.global-to-local, align 4
  %v3_135f8 = inttoptr i32 %v2_135f8 to i32*
  store i32 %v1_135f8, i32* %v3_135f8, align 4
  br label %bb65

bb65:                                             ; preds = %dec_label_pc_135f4, %bb64
  %v0_13600 = load i32, i32* @r7, align 4
  %v2_13600 = icmp eq i32 %v0_13600, 0
  %. = select i1 %v2_13600, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v2_1360c = icmp eq i32 %v0_134a8, 0
  %v0_13630.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_1360c, label %dec_label_pc_13628, label %bb68

bb68:                                             ; preds = %bb65
  %tmp73 = icmp ugt i32 %v0_13630.pre.pre, %.
  br i1 %tmp73, label %dec_label_pc_13618, label %dec_label_pc_13628

dec_label_pc_13618:                               ; preds = %bb68
  %v0_13618 = call i32 @function_11a08()
  %v2_13620 = inttoptr i32 %v0_13618 to i32*
  store i32 34, i32* %v2_13620, align 4
  %v0_13624 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13624, i32* %ip.global-to-local, align 4
  %v0_13628.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_13628

dec_label_pc_13628:                               ; preds = %bb68, %bb65, %dec_label_pc_13618
  %v0_13630.pre = phi i32 [ %v0_13630.pre.pre, %bb68 ], [ %v0_13624, %dec_label_pc_13618 ], [ %v0_13630.pre.pre, %bb65 ]
  %v0_13628 = phi i32 [ %v0_13600, %bb68 ], [ %v0_13628.pre, %dec_label_pc_13618 ], [ %v0_13600, %bb65 ]
  %v2_13628 = icmp eq i32 %v0_13628, 0
  br i1 %v2_13628, label %dec_label_pc_13628._crit_edge, label %bb69

bb69:                                             ; preds = %dec_label_pc_13628
  %v2_1362c = sub i32 0, %v0_13630.pre
  store i32 %v2_1362c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13628._crit_edge

dec_label_pc_13628._crit_edge:                    ; preds = %dec_label_pc_13628, %bb69
  %v0_13630 = phi i32 [ %v2_1362c, %bb69 ], [ %v0_13630.pre, %dec_label_pc_13628 ]
  store i32 %v3_13488, i32* @r4, align 4
  ret i32 %v0_13630

; uselistorder directives
  uselistorder i32 %v0_13630.pre, { 1, 0 }
  uselistorder i32 %v0_13630.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v4_135c8, { 1, 0 }
  uselistorder i1 %v3_135c0, { 1, 0 }
  uselistorder i32 %v1_135c0, { 1, 0 }
  uselistorder i32 %v1_1358c, { 1, 0 }
  uselistorder i32 %v1_13584, { 1, 0 }
  uselistorder i32 %v0_135b8, { 1, 0, 2 }
  uselistorder i32 %v0_13578, { 1, 0 }
  uselistorder i32 %v3_13528, { 1, 0 }
  uselistorder i32 %v1_1351c, { 1, 0, 2 }
  uselistorder i32 %v0_134ec, { 0, 1, 3, 2 }
  uselistorder i32 %v0_134a8, { 1, 0 }
  uselistorder i32 %v0_134a0, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32* %r5.global-to-local, { 4, 5, 0, 1, 2, 3, 6 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 1, 0, 2 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 7, 8 }
  uselistorder i32 ()* @function_1107c, { 5, 3, 2, 1, 4, 0 }
  uselistorder i32 (i32, i32)* @function_11178, { 3, 2, 0, 8, 7, 1, 6, 5, 4 }
  uselistorder i32 34, { 1, 2, 0, 4, 6, 3, 7, 5 }
  uselistorder i8 48, { 1, 0, 2 }
  uselistorder i32 -17, { 1, 0 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder label %dec_label_pc_13628._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_13628, { 2, 0, 1 }
  uselistorder label %bb65, { 1, 0 }
  uselistorder label %dec_label_pc_135f4, { 1, 0 }
  uselistorder label %dec_label_pc_135d8, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %bb58, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1357c, { 1, 0 }
  uselistorder label %dec_label_pc_13578, { 1, 0 }
  uselistorder label %bb56, { 2, 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_134f0, { 1, 0 }
  uselistorder label %dec_label_pc_134ec, { 1, 0 }
  uselistorder label %dec_label_pc_134b4, { 1, 0 }
}

define i32 @function_13648(i32 %arg1) local_unnamed_addr {
dec_label_pc_13648:
  %stack_var_-16 = alloca i32, align 4
  store i32 126992, i32* @r5, align 4
  %v4_13654 = load i32, i32* inttoptr (i32 127080 to i32*), align 8
  store i32 %v4_13654, i32* @r4, align 4
  %v2_1365c = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r6, align 4
  %v4_13674 = load i32, i32* inttoptr (i32 127064 to i32*), align 8
  call void @__pseudo_branch(i32 %v4_13674)
  %v0_13688 = load i32, i32* @r5, align 4
  %v2_13688 = add i32 %v0_13688, 16
  %v3_13688 = inttoptr i32 %v2_13688 to i32*
  %v4_13688 = load i32, i32* %v3_13688, align 4
  call void @__pseudo_branch(i32 %v4_13688)
  %v4_13698 = load i32, i32* @global_var_1f2ac.424, align 4
  %v2_1369c = icmp eq i32 %v4_13698, 0
  br i1 %v2_1369c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_13648
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13648, %bb
  %v2_136a8 = xor i1 %v2_1369c, true
  call void @__pseudo_cond_branch(i1 %v2_136a8, i32 %v4_13698)
  store i32 %v2_1365c, i32* @r0, align 4
  %v0_136b8 = load i32, i32* @r5, align 4
  %v2_136b8 = add i32 %v0_136b8, 24
  %v3_136b8 = inttoptr i32 %v2_136b8 to i32*
  %v4_136b8 = load i32, i32* %v3_136b8, align 4
  call void @__pseudo_branch(i32 %v4_136b8)
  %v0_136c4 = call i32 @function_13f14()
  %v0_136cc = load i32, i32* @r5, align 4
  %v9_136cc = icmp eq i32 %v0_136cc, 40032
  br i1 %v9_136cc, label %bb9, label %bb8

bb8:                                              ; preds = %.thread
  br label %bb9

bb9:                                              ; preds = %.thread, %bb8
  %v2_136d4 = xor i1 %v9_136cc, true
  call void @__pseudo_cond_branch(i1 %v2_136d4, i32 ptrtoint (i32* @global_var_153b0.427 to i32))
  %v0_136d8 = load i32, i32* @r6, align 4
  %v1_136dc = call i32 @function_1497c(i32 %v0_136d8)
  %v0_136e0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_136e0, label %bb10, label %.thread6

bb10:                                             ; preds = %bb9
  %v1_136e0 = load i32, i32* @fp, align 4
  %v2_136e0 = trunc i32 %v1_136e0 to i16
  %v4_136e0 = inttoptr i32 %v1_136dc to i16*
  store i16 %v2_136e0, i16* %v4_136e0, align 2
  %v5_136e0 = load i32, i32* @r8, align 4
  %v2_136f4 = load i32, i32* @r2, align 4
  %v3_136f4 = mul i32 %v2_136f4, %v4_136b8
  %v8_136f8 = shl i32 %v5_136e0, %v3_136f4
  %v9_136f8 = and i32 %v8_136f8, %v3_136f4
  br label %.thread6

.thread6:                                         ; preds = %bb9, %bb10
  %v10_136f8 = phi i32 [ %v1_136dc, %bb9 ], [ %v9_136f8, %bb10 ]
  ret i32 %v10_136f8

; uselistorder directives
  uselistorder i1 %v9_136cc, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb9, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_13700(i32 %arg1) local_unnamed_addr {
dec_label_pc_13700:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_13700 = load i32, i32* @r4, align 4
  %v6_13700 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* @ip, align 4
  %v2_13704 = icmp eq i32 %arg1, 0
  store i32 0, i32* @r4, align 4
  br i1 %v2_13704, label %dec_label_pc_13798, label %dec_label_pc_13714

dec_label_pc_13714:                               ; preds = %dec_label_pc_13700
  %v2_13724 = ptrtoint i32* %stack_var_-44 to i32
  store i32 65536, i32* %stack_var_-24, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v3_13738 = call i32 @function_1438c(i32 17, i32 0, i32 %v2_13724)
  %v3_1373c = load i32, i32* %stack_var_-44, align 4
  %v7_13740 = icmp eq i32 %v3_1373c, 1
  br i1 %v7_13740, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_13714
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_13714, %bb
  call void @__pseudo_cond_branch(i1 %v7_13740, i32 ptrtoint (i32* @global_var_115a8.429 to i32))
  %v2_13754 = ptrtoint i32* %stack_var_-16 to i32
  %v2_1375c = call i32 @function_148c0(i32 %v2_13754, i32 %v2_13754)
  %v2_13760 = icmp eq i32 %v2_1375c, 0
  br i1 %v2_13760, label %bb19, label %bb18

bb18:                                             ; preds = %.thread2
  %v3_13774 = load i32, i32* %stack_var_-16, align 4
  br label %bb19

bb19:                                             ; preds = %.thread2, %bb18
  %storemerge = phi i32 [ %v3_13774, %bb18 ], [ 0, %.thread2 ]
  store i32 %storemerge, i32* %r4.global-to-local, align 4
  %v3_13784 = load i32, i32* %stack_var_-24, align 4
  %v1_13788 = and i32 %v3_13784, 65536
  %v2_13788 = icmp eq i32 %v1_13788, 0
  br i1 %v2_13788, label %bb20, label %.thread6

bb20:                                             ; preds = %bb19
  br label %.thread6

.thread6:                                         ; preds = %bb19, %bb20
  call void @__pseudo_cond_branch(i1 %v2_13788, i32 ptrtoint (i32* @global_var_115a8.429 to i32))
  %v0_13798.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13798

dec_label_pc_13798:                               ; preds = %dec_label_pc_13700, %.thread6
  %v0_13798 = phi i32 [ %v0_13798.pre, %.thread6 ], [ 0, %dec_label_pc_13700 ]
  store i32 %v3_13700, i32* @r4, align 4
  store i32 %v6_13700, i32* @lr, align 4
  ret i32 %v0_13798

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @function_1438c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13798, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_137ac() local_unnamed_addr {
dec_label_pc_137ac:
  %stack_var_-36 = alloca i32, align 4
  store i32 126992, i32* @r4, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_16c2c.433 to i32), i32* @r0, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %stack_var_-36, align 4
  %v2_137cc = call i32 @function_14df0(i32 ptrtoint ([11 x i8]* @global_var_16c2c.433 to i32))
  store i32 %v2_137cc, i32* @r6, align 4
  %v2_137d0 = icmp eq i32 %v2_137cc, 0
  br i1 %v2_137d0, label %dec_label_pc_13850, label %dec_label_pc_137d8

dec_label_pc_137d8:                               ; preds = %dec_label_pc_137ac
  store i32 224, i32* @sl, align 4
  store i32 ptrtoint (i32* @global_var_16c38.436 to i32), i32* @r8, align 4
  %v2_137e4 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_137e4, i32* @r7, align 4
  br label %bb18

dec_label_pc_137ec:                               ; preds = %bb18
  %v3_137ec = load i32, i32* %stack_var_-36, align 4
  %v1_137f0 = inttoptr i32 %v3_137ec to i32*
  %v2_137f0 = load i32, i32* %v1_137f0, align 4
  %v1_137f4 = inttoptr i32 %v2_137f0 to i8*
  %v2_137f4 = load i8, i8* %v1_137f4, align 1
  %v7_137f8 = icmp eq i8 %v2_137f4, 99
  br i1 %v7_137f8, label %dec_label_pc_13800, label %.backedge3

dec_label_pc_13800:                               ; preds = %dec_label_pc_137ec
  %v1_13800 = add i32 %v2_137f0, 1
  %v2_13800 = inttoptr i32 %v1_13800 to i8*
  %v3_13800 = load i8, i8* %v2_13800, align 1
  %v7_13804 = icmp eq i8 %v3_13800, 112
  br i1 %v7_13804, label %dec_label_pc_1380c, label %.backedge3

dec_label_pc_1380c:                               ; preds = %dec_label_pc_13800
  %v1_1380c = add i32 %v2_137f0, 2
  %v2_1380c = inttoptr i32 %v1_1380c to i8*
  %v3_1380c = load i8, i8* %v2_1380c, align 1
  %v7_13810 = icmp eq i8 %v3_1380c, 117
  br i1 %v7_13810, label %dec_label_pc_13818, label %.backedge3

dec_label_pc_13818:                               ; preds = %dec_label_pc_1380c
  %v1_13818 = add i32 %v2_137f0, 3
  %v2_13818 = inttoptr i32 %v1_13818 to i8*
  %v3_13818 = load i8, i8* %v2_13818, align 1
  %v4_13818 = zext i8 %v3_13818 to i32
  %v0_1381c = load i32, i32* @r4, align 4
  %v1_1381c = load i32, i32* @sl, align 4
  %v2_1381c = add i32 %v1_1381c, %v0_1381c
  %v3_1381c = inttoptr i32 %v2_1381c to i32*
  %v4_1381c = load i32, i32* %v3_1381c, align 4
  %v2_13820 = mul nuw nsw i32 %v4_13818, 2
  %v2_13824 = add i32 %v4_1381c, %v2_13820
  %v3_13824 = inttoptr i32 %v2_13824 to i16*
  %v4_13824 = load i16, i16* %v3_13824, align 2
  %v1_13828 = and i16 %v4_13824, 8
  %v2_13828 = icmp eq i16 %v1_13828, 0
  br i1 %v2_13828, label %.backedge3, label %bb

bb:                                               ; preds = %dec_label_pc_13818
  %v1_1382c = load i32, i32* @r5, align 4
  %v2_1382c = add i32 %v1_1382c, 1
  store i32 %v2_1382c, i32* @r5, align 4
  br label %.backedge3

.backedge3:                                       ; preds = %bb, %dec_label_pc_13818, %dec_label_pc_137ec, %dec_label_pc_13800, %dec_label_pc_1380c
  %v0_13830.pre = load i32, i32* @r6, align 4
  %v0_1383c.pre = load i32, i32* @r8, align 4
  br label %bb18

bb18:                                             ; preds = %.backedge3, %dec_label_pc_137d8
  %v0_1383c = phi i32 [ %v0_1383c.pre, %.backedge3 ], [ ptrtoint (i32* @global_var_16c38.436 to i32), %dec_label_pc_137d8 ]
  %v0_13830 = phi i32 [ %v0_13830.pre, %.backedge3 ], [ %v2_137cc, %dec_label_pc_137d8 ]
  %v4_13840 = inttoptr i32 %v0_13830 to i32*
  %v5_13840 = call i32 @function_14a94(i32* %v4_13840, i32 %v2_137e4, i32 258, i32 %v0_1383c)
  %v2_13844 = icmp eq i32 %v5_13840, 0
  br i1 %v2_13844, label %dec_label_pc_138b4, label %dec_label_pc_137ec

dec_label_pc_13850:                               ; preds = %dec_label_pc_137ac
  store i32 ptrtoint ([14 x i8]* @global_var_16c3c.439 to i32), i32* @r0, align 4
  %v2_13858 = call i32 @function_14df0(i32 ptrtoint ([14 x i8]* @global_var_16c3c.439 to i32))
  store i32 %v2_13858, i32* @r6, align 4
  %v2_1385c = icmp eq i32 %v2_13858, 0
  br i1 %v2_1385c, label %bb19, label %dec_label_pc_13868

bb19:                                             ; preds = %dec_label_pc_13850
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_138b4

dec_label_pc_13868:                               ; preds = %dec_label_pc_13850
  store i32 ptrtoint ([10 x i8]* @global_var_16c4c.441 to i32), i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_16c70.443 to i32), i32* @r7, align 4
  %v2_13878 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_13878, i32* @r4, align 4
  br label %bb21

dec_label_pc_13880:                               ; preds = %bb21
  %v0_138ac = load i32, i32* @r8, align 4
  %v1_138ac = inttoptr i32 %v0_138ac to i8*
  %v3_13880 = load i32, i32* %stack_var_-36, align 4
  %v1_13884 = inttoptr i32 %v3_13880 to i32*
  %v2_13884 = load i32, i32* %v1_13884, align 4
  store i32 %v2_13884, i32* @r1, align 4
  %v4_13888 = call i32 @function_160a0(i8* %v1_138ac, i32 %v2_13884)
  %v2_1388c = icmp eq i32 %v4_13888, 0
  br i1 %v2_1388c, label %bb20, label %.backedge

bb20:                                             ; preds = %dec_label_pc_13880
  %v1_13890 = load i32, i32* @r5, align 4
  %v2_13890 = add i32 %v1_13890, 1
  store i32 %v2_13890, i32* @r5, align 4
  br label %.backedge

.backedge:                                        ; preds = %bb20, %dec_label_pc_13880
  %v0_1389c.pre = load i32, i32* @r7, align 4
  %v0_138a0.pre = load i32, i32* @r6, align 4
  br label %bb21

bb21:                                             ; preds = %.backedge, %dec_label_pc_13868
  %v0_138a0 = phi i32 [ %v0_138a0.pre, %.backedge ], [ %v2_13858, %dec_label_pc_13868 ]
  %v0_1389c = phi i32 [ %v0_1389c.pre, %.backedge ], [ ptrtoint (i32* @global_var_16c70.443 to i32), %dec_label_pc_13868 ]
  %v4_138a4 = inttoptr i32 %v0_138a0 to i32*
  %v5_138a4 = call i32 @function_14a94(i32* %v4_138a4, i32 %v2_13878, i32 459266, i32 %v0_1389c)
  %v2_138a8 = icmp eq i32 %v5_138a4, 0
  br i1 %v2_138a8, label %dec_label_pc_138b4, label %dec_label_pc_13880

dec_label_pc_138b4:                               ; preds = %bb18, %bb21, %bb19
  %v0_138b4 = load i32, i32* @r6, align 4
  %v1_138b8 = inttoptr i32 %v0_138b4 to i32*
  %v2_138b8 = call i32 @function_14dbc(i32* %v1_138b8)
  %v0_138bc = load i32, i32* @r5, align 4
  %v2_138bc = icmp eq i32 %v0_138bc, 0
  %.v0_138bc = select i1 %v2_138bc, i32 1, i32 %v0_138bc
  ret i32 %.v0_138bc

; uselistorder directives
  uselistorder i32* %stack_var_-36, { 0, 3, 1, 4, 2 }
  uselistorder i32 (i32)* @function_14df0, { 1, 0 }
  uselistorder label %dec_label_pc_138b4, { 1, 2, 0 }
  uselistorder label %.backedge3, { 0, 1, 4, 3, 2 }
}

define i32 @function_138f8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_138f8:
  %r2.global-to-local = alloca i32, align 4
  %tmp = icmp ult i32 %arg1, 241
  br i1 %tmp, label %bb, label %dec_label_pc_13ce0

bb:                                               ; preds = %dec_label_pc_138f8
  %v7_1390c = mul i32 %arg1, 4
  %v8_1390c = add i32 %v7_1390c, ptrtoint (i32* @global_var_13914.446 to i32)
  call void @__pseudo_branch(i32 %v8_1390c)
  br label %dec_label_pc_13ce0

dec_label_pc_13ce0:                               ; preds = %bb, %dec_label_pc_138f8
  %v0_13ce0 = call i32 @function_11a08()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_13cec = inttoptr i32 %v0_13ce0 to i32*
  store i32 22, i32* %v2_13cec, align 4
  %v0_13e9c = load i32, i32* %r2.global-to-local, align 4
  ret i32 %v0_13e9c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_13f14() local_unnamed_addr {
dec_label_pc_13f38.lr.ph:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13f14 = load i32, i32* @r4, align 4
  store i32 %v3_13f14, i32* %stack_var_-16, align 4
  store i32 126984, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13f38

dec_label_pc_13f38:                               ; preds = %dec_label_pc_13f38.dec_label_pc_13f38_crit_edge, %dec_label_pc_13f38.lr.ph
  %v1_13f38 = phi i32 [ %v1_13f44, %dec_label_pc_13f38.dec_label_pc_13f38_crit_edge ], [ 0, %dec_label_pc_13f38.lr.ph ]
  %v0_13f38 = phi i32 [ %v0_13f38.pre, %dec_label_pc_13f38.dec_label_pc_13f38_crit_edge ], [ 126984, %dec_label_pc_13f38.lr.ph ]
  %v4_13f38 = mul i32 %v1_13f38, 4
  %v5_13f38 = add i32 %v4_13f38, %v0_13f38
  %v6_13f38 = inttoptr i32 %v5_13f38 to i32*
  %v7_13f38 = load i32, i32* %v6_13f38, align 4
  call void @__pseudo_branch(i32 %v7_13f38)
  %v0_13f44 = load i32, i32* %r4.global-to-local, align 4
  %v1_13f44 = add i32 %v0_13f44, -1
  store i32 %v1_13f44, i32* %r4.global-to-local, align 4
  %v2_13f44 = icmp eq i32 %v0_13f44, 0
  br i1 %v2_13f44, label %dec_label_pc_13f4c, label %dec_label_pc_13f38.dec_label_pc_13f38_crit_edge

dec_label_pc_13f38.dec_label_pc_13f38_crit_edge:  ; preds = %dec_label_pc_13f38
  %v0_13f38.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13f38

dec_label_pc_13f4c:                               ; preds = %dec_label_pc_13f38
  %v4_13f50 = load i32, i32* @global_var_1f2bc.459, align 4
  %v2_13f54 = icmp eq i32 %v4_13f50, 0
  br i1 %v2_13f54, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_13f4c
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_13f4c, %bb
  %v2_13f5c = xor i1 %v2_13f54, true
  call void @__pseudo_cond_branch(i1 %v2_13f5c, i32 %v4_13f50)
  %v4_13f64 = load i32, i32* @global_var_1f2c0.461, align 4
  %v2_13f68 = icmp eq i32 %v4_13f64, 0
  br i1 %v2_13f68, label %bb18, label %bb17

bb17:                                             ; preds = %bb16
  br label %bb18

bb18:                                             ; preds = %bb16, %bb17
  %v2_13f70 = xor i1 %v2_13f68, true
  call void @__pseudo_cond_branch(i1 %v2_13f70, i32 %v4_13f64)
  %v2_13f74 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13f74, i32* %r4.global-to-local, align 4
  %v1_13f78 = load i32, i32* @r0, align 4
  ret i32 %v1_13f78

; uselistorder directives
  uselistorder i32 %v1_13f44, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_13f90(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13f90:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_13fa4 = call i32 @function_11414(i32 %arg1, i32 1)
  %v3_13fac = icmp eq i32 %v2_13fa4, -1
  store i32 add (i32 ptrtoint (i32* @global_var_b058.463 to i32), i32 81848), i32* @r3, align 4
  br i1 %v3_13fac, label %dec_label_pc_13fb8, label %dec_label_pc_13fd0

dec_label_pc_13fb8:                               ; preds = %dec_label_pc_13f90
  %v0_13fbc = load i32, i32* %r5.global-to-local, align 4
  %v3_13fc4 = call i32 @function_111ec(i32 ptrtoint ([10 x i8]* @global_var_16c74.465 to i32), i32 %v0_13fbc)
  %v1_13fc8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13fcc = icmp ne i32 %v3_13fc4, %v1_13fc8
  call void @__pseudo_cond_branch(i1 %v1_13fcc, i32 ptrtoint (i32* @global_var_13324.466 to i32))
  br label %dec_label_pc_13fd0

dec_label_pc_13fd0:                               ; preds = %dec_label_pc_13f90, %dec_label_pc_13fb8
  %v1_13fd8 = phi i32 [ %v2_13fa4, %dec_label_pc_13f90 ], [ %v3_13fc4, %dec_label_pc_13fb8 ]
  ret i32 %v1_13fd8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_13fd0, { 1, 0 }
}

define i32 @function_13fe4(i32 %arg1) local_unnamed_addr {
dec_label_pc_13fe4:
  %r4.global-to-local = alloca i32, align 4
  store i32 126992, i32* %r4.global-to-local, align 4
  %v4_13ff4 = load i32, i32* inttoptr (i32 127084 to i32*), align 4
  %v1_13ff8 = inttoptr i32 %v4_13ff4 to i32*
  %v2_13ff8 = load i32, i32* %v1_13ff8, align 4
  %v2_13ffc = icmp eq i32 %v2_13ff8, 0
  br i1 %v2_13ffc, label %dec_label_pc_14004, label %dec_label_pc_14038

dec_label_pc_14004:                               ; preds = %dec_label_pc_13fe4
  %v4_14008 = load i32, i32* inttoptr (i32 127044 to i32*), align 4
  %v2_14010 = icmp eq i32 %v4_14008, 0
  store i32 4096, i32* %v1_13ff8, align 4
  br i1 %v2_14010, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_14004
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_14004, %bb
  %v2_1401c = xor i1 %v2_14010, true
  call void @__pseudo_cond_branch(i1 %v2_1401c, i32 %v4_14008)
  %v0_14024 = load i32, i32* %r4.global-to-local, align 4
  %v2_1402c = icmp eq i32 %v0_14024, 40188
  br i1 %v2_1402c, label %bb6, label %bb5

bb5:                                              ; preds = %bb4
  br label %bb6

bb6:                                              ; preds = %bb4, %bb5
  %v2_14034 = xor i1 %v2_1402c, true
  call void @__pseudo_cond_branch(i1 %v2_14034, i32 ptrtoint (i32* @global_var_15314.471 to i32))
  br label %dec_label_pc_14038

dec_label_pc_14038:                               ; preds = %dec_label_pc_13fe4, %bb6
  %v1_1403c = load i32, i32* @r0, align 4
  ret i32 %v1_1403c

; uselistorder directives
  uselistorder i1 %v2_1402c, { 1, 0 }
  uselistorder label %dec_label_pc_14038, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_14050(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_14050:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %tmp49 = call i32 @__decompiler_undefined_function_0()
  %tmp50 = call i32 @__decompiler_undefined_function_0()
  %tmp51 = call i32 @__decompiler_undefined_function_0()
  %tmp52 = call i32 @__decompiler_undefined_function_0()
  %tmp53 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* @r7, align 4
  %v1_14058 = add i32 %tmp, 4
  store i32 %v1_14058, i32* %ip.global-to-local, align 4
  %v2_1405c = load i32, i32* %arg3, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  store i32 126992, i32* @r6, align 4
  %v3_14068 = mul i32 %arg2, 4
  store i32 %v3_14068, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v4_14070 = load i32, i32* inttoptr (i32 127012 to i32*), align 4
  store i32 28, i32* %r2.global-to-local, align 4
  %v2_14078 = ptrtoint i32* %stack_var_-120 to i32
  %v4_1407c = load i32, i32* inttoptr (i32 127020 to i32*), align 4
  store i32 %v4_1407c, i32* %r4.global-to-local, align 4
  %v2_14084 = add i32 %v1_14058, %v3_14068
  store i32 %v2_14084, i32* %ip.global-to-local, align 4
  %v9_14088 = icmp eq i32 %v2_14084, %v2_1405c
  store i1 %v9_14088, i1* %cpsr_z.global-to-local, align 1
  %v2_1408c = inttoptr i32 %v4_14070 to i32*
  store i32 %arg7, i32* %v2_1408c, align 4
  store i32 688, i32* %r2.global-to-local, align 4
  %v0_14098 = load i32, i32* %r3.global-to-local, align 4
  br i1 %v9_14088, label %bb, label %.critedge

bb:                                               ; preds = %dec_label_pc_14050
  %v1_1409c = load i32, i32* @r7, align 4
  %v2_1409c = load i32, i32* %r5.global-to-local, align 4
  %v3_1409c = add i32 %v2_1409c, %v1_1409c
  store i32 %v3_1409c, i32* %r3.global-to-local, align 4
  store i32 %arg6, i32* @global_var_1f2c0.461, align 4
  %v0_140a4 = load i32, i32* %ip.global-to-local, align 4
  %v1_140a4 = load i32, i32* %r4.global-to-local, align 4
  %v2_140a4 = inttoptr i32 %v1_140a4 to i32*
  store i32 %v0_140a4, i32* %v2_140a4, align 4
  store i32 120, i32* @r2, align 4
  %v1_140b0 = load i32, i32* %r3.global-to-local, align 4
  %v2_140b0 = load i32, i32* %r4.global-to-local, align 4
  %v3_140b0 = inttoptr i32 %v2_140b0 to i32*
  store i32 %v1_140b0, i32* %v3_140b0, align 4
  br label %bb57

.critedge:                                        ; preds = %dec_label_pc_14050
  store i32 %arg6, i32* @global_var_1f2c0.461, align 4
  %v0_140a4.c = load i32, i32* %ip.global-to-local, align 4
  %v1_140a4.c = load i32, i32* %r4.global-to-local, align 4
  %v2_140a4.c = inttoptr i32 %v1_140a4.c to i32*
  store i32 %v0_140a4.c, i32* %v2_140a4.c, align 4
  store i32 120, i32* @r2, align 4
  br label %bb57

bb57:                                             ; preds = %.critedge, %bb
  %v2_140bc = bitcast i32* %stack_var_-120 to i8*
  %v3_140bc = call i32 @function_11a60(i8* %v2_140bc, i32 0)
  %v0_140c0 = load i32, i32* %r4.global-to-local, align 4
  %v1_140c0 = inttoptr i32 %v0_140c0 to i32*
  %storemerge.pre = load i32, i32* %v1_140c0, align 4
  br label %dec_label_pc_140cc

dec_label_pc_140cc:                               ; preds = %dec_label_pc_140cc, %bb57
  %storemerge = phi i32 [ %storemerge.pre, %bb57 ], [ %v4_140cc, %dec_label_pc_140cc ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v1_140cc = inttoptr i32 %storemerge to i32*
  %v2_140cc = load i32, i32* %v1_140cc, align 4
  store i32 %v2_140cc, i32* %r3.global-to-local, align 4
  %v4_140cc = add i32 %storemerge, 4
  store i32 %v4_140cc, i32* %r2.global-to-local, align 4
  %v2_140d0 = icmp eq i32 %v2_140cc, 0
  br i1 %v2_140d0, label %dec_label_pc_140dc, label %dec_label_pc_140cc

dec_label_pc_140dc:                               ; preds = %dec_label_pc_140cc
  store i32 %v4_140cc, i32* @r4, align 4
  store i32 %v2_14078, i32* @r5, align 4
  %v1_1410029 = inttoptr i32 %v4_140cc to i32*
  %v2_1410030 = load i32, i32* %v1_1410029, align 4
  store i32 %v2_1410030, i32* %r3.global-to-local, align 4
  %v2_1410432 = icmp eq i32 %v2_1410030, 0
  store i1 %v2_1410432, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1410432, label %dec_label_pc_1410c, label %dec_label_pc_140e8

dec_label_pc_140e8:                               ; preds = %dec_label_pc_140dc, %dec_label_pc_14100
  %v5_140ec = phi i32 [ %v2_14100, %dec_label_pc_14100 ], [ %v2_1410030, %dec_label_pc_140dc ]
  %v2_140e8 = icmp ugt i32 %v5_140ec, 13
  %v7_140e8 = icmp eq i32 %v5_140ec, 14
  store i1 %v7_140e8, i1* %cpsr_z.global-to-local, align 1
  %v2_140ec = xor i1 %v2_140e8, true
  %v3_140ec = or i1 %v7_140e8, %v2_140ec
  br i1 %v3_140ec, label %bb58, label %bb59

bb58:                                             ; preds = %dec_label_pc_140e8
  %v6_140ec = and i32 %v5_140ec, 536870912
  %v7_140ec = icmp ne i32 %v6_140ec, 0
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_140e8, %bb58
  %v1_140f8 = phi i1 [ %v2_140e8, %dec_label_pc_140e8 ], [ %v7_140ec, %bb58 ]
  %v2_140f0 = xor i1 %v1_140f8, true
  %v3_140f0 = or i1 %v7_140e8, %v2_140f0
  br i1 %v3_140f0, label %bb60, label %dec_label_pc_14100

bb60:                                             ; preds = %bb59
  store i32 8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14100

dec_label_pc_14100:                               ; preds = %bb59, %bb60
  call void @__pseudo_cond_branch(i1 %v3_140f0, i32 ptrtoint (i32* @global_var_11b10.476 to i32))
  %v0_140fc = load i32, i32* @r4, align 4
  %v1_140fc = add i32 %v0_140fc, 8
  store i32 %v1_140fc, i32* @r4, align 4
  %v1_14100 = inttoptr i32 %v1_140fc to i32*
  %v2_14100 = load i32, i32* %v1_14100, align 4
  store i32 %v2_14100, i32* %r3.global-to-local, align 4
  %v2_14104 = icmp eq i32 %v2_14100, 0
  store i1 %v2_14104, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14104, label %dec_label_pc_1410c, label %dec_label_pc_140e8

dec_label_pc_1410c:                               ; preds = %dec_label_pc_14100, %dec_label_pc_140dc
  %v1_14110 = call i32 @function_16514(i32 %v2_14078)
  store i32 %v1_14110, i32* @r0, align 4
  %v1_14114 = call i32 @function_13fe4(i32 %v1_14110)
  store i32 %v1_14114, i32* @r0, align 4
  store i32 92, i32* %r3.global-to-local, align 4
  store i32 %tmp53, i32* @r2, align 4
  %v0_14120 = load i32, i32* @r6, align 4
  %v2_14120 = add i32 %v0_14120, 92
  %v3_14120 = inttoptr i32 %v2_14120 to i32*
  %v4_14120 = load i32, i32* %v3_14120, align 4
  store i32 %tmp52, i32* @r3, align 4
  %v2_14128 = icmp eq i32 %tmp53, 0
  store i1 %v2_14128, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14128, label %bb61, label %bb62

bb61:                                             ; preds = %dec_label_pc_1410c
  store i32 4096, i32* @r2, align 4
  br label %bb62

bb62:                                             ; preds = %dec_label_pc_1410c, %bb61
  %v0_14134 = phi i32 [ %tmp53, %dec_label_pc_1410c ], [ 4096, %bb61 ]
  %v3_14130 = icmp eq i32 %tmp52, -1
  %v8_14130 = icmp eq i32 %tmp52, -1
  store i1 %v8_14130, i1* %cpsr_z.global-to-local, align 1
  %v2_14134 = inttoptr i32 %v4_14120 to i32*
  store i32 %v0_14134, i32* %v2_14134, align 4
  br i1 %v3_14130, label %dec_label_pc_1413c, label %dec_label_pc_14164

dec_label_pc_1413c:                               ; preds = %bb62
  %v0_1413c = call i32 @function_14454()
  store i32 %v0_1413c, i32* @r0, align 4
  store i32 %v0_1413c, i32* @r4, align 4
  %v0_14144 = call i32 @function_144b0()
  store i32 %v0_14144, i32* @r0, align 4
  %v0_14148 = load i32, i32* @r4, align 4
  %v9_14148 = icmp eq i32 %v0_14148, %v0_14144
  store i1 %v9_14148, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14148, label %dec_label_pc_14150, label %dec_label_pc_1418c

dec_label_pc_14150:                               ; preds = %dec_label_pc_1413c
  %v1_14150 = call i32 @function_1461c(i32 %v0_14144)
  store i32 %v1_14150, i32* @r0, align 4
  store i32 %v1_14150, i32* @r4, align 4
  %v0_14158 = call i32 @function_1449c()
  store i32 %v0_14158, i32* @r0, align 4
  %v0_1415c = load i32, i32* @r4, align 4
  %v9_1415c = icmp eq i32 %v0_1415c, %v0_14158
  store i1 %v9_1415c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1415c, label %dec_label_pc_14164, label %dec_label_pc_1418c

dec_label_pc_14164:                               ; preds = %dec_label_pc_14150, %bb62
  store i32 %tmp52, i32* @r2, align 4
  store i1 %v8_14130, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_14130, label %dec_label_pc_141b0, label %dec_label_pc_14170

dec_label_pc_14170:                               ; preds = %dec_label_pc_14164
  store i32 %tmp51, i32* @r3, align 4
  %v9_14174 = icmp eq i32 %tmp52, %tmp51
  store i1 %v9_14174, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14174, label %dec_label_pc_1417c, label %dec_label_pc_1418c

dec_label_pc_1417c:                               ; preds = %dec_label_pc_14170
  store i32 %tmp50, i32* @r2, align 4
  store i32 %tmp49, i32* @r3, align 4
  %v9_14184 = icmp eq i32 %tmp50, %tmp49
  store i1 %v9_14184, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14184, label %dec_label_pc_141b0, label %dec_label_pc_1418c

dec_label_pc_1418c:                               ; preds = %dec_label_pc_14170, %dec_label_pc_14150, %dec_label_pc_1413c, %dec_label_pc_1417c
  %v2_14194 = call i32 @function_13f90(i32 0, i32 32768)
  %v2_141a0 = call i32 @function_13f90(i32 1, i32 32770)
  %v2_141ac = call i32 @function_13f90(i32 2, i32 32770)
  store i32 %v2_141ac, i32* @r0, align 4
  br label %dec_label_pc_141b0

dec_label_pc_141b0:                               ; preds = %dec_label_pc_1417c, %dec_label_pc_14164, %dec_label_pc_1418c
  %v0_141b0 = load i32, i32* @r7, align 4
  %v1_141b0 = inttoptr i32 %v0_141b0 to i32*
  %v2_141b0 = load i32, i32* %v1_141b0, align 4
  store i32 %v2_141b0, i32* %r2.global-to-local, align 4
  store i32 208, i32* %r3.global-to-local, align 4
  %v1_141b8 = load i32, i32* @r6, align 4
  %v3_141b8 = add i32 %v1_141b8, 208
  %v4_141b8 = inttoptr i32 %v3_141b8 to i32*
  store i32 %v2_141b0, i32* %v4_141b8, align 4
  %v0_141bc = load i32, i32* @r7, align 4
  %v1_141bc = inttoptr i32 %v0_141bc to i32*
  %v2_141bc = load i32, i32* %v1_141bc, align 4
  store i32 %v2_141bc, i32* @r4, align 4
  %v2_141c0 = icmp eq i32 %v2_141bc, 0
  store i1 %v2_141c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_141c0, label %dec_label_pc_14264.lr.ph, label %dec_label_pc_141c8

dec_label_pc_141c8:                               ; preds = %dec_label_pc_141b0
  store i32 112, i32* %r3.global-to-local, align 4
  %v0_141cc = load i32, i32* @r6, align 4
  %v2_141cc = add i32 %v0_141cc, 112
  %v3_141cc = inttoptr i32 %v2_141cc to i32*
  %v4_141cc = load i32, i32* %v3_141cc, align 4
  store i32 %v4_141cc, i32* %r3.global-to-local, align 4
  %v2_141d0 = inttoptr i32 %v4_141cc to i32*
  store i32 %v2_141bc, i32* %v2_141d0, align 4
  %v0_141d8 = load i32, i32* @r7, align 4
  %v1_141d8 = inttoptr i32 %v0_141d8 to i32*
  %v2_141d8 = load i32, i32* %v1_141d8, align 4
  %v4_141dc = call i32 @function_16150(i32 %v2_141d8, i32 47, i32 %v2_141b0, i32 %v4_141cc)
  store i32 %v4_141dc, i32* @r0, align 4
  store i32 60, i32* %r3.global-to-local, align 4
  %v2_141e4 = icmp eq i32 %v4_141dc, 0
  store i1 %v2_141e4, i1* %cpsr_z.global-to-local, align 1
  %v0_141e8 = load i32, i32* @r6, align 4
  %v2_141e8 = add i32 %v0_141e8, 60
  %v3_141e8 = inttoptr i32 %v2_141e8 to i32*
  %v4_141e8 = load i32, i32* %v3_141e8, align 4
  store i32 %v4_141e8, i32* %r2.global-to-local, align 4
  br i1 %v2_141e4, label %.thread46, label %bb63

.thread46:                                        ; preds = %dec_label_pc_141c8
  %v2_141f047 = inttoptr i32 %v4_141e8 to i32*
  store i32 0, i32* %v2_141f047, align 4
  br label %dec_label_pc_14264.lr.ph

bb63:                                             ; preds = %dec_label_pc_141c8
  %v2_141ec = add i32 %v4_141dc, 1
  store i32 %v2_141ec, i32* %r3.global-to-local, align 4
  %v2_141f0 = inttoptr i32 %v4_141e8 to i32*
  store i32 %v4_141dc, i32* %v2_141f0, align 4
  %v1_141f4 = load i32, i32* %r3.global-to-local, align 4
  %v2_141f4 = load i32, i32* %r2.global-to-local, align 4
  %v3_141f4 = inttoptr i32 %v2_141f4 to i32*
  store i32 %v1_141f4, i32* %v3_141f4, align 4
  br label %dec_label_pc_14264.lr.ph

dec_label_pc_14264.lr.ph:                         ; preds = %.thread46, %bb63, %dec_label_pc_141b0
  store i32 0, i32* %r5.global-to-local, align 4
  %v0_1420c = load i32, i32* @r6, align 4
  %v2_1420c = add i32 %v0_1420c, -12
  store i32 %v2_1420c, i32* %r8.global-to-local, align 4
  store i32 684, i32* %r3.global-to-local, align 4
  store i32 %arg5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 %arg5, i32* @global_var_1f2bc.459, align 4
  %v2_1423c = icmp eq i32 %v0_14098, 0
  store i1 %v2_1423c, i1* %cpsr_z.global-to-local, align 1
  %v2_14244 = xor i1 %v2_1423c, true
  call void @__pseudo_cond_branch(i1 %v2_14244, i32 %v0_14098)
  store i32 -12, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r5.global-to-local, align 4
  %v0_14258 = load i32, i32* @r6, align 4
  %v2_14258 = add i32 %v0_14258, -12
  store i32 %v2_14258, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14264

dec_label_pc_14264:                               ; preds = %dec_label_pc_14264.dec_label_pc_14264_crit_edge, %dec_label_pc_14264.lr.ph
  %v1_14264 = phi i32 [ %v1_14270, %dec_label_pc_14264.dec_label_pc_14264_crit_edge ], [ 0, %dec_label_pc_14264.lr.ph ]
  %v0_14264 = phi i32 [ %v0_14264.pre, %dec_label_pc_14264.dec_label_pc_14264_crit_edge ], [ %v2_14258, %dec_label_pc_14264.lr.ph ]
  %v4_14264 = mul i32 %v1_14264, 4
  %v5_14264 = add i32 %v4_14264, %v0_14264
  %v6_14264 = inttoptr i32 %v5_14264 to i32*
  %v7_14264 = load i32, i32* %v6_14264, align 4
  store i32 %v7_14264, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v7_14264)
  %v0_14270 = load i32, i32* %r4.global-to-local, align 4
  %v1_14270 = add i32 %v0_14270, 1
  store i32 %v1_14270, i32* %r4.global-to-local, align 4
  %v1_14274 = load i32, i32* %r5.global-to-local, align 4
  %v3_14274 = icmp ult i32 %v1_14270, %v1_14274
  %v9_14274 = icmp eq i32 %v1_14270, %v1_14274
  store i1 %v9_14274, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14274, label %dec_label_pc_14264.dec_label_pc_14264_crit_edge, label %dec_label_pc_1427c

dec_label_pc_14264.dec_label_pc_14264_crit_edge:  ; preds = %dec_label_pc_14264
  %v0_14264.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_14264

dec_label_pc_1427c:                               ; preds = %dec_label_pc_14264
  %v0_14280.pre = load i32, i32* @r6, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  %v2_14280 = add i32 %v0_14280.pre, 104
  %v3_14280 = inttoptr i32 %v2_14280 to i32*
  %v4_14280 = load i32, i32* %v3_14280, align 4
  store i32 %v4_14280, i32* %r2.global-to-local, align 4
  store i32 %v4_14280, i32* %r3.global-to-local, align 4
  %v2_14288 = icmp eq i32 %v4_14280, 0
  store i1 %v2_14288, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14288, label %dec_label_pc_142a0, label %dec_label_pc_14290

dec_label_pc_14290:                               ; preds = %dec_label_pc_1427c
  call void @__pseudo_branch(i32 %v4_14280)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_1429c = load i32, i32* @r0, align 4
  %v2_1429c = inttoptr i32 %v1_1429c to i32*
  store i32 0, i32* %v2_1429c, align 4
  %v0_142a4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_142a0

dec_label_pc_142a0:                               ; preds = %dec_label_pc_1427c, %dec_label_pc_14290
  %v0_142a4 = phi i32 [ %v0_14280.pre, %dec_label_pc_1427c ], [ %v0_142a4.pre, %dec_label_pc_14290 ]
  store i32 80, i32* %r3.global-to-local, align 4
  %v2_142a4 = add i32 %v0_142a4, 80
  %v3_142a4 = inttoptr i32 %v2_142a4 to i32*
  %v4_142a4 = load i32, i32* %v3_142a4, align 4
  store i32 %v4_142a4, i32* %r2.global-to-local, align 4
  store i32 %v4_142a4, i32* %r3.global-to-local, align 4
  %v2_142ac = icmp eq i32 %v4_142a4, 0
  store i1 %v2_142ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_142ac, label %dec_label_pc_142c4, label %dec_label_pc_142b4

dec_label_pc_142b4:                               ; preds = %dec_label_pc_142a0
  call void @__pseudo_branch(i32 %v4_142a4)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_142c0 = load i32, i32* @r0, align 4
  %v2_142c0 = inttoptr i32 %v1_142c0 to i32*
  store i32 0, i32* %v2_142c0, align 4
  %v0_142c8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_142c4

dec_label_pc_142c4:                               ; preds = %dec_label_pc_142a0, %dec_label_pc_142b4
  %v0_142c8 = phi i32 [ %v0_142a4, %dec_label_pc_142a0 ], [ %v0_142c8.pre, %dec_label_pc_142b4 ]
  store i32 28, i32* %r3.global-to-local, align 4
  %v2_142c8 = add i32 %v0_142c8, 28
  %v3_142c8 = inttoptr i32 %v2_142c8 to i32*
  %v4_142c8 = load i32, i32* %v3_142c8, align 4
  store i32 %v4_142c8, i32* %r3.global-to-local, align 4
  %v1_142d0 = inttoptr i32 %v4_142c8 to i32*
  %v2_142d0 = load i32, i32* %v1_142d0, align 4
  store i32 %v2_142d0, i32* %r2.global-to-local, align 4
  %v0_142d4 = load i32, i32* %sb.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_142e0 = call i32 @function_13648(i32 %v0_142d4)
  %v0_142e4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_142e4, label %bb64, label %.thread8

bb64:                                             ; preds = %dec_label_pc_142c4
  %v2_142e4 = load i32, i32* %r4.global-to-local, align 4
  %v8_142e8 = shl i32 %v2_142e4, %v1_142e0
  %v9_142e8 = and i32 %v8_142e8, %v1_142e0
  %v2_142ec = load i32, i32* %ip.global-to-local, align 4
  %v8_142ec = shl i32 %v2_142ec, %v9_142e8
  %v9_142ec = and i32 %v8_142ec, %v9_142e8
  %v2_142f0 = trunc i32 %v9_142ec to i16
  %v4_142f0 = inttoptr i32 %v9_142ec to i16*
  store i16 %v2_142f0, i16* %v4_142f0, align 2
  store i32 0, i32* %r8.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_142c4, %bb64
  %v10_14304 = phi i32 [ %v1_142e0, %dec_label_pc_142c4 ], [ 0, %bb64 ]
  ret i32 %v10_14304

; uselistorder directives
  uselistorder i32 %v9_142ec, { 1, 0 }
  uselistorder i32 %v1_142e0, { 1, 0, 2 }
  uselistorder i32 %v0_14280.pre, { 1, 0 }
  uselistorder i32 %v1_14274, { 1, 0 }
  uselistorder i32 %v1_14270, { 3, 2, 1, 0 }
  uselistorder i32 %v4_141e8, { 1, 0, 2 }
  uselistorder i1 %v8_14130, { 1, 2, 0 }
  uselistorder i32 %v2_14100, { 1, 2, 0 }
  uselistorder i1 %v2_140e8, { 1, 0 }
  uselistorder i32 %v4_140cc, { 1, 0, 3, 2 }
  uselistorder i32 %storemerge, { 2, 1, 0 }
  uselistorder i32 %v0_14098, { 1, 0 }
  uselistorder i32 %v3_14068, { 1, 0 }
  uselistorder i32 %tmp52, { 1, 4, 0, 2, 3 }
  uselistorder i32 %tmp51, { 1, 0 }
  uselistorder i32 %tmp50, { 1, 0 }
  uselistorder i32 %tmp49, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0, 4, 6, 5, 7, 8, 9 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 15, 16, 17, 18, 7, 8, 9, 10, 11, 12, 13, 14, 19, 20, 2, 21, 22, 23, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 9, 4, 5, 6, 7, 8, 10, 11, 1, 12, 13, 14, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 3, 8, 4, 0, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 16, 1, 18 }
  uselistorder i32 (i32)* @function_13648, { 0, 6, 8, 7, 5, 4, 3, 2, 1 }
  uselistorder i32 47, { 0, 2, 3, 1 }
  uselistorder i32 (i32, i32)* @function_13f90, { 2, 1, 0 }
  uselistorder i32 536870912, { 1, 0 }
  uselistorder i32 120, { 0, 2, 1 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_142c4, { 1, 0 }
  uselistorder label %dec_label_pc_142a0, { 1, 0 }
  uselistorder label %dec_label_pc_14264.lr.ph, { 1, 0, 2 }
  uselistorder label %dec_label_pc_141b0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1418c, { 3, 0, 1, 2 }
  uselistorder label %bb62, { 1, 0 }
  uselistorder label %dec_label_pc_14100, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
  uselistorder label %dec_label_pc_140e8, { 1, 0 }
}

define i32 @function_14324(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_14324:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_14324 = load i32, i32* @r4, align 4
  store i32 %v3_14324, i32* %stack_var_-16, align 4
  %v3_14330 = urem i32 %arg3, 4096
  %v2_14334 = icmp eq i32 %v3_14330, 0
  br i1 %v2_14334, label %dec_label_pc_14350, label %dec_label_pc_1433c

dec_label_pc_1433c:                               ; preds = %dec_label_pc_14324
  %v0_1433c = call i32 @function_11a08()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_14348 = inttoptr i32 %v0_1433c to i32*
  store i32 22, i32* %v2_14348, align 4
  %v0_14380.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14380

dec_label_pc_14350:                               ; preds = %dec_label_pc_14324
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1437c, label %dec_label_pc_1436c

dec_label_pc_1436c:                               ; preds = %dec_label_pc_14350
  %v0_1436c = call i32 @function_11a08()
  %v0_14370 = load i32, i32* %r4.global-to-local, align 4
  %v1_14370 = sub i32 0, %v0_14370
  %v2_14374 = inttoptr i32 %v0_1436c to i32*
  store i32 %v1_14370, i32* %v2_14374, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1437c

dec_label_pc_1437c:                               ; preds = %dec_label_pc_14350, %dec_label_pc_1436c
  %v0_1437c = phi i32 [ %arg1, %dec_label_pc_14350 ], [ -1, %dec_label_pc_1436c ]
  store i32 %v0_1437c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14380

dec_label_pc_14380:                               ; preds = %dec_label_pc_1433c, %dec_label_pc_1437c
  %v0_14380 = phi i32 [ %v0_14380.pre, %dec_label_pc_1433c ], [ %v0_1437c, %dec_label_pc_1437c ]
  %v2_14384 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14384, i32* @r4, align 4
  ret i32 %v0_14380

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14380, { 1, 0 }
  uselistorder label %dec_label_pc_1437c, { 1, 0 }
}

define i32 @function_1438c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1438c:
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_1438c = load i32, i32* @r4, align 4
  %v6_1438c = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @ip, align 4
  %v2_14394 = icmp eq i32 %arg2, 0
  store i32 126992, i32* @r4, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  br i1 %v2_14394, label %dec_label_pc_143e8, label %dec_label_pc_143ac

dec_label_pc_143ac:                               ; preds = %dec_label_pc_1438c
  %v1_143ac = add i32 %arg2, 4
  %v2_143ac = inttoptr i32 %v1_143ac to i32*
  %v3_143ac = load i32, i32* %v2_143ac, align 4
  store i32 %v3_143ac, i32* @r3, align 4
  %v1_143b0 = and i32 %v3_143ac, 67108864
  %v2_143b0 = icmp eq i32 %v1_143b0, 0
  br i1 %v2_143b0, label %dec_label_pc_143b8, label %dec_label_pc_143e8

dec_label_pc_143b8:                               ; preds = %dec_label_pc_143ac
  store i32 20, i32* @r2, align 4
  %v2_143bc = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_143bc, i32* @r0, align 4
  %v0_143c0 = call i32 @function_11b10()
  store i32 %v2_143bc, i32* @ip, align 4
  %v0_143e8.pre = load i32, i32* @r5, align 4
  %v0_143f0.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_143e8

dec_label_pc_143e8:                               ; preds = %dec_label_pc_143ac, %dec_label_pc_1438c, %dec_label_pc_143b8
  %v0_143f0 = phi i32 [ %arg3, %dec_label_pc_143ac ], [ %arg3, %dec_label_pc_1438c ], [ %v0_143f0.pre, %dec_label_pc_143b8 ]
  %v0_143ec = phi i32 [ %arg2, %dec_label_pc_143ac ], [ 0, %dec_label_pc_1438c ], [ %v2_143bc, %dec_label_pc_143b8 ]
  %v0_143e8 = phi i32 [ %arg1, %dec_label_pc_143ac ], [ %arg1, %dec_label_pc_1438c ], [ %v0_143e8.pre, %dec_label_pc_143b8 ]
  %v4_143f8 = call i32 @function_14948(i32 %v0_143e8, i32 %v0_143ec, i32 %v0_143f0, i32 8)
  store i32 %v3_1438c, i32* @r4, align 4
  store i32 %v6_1438c, i32* @r5, align 4
  ret i32 %v4_143f8

; uselistorder directives
  uselistorder label %dec_label_pc_143e8, { 2, 0, 1 }
}

define i32 @function_1440c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1440c:
  %v0_1440c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1440c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_1440c
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1440c, %bb
  %v0_14420 = phi i32 [ %arg1, %dec_label_pc_1440c ], [ 0, %bb ]
  ret i32 %v0_14420

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_1442c() local_unnamed_addr {
dec_label_pc_1442c:
  %v4_14438 = load i32, i32* inttoptr (i32 127084 to i32*), align 4
  %v1_1443c = inttoptr i32 %v4_14438 to i32*
  %v2_1443c = load i32, i32* %v1_1443c, align 4
  %v2_14440 = icmp eq i32 %v2_1443c, 0
  br i1 %v2_14440, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_1442c
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_1442c, %bb
  %v1_14448 = phi i32 [ %v2_1443c, %dec_label_pc_1442c ], [ 4096, %bb ]
  ret i32 %v1_14448

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_14454() local_unnamed_addr {
dec_label_pc_14454:
  %v1_14464 = load i32, i32* @r0, align 4
  ret i32 %v1_14464
}

define i32 @function_14468(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14468:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14468 = load i32, i32* @r7, align 4
  store i32 %v3_14468, i32* %stack_var_-8, align 4
  %v0_14474 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_14474, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14474, -4095
  br i1 %tmp, label %dec_label_pc_14494, label %dec_label_pc_14484

dec_label_pc_14484:                               ; preds = %dec_label_pc_14468
  %v0_14484 = call i32 @function_11a08()
  %v0_14488 = load i32, i32* %r7.global-to-local, align 4
  %v1_14488 = sub i32 0, %v0_14488
  %v2_1448c = inttoptr i32 %v0_14484 to i32*
  store i32 %v1_14488, i32* %v2_1448c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_14494.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14494

dec_label_pc_14494:                               ; preds = %dec_label_pc_14468, %dec_label_pc_14484
  %v1_14498 = phi i32 [ %v0_14474, %dec_label_pc_14468 ], [ -1, %dec_label_pc_14484 ]
  %v2_14494 = phi i32 [ %v3_14468, %dec_label_pc_14468 ], [ %v2_14494.pre, %dec_label_pc_14484 ]
  store i32 %v2_14494, i32* %r7.global-to-local, align 4
  ret i32 %v1_14498

; uselistorder directives
  uselistorder i32 %v0_14474, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14494, { 1, 0 }
}

define i32 @function_1449c() local_unnamed_addr {
dec_label_pc_1449c:
  %v1_144ac = load i32, i32* @r0, align 4
  ret i32 %v1_144ac
}

define i32 @function_144b0() local_unnamed_addr {
dec_label_pc_144b0:
  %v1_144c0 = load i32, i32* @r0, align 4
  ret i32 %v1_144c0
}

define i32 @function_144c4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_144c4:
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %v6_144c4 = load i32, i32* @r5, align 4
  %v18_144c4 = load i32, i32* @sl, align 4
  store i32 141, i32* %r7.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_144f4, label %dec_label_pc_144e0

dec_label_pc_144e0:                               ; preds = %dec_label_pc_144c4
  %v0_144e0 = call i32 @function_11a08()
  %v0_144e4 = load i32, i32* @r5, align 4
  %v1_144e4 = sub i32 0, %v0_144e4
  store i32 %v1_144e4, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r5, align 4
  %v2_144ec = inttoptr i32 %v0_144e0 to i32*
  store i32 %v1_144e4, i32* %v2_144ec, align 4
  br label %dec_label_pc_14548

dec_label_pc_144f4:                               ; preds = %dec_label_pc_144c4
  br i1 false, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_144f4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  %v3_144fc = add i32 %arg2, %arg1
  store i32 %v3_144fc, i32* @sl, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_144f4, %bb
  %v1_145384 = phi i32 [ %v18_144c4, %dec_label_pc_144f4 ], [ %v3_144fc, %bb ]
  %v0_145342 = phi i32 [ 141, %dec_label_pc_144f4 ], [ %arg2, %bb ]
  br i1 false, label %dec_label_pc_14548, label %dec_label_pc_14534

dec_label_pc_14508:                               ; preds = %dec_label_pc_14534
  %v1_14508 = add i32 %v0_14508, 8
  %v2_14508 = inttoptr i32 %v1_14508 to i16*
  %v3_14508 = load i16, i16* %v2_14508, align 2
  %v4_14508 = zext i16 %v3_14508 to i32
  %v2_1450c = add i32 %v4_14508, %v0_14508
  store i32 %v2_1450c, i32* %r3.global-to-local, align 4
  %v1_14510 = add i32 %v2_1450c, -1
  %v2_14510 = inttoptr i32 %v1_14510 to i8*
  %v3_14510 = load i8, i8* %v2_14510, align 1
  %v4_14510 = zext i8 %v3_14510 to i32
  store i32 %v4_14510, i32* @r4, align 4
  %v1_14514 = call i32 @function_16040(i32 %v1_14534)
  %v0_14518 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_14518, i32* @r1, align 4
  %v1_1451c = add i32 %v1_14514, 1
  store i32 %v1_1451c, i32* @r2, align 4
  %v0_14520 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_14520, i32* @r0, align 4
  %v3_14524 = call i32 @function_11b00(i32 %v0_14520, i32 %v0_14518, i32 %v1_1451c)
  %v0_14528 = load i32, i32* %r7.global-to-local, align 4
  %v1_14528 = add i32 %v0_14528, 8
  %v2_14528 = inttoptr i32 %v1_14528 to i16*
  %v3_14528 = load i16, i16* %v2_14528, align 2
  %v4_14528 = zext i16 %v3_14528 to i32
  store i32 %v4_14528, i32* %r3.global-to-local, align 4
  %v0_1452c = load i32, i32* @r4, align 4
  %v1_1452c = trunc i32 %v0_1452c to i8
  %v3_1452c = add i32 %v0_14528, 10
  %v4_1452c = inttoptr i32 %v3_1452c to i8*
  store i8 %v1_1452c, i8* %v4_1452c, align 1
  %v0_14530 = load i32, i32* %r7.global-to-local, align 4
  %v1_14530 = load i32, i32* %r3.global-to-local, align 4
  %v2_14530 = add i32 %v1_14530, %v0_14530
  store i32 %v2_14530, i32* %r7.global-to-local, align 4
  %v1_14538.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_14534

dec_label_pc_14534:                               ; preds = %.thread, %dec_label_pc_14508
  %v1_14538 = phi i32 [ %v1_14538.pre, %dec_label_pc_14508 ], [ %v1_145384, %.thread ]
  %v0_14508 = phi i32 [ %v2_14530, %dec_label_pc_14508 ], [ %v0_145342, %.thread ]
  %v1_14534 = add i32 %v0_14508, 10
  store i32 %v1_14534, i32* %r6.global-to-local, align 4
  %v3_14538 = icmp ult i32 %v0_14508, %v1_14538
  %v1_14540 = add i32 %v0_14508, 11
  store i32 %v1_14540, i32* %r8.global-to-local, align 4
  br i1 %v3_14538, label %dec_label_pc_14508, label %dec_label_pc_14548

dec_label_pc_14548:                               ; preds = %dec_label_pc_14534, %.thread, %dec_label_pc_144e0
  %v0_14548 = load i32, i32* @r5, align 4
  store i32 %v6_144c4, i32* @r5, align 4
  store i32 %v18_144c4, i32* @sl, align 4
  ret i32 %v0_14548

; uselistorder directives
  uselistorder i32 %v1_14534, { 1, 0 }
  uselistorder i32 %v0_14508, { 2, 4, 3, 1, 0 }
  uselistorder i32 %v18_144c4, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14534, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_14558() local_unnamed_addr {
dec_label_pc_14558:
  %r7.global-to-local = alloca i32, align 4
  %v0_14560 = load i32, i32* @r1, align 4
  store i32 %v0_14560, i32* @r3, align 4
  %v0_14570 = load i32, i32* @r0, align 4
  store i32 %v0_14570, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14570, -4095
  br i1 %tmp, label %dec_label_pc_14590, label %dec_label_pc_1457c

dec_label_pc_1457c:                               ; preds = %dec_label_pc_14558
  %v0_1457c = call i32 @function_11a08()
  %v0_14580 = load i32, i32* %r7.global-to-local, align 4
  %v1_14580 = sub i32 0, %v0_14580
  store i32 %v1_14580, i32* @r3, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_14588 = inttoptr i32 %v0_1457c to i32*
  store i32 %v1_14580, i32* %v2_14588, align 4
  br label %dec_label_pc_145a0

dec_label_pc_14590:                               ; preds = %dec_label_pc_14558
  %v2_14590 = icmp eq i32 %v0_14570, 0
  br i1 %v2_14590, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_14590
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14590, %bb
  call void @__pseudo_cond_branch(i1 %v2_14590, i32 ptrtoint (i32* @global_var_147a8.495 to i32))
  br label %dec_label_pc_145a0

dec_label_pc_145a0:                               ; preds = %dec_label_pc_1457c, %.thread
  %v0_145a0 = load i32, i32* %r7.global-to-local, align 4
  ret i32 %v0_145a0

; uselistorder directives
  uselistorder i32 %v0_14570, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_145a0, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_145b0(i32 %arg1) local_unnamed_addr {
dec_label_pc_145b0:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_145b0 = load i32, i32* @r4, align 4
  store i32 %v3_145b0, i32* %stack_var_-16, align 4
  store i32 126992, i32* %r4.global-to-local, align 4
  %v4_145c0 = load i32, i32* @global_var_212d4.498, align 4
  %v2_145c4 = icmp eq i32 %v4_145c0, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_145c4, label %dec_label_pc_145d0, label %dec_label_pc_145e0

dec_label_pc_145d0:                               ; preds = %dec_label_pc_145b0
  %v1_145d4 = call i32 @function_1654c(i32 0)
  %v1_145d8 = icmp slt i32 %v1_145d4, 0
  br i1 %v1_145d8, label %dec_label_pc_14604, label %dec_label_pc_145e0thread-pre-split

dec_label_pc_145e0thread-pre-split:               ; preds = %dec_label_pc_145d0
  %v0_145e4.pr = load i32, i32* %r5.global-to-local, align 4
  %v4_145e0.pre = load i32, i32* @global_var_212d4.498, align 4
  br label %dec_label_pc_145e0

dec_label_pc_145e0:                               ; preds = %dec_label_pc_145e0thread-pre-split, %dec_label_pc_145b0
  %v0_145f0 = phi i32 [ %v4_145e0.pre, %dec_label_pc_145e0thread-pre-split ], [ %v4_145c0, %dec_label_pc_145b0 ]
  %v1_145f4 = phi i32 [ %v0_145e4.pr, %dec_label_pc_145e0thread-pre-split ], [ %arg1, %dec_label_pc_145b0 ]
  %v2_145e4 = icmp eq i32 %v1_145f4, 0
  store i32 %v0_145f0, i32* %r4.global-to-local, align 4
  br i1 %v2_145e4, label %dec_label_pc_14608, label %dec_label_pc_145f0

dec_label_pc_145f0:                               ; preds = %dec_label_pc_145e0
  %v2_145f4 = add i32 %v1_145f4, %v0_145f0
  %v1_145f8 = call i32 @function_1654c(i32 %v2_145f4)
  %v1_145fc = icmp slt i32 %v1_145f8, 0
  br i1 %v1_145fc, label %dec_label_pc_14604, label %dec_label_pc_145f0.dec_label_pc_14608_crit_edge

dec_label_pc_145f0.dec_label_pc_14608_crit_edge:  ; preds = %dec_label_pc_145f0
  %v0_14608.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14608

dec_label_pc_14604:                               ; preds = %dec_label_pc_145f0, %dec_label_pc_145d0
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14608

dec_label_pc_14608:                               ; preds = %dec_label_pc_145e0, %dec_label_pc_145f0.dec_label_pc_14608_crit_edge, %dec_label_pc_14604
  %v0_14608 = phi i32 [ %v0_14608.pre, %dec_label_pc_145f0.dec_label_pc_14608_crit_edge ], [ -1, %dec_label_pc_14604 ], [ %v0_145f0, %dec_label_pc_145e0 ]
  %v2_1460c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1460c, i32* @r4, align 4
  ret i32 %v0_14608

; uselistorder directives
  uselistorder i32 %v0_145f0, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_1654c, { 1, 0 }
  uselistorder label %dec_label_pc_14608, { 2, 1, 0 }
}

define i32 @function_1461c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1461c:
  %v1_1462c = load i32, i32* @r0, align 4
  ret i32 %v1_1462c
}

define i32 @function_14630(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14630:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_14630 = load i32, i32* @r4, align 4
  store i32 %v3_14630, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 104, i32* @r2, align 4
  %v2_14648 = inttoptr i32 %arg2 to i8*
  %v3_14648 = call i32 @function_11a60(i8* %v2_14648, i32 0)
  %v2_1464c = load i32, i32* %arg1, align 4
  store i32 %v2_1464c, i32* %r3.global-to-local, align 4
  %v3_1464c = add i32 %tmp, 4
  %v4_1464c = inttoptr i32 %v3_1464c to i32*
  %v5_1464c = load i32, i32* %v4_1464c, align 4
  store i32 %v5_1464c, i32* %r4.global-to-local, align 4
  %v0_14650 = load i32, i32* %r5.global-to-local, align 4
  %v1_14650 = inttoptr i32 %v0_14650 to i32*
  store i32 %v2_1464c, i32* %v1_14650, align 4
  %v3_14650 = add i32 %v0_14650, 4
  %v4_14650 = inttoptr i32 %v3_14650 to i32*
  %v5_14650 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14650, i32* %v4_14650, align 4
  %v0_14654 = load i32, i32* %r6.global-to-local, align 4
  %v1_14654 = add i32 %v0_14654, 12
  %v2_14654 = inttoptr i32 %v1_14654 to i32*
  %v3_14654 = load i32, i32* %v2_14654, align 4
  %v1_14658 = load i32, i32* %r5.global-to-local, align 4
  %v2_14658 = add i32 %v1_14658, 12
  %v3_14658 = inttoptr i32 %v2_14658 to i32*
  store i32 %v3_14654, i32* %v3_14658, align 4
  %v0_1465c = load i32, i32* %r6.global-to-local, align 4
  %v1_1465c = add i32 %v0_1465c, 96
  store i32 %v1_1465c, i32* %r3.global-to-local, align 4
  %v1_14660 = inttoptr i32 %v1_1465c to i32*
  %v2_14660 = load i32, i32* %v1_14660, align 4
  store i32 %v2_14660, i32* %r3.global-to-local, align 4
  %v3_14660 = add i32 %v0_1465c, 100
  %v4_14660 = inttoptr i32 %v3_14660 to i32*
  %v5_14660 = load i32, i32* %v4_14660, align 4
  store i32 %v5_14660, i32* %r4.global-to-local, align 4
  %v1_14664 = add i32 %v0_1465c, 56
  %v2_14664 = inttoptr i32 %v1_14664 to i32*
  %v3_14664 = load i32, i32* %v2_14664, align 4
  store i32 %v3_14664, i32* %r2.global-to-local, align 4
  %v1_14668 = load i32, i32* %r5.global-to-local, align 4
  %v2_14668 = add i32 %v1_14668, 96
  %v3_14668 = inttoptr i32 %v2_14668 to i32*
  store i32 %v2_14660, i32* %v3_14668, align 4
  %v0_1466c = load i32, i32* %r4.global-to-local, align 4
  %v1_1466c = load i32, i32* %r5.global-to-local, align 4
  %v2_1466c = add i32 %v1_1466c, 100
  %v3_1466c = inttoptr i32 %v2_1466c to i32*
  store i32 %v0_1466c, i32* %v3_1466c, align 4
  %v0_14670 = load i32, i32* %r6.global-to-local, align 4
  %v1_14670 = add i32 %v0_14670, 24
  store i32 %v1_14670, i32* %ip.global-to-local, align 4
  %v1_14674 = inttoptr i32 %v1_14670 to i32*
  %v2_14674 = load i32, i32* %v1_14674, align 4
  store i32 %v2_14674, i32* %ip.global-to-local, align 4
  %v3_14674 = add i32 %v0_14670, 28
  %v4_14674 = inttoptr i32 %v3_14674 to i32*
  %v5_14674 = load i32, i32* %v4_14674, align 4
  store i32 %v5_14674, i32* %lr.global-to-local, align 4
  %v0_14678 = load i32, i32* %r2.global-to-local, align 4
  %v1_14678 = load i32, i32* %r5.global-to-local, align 4
  %v2_14678 = add i32 %v1_14678, 56
  %v3_14678 = inttoptr i32 %v2_14678 to i32*
  store i32 %v0_14678, i32* %v3_14678, align 4
  %v0_1467c = load i32, i32* %r6.global-to-local, align 4
  %v1_1467c = add i32 %v0_1467c, 72
  store i32 %v1_1467c, i32* %r3.global-to-local, align 4
  %v1_14680 = add i32 %v0_1467c, 32
  store i32 %v1_14680, i32* %r7.global-to-local, align 4
  %v1_14684 = inttoptr i32 %v1_14680 to i32*
  %v2_14684 = load i32, i32* %v1_14684, align 4
  store i32 %v2_14684, i32* %r7.global-to-local, align 4
  %v3_14684 = add i32 %v0_1467c, 36
  %v4_14684 = inttoptr i32 %v3_14684 to i32*
  %v5_14684 = load i32, i32* %v4_14684, align 4
  store i32 %v5_14684, i32* %r8.global-to-local, align 4
  %v1_14688 = inttoptr i32 %v1_1467c to i32*
  %v2_14688 = load i32, i32* %v1_14688, align 4
  %v3_14688 = add i32 %v0_1467c, 76
  %v4_14688 = inttoptr i32 %v3_14688 to i32*
  %v5_14688 = load i32, i32* %v4_14688, align 4
  store i32 %v5_14688, i32* %r1.global-to-local, align 4
  %v0_1468c = load i32, i32* %r5.global-to-local, align 4
  %v1_1468c = add i32 %v0_1468c, 72
  %v1_14690 = inttoptr i32 %v1_1468c to i32*
  store i32 %v2_14688, i32* %v1_14690, align 4
  %v3_14690 = add i32 %v0_1468c, 76
  %v4_14690 = inttoptr i32 %v3_14690 to i32*
  %v5_14690 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14690, i32* %v4_14690, align 4
  %v0_14694 = load i32, i32* %r7.global-to-local, align 4
  %v1_14694 = load i32, i32* %r5.global-to-local, align 4
  %v2_14694 = add i32 %v1_14694, 32
  %v3_14694 = inttoptr i32 %v2_14694 to i32*
  store i32 %v0_14694, i32* %v3_14694, align 4
  %v0_14698 = load i32, i32* %r8.global-to-local, align 4
  %v1_14698 = load i32, i32* %r5.global-to-local, align 4
  %v2_14698 = add i32 %v1_14698, 36
  %v3_14698 = inttoptr i32 %v2_14698 to i32*
  store i32 %v0_14698, i32* %v3_14698, align 4
  %v0_1469c = load i32, i32* %r6.global-to-local, align 4
  %v1_1469c = add i32 %v0_1469c, 80
  store i32 %v1_1469c, i32* %r3.global-to-local, align 4
  %v1_146a0 = add i32 %v0_1469c, 48
  store i32 %v1_146a0, i32* %r7.global-to-local, align 4
  %v1_146a4 = inttoptr i32 %v1_146a0 to i32*
  %v2_146a4 = load i32, i32* %v1_146a4, align 4
  store i32 %v2_146a4, i32* %r7.global-to-local, align 4
  %v3_146a4 = add i32 %v0_1469c, 52
  %v4_146a4 = inttoptr i32 %v3_146a4 to i32*
  %v5_146a4 = load i32, i32* %v4_146a4, align 4
  store i32 %v5_146a4, i32* %r8.global-to-local, align 4
  %v1_146a8 = inttoptr i32 %v1_1469c to i32*
  %v2_146a8 = load i32, i32* %v1_146a8, align 4
  %v3_146a8 = add i32 %v0_1469c, 84
  %v4_146a8 = inttoptr i32 %v3_146a8 to i32*
  %v5_146a8 = load i32, i32* %v4_146a8, align 4
  store i32 %v5_146a8, i32* %r1.global-to-local, align 4
  %v1_146ac = add i32 %v0_1469c, 16
  %v2_146ac = inttoptr i32 %v1_146ac to i32*
  %v3_146ac = load i32, i32* %v2_146ac, align 4
  store i32 %v3_146ac, i32* %r2.global-to-local, align 4
  %v0_146b0 = load i32, i32* %r5.global-to-local, align 4
  %v1_146b0 = add i32 %v0_146b0, 80
  %v1_146b4 = inttoptr i32 %v1_146b0 to i32*
  store i32 %v2_146a8, i32* %v1_146b4, align 4
  %v3_146b4 = add i32 %v0_146b0, 84
  %v4_146b4 = inttoptr i32 %v3_146b4 to i32*
  %v5_146b4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_146b4, i32* %v4_146b4, align 4
  %v0_146b8 = load i32, i32* %r7.global-to-local, align 4
  %v1_146b8 = load i32, i32* %r5.global-to-local, align 4
  %v2_146b8 = add i32 %v1_146b8, 48
  %v3_146b8 = inttoptr i32 %v2_146b8 to i32*
  store i32 %v0_146b8, i32* %v3_146b8, align 4
  %v0_146bc = load i32, i32* %r8.global-to-local, align 4
  %v1_146bc = load i32, i32* %r5.global-to-local, align 4
  %v2_146bc = add i32 %v1_146bc, 52
  %v3_146bc = inttoptr i32 %v2_146bc to i32*
  store i32 %v0_146bc, i32* %v3_146bc, align 4
  %v0_146c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_146c0 = load i32, i32* %r5.global-to-local, align 4
  %v2_146c0 = add i32 %v1_146c0, 16
  %v3_146c0 = inttoptr i32 %v2_146c0 to i32*
  store i32 %v0_146c0, i32* %v3_146c0, align 4
  %v0_146c4 = load i32, i32* %r6.global-to-local, align 4
  %v1_146c4 = add i32 %v0_146c4, 88
  store i32 %v1_146c4, i32* %r3.global-to-local, align 4
  %v1_146c8 = add i32 %v0_146c4, 20
  %v2_146c8 = inttoptr i32 %v1_146c8 to i32*
  %v3_146c8 = load i32, i32* %v2_146c8, align 4
  store i32 %v3_146c8, i32* %r2.global-to-local, align 4
  %v1_146cc = inttoptr i32 %v1_146c4 to i32*
  %v2_146cc = load i32, i32* %v1_146cc, align 4
  %v3_146cc = add i32 %v0_146c4, 92
  %v4_146cc = inttoptr i32 %v3_146cc to i32*
  %v5_146cc = load i32, i32* %v4_146cc, align 4
  store i32 %v5_146cc, i32* %r1.global-to-local, align 4
  %v1_146d0 = add i32 %v0_146c4, 64
  store i32 %v1_146d0, i32* %r6.global-to-local, align 4
  %v1_146d4 = inttoptr i32 %v1_146d0 to i32*
  %v2_146d4 = load i32, i32* %v1_146d4, align 4
  store i32 %v2_146d4, i32* %r6.global-to-local, align 4
  %v3_146d4 = add i32 %v0_146c4, 68
  %v4_146d4 = inttoptr i32 %v3_146d4 to i32*
  %v5_146d4 = load i32, i32* %v4_146d4, align 4
  store i32 %v5_146d4, i32* %r7.global-to-local, align 4
  %v0_146d8 = load i32, i32* %r5.global-to-local, align 4
  %v1_146d8 = add i32 %v0_146d8, 88
  store i32 %v1_146d8, i32* %r3.global-to-local, align 4
  %v2_146dc = add i32 %v0_146d8, 20
  %v3_146dc = inttoptr i32 %v2_146dc to i32*
  store i32 %v3_146c8, i32* %v3_146dc, align 4
  %v0_146e0 = load i32, i32* %ip.global-to-local, align 4
  %v1_146e0 = load i32, i32* %r5.global-to-local, align 4
  %v2_146e0 = add i32 %v1_146e0, 24
  %v3_146e0 = inttoptr i32 %v2_146e0 to i32*
  store i32 %v0_146e0, i32* %v3_146e0, align 4
  %v0_146e4 = load i32, i32* %lr.global-to-local, align 4
  %v1_146e4 = load i32, i32* %r5.global-to-local, align 4
  %v2_146e4 = add i32 %v1_146e4, 28
  %v3_146e4 = inttoptr i32 %v2_146e4 to i32*
  store i32 %v0_146e4, i32* %v3_146e4, align 4
  %v0_146e8 = load i32, i32* %r6.global-to-local, align 4
  %v1_146e8 = load i32, i32* %r5.global-to-local, align 4
  %v2_146e8 = add i32 %v1_146e8, 64
  %v3_146e8 = inttoptr i32 %v2_146e8 to i32*
  store i32 %v0_146e8, i32* %v3_146e8, align 4
  %v0_146ec = load i32, i32* %r7.global-to-local, align 4
  %v1_146ec = load i32, i32* %r5.global-to-local, align 4
  %v2_146ec = add i32 %v1_146ec, 68
  %v3_146ec = inttoptr i32 %v2_146ec to i32*
  store i32 %v0_146ec, i32* %v3_146ec, align 4
  %v0_146f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_146f0 = inttoptr i32 %v0_146f0 to i32*
  store i32 %v2_146cc, i32* %v1_146f0, align 4
  %v3_146f0 = add i32 %v0_146f0, 4
  %v4_146f0 = inttoptr i32 %v3_146f0 to i32*
  %v5_146f0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_146f0, i32* %v4_146f0, align 4
  %v2_146f4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_146f4, i32* %r4.global-to-local, align 4
  ret i32 %v2_146cc

; uselistorder directives
  uselistorder i32 %v0_146c4, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_1469c, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 3, 8, 4, 5, 6, 7, 9 }
  uselistorder i32* %r5.global-to-local, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 100, { 1, 0, 2 }
  uselistorder i32 104, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @function_146fc(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_146fc:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_146fc = load i32, i32* @r4, align 4
  store i32 %v3_146fc, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  %v2_14714 = inttoptr i32 %arg2 to i8*
  %v3_14714 = call i32 @function_11a60(i8* %v2_14714, i32 0)
  %v2_14718 = load i32, i32* %arg1, align 4
  %v3_14718 = add i32 %tmp, 4
  %v4_14718 = inttoptr i32 %v3_14718 to i32*
  %v5_14718 = load i32, i32* %v4_14718, align 4
  store i32 %v5_14718, i32* %r4.global-to-local, align 4
  %v0_1471c = load i32, i32* %r6.global-to-local, align 4
  %v1_1471c = inttoptr i32 %v0_1471c to i32*
  store i32 %v2_14718, i32* %v1_1471c, align 4
  %v3_1471c = add i32 %v0_1471c, 4
  %v4_1471c = inttoptr i32 %v3_1471c to i32*
  %v5_1471c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_1471c, i32* %v4_1471c, align 4
  %v0_14720 = load i32, i32* %r5.global-to-local, align 4
  %v1_14720 = add i32 %v0_14720, 32
  %v1_14724 = inttoptr i32 %v1_14720 to i32*
  %v2_14724 = load i32, i32* %v1_14724, align 4
  %v3_14724 = add i32 %v0_14720, 36
  %v4_14724 = inttoptr i32 %v3_14724 to i32*
  %v5_14724 = load i32, i32* %v4_14724, align 4
  store i32 %v5_14724, i32* %r4.global-to-local, align 4
  %v1_14728 = add i32 %v0_14720, 96
  %v2_14728 = inttoptr i32 %v1_14728 to i32*
  %v3_14728 = load i32, i32* %v2_14728, align 4
  store i32 %v3_14728, i32* %r2.global-to-local, align 4
  %v1_1472c = load i32, i32* %r6.global-to-local, align 4
  %v2_1472c = add i32 %v1_1472c, 32
  %v3_1472c = inttoptr i32 %v2_1472c to i32*
  store i32 %v2_14724, i32* %v3_1472c, align 4
  %v0_14730 = load i32, i32* %r4.global-to-local, align 4
  %v1_14730 = load i32, i32* %r6.global-to-local, align 4
  %v2_14730 = add i32 %v1_14730, 36
  %v3_14730 = inttoptr i32 %v2_14730 to i32*
  store i32 %v0_14730, i32* %v3_14730, align 4
  %v0_14734 = load i32, i32* %r2.global-to-local, align 4
  %v1_14734 = load i32, i32* %r6.global-to-local, align 4
  %v2_14734 = add i32 %v1_14734, 12
  %v3_14734 = inttoptr i32 %v2_14734 to i32*
  store i32 %v0_14734, i32* %v3_14734, align 4
  %v0_14738 = load i32, i32* %r5.global-to-local, align 4
  %v1_14738 = add i32 %v0_14738, 48
  %v2_14738 = inttoptr i32 %v1_14738 to i32*
  %v3_14738 = load i32, i32* %v2_14738, align 4
  %v1_1473c = add i32 %v0_14738, 24
  store i32 %v1_1473c, i32* %ip.global-to-local, align 4
  %v1_14740 = inttoptr i32 %v1_1473c to i32*
  %v2_14740 = load i32, i32* %v1_14740, align 4
  store i32 %v2_14740, i32* %ip.global-to-local, align 4
  %v3_14740 = add i32 %v0_14738, 28
  %v4_14740 = inttoptr i32 %v3_14740 to i32*
  %v5_14740 = load i32, i32* %v4_14740, align 4
  store i32 %v5_14740, i32* %lr.global-to-local, align 4
  %v1_14744 = load i32, i32* %r6.global-to-local, align 4
  %v2_14744 = add i32 %v1_14744, 44
  %v3_14744 = inttoptr i32 %v2_14744 to i32*
  store i32 %v3_14738, i32* %v3_14744, align 4
  %v0_14748 = load i32, i32* %r5.global-to-local, align 4
  %v1_14748 = add i32 %v0_14748, 64
  %v2_14748 = inttoptr i32 %v1_14748 to i32*
  %v3_14748 = load i32, i32* %v2_14748, align 4
  %v1_1474c = add i32 %v0_14748, 56
  %v2_1474c = inttoptr i32 %v1_1474c to i32*
  %v3_1474c = load i32, i32* %v2_1474c, align 4
  store i32 %v3_1474c, i32* %r2.global-to-local, align 4
  %v1_14750 = load i32, i32* %r6.global-to-local, align 4
  %v2_14750 = add i32 %v1_14750, 52
  %v3_14750 = inttoptr i32 %v2_14750 to i32*
  store i32 %v3_14748, i32* %v3_14750, align 4
  %v0_14754 = load i32, i32* %r2.global-to-local, align 4
  %v1_14754 = load i32, i32* %r6.global-to-local, align 4
  %v2_14754 = add i32 %v1_14754, 48
  %v3_14754 = inttoptr i32 %v2_14754 to i32*
  store i32 %v0_14754, i32* %v3_14754, align 4
  %v0_14758 = load i32, i32* %r5.global-to-local, align 4
  %v1_14758 = add i32 %v0_14758, 72
  %v1_1475c = inttoptr i32 %v1_14758 to i32*
  %v2_1475c = load i32, i32* %v1_1475c, align 4
  %v3_1475c = add i32 %v0_14758, 76
  %v4_1475c = inttoptr i32 %v3_1475c to i32*
  %v5_1475c = load i32, i32* %v4_1475c, align 4
  store i32 %v5_1475c, i32* %r1.global-to-local, align 4
  %v0_14760 = load i32, i32* %r6.global-to-local, align 4
  %v1_14760 = add i32 %v0_14760, 56
  %v1_14764 = inttoptr i32 %v1_14760 to i32*
  store i32 %v2_1475c, i32* %v1_14764, align 4
  %v3_14764 = add i32 %v0_14760, 60
  %v4_14764 = inttoptr i32 %v3_14764 to i32*
  %v5_14764 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14764, i32* %v4_14764, align 4
  %v0_14768 = load i32, i32* %r5.global-to-local, align 4
  %v1_14768 = add i32 %v0_14768, 80
  %v1_1476c = inttoptr i32 %v1_14768 to i32*
  %v2_1476c = load i32, i32* %v1_1476c, align 4
  %v3_1476c = add i32 %v0_14768, 84
  %v4_1476c = inttoptr i32 %v3_1476c to i32*
  %v5_1476c = load i32, i32* %v4_1476c, align 4
  store i32 %v5_1476c, i32* %r1.global-to-local, align 4
  %v0_14770 = load i32, i32* %r6.global-to-local, align 4
  %v1_14770 = add i32 %v0_14770, 64
  %v1_14774 = inttoptr i32 %v1_14770 to i32*
  store i32 %v2_1476c, i32* %v1_14774, align 4
  %v3_14774 = add i32 %v0_14770, 68
  %v4_14774 = inttoptr i32 %v3_14774 to i32*
  %v5_14774 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14774, i32* %v4_14774, align 4
  %v0_14778 = load i32, i32* %r5.global-to-local, align 4
  %v1_14778 = add i32 %v0_14778, 16
  %v2_14778 = inttoptr i32 %v1_14778 to i32*
  %v3_14778 = load i32, i32* %v2_14778, align 4
  %v1_1477c = load i32, i32* %r6.global-to-local, align 4
  %v2_1477c = add i32 %v1_1477c, 16
  %v3_1477c = inttoptr i32 %v2_1477c to i32*
  store i32 %v3_14778, i32* %v3_1477c, align 4
  %v0_14780 = load i32, i32* %r5.global-to-local, align 4
  %v1_14780 = add i32 %v0_14780, 88
  %v1_14784 = add i32 %v0_14780, 20
  %v2_14784 = inttoptr i32 %v1_14784 to i32*
  %v3_14784 = load i32, i32* %v2_14784, align 4
  store i32 %v3_14784, i32* %r2.global-to-local, align 4
  %v1_14788 = inttoptr i32 %v1_14780 to i32*
  %v2_14788 = load i32, i32* %v1_14788, align 4
  %v3_14788 = add i32 %v0_14780, 92
  %v4_14788 = inttoptr i32 %v3_14788 to i32*
  %v5_14788 = load i32, i32* %v4_14788, align 4
  store i32 %v5_14788, i32* %r1.global-to-local, align 4
  %v0_1478c = load i32, i32* %r6.global-to-local, align 4
  %v1_1478c = add i32 %v0_1478c, 72
  %v1_14790 = inttoptr i32 %v1_1478c to i32*
  store i32 %v2_14788, i32* %v1_14790, align 4
  %v3_14790 = add i32 %v0_1478c, 76
  %v4_14790 = inttoptr i32 %v3_14790 to i32*
  %v5_14790 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14790, i32* %v4_14790, align 4
  %v0_14794 = load i32, i32* %r2.global-to-local, align 4
  %v1_14794 = load i32, i32* %r6.global-to-local, align 4
  %v2_14794 = add i32 %v1_14794, 20
  %v3_14794 = inttoptr i32 %v2_14794 to i32*
  store i32 %v0_14794, i32* %v3_14794, align 4
  %v0_14798 = load i32, i32* %ip.global-to-local, align 4
  %v1_14798 = load i32, i32* %r6.global-to-local, align 4
  %v2_14798 = add i32 %v1_14798, 24
  %v3_14798 = inttoptr i32 %v2_14798 to i32*
  store i32 %v0_14798, i32* %v3_14798, align 4
  %v0_1479c = load i32, i32* %lr.global-to-local, align 4
  %v1_1479c = load i32, i32* %r6.global-to-local, align 4
  %v2_1479c = add i32 %v1_1479c, 28
  %v3_1479c = inttoptr i32 %v2_1479c to i32*
  store i32 %v0_1479c, i32* %v3_1479c, align 4
  %v2_147a0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_147a0, i32* %r4.global-to-local, align 4
  ret i32 %v2_14788

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 84, { 1, 2, 0, 3, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @function_147a8(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_147a8:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  %v2_147c4 = inttoptr i32 %arg2 to i8*
  %v3_147c4 = call i32 @function_11a60(i8* %v2_147c4, i32 0)
  %v1_147c8 = add i32 %tmp, 4
  %v2_147c8 = inttoptr i32 %v1_147c8 to i32*
  %v3_147c8 = load i32, i32* %v2_147c8, align 4
  %v2_147cc = load i32, i32* %arg1, align 4
  store i32 %v2_147cc, i32* %r8.global-to-local, align 4
  %v1_147d0 = load i32, i32* %r5.global-to-local, align 4
  %v2_147d0 = add i32 %v1_147d0, 12
  %v3_147d0 = inttoptr i32 %v2_147d0 to i32*
  store i32 %v3_147c8, i32* %v3_147d0, align 4
  %v0_147d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_147d4 = add i32 %v0_147d4, 20
  %v2_147d4 = inttoptr i32 %v1_147d4 to i32*
  %v3_147d4 = load i32, i32* %v2_147d4, align 4
  %v1_147d8 = add i32 %v0_147d4, 16
  %v2_147d8 = inttoptr i32 %v1_147d8 to i32*
  %v3_147d8 = load i32, i32* %v2_147d8, align 4
  store i32 %v3_147d8, i32* %r6.global-to-local, align 4
  %v1_147dc = load i32, i32* %r5.global-to-local, align 4
  %v2_147dc = add i32 %v1_147dc, 44
  %v3_147dc = inttoptr i32 %v2_147dc to i32*
  store i32 %v3_147d4, i32* %v3_147dc, align 4
  %v0_147e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_147e0 = add i32 %v0_147e0, 24
  %v2_147e0 = inttoptr i32 %v1_147e0 to i32*
  %v3_147e0 = load i32, i32* %v2_147e0, align 4
  %v1_147e4 = load i32, i32* %r5.global-to-local, align 4
  %v2_147e4 = add i32 %v1_147e4, 48
  %v3_147e4 = inttoptr i32 %v2_147e4 to i32*
  store i32 %v3_147e0, i32* %v3_147e4, align 4
  %v0_147e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_147e8 = add i32 %v0_147e8, 28
  %v2_147e8 = inttoptr i32 %v1_147e8 to i32*
  %v3_147e8 = load i32, i32* %v2_147e8, align 4
  %v1_147ec = load i32, i32* %r5.global-to-local, align 4
  %v2_147ec = add i32 %v1_147ec, 52
  %v3_147ec = inttoptr i32 %v2_147ec to i32*
  store i32 %v3_147e8, i32* %v3_147ec, align 4
  %v0_147f0 = load i32, i32* %r4.global-to-local, align 4
  %v1_147f0 = add i32 %v0_147f0, 32
  %v1_147f4 = inttoptr i32 %v1_147f0 to i32*
  %v2_147f4 = load i32, i32* %v1_147f4, align 4
  %v3_147f4 = add i32 %v0_147f0, 36
  %v4_147f4 = inttoptr i32 %v3_147f4 to i32*
  %v5_147f4 = load i32, i32* %v4_147f4, align 4
  store i32 %v5_147f4, i32* %r1.global-to-local, align 4
  %v0_147f8 = load i32, i32* %r5.global-to-local, align 4
  %v1_147f8 = add i32 %v0_147f8, 56
  %v1_147fc = inttoptr i32 %v1_147f8 to i32*
  store i32 %v2_147f4, i32* %v1_147fc, align 4
  %v3_147fc = add i32 %v0_147f8, 60
  %v4_147fc = inttoptr i32 %v3_147fc to i32*
  %v5_147fc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_147fc, i32* %v4_147fc, align 4
  %v0_14800 = load i32, i32* %r4.global-to-local, align 4
  %v1_14800 = add i32 %v0_14800, 40
  %v1_14804 = inttoptr i32 %v1_14800 to i32*
  %v2_14804 = load i32, i32* %v1_14804, align 4
  %v3_14804 = add i32 %v0_14800, 44
  %v4_14804 = inttoptr i32 %v3_14804 to i32*
  %v5_14804 = load i32, i32* %v4_14804, align 4
  store i32 %v5_14804, i32* %r1.global-to-local, align 4
  %v0_14808 = load i32, i32* %r5.global-to-local, align 4
  %v1_14808 = add i32 %v0_14808, 64
  %v1_1480c = inttoptr i32 %v1_14808 to i32*
  store i32 %v2_14804, i32* %v1_1480c, align 4
  %v3_1480c = add i32 %v0_14808, 68
  %v4_1480c = inttoptr i32 %v3_1480c to i32*
  %v5_1480c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_1480c, i32* %v4_1480c, align 4
  %v0_14810 = load i32, i32* %r4.global-to-local, align 4
  %v1_14810 = add i32 %v0_14810, 48
  %v1_14814 = inttoptr i32 %v1_14810 to i32*
  %v2_14814 = load i32, i32* %v1_14814, align 4
  %v3_14814 = add i32 %v0_14810, 52
  %v4_14814 = inttoptr i32 %v3_14814 to i32*
  %v5_14814 = load i32, i32* %v4_14814, align 4
  store i32 %v5_14814, i32* %r1.global-to-local, align 4
  %v1_14818 = add i32 %v0_14810, 8
  %v2_14818 = inttoptr i32 %v1_14818 to i16*
  %v3_14818 = load i16, i16* %v2_14818, align 2
  %v4_14818 = zext i16 %v3_14818 to i32
  store i32 %v4_14818, i32* %r2.global-to-local, align 4
  %v1_1481c = add i32 %v0_14810, 10
  %v2_1481c = inttoptr i32 %v1_1481c to i16*
  %v3_1481c = load i16, i16* %v2_1481c, align 2
  %v4_1481c = zext i16 %v3_1481c to i32
  store i32 %v4_1481c, i32* %ip.global-to-local, align 4
  %v1_14820 = add i32 %v0_14810, 12
  %v2_14820 = inttoptr i32 %v1_14820 to i16*
  %v3_14820 = load i16, i16* %v2_14820, align 2
  %v4_14820 = zext i16 %v3_14820 to i32
  store i32 %v4_14820, i32* %lr.global-to-local, align 4
  %v1_14824 = add i32 %v0_14810, 14
  %v2_14824 = inttoptr i32 %v1_14824 to i16*
  %v3_14824 = load i16, i16* %v2_14824, align 2
  %v4_14824 = zext i16 %v3_14824 to i32
  store i32 %v4_14824, i32* %r4.global-to-local, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v0_14830 = load i32, i32* %r5.global-to-local, align 4
  %v1_14830 = add i32 %v0_14830, 72
  %v1_14834 = inttoptr i32 %v1_14830 to i32*
  store i32 %v2_14814, i32* %v1_14834, align 4
  %v3_14834 = add i32 %v0_14830, 76
  %v4_14834 = inttoptr i32 %v3_14834 to i32*
  %v5_14834 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14834, i32* %v4_14834, align 4
  %v0_14838 = load i32, i32* %r5.global-to-local, align 4
  %v1_14838 = inttoptr i32 %v0_14838 to i32*
  %v2_14838 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v2_14838, i32* %v1_14838, align 4
  %v3_14838 = add i32 %v0_14838, 4
  %v4_14838 = inttoptr i32 %v3_14838 to i32*
  %v5_14838 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v5_14838, i32* %v4_14838, align 4
  %v0_1483c = load i32, i32* %r6.global-to-local, align 4
  %v1_1483c = load i32, i32* %r5.global-to-local, align 4
  %v2_1483c = add i32 %v1_1483c, 32
  %v3_1483c = inttoptr i32 %v2_1483c to i32*
  store i32 %v0_1483c, i32* %v3_1483c, align 4
  %v0_14840 = load i32, i32* %r7.global-to-local, align 4
  %v1_14840 = load i32, i32* %r5.global-to-local, align 4
  %v2_14840 = add i32 %v1_14840, 36
  %v3_14840 = inttoptr i32 %v2_14840 to i32*
  store i32 %v0_14840, i32* %v3_14840, align 4
  %v0_14844 = load i32, i32* %r2.global-to-local, align 4
  %v1_14844 = load i32, i32* %r5.global-to-local, align 4
  %v2_14844 = add i32 %v1_14844, 16
  %v3_14844 = inttoptr i32 %v2_14844 to i32*
  store i32 %v0_14844, i32* %v3_14844, align 4
  %v0_14848 = load i32, i32* %ip.global-to-local, align 4
  %v1_14848 = load i32, i32* %r5.global-to-local, align 4
  %v2_14848 = add i32 %v1_14848, 20
  %v3_14848 = inttoptr i32 %v2_14848 to i32*
  store i32 %v0_14848, i32* %v3_14848, align 4
  %v0_1484c = load i32, i32* %lr.global-to-local, align 4
  %v1_1484c = load i32, i32* %r5.global-to-local, align 4
  %v2_1484c = add i32 %v1_1484c, 24
  %v3_1484c = inttoptr i32 %v2_1484c to i32*
  store i32 %v0_1484c, i32* %v3_1484c, align 4
  %v0_14850 = load i32, i32* %r4.global-to-local, align 4
  %v1_14850 = load i32, i32* %r5.global-to-local, align 4
  %v2_14850 = add i32 %v1_14850, 28
  %v3_14850 = inttoptr i32 %v2_14850 to i32*
  store i32 %v0_14850, i32* %v3_14850, align 4
  ret i32 %v2_14814

; uselistorder directives
  uselistorder i32 %v0_14810, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 76, { 1, 2, 3, 4, 0 }
  uselistorder i32 68, { 0, 1, 7, 2, 3, 4, 5, 6 }
  uselistorder i32 60, { 3, 4, 1, 5, 6, 0, 2, 7 }
  uselistorder i32 88, { 4, 0, 1, 2, 3 }
}

define i32 @function_14860() local_unnamed_addr {
dec_label_pc_14860:
  %stack_var_-16 = alloca i32, align 4
  %v2_14864 = ptrtoint i32* %stack_var_-16 to i32
  %v2_14870 = call i32 @function_16598(i32 7, i32 %v2_14864)
  %v1_14874 = icmp slt i32 %v2_14870, 0
  %v5_14878 = load i32, i32* %stack_var_-16, align 4
  %storemerge = select i1 %v1_14874, i32 256, i32 %v5_14878
  ret i32 %storemerge
}

define i32 @function_1488c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1488c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1488c = load i32, i32* @r7, align 4
  store i32 %v3_1488c, i32* %stack_var_-8, align 4
  %v0_14898 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_14898, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14898, -4095
  br i1 %tmp, label %dec_label_pc_148b8, label %dec_label_pc_148a8

dec_label_pc_148a8:                               ; preds = %dec_label_pc_1488c
  %v0_148a8 = call i32 @function_11a08()
  %v0_148ac = load i32, i32* %r7.global-to-local, align 4
  %v1_148ac = sub i32 0, %v0_148ac
  %v2_148b0 = inttoptr i32 %v0_148a8 to i32*
  store i32 %v1_148ac, i32* %v2_148b0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_148b8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_148b8

dec_label_pc_148b8:                               ; preds = %dec_label_pc_1488c, %dec_label_pc_148a8
  %v1_148bc = phi i32 [ %v0_14898, %dec_label_pc_1488c ], [ -1, %dec_label_pc_148a8 ]
  %v2_148b8 = phi i32 [ %v3_1488c, %dec_label_pc_1488c ], [ %v2_148b8.pre, %dec_label_pc_148a8 ]
  store i32 %v2_148b8, i32* @r7, align 4
  ret i32 %v1_148bc

; uselistorder directives
  uselistorder i32 %v0_14898, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_148b8, { 1, 0 }
}

define i32 @function_148c0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_148c0:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_148c0 = load i32, i32* @r7, align 4
  store i32 %v3_148c0, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_148e8, label %dec_label_pc_148d8

dec_label_pc_148d8:                               ; preds = %dec_label_pc_148c0
  %v0_148d8 = call i32 @function_11a08()
  %v0_148dc = load i32, i32* %r7.global-to-local, align 4
  %v1_148dc = sub i32 0, %v0_148dc
  %v2_148e0 = inttoptr i32 %v0_148d8 to i32*
  store i32 %v1_148dc, i32* %v2_148e0, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_148ec.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_148e8

dec_label_pc_148e8:                               ; preds = %dec_label_pc_148c0, %dec_label_pc_148d8
  %v2_148ec = phi i32 [ %v3_148c0, %dec_label_pc_148c0 ], [ %v2_148ec.pre, %dec_label_pc_148d8 ]
  %v0_148e8 = phi i32 [ %arg1, %dec_label_pc_148c0 ], [ -1, %dec_label_pc_148d8 ]
  store i32 %v2_148ec, i32* @r7, align 4
  ret i32 %v0_148e8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_148e8, { 1, 0 }
}

define i32 @function_148f4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_148f4:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_14928, label %dec_label_pc_14918

dec_label_pc_14918:                               ; preds = %dec_label_pc_148f4
  %v0_14918 = call i32 @function_11a08()
  %v0_1491c = load i32, i32* %r4.global-to-local, align 4
  %v1_1491c = sub i32 0, %v0_1491c
  %v2_14920 = inttoptr i32 %v0_14918 to i32*
  store i32 %v1_1491c, i32* %v2_14920, align 4
  br label %dec_label_pc_14928

dec_label_pc_14928:                               ; preds = %dec_label_pc_148f4, %dec_label_pc_14918
  %v1_14930 = phi i32 [ %arg1, %dec_label_pc_148f4 ], [ -1, %dec_label_pc_14918 ]
  ret i32 %v1_14930

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14928, { 1, 0 }
}

define i32 @function_14934(i32 %arg1) local_unnamed_addr {
dec_label_pc_14934:
  %v1_14944 = load i32, i32* @r0, align 4
  ret i32 %v1_14944
}

define i32 @function_14948(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14948:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14948 = load i32, i32* @r7, align 4
  store i32 %v3_14948, i32* %stack_var_-8, align 4
  %v0_14954 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_14954, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14954, -4095
  br i1 %tmp, label %dec_label_pc_14974, label %dec_label_pc_14964

dec_label_pc_14964:                               ; preds = %dec_label_pc_14948
  %v0_14964 = call i32 @function_11a08()
  %v0_14968 = load i32, i32* %r7.global-to-local, align 4
  %v1_14968 = sub i32 0, %v0_14968
  %v2_1496c = inttoptr i32 %v0_14964 to i32*
  store i32 %v1_14968, i32* %v2_1496c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_14974.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14974

dec_label_pc_14974:                               ; preds = %dec_label_pc_14948, %dec_label_pc_14964
  %v1_14978 = phi i32 [ %v0_14954, %dec_label_pc_14948 ], [ -1, %dec_label_pc_14964 ]
  %v2_14974 = phi i32 [ %v3_14948, %dec_label_pc_14948 ], [ %v2_14974.pre, %dec_label_pc_14964 ]
  store i32 %v2_14974, i32* @r7, align 4
  ret i32 %v1_14978

; uselistorder directives
  uselistorder i32 %v0_14954, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14974, { 1, 0 }
}

define i32 @function_1497c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1497c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14980.outer

dec_label_pc_14980.outer:                         ; preds = %dec_label_pc_14998, %dec_label_pc_1497c
  %v0_14980.ph = phi i32 [ %v0_14980.pre.pre, %dec_label_pc_14998 ], [ %arg1, %dec_label_pc_1497c ]
  %tmp = icmp ult i32 %v0_14980.ph, -4095
  br label %dec_label_pc_14980

dec_label_pc_14980:                               ; preds = %dec_label_pc_14980.outer, %dec_label_pc_14980
  br i1 %tmp, label %dec_label_pc_14980, label %dec_label_pc_14998

dec_label_pc_14998:                               ; preds = %dec_label_pc_14980
  %v0_14998 = call i32 @function_11a08()
  %v1_1499c = sub i32 0, %v0_14980.ph
  %v2_149a0 = inttoptr i32 %v0_14998 to i32*
  store i32 %v1_1499c, i32* %v2_149a0, align 4
  %v0_14980.pre.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14980.outer

; uselistorder directives
  uselistorder i32 %v0_14980.ph, { 1, 0 }
  uselistorder label %dec_label_pc_14980, { 1, 0 }
}

define i32 @function_149a8(i32* %arg1) local_unnamed_addr {
dec_label_pc_149a8:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 126992, i32* @r6, align 4
  %v1_149bc = add i32 %tmp, 24
  store i32 %v1_149bc, i32* @r4, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_149d4 = load i32, i32* inttoptr (i32 127064 to i32*), align 8
  store i32 %v4_149d4, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_149d4)
  %v0_149e8 = load i32, i32* @r6, align 4
  %v2_149e8 = add i32 %v0_149e8, 16
  %v3_149e8 = inttoptr i32 %v2_149e8 to i32*
  %v4_149e8 = load i32, i32* %v3_149e8, align 4
  store i32 %v4_149e8, i32* %ip.global-to-local, align 4
  store i32 84468, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_149e8)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_149f8

dec_label_pc_149f8:                               ; preds = %dec_label_pc_14a28, %dec_label_pc_149a8
  %v0_149f8 = load i32, i32* @r5, align 4
  %v1_149f8 = add i32 %v0_149f8, 4
  %v2_149f8 = inttoptr i32 %v1_149f8 to i32*
  %v3_149f8 = load i32, i32* %v2_149f8, align 4
  %v4_149f8 = add i32 %v0_149f8, 8
  %v5_149f8 = inttoptr i32 %v4_149f8 to i32*
  %v6_149f8 = load i32, i32* %v5_149f8, align 4
  %tmp10 = icmp ugt i32 %v6_149f8, %v3_149f8
  br i1 %tmp10, label %dec_label_pc_14a28, label %dec_label_pc_14a04

dec_label_pc_14a04:                               ; preds = %dec_label_pc_149f8
  %v1_14a04 = inttoptr i32 %v0_149f8 to i32*
  %v2_14a04 = load i32, i32* %v1_14a04, align 4
  %v1_14a08 = add i32 %v0_149f8, 12
  %v2_14a08 = inttoptr i32 %v1_14a08 to i32*
  %v3_14a08 = load i32, i32* %v2_14a08, align 4
  %v1_14a0c = add i32 %v0_149f8, 20
  %v2_14a0c = inttoptr i32 %v1_14a0c to i32*
  %v3_14a0c = load i32, i32* %v2_14a0c, align 4
  %v4_14a10 = inttoptr i32 %v3_14a08 to i32*
  %v5_14a10 = call i32 @function_165cc(i32 %v2_14a04, i32* %v4_14a10, i32 %v3_14a0c, i32 %v6_149f8)
  %tmp9 = icmp slt i32 %v5_14a10, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_14a20

.thread:                                          ; preds = %dec_label_pc_14a04
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_14a58

dec_label_pc_14a20:                               ; preds = %dec_label_pc_14a04
  %v1_14a20 = load i32, i32* @r5, align 4
  %v2_14a20 = add i32 %v1_14a20, 8
  %v3_14a20 = inttoptr i32 %v2_14a20 to i32*
  store i32 %v5_14a10, i32* %v3_14a20, align 4
  %v0_14a24 = load i32, i32* @r7, align 4
  %v1_14a24 = load i32, i32* @r5, align 4
  %v2_14a24 = add i32 %v1_14a24, 4
  %v3_14a24 = inttoptr i32 %v2_14a24 to i32*
  store i32 %v0_14a24, i32* %v3_14a24, align 4
  %v0_14a28.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14a28

dec_label_pc_14a28:                               ; preds = %dec_label_pc_149f8, %dec_label_pc_14a20
  %v1_14a4c = phi i32 [ %v0_149f8, %dec_label_pc_149f8 ], [ %v0_14a28.pre, %dec_label_pc_14a20 ]
  %v1_14a28 = add i32 %v1_14a4c, 4
  %v2_14a28 = inttoptr i32 %v1_14a28 to i32*
  %v3_14a28 = load i32, i32* %v2_14a28, align 4
  %v1_14a2c = add i32 %v1_14a4c, 12
  %v2_14a2c = inttoptr i32 %v1_14a2c to i32*
  %v3_14a2c = load i32, i32* %v2_14a2c, align 4
  %v2_14a30 = add i32 %v3_14a2c, %v3_14a28
  store i32 %v2_14a30, i32* @r4, align 4
  %v3_14a34 = inttoptr i32 %v2_14a30 to i32*
  %v4_14a34 = load i32, i32* %v3_14a34, align 4
  %v1_14a38 = add i32 %v2_14a30, 4
  %v2_14a38 = inttoptr i32 %v1_14a38 to i32*
  %v3_14a38 = load i32, i32* %v2_14a38, align 4
  %v1_14a3c = add i32 %v2_14a30, 16
  %v2_14a3c = inttoptr i32 %v1_14a3c to i16*
  %v3_14a3c = load i16, i16* %v2_14a3c, align 2
  %v4_14a3c = zext i16 %v3_14a3c to i32
  %v1_14a40 = add i32 %v2_14a30, 8
  %v2_14a40 = inttoptr i32 %v1_14a40 to i32*
  %v3_14a40 = load i32, i32* %v2_14a40, align 4
  store i32 %v3_14a40, i32* %ip.global-to-local, align 4
  %v2_14a44 = add i32 %v4_14a3c, %v3_14a28
  %v2_14a48 = or i32 %v3_14a38, %v4_14a34
  %v4_14a48 = icmp eq i32 %v2_14a48, 0
  store i32 %v2_14a44, i32* %v2_14a28, align 4
  %v0_14a50 = load i32, i32* %ip.global-to-local, align 4
  %v1_14a50 = load i32, i32* @r5, align 4
  %v2_14a50 = add i32 %v1_14a50, 16
  %v3_14a50 = inttoptr i32 %v2_14a50 to i32*
  store i32 %v0_14a50, i32* %v3_14a50, align 4
  br i1 %v4_14a48, label %dec_label_pc_149f8, label %dec_label_pc_14a58

dec_label_pc_14a58:                               ; preds = %dec_label_pc_14a28, %.thread
  %v0_14a64 = load i32, i32* @r6, align 4
  %v2_14a64 = add i32 %v0_14a64, 24
  %v3_14a64 = inttoptr i32 %v2_14a64 to i32*
  %v4_14a64 = load i32, i32* %v3_14a64, align 4
  store i32 %v4_14a64, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14a64)
  %v0_14a70 = load i32, i32* @r4, align 4
  ret i32 %v0_14a70

; uselistorder directives
  uselistorder i32 %v2_14a30, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_14a4c, { 1, 0 }
  uselistorder i32 %v6_149f8, { 1, 0 }
  uselistorder i32 %v0_149f8, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_14a28, { 1, 0 }
}

define i32 @function_14a84(i32 %arg1) local_unnamed_addr {
dec_label_pc_14a84:
  %v0_14a84 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14a84, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_14a84
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_14a84, %bb
  %v10_14a90 = phi i32 [ %arg1, %dec_label_pc_14a84 ], [ 0, %bb ]
  ret i32 %v10_14a90

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_14a94(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14a94:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_14a94 = load i32, i32* @r4, align 4
  %v6_14a94 = load i32, i32* @r5, align 4
  %v9_14a94 = load i32, i32* @r6, align 4
  %v12_14a94 = load i32, i32* @r7, align 4
  %v15_14a94 = load i32, i32* @r8, align 4
  %v18_14a94 = load i32, i32* @sb, align 4
  %v21_14a94 = load i32, i32* @sl, align 4
  %v24_14a94 = load i32, i32* @fp, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_14a98 = icmp eq i32* %arg1, null
  store i1 %v2_14a98, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg4, i32* @r7, align 4
  br i1 %v2_14a98, label %dec_label_pc_14da8, label %dec_label_pc_14ab0

dec_label_pc_14ab0:                               ; preds = %dec_label_pc_14a94
  %v1_14ab0 = urem i32 %arg3, 256
  store i32 %v1_14ab0, i32* @sb, align 4
  %v1_14ab4 = udiv i32 %arg3, 256
  %v3_14ab8 = urem i32 %v1_14ab4, 256
  %v3_14abc = mul nuw nsw i32 %v1_14ab0, 4
  %v1_14ac4 = or i32 %v3_14abc, 1
  %v1_14ad0 = and i32 %arg3, 131072
  %v1_14ad4 = add nsw i32 %v1_14ab0, -1
  %v1_14ae0 = and i32 %arg3, 262144
  store i32 %v1_14ae0, i32* %r2.global-to-local, align 4
  %v1_14ae4 = and i32 %arg3, 65536
  store i32 %v1_14ae4, i32* %r3.global-to-local, align 4
  store i32 %v1_14ae4, i32* %stack_var_-72, align 4
  store i32 0, i32* @fp, align 4
  %v1_14af4 = add i32 %arg4, 1
  store i32 %v1_14af4, i32* @sl, align 4
  %v2_14c74 = inttoptr i32 %arg2 to i32*
  %v2_14c84 = icmp eq i32 %v1_14ad0, 0
  %v2_14cdc = icmp eq i32 %v1_14ae0, 0
  br label %dec_label_pc_14af8

dec_label_pc_14af8:                               ; preds = %dec_label_pc_14af8.backedge, %dec_label_pc_14ab0
  %v2_14b14 = phi i32 [ %v0_14af8.pre, %dec_label_pc_14af8.backedge ], [ %tmp, %dec_label_pc_14ab0 ]
  %v1_14af8 = add i32 %v2_14b14, 4
  %v2_14af8 = inttoptr i32 %v1_14af8 to i32*
  %v3_14af8 = load i32, i32* %v2_14af8, align 4
  store i32 %v3_14af8, i32* %r3.global-to-local, align 4
  %v2_14afc = icmp eq i32 %v3_14af8, 0
  store i1 %v2_14afc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14afc, label %dec_label_pc_14b04, label %dec_label_pc_14b4c

dec_label_pc_14b04:                               ; preds = %dec_label_pc_14af8
  %v1_14b04 = add i32 %v2_14b14, 16
  %v2_14b04 = inttoptr i32 %v1_14b04 to i32*
  %v3_14b04 = load i32, i32* %v2_14b04, align 4
  store i32 %v3_14b04, i32* %r3.global-to-local, align 4
  %v2_14b08 = icmp eq i32 %v3_14b04, 0
  store i1 %v2_14b08, i1* %cpsr_z.global-to-local, align 1
  %v1_14b0c = add i32 %v2_14b14, 8
  %v2_14b0c = inttoptr i32 %v1_14b0c to i32*
  %v3_14b0c = load i32, i32* %v2_14b0c, align 4
  store i32 %v3_14b0c, i32* %r3.global-to-local, align 4
  br i1 %v2_14b08, label %bb, label %bb66

bb:                                               ; preds = %dec_label_pc_14b04
  store i32 81, i32* %r2.global-to-local, align 4
  store i32 81, i32* %v2_14b04, align 4
  %v0_14b18.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_14b04, %bb
  %v0_14b18 = phi i32 [ %v0_14b18.pre, %bb ], [ %v3_14b0c, %dec_label_pc_14b04 ]
  %v2_14b18 = icmp eq i32 %v0_14b18, 0
  store i1 %v2_14b18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14b18, label %bb67, label %.thread

bb67:                                             ; preds = %bb66
  store i32 %v1_14ac4, i32* %r3.global-to-local, align 4
  %v2_14b20 = load i32, i32* @r5, align 4
  %v3_14b20 = add i32 %v2_14b20, 8
  %v4_14b20 = inttoptr i32 %v3_14b20 to i32*
  store i32 %v1_14ac4, i32* %v4_14b20, align 4
  br label %.thread

.thread:                                          ; preds = %bb66, %bb67
  %v0_14b24 = load i32, i32* @r5, align 4
  %v1_14b24 = add i32 %v0_14b24, 16
  %v2_14b24 = inttoptr i32 %v1_14b24 to i32*
  %v3_14b24 = load i32, i32* %v2_14b24, align 4
  store i32 %v3_14b24, i32* %r0.global-to-local, align 4
  %v1_14b28 = add i32 %v0_14b24, 8
  %v2_14b28 = inttoptr i32 %v1_14b28 to i32*
  %v3_14b28 = load i32, i32* %v2_14b28, align 4
  store i32 %v3_14b28, i32* %r3.global-to-local, align 4
  %v2_14b2c = add i32 %v3_14b28, %v3_14b24
  store i32 %v2_14b2c, i32* @r0, align 4
  %v0_14b30 = call i32 @function_1203c()
  store i32 %v0_14b30, i32* %r0.global-to-local, align 4
  %v2_14b34 = icmp eq i32 %v0_14b30, 0
  store i1 %v2_14b34, i1* %cpsr_z.global-to-local, align 1
  %v1_14b38 = load i32, i32* @r5, align 4
  %v2_14b38 = add i32 %v1_14b38, 4
  %v3_14b38 = inttoptr i32 %v2_14b38 to i32*
  store i32 %v0_14b30, i32* %v3_14b38, align 4
  br i1 %v2_14b34, label %dec_label_pc_14da8, label %dec_label_pc_14b40

dec_label_pc_14b40:                               ; preds = %.thread
  %v0_14b40 = load i32, i32* @r5, align 4
  %v1_14b40 = add i32 %v0_14b40, 20
  %v2_14b40 = inttoptr i32 %v1_14b40 to i32*
  %v3_14b40 = load i32, i32* %v2_14b40, align 4
  %v1_14b44 = or i32 %v3_14b40, 1
  store i32 %v1_14b44, i32* %r3.global-to-local, align 4
  store i32 %v1_14b44, i32* %v2_14b40, align 4
  %v0_14b4c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14b4c

dec_label_pc_14b4c:                               ; preds = %dec_label_pc_14af8, %dec_label_pc_14b40
  %v1_14b54 = phi i32 [ %v2_14b14, %dec_label_pc_14af8 ], [ %v0_14b4c.pre, %dec_label_pc_14b40 ]
  %v1_14b4c = add i32 %v1_14b54, 4
  %v2_14b4c = inttoptr i32 %v1_14b4c to i32*
  %v3_14b4c = load i32, i32* %v2_14b4c, align 4
  store i32 %v3_14b4c, i32* %r2.global-to-local, align 4
  %v4_14b4c = add i32 %v1_14b54, 8
  %v5_14b4c = inttoptr i32 %v4_14b4c to i32*
  %v6_14b4c = load i32, i32* %v5_14b4c, align 4
  %v2_14b50 = add i32 %v6_14b4c, %v3_14b4c
  store i32 %v2_14b50, i32* %r3.global-to-local, align 4
  %v2_14b54 = add i32 %v1_14b54, 12
  %v3_14b54 = inttoptr i32 %v2_14b54 to i32*
  store i32 %v2_14b50, i32* %v3_14b54, align 4
  %v0_14b58 = load i32, i32* @fp, align 4
  store i32 %v0_14b58, i32* @r6, align 4
  br label %dec_label_pc_14b5c

dec_label_pc_14b5c:                               ; preds = %dec_label_pc_14be8, %dec_label_pc_14bd4, %dec_label_pc_14b4c
  %v0_14b64 = phi i32 [ %v0_14b58, %dec_label_pc_14b4c ], [ %v1_14bd4, %dec_label_pc_14bd4 ], [ %v0_14b64.pre.pre, %dec_label_pc_14be8 ]
  %v0_14b5c = load i32, i32* @r5, align 4
  %v1_14b5c = add i32 %v0_14b5c, 12
  store i32 %v1_14b5c, i32* %r0.global-to-local, align 4
  %v1_14b60 = inttoptr i32 %v1_14b5c to i32*
  %v2_14b60 = load i32, i32* %v1_14b60, align 4
  store i32 %v2_14b60, i32* %r0.global-to-local, align 4
  %v3_14b60 = add i32 %v0_14b5c, 16
  %v4_14b60 = inttoptr i32 %v3_14b60 to i32*
  %v5_14b60 = load i32, i32* %v4_14b60, align 4
  %v2_14b64 = add i32 %v2_14b60, %v0_14b64
  store i32 %v2_14b64, i32* %r0.global-to-local, align 4
  %v2_14b68 = sub i32 %v5_14b60, %v0_14b64
  %v1_14b6c = inttoptr i32 %v0_14b5c to i32*
  %v2_14b6c = load i32, i32* %v1_14b6c, align 4
  store i32 %v2_14b6c, i32* %r2.global-to-local, align 4
  %v3_14b70 = call i32 @function_15590(i32 %v2_14b64, i32 %v2_14b68, i32 %v2_14b6c)
  store i32 %v3_14b70, i32* %r0.global-to-local, align 4
  store i32 %v3_14b70, i32* %r4.global-to-local, align 4
  %v2_14b74 = icmp eq i32 %v3_14b70, 0
  store i1 %v2_14b74, i1* %cpsr_z.global-to-local, align 1
  %v0_14b7c = load i32, i32* @r5, align 4
  %v1_14b7c = add i32 %v0_14b7c, 12
  br i1 %v2_14b74, label %dec_label_pc_14b7c, label %dec_label_pc_14b94

dec_label_pc_14b7c:                               ; preds = %dec_label_pc_14b5c
  store i32 %v1_14b7c, i32* %r0.global-to-local, align 4
  %v1_14b80 = inttoptr i32 %v1_14b7c to i32*
  %v2_14b80 = load i32, i32* %v1_14b80, align 4
  store i32 %v2_14b80, i32* %r0.global-to-local, align 4
  %v3_14b80 = add i32 %v0_14b7c, 16
  %v4_14b80 = inttoptr i32 %v3_14b80 to i32*
  %v5_14b80 = load i32, i32* %v4_14b80, align 4
  store i32 %v5_14b80, i32* @r2, align 4
  %v2_14b88 = inttoptr i32 %v2_14b80 to i8*
  %v3_14b88 = call i32 @function_11a60(i8* %v2_14b88, i32 0)
  store i32 %v3_14b88, i32* %r0.global-to-local, align 4
  %v0_14b8c = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14dac

dec_label_pc_14b94:                               ; preds = %dec_label_pc_14b5c
  %v2_14b94 = inttoptr i32 %v1_14b7c to i32*
  %v3_14b94 = load i32, i32* %v2_14b94, align 4
  store i32 %v3_14b94, i32* @r4, align 4
  %v1_14b98 = load i32, i32* @r6, align 4
  %v2_14b98 = add i32 %v1_14b98, %v3_14b94
  store i32 %v2_14b98, i32* %r0.global-to-local, align 4
  %v1_14b9c = call i32 @function_16040(i32 %v2_14b98)
  %v0_14ba4 = load i32, i32* @r6, align 4
  %v2_14ba4 = add i32 %v0_14ba4, %v1_14b9c
  store i32 %v2_14ba4, i32* @r6, align 4
  %v0_14ba8 = load i32, i32* @r4, align 4
  store i32 %v0_14ba8, i32* @r0, align 4
  %v2_14bac = call i32 @function_1628c(i32 %v0_14ba8, i32 10)
  store i32 %v2_14bac, i32* %r0.global-to-local, align 4
  %v2_14bb0 = icmp eq i32 %v2_14bac, 0
  store i1 %v2_14bb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14bb0, label %dec_label_pc_14bdc, label %dec_label_pc_14bb8

dec_label_pc_14bb8:                               ; preds = %dec_label_pc_14b94
  %v1_14bb8 = inttoptr i32 %v2_14bac to i8*
  %v2_14bb8 = load i8, i8* %v1_14bb8, align 1
  %v3_14bb8 = zext i8 %v2_14bb8 to i32
  %v1_14bbc = add nuw nsw i32 %v3_14bb8, 255
  %v1_14bc0 = urem i32 %v1_14bbc, 256
  store i32 %v1_14bc0, i32* %r3.global-to-local, align 4
  %v7_14bc4 = icmp eq i32 %v1_14bc0, 92
  store i1 %v7_14bc4, i1* %cpsr_z.global-to-local, align 1
  %v1_14bc8 = trunc i32 %v1_14bbc to i8
  store i8 %v1_14bc8, i8* %v1_14bb8, align 1
  %v0_14bcc = load i32, i32* @r6, align 4
  %v1_14bcc = add i32 %v0_14bcc, -1
  store i32 %v1_14bcc, i32* @r6, align 4
  %v0_14bd0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_14bd0, label %dec_label_pc_14bd4, label %dec_label_pc_14c60

dec_label_pc_14bd4:                               ; preds = %dec_label_pc_14bb8
  %v1_14bd4 = add i32 %v0_14bcc, -2
  store i32 %v1_14bd4, i32* @r6, align 4
  br label %dec_label_pc_14b5c

dec_label_pc_14bdc:                               ; preds = %dec_label_pc_14b94
  %v0_14bdc = load i32, i32* @r5, align 4
  %v1_14bdc = add i32 %v0_14bdc, 20
  %v2_14bdc = inttoptr i32 %v1_14bdc to i32*
  %v3_14bdc = load i32, i32* %v2_14bdc, align 4
  store i32 %v3_14bdc, i32* %r3.global-to-local, align 4
  %v2_14be0 = icmp eq i32 %v3_14bdc, 0
  store i1 %v2_14be0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14be0, label %dec_label_pc_14c18, label %dec_label_pc_14be8

dec_label_pc_14be8:                               ; preds = %dec_label_pc_14bdc
  %v1_14be8 = add i32 %v0_14bdc, 16
  %v2_14be8 = inttoptr i32 %v1_14be8 to i32*
  %v3_14be8 = load i32, i32* %v2_14be8, align 4
  store i32 %v3_14be8, i32* %r3.global-to-local, align 4
  %v1_14bec = add i32 %v0_14bdc, 8
  %v2_14bec = inttoptr i32 %v1_14bec to i32*
  %v3_14bec = load i32, i32* %v2_14bec, align 4
  %v1_14bf0 = add i32 %v3_14be8, 4096
  store i32 %v1_14bf0, i32* %r3.global-to-local, align 4
  %v2_14bf4 = add i32 %v3_14bec, %v1_14bf0
  store i32 %v1_14bf0, i32* %v2_14be8, align 4
  %v0_14bfc = load i32, i32* @r5, align 4
  %v1_14bfc = add i32 %v0_14bfc, 4
  %v2_14bfc = inttoptr i32 %v1_14bfc to i32*
  %v3_14bfc = load i32, i32* %v2_14bfc, align 4
  store i32 %v3_14bfc, i32* %r0.global-to-local, align 4
  %v4_14c00 = inttoptr i32 %v3_14bfc to i32*
  %v5_14c00 = call i32 @function_12a90(i32* %v4_14c00, i32 %v2_14bf4, i32 %v2_14b6c, i32 %v1_14bf0)
  store i32 %v5_14c00, i32* %r0.global-to-local, align 4
  %v0_14c04 = load i32, i32* @r5, align 4
  %v1_14c04 = add i32 %v0_14c04, 8
  %v2_14c04 = inttoptr i32 %v1_14c04 to i32*
  %v3_14c04 = load i32, i32* %v2_14c04, align 4
  %v2_14c08 = add i32 %v3_14c04, %v5_14c00
  store i32 %v2_14c08, i32* %r3.global-to-local, align 4
  %v2_14c0c = add i32 %v0_14c04, 12
  %v3_14c0c = inttoptr i32 %v2_14c0c to i32*
  store i32 %v2_14c08, i32* %v3_14c0c, align 4
  %v1_14c10 = load i32, i32* @r5, align 4
  %v2_14c10 = add i32 %v1_14c10, 4
  %v3_14c10 = inttoptr i32 %v2_14c10 to i32*
  store i32 %v5_14c00, i32* %v3_14c10, align 4
  %v0_14b64.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_14b5c

dec_label_pc_14c18:                               ; preds = %dec_label_pc_14bdc, %.dec_label_pc_14c18_crit_edge
  %v0_14c18 = phi i32 [ %v0_14c18.pre, %.dec_label_pc_14c18_crit_edge ], [ %v0_14bdc, %dec_label_pc_14bdc ]
  %v1_14c18 = inttoptr i32 %v0_14c18 to i32*
  %v2_14c18 = load i32, i32* %v1_14c18, align 4
  %v1_14c1c = add i32 %v2_14c18, 52
  %v2_14c1c = inttoptr i32 %v1_14c1c to i32*
  %v3_14c1c = load i32, i32* %v2_14c1c, align 4
  store i32 %v3_14c1c, i32* %r3.global-to-local, align 4
  %v2_14c20 = icmp eq i32 %v3_14c1c, 0
  store i1 %v2_14c20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14c20, label %dec_label_pc_14c4c, label %dec_label_pc_14c28

dec_label_pc_14c28:                               ; preds = %dec_label_pc_14c18
  %v1_14c28 = add i32 %v2_14c18, 16
  %v2_14c28 = inttoptr i32 %v1_14c28 to i32*
  %v3_14c28 = load i32, i32* %v2_14c28, align 4
  store i32 %v3_14c28, i32* %r2.global-to-local, align 4
  %v1_14c2c = add i32 %v2_14c18, 24
  %v2_14c2c = inttoptr i32 %v1_14c2c to i32*
  %v3_14c2c = load i32, i32* %v2_14c2c, align 4
  store i32 %v3_14c2c, i32* %r3.global-to-local, align 4
  %v3_14c30 = icmp ult i32 %v3_14c28, %v3_14c2c
  %v9_14c30 = icmp eq i32 %v3_14c28, %v3_14c2c
  store i1 %v9_14c30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14c30, label %dec_label_pc_14c54thread-pre-split, label %dec_label_pc_14c40

dec_label_pc_14c40:                               ; preds = %dec_label_pc_14c28
  store i32 %v2_14c18, i32* %r0.global-to-local, align 4
  %v1_14c44 = inttoptr i32 %v2_14c18 to i16*
  %v2_14c44 = call i32 @function_159e0(i16* %v1_14c44)
  store i32 %v2_14c44, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14c54

dec_label_pc_14c4c:                               ; preds = %dec_label_pc_14c18
  store i32 %v2_14c18, i32* %r0.global-to-local, align 4
  %v1_14c50 = call i32 @function_154b4(i32 %v2_14c18)
  store i32 %v1_14c50, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14c54

dec_label_pc_14c54thread-pre-split:               ; preds = %dec_label_pc_14c28
  %v2_14c34 = inttoptr i32 %v3_14c28 to i8*
  %v3_14c34 = load i8, i8* %v2_14c34, align 1
  %v4_14c34 = zext i8 %v3_14c34 to i32
  store i32 %v4_14c34, i32* %r0.global-to-local, align 4
  %v6_14c34 = add i32 %v3_14c28, 1
  store i32 %v6_14c34, i32* %r2.global-to-local, align 4
  store i32 %v6_14c34, i32* %v2_14c28, align 4
  %v0_14c54.pr = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14c54

dec_label_pc_14c54:                               ; preds = %dec_label_pc_14c54thread-pre-split, %dec_label_pc_14c40, %dec_label_pc_14c4c
  %v1_14c58 = phi i32 [ %v0_14c54.pr, %dec_label_pc_14c54thread-pre-split ], [ %v2_14c44, %dec_label_pc_14c40 ], [ %v1_14c50, %dec_label_pc_14c4c ]
  %v7_14c54 = icmp eq i32 %v1_14c58, 10
  store i1 %v7_14c54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14c54, label %dec_label_pc_14c60.loopexit, label %bb68

bb68:                                             ; preds = %dec_label_pc_14c54
  %v8_14c58 = icmp eq i32 %v1_14c58, -1
  store i1 %v8_14c58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_14c58, label %dec_label_pc_14c60.loopexit, label %.dec_label_pc_14c18_crit_edge

.dec_label_pc_14c18_crit_edge:                    ; preds = %bb68
  %v0_14c18.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14c18

dec_label_pc_14c60.loopexit:                      ; preds = %bb68, %dec_label_pc_14c54
  %v0_14c60.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_14c60

dec_label_pc_14c60:                               ; preds = %dec_label_pc_14bb8, %dec_label_pc_14c60.loopexit
  %v0_14c60 = phi i32 [ %v0_14c60.pre, %dec_label_pc_14c60.loopexit ], [ %v1_14bcc, %dec_label_pc_14bb8 ]
  %v7_14c60 = icmp eq i32 %v0_14c60, -1
  store i1 %v7_14c60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14c60, label %dec_label_pc_14da8, label %dec_label_pc_14c68

dec_label_pc_14c68:                               ; preds = %dec_label_pc_14c60
  %v0_14c68 = load i32, i32* @r5, align 4
  %v1_14c68 = add i32 %v0_14c68, 4
  %v2_14c68 = inttoptr i32 %v1_14c68 to i32*
  %v3_14c68 = load i32, i32* %v2_14c68, align 4
  store i32 %v3_14c68, i32* %r0.global-to-local, align 4
  store i32 %v3_14abc, i32* @r2, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  store i32 %v3_14c68, i32* %v2_14c74, align 4
  %v0_14c78 = load i32, i32* @fp, align 4
  %v2_14c7c = inttoptr i32 %v3_14c68 to i8*
  %v3_14c7c = call i32 @function_11a60(i8* %v2_14c7c, i32 %v0_14c78)
  store i32 %v3_14c7c, i32* %r0.global-to-local, align 4
  store i32 %v1_14ad0, i32* %r2.global-to-local, align 4
  store i1 %v2_14c84, i1* %cpsr_z.global-to-local, align 1
  %v0_14c88 = load i32, i32* @r5, align 4
  %v1_14c88 = add i32 %v0_14c88, 12
  %v2_14c88 = inttoptr i32 %v1_14c88 to i32*
  %v3_14c88 = load i32, i32* %v2_14c88, align 4
  store i32 %v3_14c88, i32* @r4, align 4
  br i1 %v2_14c84, label %dec_label_pc_14ca0, label %dec_label_pc_14c90

dec_label_pc_14c90:                               ; preds = %dec_label_pc_14c68
  store i32 %v3_14c88, i32* @r0, align 4
  %v0_14c94 = load i32, i32* @sl, align 4
  %v2_14c98 = inttoptr i32 %v3_14c88 to i8*
  %v3_14c98 = call i32 @function_16104(i8* %v2_14c98, i32 %v0_14c94)
  store i32 %v3_14c98, i32* %r0.global-to-local, align 4
  %v0_14c9c = load i32, i32* @r4, align 4
  %v2_14c9c = add i32 %v0_14c9c, %v3_14c98
  store i32 %v2_14c9c, i32* @r4, align 4
  br label %dec_label_pc_14ca0

dec_label_pc_14ca0:                               ; preds = %dec_label_pc_14c68, %dec_label_pc_14c90
  %v0_14d7813 = phi i32 [ %v3_14c88, %dec_label_pc_14c68 ], [ %v2_14c9c, %dec_label_pc_14c90 ]
  %v1_14ca0 = inttoptr i32 %v0_14d7813 to i8*
  %v2_14ca0 = load i8, i8* %v1_14ca0, align 1
  %v3_14ca0 = zext i8 %v2_14ca0 to i32
  store i32 %v3_14ca0, i32* %r2.global-to-local, align 4
  %v2_14ca4 = icmp eq i8 %v2_14ca0, 0
  store i1 %v2_14ca4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14ca4, label %dec_label_pc_14af8.backedge, label %dec_label_pc_14cac

dec_label_pc_14af8.backedge:                      ; preds = %dec_label_pc_14ca0, %dec_label_pc_14da0, %dec_label_pc_14cac
  %v0_14af8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14af8

dec_label_pc_14cac:                               ; preds = %dec_label_pc_14ca0
  %v0_14cac = load i32, i32* @r7, align 4
  %v1_14cac = inttoptr i32 %v0_14cac to i8*
  %v2_14cac = load i8, i8* %v1_14cac, align 1
  %v3_14cac = zext i8 %v2_14cac to i32
  store i32 %v3_14cac, i32* %r3.global-to-local, align 4
  %v9_14cb0 = icmp eq i8 %v2_14cac, %v2_14ca0
  store i1 %v9_14cb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14cb0, label %dec_label_pc_14af8.backedge, label %dec_label_pc_14d78.preheader

dec_label_pc_14d78.preheader:                     ; preds = %dec_label_pc_14cac
  %v1_14cb4 = load i32, i32* @fp, align 4
  store i32 %v1_14cb4, i32* @r6, align 4
  %v2_14d7815 = load i8, i8* %v1_14ca0, align 1
  %v3_14d7816 = zext i8 %v2_14d7815 to i32
  store i32 %v3_14d7816, i32* %r2.global-to-local, align 4
  %v2_14d7c17 = icmp eq i8 %v2_14d7815, 0
  store i1 %v2_14d7c17, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14d7c17, label %dec_label_pc_14d94, label %dec_label_pc_14d84.preheader

dec_label_pc_14d84.preheader:                     ; preds = %dec_label_pc_14d78.preheader
  %v2_14d8482 = load i8, i8* %v1_14cac, align 1
  %v3_14d8483 = zext i8 %v2_14d8482 to i32
  store i32 %v3_14d8483, i32* %r3.global-to-local, align 4
  %v9_14d8886 = icmp eq i8 %v2_14d8482, %v2_14d7815
  store i1 %v9_14d8886, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14d8886, label %dec_label_pc_14d94, label %bb74

dec_label_pc_14cc0:                               ; preds = %bb74
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v2_14cc4 = load i32, i32* %v2_14c74, align 4
  store i32 %v2_14cc4, i32* %r3.global-to-local, align 4
  store i32 %v1_14ad4, i32* %r2.global-to-local, align 4
  %v9_14ccc = icmp eq i32 %v2_14cd088, %v1_14ad4
  store i1 %v9_14ccc, i1* %cpsr_z.global-to-local, align 1
  %v5_14cd0 = mul i32 %v2_14cd088, 4
  %v6_14cd0 = add i32 %v2_14cc4, %v5_14cd0
  %v7_14cd0 = inttoptr i32 %v6_14cd0 to i32*
  store i32 %v0_14cd087, i32* %v7_14cd0, align 4
  br i1 %v9_14ccc, label %dec_label_pc_14cd8, label %dec_label_pc_14ce4

dec_label_pc_14cd8:                               ; preds = %dec_label_pc_14cc0
  store i32 %v1_14ae0, i32* %r3.global-to-local, align 4
  store i1 %v2_14cdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14cdc, label %dec_label_pc_14ce4, label %dec_label_pc_14d04

dec_label_pc_14ce4:                               ; preds = %dec_label_pc_14cd8, %dec_label_pc_14cc0
  %v0_14ce4 = load i32, i32* @r7, align 4
  %v1_14ce4 = inttoptr i32 %v0_14ce4 to i8*
  %v2_14ce4 = load i8, i8* %v1_14ce4, align 1
  %v3_14ce4 = zext i8 %v2_14ce4 to i32
  store i32 %v3_14ce4, i32* %r3.global-to-local, align 4
  %v2_14ce8 = icmp eq i8 %v2_14ce4, 0
  store i1 %v2_14ce8, i1* %cpsr_z.global-to-local, align 1
  %v0_14cec = load i32, i32* @r4, align 4
  store i32 %v0_14cec, i32* @r0, align 4
  %v1_14cf0 = load i32, i32* @sl, align 4
  %storemerge = select i1 %v2_14ce8, i32 %v1_14cf0, i32 %v0_14ce4
  store i32 %storemerge, i32* @r1, align 4
  %v0_14cf8 = call i32 @function_160c0()
  store i32 %v0_14cf8, i32* %r0.global-to-local, align 4
  %v0_14cfc = load i32, i32* @r4, align 4
  %v2_14cfc = add i32 %v0_14cfc, %v0_14cf8
  store i32 %v2_14cfc, i32* @r4, align 4
  br label %dec_label_pc_14d3c

dec_label_pc_14d04:                               ; preds = %dec_label_pc_14cd8
  %v0_14d04 = load i32, i32* @r4, align 4
  store i32 %v0_14d04, i32* @r0, align 4
  %v0_14d08 = load i32, i32* @r7, align 4
  %v1_14d08 = inttoptr i32 %v0_14d08 to i8*
  %v2_14d08 = load i8, i8* %v1_14d08, align 1
  %v3_14d08 = zext i8 %v2_14d08 to i32
  %v5_14d0c = call i32 @function_161a0(i32 %v0_14d04, i32 %v3_14d08, i32 %v1_14ad4, i32 %v1_14ae0)
  store i32 %v5_14d0c, i32* %r0.global-to-local, align 4
  store i32 %v1_14ad0, i32* %r2.global-to-local, align 4
  store i1 %v2_14c84, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_14d0c, i32* @r4, align 4
  br i1 %v2_14c84, label %dec_label_pc_14d3c, label %dec_label_pc_14d28

dec_label_pc_14d24:                               ; preds = %dec_label_pc_14d28
  %v1_14d24 = add i32 %v0_14d3c.pre, -1
  store i32 %v1_14d24, i32* @r4, align 4
  br label %dec_label_pc_14d28

dec_label_pc_14d28:                               ; preds = %dec_label_pc_14d04, %dec_label_pc_14d24
  %v0_14d28 = phi i32 [ %v1_14d24, %dec_label_pc_14d24 ], [ %v5_14d0c, %dec_label_pc_14d04 ]
  %v1_14d28 = add i32 %v0_14d28, -1
  %v2_14d28 = inttoptr i32 %v1_14d28 to i8*
  %v3_14d28 = load i8, i8* %v2_14d28, align 1
  %v4_14d28 = zext i8 %v3_14d28 to i32
  %v0_14d2c = load i32, i32* @sl, align 4
  store i32 %v0_14d2c, i32* @r0, align 4
  %v2_14d30 = call i32 @function_1628c(i32 %v0_14d2c, i32 %v4_14d28)
  store i32 %v2_14d30, i32* %r0.global-to-local, align 4
  %v2_14d34 = icmp eq i32 %v2_14d30, 0
  store i1 %v2_14d34, i1* %cpsr_z.global-to-local, align 1
  %v0_14d3c.pre = load i32, i32* @r4, align 4
  br i1 %v2_14d34, label %dec_label_pc_14d3c, label %dec_label_pc_14d24

dec_label_pc_14d3c:                               ; preds = %dec_label_pc_14d28, %dec_label_pc_14d04, %dec_label_pc_14ce4
  %v3_14d48 = phi i32 [ %v5_14d0c, %dec_label_pc_14d04 ], [ %v2_14cfc, %dec_label_pc_14ce4 ], [ %v0_14d3c.pre, %dec_label_pc_14d28 ]
  %v1_14d3c = inttoptr i32 %v3_14d48 to i8*
  %v2_14d3c = load i8, i8* %v1_14d3c, align 1
  %v3_14d3c = zext i8 %v2_14d3c to i32
  store i32 %v3_14d3c, i32* %r2.global-to-local, align 4
  %v0_14d40 = load i32, i32* @r7, align 4
  %v1_14d40 = inttoptr i32 %v0_14d40 to i8*
  %v2_14d40 = load i8, i8* %v1_14d40, align 1
  %v3_14d40 = zext i8 %v2_14d40 to i32
  store i32 %v3_14d40, i32* %r3.global-to-local, align 4
  %v9_14d44 = icmp eq i8 %v2_14d40, %v2_14d3c
  store i1 %v9_14d44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14d44, label %bb71, label %dec_label_pc_14d50

bb71:                                             ; preds = %dec_label_pc_14d3c
  %v1_14d48 = load i32, i32* @fp, align 4
  %v2_14d48 = trunc i32 %v1_14d48 to i8
  store i8 %v2_14d48, i8* %v1_14d3c, align 1
  %v0_14d4c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_14d4c.pr, label %bb73, label %.dec_label_pc_14d50_crit_edge

.dec_label_pc_14d50_crit_edge:                    ; preds = %bb71
  %v0_14d50.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14d50

dec_label_pc_14d50:                               ; preds = %.dec_label_pc_14d50_crit_edge, %dec_label_pc_14d3c
  %v0_14d50 = phi i32 [ %v0_14d50.pre, %.dec_label_pc_14d50_crit_edge ], [ %v3_14d3c, %dec_label_pc_14d3c ]
  %v2_14d50 = icmp eq i32 %v0_14d50, 0
  store i1 %v2_14d50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14d50, label %bb73, label %bb72

bb72:                                             ; preds = %dec_label_pc_14d50
  %v1_14d54 = load i32, i32* @fp, align 4
  %v2_14d54 = trunc i32 %v1_14d54 to i8
  %v3_14d54 = load i32, i32* @r4, align 4
  %v4_14d54 = inttoptr i32 %v3_14d54 to i8*
  store i8 %v2_14d54, i8* %v4_14d54, align 1
  %v5_14d54 = load i32, i32* @r4, align 4
  %v6_14d54 = add i32 %v5_14d54, 1
  store i32 %v6_14d54, i32* @r4, align 4
  br label %bb73

bb73:                                             ; preds = %bb71, %dec_label_pc_14d50, %bb72
  %v2_14d58 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_14d58, i32* %r3.global-to-local, align 4
  %v2_14d5c = icmp eq i32 %v2_14d58, 0
  store i1 %v2_14d5c, i1* %cpsr_z.global-to-local, align 1
  %v0_14d78.pre = load i32, i32* @r4, align 4
  br i1 %v2_14d5c, label %dec_label_pc_14d74, label %dec_label_pc_14d64

dec_label_pc_14d64:                               ; preds = %bb73
  store i32 %v0_14d78.pre, i32* @r0, align 4
  %v0_14d68 = load i32, i32* @sl, align 4
  %v2_14d6c = inttoptr i32 %v0_14d78.pre to i8*
  %v3_14d6c = call i32 @function_16104(i8* %v2_14d6c, i32 %v0_14d68)
  store i32 %v3_14d6c, i32* %r0.global-to-local, align 4
  %v0_14d70 = load i32, i32* @r4, align 4
  %v2_14d70 = add i32 %v0_14d70, %v3_14d6c
  store i32 %v2_14d70, i32* @r4, align 4
  br label %dec_label_pc_14d74

dec_label_pc_14d74:                               ; preds = %bb73, %dec_label_pc_14d64
  %v0_14d78 = phi i32 [ %v2_14d70, %dec_label_pc_14d64 ], [ %v0_14d78.pre, %bb73 ]
  %v0_14d74 = load i32, i32* @r6, align 4
  %v1_14d74 = add i32 %v0_14d74, 1
  store i32 %v1_14d74, i32* @r6, align 4
  %v1_14d78 = inttoptr i32 %v0_14d78 to i8*
  %v2_14d78 = load i8, i8* %v1_14d78, align 1
  %v3_14d78 = zext i8 %v2_14d78 to i32
  store i32 %v3_14d78, i32* %r2.global-to-local, align 4
  %v2_14d7c = icmp eq i8 %v2_14d78, 0
  store i1 %v2_14d7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14d7c, label %dec_label_pc_14d94, label %dec_label_pc_14d74.dec_label_pc_14d84_crit_edge

dec_label_pc_14d74.dec_label_pc_14d84_crit_edge:  ; preds = %dec_label_pc_14d74
  %v0_14d84.pre = load i32, i32* @r7, align 4
  %v1_14d84 = inttoptr i32 %v0_14d84.pre to i8*
  %v2_14d84 = load i8, i8* %v1_14d84, align 1
  %v3_14d84 = zext i8 %v2_14d84 to i32
  store i32 %v3_14d84, i32* %r3.global-to-local, align 4
  %v9_14d88 = icmp eq i8 %v2_14d84, %v2_14d78
  store i1 %v9_14d88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14d88, label %dec_label_pc_14d94, label %bb74

bb74:                                             ; preds = %dec_label_pc_14d84.preheader, %dec_label_pc_14d74.dec_label_pc_14d84_crit_edge
  %v2_14cd088 = phi i32 [ %v1_14d74, %dec_label_pc_14d74.dec_label_pc_14d84_crit_edge ], [ %v1_14cb4, %dec_label_pc_14d84.preheader ]
  %v0_14cd087 = phi i32 [ %v0_14d78, %dec_label_pc_14d74.dec_label_pc_14d84_crit_edge ], [ %v0_14d7813, %dec_label_pc_14d84.preheader ]
  %v2_14d8c = load i32, i32* @sb, align 4
  %v3_14d8c = sub i32 %v2_14cd088, %v2_14d8c
  %v5_14d8c = xor i32 %v2_14d8c, %v2_14cd088
  %v6_14d8c = xor i32 %v3_14d8c, %v2_14cd088
  %v7_14d8c = and i32 %v6_14d8c, %v5_14d8c
  %v8_14d8c = icmp slt i32 %v7_14d8c, 0
  %v9_14d8c = icmp slt i32 %v3_14d8c, 0
  %v10_14d8c = icmp eq i32 %v2_14cd088, %v2_14d8c
  store i1 %v10_14d8c, i1* %cpsr_z.global-to-local, align 1
  %v2_14d90 = xor i1 %v9_14d8c, %v8_14d8c
  br i1 %v2_14d90, label %dec_label_pc_14cc0, label %dec_label_pc_14d94

dec_label_pc_14d94:                               ; preds = %dec_label_pc_14d84.preheader, %bb74, %dec_label_pc_14d74, %dec_label_pc_14d74.dec_label_pc_14d84_crit_edge, %dec_label_pc_14d78.preheader
  %v0_14d98 = phi i32 [ %v1_14cb4, %dec_label_pc_14d78.preheader ], [ %v1_14cb4, %dec_label_pc_14d84.preheader ], [ %v2_14cd088, %bb74 ], [ %v1_14d74, %dec_label_pc_14d74 ], [ %v1_14d74, %dec_label_pc_14d74.dec_label_pc_14d84_crit_edge ]
  store i32 %v3_14ab8, i32* %r2.global-to-local, align 4
  %v9_14d98 = icmp eq i32 %v0_14d98, %v3_14ab8
  store i1 %v9_14d98, i1* %cpsr_z.global-to-local, align 1
  %v6_14d9c = icmp slt i32 %v0_14d98, %v3_14ab8
  br i1 %v6_14d9c, label %dec_label_pc_14da0, label %dec_label_pc_14dac

dec_label_pc_14da0:                               ; preds = %dec_label_pc_14d94
  %v0_14da0 = load i32, i32* @r8, align 4
  %v1_14da0 = and i32 %v0_14da0, 1048576
  %v2_14da0 = icmp eq i32 %v1_14da0, 0
  store i1 %v2_14da0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14da0, label %dec_label_pc_14af8.backedge, label %dec_label_pc_14da8

dec_label_pc_14da8:                               ; preds = %dec_label_pc_14da0, %dec_label_pc_14c60, %.thread, %dec_label_pc_14a94
  br label %dec_label_pc_14dac

dec_label_pc_14dac:                               ; preds = %dec_label_pc_14d94, %dec_label_pc_14b7c, %dec_label_pc_14da8
  %v0_14dac = phi i32 [ %v0_14b8c, %dec_label_pc_14b7c ], [ 0, %dec_label_pc_14da8 ], [ %v0_14d98, %dec_label_pc_14d94 ]
  store i32 %v0_14dac, i32* %r0.global-to-local, align 4
  store i32 %v3_14a94, i32* @r4, align 4
  store i32 %v6_14a94, i32* @r5, align 4
  store i32 %v9_14a94, i32* @r6, align 4
  store i32 %v12_14a94, i32* @r7, align 4
  store i32 %v15_14a94, i32* @r8, align 4
  store i32 %v18_14a94, i32* @sb, align 4
  store i32 %v21_14a94, i32* @sl, align 4
  store i32 %v24_14a94, i32* @fp, align 4
  ret i32 %v0_14dac

; uselistorder directives
  uselistorder i32 %v0_14dac, { 1, 0 }
  uselistorder i32 %v0_14d98, { 0, 2, 1 }
  uselistorder i32 %v3_14d8c, { 1, 0 }
  uselistorder i32 %v2_14d8c, { 1, 0, 2 }
  uselistorder i32 %v2_14cd088, { 0, 1, 6, 5, 2, 3, 4 }
  uselistorder i1 %v9_14d88, { 1, 0 }
  uselistorder i32 %v0_14d78.pre, { 0, 2, 1 }
  uselistorder i32 %v5_14d0c, { 1, 0, 2, 3 }
  uselistorder i1 %v9_14d8886, { 1, 0 }
  uselistorder i1 %v9_14cb0, { 1, 0 }
  uselistorder i32 %v3_14c88, { 0, 2, 1, 3 }
  uselistorder i1 %v7_14c60, { 1, 0 }
  uselistorder i1 %v8_14c58, { 1, 0 }
  uselistorder i32 %v3_14c28, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_14c18, { 3, 2, 0, 1, 4, 5, 6 }
  uselistorder i32 %v5_14c00, { 1, 0, 2 }
  uselistorder i32 %v1_14bf0, { 1, 2, 0, 3 }
  uselistorder i32 %v0_14bdc, { 0, 2, 1, 3 }
  uselistorder i32 %v1_14bd4, { 1, 0 }
  uselistorder i32 %v1_14bc0, { 1, 0 }
  uselistorder i32 %v1_14bbc, { 1, 0 }
  uselistorder i32 %v1_14b7c, { 2, 0, 1 }
  uselistorder i32 %v0_14b64, { 1, 0 }
  uselistorder i32 %v1_14b54, { 0, 2, 1 }
  uselistorder i1 %v2_14c84, { 1, 0, 2, 3 }
  uselistorder i32 %v1_14ae0, { 2, 0, 1, 3 }
  uselistorder i32 %v1_14ad4, { 2, 1, 0 }
  uselistorder i32 %v3_14abc, { 1, 0 }
  uselistorder i32 %v3_14ab8, { 2, 1, 0 }
  uselistorder i32 %v1_14ab0, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 7, 2, 3, 4, 5, 6, 1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 7, 2, 3, 4, 5, 6, 16, 8, 9, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 6, 7, 9, 8, 12, 13, 11, 10, 15, 14, 17, 16, 18, 19, 22, 20, 21, 1, 23, 24, 25, 27, 26, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 12, 13, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 33, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i32 1048576, { 1, 0, 2 }
  uselistorder i32 92, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32* @sl, { 8, 9, 10, 11, 12, 13, 14, 51, 0, 52, 53, 15, 16, 111, 112, 113, 114, 115, 116, 117, 118, 119, 1, 120, 121, 122, 123, 124, 125, 127, 2, 126, 129, 128, 130, 131, 132, 133, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 17, 18, 19, 20, 21, 22, 37, 38, 33, 34, 35, 36, 45, 46, 47, 39, 40, 41, 42, 43, 44, 3, 48, 49, 50, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 6, 98, 99, 100, 7, 101, 102, 103, 104, 105, 106, 107, 4, 108, 109, 110, 134, 5, 135, 136, 137, 65, 66, 67 }
  uselistorder i32 %arg3, { 3, 4, 2, 0, 1, 5, 6 }
  uselistorder label %dec_label_pc_14dac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14d94, { 1, 3, 2, 0, 4 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %dec_label_pc_14d74, { 1, 0 }
  uselistorder label %bb73, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14d28, { 1, 0 }
  uselistorder label %dec_label_pc_14af8.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14ca0, { 1, 0 }
  uselistorder label %dec_label_pc_14c60, { 1, 0 }
  uselistorder label %dec_label_pc_14c54, { 0, 2, 1 }
  uselistorder label %dec_label_pc_14c18, { 1, 0 }
  uselistorder label %dec_label_pc_14b4c, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb66, { 1, 0 }
}

define i32 @function_14dbc(i32* %arg1) local_unnamed_addr {
dec_label_pc_14dbc:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r4, align 4
  %v2_14dc0 = icmp eq i32* %arg1, null
  br i1 %v2_14dc0, label %dec_label_pc_14de8, label %dec_label_pc_14dc8

dec_label_pc_14dc8:                               ; preds = %dec_label_pc_14dbc
  %v2_14dc8 = load i32, i32* %arg1, align 4
  %v1_14dcc = inttoptr i32 %v2_14dc8 to i16*
  %v2_14dcc = call i32 @function_14e38(i16* %v1_14dcc)
  %v0_14dd0 = load i32, i32* @r4, align 4
  %v1_14dd0 = add i32 %v0_14dd0, 20
  %v2_14dd0 = inttoptr i32 %v1_14dd0 to i32*
  %v3_14dd0 = load i32, i32* %v2_14dd0, align 4
  %v2_14dd4 = icmp eq i32 %v3_14dd0, 0
  br i1 %v2_14dd4, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_14dc8
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_14dc8, %bb
  store i32 85472, i32* @lr, align 4
  %v1_14ddc = xor i1 %v2_14dd4, true
  call void @__pseudo_cond_branch(i1 %v1_14ddc, i32 ptrtoint (i32* @global_var_130a8.21 to i32))
  %v0_14de0 = load i32, i32* @r4, align 4
  store i32 %v0_14de0, i32* @r0, align 4
  %v0_14de4 = call i32 @function_130a8()
  br label %dec_label_pc_14de8

dec_label_pc_14de8:                               ; preds = %dec_label_pc_14dbc, %bb6
  %v1_14dec = phi i32 [ 0, %dec_label_pc_14dbc ], [ %v0_14de4, %bb6 ]
  ret i32 %v1_14dec

; uselistorder directives
  uselistorder i32* null, { 0, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 2, 19, 20, 21, 3, 22, 4, 23 }
  uselistorder label %dec_label_pc_14de8, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_14df0(i32 %arg1) local_unnamed_addr {
dec_label_pc_14df0:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14dfc = load i32, i32* @r4, align 4
  store i32 %v3_14dfc, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_16c54.506 to i32), i32* @r1, align 4
  %v0_14e04 = call i32 @function_14fec()
  store i32 %v0_14e04, i32* %r0.global-to-local, align 4
  store i32 %v0_14e04, i32* @r4, align 4
  %v2_14e08 = icmp eq i32 %v0_14e04, 0
  br i1 %v2_14e08, label %bb, label %dec_label_pc_14e14

bb:                                               ; preds = %dec_label_pc_14df0
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb5

dec_label_pc_14e14:                               ; preds = %dec_label_pc_14df0
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_14e1c = call i32 @function_1295c(i32 1, i32 24)
  store i32 %v2_14e1c, i32* %r0.global-to-local, align 4
  %v2_14e20 = icmp eq i32 %v2_14e1c, 0
  br i1 %v2_14e20, label %bb5, label %bb4

bb4:                                              ; preds = %dec_label_pc_14e14
  %v1_14e24 = load i32, i32* @r4, align 4
  %v3_14e24 = inttoptr i32 %v2_14e1c to i32*
  store i32 %v1_14e24, i32* %v3_14e24, align 4
  %v1_14e2c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb5

bb5:                                              ; preds = %bb, %dec_label_pc_14e14, %bb4
  %v1_14e2c = phi i32 [ 0, %bb ], [ 0, %dec_label_pc_14e14 ], [ %v1_14e2c.pre, %bb4 ]
  %v2_14e28 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14e28, i32* @r4, align 4
  ret i32 %v1_14e2c

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 3, 1, 0, 4 }
  uselistorder i32 (i32, i32)* @function_1295c, { 41, 2, 40, 39, 35, 34, 33, 15, 14, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 1, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 38, 37, 36 }
  uselistorder label %bb5, { 2, 1, 0 }
}

define i32 @function_14e38(i16* %arg1) local_unnamed_addr {
dec_label_pc_14e38:
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_14e38 = load i32, i32* @r4, align 4
  store i32 %v3_14e38, i32* %stack_var_-36, align 4
  %v6_14e38 = load i32, i32* @r5, align 4
  %v9_14e38 = load i32, i32* @r6, align 4
  %v12_14e38 = load i32, i32* @r7, align 4
  %v2_14e3c = add i32 %tmp, 52
  %v3_14e3c = inttoptr i32 %v2_14e3c to i32*
  %v4_14e3c = load i32, i32* %v3_14e3c, align 4
  %v1_14e44 = sub i32 1, %v4_14e3c
  %v2_14e44 = icmp ult i32 %v4_14e3c, 2
  br i1 %v2_14e44, label %bb18, label %bb

bb:                                               ; preds = %dec_label_pc_14e38
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_14e38, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_14e44, %dec_label_pc_14e38 ]
  %v0_14e4c = phi i32 [ 0, %bb ], [ %v1_14e44, %dec_label_pc_14e38 ]
  store i32 %storemerge, i32* %sb.global-to-local, align 4
  %v2_14e4c = icmp eq i32 %v0_14e4c, 0
  store i32 %tmp, i32* @r5, align 4
  store i32 126992, i32* @r6, align 4
  br i1 %v2_14e4c, label %dec_label_pc_14e98, label %dec_label_pc_14e60

dec_label_pc_14e60:                               ; preds = %bb18
  %v4_14e78 = load i32, i32* inttoptr (i32 127064 to i32*), align 8
  call void @__pseudo_branch(i32 %v4_14e78)
  %v0_14e8c = load i32, i32* @r6, align 4
  %v2_14e8c = add i32 %v0_14e8c, 16
  %v3_14e8c = inttoptr i32 %v2_14e8c to i32*
  %v4_14e8c = load i32, i32* %v3_14e8c, align 4
  call void @__pseudo_branch(i32 %v4_14e8c)
  %v0_14e98.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14e98

dec_label_pc_14e98:                               ; preds = %bb18, %dec_label_pc_14e60
  %v1_14ea0 = phi i32 [ %tmp, %bb18 ], [ %v0_14e98.pre, %dec_label_pc_14e60 ]
  %v1_14e98 = inttoptr i32 %v1_14ea0 to i16*
  %v2_14e98 = load i16, i16* %v1_14e98, align 2
  %v3_14e98 = zext i16 %v2_14e98 to i32
  %v1_14e9c = and i32 %v3_14e98, 64
  %v2_14e9c = icmp eq i32 %v1_14e9c, 0
  br i1 %v2_14e9c, label %bb20, label %bb19

bb19:                                             ; preds = %dec_label_pc_14e98
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_14e98, %bb19
  %storemerge26 = phi i32 [ %v1_14ea0, %bb19 ], [ %v1_14e9c, %dec_label_pc_14e98 ]
  %v1_14ea4 = xor i1 %v2_14e9c, true
  call void @__pseudo_cond_branch(i1 %v1_14ea4, i32 ptrtoint (i32* @global_var_157d4.511 to i32))
  store i32 %storemerge26, i32* %sl.global-to-local, align 4
  %v0_14eac = load i32, i32* @r5, align 4
  %v1_14eac = add i32 %v0_14eac, 4
  %v2_14eac = inttoptr i32 %v1_14eac to i32*
  %v3_14eac = load i32, i32* %v2_14eac, align 4
  %v1_14eb0 = call i32 @function_115e0(i32 %v3_14eac)
  %v0_14eb8 = load i32, i32* @r6, align 4
  %v2_14ec4 = add i32 %v0_14eb8, 108
  %v3_14ec4 = inttoptr i32 %v2_14ec4 to i32*
  %v4_14ec4 = load i32, i32* %v3_14ec4, align 4
  store i32 %v4_14ec4, i32* @r7, align 4
  %v1_14ecc = load i32, i32* @r5, align 4
  %v2_14ecc = add i32 %v1_14ecc, 4
  %v3_14ecc = inttoptr i32 %v2_14ecc to i32*
  store i32 -1, i32* %v3_14ecc, align 4
  %v0_14ed4 = load i32, i32* @r6, align 4
  %v2_14ed4 = add i32 %v0_14ed4, 72
  %v3_14ed4 = inttoptr i32 %v2_14ed4 to i32*
  %v4_14ed4 = load i32, i32* %v3_14ed4, align 4
  %v1_14edc = icmp slt i32 %v1_14eb0, 0
  store i32 %v4_14ed4, i32* %stack_var_-80, align 4
  br i1 %v1_14edc, label %bb21, label %bb22

bb21:                                             ; preds = %bb20
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %bb22

bb22:                                             ; preds = %bb20, %bb21
  call void @__pseudo_branch(i32 %v4_14ed4)
  %v0_14f04 = load i32, i32* @r6, align 4
  %v2_14f04 = add i32 %v0_14f04, 16
  %v3_14f04 = inttoptr i32 %v2_14f04 to i32*
  %v4_14f04 = load i32, i32* %v3_14f04, align 4
  call void @__pseudo_branch(i32 %v4_14f04)
  %v0_14f14 = load i32, i32* @r6, align 4
  %v2_14f14 = add i32 %v0_14f14, 12
  %v3_14f14 = inttoptr i32 %v2_14f14 to i32*
  %v4_14f14 = load i32, i32* %v3_14f14, align 4
  %v1_14f18 = inttoptr i32 %v4_14f14 to i32*
  %v2_14f18 = load i32, i32* %v1_14f18, align 4
  %v1_14f20 = add i32 %v2_14f18, 1
  %v2_14f24 = add i32 %v0_14f14, 24
  %v3_14f24 = inttoptr i32 %v2_14f24 to i32*
  %v4_14f24 = load i32, i32* %v3_14f24, align 4
  store i32 %v4_14f24, i32* @r4, align 4
  store i32 %v1_14f20, i32* %v1_14f18, align 4
  call void @__pseudo_branch(i32 %v4_14f24)
  %v0_14f3c = load i32, i32* @r5, align 4
  %v1_14f3c = inttoptr i32 %v0_14f3c to i16*
  %v2_14f3c = load i16, i16* %v1_14f3c, align 2
  %v1_14f40 = and i16 %v2_14f3c, 24576
  %v1_14f44 = or i16 %v1_14f40, 48
  %v0_14f48 = load i32, i32* %sb.global-to-local, align 4
  %v2_14f48 = icmp eq i32 %v0_14f48, 0
  store i16 %v1_14f44, i16* %v1_14f3c, align 2
  br i1 %v2_14f48, label %.thread, label %bb23

bb23:                                             ; preds = %bb22
  br label %.thread

.thread:                                          ; preds = %bb22, %bb23
  %v2_14f5c = xor i1 %v2_14f48, true
  call void @__pseudo_cond_branch(i1 %v2_14f5c, i32 %v4_14f24)
  %v0_14f60 = load i32, i32* @r5, align 4
  %v1_14f60 = inttoptr i32 %v0_14f60 to i16*
  %v2_14f60 = load i16, i16* %v1_14f60, align 2
  %v1_14f64 = and i16 %v2_14f60, 16384
  %v2_14f64 = icmp eq i16 %v1_14f64, 0
  br i1 %v2_14f64, label %bb25, label %bb24

bb24:                                             ; preds = %.thread
  br label %bb25

bb25:                                             ; preds = %.thread, %bb24
  %v1_14f6c = xor i1 %v2_14f64, true
  call void @__pseudo_cond_branch(i1 %v1_14f6c, i32 ptrtoint (i32* @global_var_130a8.21 to i32))
  %v2_14f78 = load i32, i32* %stack_var_-80, align 4
  call void @__pseudo_branch(i32 %v2_14f78)
  call void @__pseudo_branch(i32 %v4_14f04)
  %v0_14f98 = load i32, i32* @r6, align 4
  %v2_14f98 = add i32 %v0_14f98, 48
  %v3_14f98 = inttoptr i32 %v2_14f98 to i32*
  %v4_14f98 = load i32, i32* %v3_14f98, align 4
  %v1_14f9c = inttoptr i32 %v4_14f98 to i32*
  %v2_14f9c = load i32, i32* %v1_14f9c, align 4
  %v1_14fa0 = add i32 %v2_14f9c, 1
  store i32 %v1_14fa0, i32* %v1_14f9c, align 4
  call void @__pseudo_branch(i32 %v4_14f24)
  %v0_14fb8 = call i32 @function_1564c()
  %v0_14fbc = load i32, i32* %sl.global-to-local, align 4
  %v2_14fc4 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_14fc4, i32* @r4, align 4
  store i32 %v6_14e38, i32* @r5, align 4
  store i32 %v9_14e38, i32* @r6, align 4
  store i32 %v12_14e38, i32* @r7, align 4
  ret i32 %v0_14fbc

; uselistorder directives
  uselistorder i1 %v2_14f64, { 1, 0 }
  uselistorder i32 %v4_14f24, { 1, 2, 0, 3 }
  uselistorder i32 %v4_14e3c, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 1, 0 }
  uselistorder i32 (i32)* @function_115e0, { 33, 28, 27, 32, 31, 26, 30, 29, 25, 24, 18, 23, 22, 21, 20, 19, 17, 16, 15, 14, 13, 12, 11, 10, 9, 1, 8, 7, 6, 5, 4, 3, 2, 0 }
  uselistorder label %bb25, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb22, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %dec_label_pc_14e98, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
}

define i32 @function_14fd0(i32 %arg1) local_unnamed_addr {
dec_label_pc_14fd0:
  %v0_14fd0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14fd0, label %bb, label %.thread5

bb:                                               ; preds = %dec_label_pc_14fd0
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_14fd0, %bb
  %v10_14fe8 = phi i32 [ %arg1, %dec_label_pc_14fd0 ], [ 0, %bb ]
  ret i32 %v10_14fe8

; uselistorder directives
  uselistorder label %.thread5, { 1, 0 }
}

define i32 @function_14fec() local_unnamed_addr {
dec_label_pc_14fec:
  store i32 0, i32* @r2, align 4
  store i32 -1, i32* @r3, align 4
  %v0_14ffc = call i32 @function_1500c()
  ret i32 %v0_14ffc
}

define i32 @function_1500c() local_unnamed_addr {
dec_label_pc_1500c:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_1500c = load i32, i32* @r4, align 4
  store i32 %v3_1500c, i32* %stack_var_-36, align 4
  %v6_1500c = load i32, i32* @r5, align 4
  %v9_1500c = load i32, i32* @r6, align 4
  %v18_1500c = load i32, i32* @sb, align 4
  %v24_1500c = load i32, i32* @fp, align 4
  %v0_15010 = load i32, i32* @r1, align 4
  %v1_15010 = inttoptr i32 %v0_15010 to i8*
  %v2_15010 = load i8, i8* %v1_15010, align 1
  %v3_15010 = zext i8 %v2_15010 to i32
  store i32 %v3_15010, i32* @ip, align 4
  %v7_15018 = icmp eq i8 %v2_15010, 114
  store i32 126992, i32* @fp, align 4
  %v2_15020 = ptrtoint i32* %stack_var_-72 to i32
  %v0_15024 = load i32, i32* @r0, align 4
  store i32 %v0_15024, i32* @r6, align 4
  %v0_15028 = load i32, i32* @r2, align 4
  store i32 %v0_15028, i32* @sb, align 4
  %v0_1502c = load i32, i32* @r3, align 4
  store i32 %v0_1502c, i32* @r5, align 4
  br i1 %v7_15018, label %dec_label_pc_15078, label %dec_label_pc_15034

dec_label_pc_15034:                               ; preds = %dec_label_pc_1500c
  %v7_15034 = icmp eq i8 %v2_15010, 119
  br i1 %v7_15034, label %bb, label %dec_label_pc_15040

bb:                                               ; preds = %dec_label_pc_15034
  store i32 577, i32* @r4, align 4
  br label %dec_label_pc_1507c

dec_label_pc_15040:                               ; preds = %dec_label_pc_15034
  %v7_15040 = icmp eq i8 %v2_15010, 97
  br i1 %v7_15040, label %bb32, label %dec_label_pc_1504c

bb32:                                             ; preds = %dec_label_pc_15040
  store i32 1089, i32* @r4, align 4
  br label %dec_label_pc_1507c

dec_label_pc_1504c:                               ; preds = %dec_label_pc_15040, %dec_label_pc_15100, %dec_label_pc_150d4
  %v0_1504c = call i32 @function_11a08()
  store i32 %v0_1504c, i32* %r0.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_15054 = load i32, i32* @sb, align 4
  %v2_15054 = icmp eq i32 %v0_15054, 0
  %v2_15058 = inttoptr i32 %v0_1504c to i32*
  store i32 22, i32* %v2_15058, align 4
  br i1 %v2_15054, label %dec_label_pc_152cc, label %dec_label_pc_15060

dec_label_pc_15060:                               ; preds = %dec_label_pc_15124._crit_edge, %dec_label_pc_1504c
  %v0_15060 = load i32, i32* @sb, align 4
  %v1_15060 = inttoptr i32 %v0_15060 to i16*
  %v2_15060 = load i16, i16* %v1_15060, align 2
  %v3_15060 = zext i16 %v2_15060 to i32
  store i32 %v3_15060, i32* %r3.global-to-local, align 4
  %v1_15064 = and i32 %v3_15060, 8192
  %v2_15064 = icmp eq i32 %v1_15064, 0
  br i1 %v2_15064, label %dec_label_pc_152cc, label %dec_label_pc_1506c

dec_label_pc_1506c:                               ; preds = %dec_label_pc_15060
  store i32 %v0_15060, i32* @r0, align 4
  %v0_15070 = call i32 @function_130a8()
  store i32 %v0_15070, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_152cc

dec_label_pc_15078:                               ; preds = %dec_label_pc_1500c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_1507c

dec_label_pc_1507c:                               ; preds = %bb, %bb32, %dec_label_pc_15078
  %v1_15094 = phi i32 [ 1089, %bb32 ], [ 577, %bb ], [ 1, %dec_label_pc_15078 ]
  %v1_1507c = add i32 %v0_15010, 1
  %v2_1507c = inttoptr i32 %v1_1507c to i8*
  %v3_1507c = load i8, i8* %v2_1507c, align 1
  %v7_15080 = icmp eq i8 %v3_1507c, 98
  %v1_1507c.v0_15010 = select i1 %v7_15080, i32 %v1_1507c, i32 %v0_15010
  store i32 %v1_1507c.v0_15010, i32* %r3.global-to-local, align 4
  %v1_1508c = add i32 %v1_1507c.v0_15010, 1
  %v2_1508c = inttoptr i32 %v1_1508c to i8*
  %v3_1508c = load i8, i8* %v2_1508c, align 1
  %v4_1508c = zext i8 %v3_1508c to i32
  store i32 %v4_1508c, i32* @r3, align 4
  %v7_15090 = icmp eq i8 %v3_1508c, 43
  br i1 %v7_15090, label %bb35, label %.thread3

bb35:                                             ; preds = %dec_label_pc_1507c
  store i32 %v1_15094, i32* @r3, align 4
  %v2_15098 = add nuw nsw i32 %v1_15094, 1
  store i32 %v2_15098, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_1507c, %bb35
  %v2_1509c = icmp eq i32 %v0_15028, 0
  br i1 %v2_1509c, label %dec_label_pc_150a4, label %dec_label_pc_150cc

dec_label_pc_150a4:                               ; preds = %.thread3
  store i32 80, i32* @r0, align 4
  %v0_150a8 = call i32 @function_1203c()
  store i32 %v0_150a8, i32* %r0.global-to-local, align 4
  store i32 %v0_150a8, i32* @sb, align 4
  %v3_150ac = icmp eq i32 %v0_150a8, 0
  br i1 %v3_150ac, label %dec_label_pc_152d0, label %dec_label_pc_150b4

dec_label_pc_150b4:                               ; preds = %dec_label_pc_150a4
  %v2_150b8 = add i32 %v0_150a8, 8
  %v3_150b8 = inttoptr i32 %v2_150b8 to i32*
  store i32 0, i32* %v3_150b8, align 4
  store i32 8192, i32* %r3.global-to-local, align 4
  %v2_150c0 = load i32, i32* @sb, align 4
  %v3_150c0 = inttoptr i32 %v2_150c0 to i16*
  store i16 8192, i16* %v3_150c0, align 2
  %v0_150c4 = load i32, i32* @sb, align 4
  %v1_150c4 = add i32 %v0_150c4, 56
  store i32 %v1_150c4, i32* @r0, align 4
  %v1_150c8 = call i32 @function_1537c(i32 %v1_150c4)
  store i32 %v1_150c8, i32* %r0.global-to-local, align 4
  %v0_150cc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_150cc

dec_label_pc_150cc:                               ; preds = %.thread3, %dec_label_pc_150b4
  %v0_15124 = phi i32 [ %v0_1502c, %.thread3 ], [ %v0_150cc.pre, %dec_label_pc_150b4 ]
  %v1_150cc = icmp slt i32 %v0_15124, 0
  br i1 %v1_150cc, label %dec_label_pc_15124, label %dec_label_pc_150d4

dec_label_pc_150d4:                               ; preds = %dec_label_pc_150cc
  %v0_150d8 = load i32, i32* @r4, align 4
  %v2_150d8 = and i32 %v0_150d8, ptrtoint (i32* @global_var_20003.520 to i32)
  %v1_150dc = or i32 %v2_150d8, 1
  store i32 %v1_150dc, i32* %r2.global-to-local, align 4
  %v0_150e0 = load i32, i32* @r6, align 4
  %v1_150e0 = add i32 %v0_150e0, 1
  %v2_150e4 = and i32 %v1_150e0, %v1_150dc
  store i32 %v2_150e4, i32* %r3.global-to-local, align 4
  %v9_150e8 = icmp eq i32 %v2_150e4, %v1_150dc
  %v1_150ec = load i32, i32* @sb, align 4
  %v2_150ec = add i32 %v1_150ec, 4
  %v3_150ec = inttoptr i32 %v2_150ec to i32*
  store i32 %v0_15124, i32* %v3_150ec, align 4
  br i1 %v9_150e8, label %dec_label_pc_150f4, label %dec_label_pc_1504c

dec_label_pc_150f4:                               ; preds = %dec_label_pc_150d4
  %v0_150f4 = load i32, i32* @r4, align 4
  %v1_150f4 = load i32, i32* @r6, align 4
  %v2_150f4 = sub i32 -1, %v1_150f4
  %v3_150f4 = and i32 %v0_150f4, %v2_150f4
  store i32 %v3_150f4, i32* @r3, align 4
  %v1_150f8 = and i32 %v3_150f4, 1024
  %v2_150f8 = icmp eq i32 %v1_150f8, 0
  br i1 %v2_150f8, label %dec_label_pc_15118, label %dec_label_pc_15100

dec_label_pc_15100:                               ; preds = %dec_label_pc_150f4
  %v0_15100 = load i32, i32* @r5, align 4
  store i32 %v0_15100, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1024, i32* %r2.global-to-local, align 4
  %v2_1510c = call i32 @function_11414(i32 %v0_15100, i32 4)
  store i32 %v2_1510c, i32* %r0.global-to-local, align 4
  %v2_15110 = icmp eq i32 %v2_1510c, 0
  br i1 %v2_15110, label %dec_label_pc_15100.dec_label_pc_15118_crit_edge, label %dec_label_pc_1504c

dec_label_pc_15100.dec_label_pc_15118_crit_edge:  ; preds = %dec_label_pc_15100
  %v0_15118.pre = load i32, i32* @r6, align 4
  %v0_1511c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15118

dec_label_pc_15118:                               ; preds = %dec_label_pc_15100.dec_label_pc_15118_crit_edge, %dec_label_pc_150f4
  %v0_1511c = phi i32 [ %v0_1511c.pre, %dec_label_pc_15100.dec_label_pc_15118_crit_edge ], [ %v0_150f4, %dec_label_pc_150f4 ]
  %v0_15118 = phi i32 [ %v0_15118.pre, %dec_label_pc_15100.dec_label_pc_15118_crit_edge ], [ %v1_150f4, %dec_label_pc_150f4 ]
  %v1_15118 = and i32 %v0_15118, 131072
  store i32 %v1_15118, i32* %r3.global-to-local, align 4
  %v2_1511c = or i32 %v1_15118, %v0_1511c
  store i32 %v2_1511c, i32* @r4, align 4
  br label %dec_label_pc_15148

dec_label_pc_15124:                               ; preds = %dec_label_pc_150cc
  %v7_15124 = icmp eq i32 %v0_15124, -1
  %v0_15130.pre = load i32, i32* @r4, align 4
  br i1 %v7_15124, label %dec_label_pc_15124._crit_edge, label %bb36

bb36:                                             ; preds = %dec_label_pc_15124
  %v2_15128 = or i32 %v0_15130.pre, ptrtoint (i32* @global_var_20000.521 to i32)
  store i32 %v2_15128, i32* @r4, align 4
  br label %dec_label_pc_15124._crit_edge

dec_label_pc_15124._crit_edge:                    ; preds = %dec_label_pc_15124, %bb36
  %v0_15130 = phi i32 [ %v2_15128, %bb36 ], [ %v0_15130.pre, %dec_label_pc_15124 ]
  %v0_1512c = load i32, i32* @r6, align 4
  store i32 %v0_1512c, i32* %r0.global-to-local, align 4
  store i32 %v0_15130, i32* %r1.global-to-local, align 4
  store i32 438, i32* @r2, align 4
  %v2_15138 = call i32 @function_111ec(i32 %v0_1512c, i32 %v0_15130)
  store i32 %v2_15138, i32* %r0.global-to-local, align 4
  %v1_1513c = icmp slt i32 %v2_15138, 0
  %v1_15140 = load i32, i32* @sb, align 4
  %v2_15140 = add i32 %v1_15140, 4
  %v3_15140 = inttoptr i32 %v2_15140 to i32*
  store i32 %v2_15138, i32* %v3_15140, align 4
  br i1 %v1_1513c, label %dec_label_pc_15060, label %.dec_label_pc_15148_crit_edge

.dec_label_pc_15148_crit_edge:                    ; preds = %dec_label_pc_15124._crit_edge
  %v0_1514c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15148

dec_label_pc_15148:                               ; preds = %.dec_label_pc_15148_crit_edge, %dec_label_pc_15118
  %v0_15164 = phi i32 [ %v0_1514c.pre, %.dec_label_pc_15148_crit_edge ], [ %v2_1511c, %dec_label_pc_15118 ]
  %v0_15148 = load i32, i32* @sb, align 4
  %v1_15148 = inttoptr i32 %v0_15148 to i16*
  %v2_15148 = load i16, i16* %v1_15148, align 2
  %v3_15148 = zext i16 %v2_15148 to i32
  %v1_1514c = urem i32 %v0_15164, 4
  %v1_15150 = and i32 %v0_15164, 1024
  %v1_15154 = and i32 %v3_15148, 8192
  %v1_15158 = add nuw nsw i32 %v1_1514c, 1
  %v2_1515c = or i32 %v1_15154, %v1_15150
  store i32 %v2_1515c, i32* %r3.global-to-local, align 4
  %v1_15160 = xor i32 %v1_15158, 3
  store i32 %v1_15160, i32* %r1.global-to-local, align 4
  %v1_15164 = and i32 %v0_15164, ptrtoint (i32* @global_var_20000.521 to i32)
  store i32 %v1_15164, i32* %r2.global-to-local, align 4
  %v2_15164 = icmp eq i32 %v1_15164, 0
  %v1_15168 = add i32 %v0_15148, 4
  %v2_15168 = inttoptr i32 %v1_15168 to i32*
  %v3_15168 = load i32, i32* %v2_15168, align 4
  store i32 %v3_15168, i32* @r5, align 4
  br i1 %v2_15164, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_15148
  store i32 32768, i32* %r2.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_15148, %bb37
  %v0_15174 = phi i32 [ 0, %dec_label_pc_15148 ], [ 32768, %bb37 ]
  %v4_15170 = mul nuw nsw i32 %v1_15160, 16
  %v5_15170 = or i32 %v2_1515c, %v4_15170
  store i32 %v5_15170, i32* %r3.global-to-local, align 4
  %v2_15174 = or i32 %v0_15174, %v5_15170
  store i32 %v2_15174, i32* %r2.global-to-local, align 4
  %v8_15178 = icmp eq i32 %v3_15168, 2147483647
  %v1_1517c = trunc i32 %v2_15174 to i16
  store i16 %v1_1517c, i16* %v1_15148, align 2
  br i1 %v8_15178, label %dec_label_pc_151ac, label %dec_label_pc_15184

dec_label_pc_15184:                               ; preds = %bb38
  %v0_15184 = call i32 @function_11a08()
  store i32 %v0_15184, i32* @r4, align 4
  %v0_1518c = load i32, i32* @r5, align 4
  store i32 %v0_1518c, i32* @r0, align 4
  %v1_15190 = inttoptr i32 %v0_15184 to i32*
  %v2_15190 = load i32, i32* %v1_15190, align 4
  store i32 %v2_15190, i32* @r5, align 4
  %v1_15194 = call i32 @function_1637c(i32 %v0_1518c)
  store i32 %v1_15194, i32* %r0.global-to-local, align 4
  %v2_15198 = icmp eq i32 %v1_15194, 0
  br i1 %v2_15198, label %.thread5, label %bb39

bb39:                                             ; preds = %dec_label_pc_15184
  %v1_1519c = load i32, i32* @sb, align 4
  %v2_1519c = inttoptr i32 %v1_1519c to i16*
  %v3_1519c = load i16, i16* %v2_1519c, align 2
  %v4_1519c = zext i16 %v3_1519c to i32
  %v2_151a0 = or i32 %v4_1519c, 256
  store i32 %v2_151a0, i32* %r3.global-to-local, align 4
  %v2_151a4 = trunc i32 %v2_151a0 to i16
  store i16 %v2_151a4, i16* %v2_1519c, align 2
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_15184, %bb39
  %v0_151a8 = load i32, i32* @r5, align 4
  %v1_151a8 = load i32, i32* @r4, align 4
  %v2_151a8 = inttoptr i32 %v1_151a8 to i32*
  store i32 %v0_151a8, i32* %v2_151a8, align 4
  br label %dec_label_pc_151ac

dec_label_pc_151ac:                               ; preds = %bb38, %.thread5
  %v0_151ac = load i32, i32* @sb, align 4
  %v1_151ac = add i32 %v0_151ac, 8
  %v2_151ac = inttoptr i32 %v1_151ac to i32*
  %v3_151ac = load i32, i32* %v2_151ac, align 4
  store i32 %v3_151ac, i32* %r3.global-to-local, align 4
  %v2_151b0 = icmp eq i32 %v3_151ac, 0
  br i1 %v2_151b0, label %dec_label_pc_151b8, label %bb40

dec_label_pc_151b8:                               ; preds = %dec_label_pc_151ac
  store i32 4096, i32* @r0, align 4
  %v0_151bc = call i32 @function_1203c()
  store i32 %v0_151bc, i32* %r0.global-to-local, align 4
  %v2_151c0 = icmp eq i32 %v0_151bc, 0
  %v1_151d0.pre = load i32, i32* @sb, align 4
  br i1 %v2_151c0, label %.thread9, label %.thread8

.thread8:                                         ; preds = %dec_label_pc_151b8
  %v2_151c4 = inttoptr i32 %v1_151d0.pre to i16*
  %v3_151c4 = load i16, i16* %v2_151c4, align 2
  %v4_151c4 = zext i16 %v3_151c4 to i32
  %v2_151c8 = add i32 %v0_151bc, 4096
  store i32 %v2_151c8, i32* %r2.global-to-local, align 4
  %v2_151cc = or i32 %v4_151c4, 16384
  store i32 %v2_151cc, i32* %r3.global-to-local, align 4
  %v2_151d0 = add i32 %v1_151d0.pre, 8
  %v3_151d0 = inttoptr i32 %v2_151d0 to i32*
  store i32 %v0_151bc, i32* %v3_151d0, align 4
  %v1_151d4 = load i32, i32* %r2.global-to-local, align 4
  %v2_151d4 = load i32, i32* @sb, align 4
  %v3_151d4 = add i32 %v2_151d4, 12
  %v4_151d4 = inttoptr i32 %v3_151d4 to i32*
  store i32 %v1_151d4, i32* %v4_151d4, align 4
  %v1_151d8 = load i32, i32* %r3.global-to-local, align 4
  %v2_151d8 = trunc i32 %v1_151d8 to i16
  %v3_151d8 = load i32, i32* @sb, align 4
  %v4_151d8 = inttoptr i32 %v3_151d8 to i16*
  store i16 %v2_151d8, i16* %v4_151d8, align 2
  br label %bb40

.thread9:                                         ; preds = %dec_label_pc_151b8
  %v2_151d019 = add i32 %v1_151d0.pre, 8
  %v3_151d020 = inttoptr i32 %v2_151d019 to i32*
  store i32 0, i32* %v3_151d020, align 4
  %v2_151dc = load i32, i32* @sb, align 4
  %v3_151dc = add i32 %v2_151dc, 12
  %v4_151dc = inttoptr i32 %v3_151dc to i32*
  store i32 0, i32* %v4_151dc, align 4
  br label %bb40

bb40:                                             ; preds = %.thread8, %dec_label_pc_151ac, %.thread9
  store i32 56, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_151e8 = load i32, i32* @fp, align 4
  %v2_151e8 = add i32 %v0_151e8, 56
  %v3_151e8 = inttoptr i32 %v2_151e8 to i32*
  %v4_151e8 = load i32, i32* %v3_151e8, align 4
  store i32 %v4_151e8, i32* %r3.global-to-local, align 4
  %v2_151ec = load i32, i32* @sb, align 4
  %v3_151ec = add i32 %v2_151ec, 2
  %v4_151ec = inttoptr i32 %v3_151ec to i8*
  store i8 0, i8* %v4_151ec, align 1
  %v0_151f0 = load i32, i32* @sb, align 4
  %v1_151f0 = inttoptr i32 %v0_151f0 to i16*
  %v2_151f0 = load i16, i16* %v1_151f0, align 2
  %v3_151f0 = zext i16 %v2_151f0 to i32
  store i32 %v3_151f0, i32* %r2.global-to-local, align 4
  %v0_151f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_151f4 = inttoptr i32 %v0_151f4 to i32*
  %v2_151f4 = load i32, i32* %v1_151f4, align 4
  store i32 %v2_151f4, i32* %r1.global-to-local, align 4
  %v1_151f8 = add i32 %v0_151f0, 8
  %v2_151f8 = inttoptr i32 %v1_151f8 to i32*
  %v3_151f8 = load i32, i32* %v2_151f8, align 4
  store i32 %v3_151f8, i32* %r3.global-to-local, align 4
  %v1_151fc = and i32 %v3_151f0, 8192
  %v2_151fc = icmp eq i32 %v1_151fc, 0
  %v2_15200 = add i32 %v0_151f0, 20
  %v3_15200 = inttoptr i32 %v2_15200 to i32*
  store i32 %v3_151f8, i32* %v3_15200, align 4
  %v0_15204 = load i32, i32* %r0.global-to-local, align 4
  %v1_15204 = load i32, i32* @sb, align 4
  %v2_15204 = add i32 %v1_15204, 44
  %v3_15204 = inttoptr i32 %v2_15204 to i32*
  store i32 %v0_15204, i32* %v3_15204, align 4
  %v0_15208 = load i32, i32* %r1.global-to-local, align 4
  %v1_15208 = load i32, i32* @sb, align 4
  %v2_15208 = add i32 %v1_15208, 52
  %v3_15208 = inttoptr i32 %v2_15208 to i32*
  store i32 %v0_15208, i32* %v3_15208, align 4
  %v0_1520c = load i32, i32* %r3.global-to-local, align 4
  %v1_1520c = load i32, i32* @sb, align 4
  %v2_1520c = add i32 %v1_1520c, 24
  %v3_1520c = inttoptr i32 %v2_1520c to i32*
  store i32 %v0_1520c, i32* %v3_1520c, align 4
  %v0_15210 = load i32, i32* %r3.global-to-local, align 4
  %v1_15210 = load i32, i32* @sb, align 4
  %v2_15210 = add i32 %v1_15210, 28
  %v3_15210 = inttoptr i32 %v2_15210 to i32*
  store i32 %v0_15210, i32* %v3_15210, align 4
  %v0_15214 = load i32, i32* %r3.global-to-local, align 4
  %v1_15214 = load i32, i32* @sb, align 4
  %v2_15214 = add i32 %v1_15214, 16
  %v3_15214 = inttoptr i32 %v2_15214 to i32*
  store i32 %v0_15214, i32* %v3_15214, align 4
  br i1 %v2_151fc, label %dec_label_pc_152d0, label %dec_label_pc_1521c

dec_label_pc_1521c:                               ; preds = %bb40
  store i32 36, i32* %r3.global-to-local, align 4
  %v0_15220 = load i32, i32* @fp, align 4
  %v2_15220 = add i32 %v0_15220, 36
  %v3_15220 = inttoptr i32 %v2_15220 to i32*
  %v4_15220 = load i32, i32* %v3_15220, align 4
  store i32 %v4_15220, i32* %r8.global-to-local, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  %v2_15228 = add i32 %v0_15220, 108
  %v3_15228 = inttoptr i32 %v2_15228 to i32*
  %v4_15228 = load i32, i32* %v3_15228, align 4
  store i32 %v4_15228, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_15230 = ptrtoint i32* %stack_var_-56 to i32
  %v2_15234 = add i32 %v0_15220, 72
  %v3_15234 = inttoptr i32 %v2_15234 to i32*
  %v4_15234 = load i32, i32* %v3_15234, align 4
  store i32 %v4_15220, i32* %r1.global-to-local, align 4
  store i32 %v4_15228, i32* %r2.global-to-local, align 4
  store i32 %v2_15230, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15234)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_15250 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15250, i32* %r0.global-to-local, align 4
  %v0_15254 = load i32, i32* @fp, align 4
  %v2_15254 = add i32 %v0_15254, 16
  %v3_15254 = inttoptr i32 %v2_15254 to i32*
  %v4_15254 = load i32, i32* %v3_15254, align 4
  call void @__pseudo_branch(i32 %v4_15254)
  store i32 96, i32* %r3.global-to-local, align 4
  %v0_15264 = load i32, i32* @fp, align 4
  %v2_15264 = add i32 %v0_15264, 96
  %v3_15264 = inttoptr i32 %v2_15264 to i32*
  %v4_15264 = load i32, i32* %v3_15264, align 4
  store i32 %v4_15264, i32* %r4.global-to-local, align 4
  %v0_15268 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_15268, i32* %r1.global-to-local, align 4
  store i32 %v4_15264, i32* %r2.global-to-local, align 4
  store i32 %v2_15020, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15234)
  store i32 %v4_15264, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15254)
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_1528c = load i32, i32* @fp, align 4
  %v2_1528c = add i32 %v0_1528c, 44
  %v3_1528c = inttoptr i32 %v2_1528c to i32*
  %v4_1528c = load i32, i32* %v3_1528c, align 4
  store i32 %v4_1528c, i32* @ip, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v1_15294 = inttoptr i32 %v4_1528c to i32*
  %v2_15294 = load i32, i32* %v1_15294, align 4
  store i32 %v2_15294, i32* %r2.global-to-local, align 4
  store i32 %v2_15020, i32* %r0.global-to-local, align 4
  %v1_1529c = load i32, i32* @sb, align 4
  %v2_1529c = add i32 %v1_1529c, 32
  %v3_1529c = inttoptr i32 %v2_1529c to i32*
  store i32 %v2_15294, i32* %v3_1529c, align 4
  %v0_152a0 = load i32, i32* @fp, align 4
  %v1_152a0 = load i32, i32* %r3.global-to-local, align 4
  %v2_152a0 = add i32 %v1_152a0, %v0_152a0
  %v3_152a0 = inttoptr i32 %v2_152a0 to i32*
  %v4_152a0 = load i32, i32* %v3_152a0, align 4
  store i32 %v4_152a0, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_152a8 = load i32, i32* @sb, align 4
  %v1_152a8 = load i32, i32* @ip, align 4
  %v2_152a8 = inttoptr i32 %v1_152a8 to i32*
  store i32 %v0_152a8, i32* %v2_152a8, align 4
  call void @__pseudo_branch(i32 %v4_152a0)
  store i32 %v2_15230, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_152a0)
  br label %dec_label_pc_152d0

dec_label_pc_152cc:                               ; preds = %dec_label_pc_15060, %dec_label_pc_1504c, %dec_label_pc_1506c
  store i32 0, i32* @sb, align 4
  br label %dec_label_pc_152d0

dec_label_pc_152d0:                               ; preds = %bb40, %dec_label_pc_150a4, %dec_label_pc_1521c, %dec_label_pc_152cc
  %v0_152d0 = load i32, i32* @sb, align 4
  store i32 %v0_152d0, i32* %r0.global-to-local, align 4
  %v2_152d8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_152d8, i32* %r4.global-to-local, align 4
  store i32 %v6_1500c, i32* @r5, align 4
  store i32 %v9_1500c, i32* @r6, align 4
  store i32 %v18_1500c, i32* @sb, align 4
  store i32 %v24_1500c, i32* @fp, align 4
  ret i32 %v0_152d0

; uselistorder directives
  uselistorder i32 %v1_151d0.pre, { 2, 1, 0 }
  uselistorder i32 %v0_15164, { 1, 2, 0 }
  uselistorder i32 %v0_15130, { 1, 0 }
  uselistorder i32 %v1_150f4, { 1, 0 }
  uselistorder i32 %v0_150f4, { 1, 0 }
  uselistorder i32 %v1_150dc, { 1, 0, 2 }
  uselistorder i32 %v1_15094, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 24, 25 }
  uselistorder i32* %r0.global-to-local, { 0, 2, 1, 4, 3, 5, 6, 7, 8, 9, 10, 12, 11, 14, 13, 15, 16, 17, 18 }
  uselistorder i32 16384, { 52, 0, 53, 39, 70, 40, 71, 41, 72, 42, 73, 43, 74, 44, 75, 18, 76, 17, 66, 3, 54, 37, 55, 4, 56, 5, 57, 6, 58, 38, 59, 7, 60, 8, 61, 9, 62, 10, 63, 11, 64, 12, 65, 36, 67, 13, 68, 14, 69, 45, 77, 15, 78, 16, 79, 19, 87, 46, 88, 22, 80, 21, 81, 48, 82, 49, 83, 20, 84, 47, 85, 86, 23, 89, 24, 90, 25, 91, 50, 92, 26, 1, 27, 93, 28, 94, 30, 95, 29, 96, 32, 97, 31, 98, 51, 99, 33, 2, 34, 100, 35, 101 }
  uselistorder i32 4096, { 8, 9, 10, 1, 0, 2, 17, 3, 11, 4, 12, 13, 6, 14, 5, 7, 15, 16 }
  uselistorder i32 32768, { 1, 4, 2, 0, 3 }
  uselistorder i32 (i32, i32)* @function_111ec, { 8, 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_11414, { 16, 0, 5, 13, 12, 15, 14, 9, 8, 11, 10, 7, 6, 4, 3, 2, 1 }
  uselistorder i32 1024, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 ()* @function_1203c, { 49, 48, 8, 5, 0, 4, 1, 2, 3, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 7, 6 }
  uselistorder i32 80, { 5, 2, 3, 4, 0, 1, 6 }
  uselistorder i8 43, { 2, 0, 1 }
  uselistorder i32 ()* @function_130a8, { 12, 11, 7, 6, 0, 5, 1, 4, 3, 2, 10, 9, 8 }
  uselistorder i32* @fp, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 123, 111, 112, 113, 114, 115, 117, 116, 118, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 20, 17, 18, 19, 21, 22, 23, 24, 25, 37, 36, 42, 43, 38, 39, 40, 41, 50, 51, 52, 53, 54, 55, 56, 57, 58, 44, 45, 46, 47, 48, 49, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 103, 104, 106, 107, 108, 109, 110, 119, 120, 121, 122, 70, 71, 72, 73 }
  uselistorder i32* @sb, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 126, 127, 129, 38, 39, 40, 41, 42, 43, 44, 45, 33, 34, 35, 36, 37, 50, 51, 46, 47, 48, 49, 53, 54, 55, 56, 57, 58, 59, 52, 1, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 130, 131, 132, 133, 134, 135, 70, 71, 72, 73 }
  uselistorder label %dec_label_pc_152d0, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_152cc, { 2, 0, 1 }
  uselistorder label %bb40, { 2, 0, 1 }
  uselistorder label %dec_label_pc_151ac, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_15124._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_150cc, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_1507c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1504c, { 1, 2, 0 }
}

define i32 @function_152e4(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_152e4:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v0_152e4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_152e4, label %bb, label %.thread10

bb:                                               ; preds = %dec_label_pc_152e4
  %v1_152ec = load i32, i32* %r2.global-to-local, align 4
  %v2_152ec = load i32, i32* %r3.global-to-local, align 4
  %v3_152ec = and i32 %v2_152ec, %v1_152ec
  %v2_152f0 = trunc i32 %v3_152ec to i16
  %v4_152f0 = inttoptr i32 %v3_152ec to i16*
  store i16 %v2_152f0, i16* %v4_152f0, align 2
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_152e4, %bb
  %v0_15318 = call i32 @function_11a08()
  store i32 %v0_15318, i32* @r5, align 4
  store i32 0, i32* @r0, align 4
  %v1_15324 = inttoptr i32 %v0_15318 to i32*
  %v2_15324 = load i32, i32* %v1_15324, align 4
  store i32 %v2_15324, i32* @r6, align 4
  %v1_15328 = call i32 @function_1637c(i32 0)
  %v2_15330 = icmp eq i32 %v1_15328, 0
  store i32 126992, i32* @r4, align 4
  br i1 %v2_15330, label %bb23, label %.thread13

bb23:                                             ; preds = %.thread10
  store i32 304, i32* %r2.global-to-local, align 4
  %v5_1533c = load i16, i16* inttoptr (i32 127296 to i16*), align 64
  %v7_1533c = zext i16 %v5_1533c to i32
  %v2_15340 = xor i32 %v7_1533c, 256
  store i32 %v2_15340, i32* @r3, align 4
  %v2_15344 = trunc i32 %v2_15340 to i16
  store i16 %v2_15344, i16* inttoptr (i32 127296 to i16*), align 64
  br label %.thread13

.thread13:                                        ; preds = %.thread10, %bb23
  store i32 1, i32* @r0, align 4
  %v1_1534c = call i32 @function_1637c(i32 1)
  %v2_15350 = icmp eq i32 %v1_1534c, 0
  br i1 %v2_15350, label %bb24, label %.thread17

bb24:                                             ; preds = %.thread13
  %v1_15358 = load i32, i32* @r4, align 4
  %v3_15358 = add i32 %v1_15358, 304
  store i32 %v3_15358, i32* %r2.global-to-local, align 4
  %v2_1535c = add i32 %v1_15358, 384
  %v3_1535c = inttoptr i32 %v2_1535c to i16*
  %v4_1535c = load i16, i16* %v3_1535c, align 2
  %v5_1535c = zext i16 %v4_1535c to i32
  %v2_15360 = xor i32 %v5_1535c, 256
  store i32 %v2_15360, i32* %r3.global-to-local, align 4
  %v2_15364 = trunc i32 %v2_15360 to i16
  store i16 %v2_15364, i16* %v3_1535c, align 2
  br label %.thread17

.thread17:                                        ; preds = %.thread13, %bb24
  %v0_15368 = load i32, i32* @r6, align 4
  %v1_15368 = load i32, i32* @r5, align 4
  %v2_15368 = inttoptr i32 %v1_15368 to i32*
  store i32 %v0_15368, i32* %v2_15368, align 4
  ret i32 %v1_1534c

; uselistorder directives
  uselistorder i32 %v3_152ec, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 384, { 0, 4, 1, 2, 3, 5, 6, 7, 8, 9 }
  uselistorder i32 (i32)* @function_1637c, { 2, 1, 0 }
  uselistorder label %.thread17, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %.thread10, { 1, 0 }
}

define i32 @function_1537c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1537c:
  store i32 126992, i32* @r3, align 4
  store i32 ptrtoint (i32* @global_var_16f80.536 to i32), i32* @r1, align 4
  store i32 24, i32* @r2, align 4
  %v0_15398 = call i32 @function_11b10()
  ret i32 %v0_15398
}

define i32 @function_15484(i32 %arg1) local_unnamed_addr {
dec_label_pc_15484:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15484 = load i32, i32* @r4, align 4
  store i32 %v3_15484, i32* %stack_var_-8, align 4
  %v1_15488 = add i32 %arg1, 8
  %v2_15488 = inttoptr i32 %v1_15488 to i32*
  %v3_15488 = load i32, i32* %v2_15488, align 4
  %v1_1548c = add i32 %arg1, 16
  %v2_1548c = inttoptr i32 %v1_1548c to i32*
  %v3_1548c = load i32, i32* %v2_1548c, align 4
  %v9_15490 = icmp eq i32 %v3_1548c, %v3_15488
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br i1 %v9_15490, label %bb3, label %bb

bb:                                               ; preds = %dec_label_pc_15484
  store i32 %v3_15488, i32* %v2_1548c, align 4
  br label %bb3

bb3:                                              ; preds = %dec_label_pc_15484, %bb
  %v1_1549c = xor i1 %v9_15490, true
  call void @__pseudo_cond_branch(i1 %v1_1549c, i32 ptrtoint (i32* @global_var_16768.537 to i32))
  %v0_154a0 = load i32, i32* %r4.global-to-local, align 4
  %v1_154a0 = add i32 %v0_154a0, 8
  %v2_154a0 = inttoptr i32 %v1_154a0 to i32*
  %v3_154a0 = load i32, i32* %v2_154a0, align 4
  %v1_154a4 = add i32 %v0_154a0, 16
  %v2_154a4 = inttoptr i32 %v1_154a4 to i32*
  %v3_154a4 = load i32, i32* %v2_154a4, align 4
  %v2_154a8 = sub i32 %v3_154a4, %v3_154a0
  %v2_154ac = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_154ac, i32* @r4, align 4
  ret i32 %v2_154a8

; uselistorder directives
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @function_154b4(i32 %arg1) local_unnamed_addr {
dec_label_pc_154b4:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_154b4 = load i32, i32* @r4, align 4
  store i32 %v3_154b4, i32* %stack_var_-16, align 4
  %v6_154b4 = load i32, i32* @r5, align 4
  %v12_154b4 = load i32, i32* @lr, align 4
  %v1_154b8 = add i32 %arg1, 52
  %v2_154b8 = inttoptr i32 %v1_154b8 to i32*
  %v3_154b8 = load i32, i32* %v2_154b8, align 4
  %v2_154c0 = icmp eq i32 %v3_154b8, 0
  store i32 %arg1, i32* @r5, align 4
  store i32 126992, i32* %r6.global-to-local, align 4
  br i1 %v2_154c0, label %dec_label_pc_154f8, label %dec_label_pc_154d4

dec_label_pc_154d4:                               ; preds = %dec_label_pc_154b4
  %v1_154d4 = add i32 %arg1, 16
  %v2_154d4 = inttoptr i32 %v1_154d4 to i32*
  %v3_154d4 = load i32, i32* %v2_154d4, align 4
  %v1_154d8 = add i32 %arg1, 24
  %v2_154d8 = inttoptr i32 %v1_154d8 to i32*
  %v3_154d8 = load i32, i32* %v2_154d8, align 4
  %v3_154dc = icmp ult i32 %v3_154d4, %v3_154d8
  br i1 %v3_154dc, label %.thread, label %dec_label_pc_154ec

.thread:                                          ; preds = %dec_label_pc_154d4
  %v2_154e0 = inttoptr i32 %v3_154d4 to i8*
  %v3_154e0 = load i8, i8* %v2_154e0, align 1
  %v4_154e0 = zext i8 %v3_154e0 to i32
  store i32 %v4_154e0, i32* %r4.global-to-local, align 4
  %v6_154e0 = add i32 %v3_154d4, 1
  store i32 %v6_154e0, i32* %v2_154d4, align 4
  br label %dec_label_pc_1556c

dec_label_pc_154ec:                               ; preds = %dec_label_pc_154d4
  %v1_154ec = inttoptr i32 %arg1 to i16*
  %v2_154ec = call i32 @function_159e0(i16* %v1_154ec)
  store i32 %v2_154ec, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1556c

dec_label_pc_154f8:                               ; preds = %dec_label_pc_154b4
  %v1_154fc = add i32 %arg1, 56
  store i32 %v1_154fc, i32* @r4, align 4
  %v4_15510 = load i32, i32* inttoptr (i32 127064 to i32*), align 8
  call void @__pseudo_branch(i32 %v4_15510)
  %v0_15524 = load i32, i32* %r6.global-to-local, align 4
  %v2_15524 = add i32 %v0_15524, 16
  %v3_15524 = inttoptr i32 %v2_15524 to i32*
  %v4_15524 = load i32, i32* %v3_15524, align 4
  store i32 87344, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_15524)
  %v0_15530 = load i32, i32* @r5, align 4
  %v1_15530 = add i32 %v0_15530, 16
  %v2_15530 = inttoptr i32 %v1_15530 to i32*
  %v3_15530 = load i32, i32* %v2_15530, align 4
  %v1_15534 = add i32 %v0_15530, 24
  %v2_15534 = inttoptr i32 %v1_15534 to i32*
  %v3_15534 = load i32, i32* %v2_15534, align 4
  %v3_15538 = icmp ult i32 %v3_15530, %v3_15534
  br i1 %v3_15538, label %.thread2, label %dec_label_pc_15548

.thread2:                                         ; preds = %dec_label_pc_154f8
  %v2_1553c = inttoptr i32 %v3_15530 to i8*
  %v3_1553c = load i8, i8* %v2_1553c, align 1
  %v4_1553c = zext i8 %v3_1553c to i32
  store i32 %v4_1553c, i32* %r4.global-to-local, align 4
  %v6_1553c = add i32 %v3_15530, 1
  store i32 %v6_1553c, i32* %v2_15530, align 4
  br label %dec_label_pc_15554

dec_label_pc_15548:                               ; preds = %dec_label_pc_154f8
  %v1_1554c = inttoptr i32 %v0_15530 to i16*
  %v2_1554c = call i32 @function_159e0(i16* %v1_1554c)
  store i32 %v2_1554c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15554

dec_label_pc_15554:                               ; preds = %.thread2, %dec_label_pc_15548
  %v0_15560 = load i32, i32* %r6.global-to-local, align 4
  %v2_15560 = add i32 %v0_15560, 24
  %v3_15560 = inttoptr i32 %v2_15560 to i32*
  %v4_15560 = load i32, i32* %v3_15560, align 4
  store i32 %v4_15560, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_15560)
  br label %dec_label_pc_1556c

dec_label_pc_1556c:                               ; preds = %.thread, %dec_label_pc_154ec, %dec_label_pc_15554
  %v0_1556c = load i32, i32* %r4.global-to-local, align 4
  %v2_15574 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15574, i32* @r4, align 4
  store i32 %v6_154b4, i32* @r5, align 4
  store i32 %v12_154b4, i32* @lr, align 4
  ret i32 %v0_1556c

; uselistorder directives
  uselistorder i32 %v3_15530, { 1, 0, 2 }
  uselistorder i32 %v3_154d4, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 5, 4, 3, 0, 2 }
  uselistorder label %dec_label_pc_1556c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15554, { 1, 0 }
}

define i32 @function_15580(i32 %arg1) local_unnamed_addr {
dec_label_pc_15580:
  %v0_15580 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15580, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_15580
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_15580, %bb
  %v10_1558c = phi i32 [ %arg1, %dec_label_pc_15580 ], [ 0, %bb ]
  ret i32 %v10_1558c

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_15590(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_15590:
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_15590 = load i32, i32* @r4, align 4
  store i32 %v3_15590, i32* %stack_var_-28, align 4
  %v6_15590 = load i32, i32* @r5, align 4
  %v9_15590 = load i32, i32* @r6, align 4
  %v12_15590 = load i32, i32* @r7, align 4
  %v21_15590 = load i32, i32* @lr, align 4
  %v1_15594 = add i32 %arg3, 52
  %v2_15594 = inttoptr i32 %v1_15594 to i32*
  %v3_15594 = load i32, i32* %v2_15594, align 4
  %v1_1559c = sub i32 1, %v3_15594
  %v2_1559c = icmp ult i32 %v3_15594, 2
  br i1 %v2_1559c, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_15590
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_15590, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_1559c, %dec_label_pc_15590 ]
  %v0_155a4 = phi i32 [ 0, %bb ], [ %v1_1559c, %dec_label_pc_15590 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_155a4 = icmp eq i32 %v0_155a4, 0
  store i32 126992, i32* @r5, align 4
  store i32 %arg3, i32* @r6, align 4
  store i32 %arg1, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  br i1 %v2_155a4, label %dec_label_pc_155f8, label %dec_label_pc_155c0

dec_label_pc_155c0:                               ; preds = %bb16
  %v1_155c4 = add i32 %arg3, 56
  store i32 %v1_155c4, i32* @r4, align 4
  %v4_155d8 = load i32, i32* inttoptr (i32 127064 to i32*), align 8
  call void @__pseudo_branch(i32 %v4_155d8)
  %v0_155ec = load i32, i32* @r5, align 4
  %v2_155ec = add i32 %v0_155ec, 16
  %v3_155ec = inttoptr i32 %v2_155ec to i32*
  %v4_155ec = load i32, i32* %v3_155ec, align 4
  store i32 %v4_155ec, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_155f8.547 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_155ec)
  %v0_155f8.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_155fc.pre = load i32, i32* @r7, align 4
  %v0_15600.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_155f8

dec_label_pc_155f8:                               ; preds = %bb16, %dec_label_pc_155c0
  %v0_15600 = phi i32 [ %arg3, %bb16 ], [ %v0_15600.pre, %dec_label_pc_155c0 ]
  %v0_155fc = phi i32 [ %arg2, %bb16 ], [ %v0_155fc.pre, %dec_label_pc_155c0 ]
  %v0_155f8 = phi i32 [ %arg1, %bb16 ], [ %v0_155f8.pre, %dec_label_pc_155c0 ]
  %v3_15604 = inttoptr i32 %v0_155f8 to i8*
  %v4_15604 = call i32 @function_15b0c(i8* %v3_15604, i32 %v0_155fc, i32 %v0_15600)
  %v0_15608 = load i32, i32* %sl.global-to-local, align 4
  %v2_15608 = icmp eq i32 %v0_15608, 0
  store i32 %v4_15604, i32* %r4.global-to-local, align 4
  br i1 %v2_15608, label %dec_label_pc_155f8..thread3_crit_edge, label %bb17

dec_label_pc_155f8..thread3_crit_edge:            ; preds = %dec_label_pc_155f8
  %v0_15624.pre = load i32, i32* @ip, align 4
  br label %.thread3

bb17:                                             ; preds = %dec_label_pc_155f8
  %v1_1561c = load i32, i32* @r5, align 4
  %v3_1561c = add i32 %v1_1561c, 24
  %v4_1561c = inttoptr i32 %v3_1561c to i32*
  %v5_1561c = load i32, i32* %v4_1561c, align 4
  store i32 %v5_1561c, i32* @ip, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_155f8..thread3_crit_edge, %bb17
  %v0_15624 = phi i32 [ %v0_15624.pre, %dec_label_pc_155f8..thread3_crit_edge ], [ %v5_1561c, %bb17 ]
  %v2_15624 = xor i1 %v2_15608, true
  call void @__pseudo_cond_branch(i1 %v2_15624, i32 %v0_15624)
  %v0_15628 = load i32, i32* %r4.global-to-local, align 4
  %v2_15630 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_15630, i32* %r4.global-to-local, align 4
  store i32 %v6_15590, i32* @r5, align 4
  store i32 %v9_15590, i32* @r6, align 4
  store i32 %v12_15590, i32* @r7, align 4
  store i32 %v21_15590, i32* @lr, align 4
  ret i32 %v0_15628

; uselistorder directives
  uselistorder i32 %v3_15594, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0 }
  uselistorder i32 52, { 9, 10, 11, 12, 13, 3, 14, 7, 8, 4, 16, 17, 1, 18, 0, 19, 20, 5, 6, 15, 2 }
  uselistorder i32 %arg3, { 0, 3, 1, 2 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_155f8, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_1563c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1563c:
  %v0_1563c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1563c, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_1563c
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_1563c, %bb
  %v10_15648 = phi i32 [ %arg1, %dec_label_pc_1563c ], [ 0, %bb ]
  ret i32 %v10_15648

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_1564c() local_unnamed_addr {
dec_label_pc_1564c:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_1564c = load i32, i32* @r4, align 4
  store i32 %v3_1564c, i32* %stack_var_-24, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %r6.global-to-local, align 4
  %v4_1565c = load i32, i32* inttoptr (i32 127028 to i32*), align 4
  store i32 %v4_1565c, i32* %r8.global-to-local, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_15664 = load i32, i32* inttoptr (i32 127100 to i32*), align 4
  store i32 %v4_15664, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_15670 = load i32, i32* inttoptr (i32 127064 to i32*), align 8
  store i32 %v4_15670, i32* %r7.global-to-local, align 4
  %v2_1567c = ptrtoint i32* %stack_var_-40 to i32
  call void @__pseudo_branch(i32 %v4_15670)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_15690 = load i32, i32* %r6.global-to-local, align 4
  %v2_15690 = add i32 %v0_15690, 16
  %v3_15690 = inttoptr i32 %v2_15690 to i32*
  %v4_15690 = load i32, i32* %v3_15690, align 4
  store i32 %v4_15690, i32* %r5.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15690)
  store i32 12, i32* %r3.global-to-local, align 4
  %v0_156a0 = load i32, i32* %r6.global-to-local, align 4
  %v2_156a0 = add i32 %v0_156a0, 12
  %v3_156a0 = inttoptr i32 %v2_156a0 to i32*
  %v4_156a0 = load i32, i32* %v3_156a0, align 4
  store i32 %v4_156a0, i32* %r3.global-to-local, align 4
  %v1_156a4 = inttoptr i32 %v4_156a0 to i32*
  %v2_156a4 = load i32, i32* %v1_156a4, align 4
  store i32 %v2_156a4, i32* %r3.global-to-local, align 4
  %v7_156a8 = icmp eq i32 %v2_156a4, 1
  br i1 %v7_156a8, label %dec_label_pc_156b0, label %dec_label_pc_15770

dec_label_pc_156b0:                               ; preds = %dec_label_pc_1564c
  store i32 48, i32* %r3.global-to-local, align 4
  %v2_156b4 = add i32 %v0_156a0, 48
  %v3_156b4 = inttoptr i32 %v2_156b4 to i32*
  %v4_156b4 = load i32, i32* %v3_156b4, align 4
  store i32 %v4_156b4, i32* %r3.global-to-local, align 4
  %v1_156b8 = inttoptr i32 %v4_156b4 to i32*
  %v2_156b8 = load i32, i32* %v1_156b8, align 4
  store i32 %v2_156b8, i32* %r3.global-to-local, align 4
  %tmp30 = icmp slt i32 %v2_156b8, 1
  br i1 %tmp30, label %dec_label_pc_15770, label %dec_label_pc_156c4

dec_label_pc_156c4:                               ; preds = %dec_label_pc_156b0
  store i32 96, i32* %r3.global-to-local, align 4
  %v2_156c8 = add i32 %v0_156a0, 96
  %v3_156c8 = inttoptr i32 %v2_156c8 to i32*
  %v4_156c8 = load i32, i32* %v3_156c8, align 4
  store i32 %v4_156c8, i32* %r4.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15670)
  call void @__pseudo_branch(i32 %v4_15690)
  %v0_156f0 = load i32, i32* %r6.global-to-local, align 4
  %v2_156f0 = add i32 %v0_156f0, 44
  %v3_156f0 = inttoptr i32 %v2_156f0 to i32*
  %v4_156f0 = load i32, i32* %v3_156f0, align 4
  store i32 %v4_156f0, i32* %r3.global-to-local, align 4
  %v1_156f4 = inttoptr i32 %v4_156f0 to i32*
  %v2_156f4 = load i32, i32* %v1_156f4, align 4
  store i32 %v2_156f4, i32* %r4.global-to-local, align 4
  store i32 44, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v2_1574011 = icmp eq i32 %v2_156f4, 0
  br i1 %v2_1574011, label %dec_label_pc_1574c, label %dec_label_pc_15704

dec_label_pc_15704:                               ; preds = %dec_label_pc_156c4, %dec_label_pc_1573c
  %v0_157282 = phi i32 [ %v0_1573c, %dec_label_pc_1573c ], [ %v2_156f4, %dec_label_pc_156c4 ]
  %v1_15704 = inttoptr i32 %v0_157282 to i16*
  %v2_15704 = load i16, i16* %v1_15704, align 2
  %v3_15704 = zext i16 %v2_15704 to i32
  store i32 %v3_15704, i32* %r3.global-to-local, align 4
  %v2_15708 = and i32 %v3_15704, 32816
  %v7_1570c = icmp eq i32 %v2_15708, 48
  %v1_15710 = add i32 %v0_157282, 32
  %v2_15710 = inttoptr i32 %v1_15710 to i32*
  %v3_15710 = load i32, i32* %v2_15710, align 4
  store i32 %v3_15710, i32* %r5.global-to-local, align 4
  br i1 %v7_1570c, label %dec_label_pc_1571c, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_15704
  store i32 %v0_157282, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1573c

dec_label_pc_1571c:                               ; preds = %dec_label_pc_15704
  %v0_1571c = load i32, i32* %r7.global-to-local, align 4
  %v2_1571c = icmp eq i32 %v0_1571c, 0
  br i1 %v2_1571c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_1571c
  %v1_15720 = load i32, i32* %r6.global-to-local, align 4
  %v2_15720 = load i32, i32* %r8.global-to-local, align 4
  %v3_15720 = add i32 %v2_15720, %v1_15720
  %v4_15720 = inttoptr i32 %v3_15720 to i32*
  %v5_15720 = load i32, i32* %v4_15720, align 4
  store i32 %v5_15720, i32* %r3.global-to-local, align 4
  %v3_15724 = inttoptr i32 %v5_15720 to i32*
  store i32 %v3_15710, i32* %v3_15724, align 4
  %v0_15728 = load i32, i32* %r4.global-to-local, align 4
  %v1_15728 = inttoptr i32 %v0_15728 to i16*
  %v2_15728 = load i16, i16* %v1_15728, align 2
  %v3_15728 = zext i16 %v2_15728 to i32
  store i32 %v3_15728, i32* %r3.global-to-local, align 4
  br label %bb31

bb:                                               ; preds = %dec_label_pc_1571c
  %v2_157288 = load i16, i16* %v1_15704, align 2
  %v3_157289 = zext i16 %v2_157288 to i32
  store i32 %v3_157289, i32* %r3.global-to-local, align 4
  %v3_1572c = add i32 %v0_1571c, 32
  %v4_1572c = inttoptr i32 %v3_1572c to i32*
  store i32 %v3_15710, i32* %v4_1572c, align 4
  %v0_15730.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %.thread, %bb
  %v0_15730 = phi i32 [ %v3_15728, %.thread ], [ %v0_15730.pre, %bb ]
  %v1_15730 = and i32 %v0_15730, 8192
  %v2_15730 = icmp eq i32 %v1_15730, 0
  br i1 %v2_15730, label %bb33, label %bb32

bb32:                                             ; preds = %bb31
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_15738 = xor i1 %v2_15730, true
  call void @__pseudo_cond_branch(i1 %v1_15738, i32 ptrtoint (i32* @global_var_130a8.21 to i32))
  %v0_1573c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1573c

dec_label_pc_1573c:                               ; preds = %.thread21, %bb33
  %v0_1573c = phi i32 [ %v0_1573c.pre, %bb33 ], [ %v3_15710, %.thread21 ]
  store i32 %v0_1573c, i32* %r4.global-to-local, align 4
  %v2_15740 = icmp eq i32 %v0_1573c, 0
  br i1 %v2_15740, label %dec_label_pc_15740.dec_label_pc_1574c_crit_edge, label %dec_label_pc_15704

dec_label_pc_15740.dec_label_pc_1574c_crit_edge:  ; preds = %dec_label_pc_1573c
  %v0_15758.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1574c

dec_label_pc_1574c:                               ; preds = %dec_label_pc_15740.dec_label_pc_1574c_crit_edge, %dec_label_pc_156c4
  %v0_15758 = phi i32 [ %v0_15758.pre, %dec_label_pc_15740.dec_label_pc_1574c_crit_edge ], [ %v0_156f0, %dec_label_pc_156c4 ]
  store i32 24, i32* %r3.global-to-local, align 4
  %v2_15758 = add i32 %v0_15758, 24
  %v3_15758 = inttoptr i32 %v2_15758 to i32*
  %v4_15758 = load i32, i32* %v3_15758, align 4
  call void @__pseudo_branch(i32 %v4_15758)
  store i32 48, i32* %r3.global-to-local, align 4
  %v0_15768 = load i32, i32* %r6.global-to-local, align 4
  %v2_15768 = add i32 %v0_15768, 48
  %v3_15768 = inttoptr i32 %v2_15768 to i32*
  %v4_15768 = load i32, i32* %v3_15768, align 4
  store i32 %v4_15768, i32* %r3.global-to-local, align 4
  %v0_1576c = load i32, i32* %r4.global-to-local, align 4
  %v2_1576c = inttoptr i32 %v4_15768 to i32*
  store i32 %v0_1576c, i32* %v2_1576c, align 4
  %v0_15774.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15770

dec_label_pc_15770:                               ; preds = %dec_label_pc_1564c, %dec_label_pc_156b0, %dec_label_pc_1574c
  %v0_15774 = phi i32 [ %v0_156a0, %dec_label_pc_1564c ], [ %v0_156a0, %dec_label_pc_156b0 ], [ %v0_15774.pre, %dec_label_pc_1574c ]
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_15774 = add i32 %v0_15774, 12
  %v3_15774 = inttoptr i32 %v2_15774 to i32*
  %v4_15774 = load i32, i32* %v3_15774, align 4
  %v1_15778 = inttoptr i32 %v4_15774 to i32*
  %v2_15778 = load i32, i32* %v1_15778, align 4
  %v1_1577c = add i32 %v2_15778, -1
  store i32 %v1_1577c, i32* %v1_15778, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_15790 = load i32, i32* %r6.global-to-local, align 4
  %v2_15790 = add i32 %v0_15790, 24
  %v3_15790 = inttoptr i32 %v2_15790 to i32*
  %v4_15790 = load i32, i32* %v3_15790, align 4
  call void @__pseudo_branch(i32 %v4_15790)
  %v2_157a0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_157a0, i32* %r4.global-to-local, align 4
  ret i32 %v2_1567c

; uselistorder directives
  uselistorder i32 %v0_1573c, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32* %r6.global-to-local, { 0, 7, 1, 6, 2, 3, 4, 5, 8 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 20, 21, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32 8192, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* inttoptr (i32 127028 to i32*), { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_15770, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1573c, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_15704, { 1, 0 }
}

define i32 @function_157ac(i16* %arg1) local_unnamed_addr {
dec_label_pc_157ac:
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v0_157ac = load i1, i1* @cpsr_z, align 1
  %v2_157ac = load i32, i32* @r4, align 4
  br i1 %v0_157ac, label %bb, label %dec_label_pc_157ac..thread9_crit_edge

dec_label_pc_157ac..thread9_crit_edge:            ; preds = %dec_label_pc_157ac
  %v0_157e8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread9

bb:                                               ; preds = %dec_label_pc_157ac
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_157ac..thread9_crit_edge, %bb
  %v0_15988 = phi i32 [ %v0_157e8.pre, %dec_label_pc_157ac..thread9_crit_edge ], [ 0, %bb ]
  store i32 %v2_157ac, i32* %stack_var_-36, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %sb.global-to-local, align 4
  %v4_157e4 = load i32, i32* inttoptr (i32 127036 to i32*), align 4
  store i32 %v4_157e4, i32* %r3.global-to-local, align 4
  %v9_157e8 = icmp eq i32 %v0_15988, %v4_157e4
  store i32 %v0_15988, i32* %fp.global-to-local, align 4
  br i1 %v9_157e8, label %bb50, label %dec_label_pc_15800

bb50:                                             ; preds = %.thread9
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_15810

dec_label_pc_15800:                               ; preds = %.thread9
  store i32 256, i32* %r2.global-to-local, align 4
  %v2_15804 = icmp eq i32 %v0_15988, 0
  br i1 %v2_15804, label %dec_label_pc_15810, label %dec_label_pc_15978

dec_label_pc_15810:                               ; preds = %bb50, %dec_label_pc_15800
  %stack_var_-60.1.in = phi i32 [ 0, %bb50 ], [ 256, %dec_label_pc_15800 ]
  store i32 108, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_15824 = load i32, i32* inttoptr (i32 127100 to i32*), align 4
  store i32 %v4_15824, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_1582c = ptrtoint i32* %stack_var_-56 to i32
  %v4_15830 = load i32, i32* inttoptr (i32 127064 to i32*), align 8
  store i32 16, i32* %stack_var_-72, align 4
  store i32 %v2_1582c, i32* %r0.global-to-local, align 4
  store i32 %v4_15824, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15830)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_15850 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15850, i32* %r0.global-to-local, align 4
  %v0_15854 = load i32, i32* %sb.global-to-local, align 4
  %v2_15854 = add i32 %v0_15854, 16
  %v3_15854 = inttoptr i32 %v2_15854 to i32*
  %v4_15854 = load i32, i32* %v3_15854, align 4
  call void @__pseudo_branch(i32 %v4_15854)
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_15864 = add i32 %v0_15854, 12
  %v3_15864 = inttoptr i32 %v2_15864 to i32*
  %v4_15864 = load i32, i32* %v3_15864, align 4
  store i32 %v4_15864, i32* %r2.global-to-local, align 4
  %v1_15868 = inttoptr i32 %v4_15864 to i32*
  %v2_15868 = load i32, i32* %v1_15868, align 4
  store i32 24, i32* %sl.global-to-local, align 4
  %v1_15870 = add i32 %v2_15868, 1
  store i32 %v1_15870, i32* %r3.global-to-local, align 4
  %v2_15874 = add i32 %v0_15854, 24
  %v3_15874 = inttoptr i32 %v2_15874 to i32*
  %v4_15874 = load i32, i32* %v3_15874, align 4
  store i32 %v1_15870, i32* %v1_15868, align 4
  store i32 %v2_1582c, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15874)
  store i32 96, i32* %r3.global-to-local, align 4
  %v0_15890 = load i32, i32* %sb.global-to-local, align 4
  %v2_15890 = add i32 %v0_15890, 96
  %v3_15890 = inttoptr i32 %v2_15890 to i32*
  %v4_15890 = load i32, i32* %v3_15890, align 4
  store i32 %v4_15890, i32* @r4, align 4
  store i32 %v4_15890, i32* %r2.global-to-local, align 4
  store i32 %v2_1582c, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15830)
  %v0_158a8 = load i32, i32* @r4, align 4
  store i32 %v0_158a8, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15854)
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_158b8 = load i32, i32* %sb.global-to-local, align 4
  %v2_158b8 = add i32 %v0_158b8, 44
  %v3_158b8 = inttoptr i32 %v2_158b8 to i32*
  %v4_158b8 = load i32, i32* %v3_158b8, align 4
  store i32 %v4_158b8, i32* %r3.global-to-local, align 4
  store i32 %v2_1582c, i32* %r0.global-to-local, align 4
  %v1_158c4 = inttoptr i32 %v4_158b8 to i32*
  %v2_158c4 = load i32, i32* %v1_158c4, align 4
  store i32 %v2_158c4, i32* @r7, align 4
  call void @__pseudo_branch(i32 %v4_15874)
  %v0_158d0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_158d0, i32* @r6, align 4
  %v2_158d4 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_158d4, i32* @r8, align 4
  store i32 72, i32* %fp.global-to-local, align 4
  %v0_15968.pr = load i32, i32* @r7, align 4
  %v2_1596829 = icmp eq i32 %v0_15968.pr, 0
  br i1 %v2_1596829, label %dec_label_pc_15970, label %dec_label_pc_158dc

dec_label_pc_158dc:                               ; preds = %dec_label_pc_15810, %dec_label_pc_15964
  %v0_158e8 = phi i32 [ %v3_15964, %dec_label_pc_15964 ], [ %v0_15968.pr, %dec_label_pc_15810 ]
  %v1_158dc = inttoptr i32 %v0_158e8 to i16*
  %v2_158dc = load i16, i16* %v1_158dc, align 2
  %v3_158dc = zext i16 %v2_158dc to i32
  store i32 %v3_158dc, i32* %r3.global-to-local, align 4
  %v1_158e0 = and i32 %v3_158dc, 64
  %v2_158e0 = icmp eq i32 %v1_158e0, 0
  br i1 %v2_158e0, label %dec_label_pc_15964, label %dec_label_pc_158e8

dec_label_pc_158e8:                               ; preds = %dec_label_pc_158dc
  %v1_158e8 = add i32 %v0_158e8, 56
  store i32 %v1_158e8, i32* @r4, align 4
  store i32 %v1_158e8, i32* %r2.global-to-local, align 4
  store i32 %v2_1582c, i32* %r0.global-to-local, align 4
  %v0_158f8 = load i32, i32* %sb.global-to-local, align 4
  %v1_158f8 = load i32, i32* %fp.global-to-local, align 4
  %v2_158f8 = add i32 %v1_158f8, %v0_158f8
  %v3_158f8 = inttoptr i32 %v2_158f8 to i32*
  %v4_158f8 = load i32, i32* %v3_158f8, align 4
  call void @__pseudo_branch(i32 %v4_158f8)
  %v0_15904 = load i32, i32* @r4, align 4
  store i32 %v0_15904, i32* %r0.global-to-local, align 4
  %v0_15908 = load i32, i32* %sb.global-to-local, align 4
  %v1_15908 = load i32, i32* @r8, align 4
  %v2_15908 = add i32 %v1_15908, %v0_15908
  %v3_15908 = inttoptr i32 %v2_15908 to i32*
  %v4_15908 = load i32, i32* %v3_15908, align 4
  call void @__pseudo_branch(i32 %v4_15908)
  %v0_15914 = load i32, i32* @r7, align 4
  %v1_15914 = inttoptr i32 %v0_15914 to i16*
  %v2_15914 = load i16, i16* %v1_15914, align 2
  %v3_15914 = zext i16 %v2_15914 to i32
  store i32 %stack_var_-60.1.in, i32* %r2.global-to-local, align 4
  %v2_1591c = or i32 %v3_15914, %stack_var_-60.1.in
  %v1_15920 = xor i32 %v2_1591c, 320
  store i32 %v1_15920, i32* %r3.global-to-local, align 4
  %v1_15924 = and i32 %v1_15920, 832
  %v2_15924 = icmp eq i32 %v1_15924, 0
  br i1 %v2_15924, label %dec_label_pc_1592c, label %bb51

dec_label_pc_1592c:                               ; preds = %dec_label_pc_158e8
  store i32 %v0_15914, i32* %r0.global-to-local, align 4
  %v1_15930 = call i32 @function_15484(i32 %v0_15914)
  store i32 %v1_15930, i32* %r0.global-to-local, align 4
  %v2_15934 = icmp eq i32 %v1_15930, 0
  br i1 %v2_15934, label %.thread17, label %.thread18

.thread17:                                        ; preds = %dec_label_pc_1592c
  %v1_15938 = load i32, i32* @r7, align 4
  %v2_15938 = inttoptr i32 %v1_15938 to i16*
  %v3_15938 = load i16, i16* %v2_15938, align 2
  %v4_15938 = zext i16 %v3_15938 to i32
  store i32 %v4_15938, i32* %r3.global-to-local, align 4
  %v2_1593c = add i32 %v1_15938, 8
  %v3_1593c = inttoptr i32 %v2_1593c to i32*
  %v4_1593c = load i32, i32* %v3_1593c, align 4
  store i32 %v4_1593c, i32* %r2.global-to-local, align 4
  %v2_15940 = and i32 %v4_15938, 65471
  store i32 %v2_15940, i32* %r3.global-to-local, align 4
  %v3_15944 = add i32 %v1_15938, 28
  %v4_15944 = inttoptr i32 %v3_15944 to i32*
  store i32 %v4_1593c, i32* %v4_15944, align 4
  %v1_15948 = load i32, i32* %r3.global-to-local, align 4
  %v2_15948 = trunc i32 %v1_15948 to i16
  %v3_15948 = load i32, i32* @r7, align 4
  %v4_15948 = inttoptr i32 %v3_15948 to i16*
  store i16 %v2_15948, i16* %v4_15948, align 2
  br label %bb51

.thread18:                                        ; preds = %dec_label_pc_1592c
  store i32 -1, i32* @r6, align 4
  br label %bb51

bb51:                                             ; preds = %.thread17, %dec_label_pc_158e8, %.thread18
  store i32 %v2_1582c, i32* %r0.global-to-local, align 4
  %v0_15958 = load i32, i32* %sb.global-to-local, align 4
  %v1_15958 = load i32, i32* %sl.global-to-local, align 4
  %v2_15958 = add i32 %v1_15958, %v0_15958
  %v3_15958 = inttoptr i32 %v2_15958 to i32*
  %v4_15958 = load i32, i32* %v3_15958, align 4
  call void @__pseudo_branch(i32 %v4_15958)
  %v0_15964.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_15964

dec_label_pc_15964:                               ; preds = %dec_label_pc_158dc, %bb51
  %v0_15964 = phi i32 [ %v0_158e8, %dec_label_pc_158dc ], [ %v0_15964.pre, %bb51 ]
  %v1_15964 = add i32 %v0_15964, 32
  %v2_15964 = inttoptr i32 %v1_15964 to i32*
  %v3_15964 = load i32, i32* %v2_15964, align 4
  store i32 %v3_15964, i32* @r7, align 4
  %v2_15968 = icmp eq i32 %v3_15964, 0
  br i1 %v2_15968, label %dec_label_pc_15970, label %dec_label_pc_158dc

dec_label_pc_15970:                               ; preds = %dec_label_pc_15964, %dec_label_pc_15810
  %v0_15970 = call i32 @function_1564c()
  store i32 %v0_15970, i32* %r0.global-to-local, align 4
  %v0_159ac.pre = load i32, i32* @r6, align 4
  br label %bb53

dec_label_pc_15978:                               ; preds = %dec_label_pc_15800
  %v1_15978 = inttoptr i32 %v0_15988 to i16*
  %v2_15978 = load i16, i16* %v1_15978, align 2
  %v3_15978 = zext i16 %v2_15978 to i32
  %v1_1597c = and i32 %v3_15978, 64
  store i32 %v1_1597c, i32* %r3.global-to-local, align 4
  %v2_1597c = icmp eq i32 %v1_1597c, 0
  br i1 %v2_1597c, label %bb52, label %dec_label_pc_15988

bb52:                                             ; preds = %dec_label_pc_15978
  br label %bb53

dec_label_pc_15988:                               ; preds = %dec_label_pc_15978
  %v1_15988 = call i32 @function_15484(i32 %v0_15988)
  store i32 %v1_15988, i32* %r0.global-to-local, align 4
  %v2_1598c = icmp eq i32 %v1_15988, 0
  br i1 %v2_1598c, label %.thread25, label %.thread27

.thread27:                                        ; preds = %dec_label_pc_15988
  br label %bb53

.thread25:                                        ; preds = %dec_label_pc_15988
  %v1_15990 = load i32, i32* %fp.global-to-local, align 4
  %v2_15990 = inttoptr i32 %v1_15990 to i16*
  %v3_15990 = load i16, i16* %v2_15990, align 2
  %v4_15990 = zext i16 %v3_15990 to i32
  store i32 %v4_15990, i32* %r3.global-to-local, align 4
  %v2_15994 = add i32 %v1_15990, 8
  %v3_15994 = inttoptr i32 %v2_15994 to i32*
  %v4_15994 = load i32, i32* %v3_15994, align 4
  store i32 %v4_15994, i32* %r2.global-to-local, align 4
  %v2_15998 = and i32 %v4_15990, 65471
  store i32 %v2_15998, i32* %r3.global-to-local, align 4
  %v2_1599c = trunc i32 %v2_15998 to i16
  store i16 %v2_1599c, i16* %v2_15990, align 2
  %v1_159a0 = load i32, i32* %r2.global-to-local, align 4
  %v2_159a0 = load i32, i32* %fp.global-to-local, align 4
  %v3_159a0 = add i32 %v2_159a0, 28
  %v4_159a0 = inttoptr i32 %v3_159a0 to i32*
  store i32 %v1_159a0, i32* %v4_159a0, align 4
  br label %bb53

bb53:                                             ; preds = %bb52, %.thread27, %dec_label_pc_15970, %.thread25
  %v0_159ac = phi i32 [ -1, %.thread27 ], [ 0, %bb52 ], [ %v0_159ac.pre, %dec_label_pc_15970 ], [ 0, %.thread25 ]
  store i32 %v0_159ac, i32* %r0.global-to-local, align 4
  %v2_159b4 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_159b4, i32* %r4.global-to-local, align 4
  ret i32 %v0_159ac

; uselistorder directives
  uselistorder i32 %v0_159ac, { 1, 0 }
  uselistorder i32 %v3_15964, { 1, 2, 0 }
  uselistorder i32 %v0_15914, { 1, 0, 2 }
  uselistorder i32 %v0_15854, { 1, 0, 2 }
  uselistorder i32 %v0_15988, { 2, 1, 0, 3, 4 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 6, 5, 16, 7, 9, 8, 10, 12, 11, 13, 14, 15, 2, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 3, 4, 0, 1, 5, 2, 6 }
  uselistorder i32 ()* @function_1564c, { 1, 0 }
  uselistorder i32 56, { 9, 10, 11, 2, 3, 12, 14, 5, 6, 7, 8, 1, 4, 13, 0, 15 }
  uselistorder i32* @r8, { 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 231, 181, 182, 4, 183, 184, 185, 209, 210, 211, 212, 213, 10, 214, 215, 216, 217, 218, 219, 220, 221, 90, 91, 92, 93, 94, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 34, 35, 24, 21, 5, 22, 1, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 52, 53, 54, 55, 6, 75, 0, 76, 77, 78, 11, 79, 40, 41, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 80, 81, 82, 83, 86, 84, 85, 9, 87, 88, 89, 95, 96, 97, 98, 99, 100, 101, 102, 103, 109, 7, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 8, 177, 178, 179, 180, 222, 223, 2, 224, 225, 226, 227, 228, 229, 230, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 104, 105, 106, 107, 108 }
  uselistorder i32 96, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11 }
  uselistorder i32* inttoptr (i32 127064 to i32*), { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32 72, { 0, 1, 2, 3, 4, 5, 15, 11, 12, 13, 14, 6, 16, 7, 8, 9, 10 }
  uselistorder label %bb53, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_15964, { 1, 0 }
  uselistorder label %bb51, { 2, 0, 1 }
  uselistorder label %dec_label_pc_158dc, { 1, 0 }
  uselistorder label %dec_label_pc_15810, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
}

define i32 @function_159c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_159c0:
  %v0_159c0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_159c0, label %bb, label %.thread6

bb:                                               ; preds = %dec_label_pc_159c0
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_159c0, %bb
  %v5_159dc = phi i32 [ %arg1, %dec_label_pc_159c0 ], [ 0, %bb ]
  ret i32 %v5_159dc

; uselistorder directives
  uselistorder label %.thread6, { 1, 0 }
}

define i32 @function_159e0(i16* %arg1) local_unnamed_addr {
dec_label_pc_159e0:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-17 = alloca i8, align 1
  %stack_var_-12 = alloca i32, align 4
  %v3_159e0 = load i32, i32* @r4, align 4
  store i32 %v3_159e0, i32* %stack_var_-12, align 4
  %v6_159e0 = load i32, i32* @r5, align 4
  %v9_159e0 = load i32, i32* @lr, align 4
  %v0_159e4 = load i32, i32* @r0, align 4
  %v1_159e4 = add i32 %v0_159e4, 16
  %v2_159e4 = inttoptr i32 %v1_159e4 to i32*
  %v3_159e4 = load i32, i32* %v2_159e4, align 4
  store i32 %v3_159e4, i32* %r2.global-to-local, align 4
  %v1_159e8 = add i32 %v0_159e4, 24
  %v2_159e8 = inttoptr i32 %v1_159e8 to i32*
  %v3_159e8 = load i32, i32* %v2_159e8, align 4
  %v3_159ec = icmp ult i32 %v3_159e4, %v3_159e8
  store i32 %v0_159e4, i32* @r4, align 4
  br i1 %v3_159ec, label %bb, label %dec_label_pc_15a0c

bb:                                               ; preds = %dec_label_pc_159e0
  %v2_159f8 = inttoptr i32 %v3_159e4 to i8*
  %v3_159f8 = load i8, i8* %v2_159f8, align 1
  %v4_159f8 = zext i8 %v3_159f8 to i32
  store i32 %v4_159f8, i32* %r0.global-to-local, align 4
  %v6_159f8 = add i32 %v3_159e4, 1
  store i32 %v6_159f8, i32* %r2.global-to-local, align 4
  store i32 %v6_159f8, i32* %v2_159e4, align 4
  br label %dec_label_pc_15af8

dec_label_pc_15a0c:                               ; preds = %dec_label_pc_159e0
  store i32 126992, i32* @r5, align 4
  %v1_15a0c = inttoptr i32 %v0_159e4 to i16*
  %v2_15a0c = load i16, i16* %v1_15a0c, align 2
  %v3_15a0c = zext i16 %v2_15a0c to i32
  %v1_15a10 = and i32 %v3_15a0c, 131
  %tmp24 = icmp ugt i32 %v1_15a10, 128
  br i1 %tmp24, label %dec_label_pc_15a2c, label %dec_label_pc_15a1c

dec_label_pc_15a1c:                               ; preds = %dec_label_pc_15a0c
  store i32 128, i32* @r1, align 4
  %v0_15a20 = call i32 @function_1684c()
  store i32 %v0_15a20, i32* %r0.global-to-local, align 4
  %v2_15a24 = icmp eq i32 %v0_15a20, 0
  br i1 %v2_15a24, label %dec_label_pc_15a1c.dec_label_pc_15a2c_crit_edge, label %dec_label_pc_15af4

dec_label_pc_15a1c.dec_label_pc_15a2c_crit_edge:  ; preds = %dec_label_pc_15a1c
  %v0_15a2c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15a2c

dec_label_pc_15a2c:                               ; preds = %dec_label_pc_15a1c.dec_label_pc_15a2c_crit_edge, %dec_label_pc_15a0c
  %v2_15a6c = phi i32 [ %v0_15a2c.pre, %dec_label_pc_15a1c.dec_label_pc_15a2c_crit_edge ], [ %v0_159e4, %dec_label_pc_15a0c ]
  %v1_15a2c = inttoptr i32 %v2_15a6c to i16*
  %v2_15a2c = load i16, i16* %v1_15a2c, align 2
  %v3_15a2c = zext i16 %v2_15a2c to i32
  store i32 %v3_15a2c, i32* %r2.global-to-local, align 4
  %v1_15a30 = and i32 %v3_15a2c, 2
  %v2_15a30 = icmp eq i32 %v1_15a30, 0
  br i1 %v2_15a30, label %dec_label_pc_15a5c, label %dec_label_pc_15a38

dec_label_pc_15a38:                               ; preds = %dec_label_pc_15a2c
  %tmp25 = urem i16 %v2_15a2c, 2
  %v1_15a38 = zext i16 %tmp25 to i32
  %tmp21 = sub nsw i32 0, %v1_15a38
  %v4_15a3c = and i32 %tmp21, 4
  %v5_15a3c = add i32 %v4_15a3c, %v2_15a6c
  %v1_15a40 = add i32 %v5_15a3c, 36
  %v2_15a40 = inttoptr i32 %v1_15a40 to i8*
  %v3_15a40 = load i8, i8* %v2_15a40, align 1
  %v4_15a40 = zext i8 %v3_15a40 to i32
  %v1_15a44 = add nsw i32 %v3_15a2c, -1
  store i32 %v1_15a44, i32* %r2.global-to-local, align 4
  store i32 %v4_15a40, i32* %r0.global-to-local, align 4
  %v2_15a50 = add i32 %v2_15a6c, 40
  %v3_15a50 = inttoptr i32 %v2_15a50 to i32*
  store i32 0, i32* %v3_15a50, align 4
  %v0_15a54 = load i32, i32* %r2.global-to-local, align 4
  %v1_15a54 = trunc i32 %v0_15a54 to i16
  %v2_15a54 = load i32, i32* @r4, align 4
  %v3_15a54 = inttoptr i32 %v2_15a54 to i16*
  store i16 %v1_15a54, i16* %v3_15a54, align 2
  br label %dec_label_pc_15af8

dec_label_pc_15a5c:                               ; preds = %dec_label_pc_15a2c
  %v1_15a5c = add i32 %v2_15a6c, 16
  %v1_15a60 = inttoptr i32 %v1_15a5c to i32*
  %v2_15a60 = load i32, i32* %v1_15a60, align 4
  %v3_15a60 = add i32 %v2_15a6c, 20
  %v4_15a60 = inttoptr i32 %v3_15a60 to i32*
  %v5_15a60 = load i32, i32* %v4_15a60, align 4
  %v9_15a64 = icmp eq i32 %v5_15a60, %v2_15a60
  br i1 %v9_15a64, label %dec_label_pc_15a74, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_15a5c
  %v2_15a68 = inttoptr i32 %v2_15a60 to i8*
  %v3_15a68 = load i8, i8* %v2_15a68, align 1
  %v4_15a68 = zext i8 %v3_15a68 to i32
  store i32 %v4_15a68, i32* %r0.global-to-local, align 4
  %v6_15a68 = add i32 %v2_15a60, 1
  store i32 %v6_15a68, i32* %v1_15a60, align 4
  br label %dec_label_pc_15af8

dec_label_pc_15a74:                               ; preds = %dec_label_pc_15a5c
  %v1_15a74 = add i32 %v2_15a6c, 4
  %v2_15a74 = inttoptr i32 %v1_15a74 to i32*
  %v3_15a74 = load i32, i32* %v2_15a74, align 4
  %v7_15a78 = icmp eq i32 %v3_15a74, -2
  br i1 %v7_15a78, label %.thread8, label %dec_label_pc_15a8c

.thread8:                                         ; preds = %dec_label_pc_15a74
  %v2_15a7c = or i16 %v2_15a2c, 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i16 %v2_15a7c, i16* %v1_15a2c, align 2
  br label %dec_label_pc_15af8

dec_label_pc_15a8c:                               ; preds = %dec_label_pc_15a74
  %v1_15a8c = and i32 %v3_15a2c, 768
  %v2_15a8c = icmp eq i32 %v1_15a8c, 0
  br i1 %v2_15a8c, label %.thread10, label %bb22

bb22:                                             ; preds = %dec_label_pc_15a8c
  %v1_15a94 = load i32, i32* @r5, align 4
  %v3_15a94 = add i32 %v1_15a94, 44
  %v4_15a94 = inttoptr i32 %v3_15a94 to i32*
  %v5_15a94 = load i32, i32* %v4_15a94, align 4
  store i32 %v5_15a94, i32* %r0.global-to-local, align 4
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_15a8c, %bb22
  %v1_15a98 = xor i1 %v2_15a8c, true
  call void @__pseudo_cond_branch(i1 %v1_15a98, i32 ptrtoint (i32* @global_var_157d4.511 to i32))
  %v0_15a9c = load i32, i32* @r4, align 4
  %v1_15a9c = add i32 %v0_15a9c, 8
  store i32 %v1_15a9c, i32* %r2.global-to-local, align 4
  %v1_15aa0 = inttoptr i32 %v1_15a9c to i32*
  %v2_15aa0 = load i32, i32* %v1_15aa0, align 4
  store i32 %v2_15aa0, i32* %r2.global-to-local, align 4
  %v3_15aa0 = add i32 %v0_15a9c, 12
  %v4_15aa0 = inttoptr i32 %v3_15aa0 to i32*
  %v5_15aa0 = load i32, i32* %v4_15aa0, align 4
  %v9_15aa4 = icmp eq i32 %v5_15aa0, %v2_15aa0
  br i1 %v9_15aa4, label %dec_label_pc_15ad8, label %dec_label_pc_15aac

dec_label_pc_15aac:                               ; preds = %.thread10
  %v2_15aac = add i32 %v0_15a9c, 24
  %v3_15aac = inttoptr i32 %v2_15aac to i32*
  store i32 %v2_15aa0, i32* %v3_15aac, align 4
  %v0_15ab0 = load i32, i32* @r4, align 4
  store i32 %v0_15ab0, i32* %r0.global-to-local, align 4
  %v2_15ab4 = call i32 @function_1681c(i32 %v0_15ab0)
  store i32 %v2_15ab4, i32* %r0.global-to-local, align 4
  %v2_15ab8 = icmp eq i32 %v2_15ab4, 0
  br i1 %v2_15ab8, label %dec_label_pc_15af4, label %dec_label_pc_15ac0

dec_label_pc_15ac0:                               ; preds = %dec_label_pc_15aac
  %v0_15ac0 = load i32, i32* @r4, align 4
  %v1_15ac0 = add i32 %v0_15ac0, 20
  %v2_15ac0 = inttoptr i32 %v1_15ac0 to i32*
  %v3_15ac0 = load i32, i32* %v2_15ac0, align 4
  %v2_15ac4 = add i32 %v0_15ac0, 24
  %v3_15ac4 = inttoptr i32 %v2_15ac4 to i32*
  store i32 %v3_15ac0, i32* %v3_15ac4, align 4
  %v0_15ac8 = load i32, i32* @r4, align 4
  %v1_15ac8 = add i32 %v0_15ac8, 16
  %v2_15ac8 = inttoptr i32 %v1_15ac8 to i32*
  %v3_15ac8 = load i32, i32* %v2_15ac8, align 4
  %v1_15acc = inttoptr i32 %v3_15ac8 to i8*
  %v2_15acc = load i8, i8* %v1_15acc, align 1
  %v3_15acc = zext i8 %v2_15acc to i32
  store i32 %v3_15acc, i32* %r0.global-to-local, align 4
  %v5_15acc = add i32 %v3_15ac8, 1
  store i32 %v5_15acc, i32* %v2_15ac8, align 4
  br label %dec_label_pc_15af8

dec_label_pc_15ad8:                               ; preds = %.thread10
  %v1_15ad8 = inttoptr i32 %v0_15a9c to i16*
  store i32 %v0_15a9c, i32* %r0.global-to-local, align 4
  %v2_15adc = ptrtoint i8* %stack_var_-17 to i32
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_15ae4 = call i32 @function_16710(i16* %v1_15ad8, i32 %v2_15adc, i32 1)
  store i32 %v5_15ae4, i32* %r0.global-to-local, align 4
  %v2_15ae8 = icmp eq i32 %v5_15ae4, 0
  br i1 %v2_15ae8, label %dec_label_pc_15af4, label %bb23

bb23:                                             ; preds = %dec_label_pc_15ad8
  %v4_15aec = load i8, i8* %stack_var_-17, align 1
  %v5_15aec = sext i8 %v4_15aec to i32
  store i32 %v5_15aec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15af8

dec_label_pc_15af4:                               ; preds = %dec_label_pc_15ad8, %dec_label_pc_15a1c, %dec_label_pc_15aac
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15af8

dec_label_pc_15af8:                               ; preds = %bb, %.thread8, %bb23, %.thread5, %dec_label_pc_15ac0, %dec_label_pc_15a38, %dec_label_pc_15af4
  %v2_15afc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15afc, i32* @r4, align 4
  store i32 %v6_159e0, i32* @r5, align 4
  store i32 %v9_159e0, i32* @lr, align 4
  %v1_15b00 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_15b00

; uselistorder directives
  uselistorder i32 %v2_15a60, { 1, 0, 2 }
  uselistorder i32 %v2_15a6c, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 %v3_159e4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_159e4, { 1, 0, 2, 3, 4 }
  uselistorder i8* %stack_var_-17, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 11, 1, 0, 4, 3, 2, 10, 5, 6, 7, 8, 9, 13, 12 }
  uselistorder i32 768, { 2, 0, 3, 1, 4 }
  uselistorder i32 128, { 5, 0, 4, 6, 1, 7, 10, 8, 9, 2, 3, 11, 12, 13 }
  uselistorder label %dec_label_pc_15af8, { 6, 2, 4, 1, 3, 5, 0 }
  uselistorder label %dec_label_pc_15af4, { 0, 2, 1 }
  uselistorder label %.thread10, { 1, 0 }
}

define i32 @function_15b0c(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_15b0c:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v6_15b0c = load i32, i32* @r5, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15b10 = icmp eq i32 %arg2, 0
  store i1 %v2_15b10, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg3, i32* @r4, align 4
  %tmp22 = icmp slt i32 %arg2, 1
  br i1 %tmp22, label %dec_label_pc_15b98, label %dec_label_pc_15b80.preheader

dec_label_pc_15b80.preheader:                     ; preds = %dec_label_pc_15b0c
  store i32 %tmp, i32* @r5, align 4
  %v1_15b802 = add i32 %arg2, -1
  store i32 %v1_15b802, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_15b808 = icmp eq i32 %arg2, 1
  store i1 %v7_15b808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15b808, label %dec_label_pc_15b88, label %dec_label_pc_15b2c

dec_label_pc_15b2c:                               ; preds = %dec_label_pc_15b80.preheader, %dec_label_pc_15b80.backedge.dec_label_pc_15b2c_crit_edge
  %v0_15b50 = phi i32 [ %v0_15b2c.pre, %dec_label_pc_15b80.backedge.dec_label_pc_15b2c_crit_edge ], [ %arg3, %dec_label_pc_15b80.preheader ]
  %v1_15b2c = add i32 %v0_15b50, 16
  %v2_15b2c = inttoptr i32 %v1_15b2c to i32*
  %v3_15b2c = load i32, i32* %v2_15b2c, align 4
  store i32 %v3_15b2c, i32* %r2.global-to-local, align 4
  %v1_15b30 = add i32 %v0_15b50, 24
  %v2_15b30 = inttoptr i32 %v1_15b30 to i32*
  %v3_15b30 = load i32, i32* %v2_15b30, align 4
  store i32 %v3_15b30, i32* %r3.global-to-local, align 4
  %v3_15b34 = icmp uge i32 %v3_15b2c, %v3_15b30
  store i1 %v3_15b34, i1* %cpsr_c.global-to-local, align 1
  %v9_15b34 = icmp eq i32 %v3_15b2c, %v3_15b30
  store i1 %v9_15b34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_15b34, label %dec_label_pc_15b50, label %dec_label_pc_15b3c

dec_label_pc_15b3c:                               ; preds = %dec_label_pc_15b2c
  %v1_15b3c = inttoptr i32 %v3_15b2c to i8*
  %v2_15b3c = load i8, i8* %v1_15b3c, align 1
  %v3_15b3c = zext i8 %v2_15b3c to i32
  store i32 %v3_15b3c, i32* %r3.global-to-local, align 4
  %v5_15b3c = add i32 %v3_15b2c, 1
  store i32 %v5_15b3c, i32* %r2.global-to-local, align 4
  %v2_15b40 = load i32, i32* @r5, align 4
  %v3_15b40 = inttoptr i32 %v2_15b40 to i8*
  store i8 %v2_15b3c, i8* %v3_15b40, align 1
  %v4_15b40 = load i32, i32* @r5, align 4
  %v5_15b40 = add i32 %v4_15b40, 1
  store i32 %v5_15b40, i32* @r5, align 4
  %v0_15b44 = load i32, i32* %r3.global-to-local, align 4
  %v2_15b44 = icmp ugt i32 %v0_15b44, 9
  store i1 %v2_15b44, i1* %cpsr_c.global-to-local, align 1
  %v7_15b44 = icmp eq i32 %v0_15b44, 10
  store i1 %v7_15b44, i1* %cpsr_z.global-to-local, align 1
  %v0_15b48 = load i32, i32* %r2.global-to-local, align 4
  %v1_15b48 = load i32, i32* @r4, align 4
  %v2_15b48 = add i32 %v1_15b48, 16
  %v3_15b48 = inttoptr i32 %v2_15b48 to i32*
  store i32 %v0_15b48, i32* %v3_15b48, align 4
  br i1 %v7_15b44, label %dec_label_pc_15b88, label %dec_label_pc_15b80.backedge

dec_label_pc_15b50:                               ; preds = %dec_label_pc_15b2c
  %v1_15b50 = inttoptr i32 %v0_15b50 to i16*
  %v3_15b54 = call i32 @function_159e0(i16* %v1_15b50)
  %v3_15b58 = icmp eq i32 %v3_15b54, -1
  store i1 %v3_15b58, i1* %cpsr_c.global-to-local, align 1
  %v8_15b58 = icmp eq i32 %v3_15b54, -1
  store i1 %v8_15b58, i1* %cpsr_z.global-to-local, align 1
  %v1_15b5c = urem i32 %v3_15b54, 256
  store i32 %v1_15b5c, i32* %r3.global-to-local, align 4
  br i1 %v3_15b58, label %dec_label_pc_15b64, label %dec_label_pc_15b7c

dec_label_pc_15b64:                               ; preds = %dec_label_pc_15b50
  %v0_15b64 = load i32, i32* @r4, align 4
  %v1_15b64 = inttoptr i32 %v0_15b64 to i16*
  %v2_15b64 = load i16, i16* %v1_15b64, align 2
  %v3_15b64 = zext i16 %v2_15b64 to i32
  store i32 %v3_15b64, i32* %r3.global-to-local, align 4
  %v1_15b68 = and i32 %v3_15b64, 8
  %v2_15b68 = icmp eq i32 %v1_15b68, 0
  store i1 %v2_15b68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15b68, label %dec_label_pc_15b88, label %dec_label_pc_15b98

dec_label_pc_15b7c:                               ; preds = %dec_label_pc_15b50
  %v1_15b74 = trunc i32 %v3_15b54 to i8
  %v2_15b74 = load i32, i32* @r5, align 4
  %v3_15b74 = inttoptr i32 %v2_15b74 to i8*
  store i8 %v1_15b74, i8* %v3_15b74, align 1
  %v4_15b74 = load i32, i32* @r5, align 4
  %v5_15b74 = add i32 %v4_15b74, 1
  store i32 %v5_15b74, i32* @r5, align 4
  %v0_15b78 = load i32, i32* %r3.global-to-local, align 4
  %v2_15b78 = icmp ugt i32 %v0_15b78, 9
  store i1 %v2_15b78, i1* %cpsr_c.global-to-local, align 1
  %v7_15b78 = icmp eq i32 %v0_15b78, 10
  store i1 %v7_15b78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15b78, label %dec_label_pc_15b88, label %dec_label_pc_15b80.backedge

dec_label_pc_15b80.backedge:                      ; preds = %dec_label_pc_15b7c, %dec_label_pc_15b3c
  %v0_15b80 = load i32, i32* %r6.global-to-local, align 4
  %v1_15b80 = add i32 %v0_15b80, -1
  store i32 %v1_15b80, i32* %r6.global-to-local, align 4
  %v2_15b80 = icmp ne i32 %v0_15b80, 0
  store i1 %v2_15b80, i1* %cpsr_c.global-to-local, align 1
  %v7_15b80 = icmp eq i32 %v0_15b80, 1
  store i1 %v7_15b80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15b80, label %dec_label_pc_15b88, label %dec_label_pc_15b80.backedge.dec_label_pc_15b2c_crit_edge

dec_label_pc_15b80.backedge.dec_label_pc_15b2c_crit_edge: ; preds = %dec_label_pc_15b80.backedge
  %v0_15b2c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15b2c

dec_label_pc_15b88:                               ; preds = %dec_label_pc_15b7c, %dec_label_pc_15b80.backedge, %dec_label_pc_15b3c, %dec_label_pc_15b80.preheader, %dec_label_pc_15b64
  %v0_15b88 = load i32, i32* @r5, align 4
  %v1_15b88 = load i32, i32* @r7, align 4
  %v3_15b88 = icmp uge i32 %v0_15b88, %v1_15b88
  store i1 %v3_15b88, i1* %cpsr_c.global-to-local, align 1
  %v9_15b88 = icmp eq i32 %v0_15b88, %v1_15b88
  store i1 %v9_15b88, i1* %cpsr_z.global-to-local, align 1
  %v2_15b8c = xor i1 %v9_15b88, true
  %v3_15b8c = and i1 %v3_15b88, %v2_15b8c
  br i1 %v3_15b8c, label %bb, label %.thread14

bb:                                               ; preds = %dec_label_pc_15b88
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_15b90 = inttoptr i32 %v0_15b88 to i8*
  store i8 0, i8* %v7_15b90, align 1
  %v0_15b94.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_15b94.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread14

.thread14:                                        ; preds = %dec_label_pc_15b88, %bb
  %v1_15b94 = phi i1 [ %v1_15b94.pre, %bb ], [ %v9_15b88, %dec_label_pc_15b88 ]
  %v0_15b94 = phi i1 [ %v0_15b94.pre, %bb ], [ %v3_15b88, %dec_label_pc_15b88 ]
  %v2_15b94 = xor i1 %v1_15b94, true
  %v3_15b94 = and i1 %v0_15b94, %v2_15b94
  br i1 %v3_15b94, label %.dec_label_pc_15b9c_crit_edge, label %dec_label_pc_15b98

.dec_label_pc_15b9c_crit_edge:                    ; preds = %.thread14
  %v0_15b9c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_15b9c

dec_label_pc_15b98:                               ; preds = %dec_label_pc_15b0c, %dec_label_pc_15b64, %.thread14
  br label %dec_label_pc_15b9c

dec_label_pc_15b9c:                               ; preds = %.dec_label_pc_15b9c_crit_edge, %dec_label_pc_15b98
  %v0_15b9c = phi i32 [ %v0_15b9c.pre, %.dec_label_pc_15b9c_crit_edge ], [ 0, %dec_label_pc_15b98 ]
  store i32 %v6_15b0c, i32* @r5, align 4
  ret i32 %v0_15b9c

; uselistorder directives
  uselistorder i1 %v9_15b88, { 1, 0, 2 }
  uselistorder i32 %v1_15b88, { 1, 0 }
  uselistorder i32 %v0_15b88, { 0, 2, 1 }
  uselistorder i32 %v0_15b80, { 2, 0, 1 }
  uselistorder i32 %v0_15b78, { 1, 0 }
  uselistorder i32 %v3_15b54, { 2, 1, 0, 3 }
  uselistorder i32 %v0_15b44, { 1, 0 }
  uselistorder i32 %v3_15b2c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_15b50, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 7, 2, 3, 4, 5, 6, 9, 8 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 8, 7 }
  uselistorder i1 true, { 0, 1, 70, 106, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 66, 28, 29, 30, 31, 32, 126, 64, 67, 72, 108, 74, 112, 77, 76, 75, 33, 36, 107, 65, 73, 109, 110, 111, 91, 113, 114, 115, 116, 117, 37, 38, 118, 119, 120, 121, 92, 122, 123, 34, 35, 124, 125, 90, 89, 39, 40, 41, 127, 42, 43, 78, 79, 85, 80, 86, 81, 84, 128, 82, 88, 129, 44, 130, 45, 131, 93, 94, 132, 95, 96, 133, 97, 98, 46, 47, 134, 99, 100, 48, 49, 135, 101, 102, 50, 51, 136, 103, 104, 52, 53, 71, 137, 138, 87, 139, 54, 83, 55, 56, 68, 57, 58, 69, 59, 60, 61, 62, 63, 105 }
  uselistorder i32 %arg2, { 2, 1, 0, 3, 4 }
  uselistorder label %dec_label_pc_15b9c, { 1, 0 }
  uselistorder label %dec_label_pc_15b98, { 2, 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %dec_label_pc_15b88, { 1, 0, 4, 2, 3 }
  uselistorder label %dec_label_pc_15b2c, { 1, 0 }
}

define i32 @function_15bb0() local_unnamed_addr {
dec_label_pc_15bb0:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i8*, align 4
  %v0_15bb0 = load i32, i32* @r1, align 4
  %v1_15bb0 = load i32, i32* @r0, align 4
  %v2_15bb0 = sub i32 %v0_15bb0, %v1_15bb0
  %v3_15bb0 = icmp ult i32 %v0_15bb0, %v1_15bb0
  %v4_15bb0 = xor i32 %v1_15bb0, %v0_15bb0
  %v5_15bb0 = xor i32 %v2_15bb0, %v0_15bb0
  %v6_15bb0 = and i32 %v5_15bb0, %v4_15bb0
  %v7_15bb0 = icmp slt i32 %v6_15bb0, 0
  store i1 %v7_15bb0, i1* %cpsr_v.global-to-local, align 1
  %v8_15bb0 = icmp slt i32 %v2_15bb0, 0
  store i1 %v8_15bb0, i1* %cpsr_n.global-to-local, align 1
  %v9_15bb0 = icmp eq i32 %v0_15bb0, %v1_15bb0
  store i1 %v9_15bb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_15bb0, label %dec_label_pc_15e04, label %dec_label_pc_15bb8

dec_label_pc_15bb8:                               ; preds = %dec_label_pc_15bb0
  br i1 %v9_15bb0, label %.thread130, label %bb

.thread130:                                       ; preds = %bb153, %.thread129, %bb150, %dec_label_pc_15bb8
  %merge = phi i32 [ %v0_15bb0, %dec_label_pc_15bb8 ], [ %v2_15e98, %bb150 ], [ %v11_15eb4, %bb153 ], [ %v7_15eb4, %.thread129 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_15bb8
  %v5_15bbc = inttoptr i32 %v1_15bb0 to i8*
  store i8* %v5_15bbc, i8** %stack_var_-8, align 4
  %v8_15bbc = load i32, i32* @lr, align 4
  %v0_15bc0 = load i32, i32* @r2, align 4
  %v2_15bc0 = add i32 %v0_15bc0, -4
  store i32 %v2_15bc0, i32* %r2.global-to-local, align 4
  %v4_15bc0 = sub i32 3, %v0_15bc0
  %v5_15bc0 = and i32 %v4_15bc0, %v0_15bc0
  %v6_15bc0 = icmp slt i32 %v5_15bc0, 0
  store i1 %v6_15bc0, i1* %cpsr_v.global-to-local, align 1
  %v7_15bc0 = icmp slt i32 %v2_15bc0, 0
  store i1 %v7_15bc0, i1* %cpsr_n.global-to-local, align 1
  %v8_15bc0 = icmp eq i32 %v0_15bc0, 4
  store i1 %v8_15bc0, i1* %cpsr_z.global-to-local, align 1
  %v5_15bc4 = icmp slt i32 %v0_15bc0, 4
  br i1 %v5_15bc4, label %bb140, label %dec_label_pc_15bc8

dec_label_pc_15bc8:                               ; preds = %bb
  %v1_15bc8 = urem i32 %v1_15bb0, 4
  store i32 %v1_15bc8, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15bc8 = icmp eq i32 %v1_15bc8, 0
  store i1 %v2_15bc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15bc8, label %dec_label_pc_15bd0, label %dec_label_pc_15c7c

dec_label_pc_15bd0:                               ; preds = %dec_label_pc_15bc8
  %v1_15bd0 = urem i32 %v0_15bb0, 4
  store i32 %v1_15bd0, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15bd0 = icmp eq i32 %v1_15bd0, 0
  store i1 %v2_15bd0, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_15bb0 to i2
  br i1 %v2_15bd0, label %dec_label_pc_15bd8, label %dec_label_pc_15cac

dec_label_pc_15bd8:                               ; preds = %dec_label_pc_15bd0, %dec_label_pc_15ca4
  %v0_15bf094 = phi i32 [ %v1_15bb0, %dec_label_pc_15bd0 ], [ %v0_15dcc77, %dec_label_pc_15ca4 ]
  %v0_15bec93 = phi i32 [ %v0_15bb0, %dec_label_pc_15bd0 ], [ %v0_15ca4, %dec_label_pc_15ca4 ]
  %v0_15bd8 = phi i32 [ %v2_15bc0, %dec_label_pc_15bd0 ], [ %v2_15c9c, %dec_label_pc_15ca4 ]
  %v1_15bd8 = add i32 %v0_15bd8, -8
  store i32 %v1_15bd8, i32* %r2.global-to-local, align 4
  %v3_15bd8 = sub i32 7, %v0_15bd8
  %v4_15bd8 = and i32 %v3_15bd8, %v0_15bd8
  %v5_15bd8 = icmp slt i32 %v4_15bd8, 0
  store i1 %v5_15bd8, i1* %cpsr_v.global-to-local, align 1
  %v6_15bd8 = icmp slt i32 %v1_15bd8, 0
  store i1 %v6_15bd8, i1* %cpsr_n.global-to-local, align 1
  %v7_15bd8 = icmp eq i32 %v0_15bd8, 8
  store i1 %v7_15bd8, i1* %cpsr_z.global-to-local, align 1
  %v2_15bdc = xor i1 %v6_15bd8, %v5_15bd8
  br i1 %v2_15bdc, label %dec_label_pc_15c2c, label %dec_label_pc_15be0

dec_label_pc_15be0:                               ; preds = %dec_label_pc_15bd8
  %v1_15be0 = add i32 %v0_15bd8, -28
  store i32 %v1_15be0, i32* %r2.global-to-local, align 4
  %v3_15be0 = sub i32 27, %v0_15bd8
  %v4_15be0 = and i32 %v3_15be0, %v1_15bd8
  %v5_15be0 = icmp slt i32 %v4_15be0, 0
  store i1 %v5_15be0, i1* %cpsr_v.global-to-local, align 1
  %v6_15be0 = icmp slt i32 %v1_15be0, 0
  store i1 %v6_15be0, i1* %cpsr_n.global-to-local, align 1
  %v7_15be0 = icmp eq i32 %v1_15bd8, 20
  store i1 %v7_15be0, i1* %cpsr_z.global-to-local, align 1
  %v2_15be4 = xor i1 %v6_15be0, %v5_15be0
  br i1 %v2_15be4, label %dec_label_pc_15c18, label %dec_label_pc_15be8

dec_label_pc_15be8:                               ; preds = %dec_label_pc_15be0
  %v0_15be8 = load i32, i32* @r4, align 4
  store i32 %v0_15be8, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15bec

dec_label_pc_15bec:                               ; preds = %dec_label_pc_15bec.dec_label_pc_15bec_crit_edge, %dec_label_pc_15be8
  %v0_15bf0 = phi i32 [ %v12_15bf8, %dec_label_pc_15bec.dec_label_pc_15bec_crit_edge ], [ %v0_15bf094, %dec_label_pc_15be8 ]
  %v0_15bec = phi i32 [ %v0_15bec.pre, %dec_label_pc_15bec.dec_label_pc_15bec_crit_edge ], [ %v0_15bec93, %dec_label_pc_15be8 ]
  %v1_15bec = inttoptr i32 %v0_15bec to i32*
  %v2_15bec = load i32, i32* %v1_15bec, align 4
  %v3_15bec = add i32 %v0_15bec, 4
  %v4_15bec = inttoptr i32 %v3_15bec to i32*
  %v5_15bec = load i32, i32* %v4_15bec, align 4
  store i32 %v5_15bec, i32* %r4.global-to-local, align 4
  %v6_15bec = add i32 %v0_15bec, 8
  %v7_15bec = inttoptr i32 %v6_15bec to i32*
  %v8_15bec = load i32, i32* %v7_15bec, align 4
  store i32 %v8_15bec, i32* %ip.global-to-local, align 4
  %v9_15bec = add i32 %v0_15bec, 12
  %v10_15bec = inttoptr i32 %v9_15bec to i32*
  %v11_15bec = load i32, i32* %v10_15bec, align 4
  store i32 %v11_15bec, i32* %lr.global-to-local, align 4
  %v12_15bec = add i32 %v0_15bec, 16
  store i32 %v12_15bec, i32* %r1.global-to-local, align 4
  %v1_15bf0 = inttoptr i32 %v0_15bf0 to i32*
  store i32 %v2_15bec, i32* %v1_15bf0, align 4
  %v3_15bf0 = add i32 %v0_15bf0, 4
  %v4_15bf0 = inttoptr i32 %v3_15bf0 to i32*
  %v5_15bf0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15bf0, i32* %v4_15bf0, align 4
  %v6_15bf0 = add i32 %v0_15bf0, 8
  %v7_15bf0 = inttoptr i32 %v6_15bf0 to i32*
  %v8_15bf0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_15bf0, i32* %v7_15bf0, align 4
  %v9_15bf0 = add i32 %v0_15bf0, 12
  %v10_15bf0 = inttoptr i32 %v9_15bf0 to i32*
  %v11_15bf0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_15bf0, i32* %v10_15bf0, align 4
  %v12_15bf0 = add i32 %v0_15bf0, 16
  store i32 %v12_15bf0, i32* %r0.global-to-local, align 4
  %v0_15bf4 = load i32, i32* %r1.global-to-local, align 4
  %v1_15bf4 = inttoptr i32 %v0_15bf4 to i32*
  %v2_15bf4 = load i32, i32* %v1_15bf4, align 4
  store i32 %v2_15bf4, i32* @r3, align 4
  %v3_15bf4 = add i32 %v0_15bf4, 4
  %v4_15bf4 = inttoptr i32 %v3_15bf4 to i32*
  %v5_15bf4 = load i32, i32* %v4_15bf4, align 4
  store i32 %v5_15bf4, i32* %r4.global-to-local, align 4
  %v6_15bf4 = add i32 %v0_15bf4, 8
  %v7_15bf4 = inttoptr i32 %v6_15bf4 to i32*
  %v8_15bf4 = load i32, i32* %v7_15bf4, align 4
  store i32 %v8_15bf4, i32* @ip, align 4
  %v9_15bf4 = add i32 %v0_15bf4, 12
  %v10_15bf4 = inttoptr i32 %v9_15bf4 to i32*
  %v11_15bf4 = load i32, i32* %v10_15bf4, align 4
  store i32 %v11_15bf4, i32* %lr.global-to-local, align 4
  %v12_15bf4 = add i32 %v0_15bf4, 16
  store i32 %v12_15bf4, i32* @r1, align 4
  %v1_15bf8 = inttoptr i32 %v12_15bf0 to i32*
  store i32 %v2_15bf4, i32* %v1_15bf8, align 4
  %v3_15bf8 = add i32 %v0_15bf0, 20
  %v4_15bf8 = inttoptr i32 %v3_15bf8 to i32*
  %v5_15bf8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15bf8, i32* %v4_15bf8, align 4
  %v6_15bf8 = add i32 %v0_15bf0, 24
  %v7_15bf8 = inttoptr i32 %v6_15bf8 to i32*
  %v8_15bf8 = load i32, i32* @ip, align 4
  store i32 %v8_15bf8, i32* %v7_15bf8, align 4
  %v9_15bf8 = add i32 %v0_15bf0, 28
  %v10_15bf8 = inttoptr i32 %v9_15bf8 to i32*
  %v11_15bf8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_15bf8, i32* %v10_15bf8, align 4
  %v12_15bf8 = add i32 %v0_15bf0, 32
  store i32 %v12_15bf8, i32* @r0, align 4
  %v0_15bfc = load i32, i32* %r2.global-to-local, align 4
  %v1_15bfc = add i32 %v0_15bfc, -32
  store i32 %v1_15bfc, i32* %r2.global-to-local, align 4
  %v3_15bfc = sub i32 31, %v0_15bfc
  %v4_15bfc = and i32 %v3_15bfc, %v0_15bfc
  %v5_15bfc = icmp slt i32 %v4_15bfc, 0
  %v6_15bfc = icmp slt i32 %v1_15bfc, 0
  %v2_15c00 = xor i1 %v6_15bfc, %v5_15bfc
  br i1 %v2_15c00, label %dec_label_pc_15c04, label %dec_label_pc_15bec.dec_label_pc_15bec_crit_edge

dec_label_pc_15bec.dec_label_pc_15bec_crit_edge:  ; preds = %dec_label_pc_15bec
  %v0_15bec.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_15bec

dec_label_pc_15c04:                               ; preds = %dec_label_pc_15bec
  %v1_15c04 = add i32 %v0_15bfc, -16
  %v3_15c04 = add i32 %v0_15bfc, 2147483616
  %v4_15c04 = and i32 %v1_15c04, %v3_15c04
  %v5_15c04 = icmp slt i32 %v4_15c04, 0
  store i1 %v5_15c04, i1* %cpsr_v.global-to-local, align 1
  %v6_15c04 = icmp slt i32 %v1_15c04, 0
  store i1 %v6_15c04, i1* %cpsr_n.global-to-local, align 1
  %v7_15c04 = icmp eq i32 %v1_15c04, 0
  store i1 %v7_15c04, i1* %cpsr_z.global-to-local, align 1
  %v2_15c08 = xor i1 %v6_15c04, %v5_15c04
  br i1 %v2_15c08, label %bb137, label %bb136

bb136:                                            ; preds = %dec_label_pc_15c04
  %v3_15c08 = load i32, i32* @r1, align 4
  %v4_15c08 = inttoptr i32 %v3_15c08 to i32*
  %v5_15c08 = load i32, i32* %v4_15c08, align 4
  store i32 %v5_15c08, i32* @r3, align 4
  %v6_15c08 = add i32 %v3_15c08, 4
  %v7_15c08 = inttoptr i32 %v6_15c08 to i32*
  %v8_15c08 = load i32, i32* %v7_15c08, align 4
  store i32 %v8_15c08, i32* %r4.global-to-local, align 4
  %v9_15c08 = add i32 %v3_15c08, 8
  %v10_15c08 = inttoptr i32 %v9_15c08 to i32*
  %v11_15c08 = load i32, i32* %v10_15c08, align 4
  store i32 %v11_15c08, i32* @ip, align 4
  %v12_15c08 = add i32 %v3_15c08, 12
  %v13_15c08 = inttoptr i32 %v12_15c08 to i32*
  %v14_15c08 = load i32, i32* %v13_15c08, align 4
  store i32 %v14_15c08, i32* %lr.global-to-local, align 4
  %v15_15c08 = add i32 %v3_15c08, 16
  store i32 %v15_15c08, i32* @r1, align 4
  %v4_15c0c = inttoptr i32 %v12_15bf8 to i32*
  store i32 %v5_15c08, i32* %v4_15c0c, align 4
  %v6_15c0c = add i32 %v0_15bf0, 36
  %v7_15c0c = inttoptr i32 %v6_15c0c to i32*
  %v8_15c0c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v8_15c0c, i32* %v7_15c0c, align 4
  %v9_15c0c = add i32 %v0_15bf0, 40
  %v10_15c0c = inttoptr i32 %v9_15c0c to i32*
  %v11_15c0c = load i32, i32* @ip, align 4
  store i32 %v11_15c0c, i32* %v10_15c0c, align 4
  %v12_15c0c = add i32 %v0_15bf0, 44
  %v13_15c0c = inttoptr i32 %v12_15c0c to i32*
  %v14_15c0c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v14_15c0c, i32* %v13_15c0c, align 4
  %v15_15c0c = add i32 %v0_15bf0, 48
  store i32 %v15_15c0c, i32* @r0, align 4
  %v3_15c10 = load i32, i32* %r2.global-to-local, align 4
  %v4_15c10 = add i32 %v3_15c10, -16
  store i32 %v4_15c10, i32* %r2.global-to-local, align 4
  br label %bb137

bb137:                                            ; preds = %dec_label_pc_15c04, %bb136
  %v3_15c20102111 = phi i32 [ %v15_15c0c, %bb136 ], [ %v12_15bf8, %dec_label_pc_15c04 ]
  %v0_15c18.pre = phi i32 [ %v4_15c10, %bb136 ], [ %v1_15bfc, %dec_label_pc_15c04 ]
  %v2_15c14 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15c14, i32* @r4, align 4
  br label %dec_label_pc_15c18

dec_label_pc_15c18:                               ; preds = %dec_label_pc_15be0, %bb137
  %v3_15c20101 = phi i32 [ %v0_15bf094, %dec_label_pc_15be0 ], [ %v3_15c20102111, %bb137 ]
  %v0_15c18 = phi i32 [ %v1_15be0, %dec_label_pc_15be0 ], [ %v0_15c18.pre, %bb137 ]
  %v1_15c18 = add i32 %v0_15c18, 20
  store i32 %v1_15c18, i32* %r2.global-to-local, align 4
  %v3_15c18 = sub i32 0, %v0_15c18
  %v4_15c18 = and i32 %v1_15c18, %v3_15c18
  %v5_15c18 = icmp slt i32 %v4_15c18, 0
  store i1 %v5_15c18, i1* %cpsr_v.global-to-local, align 1
  %v6_15c18 = icmp slt i32 %v1_15c18, 0
  store i1 %v6_15c18, i1* %cpsr_n.global-to-local, align 1
  %v7_15c18 = icmp eq i32 %v1_15c18, 0
  store i1 %v7_15c18, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15c1c

dec_label_pc_15c1c:                               ; preds = %.thread115, %dec_label_pc_15c18
  %v0_15c2c.pre157 = phi i32 [ %v0_15c2c.pre, %.thread115 ], [ %v1_15c18, %dec_label_pc_15c18 ]
  %v3_15c20 = phi i32 [ %v3_15c2099116, %.thread115 ], [ %v3_15c20101, %dec_label_pc_15c18 ]
  %v1_15c24 = phi i1 [ %v1_15c28, %.thread115 ], [ %v5_15c18, %dec_label_pc_15c18 ]
  %v0_15c24 = phi i1 [ %v0_15c28, %.thread115 ], [ %v6_15c18, %dec_label_pc_15c18 ]
  %v2_15c1c = xor i1 %v1_15c24, %v0_15c24
  br i1 %v2_15c1c, label %.thread115, label %bb138

bb138:                                            ; preds = %dec_label_pc_15c1c
  %v3_15c1c = load i32, i32* @r1, align 4
  %v4_15c1c = inttoptr i32 %v3_15c1c to i32*
  %v5_15c1c = load i32, i32* %v4_15c1c, align 4
  store i32 %v5_15c1c, i32* @r3, align 4
  %v6_15c1c = add i32 %v3_15c1c, 4
  %v7_15c1c = inttoptr i32 %v6_15c1c to i32*
  %v8_15c1c = load i32, i32* %v7_15c1c, align 4
  store i32 %v8_15c1c, i32* @ip, align 4
  %v9_15c1c = add i32 %v3_15c1c, 8
  %v10_15c1c = inttoptr i32 %v9_15c1c to i32*
  %v11_15c1c = load i32, i32* %v10_15c1c, align 4
  store i32 %v11_15c1c, i32* %lr.global-to-local, align 4
  %v12_15c1c = add i32 %v3_15c1c, 12
  store i32 %v12_15c1c, i32* @r1, align 4
  %v4_15c20 = inttoptr i32 %v3_15c20 to i32*
  store i32 %v5_15c1c, i32* %v4_15c20, align 4
  %v6_15c20 = add i32 %v3_15c20, 4
  %v7_15c20 = inttoptr i32 %v6_15c20 to i32*
  %v8_15c20 = load i32, i32* @ip, align 4
  store i32 %v8_15c20, i32* %v7_15c20, align 4
  %v9_15c20 = add i32 %v3_15c20, 8
  %v10_15c20 = inttoptr i32 %v9_15c20 to i32*
  %v11_15c20 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_15c20, i32* %v10_15c20, align 4
  %v12_15c20 = add i32 %v3_15c20, 12
  store i32 %v12_15c20, i32* @r0, align 4
  %v3_15c24 = load i32, i32* %r2.global-to-local, align 4
  %v4_15c24 = add i32 %v3_15c24, -12
  store i32 %v4_15c24, i32* %r2.global-to-local, align 4
  %v6_15c24 = sub i32 11, %v3_15c24
  %v7_15c24 = and i32 %v6_15c24, %v3_15c24
  %v8_15c24 = icmp slt i32 %v7_15c24, 0
  store i1 %v8_15c24, i1* %cpsr_v.global-to-local, align 1
  %v9_15c24 = icmp slt i32 %v4_15c24, 0
  store i1 %v9_15c24, i1* %cpsr_n.global-to-local, align 1
  %v10_15c24 = icmp eq i32 %v3_15c24, 12
  store i1 %v10_15c24, i1* %cpsr_z.global-to-local, align 1
  br label %.thread115

.thread115:                                       ; preds = %dec_label_pc_15c1c, %bb138
  %v0_15c2c.pre = phi i32 [ %v4_15c24, %bb138 ], [ %v0_15c2c.pre157, %dec_label_pc_15c1c ]
  %v3_15c2099116 = phi i32 [ %v12_15c20, %bb138 ], [ %v3_15c20, %dec_label_pc_15c1c ]
  %v1_15c28 = phi i1 [ %v8_15c24, %bb138 ], [ %v1_15c24, %dec_label_pc_15c1c ]
  %v0_15c28 = phi i1 [ %v9_15c24, %bb138 ], [ %v0_15c24, %dec_label_pc_15c1c ]
  %v2_15c28 = xor i1 %v1_15c28, %v0_15c28
  br i1 %v2_15c28, label %dec_label_pc_15c2c, label %dec_label_pc_15c1c

dec_label_pc_15c2c:                               ; preds = %.thread115, %dec_label_pc_15bd8
  %v4_15c3c = phi i32 [ %v0_15bf094, %dec_label_pc_15bd8 ], [ %v3_15c2099116, %.thread115 ]
  %v0_15c2c = phi i32 [ %v1_15bd8, %dec_label_pc_15bd8 ], [ %v0_15c2c.pre, %.thread115 ]
  %v1_15c2c = add i32 %v0_15c2c, 8
  store i32 %v1_15c2c, i32* %r2.global-to-local, align 4
  %v3_15c2c = sub i32 0, %v0_15c2c
  %v4_15c2c = and i32 %v1_15c2c, %v3_15c2c
  %v5_15c2c = icmp slt i32 %v4_15c2c, 0
  store i1 %v5_15c2c, i1* %cpsr_v.global-to-local, align 1
  %v6_15c2c = icmp slt i32 %v1_15c2c, 0
  store i1 %v6_15c2c, i1* %cpsr_n.global-to-local, align 1
  %v7_15c2c = icmp eq i32 %v1_15c2c, 0
  store i1 %v7_15c2c, i1* %cpsr_z.global-to-local, align 1
  %v2_15c30 = xor i1 %v6_15c2c, %v5_15c2c
  br i1 %v2_15c30, label %bb140, label %dec_label_pc_15c34

dec_label_pc_15c34:                               ; preds = %dec_label_pc_15c2c
  %v1_15c34 = add i32 %v0_15c2c, 4
  store i32 %v1_15c34, i32* %r2.global-to-local, align 4
  %v3_15c34 = sub i32 -5, %v0_15c2c
  %v4_15c34 = and i32 %v3_15c34, %v1_15c2c
  %v5_15c34 = icmp slt i32 %v4_15c34, 0
  store i1 %v5_15c34, i1* %cpsr_v.global-to-local, align 1
  %v6_15c34 = icmp slt i32 %v1_15c34, 0
  store i1 %v6_15c34, i1* %cpsr_n.global-to-local, align 1
  %v7_15c34 = icmp eq i32 %v1_15c2c, 4
  store i1 %v7_15c34, i1* %cpsr_z.global-to-local, align 1
  %v2_15c38 = xor i1 %v6_15c34, %v5_15c34
  %v3_15c38 = load i32, i32* @r1, align 4
  %v4_15c38 = inttoptr i32 %v3_15c38 to i32*
  %v5_15c38 = load i32, i32* %v4_15c38, align 4
  store i32 %v5_15c38, i32* @r3, align 4
  %v7_15c38 = add i32 %v3_15c38, 4
  br i1 %v2_15c38, label %.thread122, label %bb139

.thread122:                                       ; preds = %dec_label_pc_15c34
  store i32 %v7_15c38, i32* @r1, align 4
  %v5_15c3c = inttoptr i32 %v4_15c3c to i32*
  store i32 %v5_15c38, i32* %v5_15c3c, align 4
  %v6_15c3c = load i32, i32* @r0, align 4
  %v7_15c3c = add i32 %v6_15c3c, 4
  store i32 %v7_15c3c, i32* @r0, align 4
  %v0_15c4c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb140

bb139:                                            ; preds = %dec_label_pc_15c34
  %v7_15c40 = inttoptr i32 %v7_15c38 to i32*
  %v8_15c40 = load i32, i32* %v7_15c40, align 4
  store i32 %v8_15c40, i32* @ip, align 4
  %v9_15c40 = add i32 %v3_15c38, 8
  store i32 %v9_15c40, i32* @r1, align 4
  %v4_15c44 = inttoptr i32 %v4_15c3c to i32*
  store i32 %v5_15c38, i32* %v4_15c44, align 4
  %v6_15c44 = add i32 %v4_15c3c, 4
  %v7_15c44 = inttoptr i32 %v6_15c44 to i32*
  %v8_15c44 = load i32, i32* @ip, align 4
  store i32 %v8_15c44, i32* %v7_15c44, align 4
  %v9_15c44 = add i32 %v4_15c3c, 8
  store i32 %v9_15c44, i32* @r0, align 4
  %v3_15c48 = load i32, i32* %r2.global-to-local, align 4
  %v4_15c48 = add i32 %v3_15c48, -4
  store i32 %v4_15c48, i32* %r2.global-to-local, align 4
  br label %bb140

bb140:                                            ; preds = %.thread122, %.thread128, %dec_label_pc_15c2c, %bb, %dec_label_pc_15dfc, %dec_label_pc_15d90, %dec_label_pc_15d24, %bb139
  %v0_15c4c = phi i32 [ %v0_15c4c.pre, %.thread122 ], [ %v2_15c9c, %.thread128 ], [ %v1_15c2c, %dec_label_pc_15c2c ], [ %v2_15bc0, %bb ], [ %v0_15c4c61, %dec_label_pc_15dfc ], [ %v0_15c4c60, %dec_label_pc_15d90 ], [ %v0_15c4c59, %dec_label_pc_15d24 ], [ %v4_15c48, %bb139 ]
  %v1_15c4c = add i32 %v0_15c4c, 4
  store i32 %v1_15c4c, i32* %r2.global-to-local, align 4
  %v3_15c4c = sub i32 0, %v0_15c4c
  %v4_15c4c = and i32 %v1_15c4c, %v3_15c4c
  %v5_15c4c = icmp slt i32 %v4_15c4c, 0
  store i1 %v5_15c4c, i1* %cpsr_v.global-to-local, align 1
  %v6_15c4c = icmp slt i32 %v1_15c4c, 0
  store i1 %v6_15c4c, i1* %cpsr_n.global-to-local, align 1
  %v7_15c4c = icmp eq i32 %v1_15c4c, 0
  store i1 %v7_15c4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15c4c, label %bb141, label %bb140.bb142_crit_edge

bb140.bb142_crit_edge:                            ; preds = %bb140
  %v0_15c54.pre = load i32, i32* @r3, align 4
  br label %bb142

bb141:                                            ; preds = %bb140
  %v3_15c50 = load i8*, i8** %stack_var_-8, align 4
  %v4_15c50 = ptrtoint i8* %v3_15c50 to i32
  store i32 %v4_15c50, i32* @r0, align 4
  br label %bb142

bb142:                                            ; preds = %bb140.bb142_crit_edge, %bb141
  %v0_15c54 = phi i32 [ %v0_15c54.pre, %bb140.bb142_crit_edge ], [ %v8_15bbc, %bb141 ]
  call void @__pseudo_cond_branch(i1 %v7_15c4c, i32 %v0_15c54)
  %v0_15c58 = load i32, i32* %r2.global-to-local, align 4
  %v1_15c58 = add i32 %v0_15c58, -2
  %v3_15c58 = sub i32 1, %v0_15c58
  %v4_15c58 = and i32 %v3_15c58, %v0_15c58
  %v5_15c58 = icmp slt i32 %v4_15c58, 0
  store i1 %v5_15c58, i1* %cpsr_v.global-to-local, align 1
  %v6_15c58 = icmp slt i32 %v1_15c58, 0
  store i1 %v6_15c58, i1* %cpsr_n.global-to-local, align 1
  %v7_15c58 = icmp eq i32 %v0_15c58, 2
  store i1 %v7_15c58, i1* %cpsr_z.global-to-local, align 1
  %v0_15c5c = load i32, i32* @r1, align 4
  %v1_15c5c = inttoptr i32 %v0_15c5c to i8*
  %v2_15c5c = load i8, i8* %v1_15c5c, align 1
  %v5_15c5c = add i32 %v0_15c5c, 1
  store i32 %v5_15c5c, i32* %r1.global-to-local, align 4
  %v2_15c60 = load i32, i32* @r0, align 4
  %v3_15c60 = inttoptr i32 %v2_15c60 to i8*
  store i8 %v2_15c5c, i8* %v3_15c60, align 1
  %v4_15c60 = load i32, i32* @r0, align 4
  %v5_15c60 = add i32 %v4_15c60, 1
  store i32 %v5_15c60, i32* %r0.global-to-local, align 4
  %v0_15c64 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_15c64 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_15c64 = xor i1 %v0_15c64, %v1_15c64
  br i1 %v2_15c64, label %.thread125, label %bb143

bb143:                                            ; preds = %bb142
  %v3_15c64 = load i32, i32* %r1.global-to-local, align 4
  %v4_15c64 = inttoptr i32 %v3_15c64 to i8*
  %v5_15c64 = load i8, i8* %v4_15c64, align 1
  %v8_15c64 = add i32 %v3_15c64, 1
  store i32 %v8_15c64, i32* %r1.global-to-local, align 4
  %v6_15c68 = inttoptr i32 %v5_15c60 to i8*
  store i8 %v5_15c64, i8* %v6_15c68, align 1
  %v7_15c68 = load i32, i32* %r0.global-to-local, align 4
  %v8_15c68 = add i32 %v7_15c68, 1
  store i32 %v8_15c68, i32* %r0.global-to-local, align 4
  %v1_15c6c.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_15c6c.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread125

.thread125:                                       ; preds = %bb142, %bb143
  %v7_15c70 = phi i32 [ %v8_15c68, %bb143 ], [ %v5_15c60, %bb142 ]
  %v2_15c70 = phi i1 [ %v2_15c6c.pre, %bb143 ], [ %v1_15c64, %bb142 ]
  %v1_15c70 = phi i1 [ %v1_15c6c.pre, %bb143 ], [ %v0_15c64, %bb142 ]
  %v0_15c6c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_15c6c = xor i1 %v2_15c70, %v1_15c70
  %v4_15c6c = or i1 %v0_15c6c, %v3_15c6c
  br i1 %v4_15c6c, label %.thread126, label %bb144

bb144:                                            ; preds = %.thread125
  %v5_15c6c = load i32, i32* %r1.global-to-local, align 4
  %v6_15c6c = inttoptr i32 %v5_15c6c to i8*
  %v7_15c6c = load i8, i8* %v6_15c6c, align 1
  %v10_15c6c = add i32 %v5_15c6c, 1
  store i32 %v10_15c6c, i32* %r1.global-to-local, align 4
  %v8_15c70 = inttoptr i32 %v7_15c70 to i8*
  store i8 %v7_15c6c, i8* %v8_15c70, align 1
  %v9_15c70 = load i32, i32* %r0.global-to-local, align 4
  %v10_15c70 = add i32 %v9_15c70, 1
  store i32 %v10_15c70, i32* %r0.global-to-local, align 4
  br label %.thread126

.thread126:                                       ; preds = %.thread125, %bb144
  %v2_15c74 = load i8*, i8** %stack_var_-8, align 4
  %v3_15c74 = ptrtoint i8* %v2_15c74 to i32
  store i32 %v3_15c74, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v8_15bbc)
  %v0_15c7c.pre = load i32, i32* @ip, align 4
  %v0_15c84.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_15c88.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_15c7c

dec_label_pc_15c7c:                               ; preds = %dec_label_pc_15bc8, %.thread126
  %v2_15c88 = phi i32 [ %v1_15bb0, %dec_label_pc_15bc8 ], [ %v2_15c88.pre, %.thread126 ]
  %v0_15c84 = phi i32 [ %v0_15bb0, %dec_label_pc_15bc8 ], [ %v0_15c84.pre, %.thread126 ]
  %v0_15c7c = phi i32 [ %v1_15bc8, %dec_label_pc_15bc8 ], [ %v0_15c7c.pre, %.thread126 ]
  %v1_15c7c = sub i32 4, %v0_15c7c
  store i32 %v1_15c7c, i32* @ip, align 4
  %v1_15c80 = add i32 %v1_15c7c, -2
  %v3_15c80 = sub i32 1, %v1_15c7c
  %v4_15c80 = and i32 %v3_15c80, %v1_15c7c
  %v5_15c80 = icmp slt i32 %v4_15c80, 0
  store i1 %v5_15c80, i1* %cpsr_v.global-to-local, align 1
  %v6_15c80 = icmp slt i32 %v1_15c80, 0
  store i1 %v6_15c80, i1* %cpsr_n.global-to-local, align 1
  %v7_15c80 = icmp eq i32 %v1_15c7c, 2
  store i1 %v7_15c80, i1* %cpsr_z.global-to-local, align 1
  %v1_15c84 = inttoptr i32 %v0_15c84 to i8*
  %v2_15c84 = load i8, i8* %v1_15c84, align 1
  %v3_15c84 = zext i8 %v2_15c84 to i32
  store i32 %v3_15c84, i32* @r3, align 4
  %v5_15c84 = add i32 %v0_15c84, 1
  store i32 %v5_15c84, i32* @r1, align 4
  %v3_15c88 = inttoptr i32 %v2_15c88 to i8*
  store i8 %v2_15c84, i8* %v3_15c88, align 1
  %v4_15c88 = load i32, i32* @r0, align 4
  %v5_15c88 = add i32 %v4_15c88, 1
  store i32 %v5_15c88, i32* @r0, align 4
  %v0_15c8c = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_15c8c = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_15c8c = xor i1 %v0_15c8c, %v1_15c8c
  br i1 %v2_15c8c, label %.thread127, label %bb145

bb145:                                            ; preds = %dec_label_pc_15c7c
  %v3_15c8c = load i32, i32* @r1, align 4
  %v4_15c8c = inttoptr i32 %v3_15c8c to i8*
  %v5_15c8c = load i8, i8* %v4_15c8c, align 1
  %v6_15c8c = zext i8 %v5_15c8c to i32
  store i32 %v6_15c8c, i32* @r3, align 4
  %v8_15c8c = add i32 %v3_15c8c, 1
  store i32 %v8_15c8c, i32* @r1, align 4
  %v6_15c90 = inttoptr i32 %v5_15c88 to i8*
  store i8 %v5_15c8c, i8* %v6_15c90, align 1
  %v7_15c90 = load i32, i32* @r0, align 4
  %v8_15c90 = add i32 %v7_15c90, 1
  store i32 %v8_15c90, i32* @r0, align 4
  %v1_15c94.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_15c94.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread127

.thread127:                                       ; preds = %dec_label_pc_15c7c, %bb145
  %v7_15c98 = phi i32 [ %v8_15c90, %bb145 ], [ %v5_15c88, %dec_label_pc_15c7c ]
  %v2_15c98 = phi i1 [ %v2_15c94.pre, %bb145 ], [ %v1_15c8c, %dec_label_pc_15c7c ]
  %v1_15c98 = phi i1 [ %v1_15c94.pre, %bb145 ], [ %v0_15c8c, %dec_label_pc_15c7c ]
  %v0_15c94 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_15c94 = xor i1 %v2_15c98, %v1_15c98
  %v4_15c94 = or i1 %v0_15c94, %v3_15c94
  br i1 %v4_15c94, label %.thread128, label %bb146

bb146:                                            ; preds = %.thread127
  %v5_15c94 = load i32, i32* @r1, align 4
  %v6_15c94 = inttoptr i32 %v5_15c94 to i8*
  %v7_15c94 = load i8, i8* %v6_15c94, align 1
  %v8_15c94 = zext i8 %v7_15c94 to i32
  store i32 %v8_15c94, i32* @r3, align 4
  %v10_15c94 = add i32 %v5_15c94, 1
  store i32 %v10_15c94, i32* @r1, align 4
  %v8_15c98 = inttoptr i32 %v7_15c98 to i8*
  store i8 %v7_15c94, i8* %v8_15c98, align 1
  %v9_15c98 = load i32, i32* @r0, align 4
  %v10_15c98 = add i32 %v9_15c98, 1
  store i32 %v10_15c98, i32* @r0, align 4
  br label %.thread128

.thread128:                                       ; preds = %.thread127, %bb146
  %v0_15dcc77 = phi i32 [ %v10_15c98, %bb146 ], [ %v7_15c98, %.thread127 ]
  %v0_15c9c = load i32, i32* %r2.global-to-local, align 4
  %v1_15c9c = load i32, i32* @ip, align 4
  %v2_15c9c = sub i32 %v0_15c9c, %v1_15c9c
  store i32 %v2_15c9c, i32* %r2.global-to-local, align 4
  %v4_15c9c = xor i32 %v1_15c9c, %v0_15c9c
  %v5_15c9c = xor i32 %v2_15c9c, %v0_15c9c
  %v6_15c9c = and i32 %v5_15c9c, %v4_15c9c
  %v7_15c9c = icmp slt i32 %v6_15c9c, 0
  store i1 %v7_15c9c, i1* %cpsr_v.global-to-local, align 1
  %v8_15c9c = icmp slt i32 %v2_15c9c, 0
  store i1 %v8_15c9c, i1* %cpsr_n.global-to-local, align 1
  %v9_15c9c = icmp eq i32 %v0_15c9c, %v1_15c9c
  store i1 %v9_15c9c, i1* %cpsr_z.global-to-local, align 1
  %v2_15ca0 = xor i1 %v8_15c9c, %v7_15c9c
  br i1 %v2_15ca0, label %bb140, label %dec_label_pc_15ca4

dec_label_pc_15ca4:                               ; preds = %.thread128
  %v0_15ca4 = load i32, i32* @r1, align 4
  %v1_15ca4 = urem i32 %v0_15ca4, 4
  store i32 %v1_15ca4, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15ca4 = icmp eq i32 %v1_15ca4, 0
  store i1 %v2_15ca4, i1* %cpsr_z.global-to-local, align 1
  %extract.t131 = trunc i32 %v0_15ca4 to i2
  br i1 %v2_15ca4, label %dec_label_pc_15bd8, label %dec_label_pc_15cac

dec_label_pc_15cac:                               ; preds = %dec_label_pc_15bd0, %dec_label_pc_15ca4
  %v0_15dcc76 = phi i32 [ %v1_15bb0, %dec_label_pc_15bd0 ], [ %v0_15dcc77, %dec_label_pc_15ca4 ]
  %v0_15d34 = phi i32 [ %v2_15bc0, %dec_label_pc_15bd0 ], [ %v2_15c9c, %dec_label_pc_15ca4 ]
  %v0_15cb4.off0 = phi i2 [ %extract.t, %dec_label_pc_15bd0 ], [ %extract.t131, %dec_label_pc_15ca4 ]
  %v0_15cac = phi i32 [ %v0_15bb0, %dec_label_pc_15bd0 ], [ %v0_15ca4, %dec_label_pc_15ca4 ]
  %v1_15cac = and i32 %v0_15cac, -4
  store i32 %v1_15cac, i32* %r1.global-to-local, align 4
  %v1_15cb0 = inttoptr i32 %v1_15cac to i32*
  %v2_15cb0 = load i32, i32* %v1_15cb0, align 4
  store i32 %v2_15cb0, i32* %lr.global-to-local, align 4
  %v4_15cb0 = add i32 %v1_15cac, 4
  store i32 %v4_15cb0, i32* %r1.global-to-local, align 4
  %v1_15d2c = add i32 %v0_15d34, -12
  %v3_15d2c = sub i32 11, %v0_15d34
  %v4_15d2c = and i32 %v3_15d2c, %v0_15d34
  %v5_15d2c = icmp slt i32 %v4_15d2c, 0
  store i1 %v5_15d2c, i1* %cpsr_v.global-to-local, align 1
  %v6_15d2c = icmp slt i32 %v1_15d2c, 0
  store i1 %v6_15d2c, i1* %cpsr_n.global-to-local, align 1
  %v7_15d2c = icmp eq i32 %v0_15d34, 12
  store i1 %v7_15d2c, i1* %cpsr_z.global-to-local, align 1
  %v2_15d30 = xor i1 %v6_15d2c, %v5_15d2c
  switch i2 %v0_15cb4.off0, label %dec_label_pc_15cc0 [
    i2 -1, label %dec_label_pc_15d98
    i2 -2, label %dec_label_pc_15d2c
  ]

dec_label_pc_15cc0:                               ; preds = %dec_label_pc_15cac
  br i1 %v2_15d30, label %dec_label_pc_15d0c, label %dec_label_pc_15cc8

dec_label_pc_15cc8:                               ; preds = %dec_label_pc_15cc0
  store i32 %v1_15d2c, i32* %r2.global-to-local, align 4
  %v3_15ccc = load i32, i32* @r4, align 4
  store i32 %v3_15ccc, i32* %stack_var_-16, align 4
  %v6_15ccc = load i32, i32* @r5, align 4
  store i32 %v6_15ccc, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15cd0

dec_label_pc_15cd0:                               ; preds = %dec_label_pc_15cd0.dec_label_pc_15cd0_crit_edge, %dec_label_pc_15cc8
  %v0_15cf4 = phi i32 [ %v12_15cf4, %dec_label_pc_15cd0.dec_label_pc_15cd0_crit_edge ], [ %v0_15dcc76, %dec_label_pc_15cc8 ]
  %v0_15cd4 = phi i32 [ %v0_15cd4.pre, %dec_label_pc_15cd0.dec_label_pc_15cd0_crit_edge ], [ %v4_15cb0, %dec_label_pc_15cc8 ]
  %v0_15cd0 = phi i32 [ %v0_15cd0.pre, %dec_label_pc_15cd0.dec_label_pc_15cd0_crit_edge ], [ %v2_15cb0, %dec_label_pc_15cc8 ]
  %v3_15cd0 = udiv i32 %v0_15cd0, 256
  %v1_15cd4 = inttoptr i32 %v0_15cd4 to i32*
  %v2_15cd4 = load i32, i32* %v1_15cd4, align 4
  store i32 %v2_15cd4, i32* %r4.global-to-local, align 4
  %v3_15cd4 = add i32 %v0_15cd4, 4
  %v4_15cd4 = inttoptr i32 %v3_15cd4 to i32*
  %v5_15cd4 = load i32, i32* %v4_15cd4, align 4
  store i32 %v5_15cd4, i32* %r5.global-to-local, align 4
  %v6_15cd4 = add i32 %v0_15cd4, 8
  %v7_15cd4 = inttoptr i32 %v6_15cd4 to i32*
  %v8_15cd4 = load i32, i32* %v7_15cd4, align 4
  store i32 %v8_15cd4, i32* %ip.global-to-local, align 4
  %v9_15cd4 = add i32 %v0_15cd4, 12
  %v10_15cd4 = inttoptr i32 %v9_15cd4 to i32*
  %v11_15cd4 = load i32, i32* %v10_15cd4, align 4
  store i32 %v11_15cd4, i32* %lr.global-to-local, align 4
  %v12_15cd4 = add i32 %v0_15cd4, 16
  store i32 %v12_15cd4, i32* %r1.global-to-local, align 4
  %v4_15cd8 = mul i32 %v2_15cd4, 16777216
  %v5_15cd8 = or i32 %v4_15cd8, %v3_15cd0
  store i32 %v5_15cd8, i32* @r3, align 4
  %v3_15cdc = udiv i32 %v2_15cd4, 256
  %v4_15ce0 = mul i32 %v5_15cd4, 16777216
  %v5_15ce0 = or i32 %v4_15ce0, %v3_15cdc
  store i32 %v5_15ce0, i32* %r4.global-to-local, align 4
  %v3_15ce4 = udiv i32 %v5_15cd4, 256
  %v4_15ce8 = mul i32 %v8_15cd4, 16777216
  %v5_15ce8 = or i32 %v4_15ce8, %v3_15ce4
  store i32 %v5_15ce8, i32* %r5.global-to-local, align 4
  %v3_15cec = udiv i32 %v8_15cd4, 256
  %v4_15cf0 = mul i32 %v11_15cd4, 16777216
  %v5_15cf0 = or i32 %v4_15cf0, %v3_15cec
  store i32 %v5_15cf0, i32* @ip, align 4
  %v1_15cf4 = inttoptr i32 %v0_15cf4 to i32*
  store i32 %v5_15cd8, i32* %v1_15cf4, align 4
  %v3_15cf4 = add i32 %v0_15cf4, 4
  %v4_15cf4 = inttoptr i32 %v3_15cf4 to i32*
  %v5_15cf4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15cf4, i32* %v4_15cf4, align 4
  %v6_15cf4 = add i32 %v0_15cf4, 8
  %v7_15cf4 = inttoptr i32 %v6_15cf4 to i32*
  %v8_15cf4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_15cf4, i32* %v7_15cf4, align 4
  %v9_15cf4 = add i32 %v0_15cf4, 12
  %v10_15cf4 = inttoptr i32 %v9_15cf4 to i32*
  %v11_15cf4 = load i32, i32* @ip, align 4
  store i32 %v11_15cf4, i32* %v10_15cf4, align 4
  %v12_15cf4 = add i32 %v0_15cf4, 16
  store i32 %v12_15cf4, i32* @r0, align 4
  %v0_15cf8 = load i32, i32* %r2.global-to-local, align 4
  %v1_15cf8 = add i32 %v0_15cf8, -16
  store i32 %v1_15cf8, i32* %r2.global-to-local, align 4
  %v3_15cf8 = sub i32 15, %v0_15cf8
  %v4_15cf8 = and i32 %v3_15cf8, %v0_15cf8
  %v5_15cf8 = icmp slt i32 %v4_15cf8, 0
  %v6_15cf8 = icmp slt i32 %v1_15cf8, 0
  %v2_15cfc = xor i1 %v6_15cf8, %v5_15cf8
  br i1 %v2_15cfc, label %dec_label_pc_15d00, label %dec_label_pc_15cd0.dec_label_pc_15cd0_crit_edge

dec_label_pc_15cd0.dec_label_pc_15cd0_crit_edge:  ; preds = %dec_label_pc_15cd0
  %v0_15cd0.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_15cd4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15cd0

dec_label_pc_15d00:                               ; preds = %dec_label_pc_15cd0
  %v2_15d00 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15d00, i32* @r4, align 4
  %v5_15d00 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_15d00, i32* @r5, align 4
  %v1_15d04 = add i32 %v0_15cf8, -4
  store i32 %v1_15d04, i32* %r2.global-to-local, align 4
  %v3_15d04 = add i32 %v0_15cf8, 2147483632
  %v4_15d04 = and i32 %v1_15d04, %v3_15d04
  %v5_15d04 = icmp slt i32 %v4_15d04, 0
  store i1 %v5_15d04, i1* %cpsr_v.global-to-local, align 1
  %v6_15d04 = icmp slt i32 %v1_15d04, 0
  store i1 %v6_15d04, i1* %cpsr_n.global-to-local, align 1
  %v7_15d04 = icmp eq i32 %v1_15d04, 0
  store i1 %v7_15d04, i1* %cpsr_z.global-to-local, align 1
  %v2_15d08 = xor i1 %v6_15d04, %v5_15d04
  br i1 %v2_15d08, label %dec_label_pc_15d24, label %dec_label_pc_15d0c

dec_label_pc_15d0c:                               ; preds = %dec_label_pc_15d00, %dec_label_pc_15cc0, %dec_label_pc_15d0c
  %v1_15d18 = phi i32 [ %v4_15d18, %dec_label_pc_15d0c ], [ %v12_15cf4, %dec_label_pc_15d00 ], [ %v0_15dcc76, %dec_label_pc_15cc0 ]
  %v0_15d0c = load i32, i32* %lr.global-to-local, align 4
  %v3_15d0c = udiv i32 %v0_15d0c, 256
  store i32 %v3_15d0c, i32* %ip.global-to-local, align 4
  %v0_15d10 = load i32, i32* %r1.global-to-local, align 4
  %v1_15d10 = inttoptr i32 %v0_15d10 to i32*
  %v2_15d10 = load i32, i32* %v1_15d10, align 4
  store i32 %v2_15d10, i32* %lr.global-to-local, align 4
  %v4_15d10 = add i32 %v0_15d10, 4
  store i32 %v4_15d10, i32* %r1.global-to-local, align 4
  %v4_15d14 = mul i32 %v2_15d10, 16777216
  %v5_15d14 = or i32 %v4_15d14, %v3_15d0c
  store i32 %v5_15d14, i32* @ip, align 4
  %v2_15d18 = inttoptr i32 %v1_15d18 to i32*
  store i32 %v5_15d14, i32* %v2_15d18, align 4
  %v3_15d18 = load i32, i32* @r0, align 4
  %v4_15d18 = add i32 %v3_15d18, 4
  store i32 %v4_15d18, i32* @r0, align 4
  %v0_15d1c = load i32, i32* %r2.global-to-local, align 4
  %v1_15d1c = add i32 %v0_15d1c, -4
  store i32 %v1_15d1c, i32* %r2.global-to-local, align 4
  %v3_15d1c = sub i32 3, %v0_15d1c
  %v4_15d1c = and i32 %v3_15d1c, %v0_15d1c
  %v5_15d1c = icmp slt i32 %v4_15d1c, 0
  %v6_15d1c = icmp slt i32 %v1_15d1c, 0
  %v2_15d20 = xor i1 %v6_15d1c, %v5_15d1c
  br i1 %v2_15d20, label %dec_label_pc_15d24.loopexit, label %dec_label_pc_15d0c

dec_label_pc_15d24.loopexit:                      ; preds = %dec_label_pc_15d0c
  %v7_15d1c = icmp eq i32 %v0_15d1c, 4
  store i1 %v5_15d1c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_15d1c, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_15d1c, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15d24

dec_label_pc_15d24:                               ; preds = %dec_label_pc_15d24.loopexit, %dec_label_pc_15d00
  %v0_15c4c59 = phi i32 [ %v1_15d1c, %dec_label_pc_15d24.loopexit ], [ %v1_15d04, %dec_label_pc_15d00 ]
  %v0_15d24 = load i32, i32* %r1.global-to-local, align 4
  %v1_15d24 = add i32 %v0_15d24, -3
  store i32 %v1_15d24, i32* @r1, align 4
  br label %bb140

dec_label_pc_15d2c:                               ; preds = %dec_label_pc_15cac
  br i1 %v2_15d30, label %dec_label_pc_15d78, label %dec_label_pc_15d34

dec_label_pc_15d34:                               ; preds = %dec_label_pc_15d2c
  store i32 %v1_15d2c, i32* %r2.global-to-local, align 4
  %v3_15d38 = load i32, i32* @r4, align 4
  store i32 %v3_15d38, i32* %stack_var_-16, align 4
  %v6_15d38 = load i32, i32* @r5, align 4
  store i32 %v6_15d38, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15d3c

dec_label_pc_15d3c:                               ; preds = %dec_label_pc_15d3c.dec_label_pc_15d3c_crit_edge, %dec_label_pc_15d34
  %v0_15d60 = phi i32 [ %v12_15d60, %dec_label_pc_15d3c.dec_label_pc_15d3c_crit_edge ], [ %v0_15dcc76, %dec_label_pc_15d34 ]
  %v0_15d40 = phi i32 [ %v0_15d40.pre, %dec_label_pc_15d3c.dec_label_pc_15d3c_crit_edge ], [ %v4_15cb0, %dec_label_pc_15d34 ]
  %v0_15d3c = phi i32 [ %v0_15d3c.pre, %dec_label_pc_15d3c.dec_label_pc_15d3c_crit_edge ], [ %v2_15cb0, %dec_label_pc_15d34 ]
  %v3_15d3c = udiv i32 %v0_15d3c, 65536
  %v1_15d40 = inttoptr i32 %v0_15d40 to i32*
  %v2_15d40 = load i32, i32* %v1_15d40, align 4
  store i32 %v2_15d40, i32* %r4.global-to-local, align 4
  %v3_15d40 = add i32 %v0_15d40, 4
  %v4_15d40 = inttoptr i32 %v3_15d40 to i32*
  %v5_15d40 = load i32, i32* %v4_15d40, align 4
  store i32 %v5_15d40, i32* %r5.global-to-local, align 4
  %v6_15d40 = add i32 %v0_15d40, 8
  %v7_15d40 = inttoptr i32 %v6_15d40 to i32*
  %v8_15d40 = load i32, i32* %v7_15d40, align 4
  store i32 %v8_15d40, i32* %ip.global-to-local, align 4
  %v9_15d40 = add i32 %v0_15d40, 12
  %v10_15d40 = inttoptr i32 %v9_15d40 to i32*
  %v11_15d40 = load i32, i32* %v10_15d40, align 4
  store i32 %v11_15d40, i32* %lr.global-to-local, align 4
  %v12_15d40 = add i32 %v0_15d40, 16
  store i32 %v12_15d40, i32* %r1.global-to-local, align 4
  %v4_15d44 = mul i32 %v2_15d40, 65536
  %v5_15d44 = or i32 %v4_15d44, %v3_15d3c
  store i32 %v5_15d44, i32* @r3, align 4
  %v3_15d48 = udiv i32 %v2_15d40, 65536
  %v4_15d4c = mul i32 %v5_15d40, 65536
  %v5_15d4c = or i32 %v4_15d4c, %v3_15d48
  store i32 %v5_15d4c, i32* %r4.global-to-local, align 4
  %v3_15d50 = udiv i32 %v5_15d40, 65536
  %v4_15d54 = mul i32 %v8_15d40, 65536
  %v5_15d54 = or i32 %v4_15d54, %v3_15d50
  store i32 %v5_15d54, i32* %r5.global-to-local, align 4
  %v3_15d58 = udiv i32 %v8_15d40, 65536
  %v4_15d5c = mul i32 %v11_15d40, 65536
  %v5_15d5c = or i32 %v4_15d5c, %v3_15d58
  store i32 %v5_15d5c, i32* @ip, align 4
  %v1_15d60 = inttoptr i32 %v0_15d60 to i32*
  store i32 %v5_15d44, i32* %v1_15d60, align 4
  %v3_15d60 = add i32 %v0_15d60, 4
  %v4_15d60 = inttoptr i32 %v3_15d60 to i32*
  %v5_15d60 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15d60, i32* %v4_15d60, align 4
  %v6_15d60 = add i32 %v0_15d60, 8
  %v7_15d60 = inttoptr i32 %v6_15d60 to i32*
  %v8_15d60 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_15d60, i32* %v7_15d60, align 4
  %v9_15d60 = add i32 %v0_15d60, 12
  %v10_15d60 = inttoptr i32 %v9_15d60 to i32*
  %v11_15d60 = load i32, i32* @ip, align 4
  store i32 %v11_15d60, i32* %v10_15d60, align 4
  %v12_15d60 = add i32 %v0_15d60, 16
  store i32 %v12_15d60, i32* @r0, align 4
  %v0_15d64 = load i32, i32* %r2.global-to-local, align 4
  %v1_15d64 = add i32 %v0_15d64, -16
  store i32 %v1_15d64, i32* %r2.global-to-local, align 4
  %v3_15d64 = sub i32 15, %v0_15d64
  %v4_15d64 = and i32 %v3_15d64, %v0_15d64
  %v5_15d64 = icmp slt i32 %v4_15d64, 0
  %v6_15d64 = icmp slt i32 %v1_15d64, 0
  %v2_15d68 = xor i1 %v6_15d64, %v5_15d64
  br i1 %v2_15d68, label %dec_label_pc_15d6c, label %dec_label_pc_15d3c.dec_label_pc_15d3c_crit_edge

dec_label_pc_15d3c.dec_label_pc_15d3c_crit_edge:  ; preds = %dec_label_pc_15d3c
  %v0_15d3c.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_15d40.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15d3c

dec_label_pc_15d6c:                               ; preds = %dec_label_pc_15d3c
  %v2_15d6c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15d6c, i32* @r4, align 4
  %v5_15d6c = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_15d6c, i32* @r5, align 4
  %v1_15d70 = add i32 %v0_15d64, -4
  store i32 %v1_15d70, i32* %r2.global-to-local, align 4
  %v3_15d70 = add i32 %v0_15d64, 2147483632
  %v4_15d70 = and i32 %v1_15d70, %v3_15d70
  %v5_15d70 = icmp slt i32 %v4_15d70, 0
  store i1 %v5_15d70, i1* %cpsr_v.global-to-local, align 1
  %v6_15d70 = icmp slt i32 %v1_15d70, 0
  store i1 %v6_15d70, i1* %cpsr_n.global-to-local, align 1
  %v7_15d70 = icmp eq i32 %v1_15d70, 0
  store i1 %v7_15d70, i1* %cpsr_z.global-to-local, align 1
  %v2_15d74 = xor i1 %v6_15d70, %v5_15d70
  br i1 %v2_15d74, label %dec_label_pc_15d90, label %dec_label_pc_15d78

dec_label_pc_15d78:                               ; preds = %dec_label_pc_15d6c, %dec_label_pc_15d2c, %dec_label_pc_15d78
  %v1_15d84 = phi i32 [ %v4_15d84, %dec_label_pc_15d78 ], [ %v12_15d60, %dec_label_pc_15d6c ], [ %v0_15dcc76, %dec_label_pc_15d2c ]
  %v0_15d78 = load i32, i32* %lr.global-to-local, align 4
  %v3_15d78 = udiv i32 %v0_15d78, 65536
  store i32 %v3_15d78, i32* %ip.global-to-local, align 4
  %v0_15d7c = load i32, i32* %r1.global-to-local, align 4
  %v1_15d7c = inttoptr i32 %v0_15d7c to i32*
  %v2_15d7c = load i32, i32* %v1_15d7c, align 4
  store i32 %v2_15d7c, i32* %lr.global-to-local, align 4
  %v4_15d7c = add i32 %v0_15d7c, 4
  store i32 %v4_15d7c, i32* %r1.global-to-local, align 4
  %v4_15d80 = mul i32 %v2_15d7c, 65536
  %v5_15d80 = or i32 %v4_15d80, %v3_15d78
  store i32 %v5_15d80, i32* @ip, align 4
  %v2_15d84 = inttoptr i32 %v1_15d84 to i32*
  store i32 %v5_15d80, i32* %v2_15d84, align 4
  %v3_15d84 = load i32, i32* @r0, align 4
  %v4_15d84 = add i32 %v3_15d84, 4
  store i32 %v4_15d84, i32* @r0, align 4
  %v0_15d88 = load i32, i32* %r2.global-to-local, align 4
  %v1_15d88 = add i32 %v0_15d88, -4
  store i32 %v1_15d88, i32* %r2.global-to-local, align 4
  %v3_15d88 = sub i32 3, %v0_15d88
  %v4_15d88 = and i32 %v3_15d88, %v0_15d88
  %v5_15d88 = icmp slt i32 %v4_15d88, 0
  %v6_15d88 = icmp slt i32 %v1_15d88, 0
  %v2_15d8c = xor i1 %v6_15d88, %v5_15d88
  br i1 %v2_15d8c, label %dec_label_pc_15d90.loopexit, label %dec_label_pc_15d78

dec_label_pc_15d90.loopexit:                      ; preds = %dec_label_pc_15d78
  %v7_15d88 = icmp eq i32 %v0_15d88, 4
  store i1 %v5_15d88, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_15d88, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_15d88, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15d90

dec_label_pc_15d90:                               ; preds = %dec_label_pc_15d90.loopexit, %dec_label_pc_15d6c
  %v0_15c4c60 = phi i32 [ %v1_15d88, %dec_label_pc_15d90.loopexit ], [ %v1_15d70, %dec_label_pc_15d6c ]
  %v0_15d90 = load i32, i32* %r1.global-to-local, align 4
  %v1_15d90 = add i32 %v0_15d90, -2
  store i32 %v1_15d90, i32* @r1, align 4
  br label %bb140

dec_label_pc_15d98:                               ; preds = %dec_label_pc_15cac
  br i1 %v2_15d30, label %dec_label_pc_15de4, label %dec_label_pc_15da0

dec_label_pc_15da0:                               ; preds = %dec_label_pc_15d98
  store i32 %v1_15d2c, i32* %r2.global-to-local, align 4
  %v3_15da4 = load i32, i32* @r4, align 4
  store i32 %v3_15da4, i32* %stack_var_-16, align 4
  %v6_15da4 = load i32, i32* @r5, align 4
  store i32 %v6_15da4, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15da8

dec_label_pc_15da8:                               ; preds = %dec_label_pc_15da8.dec_label_pc_15da8_crit_edge, %dec_label_pc_15da0
  %v0_15dcc = phi i32 [ %v12_15dcc, %dec_label_pc_15da8.dec_label_pc_15da8_crit_edge ], [ %v0_15dcc76, %dec_label_pc_15da0 ]
  %v0_15dac = phi i32 [ %v0_15dac.pre, %dec_label_pc_15da8.dec_label_pc_15da8_crit_edge ], [ %v4_15cb0, %dec_label_pc_15da0 ]
  %v0_15da8 = phi i32 [ %v0_15da8.pre, %dec_label_pc_15da8.dec_label_pc_15da8_crit_edge ], [ %v2_15cb0, %dec_label_pc_15da0 ]
  %v3_15da8 = udiv i32 %v0_15da8, 16777216
  %v1_15dac = inttoptr i32 %v0_15dac to i32*
  %v2_15dac = load i32, i32* %v1_15dac, align 4
  store i32 %v2_15dac, i32* %r4.global-to-local, align 4
  %v3_15dac = add i32 %v0_15dac, 4
  %v4_15dac = inttoptr i32 %v3_15dac to i32*
  %v5_15dac = load i32, i32* %v4_15dac, align 4
  store i32 %v5_15dac, i32* %r5.global-to-local, align 4
  %v6_15dac = add i32 %v0_15dac, 8
  %v7_15dac = inttoptr i32 %v6_15dac to i32*
  %v8_15dac = load i32, i32* %v7_15dac, align 4
  store i32 %v8_15dac, i32* %ip.global-to-local, align 4
  %v9_15dac = add i32 %v0_15dac, 12
  %v10_15dac = inttoptr i32 %v9_15dac to i32*
  %v11_15dac = load i32, i32* %v10_15dac, align 4
  store i32 %v11_15dac, i32* %lr.global-to-local, align 4
  %v12_15dac = add i32 %v0_15dac, 16
  store i32 %v12_15dac, i32* %r1.global-to-local, align 4
  %v4_15db0 = mul i32 %v2_15dac, 256
  %v5_15db0 = or i32 %v4_15db0, %v3_15da8
  store i32 %v5_15db0, i32* @r3, align 4
  %v3_15db4 = udiv i32 %v2_15dac, 16777216
  %v4_15db8 = mul i32 %v5_15dac, 256
  %v5_15db8 = or i32 %v4_15db8, %v3_15db4
  store i32 %v5_15db8, i32* %r4.global-to-local, align 4
  %v3_15dbc = udiv i32 %v5_15dac, 16777216
  %v4_15dc0 = mul i32 %v8_15dac, 256
  %v5_15dc0 = or i32 %v4_15dc0, %v3_15dbc
  store i32 %v5_15dc0, i32* %r5.global-to-local, align 4
  %v3_15dc4 = udiv i32 %v8_15dac, 16777216
  %v4_15dc8 = mul i32 %v11_15dac, 256
  %v5_15dc8 = or i32 %v4_15dc8, %v3_15dc4
  store i32 %v5_15dc8, i32* @ip, align 4
  %v1_15dcc = inttoptr i32 %v0_15dcc to i32*
  store i32 %v5_15db0, i32* %v1_15dcc, align 4
  %v3_15dcc = add i32 %v0_15dcc, 4
  %v4_15dcc = inttoptr i32 %v3_15dcc to i32*
  %v5_15dcc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15dcc, i32* %v4_15dcc, align 4
  %v6_15dcc = add i32 %v0_15dcc, 8
  %v7_15dcc = inttoptr i32 %v6_15dcc to i32*
  %v8_15dcc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_15dcc, i32* %v7_15dcc, align 4
  %v9_15dcc = add i32 %v0_15dcc, 12
  %v10_15dcc = inttoptr i32 %v9_15dcc to i32*
  %v11_15dcc = load i32, i32* @ip, align 4
  store i32 %v11_15dcc, i32* %v10_15dcc, align 4
  %v12_15dcc = add i32 %v0_15dcc, 16
  store i32 %v12_15dcc, i32* @r0, align 4
  %v0_15dd0 = load i32, i32* %r2.global-to-local, align 4
  %v1_15dd0 = add i32 %v0_15dd0, -16
  store i32 %v1_15dd0, i32* %r2.global-to-local, align 4
  %v3_15dd0 = sub i32 15, %v0_15dd0
  %v4_15dd0 = and i32 %v3_15dd0, %v0_15dd0
  %v5_15dd0 = icmp slt i32 %v4_15dd0, 0
  %v6_15dd0 = icmp slt i32 %v1_15dd0, 0
  %v2_15dd4 = xor i1 %v6_15dd0, %v5_15dd0
  br i1 %v2_15dd4, label %dec_label_pc_15dd8, label %dec_label_pc_15da8.dec_label_pc_15da8_crit_edge

dec_label_pc_15da8.dec_label_pc_15da8_crit_edge:  ; preds = %dec_label_pc_15da8
  %v0_15da8.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_15dac.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15da8

dec_label_pc_15dd8:                               ; preds = %dec_label_pc_15da8
  %v2_15dd8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15dd8, i32* @r4, align 4
  %v5_15dd8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_15dd8, i32* @r5, align 4
  %v1_15ddc = add i32 %v0_15dd0, -4
  store i32 %v1_15ddc, i32* %r2.global-to-local, align 4
  %v3_15ddc = add i32 %v0_15dd0, 2147483632
  %v4_15ddc = and i32 %v1_15ddc, %v3_15ddc
  %v5_15ddc = icmp slt i32 %v4_15ddc, 0
  store i1 %v5_15ddc, i1* %cpsr_v.global-to-local, align 1
  %v6_15ddc = icmp slt i32 %v1_15ddc, 0
  store i1 %v6_15ddc, i1* %cpsr_n.global-to-local, align 1
  %v7_15ddc = icmp eq i32 %v1_15ddc, 0
  store i1 %v7_15ddc, i1* %cpsr_z.global-to-local, align 1
  %v2_15de0 = xor i1 %v6_15ddc, %v5_15ddc
  br i1 %v2_15de0, label %dec_label_pc_15dfc, label %dec_label_pc_15de4

dec_label_pc_15de4:                               ; preds = %dec_label_pc_15dd8, %dec_label_pc_15d98, %dec_label_pc_15de4
  %v1_15df0 = phi i32 [ %v4_15df0, %dec_label_pc_15de4 ], [ %v12_15dcc, %dec_label_pc_15dd8 ], [ %v0_15dcc76, %dec_label_pc_15d98 ]
  %v0_15de4 = load i32, i32* %lr.global-to-local, align 4
  %v3_15de4 = udiv i32 %v0_15de4, 16777216
  store i32 %v3_15de4, i32* %ip.global-to-local, align 4
  %v0_15de8 = load i32, i32* %r1.global-to-local, align 4
  %v1_15de8 = inttoptr i32 %v0_15de8 to i32*
  %v2_15de8 = load i32, i32* %v1_15de8, align 4
  store i32 %v2_15de8, i32* %lr.global-to-local, align 4
  %v4_15de8 = add i32 %v0_15de8, 4
  store i32 %v4_15de8, i32* %r1.global-to-local, align 4
  %v4_15dec = mul i32 %v2_15de8, 256
  %v5_15dec = or i32 %v4_15dec, %v3_15de4
  store i32 %v5_15dec, i32* @ip, align 4
  %v2_15df0 = inttoptr i32 %v1_15df0 to i32*
  store i32 %v5_15dec, i32* %v2_15df0, align 4
  %v3_15df0 = load i32, i32* @r0, align 4
  %v4_15df0 = add i32 %v3_15df0, 4
  store i32 %v4_15df0, i32* @r0, align 4
  %v0_15df4 = load i32, i32* %r2.global-to-local, align 4
  %v1_15df4 = add i32 %v0_15df4, -4
  store i32 %v1_15df4, i32* %r2.global-to-local, align 4
  %v3_15df4 = sub i32 3, %v0_15df4
  %v4_15df4 = and i32 %v3_15df4, %v0_15df4
  %v5_15df4 = icmp slt i32 %v4_15df4, 0
  %v6_15df4 = icmp slt i32 %v1_15df4, 0
  %v2_15df8 = xor i1 %v6_15df4, %v5_15df4
  br i1 %v2_15df8, label %dec_label_pc_15dfc.loopexit, label %dec_label_pc_15de4

dec_label_pc_15dfc.loopexit:                      ; preds = %dec_label_pc_15de4
  %v7_15df4 = icmp eq i32 %v0_15df4, 4
  store i1 %v5_15df4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_15df4, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_15df4, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15dfc

dec_label_pc_15dfc:                               ; preds = %dec_label_pc_15dfc.loopexit, %dec_label_pc_15dd8
  %v0_15c4c61 = phi i32 [ %v1_15df4, %dec_label_pc_15dfc.loopexit ], [ %v1_15ddc, %dec_label_pc_15dd8 ]
  %v0_15dfc = load i32, i32* %r1.global-to-local, align 4
  %v1_15dfc = add i32 %v0_15dfc, -1
  store i32 %v1_15dfc, i32* @r1, align 4
  br label %bb140

dec_label_pc_15e04:                               ; preds = %dec_label_pc_15bb0
  %v1_15e04 = load i32, i32* @r2, align 4
  %v2_15e04 = add i32 %v1_15e04, %v0_15bb0
  store i32 %v2_15e04, i32* %r1.global-to-local, align 4
  %v2_15e08 = add i32 %v1_15e04, %v1_15bb0
  store i32 %v2_15e08, i32* %r0.global-to-local, align 4
  %v2_15e0c = add i32 %v1_15e04, -4
  store i32 %v2_15e0c, i32* %r2.global-to-local, align 4
  %v4_15e0c = sub i32 3, %v1_15e04
  %v5_15e0c = and i32 %v4_15e0c, %v1_15e04
  %v6_15e0c = icmp slt i32 %v5_15e0c, 0
  store i1 %v6_15e0c, i1* %cpsr_v.global-to-local, align 1
  %v7_15e0c = icmp slt i32 %v2_15e0c, 0
  store i1 %v7_15e0c, i1* %cpsr_n.global-to-local, align 1
  %v8_15e0c = icmp eq i32 %v1_15e04, 4
  store i1 %v8_15e0c, i1* %cpsr_z.global-to-local, align 1
  %v5_15e10 = icmp slt i32 %v1_15e04, 4
  br i1 %v5_15e10, label %bb150, label %dec_label_pc_15e14

dec_label_pc_15e14:                               ; preds = %dec_label_pc_15e04
  %v1_15e14 = urem i32 %v2_15e08, 4
  store i32 %v1_15e14, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15e14 = icmp eq i32 %v1_15e14, 0
  store i1 %v2_15e14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15e14, label %dec_label_pc_15e1c, label %dec_label_pc_15ebc

dec_label_pc_15e1c:                               ; preds = %dec_label_pc_15e14
  %v1_15e1c = urem i32 %v2_15e04, 4
  store i32 %v1_15e1c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15e1c = icmp eq i32 %v1_15e1c, 0
  store i1 %v2_15e1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15e1c, label %dec_label_pc_15e24, label %dec_label_pc_15ee8

dec_label_pc_15e24:                               ; preds = %dec_label_pc_15e1c, %dec_label_pc_15ee0
  %v0_15e3c37 = phi i32 [ %v2_15e08, %dec_label_pc_15e1c ], [ %v0_15f3020, %dec_label_pc_15ee0 ]
  %v0_15e3836 = phi i32 [ %v2_15e04, %dec_label_pc_15e1c ], [ %v0_15ee0, %dec_label_pc_15ee0 ]
  %v0_15e24 = phi i32 [ %v2_15e0c, %dec_label_pc_15e1c ], [ %v2_15ed8, %dec_label_pc_15ee0 ]
  %v2_15e24 = add i32 %v0_15e24, -8
  store i32 %v2_15e24, i32* %r2.global-to-local, align 4
  %v4_15e24 = sub i32 7, %v0_15e24
  %v5_15e24 = and i32 %v4_15e24, %v0_15e24
  %v6_15e24 = icmp slt i32 %v5_15e24, 0
  store i1 %v6_15e24, i1* %cpsr_v.global-to-local, align 1
  %v7_15e24 = icmp slt i32 %v2_15e24, 0
  store i1 %v7_15e24, i1* %cpsr_n.global-to-local, align 1
  %v8_15e24 = icmp eq i32 %v0_15e24, 8
  store i1 %v8_15e24, i1* %cpsr_z.global-to-local, align 1
  %v5_15e28 = icmp slt i32 %v0_15e24, 8
  br i1 %v5_15e28, label %dec_label_pc_15e74, label %dec_label_pc_15e2c

dec_label_pc_15e2c:                               ; preds = %dec_label_pc_15e24
  %v3_15e2c = load i32, i32* @r4, align 4
  %v5_15e2c = inttoptr i32 %v3_15e2c to i8*
  store i8* %v5_15e2c, i8** %stack_var_-8, align 4
  %v8_15e2c = load i32, i32* @lr, align 4
  %v2_15e30 = add i32 %v0_15e24, -28
  store i32 %v2_15e30, i32* %r2.global-to-local, align 4
  %v4_15e30 = sub i32 27, %v0_15e24
  %v5_15e30 = and i32 %v4_15e30, %v2_15e24
  %v6_15e30 = icmp slt i32 %v5_15e30, 0
  store i1 %v6_15e30, i1* %cpsr_v.global-to-local, align 1
  %v7_15e30 = icmp slt i32 %v2_15e30, 0
  store i1 %v7_15e30, i1* %cpsr_n.global-to-local, align 1
  %v8_15e30 = icmp eq i32 %v2_15e24, 20
  store i1 %v8_15e30, i1* %cpsr_z.global-to-local, align 1
  %v5_15e34 = icmp slt i32 %v2_15e24, 20
  br i1 %v5_15e34, label %dec_label_pc_15e50, label %dec_label_pc_15e38

dec_label_pc_15e38:                               ; preds = %dec_label_pc_15e2c, %dec_label_pc_15e38.dec_label_pc_15e38_crit_edge
  %v0_15e3c = phi i32 [ %v1_15e44, %dec_label_pc_15e38.dec_label_pc_15e38_crit_edge ], [ %v0_15e3c37, %dec_label_pc_15e2c ]
  %v0_15e38 = phi i32 [ %v0_15e38.pre, %dec_label_pc_15e38.dec_label_pc_15e38_crit_edge ], [ %v0_15e3836, %dec_label_pc_15e2c ]
  %v1_15e38 = add i32 %v0_15e38, -4
  %v2_15e38 = inttoptr i32 %v1_15e38 to i32*
  %v3_15e38 = load i32, i32* %v2_15e38, align 4
  %v4_15e38 = add i32 %v0_15e38, -8
  %v5_15e38 = inttoptr i32 %v4_15e38 to i32*
  %v6_15e38 = load i32, i32* %v5_15e38, align 4
  store i32 %v6_15e38, i32* %r4.global-to-local, align 4
  %v7_15e38 = add i32 %v0_15e38, -12
  %v8_15e38 = inttoptr i32 %v7_15e38 to i32*
  %v9_15e38 = load i32, i32* %v8_15e38, align 4
  store i32 %v9_15e38, i32* %ip.global-to-local, align 4
  %v10_15e38 = add i32 %v0_15e38, -16
  %v11_15e38 = inttoptr i32 %v10_15e38 to i32*
  %v12_15e38 = load i32, i32* %v11_15e38, align 4
  store i32 %v12_15e38, i32* %lr.global-to-local, align 4
  store i32 %v10_15e38, i32* %r1.global-to-local, align 4
  %v1_15e3c = add i32 %v0_15e3c, -16
  %v2_15e3c = inttoptr i32 %v1_15e3c to i32*
  store i32 %v3_15e38, i32* %v2_15e3c, align 4
  %v4_15e3c = add i32 %v0_15e3c, -12
  %v5_15e3c = inttoptr i32 %v4_15e3c to i32*
  %v6_15e3c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_15e3c, i32* %v5_15e3c, align 4
  %v7_15e3c = add i32 %v0_15e3c, -8
  %v8_15e3c = inttoptr i32 %v7_15e3c to i32*
  %v9_15e3c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_15e3c, i32* %v8_15e3c, align 4
  %v10_15e3c = add i32 %v0_15e3c, -4
  %v11_15e3c = inttoptr i32 %v10_15e3c to i32*
  %v12_15e3c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15e3c, i32* %v11_15e3c, align 4
  store i32 %v1_15e3c, i32* %r0.global-to-local, align 4
  %v0_15e40 = load i32, i32* %r1.global-to-local, align 4
  %v1_15e40 = add i32 %v0_15e40, -4
  %v2_15e40 = inttoptr i32 %v1_15e40 to i32*
  %v3_15e40 = load i32, i32* %v2_15e40, align 4
  store i32 %v3_15e40, i32* @r3, align 4
  %v4_15e40 = add i32 %v0_15e40, -8
  %v5_15e40 = inttoptr i32 %v4_15e40 to i32*
  %v6_15e40 = load i32, i32* %v5_15e40, align 4
  store i32 %v6_15e40, i32* %r4.global-to-local, align 4
  %v7_15e40 = add i32 %v0_15e40, -12
  %v8_15e40 = inttoptr i32 %v7_15e40 to i32*
  %v9_15e40 = load i32, i32* %v8_15e40, align 4
  store i32 %v9_15e40, i32* @ip, align 4
  %v10_15e40 = add i32 %v0_15e40, -16
  %v11_15e40 = inttoptr i32 %v10_15e40 to i32*
  %v12_15e40 = load i32, i32* %v11_15e40, align 4
  store i32 %v12_15e40, i32* %lr.global-to-local, align 4
  store i32 %v10_15e40, i32* %r1.global-to-local, align 4
  %v1_15e44 = add i32 %v0_15e3c, -32
  %v2_15e44 = inttoptr i32 %v1_15e44 to i32*
  store i32 %v3_15e40, i32* %v2_15e44, align 4
  %v4_15e44 = add i32 %v0_15e3c, -28
  %v5_15e44 = inttoptr i32 %v4_15e44 to i32*
  %v6_15e44 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_15e44, i32* %v5_15e44, align 4
  %v7_15e44 = add i32 %v0_15e3c, -24
  %v8_15e44 = inttoptr i32 %v7_15e44 to i32*
  %v9_15e44 = load i32, i32* @ip, align 4
  store i32 %v9_15e44, i32* %v8_15e44, align 4
  %v10_15e44 = add i32 %v0_15e3c, -20
  %v11_15e44 = inttoptr i32 %v10_15e44 to i32*
  %v12_15e44 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15e44, i32* %v11_15e44, align 4
  store i32 %v1_15e44, i32* %r0.global-to-local, align 4
  %v0_15e48 = load i32, i32* %r2.global-to-local, align 4
  %v2_15e48 = add i32 %v0_15e48, -32
  store i32 %v2_15e48, i32* %r2.global-to-local, align 4
  %v6_15e4c = icmp slt i32 %v0_15e48, 32
  br i1 %v6_15e4c, label %dec_label_pc_15e50.loopexit, label %dec_label_pc_15e38.dec_label_pc_15e38_crit_edge

dec_label_pc_15e38.dec_label_pc_15e38_crit_edge:  ; preds = %dec_label_pc_15e38
  %v0_15e38.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15e38

dec_label_pc_15e50.loopexit:                      ; preds = %dec_label_pc_15e38
  %v4_15e48 = sub i32 31, %v0_15e48
  %v5_15e48 = and i32 %v4_15e48, %v0_15e48
  %v6_15e48 = icmp slt i32 %v5_15e48, 0
  %v7_15e48 = icmp slt i32 %v2_15e48, 0
  store i1 %v6_15e48, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15e48, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15e50

dec_label_pc_15e50:                               ; preds = %dec_label_pc_15e50.loopexit, %dec_label_pc_15e2c
  %v6_15e58 = phi i32 [ %v1_15e44, %dec_label_pc_15e50.loopexit ], [ %v0_15e3c37, %dec_label_pc_15e2c ]
  %v0_15e60.pr = phi i32 [ %v2_15e48, %dec_label_pc_15e50.loopexit ], [ %v2_15e30, %dec_label_pc_15e2c ]
  %v4_15e50 = add i32 %v0_15e60.pr, 16
  %v6_15e50 = sub i32 0, %v0_15e60.pr
  %v7_15e50 = and i32 %v4_15e50, %v6_15e50
  %v8_15e50 = icmp slt i32 %v7_15e50, 0
  store i1 %v8_15e50, i1* %cpsr_v.global-to-local, align 1
  %v9_15e50 = icmp slt i32 %v4_15e50, 0
  store i1 %v9_15e50, i1* %cpsr_n.global-to-local, align 1
  %v10_15e50 = icmp eq i32 %v4_15e50, 0
  store i1 %v10_15e50, i1* %cpsr_z.global-to-local, align 1
  %v5_15e54 = icmp slt i32 %v0_15e60.pr, -16
  br i1 %v5_15e54, label %.thread2, label %bb147

bb147:                                            ; preds = %dec_label_pc_15e50
  %v6_15e54 = load i32, i32* %r1.global-to-local, align 4
  %v7_15e54 = add i32 %v6_15e54, -4
  %v8_15e54 = inttoptr i32 %v7_15e54 to i32*
  %v9_15e54 = load i32, i32* %v8_15e54, align 4
  store i32 %v9_15e54, i32* @r3, align 4
  %v10_15e54 = add i32 %v6_15e54, -8
  %v11_15e54 = inttoptr i32 %v10_15e54 to i32*
  %v12_15e54 = load i32, i32* %v11_15e54, align 4
  store i32 %v12_15e54, i32* %r4.global-to-local, align 4
  %v13_15e54 = add i32 %v6_15e54, -12
  %v14_15e54 = inttoptr i32 %v13_15e54 to i32*
  %v15_15e54 = load i32, i32* %v14_15e54, align 4
  store i32 %v15_15e54, i32* @ip, align 4
  %v16_15e54 = add i32 %v6_15e54, -16
  %v17_15e54 = inttoptr i32 %v16_15e54 to i32*
  %v18_15e54 = load i32, i32* %v17_15e54, align 4
  store i32 %v18_15e54, i32* %lr.global-to-local, align 4
  store i32 %v16_15e54, i32* %r1.global-to-local, align 4
  %v7_15e58 = add i32 %v6_15e58, -16
  %v8_15e58 = inttoptr i32 %v7_15e58 to i32*
  store i32 %v9_15e54, i32* %v8_15e58, align 4
  %v10_15e58 = add i32 %v6_15e58, -12
  %v11_15e58 = inttoptr i32 %v10_15e58 to i32*
  %v12_15e58 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_15e58, i32* %v11_15e58, align 4
  %v13_15e58 = add i32 %v6_15e58, -8
  %v14_15e58 = inttoptr i32 %v13_15e58 to i32*
  %v15_15e58 = load i32, i32* @ip, align 4
  store i32 %v15_15e58, i32* %v14_15e58, align 4
  %v16_15e58 = add i32 %v6_15e58, -4
  %v17_15e58 = inttoptr i32 %v16_15e58 to i32*
  %v18_15e58 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_15e58, i32* %v17_15e58, align 4
  store i32 %v7_15e58, i32* %r0.global-to-local, align 4
  %v6_15e5c = load i32, i32* %r2.global-to-local, align 4
  %v7_15e5c = add i32 %v6_15e5c, -16
  store i32 %v7_15e5c, i32* %r2.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_15e50, %bb147
  %v6_15e68 = phi i32 [ %v7_15e58, %bb147 ], [ %v6_15e58, %dec_label_pc_15e50 ]
  %v0_15e60 = phi i32 [ %v7_15e5c, %bb147 ], [ %v0_15e60.pr, %dec_label_pc_15e50 ]
  %v4_15e60 = add i32 %v0_15e60, 20
  store i32 %v4_15e60, i32* %r2.global-to-local, align 4
  %v6_15e60 = sub i32 0, %v0_15e60
  %v7_15e60 = and i32 %v4_15e60, %v6_15e60
  %v8_15e60 = icmp slt i32 %v7_15e60, 0
  store i1 %v8_15e60, i1* %cpsr_v.global-to-local, align 1
  %v9_15e60 = icmp slt i32 %v4_15e60, 0
  store i1 %v9_15e60, i1* %cpsr_n.global-to-local, align 1
  %v10_15e60 = icmp eq i32 %v4_15e60, 0
  store i1 %v10_15e60, i1* %cpsr_z.global-to-local, align 1
  %v5_15e64 = icmp slt i32 %v0_15e60, -20
  br i1 %v5_15e64, label %.thread4, label %bb148

bb148:                                            ; preds = %.thread2
  %v6_15e64 = load i32, i32* %r1.global-to-local, align 4
  %v7_15e64 = add i32 %v6_15e64, -4
  %v8_15e64 = inttoptr i32 %v7_15e64 to i32*
  %v9_15e64 = load i32, i32* %v8_15e64, align 4
  store i32 %v9_15e64, i32* @r3, align 4
  %v10_15e64 = add i32 %v6_15e64, -8
  %v11_15e64 = inttoptr i32 %v10_15e64 to i32*
  %v12_15e64 = load i32, i32* %v11_15e64, align 4
  store i32 %v12_15e64, i32* @ip, align 4
  %v13_15e64 = add i32 %v6_15e64, -12
  %v14_15e64 = inttoptr i32 %v13_15e64 to i32*
  %v15_15e64 = load i32, i32* %v14_15e64, align 4
  store i32 %v15_15e64, i32* %lr.global-to-local, align 4
  store i32 %v13_15e64, i32* %r1.global-to-local, align 4
  %v7_15e68 = add i32 %v6_15e68, -12
  %v8_15e68 = inttoptr i32 %v7_15e68 to i32*
  store i32 %v9_15e64, i32* %v8_15e68, align 4
  %v10_15e68 = add i32 %v6_15e68, -8
  %v11_15e68 = inttoptr i32 %v10_15e68 to i32*
  %v12_15e68 = load i32, i32* @ip, align 4
  store i32 %v12_15e68, i32* %v11_15e68, align 4
  %v13_15e68 = add i32 %v6_15e68, -4
  %v14_15e68 = inttoptr i32 %v13_15e68 to i32*
  %v15_15e68 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_15e68, i32* %v14_15e68, align 4
  store i32 %v7_15e68, i32* %r0.global-to-local, align 4
  %v6_15e6c = load i32, i32* %r2.global-to-local, align 4
  %v7_15e6c = add i32 %v6_15e6c, -12
  store i32 %v7_15e6c, i32* %r2.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread2, %bb148
  %v6_15e8c45 = phi i32 [ %v6_15e68, %.thread2 ], [ %v7_15e68, %bb148 ]
  %v0_15e7443 = phi i32 [ %v4_15e60, %.thread2 ], [ %v7_15e6c, %bb148 ]
  %v2_15e70 = load i8*, i8** %stack_var_-8, align 4
  %v3_15e70 = ptrtoint i8* %v2_15e70 to i32
  store i32 %v3_15e70, i32* @r4, align 4
  store i32 %v8_15e2c, i32* @lr, align 4
  br label %dec_label_pc_15e74

dec_label_pc_15e74:                               ; preds = %dec_label_pc_15e24, %.thread4
  %v7_15e84 = phi i32 [ %v0_15e3c37, %dec_label_pc_15e24 ], [ %v6_15e8c45, %.thread4 ]
  %v0_15e74 = phi i32 [ %v2_15e24, %dec_label_pc_15e24 ], [ %v0_15e7443, %.thread4 ]
  %v2_15e74 = add i32 %v0_15e74, 8
  store i32 %v2_15e74, i32* %r2.global-to-local, align 4
  %v4_15e74 = sub i32 0, %v0_15e74
  %v5_15e74 = and i32 %v2_15e74, %v4_15e74
  %v6_15e74 = icmp slt i32 %v5_15e74, 0
  store i1 %v6_15e74, i1* %cpsr_v.global-to-local, align 1
  %v7_15e74 = icmp slt i32 %v2_15e74, 0
  store i1 %v7_15e74, i1* %cpsr_n.global-to-local, align 1
  %v8_15e74 = icmp eq i32 %v2_15e74, 0
  store i1 %v8_15e74, i1* %cpsr_z.global-to-local, align 1
  %v5_15e78 = icmp slt i32 %v0_15e74, -8
  br i1 %v5_15e78, label %bb150, label %dec_label_pc_15e7c

dec_label_pc_15e7c:                               ; preds = %dec_label_pc_15e74
  %v6_15e7c = add i32 %v0_15e74, 4
  store i32 %v6_15e7c, i32* %r2.global-to-local, align 4
  %v8_15e7c = sub i32 -5, %v0_15e74
  %v9_15e7c = and i32 %v8_15e7c, %v2_15e74
  %v10_15e7c = icmp slt i32 %v9_15e7c, 0
  store i1 %v10_15e7c, i1* %cpsr_v.global-to-local, align 1
  %v11_15e7c = icmp slt i32 %v6_15e7c, 0
  store i1 %v11_15e7c, i1* %cpsr_n.global-to-local, align 1
  %v12_15e7c = icmp eq i32 %v2_15e74, 4
  store i1 %v12_15e7c, i1* %cpsr_z.global-to-local, align 1
  %v5_15e80 = icmp slt i32 %v2_15e74, 4
  %v6_15e80 = load i32, i32* %r1.global-to-local, align 4
  %v7_15e80 = add i32 %v6_15e80, -4
  %v8_15e80 = inttoptr i32 %v7_15e80 to i32*
  %v9_15e80 = load i32, i32* %v8_15e80, align 4
  store i32 %v9_15e80, i32* @r3, align 4
  br i1 %v5_15e80, label %.thread8, label %bb149

.thread8:                                         ; preds = %dec_label_pc_15e7c
  store i32 %v7_15e80, i32* %r1.global-to-local, align 4
  %v8_15e84 = add i32 %v7_15e84, -4
  %v9_15e84 = inttoptr i32 %v8_15e84 to i32*
  store i32 %v9_15e80, i32* %v9_15e84, align 4
  %v10_15e84 = load i32, i32* %r0.global-to-local, align 4
  %v11_15e84 = add i32 %v10_15e84, -4
  store i32 %v11_15e84, i32* %r0.global-to-local, align 4
  %v0_15e94.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb150

bb149:                                            ; preds = %dec_label_pc_15e7c
  %v10_15e88 = add i32 %v6_15e80, -8
  %v11_15e88 = inttoptr i32 %v10_15e88 to i32*
  %v12_15e88 = load i32, i32* %v11_15e88, align 4
  store i32 %v12_15e88, i32* @ip, align 4
  store i32 %v10_15e88, i32* %r1.global-to-local, align 4
  %v7_15e8c = add i32 %v7_15e84, -8
  %v8_15e8c = inttoptr i32 %v7_15e8c to i32*
  store i32 %v9_15e80, i32* %v8_15e8c, align 4
  %v10_15e8c = add i32 %v7_15e84, -4
  %v11_15e8c = inttoptr i32 %v10_15e8c to i32*
  %v12_15e8c = load i32, i32* @ip, align 4
  store i32 %v12_15e8c, i32* %v11_15e8c, align 4
  store i32 %v7_15e8c, i32* %r0.global-to-local, align 4
  %v6_15e90 = load i32, i32* %r2.global-to-local, align 4
  %v7_15e90 = add i32 %v6_15e90, -4
  store i32 %v7_15e90, i32* %r2.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %.thread8, %dec_label_pc_15e74, %dec_label_pc_15e04, %.thread14, %dec_label_pc_16038, %dec_label_pc_15fcc, %dec_label_pc_15f60, %bb149
  %v2_15e98 = phi i32 [ %v11_15e84, %.thread8 ], [ %v7_15e84, %dec_label_pc_15e74 ], [ %v2_15e08, %dec_label_pc_15e04 ], [ %v0_15f3020, %.thread14 ], [ %v2_15ea453, %dec_label_pc_16038 ], [ %v2_15ea452, %dec_label_pc_15fcc ], [ %v2_15ea451, %dec_label_pc_15f60 ], [ %v7_15e8c, %bb149 ]
  %v0_15e94 = phi i32 [ %v0_15e94.pre, %.thread8 ], [ %v2_15e74, %dec_label_pc_15e74 ], [ %v2_15e0c, %dec_label_pc_15e04 ], [ %v2_15ed8, %.thread14 ], [ %v0_15e9449, %dec_label_pc_16038 ], [ %v0_15e9448, %dec_label_pc_15fcc ], [ %v0_15e9447, %dec_label_pc_15f60 ], [ %v7_15e90, %bb149 ]
  %v1_15e94 = add i32 %v0_15e94, 4
  store i32 %v1_15e94, i32* %r2.global-to-local, align 4
  %v3_15e94 = sub i32 0, %v0_15e94
  %v4_15e94 = and i32 %v1_15e94, %v3_15e94
  %v5_15e94 = icmp slt i32 %v4_15e94, 0
  store i1 %v5_15e94, i1* %cpsr_v.global-to-local, align 1
  %v6_15e94 = icmp slt i32 %v1_15e94, 0
  store i1 %v6_15e94, i1* %cpsr_n.global-to-local, align 1
  %v7_15e94 = icmp eq i32 %v1_15e94, 0
  store i1 %v7_15e94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15e94, label %.thread130, label %bb151

bb151:                                            ; preds = %bb150
  %v1_15e9c = add i32 %v0_15e94, 2
  %v3_15e9c = sub i32 -3, %v0_15e94
  %v4_15e9c = and i32 %v3_15e9c, %v1_15e94
  %v5_15e9c = icmp slt i32 %v4_15e9c, 0
  store i1 %v5_15e9c, i1* %cpsr_v.global-to-local, align 1
  %v6_15e9c = icmp slt i32 %v1_15e9c, 0
  store i1 %v6_15e9c, i1* %cpsr_n.global-to-local, align 1
  %v7_15e9c = icmp eq i32 %v1_15e94, 2
  store i1 %v7_15e9c, i1* %cpsr_z.global-to-local, align 1
  %v0_15ea0 = load i32, i32* %r1.global-to-local, align 4
  %v1_15ea0 = add i32 %v0_15ea0, -1
  %v2_15ea0 = inttoptr i32 %v1_15ea0 to i8*
  %v3_15ea0 = load i8, i8* %v2_15ea0, align 1
  %v4_15ea0 = zext i8 %v3_15ea0 to i32
  store i32 %v4_15ea0, i32* @r3, align 4
  store i32 %v1_15ea0, i32* %r1.global-to-local, align 4
  %v3_15ea4 = add i32 %v2_15e98, -1
  %v4_15ea4 = inttoptr i32 %v3_15ea4 to i8*
  store i8 %v3_15ea0, i8* %v4_15ea4, align 1
  %v5_15ea4 = load i32, i32* %r0.global-to-local, align 4
  %v6_15ea4 = add i32 %v5_15ea4, -1
  store i32 %v6_15ea4, i32* %r0.global-to-local, align 4
  %v0_15ea8 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_15ea8 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_15ea8 = xor i1 %v0_15ea8, %v1_15ea8
  br i1 %v2_15ea8, label %.thread129, label %bb152

bb152:                                            ; preds = %bb151
  %v3_15ea8 = load i32, i32* %r1.global-to-local, align 4
  %v4_15ea8 = add i32 %v3_15ea8, -1
  %v5_15ea8 = inttoptr i32 %v4_15ea8 to i8*
  %v6_15ea8 = load i8, i8* %v5_15ea8, align 1
  %v7_15ea8 = zext i8 %v6_15ea8 to i32
  store i32 %v7_15ea8, i32* @r3, align 4
  store i32 %v4_15ea8, i32* %r1.global-to-local, align 4
  %v6_15eac = add i32 %v5_15ea4, -2
  %v7_15eac = inttoptr i32 %v6_15eac to i8*
  store i8 %v6_15ea8, i8* %v7_15eac, align 1
  %v8_15eac = load i32, i32* %r0.global-to-local, align 4
  %v9_15eac = add i32 %v8_15eac, -1
  store i32 %v9_15eac, i32* %r0.global-to-local, align 4
  %v1_15eb0.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_15eb0.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread129

.thread129:                                       ; preds = %bb151, %bb152
  %v7_15eb4 = phi i32 [ %v9_15eac, %bb152 ], [ %v6_15ea4, %bb151 ]
  %v2_15eb4 = phi i1 [ %v2_15eb0.pre, %bb152 ], [ %v1_15ea8, %bb151 ]
  %v1_15eb4 = phi i1 [ %v1_15eb0.pre, %bb152 ], [ %v0_15ea8, %bb151 ]
  %v0_15eb0 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_15eb0 = xor i1 %v2_15eb4, %v1_15eb4
  %v4_15eb0 = or i1 %v0_15eb0, %v3_15eb0
  br i1 %v4_15eb0, label %.thread130, label %bb153

bb153:                                            ; preds = %.thread129
  %v5_15eb0 = load i32, i32* %r1.global-to-local, align 4
  %v6_15eb0 = add i32 %v5_15eb0, -1
  %v7_15eb0 = inttoptr i32 %v6_15eb0 to i8*
  %v8_15eb0 = load i8, i8* %v7_15eb0, align 1
  %v9_15eb0 = zext i8 %v8_15eb0 to i32
  store i32 %v9_15eb0, i32* @r3, align 4
  store i32 %v6_15eb0, i32* %r1.global-to-local, align 4
  %v8_15eb4 = add i32 %v7_15eb4, -1
  %v9_15eb4 = inttoptr i32 %v8_15eb4 to i8*
  store i8 %v8_15eb0, i8* %v9_15eb4, align 1
  %v10_15eb4 = load i32, i32* %r0.global-to-local, align 4
  %v11_15eb4 = add i32 %v10_15eb4, -1
  store i32 %v11_15eb4, i32* %r0.global-to-local, align 4
  br label %.thread130

dec_label_pc_15ebc:                               ; preds = %dec_label_pc_15e14
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_15ebc = icmp eq i32 %v1_15e14, 1
  store i1 %v8_15ebc, i1* %cpsr_n.global-to-local, align 1
  %v9_15ebc = icmp eq i32 %v1_15e14, 2
  store i1 %v9_15ebc, i1* %cpsr_z.global-to-local, align 1
  %v1_15ec0 = add i32 %v2_15e04, -1
  %v2_15ec0 = inttoptr i32 %v1_15ec0 to i8*
  %v3_15ec0 = load i8, i8* %v2_15ec0, align 1
  %v4_15ec0 = zext i8 %v3_15ec0 to i32
  store i32 %v4_15ec0, i32* @r3, align 4
  store i32 %v1_15ec0, i32* %r1.global-to-local, align 4
  %v3_15ec4 = add i32 %v2_15e08, -1
  %v4_15ec4 = inttoptr i32 %v3_15ec4 to i8*
  store i8 %v3_15ec0, i8* %v4_15ec4, align 1
  %v5_15ec4 = load i32, i32* %r0.global-to-local, align 4
  %v6_15ec4 = add i32 %v5_15ec4, -1
  store i32 %v6_15ec4, i32* %r0.global-to-local, align 4
  br i1 %v8_15ebc, label %.thread14, label %bb154

bb154:                                            ; preds = %dec_label_pc_15ebc
  %v6_15ec8 = load i32, i32* %r1.global-to-local, align 4
  %v7_15ec8 = add i32 %v6_15ec8, -1
  %v8_15ec8 = inttoptr i32 %v7_15ec8 to i8*
  %v9_15ec8 = load i8, i8* %v8_15ec8, align 1
  %v10_15ec8 = zext i8 %v9_15ec8 to i32
  store i32 %v10_15ec8, i32* @r3, align 4
  store i32 %v7_15ec8, i32* %r1.global-to-local, align 4
  %v9_15ecc = add i32 %v5_15ec4, -2
  %v10_15ecc = inttoptr i32 %v9_15ecc to i8*
  store i8 %v9_15ec8, i8* %v10_15ecc, align 1
  %v11_15ecc = load i32, i32* %r0.global-to-local, align 4
  %v12_15ecc = add i32 %v11_15ecc, -1
  store i32 %v12_15ecc, i32* %r0.global-to-local, align 4
  br i1 %v9_15ebc, label %.thread14, label %bb155

bb155:                                            ; preds = %bb154
  %v8_15ed0 = load i32, i32* %r1.global-to-local, align 4
  %v9_15ed0 = add i32 %v8_15ed0, -1
  %v10_15ed0 = inttoptr i32 %v9_15ed0 to i8*
  %v11_15ed0 = load i8, i8* %v10_15ed0, align 1
  %v12_15ed0 = zext i8 %v11_15ed0 to i32
  store i32 %v12_15ed0, i32* @r3, align 4
  store i32 %v9_15ed0, i32* %r1.global-to-local, align 4
  %v11_15ed4 = add i32 %v11_15ecc, -2
  %v12_15ed4 = inttoptr i32 %v11_15ed4 to i8*
  store i8 %v11_15ed0, i8* %v12_15ed4, align 1
  %v13_15ed4 = load i32, i32* %r0.global-to-local, align 4
  %v14_15ed4 = add i32 %v13_15ed4, -1
  store i32 %v14_15ed4, i32* %r0.global-to-local, align 4
  br label %.thread14

.thread14:                                        ; preds = %bb154, %dec_label_pc_15ebc, %bb155
  %v0_15f3020 = phi i32 [ %v12_15ecc, %bb154 ], [ %v6_15ec4, %dec_label_pc_15ebc ], [ %v14_15ed4, %bb155 ]
  %v0_15ed8 = load i32, i32* %r2.global-to-local, align 4
  %v1_15ed8 = load i32, i32* @ip, align 4
  %v2_15ed8 = sub i32 %v0_15ed8, %v1_15ed8
  store i32 %v2_15ed8, i32* %r2.global-to-local, align 4
  %v4_15ed8 = xor i32 %v1_15ed8, %v0_15ed8
  %v5_15ed8 = xor i32 %v2_15ed8, %v0_15ed8
  %v6_15ed8 = and i32 %v5_15ed8, %v4_15ed8
  %v7_15ed8 = icmp slt i32 %v6_15ed8, 0
  store i1 %v7_15ed8, i1* %cpsr_v.global-to-local, align 1
  %v8_15ed8 = icmp slt i32 %v2_15ed8, 0
  store i1 %v8_15ed8, i1* %cpsr_n.global-to-local, align 1
  %v9_15ed8 = icmp eq i32 %v0_15ed8, %v1_15ed8
  store i1 %v9_15ed8, i1* %cpsr_z.global-to-local, align 1
  %v5_15edc = icmp slt i32 %v0_15ed8, %v1_15ed8
  br i1 %v5_15edc, label %bb150, label %dec_label_pc_15ee0

dec_label_pc_15ee0:                               ; preds = %.thread14
  %v0_15ee0 = load i32, i32* %r1.global-to-local, align 4
  %v1_15ee0 = urem i32 %v0_15ee0, 4
  store i32 %v1_15ee0, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15ee0 = icmp eq i32 %v1_15ee0, 0
  store i1 %v2_15ee0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15ee0, label %dec_label_pc_15e24, label %dec_label_pc_15ee8

dec_label_pc_15ee8:                               ; preds = %dec_label_pc_15e1c, %dec_label_pc_15ee0
  %v0_15f3019 = phi i32 [ %v2_15e08, %dec_label_pc_15e1c ], [ %v0_15f3020, %dec_label_pc_15ee0 ]
  %v0_15fdc = phi i32 [ %v2_15e0c, %dec_label_pc_15e1c ], [ %v2_15ed8, %dec_label_pc_15ee0 ]
  %v0_15ee8 = phi i32 [ %v2_15e04, %dec_label_pc_15e1c ], [ %v0_15ee0, %dec_label_pc_15ee0 ]
  %v0_15ef0 = phi i32 [ %v1_15e1c, %dec_label_pc_15e1c ], [ %v1_15ee0, %dec_label_pc_15ee0 ]
  %v1_15ee8 = and i32 %v0_15ee8, -4
  store i32 %v1_15ee8, i32* %r1.global-to-local, align 4
  %v1_15eec = inttoptr i32 %v1_15ee8 to i32*
  %v2_15eec = load i32, i32* %v1_15eec, align 4
  store i32 %v2_15eec, i32* @r3, align 4
  %v7_15ef0 = icmp ult i32 %v0_15ef0, 2
  %v2_15fd4 = add i32 %v0_15fdc, -12
  %v4_15fd4 = sub i32 11, %v0_15fdc
  %v5_15fd4 = and i32 %v4_15fd4, %v0_15fdc
  %v6_15fd4 = icmp slt i32 %v5_15fd4, 0
  store i1 %v6_15fd4, i1* %cpsr_v.global-to-local, align 1
  %v7_15fd4 = icmp slt i32 %v2_15fd4, 0
  store i1 %v7_15fd4, i1* %cpsr_n.global-to-local, align 1
  %v8_15fd4 = icmp eq i32 %v0_15fdc, 12
  store i1 %v8_15fd4, i1* %cpsr_z.global-to-local, align 1
  %v5_15fd8 = icmp slt i32 %v0_15fdc, 12
  br i1 %v7_15ef0, label %dec_label_pc_15fd4, label %dec_label_pc_15ef8

dec_label_pc_15ef8:                               ; preds = %dec_label_pc_15ee8
  %v8_15ef0 = icmp eq i32 %v0_15ef0, 2
  br i1 %v8_15ef0, label %dec_label_pc_15f68, label %dec_label_pc_15efc

dec_label_pc_15efc:                               ; preds = %dec_label_pc_15ef8
  br i1 %v5_15fd8, label %dec_label_pc_15f48, label %dec_label_pc_15f04

dec_label_pc_15f04:                               ; preds = %dec_label_pc_15efc
  store i32 %v2_15fd4, i32* %r2.global-to-local, align 4
  %v3_15f08 = load i32, i32* @r4, align 4
  store i32 %v3_15f08, i32* %stack_var_-12, align 4
  %v6_15f08 = load i32, i32* @r5, align 4
  %v8_15f08 = inttoptr i32 %v6_15f08 to i8*
  store i8* %v8_15f08, i8** %stack_var_-8, align 4
  %v11_15f08 = load i32, i32* @lr, align 4
  br label %dec_label_pc_15f0c

dec_label_pc_15f0c:                               ; preds = %dec_label_pc_15f0c.dec_label_pc_15f0c_crit_edge, %dec_label_pc_15f04
  %v0_15f30 = phi i32 [ %v1_15f30, %dec_label_pc_15f0c.dec_label_pc_15f0c_crit_edge ], [ %v0_15f3019, %dec_label_pc_15f04 ]
  %v0_15f10 = phi i32 [ %v0_15f10.pre, %dec_label_pc_15f0c.dec_label_pc_15f0c_crit_edge ], [ %v1_15ee8, %dec_label_pc_15f04 ]
  %v0_15f0c = phi i32 [ %v0_15f0c.pre, %dec_label_pc_15f0c.dec_label_pc_15f0c_crit_edge ], [ %v2_15eec, %dec_label_pc_15f04 ]
  %v3_15f0c = mul i32 %v0_15f0c, 256
  store i32 %v3_15f0c, i32* %lr.global-to-local, align 4
  %v1_15f10 = add i32 %v0_15f10, -4
  %v2_15f10 = inttoptr i32 %v1_15f10 to i32*
  %v3_15f10 = load i32, i32* %v2_15f10, align 4
  store i32 %v3_15f10, i32* @r3, align 4
  %v4_15f10 = add i32 %v0_15f10, -8
  %v5_15f10 = inttoptr i32 %v4_15f10 to i32*
  %v6_15f10 = load i32, i32* %v5_15f10, align 4
  store i32 %v6_15f10, i32* %r4.global-to-local, align 4
  %v7_15f10 = add i32 %v0_15f10, -12
  %v8_15f10 = inttoptr i32 %v7_15f10 to i32*
  %v9_15f10 = load i32, i32* %v8_15f10, align 4
  store i32 %v9_15f10, i32* %r5.global-to-local, align 4
  %v10_15f10 = add i32 %v0_15f10, -16
  %v11_15f10 = inttoptr i32 %v10_15f10 to i32*
  %v12_15f10 = load i32, i32* %v11_15f10, align 4
  store i32 %v10_15f10, i32* %r1.global-to-local, align 4
  %v4_15f14 = udiv i32 %v12_15f10, 16777216
  %v5_15f14 = or i32 %v4_15f14, %v3_15f0c
  store i32 %v5_15f14, i32* %lr.global-to-local, align 4
  %v3_15f18 = mul i32 %v12_15f10, 256
  %v4_15f1c = udiv i32 %v9_15f10, 16777216
  %v5_15f1c = or i32 %v3_15f18, %v4_15f1c
  store i32 %v5_15f1c, i32* @ip, align 4
  %v3_15f20 = mul i32 %v9_15f10, 256
  %v4_15f24 = udiv i32 %v6_15f10, 16777216
  %v5_15f24 = or i32 %v3_15f20, %v4_15f24
  store i32 %v5_15f24, i32* %r5.global-to-local, align 4
  %v3_15f28 = mul i32 %v6_15f10, 256
  %v4_15f2c = udiv i32 %v3_15f10, 16777216
  %v5_15f2c = or i32 %v3_15f28, %v4_15f2c
  store i32 %v5_15f2c, i32* %r4.global-to-local, align 4
  %v1_15f30 = add i32 %v0_15f30, -16
  %v2_15f30 = inttoptr i32 %v1_15f30 to i32*
  store i32 %v5_15f2c, i32* %v2_15f30, align 4
  %v4_15f30 = add i32 %v0_15f30, -12
  %v5_15f30 = inttoptr i32 %v4_15f30 to i32*
  %v6_15f30 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15f30, i32* %v5_15f30, align 4
  %v7_15f30 = add i32 %v0_15f30, -8
  %v8_15f30 = inttoptr i32 %v7_15f30 to i32*
  %v9_15f30 = load i32, i32* @ip, align 4
  store i32 %v9_15f30, i32* %v8_15f30, align 4
  %v10_15f30 = add i32 %v0_15f30, -4
  %v11_15f30 = inttoptr i32 %v10_15f30 to i32*
  %v12_15f30 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15f30, i32* %v11_15f30, align 4
  store i32 %v1_15f30, i32* %r0.global-to-local, align 4
  %v0_15f34 = load i32, i32* %r2.global-to-local, align 4
  %v2_15f34 = add i32 %v0_15f34, -16
  store i32 %v2_15f34, i32* %r2.global-to-local, align 4
  %v6_15f38 = icmp slt i32 %v0_15f34, 16
  br i1 %v6_15f38, label %dec_label_pc_15f3c, label %dec_label_pc_15f0c.dec_label_pc_15f0c_crit_edge

dec_label_pc_15f0c.dec_label_pc_15f0c_crit_edge:  ; preds = %dec_label_pc_15f0c
  %v0_15f0c.pre = load i32, i32* @r3, align 4
  %v0_15f10.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15f0c

dec_label_pc_15f3c:                               ; preds = %dec_label_pc_15f0c
  %v2_15f3c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15f3c, i32* @r4, align 4
  %v5_15f3c = load i8*, i8** %stack_var_-8, align 4
  %v6_15f3c = ptrtoint i8* %v5_15f3c to i32
  store i32 %v6_15f3c, i32* @r5, align 4
  store i32 %v11_15f08, i32* @lr, align 4
  %v2_15f40 = add i32 %v0_15f34, -4
  store i32 %v2_15f40, i32* %r2.global-to-local, align 4
  %v4_15f40 = add i32 %v0_15f34, 2147483632
  %v5_15f40 = and i32 %v2_15f40, %v4_15f40
  %v6_15f40 = icmp slt i32 %v5_15f40, 0
  store i1 %v6_15f40, i1* %cpsr_v.global-to-local, align 1
  %v7_15f40 = icmp slt i32 %v2_15f40, 0
  store i1 %v7_15f40, i1* %cpsr_n.global-to-local, align 1
  %v8_15f40 = icmp eq i32 %v2_15f40, 0
  store i1 %v8_15f40, i1* %cpsr_z.global-to-local, align 1
  %v5_15f44 = icmp slt i32 %v2_15f34, -12
  br i1 %v5_15f44, label %dec_label_pc_15f60, label %dec_label_pc_15f48

dec_label_pc_15f48:                               ; preds = %dec_label_pc_15f3c, %dec_label_pc_15efc, %dec_label_pc_15f48
  %v1_15f54 = phi i32 [ %v5_15f54, %dec_label_pc_15f48 ], [ %v1_15f30, %dec_label_pc_15f3c ], [ %v0_15f3019, %dec_label_pc_15efc ]
  %v0_15f48 = load i32, i32* @r3, align 4
  %v3_15f48 = mul i32 %v0_15f48, 256
  store i32 %v3_15f48, i32* %ip.global-to-local, align 4
  %v0_15f4c = load i32, i32* %r1.global-to-local, align 4
  %v1_15f4c = add i32 %v0_15f4c, -4
  %v2_15f4c = inttoptr i32 %v1_15f4c to i32*
  %v3_15f4c = load i32, i32* %v2_15f4c, align 4
  store i32 %v3_15f4c, i32* @r3, align 4
  store i32 %v1_15f4c, i32* %r1.global-to-local, align 4
  %v4_15f50 = udiv i32 %v3_15f4c, 16777216
  %v5_15f50 = or i32 %v4_15f50, %v3_15f48
  store i32 %v5_15f50, i32* @ip, align 4
  %v2_15f54 = add i32 %v1_15f54, -4
  %v3_15f54 = inttoptr i32 %v2_15f54 to i32*
  store i32 %v5_15f50, i32* %v3_15f54, align 4
  %v4_15f54 = load i32, i32* %r0.global-to-local, align 4
  %v5_15f54 = add i32 %v4_15f54, -4
  store i32 %v5_15f54, i32* %r0.global-to-local, align 4
  %v0_15f58 = load i32, i32* %r2.global-to-local, align 4
  %v2_15f58 = add i32 %v0_15f58, -4
  store i32 %v2_15f58, i32* %r2.global-to-local, align 4
  %v6_15f5c = icmp slt i32 %v0_15f58, 4
  br i1 %v6_15f5c, label %dec_label_pc_15f60.loopexit, label %dec_label_pc_15f48

dec_label_pc_15f60.loopexit:                      ; preds = %dec_label_pc_15f48
  %v4_15f58 = sub i32 3, %v0_15f58
  %v5_15f58 = and i32 %v4_15f58, %v0_15f58
  %v6_15f58 = icmp slt i32 %v5_15f58, 0
  %v7_15f58 = icmp slt i32 %v2_15f58, 0
  store i1 %v6_15f58, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15f58, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15f60

dec_label_pc_15f60:                               ; preds = %dec_label_pc_15f60.loopexit, %dec_label_pc_15f3c
  %v2_15ea451 = phi i32 [ %v5_15f54, %dec_label_pc_15f60.loopexit ], [ %v1_15f30, %dec_label_pc_15f3c ]
  %v0_15e9447 = phi i32 [ %v2_15f58, %dec_label_pc_15f60.loopexit ], [ %v2_15f40, %dec_label_pc_15f3c ]
  %v0_15f60 = load i32, i32* %r1.global-to-local, align 4
  %v1_15f60 = add i32 %v0_15f60, 3
  store i32 %v1_15f60, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_15f68:                               ; preds = %dec_label_pc_15ef8
  br i1 %v5_15fd8, label %dec_label_pc_15fb4, label %dec_label_pc_15f70

dec_label_pc_15f70:                               ; preds = %dec_label_pc_15f68
  store i32 %v2_15fd4, i32* %r2.global-to-local, align 4
  %v3_15f74 = load i32, i32* @r4, align 4
  store i32 %v3_15f74, i32* %stack_var_-12, align 4
  %v6_15f74 = load i32, i32* @r5, align 4
  %v8_15f74 = inttoptr i32 %v6_15f74 to i8*
  store i8* %v8_15f74, i8** %stack_var_-8, align 4
  %v11_15f74 = load i32, i32* @lr, align 4
  br label %dec_label_pc_15f78

dec_label_pc_15f78:                               ; preds = %dec_label_pc_15f78.dec_label_pc_15f78_crit_edge, %dec_label_pc_15f70
  %v0_15f9c = phi i32 [ %v1_15f9c, %dec_label_pc_15f78.dec_label_pc_15f78_crit_edge ], [ %v0_15f3019, %dec_label_pc_15f70 ]
  %v0_15f7c = phi i32 [ %v0_15f7c.pre, %dec_label_pc_15f78.dec_label_pc_15f78_crit_edge ], [ %v1_15ee8, %dec_label_pc_15f70 ]
  %v0_15f78 = phi i32 [ %v0_15f78.pre, %dec_label_pc_15f78.dec_label_pc_15f78_crit_edge ], [ %v2_15eec, %dec_label_pc_15f70 ]
  %v3_15f78 = mul i32 %v0_15f78, 65536
  store i32 %v3_15f78, i32* %lr.global-to-local, align 4
  %v1_15f7c = add i32 %v0_15f7c, -4
  %v2_15f7c = inttoptr i32 %v1_15f7c to i32*
  %v3_15f7c = load i32, i32* %v2_15f7c, align 4
  store i32 %v3_15f7c, i32* @r3, align 4
  %v4_15f7c = add i32 %v0_15f7c, -8
  %v5_15f7c = inttoptr i32 %v4_15f7c to i32*
  %v6_15f7c = load i32, i32* %v5_15f7c, align 4
  store i32 %v6_15f7c, i32* %r4.global-to-local, align 4
  %v7_15f7c = add i32 %v0_15f7c, -12
  %v8_15f7c = inttoptr i32 %v7_15f7c to i32*
  %v9_15f7c = load i32, i32* %v8_15f7c, align 4
  store i32 %v9_15f7c, i32* %r5.global-to-local, align 4
  %v10_15f7c = add i32 %v0_15f7c, -16
  %v11_15f7c = inttoptr i32 %v10_15f7c to i32*
  %v12_15f7c = load i32, i32* %v11_15f7c, align 4
  store i32 %v10_15f7c, i32* %r1.global-to-local, align 4
  %v4_15f80 = udiv i32 %v12_15f7c, 65536
  %v5_15f80 = or i32 %v4_15f80, %v3_15f78
  store i32 %v5_15f80, i32* %lr.global-to-local, align 4
  %v3_15f84 = mul i32 %v12_15f7c, 65536
  %v4_15f88 = udiv i32 %v9_15f7c, 65536
  %v5_15f88 = or i32 %v3_15f84, %v4_15f88
  store i32 %v5_15f88, i32* @ip, align 4
  %v3_15f8c = mul i32 %v9_15f7c, 65536
  %v4_15f90 = udiv i32 %v6_15f7c, 65536
  %v5_15f90 = or i32 %v3_15f8c, %v4_15f90
  store i32 %v5_15f90, i32* %r5.global-to-local, align 4
  %v3_15f94 = mul i32 %v6_15f7c, 65536
  %v4_15f98 = udiv i32 %v3_15f7c, 65536
  %v5_15f98 = or i32 %v3_15f94, %v4_15f98
  store i32 %v5_15f98, i32* %r4.global-to-local, align 4
  %v1_15f9c = add i32 %v0_15f9c, -16
  %v2_15f9c = inttoptr i32 %v1_15f9c to i32*
  store i32 %v5_15f98, i32* %v2_15f9c, align 4
  %v4_15f9c = add i32 %v0_15f9c, -12
  %v5_15f9c = inttoptr i32 %v4_15f9c to i32*
  %v6_15f9c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15f9c, i32* %v5_15f9c, align 4
  %v7_15f9c = add i32 %v0_15f9c, -8
  %v8_15f9c = inttoptr i32 %v7_15f9c to i32*
  %v9_15f9c = load i32, i32* @ip, align 4
  store i32 %v9_15f9c, i32* %v8_15f9c, align 4
  %v10_15f9c = add i32 %v0_15f9c, -4
  %v11_15f9c = inttoptr i32 %v10_15f9c to i32*
  %v12_15f9c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15f9c, i32* %v11_15f9c, align 4
  store i32 %v1_15f9c, i32* %r0.global-to-local, align 4
  %v0_15fa0 = load i32, i32* %r2.global-to-local, align 4
  %v2_15fa0 = add i32 %v0_15fa0, -16
  store i32 %v2_15fa0, i32* %r2.global-to-local, align 4
  %v6_15fa4 = icmp slt i32 %v0_15fa0, 16
  br i1 %v6_15fa4, label %dec_label_pc_15fa8, label %dec_label_pc_15f78.dec_label_pc_15f78_crit_edge

dec_label_pc_15f78.dec_label_pc_15f78_crit_edge:  ; preds = %dec_label_pc_15f78
  %v0_15f78.pre = load i32, i32* @r3, align 4
  %v0_15f7c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15f78

dec_label_pc_15fa8:                               ; preds = %dec_label_pc_15f78
  %v2_15fa8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15fa8, i32* @r4, align 4
  %v5_15fa8 = load i8*, i8** %stack_var_-8, align 4
  %v6_15fa8 = ptrtoint i8* %v5_15fa8 to i32
  store i32 %v6_15fa8, i32* @r5, align 4
  store i32 %v11_15f74, i32* @lr, align 4
  %v2_15fac = add i32 %v0_15fa0, -4
  store i32 %v2_15fac, i32* %r2.global-to-local, align 4
  %v4_15fac = add i32 %v0_15fa0, 2147483632
  %v5_15fac = and i32 %v2_15fac, %v4_15fac
  %v6_15fac = icmp slt i32 %v5_15fac, 0
  store i1 %v6_15fac, i1* %cpsr_v.global-to-local, align 1
  %v7_15fac = icmp slt i32 %v2_15fac, 0
  store i1 %v7_15fac, i1* %cpsr_n.global-to-local, align 1
  %v8_15fac = icmp eq i32 %v2_15fac, 0
  store i1 %v8_15fac, i1* %cpsr_z.global-to-local, align 1
  %v5_15fb0 = icmp slt i32 %v2_15fa0, -12
  br i1 %v5_15fb0, label %dec_label_pc_15fcc, label %dec_label_pc_15fb4

dec_label_pc_15fb4:                               ; preds = %dec_label_pc_15fa8, %dec_label_pc_15f68, %dec_label_pc_15fb4
  %v1_15fc0 = phi i32 [ %v5_15fc0, %dec_label_pc_15fb4 ], [ %v1_15f9c, %dec_label_pc_15fa8 ], [ %v0_15f3019, %dec_label_pc_15f68 ]
  %v0_15fb4 = load i32, i32* @r3, align 4
  %v3_15fb4 = mul i32 %v0_15fb4, 65536
  store i32 %v3_15fb4, i32* %ip.global-to-local, align 4
  %v0_15fb8 = load i32, i32* %r1.global-to-local, align 4
  %v1_15fb8 = add i32 %v0_15fb8, -4
  %v2_15fb8 = inttoptr i32 %v1_15fb8 to i32*
  %v3_15fb8 = load i32, i32* %v2_15fb8, align 4
  store i32 %v3_15fb8, i32* @r3, align 4
  store i32 %v1_15fb8, i32* %r1.global-to-local, align 4
  %v4_15fbc = udiv i32 %v3_15fb8, 65536
  %v5_15fbc = or i32 %v4_15fbc, %v3_15fb4
  store i32 %v5_15fbc, i32* @ip, align 4
  %v2_15fc0 = add i32 %v1_15fc0, -4
  %v3_15fc0 = inttoptr i32 %v2_15fc0 to i32*
  store i32 %v5_15fbc, i32* %v3_15fc0, align 4
  %v4_15fc0 = load i32, i32* %r0.global-to-local, align 4
  %v5_15fc0 = add i32 %v4_15fc0, -4
  store i32 %v5_15fc0, i32* %r0.global-to-local, align 4
  %v0_15fc4 = load i32, i32* %r2.global-to-local, align 4
  %v2_15fc4 = add i32 %v0_15fc4, -4
  store i32 %v2_15fc4, i32* %r2.global-to-local, align 4
  %v6_15fc8 = icmp slt i32 %v0_15fc4, 4
  br i1 %v6_15fc8, label %dec_label_pc_15fcc.loopexit, label %dec_label_pc_15fb4

dec_label_pc_15fcc.loopexit:                      ; preds = %dec_label_pc_15fb4
  %v4_15fc4 = sub i32 3, %v0_15fc4
  %v5_15fc4 = and i32 %v4_15fc4, %v0_15fc4
  %v6_15fc4 = icmp slt i32 %v5_15fc4, 0
  %v7_15fc4 = icmp slt i32 %v2_15fc4, 0
  store i1 %v6_15fc4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15fc4, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15fcc

dec_label_pc_15fcc:                               ; preds = %dec_label_pc_15fcc.loopexit, %dec_label_pc_15fa8
  %v2_15ea452 = phi i32 [ %v5_15fc0, %dec_label_pc_15fcc.loopexit ], [ %v1_15f9c, %dec_label_pc_15fa8 ]
  %v0_15e9448 = phi i32 [ %v2_15fc4, %dec_label_pc_15fcc.loopexit ], [ %v2_15fac, %dec_label_pc_15fa8 ]
  %v0_15fcc = load i32, i32* %r1.global-to-local, align 4
  %v1_15fcc = add i32 %v0_15fcc, 2
  store i32 %v1_15fcc, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_15fd4:                               ; preds = %dec_label_pc_15ee8
  br i1 %v5_15fd8, label %dec_label_pc_16020, label %dec_label_pc_15fdc

dec_label_pc_15fdc:                               ; preds = %dec_label_pc_15fd4
  store i32 %v2_15fd4, i32* %r2.global-to-local, align 4
  %v3_15fe0 = load i32, i32* @r4, align 4
  store i32 %v3_15fe0, i32* %stack_var_-12, align 4
  %v6_15fe0 = load i32, i32* @r5, align 4
  %v8_15fe0 = inttoptr i32 %v6_15fe0 to i8*
  store i8* %v8_15fe0, i8** %stack_var_-8, align 4
  %v11_15fe0 = load i32, i32* @lr, align 4
  br label %dec_label_pc_15fe4

dec_label_pc_15fe4:                               ; preds = %dec_label_pc_15fe4.dec_label_pc_15fe4_crit_edge, %dec_label_pc_15fdc
  %v0_16008 = phi i32 [ %v1_16008, %dec_label_pc_15fe4.dec_label_pc_15fe4_crit_edge ], [ %v0_15f3019, %dec_label_pc_15fdc ]
  %v0_15fe8 = phi i32 [ %v0_15fe8.pre, %dec_label_pc_15fe4.dec_label_pc_15fe4_crit_edge ], [ %v1_15ee8, %dec_label_pc_15fdc ]
  %v0_15fe4 = phi i32 [ %v0_15fe4.pre, %dec_label_pc_15fe4.dec_label_pc_15fe4_crit_edge ], [ %v2_15eec, %dec_label_pc_15fdc ]
  %v3_15fe4 = mul i32 %v0_15fe4, 16777216
  store i32 %v3_15fe4, i32* %lr.global-to-local, align 4
  %v1_15fe8 = add i32 %v0_15fe8, -4
  %v2_15fe8 = inttoptr i32 %v1_15fe8 to i32*
  %v3_15fe8 = load i32, i32* %v2_15fe8, align 4
  store i32 %v3_15fe8, i32* @r3, align 4
  %v4_15fe8 = add i32 %v0_15fe8, -8
  %v5_15fe8 = inttoptr i32 %v4_15fe8 to i32*
  %v6_15fe8 = load i32, i32* %v5_15fe8, align 4
  store i32 %v6_15fe8, i32* %r4.global-to-local, align 4
  %v7_15fe8 = add i32 %v0_15fe8, -12
  %v8_15fe8 = inttoptr i32 %v7_15fe8 to i32*
  %v9_15fe8 = load i32, i32* %v8_15fe8, align 4
  store i32 %v9_15fe8, i32* %r5.global-to-local, align 4
  %v10_15fe8 = add i32 %v0_15fe8, -16
  %v11_15fe8 = inttoptr i32 %v10_15fe8 to i32*
  %v12_15fe8 = load i32, i32* %v11_15fe8, align 4
  store i32 %v10_15fe8, i32* %r1.global-to-local, align 4
  %v4_15fec = udiv i32 %v12_15fe8, 256
  %v5_15fec = or i32 %v4_15fec, %v3_15fe4
  store i32 %v5_15fec, i32* %lr.global-to-local, align 4
  %v3_15ff0 = mul i32 %v12_15fe8, 16777216
  %v4_15ff4 = udiv i32 %v9_15fe8, 256
  %v5_15ff4 = or i32 %v3_15ff0, %v4_15ff4
  store i32 %v5_15ff4, i32* @ip, align 4
  %v3_15ff8 = mul i32 %v9_15fe8, 16777216
  %v4_15ffc = udiv i32 %v6_15fe8, 256
  %v5_15ffc = or i32 %v3_15ff8, %v4_15ffc
  store i32 %v5_15ffc, i32* %r5.global-to-local, align 4
  %v3_16000 = mul i32 %v6_15fe8, 16777216
  %v4_16004 = udiv i32 %v3_15fe8, 256
  %v5_16004 = or i32 %v3_16000, %v4_16004
  store i32 %v5_16004, i32* %r4.global-to-local, align 4
  %v1_16008 = add i32 %v0_16008, -16
  %v2_16008 = inttoptr i32 %v1_16008 to i32*
  store i32 %v5_16004, i32* %v2_16008, align 4
  %v4_16008 = add i32 %v0_16008, -12
  %v5_16008 = inttoptr i32 %v4_16008 to i32*
  %v6_16008 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_16008, i32* %v5_16008, align 4
  %v7_16008 = add i32 %v0_16008, -8
  %v8_16008 = inttoptr i32 %v7_16008 to i32*
  %v9_16008 = load i32, i32* @ip, align 4
  store i32 %v9_16008, i32* %v8_16008, align 4
  %v10_16008 = add i32 %v0_16008, -4
  %v11_16008 = inttoptr i32 %v10_16008 to i32*
  %v12_16008 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16008, i32* %v11_16008, align 4
  store i32 %v1_16008, i32* %r0.global-to-local, align 4
  %v0_1600c = load i32, i32* %r2.global-to-local, align 4
  %v2_1600c = add i32 %v0_1600c, -16
  store i32 %v2_1600c, i32* %r2.global-to-local, align 4
  %v6_16010 = icmp slt i32 %v0_1600c, 16
  br i1 %v6_16010, label %dec_label_pc_16014, label %dec_label_pc_15fe4.dec_label_pc_15fe4_crit_edge

dec_label_pc_15fe4.dec_label_pc_15fe4_crit_edge:  ; preds = %dec_label_pc_15fe4
  %v0_15fe4.pre = load i32, i32* @r3, align 4
  %v0_15fe8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15fe4

dec_label_pc_16014:                               ; preds = %dec_label_pc_15fe4
  %v2_16014 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16014, i32* @r4, align 4
  %v5_16014 = load i8*, i8** %stack_var_-8, align 4
  %v6_16014 = ptrtoint i8* %v5_16014 to i32
  store i32 %v6_16014, i32* @r5, align 4
  store i32 %v11_15fe0, i32* @lr, align 4
  %v2_16018 = add i32 %v0_1600c, -4
  store i32 %v2_16018, i32* %r2.global-to-local, align 4
  %v4_16018 = add i32 %v0_1600c, 2147483632
  %v5_16018 = and i32 %v2_16018, %v4_16018
  %v6_16018 = icmp slt i32 %v5_16018, 0
  store i1 %v6_16018, i1* %cpsr_v.global-to-local, align 1
  %v7_16018 = icmp slt i32 %v2_16018, 0
  store i1 %v7_16018, i1* %cpsr_n.global-to-local, align 1
  %v8_16018 = icmp eq i32 %v2_16018, 0
  store i1 %v8_16018, i1* %cpsr_z.global-to-local, align 1
  %v5_1601c = icmp slt i32 %v2_1600c, -12
  br i1 %v5_1601c, label %dec_label_pc_16038, label %dec_label_pc_16020

dec_label_pc_16020:                               ; preds = %dec_label_pc_16014, %dec_label_pc_15fd4, %dec_label_pc_16020
  %v1_1602c = phi i32 [ %v5_1602c, %dec_label_pc_16020 ], [ %v1_16008, %dec_label_pc_16014 ], [ %v0_15f3019, %dec_label_pc_15fd4 ]
  %v0_16020 = load i32, i32* @r3, align 4
  %v3_16020 = mul i32 %v0_16020, 16777216
  store i32 %v3_16020, i32* %ip.global-to-local, align 4
  %v0_16024 = load i32, i32* %r1.global-to-local, align 4
  %v1_16024 = add i32 %v0_16024, -4
  %v2_16024 = inttoptr i32 %v1_16024 to i32*
  %v3_16024 = load i32, i32* %v2_16024, align 4
  store i32 %v3_16024, i32* @r3, align 4
  store i32 %v1_16024, i32* %r1.global-to-local, align 4
  %v4_16028 = udiv i32 %v3_16024, 256
  %v5_16028 = or i32 %v4_16028, %v3_16020
  store i32 %v5_16028, i32* @ip, align 4
  %v2_1602c = add i32 %v1_1602c, -4
  %v3_1602c = inttoptr i32 %v2_1602c to i32*
  store i32 %v5_16028, i32* %v3_1602c, align 4
  %v4_1602c = load i32, i32* %r0.global-to-local, align 4
  %v5_1602c = add i32 %v4_1602c, -4
  store i32 %v5_1602c, i32* %r0.global-to-local, align 4
  %v0_16030 = load i32, i32* %r2.global-to-local, align 4
  %v2_16030 = add i32 %v0_16030, -4
  store i32 %v2_16030, i32* %r2.global-to-local, align 4
  %v6_16034 = icmp slt i32 %v0_16030, 4
  br i1 %v6_16034, label %dec_label_pc_16038.loopexit, label %dec_label_pc_16020

dec_label_pc_16038.loopexit:                      ; preds = %dec_label_pc_16020
  %v4_16030 = sub i32 3, %v0_16030
  %v5_16030 = and i32 %v4_16030, %v0_16030
  %v6_16030 = icmp slt i32 %v5_16030, 0
  %v7_16030 = icmp slt i32 %v2_16030, 0
  store i1 %v6_16030, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16030, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16038

dec_label_pc_16038:                               ; preds = %dec_label_pc_16038.loopexit, %dec_label_pc_16014
  %v2_15ea453 = phi i32 [ %v5_1602c, %dec_label_pc_16038.loopexit ], [ %v1_16008, %dec_label_pc_16014 ]
  %v0_15e9449 = phi i32 [ %v2_16030, %dec_label_pc_16038.loopexit ], [ %v2_16018, %dec_label_pc_16014 ]
  %v0_16038 = load i32, i32* %r1.global-to-local, align 4
  %v1_16038 = add i32 %v0_16038, 1
  store i32 %v1_16038, i32* %r1.global-to-local, align 4
  br label %bb150

; uselistorder directives
  uselistorder i32 %v5_1602c, { 0, 2, 1 }
  uselistorder i32 %v3_16020, { 1, 0 }
  uselistorder i32 %v2_16018, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16008, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15fe8, { 1, 0 }
  uselistorder i32 %v3_15fe4, { 1, 0 }
  uselistorder i32 %v0_15fe8, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16008, { 3, 2, 1, 0 }
  uselistorder i32 %v5_15fc0, { 0, 2, 1 }
  uselistorder i32 %v3_15fb4, { 1, 0 }
  uselistorder i32 %v2_15fac, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15f9c, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15f7c, { 1, 0 }
  uselistorder i32 %v3_15f78, { 1, 0 }
  uselistorder i32 %v0_15f7c, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15f9c, { 3, 2, 1, 0 }
  uselistorder i32 %v5_15f54, { 0, 2, 1 }
  uselistorder i32 %v3_15f48, { 1, 0 }
  uselistorder i32 %v2_15f40, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15f30, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15f10, { 1, 0 }
  uselistorder i32 %v3_15f0c, { 1, 0 }
  uselistorder i32 %v0_15f10, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15f30, { 3, 2, 1, 0 }
  uselistorder i1 %v5_15fd8, { 2, 0, 1 }
  uselistorder i32 %v0_15ef0, { 1, 0 }
  uselistorder i32 %v0_15fdc, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_15f3019, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_15ee0, { 2, 1, 0 }
  uselistorder i32 %v0_15ee0, { 2, 0, 1 }
  uselistorder i32 %v2_15ed8, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_15ed8, { 1, 2, 0, 3 }
  uselistorder i32 %v0_15ed8, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_15f3020, { 2, 1, 0 }
  uselistorder i32 %v11_15eb4, { 1, 0 }
  uselistorder i32 %v7_15eb4, { 1, 0 }
  uselistorder i32 %v1_15e94, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_15e94, { 1, 2, 0, 3 }
  uselistorder i32 %v2_15e98, { 1, 0 }
  uselistorder i32 %v7_15e8c, { 0, 2, 1 }
  uselistorder i32 %v10_15e88, { 1, 0 }
  uselistorder i32 %v9_15e80, { 1, 0, 2 }
  uselistorder i32 %v6_15e7c, { 1, 0 }
  uselistorder i32 %v2_15e74, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_15e74, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_15e84, { 0, 3, 2, 1 }
  uselistorder i32 %v7_15e68, { 0, 2, 1 }
  uselistorder i32 %v13_15e64, { 1, 0 }
  uselistorder i32 %v4_15e60, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_15e60, { 2, 0, 1 }
  uselistorder i32 %v6_15e68, { 0, 3, 2, 1 }
  uselistorder i32 %v7_15e58, { 0, 2, 1 }
  uselistorder i32 %v16_15e54, { 1, 0 }
  uselistorder i32 %v4_15e50, { 1, 2, 0 }
  uselistorder i32 %v0_15e60.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_15e58, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_15e44, { 0, 3, 2, 1 }
  uselistorder i32 %v10_15e40, { 1, 0 }
  uselistorder i32 %v1_15e3c, { 1, 0 }
  uselistorder i32 %v10_15e38, { 1, 0 }
  uselistorder i32 %v0_15e38, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15e3c, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_15e30, { 0, 2, 1 }
  uselistorder i32 %v2_15e24, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_15e24, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_15e3c37, { 1, 2, 0 }
  uselistorder i32 %v1_15e1c, { 2, 1, 0 }
  uselistorder i32 %v1_15e14, { 2, 3, 1, 0 }
  uselistorder i32 %v2_15e0c, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_15e08, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_15e04, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_15e04, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v1_15df4, { 0, 2, 1 }
  uselistorder i32 %v4_15df0, { 1, 0 }
  uselistorder i32 %v3_15de4, { 1, 0 }
  uselistorder i32 %v1_15ddc, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15dd0, { 1, 0 }
  uselistorder i32 %v12_15dcc, { 0, 2, 1 }
  uselistorder i32 %v8_15dac, { 1, 0, 2 }
  uselistorder i32 %v5_15dac, { 1, 0, 2 }
  uselistorder i32 %v2_15dac, { 1, 0, 2 }
  uselistorder i32 %v0_15dac, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15dcc, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_15d88, { 0, 2, 1 }
  uselistorder i32 %v4_15d84, { 1, 0 }
  uselistorder i32 %v3_15d78, { 1, 0 }
  uselistorder i32 %v1_15d70, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15d64, { 1, 0 }
  uselistorder i32 %v12_15d60, { 0, 2, 1 }
  uselistorder i32 %v8_15d40, { 1, 0, 2 }
  uselistorder i32 %v5_15d40, { 1, 0, 2 }
  uselistorder i32 %v2_15d40, { 1, 0, 2 }
  uselistorder i32 %v0_15d40, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15d60, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_15d1c, { 0, 2, 1 }
  uselistorder i32 %v4_15d18, { 1, 0 }
  uselistorder i32 %v3_15d0c, { 1, 0 }
  uselistorder i32 %v1_15d04, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15cf8, { 1, 0 }
  uselistorder i32 %v12_15cf4, { 0, 2, 1 }
  uselistorder i32 %v8_15cd4, { 1, 0, 2 }
  uselistorder i32 %v5_15cd4, { 1, 0, 2 }
  uselistorder i32 %v2_15cd4, { 1, 0, 2 }
  uselistorder i32 %v0_15cd4, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15cf4, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v2_15d30, { 0, 2, 1 }
  uselistorder i32 %v1_15d2c, { 2, 0, 1, 3 }
  uselistorder i32 %v4_15cb0, { 2, 0, 1, 3 }
  uselistorder i32 %v2_15cb0, { 2, 0, 1, 3 }
  uselistorder i32 %v0_15d34, { 1, 0, 3, 2 }
  uselistorder i32 %v0_15dcc76, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32 %v1_15ca4, { 1, 0 }
  uselistorder i32 %v0_15ca4, { 3, 1, 0, 2 }
  uselistorder i32 %v2_15c9c, { 2, 4, 0, 5, 1, 3 }
  uselistorder i32 %v1_15c9c, { 1, 0, 2 }
  uselistorder i32 %v0_15c9c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_15dcc77, { 1, 0 }
  uselistorder i32 %v1_15c7c, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_15c84, { 1, 0 }
  uselistorder i32 %v0_15c58, { 3, 0, 1, 2 }
  uselistorder i32 %v1_15c4c, { 1, 2, 0, 3 }
  uselistorder i32 %v5_15c38, { 1, 0, 2 }
  uselistorder i32 %v1_15c34, { 1, 0 }
  uselistorder i32 %v1_15c2c, { 2, 0, 1, 4, 5, 3, 6 }
  uselistorder i32 %v0_15c2c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_15c24, { 0, 2, 1 }
  uselistorder i32 %v3_15c24, { 3, 0, 1, 2 }
  uselistorder i1 %v0_15c24, { 1, 0 }
  uselistorder i1 %v1_15c24, { 1, 0 }
  uselistorder i32 %v3_15c20, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_15c18, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15c04, { 1, 2, 0 }
  uselistorder i32 %v1_15bfc, { 0, 2, 1 }
  uselistorder i32 %v12_15bf8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_15bec, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15bf0, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v1_15be0, { 0, 2, 1 }
  uselistorder i32 %v1_15bd8, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_15bd8, { 1, 2, 3, 0, 5, 4 }
  uselistorder i32 %v1_15bd0, { 1, 0 }
  uselistorder i32 %v1_15bc8, { 2, 1, 0 }
  uselistorder i32 %v2_15bc0, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v0_15bc0, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v8_15bbc, { 1, 0 }
  uselistorder i32 %v2_15bb0, { 1, 0 }
  uselistorder i32 %v1_15bb0, { 1, 4, 5, 3, 0, 6, 8, 2, 7, 9 }
  uselistorder i32 %v0_15bb0, { 1, 7, 8, 6, 4, 0, 5, 10, 2, 3, 9, 11 }
  uselistorder i8** %stack_var_-8, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 26, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32* %r2.global-to-local, { 0, 69, 1, 2, 3, 4, 5, 70, 6, 7, 8, 9, 10, 71, 11, 12, 67, 68, 72, 28, 13, 14, 16, 15, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 29, 30, 62, 31, 32, 33, 34, 35, 63, 36, 37, 38, 39, 40, 64, 41, 42, 43, 44, 45, 65, 46, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 56, 2, 4, 6, 8, 5, 57, 7, 9, 11, 54, 10, 58, 53, 55, 59, 62, 60, 66, 67, 12, 13, 14, 16, 15, 17, 18, 61, 19, 20, 63, 21, 64, 22, 65, 23, 24, 25, 26, 27, 30, 28, 40, 29, 31, 34, 32, 41, 33, 35, 38, 36, 42, 37, 39, 43, 44, 47, 45, 48, 46, 49, 50, 51, 52 }
  uselistorder i32* %r0.global-to-local, { 0, 28, 1, 2, 29, 3, 4, 30, 5, 27, 33, 34, 6, 7, 19, 8, 10, 9, 11, 12, 31, 13, 14, 32, 15, 16, 17, 18, 20, 21, 23, 22, 24, 25, 26 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 35, 36, 37, 6, 7, 8, 9, 10, 11, 12, 13, 14, 23, 15, 16, 17, 24, 18, 19, 20, 25, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 46, 47, 11, 12, 13, 14, 15, 16, 17, 18, 3, 19, 20, 21, 22, 23, 2, 24, 0, 25, 1, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 44, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 2, 23, 0, 24, 1, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 49, 50, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 2, 25, 0, 26, 1, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -3, { 0, 4, 5, 3, 1, 2 }
  uselistorder i32 2147483632, { 3, 4, 5, 2, 0, 1, 6 }
  uselistorder i32 15, { 27, 28, 29, 0, 38, 1, 39, 30, 31, 6, 32, 7, 33, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 3, 2, 18, 19, 20, 21, 22, 23, 24, 25, 34, 26, 35, 4, 36, 5, 37 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 31, 2, 4, 5, 3, 6, 7, 8, 9, 20, 36, 41, 39, 40, 38, 32, 33, 24, 25, 34, 35, 37, 27, 28, 29, 21, 30, 26, 11, 12, 16, 17, 18, 10, 13, 14, 15, 19, 22, 23, 0, 1 }
  uselistorder i32 -5, { 1, 0, 2, 3 }
  uselistorder i32 11, { 9, 10, 11, 18, 26, 27, 3, 4, 5, 12, 13, 14, 6, 15, 0, 16, 17, 19, 20, 7, 22, 8, 23, 1, 24, 2, 25, 21 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 22, 6, 3, 5, 4, 23 }
  uselistorder i32 48, { 0, 2, 4, 12, 3, 5, 6, 13, 14, 8, 9, 10, 11, 18, 19, 20, 15, 16, 7, 17, 1 }
  uselistorder i32 40, { 3, 9, 11, 4, 2, 7, 6, 10, 12, 8, 13, 14, 15, 5, 16, 17, 0, 18, 20, 19, 21, 1, 22, 24, 23 }
  uselistorder i32 36, { 4, 24, 5, 6, 7, 26, 8, 22, 9, 23, 10, 11, 12, 0, 1, 13, 2, 14, 3, 15, 16, 17, 25, 18, 19, 20, 21 }
  uselistorder i32 -16, { 6, 7, 8, 9, 10, 11, 12, 13, 14, 5, 4, 3, 1, 15, 16, 17, 18, 19, 20, 2, 0 }
  uselistorder i32 31, { 6, 7, 0, 4, 1, 2, 3, 8, 9, 5 }
  uselistorder i32 -32, { 3, 2, 4, 0, 1, 5 }
  uselistorder i32 24, { 0, 60, 61, 62, 63, 8, 9, 10, 12, 11, 13, 1, 14, 64, 65, 66, 15, 67, 16, 17, 68, 18, 59, 92, 93, 55, 56, 57, 58, 19, 20, 21, 22, 106, 107, 23, 108, 24, 2, 25, 94, 95, 26, 96, 53, 54, 27, 85, 86, 87, 78, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 88, 89, 90, 91, 28, 29, 30, 31, 32, 33, 34, 35, 36, 99, 37, 38, 3, 39, 40, 41, 4, 42, 43, 5, 44, 45, 100, 46, 6, 101, 47, 102, 103, 104, 105, 48, 49, 7, 109, 50, 110, 51, 97, 52, 98 }
  uselistorder i32 27, { 1, 0, 5, 6, 2, 7, 3, 8, 4, 9 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32* @lr, { 159, 160, 161, 162, 163, 164, 165, 166, 167, 4, 5, 6, 7, 8, 9, 10, 11, 12, 3, 66, 67, 43, 168, 169, 13, 14, 125, 126, 127, 128, 129, 130, 122, 123, 124, 131, 144, 145, 132, 133, 134, 135, 136, 137, 138, 2, 139, 140, 142, 143, 141, 53, 54, 55, 56, 57, 58, 146, 147, 148, 59, 149, 68, 15, 16, 17, 18, 19, 20, 0, 24, 25, 21, 22, 23, 32, 33, 34, 35, 36, 37, 38, 40, 39, 1, 41, 42, 26, 27, 28, 29, 30, 31, 44, 45, 46, 47, 48, 49, 50, 51, 52, 60, 61, 62, 63, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 150, 151, 152, 153, 154, 155, 156, 157, 158, 64, 65 }
  uselistorder label %dec_label_pc_16020, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15fb4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15f48, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15ee8, { 1, 0 }
  uselistorder label %.thread14, { 2, 0, 1 }
  uselistorder label %.thread129, { 1, 0 }
  uselistorder label %bb150, { 4, 5, 6, 3, 7, 0, 1, 2 }
  uselistorder label %dec_label_pc_15e74, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_15e38, { 1, 0 }
  uselistorder label %dec_label_pc_15e24, { 1, 0 }
  uselistorder label %dec_label_pc_15de4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15d78, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15d0c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15cac, { 1, 0 }
  uselistorder label %.thread128, { 1, 0 }
  uselistorder label %.thread127, { 1, 0 }
  uselistorder label %dec_label_pc_15c7c, { 1, 0 }
  uselistorder label %.thread126, { 1, 0 }
  uselistorder label %.thread125, { 1, 0 }
  uselistorder label %bb142, { 1, 0 }
  uselistorder label %bb140, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread115, { 1, 0 }
  uselistorder label %dec_label_pc_15c18, { 1, 0 }
  uselistorder label %bb137, { 1, 0 }
  uselistorder label %dec_label_pc_15bd8, { 1, 0 }
}

define i32 @function_16040(i32 %arg1) local_unnamed_addr {
dec_label_pc_16040:
  %v1_16040 = and i32 %arg1, -4
  %v1_16044 = inttoptr i32 %v1_16040 to i32*
  %v2_16044 = load i32, i32* %v1_16044, align 4
  %v1_16048 = urem i32 %arg1, 4
  store i32 %v1_16048, i32* @r3, align 4
  %v2_16048 = icmp eq i32 %v1_16048, 0
  %v1_1604c = sub nsw i32 0, %v1_16048
  br i1 %v2_16048, label %.preheader.preheader, label %dec_label_pc_16054

dec_label_pc_16054:                               ; preds = %dec_label_pc_16040
  %v1_16054 = or i32 %v2_16044, 255
  %v7_16058 = icmp eq i32 %v1_16048, 1
  br i1 %v7_16058, label %bb33, label %bb

bb:                                               ; preds = %dec_label_pc_16054
  %v9_1605c = or i32 %v2_16044, 65535
  br label %bb33

bb33:                                             ; preds = %dec_label_pc_16054, %bb
  %v8_16064 = phi i32 [ %v1_16054, %dec_label_pc_16054 ], [ %v9_1605c, %bb ]
  %v1_16060 = add nsw i32 %v1_16048, -2
  store i32 %v1_16060, i32* @r3, align 4
  %v7_16064 = icmp eq i32 %v1_16048, 3
  br i1 %v7_16064, label %bb34, label %.preheader.preheader

bb34:                                             ; preds = %bb33
  %v9_16064 = or i32 %v8_16064, 16711680
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %bb33, %bb34, %dec_label_pc_16040
  %v1_16074.ph = phi i32 [ %v2_16044, %dec_label_pc_16040 ], [ %v9_16064, %bb34 ], [ %v8_16064, %bb33 ]
  %v1_1606838 = urem i32 %v1_16074.ph, 256
  %v2_1606839 = icmp eq i32 %v1_1606838, 0
  %v2_1606c40 = and i32 %v1_16074.ph, 65280
  %v3_1606c41 = icmp eq i32 %v2_1606c40, 0
  %or.cond42 = or i1 %v2_1606839, %v3_1606c41
  %v2_1607043 = and i32 %v1_16074.ph, 16711680
  %v3_1607044 = icmp eq i32 %v2_1607043, 0
  %or.cond3145 = or i1 %v3_1607044, %or.cond42
  %v4_1607446 = icmp ult i32 %v1_16074.ph, 16777216
  %or.cond3247 = or i1 %v4_1607446, %or.cond3145
  br i1 %or.cond3247, label %dec_label_pc_16084, label %.thread4

.thread4:                                         ; preds = %.preheader.preheader, %.thread4
  %v1_160781349 = phi i32 [ %v2_1607814, %.thread4 ], [ %v1_1604c, %.preheader.preheader ]
  %v1_1607c48.in = phi i32 [ %v1_1607c48, %.thread4 ], [ %v1_16040, %.preheader.preheader ]
  %v1_1607c48 = add i32 %v1_1607c48.in, 4
  %v2_1607814 = add i32 %v1_160781349, 4
  %v2_1607c = inttoptr i32 %v1_1607c48 to i32*
  %v3_1607c = load i32, i32* %v2_1607c, align 4
  %v1_16068 = urem i32 %v3_1607c, 256
  %v2_16068 = icmp eq i32 %v1_16068, 0
  %v2_1606c = and i32 %v3_1607c, 65280
  %v3_1606c = icmp eq i32 %v2_1606c, 0
  %or.cond = or i1 %v2_16068, %v3_1606c
  %v2_16070 = and i32 %v3_1607c, 16711680
  %v3_16070 = icmp eq i32 %v2_16070, 0
  %or.cond31 = or i1 %v3_16070, %or.cond
  %v4_16074 = icmp ult i32 %v3_1607c, 16777216
  %or.cond32 = or i1 %v4_16074, %or.cond31
  br i1 %or.cond32, label %dec_label_pc_16084, label %.thread4

dec_label_pc_16084:                               ; preds = %.thread4, %.preheader.preheader
  %v1_1607813.lcssa = phi i32 [ %v1_1604c, %.preheader.preheader ], [ %v2_1607814, %.thread4 ]
  %v2_16068.lcssa = phi i1 [ %v2_1606839, %.preheader.preheader ], [ %v2_16068, %.thread4 ]
  %v3_1606c.lcssa = phi i1 [ %v3_1606c41, %.preheader.preheader ], [ %v3_1606c, %.thread4 ]
  %v3_16070.lcssa = phi i1 [ %v3_1607044, %.preheader.preheader ], [ %v3_16070, %.thread4 ]
  br i1 %v2_16068.lcssa, label %.thread10, label %bb35

bb35:                                             ; preds = %dec_label_pc_16084
  %v2_16088 = add i32 %v1_1607813.lcssa, 1
  br i1 %v3_1606c.lcssa, label %.thread10, label %bb36

bb36:                                             ; preds = %bb35
  %v2_1609017 = add i32 %v1_1607813.lcssa, 2
  br i1 %v3_16070.lcssa, label %.thread10, label %bb37

bb37:                                             ; preds = %bb36
  %v2_16098 = add i32 %v1_1607813.lcssa, 3
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_16084, %bb35, %bb36, %bb37
  %v1_1609c = phi i32 [ %v2_16088, %bb35 ], [ %v2_1609017, %bb36 ], [ %v2_16098, %bb37 ], [ %v1_1607813.lcssa, %dec_label_pc_16084 ]
  ret i32 %v1_1609c

; uselistorder directives
  uselistorder i32 %v1_1607813.lcssa, { 1, 3, 2, 0 }
  uselistorder i32 %v3_1607c, { 3, 2, 1, 0 }
  uselistorder i32 %v1_16074.ph, { 1, 2, 3, 0 }
  uselistorder i32 %v1_16048, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 16711680, { 2, 0, 5, 1, 4, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 6 }
  uselistorder i32 -2, { 1, 3, 4, 2, 6, 7, 8, 0, 5, 9, 25, 24, 26, 27, 28, 17, 18, 19, 20, 21, 22, 23, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder i32 65535, { 2, 105, 0, 1, 10, 11, 3, 4, 24, 23, 27, 53, 26, 54, 12, 13, 5, 28, 55, 29, 56, 57, 14, 58, 25, 30, 59, 31, 60, 32, 61, 62, 63, 33, 64, 65, 15, 66, 6, 37, 67, 36, 68, 34, 69, 35, 70, 71, 16, 72, 7, 73, 74, 41, 75, 40, 76, 38, 77, 39, 78, 18, 17, 79, 80, 42, 81, 43, 82, 20, 19, 83, 84, 44, 85, 45, 86, 87, 88, 46, 89, 90, 91, 92, 21, 93, 94, 8, 47, 95, 48, 96, 49, 97, 98, 99, 22, 100, 101, 9, 52, 102, 50, 103, 51, 104 }
  uselistorder i32 -4, { 41, 18, 62, 63, 64, 6, 19, 20, 21, 65, 66, 67, 7, 22, 23, 24, 68, 69, 70, 8, 25, 26, 71, 17, 16, 72, 73, 74, 15, 14, 13, 12, 27, 28, 29, 30, 31, 5, 32, 3, 33, 4, 75, 11, 34, 49, 50, 51, 9, 52, 53, 54, 35, 48, 2, 36, 42, 43, 44, 45, 46, 47, 0, 1, 55, 56, 57, 58, 59, 60, 61, 37, 38, 39, 40, 10 }
  uselistorder label %.thread10, { 3, 2, 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0, 2 }
  uselistorder label %bb33, { 1, 0 }
}

define i32 @function_160a0(i8* %arg1, i32 %arg2) local_unnamed_addr {
bb:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_160a4.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_160a0

dec_label_pc_160a0:                               ; preds = %bb3, %bb
  %v0_160a4 = phi i32 [ %v0_160a4.pre, %bb ], [ %v5_160a4, %bb3 ]
  %v0_160a0 = phi i32 [ %tmp, %bb ], [ %v5_160a0, %bb3 ]
  %v1_160a0 = inttoptr i32 %v0_160a0 to i8*
  %v2_160a0 = load i8, i8* %v1_160a0, align 1
  %v1_160a4 = inttoptr i32 %v0_160a4 to i8*
  %v2_160a4 = load i8, i8* %v1_160a4, align 1
  %v3_160a4 = zext i8 %v2_160a4 to i32
  %v2_160a8 = icmp eq i8 %v2_160a0, 0
  br i1 %v2_160a8, label %.dec_label_pc_160b4_crit_edge, label %bb3

bb3:                                              ; preds = %dec_label_pc_160a0
  %v5_160a4 = add i32 %v0_160a4, 1
  %v5_160a0 = add i32 %v0_160a0, 1
  %v3_160a0 = zext i8 %v2_160a0 to i32
  %v10_160ac = icmp eq i8 %v2_160a0, %v2_160a4
  br i1 %v10_160ac, label %dec_label_pc_160a0, label %dec_label_pc_160b4

.dec_label_pc_160b4_crit_edge:                    ; preds = %dec_label_pc_160a0
  br label %dec_label_pc_160b4

dec_label_pc_160b4:                               ; preds = %bb3, %.dec_label_pc_160b4_crit_edge
  %.pn = phi i32 [ 0, %.dec_label_pc_160b4_crit_edge ], [ %v3_160a0, %bb3 ]
  %v2_160b4.pre-phi = sub nsw i32 %.pn, %v3_160a4
  ret i32 %v2_160b4.pre-phi

; uselistorder directives
  uselistorder i8 %v2_160a0, { 0, 2, 1 }
  uselistorder i32 %v0_160a0, { 1, 0 }
  uselistorder i32 %v0_160a4, { 1, 0 }
  uselistorder label %dec_label_pc_160b4, { 1, 0 }
}

define i32 @function_160c0() local_unnamed_addr {
dec_label_pc_160c0:
  %stack_var_-16 = alloca i32, align 4
  %v3_160c0 = load i32, i32* @r4, align 4
  store i32 %v3_160c0, i32* %stack_var_-16, align 4
  %v6_160c0 = load i32, i32* @r5, align 4
  %v9_160c0 = load i32, i32* @r6, align 4
  %v0_160c4 = load i32, i32* @r0, align 4
  %v0_160c8 = load i32, i32* @r1, align 4
  store i32 %v0_160c8, i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_160e48 = inttoptr i32 %v0_160c4 to i8*
  %v2_160e49 = load i8, i8* %v1_160e48, align 1
  %v2_160e811 = icmp eq i8 %v2_160e49, 0
  store i32 %v0_160c8, i32* @r0, align 4
  %v1_160f012 = add i32 %v0_160c4, 1
  store i32 %v1_160f012, i32* @r4, align 4
  br i1 %v2_160e811, label %dec_label_pc_160f8, label %dec_label_pc_160d4

dec_label_pc_160d4:                               ; preds = %dec_label_pc_160c0, %dec_label_pc_160e0
  %v3_160e414.in = phi i8 [ %v2_160e4, %dec_label_pc_160e0 ], [ %v2_160e49, %dec_label_pc_160c0 ]
  %v0_160ec13 = phi i32 [ %v0_160ec.pre, %dec_label_pc_160e0 ], [ %v0_160c8, %dec_label_pc_160c0 ]
  %v3_160e414 = zext i8 %v3_160e414.in to i32
  %v2_160d4 = call i32 @function_1628c(i32 %v0_160ec13, i32 %v3_160e414)
  %v2_160d8 = icmp eq i32 %v2_160d4, 0
  %v0_160e0 = load i32, i32* @r5, align 4
  br i1 %v2_160d8, label %dec_label_pc_160e0, label %dec_label_pc_160f8

dec_label_pc_160e0:                               ; preds = %dec_label_pc_160d4
  %v1_160e0 = add i32 %v0_160e0, 1
  %v0_160e4.pre = load i32, i32* @r4, align 4
  %v0_160ec.pre = load i32, i32* @r6, align 4
  store i32 %v1_160e0, i32* @r5, align 4
  %v1_160e4 = inttoptr i32 %v0_160e4.pre to i8*
  %v2_160e4 = load i8, i8* %v1_160e4, align 1
  %v2_160e8 = icmp eq i8 %v2_160e4, 0
  store i32 %v0_160ec.pre, i32* @r0, align 4
  %v1_160f0 = add i32 %v0_160e4.pre, 1
  store i32 %v1_160f0, i32* @r4, align 4
  br i1 %v2_160e8, label %dec_label_pc_160f8, label %dec_label_pc_160d4

dec_label_pc_160f8:                               ; preds = %dec_label_pc_160e0, %dec_label_pc_160d4, %dec_label_pc_160c0
  %v0_160f8 = phi i32 [ 0, %dec_label_pc_160c0 ], [ %v0_160e0, %dec_label_pc_160d4 ], [ %v1_160e0, %dec_label_pc_160e0 ]
  %v2_160fc = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_160fc, i32* @r4, align 4
  store i32 %v6_160c0, i32* @r5, align 4
  store i32 %v9_160c0, i32* @r6, align 4
  ret i32 %v0_160f8

; uselistorder directives
  uselistorder i8 %v2_160e4, { 1, 0 }
  uselistorder i32 %v0_160ec.pre, { 1, 0 }
  uselistorder i32 %v0_160e4.pre, { 1, 0 }
  uselistorder i32* @r6, { 30, 3, 31, 32, 4, 33, 34, 35, 5, 36, 37, 25, 26, 38, 39, 6, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 7, 8, 57, 58, 59, 60, 61, 62, 63, 64, 27, 28, 29, 9, 10, 11, 426, 427, 428, 429, 430, 431, 432, 65, 12, 66, 13, 67, 424, 425, 373, 377, 378, 379, 380, 374, 375, 376, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 381, 406, 407, 408, 382, 383, 384, 385, 386, 14, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 402, 404, 398, 399, 400, 401, 403, 405, 109, 110, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 68, 95, 135, 136, 137, 138, 139, 140, 141, 96, 142, 97, 98, 99, 100, 101, 69, 70, 71, 90, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 0, 92, 93, 94, 102, 103, 104, 105, 106, 107, 108, 143, 144, 2, 1, 145, 146, 147, 148, 149, 150, 151, 21, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 170, 171, 15, 172, 173, 174, 175, 176, 177, 178, 179, 236, 237, 238, 239, 162, 163, 164, 165, 166, 167, 168, 169, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 16, 191, 192, 193, 194, 195, 196, 197, 198, 212, 213, 214, 215, 22, 216, 217, 218, 17, 219, 220, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 23, 18, 276, 277, 279, 280, 278, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 24, 19, 322, 323, 325, 326, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 20, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235 }
  uselistorder label %dec_label_pc_160d4, { 1, 0 }
}

define i32 @function_16104(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_16104:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_161342 = load i32, i32* @r0, align 4
  %v1_161343 = inttoptr i32 %v0_161342 to i8*
  %v2_161344 = load i8, i8* %v1_161343, align 1
  %v3_161345 = zext i8 %v2_161344 to i32
  store i32 %v3_161345, i32* @ip, align 4
  %v2_161386 = icmp eq i8 %v2_161344, 0
  br i1 %v2_161386, label %dec_label_pc_16144, label %dec_label_pc_16118.preheader

dec_label_pc_16110:                               ; preds = %dec_label_pc_16118
  %v3_16118 = zext i8 %v2_16118 to i32
  %v1_16120 = add i32 %v0_16120, 1
  %v9_16110 = icmp eq i32 %v0_1611010, %v3_16118
  br i1 %v9_16110, label %dec_label_pc_1612c, label %dec_label_pc_16118

dec_label_pc_16118:                               ; preds = %dec_label_pc_16118.preheader, %dec_label_pc_16110
  %v0_16120 = phi i32 [ %tmp, %dec_label_pc_16118.preheader ], [ %v1_16120, %dec_label_pc_16110 ]
  %v1_16118 = inttoptr i32 %v0_16120 to i8*
  %v2_16118 = load i8, i8* %v1_16118, align 1
  %v2_1611c = icmp eq i8 %v2_16118, 0
  br i1 %v2_1611c, label %dec_label_pc_16144, label %dec_label_pc_16110

dec_label_pc_1612c:                               ; preds = %dec_label_pc_16110
  %v1_1612c = add i32 %v0_1612c, 1
  %v1_16130 = add i32 %v0_16130, 1
  %v1_16134 = inttoptr i32 %v1_16130 to i8*
  %v2_16134 = load i8, i8* %v1_16134, align 1
  %v3_16134 = zext i8 %v2_16134 to i32
  store i32 %v3_16134, i32* @ip, align 4
  %v2_16138 = icmp eq i8 %v2_16134, 0
  br i1 %v2_16138, label %dec_label_pc_16144, label %dec_label_pc_16118.preheader

dec_label_pc_16118.preheader:                     ; preds = %dec_label_pc_16104, %dec_label_pc_1612c
  %v0_16130 = phi i32 [ %v1_16130, %dec_label_pc_1612c ], [ %v0_161342, %dec_label_pc_16104 ]
  %v0_1612c = phi i32 [ %v1_1612c, %dec_label_pc_1612c ], [ 0, %dec_label_pc_16104 ]
  %v0_1611010 = phi i32 [ %v3_16134, %dec_label_pc_1612c ], [ %v3_161345, %dec_label_pc_16104 ]
  br label %dec_label_pc_16118

dec_label_pc_16144:                               ; preds = %dec_label_pc_1612c, %dec_label_pc_16118, %dec_label_pc_16104
  %v0_16144 = phi i32 [ 0, %dec_label_pc_16104 ], [ %v0_1612c, %dec_label_pc_16118 ], [ %v1_1612c, %dec_label_pc_1612c ]
  ret i32 %v0_16144

; uselistorder directives
  uselistorder i32 %v0_16120, { 1, 0 }
  uselistorder label %dec_label_pc_16118.preheader, { 1, 0 }
}

define i32 @function_16150(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_16150:
  store i32 %arg1, i32* @r0, align 4
  %v1_16154 = urem i32 %arg2, 256
  store i32 %v1_16154, i32* @r4, align 4
  %v2_16154 = icmp eq i32 %v1_16154, 0
  br i1 %v2_16154, label %dec_label_pc_16168, label %dec_label_pc_1617c.preheader

dec_label_pc_1617c.preheader:                     ; preds = %dec_label_pc_16150
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r0, align 4
  %v2_161843 = call i32 @function_1628c(i32 %arg1, i32 %v1_16154)
  %v2_161885 = icmp eq i32 %v2_161843, 0
  br i1 %v2_161885, label %dec_label_pc_16190, label %dec_label_pc_16174

dec_label_pc_16168:                               ; preds = %dec_label_pc_16150
  %v2_1616c = call i32 @function_1628c(i32 %arg1, i32 0)
  br label %dec_label_pc_16194

dec_label_pc_16174:                               ; preds = %dec_label_pc_1617c.preheader, %dec_label_pc_16174
  %v2_161846 = phi i32 [ %v2_16184, %dec_label_pc_16174 ], [ %v2_161843, %dec_label_pc_1617c.preheader ]
  store i32 %v2_161846, i32* @r5, align 4
  %v1_16178 = add i32 %v2_161846, 1
  store i32 %v1_16178, i32* @r0, align 4
  %v0_16180 = load i32, i32* @r4, align 4
  %v2_16184 = call i32 @function_1628c(i32 %v1_16178, i32 %v0_16180)
  %v2_16188 = icmp eq i32 %v2_16184, 0
  br i1 %v2_16188, label %dec_label_pc_16190, label %dec_label_pc_16174

dec_label_pc_16190:                               ; preds = %dec_label_pc_16174, %dec_label_pc_1617c.preheader
  %v0_16190 = load i32, i32* @r5, align 4
  br label %dec_label_pc_16194

dec_label_pc_16194:                               ; preds = %dec_label_pc_16168, %dec_label_pc_16190
  %storemerge = phi i32 [ %v2_1616c, %dec_label_pc_16168 ], [ %v0_16190, %dec_label_pc_16190 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_16184, { 1, 0 }
  uselistorder i32 %v1_16178, { 1, 0 }
  uselistorder i32 %v1_16154, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_1628c, { 2, 1, 0, 5, 4, 3 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_16194, { 1, 0 }
  uselistorder label %dec_label_pc_16174, { 1, 0 }
}

define i32 @function_161a0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_161a0:
  %v1_161a4 = urem i32 %arg1, 256
  %v0_161c42 = load i32, i32* @r0, align 4
  %v1_161c43 = urem i32 %v0_161c42, 4
  %v2_161c44 = icmp eq i32 %v1_161c43, 0
  br i1 %v2_161c44, label %dec_label_pc_161cc, label %dec_label_pc_161ac

dec_label_pc_161ac:                               ; preds = %dec_label_pc_161a0, %dec_label_pc_161c0
  %v0_161c0 = phi i32 [ %v1_161c0, %dec_label_pc_161c0 ], [ %v0_161c42, %dec_label_pc_161a0 ]
  %v1_161ac = inttoptr i32 %v0_161c0 to i8*
  %v2_161ac = load i8, i8* %v1_161ac, align 1
  %v3_161ac = zext i8 %v2_161ac to i32
  %v9_161b0 = icmp eq i32 %v3_161ac, %v1_161a4
  br i1 %v9_161b0, label %dec_label_pc_1627c, label %dec_label_pc_161b8

dec_label_pc_161b8:                               ; preds = %dec_label_pc_161ac
  %v2_161b8 = icmp eq i8 %v2_161ac, 0
  br i1 %v2_161b8, label %dec_label_pc_1627c, label %dec_label_pc_161c0

dec_label_pc_161c0:                               ; preds = %dec_label_pc_161b8
  %v1_161c0 = add i32 %v0_161c0, 1
  %v1_161c4 = urem i32 %v1_161c0, 4
  %v2_161c4 = icmp eq i32 %v1_161c4, 0
  br i1 %v2_161c4, label %dec_label_pc_161cc, label %dec_label_pc_161ac

dec_label_pc_161cc:                               ; preds = %dec_label_pc_161c0, %dec_label_pc_161a0
  %v0_161d0 = phi i32 [ %v0_161c42, %dec_label_pc_161a0 ], [ %v1_161c0, %dec_label_pc_161c0 ]
  %v4_161cc = mul nuw nsw i32 %v1_161a4, 256
  %v5_161cc = or i32 %v4_161cc, %v1_161a4
  %v4_161d4 = mul i32 %v5_161cc, 65536
  %v5_161d4 = or i32 %v4_161d4, %v5_161cc
  br label %dec_label_pc_161d8

dec_label_pc_161d8:                               ; preds = %dec_label_pc_16274, %dec_label_pc_16214, %dec_label_pc_161cc
  %v0_1623c = phi i32 [ %v0_161d0, %dec_label_pc_161cc ], [ %v4_161d8, %dec_label_pc_16214 ], [ %v4_161d8, %dec_label_pc_16274 ]
  %v1_161d8 = inttoptr i32 %v0_1623c to i32*
  %v2_161d8 = load i32, i32* %v1_161d8, align 4
  %v4_161d8 = add i32 %v0_1623c, 4
  %v2_161e0 = xor i32 %v2_161d8, %v5_161d4
  %v2_161e4 = add i32 %v2_161e0, 2130640639
  store i32 %v2_161e4, i32* @ip, align 4
  %v2_161ec = add i32 %v2_161d8, 2130640639
  %v1_161f0 = sub i32 -1, %v2_161d8
  %v2_161f4 = xor i32 %v2_161ec, %v1_161f0
  %v2_16200 = and i32 %v2_161f4, -2130640640
  %v2_16208 = icmp eq i32 %v2_16200, 0
  br i1 %v2_16208, label %dec_label_pc_16214, label %dec_label_pc_1621c

dec_label_pc_16214:                               ; preds = %dec_label_pc_161d8
  %v1_161fc = sub i32 -1, %v2_161e0
  %v2_16204 = xor i32 %v2_161e4, %v1_161fc
  %v2_1620c = and i32 %v2_16204, -2130640640
  %v2_16214 = icmp eq i32 %v2_1620c, 0
  br i1 %v2_16214, label %dec_label_pc_161d8, label %dec_label_pc_1621c

dec_label_pc_1621c:                               ; preds = %dec_label_pc_161d8, %dec_label_pc_16214
  %v2_1621c = inttoptr i32 %v0_1623c to i8*
  %v3_1621c = load i8, i8* %v2_1621c, align 1
  %v4_1621c = zext i8 %v3_1621c to i32
  %v9_16220 = icmp eq i32 %v4_1621c, %v1_161a4
  br i1 %v9_16220, label %dec_label_pc_1627c, label %dec_label_pc_1622c

dec_label_pc_1622c:                               ; preds = %dec_label_pc_1621c
  %v2_1622c = icmp eq i8 %v3_1621c, 0
  br i1 %v2_1622c, label %dec_label_pc_1627c, label %dec_label_pc_16234

dec_label_pc_16234:                               ; preds = %dec_label_pc_1622c
  %v1_16234 = add i32 %v0_1623c, 1
  %v2_16234 = inttoptr i32 %v1_16234 to i8*
  %v3_16234 = load i8, i8* %v2_16234, align 1
  %v4_16234 = zext i8 %v3_16234 to i32
  %v9_16238 = icmp eq i32 %v4_16234, %v1_161a4
  br i1 %v9_16238, label %dec_label_pc_1627c, label %dec_label_pc_16244

dec_label_pc_16244:                               ; preds = %dec_label_pc_16234
  %v2_16244 = icmp eq i8 %v3_16234, 0
  br i1 %v2_16244, label %dec_label_pc_1627c, label %dec_label_pc_1624c

dec_label_pc_1624c:                               ; preds = %dec_label_pc_16244
  %v1_1624c = add i32 %v0_1623c, 2
  %v2_1624c = inttoptr i32 %v1_1624c to i8*
  %v3_1624c = load i8, i8* %v2_1624c, align 1
  %v4_1624c = zext i8 %v3_1624c to i32
  %v9_16250 = icmp eq i32 %v4_1624c, %v1_161a4
  br i1 %v9_16250, label %dec_label_pc_1627c, label %dec_label_pc_1625c

dec_label_pc_1625c:                               ; preds = %dec_label_pc_1624c
  %v2_1625c = icmp eq i8 %v3_1624c, 0
  br i1 %v2_1625c, label %dec_label_pc_1627c, label %dec_label_pc_16264

dec_label_pc_16264:                               ; preds = %dec_label_pc_1625c
  %v1_16264 = add i32 %v0_1623c, 3
  %v2_16264 = inttoptr i32 %v1_16264 to i8*
  %v3_16264 = load i8, i8* %v2_16264, align 1
  %v4_16264 = zext i8 %v3_16264 to i32
  %v9_16268 = icmp eq i32 %v4_16264, %v1_161a4
  br i1 %v9_16268, label %dec_label_pc_1627c, label %dec_label_pc_16274

dec_label_pc_16274:                               ; preds = %dec_label_pc_16264
  %v2_16274 = icmp eq i8 %v3_16264, 0
  br i1 %v2_16274, label %dec_label_pc_1627c, label %dec_label_pc_161d8

dec_label_pc_1627c:                               ; preds = %dec_label_pc_161b8, %dec_label_pc_161ac, %dec_label_pc_16274, %dec_label_pc_16264, %dec_label_pc_1625c, %dec_label_pc_1624c, %dec_label_pc_16244, %dec_label_pc_16234, %dec_label_pc_1622c, %dec_label_pc_1621c
  %v1_16280 = phi i32 [ %v1_16264, %dec_label_pc_16274 ], [ %v1_16264, %dec_label_pc_16264 ], [ %v1_1624c, %dec_label_pc_1625c ], [ %v1_1624c, %dec_label_pc_1624c ], [ %v1_16234, %dec_label_pc_16244 ], [ %v1_16234, %dec_label_pc_16234 ], [ %v0_1623c, %dec_label_pc_1622c ], [ %v0_1623c, %dec_label_pc_1621c ], [ %v0_161c0, %dec_label_pc_161ac ], [ %v0_161c0, %dec_label_pc_161b8 ]
  ret i32 %v1_16280

; uselistorder directives
  uselistorder i32 %v4_161d8, { 1, 0 }
  uselistorder i32 %v2_161d8, { 0, 2, 1 }
  uselistorder i32 %v0_1623c, { 0, 1, 2, 3, 4, 5, 7, 6 }
  uselistorder i32 %v5_161cc, { 1, 0 }
  uselistorder i32 %v1_161c0, { 1, 0, 2 }
  uselistorder i32 %v0_161c42, { 2, 1, 0 }
  uselistorder i32 %v1_161a4, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_1627c, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 1 }
  uselistorder label %dec_label_pc_1621c, { 1, 0 }
  uselistorder label %dec_label_pc_161ac, { 1, 0 }
}

define i32 @function_1628c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1628c:
  %v1_16290 = urem i32 %arg1, 256
  %v0_162b03 = load i32, i32* @r0, align 4
  %v1_162b04 = urem i32 %v0_162b03, 4
  %v2_162b05 = icmp eq i32 %v1_162b04, 0
  br i1 %v2_162b05, label %dec_label_pc_162b8, label %dec_label_pc_16298

dec_label_pc_16298:                               ; preds = %dec_label_pc_1628c, %dec_label_pc_162ac
  %v0_162ac = phi i32 [ %v1_162ac, %dec_label_pc_162ac ], [ %v0_162b03, %dec_label_pc_1628c ]
  %v1_16298 = inttoptr i32 %v0_162ac to i8*
  %v2_16298 = load i8, i8* %v1_16298, align 1
  %v3_16298 = zext i8 %v2_16298 to i32
  %v9_1629c = icmp eq i32 %v3_16298, %v1_16290
  br i1 %v9_1629c, label %dec_label_pc_1636c, label %dec_label_pc_162a4

dec_label_pc_162a4:                               ; preds = %dec_label_pc_16298
  %v2_162a4 = icmp eq i8 %v2_16298, 0
  br i1 %v2_162a4, label %dec_label_pc_16368, label %dec_label_pc_162ac

dec_label_pc_162ac:                               ; preds = %dec_label_pc_162a4
  %v1_162ac = add i32 %v0_162ac, 1
  %v1_162b0 = urem i32 %v1_162ac, 4
  %v2_162b0 = icmp eq i32 %v1_162b0, 0
  br i1 %v2_162b0, label %dec_label_pc_162b8, label %dec_label_pc_16298

dec_label_pc_162b8:                               ; preds = %dec_label_pc_162ac, %dec_label_pc_1628c
  %v0_162bc = phi i32 [ %v0_162b03, %dec_label_pc_1628c ], [ %v1_162ac, %dec_label_pc_162ac ]
  %v4_162b8 = mul nuw nsw i32 %v1_16290, 256
  %v5_162b8 = or i32 %v4_162b8, %v1_16290
  %v4_162c0 = mul i32 %v5_162b8, 65536
  %v5_162c0 = or i32 %v4_162c0, %v5_162b8
  br label %dec_label_pc_162c4

dec_label_pc_162c4:                               ; preds = %dec_label_pc_16360, %dec_label_pc_16300, %dec_label_pc_162b8
  %v0_16328 = phi i32 [ %v0_162bc, %dec_label_pc_162b8 ], [ %v4_162c4, %dec_label_pc_16300 ], [ %v4_162c4, %dec_label_pc_16360 ]
  %v1_162c4 = inttoptr i32 %v0_16328 to i32*
  %v2_162c4 = load i32, i32* %v1_162c4, align 4
  %v4_162c4 = add i32 %v0_16328, 4
  %v2_162cc = xor i32 %v2_162c4, %v5_162c0
  %v2_162d0 = add i32 %v2_162cc, 2130640639
  store i32 %v2_162d0, i32* @ip, align 4
  %v2_162d8 = add i32 %v2_162c4, 2130640639
  %v1_162dc = sub i32 -1, %v2_162c4
  %v2_162e0 = xor i32 %v2_162d8, %v1_162dc
  %v2_162ec = and i32 %v2_162e0, -2130640640
  %v2_162f4 = icmp eq i32 %v2_162ec, 0
  br i1 %v2_162f4, label %dec_label_pc_16300, label %dec_label_pc_16308

dec_label_pc_16300:                               ; preds = %dec_label_pc_162c4
  %v1_162e8 = sub i32 -1, %v2_162cc
  %v2_162f0 = xor i32 %v2_162d0, %v1_162e8
  %v2_162f8 = and i32 %v2_162f0, -2130640640
  %v2_16300 = icmp eq i32 %v2_162f8, 0
  br i1 %v2_16300, label %dec_label_pc_162c4, label %dec_label_pc_16308

dec_label_pc_16308:                               ; preds = %dec_label_pc_162c4, %dec_label_pc_16300
  %v2_16308 = inttoptr i32 %v0_16328 to i8*
  %v3_16308 = load i8, i8* %v2_16308, align 1
  %v4_16308 = zext i8 %v3_16308 to i32
  %v9_1630c = icmp eq i32 %v4_16308, %v1_16290
  br i1 %v9_1630c, label %dec_label_pc_1636c, label %dec_label_pc_16318

dec_label_pc_16318:                               ; preds = %dec_label_pc_16308
  %v2_16318 = icmp eq i8 %v3_16308, 0
  br i1 %v2_16318, label %dec_label_pc_16368, label %dec_label_pc_16320

dec_label_pc_16320:                               ; preds = %dec_label_pc_16318
  %v1_16320 = add i32 %v0_16328, 1
  %v2_16320 = inttoptr i32 %v1_16320 to i8*
  %v3_16320 = load i8, i8* %v2_16320, align 1
  %v4_16320 = zext i8 %v3_16320 to i32
  %v9_16324 = icmp eq i32 %v4_16320, %v1_16290
  br i1 %v9_16324, label %dec_label_pc_1636c, label %dec_label_pc_16330

dec_label_pc_16330:                               ; preds = %dec_label_pc_16320
  %v2_16330 = icmp eq i8 %v3_16320, 0
  br i1 %v2_16330, label %dec_label_pc_16368, label %dec_label_pc_16338

dec_label_pc_16338:                               ; preds = %dec_label_pc_16330
  %v1_16338 = add i32 %v0_16328, 2
  %v2_16338 = inttoptr i32 %v1_16338 to i8*
  %v3_16338 = load i8, i8* %v2_16338, align 1
  %v4_16338 = zext i8 %v3_16338 to i32
  %v9_1633c = icmp eq i32 %v4_16338, %v1_16290
  br i1 %v9_1633c, label %dec_label_pc_1636c, label %dec_label_pc_16348

dec_label_pc_16348:                               ; preds = %dec_label_pc_16338
  %v2_16348 = icmp eq i8 %v3_16338, 0
  br i1 %v2_16348, label %dec_label_pc_16368, label %dec_label_pc_16350

dec_label_pc_16350:                               ; preds = %dec_label_pc_16348
  %v1_16350 = add i32 %v0_16328, 3
  %v2_16350 = inttoptr i32 %v1_16350 to i8*
  %v3_16350 = load i8, i8* %v2_16350, align 1
  %v4_16350 = zext i8 %v3_16350 to i32
  %v9_16354 = icmp eq i32 %v4_16350, %v1_16290
  br i1 %v9_16354, label %dec_label_pc_1636c, label %dec_label_pc_16360

dec_label_pc_16360:                               ; preds = %dec_label_pc_16350
  %v2_16360 = icmp eq i8 %v3_16350, 0
  br i1 %v2_16360, label %dec_label_pc_16368, label %dec_label_pc_162c4

dec_label_pc_16368:                               ; preds = %dec_label_pc_162a4, %dec_label_pc_16360, %dec_label_pc_16348, %dec_label_pc_16330, %dec_label_pc_16318
  br label %dec_label_pc_1636c

dec_label_pc_1636c:                               ; preds = %dec_label_pc_16298, %dec_label_pc_16350, %dec_label_pc_16338, %dec_label_pc_16320, %dec_label_pc_16308, %dec_label_pc_16368
  %v1_16370 = phi i32 [ 0, %dec_label_pc_16368 ], [ %v1_16350, %dec_label_pc_16350 ], [ %v1_16338, %dec_label_pc_16338 ], [ %v1_16320, %dec_label_pc_16320 ], [ %v0_16328, %dec_label_pc_16308 ], [ %v0_162ac, %dec_label_pc_16298 ]
  ret i32 %v1_16370

; uselistorder directives
  uselistorder i32 %v4_162c4, { 1, 0 }
  uselistorder i32 %v2_162c4, { 0, 2, 1 }
  uselistorder i32 %v0_16328, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_162b8, { 1, 0 }
  uselistorder i32 %v1_162ac, { 1, 0, 2 }
  uselistorder i32 %v0_162b03, { 2, 1, 0 }
  uselistorder i32 %v1_16290, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32 3, { 3, 4, 1, 5, 66, 67, 117, 68, 69, 70, 71, 72, 73, 75, 76, 118, 7, 111, 29, 112, 28, 113, 42, 114, 74, 43, 82, 46, 31, 77, 78, 2, 79, 80, 81, 44, 47, 48, 8, 83, 30, 84, 49, 85, 45, 86, 50, 87, 51, 88, 32, 52, 53, 0, 89, 90, 54, 10, 9, 55, 92, 33, 93, 12, 11, 56, 34, 94, 14, 13, 57, 95, 35, 96, 97, 16, 15, 58, 98, 36, 99, 18, 17, 59, 100, 37, 101, 61, 102, 20, 19, 60, 103, 38, 104, 63, 105, 22, 21, 62, 106, 39, 107, 24, 23, 64, 108, 40, 109, 26, 25, 65, 115, 41, 116, 27, 110, 6, 91 }
  uselistorder i32 2130640639, { 0, 2, 1, 3 }
  uselistorder i32 65536, { 4, 5, 7, 6, 12, 8, 13, 9, 14, 10, 15, 11, 16, 17, 18, 22, 19, 23, 20, 24, 21, 25, 148, 149, 147, 153, 26, 27, 28, 29, 30, 31, 32, 33, 146, 34, 35, 36, 38, 37, 40, 39, 41, 42, 2, 43, 0, 3, 44, 45, 47, 46, 1, 50, 48, 49, 51, 56, 52, 57, 53, 58, 54, 55, 59, 60, 61, 62, 64, 65, 63, 145, 67, 66, 70, 71, 72, 68, 69, 75, 73, 76, 74, 77, 78, 79, 80, 81, 83, 84, 82, 85, 150, 87, 86, 90, 91, 92, 88, 89, 93, 94, 96, 97, 98, 95, 99, 151, 100, 102, 101, 104, 103, 105, 152, 106, 108, 107, 110, 109, 112, 113, 111, 114, 115, 122, 116, 123, 117, 124, 118, 125, 119, 126, 120, 121, 128, 127, 129, 130, 131, 132, 137, 133, 138, 134, 139, 135, 136, 141, 140, 142, 143, 144 }
  uselistorder label %dec_label_pc_1636c, { 5, 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_16368, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_16308, { 1, 0 }
  uselistorder label %dec_label_pc_16298, { 1, 0 }
}

define i32 @function_1637c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1637c:
  %stack_var_-68 = alloca i32, align 4
  %v2_16384 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_16384, i32* @r1, align 4
  %v0_16388 = call i32 @function_163a0()
  %v1_1638c = sub i32 1, %v0_16388
  %v2_1638c = icmp ult i32 %v0_16388, 2
  br i1 %v2_1638c, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_1637c
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_1637c, %bb
  %v1_1639c = phi i32 [ %v1_1638c, %dec_label_pc_1637c ], [ 0, %bb ]
  ret i32 %v1_1639c

; uselistorder directives
  uselistorder i32 %v0_16388, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @function_163a0() local_unnamed_addr {
dec_label_pc_163a0:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %stack_var_-35 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v3_163a0 = load i32, i32* @r4, align 4
  %v6_163a0 = load i32, i32* @r5, align 4
  %v2_163a8 = ptrtoint i32* %stack_var_-52 to i32
  %v0_163ac = load i32, i32* @r1, align 4
  store i32 %v0_163ac, i32* @r4, align 4
  store i32 21505, i32* %r1.global-to-local, align 4
  %v0_163b8 = load i32, i32* @r0, align 4
  %v3_163b8 = call i32 @function_11554(i32 %v0_163b8, i32 21505, i32 %v2_163a8)
  store i32 %v3_163b8, i32* %r0.global-to-local, align 4
  store i32 %v3_163b8, i32* @r5, align 4
  %v2_163bc = icmp eq i32 %v3_163b8, 0
  br i1 %v2_163bc, label %dec_label_pc_163c4, label %dec_label_pc_16408

dec_label_pc_163c4:                               ; preds = %dec_label_pc_163a0
  %v4_163d0 = zext i8 %tmp to i32
  store i32 %v4_163d0, i32* @ip, align 4
  %v3_163d4 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_163d4, i32* @r3, align 4
  %v1_163d8 = load i32, i32* @r4, align 4
  %v2_163d8 = add i32 %v1_163d8, 4
  %v3_163d8 = inttoptr i32 %v2_163d8 to i32*
  %v0_163dc = load i32, i32* %r1.global-to-local, align 4
  %v1_163dc = load i32, i32* @r4, align 4
  %v2_163dc = add i32 %v1_163dc, 8
  %v3_163dc = inttoptr i32 %v2_163dc to i32*
  store i32 %v0_163dc, i32* %v3_163dc, align 4
  %v0_163e0 = load i32, i32* %r0.global-to-local, align 4
  %v1_163e0 = load i32, i32* @r4, align 4
  %v2_163e0 = add i32 %v1_163e0, 12
  %v3_163e0 = inttoptr i32 %v2_163e0 to i32*
  store i32 %v0_163e0, i32* %v3_163e0, align 4
  %v2_163e4 = ptrtoint i32* %stack_var_-35 to i32
  store i32 %v2_163e4, i32* @r1, align 4
  %v1_163ec = load i32, i32* @r4, align 4
  %v2_163ec = inttoptr i32 %v1_163ec to i32*
  store i32 %v3_163d4, i32* %v2_163ec, align 4
  %v0_163f0 = load i32, i32* @ip, align 4
  %v1_163f0 = trunc i32 %v0_163f0 to i8
  %v2_163f0 = load i32, i32* @r4, align 4
  %v3_163f0 = add i32 %v2_163f0, 16
  %v4_163f0 = inttoptr i32 %v3_163f0 to i8*
  store i8 %v1_163f0, i8* %v4_163f0, align 1
  %v0_163f4 = load i32, i32* @r4, align 4
  %v1_163f4 = add i32 %v0_163f4, 17
  store i32 %v1_163f4, i32* %r0.global-to-local, align 4
  %v4_163f8 = call i32 @function_168e4(i32 %v1_163f4, i32 %v2_163e4, i32 19, i32 %v3_163d4)
  store i32 %v4_163f8, i32* %r0.global-to-local, align 4
  %v0_163fc = load i32, i32* @r5, align 4
  store i32 %v0_163fc, i32* %r1.global-to-local, align 4
  store i32 13, i32* @r2, align 4
  %v2_16404 = inttoptr i32 %v4_163f8 to i8*
  %v3_16404 = call i32 @function_11a60(i8* %v2_16404, i32 %v0_163fc)
  store i32 %v3_16404, i32* %r0.global-to-local, align 4
  %v0_16408.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_16408

dec_label_pc_16408:                               ; preds = %dec_label_pc_163a0, %dec_label_pc_163c4
  %v0_16408 = phi i32 [ %v3_163b8, %dec_label_pc_163a0 ], [ %v0_16408.pre, %dec_label_pc_163c4 ]
  store i32 %v0_16408, i32* %r0.global-to-local, align 4
  store i32 %v3_163a0, i32* @r4, align 4
  store i32 %v6_163a0, i32* @r5, align 4
  ret i32 %v0_16408

; uselistorder directives
  uselistorder i32 %v0_16408, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 (i8*, i32)* @function_11a60, { 2, 3, 8, 4, 0, 1, 11, 9, 10, 5, 6, 7 }
  uselistorder i32 13, { 9, 8, 0, 1, 11, 12, 10, 13, 14, 2, 3, 15, 16, 17, 18, 19, 20, 21, 6, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 7, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 4, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 5, 52, 53 }
  uselistorder i32 17, { 16, 1, 4, 17, 18, 5, 19, 20, 21, 6, 7, 8, 9, 10, 11, 22, 12, 23, 13, 24, 25, 14, 26, 15, 2, 27, 3, 28, 29, 30, 0 }
  uselistorder i32 (i32, i32, i32)* @function_11554, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16408, { 1, 0 }
}

define i32 @function_1641c() local_unnamed_addr {
dec_label_pc_1641c:
  %r0.global-to-local = alloca i32, align 4
  %v0_16424 = load i32, i32* @r0, align 4
  %v2_16424 = icmp eq i32 %v0_16424, 0
  %v0_1642c = load i32, i32* @r1, align 4
  br i1 %v2_16424, label %dec_label_pc_16500, label %dec_label_pc_16434

dec_label_pc_16434:                               ; preds = %dec_label_pc_1641c
  br label %dec_label_pc_1644c

dec_label_pc_1644c:                               ; preds = %dec_label_pc_16434, %dec_label_pc_164c4
  %v1_164c4 = phi i32 [ 0, %dec_label_pc_16434 ], [ %v5_164c4, %dec_label_pc_164c4 ]
  %v0_164c8 = phi i32 [ 1, %dec_label_pc_16434 ], [ %v1_164c8, %dec_label_pc_164c4 ]
  %v0_1644c = phi i32 [ %v0_16424, %dec_label_pc_16434 ], [ %v0_1644c12, %dec_label_pc_164c4 ]
  %v1_1644c = inttoptr i32 %v0_1644c to i8*
  %v2_1644c = load i8, i8* %v1_1644c, align 1
  %v3_1644c = zext i8 %v2_1644c to i32
  %v4_16450 = load i32, i32* inttoptr (i32 add (i32 ptrtoint ([3 x i8]* @global_var_8be0.577 to i32), i32 91408) to i32*), align 4
  %v2_16454 = mul nuw nsw i32 %v3_1644c, 2
  %v2_16458 = add i32 %v2_16454, %v4_16450
  %v3_16458 = inttoptr i32 %v2_16458 to i16*
  %v4_16458 = load i16, i16* %v3_16458, align 2
  %v1_1645c = and i16 %v4_16458, 8
  %v2_1645c = icmp eq i16 %v1_1645c, 0
  br i1 %v2_1645c, label %dec_label_pc_16500, label %dec_label_pc_16464

dec_label_pc_16464:                               ; preds = %dec_label_pc_1644c
  br label %dec_label_pc_16484

dec_label_pc_1646c:                               ; preds = %dec_label_pc_16484
  %v2_1646c = mul i32 %v0_164c4, 10
  %v1_16470 = add i32 %v2_1646c, -48
  %v2_16474 = add i32 %v3_16484, %v1_16470
  %v8_1647c = icmp sgt i32 %v2_16474, 255
  br i1 %v8_1647c, label %dec_label_pc_16500, label %dec_label_pc_16480

dec_label_pc_16480:                               ; preds = %dec_label_pc_1646c
  %v1_16480 = add i32 %v0_164b4, 1
  store i32 %v1_16480, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_16484

dec_label_pc_16484:                               ; preds = %dec_label_pc_16464, %dec_label_pc_16480
  %v0_164c4 = phi i32 [ 0, %dec_label_pc_16464 ], [ %v2_16474, %dec_label_pc_16480 ]
  %v0_164b4 = phi i32 [ %v0_1644c, %dec_label_pc_16464 ], [ %v1_16480, %dec_label_pc_16480 ]
  %v1_16484 = inttoptr i32 %v0_164b4 to i8*
  %v2_16484 = load i8, i8* %v1_16484, align 1
  %v3_16484 = zext i8 %v2_16484 to i32
  %v2_16488 = mul nuw nsw i32 %v3_16484, 2
  %v2_1648c = add i32 %v2_16488, %v4_16450
  %v3_1648c = inttoptr i32 %v2_1648c to i16*
  %v4_1648c = load i16, i16* %v3_1648c, align 2
  %v6_1648c = zext i16 %v4_1648c to i32
  %v1_16490 = and i32 %v6_1648c, 8
  %v2_16490 = icmp eq i32 %v1_16490, 0
  br i1 %v2_16490, label %dec_label_pc_16498, label %dec_label_pc_1646c

dec_label_pc_16498:                               ; preds = %dec_label_pc_16484
  %v7_16498 = icmp eq i32 %v0_164c8, 4
  br i1 %v7_16498, label %dec_label_pc_164b0, label %dec_label_pc_164a0

dec_label_pc_164a0:                               ; preds = %dec_label_pc_16498
  %v7_164a0 = icmp eq i8 %v2_16484, 46
  br i1 %v7_164a0, label %dec_label_pc_164a8, label %dec_label_pc_16500

dec_label_pc_164a8:                               ; preds = %dec_label_pc_164a0
  %v1_164a8 = add i32 %v0_164b4, 1
  store i32 %v1_164a8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_164c4

dec_label_pc_164b0:                               ; preds = %dec_label_pc_16498
  %v2_164b0 = icmp eq i8 %v2_16484, 0
  %v1_164b4 = add i32 %v0_164b4, 1
  store i32 %v1_164b4, i32* %r0.global-to-local, align 4
  br i1 %v2_164b0, label %dec_label_pc_164c4, label %dec_label_pc_164bc

dec_label_pc_164bc:                               ; preds = %dec_label_pc_164b0
  %v1_164bc = and i32 %v6_1648c, 32
  %v2_164bc = icmp eq i32 %v1_164bc, 0
  br i1 %v2_164bc, label %dec_label_pc_16500, label %dec_label_pc_164c4

dec_label_pc_164c4:                               ; preds = %dec_label_pc_164bc, %dec_label_pc_164b0, %dec_label_pc_164a8
  %v0_1644c12 = phi i32 [ %v1_164b4, %dec_label_pc_164bc ], [ %v1_164b4, %dec_label_pc_164b0 ], [ %v1_164a8, %dec_label_pc_164a8 ]
  %v4_164c4 = mul i32 %v1_164c4, 256
  %v5_164c4 = or i32 %v0_164c4, %v4_164c4
  %v1_164c8 = add nuw nsw i32 %v0_164c8, 1
  %v7_164d0 = icmp slt i32 %v1_164c8, 5
  br i1 %v7_164d0, label %dec_label_pc_1644c, label %dec_label_pc_164d4

dec_label_pc_164d4:                               ; preds = %dec_label_pc_164c4
  %v2_164d4 = icmp eq i32 %v0_1642c, 0
  br i1 %v2_164d4, label %.thread7.thread, label %bb

.thread7.thread:                                  ; preds = %dec_label_pc_164d4
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_16504

bb:                                               ; preds = %dec_label_pc_164d4
  %v4_164d8 = udiv i32 %v5_164c4, 16777216
  %v2_164dc = udiv i32 %v5_164c4, 256
  %v5_164e0 = and i32 %v2_164dc, 65280
  %v2_164e4 = and i32 %v5_164c4, 65280
  %v5_164e8 = mul nuw nsw i32 %v2_164e4, 256
  %v5_164ec = mul i32 %v0_164c4, 16777216
  %v6_164e0 = or i32 %v4_164d8, %v5_164ec
  %v6_164e8 = or i32 %v6_164e0, %v5_164e0
  %v6_164ec = or i32 %v6_164e8, %v5_164e8
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_164f8 = inttoptr i32 %v0_1642c to i32*
  store i32 %v6_164ec, i32* %v3_164f8, align 4
  %v1_16508.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_16504

dec_label_pc_16500:                               ; preds = %dec_label_pc_164a0, %dec_label_pc_164bc, %dec_label_pc_1644c, %dec_label_pc_1646c, %dec_label_pc_1641c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_16504

dec_label_pc_16504:                               ; preds = %.thread7.thread, %bb, %dec_label_pc_16500
  %v1_16508 = phi i32 [ %v1_16508.pre, %bb ], [ 0, %dec_label_pc_16500 ], [ 1, %.thread7.thread ]
  ret i32 %v1_16508

; uselistorder directives
  uselistorder i32 %v1_164c8, { 1, 0 }
  uselistorder i32 %v5_164c4, { 2, 0, 1, 3 }
  uselistorder i32 %v0_164b4, { 0, 1, 3, 2 }
  uselistorder i32* %r0.global-to-local, { 3, 0, 1, 2, 4, 5, 6 }
  uselistorder i32 65280, { 59, 2, 7, 1, 8, 3, 0, 9, 10, 11, 12, 13, 52, 53, 14, 15, 16, 54, 55, 17, 18, 19, 20, 21, 56, 4, 57, 58, 22, 23, 5, 24, 60, 61, 42, 25, 26, 27, 28, 29, 45, 46, 43, 44, 62, 63, 64, 49, 50, 47, 48, 65, 66, 67, 68, 6, 69, 30, 31, 70, 32, 33, 34, 35, 71, 36, 37, 72, 38, 39, 40, 41, 51 }
  uselistorder i32 16777216, { 0, 1, 75, 74, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 26, 27, 28, 30, 29, 32, 31, 34, 33, 35, 36, 39, 37, 40, 38, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 54, 52, 55, 53, 56, 57, 59, 58, 60, 61, 63, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76 }
  uselistorder i32 5, { 14, 0, 50, 15, 27, 16, 28, 17, 26, 3, 2, 29, 30, 1, 31, 32, 33, 18, 19, 20, 21, 22, 34, 23, 38, 5, 39, 6, 40, 7, 41, 24, 8, 42, 9, 43, 44, 10, 45, 46, 11, 47, 12, 48, 13, 51, 4, 49, 35, 25, 36, 37 }
  uselistorder i32 32, { 103, 48, 46, 90, 91, 92, 93, 98, 99, 86, 87, 88, 89, 96, 97, 49, 50, 54, 51, 55, 52, 56, 53, 57, 58, 104, 105, 59, 106, 67, 68, 66, 69, 70, 71, 72, 73, 74, 61, 62, 2, 63, 3, 64, 5, 4, 60, 65, 75, 107, 7, 6, 9, 8, 11, 10, 47, 76, 100, 77, 13, 12, 81, 78, 79, 80, 15, 14, 17, 16, 19, 18, 85, 21, 20, 23, 22, 24, 26, 25, 28, 27, 29, 30, 32, 31, 94, 95, 33, 101, 34, 102, 35, 36, 37, 38, 82, 39, 40, 41, 83, 42, 0, 43, 1, 44, 45, 84 }
  uselistorder i8 0, { 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 29, 28, 19, 30, 4, 17, 5, 31, 33, 32, 20, 34, 35, 21, 36, 37, 0, 18, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 1, 53, 55, 52, 22, 54, 23, 56, 57, 51, 2, 58, 59, 60, 25, 61, 64, 26, 62, 63, 24, 65, 66, 67, 68, 69, 3, 70, 27, 71, 72, 73, 74, 75, 76, 77 }
  uselistorder i8 46, { 0, 1, 3, 2 }
  uselistorder i32 255, { 4, 7, 5, 0, 1, 2, 6, 3 }
  uselistorder i32 10, { 4, 26, 27, 28, 7, 41, 43, 42, 0, 38, 39, 67, 44, 1, 9, 31, 32, 30, 10, 29, 11, 12, 13, 23, 5, 33, 24, 14, 3, 25, 34, 15, 35, 36, 37, 16, 17, 18, 40, 8, 45, 46, 2, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 19, 58, 59, 60, 20, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 6, 66, 21, 73, 22 }
  uselistorder i16 0, { 0, 1, 2, 3, 8, 9, 4, 5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 6, 21, 7, 22, 23 }
  uselistorder i32 2, {}
  uselistorder label %dec_label_pc_16504, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16500, { 1, 0, 3, 2, 4 }
  uselistorder label %dec_label_pc_16484, { 1, 0 }
  uselistorder label %dec_label_pc_1644c, { 1, 0 }
}

define i32 @function_16514(i32 %arg1) local_unnamed_addr {
dec_label_pc_16514:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 126992, i32* %r2.global-to-local, align 4
  %v4_16520 = load i32, i32* inttoptr (i32 127092 to i32*), align 4
  %v4_16528 = load i32, i32* inttoptr (i32 127056 to i32*), align 16
  store i32 %v4_16528, i32* %r1.global-to-local, align 4
  %v1_1652c = add i32 %arg1, 44
  %v2_1652c = inttoptr i32 %v1_1652c to i32*
  %v3_1652c = load i32, i32* %v2_1652c, align 4
  %v1_16530 = add i32 %arg1, 28
  %v2_16530 = inttoptr i32 %v1_16530 to i32*
  %v3_16530 = load i32, i32* %v2_16530, align 4
  store i32 %v3_16530, i32* %r2.global-to-local, align 4
  %v2_16534 = inttoptr i32 %v4_16520 to i32*
  store i32 %v3_1652c, i32* %v2_16534, align 4
  %v0_16538 = load i32, i32* %r2.global-to-local, align 4
  %v1_16538 = load i32, i32* %r1.global-to-local, align 4
  %v2_16538 = inttoptr i32 %v1_16538 to i32*
  store i32 %v0_16538, i32* %v2_16538, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 39, 0, 1, 3, 4, 5, 2, 6, 7, 8, 12, 9, 13, 11, 23, 24, 25, 26, 27, 28, 20, 21, 22, 18, 19, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 10, 14, 15, 16, 17 }
  uselistorder i32 126992, { 44, 0, 45, 46, 1, 2, 47, 3, 4, 5, 48, 49, 6, 7, 50, 51, 52, 53, 54, 8, 11, 12, 10, 9, 13, 14, 39, 35, 33, 32, 34, 36, 37, 38, 31, 40, 26, 28, 27, 25, 24, 29, 30, 21, 20, 23, 22, 19, 18, 17, 16, 41, 42, 43, 55, 56, 57, 15 }
  uselistorder i32 %arg1, { 0, 2, 1 }
}

define i32 @function_16544(i32 %arg1) local_unnamed_addr {
dec_label_pc_16544:
  %v0_16544 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_16544, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_16544
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_16544, %bb
  %v4_16548 = phi i32 [ %arg1, %dec_label_pc_16544 ], [ 0, %bb ]
  ret i32 %v4_16548

; uselistorder directives
  uselistorder i1* @cpsr_z, { 6, 7, 8, 9, 10, 11, 12, 13, 14, 33, 15, 16, 17, 29, 30, 31, 32, 18, 19, 20, 21, 22, 23, 24, 1, 25, 0, 2, 26, 27, 3, 28, 4, 5 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_1654c(i32 %arg1) local_unnamed_addr {
dec_label_pc_16588:
  store i32 %arg1, i32* @global_var_212d4.498, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32* @global_var_212d4.498, { 1, 0, 2 }
}

define i32 @function_16598(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_16598:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_16598 = load i32, i32* @r7, align 4
  store i32 %v3_16598, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_165c0, label %dec_label_pc_165b0

dec_label_pc_165b0:                               ; preds = %dec_label_pc_16598
  %v0_165b0 = call i32 @function_11a08()
  %v0_165b4 = load i32, i32* %r7.global-to-local, align 4
  %v1_165b4 = sub i32 0, %v0_165b4
  %v2_165b8 = inttoptr i32 %v0_165b0 to i32*
  store i32 %v1_165b4, i32* %v2_165b8, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_165c4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_165c0

dec_label_pc_165c0:                               ; preds = %dec_label_pc_16598, %dec_label_pc_165b0
  %v2_165c4 = phi i32 [ %v3_16598, %dec_label_pc_16598 ], [ %v2_165c4.pre, %dec_label_pc_165b0 ]
  %v0_165c0 = phi i32 [ %arg1, %dec_label_pc_16598 ], [ -1, %dec_label_pc_165b0 ]
  store i32 %v2_165c4, i32* %r7.global-to-local, align 4
  ret i32 %v0_165c0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_165c0, { 1, 0 }
}

define i32 @function_165cc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_165cc:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_165d0 = load i32, i32* @r4, align 4
  %v6_165d0 = load i32, i32* @r5, align 4
  %v12_165d0 = load i32, i32* @r7, align 4
  %v1_165d4 = add i32 %arg3, 14
  %v2_165dc = ptrtoint i32* %stack_var_-72 to i32
  %v1_165e0 = and i32 %v1_165d4, -8
  %v2_165e4 = sub i32 %v2_165dc, %v1_165e0
  %v1_165e8 = add i32 %v2_165e4, 8
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v1_165e8, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp25 = icmp ult i32 %arg1, -4095
  br i1 %tmp25, label %dec_label_pc_16624, label %dec_label_pc_16610

dec_label_pc_16610:                               ; preds = %dec_label_pc_165cc
  %v0_16610 = call i32 @function_11a08()
  %v0_16614 = load i32, i32* %r4.global-to-local, align 4
  %v1_16614 = sub i32 0, %v0_16614
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1661c = inttoptr i32 %v0_16610 to i32*
  store i32 %v1_16614, i32* %v2_1661c, align 4
  %v0_1662c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1662c

dec_label_pc_16624:                               ; preds = %dec_label_pc_165cc
  br i1 false, label %dec_label_pc_1662c, label %dec_label_pc_16634

dec_label_pc_1662c:                               ; preds = %dec_label_pc_16624, %dec_label_pc_16610
  %v0_1662c = phi i32 [ -1, %dec_label_pc_16624 ], [ %v0_1662c.pre, %dec_label_pc_16610 ]
  store i32 %v0_1662c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16700

dec_label_pc_16634:                               ; preds = %dec_label_pc_16624
  %v2_16634 = add i32 %v1_165e8, %arg1
  %v2_16638 = add i32 %tmp, %arg3
  store i32 %v2_16638, i32* @ip, align 4
  store i32 %v1_165e8, i32* @r7, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_166e8

dec_label_pc_16654:                               ; preds = %dec_label_pc_166e8
  %v1_16654 = add i32 %v0_166a8, 16
  %v2_16654 = inttoptr i32 %v1_16654 to i16*
  %v3_16654 = load i16, i16* %v2_16654, align 2
  %v4_16654 = zext i16 %v3_16654 to i32
  %v1_16658 = add nuw nsw i32 %v4_16654, 7
  %v1_1665c = and i32 %v1_16658, 131064
  store i32 %v1_1665c, i32* %r2.global-to-local, align 4
  %v2_16664 = add i32 %v1_1665c, %v0_166b0
  store i32 %v2_16664, i32* %r8.global-to-local, align 4
  %tmp26 = icmp ugt i32 %v2_16664, %v2_16638
  br i1 %tmp26, label %dec_label_pc_16670, label %dec_label_pc_166a4

dec_label_pc_16670:                               ; preds = %dec_label_pc_16654
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_16678 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_16678, i32* %r2.global-to-local, align 4
  %v0_1667c = load i32, i32* %sl.global-to-local, align 4
  %v1_16680 = load i32, i32* @sp, align 4
  %v2_16680 = inttoptr i32 %v1_16680 to i32*
  store i32 0, i32* %v2_16680, align 4
  %v4_16684 = call i32 @function_16908(i32 %arg1, i32 0, i32 %v0_16678, i32 %v0_1667c)
  %v0_16688 = load i32, i32* @r5, align 4
  %v1_16688 = load i32, i32* %r6.global-to-local, align 4
  %v9_16688 = icmp eq i32 %v0_16688, %v1_16688
  br i1 %v9_16688, label %dec_label_pc_16690, label %dec_label_pc_166fc

dec_label_pc_16690:                               ; preds = %dec_label_pc_16670
  %v0_16690 = call i32 @function_11a08()
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_1669c = inttoptr i32 %v0_16690 to i32*
  store i32 22, i32* %v2_1669c, align 4
  %v0_16700.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16700

dec_label_pc_166a4:                               ; preds = %dec_label_pc_16654
  %v1_166a4 = inttoptr i32 %v0_166a8 to i32*
  %v2_166a4 = load i32, i32* %v1_166a4, align 4
  %v3_166a4 = add i32 %v0_166a8, 4
  %v4_166a4 = inttoptr i32 %v3_166a4 to i32*
  %v5_166a4 = load i32, i32* %v4_166a4, align 4
  store i32 %v5_166a4, i32* %r4.global-to-local, align 4
  %v1_166a8 = add i32 %v0_166a8, 8
  store i32 %v1_166a8, i32* %sb.global-to-local, align 4
  %v1_166ac = inttoptr i32 %v1_166a8 to i32*
  %v2_166ac = load i32, i32* %v1_166ac, align 4
  store i32 %v2_166ac, i32* %sb.global-to-local, align 4
  %v3_166ac = add i32 %v0_166a8, 12
  %v4_166ac = inttoptr i32 %v3_166ac to i32*
  %v5_166ac = load i32, i32* %v4_166ac, align 4
  store i32 %v5_166ac, i32* %sl.global-to-local, align 4
  %v1_166b0 = inttoptr i32 %v0_166b0 to i32*
  store i32 %v2_166a4, i32* %v1_166b0, align 4
  %v3_166b0 = add i32 %v0_166b0, 4
  %v4_166b0 = inttoptr i32 %v3_166b0 to i32*
  %v5_166b0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_166b0, i32* %v4_166b0, align 4
  %v0_166b4 = load i32, i32* @r7, align 4
  %v1_166b4 = add i32 %v0_166b4, 8
  %v1_166b8 = inttoptr i32 %v1_166b4 to i32*
  %v2_166b8 = load i32, i32* %v1_166b8, align 4
  %v3_166b8 = add i32 %v0_166b4, 12
  %v4_166b8 = inttoptr i32 %v3_166b8 to i32*
  %v5_166b8 = load i32, i32* %v4_166b8, align 4
  store i32 %v5_166b8, i32* @r4, align 4
  %v1_166bc = load i32, i32* @r5, align 4
  %v2_166bc = add i32 %v1_166bc, 8
  %v3_166bc = inttoptr i32 %v2_166bc to i32*
  store i32 %v2_166b8, i32* %v3_166bc, align 4
  %v0_166c0 = load i32, i32* @r4, align 4
  %v1_166c0 = load i32, i32* @r5, align 4
  %v2_166c0 = add i32 %v1_166c0, 12
  %v3_166c0 = inttoptr i32 %v2_166c0 to i32*
  store i32 %v0_166c0, i32* %v3_166c0, align 4
  %v0_166c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_166c4 = trunc i32 %v0_166c4 to i16
  %v2_166c4 = load i32, i32* @r5, align 4
  %v3_166c4 = add i32 %v2_166c4, 16
  %v4_166c4 = inttoptr i32 %v3_166c4 to i16*
  store i16 %v1_166c4, i16* %v4_166c4, align 2
  %v0_166c8 = load i32, i32* @r7, align 4
  %v1_166c8 = add i32 %v0_166c8, 18
  %v2_166c8 = inttoptr i32 %v1_166c8 to i8*
  %v3_166c8 = load i8, i8* %v2_166c8, align 1
  %v4_166c8 = zext i8 %v3_166c8 to i32
  store i32 %v4_166c8, i32* @r3, align 4
  %v2_166cc = load i32, i32* @r5, align 4
  %v3_166cc = add i32 %v2_166cc, 18
  %v4_166cc = inttoptr i32 %v3_166cc to i8*
  store i8 %v3_166c8, i8* %v4_166cc, align 1
  %v0_166d0 = load i32, i32* @r7, align 4
  %v1_166d0 = add i32 %v0_166d0, 16
  %v2_166d0 = inttoptr i32 %v1_166d0 to i16*
  %v3_166d0 = load i16, i16* %v2_166d0, align 2
  %v4_166d0 = zext i16 %v3_166d0 to i32
  %v1_166d4 = add nsw i32 %v4_166d0, -19
  store i32 %v1_166d4, i32* @r2, align 4
  %v0_166d8 = call i32 @function_11b10()
  %v0_166dc = load i32, i32* @r7, align 4
  %v1_166dc = add i32 %v0_166dc, 16
  %v2_166dc = inttoptr i32 %v1_166dc to i16*
  %v3_166dc = load i16, i16* %v2_166dc, align 2
  %v4_166dc = zext i16 %v3_166dc to i32
  %v0_166e0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_166e0, i32* @r5, align 4
  %v2_166e4 = add i32 %v4_166dc, %v0_166dc
  store i32 %v2_166e4, i32* @r7, align 4
  br label %dec_label_pc_166e8

dec_label_pc_166e8:                               ; preds = %dec_label_pc_16634, %dec_label_pc_166a4
  %v0_166b0 = phi i32 [ %tmp, %dec_label_pc_16634 ], [ %v0_166e0, %dec_label_pc_166a4 ]
  %v0_166a8 = phi i32 [ %v1_165e8, %dec_label_pc_16634 ], [ %v2_166e4, %dec_label_pc_166a4 ]
  %v3_166ec = icmp ult i32 %v0_166a8, %v2_16634
  %v1_166f0 = add i32 %v0_166b0, 19
  store i32 %v1_166f0, i32* @r0, align 4
  %v1_166f4 = add i32 %v0_166a8, 19
  store i32 %v1_166f4, i32* @r1, align 4
  br i1 %v3_166ec, label %dec_label_pc_16654, label %dec_label_pc_166fc.loopexit

dec_label_pc_166fc.loopexit:                      ; preds = %dec_label_pc_166e8
  %v0_166fc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_166fc

dec_label_pc_166fc:                               ; preds = %dec_label_pc_166fc.loopexit, %dec_label_pc_16670
  %v1_166fc = phi i32 [ %v0_166b0, %dec_label_pc_166fc.loopexit ], [ %v0_16688, %dec_label_pc_16670 ]
  %v0_166fc = phi i32 [ %v0_166fc.pre, %dec_label_pc_166fc.loopexit ], [ %v1_16688, %dec_label_pc_16670 ]
  %v2_166fc = sub i32 %v1_166fc, %v0_166fc
  store i32 %v2_166fc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16700

dec_label_pc_16700:                               ; preds = %dec_label_pc_16690, %dec_label_pc_1662c, %dec_label_pc_166fc
  %v0_16700 = phi i32 [ %v0_16700.pre, %dec_label_pc_16690 ], [ %v0_1662c, %dec_label_pc_1662c ], [ %v2_166fc, %dec_label_pc_166fc ]
  store i32 %v3_165d0, i32* %r4.global-to-local, align 4
  store i32 %v6_165d0, i32* @r5, align 4
  store i32 %v12_165d0, i32* @r7, align 4
  ret i32 %v0_16700

; uselistorder directives
  uselistorder i32 %v0_166a8, { 5, 6, 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_166b0, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v1_165e8, { 1, 2, 0, 3 }
  uselistorder i32 %tmp, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 3, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 19, { 7, 8, 0, 3, 9, 10, 11, 4, 5, 6, 1, 12, 2, 13 }
  uselistorder i32* @r3, { 7, 8, 52, 53, 85, 86, 2, 87, 88, 89, 3, 90, 91, 92, 4, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 0, 111, 112, 113, 114, 9, 6, 10, 11, 12, 13, 14, 54, 55, 115, 124, 125, 126, 119, 47, 48, 78, 79, 80, 81, 82, 76, 77, 15, 16, 17, 130, 127, 128, 129, 1, 131, 132, 133, 120, 18, 83, 37, 38, 39, 121, 122, 123, 70, 56, 116, 117, 118, 49, 50, 51, 57, 58, 5, 59, 60, 61, 62, 32, 33, 34, 35, 19, 25, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 36, 40, 41, 43, 42, 45, 84, 44, 46, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75 }
  uselistorder i32 18, { 5, 6, 4, 7, 0, 8, 1, 9, 2, 10, 3, 11 }
  uselistorder i32 22, { 1, 0, 12, 2, 3, 4, 5, 6, 7, 13, 14, 8, 9, 10, 11 }
  uselistorder i32* @sp, { 2, 3, 0, 4, 1 }
  uselistorder i32 7, { 24, 22, 23, 14, 0, 1, 39, 15, 26, 16, 17, 18, 19, 25, 2, 20, 27, 28, 21, 29, 4, 30, 5, 31, 6, 7, 32, 8, 33, 9, 34, 10, 35, 11, 12, 36, 13, 38, 3, 37 }
  uselistorder i32* @ip, { 7, 8, 9, 64, 10, 11, 6, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 2, 98, 99, 100, 101, 102, 103, 104, 105, 106, 12, 0, 13, 14, 15, 16, 17, 107, 108, 38, 57, 3, 51, 52, 53, 54, 55, 56, 58, 59, 60, 112, 109, 110, 111, 1, 113, 31, 18, 19, 61, 62, 63, 45, 46, 47, 48, 49, 50, 39, 40, 41, 42, 43, 44, 4, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 20, 32, 33, 34, 35, 36, 37, 5 }
  uselistorder i1 false, { 0, 23, 24, 25, 37, 20, 22, 38, 39, 40, 41, 42, 2, 1, 26, 29, 28, 27, 30, 4, 6, 5, 18, 36, 35, 21, 17, 32, 10, 33, 19, 9, 8, 7, 11, 12, 13, 3, 14, 15, 16, 34, 31, 43 }
  uselistorder i32 -8, { 37, 17, 18, 19, 20, 21, 22, 16, 15, 9, 14, 13, 12, 11, 23, 24, 25, 26, 27, 39, 28, 29, 30, 31, 32, 38, 40, 33, 41, 36, 10, 34, 35, 8, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 14, { 10, 14, 26, 6, 7, 8, 0, 11, 12, 9, 3, 13, 4, 15, 16, 5, 17, 18, 19, 20, 1, 21, 22, 23, 24, 2, 25 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_16700, { 2, 0, 1 }
  uselistorder label %dec_label_pc_166e8, { 1, 0 }
}

define i32 @function_16710(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_16710:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_16710 = load i32, i32* @r4, align 4
  store i32 %v3_16710, i32* %stack_var_-12, align 4
  %v0_16714 = load i32, i32* %r0.global-to-local, align 4
  %v1_16714 = inttoptr i32 %v0_16714 to i16*
  %v2_16714 = load i16, i16* %v1_16714, align 2
  %v3_16714 = zext i16 %v2_16714 to i32
  %v1_16718 = and i32 %v3_16714, 4
  store i32 %v1_16718, i32* %r5.global-to-local, align 4
  %v2_16718 = icmp eq i32 %v1_16718, 0
  store i32 %v0_16714, i32* %r4.global-to-local, align 4
  br i1 %v2_16718, label %dec_label_pc_1672c, label %bb

bb:                                               ; preds = %dec_label_pc_16710
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread7

dec_label_pc_1672c:                               ; preds = %dec_label_pc_16710
  %v1_1672c = icmp slt i32 %arg2, 0
  br i1 %v1_1672c, label %bb18, label %bb19

bb18:                                             ; preds = %dec_label_pc_1672c
  br label %bb19

bb19:                                             ; preds = %dec_label_pc_1672c, %bb18
  %v1_16734 = add i32 %v0_16714, 4
  %v2_16734 = inttoptr i32 %v1_16734 to i32*
  %v3_16734 = load i32, i32* %v2_16734, align 4
  store i32 %v3_16734, i32* %r0.global-to-local, align 4
  %v1_16738 = call i32 @function_11378(i32 %v3_16734)
  store i32 %v1_16738, i32* %r0.global-to-local, align 4
  %v5_16740 = icmp sgt i32 %v1_16738, 0
  br i1 %v5_16740, label %.thread7, label %dec_label_pc_16744

dec_label_pc_16744:                               ; preds = %bb19
  %v2_1673c = icmp eq i32 %v1_16738, 0
  %v0_16744 = load i32, i32* %r4.global-to-local, align 4
  %v1_16744 = inttoptr i32 %v0_16744 to i16*
  %v2_16744 = load i16, i16* %v1_16744, align 2
  br i1 %v2_1673c, label %bb20, label %bb21

bb20:                                             ; preds = %dec_label_pc_16744
  %v2_16748 = or i16 %v2_16744, 4
  store i16 %v2_16748, i16* %v1_16744, align 2
  %v1_16764.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread7

bb21:                                             ; preds = %dec_label_pc_16744
  %v2_1674c = or i16 %v2_16744, 8
  store i16 %v2_1674c, i16* %v1_16744, align 2
  %v1_16758 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_16758, i32* %r0.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %bb20, %bb, %bb19, %bb21
  %v1_16764 = phi i32 [ %v1_16764.pre, %bb20 ], [ 0, %bb ], [ %v1_16738, %bb19 ], [ %v1_16758, %bb21 ]
  %v2_16760 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16760, i32* @r4, align 4
  ret i32 %v1_16764

; uselistorder directives
  uselistorder i16 %v2_16744, { 1, 0 }
  uselistorder i32 %v1_16738, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 2, 5, 6, 3, 4, 0, 1 }
  uselistorder i32 (i32)* @function_11378, { 4, 2, 3, 0, 1 }
  uselistorder label %.thread7, { 3, 0, 2, 1 }
  uselistorder label %bb19, { 1, 0 }
}

define i32 @function_16768(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_16768:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_16768 = load i32, i32* @r4, align 4
  store i32 %v3_16768, i32* %stack_var_-24, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* %r5.global-to-local, align 4
  store i32 2147483647, i32* %r8.global-to-local, align 4
  %v2_167802 = icmp eq i32 %arg3, 0
  store i1 %v2_167802, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_167802, label %dec_label_pc_16810, label %dec_label_pc_16788

dec_label_pc_16780thread-pre-split:               ; preds = %dec_label_pc_16788
  %v3_167a0 = load i32, i32* %r6.global-to-local, align 4
  %v5_167a0 = add i32 %v3_167a0, %v3_16798
  store i32 %v5_167a0, i32* %r6.global-to-local, align 4
  %v4_167a4 = load i32, i32* %r5.global-to-local, align 4
  %v5_167a4 = sub i32 %v4_167a4, %v3_16798
  store i32 %v5_167a4, i32* %r5.global-to-local, align 4
  %v2_16780 = icmp eq i32 %v5_167a4, 0
  store i1 %v2_16780, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16780, label %dec_label_pc_16780.dec_label_pc_16810.loopexit_crit_edge, label %dec_label_pc_16780thread-pre-split.dec_label_pc_16788_crit_edge

dec_label_pc_16780thread-pre-split.dec_label_pc_16788_crit_edge: ; preds = %dec_label_pc_16780thread-pre-split
  %v3_16788.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_16794.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_16788

dec_label_pc_16788:                               ; preds = %dec_label_pc_16768, %dec_label_pc_16780thread-pre-split.dec_label_pc_16788_crit_edge
  %v0_16794 = phi i32 [ %v0_16794.pre, %dec_label_pc_16780thread-pre-split.dec_label_pc_16788_crit_edge ], [ %tmp, %dec_label_pc_16768 ]
  %v0_16790 = phi i32 [ %v5_167a0, %dec_label_pc_16780thread-pre-split.dec_label_pc_16788_crit_edge ], [ %arg2, %dec_label_pc_16768 ]
  %v3_16788 = phi i32 [ %v3_16788.pre, %dec_label_pc_16780thread-pre-split.dec_label_pc_16788_crit_edge ], [ 2147483647, %dec_label_pc_16768 ]
  %v0_1678c.in = phi i32 [ %v5_167a4, %dec_label_pc_16780thread-pre-split.dec_label_pc_16788_crit_edge ], [ %arg3, %dec_label_pc_16768 ]
  %v3_1678c = phi i32 [ %v5_167a4, %dec_label_pc_16780thread-pre-split.dec_label_pc_16788_crit_edge ], [ %arg3, %dec_label_pc_16768 ]
  %v0_1678c = icmp slt i32 %v0_1678c.in, 0
  %storemerge = select i1 %v0_1678c, i32 %v3_16788, i32 %v3_1678c
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 %v0_16790, i32* %r1.global-to-local, align 4
  %v1_16794 = add i32 %v0_16794, 4
  %v2_16794 = inttoptr i32 %v1_16794 to i32*
  %v3_16794 = load i32, i32* %v2_16794, align 4
  %v3_16798 = call i32 @function_114ec(i32 %v3_16794, i32 %v0_16790)
  %v1_1679c = icmp slt i32 %v3_16798, 0
  %v2_1679c = icmp eq i32 %v3_16798, 0
  store i1 %v2_1679c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_1679c, label %dec_label_pc_167ac, label %dec_label_pc_16780thread-pre-split

dec_label_pc_167ac:                               ; preds = %dec_label_pc_16788
  %v0_167ac = load i32, i32* %r4.global-to-local, align 4
  %v1_167ac = inttoptr i32 %v0_167ac to i16*
  %v2_167ac = load i16, i16* %v1_167ac, align 2
  %v3_167ac = zext i16 %v2_167ac to i32
  store i32 %v3_167ac, i32* %r3.global-to-local, align 4
  %v1_167b0 = add i32 %v0_167ac, 8
  store i32 %v1_167b0, i32* %r1.global-to-local, align 4
  %v1_167b4 = inttoptr i32 %v1_167b0 to i32*
  %v2_167b4 = load i32, i32* %v1_167b4, align 4
  store i32 %v2_167b4, i32* %r1.global-to-local, align 4
  %v3_167b4 = add i32 %v0_167ac, 12
  %v4_167b4 = inttoptr i32 %v3_167b4 to i32*
  %v5_167b4 = load i32, i32* %v4_167b4, align 4
  %v1_167b8 = or i32 %v3_167ac, 8
  store i32 %v1_167b8, i32* %r3.global-to-local, align 4
  %v2_167bc = sub i32 %v5_167b4, %v2_167b4
  store i32 %v2_167bc, i32* %r2.global-to-local, align 4
  %v9_167bc = icmp eq i32 %v5_167b4, %v2_167b4
  store i1 %v9_167bc, i1* %cpsr_z.global-to-local, align 1
  %v1_167c0 = trunc i32 %v1_167b8 to i16
  store i16 %v1_167c0, i16* %v1_167ac, align 2
  br i1 %v9_167bc, label %dec_label_pc_167ac.dec_label_pc_1680c_crit_edge, label %dec_label_pc_167c8

dec_label_pc_167ac.dec_label_pc_1680c_crit_edge:  ; preds = %dec_label_pc_167ac
  %v0_1680c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1680c

dec_label_pc_167c8:                               ; preds = %dec_label_pc_167ac
  %v0_167c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_167c8 = load i32, i32* %r5.global-to-local, align 4
  %v3_167c8 = icmp ult i32 %v0_167c8, %v1_167c8
  %v9_167c8 = icmp eq i32 %v0_167c8, %v1_167c8
  store i1 %v9_167c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_167c8, label %.preheader, label %bb23

bb23:                                             ; preds = %dec_label_pc_167c8
  store i32 %v1_167c8, i32* %r2.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_167c8, %bb23
  %v2_167dc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb24

bb24:                                             ; preds = %.preheader, %dec_label_pc_167f0
  %v2_167dc = phi i32 [ %v2_167dc.pre, %.preheader ], [ %v1_167f4, %dec_label_pc_167f0 ]
  %v0_167d0 = load i32, i32* %r6.global-to-local, align 4
  %v1_167d0 = inttoptr i32 %v0_167d0 to i8*
  %v2_167d0 = load i8, i8* %v1_167d0, align 1
  %v3_167d0 = zext i8 %v2_167d0 to i32
  store i32 %v3_167d0, i32* %r3.global-to-local, align 4
  %v7_167d4 = icmp eq i8 %v2_167d0, 10
  store i1 %v7_167d4, i1* %cpsr_z.global-to-local, align 1
  %v1_167d8 = add i32 %v0_167d0, 1
  store i32 %v1_167d8, i32* %r6.global-to-local, align 4
  %v3_167dc = inttoptr i32 %v2_167dc to i8*
  store i8 %v2_167d0, i8* %v3_167dc, align 1
  %v0_167e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_167e0, label %dec_label_pc_167e4, label %dec_label_pc_167f0

dec_label_pc_167e4:                               ; preds = %bb24
  %v0_167e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_167e4 = inttoptr i32 %v0_167e4 to i16*
  %v2_167e4 = load i16, i16* %v1_167e4, align 2
  %v3_167e4 = zext i16 %v2_167e4 to i32
  store i32 %v3_167e4, i32* %r3.global-to-local, align 4
  %v1_167e8 = and i32 %v3_167e4, 256
  %v2_167e8 = icmp eq i32 %v1_167e8, 0
  store i1 %v2_167e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_167e8, label %dec_label_pc_167f0, label %dec_label_pc_167e4.dec_label_pc_167fc_crit_edge

dec_label_pc_167e4.dec_label_pc_167fc_crit_edge:  ; preds = %dec_label_pc_167e4
  %v0_16800.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_167fc

dec_label_pc_167f0:                               ; preds = %dec_label_pc_167e4, %bb24
  %v0_167f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_167f0 = add i32 %v0_167f0, -1
  store i32 %v1_167f0, i32* %r2.global-to-local, align 4
  %v7_167f0 = icmp eq i32 %v0_167f0, 1
  store i1 %v7_167f0, i1* %cpsr_z.global-to-local, align 1
  %v0_167f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_167f4 = add i32 %v0_167f4, 1
  store i32 %v1_167f4, i32* %r1.global-to-local, align 4
  br i1 %v7_167f0, label %dec_label_pc_167f0.dec_label_pc_167fc_crit_edge, label %bb24

dec_label_pc_167f0.dec_label_pc_167fc_crit_edge:  ; preds = %dec_label_pc_167f0
  %v0_167fc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_167fc

dec_label_pc_167fc:                               ; preds = %dec_label_pc_167e4.dec_label_pc_167fc_crit_edge, %dec_label_pc_167f0.dec_label_pc_167fc_crit_edge
  %v0_16800 = phi i32 [ %v1_167f4, %dec_label_pc_167f0.dec_label_pc_167fc_crit_edge ], [ %v0_16800.pre, %dec_label_pc_167e4.dec_label_pc_167fc_crit_edge ]
  %v0_167fc = phi i32 [ %v0_167fc.pre, %dec_label_pc_167f0.dec_label_pc_167fc_crit_edge ], [ %v0_167e4, %dec_label_pc_167e4.dec_label_pc_167fc_crit_edge ]
  %v1_167fc = add i32 %v0_167fc, 8
  %v2_167fc = inttoptr i32 %v1_167fc to i32*
  %v3_167fc = load i32, i32* %v2_167fc, align 4
  store i32 %v3_167fc, i32* %r3.global-to-local, align 4
  %v2_16800 = add i32 %v0_167fc, 16
  %v3_16800 = inttoptr i32 %v2_16800 to i32*
  store i32 %v0_16800, i32* %v3_16800, align 4
  %v0_16804 = load i32, i32* %r3.global-to-local, align 4
  %v1_16804 = load i32, i32* %r1.global-to-local, align 4
  %v2_16804 = sub i32 %v1_16804, %v0_16804
  store i32 %v2_16804, i32* %r3.global-to-local, align 4
  %v1_16808 = load i32, i32* %r5.global-to-local, align 4
  %v2_16808 = sub i32 %v1_16808, %v2_16804
  store i32 %v2_16808, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1680c

dec_label_pc_1680c:                               ; preds = %dec_label_pc_167ac.dec_label_pc_1680c_crit_edge, %dec_label_pc_167fc
  %v0_1680c = phi i32 [ %v0_1680c.pre, %dec_label_pc_167ac.dec_label_pc_1680c_crit_edge ], [ %v2_16808, %dec_label_pc_167fc ]
  %v1_1680c = load i32, i32* @r7, align 4
  %v2_1680c = sub i32 %v1_1680c, %v0_1680c
  br label %dec_label_pc_16810

dec_label_pc_16780.dec_label_pc_16810.loopexit_crit_edge: ; preds = %dec_label_pc_16780thread-pre-split
  %v0_16810.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_16810

dec_label_pc_16810:                               ; preds = %dec_label_pc_16768, %dec_label_pc_16780.dec_label_pc_16810.loopexit_crit_edge, %dec_label_pc_1680c
  %v0_16810 = phi i32 [ %v2_1680c, %dec_label_pc_1680c ], [ %v0_16810.pre.pre, %dec_label_pc_16780.dec_label_pc_16810.loopexit_crit_edge ], [ 0, %dec_label_pc_16768 ]
  %v2_16814 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_16814, i32* %r4.global-to-local, align 4
  ret i32 %v0_16810

; uselistorder directives
  uselistorder i32 %v0_167fc, { 1, 0 }
  uselistorder i32 %v1_167f4, { 0, 2, 1 }
  uselistorder i32 %v0_167f0, { 1, 0 }
  uselistorder i32 %v1_167c8, { 0, 2, 1 }
  uselistorder i32 %v0_167c8, { 1, 0 }
  uselistorder i32 %v5_167b4, { 1, 0 }
  uselistorder i32 %v2_167b4, { 1, 0, 2 }
  uselistorder i32 %v3_16798, { 2, 3, 0, 1 }
  uselistorder i32 %v0_16790, { 1, 0 }
  uselistorder i32 %v5_167a4, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 3, 5, 1, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 3, 2, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32 256, { 290, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 284, 291, 288, 289, 292, 36, 38, 37, 39, 283, 40, 41, 42, 0, 287, 1, 43, 44, 45, 46, 48, 49, 50, 47, 52, 53, 54, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 67, 66, 69, 70, 71, 72, 293, 73, 74, 75, 76, 77, 294, 78, 79, 80, 81, 295, 82, 83, 84, 85, 86, 88, 87, 89, 91, 90, 92, 94, 93, 95, 296, 96, 297, 105, 100, 106, 101, 102, 97, 98, 107, 103, 99, 104, 108, 109, 110, 111, 112, 113, 114, 121, 118, 122, 119, 123, 120, 115, 116, 117, 124, 125, 126, 127, 137, 133, 128, 138, 134, 139, 135, 129, 130, 131, 140, 136, 132, 141, 142, 143, 144, 145, 146, 2, 147, 3, 156, 152, 157, 153, 148, 149, 150, 158, 154, 159, 155, 151, 160, 161, 162, 163, 164, 174, 175, 169, 176, 170, 165, 166, 171, 177, 172, 178, 173, 167, 168, 179, 180, 181, 182, 187, 185, 183, 188, 186, 184, 189, 190, 192, 194, 195, 193, 191, 196, 285, 298, 197, 199, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 212, 210, 215, 213, 211, 216, 217, 219, 221, 222, 220, 218, 223, 286, 299, 224, 226, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 4, 239, 244, 251, 245, 252, 246, 240, 241, 253, 247, 242, 248, 254, 249, 243, 250, 255, 256, 257, 258, 259, 260, 265, 272, 266, 273, 267, 261, 262, 274, 268, 263, 269, 275, 270, 264, 271, 276, 277, 278, 279, 280, 281, 282 }
  uselistorder i8 10, { 2, 3, 0, 1 }
  uselistorder i32 (i32, i32)* @function_114ec, { 2, 1, 0 }
  uselistorder i32 4, { 212, 213, 214, 206, 207, 340, 215, 468, 6, 7, 216, 8, 9, 73, 0, 10, 82, 77, 78, 11, 469, 79, 470, 63, 12, 13, 80, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 14, 488, 489, 490, 491, 492, 493, 62, 494, 495, 496, 497, 498, 499, 15, 16, 81, 500, 217, 99, 218, 17, 219, 100, 220, 221, 222, 223, 136, 224, 225, 226, 227, 228, 229, 18, 208, 209, 210, 211, 292, 293, 201, 202, 203, 204, 205, 501, 137, 101, 502, 19, 503, 138, 139, 64, 409, 410, 411, 412, 413, 414, 140, 141, 20, 415, 416, 417, 418, 419, 420, 421, 422, 142, 407, 408, 383, 384, 385, 386, 387, 388, 389, 390, 391, 21, 392, 393, 394, 423, 22, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 143, 144, 145, 438, 439, 442, 445, 440, 441, 102, 146, 443, 54, 444, 446, 447, 448, 450, 147, 24, 23, 449, 148, 149, 150, 254, 151, 55, 25, 26, 294, 295, 296, 297, 298, 27, 299, 451, 452, 200, 28, 29, 103, 255, 65, 247, 104, 248, 108, 109, 152, 249, 256, 257, 30, 258, 83, 105, 106, 244, 250, 251, 107, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 1, 245, 246, 252, 253, 110, 58, 57, 259, 74, 260, 31, 261, 32, 60, 59, 263, 33, 262, 264, 265, 270, 111, 272, 112, 273, 113, 274, 275, 271, 266, 114, 267, 268, 269, 283, 153, 284, 56, 34, 285, 286, 35, 287, 66, 75, 115, 288, 289, 453, 276, 72, 71, 70, 277, 116, 36, 37, 38, 39, 40, 41, 278, 68, 67, 279, 69, 117, 280, 281, 282, 154, 290, 118, 291, 42, 307, 308, 309, 155, 310, 311, 312, 313, 156, 157, 119, 314, 120, 316, 84, 317, 318, 319, 158, 320, 321, 159, 160, 322, 85, 323, 86, 324, 325, 161, 326, 327, 162, 163, 328, 121, 329, 87, 330, 164, 165, 166, 331, 332, 122, 88, 333, 334, 167, 335, 336, 337, 168, 169, 2, 123, 338, 89, 339, 341, 342, 170, 343, 344, 171, 172, 3, 124, 345, 90, 347, 91, 348, 349, 350, 351, 173, 352, 353, 174, 175, 354, 355, 125, 356, 4, 357, 92, 358, 126, 359, 360, 361, 362, 176, 363, 364, 177, 178, 365, 366, 127, 367, 5, 368, 93, 369, 128, 370, 179, 180, 181, 371, 372, 129, 94, 373, 374, 375, 376, 182, 377, 378, 183, 184, 131, 379, 130, 380, 95, 381, 96, 382, 454, 455, 456, 457, 458, 133, 459, 134, 460, 185, 461, 61, 462, 186, 187, 135, 463, 132, 464, 97, 465, 98, 467, 188, 43, 395, 189, 44, 396, 190, 45, 397, 191, 46, 398, 192, 47, 399, 193, 76, 48, 400, 401, 194, 49, 402, 195, 50, 403, 196, 51, 404, 197, 52, 405, 198, 53, 406, 466, 346, 300, 301, 302, 303, 304, 305, 199, 306, 315 }
  uselistorder i32 2147483647, { 1, 6, 0, 2, 3, 4, 5 }
  uselistorder i32* @r7, { 2, 34, 35, 23, 24, 25, 26, 27, 28, 29, 30, 33, 3, 36, 37, 38, 4, 39, 40, 41, 17, 42, 43, 5, 44, 45, 46, 47, 48, 49, 6, 50, 51, 52, 53, 54, 55, 31, 32, 316, 317, 183, 184, 278, 279, 22, 318, 319, 320, 325, 326, 7, 56, 57, 8, 111, 112, 113, 0, 114, 280, 281, 282, 283, 284, 285, 286, 287, 288, 261, 262, 263, 264, 265, 266, 289, 290, 291, 292, 293, 294, 295, 296, 9, 297, 298, 299, 300, 301, 242, 243, 70, 71, 115, 116, 72, 73, 244, 245, 246, 247, 74, 75, 130, 131, 132, 133, 134, 139, 140, 141, 142, 143, 135, 136, 137, 138, 144, 145, 146, 147, 148, 149, 302, 303, 323, 324, 76, 77, 78, 79, 234, 235, 321, 322, 191, 192, 150, 151, 185, 186, 117, 118, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 304, 305, 19, 306, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 58, 69, 90, 91, 92, 93, 94, 95, 96, 101, 102, 103, 104, 105, 106, 193, 194, 195, 196, 97, 98, 99, 100, 107, 108, 109, 110, 119, 120, 10, 121, 122, 123, 124, 125, 126, 127, 128, 129, 162, 163, 164, 165, 166, 167, 168, 169, 170, 197, 198, 199, 200, 201, 202, 203, 204, 11, 205, 206, 207, 208, 209, 210, 211, 212, 12, 213, 214, 215, 14, 13, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 20, 229, 230, 231, 232, 233, 236, 21, 237, 238, 239, 240, 241, 16, 15, 248, 249, 250, 251, 252, 253, 1, 254, 255, 256, 257, 258, 259, 260, 307, 308, 309, 310, 311, 312, 313, 314, 315, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 173, 171, 172, 18, 174, 175, 176, 177, 178, 179, 180, 181, 182, 187, 188, 189, 190 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_16810, { 1, 2, 0 }
  uselistorder label %dec_label_pc_1680c, { 1, 0 }
  uselistorder label %dec_label_pc_167fc, { 1, 0 }
  uselistorder label %bb24, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_16788, { 1, 0 }
}

define i32 @function_1681c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1681c:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1681c = load i32, i32* @r4, align 4
  store i32 %v3_1681c, i32* %stack_var_-8, align 4
  %v1_16820 = add i32 %arg1, 8
  %v1_16824 = inttoptr i32 %v1_16820 to i32*
  %v2_16824 = load i32, i32* %v1_16824, align 4
  %v3_16824 = add i32 %arg1, 12
  %v4_16824 = inttoptr i32 %v3_16824 to i32*
  %v5_16824 = load i32, i32* %v4_16824, align 4
  %v2_16828 = sub i32 %v5_16824, %v2_16824
  store i32 %v2_16828, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v3_16830 = inttoptr i32 %arg1 to i16*
  %v4_16830 = call i32 @function_16710(i16* %v3_16830, i32 %v2_16824, i32 %v2_16828)
  %v0_16834 = load i32, i32* @r4, align 4
  %v1_16834 = add i32 %v0_16834, 8
  %v2_16834 = inttoptr i32 %v1_16834 to i32*
  %v3_16834 = load i32, i32* %v2_16834, align 4
  store i32 %v3_16834, i32* %r2.global-to-local, align 4
  %v2_16838 = add i32 %v3_16834, %v4_16830
  %v2_1683c = add i32 %v0_16834, 20
  %v3_1683c = inttoptr i32 %v2_1683c to i32*
  store i32 %v2_16838, i32* %v3_1683c, align 4
  %v0_16840 = load i32, i32* %r2.global-to-local, align 4
  %v1_16840 = load i32, i32* @r4, align 4
  %v2_16840 = add i32 %v1_16840, 16
  %v3_16840 = inttoptr i32 %v2_16840 to i32*
  store i32 %v0_16840, i32* %v3_16840, align 4
  %v2_16844 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_16844, i32* @r4, align 4
  ret i32 %v4_16830

; uselistorder directives
  uselistorder i32 %v4_16830, { 1, 0 }
  uselistorder i32 20, { 32, 115, 3, 116, 117, 1, 118, 33, 6, 34, 35, 36, 37, 31, 46, 47, 27, 28, 29, 30, 119, 7, 120, 107, 108, 109, 2, 48, 8, 49, 50, 0, 38, 40, 9, 42, 10, 43, 26, 41, 39, 44, 45, 11, 12, 13, 14, 52, 15, 53, 54, 55, 56, 57, 58, 16, 59, 60, 61, 62, 63, 64, 17, 65, 66, 67, 68, 69, 70, 71, 72, 73, 18, 74, 75, 76, 77, 78, 79, 80, 81, 19, 82, 83, 84, 85, 86, 87, 20, 88, 89, 21, 90, 91, 92, 93, 22, 94, 95, 23, 96, 97, 98, 99, 100, 101, 102, 4, 103, 24, 104, 105, 106, 110, 5, 111, 25, 112, 113, 114, 51 }
  uselistorder i32 12, { 10, 11, 40, 12, 13, 43, 7, 168, 169, 170, 171, 172, 174, 175, 173, 176, 177, 178, 179, 180, 181, 182, 14, 15, 16, 17, 19, 18, 20, 44, 45, 21, 46, 47, 48, 49, 50, 41, 42, 84, 85, 37, 38, 39, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 3, 117, 118, 119, 120, 121, 22, 122, 140, 23, 24, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 159, 152, 153, 154, 155, 156, 157, 158, 160, 161, 25, 162, 4, 86, 87, 26, 88, 89, 27, 66, 51, 61, 62, 63, 67, 68, 64, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 28, 29, 30, 69, 70, 71, 6, 72, 73, 74, 75, 77, 78, 36, 79, 31, 80, 32, 81, 83, 82, 76, 5, 163, 90, 33, 91, 92, 93, 94, 95, 96, 97, 34, 98, 99, 100, 35, 101, 102, 103, 104, 105, 106, 8, 107, 108, 109, 110, 111, 112, 9, 113, 114, 115, 116, 164, 165, 166, 167, 0, 1, 2 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
}

define i32 @function_1684c() local_unnamed_addr {
dec_label_pc_1684c:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_1684c = load i32, i32* @r4, align 4
  store i32 %v3_1684c, i32* %stack_var_-12, align 4
  %v0_16850 = load i32, i32* @r0, align 4
  %v1_16850 = inttoptr i32 %v0_16850 to i16*
  %v2_16850 = load i16, i16* %v1_16850, align 2
  %v3_16850 = zext i16 %v2_16850 to i32
  store i32 %v3_16850, i32* %r3.global-to-local, align 4
  %v0_16854 = load i32, i32* @r1, align 4
  %v2_16854 = and i32 %v0_16854, %v3_16850
  %v4_16854 = icmp eq i32 %v2_16854, 0
  store i32 %v0_16850, i32* @r4, align 4
  br i1 %v4_16854, label %dec_label_pc_16864, label %dec_label_pc_16874

dec_label_pc_16864:                               ; preds = %dec_label_pc_1684c
  %v1_16864 = and i32 %v3_16850, 2176
  %v2_16864 = icmp eq i32 %v1_16864, 0
  br i1 %v2_16864, label %dec_label_pc_1686c, label %dec_label_pc_16880

dec_label_pc_1686c:                               ; preds = %dec_label_pc_16864
  %v2_1686c = or i32 %v0_16854, %v3_16850
  store i32 %v2_1686c, i32* %r3.global-to-local, align 4
  %v1_16870 = trunc i32 %v2_1686c to i16
  store i16 %v1_16870, i16* %v1_16850, align 2
  %v0_16874.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_16874

dec_label_pc_16874:                               ; preds = %dec_label_pc_1684c, %dec_label_pc_1686c
  %v0_16874 = phi i32 [ %v0_16850, %dec_label_pc_1684c ], [ %v0_16874.pre, %dec_label_pc_1686c ]
  %v1_16874 = inttoptr i32 %v0_16874 to i16*
  %v2_16874 = load i16, i16* %v1_16874, align 2
  %v3_16874 = zext i16 %v2_16874 to i32
  store i32 %v3_16874, i32* %r3.global-to-local, align 4
  %v1_16878 = and i32 %v3_16874, 16
  store i32 %v1_16878, i32* %r5.global-to-local, align 4
  %v2_16878 = icmp eq i32 %v1_16878, 0
  br i1 %v2_16878, label %dec_label_pc_168a0, label %dec_label_pc_16880

dec_label_pc_16880:                               ; preds = %dec_label_pc_16864, %dec_label_pc_16874
  %v0_16880 = call i32 @function_11a08()
  store i32 %v0_16880, i32* %r0.global-to-local, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v2_16888 = inttoptr i32 %v0_16880 to i32*
  store i32 9, i32* %v2_16888, align 4
  br label %dec_label_pc_1688c

dec_label_pc_1688c:                               ; preds = %dec_label_pc_168a8, %dec_label_pc_16880
  %v0_1688c = load i32, i32* @r4, align 4
  %v1_1688c = inttoptr i32 %v0_1688c to i16*
  %v2_1688c = load i16, i16* %v1_1688c, align 2
  %v3_1688c = zext i16 %v2_1688c to i32
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_16894 = or i32 %v3_1688c, 8
  store i32 %v1_16894, i32* %r3.global-to-local, align 4
  %v1_16898 = trunc i32 %v1_16894 to i16
  store i16 %v1_16898, i16* %v1_1688c, align 2
  %v1_168e0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_168d8

dec_label_pc_168a0:                               ; preds = %dec_label_pc_16874
  %v1_168a0 = and i32 %v3_16874, 64
  %v2_168a0 = icmp eq i32 %v1_168a0, 0
  br i1 %v2_168a0, label %dec_label_pc_168c8, label %dec_label_pc_168a8

dec_label_pc_168a8:                               ; preds = %dec_label_pc_168a0
  %v0_168a8 = load i32, i32* @r0, align 4
  %v1_168a8 = call i32 @function_15484(i32 %v0_168a8)
  store i32 %v1_168a8, i32* %r0.global-to-local, align 4
  %v2_168ac = icmp eq i32 %v1_168a8, 0
  br i1 %v2_168ac, label %dec_label_pc_168b4, label %dec_label_pc_1688c

dec_label_pc_168b4:                               ; preds = %dec_label_pc_168a8
  %v0_168b4 = load i32, i32* @r4, align 4
  %v1_168b4 = inttoptr i32 %v0_168b4 to i16*
  %v2_168b4 = load i16, i16* %v1_168b4, align 2
  %v3_168b4 = zext i16 %v2_168b4 to i32
  store i32 %v3_168b4, i32* %r3.global-to-local, align 4
  %v1_168b8 = add i32 %v0_168b4, 8
  %v2_168b8 = inttoptr i32 %v1_168b8 to i32*
  %v3_168b8 = load i32, i32* %v2_168b8, align 4
  %v1_168bc = and i32 %v3_168b4, 65471
  store i32 %v1_168bc, i32* %r3.global-to-local, align 4
  %v2_168c0 = add i32 %v0_168b4, 28
  %v3_168c0 = inttoptr i32 %v2_168c0 to i32*
  store i32 %v3_168b8, i32* %v3_168c0, align 4
  %v0_168c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_168c4 = trunc i32 %v0_168c4 to i16
  %v2_168c4 = load i32, i32* @r4, align 4
  %v3_168c4 = inttoptr i32 %v2_168c4 to i16*
  store i16 %v1_168c4, i16* %v3_168c4, align 2
  %v0_168c8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_168c8

dec_label_pc_168c8:                               ; preds = %dec_label_pc_168a0, %dec_label_pc_168b4
  %v2_168d0 = phi i32 [ %v0_16874, %dec_label_pc_168a0 ], [ %v0_168c8.pre, %dec_label_pc_168b4 ]
  %v1_168c8 = inttoptr i32 %v2_168d0 to i16*
  %v2_168c8 = load i16, i16* %v1_168c8, align 2
  %v3_168c8 = zext i16 %v2_168c8 to i32
  %v1_168cc = or i32 %v3_168c8, 1
  store i32 %v1_168cc, i32* %r3.global-to-local, align 4
  %v1_168d0 = trunc i32 %v1_168cc to i16
  store i16 %v1_168d0, i16* %v1_168c8, align 2
  %v0_168d4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_168d4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_168d8

dec_label_pc_168d8:                               ; preds = %dec_label_pc_1688c, %dec_label_pc_168c8
  %v1_168e0 = phi i32 [ %v1_168e0.pre, %dec_label_pc_1688c ], [ %v0_168d4, %dec_label_pc_168c8 ]
  %v2_168dc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_168dc, i32* @r4, align 4
  ret i32 %v1_168e0

; uselistorder directives
  uselistorder i32 %v3_16850, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 0, 3, 1, 2, 4 }
  uselistorder i32 28, { 22, 47, 7, 23, 24, 25, 35, 36, 20, 10, 21, 11, 12, 13, 14, 44, 45, 46, 8, 15, 0, 26, 1, 27, 2, 28, 3, 29, 4, 30, 5, 31, 6, 32, 9, 19, 34, 33, 16, 17, 18, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i32 65471, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_15484, { 2, 1, 0 }
  uselistorder i32 64, { 13, 14, 15, 16, 20, 9, 10, 11, 12, 52, 17, 18, 19, 21, 22, 6, 23, 24, 25, 0, 26, 27, 28, 7, 29, 30, 31, 8, 32, 33, 34, 1, 35, 36, 37, 2, 38, 39, 40, 3, 41, 42, 43, 44, 45, 4, 46, 47, 48, 49, 50, 5, 51 }
  uselistorder i32 8, { 71, 72, 73, 74, 75, 76, 77, 64, 65, 66, 67, 128, 78, 220, 34, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 79, 80, 81, 82, 83, 84, 85, 28, 86, 87, 88, 89, 90, 91, 92, 93, 94, 68, 69, 70, 110, 111, 112, 45, 238, 239, 29, 165, 166, 167, 168, 169, 170, 171, 172, 7, 56, 173, 174, 175, 176, 177, 178, 179, 180, 8, 152, 153, 154, 155, 156, 157, 158, 159, 181, 182, 183, 184, 185, 9, 186, 187, 10, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 205, 198, 199, 200, 201, 57, 23, 202, 203, 204, 58, 59, 11, 206, 207, 208, 209, 211, 212, 60, 12, 213, 13, 210, 37, 38, 35, 36, 25, 26, 31, 32, 39, 240, 113, 114, 115, 116, 46, 62, 30, 14, 15, 22, 16, 40, 96, 97, 17, 18, 19, 98, 50, 95, 47, 48, 49, 63, 33, 99, 100, 101, 24, 27, 103, 20, 51, 104, 52, 105, 106, 102, 107, 108, 53, 109, 119, 41, 120, 121, 122, 123, 124, 125, 126, 127, 3, 129, 130, 131, 4, 132, 133, 134, 135, 136, 137, 138, 5, 139, 140, 141, 142, 143, 144, 145, 6, 146, 147, 148, 149, 150, 151, 214, 215, 216, 217, 218, 219, 160, 42, 161, 43, 162, 44, 163, 54, 164, 0, 1, 61, 21, 117, 55, 118, 2 }
  uselistorder i32 9, { 5, 30, 25, 26, 57, 59, 6, 44, 4, 45, 7, 33, 27, 32, 9, 31, 10, 11, 12, 8, 34, 2, 28, 29, 35, 13, 36, 14, 37, 15, 38, 16, 39, 40, 17, 18, 19, 41, 42, 20, 43, 0, 21, 1, 22, 60, 46, 47, 23, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 62, 3, 58, 24 }
  uselistorder i32 16, { 120, 121, 122, 114, 115, 116, 117, 123, 33, 34, 35, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 124, 125, 126, 127, 128, 2, 1, 25, 51, 52, 53, 54, 131, 55, 132, 129, 130, 56, 57, 133, 9, 58, 59, 134, 135, 60, 61, 136, 137, 118, 119, 62, 159, 160, 110, 111, 112, 113, 63, 26, 153, 36, 64, 65, 66, 227, 228, 229, 230, 67, 231, 3, 68, 232, 233, 0, 234, 235, 69, 24, 161, 70, 162, 71, 72, 10, 23, 11, 12, 4, 13, 14, 73, 140, 37, 141, 142, 74, 138, 143, 139, 146, 147, 38, 109, 148, 75, 76, 15, 104, 16, 17, 77, 144, 145, 78, 151, 152, 41, 40, 39, 149, 42, 150, 43, 79, 80, 81, 82, 83, 84, 85, 86, 154, 87, 155, 88, 156, 89, 157, 90, 158, 91, 92, 93, 94, 44, 236, 95, 164, 165, 166, 167, 27, 168, 169, 170, 171, 172, 28, 173, 174, 175, 176, 96, 45, 177, 178, 29, 179, 180, 18, 181, 182, 5, 97, 183, 184, 185, 30, 186, 187, 188, 189, 190, 6, 98, 191, 31, 192, 193, 194, 19, 195, 196, 105, 20, 106, 197, 99, 100, 198, 199, 7, 47, 200, 46, 201, 32, 202, 203, 204, 21, 205, 206, 107, 22, 108, 207, 101, 102, 208, 209, 8, 49, 210, 48, 211, 212, 103, 50, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 223, 225, 226, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 247, 249, 250, 163 }
  uselistorder i32* @r1, { 16, 15, 64, 17, 18, 19, 20, 1, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 2, 97, 98, 21, 22, 23, 24, 0, 46, 47, 10, 25, 39, 40, 41, 3, 72, 70, 71, 4, 73, 5, 30, 31, 12, 65, 56, 57, 7, 26, 48, 11, 74, 75, 49, 8, 76, 50, 51, 32, 27, 28, 29, 34, 33, 38, 58, 35, 36, 37, 42, 43, 44, 45, 52, 53, 54, 9, 55, 77, 78, 6, 59, 60, 61, 62, 63, 66, 67, 68, 69, 79, 14, 13 }
  uselistorder label %dec_label_pc_168d8, { 1, 0 }
  uselistorder label %dec_label_pc_168c8, { 1, 0 }
  uselistorder label %dec_label_pc_16880, { 1, 0 }
  uselistorder label %dec_label_pc_16874, { 1, 0 }
}

define i32 @function_168e4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_168e4:
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_168e4 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_168f4 = call i32 @function_11b10()
  %v0_168f8 = load i32, i32* @r5, align 4
  %v1_168f8 = load i32, i32* @r4, align 4
  %v2_168f8 = add i32 %v1_168f8, %v0_168f8
  store i32 %v6_168e4, i32* @r5, align 4
  ret i32 %v2_168f8

; uselistorder directives
  uselistorder i32 ()* @function_11b10, { 6, 7, 5, 0, 2, 1, 4, 3 }
  uselistorder i32* @r5, { 41, 42, 43, 44, 27, 28, 29, 30, 31, 32, 33, 34, 35, 45, 5, 46, 47, 48, 695, 696, 697, 49, 23, 50, 0, 51, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 19, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 25, 26, 74, 75, 76, 77, 78, 79, 6, 80, 81, 82, 83, 84, 85, 86, 7, 87, 88, 89, 10, 90, 91, 8, 92, 93, 94, 95, 96, 97, 9, 98, 99, 100, 101, 102, 103, 36, 11, 37, 38, 39, 40, 280, 281, 282, 283, 284, 285, 710, 12, 711, 712, 720, 104, 105, 106, 107, 108, 109, 110, 713, 714, 715, 716, 717, 718, 719, 111, 112, 113, 114, 624, 625, 629, 630, 631, 632, 633, 626, 627, 628, 573, 574, 575, 13, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 634, 635, 658, 14, 659, 660, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 3, 649, 650, 651, 652, 653, 15, 654, 655, 656, 657, 124, 125, 126, 127, 128, 286, 287, 16, 288, 289, 290, 291, 292, 24, 115, 293, 17, 294, 295, 296, 297, 298, 299, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 121, 122, 116, 117, 118, 119, 120, 123, 202, 203, 204, 205, 206, 207, 208, 209, 210, 216, 217, 218, 219, 211, 212, 213, 214, 215, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 332, 333, 334, 335, 336, 337, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 1, 239, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 2, 279, 300, 301, 302, 303, 304, 20, 305, 306, 307, 308, 309, 310, 311, 21, 312, 22, 313, 314, 315, 316, 317, 318, 319, 338, 339, 18, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 4, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331 }
  uselistorder i32* @r2, { 7, 10, 11, 39, 40, 12, 13, 14, 15, 16, 17, 28, 8, 9, 29, 41, 46, 47, 48, 49, 1, 52, 42, 22, 23, 43, 2, 3, 36, 37, 4, 38, 5, 0, 50, 6, 51, 44, 45, 24, 25, 26, 30, 31, 35, 21, 18, 19, 20, 27, 32, 33, 34 }
}

define i32 @function_16908(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_16908:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_16948, label %dec_label_pc_16934

dec_label_pc_16934:                               ; preds = %dec_label_pc_16908
  %v0_16934 = call i32 @function_11a08()
  %v0_16938 = load i32, i32* %r4.global-to-local, align 4
  %v1_16938 = sub i32 0, %v0_16938
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_16940 = inttoptr i32 %v0_16934 to i32*
  store i32 %v1_16938, i32* %v2_16940, align 4
  %v0_16950.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_16950

dec_label_pc_16948:                               ; preds = %dec_label_pc_16908
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %v2_16948 = icmp eq i32 %arg1, 0
  br i1 %v2_16948, label %dec_label_pc_1695c, label %dec_label_pc_16950

dec_label_pc_16950:                               ; preds = %dec_label_pc_16948, %dec_label_pc_16934
  %v0_16950 = phi i32 [ %arg1, %dec_label_pc_16948 ], [ %v0_16950.pre, %dec_label_pc_16934 ]
  br label %dec_label_pc_16960

dec_label_pc_1695c:                               ; preds = %dec_label_pc_16948
  br label %dec_label_pc_16960

dec_label_pc_16960:                               ; preds = %dec_label_pc_16950, %dec_label_pc_1695c
  %v1_16968 = phi i32 [ %v0_16950, %dec_label_pc_16950 ], [ %tmp8, %dec_label_pc_1695c ]
  ret i32 %v1_16968

; uselistorder directives
  uselistorder i32 -1, { 274, 280, 187, 275, 276, 277, 127, 278, 128, 279, 97, 98, 99, 100, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 188, 189, 0, 190, 167, 281, 282, 191, 129, 283, 192, 1, 101, 284, 285, 175, 286, 193, 3, 2, 194, 195, 130, 354, 131, 132, 321, 133, 329, 120, 330, 314, 315, 316, 134, 273, 135, 331, 332, 4, 196, 197, 198, 333, 310, 311, 176, 199, 5, 200, 6, 201, 177, 334, 10, 202, 203, 9, 11, 335, 8, 204, 205, 102, 7, 206, 103, 104, 105, 106, 207, 208, 209, 114, 291, 292, 12, 293, 136, 336, 137, 138, 337, 139, 326, 140, 324, 141, 294, 142, 312, 143, 144, 295, 145, 327, 146, 328, 147, 296, 119, 186, 13, 318, 210, 148, 338, 149, 356, 150, 297, 151, 298, 152, 299, 153, 317, 154, 358, 155, 325, 156, 355, 157, 322, 158, 319, 159, 307, 160, 161, 162, 357, 163, 313, 211, 212, 213, 14, 112, 117, 15, 16, 118, 113, 173, 174, 214, 21, 215, 300, 287, 288, 164, 289, 18, 216, 217, 19, 218, 219, 220, 221, 222, 223, 224, 225, 20, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 178, 290, 22, 243, 107, 23, 244, 245, 24, 246, 247, 122, 121, 301, 17, 248, 249, 250, 25, 251, 125, 126, 123, 124, 252, 26, 253, 166, 302, 108, 27, 28, 254, 116, 29, 30, 31, 32, 33, 165, 308, 309, 115, 185, 184, 36, 180, 303, 179, 304, 35, 181, 305, 34, 37, 38, 182, 306, 39, 40, 41, 42, 43, 255, 44, 109, 45, 46, 256, 257, 258, 259, 260, 47, 168, 169, 170, 171, 172, 48, 49, 50, 261, 51, 52, 53, 54, 55, 56, 57, 58, 110, 59, 60, 61, 62, 63, 64, 65, 262, 66, 183, 323, 67, 68, 69, 263, 70, 71, 72, 264, 73, 265, 74, 75, 76, 266, 77, 78, 79, 267, 80, 81, 82, 83, 84, 268, 85, 86, 87, 88, 89, 90, 269, 91, 92, 93, 270, 94, 95, 271, 272, 320, 96, 111 }
  uselistorder i32 ()* @function_11a08, { 63, 59, 62, 61, 60, 65, 58, 57, 6, 5, 24, 34, 22, 37, 36, 64, 21, 20, 19, 41, 40, 23, 11, 0, 12, 56, 55, 10, 9, 8, 27, 29, 54, 39, 53, 52, 26, 25, 51, 31, 30, 18, 16, 15, 14, 7, 3, 50, 49, 48, 17, 1, 28, 4, 32, 13, 43, 33, 47, 2, 38, 46, 45, 44, 42, 35 }
  uselistorder i32 1, { 181, 180, 854, 663, 422, 423, 424, 664, 349, 855, 856, 857, 665, 50, 52, 51, 53, 48, 54, 49, 55, 666, 37, 36, 38, 667, 41, 42, 39, 45, 43, 40, 44, 668, 258, 198, 197, 464, 498, 465, 1093, 1094, 1095, 1096, 478, 425, 670, 669, 368, 369, 858, 671, 468, 1193, 469, 859, 1194, 860, 861, 862, 864, 863, 450, 672, 866, 865, 1018, 1019, 1195, 470, 1196, 1197, 1198, 1199, 1200, 1201, 850, 1202, 1203, 1204, 1205, 1206, 1207, 851, 656, 674, 673, 428, 429, 434, 436, 435, 430, 427, 431, 433, 432, 870, 867, 868, 869, 496, 471, 299, 297, 298, 301, 300, 539, 871, 872, 873, 874, 675, 657, 46, 47, 875, 678, 677, 676, 79, 82, 80, 83, 84, 85, 81, 540, 876, 680, 679, 406, 409, 407, 404, 405, 408, 877, 681, 236, 235, 234, 878, 879, 682, 157, 156, 683, 12, 541, 853, 135, 136, 880, 881, 882, 883, 542, 884, 885, 886, 472, 686, 685, 684, 355, 354, 359, 357, 356, 358, 887, 888, 889, 688, 687, 122, 123, 543, 890, 689, 110, 891, 892, 893, 894, 895, 544, 690, 73, 74, 76, 75, 77, 545, 78, 306, 691, 285, 284, 200, 692, 194, 693, 168, 167, 694, 57, 62, 56, 61, 65, 64, 60, 63, 58, 59, 695, 72, 71, 69, 68, 70, 66, 67, 696, 112, 113, 120, 121, 117, 118, 116, 119, 114, 115, 697, 228, 229, 403, 1020, 335, 338, 336, 337, 698, 134, 133, 699, 111, 700, 126, 127, 1208, 546, 1209, 547, 701, 206, 202, 207, 205, 203, 208, 209, 204, 97, 548, 231, 230, 702, 360, 361, 279, 457, 896, 897, 898, 703, 1052, 706, 705, 704, 247, 707, 466, 991, 467, 992, 993, 458, 994, 411, 412, 410, 413, 414, 417, 416, 415, 995, 1210, 479, 549, 709, 708, 710, 318, 1145, 1148, 1149, 1150, 711, 382, 387, 388, 386, 385, 389, 383, 384, 1151, 1152, 1153, 1154, 712, 394, 400, 393, 399, 398, 392, 402, 401, 396, 390, 395, 391, 397, 1146, 1147, 550, 282, 281, 280, 283, 1138, 551, 1139, 1140, 1141, 1142, 1143, 713, 103, 104, 102, 105, 351, 350, 1155, 1156, 1157, 1158, 1159, 1160, 503, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 553, 1169, 1170, 1171, 1172, 1173, 552, 1174, 1175, 1176, 1177, 1178, 714, 372, 374, 370, 373, 379, 381, 377, 378, 380, 376, 375, 371, 334, 333, 554, 555, 933, 462, 718, 717, 716, 715, 182, 106, 473, 317, 719, 184, 183, 332, 720, 185, 721, 353, 722, 232, 723, 11, 724, 96, 95, 199, 725, 340, 339, 726, 201, 727, 129, 128, 728, 196, 729, 1054, 1055, 131, 132, 899, 900, 901, 902, 903, 904, 905, 1211, 98, 99, 100, 101, 730, 1021, 556, 26, 27, 906, 731, 286, 557, 732, 186, 504, 558, 733, 257, 255, 256, 734, 30, 29, 28, 735, 254, 253, 736, 147, 737, 155, 738, 260, 259, 739, 14, 13, 179, 178, 740, 10, 9, 741, 125, 124, 742, 130, 743, 218, 217, 744, 321, 320, 352, 745, 418, 177, 746, 747, 233, 748, 288, 287, 445, 1179, 426, 1022, 1023, 1024, 1025, 456, 1026, 750, 749, 21, 20, 19, 18, 24, 25, 22, 23, 0, 996, 997, 998, 999, 1056, 474, 1057, 475, 1058, 752, 751, 420, 419, 421, 1027, 1028, 1029, 753, 89, 88, 86, 87, 1180, 1181, 480, 1, 453, 538, 1182, 323, 322, 324, 325, 923, 924, 925, 559, 1030, 367, 1183, 1032, 1031, 1033, 277, 278, 1059, 444, 1075, 754, 440, 439, 438, 437, 1060, 755, 140, 139, 138, 137, 560, 926, 561, 927, 505, 928, 934, 563, 935, 929, 911, 907, 565, 463, 908, 566, 909, 910, 570, 912, 913, 567, 914, 915, 571, 916, 917, 568, 918, 919, 569, 564, 920, 921, 922, 572, 573, 930, 574, 575, 936, 937, 938, 576, 939, 940, 941, 577, 481, 942, 852, 945, 944, 562, 943, 946, 947, 578, 948, 949, 950, 482, 957, 958, 459, 579, 768, 767, 766, 765, 764, 763, 762, 761, 760, 759, 758, 757, 756, 149, 152, 153, 154, 148, 150, 151, 951, 952, 580, 953, 954, 581, 955, 956, 242, 241, 240, 246, 243, 244, 245, 239, 238, 582, 583, 770, 769, 364, 365, 362, 363, 366, 964, 965, 966, 967, 968, 969, 970, 446, 455, 971, 972, 483, 447, 973, 974, 975, 976, 448, 454, 977, 978, 484, 449, 979, 584, 980, 981, 585, 982, 586, 983, 984, 476, 987, 985, 986, 451, 452, 988, 587, 989, 778, 659, 777, 776, 775, 774, 773, 772, 658, 771, 272, 271, 270, 273, 275, 276, 274, 269, 779, 195, 1184, 490, 477, 780, 315, 314, 313, 312, 316, 310, 308, 307, 309, 311, 1061, 782, 781, 329, 330, 328, 327, 326, 331, 931, 932, 35, 590, 506, 959, 960, 507, 961, 588, 589, 591, 962, 963, 592, 593, 594, 595, 596, 597, 598, 795, 794, 793, 792, 791, 790, 789, 788, 787, 786, 662, 785, 784, 783, 31, 33, 34, 32, 599, 460, 600, 796, 601, 602, 603, 606, 605, 604, 990, 798, 797, 304, 303, 305, 607, 1000, 495, 1001, 494, 1002, 493, 1003, 492, 1004, 491, 1005, 1006, 608, 497, 609, 1007, 610, 1008, 611, 1009, 612, 1010, 613, 1011, 614, 1012, 615, 1013, 616, 1014, 617, 1015, 618, 1016, 619, 1017, 461, 620, 811, 810, 809, 808, 807, 806, 805, 804, 803, 802, 801, 800, 799, 248, 249, 252, 250, 251, 1034, 1040, 3, 485, 1035, 621, 1036, 2, 1037, 499, 1038, 486, 487, 1039, 1041, 1042, 500, 1043, 660, 815, 814, 661, 813, 812, 302, 1185, 508, 509, 1186, 4, 5, 6, 1062, 1063, 1064, 1065, 1066, 501, 502, 622, 1067, 1068, 623, 1069, 1070, 624, 1071, 1073, 1072, 819, 818, 817, 816, 171, 173, 175, 176, 174, 169, 172, 170, 1076, 1077, 1078, 625, 626, 821, 820, 142, 145, 146, 141, 144, 143, 1079, 1080, 1081, 627, 1082, 628, 511, 510, 629, 1083, 822, 289, 292, 291, 293, 296, 290, 295, 294, 1084, 1085, 630, 1086, 512, 488, 631, 823, 108, 107, 109, 1087, 1088, 1089, 632, 1090, 633, 634, 1091, 513, 1092, 824, 262, 266, 267, 268, 265, 261, 264, 263, 1097, 1098, 1099, 635, 1100, 636, 515, 514, 637, 1102, 638, 1103, 825, 161, 164, 165, 166, 163, 158, 162, 159, 160, 1104, 1105, 1106, 1107, 1108, 639, 1109, 640, 1110, 641, 520, 519, 642, 1111, 516, 1112, 517, 1113, 518, 1114, 831, 830, 829, 828, 827, 826, 213, 214, 216, 215, 210, 212, 211, 1115, 1116, 1117, 1118, 1119, 643, 1120, 644, 1121, 645, 529, 528, 646, 1122, 527, 1123, 526, 1124, 521, 1125, 522, 1126, 523, 1127, 524, 1128, 525, 1129, 837, 836, 835, 834, 833, 832, 190, 191, 192, 193, 187, 189, 188, 1130, 1131, 647, 1132, 530, 489, 648, 838, 442, 441, 443, 1133, 1134, 1135, 649, 533, 532, 650, 1136, 531, 1137, 839, 341, 342, 346, 347, 348, 345, 344, 343, 1187, 1188, 1189, 651, 536, 535, 652, 1190, 534, 1191, 844, 843, 842, 841, 840, 219, 220, 225, 226, 227, 224, 223, 222, 221, 1144, 537, 653, 845, 17, 15, 16, 1192, 846, 319, 1101, 7, 1044, 1047, 654, 1048, 1049, 1045, 1046, 1050, 1051, 90, 91, 92, 94, 93, 1053, 655, 847, 1074, 237, 848, 849, 8 }
  uselistorder i32 %arg1, { 1, 2, 3, 0, 4 }
  uselistorder label %dec_label_pc_16960, { 1, 0 }
}

define i32 @function_1696c() local_unnamed_addr {
entry:
  %v3_16970 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_16970)
  %v31_16978 = load i32, i32* @r0, align 4
  ret i32 %v31_16978

; uselistorder directives
  uselistorder i32* @r0, { 32, 28, 31, 66, 65, 197, 20, 4, 5, 233, 6, 19, 7, 67, 0, 68, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 1, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 69, 25, 63, 64, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 23, 15, 165, 166, 11, 16, 12, 260, 262, 263, 53, 54, 55, 56, 57, 58, 59, 60, 13, 14, 84, 85, 261, 149, 150, 86, 213, 24, 51, 61, 214, 2, 215, 216, 217, 212, 206, 50, 207, 208, 209, 52, 210, 211, 26, 225, 226, 218, 219, 220, 221, 222, 223, 224, 91, 92, 17, 93, 10, 30, 167, 168, 169, 170, 191, 18, 29, 27, 227, 171, 228, 21, 172, 173, 174, 175, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 89, 130, 87, 88, 90, 37, 131, 134, 135, 136, 137, 138, 139, 132, 133, 146, 147, 148, 38, 39, 9, 40, 41, 140, 141, 42, 43, 142, 143, 144, 145, 151, 152, 44, 45, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 46, 163, 164, 47, 176, 177, 178, 179, 180, 181, 182, 8, 183, 184, 185, 186, 187, 188, 189, 229, 230, 3, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 231, 232, 199, 190, 48, 49, 22, 62, 34, 36, 33, 35 }
  uselistorder void (i32)* @__pseudo_branch, { 1, 66, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 2, 3, 4, 71, 72, 73, 74, 67, 55, 68, 69, 70, 75, 76, 77, 56, 57, 58, 52, 53, 54, 59, 63, 64, 60, 61, 62, 78, 45, 46, 47, 48, 49, 50, 39, 40, 41, 42, 43, 44, 51, 0, 65 }
  uselistorder i32 0, { 621, 622, 631, 632, 633, 634, 635, 110, 636, 637, 638, 0, 639, 318, 70, 640, 394, 641, 642, 643, 355, 356, 623, 624, 629, 1, 111, 112, 998, 999, 1000, 1001, 150, 151, 1002, 644, 152, 113, 1198, 1199, 1200, 319, 645, 646, 647, 320, 1201, 71, 321, 1202, 1203, 89, 42, 43, 648, 79, 2, 105, 106, 853, 80, 81, 82, 854, 855, 1204, 1205, 1206, 1207, 1208, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1209, 1210, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 33, 1229, 1230, 1231, 1232, 1233, 34, 1234, 1235, 1236, 35, 1237, 1238, 1239, 36, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1264, 1265, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 37, 1283, 1284, 1285, 1286, 1287, 38, 1288, 1289, 1290, 1291, 1292, 39, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 153, 649, 595, 650, 651, 652, 653, 654, 395, 396, 655, 656, 114, 115, 116, 657, 658, 662, 659, 660, 661, 322, 339, 663, 664, 117, 154, 667, 665, 666, 323, 668, 118, 669, 670, 3, 4, 119, 671, 615, 616, 397, 617, 672, 673, 674, 72, 73, 675, 676, 677, 155, 678, 679, 680, 681, 682, 398, 683, 684, 685, 686, 687, 688, 120, 689, 690, 691, 692, 5, 6, 156, 158, 693, 157, 694, 159, 695, 121, 696, 701, 702, 697, 698, 699, 704, 705, 706, 160, 707, 708, 709, 710, 711, 700, 703, 712, 122, 625, 626, 627, 1308, 1309, 1096, 910, 1104, 630, 856, 857, 357, 858, 399, 618, 400, 619, 1105, 1106, 1107, 161, 1108, 859, 860, 861, 620, 628, 123, 162, 1310, 1311, 1109, 1110, 124, 163, 401, 1315, 1316, 402, 1317, 1318, 164, 325, 1319, 1320, 403, 74, 1321, 1322, 404, 1329, 1332, 587, 324, 1333, 405, 1330, 1331, 1312, 1313, 596, 165, 313, 713, 715, 714, 166, 716, 717, 718, 406, 719, 107, 911, 98, 912, 168, 167, 913, 1314, 829, 830, 831, 832, 833, 834, 170, 125, 835, 836, 837, 99, 169, 838, 126, 408, 409, 1324, 407, 127, 594, 128, 171, 1116, 1117, 1118, 1119, 1120, 172, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 173, 1111, 410, 1112, 1113, 411, 1114, 1115, 129, 1097, 412, 174, 1098, 1099, 1100, 1101, 1102, 130, 180, 178, 182, 175, 176, 179, 181, 184, 183, 177, 1128, 1129, 1153, 1154, 131, 1130, 1131, 188, 186, 187, 1132, 1133, 194, 193, 146, 185, 1134, 1135, 1136, 1137, 1138, 1139, 348, 347, 358, 413, 1140, 1141, 1142, 75, 1143, 190, 189, 191, 192, 145, 1144, 1145, 326, 1146, 1147, 108, 1148, 1149, 1150, 1151, 1152, 7, 8, 743, 744, 76, 132, 9, 359, 414, 1155, 1156, 1157, 1073, 1051, 745, 839, 746, 747, 1074, 1075, 748, 1003, 1334, 1335, 83, 133, 862, 863, 864, 195, 720, 721, 196, 865, 870, 871, 872, 873, 197, 360, 198, 349, 350, 415, 866, 199, 867, 868, 134, 874, 1158, 1325, 749, 750, 751, 869, 1328, 1052, 1323, 916, 875, 812, 914, 752, 416, 1326, 102, 1327, 840, 10, 1159, 1160, 103, 1161, 1162, 1163, 1164, 1165, 200, 1166, 588, 597, 589, 590, 1167, 598, 147, 201, 876, 877, 878, 100, 341, 879, 880, 599, 11, 327, 202, 203, 204, 44, 205, 417, 753, 881, 882, 883, 1169, 1168, 1170, 1171, 1172, 1173, 40, 206, 1174, 1175, 1176, 207, 90, 91, 392, 393, 732, 209, 208, 210, 884, 211, 885, 886, 212, 1177, 1178, 418, 213, 887, 214, 215, 948, 216, 917, 760, 754, 219, 755, 419, 756, 420, 733, 722, 600, 723, 601, 724, 602, 725, 603, 726, 604, 727, 605, 728, 729, 92, 45, 316, 317, 730, 606, 731, 734, 735, 736, 737, 738, 217, 218, 739, 740, 757, 586, 758, 421, 759, 329, 328, 761, 762, 763, 764, 221, 220, 765, 766, 767, 607, 314, 768, 84, 85, 315, 769, 86, 87, 422, 771, 772, 591, 773, 774, 775, 776, 777, 423, 778, 779, 342, 343, 148, 593, 780, 781, 782, 783, 784, 785, 592, 786, 787, 424, 788, 425, 789, 792, 793, 794, 222, 790, 223, 791, 13, 12, 224, 770, 813, 814, 815, 94, 46, 816, 93, 47, 817, 818, 426, 819, 427, 820, 428, 821, 822, 824, 225, 226, 823, 344, 48, 88, 351, 825, 227, 14, 826, 918, 919, 585, 741, 742, 584, 583, 795, 429, 796, 798, 228, 799, 800, 801, 802, 803, 804, 805, 230, 229, 806, 430, 807, 431, 808, 432, 797, 809, 352, 810, 433, 811, 827, 473, 474, 434, 828, 435, 235, 234, 608, 135, 237, 236, 609, 136, 239, 238, 610, 137, 241, 240, 611, 138, 243, 242, 612, 139, 613, 233, 232, 231, 331, 345, 332, 333, 334, 335, 436, 841, 244, 245, 849, 842, 843, 844, 845, 846, 847, 848, 330, 850, 851, 49, 852, 246, 437, 101, 888, 889, 890, 891, 338, 892, 893, 894, 337, 895, 896, 897, 898, 247, 899, 901, 900, 140, 141, 248, 336, 250, 249, 902, 251, 252, 77, 253, 256, 920, 921, 922, 923, 255, 254, 257, 924, 925, 50, 51, 149, 104, 258, 78, 439, 926, 927, 928, 929, 930, 259, 931, 932, 363, 933, 934, 935, 936, 263, 260, 261, 262, 937, 938, 939, 940, 440, 941, 942, 362, 944, 438, 945, 361, 946, 441, 947, 265, 949, 950, 951, 952, 264, 266, 953, 954, 52, 53, 95, 955, 267, 956, 957, 366, 364, 958, 365, 959, 271, 961, 962, 963, 964, 270, 269, 272, 965, 966, 54, 55, 960, 268, 967, 968, 273, 969, 970, 369, 971, 368, 972, 367, 973, 442, 974, 444, 96, 56, 975, 142, 370, 445, 976, 977, 274, 275, 978, 443, 979, 278, 980, 981, 982, 983, 277, 276, 279, 984, 985, 57, 58, 143, 986, 987, 15, 16, 17, 18, 988, 989, 280, 372, 990, 446, 991, 447, 992, 448, 993, 449, 994, 450, 995, 451, 996, 371, 997, 284, 1005, 1006, 1007, 1008, 282, 281, 285, 1009, 1010, 59, 60, 1004, 283, 1012, 1011, 19, 20, 21, 22, 1013, 286, 1014, 1015, 374, 1016, 452, 1019, 453, 1020, 454, 1021, 455, 1022, 456, 1023, 457, 1024, 373, 1025, 458, 1026, 290, 1028, 1029, 1030, 1031, 288, 287, 291, 1032, 1033, 61, 62, 1027, 289, 1034, 63, 459, 1035, 1037, 1038, 1039, 1040, 460, 1041, 23, 24, 25, 26, 27, 1036, 292, 1042, 1043, 380, 1044, 379, 1045, 378, 1046, 377, 1047, 375, 1048, 376, 1049, 461, 1050, 296, 1054, 1055, 1056, 1057, 294, 293, 297, 1058, 1059, 64, 65, 1053, 295, 1060, 66, 462, 1061, 1063, 1064, 1065, 1066, 463, 1067, 28, 29, 30, 31, 32, 1062, 298, 1068, 1069, 382, 1070, 381, 1071, 464, 1072, 466, 97, 67, 1076, 144, 383, 467, 468, 1077, 1078, 299, 300, 1079, 465, 1082, 1083, 1084, 302, 303, 1085, 1086, 68, 1080, 1081, 301, 1088, 1087, 1089, 304, 1090, 1091, 386, 1092, 385, 1093, 384, 1094, 469, 1095, 1180, 1181, 1182, 306, 307, 308, 1184, 1185, 69, 1183, 1179, 305, 1187, 1188, 1186, 1189, 309, 1190, 1191, 389, 1192, 388, 1193, 387, 1194, 470, 1197, 353, 1103, 1195, 310, 1196, 1017, 311, 1018, 903, 109, 904, 905, 354, 471, 340, 906, 907, 41, 346, 908, 909, 472, 915, 312, 943, 390, 614, 391, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350 }
  uselistorder i32* @r4, { 39, 52, 53, 54, 6, 55, 56, 57, 7, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 45, 46, 47, 68, 69, 70, 71, 72, 73, 74, 75, 76, 729, 730, 77, 78, 8, 1, 79, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 9, 80, 81, 82, 83, 84, 85, 86, 87, 88, 10, 89, 90, 93, 94, 95, 96, 40, 97, 98, 99, 100, 101, 102, 91, 92, 41, 42, 103, 104, 11, 105, 12, 106, 13, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 14, 127, 128, 129, 15, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 48, 49, 50, 51, 43, 44, 645, 646, 292, 293, 747, 748, 749, 647, 648, 752, 757, 758, 759, 760, 761, 762, 763, 750, 142, 143, 144, 346, 347, 348, 751, 258, 16, 259, 260, 261, 262, 263, 264, 753, 756, 145, 146, 147, 148, 649, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 17, 666, 667, 668, 669, 650, 651, 652, 653, 613, 614, 615, 616, 617, 618, 619, 620, 621, 18, 622, 623, 624, 625, 626, 627, 628, 629, 630, 670, 692, 693, 694, 695, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 37, 684, 685, 0, 686, 687, 688, 689, 690, 691, 167, 168, 169, 754, 755, 696, 697, 542, 543, 294, 295, 296, 297, 298, 299, 300, 149, 150, 151, 301, 302, 303, 5, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 2, 314, 315, 316, 698, 699, 19, 700, 701, 702, 170, 171, 172, 173, 174, 175, 176, 177, 393, 394, 353, 354, 163, 164, 178, 179, 180, 181, 154, 155, 152, 153, 156, 157, 158, 159, 160, 161, 162, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 208, 209, 210, 3, 211, 202, 203, 204, 205, 206, 207, 196, 197, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 703, 704, 355, 356, 357, 358, 359, 165, 166, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 251, 252, 253, 254, 255, 256, 257, 265, 20, 21, 22, 23, 24, 25, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 317, 318, 4, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 26, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 27, 438, 28, 439, 29, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 30, 464, 31, 465, 32, 466, 33, 467, 468, 469, 470, 34, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 35, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 36, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 725, 726, 727, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 722, 723, 724, 482, 334, 335, 338, 336, 337, 339, 340, 341, 342, 343, 344, 345, 349, 350, 351, 352, 38, 728 }
}

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i16* @__decompiler_undefined_function_2() local_unnamed_addr

declare i16 @__decompiler_undefined_function_3() local_unnamed_addr

declare i8* @__decompiler_undefined_function_4() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #0

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #0

attributes #0 = { nounwind readnone }
